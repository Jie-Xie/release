; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_08OCOMCJAJ@builtins?$AA@			; `string'
PUBLIC	??_C@_04JPLCBLOA@vars?$AA@			; `string'
PUBLIC	??_C@_03CFFIJAMA@sum?$AA@			; `string'
PUBLIC	??_C@_06GOHDHELE@sorted?$AA@			; `string'
PUBLIC	??_C@_07PPMBCILO@setattr?$AA@			; `string'
PUBLIC	??_C@_05MIMAKCN@round?$AA@			; `string'
PUBLIC	??_C@_04PPMPMPFI@repr?$AA@			; `string'
PUBLIC	??_C@_05IJDJACGD@print?$AA@			; `string'
PUBLIC	??_C@_03JGHBODFD@pow?$AA@			; `string'
PUBLIC	??_C@_03OLBKNFCL@ord?$AA@			; `string'
PUBLIC	??_C@_03LMDMAODN@oct?$AA@			; `string'
PUBLIC	??_C@_04CJGEDOF@next?$AA@			; `string'
PUBLIC	??_C@_03KLIPLJLL@min?$AA@			; `string'
PUBLIC	??_C@_03LJAEFNNE@max?$AA@			; `string'
PUBLIC	??_C@_03BKCJCHLK@len?$AA@			; `string'
PUBLIC	??_C@_04BKLHDIKK@iter?$AA@			; `string'
PUBLIC	??_C@_0L@JALFGOPP@issubclass?$AA@		; `string'
PUBLIC	??_C@_0L@PHLNOMHE@isinstance?$AA@		; `string'
PUBLIC	??_C@_05DFJCHPDH@input?$AA@			; `string'
PUBLIC	??_C@_02EGCJHIOB@id?$AA@			; `string'
PUBLIC	??_C@_03IJNDAFDK@hex?$AA@			; `string'
PUBLIC	??_C@_04OIJGJDKO@hash?$AA@			; `string'
PUBLIC	??_C@_07DHFKBBGI@hasattr?$AA@			; `string'
PUBLIC	??_C@_07HDABHGP@getattr?$AA@			; `string'
PUBLIC	??_C@_06DLEPGFEF@format?$AA@			; `string'
PUBLIC	??_C@_04MGEIEJAD@exec?$AA@			; `string'
PUBLIC	??_C@_04KGAGIKCD@eval?$AA@			; `string'
PUBLIC	??_C@_06MPFFAOOK@divmod?$AA@			; `string'
PUBLIC	??_C@_03DAPAKLGM@dir?$AA@			; `string'
PUBLIC	??_C@_07GGDKJAHK@delattr?$AA@			; `string'
PUBLIC	??_C@_07OLJGFCKG@compile?$AA@			; `string'
PUBLIC	??_C@_03KMOFPJOC@chr?$AA@			; `string'
PUBLIC	??_C@_08DPEDNDHG@callable?$AA@			; `string'
PUBLIC	??_C@_03PDOMKJON@bin?$AA@			; `string'
PUBLIC	??_C@_05OJENGABA@ascii?$AA@			; `string'
PUBLIC	??_C@_03OBJFJEBA@any?$AA@			; `string'
PUBLIC	??_C@_03NFKEKGGK@all?$AA@			; `string'
PUBLIC	??_C@_03BCGAIFPO@abs?$AA@			; `string'
PUBLIC	??_C@_0L@KEEJPJHH@__import__?$AA@		; `string'
PUBLIC	??_C@_0BA@JDLNCAMO@__build_class__?$AA@		; `string'
PUBLIC	??_C@_03LCAAOJEC@zip?$AA@			; `string'
PUBLIC	??_C@_08IBFKALI@__dict__?$AA@			; `string'
PUBLIC	??_C@_04PIMMHFGE@sort?$AA@			; `string'
PUBLIC	??_C@_07KOIEOCCE@reverse?$AA@			; `string'
PUBLIC	??_C@_03ICHNJLJF@key?$AA@			; `string'
PUBLIC	??_C@_08DCHCEAJP@iterable?$AA@			; `string'
PUBLIC	??_C@_07DFGIFNBG@ndigits?$AA@			; `string'
PUBLIC	??_C@_06EBGNBFIA@number?$AA@			; `string'
PUBLIC	??_C@_06EOMHCNPI@errors?$AA@			; `string'
PUBLIC	??_C@_08MLPGAEIK@encoding?$AA@			; `string'
PUBLIC	??_C@_04DAMGJPCA@file?$AA@			; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_03MGBCFPKM@sep?$AA@			; `string'
PUBLIC	??_C@_03HBNNNHNM@map?$AA@			; `string'
PUBLIC	??_C@_08GHMAOHAP@optimize?$AA@			; `string'
PUBLIC	??_C@_0N@FINHDBNP@dont_inherit?$AA@		; `string'
PUBLIC	??_C@_05GECEPKB@flags?$AA@			; `string'
PUBLIC	??_C@_04GMGOKAFF@mode?$AA@			; `string'
PUBLIC	??_C@_08BABJIOEM@filename?$AA@			; `string'
PUBLIC	??_C@_06OEKOLKIL@source?$AA@			; `string'
PUBLIC	??_C@_06EOIELIPE@filter?$AA@			; `string'
PUBLIC	??_C@_0L@NNMACJIG@__reduce__?$AA@		; `string'
PUBLIC	??_C@_05KJNJLLGA@level?$AA@			; `string'
PUBLIC	??_C@_08BGGGONCE@fromlist?$AA@			; `string'
PUBLIC	??_C@_06MPPADOBF@locals?$AA@			; `string'
PUBLIC	??_C@_07NAPALOBA@globals?$AA@			; `string'
PUBLIC	??_C@_04MEMAJGDJ@name?$AA@			; `string'
PUBLIC	??_C@_0M@GLHNIFEH@__prepare__?$AA@		; `string'
PUBLIC	??_C@_05GLCAEPFP@flush?$AA@			; `string'
PUBLIC	??_C@_06FFBIALPD@fileno?$AA@			; `string'
PUBLIC	??_C@_04IHNDNLNK@mbcs?$AA@			; `string'
PUBLIC	Py_FileSystemDefaultEncoding
PUBLIC	Py_HasFileSystemDefaultEncoding
PUBLIC	PyFilter_Type
PUBLIC	PyMap_Type
PUBLIC	PyZip_Type
EXTRN	PyObject_GC_Del:PROC
EXTRN	PyType_GenericAlloc:PROC
EXTRN	PyObject_SelfIter:PROC
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
_BSS	SEGMENT
?round_str@?1??builtin_round@@9@9 DQ 01H DUP (?)	; `builtin_round'::`2'::round_str
_BSS	ENDS
;	COMDAT ??_C@_08OCOMCJAJ@builtins?$AA@
CONST	SEGMENT
??_C@_08OCOMCJAJ@builtins?$AA@ DB 'builtins', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04JPLCBLOA@vars?$AA@
CONST	SEGMENT
??_C@_04JPLCBLOA@vars?$AA@ DB 'vars', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CFFIJAMA@sum?$AA@
CONST	SEGMENT
??_C@_03CFFIJAMA@sum?$AA@ DB 'sum', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06GOHDHELE@sorted?$AA@
CONST	SEGMENT
??_C@_06GOHDHELE@sorted?$AA@ DB 'sorted', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07PPMBCILO@setattr?$AA@
CONST	SEGMENT
??_C@_07PPMBCILO@setattr?$AA@ DB 'setattr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MIMAKCN@round?$AA@
CONST	SEGMENT
??_C@_05MIMAKCN@round?$AA@ DB 'round', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PPMPMPFI@repr?$AA@
CONST	SEGMENT
??_C@_04PPMPMPFI@repr?$AA@ DB 'repr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IJDJACGD@print?$AA@
CONST	SEGMENT
??_C@_05IJDJACGD@print?$AA@ DB 'print', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JGHBODFD@pow?$AA@
CONST	SEGMENT
??_C@_03JGHBODFD@pow?$AA@ DB 'pow', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03OLBKNFCL@ord?$AA@
CONST	SEGMENT
??_C@_03OLBKNFCL@ord?$AA@ DB 'ord', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03LMDMAODN@oct?$AA@
CONST	SEGMENT
??_C@_03LMDMAODN@oct?$AA@ DB 'oct', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04CJGEDOF@next?$AA@
CONST	SEGMENT
??_C@_04CJGEDOF@next?$AA@ DB 'next', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KLIPLJLL@min?$AA@
CONST	SEGMENT
??_C@_03KLIPLJLL@min?$AA@ DB 'min', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03LJAEFNNE@max?$AA@
CONST	SEGMENT
??_C@_03LJAEFNNE@max?$AA@ DB 'max', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03BKCJCHLK@len?$AA@
CONST	SEGMENT
??_C@_03BKCJCHLK@len?$AA@ DB 'len', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04BKLHDIKK@iter?$AA@
CONST	SEGMENT
??_C@_04BKLHDIKK@iter?$AA@ DB 'iter', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JALFGOPP@issubclass?$AA@
CONST	SEGMENT
??_C@_0L@JALFGOPP@issubclass?$AA@ DB 'issubclass', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PHLNOMHE@isinstance?$AA@
CONST	SEGMENT
??_C@_0L@PHLNOMHE@isinstance?$AA@ DB 'isinstance', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05DFJCHPDH@input?$AA@
CONST	SEGMENT
??_C@_05DFJCHPDH@input?$AA@ DB 'input', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EGCJHIOB@id?$AA@
CONST	SEGMENT
??_C@_02EGCJHIOB@id?$AA@ DB 'id', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IJNDAFDK@hex?$AA@
CONST	SEGMENT
??_C@_03IJNDAFDK@hex?$AA@ DB 'hex', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OIJGJDKO@hash?$AA@
CONST	SEGMENT
??_C@_04OIJGJDKO@hash?$AA@ DB 'hash', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DHFKBBGI@hasattr?$AA@
CONST	SEGMENT
??_C@_07DHFKBBGI@hasattr?$AA@ DB 'hasattr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HDABHGP@getattr?$AA@
CONST	SEGMENT
??_C@_07HDABHGP@getattr?$AA@ DB 'getattr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DLEPGFEF@format?$AA@
CONST	SEGMENT
??_C@_06DLEPGFEF@format?$AA@ DB 'format', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MGEIEJAD@exec?$AA@
CONST	SEGMENT
??_C@_04MGEIEJAD@exec?$AA@ DB 'exec', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KGAGIKCD@eval?$AA@
CONST	SEGMENT
??_C@_04KGAGIKCD@eval?$AA@ DB 'eval', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MPFFAOOK@divmod?$AA@
CONST	SEGMENT
??_C@_06MPFFAOOK@divmod?$AA@ DB 'divmod', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DAPAKLGM@dir?$AA@
CONST	SEGMENT
??_C@_03DAPAKLGM@dir?$AA@ DB 'dir', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07GGDKJAHK@delattr?$AA@
CONST	SEGMENT
??_C@_07GGDKJAHK@delattr?$AA@ DB 'delattr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OLJGFCKG@compile?$AA@
CONST	SEGMENT
??_C@_07OLJGFCKG@compile?$AA@ DB 'compile', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KMOFPJOC@chr?$AA@
CONST	SEGMENT
??_C@_03KMOFPJOC@chr?$AA@ DB 'chr', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08DPEDNDHG@callable?$AA@
CONST	SEGMENT
??_C@_08DPEDNDHG@callable?$AA@ DB 'callable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03PDOMKJON@bin?$AA@
CONST	SEGMENT
??_C@_03PDOMKJON@bin?$AA@ DB 'bin', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OJENGABA@ascii?$AA@
CONST	SEGMENT
??_C@_05OJENGABA@ascii?$AA@ DB 'ascii', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03OBJFJEBA@any?$AA@
CONST	SEGMENT
??_C@_03OBJFJEBA@any?$AA@ DB 'any', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NFKEKGGK@all?$AA@
CONST	SEGMENT
??_C@_03NFKEKGGK@all?$AA@ DB 'all', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03BCGAIFPO@abs?$AA@
CONST	SEGMENT
??_C@_03BCGAIFPO@abs?$AA@ DB 'abs', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KEEJPJHH@__import__?$AA@
CONST	SEGMENT
??_C@_0L@KEEJPJHH@__import__?$AA@ DB '__import__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JDLNCAMO@__build_class__?$AA@
CONST	SEGMENT
??_C@_0BA@JDLNCAMO@__build_class__?$AA@ DB '__build_class__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03LCAAOJEC@zip?$AA@
CONST	SEGMENT
??_C@_03LCAAOJEC@zip?$AA@ DB 'zip', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08IBFKALI@__dict__?$AA@
CONST	SEGMENT
??_C@_08IBFKALI@__dict__?$AA@ DB '__dict__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04PIMMHFGE@sort?$AA@
CONST	SEGMENT
??_C@_04PIMMHFGE@sort?$AA@ DB 'sort', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KOIEOCCE@reverse?$AA@
CONST	SEGMENT
??_C@_07KOIEOCCE@reverse?$AA@ DB 'reverse', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03ICHNJLJF@key?$AA@
CONST	SEGMENT
??_C@_03ICHNJLJF@key?$AA@ DB 'key', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08DCHCEAJP@iterable?$AA@
CONST	SEGMENT
??_C@_08DCHCEAJP@iterable?$AA@ DB 'iterable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DFGIFNBG@ndigits?$AA@
CONST	SEGMENT
??_C@_07DFGIFNBG@ndigits?$AA@ DB 'ndigits', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EBGNBFIA@number?$AA@
CONST	SEGMENT
??_C@_06EBGNBFIA@number?$AA@ DB 'number', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EOMHCNPI@errors?$AA@
CONST	SEGMENT
??_C@_06EOMHCNPI@errors?$AA@ DB 'errors', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MLPGAEIK@encoding?$AA@
CONST	SEGMENT
??_C@_08MLPGAEIK@encoding?$AA@ DB 'encoding', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04DAMGJPCA@file?$AA@
CONST	SEGMENT
??_C@_04DAMGJPCA@file?$AA@ DB 'file', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MGBCFPKM@sep?$AA@
CONST	SEGMENT
??_C@_03MGBCFPKM@sep?$AA@ DB 'sep', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03HBNNNHNM@map?$AA@
CONST	SEGMENT
??_C@_03HBNNNHNM@map?$AA@ DB 'map', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08GHMAOHAP@optimize?$AA@
CONST	SEGMENT
??_C@_08GHMAOHAP@optimize?$AA@ DB 'optimize', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FINHDBNP@dont_inherit?$AA@
CONST	SEGMENT
??_C@_0N@FINHDBNP@dont_inherit?$AA@ DB 'dont_inherit', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05GECEPKB@flags?$AA@
CONST	SEGMENT
??_C@_05GECEPKB@flags?$AA@ DB 'flags', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GMGOKAFF@mode?$AA@
CONST	SEGMENT
??_C@_04GMGOKAFF@mode?$AA@ DB 'mode', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BABJIOEM@filename?$AA@
CONST	SEGMENT
??_C@_08BABJIOEM@filename?$AA@ DB 'filename', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06OEKOLKIL@source?$AA@
CONST	SEGMENT
??_C@_06OEKOLKIL@source?$AA@ DB 'source', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EOIELIPE@filter?$AA@
CONST	SEGMENT
??_C@_06EOIELIPE@filter?$AA@ DB 'filter', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNMACJIG@__reduce__?$AA@
CONST	SEGMENT
??_C@_0L@NNMACJIG@__reduce__?$AA@ DB '__reduce__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05KJNJLLGA@level?$AA@
CONST	SEGMENT
??_C@_05KJNJLLGA@level?$AA@ DB 'level', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BGGGONCE@fromlist?$AA@
CONST	SEGMENT
??_C@_08BGGGONCE@fromlist?$AA@ DB 'fromlist', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06MPPADOBF@locals?$AA@
CONST	SEGMENT
??_C@_06MPPADOBF@locals?$AA@ DB 'locals', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NAPALOBA@globals?$AA@
CONST	SEGMENT
??_C@_07NAPALOBA@globals?$AA@ DB 'globals', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MEMAJGDJ@name?$AA@
CONST	SEGMENT
??_C@_04MEMAJGDJ@name?$AA@ DB 'name', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GLHNIFEH@__prepare__?$AA@
CONST	SEGMENT
??_C@_0M@GLHNIFEH@__prepare__?$AA@ DB '__prepare__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05GLCAEPFP@flush?$AA@
CONST	SEGMENT
??_C@_05GLCAEPFP@flush?$AA@ DB 'flush', 00H		; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId___dict__@?4??builtin_vars@@9@9 DQ 0000000000000000H ; `builtin_vars'::`5'::PyId___dict__
	DQ	FLAT:??_C@_08IBFKALI@__dict__?$AA@
	DQ	0000000000000000H
?PyId_sort@?1??builtin_sorted@@9@9 DQ 0000000000000000H	; `builtin_sorted'::`2'::PyId_sort
	DQ	FLAT:??_C@_04PIMMHFGE@sort?$AA@
	DQ	0000000000000000H
?PyId_errors@?9??builtin_input@@9@9 DQ 0000000000000000H ; `builtin_input'::`10'::PyId_errors
	DQ	FLAT:??_C@_06EOMHCNPI@errors?$AA@
	DQ	0000000000000000H
?PyId_encoding@?9??builtin_input@@9@9 DQ 0000000000000000H ; `builtin_input'::`10'::PyId_encoding
	DQ	FLAT:??_C@_08MLPGAEIK@encoding?$AA@
	DQ	0000000000000000H
?PyId___prepare__@?1??builtin___build_class__@@9@9 DQ 0000000000000000H ; `builtin___build_class__'::`2'::PyId___prepare__
	DQ	FLAT:??_C@_0M@GLHNIFEH@__prepare__?$AA@
	DQ	0000000000000000H
PyId_flush DQ	0000000000000000H
	DQ	FLAT:??_C@_05GLCAEPFP@flush?$AA@
	DQ	0000000000000000H
PyId_fileno DQ	0000000000000000H
	DQ	FLAT:??_C@_06FFBIALPD@fileno?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_06FFBIALPD@fileno?$AA@
CONST	SEGMENT
??_C@_06FFBIALPD@fileno?$AA@ DB 'fileno', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
Py_FileSystemDefaultEncoding DQ FLAT:??_C@_04IHNDNLNK@mbcs?$AA@
Py_HasFileSystemDefaultEncoding DD 01H
	ORG $+4
build_class_doc DB '__build_class__(func, name, *bases, metaclass=None, *'
	DB	'*kwds) -> class', 0aH, 0aH, 'Internal helper function used by'
	DB	' the class statement.', 00H
	ORG $+4
?kwlist@?1??builtin___import__@@9@9 DQ FLAT:??_C@_04MEMAJGDJ@name?$AA@ ; `builtin___import__'::`2'::kwlist
	DQ	FLAT:??_C@_07NAPALOBA@globals?$AA@
	DQ	FLAT:??_C@_06MPPADOBF@locals?$AA@
	DQ	FLAT:??_C@_08BGGGONCE@fromlist?$AA@
	DQ	FLAT:??_C@_05KJNJLLGA@level?$AA@
	DQ	0000000000000000H
import_doc DB	'__import__(name, globals=None, locals=None, fromlist=(),'
	DB	' level=0) -> module', 0aH, 0aH, 'Import a module. Because thi'
	DB	's function is meant for use by the Python', 0aH, 'interpreter'
	DB	' and not for general use it is better to use', 0aH, 'importli'
	DB	'b.import_module() to programmatically import a module.', 0aH, 0aH
	DB	'The globals argument is only used to determine the context;', 0aH
	DB	'they are not modified.  The locals argument is unused.  The f'
	DB	'romlist', 0aH, 'should be a list of names to emulate ``from n'
	DB	'ame import ...'''', or an', 0aH, 'empty list to emulate ``imp'
	DB	'ort name''''.', 0aH, 'When importing a module from a package,'
	DB	' note that __import__(''A.B'', ...)', 0aH, 'returns package A'
	DB	' when fromlist is empty, but its submodule B when', 0aH, 'fro'
	DB	'mlist is not empty.  Level is used to determine whether to pe'
	DB	'rform ', 0aH, 'absolute or relative imports. 0 is absolute wh'
	DB	'ile a positive number', 0aH, 'is the number of parent directo'
	DB	'ries to search relative to the current module.', 00H
	ORG $+3
abs_doc	DB	'abs(number) -> number', 0aH, 0aH, 'Return the absolute v'
	DB	'alue of the argument.', 00H
	ORG $+14
all_doc	DB	'all(iterable) -> bool', 0aH, 0aH, 'Return True if bool(x'
	DB	') is True for all values x in the iterable.', 0aH, 'If the it'
	DB	'erable is empty, return True.', 00H
	ORG $+1
any_doc	DB	'any(iterable) -> bool', 0aH, 0aH, 'Return True if bool(x'
	DB	') is True for any x in the iterable.', 0aH, 'If the iterable '
	DB	'is empty, return False.', 00H
	ORG $+7
ascii_doc DB	'ascii(object) -> string', 0aH, 0aH, 'As repr(), return a'
	DB	' string containing a printable representation of an', 0aH, 'o'
	DB	'bject, but escape the non-ASCII characters in the string retu'
	DB	'rned by', 0aH, 'repr() using \x, \u or \U escapes.  This gene'
	DB	'rates a string similar', 0aH, 'to that returned by repr() in '
	DB	'Python 2.', 00H
	ORG $+14
bin_doc	DB	'bin(number) -> string', 0aH, 0aH, 'Return the binary rep'
	DB	'resentation of an integer.', 00H
	ORG $+9
callable_doc DB	'callable(object) -> bool', 0aH, 0aH, 'Return whether the'
	DB	' object is callable (i.e., some kind of function).', 0aH, 'No'
	DB	'te that classes are callable, as are instances of classes wit'
	DB	'h a', 0aH, '__call__() method.', 00H
	ORG $+3
reduce_doc DB	'Return state information for pickling.', 00H
	ORG $+1
filter_methods DQ FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:filter_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
filter_doc DB	'filter(function or None, iterable) --> filter object', 0aH
	DB	0aH, 'Return an iterator yielding those items of iterable for '
	DB	'which function(item)', 0aH, 'is true. If function is None, re'
	DB	'turn the items that are true.', 00H
	ORG $+15
PyFilter_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_06EOIELIPE@filter?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:filter_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:filter_doc
	DQ	FLAT:filter_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:filter_next
	DQ	FLAT:filter_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:filter_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
format_doc DB	'format(value[, format_spec]) -> string', 0aH, 0aH, 'Retu'
	DB	'rns value.__format__(format_spec)', 0aH, 'format_spec default'
	DB	's to ""', 00H
	ORG $+7
chr_doc	DB	'chr(i) -> Unicode character', 0aH, 0aH, 'Return a Unicod'
	DB	'e string of one character with ordinal i; 0 <= i <= 0x10ffff.'
	DB	00H
	ORG $+6
?kwlist@?1??builtin_compile@@9@9 DQ FLAT:??_C@_06OEKOLKIL@source?$AA@ ; `builtin_compile'::`2'::kwlist
	DQ	FLAT:??_C@_08BABJIOEM@filename?$AA@
	DQ	FLAT:??_C@_04GMGOKAFF@mode?$AA@
	DQ	FLAT:??_C@_05GECEPKB@flags?$AA@
	DQ	FLAT:??_C@_0N@FINHDBNP@dont_inherit?$AA@
	DQ	FLAT:??_C@_08GHMAOHAP@optimize?$AA@
	DQ	0000000000000000H
	ORG $+8
compile_doc DB	'compile(source, filename, mode[, flags[, dont_inherit]])'
	DB	' -> code object', 0aH, 0aH, 'Compile the source (a Python mod'
	DB	'ule, statement or expression)', 0aH, 'into a code object that'
	DB	' can be executed by exec() or eval().', 0aH, 'The filename wi'
	DB	'll be used for run-time error messages.', 0aH, 'The mode must'
	DB	' be ''exec'' to compile a module, ''single'' to compile a', 0aH
	DB	'single (interactive) statement, or ''eval'' to compile an exp'
	DB	'ression.', 0aH, 'The flags argument, if present, controls whi'
	DB	'ch future statements influence', 0aH, 'the compilation of the'
	DB	' code.', 0aH, 'The dont_inherit argument, if non-zero, stops '
	DB	'the compilation inheriting', 0aH, 'the effects of any future '
	DB	'statements in effect in the code calling', 0aH, 'compile; if '
	DB	'absent or zero these statements do influence the compilation,'
	DB	0aH, 'in addition to any features explicitly specified.', 00H
	ORG $+14
dir_doc	DB	'dir([object]) -> list of strings', 0aH, 0aH, 'If called '
	DB	'without an argument, return the names in the current scope.', 0aH
	DB	'Else, return an alphabetized list of names comprising (some o'
	DB	'f) the attributes', 0aH, 'of the given object, and of attribu'
	DB	'tes reachable from it.', 0aH, 'If the object supplies a metho'
	DB	'd named __dir__, it will be used; otherwise', 0aH, 'the defau'
	DB	'lt dir() logic is used and returns:', 0aH, '  for a module ob'
	DB	'ject: the module''s attributes.', 0aH, '  for a class object:'
	DB	'  its attributes, and recursively the attributes', 0aH, '    '
	DB	'of its bases.', 0aH, '  for any other object: its attributes,'
	DB	' its class''s attributes, and', 0aH, '    recursively the att'
	DB	'ributes of its class''s base classes.', 00H
divmod_doc DB	'divmod(x, y) -> (div, mod)', 0aH, 0aH, 'Return the tuple'
	DB	' ((x-x%y)/y, x%y).  Invariant: div*y + mod == x.', 00H
	ORG $+3
eval_doc DB	'eval(source[, globals[, locals]]) -> value', 0aH, 0aH, 'E'
	DB	'valuate the source in the context of globals and locals.', 0aH
	DB	'The source may be a string representing a Python expression', 0aH
	DB	'or a code object as returned by compile().', 0aH, 'The global'
	DB	's must be a dictionary and locals can be any mapping,', 0aH, 'd'
	DB	'efaulting to the current globals and locals.', 0aH, 'If only '
	DB	'globals is given, locals defaults to it.', 0aH, 00H
	ORG $+3
exec_doc DB	'exec(object[, globals[, locals]])', 0aH, 0aH, 'Read and '
	DB	'execute code from an object, which can be a string or a code', 0aH
	DB	'object.', 0aH, 'The globals and locals are dictionaries, defa'
	DB	'ulting to the current', 0aH, 'globals and locals.  If only gl'
	DB	'obals is given, locals defaults to it.', 00H
	ORG $+6
getattr_doc DB	'getattr(object, name[, default]) -> value', 0aH, 0aH, 'G'
	DB	'et a named attribute from an object; getattr(x, ''y'') is equ'
	DB	'ivalent to x.y.', 0aH, 'When a default argument is given, it '
	DB	'is returned when the attribute doesn''t', 0aH, 'exist; withou'
	DB	't it, an exception is raised in that case.', 00H
	ORG $+5
globals_doc DB	'globals() -> dictionary', 0aH, 0aH, 'Return the dictiona'
	DB	'ry containing the current scope''s global variables.', 00H
hasattr_doc DB	'hasattr(object, name) -> bool', 0aH, 0aH, 'Return whethe'
	DB	'r the object has an attribute with the given name.', 0aH, '(T'
	DB	'his is done by calling getattr(object, name) and catching Att'
	DB	'ributeError.)', 00H
	ORG $+4
id_doc	DB	'id(object) -> integer', 0aH, 0aH, 'Return the identity o'
	DB	'f an object.  This is guaranteed to be unique among', 0aH, 's'
	DB	'imultaneously existing objects.  (Hint: it''s the object''s m'
	DB	'emory address.)', 00H
	ORG $+4
map_methods DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:map_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
map_doc	DB	'map(func, *iterables) --> map object', 0aH, 0aH, 'Make a'
	DB	'n iterator that computes the function using arguments from', 0aH
	DB	'each of the iterables.  Stops when the shortest iterable is e'
	DB	'xhausted.', 00H
	ORG $+2
PyMap_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_03HBNNNHNM@map?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:map_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:map_doc
	DQ	FLAT:map_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:map_next
	DQ	FLAT:map_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:map_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
next_doc DB	'next(iterator[, default])', 0aH, 0aH, 'Return the next i'
	DB	'tem from the iterator. If default is given and the iterator', 0aH
	DB	'is exhausted, it is returned instead of raising StopIteration'
	DB	'.', 00H
	ORG $+9
setattr_doc DB	'setattr(object, name, value)', 0aH, 0aH, 'Set a named at'
	DB	'tribute on an object; setattr(x, ''y'', v) is equivalent to', 0aH
	DB	'``x.y = v''''.', 00H
	ORG $+13
delattr_doc DB	'delattr(object, name)', 0aH, 0aH, 'Delete a named attrib'
	DB	'ute on an object; delattr(x, ''y'') is equivalent to', 0aH, '`'
	DB	'`del x.y''''.', 00H
	ORG $+4
hash_doc DB	'hash(object) -> integer', 0aH, 0aH, 'Return a hash value'
	DB	' for the object.  Two objects with the same value have', 0aH, 't'
	DB	'he same hash value.  The reverse is not necessarily true, but'
	DB	' likely.', 00H
	ORG $+6
hex_doc	DB	'hex(number) -> string', 0aH, 0aH, 'Return the hexadecima'
	DB	'l representation of an integer.', 00H
	ORG $+4
iter_doc DB	'iter(iterable) -> iterator', 0aH, 'iter(callable, sentin'
	DB	'el) -> iterator', 0aH, 0aH, 'Get an iterator from an object. '
	DB	' In the first form, the argument must', 0aH, 'supply its own '
	DB	'iterator, or be a sequence.', 0aH, 'In the second form, the c'
	DB	'allable is called until it returns the sentinel.', 00H
	ORG $+4
len_doc	DB	'len(object) -> integer', 0aH, 0aH, 'Return the number of'
	DB	' items of a sequence or mapping.', 00H
	ORG $+3
locals_doc DB	'locals() -> dictionary', 0aH, 0aH, 'Update and return a '
	DB	'dictionary containing the current scope''s local variables.', 00H
	ORG $+9
min_doc	DB	'min(iterable[, key=func]) -> value', 0aH, 'min(a, b, c, '
	DB	'...[, key=func]) -> value', 0aH, 0aH, 'With a single iterable'
	DB	' argument, return its smallest item.', 0aH, 'With two or more'
	DB	' arguments, return the smallest argument.', 00H
max_doc	DB	'max(iterable[, key=func]) -> value', 0aH, 'max(a, b, c, '
	DB	'...[, key=func]) -> value', 0aH, 0aH, 'With a single iterable'
	DB	' argument, return its largest item.', 0aH, 'With two or more '
	DB	'arguments, return the largest argument.', 00H
	ORG $+2
oct_doc	DB	'oct(number) -> string', 0aH, 0aH, 'Return the octal repr'
	DB	'esentation of an integer.', 00H
	ORG $+10
ord_doc	DB	'ord(c) -> integer', 0aH, 0aH, 'Return the integer ordina'
	DB	'l of a one-character string.', 00H
	ORG $+7
pow_doc	DB	'pow(x, y[, z]) -> number', 0aH, 0aH, 'With two arguments'
	DB	', equivalent to x**y.  With three arguments,', 0aH, 'equivale'
	DB	'nt to (x**y) % z, but may be more efficient (e.g. for ints).', 00H
	ORG $+2
?kwlist@?1??builtin_print@@9@9 DQ FLAT:??_C@_03MGBCFPKM@sep?$AA@ ; `builtin_print'::`2'::kwlist
	DQ	FLAT:??_C@_03JBJLGPFL@end?$AA@
	DQ	FLAT:??_C@_04DAMGJPCA@file?$AA@
	DQ	FLAT:??_C@_05GLCAEPFP@flush?$AA@
	DQ	0000000000000000H
	ORG $+8
print_doc DB	'print(value, ..., sep='' '', end=''\n'', file=sys.stdout'
	DB	', flush=False)', 0aH, 0aH, 'Prints the values to a stream, or'
	DB	' to sys.stdout by default.', 0aH, 'Optional keyword arguments'
	DB	':', 0aH, 'file:  a file-like object (stream); defaults to the'
	DB	' current sys.stdout.', 0aH, 'sep:   string inserted between v'
	DB	'alues, default a space.', 0aH, 'end:   string appended after '
	DB	'the last value, default a newline.', 0aH, 'flush: whether to '
	DB	'forcibly flush the stream.', 00H
	ORG $+7
input_doc DB	'input([prompt]) -> string', 0aH, 0aH, 'Read a string fro'
	DB	'm standard input.  The trailing newline is stripped.', 0aH, 'I'
	DB	'f the user hits EOF (Unix: Ctl-D, Windows: Ctl-Z+Return), rai'
	DB	'se EOFError.', 0aH, 'On Unix, GNU readline is used if enabled'
	DB	'.  The prompt string, if given,', 0aH, 'is printed without a '
	DB	'trailing newline before reading.', 00H
	ORG $+6
repr_doc DB	'repr(object) -> string', 0aH, 0aH, 'Return the canonical'
	DB	' string representation of the object.', 0aH, 'For most object'
	DB	' types, eval(repr(object)) == object.', 00H
	ORG $+1
?kwlist@?1??builtin_round@@9@9 DQ FLAT:??_C@_06EBGNBFIA@number?$AA@ ; `builtin_round'::`2'::kwlist
	DQ	FLAT:??_C@_07DFGIFNBG@ndigits?$AA@
	DQ	0000000000000000H
round_doc DB	'round(number[, ndigits]) -> number', 0aH, 0aH, 'Round a '
	DB	'number to a given precision in decimal digits (default 0 digi'
	DB	'ts).', 0aH, 'This returns an int when called with one argumen'
	DB	't, otherwise the', 0aH, 'same type as the number. ndigits may'
	DB	' be negative.', 00H
	ORG $+7
?kwlist@?1??builtin_sorted@@9@9 DQ FLAT:??_C@_08DCHCEAJP@iterable?$AA@ ; `builtin_sorted'::`2'::kwlist
	DQ	FLAT:??_C@_03ICHNJLJF@key?$AA@
	DQ	FLAT:??_C@_07KOIEOCCE@reverse?$AA@
	DQ	0000000000000000H
sorted_doc DB	'sorted(iterable, key=None, reverse=False) --> new sorted'
	DB	' list', 00H
	ORG $+10
vars_doc DB	'vars([object]) -> dictionary', 0aH, 0aH, 'Without argume'
	DB	'nts, equivalent to locals().', 0aH, 'With an argument, equiva'
	DB	'lent to object.__dict__.', 00H
	ORG $+6
sum_doc	DB	'sum(iterable[, start]) -> value', 0aH, 0aH, 'Return the '
	DB	'sum of an iterable of numbers (NOT strings) plus the value', 0aH
	DB	'of parameter ''start'' (which defaults to 0).  When the itera'
	DB	'ble is', 0aH, 'empty, return start.', 00H
	ORG $+2
isinstance_doc DB 'isinstance(object, class-or-type-or-tuple) -> bool', 0aH
	DB	0aH, 'Return whether an object is an instance of a class or of'
	DB	' a subclass thereof.', 0aH, 'With a type as second argument, '
	DB	'return whether that is the object''s type.', 0aH, 'The form u'
	DB	'sing a tuple, isinstance(x, (A, B, ...)), is a shortcut for', 0aH
	DB	'isinstance(x, A) or isinstance(x, B) or ... (etc.).', 00H
	ORG $+11
issubclass_doc DB 'issubclass(C, B) -> bool', 0aH, 0aH, 'Return whether c'
	DB	'lass C is a subclass (i.e., a derived class) of class B.', 0aH
	DB	'When using a tuple as the second argument issubclass(X, (A, B'
	DB	', ...)),', 0aH, 'is a shortcut for issubclass(X, A) or issubc'
	DB	'lass(X, B) or ... (etc.).', 00H
	ORG $+1
zip_methods DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:zip_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
zip_doc	DB	'zip(iter1 [,iter2 [...]]) --> zip object', 0aH, 0aH, 'Re'
	DB	'turn a zip object whose .__next__() method returns a tuple wh'
	DB	'ere', 0aH, 'the i-th element comes from the i-th iterable arg'
	DB	'ument.  The .__next__()', 0aH, 'method continues until the sh'
	DB	'ortest iterable in the argument sequence', 0aH, 'is exhausted'
	DB	' and then it raises StopIteration.', 00H
	ORG $+5
PyZip_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_03LCAAOJEC@zip?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:zip_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:zip_doc
	DQ	FLAT:zip_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:zip_next
	DQ	FLAT:zip_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:zip_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
builtin_methods DQ FLAT:??_C@_0BA@JDLNCAMO@__build_class__?$AA@
	DQ	FLAT:builtin___build_class__
	DD	03H
	ORG $+4
	DQ	FLAT:build_class_doc
	DQ	FLAT:??_C@_0L@KEEJPJHH@__import__?$AA@
	DQ	FLAT:builtin___import__
	DD	03H
	ORG $+4
	DQ	FLAT:import_doc
	DQ	FLAT:??_C@_03BCGAIFPO@abs?$AA@
	DQ	FLAT:builtin_abs
	DD	08H
	ORG $+4
	DQ	FLAT:abs_doc
	DQ	FLAT:??_C@_03NFKEKGGK@all?$AA@
	DQ	FLAT:builtin_all
	DD	08H
	ORG $+4
	DQ	FLAT:all_doc
	DQ	FLAT:??_C@_03OBJFJEBA@any?$AA@
	DQ	FLAT:builtin_any
	DD	08H
	ORG $+4
	DQ	FLAT:any_doc
	DQ	FLAT:??_C@_05OJENGABA@ascii?$AA@
	DQ	FLAT:builtin_ascii
	DD	08H
	ORG $+4
	DQ	FLAT:ascii_doc
	DQ	FLAT:??_C@_03PDOMKJON@bin?$AA@
	DQ	FLAT:builtin_bin
	DD	08H
	ORG $+4
	DQ	FLAT:bin_doc
	DQ	FLAT:??_C@_08DPEDNDHG@callable?$AA@
	DQ	FLAT:builtin_callable
	DD	08H
	ORG $+4
	DQ	FLAT:callable_doc
	DQ	FLAT:??_C@_03KMOFPJOC@chr?$AA@
	DQ	FLAT:builtin_chr
	DD	01H
	ORG $+4
	DQ	FLAT:chr_doc
	DQ	FLAT:??_C@_07OLJGFCKG@compile?$AA@
	DQ	FLAT:builtin_compile
	DD	03H
	ORG $+4
	DQ	FLAT:compile_doc
	DQ	FLAT:??_C@_07GGDKJAHK@delattr?$AA@
	DQ	FLAT:builtin_delattr
	DD	01H
	ORG $+4
	DQ	FLAT:delattr_doc
	DQ	FLAT:??_C@_03DAPAKLGM@dir?$AA@
	DQ	FLAT:builtin_dir
	DD	01H
	ORG $+4
	DQ	FLAT:dir_doc
	DQ	FLAT:??_C@_06MPFFAOOK@divmod?$AA@
	DQ	FLAT:builtin_divmod
	DD	01H
	ORG $+4
	DQ	FLAT:divmod_doc
	DQ	FLAT:??_C@_04KGAGIKCD@eval?$AA@
	DQ	FLAT:builtin_eval
	DD	01H
	ORG $+4
	DQ	FLAT:eval_doc
	DQ	FLAT:??_C@_04MGEIEJAD@exec?$AA@
	DQ	FLAT:builtin_exec
	DD	01H
	ORG $+4
	DQ	FLAT:exec_doc
	DQ	FLAT:??_C@_06DLEPGFEF@format?$AA@
	DQ	FLAT:builtin_format
	DD	01H
	ORG $+4
	DQ	FLAT:format_doc
	DQ	FLAT:??_C@_07HDABHGP@getattr?$AA@
	DQ	FLAT:builtin_getattr
	DD	01H
	ORG $+4
	DQ	FLAT:getattr_doc
	DQ	FLAT:??_C@_07NAPALOBA@globals?$AA@
	DQ	FLAT:builtin_globals
	DD	04H
	ORG $+4
	DQ	FLAT:globals_doc
	DQ	FLAT:??_C@_07DHFKBBGI@hasattr?$AA@
	DQ	FLAT:builtin_hasattr
	DD	01H
	ORG $+4
	DQ	FLAT:hasattr_doc
	DQ	FLAT:??_C@_04OIJGJDKO@hash?$AA@
	DQ	FLAT:builtin_hash
	DD	08H
	ORG $+4
	DQ	FLAT:hash_doc
	DQ	FLAT:??_C@_03IJNDAFDK@hex?$AA@
	DQ	FLAT:builtin_hex
	DD	08H
	ORG $+4
	DQ	FLAT:hex_doc
	DQ	FLAT:??_C@_02EGCJHIOB@id?$AA@
	DQ	FLAT:builtin_id
	DD	08H
	ORG $+4
	DQ	FLAT:id_doc
	DQ	FLAT:??_C@_05DFJCHPDH@input?$AA@
	DQ	FLAT:builtin_input
	DD	01H
	ORG $+4
	DQ	FLAT:input_doc
	DQ	FLAT:??_C@_0L@PHLNOMHE@isinstance?$AA@
	DQ	FLAT:builtin_isinstance
	DD	01H
	ORG $+4
	DQ	FLAT:isinstance_doc
	DQ	FLAT:??_C@_0L@JALFGOPP@issubclass?$AA@
	DQ	FLAT:builtin_issubclass
	DD	01H
	ORG $+4
	DQ	FLAT:issubclass_doc
	DQ	FLAT:??_C@_04BKLHDIKK@iter?$AA@
	DQ	FLAT:builtin_iter
	DD	01H
	ORG $+4
	DQ	FLAT:iter_doc
	DQ	FLAT:??_C@_03BKCJCHLK@len?$AA@
	DQ	FLAT:builtin_len
	DD	08H
	ORG $+4
	DQ	FLAT:len_doc
	DQ	FLAT:??_C@_06MPPADOBF@locals?$AA@
	DQ	FLAT:builtin_locals
	DD	04H
	ORG $+4
	DQ	FLAT:locals_doc
	DQ	FLAT:??_C@_03LJAEFNNE@max?$AA@
	DQ	FLAT:builtin_max
	DD	03H
	ORG $+4
	DQ	FLAT:max_doc
	DQ	FLAT:??_C@_03KLIPLJLL@min?$AA@
	DQ	FLAT:builtin_min
	DD	03H
	ORG $+4
	DQ	FLAT:min_doc
	DQ	FLAT:??_C@_04CJGEDOF@next?$AA@
	DQ	FLAT:builtin_next
	DD	01H
	ORG $+4
	DQ	FLAT:next_doc
	DQ	FLAT:??_C@_03LMDMAODN@oct?$AA@
	DQ	FLAT:builtin_oct
	DD	08H
	ORG $+4
	DQ	FLAT:oct_doc
	DQ	FLAT:??_C@_03OLBKNFCL@ord?$AA@
	DQ	FLAT:builtin_ord
	DD	08H
	ORG $+4
	DQ	FLAT:ord_doc
	DQ	FLAT:??_C@_03JGHBODFD@pow?$AA@
	DQ	FLAT:builtin_pow
	DD	01H
	ORG $+4
	DQ	FLAT:pow_doc
	DQ	FLAT:??_C@_05IJDJACGD@print?$AA@
	DQ	FLAT:builtin_print
	DD	03H
	ORG $+4
	DQ	FLAT:print_doc
	DQ	FLAT:??_C@_04PPMPMPFI@repr?$AA@
	DQ	FLAT:builtin_repr
	DD	08H
	ORG $+4
	DQ	FLAT:repr_doc
	DQ	FLAT:??_C@_05MIMAKCN@round?$AA@
	DQ	FLAT:builtin_round
	DD	03H
	ORG $+4
	DQ	FLAT:round_doc
	DQ	FLAT:??_C@_07PPMBCILO@setattr?$AA@
	DQ	FLAT:builtin_setattr
	DD	01H
	ORG $+4
	DQ	FLAT:setattr_doc
	DQ	FLAT:??_C@_06GOHDHELE@sorted?$AA@
	DQ	FLAT:builtin_sorted
	DD	03H
	ORG $+4
	DQ	FLAT:sorted_doc
	DQ	FLAT:??_C@_03CFFIJAMA@sum?$AA@
	DQ	FLAT:builtin_sum
	DD	01H
	ORG $+4
	DQ	FLAT:sum_doc
	DQ	FLAT:??_C@_04JPLCBLOA@vars?$AA@
	DQ	FLAT:builtin_vars
	DD	01H
	ORG $+4
	DQ	FLAT:vars_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
builtin_doc DB	'Built-in functions, exceptions, and other objects.', 0aH
	DB	0aH, 'Noteworthy: None is the `nil'' object; Ellipsis represen'
	DB	'ts `...'' in slices.', 00H
	ORG $+1
builtinsmodule DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
	DQ	FLAT:builtin_doc
	DQ	ffffffffffffffffH
	DQ	FLAT:builtin_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
;	COMDAT ??_C@_04IHNDNLNK@mbcs?$AA@
CONST	SEGMENT
??_C@_04IHNDNLNK@mbcs?$AA@ DB 'mbcs', 00H		; `string'
CONST	ENDS
PUBLIC	_Py_IncRef
PUBLIC	??_C@_09CINOIPHL@metaclass?$AA@			; `string'
PUBLIC	_Py_DecRef
PUBLIC	??_C@_0CG@PKEPHLIG@__build_class__?3?5name?5is?5not?5a?5s@ ; `string'
PUBLIC	??_C@_0CG@ENOJBFEJ@__build_class__?3?5not?5enough?5argu@ ; `string'
PUBLIC	??_C@_0CF@JCKIPNDO@__build_class__?3?5args?5is?5not?5a?5t@ ; `string'
PUBLIC	??_C@_1BK@BBNJEEGL@?$AAa?$AAr?$AAg?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@NKNCFJLO@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAb?$AAl?$AAt?$AAi?$AAn?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@ ; `string'
EXTRN	PyCell_Set:PROC
EXTRN	PyCell_Type:BYTE
EXTRN	PyObject_CallFunctionObjArgs:PROC
EXTRN	PyEval_CallObjectWithKeywords:PROC
EXTRN	PyTuple_Pack:PROC
EXTRN	PyDict_New:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_AttributeError:QWORD
EXTRN	_PyObject_GetAttrId:PROC
EXTRN	_PyType_CalculateMetaclass:PROC
EXTRN	PyDict_DelItemString:PROC
EXTRN	PyDict_GetItemString:PROC
EXTRN	PyDict_Copy:PROC
EXTRN	PyTuple_GetSlice:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	__imp__wassert:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\python\bltinmodule.c
pdata	SEGMENT
$pdata$builtin___build_class__ DD imagerel builtin___build_class__
	DD	imagerel builtin___build_class__+1338
	DD	imagerel $unwind$builtin___build_class__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin___build_class__ DD 021601H
	DD	0150116H
xdata	ENDS
;	COMDAT ??_C@_09CINOIPHL@metaclass?$AA@
CONST	SEGMENT
??_C@_09CINOIPHL@metaclass?$AA@ DB 'metaclass', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@PKEPHLIG@__build_class__?3?5name?5is?5not?5a?5s@
CONST	SEGMENT
??_C@_0CG@PKEPHLIG@__build_class__?3?5name?5is?5not?5a?5s@ DB '__build_cl'
	DB	'ass__: name is not a string', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@ENOJBFEJ@__build_class__?3?5not?5enough?5argu@
CONST	SEGMENT
??_C@_0CG@ENOJBFEJ@__build_class__?3?5not?5enough?5argu@ DB '__build_clas'
	DB	's__: not enough arguments', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JCKIPNDO@__build_class__?3?5args?5is?5not?5a?5t@
CONST	SEGMENT
??_C@_0CF@JCKIPNDO@__build_class__?3?5args?5is?5not?5a?5t@ DB '__build_cl'
	DB	'ass__: args is not a tuple', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@BBNJEEGL@?$AAa?$AAr?$AAg?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@BBNJEEGL@?$AAa?$AAr?$AAg?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'a'
	DB	00H, 'r', 00H, 'g', 00H, 's', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@NKNCFJLO@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAb?$AAl?$AAt?$AAi?$AAn?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@NKNCFJLO@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAb?$AAl?$AAt?$AAi?$AAn?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'P', 00H, 'y', 00H, 't', 00H, 'h', 00H
	DB	'o', 00H, 'n', 00H, '\', 00H, 'b', 00H, 'l', 00H, 't', 00H, 'i'
	DB	00H, 'n', 00H, 'm', 00H, 'o', 00H, 'd', 00H, 'u', 00H, 'l', 00H
	DB	'e', 00H, '.', 00H, 'c', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT builtin___build_class__
_TEXT	SEGMENT
ns$ = 32
winner$ = 40
bases$ = 48
cls$ = 56
name$ = 64
meta$ = 72
isclass$ = 80
nargs$ = 88
prep$ = 96
mkw$ = 104
cell$ = 112
func$ = 120
base0$21511 = 128
pargs$21544 = 136
margs$21571 = 144
tv147 = 152
self$ = 176
args$ = 184
kwds$ = 192
builtin___build_class__ PROC				; COMDAT

; 40   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 41   :     PyObject *func, *name, *bases, *mkw, *meta, *winner, *prep, *ns, *cell;
; 42   :     PyObject *cls = NULL;

  00016	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR cls$[rsp], 0

; 43   :     Py_ssize_t nargs;
; 44   :     int isclass;
; 45   :     _Py_IDENTIFIER(__prepare__);
; 46   : 
; 47   :     assert(args != NULL);

  0001f	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR args$[rsp], 0
  00028	75 1c		 jne	 SHORT $LN47@builtin___
  0002a	41 b8 2f 00 00
	00		 mov	 r8d, 47			; 0000002fH
  00030	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@NKNCFJLO@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAb?$AAl?$AAt?$AAi?$AAn?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@BBNJEEGL@?$AAa?$AAr?$AAg?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  0003e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00044	33 c0		 xor	 eax, eax
$LN47@builtin___:

; 48   :     if (!PyTuple_Check(args)) {

  00046	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR args$[rsp]
  0004e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00052	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00058	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  0005d	85 c0		 test	 eax, eax
  0005f	75 1a		 jne	 SHORT $LN44@builtin___

; 49   :         PyErr_SetString(PyExc_TypeError,
; 50   :                         "__build_class__: args is not a tuple");

  00061	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@JCKIPNDO@__build_class__?3?5args?5is?5not?5a?5t@
  00068	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0006f	e8 00 00 00 00	 call	 PyErr_SetString

; 51   :         return NULL;

  00074	33 c0		 xor	 eax, eax
  00076	e9 b7 04 00 00	 jmp	 $LN45@builtin___
$LN44@builtin___:

; 52   :     }
; 53   :     nargs = PyTuple_GET_SIZE(args);

  0007b	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR args$[rsp]
  00083	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00087	48 89 44 24 58	 mov	 QWORD PTR nargs$[rsp], rax

; 54   :     if (nargs < 2) {

  0008c	48 83 7c 24 58
	02		 cmp	 QWORD PTR nargs$[rsp], 2
  00092	7d 1a		 jge	 SHORT $LN43@builtin___

; 55   :         PyErr_SetString(PyExc_TypeError,
; 56   :                         "__build_class__: not enough arguments");

  00094	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@ENOJBFEJ@__build_class__?3?5not?5enough?5argu@
  0009b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000a2	e8 00 00 00 00	 call	 PyErr_SetString

; 57   :         return NULL;

  000a7	33 c0		 xor	 eax, eax
  000a9	e9 84 04 00 00	 jmp	 $LN45@builtin___
$LN43@builtin___:

; 58   :     }
; 59   :     func = PyTuple_GET_ITEM(args, 0); /* Better be callable */

  000ae	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR args$[rsp]
  000b6	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000ba	48 89 44 24 78	 mov	 QWORD PTR func$[rsp], rax

; 60   :     name = PyTuple_GET_ITEM(args, 1);

  000bf	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR args$[rsp]
  000c7	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  000cb	48 89 44 24 40	 mov	 QWORD PTR name$[rsp], rax

; 61   :     if (!PyUnicode_Check(name)) {

  000d0	48 8b 44 24 40	 mov	 rax, QWORD PTR name$[rsp]
  000d5	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000d9	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000df	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000e4	85 c0		 test	 eax, eax
  000e6	75 1a		 jne	 SHORT $LN42@builtin___

; 62   :         PyErr_SetString(PyExc_TypeError,
; 63   :                         "__build_class__: name is not a string");

  000e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@PKEPHLIG@__build_class__?3?5name?5is?5not?5a?5s@
  000ef	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000f6	e8 00 00 00 00	 call	 PyErr_SetString

; 64   :         return NULL;

  000fb	33 c0		 xor	 eax, eax
  000fd	e9 30 04 00 00	 jmp	 $LN45@builtin___
$LN42@builtin___:

; 65   :     }
; 66   :     bases = PyTuple_GetSlice(args, 2, nargs);

  00102	4c 8b 44 24 58	 mov	 r8, QWORD PTR nargs$[rsp]
  00107	ba 02 00 00 00	 mov	 edx, 2
  0010c	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00114	e8 00 00 00 00	 call	 PyTuple_GetSlice
  00119	48 89 44 24 30	 mov	 QWORD PTR bases$[rsp], rax

; 67   :     if (bases == NULL)

  0011e	48 83 7c 24 30
	00		 cmp	 QWORD PTR bases$[rsp], 0
  00124	75 07		 jne	 SHORT $LN41@builtin___

; 68   :         return NULL;

  00126	33 c0		 xor	 eax, eax
  00128	e9 05 04 00 00	 jmp	 $LN45@builtin___
$LN41@builtin___:

; 69   : 
; 70   :     if (kwds == NULL) {

  0012d	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR kwds$[rsp], 0
  00136	75 17		 jne	 SHORT $LN40@builtin___

; 71   :         meta = NULL;

  00138	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR meta$[rsp], 0

; 72   :         mkw = NULL;

  00141	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR mkw$[rsp], 0

; 73   :     }
; 74   :     else {

  0014a	e9 c8 00 00 00	 jmp	 $LN39@builtin___
$LN40@builtin___:

; 75   :         mkw = PyDict_Copy(kwds); /* Don't modify kwds passed in! */

  0014f	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR kwds$[rsp]
  00157	e8 00 00 00 00	 call	 PyDict_Copy
  0015c	48 89 44 24 68	 mov	 QWORD PTR mkw$[rsp], rax

; 76   :         if (mkw == NULL) {

  00161	48 83 7c 24 68
	00		 cmp	 QWORD PTR mkw$[rsp], 0
  00167	75 11		 jne	 SHORT $LN38@builtin___

; 77   :             Py_DECREF(bases);

  00169	48 8b 4c 24 30	 mov	 rcx, QWORD PTR bases$[rsp]
  0016e	e8 00 00 00 00	 call	 _Py_DecRef

; 78   :             return NULL;

  00173	33 c0		 xor	 eax, eax
  00175	e9 b8 03 00 00	 jmp	 $LN45@builtin___
$LN38@builtin___:

; 79   :         }
; 80   :         meta = PyDict_GetItemString(mkw, "metaclass");

  0017a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09CINOIPHL@metaclass?$AA@
  00181	48 8b 4c 24 68	 mov	 rcx, QWORD PTR mkw$[rsp]
  00186	e8 00 00 00 00	 call	 PyDict_GetItemString
  0018b	48 89 44 24 48	 mov	 QWORD PTR meta$[rsp], rax

; 81   :         if (meta != NULL) {

  00190	48 83 7c 24 48
	00		 cmp	 QWORD PTR meta$[rsp], 0
  00196	74 7f		 je	 SHORT $LN37@builtin___

; 82   :             Py_INCREF(meta);

  00198	48 8b 4c 24 48	 mov	 rcx, QWORD PTR meta$[rsp]
  0019d	e8 00 00 00 00	 call	 _Py_IncRef

; 83   :             if (PyDict_DelItemString(mkw, "metaclass") < 0) {

  001a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09CINOIPHL@metaclass?$AA@
  001a9	48 8b 4c 24 68	 mov	 rcx, QWORD PTR mkw$[rsp]
  001ae	e8 00 00 00 00	 call	 PyDict_DelItemString
  001b3	85 c0		 test	 eax, eax
  001b5	7d 25		 jge	 SHORT $LN36@builtin___

; 84   :                 Py_DECREF(meta);

  001b7	48 8b 4c 24 48	 mov	 rcx, QWORD PTR meta$[rsp]
  001bc	e8 00 00 00 00	 call	 _Py_DecRef

; 85   :                 Py_DECREF(mkw);

  001c1	48 8b 4c 24 68	 mov	 rcx, QWORD PTR mkw$[rsp]
  001c6	e8 00 00 00 00	 call	 _Py_DecRef

; 86   :                 Py_DECREF(bases);

  001cb	48 8b 4c 24 30	 mov	 rcx, QWORD PTR bases$[rsp]
  001d0	e8 00 00 00 00	 call	 _Py_DecRef

; 87   :                 return NULL;

  001d5	33 c0		 xor	 eax, eax
  001d7	e9 56 03 00 00	 jmp	 $LN45@builtin___
$LN36@builtin___:

; 88   :             }
; 89   :             /* metaclass is explicitly given, check if it's indeed a class */
; 90   :             isclass = PyType_Check(meta);

  001dc	48 8b 44 24 48	 mov	 rax, QWORD PTR meta$[rsp]
  001e1	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001e5	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001eb	25 00 00 00 80	 and	 eax, -2147483648	; ffffffff80000000H
  001f0	85 c0		 test	 eax, eax
  001f2	74 0d		 je	 SHORT $LN48@builtin___
  001f4	c7 84 24 98 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv147[rsp], 1
  001ff	eb 0b		 jmp	 SHORT $LN49@builtin___
$LN48@builtin___:
  00201	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv147[rsp], 0
$LN49@builtin___:
  0020c	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR tv147[rsp]
  00213	89 44 24 50	 mov	 DWORD PTR isclass$[rsp], eax
$LN37@builtin___:
$LN39@builtin___:

; 91   :         }
; 92   :     }
; 93   :     if (meta == NULL) {

  00217	48 83 7c 24 48
	00		 cmp	 QWORD PTR meta$[rsp], 0
  0021d	75 4e		 jne	 SHORT $LN35@builtin___

; 94   :         /* if there are no bases, use type: */
; 95   :         if (PyTuple_GET_SIZE(bases) == 0) {

  0021f	48 8b 44 24 30	 mov	 rax, QWORD PTR bases$[rsp]
  00224	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00229	75 0e		 jne	 SHORT $LN34@builtin___

; 96   :             meta = (PyObject *) (&PyType_Type);

  0022b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyType_Type
  00232	48 89 44 24 48	 mov	 QWORD PTR meta$[rsp], rax

; 97   :         }
; 98   :         /* else get the type of the first base */
; 99   :         else {

  00237	eb 22		 jmp	 SHORT $LN33@builtin___
$LN34@builtin___:

; 100  :             PyObject *base0 = PyTuple_GET_ITEM(bases, 0);

  00239	48 8b 44 24 30	 mov	 rax, QWORD PTR bases$[rsp]
  0023e	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00242	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR base0$21511[rsp], rax

; 101  :             meta = (PyObject *) (base0->ob_type);

  0024a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR base0$21511[rsp]
  00252	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00256	48 89 44 24 48	 mov	 QWORD PTR meta$[rsp], rax
$LN33@builtin___:

; 102  :         }
; 103  :         Py_INCREF(meta);

  0025b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR meta$[rsp]
  00260	e8 00 00 00 00	 call	 _Py_IncRef

; 104  :         isclass = 1;  /* meta is really a class */

  00265	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR isclass$[rsp], 1
$LN35@builtin___:

; 105  :     }
; 106  : 
; 107  :     if (isclass) {

  0026d	83 7c 24 50 00	 cmp	 DWORD PTR isclass$[rsp], 0
  00272	74 79		 je	 SHORT $LN32@builtin___

; 108  :         /* meta is really a class, so check for a more derived
; 109  :            metaclass, or possible metaclass conflicts: */
; 110  :         winner = (PyObject *)_PyType_CalculateMetaclass((PyTypeObject *)meta,
; 111  :                                                         bases);

  00274	48 8b 54 24 30	 mov	 rdx, QWORD PTR bases$[rsp]
  00279	48 8b 4c 24 48	 mov	 rcx, QWORD PTR meta$[rsp]
  0027e	e8 00 00 00 00	 call	 _PyType_CalculateMetaclass
  00283	48 89 44 24 28	 mov	 QWORD PTR winner$[rsp], rax

; 112  :         if (winner == NULL) {

  00288	48 83 7c 24 28
	00		 cmp	 QWORD PTR winner$[rsp], 0
  0028e	75 33		 jne	 SHORT $LN31@builtin___

; 113  :             Py_DECREF(meta);

  00290	48 8b 4c 24 48	 mov	 rcx, QWORD PTR meta$[rsp]
  00295	e8 00 00 00 00	 call	 _Py_DecRef
$LN30@builtin___:

; 114  :             Py_XDECREF(mkw);

  0029a	48 83 7c 24 68
	00		 cmp	 QWORD PTR mkw$[rsp], 0
  002a0	74 0a		 je	 SHORT $LN27@builtin___
  002a2	48 8b 4c 24 68	 mov	 rcx, QWORD PTR mkw$[rsp]
  002a7	e8 00 00 00 00	 call	 _Py_DecRef
$LN27@builtin___:
  002ac	33 c0		 xor	 eax, eax
  002ae	85 c0		 test	 eax, eax
  002b0	75 e8		 jne	 SHORT $LN30@builtin___

; 115  :             Py_DECREF(bases);

  002b2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR bases$[rsp]
  002b7	e8 00 00 00 00	 call	 _Py_DecRef

; 116  :             return NULL;

  002bc	33 c0		 xor	 eax, eax
  002be	e9 6f 02 00 00	 jmp	 $LN45@builtin___
$LN31@builtin___:

; 117  :         }
; 118  :         if (winner != meta) {

  002c3	48 8b 44 24 48	 mov	 rax, QWORD PTR meta$[rsp]
  002c8	48 39 44 24 28	 cmp	 QWORD PTR winner$[rsp], rax
  002cd	74 1e		 je	 SHORT $LN26@builtin___

; 119  :             Py_DECREF(meta);

  002cf	48 8b 4c 24 48	 mov	 rcx, QWORD PTR meta$[rsp]
  002d4	e8 00 00 00 00	 call	 _Py_DecRef

; 120  :             meta = winner;

  002d9	48 8b 44 24 28	 mov	 rax, QWORD PTR winner$[rsp]
  002de	48 89 44 24 48	 mov	 QWORD PTR meta$[rsp], rax

; 121  :             Py_INCREF(meta);

  002e3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR meta$[rsp]
  002e8	e8 00 00 00 00	 call	 _Py_IncRef
$LN26@builtin___:
$LN32@builtin___:

; 122  :         }
; 123  :     }
; 124  :     /* else: meta is not a class, so we cannot do the metaclass
; 125  :        calculation, so we will use the explicitly given object as it is */
; 126  :     prep = _PyObject_GetAttrId(meta, &PyId___prepare__);

  002ed	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___prepare__@?1??builtin___build_class__@@9@9
  002f2	8b c0		 mov	 eax, eax
  002f4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  002fa	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00303	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00307	48 8b d0	 mov	 rdx, rax
  0030a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR meta$[rsp]
  0030f	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00314	48 89 44 24 60	 mov	 QWORD PTR prep$[rsp], rax

; 127  :     if (prep == NULL) {

  00319	48 83 7c 24 60
	00		 cmp	 QWORD PTR prep$[rsp], 0
  0031f	75 59		 jne	 SHORT $LN25@builtin___

; 128  :         if (PyErr_ExceptionMatches(PyExc_AttributeError)) {

  00321	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  00328	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  0032d	85 c0		 test	 eax, eax
  0032f	74 11		 je	 SHORT $LN24@builtin___

; 129  :             PyErr_Clear();

  00331	e8 00 00 00 00	 call	 PyErr_Clear

; 130  :             ns = PyDict_New();

  00336	e8 00 00 00 00	 call	 PyDict_New
  0033b	48 89 44 24 20	 mov	 QWORD PTR ns$[rsp], rax

; 131  :         }
; 132  :         else {

  00340	eb 33		 jmp	 SHORT $LN23@builtin___
$LN24@builtin___:

; 133  :             Py_DECREF(meta);

  00342	48 8b 4c 24 48	 mov	 rcx, QWORD PTR meta$[rsp]
  00347	e8 00 00 00 00	 call	 _Py_DecRef
$LN22@builtin___:

; 134  :             Py_XDECREF(mkw);

  0034c	48 83 7c 24 68
	00		 cmp	 QWORD PTR mkw$[rsp], 0
  00352	74 0a		 je	 SHORT $LN19@builtin___
  00354	48 8b 4c 24 68	 mov	 rcx, QWORD PTR mkw$[rsp]
  00359	e8 00 00 00 00	 call	 _Py_DecRef
$LN19@builtin___:
  0035e	33 c0		 xor	 eax, eax
  00360	85 c0		 test	 eax, eax
  00362	75 e8		 jne	 SHORT $LN22@builtin___

; 135  :             Py_DECREF(bases);

  00364	48 8b 4c 24 30	 mov	 rcx, QWORD PTR bases$[rsp]
  00369	e8 00 00 00 00	 call	 _Py_DecRef

; 136  :             return NULL;

  0036e	33 c0		 xor	 eax, eax
  00370	e9 bd 01 00 00	 jmp	 $LN45@builtin___
$LN23@builtin___:

; 137  :         }
; 138  :     }
; 139  :     else {

  00375	e9 97 00 00 00	 jmp	 $LN18@builtin___
$LN25@builtin___:

; 140  :         PyObject *pargs = PyTuple_Pack(2, name, bases);

  0037a	4c 8b 44 24 30	 mov	 r8, QWORD PTR bases$[rsp]
  0037f	48 8b 54 24 40	 mov	 rdx, QWORD PTR name$[rsp]
  00384	b9 02 00 00 00	 mov	 ecx, 2
  00389	e8 00 00 00 00	 call	 PyTuple_Pack
  0038e	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR pargs$21544[rsp], rax

; 141  :         if (pargs == NULL) {

  00396	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR pargs$21544[rsp], 0
  0039f	75 3d		 jne	 SHORT $LN17@builtin___

; 142  :             Py_DECREF(prep);

  003a1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR prep$[rsp]
  003a6	e8 00 00 00 00	 call	 _Py_DecRef

; 143  :             Py_DECREF(meta);

  003ab	48 8b 4c 24 48	 mov	 rcx, QWORD PTR meta$[rsp]
  003b0	e8 00 00 00 00	 call	 _Py_DecRef
$LN16@builtin___:

; 144  :             Py_XDECREF(mkw);

  003b5	48 83 7c 24 68
	00		 cmp	 QWORD PTR mkw$[rsp], 0
  003bb	74 0a		 je	 SHORT $LN13@builtin___
  003bd	48 8b 4c 24 68	 mov	 rcx, QWORD PTR mkw$[rsp]
  003c2	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@builtin___:
  003c7	33 c0		 xor	 eax, eax
  003c9	85 c0		 test	 eax, eax
  003cb	75 e8		 jne	 SHORT $LN16@builtin___

; 145  :             Py_DECREF(bases);

  003cd	48 8b 4c 24 30	 mov	 rcx, QWORD PTR bases$[rsp]
  003d2	e8 00 00 00 00	 call	 _Py_DecRef

; 146  :             return NULL;

  003d7	33 c0		 xor	 eax, eax
  003d9	e9 54 01 00 00	 jmp	 $LN45@builtin___
$LN17@builtin___:

; 147  :         }
; 148  :         ns = PyEval_CallObjectWithKeywords(prep, pargs, mkw);

  003de	4c 8b 44 24 68	 mov	 r8, QWORD PTR mkw$[rsp]
  003e3	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR pargs$21544[rsp]
  003eb	48 8b 4c 24 60	 mov	 rcx, QWORD PTR prep$[rsp]
  003f0	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords
  003f5	48 89 44 24 20	 mov	 QWORD PTR ns$[rsp], rax

; 149  :         Py_DECREF(pargs);

  003fa	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pargs$21544[rsp]
  00402	e8 00 00 00 00	 call	 _Py_DecRef

; 150  :         Py_DECREF(prep);

  00407	48 8b 4c 24 60	 mov	 rcx, QWORD PTR prep$[rsp]
  0040c	e8 00 00 00 00	 call	 _Py_DecRef
$LN18@builtin___:

; 151  :     }
; 152  :     if (ns == NULL) {

  00411	48 83 7c 24 20
	00		 cmp	 QWORD PTR ns$[rsp], 0
  00417	75 33		 jne	 SHORT $LN12@builtin___

; 153  :         Py_DECREF(meta);

  00419	48 8b 4c 24 48	 mov	 rcx, QWORD PTR meta$[rsp]
  0041e	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@builtin___:

; 154  :         Py_XDECREF(mkw);

  00423	48 83 7c 24 68
	00		 cmp	 QWORD PTR mkw$[rsp], 0
  00429	74 0a		 je	 SHORT $LN8@builtin___
  0042b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR mkw$[rsp]
  00430	e8 00 00 00 00	 call	 _Py_DecRef
$LN8@builtin___:
  00435	33 c0		 xor	 eax, eax
  00437	85 c0		 test	 eax, eax
  00439	75 e8		 jne	 SHORT $LN11@builtin___

; 155  :         Py_DECREF(bases);

  0043b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR bases$[rsp]
  00440	e8 00 00 00 00	 call	 _Py_DecRef

; 156  :         return NULL;

  00445	33 c0		 xor	 eax, eax
  00447	e9 e6 00 00 00	 jmp	 $LN45@builtin___
$LN12@builtin___:

; 157  :     }
; 158  :     cell = PyObject_CallFunctionObjArgs(func, ns, NULL);

  0044c	45 33 c0	 xor	 r8d, r8d
  0044f	48 8b 54 24 20	 mov	 rdx, QWORD PTR ns$[rsp]
  00454	48 8b 4c 24 78	 mov	 rcx, QWORD PTR func$[rsp]
  00459	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  0045e	48 89 44 24 70	 mov	 QWORD PTR cell$[rsp], rax

; 159  :     if (cell != NULL) {

  00463	48 83 7c 24 70
	00		 cmp	 QWORD PTR cell$[rsp], 0
  00469	0f 84 88 00 00
	00		 je	 $LN7@builtin___

; 160  :         PyObject *margs;
; 161  :         margs = PyTuple_Pack(3, name, bases, ns);

  0046f	4c 8b 4c 24 20	 mov	 r9, QWORD PTR ns$[rsp]
  00474	4c 8b 44 24 30	 mov	 r8, QWORD PTR bases$[rsp]
  00479	48 8b 54 24 40	 mov	 rdx, QWORD PTR name$[rsp]
  0047e	b9 03 00 00 00	 mov	 ecx, 3
  00483	e8 00 00 00 00	 call	 PyTuple_Pack
  00488	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR margs$21571[rsp], rax

; 162  :         if (margs != NULL) {

  00490	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR margs$21571[rsp], 0
  00499	74 29		 je	 SHORT $LN6@builtin___

; 163  :             cls = PyEval_CallObjectWithKeywords(meta, margs, mkw);

  0049b	4c 8b 44 24 68	 mov	 r8, QWORD PTR mkw$[rsp]
  004a0	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR margs$21571[rsp]
  004a8	48 8b 4c 24 48	 mov	 rcx, QWORD PTR meta$[rsp]
  004ad	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords
  004b2	48 89 44 24 38	 mov	 QWORD PTR cls$[rsp], rax

; 164  :             Py_DECREF(margs);

  004b7	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR margs$21571[rsp]
  004bf	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@builtin___:

; 165  :         }
; 166  :         if (cls != NULL && PyCell_Check(cell))

  004c4	48 83 7c 24 38
	00		 cmp	 QWORD PTR cls$[rsp], 0
  004ca	74 21		 je	 SHORT $LN5@builtin___
  004cc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCell_Type
  004d3	48 8b 4c 24 70	 mov	 rcx, QWORD PTR cell$[rsp]
  004d8	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  004dc	75 0f		 jne	 SHORT $LN5@builtin___

; 167  :             PyCell_Set(cell, cls);

  004de	48 8b 54 24 38	 mov	 rdx, QWORD PTR cls$[rsp]
  004e3	48 8b 4c 24 70	 mov	 rcx, QWORD PTR cell$[rsp]
  004e8	e8 00 00 00 00	 call	 PyCell_Set
$LN5@builtin___:

; 168  :         Py_DECREF(cell);

  004ed	48 8b 4c 24 70	 mov	 rcx, QWORD PTR cell$[rsp]
  004f2	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@builtin___:

; 169  :     }
; 170  :     Py_DECREF(ns);

  004f7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ns$[rsp]
  004fc	e8 00 00 00 00	 call	 _Py_DecRef

; 171  :     Py_DECREF(meta);

  00501	48 8b 4c 24 48	 mov	 rcx, QWORD PTR meta$[rsp]
  00506	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@builtin___:

; 172  :     Py_XDECREF(mkw);

  0050b	48 83 7c 24 68
	00		 cmp	 QWORD PTR mkw$[rsp], 0
  00511	74 0a		 je	 SHORT $LN1@builtin___
  00513	48 8b 4c 24 68	 mov	 rcx, QWORD PTR mkw$[rsp]
  00518	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@builtin___:
  0051d	33 c0		 xor	 eax, eax
  0051f	85 c0		 test	 eax, eax
  00521	75 e8		 jne	 SHORT $LN4@builtin___

; 173  :     Py_DECREF(bases);

  00523	48 8b 4c 24 30	 mov	 rcx, QWORD PTR bases$[rsp]
  00528	e8 00 00 00 00	 call	 _Py_DecRef

; 174  :     return cls;

  0052d	48 8b 44 24 38	 mov	 rax, QWORD PTR cls$[rsp]
$LN45@builtin___:

; 175  : }

  00532	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00539	c3		 ret	 0
builtin___build_class__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_RefTotal:QWORD
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@HHBPAIJP@U?$HMOOOi?3__import__?$AA@	; `string'
EXTRN	PyImport_ImportModuleLevelObject:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\bltinmodule.c
pdata	SEGMENT
$pdata$builtin___import__ DD imagerel builtin___import__
	DD	imagerel builtin___import__+191
	DD	imagerel $unwind$builtin___import__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin___import__ DD 021601H
	DD	0110116H
xdata	ENDS
;	COMDAT ??_C@_0BC@HHBPAIJP@U?$HMOOOi?3__import__?$AA@
CONST	SEGMENT
??_C@_0BC@HHBPAIJP@U?$HMOOOi?3__import__?$AA@ DB 'U|OOOi:__import__', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT builtin___import__
_TEXT	SEGMENT
level$ = 80
globals$ = 88
locals$ = 96
name$ = 104
fromlist$ = 112
self$ = 144
args$ = 152
kwds$ = 160
builtin___import__ PROC					; COMDAT

; 184  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 185  :     static char *kwlist[] = {"name", "globals", "locals", "fromlist",
; 186  :                              "level", 0};
; 187  :     PyObject *name, *globals = NULL, *locals = NULL, *fromlist = NULL;

  00016	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR globals$[rsp], 0
  0001f	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR locals$[rsp], 0
  00028	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR fromlist$[rsp], 0

; 188  :     int level = 0;

  00031	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR level$[rsp], 0

; 189  : 
; 190  :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "U|OOOi:__import__",
; 191  :                     kwlist, &name, &globals, &locals, &fromlist, &level))

  00039	48 8d 44 24 50	 lea	 rax, QWORD PTR level$[rsp]
  0003e	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00043	48 8d 44 24 70	 lea	 rax, QWORD PTR fromlist$[rsp]
  00048	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0004d	48 8d 44 24 60	 lea	 rax, QWORD PTR locals$[rsp]
  00052	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00057	48 8d 44 24 58	 lea	 rax, QWORD PTR globals$[rsp]
  0005c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00061	48 8d 44 24 68	 lea	 rax, QWORD PTR name$[rsp]
  00066	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0006b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??builtin___import__@@9@9
  00072	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BC@HHBPAIJP@U?$HMOOOi?3__import__?$AA@
  00079	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  00081	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00089	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  0008e	85 c0		 test	 eax, eax
  00090	75 04		 jne	 SHORT $LN1@builtin___@2

; 192  :         return NULL;

  00092	33 c0		 xor	 eax, eax
  00094	eb 21		 jmp	 SHORT $LN2@builtin___@2
$LN1@builtin___@2:

; 193  :     return PyImport_ImportModuleLevelObject(name, globals, locals,
; 194  :                                             fromlist, level);

  00096	8b 44 24 50	 mov	 eax, DWORD PTR level$[rsp]
  0009a	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0009e	4c 8b 4c 24 70	 mov	 r9, QWORD PTR fromlist$[rsp]
  000a3	4c 8b 44 24 60	 mov	 r8, QWORD PTR locals$[rsp]
  000a8	48 8b 54 24 58	 mov	 rdx, QWORD PTR globals$[rsp]
  000ad	48 8b 4c 24 68	 mov	 rcx, QWORD PTR name$[rsp]
  000b2	e8 00 00 00 00	 call	 PyImport_ImportModuleLevelObject
$LN2@builtin___@2:

; 195  : }

  000b7	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  000be	c3		 ret	 0
builtin___import__ ENDP
_TEXT	ENDS
EXTRN	PyNumber_Absolute:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_abs DD imagerel builtin_abs
	DD	imagerel builtin_abs+29
	DD	imagerel $unwind$builtin_abs
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_abs DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT builtin_abs
_TEXT	SEGMENT
self$ = 48
v$ = 56
builtin_abs PROC					; COMDAT

; 217  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 218  :     return PyNumber_Absolute(v);

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR v$[rsp]
  00013	e8 00 00 00 00	 call	 PyNumber_Absolute

; 219  : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
builtin_abs ENDP
_TEXT	ENDS
EXTRN	_Py_TrueStruct:BYTE
EXTRN	PyExc_StopIteration:QWORD
EXTRN	PyErr_Occurred:PROC
EXTRN	_Py_FalseStruct:BYTE
EXTRN	PyObject_IsTrue:PROC
EXTRN	PyObject_GetIter:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_all DD imagerel builtin_all
	DD	imagerel builtin_all+245
	DD	imagerel $unwind$builtin_all
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_all DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT builtin_all
_TEXT	SEGMENT
it$ = 32
iternext$ = 40
item$ = 48
cmp$ = 56
self$ = 80
v$ = 88
builtin_all PROC					; COMDAT

; 228  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 229  :     PyObject *it, *item;
; 230  :     PyObject *(*iternext)(PyObject *);
; 231  :     int cmp;
; 232  : 
; 233  :     it = PyObject_GetIter(v);

  0000e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR v$[rsp]
  00013	e8 00 00 00 00	 call	 PyObject_GetIter
  00018	48 89 44 24 20	 mov	 QWORD PTR it$[rsp], rax

; 234  :     if (it == NULL)

  0001d	48 83 7c 24 20
	00		 cmp	 QWORD PTR it$[rsp], 0
  00023	75 07		 jne	 SHORT $LN9@builtin_al

; 235  :         return NULL;

  00025	33 c0		 xor	 eax, eax
  00027	e9 c4 00 00 00	 jmp	 $LN10@builtin_al
$LN9@builtin_al:

; 236  :     iternext = *Py_TYPE(it)->tp_iternext;

  0002c	48 8b 44 24 20	 mov	 rax, QWORD PTR it$[rsp]
  00031	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00035	48 8b 80 38 01
	00 00		 mov	 rax, QWORD PTR [rax+312]
  0003c	48 89 44 24 28	 mov	 QWORD PTR iternext$[rsp], rax
$LN8@builtin_al:

; 237  : 
; 238  :     for (;;) {
; 239  :         item = iternext(it);

  00041	48 8b 4c 24 20	 mov	 rcx, QWORD PTR it$[rsp]
  00046	ff 54 24 28	 call	 QWORD PTR iternext$[rsp]
  0004a	48 89 44 24 30	 mov	 QWORD PTR item$[rsp], rax

; 240  :         if (item == NULL)

  0004f	48 83 7c 24 30
	00		 cmp	 QWORD PTR item$[rsp], 0
  00055	75 02		 jne	 SHORT $LN6@builtin_al

; 241  :             break;

  00057	eb 55		 jmp	 SHORT $LN7@builtin_al
$LN6@builtin_al:

; 242  :         cmp = PyObject_IsTrue(item);

  00059	48 8b 4c 24 30	 mov	 rcx, QWORD PTR item$[rsp]
  0005e	e8 00 00 00 00	 call	 PyObject_IsTrue
  00063	89 44 24 38	 mov	 DWORD PTR cmp$[rsp], eax

; 243  :         Py_DECREF(item);

  00067	48 8b 4c 24 30	 mov	 rcx, QWORD PTR item$[rsp]
  0006c	e8 00 00 00 00	 call	 _Py_DecRef

; 244  :         if (cmp < 0) {

  00071	83 7c 24 38 00	 cmp	 DWORD PTR cmp$[rsp], 0
  00076	7d 0e		 jge	 SHORT $LN5@builtin_al

; 245  :             Py_DECREF(it);

  00078	48 8b 4c 24 20	 mov	 rcx, QWORD PTR it$[rsp]
  0007d	e8 00 00 00 00	 call	 _Py_DecRef

; 246  :             return NULL;

  00082	33 c0		 xor	 eax, eax
  00084	eb 6a		 jmp	 SHORT $LN10@builtin_al
$LN5@builtin_al:

; 247  :         }
; 248  :         if (cmp == 0) {

  00086	83 7c 24 38 00	 cmp	 DWORD PTR cmp$[rsp], 0
  0008b	75 1f		 jne	 SHORT $LN4@builtin_al

; 249  :             Py_DECREF(it);

  0008d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR it$[rsp]
  00092	e8 00 00 00 00	 call	 _Py_DecRef

; 250  :             Py_RETURN_FALSE;

  00097	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  0009e	e8 00 00 00 00	 call	 _Py_IncRef
  000a3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  000aa	eb 44		 jmp	 SHORT $LN10@builtin_al
$LN4@builtin_al:

; 251  :         }
; 252  :     }

  000ac	eb 93		 jmp	 SHORT $LN8@builtin_al
$LN7@builtin_al:

; 253  :     Py_DECREF(it);

  000ae	48 8b 4c 24 20	 mov	 rcx, QWORD PTR it$[rsp]
  000b3	e8 00 00 00 00	 call	 _Py_DecRef

; 254  :     if (PyErr_Occurred()) {

  000b8	e8 00 00 00 00	 call	 PyErr_Occurred
  000bd	48 85 c0	 test	 rax, rax
  000c0	74 1b		 je	 SHORT $LN3@builtin_al

; 255  :         if (PyErr_ExceptionMatches(PyExc_StopIteration))

  000c2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_StopIteration
  000c9	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  000ce	85 c0		 test	 eax, eax
  000d0	74 07		 je	 SHORT $LN2@builtin_al

; 256  :             PyErr_Clear();

  000d2	e8 00 00 00 00	 call	 PyErr_Clear

; 257  :         else

  000d7	eb 04		 jmp	 SHORT $LN1@builtin_al
$LN2@builtin_al:

; 258  :             return NULL;

  000d9	33 c0		 xor	 eax, eax
  000db	eb 13		 jmp	 SHORT $LN10@builtin_al
$LN1@builtin_al:
$LN3@builtin_al:

; 259  :     }
; 260  :     Py_RETURN_TRUE;

  000dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  000e4	e8 00 00 00 00	 call	 _Py_IncRef
  000e9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
$LN10@builtin_al:

; 261  : }

  000f0	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000f4	c3		 ret	 0
builtin_all ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_any DD imagerel builtin_any
	DD	imagerel builtin_any+245
	DD	imagerel $unwind$builtin_any
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_any DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT builtin_any
_TEXT	SEGMENT
it$ = 32
iternext$ = 40
item$ = 48
cmp$ = 56
self$ = 80
v$ = 88
builtin_any PROC					; COMDAT

; 271  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 272  :     PyObject *it, *item;
; 273  :     PyObject *(*iternext)(PyObject *);
; 274  :     int cmp;
; 275  : 
; 276  :     it = PyObject_GetIter(v);

  0000e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR v$[rsp]
  00013	e8 00 00 00 00	 call	 PyObject_GetIter
  00018	48 89 44 24 20	 mov	 QWORD PTR it$[rsp], rax

; 277  :     if (it == NULL)

  0001d	48 83 7c 24 20
	00		 cmp	 QWORD PTR it$[rsp], 0
  00023	75 07		 jne	 SHORT $LN9@builtin_an

; 278  :         return NULL;

  00025	33 c0		 xor	 eax, eax
  00027	e9 c4 00 00 00	 jmp	 $LN10@builtin_an
$LN9@builtin_an:

; 279  :     iternext = *Py_TYPE(it)->tp_iternext;

  0002c	48 8b 44 24 20	 mov	 rax, QWORD PTR it$[rsp]
  00031	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00035	48 8b 80 38 01
	00 00		 mov	 rax, QWORD PTR [rax+312]
  0003c	48 89 44 24 28	 mov	 QWORD PTR iternext$[rsp], rax
$LN8@builtin_an:

; 280  : 
; 281  :     for (;;) {
; 282  :         item = iternext(it);

  00041	48 8b 4c 24 20	 mov	 rcx, QWORD PTR it$[rsp]
  00046	ff 54 24 28	 call	 QWORD PTR iternext$[rsp]
  0004a	48 89 44 24 30	 mov	 QWORD PTR item$[rsp], rax

; 283  :         if (item == NULL)

  0004f	48 83 7c 24 30
	00		 cmp	 QWORD PTR item$[rsp], 0
  00055	75 02		 jne	 SHORT $LN6@builtin_an

; 284  :             break;

  00057	eb 55		 jmp	 SHORT $LN7@builtin_an
$LN6@builtin_an:

; 285  :         cmp = PyObject_IsTrue(item);

  00059	48 8b 4c 24 30	 mov	 rcx, QWORD PTR item$[rsp]
  0005e	e8 00 00 00 00	 call	 PyObject_IsTrue
  00063	89 44 24 38	 mov	 DWORD PTR cmp$[rsp], eax

; 286  :         Py_DECREF(item);

  00067	48 8b 4c 24 30	 mov	 rcx, QWORD PTR item$[rsp]
  0006c	e8 00 00 00 00	 call	 _Py_DecRef

; 287  :         if (cmp < 0) {

  00071	83 7c 24 38 00	 cmp	 DWORD PTR cmp$[rsp], 0
  00076	7d 0e		 jge	 SHORT $LN5@builtin_an

; 288  :             Py_DECREF(it);

  00078	48 8b 4c 24 20	 mov	 rcx, QWORD PTR it$[rsp]
  0007d	e8 00 00 00 00	 call	 _Py_DecRef

; 289  :             return NULL;

  00082	33 c0		 xor	 eax, eax
  00084	eb 6a		 jmp	 SHORT $LN10@builtin_an
$LN5@builtin_an:

; 290  :         }
; 291  :         if (cmp == 1) {

  00086	83 7c 24 38 01	 cmp	 DWORD PTR cmp$[rsp], 1
  0008b	75 1f		 jne	 SHORT $LN4@builtin_an

; 292  :             Py_DECREF(it);

  0008d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR it$[rsp]
  00092	e8 00 00 00 00	 call	 _Py_DecRef

; 293  :             Py_RETURN_TRUE;

  00097	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  0009e	e8 00 00 00 00	 call	 _Py_IncRef
  000a3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  000aa	eb 44		 jmp	 SHORT $LN10@builtin_an
$LN4@builtin_an:

; 294  :         }
; 295  :     }

  000ac	eb 93		 jmp	 SHORT $LN8@builtin_an
$LN7@builtin_an:

; 296  :     Py_DECREF(it);

  000ae	48 8b 4c 24 20	 mov	 rcx, QWORD PTR it$[rsp]
  000b3	e8 00 00 00 00	 call	 _Py_DecRef

; 297  :     if (PyErr_Occurred()) {

  000b8	e8 00 00 00 00	 call	 PyErr_Occurred
  000bd	48 85 c0	 test	 rax, rax
  000c0	74 1b		 je	 SHORT $LN3@builtin_an

; 298  :         if (PyErr_ExceptionMatches(PyExc_StopIteration))

  000c2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_StopIteration
  000c9	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  000ce	85 c0		 test	 eax, eax
  000d0	74 07		 je	 SHORT $LN2@builtin_an

; 299  :             PyErr_Clear();

  000d2	e8 00 00 00 00	 call	 PyErr_Clear

; 300  :         else

  000d7	eb 04		 jmp	 SHORT $LN1@builtin_an
$LN2@builtin_an:

; 301  :             return NULL;

  000d9	33 c0		 xor	 eax, eax
  000db	eb 13		 jmp	 SHORT $LN10@builtin_an
$LN1@builtin_an:
$LN3@builtin_an:

; 302  :     }
; 303  :     Py_RETURN_FALSE;

  000dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  000e4	e8 00 00 00 00	 call	 _Py_IncRef
  000e9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
$LN10@builtin_an:

; 304  : }

  000f0	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000f4	c3		 ret	 0
builtin_any ENDP
_TEXT	ENDS
EXTRN	PyObject_ASCII:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_ascii DD imagerel builtin_ascii
	DD	imagerel builtin_ascii+29
	DD	imagerel $unwind$builtin_ascii
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_ascii DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT builtin_ascii
_TEXT	SEGMENT
self$ = 48
v$ = 56
builtin_ascii PROC					; COMDAT

; 314  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 315  :     return PyObject_ASCII(v);

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR v$[rsp]
  00013	e8 00 00 00 00	 call	 PyObject_ASCII

; 316  : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
builtin_ascii ENDP
_TEXT	ENDS
EXTRN	PyNumber_ToBase:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_bin DD imagerel builtin_bin
	DD	imagerel builtin_bin+34
	DD	imagerel $unwind$builtin_bin
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_bin DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT builtin_bin
_TEXT	SEGMENT
self$ = 48
v$ = 56
builtin_bin PROC					; COMDAT

; 329  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 330  :     return PyNumber_ToBase(v, 2);

  0000e	ba 02 00 00 00	 mov	 edx, 2
  00013	48 8b 4c 24 38	 mov	 rcx, QWORD PTR v$[rsp]
  00018	e8 00 00 00 00	 call	 PyNumber_ToBase

; 331  : }

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
builtin_bin ENDP
_TEXT	ENDS
EXTRN	PyBool_FromLong:PROC
EXTRN	PyCallable_Check:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_callable DD imagerel builtin_callable
	DD	imagerel builtin_callable+36
	DD	imagerel $unwind$builtin_callable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_callable DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT builtin_callable
_TEXT	SEGMENT
self$ = 48
v$ = 56
builtin_callable PROC					; COMDAT

; 341  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 342  :     return PyBool_FromLong((long)PyCallable_Check(v));

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR v$[rsp]
  00013	e8 00 00 00 00	 call	 PyCallable_Check
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 PyBool_FromLong

; 343  : }

  0001f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00023	c3		 ret	 0
builtin_callable ENDP
_TEXT	ENDS
PUBLIC	??_C@_08MHHCNJDA@filter?$CI?$CJ?$AA@		; `string'
EXTRN	PyArg_UnpackTuple:PROC
EXTRN	_PyArg_NoKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$filter_new DD imagerel filter_new
	DD	imagerel filter_new+238
	DD	imagerel $unwind$filter_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$filter_new DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_08MHHCNJDA@filter?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_08MHHCNJDA@filter?$CI?$CJ?$AA@ DB 'filter()', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT filter_new
_TEXT	SEGMENT
it$ = 48
lz$ = 56
seq$ = 64
func$ = 72
type$ = 96
args$ = 104
kwds$ = 112
filter_new PROC						; COMDAT

; 361  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 362  :     PyObject *func, *seq;
; 363  :     PyObject *it;
; 364  :     filterobject *lz;
; 365  : 
; 366  :     if (type == &PyFilter_Type && !_PyArg_NoKeywords("filter()", kwds))

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFilter_Type
  0001a	48 39 44 24 60	 cmp	 QWORD PTR type$[rsp], rax
  0001f	75 1c		 jne	 SHORT $LN4@filter_new
  00021	48 8b 54 24 70	 mov	 rdx, QWORD PTR kwds$[rsp]
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08MHHCNJDA@filter?$CI?$CJ?$AA@
  0002d	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  00032	85 c0		 test	 eax, eax
  00034	75 07		 jne	 SHORT $LN4@filter_new

; 367  :         return NULL;

  00036	33 c0		 xor	 eax, eax
  00038	e9 ac 00 00 00	 jmp	 $LN5@filter_new
$LN4@filter_new:

; 368  : 
; 369  :     if (!PyArg_UnpackTuple(args, "filter", 2, 2, &func, &seq))

  0003d	48 8d 44 24 40	 lea	 rax, QWORD PTR seq$[rsp]
  00042	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00047	48 8d 44 24 48	 lea	 rax, QWORD PTR func$[rsp]
  0004c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00051	41 b9 02 00 00
	00		 mov	 r9d, 2
  00057	41 b8 02 00 00
	00		 mov	 r8d, 2
  0005d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06EOIELIPE@filter?$AA@
  00064	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00069	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0006e	85 c0		 test	 eax, eax
  00070	75 04		 jne	 SHORT $LN3@filter_new

; 370  :         return NULL;

  00072	33 c0		 xor	 eax, eax
  00074	eb 73		 jmp	 SHORT $LN5@filter_new
$LN3@filter_new:

; 371  : 
; 372  :     /* Get iterator. */
; 373  :     it = PyObject_GetIter(seq);

  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR seq$[rsp]
  0007b	e8 00 00 00 00	 call	 PyObject_GetIter
  00080	48 89 44 24 30	 mov	 QWORD PTR it$[rsp], rax

; 374  :     if (it == NULL)

  00085	48 83 7c 24 30
	00		 cmp	 QWORD PTR it$[rsp], 0
  0008b	75 04		 jne	 SHORT $LN2@filter_new

; 375  :         return NULL;

  0008d	33 c0		 xor	 eax, eax
  0008f	eb 58		 jmp	 SHORT $LN5@filter_new
$LN2@filter_new:

; 376  : 
; 377  :     /* create filterobject structure */
; 378  :     lz = (filterobject *)type->tp_alloc(type, 0);

  00091	33 d2		 xor	 edx, edx
  00093	48 8b 4c 24 60	 mov	 rcx, QWORD PTR type$[rsp]
  00098	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  0009d	ff 90 88 01 00
	00		 call	 QWORD PTR [rax+392]
  000a3	48 89 44 24 38	 mov	 QWORD PTR lz$[rsp], rax

; 379  :     if (lz == NULL) {

  000a8	48 83 7c 24 38
	00		 cmp	 QWORD PTR lz$[rsp], 0
  000ae	75 0e		 jne	 SHORT $LN1@filter_new

; 380  :         Py_DECREF(it);

  000b0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR it$[rsp]
  000b5	e8 00 00 00 00	 call	 _Py_DecRef

; 381  :         return NULL;

  000ba	33 c0		 xor	 eax, eax
  000bc	eb 2b		 jmp	 SHORT $LN5@filter_new
$LN1@filter_new:

; 382  :     }
; 383  :     Py_INCREF(func);

  000be	48 8b 4c 24 48	 mov	 rcx, QWORD PTR func$[rsp]
  000c3	e8 00 00 00 00	 call	 _Py_IncRef

; 384  :     lz->func = func;

  000c8	48 8b 44 24 38	 mov	 rax, QWORD PTR lz$[rsp]
  000cd	48 8b 4c 24 48	 mov	 rcx, QWORD PTR func$[rsp]
  000d2	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 385  :     lz->it = it;

  000d6	48 8b 44 24 38	 mov	 rax, QWORD PTR lz$[rsp]
  000db	48 8b 4c 24 30	 mov	 rcx, QWORD PTR it$[rsp]
  000e0	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 386  : 
; 387  :     return (PyObject *)lz;

  000e4	48 8b 44 24 38	 mov	 rax, QWORD PTR lz$[rsp]
$LN5@filter_new:

; 388  : }

  000e9	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000ed	c3		 ret	 0
filter_new ENDP
_TEXT	ENDS
EXTRN	PyObject_GC_UnTrack:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$filter_dealloc DD imagerel filter_dealloc
	DD	imagerel filter_dealloc+108
	DD	imagerel $unwind$filter_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$filter_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT filter_dealloc
_TEXT	SEGMENT
lz$ = 48
filter_dealloc PROC					; COMDAT

; 392  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 393  :     PyObject_GC_UnTrack(lz);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR lz$[rsp]
  0000e	e8 00 00 00 00	 call	 PyObject_GC_UnTrack
$LN8@filter_dea:

; 394  :     Py_XDECREF(lz->func);

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR lz$[rsp]
  00018	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0001d	74 0e		 je	 SHORT $LN5@filter_dea
  0001f	48 8b 44 24 30	 mov	 rax, QWORD PTR lz$[rsp]
  00024	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00028	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@filter_dea:
  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 e0		 jne	 SHORT $LN8@filter_dea
$LN4@filter_dea:

; 395  :     Py_XDECREF(lz->it);

  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR lz$[rsp]
  00038	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0003d	74 0e		 je	 SHORT $LN1@filter_dea
  0003f	48 8b 44 24 30	 mov	 rax, QWORD PTR lz$[rsp]
  00044	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00048	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@filter_dea:
  0004d	33 c0		 xor	 eax, eax
  0004f	85 c0		 test	 eax, eax
  00051	75 e0		 jne	 SHORT $LN4@filter_dea

; 396  :     Py_TYPE(lz)->tp_free(lz);

  00053	48 8b 44 24 30	 mov	 rax, QWORD PTR lz$[rsp]
  00058	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0005c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR lz$[rsp]
  00061	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]

; 397  : }

  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
filter_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@KCEEFDME@filter_traverse?$AA@		; `string'
PUBLIC	??_C@_0BI@LBFDNFDG@?4?4?2Python?2bltinmodule?4c?$AA@ ; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$filter_traverse DD imagerel filter_traverse
	DD	imagerel filter_traverse+206
	DD	imagerel $unwind$filter_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$filter_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BA@KCEEFDME@filter_traverse?$AA@
CONST	SEGMENT
??_C@_0BA@KCEEFDME@filter_traverse?$AA@ DB 'filter_traverse', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LBFDNFDG@?4?4?2Python?2bltinmodule?4c?$AA@
CONST	SEGMENT
??_C@_0BI@LBFDNFDG@?4?4?2Python?2bltinmodule?4c?$AA@ DB '..\Python\bltinm'
	DB	'odule.c', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT filter_traverse
_TEXT	SEGMENT
vret$21783 = 32
vret$21791 = 36
lz$ = 64
visit$ = 72
arg$ = 80
filter_traverse PROC					; COMDAT

; 401  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN12@filter_tra:

; 402  :     Py_VISIT(lz->it);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN9@filter_tra
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 92 01 00
	00		 mov	 r8d, 402		; 00000192H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LBFDNFDG@?4?4?2Python?2bltinmodule?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@KCEEFDME@filter_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@filter_tra:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR lz$[rsp]
  0003d	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00042	74 23		 je	 SHORT $LN8@filter_tra
  00044	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR lz$[rsp]
  0004e	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00052	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR vret$21783[rsp], eax
  0005a	83 7c 24 20 00	 cmp	 DWORD PTR vret$21783[rsp], 0
  0005f	74 06		 je	 SHORT $LN7@filter_tra
  00061	8b 44 24 20	 mov	 eax, DWORD PTR vret$21783[rsp]
  00065	eb 62		 jmp	 SHORT $LN13@filter_tra
$LN7@filter_tra:
$LN8@filter_tra:
  00067	33 c0		 xor	 eax, eax
  00069	85 c0		 test	 eax, eax
  0006b	75 a6		 jne	 SHORT $LN12@filter_tra
$LN6@filter_tra:

; 403  :     Py_VISIT(lz->func);

  0006d	e8 00 00 00 00	 call	 _Py_PXCTX
  00072	85 c0		 test	 eax, eax
  00074	74 1c		 je	 SHORT $LN3@filter_tra
  00076	45 33 c9	 xor	 r9d, r9d
  00079	41 b8 93 01 00
	00		 mov	 r8d, 403		; 00000193H
  0007f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LBFDNFDG@?4?4?2Python?2bltinmodule?4c?$AA@
  00086	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@KCEEFDME@filter_traverse?$AA@
  0008d	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@filter_tra:
  00092	48 8b 44 24 40	 mov	 rax, QWORD PTR lz$[rsp]
  00097	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0009c	74 23		 je	 SHORT $LN2@filter_tra
  0009e	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  000a3	48 8b 44 24 40	 mov	 rax, QWORD PTR lz$[rsp]
  000a8	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  000ac	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  000b0	89 44 24 24	 mov	 DWORD PTR vret$21791[rsp], eax
  000b4	83 7c 24 24 00	 cmp	 DWORD PTR vret$21791[rsp], 0
  000b9	74 06		 je	 SHORT $LN1@filter_tra
  000bb	8b 44 24 24	 mov	 eax, DWORD PTR vret$21791[rsp]
  000bf	eb 08		 jmp	 SHORT $LN13@filter_tra
$LN1@filter_tra:
$LN2@filter_tra:
  000c1	33 c0		 xor	 eax, eax
  000c3	85 c0		 test	 eax, eax
  000c5	75 a6		 jne	 SHORT $LN6@filter_tra

; 404  :     return 0;

  000c7	33 c0		 xor	 eax, eax
$LN13@filter_tra:

; 405  : }

  000c9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000cd	c3		 ret	 0
filter_traverse ENDP
_TEXT	ENDS
EXTRN	PyBool_Type:BYTE
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$filter_next DD imagerel filter_next
	DD	imagerel filter_next+243
	DD	imagerel $unwind$filter_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$filter_next DD 010901H
	DD	0a209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT filter_next
_TEXT	SEGMENT
it$ = 32
iternext$ = 40
ok$ = 48
item$ = 56
good$21814 = 64
lz$ = 96
filter_next PROC					; COMDAT

; 409  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 410  :     PyObject *item;
; 411  :     PyObject *it = lz->it;

  00009	48 8b 44 24 60	 mov	 rax, QWORD PTR lz$[rsp]
  0000e	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00012	48 89 44 24 20	 mov	 QWORD PTR it$[rsp], rax

; 412  :     long ok;
; 413  :     PyObject *(*iternext)(PyObject *);
; 414  : 
; 415  :     iternext = *Py_TYPE(it)->tp_iternext;

  00017	48 8b 44 24 20	 mov	 rax, QWORD PTR it$[rsp]
  0001c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00020	48 8b 80 38 01
	00 00		 mov	 rax, QWORD PTR [rax+312]
  00027	48 89 44 24 28	 mov	 QWORD PTR iternext$[rsp], rax
$LN9@filter_nex:

; 416  :     for (;;) {
; 417  :         item = iternext(it);

  0002c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR it$[rsp]
  00031	ff 54 24 28	 call	 QWORD PTR iternext$[rsp]
  00035	48 89 44 24 38	 mov	 QWORD PTR item$[rsp], rax

; 418  :         if (item == NULL)

  0003a	48 83 7c 24 38
	00		 cmp	 QWORD PTR item$[rsp], 0
  00040	75 07		 jne	 SHORT $LN7@filter_nex

; 419  :             return NULL;

  00042	33 c0		 xor	 eax, eax
  00044	e9 a5 00 00 00	 jmp	 $LN10@filter_nex
$LN7@filter_nex:

; 420  : 
; 421  :         if (lz->func == Py_None || lz->func == (PyObject *)&PyBool_Type) {

  00049	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00050	48 8b 4c 24 60	 mov	 rcx, QWORD PTR lz$[rsp]
  00055	48 39 41 60	 cmp	 QWORD PTR [rcx+96], rax
  00059	74 12		 je	 SHORT $LN5@filter_nex
  0005b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBool_Type
  00062	48 8b 4c 24 60	 mov	 rcx, QWORD PTR lz$[rsp]
  00067	48 39 41 60	 cmp	 QWORD PTR [rcx+96], rax
  0006b	75 10		 jne	 SHORT $LN6@filter_nex
$LN5@filter_nex:

; 422  :             ok = PyObject_IsTrue(item);

  0006d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR item$[rsp]
  00072	e8 00 00 00 00	 call	 PyObject_IsTrue
  00077	89 44 24 30	 mov	 DWORD PTR ok$[rsp], eax

; 423  :         } else {

  0007b	eb 49		 jmp	 SHORT $LN4@filter_nex
$LN6@filter_nex:

; 424  :             PyObject *good;
; 425  :             good = PyObject_CallFunctionObjArgs(lz->func,
; 426  :                                                 item, NULL);

  0007d	45 33 c0	 xor	 r8d, r8d
  00080	48 8b 54 24 38	 mov	 rdx, QWORD PTR item$[rsp]
  00085	48 8b 44 24 60	 mov	 rax, QWORD PTR lz$[rsp]
  0008a	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0008e	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  00093	48 89 44 24 40	 mov	 QWORD PTR good$21814[rsp], rax

; 427  :             if (good == NULL) {

  00098	48 83 7c 24 40
	00		 cmp	 QWORD PTR good$21814[rsp], 0
  0009e	75 0e		 jne	 SHORT $LN3@filter_nex

; 428  :                 Py_DECREF(item);

  000a0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR item$[rsp]
  000a5	e8 00 00 00 00	 call	 _Py_DecRef

; 429  :                 return NULL;

  000aa	33 c0		 xor	 eax, eax
  000ac	eb 40		 jmp	 SHORT $LN10@filter_nex
$LN3@filter_nex:

; 430  :             }
; 431  :             ok = PyObject_IsTrue(good);

  000ae	48 8b 4c 24 40	 mov	 rcx, QWORD PTR good$21814[rsp]
  000b3	e8 00 00 00 00	 call	 PyObject_IsTrue
  000b8	89 44 24 30	 mov	 DWORD PTR ok$[rsp], eax

; 432  :             Py_DECREF(good);

  000bc	48 8b 4c 24 40	 mov	 rcx, QWORD PTR good$21814[rsp]
  000c1	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@filter_nex:

; 433  :         }
; 434  :         if (ok > 0)

  000c6	83 7c 24 30 00	 cmp	 DWORD PTR ok$[rsp], 0
  000cb	7e 07		 jle	 SHORT $LN2@filter_nex

; 435  :             return item;

  000cd	48 8b 44 24 38	 mov	 rax, QWORD PTR item$[rsp]
  000d2	eb 1a		 jmp	 SHORT $LN10@filter_nex
$LN2@filter_nex:

; 436  :         Py_DECREF(item);

  000d4	48 8b 4c 24 38	 mov	 rcx, QWORD PTR item$[rsp]
  000d9	e8 00 00 00 00	 call	 _Py_DecRef

; 437  :         if (ok < 0)

  000de	83 7c 24 30 00	 cmp	 DWORD PTR ok$[rsp], 0
  000e3	7d 04		 jge	 SHORT $LN1@filter_nex

; 438  :             return NULL;

  000e5	33 c0		 xor	 eax, eax
  000e7	eb 05		 jmp	 SHORT $LN10@filter_nex
$LN1@filter_nex:

; 439  :     }

  000e9	e9 3e ff ff ff	 jmp	 $LN9@filter_nex
$LN10@filter_nex:

; 440  : }

  000ee	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f2	c3		 ret	 0
filter_next ENDP
_TEXT	ENDS
PUBLIC	??_C@_05LNHFJPFN@O?$CIOO?$CJ?$AA@		; `string'
EXTRN	Py_BuildValue:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$filter_reduce DD imagerel filter_reduce
	DD	imagerel filter_reduce+53
	DD	imagerel $unwind$filter_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$filter_reduce DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_05LNHFJPFN@O?$CIOO?$CJ?$AA@
CONST	SEGMENT
??_C@_05LNHFJPFN@O?$CIOO?$CJ?$AA@ DB 'O(OO)', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT filter_reduce
_TEXT	SEGMENT
lz$ = 48
filter_reduce PROC					; COMDAT

; 444  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 445  :     return Py_BuildValue("O(OO)", Py_TYPE(lz), lz->func, lz->it);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR lz$[rsp]
  0000e	4c 8b 48 68	 mov	 r9, QWORD PTR [rax+104]
  00012	48 8b 44 24 30	 mov	 rax, QWORD PTR lz$[rsp]
  00017	4c 8b 40 60	 mov	 r8, QWORD PTR [rax+96]
  0001b	48 8b 44 24 30	 mov	 rax, QWORD PTR lz$[rsp]
  00020	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  00024	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LNHFJPFN@O?$CIOO?$CJ?$AA@
  0002b	e8 00 00 00 00	 call	 Py_BuildValue

; 446  : }

  00030	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00034	c3		 ret	 0
filter_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@EIKJMIGE@O?$HMU?3format?$AA@		; `string'
EXTRN	PyObject_Format:PROC
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_format DD imagerel builtin_format
	DD	imagerel builtin_format+78
	DD	imagerel $unwind$builtin_format
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_format DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0L@EIKJMIGE@O?$HMU?3format?$AA@
CONST	SEGMENT
??_C@_0L@EIKJMIGE@O?$HMU?3format?$AA@ DB 'O|U:format', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT builtin_format
_TEXT	SEGMENT
value$ = 32
format_spec$ = 40
self$ = 64
args$ = 72
builtin_format PROC					; COMDAT

; 508  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 509  :     PyObject *value;
; 510  :     PyObject *format_spec = NULL;

  0000e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR format_spec$[rsp], 0

; 511  : 
; 512  :     if (!PyArg_ParseTuple(args, "O|U:format", &value, &format_spec))

  00017	4c 8d 4c 24 28	 lea	 r9, QWORD PTR format_spec$[rsp]
  0001c	4c 8d 44 24 20	 lea	 r8, QWORD PTR value$[rsp]
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@EIKJMIGE@O?$HMU?3format?$AA@
  00028	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  0002d	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00032	85 c0		 test	 eax, eax
  00034	75 04		 jne	 SHORT $LN1@builtin_fo

; 513  :         return NULL;

  00036	33 c0		 xor	 eax, eax
  00038	eb 0f		 jmp	 SHORT $LN2@builtin_fo
$LN1@builtin_fo:

; 514  : 
; 515  :     return PyObject_Format(value, format_spec);

  0003a	48 8b 54 24 28	 mov	 rdx, QWORD PTR format_spec$[rsp]
  0003f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00044	e8 00 00 00 00	 call	 PyObject_Format
$LN2@builtin_fo:

; 516  : }

  00049	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004d	c3		 ret	 0
builtin_format ENDP
_TEXT	ENDS
PUBLIC	??_C@_05PIAJHJOI@i?3chr?$AA@			; `string'
EXTRN	PyUnicode_FromOrdinal:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_chr DD imagerel builtin_chr
	DD	imagerel builtin_chr+58
	DD	imagerel $unwind$builtin_chr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_chr DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_05PIAJHJOI@i?3chr?$AA@
CONST	SEGMENT
??_C@_05PIAJHJOI@i?3chr?$AA@ DB 'i:chr', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT builtin_chr
_TEXT	SEGMENT
x$ = 32
self$ = 64
args$ = 72
builtin_chr PROC					; COMDAT

; 526  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 527  :     int x;
; 528  : 
; 529  :     if (!PyArg_ParseTuple(args, "i:chr", &x))

  0000e	4c 8d 44 24 20	 lea	 r8, QWORD PTR x$[rsp]
  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05PIAJHJOI@i?3chr?$AA@
  0001a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  0001f	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00024	85 c0		 test	 eax, eax
  00026	75 04		 jne	 SHORT $LN1@builtin_ch

; 530  :         return NULL;

  00028	33 c0		 xor	 eax, eax
  0002a	eb 09		 jmp	 SHORT $LN2@builtin_ch
$LN1@builtin_ch:

; 531  : 
; 532  :     return PyUnicode_FromOrdinal(x);

  0002c	8b 4c 24 20	 mov	 ecx, DWORD PTR x$[rsp]
  00030	e8 00 00 00 00	 call	 PyUnicode_FromOrdinal
$LN2@builtin_ch:

; 533  : }

  00035	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00039	c3		 ret	 0
builtin_chr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@DMGDKJPB@string?0?5bytes?0?5AST?5or?5code?$AA@ ; `string'
PUBLIC	??_C@_0DD@KGFDLBKI@compile?$CI?$CJ?5arg?53?5must?5be?5?8exec?8?0?5@ ; `string'
PUBLIC	??_C@_06EJFMBPJF@single?$AA@			; `string'
PUBLIC	??_C@_0CC@HHFHCFKD@compile?$CI?$CJ?3?5invalid?5optimize?5valu@ ; `string'
PUBLIC	??_C@_0BO@BKNJNDDB@compile?$CI?$CJ?3?5unrecognised?5flags?$AA@ ; `string'
PUBLIC	??_C@_1DI@MHOOMCFC@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAi?$AAl?$AAe?$AAn?$AAa?$AAm?$AAe?$AA_?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BB@GIPLJJMM@OO?$CGs?$HMiii?3compile?$AA@	; `string'
EXTRN	Py_CompileStringExFlags:PROC
EXTRN	PyAST_CompileEx:PROC
EXTRN	PyAST_Validate:PROC
EXTRN	PyArena_Free:PROC
EXTRN	PyAST_obj2mod:PROC
EXTRN	PyArena_New:PROC
EXTRN	PyAST_Check:PROC
EXTRN	strcmp:PROC
EXTRN	PyEval_MergeCompilerFlags:PROC
EXTRN	PyExc_ValueError:QWORD
EXTRN	PyUnicode_FSConverter:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_compile DD imagerel builtin_compile
	DD	imagerel builtin_compile+957
	DD	imagerel $unwind$builtin_compile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_compile DD 021601H
	DD	01b0116H
xdata	ENDS
;	COMDAT ??_C@_0BL@DMGDKJPB@string?0?5bytes?0?5AST?5or?5code?$AA@
CONST	SEGMENT
??_C@_0BL@DMGDKJPB@string?0?5bytes?0?5AST?5or?5code?$AA@ DB 'string, byte'
	DB	's, AST or code', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@KGFDLBKI@compile?$CI?$CJ?5arg?53?5must?5be?5?8exec?8?0?5@
CONST	SEGMENT
??_C@_0DD@KGFDLBKI@compile?$CI?$CJ?5arg?53?5must?5be?5?8exec?8?0?5@ DB 'c'
	DB	'ompile() arg 3 must be ''exec'', ''eval'' or ''single''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06EJFMBPJF@single?$AA@
CONST	SEGMENT
??_C@_06EJFMBPJF@single?$AA@ DB 'single', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@HHFHCFKD@compile?$CI?$CJ?3?5invalid?5optimize?5valu@
CONST	SEGMENT
??_C@_0CC@HHFHCFKD@compile?$CI?$CJ?3?5invalid?5optimize?5valu@ DB 'compil'
	DB	'e(): invalid optimize value', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BKNJNDDB@compile?$CI?$CJ?3?5unrecognised?5flags?$AA@
CONST	SEGMENT
??_C@_0BO@BKNJNDDB@compile?$CI?$CJ?3?5unrecognised?5flags?$AA@ DB 'compil'
	DB	'e(): unrecognised flags', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DI@MHOOMCFC@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAi?$AAl?$AAe?$AAn?$AAa?$AAm?$AAe?$AA_?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@MHOOMCFC@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAi?$AAl?$AAe?$AAn?$AAa?$AAm?$AAe?$AA_?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'a', 00H
	DB	'm', 00H, 'e', 00H, '_', 00H, 'o', 00H, 'b', 00H, 'j', 00H, ')'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GIPLJJMM@OO?$CGs?$HMiii?3compile?$AA@
CONST	SEGMENT
??_C@_0BB@GIPLJJMM@OO?$CGs?$HMiii?3compile?$AA@ DB 'OO&s|iii:compile', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT builtin_compile
_TEXT	SEGMENT
cmd$ = 96
supplied_flags$ = 104
mode$ = 108
filename_obj$ = 112
is_ast$ = 120
dont_inherit$ = 124
cf$ = 128
start$ = 136
startstr$ = 152
result$ = 160
optimize$ = 168
filename$ = 176
str$ = 184
arena$21965 = 192
mod$21966 = 200
self$ = 224
args$ = 232
kwds$ = 240
builtin_compile PROC					; COMDAT

; 573  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H

; 574  :     char *str;
; 575  :     PyObject *filename_obj;
; 576  :     char *filename;
; 577  :     char *startstr;
; 578  :     int mode = -1;

  00016	c7 44 24 6c ff
	ff ff ff	 mov	 DWORD PTR mode$[rsp], -1

; 579  :     int dont_inherit = 0;

  0001e	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR dont_inherit$[rsp], 0

; 580  :     int supplied_flags = 0;

  00026	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR supplied_flags$[rsp], 0

; 581  :     int optimize = -1;

  0002e	c7 84 24 a8 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR optimize$[rsp], -1

; 582  :     int is_ast;
; 583  :     PyCompilerFlags cf;
; 584  :     PyObject *cmd;
; 585  :     static char *kwlist[] = {"source", "filename", "mode", "flags",
; 586  :                              "dont_inherit", "optimize", NULL};
; 587  :     int start[] = {Py_file_input, Py_eval_input, Py_single_input};

  00039	c7 84 24 88 00
	00 00 01 01 00
	00		 mov	 DWORD PTR start$[rsp], 257 ; 00000101H
  00044	c7 84 24 8c 00
	00 00 02 01 00
	00		 mov	 DWORD PTR start$[rsp+4], 258 ; 00000102H
  0004f	c7 84 24 90 00
	00 00 00 01 00
	00		 mov	 DWORD PTR start$[rsp+8], 256 ; 00000100H

; 588  :     PyObject *result;
; 589  : 
; 590  :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "OO&s|iii:compile",  kwlist,
; 591  :                                      &cmd,
; 592  :                                      PyUnicode_FSConverter, &filename_obj,
; 593  :                                      &startstr, &supplied_flags,
; 594  :                                      &dont_inherit, &optimize))

  0005a	48 8d 84 24 a8
	00 00 00	 lea	 rax, QWORD PTR optimize$[rsp]
  00062	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  00067	48 8d 44 24 7c	 lea	 rax, QWORD PTR dont_inherit$[rsp]
  0006c	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00071	48 8d 44 24 68	 lea	 rax, QWORD PTR supplied_flags$[rsp]
  00076	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  0007b	48 8d 84 24 98
	00 00 00	 lea	 rax, QWORD PTR startstr$[rsp]
  00083	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00088	48 8d 44 24 70	 lea	 rax, QWORD PTR filename_obj$[rsp]
  0008d	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00092	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_FSConverter
  00099	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0009e	48 8d 44 24 60	 lea	 rax, QWORD PTR cmd$[rsp]
  000a3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000a8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??builtin_compile@@9@9
  000af	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BB@GIPLJJMM@OO?$CGs?$HMiii?3compile?$AA@
  000b6	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  000be	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  000c6	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  000cb	85 c0		 test	 eax, eax
  000cd	75 07		 jne	 SHORT $LN19@builtin_co

; 595  :         return NULL;

  000cf	33 c0		 xor	 eax, eax
  000d1	e9 df 02 00 00	 jmp	 $LN20@builtin_co
$LN19@builtin_co:

; 596  : 
; 597  :     filename = PyBytes_AS_STRING(filename_obj);

  000d6	48 8b 44 24 70	 mov	 rax, QWORD PTR filename_obj$[rsp]
  000db	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000df	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000e5	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  000ea	85 c0		 test	 eax, eax
  000ec	75 1c		 jne	 SHORT $LN22@builtin_co
  000ee	41 b8 55 02 00
	00		 mov	 r8d, 597		; 00000255H
  000f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@NKNCFJLO@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAb?$AAl?$AAt?$AAi?$AAn?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  000fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@MHOOMCFC@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAi?$AAl?$AAe?$AAn?$AAa?$AAm?$AAe?$AA_?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  00102	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00108	33 c0		 xor	 eax, eax
$LN22@builtin_co:
  0010a	48 8b 44 24 70	 mov	 rax, QWORD PTR filename_obj$[rsp]
  0010f	48 83 c0 78	 add	 rax, 120		; 00000078H
  00113	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR filename$[rsp], rax

; 598  :     cf.cf_flags = supplied_flags | PyCF_SOURCE_IS_UTF8;

  0011b	8b 44 24 68	 mov	 eax, DWORD PTR supplied_flags$[rsp]
  0011f	0f ba e8 08	 bts	 eax, 8
  00123	89 84 24 80 00
	00 00		 mov	 DWORD PTR cf$[rsp], eax

; 599  : 
; 600  :     if (supplied_flags &
; 601  :         ~(PyCF_MASK | PyCF_MASK_OBSOLETE | PyCF_DONT_IMPLY_DEDENT | PyCF_ONLY_AST))

  0012a	8b 44 24 68	 mov	 eax, DWORD PTR supplied_flags$[rsp]
  0012e	25 ef 19 f8 ff	 and	 eax, -517649		; fffffffffff819efH
  00133	85 c0		 test	 eax, eax
  00135	74 18		 je	 SHORT $LN18@builtin_co

; 602  :     {
; 603  :         PyErr_SetString(PyExc_ValueError,
; 604  :                         "compile(): unrecognised flags");

  00137	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@BKNJNDDB@compile?$CI?$CJ?3?5unrecognised?5flags?$AA@
  0013e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00145	e8 00 00 00 00	 call	 PyErr_SetString

; 605  :         goto error;

  0014a	e9 48 02 00 00	 jmp	 $error$21945
$LN18@builtin_co:

; 606  :     }
; 607  :     /* XXX Warn if (supplied_flags & PyCF_MASK_OBSOLETE) != 0? */
; 608  : 
; 609  :     if (optimize < -1 || optimize > 2) {

  0014f	83 bc 24 a8 00
	00 00 ff	 cmp	 DWORD PTR optimize$[rsp], -1
  00157	7c 0a		 jl	 SHORT $LN16@builtin_co
  00159	83 bc 24 a8 00
	00 00 02	 cmp	 DWORD PTR optimize$[rsp], 2
  00161	7e 18		 jle	 SHORT $LN17@builtin_co
$LN16@builtin_co:

; 610  :         PyErr_SetString(PyExc_ValueError,
; 611  :                         "compile(): invalid optimize value");

  00163	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@HHFHCFKD@compile?$CI?$CJ?3?5invalid?5optimize?5valu@
  0016a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00171	e8 00 00 00 00	 call	 PyErr_SetString

; 612  :         goto error;

  00176	e9 1c 02 00 00	 jmp	 $error$21945
$LN17@builtin_co:

; 613  :     }
; 614  : 
; 615  :     if (!dont_inherit) {

  0017b	83 7c 24 7c 00	 cmp	 DWORD PTR dont_inherit$[rsp], 0
  00180	75 0d		 jne	 SHORT $LN15@builtin_co

; 616  :         PyEval_MergeCompilerFlags(&cf);

  00182	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR cf$[rsp]
  0018a	e8 00 00 00 00	 call	 PyEval_MergeCompilerFlags
$LN15@builtin_co:

; 617  :     }
; 618  : 
; 619  :     if (strcmp(startstr, "exec") == 0)

  0018f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04MGEIEJAD@exec?$AA@
  00196	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR startstr$[rsp]
  0019e	e8 00 00 00 00	 call	 strcmp
  001a3	85 c0		 test	 eax, eax
  001a5	75 0a		 jne	 SHORT $LN14@builtin_co

; 620  :         mode = 0;

  001a7	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR mode$[rsp], 0
  001af	eb 5c		 jmp	 SHORT $LN13@builtin_co
$LN14@builtin_co:

; 621  :     else if (strcmp(startstr, "eval") == 0)

  001b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04KGAGIKCD@eval?$AA@
  001b8	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR startstr$[rsp]
  001c0	e8 00 00 00 00	 call	 strcmp
  001c5	85 c0		 test	 eax, eax
  001c7	75 0a		 jne	 SHORT $LN12@builtin_co

; 622  :         mode = 1;

  001c9	c7 44 24 6c 01
	00 00 00	 mov	 DWORD PTR mode$[rsp], 1
  001d1	eb 3a		 jmp	 SHORT $LN11@builtin_co
$LN12@builtin_co:

; 623  :     else if (strcmp(startstr, "single") == 0)

  001d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06EJFMBPJF@single?$AA@
  001da	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR startstr$[rsp]
  001e2	e8 00 00 00 00	 call	 strcmp
  001e7	85 c0		 test	 eax, eax
  001e9	75 0a		 jne	 SHORT $LN10@builtin_co

; 624  :         mode = 2;

  001eb	c7 44 24 6c 02
	00 00 00	 mov	 DWORD PTR mode$[rsp], 2

; 625  :     else {

  001f3	eb 18		 jmp	 SHORT $LN9@builtin_co
$LN10@builtin_co:

; 626  :         PyErr_SetString(PyExc_ValueError,
; 627  :                         "compile() arg 3 must be 'exec', 'eval' or 'single'");

  001f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@KGFDLBKI@compile?$CI?$CJ?5arg?53?5must?5be?5?8exec?8?0?5@
  001fc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00203	e8 00 00 00 00	 call	 PyErr_SetString

; 628  :         goto error;

  00208	e9 8a 01 00 00	 jmp	 $error$21945
$LN9@builtin_co:
$LN11@builtin_co:
$LN13@builtin_co:

; 629  :     }
; 630  : 
; 631  :     is_ast = PyAST_Check(cmd);

  0020d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR cmd$[rsp]
  00212	e8 00 00 00 00	 call	 PyAST_Check
  00217	89 44 24 78	 mov	 DWORD PTR is_ast$[rsp], eax

; 632  :     if (is_ast == -1)

  0021b	83 7c 24 78 ff	 cmp	 DWORD PTR is_ast$[rsp], -1
  00220	75 05		 jne	 SHORT $LN8@builtin_co

; 633  :         goto error;

  00222	e9 70 01 00 00	 jmp	 $error$21945
$LN8@builtin_co:

; 634  :     if (is_ast) {

  00227	83 7c 24 78 00	 cmp	 DWORD PTR is_ast$[rsp], 0
  0022c	0f 84 f1 00 00
	00		 je	 $LN7@builtin_co

; 635  :         if (supplied_flags & PyCF_ONLY_AST) {

  00232	8b 44 24 68	 mov	 eax, DWORD PTR supplied_flags$[rsp]
  00236	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  0023b	85 c0		 test	 eax, eax
  0023d	74 1c		 je	 SHORT $LN6@builtin_co

; 636  :             Py_INCREF(cmd);

  0023f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR cmd$[rsp]
  00244	e8 00 00 00 00	 call	 _Py_IncRef

; 637  :             result = cmd;

  00249	48 8b 44 24 60	 mov	 rax, QWORD PTR cmd$[rsp]
  0024e	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR result$[rsp], rax

; 638  :         }
; 639  :         else {

  00256	e9 c3 00 00 00	 jmp	 $LN5@builtin_co
$LN6@builtin_co:

; 640  :             PyArena *arena;
; 641  :             mod_ty mod;
; 642  : 
; 643  :             arena = PyArena_New();

  0025b	e8 00 00 00 00	 call	 PyArena_New
  00260	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR arena$21965[rsp], rax

; 644  :             if (arena == NULL)

  00268	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR arena$21965[rsp], 0
  00271	75 05		 jne	 SHORT $LN4@builtin_co

; 645  :                 goto error;

  00273	e9 1f 01 00 00	 jmp	 $error$21945
$LN4@builtin_co:

; 646  :             mod = PyAST_obj2mod(cmd, arena, mode);

  00278	44 8b 44 24 6c	 mov	 r8d, DWORD PTR mode$[rsp]
  0027d	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR arena$21965[rsp]
  00285	48 8b 4c 24 60	 mov	 rcx, QWORD PTR cmd$[rsp]
  0028a	e8 00 00 00 00	 call	 PyAST_obj2mod
  0028f	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR mod$21966[rsp], rax

; 647  :             if (mod == NULL) {

  00297	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR mod$21966[rsp], 0
  002a0	75 12		 jne	 SHORT $LN3@builtin_co

; 648  :                 PyArena_Free(arena);

  002a2	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR arena$21965[rsp]
  002aa	e8 00 00 00 00	 call	 PyArena_Free

; 649  :                 goto error;

  002af	e9 e3 00 00 00	 jmp	 $error$21945
$LN3@builtin_co:

; 650  :             }
; 651  :             if (!PyAST_Validate(mod)) {

  002b4	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR mod$21966[rsp]
  002bc	e8 00 00 00 00	 call	 PyAST_Validate
  002c1	85 c0		 test	 eax, eax
  002c3	75 12		 jne	 SHORT $LN2@builtin_co

; 652  :                 PyArena_Free(arena);

  002c5	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR arena$21965[rsp]
  002cd	e8 00 00 00 00	 call	 PyArena_Free

; 653  :                 goto error;

  002d2	e9 c0 00 00 00	 jmp	 $error$21945
$LN2@builtin_co:

; 654  :             }
; 655  :             result = (PyObject*)PyAST_CompileEx(mod, filename,
; 656  :                                                 &cf, optimize, arena);

  002d7	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR arena$21965[rsp]
  002df	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002e4	44 8b 8c 24 a8
	00 00 00	 mov	 r9d, DWORD PTR optimize$[rsp]
  002ec	4c 8d 84 24 80
	00 00 00	 lea	 r8, QWORD PTR cf$[rsp]
  002f4	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  002fc	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR mod$21966[rsp]
  00304	e8 00 00 00 00	 call	 PyAST_CompileEx
  00309	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR result$[rsp], rax

; 657  :             PyArena_Free(arena);

  00311	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR arena$21965[rsp]
  00319	e8 00 00 00 00	 call	 PyArena_Free
$LN5@builtin_co:

; 658  :         }
; 659  :         goto finally;

  0031e	e9 80 00 00 00	 jmp	 $finally$21973
$LN7@builtin_co:

; 660  :     }
; 661  : 
; 662  :     str = source_as_string(cmd, "compile", "string, bytes, AST or code", &cf);

  00323	4c 8d 8c 24 80
	00 00 00	 lea	 r9, QWORD PTR cf$[rsp]
  0032b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BL@DMGDKJPB@string?0?5bytes?0?5AST?5or?5code?$AA@
  00332	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07OLJGFCKG@compile?$AA@
  00339	48 8b 4c 24 60	 mov	 rcx, QWORD PTR cmd$[rsp]
  0033e	e8 00 00 00 00	 call	 source_as_string
  00343	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR str$[rsp], rax

; 663  :     if (str == NULL)

  0034b	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR str$[rsp], 0
  00354	75 02		 jne	 SHORT $LN1@builtin_co

; 664  :         goto error;

  00356	eb 3f		 jmp	 SHORT $error$21945
$LN1@builtin_co:

; 665  : 
; 666  :     result = Py_CompileStringExFlags(str, filename, start[mode], &cf, optimize);

  00358	48 63 44 24 6c	 movsxd	 rax, DWORD PTR mode$[rsp]
  0035d	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR optimize$[rsp]
  00364	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  00368	4c 8d 8c 24 80
	00 00 00	 lea	 r9, QWORD PTR cf$[rsp]
  00370	44 8b 84 84 88
	00 00 00	 mov	 r8d, DWORD PTR start$[rsp+rax*4]
  00378	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  00380	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR str$[rsp]
  00388	e8 00 00 00 00	 call	 Py_CompileStringExFlags
  0038d	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR result$[rsp], rax

; 667  :     goto finally;

  00395	eb 0c		 jmp	 SHORT $finally$21973
$error$21945:

; 668  : 
; 669  : error:
; 670  :     result = NULL;

  00397	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR result$[rsp], 0
$finally$21973:

; 671  : finally:
; 672  :     Py_DECREF(filename_obj);

  003a3	48 8b 4c 24 70	 mov	 rcx, QWORD PTR filename_obj$[rsp]
  003a8	e8 00 00 00 00	 call	 _Py_DecRef

; 673  :     return result;

  003ad	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR result$[rsp]
$LN20@builtin_co:

; 674  : }

  003b5	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  003bc	c3		 ret	 0
builtin_compile ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CN@PMEFIJHB@source?5code?5string?5cannot?5contai@ ; `string'
PUBLIC	??_C@_0BP@FFMADPCO@?$CFs?$CI?$CJ?5arg?51?5must?5be?5a?5?$CFs?5object?$AA@ ; `string'
EXTRN	strlen:PROC
EXTRN	PyObject_AsReadBuffer:PROC
EXTRN	PyErr_Format:PROC
EXTRN	PyObject_CheckReadBuffer:PROC
EXTRN	PyUnicode_AsUTF8AndSize:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$source_as_string DD imagerel source_as_string
	DD	imagerel source_as_string+227
	DD	imagerel $unwind$source_as_string
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$source_as_string DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT ??_C@_0CN@PMEFIJHB@source?5code?5string?5cannot?5contai@
CONST	SEGMENT
??_C@_0CN@PMEFIJHB@source?5code?5string?5cannot?5contai@ DB 'source code '
	DB	'string cannot contain null bytes', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@FFMADPCO@?$CFs?$CI?$CJ?5arg?51?5must?5be?5a?5?$CFs?5object?$AA@
CONST	SEGMENT
??_C@_0BP@FFMADPCO@?$CFs?$CI?$CJ?5arg?51?5must?5be?5a?5?$CFs?5object?$AA@ DB '%'
	DB	's() arg 1 must be a %s object', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT source_as_string
_TEXT	SEGMENT
size$ = 32
str$ = 40
cmd$ = 64
funcname$ = 72
what$ = 80
cf$ = 88
source_as_string PROC					; COMDAT

; 543  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 544  :     char *str;
; 545  :     Py_ssize_t size;
; 546  : 
; 547  :     if (PyUnicode_Check(cmd)) {

  00018	48 8b 44 24 40	 mov	 rax, QWORD PTR cmd$[rsp]
  0001d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00021	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00027	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0002c	85 c0		 test	 eax, eax
  0002e	74 34		 je	 SHORT $LN7@source_as_

; 548  :         cf->cf_flags |= PyCF_IGNORE_COOKIE;

  00030	48 8b 44 24 58	 mov	 rax, QWORD PTR cf$[rsp]
  00035	8b 00		 mov	 eax, DWORD PTR [rax]
  00037	0f ba e8 0b	 bts	 eax, 11
  0003b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cf$[rsp]
  00040	89 01		 mov	 DWORD PTR [rcx], eax

; 549  :         str = PyUnicode_AsUTF8AndSize(cmd, &size);

  00042	48 8d 54 24 20	 lea	 rdx, QWORD PTR size$[rsp]
  00047	48 8b 4c 24 40	 mov	 rcx, QWORD PTR cmd$[rsp]
  0004c	e8 00 00 00 00	 call	 PyUnicode_AsUTF8AndSize
  00051	48 89 44 24 28	 mov	 QWORD PTR str$[rsp], rax

; 550  :         if (str == NULL)

  00056	48 83 7c 24 28
	00		 cmp	 QWORD PTR str$[rsp], 0
  0005c	75 04		 jne	 SHORT $LN6@source_as_

; 551  :             return NULL;

  0005e	33 c0		 xor	 eax, eax
  00060	eb 7c		 jmp	 SHORT $LN8@source_as_
$LN6@source_as_:

; 552  :     }
; 553  :     else if (!PyObject_CheckReadBuffer(cmd)) {

  00062	eb 4d		 jmp	 SHORT $LN5@source_as_
$LN7@source_as_:
  00064	48 8b 4c 24 40	 mov	 rcx, QWORD PTR cmd$[rsp]
  00069	e8 00 00 00 00	 call	 PyObject_CheckReadBuffer
  0006e	85 c0		 test	 eax, eax
  00070	75 23		 jne	 SHORT $LN4@source_as_

; 554  :         PyErr_Format(PyExc_TypeError,
; 555  :           "%s() arg 1 must be a %s object",
; 556  :           funcname, what);

  00072	4c 8b 4c 24 50	 mov	 r9, QWORD PTR what$[rsp]
  00077	4c 8b 44 24 48	 mov	 r8, QWORD PTR funcname$[rsp]
  0007c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@FFMADPCO@?$CFs?$CI?$CJ?5arg?51?5must?5be?5a?5?$CFs?5object?$AA@
  00083	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0008a	e8 00 00 00 00	 call	 PyErr_Format

; 557  :         return NULL;

  0008f	33 c0		 xor	 eax, eax
  00091	eb 4b		 jmp	 SHORT $LN8@source_as_
  00093	eb 1c		 jmp	 SHORT $LN3@source_as_
$LN4@source_as_:

; 558  :     }
; 559  :     else if (PyObject_AsReadBuffer(cmd, (const void **)&str, &size) < 0) {

  00095	4c 8d 44 24 20	 lea	 r8, QWORD PTR size$[rsp]
  0009a	48 8d 54 24 28	 lea	 rdx, QWORD PTR str$[rsp]
  0009f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR cmd$[rsp]
  000a4	e8 00 00 00 00	 call	 PyObject_AsReadBuffer
  000a9	85 c0		 test	 eax, eax
  000ab	7d 04		 jge	 SHORT $LN2@source_as_

; 560  :         return NULL;

  000ad	33 c0		 xor	 eax, eax
  000af	eb 2d		 jmp	 SHORT $LN8@source_as_
$LN2@source_as_:
$LN3@source_as_:
$LN5@source_as_:

; 561  :     }
; 562  : 
; 563  :     if (strlen(str) != size) {

  000b1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR str$[rsp]
  000b6	e8 00 00 00 00	 call	 strlen
  000bb	48 3b 44 24 20	 cmp	 rax, QWORD PTR size$[rsp]
  000c0	74 17		 je	 SHORT $LN1@source_as_

; 564  :         PyErr_SetString(PyExc_TypeError,
; 565  :                         "source code string cannot contain null bytes");

  000c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@PMEFIJHB@source?5code?5string?5cannot?5contai@
  000c9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000d0	e8 00 00 00 00	 call	 PyErr_SetString

; 566  :         return NULL;

  000d5	33 c0		 xor	 eax, eax
  000d7	eb 05		 jmp	 SHORT $LN8@source_as_
$LN1@source_as_:

; 567  :     }
; 568  :     return str;

  000d9	48 8b 44 24 28	 mov	 rax, QWORD PTR str$[rsp]
$LN8@source_as_:

; 569  : }

  000de	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000e2	c3		 ret	 0
source_as_string ENDP
_TEXT	ENDS
EXTRN	PyObject_Dir:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_dir DD imagerel builtin_dir
	DD	imagerel builtin_dir+82
	DD	imagerel $unwind$builtin_dir
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_dir DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT builtin_dir
_TEXT	SEGMENT
arg$ = 48
self$ = 80
args$ = 88
builtin_dir PROC					; COMDAT

; 693  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 694  :     PyObject *arg = NULL;

  0000e	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR arg$[rsp], 0

; 695  : 
; 696  :     if (!PyArg_UnpackTuple(args, "dir", 0, 1, &arg))

  00017	48 8d 44 24 30	 lea	 rax, QWORD PTR arg$[rsp]
  0001c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00021	41 b9 01 00 00
	00		 mov	 r9d, 1
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03DAPAKLGM@dir?$AA@
  00031	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  00036	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003b	85 c0		 test	 eax, eax
  0003d	75 04		 jne	 SHORT $LN1@builtin_di

; 697  :         return NULL;

  0003f	33 c0		 xor	 eax, eax
  00041	eb 0a		 jmp	 SHORT $LN2@builtin_di
$LN1@builtin_di:

; 698  :     return PyObject_Dir(arg);

  00043	48 8b 4c 24 30	 mov	 rcx, QWORD PTR arg$[rsp]
  00048	e8 00 00 00 00	 call	 PyObject_Dir
$LN2@builtin_di:

; 699  : }

  0004d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00051	c3		 ret	 0
builtin_dir ENDP
_TEXT	ENDS
EXTRN	PyNumber_Divmod:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_divmod DD imagerel builtin_divmod
	DD	imagerel builtin_divmod+91
	DD	imagerel $unwind$builtin_divmod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_divmod DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT builtin_divmod
_TEXT	SEGMENT
w$ = 48
v$ = 56
self$ = 80
args$ = 88
builtin_divmod PROC					; COMDAT

; 717  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 718  :     PyObject *v, *w;
; 719  : 
; 720  :     if (!PyArg_UnpackTuple(args, "divmod", 2, 2, &v, &w))

  0000e	48 8d 44 24 30	 lea	 rax, QWORD PTR w$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 38	 lea	 rax, QWORD PTR v$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06MPFFAOOK@divmod?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN1@builtin_di@2

; 721  :         return NULL;

  00043	33 c0		 xor	 eax, eax
  00045	eb 0f		 jmp	 SHORT $LN2@builtin_di@2
$LN1@builtin_di@2:

; 722  :     return PyNumber_Divmod(v, w);

  00047	48 8b 54 24 30	 mov	 rdx, QWORD PTR w$[rsp]
  0004c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR v$[rsp]
  00051	e8 00 00 00 00	 call	 PyNumber_Divmod
$LN2@builtin_di@2:

; 723  : }

  00056	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005a	c3		 ret	 0
builtin_divmod ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@MMLHEKFC@string?0?5bytes?5or?5code?$AA@ ; `string'
PUBLIC	??_C@_0DM@LCBLLFJM@code?5object?5passed?5to?5eval?$CI?$CJ?5may@ ; `string'
PUBLIC	??_C@_0N@MNFFDJII@__builtins__?$AA@		; `string'
PUBLIC	??_C@_0EC@BHEOOLCL@eval?5must?5be?5given?5globals?5and?5l@ ; `string'
PUBLIC	??_C@_0BH@LLPACJFC@globals?5must?5be?5a?5dict?$AA@ ; `string'
PUBLIC	??_C@_0DJ@LOMAAGCE@globals?5must?5be?5a?5real?5dict?$DL?5try@ ; `string'
PUBLIC	??_C@_0BJ@KKOGEBDF@locals?5must?5be?5a?5mapping?$AA@ ; `string'
EXTRN	PyRun_StringFlags:PROC
EXTRN	PyEval_EvalCode:PROC
EXTRN	PyCode_Type:BYTE
EXTRN	PyDict_SetItemString:PROC
EXTRN	PyEval_GetBuiltins:PROC
EXTRN	PyEval_GetLocals:PROC
EXTRN	PyEval_GetGlobals:PROC
EXTRN	PyMapping_Check:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_eval DD imagerel builtin_eval
	DD	imagerel builtin_eval+723
	DD	imagerel $unwind$builtin_eval
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_eval DD 021101H
	DD	0110111H
xdata	ENDS
;	COMDAT ??_C@_0BG@MMLHEKFC@string?0?5bytes?5or?5code?$AA@
CONST	SEGMENT
??_C@_0BG@MMLHEKFC@string?0?5bytes?5or?5code?$AA@ DB 'string, bytes or co'
	DB	'de', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@LCBLLFJM@code?5object?5passed?5to?5eval?$CI?$CJ?5may@
CONST	SEGMENT
??_C@_0DM@LCBLLFJM@code?5object?5passed?5to?5eval?$CI?$CJ?5may@ DB 'code '
	DB	'object passed to eval() may not contain free variables', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MNFFDJII@__builtins__?$AA@
CONST	SEGMENT
??_C@_0N@MNFFDJII@__builtins__?$AA@ DB '__builtins__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@BHEOOLCL@eval?5must?5be?5given?5globals?5and?5l@
CONST	SEGMENT
??_C@_0EC@BHEOOLCL@eval?5must?5be?5given?5globals?5and?5l@ DB 'eval must '
	DB	'be given globals and locals when called without a frame', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LLPACJFC@globals?5must?5be?5a?5dict?$AA@
CONST	SEGMENT
??_C@_0BH@LLPACJFC@globals?5must?5be?5a?5dict?$AA@ DB 'globals must be a '
	DB	'dict', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@LOMAAGCE@globals?5must?5be?5a?5real?5dict?$DL?5try@
CONST	SEGMENT
??_C@_0DJ@LOMAAGCE@globals?5must?5be?5a?5real?5dict?$DL?5try@ DB 'globals'
	DB	' must be a real dict; try eval(expr, {}, mapping)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KKOGEBDF@locals?5must?5be?5a?5mapping?$AA@
CONST	SEGMENT
??_C@_0BJ@KKOGEBDF@locals?5must?5be?5a?5mapping?$AA@ DB 'locals must be a'
	DB	' mapping', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT builtin_eval
_TEXT	SEGMENT
globals$ = 64
cmd$ = 72
locals$ = 80
tmp$ = 88
cf$ = 96
result$ = 104
str$ = 112
tv87 = 120
self$ = 144
args$ = 152
builtin_eval PROC					; COMDAT

; 733  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 734  :     PyObject *cmd, *result, *tmp = NULL;

  00011	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0

; 735  :     PyObject *globals = Py_None, *locals = Py_None;

  0001a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00021	48 89 44 24 40	 mov	 QWORD PTR globals$[rsp], rax
  00026	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0002d	48 89 44 24 50	 mov	 QWORD PTR locals$[rsp], rax

; 736  :     char *str;
; 737  :     PyCompilerFlags cf;
; 738  : 
; 739  :     if (!PyArg_UnpackTuple(args, "eval", 1, 3, &cmd, &globals, &locals))

  00032	48 8d 44 24 50	 lea	 rax, QWORD PTR locals$[rsp]
  00037	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0003c	48 8d 44 24 40	 lea	 rax, QWORD PTR globals$[rsp]
  00041	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00046	48 8d 44 24 48	 lea	 rax, QWORD PTR cmd$[rsp]
  0004b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00050	41 b9 03 00 00
	00		 mov	 r9d, 3
  00056	41 b8 01 00 00
	00		 mov	 r8d, 1
  0005c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04KGAGIKCD@eval?$AA@
  00063	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0006b	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00070	85 c0		 test	 eax, eax
  00072	75 07		 jne	 SHORT $LN21@builtin_ev

; 740  :         return NULL;

  00074	33 c0		 xor	 eax, eax
  00076	e9 50 02 00 00	 jmp	 $LN22@builtin_ev
$LN21@builtin_ev:

; 741  :     if (locals != Py_None && !PyMapping_Check(locals)) {

  0007b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00082	48 39 44 24 50	 cmp	 QWORD PTR locals$[rsp], rax
  00087	74 28		 je	 SHORT $LN20@builtin_ev
  00089	48 8b 4c 24 50	 mov	 rcx, QWORD PTR locals$[rsp]
  0008e	e8 00 00 00 00	 call	 PyMapping_Check
  00093	85 c0		 test	 eax, eax
  00095	75 1a		 jne	 SHORT $LN20@builtin_ev

; 742  :         PyErr_SetString(PyExc_TypeError, "locals must be a mapping");

  00097	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@KKOGEBDF@locals?5must?5be?5a?5mapping?$AA@
  0009e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000a5	e8 00 00 00 00	 call	 PyErr_SetString

; 743  :         return NULL;

  000aa	33 c0		 xor	 eax, eax
  000ac	e9 1a 02 00 00	 jmp	 $LN22@builtin_ev
$LN20@builtin_ev:

; 744  :     }
; 745  :     if (globals != Py_None && !PyDict_Check(globals)) {

  000b1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000b8	48 39 44 24 40	 cmp	 QWORD PTR globals$[rsp], rax
  000bd	74 58		 je	 SHORT $LN19@builtin_ev
  000bf	48 8b 44 24 40	 mov	 rax, QWORD PTR globals$[rsp]
  000c4	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000c8	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000ce	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  000d3	85 c0		 test	 eax, eax
  000d5	75 40		 jne	 SHORT $LN19@builtin_ev

; 746  :         PyErr_SetString(PyExc_TypeError, PyMapping_Check(globals) ?
; 747  :             "globals must be a real dict; try eval(expr, {}, mapping)"
; 748  :             : "globals must be a dict");

  000d7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR globals$[rsp]
  000dc	e8 00 00 00 00	 call	 PyMapping_Check
  000e1	85 c0		 test	 eax, eax
  000e3	74 0e		 je	 SHORT $LN24@builtin_ev
  000e5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0DJ@LOMAAGCE@globals?5must?5be?5a?5real?5dict?$DL?5try@
  000ec	48 89 44 24 78	 mov	 QWORD PTR tv87[rsp], rax
  000f1	eb 0c		 jmp	 SHORT $LN25@builtin_ev
$LN24@builtin_ev:
  000f3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BH@LLPACJFC@globals?5must?5be?5a?5dict?$AA@
  000fa	48 89 44 24 78	 mov	 QWORD PTR tv87[rsp], rax
$LN25@builtin_ev:
  000ff	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv87[rsp]
  00104	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0010b	e8 00 00 00 00	 call	 PyErr_SetString

; 749  :         return NULL;

  00110	33 c0		 xor	 eax, eax
  00112	e9 b4 01 00 00	 jmp	 $LN22@builtin_ev
$LN19@builtin_ev:

; 750  :     }
; 751  :     if (globals == Py_None) {

  00117	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0011e	48 39 44 24 40	 cmp	 QWORD PTR globals$[rsp], rax
  00123	75 24		 jne	 SHORT $LN18@builtin_ev

; 752  :         globals = PyEval_GetGlobals();

  00125	e8 00 00 00 00	 call	 PyEval_GetGlobals
  0012a	48 89 44 24 40	 mov	 QWORD PTR globals$[rsp], rax

; 753  :         if (locals == Py_None)

  0012f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00136	48 39 44 24 50	 cmp	 QWORD PTR locals$[rsp], rax
  0013b	75 0a		 jne	 SHORT $LN17@builtin_ev

; 754  :             locals = PyEval_GetLocals();

  0013d	e8 00 00 00 00	 call	 PyEval_GetLocals
  00142	48 89 44 24 50	 mov	 QWORD PTR locals$[rsp], rax
$LN17@builtin_ev:

; 755  :     }
; 756  :     else if (locals == Py_None)

  00147	eb 18		 jmp	 SHORT $LN16@builtin_ev
$LN18@builtin_ev:
  00149	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00150	48 39 44 24 50	 cmp	 QWORD PTR locals$[rsp], rax
  00155	75 0a		 jne	 SHORT $LN15@builtin_ev

; 757  :         locals = globals;

  00157	48 8b 44 24 40	 mov	 rax, QWORD PTR globals$[rsp]
  0015c	48 89 44 24 50	 mov	 QWORD PTR locals$[rsp], rax
$LN15@builtin_ev:
$LN16@builtin_ev:

; 758  : 
; 759  :     if (globals == NULL || locals == NULL) {

  00161	48 83 7c 24 40
	00		 cmp	 QWORD PTR globals$[rsp], 0
  00167	74 08		 je	 SHORT $LN13@builtin_ev
  00169	48 83 7c 24 50
	00		 cmp	 QWORD PTR locals$[rsp], 0
  0016f	75 1a		 jne	 SHORT $LN14@builtin_ev
$LN13@builtin_ev:

; 760  :         PyErr_SetString(PyExc_TypeError,
; 761  :             "eval must be given globals and locals "
; 762  :             "when called without a frame");

  00171	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EC@BHEOOLCL@eval?5must?5be?5given?5globals?5and?5l@
  00178	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0017f	e8 00 00 00 00	 call	 PyErr_SetString

; 763  :         return NULL;

  00184	33 c0		 xor	 eax, eax
  00186	e9 40 01 00 00	 jmp	 $LN22@builtin_ev
$LN14@builtin_ev:

; 764  :     }
; 765  : 
; 766  :     if (PyDict_GetItemString(globals, "__builtins__") == NULL) {

  0018b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@MNFFDJII@__builtins__?$AA@
  00192	48 8b 4c 24 40	 mov	 rcx, QWORD PTR globals$[rsp]
  00197	e8 00 00 00 00	 call	 PyDict_GetItemString
  0019c	48 85 c0	 test	 rax, rax
  0019f	75 24		 jne	 SHORT $LN12@builtin_ev

; 767  :         if (PyDict_SetItemString(globals, "__builtins__",
; 768  :                                  PyEval_GetBuiltins()) != 0)

  001a1	e8 00 00 00 00	 call	 PyEval_GetBuiltins
  001a6	4c 8b c0	 mov	 r8, rax
  001a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@MNFFDJII@__builtins__?$AA@
  001b0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR globals$[rsp]
  001b5	e8 00 00 00 00	 call	 PyDict_SetItemString
  001ba	85 c0		 test	 eax, eax
  001bc	74 07		 je	 SHORT $LN11@builtin_ev

; 769  :             return NULL;

  001be	33 c0		 xor	 eax, eax
  001c0	e9 06 01 00 00	 jmp	 $LN22@builtin_ev
$LN11@builtin_ev:
$LN12@builtin_ev:

; 770  :     }
; 771  : 
; 772  :     if (PyCode_Check(cmd)) {

  001c5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCode_Type
  001cc	48 8b 4c 24 48	 mov	 rcx, QWORD PTR cmd$[rsp]
  001d1	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  001d5	75 46		 jne	 SHORT $LN10@builtin_ev

; 773  :         if (PyCode_GetNumFree((PyCodeObject *)cmd) > 0) {

  001d7	48 8b 44 24 48	 mov	 rax, QWORD PTR cmd$[rsp]
  001dc	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  001e3	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  001e8	7e 1a		 jle	 SHORT $LN9@builtin_ev

; 774  :             PyErr_SetString(PyExc_TypeError,
; 775  :         "code object passed to eval() may not contain free variables");

  001ea	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DM@LCBLLFJM@code?5object?5passed?5to?5eval?$CI?$CJ?5may@
  001f1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  001f8	e8 00 00 00 00	 call	 PyErr_SetString

; 776  :             return NULL;

  001fd	33 c0		 xor	 eax, eax
  001ff	e9 c7 00 00 00	 jmp	 $LN22@builtin_ev
$LN9@builtin_ev:

; 777  :         }
; 778  :         return PyEval_EvalCode(cmd, globals, locals);

  00204	4c 8b 44 24 50	 mov	 r8, QWORD PTR locals$[rsp]
  00209	48 8b 54 24 40	 mov	 rdx, QWORD PTR globals$[rsp]
  0020e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR cmd$[rsp]
  00213	e8 00 00 00 00	 call	 PyEval_EvalCode
  00218	e9 ae 00 00 00	 jmp	 $LN22@builtin_ev
$LN10@builtin_ev:

; 779  :     }
; 780  : 
; 781  :     cf.cf_flags = PyCF_SOURCE_IS_UTF8;

  0021d	c7 44 24 60 00
	01 00 00	 mov	 DWORD PTR cf$[rsp], 256	; 00000100H

; 782  :     str = source_as_string(cmd, "eval", "string, bytes or code", &cf);

  00225	4c 8d 4c 24 60	 lea	 r9, QWORD PTR cf$[rsp]
  0022a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BG@MMLHEKFC@string?0?5bytes?5or?5code?$AA@
  00231	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04KGAGIKCD@eval?$AA@
  00238	48 8b 4c 24 48	 mov	 rcx, QWORD PTR cmd$[rsp]
  0023d	e8 00 00 00 00	 call	 source_as_string
  00242	48 89 44 24 70	 mov	 QWORD PTR str$[rsp], rax

; 783  :     if (str == NULL)

  00247	48 83 7c 24 70
	00		 cmp	 QWORD PTR str$[rsp], 0
  0024d	75 04		 jne	 SHORT $LN8@builtin_ev

; 784  :         return NULL;

  0024f	33 c0		 xor	 eax, eax
  00251	eb 78		 jmp	 SHORT $LN22@builtin_ev
$LN8@builtin_ev:
$LN7@builtin_ev:

; 785  : 
; 786  :     while (*str == ' ' || *str == '\t')

  00253	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  00258	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0025b	83 f8 20	 cmp	 eax, 32			; 00000020H
  0025e	74 0d		 je	 SHORT $LN5@builtin_ev
  00260	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  00265	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00268	83 f8 09	 cmp	 eax, 9
  0026b	75 0f		 jne	 SHORT $LN6@builtin_ev
$LN5@builtin_ev:

; 787  :         str++;

  0026d	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  00272	48 ff c0	 inc	 rax
  00275	48 89 44 24 70	 mov	 QWORD PTR str$[rsp], rax
  0027a	eb d7		 jmp	 SHORT $LN7@builtin_ev
$LN6@builtin_ev:

; 788  : 
; 789  :     (void)PyEval_MergeCompilerFlags(&cf);

  0027c	48 8d 4c 24 60	 lea	 rcx, QWORD PTR cf$[rsp]
  00281	e8 00 00 00 00	 call	 PyEval_MergeCompilerFlags

; 790  :     result = PyRun_StringFlags(str, Py_eval_input, globals, locals, &cf);

  00286	48 8d 44 24 60	 lea	 rax, QWORD PTR cf$[rsp]
  0028b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00290	4c 8b 4c 24 50	 mov	 r9, QWORD PTR locals$[rsp]
  00295	4c 8b 44 24 40	 mov	 r8, QWORD PTR globals$[rsp]
  0029a	ba 02 01 00 00	 mov	 edx, 258		; 00000102H
  0029f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR str$[rsp]
  002a4	e8 00 00 00 00	 call	 PyRun_StringFlags
  002a9	48 89 44 24 68	 mov	 QWORD PTR result$[rsp], rax
$LN4@builtin_ev:

; 791  :     Py_XDECREF(tmp);

  002ae	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  002b4	74 0a		 je	 SHORT $LN1@builtin_ev
  002b6	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tmp$[rsp]
  002bb	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@builtin_ev:
  002c0	33 c0		 xor	 eax, eax
  002c2	85 c0		 test	 eax, eax
  002c4	75 e8		 jne	 SHORT $LN4@builtin_ev

; 792  :     return result;

  002c6	48 8b 44 24 68	 mov	 rax, QWORD PTR result$[rsp]
$LN22@builtin_ev:

; 793  : }

  002cb	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  002d2	c3		 ret	 0
builtin_eval ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DM@CLCDPCAL@code?5object?5passed?5to?5exec?$CI?$CJ?5may@ ; `string'
PUBLIC	??_C@_0CM@LDDCFEJK@arg?53?5must?5be?5a?5mapping?5or?5None?0@ ; `string'
PUBLIC	??_C@_0CI@FCNDFADJ@exec?$CI?$CJ?5arg?52?5must?5be?5a?5dict?0?5not@ ; `string'
PUBLIC	??_C@_0CC@HGGDBODK@globals?5and?5locals?5cannot?5be?5NUL@ ; `string'
EXTRN	PyExc_SystemError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_exec DD imagerel builtin_exec
	DD	imagerel builtin_exec+692
	DD	imagerel $unwind$builtin_exec
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_exec DD 010e01H
	DD	0e20eH
xdata	ENDS
;	COMDAT ??_C@_0DM@CLCDPCAL@code?5object?5passed?5to?5exec?$CI?$CJ?5may@
CONST	SEGMENT
??_C@_0DM@CLCDPCAL@code?5object?5passed?5to?5exec?$CI?$CJ?5may@ DB 'code '
	DB	'object passed to exec() may not contain free variables', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@LDDCFEJK@arg?53?5must?5be?5a?5mapping?5or?5None?0@
CONST	SEGMENT
??_C@_0CM@LDDCFEJK@arg?53?5must?5be?5a?5mapping?5or?5None?0@ DB 'arg 3 mu'
	DB	'st be a mapping or None, not %.100s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@FCNDFADJ@exec?$CI?$CJ?5arg?52?5must?5be?5a?5dict?0?5not@
CONST	SEGMENT
??_C@_0CI@FCNDFADJ@exec?$CI?$CJ?5arg?52?5must?5be?5a?5dict?0?5not@ DB 'ex'
	DB	'ec() arg 2 must be a dict, not %.100s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@HGGDBODK@globals?5and?5locals?5cannot?5be?5NUL@
CONST	SEGMENT
??_C@_0CC@HGGDBODK@globals?5and?5locals?5cannot?5be?5NUL@ DB 'globals and'
	DB	' locals cannot be NULL', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT builtin_exec
_TEXT	SEGMENT
globals$ = 64
v$ = 72
locals$ = 80
prog$ = 88
cf$22106 = 96
str$22105 = 104
self$ = 128
args$ = 136
builtin_exec PROC					; COMDAT

; 807  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 808  :     PyObject *v;
; 809  :     PyObject *prog, *globals = Py_None, *locals = Py_None;

  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00015	48 89 44 24 40	 mov	 QWORD PTR globals$[rsp], rax
  0001a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00021	48 89 44 24 50	 mov	 QWORD PTR locals$[rsp], rax

; 810  : 
; 811  :     if (!PyArg_UnpackTuple(args, "exec", 1, 3, &prog, &globals, &locals))

  00026	48 8d 44 24 50	 lea	 rax, QWORD PTR locals$[rsp]
  0002b	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00030	48 8d 44 24 40	 lea	 rax, QWORD PTR globals$[rsp]
  00035	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0003a	48 8d 44 24 58	 lea	 rax, QWORD PTR prog$[rsp]
  0003f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00044	41 b9 03 00 00
	00		 mov	 r9d, 3
  0004a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00050	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04MGEIEJAD@exec?$AA@
  00057	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0005f	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00064	85 c0		 test	 eax, eax
  00066	75 07		 jne	 SHORT $LN18@builtin_ex

; 812  :         return NULL;

  00068	33 c0		 xor	 eax, eax
  0006a	e9 40 02 00 00	 jmp	 $LN19@builtin_ex
$LN18@builtin_ex:

; 813  : 
; 814  :     if (globals == Py_None) {

  0006f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00076	48 39 44 24 40	 cmp	 QWORD PTR globals$[rsp], rax
  0007b	75 4e		 jne	 SHORT $LN17@builtin_ex

; 815  :         globals = PyEval_GetGlobals();

  0007d	e8 00 00 00 00	 call	 PyEval_GetGlobals
  00082	48 89 44 24 40	 mov	 QWORD PTR globals$[rsp], rax

; 816  :         if (locals == Py_None) {

  00087	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0008e	48 39 44 24 50	 cmp	 QWORD PTR locals$[rsp], rax
  00093	75 0a		 jne	 SHORT $LN16@builtin_ex

; 817  :             locals = PyEval_GetLocals();

  00095	e8 00 00 00 00	 call	 PyEval_GetLocals
  0009a	48 89 44 24 50	 mov	 QWORD PTR locals$[rsp], rax
$LN16@builtin_ex:

; 818  :         }
; 819  :         if (!globals || !locals) {

  0009f	48 83 7c 24 40
	00		 cmp	 QWORD PTR globals$[rsp], 0
  000a5	74 08		 je	 SHORT $LN14@builtin_ex
  000a7	48 83 7c 24 50
	00		 cmp	 QWORD PTR locals$[rsp], 0
  000ad	75 1a		 jne	 SHORT $LN15@builtin_ex
$LN14@builtin_ex:

; 820  :             PyErr_SetString(PyExc_SystemError,
; 821  :                             "globals and locals cannot be NULL");

  000af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@HGGDBODK@globals?5and?5locals?5cannot?5be?5NUL@
  000b6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  000bd	e8 00 00 00 00	 call	 PyErr_SetString

; 822  :             return NULL;

  000c2	33 c0		 xor	 eax, eax
  000c4	e9 e6 01 00 00	 jmp	 $LN19@builtin_ex
$LN15@builtin_ex:

; 823  :         }

  000c9	eb 18		 jmp	 SHORT $LN13@builtin_ex
$LN17@builtin_ex:

; 824  :     }
; 825  :     else if (locals == Py_None)

  000cb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000d2	48 39 44 24 50	 cmp	 QWORD PTR locals$[rsp], rax
  000d7	75 0a		 jne	 SHORT $LN12@builtin_ex

; 826  :         locals = globals;

  000d9	48 8b 44 24 40	 mov	 rax, QWORD PTR globals$[rsp]
  000de	48 89 44 24 50	 mov	 QWORD PTR locals$[rsp], rax
$LN12@builtin_ex:
$LN13@builtin_ex:

; 827  : 
; 828  :     if (!PyDict_Check(globals)) {

  000e3	48 8b 44 24 40	 mov	 rax, QWORD PTR globals$[rsp]
  000e8	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000ec	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000f2	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  000f7	85 c0		 test	 eax, eax
  000f9	75 27		 jne	 SHORT $LN11@builtin_ex

; 829  :         PyErr_Format(PyExc_TypeError, "exec() arg 2 must be a dict, not %.100s",
; 830  :                      globals->ob_type->tp_name);

  000fb	48 8b 44 24 40	 mov	 rax, QWORD PTR globals$[rsp]
  00100	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00104	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00108	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@FCNDFADJ@exec?$CI?$CJ?5arg?52?5must?5be?5a?5dict?0?5not@
  0010f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00116	e8 00 00 00 00	 call	 PyErr_Format

; 831  :         return NULL;

  0011b	33 c0		 xor	 eax, eax
  0011d	e9 8d 01 00 00	 jmp	 $LN19@builtin_ex
$LN11@builtin_ex:

; 832  :     }
; 833  :     if (!PyMapping_Check(locals)) {

  00122	48 8b 4c 24 50	 mov	 rcx, QWORD PTR locals$[rsp]
  00127	e8 00 00 00 00	 call	 PyMapping_Check
  0012c	85 c0		 test	 eax, eax
  0012e	75 27		 jne	 SHORT $LN10@builtin_ex

; 834  :         PyErr_Format(PyExc_TypeError,
; 835  :             "arg 3 must be a mapping or None, not %.100s",
; 836  :             locals->ob_type->tp_name);

  00130	48 8b 44 24 50	 mov	 rax, QWORD PTR locals$[rsp]
  00135	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00139	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0013d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@LDDCFEJK@arg?53?5must?5be?5a?5mapping?5or?5None?0@
  00144	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0014b	e8 00 00 00 00	 call	 PyErr_Format

; 837  :         return NULL;

  00150	33 c0		 xor	 eax, eax
  00152	e9 58 01 00 00	 jmp	 $LN19@builtin_ex
$LN10@builtin_ex:

; 838  :     }
; 839  :     if (PyDict_GetItemString(globals, "__builtins__") == NULL) {

  00157	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@MNFFDJII@__builtins__?$AA@
  0015e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR globals$[rsp]
  00163	e8 00 00 00 00	 call	 PyDict_GetItemString
  00168	48 85 c0	 test	 rax, rax
  0016b	75 24		 jne	 SHORT $LN9@builtin_ex

; 840  :         if (PyDict_SetItemString(globals, "__builtins__",
; 841  :                                  PyEval_GetBuiltins()) != 0)

  0016d	e8 00 00 00 00	 call	 PyEval_GetBuiltins
  00172	4c 8b c0	 mov	 r8, rax
  00175	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@MNFFDJII@__builtins__?$AA@
  0017c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR globals$[rsp]
  00181	e8 00 00 00 00	 call	 PyDict_SetItemString
  00186	85 c0		 test	 eax, eax
  00188	74 07		 je	 SHORT $LN8@builtin_ex

; 842  :             return NULL;

  0018a	33 c0		 xor	 eax, eax
  0018c	e9 1e 01 00 00	 jmp	 $LN19@builtin_ex
$LN8@builtin_ex:
$LN9@builtin_ex:

; 843  :     }
; 844  : 
; 845  :     if (PyCode_Check(prog)) {

  00191	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCode_Type
  00198	48 8b 4c 24 58	 mov	 rcx, QWORD PTR prog$[rsp]
  0019d	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  001a1	75 4b		 jne	 SHORT $LN7@builtin_ex

; 846  :         if (PyCode_GetNumFree((PyCodeObject *)prog) > 0) {

  001a3	48 8b 44 24 58	 mov	 rax, QWORD PTR prog$[rsp]
  001a8	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  001af	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  001b4	7e 1a		 jle	 SHORT $LN6@builtin_ex

; 847  :             PyErr_SetString(PyExc_TypeError,
; 848  :                 "code object passed to exec() may not "
; 849  :                 "contain free variables");

  001b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DM@CLCDPCAL@code?5object?5passed?5to?5exec?$CI?$CJ?5may@
  001bd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  001c4	e8 00 00 00 00	 call	 PyErr_SetString

; 850  :             return NULL;

  001c9	33 c0		 xor	 eax, eax
  001cb	e9 df 00 00 00	 jmp	 $LN19@builtin_ex
$LN6@builtin_ex:

; 851  :         }
; 852  :         v = PyEval_EvalCode(prog, globals, locals);

  001d0	4c 8b 44 24 50	 mov	 r8, QWORD PTR locals$[rsp]
  001d5	48 8b 54 24 40	 mov	 rdx, QWORD PTR globals$[rsp]
  001da	48 8b 4c 24 58	 mov	 rcx, QWORD PTR prog$[rsp]
  001df	e8 00 00 00 00	 call	 PyEval_EvalCode
  001e4	48 89 44 24 48	 mov	 QWORD PTR v$[rsp], rax

; 853  :     }
; 854  :     else {

  001e9	e9 98 00 00 00	 jmp	 $LN5@builtin_ex
$LN7@builtin_ex:

; 855  :         char *str;
; 856  :         PyCompilerFlags cf;
; 857  :         cf.cf_flags = PyCF_SOURCE_IS_UTF8;

  001ee	c7 44 24 60 00
	01 00 00	 mov	 DWORD PTR cf$22106[rsp], 256 ; 00000100H

; 858  :         str = source_as_string(prog, "exec",
; 859  :                                      "string, bytes or code", &cf);

  001f6	4c 8d 4c 24 60	 lea	 r9, QWORD PTR cf$22106[rsp]
  001fb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BG@MMLHEKFC@string?0?5bytes?5or?5code?$AA@
  00202	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04MGEIEJAD@exec?$AA@
  00209	48 8b 4c 24 58	 mov	 rcx, QWORD PTR prog$[rsp]
  0020e	e8 00 00 00 00	 call	 source_as_string
  00213	48 89 44 24 68	 mov	 QWORD PTR str$22105[rsp], rax

; 860  :         if (str == NULL)

  00218	48 83 7c 24 68
	00		 cmp	 QWORD PTR str$22105[rsp], 0
  0021e	75 07		 jne	 SHORT $LN4@builtin_ex

; 861  :             return NULL;

  00220	33 c0		 xor	 eax, eax
  00222	e9 88 00 00 00	 jmp	 $LN19@builtin_ex
$LN4@builtin_ex:

; 862  :         if (PyEval_MergeCompilerFlags(&cf))

  00227	48 8d 4c 24 60	 lea	 rcx, QWORD PTR cf$22106[rsp]
  0022c	e8 00 00 00 00	 call	 PyEval_MergeCompilerFlags
  00231	85 c0		 test	 eax, eax
  00233	74 2a		 je	 SHORT $LN3@builtin_ex

; 863  :             v = PyRun_StringFlags(str, Py_file_input, globals,
; 864  :                                   locals, &cf);

  00235	48 8d 44 24 60	 lea	 rax, QWORD PTR cf$22106[rsp]
  0023a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0023f	4c 8b 4c 24 50	 mov	 r9, QWORD PTR locals$[rsp]
  00244	4c 8b 44 24 40	 mov	 r8, QWORD PTR globals$[rsp]
  00249	ba 01 01 00 00	 mov	 edx, 257		; 00000101H
  0024e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR str$22105[rsp]
  00253	e8 00 00 00 00	 call	 PyRun_StringFlags
  00258	48 89 44 24 48	 mov	 QWORD PTR v$[rsp], rax

; 865  :         else

  0025d	eb 27		 jmp	 SHORT $LN2@builtin_ex
$LN3@builtin_ex:

; 866  :             v = PyRun_String(str, Py_file_input, globals, locals);

  0025f	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00268	4c 8b 4c 24 50	 mov	 r9, QWORD PTR locals$[rsp]
  0026d	4c 8b 44 24 40	 mov	 r8, QWORD PTR globals$[rsp]
  00272	ba 01 01 00 00	 mov	 edx, 257		; 00000101H
  00277	48 8b 4c 24 68	 mov	 rcx, QWORD PTR str$22105[rsp]
  0027c	e8 00 00 00 00	 call	 PyRun_StringFlags
  00281	48 89 44 24 48	 mov	 QWORD PTR v$[rsp], rax
$LN2@builtin_ex:
$LN5@builtin_ex:

; 867  :     }
; 868  :     if (v == NULL)

  00286	48 83 7c 24 48
	00		 cmp	 QWORD PTR v$[rsp], 0
  0028c	75 04		 jne	 SHORT $LN1@builtin_ex

; 869  :         return NULL;

  0028e	33 c0		 xor	 eax, eax
  00290	eb 1d		 jmp	 SHORT $LN19@builtin_ex
$LN1@builtin_ex:

; 870  :     Py_DECREF(v);

  00292	48 8b 4c 24 48	 mov	 rcx, QWORD PTR v$[rsp]
  00297	e8 00 00 00 00	 call	 _Py_DecRef

; 871  :     Py_RETURN_NONE;

  0029c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  002a3	e8 00 00 00 00	 call	 _Py_IncRef
  002a8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN19@builtin_ex:

; 872  : }

  002af	48 83 c4 78	 add	 rsp, 120		; 00000078H
  002b3	c3		 ret	 0
builtin_exec ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@KJNHDPIO@getattr?$CI?$CJ?3?5attribute?5name?5must?5b@ ; `string'
EXTRN	PyObject_GetAttr:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_getattr DD imagerel builtin_getattr
	DD	imagerel builtin_getattr+227
	DD	imagerel $unwind$builtin_getattr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_getattr DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_0CJ@KJNHDPIO@getattr?$CI?$CJ?3?5attribute?5name?5must?5b@
CONST	SEGMENT
??_C@_0CJ@KJNHDPIO@getattr?$CI?$CJ?3?5attribute?5name?5must?5b@ DB 'getat'
	DB	'tr(): attribute name must be string', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT builtin_getattr
_TEXT	SEGMENT
v$ = 64
name$ = 72
dflt$ = 80
result$ = 88
self$ = 112
args$ = 120
builtin_getattr PROC					; COMDAT

; 885  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 886  :     PyObject *v, *result, *dflt = NULL;

  0000e	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR dflt$[rsp], 0

; 887  :     PyObject *name;
; 888  : 
; 889  :     if (!PyArg_UnpackTuple(args, "getattr", 2, 3, &v, &name, &dflt))

  00017	48 8d 44 24 50	 lea	 rax, QWORD PTR dflt$[rsp]
  0001c	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00021	48 8d 44 24 48	 lea	 rax, QWORD PTR name$[rsp]
  00026	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0002b	48 8d 44 24 40	 lea	 rax, QWORD PTR v$[rsp]
  00030	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00035	41 b9 03 00 00
	00		 mov	 r9d, 3
  0003b	41 b8 02 00 00
	00		 mov	 r8d, 2
  00041	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07HDABHGP@getattr?$AA@
  00048	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  0004d	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00052	85 c0		 test	 eax, eax
  00054	75 07		 jne	 SHORT $LN3@builtin_ge

; 890  :         return NULL;

  00056	33 c0		 xor	 eax, eax
  00058	e9 81 00 00 00	 jmp	 $LN4@builtin_ge
$LN3@builtin_ge:

; 891  : 
; 892  :     if (!PyUnicode_Check(name)) {

  0005d	48 8b 44 24 48	 mov	 rax, QWORD PTR name$[rsp]
  00062	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00066	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0006c	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00071	85 c0		 test	 eax, eax
  00073	75 17		 jne	 SHORT $LN2@builtin_ge

; 893  :         PyErr_SetString(PyExc_TypeError,
; 894  :                         "getattr(): attribute name must be string");

  00075	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@KJNHDPIO@getattr?$CI?$CJ?3?5attribute?5name?5must?5b@
  0007c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00083	e8 00 00 00 00	 call	 PyErr_SetString

; 895  :         return NULL;

  00088	33 c0		 xor	 eax, eax
  0008a	eb 52		 jmp	 SHORT $LN4@builtin_ge
$LN2@builtin_ge:

; 896  :     }
; 897  :     result = PyObject_GetAttr(v, name);

  0008c	48 8b 54 24 48	 mov	 rdx, QWORD PTR name$[rsp]
  00091	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  00096	e8 00 00 00 00	 call	 PyObject_GetAttr
  0009b	48 89 44 24 58	 mov	 QWORD PTR result$[rsp], rax

; 898  :     if (result == NULL && dflt != NULL &&
; 899  :         PyErr_ExceptionMatches(PyExc_AttributeError))

  000a0	48 83 7c 24 58
	00		 cmp	 QWORD PTR result$[rsp], 0
  000a6	75 31		 jne	 SHORT $LN1@builtin_ge
  000a8	48 83 7c 24 50
	00		 cmp	 QWORD PTR dflt$[rsp], 0
  000ae	74 29		 je	 SHORT $LN1@builtin_ge
  000b0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  000b7	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  000bc	85 c0		 test	 eax, eax
  000be	74 19		 je	 SHORT $LN1@builtin_ge

; 900  :     {
; 901  :         PyErr_Clear();

  000c0	e8 00 00 00 00	 call	 PyErr_Clear

; 902  :         Py_INCREF(dflt);

  000c5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dflt$[rsp]
  000ca	e8 00 00 00 00	 call	 _Py_IncRef

; 903  :         result = dflt;

  000cf	48 8b 44 24 50	 mov	 rax, QWORD PTR dflt$[rsp]
  000d4	48 89 44 24 58	 mov	 QWORD PTR result$[rsp], rax
$LN1@builtin_ge:

; 904  :     }
; 905  :     return result;

  000d9	48 8b 44 24 58	 mov	 rax, QWORD PTR result$[rsp]
$LN4@builtin_ge:

; 906  : }

  000de	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000e2	c3		 ret	 0
builtin_getattr ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_globals DD imagerel builtin_globals
	DD	imagerel builtin_globals+53
	DD	imagerel $unwind$builtin_globals
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_globals DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT builtin_globals
_TEXT	SEGMENT
d$ = 32
self$ = 64
builtin_globals PROC					; COMDAT

; 918  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 919  :     PyObject *d;
; 920  : 
; 921  :     d = PyEval_GetGlobals();

  00009	e8 00 00 00 00	 call	 PyEval_GetGlobals
  0000e	48 89 44 24 20	 mov	 QWORD PTR d$[rsp], rax
$LN4@builtin_gl:

; 922  :     Py_XINCREF(d);

  00013	48 83 7c 24 20
	00		 cmp	 QWORD PTR d$[rsp], 0
  00019	74 0a		 je	 SHORT $LN1@builtin_gl
  0001b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00020	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@builtin_gl:
  00025	33 c0		 xor	 eax, eax
  00027	85 c0		 test	 eax, eax
  00029	75 e8		 jne	 SHORT $LN4@builtin_gl

; 923  :     return d;

  0002b	48 8b 44 24 20	 mov	 rax, QWORD PTR d$[rsp]

; 924  : }

  00030	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00034	c3		 ret	 0
builtin_globals ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@JDBFCNOH@hasattr?$CI?$CJ?3?5attribute?5name?5must?5b@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_hasattr DD imagerel builtin_hasattr
	DD	imagerel builtin_hasattr+229
	DD	imagerel $unwind$builtin_hasattr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_hasattr DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0CJ@JDBFCNOH@hasattr?$CI?$CJ?3?5attribute?5name?5must?5b@
CONST	SEGMENT
??_C@_0CJ@JDBFCNOH@hasattr?$CI?$CJ?3?5attribute?5name?5must?5b@ DB 'hasat'
	DB	'tr(): attribute name must be string', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT builtin_hasattr
_TEXT	SEGMENT
v$ = 48
name$ = 56
self$ = 80
args$ = 88
builtin_hasattr PROC					; COMDAT

; 934  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 935  :     PyObject *v;
; 936  :     PyObject *name;
; 937  : 
; 938  :     if (!PyArg_UnpackTuple(args, "hasattr", 2, 2, &v, &name))

  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR name$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR v$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07DHFKBBGI@hasattr?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 07		 jne	 SHORT $LN4@builtin_ha

; 939  :         return NULL;

  00043	33 c0		 xor	 eax, eax
  00045	e9 96 00 00 00	 jmp	 $LN5@builtin_ha
$LN4@builtin_ha:

; 940  :     if (!PyUnicode_Check(name)) {

  0004a	48 8b 44 24 38	 mov	 rax, QWORD PTR name$[rsp]
  0004f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00053	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00059	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0005e	85 c0		 test	 eax, eax
  00060	75 17		 jne	 SHORT $LN3@builtin_ha

; 941  :         PyErr_SetString(PyExc_TypeError,
; 942  :                         "hasattr(): attribute name must be string");

  00062	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@JDBFCNOH@hasattr?$CI?$CJ?3?5attribute?5name?5must?5b@
  00069	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00070	e8 00 00 00 00	 call	 PyErr_SetString

; 943  :         return NULL;

  00075	33 c0		 xor	 eax, eax
  00077	eb 67		 jmp	 SHORT $LN5@builtin_ha
$LN3@builtin_ha:

; 944  :     }
; 945  :     v = PyObject_GetAttr(v, name);

  00079	48 8b 54 24 38	 mov	 rdx, QWORD PTR name$[rsp]
  0007e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR v$[rsp]
  00083	e8 00 00 00 00	 call	 PyObject_GetAttr
  00088	48 89 44 24 30	 mov	 QWORD PTR v$[rsp], rax

; 946  :     if (v == NULL) {

  0008d	48 83 7c 24 30
	00		 cmp	 QWORD PTR v$[rsp], 0
  00093	75 2e		 jne	 SHORT $LN2@builtin_ha

; 947  :         if (PyErr_ExceptionMatches(PyExc_AttributeError)) {

  00095	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  0009c	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  000a1	85 c0		 test	 eax, eax
  000a3	74 1a		 je	 SHORT $LN1@builtin_ha

; 948  :             PyErr_Clear();

  000a5	e8 00 00 00 00	 call	 PyErr_Clear

; 949  :             Py_RETURN_FALSE;

  000aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  000b1	e8 00 00 00 00	 call	 _Py_IncRef
  000b6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  000bd	eb 21		 jmp	 SHORT $LN5@builtin_ha
$LN1@builtin_ha:

; 950  :         }
; 951  :         return NULL;

  000bf	33 c0		 xor	 eax, eax
  000c1	eb 1d		 jmp	 SHORT $LN5@builtin_ha
$LN2@builtin_ha:

; 952  :     }
; 953  :     Py_DECREF(v);

  000c3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR v$[rsp]
  000c8	e8 00 00 00 00	 call	 _Py_DecRef

; 954  :     Py_RETURN_TRUE;

  000cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  000d4	e8 00 00 00 00	 call	 _Py_IncRef
  000d9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
$LN5@builtin_ha:

; 955  : }

  000e0	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e4	c3		 ret	 0
builtin_hasattr ENDP
_TEXT	ENDS
EXTRN	PyLong_FromVoidPtr:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_id DD imagerel builtin_id
	DD	imagerel builtin_id+29
	DD	imagerel $unwind$builtin_id
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_id DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT builtin_id
_TEXT	SEGMENT
self$ = 48
v$ = 56
builtin_id PROC						; COMDAT

; 966  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 967  :     return PyLong_FromVoidPtr(v);

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR v$[rsp]
  00013	e8 00 00 00 00	 call	 PyLong_FromVoidPtr

; 968  : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
builtin_id ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@POONGOEJ@map?$CI?$CJ?5must?5have?5at?5least?5two?5arg@ ; `string'
PUBLIC	??_C@_05EHCCDEAK@map?$CI?$CJ?$AA@		; `string'
EXTRN	PyTuple_New:PROC
EXTRN	PyTuple_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$map_new DD imagerel map_new
	DD	imagerel map_new+358
	DD	imagerel $unwind$map_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$map_new DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_0CI@POONGOEJ@map?$CI?$CJ?5must?5have?5at?5least?5two?5arg@
CONST	SEGMENT
??_C@_0CI@POONGOEJ@map?$CI?$CJ?5must?5have?5at?5least?5two?5arg@ DB 'map('
	DB	') must have at least two arguments.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05EHCCDEAK@map?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_05EHCCDEAK@map?$CI?$CJ?$AA@ DB 'map()', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT map_new
_TEXT	SEGMENT
it$ = 32
i$ = 40
iters$ = 48
lz$ = 56
numargs$ = 64
func$ = 72
type$ = 96
args$ = 104
kwds$ = 112
map_new	PROC						; COMDAT

; 987  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 988  :     PyObject *it, *iters, *func;
; 989  :     mapobject *lz;
; 990  :     Py_ssize_t numargs, i;
; 991  : 
; 992  :     if (type == &PyMap_Type && !_PyArg_NoKeywords("map()", kwds))

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyMap_Type
  0001a	48 39 44 24 60	 cmp	 QWORD PTR type$[rsp], rax
  0001f	75 1c		 jne	 SHORT $LN8@map_new
  00021	48 8b 54 24 70	 mov	 rdx, QWORD PTR kwds$[rsp]
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05EHCCDEAK@map?$CI?$CJ?$AA@
  0002d	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  00032	85 c0		 test	 eax, eax
  00034	75 07		 jne	 SHORT $LN8@map_new

; 993  :         return NULL;

  00036	33 c0		 xor	 eax, eax
  00038	e9 24 01 00 00	 jmp	 $LN9@map_new
$LN8@map_new:

; 994  : 
; 995  :     numargs = PyTuple_Size(args);

  0003d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00042	e8 00 00 00 00	 call	 PyTuple_Size
  00047	48 89 44 24 40	 mov	 QWORD PTR numargs$[rsp], rax

; 996  :     if (numargs < 2) {

  0004c	48 83 7c 24 40
	02		 cmp	 QWORD PTR numargs$[rsp], 2
  00052	7d 1a		 jge	 SHORT $LN7@map_new

; 997  :         PyErr_SetString(PyExc_TypeError,
; 998  :            "map() must have at least two arguments.");

  00054	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@POONGOEJ@map?$CI?$CJ?5must?5have?5at?5least?5two?5arg@
  0005b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00062	e8 00 00 00 00	 call	 PyErr_SetString

; 999  :         return NULL;

  00067	33 c0		 xor	 eax, eax
  00069	e9 f3 00 00 00	 jmp	 $LN9@map_new
$LN7@map_new:

; 1000 :     }
; 1001 : 
; 1002 :     iters = PyTuple_New(numargs-1);

  0006e	48 8b 44 24 40	 mov	 rax, QWORD PTR numargs$[rsp]
  00073	48 ff c8	 dec	 rax
  00076	48 8b c8	 mov	 rcx, rax
  00079	e8 00 00 00 00	 call	 PyTuple_New
  0007e	48 89 44 24 30	 mov	 QWORD PTR iters$[rsp], rax

; 1003 :     if (iters == NULL)

  00083	48 83 7c 24 30
	00		 cmp	 QWORD PTR iters$[rsp], 0
  00089	75 07		 jne	 SHORT $LN6@map_new

; 1004 :         return NULL;

  0008b	33 c0		 xor	 eax, eax
  0008d	e9 cf 00 00 00	 jmp	 $LN9@map_new
$LN6@map_new:

; 1005 : 
; 1006 :     for (i=1 ; i<numargs ; i++) {

  00092	48 c7 44 24 28
	01 00 00 00	 mov	 QWORD PTR i$[rsp], 1
  0009b	eb 0d		 jmp	 SHORT $LN5@map_new
$LN4@map_new:
  0009d	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  000a2	48 ff c0	 inc	 rax
  000a5	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN5@map_new:
  000aa	48 8b 44 24 40	 mov	 rax, QWORD PTR numargs$[rsp]
  000af	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  000b4	7d 45		 jge	 SHORT $LN3@map_new

; 1007 :         /* Get iterator. */
; 1008 :         it = PyObject_GetIter(PyTuple_GET_ITEM(args, i));

  000b6	48 8b 44 24 68	 mov	 rax, QWORD PTR args$[rsp]
  000bb	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  000c0	48 8b 4c c8 70	 mov	 rcx, QWORD PTR [rax+rcx*8+112]
  000c5	e8 00 00 00 00	 call	 PyObject_GetIter
  000ca	48 89 44 24 20	 mov	 QWORD PTR it$[rsp], rax

; 1009 :         if (it == NULL) {

  000cf	48 83 7c 24 20
	00		 cmp	 QWORD PTR it$[rsp], 0
  000d5	75 0e		 jne	 SHORT $LN2@map_new

; 1010 :             Py_DECREF(iters);

  000d7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR iters$[rsp]
  000dc	e8 00 00 00 00	 call	 _Py_DecRef

; 1011 :             return NULL;

  000e1	33 c0		 xor	 eax, eax
  000e3	eb 7c		 jmp	 SHORT $LN9@map_new
$LN2@map_new:

; 1012 :         }
; 1013 :         PyTuple_SET_ITEM(iters, i-1, it);

  000e5	48 8b 44 24 30	 mov	 rax, QWORD PTR iters$[rsp]
  000ea	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  000ef	48 8b 54 24 20	 mov	 rdx, QWORD PTR it$[rsp]
  000f4	48 89 54 c8 68	 mov	 QWORD PTR [rax+rcx*8+104], rdx

; 1014 :     }

  000f9	eb a2		 jmp	 SHORT $LN4@map_new
$LN3@map_new:

; 1015 : 
; 1016 :     /* create mapobject structure */
; 1017 :     lz = (mapobject *)type->tp_alloc(type, 0);

  000fb	33 d2		 xor	 edx, edx
  000fd	48 8b 4c 24 60	 mov	 rcx, QWORD PTR type$[rsp]
  00102	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  00107	ff 90 88 01 00
	00		 call	 QWORD PTR [rax+392]
  0010d	48 89 44 24 38	 mov	 QWORD PTR lz$[rsp], rax

; 1018 :     if (lz == NULL) {

  00112	48 83 7c 24 38
	00		 cmp	 QWORD PTR lz$[rsp], 0
  00118	75 0e		 jne	 SHORT $LN1@map_new

; 1019 :         Py_DECREF(iters);

  0011a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR iters$[rsp]
  0011f	e8 00 00 00 00	 call	 _Py_DecRef

; 1020 :         return NULL;

  00124	33 c0		 xor	 eax, eax
  00126	eb 39		 jmp	 SHORT $LN9@map_new
$LN1@map_new:

; 1021 :     }
; 1022 :     lz->iters = iters;

  00128	48 8b 44 24 38	 mov	 rax, QWORD PTR lz$[rsp]
  0012d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR iters$[rsp]
  00132	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 1023 :     func = PyTuple_GET_ITEM(args, 0);

  00136	48 8b 44 24 68	 mov	 rax, QWORD PTR args$[rsp]
  0013b	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0013f	48 89 44 24 48	 mov	 QWORD PTR func$[rsp], rax

; 1024 :     Py_INCREF(func);

  00144	48 8b 4c 24 48	 mov	 rcx, QWORD PTR func$[rsp]
  00149	e8 00 00 00 00	 call	 _Py_IncRef

; 1025 :     lz->func = func;

  0014e	48 8b 44 24 38	 mov	 rax, QWORD PTR lz$[rsp]
  00153	48 8b 4c 24 48	 mov	 rcx, QWORD PTR func$[rsp]
  00158	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 1026 : 
; 1027 :     return (PyObject *)lz;

  0015c	48 8b 44 24 38	 mov	 rax, QWORD PTR lz$[rsp]
$LN9@map_new:

; 1028 : }

  00161	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00165	c3		 ret	 0
map_new	ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$map_dealloc DD imagerel map_dealloc
	DD	imagerel map_dealloc+108
	DD	imagerel $unwind$map_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$map_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT map_dealloc
_TEXT	SEGMENT
lz$ = 48
map_dealloc PROC					; COMDAT

; 1032 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1033 :     PyObject_GC_UnTrack(lz);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR lz$[rsp]
  0000e	e8 00 00 00 00	 call	 PyObject_GC_UnTrack
$LN8@map_deallo:

; 1034 :     Py_XDECREF(lz->iters);

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR lz$[rsp]
  00018	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0001d	74 0e		 je	 SHORT $LN5@map_deallo
  0001f	48 8b 44 24 30	 mov	 rax, QWORD PTR lz$[rsp]
  00024	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00028	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@map_deallo:
  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 e0		 jne	 SHORT $LN8@map_deallo
$LN4@map_deallo:

; 1035 :     Py_XDECREF(lz->func);

  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR lz$[rsp]
  00038	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0003d	74 0e		 je	 SHORT $LN1@map_deallo
  0003f	48 8b 44 24 30	 mov	 rax, QWORD PTR lz$[rsp]
  00044	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00048	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@map_deallo:
  0004d	33 c0		 xor	 eax, eax
  0004f	85 c0		 test	 eax, eax
  00051	75 e0		 jne	 SHORT $LN4@map_deallo

; 1036 :     Py_TYPE(lz)->tp_free(lz);

  00053	48 8b 44 24 30	 mov	 rax, QWORD PTR lz$[rsp]
  00058	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0005c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR lz$[rsp]
  00061	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]

; 1037 : }

  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
map_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@NBMHNIHE@map_traverse?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$map_traverse DD imagerel map_traverse
	DD	imagerel map_traverse+206
	DD	imagerel $unwind$map_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$map_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0N@NBMHNIHE@map_traverse?$AA@
CONST	SEGMENT
??_C@_0N@NBMHNIHE@map_traverse?$AA@ DB 'map_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT map_traverse
_TEXT	SEGMENT
vret$22261 = 32
vret$22269 = 36
lz$ = 64
visit$ = 72
arg$ = 80
map_traverse PROC					; COMDAT

; 1041 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN12@map_traver:

; 1042 :     Py_VISIT(lz->iters);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN9@map_traver
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 12 04 00
	00		 mov	 r8d, 1042		; 00000412H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LBFDNFDG@?4?4?2Python?2bltinmodule?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@NBMHNIHE@map_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@map_traver:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR lz$[rsp]
  0003d	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00042	74 23		 je	 SHORT $LN8@map_traver
  00044	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR lz$[rsp]
  0004e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00052	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR vret$22261[rsp], eax
  0005a	83 7c 24 20 00	 cmp	 DWORD PTR vret$22261[rsp], 0
  0005f	74 06		 je	 SHORT $LN7@map_traver
  00061	8b 44 24 20	 mov	 eax, DWORD PTR vret$22261[rsp]
  00065	eb 62		 jmp	 SHORT $LN13@map_traver
$LN7@map_traver:
$LN8@map_traver:
  00067	33 c0		 xor	 eax, eax
  00069	85 c0		 test	 eax, eax
  0006b	75 a6		 jne	 SHORT $LN12@map_traver
$LN6@map_traver:

; 1043 :     Py_VISIT(lz->func);

  0006d	e8 00 00 00 00	 call	 _Py_PXCTX
  00072	85 c0		 test	 eax, eax
  00074	74 1c		 je	 SHORT $LN3@map_traver
  00076	45 33 c9	 xor	 r9d, r9d
  00079	41 b8 13 04 00
	00		 mov	 r8d, 1043		; 00000413H
  0007f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LBFDNFDG@?4?4?2Python?2bltinmodule?4c?$AA@
  00086	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@NBMHNIHE@map_traverse?$AA@
  0008d	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@map_traver:
  00092	48 8b 44 24 40	 mov	 rax, QWORD PTR lz$[rsp]
  00097	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0009c	74 23		 je	 SHORT $LN2@map_traver
  0009e	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  000a3	48 8b 44 24 40	 mov	 rax, QWORD PTR lz$[rsp]
  000a8	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  000ac	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  000b0	89 44 24 24	 mov	 DWORD PTR vret$22269[rsp], eax
  000b4	83 7c 24 24 00	 cmp	 DWORD PTR vret$22269[rsp], 0
  000b9	74 06		 je	 SHORT $LN1@map_traver
  000bb	8b 44 24 24	 mov	 eax, DWORD PTR vret$22269[rsp]
  000bf	eb 08		 jmp	 SHORT $LN13@map_traver
$LN1@map_traver:
$LN2@map_traver:
  000c1	33 c0		 xor	 eax, eax
  000c3	85 c0		 test	 eax, eax
  000c5	75 a6		 jne	 SHORT $LN6@map_traver

; 1044 :     return 0;

  000c7	33 c0		 xor	 eax, eax
$LN13@map_traver:

; 1045 : }

  000c9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000cd	c3		 ret	 0
map_traverse ENDP
_TEXT	ENDS
EXTRN	PyObject_Call:PROC
EXTRN	PyIter_Next:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$map_next DD imagerel map_next
	DD	imagerel map_next+214
	DD	imagerel $unwind$map_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$map_next DD 010901H
	DD	0a209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT map_next
_TEXT	SEGMENT
i$ = 32
argtuple$ = 40
numargs$ = 48
val$ = 56
result$ = 64
lz$ = 96
map_next PROC						; COMDAT

; 1049 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1050 :     PyObject *val;
; 1051 :     PyObject *argtuple;
; 1052 :     PyObject *result;
; 1053 :     Py_ssize_t numargs, i;
; 1054 : 
; 1055 :     numargs = PyTuple_Size(lz->iters);

  00009	48 8b 44 24 60	 mov	 rax, QWORD PTR lz$[rsp]
  0000e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00012	e8 00 00 00 00	 call	 PyTuple_Size
  00017	48 89 44 24 30	 mov	 QWORD PTR numargs$[rsp], rax

; 1056 :     argtuple = PyTuple_New(numargs);

  0001c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR numargs$[rsp]
  00021	e8 00 00 00 00	 call	 PyTuple_New
  00026	48 89 44 24 28	 mov	 QWORD PTR argtuple$[rsp], rax

; 1057 :     if (argtuple == NULL)

  0002b	48 83 7c 24 28
	00		 cmp	 QWORD PTR argtuple$[rsp], 0
  00031	75 07		 jne	 SHORT $LN5@map_next

; 1058 :         return NULL;

  00033	33 c0		 xor	 eax, eax
  00035	e9 97 00 00 00	 jmp	 $LN6@map_next
$LN5@map_next:

; 1059 : 
; 1060 :     for (i=0 ; i<numargs ; i++) {

  0003a	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00043	eb 0d		 jmp	 SHORT $LN4@map_next
$LN3@map_next:
  00045	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  0004a	48 ff c0	 inc	 rax
  0004d	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
$LN4@map_next:
  00052	48 8b 44 24 30	 mov	 rax, QWORD PTR numargs$[rsp]
  00057	48 39 44 24 20	 cmp	 QWORD PTR i$[rsp], rax
  0005c	7d 49		 jge	 SHORT $LN2@map_next

; 1061 :         val = PyIter_Next(PyTuple_GET_ITEM(lz->iters, i));

  0005e	48 8b 44 24 60	 mov	 rax, QWORD PTR lz$[rsp]
  00063	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00067	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  0006c	48 8b 4c c8 70	 mov	 rcx, QWORD PTR [rax+rcx*8+112]
  00071	e8 00 00 00 00	 call	 PyIter_Next
  00076	48 89 44 24 38	 mov	 QWORD PTR val$[rsp], rax

; 1062 :         if (val == NULL) {

  0007b	48 83 7c 24 38
	00		 cmp	 QWORD PTR val$[rsp], 0
  00081	75 0e		 jne	 SHORT $LN1@map_next

; 1063 :             Py_DECREF(argtuple);

  00083	48 8b 4c 24 28	 mov	 rcx, QWORD PTR argtuple$[rsp]
  00088	e8 00 00 00 00	 call	 _Py_DecRef

; 1064 :             return NULL;

  0008d	33 c0		 xor	 eax, eax
  0008f	eb 40		 jmp	 SHORT $LN6@map_next
$LN1@map_next:

; 1065 :         }
; 1066 :         PyTuple_SET_ITEM(argtuple, i, val);

  00091	48 8b 44 24 28	 mov	 rax, QWORD PTR argtuple$[rsp]
  00096	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  0009b	48 8b 54 24 38	 mov	 rdx, QWORD PTR val$[rsp]
  000a0	48 89 54 c8 70	 mov	 QWORD PTR [rax+rcx*8+112], rdx

; 1067 :     }

  000a5	eb 9e		 jmp	 SHORT $LN3@map_next
$LN2@map_next:

; 1068 :     result = PyObject_Call(lz->func, argtuple, NULL);

  000a7	45 33 c0	 xor	 r8d, r8d
  000aa	48 8b 54 24 28	 mov	 rdx, QWORD PTR argtuple$[rsp]
  000af	48 8b 44 24 60	 mov	 rax, QWORD PTR lz$[rsp]
  000b4	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  000b8	e8 00 00 00 00	 call	 PyObject_Call
  000bd	48 89 44 24 40	 mov	 QWORD PTR result$[rsp], rax

; 1069 :     Py_DECREF(argtuple);

  000c2	48 8b 4c 24 28	 mov	 rcx, QWORD PTR argtuple$[rsp]
  000c7	e8 00 00 00 00	 call	 _Py_DecRef

; 1070 :     return result;

  000cc	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
$LN6@map_next:

; 1071 : }

  000d1	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000d5	c3		 ret	 0
map_next ENDP
_TEXT	ENDS
PUBLIC	??_C@_02BFICIOJL@ON?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$map_reduce DD imagerel map_reduce
	DD	imagerel map_reduce+218
	DD	imagerel $unwind$map_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$map_reduce DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_02BFICIOJL@ON?$AA@
CONST	SEGMENT
??_C@_02BFICIOJL@ON?$AA@ DB 'ON', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT map_reduce
_TEXT	SEGMENT
args$ = 32
i$ = 40
numargs$ = 48
it$22311 = 56
lz$ = 80
map_reduce PROC						; COMDAT

; 1075 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1076 :     Py_ssize_t numargs = PyTuple_GET_SIZE(lz->iters);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR lz$[rsp]
  0000e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00012	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00016	48 89 44 24 30	 mov	 QWORD PTR numargs$[rsp], rax

; 1077 :     PyObject *args = PyTuple_New(numargs+1);

  0001b	48 8b 44 24 30	 mov	 rax, QWORD PTR numargs$[rsp]
  00020	48 ff c0	 inc	 rax
  00023	48 8b c8	 mov	 rcx, rax
  00026	e8 00 00 00 00	 call	 PyTuple_New
  0002b	48 89 44 24 20	 mov	 QWORD PTR args$[rsp], rax

; 1078 :     Py_ssize_t i;
; 1079 :     if (args == NULL)

  00030	48 83 7c 24 20
	00		 cmp	 QWORD PTR args$[rsp], 0
  00036	75 07		 jne	 SHORT $LN4@map_reduce

; 1080 :         return NULL;

  00038	33 c0		 xor	 eax, eax
  0003a	e9 96 00 00 00	 jmp	 $LN5@map_reduce
$LN4@map_reduce:

; 1081 :     Py_INCREF(lz->func);

  0003f	48 8b 44 24 50	 mov	 rax, QWORD PTR lz$[rsp]
  00044	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00048	e8 00 00 00 00	 call	 _Py_IncRef

; 1082 :     PyTuple_SET_ITEM(args, 0, lz->func);

  0004d	48 8b 44 24 20	 mov	 rax, QWORD PTR args$[rsp]
  00052	48 8b 4c 24 50	 mov	 rcx, QWORD PTR lz$[rsp]
  00057	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  0005b	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 1083 :     for (i = 0; i<numargs; i++){

  0005f	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00068	eb 0d		 jmp	 SHORT $LN3@map_reduce
$LN2@map_reduce:
  0006a	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  0006f	48 ff c0	 inc	 rax
  00072	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN3@map_reduce:
  00077	48 8b 44 24 30	 mov	 rax, QWORD PTR numargs$[rsp]
  0007c	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  00081	7d 38		 jge	 SHORT $LN1@map_reduce

; 1084 :         PyObject *it = PyTuple_GET_ITEM(lz->iters, i);

  00083	48 8b 44 24 50	 mov	 rax, QWORD PTR lz$[rsp]
  00088	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0008c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  00091	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  00096	48 89 44 24 38	 mov	 QWORD PTR it$22311[rsp], rax

; 1085 :         Py_INCREF(it);

  0009b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR it$22311[rsp]
  000a0	e8 00 00 00 00	 call	 _Py_IncRef

; 1086 :         PyTuple_SET_ITEM(args, i+1, it);

  000a5	48 8b 44 24 20	 mov	 rax, QWORD PTR args$[rsp]
  000aa	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  000af	48 8b 54 24 38	 mov	 rdx, QWORD PTR it$22311[rsp]
  000b4	48 89 54 c8 78	 mov	 QWORD PTR [rax+rcx*8+120], rdx

; 1087 :     }

  000b9	eb af		 jmp	 SHORT $LN2@map_reduce
$LN1@map_reduce:

; 1088 : 
; 1089 :     return Py_BuildValue("ON", Py_TYPE(lz), args);

  000bb	4c 8b 44 24 20	 mov	 r8, QWORD PTR args$[rsp]
  000c0	48 8b 44 24 50	 mov	 rax, QWORD PTR lz$[rsp]
  000c5	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  000c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02BFICIOJL@ON?$AA@
  000d0	e8 00 00 00 00	 call	 Py_BuildValue
$LN5@map_reduce:

; 1090 : }

  000d5	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000d9	c3		 ret	 0
map_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@FGPKDLLN@?8?$CF?4200s?8?5object?5is?5not?5an?5iterat@ ; `string'
EXTRN	PyErr_SetNone:PROC
EXTRN	_PyObject_NextNotImplemented:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_next DD imagerel builtin_next
	DD	imagerel builtin_next+305
	DD	imagerel $unwind$builtin_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_next DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_0CD@FGPKDLLN@?8?$CF?4200s?8?5object?5is?5not?5an?5iterat@
CONST	SEGMENT
??_C@_0CD@FGPKDLLN@?8?$CF?4200s?8?5object?5is?5not?5an?5iterat@ DB '''%.2'
	DB	'00s'' object is not an iterator', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT builtin_next
_TEXT	SEGMENT
it$ = 48
res$ = 56
def$ = 64
self$ = 96
args$ = 104
builtin_next PROC					; COMDAT

; 1150 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1151 :     PyObject *it, *res;
; 1152 :     PyObject *def = NULL;

  0000e	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR def$[rsp], 0

; 1153 : 
; 1154 :     if (!PyArg_UnpackTuple(args, "next", 1, 2, &it, &def))

  00017	48 8d 44 24 40	 lea	 rax, QWORD PTR def$[rsp]
  0001c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00021	48 8d 44 24 30	 lea	 rax, QWORD PTR it$[rsp]
  00026	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002b	41 b9 02 00 00
	00		 mov	 r9d, 2
  00031	41 b8 01 00 00
	00		 mov	 r8d, 1
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04CJGEDOF@next?$AA@
  0003e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00043	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00048	85 c0		 test	 eax, eax
  0004a	75 07		 jne	 SHORT $LN11@builtin_ne

; 1155 :         return NULL;

  0004c	33 c0		 xor	 eax, eax
  0004e	e9 d9 00 00 00	 jmp	 $LN12@builtin_ne
$LN11@builtin_ne:

; 1156 :     if (!PyIter_Check(it)) {

  00053	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
  00058	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0005c	48 83 b8 38 01
	00 00 00	 cmp	 QWORD PTR [rax+312], 0
  00064	74 19		 je	 SHORT $LN9@builtin_ne
  00066	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
  0006b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyObject_NextNotImplemented
  00076	48 39 88 38 01
	00 00		 cmp	 QWORD PTR [rax+312], rcx
  0007d	75 27		 jne	 SHORT $LN10@builtin_ne
$LN9@builtin_ne:

; 1157 :         PyErr_Format(PyExc_TypeError,
; 1158 :             "'%.200s' object is not an iterator",
; 1159 :             it->ob_type->tp_name);

  0007f	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
  00084	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00088	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0008c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@FGPKDLLN@?8?$CF?4200s?8?5object?5is?5not?5an?5iterat@
  00093	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0009a	e8 00 00 00 00	 call	 PyErr_Format

; 1160 :         return NULL;

  0009f	33 c0		 xor	 eax, eax
  000a1	e9 86 00 00 00	 jmp	 $LN12@builtin_ne
$LN10@builtin_ne:

; 1161 :     }
; 1162 : 
; 1163 :     res = (*it->ob_type->tp_iternext)(it);

  000a6	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
  000ab	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000af	48 8b 4c 24 30	 mov	 rcx, QWORD PTR it$[rsp]
  000b4	ff 90 38 01 00
	00		 call	 QWORD PTR [rax+312]
  000ba	48 89 44 24 38	 mov	 QWORD PTR res$[rsp], rax

; 1164 :     if (res != NULL) {

  000bf	48 83 7c 24 38
	00		 cmp	 QWORD PTR res$[rsp], 0
  000c5	74 09		 je	 SHORT $LN8@builtin_ne

; 1165 :         return res;

  000c7	48 8b 44 24 38	 mov	 rax, QWORD PTR res$[rsp]
  000cc	eb 5e		 jmp	 SHORT $LN12@builtin_ne
  000ce	eb 5c		 jmp	 SHORT $LN7@builtin_ne
$LN8@builtin_ne:

; 1166 :     } else if (def != NULL) {

  000d0	48 83 7c 24 40
	00		 cmp	 QWORD PTR def$[rsp], 0
  000d6	74 36		 je	 SHORT $LN6@builtin_ne

; 1167 :         if (PyErr_Occurred()) {

  000d8	e8 00 00 00 00	 call	 PyErr_Occurred
  000dd	48 85 c0	 test	 rax, rax
  000e0	74 19		 je	 SHORT $LN5@builtin_ne

; 1168 :             if(!PyErr_ExceptionMatches(PyExc_StopIteration))

  000e2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_StopIteration
  000e9	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  000ee	85 c0		 test	 eax, eax
  000f0	75 04		 jne	 SHORT $LN4@builtin_ne

; 1169 :                 return NULL;

  000f2	33 c0		 xor	 eax, eax
  000f4	eb 36		 jmp	 SHORT $LN12@builtin_ne
$LN4@builtin_ne:

; 1170 :             PyErr_Clear();

  000f6	e8 00 00 00 00	 call	 PyErr_Clear
$LN5@builtin_ne:

; 1171 :         }
; 1172 :         Py_INCREF(def);

  000fb	48 8b 4c 24 40	 mov	 rcx, QWORD PTR def$[rsp]
  00100	e8 00 00 00 00	 call	 _Py_IncRef

; 1173 :         return def;

  00105	48 8b 44 24 40	 mov	 rax, QWORD PTR def$[rsp]
  0010a	eb 20		 jmp	 SHORT $LN12@builtin_ne
  0010c	eb 1e		 jmp	 SHORT $LN3@builtin_ne
$LN6@builtin_ne:

; 1174 :     } else if (PyErr_Occurred()) {

  0010e	e8 00 00 00 00	 call	 PyErr_Occurred
  00113	48 85 c0	 test	 rax, rax
  00116	74 06		 je	 SHORT $LN2@builtin_ne

; 1175 :         return NULL;

  00118	33 c0		 xor	 eax, eax
  0011a	eb 10		 jmp	 SHORT $LN12@builtin_ne

; 1176 :     } else {

  0011c	eb 0e		 jmp	 SHORT $LN1@builtin_ne
$LN2@builtin_ne:

; 1177 :         PyErr_SetNone(PyExc_StopIteration);

  0011e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_StopIteration
  00125	e8 00 00 00 00	 call	 PyErr_SetNone

; 1178 :         return NULL;

  0012a	33 c0		 xor	 eax, eax
$LN1@builtin_ne:
$LN3@builtin_ne:
$LN7@builtin_ne:
$LN12@builtin_ne:

; 1179 :     }
; 1180 : }

  0012c	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00130	c3		 ret	 0
builtin_next ENDP
_TEXT	ENDS
EXTRN	PyObject_SetAttr:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_setattr DD imagerel builtin_setattr
	DD	imagerel builtin_setattr+133
	DD	imagerel $unwind$builtin_setattr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_setattr DD 010e01H
	DD	0c20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT builtin_setattr
_TEXT	SEGMENT
value$ = 64
v$ = 72
name$ = 80
self$ = 112
args$ = 120
builtin_setattr PROC					; COMDAT

; 1191 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1192 :     PyObject *v;
; 1193 :     PyObject *name;
; 1194 :     PyObject *value;
; 1195 : 
; 1196 :     if (!PyArg_UnpackTuple(args, "setattr", 3, 3, &v, &name, &value))

  0000e	48 8d 44 24 40	 lea	 rax, QWORD PTR value$[rsp]
  00013	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR name$[rsp]
  0001d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00022	48 8d 44 24 48	 lea	 rax, QWORD PTR v$[rsp]
  00027	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00032	41 b8 03 00 00
	00		 mov	 r8d, 3
  00038	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07PPMBCILO@setattr?$AA@
  0003f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  00044	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00049	85 c0		 test	 eax, eax
  0004b	75 04		 jne	 SHORT $LN2@builtin_se

; 1197 :         return NULL;

  0004d	33 c0		 xor	 eax, eax
  0004f	eb 2f		 jmp	 SHORT $LN3@builtin_se
$LN2@builtin_se:

; 1198 :     if (PyObject_SetAttr(v, name, value) != 0)

  00051	4c 8b 44 24 40	 mov	 r8, QWORD PTR value$[rsp]
  00056	48 8b 54 24 50	 mov	 rdx, QWORD PTR name$[rsp]
  0005b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR v$[rsp]
  00060	e8 00 00 00 00	 call	 PyObject_SetAttr
  00065	85 c0		 test	 eax, eax
  00067	74 04		 je	 SHORT $LN1@builtin_se

; 1199 :         return NULL;

  00069	33 c0		 xor	 eax, eax
  0006b	eb 13		 jmp	 SHORT $LN3@builtin_se
$LN1@builtin_se:

; 1200 :     Py_INCREF(Py_None);

  0006d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00074	e8 00 00 00 00	 call	 _Py_IncRef

; 1201 :     return Py_None;

  00079	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN3@builtin_se:

; 1202 : }

  00080	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00084	c3		 ret	 0
builtin_setattr ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_delattr DD imagerel builtin_delattr
	DD	imagerel builtin_delattr+121
	DD	imagerel $unwind$builtin_delattr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_delattr DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT builtin_delattr
_TEXT	SEGMENT
v$ = 48
name$ = 56
self$ = 80
args$ = 88
builtin_delattr PROC					; COMDAT

; 1213 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1214 :     PyObject *v;
; 1215 :     PyObject *name;
; 1216 : 
; 1217 :     if (!PyArg_UnpackTuple(args, "delattr", 2, 2, &v, &name))

  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR name$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR v$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07GGDKJAHK@delattr?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN2@builtin_de

; 1218 :         return NULL;

  00043	33 c0		 xor	 eax, eax
  00045	eb 2d		 jmp	 SHORT $LN3@builtin_de
$LN2@builtin_de:

; 1219 :     if (PyObject_SetAttr(v, name, (PyObject *)NULL) != 0)

  00047	45 33 c0	 xor	 r8d, r8d
  0004a	48 8b 54 24 38	 mov	 rdx, QWORD PTR name$[rsp]
  0004f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR v$[rsp]
  00054	e8 00 00 00 00	 call	 PyObject_SetAttr
  00059	85 c0		 test	 eax, eax
  0005b	74 04		 je	 SHORT $LN1@builtin_de

; 1220 :         return NULL;

  0005d	33 c0		 xor	 eax, eax
  0005f	eb 13		 jmp	 SHORT $LN3@builtin_de
$LN1@builtin_de:

; 1221 :     Py_INCREF(Py_None);

  00061	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00068	e8 00 00 00 00	 call	 _Py_IncRef

; 1222 :     return Py_None;

  0006d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN3@builtin_de:

; 1223 : }

  00074	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00078	c3		 ret	 0
builtin_delattr ENDP
_TEXT	ENDS
EXTRN	PyLong_FromSsize_t:PROC
EXTRN	PyObject_Hash:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_hash DD imagerel builtin_hash
	DD	imagerel builtin_hash+56
	DD	imagerel $unwind$builtin_hash
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_hash DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT builtin_hash
_TEXT	SEGMENT
x$ = 32
self$ = 64
v$ = 72
builtin_hash PROC					; COMDAT

; 1234 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1235 :     Py_hash_t x;
; 1236 : 
; 1237 :     x = PyObject_Hash(v);

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR v$[rsp]
  00013	e8 00 00 00 00	 call	 PyObject_Hash
  00018	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 1238 :     if (x == -1)

  0001d	48 83 7c 24 20
	ff		 cmp	 QWORD PTR x$[rsp], -1
  00023	75 04		 jne	 SHORT $LN1@builtin_ha@2

; 1239 :         return NULL;

  00025	33 c0		 xor	 eax, eax
  00027	eb 0a		 jmp	 SHORT $LN2@builtin_ha@2
$LN1@builtin_ha@2:

; 1240 :     return PyLong_FromSsize_t(x);

  00029	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  0002e	e8 00 00 00 00	 call	 PyLong_FromSsize_t
$LN2@builtin_ha@2:

; 1241 : }

  00033	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00037	c3		 ret	 0
builtin_hash ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_hex DD imagerel builtin_hex
	DD	imagerel builtin_hex+34
	DD	imagerel $unwind$builtin_hex
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_hex DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT builtin_hex
_TEXT	SEGMENT
self$ = 48
v$ = 56
builtin_hex PROC					; COMDAT

; 1252 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1253 :     return PyNumber_ToBase(v, 16);

  0000e	ba 10 00 00 00	 mov	 edx, 16
  00013	48 8b 4c 24 38	 mov	 rcx, QWORD PTR v$[rsp]
  00018	e8 00 00 00 00	 call	 PyNumber_ToBase

; 1254 : }

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
builtin_hex ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@IHPOABDH@iter?$CIv?0?5w?$CJ?3?5v?5must?5be?5callable?$AA@ ; `string'
EXTRN	PyCallIter_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_iter DD imagerel builtin_iter
	DD	imagerel builtin_iter+157
	DD	imagerel $unwind$builtin_iter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_iter DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0BP@IHPOABDH@iter?$CIv?0?5w?$CJ?3?5v?5must?5be?5callable?$AA@
CONST	SEGMENT
??_C@_0BP@IHPOABDH@iter?$CIv?0?5w?$CJ?3?5v?5must?5be?5callable?$AA@ DB 'i'
	DB	'ter(v, w): v must be callable', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT builtin_iter
_TEXT	SEGMENT
w$ = 48
v$ = 56
self$ = 80
args$ = 88
builtin_iter PROC					; COMDAT

; 1264 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1265 :     PyObject *v, *w = NULL;

  0000e	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR w$[rsp], 0

; 1266 : 
; 1267 :     if (!PyArg_UnpackTuple(args, "iter", 1, 2, &v, &w))

  00017	48 8d 44 24 30	 lea	 rax, QWORD PTR w$[rsp]
  0001c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00021	48 8d 44 24 38	 lea	 rax, QWORD PTR v$[rsp]
  00026	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002b	41 b9 02 00 00
	00		 mov	 r9d, 2
  00031	41 b8 01 00 00
	00		 mov	 r8d, 1
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04BKLHDIKK@iter?$AA@
  0003e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  00043	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00048	85 c0		 test	 eax, eax
  0004a	75 04		 jne	 SHORT $LN3@builtin_it

; 1268 :         return NULL;

  0004c	33 c0		 xor	 eax, eax
  0004e	eb 48		 jmp	 SHORT $LN4@builtin_it
$LN3@builtin_it:

; 1269 :     if (w == NULL)

  00050	48 83 7c 24 30
	00		 cmp	 QWORD PTR w$[rsp], 0
  00056	75 0c		 jne	 SHORT $LN2@builtin_it

; 1270 :         return PyObject_GetIter(v);

  00058	48 8b 4c 24 38	 mov	 rcx, QWORD PTR v$[rsp]
  0005d	e8 00 00 00 00	 call	 PyObject_GetIter
  00062	eb 34		 jmp	 SHORT $LN4@builtin_it
$LN2@builtin_it:

; 1271 :     if (!PyCallable_Check(v)) {

  00064	48 8b 4c 24 38	 mov	 rcx, QWORD PTR v$[rsp]
  00069	e8 00 00 00 00	 call	 PyCallable_Check
  0006e	85 c0		 test	 eax, eax
  00070	75 17		 jne	 SHORT $LN1@builtin_it

; 1272 :         PyErr_SetString(PyExc_TypeError,
; 1273 :                         "iter(v, w): v must be callable");

  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@IHPOABDH@iter?$CIv?0?5w?$CJ?3?5v?5must?5be?5callable?$AA@
  00079	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00080	e8 00 00 00 00	 call	 PyErr_SetString

; 1274 :         return NULL;

  00085	33 c0		 xor	 eax, eax
  00087	eb 0f		 jmp	 SHORT $LN4@builtin_it
$LN1@builtin_it:

; 1275 :     }
; 1276 :     return PyCallIter_New(v, w);

  00089	48 8b 54 24 30	 mov	 rdx, QWORD PTR w$[rsp]
  0008e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR v$[rsp]
  00093	e8 00 00 00 00	 call	 PyCallIter_New
$LN4@builtin_it:

; 1277 : }

  00098	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0009c	c3		 ret	 0
builtin_iter ENDP
_TEXT	ENDS
EXTRN	PyObject_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_len DD imagerel builtin_len
	DD	imagerel builtin_len+66
	DD	imagerel $unwind$builtin_len
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_len DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT builtin_len
_TEXT	SEGMENT
res$ = 32
self$ = 64
v$ = 72
builtin_len PROC					; COMDAT

; 1290 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1291 :     Py_ssize_t res;
; 1292 : 
; 1293 :     res = PyObject_Size(v);

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR v$[rsp]
  00013	e8 00 00 00 00	 call	 PyObject_Size
  00018	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 1294 :     if (res < 0 && PyErr_Occurred())

  0001d	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  00023	7d 0e		 jge	 SHORT $LN1@builtin_le
  00025	e8 00 00 00 00	 call	 PyErr_Occurred
  0002a	48 85 c0	 test	 rax, rax
  0002d	74 04		 je	 SHORT $LN1@builtin_le

; 1295 :         return NULL;

  0002f	33 c0		 xor	 eax, eax
  00031	eb 0a		 jmp	 SHORT $LN2@builtin_le
$LN1@builtin_le:

; 1296 :     return PyLong_FromSsize_t(res);

  00033	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  00038	e8 00 00 00 00	 call	 PyLong_FromSsize_t
$LN2@builtin_le:

; 1297 : }

  0003d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00041	c3		 ret	 0
builtin_len ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_locals DD imagerel builtin_locals
	DD	imagerel builtin_locals+53
	DD	imagerel $unwind$builtin_locals
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_locals DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT builtin_locals
_TEXT	SEGMENT
d$ = 32
self$ = 64
builtin_locals PROC					; COMDAT

; 1307 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1308 :     PyObject *d;
; 1309 : 
; 1310 :     d = PyEval_GetLocals();

  00009	e8 00 00 00 00	 call	 PyEval_GetLocals
  0000e	48 89 44 24 20	 mov	 QWORD PTR d$[rsp], rax
$LN4@builtin_lo:

; 1311 :     Py_XINCREF(d);

  00013	48 83 7c 24 20
	00		 cmp	 QWORD PTR d$[rsp], 0
  00019	74 0a		 je	 SHORT $LN1@builtin_lo
  0001b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00020	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@builtin_lo:
  00025	33 c0		 xor	 eax, eax
  00027	85 c0		 test	 eax, eax
  00029	75 e8		 jne	 SHORT $LN4@builtin_lo

; 1312 :     return d;

  0002b	48 8b 44 24 20	 mov	 rax, QWORD PTR d$[rsp]

; 1313 : }

  00030	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00034	c3		 ret	 0
builtin_locals ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_min DD imagerel builtin_min
	DD	imagerel builtin_min+42
	DD	imagerel $unwind$builtin_min
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_min DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT builtin_min
_TEXT	SEGMENT
self$ = 48
args$ = 56
kwds$ = 64
builtin_min PROC					; COMDAT

; 1412 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1413 :     return min_max(args, kwds, Py_LT);

  00013	45 33 c0	 xor	 r8d, r8d
  00016	48 8b 54 24 40	 mov	 rdx, QWORD PTR kwds$[rsp]
  0001b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR args$[rsp]
  00020	e8 00 00 00 00	 call	 min_max

; 1414 : }

  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
builtin_min ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CA@HAJKOJLD@?$AAm?$AAa?$AAx?$AAi?$AAt?$AAe?$AAm?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BO@OKNAJOGM@?$CFs?$CI?$CJ?5arg?5is?5an?5empty?5sequence?$AA@ ; `string'
PUBLIC	??_C@_0CI@LHKNCFIK@?$CFs?$CI?$CJ?5got?5an?5unexpected?5keyword?5a@ ; `string'
EXTRN	PyObject_RichCompareBool:PROC
EXTRN	PyDict_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$min_max DD imagerel min_max
	DD	imagerel min_max+873
	DD	imagerel $unwind$min_max
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$min_max DD 021601H
	DD	0110116H
xdata	ENDS
;	COMDAT ??_C@_1CA@HAJKOJLD@?$AAm?$AAa?$AAx?$AAi?$AAt?$AAe?$AAm?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@HAJKOJLD@?$AAm?$AAa?$AAx?$AAi?$AAt?$AAe?$AAm?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'm'
	DB	00H, 'a', 00H, 'x', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'm', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L'
	DB	00H, 'L', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@OKNAJOGM@?$CFs?$CI?$CJ?5arg?5is?5an?5empty?5sequence?$AA@
CONST	SEGMENT
??_C@_0BO@OKNAJOGM@?$CFs?$CI?$CJ?5arg?5is?5an?5empty?5sequence?$AA@ DB '%'
	DB	's() arg is an empty sequence', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@LHKNCFIK@?$CFs?$CI?$CJ?5got?5an?5unexpected?5keyword?5a@
CONST	SEGMENT
??_C@_0CI@LHKNCFIK@?$CFs?$CI?$CJ?5got?5an?5unexpected?5keyword?5a@ DB '%s'
	DB	'() got an unexpected keyword argument', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT min_max
_TEXT	SEGMENT
it$ = 48
v$ = 56
maxitem$ = 64
name$ = 72
keyfunc$ = 80
val$ = 88
maxval$ = 96
item$ = 104
cmp$22519 = 112
tv65 = 120
args$ = 144
kwds$ = 152
op$ = 160
min_max	PROC						; COMDAT

; 1323 : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 1324 :     PyObject *v, *it, *item, *val, *maxitem, *maxval, *keyfunc=NULL;

  00016	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR keyfunc$[rsp], 0

; 1325 :     const char *name = op == Py_LT ? "min" : "max";

  0001f	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR op$[rsp], 0
  00027	75 0e		 jne	 SHORT $LN44@min_max
  00029	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_03KLIPLJLL@min?$AA@
  00030	48 89 44 24 78	 mov	 QWORD PTR tv65[rsp], rax
  00035	eb 0c		 jmp	 SHORT $LN45@min_max
$LN44@min_max:
  00037	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_03LJAEFNNE@max?$AA@
  0003e	48 89 44 24 78	 mov	 QWORD PTR tv65[rsp], rax
$LN45@min_max:
  00043	48 8b 44 24 78	 mov	 rax, QWORD PTR tv65[rsp]
  00048	48 89 44 24 48	 mov	 QWORD PTR name$[rsp], rax

; 1326 : 
; 1327 :     if (PyTuple_Size(args) > 1)

  0004d	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00055	e8 00 00 00 00	 call	 PyTuple_Size
  0005a	48 83 f8 01	 cmp	 rax, 1
  0005e	7e 0f		 jle	 SHORT $LN41@min_max

; 1328 :         v = args;

  00060	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR args$[rsp]
  00068	48 89 44 24 38	 mov	 QWORD PTR v$[rsp], rax
  0006d	eb 33		 jmp	 SHORT $LN40@min_max
$LN41@min_max:

; 1329 :     else if (!PyArg_UnpackTuple(args, (char *)name, 1, 1, &v))

  0006f	48 8d 44 24 38	 lea	 rax, QWORD PTR v$[rsp]
  00074	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00079	41 b9 01 00 00
	00		 mov	 r9d, 1
  0007f	41 b8 01 00 00
	00		 mov	 r8d, 1
  00085	48 8b 54 24 48	 mov	 rdx, QWORD PTR name$[rsp]
  0008a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00092	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00097	85 c0		 test	 eax, eax
  00099	75 07		 jne	 SHORT $LN39@min_max

; 1330 :         return NULL;

  0009b	33 c0		 xor	 eax, eax
  0009d	e9 bf 02 00 00	 jmp	 $LN42@min_max
$LN39@min_max:
$LN40@min_max:

; 1331 : 
; 1332 :     if (kwds != NULL && PyDict_Check(kwds) && PyDict_Size(kwds)) {

  000a2	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR kwds$[rsp], 0
  000ab	0f 84 8a 00 00
	00		 je	 $LN38@min_max
  000b1	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR kwds$[rsp]
  000b9	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000bd	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000c3	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  000c8	85 c0		 test	 eax, eax
  000ca	74 6f		 je	 SHORT $LN38@min_max
  000cc	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR kwds$[rsp]
  000d4	e8 00 00 00 00	 call	 PyDict_Size
  000d9	48 85 c0	 test	 rax, rax
  000dc	74 5d		 je	 SHORT $LN38@min_max

; 1333 :         keyfunc = PyDict_GetItemString(kwds, "key");

  000de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03ICHNJLJF@key?$AA@
  000e5	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR kwds$[rsp]
  000ed	e8 00 00 00 00	 call	 PyDict_GetItemString
  000f2	48 89 44 24 50	 mov	 QWORD PTR keyfunc$[rsp], rax

; 1334 :         if (PyDict_Size(kwds)!=1  ||  keyfunc == NULL) {

  000f7	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR kwds$[rsp]
  000ff	e8 00 00 00 00	 call	 PyDict_Size
  00104	48 83 f8 01	 cmp	 rax, 1
  00108	75 08		 jne	 SHORT $LN36@min_max
  0010a	48 83 7c 24 50
	00		 cmp	 QWORD PTR keyfunc$[rsp], 0
  00110	75 1f		 jne	 SHORT $LN37@min_max
$LN36@min_max:

; 1335 :             PyErr_Format(PyExc_TypeError,
; 1336 :                 "%s() got an unexpected keyword argument", name);

  00112	4c 8b 44 24 48	 mov	 r8, QWORD PTR name$[rsp]
  00117	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@LHKNCFIK@?$CFs?$CI?$CJ?5got?5an?5unexpected?5keyword?5a@
  0011e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00125	e8 00 00 00 00	 call	 PyErr_Format

; 1337 :             return NULL;

  0012a	33 c0		 xor	 eax, eax
  0012c	e9 30 02 00 00	 jmp	 $LN42@min_max
$LN37@min_max:

; 1338 :         }
; 1339 :         Py_INCREF(keyfunc);

  00131	48 8b 4c 24 50	 mov	 rcx, QWORD PTR keyfunc$[rsp]
  00136	e8 00 00 00 00	 call	 _Py_IncRef
$LN38@min_max:

; 1340 :     }
; 1341 : 
; 1342 :     it = PyObject_GetIter(v);

  0013b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR v$[rsp]
  00140	e8 00 00 00 00	 call	 PyObject_GetIter
  00145	48 89 44 24 30	 mov	 QWORD PTR it$[rsp], rax

; 1343 :     if (it == NULL) {

  0014a	48 83 7c 24 30
	00		 cmp	 QWORD PTR it$[rsp], 0
  00150	75 1f		 jne	 SHORT $LN35@min_max
$LN34@min_max:

; 1344 :         Py_XDECREF(keyfunc);

  00152	48 83 7c 24 50
	00		 cmp	 QWORD PTR keyfunc$[rsp], 0
  00158	74 0a		 je	 SHORT $LN31@min_max
  0015a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR keyfunc$[rsp]
  0015f	e8 00 00 00 00	 call	 _Py_DecRef
$LN31@min_max:
  00164	33 c0		 xor	 eax, eax
  00166	85 c0		 test	 eax, eax
  00168	75 e8		 jne	 SHORT $LN34@min_max

; 1345 :         return NULL;

  0016a	33 c0		 xor	 eax, eax
  0016c	e9 f0 01 00 00	 jmp	 $LN42@min_max
$LN35@min_max:

; 1346 :     }
; 1347 : 
; 1348 :     maxitem = NULL; /* the result */

  00171	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR maxitem$[rsp], 0

; 1349 :     maxval = NULL;  /* the value associated with the result */

  0017a	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR maxval$[rsp], 0
$LN30@min_max:

; 1350 :     while (( item = PyIter_Next(it) )) {

  00183	48 8b 4c 24 30	 mov	 rcx, QWORD PTR it$[rsp]
  00188	e8 00 00 00 00	 call	 PyIter_Next
  0018d	48 89 44 24 68	 mov	 QWORD PTR item$[rsp], rax
  00192	48 83 7c 24 68
	00		 cmp	 QWORD PTR item$[rsp], 0
  00198	0f 84 d3 00 00
	00		 je	 $LN29@min_max

; 1351 :         /* get the value from the key function */
; 1352 :         if (keyfunc != NULL) {

  0019e	48 83 7c 24 50
	00		 cmp	 QWORD PTR keyfunc$[rsp], 0
  001a4	74 26		 je	 SHORT $LN28@min_max

; 1353 :             val = PyObject_CallFunctionObjArgs(keyfunc, item, NULL);

  001a6	45 33 c0	 xor	 r8d, r8d
  001a9	48 8b 54 24 68	 mov	 rdx, QWORD PTR item$[rsp]
  001ae	48 8b 4c 24 50	 mov	 rcx, QWORD PTR keyfunc$[rsp]
  001b3	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  001b8	48 89 44 24 58	 mov	 QWORD PTR val$[rsp], rax

; 1354 :             if (val == NULL)

  001bd	48 83 7c 24 58
	00		 cmp	 QWORD PTR val$[rsp], 0
  001c3	75 05		 jne	 SHORT $LN27@min_max

; 1355 :                 goto Fail_it_item;

  001c5	e9 39 01 00 00	 jmp	 $Fail_it_item$22513
$LN27@min_max:

; 1356 :         }
; 1357 :         /* no key function; the value is the item */
; 1358 :         else {

  001ca	eb 14		 jmp	 SHORT $LN26@min_max
$LN28@min_max:

; 1359 :             val = item;

  001cc	48 8b 44 24 68	 mov	 rax, QWORD PTR item$[rsp]
  001d1	48 89 44 24 58	 mov	 QWORD PTR val$[rsp], rax

; 1360 :             Py_INCREF(val);

  001d6	48 8b 4c 24 58	 mov	 rcx, QWORD PTR val$[rsp]
  001db	e8 00 00 00 00	 call	 _Py_IncRef
$LN26@min_max:

; 1361 :         }
; 1362 : 
; 1363 :         /* maximum value and item are unset; set them */
; 1364 :         if (maxval == NULL) {

  001e0	48 83 7c 24 60
	00		 cmp	 QWORD PTR maxval$[rsp], 0
  001e6	75 16		 jne	 SHORT $LN25@min_max

; 1365 :             maxitem = item;

  001e8	48 8b 44 24 68	 mov	 rax, QWORD PTR item$[rsp]
  001ed	48 89 44 24 40	 mov	 QWORD PTR maxitem$[rsp], rax

; 1366 :             maxval = val;

  001f2	48 8b 44 24 58	 mov	 rax, QWORD PTR val$[rsp]
  001f7	48 89 44 24 60	 mov	 QWORD PTR maxval$[rsp], rax

; 1367 :         }
; 1368 :         /* maximum value and item are set; update them as necessary */
; 1369 :         else {

  001fc	eb 6e		 jmp	 SHORT $LN24@min_max
$LN25@min_max:

; 1370 :             int cmp = PyObject_RichCompareBool(val, maxval, op);

  001fe	44 8b 84 24 a0
	00 00 00	 mov	 r8d, DWORD PTR op$[rsp]
  00206	48 8b 54 24 60	 mov	 rdx, QWORD PTR maxval$[rsp]
  0020b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR val$[rsp]
  00210	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  00215	89 44 24 70	 mov	 DWORD PTR cmp$22519[rsp], eax

; 1371 :             if (cmp < 0)

  00219	83 7c 24 70 00	 cmp	 DWORD PTR cmp$22519[rsp], 0
  0021e	7d 07		 jge	 SHORT $LN23@min_max

; 1372 :                 goto Fail_it_item_and_val;

  00220	e9 d4 00 00 00	 jmp	 $Fail_it_item_and_val$22521
  00225	eb 45		 jmp	 SHORT $LN22@min_max
$LN23@min_max:

; 1373 :             else if (cmp > 0) {

  00227	83 7c 24 70 00	 cmp	 DWORD PTR cmp$22519[rsp], 0
  0022c	7e 2a		 jle	 SHORT $LN21@min_max

; 1374 :                 Py_DECREF(maxval);

  0022e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR maxval$[rsp]
  00233	e8 00 00 00 00	 call	 _Py_DecRef

; 1375 :                 Py_DECREF(maxitem);

  00238	48 8b 4c 24 40	 mov	 rcx, QWORD PTR maxitem$[rsp]
  0023d	e8 00 00 00 00	 call	 _Py_DecRef

; 1376 :                 maxval = val;

  00242	48 8b 44 24 58	 mov	 rax, QWORD PTR val$[rsp]
  00247	48 89 44 24 60	 mov	 QWORD PTR maxval$[rsp], rax

; 1377 :                 maxitem = item;

  0024c	48 8b 44 24 68	 mov	 rax, QWORD PTR item$[rsp]
  00251	48 89 44 24 40	 mov	 QWORD PTR maxitem$[rsp], rax

; 1378 :             }
; 1379 :             else {

  00256	eb 14		 jmp	 SHORT $LN20@min_max
$LN21@min_max:

; 1380 :                 Py_DECREF(item);

  00258	48 8b 4c 24 68	 mov	 rcx, QWORD PTR item$[rsp]
  0025d	e8 00 00 00 00	 call	 _Py_DecRef

; 1381 :                 Py_DECREF(val);

  00262	48 8b 4c 24 58	 mov	 rcx, QWORD PTR val$[rsp]
  00267	e8 00 00 00 00	 call	 _Py_DecRef
$LN20@min_max:
$LN22@min_max:
$LN24@min_max:

; 1382 :             }
; 1383 :         }
; 1384 :     }

  0026c	e9 12 ff ff ff	 jmp	 $LN30@min_max
$LN29@min_max:

; 1385 :     if (PyErr_Occurred())

  00271	e8 00 00 00 00	 call	 PyErr_Occurred
  00276	48 85 c0	 test	 rax, rax
  00279	74 05		 je	 SHORT $LN19@min_max

; 1386 :         goto Fail_it;

  0027b	e9 8d 00 00 00	 jmp	 $Fail_it$22530
$LN19@min_max:

; 1387 :     if (maxval == NULL) {

  00280	48 83 7c 24 60
	00		 cmp	 QWORD PTR maxval$[rsp], 0
  00286	75 3e		 jne	 SHORT $LN18@min_max

; 1388 :         PyErr_Format(PyExc_ValueError,
; 1389 :                      "%s() arg is an empty sequence", name);

  00288	4c 8b 44 24 48	 mov	 r8, QWORD PTR name$[rsp]
  0028d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@OKNAJOGM@?$CFs?$CI?$CJ?5arg?5is?5an?5empty?5sequence?$AA@
  00294	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0029b	e8 00 00 00 00	 call	 PyErr_Format

; 1390 :         assert(maxitem == NULL);

  002a0	48 83 7c 24 40
	00		 cmp	 QWORD PTR maxitem$[rsp], 0
  002a6	74 1c		 je	 SHORT $LN46@min_max
  002a8	41 b8 6e 05 00
	00		 mov	 r8d, 1390		; 0000056eH
  002ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@NKNCFJLO@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAb?$AAl?$AAt?$AAi?$AAn?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  002b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@HAJKOJLD@?$AAm?$AAa?$AAx?$AAi?$AAt?$AAe?$AAm?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  002bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002c2	33 c0		 xor	 eax, eax
$LN46@min_max:

; 1391 :     }
; 1392 :     else

  002c4	eb 0a		 jmp	 SHORT $LN17@min_max
$LN18@min_max:

; 1393 :         Py_DECREF(maxval);

  002c6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR maxval$[rsp]
  002cb	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@min_max:

; 1394 :     Py_DECREF(it);

  002d0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR it$[rsp]
  002d5	e8 00 00 00 00	 call	 _Py_DecRef
$LN16@min_max:

; 1395 :     Py_XDECREF(keyfunc);

  002da	48 83 7c 24 50
	00		 cmp	 QWORD PTR keyfunc$[rsp], 0
  002e0	74 0a		 je	 SHORT $LN13@min_max
  002e2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR keyfunc$[rsp]
  002e7	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@min_max:
  002ec	33 c0		 xor	 eax, eax
  002ee	85 c0		 test	 eax, eax
  002f0	75 e8		 jne	 SHORT $LN16@min_max

; 1396 :     return maxitem;

  002f2	48 8b 44 24 40	 mov	 rax, QWORD PTR maxitem$[rsp]
  002f7	eb 68		 jmp	 SHORT $LN42@min_max
$Fail_it_item_and_val$22521:

; 1397 : 
; 1398 : Fail_it_item_and_val:
; 1399 :     Py_DECREF(val);

  002f9	48 8b 4c 24 58	 mov	 rcx, QWORD PTR val$[rsp]
  002fe	e8 00 00 00 00	 call	 _Py_DecRef
$Fail_it_item$22513:

; 1400 : Fail_it_item:
; 1401 :     Py_DECREF(item);

  00303	48 8b 4c 24 68	 mov	 rcx, QWORD PTR item$[rsp]
  00308	e8 00 00 00 00	 call	 _Py_DecRef
$Fail_it$22530:
$LN12@min_max:

; 1402 : Fail_it:
; 1403 :     Py_XDECREF(maxval);

  0030d	48 83 7c 24 60
	00		 cmp	 QWORD PTR maxval$[rsp], 0
  00313	74 0a		 je	 SHORT $LN9@min_max
  00315	48 8b 4c 24 60	 mov	 rcx, QWORD PTR maxval$[rsp]
  0031a	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@min_max:
  0031f	33 c0		 xor	 eax, eax
  00321	85 c0		 test	 eax, eax
  00323	75 e8		 jne	 SHORT $LN12@min_max
$LN8@min_max:

; 1404 :     Py_XDECREF(maxitem);

  00325	48 83 7c 24 40
	00		 cmp	 QWORD PTR maxitem$[rsp], 0
  0032b	74 0a		 je	 SHORT $LN5@min_max
  0032d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR maxitem$[rsp]
  00332	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@min_max:
  00337	33 c0		 xor	 eax, eax
  00339	85 c0		 test	 eax, eax
  0033b	75 e8		 jne	 SHORT $LN8@min_max

; 1405 :     Py_DECREF(it);

  0033d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR it$[rsp]
  00342	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@min_max:

; 1406 :     Py_XDECREF(keyfunc);

  00347	48 83 7c 24 50
	00		 cmp	 QWORD PTR keyfunc$[rsp], 0
  0034d	74 0a		 je	 SHORT $LN1@min_max
  0034f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR keyfunc$[rsp]
  00354	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@min_max:
  00359	33 c0		 xor	 eax, eax
  0035b	85 c0		 test	 eax, eax
  0035d	75 e8		 jne	 SHORT $LN4@min_max

; 1407 :     return NULL;

  0035f	33 c0		 xor	 eax, eax
$LN42@min_max:

; 1408 : }

  00361	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00368	c3		 ret	 0
min_max	ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_max DD imagerel builtin_max
	DD	imagerel builtin_max+45
	DD	imagerel $unwind$builtin_max
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_max DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT builtin_max
_TEXT	SEGMENT
self$ = 48
args$ = 56
kwds$ = 64
builtin_max PROC					; COMDAT

; 1426 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1427 :     return min_max(args, kwds, Py_GT);

  00013	41 b8 04 00 00
	00		 mov	 r8d, 4
  00019	48 8b 54 24 40	 mov	 rdx, QWORD PTR kwds$[rsp]
  0001e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR args$[rsp]
  00023	e8 00 00 00 00	 call	 min_max

; 1428 : }

  00028	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002c	c3		 ret	 0
builtin_max ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_oct DD imagerel builtin_oct
	DD	imagerel builtin_oct+34
	DD	imagerel $unwind$builtin_oct
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_oct DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT builtin_oct
_TEXT	SEGMENT
self$ = 48
v$ = 56
builtin_oct PROC					; COMDAT

; 1440 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1441 :     return PyNumber_ToBase(v, 8);

  0000e	ba 08 00 00 00	 mov	 edx, 8
  00013	48 8b 4c 24 38	 mov	 rcx, QWORD PTR v$[rsp]
  00018	e8 00 00 00 00	 call	 PyNumber_ToBase

; 1442 : }

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
builtin_oct ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DL@BFJOGDAJ@ord?$CI?$CJ?5expected?5a?5character?0?5but?5@ ; `string'
PUBLIC	??_C@_0DE@ILLPAPAN@ord?$CI?$CJ?5expected?5string?5of?5length?5@ ; `string'
PUBLIC	??_C@_1CO@PHBFBFIE@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EM@FEFAFHBJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@ ; `string'
PUBLIC	??_C@_1DE@OAEGFPKJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CO@FLJEABJB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@OCGMGMDG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@KFNFIMBM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@BMHHMEBF@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ ; `string'
EXTRN	_PyByteArray_empty_string:BYTE
EXTRN	PyType_IsSubtype:PROC
EXTRN	PyByteArray_Type:BYTE
EXTRN	_PyUnicode_Ready:PROC
EXTRN	PyLong_FromLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_ord DD imagerel builtin_ord
	DD	imagerel builtin_ord+2295
	DD	imagerel $unwind$builtin_ord
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_ord DD 021101H
	DD	0110111H
xdata	ENDS
;	COMDAT ??_C@_0DL@BFJOGDAJ@ord?$CI?$CJ?5expected?5a?5character?0?5but?5@
CONST	SEGMENT
??_C@_0DL@BFJOGDAJ@ord?$CI?$CJ?5expected?5a?5character?0?5but?5@ DB 'ord('
	DB	') expected a character, but string of length %zd found', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@ILLPAPAN@ord?$CI?$CJ?5expected?5string?5of?5length?5@
CONST	SEGMENT
??_C@_0DE@ILLPAPAN@ord?$CI?$CJ?5expected?5string?5of?5length?5@ DB 'ord()'
	DB	' expected string of length 1, but %.200s found', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@PHBFBFIE@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@PHBFBFIE@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A', 00H
	DB	'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, '_', 00H, 'C', 00H, 'h'
	DB	00H, 'e', 00H, 'c', 00H, 'k', 00H, '(', 00H, 'o', 00H, 'b', 00H
	DB	'j', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EM@FEFAFHBJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
CONST	SEGMENT
??_C@_1EM@FEFAFHBJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	'(', 00H, 'o', 00H, 'b', 00H, 'j', 00H, ')', 00H, ')', 00H, ')'
	DB	00H, '-', 00H, '>', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	'.', 00H, 'a', 00H, 'n', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@OAEGFPKJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@OAEGFPKJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, '(', 00H
	DB	'o', 00H, 'b', 00H, 'j', 00H, ')', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@FLJEABJB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@FLJEABJB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, '(', 00H, 'o', 00H, 'b', 00H, 'j', 00H
	DB	')', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@OCGMGMDG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@OCGMGMDG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'o', 00H
	DB	'b', 00H, 'j', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@KFNFIMBM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@KFNFIMBM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'o', 00H, 'b', 00H, 'j', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@BMHHMEBF@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@BMHHMEBF@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'o', 00H, 'b', 00H, 'j', 00H, ')', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT builtin_ord
_TEXT	SEGMENT
size$ = 32
ord$ = 40
tv140 = 44
tv229 = 48
tv238 = 56
tv348 = 64
tv293 = 72
tv302 = 80
tv347 = 88
tv337 = 96
tv346 = 104
tv385 = 112
self$ = 144
obj$ = 152
builtin_ord PROC					; COMDAT

; 1452 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 1453 :     long ord;
; 1454 :     Py_ssize_t size;
; 1455 : 
; 1456 :     if (PyBytes_Check(obj)) {

  00011	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  00019	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00023	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00028	85 c0		 test	 eax, eax
  0002a	0f 84 aa 00 00
	00		 je	 $LN11@builtin_or

; 1457 :         size = PyBytes_GET_SIZE(obj);

  00030	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  00038	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00042	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00047	85 c0		 test	 eax, eax
  00049	75 1c		 jne	 SHORT $LN14@builtin_or
  0004b	41 b8 b1 05 00
	00		 mov	 r8d, 1457		; 000005b1H
  00051	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@NKNCFJLO@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAb?$AAl?$AAt?$AAi?$AAn?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00058	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@BMHHMEBF@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  0005f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00065	33 c0		 xor	 eax, eax
$LN14@builtin_or:
  00067	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  0006f	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00073	48 89 44 24 20	 mov	 QWORD PTR size$[rsp], rax

; 1458 :         if (size == 1) {

  00078	48 83 7c 24 20
	01		 cmp	 QWORD PTR size$[rsp], 1
  0007e	75 55		 jne	 SHORT $LN10@builtin_or

; 1459 :             ord = (long)((unsigned char)*PyBytes_AS_STRING(obj));

  00080	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  00088	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0008c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00092	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00097	85 c0		 test	 eax, eax
  00099	75 1c		 jne	 SHORT $LN15@builtin_or
  0009b	41 b8 b3 05 00
	00		 mov	 r8d, 1459		; 000005b3H
  000a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@NKNCFJLO@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAb?$AAl?$AAt?$AAi?$AAn?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  000a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@BMHHMEBF@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  000af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000b5	33 c0		 xor	 eax, eax
$LN15@builtin_or:
  000b7	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  000bf	0f b6 40 78	 movzx	 eax, BYTE PTR [rax+120]
  000c3	89 44 24 28	 mov	 DWORD PTR ord$[rsp], eax

; 1460 :             return PyLong_FromLong(ord);

  000c7	8b 4c 24 28	 mov	 ecx, DWORD PTR ord$[rsp]
  000cb	e8 00 00 00 00	 call	 PyLong_FromLong
  000d0	e9 1a 08 00 00	 jmp	 $LN12@builtin_or
$LN10@builtin_or:

; 1461 :         }

  000d5	e9 fb 07 00 00	 jmp	 $LN9@builtin_or
$LN11@builtin_or:

; 1462 :     }
; 1463 :     else if (PyUnicode_Check(obj)) {

  000da	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  000e2	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000e6	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000ec	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000f1	85 c0		 test	 eax, eax
  000f3	0f 84 7f 06 00
	00		 je	 $LN8@builtin_or

; 1464 :         if (PyUnicode_READY(obj) == -1)

  000f9	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  00101	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00105	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0010b	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00110	85 c0		 test	 eax, eax
  00112	75 1c		 jne	 SHORT $LN16@builtin_or
  00114	41 b8 b8 05 00
	00		 mov	 r8d, 1464		; 000005b8H
  0011a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@NKNCFJLO@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAb?$AAl?$AAt?$AAi?$AAn?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00121	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@KFNFIMBM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  00128	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0012e	33 c0		 xor	 eax, eax
$LN16@builtin_or:
  00130	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  00138	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0013b	c1 e8 07	 shr	 eax, 7
  0013e	83 e0 01	 and	 eax, 1
  00141	85 c0		 test	 eax, eax
  00143	74 0a		 je	 SHORT $LN17@builtin_or
  00145	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv140[rsp], 0
  0014d	eb 11		 jmp	 SHORT $LN18@builtin_or
$LN17@builtin_or:
  0014f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00157	e8 00 00 00 00	 call	 _PyUnicode_Ready
  0015c	89 44 24 2c	 mov	 DWORD PTR tv140[rsp], eax
$LN18@builtin_or:
  00160	83 7c 24 2c ff	 cmp	 DWORD PTR tv140[rsp], -1
  00165	75 07		 jne	 SHORT $LN7@builtin_or

; 1465 :             return NULL;

  00167	33 c0		 xor	 eax, eax
  00169	e9 81 07 00 00	 jmp	 $LN12@builtin_or
$LN7@builtin_or:

; 1466 :         size = PyUnicode_GET_LENGTH(obj);

  0016e	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  00176	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0017a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00180	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00185	85 c0		 test	 eax, eax
  00187	75 1c		 jne	 SHORT $LN19@builtin_or
  00189	41 b8 ba 05 00
	00		 mov	 r8d, 1466		; 000005baH
  0018f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@NKNCFJLO@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAb?$AAl?$AAt?$AAi?$AAn?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00196	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@KFNFIMBM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  0019d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001a3	33 c0		 xor	 eax, eax
$LN19@builtin_or:
  001a5	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  001ad	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001b0	c1 e8 07	 shr	 eax, 7
  001b3	83 e0 01	 and	 eax, 1
  001b6	85 c0		 test	 eax, eax
  001b8	75 1c		 jne	 SHORT $LN20@builtin_or
  001ba	41 b8 ba 05 00
	00		 mov	 r8d, 1466		; 000005baH
  001c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@NKNCFJLO@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAb?$AAl?$AAt?$AAi?$AAn?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  001c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@OCGMGMDG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  001ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001d4	33 c0		 xor	 eax, eax
$LN20@builtin_or:
  001d6	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  001de	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  001e2	48 89 44 24 20	 mov	 QWORD PTR size$[rsp], rax

; 1467 :         if (size == 1) {

  001e7	48 83 7c 24 20
	01		 cmp	 QWORD PTR size$[rsp], 1
  001ed	0f 85 80 05 00
	00		 jne	 $LN6@builtin_or

; 1468 :             ord = (long)PyUnicode_READ_CHAR(obj, 0);

  001f3	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  001fb	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001ff	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00205	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0020a	85 c0		 test	 eax, eax
  0020c	75 1c		 jne	 SHORT $LN21@builtin_or
  0020e	41 b8 bc 05 00
	00		 mov	 r8d, 1468		; 000005bcH
  00214	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@NKNCFJLO@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAb?$AAl?$AAt?$AAi?$AAn?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0021b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@KFNFIMBM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  00222	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00228	33 c0		 xor	 eax, eax
$LN21@builtin_or:
  0022a	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  00232	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00235	c1 e8 07	 shr	 eax, 7
  00238	83 e0 01	 and	 eax, 1
  0023b	85 c0		 test	 eax, eax
  0023d	75 1c		 jne	 SHORT $LN22@builtin_or
  0023f	41 b8 bc 05 00
	00		 mov	 r8d, 1468		; 000005bcH
  00245	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@NKNCFJLO@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAb?$AAl?$AAt?$AAi?$AAn?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0024c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@OCGMGMDG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  00253	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00259	33 c0		 xor	 eax, eax
$LN22@builtin_or:
  0025b	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  00263	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00267	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0026d	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00272	85 c0		 test	 eax, eax
  00274	75 1c		 jne	 SHORT $LN23@builtin_or
  00276	41 b8 bc 05 00
	00		 mov	 r8d, 1468		; 000005bcH
  0027c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@NKNCFJLO@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAb?$AAl?$AAt?$AAi?$AAn?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00283	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@FLJEABJB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0028a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00290	33 c0		 xor	 eax, eax
$LN23@builtin_or:
  00292	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  0029a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0029d	c1 e8 07	 shr	 eax, 7
  002a0	83 e0 01	 and	 eax, 1
  002a3	85 c0		 test	 eax, eax
  002a5	75 1c		 jne	 SHORT $LN24@builtin_or
  002a7	41 b8 bc 05 00
	00		 mov	 r8d, 1468		; 000005bcH
  002ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@NKNCFJLO@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAb?$AAl?$AAt?$AAi?$AAn?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  002b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@OAEGFPKJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?$AA@
  002bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002c1	33 c0		 xor	 eax, eax
$LN24@builtin_or:
  002c3	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  002cb	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  002ce	c1 e8 02	 shr	 eax, 2
  002d1	83 e0 07	 and	 eax, 7
  002d4	83 f8 01	 cmp	 eax, 1
  002d7	0f 85 54 01 00
	00		 jne	 $LN53@builtin_or
  002dd	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  002e5	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002e9	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  002ef	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  002f4	85 c0		 test	 eax, eax
  002f6	75 1c		 jne	 SHORT $LN25@builtin_or
  002f8	41 b8 bc 05 00
	00		 mov	 r8d, 1468		; 000005bcH
  002fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@NKNCFJLO@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAb?$AAl?$AAt?$AAi?$AAn?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00305	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@FLJEABJB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0030c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00312	33 c0		 xor	 eax, eax
$LN25@builtin_or:
  00314	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  0031c	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0031f	c1 e8 05	 shr	 eax, 5
  00322	83 e0 01	 and	 eax, 1
  00325	85 c0		 test	 eax, eax
  00327	0f 84 b1 00 00
	00		 je	 $LN31@builtin_or
  0032d	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  00335	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00339	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0033f	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00344	85 c0		 test	 eax, eax
  00346	75 1c		 jne	 SHORT $LN26@builtin_or
  00348	41 b8 bc 05 00
	00		 mov	 r8d, 1468		; 000005bcH
  0034e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@NKNCFJLO@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAb?$AAl?$AAt?$AAi?$AAn?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00355	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@FLJEABJB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0035c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00362	33 c0		 xor	 eax, eax
$LN26@builtin_or:
  00364	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  0036c	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0036f	c1 e8 07	 shr	 eax, 7
  00372	83 e0 01	 and	 eax, 1
  00375	85 c0		 test	 eax, eax
  00377	75 1c		 jne	 SHORT $LN27@builtin_or
  00379	41 b8 bc 05 00
	00		 mov	 r8d, 1468		; 000005bcH
  0037f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@NKNCFJLO@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAb?$AAl?$AAt?$AAi?$AAn?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00386	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@OAEGFPKJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0038d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00393	33 c0		 xor	 eax, eax
$LN27@builtin_or:
  00395	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  0039d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003a0	c1 e8 06	 shr	 eax, 6
  003a3	83 e0 01	 and	 eax, 1
  003a6	85 c0		 test	 eax, eax
  003a8	74 15		 je	 SHORT $LN28@builtin_or
  003aa	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  003b2	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  003b8	48 89 44 24 30	 mov	 QWORD PTR tv229[rsp], rax
  003bd	eb 13		 jmp	 SHORT $LN29@builtin_or
$LN28@builtin_or:
  003bf	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  003c7	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  003cd	48 89 44 24 30	 mov	 QWORD PTR tv229[rsp], rax
$LN29@builtin_or:
  003d2	48 8b 44 24 30	 mov	 rax, QWORD PTR tv229[rsp]
  003d7	48 89 44 24 38	 mov	 QWORD PTR tv238[rsp], rax
  003dc	eb 42		 jmp	 SHORT $LN32@builtin_or
$LN31@builtin_or:
  003de	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  003e6	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  003ee	75 1c		 jne	 SHORT $LN30@builtin_or
  003f0	41 b8 bc 05 00
	00		 mov	 r8d, 1468		; 000005bcH
  003f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@NKNCFJLO@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAb?$AAl?$AAt?$AAi?$AAn?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  003fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@FEFAFHBJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
  00404	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0040a	33 c0		 xor	 eax, eax
$LN30@builtin_or:
  0040c	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  00414	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0041b	48 89 44 24 38	 mov	 QWORD PTR tv238[rsp], rax
$LN32@builtin_or:
  00420	48 8b 44 24 38	 mov	 rax, QWORD PTR tv238[rsp]
  00425	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00428	89 44 24 40	 mov	 DWORD PTR tv348[rsp], eax
  0042c	e9 2c 03 00 00	 jmp	 $LN54@builtin_or
$LN53@builtin_or:
  00431	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  00439	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0043d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00443	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00448	85 c0		 test	 eax, eax
  0044a	75 1c		 jne	 SHORT $LN33@builtin_or
  0044c	41 b8 bc 05 00
	00		 mov	 r8d, 1468		; 000005bcH
  00452	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@NKNCFJLO@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAb?$AAl?$AAt?$AAi?$AAn?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00459	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@FLJEABJB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00460	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00466	33 c0		 xor	 eax, eax
$LN33@builtin_or:
  00468	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  00470	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00473	c1 e8 07	 shr	 eax, 7
  00476	83 e0 01	 and	 eax, 1
  00479	85 c0		 test	 eax, eax
  0047b	75 1c		 jne	 SHORT $LN34@builtin_or
  0047d	41 b8 bc 05 00
	00		 mov	 r8d, 1468		; 000005bcH
  00483	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@NKNCFJLO@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAb?$AAl?$AAt?$AAi?$AAn?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0048a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@OAEGFPKJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00491	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00497	33 c0		 xor	 eax, eax
$LN34@builtin_or:
  00499	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  004a1	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  004a4	c1 e8 02	 shr	 eax, 2
  004a7	83 e0 07	 and	 eax, 7
  004aa	83 f8 02	 cmp	 eax, 2
  004ad	0f 85 54 01 00
	00		 jne	 $LN51@builtin_or
  004b3	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  004bb	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004bf	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  004c5	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  004ca	85 c0		 test	 eax, eax
  004cc	75 1c		 jne	 SHORT $LN35@builtin_or
  004ce	41 b8 bc 05 00
	00		 mov	 r8d, 1468		; 000005bcH
  004d4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@NKNCFJLO@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAb?$AAl?$AAt?$AAi?$AAn?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  004db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@FLJEABJB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?$AA@
  004e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004e8	33 c0		 xor	 eax, eax
$LN35@builtin_or:
  004ea	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  004f2	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  004f5	c1 e8 05	 shr	 eax, 5
  004f8	83 e0 01	 and	 eax, 1
  004fb	85 c0		 test	 eax, eax
  004fd	0f 84 b1 00 00
	00		 je	 $LN41@builtin_or
  00503	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  0050b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0050f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00515	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0051a	85 c0		 test	 eax, eax
  0051c	75 1c		 jne	 SHORT $LN36@builtin_or
  0051e	41 b8 bc 05 00
	00		 mov	 r8d, 1468		; 000005bcH
  00524	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@NKNCFJLO@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAb?$AAl?$AAt?$AAi?$AAn?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0052b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@FLJEABJB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00532	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00538	33 c0		 xor	 eax, eax
$LN36@builtin_or:
  0053a	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  00542	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00545	c1 e8 07	 shr	 eax, 7
  00548	83 e0 01	 and	 eax, 1
  0054b	85 c0		 test	 eax, eax
  0054d	75 1c		 jne	 SHORT $LN37@builtin_or
  0054f	41 b8 bc 05 00
	00		 mov	 r8d, 1468		; 000005bcH
  00555	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@NKNCFJLO@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAb?$AAl?$AAt?$AAi?$AAn?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0055c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@OAEGFPKJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00563	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00569	33 c0		 xor	 eax, eax
$LN37@builtin_or:
  0056b	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  00573	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00576	c1 e8 06	 shr	 eax, 6
  00579	83 e0 01	 and	 eax, 1
  0057c	85 c0		 test	 eax, eax
  0057e	74 15		 je	 SHORT $LN38@builtin_or
  00580	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  00588	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  0058e	48 89 44 24 48	 mov	 QWORD PTR tv293[rsp], rax
  00593	eb 13		 jmp	 SHORT $LN39@builtin_or
$LN38@builtin_or:
  00595	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  0059d	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  005a3	48 89 44 24 48	 mov	 QWORD PTR tv293[rsp], rax
$LN39@builtin_or:
  005a8	48 8b 44 24 48	 mov	 rax, QWORD PTR tv293[rsp]
  005ad	48 89 44 24 50	 mov	 QWORD PTR tv302[rsp], rax
  005b2	eb 42		 jmp	 SHORT $LN42@builtin_or
$LN41@builtin_or:
  005b4	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  005bc	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  005c4	75 1c		 jne	 SHORT $LN40@builtin_or
  005c6	41 b8 bc 05 00
	00		 mov	 r8d, 1468		; 000005bcH
  005cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@NKNCFJLO@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAb?$AAl?$AAt?$AAi?$AAn?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  005d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@FEFAFHBJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
  005da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005e0	33 c0		 xor	 eax, eax
$LN40@builtin_or:
  005e2	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  005ea	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  005f1	48 89 44 24 50	 mov	 QWORD PTR tv302[rsp], rax
$LN42@builtin_or:
  005f6	48 8b 44 24 50	 mov	 rax, QWORD PTR tv302[rsp]
  005fb	0f b7 00	 movzx	 eax, WORD PTR [rax]
  005fe	89 44 24 58	 mov	 DWORD PTR tv347[rsp], eax
  00602	e9 4e 01 00 00	 jmp	 $LN52@builtin_or
$LN51@builtin_or:
  00607	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  0060f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00613	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00619	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0061e	85 c0		 test	 eax, eax
  00620	75 1c		 jne	 SHORT $LN43@builtin_or
  00622	41 b8 bc 05 00
	00		 mov	 r8d, 1468		; 000005bcH
  00628	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@NKNCFJLO@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAb?$AAl?$AAt?$AAi?$AAn?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0062f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@FLJEABJB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00636	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0063c	33 c0		 xor	 eax, eax
$LN43@builtin_or:
  0063e	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  00646	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00649	c1 e8 05	 shr	 eax, 5
  0064c	83 e0 01	 and	 eax, 1
  0064f	85 c0		 test	 eax, eax
  00651	0f 84 b1 00 00
	00		 je	 $LN49@builtin_or
  00657	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  0065f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00663	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00669	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0066e	85 c0		 test	 eax, eax
  00670	75 1c		 jne	 SHORT $LN44@builtin_or
  00672	41 b8 bc 05 00
	00		 mov	 r8d, 1468		; 000005bcH
  00678	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@NKNCFJLO@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAb?$AAl?$AAt?$AAi?$AAn?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0067f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@FLJEABJB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00686	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0068c	33 c0		 xor	 eax, eax
$LN44@builtin_or:
  0068e	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  00696	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00699	c1 e8 07	 shr	 eax, 7
  0069c	83 e0 01	 and	 eax, 1
  0069f	85 c0		 test	 eax, eax
  006a1	75 1c		 jne	 SHORT $LN45@builtin_or
  006a3	41 b8 bc 05 00
	00		 mov	 r8d, 1468		; 000005bcH
  006a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@NKNCFJLO@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAb?$AAl?$AAt?$AAi?$AAn?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  006b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@OAEGFPKJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?$AA@
  006b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  006bd	33 c0		 xor	 eax, eax
$LN45@builtin_or:
  006bf	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  006c7	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  006ca	c1 e8 06	 shr	 eax, 6
  006cd	83 e0 01	 and	 eax, 1
  006d0	85 c0		 test	 eax, eax
  006d2	74 15		 je	 SHORT $LN46@builtin_or
  006d4	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  006dc	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  006e2	48 89 44 24 60	 mov	 QWORD PTR tv337[rsp], rax
  006e7	eb 13		 jmp	 SHORT $LN47@builtin_or
$LN46@builtin_or:
  006e9	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  006f1	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  006f7	48 89 44 24 60	 mov	 QWORD PTR tv337[rsp], rax
$LN47@builtin_or:
  006fc	48 8b 44 24 60	 mov	 rax, QWORD PTR tv337[rsp]
  00701	48 89 44 24 68	 mov	 QWORD PTR tv346[rsp], rax
  00706	eb 42		 jmp	 SHORT $LN50@builtin_or
$LN49@builtin_or:
  00708	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  00710	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00718	75 1c		 jne	 SHORT $LN48@builtin_or
  0071a	41 b8 bc 05 00
	00		 mov	 r8d, 1468		; 000005bcH
  00720	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@NKNCFJLO@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAb?$AAl?$AAt?$AAi?$AAn?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00727	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@FEFAFHBJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
  0072e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00734	33 c0		 xor	 eax, eax
$LN48@builtin_or:
  00736	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  0073e	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00745	48 89 44 24 68	 mov	 QWORD PTR tv346[rsp], rax
$LN50@builtin_or:
  0074a	48 8b 44 24 68	 mov	 rax, QWORD PTR tv346[rsp]
  0074f	8b 00		 mov	 eax, DWORD PTR [rax]
  00751	89 44 24 58	 mov	 DWORD PTR tv347[rsp], eax
$LN52@builtin_or:
  00755	8b 44 24 58	 mov	 eax, DWORD PTR tv347[rsp]
  00759	89 44 24 40	 mov	 DWORD PTR tv348[rsp], eax
$LN54@builtin_or:
  0075d	8b 44 24 40	 mov	 eax, DWORD PTR tv348[rsp]
  00761	89 44 24 28	 mov	 DWORD PTR ord$[rsp], eax

; 1469 :             return PyLong_FromLong(ord);

  00765	8b 4c 24 28	 mov	 ecx, DWORD PTR ord$[rsp]
  00769	e8 00 00 00 00	 call	 PyLong_FromLong
  0076e	e9 7c 01 00 00	 jmp	 $LN12@builtin_or
$LN6@builtin_or:

; 1470 :         }

  00773	e9 5d 01 00 00	 jmp	 $LN5@builtin_or
$LN8@builtin_or:

; 1471 :     }
; 1472 :     else if (PyByteArray_Check(obj)) {

  00778	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyByteArray_Type
  0077f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00787	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0078b	74 20		 je	 SHORT $LN3@builtin_or
  0078d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyByteArray_Type
  00794	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  0079c	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  007a0	e8 00 00 00 00	 call	 PyType_IsSubtype
  007a5	85 c0		 test	 eax, eax
  007a7	0f 84 01 01 00
	00		 je	 $LN4@builtin_or
$LN3@builtin_or:

; 1473 :         /* XXX Hopefully this is temporary */
; 1474 :         size = PyByteArray_GET_SIZE(obj);

  007ad	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyByteArray_Type
  007b4	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  007bc	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  007c0	74 38		 je	 SHORT $LN55@builtin_or
  007c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyByteArray_Type
  007c9	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  007d1	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  007d5	e8 00 00 00 00	 call	 PyType_IsSubtype
  007da	85 c0		 test	 eax, eax
  007dc	75 1c		 jne	 SHORT $LN55@builtin_or
  007de	41 b8 c2 05 00
	00		 mov	 r8d, 1474		; 000005c2H
  007e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@NKNCFJLO@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAb?$AAl?$AAt?$AAi?$AAn?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  007eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@PHBFBFIE@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  007f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  007f8	33 c0		 xor	 eax, eax
$LN55@builtin_or:
  007fa	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  00802	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00806	48 89 44 24 20	 mov	 QWORD PTR size$[rsp], rax

; 1475 :         if (size == 1) {

  0080b	48 83 7c 24 20
	01		 cmp	 QWORD PTR size$[rsp], 1
  00811	0f 85 95 00 00
	00		 jne	 $LN2@builtin_or

; 1476 :             ord = (long)((unsigned char)*PyByteArray_AS_STRING(obj));

  00817	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyByteArray_Type
  0081e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00826	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0082a	74 38		 je	 SHORT $LN56@builtin_or
  0082c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyByteArray_Type
  00833	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  0083b	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0083f	e8 00 00 00 00	 call	 PyType_IsSubtype
  00844	85 c0		 test	 eax, eax
  00846	75 1c		 jne	 SHORT $LN56@builtin_or
  00848	41 b8 c4 05 00
	00		 mov	 r8d, 1476		; 000005c4H
  0084e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@NKNCFJLO@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAb?$AAl?$AAt?$AAi?$AAn?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00855	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@PHBFBFIE@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  0085c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00862	33 c0		 xor	 eax, eax
$LN56@builtin_or:
  00864	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  0086c	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00871	74 16		 je	 SHORT $LN57@builtin_or
  00873	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  0087b	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00882	48 89 44 24 70	 mov	 QWORD PTR tv385[rsp], rax
  00887	eb 0c		 jmp	 SHORT $LN58@builtin_or
$LN57@builtin_or:
  00889	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyByteArray_empty_string
  00890	48 89 44 24 70	 mov	 QWORD PTR tv385[rsp], rax
$LN58@builtin_or:
  00895	48 8b 44 24 70	 mov	 rax, QWORD PTR tv385[rsp]
  0089a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0089d	89 44 24 28	 mov	 DWORD PTR ord$[rsp], eax

; 1477 :             return PyLong_FromLong(ord);

  008a1	8b 4c 24 28	 mov	 ecx, DWORD PTR ord$[rsp]
  008a5	e8 00 00 00 00	 call	 PyLong_FromLong
  008aa	eb 43		 jmp	 SHORT $LN12@builtin_or
$LN2@builtin_or:

; 1478 :         }
; 1479 :     }
; 1480 :     else {

  008ac	eb 27		 jmp	 SHORT $LN1@builtin_or
$LN4@builtin_or:

; 1481 :         PyErr_Format(PyExc_TypeError,
; 1482 :                      "ord() expected string of length 1, but " \
; 1483 :                      "%.200s found", obj->ob_type->tp_name);

  008ae	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  008b6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  008ba	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  008be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@ILLPAPAN@ord?$CI?$CJ?5expected?5string?5of?5length?5@
  008c5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  008cc	e8 00 00 00 00	 call	 PyErr_Format

; 1484 :         return NULL;

  008d1	33 c0		 xor	 eax, eax
  008d3	eb 1a		 jmp	 SHORT $LN12@builtin_or
$LN1@builtin_or:
$LN5@builtin_or:
$LN9@builtin_or:

; 1485 :     }
; 1486 : 
; 1487 :     PyErr_Format(PyExc_TypeError,
; 1488 :                  "ord() expected a character, "
; 1489 :                  "but string of length %zd found",
; 1490 :                  size);

  008d5	4c 8b 44 24 20	 mov	 r8, QWORD PTR size$[rsp]
  008da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DL@BFJOGDAJ@ord?$CI?$CJ?5expected?5a?5character?0?5but?5@
  008e1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  008e8	e8 00 00 00 00	 call	 PyErr_Format

; 1491 :     return NULL;

  008ed	33 c0		 xor	 eax, eax
$LN12@builtin_or:

; 1492 : }

  008ef	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  008f6	c3		 ret	 0
builtin_ord ENDP
_TEXT	ENDS
EXTRN	PyNumber_Power:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_pow DD imagerel builtin_pow
	DD	imagerel builtin_pow+118
	DD	imagerel $unwind$builtin_pow
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_pow DD 010e01H
	DD	0c20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT builtin_pow
_TEXT	SEGMENT
w$ = 64
v$ = 72
z$ = 80
self$ = 112
args$ = 120
builtin_pow PROC					; COMDAT

; 1503 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1504 :     PyObject *v, *w, *z = Py_None;

  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00015	48 89 44 24 50	 mov	 QWORD PTR z$[rsp], rax

; 1505 : 
; 1506 :     if (!PyArg_UnpackTuple(args, "pow", 2, 3, &v, &w, &z))

  0001a	48 8d 44 24 50	 lea	 rax, QWORD PTR z$[rsp]
  0001f	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00024	48 8d 44 24 40	 lea	 rax, QWORD PTR w$[rsp]
  00029	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0002e	48 8d 44 24 48	 lea	 rax, QWORD PTR v$[rsp]
  00033	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00038	41 b9 03 00 00
	00		 mov	 r9d, 3
  0003e	41 b8 02 00 00
	00		 mov	 r8d, 2
  00044	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03JGHBODFD@pow?$AA@
  0004b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  00050	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00055	85 c0		 test	 eax, eax
  00057	75 04		 jne	 SHORT $LN1@builtin_po

; 1507 :         return NULL;

  00059	33 c0		 xor	 eax, eax
  0005b	eb 14		 jmp	 SHORT $LN2@builtin_po
$LN1@builtin_po:

; 1508 :     return PyNumber_Power(v, w, z);

  0005d	4c 8b 44 24 50	 mov	 r8, QWORD PTR z$[rsp]
  00062	48 8b 54 24 40	 mov	 rdx, QWORD PTR w$[rsp]
  00067	48 8b 4c 24 48	 mov	 rcx, QWORD PTR v$[rsp]
  0006c	e8 00 00 00 00	 call	 PyNumber_Power
$LN2@builtin_po:

; 1509 : }

  00071	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00075	c3		 ret	 0
builtin_pow ENDP
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_01CLKCMJKC@?5?$AA@			; `string'
PUBLIC	??_C@_0CJ@CLAGNOLJ@end?5must?5be?5None?5or?5a?5string?0?5no@ ; `string'
PUBLIC	??_C@_0CJ@OODJDJCA@sep?5must?5be?5None?5or?5a?5string?0?5no@ ; `string'
PUBLIC	??_C@_06DJDOIFHB@stdout?$AA@			; `string'
PUBLIC	??_C@_0M@LFOKPOFF@?$HMOOOO?3print?$AA@		; `string'
EXTRN	PyObject_CallMethod:PROC
EXTRN	PyTuple_GetItem:PROC
EXTRN	PyFile_WriteObject:PROC
EXTRN	PyFile_WriteString:PROC
EXTRN	PySys_GetObject:PROC
_BSS	SEGMENT
?dummy_args@?1??builtin_print@@9@9 DQ 01H DUP (?)	; `builtin_print'::`2'::dummy_args
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_print DD imagerel builtin_print
	DD	imagerel builtin_print+839
	DD	imagerel $unwind$builtin_print
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_print DD 021601H
	DD	0110116H
xdata	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5?$AA@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@CLAGNOLJ@end?5must?5be?5None?5or?5a?5string?0?5no@
CONST	SEGMENT
??_C@_0CJ@CLAGNOLJ@end?5must?5be?5None?5or?5a?5string?0?5no@ DB 'end must'
	DB	' be None or a string, not %.200s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@OODJDJCA@sep?5must?5be?5None?5or?5a?5string?0?5no@
CONST	SEGMENT
??_C@_0CJ@OODJDJCA@sep?5must?5be?5None?5or?5a?5string?0?5no@ DB 'sep must'
	DB	' be None or a string, not %.200s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06DJDOIFHB@stdout?$AA@
CONST	SEGMENT
??_C@_06DJDOIFHB@stdout?$AA@ DB 'stdout', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LFOKPOFF@?$HMOOOO?3print?$AA@
CONST	SEGMENT
??_C@_0M@LFOKPOFF@?$HMOOOO?3print?$AA@ DB '|OOOO:print', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT builtin_print
_TEXT	SEGMENT
i$ = 64
flush$ = 72
file$ = 80
end$ = 88
sep$ = 96
err$ = 104
do_flush$22802 = 108
tmp$22801 = 112
tv139 = 120
self$ = 144
args$ = 152
kwds$ = 160
builtin_print PROC					; COMDAT

; 1521 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 1522 :     static char *kwlist[] = {"sep", "end", "file", "flush", 0};
; 1523 :     static PyObject *dummy_args;
; 1524 :     PyObject *sep = NULL, *end = NULL, *file = NULL, *flush = NULL;

  00016	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR sep$[rsp], 0
  0001f	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR end$[rsp], 0
  00028	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR file$[rsp], 0
  00031	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR flush$[rsp], 0

; 1525 :     int i, err;
; 1526 : 
; 1527 :     if (dummy_args == NULL && !(dummy_args = PyTuple_New(0)))

  0003a	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?dummy_args@?1??builtin_print@@9@9, 0
  00042	75 1f		 jne	 SHORT $LN28@builtin_pr
  00044	33 c9		 xor	 ecx, ecx
  00046	e8 00 00 00 00	 call	 PyTuple_New
  0004b	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?dummy_args@?1??builtin_print@@9@9, rax
  00052	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?dummy_args@?1??builtin_print@@9@9, 0
  0005a	75 07		 jne	 SHORT $LN28@builtin_pr

; 1528 :         return NULL;

  0005c	33 c0		 xor	 eax, eax
  0005e	e9 dc 02 00 00	 jmp	 $LN29@builtin_pr
$LN28@builtin_pr:

; 1529 :     if (!PyArg_ParseTupleAndKeywords(dummy_args, kwds, "|OOOO:print",
; 1530 :                                      kwlist, &sep, &end, &file, &flush))

  00063	48 8d 44 24 48	 lea	 rax, QWORD PTR flush$[rsp]
  00068	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0006d	48 8d 44 24 50	 lea	 rax, QWORD PTR file$[rsp]
  00072	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00077	48 8d 44 24 58	 lea	 rax, QWORD PTR end$[rsp]
  0007c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00081	48 8d 44 24 60	 lea	 rax, QWORD PTR sep$[rsp]
  00086	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0008b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??builtin_print@@9@9
  00092	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@LFOKPOFF@?$HMOOOO?3print?$AA@
  00099	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  000a1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?dummy_args@?1??builtin_print@@9@9
  000a8	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  000ad	85 c0		 test	 eax, eax
  000af	75 07		 jne	 SHORT $LN27@builtin_pr

; 1531 :         return NULL;

  000b1	33 c0		 xor	 eax, eax
  000b3	e9 87 02 00 00	 jmp	 $LN29@builtin_pr
$LN27@builtin_pr:

; 1532 :     if (file == NULL || file == Py_None) {

  000b8	48 83 7c 24 50
	00		 cmp	 QWORD PTR file$[rsp], 0
  000be	74 0e		 je	 SHORT $LN25@builtin_pr
  000c0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000c7	48 39 44 24 50	 cmp	 QWORD PTR file$[rsp], rax
  000cc	75 37		 jne	 SHORT $LN26@builtin_pr
$LN25@builtin_pr:

; 1533 :         file = PySys_GetObject("stdout");

  000ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06DJDOIFHB@stdout?$AA@
  000d5	e8 00 00 00 00	 call	 PySys_GetObject
  000da	48 89 44 24 50	 mov	 QWORD PTR file$[rsp], rax

; 1534 :         /* sys.stdout may be None when FILE* stdout isn't connected */
; 1535 :         if (file == Py_None)

  000df	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000e6	48 39 44 24 50	 cmp	 QWORD PTR file$[rsp], rax
  000eb	75 18		 jne	 SHORT $LN24@builtin_pr

; 1536 :             Py_RETURN_NONE;

  000ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000f4	e8 00 00 00 00	 call	 _Py_IncRef
  000f9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00100	e9 3a 02 00 00	 jmp	 $LN29@builtin_pr
$LN24@builtin_pr:
$LN26@builtin_pr:

; 1537 :     }
; 1538 : 
; 1539 :     if (sep == Py_None) {

  00105	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0010c	48 39 44 24 60	 cmp	 QWORD PTR sep$[rsp], rax
  00111	75 0b		 jne	 SHORT $LN23@builtin_pr

; 1540 :         sep = NULL;

  00113	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR sep$[rsp], 0
  0011c	eb 47		 jmp	 SHORT $LN22@builtin_pr
$LN23@builtin_pr:

; 1541 :     }
; 1542 :     else if (sep && !PyUnicode_Check(sep)) {

  0011e	48 83 7c 24 60
	00		 cmp	 QWORD PTR sep$[rsp], 0
  00124	74 3f		 je	 SHORT $LN21@builtin_pr
  00126	48 8b 44 24 60	 mov	 rax, QWORD PTR sep$[rsp]
  0012b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0012f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00135	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0013a	85 c0		 test	 eax, eax
  0013c	75 27		 jne	 SHORT $LN21@builtin_pr

; 1543 :         PyErr_Format(PyExc_TypeError,
; 1544 :                      "sep must be None or a string, not %.200s",
; 1545 :                      sep->ob_type->tp_name);

  0013e	48 8b 44 24 60	 mov	 rax, QWORD PTR sep$[rsp]
  00143	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00147	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0014b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@OODJDJCA@sep?5must?5be?5None?5or?5a?5string?0?5no@
  00152	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00159	e8 00 00 00 00	 call	 PyErr_Format

; 1546 :         return NULL;

  0015e	33 c0		 xor	 eax, eax
  00160	e9 da 01 00 00	 jmp	 $LN29@builtin_pr
$LN21@builtin_pr:
$LN22@builtin_pr:

; 1547 :     }
; 1548 :     if (end == Py_None) {

  00165	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0016c	48 39 44 24 58	 cmp	 QWORD PTR end$[rsp], rax
  00171	75 0b		 jne	 SHORT $LN20@builtin_pr

; 1549 :         end = NULL;

  00173	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR end$[rsp], 0
  0017c	eb 47		 jmp	 SHORT $LN19@builtin_pr
$LN20@builtin_pr:

; 1550 :     }
; 1551 :     else if (end && !PyUnicode_Check(end)) {

  0017e	48 83 7c 24 58
	00		 cmp	 QWORD PTR end$[rsp], 0
  00184	74 3f		 je	 SHORT $LN18@builtin_pr
  00186	48 8b 44 24 58	 mov	 rax, QWORD PTR end$[rsp]
  0018b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0018f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00195	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0019a	85 c0		 test	 eax, eax
  0019c	75 27		 jne	 SHORT $LN18@builtin_pr

; 1552 :         PyErr_Format(PyExc_TypeError,
; 1553 :                      "end must be None or a string, not %.200s",
; 1554 :                      end->ob_type->tp_name);

  0019e	48 8b 44 24 58	 mov	 rax, QWORD PTR end$[rsp]
  001a3	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001a7	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  001ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@CLAGNOLJ@end?5must?5be?5None?5or?5a?5string?0?5no@
  001b2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  001b9	e8 00 00 00 00	 call	 PyErr_Format

; 1555 :         return NULL;

  001be	33 c0		 xor	 eax, eax
  001c0	e9 7a 01 00 00	 jmp	 $LN29@builtin_pr
$LN18@builtin_pr:
$LN19@builtin_pr:

; 1556 :     }
; 1557 : 
; 1558 :     for (i = 0; i < PyTuple_Size(args); i++) {

  001c5	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  001cd	eb 0a		 jmp	 SHORT $LN17@builtin_pr
$LN16@builtin_pr:
  001cf	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  001d3	ff c0		 inc	 eax
  001d5	89 44 24 40	 mov	 DWORD PTR i$[rsp], eax
$LN17@builtin_pr:
  001d9	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  001de	48 89 44 24 78	 mov	 QWORD PTR tv139[rsp], rax
  001e3	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  001eb	e8 00 00 00 00	 call	 PyTuple_Size
  001f0	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv139[rsp]
  001f5	48 3b c8	 cmp	 rcx, rax
  001f8	0f 8d 8c 00 00
	00		 jge	 $LN15@builtin_pr

; 1559 :         if (i > 0) {

  001fe	83 7c 24 40 00	 cmp	 DWORD PTR i$[rsp], 0
  00203	7e 46		 jle	 SHORT $LN14@builtin_pr

; 1560 :             if (sep == NULL)

  00205	48 83 7c 24 60
	00		 cmp	 QWORD PTR sep$[rsp], 0
  0020b	75 17		 jne	 SHORT $LN13@builtin_pr

; 1561 :                 err = PyFile_WriteString(" ", file);

  0020d	48 8b 54 24 50	 mov	 rdx, QWORD PTR file$[rsp]
  00212	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01CLKCMJKC@?5?$AA@
  00219	e8 00 00 00 00	 call	 PyFile_WriteString
  0021e	89 44 24 68	 mov	 DWORD PTR err$[rsp], eax

; 1562 :             else

  00222	eb 19		 jmp	 SHORT $LN12@builtin_pr
$LN13@builtin_pr:

; 1563 :                 err = PyFile_WriteObject(sep, file,
; 1564 :                                          Py_PRINT_RAW);

  00224	41 b8 01 00 00
	00		 mov	 r8d, 1
  0022a	48 8b 54 24 50	 mov	 rdx, QWORD PTR file$[rsp]
  0022f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR sep$[rsp]
  00234	e8 00 00 00 00	 call	 PyFile_WriteObject
  00239	89 44 24 68	 mov	 DWORD PTR err$[rsp], eax
$LN12@builtin_pr:

; 1565 :             if (err)

  0023d	83 7c 24 68 00	 cmp	 DWORD PTR err$[rsp], 0
  00242	74 07		 je	 SHORT $LN11@builtin_pr

; 1566 :                 return NULL;

  00244	33 c0		 xor	 eax, eax
  00246	e9 f4 00 00 00	 jmp	 $LN29@builtin_pr
$LN11@builtin_pr:
$LN14@builtin_pr:

; 1567 :         }
; 1568 :         err = PyFile_WriteObject(PyTuple_GetItem(args, i), file,
; 1569 :                                  Py_PRINT_RAW);

  0024b	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  00250	48 8b d0	 mov	 rdx, rax
  00253	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0025b	e8 00 00 00 00	 call	 PyTuple_GetItem
  00260	41 b8 01 00 00
	00		 mov	 r8d, 1
  00266	48 8b 54 24 50	 mov	 rdx, QWORD PTR file$[rsp]
  0026b	48 8b c8	 mov	 rcx, rax
  0026e	e8 00 00 00 00	 call	 PyFile_WriteObject
  00273	89 44 24 68	 mov	 DWORD PTR err$[rsp], eax

; 1570 :         if (err)

  00277	83 7c 24 68 00	 cmp	 DWORD PTR err$[rsp], 0
  0027c	74 07		 je	 SHORT $LN10@builtin_pr

; 1571 :             return NULL;

  0027e	33 c0		 xor	 eax, eax
  00280	e9 ba 00 00 00	 jmp	 $LN29@builtin_pr
$LN10@builtin_pr:

; 1572 :     }

  00285	e9 45 ff ff ff	 jmp	 $LN16@builtin_pr
$LN15@builtin_pr:

; 1573 : 
; 1574 :     if (end == NULL)

  0028a	48 83 7c 24 58
	00		 cmp	 QWORD PTR end$[rsp], 0
  00290	75 17		 jne	 SHORT $LN9@builtin_pr

; 1575 :         err = PyFile_WriteString("\n", file);

  00292	48 8b 54 24 50	 mov	 rdx, QWORD PTR file$[rsp]
  00297	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  0029e	e8 00 00 00 00	 call	 PyFile_WriteString
  002a3	89 44 24 68	 mov	 DWORD PTR err$[rsp], eax

; 1576 :     else

  002a7	eb 19		 jmp	 SHORT $LN8@builtin_pr
$LN9@builtin_pr:

; 1577 :         err = PyFile_WriteObject(end, file, Py_PRINT_RAW);

  002a9	41 b8 01 00 00
	00		 mov	 r8d, 1
  002af	48 8b 54 24 50	 mov	 rdx, QWORD PTR file$[rsp]
  002b4	48 8b 4c 24 58	 mov	 rcx, QWORD PTR end$[rsp]
  002b9	e8 00 00 00 00	 call	 PyFile_WriteObject
  002be	89 44 24 68	 mov	 DWORD PTR err$[rsp], eax
$LN8@builtin_pr:

; 1578 :     if (err)

  002c2	83 7c 24 68 00	 cmp	 DWORD PTR err$[rsp], 0
  002c7	74 04		 je	 SHORT $LN7@builtin_pr

; 1579 :         return NULL;

  002c9	33 c0		 xor	 eax, eax
  002cb	eb 72		 jmp	 SHORT $LN29@builtin_pr
$LN7@builtin_pr:

; 1580 : 
; 1581 :     if (flush != NULL) {

  002cd	48 83 7c 24 48
	00		 cmp	 QWORD PTR flush$[rsp], 0
  002d3	74 57		 je	 SHORT $LN6@builtin_pr

; 1582 :         PyObject *tmp;
; 1583 :         int do_flush = PyObject_IsTrue(flush);

  002d5	48 8b 4c 24 48	 mov	 rcx, QWORD PTR flush$[rsp]
  002da	e8 00 00 00 00	 call	 PyObject_IsTrue
  002df	89 44 24 6c	 mov	 DWORD PTR do_flush$22802[rsp], eax

; 1584 :         if (do_flush == -1)

  002e3	83 7c 24 6c ff	 cmp	 DWORD PTR do_flush$22802[rsp], -1
  002e8	75 06		 jne	 SHORT $LN5@builtin_pr

; 1585 :             return NULL;

  002ea	33 c0		 xor	 eax, eax
  002ec	eb 51		 jmp	 SHORT $LN29@builtin_pr
  002ee	eb 3c		 jmp	 SHORT $LN4@builtin_pr
$LN5@builtin_pr:

; 1586 :         else if (do_flush) {

  002f0	83 7c 24 6c 00	 cmp	 DWORD PTR do_flush$22802[rsp], 0
  002f5	74 35		 je	 SHORT $LN3@builtin_pr

; 1587 :             tmp = PyObject_CallMethod(file, "flush", "");

  002f7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  002fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05GLCAEPFP@flush?$AA@
  00305	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  0030a	e8 00 00 00 00	 call	 PyObject_CallMethod
  0030f	48 89 44 24 70	 mov	 QWORD PTR tmp$22801[rsp], rax

; 1588 :             if (tmp == NULL)

  00314	48 83 7c 24 70
	00		 cmp	 QWORD PTR tmp$22801[rsp], 0
  0031a	75 06		 jne	 SHORT $LN2@builtin_pr

; 1589 :                 return NULL;

  0031c	33 c0		 xor	 eax, eax
  0031e	eb 1f		 jmp	 SHORT $LN29@builtin_pr

; 1590 :             else

  00320	eb 0a		 jmp	 SHORT $LN1@builtin_pr
$LN2@builtin_pr:

; 1591 :                 Py_DECREF(tmp);

  00322	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tmp$22801[rsp]
  00327	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@builtin_pr:
$LN3@builtin_pr:
$LN4@builtin_pr:
$LN6@builtin_pr:

; 1592 :         }
; 1593 :     }
; 1594 : 
; 1595 :     Py_RETURN_NONE;

  0032c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00333	e8 00 00 00 00	 call	 _Py_IncRef
  00338	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN29@builtin_pr:

; 1596 : }

  0033f	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00346	c3		 ret	 0
builtin_print ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@KBDILNFI@input?3?5input?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_0O@GPCIEIOM@builtin_input?$AA@		; `string'
PUBLIC	??_C@_0BJ@NBIALAPJ@input?$CI?$CJ?3?5lost?5sys?4stderr?$AA@ ; `string'
PUBLIC	??_C@_0BJ@ONCIOBJO@input?$CI?$CJ?3?5lost?5sys?4stdout?$AA@ ; `string'
PUBLIC	??_C@_0BI@GKLBLMIN@input?$CI?$CJ?3?5lost?5sys?4stdin?$AA@ ; `string'
PUBLIC	??_C@_06FJGNEBG@stderr?$AA@			; `string'
PUBLIC	??_C@_05MHOFLBOO@stdin?$AA@			; `string'
EXTRN	PyFile_GetLine:PROC
EXTRN	_PyMem_DebugFree:PROC
EXTRN	_PxMem_Free:PROC
EXTRN	PyUnicode_Decode:PROC
EXTRN	PyExc_OverflowError:QWORD
EXTRN	PyExc_EOFError:QWORD
EXTRN	PyExc_KeyboardInterrupt:QWORD
EXTRN	PyErr_CheckSignals:PROC
EXTRN	PyOS_Readline:PROC
EXTRN	PyBytes_AsString:PROC
EXTRN	PyUnicode_AsEncodedString:PROC
EXTRN	PyObject_Str:PROC
EXTRN	PyUnicode_AsUTF8:PROC
EXTRN	__imp_isatty:PROC
EXTRN	__imp_fileno:PROC
EXTRN	__imp___iob_func:PROC
EXTRN	PyLong_AsLong:PROC
EXTRN	_PyObject_CallMethodId:PROC
EXTRN	PyExc_RuntimeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_input DD imagerel builtin_input
	DD	imagerel builtin_input+2438
	DD	imagerel $unwind$builtin_input
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_input DD 021101H
	DD	0230111H
xdata	ENDS
;	COMDAT ??_C@_0BG@KBDILNFI@input?3?5input?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BG@KBDILNFI@input?3?5input?5too?5long?$AA@ DB 'input: input too lo'
	DB	'ng', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GPCIEIOM@builtin_input?$AA@
CONST	SEGMENT
??_C@_0O@GPCIEIOM@builtin_input?$AA@ DB 'builtin_input', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NBIALAPJ@input?$CI?$CJ?3?5lost?5sys?4stderr?$AA@
CONST	SEGMENT
??_C@_0BJ@NBIALAPJ@input?$CI?$CJ?3?5lost?5sys?4stderr?$AA@ DB 'input(): l'
	DB	'ost sys.stderr', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@ONCIOBJO@input?$CI?$CJ?3?5lost?5sys?4stdout?$AA@
CONST	SEGMENT
??_C@_0BJ@ONCIOBJO@input?$CI?$CJ?3?5lost?5sys?4stdout?$AA@ DB 'input(): l'
	DB	'ost sys.stdout', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GKLBLMIN@input?$CI?$CJ?3?5lost?5sys?4stdin?$AA@
CONST	SEGMENT
??_C@_0BI@GKLBLMIN@input?$CI?$CJ?3?5lost?5sys?4stdin?$AA@ DB 'input(): lo'
	DB	'st sys.stdin', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06FJGNEBG@stderr?$AA@
CONST	SEGMENT
??_C@_06FJGNEBG@stderr?$AA@ DB 'stderr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MHOFLBOO@stdin?$AA@
CONST	SEGMENT
??_C@_05MHOFLBOO@stdin?$AA@ DB 'stdin', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT builtin_input
_TEXT	SEGMENT
ferr$ = 48
tmp$ = 56
fin$ = 64
tty$ = 72
promptarg$ = 80
fd$ = 88
fout$ = 96
stdin_encoding$22872 = 104
stdout_errors$22878 = 112
s$22870 = 120
len$22883 = 128
stdout_encoding$22876 = 136
po$22867 = 144
result$22882 = 152
stdin_errors_str$22881 = 160
stdin_errors$22874 = 168
prompt$22869 = 176
stdin_encoding_str$22880 = 184
stringpo$22903 = 192
stdout_encoding_str$22901 = 200
stdout_errors_str$22902 = 208
_py_tmp$22915 = 216
_py_tmp$22923 = 224
_py_tmp$22931 = 232
tv157 = 240
tv184 = 244
tv295 = 248
tv331 = 256
self$ = 288
args$ = 296
builtin_input PROC					; COMDAT

; 1611 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H

; 1612 :     PyObject *promptarg = NULL;

  00011	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR promptarg$[rsp], 0

; 1613 :     PyObject *fin = PySys_GetObject("stdin");

  0001a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05MHOFLBOO@stdin?$AA@
  00021	e8 00 00 00 00	 call	 PySys_GetObject
  00026	48 89 44 24 40	 mov	 QWORD PTR fin$[rsp], rax

; 1614 :     PyObject *fout = PySys_GetObject("stdout");

  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06DJDOIFHB@stdout?$AA@
  00032	e8 00 00 00 00	 call	 PySys_GetObject
  00037	48 89 44 24 60	 mov	 QWORD PTR fout$[rsp], rax

; 1615 :     PyObject *ferr = PySys_GetObject("stderr");

  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FJGNEBG@stderr?$AA@
  00043	e8 00 00 00 00	 call	 PySys_GetObject
  00048	48 89 44 24 30	 mov	 QWORD PTR ferr$[rsp], rax

; 1616 :     PyObject *tmp;
; 1617 :     long fd;
; 1618 :     int tty;
; 1619 : 
; 1620 :     /* Parse arguments */
; 1621 :     if (!PyArg_UnpackTuple(args, "input", 0, 1, &promptarg))

  0004d	48 8d 44 24 50	 lea	 rax, QWORD PTR promptarg$[rsp]
  00052	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00057	41 b9 01 00 00
	00		 mov	 r9d, 1
  0005d	45 33 c0	 xor	 r8d, r8d
  00060	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05DFJCHPDH@input?$AA@
  00067	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0006f	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00074	85 c0		 test	 eax, eax
  00076	75 07		 jne	 SHORT $LN79@builtin_in

; 1622 :         return NULL;

  00078	33 c0		 xor	 eax, eax
  0007a	e9 ff 08 00 00	 jmp	 $LN80@builtin_in
$LN79@builtin_in:

; 1623 : 
; 1624 :     /* Check that stdin/out/err are intact */
; 1625 :     if (fin == NULL || fin == Py_None) {

  0007f	48 83 7c 24 40
	00		 cmp	 QWORD PTR fin$[rsp], 0
  00085	74 0e		 je	 SHORT $LN77@builtin_in
  00087	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0008e	48 39 44 24 40	 cmp	 QWORD PTR fin$[rsp], rax
  00093	75 1a		 jne	 SHORT $LN78@builtin_in
$LN77@builtin_in:

; 1626 :         PyErr_SetString(PyExc_RuntimeError,
; 1627 :                         "input(): lost sys.stdin");

  00095	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@GKLBLMIN@input?$CI?$CJ?3?5lost?5sys?4stdin?$AA@
  0009c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  000a3	e8 00 00 00 00	 call	 PyErr_SetString

; 1628 :         return NULL;

  000a8	33 c0		 xor	 eax, eax
  000aa	e9 cf 08 00 00	 jmp	 $LN80@builtin_in
$LN78@builtin_in:

; 1629 :     }
; 1630 :     if (fout == NULL || fout == Py_None) {

  000af	48 83 7c 24 60
	00		 cmp	 QWORD PTR fout$[rsp], 0
  000b5	74 0e		 je	 SHORT $LN75@builtin_in
  000b7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000be	48 39 44 24 60	 cmp	 QWORD PTR fout$[rsp], rax
  000c3	75 1a		 jne	 SHORT $LN76@builtin_in
$LN75@builtin_in:

; 1631 :         PyErr_SetString(PyExc_RuntimeError,
; 1632 :                         "input(): lost sys.stdout");

  000c5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@ONCIOBJO@input?$CI?$CJ?3?5lost?5sys?4stdout?$AA@
  000cc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  000d3	e8 00 00 00 00	 call	 PyErr_SetString

; 1633 :         return NULL;

  000d8	33 c0		 xor	 eax, eax
  000da	e9 9f 08 00 00	 jmp	 $LN80@builtin_in
$LN76@builtin_in:

; 1634 :     }
; 1635 :     if (ferr == NULL || ferr == Py_None) {

  000df	48 83 7c 24 30
	00		 cmp	 QWORD PTR ferr$[rsp], 0
  000e5	74 0e		 je	 SHORT $LN73@builtin_in
  000e7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000ee	48 39 44 24 30	 cmp	 QWORD PTR ferr$[rsp], rax
  000f3	75 1a		 jne	 SHORT $LN74@builtin_in
$LN73@builtin_in:

; 1636 :         PyErr_SetString(PyExc_RuntimeError,
; 1637 :                         "input(): lost sys.stderr");

  000f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NBIALAPJ@input?$CI?$CJ?3?5lost?5sys?4stderr?$AA@
  000fc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00103	e8 00 00 00 00	 call	 PyErr_SetString

; 1638 :         return NULL;

  00108	33 c0		 xor	 eax, eax
  0010a	e9 6f 08 00 00	 jmp	 $LN80@builtin_in
$LN74@builtin_in:

; 1639 :     }
; 1640 : 
; 1641 :     /* First of all, flush stderr */
; 1642 :     tmp = _PyObject_CallMethodId(ferr, &PyId_flush, "");

  0010f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_flush
  00114	8b c0		 mov	 eax, eax
  00116	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0011c	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00125	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00129	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00130	48 8b d0	 mov	 rdx, rax
  00133	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ferr$[rsp]
  00138	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  0013d	48 89 44 24 38	 mov	 QWORD PTR tmp$[rsp], rax

; 1643 :     if (tmp == NULL)

  00142	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00148	75 07		 jne	 SHORT $LN72@builtin_in

; 1644 :         PyErr_Clear();

  0014a	e8 00 00 00 00	 call	 PyErr_Clear

; 1645 :     else

  0014f	eb 0a		 jmp	 SHORT $LN71@builtin_in
$LN72@builtin_in:

; 1646 :         Py_DECREF(tmp);

  00151	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tmp$[rsp]
  00156	e8 00 00 00 00	 call	 _Py_DecRef
$LN71@builtin_in:

; 1647 : 
; 1648 :     /* We should only use (GNU) readline if Python's sys.stdin and
; 1649 :        sys.stdout are the same as C's stdin and stdout, because we
; 1650 :        need to pass it those. */
; 1651 :     tmp = _PyObject_CallMethodId(fin, &PyId_fileno, "");

  0015b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_fileno
  00160	8b c0		 mov	 eax, eax
  00162	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00168	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00171	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00175	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0017c	48 8b d0	 mov	 rdx, rax
  0017f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR fin$[rsp]
  00184	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  00189	48 89 44 24 38	 mov	 QWORD PTR tmp$[rsp], rax

; 1652 :     if (tmp == NULL) {

  0018e	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00194	75 0f		 jne	 SHORT $LN70@builtin_in

; 1653 :         PyErr_Clear();

  00196	e8 00 00 00 00	 call	 PyErr_Clear

; 1654 :         tty = 0;

  0019b	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tty$[rsp], 0

; 1655 :     }
; 1656 :     else {

  001a3	eb 76		 jmp	 SHORT $LN69@builtin_in
$LN70@builtin_in:

; 1657 :         fd = PyLong_AsLong(tmp);

  001a5	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tmp$[rsp]
  001aa	e8 00 00 00 00	 call	 PyLong_AsLong
  001af	89 44 24 58	 mov	 DWORD PTR fd$[rsp], eax

; 1658 :         Py_DECREF(tmp);

  001b3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tmp$[rsp]
  001b8	e8 00 00 00 00	 call	 _Py_DecRef

; 1659 :         if (fd < 0 && PyErr_Occurred())

  001bd	83 7c 24 58 00	 cmp	 DWORD PTR fd$[rsp], 0
  001c2	7d 11		 jge	 SHORT $LN68@builtin_in
  001c4	e8 00 00 00 00	 call	 PyErr_Occurred
  001c9	48 85 c0	 test	 rax, rax
  001cc	74 07		 je	 SHORT $LN68@builtin_in

; 1660 :             return NULL;

  001ce	33 c0		 xor	 eax, eax
  001d0	e9 a9 07 00 00	 jmp	 $LN80@builtin_in
$LN68@builtin_in:

; 1661 :         tty = fd == fileno(stdin) && isatty(fd);

  001d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  001db	48 8b c8	 mov	 rcx, rax
  001de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno
  001e4	39 44 24 58	 cmp	 DWORD PTR fd$[rsp], eax
  001e8	75 1b		 jne	 SHORT $LN82@builtin_in
  001ea	8b 4c 24 58	 mov	 ecx, DWORD PTR fd$[rsp]
  001ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isatty
  001f4	85 c0		 test	 eax, eax
  001f6	74 0d		 je	 SHORT $LN82@builtin_in
  001f8	c7 84 24 f0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv157[rsp], 1
  00203	eb 0b		 jmp	 SHORT $LN83@builtin_in
$LN82@builtin_in:
  00205	c7 84 24 f0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv157[rsp], 0
$LN83@builtin_in:
  00210	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR tv157[rsp]
  00217	89 44 24 48	 mov	 DWORD PTR tty$[rsp], eax
$LN69@builtin_in:

; 1662 :     }
; 1663 :     if (tty) {

  0021b	83 7c 24 48 00	 cmp	 DWORD PTR tty$[rsp], 0
  00220	0f 84 bc 00 00
	00		 je	 $LN67@builtin_in

; 1664 :         tmp = _PyObject_CallMethodId(fout, &PyId_fileno, "");

  00226	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_fileno
  0022b	8b c0		 mov	 eax, eax
  0022d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00233	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0023c	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00240	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00247	48 8b d0	 mov	 rdx, rax
  0024a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR fout$[rsp]
  0024f	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  00254	48 89 44 24 38	 mov	 QWORD PTR tmp$[rsp], rax

; 1665 :         if (tmp == NULL)

  00259	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0025f	75 07		 jne	 SHORT $LN66@builtin_in

; 1666 :             PyErr_Clear();

  00261	e8 00 00 00 00	 call	 PyErr_Clear

; 1667 :         else {

  00266	eb 7a		 jmp	 SHORT $LN65@builtin_in
$LN66@builtin_in:

; 1668 :             fd = PyLong_AsLong(tmp);

  00268	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tmp$[rsp]
  0026d	e8 00 00 00 00	 call	 PyLong_AsLong
  00272	89 44 24 58	 mov	 DWORD PTR fd$[rsp], eax

; 1669 :             Py_DECREF(tmp);

  00276	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tmp$[rsp]
  0027b	e8 00 00 00 00	 call	 _Py_DecRef

; 1670 :             if (fd < 0 && PyErr_Occurred())

  00280	83 7c 24 58 00	 cmp	 DWORD PTR fd$[rsp], 0
  00285	7d 11		 jge	 SHORT $LN64@builtin_in
  00287	e8 00 00 00 00	 call	 PyErr_Occurred
  0028c	48 85 c0	 test	 rax, rax
  0028f	74 07		 je	 SHORT $LN64@builtin_in

; 1671 :                 return NULL;

  00291	33 c0		 xor	 eax, eax
  00293	e9 e6 06 00 00	 jmp	 $LN80@builtin_in
$LN64@builtin_in:

; 1672 :             tty = fd == fileno(stdout) && isatty(fd);

  00298	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0029e	48 83 c0 30	 add	 rax, 48			; 00000030H
  002a2	48 8b c8	 mov	 rcx, rax
  002a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno
  002ab	39 44 24 58	 cmp	 DWORD PTR fd$[rsp], eax
  002af	75 1b		 jne	 SHORT $LN84@builtin_in
  002b1	8b 4c 24 58	 mov	 ecx, DWORD PTR fd$[rsp]
  002b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isatty
  002bb	85 c0		 test	 eax, eax
  002bd	74 0d		 je	 SHORT $LN84@builtin_in
  002bf	c7 84 24 f4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv184[rsp], 1
  002ca	eb 0b		 jmp	 SHORT $LN85@builtin_in
$LN84@builtin_in:
  002cc	c7 84 24 f4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv184[rsp], 0
$LN85@builtin_in:
  002d7	8b 84 24 f4 00
	00 00		 mov	 eax, DWORD PTR tv184[rsp]
  002de	89 44 24 48	 mov	 DWORD PTR tty$[rsp], eax
$LN65@builtin_in:
$LN67@builtin_in:

; 1673 :         }
; 1674 :     }
; 1675 : 
; 1676 :     /* If we're interactive, use (GNU) readline */
; 1677 :     if (tty) {

  002e2	83 7c 24 48 00	 cmp	 DWORD PTR tty$[rsp], 0
  002e7	0f 84 11 06 00
	00		 je	 $LN63@builtin_in

; 1678 :         PyObject *po = NULL;

  002ed	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR po$22867[rsp], 0

; 1679 :         char *prompt;
; 1680 :         char *s = NULL;

  002f9	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR s$22870[rsp], 0

; 1681 :         PyObject *stdin_encoding = NULL, *stdin_errors = NULL;

  00302	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR stdin_encoding$22872[rsp], 0
  0030b	48 c7 84 24 a8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR stdin_errors$22874[rsp], 0

; 1682 :         PyObject *stdout_encoding = NULL, *stdout_errors = NULL;

  00317	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR stdout_encoding$22876[rsp], 0
  00323	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR stdout_errors$22878[rsp], 0

; 1683 :         char *stdin_encoding_str, *stdin_errors_str;
; 1684 :         PyObject *result;
; 1685 :         size_t len;
; 1686 :         _Py_IDENTIFIER(encoding);
; 1687 :         _Py_IDENTIFIER(errors);
; 1688 : 
; 1689 :         stdin_encoding = _PyObject_GetAttrId(fin, &PyId_encoding);

  0032c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_encoding@?9??builtin_input@@9@9
  00331	8b c0		 mov	 eax, eax
  00333	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00339	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00342	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00346	48 8b d0	 mov	 rdx, rax
  00349	48 8b 4c 24 40	 mov	 rcx, QWORD PTR fin$[rsp]
  0034e	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00353	48 89 44 24 68	 mov	 QWORD PTR stdin_encoding$22872[rsp], rax

; 1690 :         stdin_errors = _PyObject_GetAttrId(fin, &PyId_errors);

  00358	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_errors@?9??builtin_input@@9@9
  0035d	8b c0		 mov	 eax, eax
  0035f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00365	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0036e	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00372	48 8b d0	 mov	 rdx, rax
  00375	48 8b 4c 24 40	 mov	 rcx, QWORD PTR fin$[rsp]
  0037a	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0037f	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR stdin_errors$22874[rsp], rax

; 1691 :         if (!stdin_encoding || !stdin_errors)

  00387	48 83 7c 24 68
	00		 cmp	 QWORD PTR stdin_encoding$22872[rsp], 0
  0038d	74 0b		 je	 SHORT $LN61@builtin_in
  0038f	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR stdin_errors$22874[rsp], 0
  00398	75 05		 jne	 SHORT $LN62@builtin_in
$LN61@builtin_in:

; 1692 :             /* stdin is a text stream, so it must have an
; 1693 :                encoding. */
; 1694 :             goto _readline_errors;

  0039a	e9 ce 04 00 00	 jmp	 $_readline_errors$22892
$LN62@builtin_in:

; 1695 :         stdin_encoding_str = _PyUnicode_AsString(stdin_encoding);

  0039f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR stdin_encoding$22872[rsp]
  003a4	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  003a9	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR stdin_encoding_str$22880[rsp], rax

; 1696 :         stdin_errors_str = _PyUnicode_AsString(stdin_errors);

  003b1	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR stdin_errors$22874[rsp]
  003b9	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  003be	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR stdin_errors_str$22881[rsp], rax

; 1697 :         if (!stdin_encoding_str || !stdin_errors_str)

  003c6	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR stdin_encoding_str$22880[rsp], 0
  003cf	74 0b		 je	 SHORT $LN59@builtin_in
  003d1	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR stdin_errors_str$22881[rsp], 0
  003da	75 05		 jne	 SHORT $LN60@builtin_in
$LN59@builtin_in:

; 1698 :             goto _readline_errors;

  003dc	e9 8c 04 00 00	 jmp	 $_readline_errors$22892
$LN60@builtin_in:

; 1699 :         tmp = _PyObject_CallMethodId(fout, &PyId_flush, "");

  003e1	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_flush
  003e6	8b c0		 mov	 eax, eax
  003e8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  003ee	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  003f7	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  003fb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00402	48 8b d0	 mov	 rdx, rax
  00405	48 8b 4c 24 60	 mov	 rcx, QWORD PTR fout$[rsp]
  0040a	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  0040f	48 89 44 24 38	 mov	 QWORD PTR tmp$[rsp], rax

; 1700 :         if (tmp == NULL)

  00414	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0041a	75 07		 jne	 SHORT $LN58@builtin_in

; 1701 :             PyErr_Clear();

  0041c	e8 00 00 00 00	 call	 PyErr_Clear

; 1702 :         else

  00421	eb 0a		 jmp	 SHORT $LN57@builtin_in
$LN58@builtin_in:

; 1703 :             Py_DECREF(tmp);

  00423	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tmp$[rsp]
  00428	e8 00 00 00 00	 call	 _Py_DecRef
$LN57@builtin_in:

; 1704 :         if (promptarg != NULL) {

  0042d	48 83 7c 24 50
	00		 cmp	 QWORD PTR promptarg$[rsp], 0
  00433	0f 84 5c 02 00
	00		 je	 $LN56@builtin_in

; 1705 :             /* We have a prompt, encode it as stdout would */
; 1706 :             char *stdout_encoding_str, *stdout_errors_str;
; 1707 :             PyObject *stringpo;
; 1708 :             stdout_encoding = _PyObject_GetAttrId(fout, &PyId_encoding);

  00439	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_encoding@?9??builtin_input@@9@9
  0043e	8b c0		 mov	 eax, eax
  00440	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00446	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0044f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00453	48 8b d0	 mov	 rdx, rax
  00456	48 8b 4c 24 60	 mov	 rcx, QWORD PTR fout$[rsp]
  0045b	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00460	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR stdout_encoding$22876[rsp], rax

; 1709 :             stdout_errors = _PyObject_GetAttrId(fout, &PyId_errors);

  00468	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_errors@?9??builtin_input@@9@9
  0046d	8b c0		 mov	 eax, eax
  0046f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00475	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0047e	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00482	48 8b d0	 mov	 rdx, rax
  00485	48 8b 4c 24 60	 mov	 rcx, QWORD PTR fout$[rsp]
  0048a	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0048f	48 89 44 24 70	 mov	 QWORD PTR stdout_errors$22878[rsp], rax

; 1710 :             if (!stdout_encoding || !stdout_errors)

  00494	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR stdout_encoding$22876[rsp], 0
  0049d	74 08		 je	 SHORT $LN54@builtin_in
  0049f	48 83 7c 24 70
	00		 cmp	 QWORD PTR stdout_errors$22878[rsp], 0
  004a5	75 05		 jne	 SHORT $LN55@builtin_in
$LN54@builtin_in:

; 1711 :                 goto _readline_errors;

  004a7	e9 c1 03 00 00	 jmp	 $_readline_errors$22892
$LN55@builtin_in:

; 1712 :             stdout_encoding_str = _PyUnicode_AsString(stdout_encoding);

  004ac	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR stdout_encoding$22876[rsp]
  004b4	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  004b9	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR stdout_encoding_str$22901[rsp], rax

; 1713 :             stdout_errors_str = _PyUnicode_AsString(stdout_errors);

  004c1	48 8b 4c 24 70	 mov	 rcx, QWORD PTR stdout_errors$22878[rsp]
  004c6	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  004cb	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR stdout_errors_str$22902[rsp], rax

; 1714 :             if (!stdout_encoding_str || !stdout_errors_str)

  004d3	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR stdout_encoding_str$22901[rsp], 0
  004dc	74 0b		 je	 SHORT $LN52@builtin_in
  004de	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR stdout_errors_str$22902[rsp], 0
  004e7	75 05		 jne	 SHORT $LN53@builtin_in
$LN52@builtin_in:

; 1715 :                 goto _readline_errors;

  004e9	e9 7f 03 00 00	 jmp	 $_readline_errors$22892
$LN53@builtin_in:

; 1716 :             stringpo = PyObject_Str(promptarg);

  004ee	48 8b 4c 24 50	 mov	 rcx, QWORD PTR promptarg$[rsp]
  004f3	e8 00 00 00 00	 call	 PyObject_Str
  004f8	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR stringpo$22903[rsp], rax

; 1717 :             if (stringpo == NULL)

  00500	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR stringpo$22903[rsp], 0
  00509	75 05		 jne	 SHORT $LN51@builtin_in

; 1718 :                 goto _readline_errors;

  0050b	e9 5d 03 00 00	 jmp	 $_readline_errors$22892
$LN51@builtin_in:

; 1719 :             po = PyUnicode_AsEncodedString(stringpo,
; 1720 :                 stdout_encoding_str, stdout_errors_str);

  00510	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR stdout_errors_str$22902[rsp]
  00518	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR stdout_encoding_str$22901[rsp]
  00520	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR stringpo$22903[rsp]
  00528	e8 00 00 00 00	 call	 PyUnicode_AsEncodedString
  0052d	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR po$22867[rsp], rax
$LN50@builtin_in:

; 1721 :             Py_CLEAR(stdout_encoding);

  00535	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR stdout_encoding$22876[rsp], 0
  0053e	74 56		 je	 SHORT $LN47@builtin_in
  00540	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00548	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR stdout_encoding$22876[rsp]
  00550	41 b8 b9 06 00
	00		 mov	 r8d, 1721		; 000006b9H
  00556	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LBFDNFDG@?4?4?2Python?2bltinmodule?4c?$AA@
  0055d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@GPCIEIOM@builtin_input?$AA@
  00564	e8 00 00 00 00	 call	 _PyParallel_Guard
  00569	85 c0		 test	 eax, eax
  0056b	75 29		 jne	 SHORT $LN47@builtin_in
  0056d	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR stdout_encoding$22876[rsp]
  00575	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR _py_tmp$22915[rsp], rax
  0057d	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR stdout_encoding$22876[rsp], 0
  00589	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$22915[rsp]
  00591	e8 00 00 00 00	 call	 _Py_DecRef
$LN47@builtin_in:
  00596	33 c0		 xor	 eax, eax
  00598	85 c0		 test	 eax, eax
  0059a	75 99		 jne	 SHORT $LN50@builtin_in
$LN46@builtin_in:

; 1722 :             Py_CLEAR(stdout_errors);

  0059c	48 83 7c 24 70
	00		 cmp	 QWORD PTR stdout_errors$22878[rsp], 0
  005a2	74 4d		 je	 SHORT $LN43@builtin_in
  005a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  005ac	4c 8b 4c 24 70	 mov	 r9, QWORD PTR stdout_errors$22878[rsp]
  005b1	41 b8 ba 06 00
	00		 mov	 r8d, 1722		; 000006baH
  005b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LBFDNFDG@?4?4?2Python?2bltinmodule?4c?$AA@
  005be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@GPCIEIOM@builtin_input?$AA@
  005c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  005ca	85 c0		 test	 eax, eax
  005cc	75 23		 jne	 SHORT $LN43@builtin_in
  005ce	48 8b 44 24 70	 mov	 rax, QWORD PTR stdout_errors$22878[rsp]
  005d3	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR _py_tmp$22923[rsp], rax
  005db	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR stdout_errors$22878[rsp], 0
  005e4	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$22923[rsp]
  005ec	e8 00 00 00 00	 call	 _Py_DecRef
$LN43@builtin_in:
  005f1	33 c0		 xor	 eax, eax
  005f3	85 c0		 test	 eax, eax
  005f5	75 a5		 jne	 SHORT $LN46@builtin_in
$LN42@builtin_in:

; 1723 :             Py_CLEAR(stringpo);

  005f7	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR stringpo$22903[rsp], 0
  00600	74 56		 je	 SHORT $LN39@builtin_in
  00602	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0060a	4c 8b 8c 24 c0
	00 00 00	 mov	 r9, QWORD PTR stringpo$22903[rsp]
  00612	41 b8 bb 06 00
	00		 mov	 r8d, 1723		; 000006bbH
  00618	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LBFDNFDG@?4?4?2Python?2bltinmodule?4c?$AA@
  0061f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@GPCIEIOM@builtin_input?$AA@
  00626	e8 00 00 00 00	 call	 _PyParallel_Guard
  0062b	85 c0		 test	 eax, eax
  0062d	75 29		 jne	 SHORT $LN39@builtin_in
  0062f	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR stringpo$22903[rsp]
  00637	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR _py_tmp$22931[rsp], rax
  0063f	48 c7 84 24 c0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR stringpo$22903[rsp], 0
  0064b	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$22931[rsp]
  00653	e8 00 00 00 00	 call	 _Py_DecRef
$LN39@builtin_in:
  00658	33 c0		 xor	 eax, eax
  0065a	85 c0		 test	 eax, eax
  0065c	75 99		 jne	 SHORT $LN42@builtin_in

; 1724 :             if (po == NULL)

  0065e	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR po$22867[rsp], 0
  00667	75 05		 jne	 SHORT $LN38@builtin_in

; 1725 :                 goto _readline_errors;

  00669	e9 ff 01 00 00	 jmp	 $_readline_errors$22892
$LN38@builtin_in:

; 1726 :             prompt = PyBytes_AsString(po);

  0066e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR po$22867[rsp]
  00676	e8 00 00 00 00	 call	 PyBytes_AsString
  0067b	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR prompt$22869[rsp], rax

; 1727 :             if (prompt == NULL)

  00683	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR prompt$22869[rsp], 0
  0068c	75 05		 jne	 SHORT $LN37@builtin_in

; 1728 :                 goto _readline_errors;

  0068e	e9 da 01 00 00	 jmp	 $_readline_errors$22892
$LN37@builtin_in:

; 1729 :         }
; 1730 :         else {

  00693	eb 1b		 jmp	 SHORT $LN36@builtin_in
$LN56@builtin_in:

; 1731 :             po = NULL;

  00695	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR po$22867[rsp], 0

; 1732 :             prompt = "";

  006a1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  006a8	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR prompt$22869[rsp], rax
$LN36@builtin_in:

; 1733 :         }
; 1734 :         s = PyOS_Readline(stdin, stdout, prompt);

  006b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  006b6	48 83 c0 30	 add	 rax, 48			; 00000030H
  006ba	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv295[rsp], rax
  006c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  006c8	4c 8b 84 24 b0
	00 00 00	 mov	 r8, QWORD PTR prompt$22869[rsp]
  006d0	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tv295[rsp]
  006d8	48 8b d1	 mov	 rdx, rcx
  006db	48 8b c8	 mov	 rcx, rax
  006de	e8 00 00 00 00	 call	 PyOS_Readline
  006e3	48 89 44 24 78	 mov	 QWORD PTR s$22870[rsp], rax

; 1735 :         if (s == NULL) {

  006e8	48 83 7c 24 78
	00		 cmp	 QWORD PTR s$22870[rsp], 0
  006ee	75 20		 jne	 SHORT $LN35@builtin_in

; 1736 :             PyErr_CheckSignals();

  006f0	e8 00 00 00 00	 call	 PyErr_CheckSignals

; 1737 :             if (!PyErr_Occurred())

  006f5	e8 00 00 00 00	 call	 PyErr_Occurred
  006fa	48 85 c0	 test	 rax, rax
  006fd	75 0c		 jne	 SHORT $LN34@builtin_in

; 1738 :                 PyErr_SetNone(PyExc_KeyboardInterrupt);

  006ff	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_KeyboardInterrupt
  00706	e8 00 00 00 00	 call	 PyErr_SetNone
$LN34@builtin_in:

; 1739 :             goto _readline_errors;

  0070b	e9 5d 01 00 00	 jmp	 $_readline_errors$22892
$LN35@builtin_in:

; 1740 :         }
; 1741 : 
; 1742 :         len = strlen(s);

  00710	48 8b 4c 24 78	 mov	 rcx, QWORD PTR s$22870[rsp]
  00715	e8 00 00 00 00	 call	 strlen
  0071a	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR len$22883[rsp], rax

; 1743 :         if (len == 0) {

  00722	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR len$22883[rsp], 0
  0072b	75 1d		 jne	 SHORT $LN33@builtin_in

; 1744 :             PyErr_SetNone(PyExc_EOFError);

  0072d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_EOFError
  00734	e8 00 00 00 00	 call	 PyErr_SetNone

; 1745 :             result = NULL;

  00739	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR result$22882[rsp], 0

; 1746 :         }
; 1747 :         else {

  00745	e9 ac 00 00 00	 jmp	 $LN32@builtin_in
$LN33@builtin_in:

; 1748 :             if (len > PY_SSIZE_T_MAX) {

  0074a	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  00754	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR len$22883[rsp], rax
  0075c	76 21		 jbe	 SHORT $LN31@builtin_in

; 1749 :                 PyErr_SetString(PyExc_OverflowError,
; 1750 :                                 "input: input too long");

  0075e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@KBDILNFI@input?3?5input?5too?5long?$AA@
  00765	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  0076c	e8 00 00 00 00	 call	 PyErr_SetString

; 1751 :                 result = NULL;

  00771	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR result$22882[rsp], 0

; 1752 :             }
; 1753 :             else {

  0077d	eb 77		 jmp	 SHORT $LN30@builtin_in
$LN31@builtin_in:

; 1754 :                 len--;   /* strip trailing '\n' */

  0077f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR len$22883[rsp]
  00787	48 ff c8	 dec	 rax
  0078a	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR len$22883[rsp], rax

; 1755 :                 if (len != 0 && s[len-1] == '\r')

  00792	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR len$22883[rsp], 0
  0079b	74 2f		 je	 SHORT $LN29@builtin_in
  0079d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR len$22883[rsp]
  007a5	48 8b 4c 24 78	 mov	 rcx, QWORD PTR s$22870[rsp]
  007aa	48 03 c8	 add	 rcx, rax
  007ad	48 8b c1	 mov	 rax, rcx
  007b0	0f be 40 ff	 movsx	 eax, BYTE PTR [rax-1]
  007b4	83 f8 0d	 cmp	 eax, 13
  007b7	75 13		 jne	 SHORT $LN29@builtin_in

; 1756 :                     len--;   /* strip trailing '\r' */

  007b9	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR len$22883[rsp]
  007c1	48 ff c8	 dec	 rax
  007c4	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR len$22883[rsp], rax
$LN29@builtin_in:

; 1757 :                 result = PyUnicode_Decode(s, len, stdin_encoding_str,
; 1758 :                                                   stdin_errors_str);

  007cc	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR stdin_errors_str$22881[rsp]
  007d4	4c 8b 84 24 b8
	00 00 00	 mov	 r8, QWORD PTR stdin_encoding_str$22880[rsp]
  007dc	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR len$22883[rsp]
  007e4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR s$22870[rsp]
  007e9	e8 00 00 00 00	 call	 PyUnicode_Decode
  007ee	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR result$22882[rsp], rax
$LN30@builtin_in:
$LN32@builtin_in:

; 1759 :             }
; 1760 :         }
; 1761 :         Py_DECREF(stdin_encoding);

  007f6	48 8b 4c 24 68	 mov	 rcx, QWORD PTR stdin_encoding$22872[rsp]
  007fb	e8 00 00 00 00	 call	 _Py_DecRef

; 1762 :         Py_DECREF(stdin_errors);

  00800	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR stdin_errors$22874[rsp]
  00808	e8 00 00 00 00	 call	 _Py_DecRef
$LN28@builtin_in:

; 1763 :         Py_XDECREF(po);

  0080d	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR po$22867[rsp], 0
  00816	74 0d		 je	 SHORT $LN25@builtin_in
  00818	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR po$22867[rsp]
  00820	e8 00 00 00 00	 call	 _Py_DecRef
$LN25@builtin_in:
  00825	33 c0		 xor	 eax, eax
  00827	85 c0		 test	 eax, eax
  00829	75 e2		 jne	 SHORT $LN28@builtin_in

; 1764 :         PyMem_FREE(s);

  0082b	e8 00 00 00 00	 call	 _Py_PXCTX
  00830	85 c0		 test	 eax, eax
  00832	74 17		 je	 SHORT $LN86@builtin_in
  00834	48 8b 4c 24 78	 mov	 rcx, QWORD PTR s$22870[rsp]
  00839	e8 00 00 00 00	 call	 _PxMem_Free
  0083e	c7 84 24 00 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv331[rsp], 0
  00849	eb 15		 jmp	 SHORT $LN87@builtin_in
$LN86@builtin_in:
  0084b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR s$22870[rsp]
  00850	e8 00 00 00 00	 call	 _PyMem_DebugFree
  00855	c7 84 24 00 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv331[rsp], 0
$LN87@builtin_in:

; 1765 :         return result;

  00860	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR result$22882[rsp]
  00868	e9 11 01 00 00	 jmp	 $LN80@builtin_in
$_readline_errors$22892:
$LN24@builtin_in:

; 1766 :     _readline_errors:
; 1767 :         Py_XDECREF(stdin_encoding);

  0086d	48 83 7c 24 68
	00		 cmp	 QWORD PTR stdin_encoding$22872[rsp], 0
  00873	74 0a		 je	 SHORT $LN21@builtin_in
  00875	48 8b 4c 24 68	 mov	 rcx, QWORD PTR stdin_encoding$22872[rsp]
  0087a	e8 00 00 00 00	 call	 _Py_DecRef
$LN21@builtin_in:
  0087f	33 c0		 xor	 eax, eax
  00881	85 c0		 test	 eax, eax
  00883	75 e8		 jne	 SHORT $LN24@builtin_in
$LN20@builtin_in:

; 1768 :         Py_XDECREF(stdout_encoding);

  00885	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR stdout_encoding$22876[rsp], 0
  0088e	74 0d		 je	 SHORT $LN17@builtin_in
  00890	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR stdout_encoding$22876[rsp]
  00898	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@builtin_in:
  0089d	33 c0		 xor	 eax, eax
  0089f	85 c0		 test	 eax, eax
  008a1	75 e2		 jne	 SHORT $LN20@builtin_in
$LN16@builtin_in:

; 1769 :         Py_XDECREF(stdin_errors);

  008a3	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR stdin_errors$22874[rsp], 0
  008ac	74 0d		 je	 SHORT $LN13@builtin_in
  008ae	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR stdin_errors$22874[rsp]
  008b6	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@builtin_in:
  008bb	33 c0		 xor	 eax, eax
  008bd	85 c0		 test	 eax, eax
  008bf	75 e2		 jne	 SHORT $LN16@builtin_in
$LN12@builtin_in:

; 1770 :         Py_XDECREF(stdout_errors);

  008c1	48 83 7c 24 70
	00		 cmp	 QWORD PTR stdout_errors$22878[rsp], 0
  008c7	74 0a		 je	 SHORT $LN9@builtin_in
  008c9	48 8b 4c 24 70	 mov	 rcx, QWORD PTR stdout_errors$22878[rsp]
  008ce	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@builtin_in:
  008d3	33 c0		 xor	 eax, eax
  008d5	85 c0		 test	 eax, eax
  008d7	75 e8		 jne	 SHORT $LN12@builtin_in
$LN8@builtin_in:

; 1771 :         Py_XDECREF(po);

  008d9	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR po$22867[rsp], 0
  008e2	74 0d		 je	 SHORT $LN5@builtin_in
  008e4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR po$22867[rsp]
  008ec	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@builtin_in:
  008f1	33 c0		 xor	 eax, eax
  008f3	85 c0		 test	 eax, eax
  008f5	75 e2		 jne	 SHORT $LN8@builtin_in

; 1772 :         return NULL;

  008f7	33 c0		 xor	 eax, eax
  008f9	e9 80 00 00 00	 jmp	 $LN80@builtin_in
$LN63@builtin_in:

; 1773 :     }
; 1774 : 
; 1775 :     /* Fallback if we're not interactive */
; 1776 :     if (promptarg != NULL) {

  008fe	48 83 7c 24 50
	00		 cmp	 QWORD PTR promptarg$[rsp], 0
  00904	74 1d		 je	 SHORT $LN4@builtin_in

; 1777 :         if (PyFile_WriteObject(promptarg, fout, Py_PRINT_RAW) != 0)

  00906	41 b8 01 00 00
	00		 mov	 r8d, 1
  0090c	48 8b 54 24 60	 mov	 rdx, QWORD PTR fout$[rsp]
  00911	48 8b 4c 24 50	 mov	 rcx, QWORD PTR promptarg$[rsp]
  00916	e8 00 00 00 00	 call	 PyFile_WriteObject
  0091b	85 c0		 test	 eax, eax
  0091d	74 04		 je	 SHORT $LN3@builtin_in

; 1778 :             return NULL;

  0091f	33 c0		 xor	 eax, eax
  00921	eb 5b		 jmp	 SHORT $LN80@builtin_in
$LN3@builtin_in:
$LN4@builtin_in:

; 1779 :     }
; 1780 :     tmp = _PyObject_CallMethodId(fout, &PyId_flush, "");

  00923	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_flush
  00928	8b c0		 mov	 eax, eax
  0092a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00930	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00939	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0093d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00944	48 8b d0	 mov	 rdx, rax
  00947	48 8b 4c 24 60	 mov	 rcx, QWORD PTR fout$[rsp]
  0094c	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  00951	48 89 44 24 38	 mov	 QWORD PTR tmp$[rsp], rax

; 1781 :     if (tmp == NULL)

  00956	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0095c	75 07		 jne	 SHORT $LN2@builtin_in

; 1782 :         PyErr_Clear();

  0095e	e8 00 00 00 00	 call	 PyErr_Clear

; 1783 :     else

  00963	eb 0a		 jmp	 SHORT $LN1@builtin_in
$LN2@builtin_in:

; 1784 :         Py_DECREF(tmp);

  00965	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tmp$[rsp]
  0096a	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@builtin_in:

; 1785 :     return PyFile_GetLine(fin, -1);

  0096f	ba ff ff ff ff	 mov	 edx, -1
  00974	48 8b 4c 24 40	 mov	 rcx, QWORD PTR fin$[rsp]
  00979	e8 00 00 00 00	 call	 PyFile_GetLine
$LN80@builtin_in:

; 1786 : }

  0097e	48 81 c4 18 01
	00 00		 add	 rsp, 280		; 00000118H
  00985	c3		 ret	 0
builtin_input ENDP
_TEXT	ENDS
EXTRN	PyObject_Repr:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_repr DD imagerel builtin_repr
	DD	imagerel builtin_repr+29
	DD	imagerel $unwind$builtin_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_repr DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT builtin_repr
_TEXT	SEGMENT
self$ = 48
v$ = 56
builtin_repr PROC					; COMDAT

; 1799 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1800 :     return PyObject_Repr(v);

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR v$[rsp]
  00013	e8 00 00 00 00	 call	 PyObject_Repr

; 1801 : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
builtin_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_02MJJLPNK@OO?$AA@				; `string'
PUBLIC	??_C@_01MJMHLOMK@O?$AA@				; `string'
PUBLIC	??_C@_0CM@HFCEEHCP@type?5?$CF?4100s?5doesn?8t?5define?5__rou@ ; `string'
PUBLIC	??_C@_09PJGAHDBG@__round__?$AA@			; `string'
PUBLIC	??_C@_09NLEMIFEJ@O?$HMO?3round?$AA@		; `string'
EXTRN	PyObject_CallFunction:PROC
EXTRN	_PyType_Lookup:PROC
EXTRN	PyUnicode_InternFromString:PROC
EXTRN	PyType_Ready:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_round DD imagerel builtin_round
	DD	imagerel builtin_round+314
	DD	imagerel $unwind$builtin_round
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_round DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_02MJJLPNK@OO?$AA@
CONST	SEGMENT
??_C@_02MJJLPNK@OO?$AA@ DB 'OO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01MJMHLOMK@O?$AA@
CONST	SEGMENT
??_C@_01MJMHLOMK@O?$AA@ DB 'O', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@HFCEEHCP@type?5?$CF?4100s?5doesn?8t?5define?5__rou@
CONST	SEGMENT
??_C@_0CM@HFCEEHCP@type?5?$CF?4100s?5doesn?8t?5define?5__rou@ DB 'type %.'
	DB	'100s doesn''t define __round__ method', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PJGAHDBG@__round__?$AA@
CONST	SEGMENT
??_C@_09PJGAHDBG@__round__?$AA@ DB '__round__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NLEMIFEJ@O?$HMO?3round?$AA@
CONST	SEGMENT
??_C@_09NLEMIFEJ@O?$HMO?3round?$AA@ DB 'O|O:round', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT builtin_round
_TEXT	SEGMENT
round$ = 48
ndigits$ = 56
number$ = 64
self$ = 96
args$ = 104
kwds$ = 112
builtin_round PROC					; COMDAT

; 1812 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1813 :     static PyObject *round_str = NULL;
; 1814 :     PyObject *ndigits = NULL;

  00013	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR ndigits$[rsp], 0

; 1815 :     static char *kwlist[] = {"number", "ndigits", 0};
; 1816 :     PyObject *number, *round;
; 1817 : 
; 1818 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|O:round",
; 1819 :                                      kwlist, &number, &ndigits))

  0001c	48 8d 44 24 38	 lea	 rax, QWORD PTR ndigits$[rsp]
  00021	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00026	48 8d 44 24 40	 lea	 rax, QWORD PTR number$[rsp]
  0002b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00030	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??builtin_round@@9@9
  00037	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09NLEMIFEJ@O?$HMO?3round?$AA@
  0003e	48 8b 54 24 70	 mov	 rdx, QWORD PTR kwds$[rsp]
  00043	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00048	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  0004d	85 c0		 test	 eax, eax
  0004f	75 07		 jne	 SHORT $LN8@builtin_ro

; 1820 :         return NULL;

  00051	33 c0		 xor	 eax, eax
  00053	e9 dd 00 00 00	 jmp	 $LN9@builtin_ro
$LN8@builtin_ro:

; 1821 : 
; 1822 :     if (Py_TYPE(number)->tp_dict == NULL) {

  00058	48 8b 44 24 40	 mov	 rax, QWORD PTR number$[rsp]
  0005d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00061	48 83 b8 60 01
	00 00 00	 cmp	 QWORD PTR [rax+352], 0
  00069	75 19		 jne	 SHORT $LN7@builtin_ro

; 1823 :         if (PyType_Ready(Py_TYPE(number)) < 0)

  0006b	48 8b 44 24 40	 mov	 rax, QWORD PTR number$[rsp]
  00070	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00074	e8 00 00 00 00	 call	 PyType_Ready
  00079	85 c0		 test	 eax, eax
  0007b	7d 07		 jge	 SHORT $LN6@builtin_ro

; 1824 :             return NULL;

  0007d	33 c0		 xor	 eax, eax
  0007f	e9 b1 00 00 00	 jmp	 $LN9@builtin_ro
$LN6@builtin_ro:
$LN7@builtin_ro:

; 1825 :     }
; 1826 : 
; 1827 :     if (round_str == NULL) {

  00084	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?round_str@?1??builtin_round@@9@9, 0
  0008c	75 24		 jne	 SHORT $LN5@builtin_ro

; 1828 :         round_str = PyUnicode_InternFromString("__round__");

  0008e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09PJGAHDBG@__round__?$AA@
  00095	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  0009a	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?round_str@?1??builtin_round@@9@9, rax

; 1829 :         if (round_str == NULL)

  000a1	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?round_str@?1??builtin_round@@9@9, 0
  000a9	75 07		 jne	 SHORT $LN4@builtin_ro

; 1830 :             return NULL;

  000ab	33 c0		 xor	 eax, eax
  000ad	e9 83 00 00 00	 jmp	 $LN9@builtin_ro
$LN4@builtin_ro:
$LN5@builtin_ro:

; 1831 :     }
; 1832 : 
; 1833 :     round = _PyType_Lookup(Py_TYPE(number), round_str);

  000b2	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?round_str@?1??builtin_round@@9@9
  000b9	48 8b 44 24 40	 mov	 rax, QWORD PTR number$[rsp]
  000be	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000c2	e8 00 00 00 00	 call	 _PyType_Lookup
  000c7	48 89 44 24 30	 mov	 QWORD PTR round$[rsp], rax

; 1834 :     if (round == NULL) {

  000cc	48 83 7c 24 30
	00		 cmp	 QWORD PTR round$[rsp], 0
  000d2	75 24		 jne	 SHORT $LN3@builtin_ro

; 1835 :         PyErr_Format(PyExc_TypeError,
; 1836 :                      "type %.100s doesn't define __round__ method",
; 1837 :                      Py_TYPE(number)->tp_name);

  000d4	48 8b 44 24 40	 mov	 rax, QWORD PTR number$[rsp]
  000d9	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000dd	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  000e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@HFCEEHCP@type?5?$CF?4100s?5doesn?8t?5define?5__rou@
  000e8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000ef	e8 00 00 00 00	 call	 PyErr_Format

; 1838 :         return NULL;

  000f4	33 c0		 xor	 eax, eax
  000f6	eb 3d		 jmp	 SHORT $LN9@builtin_ro
$LN3@builtin_ro:

; 1839 :     }
; 1840 : 
; 1841 :     if (ndigits == NULL)

  000f8	48 83 7c 24 38
	00		 cmp	 QWORD PTR ndigits$[rsp], 0
  000fe	75 1a		 jne	 SHORT $LN2@builtin_ro

; 1842 :         return PyObject_CallFunction(round, "O", number);

  00100	4c 8b 44 24 40	 mov	 r8, QWORD PTR number$[rsp]
  00105	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01MJMHLOMK@O?$AA@
  0010c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR round$[rsp]
  00111	e8 00 00 00 00	 call	 PyObject_CallFunction
  00116	eb 1d		 jmp	 SHORT $LN9@builtin_ro

; 1843 :     else

  00118	eb 1b		 jmp	 SHORT $LN1@builtin_ro
$LN2@builtin_ro:

; 1844 :         return PyObject_CallFunction(round, "OO", number, ndigits);

  0011a	4c 8b 4c 24 38	 mov	 r9, QWORD PTR ndigits$[rsp]
  0011f	4c 8b 44 24 40	 mov	 r8, QWORD PTR number$[rsp]
  00124	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02MJJLPNK@OO?$AA@
  0012b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR round$[rsp]
  00130	e8 00 00 00 00	 call	 PyObject_CallFunction
$LN1@builtin_ro:
$LN9@builtin_ro:

; 1845 : }

  00135	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00139	c3		 ret	 0
builtin_round ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@LFHJKBHH@O?$HMOi?3sorted?$AA@		; `string'
EXTRN	PySequence_List:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_sorted DD imagerel builtin_sorted
	DD	imagerel builtin_sorted+360
	DD	imagerel $unwind$builtin_sorted
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_sorted DD 021601H
	DD	0110116H
xdata	ENDS
;	COMDAT ??_C@_0M@LFHJKBHH@O?$HMOi?3sorted?$AA@
CONST	SEGMENT
??_C@_0M@LFHJKBHH@O?$HMOi?3sorted?$AA@ DB 'O|Oi:sorted', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT builtin_sorted
_TEXT	SEGMENT
newargs$ = 64
v$ = 72
callable$ = 80
newlist$ = 88
keyfunc$ = 96
seq$ = 104
reverse$ = 112
self$ = 144
args$ = 152
kwds$ = 160
builtin_sorted PROC					; COMDAT

; 1857 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 1858 :     PyObject *newlist, *v, *seq, *keyfunc=NULL, *newargs;

  00016	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR keyfunc$[rsp], 0

; 1859 :     PyObject *callable;
; 1860 :     static char *kwlist[] = {"iterable", "key", "reverse", 0};
; 1861 :     int reverse;
; 1862 :     _Py_IDENTIFIER(sort);
; 1863 : 
; 1864 :     /* args 1-3 should match listsort in Objects/listobject.c */
; 1865 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|Oi:sorted",
; 1866 :         kwlist, &seq, &keyfunc, &reverse))

  0001f	48 8d 44 24 70	 lea	 rax, QWORD PTR reverse$[rsp]
  00024	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00029	48 8d 44 24 60	 lea	 rax, QWORD PTR keyfunc$[rsp]
  0002e	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00033	48 8d 44 24 68	 lea	 rax, QWORD PTR seq$[rsp]
  00038	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0003d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??builtin_sorted@@9@9
  00044	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@LFHJKBHH@O?$HMOi?3sorted?$AA@
  0004b	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  00053	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0005b	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00060	85 c0		 test	 eax, eax
  00062	75 07		 jne	 SHORT $LN5@builtin_so

; 1867 :         return NULL;

  00064	33 c0		 xor	 eax, eax
  00066	e9 f5 00 00 00	 jmp	 $LN6@builtin_so
$LN5@builtin_so:

; 1868 : 
; 1869 :     newlist = PySequence_List(seq);

  0006b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR seq$[rsp]
  00070	e8 00 00 00 00	 call	 PySequence_List
  00075	48 89 44 24 58	 mov	 QWORD PTR newlist$[rsp], rax

; 1870 :     if (newlist == NULL)

  0007a	48 83 7c 24 58
	00		 cmp	 QWORD PTR newlist$[rsp], 0
  00080	75 07		 jne	 SHORT $LN4@builtin_so

; 1871 :         return NULL;

  00082	33 c0		 xor	 eax, eax
  00084	e9 d7 00 00 00	 jmp	 $LN6@builtin_so
$LN4@builtin_so:

; 1872 : 
; 1873 :     callable = _PyObject_GetAttrId(newlist, &PyId_sort);

  00089	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_sort@?1??builtin_sorted@@9@9
  0008e	8b c0		 mov	 eax, eax
  00090	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00096	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0009f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000a3	48 8b d0	 mov	 rdx, rax
  000a6	48 8b 4c 24 58	 mov	 rcx, QWORD PTR newlist$[rsp]
  000ab	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  000b0	48 89 44 24 50	 mov	 QWORD PTR callable$[rsp], rax

; 1874 :     if (callable == NULL) {

  000b5	48 83 7c 24 50
	00		 cmp	 QWORD PTR callable$[rsp], 0
  000bb	75 11		 jne	 SHORT $LN3@builtin_so

; 1875 :         Py_DECREF(newlist);

  000bd	48 8b 4c 24 58	 mov	 rcx, QWORD PTR newlist$[rsp]
  000c2	e8 00 00 00 00	 call	 _Py_DecRef

; 1876 :         return NULL;

  000c7	33 c0		 xor	 eax, eax
  000c9	e9 92 00 00 00	 jmp	 $LN6@builtin_so
$LN3@builtin_so:

; 1877 :     }
; 1878 : 
; 1879 :     newargs = PyTuple_GetSlice(args, 1, 4);

  000ce	41 b8 04 00 00
	00		 mov	 r8d, 4
  000d4	ba 01 00 00 00	 mov	 edx, 1
  000d9	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  000e1	e8 00 00 00 00	 call	 PyTuple_GetSlice
  000e6	48 89 44 24 40	 mov	 QWORD PTR newargs$[rsp], rax

; 1880 :     if (newargs == NULL) {

  000eb	48 83 7c 24 40
	00		 cmp	 QWORD PTR newargs$[rsp], 0
  000f1	75 18		 jne	 SHORT $LN2@builtin_so

; 1881 :         Py_DECREF(newlist);

  000f3	48 8b 4c 24 58	 mov	 rcx, QWORD PTR newlist$[rsp]
  000f8	e8 00 00 00 00	 call	 _Py_DecRef

; 1882 :         Py_DECREF(callable);

  000fd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR callable$[rsp]
  00102	e8 00 00 00 00	 call	 _Py_DecRef

; 1883 :         return NULL;

  00107	33 c0		 xor	 eax, eax
  00109	eb 55		 jmp	 SHORT $LN6@builtin_so
$LN2@builtin_so:

; 1884 :     }
; 1885 : 
; 1886 :     v = PyObject_Call(callable, newargs, kwds);

  0010b	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR kwds$[rsp]
  00113	48 8b 54 24 40	 mov	 rdx, QWORD PTR newargs$[rsp]
  00118	48 8b 4c 24 50	 mov	 rcx, QWORD PTR callable$[rsp]
  0011d	e8 00 00 00 00	 call	 PyObject_Call
  00122	48 89 44 24 48	 mov	 QWORD PTR v$[rsp], rax

; 1887 :     Py_DECREF(newargs);

  00127	48 8b 4c 24 40	 mov	 rcx, QWORD PTR newargs$[rsp]
  0012c	e8 00 00 00 00	 call	 _Py_DecRef

; 1888 :     Py_DECREF(callable);

  00131	48 8b 4c 24 50	 mov	 rcx, QWORD PTR callable$[rsp]
  00136	e8 00 00 00 00	 call	 _Py_DecRef

; 1889 :     if (v == NULL) {

  0013b	48 83 7c 24 48
	00		 cmp	 QWORD PTR v$[rsp], 0
  00141	75 0e		 jne	 SHORT $LN1@builtin_so

; 1890 :         Py_DECREF(newlist);

  00143	48 8b 4c 24 58	 mov	 rcx, QWORD PTR newlist$[rsp]
  00148	e8 00 00 00 00	 call	 _Py_DecRef

; 1891 :         return NULL;

  0014d	33 c0		 xor	 eax, eax
  0014f	eb 0f		 jmp	 SHORT $LN6@builtin_so
$LN1@builtin_so:

; 1892 :     }
; 1893 :     Py_DECREF(v);

  00151	48 8b 4c 24 48	 mov	 rcx, QWORD PTR v$[rsp]
  00156	e8 00 00 00 00	 call	 _Py_DecRef

; 1894 :     return newlist;

  0015b	48 8b 44 24 58	 mov	 rax, QWORD PTR newlist$[rsp]
$LN6@builtin_so:

; 1895 : }

  00160	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00167	c3		 ret	 0
builtin_sorted ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CN@EELICGGI@vars?$CI?$CJ?5argument?5must?5have?5__dict@ ; `string'
PUBLIC	??_C@_0BE@GPFCMNBD@vars?$CI?$CJ?3?5no?5locals?$CB?$DP?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_vars DD imagerel builtin_vars
	DD	imagerel builtin_vars+224
	DD	imagerel $unwind$builtin_vars
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_vars DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0CN@EELICGGI@vars?$CI?$CJ?5argument?5must?5have?5__dict@
CONST	SEGMENT
??_C@_0CN@EELICGGI@vars?$CI?$CJ?5argument?5must?5have?5__dict@ DB 'vars()'
	DB	' argument must have __dict__ attribute', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GPFCMNBD@vars?$CI?$CJ?3?5no?5locals?$CB?$DP?$AA@
CONST	SEGMENT
??_C@_0BE@GPFCMNBD@vars?$CI?$CJ?3?5no?5locals?$CB?$DP?$AA@ DB 'vars(): no'
	DB	' locals!?', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT builtin_vars
_TEXT	SEGMENT
v$ = 48
d$ = 56
self$ = 80
args$ = 88
builtin_vars PROC					; COMDAT

; 1902 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1903 :     PyObject *v = NULL;

  0000e	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR v$[rsp], 0

; 1904 :     PyObject *d;
; 1905 : 
; 1906 :     if (!PyArg_UnpackTuple(args, "vars", 0, 1, &v))

  00017	48 8d 44 24 30	 lea	 rax, QWORD PTR v$[rsp]
  0001c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00021	41 b9 01 00 00
	00		 mov	 r9d, 1
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04JPLCBLOA@vars?$AA@
  00031	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  00036	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003b	85 c0		 test	 eax, eax
  0003d	75 07		 jne	 SHORT $LN7@builtin_va

; 1907 :         return NULL;

  0003f	33 c0		 xor	 eax, eax
  00041	e9 95 00 00 00	 jmp	 $LN8@builtin_va
$LN7@builtin_va:

; 1908 :     if (v == NULL) {

  00046	48 83 7c 24 30
	00		 cmp	 QWORD PTR v$[rsp], 0
  0004c	75 3d		 jne	 SHORT $LN6@builtin_va

; 1909 :         d = PyEval_GetLocals();

  0004e	e8 00 00 00 00	 call	 PyEval_GetLocals
  00053	48 89 44 24 38	 mov	 QWORD PTR d$[rsp], rax

; 1910 :         if (d == NULL) {

  00058	48 83 7c 24 38
	00		 cmp	 QWORD PTR d$[rsp], 0
  0005e	75 1f		 jne	 SHORT $LN5@builtin_va

; 1911 :             if (!PyErr_Occurred())

  00060	e8 00 00 00 00	 call	 PyErr_Occurred
  00065	48 85 c0	 test	 rax, rax
  00068	75 13		 jne	 SHORT $LN4@builtin_va

; 1912 :                 PyErr_SetString(PyExc_SystemError,
; 1913 :                                 "vars(): no locals!?");

  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@GPFCMNBD@vars?$CI?$CJ?3?5no?5locals?$CB?$DP?$AA@
  00071	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00078	e8 00 00 00 00	 call	 PyErr_SetString
$LN4@builtin_va:

; 1914 :         }
; 1915 :         else

  0007d	eb 0a		 jmp	 SHORT $LN3@builtin_va
$LN5@builtin_va:

; 1916 :             Py_INCREF(d);

  0007f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR d$[rsp]
  00084	e8 00 00 00 00	 call	 _Py_IncRef
$LN3@builtin_va:

; 1917 :     }
; 1918 :     else {

  00089	eb 4b		 jmp	 SHORT $LN2@builtin_va
$LN6@builtin_va:

; 1919 :         _Py_IDENTIFIER(__dict__);
; 1920 :         d = _PyObject_GetAttrId(v, &PyId___dict__);

  0008b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___dict__@?4??builtin_vars@@9@9
  00090	8b c0		 mov	 eax, eax
  00092	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00098	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000a1	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000a5	48 8b d0	 mov	 rdx, rax
  000a8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR v$[rsp]
  000ad	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  000b2	48 89 44 24 38	 mov	 QWORD PTR d$[rsp], rax

; 1921 :         if (d == NULL) {

  000b7	48 83 7c 24 38
	00		 cmp	 QWORD PTR d$[rsp], 0
  000bd	75 17		 jne	 SHORT $LN1@builtin_va

; 1922 :             PyErr_SetString(PyExc_TypeError,
; 1923 :                 "vars() argument must have __dict__ attribute");

  000bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@EELICGGI@vars?$CI?$CJ?5argument?5must?5have?5__dict@
  000c6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000cd	e8 00 00 00 00	 call	 PyErr_SetString

; 1924 :             return NULL;

  000d2	33 c0		 xor	 eax, eax
  000d4	eb 05		 jmp	 SHORT $LN8@builtin_va
$LN1@builtin_va:
$LN2@builtin_va:

; 1925 :         }
; 1926 :     }
; 1927 :     return d;

  000d6	48 8b 44 24 38	 mov	 rax, QWORD PTR d$[rsp]
$LN8@builtin_va:

; 1928 : }

  000db	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000df	c3		 ret	 0
builtin_vars ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DG@IAOOBLDH@sum?$CI?$CJ?5can?8t?5sum?5bytearray?5?$FLuse?5b@ ; `string'
PUBLIC	??_C@_0DC@BKCBGKCB@sum?$CI?$CJ?5can?8t?5sum?5bytes?5?$FLuse?5b?8?8?4j@ ; `string'
PUBLIC	??_C@_0DD@LBCGIKCI@sum?$CI?$CJ?5can?8t?5sum?5strings?5?$FLuse?5?8?8?4@ ; `string'
EXTRN	PyFloat_FromDouble:PROC
EXTRN	PyFloat_Type:BYTE
EXTRN	PyNumber_Add:PROC
EXTRN	PyLong_AsLongAndOverflow:PROC
EXTRN	PyLong_Type:BYTE
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_sum DD imagerel builtin_sum
	DD	imagerel builtin_sum+1287
	DD	imagerel $unwind$builtin_sum
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_sum DD 021101H
	DD	0110111H
xdata	ENDS
;	COMDAT ??_C@_0DG@IAOOBLDH@sum?$CI?$CJ?5can?8t?5sum?5bytearray?5?$FLuse?5b@
CONST	SEGMENT
??_C@_0DG@IAOOBLDH@sum?$CI?$CJ?5can?8t?5sum?5bytearray?5?$FLuse?5b@ DB 's'
	DB	'um() can''t sum bytearray [use b''''.join(seq) instead]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@BKCBGKCB@sum?$CI?$CJ?5can?8t?5sum?5bytes?5?$FLuse?5b?8?8?4j@
CONST	SEGMENT
??_C@_0DC@BKCBGKCB@sum?$CI?$CJ?5can?8t?5sum?5bytes?5?$FLuse?5b?8?8?4j@ DB 's'
	DB	'um() can''t sum bytes [use b''''.join(seq) instead]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@LBCGIKCI@sum?$CI?$CJ?5can?8t?5sum?5strings?5?$FLuse?5?8?8?4@
CONST	SEGMENT
??_C@_0DD@LBCGIKCI@sum?$CI?$CJ?5can?8t?5sum?5strings?5?$FLuse?5?8?8?4@ DB 's'
	DB	'um() can''t sum strings [use ''''.join(seq) instead]', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT builtin_sum
_TEXT	SEGMENT
iter$ = 48
temp$ = 56
seq$ = 64
result$ = 72
item$ = 80
overflow$23169 = 88
i_result$23170 = 92
x$23186 = 96
b$23185 = 100
f_result$23203 = 104
value$23222 = 112
overflow$23223 = 116
self$ = 144
args$ = 152
builtin_sum PROC					; COMDAT

; 1938 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 1939 :     PyObject *seq;
; 1940 :     PyObject *result = NULL;

  00011	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 1941 :     PyObject *temp, *item, *iter;
; 1942 : 
; 1943 :     if (!PyArg_UnpackTuple(args, "sum", 1, 2, &seq, &result))

  0001a	48 8d 44 24 48	 lea	 rax, QWORD PTR result$[rsp]
  0001f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00024	48 8d 44 24 40	 lea	 rax, QWORD PTR seq$[rsp]
  00029	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002e	41 b9 02 00 00
	00		 mov	 r9d, 2
  00034	41 b8 01 00 00
	00		 mov	 r8d, 1
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03CFFIJAMA@sum?$AA@
  00041	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00049	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0004e	85 c0		 test	 eax, eax
  00050	75 07		 jne	 SHORT $LN34@builtin_su

; 1944 :         return NULL;

  00052	33 c0		 xor	 eax, eax
  00054	e9 a6 04 00 00	 jmp	 $LN35@builtin_su
$LN34@builtin_su:

; 1945 : 
; 1946 :     iter = PyObject_GetIter(seq);

  00059	48 8b 4c 24 40	 mov	 rcx, QWORD PTR seq$[rsp]
  0005e	e8 00 00 00 00	 call	 PyObject_GetIter
  00063	48 89 44 24 30	 mov	 QWORD PTR iter$[rsp], rax

; 1947 :     if (iter == NULL)

  00068	48 83 7c 24 30
	00		 cmp	 QWORD PTR iter$[rsp], 0
  0006e	75 07		 jne	 SHORT $LN33@builtin_su

; 1948 :         return NULL;

  00070	33 c0		 xor	 eax, eax
  00072	e9 88 04 00 00	 jmp	 $LN35@builtin_su
$LN33@builtin_su:

; 1949 : 
; 1950 :     if (result == NULL) {

  00077	48 83 7c 24 48
	00		 cmp	 QWORD PTR result$[rsp], 0
  0007d	75 2a		 jne	 SHORT $LN32@builtin_su

; 1951 :         result = PyLong_FromLong(0);

  0007f	33 c9		 xor	 ecx, ecx
  00081	e8 00 00 00 00	 call	 PyLong_FromLong
  00086	48 89 44 24 48	 mov	 QWORD PTR result$[rsp], rax

; 1952 :         if (result == NULL) {

  0008b	48 83 7c 24 48
	00		 cmp	 QWORD PTR result$[rsp], 0
  00091	75 11		 jne	 SHORT $LN31@builtin_su

; 1953 :             Py_DECREF(iter);

  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR iter$[rsp]
  00098	e8 00 00 00 00	 call	 _Py_DecRef

; 1954 :             return NULL;

  0009d	33 c0		 xor	 eax, eax
  0009f	e9 5b 04 00 00	 jmp	 $LN35@builtin_su
$LN31@builtin_su:

; 1955 :         }
; 1956 :     } else {

  000a4	e9 d1 00 00 00	 jmp	 $LN30@builtin_su
$LN32@builtin_su:

; 1957 :         /* reject string values for 'start' parameter */
; 1958 :         if (PyUnicode_Check(result)) {

  000a9	48 8b 44 24 48	 mov	 rax, QWORD PTR result$[rsp]
  000ae	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000b2	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000b8	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000bd	85 c0		 test	 eax, eax
  000bf	74 24		 je	 SHORT $LN29@builtin_su

; 1959 :             PyErr_SetString(PyExc_TypeError,
; 1960 :                 "sum() can't sum strings [use ''.join(seq) instead]");

  000c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@LBCGIKCI@sum?$CI?$CJ?5can?8t?5sum?5strings?5?$FLuse?5?8?8?4@
  000c8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000cf	e8 00 00 00 00	 call	 PyErr_SetString

; 1961 :             Py_DECREF(iter);

  000d4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR iter$[rsp]
  000d9	e8 00 00 00 00	 call	 _Py_DecRef

; 1962 :             return NULL;

  000de	33 c0		 xor	 eax, eax
  000e0	e9 1a 04 00 00	 jmp	 $LN35@builtin_su
$LN29@builtin_su:

; 1963 :         }
; 1964 :         if (PyBytes_Check(result)) {

  000e5	48 8b 44 24 48	 mov	 rax, QWORD PTR result$[rsp]
  000ea	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000ee	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000f4	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  000f9	85 c0		 test	 eax, eax
  000fb	74 24		 je	 SHORT $LN28@builtin_su

; 1965 :             PyErr_SetString(PyExc_TypeError,
; 1966 :                 "sum() can't sum bytes [use b''.join(seq) instead]");

  000fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@BKCBGKCB@sum?$CI?$CJ?5can?8t?5sum?5bytes?5?$FLuse?5b?8?8?4j@
  00104	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0010b	e8 00 00 00 00	 call	 PyErr_SetString

; 1967 :             Py_DECREF(iter);

  00110	48 8b 4c 24 30	 mov	 rcx, QWORD PTR iter$[rsp]
  00115	e8 00 00 00 00	 call	 _Py_DecRef

; 1968 :             return NULL;

  0011a	33 c0		 xor	 eax, eax
  0011c	e9 de 03 00 00	 jmp	 $LN35@builtin_su
$LN28@builtin_su:

; 1969 :         }
; 1970 :         if (PyByteArray_Check(result)) {

  00121	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyByteArray_Type
  00128	48 8b 4c 24 48	 mov	 rcx, QWORD PTR result$[rsp]
  0012d	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00131	74 19		 je	 SHORT $LN26@builtin_su
  00133	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyByteArray_Type
  0013a	48 8b 44 24 48	 mov	 rax, QWORD PTR result$[rsp]
  0013f	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00143	e8 00 00 00 00	 call	 PyType_IsSubtype
  00148	85 c0		 test	 eax, eax
  0014a	74 24		 je	 SHORT $LN27@builtin_su
$LN26@builtin_su:

; 1971 :             PyErr_SetString(PyExc_TypeError,
; 1972 :                 "sum() can't sum bytearray [use b''.join(seq) instead]");

  0014c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DG@IAOOBLDH@sum?$CI?$CJ?5can?8t?5sum?5bytearray?5?$FLuse?5b@
  00153	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0015a	e8 00 00 00 00	 call	 PyErr_SetString

; 1973 :             Py_DECREF(iter);

  0015f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR iter$[rsp]
  00164	e8 00 00 00 00	 call	 _Py_DecRef

; 1974 :             return NULL;

  00169	33 c0		 xor	 eax, eax
  0016b	e9 8f 03 00 00	 jmp	 $LN35@builtin_su
$LN27@builtin_su:

; 1975 :         }
; 1976 : 
; 1977 :         Py_INCREF(result);

  00170	48 8b 4c 24 48	 mov	 rcx, QWORD PTR result$[rsp]
  00175	e8 00 00 00 00	 call	 _Py_IncRef
$LN30@builtin_su:

; 1978 :     }
; 1979 : 
; 1980 : #ifndef SLOW_SUM
; 1981 :     /* Fast addition by keeping temporary sums in C instead of new Python objects.
; 1982 :        Assumes all inputs are the same type.  If the assumption fails, default
; 1983 :        to the more general routine.
; 1984 :     */
; 1985 :     if (PyLong_CheckExact(result)) {

  0017a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyLong_Type
  00181	48 8b 4c 24 48	 mov	 rcx, QWORD PTR result$[rsp]
  00186	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0018a	0f 85 6d 01 00
	00		 jne	 $LN25@builtin_su

; 1986 :         int overflow;
; 1987 :         long i_result = PyLong_AsLongAndOverflow(result, &overflow);

  00190	48 8d 54 24 58	 lea	 rdx, QWORD PTR overflow$23169[rsp]
  00195	48 8b 4c 24 48	 mov	 rcx, QWORD PTR result$[rsp]
  0019a	e8 00 00 00 00	 call	 PyLong_AsLongAndOverflow
  0019f	89 44 24 5c	 mov	 DWORD PTR i_result$23170[rsp], eax

; 1988 :         /* If this already overflowed, don't even enter the loop. */
; 1989 :         if (overflow == 0) {

  001a3	83 7c 24 58 00	 cmp	 DWORD PTR overflow$23169[rsp], 0
  001a8	75 13		 jne	 SHORT $LN24@builtin_su

; 1990 :             Py_DECREF(result);

  001aa	48 8b 4c 24 48	 mov	 rcx, QWORD PTR result$[rsp]
  001af	e8 00 00 00 00	 call	 _Py_DecRef

; 1991 :             result = NULL;

  001b4	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0
$LN24@builtin_su:
$LN37@builtin_su:
$LN23@builtin_su:

; 1992 :         }
; 1993 :         while(result == NULL) {

  001bd	48 83 7c 24 48
	00		 cmp	 QWORD PTR result$[rsp], 0
  001c3	0f 85 34 01 00
	00		 jne	 $LN22@builtin_su

; 1994 :             item = PyIter_Next(iter);

  001c9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR iter$[rsp]
  001ce	e8 00 00 00 00	 call	 PyIter_Next
  001d3	48 89 44 24 50	 mov	 QWORD PTR item$[rsp], rax

; 1995 :             if (item == NULL) {

  001d8	48 83 7c 24 50
	00		 cmp	 QWORD PTR item$[rsp], 0
  001de	75 29		 jne	 SHORT $LN21@builtin_su

; 1996 :                 Py_DECREF(iter);

  001e0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR iter$[rsp]
  001e5	e8 00 00 00 00	 call	 _Py_DecRef

; 1997 :                 if (PyErr_Occurred())

  001ea	e8 00 00 00 00	 call	 PyErr_Occurred
  001ef	48 85 c0	 test	 rax, rax
  001f2	74 07		 je	 SHORT $LN20@builtin_su

; 1998 :                     return NULL;

  001f4	33 c0		 xor	 eax, eax
  001f6	e9 04 03 00 00	 jmp	 $LN35@builtin_su
$LN20@builtin_su:

; 1999 :                 return PyLong_FromLong(i_result);

  001fb	8b 4c 24 5c	 mov	 ecx, DWORD PTR i_result$23170[rsp]
  001ff	e8 00 00 00 00	 call	 PyLong_FromLong
  00204	e9 f6 02 00 00	 jmp	 $LN35@builtin_su
$LN21@builtin_su:

; 2000 :             }
; 2001 :             if (PyLong_CheckExact(item)) {

  00209	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyLong_Type
  00210	48 8b 4c 24 50	 mov	 rcx, QWORD PTR item$[rsp]
  00215	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00219	75 61		 jne	 SHORT $LN19@builtin_su

; 2002 :                 long b = PyLong_AsLongAndOverflow(item, &overflow);

  0021b	48 8d 54 24 58	 lea	 rdx, QWORD PTR overflow$23169[rsp]
  00220	48 8b 4c 24 50	 mov	 rcx, QWORD PTR item$[rsp]
  00225	e8 00 00 00 00	 call	 PyLong_AsLongAndOverflow
  0022a	89 44 24 64	 mov	 DWORD PTR b$23185[rsp], eax

; 2003 :                 long x = i_result + b;

  0022e	8b 44 24 64	 mov	 eax, DWORD PTR b$23185[rsp]
  00232	8b 4c 24 5c	 mov	 ecx, DWORD PTR i_result$23170[rsp]
  00236	03 c8		 add	 ecx, eax
  00238	8b c1		 mov	 eax, ecx
  0023a	89 44 24 60	 mov	 DWORD PTR x$23186[rsp], eax

; 2004 :                 if (overflow == 0 && ((x^i_result) >= 0 || (x^b) >= 0)) {

  0023e	83 7c 24 58 00	 cmp	 DWORD PTR overflow$23169[rsp], 0
  00243	75 37		 jne	 SHORT $LN18@builtin_su
  00245	8b 44 24 5c	 mov	 eax, DWORD PTR i_result$23170[rsp]
  00249	8b 4c 24 60	 mov	 ecx, DWORD PTR x$23186[rsp]
  0024d	33 c8		 xor	 ecx, eax
  0024f	8b c1		 mov	 eax, ecx
  00251	85 c0		 test	 eax, eax
  00253	7d 10		 jge	 SHORT $LN17@builtin_su
  00255	8b 44 24 64	 mov	 eax, DWORD PTR b$23185[rsp]
  00259	8b 4c 24 60	 mov	 ecx, DWORD PTR x$23186[rsp]
  0025d	33 c8		 xor	 ecx, eax
  0025f	8b c1		 mov	 eax, ecx
  00261	85 c0		 test	 eax, eax
  00263	7c 17		 jl	 SHORT $LN18@builtin_su
$LN17@builtin_su:

; 2005 :                     i_result = x;

  00265	8b 44 24 60	 mov	 eax, DWORD PTR x$23186[rsp]
  00269	89 44 24 5c	 mov	 DWORD PTR i_result$23170[rsp], eax

; 2006 :                     Py_DECREF(item);

  0026d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR item$[rsp]
  00272	e8 00 00 00 00	 call	 _Py_DecRef

; 2007 :                     continue;

  00277	e9 41 ff ff ff	 jmp	 $LN23@builtin_su
$LN18@builtin_su:
$LN19@builtin_su:

; 2008 :                 }
; 2009 :             }
; 2010 :             /* Either overflowed or is not an int. Restore real objects and process normally */
; 2011 :             result = PyLong_FromLong(i_result);

  0027c	8b 4c 24 5c	 mov	 ecx, DWORD PTR i_result$23170[rsp]
  00280	e8 00 00 00 00	 call	 PyLong_FromLong
  00285	48 89 44 24 48	 mov	 QWORD PTR result$[rsp], rax

; 2012 :             if (result == NULL) {

  0028a	48 83 7c 24 48
	00		 cmp	 QWORD PTR result$[rsp], 0
  00290	75 1b		 jne	 SHORT $LN16@builtin_su

; 2013 :                 Py_DECREF(item);

  00292	48 8b 4c 24 50	 mov	 rcx, QWORD PTR item$[rsp]
  00297	e8 00 00 00 00	 call	 _Py_DecRef

; 2014 :                 Py_DECREF(iter);

  0029c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR iter$[rsp]
  002a1	e8 00 00 00 00	 call	 _Py_DecRef

; 2015 :                 return NULL;

  002a6	33 c0		 xor	 eax, eax
  002a8	e9 52 02 00 00	 jmp	 $LN35@builtin_su
$LN16@builtin_su:

; 2016 :             }
; 2017 :             temp = PyNumber_Add(result, item);

  002ad	48 8b 54 24 50	 mov	 rdx, QWORD PTR item$[rsp]
  002b2	48 8b 4c 24 48	 mov	 rcx, QWORD PTR result$[rsp]
  002b7	e8 00 00 00 00	 call	 PyNumber_Add
  002bc	48 89 44 24 38	 mov	 QWORD PTR temp$[rsp], rax

; 2018 :             Py_DECREF(result);

  002c1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR result$[rsp]
  002c6	e8 00 00 00 00	 call	 _Py_DecRef

; 2019 :             Py_DECREF(item);

  002cb	48 8b 4c 24 50	 mov	 rcx, QWORD PTR item$[rsp]
  002d0	e8 00 00 00 00	 call	 _Py_DecRef

; 2020 :             result = temp;

  002d5	48 8b 44 24 38	 mov	 rax, QWORD PTR temp$[rsp]
  002da	48 89 44 24 48	 mov	 QWORD PTR result$[rsp], rax

; 2021 :             if (result == NULL) {

  002df	48 83 7c 24 48
	00		 cmp	 QWORD PTR result$[rsp], 0
  002e5	75 11		 jne	 SHORT $LN15@builtin_su

; 2022 :                 Py_DECREF(iter);

  002e7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR iter$[rsp]
  002ec	e8 00 00 00 00	 call	 _Py_DecRef

; 2023 :                 return NULL;

  002f1	33 c0		 xor	 eax, eax
  002f3	e9 07 02 00 00	 jmp	 $LN35@builtin_su
$LN15@builtin_su:

; 2024 :             }
; 2025 :         }

  002f8	e9 c0 fe ff ff	 jmp	 $LN37@builtin_su
$LN22@builtin_su:
$LN25@builtin_su:

; 2026 :     }
; 2027 : 
; 2028 :     if (PyFloat_CheckExact(result)) {

  002fd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFloat_Type
  00304	48 8b 4c 24 48	 mov	 rcx, QWORD PTR result$[rsp]
  00309	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0030d	0f 85 69 01 00
	00		 jne	 $LN14@builtin_su

; 2029 :         double f_result = PyFloat_AS_DOUBLE(result);

  00313	48 8b 44 24 48	 mov	 rax, QWORD PTR result$[rsp]
  00318	f2 0f 10 40 60	 movsdx	 xmm0, QWORD PTR [rax+96]
  0031d	f2 0f 11 44 24
	68		 movsdx	 QWORD PTR f_result$23203[rsp], xmm0

; 2030 :         Py_DECREF(result);

  00323	48 8b 4c 24 48	 mov	 rcx, QWORD PTR result$[rsp]
  00328	e8 00 00 00 00	 call	 _Py_DecRef

; 2031 :         result = NULL;

  0032d	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0
$LN39@builtin_su:
$LN38@builtin_su:
$LN13@builtin_su:

; 2032 :         while(result == NULL) {

  00336	48 83 7c 24 48
	00		 cmp	 QWORD PTR result$[rsp], 0
  0033c	0f 85 3a 01 00
	00		 jne	 $LN12@builtin_su

; 2033 :             item = PyIter_Next(iter);

  00342	48 8b 4c 24 30	 mov	 rcx, QWORD PTR iter$[rsp]
  00347	e8 00 00 00 00	 call	 PyIter_Next
  0034c	48 89 44 24 50	 mov	 QWORD PTR item$[rsp], rax

; 2034 :             if (item == NULL) {

  00351	48 83 7c 24 50
	00		 cmp	 QWORD PTR item$[rsp], 0
  00357	75 2b		 jne	 SHORT $LN11@builtin_su

; 2035 :                 Py_DECREF(iter);

  00359	48 8b 4c 24 30	 mov	 rcx, QWORD PTR iter$[rsp]
  0035e	e8 00 00 00 00	 call	 _Py_DecRef

; 2036 :                 if (PyErr_Occurred())

  00363	e8 00 00 00 00	 call	 PyErr_Occurred
  00368	48 85 c0	 test	 rax, rax
  0036b	74 07		 je	 SHORT $LN10@builtin_su

; 2037 :                     return NULL;

  0036d	33 c0		 xor	 eax, eax
  0036f	e9 8b 01 00 00	 jmp	 $LN35@builtin_su
$LN10@builtin_su:

; 2038 :                 return PyFloat_FromDouble(f_result);

  00374	f2 0f 10 44 24
	68		 movsdx	 xmm0, QWORD PTR f_result$23203[rsp]
  0037a	e8 00 00 00 00	 call	 PyFloat_FromDouble
  0037f	e9 7b 01 00 00	 jmp	 $LN35@builtin_su
$LN11@builtin_su:

; 2039 :             }
; 2040 :             if (PyFloat_CheckExact(item)) {

  00384	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFloat_Type
  0038b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR item$[rsp]
  00390	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00394	75 2d		 jne	 SHORT $LN9@builtin_su

; 2041 :                 PyFPE_START_PROTECT("add", Py_DECREF(item); Py_DECREF(iter); return 0)
; 2042 :                 f_result += PyFloat_AS_DOUBLE(item);

  00396	48 8b 44 24 50	 mov	 rax, QWORD PTR item$[rsp]
  0039b	f2 0f 10 40 60	 movsdx	 xmm0, QWORD PTR [rax+96]
  003a0	f2 0f 10 4c 24
	68		 movsdx	 xmm1, QWORD PTR f_result$23203[rsp]
  003a6	f2 0f 58 c8	 addsd	 xmm1, xmm0
  003aa	66 0f 28 c1	 movapd	 xmm0, xmm1
  003ae	f2 0f 11 44 24
	68		 movsdx	 QWORD PTR f_result$23203[rsp], xmm0

; 2043 :                 PyFPE_END_PROTECT(f_result)
; 2044 :                 Py_DECREF(item);

  003b4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR item$[rsp]
  003b9	e8 00 00 00 00	 call	 _Py_DecRef

; 2045 :                 continue;

  003be	e9 73 ff ff ff	 jmp	 $LN13@builtin_su
$LN9@builtin_su:

; 2046 :             }
; 2047 :             if (PyLong_CheckExact(item)) {

  003c3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyLong_Type
  003ca	48 8b 4c 24 50	 mov	 rcx, QWORD PTR item$[rsp]
  003cf	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  003d3	75 47		 jne	 SHORT $LN8@builtin_su

; 2048 :                 long value;
; 2049 :                 int overflow;
; 2050 :                 value = PyLong_AsLongAndOverflow(item, &overflow);

  003d5	48 8d 54 24 74	 lea	 rdx, QWORD PTR overflow$23223[rsp]
  003da	48 8b 4c 24 50	 mov	 rcx, QWORD PTR item$[rsp]
  003df	e8 00 00 00 00	 call	 PyLong_AsLongAndOverflow
  003e4	89 44 24 70	 mov	 DWORD PTR value$23222[rsp], eax

; 2051 :                 if (!overflow) {

  003e8	83 7c 24 74 00	 cmp	 DWORD PTR overflow$23223[rsp], 0
  003ed	75 2d		 jne	 SHORT $LN7@builtin_su

; 2052 :                     PyFPE_START_PROTECT("add", Py_DECREF(item); Py_DECREF(iter); return 0)
; 2053 :                     f_result += (double)value;

  003ef	66 0f 6e 44 24
	70		 movd	 xmm0, DWORD PTR value$23222[rsp]
  003f5	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  003f9	f2 0f 10 4c 24
	68		 movsdx	 xmm1, QWORD PTR f_result$23203[rsp]
  003ff	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00403	66 0f 28 c1	 movapd	 xmm0, xmm1
  00407	f2 0f 11 44 24
	68		 movsdx	 QWORD PTR f_result$23203[rsp], xmm0

; 2054 :                     PyFPE_END_PROTECT(f_result)
; 2055 :                     Py_DECREF(item);

  0040d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR item$[rsp]
  00412	e8 00 00 00 00	 call	 _Py_DecRef

; 2056 :                     continue;

  00417	e9 1a ff ff ff	 jmp	 $LN38@builtin_su
$LN7@builtin_su:
$LN8@builtin_su:

; 2057 :                 }
; 2058 :             }
; 2059 :             result = PyFloat_FromDouble(f_result);

  0041c	f2 0f 10 44 24
	68		 movsdx	 xmm0, QWORD PTR f_result$23203[rsp]
  00422	e8 00 00 00 00	 call	 PyFloat_FromDouble
  00427	48 89 44 24 48	 mov	 QWORD PTR result$[rsp], rax

; 2060 :             temp = PyNumber_Add(result, item);

  0042c	48 8b 54 24 50	 mov	 rdx, QWORD PTR item$[rsp]
  00431	48 8b 4c 24 48	 mov	 rcx, QWORD PTR result$[rsp]
  00436	e8 00 00 00 00	 call	 PyNumber_Add
  0043b	48 89 44 24 38	 mov	 QWORD PTR temp$[rsp], rax

; 2061 :             Py_DECREF(result);

  00440	48 8b 4c 24 48	 mov	 rcx, QWORD PTR result$[rsp]
  00445	e8 00 00 00 00	 call	 _Py_DecRef

; 2062 :             Py_DECREF(item);

  0044a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR item$[rsp]
  0044f	e8 00 00 00 00	 call	 _Py_DecRef

; 2063 :             result = temp;

  00454	48 8b 44 24 38	 mov	 rax, QWORD PTR temp$[rsp]
  00459	48 89 44 24 48	 mov	 QWORD PTR result$[rsp], rax

; 2064 :             if (result == NULL) {

  0045e	48 83 7c 24 48
	00		 cmp	 QWORD PTR result$[rsp], 0
  00464	75 11		 jne	 SHORT $LN6@builtin_su

; 2065 :                 Py_DECREF(iter);

  00466	48 8b 4c 24 30	 mov	 rcx, QWORD PTR iter$[rsp]
  0046b	e8 00 00 00 00	 call	 _Py_DecRef

; 2066 :                 return NULL;

  00470	33 c0		 xor	 eax, eax
  00472	e9 88 00 00 00	 jmp	 $LN35@builtin_su
$LN6@builtin_su:

; 2067 :             }
; 2068 :         }

  00477	e9 ba fe ff ff	 jmp	 $LN39@builtin_su
$LN12@builtin_su:
$LN14@builtin_su:
$LN5@builtin_su:

; 2069 :     }
; 2070 : #endif
; 2071 : 
; 2072 :     for(;;) {
; 2073 :         item = PyIter_Next(iter);

  0047c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR iter$[rsp]
  00481	e8 00 00 00 00	 call	 PyIter_Next
  00486	48 89 44 24 50	 mov	 QWORD PTR item$[rsp], rax

; 2074 :         if (item == NULL) {

  0048b	48 83 7c 24 50
	00		 cmp	 QWORD PTR item$[rsp], 0
  00491	75 1f		 jne	 SHORT $LN3@builtin_su

; 2075 :             /* error, or end-of-sequence */
; 2076 :             if (PyErr_Occurred()) {

  00493	e8 00 00 00 00	 call	 PyErr_Occurred
  00498	48 85 c0	 test	 rax, rax
  0049b	74 13		 je	 SHORT $LN2@builtin_su

; 2077 :                 Py_DECREF(result);

  0049d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR result$[rsp]
  004a2	e8 00 00 00 00	 call	 _Py_DecRef

; 2078 :                 result = NULL;

  004a7	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0
$LN2@builtin_su:

; 2079 :             }
; 2080 :             break;

  004b0	eb 3e		 jmp	 SHORT $LN4@builtin_su
$LN3@builtin_su:

; 2081 :         }
; 2082 :         /* It's tempting to use PyNumber_InPlaceAdd instead of
; 2083 :            PyNumber_Add here, to avoid quadratic running time
; 2084 :            when doing 'sum(list_of_lists, [])'.  However, this
; 2085 :            would produce a change in behaviour: a snippet like
; 2086 : 
; 2087 :              empty = []
; 2088 :              sum([[x] for x in range(10)], empty)
; 2089 : 
; 2090 :            would change the value of empty. */
; 2091 :         temp = PyNumber_Add(result, item);

  004b2	48 8b 54 24 50	 mov	 rdx, QWORD PTR item$[rsp]
  004b7	48 8b 4c 24 48	 mov	 rcx, QWORD PTR result$[rsp]
  004bc	e8 00 00 00 00	 call	 PyNumber_Add
  004c1	48 89 44 24 38	 mov	 QWORD PTR temp$[rsp], rax

; 2092 :         Py_DECREF(result);

  004c6	48 8b 4c 24 48	 mov	 rcx, QWORD PTR result$[rsp]
  004cb	e8 00 00 00 00	 call	 _Py_DecRef

; 2093 :         Py_DECREF(item);

  004d0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR item$[rsp]
  004d5	e8 00 00 00 00	 call	 _Py_DecRef

; 2094 :         result = temp;

  004da	48 8b 44 24 38	 mov	 rax, QWORD PTR temp$[rsp]
  004df	48 89 44 24 48	 mov	 QWORD PTR result$[rsp], rax

; 2095 :         if (result == NULL)

  004e4	48 83 7c 24 48
	00		 cmp	 QWORD PTR result$[rsp], 0
  004ea	75 02		 jne	 SHORT $LN1@builtin_su

; 2096 :             break;

  004ec	eb 02		 jmp	 SHORT $LN4@builtin_su
$LN1@builtin_su:

; 2097 :     }

  004ee	eb 8c		 jmp	 SHORT $LN5@builtin_su
$LN4@builtin_su:

; 2098 :     Py_DECREF(iter);

  004f0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR iter$[rsp]
  004f5	e8 00 00 00 00	 call	 _Py_DecRef

; 2099 :     return result;

  004fa	48 8b 44 24 48	 mov	 rax, QWORD PTR result$[rsp]
$LN35@builtin_su:

; 2100 : }

  004ff	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00506	c3		 ret	 0
builtin_sum ENDP
_TEXT	ENDS
EXTRN	PyObject_IsInstance:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_isinstance DD imagerel builtin_isinstance
	DD	imagerel builtin_isinstance+115
	DD	imagerel $unwind$builtin_isinstance
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_isinstance DD 010e01H
	DD	0a20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT builtin_isinstance
_TEXT	SEGMENT
retval$ = 48
cls$ = 56
inst$ = 64
self$ = 96
args$ = 104
builtin_isinstance PROC					; COMDAT

; 2112 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 2113 :     PyObject *inst;
; 2114 :     PyObject *cls;
; 2115 :     int retval;
; 2116 : 
; 2117 :     if (!PyArg_UnpackTuple(args, "isinstance", 2, 2, &inst, &cls))

  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR cls$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 40	 lea	 rax, QWORD PTR inst$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@PHLNOMHE@isinstance?$AA@
  00035	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN2@builtin_is

; 2118 :         return NULL;

  00043	33 c0		 xor	 eax, eax
  00045	eb 27		 jmp	 SHORT $LN3@builtin_is
$LN2@builtin_is:

; 2119 : 
; 2120 :     retval = PyObject_IsInstance(inst, cls);

  00047	48 8b 54 24 38	 mov	 rdx, QWORD PTR cls$[rsp]
  0004c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  00051	e8 00 00 00 00	 call	 PyObject_IsInstance
  00056	89 44 24 30	 mov	 DWORD PTR retval$[rsp], eax

; 2121 :     if (retval < 0)

  0005a	83 7c 24 30 00	 cmp	 DWORD PTR retval$[rsp], 0
  0005f	7d 04		 jge	 SHORT $LN1@builtin_is

; 2122 :         return NULL;

  00061	33 c0		 xor	 eax, eax
  00063	eb 09		 jmp	 SHORT $LN3@builtin_is
$LN1@builtin_is:

; 2123 :     return PyBool_FromLong(retval);

  00065	8b 4c 24 30	 mov	 ecx, DWORD PTR retval$[rsp]
  00069	e8 00 00 00 00	 call	 PyBool_FromLong
$LN3@builtin_is:

; 2124 : }

  0006e	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00072	c3		 ret	 0
builtin_isinstance ENDP
_TEXT	ENDS
EXTRN	PyObject_IsSubclass:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_issubclass DD imagerel builtin_issubclass
	DD	imagerel builtin_issubclass+115
	DD	imagerel $unwind$builtin_issubclass
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_issubclass DD 010e01H
	DD	0a20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT builtin_issubclass
_TEXT	SEGMENT
derived$ = 48
retval$ = 56
cls$ = 64
self$ = 96
args$ = 104
builtin_issubclass PROC					; COMDAT

; 2137 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 2138 :     PyObject *derived;
; 2139 :     PyObject *cls;
; 2140 :     int retval;
; 2141 : 
; 2142 :     if (!PyArg_UnpackTuple(args, "issubclass", 2, 2, &derived, &cls))

  0000e	48 8d 44 24 40	 lea	 rax, QWORD PTR cls$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR derived$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@JALFGOPP@issubclass?$AA@
  00035	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN2@builtin_is@2

; 2143 :         return NULL;

  00043	33 c0		 xor	 eax, eax
  00045	eb 27		 jmp	 SHORT $LN3@builtin_is@2
$LN2@builtin_is@2:

; 2144 : 
; 2145 :     retval = PyObject_IsSubclass(derived, cls);

  00047	48 8b 54 24 40	 mov	 rdx, QWORD PTR cls$[rsp]
  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR derived$[rsp]
  00051	e8 00 00 00 00	 call	 PyObject_IsSubclass
  00056	89 44 24 38	 mov	 DWORD PTR retval$[rsp], eax

; 2146 :     if (retval < 0)

  0005a	83 7c 24 38 00	 cmp	 DWORD PTR retval$[rsp], 0
  0005f	7d 04		 jge	 SHORT $LN1@builtin_is@2

; 2147 :         return NULL;

  00061	33 c0		 xor	 eax, eax
  00063	eb 09		 jmp	 SHORT $LN3@builtin_is@2
$LN1@builtin_is@2:

; 2148 :     return PyBool_FromLong(retval);

  00065	8b 4c 24 38	 mov	 ecx, DWORD PTR retval$[rsp]
  00069	e8 00 00 00 00	 call	 PyBool_FromLong
$LN3@builtin_is@2:

; 2149 : }

  0006e	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00072	c3		 ret	 0
builtin_issubclass ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@CCIMOOBM@zip?5argument?5?$CD?$CFzd?5must?5support?5i@ ; `string'
PUBLIC	??_C@_1CI@KAJNBGPM@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_05GJIBENOI@zip?$CI?$CJ?$AA@		; `string'
EXTRN	PySequence_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip_new DD imagerel zip_new
	DD	imagerel zip_new+551
	DD	imagerel $unwind$zip_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip_new DD 011301H
	DD	0c213H
xdata	ENDS
;	COMDAT ??_C@_0CJ@CCIMOOBM@zip?5argument?5?$CD?$CFzd?5must?5support?5i@
CONST	SEGMENT
??_C@_0CJ@CCIMOOBM@zip?5argument?5?$CD?$CFzd?5must?5support?5i@ DB 'zip a'
	DB	'rgument #%zd must support iteration', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@KAJNBGPM@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@KAJNBGPM@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'T', 00H, 'u', 00H, 'p', 00H, 'l', 00H, 'e', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'a', 00H, 'r', 00H, 'g', 00H, 's', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05GJIBENOI@zip?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_05GJIBENOI@zip?$CI?$CJ?$AA@ DB 'zip()', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT zip_new
_TEXT	SEGMENT
tuplesize$ = 32
i$ = 40
ittuple$ = 48
lz$ = 56
result$ = 64
it$23310 = 72
item$23308 = 80
type$ = 112
args$ = 120
kwds$ = 128
zip_new	PROC						; COMDAT

; 2168 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 2169 :     zipobject *lz;
; 2170 :     Py_ssize_t i;
; 2171 :     PyObject *ittuple;  /* tuple of iterators */
; 2172 :     PyObject *result;
; 2173 :     Py_ssize_t tuplesize = PySequence_Length(args);

  00013	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  00018	e8 00 00 00 00	 call	 PySequence_Size
  0001d	48 89 44 24 20	 mov	 QWORD PTR tuplesize$[rsp], rax

; 2174 : 
; 2175 :     if (type == &PyZip_Type && !_PyArg_NoKeywords("zip()", kwds))

  00022	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyZip_Type
  00029	48 39 44 24 70	 cmp	 QWORD PTR type$[rsp], rax
  0002e	75 1f		 jne	 SHORT $LN12@zip_new
  00030	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05GJIBENOI@zip?$CI?$CJ?$AA@
  0003f	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  00044	85 c0		 test	 eax, eax
  00046	75 07		 jne	 SHORT $LN12@zip_new

; 2176 :         return NULL;

  00048	33 c0		 xor	 eax, eax
  0004a	e9 d3 01 00 00	 jmp	 $LN13@zip_new
$LN12@zip_new:

; 2177 : 
; 2178 :     /* args must be a tuple */
; 2179 :     assert(PyTuple_Check(args));

  0004f	48 8b 44 24 78	 mov	 rax, QWORD PTR args$[rsp]
  00054	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00058	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0005e	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00063	85 c0		 test	 eax, eax
  00065	75 1c		 jne	 SHORT $LN15@zip_new
  00067	41 b8 83 08 00
	00		 mov	 r8d, 2179		; 00000883H
  0006d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@NKNCFJLO@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAb?$AAl?$AAt?$AAi?$AAn?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00074	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@KAJNBGPM@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?$AA@
  0007b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00081	33 c0		 xor	 eax, eax
$LN15@zip_new:

; 2180 : 
; 2181 :     /* obtain iterators */
; 2182 :     ittuple = PyTuple_New(tuplesize);

  00083	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tuplesize$[rsp]
  00088	e8 00 00 00 00	 call	 PyTuple_New
  0008d	48 89 44 24 30	 mov	 QWORD PTR ittuple$[rsp], rax

; 2183 :     if (ittuple == NULL)

  00092	48 83 7c 24 30
	00		 cmp	 QWORD PTR ittuple$[rsp], 0
  00098	75 07		 jne	 SHORT $LN11@zip_new

; 2184 :         return NULL;

  0009a	33 c0		 xor	 eax, eax
  0009c	e9 81 01 00 00	 jmp	 $LN13@zip_new
$LN11@zip_new:

; 2185 :     for (i=0; i < tuplesize; ++i) {

  000a1	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  000aa	eb 0d		 jmp	 SHORT $LN10@zip_new
$LN9@zip_new:
  000ac	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  000b1	48 ff c0	 inc	 rax
  000b4	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN10@zip_new:
  000b9	48 8b 44 24 20	 mov	 rax, QWORD PTR tuplesize$[rsp]
  000be	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  000c3	0f 8d 83 00 00
	00		 jge	 $LN8@zip_new

; 2186 :         PyObject *item = PyTuple_GET_ITEM(args, i);

  000c9	48 8b 44 24 78	 mov	 rax, QWORD PTR args$[rsp]
  000ce	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  000d3	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  000d8	48 89 44 24 50	 mov	 QWORD PTR item$23308[rsp], rax

; 2187 :         PyObject *it = PyObject_GetIter(item);

  000dd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR item$23308[rsp]
  000e2	e8 00 00 00 00	 call	 PyObject_GetIter
  000e7	48 89 44 24 48	 mov	 QWORD PTR it$23310[rsp], rax

; 2188 :         if (it == NULL) {

  000ec	48 83 7c 24 48
	00		 cmp	 QWORD PTR it$23310[rsp], 0
  000f2	75 3f		 jne	 SHORT $LN7@zip_new

; 2189 :             if (PyErr_ExceptionMatches(PyExc_TypeError))

  000f4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000fb	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00100	85 c0		 test	 eax, eax
  00102	74 1e		 je	 SHORT $LN6@zip_new

; 2190 :                 PyErr_Format(PyExc_TypeError,
; 2191 :                     "zip argument #%zd must support iteration",
; 2192 :                     i+1);

  00104	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  00109	48 ff c0	 inc	 rax
  0010c	4c 8b c0	 mov	 r8, rax
  0010f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@CCIMOOBM@zip?5argument?5?$CD?$CFzd?5must?5support?5i@
  00116	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0011d	e8 00 00 00 00	 call	 PyErr_Format
$LN6@zip_new:

; 2193 :             Py_DECREF(ittuple);

  00122	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ittuple$[rsp]
  00127	e8 00 00 00 00	 call	 _Py_DecRef

; 2194 :             return NULL;

  0012c	33 c0		 xor	 eax, eax
  0012e	e9 ef 00 00 00	 jmp	 $LN13@zip_new
$LN7@zip_new:

; 2195 :         }
; 2196 :         PyTuple_SET_ITEM(ittuple, i, it);

  00133	48 8b 44 24 30	 mov	 rax, QWORD PTR ittuple$[rsp]
  00138	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  0013d	48 8b 54 24 48	 mov	 rdx, QWORD PTR it$23310[rsp]
  00142	48 89 54 c8 70	 mov	 QWORD PTR [rax+rcx*8+112], rdx

; 2197 :     }

  00147	e9 60 ff ff ff	 jmp	 $LN9@zip_new
$LN8@zip_new:

; 2198 : 
; 2199 :     /* create a result holder */
; 2200 :     result = PyTuple_New(tuplesize);

  0014c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tuplesize$[rsp]
  00151	e8 00 00 00 00	 call	 PyTuple_New
  00156	48 89 44 24 40	 mov	 QWORD PTR result$[rsp], rax

; 2201 :     if (result == NULL) {

  0015b	48 83 7c 24 40
	00		 cmp	 QWORD PTR result$[rsp], 0
  00161	75 11		 jne	 SHORT $LN5@zip_new

; 2202 :         Py_DECREF(ittuple);

  00163	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ittuple$[rsp]
  00168	e8 00 00 00 00	 call	 _Py_DecRef

; 2203 :         return NULL;

  0016d	33 c0		 xor	 eax, eax
  0016f	e9 ae 00 00 00	 jmp	 $LN13@zip_new
$LN5@zip_new:

; 2204 :     }
; 2205 :     for (i=0 ; i < tuplesize ; i++) {

  00174	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0017d	eb 0d		 jmp	 SHORT $LN4@zip_new
$LN3@zip_new:
  0017f	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  00184	48 ff c0	 inc	 rax
  00187	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN4@zip_new:
  0018c	48 8b 44 24 20	 mov	 rax, QWORD PTR tuplesize$[rsp]
  00191	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  00196	7d 24		 jge	 SHORT $LN2@zip_new

; 2206 :         Py_INCREF(Py_None);

  00198	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0019f	e8 00 00 00 00	 call	 _Py_IncRef

; 2207 :         PyTuple_SET_ITEM(result, i, Py_None);

  001a4	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
  001a9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  001ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_NoneStruct
  001b5	48 89 54 c8 70	 mov	 QWORD PTR [rax+rcx*8+112], rdx

; 2208 :     }

  001ba	eb c3		 jmp	 SHORT $LN3@zip_new
$LN2@zip_new:

; 2209 : 
; 2210 :     /* create zipobject structure */
; 2211 :     lz = (zipobject *)type->tp_alloc(type, 0);

  001bc	33 d2		 xor	 edx, edx
  001be	48 8b 4c 24 70	 mov	 rcx, QWORD PTR type$[rsp]
  001c3	48 8b 44 24 70	 mov	 rax, QWORD PTR type$[rsp]
  001c8	ff 90 88 01 00
	00		 call	 QWORD PTR [rax+392]
  001ce	48 89 44 24 38	 mov	 QWORD PTR lz$[rsp], rax

; 2212 :     if (lz == NULL) {

  001d3	48 83 7c 24 38
	00		 cmp	 QWORD PTR lz$[rsp], 0
  001d9	75 18		 jne	 SHORT $LN1@zip_new

; 2213 :         Py_DECREF(ittuple);

  001db	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ittuple$[rsp]
  001e0	e8 00 00 00 00	 call	 _Py_DecRef

; 2214 :         Py_DECREF(result);

  001e5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR result$[rsp]
  001ea	e8 00 00 00 00	 call	 _Py_DecRef

; 2215 :         return NULL;

  001ef	33 c0		 xor	 eax, eax
  001f1	eb 2f		 jmp	 SHORT $LN13@zip_new
$LN1@zip_new:

; 2216 :     }
; 2217 :     lz->ittuple = ittuple;

  001f3	48 8b 44 24 38	 mov	 rax, QWORD PTR lz$[rsp]
  001f8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ittuple$[rsp]
  001fd	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 2218 :     lz->tuplesize = tuplesize;

  00201	48 8b 44 24 38	 mov	 rax, QWORD PTR lz$[rsp]
  00206	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tuplesize$[rsp]
  0020b	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 2219 :     lz->result = result;

  0020f	48 8b 44 24 38	 mov	 rax, QWORD PTR lz$[rsp]
  00214	48 8b 4c 24 40	 mov	 rcx, QWORD PTR result$[rsp]
  00219	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 2220 : 
; 2221 :     return (PyObject *)lz;

  0021d	48 8b 44 24 38	 mov	 rax, QWORD PTR lz$[rsp]
$LN13@zip_new:

; 2222 : }

  00222	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00226	c3		 ret	 0
zip_new	ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip_dealloc DD imagerel zip_dealloc
	DD	imagerel zip_dealloc+108
	DD	imagerel $unwind$zip_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zip_dealloc
_TEXT	SEGMENT
lz$ = 48
zip_dealloc PROC					; COMDAT

; 2226 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2227 :     PyObject_GC_UnTrack(lz);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR lz$[rsp]
  0000e	e8 00 00 00 00	 call	 PyObject_GC_UnTrack
$LN8@zip_deallo:

; 2228 :     Py_XDECREF(lz->ittuple);

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR lz$[rsp]
  00018	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0001d	74 0e		 je	 SHORT $LN5@zip_deallo
  0001f	48 8b 44 24 30	 mov	 rax, QWORD PTR lz$[rsp]
  00024	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00028	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@zip_deallo:
  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 e0		 jne	 SHORT $LN8@zip_deallo
$LN4@zip_deallo:

; 2229 :     Py_XDECREF(lz->result);

  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR lz$[rsp]
  00038	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0003d	74 0e		 je	 SHORT $LN1@zip_deallo
  0003f	48 8b 44 24 30	 mov	 rax, QWORD PTR lz$[rsp]
  00044	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00048	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@zip_deallo:
  0004d	33 c0		 xor	 eax, eax
  0004f	85 c0		 test	 eax, eax
  00051	75 e0		 jne	 SHORT $LN4@zip_deallo

; 2230 :     Py_TYPE(lz)->tp_free(lz);

  00053	48 8b 44 24 30	 mov	 rax, QWORD PTR lz$[rsp]
  00058	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0005c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR lz$[rsp]
  00061	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]

; 2231 : }

  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
zip_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@BOLPAOAI@zip_traverse?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip_traverse DD imagerel zip_traverse
	DD	imagerel zip_traverse+206
	DD	imagerel $unwind$zip_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0N@BOLPAOAI@zip_traverse?$AA@
CONST	SEGMENT
??_C@_0N@BOLPAOAI@zip_traverse?$AA@ DB 'zip_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT zip_traverse
_TEXT	SEGMENT
vret$23363 = 32
vret$23371 = 36
lz$ = 64
visit$ = 72
arg$ = 80
zip_traverse PROC					; COMDAT

; 2235 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN12@zip_traver:

; 2236 :     Py_VISIT(lz->ittuple);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN9@zip_traver
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 bc 08 00
	00		 mov	 r8d, 2236		; 000008bcH
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LBFDNFDG@?4?4?2Python?2bltinmodule?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOLPAOAI@zip_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@zip_traver:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR lz$[rsp]
  0003d	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00042	74 23		 je	 SHORT $LN8@zip_traver
  00044	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR lz$[rsp]
  0004e	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00052	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR vret$23363[rsp], eax
  0005a	83 7c 24 20 00	 cmp	 DWORD PTR vret$23363[rsp], 0
  0005f	74 06		 je	 SHORT $LN7@zip_traver
  00061	8b 44 24 20	 mov	 eax, DWORD PTR vret$23363[rsp]
  00065	eb 62		 jmp	 SHORT $LN13@zip_traver
$LN7@zip_traver:
$LN8@zip_traver:
  00067	33 c0		 xor	 eax, eax
  00069	85 c0		 test	 eax, eax
  0006b	75 a6		 jne	 SHORT $LN12@zip_traver
$LN6@zip_traver:

; 2237 :     Py_VISIT(lz->result);

  0006d	e8 00 00 00 00	 call	 _Py_PXCTX
  00072	85 c0		 test	 eax, eax
  00074	74 1c		 je	 SHORT $LN3@zip_traver
  00076	45 33 c9	 xor	 r9d, r9d
  00079	41 b8 bd 08 00
	00		 mov	 r8d, 2237		; 000008bdH
  0007f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LBFDNFDG@?4?4?2Python?2bltinmodule?4c?$AA@
  00086	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOLPAOAI@zip_traverse?$AA@
  0008d	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@zip_traver:
  00092	48 8b 44 24 40	 mov	 rax, QWORD PTR lz$[rsp]
  00097	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0009c	74 23		 je	 SHORT $LN2@zip_traver
  0009e	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  000a3	48 8b 44 24 40	 mov	 rax, QWORD PTR lz$[rsp]
  000a8	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  000ac	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  000b0	89 44 24 24	 mov	 DWORD PTR vret$23371[rsp], eax
  000b4	83 7c 24 24 00	 cmp	 DWORD PTR vret$23371[rsp], 0
  000b9	74 06		 je	 SHORT $LN1@zip_traver
  000bb	8b 44 24 24	 mov	 eax, DWORD PTR vret$23371[rsp]
  000bf	eb 08		 jmp	 SHORT $LN13@zip_traver
$LN1@zip_traver:
$LN2@zip_traver:
  000c1	33 c0		 xor	 eax, eax
  000c3	85 c0		 test	 eax, eax
  000c5	75 a6		 jne	 SHORT $LN6@zip_traver

; 2238 :     return 0;

  000c7	33 c0		 xor	 eax, eax
$LN13@zip_traver:

; 2239 : }

  000c9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000cd	c3		 ret	 0
zip_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip_next DD imagerel zip_next
	DD	imagerel zip_next+421
	DD	imagerel $unwind$zip_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip_next DD 010901H
	DD	0a209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zip_next
_TEXT	SEGMENT
it$ = 32
tuplesize$ = 40
i$ = 48
result$ = 56
olditem$ = 64
item$ = 72
lz$ = 96
zip_next PROC						; COMDAT

; 2243 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 2244 :     Py_ssize_t i;
; 2245 :     Py_ssize_t tuplesize = lz->tuplesize;

  00009	48 8b 44 24 60	 mov	 rax, QWORD PTR lz$[rsp]
  0000e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00012	48 89 44 24 28	 mov	 QWORD PTR tuplesize$[rsp], rax

; 2246 :     PyObject *result = lz->result;

  00017	48 8b 44 24 60	 mov	 rax, QWORD PTR lz$[rsp]
  0001c	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00020	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax

; 2247 :     PyObject *it;
; 2248 :     PyObject *item;
; 2249 :     PyObject *olditem;
; 2250 : 
; 2251 :     if (tuplesize == 0)

  00025	48 83 7c 24 28
	00		 cmp	 QWORD PTR tuplesize$[rsp], 0
  0002b	75 07		 jne	 SHORT $LN12@zip_next

; 2252 :         return NULL;

  0002d	33 c0		 xor	 eax, eax
  0002f	e9 6c 01 00 00	 jmp	 $LN13@zip_next
$LN12@zip_next:

; 2253 :     if (Py_REFCNT(result) == 1) {

  00034	48 8b 44 24 38	 mov	 rax, QWORD PTR result$[rsp]
  00039	48 83 78 50 01	 cmp	 QWORD PTR [rax+80], 1
  0003e	0f 85 b8 00 00
	00		 jne	 $LN11@zip_next

; 2254 :         Py_INCREF(result);

  00044	48 8b 4c 24 38	 mov	 rcx, QWORD PTR result$[rsp]
  00049	e8 00 00 00 00	 call	 _Py_IncRef

; 2255 :         for (i=0 ; i < tuplesize ; i++) {

  0004e	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00057	eb 0d		 jmp	 SHORT $LN10@zip_next
$LN9@zip_next:
  00059	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  0005e	48 ff c0	 inc	 rax
  00061	48 89 44 24 30	 mov	 QWORD PTR i$[rsp], rax
$LN10@zip_next:
  00066	48 8b 44 24 28	 mov	 rax, QWORD PTR tuplesize$[rsp]
  0006b	48 39 44 24 30	 cmp	 QWORD PTR i$[rsp], rax
  00070	0f 8d 81 00 00
	00		 jge	 $LN8@zip_next

; 2256 :             it = PyTuple_GET_ITEM(lz->ittuple, i);

  00076	48 8b 44 24 60	 mov	 rax, QWORD PTR lz$[rsp]
  0007b	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0007f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR i$[rsp]
  00084	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  00089	48 89 44 24 20	 mov	 QWORD PTR it$[rsp], rax

; 2257 :             item = (*Py_TYPE(it)->tp_iternext)(it);

  0008e	48 8b 44 24 20	 mov	 rax, QWORD PTR it$[rsp]
  00093	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00097	48 8b 4c 24 20	 mov	 rcx, QWORD PTR it$[rsp]
  0009c	ff 90 38 01 00
	00		 call	 QWORD PTR [rax+312]
  000a2	48 89 44 24 48	 mov	 QWORD PTR item$[rsp], rax

; 2258 :             if (item == NULL) {

  000a7	48 83 7c 24 48
	00		 cmp	 QWORD PTR item$[rsp], 0
  000ad	75 11		 jne	 SHORT $LN7@zip_next

; 2259 :                 Py_DECREF(result);

  000af	48 8b 4c 24 38	 mov	 rcx, QWORD PTR result$[rsp]
  000b4	e8 00 00 00 00	 call	 _Py_DecRef

; 2260 :                 return NULL;

  000b9	33 c0		 xor	 eax, eax
  000bb	e9 e0 00 00 00	 jmp	 $LN13@zip_next
$LN7@zip_next:

; 2261 :             }
; 2262 :             olditem = PyTuple_GET_ITEM(result, i);

  000c0	48 8b 44 24 38	 mov	 rax, QWORD PTR result$[rsp]
  000c5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR i$[rsp]
  000ca	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  000cf	48 89 44 24 40	 mov	 QWORD PTR olditem$[rsp], rax

; 2263 :             PyTuple_SET_ITEM(result, i, item);

  000d4	48 8b 44 24 38	 mov	 rax, QWORD PTR result$[rsp]
  000d9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR i$[rsp]
  000de	48 8b 54 24 48	 mov	 rdx, QWORD PTR item$[rsp]
  000e3	48 89 54 c8 70	 mov	 QWORD PTR [rax+rcx*8+112], rdx

; 2264 :             Py_DECREF(olditem);

  000e8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR olditem$[rsp]
  000ed	e8 00 00 00 00	 call	 _Py_DecRef

; 2265 :         }

  000f2	e9 62 ff ff ff	 jmp	 $LN9@zip_next
$LN8@zip_next:

; 2266 :     } else {

  000f7	e9 9f 00 00 00	 jmp	 $LN6@zip_next
$LN11@zip_next:

; 2267 :         result = PyTuple_New(tuplesize);

  000fc	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tuplesize$[rsp]
  00101	e8 00 00 00 00	 call	 PyTuple_New
  00106	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax

; 2268 :         if (result == NULL)

  0010b	48 83 7c 24 38
	00		 cmp	 QWORD PTR result$[rsp], 0
  00111	75 07		 jne	 SHORT $LN5@zip_next

; 2269 :             return NULL;

  00113	33 c0		 xor	 eax, eax
  00115	e9 86 00 00 00	 jmp	 $LN13@zip_next
$LN5@zip_next:

; 2270 :         for (i=0 ; i < tuplesize ; i++) {

  0011a	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00123	eb 0d		 jmp	 SHORT $LN4@zip_next
$LN3@zip_next:
  00125	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  0012a	48 ff c0	 inc	 rax
  0012d	48 89 44 24 30	 mov	 QWORD PTR i$[rsp], rax
$LN4@zip_next:
  00132	48 8b 44 24 28	 mov	 rax, QWORD PTR tuplesize$[rsp]
  00137	48 39 44 24 30	 cmp	 QWORD PTR i$[rsp], rax
  0013c	7d 5d		 jge	 SHORT $LN2@zip_next

; 2271 :             it = PyTuple_GET_ITEM(lz->ittuple, i);

  0013e	48 8b 44 24 60	 mov	 rax, QWORD PTR lz$[rsp]
  00143	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00147	48 8b 4c 24 30	 mov	 rcx, QWORD PTR i$[rsp]
  0014c	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  00151	48 89 44 24 20	 mov	 QWORD PTR it$[rsp], rax

; 2272 :             item = (*Py_TYPE(it)->tp_iternext)(it);

  00156	48 8b 44 24 20	 mov	 rax, QWORD PTR it$[rsp]
  0015b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0015f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR it$[rsp]
  00164	ff 90 38 01 00
	00		 call	 QWORD PTR [rax+312]
  0016a	48 89 44 24 48	 mov	 QWORD PTR item$[rsp], rax

; 2273 :             if (item == NULL) {

  0016f	48 83 7c 24 48
	00		 cmp	 QWORD PTR item$[rsp], 0
  00175	75 0e		 jne	 SHORT $LN1@zip_next

; 2274 :                 Py_DECREF(result);

  00177	48 8b 4c 24 38	 mov	 rcx, QWORD PTR result$[rsp]
  0017c	e8 00 00 00 00	 call	 _Py_DecRef

; 2275 :                 return NULL;

  00181	33 c0		 xor	 eax, eax
  00183	eb 1b		 jmp	 SHORT $LN13@zip_next
$LN1@zip_next:

; 2276 :             }
; 2277 :             PyTuple_SET_ITEM(result, i, item);

  00185	48 8b 44 24 38	 mov	 rax, QWORD PTR result$[rsp]
  0018a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR i$[rsp]
  0018f	48 8b 54 24 48	 mov	 rdx, QWORD PTR item$[rsp]
  00194	48 89 54 c8 70	 mov	 QWORD PTR [rax+rcx*8+112], rdx

; 2278 :         }

  00199	eb 8a		 jmp	 SHORT $LN3@zip_next
$LN2@zip_next:
$LN6@zip_next:

; 2279 :     }
; 2280 :     return result;

  0019b	48 8b 44 24 38	 mov	 rax, QWORD PTR result$[rsp]
$LN13@zip_next:

; 2281 : }

  001a0	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001a4	c3		 ret	 0
zip_next ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip_reduce DD imagerel zip_reduce
	DD	imagerel zip_reduce+44
	DD	imagerel $unwind$zip_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip_reduce DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zip_reduce
_TEXT	SEGMENT
lz$ = 48
zip_reduce PROC						; COMDAT

; 2285 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2286 :     /* Just recreate the zip with the internal iterator tuple */
; 2287 :     return Py_BuildValue("OO", Py_TYPE(lz), lz->ittuple);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR lz$[rsp]
  0000e	4c 8b 40 68	 mov	 r8, QWORD PTR [rax+104]
  00012	48 8b 44 24 30	 mov	 rax, QWORD PTR lz$[rsp]
  00017	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02MJJLPNK@OO?$AA@
  00022	e8 00 00 00 00	 call	 Py_BuildValue

; 2288 : }

  00027	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002b	c3		 ret	 0
zip_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_09PMJCCPKK@__debug__?$AA@			; `string'
PUBLIC	??_C@_04GPMDFGEJ@type?$AA@			; `string'
PUBLIC	??_C@_05NNMEHDAO@tuple?$AA@			; `string'
PUBLIC	??_C@_05MKJDPMKP@super?$AA@			; `string'
PUBLIC	??_C@_03OJMAPEGJ@str?$AA@			; `string'
PUBLIC	??_C@_0N@BCCHOHJA@staticmethod?$AA@		; `string'
PUBLIC	??_C@_05ILHMOJGN@slice?$AA@			; `string'
PUBLIC	??_C@_03KCHOJKKI@set?$AA@			; `string'
PUBLIC	??_C@_08DNDMMOJA@reversed?$AA@			; `string'
PUBLIC	??_C@_05CCGOGOBM@range?$AA@			; `string'
PUBLIC	??_C@_06IEOJBDIK@object?$AA@			; `string'
PUBLIC	??_C@_04DONFEANM@list?$AA@			; `string'
PUBLIC	??_C@_03JBIPMCLC@int?$AA@			; `string'
PUBLIC	??_C@_08EMBNBNLN@property?$AA@			; `string'
PUBLIC	??_C@_09FNPENIBB@frozenset?$AA@			; `string'
PUBLIC	??_C@_05KNFBNCOH@float?$AA@			; `string'
PUBLIC	??_C@_09KCAIFCBE@enumerate?$AA@			; `string'
PUBLIC	??_C@_04BCIDKIGN@dict?$AA@			; `string'
PUBLIC	??_C@_07CMPFPFAH@complex?$AA@			; `string'
PUBLIC	??_C@_0M@FGHOINCL@classmethod?$AA@		; `string'
PUBLIC	??_C@_05FBJAGGIG@bytes?$AA@			; `string'
PUBLIC	??_C@_09FCJHKOIN@bytearray?$AA@			; `string'
PUBLIC	??_C@_0L@NFBFFIOL@memoryview?$AA@		; `string'
PUBLIC	??_C@_04DDKJGDCM@bool?$AA@			; `string'
PUBLIC	??_C@_04HPMIDMKH@True?$AA@			; `string'
PUBLIC	??_C@_05MKDOIIA@False?$AA@			; `string'
PUBLIC	??_C@_0P@HCLFFHDH@NotImplemented?$AA@		; `string'
PUBLIC	??_C@_08KKBGFFMJ@Ellipsis?$AA@			; `string'
PUBLIC	??_C@_04OHJIHAFH@None?$AA@			; `string'
PUBLIC	_PyBuiltin_Init
EXTRN	Py_OptimizeFlag:DWORD
EXTRN	PyTuple_Type:BYTE
EXTRN	PySuper_Type:BYTE
EXTRN	PyUnicode_Type:BYTE
EXTRN	PyStaticMethod_Type:BYTE
EXTRN	PySlice_Type:BYTE
EXTRN	PySet_Type:BYTE
EXTRN	PyReversed_Type:BYTE
EXTRN	PyRange_Type:BYTE
EXTRN	PyBaseObject_Type:BYTE
EXTRN	PyList_Type:BYTE
EXTRN	PyProperty_Type:BYTE
EXTRN	PyFrozenSet_Type:BYTE
EXTRN	PyEnum_Type:BYTE
EXTRN	PyDict_Type:BYTE
EXTRN	PyComplex_Type:BYTE
EXTRN	PyClassMethod_Type:BYTE
EXTRN	PyBytes_Type:BYTE
EXTRN	PyMemoryView_Type:BYTE
EXTRN	_Py_NotImplementedStruct:BYTE
EXTRN	_Py_EllipsisObject:BYTE
EXTRN	_Py_AddToAllObjects:PROC
EXTRN	PyModule_GetDict:PROC
EXTRN	PyModule_Create2TraceRefs:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyBuiltin_Init DD imagerel $LN46
	DD	imagerel $LN46+1704
	DD	imagerel $unwind$_PyBuiltin_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyBuiltin_Init DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_09PMJCCPKK@__debug__?$AA@
CONST	SEGMENT
??_C@_09PMJCCPKK@__debug__?$AA@ DB '__debug__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04GPMDFGEJ@type?$AA@
CONST	SEGMENT
??_C@_04GPMDFGEJ@type?$AA@ DB 'type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NNMEHDAO@tuple?$AA@
CONST	SEGMENT
??_C@_05NNMEHDAO@tuple?$AA@ DB 'tuple', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MKJDPMKP@super?$AA@
CONST	SEGMENT
??_C@_05MKJDPMKP@super?$AA@ DB 'super', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03OJMAPEGJ@str?$AA@
CONST	SEGMENT
??_C@_03OJMAPEGJ@str?$AA@ DB 'str', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BCCHOHJA@staticmethod?$AA@
CONST	SEGMENT
??_C@_0N@BCCHOHJA@staticmethod?$AA@ DB 'staticmethod', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05ILHMOJGN@slice?$AA@
CONST	SEGMENT
??_C@_05ILHMOJGN@slice?$AA@ DB 'slice', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KCHOJKKI@set?$AA@
CONST	SEGMENT
??_C@_03KCHOJKKI@set?$AA@ DB 'set', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08DNDMMOJA@reversed?$AA@
CONST	SEGMENT
??_C@_08DNDMMOJA@reversed?$AA@ DB 'reversed', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05CCGOGOBM@range?$AA@
CONST	SEGMENT
??_C@_05CCGOGOBM@range?$AA@ DB 'range', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IEOJBDIK@object?$AA@
CONST	SEGMENT
??_C@_06IEOJBDIK@object?$AA@ DB 'object', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DONFEANM@list?$AA@
CONST	SEGMENT
??_C@_04DONFEANM@list?$AA@ DB 'list', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBIPMCLC@int?$AA@
CONST	SEGMENT
??_C@_03JBIPMCLC@int?$AA@ DB 'int', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08EMBNBNLN@property?$AA@
CONST	SEGMENT
??_C@_08EMBNBNLN@property?$AA@ DB 'property', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FNPENIBB@frozenset?$AA@
CONST	SEGMENT
??_C@_09FNPENIBB@frozenset?$AA@ DB 'frozenset', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05KNFBNCOH@float?$AA@
CONST	SEGMENT
??_C@_05KNFBNCOH@float?$AA@ DB 'float', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09KCAIFCBE@enumerate?$AA@
CONST	SEGMENT
??_C@_09KCAIFCBE@enumerate?$AA@ DB 'enumerate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04BCIDKIGN@dict?$AA@
CONST	SEGMENT
??_C@_04BCIDKIGN@dict?$AA@ DB 'dict', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CMPFPFAH@complex?$AA@
CONST	SEGMENT
??_C@_07CMPFPFAH@complex?$AA@ DB 'complex', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FGHOINCL@classmethod?$AA@
CONST	SEGMENT
??_C@_0M@FGHOINCL@classmethod?$AA@ DB 'classmethod', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05FBJAGGIG@bytes?$AA@
CONST	SEGMENT
??_C@_05FBJAGGIG@bytes?$AA@ DB 'bytes', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09FCJHKOIN@bytearray?$AA@
CONST	SEGMENT
??_C@_09FCJHKOIN@bytearray?$AA@ DB 'bytearray', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NFBFFIOL@memoryview?$AA@
CONST	SEGMENT
??_C@_0L@NFBFFIOL@memoryview?$AA@ DB 'memoryview', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04DDKJGDCM@bool?$AA@
CONST	SEGMENT
??_C@_04DDKJGDCM@bool?$AA@ DB 'bool', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HPMIDMKH@True?$AA@
CONST	SEGMENT
??_C@_04HPMIDMKH@True?$AA@ DB 'True', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MKDOIIA@False?$AA@
CONST	SEGMENT
??_C@_05MKDOIIA@False?$AA@ DB 'False', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HCLFFHDH@NotImplemented?$AA@
CONST	SEGMENT
??_C@_0P@HCLFFHDH@NotImplemented?$AA@ DB 'NotImplemented', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08KKBGFFMJ@Ellipsis?$AA@
CONST	SEGMENT
??_C@_08KKBGFFMJ@Ellipsis?$AA@ DB 'Ellipsis', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04OHJIHAFH@None?$AA@
CONST	SEGMENT
??_C@_04OHJIHAFH@None?$AA@ DB 'None', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyBuiltin_Init
_TEXT	SEGMENT
dict$ = 32
debug$ = 40
mod$ = 48
tv353 = 56
_PyBuiltin_Init PROC					; COMDAT

; 2414 : {

$LN46:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2415 :     PyObject *mod, *dict, *debug;
; 2416 :     mod = PyModule_Create(&builtinsmodule);

  00004	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:builtinsmodule
  00010	e8 00 00 00 00	 call	 PyModule_Create2TraceRefs
  00015	48 89 44 24 30	 mov	 QWORD PTR mod$[rsp], rax

; 2417 :     if (mod == NULL)

  0001a	48 83 7c 24 30
	00		 cmp	 QWORD PTR mod$[rsp], 0
  00020	75 07		 jne	 SHORT $LN41@PyBuiltin_

; 2418 :         return NULL;

  00022	33 c0		 xor	 eax, eax
  00024	e9 7a 06 00 00	 jmp	 $LN42@PyBuiltin_
$LN41@PyBuiltin_:

; 2419 :     dict = PyModule_GetDict(mod);

  00029	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mod$[rsp]
  0002e	e8 00 00 00 00	 call	 PyModule_GetDict
  00033	48 89 44 24 20	 mov	 QWORD PTR dict$[rsp], rax

; 2420 : 
; 2421 : #ifdef Py_TRACE_REFS
; 2422 :     /* "builtins" exposes a number of statically allocated objects
; 2423 :      * that, before this code was added in 2.3, never showed up in
; 2424 :      * the list of "all objects" maintained by Py_TRACE_REFS.  As a
; 2425 :      * result, programs leaking references to None and False (etc)
; 2426 :      * couldn't be diagnosed by examining sys.getobjects(0).
; 2427 :      */
; 2428 : #define ADD_TO_ALL(OBJECT) _Py_AddToAllObjects((PyObject *)(OBJECT), 0)
; 2429 : #else
; 2430 : #define ADD_TO_ALL(OBJECT) (void)0
; 2431 : #endif
; 2432 : 
; 2433 : #define SETBUILTIN(NAME, OBJECT) \
; 2434 :     if (PyDict_SetItemString(dict, NAME, (PyObject *)OBJECT) < 0)       \
; 2435 :         return NULL;                                                    \
; 2436 :     ADD_TO_ALL(OBJECT)
; 2437 : 
; 2438 :     SETBUILTIN("None",                  Py_None);

  00038	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  0003f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04OHJIHAFH@None?$AA@
  00046	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  0004b	e8 00 00 00 00	 call	 PyDict_SetItemString
  00050	85 c0		 test	 eax, eax
  00052	7d 07		 jge	 SHORT $LN40@PyBuiltin_
  00054	33 c0		 xor	 eax, eax
  00056	e9 48 06 00 00	 jmp	 $LN42@PyBuiltin_
$LN40@PyBuiltin_:
  0005b	33 d2		 xor	 edx, edx
  0005d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00064	e8 00 00 00 00	 call	 _Py_AddToAllObjects

; 2439 :     SETBUILTIN("Ellipsis",              Py_Ellipsis);

  00069	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_EllipsisObject
  00070	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08KKBGFFMJ@Ellipsis?$AA@
  00077	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  0007c	e8 00 00 00 00	 call	 PyDict_SetItemString
  00081	85 c0		 test	 eax, eax
  00083	7d 07		 jge	 SHORT $LN39@PyBuiltin_
  00085	33 c0		 xor	 eax, eax
  00087	e9 17 06 00 00	 jmp	 $LN42@PyBuiltin_
$LN39@PyBuiltin_:
  0008c	33 d2		 xor	 edx, edx
  0008e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_EllipsisObject
  00095	e8 00 00 00 00	 call	 _Py_AddToAllObjects

; 2440 :     SETBUILTIN("NotImplemented",        Py_NotImplemented);

  0009a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NotImplementedStruct
  000a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@HCLFFHDH@NotImplemented?$AA@
  000a8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  000ad	e8 00 00 00 00	 call	 PyDict_SetItemString
  000b2	85 c0		 test	 eax, eax
  000b4	7d 07		 jge	 SHORT $LN38@PyBuiltin_
  000b6	33 c0		 xor	 eax, eax
  000b8	e9 e6 05 00 00	 jmp	 $LN42@PyBuiltin_
$LN38@PyBuiltin_:
  000bd	33 d2		 xor	 edx, edx
  000bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NotImplementedStruct
  000c6	e8 00 00 00 00	 call	 _Py_AddToAllObjects

; 2441 :     SETBUILTIN("False",                 Py_False);

  000cb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_FalseStruct
  000d2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05MKDOIIA@False?$AA@
  000d9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  000de	e8 00 00 00 00	 call	 PyDict_SetItemString
  000e3	85 c0		 test	 eax, eax
  000e5	7d 07		 jge	 SHORT $LN37@PyBuiltin_
  000e7	33 c0		 xor	 eax, eax
  000e9	e9 b5 05 00 00	 jmp	 $LN42@PyBuiltin_
$LN37@PyBuiltin_:
  000ee	33 d2		 xor	 edx, edx
  000f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  000f7	e8 00 00 00 00	 call	 _Py_AddToAllObjects

; 2442 :     SETBUILTIN("True",                  Py_True);

  000fc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_TrueStruct
  00103	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04HPMIDMKH@True?$AA@
  0010a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  0010f	e8 00 00 00 00	 call	 PyDict_SetItemString
  00114	85 c0		 test	 eax, eax
  00116	7d 07		 jge	 SHORT $LN36@PyBuiltin_
  00118	33 c0		 xor	 eax, eax
  0011a	e9 84 05 00 00	 jmp	 $LN42@PyBuiltin_
$LN36@PyBuiltin_:
  0011f	33 d2		 xor	 edx, edx
  00121	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  00128	e8 00 00 00 00	 call	 _Py_AddToAllObjects

; 2443 :     SETBUILTIN("bool",                  &PyBool_Type);

  0012d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyBool_Type
  00134	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04DDKJGDCM@bool?$AA@
  0013b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  00140	e8 00 00 00 00	 call	 PyDict_SetItemString
  00145	85 c0		 test	 eax, eax
  00147	7d 07		 jge	 SHORT $LN35@PyBuiltin_
  00149	33 c0		 xor	 eax, eax
  0014b	e9 53 05 00 00	 jmp	 $LN42@PyBuiltin_
$LN35@PyBuiltin_:
  00150	33 d2		 xor	 edx, edx
  00152	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBool_Type
  00159	e8 00 00 00 00	 call	 _Py_AddToAllObjects

; 2444 :     SETBUILTIN("memoryview",        &PyMemoryView_Type);

  0015e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyMemoryView_Type
  00165	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@NFBFFIOL@memoryview?$AA@
  0016c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  00171	e8 00 00 00 00	 call	 PyDict_SetItemString
  00176	85 c0		 test	 eax, eax
  00178	7d 07		 jge	 SHORT $LN34@PyBuiltin_
  0017a	33 c0		 xor	 eax, eax
  0017c	e9 22 05 00 00	 jmp	 $LN42@PyBuiltin_
$LN34@PyBuiltin_:
  00181	33 d2		 xor	 edx, edx
  00183	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyMemoryView_Type
  0018a	e8 00 00 00 00	 call	 _Py_AddToAllObjects

; 2445 :     SETBUILTIN("bytearray",             &PyByteArray_Type);

  0018f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyByteArray_Type
  00196	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09FCJHKOIN@bytearray?$AA@
  0019d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  001a2	e8 00 00 00 00	 call	 PyDict_SetItemString
  001a7	85 c0		 test	 eax, eax
  001a9	7d 07		 jge	 SHORT $LN33@PyBuiltin_
  001ab	33 c0		 xor	 eax, eax
  001ad	e9 f1 04 00 00	 jmp	 $LN42@PyBuiltin_
$LN33@PyBuiltin_:
  001b2	33 d2		 xor	 edx, edx
  001b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyByteArray_Type
  001bb	e8 00 00 00 00	 call	 _Py_AddToAllObjects

; 2446 :     SETBUILTIN("bytes",                 &PyBytes_Type);

  001c0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyBytes_Type
  001c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05FBJAGGIG@bytes?$AA@
  001ce	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  001d3	e8 00 00 00 00	 call	 PyDict_SetItemString
  001d8	85 c0		 test	 eax, eax
  001da	7d 07		 jge	 SHORT $LN32@PyBuiltin_
  001dc	33 c0		 xor	 eax, eax
  001de	e9 c0 04 00 00	 jmp	 $LN42@PyBuiltin_
$LN32@PyBuiltin_:
  001e3	33 d2		 xor	 edx, edx
  001e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBytes_Type
  001ec	e8 00 00 00 00	 call	 _Py_AddToAllObjects

; 2447 :     SETBUILTIN("classmethod",           &PyClassMethod_Type);

  001f1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyClassMethod_Type
  001f8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@FGHOINCL@classmethod?$AA@
  001ff	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  00204	e8 00 00 00 00	 call	 PyDict_SetItemString
  00209	85 c0		 test	 eax, eax
  0020b	7d 07		 jge	 SHORT $LN31@PyBuiltin_
  0020d	33 c0		 xor	 eax, eax
  0020f	e9 8f 04 00 00	 jmp	 $LN42@PyBuiltin_
$LN31@PyBuiltin_:
  00214	33 d2		 xor	 edx, edx
  00216	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyClassMethod_Type
  0021d	e8 00 00 00 00	 call	 _Py_AddToAllObjects

; 2448 :     SETBUILTIN("complex",               &PyComplex_Type);

  00222	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyComplex_Type
  00229	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07CMPFPFAH@complex?$AA@
  00230	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  00235	e8 00 00 00 00	 call	 PyDict_SetItemString
  0023a	85 c0		 test	 eax, eax
  0023c	7d 07		 jge	 SHORT $LN30@PyBuiltin_
  0023e	33 c0		 xor	 eax, eax
  00240	e9 5e 04 00 00	 jmp	 $LN42@PyBuiltin_
$LN30@PyBuiltin_:
  00245	33 d2		 xor	 edx, edx
  00247	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyComplex_Type
  0024e	e8 00 00 00 00	 call	 _Py_AddToAllObjects

; 2449 :     SETBUILTIN("dict",                  &PyDict_Type);

  00253	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyDict_Type
  0025a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04BCIDKIGN@dict?$AA@
  00261	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  00266	e8 00 00 00 00	 call	 PyDict_SetItemString
  0026b	85 c0		 test	 eax, eax
  0026d	7d 07		 jge	 SHORT $LN29@PyBuiltin_
  0026f	33 c0		 xor	 eax, eax
  00271	e9 2d 04 00 00	 jmp	 $LN42@PyBuiltin_
$LN29@PyBuiltin_:
  00276	33 d2		 xor	 edx, edx
  00278	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyDict_Type
  0027f	e8 00 00 00 00	 call	 _Py_AddToAllObjects

; 2450 :     SETBUILTIN("enumerate",             &PyEnum_Type);

  00284	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyEnum_Type
  0028b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09KCAIFCBE@enumerate?$AA@
  00292	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  00297	e8 00 00 00 00	 call	 PyDict_SetItemString
  0029c	85 c0		 test	 eax, eax
  0029e	7d 07		 jge	 SHORT $LN28@PyBuiltin_
  002a0	33 c0		 xor	 eax, eax
  002a2	e9 fc 03 00 00	 jmp	 $LN42@PyBuiltin_
$LN28@PyBuiltin_:
  002a7	33 d2		 xor	 edx, edx
  002a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyEnum_Type
  002b0	e8 00 00 00 00	 call	 _Py_AddToAllObjects

; 2451 :     SETBUILTIN("filter",                &PyFilter_Type);

  002b5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyFilter_Type
  002bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06EOIELIPE@filter?$AA@
  002c3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  002c8	e8 00 00 00 00	 call	 PyDict_SetItemString
  002cd	85 c0		 test	 eax, eax
  002cf	7d 07		 jge	 SHORT $LN27@PyBuiltin_
  002d1	33 c0		 xor	 eax, eax
  002d3	e9 cb 03 00 00	 jmp	 $LN42@PyBuiltin_
$LN27@PyBuiltin_:
  002d8	33 d2		 xor	 edx, edx
  002da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyFilter_Type
  002e1	e8 00 00 00 00	 call	 _Py_AddToAllObjects

; 2452 :     SETBUILTIN("float",                 &PyFloat_Type);

  002e6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyFloat_Type
  002ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KNFBNCOH@float?$AA@
  002f4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  002f9	e8 00 00 00 00	 call	 PyDict_SetItemString
  002fe	85 c0		 test	 eax, eax
  00300	7d 07		 jge	 SHORT $LN26@PyBuiltin_
  00302	33 c0		 xor	 eax, eax
  00304	e9 9a 03 00 00	 jmp	 $LN42@PyBuiltin_
$LN26@PyBuiltin_:
  00309	33 d2		 xor	 edx, edx
  0030b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyFloat_Type
  00312	e8 00 00 00 00	 call	 _Py_AddToAllObjects

; 2453 :     SETBUILTIN("frozenset",             &PyFrozenSet_Type);

  00317	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyFrozenSet_Type
  0031e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09FNPENIBB@frozenset?$AA@
  00325	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  0032a	e8 00 00 00 00	 call	 PyDict_SetItemString
  0032f	85 c0		 test	 eax, eax
  00331	7d 07		 jge	 SHORT $LN25@PyBuiltin_
  00333	33 c0		 xor	 eax, eax
  00335	e9 69 03 00 00	 jmp	 $LN42@PyBuiltin_
$LN25@PyBuiltin_:
  0033a	33 d2		 xor	 edx, edx
  0033c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyFrozenSet_Type
  00343	e8 00 00 00 00	 call	 _Py_AddToAllObjects

; 2454 :     SETBUILTIN("property",              &PyProperty_Type);

  00348	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyProperty_Type
  0034f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08EMBNBNLN@property?$AA@
  00356	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  0035b	e8 00 00 00 00	 call	 PyDict_SetItemString
  00360	85 c0		 test	 eax, eax
  00362	7d 07		 jge	 SHORT $LN24@PyBuiltin_
  00364	33 c0		 xor	 eax, eax
  00366	e9 38 03 00 00	 jmp	 $LN42@PyBuiltin_
$LN24@PyBuiltin_:
  0036b	33 d2		 xor	 edx, edx
  0036d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyProperty_Type
  00374	e8 00 00 00 00	 call	 _Py_AddToAllObjects

; 2455 :     SETBUILTIN("int",                   &PyLong_Type);

  00379	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyLong_Type
  00380	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03JBIPMCLC@int?$AA@
  00387	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  0038c	e8 00 00 00 00	 call	 PyDict_SetItemString
  00391	85 c0		 test	 eax, eax
  00393	7d 07		 jge	 SHORT $LN23@PyBuiltin_
  00395	33 c0		 xor	 eax, eax
  00397	e9 07 03 00 00	 jmp	 $LN42@PyBuiltin_
$LN23@PyBuiltin_:
  0039c	33 d2		 xor	 edx, edx
  0039e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyLong_Type
  003a5	e8 00 00 00 00	 call	 _Py_AddToAllObjects

; 2456 :     SETBUILTIN("list",                  &PyList_Type);

  003aa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyList_Type
  003b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04DONFEANM@list?$AA@
  003b8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  003bd	e8 00 00 00 00	 call	 PyDict_SetItemString
  003c2	85 c0		 test	 eax, eax
  003c4	7d 07		 jge	 SHORT $LN22@PyBuiltin_
  003c6	33 c0		 xor	 eax, eax
  003c8	e9 d6 02 00 00	 jmp	 $LN42@PyBuiltin_
$LN22@PyBuiltin_:
  003cd	33 d2		 xor	 edx, edx
  003cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyList_Type
  003d6	e8 00 00 00 00	 call	 _Py_AddToAllObjects

; 2457 :     SETBUILTIN("map",                   &PyMap_Type);

  003db	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyMap_Type
  003e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03HBNNNHNM@map?$AA@
  003e9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  003ee	e8 00 00 00 00	 call	 PyDict_SetItemString
  003f3	85 c0		 test	 eax, eax
  003f5	7d 07		 jge	 SHORT $LN21@PyBuiltin_
  003f7	33 c0		 xor	 eax, eax
  003f9	e9 a5 02 00 00	 jmp	 $LN42@PyBuiltin_
$LN21@PyBuiltin_:
  003fe	33 d2		 xor	 edx, edx
  00400	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyMap_Type
  00407	e8 00 00 00 00	 call	 _Py_AddToAllObjects

; 2458 :     SETBUILTIN("object",                &PyBaseObject_Type);

  0040c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyBaseObject_Type
  00413	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06IEOJBDIK@object?$AA@
  0041a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  0041f	e8 00 00 00 00	 call	 PyDict_SetItemString
  00424	85 c0		 test	 eax, eax
  00426	7d 07		 jge	 SHORT $LN20@PyBuiltin_
  00428	33 c0		 xor	 eax, eax
  0042a	e9 74 02 00 00	 jmp	 $LN42@PyBuiltin_
$LN20@PyBuiltin_:
  0042f	33 d2		 xor	 edx, edx
  00431	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBaseObject_Type
  00438	e8 00 00 00 00	 call	 _Py_AddToAllObjects

; 2459 :     SETBUILTIN("range",                 &PyRange_Type);

  0043d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyRange_Type
  00444	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05CCGOGOBM@range?$AA@
  0044b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  00450	e8 00 00 00 00	 call	 PyDict_SetItemString
  00455	85 c0		 test	 eax, eax
  00457	7d 07		 jge	 SHORT $LN19@PyBuiltin_
  00459	33 c0		 xor	 eax, eax
  0045b	e9 43 02 00 00	 jmp	 $LN42@PyBuiltin_
$LN19@PyBuiltin_:
  00460	33 d2		 xor	 edx, edx
  00462	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyRange_Type
  00469	e8 00 00 00 00	 call	 _Py_AddToAllObjects

; 2460 :     SETBUILTIN("reversed",              &PyReversed_Type);

  0046e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyReversed_Type
  00475	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08DNDMMOJA@reversed?$AA@
  0047c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  00481	e8 00 00 00 00	 call	 PyDict_SetItemString
  00486	85 c0		 test	 eax, eax
  00488	7d 07		 jge	 SHORT $LN18@PyBuiltin_
  0048a	33 c0		 xor	 eax, eax
  0048c	e9 12 02 00 00	 jmp	 $LN42@PyBuiltin_
$LN18@PyBuiltin_:
  00491	33 d2		 xor	 edx, edx
  00493	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyReversed_Type
  0049a	e8 00 00 00 00	 call	 _Py_AddToAllObjects

; 2461 :     SETBUILTIN("set",                   &PySet_Type);

  0049f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PySet_Type
  004a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03KCHOJKKI@set?$AA@
  004ad	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  004b2	e8 00 00 00 00	 call	 PyDict_SetItemString
  004b7	85 c0		 test	 eax, eax
  004b9	7d 07		 jge	 SHORT $LN17@PyBuiltin_
  004bb	33 c0		 xor	 eax, eax
  004bd	e9 e1 01 00 00	 jmp	 $LN42@PyBuiltin_
$LN17@PyBuiltin_:
  004c2	33 d2		 xor	 edx, edx
  004c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PySet_Type
  004cb	e8 00 00 00 00	 call	 _Py_AddToAllObjects

; 2462 :     SETBUILTIN("slice",                 &PySlice_Type);

  004d0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PySlice_Type
  004d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05ILHMOJGN@slice?$AA@
  004de	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  004e3	e8 00 00 00 00	 call	 PyDict_SetItemString
  004e8	85 c0		 test	 eax, eax
  004ea	7d 07		 jge	 SHORT $LN16@PyBuiltin_
  004ec	33 c0		 xor	 eax, eax
  004ee	e9 b0 01 00 00	 jmp	 $LN42@PyBuiltin_
$LN16@PyBuiltin_:
  004f3	33 d2		 xor	 edx, edx
  004f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PySlice_Type
  004fc	e8 00 00 00 00	 call	 _Py_AddToAllObjects

; 2463 :     SETBUILTIN("staticmethod",          &PyStaticMethod_Type);

  00501	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyStaticMethod_Type
  00508	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@BCCHOHJA@staticmethod?$AA@
  0050f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  00514	e8 00 00 00 00	 call	 PyDict_SetItemString
  00519	85 c0		 test	 eax, eax
  0051b	7d 07		 jge	 SHORT $LN15@PyBuiltin_
  0051d	33 c0		 xor	 eax, eax
  0051f	e9 7f 01 00 00	 jmp	 $LN42@PyBuiltin_
$LN15@PyBuiltin_:
  00524	33 d2		 xor	 edx, edx
  00526	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyStaticMethod_Type
  0052d	e8 00 00 00 00	 call	 _Py_AddToAllObjects

; 2464 :     SETBUILTIN("str",                   &PyUnicode_Type);

  00532	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyUnicode_Type
  00539	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03OJMAPEGJ@str?$AA@
  00540	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  00545	e8 00 00 00 00	 call	 PyDict_SetItemString
  0054a	85 c0		 test	 eax, eax
  0054c	7d 07		 jge	 SHORT $LN14@PyBuiltin_
  0054e	33 c0		 xor	 eax, eax
  00550	e9 4e 01 00 00	 jmp	 $LN42@PyBuiltin_
$LN14@PyBuiltin_:
  00555	33 d2		 xor	 edx, edx
  00557	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyUnicode_Type
  0055e	e8 00 00 00 00	 call	 _Py_AddToAllObjects

; 2465 :     SETBUILTIN("super",                 &PySuper_Type);

  00563	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PySuper_Type
  0056a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05MKJDPMKP@super?$AA@
  00571	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  00576	e8 00 00 00 00	 call	 PyDict_SetItemString
  0057b	85 c0		 test	 eax, eax
  0057d	7d 07		 jge	 SHORT $LN13@PyBuiltin_
  0057f	33 c0		 xor	 eax, eax
  00581	e9 1d 01 00 00	 jmp	 $LN42@PyBuiltin_
$LN13@PyBuiltin_:
  00586	33 d2		 xor	 edx, edx
  00588	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PySuper_Type
  0058f	e8 00 00 00 00	 call	 _Py_AddToAllObjects

; 2466 :     SETBUILTIN("tuple",                 &PyTuple_Type);

  00594	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyTuple_Type
  0059b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05NNMEHDAO@tuple?$AA@
  005a2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  005a7	e8 00 00 00 00	 call	 PyDict_SetItemString
  005ac	85 c0		 test	 eax, eax
  005ae	7d 07		 jge	 SHORT $LN12@PyBuiltin_
  005b0	33 c0		 xor	 eax, eax
  005b2	e9 ec 00 00 00	 jmp	 $LN42@PyBuiltin_
$LN12@PyBuiltin_:
  005b7	33 d2		 xor	 edx, edx
  005b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyTuple_Type
  005c0	e8 00 00 00 00	 call	 _Py_AddToAllObjects

; 2467 :     SETBUILTIN("type",                  &PyType_Type);

  005c5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyType_Type
  005cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04GPMDFGEJ@type?$AA@
  005d3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  005d8	e8 00 00 00 00	 call	 PyDict_SetItemString
  005dd	85 c0		 test	 eax, eax
  005df	7d 07		 jge	 SHORT $LN11@PyBuiltin_
  005e1	33 c0		 xor	 eax, eax
  005e3	e9 bb 00 00 00	 jmp	 $LN42@PyBuiltin_
$LN11@PyBuiltin_:
  005e8	33 d2		 xor	 edx, edx
  005ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyType_Type
  005f1	e8 00 00 00 00	 call	 _Py_AddToAllObjects

; 2468 :     SETBUILTIN("zip",                   &PyZip_Type);

  005f6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyZip_Type
  005fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03LCAAOJEC@zip?$AA@
  00604	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  00609	e8 00 00 00 00	 call	 PyDict_SetItemString
  0060e	85 c0		 test	 eax, eax
  00610	7d 07		 jge	 SHORT $LN10@PyBuiltin_
  00612	33 c0		 xor	 eax, eax
  00614	e9 8a 00 00 00	 jmp	 $LN42@PyBuiltin_
$LN10@PyBuiltin_:
  00619	33 d2		 xor	 edx, edx
  0061b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyZip_Type
  00622	e8 00 00 00 00	 call	 _Py_AddToAllObjects

; 2469 :     debug = PyBool_FromLong(Py_OptimizeFlag == 0);

  00627	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_OptimizeFlag, 0
  0062e	75 0a		 jne	 SHORT $LN44@PyBuiltin_
  00630	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv353[rsp], 1
  00638	eb 08		 jmp	 SHORT $LN45@PyBuiltin_
$LN44@PyBuiltin_:
  0063a	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv353[rsp], 0
$LN45@PyBuiltin_:
  00642	8b 4c 24 38	 mov	 ecx, DWORD PTR tv353[rsp]
  00646	e8 00 00 00 00	 call	 PyBool_FromLong
  0064b	48 89 44 24 28	 mov	 QWORD PTR debug$[rsp], rax

; 2470 :     if (PyDict_SetItemString(dict, "__debug__", debug) < 0) {

  00650	4c 8b 44 24 28	 mov	 r8, QWORD PTR debug$[rsp]
  00655	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09PMJCCPKK@__debug__?$AA@
  0065c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  00661	e8 00 00 00 00	 call	 PyDict_SetItemString
  00666	85 c0		 test	 eax, eax
  00668	7d 1c		 jge	 SHORT $LN9@PyBuiltin_
$LN8@PyBuiltin_:

; 2471 :         Py_XDECREF(debug);

  0066a	48 83 7c 24 28
	00		 cmp	 QWORD PTR debug$[rsp], 0
  00670	74 0a		 je	 SHORT $LN5@PyBuiltin_
  00672	48 8b 4c 24 28	 mov	 rcx, QWORD PTR debug$[rsp]
  00677	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@PyBuiltin_:
  0067c	33 c0		 xor	 eax, eax
  0067e	85 c0		 test	 eax, eax
  00680	75 e8		 jne	 SHORT $LN8@PyBuiltin_

; 2472 :         return NULL;

  00682	33 c0		 xor	 eax, eax
  00684	eb 1d		 jmp	 SHORT $LN42@PyBuiltin_
$LN9@PyBuiltin_:
$LN4@PyBuiltin_:

; 2473 :     }
; 2474 :     Py_XDECREF(debug);

  00686	48 83 7c 24 28
	00		 cmp	 QWORD PTR debug$[rsp], 0
  0068c	74 0a		 je	 SHORT $LN1@PyBuiltin_
  0068e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR debug$[rsp]
  00693	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyBuiltin_:
  00698	33 c0		 xor	 eax, eax
  0069a	85 c0		 test	 eax, eax
  0069c	75 e8		 jne	 SHORT $LN4@PyBuiltin_

; 2475 : 
; 2476 :     return mod;

  0069e	48 8b 44 24 30	 mov	 rax, QWORD PTR mod$[rsp]
$LN42@PyBuiltin_:

; 2477 : #undef ADD_TO_ALL
; 2478 : #undef SETBUILTIN
; 2479 : }

  006a3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  006a7	c3		 ret	 0
_PyBuiltin_Init ENDP
_TEXT	ENDS
END
