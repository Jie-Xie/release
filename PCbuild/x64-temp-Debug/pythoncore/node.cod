; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	PyNode_New
EXTRN	_PyObject_DebugMalloc:PROC
;	COMDAT pdata
; File c:\src\pyparallel\parser\node.c
pdata	SEGMENT
$pdata$PyNode_New DD imagerel $LN4
	DD	imagerel $LN4+108
	DD	imagerel $unwind$PyNode_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyNode_New DD 010801H
	DD	06208H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyNode_New
_TEXT	SEGMENT
n$ = 32
type$ = 64
PyNode_New PROC						; COMDAT

; 9    : {

$LN4:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 10   :     node *n = (node *) PyObject_MALLOC(1 * sizeof(node));

  00008	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  0000d	e8 00 00 00 00	 call	 _PyObject_DebugMalloc
  00012	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 11   :     if (n == NULL)

  00017	48 83 7c 24 20
	00		 cmp	 QWORD PTR n$[rsp], 0
  0001d	75 04		 jne	 SHORT $LN1@PyNode_New

; 12   :         return NULL;

  0001f	33 c0		 xor	 eax, eax
  00021	eb 44		 jmp	 SHORT $LN2@PyNode_New
$LN1@PyNode_New:

; 13   :     n->n_type = type;

  00023	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  00028	0f b7 4c 24 40	 movzx	 ecx, WORD PTR type$[rsp]
  0002d	66 89 08	 mov	 WORD PTR [rax], cx

; 14   :     n->n_str = NULL;

  00030	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  00035	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 15   :     n->n_lineno = 0;

  0003d	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  00042	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [rax+16], 0

; 16   :     n->n_nchildren = 0;

  00049	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  0004e	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [rax+24], 0

; 17   :     n->n_child = NULL;

  00055	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  0005a	48 c7 40 20 00
	00 00 00	 mov	 QWORD PTR [rax+32], 0

; 18   :     return n;

  00062	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
$LN2@PyNode_New:

; 19   : }

  00067	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006b	c3		 ret	 0
PyNode_New ENDP
_TEXT	ENDS
PUBLIC	PyNode_AddChild
EXTRN	_PyObject_DebugRealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyNode_AddChild DD imagerel $LN18
	DD	imagerel $LN18+519
	DD	imagerel $unwind$PyNode_AddChild
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyNode_AddChild DD 011701H
	DD	0c217H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyNode_AddChild
_TEXT	SEGMENT
n$ = 32
current_capacity$ = 40
required_capacity$ = 44
nch$ = 48
tv77 = 56
tv76 = 64
tv94 = 72
tv93 = 80
n1$ = 112
type$ = 120
str$ = 128
lineno$ = 136
col_offset$ = 144
PyNode_AddChild PROC					; COMDAT

; 80   : {

$LN18:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 81   :     const int nch = n1->n_nchildren;

  00017	48 8b 44 24 70	 mov	 rax, QWORD PTR n1$[rsp]
  0001c	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  0001f	89 44 24 30	 mov	 DWORD PTR nch$[rsp], eax

; 82   :     int current_capacity;
; 83   :     int required_capacity;
; 84   :     node *n;
; 85   : 
; 86   :     if (nch == INT_MAX || nch < 0)

  00023	81 7c 24 30 ff
	ff ff 7f	 cmp	 DWORD PTR nch$[rsp], 2147483647 ; 7fffffffH
  0002b	74 07		 je	 SHORT $LN6@PyNode_Add
  0002d	83 7c 24 30 00	 cmp	 DWORD PTR nch$[rsp], 0
  00032	7d 0a		 jge	 SHORT $LN7@PyNode_Add
$LN6@PyNode_Add:

; 87   :         return E_OVERFLOW;

  00034	b8 13 00 00 00	 mov	 eax, 19
  00039	e9 c4 01 00 00	 jmp	 $LN8@PyNode_Add
$LN7@PyNode_Add:

; 88   : 
; 89   :     current_capacity = XXXROUNDUP(nch);

  0003e	83 7c 24 30 01	 cmp	 DWORD PTR nch$[rsp], 1
  00043	7f 0c		 jg	 SHORT $LN12@PyNode_Add
  00045	48 63 44 24 30	 movsxd	 rax, DWORD PTR nch$[rsp]
  0004a	48 89 44 24 38	 mov	 QWORD PTR tv77[rsp], rax
  0004f	eb 38		 jmp	 SHORT $LN13@PyNode_Add
$LN12@PyNode_Add:
  00051	81 7c 24 30 80
	00 00 00	 cmp	 DWORD PTR nch$[rsp], 128 ; 00000080H
  00059	7f 14		 jg	 SHORT $LN10@PyNode_Add
  0005b	48 63 44 24 30	 movsxd	 rax, DWORD PTR nch$[rsp]
  00060	48 83 c0 03	 add	 rax, 3
  00064	48 83 e0 fc	 and	 rax, -4
  00068	48 89 44 24 40	 mov	 QWORD PTR tv76[rsp], rax
  0006d	eb 10		 jmp	 SHORT $LN11@PyNode_Add
$LN10@PyNode_Add:
  0006f	8b 4c 24 30	 mov	 ecx, DWORD PTR nch$[rsp]
  00073	e8 00 00 00 00	 call	 fancy_roundup
  00078	48 98		 cdqe
  0007a	48 89 44 24 40	 mov	 QWORD PTR tv76[rsp], rax
$LN11@PyNode_Add:
  0007f	48 8b 44 24 40	 mov	 rax, QWORD PTR tv76[rsp]
  00084	48 89 44 24 38	 mov	 QWORD PTR tv77[rsp], rax
$LN13@PyNode_Add:
  00089	8b 44 24 38	 mov	 eax, DWORD PTR tv77[rsp]
  0008d	89 44 24 28	 mov	 DWORD PTR current_capacity$[rsp], eax

; 90   :     required_capacity = XXXROUNDUP(nch + 1);

  00091	8b 44 24 30	 mov	 eax, DWORD PTR nch$[rsp]
  00095	ff c0		 inc	 eax
  00097	83 f8 01	 cmp	 eax, 1
  0009a	7f 0f		 jg	 SHORT $LN16@PyNode_Add
  0009c	8b 44 24 30	 mov	 eax, DWORD PTR nch$[rsp]
  000a0	ff c0		 inc	 eax
  000a2	48 98		 cdqe
  000a4	48 89 44 24 48	 mov	 QWORD PTR tv94[rsp], rax
  000a9	eb 42		 jmp	 SHORT $LN17@PyNode_Add
$LN16@PyNode_Add:
  000ab	8b 44 24 30	 mov	 eax, DWORD PTR nch$[rsp]
  000af	ff c0		 inc	 eax
  000b1	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  000b6	7f 17		 jg	 SHORT $LN14@PyNode_Add
  000b8	8b 44 24 30	 mov	 eax, DWORD PTR nch$[rsp]
  000bc	ff c0		 inc	 eax
  000be	48 98		 cdqe
  000c0	48 83 c0 03	 add	 rax, 3
  000c4	48 83 e0 fc	 and	 rax, -4
  000c8	48 89 44 24 50	 mov	 QWORD PTR tv93[rsp], rax
  000cd	eb 14		 jmp	 SHORT $LN15@PyNode_Add
$LN14@PyNode_Add:
  000cf	8b 44 24 30	 mov	 eax, DWORD PTR nch$[rsp]
  000d3	ff c0		 inc	 eax
  000d5	8b c8		 mov	 ecx, eax
  000d7	e8 00 00 00 00	 call	 fancy_roundup
  000dc	48 98		 cdqe
  000de	48 89 44 24 50	 mov	 QWORD PTR tv93[rsp], rax
$LN15@PyNode_Add:
  000e3	48 8b 44 24 50	 mov	 rax, QWORD PTR tv93[rsp]
  000e8	48 89 44 24 48	 mov	 QWORD PTR tv94[rsp], rax
$LN17@PyNode_Add:
  000ed	8b 44 24 48	 mov	 eax, DWORD PTR tv94[rsp]
  000f1	89 44 24 2c	 mov	 DWORD PTR required_capacity$[rsp], eax

; 91   :     if (current_capacity < 0 || required_capacity < 0)

  000f5	83 7c 24 28 00	 cmp	 DWORD PTR current_capacity$[rsp], 0
  000fa	7c 07		 jl	 SHORT $LN4@PyNode_Add
  000fc	83 7c 24 2c 00	 cmp	 DWORD PTR required_capacity$[rsp], 0
  00101	7d 0a		 jge	 SHORT $LN5@PyNode_Add
$LN4@PyNode_Add:

; 92   :         return E_OVERFLOW;

  00103	b8 13 00 00 00	 mov	 eax, 19
  00108	e9 f5 00 00 00	 jmp	 $LN8@PyNode_Add
$LN5@PyNode_Add:

; 93   :     if (current_capacity < required_capacity) {

  0010d	8b 44 24 2c	 mov	 eax, DWORD PTR required_capacity$[rsp]
  00111	39 44 24 28	 cmp	 DWORD PTR current_capacity$[rsp], eax
  00115	7d 67		 jge	 SHORT $LN3@PyNode_Add

; 94   :         if (required_capacity > PY_SIZE_MAX / sizeof(node)) {

  00117	48 63 44 24 2c	 movsxd	 rax, DWORD PTR required_capacity$[rsp]
  0011c	48 b9 66 66 66
	66 66 66 66 06	 mov	 rcx, 461168601842738790	; 0666666666666666H
  00126	48 3b c1	 cmp	 rax, rcx
  00129	76 0a		 jbe	 SHORT $LN2@PyNode_Add

; 95   :             return E_NOMEM;

  0012b	b8 0f 00 00 00	 mov	 eax, 15
  00130	e9 cd 00 00 00	 jmp	 $LN8@PyNode_Add
$LN2@PyNode_Add:

; 96   :         }
; 97   :         n = n1->n_child;

  00135	48 8b 44 24 70	 mov	 rax, QWORD PTR n1$[rsp]
  0013a	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0013e	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 98   :         n = (node *) PyObject_REALLOC(n,
; 99   :                                       required_capacity * sizeof(node));

  00143	48 63 44 24 2c	 movsxd	 rax, DWORD PTR required_capacity$[rsp]
  00148	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0014c	48 8b d0	 mov	 rdx, rax
  0014f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR n$[rsp]
  00154	e8 00 00 00 00	 call	 _PyObject_DebugRealloc
  00159	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 100  :         if (n == NULL)

  0015e	48 83 7c 24 20
	00		 cmp	 QWORD PTR n$[rsp], 0
  00164	75 0a		 jne	 SHORT $LN1@PyNode_Add

; 101  :             return E_NOMEM;

  00166	b8 0f 00 00 00	 mov	 eax, 15
  0016b	e9 92 00 00 00	 jmp	 $LN8@PyNode_Add
$LN1@PyNode_Add:

; 102  :         n1->n_child = n;

  00170	48 8b 44 24 70	 mov	 rax, QWORD PTR n1$[rsp]
  00175	48 8b 4c 24 20	 mov	 rcx, QWORD PTR n$[rsp]
  0017a	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx
$LN3@PyNode_Add:

; 103  :     }
; 104  : 
; 105  :     n = &n1->n_child[n1->n_nchildren++];

  0017e	48 8b 44 24 70	 mov	 rax, QWORD PTR n1$[rsp]
  00183	48 63 40 18	 movsxd	 rax, DWORD PTR [rax+24]
  00187	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0018b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR n1$[rsp]
  00190	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00194	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax
  00199	48 8b 44 24 70	 mov	 rax, QWORD PTR n1$[rsp]
  0019e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  001a1	ff c0		 inc	 eax
  001a3	48 8b 4c 24 70	 mov	 rcx, QWORD PTR n1$[rsp]
  001a8	89 41 18	 mov	 DWORD PTR [rcx+24], eax

; 106  :     n->n_type = type;

  001ab	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  001b0	0f b7 4c 24 78	 movzx	 ecx, WORD PTR type$[rsp]
  001b5	66 89 08	 mov	 WORD PTR [rax], cx

; 107  :     n->n_str = str;

  001b8	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  001bd	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR str$[rsp]
  001c5	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 108  :     n->n_lineno = lineno;

  001c9	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  001ce	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR lineno$[rsp]
  001d5	89 48 10	 mov	 DWORD PTR [rax+16], ecx

; 109  :     n->n_col_offset = col_offset;

  001d8	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  001dd	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR col_offset$[rsp]
  001e4	89 48 14	 mov	 DWORD PTR [rax+20], ecx

; 110  :     n->n_nchildren = 0;

  001e7	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  001ec	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [rax+24], 0

; 111  :     n->n_child = NULL;

  001f3	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  001f8	48 c7 40 20 00
	00 00 00	 mov	 QWORD PTR [rax+32], 0

; 112  :     return 0;

  00200	33 c0		 xor	 eax, eax
$LN8@PyNode_Add:

; 113  : }

  00202	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00206	c3		 ret	 0
PyNode_AddChild ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BA@EAOMHEJP@?$AAn?$AA?5?$AA?$DO?$AA?5?$AA1?$AA2?$AA8?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CC@HIHALCKD@?$AA?4?$AA?4?$AA?2?$AAP?$AAa?$AAr?$AAs?$AAe?$AAr?$AA?2?$AAn?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@ ; `string'
EXTRN	__imp__wassert:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$fancy_roundup DD imagerel fancy_roundup
	DD	imagerel fancy_roundup+99
	DD	imagerel $unwind$fancy_roundup
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fancy_roundup DD 010801H
	DD	06208H
xdata	ENDS
;	COMDAT ??_C@_1BA@EAOMHEJP@?$AAn?$AA?5?$AA?$DO?$AA?5?$AA1?$AA2?$AA8?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@EAOMHEJP@?$AAn?$AA?5?$AA?$DO?$AA?5?$AA1?$AA2?$AA8?$AA?$AA@ DB 'n'
	DB	00H, ' ', 00H, '>', 00H, ' ', 00H, '1', 00H, '2', 00H, '8', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@HIHALCKD@?$AA?4?$AA?4?$AA?2?$AAP?$AAa?$AAr?$AAs?$AAe?$AAr?$AA?2?$AAn?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@HIHALCKD@?$AA?4?$AA?4?$AA?2?$AAP?$AAa?$AAr?$AAs?$AAe?$AAr?$AA?2?$AAn?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's', 00H
	DB	'e', 00H, 'r', 00H, '\', 00H, 'n', 00H, 'o', 00H, 'd', 00H, 'e'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT fancy_roundup
_TEXT	SEGMENT
result$ = 32
n$ = 64
fancy_roundup PROC					; COMDAT

; 24   : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 25   :     /* Round up to the closest power of 2 >= n. */
; 26   :     int result = 256;

  00008	c7 44 24 20 00
	01 00 00	 mov	 DWORD PTR result$[rsp], 256 ; 00000100H

; 27   :     assert(n > 128);

  00010	81 7c 24 40 80
	00 00 00	 cmp	 DWORD PTR n$[rsp], 128	; 00000080H
  00018	7f 1c		 jg	 SHORT $LN6@fancy_roun
  0001a	41 b8 1b 00 00
	00		 mov	 r8d, 27
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CC@HIHALCKD@?$AA?4?$AA?4?$AA?2?$AAP?$AAa?$AAr?$AAs?$AAe?$AAr?$AA?2?$AAn?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BA@EAOMHEJP@?$AAn?$AA?5?$AA?$DO?$AA?5?$AA1?$AA2?$AA8?$AA?$AA@
  0002e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00034	33 c0		 xor	 eax, eax
$LN6@fancy_roun:
$LN3@fancy_roun:

; 28   :     while (result < n) {

  00036	8b 44 24 40	 mov	 eax, DWORD PTR n$[rsp]
  0003a	39 44 24 20	 cmp	 DWORD PTR result$[rsp], eax
  0003e	7d 1a		 jge	 SHORT $LN2@fancy_roun

; 29   :         result <<= 1;

  00040	8b 44 24 20	 mov	 eax, DWORD PTR result$[rsp]
  00044	d1 e0		 shl	 eax, 1
  00046	89 44 24 20	 mov	 DWORD PTR result$[rsp], eax

; 30   :         if (result <= 0)

  0004a	83 7c 24 20 00	 cmp	 DWORD PTR result$[rsp], 0
  0004f	7f 07		 jg	 SHORT $LN1@fancy_roun

; 31   :             return -1;

  00051	b8 ff ff ff ff	 mov	 eax, -1
  00056	eb 06		 jmp	 SHORT $LN4@fancy_roun
$LN1@fancy_roun:

; 32   :     }

  00058	eb dc		 jmp	 SHORT $LN3@fancy_roun
$LN2@fancy_roun:

; 33   :     return result;

  0005a	8b 44 24 20	 mov	 eax, DWORD PTR result$[rsp]
$LN4@fancy_roun:

; 34   : }

  0005e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00062	c3		 ret	 0
fancy_roundup ENDP
_TEXT	ENDS
PUBLIC	PyNode_Free
EXTRN	_PyObject_DebugFree:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyNode_Free DD imagerel $LN4
	DD	imagerel $LN4+42
	DD	imagerel $unwind$PyNode_Free
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyNode_Free DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyNode_Free
_TEXT	SEGMENT
n$ = 48
PyNode_Free PROC					; COMDAT

; 122  : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 123  :     if (n != NULL) {

  00009	48 83 7c 24 30
	00		 cmp	 QWORD PTR n$[rsp], 0
  0000f	74 14		 je	 SHORT $LN1@PyNode_Fre

; 124  :         freechildren(n);

  00011	48 8b 4c 24 30	 mov	 rcx, QWORD PTR n$[rsp]
  00016	e8 00 00 00 00	 call	 freechildren

; 125  :         PyObject_FREE(n);

  0001b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR n$[rsp]
  00020	e8 00 00 00 00	 call	 _PyObject_DebugFree
$LN1@PyNode_Fre:

; 126  :     }
; 127  : }

  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
PyNode_Free ENDP
_TEXT	ENDS
PUBLIC	_PyNode_SizeOf
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyNode_SizeOf DD imagerel $LN4
	DD	imagerel $LN4+55
	DD	imagerel $unwind$_PyNode_SizeOf
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyNode_SizeOf DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyNode_SizeOf
_TEXT	SEGMENT
res$ = 32
n$ = 64
_PyNode_SizeOf PROC					; COMDAT

; 131  : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 132  :     Py_ssize_t res = 0;

  00009	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0

; 133  : 
; 134  :     if (n != NULL)

  00012	48 83 7c 24 40
	00		 cmp	 QWORD PTR n$[rsp], 0
  00018	74 13		 je	 SHORT $LN1@PyNode_Siz

; 135  :         res = sizeof(node) + sizeofchildren(n);

  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR n$[rsp]
  0001f	e8 00 00 00 00	 call	 sizeofchildren
  00024	48 83 c0 28	 add	 rax, 40			; 00000028H
  00028	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax
$LN1@PyNode_Siz:

; 136  :     return res;

  0002d	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]

; 137  : }

  00032	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00036	c3		 ret	 0
_PyNode_SizeOf ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$freechildren DD imagerel freechildren
	DD	imagerel freechildren+123
	DD	imagerel $unwind$freechildren
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$freechildren DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT freechildren
_TEXT	SEGMENT
i$ = 32
n$ = 64
freechildren PROC					; COMDAT

; 141  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 142  :     int i;
; 143  :     for (i = NCH(n); --i >= 0; )

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR n$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@freechildr:
  00015	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00019	ff c8		 dec	 eax
  0001b	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
  0001f	83 7c 24 20 00	 cmp	 DWORD PTR i$[rsp], 0
  00024	7c 1c		 jl	 SHORT $LN3@freechildr

; 144  :         freechildren(CHILD(n, i));

  00026	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0002b	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR n$[rsp]
  00034	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00038	48 8b c8	 mov	 rcx, rax
  0003b	e8 00 00 00 00	 call	 freechildren
  00040	eb d3		 jmp	 SHORT $LN4@freechildr
$LN3@freechildr:

; 145  :     if (n->n_child != NULL)

  00042	48 8b 44 24 40	 mov	 rax, QWORD PTR n$[rsp]
  00047	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  0004c	74 0e		 je	 SHORT $LN2@freechildr

; 146  :         PyObject_FREE(n->n_child);

  0004e	48 8b 44 24 40	 mov	 rax, QWORD PTR n$[rsp]
  00053	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00057	e8 00 00 00 00	 call	 _PyObject_DebugFree
$LN2@freechildr:

; 147  :     if (STR(n) != NULL)

  0005c	48 8b 44 24 40	 mov	 rax, QWORD PTR n$[rsp]
  00061	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00066	74 0e		 je	 SHORT $LN1@freechildr

; 148  :         PyObject_FREE(STR(n));

  00068	48 8b 44 24 40	 mov	 rax, QWORD PTR n$[rsp]
  0006d	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00071	e8 00 00 00 00	 call	 _PyObject_DebugFree
$LN1@freechildr:

; 149  : }

  00076	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007a	c3		 ret	 0
freechildren ENDP
_TEXT	ENDS
EXTRN	strlen:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$sizeofchildren DD imagerel sizeofchildren
	DD	imagerel sizeofchildren+274
	DD	imagerel $unwind$sizeofchildren
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sizeofchildren DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT sizeofchildren
_TEXT	SEGMENT
res$ = 32
i$ = 40
tv91 = 48
tv90 = 56
n$ = 80
sizeofchildren PROC					; COMDAT

; 153  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 154  :     Py_ssize_t res = 0;

  00009	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0

; 155  :     int i;
; 156  :     for (i = NCH(n); --i >= 0; )

  00012	48 8b 44 24 50	 mov	 rax, QWORD PTR n$[rsp]
  00017	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  0001a	89 44 24 28	 mov	 DWORD PTR i$[rsp], eax
$LN4@sizeofchil:
  0001e	8b 44 24 28	 mov	 eax, DWORD PTR i$[rsp]
  00022	ff c8		 dec	 eax
  00024	89 44 24 28	 mov	 DWORD PTR i$[rsp], eax
  00028	83 7c 24 28 00	 cmp	 DWORD PTR i$[rsp], 0
  0002d	7c 2c		 jl	 SHORT $LN3@sizeofchil

; 157  :         res += sizeofchildren(CHILD(n, i));

  0002f	48 63 44 24 28	 movsxd	 rax, DWORD PTR i$[rsp]
  00034	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00038	48 8b 4c 24 50	 mov	 rcx, QWORD PTR n$[rsp]
  0003d	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00041	48 8b c8	 mov	 rcx, rax
  00044	e8 00 00 00 00	 call	 sizeofchildren
  00049	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  0004e	48 03 c8	 add	 rcx, rax
  00051	48 8b c1	 mov	 rax, rcx
  00054	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax
  00059	eb c3		 jmp	 SHORT $LN4@sizeofchil
$LN3@sizeofchil:

; 158  :     if (n->n_child != NULL)

  0005b	48 8b 44 24 50	 mov	 rax, QWORD PTR n$[rsp]
  00060	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  00065	74 78		 je	 SHORT $LN2@sizeofchil

; 159  :         /* allocated size of n->n_child array */
; 160  :         res += XXXROUNDUP(NCH(n)) * sizeof(node);

  00067	48 8b 44 24 50	 mov	 rax, QWORD PTR n$[rsp]
  0006c	83 78 18 01	 cmp	 DWORD PTR [rax+24], 1
  00070	7f 10		 jg	 SHORT $LN9@sizeofchil
  00072	48 8b 44 24 50	 mov	 rax, QWORD PTR n$[rsp]
  00077	48 63 40 18	 movsxd	 rax, DWORD PTR [rax+24]
  0007b	48 89 44 24 30	 mov	 QWORD PTR tv91[rsp], rax
  00080	eb 44		 jmp	 SHORT $LN10@sizeofchil
$LN9@sizeofchil:
  00082	48 8b 44 24 50	 mov	 rax, QWORD PTR n$[rsp]
  00087	81 78 18 80 00
	00 00		 cmp	 DWORD PTR [rax+24], 128	; 00000080H
  0008e	7f 18		 jg	 SHORT $LN7@sizeofchil
  00090	48 8b 44 24 50	 mov	 rax, QWORD PTR n$[rsp]
  00095	48 63 40 18	 movsxd	 rax, DWORD PTR [rax+24]
  00099	48 83 c0 03	 add	 rax, 3
  0009d	48 83 e0 fc	 and	 rax, -4
  000a1	48 89 44 24 38	 mov	 QWORD PTR tv90[rsp], rax
  000a6	eb 14		 jmp	 SHORT $LN8@sizeofchil
$LN7@sizeofchil:
  000a8	48 8b 44 24 50	 mov	 rax, QWORD PTR n$[rsp]
  000ad	8b 48 18	 mov	 ecx, DWORD PTR [rax+24]
  000b0	e8 00 00 00 00	 call	 fancy_roundup
  000b5	48 98		 cdqe
  000b7	48 89 44 24 38	 mov	 QWORD PTR tv90[rsp], rax
$LN8@sizeofchil:
  000bc	48 8b 44 24 38	 mov	 rax, QWORD PTR tv90[rsp]
  000c1	48 89 44 24 30	 mov	 QWORD PTR tv91[rsp], rax
$LN10@sizeofchil:
  000c6	48 8b 44 24 30	 mov	 rax, QWORD PTR tv91[rsp]
  000cb	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000cf	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  000d4	48 03 c8	 add	 rcx, rax
  000d7	48 8b c1	 mov	 rax, rcx
  000da	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax
$LN2@sizeofchil:

; 161  :     if (STR(n) != NULL)

  000df	48 8b 44 24 50	 mov	 rax, QWORD PTR n$[rsp]
  000e4	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  000e9	74 1d		 je	 SHORT $LN1@sizeofchil

; 162  :         res += strlen(STR(n)) + 1;

  000eb	48 8b 44 24 50	 mov	 rax, QWORD PTR n$[rsp]
  000f0	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  000f4	e8 00 00 00 00	 call	 strlen
  000f9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  000fe	48 8d 44 01 01	 lea	 rax, QWORD PTR [rcx+rax+1]
  00103	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax
$LN1@sizeofchil:

; 163  :     return res;

  00108	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]

; 164  : }

  0010d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00111	c3		 ret	 0
sizeofchildren ENDP
_TEXT	ENDS
END
