; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_05ILHMOJGN@slice?$AA@			; `string'
PUBLIC	??_C@_0L@NNMACJIG@__reduce__?$AA@		; `string'
PUBLIC	??_C@_07OKCKIPNN@indices?$AA@			; `string'
PUBLIC	??_C@_04CNBNFAL@step?$AA@			; `string'
PUBLIC	??_C@_04PEGFANN@stop?$AA@			; `string'
PUBLIC	??_C@_05FAGFPHJG@start?$AA@			; `string'
PUBLIC	??_C@_08CIOHNHGK@ellipsis?$AA@			; `string'
PUBLIC	PyEllipsis_Type
PUBLIC	_Py_EllipsisObject
PUBLIC	PySlice_Type
EXTRN	PyObject_HashNotImplemented:PROC
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
_BSS	SEGMENT
slice_cache DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_05ILHMOJGN@slice?$AA@
CONST	SEGMENT
??_C@_05ILHMOJGN@slice?$AA@ DB 'slice', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNMACJIG@__reduce__?$AA@
CONST	SEGMENT
??_C@_0L@NNMACJIG@__reduce__?$AA@ DB '__reduce__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07OKCKIPNN@indices?$AA@
CONST	SEGMENT
??_C@_07OKCKIPNN@indices?$AA@ DB 'indices', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CNBNFAL@step?$AA@
CONST	SEGMENT
??_C@_04CNBNFAL@step?$AA@ DB 'step', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PEGFANN@stop?$AA@
CONST	SEGMENT
??_C@_04PEGFANN@stop?$AA@ DB 'stop', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FAGFPHJG@start?$AA@
CONST	SEGMENT
??_C@_05FAGFPHJG@start?$AA@ DB 'start', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
PyEllipsis_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_08CIOHNHGK@ellipsis?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:ellipsis_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:ellipsis_new
	ORG $+72
_Py_EllipsisObject DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyEllipsis_Type
slice_doc DB	'slice(stop)', 0aH, 'slice(start, stop[, step])', 0aH, 0aH
	DB	'Create a slice object.  This is used for extended slicing (e.'
	DB	'g. a[0:10:2]).', 00H
	ORG $+12
slice_members DQ FLAT:??_C@_05FAGFPHJG@start?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04PEGFANN@stop?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000068H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04CNBNFAL@step?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000070H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
slice_indices_doc DB 'S.indices(len) -> (start, stop, stride)', 0aH, 0aH, 'A'
	DB	'ssuming a sequence of length len, calculate the start and sto'
	DB	'p', 0aH, 'indices, and the stride length of the extended slic'
	DB	'e described by', 0aH, 'S. Out of bounds indices are clipped i'
	DB	'n a manner consistent with the', 0aH, 'handling of normal sli'
	DB	'ces.', 00H
	ORG $+5
reduce_doc DB	'Return state information for pickling.', 00H
	ORG $+9
slice_methods DQ FLAT:??_C@_07OKCKIPNN@indices?$AA@
	DQ	FLAT:slice_indices
	DD	08H
	ORG $+4
	DQ	FLAT:slice_indices_doc
	DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:slice_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PySlice_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_05ILHMOJGN@slice?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:slice_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:slice_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_HashNotImplemented
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	FLAT:slice_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:slice_richcompare
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:slice_methods
	DQ	FLAT:slice_members
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:slice_new
	ORG $+72
_DATA	ENDS
;	COMDAT ??_C@_08CIOHNHGK@ellipsis?$AA@
CONST	SEGMENT
??_C@_08CIOHNHGK@ellipsis?$AA@ DB 'ellipsis', 00H	; `string'
CONST	ENDS
PUBLIC	_Py_IncRef
PUBLIC	??_C@_0CA@JHHECBPK@EllipsisType?5takes?5no?5arguments?$AA@ ; `string'
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyDict_Size:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\sliceobject.c
pdata	SEGMENT
$pdata$ellipsis_new DD imagerel ellipsis_new
	DD	imagerel ellipsis_new+101
	DD	imagerel $unwind$ellipsis_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ellipsis_new DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT ??_C@_0CA@JHHECBPK@EllipsisType?5takes?5no?5arguments?$AA@
CONST	SEGMENT
??_C@_0CA@JHHECBPK@EllipsisType?5takes?5no?5arguments?$AA@ DB 'EllipsisTy'
	DB	'pe takes no arguments', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ellipsis_new
_TEXT	SEGMENT
type$ = 48
args$ = 56
kwargs$ = 64
ellipsis_new PROC					; COMDAT

; 21   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 22   :     if (PyTuple_GET_SIZE(args) || (kwargs && PyDict_Size(kwargs))) {

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR args$[rsp]
  00018	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0001d	75 17		 jne	 SHORT $LN1@ellipsis_n
  0001f	48 83 7c 24 40
	00		 cmp	 QWORD PTR kwargs$[rsp], 0
  00025	74 26		 je	 SHORT $LN2@ellipsis_n
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kwargs$[rsp]
  0002c	e8 00 00 00 00	 call	 PyDict_Size
  00031	48 85 c0	 test	 rax, rax
  00034	74 17		 je	 SHORT $LN2@ellipsis_n
$LN1@ellipsis_n:

; 23   :         PyErr_SetString(PyExc_TypeError, "EllipsisType takes no arguments");

  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@JHHECBPK@EllipsisType?5takes?5no?5arguments?$AA@
  0003d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00044	e8 00 00 00 00	 call	 PyErr_SetString

; 24   :         return NULL;

  00049	33 c0		 xor	 eax, eax
  0004b	eb 13		 jmp	 SHORT $LN3@ellipsis_n
$LN2@ellipsis_n:

; 25   :     }
; 26   :     Py_INCREF(Py_Ellipsis);

  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_EllipsisObject
  00054	e8 00 00 00 00	 call	 _Py_IncRef

; 27   :     return Py_Ellipsis;

  00059	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_EllipsisObject
$LN3@ellipsis_n:

; 28   : }

  00060	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00064	c3		 ret	 0
ellipsis_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_RefTotal:QWORD
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_08KKBGFFMJ@Ellipsis?$AA@			; `string'
EXTRN	PyUnicode_FromString:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\sliceobject.c
pdata	SEGMENT
$pdata$ellipsis_repr DD imagerel ellipsis_repr
	DD	imagerel ellipsis_repr+26
	DD	imagerel $unwind$ellipsis_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ellipsis_repr DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_08KKBGFFMJ@Ellipsis?$AA@
CONST	SEGMENT
??_C@_08KKBGFFMJ@Ellipsis?$AA@ DB 'Ellipsis', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ellipsis_repr
_TEXT	SEGMENT
op$ = 48
ellipsis_repr PROC					; COMDAT

; 32   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 33   :     return PyUnicode_FromString("Ellipsis");

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08KKBGFFMJ@Ellipsis?$AA@
  00010	e8 00 00 00 00	 call	 PyUnicode_FromString

; 34   : }

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
ellipsis_repr ENDP
_TEXT	ENDS
PUBLIC	PySlice_Fini
EXTRN	_PyObject_DebugFree:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySlice_Fini DD imagerel $LN5
	DD	imagerel $LN5+61
	DD	imagerel $unwind$PySlice_Fini
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySlice_Fini DD 010401H
	DD	06204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PySlice_Fini
_TEXT	SEGMENT
obj$ = 32
PySlice_Fini PROC					; COMDAT

; 90   : {

$LN5:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 91   :     PySliceObject *obj = slice_cache;

  00004	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR slice_cache
  0000b	48 89 44 24 20	 mov	 QWORD PTR obj$[rsp], rax

; 92   :     if (Py_PXCTX)

  00010	e8 00 00 00 00	 call	 _Py_PXCTX
  00015	85 c0		 test	 eax, eax
  00017	74 02		 je	 SHORT $LN2@PySlice_Fi

; 93   :         return;

  00019	eb 1d		 jmp	 SHORT $LN3@PySlice_Fi
$LN2@PySlice_Fi:

; 94   :     if (obj != NULL) {

  0001b	48 83 7c 24 20
	00		 cmp	 QWORD PTR obj$[rsp], 0
  00021	74 15		 je	 SHORT $LN1@PySlice_Fi

; 95   :         slice_cache = NULL;

  00023	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR slice_cache, 0

; 96   :         PyObject_Del(obj);

  0002e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR obj$[rsp]
  00033	e8 00 00 00 00	 call	 _PyObject_DebugFree
$LN1@PySlice_Fi:
$LN3@PySlice_Fi:

; 97   :     }
; 98   : }

  00038	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003c	c3		 ret	 0
PySlice_Fini ENDP
_TEXT	ENDS
PUBLIC	PySlice_New
EXTRN	_Py_NoneStruct:BYTE
EXTRN	_PyObject_New:PROC
EXTRN	_PxObject_New:PROC
EXTRN	_Py_NewReference:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySlice_New DD imagerel $LN11
	DD	imagerel $LN11+285
	DD	imagerel $unwind$PySlice_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySlice_New DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PySlice_New
_TEXT	SEGMENT
obj$ = 32
tv74 = 40
start$ = 64
stop$ = 72
step$ = 80
PySlice_New PROC					; COMDAT

; 106  : {

$LN11:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 107  :     PySliceObject *obj;
; 108  : 
; 109  :     if (!Py_PXCTX && slice_cache != NULL) {

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	75 2d		 jne	 SHORT $LN6@PySlice_Ne
  0001c	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR slice_cache, 0
  00024	74 23		 je	 SHORT $LN6@PySlice_Ne

; 110  :         obj = slice_cache;

  00026	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR slice_cache
  0002d	48 89 44 24 20	 mov	 QWORD PTR obj$[rsp], rax

; 111  :         slice_cache = NULL;

  00032	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR slice_cache, 0

; 112  :         _Py_NewReference((PyObject *)obj);

  0003d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR obj$[rsp]
  00042	e8 00 00 00 00	 call	 _Py_NewReference

; 113  :     } else {

  00047	eb 46		 jmp	 SHORT $LN5@PySlice_Ne
$LN6@PySlice_Ne:

; 114  :         obj = PyObject_New(PySliceObject, &PySlice_Type);

  00049	e8 00 00 00 00	 call	 _Py_PXCTX
  0004e	85 c0		 test	 eax, eax
  00050	74 13		 je	 SHORT $LN9@PySlice_Ne
  00052	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PySlice_Type
  00059	e8 00 00 00 00	 call	 _PxObject_New
  0005e	48 89 44 24 28	 mov	 QWORD PTR tv74[rsp], rax
  00063	eb 11		 jmp	 SHORT $LN10@PySlice_Ne
$LN9@PySlice_Ne:
  00065	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PySlice_Type
  0006c	e8 00 00 00 00	 call	 _PyObject_New
  00071	48 89 44 24 28	 mov	 QWORD PTR tv74[rsp], rax
$LN10@PySlice_Ne:
  00076	48 8b 44 24 28	 mov	 rax, QWORD PTR tv74[rsp]
  0007b	48 89 44 24 20	 mov	 QWORD PTR obj$[rsp], rax

; 115  :         if (obj == NULL)

  00080	48 83 7c 24 20
	00		 cmp	 QWORD PTR obj$[rsp], 0
  00086	75 07		 jne	 SHORT $LN4@PySlice_Ne

; 116  :             return NULL;

  00088	33 c0		 xor	 eax, eax
  0008a	e9 89 00 00 00	 jmp	 $LN7@PySlice_Ne
$LN4@PySlice_Ne:
$LN5@PySlice_Ne:

; 117  :     }
; 118  : 
; 119  :     if (step == NULL) step = Py_None;

  0008f	48 83 7c 24 50
	00		 cmp	 QWORD PTR step$[rsp], 0
  00095	75 0c		 jne	 SHORT $LN3@PySlice_Ne
  00097	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0009e	48 89 44 24 50	 mov	 QWORD PTR step$[rsp], rax
$LN3@PySlice_Ne:

; 120  :     Py_INCREF(step);

  000a3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR step$[rsp]
  000a8	e8 00 00 00 00	 call	 _Py_IncRef

; 121  :     if (start == NULL) start = Py_None;

  000ad	48 83 7c 24 40
	00		 cmp	 QWORD PTR start$[rsp], 0
  000b3	75 0c		 jne	 SHORT $LN2@PySlice_Ne
  000b5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000bc	48 89 44 24 40	 mov	 QWORD PTR start$[rsp], rax
$LN2@PySlice_Ne:

; 122  :     Py_INCREF(start);

  000c1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR start$[rsp]
  000c6	e8 00 00 00 00	 call	 _Py_IncRef

; 123  :     if (stop == NULL) stop = Py_None;

  000cb	48 83 7c 24 48
	00		 cmp	 QWORD PTR stop$[rsp], 0
  000d1	75 0c		 jne	 SHORT $LN1@PySlice_Ne
  000d3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000da	48 89 44 24 48	 mov	 QWORD PTR stop$[rsp], rax
$LN1@PySlice_Ne:

; 124  :     Py_INCREF(stop);

  000df	48 8b 4c 24 48	 mov	 rcx, QWORD PTR stop$[rsp]
  000e4	e8 00 00 00 00	 call	 _Py_IncRef

; 125  : 
; 126  :     obj->step = step;

  000e9	48 8b 44 24 20	 mov	 rax, QWORD PTR obj$[rsp]
  000ee	48 8b 4c 24 50	 mov	 rcx, QWORD PTR step$[rsp]
  000f3	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 127  :     obj->start = start;

  000f7	48 8b 44 24 20	 mov	 rax, QWORD PTR obj$[rsp]
  000fc	48 8b 4c 24 40	 mov	 rcx, QWORD PTR start$[rsp]
  00101	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 128  :     obj->stop = stop;

  00105	48 8b 44 24 20	 mov	 rax, QWORD PTR obj$[rsp]
  0010a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR stop$[rsp]
  0010f	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 129  : 
; 130  :     return (PyObject *) obj;

  00113	48 8b 44 24 20	 mov	 rax, QWORD PTR obj$[rsp]
$LN7@PySlice_Ne:

; 131  : }

  00118	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011c	c3		 ret	 0
PySlice_New ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
PUBLIC	_PySlice_FromIndices
EXTRN	PyLong_FromSsize_t:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PySlice_FromIndices DD imagerel $LN5
	DD	imagerel $LN5+131
	DD	imagerel $unwind$_PySlice_FromIndices
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PySlice_FromIndices DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PySlice_FromIndices
_TEXT	SEGMENT
slice$ = 32
end$ = 40
start$ = 48
istart$ = 80
istop$ = 88
_PySlice_FromIndices PROC				; COMDAT

; 135  : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 136  :     PyObject *start, *end, *slice;
; 137  :     start = PyLong_FromSsize_t(istart);

  0000e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR istart$[rsp]
  00013	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  00018	48 89 44 24 30	 mov	 QWORD PTR start$[rsp], rax

; 138  :     if (!start)

  0001d	48 83 7c 24 30
	00		 cmp	 QWORD PTR start$[rsp], 0
  00023	75 04		 jne	 SHORT $LN2@PySlice_Fr

; 139  :         return NULL;

  00025	33 c0		 xor	 eax, eax
  00027	eb 55		 jmp	 SHORT $LN3@PySlice_Fr
$LN2@PySlice_Fr:

; 140  :     end = PyLong_FromSsize_t(istop);

  00029	48 8b 4c 24 58	 mov	 rcx, QWORD PTR istop$[rsp]
  0002e	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  00033	48 89 44 24 28	 mov	 QWORD PTR end$[rsp], rax

; 141  :     if (!end) {

  00038	48 83 7c 24 28
	00		 cmp	 QWORD PTR end$[rsp], 0
  0003e	75 0e		 jne	 SHORT $LN1@PySlice_Fr

; 142  :         Py_DECREF(start);

  00040	48 8b 4c 24 30	 mov	 rcx, QWORD PTR start$[rsp]
  00045	e8 00 00 00 00	 call	 _Py_DecRef

; 143  :         return NULL;

  0004a	33 c0		 xor	 eax, eax
  0004c	eb 30		 jmp	 SHORT $LN3@PySlice_Fr
$LN1@PySlice_Fr:

; 144  :     }
; 145  : 
; 146  :     slice = PySlice_New(start, end, NULL);

  0004e	45 33 c0	 xor	 r8d, r8d
  00051	48 8b 54 24 28	 mov	 rdx, QWORD PTR end$[rsp]
  00056	48 8b 4c 24 30	 mov	 rcx, QWORD PTR start$[rsp]
  0005b	e8 00 00 00 00	 call	 PySlice_New
  00060	48 89 44 24 20	 mov	 QWORD PTR slice$[rsp], rax

; 147  :     Py_DECREF(start);

  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR start$[rsp]
  0006a	e8 00 00 00 00	 call	 _Py_DecRef

; 148  :     Py_DECREF(end);

  0006f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR end$[rsp]
  00074	e8 00 00 00 00	 call	 _Py_DecRef

; 149  :     return slice;

  00079	48 8b 44 24 20	 mov	 rax, QWORD PTR slice$[rsp]
$LN3@PySlice_Fr:

; 150  : }

  0007e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00082	c3		 ret	 0
_PySlice_FromIndices ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	PySlice_GetIndices
EXTRN	PyLong_AsSsize_t:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\sliceobject.c
pdata	SEGMENT
$pdata$PySlice_GetIndices DD imagerel $LN21
	DD	imagerel $LN21+509
	DD	imagerel $unwind$PySlice_GetIndices
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySlice_GetIndices DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PySlice_GetIndices
_TEXT	SEGMENT
r$ = 32
tv78 = 40
tv92 = 48
_r$ = 80
length$ = 88
start$ = 96
stop$ = 104
step$ = 112
PySlice_GetIndices PROC					; COMDAT

; 155  : {

$LN21:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 156  :     PySliceObject *r = (PySliceObject*)_r;

  00018	48 8b 44 24 50	 mov	 rax, QWORD PTR _r$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR r$[rsp], rax

; 157  :     /* XXX support long ints */
; 158  :     if (r->step == Py_None) {

  00022	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00029	48 8b 4c 24 20	 mov	 rcx, QWORD PTR r$[rsp]
  0002e	48 39 41 70	 cmp	 QWORD PTR [rcx+112], rax
  00032	75 0e		 jne	 SHORT $LN14@PySlice_Ge

; 159  :         *step = 1;

  00034	48 8b 44 24 70	 mov	 rax, QWORD PTR step$[rsp]
  00039	48 c7 00 01 00
	00 00		 mov	 QWORD PTR [rax], 1

; 160  :     } else {

  00040	eb 3c		 jmp	 SHORT $LN13@PySlice_Ge
$LN14@PySlice_Ge:

; 161  :         if (!PyLong_Check(r->step)) return -1;

  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR r$[rsp]
  00047	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0004b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0004f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00055	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  0005a	85 c0		 test	 eax, eax
  0005c	75 0a		 jne	 SHORT $LN12@PySlice_Ge
  0005e	b8 ff ff ff ff	 mov	 eax, -1
  00063	e9 90 01 00 00	 jmp	 $LN15@PySlice_Ge
$LN12@PySlice_Ge:

; 162  :         *step = PyLong_AsSsize_t(r->step);

  00068	48 8b 44 24 20	 mov	 rax, QWORD PTR r$[rsp]
  0006d	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00071	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  00076	48 8b 4c 24 70	 mov	 rcx, QWORD PTR step$[rsp]
  0007b	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN13@PySlice_Ge:

; 163  :     }
; 164  :     if (r->start == Py_None) {

  0007e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00085	48 8b 4c 24 20	 mov	 rcx, QWORD PTR r$[rsp]
  0008a	48 39 41 60	 cmp	 QWORD PTR [rcx+96], rax
  0008e	75 32		 jne	 SHORT $LN11@PySlice_Ge

; 165  :         *start = *step < 0 ? length-1 : 0;

  00090	48 8b 44 24 70	 mov	 rax, QWORD PTR step$[rsp]
  00095	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00099	7d 0f		 jge	 SHORT $LN17@PySlice_Ge
  0009b	48 8b 44 24 58	 mov	 rax, QWORD PTR length$[rsp]
  000a0	48 ff c8	 dec	 rax
  000a3	48 89 44 24 28	 mov	 QWORD PTR tv78[rsp], rax
  000a8	eb 09		 jmp	 SHORT $LN18@PySlice_Ge
$LN17@PySlice_Ge:
  000aa	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR tv78[rsp], 0
$LN18@PySlice_Ge:
  000b3	48 8b 44 24 60	 mov	 rax, QWORD PTR start$[rsp]
  000b8	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv78[rsp]
  000bd	48 89 08	 mov	 QWORD PTR [rax], rcx

; 166  :     } else {

  000c0	eb 5c		 jmp	 SHORT $LN10@PySlice_Ge
$LN11@PySlice_Ge:

; 167  :         if (!PyLong_Check(r->start)) return -1;

  000c2	48 8b 44 24 20	 mov	 rax, QWORD PTR r$[rsp]
  000c7	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000cb	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000cf	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000d5	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  000da	85 c0		 test	 eax, eax
  000dc	75 0a		 jne	 SHORT $LN9@PySlice_Ge
  000de	b8 ff ff ff ff	 mov	 eax, -1
  000e3	e9 10 01 00 00	 jmp	 $LN15@PySlice_Ge
$LN9@PySlice_Ge:

; 168  :         *start = PyLong_AsSsize_t(r->start);

  000e8	48 8b 44 24 20	 mov	 rax, QWORD PTR r$[rsp]
  000ed	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  000f1	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  000f6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR start$[rsp]
  000fb	48 89 01	 mov	 QWORD PTR [rcx], rax

; 169  :         if (*start < 0) *start += length;

  000fe	48 8b 44 24 60	 mov	 rax, QWORD PTR start$[rsp]
  00103	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00107	7d 15		 jge	 SHORT $LN8@PySlice_Ge
  00109	48 8b 44 24 60	 mov	 rax, QWORD PTR start$[rsp]
  0010e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00111	48 03 44 24 58	 add	 rax, QWORD PTR length$[rsp]
  00116	48 8b 4c 24 60	 mov	 rcx, QWORD PTR start$[rsp]
  0011b	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN8@PySlice_Ge:
$LN10@PySlice_Ge:

; 170  :     }
; 171  :     if (r->stop == Py_None) {

  0011e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00125	48 8b 4c 24 20	 mov	 rcx, QWORD PTR r$[rsp]
  0012a	48 39 41 68	 cmp	 QWORD PTR [rcx+104], rax
  0012e	75 2f		 jne	 SHORT $LN7@PySlice_Ge

; 172  :         *stop = *step < 0 ? -1 : length;

  00130	48 8b 44 24 70	 mov	 rax, QWORD PTR step$[rsp]
  00135	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00139	7d 0b		 jge	 SHORT $LN19@PySlice_Ge
  0013b	48 c7 44 24 30
	ff ff ff ff	 mov	 QWORD PTR tv92[rsp], -1
  00144	eb 0a		 jmp	 SHORT $LN20@PySlice_Ge
$LN19@PySlice_Ge:
  00146	48 8b 44 24 58	 mov	 rax, QWORD PTR length$[rsp]
  0014b	48 89 44 24 30	 mov	 QWORD PTR tv92[rsp], rax
$LN20@PySlice_Ge:
  00150	48 8b 44 24 68	 mov	 rax, QWORD PTR stop$[rsp]
  00155	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv92[rsp]
  0015a	48 89 08	 mov	 QWORD PTR [rax], rcx

; 173  :     } else {

  0015d	eb 59		 jmp	 SHORT $LN6@PySlice_Ge
$LN7@PySlice_Ge:

; 174  :         if (!PyLong_Check(r->stop)) return -1;

  0015f	48 8b 44 24 20	 mov	 rax, QWORD PTR r$[rsp]
  00164	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00168	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0016c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00172	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  00177	85 c0		 test	 eax, eax
  00179	75 07		 jne	 SHORT $LN5@PySlice_Ge
  0017b	b8 ff ff ff ff	 mov	 eax, -1
  00180	eb 76		 jmp	 SHORT $LN15@PySlice_Ge
$LN5@PySlice_Ge:

; 175  :         *stop = PyLong_AsSsize_t(r->stop);

  00182	48 8b 44 24 20	 mov	 rax, QWORD PTR r$[rsp]
  00187	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  0018b	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  00190	48 8b 4c 24 68	 mov	 rcx, QWORD PTR stop$[rsp]
  00195	48 89 01	 mov	 QWORD PTR [rcx], rax

; 176  :         if (*stop < 0) *stop += length;

  00198	48 8b 44 24 68	 mov	 rax, QWORD PTR stop$[rsp]
  0019d	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  001a1	7d 15		 jge	 SHORT $LN4@PySlice_Ge
  001a3	48 8b 44 24 68	 mov	 rax, QWORD PTR stop$[rsp]
  001a8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001ab	48 03 44 24 58	 add	 rax, QWORD PTR length$[rsp]
  001b0	48 8b 4c 24 68	 mov	 rcx, QWORD PTR stop$[rsp]
  001b5	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN4@PySlice_Ge:
$LN6@PySlice_Ge:

; 177  :     }
; 178  :     if (*stop > length) return -1;

  001b8	48 8b 44 24 68	 mov	 rax, QWORD PTR stop$[rsp]
  001bd	48 8b 4c 24 58	 mov	 rcx, QWORD PTR length$[rsp]
  001c2	48 39 08	 cmp	 QWORD PTR [rax], rcx
  001c5	7e 07		 jle	 SHORT $LN3@PySlice_Ge
  001c7	b8 ff ff ff ff	 mov	 eax, -1
  001cc	eb 2a		 jmp	 SHORT $LN15@PySlice_Ge
$LN3@PySlice_Ge:

; 179  :     if (*start >= length) return -1;

  001ce	48 8b 44 24 60	 mov	 rax, QWORD PTR start$[rsp]
  001d3	48 8b 4c 24 58	 mov	 rcx, QWORD PTR length$[rsp]
  001d8	48 39 08	 cmp	 QWORD PTR [rax], rcx
  001db	7c 07		 jl	 SHORT $LN2@PySlice_Ge
  001dd	b8 ff ff ff ff	 mov	 eax, -1
  001e2	eb 14		 jmp	 SHORT $LN15@PySlice_Ge
$LN2@PySlice_Ge:

; 180  :     if (*step == 0) return -1;

  001e4	48 8b 44 24 70	 mov	 rax, QWORD PTR step$[rsp]
  001e9	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  001ed	75 07		 jne	 SHORT $LN1@PySlice_Ge
  001ef	b8 ff ff ff ff	 mov	 eax, -1
  001f4	eb 02		 jmp	 SHORT $LN15@PySlice_Ge
$LN1@PySlice_Ge:

; 181  :     return 0;

  001f6	33 c0		 xor	 eax, eax
$LN15@PySlice_Ge:

; 182  : }

  001f8	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001fc	c3		 ret	 0
PySlice_GetIndices ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@PFFNIAMP@slice?5step?5cannot?5be?5zero?$AA@ ; `string'
PUBLIC	PySlice_GetIndicesEx
EXTRN	PyExc_ValueError:QWORD
EXTRN	_PyEval_SliceIndex:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySlice_GetIndicesEx DD imagerel $LN38
	DD	imagerel $LN38+1046
	DD	imagerel $unwind$PySlice_GetIndicesEx
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySlice_GetIndicesEx DD 011801H
	DD	0e218H
xdata	ENDS
;	COMDAT ??_C@_0BK@PFFNIAMP@slice?5step?5cannot?5be?5zero?$AA@
CONST	SEGMENT
??_C@_0BK@PFFNIAMP@slice?5step?5cannot?5be?5zero?$AA@ DB 'slice step cann'
	DB	'ot be zero', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PySlice_GetIndicesEx
_TEXT	SEGMENT
defstop$ = 32
defstart$ = 40
r$ = 48
tv77 = 56
tv79 = 64
tv91 = 72
tv128 = 80
tv140 = 88
tv145 = 96
_r$ = 128
length$ = 136
start$ = 144
stop$ = 152
step$ = 160
slicelength$ = 168
PySlice_GetIndicesEx PROC				; COMDAT

; 188  : {

$LN38:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 189  :     PySliceObject *r = (PySliceObject*)_r;

  00018	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR _r$[rsp]
  00020	48 89 44 24 30	 mov	 QWORD PTR r$[rsp], rax

; 190  :     /* this is harder to get right than you might think */
; 191  : 
; 192  :     Py_ssize_t defstart, defstop;
; 193  : 
; 194  :     if (r->step == Py_None) {

  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0002c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR r$[rsp]
  00031	48 39 41 70	 cmp	 QWORD PTR [rcx+112], rax
  00035	75 11		 jne	 SHORT $LN23@PySlice_Ge@2

; 195  :         *step = 1;

  00037	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR step$[rsp]
  0003f	48 c7 00 01 00
	00 00		 mov	 QWORD PTR [rax], 1

; 196  :     }
; 197  :     else {

  00046	eb 7b		 jmp	 SHORT $LN22@PySlice_Ge@2
$LN23@PySlice_Ge@2:

; 198  :         if (!_PyEval_SliceIndex(r->step, step)) return -1;

  00048	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR step$[rsp]
  00050	48 8b 44 24 30	 mov	 rax, QWORD PTR r$[rsp]
  00055	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00059	e8 00 00 00 00	 call	 _PyEval_SliceIndex
  0005e	85 c0		 test	 eax, eax
  00060	75 0a		 jne	 SHORT $LN21@PySlice_Ge@2
  00062	b8 ff ff ff ff	 mov	 eax, -1
  00067	e9 a5 03 00 00	 jmp	 $LN24@PySlice_Ge@2
$LN21@PySlice_Ge@2:

; 199  :         if (*step == 0) {

  0006c	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR step$[rsp]
  00074	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00078	75 1d		 jne	 SHORT $LN20@PySlice_Ge@2

; 200  :             PyErr_SetString(PyExc_ValueError,
; 201  :                             "slice step cannot be zero");

  0007a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@PFFNIAMP@slice?5step?5cannot?5be?5zero?$AA@
  00081	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00088	e8 00 00 00 00	 call	 PyErr_SetString

; 202  :             return -1;

  0008d	b8 ff ff ff ff	 mov	 eax, -1
  00092	e9 7a 03 00 00	 jmp	 $LN24@PySlice_Ge@2
$LN20@PySlice_Ge@2:

; 203  :         }
; 204  :         /* Here *step might be -PY_SSIZE_T_MAX-1; in this case we replace it
; 205  :          * with -PY_SSIZE_T_MAX.  This doesn't affect the semantics, and it
; 206  :          * guards against later undefined behaviour resulting from code that
; 207  :          * does "step = -step" as part of a slice reversal.
; 208  :          */
; 209  :         if (*step < -PY_SSIZE_T_MAX)

  00097	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR step$[rsp]
  0009f	48 b9 01 00 00
	00 00 00 00 80	 mov	 rcx, -9223372036854775807 ; 8000000000000001H
  000a9	48 39 08	 cmp	 QWORD PTR [rax], rcx
  000ac	7d 15		 jge	 SHORT $LN19@PySlice_Ge@2

; 210  :             *step = -PY_SSIZE_T_MAX;

  000ae	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR step$[rsp]
  000b6	48 b9 01 00 00
	00 00 00 00 80	 mov	 rcx, -9223372036854775807 ; 8000000000000001H
  000c0	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN19@PySlice_Ge@2:
$LN22@PySlice_Ge@2:

; 211  :     }
; 212  : 
; 213  :     defstart = *step < 0 ? length-1 : 0;

  000c3	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR step$[rsp]
  000cb	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000cf	7d 12		 jge	 SHORT $LN26@PySlice_Ge@2
  000d1	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR length$[rsp]
  000d9	48 ff c8	 dec	 rax
  000dc	48 89 44 24 38	 mov	 QWORD PTR tv77[rsp], rax
  000e1	eb 09		 jmp	 SHORT $LN27@PySlice_Ge@2
$LN26@PySlice_Ge@2:
  000e3	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv77[rsp], 0
$LN27@PySlice_Ge@2:
  000ec	48 8b 44 24 38	 mov	 rax, QWORD PTR tv77[rsp]
  000f1	48 89 44 24 28	 mov	 QWORD PTR defstart$[rsp], rax

; 214  :     defstop = *step < 0 ? -1 : length;

  000f6	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR step$[rsp]
  000fe	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00102	7d 0b		 jge	 SHORT $LN28@PySlice_Ge@2
  00104	48 c7 44 24 40
	ff ff ff ff	 mov	 QWORD PTR tv79[rsp], -1
  0010d	eb 0d		 jmp	 SHORT $LN29@PySlice_Ge@2
$LN28@PySlice_Ge@2:
  0010f	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR length$[rsp]
  00117	48 89 44 24 40	 mov	 QWORD PTR tv79[rsp], rax
$LN29@PySlice_Ge@2:
  0011c	48 8b 44 24 40	 mov	 rax, QWORD PTR tv79[rsp]
  00121	48 89 44 24 20	 mov	 QWORD PTR defstop$[rsp], rax

; 215  : 
; 216  :     if (r->start == Py_None) {

  00126	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0012d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR r$[rsp]
  00132	48 39 41 60	 cmp	 QWORD PTR [rcx+96], rax
  00136	75 15		 jne	 SHORT $LN18@PySlice_Ge@2

; 217  :         *start = defstart;

  00138	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR start$[rsp]
  00140	48 8b 4c 24 28	 mov	 rcx, QWORD PTR defstart$[rsp]
  00145	48 89 08	 mov	 QWORD PTR [rax], rcx

; 218  :     }
; 219  :     else {

  00148	e9 e0 00 00 00	 jmp	 $LN17@PySlice_Ge@2
$LN18@PySlice_Ge@2:

; 220  :         if (!_PyEval_SliceIndex(r->start, start)) return -1;

  0014d	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR start$[rsp]
  00155	48 8b 44 24 30	 mov	 rax, QWORD PTR r$[rsp]
  0015a	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0015e	e8 00 00 00 00	 call	 _PyEval_SliceIndex
  00163	85 c0		 test	 eax, eax
  00165	75 0a		 jne	 SHORT $LN16@PySlice_Ge@2
  00167	b8 ff ff ff ff	 mov	 eax, -1
  0016c	e9 a0 02 00 00	 jmp	 $LN24@PySlice_Ge@2
$LN16@PySlice_Ge@2:

; 221  :         if (*start < 0) *start += length;

  00171	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR start$[rsp]
  00179	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0017d	7d 1e		 jge	 SHORT $LN15@PySlice_Ge@2
  0017f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR start$[rsp]
  00187	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0018a	48 03 84 24 88
	00 00 00	 add	 rax, QWORD PTR length$[rsp]
  00192	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR start$[rsp]
  0019a	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN15@PySlice_Ge@2:

; 222  :         if (*start < 0) *start = (*step < 0) ? -1 : 0;

  0019d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR start$[rsp]
  001a5	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  001a9	7d 30		 jge	 SHORT $LN14@PySlice_Ge@2
  001ab	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR step$[rsp]
  001b3	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  001b7	7d 0a		 jge	 SHORT $LN30@PySlice_Ge@2
  001b9	c7 44 24 48 ff
	ff ff ff	 mov	 DWORD PTR tv91[rsp], -1
  001c1	eb 08		 jmp	 SHORT $LN31@PySlice_Ge@2
$LN30@PySlice_Ge@2:
  001c3	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
$LN31@PySlice_Ge@2:
  001cb	48 63 44 24 48	 movsxd	 rax, DWORD PTR tv91[rsp]
  001d0	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR start$[rsp]
  001d8	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN14@PySlice_Ge@2:

; 223  :         if (*start >= length)

  001db	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR start$[rsp]
  001e3	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR length$[rsp]
  001eb	48 39 08	 cmp	 QWORD PTR [rax], rcx
  001ee	7c 3d		 jl	 SHORT $LN13@PySlice_Ge@2

; 224  :             *start = (*step < 0) ? length - 1 : length;

  001f0	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR step$[rsp]
  001f8	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  001fc	7d 12		 jge	 SHORT $LN32@PySlice_Ge@2
  001fe	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR length$[rsp]
  00206	48 ff c8	 dec	 rax
  00209	48 89 44 24 50	 mov	 QWORD PTR tv128[rsp], rax
  0020e	eb 0d		 jmp	 SHORT $LN33@PySlice_Ge@2
$LN32@PySlice_Ge@2:
  00210	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR length$[rsp]
  00218	48 89 44 24 50	 mov	 QWORD PTR tv128[rsp], rax
$LN33@PySlice_Ge@2:
  0021d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR start$[rsp]
  00225	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv128[rsp]
  0022a	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN13@PySlice_Ge@2:
$LN17@PySlice_Ge@2:

; 225  :     }
; 226  : 
; 227  :     if (r->stop == Py_None) {

  0022d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00234	48 8b 4c 24 30	 mov	 rcx, QWORD PTR r$[rsp]
  00239	48 39 41 68	 cmp	 QWORD PTR [rcx+104], rax
  0023d	75 15		 jne	 SHORT $LN12@PySlice_Ge@2

; 228  :         *stop = defstop;

  0023f	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR stop$[rsp]
  00247	48 8b 4c 24 20	 mov	 rcx, QWORD PTR defstop$[rsp]
  0024c	48 89 08	 mov	 QWORD PTR [rax], rcx

; 229  :     }
; 230  :     else {

  0024f	e9 e0 00 00 00	 jmp	 $LN11@PySlice_Ge@2
$LN12@PySlice_Ge@2:

; 231  :         if (!_PyEval_SliceIndex(r->stop, stop)) return -1;

  00254	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR stop$[rsp]
  0025c	48 8b 44 24 30	 mov	 rax, QWORD PTR r$[rsp]
  00261	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00265	e8 00 00 00 00	 call	 _PyEval_SliceIndex
  0026a	85 c0		 test	 eax, eax
  0026c	75 0a		 jne	 SHORT $LN10@PySlice_Ge@2
  0026e	b8 ff ff ff ff	 mov	 eax, -1
  00273	e9 99 01 00 00	 jmp	 $LN24@PySlice_Ge@2
$LN10@PySlice_Ge@2:

; 232  :         if (*stop < 0) *stop += length;

  00278	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR stop$[rsp]
  00280	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00284	7d 1e		 jge	 SHORT $LN9@PySlice_Ge@2
  00286	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR stop$[rsp]
  0028e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00291	48 03 84 24 88
	00 00 00	 add	 rax, QWORD PTR length$[rsp]
  00299	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR stop$[rsp]
  002a1	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN9@PySlice_Ge@2:

; 233  :         if (*stop < 0) *stop = (*step < 0) ? -1 : 0;

  002a4	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR stop$[rsp]
  002ac	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  002b0	7d 30		 jge	 SHORT $LN8@PySlice_Ge@2
  002b2	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR step$[rsp]
  002ba	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  002be	7d 0a		 jge	 SHORT $LN34@PySlice_Ge@2
  002c0	c7 44 24 58 ff
	ff ff ff	 mov	 DWORD PTR tv140[rsp], -1
  002c8	eb 08		 jmp	 SHORT $LN35@PySlice_Ge@2
$LN34@PySlice_Ge@2:
  002ca	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv140[rsp], 0
$LN35@PySlice_Ge@2:
  002d2	48 63 44 24 58	 movsxd	 rax, DWORD PTR tv140[rsp]
  002d7	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR stop$[rsp]
  002df	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN8@PySlice_Ge@2:

; 234  :         if (*stop >= length)

  002e2	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR stop$[rsp]
  002ea	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR length$[rsp]
  002f2	48 39 08	 cmp	 QWORD PTR [rax], rcx
  002f5	7c 3d		 jl	 SHORT $LN7@PySlice_Ge@2

; 235  :             *stop = (*step < 0) ? length - 1 : length;

  002f7	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR step$[rsp]
  002ff	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00303	7d 12		 jge	 SHORT $LN36@PySlice_Ge@2
  00305	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR length$[rsp]
  0030d	48 ff c8	 dec	 rax
  00310	48 89 44 24 60	 mov	 QWORD PTR tv145[rsp], rax
  00315	eb 0d		 jmp	 SHORT $LN37@PySlice_Ge@2
$LN36@PySlice_Ge@2:
  00317	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR length$[rsp]
  0031f	48 89 44 24 60	 mov	 QWORD PTR tv145[rsp], rax
$LN37@PySlice_Ge@2:
  00324	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR stop$[rsp]
  0032c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv145[rsp]
  00331	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN7@PySlice_Ge@2:
$LN11@PySlice_Ge@2:

; 236  :     }
; 237  : 
; 238  :     if ((*step < 0 && *stop >= *start)
; 239  :         || (*step > 0 && *start >= *stop)) {

  00334	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR step$[rsp]
  0033c	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00340	7d 18		 jge	 SHORT $LN4@PySlice_Ge@2
  00342	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR stop$[rsp]
  0034a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR start$[rsp]
  00352	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00355	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00358	7d 26		 jge	 SHORT $LN5@PySlice_Ge@2
$LN4@PySlice_Ge@2:
  0035a	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR step$[rsp]
  00362	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00366	7e 29		 jle	 SHORT $LN6@PySlice_Ge@2
  00368	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR start$[rsp]
  00370	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR stop$[rsp]
  00378	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0037b	48 39 08	 cmp	 QWORD PTR [rax], rcx
  0037e	7c 11		 jl	 SHORT $LN6@PySlice_Ge@2
$LN5@PySlice_Ge@2:

; 240  :         *slicelength = 0;

  00380	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR slicelength$[rsp]
  00388	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  0038f	eb 7e		 jmp	 SHORT $LN3@PySlice_Ge@2
$LN6@PySlice_Ge@2:

; 241  :     }
; 242  :     else if (*step < 0) {

  00391	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR step$[rsp]
  00399	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0039d	7d 39		 jge	 SHORT $LN2@PySlice_Ge@2

; 243  :         *slicelength = (*stop-*start+1)/(*step)+1;

  0039f	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR stop$[rsp]
  003a7	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR start$[rsp]
  003af	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  003b2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003b5	48 2b c1	 sub	 rax, rcx
  003b8	48 ff c0	 inc	 rax
  003bb	48 99		 cdq
  003bd	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR step$[rsp]
  003c5	48 f7 39	 idiv	 QWORD PTR [rcx]
  003c8	48 ff c0	 inc	 rax
  003cb	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR slicelength$[rsp]
  003d3	48 89 01	 mov	 QWORD PTR [rcx], rax

; 244  :     }
; 245  :     else {

  003d6	eb 37		 jmp	 SHORT $LN1@PySlice_Ge@2
$LN2@PySlice_Ge@2:

; 246  :         *slicelength = (*stop-*start-1)/(*step)+1;

  003d8	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR stop$[rsp]
  003e0	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR start$[rsp]
  003e8	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  003eb	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003ee	48 2b c1	 sub	 rax, rcx
  003f1	48 ff c8	 dec	 rax
  003f4	48 99		 cdq
  003f6	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR step$[rsp]
  003fe	48 f7 39	 idiv	 QWORD PTR [rcx]
  00401	48 ff c0	 inc	 rax
  00404	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR slicelength$[rsp]
  0040c	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN1@PySlice_Ge@2:
$LN3@PySlice_Ge@2:

; 247  :     }
; 248  : 
; 249  :     return 0;

  0040f	33 c0		 xor	 eax, eax
$LN24@PySlice_Ge@2:

; 250  : }

  00411	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00415	c3		 ret	 0
PySlice_GetIndicesEx ENDP
_TEXT	ENDS
PUBLIC	??_C@_07HLJNEMPJ@slice?$CI?$CJ?$AA@		; `string'
EXTRN	PyArg_UnpackTuple:PROC
EXTRN	_PyArg_NoKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$slice_new DD imagerel slice_new
	DD	imagerel slice_new+195
	DD	imagerel $unwind$slice_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slice_new DD 011301H
	DD	0c213H
xdata	ENDS
;	COMDAT ??_C@_07HLJNEMPJ@slice?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_07HLJNEMPJ@slice?$CI?$CJ?$AA@ DB 'slice()', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT slice_new
_TEXT	SEGMENT
step$ = 64
stop$ = 72
start$ = 80
type$ = 112
args$ = 120
kw$ = 128
slice_new PROC						; COMDAT

; 254  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 255  :     PyObject *start, *stop, *step;
; 256  : 
; 257  :     start = stop = step = NULL;

  00013	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR step$[rsp], 0
  0001c	48 8b 44 24 40	 mov	 rax, QWORD PTR step$[rsp]
  00021	48 89 44 24 48	 mov	 QWORD PTR stop$[rsp], rax
  00026	48 8b 44 24 48	 mov	 rax, QWORD PTR stop$[rsp]
  0002b	48 89 44 24 50	 mov	 QWORD PTR start$[rsp], rax

; 258  : 
; 259  :     if (!_PyArg_NoKeywords("slice()", kw))

  00030	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR kw$[rsp]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07HLJNEMPJ@slice?$CI?$CJ?$AA@
  0003f	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  00044	85 c0		 test	 eax, eax
  00046	75 04		 jne	 SHORT $LN3@slice_new

; 260  :         return NULL;

  00048	33 c0		 xor	 eax, eax
  0004a	eb 72		 jmp	 SHORT $LN4@slice_new
$LN3@slice_new:

; 261  : 
; 262  :     if (!PyArg_UnpackTuple(args, "slice", 1, 3, &start, &stop, &step))

  0004c	48 8d 44 24 40	 lea	 rax, QWORD PTR step$[rsp]
  00051	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00056	48 8d 44 24 48	 lea	 rax, QWORD PTR stop$[rsp]
  0005b	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00060	48 8d 44 24 50	 lea	 rax, QWORD PTR start$[rsp]
  00065	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0006a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00070	41 b8 01 00 00
	00		 mov	 r8d, 1
  00076	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05ILHMOJGN@slice?$AA@
  0007d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  00082	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00087	85 c0		 test	 eax, eax
  00089	75 04		 jne	 SHORT $LN2@slice_new

; 263  :         return NULL;

  0008b	33 c0		 xor	 eax, eax
  0008d	eb 2f		 jmp	 SHORT $LN4@slice_new
$LN2@slice_new:

; 264  : 
; 265  :     /* This swapping of stop and start is to maintain similarity with
; 266  :        range(). */
; 267  :     if (stop == NULL) {

  0008f	48 83 7c 24 48
	00		 cmp	 QWORD PTR stop$[rsp], 0
  00095	75 13		 jne	 SHORT $LN1@slice_new

; 268  :         stop = start;

  00097	48 8b 44 24 50	 mov	 rax, QWORD PTR start$[rsp]
  0009c	48 89 44 24 48	 mov	 QWORD PTR stop$[rsp], rax

; 269  :         start = NULL;

  000a1	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR start$[rsp], 0
$LN1@slice_new:

; 270  :     }
; 271  :     return PySlice_New(start, stop, step);

  000aa	4c 8b 44 24 40	 mov	 r8, QWORD PTR step$[rsp]
  000af	48 8b 54 24 48	 mov	 rdx, QWORD PTR stop$[rsp]
  000b4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR start$[rsp]
  000b9	e8 00 00 00 00	 call	 PySlice_New
$LN4@slice_new:

; 272  : }

  000be	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000c2	c3		 ret	 0
slice_new ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slice_dealloc DD imagerel slice_dealloc
	DD	imagerel slice_dealloc+101
	DD	imagerel $unwind$slice_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slice_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slice_dealloc
_TEXT	SEGMENT
r$ = 48
slice_dealloc PROC					; COMDAT

; 282  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 283  :     if (Py_PXCTX)

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 02		 je	 SHORT $LN3@slice_deal

; 284  :         return;

  00012	eb 4c		 jmp	 SHORT $LN4@slice_deal
$LN3@slice_deal:

; 285  : 
; 286  :     Py_DECREF(r->step);

  00014	48 8b 44 24 30	 mov	 rax, QWORD PTR r$[rsp]
  00019	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0001d	e8 00 00 00 00	 call	 _Py_DecRef

; 287  :     Py_DECREF(r->start);

  00022	48 8b 44 24 30	 mov	 rax, QWORD PTR r$[rsp]
  00027	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0002b	e8 00 00 00 00	 call	 _Py_DecRef

; 288  :     Py_DECREF(r->stop);

  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR r$[rsp]
  00035	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00039	e8 00 00 00 00	 call	 _Py_DecRef

; 289  :     if (slice_cache == NULL)

  0003e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR slice_cache, 0
  00046	75 0e		 jne	 SHORT $LN2@slice_deal

; 290  :         slice_cache = r;

  00048	48 8b 44 24 30	 mov	 rax, QWORD PTR r$[rsp]
  0004d	48 89 05 00 00
	00 00		 mov	 QWORD PTR slice_cache, rax

; 291  :     else

  00054	eb 0a		 jmp	 SHORT $LN1@slice_deal
$LN2@slice_deal:

; 292  :         PyObject_Del(r);

  00056	48 8b 4c 24 30	 mov	 rcx, QWORD PTR r$[rsp]
  0005b	e8 00 00 00 00	 call	 _PyObject_DebugFree
$LN1@slice_deal:
$LN4@slice_deal:

; 293  : }

  00060	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00064	c3		 ret	 0
slice_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@HELMHOPE@slice?$CI?$CFR?0?5?$CFR?0?5?$CFR?$CJ?$AA@ ; `string'
EXTRN	PyUnicode_FromFormat:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$slice_repr DD imagerel slice_repr
	DD	imagerel slice_repr+53
	DD	imagerel $unwind$slice_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slice_repr DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0BC@HELMHOPE@slice?$CI?$CFR?0?5?$CFR?0?5?$CFR?$CJ?$AA@
CONST	SEGMENT
??_C@_0BC@HELMHOPE@slice?$CI?$CFR?0?5?$CFR?0?5?$CFR?$CJ?$AA@ DB 'slice(%R'
	DB	', %R, %R)', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT slice_repr
_TEXT	SEGMENT
r$ = 48
slice_repr PROC						; COMDAT

; 297  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 298  :     return PyUnicode_FromFormat("slice(%R, %R, %R)", r->start, r->stop, r->step);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR r$[rsp]
  0000e	4c 8b 48 70	 mov	 r9, QWORD PTR [rax+112]
  00012	48 8b 44 24 30	 mov	 rax, QWORD PTR r$[rsp]
  00017	4c 8b 40 68	 mov	 r8, QWORD PTR [rax+104]
  0001b	48 8b 44 24 30	 mov	 rax, QWORD PTR r$[rsp]
  00020	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  00024	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@HELMHOPE@slice?$CI?$CFR?0?5?$CFR?0?5?$CFR?$CJ?$AA@
  0002b	e8 00 00 00 00	 call	 PyUnicode_FromFormat

; 299  : }

  00030	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00034	c3		 ret	 0
slice_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_05FODGOJNK@?$CInnn?$CJ?$AA@		; `string'
EXTRN	Py_BuildValue:PROC
EXTRN	PyErr_Occurred:PROC
EXTRN	PyNumber_AsSsize_t:PROC
EXTRN	PyExc_OverflowError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$slice_indices DD imagerel slice_indices
	DD	imagerel slice_indices+143
	DD	imagerel $unwind$slice_indices
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slice_indices DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_05FODGOJNK@?$CInnn?$CJ?$AA@
CONST	SEGMENT
??_C@_05FODGOJNK@?$CInnn?$CJ?$AA@ DB '(nnn)', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT slice_indices
_TEXT	SEGMENT
ilen$ = 48
slicelength$ = 56
step$ = 64
stop$ = 72
start$ = 80
self$ = 112
len$ = 120
slice_indices PROC					; COMDAT

; 310  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 311  :     Py_ssize_t ilen, start, stop, step, slicelength;
; 312  : 
; 313  :     ilen = PyNumber_AsSsize_t(len, PyExc_OverflowError);

  0000e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_OverflowError
  00015	48 8b 4c 24 78	 mov	 rcx, QWORD PTR len$[rsp]
  0001a	e8 00 00 00 00	 call	 PyNumber_AsSsize_t
  0001f	48 89 44 24 30	 mov	 QWORD PTR ilen$[rsp], rax

; 314  : 
; 315  :     if (ilen == -1 && PyErr_Occurred()) {

  00024	48 83 7c 24 30
	ff		 cmp	 QWORD PTR ilen$[rsp], -1
  0002a	75 0e		 jne	 SHORT $LN2@slice_indi
  0002c	e8 00 00 00 00	 call	 PyErr_Occurred
  00031	48 85 c0	 test	 rax, rax
  00034	74 04		 je	 SHORT $LN2@slice_indi

; 316  :         return NULL;

  00036	33 c0		 xor	 eax, eax
  00038	eb 50		 jmp	 SHORT $LN3@slice_indi
$LN2@slice_indi:

; 317  :     }
; 318  : 
; 319  :     if (PySlice_GetIndicesEx((PyObject*)self, ilen, &start, &stop,
; 320  :                              &step, &slicelength) < 0) {

  0003a	48 8d 44 24 38	 lea	 rax, QWORD PTR slicelength$[rsp]
  0003f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00044	48 8d 44 24 40	 lea	 rax, QWORD PTR step$[rsp]
  00049	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0004e	4c 8d 4c 24 48	 lea	 r9, QWORD PTR stop$[rsp]
  00053	4c 8d 44 24 50	 lea	 r8, QWORD PTR start$[rsp]
  00058	48 8b 54 24 30	 mov	 rdx, QWORD PTR ilen$[rsp]
  0005d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR self$[rsp]
  00062	e8 00 00 00 00	 call	 PySlice_GetIndicesEx
  00067	85 c0		 test	 eax, eax
  00069	7d 04		 jge	 SHORT $LN1@slice_indi

; 321  :         return NULL;

  0006b	33 c0		 xor	 eax, eax
  0006d	eb 1b		 jmp	 SHORT $LN3@slice_indi
$LN1@slice_indi:

; 322  :     }
; 323  : 
; 324  :     return Py_BuildValue("(nnn)", start, stop, step);

  0006f	4c 8b 4c 24 40	 mov	 r9, QWORD PTR step$[rsp]
  00074	4c 8b 44 24 48	 mov	 r8, QWORD PTR stop$[rsp]
  00079	48 8b 54 24 50	 mov	 rdx, QWORD PTR start$[rsp]
  0007e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05FODGOJNK@?$CInnn?$CJ?$AA@
  00085	e8 00 00 00 00	 call	 Py_BuildValue
$LN3@slice_indi:

; 325  : }

  0008a	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0008e	c3		 ret	 0
slice_indices ENDP
_TEXT	ENDS
PUBLIC	??_C@_06BNHLHAKP@O?$CIOOO?$CJ?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$slice_reduce DD imagerel slice_reduce
	DD	imagerel slice_reduce+67
	DD	imagerel $unwind$slice_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slice_reduce DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_06BNHLHAKP@O?$CIOOO?$CJ?$AA@
CONST	SEGMENT
??_C@_06BNHLHAKP@O?$CIOOO?$CJ?$AA@ DB 'O(OOO)', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT slice_reduce
_TEXT	SEGMENT
self$ = 64
slice_reduce PROC					; COMDAT

; 337  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 338  :     return Py_BuildValue("O(OOO)", Py_TYPE(self), self->start, self->stop, self->step);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00012	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00017	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0001c	4c 8b 48 68	 mov	 r9, QWORD PTR [rax+104]
  00020	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00025	4c 8b 40 60	 mov	 r8, QWORD PTR [rax+96]
  00029	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0002e	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06BNHLHAKP@O?$CIOOO?$CJ?$AA@
  00039	e8 00 00 00 00	 call	 Py_BuildValue

; 339  : }

  0003e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00042	c3		 ret	 0
slice_reduce ENDP
_TEXT	ENDS
EXTRN	PyObject_RichCompare:PROC
EXTRN	PyTuple_New:PROC
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
EXTRN	_Py_NotImplementedStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$slice_richcompare DD imagerel slice_richcompare
	DD	imagerel slice_richcompare+491
	DD	imagerel $unwind$slice_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slice_richcompare DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slice_richcompare
_TEXT	SEGMENT
res$ = 32
t2$ = 40
t1$ = 48
tv70 = 56
v$ = 80
w$ = 88
op$ = 96
slice_richcompare PROC					; COMDAT

; 353  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 354  :     PyObject *t1;
; 355  :     PyObject *t2;
; 356  :     PyObject *res;
; 357  : 
; 358  :     if (!PySlice_Check(v) || !PySlice_Check(w))

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PySlice_Type
  0001a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR v$[rsp]
  0001f	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00023	75 12		 jne	 SHORT $LN8@slice_rich
  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PySlice_Type
  0002c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR w$[rsp]
  00031	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00035	74 18		 je	 SHORT $LN9@slice_rich
$LN8@slice_rich:

; 359  :         Py_RETURN_NOTIMPLEMENTED;

  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NotImplementedStruct
  0003e	e8 00 00 00 00	 call	 _Py_IncRef
  00043	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  0004a	e9 97 01 00 00	 jmp	 $LN10@slice_rich
$LN9@slice_rich:

; 360  : 
; 361  :     if (v == w) {

  0004f	48 8b 44 24 58	 mov	 rax, QWORD PTR w$[rsp]
  00054	48 39 44 24 50	 cmp	 QWORD PTR v$[rsp], rax
  00059	75 4d		 jne	 SHORT $LN7@slice_rich

; 362  :         /* XXX Do we really need this shortcut?
; 363  :            There's a unit test for it, but is that fair? */
; 364  :         switch (op) {

  0005b	8b 44 24 60	 mov	 eax, DWORD PTR op$[rsp]
  0005f	89 44 24 38	 mov	 DWORD PTR tv70[rsp], eax
  00063	83 7c 24 38 00	 cmp	 DWORD PTR tv70[rsp], 0
  00068	7e 1e		 jle	 SHORT $LN3@slice_rich
  0006a	83 7c 24 38 02	 cmp	 DWORD PTR tv70[rsp], 2
  0006f	7e 09		 jle	 SHORT $LN4@slice_rich
  00071	83 7c 24 38 05	 cmp	 DWORD PTR tv70[rsp], 5
  00076	74 02		 je	 SHORT $LN4@slice_rich
  00078	eb 0e		 jmp	 SHORT $LN3@slice_rich
$LN4@slice_rich:

; 365  :         case Py_EQ:
; 366  :         case Py_LE:
; 367  :         case Py_GE:
; 368  :             res = Py_True;

  0007a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00081	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 369  :             break;

  00086	eb 0c		 jmp	 SHORT $LN5@slice_rich
$LN3@slice_rich:

; 370  :         default:
; 371  :             res = Py_False;

  00088	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  0008f	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax
$LN5@slice_rich:

; 372  :             break;
; 373  :         }
; 374  :         Py_INCREF(res);

  00094	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  00099	e8 00 00 00 00	 call	 _Py_IncRef

; 375  :         return res;

  0009e	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  000a3	e9 3e 01 00 00	 jmp	 $LN10@slice_rich
$LN7@slice_rich:

; 376  :     }
; 377  : 
; 378  :     t1 = PyTuple_New(3);

  000a8	b9 03 00 00 00	 mov	 ecx, 3
  000ad	e8 00 00 00 00	 call	 PyTuple_New
  000b2	48 89 44 24 30	 mov	 QWORD PTR t1$[rsp], rax

; 379  :     if (t1 == NULL)

  000b7	48 83 7c 24 30
	00		 cmp	 QWORD PTR t1$[rsp], 0
  000bd	75 07		 jne	 SHORT $LN2@slice_rich

; 380  :         return NULL;

  000bf	33 c0		 xor	 eax, eax
  000c1	e9 20 01 00 00	 jmp	 $LN10@slice_rich
$LN2@slice_rich:

; 381  :     t2 = PyTuple_New(3);

  000c6	b9 03 00 00 00	 mov	 ecx, 3
  000cb	e8 00 00 00 00	 call	 PyTuple_New
  000d0	48 89 44 24 28	 mov	 QWORD PTR t2$[rsp], rax

; 382  :     if (t2 == NULL) {

  000d5	48 83 7c 24 28
	00		 cmp	 QWORD PTR t2$[rsp], 0
  000db	75 11		 jne	 SHORT $LN1@slice_rich

; 383  :         Py_DECREF(t1);

  000dd	48 8b 4c 24 30	 mov	 rcx, QWORD PTR t1$[rsp]
  000e2	e8 00 00 00 00	 call	 _Py_DecRef

; 384  :         return NULL;

  000e7	33 c0		 xor	 eax, eax
  000e9	e9 f8 00 00 00	 jmp	 $LN10@slice_rich
$LN1@slice_rich:

; 385  :     }
; 386  : 
; 387  :     PyTuple_SET_ITEM(t1, 0, ((PySliceObject *)v)->start);

  000ee	48 8b 44 24 30	 mov	 rax, QWORD PTR t1$[rsp]
  000f3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR v$[rsp]
  000f8	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  000fc	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 388  :     PyTuple_SET_ITEM(t1, 1, ((PySliceObject *)v)->stop);

  00100	48 8b 44 24 30	 mov	 rax, QWORD PTR t1$[rsp]
  00105	48 8b 4c 24 50	 mov	 rcx, QWORD PTR v$[rsp]
  0010a	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  0010e	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 389  :     PyTuple_SET_ITEM(t1, 2, ((PySliceObject *)v)->step);

  00112	48 8b 44 24 30	 mov	 rax, QWORD PTR t1$[rsp]
  00117	48 8b 4c 24 50	 mov	 rcx, QWORD PTR v$[rsp]
  0011c	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00120	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx

; 390  :     PyTuple_SET_ITEM(t2, 0, ((PySliceObject *)w)->start);

  00127	48 8b 44 24 28	 mov	 rax, QWORD PTR t2$[rsp]
  0012c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR w$[rsp]
  00131	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00135	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 391  :     PyTuple_SET_ITEM(t2, 1, ((PySliceObject *)w)->stop);

  00139	48 8b 44 24 28	 mov	 rax, QWORD PTR t2$[rsp]
  0013e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR w$[rsp]
  00143	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00147	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 392  :     PyTuple_SET_ITEM(t2, 2, ((PySliceObject *)w)->step);

  0014b	48 8b 44 24 28	 mov	 rax, QWORD PTR t2$[rsp]
  00150	48 8b 4c 24 58	 mov	 rcx, QWORD PTR w$[rsp]
  00155	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00159	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx

; 393  : 
; 394  :     res = PyObject_RichCompare(t1, t2, op);

  00160	44 8b 44 24 60	 mov	 r8d, DWORD PTR op$[rsp]
  00165	48 8b 54 24 28	 mov	 rdx, QWORD PTR t2$[rsp]
  0016a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR t1$[rsp]
  0016f	e8 00 00 00 00	 call	 PyObject_RichCompare
  00174	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 395  : 
; 396  :     PyTuple_SET_ITEM(t1, 0, NULL);

  00179	48 8b 44 24 30	 mov	 rax, QWORD PTR t1$[rsp]
  0017e	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0

; 397  :     PyTuple_SET_ITEM(t1, 1, NULL);

  00186	48 8b 44 24 30	 mov	 rax, QWORD PTR t1$[rsp]
  0018b	48 c7 40 78 00
	00 00 00	 mov	 QWORD PTR [rax+120], 0

; 398  :     PyTuple_SET_ITEM(t1, 2, NULL);

  00193	48 8b 44 24 30	 mov	 rax, QWORD PTR t1$[rsp]
  00198	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0

; 399  :     PyTuple_SET_ITEM(t2, 0, NULL);

  001a3	48 8b 44 24 28	 mov	 rax, QWORD PTR t2$[rsp]
  001a8	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0

; 400  :     PyTuple_SET_ITEM(t2, 1, NULL);

  001b0	48 8b 44 24 28	 mov	 rax, QWORD PTR t2$[rsp]
  001b5	48 c7 40 78 00
	00 00 00	 mov	 QWORD PTR [rax+120], 0

; 401  :     PyTuple_SET_ITEM(t2, 2, NULL);

  001bd	48 8b 44 24 28	 mov	 rax, QWORD PTR t2$[rsp]
  001c2	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0

; 402  : 
; 403  :     Py_DECREF(t1);

  001cd	48 8b 4c 24 30	 mov	 rcx, QWORD PTR t1$[rsp]
  001d2	e8 00 00 00 00	 call	 _Py_DecRef

; 404  :     Py_DECREF(t2);

  001d7	48 8b 4c 24 28	 mov	 rcx, QWORD PTR t2$[rsp]
  001dc	e8 00 00 00 00	 call	 _Py_DecRef

; 405  : 
; 406  :     return res;

  001e1	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
$LN10@slice_rich:

; 407  : }

  001e6	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001ea	c3		 ret	 0
slice_richcompare ENDP
_TEXT	ENDS
END
