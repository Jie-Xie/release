; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_09JDLBIJMB@_warnings?$AA@			; `string'
PUBLIC	??_C@_0O@LLLELDLO@warn_explicit?$AA@		; `string'
PUBLIC	??_C@_04FNLOFOEM@warn?$AA@			; `string'
PUBLIC	??_C@_0L@BCMGLLLC@splitlines?$AA@		; `string'
PUBLIC	??_C@_0L@HNCNOLCF@get_source?$AA@		; `string'
PUBLIC	??_C@_0P@LEDAGNOO@module_globals?$AA@		; `string'
PUBLIC	??_C@_08MNOFFBHB@registry?$AA@			; `string'
PUBLIC	??_C@_06BIEEJMKO@module?$AA@			; `string'
PUBLIC	??_C@_06ILKIAHNN@lineno?$AA@			; `string'
PUBLIC	??_C@_08BABJIOEM@filename?$AA@			; `string'
PUBLIC	??_C@_0L@HHDDJAJP@stacklevel?$AA@		; `string'
PUBLIC	??_C@_08MBJIKOEN@category?$AA@			; `string'
PUBLIC	??_C@_07ONPBMBOP@message?$AA@			; `string'
PUBLIC	??_C@_08BHKDPDAA@__name__?$AA@			; `string'
PUBLIC	??_C@_05FNONLPDI@match?$AA@			; `string'
_BSS	SEGMENT
?warnings_str@?1??get_warnings_attr@@9@9 DQ 01H DUP (?)	; `get_warnings_attr'::`2'::warnings_str
?ignore_str@?1??create_filter@@9@9 DQ 01H DUP (?)	; `create_filter'::`2'::ignore_str
?error_str@?1??create_filter@@9@9 DQ 01H DUP (?)	; `create_filter'::`2'::error_str
?default_str@?1??create_filter@@9@9 DQ 01H DUP (?)	; `create_filter'::`2'::default_str
?always_str@?1??create_filter@@9@9 DQ 01H DUP (?)	; `create_filter'::`2'::always_str
_BSS	ENDS
;	COMDAT ??_C@_09JDLBIJMB@_warnings?$AA@
CONST	SEGMENT
??_C@_09JDLBIJMB@_warnings?$AA@ DB '_warnings', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LLLELDLO@warn_explicit?$AA@
CONST	SEGMENT
??_C@_0O@LLLELDLO@warn_explicit?$AA@ DB 'warn_explicit', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04FNLOFOEM@warn?$AA@
CONST	SEGMENT
??_C@_04FNLOFOEM@warn?$AA@ DB 'warn', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BCMGLLLC@splitlines?$AA@
CONST	SEGMENT
??_C@_0L@BCMGLLLC@splitlines?$AA@ DB 'splitlines', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HNCNOLCF@get_source?$AA@
CONST	SEGMENT
??_C@_0L@HNCNOLCF@get_source?$AA@ DB 'get_source', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LEDAGNOO@module_globals?$AA@
CONST	SEGMENT
??_C@_0P@LEDAGNOO@module_globals?$AA@ DB 'module_globals', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08MNOFFBHB@registry?$AA@
CONST	SEGMENT
??_C@_08MNOFFBHB@registry?$AA@ DB 'registry', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06BIEEJMKO@module?$AA@
CONST	SEGMENT
??_C@_06BIEEJMKO@module?$AA@ DB 'module', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ILKIAHNN@lineno?$AA@
CONST	SEGMENT
??_C@_06ILKIAHNN@lineno?$AA@ DB 'lineno', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BABJIOEM@filename?$AA@
CONST	SEGMENT
??_C@_08BABJIOEM@filename?$AA@ DB 'filename', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HHDDJAJP@stacklevel?$AA@
CONST	SEGMENT
??_C@_0L@HHDDJAJP@stacklevel?$AA@ DB 'stacklevel', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08MBJIKOEN@category?$AA@
CONST	SEGMENT
??_C@_08MBJIKOEN@category?$AA@ DB 'category', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07ONPBMBOP@message?$AA@
CONST	SEGMENT
??_C@_07ONPBMBOP@message?$AA@ DB 'message', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BHKDPDAA@__name__?$AA@
CONST	SEGMENT
??_C@_08BHKDPDAA@__name__?$AA@ DB '__name__', 00H	; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId_get_source@?2??warnings_warn_explicit@@9@9 DQ 0000000000000000H ; `warnings_warn_explicit'::`3'::PyId_get_source
	DQ	FLAT:??_C@_0L@HNCNOLCF@get_source?$AA@
	DQ	0000000000000000H
?PyId_splitlines@?2??warnings_warn_explicit@@9@9 DQ 0000000000000000H ; `warnings_warn_explicit'::`3'::PyId_splitlines
	DQ	FLAT:??_C@_0L@BCMGLLLC@splitlines?$AA@
	DQ	0000000000000000H
?PyId___name__@?1??show_warning@@9@9 DQ 0000000000000000H ; `show_warning'::`2'::PyId___name__
	DQ	FLAT:??_C@_08BHKDPDAA@__name__?$AA@
	DQ	0000000000000000H
?PyId_match@?1??check_matched@@9@9 DQ 0000000000000000H	; `check_matched'::`2'::PyId_match
	DQ	FLAT:??_C@_05FNONLPDI@match?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_05FNONLPDI@match?$AA@
CONST	SEGMENT
??_C@_05FNONLPDI@match?$AA@ DB 'match', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
warnings__doc__ DB '_warnings provides basic warning filtering support.', 0aH
	DB	'It is a helper module to speed up interpreter start-up.', 00H
	ORG $+4
?kw_list@?1??warnings_warn@@9@9 DQ FLAT:??_C@_07ONPBMBOP@message?$AA@ ; `warnings_warn'::`2'::kw_list
	DQ	FLAT:??_C@_08MBJIKOEN@category?$AA@
	DQ	FLAT:??_C@_0L@HHDDJAJP@stacklevel?$AA@
	DQ	0000000000000000H
?kwd_list@?1??warnings_warn_explicit@@9@9 DQ FLAT:??_C@_07ONPBMBOP@message?$AA@ ; `warnings_warn_explicit'::`2'::kwd_list
	DQ	FLAT:??_C@_08MBJIKOEN@category?$AA@
	DQ	FLAT:??_C@_08BABJIOEM@filename?$AA@
	DQ	FLAT:??_C@_06ILKIAHNN@lineno?$AA@
	DQ	FLAT:??_C@_06BIEEJMKO@module?$AA@
	DQ	FLAT:??_C@_08MNOFFBHB@registry?$AA@
	DQ	FLAT:??_C@_0P@LEDAGNOO@module_globals?$AA@
	DQ	0000000000000000H
warn_doc DB	'Issue a warning, or maybe ignore it or raise an exceptio'
	DB	'n.', 00H
	ORG $+5
warn_explicit_doc DB 'Low-level inferface to warnings functionality.', 00H
	ORG $+1
warnings_functions DQ FLAT:??_C@_04FNLOFOEM@warn?$AA@
	DQ	FLAT:warnings_warn
	DD	03H
	ORG $+4
	DQ	FLAT:warn_doc
	DQ	FLAT:??_C@_0O@LLLELDLO@warn_explicit?$AA@
	DQ	FLAT:warnings_warn_explicit
	DD	03H
	ORG $+4
	DQ	FLAT:warn_explicit_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
warningsmodule DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_09JDLBIJMB@_warnings?$AA@
	DQ	FLAT:warnings__doc__
	DQ	0000000000000000H
	DQ	FLAT:warnings_functions
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_01MJMHLOMK@O?$AA@				; `string'
EXTRN	PyObject_IsTrue:PROC
EXTRN	_PyObject_CallMethodId:PROC
EXTRN	_Py_NoneStruct:BYTE
EXTRN	_tls_index:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\python\_warnings.c
pdata	SEGMENT
$pdata$check_matched DD imagerel check_matched
	DD	imagerel check_matched+66
	DD	imagerel $unwind$check_matched
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$check_matched DD imagerel check_matched+66
	DD	imagerel check_matched+97
	DD	imagerel $chain$0$check_matched
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$check_matched DD imagerel check_matched+97
	DD	imagerel check_matched+137
	DD	imagerel $chain$3$check_matched
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$check_matched DD 040821H
	DD	063408H
	DD	047400H
	DD	imagerel check_matched
	DD	imagerel check_matched+66
	DD	imagerel $unwind$check_matched
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$check_matched DD 020521H
	DD	047405H
	DD	imagerel check_matched
	DD	imagerel check_matched+66
	DD	imagerel $unwind$check_matched
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$check_matched DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_01MJMHLOMK@O?$AA@
CONST	SEGMENT
??_C@_01MJMHLOMK@O?$AA@ DB 'O', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT check_matched
_TEXT	SEGMENT
obj$ = 48
arg$ = 56
check_matched PROC					; COMDAT

; 19   : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 20   :     PyObject *result;
; 21   :     _Py_IDENTIFIER(match);
; 22   :     int rc;
; 23   : 
; 24   :     if (obj == Py_None)

  00004	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0000b	4c 8b ca	 mov	 r9, rdx
  0000e	4c 8b d1	 mov	 r10, rcx
  00011	48 3b c8	 cmp	 rcx, rax
  00014	75 0a		 jne	 SHORT $LN2@check_matc

; 25   :         return 1;

  00016	b8 01 00 00 00	 mov	 eax, 1

; 33   : }

  0001b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001f	c3		 ret	 0
$LN2@check_matc:

; 26   :     result = _PyObject_CallMethodId(obj, &PyId_match, "O", arg);

  00020	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00026	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0002f	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_match@?1??check_matched@@9@9
  00034	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  00038	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01MJMHLOMK@O?$AA@
  0003f	49 8b ca	 mov	 rcx, r10
  00042	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00047	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  0004c	48 8b f8	 mov	 rdi, rax

; 27   :     if (result == NULL)

  0004f	48 85 c0	 test	 rax, rax
  00052	75 0d		 jne	 SHORT $LN1@check_matc

; 28   :         return -1;

  00054	83 c8 ff	 or	 eax, -1
  00057	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]

; 33   : }

  0005c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00060	c3		 ret	 0
$LN1@check_matc:

; 29   : 
; 30   :     rc = PyObject_IsTrue(result);

  00061	48 8b c8	 mov	 rcx, rax
  00064	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00069	e8 00 00 00 00	 call	 PyObject_IsTrue

; 31   :     Py_DECREF(result);

  0006e	48 8b cf	 mov	 rcx, rdi
  00071	8b d8		 mov	 ebx, eax
  00073	e8 00 00 00 00	 call	 _Py_DecRef
  00078	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]

; 32   :     return rc;

  0007d	8b c3		 mov	 eax, ebx
  0007f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 33   : }

  00084	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00088	c3		 ret	 0
check_matched ENDP
_TEXT	ENDS
PUBLIC	??_C@_08NOCNCINM@warnings?$AA@			; `string'
EXTRN	PyObject_GetAttrString:PROC
EXTRN	PyObject_HasAttrString:PROC
EXTRN	PyDict_GetItem:PROC
EXTRN	PyDict_Contains:PROC
EXTRN	PyImport_GetModuleDict:PROC
EXTRN	PyUnicode_InternFromString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_warnings_attr DD imagerel get_warnings_attr
	DD	imagerel get_warnings_attr+49
	DD	imagerel $unwind$get_warnings_attr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$get_warnings_attr DD imagerel get_warnings_attr+49
	DD	imagerel get_warnings_attr+140
	DD	imagerel $chain$0$get_warnings_attr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$get_warnings_attr DD imagerel get_warnings_attr+140
	DD	imagerel get_warnings_attr+153
	DD	imagerel $chain$2$get_warnings_attr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$get_warnings_attr DD 020021H
	DD	067400H
	DD	imagerel get_warnings_attr
	DD	imagerel get_warnings_attr+49
	DD	imagerel $unwind$get_warnings_attr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$get_warnings_attr DD 020521H
	DD	067405H
	DD	imagerel get_warnings_attr
	DD	imagerel get_warnings_attr+49
	DD	imagerel $unwind$get_warnings_attr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_warnings_attr DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_08NOCNCINM@warnings?$AA@
CONST	SEGMENT
??_C@_08NOCNCINM@warnings?$AA@ DB 'warnings', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT get_warnings_attr
_TEXT	SEGMENT
attr$ = 48
get_warnings_attr PROC					; COMDAT

; 41   : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 42   :     static PyObject *warnings_str = NULL;
; 43   :     PyObject *all_modules;
; 44   :     PyObject *warnings_module;
; 45   :     int result;
; 46   : 
; 47   :     if (warnings_str == NULL) {

  00006	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?warnings_str@?1??get_warnings_attr@@9@9, 0
  0000e	48 8b d9	 mov	 rbx, rcx
  00011	75 1e		 jne	 SHORT $LN4@get_warnin

; 48   :         warnings_str = PyUnicode_InternFromString("warnings");

  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08NOCNCINM@warnings?$AA@
  0001a	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  0001f	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?warnings_str@?1??get_warnings_attr@@9@9, rax

; 49   :         if (warnings_str == NULL)

  00026	48 85 c0	 test	 rax, rax
  00029	75 06		 jne	 SHORT $LN4@get_warnin

; 62   : }

  0002b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002f	5b		 pop	 rbx
  00030	c3		 ret	 0
$LN4@get_warnin:
  00031	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi

; 50   :             return NULL;
; 51   :     }
; 52   : 
; 53   :     all_modules = PyImport_GetModuleDict();

  00036	e8 00 00 00 00	 call	 PyImport_GetModuleDict

; 54   :     result = PyDict_Contains(all_modules, warnings_str);

  0003b	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?warnings_str@?1??get_warnings_attr@@9@9
  00042	48 8b c8	 mov	 rcx, rax
  00045	48 8b f8	 mov	 rdi, rax
  00048	e8 00 00 00 00	 call	 PyDict_Contains

; 55   :     if (result == -1 || result == 0)

  0004d	83 f8 ff	 cmp	 eax, -1
  00050	74 3a		 je	 SHORT $LN2@get_warnin
  00052	85 c0		 test	 eax, eax
  00054	74 36		 je	 SHORT $LN2@get_warnin

; 57   : 
; 58   :     warnings_module = PyDict_GetItem(all_modules, warnings_str);

  00056	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?warnings_str@?1??get_warnings_attr@@9@9
  0005d	48 8b cf	 mov	 rcx, rdi
  00060	e8 00 00 00 00	 call	 PyDict_GetItem

; 59   :     if (!PyObject_HasAttrString(warnings_module, attr))

  00065	48 8b d3	 mov	 rdx, rbx
  00068	48 8b c8	 mov	 rcx, rax
  0006b	48 8b f8	 mov	 rdi, rax
  0006e	e8 00 00 00 00	 call	 PyObject_HasAttrString
  00073	85 c0		 test	 eax, eax

; 60   :             return NULL;

  00075	74 15		 je	 SHORT $LN2@get_warnin

; 61   :     return PyObject_GetAttrString(warnings_module, attr);

  00077	48 8b d3	 mov	 rdx, rbx
  0007a	48 8b cf	 mov	 rcx, rdi
  0007d	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 62   : }

  00082	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00086	5b		 pop	 rbx
  00087	e9 00 00 00 00	 jmp	 PyObject_GetAttrString
$LN2@get_warnin:

; 56   :         return NULL;

  0008c	33 c0		 xor	 eax, eax
  0008e	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 62   : }

  00093	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00097	5b		 pop	 rbx
  00098	c3		 ret	 0
get_warnings_attr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@DCIAIMCN@onceregistry?$AA@		; `string'
EXTRN	PyErr_Occurred:PROC
_BSS	SEGMENT
_once_registry DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_once_registry DD imagerel get_once_registry
	DD	imagerel get_once_registry+84
	DD	imagerel $unwind$get_once_registry
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_once_registry DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0N@DCIAIMCN@onceregistry?$AA@
CONST	SEGMENT
??_C@_0N@DCIAIMCN@onceregistry?$AA@ DB 'onceregistry', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT get_once_registry
_TEXT	SEGMENT
get_once_registry PROC					; COMDAT

; 67   : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 68   :     PyObject *registry;
; 69   : 
; 70   :     registry = get_warnings_attr("onceregistry");

  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@DCIAIMCN@onceregistry?$AA@
  0000d	e8 00 00 00 00	 call	 get_warnings_attr
  00012	48 8b d8	 mov	 rbx, rax

; 71   :     if (registry == NULL) {

  00015	48 85 c0	 test	 rax, rax
  00018	75 1e		 jne	 SHORT $LN2@get_once_r

; 72   :         if (PyErr_Occurred())

  0001a	e8 00 00 00 00	 call	 PyErr_Occurred
  0001f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _once_registry
  00026	33 d2		 xor	 edx, edx
  00028	48 85 c0	 test	 rax, rax
  0002b	48 0f 45 ca	 cmovne	 rcx, rdx
  0002f	48 8b c1	 mov	 rax, rcx

; 79   : }

  00032	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00036	5b		 pop	 rbx
  00037	c3		 ret	 0
$LN2@get_once_r:

; 73   :             return NULL;
; 74   :         return _once_registry;
; 75   :     }
; 76   :     Py_DECREF(_once_registry);

  00038	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _once_registry
  0003f	e8 00 00 00 00	 call	 _Py_DecRef

; 77   :     _once_registry = registry;

  00044	48 89 1d 00 00
	00 00		 mov	 QWORD PTR _once_registry, rbx

; 78   :     return registry;

  0004b	48 8b c3	 mov	 rax, rbx

; 79   : }

  0004e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00052	5b		 pop	 rbx
  00053	c3		 ret	 0
get_once_registry ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@CNNJMCEG@defaultaction?$AA@		; `string'
_BSS	SEGMENT
_default_action DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_default_action DD imagerel get_default_action
	DD	imagerel get_default_action+84
	DD	imagerel $unwind$get_default_action
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_default_action DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0O@CNNJMCEG@defaultaction?$AA@
CONST	SEGMENT
??_C@_0O@CNNJMCEG@defaultaction?$AA@ DB 'defaultaction', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT get_default_action
_TEXT	SEGMENT
get_default_action PROC					; COMDAT

; 84   : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 85   :     PyObject *default_action;
; 86   : 
; 87   :     default_action = get_warnings_attr("defaultaction");

  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@CNNJMCEG@defaultaction?$AA@
  0000d	e8 00 00 00 00	 call	 get_warnings_attr
  00012	48 8b d8	 mov	 rbx, rax

; 88   :     if (default_action == NULL) {

  00015	48 85 c0	 test	 rax, rax
  00018	75 1e		 jne	 SHORT $LN2@get_defaul

; 89   :         if (PyErr_Occurred()) {

  0001a	e8 00 00 00 00	 call	 PyErr_Occurred
  0001f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _default_action
  00026	33 d2		 xor	 edx, edx
  00028	48 85 c0	 test	 rax, rax
  0002b	48 0f 45 ca	 cmovne	 rcx, rdx
  0002f	48 8b c1	 mov	 rax, rcx

; 98   : }

  00032	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00036	5b		 pop	 rbx
  00037	c3		 ret	 0
$LN2@get_defaul:

; 90   :             return NULL;
; 91   :         }
; 92   :         return _default_action;
; 93   :     }
; 94   : 
; 95   :     Py_DECREF(_default_action);

  00038	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _default_action
  0003f	e8 00 00 00 00	 call	 _Py_DecRef

; 96   :     _default_action = default_action;

  00044	48 89 1d 00 00
	00 00		 mov	 QWORD PTR _default_action, rbx

; 97   :     return default_action;

  0004b	48 8b c3	 mov	 rax, rbx

; 98   : }

  0004e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00052	5b		 pop	 rbx
  00053	c3		 ret	 0
get_default_action ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@LGIICNPJ@_warnings?4filters?5must?5be?5a?5list@ ; `string'
PUBLIC	??_C@_0CC@OPKOKLHA@_warnings?4defaultaction?5not?5foun@ ; `string'
PUBLIC	??_C@_0CL@KHGDEOFF@_warnings?4filters?5item?5?$CFzd?5isn?8t@ ; `string'
PUBLIC	??_C@_07LOIMJIII@filters?$AA@			; `string'
EXTRN	PyErr_SetString:PROC
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_ValueError:QWORD
EXTRN	PyUnicode_AsUTF8:PROC
EXTRN	PyLong_AsSsize_t:PROC
EXTRN	PyObject_IsSubclass:PROC
EXTRN	PyTuple_Size:PROC
_BSS	SEGMENT
_filters DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_filter DD imagerel get_filter
	DD	imagerel get_filter+121
	DD	imagerel $unwind$get_filter
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$get_filter DD imagerel get_filter+121
	DD	imagerel get_filter+457
	DD	imagerel $chain$4$get_filter
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$get_filter DD imagerel get_filter+457
	DD	imagerel get_filter+498
	DD	imagerel $chain$6$get_filter
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$get_filter DD imagerel get_filter+498
	DD	imagerel get_filter+529
	DD	imagerel $chain$7$get_filter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$get_filter DD 021H
	DD	imagerel get_filter
	DD	imagerel get_filter+121
	DD	imagerel $unwind$get_filter
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$get_filter DD 0a0021H
	DD	06f400H
	DD	07c400H
	DD	087400H
	DD	096400H
	DD	0105400H
	DD	imagerel get_filter
	DD	imagerel get_filter+121
	DD	imagerel $unwind$get_filter
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$get_filter DD 0a1e21H
	DD	06f41eH
	DD	07c419H
	DD	087412H
	DD	09640dH
	DD	0105408H
	DD	imagerel get_filter
	DD	imagerel get_filter+121
	DD	imagerel $unwind$get_filter
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_filter DD 041801H
	DD	0e0149218H
	DD	03010d012H
xdata	ENDS
;	COMDAT ??_C@_0CB@LGIICNPJ@_warnings?4filters?5must?5be?5a?5list@
CONST	SEGMENT
??_C@_0CB@LGIICNPJ@_warnings?4filters?5must?5be?5a?5list@ DB '_warnings.f'
	DB	'ilters must be a list', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@OPKOKLHA@_warnings?4defaultaction?5not?5foun@
CONST	SEGMENT
??_C@_0CC@OPKOKLHA@_warnings?4defaultaction?5not?5foun@ DB '_warnings.def'
	DB	'aultaction not found', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@KHGDEOFF@_warnings?4filters?5item?5?$CFzd?5isn?8t@
CONST	SEGMENT
??_C@_0CL@KHGDEOFF@_warnings?4filters?5item?5?$CFzd?5isn?8t@ DB '_warning'
	DB	's.filters item %zd isn''t a 5-tuple', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07LOIMJIII@filters?$AA@
CONST	SEGMENT
??_C@_07LOIMJIII@filters?$AA@ DB 'filters', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT get_filter
_TEXT	SEGMENT
action$1$ = 32
category$ = 112
text$ = 120
lineno$ = 128
module$ = 136
item$ = 144
get_filter PROC						; COMDAT

; 105  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	53		 push	 rbx
  00010	41 55		 push	 r13
  00012	41 56		 push	 r14
  00014	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 106  :     PyObject *action;
; 107  :     Py_ssize_t i;
; 108  :     PyObject *warnings_filters;
; 109  : 
; 110  :     warnings_filters = get_warnings_attr("filters");

  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07LOIMJIII@filters?$AA@
  0001f	4d 8b f0	 mov	 r14, r8
  00022	4c 8b ea	 mov	 r13, rdx
  00025	e8 00 00 00 00	 call	 get_warnings_attr
  0002a	48 8b d8	 mov	 rbx, rax

; 111  :     if (warnings_filters == NULL) {

  0002d	48 85 c0	 test	 rax, rax
  00030	75 17		 jne	 SHORT $LN14@get_filter

; 112  :         if (PyErr_Occurred())

  00032	e8 00 00 00 00	 call	 PyErr_Occurred
  00037	48 85 c0	 test	 rax, rax

; 113  :             return NULL;

  0003a	0f 85 c5 01 00
	00		 jne	 $LN28@get_filter

; 117  :         _filters = warnings_filters;

  00040	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR _filters
  00047	eb 13		 jmp	 SHORT $LN12@get_filter
$LN14@get_filter:

; 114  :     }
; 115  :     else {
; 116  :         Py_DECREF(_filters);

  00049	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _filters
  00050	e8 00 00 00 00	 call	 _Py_DecRef

; 117  :         _filters = warnings_filters;

  00055	48 89 1d 00 00
	00 00		 mov	 QWORD PTR _filters, rbx
$LN12@get_filter:

; 118  :     }
; 119  : 
; 120  :     if (_filters == NULL || !PyList_Check(_filters)) {

  0005c	48 85 db	 test	 rbx, rbx
  0005f	0f 84 8d 01 00
	00		 je	 $LN10@get_filter
  00065	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00069	f7 80 00 01 00
	00 00 00 00 02	 test	 DWORD PTR [rax+256], 33554432 ; 02000000H
  00073	0f 84 79 01 00
	00		 je	 $LN10@get_filter

; 124  :     }
; 125  : 
; 126  :     /* _filters could change while we are iterating over it. */
; 127  :     for (i = 0; i < PyList_GET_SIZE(_filters); i++) {

  00079	48 89 ac 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rbp
  00081	48 89 74 24 48	 mov	 QWORD PTR [rsp+72], rsi
  00086	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  0008b	33 ed		 xor	 ebp, ebp
  0008d	4c 89 64 24 38	 mov	 QWORD PTR [rsp+56], r12
  00092	4c 89 7c 24 30	 mov	 QWORD PTR [rsp+48], r15
  00097	48 39 6b 60	 cmp	 QWORD PTR [rbx+96], rbp
  0009b	0f 8e 28 01 00
	00		 jle	 $LN7@get_filter
  000a1	4c 8b bc 24 90
	00 00 00	 mov	 r15, QWORD PTR item$[rsp]
  000a9	0f 1f 80 00 00
	00 00		 npad	 7
$LL9@get_filter:

; 128  :         PyObject *tmp_item, *action, *msg, *cat, *mod, *ln_obj;
; 129  :         Py_ssize_t ln;
; 130  :         int is_subclass, good_msg, good_mod;
; 131  : 
; 132  :         tmp_item = *item = PyList_GET_ITEM(_filters, i);

  000b0	48 8b 43 70	 mov	 rax, QWORD PTR [rbx+112]
  000b4	4c 8b 24 e8	 mov	 r12, QWORD PTR [rax+rbp*8]

; 133  :         if (PyTuple_Size(tmp_item) != 5) {

  000b8	49 8b cc	 mov	 rcx, r12
  000bb	4d 89 27	 mov	 QWORD PTR [r15], r12
  000be	e8 00 00 00 00	 call	 PyTuple_Size
  000c3	48 83 f8 05	 cmp	 rax, 5
  000c7	0f 85 be 00 00
	00		 jne	 $LN18@get_filter

; 137  :         }
; 138  : 
; 139  :         /* Python code: action, msg, cat, mod, ln = item */
; 140  :         action = PyTuple_GET_ITEM(tmp_item, 0);

  000cd	49 8b 44 24 70	 mov	 rax, QWORD PTR [r12+112]

; 141  :         msg = PyTuple_GET_ITEM(tmp_item, 1);
; 142  :         cat = PyTuple_GET_ITEM(tmp_item, 2);
; 143  :         mod = PyTuple_GET_ITEM(tmp_item, 3);
; 144  :         ln_obj = PyTuple_GET_ITEM(tmp_item, 4);
; 145  : 
; 146  :         good_msg = check_matched(msg, text);

  000d2	49 8b 4c 24 78	 mov	 rcx, QWORD PTR [r12+120]
  000d7	49 8b bc 24 80
	00 00 00	 mov	 rdi, QWORD PTR [r12+128]
  000df	49 8b 9c 24 88
	00 00 00	 mov	 rbx, QWORD PTR [r12+136]
  000e7	49 8b b4 24 90
	00 00 00	 mov	 rsi, QWORD PTR [r12+144]
  000ef	49 8b d5	 mov	 rdx, r13
  000f2	48 89 44 24 20	 mov	 QWORD PTR action$1$[rsp], rax
  000f7	e8 00 00 00 00	 call	 check_matched

; 147  :         good_mod = check_matched(mod, module);

  000fc	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR module$[rsp]
  00104	48 8b cb	 mov	 rcx, rbx
  00107	44 8b e8	 mov	 r13d, eax
  0010a	e8 00 00 00 00	 call	 check_matched

; 148  :         is_subclass = PyObject_IsSubclass(category, cat);

  0010f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR category$[rsp]
  00114	48 8b d7	 mov	 rdx, rdi
  00117	44 8b e0	 mov	 r12d, eax
  0011a	e8 00 00 00 00	 call	 PyObject_IsSubclass

; 149  :         ln = PyLong_AsSsize_t(ln_obj);

  0011f	48 8b ce	 mov	 rcx, rsi
  00122	8b f8		 mov	 edi, eax
  00124	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  00129	48 8b d8	 mov	 rbx, rax

; 150  :         if (good_msg == -1 || good_mod == -1 || is_subclass == -1 ||
; 151  :             (ln == -1 && PyErr_Occurred()))

  0012c	41 83 fd ff	 cmp	 r13d, -1
  00130	74 6f		 je	 SHORT $LN4@get_filter
  00132	41 83 fc ff	 cmp	 r12d, -1
  00136	74 69		 je	 SHORT $LN4@get_filter
  00138	83 ff ff	 cmp	 edi, -1
  0013b	74 64		 je	 SHORT $LN4@get_filter
  0013d	48 83 f8 ff	 cmp	 rax, -1
  00141	75 0a		 jne	 SHORT $LN5@get_filter
  00143	e8 00 00 00 00	 call	 PyErr_Occurred
  00148	48 85 c0	 test	 rax, rax
  0014b	75 54		 jne	 SHORT $LN4@get_filter
$LN5@get_filter:

; 152  :             return NULL;
; 153  : 
; 154  :         if (good_msg && is_subclass && good_mod && (ln == 0 || lineno == ln))

  0014d	45 85 ed	 test	 r13d, r13d
  00150	74 13		 je	 SHORT $LN8@get_filter
  00152	85 ff		 test	 edi, edi
  00154	74 0f		 je	 SHORT $LN8@get_filter
  00156	45 85 e4	 test	 r12d, r12d
  00159	74 0a		 je	 SHORT $LN8@get_filter
  0015b	48 85 db	 test	 rbx, rbx
  0015e	74 1f		 je	 SHORT $LN2@get_filter
  00160	4c 3b f3	 cmp	 r14, rbx
  00163	74 1a		 je	 SHORT $LN2@get_filter
$LN8@get_filter:

; 124  :     }
; 125  : 
; 126  :     /* _filters could change while we are iterating over it. */
; 127  :     for (i = 0; i < PyList_GET_SIZE(_filters); i++) {

  00165	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR _filters
  0016c	48 ff c5	 inc	 rbp
  0016f	48 3b 6b 60	 cmp	 rbp, QWORD PTR [rbx+96]
  00173	7d 54		 jge	 SHORT $LN7@get_filter
  00175	4c 8b 6c 24 78	 mov	 r13, QWORD PTR text$[rsp]
  0017a	e9 31 ff ff ff	 jmp	 $LL9@get_filter
$LN2@get_filter:

; 155  :             return _PyUnicode_AsString(action);

  0017f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR action$1$[rsp]
  00184	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  00189	eb 18		 jmp	 SHORT $LN27@get_filter
$LN18@get_filter:

; 134  :             PyErr_Format(PyExc_ValueError,
; 135  :                          MODULE_NAME ".filters item %zd isn't a 5-tuple", i);

  0018b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00192	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@KHGDEOFF@_warnings?4filters?5item?5?$CFzd?5isn?8t@
  00199	4c 8b c5	 mov	 r8, rbp
  0019c	e8 00 00 00 00	 call	 PyErr_Format
$LN4@get_filter:

; 136  :             return NULL;

  001a1	33 c0		 xor	 eax, eax
$LN27@get_filter:
  001a3	4c 8b 64 24 38	 mov	 r12, QWORD PTR [rsp+56]
  001a8	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  001ad	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  001b2	48 8b ac 24 80
	00 00 00	 mov	 rbp, QWORD PTR [rsp+128]
  001ba	4c 8b 7c 24 30	 mov	 r15, QWORD PTR [rsp+48]

; 166  : }

  001bf	48 83 c4 50	 add	 rsp, 80			; 00000050H
  001c3	41 5e		 pop	 r14
  001c5	41 5d		 pop	 r13
  001c7	5b		 pop	 rbx
  001c8	c3		 ret	 0
$LN7@get_filter:

; 156  :     }
; 157  : 
; 158  :     action = get_default_action();

  001c9	e8 00 00 00 00	 call	 get_default_action

; 159  :     if (action != NULL) {

  001ce	48 85 c0	 test	 rax, rax
  001d1	74 0a		 je	 SHORT $LN1@get_filter

; 160  :         return _PyUnicode_AsString(action);

  001d3	48 8b c8	 mov	 rcx, rax
  001d6	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  001db	eb c6		 jmp	 SHORT $LN27@get_filter
$LN1@get_filter:

; 161  :     }
; 162  : 
; 163  :     PyErr_SetString(PyExc_ValueError,
; 164  :                     MODULE_NAME ".defaultaction not found");

  001dd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  001e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@OPKOKLHA@_warnings?4defaultaction?5not?5foun@
  001eb	e8 00 00 00 00	 call	 PyErr_SetString

; 165  :     return NULL;

  001f0	eb af		 jmp	 SHORT $LN4@get_filter
$LN10@get_filter:

; 121  :         PyErr_SetString(PyExc_ValueError,
; 122  :                         MODULE_NAME ".filters must be a list");

  001f2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  001f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@LGIICNPJ@_warnings?4filters?5must?5be?5a?5list@
  00200	e8 00 00 00 00	 call	 PyErr_SetString
$LN28@get_filter:

; 123  :         return NULL;

  00205	33 c0		 xor	 eax, eax

; 166  : }

  00207	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0020b	41 5e		 pop	 r14
  0020d	41 5d		 pop	 r13
  0020f	5b		 pop	 rbx
  00210	c3		 ret	 0
get_filter ENDP
_TEXT	ENDS
EXTRN	PyDict_SetItem:PROC
EXTRN	_Py_TrueStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$already_warned DD imagerel already_warned
	DD	imagerel already_warned+125
	DD	imagerel $unwind$already_warned
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$already_warned DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT already_warned
_TEXT	SEGMENT
registry$ = 48
key$ = 56
should_set$ = 64
already_warned PROC					; COMDAT

; 171  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	41 8b d8	 mov	 ebx, r8d
  00012	48 8b fa	 mov	 rdi, rdx
  00015	48 8b f1	 mov	 rsi, rcx

; 172  :     PyObject *already_warned;
; 173  : 
; 174  :     if (key == NULL)

  00018	48 85 d2	 test	 rdx, rdx
  0001b	75 13		 jne	 SHORT $LN4@already_wa

; 175  :         return -1;

  0001d	83 c8 ff	 or	 eax, -1

; 188  : }

  00020	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00025	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5f		 pop	 rdi
  0002f	c3		 ret	 0
$LN4@already_wa:

; 176  : 
; 177  :     already_warned = PyDict_GetItem(registry, key);

  00030	e8 00 00 00 00	 call	 PyDict_GetItem

; 178  :     if (already_warned != NULL) {

  00035	48 85 c0	 test	 rax, rax
  00038	74 0c		 je	 SHORT $LN2@already_wa

; 179  :         int rc = PyObject_IsTrue(already_warned);

  0003a	48 8b c8	 mov	 rcx, rax
  0003d	e8 00 00 00 00	 call	 PyObject_IsTrue

; 180  :         if (rc != 0)

  00042	85 c0		 test	 eax, eax

; 181  :             return rc;

  00044	75 27		 jne	 SHORT $LN5@already_wa
$LN2@already_wa:

; 182  :     }
; 183  : 
; 184  :     /* This warning wasn't found in the registry, set it. */
; 185  :     if (should_set)

  00046	85 db		 test	 ebx, ebx
  00048	74 21		 je	 SHORT $LN1@already_wa

; 186  :         return PyDict_SetItem(registry, key, Py_True);

  0004a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_TrueStruct
  00051	48 8b d7	 mov	 rdx, rdi
  00054	48 8b ce	 mov	 rcx, rsi

; 188  : }

  00057	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005c	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00061	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00065	5f		 pop	 rdi
  00066	e9 00 00 00 00	 jmp	 PyDict_SetItem
$LN1@already_wa:

; 187  :     return 0;

  0006b	33 c0		 xor	 eax, eax
$LN5@already_wa:

; 188  : }

  0006d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00072	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00077	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007b	5f		 pop	 rdi
  0007c	c3		 ret	 0
already_warned ENDP
_TEXT	ENDS
PUBLIC	??_C@_03DEFKFCAB@?4py?$AA@			; `string'
PUBLIC	??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@		; `string'
EXTRN	PyUnicode_Substring:PROC
EXTRN	__imp_strncmp:PROC
EXTRN	PyUnicode_GetLength:PROC
EXTRN	PyUnicode_FromString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$normalize_module DD imagerel normalize_module
	DD	imagerel normalize_module+51
	DD	imagerel $unwind$normalize_module
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$normalize_module DD imagerel normalize_module+51
	DD	imagerel normalize_module+80
	DD	imagerel $chain$0$normalize_module
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$normalize_module DD imagerel normalize_module+80
	DD	imagerel normalize_module+119
	DD	imagerel $chain$3$normalize_module
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$normalize_module DD imagerel normalize_module+119
	DD	imagerel normalize_module+186
	DD	imagerel $chain$5$normalize_module
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$normalize_module DD imagerel normalize_module+186
	DD	imagerel normalize_module+213
	DD	imagerel $chain$7$normalize_module
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$normalize_module DD 040021H
	DD	077400H
	DD	066400H
	DD	imagerel normalize_module
	DD	imagerel normalize_module+51
	DD	imagerel $unwind$normalize_module
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$normalize_module DD 040021H
	DD	077400H
	DD	066400H
	DD	imagerel normalize_module
	DD	imagerel normalize_module+51
	DD	imagerel $unwind$normalize_module
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$normalize_module DD 040821H
	DD	077408H
	DD	066400H
	DD	imagerel normalize_module
	DD	imagerel normalize_module+51
	DD	imagerel $unwind$normalize_module
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$normalize_module DD 020521H
	DD	066405H
	DD	imagerel normalize_module
	DD	imagerel normalize_module+51
	DD	imagerel $unwind$normalize_module
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$normalize_module DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_03DEFKFCAB@?4py?$AA@
CONST	SEGMENT
??_C@_03DEFKFCAB@?4py?$AA@ DB '.py', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@
CONST	SEGMENT
??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@ DB '<unknown>', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT normalize_module
_TEXT	SEGMENT
filename$ = 48
normalize_module PROC					; COMDAT

; 193  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 194  :     PyObject *module;
; 195  :     const char *mod_str;
; 196  :     Py_ssize_t len;
; 197  : 
; 198  :     int rc = PyObject_IsTrue(filename);

  00009	e8 00 00 00 00	 call	 PyObject_IsTrue

; 199  :     if (rc == -1)

  0000e	83 f8 ff	 cmp	 eax, -1
  00011	75 08		 jne	 SHORT $LN7@normalize_

; 200  :         return NULL;

  00013	33 c0		 xor	 eax, eax

; 219  : }

  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5b		 pop	 rbx
  0001a	c3		 ret	 0
$LN7@normalize_:

; 201  :     else if (rc == 0)

  0001b	85 c0		 test	 eax, eax
  0001d	75 11		 jne	 SHORT $LN5@normalize_

; 202  :         return PyUnicode_FromString("<unknown>");

  0001f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@

; 219  : }

  00026	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002a	5b		 pop	 rbx
  0002b	e9 00 00 00 00	 jmp	 PyUnicode_FromString
$LN5@normalize_:

; 203  : 
; 204  :     mod_str = _PyUnicode_AsString(filename);

  00030	48 8b cb	 mov	 rcx, rbx
  00033	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  00038	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  0003d	48 8b f0	 mov	 rsi, rax

; 205  :     if (mod_str == NULL)

  00040	48 85 c0	 test	 rax, rax
  00043	75 0b		 jne	 SHORT $LN4@normalize_
  00045	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]

; 219  : }

  0004a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004e	5b		 pop	 rbx
  0004f	c3		 ret	 0
$LN4@normalize_:

; 206  :         return NULL;
; 207  :     len = PyUnicode_GetLength(filename);

  00050	48 8b cb	 mov	 rcx, rbx
  00053	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  00058	e8 00 00 00 00	 call	 PyUnicode_GetLength
  0005d	48 8b f8	 mov	 rdi, rax

; 208  :     if (len < 0)

  00060	48 85 c0	 test	 rax, rax
  00063	79 12		 jns	 SHORT $LN3@normalize_

; 209  :         return NULL;

  00065	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]
  0006a	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  0006f	33 c0		 xor	 eax, eax

; 219  : }

  00071	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00075	5b		 pop	 rbx
  00076	c3		 ret	 0
$LN3@normalize_:

; 210  :     if (len >= 3 &&
; 211  :         strncmp(mod_str + (len - 3), ".py", 3) == 0) {

  00077	48 83 f8 03	 cmp	 rax, 3
  0007b	7c 3d		 jl	 SHORT $LN2@normalize_
  0007d	48 8d 4c 30 fd	 lea	 rcx, QWORD PTR [rax+rsi-3]
  00082	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03DEFKFCAB@?4py?$AA@
  00089	41 b8 03 00 00
	00		 mov	 r8d, 3
  0008f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strncmp
  00095	85 c0		 test	 eax, eax
  00097	75 21		 jne	 SHORT $LN2@normalize_

; 212  :         module = PyUnicode_Substring(filename, 0, len-3);

  00099	4c 8d 47 fd	 lea	 r8, QWORD PTR [rdi-3]
  0009d	33 d2		 xor	 edx, edx
  0009f	48 8b cb	 mov	 rcx, rbx
  000a2	e8 00 00 00 00	 call	 PyUnicode_Substring
  000a7	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]
  000ac	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  000b1	48 8b d8	 mov	 rbx, rax

; 219  : }

  000b4	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b8	5b		 pop	 rbx
  000b9	c3		 ret	 0
$LN2@normalize_:

; 213  :     }
; 214  :     else {
; 215  :         module = filename;
; 216  :         Py_INCREF(module);

  000ba	48 8b cb	 mov	 rcx, rbx
  000bd	e8 00 00 00 00	 call	 _Py_IncRef
  000c2	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]
  000c7	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]

; 217  :     }
; 218  :     return module;

  000cc	48 8b c3	 mov	 rax, rbx

; 219  : }

  000cf	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d3	5b		 pop	 rbx
  000d4	c3		 ret	 0
normalize_module ENDP
_TEXT	ENDS
EXTRN	PyTuple_Pack:PROC
EXTRN	PyLong_FromLong:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$update_registry DD imagerel update_registry
	DD	imagerel update_registry+349
	DD	imagerel $unwind$update_registry
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$update_registry DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\_warnings.c
xdata	ENDS
;	COMDAT update_registry
_TEXT	SEGMENT
registry$ = 64
text$ = 72
category$ = 80
add_zero$ = 88
update_registry PROC					; COMDAT

; 224  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 225  :     PyObject *altkey, *zero = NULL;

  00014	33 ff		 xor	 edi, edi
  00016	49 8b d8	 mov	 rbx, r8
  00019	48 8b f2	 mov	 rsi, rdx
  0001c	48 8b e9	 mov	 rbp, rcx

; 226  :     int rc;
; 227  : 
; 228  :     if (add_zero) {

  0001f	45 85 c9	 test	 r9d, r9d
  00022	74 2c		 je	 SHORT $LN11@update_reg

; 229  :         zero = PyLong_FromLong(0);

  00024	33 c9		 xor	 ecx, ecx
  00026	e8 00 00 00 00	 call	 PyLong_FromLong
  0002b	48 8b f8	 mov	 rdi, rax

; 230  :         if (zero == NULL)

  0002e	48 85 c0	 test	 rax, rax
  00031	75 08		 jne	 SHORT $LN10@update_reg

; 231  :             return -1;

  00033	83 c8 ff	 or	 eax, -1
  00036	e9 0d 01 00 00	 jmp	 $LN12@update_reg
$LN10@update_reg:

; 232  :         altkey = PyTuple_Pack(3, text, category, zero);

  0003b	4c 8b c8	 mov	 r9, rax
  0003e	4c 8b c3	 mov	 r8, rbx
  00041	48 8b d6	 mov	 rdx, rsi
  00044	b9 03 00 00 00	 mov	 ecx, 3
  00049	e8 00 00 00 00	 call	 PyTuple_Pack

; 233  :     }
; 234  :     else

  0004e	eb 0a		 jmp	 SHORT $LN36@update_reg
$LN11@update_reg:

; 235  :         altkey = PyTuple_Pack(2, text, category);

  00050	b9 02 00 00 00	 mov	 ecx, 2
  00055	e8 00 00 00 00	 call	 PyTuple_Pack
$LN36@update_reg:

; 236  : 
; 237  :     rc = already_warned(registry, altkey, 1);

  0005a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00060	48 8b d0	 mov	 rdx, rax
  00063	48 8b cd	 mov	 rcx, rbp
  00066	48 8b d8	 mov	 rbx, rax
  00069	e8 00 00 00 00	 call	 already_warned
  0006e	8b f0		 mov	 esi, eax

; 238  :     Py_XDECREF(zero);

  00070	48 85 ff	 test	 rdi, rdi
  00073	74 67		 je	 SHORT $LN7@update_reg
  00075	e8 00 00 00 00	 call	 _Py_PXCTX
  0007a	85 c0		 test	 eax, eax
  0007c	75 5e		 jne	 SHORT $LN7@update_reg
  0007e	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00082	f6 c1 20	 test	 cl, 32			; 00000020H
  00085	75 4d		 jne	 SHORT $LN18@update_reg
  00087	84 c9		 test	 cl, cl
  00089	78 49		 js	 SHORT $LN18@update_reg
  0008b	f6 c1 02	 test	 cl, 2
  0008e	75 4c		 jne	 SHORT $LN7@update_reg
  00090	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00094	75 46		 jne	 SHORT $LN7@update_reg
  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0009d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000a4	4c 8b cf	 mov	 r9, rdi
  000a7	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000ad	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000b5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ba	48 8b cf	 mov	 rcx, rdi
  000bd	85 c0		 test	 eax, eax
  000bf	74 07		 je	 SHORT $LN23@update_reg
  000c1	e8 00 00 00 00	 call	 _Px_Dealloc
  000c6	eb 14		 jmp	 SHORT $LN7@update_reg
$LN23@update_reg:
  000c8	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000cc	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000d2	eb 08		 jmp	 SHORT $LN7@update_reg
$LN18@update_reg:
  000d4	48 8b cf	 mov	 rcx, rdi
  000d7	e8 00 00 00 00	 call	 Px_DecRef
$LN7@update_reg:

; 239  :     Py_XDECREF(altkey);

  000dc	48 85 db	 test	 rbx, rbx
  000df	74 65		 je	 SHORT $LN3@update_reg
  000e1	e8 00 00 00 00	 call	 _Py_PXCTX
  000e6	85 c0		 test	 eax, eax
  000e8	75 5c		 jne	 SHORT $LN3@update_reg
  000ea	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000ee	a8 20		 test	 al, 32			; 00000020H
  000f0	75 4c		 jne	 SHORT $LN29@update_reg
  000f2	84 c0		 test	 al, al
  000f4	78 48		 js	 SHORT $LN29@update_reg
  000f6	a8 02		 test	 al, 2
  000f8	75 4c		 jne	 SHORT $LN3@update_reg
  000fa	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000fe	75 46		 jne	 SHORT $LN3@update_reg
  00100	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00107	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0010e	4c 8b cb	 mov	 r9, rbx
  00111	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00117	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0011f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00124	48 8b cb	 mov	 rcx, rbx
  00127	85 c0		 test	 eax, eax
  00129	74 07		 je	 SHORT $LN34@update_reg
  0012b	e8 00 00 00 00	 call	 _Px_Dealloc
  00130	eb 14		 jmp	 SHORT $LN3@update_reg
$LN34@update_reg:
  00132	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00136	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0013c	eb 08		 jmp	 SHORT $LN3@update_reg
$LN29@update_reg:
  0013e	48 8b cb	 mov	 rcx, rbx
  00141	e8 00 00 00 00	 call	 Px_DecRef
$LN3@update_reg:

; 240  :     return rc;

  00146	8b c6		 mov	 eax, esi
$LN12@update_reg:

; 241  : }

  00148	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0014d	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00152	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00157	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0015b	5f		 pop	 rdi
  0015c	c3		 ret	 0
update_registry ENDP
_TEXT	ENDS
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_02LMMGGCAJ@?3?5?$AA@			; `string'
PUBLIC	??_C@_0BB@CFMPKPJP@lost?5sys?4stderr?6?$AA@	; `string'
PUBLIC	??_C@_06FJGNEBG@stderr?$AA@			; `string'
PUBLIC	??_C@_05OKMBPOFD@?3?$CFd?3?5?$AA@		; `string'
EXTRN	PyErr_Clear:PROC
EXTRN	_Py_DisplaySourceLine:PROC
EXTRN	PyFile_WriteString:PROC
EXTRN	PyFile_WriteObject:PROC
EXTRN	__imp_fprintf:PROC
EXTRN	__imp___iob_func:PROC
EXTRN	PySys_GetObject:PROC
EXTRN	_PyObject_GetAttrId:PROC
EXTRN	PyOS_snprintf:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$show_warning DD imagerel show_warning
	DD	imagerel show_warning+401
	DD	imagerel $unwind$show_warning
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$show_warning DD 0b1d01H
	DD	019741dH
	DD	018641dH
	DD	017541dH
	DD	016341dH
	DD	014011dH
	DD	0c016H
xdata	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LMMGGCAJ@?3?5?$AA@
CONST	SEGMENT
??_C@_02LMMGGCAJ@?3?5?$AA@ DB ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CFMPKPJP@lost?5sys?4stderr?6?$AA@
CONST	SEGMENT
??_C@_0BB@CFMPKPJP@lost?5sys?4stderr?6?$AA@ DB 'lost sys.stderr', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FJGNEBG@stderr?$AA@
CONST	SEGMENT
??_C@_06FJGNEBG@stderr?$AA@ DB 'stderr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05OKMBPOFD@?3?$CFd?3?5?$AA@
CONST	SEGMENT
??_C@_05OKMBPOFD@?3?$CFd?3?5?$AA@ DB ':%d: ', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT show_warning
_TEXT	SEGMENT
lineno_str$ = 32
filename$ = 176
lineno$ = 184
text$ = 192
category$ = 200
sourceline$ = 208
show_warning PROC					; COMDAT

; 246  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  0001d	4d 8b e0	 mov	 r12, r8
  00020	48 8b e9	 mov	 rbp, rcx
  00023	49 8b d9	 mov	 rbx, r9
  00026	8b f2		 mov	 esi, edx

; 247  :     PyObject *f_stderr;
; 248  :     PyObject *name;
; 249  :     char lineno_str[128];
; 250  :     _Py_IDENTIFIER(__name__);
; 251  : 
; 252  :     PyOS_snprintf(lineno_str, sizeof(lineno_str), ":%d: ", lineno);

  00028	44 8b ca	 mov	 r9d, edx
  0002b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05OKMBPOFD@?3?$CFd?3?5?$AA@
  00032	48 8d 4c 24 20	 lea	 rcx, QWORD PTR lineno_str$[rsp]
  00037	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  0003c	e8 00 00 00 00	 call	 PyOS_snprintf

; 253  : 
; 254  :     name = _PyObject_GetAttrId(category, &PyId___name__);

  00041	44 8b 1d 00 00
	00 00		 mov	 r11d, DWORD PTR _tls_index
  00048	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00051	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId___name__@?1??show_warning@@9@9
  00056	48 8b cb	 mov	 rcx, rbx
  00059	4a 03 14 d8	 add	 rdx, QWORD PTR [rax+r11*8]
  0005d	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00062	48 8b f8	 mov	 rdi, rax

; 255  :     if (name == NULL)  /* XXX Can an object lack a '__name__' attribute? */

  00065	48 85 c0	 test	 rax, rax
  00068	0f 84 05 01 00
	00		 je	 $LN14@show_warni

; 256  :         return;
; 257  : 
; 258  :     f_stderr = PySys_GetObject("stderr");

  0006e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FJGNEBG@stderr?$AA@
  00075	e8 00 00 00 00	 call	 PySys_GetObject
  0007a	48 8b d8	 mov	 rbx, rax

; 259  :     if (f_stderr == NULL) {

  0007d	48 85 c0	 test	 rax, rax
  00080	75 24		 jne	 SHORT $LN12@show_warni

; 260  :         fprintf(stderr, "lost sys.stderr\n");

  00082	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00088	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@CFMPKPJP@lost?5sys?4stderr?6?$AA@
  0008f	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  00093	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 261  :         Py_DECREF(name);

  00099	48 8b cf	 mov	 rcx, rdi
  0009c	e8 00 00 00 00	 call	 _Py_DecRef

; 262  :         return;

  000a1	e9 cd 00 00 00	 jmp	 $LN14@show_warni
$LN12@show_warni:

; 263  :     }
; 264  : 
; 265  :     /* Print "filename:lineno: category: text\n" */
; 266  :     PyFile_WriteObject(filename, f_stderr, Py_PRINT_RAW);

  000a6	41 b8 01 00 00
	00		 mov	 r8d, 1
  000ac	48 8b d0	 mov	 rdx, rax
  000af	48 8b cd	 mov	 rcx, rbp
  000b2	e8 00 00 00 00	 call	 PyFile_WriteObject

; 267  :     PyFile_WriteString(lineno_str, f_stderr);

  000b7	48 8d 4c 24 20	 lea	 rcx, QWORD PTR lineno_str$[rsp]
  000bc	48 8b d3	 mov	 rdx, rbx
  000bf	e8 00 00 00 00	 call	 PyFile_WriteString

; 268  :     PyFile_WriteObject(name, f_stderr, Py_PRINT_RAW);

  000c4	41 b8 01 00 00
	00		 mov	 r8d, 1
  000ca	48 8b d3	 mov	 rdx, rbx
  000cd	48 8b cf	 mov	 rcx, rdi
  000d0	e8 00 00 00 00	 call	 PyFile_WriteObject

; 269  :     PyFile_WriteString(": ", f_stderr);

  000d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02LMMGGCAJ@?3?5?$AA@
  000dc	48 8b d3	 mov	 rdx, rbx
  000df	e8 00 00 00 00	 call	 PyFile_WriteString

; 270  :     PyFile_WriteObject(text, f_stderr, Py_PRINT_RAW);

  000e4	41 b8 01 00 00
	00		 mov	 r8d, 1
  000ea	48 8b d3	 mov	 rdx, rbx
  000ed	49 8b cc	 mov	 rcx, r12
  000f0	e8 00 00 00 00	 call	 PyFile_WriteObject

; 271  :     PyFile_WriteString("\n", f_stderr);

  000f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  000fc	48 8b d3	 mov	 rdx, rbx
  000ff	e8 00 00 00 00	 call	 PyFile_WriteString

; 272  :     Py_XDECREF(name);

  00104	48 8b cf	 mov	 rcx, rdi
  00107	e8 00 00 00 00	 call	 _Py_DecRef

; 273  : 
; 274  :     /* Print "  source_line\n" */
; 275  :     if (sourceline) {

  0010c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR sourceline$[rsp]
  00114	48 85 c9	 test	 rcx, rcx
  00117	74 3d		 je	 SHORT $LN7@show_warni

; 276  :         char *source_line_str = _PyUnicode_AsString(sourceline);

  00119	e8 00 00 00 00	 call	 PyUnicode_AsUTF8

; 277  :         if (source_line_str == NULL)

  0011e	48 85 c0	 test	 rax, rax
  00121	74 50		 je	 SHORT $LN14@show_warni
$LL5@show_warni:

; 278  :                 return;
; 279  :         while (*source_line_str == ' ' || *source_line_str == '\t' ||
; 280  :                 *source_line_str == '\014')

  00123	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00126	80 f9 20	 cmp	 cl, 32			; 00000020H
  00129	74 0a		 je	 SHORT $LN3@show_warni
  0012b	80 f9 09	 cmp	 cl, 9
  0012e	74 05		 je	 SHORT $LN3@show_warni
  00130	80 f9 0c	 cmp	 cl, 12
  00133	75 05		 jne	 SHORT $LN4@show_warni
$LN3@show_warni:

; 281  :             source_line_str++;

  00135	48 ff c0	 inc	 rax
  00138	eb e9		 jmp	 SHORT $LL5@show_warni
$LN4@show_warni:

; 282  : 
; 283  :         PyFile_WriteString(source_line_str, f_stderr);

  0013a	48 8b d3	 mov	 rdx, rbx
  0013d	48 8b c8	 mov	 rcx, rax
  00140	e8 00 00 00 00	 call	 PyFile_WriteString

; 284  :         PyFile_WriteString("\n", f_stderr);

  00145	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  0014c	48 8b d3	 mov	 rdx, rbx
  0014f	e8 00 00 00 00	 call	 PyFile_WriteString

; 285  :     }
; 286  :     else

  00154	eb 18		 jmp	 SHORT $LN1@show_warni
$LN7@show_warni:

; 287  :         if (_Py_DisplaySourceLine(f_stderr, filename, lineno, 2) < 0)

  00156	41 b9 02 00 00
	00		 mov	 r9d, 2
  0015c	44 8b c6	 mov	 r8d, esi
  0015f	48 8b d5	 mov	 rdx, rbp
  00162	48 8b cb	 mov	 rcx, rbx
  00165	e8 00 00 00 00	 call	 _Py_DisplaySourceLine
  0016a	85 c0		 test	 eax, eax
  0016c	78 05		 js	 SHORT $LN14@show_warni
$LN1@show_warni:

; 288  :                 return;
; 289  :     PyErr_Clear();

  0016e	e8 00 00 00 00	 call	 PyErr_Clear
$LN14@show_warni:

; 290  : }

  00173	4c 8d 9c 24 a0
	00 00 00	 lea	 r11, QWORD PTR [rsp+160]
  0017b	49 8b 5b 10	 mov	 rbx, QWORD PTR [r11+16]
  0017f	49 8b 6b 18	 mov	 rbp, QWORD PTR [r11+24]
  00183	49 8b 73 20	 mov	 rsi, QWORD PTR [r11+32]
  00187	49 8b 7b 28	 mov	 rdi, QWORD PTR [r11+40]
  0018b	49 8b e3	 mov	 rsp, r11
  0018e	41 5c		 pop	 r12
  00190	c3		 ret	 0
show_warning ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DB@CHJNEDCO@warnings?4showwarning?$CI?$CJ?5must?5be?5s@ ; `string'
PUBLIC	??_C@_0M@EMKAPFPF@showwarning?$AA@		; `string'
PUBLIC	??_C@_0DC@BJGCPOLD@Unrecognized?5action?5?$CI?$CFs?$CJ?5in?5warn@ ; `string'
PUBLIC	??_C@_03BBKEAIF@?$DP?$DP?$DP?$AA@		; `string'
PUBLIC	??_C@_07DLHCIBDH@default?$AA@			; `string'
PUBLIC	??_C@_04KLFNICNF@once?$AA@			; `string'
PUBLIC	??_C@_06GDPEBLPA@ignore?$AA@			; `string'
PUBLIC	??_C@_06KHDOHNKC@always?$AA@			; `string'
PUBLIC	??_C@_05KKCIMGE@error?$AA@			; `string'
PUBLIC	??_C@_0BK@NCCANGBJ@?8registry?8?5must?5be?5a?5dict?$AA@ ; `string'
EXTRN	PyObject_CallFunctionObjArgs:PROC
EXTRN	PyCallable_Check:PROC
EXTRN	PyExc_RuntimeError:QWORD
EXTRN	PyErr_SetObject:PROC
EXTRN	PyObject_CallFunction:PROC
EXTRN	PyObject_Str:PROC
EXTRN	PyObject_IsInstance:PROC
EXTRN	PyExc_Warning:QWORD
EXTRN	PyExc_TypeError:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$warn_explicit DD imagerel warn_explicit
	DD	imagerel warn_explicit+438
	DD	imagerel $unwind$warn_explicit
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$warn_explicit DD imagerel warn_explicit+438
	DD	imagerel warn_explicit+1226
	DD	imagerel $chain$1$warn_explicit
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$warn_explicit DD imagerel warn_explicit+1226
	DD	imagerel warn_explicit+1613
	DD	imagerel $chain$2$warn_explicit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$warn_explicit DD 021H
	DD	imagerel warn_explicit
	DD	imagerel warn_explicit+438
	DD	imagerel $unwind$warn_explicit
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$warn_explicit DD 020521H
	DD	08d405H
	DD	imagerel warn_explicit
	DD	imagerel warn_explicit+438
	DD	imagerel $unwind$warn_explicit
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$warn_explicit DD 099401H
	DD	0116494H
	DD	0f018821cH
	DD	0c014e016H
	DD	050117012H
	DD	03010H
xdata	ENDS
;	COMDAT ??_C@_0DB@CHJNEDCO@warnings?4showwarning?$CI?$CJ?5must?5be?5s@
CONST	SEGMENT
??_C@_0DB@CHJNEDCO@warnings?4showwarning?$CI?$CJ?5must?5be?5s@ DB 'warnin'
	DB	'gs.showwarning() must be set to a callable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EMKAPFPF@showwarning?$AA@
CONST	SEGMENT
??_C@_0M@EMKAPFPF@showwarning?$AA@ DB 'showwarning', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@BJGCPOLD@Unrecognized?5action?5?$CI?$CFs?$CJ?5in?5warn@
CONST	SEGMENT
??_C@_0DC@BJGCPOLD@Unrecognized?5action?5?$CI?$CFs?$CJ?5in?5warn@ DB 'Unr'
	DB	'ecognized action (%s) in warnings.filters:', 0aH, ' %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03BBKEAIF@?$DP?$DP?$DP?$AA@
CONST	SEGMENT
??_C@_03BBKEAIF@?$DP?$DP?$DP?$AA@ DB '???', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DLHCIBDH@default?$AA@
CONST	SEGMENT
??_C@_07DLHCIBDH@default?$AA@ DB 'default', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KLFNICNF@once?$AA@
CONST	SEGMENT
??_C@_04KLFNICNF@once?$AA@ DB 'once', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GDPEBLPA@ignore?$AA@
CONST	SEGMENT
??_C@_06GDPEBLPA@ignore?$AA@ DB 'ignore', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KHDOHNKC@always?$AA@
CONST	SEGMENT
??_C@_06KHDOHNKC@always?$AA@ DB 'always', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KKCIMGE@error?$AA@
CONST	SEGMENT
??_C@_05KKCIMGE@error?$AA@ DB 'error', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NCCANGBJ@?8registry?8?5must?5be?5a?5dict?$AA@
CONST	SEGMENT
??_C@_0BK@NCCANGBJ@?8registry?8?5must?5be?5a?5dict?$AA@ DB '''registry'' '
	DB	'must be a dict', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\_warnings.c
CONST	ENDS
;	COMDAT warn_explicit
_TEXT	SEGMENT
result$1$ = 48
item$ = 56
category$ = 128
message$ = 136
filename$ = 144
lineno$ = 152
module$ = 160
registry$ = 168
sourceline$ = 176
warn_explicit PROC					; COMDAT

; 296  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	53		 push	 rbx
  00010	55		 push	 rbp
  00011	57		 push	 rdi
  00012	41 54		 push	 r12
  00014	41 56		 push	 r14
  00016	41 57		 push	 r15
  00018	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 298  :     PyObject *item = Py_None;
; 299  :     const char *action;
; 300  :     int rc;
; 301  : 
; 302  :     if (registry && !PyDict_Check(registry) && (registry != Py_None)) {

  0001c	48 8b ac 24 a8
	00 00 00	 mov	 rbp, QWORD PTR registry$[rsp]
  00024	45 33 e4	 xor	 r12d, r12d
  00027	48 8b f9	 mov	 rdi, rcx
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00031	4d 63 f9	 movsxd	 r15, r9d
  00034	49 8b c0	 mov	 rax, r8
  00037	48 8b da	 mov	 rbx, rdx
  0003a	4c 89 64 24 30	 mov	 QWORD PTR result$1$[rsp], r12
  0003f	45 8b f4	 mov	 r14d, r12d
  00042	48 89 4c 24 38	 mov	 QWORD PTR item$[rsp], rcx
  00047	48 85 ed	 test	 rbp, rbp
  0004a	74 40		 je	 SHORT $LN65@warn_expli
  0004c	48 8b 45 58	 mov	 rax, QWORD PTR [rbp+88]
  00050	f7 80 00 01 00
	00 00 00 00 20	 test	 DWORD PTR [rax+256], 536870912 ; 20000000H
  0005a	75 28		 jne	 SHORT $LN127@warn_expli
  0005c	48 3b e9	 cmp	 rbp, rcx
  0005f	74 23		 je	 SHORT $LN127@warn_expli

; 303  :         PyErr_SetString(PyExc_TypeError, "'registry' must be a dict");

  00061	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00068	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@NCCANGBJ@?8registry?8?5must?5be?5a?5dict?$AA@
  0006f	e8 00 00 00 00	 call	 PyErr_SetString

; 304  :         return NULL;

  00074	33 c0		 xor	 eax, eax

; 445  : }

  00076	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0007a	41 5f		 pop	 r15
  0007c	41 5e		 pop	 r14
  0007e	41 5c		 pop	 r12
  00080	5f		 pop	 rdi
  00081	5d		 pop	 rbp
  00082	5b		 pop	 rbx
  00083	c3		 ret	 0
$LN127@warn_expli:

; 296  : {

  00084	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
$LN65@warn_expli:
  0008c	48 89 b4 24 88
	00 00 00	 mov	 QWORD PTR [rsp+136], rsi

; 305  :     }
; 306  : 
; 307  :     /* Normalize module. */
; 308  :     if (module == NULL) {

  00094	48 8b b4 24 a0
	00 00 00	 mov	 rsi, QWORD PTR module$[rsp]
  0009c	48 85 f6	 test	 rsi, rsi
  0009f	75 1d		 jne	 SHORT $LN64@warn_expli

; 309  :         module = normalize_module(filename);

  000a1	48 8b c8	 mov	 rcx, rax
  000a4	e8 00 00 00 00	 call	 normalize_module
  000a9	48 8b f0	 mov	 rsi, rax
  000ac	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR module$[rsp], rax

; 310  :         if (module == NULL)

  000b4	48 85 c0	 test	 rax, rax
  000b7	75 40		 jne	 SHORT $LN69@warn_expli

; 311  :             return NULL;

  000b9	e9 79 05 00 00	 jmp	 $LN134@warn_expli
$LN64@warn_expli:

; 312  :     }
; 313  :     else
; 314  :         Py_INCREF(module);

  000be	e8 00 00 00 00	 call	 _Py_PXCTX
  000c3	85 c0		 test	 eax, eax
  000c5	75 32		 jne	 SHORT $LN69@warn_expli
  000c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000d5	4c 8b ce	 mov	 r9, rsi
  000d8	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000de	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000e6	e8 00 00 00 00	 call	 _PyParallel_Guard
  000eb	85 c0		 test	 eax, eax
  000ed	75 06		 jne	 SHORT $LN68@warn_expli
  000ef	f6 46 20 20	 test	 BYTE PTR [rsi+32], 32	; 00000020H
  000f3	74 04		 je	 SHORT $LN69@warn_expli
$LN68@warn_expli:
  000f5	48 ff 46 50	 inc	 QWORD PTR [rsi+80]
$LN69@warn_expli:

; 315  : 
; 316  :     /* Normalize message. */
; 317  :     Py_INCREF(message);  /* DECREF'ed in cleanup. */

  000f9	e8 00 00 00 00	 call	 _Py_PXCTX
  000fe	85 c0		 test	 eax, eax
  00100	75 32		 jne	 SHORT $LN73@warn_expli
  00102	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00109	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00110	4c 8b cb	 mov	 r9, rbx
  00113	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00119	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00121	e8 00 00 00 00	 call	 _PyParallel_Guard
  00126	85 c0		 test	 eax, eax
  00128	75 06		 jne	 SHORT $LN72@warn_expli
  0012a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0012e	74 04		 je	 SHORT $LN73@warn_expli
$LN72@warn_expli:
  00130	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN73@warn_expli:

; 318  :     rc = PyObject_IsInstance(message, PyExc_Warning);

  00134	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_Warning
  0013b	48 8b cb	 mov	 rcx, rbx
  0013e	e8 00 00 00 00	 call	 PyObject_IsInstance

; 319  :     if (rc == -1) {

  00143	83 f8 ff	 cmp	 eax, -1
  00146	0f 84 4c 04 00
	00		 je	 $LN7@warn_expli

; 320  :         goto cleanup;
; 321  :     }
; 322  :     if (rc == 1) {

  0014c	83 f8 01	 cmp	 eax, 1
  0014f	75 22		 jne	 SHORT $LN60@warn_expli

; 323  :         text = PyObject_Str(message);

  00151	48 8b cb	 mov	 rcx, rbx
  00154	e8 00 00 00 00	 call	 PyObject_Str
  00159	4c 8b e0	 mov	 r12, rax

; 324  :         if (text == NULL)

  0015c	48 85 c0	 test	 rax, rax
  0015f	0f 84 b3 04 00
	00		 je	 $LN128@warn_expli

; 325  :             goto cleanup;
; 326  :         category = (PyObject*)message->ob_type;

  00165	48 8b 7b 58	 mov	 rdi, QWORD PTR [rbx+88]
  00169	48 89 bc 24 80
	00 00 00	 mov	 QWORD PTR category$[rsp], rdi

; 327  :     }
; 328  :     else {

  00171	eb 21		 jmp	 SHORT $LN57@warn_expli
$LN60@warn_expli:

; 329  :         text = message;
; 330  :         message = PyObject_CallFunction(category, "O", message);

  00173	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01MJMHLOMK@O?$AA@
  0017a	4c 8b c3	 mov	 r8, rbx
  0017d	48 8b cf	 mov	 rcx, rdi
  00180	4c 8b e3	 mov	 r12, rbx
  00183	e8 00 00 00 00	 call	 PyObject_CallFunction
  00188	48 8b d8	 mov	 rbx, rax

; 331  :         if (message == NULL)

  0018b	48 85 c0	 test	 rax, rax
  0018e	0f 84 36 03 00
	00		 je	 $LN15@warn_expli
$LN57@warn_expli:

; 332  :             goto cleanup;
; 333  :     }
; 334  : 
; 335  :     lineno_obj = PyLong_FromLong(lineno);

  00194	41 8b cf	 mov	 ecx, r15d
  00197	e8 00 00 00 00	 call	 PyLong_FromLong
  0019c	4c 8b f0	 mov	 r14, rax

; 336  :     if (lineno_obj == NULL)

  0019f	48 85 c0	 test	 rax, rax
  001a2	0f 84 22 03 00
	00		 je	 $LN15@warn_expli

; 337  :         goto cleanup;
; 338  : 
; 339  :     /* Create key. */
; 340  :     key = PyTuple_Pack(3, text, category, lineno_obj);

  001a8	4c 8b c8	 mov	 r9, rax
  001ab	4c 8b c7	 mov	 r8, rdi
  001ae	49 8b d4	 mov	 rdx, r12
  001b1	b9 03 00 00 00	 mov	 ecx, 3
  001b6	4c 89 6c 24 40	 mov	 QWORD PTR [rsp+64], r13
  001bb	e8 00 00 00 00	 call	 PyTuple_Pack
  001c0	4c 8b e8	 mov	 r13, rax

; 341  :     if (key == NULL)

  001c3	48 85 c0	 test	 rax, rax
  001c6	0f 84 f9 02 00
	00		 je	 $LN135@warn_expli

; 342  :         goto cleanup;
; 343  : 
; 344  :     if ((registry != NULL) && (registry != Py_None)) {

  001cc	48 85 ed	 test	 rbp, rbp
  001cf	74 2c		 je	 SHORT $LN51@warn_expli
  001d1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  001d8	48 3b e8	 cmp	 rbp, rax
  001db	74 20		 je	 SHORT $LN51@warn_expli

; 345  :         rc = already_warned(registry, key, 0);

  001dd	45 33 c0	 xor	 r8d, r8d
  001e0	49 8b d5	 mov	 rdx, r13
  001e3	48 8b cd	 mov	 rcx, rbp
  001e6	e8 00 00 00 00	 call	 already_warned

; 346  :         if (rc == -1)

  001eb	83 f8 ff	 cmp	 eax, -1
  001ee	0f 84 6c 02 00
	00		 je	 $cleanup$20506

; 347  :             goto cleanup;
; 348  :         else if (rc == 1)

  001f4	83 f8 01	 cmp	 eax, 1
  001f7	0f 84 52 02 00
	00		 je	 $return_none$20523
$LN51@warn_expli:

; 349  :             goto return_none;
; 350  :         /* Else this warning hasn't been generated before. */
; 351  :     }
; 352  : 
; 353  :     action = get_filter(category, text, lineno, module, &item);

  001fd	48 8d 44 24 38	 lea	 rax, QWORD PTR item$[rsp]
  00202	4d 8b c7	 mov	 r8, r15
  00205	4c 8b ce	 mov	 r9, rsi
  00208	49 8b d4	 mov	 rdx, r12
  0020b	48 8b cf	 mov	 rcx, rdi
  0020e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00213	e8 00 00 00 00	 call	 get_filter
  00218	4c 8b f8	 mov	 r15, rax

; 354  :     if (action == NULL)

  0021b	48 85 c0	 test	 rax, rax
  0021e	0f 84 3c 02 00
	00		 je	 $cleanup$20506

; 355  :         goto cleanup;
; 356  : 
; 357  :     if (strcmp(action, "error") == 0) {

  00224	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_05KKCIMGE@error?$AA@
  0022b	48 8b f0	 mov	 rsi, rax
  0022e	b9 06 00 00 00	 mov	 ecx, 6
  00233	f3 a6		 repe cmpsb
  00235	75 15		 jne	 SHORT $LN49@warn_expli

; 358  :         PyErr_SetObject(category, message);

  00237	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR category$[rsp]
  0023f	48 8b d3	 mov	 rdx, rbx
  00242	e8 00 00 00 00	 call	 PyErr_SetObject

; 359  :         goto cleanup;

  00247	e9 14 02 00 00	 jmp	 $cleanup$20506
$LN49@warn_expli:

; 360  :     }
; 361  : 
; 362  :     /* Store in the registry that we've been here, *except* when the action
; 363  :        is "always". */
; 364  :     rc = 0;
; 365  :     if (strcmp(action, "always") != 0) {

  0024c	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_06KHDOHNKC@always?$AA@
  00253	48 8b f0	 mov	 rsi, rax
  00256	b9 07 00 00 00	 mov	 ecx, 7
  0025b	f3 a6		 repe cmpsb
  0025d	0f 84 36 01 00
	00		 je	 $LN125@warn_expli

; 366  :         if (registry != NULL && registry != Py_None &&
; 367  :                 PyDict_SetItem(registry, key, Py_True) < 0)

  00263	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0026a	48 85 ed	 test	 rbp, rbp
  0026d	74 26		 je	 SHORT $LN47@warn_expli
  0026f	48 3b e8	 cmp	 rbp, rax
  00272	74 21		 je	 SHORT $LN47@warn_expli
  00274	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_TrueStruct
  0027b	49 8b d5	 mov	 rdx, r13
  0027e	48 8b cd	 mov	 rcx, rbp
  00281	e8 00 00 00 00	 call	 PyDict_SetItem
  00286	85 c0		 test	 eax, eax
  00288	0f 88 d2 01 00
	00		 js	 $cleanup$20506
  0028e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN47@warn_expli:

; 368  :             goto cleanup;
; 369  :         else if (strcmp(action, "ignore") == 0)

  00295	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_06GDPEBLPA@ignore?$AA@
  0029c	49 8b f7	 mov	 rsi, r15
  0029f	b9 07 00 00 00	 mov	 ecx, 7
  002a4	f3 a6		 repe cmpsb
  002a6	0f 84 a3 01 00
	00		 je	 $return_none$20523

; 370  :             goto return_none;
; 371  :         else if (strcmp(action, "once") == 0) {

  002ac	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_04KLFNICNF@once?$AA@
  002b3	49 8b f7	 mov	 rsi, r15
  002b6	b9 05 00 00 00	 mov	 ecx, 5
  002bb	f3 a6		 repe cmpsb
  002bd	75 1d		 jne	 SHORT $LN43@warn_expli

; 372  :             if (registry == NULL || registry == Py_None) {

  002bf	48 85 ed	 test	 rbp, rbp
  002c2	74 05		 je	 SHORT $LN41@warn_expli
  002c4	48 3b e8	 cmp	 rbp, rax
  002c7	75 38		 jne	 SHORT $LN40@warn_expli
$LN41@warn_expli:

; 373  :                 registry = get_once_registry();

  002c9	e8 00 00 00 00	 call	 get_once_registry
  002ce	48 8b e8	 mov	 rbp, rax

; 374  :                 if (registry == NULL)

  002d1	48 85 c0	 test	 rax, rax
  002d4	0f 84 86 01 00
	00		 je	 $cleanup$20506

; 375  :                     goto cleanup;
; 376  :             }
; 377  :             /* _once_registry[(text, category)] = 1 */
; 378  :             rc = update_registry(registry, text, category, 0);

  002da	eb 25		 jmp	 SHORT $LN40@warn_expli
$LN43@warn_expli:

; 379  :         }
; 380  :         else if (strcmp(action, "module") == 0) {

  002dc	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_06BIEEJMKO@module?$AA@
  002e3	49 8b f7	 mov	 rsi, r15
  002e6	b9 07 00 00 00	 mov	 ecx, 7
  002eb	f3 a6		 repe cmpsb
  002ed	75 3e		 jne	 SHORT $LN38@warn_expli

; 381  :             /* registry[(text, category, 0)] = 1 */
; 382  :             if (registry != NULL && registry != Py_None)

  002ef	48 85 ed	 test	 rbp, rbp
  002f2	0f 84 a1 00 00
	00		 je	 $LN125@warn_expli
  002f8	48 3b e8	 cmp	 rbp, rax
  002fb	0f 84 98 00 00
	00		 je	 $LN125@warn_expli
$LN40@warn_expli:

; 383  :                 rc = update_registry(registry, text, category, 0);

  00301	48 8b b4 24 80
	00 00 00	 mov	 rsi, QWORD PTR category$[rsp]
  00309	45 33 c9	 xor	 r9d, r9d
  0030c	49 8b d4	 mov	 rdx, r12
  0030f	4c 8b c6	 mov	 r8, rsi
  00312	48 8b cd	 mov	 rcx, rbp
  00315	e8 00 00 00 00	 call	 update_registry

; 399  :         }
; 400  :     }
; 401  : 
; 402  :     if (rc == 1)  /* Already warned for this module. */

  0031a	83 f8 01	 cmp	 eax, 1
  0031d	0f 84 2c 01 00
	00		 je	 $return_none$20523

; 403  :         goto return_none;
; 404  :     if (rc == 0) {

  00323	85 c0		 test	 eax, eax
  00325	0f 85 35 01 00
	00		 jne	 $cleanup$20506
  0032b	eb 74		 jmp	 SHORT $LN121@warn_expli
$LN38@warn_expli:

; 384  :         }
; 385  :         else if (strcmp(action, "default") != 0) {

  0032d	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_07DLHCIBDH@default?$AA@
  00334	49 8b f7	 mov	 rsi, r15
  00337	b9 08 00 00 00	 mov	 ecx, 8
  0033c	f3 a6		 repe cmpsb
  0033e	74 59		 je	 SHORT $LN125@warn_expli

; 386  :             PyObject *to_str = PyObject_Str(item);

  00340	48 8b 4c 24 38	 mov	 rcx, QWORD PTR item$[rsp]
  00345	e8 00 00 00 00	 call	 PyObject_Str
  0034a	48 8b f8	 mov	 rdi, rax

; 387  :             const char *err_str = "???";

  0034d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_03BBKEAIF@?$DP?$DP?$DP?$AA@

; 388  : 
; 389  :             if (to_str != NULL) {

  00354	48 85 ff	 test	 rdi, rdi
  00357	74 11		 je	 SHORT $LN33@warn_expli

; 390  :                 err_str = _PyUnicode_AsString(to_str);

  00359	48 8b cf	 mov	 rcx, rdi
  0035c	e8 00 00 00 00	 call	 PyUnicode_AsUTF8

; 391  :                 if (err_str == NULL)

  00361	48 85 c0	 test	 rax, rax
  00364	0f 84 f6 00 00
	00		 je	 $cleanup$20506
$LN33@warn_expli:

; 392  :                         goto cleanup;
; 393  :             }
; 394  :             PyErr_Format(PyExc_RuntimeError,
; 395  :                         "Unrecognized action (%s) in warnings.filters:\n %s",
; 396  :                         action, err_str);

  0036a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00371	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@BJGCPOLD@Unrecognized?5action?5?$CI?$CFs?$CJ?5in?5warn@
  00378	4c 8b c8	 mov	 r9, rax
  0037b	4d 8b c7	 mov	 r8, r15
  0037e	e8 00 00 00 00	 call	 PyErr_Format

; 397  :             Py_XDECREF(to_str);

  00383	48 85 ff	 test	 rdi, rdi
  00386	0f 84 d4 00 00
	00		 je	 $cleanup$20506
  0038c	48 8b cf	 mov	 rcx, rdi
  0038f	e8 00 00 00 00	 call	 _Py_DecRef

; 398  :             goto cleanup;

  00394	e9 c7 00 00 00	 jmp	 $cleanup$20506
$LN125@warn_expli:

; 298  :     PyObject *item = Py_None;
; 299  :     const char *action;
; 300  :     int rc;
; 301  : 
; 302  :     if (registry && !PyDict_Check(registry) && (registry != Py_None)) {

  00399	48 8b b4 24 80
	00 00 00	 mov	 rsi, QWORD PTR category$[rsp]
$LN121@warn_expli:

; 405  :         PyObject *show_fxn = get_warnings_attr("showwarning");

  003a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@EMKAPFPF@showwarning?$AA@
  003a8	e8 00 00 00 00	 call	 get_warnings_attr
  003ad	48 8b f8	 mov	 rdi, rax

; 406  :         if (show_fxn == NULL) {

  003b0	48 85 c0	 test	 rax, rax
  003b3	75 37		 jne	 SHORT $LN26@warn_expli

; 407  :             if (PyErr_Occurred())

  003b5	e8 00 00 00 00	 call	 PyErr_Occurred
  003ba	48 85 c0	 test	 rax, rax
  003bd	0f 85 9d 00 00
	00		 jne	 $cleanup$20506

; 408  :                 goto cleanup;
; 409  :             show_warning(filename, lineno, text, category, sourceline);

  003c3	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR sourceline$[rsp]
  003cb	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR lineno$[rsp]
  003d2	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  003da	4c 8b ce	 mov	 r9, rsi
  003dd	4d 8b c4	 mov	 r8, r12
  003e0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003e5	e8 00 00 00 00	 call	 show_warning

; 410  :         }
; 411  :         else {

  003ea	eb 63		 jmp	 SHORT $return_none$20523
$LN26@warn_expli:

; 412  :             PyObject *res;
; 413  : 
; 414  :             if (!PyCallable_Check(show_fxn)) {

  003ec	48 8b c8	 mov	 rcx, rax
  003ef	e8 00 00 00 00	 call	 PyCallable_Check
  003f4	85 c0		 test	 eax, eax
  003f6	75 1d		 jne	 SHORT $LN23@warn_expli

; 415  :                 PyErr_SetString(PyExc_TypeError,
; 416  :                                 "warnings.showwarning() must be set to a "
; 417  :                                 "callable");

  003f8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  003ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@CHJNEDCO@warnings?4showwarning?$CI?$CJ?5must?5be?5s@
  00406	e8 00 00 00 00	 call	 PyErr_SetString

; 418  :                 Py_DECREF(show_fxn);

  0040b	48 8b cf	 mov	 rcx, rdi
  0040e	e8 00 00 00 00	 call	 _Py_DecRef

; 419  :                 goto cleanup;

  00413	eb 4b		 jmp	 SHORT $cleanup$20506
$LN23@warn_expli:

; 420  :             }
; 421  : 
; 422  :             res = PyObject_CallFunctionObjArgs(show_fxn, message, category,
; 423  :                                                 filename, lineno_obj,
; 424  :                                                 NULL);

  00415	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR filename$[rsp]
  0041d	33 c0		 xor	 eax, eax
  0041f	4c 8b c6	 mov	 r8, rsi
  00422	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00427	48 8b d3	 mov	 rdx, rbx
  0042a	48 8b cf	 mov	 rcx, rdi
  0042d	4c 89 74 24 20	 mov	 QWORD PTR [rsp+32], r14
  00432	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs

; 425  :             Py_DECREF(show_fxn);

  00437	48 8b cf	 mov	 rcx, rdi
  0043a	48 8b f0	 mov	 rsi, rax
  0043d	e8 00 00 00 00	 call	 _Py_DecRef

; 426  :             Py_XDECREF(res);

  00442	48 85 f6	 test	 rsi, rsi
  00445	74 19		 je	 SHORT $cleanup$20506
  00447	48 8b ce	 mov	 rcx, rsi
  0044a	e8 00 00 00 00	 call	 _Py_DecRef
$return_none$20523:

; 427  :             if (res == NULL)
; 428  :                 goto cleanup;
; 429  :         }
; 430  :     }
; 431  :     else /* if (rc == -1) */
; 432  :         goto cleanup;
; 433  : 
; 434  :  return_none:
; 435  :     result = Py_None;

  0044f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00456	48 89 4c 24 30	 mov	 QWORD PTR result$1$[rsp], rcx

; 436  :     Py_INCREF(result);

  0045b	e8 00 00 00 00	 call	 _Py_IncRef
$cleanup$20506:

; 437  : 
; 438  :  cleanup:
; 439  :     Py_XDECREF(key);

  00460	e8 00 00 00 00	 call	 _Py_PXCTX
  00465	85 c0		 test	 eax, eax
  00467	75 5c		 jne	 SHORT $LN135@warn_expli
  00469	49 8b 45 20	 mov	 rax, QWORD PTR [r13+32]
  0046d	a8 20		 test	 al, 32			; 00000020H
  0046f	75 4c		 jne	 SHORT $LN80@warn_expli
  00471	84 c0		 test	 al, al
  00473	78 48		 js	 SHORT $LN80@warn_expli
  00475	a8 02		 test	 al, 2
  00477	75 4c		 jne	 SHORT $LN135@warn_expli
  00479	49 ff 4d 50	 dec	 QWORD PTR [r13+80]
  0047d	75 46		 jne	 SHORT $LN135@warn_expli
  0047f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00486	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0048d	4d 8b cd	 mov	 r9, r13
  00490	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00496	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0049e	e8 00 00 00 00	 call	 _PyParallel_Guard
  004a3	49 8b cd	 mov	 rcx, r13
  004a6	85 c0		 test	 eax, eax
  004a8	74 07		 je	 SHORT $LN85@warn_expli
  004aa	e8 00 00 00 00	 call	 _Px_Dealloc
  004af	eb 14		 jmp	 SHORT $LN135@warn_expli
$LN85@warn_expli:
  004b1	49 8b 45 58	 mov	 rax, QWORD PTR [r13+88]
  004b5	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  004bb	eb 08		 jmp	 SHORT $LN135@warn_expli
$LN80@warn_expli:
  004bd	49 8b cd	 mov	 rcx, r13
  004c0	e8 00 00 00 00	 call	 Px_DecRef
$LN135@warn_expli:
  004c5	4c 8b 6c 24 40	 mov	 r13, QWORD PTR [rsp+64]
$LN15@warn_expli:

; 440  :     Py_XDECREF(text);

  004ca	4d 85 e4	 test	 r12, r12
  004cd	74 68		 je	 SHORT $LN11@warn_expli
  004cf	e8 00 00 00 00	 call	 _Py_PXCTX
  004d4	85 c0		 test	 eax, eax
  004d6	75 5f		 jne	 SHORT $LN11@warn_expli
  004d8	49 8b 44 24 20	 mov	 rax, QWORD PTR [r12+32]
  004dd	a8 20		 test	 al, 32			; 00000020H
  004df	75 4e		 jne	 SHORT $LN91@warn_expli
  004e1	84 c0		 test	 al, al
  004e3	78 4a		 js	 SHORT $LN91@warn_expli
  004e5	a8 02		 test	 al, 2
  004e7	75 4e		 jne	 SHORT $LN11@warn_expli
  004e9	49 ff 4c 24 50	 dec	 QWORD PTR [r12+80]
  004ee	75 47		 jne	 SHORT $LN11@warn_expli
  004f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  004f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  004fe	4d 8b cc	 mov	 r9, r12
  00501	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00507	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0050f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00514	49 8b cc	 mov	 rcx, r12
  00517	85 c0		 test	 eax, eax
  00519	74 07		 je	 SHORT $LN96@warn_expli
  0051b	e8 00 00 00 00	 call	 _Px_Dealloc
  00520	eb 15		 jmp	 SHORT $LN11@warn_expli
$LN96@warn_expli:
  00522	49 8b 44 24 58	 mov	 rax, QWORD PTR [r12+88]
  00527	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0052d	eb 08		 jmp	 SHORT $LN11@warn_expli
$LN91@warn_expli:
  0052f	49 8b cc	 mov	 rcx, r12
  00532	e8 00 00 00 00	 call	 Px_DecRef
$LN11@warn_expli:

; 441  :     Py_XDECREF(lineno_obj);

  00537	4d 85 f6	 test	 r14, r14
  0053a	74 57		 je	 SHORT $LN132@warn_expli
  0053c	e8 00 00 00 00	 call	 _Py_PXCTX
  00541	85 c0		 test	 eax, eax
  00543	75 4e		 jne	 SHORT $LN132@warn_expli
  00545	49 8b 46 20	 mov	 rax, QWORD PTR [r14+32]
  00549	a8 20		 test	 al, 32			; 00000020H
  0054b	0f 85 ba 00 00
	00		 jne	 $LN102@warn_expli
  00551	84 c0		 test	 al, al
  00553	0f 88 b2 00 00
	00		 js	 $LN102@warn_expli
  00559	a8 02		 test	 al, 2
  0055b	75 36		 jne	 SHORT $LN132@warn_expli
  0055d	49 ff 4e 50	 dec	 QWORD PTR [r14+80]
  00561	75 30		 jne	 SHORT $LN132@warn_expli
  00563	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0056a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00571	4d 8b ce	 mov	 r9, r14
  00574	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0057a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00582	e8 00 00 00 00	 call	 _PyParallel_Guard
  00587	49 8b ce	 mov	 rcx, r14
  0058a	85 c0		 test	 eax, eax
  0058c	74 71		 je	 SHORT $LN107@warn_expli
  0058e	e8 00 00 00 00	 call	 _Px_Dealloc
$LN132@warn_expli:
  00593	4c 8b 64 24 30	 mov	 r12, QWORD PTR result$1$[rsp]
$LN7@warn_expli:

; 442  :     Py_DECREF(module);

  00598	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR module$[rsp]
  005a0	e8 00 00 00 00	 call	 _Py_DecRef

; 443  :     Py_XDECREF(message);

  005a5	48 85 db	 test	 rbx, rbx
  005a8	0f 84 86 00 00
	00		 je	 $LN3@warn_expli
  005ae	e8 00 00 00 00	 call	 _Py_PXCTX
  005b3	85 c0		 test	 eax, eax
  005b5	75 7d		 jne	 SHORT $LN3@warn_expli
  005b7	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  005bb	a8 20		 test	 al, 32			; 00000020H
  005bd	75 6d		 jne	 SHORT $LN113@warn_expli
  005bf	84 c0		 test	 al, al
  005c1	78 69		 js	 SHORT $LN113@warn_expli
  005c3	a8 02		 test	 al, 2
  005c5	75 6d		 jne	 SHORT $LN3@warn_expli
  005c7	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  005cb	75 67		 jne	 SHORT $LN3@warn_expli
  005cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  005d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  005db	4c 8b cb	 mov	 r9, rbx
  005de	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  005e4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  005ec	e8 00 00 00 00	 call	 _PyParallel_Guard
  005f1	48 8b cb	 mov	 rcx, rbx
  005f4	85 c0		 test	 eax, eax
  005f6	74 28		 je	 SHORT $LN118@warn_expli
  005f8	e8 00 00 00 00	 call	 _Px_Dealloc
  005fd	eb 35		 jmp	 SHORT $LN3@warn_expli

; 441  :     Py_XDECREF(lineno_obj);

$LN107@warn_expli:
  005ff	49 8b 46 58	 mov	 rax, QWORD PTR [r14+88]
  00603	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00609	eb 88		 jmp	 SHORT $LN132@warn_expli
$LN102@warn_expli:
  0060b	49 8b ce	 mov	 rcx, r14
  0060e	e8 00 00 00 00	 call	 Px_DecRef
  00613	e9 7b ff ff ff	 jmp	 $LN132@warn_expli
$LN128@warn_expli:

; 297  :     PyObject *key = NULL, *text = NULL, *result = NULL, *lineno_obj = NULL;

  00618	45 33 e4	 xor	 r12d, r12d
  0061b	e9 78 ff ff ff	 jmp	 $LN7@warn_expli

; 443  :     Py_XDECREF(message);

$LN118@warn_expli:
  00620	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00624	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0062a	eb 08		 jmp	 SHORT $LN3@warn_expli
$LN113@warn_expli:
  0062c	48 8b cb	 mov	 rcx, rbx
  0062f	e8 00 00 00 00	 call	 Px_DecRef
$LN3@warn_expli:

; 444  :     return result;  /* Py_None or NULL. */

  00634	49 8b c4	 mov	 rax, r12
$LN134@warn_expli:
  00637	48 8b b4 24 88
	00 00 00	 mov	 rsi, QWORD PTR [rsp+136]

; 445  : }

  0063f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00643	41 5f		 pop	 r15
  00645	41 5e		 pop	 r14
  00647	41 5c		 pop	 r12
  00649	5f		 pop	 rdi
  0064a	5d		 pop	 rbp
  0064b	5b		 pop	 rbx
  0064c	c3		 ret	 0
warn_explicit ENDP
_TEXT	ENDS
PUBLIC	??_C@_04GIEEDNNN@argv?$AA@			; `string'
PUBLIC	??_C@_08EMKMIFM@__main__?$AA@			; `string'
PUBLIC	??_C@_08PFHPBGLK@__file__?$AA@			; `string'
PUBLIC	??_C@_08OOGHEFMC@?$DMstring?$DO?$AA@		; `string'
PUBLIC	??_C@_0BE@BHHDGDE@__warningregistry__?$AA@	; `string'
EXTRN	PyList_GetItem:PROC
EXTRN	PyList_Size:PROC
EXTRN	_Py_ctype_tolower:BYTE
EXTRN	_PyUnicode_Ready:PROC
EXTRN	PyDict_SetItemString:PROC
EXTRN	PyDict_New:PROC
EXTRN	PyDict_GetItemString:PROC
EXTRN	PyFrame_GetLineNumber:PROC
EXTRN	PyThreadState_Get:PROC
EXTRN	_PyThreadState_Current:QWORD
EXTRN	_PyParallel_GetThreadState:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$setup_context DD imagerel setup_context
	DD	imagerel setup_context+1441
	DD	imagerel $unwind$setup_context
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$setup_context DD 0a1801H
	DD	0c6418H
	DD	0b5418H
	DD	0a3418H
	DD	0d0145218H
	DD	07010c012H
xdata	ENDS
;	COMDAT ??_C@_04GIEEDNNN@argv?$AA@
CONST	SEGMENT
??_C@_04GIEEDNNN@argv?$AA@ DB 'argv', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EMKMIFM@__main__?$AA@
CONST	SEGMENT
??_C@_08EMKMIFM@__main__?$AA@ DB '__main__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PFHPBGLK@__file__?$AA@
CONST	SEGMENT
??_C@_08PFHPBGLK@__file__?$AA@ DB '__file__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08OOGHEFMC@?$DMstring?$DO?$AA@
CONST	SEGMENT
??_C@_08OOGHEFMC@?$DMstring?$DO?$AA@ DB '<string>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BHHDGDE@__warningregistry__?$AA@
CONST	SEGMENT
??_C@_0BE@BHHDGDE@__warningregistry__?$AA@ DB '__warningregistry__', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\_warnings.c
CONST	ENDS
;	COMDAT setup_context
_TEXT	SEGMENT
stack_level$ = 80
filename$ = 88
lineno$ = 96
module$ = 104
registry$ = 112
setup_context PROC					; COMDAT

; 452  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00018	4d 8b e1	 mov	 r12, r9
  0001b	49 8b f0	 mov	 rsi, r8
  0001e	48 8b ea	 mov	 rbp, rdx
  00021	48 8b f9	 mov	 rdi, rcx

; 453  :     PyObject *globals;
; 454  : 
; 455  :     /* Setup globals and lineno. */
; 456  :     PyFrameObject *f = PyThreadState_GET()->frame;

  00024	e8 00 00 00 00	 call	 _Py_PXCTX
  00029	85 c0		 test	 eax, eax
  0002b	74 07		 je	 SHORT $LN39@setup_cont
  0002d	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00032	eb 07		 jmp	 SHORT $LN40@setup_cont
$LN39@setup_cont:
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
$LN40@setup_cont:
  0003b	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]

; 457  :     while (--stack_level > 0 && f != NULL)

  0003f	48 ff cf	 dec	 rdi
  00042	48 85 ff	 test	 rdi, rdi
  00045	7e 11		 jle	 SHORT $LN35@setup_cont
$LL36@setup_cont:
  00047	48 85 c9	 test	 rcx, rcx
  0004a	74 11		 je	 SHORT $LN123@setup_cont

; 458  :         f = f->f_back;

  0004c	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00050	48 ff cf	 dec	 rdi
  00053	48 85 ff	 test	 rdi, rdi
  00056	7f ef		 jg	 SHORT $LL36@setup_cont
$LN35@setup_cont:

; 459  : 
; 460  :     if (f == NULL) {

  00058	48 85 c9	 test	 rcx, rcx
  0005b	75 15		 jne	 SHORT $LN34@setup_cont
$LN123@setup_cont:

; 461  :         globals = PyThreadState_Get()->interp->sysdict;

  0005d	e8 00 00 00 00	 call	 PyThreadState_Get
  00062	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00066	48 8b 59 20	 mov	 rbx, QWORD PTR [rcx+32]

; 462  :         *lineno = 1;

  0006a	c7 06 01 00 00
	00		 mov	 DWORD PTR [rsi], 1

; 463  :     }
; 464  :     else {

  00070	eb 0e		 jmp	 SHORT $LN33@setup_cont
$LN34@setup_cont:

; 465  :         globals = f->f_globals;

  00072	48 8b 99 88 00
	00 00		 mov	 rbx, QWORD PTR [rcx+136]

; 466  :         *lineno = PyFrame_GetLineNumber(f);

  00079	e8 00 00 00 00	 call	 PyFrame_GetLineNumber
  0007e	89 06		 mov	 DWORD PTR [rsi], eax
$LN33@setup_cont:

; 467  :     }
; 468  : 
; 469  :     *module = NULL;
; 470  : 
; 471  :     /* Setup registry. */
; 472  :     assert(globals != NULL);
; 473  :     assert(PyDict_Check(globals));
; 474  :     *registry = PyDict_GetItemString(globals, "__warningregistry__");

  00080	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@BHHDGDE@__warningregistry__?$AA@
  00087	33 f6		 xor	 esi, esi
  00089	48 8b cb	 mov	 rcx, rbx
  0008c	49 89 34 24	 mov	 QWORD PTR [r12], rsi
  00090	e8 00 00 00 00	 call	 PyDict_GetItemString
  00095	4c 8b 6c 24 70	 mov	 r13, QWORD PTR registry$[rsp]
  0009a	48 8b f8	 mov	 rdi, rax
  0009d	49 89 45 00	 mov	 QWORD PTR [r13], rax

; 475  :     if (*registry == NULL) {

  000a1	48 85 c0	 test	 rax, rax
  000a4	0f 85 a5 00 00
	00		 jne	 $LN32@setup_cont

; 476  :         int rc;
; 477  : 
; 478  :         *registry = PyDict_New();

  000aa	e8 00 00 00 00	 call	 PyDict_New
  000af	49 89 45 00	 mov	 QWORD PTR [r13], rax

; 479  :         if (*registry == NULL)

  000b3	48 85 c0	 test	 rax, rax

; 480  :             return 0;

  000b6	0f 84 ca 04 00
	00		 je	 $LN3@setup_cont

; 481  : 
; 482  :          rc = PyDict_SetItemString(globals, "__warningregistry__", *registry);

  000bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@BHHDGDE@__warningregistry__?$AA@
  000c3	4c 8b c0	 mov	 r8, rax
  000c6	48 8b cb	 mov	 rcx, rbx
  000c9	e8 00 00 00 00	 call	 PyDict_SetItemString

; 483  :          if (rc < 0)

  000ce	85 c0		 test	 eax, eax
  000d0	0f 89 b4 00 00
	00		 jns	 $LN92@setup_cont
$handle_error$20641:

; 568  : 
; 569  :  handle_error:
; 570  :     /* filename not XDECREF'ed here as there is no way to jump here with a
; 571  :        dangling reference. */
; 572  :     Py_XDECREF(*registry);

  000d6	49 8b 7d 00	 mov	 rdi, QWORD PTR [r13]
  000da	48 85 ff	 test	 rdi, rdi
  000dd	0f 84 35 04 00
	00		 je	 $LN7@setup_cont
  000e3	e8 00 00 00 00	 call	 _Py_PXCTX
  000e8	85 c0		 test	 eax, eax
  000ea	0f 85 28 04 00
	00		 jne	 $LN7@setup_cont
  000f0	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  000f4	a8 20		 test	 al, 32			; 00000020H
  000f6	0f 85 14 04 00
	00		 jne	 $LN103@setup_cont
  000fc	84 c0		 test	 al, al
  000fe	0f 88 0c 04 00
	00		 js	 $LN103@setup_cont
  00104	a8 02		 test	 al, 2
  00106	0f 85 0c 04 00
	00		 jne	 $LN7@setup_cont
  0010c	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00110	0f 85 02 04 00
	00		 jne	 $LN7@setup_cont
  00116	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0011d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00124	4c 8b cf	 mov	 r9, rdi
  00127	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0012d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00135	e8 00 00 00 00	 call	 _PyParallel_Guard
  0013a	48 8b cf	 mov	 rcx, rdi
  0013d	85 c0		 test	 eax, eax
  0013f	0f 84 bf 03 00
	00		 je	 $LN108@setup_cont
  00145	e8 00 00 00 00	 call	 _Px_Dealloc
  0014a	e9 c9 03 00 00	 jmp	 $LN7@setup_cont
$LN32@setup_cont:

; 484  :             goto handle_error;
; 485  :     }
; 486  :     else
; 487  :         Py_INCREF(*registry);

  0014f	e8 00 00 00 00	 call	 _Py_PXCTX
  00154	85 c0		 test	 eax, eax
  00156	75 32		 jne	 SHORT $LN92@setup_cont
  00158	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0015f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00166	4c 8b cf	 mov	 r9, rdi
  00169	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0016f	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00177	e8 00 00 00 00	 call	 _PyParallel_Guard
  0017c	85 c0		 test	 eax, eax
  0017e	75 06		 jne	 SHORT $LN91@setup_cont
  00180	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  00184	74 04		 je	 SHORT $LN92@setup_cont
$LN91@setup_cont:
  00186	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN92@setup_cont:

; 488  : 
; 489  :     /* Setup module. */
; 490  :     *module = PyDict_GetItemString(globals, "__name__");

  0018a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08BHKDPDAA@__name__?$AA@
  00191	48 8b cb	 mov	 rcx, rbx
  00194	e8 00 00 00 00	 call	 PyDict_GetItemString
  00199	48 8b f8	 mov	 rdi, rax
  0019c	49 89 04 24	 mov	 QWORD PTR [r12], rax

; 491  :     if (*module == NULL) {

  001a0	48 85 c0	 test	 rax, rax
  001a3	75 1b		 jne	 SHORT $LN28@setup_cont

; 492  :         *module = PyUnicode_FromString("<string>");

  001a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08OOGHEFMC@?$DMstring?$DO?$AA@
  001ac	e8 00 00 00 00	 call	 PyUnicode_FromString
  001b1	49 89 04 24	 mov	 QWORD PTR [r12], rax

; 493  :         if (*module == NULL)

  001b5	48 85 c0	 test	 rax, rax
  001b8	0f 84 18 ff ff
	ff		 je	 $handle_error$20641

; 494  :             goto handle_error;
; 495  :     }
; 496  :     else

  001be	eb 3b		 jmp	 SHORT $LN96@setup_cont
$LN28@setup_cont:

; 497  :         Py_INCREF(*module);

  001c0	e8 00 00 00 00	 call	 _Py_PXCTX
  001c5	85 c0		 test	 eax, eax
  001c7	75 32		 jne	 SHORT $LN96@setup_cont
  001c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  001d7	4c 8b cf	 mov	 r9, rdi
  001da	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  001e0	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  001e8	e8 00 00 00 00	 call	 _PyParallel_Guard
  001ed	85 c0		 test	 eax, eax
  001ef	75 06		 jne	 SHORT $LN95@setup_cont
  001f1	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  001f5	74 04		 je	 SHORT $LN96@setup_cont
$LN95@setup_cont:
  001f7	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN96@setup_cont:

; 498  : 
; 499  :     /* Setup filename. */
; 500  :     *filename = PyDict_GetItemString(globals, "__file__");

  001fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08PFHPBGLK@__file__?$AA@
  00202	48 8b cb	 mov	 rcx, rbx
  00205	e8 00 00 00 00	 call	 PyDict_GetItemString
  0020a	48 89 45 00	 mov	 QWORD PTR [rbp], rax

; 501  :     if (*filename != NULL && PyUnicode_Check(*filename)) {

  0020e	48 85 c0	 test	 rax, rax
  00211	0f 84 04 02 00
	00		 je	 $LN25@setup_cont
  00217	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0021b	f7 81 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rcx+256], 268435456 ; 10000000H
  00225	0f 84 f0 01 00
	00		 je	 $LN25@setup_cont

; 502  :         Py_ssize_t len;
; 503  :         int kind;
; 504  :         void *data;
; 505  : 
; 506  :         if (PyUnicode_READY(*filename))

  0022b	f6 40 70 80	 test	 BYTE PTR [rax+112], 128	; 00000080H
  0022f	75 10		 jne	 SHORT $LN124@setup_cont
  00231	48 8b c8	 mov	 rcx, rax
  00234	e8 00 00 00 00	 call	 _PyUnicode_Ready
  00239	85 c0		 test	 eax, eax
  0023b	0f 85 95 fe ff
	ff		 jne	 $handle_error$20641
$LN124@setup_cont:

; 507  :             goto handle_error;
; 508  : 
; 509  :         len = PyUnicode_GetLength(*filename);

  00241	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
  00245	e8 00 00 00 00	 call	 PyUnicode_GetLength

; 510  :         kind = PyUnicode_KIND(*filename);

  0024a	48 8b 75 00	 mov	 rsi, QWORD PTR [rbp]
  0024e	8b 4e 70	 mov	 ecx, DWORD PTR [rsi+112]
  00251	48 8b d0	 mov	 rdx, rax
  00254	8b f9		 mov	 edi, ecx
  00256	c1 ef 02	 shr	 edi, 2
  00259	83 e7 07	 and	 edi, 7

; 511  :         data = PyUnicode_DATA(*filename);

  0025c	f6 c1 20	 test	 cl, 32			; 00000020H
  0025f	74 17		 je	 SHORT $LN45@setup_cont
  00261	f6 c1 40	 test	 cl, 64			; 00000040H
  00264	74 09		 je	 SHORT $LN43@setup_cont
  00266	48 8d 8e 80 00
	00 00		 lea	 rcx, QWORD PTR [rsi+128]
  0026d	eb 10		 jmp	 SHORT $LN46@setup_cont
$LN43@setup_cont:
  0026f	48 8d 8e a0 00
	00 00		 lea	 rcx, QWORD PTR [rsi+160]
  00276	eb 07		 jmp	 SHORT $LN46@setup_cont
$LN45@setup_cont:
  00278	48 8b 8e a0 00
	00 00		 mov	 rcx, QWORD PTR [rsi+160]
$LN46@setup_cont:

; 512  : 
; 513  : #define ascii_lower(c) ((c <= 127) ? Py_TOLOWER(c) : 0)
; 514  :         /* if filename.lower().endswith((".pyc", ".pyo")): */
; 515  :         if (len >= 4 &&
; 516  :             PyUnicode_READ(kind, data, len-4) == '.' &&
; 517  :             ascii_lower(PyUnicode_READ(kind, data, len-3)) == 'p' &&
; 518  :             ascii_lower(PyUnicode_READ(kind, data, len-2)) == 'y' &&
; 519  :             (ascii_lower(PyUnicode_READ(kind, data, len-1)) == 'c' ||
; 520  :                 ascii_lower(PyUnicode_READ(kind, data, len-1)) == 'o'))

  0027f	48 83 f8 04	 cmp	 rax, 4
  00283	0f 8c 80 01 00
	00		 jl	 $LN23@setup_cont
  00289	83 ff 01	 cmp	 edi, 1
  0028c	75 07		 jne	 SHORT $LN49@setup_cont
  0028e	0f b6 44 01 fc	 movzx	 eax, BYTE PTR [rcx+rax-4]
  00293	eb 10		 jmp	 SHORT $LN48@setup_cont
$LN49@setup_cont:
  00295	83 ff 02	 cmp	 edi, 2
  00298	75 07		 jne	 SHORT $LN47@setup_cont
  0029a	0f b7 44 41 f8	 movzx	 eax, WORD PTR [rcx+rax*2-8]
  0029f	eb 04		 jmp	 SHORT $LN48@setup_cont
$LN47@setup_cont:
  002a1	8b 44 81 f0	 mov	 eax, DWORD PTR [rcx+rax*4-16]
$LN48@setup_cont:
  002a5	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  002a8	0f 85 5b 01 00
	00		 jne	 $LN23@setup_cont
  002ae	83 ff 01	 cmp	 edi, 1
  002b1	75 07		 jne	 SHORT $LN53@setup_cont
  002b3	0f b6 44 11 fd	 movzx	 eax, BYTE PTR [rcx+rdx-3]
  002b8	eb 10		 jmp	 SHORT $LN52@setup_cont
$LN53@setup_cont:
  002ba	83 ff 02	 cmp	 edi, 2
  002bd	75 07		 jne	 SHORT $LN51@setup_cont
  002bf	0f b7 44 51 fa	 movzx	 eax, WORD PTR [rcx+rdx*2-6]
  002c4	eb 04		 jmp	 SHORT $LN52@setup_cont
$LN51@setup_cont:
  002c6	8b 44 91 f4	 mov	 eax, DWORD PTR [rcx+rdx*4-12]
$LN52@setup_cont:
  002ca	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  002cd	0f 87 36 01 00
	00		 ja	 $LN23@setup_cont
  002d3	83 ff 01	 cmp	 edi, 1
  002d6	75 07		 jne	 SHORT $LN57@setup_cont
  002d8	0f b6 44 11 fd	 movzx	 eax, BYTE PTR [rcx+rdx-3]
  002dd	eb 10		 jmp	 SHORT $LN56@setup_cont
$LN57@setup_cont:
  002df	83 ff 02	 cmp	 edi, 2
  002e2	75 07		 jne	 SHORT $LN55@setup_cont
  002e4	0f b7 44 51 fa	 movzx	 eax, WORD PTR [rcx+rdx*2-6]
  002e9	eb 04		 jmp	 SHORT $LN56@setup_cont
$LN55@setup_cont:
  002eb	8b 44 91 f4	 mov	 eax, DWORD PTR [rcx+rdx*4-12]
$LN56@setup_cont:
  002ef	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_ctype_tolower
  002f6	0f b6 c0	 movzx	 eax, al
  002f9	42 80 3c 00 70	 cmp	 BYTE PTR [rax+r8], 112	; 00000070H
  002fe	0f 85 05 01 00
	00		 jne	 $LN23@setup_cont
  00304	83 ff 01	 cmp	 edi, 1
  00307	75 07		 jne	 SHORT $LN63@setup_cont
  00309	0f b6 44 11 fe	 movzx	 eax, BYTE PTR [rcx+rdx-2]
  0030e	eb 10		 jmp	 SHORT $LN62@setup_cont
$LN63@setup_cont:
  00310	83 ff 02	 cmp	 edi, 2
  00313	75 07		 jne	 SHORT $LN61@setup_cont
  00315	0f b7 44 51 fc	 movzx	 eax, WORD PTR [rcx+rdx*2-4]
  0031a	eb 04		 jmp	 SHORT $LN62@setup_cont
$LN61@setup_cont:
  0031c	8b 44 91 f8	 mov	 eax, DWORD PTR [rcx+rdx*4-8]
$LN62@setup_cont:
  00320	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  00323	0f 87 e0 00 00
	00		 ja	 $LN23@setup_cont
  00329	83 ff 01	 cmp	 edi, 1
  0032c	75 07		 jne	 SHORT $LN67@setup_cont
  0032e	0f b6 44 11 fe	 movzx	 eax, BYTE PTR [rcx+rdx-2]
  00333	eb 10		 jmp	 SHORT $LN66@setup_cont
$LN67@setup_cont:
  00335	83 ff 02	 cmp	 edi, 2
  00338	75 07		 jne	 SHORT $LN65@setup_cont
  0033a	0f b7 44 51 fc	 movzx	 eax, WORD PTR [rcx+rdx*2-4]
  0033f	eb 04		 jmp	 SHORT $LN66@setup_cont
$LN65@setup_cont:
  00341	8b 44 91 f8	 mov	 eax, DWORD PTR [rcx+rdx*4-8]
$LN66@setup_cont:
  00345	0f b6 c0	 movzx	 eax, al
  00348	42 80 3c 00 79	 cmp	 BYTE PTR [rax+r8], 121	; 00000079H
  0034d	0f 85 b6 00 00
	00		 jne	 $LN23@setup_cont
  00353	83 ff 01	 cmp	 edi, 1
  00356	75 07		 jne	 SHORT $LN73@setup_cont
  00358	0f b6 44 11 ff	 movzx	 eax, BYTE PTR [rcx+rdx-1]
  0035d	eb 10		 jmp	 SHORT $LN72@setup_cont
$LN73@setup_cont:
  0035f	83 ff 02	 cmp	 edi, 2
  00362	75 07		 jne	 SHORT $LN71@setup_cont
  00364	0f b7 44 51 fe	 movzx	 eax, WORD PTR [rcx+rdx*2-2]
  00369	eb 04		 jmp	 SHORT $LN72@setup_cont
$LN71@setup_cont:
  0036b	8b 44 91 fc	 mov	 eax, DWORD PTR [rcx+rdx*4-4]
$LN72@setup_cont:
  0036f	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  00372	77 26		 ja	 SHORT $LN125@setup_cont
  00374	83 ff 01	 cmp	 edi, 1
  00377	75 07		 jne	 SHORT $LN77@setup_cont
  00379	0f b6 44 11 ff	 movzx	 eax, BYTE PTR [rcx+rdx-1]
  0037e	eb 10		 jmp	 SHORT $LN76@setup_cont
$LN77@setup_cont:
  00380	83 ff 02	 cmp	 edi, 2
  00383	75 07		 jne	 SHORT $LN75@setup_cont
  00385	0f b7 44 51 fe	 movzx	 eax, WORD PTR [rcx+rdx*2-2]
  0038a	eb 04		 jmp	 SHORT $LN76@setup_cont
$LN75@setup_cont:
  0038c	8b 44 91 fc	 mov	 eax, DWORD PTR [rcx+rdx*4-4]
$LN76@setup_cont:
  00390	0f b6 c0	 movzx	 eax, al
  00393	42 80 3c 00 63	 cmp	 BYTE PTR [rax+r8], 99	; 00000063H
  00398	74 47		 je	 SHORT $LN22@setup_cont
$LN125@setup_cont:
  0039a	83 ff 01	 cmp	 edi, 1
  0039d	75 07		 jne	 SHORT $LN83@setup_cont
  0039f	0f b6 44 11 ff	 movzx	 eax, BYTE PTR [rcx+rdx-1]
  003a4	eb 10		 jmp	 SHORT $LN82@setup_cont
$LN83@setup_cont:
  003a6	83 ff 02	 cmp	 edi, 2
  003a9	75 07		 jne	 SHORT $LN81@setup_cont
  003ab	0f b7 44 51 fe	 movzx	 eax, WORD PTR [rcx+rdx*2-2]
  003b0	eb 04		 jmp	 SHORT $LN82@setup_cont
$LN81@setup_cont:
  003b2	8b 44 91 fc	 mov	 eax, DWORD PTR [rcx+rdx*4-4]
$LN82@setup_cont:
  003b6	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  003b9	77 4e		 ja	 SHORT $LN23@setup_cont
  003bb	83 ff 01	 cmp	 edi, 1
  003be	75 07		 jne	 SHORT $LN87@setup_cont
  003c0	0f b6 44 11 ff	 movzx	 eax, BYTE PTR [rcx+rdx-1]
  003c5	eb 10		 jmp	 SHORT $LN86@setup_cont
$LN87@setup_cont:
  003c7	83 ff 02	 cmp	 edi, 2
  003ca	75 07		 jne	 SHORT $LN85@setup_cont
  003cc	0f b7 44 51 fe	 movzx	 eax, WORD PTR [rcx+rdx*2-2]
  003d1	eb 04		 jmp	 SHORT $LN86@setup_cont
$LN85@setup_cont:
  003d3	8b 44 91 fc	 mov	 eax, DWORD PTR [rcx+rdx*4-4]
$LN86@setup_cont:
  003d7	0f b6 c0	 movzx	 eax, al
  003da	42 80 3c 00 6f	 cmp	 BYTE PTR [rax+r8], 111	; 0000006fH
  003df	75 28		 jne	 SHORT $LN23@setup_cont
$LN22@setup_cont:

; 521  :         {
; 522  :             *filename = PyUnicode_Substring(*filename, 0,
; 523  :                                             PyUnicode_GET_LENGTH(*filename)-1);

  003e1	4c 8b 46 60	 mov	 r8, QWORD PTR [rsi+96]
  003e5	33 d2		 xor	 edx, edx
  003e7	48 8b ce	 mov	 rcx, rsi
  003ea	49 ff c8	 dec	 r8
  003ed	e8 00 00 00 00	 call	 PyUnicode_Substring
  003f2	48 89 45 00	 mov	 QWORD PTR [rbp], rax

; 524  :             if (*filename == NULL)

  003f6	48 85 c0	 test	 rax, rax
  003f9	0f 84 d7 fc ff
	ff		 je	 $handle_error$20641

; 564  :         }
; 565  :     }
; 566  : 
; 567  :     return 1;

  003ff	b8 01 00 00 00	 mov	 eax, 1
  00404	e9 7f 01 00 00	 jmp	 $LN37@setup_cont
$LN23@setup_cont:

; 525  :                 goto handle_error;
; 526  :         }
; 527  :         else
; 528  :             Py_INCREF(*filename);

  00409	48 8b ce	 mov	 rcx, rsi

; 563  :             Py_INCREF(*filename);

  0040c	e8 00 00 00 00	 call	 _Py_IncRef

; 564  :         }
; 565  :     }
; 566  : 
; 567  :     return 1;

  00411	b8 01 00 00 00	 mov	 eax, 1
  00416	e9 6d 01 00 00	 jmp	 $LN37@setup_cont
$LN25@setup_cont:

; 529  :     }
; 530  :     else {
; 531  :         const char *module_str = _PyUnicode_AsString(*module);

  0041b	49 8b 0c 24	 mov	 rcx, QWORD PTR [r12]
  0041f	e8 00 00 00 00	 call	 PyUnicode_AsUTF8

; 532  :         *filename = NULL;

  00424	48 89 75 00	 mov	 QWORD PTR [rbp], rsi

; 533  :         if (module_str == NULL)

  00428	48 85 c0	 test	 rax, rax
  0042b	0f 84 a5 fc ff
	ff		 je	 $handle_error$20641

; 534  :                 goto handle_error;
; 535  :         if (strcmp(module_str, "__main__") == 0) {

  00431	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_08EMKMIFM@__main__?$AA@
  00438	48 8b f0	 mov	 rsi, rax
  0043b	b9 09 00 00 00	 mov	 ecx, 9
  00440	f3 a6		 repe cmpsb
  00442	0f 85 8b 00 00
	00		 jne	 $LN126@setup_cont

; 536  :             PyObject *argv = PySys_GetObject("argv");

  00448	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GIEEDNNN@argv?$AA@
  0044f	e8 00 00 00 00	 call	 PySys_GetObject
  00454	48 8b f8	 mov	 rdi, rax

; 537  :             if (argv != NULL && PyList_Size(argv) > 0) {

  00457	48 85 c0	 test	 rax, rax
  0045a	0f 84 8a 00 00
	00		 je	 $LN16@setup_cont
  00460	48 8b c8	 mov	 rcx, rax
  00463	e8 00 00 00 00	 call	 PyList_Size
  00468	48 85 c0	 test	 rax, rax
  0046b	7e 7d		 jle	 SHORT $LN16@setup_cont

; 538  :                 int is_true;
; 539  :                 *filename = PyList_GetItem(argv, 0);

  0046d	33 d2		 xor	 edx, edx
  0046f	48 8b cf	 mov	 rcx, rdi
  00472	e8 00 00 00 00	 call	 PyList_GetItem

; 540  :                 Py_INCREF(*filename);

  00477	48 8b c8	 mov	 rcx, rax
  0047a	48 89 45 00	 mov	 QWORD PTR [rbp], rax
  0047e	e8 00 00 00 00	 call	 _Py_IncRef

; 541  :                 /* If sys.argv[0] is false, then use '__main__'. */
; 542  :                 is_true = PyObject_IsTrue(*filename);

  00483	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
  00487	e8 00 00 00 00	 call	 PyObject_IsTrue

; 543  :                 if (is_true < 0) {

  0048c	85 c0		 test	 eax, eax
  0048e	79 0e		 jns	 SHORT $LN128@setup_cont

; 544  :                     Py_DECREF(*filename);

  00490	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
  00494	e8 00 00 00 00	 call	 _Py_DecRef

; 545  :                     goto handle_error;

  00499	e9 38 fc ff ff	 jmp	 $handle_error$20641
$LN128@setup_cont:

; 546  :                 }
; 547  :                 else if (!is_true) {

  0049e	75 2c		 jne	 SHORT $LN10@setup_cont

; 548  :                     Py_DECREF(*filename);

  004a0	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
  004a4	e8 00 00 00 00	 call	 _Py_DecRef

; 549  :                     *filename = PyUnicode_FromString("__main__");

  004a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08EMKMIFM@__main__?$AA@
  004b0	e8 00 00 00 00	 call	 PyUnicode_FromString
  004b5	48 89 45 00	 mov	 QWORD PTR [rbp], rax

; 550  :                     if (*filename == NULL)

  004b9	48 85 c0	 test	 rax, rax
  004bc	0f 84 14 fc ff
	ff		 je	 $handle_error$20641

; 564  :         }
; 565  :     }
; 566  : 
; 567  :     return 1;

  004c2	b8 01 00 00 00	 mov	 eax, 1
  004c7	e9 bc 00 00 00	 jmp	 $LN37@setup_cont
$LN10@setup_cont:

; 558  :                         goto handle_error;
; 559  :             }
; 560  :         }
; 561  :         if (*filename == NULL) {

  004cc	48 83 7d 00 00	 cmp	 QWORD PTR [rbp], 0
  004d1	75 0d		 jne	 SHORT $LN9@setup_cont
$LN126@setup_cont:

; 562  :             *filename = *module;

  004d3	49 8b 0c 24	 mov	 rcx, QWORD PTR [r12]
  004d7	48 89 4d 00	 mov	 QWORD PTR [rbp], rcx

; 563  :             Py_INCREF(*filename);

  004db	e8 00 00 00 00	 call	 _Py_IncRef
$LN9@setup_cont:

; 564  :         }
; 565  :     }
; 566  : 
; 567  :     return 1;

  004e0	b8 01 00 00 00	 mov	 eax, 1
  004e5	e9 9e 00 00 00	 jmp	 $LN37@setup_cont
$LN16@setup_cont:

; 551  :                         goto handle_error;
; 552  :                 }
; 553  :             }
; 554  :             else {
; 555  :                 /* embedded interpreters don't have sys.argv, see bug #839151 */
; 556  :                 *filename = PyUnicode_FromString("__main__");

  004ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08EMKMIFM@__main__?$AA@
  004f1	e8 00 00 00 00	 call	 PyUnicode_FromString
  004f6	48 89 45 00	 mov	 QWORD PTR [rbp], rax

; 557  :                     if (*filename == NULL)

  004fa	48 85 c0	 test	 rax, rax
  004fd	75 e1		 jne	 SHORT $LN9@setup_cont
  004ff	e9 d2 fb ff ff	 jmp	 $handle_error$20641

; 568  : 
; 569  :  handle_error:
; 570  :     /* filename not XDECREF'ed here as there is no way to jump here with a
; 571  :        dangling reference. */
; 572  :     Py_XDECREF(*registry);

$LN108@setup_cont:
  00504	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00508	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0050e	eb 08		 jmp	 SHORT $LN7@setup_cont
$LN103@setup_cont:
  00510	48 8b cf	 mov	 rcx, rdi
  00513	e8 00 00 00 00	 call	 Px_DecRef
$LN7@setup_cont:

; 573  :     Py_XDECREF(*module);

  00518	49 8b 3c 24	 mov	 rdi, QWORD PTR [r12]
  0051c	48 85 ff	 test	 rdi, rdi
  0051f	74 65		 je	 SHORT $LN3@setup_cont
  00521	e8 00 00 00 00	 call	 _Py_PXCTX
  00526	85 c0		 test	 eax, eax
  00528	75 5c		 jne	 SHORT $LN3@setup_cont
  0052a	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  0052e	a8 20		 test	 al, 32			; 00000020H
  00530	75 4c		 jne	 SHORT $LN114@setup_cont
  00532	84 c0		 test	 al, al
  00534	78 48		 js	 SHORT $LN114@setup_cont
  00536	a8 02		 test	 al, 2
  00538	75 4c		 jne	 SHORT $LN3@setup_cont
  0053a	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  0053e	75 46		 jne	 SHORT $LN3@setup_cont
  00540	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00547	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0054e	4c 8b cf	 mov	 r9, rdi
  00551	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00557	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0055f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00564	48 8b cf	 mov	 rcx, rdi
  00567	85 c0		 test	 eax, eax
  00569	74 07		 je	 SHORT $LN119@setup_cont
  0056b	e8 00 00 00 00	 call	 _Px_Dealloc
  00570	eb 14		 jmp	 SHORT $LN3@setup_cont
$LN119@setup_cont:
  00572	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00576	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0057c	eb 08		 jmp	 SHORT $LN3@setup_cont
$LN114@setup_cont:
  0057e	48 8b cf	 mov	 rcx, rdi
  00581	e8 00 00 00 00	 call	 Px_DecRef
$LN3@setup_cont:

; 574  :     return 0;

  00586	33 c0		 xor	 eax, eax
$LN37@setup_cont:

; 575  : }

  00588	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0058d	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  00592	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  00597	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0059b	41 5d		 pop	 r13
  0059d	41 5c		 pop	 r12
  0059f	5f		 pop	 rdi
  005a0	c3		 ret	 0
setup_context ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@GGKAOOKA@category?5is?5not?5a?5subclass?5of?5Wa@ ; `string'
EXTRN	PyExc_UserWarning:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_category DD imagerel get_category
	DD	imagerel get_category+125
	DD	imagerel $unwind$get_category
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_category DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CG@GGKAOOKA@category?5is?5not?5a?5subclass?5of?5Wa@
CONST	SEGMENT
??_C@_0CG@GGKAOOKA@category?5is?5not?5a?5subclass?5of?5Wa@ DB 'category i'
	DB	's not a subclass of Warning', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT get_category
_TEXT	SEGMENT
message$ = 48
category$ = 56
get_category PROC					; COMDAT

; 579  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx

; 580  :     int rc;
; 581  : 
; 582  :     /* Get category. */
; 583  :     rc = PyObject_IsInstance(message, PyExc_Warning);

  0000d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_Warning
  00014	48 8b f9	 mov	 rdi, rcx
  00017	e8 00 00 00 00	 call	 PyObject_IsInstance

; 584  :     if (rc == -1)

  0001c	83 f8 ff	 cmp	 eax, -1

; 585  :         return NULL;

  0001f	74 41		 je	 SHORT $LN9@get_catego

; 586  : 
; 587  :     if (rc == 1)

  00021	83 f8 01	 cmp	 eax, 1
  00024	75 06		 jne	 SHORT $LN5@get_catego

; 588  :         category = (PyObject*)message->ob_type;

  00026	48 8b 5f 58	 mov	 rbx, QWORD PTR [rdi+88]
  0002a	eb 0b		 jmp	 SHORT $LN3@get_catego
$LN5@get_catego:

; 589  :     else if (category == NULL)

  0002c	48 85 db	 test	 rbx, rbx
  0002f	48 0f 44 1d 00
	00 00 00	 cmove	 rbx, QWORD PTR PyExc_UserWarning
$LN3@get_catego:

; 590  :         category = PyExc_UserWarning;
; 591  : 
; 592  :     /* Validate category. */
; 593  :     rc = PyObject_IsSubclass(category, PyExc_Warning);

  00037	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_Warning
  0003e	48 8b cb	 mov	 rcx, rbx
  00041	e8 00 00 00 00	 call	 PyObject_IsSubclass

; 594  :     if (rc == -1)

  00046	83 f8 ff	 cmp	 eax, -1

; 595  :         return NULL;

  00049	74 17		 je	 SHORT $LN9@get_catego

; 596  :     if (rc == 0) {

  0004b	85 c0		 test	 eax, eax
  0004d	75 20		 jne	 SHORT $LN1@get_catego

; 597  :         PyErr_SetString(PyExc_ValueError,
; 598  :                         "category is not a subclass of Warning");

  0004f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00056	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@GGKAOOKA@category?5is?5not?5a?5subclass?5of?5Wa@
  0005d	e8 00 00 00 00	 call	 PyErr_SetString
$LN9@get_catego:

; 599  :         return NULL;

  00062	33 c0		 xor	 eax, eax

; 603  : }

  00064	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00069	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006d	5f		 pop	 rdi
  0006e	c3		 ret	 0
$LN1@get_catego:

; 600  :     }
; 601  : 
; 602  :     return category;

  0006f	48 8b c3	 mov	 rax, rbx

; 603  : }

  00072	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00077	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007b	5f		 pop	 rdi
  0007c	c3		 ret	 0
get_category ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$do_warn DD imagerel do_warn
	DD	imagerel do_warn+191
	DD	imagerel $unwind$do_warn
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$do_warn DD 086c01H
	DD	0f646cH
	DD	0e5459H
	DD	010740dH
	DD	0c009b20dH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT do_warn
_TEXT	SEGMENT
filename$ = 64
registry$ = 72
module$ = 80
message$ = 112
category$ = 120
stack_level$ = 128
lineno$ = 136
do_warn	PROC						; COMDAT

; 607  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	49 89 7b 18	 mov	 QWORD PTR [r11+24], rdi
  00007	41 54		 push	 r12
  00009	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0000d	4c 8b e1	 mov	 r12, rcx

; 608  :     PyObject *filename, *module, *registry, *res;
; 609  :     int lineno;
; 610  : 
; 611  :     if (!setup_context(stack_level, &filename, &lineno, &module, &registry))

  00010	49 8d 4b e0	 lea	 rcx, QWORD PTR [r11-32]
  00014	49 8b c0	 mov	 rax, r8
  00017	48 8b fa	 mov	 rdi, rdx
  0001a	49 89 4b b8	 mov	 QWORD PTR [r11-72], rcx
  0001e	4d 8d 4b e8	 lea	 r9, QWORD PTR [r11-24]
  00022	4d 8d 43 20	 lea	 r8, QWORD PTR [r11+32]
  00026	49 8d 53 d8	 lea	 rdx, QWORD PTR [r11-40]
  0002a	48 8b c8	 mov	 rcx, rax
  0002d	e8 00 00 00 00	 call	 setup_context
  00032	85 c0		 test	 eax, eax
  00034	75 11		 jne	 SHORT $LN1@do_warn

; 612  :         return NULL;

  00036	33 c0		 xor	 eax, eax

; 620  : }

  00038	48 8b bc 24 80
	00 00 00	 mov	 rdi, QWORD PTR [rsp+128]
  00040	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00044	41 5c		 pop	 r12
  00046	c3		 ret	 0
$LN1@do_warn:

; 613  : 
; 614  :     res = warn_explicit(category, message, filename, lineno, module, registry,
; 615  :                         NULL);

  00047	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR lineno$[rsp]
  0004f	4c 8b 44 24 40	 mov	 r8, QWORD PTR filename$[rsp]
  00054	48 89 6c 24 70	 mov	 QWORD PTR [rsp+112], rbp
  00059	48 8b 6c 24 50	 mov	 rbp, QWORD PTR module$[rsp]
  0005e	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00067	48 89 74 24 78	 mov	 QWORD PTR [rsp+120], rsi
  0006c	48 8b 74 24 48	 mov	 rsi, QWORD PTR registry$[rsp]
  00071	49 8b d4	 mov	 rdx, r12
  00074	48 8b cf	 mov	 rcx, rdi
  00077	48 89 74 24 28	 mov	 QWORD PTR [rsp+40], rsi
  0007c	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  00081	e8 00 00 00 00	 call	 warn_explicit

; 616  :     Py_DECREF(filename);

  00086	48 8b 4c 24 40	 mov	 rcx, QWORD PTR filename$[rsp]
  0008b	48 8b f8	 mov	 rdi, rax
  0008e	e8 00 00 00 00	 call	 _Py_DecRef

; 617  :     Py_DECREF(registry);

  00093	48 8b ce	 mov	 rcx, rsi
  00096	e8 00 00 00 00	 call	 _Py_DecRef

; 618  :     Py_DECREF(module);

  0009b	48 8b cd	 mov	 rcx, rbp
  0009e	e8 00 00 00 00	 call	 _Py_DecRef
  000a3	48 8b 74 24 78	 mov	 rsi, QWORD PTR [rsp+120]
  000a8	48 8b 6c 24 70	 mov	 rbp, QWORD PTR [rsp+112]

; 619  :     return res;

  000ad	48 8b c7	 mov	 rax, rdi

; 620  : }

  000b0	48 8b bc 24 80
	00 00 00	 mov	 rdi, QWORD PTR [rsp+128]
  000b8	48 83 c4 60	 add	 rsp, 96			; 00000060H
  000bc	41 5c		 pop	 r12
  000be	c3		 ret	 0
do_warn	ENDP
_TEXT	ENDS
PUBLIC	??_C@_09IPOFGOPJ@O?$HMOn?3warn?$AA@		; `string'
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$warnings_warn DD imagerel warnings_warn
	DD	imagerel warnings_warn+137
	DD	imagerel $unwind$warnings_warn
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$warnings_warn DD 010701H
	DD	0a207H
xdata	ENDS
;	COMDAT ??_C@_09IPOFGOPJ@O?$HMOn?3warn?$AA@
CONST	SEGMENT
??_C@_09IPOFGOPJ@O?$HMOn?3warn?$AA@ DB 'O|On:warn', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT warnings_warn
_TEXT	SEGMENT
stack_level$ = 64
message$ = 72
self$ = 96
args$ = 104
kwds$ = 112
category$ = 120
warnings_warn PROC					; COMDAT

; 624  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 625  :     static char *kw_list[] = { "message", "category", "stacklevel", 0 };
; 626  :     PyObject *message, *category = NULL;
; 627  :     Py_ssize_t stack_level = 1;
; 628  : 
; 629  :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|On:warn", kw_list,
; 630  :                                      &message, &category, &stack_level))

  00007	49 8d 4b e8	 lea	 rcx, QWORD PTR [r11-24]
  0000b	49 8b c0	 mov	 rax, r8
  0000e	4c 8b d2	 mov	 r10, rdx
  00011	49 89 4b d8	 mov	 QWORD PTR [r11-40], rcx
  00015	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  00019	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kw_list@?1??warnings_warn@@9@9
  00020	49 89 4b d0	 mov	 QWORD PTR [r11-48], rcx
  00024	49 8d 4b f0	 lea	 rcx, QWORD PTR [r11-16]
  00028	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09IPOFGOPJ@O?$HMOn?3warn?$AA@
  0002f	49 89 4b c8	 mov	 QWORD PTR [r11-56], rcx
  00033	48 8b d0	 mov	 rdx, rax
  00036	49 8b ca	 mov	 rcx, r10
  00039	49 c7 43 20 00
	00 00 00	 mov	 QWORD PTR [r11+32], 0
  00041	49 c7 43 e8 01
	00 00 00	 mov	 QWORD PTR [r11-24], 1
  00049	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  0004e	85 c0		 test	 eax, eax
  00050	75 07		 jne	 SHORT $LN2@warnings_w
$LN5@warnings_w:

; 631  :         return NULL;

  00052	33 c0		 xor	 eax, eax

; 637  : }

  00054	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00058	c3		 ret	 0
$LN2@warnings_w:

; 632  : 
; 633  :     category = get_category(message, category);

  00059	48 8b 54 24 78	 mov	 rdx, QWORD PTR category$[rsp]
  0005e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR message$[rsp]
  00063	e8 00 00 00 00	 call	 get_category
  00068	48 89 44 24 78	 mov	 QWORD PTR category$[rsp], rax

; 634  :     if (category == NULL)

  0006d	48 85 c0	 test	 rax, rax

; 635  :         return NULL;

  00070	74 e0		 je	 SHORT $LN5@warnings_w

; 636  :     return do_warn(message, category, stack_level);

  00072	4c 8b 44 24 40	 mov	 r8, QWORD PTR stack_level$[rsp]
  00077	48 8b 4c 24 48	 mov	 rcx, QWORD PTR message$[rsp]
  0007c	48 8b d0	 mov	 rdx, rax
  0007f	e8 00 00 00 00	 call	 do_warn

; 637  : }

  00084	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00088	c3		 ret	 0
warnings_warn ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@PADOMILC@__loader__?$AA@		; `string'
PUBLIC	??_C@_0BH@FGPALGEL@OOOi?$HMOOO?3warn_explicit?$AA@ ; `string'
EXTRN	PyObject_CallMethodObjArgs:PROC
EXTRN	_PyObject_HasAttrId:PROC
EXTRN	_PyUnicode_FromId:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$warnings_warn_explicit DD imagerel warnings_warn_explicit
	DD	imagerel warnings_warn_explicit+137
	DD	imagerel $unwind$warnings_warn_explicit
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$warnings_warn_explicit DD imagerel warnings_warn_explicit+137
	DD	imagerel warnings_warn_explicit+446
	DD	imagerel $chain$3$warnings_warn_explicit
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$warnings_warn_explicit DD imagerel warnings_warn_explicit+446
	DD	imagerel warnings_warn_explicit+574
	DD	imagerel $chain$5$warnings_warn_explicit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$warnings_warn_explicit DD 080021H
	DD	012c400H
	DD	0187400H
	DD	0176400H
	DD	0163400H
	DD	imagerel warnings_warn_explicit
	DD	imagerel warnings_warn_explicit+137
	DD	imagerel $unwind$warnings_warn_explicit
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$warnings_warn_explicit DD 082021H
	DD	012c420H
	DD	0187418H
	DD	0176410H
	DD	0163408H
	DD	imagerel warnings_warn_explicit
	DD	imagerel warnings_warn_explicit+137
	DD	imagerel $unwind$warnings_warn_explicit
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$warnings_warn_explicit DD 041101H
	DD	0130111H
	DD	05004d006H
xdata	ENDS
;	COMDAT ??_C@_0L@PADOMILC@__loader__?$AA@
CONST	SEGMENT
??_C@_0L@PADOMILC@__loader__?$AA@ DB '__loader__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FGPALGEL@OOOi?$HMOOO?3warn_explicit?$AA@
CONST	SEGMENT
??_C@_0BH@FGPALGEL@OOOi?$HMOOO?3warn_explicit?$AA@ DB 'OOOi|OOO:warn_expl'
	DB	'icit', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT warnings_warn_explicit
_TEXT	SEGMENT
module_globals$ = 96
registry$ = 104
module$ = 112
filename$ = 120
message$ = 128
category$ = 136
self$ = 176
args$ = 184
kwds$ = 192
lineno$ = 200
warnings_warn_explicit PROC				; COMDAT

; 641  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	55		 push	 rbp
  00004	41 55		 push	 r13
  00006	49 8d 6b a1	 lea	 rbp, QWORD PTR [r11-95]
  0000a	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 642  :     static char *kwd_list[] = {"message", "category", "filename", "lineno",
; 643  :                                 "module", "registry", "module_globals", 0};
; 644  :     PyObject *message;
; 645  :     PyObject *category;
; 646  :     PyObject *filename;
; 647  :     int lineno;
; 648  :     PyObject *module = NULL;
; 649  :     PyObject *registry = NULL;
; 650  :     PyObject *module_globals = NULL;
; 651  : 
; 652  :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "OOOi|OOO:warn_explicit",
; 653  :                 kwd_list, &message, &category, &filename, &lineno, &module,
; 654  :                 &registry, &module_globals))

  00011	48 8d 4d 17	 lea	 rcx, QWORD PTR module_globals$[rbp-73]
  00015	49 8b c0	 mov	 rax, r8
  00018	4c 8b d2	 mov	 r10, rdx
  0001b	49 89 4b a8	 mov	 QWORD PTR [r11-88], rcx
  0001f	48 8d 4d 1f	 lea	 rcx, QWORD PTR registry$[rbp-73]
  00023	45 33 ed	 xor	 r13d, r13d
  00026	49 89 4b a0	 mov	 QWORD PTR [r11-96], rcx
  0002a	48 8d 4d 27	 lea	 rcx, QWORD PTR module$[rbp-73]
  0002e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwd_list@?1??warnings_warn_explicit@@9@9
  00035	49 89 4b 98	 mov	 QWORD PTR [r11-104], rcx
  00039	48 8d 4d 7f	 lea	 rcx, QWORD PTR lineno$[rbp-73]
  0003d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BH@FGPALGEL@OOOi?$HMOOO?3warn_explicit?$AA@
  00044	49 89 4b 90	 mov	 QWORD PTR [r11-112], rcx
  00048	48 8d 4d 2f	 lea	 rcx, QWORD PTR filename$[rbp-73]
  0004c	48 8b d0	 mov	 rdx, rax
  0004f	49 89 4b 88	 mov	 QWORD PTR [r11-120], rcx
  00053	48 8d 4d 3f	 lea	 rcx, QWORD PTR category$[rbp-73]
  00057	4c 89 6d 27	 mov	 QWORD PTR module$[rbp-73], r13
  0005b	49 89 4b 80	 mov	 QWORD PTR [r11-128], rcx
  0005f	48 8d 4d 37	 lea	 rcx, QWORD PTR message$[rbp-73]
  00063	4c 89 6d 1f	 mov	 QWORD PTR registry$[rbp-73], r13
  00067	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0006c	49 8b ca	 mov	 rcx, r10
  0006f	4c 89 6d 17	 mov	 QWORD PTR module_globals$[rbp-73], r13
  00073	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00078	85 c0		 test	 eax, eax
  0007a	75 0d		 jne	 SHORT $LN12@warnings_w@2

; 655  :         return NULL;

  0007c	33 c0		 xor	 eax, eax

; 718  : }

  0007e	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00085	41 5d		 pop	 r13
  00087	5d		 pop	 rbp
  00088	c3		 ret	 0
$LN12@warnings_w@2:
  00089	48 89 9c 24 b0
	00 00 00	 mov	 QWORD PTR [rsp+176], rbx
  00091	48 89 b4 24 b8
	00 00 00	 mov	 QWORD PTR [rsp+184], rsi
  00099	48 89 bc 24 c0
	00 00 00	 mov	 QWORD PTR [rsp+192], rdi
  000a1	4c 89 a4 24 90
	00 00 00	 mov	 QWORD PTR [rsp+144], r12

; 656  : 
; 657  :     if (module_globals) {

  000a9	4c 39 6d 17	 cmp	 QWORD PTR module_globals$[rbp-73], r13
  000ad	0f 84 b4 00 00
	00		 je	 $standard_call$20875

; 658  :         _Py_IDENTIFIER(get_source);
; 659  :         _Py_IDENTIFIER(splitlines);
; 660  :         PyObject *tmp;
; 661  :         PyObject *loader;
; 662  :         PyObject *module_name;
; 663  :         PyObject *source;
; 664  :         PyObject *source_list;
; 665  :         PyObject *source_line;
; 666  :         PyObject *returned;
; 667  : 
; 668  :         if ((tmp = _PyUnicode_FromId(&PyId_get_source)) == NULL)

  000b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000b9	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  000c2	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:?PyId_get_source@?2??warnings_warn_explicit@@9@9
  000c7	48 8b 3c c8	 mov	 rdi, QWORD PTR [rax+rcx*8]
  000cb	48 03 df	 add	 rbx, rdi
  000ce	48 8b cb	 mov	 rcx, rbx
  000d1	e8 00 00 00 00	 call	 _PyUnicode_FromId
  000d6	48 85 c0	 test	 rax, rax

; 669  :             return NULL;

  000d9	0f 84 1c 01 00
	00		 je	 $LN19@warnings_w@2

; 670  :         if ((tmp = _PyUnicode_FromId(&PyId_splitlines)) == NULL)

  000df	41 bc 00 00 00
	00		 mov	 r12d, OFFSET FLAT:?PyId_splitlines@?2??warnings_warn_explicit@@9@9
  000e5	4c 03 e7	 add	 r12, rdi
  000e8	49 8b cc	 mov	 rcx, r12
  000eb	e8 00 00 00 00	 call	 _PyUnicode_FromId
  000f0	48 85 c0	 test	 rax, rax

; 671  :             return NULL;

  000f3	0f 84 02 01 00
	00		 je	 $LN19@warnings_w@2

; 672  : 
; 673  :         /* Check/get the requisite pieces needed for the loader. */
; 674  :         loader = PyDict_GetItemString(module_globals, "__loader__");

  000f9	48 8b 4d 17	 mov	 rcx, QWORD PTR module_globals$[rbp-73]
  000fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@PADOMILC@__loader__?$AA@
  00104	e8 00 00 00 00	 call	 PyDict_GetItemString

; 675  :         module_name = PyDict_GetItemString(module_globals, "__name__");

  00109	48 8b 4d 17	 mov	 rcx, QWORD PTR module_globals$[rbp-73]
  0010d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08BHKDPDAA@__name__?$AA@
  00114	48 8b f8	 mov	 rdi, rax
  00117	e8 00 00 00 00	 call	 PyDict_GetItemString
  0011c	48 8b f0	 mov	 rsi, rax

; 676  : 
; 677  :         if (loader == NULL || module_name == NULL)

  0011f	48 85 ff	 test	 rdi, rdi
  00122	74 43		 je	 SHORT $standard_call$20875
  00124	48 85 c0	 test	 rax, rax
  00127	74 3e		 je	 SHORT $standard_call$20875

; 678  :             goto standard_call;
; 679  : 
; 680  :         /* Make sure the loader implements the optional get_source() method. */
; 681  :         if (!_PyObject_HasAttrId(loader, &PyId_get_source))

  00129	48 8b d3	 mov	 rdx, rbx
  0012c	48 8b cf	 mov	 rcx, rdi
  0012f	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00134	85 c0		 test	 eax, eax
  00136	74 2f		 je	 SHORT $standard_call$20875

; 682  :                 goto standard_call;
; 683  :         /* Call get_source() to get the source code. */
; 684  :         source = PyObject_CallMethodObjArgs(loader, PyId_get_source.object,
; 685  :                                             module_name, NULL);

  00138	48 8b 53 10	 mov	 rdx, QWORD PTR [rbx+16]
  0013c	45 33 c9	 xor	 r9d, r9d
  0013f	4c 8b c6	 mov	 r8, rsi
  00142	48 8b cf	 mov	 rcx, rdi
  00145	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  0014a	48 8b d8	 mov	 rbx, rax

; 686  :         if (!source)

  0014d	48 85 c0	 test	 rax, rax

; 687  :             return NULL;

  00150	0f 84 a5 00 00
	00		 je	 $LN19@warnings_w@2

; 688  :         else if (source == Py_None) {

  00156	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0015d	48 3b c1	 cmp	 rax, rcx
  00160	75 5c		 jne	 SHORT $LN3@warnings_w@2

; 689  :             Py_DECREF(Py_None);

  00162	e8 00 00 00 00	 call	 _Py_DecRef
$standard_call$20875:

; 713  :     }
; 714  : 
; 715  :  standard_call:
; 716  :     return warn_explicit(category, message, filename, lineno, module,
; 717  :                                 registry, NULL);

  00167	48 8b 45 1f	 mov	 rax, QWORD PTR registry$[rbp-73]
  0016b	44 8b 4d 7f	 mov	 r9d, DWORD PTR lineno$[rbp-73]
  0016f	4c 8b 45 2f	 mov	 r8, QWORD PTR filename$[rbp-73]
  00173	48 8b 55 37	 mov	 rdx, QWORD PTR message$[rbp-73]
  00177	48 8b 4d 3f	 mov	 rcx, QWORD PTR category$[rbp-73]
  0017b	4c 89 6c 24 30	 mov	 QWORD PTR [rsp+48], r13
  00180	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00185	48 8b 45 27	 mov	 rax, QWORD PTR module$[rbp-73]
  00189	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0018e	e8 00 00 00 00	 call	 warn_explicit
$LN18@warnings_w@2:
  00193	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR [rsp+192]
  0019b	48 8b b4 24 b8
	00 00 00	 mov	 rsi, QWORD PTR [rsp+184]
  001a3	48 8b 9c 24 b0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+176]
  001ab	4c 8b a4 24 90
	00 00 00	 mov	 r12, QWORD PTR [rsp+144]

; 718  : }

  001b3	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  001ba	41 5d		 pop	 r13
  001bc	5d		 pop	 rbp
  001bd	c3		 ret	 0
$LN3@warnings_w@2:

; 690  :             goto standard_call;
; 691  :         }
; 692  : 
; 693  :         /* Split the source into lines. */
; 694  :         source_list = PyObject_CallMethodObjArgs(source,
; 695  :                                                  PyId_splitlines.object,
; 696  :                                                  NULL);

  001be	49 8b 54 24 10	 mov	 rdx, QWORD PTR [r12+16]
  001c3	45 33 c0	 xor	 r8d, r8d
  001c6	48 8b c8	 mov	 rcx, rax
  001c9	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs

; 697  :         Py_DECREF(source);

  001ce	48 8b cb	 mov	 rcx, rbx
  001d1	48 8b f8	 mov	 rdi, rax
  001d4	e8 00 00 00 00	 call	 _Py_DecRef

; 698  :         if (!source_list)

  001d9	48 85 ff	 test	 rdi, rdi

; 699  :             return NULL;

  001dc	74 1d		 je	 SHORT $LN19@warnings_w@2

; 700  : 
; 701  :         /* Get the source line. */
; 702  :         source_line = PyList_GetItem(source_list, lineno-1);

  001de	8b 45 7f	 mov	 eax, DWORD PTR lineno$[rbp-73]
  001e1	48 8b cf	 mov	 rcx, rdi
  001e4	ff c8		 dec	 eax
  001e6	48 63 d0	 movsxd	 rdx, eax
  001e9	e8 00 00 00 00	 call	 PyList_GetItem

; 703  :         if (!source_line) {

  001ee	48 85 c0	 test	 rax, rax
  001f1	75 0c		 jne	 SHORT $LN1@warnings_w@2

; 704  :             Py_DECREF(source_list);

  001f3	48 8b cf	 mov	 rcx, rdi
  001f6	e8 00 00 00 00	 call	 _Py_DecRef
$LN19@warnings_w@2:

; 705  :             return NULL;

  001fb	33 c0		 xor	 eax, eax
  001fd	eb 94		 jmp	 SHORT $LN18@warnings_w@2
$LN1@warnings_w@2:

; 706  :         }
; 707  : 
; 708  :         /* Handle the warning. */
; 709  :         returned = warn_explicit(category, message, filename, lineno, module,
; 710  :                             registry, source_line);

  001ff	44 8b 4d 7f	 mov	 r9d, DWORD PTR lineno$[rbp-73]
  00203	4c 8b 45 2f	 mov	 r8, QWORD PTR filename$[rbp-73]
  00207	48 8b 55 37	 mov	 rdx, QWORD PTR message$[rbp-73]
  0020b	48 8b 4d 3f	 mov	 rcx, QWORD PTR category$[rbp-73]
  0020f	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00214	48 8b 45 1f	 mov	 rax, QWORD PTR registry$[rbp-73]
  00218	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0021d	48 8b 45 27	 mov	 rax, QWORD PTR module$[rbp-73]
  00221	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00226	e8 00 00 00 00	 call	 warn_explicit

; 711  :         Py_DECREF(source_list);

  0022b	48 8b cf	 mov	 rcx, rdi
  0022e	48 8b d8	 mov	 rbx, rax
  00231	e8 00 00 00 00	 call	 _Py_DecRef

; 712  :         return returned;

  00236	48 8b c3	 mov	 rax, rbx
  00239	e9 55 ff ff ff	 jmp	 $LN18@warnings_w@2
warnings_warn_explicit ENDP
_TEXT	ENDS
EXTRN	PyExc_RuntimeWarning:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$warn_unicode DD imagerel warn_unicode
	DD	imagerel warn_unicode+57
	DD	imagerel $unwind$warn_unicode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$warn_unicode DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT warn_unicode
_TEXT	SEGMENT
category$ = 48
message$ = 56
stack_level$ = 64
warn_unicode PROC					; COMDAT

; 726  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 727  :     PyObject *res;
; 728  : 
; 729  :     if (category == NULL)

  00004	48 85 c9	 test	 rcx, rcx
  00007	48 8b c2	 mov	 rax, rdx
  0000a	48 0f 44 0d 00
	00 00 00	 cmove	 rcx, QWORD PTR PyExc_RuntimeWarning

; 730  :         category = PyExc_RuntimeWarning;
; 731  : 
; 732  :     res = do_warn(message, category, stack_level);

  00012	48 8b d1	 mov	 rdx, rcx
  00015	48 8b c8	 mov	 rcx, rax
  00018	e8 00 00 00 00	 call	 do_warn

; 733  :     if (res == NULL)

  0001d	48 85 c0	 test	 rax, rax
  00020	75 08		 jne	 SHORT $LN1@warn_unico

; 734  :         return -1;

  00022	83 c8 ff	 or	 eax, -1

; 738  : }

  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
$LN1@warn_unico:

; 735  :     Py_DECREF(res);

  0002a	48 8b c8	 mov	 rcx, rax
  0002d	e8 00 00 00 00	 call	 _Py_DecRef

; 736  : 
; 737  :     return 0;

  00032	33 c0		 xor	 eax, eax

; 738  : }

  00034	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00038	c3		 ret	 0
warn_unicode ENDP
_TEXT	ENDS
PUBLIC	PyErr_WarnFormat
EXTRN	PyUnicode_FromFormatV:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_WarnFormat DD imagerel $LN5
	DD	imagerel $LN5+89
	DD	imagerel $unwind$PyErr_WarnFormat
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_WarnFormat DD 041101H
	DD	0700d3211H
	DD	0300b600cH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyErr_WarnFormat
_TEXT	SEGMENT
category$ = 64
stack_level$ = 72
format$ = 80
PyErr_WarnFormat PROC					; COMDAT

; 743  : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  0000a	53		 push	 rbx
  0000b	56		 push	 rsi
  0000c	57		 push	 rdi
  0000d	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00011	48 8b da	 mov	 rbx, rdx
  00014	48 8b f1	 mov	 rsi, rcx

; 744  :     int ret;
; 745  :     PyObject *message;
; 746  :     va_list vargs;
; 747  : 
; 748  : #ifdef HAVE_STDARG_PROTOTYPES
; 749  :     va_start(vargs, format);

  00017	48 8d 54 24 58	 lea	 rdx, QWORD PTR format$[rsp+8]

; 750  : #else
; 751  :     va_start(vargs);
; 752  : #endif
; 753  :     message = PyUnicode_FromFormatV(format, vargs);

  0001c	49 8b c8	 mov	 rcx, r8
  0001f	e8 00 00 00 00	 call	 PyUnicode_FromFormatV
  00024	48 8b f8	 mov	 rdi, rax

; 754  :     if (message != NULL) {

  00027	48 85 c0	 test	 rax, rax
  0002a	74 22		 je	 SHORT $LN2@PyErr_Warn

; 755  :         ret = warn_unicode(category, message, stack_level);

  0002c	4c 8b c3	 mov	 r8, rbx
  0002f	48 8b d0	 mov	 rdx, rax
  00032	48 8b ce	 mov	 rcx, rsi
  00035	e8 00 00 00 00	 call	 warn_unicode

; 756  :         Py_DECREF(message);

  0003a	48 8b cf	 mov	 rcx, rdi
  0003d	8b d8		 mov	 ebx, eax
  0003f	e8 00 00 00 00	 call	 _Py_DecRef

; 757  :     }
; 758  :     else
; 759  :         ret = -1;
; 760  :     va_end(vargs);
; 761  :     return ret;

  00044	8b c3		 mov	 eax, ebx

; 762  : }

  00046	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004a	5f		 pop	 rdi
  0004b	5e		 pop	 rsi
  0004c	5b		 pop	 rbx
  0004d	c3		 ret	 0
$LN2@PyErr_Warn:

; 757  :     }
; 758  :     else
; 759  :         ret = -1;
; 760  :     va_end(vargs);
; 761  :     return ret;

  0004e	83 c8 ff	 or	 eax, -1

; 762  : }

  00051	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00055	5f		 pop	 rdi
  00056	5e		 pop	 rsi
  00057	5b		 pop	 rbx
  00058	c3		 ret	 0
PyErr_WarnFormat ENDP
_TEXT	ENDS
PUBLIC	PyErr_WarnEx
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_WarnEx DD imagerel $LN4
	DD	imagerel $LN4+98
	DD	imagerel $unwind$PyErr_WarnEx
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_WarnEx DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyErr_WarnEx
_TEXT	SEGMENT
category$ = 48
text$ = 56
stack_level$ = 64
PyErr_WarnEx PROC					; COMDAT

; 766  : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b f1	 mov	 rsi, rcx

; 767  :     int ret;
; 768  :     PyObject *message = PyUnicode_FromString(text);

  00012	48 8b ca	 mov	 rcx, rdx
  00015	49 8b d8	 mov	 rbx, r8
  00018	e8 00 00 00 00	 call	 PyUnicode_FromString
  0001d	48 8b f8	 mov	 rdi, rax

; 769  :     if (message == NULL)

  00020	48 85 c0	 test	 rax, rax
  00023	75 13		 jne	 SHORT $LN1@PyErr_Warn@2

; 770  :         return -1;

  00025	83 c8 ff	 or	 eax, -1

; 773  :     return ret;
; 774  : }

  00028	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00032	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00036	5f		 pop	 rdi
  00037	c3		 ret	 0
$LN1@PyErr_Warn@2:

; 771  :     ret = warn_unicode(category, message, stack_level);

  00038	4c 8b c3	 mov	 r8, rbx
  0003b	48 8b d0	 mov	 rdx, rax
  0003e	48 8b ce	 mov	 rcx, rsi
  00041	e8 00 00 00 00	 call	 warn_unicode

; 772  :     Py_DECREF(message);

  00046	48 8b cf	 mov	 rcx, rdi
  00049	8b d8		 mov	 ebx, eax
  0004b	e8 00 00 00 00	 call	 _Py_DecRef

; 773  :     return ret;
; 774  : }

  00050	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00055	8b c3		 mov	 eax, ebx
  00057	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00060	5f		 pop	 rdi
  00061	c3		 ret	 0
PyErr_WarnEx ENDP
_TEXT	ENDS
PUBLIC	PyErr_Warn
; Function compile flags: /Ogtpy
;	COMDAT PyErr_Warn
_TEXT	SEGMENT
category$ = 8
text$ = 16
PyErr_Warn PROC						; COMDAT

; 784  :     return PyErr_WarnEx(category, text, 1);

  00000	41 b8 01 00 00
	00		 mov	 r8d, 1

; 785  : }

  00006	e9 00 00 00 00	 jmp	 PyErr_WarnEx
PyErr_Warn ENDP
_TEXT	ENDS
PUBLIC	PyErr_WarnExplicit
EXTRN	PyUnicode_DecodeFSDefault:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyErr_WarnExplicit DD imagerel $LN58
	DD	imagerel $LN58+510
	DD	imagerel $unwind$PyErr_WarnExplicit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_WarnExplicit DD 0a1801H
	DD	0e6418H
	DD	0d5418H
	DD	0c3418H
	DD	0d0147218H
	DD	07010c012H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\_warnings.c
xdata	ENDS
;	COMDAT PyErr_WarnExplicit
_TEXT	SEGMENT
category$ = 96
text$ = 104
filename_str$ = 112
lineno$ = 120
module_str$ = 128
registry$ = 136
PyErr_WarnExplicit PROC					; COMDAT

; 792  : {

$LN58:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00018	4c 8b e1	 mov	 r12, rcx

; 793  :     PyObject *res;
; 794  :     PyObject *message = PyUnicode_FromString(text);

  0001b	48 8b ca	 mov	 rcx, rdx
  0001e	45 8b e9	 mov	 r13d, r9d
  00021	49 8b d8	 mov	 rbx, r8
  00024	e8 00 00 00 00	 call	 PyUnicode_FromString

; 795  :     PyObject *filename = PyUnicode_DecodeFSDefault(filename_str);

  00029	48 8b cb	 mov	 rcx, rbx
  0002c	48 8b e8	 mov	 rbp, rax
  0002f	e8 00 00 00 00	 call	 PyUnicode_DecodeFSDefault

; 796  :     PyObject *module = NULL;

  00034	33 ff		 xor	 edi, edi

; 797  :     int ret = -1;

  00036	83 ce ff	 or	 esi, -1
  00039	48 8b d8	 mov	 rbx, rax

; 798  : 
; 799  :     if (message == NULL || filename == NULL)

  0003c	48 85 ed	 test	 rbp, rbp
  0003f	0f 84 34 01 00
	00		 je	 $LN7@PyErr_Warn@3
  00045	48 85 c0	 test	 rax, rax
  00048	74 60		 je	 SHORT $exit$20963

; 800  :         goto exit;
; 801  :     if (module_str != NULL) {

  0004a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR module_str$[rsp]
  00052	48 85 c9	 test	 rcx, rcx
  00055	74 0d		 je	 SHORT $LN15@PyErr_Warn@3

; 802  :         module = PyUnicode_FromString(module_str);

  00057	e8 00 00 00 00	 call	 PyUnicode_FromString
  0005c	48 8b f8	 mov	 rdi, rax

; 803  :             if (module == NULL)

  0005f	48 85 c0	 test	 rax, rax
  00062	74 46		 je	 SHORT $exit$20963
$LN15@PyErr_Warn@3:

; 804  :                 goto exit;
; 805  :     }
; 806  : 
; 807  :     if (category == NULL)
; 808  :         category = PyExc_RuntimeWarning;
; 809  :     res = warn_explicit(category, message, filename, lineno, module, registry,
; 810  :                         NULL);

  00064	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR registry$[rsp]
  0006c	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00075	4d 85 e4	 test	 r12, r12
  00078	4c 0f 44 25 00
	00 00 00	 cmove	 r12, QWORD PTR PyExc_RuntimeWarning
  00080	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00085	45 8b cd	 mov	 r9d, r13d
  00088	4c 8b c3	 mov	 r8, rbx
  0008b	48 8b d5	 mov	 rdx, rbp
  0008e	49 8b cc	 mov	 rcx, r12
  00091	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00096	e8 00 00 00 00	 call	 warn_explicit

; 811  :     if (res == NULL)

  0009b	48 85 c0	 test	 rax, rax
  0009e	74 0a		 je	 SHORT $exit$20963

; 812  :         goto exit;
; 813  :     Py_DECREF(res);

  000a0	48 8b c8	 mov	 rcx, rax
  000a3	e8 00 00 00 00	 call	 _Py_DecRef

; 814  :     ret = 0;

  000a8	33 f6		 xor	 esi, esi
$exit$20963:

; 815  : 
; 816  :  exit:
; 817  :     Py_XDECREF(message);

  000aa	e8 00 00 00 00	 call	 _Py_PXCTX
  000af	85 c0		 test	 eax, eax
  000b1	75 5c		 jne	 SHORT $LN11@PyErr_Warn@3
  000b3	48 8b 45 20	 mov	 rax, QWORD PTR [rbp+32]
  000b7	a8 20		 test	 al, 32			; 00000020H
  000b9	75 4c		 jne	 SHORT $LN25@PyErr_Warn@3
  000bb	84 c0		 test	 al, al
  000bd	78 48		 js	 SHORT $LN25@PyErr_Warn@3
  000bf	a8 02		 test	 al, 2
  000c1	75 4c		 jne	 SHORT $LN11@PyErr_Warn@3
  000c3	48 ff 4d 50	 dec	 QWORD PTR [rbp+80]
  000c7	75 46		 jne	 SHORT $LN11@PyErr_Warn@3
  000c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000d7	4c 8b cd	 mov	 r9, rbp
  000da	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000e0	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000e8	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ed	48 8b cd	 mov	 rcx, rbp
  000f0	85 c0		 test	 eax, eax
  000f2	74 07		 je	 SHORT $LN30@PyErr_Warn@3
  000f4	e8 00 00 00 00	 call	 _Px_Dealloc
  000f9	eb 14		 jmp	 SHORT $LN11@PyErr_Warn@3
$LN30@PyErr_Warn@3:
  000fb	48 8b 45 58	 mov	 rax, QWORD PTR [rbp+88]
  000ff	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00105	eb 08		 jmp	 SHORT $LN11@PyErr_Warn@3
$LN25@PyErr_Warn@3:
  00107	48 8b cd	 mov	 rcx, rbp
  0010a	e8 00 00 00 00	 call	 Px_DecRef
$LN11@PyErr_Warn@3:

; 818  :     Py_XDECREF(module);

  0010f	48 85 ff	 test	 rdi, rdi
  00112	74 65		 je	 SHORT $LN7@PyErr_Warn@3
  00114	e8 00 00 00 00	 call	 _Py_PXCTX
  00119	85 c0		 test	 eax, eax
  0011b	75 5c		 jne	 SHORT $LN7@PyErr_Warn@3
  0011d	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00121	a8 20		 test	 al, 32			; 00000020H
  00123	75 4c		 jne	 SHORT $LN36@PyErr_Warn@3
  00125	84 c0		 test	 al, al
  00127	78 48		 js	 SHORT $LN36@PyErr_Warn@3
  00129	a8 02		 test	 al, 2
  0012b	75 4c		 jne	 SHORT $LN7@PyErr_Warn@3
  0012d	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00131	75 46		 jne	 SHORT $LN7@PyErr_Warn@3
  00133	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0013a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00141	4c 8b cf	 mov	 r9, rdi
  00144	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0014a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00152	e8 00 00 00 00	 call	 _PyParallel_Guard
  00157	48 8b cf	 mov	 rcx, rdi
  0015a	85 c0		 test	 eax, eax
  0015c	74 07		 je	 SHORT $LN41@PyErr_Warn@3
  0015e	e8 00 00 00 00	 call	 _Px_Dealloc
  00163	eb 14		 jmp	 SHORT $LN7@PyErr_Warn@3
$LN41@PyErr_Warn@3:
  00165	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00169	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0016f	eb 08		 jmp	 SHORT $LN7@PyErr_Warn@3
$LN36@PyErr_Warn@3:
  00171	48 8b cf	 mov	 rcx, rdi
  00174	e8 00 00 00 00	 call	 Px_DecRef
$LN7@PyErr_Warn@3:

; 819  :     Py_XDECREF(filename);

  00179	48 85 db	 test	 rbx, rbx
  0017c	74 65		 je	 SHORT $LN56@PyErr_Warn@3
  0017e	e8 00 00 00 00	 call	 _Py_PXCTX
  00183	85 c0		 test	 eax, eax
  00185	75 5c		 jne	 SHORT $LN56@PyErr_Warn@3
  00187	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0018b	a8 20		 test	 al, 32			; 00000020H
  0018d	75 4c		 jne	 SHORT $LN47@PyErr_Warn@3
  0018f	84 c0		 test	 al, al
  00191	78 48		 js	 SHORT $LN47@PyErr_Warn@3
  00193	a8 02		 test	 al, 2
  00195	75 4c		 jne	 SHORT $LN56@PyErr_Warn@3
  00197	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0019b	75 46		 jne	 SHORT $LN56@PyErr_Warn@3
  0019d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  001ab	4c 8b cb	 mov	 r9, rbx
  001ae	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001b4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001bc	e8 00 00 00 00	 call	 _PyParallel_Guard
  001c1	48 8b cb	 mov	 rcx, rbx
  001c4	85 c0		 test	 eax, eax
  001c6	74 07		 je	 SHORT $LN52@PyErr_Warn@3
  001c8	e8 00 00 00 00	 call	 _Px_Dealloc
  001cd	eb 14		 jmp	 SHORT $LN56@PyErr_Warn@3
$LN52@PyErr_Warn@3:
  001cf	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001d3	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001d9	eb 08		 jmp	 SHORT $LN56@PyErr_Warn@3
$LN47@PyErr_Warn@3:
  001db	48 8b cb	 mov	 rcx, rbx
  001de	e8 00 00 00 00	 call	 Px_DecRef
$LN56@PyErr_Warn@3:

; 820  :     return ret;
; 821  : }

  001e3	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  001e8	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  001ed	8b c6		 mov	 eax, esi
  001ef	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
  001f4	48 83 c4 40	 add	 rsp, 64			; 00000040H
  001f8	41 5d		 pop	 r13
  001fa	41 5c		 pop	 r12
  001fc	5f		 pop	 rdi
  001fd	c3		 ret	 0
PyErr_WarnExplicit ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@JJKOFCBF@unknown?5action?$AA@		; `string'
EXTRN	Py_FatalError:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$create_filter DD imagerel create_filter
	DD	imagerel create_filter+391
	DD	imagerel $unwind$create_filter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$create_filter DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
;	COMDAT ??_C@_0P@JJKOFCBF@unknown?5action?$AA@
CONST	SEGMENT
??_C@_0P@JJKOFCBF@unknown?5action?$AA@ DB 'unknown action', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT create_filter
_TEXT	SEGMENT
category$ = 64
action$ = 72
create_filter PROC					; COMDAT

; 843  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00014	48 8b e9	 mov	 rbp, rcx

; 844  :     static PyObject *ignore_str = NULL;
; 845  :     static PyObject *error_str = NULL;
; 846  :     static PyObject *default_str = NULL;
; 847  :     static PyObject *always_str = NULL;
; 848  :     PyObject *action_obj = NULL;
; 849  :     PyObject *lineno, *result;
; 850  : 
; 851  :     if (!strcmp(action, "ignore")) {

  00017	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_06GDPEBLPA@ignore?$AA@
  0001e	48 8b f2	 mov	 rsi, rdx
  00021	b9 07 00 00 00	 mov	 ecx, 7
  00026	33 db		 xor	 ebx, ebx
  00028	f3 a6		 repe cmpsb
  0002a	75 36		 jne	 SHORT $LN17@create_fil

; 852  :         if (ignore_str == NULL) {

  0002c	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR ?ignore_str@?1??create_filter@@9@9
  00033	48 85 db	 test	 rbx, rbx
  00036	0f 85 f4 00 00
	00		 jne	 $LN2@create_fil

; 853  :             ignore_str = PyUnicode_InternFromString("ignore");

  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06GDPEBLPA@ignore?$AA@
  00043	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00048	48 8b d8	 mov	 rbx, rax
  0004b	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?ignore_str@?1??create_filter@@9@9, rax

; 854  :             if (ignore_str == NULL)

  00052	48 85 c0	 test	 rax, rax
  00055	0f 85 d5 00 00
	00		 jne	 $LN2@create_fil
$LN20@create_fil:

; 855  :                 return NULL;

  0005b	33 c0		 xor	 eax, eax
  0005d	e9 10 01 00 00	 jmp	 $LN18@create_fil
$LN17@create_fil:

; 856  :         }
; 857  :         action_obj = ignore_str;
; 858  :     }
; 859  :     else if (!strcmp(action, "error")) {

  00062	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_05KKCIMGE@error?$AA@
  00069	48 8b f2	 mov	 rsi, rdx
  0006c	b9 06 00 00 00	 mov	 ecx, 6
  00071	f3 a6		 repe cmpsb
  00073	75 34		 jne	 SHORT $LN13@create_fil

; 860  :         if (error_str == NULL) {

  00075	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR ?error_str@?1??create_filter@@9@9
  0007c	48 85 db	 test	 rbx, rbx
  0007f	0f 85 ab 00 00
	00		 jne	 $LN2@create_fil

; 861  :             error_str = PyUnicode_InternFromString("error");

  00085	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05KKCIMGE@error?$AA@
  0008c	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00091	48 8b d8	 mov	 rbx, rax
  00094	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?error_str@?1??create_filter@@9@9, rax

; 862  :             if (error_str == NULL)

  0009b	48 85 c0	 test	 rax, rax
  0009e	0f 85 8c 00 00
	00		 jne	 $LN2@create_fil

; 863  :                 return NULL;

  000a4	e9 c9 00 00 00	 jmp	 $LN18@create_fil
$LN13@create_fil:

; 864  :         }
; 865  :         action_obj = error_str;
; 866  :     }
; 867  :     else if (!strcmp(action, "default")) {

  000a9	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_07DLHCIBDH@default?$AA@
  000b0	48 8b f2	 mov	 rsi, rdx
  000b3	b9 08 00 00 00	 mov	 ecx, 8
  000b8	f3 a6		 repe cmpsb
  000ba	75 2c		 jne	 SHORT $LN9@create_fil

; 868  :         if (default_str == NULL) {

  000bc	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR ?default_str@?1??create_filter@@9@9
  000c3	48 85 db	 test	 rbx, rbx
  000c6	75 68		 jne	 SHORT $LN2@create_fil

; 869  :             default_str = PyUnicode_InternFromString("default");

  000c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07DLHCIBDH@default?$AA@
  000cf	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  000d4	48 8b d8	 mov	 rbx, rax
  000d7	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?default_str@?1??create_filter@@9@9, rax

; 870  :             if (default_str == NULL)

  000de	48 85 c0	 test	 rax, rax
  000e1	75 4d		 jne	 SHORT $LN2@create_fil

; 871  :                 return NULL;

  000e3	e9 8a 00 00 00	 jmp	 $LN18@create_fil
$LN9@create_fil:

; 872  :         }
; 873  :         action_obj = default_str;
; 874  :     }
; 875  :     else if (!strcmp(action, "always")) {

  000e8	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_06KHDOHNKC@always?$AA@
  000ef	48 8b f2	 mov	 rsi, rdx
  000f2	b9 07 00 00 00	 mov	 ecx, 7
  000f7	f3 a6		 repe cmpsb
  000f9	75 29		 jne	 SHORT $LN5@create_fil

; 876  :         if (always_str == NULL) {

  000fb	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR ?always_str@?1??create_filter@@9@9
  00102	48 85 db	 test	 rbx, rbx
  00105	75 29		 jne	 SHORT $LN2@create_fil

; 877  :             always_str = PyUnicode_InternFromString("always");

  00107	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06KHDOHNKC@always?$AA@
  0010e	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00113	48 8b d8	 mov	 rbx, rax
  00116	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?always_str@?1??create_filter@@9@9, rax

; 878  :             if (always_str == NULL)

  0011d	48 85 c0	 test	 rax, rax
  00120	75 0e		 jne	 SHORT $LN2@create_fil

; 879  :                 return NULL;

  00122	eb 4e		 jmp	 SHORT $LN18@create_fil
$LN5@create_fil:

; 880  :         }
; 881  :         action_obj = always_str;
; 882  :     }
; 883  :     else {
; 884  :         Py_FatalError("unknown action");

  00124	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@JJKOFCBF@unknown?5action?$AA@
  0012b	e8 00 00 00 00	 call	 Py_FatalError
$LN2@create_fil:

; 885  :     }
; 886  : 
; 887  :     /* This assumes the line number is zero for now. */
; 888  :     lineno = PyLong_FromLong(0);

  00130	33 c9		 xor	 ecx, ecx
  00132	e8 00 00 00 00	 call	 PyLong_FromLong
  00137	48 8b f0	 mov	 rsi, rax

; 889  :     if (lineno == NULL)

  0013a	48 85 c0	 test	 rax, rax

; 890  :         return NULL;

  0013d	0f 84 18 ff ff
	ff		 je	 $LN20@create_fil

; 891  :     result = PyTuple_Pack(5, action_obj, Py_None, category, Py_None, lineno);

  00143	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  0014a	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0014f	4c 8b cd	 mov	 r9, rbp
  00152	48 8b d3	 mov	 rdx, rbx
  00155	b9 05 00 00 00	 mov	 ecx, 5
  0015a	4c 89 44 24 20	 mov	 QWORD PTR [rsp+32], r8
  0015f	e8 00 00 00 00	 call	 PyTuple_Pack

; 892  :     Py_DECREF(lineno);

  00164	48 8b ce	 mov	 rcx, rsi
  00167	48 8b f8	 mov	 rdi, rax
  0016a	e8 00 00 00 00	 call	 _Py_DecRef

; 893  :     return result;

  0016f	48 8b c7	 mov	 rax, rdi
$LN18@create_fil:

; 894  : }

  00172	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00177	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  0017c	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00181	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00185	5f		 pop	 rdi
  00186	c3		 ret	 0
create_filter ENDP
_TEXT	ENDS
EXTRN	PyExc_ResourceWarning:QWORD
EXTRN	PyExc_BytesWarning:QWORD
EXTRN	Py_BytesWarningFlag:DWORD
EXTRN	PyExc_ImportWarning:QWORD
EXTRN	PyExc_PendingDeprecationWarning:QWORD
EXTRN	PyExc_DeprecationWarning:QWORD
EXTRN	PyList_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$init_filters DD imagerel init_filters
	DD	imagerel init_filters+35
	DD	imagerel $unwind$init_filters
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$init_filters DD imagerel init_filters+35
	DD	imagerel init_filters+195
	DD	imagerel $chain$0$init_filters
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$init_filters DD imagerel init_filters+195
	DD	imagerel init_filters+237
	DD	imagerel $chain$1$init_filters
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$init_filters DD 021H
	DD	imagerel init_filters
	DD	imagerel init_filters+35
	DD	imagerel $unwind$init_filters
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$init_filters DD 020521H
	DD	067405H
	DD	imagerel init_filters
	DD	imagerel init_filters+35
	DD	imagerel $unwind$init_filters
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$init_filters DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT init_filters
_TEXT	SEGMENT
init_filters PROC					; COMDAT

; 898  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 899  :     PyObject *filters = PyList_New(5);

  00006	b9 05 00 00 00	 mov	 ecx, 5
  0000b	e8 00 00 00 00	 call	 PyList_New
  00010	48 8b d8	 mov	 rbx, rax

; 900  :     unsigned int pos = 0;  /* Post-incremented in each use. */
; 901  :     unsigned int x;
; 902  :     const char *bytes_action, *resource_action;
; 903  : 
; 904  :     if (filters == NULL)

  00013	48 85 c0	 test	 rax, rax

; 905  :         return NULL;

  00016	0f 84 c9 00 00
	00		 je	 $LN15@init_filte

; 906  : 
; 907  :     PyList_SET_ITEM(filters, pos++,
; 908  :                     create_filter(PyExc_DeprecationWarning, "ignore"));

  0001c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_DeprecationWarning
  00023	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  00028	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_06GDPEBLPA@ignore?$AA@
  0002f	48 8b d7	 mov	 rdx, rdi
  00032	e8 00 00 00 00	 call	 create_filter
  00037	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]

; 909  :     PyList_SET_ITEM(filters, pos++,
; 910  :                     create_filter(PyExc_PendingDeprecationWarning, "ignore"));

  0003b	48 8b d7	 mov	 rdx, rdi
  0003e	48 89 01	 mov	 QWORD PTR [rcx], rax
  00041	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_PendingDeprecationWarning
  00048	e8 00 00 00 00	 call	 create_filter
  0004d	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]

; 911  :     PyList_SET_ITEM(filters, pos++,
; 912  :                     create_filter(PyExc_ImportWarning, "ignore"));

  00051	48 8b d7	 mov	 rdx, rdi
  00054	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00058	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ImportWarning
  0005f	e8 00 00 00 00	 call	 create_filter
  00064	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00068	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 913  :     if (Py_BytesWarningFlag > 1)

  0006c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR Py_BytesWarningFlag
  00072	83 f8 01	 cmp	 eax, 1
  00075	7e 09		 jle	 SHORT $LN8@init_filte

; 914  :         bytes_action = "error";

  00077	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KKCIMGE@error?$AA@
  0007e	eb 0d		 jmp	 SHORT $LN6@init_filte
$LN8@init_filte:

; 915  :     else if (Py_BytesWarningFlag)

  00080	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07DLHCIBDH@default?$AA@
  00087	85 c0		 test	 eax, eax
  00089	48 0f 44 d7	 cmove	 rdx, rdi
$LN6@init_filte:

; 916  :         bytes_action = "default";
; 917  :     else
; 918  :         bytes_action = "ignore";
; 919  :     PyList_SET_ITEM(filters, pos++, create_filter(PyExc_BytesWarning,
; 920  :                     bytes_action));

  0008d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_BytesWarning
  00094	e8 00 00 00 00	 call	 create_filter
  00099	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]

; 921  :     /* resource usage warnings are enabled by default in pydebug mode */
; 922  : #ifdef Py_DEBUG
; 923  :     resource_action = "always";
; 924  : #else
; 925  :     resource_action = "ignore";
; 926  : #endif
; 927  :     PyList_SET_ITEM(filters, pos++, create_filter(PyExc_ResourceWarning,
; 928  :                     resource_action));

  0009d	48 8b d7	 mov	 rdx, rdi
  000a0	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax
  000a4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ResourceWarning
  000ab	e8 00 00 00 00	 call	 create_filter
  000b0	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  000b4	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
  000b9	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
  000bd	48 8b 43 70	 mov	 rax, QWORD PTR [rbx+112]

; 929  :     for (x = 0; x < pos; x += 1) {

  000c1	33 c9		 xor	 ecx, ecx
$LL4@init_filte:

; 930  :         if (PyList_GET_ITEM(filters, x) == NULL) {

  000c3	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000c7	74 14		 je	 SHORT $LN13@init_filte

; 929  :     for (x = 0; x < pos; x += 1) {

  000c9	ff c1		 inc	 ecx
  000cb	48 83 c0 08	 add	 rax, 8
  000cf	83 f9 05	 cmp	 ecx, 5
  000d2	72 ef		 jb	 SHORT $LL4@init_filte

; 933  :         }
; 934  :     }
; 935  : 
; 936  :     return filters;

  000d4	48 8b c3	 mov	 rax, rbx

; 937  : }

  000d7	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000db	5b		 pop	 rbx
  000dc	c3		 ret	 0
$LN13@init_filte:

; 931  :             Py_DECREF(filters);

  000dd	48 8b cb	 mov	 rcx, rbx
  000e0	e8 00 00 00 00	 call	 _Py_DecRef
$LN15@init_filte:

; 932  :             return NULL;

  000e5	33 c0		 xor	 eax, eax

; 937  : }

  000e7	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000eb	5b		 pop	 rbx
  000ec	c3		 ret	 0
init_filters ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@PBKAJPMJ@_defaultaction?$AA@		; `string'
PUBLIC	??_C@_0O@JNNAMMAD@_onceregistry?$AA@		; `string'
PUBLIC	_PyWarnings_Init
EXTRN	PyModule_AddObject:PROC
EXTRN	PyModule_Create2:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_PyWarnings_Init DD imagerel $LN19
	DD	imagerel $LN19+37
	DD	imagerel $unwind$_PyWarnings_Init
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_PyWarnings_Init DD imagerel $LN19+37
	DD	imagerel $LN19+275
	DD	imagerel $chain$0$_PyWarnings_Init
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_PyWarnings_Init DD imagerel $LN19+275
	DD	imagerel $LN19+327
	DD	imagerel $chain$2$_PyWarnings_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_PyWarnings_Init DD 020021H
	DD	083400H
	DD	imagerel $LN19
	DD	imagerel $LN19+37
	DD	imagerel $unwind$_PyWarnings_Init
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_PyWarnings_Init DD 020521H
	DD	083405H
	DD	imagerel $LN19
	DD	imagerel $LN19+37
	DD	imagerel $unwind$_PyWarnings_Init
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyWarnings_Init DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT ??_C@_0P@PBKAJPMJ@_defaultaction?$AA@
CONST	SEGMENT
??_C@_0P@PBKAJPMJ@_defaultaction?$AA@ DB '_defaultaction', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JNNAMMAD@_onceregistry?$AA@
CONST	SEGMENT
??_C@_0O@JNNAMMAD@_onceregistry?$AA@ DB '_onceregistry', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\_warnings.c
CONST	ENDS
;	COMDAT _PyWarnings_Init
_TEXT	SEGMENT
_PyWarnings_Init PROC					; COMDAT

; 954  : {

$LN19:
  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 955  :     PyObject *m;
; 956  : 
; 957  :     m = PyModule_Create(&warningsmodule);

  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:warningsmodule
  0000d	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00012	e8 00 00 00 00	 call	 PyModule_Create2
  00017	48 8b f8	 mov	 rdi, rax

; 958  :     if (m == NULL)

  0001a	48 85 c0	 test	 rax, rax
  0001d	75 06		 jne	 SHORT $LN10@PyWarnings

; 986  :         return NULL;
; 987  :     return m;
; 988  : }

  0001f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00023	5f		 pop	 rdi
  00024	c3		 ret	 0
$LN10@PyWarnings:
  00025	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx

; 959  :         return NULL;
; 960  : 
; 961  :     if (_filters == NULL) {

  0002a	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR _filters
  00031	48 85 db	 test	 rbx, rbx
  00034	75 18		 jne	 SHORT $LN8@PyWarnings

; 962  :         _filters = init_filters();

  00036	e8 00 00 00 00	 call	 init_filters
  0003b	48 8b d8	 mov	 rbx, rax
  0003e	48 89 05 00 00
	00 00		 mov	 QWORD PTR _filters, rax

; 963  :         if (_filters == NULL)

  00045	48 85 c0	 test	 rax, rax

; 964  :             return NULL;

  00048	0f 84 b8 00 00
	00		 je	 $LN18@PyWarnings
$LN8@PyWarnings:

; 965  :     }
; 966  :     Py_INCREF(_filters);

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	75 32		 jne	 SHORT $LN14@PyWarnings
  00057	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0005e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00065	4c 8b cb	 mov	 r9, rbx
  00068	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0006e	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00076	e8 00 00 00 00	 call	 _PyParallel_Guard
  0007b	85 c0		 test	 eax, eax
  0007d	75 06		 jne	 SHORT $LN13@PyWarnings
  0007f	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00083	74 04		 je	 SHORT $LN14@PyWarnings
$LN13@PyWarnings:
  00085	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN14@PyWarnings:

; 967  :     if (PyModule_AddObject(m, "filters", _filters) < 0)

  00089	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR _filters
  00090	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07LOIMJIII@filters?$AA@
  00097	48 8b cf	 mov	 rcx, rdi
  0009a	e8 00 00 00 00	 call	 PyModule_AddObject
  0009f	85 c0		 test	 eax, eax

; 968  :         return NULL;

  000a1	78 63		 js	 SHORT $LN18@PyWarnings

; 969  : 
; 970  :     if (_once_registry == NULL) {

  000a3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _once_registry
  000aa	48 85 c0	 test	 rax, rax
  000ad	75 11		 jne	 SHORT $LN5@PyWarnings

; 971  :         _once_registry = PyDict_New();

  000af	e8 00 00 00 00	 call	 PyDict_New
  000b4	48 89 05 00 00
	00 00		 mov	 QWORD PTR _once_registry, rax

; 972  :         if (_once_registry == NULL)

  000bb	48 85 c0	 test	 rax, rax

; 973  :             return NULL;

  000be	74 46		 je	 SHORT $LN18@PyWarnings
$LN5@PyWarnings:

; 974  :     }
; 975  :     Py_INCREF(_once_registry);

  000c0	48 8b c8	 mov	 rcx, rax
  000c3	e8 00 00 00 00	 call	 _Py_IncRef

; 976  :     if (PyModule_AddObject(m, "_onceregistry", _once_registry) < 0)

  000c8	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR _once_registry
  000cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@JNNAMMAD@_onceregistry?$AA@
  000d6	48 8b cf	 mov	 rcx, rdi
  000d9	e8 00 00 00 00	 call	 PyModule_AddObject
  000de	85 c0		 test	 eax, eax

; 977  :         return NULL;

  000e0	78 24		 js	 SHORT $LN18@PyWarnings

; 978  : 
; 979  :     if (_default_action == NULL) {

  000e2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _default_action
  000e9	48 85 c0	 test	 rax, rax
  000ec	75 25		 jne	 SHORT $LN2@PyWarnings

; 980  :         _default_action = PyUnicode_FromString("default");

  000ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07DLHCIBDH@default?$AA@
  000f5	e8 00 00 00 00	 call	 PyUnicode_FromString
  000fa	48 89 05 00 00
	00 00		 mov	 QWORD PTR _default_action, rax

; 981  :         if (_default_action == NULL)

  00101	48 85 c0	 test	 rax, rax
  00104	75 0d		 jne	 SHORT $LN2@PyWarnings
$LN18@PyWarnings:

; 982  :             return NULL;

  00106	33 c0		 xor	 eax, eax
  00108	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 986  :         return NULL;
; 987  :     return m;
; 988  : }

  0010d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00111	5f		 pop	 rdi
  00112	c3		 ret	 0
$LN2@PyWarnings:

; 983  :     }
; 984  :     Py_INCREF(_default_action);

  00113	48 8b c8	 mov	 rcx, rax
  00116	e8 00 00 00 00	 call	 _Py_IncRef

; 985  :     if (PyModule_AddObject(m, "_defaultaction", _default_action) < 0)

  0011b	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR _default_action
  00122	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@PBKAJPMJ@_defaultaction?$AA@
  00129	48 8b cf	 mov	 rcx, rdi
  0012c	e8 00 00 00 00	 call	 PyModule_AddObject
  00131	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00136	33 c9		 xor	 ecx, ecx
  00138	85 c0		 test	 eax, eax
  0013a	48 0f 48 f9	 cmovs	 rdi, rcx
  0013e	48 8b c7	 mov	 rax, rdi

; 986  :         return NULL;
; 987  :     return m;
; 988  : }

  00141	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00145	5f		 pop	 rdi
  00146	c3		 ret	 0
_PyWarnings_Init ENDP
_TEXT	ENDS
END
