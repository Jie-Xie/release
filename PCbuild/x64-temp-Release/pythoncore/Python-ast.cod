; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_04BNOAKKGF@_ast?$AA@			; `string'
PUBLIC	??_C@_0M@CDHEEICO@_attributes?$AA@		; `string'
PUBLIC	??_C@_08IBLOGDG@_ast?4AST?$AA@			; `string'
PUBLIC	??_C@_0L@NNMACJIG@__reduce__?$AA@		; `string'
PUBLIC	??_C@_08IBFKALI@__dict__?$AA@			; `string'
PUBLIC	??_C@_07LKKIBPPO@_fields?$AA@			; `string'
PUBLIC	??_C@_0O@PNIBPJAK@optional_vars?$AA@		; `string'
PUBLIC	??_C@_0N@NOGLGHPG@context_expr?$AA@		; `string'
PUBLIC	??_C@_06DPPJIGGE@asname?$AA@			; `string'
PUBLIC	??_C@_0L@HOGAMHHM@annotation?$AA@		; `string'
PUBLIC	??_C@_03CAOIPBNL@arg?$AA@			; `string'
PUBLIC	??_C@_0M@OHIOHNMJ@kw_defaults?$AA@		; `string'
PUBLIC	??_C@_08LMJEPNLL@defaults?$AA@			; `string'
PUBLIC	??_C@_0BA@JACLGMFO@kwargannotation?$AA@		; `string'
PUBLIC	??_C@_05JJKPEMCC@kwarg?$AA@			; `string'
PUBLIC	??_C@_0L@PJHGIGJA@kwonlyargs?$AA@		; `string'
PUBLIC	??_C@_0BB@LBMLKLGK@varargannotation?$AA@	; `string'
PUBLIC	??_C@_06FDMCHLPI@vararg?$AA@			; `string'
PUBLIC	??_C@_04GPMDFGEJ@type?$AA@			; `string'
PUBLIC	??_C@_03NANNAFMN@ifs?$AA@			; `string'
PUBLIC	??_C@_04FHFMBDKA@dims?$AA@			; `string'
PUBLIC	??_C@_04CNBNFAL@step?$AA@			; `string'
PUBLIC	??_C@_05NECKJAMC@upper?$AA@			; `string'
PUBLIC	??_C@_05IPJEPLHL@lower?$AA@			; `string'
PUBLIC	??_C@_02EGCJHIOB@id?$AA@			; `string'
PUBLIC	??_C@_05ILHMOJGN@slice?$AA@			; `string'
PUBLIC	??_C@_03EDDGELHM@ctx?$AA@			; `string'
PUBLIC	??_C@_04DHCDLKCM@attr?$AA@			; `string'
PUBLIC	??_C@_01LKDEMHDF@s?$AA@				; `string'
PUBLIC	??_C@_01EFFIKLCJ@n?$AA@				; `string'
PUBLIC	??_C@_04HPNHAEOP@func?$AA@			; `string'
PUBLIC	??_C@_0M@FEBOCDAK@comparators?$AA@		; `string'
PUBLIC	??_C@_03ONBNIFND@ops?$AA@			; `string'
PUBLIC	??_C@_03ICHNJLJF@key?$AA@			; `string'
PUBLIC	??_C@_0L@FCNMNMNJ@generators?$AA@		; `string'
PUBLIC	??_C@_03NINNKJGE@elt?$AA@			; `string'
PUBLIC	??_C@_04EOBFFCNN@elts?$AA@			; `string'
PUBLIC	??_C@_04IEPFDAGF@keys?$AA@			; `string'
PUBLIC	??_C@_07GEBHLHAD@operand?$AA@			; `string'
PUBLIC	??_C@_05DHJDAOHK@right?$AA@			; `string'
PUBLIC	??_C@_04GOOOJOPP@left?$AA@			; `string'
PUBLIC	??_C@_06GEKOPAHD@values?$AA@			; `string'
PUBLIC	??_C@_05KJNJLLGA@level?$AA@			; `string'
PUBLIC	??_C@_06BIEEJMKO@module?$AA@			; `string'
PUBLIC	??_C@_05FLNDGCKL@names?$AA@			; `string'
PUBLIC	??_C@_03GLPMCEFE@msg?$AA@			; `string'
PUBLIC	??_C@_09JGEOIMID@finalbody?$AA@			; `string'
PUBLIC	??_C@_08KJLNBJEK@handlers?$AA@			; `string'
PUBLIC	??_C@_05HGNDGEBA@cause?$AA@			; `string'
PUBLIC	??_C@_03MGHBCGFO@exc?$AA@			; `string'
PUBLIC	??_C@_05CFHBDDLG@items?$AA@			; `string'
PUBLIC	??_C@_04CEJDCDCH@test?$AA@			; `string'
PUBLIC	??_C@_06DHJIEJCK@orelse?$AA@			; `string'
PUBLIC	??_C@_04BKLHDIKK@iter?$AA@			; `string'
PUBLIC	??_C@_02GMAKNDAG@op?$AA@			; `string'
PUBLIC	??_C@_06JJLAMBGK@target?$AA@			; `string'
PUBLIC	??_C@_07KJOMBCLC@targets?$AA@			; `string'
PUBLIC	??_C@_05MFEJDJP@value?$AA@			; `string'
PUBLIC	??_C@_06NBOLMEJN@kwargs?$AA@			; `string'
PUBLIC	??_C@_08LPAHKBMK@starargs?$AA@			; `string'
PUBLIC	??_C@_08KBIEDDDE@keywords?$AA@			; `string'
PUBLIC	??_C@_05JMNHICHM@bases?$AA@			; `string'
PUBLIC	??_C@_07ILMKFBFJ@returns?$AA@			; `string'
PUBLIC	??_C@_0P@LMCHOPJJ@decorator_list?$AA@		; `string'
PUBLIC	??_C@_04BFDDMJJI@args?$AA@			; `string'
PUBLIC	??_C@_04MEMAJGDJ@name?$AA@			; `string'
PUBLIC	??_C@_0L@ICBHJKOA@col_offset?$AA@		; `string'
PUBLIC	??_C@_06ILKIAHNN@lineno?$AA@			; `string'
PUBLIC	??_C@_04IEJGKNJ@body?$AA@			; `string'
EXTRN	PyObject_GC_Del:PROC
EXTRN	PyType_GenericNew:PROC
EXTRN	PyType_GenericAlloc:PROC
EXTRN	PyObject_GenericSetAttr:PROC
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
EXTRN	PyObject_GenericSetDict:PROC
EXTRN	PyObject_GenericGetDict:PROC
;	COMDAT ??_C@_04BNOAKKGF@_ast?$AA@
CONST	SEGMENT
??_C@_04BNOAKKGF@_ast?$AA@ DB '_ast', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CDHEEICO@_attributes?$AA@
CONST	SEGMENT
??_C@_0M@CDHEEICO@_attributes?$AA@ DB '_attributes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08IBLOGDG@_ast?4AST?$AA@
CONST	SEGMENT
??_C@_08IBLOGDG@_ast?4AST?$AA@ DB '_ast.AST', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNMACJIG@__reduce__?$AA@
CONST	SEGMENT
??_C@_0L@NNMACJIG@__reduce__?$AA@ DB '__reduce__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IBFKALI@__dict__?$AA@
CONST	SEGMENT
??_C@_08IBFKALI@__dict__?$AA@ DB '__dict__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07LKKIBPPO@_fields?$AA@
CONST	SEGMENT
??_C@_07LKKIBPPO@_fields?$AA@ DB '_fields', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PNIBPJAK@optional_vars?$AA@
CONST	SEGMENT
??_C@_0O@PNIBPJAK@optional_vars?$AA@ DB 'optional_vars', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NOGLGHPG@context_expr?$AA@
CONST	SEGMENT
??_C@_0N@NOGLGHPG@context_expr?$AA@ DB 'context_expr', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06DPPJIGGE@asname?$AA@
CONST	SEGMENT
??_C@_06DPPJIGGE@asname?$AA@ DB 'asname', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HOGAMHHM@annotation?$AA@
CONST	SEGMENT
??_C@_0L@HOGAMHHM@annotation?$AA@ DB 'annotation', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03CAOIPBNL@arg?$AA@
CONST	SEGMENT
??_C@_03CAOIPBNL@arg?$AA@ DB 'arg', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OHIOHNMJ@kw_defaults?$AA@
CONST	SEGMENT
??_C@_0M@OHIOHNMJ@kw_defaults?$AA@ DB 'kw_defaults', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08LMJEPNLL@defaults?$AA@
CONST	SEGMENT
??_C@_08LMJEPNLL@defaults?$AA@ DB 'defaults', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JACLGMFO@kwargannotation?$AA@
CONST	SEGMENT
??_C@_0BA@JACLGMFO@kwargannotation?$AA@ DB 'kwargannotation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05JJKPEMCC@kwarg?$AA@
CONST	SEGMENT
??_C@_05JJKPEMCC@kwarg?$AA@ DB 'kwarg', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PJHGIGJA@kwonlyargs?$AA@
CONST	SEGMENT
??_C@_0L@PJHGIGJA@kwonlyargs?$AA@ DB 'kwonlyargs', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LBMLKLGK@varargannotation?$AA@
CONST	SEGMENT
??_C@_0BB@LBMLKLGK@varargannotation?$AA@ DB 'varargannotation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDMCHLPI@vararg?$AA@
CONST	SEGMENT
??_C@_06FDMCHLPI@vararg?$AA@ DB 'vararg', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GPMDFGEJ@type?$AA@
CONST	SEGMENT
??_C@_04GPMDFGEJ@type?$AA@ DB 'type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NANNAFMN@ifs?$AA@
CONST	SEGMENT
??_C@_03NANNAFMN@ifs?$AA@ DB 'ifs', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04FHFMBDKA@dims?$AA@
CONST	SEGMENT
??_C@_04FHFMBDKA@dims?$AA@ DB 'dims', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CNBNFAL@step?$AA@
CONST	SEGMENT
??_C@_04CNBNFAL@step?$AA@ DB 'step', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NECKJAMC@upper?$AA@
CONST	SEGMENT
??_C@_05NECKJAMC@upper?$AA@ DB 'upper', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IPJEPLHL@lower?$AA@
CONST	SEGMENT
??_C@_05IPJEPLHL@lower?$AA@ DB 'lower', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EGCJHIOB@id?$AA@
CONST	SEGMENT
??_C@_02EGCJHIOB@id?$AA@ DB 'id', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05ILHMOJGN@slice?$AA@
CONST	SEGMENT
??_C@_05ILHMOJGN@slice?$AA@ DB 'slice', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03EDDGELHM@ctx?$AA@
CONST	SEGMENT
??_C@_03EDDGELHM@ctx?$AA@ DB 'ctx', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04DHCDLKCM@attr?$AA@
CONST	SEGMENT
??_C@_04DHCDLKCM@attr?$AA@ DB 'attr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01LKDEMHDF@s?$AA@
CONST	SEGMENT
??_C@_01LKDEMHDF@s?$AA@ DB 's', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EFFIKLCJ@n?$AA@
CONST	SEGMENT
??_C@_01EFFIKLCJ@n?$AA@ DB 'n', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04HPNHAEOP@func?$AA@
CONST	SEGMENT
??_C@_04HPNHAEOP@func?$AA@ DB 'func', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FEBOCDAK@comparators?$AA@
CONST	SEGMENT
??_C@_0M@FEBOCDAK@comparators?$AA@ DB 'comparators', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03ONBNIFND@ops?$AA@
CONST	SEGMENT
??_C@_03ONBNIFND@ops?$AA@ DB 'ops', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03ICHNJLJF@key?$AA@
CONST	SEGMENT
??_C@_03ICHNJLJF@key?$AA@ DB 'key', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FCNMNMNJ@generators?$AA@
CONST	SEGMENT
??_C@_0L@FCNMNMNJ@generators?$AA@ DB 'generators', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03NINNKJGE@elt?$AA@
CONST	SEGMENT
??_C@_03NINNKJGE@elt?$AA@ DB 'elt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04EOBFFCNN@elts?$AA@
CONST	SEGMENT
??_C@_04EOBFFCNN@elts?$AA@ DB 'elts', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IEPFDAGF@keys?$AA@
CONST	SEGMENT
??_C@_04IEPFDAGF@keys?$AA@ DB 'keys', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GEBHLHAD@operand?$AA@
CONST	SEGMENT
??_C@_07GEBHLHAD@operand?$AA@ DB 'operand', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DHJDAOHK@right?$AA@
CONST	SEGMENT
??_C@_05DHJDAOHK@right?$AA@ DB 'right', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GOOOJOPP@left?$AA@
CONST	SEGMENT
??_C@_04GOOOJOPP@left?$AA@ DB 'left', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GEKOPAHD@values?$AA@
CONST	SEGMENT
??_C@_06GEKOPAHD@values?$AA@ DB 'values', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KJNJLLGA@level?$AA@
CONST	SEGMENT
??_C@_05KJNJLLGA@level?$AA@ DB 'level', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BIEEJMKO@module?$AA@
CONST	SEGMENT
??_C@_06BIEEJMKO@module?$AA@ DB 'module', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FLNDGCKL@names?$AA@
CONST	SEGMENT
??_C@_05FLNDGCKL@names?$AA@ DB 'names', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03GLPMCEFE@msg?$AA@
CONST	SEGMENT
??_C@_03GLPMCEFE@msg?$AA@ DB 'msg', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09JGEOIMID@finalbody?$AA@
CONST	SEGMENT
??_C@_09JGEOIMID@finalbody?$AA@ DB 'finalbody', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KJLNBJEK@handlers?$AA@
CONST	SEGMENT
??_C@_08KJLNBJEK@handlers?$AA@ DB 'handlers', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05HGNDGEBA@cause?$AA@
CONST	SEGMENT
??_C@_05HGNDGEBA@cause?$AA@ DB 'cause', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03MGHBCGFO@exc?$AA@
CONST	SEGMENT
??_C@_03MGHBCGFO@exc?$AA@ DB 'exc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05CFHBDDLG@items?$AA@
CONST	SEGMENT
??_C@_05CFHBDDLG@items?$AA@ DB 'items', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CEJDCDCH@test?$AA@
CONST	SEGMENT
??_C@_04CEJDCDCH@test?$AA@ DB 'test', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DHJIEJCK@orelse?$AA@
CONST	SEGMENT
??_C@_06DHJIEJCK@orelse?$AA@ DB 'orelse', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BKLHDIKK@iter?$AA@
CONST	SEGMENT
??_C@_04BKLHDIKK@iter?$AA@ DB 'iter', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMAKNDAG@op?$AA@
CONST	SEGMENT
??_C@_02GMAKNDAG@op?$AA@ DB 'op', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06JJLAMBGK@target?$AA@
CONST	SEGMENT
??_C@_06JJLAMBGK@target?$AA@ DB 'target', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KJOMBCLC@targets?$AA@
CONST	SEGMENT
??_C@_07KJOMBCLC@targets?$AA@ DB 'targets', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MFEJDJP@value?$AA@
CONST	SEGMENT
??_C@_05MFEJDJP@value?$AA@ DB 'value', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NBOLMEJN@kwargs?$AA@
CONST	SEGMENT
??_C@_06NBOLMEJN@kwargs?$AA@ DB 'kwargs', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LPAHKBMK@starargs?$AA@
CONST	SEGMENT
??_C@_08LPAHKBMK@starargs?$AA@ DB 'starargs', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KBIEDDDE@keywords?$AA@
CONST	SEGMENT
??_C@_08KBIEDDDE@keywords?$AA@ DB 'keywords', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05JMNHICHM@bases?$AA@
CONST	SEGMENT
??_C@_05JMNHICHM@bases?$AA@ DB 'bases', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07ILMKFBFJ@returns?$AA@
CONST	SEGMENT
??_C@_07ILMKFBFJ@returns?$AA@ DB 'returns', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LMCHOPJJ@decorator_list?$AA@
CONST	SEGMENT
??_C@_0P@LMCHOPJJ@decorator_list?$AA@ DB 'decorator_list', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04BFDDMJJI@args?$AA@
CONST	SEGMENT
??_C@_04BFDDMJJI@args?$AA@ DB 'args', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MEMAJGDJ@name?$AA@
CONST	SEGMENT
??_C@_04MEMAJGDJ@name?$AA@ DB 'name', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ICBHJKOA@col_offset?$AA@
CONST	SEGMENT
??_C@_0L@ICBHJKOA@col_offset?$AA@ DB 'col_offset', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06ILKIAHNN@lineno?$AA@
CONST	SEGMENT
??_C@_06ILKIAHNN@lineno?$AA@ DB 'lineno', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
Module_fields DQ FLAT:??_C@_04IEJGKNJ@body?$AA@
Interactive_fields DQ FLAT:??_C@_04IEJGKNJ@body?$AA@
Expression_fields DQ FLAT:??_C@_04IEJGKNJ@body?$AA@
Suite_fields DQ	FLAT:??_C@_04IEJGKNJ@body?$AA@
stmt_attributes DQ FLAT:??_C@_06ILKIAHNN@lineno?$AA@
	DQ	FLAT:??_C@_0L@ICBHJKOA@col_offset?$AA@
FunctionDef_fields DQ FLAT:??_C@_04MEMAJGDJ@name?$AA@
	DQ	FLAT:??_C@_04BFDDMJJI@args?$AA@
	DQ	FLAT:??_C@_04IEJGKNJ@body?$AA@
	DQ	FLAT:??_C@_0P@LMCHOPJJ@decorator_list?$AA@
	DQ	FLAT:??_C@_07ILMKFBFJ@returns?$AA@
ClassDef_fields DQ FLAT:??_C@_04MEMAJGDJ@name?$AA@
	DQ	FLAT:??_C@_05JMNHICHM@bases?$AA@
	DQ	FLAT:??_C@_08KBIEDDDE@keywords?$AA@
	DQ	FLAT:??_C@_08LPAHKBMK@starargs?$AA@
	DQ	FLAT:??_C@_06NBOLMEJN@kwargs?$AA@
	DQ	FLAT:??_C@_04IEJGKNJ@body?$AA@
	DQ	FLAT:??_C@_0P@LMCHOPJJ@decorator_list?$AA@
Return_fields DQ FLAT:??_C@_05MFEJDJP@value?$AA@
Delete_fields DQ FLAT:??_C@_07KJOMBCLC@targets?$AA@
Assign_fields DQ FLAT:??_C@_07KJOMBCLC@targets?$AA@
	DQ	FLAT:??_C@_05MFEJDJP@value?$AA@
AugAssign_fields DQ FLAT:??_C@_06JJLAMBGK@target?$AA@
	DQ	FLAT:??_C@_02GMAKNDAG@op?$AA@
	DQ	FLAT:??_C@_05MFEJDJP@value?$AA@
For_fields DQ	FLAT:??_C@_06JJLAMBGK@target?$AA@
	DQ	FLAT:??_C@_04BKLHDIKK@iter?$AA@
	DQ	FLAT:??_C@_04IEJGKNJ@body?$AA@
	DQ	FLAT:??_C@_06DHJIEJCK@orelse?$AA@
While_fields DQ	FLAT:??_C@_04CEJDCDCH@test?$AA@
	DQ	FLAT:??_C@_04IEJGKNJ@body?$AA@
	DQ	FLAT:??_C@_06DHJIEJCK@orelse?$AA@
If_fields DQ	FLAT:??_C@_04CEJDCDCH@test?$AA@
	DQ	FLAT:??_C@_04IEJGKNJ@body?$AA@
	DQ	FLAT:??_C@_06DHJIEJCK@orelse?$AA@
With_fields DQ	FLAT:??_C@_05CFHBDDLG@items?$AA@
	DQ	FLAT:??_C@_04IEJGKNJ@body?$AA@
Raise_fields DQ	FLAT:??_C@_03MGHBCGFO@exc?$AA@
	DQ	FLAT:??_C@_05HGNDGEBA@cause?$AA@
Try_fields DQ	FLAT:??_C@_04IEJGKNJ@body?$AA@
	DQ	FLAT:??_C@_08KJLNBJEK@handlers?$AA@
	DQ	FLAT:??_C@_06DHJIEJCK@orelse?$AA@
	DQ	FLAT:??_C@_09JGEOIMID@finalbody?$AA@
Assert_fields DQ FLAT:??_C@_04CEJDCDCH@test?$AA@
	DQ	FLAT:??_C@_03GLPMCEFE@msg?$AA@
Import_fields DQ FLAT:??_C@_05FLNDGCKL@names?$AA@
ImportFrom_fields DQ FLAT:??_C@_06BIEEJMKO@module?$AA@
	DQ	FLAT:??_C@_05FLNDGCKL@names?$AA@
	DQ	FLAT:??_C@_05KJNJLLGA@level?$AA@
Global_fields DQ FLAT:??_C@_05FLNDGCKL@names?$AA@
Nonlocal_fields DQ FLAT:??_C@_05FLNDGCKL@names?$AA@
Expr_fields DQ	FLAT:??_C@_05MFEJDJP@value?$AA@
expr_attributes DQ FLAT:??_C@_06ILKIAHNN@lineno?$AA@
	DQ	FLAT:??_C@_0L@ICBHJKOA@col_offset?$AA@
BoolOp_fields DQ FLAT:??_C@_02GMAKNDAG@op?$AA@
	DQ	FLAT:??_C@_06GEKOPAHD@values?$AA@
BinOp_fields DQ	FLAT:??_C@_04GOOOJOPP@left?$AA@
	DQ	FLAT:??_C@_02GMAKNDAG@op?$AA@
	DQ	FLAT:??_C@_05DHJDAOHK@right?$AA@
UnaryOp_fields DQ FLAT:??_C@_02GMAKNDAG@op?$AA@
	DQ	FLAT:??_C@_07GEBHLHAD@operand?$AA@
Lambda_fields DQ FLAT:??_C@_04BFDDMJJI@args?$AA@
	DQ	FLAT:??_C@_04IEJGKNJ@body?$AA@
IfExp_fields DQ	FLAT:??_C@_04CEJDCDCH@test?$AA@
	DQ	FLAT:??_C@_04IEJGKNJ@body?$AA@
	DQ	FLAT:??_C@_06DHJIEJCK@orelse?$AA@
Dict_fields DQ	FLAT:??_C@_04IEPFDAGF@keys?$AA@
	DQ	FLAT:??_C@_06GEKOPAHD@values?$AA@
Set_fields DQ	FLAT:??_C@_04EOBFFCNN@elts?$AA@
ListComp_fields DQ FLAT:??_C@_03NINNKJGE@elt?$AA@
	DQ	FLAT:??_C@_0L@FCNMNMNJ@generators?$AA@
SetComp_fields DQ FLAT:??_C@_03NINNKJGE@elt?$AA@
	DQ	FLAT:??_C@_0L@FCNMNMNJ@generators?$AA@
DictComp_fields DQ FLAT:??_C@_03ICHNJLJF@key?$AA@
	DQ	FLAT:??_C@_05MFEJDJP@value?$AA@
	DQ	FLAT:??_C@_0L@FCNMNMNJ@generators?$AA@
GeneratorExp_fields DQ FLAT:??_C@_03NINNKJGE@elt?$AA@
	DQ	FLAT:??_C@_0L@FCNMNMNJ@generators?$AA@
Yield_fields DQ	FLAT:??_C@_05MFEJDJP@value?$AA@
YieldFrom_fields DQ FLAT:??_C@_05MFEJDJP@value?$AA@
Compare_fields DQ FLAT:??_C@_04GOOOJOPP@left?$AA@
	DQ	FLAT:??_C@_03ONBNIFND@ops?$AA@
	DQ	FLAT:??_C@_0M@FEBOCDAK@comparators?$AA@
Call_fields DQ	FLAT:??_C@_04HPNHAEOP@func?$AA@
	DQ	FLAT:??_C@_04BFDDMJJI@args?$AA@
	DQ	FLAT:??_C@_08KBIEDDDE@keywords?$AA@
	DQ	FLAT:??_C@_08LPAHKBMK@starargs?$AA@
	DQ	FLAT:??_C@_06NBOLMEJN@kwargs?$AA@
Num_fields DQ	FLAT:??_C@_01EFFIKLCJ@n?$AA@
Str_fields DQ	FLAT:??_C@_01LKDEMHDF@s?$AA@
Bytes_fields DQ	FLAT:??_C@_01LKDEMHDF@s?$AA@
Attribute_fields DQ FLAT:??_C@_05MFEJDJP@value?$AA@
	DQ	FLAT:??_C@_04DHCDLKCM@attr?$AA@
	DQ	FLAT:??_C@_03EDDGELHM@ctx?$AA@
Subscript_fields DQ FLAT:??_C@_05MFEJDJP@value?$AA@
	DQ	FLAT:??_C@_05ILHMOJGN@slice?$AA@
	DQ	FLAT:??_C@_03EDDGELHM@ctx?$AA@
Starred_fields DQ FLAT:??_C@_05MFEJDJP@value?$AA@
	DQ	FLAT:??_C@_03EDDGELHM@ctx?$AA@
Name_fields DQ	FLAT:??_C@_02EGCJHIOB@id?$AA@
	DQ	FLAT:??_C@_03EDDGELHM@ctx?$AA@
List_fields DQ	FLAT:??_C@_04EOBFFCNN@elts?$AA@
	DQ	FLAT:??_C@_03EDDGELHM@ctx?$AA@
Tuple_fields DQ	FLAT:??_C@_04EOBFFCNN@elts?$AA@
	DQ	FLAT:??_C@_03EDDGELHM@ctx?$AA@
Slice_fields DQ	FLAT:??_C@_05IPJEPLHL@lower?$AA@
	DQ	FLAT:??_C@_05NECKJAMC@upper?$AA@
	DQ	FLAT:??_C@_04CNBNFAL@step?$AA@
ExtSlice_fields DQ FLAT:??_C@_04FHFMBDKA@dims?$AA@
Index_fields DQ	FLAT:??_C@_05MFEJDJP@value?$AA@
comprehension_fields DQ FLAT:??_C@_06JJLAMBGK@target?$AA@
	DQ	FLAT:??_C@_04BKLHDIKK@iter?$AA@
	DQ	FLAT:??_C@_03NANNAFMN@ifs?$AA@
excepthandler_attributes DQ FLAT:??_C@_06ILKIAHNN@lineno?$AA@
	DQ	FLAT:??_C@_0L@ICBHJKOA@col_offset?$AA@
ExceptHandler_fields DQ FLAT:??_C@_04GPMDFGEJ@type?$AA@
	DQ	FLAT:??_C@_04MEMAJGDJ@name?$AA@
	DQ	FLAT:??_C@_04IEJGKNJ@body?$AA@
arguments_fields DQ FLAT:??_C@_04BFDDMJJI@args?$AA@
	DQ	FLAT:??_C@_06FDMCHLPI@vararg?$AA@
	DQ	FLAT:??_C@_0BB@LBMLKLGK@varargannotation?$AA@
	DQ	FLAT:??_C@_0L@PJHGIGJA@kwonlyargs?$AA@
	DQ	FLAT:??_C@_05JJKPEMCC@kwarg?$AA@
	DQ	FLAT:??_C@_0BA@JACLGMFO@kwargannotation?$AA@
	DQ	FLAT:??_C@_08LMJEPNLL@defaults?$AA@
	DQ	FLAT:??_C@_0M@OHIOHNMJ@kw_defaults?$AA@
arg_fields DQ	FLAT:??_C@_03CAOIPBNL@arg?$AA@
	DQ	FLAT:??_C@_0L@HOGAMHHM@annotation?$AA@
keyword_fields DQ FLAT:??_C@_03CAOIPBNL@arg?$AA@
	DQ	FLAT:??_C@_05MFEJDJP@value?$AA@
alias_fields DQ	FLAT:??_C@_04MEMAJGDJ@name?$AA@
	DQ	FLAT:??_C@_06DPPJIGGE@asname?$AA@
withitem_fields DQ FLAT:??_C@_0N@NOGLGHPG@context_expr?$AA@
	DQ	FLAT:??_C@_0O@PNIBPJAK@optional_vars?$AA@
ast_type_methods DQ FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:ast_type_reduce
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+24
ast_type_getsets DQ FLAT:??_C@_08IBFKALI@__dict__?$AA@
	DQ	FLAT:PyObject_GenericGetDict
	DQ	FLAT:PyObject_GenericSetDict
	ORG $+16
	DQ	0000000000000000H
	ORG $+32
AST_type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_08IBLOGDG@_ast?4AST?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:ast_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	FLAT:PyObject_GenericSetAttr
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:ast_traverse
	DQ	FLAT:ast_clear
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:ast_type_methods
	DQ	0000000000000000H
	DQ	FLAT:ast_type_getsets
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000060H
	DQ	FLAT:ast_type_init
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:PyType_GenericNew
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
_astmodule DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_04BNOAKKGF@_ast?$AA@
	ORG $+56
_DATA	ENDS
_TLS	SEGMENT
PyId_body DQ	0000000000000000H
	DQ	FLAT:??_C@_04IEJGKNJ@body?$AA@
	DQ	0000000000000000H
PyId_value DQ	0000000000000000H
	DQ	FLAT:??_C@_05MFEJDJP@value?$AA@
	DQ	0000000000000000H
PyId_ctx DQ	0000000000000000H
	DQ	FLAT:??_C@_03EDDGELHM@ctx?$AA@
	DQ	0000000000000000H
PyId_orelse DQ	0000000000000000H
	DQ	FLAT:??_C@_06DHJIEJCK@orelse?$AA@
	DQ	0000000000000000H
PyId_generators DQ 0000000000000000H
	DQ	FLAT:??_C@_0L@FCNMNMNJ@generators?$AA@
	DQ	0000000000000000H
PyId_names DQ	0000000000000000H
	DQ	FLAT:??_C@_05FLNDGCKL@names?$AA@
	DQ	0000000000000000H
PyId_test DQ	0000000000000000H
	DQ	FLAT:??_C@_04CEJDCDCH@test?$AA@
	DQ	0000000000000000H
PyId_op	DQ	0000000000000000H
	DQ	FLAT:??_C@_02GMAKNDAG@op?$AA@
	DQ	0000000000000000H
PyId_args DQ	0000000000000000H
	DQ	FLAT:??_C@_04BFDDMJJI@args?$AA@
	DQ	0000000000000000H
PyId_name DQ	0000000000000000H
	DQ	FLAT:??_C@_04MEMAJGDJ@name?$AA@
	DQ	0000000000000000H
PyId_elt DQ	0000000000000000H
	DQ	FLAT:??_C@_03NINNKJGE@elt?$AA@
	DQ	0000000000000000H
PyId_elts DQ	0000000000000000H
	DQ	FLAT:??_C@_04EOBFFCNN@elts?$AA@
	DQ	0000000000000000H
PyId_target DQ	0000000000000000H
	DQ	FLAT:??_C@_06JJLAMBGK@target?$AA@
	DQ	0000000000000000H
PyId_col_offset DQ 0000000000000000H
	DQ	FLAT:??_C@_0L@ICBHJKOA@col_offset?$AA@
	DQ	0000000000000000H
PyId_lineno DQ	0000000000000000H
	DQ	FLAT:??_C@_06ILKIAHNN@lineno?$AA@
	DQ	0000000000000000H
PyId_arg DQ	0000000000000000H
	DQ	FLAT:??_C@_03CAOIPBNL@arg?$AA@
	DQ	0000000000000000H
PyId_s	DQ	0000000000000000H
	DQ	FLAT:??_C@_01LKDEMHDF@s?$AA@
	DQ	0000000000000000H
PyId_left DQ	0000000000000000H
	DQ	FLAT:??_C@_04GOOOJOPP@left?$AA@
	DQ	0000000000000000H
PyId_values DQ	0000000000000000H
	DQ	FLAT:??_C@_06GEKOPAHD@values?$AA@
	DQ	0000000000000000H
PyId_iter DQ	0000000000000000H
	DQ	FLAT:??_C@_04BKLHDIKK@iter?$AA@
	DQ	0000000000000000H
PyId_targets DQ	0000000000000000H
	DQ	FLAT:??_C@_07KJOMBCLC@targets?$AA@
	DQ	0000000000000000H
PyId_kwargs DQ	0000000000000000H
	DQ	FLAT:??_C@_06NBOLMEJN@kwargs?$AA@
	DQ	0000000000000000H
PyId_starargs DQ 0000000000000000H
	DQ	FLAT:??_C@_08LPAHKBMK@starargs?$AA@
	DQ	0000000000000000H
PyId_keywords DQ 0000000000000000H
	DQ	FLAT:??_C@_08KBIEDDDE@keywords?$AA@
	DQ	0000000000000000H
PyId_decorator_list DQ 0000000000000000H
	DQ	FLAT:??_C@_0P@LMCHOPJJ@decorator_list?$AA@
	DQ	0000000000000000H
PyId_optional_vars DQ 0000000000000000H
	DQ	FLAT:??_C@_0O@PNIBPJAK@optional_vars?$AA@
	DQ	0000000000000000H
PyId_context_expr DQ 0000000000000000H
	DQ	FLAT:??_C@_0N@NOGLGHPG@context_expr?$AA@
	DQ	0000000000000000H
PyId_asname DQ	0000000000000000H
	DQ	FLAT:??_C@_06DPPJIGGE@asname?$AA@
	DQ	0000000000000000H
PyId_annotation DQ 0000000000000000H
	DQ	FLAT:??_C@_0L@HOGAMHHM@annotation?$AA@
	DQ	0000000000000000H
PyId_kw_defaults DQ 0000000000000000H
	DQ	FLAT:??_C@_0M@OHIOHNMJ@kw_defaults?$AA@
	DQ	0000000000000000H
PyId_defaults DQ 0000000000000000H
	DQ	FLAT:??_C@_08LMJEPNLL@defaults?$AA@
	DQ	0000000000000000H
PyId_kwargannotation DQ 0000000000000000H
	DQ	FLAT:??_C@_0BA@JACLGMFO@kwargannotation?$AA@
	DQ	0000000000000000H
PyId_kwarg DQ	0000000000000000H
	DQ	FLAT:??_C@_05JJKPEMCC@kwarg?$AA@
	DQ	0000000000000000H
PyId_kwonlyargs DQ 0000000000000000H
	DQ	FLAT:??_C@_0L@PJHGIGJA@kwonlyargs?$AA@
	DQ	0000000000000000H
PyId_varargannotation DQ 0000000000000000H
	DQ	FLAT:??_C@_0BB@LBMLKLGK@varargannotation?$AA@
	DQ	0000000000000000H
PyId_vararg DQ	0000000000000000H
	DQ	FLAT:??_C@_06FDMCHLPI@vararg?$AA@
	DQ	0000000000000000H
PyId_type DQ	0000000000000000H
	DQ	FLAT:??_C@_04GPMDFGEJ@type?$AA@
	DQ	0000000000000000H
PyId_ifs DQ	0000000000000000H
	DQ	FLAT:??_C@_03NANNAFMN@ifs?$AA@
	DQ	0000000000000000H
PyId_dims DQ	0000000000000000H
	DQ	FLAT:??_C@_04FHFMBDKA@dims?$AA@
	DQ	0000000000000000H
PyId_step DQ	0000000000000000H
	DQ	FLAT:??_C@_04CNBNFAL@step?$AA@
	DQ	0000000000000000H
PyId_upper DQ	0000000000000000H
	DQ	FLAT:??_C@_05NECKJAMC@upper?$AA@
	DQ	0000000000000000H
PyId_lower DQ	0000000000000000H
	DQ	FLAT:??_C@_05IPJEPLHL@lower?$AA@
	DQ	0000000000000000H
PyId_id	DQ	0000000000000000H
	DQ	FLAT:??_C@_02EGCJHIOB@id?$AA@
	DQ	0000000000000000H
PyId_slice DQ	0000000000000000H
	DQ	FLAT:??_C@_05ILHMOJGN@slice?$AA@
	DQ	0000000000000000H
PyId_attr DQ	0000000000000000H
	DQ	FLAT:??_C@_04DHCDLKCM@attr?$AA@
	DQ	0000000000000000H
PyId_n	DQ	0000000000000000H
	DQ	FLAT:??_C@_01EFFIKLCJ@n?$AA@
	DQ	0000000000000000H
PyId_func DQ	0000000000000000H
	DQ	FLAT:??_C@_04HPNHAEOP@func?$AA@
	DQ	0000000000000000H
PyId_comparators DQ 0000000000000000H
	DQ	FLAT:??_C@_0M@FEBOCDAK@comparators?$AA@
	DQ	0000000000000000H
PyId_ops DQ	0000000000000000H
	DQ	FLAT:??_C@_03ONBNIFND@ops?$AA@
	DQ	0000000000000000H
PyId_key DQ	0000000000000000H
	DQ	FLAT:??_C@_03ICHNJLJF@key?$AA@
	DQ	0000000000000000H
PyId_keys DQ	0000000000000000H
	DQ	FLAT:??_C@_04IEPFDAGF@keys?$AA@
	DQ	0000000000000000H
PyId_operand DQ	0000000000000000H
	DQ	FLAT:??_C@_07GEBHLHAD@operand?$AA@
	DQ	0000000000000000H
PyId_right DQ	0000000000000000H
	DQ	FLAT:??_C@_05DHJDAOHK@right?$AA@
	DQ	0000000000000000H
PyId_level DQ	0000000000000000H
	DQ	FLAT:??_C@_05KJNJLLGA@level?$AA@
	DQ	0000000000000000H
PyId_module DQ	0000000000000000H
	DQ	FLAT:??_C@_06BIEEJMKO@module?$AA@
	DQ	0000000000000000H
PyId_msg DQ	0000000000000000H
	DQ	FLAT:??_C@_03GLPMCEFE@msg?$AA@
	DQ	0000000000000000H
PyId_finalbody DQ 0000000000000000H
	DQ	FLAT:??_C@_09JGEOIMID@finalbody?$AA@
	DQ	0000000000000000H
PyId_handlers DQ 0000000000000000H
	DQ	FLAT:??_C@_08KJLNBJEK@handlers?$AA@
	DQ	0000000000000000H
PyId_cause DQ	0000000000000000H
	DQ	FLAT:??_C@_05HGNDGEBA@cause?$AA@
	DQ	0000000000000000H
PyId_exc DQ	0000000000000000H
	DQ	FLAT:??_C@_03MGHBCGFO@exc?$AA@
	DQ	0000000000000000H
PyId_items DQ	0000000000000000H
	DQ	FLAT:??_C@_05CFHBDDLG@items?$AA@
	DQ	0000000000000000H
PyId_bases DQ	0000000000000000H
	DQ	FLAT:??_C@_05JMNHICHM@bases?$AA@
	DQ	0000000000000000H
PyId_returns DQ	0000000000000000H
	DQ	FLAT:??_C@_07ILMKFBFJ@returns?$AA@
	DQ	0000000000000000H
?PyId__attributes@?1??add_attributes@@9@9 DQ 0000000000000000H ; `add_attributes'::`2'::PyId__attributes
	DQ	FLAT:??_C@_0M@CDHEEICO@_attributes?$AA@
	DQ	0000000000000000H
?PyId___dict__@?1??ast_type_reduce@@9@9 DQ 0000000000000000H ; `ast_type_reduce'::`2'::PyId___dict__
	DQ	FLAT:??_C@_08IBFKALI@__dict__?$AA@
	DQ	0000000000000000H
?PyId__fields@?1??ast_type_init@@9@9 DQ 0000000000000000H ; `ast_type_init'::`2'::PyId__fields
	DQ	FLAT:??_C@_07LKKIBPPO@_fields?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_04IEJGKNJ@body?$AA@
CONST	SEGMENT
??_C@_04IEJGKNJ@body?$AA@ DB 'body', 00H		; `string'
CONST	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@GMLKPBDC@ast_dealloc?$AA@		; `string'
PUBLIC	??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$ast_dealloc DD imagerel ast_dealloc
	DD	imagerel ast_dealloc+59
	DD	imagerel $unwind$ast_dealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$ast_dealloc DD imagerel ast_dealloc+59
	DD	imagerel ast_dealloc+182
	DD	imagerel $chain$0$ast_dealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$ast_dealloc DD imagerel ast_dealloc+182
	DD	imagerel ast_dealloc+201
	DD	imagerel $chain$1$ast_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$ast_dealloc DD 021H
	DD	imagerel ast_dealloc
	DD	imagerel ast_dealloc+59
	DD	imagerel $unwind$ast_dealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$ast_dealloc DD 020521H
	DD	083405H
	DD	imagerel ast_dealloc
	DD	imagerel ast_dealloc+59
	DD	imagerel $unwind$ast_dealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast_dealloc DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT ??_C@_0M@GMLKPBDC@ast_dealloc?$AA@
CONST	SEGMENT
??_C@_0M@GMLKPBDC@ast_dealloc?$AA@ DB 'ast_dealloc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
CONST	SEGMENT
??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@ DB '..\Python\Python'
	DB	'-ast.c', 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\python-ast.c
CONST	ENDS
;	COMDAT ast_dealloc
_TEXT	SEGMENT
self$ = 64
ast_dealloc PROC					; COMDAT

; 465  : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 466  :     Py_CLEAR(self->dict);

  00006	4c 8b 49 60	 mov	 r9, QWORD PTR [rcx+96]
  0000a	48 8b f9	 mov	 rdi, rcx
  0000d	4d 85 c9	 test	 r9, r9
  00010	0f 84 a0 00 00
	00		 je	 $LN3@ast_deallo
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@GMLKPBDC@ast_dealloc?$AA@
  00024	41 b8 d2 01 00
	00		 mov	 r8d, 466		; 000001d2H
  0002a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00032	e8 00 00 00 00	 call	 _PyParallel_Guard
  00037	85 c0		 test	 eax, eax
  00039	75 7b		 jne	 SHORT $LN3@ast_deallo
  0003b	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00040	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  00044	48 c7 47 60 00
	00 00 00	 mov	 QWORD PTR [rdi+96], 0
  0004c	e8 00 00 00 00	 call	 _Py_PXCTX
  00051	85 c0		 test	 eax, eax
  00053	75 5c		 jne	 SHORT $LN18@ast_deallo
  00055	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00059	a8 20		 test	 al, 32			; 00000020H
  0005b	75 4c		 jne	 SHORT $LN11@ast_deallo
  0005d	84 c0		 test	 al, al
  0005f	78 48		 js	 SHORT $LN11@ast_deallo
  00061	a8 02		 test	 al, 2
  00063	75 4c		 jne	 SHORT $LN18@ast_deallo
  00065	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00069	75 46		 jne	 SHORT $LN18@ast_deallo
  0006b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00072	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00079	4c 8b cb	 mov	 r9, rbx
  0007c	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00082	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0008a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0008f	48 8b cb	 mov	 rcx, rbx
  00092	85 c0		 test	 eax, eax
  00094	74 07		 je	 SHORT $LN16@ast_deallo
  00096	e8 00 00 00 00	 call	 _Px_Dealloc
  0009b	eb 14		 jmp	 SHORT $LN18@ast_deallo
$LN16@ast_deallo:
  0009d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000a1	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000a7	eb 08		 jmp	 SHORT $LN18@ast_deallo
$LN11@ast_deallo:
  000a9	48 8b cb	 mov	 rcx, rbx
  000ac	e8 00 00 00 00	 call	 Px_DecRef
$LN18@ast_deallo:
  000b1	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN3@ast_deallo:

; 467  :     Py_TYPE(self)->tp_free(self);

  000b6	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000ba	48 8b cf	 mov	 rcx, rdi

; 468  : }

  000bd	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c1	5f		 pop	 rdi
  000c2	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
ast_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@BLIHGBGO@ast_traverse?$AA@		; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$ast_traverse DD imagerel ast_traverse
	DD	imagerel ast_traverse+97
	DD	imagerel $unwind$ast_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0N@BLIHGBGO@ast_traverse?$AA@
CONST	SEGMENT
??_C@_0N@BLIHGBGO@ast_traverse?$AA@ DB 'ast_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ast_traverse
_TEXT	SEGMENT
self$ = 48
visit$ = 56
arg$ = 64
ast_traverse PROC					; COMDAT

; 472  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 473  :     Py_VISIT(self->dict);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN3@ast_traver
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BLIHGBGO@ast_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 d9 01 00
	00		 mov	 r8d, 473		; 000001d9H
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@ast_traver:
  0003d	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN5@ast_traver
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 02		 jne	 SHORT $LN7@ast_traver
$LN5@ast_traver:

; 474  :     return 0;

  0004f	33 c0		 xor	 eax, eax
$LN7@ast_traver:

; 475  : }

  00051	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00056	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0005b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005f	5f		 pop	 rdi
  00060	c3		 ret	 0
ast_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_09JMLPFLAJ@ast_clear?$AA@			; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$ast_clear DD imagerel ast_clear
	DD	imagerel ast_clear+63
	DD	imagerel $unwind$ast_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$ast_clear DD imagerel ast_clear+63
	DD	imagerel ast_clear+169
	DD	imagerel $chain$0$ast_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$ast_clear DD imagerel ast_clear+169
	DD	imagerel ast_clear+190
	DD	imagerel $chain$2$ast_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$ast_clear DD imagerel ast_clear+190
	DD	imagerel ast_clear+203
	DD	imagerel $chain$4$ast_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$ast_clear DD imagerel ast_clear+203
	DD	imagerel ast_clear+209
	DD	imagerel $chain$5$ast_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$ast_clear DD 021H
	DD	imagerel ast_clear
	DD	imagerel ast_clear+63
	DD	imagerel $unwind$ast_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$ast_clear DD 020021H
	DD	083400H
	DD	imagerel ast_clear
	DD	imagerel ast_clear+63
	DD	imagerel $unwind$ast_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$ast_clear DD 020021H
	DD	083400H
	DD	imagerel ast_clear
	DD	imagerel ast_clear+63
	DD	imagerel $unwind$ast_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$ast_clear DD 020521H
	DD	083405H
	DD	imagerel ast_clear
	DD	imagerel ast_clear+63
	DD	imagerel $unwind$ast_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast_clear DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT ??_C@_09JMLPFLAJ@ast_clear?$AA@
CONST	SEGMENT
??_C@_09JMLPFLAJ@ast_clear?$AA@ DB 'ast_clear', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\python-ast.c
CONST	ENDS
;	COMDAT ast_clear
_TEXT	SEGMENT
self$ = 64
ast_clear PROC						; COMDAT

; 479  : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 480  :     Py_CLEAR(self->dict);

  00006	4c 8b 49 60	 mov	 r9, QWORD PTR [rcx+96]
  0000a	48 8b f9	 mov	 rdi, rcx
  0000d	4d 85 c9	 test	 r9, r9
  00010	0f 84 b5 00 00
	00		 je	 $LN3@ast_clear
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09JMLPFLAJ@ast_clear?$AA@
  00024	41 b8 e0 01 00
	00		 mov	 r8d, 480		; 000001e0H
  0002a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00032	e8 00 00 00 00	 call	 _PyParallel_Guard
  00037	85 c0		 test	 eax, eax
  00039	0f 85 8c 00 00
	00		 jne	 $LN3@ast_clear
  0003f	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00044	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  00048	48 c7 47 60 00
	00 00 00	 mov	 QWORD PTR [rdi+96], 0
  00050	e8 00 00 00 00	 call	 _Py_PXCTX
  00055	85 c0		 test	 eax, eax
  00057	75 6d		 jne	 SHORT $LN18@ast_clear
  00059	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0005d	a8 20		 test	 al, 32			; 00000020H
  0005f	75 5d		 jne	 SHORT $LN11@ast_clear
  00061	84 c0		 test	 al, al
  00063	78 59		 js	 SHORT $LN11@ast_clear
  00065	a8 02		 test	 al, 2
  00067	75 5d		 jne	 SHORT $LN18@ast_clear
  00069	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0006d	75 57		 jne	 SHORT $LN18@ast_clear
  0006f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00076	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0007d	4c 8b cb	 mov	 r9, rbx
  00080	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00086	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0008e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00093	48 8b cb	 mov	 rcx, rbx
  00096	85 c0		 test	 eax, eax
  00098	74 0f		 je	 SHORT $LN16@ast_clear
  0009a	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 481  : }

  0009f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a3	5f		 pop	 rdi
  000a4	e9 00 00 00 00	 jmp	 _Px_Dealloc

; 480  :     Py_CLEAR(self->dict);

$LN16@ast_clear:
  000a9	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000ad	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 481  : }

  000b2	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b6	5f		 pop	 rdi
  000b7	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]

; 480  :     Py_CLEAR(self->dict);

$LN11@ast_clear:
  000be	48 8b cb	 mov	 rcx, rbx
  000c1	e8 00 00 00 00	 call	 Px_DecRef
$LN18@ast_clear:
  000c6	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN3@ast_clear:

; 481  : }

  000cb	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000cf	5f		 pop	 rdi
  000d0	c3		 ret	 0
ast_clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DF@BNALLACH@?$CF?4400s?5constructor?5takes?5?$CFs?$CFzd?5p@ ; `string'
PUBLIC	??_C@_0N@IJFENPKG@either?50?5or?5?$AA@		; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
EXTRN	PyDict_Next:PROC
EXTRN	PyObject_SetAttr:PROC
EXTRN	PySequence_GetItem:PROC
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PySequence_Size:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	_PyObject_GetAttrId:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$ast_type_init DD imagerel ast_type_init
	DD	imagerel ast_type_init+534
	DD	imagerel $unwind$ast_type_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast_type_init DD 081001H
	DD	0f3410H
	DD	0d00c7210H
	DD	07008c00aH
	DD	050066007H
xdata	ENDS
;	COMDAT ??_C@_0DF@BNALLACH@?$CF?4400s?5constructor?5takes?5?$CFs?$CFzd?5p@
CONST	SEGMENT
??_C@_0DF@BNALLACH@?$CF?4400s?5constructor?5takes?5?$CFs?$CFzd?5p@ DB '%.'
	DB	'400s constructor takes %s%zd positional argument%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IJFENPKG@either?50?5or?5?$AA@
CONST	SEGMENT
??_C@_0N@IJFENPKG@either?50?5or?5?$AA@ DB 'either 0 or ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\python-ast.c
CONST	ENDS
;	COMDAT ast_type_init
_TEXT	SEGMENT
key$ = 48
i$ = 112
self$ = 112
args$ = 120
kw$ = 128
value$ = 136
ast_type_init PROC					; COMDAT

; 485  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	41 54		 push	 r12
  0000a	41 55		 push	 r13
  0000c	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 486  :     _Py_IDENTIFIER(_fields);
; 487  :     Py_ssize_t i, numfields = 0;
; 488  :     int res = -1;
; 489  :     PyObject *key, *value, *fields;
; 490  :     fields = _PyObject_GetAttrId((PyObject*)Py_TYPE(self), &PyId__fields);

  00010	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR _tls_index
  00017	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00020	48 8b ea	 mov	 rbp, rdx
  00023	4c 8b e1	 mov	 r12, rcx
  00026	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  0002a	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId__fields@?1??ast_type_init@@9@9
  0002f	4a 03 14 c8	 add	 rdx, QWORD PTR [rax+r9*8]
  00033	4d 8b e8	 mov	 r13, r8
  00036	33 f6		 xor	 esi, esi
  00038	83 cb ff	 or	 ebx, -1
  0003b	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00040	48 8b f8	 mov	 rdi, rax

; 491  :     if (!fields)

  00043	48 85 c0	 test	 rax, rax
  00046	75 07		 jne	 SHORT $LN38@ast_type_i

; 492  :         PyErr_Clear();

  00048	e8 00 00 00 00	 call	 PyErr_Clear

; 493  :     if (fields) {

  0004d	eb 15		 jmp	 SHORT $LN16@ast_type_i
$LN38@ast_type_i:

; 494  :         numfields = PySequence_Size(fields);

  0004f	48 8b c8	 mov	 rcx, rax
  00052	e8 00 00 00 00	 call	 PySequence_Size
  00057	48 8b f0	 mov	 rsi, rax

; 495  :         if (numfields == -1)

  0005a	48 83 f8 ff	 cmp	 rax, -1
  0005e	0f 84 35 01 00
	00		 je	 $cleanup$21701
$LN16@ast_type_i:

; 496  :             goto cleanup;
; 497  :     }
; 498  :     res = 0; /* if no error occurs, this stays 0 to the end */
; 499  :     if (PyTuple_GET_SIZE(args) > 0) {

  00064	48 8b 4d 60	 mov	 rcx, QWORD PTR [rbp+96]
  00068	33 db		 xor	 ebx, ebx
  0006a	48 85 c9	 test	 rcx, rcx
  0006d	0f 8e ba 00 00
	00		 jle	 $LN11@ast_type_i

; 500  :         if (numfields != PyTuple_GET_SIZE(args)) {

  00073	48 3b f1	 cmp	 rsi, rcx
  00076	74 52		 je	 SHORT $LN14@ast_type_i

; 501  :             PyErr_Format(PyExc_TypeError, "%.400s constructor takes %s"
; 502  :                          "%zd positional argument%s",
; 503  :                          Py_TYPE(self)->tp_name,
; 504  :                          numfields == 0 ? "" : "either 0 or ",
; 505  :                          numfields, numfields == 1 ? "" : "s");

  00078	4d 8b 44 24 58	 mov	 r8, QWORD PTR [r12+88]
  0007d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00084	48 83 fe 01	 cmp	 rsi, 1
  00088	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  0008c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_01LKDEMHDF@s?$AA@
  00093	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_0N@IJFENPKG@either?50?5or?5?$AA@
  0009a	48 0f 44 c1	 cmove	 rax, rcx
  0009e	48 85 f6	 test	 rsi, rsi
  000a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DF@BNALLACH@?$CF?4400s?5constructor?5takes?5?$CFs?$CFzd?5p@
  000a8	4c 0f 44 c9	 cmove	 r9, rcx
  000ac	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000b3	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000b8	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  000bd	e8 00 00 00 00	 call	 PyErr_Format
$LN34@ast_type_i:

; 506  :             res = -1;

  000c2	83 cb ff	 or	 ebx, -1

; 507  :             goto cleanup;

  000c5	e9 cf 00 00 00	 jmp	 $cleanup$21701
$LN14@ast_type_i:

; 508  :         }
; 509  :         for (i = 0; i < PyTuple_GET_SIZE(args); i++) {

  000ca	33 c0		 xor	 eax, eax
  000cc	48 89 44 24 70	 mov	 QWORD PTR i$[rsp], rax
  000d1	48 85 c9	 test	 rcx, rcx
  000d4	7e 57		 jle	 SHORT $LN11@ast_type_i
  000d6	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL13@ast_type_i:

; 510  :             /* cannot be reached when fields is NULL */
; 511  :             PyObject *name = PySequence_GetItem(fields, i);

  000e0	48 8b d0	 mov	 rdx, rax
  000e3	48 8b cf	 mov	 rcx, rdi
  000e6	e8 00 00 00 00	 call	 PySequence_GetItem
  000eb	48 8b f0	 mov	 rsi, rax

; 512  :             if (!name) {

  000ee	48 85 c0	 test	 rax, rax
  000f1	74 cf		 je	 SHORT $LN34@ast_type_i

; 513  :                 res = -1;
; 514  :                 goto cleanup;
; 515  :             }
; 516  :             res = PyObject_SetAttr(self, name, PyTuple_GET_ITEM(args, i));

  000f3	4c 8b 44 24 70	 mov	 r8, QWORD PTR i$[rsp]
  000f8	48 8b d0	 mov	 rdx, rax
  000fb	49 8b cc	 mov	 rcx, r12
  000fe	4e 8b 44 c5 70	 mov	 r8, QWORD PTR [rbp+r8*8+112]
  00103	e8 00 00 00 00	 call	 PyObject_SetAttr

; 517  :             Py_DECREF(name);

  00108	48 8b ce	 mov	 rcx, rsi
  0010b	8b d8		 mov	 ebx, eax
  0010d	e8 00 00 00 00	 call	 _Py_DecRef

; 518  :             if (res < 0)

  00112	85 db		 test	 ebx, ebx
  00114	0f 88 7f 00 00
	00		 js	 $cleanup$21701

; 508  :         }
; 509  :         for (i = 0; i < PyTuple_GET_SIZE(args); i++) {

  0011a	48 8b 44 24 70	 mov	 rax, QWORD PTR i$[rsp]
  0011f	48 ff c0	 inc	 rax
  00122	48 89 44 24 70	 mov	 QWORD PTR i$[rsp], rax
  00127	48 3b 45 60	 cmp	 rax, QWORD PTR [rbp+96]
  0012b	7c b3		 jl	 SHORT $LL13@ast_type_i
$LN11@ast_type_i:

; 519  :                 goto cleanup;
; 520  :         }
; 521  :     }
; 522  :     if (kw) {

  0012d	4d 85 ed	 test	 r13, r13
  00130	74 67		 je	 SHORT $cleanup$21701

; 523  :         i = 0;  /* needed by PyDict_Next */
; 524  :         while (PyDict_Next(kw, &i, &key, &value)) {

  00132	4c 8d 8c 24 88
	00 00 00	 lea	 r9, QWORD PTR value$[rsp]
  0013a	4c 8d 44 24 30	 lea	 r8, QWORD PTR key$[rsp]
  0013f	48 8d 54 24 70	 lea	 rdx, QWORD PTR i$[rsp]
  00144	49 8b cd	 mov	 rcx, r13
  00147	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00150	e8 00 00 00 00	 call	 PyDict_Next
  00155	85 c0		 test	 eax, eax
  00157	74 40		 je	 SHORT $cleanup$21701
  00159	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@ast_type_i:

; 525  :             res = PyObject_SetAttr(self, key, value);

  00160	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR value$[rsp]
  00168	48 8b 54 24 30	 mov	 rdx, QWORD PTR key$[rsp]
  0016d	49 8b cc	 mov	 rcx, r12
  00170	e8 00 00 00 00	 call	 PyObject_SetAttr
  00175	8b d8		 mov	 ebx, eax

; 526  :             if (res < 0)

  00177	85 c0		 test	 eax, eax
  00179	78 1e		 js	 SHORT $cleanup$21701

; 523  :         i = 0;  /* needed by PyDict_Next */
; 524  :         while (PyDict_Next(kw, &i, &key, &value)) {

  0017b	4c 8d 8c 24 88
	00 00 00	 lea	 r9, QWORD PTR value$[rsp]
  00183	4c 8d 44 24 30	 lea	 r8, QWORD PTR key$[rsp]
  00188	48 8d 54 24 70	 lea	 rdx, QWORD PTR i$[rsp]
  0018d	49 8b cd	 mov	 rcx, r13
  00190	e8 00 00 00 00	 call	 PyDict_Next
  00195	85 c0		 test	 eax, eax
  00197	75 c7		 jne	 SHORT $LL7@ast_type_i
$cleanup$21701:

; 527  :                 goto cleanup;
; 528  :         }
; 529  :     }
; 530  :   cleanup:
; 531  :     Py_XDECREF(fields);

  00199	48 85 ff	 test	 rdi, rdi
  0019c	74 65		 je	 SHORT $LN41@ast_type_i
  0019e	e8 00 00 00 00	 call	 _Py_PXCTX
  001a3	85 c0		 test	 eax, eax
  001a5	75 5c		 jne	 SHORT $LN41@ast_type_i
  001a7	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  001ab	a8 20		 test	 al, 32			; 00000020H
  001ad	75 4c		 jne	 SHORT $LN25@ast_type_i
  001af	84 c0		 test	 al, al
  001b1	78 48		 js	 SHORT $LN25@ast_type_i
  001b3	a8 02		 test	 al, 2
  001b5	75 4c		 jne	 SHORT $LN41@ast_type_i
  001b7	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  001bb	75 46		 jne	 SHORT $LN41@ast_type_i
  001bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  001cb	4c 8b cf	 mov	 r9, rdi
  001ce	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001d4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001dc	e8 00 00 00 00	 call	 _PyParallel_Guard
  001e1	48 8b cf	 mov	 rcx, rdi
  001e4	85 c0		 test	 eax, eax
  001e6	74 07		 je	 SHORT $LN30@ast_type_i
  001e8	e8 00 00 00 00	 call	 _Px_Dealloc
  001ed	eb 14		 jmp	 SHORT $LN41@ast_type_i
$LN30@ast_type_i:
  001ef	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  001f3	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001f9	eb 08		 jmp	 SHORT $LN41@ast_type_i
$LN25@ast_type_i:
  001fb	48 8b cf	 mov	 rcx, rdi
  001fe	e8 00 00 00 00	 call	 Px_DecRef
$LN41@ast_type_i:

; 532  :     return res;

  00203	8b c3		 mov	 eax, ebx

; 533  : }

  00205	48 8b 5c 24 78	 mov	 rbx, QWORD PTR [rsp+120]
  0020a	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0020e	41 5d		 pop	 r13
  00210	41 5c		 pop	 r12
  00212	5f		 pop	 rdi
  00213	5e		 pop	 rsi
  00214	5d		 pop	 rbp
  00215	c3		 ret	 0
ast_type_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_04MGIFGOAO@O?$CI?$CJO?$AA@		; `string'
PUBLIC	??_C@_03GPNEOADL@O?$CI?$CJ?$AA@			; `string'
EXTRN	Py_BuildValue:PROC
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_AttributeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$ast_type_reduce DD imagerel ast_type_reduce
	DD	imagerel ast_type_reduce+155
	DD	imagerel $unwind$ast_type_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast_type_reduce DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_04MGIFGOAO@O?$CI?$CJO?$AA@
CONST	SEGMENT
??_C@_04MGIFGOAO@O?$CI?$CJO?$AA@ DB 'O()O', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03GPNEOADL@O?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_03GPNEOADL@O?$CI?$CJ?$AA@ DB 'O()', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ast_type_reduce
_TEXT	SEGMENT
self$ = 48
unused$ = 56
ast_type_reduce PROC					; COMDAT

; 538  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 539  :     PyObject *res;
; 540  :     _Py_IDENTIFIER(__dict__);
; 541  :     PyObject *dict = _PyObject_GetAttrId(self, &PyId___dict__);

  0000a	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  00011	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0001a	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId___dict__@?1??ast_type_reduce@@9@9
  0001f	4a 03 14 c0	 add	 rdx, QWORD PTR [rax+r8*8]
  00023	48 8b d9	 mov	 rbx, rcx
  00026	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0002b	48 8b f8	 mov	 rdi, rax

; 542  :     if (dict == NULL) {

  0002e	48 85 c0	 test	 rax, rax
  00031	75 3c		 jne	 SHORT $LN7@ast_type_r

; 543  :         if (PyErr_ExceptionMatches(PyExc_AttributeError))

  00033	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  0003a	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  0003f	85 c0		 test	 eax, eax
  00041	74 1f		 je	 SHORT $LN3@ast_type_r

; 544  :             PyErr_Clear();

  00043	e8 00 00 00 00	 call	 PyErr_Clear

; 552  :     }
; 553  :     return Py_BuildValue("O()", Py_TYPE(self));

  00048	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03GPNEOADL@O?$CI?$CJ?$AA@

; 554  : }

  00053	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00058	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005c	5f		 pop	 rdi
  0005d	e9 00 00 00 00	 jmp	 Py_BuildValue
$LN3@ast_type_r:

; 545  :         else
; 546  :             return NULL;

  00062	33 c0		 xor	 eax, eax

; 554  : }

  00064	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00069	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006d	5f		 pop	 rdi
  0006e	c3		 ret	 0
$LN7@ast_type_r:

; 547  :     }
; 548  :     if (dict) {
; 549  :         res = Py_BuildValue("O()O", Py_TYPE(self), dict);

  0006f	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00073	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04MGIFGOAO@O?$CI?$CJO?$AA@
  0007a	4c 8b c0	 mov	 r8, rax
  0007d	e8 00 00 00 00	 call	 Py_BuildValue

; 550  :         Py_DECREF(dict);

  00082	48 8b cf	 mov	 rcx, rdi
  00085	48 8b d8	 mov	 rbx, rax
  00088	e8 00 00 00 00	 call	 _Py_DecRef

; 551  :         return res;

  0008d	48 8b c3	 mov	 rax, rbx

; 554  : }

  00090	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00095	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00099	5f		 pop	 rdi
  0009a	c3		 ret	 0
ast_type_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@LNCJCPDP@__module__?$AA@		; `string'
PUBLIC	??_C@_0L@EEPGGGII@s?$CIO?$CJ?$HLsOss?$HN?$AA@	; `string'
EXTRN	PyObject_CallFunction:PROC
EXTRN	PyUnicode_FromString:PROC
EXTRN	PyTuple_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$make_type DD imagerel make_type
	DD	imagerel make_type+52
	DD	imagerel $unwind$make_type
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$make_type DD imagerel make_type+52
	DD	imagerel make_type+431
	DD	imagerel $chain$1$make_type
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$make_type DD imagerel make_type+431
	DD	imagerel make_type+452
	DD	imagerel $chain$2$make_type
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$make_type DD 021H
	DD	imagerel make_type
	DD	imagerel make_type+52
	DD	imagerel $unwind$make_type
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$make_type DD 040a21H
	DD	0d640aH
	DD	0c5405H
	DD	imagerel make_type
	DD	imagerel make_type+52
	DD	imagerel $unwind$make_type
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$make_type DD 081401H
	DD	0f7414H
	DD	0e3414H
	DD	0e0107214H
	DD	0c00cd00eH
xdata	ENDS
;	COMDAT ??_C@_0L@LNCJCPDP@__module__?$AA@
CONST	SEGMENT
??_C@_0L@LNCJCPDP@__module__?$AA@ DB '__module__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EEPGGGII@s?$CIO?$CJ?$HLsOss?$HN?$AA@
CONST	SEGMENT
??_C@_0L@EEPGGGII@s?$CIO?$CJ?$HLsOss?$HN?$AA@ DB 's(O){sOss}', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\python-ast.c
CONST	ENDS
;	COMDAT make_type
_TEXT	SEGMENT
type$ = 96
base$ = 104
fields$ = 112
num_fields$ = 120
make_type PROC						; COMDAT

; 610  : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0000a	41 54		 push	 r12
  0000c	41 55		 push	 r13
  0000e	41 56		 push	 r14
  00010	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 611  :     PyObject *fnames, *result;
; 612  :     int i;
; 613  :     fnames = PyTuple_New(num_fields);

  00014	4d 63 e1	 movsxd	 r12, r9d
  00017	4c 8b f1	 mov	 r14, rcx
  0001a	49 8b f8	 mov	 rdi, r8
  0001d	49 8b cc	 mov	 rcx, r12
  00020	4c 8b ea	 mov	 r13, rdx
  00023	e8 00 00 00 00	 call	 PyTuple_New
  00028	48 8b d8	 mov	 rbx, rax

; 614  :     if (!fnames) return NULL;

  0002b	48 85 c0	 test	 rax, rax
  0002e	0f 84 7b 01 00
	00		 je	 $LN6@make_type
$LN5@make_type:
  00034	48 89 6c 24 60	 mov	 QWORD PTR [rsp+96], rbp
  00039	48 89 74 24 68	 mov	 QWORD PTR [rsp+104], rsi

; 615  :     for (i = 0; i < num_fields; i++) {

  0003e	33 f6		 xor	 esi, esi
  00040	4d 85 e4	 test	 r12, r12
  00043	7e 2d		 jle	 SHORT $LN2@make_type
  00045	48 8b e8	 mov	 rbp, rax
  00048	48 2b ef	 sub	 rbp, rdi
  0004b	0f 1f 44 00 00	 npad	 5
$LL4@make_type:

; 616  :         PyObject *field = PyUnicode_FromString(fields[i]);

  00050	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  00053	e8 00 00 00 00	 call	 PyUnicode_FromString

; 617  :         if (!field) {

  00058	48 85 c0	 test	 rax, rax
  0005b	0f 84 c0 00 00
	00		 je	 $LN31@make_type

; 620  :         }
; 621  :         PyTuple_SET_ITEM(fnames, i, field);

  00061	48 ff c6	 inc	 rsi
  00064	48 89 44 2f 70	 mov	 QWORD PTR [rdi+rbp+112], rax
  00069	48 83 c7 08	 add	 rdi, 8
  0006d	49 3b f4	 cmp	 rsi, r12
  00070	7c de		 jl	 SHORT $LL4@make_type
$LN2@make_type:

; 622  :     }
; 623  :     result = PyObject_CallFunction((PyObject*)&PyType_Type, "s(O){sOss}",
; 624  :                     type, base, "_fields", fnames, "__module__", "_ast");

  00072	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04BNOAKKGF@_ast?$AA@
  00079	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@EEPGGGII@s?$CIO?$CJ?$HLsOss?$HN?$AA@
  00080	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyType_Type
  00087	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0008c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0L@LNCJCPDP@__module__?$AA@
  00093	4d 8b cd	 mov	 r9, r13
  00096	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0009b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_07LKKIBPPO@_fields?$AA@
  000a2	4d 8b c6	 mov	 r8, r14
  000a5	48 89 5c 24 28	 mov	 QWORD PTR [rsp+40], rbx
  000aa	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000af	e8 00 00 00 00	 call	 PyObject_CallFunction
  000b4	48 8b f8	 mov	 rdi, rax

; 625  :     Py_DECREF(fnames);

  000b7	e8 00 00 00 00	 call	 _Py_PXCTX
  000bc	85 c0		 test	 eax, eax
  000be	0f 85 de 00 00
	00		 jne	 $LN29@make_type
  000c4	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  000c8	f6 c1 20	 test	 cl, 32			; 00000020H
  000cb	0f 85 c9 00 00
	00		 jne	 $LN23@make_type
  000d1	84 c9		 test	 cl, cl
  000d3	0f 88 c1 00 00
	00		 js	 $LN23@make_type
  000d9	f6 c1 02	 test	 cl, 2
  000dc	0f 85 c0 00 00
	00		 jne	 $LN29@make_type
  000e2	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000e6	0f 85 b6 00 00
	00		 jne	 $LN29@make_type
  000ec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000fa	4c 8b cb	 mov	 r9, rbx
  000fd	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00103	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0010b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00110	48 8b cb	 mov	 rcx, rbx
  00113	85 c0		 test	 eax, eax
  00115	74 77		 je	 SHORT $LN28@make_type
  00117	e8 00 00 00 00	 call	 _Px_Dealloc
  0011c	e9 81 00 00 00	 jmp	 $LN29@make_type
$LN31@make_type:

; 618  :             Py_DECREF(fnames);

  00121	e8 00 00 00 00	 call	 _Py_PXCTX
  00126	85 c0		 test	 eax, eax
  00128	75 60		 jne	 SHORT $LN18@make_type
  0012a	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0012e	a8 20		 test	 al, 32			; 00000020H
  00130	75 50		 jne	 SHORT $LN12@make_type
  00132	84 c0		 test	 al, al
  00134	78 4c		 js	 SHORT $LN12@make_type
  00136	a8 02		 test	 al, 2
  00138	75 50		 jne	 SHORT $LN18@make_type
  0013a	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0013e	75 4a		 jne	 SHORT $LN18@make_type
  00140	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00147	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0014e	4c 8b cb	 mov	 r9, rbx
  00151	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00157	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0015f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00164	48 8b cb	 mov	 rcx, rbx
  00167	85 c0		 test	 eax, eax
  00169	74 09		 je	 SHORT $LN17@make_type
  0016b	e8 00 00 00 00	 call	 _Px_Dealloc

; 619  :             return NULL;

  00170	33 c0		 xor	 eax, eax
  00172	eb 31		 jmp	 SHORT $LN34@make_type

; 618  :             Py_DECREF(fnames);

$LN17@make_type:
  00174	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00178	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 619  :             return NULL;

  0017e	33 c0		 xor	 eax, eax
  00180	eb 23		 jmp	 SHORT $LN34@make_type

; 618  :             Py_DECREF(fnames);

$LN12@make_type:
  00182	48 8b cb	 mov	 rcx, rbx
  00185	e8 00 00 00 00	 call	 Px_DecRef
$LN18@make_type:

; 619  :             return NULL;

  0018a	33 c0		 xor	 eax, eax
  0018c	eb 17		 jmp	 SHORT $LN34@make_type

; 625  :     Py_DECREF(fnames);

$LN28@make_type:
  0018e	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00192	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00198	eb 08		 jmp	 SHORT $LN29@make_type
$LN23@make_type:
  0019a	48 8b cb	 mov	 rcx, rbx
  0019d	e8 00 00 00 00	 call	 Px_DecRef
$LN29@make_type:

; 626  :     return (PyTypeObject*)result;

  001a2	48 8b c7	 mov	 rax, rdi
$LN34@make_type:
  001a5	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
  001aa	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
$LN6@make_type:

; 627  : }

  001af	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  001b4	48 8b 7c 24 78	 mov	 rdi, QWORD PTR [rsp+120]
  001b9	48 83 c4 40	 add	 rsp, 64			; 00000040H
  001bd	41 5e		 pop	 r14
  001bf	41 5d		 pop	 r13
  001c1	41 5c		 pop	 r12
  001c3	c3		 ret	 0
make_type ENDP
_TEXT	ENDS
EXTRN	_PyObject_SetAttrId:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$add_attributes DD imagerel add_attributes
	DD	imagerel add_attributes+427
	DD	imagerel $unwind$add_attributes
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$add_attributes DD 0c4501H
	DD	0cd445H
	DD	0b6440H
	DD	0a543bH
	DD	0d340eH
	DD	0e00a520eH
	DD	07006c008H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\python-ast.c
xdata	ENDS
;	COMDAT add_attributes
_TEXT	SEGMENT
type$ = 80
attrs$ = 88
num_fields$ = 96
add_attributes PROC					; COMDAT

; 630  : {

  00000	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00005	57		 push	 rdi
  00006	41 54		 push	 r12
  00008	41 56		 push	 r14
  0000a	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 631  :     int i, result;
; 632  :     _Py_IDENTIFIER(_attributes);
; 633  :     PyObject *s, *l = PyTuple_New(num_fields);

  0000e	4d 63 e0	 movsxd	 r12, r8d
  00011	4c 8b f1	 mov	 r14, rcx
  00014	48 8b fa	 mov	 rdi, rdx
  00017	49 8b cc	 mov	 rcx, r12
  0001a	e8 00 00 00 00	 call	 PyTuple_New
  0001f	48 8b d8	 mov	 rbx, rax

; 634  :     if (!l)

  00022	48 85 c0	 test	 rax, rax
  00025	75 0f		 jne	 SHORT $LN5@add_attrib

; 647  : }

  00027	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  0002c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00030	41 5e		 pop	 r14
  00032	41 5c		 pop	 r12
  00034	5f		 pop	 rdi
  00035	c3		 ret	 0
$LN5@add_attrib:
  00036	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp
  0003b	48 89 74 24 58	 mov	 QWORD PTR [rsp+88], rsi
  00040	4c 89 6c 24 60	 mov	 QWORD PTR [rsp+96], r13

; 635  :         return 0;
; 636  :     for (i = 0; i < num_fields; i++) {

  00045	45 33 ed	 xor	 r13d, r13d
  00048	41 8b f5	 mov	 esi, r13d
  0004b	4d 85 e4	 test	 r12, r12
  0004e	7e 28		 jle	 SHORT $LN2@add_attrib
  00050	48 8b e8	 mov	 rbp, rax
  00053	48 2b ef	 sub	 rbp, rdi
$LL4@add_attrib:

; 637  :         s = PyUnicode_FromString(attrs[i]);

  00056	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  00059	e8 00 00 00 00	 call	 PyUnicode_FromString

; 638  :         if (!s) {

  0005e	48 85 c0	 test	 rax, rax
  00061	0f 84 a2 00 00
	00		 je	 $LN31@add_attrib

; 641  :         }
; 642  :         PyTuple_SET_ITEM(l, i, s);

  00067	48 ff c6	 inc	 rsi
  0006a	48 89 44 2f 70	 mov	 QWORD PTR [rdi+rbp+112], rax
  0006f	48 83 c7 08	 add	 rdi, 8
  00073	49 3b f4	 cmp	 rsi, r12
  00076	7c de		 jl	 SHORT $LL4@add_attrib
$LN2@add_attrib:

; 643  :     }
; 644  :     result = _PyObject_SetAttrId((PyObject*)type, &PyId__attributes, l) >= 0;

  00078	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0007e	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00087	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId__attributes@?1??add_attributes@@9@9
  0008c	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  00090	4c 8b c3	 mov	 r8, rbx
  00093	49 8b ce	 mov	 rcx, r14
  00096	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0009b	85 c0		 test	 eax, eax
  0009d	41 0f 99 c5	 setns	 r13b

; 645  :     Py_DECREF(l);

  000a1	e8 00 00 00 00	 call	 _Py_PXCTX
  000a6	85 c0		 test	 eax, eax
  000a8	0f 85 dc 00 00
	00		 jne	 $LN29@add_attrib
  000ae	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000b2	a8 20		 test	 al, 32			; 00000020H
  000b4	0f 85 c8 00 00
	00		 jne	 $LN23@add_attrib
  000ba	84 c0		 test	 al, al
  000bc	0f 88 c0 00 00
	00		 js	 $LN23@add_attrib
  000c2	a8 02		 test	 al, 2
  000c4	0f 85 c0 00 00
	00		 jne	 $LN29@add_attrib
  000ca	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000ce	0f 85 b6 00 00
	00		 jne	 $LN29@add_attrib
  000d4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000e2	4c 8b cb	 mov	 r9, rbx
  000e5	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000eb	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000f3	e8 00 00 00 00	 call	 _PyParallel_Guard
  000f8	48 8b cb	 mov	 rcx, rbx
  000fb	85 c0		 test	 eax, eax
  000fd	74 77		 je	 SHORT $LN28@add_attrib
  000ff	e8 00 00 00 00	 call	 _Px_Dealloc
  00104	e9 81 00 00 00	 jmp	 $LN29@add_attrib
$LN31@add_attrib:

; 639  :             Py_DECREF(l);

  00109	e8 00 00 00 00	 call	 _Py_PXCTX
  0010e	85 c0		 test	 eax, eax
  00110	75 60		 jne	 SHORT $LN18@add_attrib
  00112	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00116	a8 20		 test	 al, 32			; 00000020H
  00118	75 50		 jne	 SHORT $LN12@add_attrib
  0011a	84 c0		 test	 al, al
  0011c	78 4c		 js	 SHORT $LN12@add_attrib
  0011e	a8 02		 test	 al, 2
  00120	75 50		 jne	 SHORT $LN18@add_attrib
  00122	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00126	75 4a		 jne	 SHORT $LN18@add_attrib
  00128	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0012f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00136	4c 8b cb	 mov	 r9, rbx
  00139	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0013f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00147	e8 00 00 00 00	 call	 _PyParallel_Guard
  0014c	48 8b cb	 mov	 rcx, rbx
  0014f	85 c0		 test	 eax, eax
  00151	74 09		 je	 SHORT $LN17@add_attrib
  00153	e8 00 00 00 00	 call	 _Px_Dealloc

; 640  :             return 0;

  00158	33 c0		 xor	 eax, eax
  0015a	eb 31		 jmp	 SHORT $LN35@add_attrib

; 639  :             Py_DECREF(l);

$LN17@add_attrib:
  0015c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00160	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 640  :             return 0;

  00166	33 c0		 xor	 eax, eax
  00168	eb 23		 jmp	 SHORT $LN35@add_attrib

; 639  :             Py_DECREF(l);

$LN12@add_attrib:
  0016a	48 8b cb	 mov	 rcx, rbx
  0016d	e8 00 00 00 00	 call	 Px_DecRef
$LN18@add_attrib:

; 640  :             return 0;

  00172	33 c0		 xor	 eax, eax
  00174	eb 17		 jmp	 SHORT $LN35@add_attrib

; 645  :     Py_DECREF(l);

$LN28@add_attrib:
  00176	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0017a	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00180	eb 08		 jmp	 SHORT $LN29@add_attrib
$LN23@add_attrib:
  00182	48 8b cb	 mov	 rcx, rbx
  00185	e8 00 00 00 00	 call	 Px_DecRef
$LN29@add_attrib:

; 646  :     return result;

  0018a	41 8b c5	 mov	 eax, r13d
$LN35@add_attrib:
  0018d	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  00192	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  00197	4c 8b 6c 24 60	 mov	 r13, QWORD PTR [rsp+96]

; 647  : }

  0019c	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  001a1	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001a5	41 5e		 pop	 r14
  001a7	41 5c		 pop	 r12
  001a9	5f		 pop	 rdi
  001aa	c3		 ret	 0
add_attributes ENDP
_TEXT	ENDS
EXTRN	PyList_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$ast2obj_list DD imagerel ast2obj_list
	DD	imagerel ast2obj_list+241
	DD	imagerel $unwind$ast2obj_list
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_list DD 0a1a01H
	DD	0b741aH
	DD	0a641aH
	DD	09541aH
	DD	08341aH
	DD	0c016521aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\python-ast.c
xdata	ENDS
;	COMDAT ast2obj_list
_TEXT	SEGMENT
seq$ = 64
func$ = 72
ast2obj_list PROC					; COMDAT

; 652  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 653  :     Py_ssize_t i, n = asdl_seq_LEN(seq);

  0001a	33 ff		 xor	 edi, edi
  0001c	4c 8b e2	 mov	 r12, rdx
  0001f	48 8b e9	 mov	 rbp, rcx
  00022	8b f7		 mov	 esi, edi
  00024	48 85 c9	 test	 rcx, rcx
  00027	74 03		 je	 SHORT $LN9@ast2obj_li
  00029	48 8b 31	 mov	 rsi, QWORD PTR [rcx]
$LN9@ast2obj_li:

; 654  :     PyObject *result = PyList_New(n);

  0002c	48 8b ce	 mov	 rcx, rsi
  0002f	e8 00 00 00 00	 call	 PyList_New
  00034	48 8b d8	 mov	 rbx, rax

; 655  :     PyObject *value;
; 656  :     if (!result)

  00037	48 85 c0	 test	 rax, rax

; 657  :         return NULL;

  0003a	0f 84 aa 00 00
	00		 je	 $LN20@ast2obj_li

; 658  :     for (i = 0; i < n; i++) {

  00040	48 85 f6	 test	 rsi, rsi
  00043	7e 1e		 jle	 SHORT $LN2@ast2obj_li
$LL4@ast2obj_li:

; 659  :         value = func(asdl_seq_GET(seq, i));

  00045	48 8b 4c fd 08	 mov	 rcx, QWORD PTR [rbp+rdi*8+8]
  0004a	41 ff d4	 call	 r12

; 660  :         if (!value) {

  0004d	48 85 c0	 test	 rax, rax
  00050	74 2f		 je	 SHORT $LN22@ast2obj_li

; 663  :         }
; 664  :         PyList_SET_ITEM(result, i, value);

  00052	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00056	48 ff c7	 inc	 rdi
  00059	48 89 44 f9 f8	 mov	 QWORD PTR [rcx+rdi*8-8], rax
  0005e	48 3b fe	 cmp	 rdi, rsi
  00061	7c e2		 jl	 SHORT $LL4@ast2obj_li
$LN2@ast2obj_li:

; 665  :     }
; 666  :     return result;

  00063	48 8b c3	 mov	 rax, rbx
$LN6@ast2obj_li:

; 667  : }

  00066	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0006b	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00070	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00075	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  0007a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0007e	41 5c		 pop	 r12
  00080	c3		 ret	 0
$LN22@ast2obj_li:

; 661  :             Py_DECREF(result);

  00081	e8 00 00 00 00	 call	 _Py_PXCTX
  00086	85 c0		 test	 eax, eax
  00088	75 60		 jne	 SHORT $LN20@ast2obj_li
  0008a	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0008e	a8 20		 test	 al, 32			; 00000020H
  00090	75 50		 jne	 SHORT $LN14@ast2obj_li
  00092	84 c0		 test	 al, al
  00094	78 4c		 js	 SHORT $LN14@ast2obj_li
  00096	a8 02		 test	 al, 2
  00098	75 50		 jne	 SHORT $LN20@ast2obj_li
  0009a	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0009e	75 4a		 jne	 SHORT $LN20@ast2obj_li
  000a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000ae	4c 8b cb	 mov	 r9, rbx
  000b1	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000b7	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000bf	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c4	48 8b cb	 mov	 rcx, rbx
  000c7	85 c0		 test	 eax, eax
  000c9	74 09		 je	 SHORT $LN19@ast2obj_li
  000cb	e8 00 00 00 00	 call	 _Px_Dealloc

; 662  :             return NULL;

  000d0	33 c0		 xor	 eax, eax
  000d2	eb 92		 jmp	 SHORT $LN6@ast2obj_li

; 661  :             Py_DECREF(result);

$LN19@ast2obj_li:
  000d4	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000d8	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 662  :             return NULL;

  000de	33 c0		 xor	 eax, eax
  000e0	eb 84		 jmp	 SHORT $LN6@ast2obj_li

; 661  :             Py_DECREF(result);

$LN14@ast2obj_li:
  000e2	48 8b cb	 mov	 rcx, rbx
  000e5	e8 00 00 00 00	 call	 Px_DecRef
$LN20@ast2obj_li:

; 662  :             return NULL;

  000ea	33 c0		 xor	 eax, eax
  000ec	e9 75 ff ff ff	 jmp	 $LN6@ast2obj_li
ast2obj_list ENDP
_TEXT	ENDS
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$ast2obj_object DD imagerel ast2obj_object
	DD	imagerel ast2obj_object+88
	DD	imagerel $unwind$ast2obj_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_object DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\python-ast.c
xdata	ENDS
;	COMDAT ast2obj_object
_TEXT	SEGMENT
o$ = 64
ast2obj_object PROC					; COMDAT

; 670  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 671  :     if (!o)

  00006	48 85 c9	 test	 rcx, rcx
  00009	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  00010	48 0f 45 d9	 cmovne	 rbx, rcx

; 672  :         o = Py_None;
; 673  :     Py_INCREF((PyObject*)o);

  00014	e8 00 00 00 00	 call	 _Py_PXCTX
  00019	85 c0		 test	 eax, eax
  0001b	75 32		 jne	 SHORT $LN8@ast2obj_ob
  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00024	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0002b	4c 8b cb	 mov	 r9, rbx
  0002e	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00034	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0003c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00041	85 c0		 test	 eax, eax
  00043	75 06		 jne	 SHORT $LN4@ast2obj_ob
  00045	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00049	74 04		 je	 SHORT $LN8@ast2obj_ob
$LN4@ast2obj_ob:
  0004b	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN8@ast2obj_ob:

; 674  :     return (PyObject*)o;

  0004f	48 8b c3	 mov	 rax, rbx

; 675  : }

  00052	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00056	5b		 pop	 rbx
  00057	c3		 ret	 0
ast2obj_object ENDP
_TEXT	ENDS
EXTRN	PyLong_FromLong:PROC
; Function compile flags: /Ogtpy
;	COMDAT ast2obj_int
_TEXT	SEGMENT
b$ = 8
ast2obj_int PROC					; COMDAT

; 682  :     return PyLong_FromLong(b);
; 683  : }

  00000	e9 00 00 00 00	 jmp	 PyLong_FromLong
ast2obj_int ENDP
_TEXT	ENDS
EXTRN	PyArena_AddPyObject:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$obj2ast_object DD imagerel obj2ast_object
	DD	imagerel obj2ast_object+160
	DD	imagerel $unwind$obj2ast_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_object DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\python-ast.c
xdata	ENDS
;	COMDAT obj2ast_object
_TEXT	SEGMENT
obj$ = 64
out$ = 72
arena$ = 80
obj2ast_object PROC					; COMDAT

; 688  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 689  :     if (obj == Py_None)

  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00011	48 8b fa	 mov	 rdi, rdx
  00014	48 8b d9	 mov	 rbx, rcx
  00017	48 3b c8	 cmp	 rcx, rax
  0001a	75 12		 jne	 SHORT $LN3@obj2ast_ob

; 690  :         obj = NULL;

  0001c	33 db		 xor	 ebx, ebx

; 699  :     return 0;

  0001e	33 c0		 xor	 eax, eax
  00020	48 89 1a	 mov	 QWORD PTR [rdx], rbx

; 700  : }

  00023	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00028	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0002c	5f		 pop	 rdi
  0002d	c3		 ret	 0
$LN3@obj2ast_ob:

; 691  :     if (obj) {

  0002e	48 85 c9	 test	 rcx, rcx
  00031	74 5d		 je	 SHORT $LN7@obj2ast_ob

; 692  :         if (PyArena_AddPyObject(arena, obj) < 0) {

  00033	48 8b d1	 mov	 rdx, rcx
  00036	49 8b c8	 mov	 rcx, r8
  00039	e8 00 00 00 00	 call	 PyArena_AddPyObject
  0003e	85 c0		 test	 eax, eax
  00040	79 13		 jns	 SHORT $LN1@obj2ast_ob

; 693  :             *out = NULL;

  00042	33 db		 xor	 ebx, ebx

; 694  :             return -1;

  00044	83 c8 ff	 or	 eax, -1

; 697  :     }
; 698  :     *out = obj;

  00047	48 89 1f	 mov	 QWORD PTR [rdi], rbx

; 700  : }

  0004a	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0004f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00053	5f		 pop	 rdi
  00054	c3		 ret	 0
$LN1@obj2ast_ob:

; 695  :         }
; 696  :         Py_INCREF(obj);

  00055	e8 00 00 00 00	 call	 _Py_PXCTX
  0005a	85 c0		 test	 eax, eax
  0005c	75 32		 jne	 SHORT $LN7@obj2ast_ob
  0005e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00065	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0006c	4c 8b cb	 mov	 r9, rbx
  0006f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00075	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0007d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00082	85 c0		 test	 eax, eax
  00084	75 06		 jne	 SHORT $LN6@obj2ast_ob
  00086	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0008a	74 04		 je	 SHORT $LN7@obj2ast_ob
$LN6@obj2ast_ob:
  0008c	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN7@obj2ast_ob:

; 697  :     }
; 698  :     *out = obj;

  00090	48 89 1f	 mov	 QWORD PTR [rdi], rbx

; 700  : }

  00093	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00098	33 c0		 xor	 eax, eax
  0009a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0009e	5f		 pop	 rdi
  0009f	c3		 ret	 0
obj2ast_object ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@PFCMDKJP@AST?5identifier?5must?5be?5of?5type?5s@ ; `string'
EXTRN	PyErr_SetString:PROC
EXTRN	PyUnicode_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_identifier DD imagerel obj2ast_identifier
	DD	imagerel obj2ast_identifier+67
	DD	imagerel $unwind$obj2ast_identifier
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_identifier DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0CD@PFCMDKJP@AST?5identifier?5must?5be?5of?5type?5s@
CONST	SEGMENT
??_C@_0CD@PFCMDKJP@AST?5identifier?5must?5be?5of?5type?5s@ DB 'AST identi'
	DB	'fier must be of type str', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT obj2ast_identifier
_TEXT	SEGMENT
obj$ = 48
out$ = 56
arena$ = 64
obj2ast_identifier PROC					; COMDAT

; 703  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 704  :     if (!PyUnicode_CheckExact(obj) && obj != Py_None) {

  00004	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  0000b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0000f	74 29		 je	 SHORT $LN1@obj2ast_id
  00011	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00018	48 3b c8	 cmp	 rcx, rax
  0001b	74 1d		 je	 SHORT $LN1@obj2ast_id

; 705  :         PyErr_SetString(PyExc_TypeError, "AST identifier must be of type str");

  0001d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@PFCMDKJP@AST?5identifier?5must?5be?5of?5type?5s@
  0002b	e8 00 00 00 00	 call	 PyErr_SetString

; 706  :         return 1;

  00030	b8 01 00 00 00	 mov	 eax, 1

; 707  :     }
; 708  :     return obj2ast_object(obj, out, arena);
; 709  : }

  00035	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00039	c3		 ret	 0
$LN1@obj2ast_id:
  0003a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003e	e9 00 00 00 00	 jmp	 obj2ast_object
obj2ast_identifier ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@FMAHCGHB@AST?5string?5must?5be?5of?5type?5str?$AA@ ; `string'
EXTRN	PyBytes_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_string DD imagerel obj2ast_string
	DD	imagerel obj2ast_string+70
	DD	imagerel $unwind$obj2ast_string
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_string DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BP@FMAHCGHB@AST?5string?5must?5be?5of?5type?5str?$AA@
CONST	SEGMENT
??_C@_0BP@FMAHCGHB@AST?5string?5must?5be?5of?5type?5str?$AA@ DB 'AST stri'
	DB	'ng must be of type str', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT obj2ast_string
_TEXT	SEGMENT
obj$ = 48
out$ = 56
arena$ = 64
obj2ast_string PROC					; COMDAT

; 712  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 713  :     if (!PyUnicode_CheckExact(obj) && !PyBytes_CheckExact(obj)) {

  00004	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00008	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:PyUnicode_Type
  0000f	49 3b c1	 cmp	 rax, r9
  00012	74 29		 je	 SHORT $LN1@obj2ast_st
  00014	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:PyBytes_Type
  0001b	49 3b c1	 cmp	 rax, r9
  0001e	74 1d		 je	 SHORT $LN1@obj2ast_st

; 714  :         PyErr_SetString(PyExc_TypeError, "AST string must be of type str");

  00020	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@FMAHCGHB@AST?5string?5must?5be?5of?5type?5str?$AA@
  0002e	e8 00 00 00 00	 call	 PyErr_SetString

; 715  :         return 1;

  00033	b8 01 00 00 00	 mov	 eax, 1

; 716  :     }
; 717  :     return obj2ast_object(obj, out, arena);
; 718  : }

  00038	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003c	c3		 ret	 0
$LN1@obj2ast_st:
  0003d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00041	e9 00 00 00 00	 jmp	 obj2ast_object
obj2ast_string ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@ENLMLMLP@AST?5bytes?5must?5be?5of?5type?5bytes?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_bytes DD imagerel obj2ast_bytes
	DD	imagerel obj2ast_bytes+55
	DD	imagerel $unwind$obj2ast_bytes
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_bytes DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0CA@ENLMLMLP@AST?5bytes?5must?5be?5of?5type?5bytes?$AA@
CONST	SEGMENT
??_C@_0CA@ENLMLMLP@AST?5bytes?5must?5be?5of?5type?5bytes?$AA@ DB 'AST byt'
	DB	'es must be of type bytes', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT obj2ast_bytes
_TEXT	SEGMENT
obj$ = 48
out$ = 56
arena$ = 64
obj2ast_bytes PROC					; COMDAT

; 721  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 722  :     if (!PyBytes_CheckExact(obj)) {

  00004	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBytes_Type
  0000b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0000f	74 1d		 je	 SHORT $LN1@obj2ast_by

; 723  :         PyErr_SetString(PyExc_TypeError, "AST bytes must be of type bytes");

  00011	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00018	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@ENLMLMLP@AST?5bytes?5must?5be?5of?5type?5bytes?$AA@
  0001f	e8 00 00 00 00	 call	 PyErr_SetString

; 724  :         return 1;

  00024	b8 01 00 00 00	 mov	 eax, 1

; 725  :     }
; 726  :     return obj2ast_object(obj, out, arena);
; 727  : }

  00029	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002d	c3		 ret	 0
$LN1@obj2ast_by:
  0002e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00032	e9 00 00 00 00	 jmp	 obj2ast_object
obj2ast_bytes ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@JIKIMNKN@invalid?5integer?5value?3?5?$CFR?$AA@ ; `string'
EXTRN	PyErr_Occurred:PROC
EXTRN	PyLong_AsLong:PROC
EXTRN	PyExc_ValueError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_int DD imagerel obj2ast_int
	DD	imagerel obj2ast_int+58
	DD	imagerel $unwind$obj2ast_int
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$obj2ast_int DD imagerel obj2ast_int+58
	DD	imagerel obj2ast_int+99
	DD	imagerel $chain$0$obj2ast_int
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$obj2ast_int DD imagerel obj2ast_int+99
	DD	imagerel obj2ast_int+114
	DD	imagerel $chain$2$obj2ast_int
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$obj2ast_int DD 020021H
	DD	063400H
	DD	imagerel obj2ast_int
	DD	imagerel obj2ast_int+58
	DD	imagerel $unwind$obj2ast_int
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$obj2ast_int DD 020521H
	DD	063405H
	DD	imagerel obj2ast_int
	DD	imagerel obj2ast_int+58
	DD	imagerel $unwind$obj2ast_int
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_int DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT ??_C@_0BK@JIKIMNKN@invalid?5integer?5value?3?5?$CFR?$AA@
CONST	SEGMENT
??_C@_0BK@JIKIMNKN@invalid?5integer?5value?3?5?$CFR?$AA@ DB 'invalid inte'
	DB	'ger value: %R', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT obj2ast_int
_TEXT	SEGMENT
obj$ = 48
out$ = 56
obj2ast_int PROC					; COMDAT

; 730  : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 731  :     int i;
; 732  :     if (!PyLong_Check(obj)) {

  00006	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0000a	48 8b fa	 mov	 rdi, rdx
  0000d	f7 80 00 01 00
	00 00 00 00 01	 test	 DWORD PTR [rax+256], 16777216 ; 01000000H
  00017	75 21		 jne	 SHORT $LN2@obj2ast_in

; 733  :         PyErr_Format(PyExc_ValueError, "invalid integer value: %R", obj);

  00019	4c 8b c1	 mov	 r8, rcx
  0001c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00023	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@JIKIMNKN@invalid?5integer?5value?3?5?$CFR?$AA@
  0002a	e8 00 00 00 00	 call	 PyErr_Format

; 734  :         return 1;

  0002f	b8 01 00 00 00	 mov	 eax, 1

; 742  : }

  00034	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00038	5f		 pop	 rdi
  00039	c3		 ret	 0
$LN2@obj2ast_in:
  0003a	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx

; 735  :     }
; 736  : 
; 737  :     i = (int)PyLong_AsLong(obj);

  0003f	e8 00 00 00 00	 call	 PyLong_AsLong
  00044	8b d8		 mov	 ebx, eax

; 738  :     if (i == -1 && PyErr_Occurred())

  00046	83 f8 ff	 cmp	 eax, -1
  00049	75 18		 jne	 SHORT $LN1@obj2ast_in
  0004b	e8 00 00 00 00	 call	 PyErr_Occurred
  00050	48 85 c0	 test	 rax, rax
  00053	74 0e		 je	 SHORT $LN1@obj2ast_in

; 739  :         return 1;

  00055	8d 43 02	 lea	 eax, QWORD PTR [rbx+2]
  00058	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 742  : }

  0005d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00061	5f		 pop	 rdi
  00062	c3		 ret	 0
$LN1@obj2ast_in:

; 740  :     *out = i;

  00063	89 1f		 mov	 DWORD PTR [rdi], ebx
  00065	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 741  :     return 0;

  0006a	33 c0		 xor	 eax, eax

; 742  : }

  0006c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00070	5f		 pop	 rdi
  00071	c3		 ret	 0
obj2ast_int ENDP
_TEXT	ENDS
EXTRN	PyDict_SetItemString:PROC
EXTRN	PyType_Ready:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$add_ast_fields DD imagerel add_ast_fields
	DD	imagerel add_ast_fields+28
	DD	imagerel $unwind$add_ast_fields
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$add_ast_fields DD imagerel add_ast_fields+28
	DD	imagerel add_ast_fields+133
	DD	imagerel $chain$1$add_ast_fields
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$add_ast_fields DD imagerel add_ast_fields+133
	DD	imagerel add_ast_fields+230
	DD	imagerel $chain$3$add_ast_fields
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$add_ast_fields DD imagerel add_ast_fields+230
	DD	imagerel add_ast_fields+258
	DD	imagerel $chain$5$add_ast_fields
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$add_ast_fields DD imagerel add_ast_fields+258
	DD	imagerel add_ast_fields+284
	DD	imagerel $chain$7$add_ast_fields
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$add_ast_fields DD 040021H
	DD	067400H
	DD	083400H
	DD	imagerel add_ast_fields
	DD	imagerel add_ast_fields+28
	DD	imagerel $unwind$add_ast_fields
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$add_ast_fields DD 040021H
	DD	067400H
	DD	083400H
	DD	imagerel add_ast_fields
	DD	imagerel add_ast_fields+28
	DD	imagerel $unwind$add_ast_fields
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$add_ast_fields DD 040021H
	DD	067400H
	DD	083400H
	DD	imagerel add_ast_fields
	DD	imagerel add_ast_fields+28
	DD	imagerel $unwind$add_ast_fields
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$add_ast_fields DD 040c21H
	DD	06740cH
	DD	083405H
	DD	imagerel add_ast_fields
	DD	imagerel add_ast_fields+28
	DD	imagerel $unwind$add_ast_fields
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$add_ast_fields DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\python-ast.c
xdata	ENDS
;	COMDAT add_ast_fields
_TEXT	SEGMENT
add_ast_fields PROC					; COMDAT

; 745  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 746  :     PyObject *empty_tuple, *d;
; 747  :     if (PyType_Ready(&AST_type) < 0)

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:AST_type
  0000b	e8 00 00 00 00	 call	 PyType_Ready
  00010	85 c0		 test	 eax, eax
  00012	79 08		 jns	 SHORT $LN7@add_ast_fi

; 748  :         return -1;

  00014	83 c8 ff	 or	 eax, -1

; 759  : }

  00017	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0001b	c3		 ret	 0
$LN7@add_ast_fi:
  0001c	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx

; 749  :     d = AST_type.tp_dict;
; 750  :     empty_tuple = PyTuple_New(0);

  00021	33 c9		 xor	 ecx, ecx
  00023	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  00028	48 8b 3d 60 01
	00 00		 mov	 rdi, QWORD PTR AST_type+352
  0002f	e8 00 00 00 00	 call	 PyTuple_New
  00034	48 8b d8	 mov	 rbx, rax

; 751  :     if (!empty_tuple ||
; 752  :         PyDict_SetItemString(d, "_fields", empty_tuple) < 0 ||
; 753  :         PyDict_SetItemString(d, "_attributes", empty_tuple) < 0) {

  00037	48 85 c0	 test	 rax, rax
  0003a	0f 84 ca 00 00
	00		 je	 $LN3@add_ast_fi
  00040	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07LKKIBPPO@_fields?$AA@
  00047	4c 8b c0	 mov	 r8, rax
  0004a	48 8b cf	 mov	 rcx, rdi
  0004d	e8 00 00 00 00	 call	 PyDict_SetItemString
  00052	85 c0		 test	 eax, eax
  00054	78 2f		 js	 SHORT $LN4@add_ast_fi
  00056	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@CDHEEICO@_attributes?$AA@
  0005d	4c 8b c3	 mov	 r8, rbx
  00060	48 8b cf	 mov	 rcx, rdi
  00063	e8 00 00 00 00	 call	 PyDict_SetItemString
  00068	85 c0		 test	 eax, eax
  0006a	78 19		 js	 SHORT $LN4@add_ast_fi

; 756  :     }
; 757  :     Py_DECREF(empty_tuple);

  0006c	48 8b cb	 mov	 rcx, rbx
  0006f	e8 00 00 00 00	 call	 _Py_DecRef
  00074	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00079	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 758  :     return 0;

  0007e	33 c0		 xor	 eax, eax

; 759  : }

  00080	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00084	c3		 ret	 0
$LN4@add_ast_fi:

; 754  :         Py_XDECREF(empty_tuple);

  00085	e8 00 00 00 00	 call	 _Py_PXCTX
  0008a	85 c0		 test	 eax, eax
  0008c	75 7c		 jne	 SHORT $LN3@add_ast_fi
  0008e	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00092	a8 20		 test	 al, 32			; 00000020H
  00094	75 6c		 jne	 SHORT $LN14@add_ast_fi
  00096	84 c0		 test	 al, al
  00098	78 68		 js	 SHORT $LN14@add_ast_fi
  0009a	a8 02		 test	 al, 2
  0009c	75 6c		 jne	 SHORT $LN3@add_ast_fi
  0009e	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000a2	75 66		 jne	 SHORT $LN3@add_ast_fi
  000a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000b2	4c 8b cb	 mov	 r9, rbx
  000b5	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000bb	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c3	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c8	48 8b cb	 mov	 rcx, rbx
  000cb	85 c0		 test	 eax, eax
  000cd	74 17		 je	 SHORT $LN19@add_ast_fi
  000cf	e8 00 00 00 00	 call	 _Px_Dealloc
  000d4	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000d9	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 755  :         return -1;

  000de	83 c8 ff	 or	 eax, -1

; 759  : }

  000e1	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000e5	c3		 ret	 0

; 754  :         Py_XDECREF(empty_tuple);

$LN19@add_ast_fi:
  000e6	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000ea	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000f0	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000f5	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 755  :         return -1;

  000fa	83 c8 ff	 or	 eax, -1

; 759  : }

  000fd	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00101	c3		 ret	 0

; 754  :         Py_XDECREF(empty_tuple);

$LN14@add_ast_fi:
  00102	48 8b cb	 mov	 rcx, rbx
  00105	e8 00 00 00 00	 call	 Px_DecRef
$LN3@add_ast_fi:

; 755  :         return -1;

  0010a	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0010f	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
  00114	83 c8 ff	 or	 eax, -1

; 759  : }

  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
add_ast_fields ENDP
_TEXT	ENDS
PUBLIC	??_C@_08FACALJAE@withitem?$AA@			; `string'
PUBLIC	??_C@_05NKHOCLEE@alias?$AA@			; `string'
PUBLIC	??_C@_07JMKMGKCH@keyword?$AA@			; `string'
PUBLIC	??_C@_09PBNAMLIK@arguments?$AA@			; `string'
PUBLIC	??_C@_0O@IFPAFICE@ExceptHandler?$AA@		; `string'
PUBLIC	??_C@_0O@LBOCECKK@excepthandler?$AA@		; `string'
PUBLIC	??_C@_0O@PDDLNDDO@comprehension?$AA@		; `string'
PUBLIC	??_C@_05GFBCHB@NotIn?$AA@			; `string'
PUBLIC	??_C@_02IEILNGIL@In?$AA@			; `string'
PUBLIC	??_C@_05KLALIAAG@IsNot?$AA@			; `string'
PUBLIC	??_C@_02HLOHLKJH@Is?$AA@			; `string'
PUBLIC	??_C@_03GIODLKL@GtE?$AA@			; `string'
PUBLIC	??_C@_02DODIABFK@Gt?$AA@			; `string'
PUBLIC	??_C@_03NBIPLMKK@LtE?$AA@			; `string'
PUBLIC	??_C@_02DCGNOOLL@Lt?$AA@			; `string'
PUBLIC	??_C@_05MECFOFIL@NotEq?$AA@			; `string'
PUBLIC	??_C@_02EAMLCBHB@Eq?$AA@			; `string'
PUBLIC	??_C@_05KGHEMFCD@cmpop?$AA@			; `string'
PUBLIC	??_C@_04BFGHELIL@USub?$AA@			; `string'
PUBLIC	??_C@_04KEMJLKFO@UAdd?$AA@			; `string'
PUBLIC	??_C@_03KNKIDPAC@Not?$AA@			; `string'
PUBLIC	??_C@_06OHLCGMJD@Invert?$AA@			; `string'
PUBLIC	??_C@_07JPNNPNHH@unaryop?$AA@			; `string'
PUBLIC	??_C@_08BOGBPHLB@FloorDiv?$AA@			; `string'
PUBLIC	??_C@_06PCNOCLJN@BitAnd?$AA@			; `string'
PUBLIC	??_C@_06MCJFOMGI@BitXor?$AA@			; `string'
PUBLIC	??_C@_05BKBNAGEF@BitOr?$AA@			; `string'
PUBLIC	??_C@_06LEKGCNCD@RShift?$AA@			; `string'
PUBLIC	??_C@_06IDEHMKLA@LShift?$AA@			; `string'
PUBLIC	??_C@_03DGEDEMGN@Pow?$AA@			; `string'
PUBLIC	??_C@_03PFNPICLN@Mod?$AA@			; `string'
PUBLIC	??_C@_03PEKOMBFG@Div?$AA@			; `string'
PUBLIC	??_C@_04MPMBEKAC@Mult?$AA@			; `string'
PUBLIC	??_C@_03CPCCDDB@Sub?$AA@			; `string'
PUBLIC	??_C@_03LDFMNCOE@Add?$AA@			; `string'
PUBLIC	??_C@_08LHJFAFGD@operator?$AA@			; `string'
PUBLIC	??_C@_02GGHBPHGE@Or?$AA@			; `string'
PUBLIC	??_C@_03LOMLFHDC@And?$AA@			; `string'
PUBLIC	??_C@_06IBDOJNAO@boolop?$AA@			; `string'
PUBLIC	??_C@_05FNNGFGLF@Index?$AA@			; `string'
PUBLIC	??_C@_08CIIMGBAD@ExtSlice?$AA@			; `string'
PUBLIC	??_C@_05IMNAOMFL@Slice?$AA@			; `string'
PUBLIC	??_C@_05LOJBNELM@Param?$AA@			; `string'
PUBLIC	??_C@_08NAEMOJFF@AugStore?$AA@			; `string'
PUBLIC	??_C@_07GCIJHPCC@AugLoad?$AA@			; `string'
PUBLIC	??_C@_03ENJJMCOJ@Del?$AA@			; `string'
PUBLIC	??_C@_05OEMPKGID@Store?$AA@			; `string'
PUBLIC	??_C@_04IPBPFFEL@Load?$AA@			; `string'
PUBLIC	??_C@_0N@GABLJPJB@expr_context?$AA@		; `string'
PUBLIC	??_C@_05NKGIHGDI@Tuple?$AA@			; `string'
PUBLIC	??_C@_04PPBEGPNI@List?$AA@			; `string'
PUBLIC	??_C@_04FABLJDN@Name?$AA@			; `string'
PUBLIC	??_C@_07JHFCIAKE@Starred?$AA@			; `string'
PUBLIC	??_C@_09OPNCODFI@Subscript?$AA@			; `string'
PUBLIC	??_C@_09EIDFECNJ@Attribute?$AA@			; `string'
PUBLIC	??_C@_08KKBGFFMJ@Ellipsis?$AA@			; `string'
PUBLIC	??_C@_05FGDMGDLA@Bytes?$AA@			; `string'
PUBLIC	??_C@_03EJPCFLFH@Str?$AA@			; `string'
PUBLIC	??_C@_03CHBJLALM@Num?$AA@			; `string'
PUBLIC	??_C@_04CNJBKMPC@Call?$AA@			; `string'
PUBLIC	??_C@_07MBOMJGGF@Compare?$AA@			; `string'
PUBLIC	??_C@_09GLJBJEPP@YieldFrom?$AA@			; `string'
PUBLIC	??_C@_05LNDKIJIJ@Yield?$AA@			; `string'
PUBLIC	??_C@_0N@MMHMBOOD@GeneratorExp?$AA@		; `string'
PUBLIC	??_C@_08GMOHPPCM@DictComp?$AA@			; `string'
PUBLIC	??_C@_07BLGPBMGP@SetComp?$AA@			; `string'
PUBLIC	??_C@_08LAOBMBPK@ListComp?$AA@			; `string'
PUBLIC	??_C@_03CEMDFJG@Set?$AA@			; `string'
PUBLIC	??_C@_04NDECIHGJ@Dict?$AA@			; `string'
PUBLIC	??_C@_05KJAPGPAE@IfExp?$AA@			; `string'
PUBLIC	??_C@_06OBCFFGBN@Lambda?$AA@			; `string'
PUBLIC	??_C@_07FOOGNJMB@UnaryOp?$AA@			; `string'
PUBLIC	??_C@_05BHIPNDDM@BinOp?$AA@			; `string'
PUBLIC	??_C@_06HGMOOCHC@BoolOp?$AA@			; `string'
PUBLIC	??_C@_04IPHMALII@expr?$AA@			; `string'
PUBLIC	??_C@_08LJHDLOLO@Continue?$AA@			; `string'
PUBLIC	??_C@_05EMFLFCNO@Break?$AA@			; `string'
PUBLIC	??_C@_04NAPBKLHD@Pass?$AA@			; `string'
PUBLIC	??_C@_04EOLNCEIM@Expr?$AA@			; `string'
PUBLIC	??_C@_08BAHOEEIH@Nonlocal?$AA@			; `string'
PUBLIC	??_C@_06JGBJPOPP@Global?$AA@			; `string'
PUBLIC	??_C@_0L@IKBFEFKH@ImportFrom?$AA@		; `string'
PUBLIC	??_C@_06IBNLALPJ@Import?$AA@			; `string'
PUBLIC	??_C@_06KDPFLMMB@Assert?$AA@			; `string'
PUBLIC	??_C@_03DDFMMGJH@Try?$AA@			; `string'
PUBLIC	??_C@_05KDDKFIDP@Raise?$AA@			; `string'
PUBLIC	??_C@_04LBMICJD@With?$AA@			; `string'
PUBLIC	??_C@_02EMFCFMID@If?$AA@			; `string'
PUBLIC	??_C@_05OJJNEPLA@While?$AA@			; `string'
PUBLIC	??_C@_03DOEGLAGL@For?$AA@			; `string'
PUBLIC	??_C@_09CMGHGMJH@AugAssign?$AA@			; `string'
PUBLIC	??_C@_06EDODJIDJ@Assign?$AA@			; `string'
PUBLIC	??_C@_06JBKGCNBB@Delete?$AA@			; `string'
PUBLIC	??_C@_06HCFIKKEA@Return?$AA@			; `string'
PUBLIC	??_C@_08OGFMJMG@ClassDef?$AA@			; `string'
PUBLIC	??_C@_0M@POJILEOM@FunctionDef?$AA@		; `string'
PUBLIC	??_C@_04GIKOEBLH@stmt?$AA@			; `string'
PUBLIC	??_C@_05PIEJKMFN@Suite?$AA@			; `string'
PUBLIC	??_C@_0L@NMLOJPGF@Expression?$AA@		; `string'
PUBLIC	??_C@_0M@INEKDBAI@Interactive?$AA@		; `string'
PUBLIC	??_C@_06NHPJKFDC@Module?$AA@			; `string'
PUBLIC	??_C@_03FFONCNID@mod?$AA@			; `string'
_BSS	SEGMENT
withitem_type DQ 01H DUP (?)
alias_type DQ	01H DUP (?)
keyword_type DQ	01H DUP (?)
arg_type DQ	01H DUP (?)
arguments_type DQ 01H DUP (?)
ExceptHandler_type DQ 01H DUP (?)
excepthandler_type DQ 01H DUP (?)
comprehension_type DQ 01H DUP (?)
NotIn_singleton DQ 01H DUP (?)
NotIn_type DQ	01H DUP (?)
In_singleton DQ	01H DUP (?)
In_type	DQ	01H DUP (?)
IsNot_singleton DQ 01H DUP (?)
IsNot_type DQ	01H DUP (?)
Is_singleton DQ	01H DUP (?)
Is_type	DQ	01H DUP (?)
GtE_singleton DQ 01H DUP (?)
GtE_type DQ	01H DUP (?)
Gt_singleton DQ	01H DUP (?)
Gt_type	DQ	01H DUP (?)
LtE_singleton DQ 01H DUP (?)
LtE_type DQ	01H DUP (?)
Lt_singleton DQ	01H DUP (?)
Lt_type	DQ	01H DUP (?)
NotEq_singleton DQ 01H DUP (?)
NotEq_type DQ	01H DUP (?)
Eq_singleton DQ	01H DUP (?)
Eq_type	DQ	01H DUP (?)
cmpop_type DQ	01H DUP (?)
USub_singleton DQ 01H DUP (?)
USub_type DQ	01H DUP (?)
UAdd_singleton DQ 01H DUP (?)
UAdd_type DQ	01H DUP (?)
Not_singleton DQ 01H DUP (?)
Not_type DQ	01H DUP (?)
Invert_singleton DQ 01H DUP (?)
Invert_type DQ	01H DUP (?)
unaryop_type DQ	01H DUP (?)
FloorDiv_singleton DQ 01H DUP (?)
FloorDiv_type DQ 01H DUP (?)
BitAnd_singleton DQ 01H DUP (?)
BitAnd_type DQ	01H DUP (?)
BitXor_singleton DQ 01H DUP (?)
BitXor_type DQ	01H DUP (?)
BitOr_singleton DQ 01H DUP (?)
BitOr_type DQ	01H DUP (?)
RShift_singleton DQ 01H DUP (?)
RShift_type DQ	01H DUP (?)
LShift_singleton DQ 01H DUP (?)
LShift_type DQ	01H DUP (?)
Pow_singleton DQ 01H DUP (?)
Pow_type DQ	01H DUP (?)
Mod_singleton DQ 01H DUP (?)
Mod_type DQ	01H DUP (?)
Div_singleton DQ 01H DUP (?)
Div_type DQ	01H DUP (?)
Mult_singleton DQ 01H DUP (?)
Mult_type DQ	01H DUP (?)
Sub_singleton DQ 01H DUP (?)
Sub_type DQ	01H DUP (?)
Add_singleton DQ 01H DUP (?)
Add_type DQ	01H DUP (?)
operator_type DQ 01H DUP (?)
Or_singleton DQ	01H DUP (?)
Or_type	DQ	01H DUP (?)
And_singleton DQ 01H DUP (?)
And_type DQ	01H DUP (?)
boolop_type DQ	01H DUP (?)
Index_type DQ	01H DUP (?)
ExtSlice_type DQ 01H DUP (?)
Slice_type DQ	01H DUP (?)
slice_type DQ	01H DUP (?)
Param_singleton DQ 01H DUP (?)
Param_type DQ	01H DUP (?)
AugStore_singleton DQ 01H DUP (?)
AugStore_type DQ 01H DUP (?)
AugLoad_singleton DQ 01H DUP (?)
AugLoad_type DQ	01H DUP (?)
Del_singleton DQ 01H DUP (?)
Del_type DQ	01H DUP (?)
Store_singleton DQ 01H DUP (?)
Store_type DQ	01H DUP (?)
Load_singleton DQ 01H DUP (?)
Load_type DQ	01H DUP (?)
expr_context_type DQ 01H DUP (?)
Tuple_type DQ	01H DUP (?)
List_type DQ	01H DUP (?)
Name_type DQ	01H DUP (?)
Starred_type DQ	01H DUP (?)
Subscript_type DQ 01H DUP (?)
Attribute_type DQ 01H DUP (?)
Ellipsis_type DQ 01H DUP (?)
Bytes_type DQ	01H DUP (?)
Str_type DQ	01H DUP (?)
Num_type DQ	01H DUP (?)
Call_type DQ	01H DUP (?)
Compare_type DQ	01H DUP (?)
YieldFrom_type DQ 01H DUP (?)
Yield_type DQ	01H DUP (?)
GeneratorExp_type DQ 01H DUP (?)
DictComp_type DQ 01H DUP (?)
SetComp_type DQ	01H DUP (?)
ListComp_type DQ 01H DUP (?)
Set_type DQ	01H DUP (?)
Dict_type DQ	01H DUP (?)
IfExp_type DQ	01H DUP (?)
Lambda_type DQ	01H DUP (?)
UnaryOp_type DQ	01H DUP (?)
BinOp_type DQ	01H DUP (?)
BoolOp_type DQ	01H DUP (?)
expr_type DQ	01H DUP (?)
Continue_type DQ 01H DUP (?)
Break_type DQ	01H DUP (?)
Pass_type DQ	01H DUP (?)
Expr_type DQ	01H DUP (?)
Nonlocal_type DQ 01H DUP (?)
Global_type DQ	01H DUP (?)
ImportFrom_type DQ 01H DUP (?)
Import_type DQ	01H DUP (?)
Assert_type DQ	01H DUP (?)
Try_type DQ	01H DUP (?)
Raise_type DQ	01H DUP (?)
With_type DQ	01H DUP (?)
If_type	DQ	01H DUP (?)
While_type DQ	01H DUP (?)
For_type DQ	01H DUP (?)
AugAssign_type DQ 01H DUP (?)
Assign_type DQ	01H DUP (?)
Delete_type DQ	01H DUP (?)
Return_type DQ	01H DUP (?)
ClassDef_type DQ 01H DUP (?)
FunctionDef_type DQ 01H DUP (?)
stmt_type DQ	01H DUP (?)
Suite_type DQ	01H DUP (?)
Expression_type DQ 01H DUP (?)
Interactive_type DQ 01H DUP (?)
Module_type DQ	01H DUP (?)
mod_type DQ	01H DUP (?)
?initialized@?1??init_types@@9@9 DD 01H DUP (?)		; `init_types'::`2'::initialized
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$init_types DD imagerel init_types
	DD	imagerel init_types+5917
	DD	imagerel $unwind$init_types
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$init_types DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_08FACALJAE@withitem?$AA@
CONST	SEGMENT
??_C@_08FACALJAE@withitem?$AA@ DB 'withitem', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05NKHOCLEE@alias?$AA@
CONST	SEGMENT
??_C@_05NKHOCLEE@alias?$AA@ DB 'alias', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JMKMGKCH@keyword?$AA@
CONST	SEGMENT
??_C@_07JMKMGKCH@keyword?$AA@ DB 'keyword', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PBNAMLIK@arguments?$AA@
CONST	SEGMENT
??_C@_09PBNAMLIK@arguments?$AA@ DB 'arguments', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IFPAFICE@ExceptHandler?$AA@
CONST	SEGMENT
??_C@_0O@IFPAFICE@ExceptHandler?$AA@ DB 'ExceptHandler', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LBOCECKK@excepthandler?$AA@
CONST	SEGMENT
??_C@_0O@LBOCECKK@excepthandler?$AA@ DB 'excepthandler', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PDDLNDDO@comprehension?$AA@
CONST	SEGMENT
??_C@_0O@PDDLNDDO@comprehension?$AA@ DB 'comprehension', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05GFBCHB@NotIn?$AA@
CONST	SEGMENT
??_C@_05GFBCHB@NotIn?$AA@ DB 'NotIn', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02IEILNGIL@In?$AA@
CONST	SEGMENT
??_C@_02IEILNGIL@In?$AA@ DB 'In', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05KLALIAAG@IsNot?$AA@
CONST	SEGMENT
??_C@_05KLALIAAG@IsNot?$AA@ DB 'IsNot', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02HLOHLKJH@Is?$AA@
CONST	SEGMENT
??_C@_02HLOHLKJH@Is?$AA@ DB 'Is', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03GIODLKL@GtE?$AA@
CONST	SEGMENT
??_C@_03GIODLKL@GtE?$AA@ DB 'GtE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DODIABFK@Gt?$AA@
CONST	SEGMENT
??_C@_02DODIABFK@Gt?$AA@ DB 'Gt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NBIPLMKK@LtE?$AA@
CONST	SEGMENT
??_C@_03NBIPLMKK@LtE?$AA@ DB 'LtE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DCGNOOLL@Lt?$AA@
CONST	SEGMENT
??_C@_02DCGNOOLL@Lt?$AA@ DB 'Lt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MECFOFIL@NotEq?$AA@
CONST	SEGMENT
??_C@_05MECFOFIL@NotEq?$AA@ DB 'NotEq', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EAMLCBHB@Eq?$AA@
CONST	SEGMENT
??_C@_02EAMLCBHB@Eq?$AA@ DB 'Eq', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05KGHEMFCD@cmpop?$AA@
CONST	SEGMENT
??_C@_05KGHEMFCD@cmpop?$AA@ DB 'cmpop', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BFGHELIL@USub?$AA@
CONST	SEGMENT
??_C@_04BFGHELIL@USub?$AA@ DB 'USub', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KEMJLKFO@UAdd?$AA@
CONST	SEGMENT
??_C@_04KEMJLKFO@UAdd?$AA@ DB 'UAdd', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KNKIDPAC@Not?$AA@
CONST	SEGMENT
??_C@_03KNKIDPAC@Not?$AA@ DB 'Not', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06OHLCGMJD@Invert?$AA@
CONST	SEGMENT
??_C@_06OHLCGMJD@Invert?$AA@ DB 'Invert', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JPNNPNHH@unaryop?$AA@
CONST	SEGMENT
??_C@_07JPNNPNHH@unaryop?$AA@ DB 'unaryop', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BOGBPHLB@FloorDiv?$AA@
CONST	SEGMENT
??_C@_08BOGBPHLB@FloorDiv?$AA@ DB 'FloorDiv', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06PCNOCLJN@BitAnd?$AA@
CONST	SEGMENT
??_C@_06PCNOCLJN@BitAnd?$AA@ DB 'BitAnd', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MCJFOMGI@BitXor?$AA@
CONST	SEGMENT
??_C@_06MCJFOMGI@BitXor?$AA@ DB 'BitXor', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BKBNAGEF@BitOr?$AA@
CONST	SEGMENT
??_C@_05BKBNAGEF@BitOr?$AA@ DB 'BitOr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LEKGCNCD@RShift?$AA@
CONST	SEGMENT
??_C@_06LEKGCNCD@RShift?$AA@ DB 'RShift', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IDEHMKLA@LShift?$AA@
CONST	SEGMENT
??_C@_06IDEHMKLA@LShift?$AA@ DB 'LShift', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DGEDEMGN@Pow?$AA@
CONST	SEGMENT
??_C@_03DGEDEMGN@Pow?$AA@ DB 'Pow', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PFNPICLN@Mod?$AA@
CONST	SEGMENT
??_C@_03PFNPICLN@Mod?$AA@ DB 'Mod', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PEKOMBFG@Div?$AA@
CONST	SEGMENT
??_C@_03PEKOMBFG@Div?$AA@ DB 'Div', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MPMBEKAC@Mult?$AA@
CONST	SEGMENT
??_C@_04MPMBEKAC@Mult?$AA@ DB 'Mult', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CPCCDDB@Sub?$AA@
CONST	SEGMENT
??_C@_03CPCCDDB@Sub?$AA@ DB 'Sub', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03LDFMNCOE@Add?$AA@
CONST	SEGMENT
??_C@_03LDFMNCOE@Add?$AA@ DB 'Add', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08LHJFAFGD@operator?$AA@
CONST	SEGMENT
??_C@_08LHJFAFGD@operator?$AA@ DB 'operator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02GGHBPHGE@Or?$AA@
CONST	SEGMENT
??_C@_02GGHBPHGE@Or?$AA@ DB 'Or', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03LOMLFHDC@And?$AA@
CONST	SEGMENT
??_C@_03LOMLFHDC@And?$AA@ DB 'And', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06IBDOJNAO@boolop?$AA@
CONST	SEGMENT
??_C@_06IBDOJNAO@boolop?$AA@ DB 'boolop', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FNNGFGLF@Index?$AA@
CONST	SEGMENT
??_C@_05FNNGFGLF@Index?$AA@ DB 'Index', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CIIMGBAD@ExtSlice?$AA@
CONST	SEGMENT
??_C@_08CIIMGBAD@ExtSlice?$AA@ DB 'ExtSlice', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05IMNAOMFL@Slice?$AA@
CONST	SEGMENT
??_C@_05IMNAOMFL@Slice?$AA@ DB 'Slice', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LOJBNELM@Param?$AA@
CONST	SEGMENT
??_C@_05LOJBNELM@Param?$AA@ DB 'Param', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08NAEMOJFF@AugStore?$AA@
CONST	SEGMENT
??_C@_08NAEMOJFF@AugStore?$AA@ DB 'AugStore', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07GCIJHPCC@AugLoad?$AA@
CONST	SEGMENT
??_C@_07GCIJHPCC@AugLoad?$AA@ DB 'AugLoad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03ENJJMCOJ@Del?$AA@
CONST	SEGMENT
??_C@_03ENJJMCOJ@Del?$AA@ DB 'Del', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OEMPKGID@Store?$AA@
CONST	SEGMENT
??_C@_05OEMPKGID@Store?$AA@ DB 'Store', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IPBPFFEL@Load?$AA@
CONST	SEGMENT
??_C@_04IPBPFFEL@Load?$AA@ DB 'Load', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GABLJPJB@expr_context?$AA@
CONST	SEGMENT
??_C@_0N@GABLJPJB@expr_context?$AA@ DB 'expr_context', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05NKGIHGDI@Tuple?$AA@
CONST	SEGMENT
??_C@_05NKGIHGDI@Tuple?$AA@ DB 'Tuple', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PPBEGPNI@List?$AA@
CONST	SEGMENT
??_C@_04PPBEGPNI@List?$AA@ DB 'List', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FABLJDN@Name?$AA@
CONST	SEGMENT
??_C@_04FABLJDN@Name?$AA@ DB 'Name', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JHFCIAKE@Starred?$AA@
CONST	SEGMENT
??_C@_07JHFCIAKE@Starred?$AA@ DB 'Starred', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09OPNCODFI@Subscript?$AA@
CONST	SEGMENT
??_C@_09OPNCODFI@Subscript?$AA@ DB 'Subscript', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EIDFECNJ@Attribute?$AA@
CONST	SEGMENT
??_C@_09EIDFECNJ@Attribute?$AA@ DB 'Attribute', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KKBGFFMJ@Ellipsis?$AA@
CONST	SEGMENT
??_C@_08KKBGFFMJ@Ellipsis?$AA@ DB 'Ellipsis', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05FGDMGDLA@Bytes?$AA@
CONST	SEGMENT
??_C@_05FGDMGDLA@Bytes?$AA@ DB 'Bytes', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03EJPCFLFH@Str?$AA@
CONST	SEGMENT
??_C@_03EJPCFLFH@Str?$AA@ DB 'Str', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CHBJLALM@Num?$AA@
CONST	SEGMENT
??_C@_03CHBJLALM@Num?$AA@ DB 'Num', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04CNJBKMPC@Call?$AA@
CONST	SEGMENT
??_C@_04CNJBKMPC@Call?$AA@ DB 'Call', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MBOMJGGF@Compare?$AA@
CONST	SEGMENT
??_C@_07MBOMJGGF@Compare?$AA@ DB 'Compare', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09GLJBJEPP@YieldFrom?$AA@
CONST	SEGMENT
??_C@_09GLJBJEPP@YieldFrom?$AA@ DB 'YieldFrom', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05LNDKIJIJ@Yield?$AA@
CONST	SEGMENT
??_C@_05LNDKIJIJ@Yield?$AA@ DB 'Yield', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MMHMBOOD@GeneratorExp?$AA@
CONST	SEGMENT
??_C@_0N@MMHMBOOD@GeneratorExp?$AA@ DB 'GeneratorExp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08GMOHPPCM@DictComp?$AA@
CONST	SEGMENT
??_C@_08GMOHPPCM@DictComp?$AA@ DB 'DictComp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BLGPBMGP@SetComp?$AA@
CONST	SEGMENT
??_C@_07BLGPBMGP@SetComp?$AA@ DB 'SetComp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LAOBMBPK@ListComp?$AA@
CONST	SEGMENT
??_C@_08LAOBMBPK@ListComp?$AA@ DB 'ListComp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03CEMDFJG@Set?$AA@
CONST	SEGMENT
??_C@_03CEMDFJG@Set?$AA@ DB 'Set', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04NDECIHGJ@Dict?$AA@
CONST	SEGMENT
??_C@_04NDECIHGJ@Dict?$AA@ DB 'Dict', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KJAPGPAE@IfExp?$AA@
CONST	SEGMENT
??_C@_05KJAPGPAE@IfExp?$AA@ DB 'IfExp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OBCFFGBN@Lambda?$AA@
CONST	SEGMENT
??_C@_06OBCFFGBN@Lambda?$AA@ DB 'Lambda', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FOOGNJMB@UnaryOp?$AA@
CONST	SEGMENT
??_C@_07FOOGNJMB@UnaryOp?$AA@ DB 'UnaryOp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BHIPNDDM@BinOp?$AA@
CONST	SEGMENT
??_C@_05BHIPNDDM@BinOp?$AA@ DB 'BinOp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HGMOOCHC@BoolOp?$AA@
CONST	SEGMENT
??_C@_06HGMOOCHC@BoolOp?$AA@ DB 'BoolOp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IPHMALII@expr?$AA@
CONST	SEGMENT
??_C@_04IPHMALII@expr?$AA@ DB 'expr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LJHDLOLO@Continue?$AA@
CONST	SEGMENT
??_C@_08LJHDLOLO@Continue?$AA@ DB 'Continue', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05EMFLFCNO@Break?$AA@
CONST	SEGMENT
??_C@_05EMFLFCNO@Break?$AA@ DB 'Break', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NAPBKLHD@Pass?$AA@
CONST	SEGMENT
??_C@_04NAPBKLHD@Pass?$AA@ DB 'Pass', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EOLNCEIM@Expr?$AA@
CONST	SEGMENT
??_C@_04EOLNCEIM@Expr?$AA@ DB 'Expr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BAHOEEIH@Nonlocal?$AA@
CONST	SEGMENT
??_C@_08BAHOEEIH@Nonlocal?$AA@ DB 'Nonlocal', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06JGBJPOPP@Global?$AA@
CONST	SEGMENT
??_C@_06JGBJPOPP@Global?$AA@ DB 'Global', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IKBFEFKH@ImportFrom?$AA@
CONST	SEGMENT
??_C@_0L@IKBFEFKH@ImportFrom?$AA@ DB 'ImportFrom', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06IBNLALPJ@Import?$AA@
CONST	SEGMENT
??_C@_06IBNLALPJ@Import?$AA@ DB 'Import', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KDPFLMMB@Assert?$AA@
CONST	SEGMENT
??_C@_06KDPFLMMB@Assert?$AA@ DB 'Assert', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DDFMMGJH@Try?$AA@
CONST	SEGMENT
??_C@_03DDFMMGJH@Try?$AA@ DB 'Try', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05KDDKFIDP@Raise?$AA@
CONST	SEGMENT
??_C@_05KDDKFIDP@Raise?$AA@ DB 'Raise', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LBMICJD@With?$AA@
CONST	SEGMENT
??_C@_04LBMICJD@With?$AA@ DB 'With', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EMFCFMID@If?$AA@
CONST	SEGMENT
??_C@_02EMFCFMID@If?$AA@ DB 'If', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OJJNEPLA@While?$AA@
CONST	SEGMENT
??_C@_05OJJNEPLA@While?$AA@ DB 'While', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DOEGLAGL@For?$AA@
CONST	SEGMENT
??_C@_03DOEGLAGL@For?$AA@ DB 'For', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09CMGHGMJH@AugAssign?$AA@
CONST	SEGMENT
??_C@_09CMGHGMJH@AugAssign?$AA@ DB 'AugAssign', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06EDODJIDJ@Assign?$AA@
CONST	SEGMENT
??_C@_06EDODJIDJ@Assign?$AA@ DB 'Assign', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JBKGCNBB@Delete?$AA@
CONST	SEGMENT
??_C@_06JBKGCNBB@Delete?$AA@ DB 'Delete', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HCFIKKEA@Return?$AA@
CONST	SEGMENT
??_C@_06HCFIKKEA@Return?$AA@ DB 'Return', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OGFMJMG@ClassDef?$AA@
CONST	SEGMENT
??_C@_08OGFMJMG@ClassDef?$AA@ DB 'ClassDef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@POJILEOM@FunctionDef?$AA@
CONST	SEGMENT
??_C@_0M@POJILEOM@FunctionDef?$AA@ DB 'FunctionDef', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04GIKOEBLH@stmt?$AA@
CONST	SEGMENT
??_C@_04GIKOEBLH@stmt?$AA@ DB 'stmt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PIEJKMFN@Suite?$AA@
CONST	SEGMENT
??_C@_05PIEJKMFN@Suite?$AA@ DB 'Suite', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NMLOJPGF@Expression?$AA@
CONST	SEGMENT
??_C@_0L@NMLOJPGF@Expression?$AA@ DB 'Expression', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@INEKDBAI@Interactive?$AA@
CONST	SEGMENT
??_C@_0M@INEKDBAI@Interactive?$AA@ DB 'Interactive', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06NHPJKFDC@Module?$AA@
CONST	SEGMENT
??_C@_06NHPJKFDC@Module?$AA@ DB 'Module', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03FFONCNID@mod?$AA@
CONST	SEGMENT
??_C@_03FFONCNID@mod?$AA@ DB 'mod', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT init_types
_TEXT	SEGMENT
init_types PROC						; COMDAT

; 763  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 764  :     static int initialized;
; 765  :     if (initialized) return 1;

  00004	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?initialized@?1??init_types@@9@9, 0
  0000b	0f 85 02 17 00
	00		 jne	 $LN153@init_types

; 766  :     if (add_ast_fields() < 0) return 0;

  00011	e8 00 00 00 00	 call	 add_ast_fields
  00016	85 c0		 test	 eax, eax
  00018	79 07		 jns	 SHORT $LN149@init_types
$LN154@init_types:
  0001a	33 c0		 xor	 eax, eax

; 1061 : }

  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	c3		 ret	 0
$LN149@init_types:

; 767  :     mod_type = make_type("mod", &AST_type, NULL, 0);

  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AST_type
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03FFONCNID@mod?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	45 33 c0	 xor	 r8d, r8d
  00035	e8 00 00 00 00	 call	 make_type
  0003a	48 89 05 00 00
	00 00		 mov	 QWORD PTR mod_type, rax

; 768  :     if (!mod_type) return 0;

  00041	48 85 c0	 test	 rax, rax
  00044	74 d4		 je	 SHORT $LN154@init_types

; 769  :     if (!add_attributes(mod_type, NULL, 0)) return 0;

  00046	45 33 c0	 xor	 r8d, r8d
  00049	33 d2		 xor	 edx, edx
  0004b	48 8b c8	 mov	 rcx, rax
  0004e	e8 00 00 00 00	 call	 add_attributes
  00053	85 c0		 test	 eax, eax
  00055	74 c3		 je	 SHORT $LN154@init_types

; 770  :     Module_type = make_type("Module", mod_type, Module_fields, 1);

  00057	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR mod_type
  0005e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Module_fields
  00065	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06NHPJKFDC@Module?$AA@
  0006c	41 b9 01 00 00
	00		 mov	 r9d, 1
  00072	e8 00 00 00 00	 call	 make_type
  00077	48 89 05 00 00
	00 00		 mov	 QWORD PTR Module_type, rax

; 771  :     if (!Module_type) return 0;

  0007e	48 85 c0	 test	 rax, rax
  00081	74 97		 je	 SHORT $LN154@init_types

; 772  :     Interactive_type = make_type("Interactive", mod_type, Interactive_fields,
; 773  :                                  1);

  00083	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR mod_type
  0008a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Interactive_fields
  00091	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@INEKDBAI@Interactive?$AA@
  00098	41 b9 01 00 00
	00		 mov	 r9d, 1
  0009e	e8 00 00 00 00	 call	 make_type
  000a3	48 89 05 00 00
	00 00		 mov	 QWORD PTR Interactive_type, rax

; 774  :     if (!Interactive_type) return 0;

  000aa	48 85 c0	 test	 rax, rax
  000ad	0f 84 67 ff ff
	ff		 je	 $LN154@init_types

; 775  :     Expression_type = make_type("Expression", mod_type, Expression_fields, 1);

  000b3	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR mod_type
  000ba	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Expression_fields
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@NMLOJPGF@Expression?$AA@
  000c8	41 b9 01 00 00
	00		 mov	 r9d, 1
  000ce	e8 00 00 00 00	 call	 make_type
  000d3	48 89 05 00 00
	00 00		 mov	 QWORD PTR Expression_type, rax

; 776  :     if (!Expression_type) return 0;

  000da	48 85 c0	 test	 rax, rax
  000dd	0f 84 37 ff ff
	ff		 je	 $LN154@init_types

; 777  :     Suite_type = make_type("Suite", mod_type, Suite_fields, 1);

  000e3	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR mod_type
  000ea	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Suite_fields
  000f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05PIEJKMFN@Suite?$AA@
  000f8	41 b9 01 00 00
	00		 mov	 r9d, 1
  000fe	e8 00 00 00 00	 call	 make_type
  00103	48 89 05 00 00
	00 00		 mov	 QWORD PTR Suite_type, rax

; 778  :     if (!Suite_type) return 0;

  0010a	48 85 c0	 test	 rax, rax
  0010d	0f 84 07 ff ff
	ff		 je	 $LN154@init_types

; 779  :     stmt_type = make_type("stmt", &AST_type, NULL, 0);

  00113	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AST_type
  0011a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GIKOEBLH@stmt?$AA@
  00121	45 33 c9	 xor	 r9d, r9d
  00124	45 33 c0	 xor	 r8d, r8d
  00127	e8 00 00 00 00	 call	 make_type
  0012c	48 89 05 00 00
	00 00		 mov	 QWORD PTR stmt_type, rax

; 780  :     if (!stmt_type) return 0;

  00133	48 85 c0	 test	 rax, rax
  00136	0f 84 de fe ff
	ff		 je	 $LN154@init_types

; 781  :     if (!add_attributes(stmt_type, stmt_attributes, 2)) return 0;

  0013c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:stmt_attributes
  00143	41 b8 02 00 00
	00		 mov	 r8d, 2
  00149	48 8b c8	 mov	 rcx, rax
  0014c	e8 00 00 00 00	 call	 add_attributes
  00151	85 c0		 test	 eax, eax
  00153	0f 84 c1 fe ff
	ff		 je	 $LN154@init_types

; 782  :     FunctionDef_type = make_type("FunctionDef", stmt_type, FunctionDef_fields,
; 783  :                                  5);

  00159	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  00160	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:FunctionDef_fields
  00167	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@POJILEOM@FunctionDef?$AA@
  0016e	41 b9 05 00 00
	00		 mov	 r9d, 5
  00174	e8 00 00 00 00	 call	 make_type
  00179	48 89 05 00 00
	00 00		 mov	 QWORD PTR FunctionDef_type, rax

; 784  :     if (!FunctionDef_type) return 0;

  00180	48 85 c0	 test	 rax, rax
  00183	0f 84 91 fe ff
	ff		 je	 $LN154@init_types

; 785  :     ClassDef_type = make_type("ClassDef", stmt_type, ClassDef_fields, 7);

  00189	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  00190	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ClassDef_fields
  00197	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08OGFMJMG@ClassDef?$AA@
  0019e	41 b9 07 00 00
	00		 mov	 r9d, 7
  001a4	e8 00 00 00 00	 call	 make_type
  001a9	48 89 05 00 00
	00 00		 mov	 QWORD PTR ClassDef_type, rax

; 786  :     if (!ClassDef_type) return 0;

  001b0	48 85 c0	 test	 rax, rax
  001b3	0f 84 61 fe ff
	ff		 je	 $LN154@init_types

; 787  :     Return_type = make_type("Return", stmt_type, Return_fields, 1);

  001b9	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  001c0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Return_fields
  001c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06HCFIKKEA@Return?$AA@
  001ce	41 b9 01 00 00
	00		 mov	 r9d, 1
  001d4	e8 00 00 00 00	 call	 make_type
  001d9	48 89 05 00 00
	00 00		 mov	 QWORD PTR Return_type, rax

; 788  :     if (!Return_type) return 0;

  001e0	48 85 c0	 test	 rax, rax
  001e3	0f 84 31 fe ff
	ff		 je	 $LN154@init_types

; 789  :     Delete_type = make_type("Delete", stmt_type, Delete_fields, 1);

  001e9	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  001f0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Delete_fields
  001f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06JBKGCNBB@Delete?$AA@
  001fe	41 b9 01 00 00
	00		 mov	 r9d, 1
  00204	e8 00 00 00 00	 call	 make_type
  00209	48 89 05 00 00
	00 00		 mov	 QWORD PTR Delete_type, rax

; 790  :     if (!Delete_type) return 0;

  00210	48 85 c0	 test	 rax, rax
  00213	0f 84 01 fe ff
	ff		 je	 $LN154@init_types

; 791  :     Assign_type = make_type("Assign", stmt_type, Assign_fields, 2);

  00219	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  00220	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Assign_fields
  00227	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06EDODJIDJ@Assign?$AA@
  0022e	41 b9 02 00 00
	00		 mov	 r9d, 2
  00234	e8 00 00 00 00	 call	 make_type
  00239	48 89 05 00 00
	00 00		 mov	 QWORD PTR Assign_type, rax

; 792  :     if (!Assign_type) return 0;

  00240	48 85 c0	 test	 rax, rax
  00243	0f 84 d1 fd ff
	ff		 je	 $LN154@init_types

; 793  :     AugAssign_type = make_type("AugAssign", stmt_type, AugAssign_fields, 3);

  00249	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  00250	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:AugAssign_fields
  00257	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09CMGHGMJH@AugAssign?$AA@
  0025e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00264	e8 00 00 00 00	 call	 make_type
  00269	48 89 05 00 00
	00 00		 mov	 QWORD PTR AugAssign_type, rax

; 794  :     if (!AugAssign_type) return 0;

  00270	48 85 c0	 test	 rax, rax
  00273	0f 84 a1 fd ff
	ff		 je	 $LN154@init_types

; 795  :     For_type = make_type("For", stmt_type, For_fields, 4);

  00279	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  00280	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:For_fields
  00287	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03DOEGLAGL@For?$AA@
  0028e	41 b9 04 00 00
	00		 mov	 r9d, 4
  00294	e8 00 00 00 00	 call	 make_type
  00299	48 89 05 00 00
	00 00		 mov	 QWORD PTR For_type, rax

; 796  :     if (!For_type) return 0;

  002a0	48 85 c0	 test	 rax, rax
  002a3	0f 84 71 fd ff
	ff		 je	 $LN154@init_types

; 797  :     While_type = make_type("While", stmt_type, While_fields, 3);

  002a9	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  002b0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:While_fields
  002b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05OJJNEPLA@While?$AA@
  002be	41 b9 03 00 00
	00		 mov	 r9d, 3
  002c4	e8 00 00 00 00	 call	 make_type
  002c9	48 89 05 00 00
	00 00		 mov	 QWORD PTR While_type, rax

; 798  :     if (!While_type) return 0;

  002d0	48 85 c0	 test	 rax, rax
  002d3	0f 84 41 fd ff
	ff		 je	 $LN154@init_types

; 799  :     If_type = make_type("If", stmt_type, If_fields, 3);

  002d9	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  002e0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:If_fields
  002e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02EMFCFMID@If?$AA@
  002ee	41 b9 03 00 00
	00		 mov	 r9d, 3
  002f4	e8 00 00 00 00	 call	 make_type
  002f9	48 89 05 00 00
	00 00		 mov	 QWORD PTR If_type, rax

; 800  :     if (!If_type) return 0;

  00300	48 85 c0	 test	 rax, rax
  00303	0f 84 11 fd ff
	ff		 je	 $LN154@init_types

; 801  :     With_type = make_type("With", stmt_type, With_fields, 2);

  00309	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  00310	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:With_fields
  00317	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04LBMICJD@With?$AA@
  0031e	41 b9 02 00 00
	00		 mov	 r9d, 2
  00324	e8 00 00 00 00	 call	 make_type
  00329	48 89 05 00 00
	00 00		 mov	 QWORD PTR With_type, rax

; 802  :     if (!With_type) return 0;

  00330	48 85 c0	 test	 rax, rax
  00333	0f 84 e1 fc ff
	ff		 je	 $LN154@init_types

; 803  :     Raise_type = make_type("Raise", stmt_type, Raise_fields, 2);

  00339	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  00340	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Raise_fields
  00347	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05KDDKFIDP@Raise?$AA@
  0034e	41 b9 02 00 00
	00		 mov	 r9d, 2
  00354	e8 00 00 00 00	 call	 make_type
  00359	48 89 05 00 00
	00 00		 mov	 QWORD PTR Raise_type, rax

; 804  :     if (!Raise_type) return 0;

  00360	48 85 c0	 test	 rax, rax
  00363	0f 84 b1 fc ff
	ff		 je	 $LN154@init_types

; 805  :     Try_type = make_type("Try", stmt_type, Try_fields, 4);

  00369	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  00370	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Try_fields
  00377	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03DDFMMGJH@Try?$AA@
  0037e	41 b9 04 00 00
	00		 mov	 r9d, 4
  00384	e8 00 00 00 00	 call	 make_type
  00389	48 89 05 00 00
	00 00		 mov	 QWORD PTR Try_type, rax

; 806  :     if (!Try_type) return 0;

  00390	48 85 c0	 test	 rax, rax
  00393	0f 84 81 fc ff
	ff		 je	 $LN154@init_types

; 807  :     Assert_type = make_type("Assert", stmt_type, Assert_fields, 2);

  00399	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  003a0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Assert_fields
  003a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06KDPFLMMB@Assert?$AA@
  003ae	41 b9 02 00 00
	00		 mov	 r9d, 2
  003b4	e8 00 00 00 00	 call	 make_type
  003b9	48 89 05 00 00
	00 00		 mov	 QWORD PTR Assert_type, rax

; 808  :     if (!Assert_type) return 0;

  003c0	48 85 c0	 test	 rax, rax
  003c3	0f 84 51 fc ff
	ff		 je	 $LN154@init_types

; 809  :     Import_type = make_type("Import", stmt_type, Import_fields, 1);

  003c9	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  003d0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Import_fields
  003d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06IBNLALPJ@Import?$AA@
  003de	41 b9 01 00 00
	00		 mov	 r9d, 1
  003e4	e8 00 00 00 00	 call	 make_type
  003e9	48 89 05 00 00
	00 00		 mov	 QWORD PTR Import_type, rax

; 810  :     if (!Import_type) return 0;

  003f0	48 85 c0	 test	 rax, rax
  003f3	0f 84 21 fc ff
	ff		 je	 $LN154@init_types

; 811  :     ImportFrom_type = make_type("ImportFrom", stmt_type, ImportFrom_fields, 3);

  003f9	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  00400	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ImportFrom_fields
  00407	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@IKBFEFKH@ImportFrom?$AA@
  0040e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00414	e8 00 00 00 00	 call	 make_type
  00419	48 89 05 00 00
	00 00		 mov	 QWORD PTR ImportFrom_type, rax

; 812  :     if (!ImportFrom_type) return 0;

  00420	48 85 c0	 test	 rax, rax
  00423	0f 84 f1 fb ff
	ff		 je	 $LN154@init_types

; 813  :     Global_type = make_type("Global", stmt_type, Global_fields, 1);

  00429	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  00430	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Global_fields
  00437	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06JGBJPOPP@Global?$AA@
  0043e	41 b9 01 00 00
	00		 mov	 r9d, 1
  00444	e8 00 00 00 00	 call	 make_type
  00449	48 89 05 00 00
	00 00		 mov	 QWORD PTR Global_type, rax

; 814  :     if (!Global_type) return 0;

  00450	48 85 c0	 test	 rax, rax
  00453	0f 84 c1 fb ff
	ff		 je	 $LN154@init_types

; 815  :     Nonlocal_type = make_type("Nonlocal", stmt_type, Nonlocal_fields, 1);

  00459	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  00460	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Nonlocal_fields
  00467	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08BAHOEEIH@Nonlocal?$AA@
  0046e	41 b9 01 00 00
	00		 mov	 r9d, 1
  00474	e8 00 00 00 00	 call	 make_type
  00479	48 89 05 00 00
	00 00		 mov	 QWORD PTR Nonlocal_type, rax

; 816  :     if (!Nonlocal_type) return 0;

  00480	48 85 c0	 test	 rax, rax
  00483	0f 84 91 fb ff
	ff		 je	 $LN154@init_types

; 817  :     Expr_type = make_type("Expr", stmt_type, Expr_fields, 1);

  00489	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  00490	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Expr_fields
  00497	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04EOLNCEIM@Expr?$AA@
  0049e	41 b9 01 00 00
	00		 mov	 r9d, 1
  004a4	e8 00 00 00 00	 call	 make_type
  004a9	48 89 05 00 00
	00 00		 mov	 QWORD PTR Expr_type, rax

; 818  :     if (!Expr_type) return 0;

  004b0	48 85 c0	 test	 rax, rax
  004b3	0f 84 61 fb ff
	ff		 je	 $LN154@init_types

; 819  :     Pass_type = make_type("Pass", stmt_type, NULL, 0);

  004b9	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  004c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04NAPBKLHD@Pass?$AA@
  004c7	45 33 c9	 xor	 r9d, r9d
  004ca	45 33 c0	 xor	 r8d, r8d
  004cd	e8 00 00 00 00	 call	 make_type
  004d2	48 89 05 00 00
	00 00		 mov	 QWORD PTR Pass_type, rax

; 820  :     if (!Pass_type) return 0;

  004d9	48 85 c0	 test	 rax, rax
  004dc	0f 84 38 fb ff
	ff		 je	 $LN154@init_types

; 821  :     Break_type = make_type("Break", stmt_type, NULL, 0);

  004e2	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  004e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05EMFLFCNO@Break?$AA@
  004f0	45 33 c9	 xor	 r9d, r9d
  004f3	45 33 c0	 xor	 r8d, r8d
  004f6	e8 00 00 00 00	 call	 make_type
  004fb	48 89 05 00 00
	00 00		 mov	 QWORD PTR Break_type, rax

; 822  :     if (!Break_type) return 0;

  00502	48 85 c0	 test	 rax, rax
  00505	0f 84 0f fb ff
	ff		 je	 $LN154@init_types

; 823  :     Continue_type = make_type("Continue", stmt_type, NULL, 0);

  0050b	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  00512	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08LJHDLOLO@Continue?$AA@
  00519	45 33 c9	 xor	 r9d, r9d
  0051c	45 33 c0	 xor	 r8d, r8d
  0051f	e8 00 00 00 00	 call	 make_type
  00524	48 89 05 00 00
	00 00		 mov	 QWORD PTR Continue_type, rax

; 824  :     if (!Continue_type) return 0;

  0052b	48 85 c0	 test	 rax, rax
  0052e	0f 84 e6 fa ff
	ff		 je	 $LN154@init_types

; 825  :     expr_type = make_type("expr", &AST_type, NULL, 0);

  00534	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AST_type
  0053b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04IPHMALII@expr?$AA@
  00542	45 33 c9	 xor	 r9d, r9d
  00545	45 33 c0	 xor	 r8d, r8d
  00548	e8 00 00 00 00	 call	 make_type
  0054d	48 89 05 00 00
	00 00		 mov	 QWORD PTR expr_type, rax

; 826  :     if (!expr_type) return 0;

  00554	48 85 c0	 test	 rax, rax
  00557	0f 84 bd fa ff
	ff		 je	 $LN154@init_types

; 827  :     if (!add_attributes(expr_type, expr_attributes, 2)) return 0;

  0055d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:expr_attributes
  00564	41 b8 02 00 00
	00		 mov	 r8d, 2
  0056a	48 8b c8	 mov	 rcx, rax
  0056d	e8 00 00 00 00	 call	 add_attributes
  00572	85 c0		 test	 eax, eax
  00574	0f 84 a0 fa ff
	ff		 je	 $LN154@init_types

; 828  :     BoolOp_type = make_type("BoolOp", expr_type, BoolOp_fields, 2);

  0057a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  00581	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:BoolOp_fields
  00588	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06HGMOOCHC@BoolOp?$AA@
  0058f	41 b9 02 00 00
	00		 mov	 r9d, 2
  00595	e8 00 00 00 00	 call	 make_type
  0059a	48 89 05 00 00
	00 00		 mov	 QWORD PTR BoolOp_type, rax

; 829  :     if (!BoolOp_type) return 0;

  005a1	48 85 c0	 test	 rax, rax
  005a4	0f 84 70 fa ff
	ff		 je	 $LN154@init_types

; 830  :     BinOp_type = make_type("BinOp", expr_type, BinOp_fields, 3);

  005aa	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  005b1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:BinOp_fields
  005b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05BHIPNDDM@BinOp?$AA@
  005bf	41 b9 03 00 00
	00		 mov	 r9d, 3
  005c5	e8 00 00 00 00	 call	 make_type
  005ca	48 89 05 00 00
	00 00		 mov	 QWORD PTR BinOp_type, rax

; 831  :     if (!BinOp_type) return 0;

  005d1	48 85 c0	 test	 rax, rax
  005d4	0f 84 40 fa ff
	ff		 je	 $LN154@init_types

; 832  :     UnaryOp_type = make_type("UnaryOp", expr_type, UnaryOp_fields, 2);

  005da	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  005e1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:UnaryOp_fields
  005e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07FOOGNJMB@UnaryOp?$AA@
  005ef	41 b9 02 00 00
	00		 mov	 r9d, 2
  005f5	e8 00 00 00 00	 call	 make_type
  005fa	48 89 05 00 00
	00 00		 mov	 QWORD PTR UnaryOp_type, rax

; 833  :     if (!UnaryOp_type) return 0;

  00601	48 85 c0	 test	 rax, rax
  00604	0f 84 10 fa ff
	ff		 je	 $LN154@init_types

; 834  :     Lambda_type = make_type("Lambda", expr_type, Lambda_fields, 2);

  0060a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  00611	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Lambda_fields
  00618	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06OBCFFGBN@Lambda?$AA@
  0061f	41 b9 02 00 00
	00		 mov	 r9d, 2
  00625	e8 00 00 00 00	 call	 make_type
  0062a	48 89 05 00 00
	00 00		 mov	 QWORD PTR Lambda_type, rax

; 835  :     if (!Lambda_type) return 0;

  00631	48 85 c0	 test	 rax, rax
  00634	0f 84 e0 f9 ff
	ff		 je	 $LN154@init_types

; 836  :     IfExp_type = make_type("IfExp", expr_type, IfExp_fields, 3);

  0063a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  00641	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:IfExp_fields
  00648	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05KJAPGPAE@IfExp?$AA@
  0064f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00655	e8 00 00 00 00	 call	 make_type
  0065a	48 89 05 00 00
	00 00		 mov	 QWORD PTR IfExp_type, rax

; 837  :     if (!IfExp_type) return 0;

  00661	48 85 c0	 test	 rax, rax
  00664	0f 84 b0 f9 ff
	ff		 je	 $LN154@init_types

; 838  :     Dict_type = make_type("Dict", expr_type, Dict_fields, 2);

  0066a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  00671	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Dict_fields
  00678	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04NDECIHGJ@Dict?$AA@
  0067f	41 b9 02 00 00
	00		 mov	 r9d, 2
  00685	e8 00 00 00 00	 call	 make_type
  0068a	48 89 05 00 00
	00 00		 mov	 QWORD PTR Dict_type, rax

; 839  :     if (!Dict_type) return 0;

  00691	48 85 c0	 test	 rax, rax
  00694	0f 84 80 f9 ff
	ff		 je	 $LN154@init_types

; 840  :     Set_type = make_type("Set", expr_type, Set_fields, 1);

  0069a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  006a1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Set_fields
  006a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03CEMDFJG@Set?$AA@
  006af	41 b9 01 00 00
	00		 mov	 r9d, 1
  006b5	e8 00 00 00 00	 call	 make_type
  006ba	48 89 05 00 00
	00 00		 mov	 QWORD PTR Set_type, rax

; 841  :     if (!Set_type) return 0;

  006c1	48 85 c0	 test	 rax, rax
  006c4	0f 84 50 f9 ff
	ff		 je	 $LN154@init_types

; 842  :     ListComp_type = make_type("ListComp", expr_type, ListComp_fields, 2);

  006ca	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  006d1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ListComp_fields
  006d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08LAOBMBPK@ListComp?$AA@
  006df	41 b9 02 00 00
	00		 mov	 r9d, 2
  006e5	e8 00 00 00 00	 call	 make_type
  006ea	48 89 05 00 00
	00 00		 mov	 QWORD PTR ListComp_type, rax

; 843  :     if (!ListComp_type) return 0;

  006f1	48 85 c0	 test	 rax, rax
  006f4	0f 84 20 f9 ff
	ff		 je	 $LN154@init_types

; 844  :     SetComp_type = make_type("SetComp", expr_type, SetComp_fields, 2);

  006fa	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  00701	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:SetComp_fields
  00708	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07BLGPBMGP@SetComp?$AA@
  0070f	41 b9 02 00 00
	00		 mov	 r9d, 2
  00715	e8 00 00 00 00	 call	 make_type
  0071a	48 89 05 00 00
	00 00		 mov	 QWORD PTR SetComp_type, rax

; 845  :     if (!SetComp_type) return 0;

  00721	48 85 c0	 test	 rax, rax
  00724	0f 84 f0 f8 ff
	ff		 je	 $LN154@init_types

; 846  :     DictComp_type = make_type("DictComp", expr_type, DictComp_fields, 3);

  0072a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  00731	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:DictComp_fields
  00738	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08GMOHPPCM@DictComp?$AA@
  0073f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00745	e8 00 00 00 00	 call	 make_type
  0074a	48 89 05 00 00
	00 00		 mov	 QWORD PTR DictComp_type, rax

; 847  :     if (!DictComp_type) return 0;

  00751	48 85 c0	 test	 rax, rax
  00754	0f 84 c0 f8 ff
	ff		 je	 $LN154@init_types

; 848  :     GeneratorExp_type = make_type("GeneratorExp", expr_type,
; 849  :                                   GeneratorExp_fields, 2);

  0075a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  00761	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:GeneratorExp_fields
  00768	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@MMHMBOOD@GeneratorExp?$AA@
  0076f	41 b9 02 00 00
	00		 mov	 r9d, 2
  00775	e8 00 00 00 00	 call	 make_type
  0077a	48 89 05 00 00
	00 00		 mov	 QWORD PTR GeneratorExp_type, rax

; 850  :     if (!GeneratorExp_type) return 0;

  00781	48 85 c0	 test	 rax, rax
  00784	0f 84 90 f8 ff
	ff		 je	 $LN154@init_types

; 851  :     Yield_type = make_type("Yield", expr_type, Yield_fields, 1);

  0078a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  00791	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Yield_fields
  00798	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LNDKIJIJ@Yield?$AA@
  0079f	41 b9 01 00 00
	00		 mov	 r9d, 1
  007a5	e8 00 00 00 00	 call	 make_type
  007aa	48 89 05 00 00
	00 00		 mov	 QWORD PTR Yield_type, rax

; 852  :     if (!Yield_type) return 0;

  007b1	48 85 c0	 test	 rax, rax
  007b4	0f 84 60 f8 ff
	ff		 je	 $LN154@init_types

; 853  :     YieldFrom_type = make_type("YieldFrom", expr_type, YieldFrom_fields, 1);

  007ba	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  007c1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:YieldFrom_fields
  007c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09GLJBJEPP@YieldFrom?$AA@
  007cf	41 b9 01 00 00
	00		 mov	 r9d, 1
  007d5	e8 00 00 00 00	 call	 make_type
  007da	48 89 05 00 00
	00 00		 mov	 QWORD PTR YieldFrom_type, rax

; 854  :     if (!YieldFrom_type) return 0;

  007e1	48 85 c0	 test	 rax, rax
  007e4	0f 84 30 f8 ff
	ff		 je	 $LN154@init_types

; 855  :     Compare_type = make_type("Compare", expr_type, Compare_fields, 3);

  007ea	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  007f1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Compare_fields
  007f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07MBOMJGGF@Compare?$AA@
  007ff	41 b9 03 00 00
	00		 mov	 r9d, 3
  00805	e8 00 00 00 00	 call	 make_type
  0080a	48 89 05 00 00
	00 00		 mov	 QWORD PTR Compare_type, rax

; 856  :     if (!Compare_type) return 0;

  00811	48 85 c0	 test	 rax, rax
  00814	0f 84 00 f8 ff
	ff		 je	 $LN154@init_types

; 857  :     Call_type = make_type("Call", expr_type, Call_fields, 5);

  0081a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  00821	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Call_fields
  00828	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04CNJBKMPC@Call?$AA@
  0082f	41 b9 05 00 00
	00		 mov	 r9d, 5
  00835	e8 00 00 00 00	 call	 make_type
  0083a	48 89 05 00 00
	00 00		 mov	 QWORD PTR Call_type, rax

; 858  :     if (!Call_type) return 0;

  00841	48 85 c0	 test	 rax, rax
  00844	0f 84 d0 f7 ff
	ff		 je	 $LN154@init_types

; 859  :     Num_type = make_type("Num", expr_type, Num_fields, 1);

  0084a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  00851	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Num_fields
  00858	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03CHBJLALM@Num?$AA@
  0085f	41 b9 01 00 00
	00		 mov	 r9d, 1
  00865	e8 00 00 00 00	 call	 make_type
  0086a	48 89 05 00 00
	00 00		 mov	 QWORD PTR Num_type, rax

; 860  :     if (!Num_type) return 0;

  00871	48 85 c0	 test	 rax, rax
  00874	0f 84 a0 f7 ff
	ff		 je	 $LN154@init_types

; 861  :     Str_type = make_type("Str", expr_type, Str_fields, 1);

  0087a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  00881	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Str_fields
  00888	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03EJPCFLFH@Str?$AA@
  0088f	41 b9 01 00 00
	00		 mov	 r9d, 1
  00895	e8 00 00 00 00	 call	 make_type
  0089a	48 89 05 00 00
	00 00		 mov	 QWORD PTR Str_type, rax

; 862  :     if (!Str_type) return 0;

  008a1	48 85 c0	 test	 rax, rax
  008a4	0f 84 70 f7 ff
	ff		 je	 $LN154@init_types

; 863  :     Bytes_type = make_type("Bytes", expr_type, Bytes_fields, 1);

  008aa	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  008b1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Bytes_fields
  008b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05FGDMGDLA@Bytes?$AA@
  008bf	41 b9 01 00 00
	00		 mov	 r9d, 1
  008c5	e8 00 00 00 00	 call	 make_type
  008ca	48 89 05 00 00
	00 00		 mov	 QWORD PTR Bytes_type, rax

; 864  :     if (!Bytes_type) return 0;

  008d1	48 85 c0	 test	 rax, rax
  008d4	0f 84 40 f7 ff
	ff		 je	 $LN154@init_types

; 865  :     Ellipsis_type = make_type("Ellipsis", expr_type, NULL, 0);

  008da	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  008e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08KKBGFFMJ@Ellipsis?$AA@
  008e8	45 33 c9	 xor	 r9d, r9d
  008eb	45 33 c0	 xor	 r8d, r8d
  008ee	e8 00 00 00 00	 call	 make_type
  008f3	48 89 05 00 00
	00 00		 mov	 QWORD PTR Ellipsis_type, rax

; 866  :     if (!Ellipsis_type) return 0;

  008fa	48 85 c0	 test	 rax, rax
  008fd	0f 84 17 f7 ff
	ff		 je	 $LN154@init_types

; 867  :     Attribute_type = make_type("Attribute", expr_type, Attribute_fields, 3);

  00903	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  0090a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Attribute_fields
  00911	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09EIDFECNJ@Attribute?$AA@
  00918	41 b9 03 00 00
	00		 mov	 r9d, 3
  0091e	e8 00 00 00 00	 call	 make_type
  00923	48 89 05 00 00
	00 00		 mov	 QWORD PTR Attribute_type, rax

; 868  :     if (!Attribute_type) return 0;

  0092a	48 85 c0	 test	 rax, rax
  0092d	0f 84 e7 f6 ff
	ff		 je	 $LN154@init_types

; 869  :     Subscript_type = make_type("Subscript", expr_type, Subscript_fields, 3);

  00933	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  0093a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Subscript_fields
  00941	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09OPNCODFI@Subscript?$AA@
  00948	41 b9 03 00 00
	00		 mov	 r9d, 3
  0094e	e8 00 00 00 00	 call	 make_type
  00953	48 89 05 00 00
	00 00		 mov	 QWORD PTR Subscript_type, rax

; 870  :     if (!Subscript_type) return 0;

  0095a	48 85 c0	 test	 rax, rax
  0095d	0f 84 b7 f6 ff
	ff		 je	 $LN154@init_types

; 871  :     Starred_type = make_type("Starred", expr_type, Starred_fields, 2);

  00963	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  0096a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Starred_fields
  00971	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07JHFCIAKE@Starred?$AA@
  00978	41 b9 02 00 00
	00		 mov	 r9d, 2
  0097e	e8 00 00 00 00	 call	 make_type
  00983	48 89 05 00 00
	00 00		 mov	 QWORD PTR Starred_type, rax

; 872  :     if (!Starred_type) return 0;

  0098a	48 85 c0	 test	 rax, rax
  0098d	0f 84 87 f6 ff
	ff		 je	 $LN154@init_types

; 873  :     Name_type = make_type("Name", expr_type, Name_fields, 2);

  00993	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  0099a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Name_fields
  009a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04FABLJDN@Name?$AA@
  009a8	41 b9 02 00 00
	00		 mov	 r9d, 2
  009ae	e8 00 00 00 00	 call	 make_type
  009b3	48 89 05 00 00
	00 00		 mov	 QWORD PTR Name_type, rax

; 874  :     if (!Name_type) return 0;

  009ba	48 85 c0	 test	 rax, rax
  009bd	0f 84 57 f6 ff
	ff		 je	 $LN154@init_types

; 875  :     List_type = make_type("List", expr_type, List_fields, 2);

  009c3	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  009ca	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:List_fields
  009d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04PPBEGPNI@List?$AA@
  009d8	41 b9 02 00 00
	00		 mov	 r9d, 2
  009de	e8 00 00 00 00	 call	 make_type
  009e3	48 89 05 00 00
	00 00		 mov	 QWORD PTR List_type, rax

; 876  :     if (!List_type) return 0;

  009ea	48 85 c0	 test	 rax, rax
  009ed	0f 84 27 f6 ff
	ff		 je	 $LN154@init_types

; 877  :     Tuple_type = make_type("Tuple", expr_type, Tuple_fields, 2);

  009f3	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  009fa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Tuple_fields
  00a01	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05NKGIHGDI@Tuple?$AA@
  00a08	41 b9 02 00 00
	00		 mov	 r9d, 2
  00a0e	e8 00 00 00 00	 call	 make_type
  00a13	48 89 05 00 00
	00 00		 mov	 QWORD PTR Tuple_type, rax

; 878  :     if (!Tuple_type) return 0;

  00a1a	48 85 c0	 test	 rax, rax
  00a1d	0f 84 f7 f5 ff
	ff		 je	 $LN154@init_types

; 879  :     expr_context_type = make_type("expr_context", &AST_type, NULL, 0);

  00a23	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AST_type
  00a2a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@GABLJPJB@expr_context?$AA@
  00a31	45 33 c9	 xor	 r9d, r9d
  00a34	45 33 c0	 xor	 r8d, r8d
  00a37	e8 00 00 00 00	 call	 make_type
  00a3c	48 89 05 00 00
	00 00		 mov	 QWORD PTR expr_context_type, rax

; 880  :     if (!expr_context_type) return 0;

  00a43	48 85 c0	 test	 rax, rax
  00a46	0f 84 ce f5 ff
	ff		 je	 $LN154@init_types

; 881  :     if (!add_attributes(expr_context_type, NULL, 0)) return 0;

  00a4c	45 33 c0	 xor	 r8d, r8d
  00a4f	33 d2		 xor	 edx, edx
  00a51	48 8b c8	 mov	 rcx, rax
  00a54	e8 00 00 00 00	 call	 add_attributes
  00a59	85 c0		 test	 eax, eax
  00a5b	0f 84 b9 f5 ff
	ff		 je	 $LN154@init_types

; 882  :     Load_type = make_type("Load", expr_context_type, NULL, 0);

  00a61	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_context_type
  00a68	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04IPBPFFEL@Load?$AA@
  00a6f	45 33 c9	 xor	 r9d, r9d
  00a72	45 33 c0	 xor	 r8d, r8d
  00a75	e8 00 00 00 00	 call	 make_type
  00a7a	48 89 05 00 00
	00 00		 mov	 QWORD PTR Load_type, rax

; 883  :     if (!Load_type) return 0;

  00a81	48 85 c0	 test	 rax, rax
  00a84	0f 84 90 f5 ff
	ff		 je	 $LN154@init_types

; 884  :     Load_singleton = PyType_GenericNew(Load_type, NULL, NULL);

  00a8a	45 33 c0	 xor	 r8d, r8d
  00a8d	33 d2		 xor	 edx, edx
  00a8f	48 8b c8	 mov	 rcx, rax
  00a92	e8 00 00 00 00	 call	 PyType_GenericNew
  00a97	48 89 05 00 00
	00 00		 mov	 QWORD PTR Load_singleton, rax

; 885  :     if (!Load_singleton) return 0;

  00a9e	48 85 c0	 test	 rax, rax
  00aa1	0f 84 73 f5 ff
	ff		 je	 $LN154@init_types

; 886  :     Store_type = make_type("Store", expr_context_type, NULL, 0);

  00aa7	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_context_type
  00aae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05OEMPKGID@Store?$AA@
  00ab5	45 33 c9	 xor	 r9d, r9d
  00ab8	45 33 c0	 xor	 r8d, r8d
  00abb	e8 00 00 00 00	 call	 make_type
  00ac0	48 89 05 00 00
	00 00		 mov	 QWORD PTR Store_type, rax

; 887  :     if (!Store_type) return 0;

  00ac7	48 85 c0	 test	 rax, rax
  00aca	0f 84 4a f5 ff
	ff		 je	 $LN154@init_types

; 888  :     Store_singleton = PyType_GenericNew(Store_type, NULL, NULL);

  00ad0	45 33 c0	 xor	 r8d, r8d
  00ad3	33 d2		 xor	 edx, edx
  00ad5	48 8b c8	 mov	 rcx, rax
  00ad8	e8 00 00 00 00	 call	 PyType_GenericNew
  00add	48 89 05 00 00
	00 00		 mov	 QWORD PTR Store_singleton, rax

; 889  :     if (!Store_singleton) return 0;

  00ae4	48 85 c0	 test	 rax, rax
  00ae7	0f 84 2d f5 ff
	ff		 je	 $LN154@init_types

; 890  :     Del_type = make_type("Del", expr_context_type, NULL, 0);

  00aed	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_context_type
  00af4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03ENJJMCOJ@Del?$AA@
  00afb	45 33 c9	 xor	 r9d, r9d
  00afe	45 33 c0	 xor	 r8d, r8d
  00b01	e8 00 00 00 00	 call	 make_type
  00b06	48 89 05 00 00
	00 00		 mov	 QWORD PTR Del_type, rax

; 891  :     if (!Del_type) return 0;

  00b0d	48 85 c0	 test	 rax, rax
  00b10	0f 84 04 f5 ff
	ff		 je	 $LN154@init_types

; 892  :     Del_singleton = PyType_GenericNew(Del_type, NULL, NULL);

  00b16	45 33 c0	 xor	 r8d, r8d
  00b19	33 d2		 xor	 edx, edx
  00b1b	48 8b c8	 mov	 rcx, rax
  00b1e	e8 00 00 00 00	 call	 PyType_GenericNew
  00b23	48 89 05 00 00
	00 00		 mov	 QWORD PTR Del_singleton, rax

; 893  :     if (!Del_singleton) return 0;

  00b2a	48 85 c0	 test	 rax, rax
  00b2d	0f 84 e7 f4 ff
	ff		 je	 $LN154@init_types

; 894  :     AugLoad_type = make_type("AugLoad", expr_context_type, NULL, 0);

  00b33	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_context_type
  00b3a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07GCIJHPCC@AugLoad?$AA@
  00b41	45 33 c9	 xor	 r9d, r9d
  00b44	45 33 c0	 xor	 r8d, r8d
  00b47	e8 00 00 00 00	 call	 make_type
  00b4c	48 89 05 00 00
	00 00		 mov	 QWORD PTR AugLoad_type, rax

; 895  :     if (!AugLoad_type) return 0;

  00b53	48 85 c0	 test	 rax, rax
  00b56	0f 84 be f4 ff
	ff		 je	 $LN154@init_types

; 896  :     AugLoad_singleton = PyType_GenericNew(AugLoad_type, NULL, NULL);

  00b5c	45 33 c0	 xor	 r8d, r8d
  00b5f	33 d2		 xor	 edx, edx
  00b61	48 8b c8	 mov	 rcx, rax
  00b64	e8 00 00 00 00	 call	 PyType_GenericNew
  00b69	48 89 05 00 00
	00 00		 mov	 QWORD PTR AugLoad_singleton, rax

; 897  :     if (!AugLoad_singleton) return 0;

  00b70	48 85 c0	 test	 rax, rax
  00b73	0f 84 a1 f4 ff
	ff		 je	 $LN154@init_types

; 898  :     AugStore_type = make_type("AugStore", expr_context_type, NULL, 0);

  00b79	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_context_type
  00b80	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08NAEMOJFF@AugStore?$AA@
  00b87	45 33 c9	 xor	 r9d, r9d
  00b8a	45 33 c0	 xor	 r8d, r8d
  00b8d	e8 00 00 00 00	 call	 make_type
  00b92	48 89 05 00 00
	00 00		 mov	 QWORD PTR AugStore_type, rax

; 899  :     if (!AugStore_type) return 0;

  00b99	48 85 c0	 test	 rax, rax
  00b9c	0f 84 78 f4 ff
	ff		 je	 $LN154@init_types

; 900  :     AugStore_singleton = PyType_GenericNew(AugStore_type, NULL, NULL);

  00ba2	45 33 c0	 xor	 r8d, r8d
  00ba5	33 d2		 xor	 edx, edx
  00ba7	48 8b c8	 mov	 rcx, rax
  00baa	e8 00 00 00 00	 call	 PyType_GenericNew
  00baf	48 89 05 00 00
	00 00		 mov	 QWORD PTR AugStore_singleton, rax

; 901  :     if (!AugStore_singleton) return 0;

  00bb6	48 85 c0	 test	 rax, rax
  00bb9	0f 84 5b f4 ff
	ff		 je	 $LN154@init_types

; 902  :     Param_type = make_type("Param", expr_context_type, NULL, 0);

  00bbf	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_context_type
  00bc6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LOJBNELM@Param?$AA@
  00bcd	45 33 c9	 xor	 r9d, r9d
  00bd0	45 33 c0	 xor	 r8d, r8d
  00bd3	e8 00 00 00 00	 call	 make_type
  00bd8	48 89 05 00 00
	00 00		 mov	 QWORD PTR Param_type, rax

; 903  :     if (!Param_type) return 0;

  00bdf	48 85 c0	 test	 rax, rax
  00be2	0f 84 32 f4 ff
	ff		 je	 $LN154@init_types

; 904  :     Param_singleton = PyType_GenericNew(Param_type, NULL, NULL);

  00be8	45 33 c0	 xor	 r8d, r8d
  00beb	33 d2		 xor	 edx, edx
  00bed	48 8b c8	 mov	 rcx, rax
  00bf0	e8 00 00 00 00	 call	 PyType_GenericNew
  00bf5	48 89 05 00 00
	00 00		 mov	 QWORD PTR Param_singleton, rax

; 905  :     if (!Param_singleton) return 0;

  00bfc	48 85 c0	 test	 rax, rax
  00bff	0f 84 15 f4 ff
	ff		 je	 $LN154@init_types

; 906  :     slice_type = make_type("slice", &AST_type, NULL, 0);

  00c05	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AST_type
  00c0c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05ILHMOJGN@slice?$AA@
  00c13	45 33 c9	 xor	 r9d, r9d
  00c16	45 33 c0	 xor	 r8d, r8d
  00c19	e8 00 00 00 00	 call	 make_type
  00c1e	48 89 05 00 00
	00 00		 mov	 QWORD PTR slice_type, rax

; 907  :     if (!slice_type) return 0;

  00c25	48 85 c0	 test	 rax, rax
  00c28	0f 84 ec f3 ff
	ff		 je	 $LN154@init_types

; 908  :     if (!add_attributes(slice_type, NULL, 0)) return 0;

  00c2e	45 33 c0	 xor	 r8d, r8d
  00c31	33 d2		 xor	 edx, edx
  00c33	48 8b c8	 mov	 rcx, rax
  00c36	e8 00 00 00 00	 call	 add_attributes
  00c3b	85 c0		 test	 eax, eax
  00c3d	0f 84 d7 f3 ff
	ff		 je	 $LN154@init_types

; 909  :     Slice_type = make_type("Slice", slice_type, Slice_fields, 3);

  00c43	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR slice_type
  00c4a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Slice_fields
  00c51	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05IMNAOMFL@Slice?$AA@
  00c58	41 b9 03 00 00
	00		 mov	 r9d, 3
  00c5e	e8 00 00 00 00	 call	 make_type
  00c63	48 89 05 00 00
	00 00		 mov	 QWORD PTR Slice_type, rax

; 910  :     if (!Slice_type) return 0;

  00c6a	48 85 c0	 test	 rax, rax
  00c6d	0f 84 a7 f3 ff
	ff		 je	 $LN154@init_types

; 911  :     ExtSlice_type = make_type("ExtSlice", slice_type, ExtSlice_fields, 1);

  00c73	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR slice_type
  00c7a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ExtSlice_fields
  00c81	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08CIIMGBAD@ExtSlice?$AA@
  00c88	41 b9 01 00 00
	00		 mov	 r9d, 1
  00c8e	e8 00 00 00 00	 call	 make_type
  00c93	48 89 05 00 00
	00 00		 mov	 QWORD PTR ExtSlice_type, rax

; 912  :     if (!ExtSlice_type) return 0;

  00c9a	48 85 c0	 test	 rax, rax
  00c9d	0f 84 77 f3 ff
	ff		 je	 $LN154@init_types

; 913  :     Index_type = make_type("Index", slice_type, Index_fields, 1);

  00ca3	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR slice_type
  00caa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Index_fields
  00cb1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05FNNGFGLF@Index?$AA@
  00cb8	41 b9 01 00 00
	00		 mov	 r9d, 1
  00cbe	e8 00 00 00 00	 call	 make_type
  00cc3	48 89 05 00 00
	00 00		 mov	 QWORD PTR Index_type, rax

; 914  :     if (!Index_type) return 0;

  00cca	48 85 c0	 test	 rax, rax
  00ccd	0f 84 47 f3 ff
	ff		 je	 $LN154@init_types

; 915  :     boolop_type = make_type("boolop", &AST_type, NULL, 0);

  00cd3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AST_type
  00cda	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06IBDOJNAO@boolop?$AA@
  00ce1	45 33 c9	 xor	 r9d, r9d
  00ce4	45 33 c0	 xor	 r8d, r8d
  00ce7	e8 00 00 00 00	 call	 make_type
  00cec	48 89 05 00 00
	00 00		 mov	 QWORD PTR boolop_type, rax

; 916  :     if (!boolop_type) return 0;

  00cf3	48 85 c0	 test	 rax, rax
  00cf6	0f 84 1e f3 ff
	ff		 je	 $LN154@init_types

; 917  :     if (!add_attributes(boolop_type, NULL, 0)) return 0;

  00cfc	45 33 c0	 xor	 r8d, r8d
  00cff	33 d2		 xor	 edx, edx
  00d01	48 8b c8	 mov	 rcx, rax
  00d04	e8 00 00 00 00	 call	 add_attributes
  00d09	85 c0		 test	 eax, eax
  00d0b	0f 84 09 f3 ff
	ff		 je	 $LN154@init_types

; 918  :     And_type = make_type("And", boolop_type, NULL, 0);

  00d11	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR boolop_type
  00d18	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03LOMLFHDC@And?$AA@
  00d1f	45 33 c9	 xor	 r9d, r9d
  00d22	45 33 c0	 xor	 r8d, r8d
  00d25	e8 00 00 00 00	 call	 make_type
  00d2a	48 89 05 00 00
	00 00		 mov	 QWORD PTR And_type, rax

; 919  :     if (!And_type) return 0;

  00d31	48 85 c0	 test	 rax, rax
  00d34	0f 84 e0 f2 ff
	ff		 je	 $LN154@init_types

; 920  :     And_singleton = PyType_GenericNew(And_type, NULL, NULL);

  00d3a	45 33 c0	 xor	 r8d, r8d
  00d3d	33 d2		 xor	 edx, edx
  00d3f	48 8b c8	 mov	 rcx, rax
  00d42	e8 00 00 00 00	 call	 PyType_GenericNew
  00d47	48 89 05 00 00
	00 00		 mov	 QWORD PTR And_singleton, rax

; 921  :     if (!And_singleton) return 0;

  00d4e	48 85 c0	 test	 rax, rax
  00d51	0f 84 c3 f2 ff
	ff		 je	 $LN154@init_types

; 922  :     Or_type = make_type("Or", boolop_type, NULL, 0);

  00d57	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR boolop_type
  00d5e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02GGHBPHGE@Or?$AA@
  00d65	45 33 c9	 xor	 r9d, r9d
  00d68	45 33 c0	 xor	 r8d, r8d
  00d6b	e8 00 00 00 00	 call	 make_type
  00d70	48 89 05 00 00
	00 00		 mov	 QWORD PTR Or_type, rax

; 923  :     if (!Or_type) return 0;

  00d77	48 85 c0	 test	 rax, rax
  00d7a	0f 84 9a f2 ff
	ff		 je	 $LN154@init_types

; 924  :     Or_singleton = PyType_GenericNew(Or_type, NULL, NULL);

  00d80	45 33 c0	 xor	 r8d, r8d
  00d83	33 d2		 xor	 edx, edx
  00d85	48 8b c8	 mov	 rcx, rax
  00d88	e8 00 00 00 00	 call	 PyType_GenericNew
  00d8d	48 89 05 00 00
	00 00		 mov	 QWORD PTR Or_singleton, rax

; 925  :     if (!Or_singleton) return 0;

  00d94	48 85 c0	 test	 rax, rax
  00d97	0f 84 7d f2 ff
	ff		 je	 $LN154@init_types

; 926  :     operator_type = make_type("operator", &AST_type, NULL, 0);

  00d9d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AST_type
  00da4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08LHJFAFGD@operator?$AA@
  00dab	45 33 c9	 xor	 r9d, r9d
  00dae	45 33 c0	 xor	 r8d, r8d
  00db1	e8 00 00 00 00	 call	 make_type
  00db6	48 89 05 00 00
	00 00		 mov	 QWORD PTR operator_type, rax

; 927  :     if (!operator_type) return 0;

  00dbd	48 85 c0	 test	 rax, rax
  00dc0	0f 84 54 f2 ff
	ff		 je	 $LN154@init_types

; 928  :     if (!add_attributes(operator_type, NULL, 0)) return 0;

  00dc6	45 33 c0	 xor	 r8d, r8d
  00dc9	33 d2		 xor	 edx, edx
  00dcb	48 8b c8	 mov	 rcx, rax
  00dce	e8 00 00 00 00	 call	 add_attributes
  00dd3	85 c0		 test	 eax, eax
  00dd5	0f 84 3f f2 ff
	ff		 je	 $LN154@init_types

; 929  :     Add_type = make_type("Add", operator_type, NULL, 0);

  00ddb	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR operator_type
  00de2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03LDFMNCOE@Add?$AA@
  00de9	45 33 c9	 xor	 r9d, r9d
  00dec	45 33 c0	 xor	 r8d, r8d
  00def	e8 00 00 00 00	 call	 make_type
  00df4	48 89 05 00 00
	00 00		 mov	 QWORD PTR Add_type, rax

; 930  :     if (!Add_type) return 0;

  00dfb	48 85 c0	 test	 rax, rax
  00dfe	0f 84 16 f2 ff
	ff		 je	 $LN154@init_types

; 931  :     Add_singleton = PyType_GenericNew(Add_type, NULL, NULL);

  00e04	45 33 c0	 xor	 r8d, r8d
  00e07	33 d2		 xor	 edx, edx
  00e09	48 8b c8	 mov	 rcx, rax
  00e0c	e8 00 00 00 00	 call	 PyType_GenericNew
  00e11	48 89 05 00 00
	00 00		 mov	 QWORD PTR Add_singleton, rax

; 932  :     if (!Add_singleton) return 0;

  00e18	48 85 c0	 test	 rax, rax
  00e1b	0f 84 f9 f1 ff
	ff		 je	 $LN154@init_types

; 933  :     Sub_type = make_type("Sub", operator_type, NULL, 0);

  00e21	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR operator_type
  00e28	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03CPCCDDB@Sub?$AA@
  00e2f	45 33 c9	 xor	 r9d, r9d
  00e32	45 33 c0	 xor	 r8d, r8d
  00e35	e8 00 00 00 00	 call	 make_type
  00e3a	48 89 05 00 00
	00 00		 mov	 QWORD PTR Sub_type, rax

; 934  :     if (!Sub_type) return 0;

  00e41	48 85 c0	 test	 rax, rax
  00e44	0f 84 d0 f1 ff
	ff		 je	 $LN154@init_types

; 935  :     Sub_singleton = PyType_GenericNew(Sub_type, NULL, NULL);

  00e4a	45 33 c0	 xor	 r8d, r8d
  00e4d	33 d2		 xor	 edx, edx
  00e4f	48 8b c8	 mov	 rcx, rax
  00e52	e8 00 00 00 00	 call	 PyType_GenericNew
  00e57	48 89 05 00 00
	00 00		 mov	 QWORD PTR Sub_singleton, rax

; 936  :     if (!Sub_singleton) return 0;

  00e5e	48 85 c0	 test	 rax, rax
  00e61	0f 84 b3 f1 ff
	ff		 je	 $LN154@init_types

; 937  :     Mult_type = make_type("Mult", operator_type, NULL, 0);

  00e67	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR operator_type
  00e6e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04MPMBEKAC@Mult?$AA@
  00e75	45 33 c9	 xor	 r9d, r9d
  00e78	45 33 c0	 xor	 r8d, r8d
  00e7b	e8 00 00 00 00	 call	 make_type
  00e80	48 89 05 00 00
	00 00		 mov	 QWORD PTR Mult_type, rax

; 938  :     if (!Mult_type) return 0;

  00e87	48 85 c0	 test	 rax, rax
  00e8a	0f 84 8a f1 ff
	ff		 je	 $LN154@init_types

; 939  :     Mult_singleton = PyType_GenericNew(Mult_type, NULL, NULL);

  00e90	45 33 c0	 xor	 r8d, r8d
  00e93	33 d2		 xor	 edx, edx
  00e95	48 8b c8	 mov	 rcx, rax
  00e98	e8 00 00 00 00	 call	 PyType_GenericNew
  00e9d	48 89 05 00 00
	00 00		 mov	 QWORD PTR Mult_singleton, rax

; 940  :     if (!Mult_singleton) return 0;

  00ea4	48 85 c0	 test	 rax, rax
  00ea7	0f 84 6d f1 ff
	ff		 je	 $LN154@init_types

; 941  :     Div_type = make_type("Div", operator_type, NULL, 0);

  00ead	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR operator_type
  00eb4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03PEKOMBFG@Div?$AA@
  00ebb	45 33 c9	 xor	 r9d, r9d
  00ebe	45 33 c0	 xor	 r8d, r8d
  00ec1	e8 00 00 00 00	 call	 make_type
  00ec6	48 89 05 00 00
	00 00		 mov	 QWORD PTR Div_type, rax

; 942  :     if (!Div_type) return 0;

  00ecd	48 85 c0	 test	 rax, rax
  00ed0	0f 84 44 f1 ff
	ff		 je	 $LN154@init_types

; 943  :     Div_singleton = PyType_GenericNew(Div_type, NULL, NULL);

  00ed6	45 33 c0	 xor	 r8d, r8d
  00ed9	33 d2		 xor	 edx, edx
  00edb	48 8b c8	 mov	 rcx, rax
  00ede	e8 00 00 00 00	 call	 PyType_GenericNew
  00ee3	48 89 05 00 00
	00 00		 mov	 QWORD PTR Div_singleton, rax

; 944  :     if (!Div_singleton) return 0;

  00eea	48 85 c0	 test	 rax, rax
  00eed	0f 84 27 f1 ff
	ff		 je	 $LN154@init_types

; 945  :     Mod_type = make_type("Mod", operator_type, NULL, 0);

  00ef3	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR operator_type
  00efa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03PFNPICLN@Mod?$AA@
  00f01	45 33 c9	 xor	 r9d, r9d
  00f04	45 33 c0	 xor	 r8d, r8d
  00f07	e8 00 00 00 00	 call	 make_type
  00f0c	48 89 05 00 00
	00 00		 mov	 QWORD PTR Mod_type, rax

; 946  :     if (!Mod_type) return 0;

  00f13	48 85 c0	 test	 rax, rax
  00f16	0f 84 fe f0 ff
	ff		 je	 $LN154@init_types

; 947  :     Mod_singleton = PyType_GenericNew(Mod_type, NULL, NULL);

  00f1c	45 33 c0	 xor	 r8d, r8d
  00f1f	33 d2		 xor	 edx, edx
  00f21	48 8b c8	 mov	 rcx, rax
  00f24	e8 00 00 00 00	 call	 PyType_GenericNew
  00f29	48 89 05 00 00
	00 00		 mov	 QWORD PTR Mod_singleton, rax

; 948  :     if (!Mod_singleton) return 0;

  00f30	48 85 c0	 test	 rax, rax
  00f33	0f 84 e1 f0 ff
	ff		 je	 $LN154@init_types

; 949  :     Pow_type = make_type("Pow", operator_type, NULL, 0);

  00f39	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR operator_type
  00f40	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03DGEDEMGN@Pow?$AA@
  00f47	45 33 c9	 xor	 r9d, r9d
  00f4a	45 33 c0	 xor	 r8d, r8d
  00f4d	e8 00 00 00 00	 call	 make_type
  00f52	48 89 05 00 00
	00 00		 mov	 QWORD PTR Pow_type, rax

; 950  :     if (!Pow_type) return 0;

  00f59	48 85 c0	 test	 rax, rax
  00f5c	0f 84 b8 f0 ff
	ff		 je	 $LN154@init_types

; 951  :     Pow_singleton = PyType_GenericNew(Pow_type, NULL, NULL);

  00f62	45 33 c0	 xor	 r8d, r8d
  00f65	33 d2		 xor	 edx, edx
  00f67	48 8b c8	 mov	 rcx, rax
  00f6a	e8 00 00 00 00	 call	 PyType_GenericNew
  00f6f	48 89 05 00 00
	00 00		 mov	 QWORD PTR Pow_singleton, rax

; 952  :     if (!Pow_singleton) return 0;

  00f76	48 85 c0	 test	 rax, rax
  00f79	0f 84 9b f0 ff
	ff		 je	 $LN154@init_types

; 953  :     LShift_type = make_type("LShift", operator_type, NULL, 0);

  00f7f	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR operator_type
  00f86	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06IDEHMKLA@LShift?$AA@
  00f8d	45 33 c9	 xor	 r9d, r9d
  00f90	45 33 c0	 xor	 r8d, r8d
  00f93	e8 00 00 00 00	 call	 make_type
  00f98	48 89 05 00 00
	00 00		 mov	 QWORD PTR LShift_type, rax

; 954  :     if (!LShift_type) return 0;

  00f9f	48 85 c0	 test	 rax, rax
  00fa2	0f 84 72 f0 ff
	ff		 je	 $LN154@init_types

; 955  :     LShift_singleton = PyType_GenericNew(LShift_type, NULL, NULL);

  00fa8	45 33 c0	 xor	 r8d, r8d
  00fab	33 d2		 xor	 edx, edx
  00fad	48 8b c8	 mov	 rcx, rax
  00fb0	e8 00 00 00 00	 call	 PyType_GenericNew
  00fb5	48 89 05 00 00
	00 00		 mov	 QWORD PTR LShift_singleton, rax

; 956  :     if (!LShift_singleton) return 0;

  00fbc	48 85 c0	 test	 rax, rax
  00fbf	0f 84 55 f0 ff
	ff		 je	 $LN154@init_types

; 957  :     RShift_type = make_type("RShift", operator_type, NULL, 0);

  00fc5	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR operator_type
  00fcc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06LEKGCNCD@RShift?$AA@
  00fd3	45 33 c9	 xor	 r9d, r9d
  00fd6	45 33 c0	 xor	 r8d, r8d
  00fd9	e8 00 00 00 00	 call	 make_type
  00fde	48 89 05 00 00
	00 00		 mov	 QWORD PTR RShift_type, rax

; 958  :     if (!RShift_type) return 0;

  00fe5	48 85 c0	 test	 rax, rax
  00fe8	0f 84 2c f0 ff
	ff		 je	 $LN154@init_types

; 959  :     RShift_singleton = PyType_GenericNew(RShift_type, NULL, NULL);

  00fee	45 33 c0	 xor	 r8d, r8d
  00ff1	33 d2		 xor	 edx, edx
  00ff3	48 8b c8	 mov	 rcx, rax
  00ff6	e8 00 00 00 00	 call	 PyType_GenericNew
  00ffb	48 89 05 00 00
	00 00		 mov	 QWORD PTR RShift_singleton, rax

; 960  :     if (!RShift_singleton) return 0;

  01002	48 85 c0	 test	 rax, rax
  01005	0f 84 0f f0 ff
	ff		 je	 $LN154@init_types

; 961  :     BitOr_type = make_type("BitOr", operator_type, NULL, 0);

  0100b	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR operator_type
  01012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05BKBNAGEF@BitOr?$AA@
  01019	45 33 c9	 xor	 r9d, r9d
  0101c	45 33 c0	 xor	 r8d, r8d
  0101f	e8 00 00 00 00	 call	 make_type
  01024	48 89 05 00 00
	00 00		 mov	 QWORD PTR BitOr_type, rax

; 962  :     if (!BitOr_type) return 0;

  0102b	48 85 c0	 test	 rax, rax
  0102e	0f 84 e6 ef ff
	ff		 je	 $LN154@init_types

; 963  :     BitOr_singleton = PyType_GenericNew(BitOr_type, NULL, NULL);

  01034	45 33 c0	 xor	 r8d, r8d
  01037	33 d2		 xor	 edx, edx
  01039	48 8b c8	 mov	 rcx, rax
  0103c	e8 00 00 00 00	 call	 PyType_GenericNew
  01041	48 89 05 00 00
	00 00		 mov	 QWORD PTR BitOr_singleton, rax

; 964  :     if (!BitOr_singleton) return 0;

  01048	48 85 c0	 test	 rax, rax
  0104b	0f 84 c9 ef ff
	ff		 je	 $LN154@init_types

; 965  :     BitXor_type = make_type("BitXor", operator_type, NULL, 0);

  01051	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR operator_type
  01058	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06MCJFOMGI@BitXor?$AA@
  0105f	45 33 c9	 xor	 r9d, r9d
  01062	45 33 c0	 xor	 r8d, r8d
  01065	e8 00 00 00 00	 call	 make_type
  0106a	48 89 05 00 00
	00 00		 mov	 QWORD PTR BitXor_type, rax

; 966  :     if (!BitXor_type) return 0;

  01071	48 85 c0	 test	 rax, rax
  01074	0f 84 a0 ef ff
	ff		 je	 $LN154@init_types

; 967  :     BitXor_singleton = PyType_GenericNew(BitXor_type, NULL, NULL);

  0107a	45 33 c0	 xor	 r8d, r8d
  0107d	33 d2		 xor	 edx, edx
  0107f	48 8b c8	 mov	 rcx, rax
  01082	e8 00 00 00 00	 call	 PyType_GenericNew
  01087	48 89 05 00 00
	00 00		 mov	 QWORD PTR BitXor_singleton, rax

; 968  :     if (!BitXor_singleton) return 0;

  0108e	48 85 c0	 test	 rax, rax
  01091	0f 84 83 ef ff
	ff		 je	 $LN154@init_types

; 969  :     BitAnd_type = make_type("BitAnd", operator_type, NULL, 0);

  01097	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR operator_type
  0109e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06PCNOCLJN@BitAnd?$AA@
  010a5	45 33 c9	 xor	 r9d, r9d
  010a8	45 33 c0	 xor	 r8d, r8d
  010ab	e8 00 00 00 00	 call	 make_type
  010b0	48 89 05 00 00
	00 00		 mov	 QWORD PTR BitAnd_type, rax

; 970  :     if (!BitAnd_type) return 0;

  010b7	48 85 c0	 test	 rax, rax
  010ba	0f 84 5a ef ff
	ff		 je	 $LN154@init_types

; 971  :     BitAnd_singleton = PyType_GenericNew(BitAnd_type, NULL, NULL);

  010c0	45 33 c0	 xor	 r8d, r8d
  010c3	33 d2		 xor	 edx, edx
  010c5	48 8b c8	 mov	 rcx, rax
  010c8	e8 00 00 00 00	 call	 PyType_GenericNew
  010cd	48 89 05 00 00
	00 00		 mov	 QWORD PTR BitAnd_singleton, rax

; 972  :     if (!BitAnd_singleton) return 0;

  010d4	48 85 c0	 test	 rax, rax
  010d7	0f 84 3d ef ff
	ff		 je	 $LN154@init_types

; 973  :     FloorDiv_type = make_type("FloorDiv", operator_type, NULL, 0);

  010dd	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR operator_type
  010e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08BOGBPHLB@FloorDiv?$AA@
  010eb	45 33 c9	 xor	 r9d, r9d
  010ee	45 33 c0	 xor	 r8d, r8d
  010f1	e8 00 00 00 00	 call	 make_type
  010f6	48 89 05 00 00
	00 00		 mov	 QWORD PTR FloorDiv_type, rax

; 974  :     if (!FloorDiv_type) return 0;

  010fd	48 85 c0	 test	 rax, rax
  01100	0f 84 14 ef ff
	ff		 je	 $LN154@init_types

; 975  :     FloorDiv_singleton = PyType_GenericNew(FloorDiv_type, NULL, NULL);

  01106	45 33 c0	 xor	 r8d, r8d
  01109	33 d2		 xor	 edx, edx
  0110b	48 8b c8	 mov	 rcx, rax
  0110e	e8 00 00 00 00	 call	 PyType_GenericNew
  01113	48 89 05 00 00
	00 00		 mov	 QWORD PTR FloorDiv_singleton, rax

; 976  :     if (!FloorDiv_singleton) return 0;

  0111a	48 85 c0	 test	 rax, rax
  0111d	0f 84 f7 ee ff
	ff		 je	 $LN154@init_types

; 977  :     unaryop_type = make_type("unaryop", &AST_type, NULL, 0);

  01123	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AST_type
  0112a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07JPNNPNHH@unaryop?$AA@
  01131	45 33 c9	 xor	 r9d, r9d
  01134	45 33 c0	 xor	 r8d, r8d
  01137	e8 00 00 00 00	 call	 make_type
  0113c	48 89 05 00 00
	00 00		 mov	 QWORD PTR unaryop_type, rax

; 978  :     if (!unaryop_type) return 0;

  01143	48 85 c0	 test	 rax, rax
  01146	0f 84 ce ee ff
	ff		 je	 $LN154@init_types

; 979  :     if (!add_attributes(unaryop_type, NULL, 0)) return 0;

  0114c	45 33 c0	 xor	 r8d, r8d
  0114f	33 d2		 xor	 edx, edx
  01151	48 8b c8	 mov	 rcx, rax
  01154	e8 00 00 00 00	 call	 add_attributes
  01159	85 c0		 test	 eax, eax
  0115b	0f 84 b9 ee ff
	ff		 je	 $LN154@init_types

; 980  :     Invert_type = make_type("Invert", unaryop_type, NULL, 0);

  01161	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR unaryop_type
  01168	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06OHLCGMJD@Invert?$AA@
  0116f	45 33 c9	 xor	 r9d, r9d
  01172	45 33 c0	 xor	 r8d, r8d
  01175	e8 00 00 00 00	 call	 make_type
  0117a	48 89 05 00 00
	00 00		 mov	 QWORD PTR Invert_type, rax

; 981  :     if (!Invert_type) return 0;

  01181	48 85 c0	 test	 rax, rax
  01184	0f 84 90 ee ff
	ff		 je	 $LN154@init_types

; 982  :     Invert_singleton = PyType_GenericNew(Invert_type, NULL, NULL);

  0118a	45 33 c0	 xor	 r8d, r8d
  0118d	33 d2		 xor	 edx, edx
  0118f	48 8b c8	 mov	 rcx, rax
  01192	e8 00 00 00 00	 call	 PyType_GenericNew
  01197	48 89 05 00 00
	00 00		 mov	 QWORD PTR Invert_singleton, rax

; 983  :     if (!Invert_singleton) return 0;

  0119e	48 85 c0	 test	 rax, rax
  011a1	0f 84 73 ee ff
	ff		 je	 $LN154@init_types

; 984  :     Not_type = make_type("Not", unaryop_type, NULL, 0);

  011a7	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR unaryop_type
  011ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03KNKIDPAC@Not?$AA@
  011b5	45 33 c9	 xor	 r9d, r9d
  011b8	45 33 c0	 xor	 r8d, r8d
  011bb	e8 00 00 00 00	 call	 make_type
  011c0	48 89 05 00 00
	00 00		 mov	 QWORD PTR Not_type, rax

; 985  :     if (!Not_type) return 0;

  011c7	48 85 c0	 test	 rax, rax
  011ca	0f 84 4a ee ff
	ff		 je	 $LN154@init_types

; 986  :     Not_singleton = PyType_GenericNew(Not_type, NULL, NULL);

  011d0	45 33 c0	 xor	 r8d, r8d
  011d3	33 d2		 xor	 edx, edx
  011d5	48 8b c8	 mov	 rcx, rax
  011d8	e8 00 00 00 00	 call	 PyType_GenericNew
  011dd	48 89 05 00 00
	00 00		 mov	 QWORD PTR Not_singleton, rax

; 987  :     if (!Not_singleton) return 0;

  011e4	48 85 c0	 test	 rax, rax
  011e7	0f 84 2d ee ff
	ff		 je	 $LN154@init_types

; 988  :     UAdd_type = make_type("UAdd", unaryop_type, NULL, 0);

  011ed	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR unaryop_type
  011f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04KEMJLKFO@UAdd?$AA@
  011fb	45 33 c9	 xor	 r9d, r9d
  011fe	45 33 c0	 xor	 r8d, r8d
  01201	e8 00 00 00 00	 call	 make_type
  01206	48 89 05 00 00
	00 00		 mov	 QWORD PTR UAdd_type, rax

; 989  :     if (!UAdd_type) return 0;

  0120d	48 85 c0	 test	 rax, rax
  01210	0f 84 04 ee ff
	ff		 je	 $LN154@init_types

; 990  :     UAdd_singleton = PyType_GenericNew(UAdd_type, NULL, NULL);

  01216	45 33 c0	 xor	 r8d, r8d
  01219	33 d2		 xor	 edx, edx
  0121b	48 8b c8	 mov	 rcx, rax
  0121e	e8 00 00 00 00	 call	 PyType_GenericNew
  01223	48 89 05 00 00
	00 00		 mov	 QWORD PTR UAdd_singleton, rax

; 991  :     if (!UAdd_singleton) return 0;

  0122a	48 85 c0	 test	 rax, rax
  0122d	0f 84 e7 ed ff
	ff		 je	 $LN154@init_types

; 992  :     USub_type = make_type("USub", unaryop_type, NULL, 0);

  01233	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR unaryop_type
  0123a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04BFGHELIL@USub?$AA@
  01241	45 33 c9	 xor	 r9d, r9d
  01244	45 33 c0	 xor	 r8d, r8d
  01247	e8 00 00 00 00	 call	 make_type
  0124c	48 89 05 00 00
	00 00		 mov	 QWORD PTR USub_type, rax

; 993  :     if (!USub_type) return 0;

  01253	48 85 c0	 test	 rax, rax
  01256	0f 84 be ed ff
	ff		 je	 $LN154@init_types

; 994  :     USub_singleton = PyType_GenericNew(USub_type, NULL, NULL);

  0125c	45 33 c0	 xor	 r8d, r8d
  0125f	33 d2		 xor	 edx, edx
  01261	48 8b c8	 mov	 rcx, rax
  01264	e8 00 00 00 00	 call	 PyType_GenericNew
  01269	48 89 05 00 00
	00 00		 mov	 QWORD PTR USub_singleton, rax

; 995  :     if (!USub_singleton) return 0;

  01270	48 85 c0	 test	 rax, rax
  01273	0f 84 a1 ed ff
	ff		 je	 $LN154@init_types

; 996  :     cmpop_type = make_type("cmpop", &AST_type, NULL, 0);

  01279	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AST_type
  01280	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05KGHEMFCD@cmpop?$AA@
  01287	45 33 c9	 xor	 r9d, r9d
  0128a	45 33 c0	 xor	 r8d, r8d
  0128d	e8 00 00 00 00	 call	 make_type
  01292	48 89 05 00 00
	00 00		 mov	 QWORD PTR cmpop_type, rax

; 997  :     if (!cmpop_type) return 0;

  01299	48 85 c0	 test	 rax, rax
  0129c	0f 84 78 ed ff
	ff		 je	 $LN154@init_types

; 998  :     if (!add_attributes(cmpop_type, NULL, 0)) return 0;

  012a2	45 33 c0	 xor	 r8d, r8d
  012a5	33 d2		 xor	 edx, edx
  012a7	48 8b c8	 mov	 rcx, rax
  012aa	e8 00 00 00 00	 call	 add_attributes
  012af	85 c0		 test	 eax, eax
  012b1	0f 84 63 ed ff
	ff		 je	 $LN154@init_types

; 999  :     Eq_type = make_type("Eq", cmpop_type, NULL, 0);

  012b7	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR cmpop_type
  012be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02EAMLCBHB@Eq?$AA@
  012c5	45 33 c9	 xor	 r9d, r9d
  012c8	45 33 c0	 xor	 r8d, r8d
  012cb	e8 00 00 00 00	 call	 make_type
  012d0	48 89 05 00 00
	00 00		 mov	 QWORD PTR Eq_type, rax

; 1000 :     if (!Eq_type) return 0;

  012d7	48 85 c0	 test	 rax, rax
  012da	0f 84 3a ed ff
	ff		 je	 $LN154@init_types

; 1001 :     Eq_singleton = PyType_GenericNew(Eq_type, NULL, NULL);

  012e0	45 33 c0	 xor	 r8d, r8d
  012e3	33 d2		 xor	 edx, edx
  012e5	48 8b c8	 mov	 rcx, rax
  012e8	e8 00 00 00 00	 call	 PyType_GenericNew
  012ed	48 89 05 00 00
	00 00		 mov	 QWORD PTR Eq_singleton, rax

; 1002 :     if (!Eq_singleton) return 0;

  012f4	48 85 c0	 test	 rax, rax
  012f7	0f 84 1d ed ff
	ff		 je	 $LN154@init_types

; 1003 :     NotEq_type = make_type("NotEq", cmpop_type, NULL, 0);

  012fd	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR cmpop_type
  01304	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05MECFOFIL@NotEq?$AA@
  0130b	45 33 c9	 xor	 r9d, r9d
  0130e	45 33 c0	 xor	 r8d, r8d
  01311	e8 00 00 00 00	 call	 make_type
  01316	48 89 05 00 00
	00 00		 mov	 QWORD PTR NotEq_type, rax

; 1004 :     if (!NotEq_type) return 0;

  0131d	48 85 c0	 test	 rax, rax
  01320	0f 84 f4 ec ff
	ff		 je	 $LN154@init_types

; 1005 :     NotEq_singleton = PyType_GenericNew(NotEq_type, NULL, NULL);

  01326	45 33 c0	 xor	 r8d, r8d
  01329	33 d2		 xor	 edx, edx
  0132b	48 8b c8	 mov	 rcx, rax
  0132e	e8 00 00 00 00	 call	 PyType_GenericNew
  01333	48 89 05 00 00
	00 00		 mov	 QWORD PTR NotEq_singleton, rax

; 1006 :     if (!NotEq_singleton) return 0;

  0133a	48 85 c0	 test	 rax, rax
  0133d	0f 84 d7 ec ff
	ff		 je	 $LN154@init_types

; 1007 :     Lt_type = make_type("Lt", cmpop_type, NULL, 0);

  01343	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR cmpop_type
  0134a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02DCGNOOLL@Lt?$AA@
  01351	45 33 c9	 xor	 r9d, r9d
  01354	45 33 c0	 xor	 r8d, r8d
  01357	e8 00 00 00 00	 call	 make_type
  0135c	48 89 05 00 00
	00 00		 mov	 QWORD PTR Lt_type, rax

; 1008 :     if (!Lt_type) return 0;

  01363	48 85 c0	 test	 rax, rax
  01366	0f 84 ae ec ff
	ff		 je	 $LN154@init_types

; 1009 :     Lt_singleton = PyType_GenericNew(Lt_type, NULL, NULL);

  0136c	45 33 c0	 xor	 r8d, r8d
  0136f	33 d2		 xor	 edx, edx
  01371	48 8b c8	 mov	 rcx, rax
  01374	e8 00 00 00 00	 call	 PyType_GenericNew
  01379	48 89 05 00 00
	00 00		 mov	 QWORD PTR Lt_singleton, rax

; 1010 :     if (!Lt_singleton) return 0;

  01380	48 85 c0	 test	 rax, rax
  01383	0f 84 91 ec ff
	ff		 je	 $LN154@init_types

; 1011 :     LtE_type = make_type("LtE", cmpop_type, NULL, 0);

  01389	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR cmpop_type
  01390	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03NBIPLMKK@LtE?$AA@
  01397	45 33 c9	 xor	 r9d, r9d
  0139a	45 33 c0	 xor	 r8d, r8d
  0139d	e8 00 00 00 00	 call	 make_type
  013a2	48 89 05 00 00
	00 00		 mov	 QWORD PTR LtE_type, rax

; 1012 :     if (!LtE_type) return 0;

  013a9	48 85 c0	 test	 rax, rax
  013ac	0f 84 68 ec ff
	ff		 je	 $LN154@init_types

; 1013 :     LtE_singleton = PyType_GenericNew(LtE_type, NULL, NULL);

  013b2	45 33 c0	 xor	 r8d, r8d
  013b5	33 d2		 xor	 edx, edx
  013b7	48 8b c8	 mov	 rcx, rax
  013ba	e8 00 00 00 00	 call	 PyType_GenericNew
  013bf	48 89 05 00 00
	00 00		 mov	 QWORD PTR LtE_singleton, rax

; 1014 :     if (!LtE_singleton) return 0;

  013c6	48 85 c0	 test	 rax, rax
  013c9	0f 84 4b ec ff
	ff		 je	 $LN154@init_types

; 1015 :     Gt_type = make_type("Gt", cmpop_type, NULL, 0);

  013cf	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR cmpop_type
  013d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02DODIABFK@Gt?$AA@
  013dd	45 33 c9	 xor	 r9d, r9d
  013e0	45 33 c0	 xor	 r8d, r8d
  013e3	e8 00 00 00 00	 call	 make_type
  013e8	48 89 05 00 00
	00 00		 mov	 QWORD PTR Gt_type, rax

; 1016 :     if (!Gt_type) return 0;

  013ef	48 85 c0	 test	 rax, rax
  013f2	0f 84 22 ec ff
	ff		 je	 $LN154@init_types

; 1017 :     Gt_singleton = PyType_GenericNew(Gt_type, NULL, NULL);

  013f8	45 33 c0	 xor	 r8d, r8d
  013fb	33 d2		 xor	 edx, edx
  013fd	48 8b c8	 mov	 rcx, rax
  01400	e8 00 00 00 00	 call	 PyType_GenericNew
  01405	48 89 05 00 00
	00 00		 mov	 QWORD PTR Gt_singleton, rax

; 1018 :     if (!Gt_singleton) return 0;

  0140c	48 85 c0	 test	 rax, rax
  0140f	0f 84 05 ec ff
	ff		 je	 $LN154@init_types

; 1019 :     GtE_type = make_type("GtE", cmpop_type, NULL, 0);

  01415	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR cmpop_type
  0141c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03GIODLKL@GtE?$AA@
  01423	45 33 c9	 xor	 r9d, r9d
  01426	45 33 c0	 xor	 r8d, r8d
  01429	e8 00 00 00 00	 call	 make_type
  0142e	48 89 05 00 00
	00 00		 mov	 QWORD PTR GtE_type, rax

; 1020 :     if (!GtE_type) return 0;

  01435	48 85 c0	 test	 rax, rax
  01438	0f 84 dc eb ff
	ff		 je	 $LN154@init_types

; 1021 :     GtE_singleton = PyType_GenericNew(GtE_type, NULL, NULL);

  0143e	45 33 c0	 xor	 r8d, r8d
  01441	33 d2		 xor	 edx, edx
  01443	48 8b c8	 mov	 rcx, rax
  01446	e8 00 00 00 00	 call	 PyType_GenericNew
  0144b	48 89 05 00 00
	00 00		 mov	 QWORD PTR GtE_singleton, rax

; 1022 :     if (!GtE_singleton) return 0;

  01452	48 85 c0	 test	 rax, rax
  01455	0f 84 bf eb ff
	ff		 je	 $LN154@init_types

; 1023 :     Is_type = make_type("Is", cmpop_type, NULL, 0);

  0145b	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR cmpop_type
  01462	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02HLOHLKJH@Is?$AA@
  01469	45 33 c9	 xor	 r9d, r9d
  0146c	45 33 c0	 xor	 r8d, r8d
  0146f	e8 00 00 00 00	 call	 make_type
  01474	48 89 05 00 00
	00 00		 mov	 QWORD PTR Is_type, rax

; 1024 :     if (!Is_type) return 0;

  0147b	48 85 c0	 test	 rax, rax
  0147e	0f 84 96 eb ff
	ff		 je	 $LN154@init_types

; 1025 :     Is_singleton = PyType_GenericNew(Is_type, NULL, NULL);

  01484	45 33 c0	 xor	 r8d, r8d
  01487	33 d2		 xor	 edx, edx
  01489	48 8b c8	 mov	 rcx, rax
  0148c	e8 00 00 00 00	 call	 PyType_GenericNew
  01491	48 89 05 00 00
	00 00		 mov	 QWORD PTR Is_singleton, rax

; 1026 :     if (!Is_singleton) return 0;

  01498	48 85 c0	 test	 rax, rax
  0149b	0f 84 79 eb ff
	ff		 je	 $LN154@init_types

; 1027 :     IsNot_type = make_type("IsNot", cmpop_type, NULL, 0);

  014a1	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR cmpop_type
  014a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05KLALIAAG@IsNot?$AA@
  014af	45 33 c9	 xor	 r9d, r9d
  014b2	45 33 c0	 xor	 r8d, r8d
  014b5	e8 00 00 00 00	 call	 make_type
  014ba	48 89 05 00 00
	00 00		 mov	 QWORD PTR IsNot_type, rax

; 1028 :     if (!IsNot_type) return 0;

  014c1	48 85 c0	 test	 rax, rax
  014c4	0f 84 50 eb ff
	ff		 je	 $LN154@init_types

; 1029 :     IsNot_singleton = PyType_GenericNew(IsNot_type, NULL, NULL);

  014ca	45 33 c0	 xor	 r8d, r8d
  014cd	33 d2		 xor	 edx, edx
  014cf	48 8b c8	 mov	 rcx, rax
  014d2	e8 00 00 00 00	 call	 PyType_GenericNew
  014d7	48 89 05 00 00
	00 00		 mov	 QWORD PTR IsNot_singleton, rax

; 1030 :     if (!IsNot_singleton) return 0;

  014de	48 85 c0	 test	 rax, rax
  014e1	0f 84 33 eb ff
	ff		 je	 $LN154@init_types

; 1031 :     In_type = make_type("In", cmpop_type, NULL, 0);

  014e7	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR cmpop_type
  014ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02IEILNGIL@In?$AA@
  014f5	45 33 c9	 xor	 r9d, r9d
  014f8	45 33 c0	 xor	 r8d, r8d
  014fb	e8 00 00 00 00	 call	 make_type
  01500	48 89 05 00 00
	00 00		 mov	 QWORD PTR In_type, rax

; 1032 :     if (!In_type) return 0;

  01507	48 85 c0	 test	 rax, rax
  0150a	0f 84 0a eb ff
	ff		 je	 $LN154@init_types

; 1033 :     In_singleton = PyType_GenericNew(In_type, NULL, NULL);

  01510	45 33 c0	 xor	 r8d, r8d
  01513	33 d2		 xor	 edx, edx
  01515	48 8b c8	 mov	 rcx, rax
  01518	e8 00 00 00 00	 call	 PyType_GenericNew
  0151d	48 89 05 00 00
	00 00		 mov	 QWORD PTR In_singleton, rax

; 1034 :     if (!In_singleton) return 0;

  01524	48 85 c0	 test	 rax, rax
  01527	0f 84 ed ea ff
	ff		 je	 $LN154@init_types

; 1035 :     NotIn_type = make_type("NotIn", cmpop_type, NULL, 0);

  0152d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR cmpop_type
  01534	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05GFBCHB@NotIn?$AA@
  0153b	45 33 c9	 xor	 r9d, r9d
  0153e	45 33 c0	 xor	 r8d, r8d
  01541	e8 00 00 00 00	 call	 make_type
  01546	48 89 05 00 00
	00 00		 mov	 QWORD PTR NotIn_type, rax

; 1036 :     if (!NotIn_type) return 0;

  0154d	48 85 c0	 test	 rax, rax
  01550	0f 84 c4 ea ff
	ff		 je	 $LN154@init_types

; 1037 :     NotIn_singleton = PyType_GenericNew(NotIn_type, NULL, NULL);

  01556	45 33 c0	 xor	 r8d, r8d
  01559	33 d2		 xor	 edx, edx
  0155b	48 8b c8	 mov	 rcx, rax
  0155e	e8 00 00 00 00	 call	 PyType_GenericNew
  01563	48 89 05 00 00
	00 00		 mov	 QWORD PTR NotIn_singleton, rax

; 1038 :     if (!NotIn_singleton) return 0;

  0156a	48 85 c0	 test	 rax, rax
  0156d	0f 84 a7 ea ff
	ff		 je	 $LN154@init_types

; 1039 :     comprehension_type = make_type("comprehension", &AST_type,
; 1040 :                                    comprehension_fields, 3);

  01573	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:comprehension_fields
  0157a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AST_type
  01581	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@PDDLNDDO@comprehension?$AA@
  01588	41 b9 03 00 00
	00		 mov	 r9d, 3
  0158e	e8 00 00 00 00	 call	 make_type
  01593	48 89 05 00 00
	00 00		 mov	 QWORD PTR comprehension_type, rax

; 1041 :     if (!comprehension_type) return 0;

  0159a	48 85 c0	 test	 rax, rax
  0159d	0f 84 77 ea ff
	ff		 je	 $LN154@init_types

; 1042 :     excepthandler_type = make_type("excepthandler", &AST_type, NULL, 0);

  015a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AST_type
  015aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@LBOCECKK@excepthandler?$AA@
  015b1	45 33 c9	 xor	 r9d, r9d
  015b4	45 33 c0	 xor	 r8d, r8d
  015b7	e8 00 00 00 00	 call	 make_type
  015bc	48 89 05 00 00
	00 00		 mov	 QWORD PTR excepthandler_type, rax

; 1043 :     if (!excepthandler_type) return 0;

  015c3	48 85 c0	 test	 rax, rax
  015c6	0f 84 4e ea ff
	ff		 je	 $LN154@init_types

; 1044 :     if (!add_attributes(excepthandler_type, excepthandler_attributes, 2))

  015cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:excepthandler_attributes
  015d3	41 b8 02 00 00
	00		 mov	 r8d, 2
  015d9	48 8b c8	 mov	 rcx, rax
  015dc	e8 00 00 00 00	 call	 add_attributes
  015e1	85 c0		 test	 eax, eax

; 1045 :         return 0;

  015e3	0f 84 31 ea ff
	ff		 je	 $LN154@init_types

; 1046 :     ExceptHandler_type = make_type("ExceptHandler", excepthandler_type,
; 1047 :                                    ExceptHandler_fields, 3);

  015e9	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR excepthandler_type
  015f0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ExceptHandler_fields
  015f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@IFPAFICE@ExceptHandler?$AA@
  015fe	41 b9 03 00 00
	00		 mov	 r9d, 3
  01604	e8 00 00 00 00	 call	 make_type
  01609	48 89 05 00 00
	00 00		 mov	 QWORD PTR ExceptHandler_type, rax

; 1048 :     if (!ExceptHandler_type) return 0;

  01610	48 85 c0	 test	 rax, rax
  01613	0f 84 01 ea ff
	ff		 je	 $LN154@init_types

; 1049 :     arguments_type = make_type("arguments", &AST_type, arguments_fields, 8);

  01619	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:arguments_fields
  01620	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AST_type
  01627	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09PBNAMLIK@arguments?$AA@
  0162e	41 b9 08 00 00
	00		 mov	 r9d, 8
  01634	e8 00 00 00 00	 call	 make_type
  01639	48 89 05 00 00
	00 00		 mov	 QWORD PTR arguments_type, rax

; 1050 :     if (!arguments_type) return 0;

  01640	48 85 c0	 test	 rax, rax
  01643	0f 84 d1 e9 ff
	ff		 je	 $LN154@init_types

; 1051 :     arg_type = make_type("arg", &AST_type, arg_fields, 2);

  01649	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:arg_fields
  01650	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AST_type
  01657	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03CAOIPBNL@arg?$AA@
  0165e	41 b9 02 00 00
	00		 mov	 r9d, 2
  01664	e8 00 00 00 00	 call	 make_type
  01669	48 89 05 00 00
	00 00		 mov	 QWORD PTR arg_type, rax

; 1052 :     if (!arg_type) return 0;

  01670	48 85 c0	 test	 rax, rax
  01673	0f 84 a1 e9 ff
	ff		 je	 $LN154@init_types

; 1053 :     keyword_type = make_type("keyword", &AST_type, keyword_fields, 2);

  01679	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:keyword_fields
  01680	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AST_type
  01687	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07JMKMGKCH@keyword?$AA@
  0168e	41 b9 02 00 00
	00		 mov	 r9d, 2
  01694	e8 00 00 00 00	 call	 make_type
  01699	48 89 05 00 00
	00 00		 mov	 QWORD PTR keyword_type, rax

; 1054 :     if (!keyword_type) return 0;

  016a0	48 85 c0	 test	 rax, rax
  016a3	0f 84 71 e9 ff
	ff		 je	 $LN154@init_types

; 1055 :     alias_type = make_type("alias", &AST_type, alias_fields, 2);

  016a9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:alias_fields
  016b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AST_type
  016b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05NKHOCLEE@alias?$AA@
  016be	41 b9 02 00 00
	00		 mov	 r9d, 2
  016c4	e8 00 00 00 00	 call	 make_type
  016c9	48 89 05 00 00
	00 00		 mov	 QWORD PTR alias_type, rax

; 1056 :     if (!alias_type) return 0;

  016d0	48 85 c0	 test	 rax, rax
  016d3	0f 84 41 e9 ff
	ff		 je	 $LN154@init_types

; 1057 :     withitem_type = make_type("withitem", &AST_type, withitem_fields, 2);

  016d9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:withitem_fields
  016e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AST_type
  016e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08FACALJAE@withitem?$AA@
  016ee	41 b9 02 00 00
	00		 mov	 r9d, 2
  016f4	e8 00 00 00 00	 call	 make_type
  016f9	48 89 05 00 00
	00 00		 mov	 QWORD PTR withitem_type, rax

; 1058 :     if (!withitem_type) return 0;

  01700	48 85 c0	 test	 rax, rax
  01703	0f 84 11 e9 ff
	ff		 je	 $LN154@init_types

; 1059 :     initialized = 1;

  01709	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?initialized@?1??init_types@@9@9, 1
$LN153@init_types:

; 1060 :     return 1;

  01713	b8 01 00 00 00	 mov	 eax, 1

; 1061 : }

  01718	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0171c	c3		 ret	 0
init_types ENDP
_TEXT	ENDS
PUBLIC	_Py_Module
EXTRN	PyArena_Malloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Module DD imagerel $LN4
	DD	imagerel $LN4+52
	DD	imagerel $unwind$_Py_Module
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Module DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _Py_Module
_TEXT	SEGMENT
body$ = 48
arena$ = 56
_Py_Module PROC						; COMDAT

; 1085 : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b c2	 mov	 rax, rdx
  00009	48 8b d9	 mov	 rbx, rcx

; 1086 :     mod_ty p;
; 1087 :     p = (mod_ty)PyArena_Malloc(arena, sizeof(*p));

  0000c	ba 10 00 00 00	 mov	 edx, 16
  00011	48 8b c8	 mov	 rcx, rax
  00014	e8 00 00 00 00	 call	 PyArena_Malloc

; 1088 :     if (!p)

  00019	48 85 c0	 test	 rax, rax
  0001c	75 06		 jne	 SHORT $LN1@Py_Module

; 1092 :     return p;
; 1093 : }

  0001e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00022	5b		 pop	 rbx
  00023	c3		 ret	 0
$LN1@Py_Module:

; 1089 :         return NULL;
; 1090 :     p->kind = Module_kind;

  00024	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1

; 1091 :     p->v.Module.body = body;

  0002a	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx

; 1092 :     return p;
; 1093 : }

  0002e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00032	5b		 pop	 rbx
  00033	c3		 ret	 0
_Py_Module ENDP
_TEXT	ENDS
PUBLIC	_Py_Interactive
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Interactive DD imagerel $LN4
	DD	imagerel $LN4+52
	DD	imagerel $unwind$_Py_Interactive
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Interactive DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _Py_Interactive
_TEXT	SEGMENT
body$ = 48
arena$ = 56
_Py_Interactive PROC					; COMDAT

; 1097 : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b c2	 mov	 rax, rdx
  00009	48 8b d9	 mov	 rbx, rcx

; 1098 :     mod_ty p;
; 1099 :     p = (mod_ty)PyArena_Malloc(arena, sizeof(*p));

  0000c	ba 10 00 00 00	 mov	 edx, 16
  00011	48 8b c8	 mov	 rcx, rax
  00014	e8 00 00 00 00	 call	 PyArena_Malloc

; 1100 :     if (!p)

  00019	48 85 c0	 test	 rax, rax
  0001c	75 06		 jne	 SHORT $LN1@Py_Interac

; 1104 :     return p;
; 1105 : }

  0001e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00022	5b		 pop	 rbx
  00023	c3		 ret	 0
$LN1@Py_Interac:

; 1101 :         return NULL;
; 1102 :     p->kind = Interactive_kind;

  00024	c7 00 02 00 00
	00		 mov	 DWORD PTR [rax], 2

; 1103 :     p->v.Interactive.body = body;

  0002a	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx

; 1104 :     return p;
; 1105 : }

  0002e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00032	5b		 pop	 rbx
  00033	c3		 ret	 0
_Py_Interactive ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@FKJOGGI@field?5body?5is?5required?5for?5Expre@ ; `string'
PUBLIC	_Py_Expression
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Expression DD imagerel $LN6
	DD	imagerel $LN6+78
	DD	imagerel $unwind$_Py_Expression
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Expression DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0CG@FKJOGGI@field?5body?5is?5required?5for?5Expre@
CONST	SEGMENT
??_C@_0CG@FKJOGGI@field?5body?5is?5required?5for?5Expre@ DB 'field body i'
	DB	's required for Expression', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_Expression
_TEXT	SEGMENT
body$ = 48
arena$ = 56
_Py_Expression PROC					; COMDAT

; 1109 : {

$LN6:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b c2	 mov	 rax, rdx
  00009	48 8b d9	 mov	 rbx, rcx

; 1110 :     mod_ty p;
; 1111 :     if (!body) {

  0000c	48 85 c9	 test	 rcx, rcx
  0000f	75 1b		 jne	 SHORT $LN2@Py_Express

; 1112 :         PyErr_SetString(PyExc_ValueError,
; 1113 :                         "field body is required for Expression");

  00011	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00018	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@FKJOGGI@field?5body?5is?5required?5for?5Expre@
  0001f	e8 00 00 00 00	 call	 PyErr_SetString
$LN5@Py_Express:

; 1114 :         return NULL;

  00024	33 c0		 xor	 eax, eax

; 1121 :     return p;
; 1122 : }

  00026	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002a	5b		 pop	 rbx
  0002b	c3		 ret	 0
$LN2@Py_Express:

; 1115 :     }
; 1116 :     p = (mod_ty)PyArena_Malloc(arena, sizeof(*p));

  0002c	ba 10 00 00 00	 mov	 edx, 16
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 PyArena_Malloc

; 1117 :     if (!p)

  00039	48 85 c0	 test	 rax, rax

; 1118 :         return NULL;

  0003c	74 e6		 je	 SHORT $LN5@Py_Express

; 1119 :     p->kind = Expression_kind;

  0003e	c7 00 03 00 00
	00		 mov	 DWORD PTR [rax], 3

; 1120 :     p->v.Expression.body = body;

  00044	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx

; 1121 :     return p;
; 1122 : }

  00048	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004c	5b		 pop	 rbx
  0004d	c3		 ret	 0
_Py_Expression ENDP
_TEXT	ENDS
PUBLIC	_Py_Suite
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Suite DD imagerel $LN4
	DD	imagerel $LN4+52
	DD	imagerel $unwind$_Py_Suite
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Suite DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _Py_Suite
_TEXT	SEGMENT
body$ = 48
arena$ = 56
_Py_Suite PROC						; COMDAT

; 1126 : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b c2	 mov	 rax, rdx
  00009	48 8b d9	 mov	 rbx, rcx

; 1127 :     mod_ty p;
; 1128 :     p = (mod_ty)PyArena_Malloc(arena, sizeof(*p));

  0000c	ba 10 00 00 00	 mov	 edx, 16
  00011	48 8b c8	 mov	 rcx, rax
  00014	e8 00 00 00 00	 call	 PyArena_Malloc

; 1129 :     if (!p)

  00019	48 85 c0	 test	 rax, rax
  0001c	75 06		 jne	 SHORT $LN1@Py_Suite

; 1133 :     return p;
; 1134 : }

  0001e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00022	5b		 pop	 rbx
  00023	c3		 ret	 0
$LN1@Py_Suite:

; 1130 :         return NULL;
; 1131 :     p->kind = Suite_kind;

  00024	c7 00 04 00 00
	00		 mov	 DWORD PTR [rax], 4

; 1132 :     p->v.Suite.body = body;

  0002a	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx

; 1133 :     return p;
; 1134 : }

  0002e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00032	5b		 pop	 rbx
  00033	c3		 ret	 0
_Py_Suite ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@PGGFMKGC@field?5args?5is?5required?5for?5Funct@ ; `string'
PUBLIC	??_C@_0CH@FNEFDOCM@field?5name?5is?5required?5for?5Funct@ ; `string'
PUBLIC	_Py_FunctionDef
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_FunctionDef DD imagerel $LN7
	DD	imagerel $LN7+182
	DD	imagerel $unwind$_Py_FunctionDef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_FunctionDef DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0CH@PGGFMKGC@field?5args?5is?5required?5for?5Funct@
CONST	SEGMENT
??_C@_0CH@PGGFMKGC@field?5args?5is?5required?5for?5Funct@ DB 'field args '
	DB	'is required for FunctionDef', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@FNEFDOCM@field?5name?5is?5required?5for?5Funct@
CONST	SEGMENT
??_C@_0CH@FNEFDOCM@field?5name?5is?5required?5for?5Funct@ DB 'field name '
	DB	'is required for FunctionDef', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_FunctionDef
_TEXT	SEGMENT
name$ = 48
args$ = 56
body$ = 64
decorator_list$ = 72
returns$ = 80
lineno$ = 88
col_offset$ = 96
arena$ = 104
_Py_FunctionDef PROC					; COMDAT

; 1140 : {

$LN7:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	49 8b f1	 mov	 rsi, r9
  00017	49 8b e8	 mov	 rbp, r8
  0001a	48 8b da	 mov	 rbx, rdx
  0001d	48 8b f9	 mov	 rdi, rcx

; 1141 :     stmt_ty p;
; 1142 :     if (!name) {

  00020	48 85 c9	 test	 rcx, rcx
  00023	75 17		 jne	 SHORT $LN3@Py_Functio

; 1143 :         PyErr_SetString(PyExc_ValueError,
; 1144 :                         "field name is required for FunctionDef");

  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@FNEFDOCM@field?5name?5is?5required?5for?5Funct@
  00033	e8 00 00 00 00	 call	 PyErr_SetString
$LN6@Py_Functio:

; 1145 :         return NULL;

  00038	33 c0		 xor	 eax, eax
  0003a	eb 65		 jmp	 SHORT $LN4@Py_Functio
$LN3@Py_Functio:

; 1146 :     }
; 1147 :     if (!args) {

  0003c	48 85 d2	 test	 rdx, rdx
  0003f	75 17		 jne	 SHORT $LN2@Py_Functio

; 1148 :         PyErr_SetString(PyExc_ValueError,
; 1149 :                         "field args is required for FunctionDef");

  00041	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@PGGFMKGC@field?5args?5is?5required?5for?5Funct@
  0004f	e8 00 00 00 00	 call	 PyErr_SetString

; 1150 :         return NULL;

  00054	33 c0		 xor	 eax, eax
  00056	eb 49		 jmp	 SHORT $LN4@Py_Functio
$LN2@Py_Functio:

; 1151 :     }
; 1152 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  00058	48 8b 4c 24 68	 mov	 rcx, QWORD PTR arena$[rsp]
  0005d	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  00062	e8 00 00 00 00	 call	 PyArena_Malloc
  00067	4c 8b d8	 mov	 r11, rax

; 1153 :     if (!p)

  0006a	48 85 c0	 test	 rax, rax

; 1154 :         return NULL;

  0006d	74 c9		 je	 SHORT $LN6@Py_Functio

; 1155 :     p->kind = FunctionDef_kind;

  0006f	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1

; 1156 :     p->v.FunctionDef.name = name;

  00075	48 89 78 08	 mov	 QWORD PTR [rax+8], rdi

; 1157 :     p->v.FunctionDef.args = args;

  00079	48 89 58 10	 mov	 QWORD PTR [rax+16], rbx

; 1158 :     p->v.FunctionDef.body = body;

  0007d	48 89 68 18	 mov	 QWORD PTR [rax+24], rbp

; 1159 :     p->v.FunctionDef.decorator_list = decorator_list;

  00081	48 89 70 20	 mov	 QWORD PTR [rax+32], rsi

; 1160 :     p->v.FunctionDef.returns = returns;

  00085	48 8b 44 24 50	 mov	 rax, QWORD PTR returns$[rsp]
  0008a	49 89 43 28	 mov	 QWORD PTR [r11+40], rax

; 1161 :     p->lineno = lineno;

  0008e	8b 44 24 58	 mov	 eax, DWORD PTR lineno$[rsp]
  00092	41 89 43 40	 mov	 DWORD PTR [r11+64], eax

; 1162 :     p->col_offset = col_offset;

  00096	8b 44 24 60	 mov	 eax, DWORD PTR col_offset$[rsp]
  0009a	41 89 43 44	 mov	 DWORD PTR [r11+68], eax

; 1163 :     return p;

  0009e	49 8b c3	 mov	 rax, r11
$LN4@Py_Functio:

; 1164 : }

  000a1	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a6	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000ab	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000b0	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b4	5f		 pop	 rdi
  000b5	c3		 ret	 0
_Py_FunctionDef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@ELEMAPIN@field?5name?5is?5required?5for?5Class@ ; `string'
PUBLIC	_Py_ClassDef
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_ClassDef DD imagerel $LN6
	DD	imagerel $LN6+172
	DD	imagerel $unwind$_Py_ClassDef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_ClassDef DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0CE@ELEMAPIN@field?5name?5is?5required?5for?5Class@
CONST	SEGMENT
??_C@_0CE@ELEMAPIN@field?5name?5is?5required?5for?5Class@ DB 'field name '
	DB	'is required for ClassDef', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_ClassDef
_TEXT	SEGMENT
name$ = 48
bases$ = 56
keywords$ = 64
starargs$ = 72
kwargs$ = 80
body$ = 88
decorator_list$ = 96
lineno$ = 104
col_offset$ = 112
arena$ = 120
_Py_ClassDef PROC					; COMDAT

; 1170 : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	49 8b f9	 mov	 rdi, r9
  00017	49 8b f0	 mov	 rsi, r8
  0001a	48 8b ea	 mov	 rbp, rdx
  0001d	48 8b d9	 mov	 rbx, rcx

; 1171 :     stmt_ty p;
; 1172 :     if (!name) {

  00020	48 85 c9	 test	 rcx, rcx
  00023	75 17		 jne	 SHORT $LN2@Py_ClassDe

; 1173 :         PyErr_SetString(PyExc_ValueError,
; 1174 :                         "field name is required for ClassDef");

  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@ELEMAPIN@field?5name?5is?5required?5for?5Class@
  00033	e8 00 00 00 00	 call	 PyErr_SetString
$LN5@Py_ClassDe:

; 1175 :         return NULL;

  00038	33 c0		 xor	 eax, eax
  0003a	eb 5b		 jmp	 SHORT $LN3@Py_ClassDe
$LN2@Py_ClassDe:

; 1176 :     }
; 1177 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  0003c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR arena$[rsp]
  00041	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  00046	e8 00 00 00 00	 call	 PyArena_Malloc
  0004b	4c 8b d8	 mov	 r11, rax

; 1178 :     if (!p)

  0004e	48 85 c0	 test	 rax, rax

; 1179 :         return NULL;

  00051	74 e5		 je	 SHORT $LN5@Py_ClassDe

; 1180 :     p->kind = ClassDef_kind;

  00053	c7 00 02 00 00
	00		 mov	 DWORD PTR [rax], 2

; 1181 :     p->v.ClassDef.name = name;

  00059	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx

; 1182 :     p->v.ClassDef.bases = bases;

  0005d	48 89 68 10	 mov	 QWORD PTR [rax+16], rbp

; 1183 :     p->v.ClassDef.keywords = keywords;

  00061	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi

; 1184 :     p->v.ClassDef.starargs = starargs;

  00065	48 89 78 20	 mov	 QWORD PTR [rax+32], rdi

; 1185 :     p->v.ClassDef.kwargs = kwargs;

  00069	48 8b 44 24 50	 mov	 rax, QWORD PTR kwargs$[rsp]
  0006e	49 89 43 28	 mov	 QWORD PTR [r11+40], rax

; 1186 :     p->v.ClassDef.body = body;

  00072	48 8b 44 24 58	 mov	 rax, QWORD PTR body$[rsp]
  00077	49 89 43 30	 mov	 QWORD PTR [r11+48], rax

; 1187 :     p->v.ClassDef.decorator_list = decorator_list;

  0007b	48 8b 44 24 60	 mov	 rax, QWORD PTR decorator_list$[rsp]
  00080	49 89 43 38	 mov	 QWORD PTR [r11+56], rax

; 1188 :     p->lineno = lineno;

  00084	8b 44 24 68	 mov	 eax, DWORD PTR lineno$[rsp]
  00088	41 89 43 40	 mov	 DWORD PTR [r11+64], eax

; 1189 :     p->col_offset = col_offset;

  0008c	8b 44 24 70	 mov	 eax, DWORD PTR col_offset$[rsp]
  00090	41 89 43 44	 mov	 DWORD PTR [r11+68], eax

; 1190 :     return p;

  00094	49 8b c3	 mov	 rax, r11
$LN3@Py_ClassDe:

; 1191 : }

  00097	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0009c	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000a1	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000a6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000aa	5f		 pop	 rdi
  000ab	c3		 ret	 0
_Py_ClassDef ENDP
_TEXT	ENDS
PUBLIC	_Py_Return
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Return DD imagerel $LN4
	DD	imagerel $LN4+89
	DD	imagerel $unwind$_Py_Return
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Return DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _Py_Return
_TEXT	SEGMENT
value$ = 48
lineno$ = 56
col_offset$ = 64
arena$ = 72
_Py_Return PROC						; COMDAT

; 1195 : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	8b fa		 mov	 edi, edx
  00011	48 8b f1	 mov	 rsi, rcx

; 1196 :     stmt_ty p;
; 1197 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  00014	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  00019	49 8b c9	 mov	 rcx, r9
  0001c	41 8b d8	 mov	 ebx, r8d
  0001f	e8 00 00 00 00	 call	 PyArena_Malloc

; 1198 :     if (!p)

  00024	48 85 c0	 test	 rax, rax
  00027	75 10		 jne	 SHORT $LN1@Py_Return

; 1202 :     p->lineno = lineno;
; 1203 :     p->col_offset = col_offset;
; 1204 :     return p;
; 1205 : }

  00029	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002e	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5f		 pop	 rdi
  00038	c3		 ret	 0
$LN1@Py_Return:

; 1199 :         return NULL;
; 1200 :     p->kind = Return_kind;
; 1201 :     p->v.Return.value = value;

  00039	48 89 70 08	 mov	 QWORD PTR [rax+8], rsi

; 1202 :     p->lineno = lineno;
; 1203 :     p->col_offset = col_offset;
; 1204 :     return p;
; 1205 : }

  0003d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00042	89 58 44	 mov	 DWORD PTR [rax+68], ebx
  00045	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004a	c7 00 03 00 00
	00		 mov	 DWORD PTR [rax], 3
  00050	89 78 40	 mov	 DWORD PTR [rax+64], edi
  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5f		 pop	 rdi
  00058	c3		 ret	 0
_Py_Return ENDP
_TEXT	ENDS
PUBLIC	_Py_Delete
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Delete DD imagerel $LN4
	DD	imagerel $LN4+89
	DD	imagerel $unwind$_Py_Delete
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Delete DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _Py_Delete
_TEXT	SEGMENT
targets$ = 48
lineno$ = 56
col_offset$ = 64
arena$ = 72
_Py_Delete PROC						; COMDAT

; 1209 : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	8b fa		 mov	 edi, edx
  00011	48 8b f1	 mov	 rsi, rcx

; 1210 :     stmt_ty p;
; 1211 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  00014	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  00019	49 8b c9	 mov	 rcx, r9
  0001c	41 8b d8	 mov	 ebx, r8d
  0001f	e8 00 00 00 00	 call	 PyArena_Malloc

; 1212 :     if (!p)

  00024	48 85 c0	 test	 rax, rax
  00027	75 10		 jne	 SHORT $LN1@Py_Delete

; 1216 :     p->lineno = lineno;
; 1217 :     p->col_offset = col_offset;
; 1218 :     return p;
; 1219 : }

  00029	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002e	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5f		 pop	 rdi
  00038	c3		 ret	 0
$LN1@Py_Delete:

; 1213 :         return NULL;
; 1214 :     p->kind = Delete_kind;
; 1215 :     p->v.Delete.targets = targets;

  00039	48 89 70 08	 mov	 QWORD PTR [rax+8], rsi

; 1216 :     p->lineno = lineno;
; 1217 :     p->col_offset = col_offset;
; 1218 :     return p;
; 1219 : }

  0003d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00042	89 58 44	 mov	 DWORD PTR [rax+68], ebx
  00045	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004a	c7 00 04 00 00
	00		 mov	 DWORD PTR [rax], 4
  00050	89 78 40	 mov	 DWORD PTR [rax+64], edi
  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5f		 pop	 rdi
  00058	c3		 ret	 0
_Py_Delete ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@PODDGPLK@field?5value?5is?5required?5for?5Assi@ ; `string'
PUBLIC	_Py_Assign
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Assign DD imagerel $LN6
	DD	imagerel $LN6+121
	DD	imagerel $unwind$_Py_Assign
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Assign DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0CD@PODDGPLK@field?5value?5is?5required?5for?5Assi@
CONST	SEGMENT
??_C@_0CD@PODDGPLK@field?5value?5is?5required?5for?5Assi@ DB 'field value'
	DB	' is required for Assign', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_Assign
_TEXT	SEGMENT
targets$ = 48
value$ = 56
lineno$ = 64
col_offset$ = 72
arena$ = 80
_Py_Assign PROC						; COMDAT

; 1224 : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	41 8b f9	 mov	 edi, r9d
  00017	41 8b f0	 mov	 esi, r8d
  0001a	48 8b da	 mov	 rbx, rdx
  0001d	48 8b e9	 mov	 rbp, rcx

; 1225 :     stmt_ty p;
; 1226 :     if (!value) {

  00020	48 85 d2	 test	 rdx, rdx
  00023	75 17		 jne	 SHORT $LN2@Py_Assign

; 1227 :         PyErr_SetString(PyExc_ValueError,
; 1228 :                         "field value is required for Assign");

  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@PODDGPLK@field?5value?5is?5required?5for?5Assi@
  00033	e8 00 00 00 00	 call	 PyErr_SetString
$LN5@Py_Assign:

; 1229 :         return NULL;

  00038	33 c0		 xor	 eax, eax
  0003a	eb 28		 jmp	 SHORT $LN3@Py_Assign
$LN2@Py_Assign:

; 1230 :     }
; 1231 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR arena$[rsp]
  00041	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  00046	e8 00 00 00 00	 call	 PyArena_Malloc

; 1232 :     if (!p)

  0004b	48 85 c0	 test	 rax, rax

; 1233 :         return NULL;

  0004e	74 e8		 je	 SHORT $LN5@Py_Assign

; 1234 :     p->kind = Assign_kind;

  00050	c7 00 05 00 00
	00		 mov	 DWORD PTR [rax], 5

; 1235 :     p->v.Assign.targets = targets;

  00056	48 89 68 08	 mov	 QWORD PTR [rax+8], rbp

; 1236 :     p->v.Assign.value = value;

  0005a	48 89 58 10	 mov	 QWORD PTR [rax+16], rbx

; 1237 :     p->lineno = lineno;

  0005e	89 70 40	 mov	 DWORD PTR [rax+64], esi

; 1238 :     p->col_offset = col_offset;

  00061	89 78 44	 mov	 DWORD PTR [rax+68], edi
$LN3@Py_Assign:

; 1239 :     return p;
; 1240 : }

  00064	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00069	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0006e	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00073	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00077	5f		 pop	 rdi
  00078	c3		 ret	 0
_Py_Assign ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@BCDKGMFN@field?5value?5is?5required?5for?5AugA@ ; `string'
PUBLIC	??_C@_0CD@HEMJKCOB@field?5op?5is?5required?5for?5AugAssi@ ; `string'
PUBLIC	??_C@_0CH@IMOJNEGG@field?5target?5is?5required?5for?5Aug@ ; `string'
PUBLIC	_Py_AugAssign
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_AugAssign DD imagerel $LN8
	DD	imagerel $LN8+189
	DD	imagerel $unwind$_Py_AugAssign
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_AugAssign DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0CG@BCDKGMFN@field?5value?5is?5required?5for?5AugA@
CONST	SEGMENT
??_C@_0CG@BCDKGMFN@field?5value?5is?5required?5for?5AugA@ DB 'field value'
	DB	' is required for AugAssign', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HEMJKCOB@field?5op?5is?5required?5for?5AugAssi@
CONST	SEGMENT
??_C@_0CD@HEMJKCOB@field?5op?5is?5required?5for?5AugAssi@ DB 'field op is'
	DB	' required for AugAssign', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@IMOJNEGG@field?5target?5is?5required?5for?5Aug@
CONST	SEGMENT
??_C@_0CH@IMOJNEGG@field?5target?5is?5required?5for?5Aug@ DB 'field targe'
	DB	't is required for AugAssign', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_AugAssign
_TEXT	SEGMENT
target$ = 48
op$ = 56
value$ = 64
lineno$ = 72
col_offset$ = 80
arena$ = 88
_Py_AugAssign PROC					; COMDAT

; 1245 : {

$LN8:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	41 8b e9	 mov	 ebp, r9d
  00017	49 8b d8	 mov	 rbx, r8
  0001a	8b fa		 mov	 edi, edx
  0001c	48 8b f1	 mov	 rsi, rcx

; 1246 :     stmt_ty p;
; 1247 :     if (!target) {

  0001f	48 85 c9	 test	 rcx, rcx
  00022	75 17		 jne	 SHORT $LN4@Py_AugAssi

; 1248 :         PyErr_SetString(PyExc_ValueError,
; 1249 :                         "field target is required for AugAssign");

  00024	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@IMOJNEGG@field?5target?5is?5required?5for?5Aug@
  00032	e8 00 00 00 00	 call	 PyErr_SetString
$LN7@Py_AugAssi:

; 1250 :         return NULL;

  00037	33 c0		 xor	 eax, eax
  00039	eb 6d		 jmp	 SHORT $LN5@Py_AugAssi
$LN4@Py_AugAssi:

; 1251 :     }
; 1252 :     if (!op) {

  0003b	85 d2		 test	 edx, edx
  0003d	75 17		 jne	 SHORT $LN3@Py_AugAssi

; 1253 :         PyErr_SetString(PyExc_ValueError,
; 1254 :                         "field op is required for AugAssign");

  0003f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HEMJKCOB@field?5op?5is?5required?5for?5AugAssi@
  0004d	e8 00 00 00 00	 call	 PyErr_SetString

; 1255 :         return NULL;

  00052	33 c0		 xor	 eax, eax
  00054	eb 52		 jmp	 SHORT $LN5@Py_AugAssi
$LN3@Py_AugAssi:

; 1256 :     }
; 1257 :     if (!value) {

  00056	48 85 db	 test	 rbx, rbx
  00059	75 17		 jne	 SHORT $LN2@Py_AugAssi

; 1258 :         PyErr_SetString(PyExc_ValueError,
; 1259 :                         "field value is required for AugAssign");

  0005b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00062	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BCDKGMFN@field?5value?5is?5required?5for?5AugA@
  00069	e8 00 00 00 00	 call	 PyErr_SetString

; 1260 :         return NULL;

  0006e	33 c0		 xor	 eax, eax
  00070	eb 36		 jmp	 SHORT $LN5@Py_AugAssi
$LN2@Py_AugAssi:

; 1261 :     }
; 1262 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  00072	48 8b 4c 24 58	 mov	 rcx, QWORD PTR arena$[rsp]
  00077	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  0007c	e8 00 00 00 00	 call	 PyArena_Malloc
  00081	4c 8b d8	 mov	 r11, rax

; 1263 :     if (!p)

  00084	48 85 c0	 test	 rax, rax

; 1264 :         return NULL;

  00087	74 ae		 je	 SHORT $LN7@Py_AugAssi

; 1265 :     p->kind = AugAssign_kind;

  00089	c7 00 06 00 00
	00		 mov	 DWORD PTR [rax], 6

; 1266 :     p->v.AugAssign.target = target;

  0008f	48 89 70 08	 mov	 QWORD PTR [rax+8], rsi

; 1267 :     p->v.AugAssign.op = op;

  00093	89 78 10	 mov	 DWORD PTR [rax+16], edi

; 1268 :     p->v.AugAssign.value = value;

  00096	48 89 58 18	 mov	 QWORD PTR [rax+24], rbx

; 1269 :     p->lineno = lineno;

  0009a	89 68 40	 mov	 DWORD PTR [rax+64], ebp

; 1270 :     p->col_offset = col_offset;

  0009d	8b 44 24 50	 mov	 eax, DWORD PTR col_offset$[rsp]
  000a1	41 89 43 44	 mov	 DWORD PTR [r11+68], eax

; 1271 :     return p;

  000a5	49 8b c3	 mov	 rax, r11
$LN5@Py_AugAssi:

; 1272 : }

  000a8	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000ad	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000b2	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000b7	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000bb	5f		 pop	 rdi
  000bc	c3		 ret	 0
_Py_AugAssign ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@LGGBEOKE@field?5iter?5is?5required?5for?5For?$AA@ ; `string'
PUBLIC	??_C@_0CB@EFAGNOAJ@field?5target?5is?5required?5for?5For@ ; `string'
PUBLIC	_Py_For
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_For DD imagerel $LN7
	DD	imagerel $LN7+173
	DD	imagerel $unwind$_Py_For
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_For DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0BP@LGGBEOKE@field?5iter?5is?5required?5for?5For?$AA@
CONST	SEGMENT
??_C@_0BP@LGGBEOKE@field?5iter?5is?5required?5for?5For?$AA@ DB 'field ite'
	DB	'r is required for For', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@EFAGNOAJ@field?5target?5is?5required?5for?5For@
CONST	SEGMENT
??_C@_0CB@EFAGNOAJ@field?5target?5is?5required?5for?5For@ DB 'field targe'
	DB	't is required for For', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_For
_TEXT	SEGMENT
target$ = 48
iter$ = 56
body$ = 64
orelse$ = 72
lineno$ = 80
col_offset$ = 88
arena$ = 96
_Py_For	PROC						; COMDAT

; 1277 : {

$LN7:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	49 8b f1	 mov	 rsi, r9
  00017	49 8b e8	 mov	 rbp, r8
  0001a	48 8b da	 mov	 rbx, rdx
  0001d	48 8b f9	 mov	 rdi, rcx

; 1278 :     stmt_ty p;
; 1279 :     if (!target) {

  00020	48 85 c9	 test	 rcx, rcx
  00023	75 17		 jne	 SHORT $LN3@Py_For

; 1280 :         PyErr_SetString(PyExc_ValueError,
; 1281 :                         "field target is required for For");

  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@EFAGNOAJ@field?5target?5is?5required?5for?5For@
  00033	e8 00 00 00 00	 call	 PyErr_SetString
$LN6@Py_For:

; 1282 :         return NULL;

  00038	33 c0		 xor	 eax, eax
  0003a	eb 5c		 jmp	 SHORT $LN4@Py_For
$LN3@Py_For:

; 1283 :     }
; 1284 :     if (!iter) {

  0003c	48 85 d2	 test	 rdx, rdx
  0003f	75 17		 jne	 SHORT $LN2@Py_For

; 1285 :         PyErr_SetString(PyExc_ValueError,
; 1286 :                         "field iter is required for For");

  00041	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@LGGBEOKE@field?5iter?5is?5required?5for?5For?$AA@
  0004f	e8 00 00 00 00	 call	 PyErr_SetString

; 1287 :         return NULL;

  00054	33 c0		 xor	 eax, eax
  00056	eb 40		 jmp	 SHORT $LN4@Py_For
$LN2@Py_For:

; 1288 :     }
; 1289 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  00058	48 8b 4c 24 60	 mov	 rcx, QWORD PTR arena$[rsp]
  0005d	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  00062	e8 00 00 00 00	 call	 PyArena_Malloc
  00067	4c 8b d8	 mov	 r11, rax

; 1290 :     if (!p)

  0006a	48 85 c0	 test	 rax, rax

; 1291 :         return NULL;

  0006d	74 c9		 je	 SHORT $LN6@Py_For

; 1292 :     p->kind = For_kind;

  0006f	c7 00 07 00 00
	00		 mov	 DWORD PTR [rax], 7

; 1293 :     p->v.For.target = target;

  00075	48 89 78 08	 mov	 QWORD PTR [rax+8], rdi

; 1294 :     p->v.For.iter = iter;

  00079	48 89 58 10	 mov	 QWORD PTR [rax+16], rbx

; 1295 :     p->v.For.body = body;

  0007d	48 89 68 18	 mov	 QWORD PTR [rax+24], rbp

; 1296 :     p->v.For.orelse = orelse;

  00081	48 89 70 20	 mov	 QWORD PTR [rax+32], rsi

; 1297 :     p->lineno = lineno;

  00085	8b 44 24 50	 mov	 eax, DWORD PTR lineno$[rsp]
  00089	41 89 43 40	 mov	 DWORD PTR [r11+64], eax

; 1298 :     p->col_offset = col_offset;

  0008d	8b 44 24 58	 mov	 eax, DWORD PTR col_offset$[rsp]
  00091	41 89 43 44	 mov	 DWORD PTR [r11+68], eax

; 1299 :     return p;

  00095	49 8b c3	 mov	 rax, r11
$LN4@Py_For:

; 1300 : }

  00098	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0009d	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000a2	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000a7	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ab	5f		 pop	 rdi
  000ac	c3		 ret	 0
_Py_For	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@KCHPDKKB@field?5test?5is?5required?5for?5While@ ; `string'
PUBLIC	_Py_While
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_While DD imagerel $LN6
	DD	imagerel $LN6+136
	DD	imagerel $unwind$_Py_While
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_While DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0CB@KCHPDKKB@field?5test?5is?5required?5for?5While@
CONST	SEGMENT
??_C@_0CB@KCHPDKKB@field?5test?5is?5required?5for?5While@ DB 'field test '
	DB	'is required for While', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_While
_TEXT	SEGMENT
test$ = 48
body$ = 56
orelse$ = 64
lineno$ = 72
col_offset$ = 80
arena$ = 88
_Py_While PROC						; COMDAT

; 1305 : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	41 8b f9	 mov	 edi, r9d
  00017	49 8b f0	 mov	 rsi, r8
  0001a	48 8b ea	 mov	 rbp, rdx
  0001d	48 8b d9	 mov	 rbx, rcx

; 1306 :     stmt_ty p;
; 1307 :     if (!test) {

  00020	48 85 c9	 test	 rcx, rcx
  00023	75 17		 jne	 SHORT $LN2@Py_While

; 1308 :         PyErr_SetString(PyExc_ValueError,
; 1309 :                         "field test is required for While");

  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@KCHPDKKB@field?5test?5is?5required?5for?5While@
  00033	e8 00 00 00 00	 call	 PyErr_SetString
$LN5@Py_While:

; 1310 :         return NULL;

  00038	33 c0		 xor	 eax, eax
  0003a	eb 37		 jmp	 SHORT $LN3@Py_While
$LN2@Py_While:

; 1311 :     }
; 1312 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  0003c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR arena$[rsp]
  00041	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  00046	e8 00 00 00 00	 call	 PyArena_Malloc
  0004b	4c 8b d8	 mov	 r11, rax

; 1313 :     if (!p)

  0004e	48 85 c0	 test	 rax, rax

; 1314 :         return NULL;

  00051	74 e5		 je	 SHORT $LN5@Py_While

; 1315 :     p->kind = While_kind;

  00053	c7 00 08 00 00
	00		 mov	 DWORD PTR [rax], 8

; 1316 :     p->v.While.test = test;

  00059	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx

; 1317 :     p->v.While.body = body;

  0005d	48 89 68 10	 mov	 QWORD PTR [rax+16], rbp

; 1318 :     p->v.While.orelse = orelse;

  00061	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi

; 1319 :     p->lineno = lineno;

  00065	89 78 40	 mov	 DWORD PTR [rax+64], edi

; 1320 :     p->col_offset = col_offset;

  00068	8b 44 24 50	 mov	 eax, DWORD PTR col_offset$[rsp]
  0006c	41 89 43 44	 mov	 DWORD PTR [r11+68], eax

; 1321 :     return p;

  00070	49 8b c3	 mov	 rax, r11
$LN3@Py_While:

; 1322 : }

  00073	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00078	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0007d	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00082	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00086	5f		 pop	 rdi
  00087	c3		 ret	 0
_Py_While ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@JBIJLEDP@field?5test?5is?5required?5for?5If?$AA@ ; `string'
PUBLIC	_Py_If
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_If DD imagerel $LN6
	DD	imagerel $LN6+136
	DD	imagerel $unwind$_Py_If
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_If DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0BO@JBIJLEDP@field?5test?5is?5required?5for?5If?$AA@
CONST	SEGMENT
??_C@_0BO@JBIJLEDP@field?5test?5is?5required?5for?5If?$AA@ DB 'field test'
	DB	' is required for If', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_If
_TEXT	SEGMENT
test$ = 48
body$ = 56
orelse$ = 64
lineno$ = 72
col_offset$ = 80
arena$ = 88
_Py_If	PROC						; COMDAT

; 1327 : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	41 8b f9	 mov	 edi, r9d
  00017	49 8b f0	 mov	 rsi, r8
  0001a	48 8b ea	 mov	 rbp, rdx
  0001d	48 8b d9	 mov	 rbx, rcx

; 1328 :     stmt_ty p;
; 1329 :     if (!test) {

  00020	48 85 c9	 test	 rcx, rcx
  00023	75 17		 jne	 SHORT $LN2@Py_If

; 1330 :         PyErr_SetString(PyExc_ValueError,
; 1331 :                         "field test is required for If");

  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@JBIJLEDP@field?5test?5is?5required?5for?5If?$AA@
  00033	e8 00 00 00 00	 call	 PyErr_SetString
$LN5@Py_If:

; 1332 :         return NULL;

  00038	33 c0		 xor	 eax, eax
  0003a	eb 37		 jmp	 SHORT $LN3@Py_If
$LN2@Py_If:

; 1333 :     }
; 1334 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  0003c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR arena$[rsp]
  00041	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  00046	e8 00 00 00 00	 call	 PyArena_Malloc
  0004b	4c 8b d8	 mov	 r11, rax

; 1335 :     if (!p)

  0004e	48 85 c0	 test	 rax, rax

; 1336 :         return NULL;

  00051	74 e5		 je	 SHORT $LN5@Py_If

; 1337 :     p->kind = If_kind;

  00053	c7 00 09 00 00
	00		 mov	 DWORD PTR [rax], 9

; 1338 :     p->v.If.test = test;

  00059	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx

; 1339 :     p->v.If.body = body;

  0005d	48 89 68 10	 mov	 QWORD PTR [rax+16], rbp

; 1340 :     p->v.If.orelse = orelse;

  00061	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi

; 1341 :     p->lineno = lineno;

  00065	89 78 40	 mov	 DWORD PTR [rax+64], edi

; 1342 :     p->col_offset = col_offset;

  00068	8b 44 24 50	 mov	 eax, DWORD PTR col_offset$[rsp]
  0006c	41 89 43 44	 mov	 DWORD PTR [r11+68], eax

; 1343 :     return p;

  00070	49 8b c3	 mov	 rax, r11
$LN3@Py_If:

; 1344 : }

  00073	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00078	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0007d	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00082	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00086	5f		 pop	 rdi
  00087	c3		 ret	 0
_Py_If	ENDP
_TEXT	ENDS
PUBLIC	_Py_With
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_With DD imagerel $LN4
	DD	imagerel $LN4+93
	DD	imagerel $unwind$_Py_With
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_With DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _Py_With
_TEXT	SEGMENT
items$ = 48
body$ = 56
lineno$ = 64
col_offset$ = 72
arena$ = 80
_Py_With PROC						; COMDAT

; 1349 : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b e9	 mov	 rbp, rcx

; 1350 :     stmt_ty p;
; 1351 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  00017	48 8b 4c 24 50	 mov	 rcx, QWORD PTR arena$[rsp]
  0001c	48 8b f2	 mov	 rsi, rdx
  0001f	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  00024	41 8b d9	 mov	 ebx, r9d
  00027	41 8b f8	 mov	 edi, r8d
  0002a	e8 00 00 00 00	 call	 PyArena_Malloc

; 1352 :     if (!p)

  0002f	48 85 c0	 test	 rax, rax
  00032	74 14		 je	 SHORT $LN2@Py_With
$LN1@Py_With:

; 1353 :         return NULL;
; 1354 :     p->kind = With_kind;

  00034	c7 00 0a 00 00
	00		 mov	 DWORD PTR [rax], 10

; 1355 :     p->v.With.items = items;

  0003a	48 89 68 08	 mov	 QWORD PTR [rax+8], rbp

; 1356 :     p->v.With.body = body;

  0003e	48 89 70 10	 mov	 QWORD PTR [rax+16], rsi

; 1357 :     p->lineno = lineno;

  00042	89 78 40	 mov	 DWORD PTR [rax+64], edi

; 1358 :     p->col_offset = col_offset;

  00045	89 58 44	 mov	 DWORD PTR [rax+68], ebx
$LN2@Py_With:

; 1359 :     return p;
; 1360 : }

  00048	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004d	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00052	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00057	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005b	5f		 pop	 rdi
  0005c	c3		 ret	 0
_Py_With ENDP
_TEXT	ENDS
PUBLIC	_Py_Raise
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Raise DD imagerel $LN4
	DD	imagerel $LN4+93
	DD	imagerel $unwind$_Py_Raise
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Raise DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _Py_Raise
_TEXT	SEGMENT
exc$ = 48
cause$ = 56
lineno$ = 64
col_offset$ = 72
arena$ = 80
_Py_Raise PROC						; COMDAT

; 1364 : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b e9	 mov	 rbp, rcx

; 1365 :     stmt_ty p;
; 1366 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  00017	48 8b 4c 24 50	 mov	 rcx, QWORD PTR arena$[rsp]
  0001c	48 8b f2	 mov	 rsi, rdx
  0001f	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  00024	41 8b d9	 mov	 ebx, r9d
  00027	41 8b f8	 mov	 edi, r8d
  0002a	e8 00 00 00 00	 call	 PyArena_Malloc

; 1367 :     if (!p)

  0002f	48 85 c0	 test	 rax, rax
  00032	74 14		 je	 SHORT $LN2@Py_Raise
$LN1@Py_Raise:

; 1368 :         return NULL;
; 1369 :     p->kind = Raise_kind;

  00034	c7 00 0b 00 00
	00		 mov	 DWORD PTR [rax], 11

; 1370 :     p->v.Raise.exc = exc;

  0003a	48 89 68 08	 mov	 QWORD PTR [rax+8], rbp

; 1371 :     p->v.Raise.cause = cause;

  0003e	48 89 70 10	 mov	 QWORD PTR [rax+16], rsi

; 1372 :     p->lineno = lineno;

  00042	89 78 40	 mov	 DWORD PTR [rax+64], edi

; 1373 :     p->col_offset = col_offset;

  00045	89 58 44	 mov	 DWORD PTR [rax+68], ebx
$LN2@Py_Raise:

; 1374 :     return p;
; 1375 : }

  00048	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004d	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00052	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00057	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005b	5f		 pop	 rdi
  0005c	c3		 ret	 0
_Py_Raise ENDP
_TEXT	ENDS
PUBLIC	_Py_Try
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Try DD imagerel $LN4
	DD	imagerel $LN4+117
	DD	imagerel $unwind$_Py_Try
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Try DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _Py_Try
_TEXT	SEGMENT
body$ = 48
handlers$ = 56
orelse$ = 64
finalbody$ = 72
lineno$ = 80
col_offset$ = 88
arena$ = 96
_Py_Try	PROC						; COMDAT

; 1380 : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b e9	 mov	 rbp, rcx

; 1381 :     stmt_ty p;
; 1382 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  00017	48 8b 4c 24 60	 mov	 rcx, QWORD PTR arena$[rsp]
  0001c	48 8b f2	 mov	 rsi, rdx
  0001f	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  00024	49 8b d9	 mov	 rbx, r9
  00027	49 8b f8	 mov	 rdi, r8
  0002a	e8 00 00 00 00	 call	 PyArena_Malloc
  0002f	4c 8b d8	 mov	 r11, rax

; 1383 :     if (!p)

  00032	48 85 c0	 test	 rax, rax
  00035	74 29		 je	 SHORT $LN2@Py_Try
$LN1@Py_Try:

; 1384 :         return NULL;
; 1385 :     p->kind = Try_kind;

  00037	c7 00 0c 00 00
	00		 mov	 DWORD PTR [rax], 12

; 1386 :     p->v.Try.body = body;

  0003d	48 89 68 08	 mov	 QWORD PTR [rax+8], rbp

; 1387 :     p->v.Try.handlers = handlers;

  00041	48 89 70 10	 mov	 QWORD PTR [rax+16], rsi

; 1388 :     p->v.Try.orelse = orelse;

  00045	48 89 78 18	 mov	 QWORD PTR [rax+24], rdi

; 1389 :     p->v.Try.finalbody = finalbody;

  00049	48 89 58 20	 mov	 QWORD PTR [rax+32], rbx

; 1390 :     p->lineno = lineno;

  0004d	8b 44 24 50	 mov	 eax, DWORD PTR lineno$[rsp]
  00051	41 89 43 40	 mov	 DWORD PTR [r11+64], eax

; 1391 :     p->col_offset = col_offset;

  00055	8b 44 24 58	 mov	 eax, DWORD PTR col_offset$[rsp]
  00059	41 89 43 44	 mov	 DWORD PTR [r11+68], eax

; 1392 :     return p;

  0005d	49 8b c3	 mov	 rax, r11
$LN2@Py_Try:

; 1393 : }

  00060	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00065	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0006a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0006f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00073	5f		 pop	 rdi
  00074	c3		 ret	 0
_Py_Try	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@MJAOHOEG@field?5test?5is?5required?5for?5Asser@ ; `string'
PUBLIC	_Py_Assert
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Assert DD imagerel $LN6
	DD	imagerel $LN6+121
	DD	imagerel $unwind$_Py_Assert
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Assert DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0CC@MJAOHOEG@field?5test?5is?5required?5for?5Asser@
CONST	SEGMENT
??_C@_0CC@MJAOHOEG@field?5test?5is?5required?5for?5Asser@ DB 'field test '
	DB	'is required for Assert', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_Assert
_TEXT	SEGMENT
test$ = 48
msg$ = 56
lineno$ = 64
col_offset$ = 72
arena$ = 80
_Py_Assert PROC						; COMDAT

; 1397 : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	41 8b f9	 mov	 edi, r9d
  00017	41 8b f0	 mov	 esi, r8d
  0001a	48 8b ea	 mov	 rbp, rdx
  0001d	48 8b d9	 mov	 rbx, rcx

; 1398 :     stmt_ty p;
; 1399 :     if (!test) {

  00020	48 85 c9	 test	 rcx, rcx
  00023	75 17		 jne	 SHORT $LN2@Py_Assert

; 1400 :         PyErr_SetString(PyExc_ValueError,
; 1401 :                         "field test is required for Assert");

  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@MJAOHOEG@field?5test?5is?5required?5for?5Asser@
  00033	e8 00 00 00 00	 call	 PyErr_SetString
$LN5@Py_Assert:

; 1402 :         return NULL;

  00038	33 c0		 xor	 eax, eax
  0003a	eb 28		 jmp	 SHORT $LN3@Py_Assert
$LN2@Py_Assert:

; 1403 :     }
; 1404 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR arena$[rsp]
  00041	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  00046	e8 00 00 00 00	 call	 PyArena_Malloc

; 1405 :     if (!p)

  0004b	48 85 c0	 test	 rax, rax

; 1406 :         return NULL;

  0004e	74 e8		 je	 SHORT $LN5@Py_Assert

; 1407 :     p->kind = Assert_kind;

  00050	c7 00 0d 00 00
	00		 mov	 DWORD PTR [rax], 13

; 1408 :     p->v.Assert.test = test;

  00056	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx

; 1409 :     p->v.Assert.msg = msg;

  0005a	48 89 68 10	 mov	 QWORD PTR [rax+16], rbp

; 1410 :     p->lineno = lineno;

  0005e	89 70 40	 mov	 DWORD PTR [rax+64], esi

; 1411 :     p->col_offset = col_offset;

  00061	89 78 44	 mov	 DWORD PTR [rax+68], edi
$LN3@Py_Assert:

; 1412 :     return p;
; 1413 : }

  00064	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00069	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0006e	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00073	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00077	5f		 pop	 rdi
  00078	c3		 ret	 0
_Py_Assert ENDP
_TEXT	ENDS
PUBLIC	_Py_Import
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Import DD imagerel $LN4
	DD	imagerel $LN4+89
	DD	imagerel $unwind$_Py_Import
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Import DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _Py_Import
_TEXT	SEGMENT
names$ = 48
lineno$ = 56
col_offset$ = 64
arena$ = 72
_Py_Import PROC						; COMDAT

; 1417 : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	8b fa		 mov	 edi, edx
  00011	48 8b f1	 mov	 rsi, rcx

; 1418 :     stmt_ty p;
; 1419 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  00014	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  00019	49 8b c9	 mov	 rcx, r9
  0001c	41 8b d8	 mov	 ebx, r8d
  0001f	e8 00 00 00 00	 call	 PyArena_Malloc

; 1420 :     if (!p)

  00024	48 85 c0	 test	 rax, rax
  00027	75 10		 jne	 SHORT $LN1@Py_Import

; 1424 :     p->lineno = lineno;
; 1425 :     p->col_offset = col_offset;
; 1426 :     return p;
; 1427 : }

  00029	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002e	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5f		 pop	 rdi
  00038	c3		 ret	 0
$LN1@Py_Import:

; 1421 :         return NULL;
; 1422 :     p->kind = Import_kind;
; 1423 :     p->v.Import.names = names;

  00039	48 89 70 08	 mov	 QWORD PTR [rax+8], rsi

; 1424 :     p->lineno = lineno;
; 1425 :     p->col_offset = col_offset;
; 1426 :     return p;
; 1427 : }

  0003d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00042	89 58 44	 mov	 DWORD PTR [rax+68], ebx
  00045	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004a	c7 00 0e 00 00
	00		 mov	 DWORD PTR [rax], 14
  00050	89 78 40	 mov	 DWORD PTR [rax+64], edi
  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5f		 pop	 rdi
  00058	c3		 ret	 0
_Py_Import ENDP
_TEXT	ENDS
PUBLIC	_Py_ImportFrom
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_ImportFrom DD imagerel $LN4
	DD	imagerel $LN4+107
	DD	imagerel $unwind$_Py_ImportFrom
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_ImportFrom DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _Py_ImportFrom
_TEXT	SEGMENT
module$ = 48
names$ = 56
level$ = 64
lineno$ = 72
col_offset$ = 80
arena$ = 88
_Py_ImportFrom PROC					; COMDAT

; 1432 : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b e9	 mov	 rbp, rcx

; 1433 :     stmt_ty p;
; 1434 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  00017	48 8b 4c 24 58	 mov	 rcx, QWORD PTR arena$[rsp]
  0001c	48 8b f2	 mov	 rsi, rdx
  0001f	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  00024	41 8b d9	 mov	 ebx, r9d
  00027	41 8b f8	 mov	 edi, r8d
  0002a	e8 00 00 00 00	 call	 PyArena_Malloc
  0002f	4c 8b d8	 mov	 r11, rax

; 1435 :     if (!p)

  00032	48 85 c0	 test	 rax, rax
  00035	74 1f		 je	 SHORT $LN2@Py_ImportF
$LN1@Py_ImportF:

; 1436 :         return NULL;
; 1437 :     p->kind = ImportFrom_kind;

  00037	c7 00 0f 00 00
	00		 mov	 DWORD PTR [rax], 15

; 1438 :     p->v.ImportFrom.module = module;

  0003d	48 89 68 08	 mov	 QWORD PTR [rax+8], rbp

; 1439 :     p->v.ImportFrom.names = names;

  00041	48 89 70 10	 mov	 QWORD PTR [rax+16], rsi

; 1440 :     p->v.ImportFrom.level = level;

  00045	89 78 18	 mov	 DWORD PTR [rax+24], edi

; 1441 :     p->lineno = lineno;

  00048	89 58 40	 mov	 DWORD PTR [rax+64], ebx

; 1442 :     p->col_offset = col_offset;

  0004b	8b 44 24 50	 mov	 eax, DWORD PTR col_offset$[rsp]
  0004f	41 89 43 44	 mov	 DWORD PTR [r11+68], eax

; 1443 :     return p;

  00053	49 8b c3	 mov	 rax, r11
$LN2@Py_ImportF:

; 1444 : }

  00056	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005b	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00060	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00065	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00069	5f		 pop	 rdi
  0006a	c3		 ret	 0
_Py_ImportFrom ENDP
_TEXT	ENDS
PUBLIC	_Py_Global
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Global DD imagerel $LN4
	DD	imagerel $LN4+89
	DD	imagerel $unwind$_Py_Global
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Global DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _Py_Global
_TEXT	SEGMENT
names$ = 48
lineno$ = 56
col_offset$ = 64
arena$ = 72
_Py_Global PROC						; COMDAT

; 1448 : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	8b fa		 mov	 edi, edx
  00011	48 8b f1	 mov	 rsi, rcx

; 1449 :     stmt_ty p;
; 1450 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  00014	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  00019	49 8b c9	 mov	 rcx, r9
  0001c	41 8b d8	 mov	 ebx, r8d
  0001f	e8 00 00 00 00	 call	 PyArena_Malloc

; 1451 :     if (!p)

  00024	48 85 c0	 test	 rax, rax
  00027	75 10		 jne	 SHORT $LN1@Py_Global

; 1455 :     p->lineno = lineno;
; 1456 :     p->col_offset = col_offset;
; 1457 :     return p;
; 1458 : }

  00029	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002e	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5f		 pop	 rdi
  00038	c3		 ret	 0
$LN1@Py_Global:

; 1452 :         return NULL;
; 1453 :     p->kind = Global_kind;
; 1454 :     p->v.Global.names = names;

  00039	48 89 70 08	 mov	 QWORD PTR [rax+8], rsi

; 1455 :     p->lineno = lineno;
; 1456 :     p->col_offset = col_offset;
; 1457 :     return p;
; 1458 : }

  0003d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00042	89 58 44	 mov	 DWORD PTR [rax+68], ebx
  00045	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004a	c7 00 10 00 00
	00		 mov	 DWORD PTR [rax], 16
  00050	89 78 40	 mov	 DWORD PTR [rax+64], edi
  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5f		 pop	 rdi
  00058	c3		 ret	 0
_Py_Global ENDP
_TEXT	ENDS
PUBLIC	_Py_Nonlocal
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Nonlocal DD imagerel $LN4
	DD	imagerel $LN4+89
	DD	imagerel $unwind$_Py_Nonlocal
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Nonlocal DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _Py_Nonlocal
_TEXT	SEGMENT
names$ = 48
lineno$ = 56
col_offset$ = 64
arena$ = 72
_Py_Nonlocal PROC					; COMDAT

; 1462 : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	8b fa		 mov	 edi, edx
  00011	48 8b f1	 mov	 rsi, rcx

; 1463 :     stmt_ty p;
; 1464 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  00014	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  00019	49 8b c9	 mov	 rcx, r9
  0001c	41 8b d8	 mov	 ebx, r8d
  0001f	e8 00 00 00 00	 call	 PyArena_Malloc

; 1465 :     if (!p)

  00024	48 85 c0	 test	 rax, rax
  00027	75 10		 jne	 SHORT $LN1@Py_Nonloca

; 1469 :     p->lineno = lineno;
; 1470 :     p->col_offset = col_offset;
; 1471 :     return p;
; 1472 : }

  00029	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002e	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5f		 pop	 rdi
  00038	c3		 ret	 0
$LN1@Py_Nonloca:

; 1466 :         return NULL;
; 1467 :     p->kind = Nonlocal_kind;
; 1468 :     p->v.Nonlocal.names = names;

  00039	48 89 70 08	 mov	 QWORD PTR [rax+8], rsi

; 1469 :     p->lineno = lineno;
; 1470 :     p->col_offset = col_offset;
; 1471 :     return p;
; 1472 : }

  0003d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00042	89 58 44	 mov	 DWORD PTR [rax+68], ebx
  00045	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004a	c7 00 11 00 00
	00		 mov	 DWORD PTR [rax], 17
  00050	89 78 40	 mov	 DWORD PTR [rax+64], edi
  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5f		 pop	 rdi
  00058	c3		 ret	 0
_Py_Nonlocal ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@JGMGDPJJ@field?5value?5is?5required?5for?5Expr@ ; `string'
PUBLIC	_Py_Expr
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Expr DD imagerel $LN6
	DD	imagerel $LN6+115
	DD	imagerel $unwind$_Py_Expr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Expr DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0CB@JGMGDPJJ@field?5value?5is?5required?5for?5Expr@
CONST	SEGMENT
??_C@_0CB@JGMGDPJJ@field?5value?5is?5required?5for?5Expr@ DB 'field value'
	DB	' is required for Expr', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_Expr
_TEXT	SEGMENT
value$ = 48
lineno$ = 56
col_offset$ = 64
arena$ = 72
_Py_Expr PROC						; COMDAT

; 1476 : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	41 8b f8	 mov	 edi, r8d
  00012	8b f2		 mov	 esi, edx
  00014	48 8b d9	 mov	 rbx, rcx

; 1477 :     stmt_ty p;
; 1478 :     if (!value) {

  00017	48 85 c9	 test	 rcx, rcx
  0001a	75 25		 jne	 SHORT $LN2@Py_Expr

; 1479 :         PyErr_SetString(PyExc_ValueError,
; 1480 :                         "field value is required for Expr");

  0001c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00023	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@JGMGDPJJ@field?5value?5is?5required?5for?5Expr@
  0002a	e8 00 00 00 00	 call	 PyErr_SetString
$LN5@Py_Expr:

; 1481 :         return NULL;

  0002f	33 c0		 xor	 eax, eax

; 1488 :     p->lineno = lineno;
; 1489 :     p->col_offset = col_offset;
; 1490 :     return p;
; 1491 : }

  00031	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00036	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0003b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003f	5f		 pop	 rdi
  00040	c3		 ret	 0
$LN2@Py_Expr:

; 1482 :     }
; 1483 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  00041	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  00046	49 8b c9	 mov	 rcx, r9
  00049	e8 00 00 00 00	 call	 PyArena_Malloc

; 1484 :     if (!p)

  0004e	48 85 c0	 test	 rax, rax

; 1485 :         return NULL;

  00051	74 dc		 je	 SHORT $LN5@Py_Expr

; 1486 :     p->kind = Expr_kind;
; 1487 :     p->v.Expr.value = value;

  00053	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx

; 1488 :     p->lineno = lineno;
; 1489 :     p->col_offset = col_offset;
; 1490 :     return p;
; 1491 : }

  00057	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005c	89 70 40	 mov	 DWORD PTR [rax+64], esi
  0005f	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00064	c7 00 12 00 00
	00		 mov	 DWORD PTR [rax], 18
  0006a	89 78 44	 mov	 DWORD PTR [rax+68], edi
  0006d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00071	5f		 pop	 rdi
  00072	c3		 ret	 0
_Py_Expr ENDP
_TEXT	ENDS
PUBLIC	_Py_Pass
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Pass DD imagerel $LN4
	DD	imagerel $LN4+66
	DD	imagerel $unwind$_Py_Pass
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Pass DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _Py_Pass
_TEXT	SEGMENT
lineno$ = 48
col_offset$ = 56
arena$ = 64
_Py_Pass PROC						; COMDAT

; 1495 : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	8b da		 mov	 ebx, edx
  0000c	8b f9		 mov	 edi, ecx

; 1496 :     stmt_ty p;
; 1497 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  0000e	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  00013	49 8b c8	 mov	 rcx, r8
  00016	e8 00 00 00 00	 call	 PyArena_Malloc

; 1498 :     if (!p)

  0001b	48 85 c0	 test	 rax, rax
  0001e	75 0b		 jne	 SHORT $LN1@Py_Pass

; 1503 :     return p;
; 1504 : }

  00020	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00025	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00029	5f		 pop	 rdi
  0002a	c3		 ret	 0
$LN1@Py_Pass:

; 1499 :         return NULL;
; 1500 :     p->kind = Pass_kind;
; 1501 :     p->lineno = lineno;
; 1502 :     p->col_offset = col_offset;

  0002b	89 58 44	 mov	 DWORD PTR [rax+68], ebx

; 1503 :     return p;
; 1504 : }

  0002e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00033	c7 00 13 00 00
	00		 mov	 DWORD PTR [rax], 19
  00039	89 78 40	 mov	 DWORD PTR [rax+64], edi
  0003c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00040	5f		 pop	 rdi
  00041	c3		 ret	 0
_Py_Pass ENDP
_TEXT	ENDS
PUBLIC	_Py_Break
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Break DD imagerel $LN4
	DD	imagerel $LN4+66
	DD	imagerel $unwind$_Py_Break
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Break DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _Py_Break
_TEXT	SEGMENT
lineno$ = 48
col_offset$ = 56
arena$ = 64
_Py_Break PROC						; COMDAT

; 1508 : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	8b da		 mov	 ebx, edx
  0000c	8b f9		 mov	 edi, ecx

; 1509 :     stmt_ty p;
; 1510 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  0000e	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  00013	49 8b c8	 mov	 rcx, r8
  00016	e8 00 00 00 00	 call	 PyArena_Malloc

; 1511 :     if (!p)

  0001b	48 85 c0	 test	 rax, rax
  0001e	75 0b		 jne	 SHORT $LN1@Py_Break

; 1516 :     return p;
; 1517 : }

  00020	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00025	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00029	5f		 pop	 rdi
  0002a	c3		 ret	 0
$LN1@Py_Break:

; 1512 :         return NULL;
; 1513 :     p->kind = Break_kind;
; 1514 :     p->lineno = lineno;
; 1515 :     p->col_offset = col_offset;

  0002b	89 58 44	 mov	 DWORD PTR [rax+68], ebx

; 1516 :     return p;
; 1517 : }

  0002e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00033	c7 00 14 00 00
	00		 mov	 DWORD PTR [rax], 20
  00039	89 78 40	 mov	 DWORD PTR [rax+64], edi
  0003c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00040	5f		 pop	 rdi
  00041	c3		 ret	 0
_Py_Break ENDP
_TEXT	ENDS
PUBLIC	_Py_Continue
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Continue DD imagerel $LN4
	DD	imagerel $LN4+66
	DD	imagerel $unwind$_Py_Continue
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Continue DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _Py_Continue
_TEXT	SEGMENT
lineno$ = 48
col_offset$ = 56
arena$ = 64
_Py_Continue PROC					; COMDAT

; 1521 : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	8b da		 mov	 ebx, edx
  0000c	8b f9		 mov	 edi, ecx

; 1522 :     stmt_ty p;
; 1523 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  0000e	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  00013	49 8b c8	 mov	 rcx, r8
  00016	e8 00 00 00 00	 call	 PyArena_Malloc

; 1524 :     if (!p)

  0001b	48 85 c0	 test	 rax, rax
  0001e	75 0b		 jne	 SHORT $LN1@Py_Continu

; 1529 :     return p;
; 1530 : }

  00020	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00025	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00029	5f		 pop	 rdi
  0002a	c3		 ret	 0
$LN1@Py_Continu:

; 1525 :         return NULL;
; 1526 :     p->kind = Continue_kind;
; 1527 :     p->lineno = lineno;
; 1528 :     p->col_offset = col_offset;

  0002b	89 58 44	 mov	 DWORD PTR [rax+68], ebx

; 1529 :     return p;
; 1530 : }

  0002e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00033	c7 00 15 00 00
	00		 mov	 DWORD PTR [rax], 21
  00039	89 78 40	 mov	 DWORD PTR [rax+64], edi
  0003c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00040	5f		 pop	 rdi
  00041	c3		 ret	 0
_Py_Continue ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@HGKOCBOP@field?5op?5is?5required?5for?5BoolOp?$AA@ ; `string'
PUBLIC	_Py_BoolOp
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_BoolOp DD imagerel $LN6
	DD	imagerel $LN6+118
	DD	imagerel $unwind$_Py_BoolOp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_BoolOp DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0CA@HGKOCBOP@field?5op?5is?5required?5for?5BoolOp?$AA@
CONST	SEGMENT
??_C@_0CA@HGKOCBOP@field?5op?5is?5required?5for?5BoolOp?$AA@ DB 'field op'
	DB	' is required for BoolOp', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_BoolOp
_TEXT	SEGMENT
op$ = 48
values$ = 56
lineno$ = 64
col_offset$ = 72
arena$ = 80
_Py_BoolOp PROC						; COMDAT

; 1535 : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	41 8b f9	 mov	 edi, r9d
  00017	41 8b f0	 mov	 esi, r8d
  0001a	48 8b ea	 mov	 rbp, rdx
  0001d	8b d9		 mov	 ebx, ecx

; 1536 :     expr_ty p;
; 1537 :     if (!op) {

  0001f	85 c9		 test	 ecx, ecx
  00021	75 17		 jne	 SHORT $LN2@Py_BoolOp

; 1538 :         PyErr_SetString(PyExc_ValueError,
; 1539 :                         "field op is required for BoolOp");

  00023	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@HGKOCBOP@field?5op?5is?5required?5for?5BoolOp?$AA@
  00031	e8 00 00 00 00	 call	 PyErr_SetString
$LN5@Py_BoolOp:

; 1540 :         return NULL;

  00036	33 c0		 xor	 eax, eax
  00038	eb 27		 jmp	 SHORT $LN3@Py_BoolOp
$LN2@Py_BoolOp:

; 1541 :     }
; 1542 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  0003a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR arena$[rsp]
  0003f	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  00044	e8 00 00 00 00	 call	 PyArena_Malloc

; 1543 :     if (!p)

  00049	48 85 c0	 test	 rax, rax

; 1544 :         return NULL;

  0004c	74 e8		 je	 SHORT $LN5@Py_BoolOp

; 1545 :     p->kind = BoolOp_kind;

  0004e	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1

; 1546 :     p->v.BoolOp.op = op;

  00054	89 58 08	 mov	 DWORD PTR [rax+8], ebx

; 1547 :     p->v.BoolOp.values = values;

  00057	48 89 68 10	 mov	 QWORD PTR [rax+16], rbp

; 1548 :     p->lineno = lineno;

  0005b	89 70 30	 mov	 DWORD PTR [rax+48], esi

; 1549 :     p->col_offset = col_offset;

  0005e	89 78 34	 mov	 DWORD PTR [rax+52], edi
$LN3@Py_BoolOp:

; 1550 :     return p;
; 1551 : }

  00061	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00066	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0006b	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00070	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00074	5f		 pop	 rdi
  00075	c3		 ret	 0
_Py_BoolOp ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@MNMFNKEA@field?5right?5is?5required?5for?5BinO@ ; `string'
PUBLIC	??_C@_0BP@HHEMEODM@field?5op?5is?5required?5for?5BinOp?$AA@ ; `string'
PUBLIC	??_C@_0CB@MGLKCGGJ@field?5left?5is?5required?5for?5BinOp@ ; `string'
PUBLIC	_Py_BinOp
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_BinOp DD imagerel $LN8
	DD	imagerel $LN8+189
	DD	imagerel $unwind$_Py_BinOp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_BinOp DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0CC@MNMFNKEA@field?5right?5is?5required?5for?5BinO@
CONST	SEGMENT
??_C@_0CC@MNMFNKEA@field?5right?5is?5required?5for?5BinO@ DB 'field right'
	DB	' is required for BinOp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HHEMEODM@field?5op?5is?5required?5for?5BinOp?$AA@
CONST	SEGMENT
??_C@_0BP@HHEMEODM@field?5op?5is?5required?5for?5BinOp?$AA@ DB 'field op '
	DB	'is required for BinOp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MGLKCGGJ@field?5left?5is?5required?5for?5BinOp@
CONST	SEGMENT
??_C@_0CB@MGLKCGGJ@field?5left?5is?5required?5for?5BinOp@ DB 'field left '
	DB	'is required for BinOp', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_BinOp
_TEXT	SEGMENT
left$ = 48
op$ = 56
right$ = 64
lineno$ = 72
col_offset$ = 80
arena$ = 88
_Py_BinOp PROC						; COMDAT

; 1556 : {

$LN8:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	41 8b e9	 mov	 ebp, r9d
  00017	49 8b d8	 mov	 rbx, r8
  0001a	8b fa		 mov	 edi, edx
  0001c	48 8b f1	 mov	 rsi, rcx

; 1557 :     expr_ty p;
; 1558 :     if (!left) {

  0001f	48 85 c9	 test	 rcx, rcx
  00022	75 17		 jne	 SHORT $LN4@Py_BinOp

; 1559 :         PyErr_SetString(PyExc_ValueError,
; 1560 :                         "field left is required for BinOp");

  00024	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@MGLKCGGJ@field?5left?5is?5required?5for?5BinOp@
  00032	e8 00 00 00 00	 call	 PyErr_SetString
$LN7@Py_BinOp:

; 1561 :         return NULL;

  00037	33 c0		 xor	 eax, eax
  00039	eb 6d		 jmp	 SHORT $LN5@Py_BinOp
$LN4@Py_BinOp:

; 1562 :     }
; 1563 :     if (!op) {

  0003b	85 d2		 test	 edx, edx
  0003d	75 17		 jne	 SHORT $LN3@Py_BinOp

; 1564 :         PyErr_SetString(PyExc_ValueError,
; 1565 :                         "field op is required for BinOp");

  0003f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@HHEMEODM@field?5op?5is?5required?5for?5BinOp?$AA@
  0004d	e8 00 00 00 00	 call	 PyErr_SetString

; 1566 :         return NULL;

  00052	33 c0		 xor	 eax, eax
  00054	eb 52		 jmp	 SHORT $LN5@Py_BinOp
$LN3@Py_BinOp:

; 1567 :     }
; 1568 :     if (!right) {

  00056	48 85 db	 test	 rbx, rbx
  00059	75 17		 jne	 SHORT $LN2@Py_BinOp

; 1569 :         PyErr_SetString(PyExc_ValueError,
; 1570 :                         "field right is required for BinOp");

  0005b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00062	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@MNMFNKEA@field?5right?5is?5required?5for?5BinO@
  00069	e8 00 00 00 00	 call	 PyErr_SetString

; 1571 :         return NULL;

  0006e	33 c0		 xor	 eax, eax
  00070	eb 36		 jmp	 SHORT $LN5@Py_BinOp
$LN2@Py_BinOp:

; 1572 :     }
; 1573 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00072	48 8b 4c 24 58	 mov	 rcx, QWORD PTR arena$[rsp]
  00077	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  0007c	e8 00 00 00 00	 call	 PyArena_Malloc
  00081	4c 8b d8	 mov	 r11, rax

; 1574 :     if (!p)

  00084	48 85 c0	 test	 rax, rax

; 1575 :         return NULL;

  00087	74 ae		 je	 SHORT $LN7@Py_BinOp

; 1576 :     p->kind = BinOp_kind;

  00089	c7 00 02 00 00
	00		 mov	 DWORD PTR [rax], 2

; 1577 :     p->v.BinOp.left = left;

  0008f	48 89 70 08	 mov	 QWORD PTR [rax+8], rsi

; 1578 :     p->v.BinOp.op = op;

  00093	89 78 10	 mov	 DWORD PTR [rax+16], edi

; 1579 :     p->v.BinOp.right = right;

  00096	48 89 58 18	 mov	 QWORD PTR [rax+24], rbx

; 1580 :     p->lineno = lineno;

  0009a	89 68 30	 mov	 DWORD PTR [rax+48], ebp

; 1581 :     p->col_offset = col_offset;

  0009d	8b 44 24 50	 mov	 eax, DWORD PTR col_offset$[rsp]
  000a1	41 89 43 34	 mov	 DWORD PTR [r11+52], eax

; 1582 :     return p;

  000a5	49 8b c3	 mov	 rax, r11
$LN5@Py_BinOp:

; 1583 : }

  000a8	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000ad	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000b2	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000b7	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000bb	5f		 pop	 rdi
  000bc	c3		 ret	 0
_Py_BinOp ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@PMECGNPL@field?5operand?5is?5required?5for?5Un@ ; `string'
PUBLIC	??_C@_0CB@NAFIFGPL@field?5op?5is?5required?5for?5UnaryOp@ ; `string'
PUBLIC	_Py_UnaryOp
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_UnaryOp DD imagerel $LN7
	DD	imagerel $LN7+146
	DD	imagerel $unwind$_Py_UnaryOp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_UnaryOp DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0CG@PMECGNPL@field?5operand?5is?5required?5for?5Un@
CONST	SEGMENT
??_C@_0CG@PMECGNPL@field?5operand?5is?5required?5for?5Un@ DB 'field opera'
	DB	'nd is required for UnaryOp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NAFIFGPL@field?5op?5is?5required?5for?5UnaryOp@
CONST	SEGMENT
??_C@_0CB@NAFIFGPL@field?5op?5is?5required?5for?5UnaryOp@ DB 'field op is'
	DB	' required for UnaryOp', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_UnaryOp
_TEXT	SEGMENT
op$ = 48
operand$ = 56
lineno$ = 64
col_offset$ = 72
arena$ = 80
_Py_UnaryOp PROC					; COMDAT

; 1588 : {

$LN7:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	41 8b f1	 mov	 esi, r9d
  00017	41 8b e8	 mov	 ebp, r8d
  0001a	48 8b da	 mov	 rbx, rdx
  0001d	8b f9		 mov	 edi, ecx

; 1589 :     expr_ty p;
; 1590 :     if (!op) {

  0001f	85 c9		 test	 ecx, ecx
  00021	75 17		 jne	 SHORT $LN3@Py_UnaryOp

; 1591 :         PyErr_SetString(PyExc_ValueError,
; 1592 :                         "field op is required for UnaryOp");

  00023	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@NAFIFGPL@field?5op?5is?5required?5for?5UnaryOp@
  00031	e8 00 00 00 00	 call	 PyErr_SetString
$LN6@Py_UnaryOp:

; 1593 :         return NULL;

  00036	33 c0		 xor	 eax, eax
  00038	eb 43		 jmp	 SHORT $LN4@Py_UnaryOp
$LN3@Py_UnaryOp:

; 1594 :     }
; 1595 :     if (!operand) {

  0003a	48 85 d2	 test	 rdx, rdx
  0003d	75 17		 jne	 SHORT $LN2@Py_UnaryOp

; 1596 :         PyErr_SetString(PyExc_ValueError,
; 1597 :                         "field operand is required for UnaryOp");

  0003f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@PMECGNPL@field?5operand?5is?5required?5for?5Un@
  0004d	e8 00 00 00 00	 call	 PyErr_SetString

; 1598 :         return NULL;

  00052	33 c0		 xor	 eax, eax
  00054	eb 27		 jmp	 SHORT $LN4@Py_UnaryOp
$LN2@Py_UnaryOp:

; 1599 :     }
; 1600 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00056	48 8b 4c 24 50	 mov	 rcx, QWORD PTR arena$[rsp]
  0005b	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  00060	e8 00 00 00 00	 call	 PyArena_Malloc

; 1601 :     if (!p)

  00065	48 85 c0	 test	 rax, rax

; 1602 :         return NULL;

  00068	74 cc		 je	 SHORT $LN6@Py_UnaryOp

; 1603 :     p->kind = UnaryOp_kind;

  0006a	c7 00 03 00 00
	00		 mov	 DWORD PTR [rax], 3

; 1604 :     p->v.UnaryOp.op = op;

  00070	89 78 08	 mov	 DWORD PTR [rax+8], edi

; 1605 :     p->v.UnaryOp.operand = operand;

  00073	48 89 58 10	 mov	 QWORD PTR [rax+16], rbx

; 1606 :     p->lineno = lineno;

  00077	89 68 30	 mov	 DWORD PTR [rax+48], ebp

; 1607 :     p->col_offset = col_offset;

  0007a	89 70 34	 mov	 DWORD PTR [rax+52], esi
$LN4@Py_UnaryOp:

; 1608 :     return p;
; 1609 : }

  0007d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00082	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00087	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0008c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00090	5f		 pop	 rdi
  00091	c3		 ret	 0
_Py_UnaryOp ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@IKALMCBA@field?5body?5is?5required?5for?5Lambd@ ; `string'
PUBLIC	??_C@_0CC@FFNEJAPO@field?5args?5is?5required?5for?5Lambd@ ; `string'
PUBLIC	_Py_Lambda
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Lambda DD imagerel $LN7
	DD	imagerel $LN7+149
	DD	imagerel $unwind$_Py_Lambda
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Lambda DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0CC@IKALMCBA@field?5body?5is?5required?5for?5Lambd@
CONST	SEGMENT
??_C@_0CC@IKALMCBA@field?5body?5is?5required?5for?5Lambd@ DB 'field body '
	DB	'is required for Lambda', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@FFNEJAPO@field?5args?5is?5required?5for?5Lambd@
CONST	SEGMENT
??_C@_0CC@FFNEJAPO@field?5args?5is?5required?5for?5Lambd@ DB 'field args '
	DB	'is required for Lambda', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_Lambda
_TEXT	SEGMENT
args$ = 48
body$ = 56
lineno$ = 64
col_offset$ = 72
arena$ = 80
_Py_Lambda PROC						; COMDAT

; 1614 : {

$LN7:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	41 8b f1	 mov	 esi, r9d
  00017	41 8b e8	 mov	 ebp, r8d
  0001a	48 8b da	 mov	 rbx, rdx
  0001d	48 8b f9	 mov	 rdi, rcx

; 1615 :     expr_ty p;
; 1616 :     if (!args) {

  00020	48 85 c9	 test	 rcx, rcx
  00023	75 17		 jne	 SHORT $LN3@Py_Lambda

; 1617 :         PyErr_SetString(PyExc_ValueError,
; 1618 :                         "field args is required for Lambda");

  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@FFNEJAPO@field?5args?5is?5required?5for?5Lambd@
  00033	e8 00 00 00 00	 call	 PyErr_SetString
$LN6@Py_Lambda:

; 1619 :         return NULL;

  00038	33 c0		 xor	 eax, eax
  0003a	eb 44		 jmp	 SHORT $LN4@Py_Lambda
$LN3@Py_Lambda:

; 1620 :     }
; 1621 :     if (!body) {

  0003c	48 85 d2	 test	 rdx, rdx
  0003f	75 17		 jne	 SHORT $LN2@Py_Lambda

; 1622 :         PyErr_SetString(PyExc_ValueError,
; 1623 :                         "field body is required for Lambda");

  00041	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@IKALMCBA@field?5body?5is?5required?5for?5Lambd@
  0004f	e8 00 00 00 00	 call	 PyErr_SetString

; 1624 :         return NULL;

  00054	33 c0		 xor	 eax, eax
  00056	eb 28		 jmp	 SHORT $LN4@Py_Lambda
$LN2@Py_Lambda:

; 1625 :     }
; 1626 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00058	48 8b 4c 24 50	 mov	 rcx, QWORD PTR arena$[rsp]
  0005d	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  00062	e8 00 00 00 00	 call	 PyArena_Malloc

; 1627 :     if (!p)

  00067	48 85 c0	 test	 rax, rax

; 1628 :         return NULL;

  0006a	74 cc		 je	 SHORT $LN6@Py_Lambda

; 1629 :     p->kind = Lambda_kind;

  0006c	c7 00 04 00 00
	00		 mov	 DWORD PTR [rax], 4

; 1630 :     p->v.Lambda.args = args;

  00072	48 89 78 08	 mov	 QWORD PTR [rax+8], rdi

; 1631 :     p->v.Lambda.body = body;

  00076	48 89 58 10	 mov	 QWORD PTR [rax+16], rbx

; 1632 :     p->lineno = lineno;

  0007a	89 68 30	 mov	 DWORD PTR [rax+48], ebp

; 1633 :     p->col_offset = col_offset;

  0007d	89 70 34	 mov	 DWORD PTR [rax+52], esi
$LN4@Py_Lambda:

; 1634 :     return p;
; 1635 : }

  00080	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00085	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0008a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0008f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00093	5f		 pop	 rdi
  00094	c3		 ret	 0
_Py_Lambda ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@CGAONIEH@field?5orelse?5is?5required?5for?5IfE@ ; `string'
PUBLIC	??_C@_0CB@OMMKJGFE@field?5body?5is?5required?5for?5IfExp@ ; `string'
PUBLIC	??_C@_0CB@OCONBKBF@field?5test?5is?5required?5for?5IfExp@ ; `string'
PUBLIC	_Py_IfExp
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_IfExp DD imagerel $LN8
	DD	imagerel $LN8+192
	DD	imagerel $unwind$_Py_IfExp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IfExp DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0CD@CGAONIEH@field?5orelse?5is?5required?5for?5IfE@
CONST	SEGMENT
??_C@_0CD@CGAONIEH@field?5orelse?5is?5required?5for?5IfE@ DB 'field orels'
	DB	'e is required for IfExp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@OMMKJGFE@field?5body?5is?5required?5for?5IfExp@
CONST	SEGMENT
??_C@_0CB@OMMKJGFE@field?5body?5is?5required?5for?5IfExp@ DB 'field body '
	DB	'is required for IfExp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@OCONBKBF@field?5test?5is?5required?5for?5IfExp@
CONST	SEGMENT
??_C@_0CB@OCONBKBF@field?5test?5is?5required?5for?5IfExp@ DB 'field test '
	DB	'is required for IfExp', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IfExp
_TEXT	SEGMENT
test$ = 48
body$ = 56
orelse$ = 64
lineno$ = 72
col_offset$ = 80
arena$ = 88
_Py_IfExp PROC						; COMDAT

; 1640 : {

$LN8:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	41 8b e9	 mov	 ebp, r9d
  00017	49 8b d8	 mov	 rbx, r8
  0001a	48 8b fa	 mov	 rdi, rdx
  0001d	48 8b f1	 mov	 rsi, rcx

; 1641 :     expr_ty p;
; 1642 :     if (!test) {

  00020	48 85 c9	 test	 rcx, rcx
  00023	75 17		 jne	 SHORT $LN4@Py_IfExp

; 1643 :         PyErr_SetString(PyExc_ValueError,
; 1644 :                         "field test is required for IfExp");

  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@OCONBKBF@field?5test?5is?5required?5for?5IfExp@
  00033	e8 00 00 00 00	 call	 PyErr_SetString
$LN7@Py_IfExp:

; 1645 :         return NULL;

  00038	33 c0		 xor	 eax, eax
  0003a	eb 6f		 jmp	 SHORT $LN5@Py_IfExp
$LN4@Py_IfExp:

; 1646 :     }
; 1647 :     if (!body) {

  0003c	48 85 d2	 test	 rdx, rdx
  0003f	75 17		 jne	 SHORT $LN3@Py_IfExp

; 1648 :         PyErr_SetString(PyExc_ValueError,
; 1649 :                         "field body is required for IfExp");

  00041	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@OMMKJGFE@field?5body?5is?5required?5for?5IfExp@
  0004f	e8 00 00 00 00	 call	 PyErr_SetString

; 1650 :         return NULL;

  00054	33 c0		 xor	 eax, eax
  00056	eb 53		 jmp	 SHORT $LN5@Py_IfExp
$LN3@Py_IfExp:

; 1651 :     }
; 1652 :     if (!orelse) {

  00058	48 85 db	 test	 rbx, rbx
  0005b	75 17		 jne	 SHORT $LN2@Py_IfExp

; 1653 :         PyErr_SetString(PyExc_ValueError,
; 1654 :                         "field orelse is required for IfExp");

  0005d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00064	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@CGAONIEH@field?5orelse?5is?5required?5for?5IfE@
  0006b	e8 00 00 00 00	 call	 PyErr_SetString

; 1655 :         return NULL;

  00070	33 c0		 xor	 eax, eax
  00072	eb 37		 jmp	 SHORT $LN5@Py_IfExp
$LN2@Py_IfExp:

; 1656 :     }
; 1657 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00074	48 8b 4c 24 58	 mov	 rcx, QWORD PTR arena$[rsp]
  00079	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  0007e	e8 00 00 00 00	 call	 PyArena_Malloc
  00083	4c 8b d8	 mov	 r11, rax

; 1658 :     if (!p)

  00086	48 85 c0	 test	 rax, rax

; 1659 :         return NULL;

  00089	74 ad		 je	 SHORT $LN7@Py_IfExp

; 1660 :     p->kind = IfExp_kind;

  0008b	c7 00 05 00 00
	00		 mov	 DWORD PTR [rax], 5

; 1661 :     p->v.IfExp.test = test;

  00091	48 89 70 08	 mov	 QWORD PTR [rax+8], rsi

; 1662 :     p->v.IfExp.body = body;

  00095	48 89 78 10	 mov	 QWORD PTR [rax+16], rdi

; 1663 :     p->v.IfExp.orelse = orelse;

  00099	48 89 58 18	 mov	 QWORD PTR [rax+24], rbx

; 1664 :     p->lineno = lineno;

  0009d	89 68 30	 mov	 DWORD PTR [rax+48], ebp

; 1665 :     p->col_offset = col_offset;

  000a0	8b 44 24 50	 mov	 eax, DWORD PTR col_offset$[rsp]
  000a4	41 89 43 34	 mov	 DWORD PTR [r11+52], eax

; 1666 :     return p;

  000a8	49 8b c3	 mov	 rax, r11
$LN5@Py_IfExp:

; 1667 : }

  000ab	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000b0	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000b5	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000ba	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000be	5f		 pop	 rdi
  000bf	c3		 ret	 0
_Py_IfExp ENDP
_TEXT	ENDS
PUBLIC	_Py_Dict
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Dict DD imagerel $LN4
	DD	imagerel $LN4+93
	DD	imagerel $unwind$_Py_Dict
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Dict DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _Py_Dict
_TEXT	SEGMENT
keys$ = 48
values$ = 56
lineno$ = 64
col_offset$ = 72
arena$ = 80
_Py_Dict PROC						; COMDAT

; 1672 : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b e9	 mov	 rbp, rcx

; 1673 :     expr_ty p;
; 1674 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00017	48 8b 4c 24 50	 mov	 rcx, QWORD PTR arena$[rsp]
  0001c	48 8b f2	 mov	 rsi, rdx
  0001f	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  00024	41 8b d9	 mov	 ebx, r9d
  00027	41 8b f8	 mov	 edi, r8d
  0002a	e8 00 00 00 00	 call	 PyArena_Malloc

; 1675 :     if (!p)

  0002f	48 85 c0	 test	 rax, rax
  00032	74 14		 je	 SHORT $LN2@Py_Dict
$LN1@Py_Dict:

; 1676 :         return NULL;
; 1677 :     p->kind = Dict_kind;

  00034	c7 00 06 00 00
	00		 mov	 DWORD PTR [rax], 6

; 1678 :     p->v.Dict.keys = keys;

  0003a	48 89 68 08	 mov	 QWORD PTR [rax+8], rbp

; 1679 :     p->v.Dict.values = values;

  0003e	48 89 70 10	 mov	 QWORD PTR [rax+16], rsi

; 1680 :     p->lineno = lineno;

  00042	89 78 30	 mov	 DWORD PTR [rax+48], edi

; 1681 :     p->col_offset = col_offset;

  00045	89 58 34	 mov	 DWORD PTR [rax+52], ebx
$LN2@Py_Dict:

; 1682 :     return p;
; 1683 : }

  00048	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004d	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00052	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00057	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005b	5f		 pop	 rdi
  0005c	c3		 ret	 0
_Py_Dict ENDP
_TEXT	ENDS
PUBLIC	_Py_Set
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Set DD imagerel $LN4
	DD	imagerel $LN4+89
	DD	imagerel $unwind$_Py_Set
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Set DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _Py_Set
_TEXT	SEGMENT
elts$ = 48
lineno$ = 56
col_offset$ = 64
arena$ = 72
_Py_Set	PROC						; COMDAT

; 1687 : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	8b fa		 mov	 edi, edx
  00011	48 8b f1	 mov	 rsi, rcx

; 1688 :     expr_ty p;
; 1689 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00014	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  00019	49 8b c9	 mov	 rcx, r9
  0001c	41 8b d8	 mov	 ebx, r8d
  0001f	e8 00 00 00 00	 call	 PyArena_Malloc

; 1690 :     if (!p)

  00024	48 85 c0	 test	 rax, rax
  00027	75 10		 jne	 SHORT $LN1@Py_Set

; 1694 :     p->lineno = lineno;
; 1695 :     p->col_offset = col_offset;
; 1696 :     return p;
; 1697 : }

  00029	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002e	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5f		 pop	 rdi
  00038	c3		 ret	 0
$LN1@Py_Set:

; 1691 :         return NULL;
; 1692 :     p->kind = Set_kind;
; 1693 :     p->v.Set.elts = elts;

  00039	48 89 70 08	 mov	 QWORD PTR [rax+8], rsi

; 1694 :     p->lineno = lineno;
; 1695 :     p->col_offset = col_offset;
; 1696 :     return p;
; 1697 : }

  0003d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00042	89 58 34	 mov	 DWORD PTR [rax+52], ebx
  00045	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004a	c7 00 07 00 00
	00		 mov	 DWORD PTR [rax], 7
  00050	89 78 30	 mov	 DWORD PTR [rax+48], edi
  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5f		 pop	 rdi
  00058	c3		 ret	 0
_Py_Set	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@JDGGGGGL@field?5elt?5is?5required?5for?5ListCo@ ; `string'
PUBLIC	_Py_ListComp
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_ListComp DD imagerel $LN6
	DD	imagerel $LN6+121
	DD	imagerel $unwind$_Py_ListComp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_ListComp DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0CD@JDGGGGGL@field?5elt?5is?5required?5for?5ListCo@
CONST	SEGMENT
??_C@_0CD@JDGGGGGL@field?5elt?5is?5required?5for?5ListCo@ DB 'field elt i'
	DB	's required for ListComp', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_ListComp
_TEXT	SEGMENT
elt$ = 48
generators$ = 56
lineno$ = 64
col_offset$ = 72
arena$ = 80
_Py_ListComp PROC					; COMDAT

; 1702 : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	41 8b f9	 mov	 edi, r9d
  00017	41 8b f0	 mov	 esi, r8d
  0001a	48 8b ea	 mov	 rbp, rdx
  0001d	48 8b d9	 mov	 rbx, rcx

; 1703 :     expr_ty p;
; 1704 :     if (!elt) {

  00020	48 85 c9	 test	 rcx, rcx
  00023	75 17		 jne	 SHORT $LN2@Py_ListCom

; 1705 :         PyErr_SetString(PyExc_ValueError,
; 1706 :                         "field elt is required for ListComp");

  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@JDGGGGGL@field?5elt?5is?5required?5for?5ListCo@
  00033	e8 00 00 00 00	 call	 PyErr_SetString
$LN5@Py_ListCom:

; 1707 :         return NULL;

  00038	33 c0		 xor	 eax, eax
  0003a	eb 28		 jmp	 SHORT $LN3@Py_ListCom
$LN2@Py_ListCom:

; 1708 :     }
; 1709 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR arena$[rsp]
  00041	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  00046	e8 00 00 00 00	 call	 PyArena_Malloc

; 1710 :     if (!p)

  0004b	48 85 c0	 test	 rax, rax

; 1711 :         return NULL;

  0004e	74 e8		 je	 SHORT $LN5@Py_ListCom

; 1712 :     p->kind = ListComp_kind;

  00050	c7 00 08 00 00
	00		 mov	 DWORD PTR [rax], 8

; 1713 :     p->v.ListComp.elt = elt;

  00056	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx

; 1714 :     p->v.ListComp.generators = generators;

  0005a	48 89 68 10	 mov	 QWORD PTR [rax+16], rbp

; 1715 :     p->lineno = lineno;

  0005e	89 70 30	 mov	 DWORD PTR [rax+48], esi

; 1716 :     p->col_offset = col_offset;

  00061	89 78 34	 mov	 DWORD PTR [rax+52], edi
$LN3@Py_ListCom:

; 1717 :     return p;
; 1718 : }

  00064	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00069	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0006e	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00073	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00077	5f		 pop	 rdi
  00078	c3		 ret	 0
_Py_ListComp ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@EFKPDCJI@field?5elt?5is?5required?5for?5SetCom@ ; `string'
PUBLIC	_Py_SetComp
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_SetComp DD imagerel $LN6
	DD	imagerel $LN6+121
	DD	imagerel $unwind$_Py_SetComp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_SetComp DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0CC@EFKPDCJI@field?5elt?5is?5required?5for?5SetCom@
CONST	SEGMENT
??_C@_0CC@EFKPDCJI@field?5elt?5is?5required?5for?5SetCom@ DB 'field elt i'
	DB	's required for SetComp', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_SetComp
_TEXT	SEGMENT
elt$ = 48
generators$ = 56
lineno$ = 64
col_offset$ = 72
arena$ = 80
_Py_SetComp PROC					; COMDAT

; 1723 : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	41 8b f9	 mov	 edi, r9d
  00017	41 8b f0	 mov	 esi, r8d
  0001a	48 8b ea	 mov	 rbp, rdx
  0001d	48 8b d9	 mov	 rbx, rcx

; 1724 :     expr_ty p;
; 1725 :     if (!elt) {

  00020	48 85 c9	 test	 rcx, rcx
  00023	75 17		 jne	 SHORT $LN2@Py_SetComp

; 1726 :         PyErr_SetString(PyExc_ValueError,
; 1727 :                         "field elt is required for SetComp");

  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@EFKPDCJI@field?5elt?5is?5required?5for?5SetCom@
  00033	e8 00 00 00 00	 call	 PyErr_SetString
$LN5@Py_SetComp:

; 1728 :         return NULL;

  00038	33 c0		 xor	 eax, eax
  0003a	eb 28		 jmp	 SHORT $LN3@Py_SetComp
$LN2@Py_SetComp:

; 1729 :     }
; 1730 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR arena$[rsp]
  00041	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  00046	e8 00 00 00 00	 call	 PyArena_Malloc

; 1731 :     if (!p)

  0004b	48 85 c0	 test	 rax, rax

; 1732 :         return NULL;

  0004e	74 e8		 je	 SHORT $LN5@Py_SetComp

; 1733 :     p->kind = SetComp_kind;

  00050	c7 00 09 00 00
	00		 mov	 DWORD PTR [rax], 9

; 1734 :     p->v.SetComp.elt = elt;

  00056	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx

; 1735 :     p->v.SetComp.generators = generators;

  0005a	48 89 68 10	 mov	 QWORD PTR [rax+16], rbp

; 1736 :     p->lineno = lineno;

  0005e	89 70 30	 mov	 DWORD PTR [rax+48], esi

; 1737 :     p->col_offset = col_offset;

  00061	89 78 34	 mov	 DWORD PTR [rax+52], edi
$LN3@Py_SetComp:

; 1738 :     return p;
; 1739 : }

  00064	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00069	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0006e	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00073	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00077	5f		 pop	 rdi
  00078	c3		 ret	 0
_Py_SetComp ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@FPJAOOML@field?5value?5is?5required?5for?5Dict@ ; `string'
PUBLIC	??_C@_0CD@LBIIPOPN@field?5key?5is?5required?5for?5DictCo@ ; `string'
PUBLIC	_Py_DictComp
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DictComp DD imagerel $LN7
	DD	imagerel $LN7+164
	DD	imagerel $unwind$_Py_DictComp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DictComp DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0CF@FPJAOOML@field?5value?5is?5required?5for?5Dict@
CONST	SEGMENT
??_C@_0CF@FPJAOOML@field?5value?5is?5required?5for?5Dict@ DB 'field value'
	DB	' is required for DictComp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@LBIIPOPN@field?5key?5is?5required?5for?5DictCo@
CONST	SEGMENT
??_C@_0CD@LBIIPOPN@field?5key?5is?5required?5for?5DictCo@ DB 'field key i'
	DB	's required for DictComp', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DictComp
_TEXT	SEGMENT
key$ = 48
value$ = 56
generators$ = 64
lineno$ = 72
col_offset$ = 80
arena$ = 88
_Py_DictComp PROC					; COMDAT

; 1744 : {

$LN7:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	41 8b f1	 mov	 esi, r9d
  00017	49 8b e8	 mov	 rbp, r8
  0001a	48 8b da	 mov	 rbx, rdx
  0001d	48 8b f9	 mov	 rdi, rcx

; 1745 :     expr_ty p;
; 1746 :     if (!key) {

  00020	48 85 c9	 test	 rcx, rcx
  00023	75 17		 jne	 SHORT $LN3@Py_DictCom

; 1747 :         PyErr_SetString(PyExc_ValueError,
; 1748 :                         "field key is required for DictComp");

  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@LBIIPOPN@field?5key?5is?5required?5for?5DictCo@
  00033	e8 00 00 00 00	 call	 PyErr_SetString
$LN6@Py_DictCom:

; 1749 :         return NULL;

  00038	33 c0		 xor	 eax, eax
  0003a	eb 53		 jmp	 SHORT $LN4@Py_DictCom
$LN3@Py_DictCom:

; 1750 :     }
; 1751 :     if (!value) {

  0003c	48 85 d2	 test	 rdx, rdx
  0003f	75 17		 jne	 SHORT $LN2@Py_DictCom

; 1752 :         PyErr_SetString(PyExc_ValueError,
; 1753 :                         "field value is required for DictComp");

  00041	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@FPJAOOML@field?5value?5is?5required?5for?5Dict@
  0004f	e8 00 00 00 00	 call	 PyErr_SetString

; 1754 :         return NULL;

  00054	33 c0		 xor	 eax, eax
  00056	eb 37		 jmp	 SHORT $LN4@Py_DictCom
$LN2@Py_DictCom:

; 1755 :     }
; 1756 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00058	48 8b 4c 24 58	 mov	 rcx, QWORD PTR arena$[rsp]
  0005d	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  00062	e8 00 00 00 00	 call	 PyArena_Malloc
  00067	4c 8b d8	 mov	 r11, rax

; 1757 :     if (!p)

  0006a	48 85 c0	 test	 rax, rax

; 1758 :         return NULL;

  0006d	74 c9		 je	 SHORT $LN6@Py_DictCom

; 1759 :     p->kind = DictComp_kind;

  0006f	c7 00 0a 00 00
	00		 mov	 DWORD PTR [rax], 10

; 1760 :     p->v.DictComp.key = key;

  00075	48 89 78 08	 mov	 QWORD PTR [rax+8], rdi

; 1761 :     p->v.DictComp.value = value;

  00079	48 89 58 10	 mov	 QWORD PTR [rax+16], rbx

; 1762 :     p->v.DictComp.generators = generators;

  0007d	48 89 68 18	 mov	 QWORD PTR [rax+24], rbp

; 1763 :     p->lineno = lineno;

  00081	89 70 30	 mov	 DWORD PTR [rax+48], esi

; 1764 :     p->col_offset = col_offset;

  00084	8b 44 24 50	 mov	 eax, DWORD PTR col_offset$[rsp]
  00088	41 89 43 34	 mov	 DWORD PTR [r11+52], eax

; 1765 :     return p;

  0008c	49 8b c3	 mov	 rax, r11
$LN4@Py_DictCom:

; 1766 : }

  0008f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00094	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00099	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a2	5f		 pop	 rdi
  000a3	c3		 ret	 0
_Py_DictComp ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@MDBCKMDJ@field?5elt?5is?5required?5for?5Genera@ ; `string'
PUBLIC	_Py_GeneratorExp
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_GeneratorExp DD imagerel $LN6
	DD	imagerel $LN6+121
	DD	imagerel $unwind$_Py_GeneratorExp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_GeneratorExp DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0CH@MDBCKMDJ@field?5elt?5is?5required?5for?5Genera@
CONST	SEGMENT
??_C@_0CH@MDBCKMDJ@field?5elt?5is?5required?5for?5Genera@ DB 'field elt i'
	DB	's required for GeneratorExp', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_GeneratorExp
_TEXT	SEGMENT
elt$ = 48
generators$ = 56
lineno$ = 64
col_offset$ = 72
arena$ = 80
_Py_GeneratorExp PROC					; COMDAT

; 1771 : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	41 8b f9	 mov	 edi, r9d
  00017	41 8b f0	 mov	 esi, r8d
  0001a	48 8b ea	 mov	 rbp, rdx
  0001d	48 8b d9	 mov	 rbx, rcx

; 1772 :     expr_ty p;
; 1773 :     if (!elt) {

  00020	48 85 c9	 test	 rcx, rcx
  00023	75 17		 jne	 SHORT $LN2@Py_Generat

; 1774 :         PyErr_SetString(PyExc_ValueError,
; 1775 :                         "field elt is required for GeneratorExp");

  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@MDBCKMDJ@field?5elt?5is?5required?5for?5Genera@
  00033	e8 00 00 00 00	 call	 PyErr_SetString
$LN5@Py_Generat:

; 1776 :         return NULL;

  00038	33 c0		 xor	 eax, eax
  0003a	eb 28		 jmp	 SHORT $LN3@Py_Generat
$LN2@Py_Generat:

; 1777 :     }
; 1778 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR arena$[rsp]
  00041	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  00046	e8 00 00 00 00	 call	 PyArena_Malloc

; 1779 :     if (!p)

  0004b	48 85 c0	 test	 rax, rax

; 1780 :         return NULL;

  0004e	74 e8		 je	 SHORT $LN5@Py_Generat

; 1781 :     p->kind = GeneratorExp_kind;

  00050	c7 00 0b 00 00
	00		 mov	 DWORD PTR [rax], 11

; 1782 :     p->v.GeneratorExp.elt = elt;

  00056	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx

; 1783 :     p->v.GeneratorExp.generators = generators;

  0005a	48 89 68 10	 mov	 QWORD PTR [rax+16], rbp

; 1784 :     p->lineno = lineno;

  0005e	89 70 30	 mov	 DWORD PTR [rax+48], esi

; 1785 :     p->col_offset = col_offset;

  00061	89 78 34	 mov	 DWORD PTR [rax+52], edi
$LN3@Py_Generat:

; 1786 :     return p;
; 1787 : }

  00064	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00069	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0006e	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00073	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00077	5f		 pop	 rdi
  00078	c3		 ret	 0
_Py_GeneratorExp ENDP
_TEXT	ENDS
PUBLIC	_Py_Yield
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Yield DD imagerel $LN4
	DD	imagerel $LN4+89
	DD	imagerel $unwind$_Py_Yield
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Yield DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _Py_Yield
_TEXT	SEGMENT
value$ = 48
lineno$ = 56
col_offset$ = 64
arena$ = 72
_Py_Yield PROC						; COMDAT

; 1791 : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	8b fa		 mov	 edi, edx
  00011	48 8b f1	 mov	 rsi, rcx

; 1792 :     expr_ty p;
; 1793 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00014	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  00019	49 8b c9	 mov	 rcx, r9
  0001c	41 8b d8	 mov	 ebx, r8d
  0001f	e8 00 00 00 00	 call	 PyArena_Malloc

; 1794 :     if (!p)

  00024	48 85 c0	 test	 rax, rax
  00027	75 10		 jne	 SHORT $LN1@Py_Yield

; 1798 :     p->lineno = lineno;
; 1799 :     p->col_offset = col_offset;
; 1800 :     return p;
; 1801 : }

  00029	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002e	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5f		 pop	 rdi
  00038	c3		 ret	 0
$LN1@Py_Yield:

; 1795 :         return NULL;
; 1796 :     p->kind = Yield_kind;
; 1797 :     p->v.Yield.value = value;

  00039	48 89 70 08	 mov	 QWORD PTR [rax+8], rsi

; 1798 :     p->lineno = lineno;
; 1799 :     p->col_offset = col_offset;
; 1800 :     return p;
; 1801 : }

  0003d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00042	89 58 34	 mov	 DWORD PTR [rax+52], ebx
  00045	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004a	c7 00 0c 00 00
	00		 mov	 DWORD PTR [rax], 12
  00050	89 78 30	 mov	 DWORD PTR [rax+48], edi
  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5f		 pop	 rdi
  00058	c3		 ret	 0
_Py_Yield ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@FFMMJEDF@field?5value?5is?5required?5for?5Yiel@ ; `string'
PUBLIC	_Py_YieldFrom
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_YieldFrom DD imagerel $LN6
	DD	imagerel $LN6+115
	DD	imagerel $unwind$_Py_YieldFrom
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_YieldFrom DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0CG@FFMMJEDF@field?5value?5is?5required?5for?5Yiel@
CONST	SEGMENT
??_C@_0CG@FFMMJEDF@field?5value?5is?5required?5for?5Yiel@ DB 'field value'
	DB	' is required for YieldFrom', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_YieldFrom
_TEXT	SEGMENT
value$ = 48
lineno$ = 56
col_offset$ = 64
arena$ = 72
_Py_YieldFrom PROC					; COMDAT

; 1805 : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	41 8b f8	 mov	 edi, r8d
  00012	8b f2		 mov	 esi, edx
  00014	48 8b d9	 mov	 rbx, rcx

; 1806 :     expr_ty p;
; 1807 :     if (!value) {

  00017	48 85 c9	 test	 rcx, rcx
  0001a	75 25		 jne	 SHORT $LN2@Py_YieldFr

; 1808 :         PyErr_SetString(PyExc_ValueError,
; 1809 :                         "field value is required for YieldFrom");

  0001c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00023	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@FFMMJEDF@field?5value?5is?5required?5for?5Yiel@
  0002a	e8 00 00 00 00	 call	 PyErr_SetString
$LN5@Py_YieldFr:

; 1810 :         return NULL;

  0002f	33 c0		 xor	 eax, eax

; 1817 :     p->lineno = lineno;
; 1818 :     p->col_offset = col_offset;
; 1819 :     return p;
; 1820 : }

  00031	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00036	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0003b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003f	5f		 pop	 rdi
  00040	c3		 ret	 0
$LN2@Py_YieldFr:

; 1811 :     }
; 1812 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00041	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  00046	49 8b c9	 mov	 rcx, r9
  00049	e8 00 00 00 00	 call	 PyArena_Malloc

; 1813 :     if (!p)

  0004e	48 85 c0	 test	 rax, rax

; 1814 :         return NULL;

  00051	74 dc		 je	 SHORT $LN5@Py_YieldFr

; 1815 :     p->kind = YieldFrom_kind;
; 1816 :     p->v.YieldFrom.value = value;

  00053	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx

; 1817 :     p->lineno = lineno;
; 1818 :     p->col_offset = col_offset;
; 1819 :     return p;
; 1820 : }

  00057	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005c	89 70 30	 mov	 DWORD PTR [rax+48], esi
  0005f	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00064	c7 00 0d 00 00
	00		 mov	 DWORD PTR [rax], 13
  0006a	89 78 34	 mov	 DWORD PTR [rax+52], edi
  0006d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00071	5f		 pop	 rdi
  00072	c3		 ret	 0
_Py_YieldFrom ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@MLPHOINC@field?5left?5is?5required?5for?5Compa@ ; `string'
PUBLIC	_Py_Compare
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Compare DD imagerel $LN6
	DD	imagerel $LN6+136
	DD	imagerel $unwind$_Py_Compare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Compare DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0CD@MLPHOINC@field?5left?5is?5required?5for?5Compa@
CONST	SEGMENT
??_C@_0CD@MLPHOINC@field?5left?5is?5required?5for?5Compa@ DB 'field left '
	DB	'is required for Compare', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_Compare
_TEXT	SEGMENT
left$ = 48
ops$ = 56
comparators$ = 64
lineno$ = 72
col_offset$ = 80
arena$ = 88
_Py_Compare PROC					; COMDAT

; 1825 : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	41 8b f9	 mov	 edi, r9d
  00017	49 8b f0	 mov	 rsi, r8
  0001a	48 8b ea	 mov	 rbp, rdx
  0001d	48 8b d9	 mov	 rbx, rcx

; 1826 :     expr_ty p;
; 1827 :     if (!left) {

  00020	48 85 c9	 test	 rcx, rcx
  00023	75 17		 jne	 SHORT $LN2@Py_Compare

; 1828 :         PyErr_SetString(PyExc_ValueError,
; 1829 :                         "field left is required for Compare");

  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@MLPHOINC@field?5left?5is?5required?5for?5Compa@
  00033	e8 00 00 00 00	 call	 PyErr_SetString
$LN5@Py_Compare:

; 1830 :         return NULL;

  00038	33 c0		 xor	 eax, eax
  0003a	eb 37		 jmp	 SHORT $LN3@Py_Compare
$LN2@Py_Compare:

; 1831 :     }
; 1832 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  0003c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR arena$[rsp]
  00041	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  00046	e8 00 00 00 00	 call	 PyArena_Malloc
  0004b	4c 8b d8	 mov	 r11, rax

; 1833 :     if (!p)

  0004e	48 85 c0	 test	 rax, rax

; 1834 :         return NULL;

  00051	74 e5		 je	 SHORT $LN5@Py_Compare

; 1835 :     p->kind = Compare_kind;

  00053	c7 00 0e 00 00
	00		 mov	 DWORD PTR [rax], 14

; 1836 :     p->v.Compare.left = left;

  00059	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx

; 1837 :     p->v.Compare.ops = ops;

  0005d	48 89 68 10	 mov	 QWORD PTR [rax+16], rbp

; 1838 :     p->v.Compare.comparators = comparators;

  00061	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi

; 1839 :     p->lineno = lineno;

  00065	89 78 30	 mov	 DWORD PTR [rax+48], edi

; 1840 :     p->col_offset = col_offset;

  00068	8b 44 24 50	 mov	 eax, DWORD PTR col_offset$[rsp]
  0006c	41 89 43 34	 mov	 DWORD PTR [r11+52], eax

; 1841 :     return p;

  00070	49 8b c3	 mov	 rax, r11
$LN3@Py_Compare:

; 1842 : }

  00073	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00078	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0007d	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00082	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00086	5f		 pop	 rdi
  00087	c3		 ret	 0
_Py_Compare ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@BOLBGLLH@field?5func?5is?5required?5for?5Call?$AA@ ; `string'
PUBLIC	_Py_Call
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Call DD imagerel $LN6
	DD	imagerel $LN6+154
	DD	imagerel $unwind$_Py_Call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Call DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0CA@BOLBGLLH@field?5func?5is?5required?5for?5Call?$AA@
CONST	SEGMENT
??_C@_0CA@BOLBGLLH@field?5func?5is?5required?5for?5Call?$AA@ DB 'field fu'
	DB	'nc is required for Call', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_Call
_TEXT	SEGMENT
func$ = 48
args$ = 56
keywords$ = 64
starargs$ = 72
kwargs$ = 80
lineno$ = 88
col_offset$ = 96
arena$ = 104
_Py_Call PROC						; COMDAT

; 1847 : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	49 8b f9	 mov	 rdi, r9
  00017	49 8b f0	 mov	 rsi, r8
  0001a	48 8b ea	 mov	 rbp, rdx
  0001d	48 8b d9	 mov	 rbx, rcx

; 1848 :     expr_ty p;
; 1849 :     if (!func) {

  00020	48 85 c9	 test	 rcx, rcx
  00023	75 17		 jne	 SHORT $LN2@Py_Call

; 1850 :         PyErr_SetString(PyExc_ValueError,
; 1851 :                         "field func is required for Call");

  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@BOLBGLLH@field?5func?5is?5required?5for?5Call?$AA@
  00033	e8 00 00 00 00	 call	 PyErr_SetString
$LN5@Py_Call:

; 1852 :         return NULL;

  00038	33 c0		 xor	 eax, eax
  0003a	eb 49		 jmp	 SHORT $LN3@Py_Call
$LN2@Py_Call:

; 1853 :     }
; 1854 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  0003c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR arena$[rsp]
  00041	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  00046	e8 00 00 00 00	 call	 PyArena_Malloc
  0004b	4c 8b d8	 mov	 r11, rax

; 1855 :     if (!p)

  0004e	48 85 c0	 test	 rax, rax

; 1856 :         return NULL;

  00051	74 e5		 je	 SHORT $LN5@Py_Call

; 1857 :     p->kind = Call_kind;

  00053	c7 00 0f 00 00
	00		 mov	 DWORD PTR [rax], 15

; 1858 :     p->v.Call.func = func;

  00059	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx

; 1859 :     p->v.Call.args = args;

  0005d	48 89 68 10	 mov	 QWORD PTR [rax+16], rbp

; 1860 :     p->v.Call.keywords = keywords;

  00061	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi

; 1861 :     p->v.Call.starargs = starargs;

  00065	48 89 78 20	 mov	 QWORD PTR [rax+32], rdi

; 1862 :     p->v.Call.kwargs = kwargs;

  00069	48 8b 44 24 50	 mov	 rax, QWORD PTR kwargs$[rsp]
  0006e	49 89 43 28	 mov	 QWORD PTR [r11+40], rax

; 1863 :     p->lineno = lineno;

  00072	8b 44 24 58	 mov	 eax, DWORD PTR lineno$[rsp]
  00076	41 89 43 30	 mov	 DWORD PTR [r11+48], eax

; 1864 :     p->col_offset = col_offset;

  0007a	8b 44 24 60	 mov	 eax, DWORD PTR col_offset$[rsp]
  0007e	41 89 43 34	 mov	 DWORD PTR [r11+52], eax

; 1865 :     return p;

  00082	49 8b c3	 mov	 rax, r11
$LN3@Py_Call:

; 1866 : }

  00085	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008a	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0008f	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00094	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00098	5f		 pop	 rdi
  00099	c3		 ret	 0
_Py_Call ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@DIMBMCIK@field?5n?5is?5required?5for?5Num?$AA@ ; `string'
PUBLIC	_Py_Num
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Num DD imagerel $LN6
	DD	imagerel $LN6+115
	DD	imagerel $unwind$_Py_Num
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Num DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BM@DIMBMCIK@field?5n?5is?5required?5for?5Num?$AA@
CONST	SEGMENT
??_C@_0BM@DIMBMCIK@field?5n?5is?5required?5for?5Num?$AA@ DB 'field n is r'
	DB	'equired for Num', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_Num
_TEXT	SEGMENT
n$ = 48
lineno$ = 56
col_offset$ = 64
arena$ = 72
_Py_Num	PROC						; COMDAT

; 1870 : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	41 8b f8	 mov	 edi, r8d
  00012	8b f2		 mov	 esi, edx
  00014	48 8b d9	 mov	 rbx, rcx

; 1871 :     expr_ty p;
; 1872 :     if (!n) {

  00017	48 85 c9	 test	 rcx, rcx
  0001a	75 25		 jne	 SHORT $LN2@Py_Num

; 1873 :         PyErr_SetString(PyExc_ValueError,
; 1874 :                         "field n is required for Num");

  0001c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00023	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DIMBMCIK@field?5n?5is?5required?5for?5Num?$AA@
  0002a	e8 00 00 00 00	 call	 PyErr_SetString
$LN5@Py_Num:

; 1875 :         return NULL;

  0002f	33 c0		 xor	 eax, eax

; 1882 :     p->lineno = lineno;
; 1883 :     p->col_offset = col_offset;
; 1884 :     return p;
; 1885 : }

  00031	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00036	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0003b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003f	5f		 pop	 rdi
  00040	c3		 ret	 0
$LN2@Py_Num:

; 1876 :     }
; 1877 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00041	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  00046	49 8b c9	 mov	 rcx, r9
  00049	e8 00 00 00 00	 call	 PyArena_Malloc

; 1878 :     if (!p)

  0004e	48 85 c0	 test	 rax, rax

; 1879 :         return NULL;

  00051	74 dc		 je	 SHORT $LN5@Py_Num

; 1880 :     p->kind = Num_kind;
; 1881 :     p->v.Num.n = n;

  00053	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx

; 1882 :     p->lineno = lineno;
; 1883 :     p->col_offset = col_offset;
; 1884 :     return p;
; 1885 : }

  00057	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005c	89 70 30	 mov	 DWORD PTR [rax+48], esi
  0005f	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00064	c7 00 10 00 00
	00		 mov	 DWORD PTR [rax], 16
  0006a	89 78 34	 mov	 DWORD PTR [rax+52], edi
  0006d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00071	5f		 pop	 rdi
  00072	c3		 ret	 0
_Py_Num	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@NBHLCOA@field?5s?5is?5required?5for?5Str?$AA@ ; `string'
PUBLIC	_Py_Str
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Str DD imagerel $LN6
	DD	imagerel $LN6+115
	DD	imagerel $unwind$_Py_Str
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Str DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BM@NBHLCOA@field?5s?5is?5required?5for?5Str?$AA@
CONST	SEGMENT
??_C@_0BM@NBHLCOA@field?5s?5is?5required?5for?5Str?$AA@ DB 'field s is re'
	DB	'quired for Str', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_Str
_TEXT	SEGMENT
s$ = 48
lineno$ = 56
col_offset$ = 64
arena$ = 72
_Py_Str	PROC						; COMDAT

; 1889 : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	41 8b f8	 mov	 edi, r8d
  00012	8b f2		 mov	 esi, edx
  00014	48 8b d9	 mov	 rbx, rcx

; 1890 :     expr_ty p;
; 1891 :     if (!s) {

  00017	48 85 c9	 test	 rcx, rcx
  0001a	75 25		 jne	 SHORT $LN2@Py_Str

; 1892 :         PyErr_SetString(PyExc_ValueError,
; 1893 :                         "field s is required for Str");

  0001c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00023	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@NBHLCOA@field?5s?5is?5required?5for?5Str?$AA@
  0002a	e8 00 00 00 00	 call	 PyErr_SetString
$LN5@Py_Str:

; 1894 :         return NULL;

  0002f	33 c0		 xor	 eax, eax

; 1901 :     p->lineno = lineno;
; 1902 :     p->col_offset = col_offset;
; 1903 :     return p;
; 1904 : }

  00031	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00036	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0003b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003f	5f		 pop	 rdi
  00040	c3		 ret	 0
$LN2@Py_Str:

; 1895 :     }
; 1896 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00041	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  00046	49 8b c9	 mov	 rcx, r9
  00049	e8 00 00 00 00	 call	 PyArena_Malloc

; 1897 :     if (!p)

  0004e	48 85 c0	 test	 rax, rax

; 1898 :         return NULL;

  00051	74 dc		 je	 SHORT $LN5@Py_Str

; 1899 :     p->kind = Str_kind;
; 1900 :     p->v.Str.s = s;

  00053	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx

; 1901 :     p->lineno = lineno;
; 1902 :     p->col_offset = col_offset;
; 1903 :     return p;
; 1904 : }

  00057	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005c	89 70 30	 mov	 DWORD PTR [rax+48], esi
  0005f	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00064	c7 00 11 00 00
	00		 mov	 DWORD PTR [rax], 17
  0006a	89 78 34	 mov	 DWORD PTR [rax+52], edi
  0006d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00071	5f		 pop	 rdi
  00072	c3		 ret	 0
_Py_Str	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@CEGOEFPG@field?5s?5is?5required?5for?5Bytes?$AA@ ; `string'
PUBLIC	_Py_Bytes
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Bytes DD imagerel $LN6
	DD	imagerel $LN6+115
	DD	imagerel $unwind$_Py_Bytes
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Bytes DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BO@CEGOEFPG@field?5s?5is?5required?5for?5Bytes?$AA@
CONST	SEGMENT
??_C@_0BO@CEGOEFPG@field?5s?5is?5required?5for?5Bytes?$AA@ DB 'field s is'
	DB	' required for Bytes', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_Bytes
_TEXT	SEGMENT
s$ = 48
lineno$ = 56
col_offset$ = 64
arena$ = 72
_Py_Bytes PROC						; COMDAT

; 1908 : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	41 8b f8	 mov	 edi, r8d
  00012	8b f2		 mov	 esi, edx
  00014	48 8b d9	 mov	 rbx, rcx

; 1909 :     expr_ty p;
; 1910 :     if (!s) {

  00017	48 85 c9	 test	 rcx, rcx
  0001a	75 25		 jne	 SHORT $LN2@Py_Bytes

; 1911 :         PyErr_SetString(PyExc_ValueError,
; 1912 :                         "field s is required for Bytes");

  0001c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00023	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@CEGOEFPG@field?5s?5is?5required?5for?5Bytes?$AA@
  0002a	e8 00 00 00 00	 call	 PyErr_SetString
$LN5@Py_Bytes:

; 1913 :         return NULL;

  0002f	33 c0		 xor	 eax, eax

; 1920 :     p->lineno = lineno;
; 1921 :     p->col_offset = col_offset;
; 1922 :     return p;
; 1923 : }

  00031	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00036	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0003b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003f	5f		 pop	 rdi
  00040	c3		 ret	 0
$LN2@Py_Bytes:

; 1914 :     }
; 1915 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00041	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  00046	49 8b c9	 mov	 rcx, r9
  00049	e8 00 00 00 00	 call	 PyArena_Malloc

; 1916 :     if (!p)

  0004e	48 85 c0	 test	 rax, rax

; 1917 :         return NULL;

  00051	74 dc		 je	 SHORT $LN5@Py_Bytes

; 1918 :     p->kind = Bytes_kind;
; 1919 :     p->v.Bytes.s = s;

  00053	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx

; 1920 :     p->lineno = lineno;
; 1921 :     p->col_offset = col_offset;
; 1922 :     return p;
; 1923 : }

  00057	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005c	89 70 30	 mov	 DWORD PTR [rax+48], esi
  0005f	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00064	c7 00 12 00 00
	00		 mov	 DWORD PTR [rax], 18
  0006a	89 78 34	 mov	 DWORD PTR [rax+52], edi
  0006d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00071	5f		 pop	 rdi
  00072	c3		 ret	 0
_Py_Bytes ENDP
_TEXT	ENDS
PUBLIC	_Py_Ellipsis
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Ellipsis DD imagerel $LN4
	DD	imagerel $LN4+66
	DD	imagerel $unwind$_Py_Ellipsis
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Ellipsis DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _Py_Ellipsis
_TEXT	SEGMENT
lineno$ = 48
col_offset$ = 56
arena$ = 64
_Py_Ellipsis PROC					; COMDAT

; 1927 : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	8b da		 mov	 ebx, edx
  0000c	8b f9		 mov	 edi, ecx

; 1928 :     expr_ty p;
; 1929 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  0000e	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  00013	49 8b c8	 mov	 rcx, r8
  00016	e8 00 00 00 00	 call	 PyArena_Malloc

; 1930 :     if (!p)

  0001b	48 85 c0	 test	 rax, rax
  0001e	75 0b		 jne	 SHORT $LN1@Py_Ellipsi

; 1935 :     return p;
; 1936 : }

  00020	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00025	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00029	5f		 pop	 rdi
  0002a	c3		 ret	 0
$LN1@Py_Ellipsi:

; 1931 :         return NULL;
; 1932 :     p->kind = Ellipsis_kind;
; 1933 :     p->lineno = lineno;
; 1934 :     p->col_offset = col_offset;

  0002b	89 58 34	 mov	 DWORD PTR [rax+52], ebx

; 1935 :     return p;
; 1936 : }

  0002e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00033	c7 00 13 00 00
	00		 mov	 DWORD PTR [rax], 19
  00039	89 78 30	 mov	 DWORD PTR [rax+48], edi
  0003c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00040	5f		 pop	 rdi
  00041	c3		 ret	 0
_Py_Ellipsis ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@GFDAHIKH@field?5ctx?5is?5required?5for?5Attrib@ ; `string'
PUBLIC	??_C@_0CF@BPLMMPJC@field?5attr?5is?5required?5for?5Attri@ ; `string'
PUBLIC	??_C@_0CG@HGGIECBD@field?5value?5is?5required?5for?5Attr@ ; `string'
PUBLIC	_Py_Attribute
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Attribute DD imagerel $LN8
	DD	imagerel $LN8+190
	DD	imagerel $unwind$_Py_Attribute
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Attribute DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0CE@GFDAHIKH@field?5ctx?5is?5required?5for?5Attrib@
CONST	SEGMENT
??_C@_0CE@GFDAHIKH@field?5ctx?5is?5required?5for?5Attrib@ DB 'field ctx i'
	DB	's required for Attribute', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@BPLMMPJC@field?5attr?5is?5required?5for?5Attri@
CONST	SEGMENT
??_C@_0CF@BPLMMPJC@field?5attr?5is?5required?5for?5Attri@ DB 'field attr '
	DB	'is required for Attribute', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@HGGIECBD@field?5value?5is?5required?5for?5Attr@
CONST	SEGMENT
??_C@_0CG@HGGIECBD@field?5value?5is?5required?5for?5Attr@ DB 'field value'
	DB	' is required for Attribute', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_Attribute
_TEXT	SEGMENT
value$ = 48
attr$ = 56
ctx$ = 64
lineno$ = 72
col_offset$ = 80
arena$ = 88
_Py_Attribute PROC					; COMDAT

; 1941 : {

$LN8:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	41 8b e9	 mov	 ebp, r9d
  00017	41 8b d8	 mov	 ebx, r8d
  0001a	48 8b fa	 mov	 rdi, rdx
  0001d	48 8b f1	 mov	 rsi, rcx

; 1942 :     expr_ty p;
; 1943 :     if (!value) {

  00020	48 85 c9	 test	 rcx, rcx
  00023	75 17		 jne	 SHORT $LN4@Py_Attribu

; 1944 :         PyErr_SetString(PyExc_ValueError,
; 1945 :                         "field value is required for Attribute");

  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@HGGIECBD@field?5value?5is?5required?5for?5Attr@
  00033	e8 00 00 00 00	 call	 PyErr_SetString
$LN7@Py_Attribu:

; 1946 :         return NULL;

  00038	33 c0		 xor	 eax, eax
  0003a	eb 6d		 jmp	 SHORT $LN5@Py_Attribu
$LN4@Py_Attribu:

; 1947 :     }
; 1948 :     if (!attr) {

  0003c	48 85 d2	 test	 rdx, rdx
  0003f	75 17		 jne	 SHORT $LN3@Py_Attribu

; 1949 :         PyErr_SetString(PyExc_ValueError,
; 1950 :                         "field attr is required for Attribute");

  00041	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@BPLMMPJC@field?5attr?5is?5required?5for?5Attri@
  0004f	e8 00 00 00 00	 call	 PyErr_SetString

; 1951 :         return NULL;

  00054	33 c0		 xor	 eax, eax
  00056	eb 51		 jmp	 SHORT $LN5@Py_Attribu
$LN3@Py_Attribu:

; 1952 :     }
; 1953 :     if (!ctx) {

  00058	85 db		 test	 ebx, ebx
  0005a	75 17		 jne	 SHORT $LN2@Py_Attribu

; 1954 :         PyErr_SetString(PyExc_ValueError,
; 1955 :                         "field ctx is required for Attribute");

  0005c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00063	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@GFDAHIKH@field?5ctx?5is?5required?5for?5Attrib@
  0006a	e8 00 00 00 00	 call	 PyErr_SetString

; 1956 :         return NULL;

  0006f	33 c0		 xor	 eax, eax
  00071	eb 36		 jmp	 SHORT $LN5@Py_Attribu
$LN2@Py_Attribu:

; 1957 :     }
; 1958 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00073	48 8b 4c 24 58	 mov	 rcx, QWORD PTR arena$[rsp]
  00078	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  0007d	e8 00 00 00 00	 call	 PyArena_Malloc
  00082	4c 8b d8	 mov	 r11, rax

; 1959 :     if (!p)

  00085	48 85 c0	 test	 rax, rax

; 1960 :         return NULL;

  00088	74 ae		 je	 SHORT $LN7@Py_Attribu

; 1961 :     p->kind = Attribute_kind;

  0008a	c7 00 14 00 00
	00		 mov	 DWORD PTR [rax], 20

; 1962 :     p->v.Attribute.value = value;

  00090	48 89 70 08	 mov	 QWORD PTR [rax+8], rsi

; 1963 :     p->v.Attribute.attr = attr;

  00094	48 89 78 10	 mov	 QWORD PTR [rax+16], rdi

; 1964 :     p->v.Attribute.ctx = ctx;

  00098	89 58 18	 mov	 DWORD PTR [rax+24], ebx

; 1965 :     p->lineno = lineno;

  0009b	89 68 30	 mov	 DWORD PTR [rax+48], ebp

; 1966 :     p->col_offset = col_offset;

  0009e	8b 44 24 50	 mov	 eax, DWORD PTR col_offset$[rsp]
  000a2	41 89 43 34	 mov	 DWORD PTR [r11+52], eax

; 1967 :     return p;

  000a6	49 8b c3	 mov	 rax, r11
$LN5@Py_Attribu:

; 1968 : }

  000a9	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000ae	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000b3	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000b8	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000bc	5f		 pop	 rdi
  000bd	c3		 ret	 0
_Py_Attribute ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@MCNHNJCG@field?5ctx?5is?5required?5for?5Subscr@ ; `string'
PUBLIC	??_C@_0CG@MJNCMDLL@field?5slice?5is?5required?5for?5Subs@ ; `string'
PUBLIC	??_C@_0CG@NBIPODJC@field?5value?5is?5required?5for?5Subs@ ; `string'
PUBLIC	_Py_Subscript
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Subscript DD imagerel $LN8
	DD	imagerel $LN8+190
	DD	imagerel $unwind$_Py_Subscript
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Subscript DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0CE@MCNHNJCG@field?5ctx?5is?5required?5for?5Subscr@
CONST	SEGMENT
??_C@_0CE@MCNHNJCG@field?5ctx?5is?5required?5for?5Subscr@ DB 'field ctx i'
	DB	's required for Subscript', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@MJNCMDLL@field?5slice?5is?5required?5for?5Subs@
CONST	SEGMENT
??_C@_0CG@MJNCMDLL@field?5slice?5is?5required?5for?5Subs@ DB 'field slice'
	DB	' is required for Subscript', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NBIPODJC@field?5value?5is?5required?5for?5Subs@
CONST	SEGMENT
??_C@_0CG@NBIPODJC@field?5value?5is?5required?5for?5Subs@ DB 'field value'
	DB	' is required for Subscript', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_Subscript
_TEXT	SEGMENT
value$ = 48
slice$ = 56
ctx$ = 64
lineno$ = 72
col_offset$ = 80
arena$ = 88
_Py_Subscript PROC					; COMDAT

; 1973 : {

$LN8:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	41 8b e9	 mov	 ebp, r9d
  00017	41 8b d8	 mov	 ebx, r8d
  0001a	48 8b fa	 mov	 rdi, rdx
  0001d	48 8b f1	 mov	 rsi, rcx

; 1974 :     expr_ty p;
; 1975 :     if (!value) {

  00020	48 85 c9	 test	 rcx, rcx
  00023	75 17		 jne	 SHORT $LN4@Py_Subscri

; 1976 :         PyErr_SetString(PyExc_ValueError,
; 1977 :                         "field value is required for Subscript");

  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@NBIPODJC@field?5value?5is?5required?5for?5Subs@
  00033	e8 00 00 00 00	 call	 PyErr_SetString
$LN7@Py_Subscri:

; 1978 :         return NULL;

  00038	33 c0		 xor	 eax, eax
  0003a	eb 6d		 jmp	 SHORT $LN5@Py_Subscri
$LN4@Py_Subscri:

; 1979 :     }
; 1980 :     if (!slice) {

  0003c	48 85 d2	 test	 rdx, rdx
  0003f	75 17		 jne	 SHORT $LN3@Py_Subscri

; 1981 :         PyErr_SetString(PyExc_ValueError,
; 1982 :                         "field slice is required for Subscript");

  00041	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@MJNCMDLL@field?5slice?5is?5required?5for?5Subs@
  0004f	e8 00 00 00 00	 call	 PyErr_SetString

; 1983 :         return NULL;

  00054	33 c0		 xor	 eax, eax
  00056	eb 51		 jmp	 SHORT $LN5@Py_Subscri
$LN3@Py_Subscri:

; 1984 :     }
; 1985 :     if (!ctx) {

  00058	85 db		 test	 ebx, ebx
  0005a	75 17		 jne	 SHORT $LN2@Py_Subscri

; 1986 :         PyErr_SetString(PyExc_ValueError,
; 1987 :                         "field ctx is required for Subscript");

  0005c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00063	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@MCNHNJCG@field?5ctx?5is?5required?5for?5Subscr@
  0006a	e8 00 00 00 00	 call	 PyErr_SetString

; 1988 :         return NULL;

  0006f	33 c0		 xor	 eax, eax
  00071	eb 36		 jmp	 SHORT $LN5@Py_Subscri
$LN2@Py_Subscri:

; 1989 :     }
; 1990 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00073	48 8b 4c 24 58	 mov	 rcx, QWORD PTR arena$[rsp]
  00078	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  0007d	e8 00 00 00 00	 call	 PyArena_Malloc
  00082	4c 8b d8	 mov	 r11, rax

; 1991 :     if (!p)

  00085	48 85 c0	 test	 rax, rax

; 1992 :         return NULL;

  00088	74 ae		 je	 SHORT $LN7@Py_Subscri

; 1993 :     p->kind = Subscript_kind;

  0008a	c7 00 15 00 00
	00		 mov	 DWORD PTR [rax], 21

; 1994 :     p->v.Subscript.value = value;

  00090	48 89 70 08	 mov	 QWORD PTR [rax+8], rsi

; 1995 :     p->v.Subscript.slice = slice;

  00094	48 89 78 10	 mov	 QWORD PTR [rax+16], rdi

; 1996 :     p->v.Subscript.ctx = ctx;

  00098	89 58 18	 mov	 DWORD PTR [rax+24], ebx

; 1997 :     p->lineno = lineno;

  0009b	89 68 30	 mov	 DWORD PTR [rax+48], ebp

; 1998 :     p->col_offset = col_offset;

  0009e	8b 44 24 50	 mov	 eax, DWORD PTR col_offset$[rsp]
  000a2	41 89 43 34	 mov	 DWORD PTR [r11+52], eax

; 1999 :     return p;

  000a6	49 8b c3	 mov	 rax, r11
$LN5@Py_Subscri:

; 2000 : }

  000a9	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000ae	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000b3	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000b8	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000bc	5f		 pop	 rdi
  000bd	c3		 ret	 0
_Py_Subscript ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@CPGFGGKA@field?5ctx?5is?5required?5for?5Starre@ ; `string'
PUBLIC	??_C@_0CE@ODFOICMJ@field?5value?5is?5required?5for?5Star@ ; `string'
PUBLIC	_Py_Starred
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Starred DD imagerel $LN7
	DD	imagerel $LN7+146
	DD	imagerel $unwind$_Py_Starred
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Starred DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0CC@CPGFGGKA@field?5ctx?5is?5required?5for?5Starre@
CONST	SEGMENT
??_C@_0CC@CPGFGGKA@field?5ctx?5is?5required?5for?5Starre@ DB 'field ctx i'
	DB	's required for Starred', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@ODFOICMJ@field?5value?5is?5required?5for?5Star@
CONST	SEGMENT
??_C@_0CE@ODFOICMJ@field?5value?5is?5required?5for?5Star@ DB 'field value'
	DB	' is required for Starred', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_Starred
_TEXT	SEGMENT
value$ = 48
ctx$ = 56
lineno$ = 64
col_offset$ = 72
arena$ = 80
_Py_Starred PROC					; COMDAT

; 2005 : {

$LN7:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	41 8b f1	 mov	 esi, r9d
  00017	41 8b e8	 mov	 ebp, r8d
  0001a	8b da		 mov	 ebx, edx
  0001c	48 8b f9	 mov	 rdi, rcx

; 2006 :     expr_ty p;
; 2007 :     if (!value) {

  0001f	48 85 c9	 test	 rcx, rcx
  00022	75 17		 jne	 SHORT $LN3@Py_Starred

; 2008 :         PyErr_SetString(PyExc_ValueError,
; 2009 :                         "field value is required for Starred");

  00024	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@ODFOICMJ@field?5value?5is?5required?5for?5Star@
  00032	e8 00 00 00 00	 call	 PyErr_SetString
$LN6@Py_Starred:

; 2010 :         return NULL;

  00037	33 c0		 xor	 eax, eax
  00039	eb 42		 jmp	 SHORT $LN4@Py_Starred
$LN3@Py_Starred:

; 2011 :     }
; 2012 :     if (!ctx) {

  0003b	85 d2		 test	 edx, edx
  0003d	75 17		 jne	 SHORT $LN2@Py_Starred

; 2013 :         PyErr_SetString(PyExc_ValueError,
; 2014 :                         "field ctx is required for Starred");

  0003f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@CPGFGGKA@field?5ctx?5is?5required?5for?5Starre@
  0004d	e8 00 00 00 00	 call	 PyErr_SetString

; 2015 :         return NULL;

  00052	33 c0		 xor	 eax, eax
  00054	eb 27		 jmp	 SHORT $LN4@Py_Starred
$LN2@Py_Starred:

; 2016 :     }
; 2017 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00056	48 8b 4c 24 50	 mov	 rcx, QWORD PTR arena$[rsp]
  0005b	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  00060	e8 00 00 00 00	 call	 PyArena_Malloc

; 2018 :     if (!p)

  00065	48 85 c0	 test	 rax, rax

; 2019 :         return NULL;

  00068	74 cd		 je	 SHORT $LN6@Py_Starred

; 2020 :     p->kind = Starred_kind;

  0006a	c7 00 16 00 00
	00		 mov	 DWORD PTR [rax], 22

; 2021 :     p->v.Starred.value = value;

  00070	48 89 78 08	 mov	 QWORD PTR [rax+8], rdi

; 2022 :     p->v.Starred.ctx = ctx;

  00074	89 58 10	 mov	 DWORD PTR [rax+16], ebx

; 2023 :     p->lineno = lineno;

  00077	89 68 30	 mov	 DWORD PTR [rax+48], ebp

; 2024 :     p->col_offset = col_offset;

  0007a	89 70 34	 mov	 DWORD PTR [rax+52], esi
$LN4@Py_Starred:

; 2025 :     return p;
; 2026 : }

  0007d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00082	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00087	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0008c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00090	5f		 pop	 rdi
  00091	c3		 ret	 0
_Py_Starred ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@BOOKAOAN@field?5ctx?5is?5required?5for?5Name?$AA@ ; `string'
PUBLIC	??_C@_0BO@MHABBJCN@field?5id?5is?5required?5for?5Name?$AA@ ; `string'
PUBLIC	_Py_Name
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Name DD imagerel $LN7
	DD	imagerel $LN7+146
	DD	imagerel $unwind$_Py_Name
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Name DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0BP@BOOKAOAN@field?5ctx?5is?5required?5for?5Name?$AA@
CONST	SEGMENT
??_C@_0BP@BOOKAOAN@field?5ctx?5is?5required?5for?5Name?$AA@ DB 'field ctx'
	DB	' is required for Name', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MHABBJCN@field?5id?5is?5required?5for?5Name?$AA@
CONST	SEGMENT
??_C@_0BO@MHABBJCN@field?5id?5is?5required?5for?5Name?$AA@ DB 'field id i'
	DB	's required for Name', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_Name
_TEXT	SEGMENT
id$ = 48
ctx$ = 56
lineno$ = 64
col_offset$ = 72
arena$ = 80
_Py_Name PROC						; COMDAT

; 2031 : {

$LN7:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	41 8b f1	 mov	 esi, r9d
  00017	41 8b e8	 mov	 ebp, r8d
  0001a	8b da		 mov	 ebx, edx
  0001c	48 8b f9	 mov	 rdi, rcx

; 2032 :     expr_ty p;
; 2033 :     if (!id) {

  0001f	48 85 c9	 test	 rcx, rcx
  00022	75 17		 jne	 SHORT $LN3@Py_Name

; 2034 :         PyErr_SetString(PyExc_ValueError,
; 2035 :                         "field id is required for Name");

  00024	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@MHABBJCN@field?5id?5is?5required?5for?5Name?$AA@
  00032	e8 00 00 00 00	 call	 PyErr_SetString
$LN6@Py_Name:

; 2036 :         return NULL;

  00037	33 c0		 xor	 eax, eax
  00039	eb 42		 jmp	 SHORT $LN4@Py_Name
$LN3@Py_Name:

; 2037 :     }
; 2038 :     if (!ctx) {

  0003b	85 d2		 test	 edx, edx
  0003d	75 17		 jne	 SHORT $LN2@Py_Name

; 2039 :         PyErr_SetString(PyExc_ValueError,
; 2040 :                         "field ctx is required for Name");

  0003f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@BOOKAOAN@field?5ctx?5is?5required?5for?5Name?$AA@
  0004d	e8 00 00 00 00	 call	 PyErr_SetString

; 2041 :         return NULL;

  00052	33 c0		 xor	 eax, eax
  00054	eb 27		 jmp	 SHORT $LN4@Py_Name
$LN2@Py_Name:

; 2042 :     }
; 2043 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00056	48 8b 4c 24 50	 mov	 rcx, QWORD PTR arena$[rsp]
  0005b	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  00060	e8 00 00 00 00	 call	 PyArena_Malloc

; 2044 :     if (!p)

  00065	48 85 c0	 test	 rax, rax

; 2045 :         return NULL;

  00068	74 cd		 je	 SHORT $LN6@Py_Name

; 2046 :     p->kind = Name_kind;

  0006a	c7 00 17 00 00
	00		 mov	 DWORD PTR [rax], 23

; 2047 :     p->v.Name.id = id;

  00070	48 89 78 08	 mov	 QWORD PTR [rax+8], rdi

; 2048 :     p->v.Name.ctx = ctx;

  00074	89 58 10	 mov	 DWORD PTR [rax+16], ebx

; 2049 :     p->lineno = lineno;

  00077	89 68 30	 mov	 DWORD PTR [rax+48], ebp

; 2050 :     p->col_offset = col_offset;

  0007a	89 70 34	 mov	 DWORD PTR [rax+52], esi
$LN4@Py_Name:

; 2051 :     return p;
; 2052 : }

  0007d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00082	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00087	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0008c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00090	5f		 pop	 rdi
  00091	c3		 ret	 0
_Py_Name ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@OEPPNIOI@field?5ctx?5is?5required?5for?5List?$AA@ ; `string'
PUBLIC	_Py_List
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_List DD imagerel $LN6
	DD	imagerel $LN6+118
	DD	imagerel $unwind$_Py_List
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_List DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0BP@OEPPNIOI@field?5ctx?5is?5required?5for?5List?$AA@
CONST	SEGMENT
??_C@_0BP@OEPPNIOI@field?5ctx?5is?5required?5for?5List?$AA@ DB 'field ctx'
	DB	' is required for List', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_List
_TEXT	SEGMENT
elts$ = 48
ctx$ = 56
lineno$ = 64
col_offset$ = 72
arena$ = 80
_Py_List PROC						; COMDAT

; 2057 : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	41 8b f9	 mov	 edi, r9d
  00017	41 8b f0	 mov	 esi, r8d
  0001a	8b da		 mov	 ebx, edx
  0001c	48 8b e9	 mov	 rbp, rcx

; 2058 :     expr_ty p;
; 2059 :     if (!ctx) {

  0001f	85 d2		 test	 edx, edx
  00021	75 17		 jne	 SHORT $LN2@Py_List

; 2060 :         PyErr_SetString(PyExc_ValueError,
; 2061 :                         "field ctx is required for List");

  00023	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@OEPPNIOI@field?5ctx?5is?5required?5for?5List?$AA@
  00031	e8 00 00 00 00	 call	 PyErr_SetString
$LN5@Py_List:

; 2062 :         return NULL;

  00036	33 c0		 xor	 eax, eax
  00038	eb 27		 jmp	 SHORT $LN3@Py_List
$LN2@Py_List:

; 2063 :     }
; 2064 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  0003a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR arena$[rsp]
  0003f	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  00044	e8 00 00 00 00	 call	 PyArena_Malloc

; 2065 :     if (!p)

  00049	48 85 c0	 test	 rax, rax

; 2066 :         return NULL;

  0004c	74 e8		 je	 SHORT $LN5@Py_List

; 2067 :     p->kind = List_kind;

  0004e	c7 00 18 00 00
	00		 mov	 DWORD PTR [rax], 24

; 2068 :     p->v.List.elts = elts;

  00054	48 89 68 08	 mov	 QWORD PTR [rax+8], rbp

; 2069 :     p->v.List.ctx = ctx;

  00058	89 58 10	 mov	 DWORD PTR [rax+16], ebx

; 2070 :     p->lineno = lineno;

  0005b	89 70 30	 mov	 DWORD PTR [rax+48], esi

; 2071 :     p->col_offset = col_offset;

  0005e	89 78 34	 mov	 DWORD PTR [rax+52], edi
$LN3@Py_List:

; 2072 :     return p;
; 2073 : }

  00061	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00066	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0006b	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00070	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00074	5f		 pop	 rdi
  00075	c3		 ret	 0
_Py_List ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@PMKKKNCD@field?5ctx?5is?5required?5for?5Tuple?$AA@ ; `string'
PUBLIC	_Py_Tuple
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Tuple DD imagerel $LN6
	DD	imagerel $LN6+118
	DD	imagerel $unwind$_Py_Tuple
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Tuple DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0CA@PMKKKNCD@field?5ctx?5is?5required?5for?5Tuple?$AA@
CONST	SEGMENT
??_C@_0CA@PMKKKNCD@field?5ctx?5is?5required?5for?5Tuple?$AA@ DB 'field ct'
	DB	'x is required for Tuple', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_Tuple
_TEXT	SEGMENT
elts$ = 48
ctx$ = 56
lineno$ = 64
col_offset$ = 72
arena$ = 80
_Py_Tuple PROC						; COMDAT

; 2078 : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	41 8b f9	 mov	 edi, r9d
  00017	41 8b f0	 mov	 esi, r8d
  0001a	8b da		 mov	 ebx, edx
  0001c	48 8b e9	 mov	 rbp, rcx

; 2079 :     expr_ty p;
; 2080 :     if (!ctx) {

  0001f	85 d2		 test	 edx, edx
  00021	75 17		 jne	 SHORT $LN2@Py_Tuple

; 2081 :         PyErr_SetString(PyExc_ValueError,
; 2082 :                         "field ctx is required for Tuple");

  00023	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@PMKKKNCD@field?5ctx?5is?5required?5for?5Tuple?$AA@
  00031	e8 00 00 00 00	 call	 PyErr_SetString
$LN5@Py_Tuple:

; 2083 :         return NULL;

  00036	33 c0		 xor	 eax, eax
  00038	eb 27		 jmp	 SHORT $LN3@Py_Tuple
$LN2@Py_Tuple:

; 2084 :     }
; 2085 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  0003a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR arena$[rsp]
  0003f	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  00044	e8 00 00 00 00	 call	 PyArena_Malloc

; 2086 :     if (!p)

  00049	48 85 c0	 test	 rax, rax

; 2087 :         return NULL;

  0004c	74 e8		 je	 SHORT $LN5@Py_Tuple

; 2088 :     p->kind = Tuple_kind;

  0004e	c7 00 19 00 00
	00		 mov	 DWORD PTR [rax], 25

; 2089 :     p->v.Tuple.elts = elts;

  00054	48 89 68 08	 mov	 QWORD PTR [rax+8], rbp

; 2090 :     p->v.Tuple.ctx = ctx;

  00058	89 58 10	 mov	 DWORD PTR [rax+16], ebx

; 2091 :     p->lineno = lineno;

  0005b	89 70 30	 mov	 DWORD PTR [rax+48], esi

; 2092 :     p->col_offset = col_offset;

  0005e	89 78 34	 mov	 DWORD PTR [rax+52], edi
$LN3@Py_Tuple:

; 2093 :     return p;
; 2094 : }

  00061	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00066	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0006b	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00070	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00074	5f		 pop	 rdi
  00075	c3		 ret	 0
_Py_Tuple ENDP
_TEXT	ENDS
PUBLIC	_Py_Slice
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Slice DD imagerel $LN4
	DD	imagerel $LN4+92
	DD	imagerel $unwind$_Py_Slice
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Slice DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _Py_Slice
_TEXT	SEGMENT
lower$ = 48
upper$ = 56
step$ = 64
arena$ = 72
_Py_Slice PROC						; COMDAT

; 2098 : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fa	 mov	 rdi, rdx
  00012	48 8b f1	 mov	 rsi, rcx

; 2099 :     slice_ty p;
; 2100 :     p = (slice_ty)PyArena_Malloc(arena, sizeof(*p));

  00015	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  0001a	49 8b c9	 mov	 rcx, r9
  0001d	49 8b d8	 mov	 rbx, r8
  00020	e8 00 00 00 00	 call	 PyArena_Malloc

; 2101 :     if (!p)

  00025	48 85 c0	 test	 rax, rax
  00028	75 10		 jne	 SHORT $LN1@Py_Slice

; 2105 :     p->v.Slice.upper = upper;
; 2106 :     p->v.Slice.step = step;
; 2107 :     return p;
; 2108 : }

  0002a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002f	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00034	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00038	5f		 pop	 rdi
  00039	c3		 ret	 0
$LN1@Py_Slice:

; 2102 :         return NULL;
; 2103 :     p->kind = Slice_kind;
; 2104 :     p->v.Slice.lower = lower;

  0003a	48 89 70 08	 mov	 QWORD PTR [rax+8], rsi

; 2105 :     p->v.Slice.upper = upper;
; 2106 :     p->v.Slice.step = step;
; 2107 :     return p;
; 2108 : }

  0003e	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00043	48 89 58 18	 mov	 QWORD PTR [rax+24], rbx
  00047	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004c	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1
  00052	48 89 78 10	 mov	 QWORD PTR [rax+16], rdi
  00056	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005a	5f		 pop	 rdi
  0005b	c3		 ret	 0
_Py_Slice ENDP
_TEXT	ENDS
PUBLIC	_Py_ExtSlice
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_ExtSlice DD imagerel $LN4
	DD	imagerel $LN4+52
	DD	imagerel $unwind$_Py_ExtSlice
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_ExtSlice DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _Py_ExtSlice
_TEXT	SEGMENT
dims$ = 48
arena$ = 56
_Py_ExtSlice PROC					; COMDAT

; 2112 : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b c2	 mov	 rax, rdx
  00009	48 8b d9	 mov	 rbx, rcx

; 2113 :     slice_ty p;
; 2114 :     p = (slice_ty)PyArena_Malloc(arena, sizeof(*p));

  0000c	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  00011	48 8b c8	 mov	 rcx, rax
  00014	e8 00 00 00 00	 call	 PyArena_Malloc

; 2115 :     if (!p)

  00019	48 85 c0	 test	 rax, rax
  0001c	75 06		 jne	 SHORT $LN1@Py_ExtSlic

; 2119 :     return p;
; 2120 : }

  0001e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00022	5b		 pop	 rbx
  00023	c3		 ret	 0
$LN1@Py_ExtSlic:

; 2116 :         return NULL;
; 2117 :     p->kind = ExtSlice_kind;

  00024	c7 00 02 00 00
	00		 mov	 DWORD PTR [rax], 2

; 2118 :     p->v.ExtSlice.dims = dims;

  0002a	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx

; 2119 :     return p;
; 2120 : }

  0002e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00032	5b		 pop	 rbx
  00033	c3		 ret	 0
_Py_ExtSlice ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@DANDMJEF@field?5value?5is?5required?5for?5Inde@ ; `string'
PUBLIC	_Py_Index
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Index DD imagerel $LN6
	DD	imagerel $LN6+78
	DD	imagerel $unwind$_Py_Index
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Index DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0CC@DANDMJEF@field?5value?5is?5required?5for?5Inde@
CONST	SEGMENT
??_C@_0CC@DANDMJEF@field?5value?5is?5required?5for?5Inde@ DB 'field value'
	DB	' is required for Index', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_Index
_TEXT	SEGMENT
value$ = 48
arena$ = 56
_Py_Index PROC						; COMDAT

; 2124 : {

$LN6:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b c2	 mov	 rax, rdx
  00009	48 8b d9	 mov	 rbx, rcx

; 2125 :     slice_ty p;
; 2126 :     if (!value) {

  0000c	48 85 c9	 test	 rcx, rcx
  0000f	75 1b		 jne	 SHORT $LN2@Py_Index

; 2127 :         PyErr_SetString(PyExc_ValueError,
; 2128 :                         "field value is required for Index");

  00011	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00018	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@DANDMJEF@field?5value?5is?5required?5for?5Inde@
  0001f	e8 00 00 00 00	 call	 PyErr_SetString
$LN5@Py_Index:

; 2129 :         return NULL;

  00024	33 c0		 xor	 eax, eax

; 2136 :     return p;
; 2137 : }

  00026	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002a	5b		 pop	 rbx
  0002b	c3		 ret	 0
$LN2@Py_Index:

; 2130 :     }
; 2131 :     p = (slice_ty)PyArena_Malloc(arena, sizeof(*p));

  0002c	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 PyArena_Malloc

; 2132 :     if (!p)

  00039	48 85 c0	 test	 rax, rax

; 2133 :         return NULL;

  0003c	74 e6		 je	 SHORT $LN5@Py_Index

; 2134 :     p->kind = Index_kind;

  0003e	c7 00 03 00 00
	00		 mov	 DWORD PTR [rax], 3

; 2135 :     p->v.Index.value = value;

  00044	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx

; 2136 :     return p;
; 2137 : }

  00048	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004c	5b		 pop	 rbx
  0004d	c3		 ret	 0
_Py_Index ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@GMPBFBMA@field?5iter?5is?5required?5for?5compr@ ; `string'
PUBLIC	??_C@_0CL@HFHKBLHJ@field?5target?5is?5required?5for?5com@ ; `string'
PUBLIC	_Py_comprehension
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_comprehension DD imagerel $LN7
	DD	imagerel $LN7+153
	DD	imagerel $unwind$_Py_comprehension
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_comprehension DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0CJ@GMPBFBMA@field?5iter?5is?5required?5for?5compr@
CONST	SEGMENT
??_C@_0CJ@GMPBFBMA@field?5iter?5is?5required?5for?5compr@ DB 'field iter '
	DB	'is required for comprehension', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@HFHKBLHJ@field?5target?5is?5required?5for?5com@
CONST	SEGMENT
??_C@_0CL@HFHKBLHJ@field?5target?5is?5required?5for?5com@ DB 'field targe'
	DB	't is required for comprehension', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_comprehension
_TEXT	SEGMENT
target$ = 48
iter$ = 56
ifs$ = 64
arena$ = 72
_Py_comprehension PROC					; COMDAT

; 2141 : {

$LN7:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f0	 mov	 rsi, r8
  00012	48 8b da	 mov	 rbx, rdx
  00015	48 8b f9	 mov	 rdi, rcx

; 2142 :     comprehension_ty p;
; 2143 :     if (!target) {

  00018	48 85 c9	 test	 rcx, rcx
  0001b	75 25		 jne	 SHORT $LN3@Py_compreh

; 2144 :         PyErr_SetString(PyExc_ValueError,
; 2145 :                         "field target is required for comprehension");

  0001d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@HFHKBLHJ@field?5target?5is?5required?5for?5com@
  0002b	e8 00 00 00 00	 call	 PyErr_SetString
$LN6@Py_compreh:

; 2146 :         return NULL;

  00030	33 c0		 xor	 eax, eax

; 2158 :     p->ifs = ifs;
; 2159 :     return p;
; 2160 : }

  00032	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00037	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0003c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00040	5f		 pop	 rdi
  00041	c3		 ret	 0
$LN3@Py_compreh:

; 2147 :     }
; 2148 :     if (!iter) {

  00042	48 85 d2	 test	 rdx, rdx
  00045	75 25		 jne	 SHORT $LN2@Py_compreh

; 2149 :         PyErr_SetString(PyExc_ValueError,
; 2150 :                         "field iter is required for comprehension");

  00047	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@GMPBFBMA@field?5iter?5is?5required?5for?5compr@
  00055	e8 00 00 00 00	 call	 PyErr_SetString

; 2151 :         return NULL;

  0005a	33 c0		 xor	 eax, eax

; 2158 :     p->ifs = ifs;
; 2159 :     return p;
; 2160 : }

  0005c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00061	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00066	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006a	5f		 pop	 rdi
  0006b	c3		 ret	 0
$LN2@Py_compreh:

; 2152 :     }
; 2153 :     p = (comprehension_ty)PyArena_Malloc(arena, sizeof(*p));

  0006c	ba 18 00 00 00	 mov	 edx, 24
  00071	49 8b c9	 mov	 rcx, r9
  00074	e8 00 00 00 00	 call	 PyArena_Malloc

; 2154 :     if (!p)

  00079	48 85 c0	 test	 rax, rax

; 2155 :         return NULL;

  0007c	74 b2		 je	 SHORT $LN6@Py_compreh

; 2156 :     p->target = target;
; 2157 :     p->iter = iter;

  0007e	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx

; 2158 :     p->ifs = ifs;
; 2159 :     return p;
; 2160 : }

  00082	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00087	48 89 70 10	 mov	 QWORD PTR [rax+16], rsi
  0008b	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00090	48 89 38	 mov	 QWORD PTR [rax], rdi
  00093	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00097	5f		 pop	 rdi
  00098	c3		 ret	 0
_Py_comprehension ENDP
_TEXT	ENDS
PUBLIC	_Py_ExceptHandler
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_ExceptHandler DD imagerel $LN4
	DD	imagerel $LN4+108
	DD	imagerel $unwind$_Py_ExceptHandler
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_ExceptHandler DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _Py_ExceptHandler
_TEXT	SEGMENT
type$ = 48
name$ = 56
body$ = 64
lineno$ = 72
col_offset$ = 80
arena$ = 88
_Py_ExceptHandler PROC					; COMDAT

; 2165 : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b e9	 mov	 rbp, rcx

; 2166 :     excepthandler_ty p;
; 2167 :     p = (excepthandler_ty)PyArena_Malloc(arena, sizeof(*p));

  00017	48 8b 4c 24 58	 mov	 rcx, QWORD PTR arena$[rsp]
  0001c	48 8b f2	 mov	 rsi, rdx
  0001f	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  00024	41 8b d9	 mov	 ebx, r9d
  00027	49 8b f8	 mov	 rdi, r8
  0002a	e8 00 00 00 00	 call	 PyArena_Malloc
  0002f	4c 8b d8	 mov	 r11, rax

; 2168 :     if (!p)

  00032	48 85 c0	 test	 rax, rax
  00035	74 20		 je	 SHORT $LN2@Py_ExceptH
$LN1@Py_ExceptH:

; 2169 :         return NULL;
; 2170 :     p->kind = ExceptHandler_kind;

  00037	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1

; 2171 :     p->v.ExceptHandler.type = type;

  0003d	48 89 68 08	 mov	 QWORD PTR [rax+8], rbp

; 2172 :     p->v.ExceptHandler.name = name;

  00041	48 89 70 10	 mov	 QWORD PTR [rax+16], rsi

; 2173 :     p->v.ExceptHandler.body = body;

  00045	48 89 78 18	 mov	 QWORD PTR [rax+24], rdi

; 2174 :     p->lineno = lineno;

  00049	89 58 20	 mov	 DWORD PTR [rax+32], ebx

; 2175 :     p->col_offset = col_offset;

  0004c	8b 44 24 50	 mov	 eax, DWORD PTR col_offset$[rsp]
  00050	41 89 43 24	 mov	 DWORD PTR [r11+36], eax

; 2176 :     return p;

  00054	49 8b c3	 mov	 rax, r11
$LN2@Py_ExceptH:

; 2177 : }

  00057	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005c	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00061	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00066	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006a	5f		 pop	 rdi
  0006b	c3		 ret	 0
_Py_ExceptHandler ENDP
_TEXT	ENDS
PUBLIC	_Py_arguments
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_arguments DD imagerel $LN4
	DD	imagerel $LN4+130
	DD	imagerel $unwind$_Py_arguments
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_arguments DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _Py_arguments
_TEXT	SEGMENT
args$ = 48
vararg$ = 56
varargannotation$ = 64
kwonlyargs$ = 72
kwarg$ = 80
kwargannotation$ = 88
defaults$ = 96
kw_defaults$ = 104
arena$ = 112
_Py_arguments PROC					; COMDAT

; 2183 : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b e9	 mov	 rbp, rcx

; 2184 :     arguments_ty p;
; 2185 :     p = (arguments_ty)PyArena_Malloc(arena, sizeof(*p));

  00017	48 8b 4c 24 70	 mov	 rcx, QWORD PTR arena$[rsp]
  0001c	48 8b f2	 mov	 rsi, rdx
  0001f	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00024	49 8b d9	 mov	 rbx, r9
  00027	49 8b f8	 mov	 rdi, r8
  0002a	e8 00 00 00 00	 call	 PyArena_Malloc
  0002f	4c 8b d8	 mov	 r11, rax

; 2186 :     if (!p)

  00032	48 85 c0	 test	 rax, rax
  00035	74 36		 je	 SHORT $LN2@Py_argumen
$LN1@Py_argumen:

; 2187 :         return NULL;
; 2188 :     p->args = args;

  00037	48 89 28	 mov	 QWORD PTR [rax], rbp

; 2189 :     p->vararg = vararg;

  0003a	48 89 70 08	 mov	 QWORD PTR [rax+8], rsi

; 2190 :     p->varargannotation = varargannotation;

  0003e	48 89 78 10	 mov	 QWORD PTR [rax+16], rdi

; 2191 :     p->kwonlyargs = kwonlyargs;

  00042	48 89 58 18	 mov	 QWORD PTR [rax+24], rbx

; 2192 :     p->kwarg = kwarg;

  00046	48 8b 44 24 50	 mov	 rax, QWORD PTR kwarg$[rsp]
  0004b	49 89 43 20	 mov	 QWORD PTR [r11+32], rax

; 2193 :     p->kwargannotation = kwargannotation;

  0004f	48 8b 44 24 58	 mov	 rax, QWORD PTR kwargannotation$[rsp]
  00054	49 89 43 28	 mov	 QWORD PTR [r11+40], rax

; 2194 :     p->defaults = defaults;

  00058	48 8b 44 24 60	 mov	 rax, QWORD PTR defaults$[rsp]
  0005d	49 89 43 30	 mov	 QWORD PTR [r11+48], rax

; 2195 :     p->kw_defaults = kw_defaults;

  00061	48 8b 44 24 68	 mov	 rax, QWORD PTR kw_defaults$[rsp]
  00066	49 89 43 38	 mov	 QWORD PTR [r11+56], rax

; 2196 :     return p;

  0006a	49 8b c3	 mov	 rax, r11
$LN2@Py_argumen:

; 2197 : }

  0006d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00072	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00077	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0007c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00080	5f		 pop	 rdi
  00081	c3		 ret	 0
_Py_arguments ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@ILGGFGPK@field?5arg?5is?5required?5for?5arg?$AA@ ; `string'
PUBLIC	_Py_arg
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_arg DD imagerel $LN6
	DD	imagerel $LN6+89
	DD	imagerel $unwind$_Py_arg
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_arg DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0BO@ILGGFGPK@field?5arg?5is?5required?5for?5arg?$AA@
CONST	SEGMENT
??_C@_0BO@ILGGFGPK@field?5arg?5is?5required?5for?5arg?$AA@ DB 'field arg '
	DB	'is required for arg', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_arg
_TEXT	SEGMENT
arg$ = 48
annotation$ = 56
arena$ = 64
_Py_arg	PROC						; COMDAT

; 2201 : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fa	 mov	 rdi, rdx
  0000d	48 8b d9	 mov	 rbx, rcx

; 2202 :     arg_ty p;
; 2203 :     if (!arg) {

  00010	48 85 c9	 test	 rcx, rcx
  00013	75 20		 jne	 SHORT $LN2@Py_arg

; 2204 :         PyErr_SetString(PyExc_ValueError,
; 2205 :                         "field arg is required for arg");

  00015	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@ILGGFGPK@field?5arg?5is?5required?5for?5arg?$AA@
  00023	e8 00 00 00 00	 call	 PyErr_SetString
$LN5@Py_arg:

; 2206 :         return NULL;

  00028	33 c0		 xor	 eax, eax

; 2212 :     p->annotation = annotation;
; 2213 :     return p;
; 2214 : }

  0002a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00033	5f		 pop	 rdi
  00034	c3		 ret	 0
$LN2@Py_arg:

; 2207 :     }
; 2208 :     p = (arg_ty)PyArena_Malloc(arena, sizeof(*p));

  00035	ba 10 00 00 00	 mov	 edx, 16
  0003a	49 8b c8	 mov	 rcx, r8
  0003d	e8 00 00 00 00	 call	 PyArena_Malloc

; 2209 :     if (!p)

  00042	48 85 c0	 test	 rax, rax

; 2210 :         return NULL;

  00045	74 e1		 je	 SHORT $LN5@Py_arg

; 2211 :     p->arg = arg;

  00047	48 89 18	 mov	 QWORD PTR [rax], rbx

; 2212 :     p->annotation = annotation;
; 2213 :     return p;
; 2214 : }

  0004a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004f	48 89 78 08	 mov	 QWORD PTR [rax+8], rdi
  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5f		 pop	 rdi
  00058	c3		 ret	 0
_Py_arg	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@OIKAGIEK@field?5value?5is?5required?5for?5keyw@ ; `string'
PUBLIC	??_C@_0CC@LMBBCGDM@field?5arg?5is?5required?5for?5keywor@ ; `string'
PUBLIC	_Py_keyword
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_keyword DD imagerel $LN7
	DD	imagerel $LN7+126
	DD	imagerel $unwind$_Py_keyword
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_keyword DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CE@OIKAGIEK@field?5value?5is?5required?5for?5keyw@
CONST	SEGMENT
??_C@_0CE@OIKAGIEK@field?5value?5is?5required?5for?5keyw@ DB 'field value'
	DB	' is required for keyword', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@LMBBCGDM@field?5arg?5is?5required?5for?5keywor@
CONST	SEGMENT
??_C@_0CC@LMBBCGDM@field?5arg?5is?5required?5for?5keywor@ DB 'field arg i'
	DB	's required for keyword', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_keyword
_TEXT	SEGMENT
arg$ = 48
value$ = 56
arena$ = 64
_Py_keyword PROC					; COMDAT

; 2218 : {

$LN7:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	48 8b f9	 mov	 rdi, rcx

; 2219 :     keyword_ty p;
; 2220 :     if (!arg) {

  00010	48 85 c9	 test	 rcx, rcx
  00013	75 20		 jne	 SHORT $LN3@Py_keyword

; 2221 :         PyErr_SetString(PyExc_ValueError,
; 2222 :                         "field arg is required for keyword");

  00015	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@LMBBCGDM@field?5arg?5is?5required?5for?5keywor@
  00023	e8 00 00 00 00	 call	 PyErr_SetString
$LN6@Py_keyword:

; 2223 :         return NULL;

  00028	33 c0		 xor	 eax, eax

; 2235 :     return p;
; 2236 : }

  0002a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00033	5f		 pop	 rdi
  00034	c3		 ret	 0
$LN3@Py_keyword:

; 2224 :     }
; 2225 :     if (!value) {

  00035	48 85 d2	 test	 rdx, rdx
  00038	75 20		 jne	 SHORT $LN2@Py_keyword

; 2226 :         PyErr_SetString(PyExc_ValueError,
; 2227 :                         "field value is required for keyword");

  0003a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00041	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@OIKAGIEK@field?5value?5is?5required?5for?5keyw@
  00048	e8 00 00 00 00	 call	 PyErr_SetString

; 2228 :         return NULL;

  0004d	33 c0		 xor	 eax, eax

; 2235 :     return p;
; 2236 : }

  0004f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00054	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00058	5f		 pop	 rdi
  00059	c3		 ret	 0
$LN2@Py_keyword:

; 2229 :     }
; 2230 :     p = (keyword_ty)PyArena_Malloc(arena, sizeof(*p));

  0005a	ba 10 00 00 00	 mov	 edx, 16
  0005f	49 8b c8	 mov	 rcx, r8
  00062	e8 00 00 00 00	 call	 PyArena_Malloc

; 2231 :     if (!p)

  00067	48 85 c0	 test	 rax, rax

; 2232 :         return NULL;

  0006a	74 bc		 je	 SHORT $LN6@Py_keyword

; 2233 :     p->arg = arg;
; 2234 :     p->value = value;

  0006c	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx

; 2235 :     return p;
; 2236 : }

  00070	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00075	48 89 38	 mov	 QWORD PTR [rax], rdi
  00078	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007c	5f		 pop	 rdi
  0007d	c3		 ret	 0
_Py_keyword ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@BLGPEBLD@field?5name?5is?5required?5for?5alias@ ; `string'
PUBLIC	_Py_alias
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_alias DD imagerel $LN6
	DD	imagerel $LN6+89
	DD	imagerel $unwind$_Py_alias
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_alias DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CB@BLGPEBLD@field?5name?5is?5required?5for?5alias@
CONST	SEGMENT
??_C@_0CB@BLGPEBLD@field?5name?5is?5required?5for?5alias@ DB 'field name '
	DB	'is required for alias', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_alias
_TEXT	SEGMENT
name$ = 48
asname$ = 56
arena$ = 64
_Py_alias PROC						; COMDAT

; 2240 : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fa	 mov	 rdi, rdx
  0000d	48 8b d9	 mov	 rbx, rcx

; 2241 :     alias_ty p;
; 2242 :     if (!name) {

  00010	48 85 c9	 test	 rcx, rcx
  00013	75 20		 jne	 SHORT $LN2@Py_alias

; 2243 :         PyErr_SetString(PyExc_ValueError,
; 2244 :                         "field name is required for alias");

  00015	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@BLGPEBLD@field?5name?5is?5required?5for?5alias@
  00023	e8 00 00 00 00	 call	 PyErr_SetString
$LN5@Py_alias:

; 2245 :         return NULL;

  00028	33 c0		 xor	 eax, eax

; 2251 :     p->asname = asname;
; 2252 :     return p;
; 2253 : }

  0002a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00033	5f		 pop	 rdi
  00034	c3		 ret	 0
$LN2@Py_alias:

; 2246 :     }
; 2247 :     p = (alias_ty)PyArena_Malloc(arena, sizeof(*p));

  00035	ba 10 00 00 00	 mov	 edx, 16
  0003a	49 8b c8	 mov	 rcx, r8
  0003d	e8 00 00 00 00	 call	 PyArena_Malloc

; 2248 :     if (!p)

  00042	48 85 c0	 test	 rax, rax

; 2249 :         return NULL;

  00045	74 e1		 je	 SHORT $LN5@Py_alias

; 2250 :     p->name = name;

  00047	48 89 18	 mov	 QWORD PTR [rax], rbx

; 2251 :     p->asname = asname;
; 2252 :     return p;
; 2253 : }

  0004a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004f	48 89 78 08	 mov	 QWORD PTR [rax+8], rdi
  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5f		 pop	 rdi
  00058	c3		 ret	 0
_Py_alias ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CM@OMGIOCCH@field?5context_expr?5is?5required?5f@ ; `string'
PUBLIC	_Py_withitem
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_withitem DD imagerel $LN6
	DD	imagerel $LN6+89
	DD	imagerel $unwind$_Py_withitem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_withitem DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CM@OMGIOCCH@field?5context_expr?5is?5required?5f@
CONST	SEGMENT
??_C@_0CM@OMGIOCCH@field?5context_expr?5is?5required?5f@ DB 'field contex'
	DB	't_expr is required for withitem', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_withitem
_TEXT	SEGMENT
context_expr$ = 48
optional_vars$ = 56
arena$ = 64
_Py_withitem PROC					; COMDAT

; 2257 : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fa	 mov	 rdi, rdx
  0000d	48 8b d9	 mov	 rbx, rcx

; 2258 :     withitem_ty p;
; 2259 :     if (!context_expr) {

  00010	48 85 c9	 test	 rcx, rcx
  00013	75 20		 jne	 SHORT $LN2@Py_withite

; 2260 :         PyErr_SetString(PyExc_ValueError,
; 2261 :                         "field context_expr is required for withitem");

  00015	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@OMGIOCCH@field?5context_expr?5is?5required?5f@
  00023	e8 00 00 00 00	 call	 PyErr_SetString
$LN5@Py_withite:

; 2262 :         return NULL;

  00028	33 c0		 xor	 eax, eax

; 2268 :     p->optional_vars = optional_vars;
; 2269 :     return p;
; 2270 : }

  0002a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00033	5f		 pop	 rdi
  00034	c3		 ret	 0
$LN2@Py_withite:

; 2263 :     }
; 2264 :     p = (withitem_ty)PyArena_Malloc(arena, sizeof(*p));

  00035	ba 10 00 00 00	 mov	 edx, 16
  0003a	49 8b c8	 mov	 rcx, r8
  0003d	e8 00 00 00 00	 call	 PyArena_Malloc

; 2265 :     if (!p)

  00042	48 85 c0	 test	 rax, rax

; 2266 :         return NULL;

  00045	74 e1		 je	 SHORT $LN5@Py_withite

; 2267 :     p->context_expr = context_expr;

  00047	48 89 18	 mov	 QWORD PTR [rax], rbx

; 2268 :     p->optional_vars = optional_vars;
; 2269 :     return p;
; 2270 : }

  0004a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004f	48 89 78 08	 mov	 QWORD PTR [rax+8], rdi
  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5f		 pop	 rdi
  00058	c3		 ret	 0
_Py_withitem ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@MIEHMAD@unknown?5expr_context?5found?$AA@ ; `string'
EXTRN	PyExc_SystemError:QWORD
EXTRN	__ImageBase:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$ast2obj_expr_context DD imagerel ast2obj_expr_context
	DD	imagerel ast2obj_expr_context+232
	DD	imagerel $unwind$ast2obj_expr_context
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_expr_context DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BL@MIEHMAD@unknown?5expr_context?5found?$AA@
CONST	SEGMENT
??_C@_0BL@MIEHMAD@unknown?5expr_context?5found?$AA@ DB 'unknown expr_cont'
	DB	'ext found', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ast2obj_expr_context
_TEXT	SEGMENT
o$ = 48
ast2obj_expr_context PROC				; COMDAT

; 3063 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3064 :     switch(o) {

  00004	ff c9		 dec	 ecx
  00006	83 f9 05	 cmp	 ecx, 5
  00009	0f 87 a6 00 00
	00		 ja	 $LN1@ast2obj_ex
  0000f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:__ImageBase
  00016	48 63 c1	 movsxd	 rax, ecx
  00019	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR $LN12@ast2obj_ex[rdx+rax*4]
  00020	48 03 ca	 add	 rcx, rdx
  00023	ff e1		 jmp	 rcx
$LN7@ast2obj_ex:

; 3065 :         case Load:
; 3066 :             Py_INCREF(Load_singleton);

  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Load_singleton
  0002c	e8 00 00 00 00	 call	 _Py_IncRef

; 3067 :             return Load_singleton;

  00031	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Load_singleton

; 3087 :     }
; 3088 : }

  00038	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003c	c3		 ret	 0
$LN6@ast2obj_ex:

; 3068 :         case Store:
; 3069 :             Py_INCREF(Store_singleton);

  0003d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Store_singleton
  00044	e8 00 00 00 00	 call	 _Py_IncRef

; 3070 :             return Store_singleton;

  00049	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Store_singleton

; 3087 :     }
; 3088 : }

  00050	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00054	c3		 ret	 0
$LN5@ast2obj_ex:

; 3071 :         case Del:
; 3072 :             Py_INCREF(Del_singleton);

  00055	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Del_singleton
  0005c	e8 00 00 00 00	 call	 _Py_IncRef

; 3073 :             return Del_singleton;

  00061	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Del_singleton

; 3087 :     }
; 3088 : }

  00068	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006c	c3		 ret	 0
$LN4@ast2obj_ex:

; 3074 :         case AugLoad:
; 3075 :             Py_INCREF(AugLoad_singleton);

  0006d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR AugLoad_singleton
  00074	e8 00 00 00 00	 call	 _Py_IncRef

; 3076 :             return AugLoad_singleton;

  00079	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR AugLoad_singleton

; 3087 :     }
; 3088 : }

  00080	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00084	c3		 ret	 0
$LN3@ast2obj_ex:

; 3077 :         case AugStore:
; 3078 :             Py_INCREF(AugStore_singleton);

  00085	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR AugStore_singleton
  0008c	e8 00 00 00 00	 call	 _Py_IncRef

; 3079 :             return AugStore_singleton;

  00091	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR AugStore_singleton

; 3087 :     }
; 3088 : }

  00098	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0009c	c3		 ret	 0
$LN2@ast2obj_ex:

; 3080 :         case Param:
; 3081 :             Py_INCREF(Param_singleton);

  0009d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Param_singleton
  000a4	e8 00 00 00 00	 call	 _Py_IncRef

; 3082 :             return Param_singleton;

  000a9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Param_singleton

; 3087 :     }
; 3088 : }

  000b0	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000b4	c3		 ret	 0
$LN1@ast2obj_ex:

; 3083 :         default:
; 3084 :             /* should never happen, but just in case ... */
; 3085 :             PyErr_Format(PyExc_SystemError, "unknown expr_context found");

  000b5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  000bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@MIEHMAD@unknown?5expr_context?5found?$AA@
  000c3	e8 00 00 00 00	 call	 PyErr_Format

; 3086 :             return NULL;

  000c8	33 c0		 xor	 eax, eax

; 3087 :     }
; 3088 : }

  000ca	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000ce	c3		 ret	 0
  000cf	90		 npad	 1
$LN12@ast2obj_ex:
  000d0	00 00 00 00	 DD	 $LN7@ast2obj_ex
  000d4	00 00 00 00	 DD	 $LN6@ast2obj_ex
  000d8	00 00 00 00	 DD	 $LN5@ast2obj_ex
  000dc	00 00 00 00	 DD	 $LN4@ast2obj_ex
  000e0	00 00 00 00	 DD	 $LN3@ast2obj_ex
  000e4	00 00 00 00	 DD	 $LN2@ast2obj_ex
ast2obj_expr_context ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$ast2obj_slice DD imagerel ast2obj_slice
	DD	imagerel ast2obj_slice+551
	DD	imagerel $unwind$ast2obj_slice
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_slice DD 087701H
	DD	095477H
	DD	083472H
	DD	0a640aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\python-ast.c
xdata	ENDS
;	COMDAT ast2obj_slice
_TEXT	SEGMENT
_o$ = 64
ast2obj_slice PROC					; COMDAT

; 3091 : {

  00000	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 3092 :     slice_ty o = (slice_ty)_o;
; 3093 :     PyObject *result = NULL, *value = NULL;

  0000a	33 ff		 xor	 edi, edi
  0000c	48 8b f1	 mov	 rsi, rcx

; 3094 :     if (!o) {

  0000f	48 85 c9	 test	 rcx, rcx
  00012	75 57		 jne	 SHORT $LN27@ast2obj_sl

; 3095 :         Py_INCREF(Py_None);

  00014	e8 00 00 00 00	 call	 _Py_PXCTX
  00019	85 c0		 test	 eax, eax
  0001b	75 3c		 jne	 SHORT $LN31@ast2obj_sl
  0001d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00032	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00038	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00040	e8 00 00 00 00	 call	 _PyParallel_Guard
  00045	85 c0		 test	 eax, eax
  00047	75 09		 jne	 SHORT $LN30@ast2obj_sl
  00049	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00050	74 07		 je	 SHORT $LN31@ast2obj_sl
$LN30@ast2obj_sl:
  00052	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN31@ast2obj_sl:

; 3096 :         return Py_None;

  00059	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 3143 : }

  00060	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00065	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00069	5f		 pop	 rdi
  0006a	c3		 ret	 0
$LN27@ast2obj_sl:

; 3097 :     }
; 3098 : 
; 3099 :     switch (o->kind) {

  0006b	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0006d	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00072	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp
  00077	ff c9		 dec	 ecx
  00079	0f 84 b5 00 00
	00		 je	 $LN24@ast2obj_sl
  0007f	ff c9		 dec	 ecx
  00081	74 58		 je	 SHORT $LN16@ast2obj_sl
  00083	ff c9		 dec	 ecx
  00085	0f 85 70 01 00
	00		 jne	 $LN25@ast2obj_sl

; 3128 :     case Index_kind:
; 3129 :         result = PyType_GenericNew(Index_type, NULL, NULL);

  0008b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Index_type
  00092	45 33 c0	 xor	 r8d, r8d
  00095	33 d2		 xor	 edx, edx
  00097	e8 00 00 00 00	 call	 PyType_GenericNew
  0009c	48 8b f8	 mov	 rdi, rax

; 3130 :         if (!result) goto failed;

  0009f	48 85 c0	 test	 rax, rax
  000a2	0f 84 68 01 00
	00		 je	 $LN3@ast2obj_sl

; 3131 :         value = ast2obj_expr(o->v.Index.value);

  000a8	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  000ac	e8 00 00 00 00	 call	 ast2obj_expr
  000b1	48 8b d8	 mov	 rbx, rax

; 3132 :         if (!value) goto failed;

  000b4	48 85 c0	 test	 rax, rax
  000b7	0f 84 4b 01 00
	00		 je	 $LN7@ast2obj_sl

; 3133 :         if (_PyObject_SetAttrId(result, &PyId_value, value) == -1)

  000bd	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  000c4	65 48 8b 0c 25
	58 00 00 00	 mov	 rcx, QWORD PTR gs:88
  000cd	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_value
  000d2	4a 03 14 c1	 add	 rdx, QWORD PTR [rcx+r8*8]

; 3134 :             goto failed;
; 3135 :         Py_DECREF(value);
; 3136 :         break;

  000d6	e9 08 01 00 00	 jmp	 $LN37@ast2obj_sl
$LN16@ast2obj_sl:

; 3118 :         break;
; 3119 :     case ExtSlice_kind:
; 3120 :         result = PyType_GenericNew(ExtSlice_type, NULL, NULL);

  000db	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ExtSlice_type
  000e2	45 33 c0	 xor	 r8d, r8d
  000e5	33 d2		 xor	 edx, edx
  000e7	e8 00 00 00 00	 call	 PyType_GenericNew
  000ec	48 8b f8	 mov	 rdi, rax

; 3121 :         if (!result) goto failed;

  000ef	48 85 c0	 test	 rax, rax
  000f2	0f 84 18 01 00
	00		 je	 $LN3@ast2obj_sl

; 3122 :         value = ast2obj_list(o->v.ExtSlice.dims, ast2obj_slice);

  000f8	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  000fc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_slice
  00103	e8 00 00 00 00	 call	 ast2obj_list
  00108	48 8b d8	 mov	 rbx, rax

; 3123 :         if (!value) goto failed;

  0010b	48 85 c0	 test	 rax, rax
  0010e	0f 84 f4 00 00
	00		 je	 $LN7@ast2obj_sl

; 3124 :         if (_PyObject_SetAttrId(result, &PyId_dims, value) == -1)

  00114	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0011a	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00123	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_dims
  00128	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  0012c	4c 8b c3	 mov	 r8, rbx

; 3125 :             goto failed;
; 3126 :         Py_DECREF(value);
; 3127 :         break;

  0012f	e9 b2 00 00 00	 jmp	 $LN38@ast2obj_sl
$LN24@ast2obj_sl:

; 3100 :     case Slice_kind:
; 3101 :         result = PyType_GenericNew(Slice_type, NULL, NULL);

  00134	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Slice_type
  0013b	45 33 c0	 xor	 r8d, r8d
  0013e	33 d2		 xor	 edx, edx
  00140	e8 00 00 00 00	 call	 PyType_GenericNew
  00145	48 8b f8	 mov	 rdi, rax

; 3102 :         if (!result) goto failed;

  00148	48 85 c0	 test	 rax, rax
  0014b	0f 84 bf 00 00
	00		 je	 $LN3@ast2obj_sl

; 3103 :         value = ast2obj_expr(o->v.Slice.lower);

  00151	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  00155	e8 00 00 00 00	 call	 ast2obj_expr
  0015a	48 8b d8	 mov	 rbx, rax

; 3104 :         if (!value) goto failed;

  0015d	48 85 c0	 test	 rax, rax
  00160	0f 84 a2 00 00
	00		 je	 $LN7@ast2obj_sl

; 3105 :         if (_PyObject_SetAttrId(result, &PyId_lower, value) == -1)

  00166	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0016c	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00175	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_lower
  0017a	48 8b 2c c8	 mov	 rbp, QWORD PTR [rax+rcx*8]
  0017e	4c 8b c3	 mov	 r8, rbx
  00181	48 8b cf	 mov	 rcx, rdi
  00184	48 03 d5	 add	 rdx, rbp
  00187	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0018c	83 f8 ff	 cmp	 eax, -1
  0018f	74 6f		 je	 SHORT $failed$24113

; 3106 :             goto failed;
; 3107 :         Py_DECREF(value);

  00191	48 8b cb	 mov	 rcx, rbx
  00194	e8 00 00 00 00	 call	 _Py_DecRef

; 3108 :         value = ast2obj_expr(o->v.Slice.upper);

  00199	48 8b 4e 10	 mov	 rcx, QWORD PTR [rsi+16]
  0019d	e8 00 00 00 00	 call	 ast2obj_expr
  001a2	48 8b d8	 mov	 rbx, rax

; 3109 :         if (!value) goto failed;

  001a5	48 85 c0	 test	 rax, rax
  001a8	74 5e		 je	 SHORT $LN7@ast2obj_sl

; 3110 :         if (_PyObject_SetAttrId(result, &PyId_upper, value) == -1)

  001aa	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_upper
  001af	4c 8b c0	 mov	 r8, rax
  001b2	48 8b cf	 mov	 rcx, rdi
  001b5	48 03 d5	 add	 rdx, rbp
  001b8	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  001bd	83 f8 ff	 cmp	 eax, -1
  001c0	74 3e		 je	 SHORT $failed$24113

; 3111 :             goto failed;
; 3112 :         Py_DECREF(value);

  001c2	48 8b cb	 mov	 rcx, rbx
  001c5	e8 00 00 00 00	 call	 _Py_DecRef

; 3113 :         value = ast2obj_expr(o->v.Slice.step);

  001ca	48 8b 4e 18	 mov	 rcx, QWORD PTR [rsi+24]
  001ce	e8 00 00 00 00	 call	 ast2obj_expr
  001d3	48 8b d8	 mov	 rbx, rax

; 3114 :         if (!value) goto failed;

  001d6	48 85 c0	 test	 rax, rax
  001d9	74 2d		 je	 SHORT $LN7@ast2obj_sl

; 3115 :         if (_PyObject_SetAttrId(result, &PyId_step, value) == -1)

  001db	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_step
  001e0	48 03 d5	 add	 rdx, rbp
$LN37@ast2obj_sl:
  001e3	4c 8b c0	 mov	 r8, rax
$LN38@ast2obj_sl:
  001e6	48 8b cf	 mov	 rcx, rdi
  001e9	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  001ee	83 f8 ff	 cmp	 eax, -1
  001f1	74 0d		 je	 SHORT $failed$24113

; 3116 :             goto failed;
; 3117 :         Py_DECREF(value);

  001f3	48 8b cb	 mov	 rcx, rbx
  001f6	e8 00 00 00 00	 call	 _Py_DecRef
$LN25@ast2obj_sl:

; 3137 :     }
; 3138 :     return result;

  001fb	48 8b c7	 mov	 rax, rdi
  001fe	eb 12		 jmp	 SHORT $LN35@ast2obj_sl
$failed$24113:

; 3139 : failed:
; 3140 :     Py_XDECREF(value);

  00200	48 8b cb	 mov	 rcx, rbx
  00203	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@ast2obj_sl:

; 3141 :     Py_XDECREF(result);

  00208	48 8b cf	 mov	 rcx, rdi
  0020b	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@ast2obj_sl:

; 3142 :     return NULL;

  00210	33 c0		 xor	 eax, eax
$LN35@ast2obj_sl:
  00212	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00217	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]

; 3143 : }

  0021c	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00221	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00225	5f		 pop	 rdi
  00226	c3		 ret	 0
ast2obj_slice ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@OBPKEFDH@unknown?5boolop?5found?$AA@	; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$ast2obj_boolop DD imagerel ast2obj_boolop
	DD	imagerel ast2obj_boolop+199
	DD	imagerel $unwind$ast2obj_boolop
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_boolop DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0BF@OBPKEFDH@unknown?5boolop?5found?$AA@
CONST	SEGMENT
??_C@_0BF@OBPKEFDH@unknown?5boolop?5found?$AA@ DB 'unknown boolop found', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\python-ast.c
CONST	ENDS
;	COMDAT ast2obj_boolop
_TEXT	SEGMENT
o$ = 64
ast2obj_boolop PROC					; COMDAT

; 3146 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 3147 :     switch(o) {

  00006	ff c9		 dec	 ecx
  00008	74 6e		 je	 SHORT $LN3@ast2obj_bo
  0000a	ff c9		 dec	 ecx
  0000c	74 1b		 je	 SHORT $LN2@ast2obj_bo

; 3154 :         default:
; 3155 :             /* should never happen, but just in case ... */
; 3156 :             PyErr_Format(PyExc_SystemError, "unknown boolop found");

  0000e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@OBPKEFDH@unknown?5boolop?5found?$AA@
  0001c	e8 00 00 00 00	 call	 PyErr_Format

; 3157 :             return NULL;

  00021	33 c0		 xor	 eax, eax

; 3158 :     }
; 3159 : }

  00023	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00027	5b		 pop	 rbx
  00028	c3		 ret	 0
$LN2@ast2obj_bo:

; 3151 :         case Or:
; 3152 :             Py_INCREF(Or_singleton);

  00029	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR Or_singleton
  00030	e8 00 00 00 00	 call	 _Py_PXCTX
  00035	85 c0		 test	 eax, eax
  00037	75 32		 jne	 SHORT $LN13@ast2obj_bo
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00047	4c 8b cb	 mov	 r9, rbx
  0004a	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00050	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00058	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005d	85 c0		 test	 eax, eax
  0005f	75 06		 jne	 SHORT $LN12@ast2obj_bo
  00061	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00065	74 04		 je	 SHORT $LN13@ast2obj_bo
$LN12@ast2obj_bo:
  00067	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN13@ast2obj_bo:

; 3153 :             return Or_singleton;

  0006b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Or_singleton

; 3158 :     }
; 3159 : }

  00072	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00076	5b		 pop	 rbx
  00077	c3		 ret	 0
$LN3@ast2obj_bo:

; 3148 :         case And:
; 3149 :             Py_INCREF(And_singleton);

  00078	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR And_singleton
  0007f	e8 00 00 00 00	 call	 _Py_PXCTX
  00084	85 c0		 test	 eax, eax
  00086	75 32		 jne	 SHORT $LN9@ast2obj_bo
  00088	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0008f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00096	4c 8b cb	 mov	 r9, rbx
  00099	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0009f	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000a7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ac	85 c0		 test	 eax, eax
  000ae	75 06		 jne	 SHORT $LN8@ast2obj_bo
  000b0	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000b4	74 04		 je	 SHORT $LN9@ast2obj_bo
$LN8@ast2obj_bo:
  000b6	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN9@ast2obj_bo:

; 3150 :             return And_singleton;

  000ba	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR And_singleton

; 3158 :     }
; 3159 : }

  000c1	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c5	5b		 pop	 rbx
  000c6	c3		 ret	 0
ast2obj_boolop ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@IGLEAKJO@unknown?5operator?5found?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$ast2obj_operator DD imagerel ast2obj_operator
	DD	imagerel ast2obj_operator+400
	DD	imagerel $unwind$ast2obj_operator
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_operator DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BH@IGLEAKJO@unknown?5operator?5found?$AA@
CONST	SEGMENT
??_C@_0BH@IGLEAKJO@unknown?5operator?5found?$AA@ DB 'unknown operator fou'
	DB	'nd', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ast2obj_operator
_TEXT	SEGMENT
o$ = 48
ast2obj_operator PROC					; COMDAT

; 3161 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3162 :     switch(o) {

  00004	ff c9		 dec	 ecx
  00006	83 f9 0b	 cmp	 ecx, 11
  00009	0f 87 36 01 00
	00		 ja	 $LN1@ast2obj_op
  0000f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:__ImageBase
  00016	48 63 c1	 movsxd	 rax, ecx
  00019	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR $LN18@ast2obj_op[rdx+rax*4]
  00020	48 03 ca	 add	 rcx, rdx
  00023	ff e1		 jmp	 rcx
$LN13@ast2obj_op:

; 3163 :         case Add:
; 3164 :             Py_INCREF(Add_singleton);

  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Add_singleton
  0002c	e8 00 00 00 00	 call	 _Py_IncRef

; 3165 :             return Add_singleton;

  00031	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Add_singleton

; 3203 :     }
; 3204 : }

  00038	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003c	c3		 ret	 0
$LN12@ast2obj_op:

; 3166 :         case Sub:
; 3167 :             Py_INCREF(Sub_singleton);

  0003d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Sub_singleton
  00044	e8 00 00 00 00	 call	 _Py_IncRef

; 3168 :             return Sub_singleton;

  00049	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Sub_singleton

; 3203 :     }
; 3204 : }

  00050	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00054	c3		 ret	 0
$LN11@ast2obj_op:

; 3169 :         case Mult:
; 3170 :             Py_INCREF(Mult_singleton);

  00055	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Mult_singleton
  0005c	e8 00 00 00 00	 call	 _Py_IncRef

; 3171 :             return Mult_singleton;

  00061	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Mult_singleton

; 3203 :     }
; 3204 : }

  00068	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006c	c3		 ret	 0
$LN10@ast2obj_op:

; 3172 :         case Div:
; 3173 :             Py_INCREF(Div_singleton);

  0006d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Div_singleton
  00074	e8 00 00 00 00	 call	 _Py_IncRef

; 3174 :             return Div_singleton;

  00079	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Div_singleton

; 3203 :     }
; 3204 : }

  00080	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00084	c3		 ret	 0
$LN9@ast2obj_op:

; 3175 :         case Mod:
; 3176 :             Py_INCREF(Mod_singleton);

  00085	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Mod_singleton
  0008c	e8 00 00 00 00	 call	 _Py_IncRef

; 3177 :             return Mod_singleton;

  00091	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Mod_singleton

; 3203 :     }
; 3204 : }

  00098	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0009c	c3		 ret	 0
$LN8@ast2obj_op:

; 3178 :         case Pow:
; 3179 :             Py_INCREF(Pow_singleton);

  0009d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Pow_singleton
  000a4	e8 00 00 00 00	 call	 _Py_IncRef

; 3180 :             return Pow_singleton;

  000a9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Pow_singleton

; 3203 :     }
; 3204 : }

  000b0	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000b4	c3		 ret	 0
$LN7@ast2obj_op:

; 3181 :         case LShift:
; 3182 :             Py_INCREF(LShift_singleton);

  000b5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR LShift_singleton
  000bc	e8 00 00 00 00	 call	 _Py_IncRef

; 3183 :             return LShift_singleton;

  000c1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR LShift_singleton

; 3203 :     }
; 3204 : }

  000c8	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000cc	c3		 ret	 0
$LN6@ast2obj_op:

; 3184 :         case RShift:
; 3185 :             Py_INCREF(RShift_singleton);

  000cd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR RShift_singleton
  000d4	e8 00 00 00 00	 call	 _Py_IncRef

; 3186 :             return RShift_singleton;

  000d9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR RShift_singleton

; 3203 :     }
; 3204 : }

  000e0	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000e4	c3		 ret	 0
$LN5@ast2obj_op:

; 3187 :         case BitOr:
; 3188 :             Py_INCREF(BitOr_singleton);

  000e5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR BitOr_singleton
  000ec	e8 00 00 00 00	 call	 _Py_IncRef

; 3189 :             return BitOr_singleton;

  000f1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR BitOr_singleton

; 3203 :     }
; 3204 : }

  000f8	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000fc	c3		 ret	 0
$LN4@ast2obj_op:

; 3190 :         case BitXor:
; 3191 :             Py_INCREF(BitXor_singleton);

  000fd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR BitXor_singleton
  00104	e8 00 00 00 00	 call	 _Py_IncRef

; 3192 :             return BitXor_singleton;

  00109	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR BitXor_singleton

; 3203 :     }
; 3204 : }

  00110	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00114	c3		 ret	 0
$LN3@ast2obj_op:

; 3193 :         case BitAnd:
; 3194 :             Py_INCREF(BitAnd_singleton);

  00115	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR BitAnd_singleton
  0011c	e8 00 00 00 00	 call	 _Py_IncRef

; 3195 :             return BitAnd_singleton;

  00121	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR BitAnd_singleton

; 3203 :     }
; 3204 : }

  00128	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0012c	c3		 ret	 0
$LN2@ast2obj_op:

; 3196 :         case FloorDiv:
; 3197 :             Py_INCREF(FloorDiv_singleton);

  0012d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR FloorDiv_singleton
  00134	e8 00 00 00 00	 call	 _Py_IncRef

; 3198 :             return FloorDiv_singleton;

  00139	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR FloorDiv_singleton

; 3203 :     }
; 3204 : }

  00140	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00144	c3		 ret	 0
$LN1@ast2obj_op:

; 3199 :         default:
; 3200 :             /* should never happen, but just in case ... */
; 3201 :             PyErr_Format(PyExc_SystemError, "unknown operator found");

  00145	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  0014c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IGLEAKJO@unknown?5operator?5found?$AA@
  00153	e8 00 00 00 00	 call	 PyErr_Format

; 3202 :             return NULL;

  00158	33 c0		 xor	 eax, eax

; 3203 :     }
; 3204 : }

  0015a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0015e	c3		 ret	 0
  0015f	90		 npad	 1
$LN18@ast2obj_op:
  00160	00 00 00 00	 DD	 $LN13@ast2obj_op
  00164	00 00 00 00	 DD	 $LN12@ast2obj_op
  00168	00 00 00 00	 DD	 $LN11@ast2obj_op
  0016c	00 00 00 00	 DD	 $LN10@ast2obj_op
  00170	00 00 00 00	 DD	 $LN9@ast2obj_op
  00174	00 00 00 00	 DD	 $LN8@ast2obj_op
  00178	00 00 00 00	 DD	 $LN7@ast2obj_op
  0017c	00 00 00 00	 DD	 $LN6@ast2obj_op
  00180	00 00 00 00	 DD	 $LN5@ast2obj_op
  00184	00 00 00 00	 DD	 $LN4@ast2obj_op
  00188	00 00 00 00	 DD	 $LN3@ast2obj_op
  0018c	00 00 00 00	 DD	 $LN2@ast2obj_op
ast2obj_operator ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@NOHBMGDK@unknown?5unaryop?5found?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$ast2obj_unaryop DD imagerel ast2obj_unaryop
	DD	imagerel ast2obj_unaryop+142
	DD	imagerel $unwind$ast2obj_unaryop
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_unaryop DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BG@NOHBMGDK@unknown?5unaryop?5found?$AA@
CONST	SEGMENT
??_C@_0BG@NOHBMGDK@unknown?5unaryop?5found?$AA@ DB 'unknown unaryop found'
	DB	00H						; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ast2obj_unaryop
_TEXT	SEGMENT
o$ = 48
ast2obj_unaryop PROC					; COMDAT

; 3206 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3207 :     switch(o) {

  00004	ff c9		 dec	 ecx
  00006	74 6e		 je	 SHORT $LN5@ast2obj_un
  00008	ff c9		 dec	 ecx
  0000a	74 52		 je	 SHORT $LN4@ast2obj_un
  0000c	ff c9		 dec	 ecx
  0000e	74 36		 je	 SHORT $LN3@ast2obj_un
  00010	ff c9		 dec	 ecx
  00012	74 1a		 je	 SHORT $LN2@ast2obj_un

; 3220 :         default:
; 3221 :             /* should never happen, but just in case ... */
; 3222 :             PyErr_Format(PyExc_SystemError, "unknown unaryop found");

  00014	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@NOHBMGDK@unknown?5unaryop?5found?$AA@
  00022	e8 00 00 00 00	 call	 PyErr_Format

; 3223 :             return NULL;

  00027	33 c0		 xor	 eax, eax

; 3224 :     }
; 3225 : }

  00029	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002d	c3		 ret	 0
$LN2@ast2obj_un:

; 3217 :         case USub:
; 3218 :             Py_INCREF(USub_singleton);

  0002e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR USub_singleton
  00035	e8 00 00 00 00	 call	 _Py_IncRef

; 3219 :             return USub_singleton;

  0003a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR USub_singleton

; 3224 :     }
; 3225 : }

  00041	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00045	c3		 ret	 0
$LN3@ast2obj_un:

; 3214 :         case UAdd:
; 3215 :             Py_INCREF(UAdd_singleton);

  00046	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR UAdd_singleton
  0004d	e8 00 00 00 00	 call	 _Py_IncRef

; 3216 :             return UAdd_singleton;

  00052	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR UAdd_singleton

; 3224 :     }
; 3225 : }

  00059	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005d	c3		 ret	 0
$LN4@ast2obj_un:

; 3211 :         case Not:
; 3212 :             Py_INCREF(Not_singleton);

  0005e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Not_singleton
  00065	e8 00 00 00 00	 call	 _Py_IncRef

; 3213 :             return Not_singleton;

  0006a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Not_singleton

; 3224 :     }
; 3225 : }

  00071	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00075	c3		 ret	 0
$LN5@ast2obj_un:

; 3208 :         case Invert:
; 3209 :             Py_INCREF(Invert_singleton);

  00076	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Invert_singleton
  0007d	e8 00 00 00 00	 call	 _Py_IncRef

; 3210 :             return Invert_singleton;

  00082	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Invert_singleton

; 3224 :     }
; 3225 : }

  00089	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0008d	c3		 ret	 0
ast2obj_unaryop ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@BFIEMLNE@unknown?5cmpop?5found?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$ast2obj_cmpop DD imagerel ast2obj_cmpop
	DD	imagerel ast2obj_cmpop+344
	DD	imagerel $unwind$ast2obj_cmpop
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_cmpop DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BE@BFIEMLNE@unknown?5cmpop?5found?$AA@
CONST	SEGMENT
??_C@_0BE@BFIEMLNE@unknown?5cmpop?5found?$AA@ DB 'unknown cmpop found', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ast2obj_cmpop
_TEXT	SEGMENT
o$ = 48
ast2obj_cmpop PROC					; COMDAT

; 3227 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3228 :     switch(o) {

  00004	ff c9		 dec	 ecx
  00006	83 f9 09	 cmp	 ecx, 9
  00009	0f 87 06 01 00
	00		 ja	 $LN1@ast2obj_cm
  0000f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:__ImageBase
  00016	48 63 c1	 movsxd	 rax, ecx
  00019	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR $LN16@ast2obj_cm[rdx+rax*4]
  00020	48 03 ca	 add	 rcx, rdx
  00023	ff e1		 jmp	 rcx
$LN11@ast2obj_cm:

; 3229 :         case Eq:
; 3230 :             Py_INCREF(Eq_singleton);

  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Eq_singleton
  0002c	e8 00 00 00 00	 call	 _Py_IncRef

; 3231 :             return Eq_singleton;

  00031	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Eq_singleton

; 3263 :     }
; 3264 : }

  00038	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003c	c3		 ret	 0
$LN10@ast2obj_cm:

; 3232 :         case NotEq:
; 3233 :             Py_INCREF(NotEq_singleton);

  0003d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR NotEq_singleton
  00044	e8 00 00 00 00	 call	 _Py_IncRef

; 3234 :             return NotEq_singleton;

  00049	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR NotEq_singleton

; 3263 :     }
; 3264 : }

  00050	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00054	c3		 ret	 0
$LN9@ast2obj_cm:

; 3235 :         case Lt:
; 3236 :             Py_INCREF(Lt_singleton);

  00055	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Lt_singleton
  0005c	e8 00 00 00 00	 call	 _Py_IncRef

; 3237 :             return Lt_singleton;

  00061	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Lt_singleton

; 3263 :     }
; 3264 : }

  00068	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006c	c3		 ret	 0
$LN8@ast2obj_cm:

; 3238 :         case LtE:
; 3239 :             Py_INCREF(LtE_singleton);

  0006d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR LtE_singleton
  00074	e8 00 00 00 00	 call	 _Py_IncRef

; 3240 :             return LtE_singleton;

  00079	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR LtE_singleton

; 3263 :     }
; 3264 : }

  00080	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00084	c3		 ret	 0
$LN7@ast2obj_cm:

; 3241 :         case Gt:
; 3242 :             Py_INCREF(Gt_singleton);

  00085	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Gt_singleton
  0008c	e8 00 00 00 00	 call	 _Py_IncRef

; 3243 :             return Gt_singleton;

  00091	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Gt_singleton

; 3263 :     }
; 3264 : }

  00098	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0009c	c3		 ret	 0
$LN6@ast2obj_cm:

; 3244 :         case GtE:
; 3245 :             Py_INCREF(GtE_singleton);

  0009d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR GtE_singleton
  000a4	e8 00 00 00 00	 call	 _Py_IncRef

; 3246 :             return GtE_singleton;

  000a9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GtE_singleton

; 3263 :     }
; 3264 : }

  000b0	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000b4	c3		 ret	 0
$LN5@ast2obj_cm:

; 3247 :         case Is:
; 3248 :             Py_INCREF(Is_singleton);

  000b5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Is_singleton
  000bc	e8 00 00 00 00	 call	 _Py_IncRef

; 3249 :             return Is_singleton;

  000c1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Is_singleton

; 3263 :     }
; 3264 : }

  000c8	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000cc	c3		 ret	 0
$LN4@ast2obj_cm:

; 3250 :         case IsNot:
; 3251 :             Py_INCREF(IsNot_singleton);

  000cd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR IsNot_singleton
  000d4	e8 00 00 00 00	 call	 _Py_IncRef

; 3252 :             return IsNot_singleton;

  000d9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR IsNot_singleton

; 3263 :     }
; 3264 : }

  000e0	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000e4	c3		 ret	 0
$LN3@ast2obj_cm:

; 3253 :         case In:
; 3254 :             Py_INCREF(In_singleton);

  000e5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR In_singleton
  000ec	e8 00 00 00 00	 call	 _Py_IncRef

; 3255 :             return In_singleton;

  000f1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR In_singleton

; 3263 :     }
; 3264 : }

  000f8	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000fc	c3		 ret	 0
$LN2@ast2obj_cm:

; 3256 :         case NotIn:
; 3257 :             Py_INCREF(NotIn_singleton);

  000fd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR NotIn_singleton
  00104	e8 00 00 00 00	 call	 _Py_IncRef

; 3258 :             return NotIn_singleton;

  00109	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR NotIn_singleton

; 3263 :     }
; 3264 : }

  00110	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00114	c3		 ret	 0
$LN1@ast2obj_cm:

; 3259 :         default:
; 3260 :             /* should never happen, but just in case ... */
; 3261 :             PyErr_Format(PyExc_SystemError, "unknown cmpop found");

  00115	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  0011c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@BFIEMLNE@unknown?5cmpop?5found?$AA@
  00123	e8 00 00 00 00	 call	 PyErr_Format

; 3262 :             return NULL;

  00128	33 c0		 xor	 eax, eax

; 3263 :     }
; 3264 : }

  0012a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0012e	c3		 ret	 0
  0012f	90		 npad	 1
$LN16@ast2obj_cm:
  00130	00 00 00 00	 DD	 $LN11@ast2obj_cm
  00134	00 00 00 00	 DD	 $LN10@ast2obj_cm
  00138	00 00 00 00	 DD	 $LN9@ast2obj_cm
  0013c	00 00 00 00	 DD	 $LN8@ast2obj_cm
  00140	00 00 00 00	 DD	 $LN7@ast2obj_cm
  00144	00 00 00 00	 DD	 $LN6@ast2obj_cm
  00148	00 00 00 00	 DD	 $LN5@ast2obj_cm
  0014c	00 00 00 00	 DD	 $LN4@ast2obj_cm
  00150	00 00 00 00	 DD	 $LN3@ast2obj_cm
  00154	00 00 00 00	 DD	 $LN2@ast2obj_cm
ast2obj_cmpop ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$ast2obj_comprehension DD imagerel ast2obj_comprehension
	DD	imagerel ast2obj_comprehension+108
	DD	imagerel $unwind$ast2obj_comprehension
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$ast2obj_comprehension DD imagerel ast2obj_comprehension+108
	DD	imagerel ast2obj_comprehension+137
	DD	imagerel $chain$0$ast2obj_comprehension
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$ast2obj_comprehension DD imagerel ast2obj_comprehension+137
	DD	imagerel ast2obj_comprehension+367
	DD	imagerel $chain$4$ast2obj_comprehension
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$ast2obj_comprehension DD 060d21H
	DD	09540dH
	DD	083408H
	DD	0a7400H
	DD	imagerel ast2obj_comprehension
	DD	imagerel ast2obj_comprehension+108
	DD	imagerel $unwind$ast2obj_comprehension
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$ast2obj_comprehension DD 020521H
	DD	0a7405H
	DD	imagerel ast2obj_comprehension
	DD	imagerel ast2obj_comprehension+108
	DD	imagerel $unwind$ast2obj_comprehension
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_comprehension DD 020601H
	DD	060025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\python-ast.c
xdata	ENDS
;	COMDAT ast2obj_comprehension
_TEXT	SEGMENT
_o$ = 64
ast2obj_comprehension PROC				; COMDAT

; 3267 : {

  00000	40 56		 push	 rsi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b f1	 mov	 rsi, rcx

; 3268 :     comprehension_ty o = (comprehension_ty)_o;
; 3269 :     PyObject *result = NULL, *value = NULL;
; 3270 :     if (!o) {

  00009	48 85 c9	 test	 rcx, rcx
  0000c	75 52		 jne	 SHORT $LN16@ast2obj_co

; 3271 :         Py_INCREF(Py_None);

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	75 3c		 jne	 SHORT $LN20@ast2obj_co
  00017	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0002c	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00032	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0003a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003f	85 c0		 test	 eax, eax
  00041	75 09		 jne	 SHORT $LN19@ast2obj_co
  00043	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0004a	74 07		 je	 SHORT $LN20@ast2obj_co
$LN19@ast2obj_co:
  0004c	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN20@ast2obj_co:

; 3272 :         return Py_None;

  00053	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 3297 : }

  0005a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005e	5e		 pop	 rsi
  0005f	c3		 ret	 0
$LN16@ast2obj_co:

; 3273 :     }
; 3274 : 
; 3275 :     result = PyType_GenericNew(comprehension_type, NULL, NULL);

  00060	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR comprehension_type
  00067	45 33 c0	 xor	 r8d, r8d
  0006a	33 d2		 xor	 edx, edx
  0006c	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  00071	e8 00 00 00 00	 call	 PyType_GenericNew
  00076	48 8b f8	 mov	 rdi, rax

; 3276 :     if (!result) return NULL;

  00079	48 85 c0	 test	 rax, rax
  0007c	75 0b		 jne	 SHORT $LN15@ast2obj_co
  0007e	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 3297 : }

  00083	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00087	5e		 pop	 rsi
  00088	c3		 ret	 0
$LN15@ast2obj_co:

; 3277 :     value = ast2obj_expr(o->target);

  00089	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  0008c	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00091	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp
  00096	e8 00 00 00 00	 call	 ast2obj_expr
  0009b	48 8b d8	 mov	 rbx, rax

; 3278 :     if (!value) goto failed;

  0009e	48 85 c0	 test	 rax, rax
  000a1	0f 84 a9 00 00
	00		 je	 $LN7@ast2obj_co

; 3279 :     if (_PyObject_SetAttrId(result, &PyId_target, value) == -1)

  000a7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  000ad	65 48 8b 0c 25
	58 00 00 00	 mov	 rcx, QWORD PTR gs:88
  000b6	4c 8b c0	 mov	 r8, rax
  000b9	48 8b 2c d1	 mov	 rbp, QWORD PTR [rcx+rdx*8]
  000bd	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_target
  000c2	48 8b cf	 mov	 rcx, rdi
  000c5	48 03 d5	 add	 rdx, rbp
  000c8	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  000cd	83 f8 ff	 cmp	 eax, -1
  000d0	74 76		 je	 SHORT $failed$24260

; 3280 :         goto failed;
; 3281 :     Py_DECREF(value);

  000d2	48 8b cb	 mov	 rcx, rbx
  000d5	e8 00 00 00 00	 call	 _Py_DecRef

; 3282 :     value = ast2obj_expr(o->iter);

  000da	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  000de	e8 00 00 00 00	 call	 ast2obj_expr
  000e3	48 8b d8	 mov	 rbx, rax

; 3283 :     if (!value) goto failed;

  000e6	48 85 c0	 test	 rax, rax
  000e9	74 65		 je	 SHORT $LN7@ast2obj_co

; 3284 :     if (_PyObject_SetAttrId(result, &PyId_iter, value) == -1)

  000eb	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_iter
  000f0	4c 8b c0	 mov	 r8, rax
  000f3	48 8b cf	 mov	 rcx, rdi
  000f6	48 03 d5	 add	 rdx, rbp
  000f9	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  000fe	83 f8 ff	 cmp	 eax, -1
  00101	74 45		 je	 SHORT $failed$24260

; 3285 :         goto failed;
; 3286 :     Py_DECREF(value);

  00103	48 8b cb	 mov	 rcx, rbx
  00106	e8 00 00 00 00	 call	 _Py_DecRef

; 3287 :     value = ast2obj_list(o->ifs, ast2obj_expr);

  0010b	48 8b 4e 10	 mov	 rcx, QWORD PTR [rsi+16]
  0010f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_expr
  00116	e8 00 00 00 00	 call	 ast2obj_list
  0011b	48 8b d8	 mov	 rbx, rax

; 3288 :     if (!value) goto failed;

  0011e	48 85 c0	 test	 rax, rax
  00121	74 2d		 je	 SHORT $LN7@ast2obj_co

; 3289 :     if (_PyObject_SetAttrId(result, &PyId_ifs, value) == -1)

  00123	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_ifs
  00128	4c 8b c0	 mov	 r8, rax
  0012b	48 8b cf	 mov	 rcx, rdi
  0012e	48 03 d5	 add	 rdx, rbp
  00131	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00136	83 f8 ff	 cmp	 eax, -1
  00139	74 0d		 je	 SHORT $failed$24260

; 3290 :         goto failed;
; 3291 :     Py_DECREF(value);

  0013b	48 8b cb	 mov	 rcx, rbx
  0013e	e8 00 00 00 00	 call	 _Py_DecRef

; 3292 :     return result;

  00143	48 8b c7	 mov	 rax, rdi
  00146	eb 12		 jmp	 SHORT $LN25@ast2obj_co
$failed$24260:

; 3293 : failed:
; 3294 :     Py_XDECREF(value);

  00148	48 8b cb	 mov	 rcx, rbx
  0014b	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@ast2obj_co:

; 3295 :     Py_XDECREF(result);

  00150	48 8b cf	 mov	 rcx, rdi
  00153	e8 00 00 00 00	 call	 _Py_DecRef

; 3296 :     return NULL;

  00158	33 c0		 xor	 eax, eax
$LN25@ast2obj_co:
  0015a	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  0015f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00164	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 3297 : }

  00169	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0016d	5e		 pop	 rsi
  0016e	c3		 ret	 0
ast2obj_comprehension ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$ast2obj_arg DD imagerel ast2obj_arg
	DD	imagerel ast2obj_arg+108
	DD	imagerel $unwind$ast2obj_arg
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$ast2obj_arg DD imagerel ast2obj_arg+108
	DD	imagerel ast2obj_arg+137
	DD	imagerel $chain$0$ast2obj_arg
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$ast2obj_arg DD imagerel ast2obj_arg+137
	DD	imagerel ast2obj_arg+307
	DD	imagerel $chain$4$ast2obj_arg
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$ast2obj_arg DD 060d21H
	DD	09540dH
	DD	083408H
	DD	0a7400H
	DD	imagerel ast2obj_arg
	DD	imagerel ast2obj_arg+108
	DD	imagerel $unwind$ast2obj_arg
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$ast2obj_arg DD 020521H
	DD	0a7405H
	DD	imagerel ast2obj_arg
	DD	imagerel ast2obj_arg+108
	DD	imagerel $unwind$ast2obj_arg
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_arg DD 020601H
	DD	060025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\python-ast.c
xdata	ENDS
;	COMDAT ast2obj_arg
_TEXT	SEGMENT
_o$ = 64
ast2obj_arg PROC					; COMDAT

; 3408 : {

  00000	40 56		 push	 rsi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b f1	 mov	 rsi, rcx

; 3409 :     arg_ty o = (arg_ty)_o;
; 3410 :     PyObject *result = NULL, *value = NULL;
; 3411 :     if (!o) {

  00009	48 85 c9	 test	 rcx, rcx
  0000c	75 52		 jne	 SHORT $LN14@ast2obj_ar

; 3412 :         Py_INCREF(Py_None);

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	75 3c		 jne	 SHORT $LN18@ast2obj_ar
  00017	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0002c	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00032	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0003a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003f	85 c0		 test	 eax, eax
  00041	75 09		 jne	 SHORT $LN17@ast2obj_ar
  00043	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0004a	74 07		 je	 SHORT $LN18@ast2obj_ar
$LN17@ast2obj_ar:
  0004c	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN18@ast2obj_ar:

; 3413 :         return Py_None;

  00053	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 3433 : }

  0005a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005e	5e		 pop	 rsi
  0005f	c3		 ret	 0
$LN14@ast2obj_ar:

; 3414 :     }
; 3415 : 
; 3416 :     result = PyType_GenericNew(arg_type, NULL, NULL);

  00060	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR arg_type
  00067	45 33 c0	 xor	 r8d, r8d
  0006a	33 d2		 xor	 edx, edx
  0006c	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  00071	e8 00 00 00 00	 call	 PyType_GenericNew
  00076	48 8b f8	 mov	 rdi, rax

; 3417 :     if (!result) return NULL;

  00079	48 85 c0	 test	 rax, rax
  0007c	75 0b		 jne	 SHORT $LN13@ast2obj_ar
  0007e	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 3433 : }

  00083	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00087	5e		 pop	 rsi
  00088	c3		 ret	 0
$LN13@ast2obj_ar:

; 3418 :     value = ast2obj_identifier(o->arg);

  00089	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  0008c	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00091	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp
  00096	e8 00 00 00 00	 call	 ast2obj_object
  0009b	48 8b d8	 mov	 rbx, rax

; 3419 :     if (!value) goto failed;

  0009e	48 85 c0	 test	 rax, rax
  000a1	74 71		 je	 SHORT $LN7@ast2obj_ar

; 3420 :     if (_PyObject_SetAttrId(result, &PyId_arg, value) == -1)

  000a3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  000a9	65 48 8b 0c 25
	58 00 00 00	 mov	 rcx, QWORD PTR gs:88
  000b2	4c 8b c0	 mov	 r8, rax
  000b5	48 8b 2c d1	 mov	 rbp, QWORD PTR [rcx+rdx*8]
  000b9	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_arg
  000be	48 8b cf	 mov	 rcx, rdi
  000c1	48 03 d5	 add	 rdx, rbp
  000c4	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  000c9	83 f8 ff	 cmp	 eax, -1
  000cc	74 3e		 je	 SHORT $failed$24393

; 3421 :         goto failed;
; 3422 :     Py_DECREF(value);

  000ce	48 8b cb	 mov	 rcx, rbx
  000d1	e8 00 00 00 00	 call	 _Py_DecRef

; 3423 :     value = ast2obj_expr(o->annotation);

  000d6	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  000da	e8 00 00 00 00	 call	 ast2obj_expr
  000df	48 8b d8	 mov	 rbx, rax

; 3424 :     if (!value) goto failed;

  000e2	48 85 c0	 test	 rax, rax
  000e5	74 2d		 je	 SHORT $LN7@ast2obj_ar

; 3425 :     if (_PyObject_SetAttrId(result, &PyId_annotation, value) == -1)

  000e7	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_annotation
  000ec	4c 8b c0	 mov	 r8, rax
  000ef	48 8b cf	 mov	 rcx, rdi
  000f2	48 03 d5	 add	 rdx, rbp
  000f5	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  000fa	83 f8 ff	 cmp	 eax, -1
  000fd	74 0d		 je	 SHORT $failed$24393

; 3426 :         goto failed;
; 3427 :     Py_DECREF(value);

  000ff	48 8b cb	 mov	 rcx, rbx
  00102	e8 00 00 00 00	 call	 _Py_DecRef

; 3428 :     return result;

  00107	48 8b c7	 mov	 rax, rdi
  0010a	eb 12		 jmp	 SHORT $LN23@ast2obj_ar
$failed$24393:

; 3429 : failed:
; 3430 :     Py_XDECREF(value);

  0010c	48 8b cb	 mov	 rcx, rbx
  0010f	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@ast2obj_ar:

; 3431 :     Py_XDECREF(result);

  00114	48 8b cf	 mov	 rcx, rdi
  00117	e8 00 00 00 00	 call	 _Py_DecRef

; 3432 :     return NULL;

  0011c	33 c0		 xor	 eax, eax
$LN23@ast2obj_ar:
  0011e	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00123	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00128	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 3433 : }

  0012d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00131	5e		 pop	 rsi
  00132	c3		 ret	 0
ast2obj_arg ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$ast2obj_keyword DD imagerel ast2obj_keyword
	DD	imagerel ast2obj_keyword+108
	DD	imagerel $unwind$ast2obj_keyword
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$ast2obj_keyword DD imagerel ast2obj_keyword+108
	DD	imagerel ast2obj_keyword+137
	DD	imagerel $chain$0$ast2obj_keyword
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$ast2obj_keyword DD imagerel ast2obj_keyword+137
	DD	imagerel ast2obj_keyword+307
	DD	imagerel $chain$4$ast2obj_keyword
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$ast2obj_keyword DD 060d21H
	DD	09540dH
	DD	083408H
	DD	0a7400H
	DD	imagerel ast2obj_keyword
	DD	imagerel ast2obj_keyword+108
	DD	imagerel $unwind$ast2obj_keyword
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$ast2obj_keyword DD 020521H
	DD	0a7405H
	DD	imagerel ast2obj_keyword
	DD	imagerel ast2obj_keyword+108
	DD	imagerel $unwind$ast2obj_keyword
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_keyword DD 020601H
	DD	060025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\python-ast.c
xdata	ENDS
;	COMDAT ast2obj_keyword
_TEXT	SEGMENT
_o$ = 64
ast2obj_keyword PROC					; COMDAT

; 3437 : {

  00000	40 56		 push	 rsi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b f1	 mov	 rsi, rcx

; 3438 :     keyword_ty o = (keyword_ty)_o;
; 3439 :     PyObject *result = NULL, *value = NULL;
; 3440 :     if (!o) {

  00009	48 85 c9	 test	 rcx, rcx
  0000c	75 52		 jne	 SHORT $LN14@ast2obj_ke

; 3441 :         Py_INCREF(Py_None);

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	75 3c		 jne	 SHORT $LN18@ast2obj_ke
  00017	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0002c	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00032	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0003a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003f	85 c0		 test	 eax, eax
  00041	75 09		 jne	 SHORT $LN17@ast2obj_ke
  00043	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0004a	74 07		 je	 SHORT $LN18@ast2obj_ke
$LN17@ast2obj_ke:
  0004c	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN18@ast2obj_ke:

; 3442 :         return Py_None;

  00053	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 3462 : }

  0005a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005e	5e		 pop	 rsi
  0005f	c3		 ret	 0
$LN14@ast2obj_ke:

; 3443 :     }
; 3444 : 
; 3445 :     result = PyType_GenericNew(keyword_type, NULL, NULL);

  00060	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR keyword_type
  00067	45 33 c0	 xor	 r8d, r8d
  0006a	33 d2		 xor	 edx, edx
  0006c	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  00071	e8 00 00 00 00	 call	 PyType_GenericNew
  00076	48 8b f8	 mov	 rdi, rax

; 3446 :     if (!result) return NULL;

  00079	48 85 c0	 test	 rax, rax
  0007c	75 0b		 jne	 SHORT $LN13@ast2obj_ke
  0007e	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 3462 : }

  00083	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00087	5e		 pop	 rsi
  00088	c3		 ret	 0
$LN13@ast2obj_ke:

; 3447 :     value = ast2obj_identifier(o->arg);

  00089	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  0008c	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00091	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp
  00096	e8 00 00 00 00	 call	 ast2obj_object
  0009b	48 8b d8	 mov	 rbx, rax

; 3448 :     if (!value) goto failed;

  0009e	48 85 c0	 test	 rax, rax
  000a1	74 71		 je	 SHORT $LN7@ast2obj_ke

; 3449 :     if (_PyObject_SetAttrId(result, &PyId_arg, value) == -1)

  000a3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  000a9	65 48 8b 0c 25
	58 00 00 00	 mov	 rcx, QWORD PTR gs:88
  000b2	4c 8b c0	 mov	 r8, rax
  000b5	48 8b 2c d1	 mov	 rbp, QWORD PTR [rcx+rdx*8]
  000b9	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_arg
  000be	48 8b cf	 mov	 rcx, rdi
  000c1	48 03 d5	 add	 rdx, rbp
  000c4	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  000c9	83 f8 ff	 cmp	 eax, -1
  000cc	74 3e		 je	 SHORT $failed$24426

; 3450 :         goto failed;
; 3451 :     Py_DECREF(value);

  000ce	48 8b cb	 mov	 rcx, rbx
  000d1	e8 00 00 00 00	 call	 _Py_DecRef

; 3452 :     value = ast2obj_expr(o->value);

  000d6	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  000da	e8 00 00 00 00	 call	 ast2obj_expr
  000df	48 8b d8	 mov	 rbx, rax

; 3453 :     if (!value) goto failed;

  000e2	48 85 c0	 test	 rax, rax
  000e5	74 2d		 je	 SHORT $LN7@ast2obj_ke

; 3454 :     if (_PyObject_SetAttrId(result, &PyId_value, value) == -1)

  000e7	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_value
  000ec	4c 8b c0	 mov	 r8, rax
  000ef	48 8b cf	 mov	 rcx, rdi
  000f2	48 03 d5	 add	 rdx, rbp
  000f5	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  000fa	83 f8 ff	 cmp	 eax, -1
  000fd	74 0d		 je	 SHORT $failed$24426

; 3455 :         goto failed;
; 3456 :     Py_DECREF(value);

  000ff	48 8b cb	 mov	 rcx, rbx
  00102	e8 00 00 00 00	 call	 _Py_DecRef

; 3457 :     return result;

  00107	48 8b c7	 mov	 rax, rdi
  0010a	eb 12		 jmp	 SHORT $LN23@ast2obj_ke
$failed$24426:

; 3458 : failed:
; 3459 :     Py_XDECREF(value);

  0010c	48 8b cb	 mov	 rcx, rbx
  0010f	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@ast2obj_ke:

; 3460 :     Py_XDECREF(result);

  00114	48 8b cf	 mov	 rcx, rdi
  00117	e8 00 00 00 00	 call	 _Py_DecRef

; 3461 :     return NULL;

  0011c	33 c0		 xor	 eax, eax
$LN23@ast2obj_ke:
  0011e	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00123	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00128	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 3462 : }

  0012d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00131	5e		 pop	 rsi
  00132	c3		 ret	 0
ast2obj_keyword ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$ast2obj_alias DD imagerel ast2obj_alias
	DD	imagerel ast2obj_alias+108
	DD	imagerel $unwind$ast2obj_alias
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$ast2obj_alias DD imagerel ast2obj_alias+108
	DD	imagerel ast2obj_alias+137
	DD	imagerel $chain$0$ast2obj_alias
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$ast2obj_alias DD imagerel ast2obj_alias+137
	DD	imagerel ast2obj_alias+307
	DD	imagerel $chain$4$ast2obj_alias
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$ast2obj_alias DD 060d21H
	DD	09540dH
	DD	083408H
	DD	0a7400H
	DD	imagerel ast2obj_alias
	DD	imagerel ast2obj_alias+108
	DD	imagerel $unwind$ast2obj_alias
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$ast2obj_alias DD 020521H
	DD	0a7405H
	DD	imagerel ast2obj_alias
	DD	imagerel ast2obj_alias+108
	DD	imagerel $unwind$ast2obj_alias
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_alias DD 020601H
	DD	060025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\python-ast.c
xdata	ENDS
;	COMDAT ast2obj_alias
_TEXT	SEGMENT
_o$ = 64
ast2obj_alias PROC					; COMDAT

; 3466 : {

  00000	40 56		 push	 rsi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b f1	 mov	 rsi, rcx

; 3467 :     alias_ty o = (alias_ty)_o;
; 3468 :     PyObject *result = NULL, *value = NULL;
; 3469 :     if (!o) {

  00009	48 85 c9	 test	 rcx, rcx
  0000c	75 52		 jne	 SHORT $LN14@ast2obj_al

; 3470 :         Py_INCREF(Py_None);

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	75 3c		 jne	 SHORT $LN18@ast2obj_al
  00017	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0002c	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00032	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0003a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003f	85 c0		 test	 eax, eax
  00041	75 09		 jne	 SHORT $LN17@ast2obj_al
  00043	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0004a	74 07		 je	 SHORT $LN18@ast2obj_al
$LN17@ast2obj_al:
  0004c	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN18@ast2obj_al:

; 3471 :         return Py_None;

  00053	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 3491 : }

  0005a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005e	5e		 pop	 rsi
  0005f	c3		 ret	 0
$LN14@ast2obj_al:

; 3472 :     }
; 3473 : 
; 3474 :     result = PyType_GenericNew(alias_type, NULL, NULL);

  00060	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR alias_type
  00067	45 33 c0	 xor	 r8d, r8d
  0006a	33 d2		 xor	 edx, edx
  0006c	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  00071	e8 00 00 00 00	 call	 PyType_GenericNew
  00076	48 8b f8	 mov	 rdi, rax

; 3475 :     if (!result) return NULL;

  00079	48 85 c0	 test	 rax, rax
  0007c	75 0b		 jne	 SHORT $LN13@ast2obj_al
  0007e	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 3491 : }

  00083	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00087	5e		 pop	 rsi
  00088	c3		 ret	 0
$LN13@ast2obj_al:

; 3476 :     value = ast2obj_identifier(o->name);

  00089	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  0008c	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00091	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp
  00096	e8 00 00 00 00	 call	 ast2obj_object
  0009b	48 8b d8	 mov	 rbx, rax

; 3477 :     if (!value) goto failed;

  0009e	48 85 c0	 test	 rax, rax
  000a1	74 71		 je	 SHORT $LN7@ast2obj_al

; 3478 :     if (_PyObject_SetAttrId(result, &PyId_name, value) == -1)

  000a3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  000a9	65 48 8b 0c 25
	58 00 00 00	 mov	 rcx, QWORD PTR gs:88
  000b2	4c 8b c0	 mov	 r8, rax
  000b5	48 8b 2c d1	 mov	 rbp, QWORD PTR [rcx+rdx*8]
  000b9	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_name
  000be	48 8b cf	 mov	 rcx, rdi
  000c1	48 03 d5	 add	 rdx, rbp
  000c4	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  000c9	83 f8 ff	 cmp	 eax, -1
  000cc	74 3e		 je	 SHORT $failed$24459

; 3479 :         goto failed;
; 3480 :     Py_DECREF(value);

  000ce	48 8b cb	 mov	 rcx, rbx
  000d1	e8 00 00 00 00	 call	 _Py_DecRef

; 3481 :     value = ast2obj_identifier(o->asname);

  000d6	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  000da	e8 00 00 00 00	 call	 ast2obj_object
  000df	48 8b d8	 mov	 rbx, rax

; 3482 :     if (!value) goto failed;

  000e2	48 85 c0	 test	 rax, rax
  000e5	74 2d		 je	 SHORT $LN7@ast2obj_al

; 3483 :     if (_PyObject_SetAttrId(result, &PyId_asname, value) == -1)

  000e7	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_asname
  000ec	4c 8b c0	 mov	 r8, rax
  000ef	48 8b cf	 mov	 rcx, rdi
  000f2	48 03 d5	 add	 rdx, rbp
  000f5	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  000fa	83 f8 ff	 cmp	 eax, -1
  000fd	74 0d		 je	 SHORT $failed$24459

; 3484 :         goto failed;
; 3485 :     Py_DECREF(value);

  000ff	48 8b cb	 mov	 rcx, rbx
  00102	e8 00 00 00 00	 call	 _Py_DecRef

; 3486 :     return result;

  00107	48 8b c7	 mov	 rax, rdi
  0010a	eb 12		 jmp	 SHORT $LN23@ast2obj_al
$failed$24459:

; 3487 : failed:
; 3488 :     Py_XDECREF(value);

  0010c	48 8b cb	 mov	 rcx, rbx
  0010f	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@ast2obj_al:

; 3489 :     Py_XDECREF(result);

  00114	48 8b cf	 mov	 rcx, rdi
  00117	e8 00 00 00 00	 call	 _Py_DecRef

; 3490 :     return NULL;

  0011c	33 c0		 xor	 eax, eax
$LN23@ast2obj_al:
  0011e	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00123	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00128	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 3491 : }

  0012d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00131	5e		 pop	 rsi
  00132	c3		 ret	 0
ast2obj_alias ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CP@NKGMBLMP@expected?5some?5sort?5of?5expr_conte@ ; `string'
EXTRN	PyObject_IsInstance:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_expr_context DD imagerel obj2ast_expr_context
	DD	imagerel obj2ast_expr_context+325
	DD	imagerel $unwind$obj2ast_expr_context
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_expr_context DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CP@NKGMBLMP@expected?5some?5sort?5of?5expr_conte@
CONST	SEGMENT
??_C@_0CP@NKGMBLMP@expected?5some?5sort?5of?5expr_conte@ DB 'expected som'
	DB	'e sort of expr_context, but got %R', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT obj2ast_expr_context
_TEXT	SEGMENT
obj$ = 48
out$ = 56
obj2ast_expr_context PROC				; COMDAT

; 5864 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx

; 5865 :     int isinstance;
; 5866 : 
; 5867 :     isinstance = PyObject_IsInstance(obj, (PyObject *)Load_type);

  0000d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Load_type
  00014	48 8b f9	 mov	 rdi, rcx
  00017	e8 00 00 00 00	 call	 PyObject_IsInstance

; 5868 :     if (isinstance == -1) {

  0001c	83 f8 ff	 cmp	 eax, -1

; 5869 :         return 1;

  0001f	0f 84 10 01 00
	00		 je	 $LN15@obj2ast_ex

; 5870 :     }
; 5871 :     if (isinstance) {

  00025	85 c0		 test	 eax, eax
  00027	74 13		 je	 SHORT $LN11@obj2ast_ex

; 5872 :         *out = Load;

  00029	c7 03 01 00 00
	00		 mov	 DWORD PTR [rbx], 1

; 5873 :         return 0;

  0002f	33 c0		 xor	 eax, eax

; 5918 : }

  00031	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00036	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003a	5f		 pop	 rdi
  0003b	c3		 ret	 0
$LN11@obj2ast_ex:

; 5874 :     }
; 5875 :     isinstance = PyObject_IsInstance(obj, (PyObject *)Store_type);

  0003c	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Store_type
  00043	48 8b cf	 mov	 rcx, rdi
  00046	e8 00 00 00 00	 call	 PyObject_IsInstance

; 5876 :     if (isinstance == -1) {

  0004b	83 f8 ff	 cmp	 eax, -1

; 5877 :         return 1;

  0004e	0f 84 e1 00 00
	00		 je	 $LN15@obj2ast_ex

; 5878 :     }
; 5879 :     if (isinstance) {

  00054	85 c0		 test	 eax, eax
  00056	74 13		 je	 SHORT $LN9@obj2ast_ex

; 5880 :         *out = Store;

  00058	c7 03 02 00 00
	00		 mov	 DWORD PTR [rbx], 2

; 5881 :         return 0;

  0005e	33 c0		 xor	 eax, eax

; 5918 : }

  00060	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00065	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00069	5f		 pop	 rdi
  0006a	c3		 ret	 0
$LN9@obj2ast_ex:

; 5882 :     }
; 5883 :     isinstance = PyObject_IsInstance(obj, (PyObject *)Del_type);

  0006b	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Del_type
  00072	48 8b cf	 mov	 rcx, rdi
  00075	e8 00 00 00 00	 call	 PyObject_IsInstance

; 5884 :     if (isinstance == -1) {

  0007a	83 f8 ff	 cmp	 eax, -1

; 5885 :         return 1;

  0007d	0f 84 b2 00 00
	00		 je	 $LN15@obj2ast_ex

; 5886 :     }
; 5887 :     if (isinstance) {

  00083	85 c0		 test	 eax, eax
  00085	74 13		 je	 SHORT $LN7@obj2ast_ex

; 5888 :         *out = Del;

  00087	c7 03 03 00 00
	00		 mov	 DWORD PTR [rbx], 3

; 5889 :         return 0;

  0008d	33 c0		 xor	 eax, eax

; 5918 : }

  0008f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00094	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00098	5f		 pop	 rdi
  00099	c3		 ret	 0
$LN7@obj2ast_ex:

; 5890 :     }
; 5891 :     isinstance = PyObject_IsInstance(obj, (PyObject *)AugLoad_type);

  0009a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR AugLoad_type
  000a1	48 8b cf	 mov	 rcx, rdi
  000a4	e8 00 00 00 00	 call	 PyObject_IsInstance

; 5892 :     if (isinstance == -1) {

  000a9	83 f8 ff	 cmp	 eax, -1

; 5893 :         return 1;

  000ac	0f 84 83 00 00
	00		 je	 $LN15@obj2ast_ex

; 5894 :     }
; 5895 :     if (isinstance) {

  000b2	85 c0		 test	 eax, eax
  000b4	74 13		 je	 SHORT $LN5@obj2ast_ex

; 5896 :         *out = AugLoad;

  000b6	c7 03 04 00 00
	00		 mov	 DWORD PTR [rbx], 4

; 5897 :         return 0;

  000bc	33 c0		 xor	 eax, eax

; 5918 : }

  000be	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000c3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c7	5f		 pop	 rdi
  000c8	c3		 ret	 0
$LN5@obj2ast_ex:

; 5898 :     }
; 5899 :     isinstance = PyObject_IsInstance(obj, (PyObject *)AugStore_type);

  000c9	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR AugStore_type
  000d0	48 8b cf	 mov	 rcx, rdi
  000d3	e8 00 00 00 00	 call	 PyObject_IsInstance

; 5900 :     if (isinstance == -1) {

  000d8	83 f8 ff	 cmp	 eax, -1

; 5901 :         return 1;

  000db	74 58		 je	 SHORT $LN15@obj2ast_ex

; 5902 :     }
; 5903 :     if (isinstance) {

  000dd	85 c0		 test	 eax, eax
  000df	74 13		 je	 SHORT $LN3@obj2ast_ex

; 5904 :         *out = AugStore;

  000e1	c7 03 05 00 00
	00		 mov	 DWORD PTR [rbx], 5

; 5905 :         return 0;

  000e7	33 c0		 xor	 eax, eax

; 5918 : }

  000e9	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000ee	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000f2	5f		 pop	 rdi
  000f3	c3		 ret	 0
$LN3@obj2ast_ex:

; 5906 :     }
; 5907 :     isinstance = PyObject_IsInstance(obj, (PyObject *)Param_type);

  000f4	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Param_type
  000fb	48 8b cf	 mov	 rcx, rdi
  000fe	e8 00 00 00 00	 call	 PyObject_IsInstance

; 5908 :     if (isinstance == -1) {

  00103	83 f8 ff	 cmp	 eax, -1

; 5909 :         return 1;

  00106	74 2d		 je	 SHORT $LN15@obj2ast_ex

; 5910 :     }
; 5911 :     if (isinstance) {

  00108	85 c0		 test	 eax, eax
  0010a	74 13		 je	 SHORT $LN1@obj2ast_ex

; 5912 :         *out = Param;

  0010c	c7 03 06 00 00
	00		 mov	 DWORD PTR [rbx], 6

; 5913 :         return 0;

  00112	33 c0		 xor	 eax, eax

; 5918 : }

  00114	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00119	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0011d	5f		 pop	 rdi
  0011e	c3		 ret	 0
$LN1@obj2ast_ex:

; 5914 :     }
; 5915 : 
; 5916 :     PyErr_Format(PyExc_TypeError, "expected some sort of expr_context, but got %R", obj);

  0011f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00126	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@NKGMBLMP@expected?5some?5sort?5of?5expr_conte@
  0012d	4c 8b c7	 mov	 r8, rdi
  00130	e8 00 00 00 00	 call	 PyErr_Format
$LN15@obj2ast_ex:

; 5917 :     return 1;

  00135	b8 01 00 00 00	 mov	 eax, 1

; 5918 : }

  0013a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0013f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00143	5f		 pop	 rdi
  00144	c3		 ret	 0
obj2ast_expr_context ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@OCAPFKOE@expected?5some?5sort?5of?5slice?0?5but@ ; `string'
PUBLIC	??_C@_0CK@MNFJEEPO@required?5field?5?$CCvalue?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_0CM@EIBLNBO@required?5field?5?$CCdims?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0DD@COCDNLKF@ExtSlice?5field?5?$CCdims?$CC?5must?5be?5a?5@ ; `string'
PUBLIC	??_C@_0O@OHAMIFBN@obj2ast_slice?$AA@		; `string'
EXTRN	asdl_seq_new:PROC
EXTRN	_PyObject_HasAttrId:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_slice DD imagerel obj2ast_slice
	DD	imagerel obj2ast_slice+1200
	DD	imagerel $unwind$obj2ast_slice
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_slice DD 051201H
	DD	0700e8212H
	DD	0500c600dH
	DD	0300bH
xdata	ENDS
;	COMDAT ??_C@_0CI@OCAPFKOE@expected?5some?5sort?5of?5slice?0?5but@
CONST	SEGMENT
??_C@_0CI@OCAPFKOE@expected?5some?5sort?5of?5slice?0?5but@ DB 'expected s'
	DB	'ome sort of slice, but got %R', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@MNFJEEPO@required?5field?5?$CCvalue?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CK@MNFJEEPO@required?5field?5?$CCvalue?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "value" missing from Index', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@EIBLNBO@required?5field?5?$CCdims?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CM@EIBLNBO@required?5field?5?$CCdims?$CC?5missing?5fr@ DB 'require'
	DB	'd field "dims" missing from ExtSlice', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@COCDNLKF@ExtSlice?5field?5?$CCdims?$CC?5must?5be?5a?5@
CONST	SEGMENT
??_C@_0DD@COCDNLKF@ExtSlice?5field?5?$CCdims?$CC?5must?5be?5a?5@ DB 'ExtS'
	DB	'lice field "dims" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OHAMIFBN@obj2ast_slice?$AA@
CONST	SEGMENT
??_C@_0O@OHAMIFBN@obj2ast_slice?$AA@ DB 'obj2ast_slice', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT obj2ast_slice
_TEXT	SEGMENT
upper$27074 = 48
lower$27073 = 56
tv467 = 112
value$27162 = 112
value$27144 = 112
obj$ = 112
out$ = 120
arena$ = 128
step$27075 = 136
obj2ast_slice PROC					; COMDAT

; 5922 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	53		 push	 rbx
  0000b	55		 push	 rbp
  0000c	56		 push	 rsi
  0000d	57		 push	 rdi
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 5923 :     int isinstance;
; 5924 : 
; 5925 :     PyObject *tmp = NULL;
; 5926 : 
; 5927 :     if (obj == Py_None) {

  00012	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00019	33 db		 xor	 ebx, ebx
  0001b	49 8b e8	 mov	 rbp, r8
  0001e	48 8b f2	 mov	 rsi, rdx
  00021	48 8b f9	 mov	 rdi, rcx
  00024	48 3b c8	 cmp	 rcx, rax
  00027	75 0e		 jne	 SHORT $LN59@obj2ast_sl

; 5928 :         *out = NULL;

  00029	48 89 1a	 mov	 QWORD PTR [rdx], rbx
$LN66@obj2ast_sl:

; 5929 :         return 0;

  0002c	33 c0		 xor	 eax, eax

; 6036 : }

  0002e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00032	5f		 pop	 rdi
  00033	5e		 pop	 rsi
  00034	5d		 pop	 rbp
  00035	5b		 pop	 rbx
  00036	c3		 ret	 0
$LN59@obj2ast_sl:

; 5930 :     }
; 5931 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Slice_type);

  00037	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Slice_type
  0003e	e8 00 00 00 00	 call	 PyObject_IsInstance

; 5932 :     if (isinstance == -1) {

  00043	83 f8 ff	 cmp	 eax, -1

; 5933 :         return 1;

  00046	0f 84 56 04 00
	00		 je	 $LN3@obj2ast_sl

; 5934 :     }
; 5935 :     if (isinstance) {

  0004c	85 c0		 test	 eax, eax
  0004e	0f 84 dd 01 00
	00		 je	 $LN57@obj2ast_sl

; 5936 :         expr_ty lower;
; 5937 :         expr_ty upper;
; 5938 :         expr_ty step;
; 5939 : 
; 5940 :         if (_PyObject_HasAttrId(obj, &PyId_lower)) {

  00054	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0005a	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00063	be 00 00 00 00	 mov	 esi, OFFSET FLAT:PyId_lower
  00068	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  0006c	48 8b cf	 mov	 rcx, rdi
  0006f	48 03 f0	 add	 rsi, rax
  00072	48 89 44 24 70	 mov	 QWORD PTR tv467[rsp], rax
  00077	48 8b d6	 mov	 rdx, rsi
  0007a	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0007f	85 c0		 test	 eax, eax
  00081	74 63		 je	 SHORT $LN56@obj2ast_sl

; 5941 :             int res;
; 5942 :             tmp = _PyObject_GetAttrId(obj, &PyId_lower);

  00083	48 8b d6	 mov	 rdx, rsi
  00086	48 8b cf	 mov	 rcx, rdi
  00089	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0008e	48 8b d8	 mov	 rbx, rax

; 5943 :             if (tmp == NULL) goto failed;

  00091	48 85 c0	 test	 rax, rax
  00094	0f 84 08 04 00
	00		 je	 $LN3@obj2ast_sl

; 5944 :             res = obj2ast_expr(tmp, &lower, arena);

  0009a	48 8d 54 24 38	 lea	 rdx, QWORD PTR lower$27073[rsp]
  0009f	4c 8b c5	 mov	 r8, rbp
  000a2	48 8b c8	 mov	 rcx, rax
  000a5	e8 00 00 00 00	 call	 obj2ast_expr

; 5945 :             if (res != 0) goto failed;

  000aa	85 c0		 test	 eax, eax
  000ac	0f 85 9e 03 00
	00		 jne	 $failed$27080

; 5946 :             Py_CLEAR(tmp);

  000b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  000b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@OHAMIFBN@obj2ast_slice?$AA@
  000c0	4c 8b cb	 mov	 r9, rbx
  000c3	41 b8 3a 17 00
	00		 mov	 r8d, 5946		; 0000173aH
  000c9	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d1	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d6	85 c0		 test	 eax, eax
  000d8	75 11		 jne	 SHORT $LN49@obj2ast_sl
  000da	48 8b cb	 mov	 rcx, rbx
  000dd	33 db		 xor	 ebx, ebx
  000df	e8 00 00 00 00	 call	 _Py_DecRef

; 5947 :         } else {

  000e4	eb 05		 jmp	 SHORT $LN49@obj2ast_sl
$LN56@obj2ast_sl:

; 5948 :             lower = NULL;

  000e6	48 89 5c 24 38	 mov	 QWORD PTR lower$27073[rsp], rbx
$LN49@obj2ast_sl:

; 5949 :         }
; 5950 :         if (_PyObject_HasAttrId(obj, &PyId_upper)) {

  000eb	be 00 00 00 00	 mov	 esi, OFFSET FLAT:PyId_upper
  000f0	48 8b cf	 mov	 rcx, rdi
  000f3	48 03 74 24 70	 add	 rsi, QWORD PTR tv467[rsp]
  000f8	48 8b d6	 mov	 rdx, rsi
  000fb	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00100	85 c0		 test	 eax, eax
  00102	74 63		 je	 SHORT $LN48@obj2ast_sl

; 5951 :             int res;
; 5952 :             tmp = _PyObject_GetAttrId(obj, &PyId_upper);

  00104	48 8b d6	 mov	 rdx, rsi
  00107	48 8b cf	 mov	 rcx, rdi
  0010a	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0010f	48 8b d8	 mov	 rbx, rax

; 5953 :             if (tmp == NULL) goto failed;

  00112	48 85 c0	 test	 rax, rax
  00115	0f 84 87 03 00
	00		 je	 $LN3@obj2ast_sl

; 5954 :             res = obj2ast_expr(tmp, &upper, arena);

  0011b	48 8d 54 24 30	 lea	 rdx, QWORD PTR upper$27074[rsp]
  00120	4c 8b c5	 mov	 r8, rbp
  00123	48 8b c8	 mov	 rcx, rax
  00126	e8 00 00 00 00	 call	 obj2ast_expr

; 5955 :             if (res != 0) goto failed;

  0012b	85 c0		 test	 eax, eax
  0012d	0f 85 1d 03 00
	00		 jne	 $failed$27080

; 5956 :             Py_CLEAR(tmp);

  00133	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0013a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@OHAMIFBN@obj2ast_slice?$AA@
  00141	4c 8b cb	 mov	 r9, rbx
  00144	41 b8 44 17 00
	00		 mov	 r8d, 5956		; 00001744H
  0014a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00152	e8 00 00 00 00	 call	 _PyParallel_Guard
  00157	85 c0		 test	 eax, eax
  00159	75 15		 jne	 SHORT $LN41@obj2ast_sl
  0015b	48 8b cb	 mov	 rcx, rbx
  0015e	33 db		 xor	 ebx, ebx
  00160	e8 00 00 00 00	 call	 _Py_DecRef

; 5957 :         } else {

  00165	eb 09		 jmp	 SHORT $LN41@obj2ast_sl
$LN48@obj2ast_sl:

; 5958 :             upper = NULL;

  00167	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR upper$27074[rsp], 0
$LN41@obj2ast_sl:

; 5959 :         }
; 5960 :         if (_PyObject_HasAttrId(obj, &PyId_step)) {

  00170	be 00 00 00 00	 mov	 esi, OFFSET FLAT:PyId_step
  00175	48 8b cf	 mov	 rcx, rdi
  00178	48 03 74 24 70	 add	 rsi, QWORD PTR tv467[rsp]
  0017d	48 8b d6	 mov	 rdx, rsi
  00180	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00185	85 c0		 test	 eax, eax
  00187	74 66		 je	 SHORT $LN40@obj2ast_sl

; 5961 :             int res;
; 5962 :             tmp = _PyObject_GetAttrId(obj, &PyId_step);

  00189	48 8b d6	 mov	 rdx, rsi
  0018c	48 8b cf	 mov	 rcx, rdi
  0018f	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00194	48 8b d8	 mov	 rbx, rax

; 5963 :             if (tmp == NULL) goto failed;

  00197	48 85 c0	 test	 rax, rax
  0019a	0f 84 02 03 00
	00		 je	 $LN3@obj2ast_sl

; 5964 :             res = obj2ast_expr(tmp, &step, arena);

  001a0	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR step$27075[rsp]
  001a8	4c 8b c5	 mov	 r8, rbp
  001ab	48 8b c8	 mov	 rcx, rax
  001ae	e8 00 00 00 00	 call	 obj2ast_expr

; 5965 :             if (res != 0) goto failed;

  001b3	85 c0		 test	 eax, eax
  001b5	0f 85 95 02 00
	00		 jne	 $failed$27080

; 5966 :             Py_CLEAR(tmp);

  001bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  001c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@OHAMIFBN@obj2ast_slice?$AA@
  001c9	4c 8b cb	 mov	 r9, rbx
  001cc	41 b8 4e 17 00
	00		 mov	 r8d, 5966		; 0000174eH
  001d2	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001da	e8 00 00 00 00	 call	 _PyParallel_Guard
  001df	85 c0		 test	 eax, eax
  001e1	75 18		 jne	 SHORT $LN33@obj2ast_sl
  001e3	48 8b cb	 mov	 rcx, rbx
  001e6	33 db		 xor	 ebx, ebx
  001e8	e8 00 00 00 00	 call	 _Py_DecRef

; 5967 :         } else {

  001ed	eb 0c		 jmp	 SHORT $LN33@obj2ast_sl
$LN40@obj2ast_sl:

; 5968 :             step = NULL;

  001ef	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR step$27075[rsp], 0
$LN33@obj2ast_sl:

; 5969 :         }
; 5970 :         *out = Slice(lower, upper, step, arena);

  001fb	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR step$27075[rsp]
  00203	48 8b 54 24 30	 mov	 rdx, QWORD PTR upper$27074[rsp]
  00208	48 8b 4c 24 38	 mov	 rcx, QWORD PTR lower$27073[rsp]
  0020d	4c 8b cd	 mov	 r9, rbp
  00210	e8 00 00 00 00	 call	 _Py_Slice
$LN67@obj2ast_sl:
  00215	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  0021a	48 89 01	 mov	 QWORD PTR [rcx], rax

; 5971 :         if (*out == NULL) goto failed;

  0021d	48 85 c0	 test	 rax, rax
  00220	0f 84 2a 02 00
	00		 je	 $failed$27080

; 5972 :         return 0;

  00226	33 c0		 xor	 eax, eax

; 6036 : }

  00228	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0022c	5f		 pop	 rdi
  0022d	5e		 pop	 rsi
  0022e	5d		 pop	 rbp
  0022f	5b		 pop	 rbx
  00230	c3		 ret	 0
$LN57@obj2ast_sl:

; 5973 :     }
; 5974 :     isinstance = PyObject_IsInstance(obj, (PyObject*)ExtSlice_type);

  00231	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ExtSlice_type
  00238	48 8b cf	 mov	 rcx, rdi
  0023b	e8 00 00 00 00	 call	 PyObject_IsInstance

; 5975 :     if (isinstance == -1) {

  00240	83 f8 ff	 cmp	 eax, -1

; 5976 :         return 1;

  00243	0f 84 59 02 00
	00		 je	 $LN3@obj2ast_sl

; 5977 :     }
; 5978 :     if (isinstance) {

  00249	85 c0		 test	 eax, eax
  0024b	0f 84 3b 01 00
	00		 je	 $LN30@obj2ast_sl

; 5979 :         asdl_seq* dims;
; 5980 : 
; 5981 :         if (_PyObject_HasAttrId(obj, &PyId_dims)) {

  00251	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00257	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00260	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_dims
  00265	48 8b 1c c8	 mov	 rbx, QWORD PTR [rax+rcx*8]
  00269	48 8b cf	 mov	 rcx, rdi
  0026c	48 03 da	 add	 rbx, rdx
  0026f	48 8b d3	 mov	 rdx, rbx
  00272	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00277	85 c0		 test	 eax, eax
  00279	0f 84 ec 00 00
	00		 je	 $LN29@obj2ast_sl

; 5982 :             int res;
; 5983 :             Py_ssize_t len;
; 5984 :             Py_ssize_t i;
; 5985 :             tmp = _PyObject_GetAttrId(obj, &PyId_dims);

  0027f	48 8b d3	 mov	 rdx, rbx
  00282	48 8b cf	 mov	 rcx, rdi
  00285	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0028a	48 8b d8	 mov	 rbx, rax

; 5986 :             if (tmp == NULL) goto failed;

  0028d	48 85 c0	 test	 rax, rax
  00290	0f 84 0c 02 00
	00		 je	 $LN3@obj2ast_sl

; 5987 :             if (!PyList_Check(tmp)) {

  00296	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  0029a	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  002a5	75 1c		 jne	 SHORT $LN27@obj2ast_sl

; 5988 :                 PyErr_Format(PyExc_TypeError, "ExtSlice field \"dims\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  002a7	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  002ab	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  002b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@COCDNLKF@ExtSlice?5field?5?$CCdims?$CC?5must?5be?5a?5@
  002b9	e8 00 00 00 00	 call	 PyErr_Format

; 5989 :                 goto failed;

  002be	e9 8d 01 00 00	 jmp	 $failed$27080
$LN27@obj2ast_sl:

; 5990 :             }
; 5991 :             len = PyList_GET_SIZE(tmp);

  002c3	48 8b 70 60	 mov	 rsi, QWORD PTR [rax+96]

; 5992 :             dims = asdl_seq_new(len, arena);

  002c7	48 8b d5	 mov	 rdx, rbp
  002ca	48 8b ce	 mov	 rcx, rsi
  002cd	e8 00 00 00 00	 call	 asdl_seq_new
  002d2	48 8b e8	 mov	 rbp, rax

; 5993 :             if (dims == NULL) goto failed;

  002d5	48 85 c0	 test	 rax, rax
  002d8	0f 84 72 01 00
	00		 je	 $failed$27080

; 5994 :             for (i = 0; i < len; i++) {

  002de	33 ff		 xor	 edi, edi
  002e0	48 85 f6	 test	 rsi, rsi
  002e3	7e 3f		 jle	 SHORT $LN21@obj2ast_sl
  002e5	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL25@obj2ast_sl:

; 5995 :                 slice_ty value;
; 5996 :                 res = obj2ast_slice(PyList_GET_ITEM(tmp, i), &value, arena);

  002f0	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  002f4	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  002fc	48 8d 54 24 70	 lea	 rdx, QWORD PTR value$27144[rsp]
  00301	48 8b 0c f9	 mov	 rcx, QWORD PTR [rcx+rdi*8]
  00305	e8 00 00 00 00	 call	 obj2ast_slice

; 5997 :                 if (res != 0) goto failed;

  0030a	85 c0		 test	 eax, eax
  0030c	0f 85 3e 01 00
	00		 jne	 $failed$27080

; 5998 :                 asdl_seq_SET(dims, i, value);

  00312	48 8b 44 24 70	 mov	 rax, QWORD PTR value$27144[rsp]
  00317	48 ff c7	 inc	 rdi
  0031a	48 89 44 fd 00	 mov	 QWORD PTR [rbp+rdi*8], rax
  0031f	48 3b fe	 cmp	 rdi, rsi
  00322	7c cc		 jl	 SHORT $LL25@obj2ast_sl
$LN21@obj2ast_sl:

; 5999 :             }
; 6000 :             Py_CLEAR(tmp);

  00324	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0032b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@OHAMIFBN@obj2ast_slice?$AA@
  00332	4c 8b cb	 mov	 r9, rbx
  00335	41 b8 70 17 00
	00		 mov	 r8d, 6000		; 00001770H
  0033b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00343	e8 00 00 00 00	 call	 _PyParallel_Guard
  00348	85 c0		 test	 eax, eax
  0034a	75 0a		 jne	 SHORT $LN20@obj2ast_sl
  0034c	48 8b cb	 mov	 rcx, rbx
  0034f	33 db		 xor	 ebx, ebx
  00351	e8 00 00 00 00	 call	 _Py_DecRef
$LN20@obj2ast_sl:

; 6003 :             return 1;
; 6004 :         }
; 6005 :         *out = ExtSlice(dims, arena);

  00356	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  0035e	48 8b cd	 mov	 rcx, rbp
  00361	e8 00 00 00 00	 call	 _Py_ExtSlice

; 6006 :         if (*out == NULL) goto failed;
; 6007 :         return 0;

  00366	e9 aa fe ff ff	 jmp	 $LN67@obj2ast_sl
$LN29@obj2ast_sl:

; 6001 :         } else {
; 6002 :             PyErr_SetString(PyExc_TypeError, "required field \"dims\" missing from ExtSlice");

  0036b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00372	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@EIBLNBO@required?5field?5?$CCdims?$CC?5missing?5fr@
  00379	e8 00 00 00 00	 call	 PyErr_SetString

; 6035 :     return 1;

  0037e	b8 01 00 00 00	 mov	 eax, 1

; 6036 : }

  00383	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00387	5f		 pop	 rdi
  00388	5e		 pop	 rsi
  00389	5d		 pop	 rbp
  0038a	5b		 pop	 rbx
  0038b	c3		 ret	 0
$LN30@obj2ast_sl:

; 6008 :     }
; 6009 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Index_type);

  0038c	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Index_type
  00393	48 8b cf	 mov	 rcx, rdi
  00396	e8 00 00 00 00	 call	 PyObject_IsInstance

; 6010 :     if (isinstance == -1) {

  0039b	83 f8 ff	 cmp	 eax, -1

; 6011 :         return 1;

  0039e	0f 84 fe 00 00
	00		 je	 $LN3@obj2ast_sl

; 6012 :     }
; 6013 :     if (isinstance) {

  003a4	85 c0		 test	 eax, eax
  003a6	0f 84 e0 00 00
	00		 je	 $LN14@obj2ast_sl

; 6014 :         expr_ty value;
; 6015 : 
; 6016 :         if (_PyObject_HasAttrId(obj, &PyId_value)) {

  003ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  003b2	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  003bb	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_value
  003c0	48 8b 1c c8	 mov	 rbx, QWORD PTR [rax+rcx*8]
  003c4	48 8b cf	 mov	 rcx, rdi
  003c7	48 03 da	 add	 rbx, rdx
  003ca	48 8b d3	 mov	 rdx, rbx
  003cd	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  003d2	85 c0		 test	 eax, eax
  003d4	0f 84 91 00 00
	00		 je	 $LN13@obj2ast_sl

; 6017 :             int res;
; 6018 :             tmp = _PyObject_GetAttrId(obj, &PyId_value);

  003da	48 8b d3	 mov	 rdx, rbx
  003dd	48 8b cf	 mov	 rcx, rdi
  003e0	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  003e5	48 8b d8	 mov	 rbx, rax

; 6019 :             if (tmp == NULL) goto failed;

  003e8	48 85 c0	 test	 rax, rax
  003eb	0f 84 b1 00 00
	00		 je	 $LN3@obj2ast_sl

; 6020 :             res = obj2ast_expr(tmp, &value, arena);

  003f1	48 8d 54 24 70	 lea	 rdx, QWORD PTR value$27162[rsp]
  003f6	4c 8b c5	 mov	 r8, rbp
  003f9	48 8b c8	 mov	 rcx, rax
  003fc	e8 00 00 00 00	 call	 obj2ast_expr

; 6021 :             if (res != 0) goto failed;

  00401	85 c0		 test	 eax, eax
  00403	75 4b		 jne	 SHORT $failed$27080

; 6022 :             Py_CLEAR(tmp);

  00405	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0040c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@OHAMIFBN@obj2ast_slice?$AA@
  00413	4c 8b cb	 mov	 r9, rbx
  00416	41 b8 86 17 00
	00		 mov	 r8d, 6022		; 00001786H
  0041c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00424	e8 00 00 00 00	 call	 _PyParallel_Guard
  00429	85 c0		 test	 eax, eax
  0042b	75 0a		 jne	 SHORT $LN9@obj2ast_sl
  0042d	48 8b cb	 mov	 rcx, rbx
  00430	33 db		 xor	 ebx, ebx
  00432	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@obj2ast_sl:

; 6025 :             return 1;
; 6026 :         }
; 6027 :         *out = Index(value, arena);

  00437	48 8b 4c 24 70	 mov	 rcx, QWORD PTR value$27162[rsp]
  0043c	48 8b d5	 mov	 rdx, rbp
  0043f	e8 00 00 00 00	 call	 _Py_Index
  00444	48 89 06	 mov	 QWORD PTR [rsi], rax

; 6028 :         if (*out == NULL) goto failed;

  00447	48 85 c0	 test	 rax, rax

; 6029 :         return 0;

  0044a	0f 85 dc fb ff
	ff		 jne	 $LN66@obj2ast_sl
$failed$27080:

; 6033 :     failed:
; 6034 :     Py_XDECREF(tmp);

  00450	48 85 db	 test	 rbx, rbx
  00453	74 4d		 je	 SHORT $LN3@obj2ast_sl
  00455	48 8b cb	 mov	 rcx, rbx
  00458	e8 00 00 00 00	 call	 _Py_DecRef

; 6035 :     return 1;

  0045d	b8 01 00 00 00	 mov	 eax, 1

; 6036 : }

  00462	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00466	5f		 pop	 rdi
  00467	5e		 pop	 rsi
  00468	5d		 pop	 rbp
  00469	5b		 pop	 rbx
  0046a	c3		 ret	 0
$LN13@obj2ast_sl:

; 6023 :         } else {
; 6024 :             PyErr_SetString(PyExc_TypeError, "required field \"value\" missing from Index");

  0046b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00472	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@MNFJEEPO@required?5field?5?$CCvalue?$CC?5missing?5f@
  00479	e8 00 00 00 00	 call	 PyErr_SetString

; 6035 :     return 1;

  0047e	b8 01 00 00 00	 mov	 eax, 1

; 6036 : }

  00483	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00487	5f		 pop	 rdi
  00488	5e		 pop	 rsi
  00489	5d		 pop	 rbp
  0048a	5b		 pop	 rbx
  0048b	c3		 ret	 0
$LN14@obj2ast_sl:

; 6030 :     }
; 6031 : 
; 6032 :     PyErr_Format(PyExc_TypeError, "expected some sort of slice, but got %R", obj);

  0048c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00493	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@OCAPFKOE@expected?5some?5sort?5of?5slice?0?5but@
  0049a	4c 8b c7	 mov	 r8, rdi
  0049d	e8 00 00 00 00	 call	 PyErr_Format
$LN3@obj2ast_sl:

; 6035 :     return 1;

  004a2	b8 01 00 00 00	 mov	 eax, 1

; 6036 : }

  004a7	48 83 c4 48	 add	 rsp, 72			; 00000048H
  004ab	5f		 pop	 rdi
  004ac	5e		 pop	 rsi
  004ad	5d		 pop	 rbp
  004ae	5b		 pop	 rbx
  004af	c3		 ret	 0
obj2ast_slice ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@JBAHCNPG@expected?5some?5sort?5of?5boolop?0?5bu@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_boolop DD imagerel obj2ast_boolop
	DD	imagerel obj2ast_boolop+137
	DD	imagerel $unwind$obj2ast_boolop
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_boolop DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CJ@JBAHCNPG@expected?5some?5sort?5of?5boolop?0?5bu@
CONST	SEGMENT
??_C@_0CJ@JBAHCNPG@expected?5some?5sort?5of?5boolop?0?5bu@ DB 'expected s'
	DB	'ome sort of boolop, but got %R', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT obj2ast_boolop
_TEXT	SEGMENT
obj$ = 48
out$ = 56
obj2ast_boolop PROC					; COMDAT

; 6040 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx

; 6041 :     int isinstance;
; 6042 : 
; 6043 :     isinstance = PyObject_IsInstance(obj, (PyObject *)And_type);

  0000d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR And_type
  00014	48 8b f9	 mov	 rdi, rcx
  00017	e8 00 00 00 00	 call	 PyObject_IsInstance

; 6044 :     if (isinstance == -1) {

  0001c	83 f8 ff	 cmp	 eax, -1

; 6045 :         return 1;

  0001f	74 58		 je	 SHORT $LN7@obj2ast_bo

; 6046 :     }
; 6047 :     if (isinstance) {

  00021	85 c0		 test	 eax, eax
  00023	74 13		 je	 SHORT $LN3@obj2ast_bo

; 6048 :         *out = And;

  00025	c7 03 01 00 00
	00		 mov	 DWORD PTR [rbx], 1

; 6049 :         return 0;

  0002b	33 c0		 xor	 eax, eax

; 6062 : }

  0002d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00032	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00036	5f		 pop	 rdi
  00037	c3		 ret	 0
$LN3@obj2ast_bo:

; 6050 :     }
; 6051 :     isinstance = PyObject_IsInstance(obj, (PyObject *)Or_type);

  00038	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Or_type
  0003f	48 8b cf	 mov	 rcx, rdi
  00042	e8 00 00 00 00	 call	 PyObject_IsInstance

; 6052 :     if (isinstance == -1) {

  00047	83 f8 ff	 cmp	 eax, -1

; 6053 :         return 1;

  0004a	74 2d		 je	 SHORT $LN7@obj2ast_bo

; 6054 :     }
; 6055 :     if (isinstance) {

  0004c	85 c0		 test	 eax, eax
  0004e	74 13		 je	 SHORT $LN1@obj2ast_bo

; 6056 :         *out = Or;

  00050	c7 03 02 00 00
	00		 mov	 DWORD PTR [rbx], 2

; 6057 :         return 0;

  00056	33 c0		 xor	 eax, eax

; 6062 : }

  00058	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00061	5f		 pop	 rdi
  00062	c3		 ret	 0
$LN1@obj2ast_bo:

; 6058 :     }
; 6059 : 
; 6060 :     PyErr_Format(PyExc_TypeError, "expected some sort of boolop, but got %R", obj);

  00063	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@JBAHCNPG@expected?5some?5sort?5of?5boolop?0?5bu@
  00071	4c 8b c7	 mov	 r8, rdi
  00074	e8 00 00 00 00	 call	 PyErr_Format
$LN7@obj2ast_bo:

; 6061 :     return 1;

  00079	b8 01 00 00 00	 mov	 eax, 1

; 6062 : }

  0007e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00083	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00087	5f		 pop	 rdi
  00088	c3		 ret	 0
obj2ast_boolop ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@LEJHHHPD@expected?5some?5sort?5of?5operator?0?5@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_operator DD imagerel obj2ast_operator
	DD	imagerel obj2ast_operator+607
	DD	imagerel $unwind$obj2ast_operator
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_operator DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CL@LEJHHHPD@expected?5some?5sort?5of?5operator?0?5@
CONST	SEGMENT
??_C@_0CL@LEJHHHPD@expected?5some?5sort?5of?5operator?0?5@ DB 'expected s'
	DB	'ome sort of operator, but got %R', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT obj2ast_operator
_TEXT	SEGMENT
obj$ = 48
out$ = 56
obj2ast_operator PROC					; COMDAT

; 6066 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx

; 6067 :     int isinstance;
; 6068 : 
; 6069 :     isinstance = PyObject_IsInstance(obj, (PyObject *)Add_type);

  0000d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Add_type
  00014	48 8b f9	 mov	 rdi, rcx
  00017	e8 00 00 00 00	 call	 PyObject_IsInstance

; 6070 :     if (isinstance == -1) {

  0001c	83 f8 ff	 cmp	 eax, -1

; 6071 :         return 1;

  0001f	0f 84 2a 02 00
	00		 je	 $LN27@obj2ast_op

; 6072 :     }
; 6073 :     if (isinstance) {

  00025	85 c0		 test	 eax, eax
  00027	74 13		 je	 SHORT $LN23@obj2ast_op

; 6074 :         *out = Add;

  00029	c7 03 01 00 00
	00		 mov	 DWORD PTR [rbx], 1

; 6075 :         return 0;

  0002f	33 c0		 xor	 eax, eax

; 6168 : }

  00031	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00036	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003a	5f		 pop	 rdi
  0003b	c3		 ret	 0
$LN23@obj2ast_op:

; 6076 :     }
; 6077 :     isinstance = PyObject_IsInstance(obj, (PyObject *)Sub_type);

  0003c	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Sub_type
  00043	48 8b cf	 mov	 rcx, rdi
  00046	e8 00 00 00 00	 call	 PyObject_IsInstance

; 6078 :     if (isinstance == -1) {

  0004b	83 f8 ff	 cmp	 eax, -1

; 6079 :         return 1;

  0004e	0f 84 fb 01 00
	00		 je	 $LN27@obj2ast_op

; 6080 :     }
; 6081 :     if (isinstance) {

  00054	85 c0		 test	 eax, eax
  00056	74 13		 je	 SHORT $LN21@obj2ast_op

; 6082 :         *out = Sub;

  00058	c7 03 02 00 00
	00		 mov	 DWORD PTR [rbx], 2

; 6083 :         return 0;

  0005e	33 c0		 xor	 eax, eax

; 6168 : }

  00060	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00065	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00069	5f		 pop	 rdi
  0006a	c3		 ret	 0
$LN21@obj2ast_op:

; 6084 :     }
; 6085 :     isinstance = PyObject_IsInstance(obj, (PyObject *)Mult_type);

  0006b	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Mult_type
  00072	48 8b cf	 mov	 rcx, rdi
  00075	e8 00 00 00 00	 call	 PyObject_IsInstance

; 6086 :     if (isinstance == -1) {

  0007a	83 f8 ff	 cmp	 eax, -1

; 6087 :         return 1;

  0007d	0f 84 cc 01 00
	00		 je	 $LN27@obj2ast_op

; 6088 :     }
; 6089 :     if (isinstance) {

  00083	85 c0		 test	 eax, eax
  00085	74 13		 je	 SHORT $LN19@obj2ast_op

; 6090 :         *out = Mult;

  00087	c7 03 03 00 00
	00		 mov	 DWORD PTR [rbx], 3

; 6091 :         return 0;

  0008d	33 c0		 xor	 eax, eax

; 6168 : }

  0008f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00094	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00098	5f		 pop	 rdi
  00099	c3		 ret	 0
$LN19@obj2ast_op:

; 6092 :     }
; 6093 :     isinstance = PyObject_IsInstance(obj, (PyObject *)Div_type);

  0009a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Div_type
  000a1	48 8b cf	 mov	 rcx, rdi
  000a4	e8 00 00 00 00	 call	 PyObject_IsInstance

; 6094 :     if (isinstance == -1) {

  000a9	83 f8 ff	 cmp	 eax, -1

; 6095 :         return 1;

  000ac	0f 84 9d 01 00
	00		 je	 $LN27@obj2ast_op

; 6096 :     }
; 6097 :     if (isinstance) {

  000b2	85 c0		 test	 eax, eax
  000b4	74 13		 je	 SHORT $LN17@obj2ast_op

; 6098 :         *out = Div;

  000b6	c7 03 04 00 00
	00		 mov	 DWORD PTR [rbx], 4

; 6099 :         return 0;

  000bc	33 c0		 xor	 eax, eax

; 6168 : }

  000be	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000c3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c7	5f		 pop	 rdi
  000c8	c3		 ret	 0
$LN17@obj2ast_op:

; 6100 :     }
; 6101 :     isinstance = PyObject_IsInstance(obj, (PyObject *)Mod_type);

  000c9	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Mod_type
  000d0	48 8b cf	 mov	 rcx, rdi
  000d3	e8 00 00 00 00	 call	 PyObject_IsInstance

; 6102 :     if (isinstance == -1) {

  000d8	83 f8 ff	 cmp	 eax, -1

; 6103 :         return 1;

  000db	0f 84 6e 01 00
	00		 je	 $LN27@obj2ast_op

; 6104 :     }
; 6105 :     if (isinstance) {

  000e1	85 c0		 test	 eax, eax
  000e3	74 13		 je	 SHORT $LN15@obj2ast_op

; 6106 :         *out = Mod;

  000e5	c7 03 05 00 00
	00		 mov	 DWORD PTR [rbx], 5

; 6107 :         return 0;

  000eb	33 c0		 xor	 eax, eax

; 6168 : }

  000ed	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000f2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000f6	5f		 pop	 rdi
  000f7	c3		 ret	 0
$LN15@obj2ast_op:

; 6108 :     }
; 6109 :     isinstance = PyObject_IsInstance(obj, (PyObject *)Pow_type);

  000f8	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Pow_type
  000ff	48 8b cf	 mov	 rcx, rdi
  00102	e8 00 00 00 00	 call	 PyObject_IsInstance

; 6110 :     if (isinstance == -1) {

  00107	83 f8 ff	 cmp	 eax, -1

; 6111 :         return 1;

  0010a	0f 84 3f 01 00
	00		 je	 $LN27@obj2ast_op

; 6112 :     }
; 6113 :     if (isinstance) {

  00110	85 c0		 test	 eax, eax
  00112	74 13		 je	 SHORT $LN13@obj2ast_op

; 6114 :         *out = Pow;

  00114	c7 03 06 00 00
	00		 mov	 DWORD PTR [rbx], 6

; 6115 :         return 0;

  0011a	33 c0		 xor	 eax, eax

; 6168 : }

  0011c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00121	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00125	5f		 pop	 rdi
  00126	c3		 ret	 0
$LN13@obj2ast_op:

; 6116 :     }
; 6117 :     isinstance = PyObject_IsInstance(obj, (PyObject *)LShift_type);

  00127	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR LShift_type
  0012e	48 8b cf	 mov	 rcx, rdi
  00131	e8 00 00 00 00	 call	 PyObject_IsInstance

; 6118 :     if (isinstance == -1) {

  00136	83 f8 ff	 cmp	 eax, -1

; 6119 :         return 1;

  00139	0f 84 10 01 00
	00		 je	 $LN27@obj2ast_op

; 6120 :     }
; 6121 :     if (isinstance) {

  0013f	85 c0		 test	 eax, eax
  00141	74 13		 je	 SHORT $LN11@obj2ast_op

; 6122 :         *out = LShift;

  00143	c7 03 07 00 00
	00		 mov	 DWORD PTR [rbx], 7

; 6123 :         return 0;

  00149	33 c0		 xor	 eax, eax

; 6168 : }

  0014b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00150	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00154	5f		 pop	 rdi
  00155	c3		 ret	 0
$LN11@obj2ast_op:

; 6124 :     }
; 6125 :     isinstance = PyObject_IsInstance(obj, (PyObject *)RShift_type);

  00156	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR RShift_type
  0015d	48 8b cf	 mov	 rcx, rdi
  00160	e8 00 00 00 00	 call	 PyObject_IsInstance

; 6126 :     if (isinstance == -1) {

  00165	83 f8 ff	 cmp	 eax, -1

; 6127 :         return 1;

  00168	0f 84 e1 00 00
	00		 je	 $LN27@obj2ast_op

; 6128 :     }
; 6129 :     if (isinstance) {

  0016e	85 c0		 test	 eax, eax
  00170	74 13		 je	 SHORT $LN9@obj2ast_op

; 6130 :         *out = RShift;

  00172	c7 03 08 00 00
	00		 mov	 DWORD PTR [rbx], 8

; 6131 :         return 0;

  00178	33 c0		 xor	 eax, eax

; 6168 : }

  0017a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0017f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00183	5f		 pop	 rdi
  00184	c3		 ret	 0
$LN9@obj2ast_op:

; 6132 :     }
; 6133 :     isinstance = PyObject_IsInstance(obj, (PyObject *)BitOr_type);

  00185	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR BitOr_type
  0018c	48 8b cf	 mov	 rcx, rdi
  0018f	e8 00 00 00 00	 call	 PyObject_IsInstance

; 6134 :     if (isinstance == -1) {

  00194	83 f8 ff	 cmp	 eax, -1

; 6135 :         return 1;

  00197	0f 84 b2 00 00
	00		 je	 $LN27@obj2ast_op

; 6136 :     }
; 6137 :     if (isinstance) {

  0019d	85 c0		 test	 eax, eax
  0019f	74 13		 je	 SHORT $LN7@obj2ast_op

; 6138 :         *out = BitOr;

  001a1	c7 03 09 00 00
	00		 mov	 DWORD PTR [rbx], 9

; 6139 :         return 0;

  001a7	33 c0		 xor	 eax, eax

; 6168 : }

  001a9	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  001ae	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001b2	5f		 pop	 rdi
  001b3	c3		 ret	 0
$LN7@obj2ast_op:

; 6140 :     }
; 6141 :     isinstance = PyObject_IsInstance(obj, (PyObject *)BitXor_type);

  001b4	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR BitXor_type
  001bb	48 8b cf	 mov	 rcx, rdi
  001be	e8 00 00 00 00	 call	 PyObject_IsInstance

; 6142 :     if (isinstance == -1) {

  001c3	83 f8 ff	 cmp	 eax, -1

; 6143 :         return 1;

  001c6	0f 84 83 00 00
	00		 je	 $LN27@obj2ast_op

; 6144 :     }
; 6145 :     if (isinstance) {

  001cc	85 c0		 test	 eax, eax
  001ce	74 13		 je	 SHORT $LN5@obj2ast_op

; 6146 :         *out = BitXor;

  001d0	c7 03 0a 00 00
	00		 mov	 DWORD PTR [rbx], 10

; 6147 :         return 0;

  001d6	33 c0		 xor	 eax, eax

; 6168 : }

  001d8	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  001dd	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001e1	5f		 pop	 rdi
  001e2	c3		 ret	 0
$LN5@obj2ast_op:

; 6148 :     }
; 6149 :     isinstance = PyObject_IsInstance(obj, (PyObject *)BitAnd_type);

  001e3	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR BitAnd_type
  001ea	48 8b cf	 mov	 rcx, rdi
  001ed	e8 00 00 00 00	 call	 PyObject_IsInstance

; 6150 :     if (isinstance == -1) {

  001f2	83 f8 ff	 cmp	 eax, -1

; 6151 :         return 1;

  001f5	74 58		 je	 SHORT $LN27@obj2ast_op

; 6152 :     }
; 6153 :     if (isinstance) {

  001f7	85 c0		 test	 eax, eax
  001f9	74 13		 je	 SHORT $LN3@obj2ast_op

; 6154 :         *out = BitAnd;

  001fb	c7 03 0b 00 00
	00		 mov	 DWORD PTR [rbx], 11

; 6155 :         return 0;

  00201	33 c0		 xor	 eax, eax

; 6168 : }

  00203	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00208	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0020c	5f		 pop	 rdi
  0020d	c3		 ret	 0
$LN3@obj2ast_op:

; 6156 :     }
; 6157 :     isinstance = PyObject_IsInstance(obj, (PyObject *)FloorDiv_type);

  0020e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR FloorDiv_type
  00215	48 8b cf	 mov	 rcx, rdi
  00218	e8 00 00 00 00	 call	 PyObject_IsInstance

; 6158 :     if (isinstance == -1) {

  0021d	83 f8 ff	 cmp	 eax, -1

; 6159 :         return 1;

  00220	74 2d		 je	 SHORT $LN27@obj2ast_op

; 6160 :     }
; 6161 :     if (isinstance) {

  00222	85 c0		 test	 eax, eax
  00224	74 13		 je	 SHORT $LN1@obj2ast_op

; 6162 :         *out = FloorDiv;

  00226	c7 03 0c 00 00
	00		 mov	 DWORD PTR [rbx], 12

; 6163 :         return 0;

  0022c	33 c0		 xor	 eax, eax

; 6168 : }

  0022e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00233	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00237	5f		 pop	 rdi
  00238	c3		 ret	 0
$LN1@obj2ast_op:

; 6164 :     }
; 6165 : 
; 6166 :     PyErr_Format(PyExc_TypeError, "expected some sort of operator, but got %R", obj);

  00239	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00240	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@LEJHHHPD@expected?5some?5sort?5of?5operator?0?5@
  00247	4c 8b c7	 mov	 r8, rdi
  0024a	e8 00 00 00 00	 call	 PyErr_Format
$LN27@obj2ast_op:

; 6167 :     return 1;

  0024f	b8 01 00 00 00	 mov	 eax, 1

; 6168 : }

  00254	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00259	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0025d	5f		 pop	 rdi
  0025e	c3		 ret	 0
obj2ast_operator ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@DOFOGKPJ@expected?5some?5sort?5of?5unaryop?0?5b@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_unaryop DD imagerel obj2ast_unaryop
	DD	imagerel obj2ast_unaryop+231
	DD	imagerel $unwind$obj2ast_unaryop
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_unaryop DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CK@DOFOGKPJ@expected?5some?5sort?5of?5unaryop?0?5b@
CONST	SEGMENT
??_C@_0CK@DOFOGKPJ@expected?5some?5sort?5of?5unaryop?0?5b@ DB 'expected s'
	DB	'ome sort of unaryop, but got %R', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT obj2ast_unaryop
_TEXT	SEGMENT
obj$ = 48
out$ = 56
obj2ast_unaryop PROC					; COMDAT

; 6172 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx

; 6173 :     int isinstance;
; 6174 : 
; 6175 :     isinstance = PyObject_IsInstance(obj, (PyObject *)Invert_type);

  0000d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Invert_type
  00014	48 8b f9	 mov	 rdi, rcx
  00017	e8 00 00 00 00	 call	 PyObject_IsInstance

; 6176 :     if (isinstance == -1) {

  0001c	83 f8 ff	 cmp	 eax, -1

; 6177 :         return 1;

  0001f	0f 84 b2 00 00
	00		 je	 $LN11@obj2ast_un

; 6178 :     }
; 6179 :     if (isinstance) {

  00025	85 c0		 test	 eax, eax
  00027	74 13		 je	 SHORT $LN7@obj2ast_un

; 6180 :         *out = Invert;

  00029	c7 03 01 00 00
	00		 mov	 DWORD PTR [rbx], 1

; 6181 :         return 0;

  0002f	33 c0		 xor	 eax, eax

; 6210 : }

  00031	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00036	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003a	5f		 pop	 rdi
  0003b	c3		 ret	 0
$LN7@obj2ast_un:

; 6182 :     }
; 6183 :     isinstance = PyObject_IsInstance(obj, (PyObject *)Not_type);

  0003c	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Not_type
  00043	48 8b cf	 mov	 rcx, rdi
  00046	e8 00 00 00 00	 call	 PyObject_IsInstance

; 6184 :     if (isinstance == -1) {

  0004b	83 f8 ff	 cmp	 eax, -1

; 6185 :         return 1;

  0004e	0f 84 83 00 00
	00		 je	 $LN11@obj2ast_un

; 6186 :     }
; 6187 :     if (isinstance) {

  00054	85 c0		 test	 eax, eax
  00056	74 13		 je	 SHORT $LN5@obj2ast_un

; 6188 :         *out = Not;

  00058	c7 03 02 00 00
	00		 mov	 DWORD PTR [rbx], 2

; 6189 :         return 0;

  0005e	33 c0		 xor	 eax, eax

; 6210 : }

  00060	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00065	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00069	5f		 pop	 rdi
  0006a	c3		 ret	 0
$LN5@obj2ast_un:

; 6190 :     }
; 6191 :     isinstance = PyObject_IsInstance(obj, (PyObject *)UAdd_type);

  0006b	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR UAdd_type
  00072	48 8b cf	 mov	 rcx, rdi
  00075	e8 00 00 00 00	 call	 PyObject_IsInstance

; 6192 :     if (isinstance == -1) {

  0007a	83 f8 ff	 cmp	 eax, -1

; 6193 :         return 1;

  0007d	74 58		 je	 SHORT $LN11@obj2ast_un

; 6194 :     }
; 6195 :     if (isinstance) {

  0007f	85 c0		 test	 eax, eax
  00081	74 13		 je	 SHORT $LN3@obj2ast_un

; 6196 :         *out = UAdd;

  00083	c7 03 03 00 00
	00		 mov	 DWORD PTR [rbx], 3

; 6197 :         return 0;

  00089	33 c0		 xor	 eax, eax

; 6210 : }

  0008b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00090	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00094	5f		 pop	 rdi
  00095	c3		 ret	 0
$LN3@obj2ast_un:

; 6198 :     }
; 6199 :     isinstance = PyObject_IsInstance(obj, (PyObject *)USub_type);

  00096	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR USub_type
  0009d	48 8b cf	 mov	 rcx, rdi
  000a0	e8 00 00 00 00	 call	 PyObject_IsInstance

; 6200 :     if (isinstance == -1) {

  000a5	83 f8 ff	 cmp	 eax, -1

; 6201 :         return 1;

  000a8	74 2d		 je	 SHORT $LN11@obj2ast_un

; 6202 :     }
; 6203 :     if (isinstance) {

  000aa	85 c0		 test	 eax, eax
  000ac	74 13		 je	 SHORT $LN1@obj2ast_un

; 6204 :         *out = USub;

  000ae	c7 03 04 00 00
	00		 mov	 DWORD PTR [rbx], 4

; 6205 :         return 0;

  000b4	33 c0		 xor	 eax, eax

; 6210 : }

  000b6	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000bb	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000bf	5f		 pop	 rdi
  000c0	c3		 ret	 0
$LN1@obj2ast_un:

; 6206 :     }
; 6207 : 
; 6208 :     PyErr_Format(PyExc_TypeError, "expected some sort of unaryop, but got %R", obj);

  000c1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000c8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@DOFOGKPJ@expected?5some?5sort?5of?5unaryop?0?5b@
  000cf	4c 8b c7	 mov	 r8, rdi
  000d2	e8 00 00 00 00	 call	 PyErr_Format
$LN11@obj2ast_un:

; 6209 :     return 1;

  000d7	b8 01 00 00 00	 mov	 eax, 1

; 6210 : }

  000dc	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000e1	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000e5	5f		 pop	 rdi
  000e6	c3		 ret	 0
obj2ast_unaryop ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@NHLCAGBK@expected?5some?5sort?5of?5cmpop?0?5but@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_cmpop DD imagerel obj2ast_cmpop
	DD	imagerel obj2ast_cmpop+513
	DD	imagerel $unwind$obj2ast_cmpop
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_cmpop DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CI@NHLCAGBK@expected?5some?5sort?5of?5cmpop?0?5but@
CONST	SEGMENT
??_C@_0CI@NHLCAGBK@expected?5some?5sort?5of?5cmpop?0?5but@ DB 'expected s'
	DB	'ome sort of cmpop, but got %R', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT obj2ast_cmpop
_TEXT	SEGMENT
obj$ = 48
out$ = 56
obj2ast_cmpop PROC					; COMDAT

; 6214 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx

; 6215 :     int isinstance;
; 6216 : 
; 6217 :     isinstance = PyObject_IsInstance(obj, (PyObject *)Eq_type);

  0000d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Eq_type
  00014	48 8b f9	 mov	 rdi, rcx
  00017	e8 00 00 00 00	 call	 PyObject_IsInstance

; 6218 :     if (isinstance == -1) {

  0001c	83 f8 ff	 cmp	 eax, -1

; 6219 :         return 1;

  0001f	0f 84 cc 01 00
	00		 je	 $LN23@obj2ast_cm

; 6220 :     }
; 6221 :     if (isinstance) {

  00025	85 c0		 test	 eax, eax
  00027	74 13		 je	 SHORT $LN19@obj2ast_cm

; 6222 :         *out = Eq;

  00029	c7 03 01 00 00
	00		 mov	 DWORD PTR [rbx], 1

; 6223 :         return 0;

  0002f	33 c0		 xor	 eax, eax

; 6300 : }

  00031	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00036	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003a	5f		 pop	 rdi
  0003b	c3		 ret	 0
$LN19@obj2ast_cm:

; 6224 :     }
; 6225 :     isinstance = PyObject_IsInstance(obj, (PyObject *)NotEq_type);

  0003c	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR NotEq_type
  00043	48 8b cf	 mov	 rcx, rdi
  00046	e8 00 00 00 00	 call	 PyObject_IsInstance

; 6226 :     if (isinstance == -1) {

  0004b	83 f8 ff	 cmp	 eax, -1

; 6227 :         return 1;

  0004e	0f 84 9d 01 00
	00		 je	 $LN23@obj2ast_cm

; 6228 :     }
; 6229 :     if (isinstance) {

  00054	85 c0		 test	 eax, eax
  00056	74 13		 je	 SHORT $LN17@obj2ast_cm

; 6230 :         *out = NotEq;

  00058	c7 03 02 00 00
	00		 mov	 DWORD PTR [rbx], 2

; 6231 :         return 0;

  0005e	33 c0		 xor	 eax, eax

; 6300 : }

  00060	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00065	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00069	5f		 pop	 rdi
  0006a	c3		 ret	 0
$LN17@obj2ast_cm:

; 6232 :     }
; 6233 :     isinstance = PyObject_IsInstance(obj, (PyObject *)Lt_type);

  0006b	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Lt_type
  00072	48 8b cf	 mov	 rcx, rdi
  00075	e8 00 00 00 00	 call	 PyObject_IsInstance

; 6234 :     if (isinstance == -1) {

  0007a	83 f8 ff	 cmp	 eax, -1

; 6235 :         return 1;

  0007d	0f 84 6e 01 00
	00		 je	 $LN23@obj2ast_cm

; 6236 :     }
; 6237 :     if (isinstance) {

  00083	85 c0		 test	 eax, eax
  00085	74 13		 je	 SHORT $LN15@obj2ast_cm

; 6238 :         *out = Lt;

  00087	c7 03 03 00 00
	00		 mov	 DWORD PTR [rbx], 3

; 6239 :         return 0;

  0008d	33 c0		 xor	 eax, eax

; 6300 : }

  0008f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00094	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00098	5f		 pop	 rdi
  00099	c3		 ret	 0
$LN15@obj2ast_cm:

; 6240 :     }
; 6241 :     isinstance = PyObject_IsInstance(obj, (PyObject *)LtE_type);

  0009a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR LtE_type
  000a1	48 8b cf	 mov	 rcx, rdi
  000a4	e8 00 00 00 00	 call	 PyObject_IsInstance

; 6242 :     if (isinstance == -1) {

  000a9	83 f8 ff	 cmp	 eax, -1

; 6243 :         return 1;

  000ac	0f 84 3f 01 00
	00		 je	 $LN23@obj2ast_cm

; 6244 :     }
; 6245 :     if (isinstance) {

  000b2	85 c0		 test	 eax, eax
  000b4	74 13		 je	 SHORT $LN13@obj2ast_cm

; 6246 :         *out = LtE;

  000b6	c7 03 04 00 00
	00		 mov	 DWORD PTR [rbx], 4

; 6247 :         return 0;

  000bc	33 c0		 xor	 eax, eax

; 6300 : }

  000be	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000c3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c7	5f		 pop	 rdi
  000c8	c3		 ret	 0
$LN13@obj2ast_cm:

; 6248 :     }
; 6249 :     isinstance = PyObject_IsInstance(obj, (PyObject *)Gt_type);

  000c9	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Gt_type
  000d0	48 8b cf	 mov	 rcx, rdi
  000d3	e8 00 00 00 00	 call	 PyObject_IsInstance

; 6250 :     if (isinstance == -1) {

  000d8	83 f8 ff	 cmp	 eax, -1

; 6251 :         return 1;

  000db	0f 84 10 01 00
	00		 je	 $LN23@obj2ast_cm

; 6252 :     }
; 6253 :     if (isinstance) {

  000e1	85 c0		 test	 eax, eax
  000e3	74 13		 je	 SHORT $LN11@obj2ast_cm

; 6254 :         *out = Gt;

  000e5	c7 03 05 00 00
	00		 mov	 DWORD PTR [rbx], 5

; 6255 :         return 0;

  000eb	33 c0		 xor	 eax, eax

; 6300 : }

  000ed	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000f2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000f6	5f		 pop	 rdi
  000f7	c3		 ret	 0
$LN11@obj2ast_cm:

; 6256 :     }
; 6257 :     isinstance = PyObject_IsInstance(obj, (PyObject *)GtE_type);

  000f8	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR GtE_type
  000ff	48 8b cf	 mov	 rcx, rdi
  00102	e8 00 00 00 00	 call	 PyObject_IsInstance

; 6258 :     if (isinstance == -1) {

  00107	83 f8 ff	 cmp	 eax, -1

; 6259 :         return 1;

  0010a	0f 84 e1 00 00
	00		 je	 $LN23@obj2ast_cm

; 6260 :     }
; 6261 :     if (isinstance) {

  00110	85 c0		 test	 eax, eax
  00112	74 13		 je	 SHORT $LN9@obj2ast_cm

; 6262 :         *out = GtE;

  00114	c7 03 06 00 00
	00		 mov	 DWORD PTR [rbx], 6

; 6263 :         return 0;

  0011a	33 c0		 xor	 eax, eax

; 6300 : }

  0011c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00121	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00125	5f		 pop	 rdi
  00126	c3		 ret	 0
$LN9@obj2ast_cm:

; 6264 :     }
; 6265 :     isinstance = PyObject_IsInstance(obj, (PyObject *)Is_type);

  00127	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Is_type
  0012e	48 8b cf	 mov	 rcx, rdi
  00131	e8 00 00 00 00	 call	 PyObject_IsInstance

; 6266 :     if (isinstance == -1) {

  00136	83 f8 ff	 cmp	 eax, -1

; 6267 :         return 1;

  00139	0f 84 b2 00 00
	00		 je	 $LN23@obj2ast_cm

; 6268 :     }
; 6269 :     if (isinstance) {

  0013f	85 c0		 test	 eax, eax
  00141	74 13		 je	 SHORT $LN7@obj2ast_cm

; 6270 :         *out = Is;

  00143	c7 03 07 00 00
	00		 mov	 DWORD PTR [rbx], 7

; 6271 :         return 0;

  00149	33 c0		 xor	 eax, eax

; 6300 : }

  0014b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00150	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00154	5f		 pop	 rdi
  00155	c3		 ret	 0
$LN7@obj2ast_cm:

; 6272 :     }
; 6273 :     isinstance = PyObject_IsInstance(obj, (PyObject *)IsNot_type);

  00156	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR IsNot_type
  0015d	48 8b cf	 mov	 rcx, rdi
  00160	e8 00 00 00 00	 call	 PyObject_IsInstance

; 6274 :     if (isinstance == -1) {

  00165	83 f8 ff	 cmp	 eax, -1

; 6275 :         return 1;

  00168	0f 84 83 00 00
	00		 je	 $LN23@obj2ast_cm

; 6276 :     }
; 6277 :     if (isinstance) {

  0016e	85 c0		 test	 eax, eax
  00170	74 13		 je	 SHORT $LN5@obj2ast_cm

; 6278 :         *out = IsNot;

  00172	c7 03 08 00 00
	00		 mov	 DWORD PTR [rbx], 8

; 6279 :         return 0;

  00178	33 c0		 xor	 eax, eax

; 6300 : }

  0017a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0017f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00183	5f		 pop	 rdi
  00184	c3		 ret	 0
$LN5@obj2ast_cm:

; 6280 :     }
; 6281 :     isinstance = PyObject_IsInstance(obj, (PyObject *)In_type);

  00185	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR In_type
  0018c	48 8b cf	 mov	 rcx, rdi
  0018f	e8 00 00 00 00	 call	 PyObject_IsInstance

; 6282 :     if (isinstance == -1) {

  00194	83 f8 ff	 cmp	 eax, -1

; 6283 :         return 1;

  00197	74 58		 je	 SHORT $LN23@obj2ast_cm

; 6284 :     }
; 6285 :     if (isinstance) {

  00199	85 c0		 test	 eax, eax
  0019b	74 13		 je	 SHORT $LN3@obj2ast_cm

; 6286 :         *out = In;

  0019d	c7 03 09 00 00
	00		 mov	 DWORD PTR [rbx], 9

; 6287 :         return 0;

  001a3	33 c0		 xor	 eax, eax

; 6300 : }

  001a5	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  001aa	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001ae	5f		 pop	 rdi
  001af	c3		 ret	 0
$LN3@obj2ast_cm:

; 6288 :     }
; 6289 :     isinstance = PyObject_IsInstance(obj, (PyObject *)NotIn_type);

  001b0	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR NotIn_type
  001b7	48 8b cf	 mov	 rcx, rdi
  001ba	e8 00 00 00 00	 call	 PyObject_IsInstance

; 6290 :     if (isinstance == -1) {

  001bf	83 f8 ff	 cmp	 eax, -1

; 6291 :         return 1;

  001c2	74 2d		 je	 SHORT $LN23@obj2ast_cm

; 6292 :     }
; 6293 :     if (isinstance) {

  001c4	85 c0		 test	 eax, eax
  001c6	74 13		 je	 SHORT $LN1@obj2ast_cm

; 6294 :         *out = NotIn;

  001c8	c7 03 0a 00 00
	00		 mov	 DWORD PTR [rbx], 10

; 6295 :         return 0;

  001ce	33 c0		 xor	 eax, eax

; 6300 : }

  001d0	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  001d5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001d9	5f		 pop	 rdi
  001da	c3		 ret	 0
$LN1@obj2ast_cm:

; 6296 :     }
; 6297 : 
; 6298 :     PyErr_Format(PyExc_TypeError, "expected some sort of cmpop, but got %R", obj);

  001db	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  001e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@NHLCAGBK@expected?5some?5sort?5of?5cmpop?0?5but@
  001e9	4c 8b c7	 mov	 r8, rdi
  001ec	e8 00 00 00 00	 call	 PyErr_Format
$LN23@obj2ast_cm:

; 6299 :     return 1;

  001f1	b8 01 00 00 00	 mov	 eax, 1

; 6300 : }

  001f6	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  001fb	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001ff	5f		 pop	 rdi
  00200	c3		 ret	 0
obj2ast_cmpop ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DD@IBPNPKND@required?5field?5?$CCtarget?$CC?5missing?5@ ; `string'
PUBLIC	??_C@_0DB@ICLPMMIK@required?5field?5?$CCiter?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0DA@CLHABNLI@required?5field?5?$CCifs?$CC?5missing?5fro@ ; `string'
PUBLIC	??_C@_0DH@HJKCOGDD@comprehension?5field?5?$CCifs?$CC?5must?5b@ ; `string'
PUBLIC	??_C@_0BG@EEJNPDLC@obj2ast_comprehension?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_comprehension DD imagerel obj2ast_comprehension
	DD	imagerel obj2ast_comprehension+78
	DD	imagerel $unwind$obj2ast_comprehension
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$obj2ast_comprehension DD imagerel obj2ast_comprehension+78
	DD	imagerel obj2ast_comprehension+398
	DD	imagerel $chain$0$obj2ast_comprehension
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$obj2ast_comprehension DD imagerel obj2ast_comprehension+398
	DD	imagerel obj2ast_comprehension+418
	DD	imagerel $chain$1$obj2ast_comprehension
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$obj2ast_comprehension DD imagerel obj2ast_comprehension+418
	DD	imagerel obj2ast_comprehension+619
	DD	imagerel $chain$2$obj2ast_comprehension
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$obj2ast_comprehension DD imagerel obj2ast_comprehension+619
	DD	imagerel obj2ast_comprehension+648
	DD	imagerel $chain$3$obj2ast_comprehension
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$obj2ast_comprehension DD 021H
	DD	imagerel obj2ast_comprehension
	DD	imagerel obj2ast_comprehension+78
	DD	imagerel $unwind$obj2ast_comprehension
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$obj2ast_comprehension DD 020021H
	DD	0c5400H
	DD	imagerel obj2ast_comprehension
	DD	imagerel obj2ast_comprehension+78
	DD	imagerel $unwind$obj2ast_comprehension
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$obj2ast_comprehension DD 021H
	DD	imagerel obj2ast_comprehension
	DD	imagerel obj2ast_comprehension+78
	DD	imagerel $unwind$obj2ast_comprehension
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$obj2ast_comprehension DD 020521H
	DD	0c5405H
	DD	imagerel obj2ast_comprehension
	DD	imagerel obj2ast_comprehension+78
	DD	imagerel $unwind$obj2ast_comprehension
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_comprehension DD 081301H
	DD	0e6413H
	DD	0d3413H
	DD	0d00f7213H
	DD	0700bc00dH
xdata	ENDS
;	COMDAT ??_C@_0DD@IBPNPKND@required?5field?5?$CCtarget?$CC?5missing?5@
CONST	SEGMENT
??_C@_0DD@IBPNPKND@required?5field?5?$CCtarget?$CC?5missing?5@ DB 'requir'
	DB	'ed field "target" missing from comprehension', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@ICLPMMIK@required?5field?5?$CCiter?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0DB@ICLPMMIK@required?5field?5?$CCiter?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "iter" missing from comprehension', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@CLHABNLI@required?5field?5?$CCifs?$CC?5missing?5fro@
CONST	SEGMENT
??_C@_0DA@CLHABNLI@required?5field?5?$CCifs?$CC?5missing?5fro@ DB 'requir'
	DB	'ed field "ifs" missing from comprehension', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@HJKCOGDD@comprehension?5field?5?$CCifs?$CC?5must?5b@
CONST	SEGMENT
??_C@_0DH@HJKCOGDD@comprehension?5field?5?$CCifs?$CC?5must?5b@ DB 'compre'
	DB	'hension field "ifs" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EEJNPDLC@obj2ast_comprehension?$AA@
CONST	SEGMENT
??_C@_0BG@EEJNPDLC@obj2ast_comprehension?$AA@ DB 'obj2ast_comprehension', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT obj2ast_comprehension
_TEXT	SEGMENT
iter$ = 48
target$ = 56
obj$ = 96
out$ = 104
arena$ = 112
value$27365 = 120
obj2ast_comprehension PROC				; COMDAT

; 6304 : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	41 54		 push	 r12
  0000d	41 55		 push	 r13
  0000f	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 6305 :     PyObject* tmp = NULL;
; 6306 :     expr_ty target;
; 6307 :     expr_ty iter;
; 6308 :     asdl_seq* ifs;
; 6309 : 
; 6310 :     if (_PyObject_HasAttrId(obj, &PyId_target)) {

  00013	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR _tls_index
  0001a	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00023	4c 8b ea	 mov	 r13, rdx
  00026	4a 8b 34 c8	 mov	 rsi, QWORD PTR [rax+r9*8]
  0002a	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_target
  0002f	4d 8b e0	 mov	 r12, r8
  00032	48 03 de	 add	 rbx, rsi
  00035	48 8b f9	 mov	 rdi, rcx
  00038	48 8b d3	 mov	 rdx, rbx
  0003b	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00040	85 c0		 test	 eax, eax
  00042	0f 84 23 02 00
	00		 je	 $LN33@obj2ast_co

; 6311 :         int res;
; 6312 :         tmp = _PyObject_GetAttrId(obj, &PyId_target);

  00048	48 8b d3	 mov	 rdx, rbx
  0004b	48 8b cf	 mov	 rcx, rdi
  0004e	48 89 6c 24 60	 mov	 QWORD PTR [rsp+96], rbp
  00053	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00058	48 8b d8	 mov	 rbx, rax

; 6313 :         if (tmp == NULL) goto failed;

  0005b	48 85 c0	 test	 rax, rax
  0005e	0f 84 20 01 00
	00		 je	 $LN3@obj2ast_co

; 6314 :         res = obj2ast_expr(tmp, &target, arena);

  00064	48 8d 54 24 38	 lea	 rdx, QWORD PTR target$[rsp]
  00069	4d 8b c4	 mov	 r8, r12
  0006c	48 8b c8	 mov	 rcx, rax
  0006f	e8 00 00 00 00	 call	 obj2ast_expr

; 6315 :         if (res != 0) goto failed;

  00074	85 c0		 test	 eax, eax
  00076	0f 85 00 01 00
	00		 jne	 $failed$27322

; 6316 :         Py_CLEAR(tmp);

  0007c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00083	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@EEJNPDLC@obj2ast_comprehension?$AA@
  0008a	4c 8b cb	 mov	 r9, rbx
  0008d	41 b8 ac 18 00
	00		 mov	 r8d, 6316		; 000018acH
  00093	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0009b	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a0	85 c0		 test	 eax, eax
  000a2	75 08		 jne	 SHORT $LN29@obj2ast_co
  000a4	48 8b cb	 mov	 rcx, rbx
  000a7	e8 00 00 00 00	 call	 _Py_DecRef
$LN29@obj2ast_co:

; 6320 :     }
; 6321 :     if (_PyObject_HasAttrId(obj, &PyId_iter)) {

  000ac	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_iter
  000b1	48 8b cf	 mov	 rcx, rdi
  000b4	48 03 de	 add	 rbx, rsi
  000b7	48 8b d3	 mov	 rdx, rbx
  000ba	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  000bf	85 c0		 test	 eax, eax
  000c1	0f 84 8c 01 00
	00		 je	 $LN25@obj2ast_co

; 6322 :         int res;
; 6323 :         tmp = _PyObject_GetAttrId(obj, &PyId_iter);

  000c7	48 8b d3	 mov	 rdx, rbx
  000ca	48 8b cf	 mov	 rcx, rdi
  000cd	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  000d2	48 8b d8	 mov	 rbx, rax

; 6324 :         if (tmp == NULL) goto failed;

  000d5	48 85 c0	 test	 rax, rax
  000d8	0f 84 a6 00 00
	00		 je	 $LN3@obj2ast_co

; 6325 :         res = obj2ast_expr(tmp, &iter, arena);

  000de	48 8d 54 24 30	 lea	 rdx, QWORD PTR iter$[rsp]
  000e3	4d 8b c4	 mov	 r8, r12
  000e6	48 8b c8	 mov	 rcx, rax
  000e9	e8 00 00 00 00	 call	 obj2ast_expr

; 6326 :         if (res != 0) goto failed;

  000ee	85 c0		 test	 eax, eax
  000f0	0f 85 86 00 00
	00		 jne	 $failed$27322

; 6327 :         Py_CLEAR(tmp);

  000f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  000fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@EEJNPDLC@obj2ast_comprehension?$AA@
  00104	4c 8b cb	 mov	 r9, rbx
  00107	41 b8 b7 18 00
	00		 mov	 r8d, 6327		; 000018b7H
  0010d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00115	e8 00 00 00 00	 call	 _PyParallel_Guard
  0011a	85 c0		 test	 eax, eax
  0011c	75 08		 jne	 SHORT $LN21@obj2ast_co
  0011e	48 8b cb	 mov	 rcx, rbx
  00121	e8 00 00 00 00	 call	 _Py_DecRef
$LN21@obj2ast_co:

; 6328 :     } else {
; 6329 :         PyErr_SetString(PyExc_TypeError, "required field \"iter\" missing from comprehension");
; 6330 :         return 1;
; 6331 :     }
; 6332 :     if (_PyObject_HasAttrId(obj, &PyId_ifs)) {

  00126	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_ifs
  0012b	48 8b cf	 mov	 rcx, rdi
  0012e	48 03 de	 add	 rbx, rsi
  00131	48 8b d3	 mov	 rdx, rbx
  00134	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00139	85 c0		 test	 eax, eax
  0013b	0f 84 fa 00 00
	00		 je	 $LN17@obj2ast_co

; 6333 :         int res;
; 6334 :         Py_ssize_t len;
; 6335 :         Py_ssize_t i;
; 6336 :         tmp = _PyObject_GetAttrId(obj, &PyId_ifs);

  00141	48 8b d3	 mov	 rdx, rbx
  00144	48 8b cf	 mov	 rcx, rdi
  00147	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0014c	48 8b d8	 mov	 rbx, rax

; 6337 :         if (tmp == NULL) goto failed;

  0014f	48 85 c0	 test	 rax, rax
  00152	74 30		 je	 SHORT $LN3@obj2ast_co

; 6338 :         if (!PyList_Check(tmp)) {

  00154	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  00158	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  00163	75 3d		 jne	 SHORT $LN15@obj2ast_co

; 6339 :             PyErr_Format(PyExc_TypeError, "comprehension field \"ifs\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  00165	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00169	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00170	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DH@HJKCOGDD@comprehension?5field?5?$CCifs?$CC?5must?5b@
  00177	e8 00 00 00 00	 call	 PyErr_Format
$failed$27322:

; 6358 : failed:
; 6359 :     Py_XDECREF(tmp);

  0017c	48 8b cb	 mov	 rcx, rbx
  0017f	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@obj2ast_co:

; 6354 :         return 1;

  00184	b8 01 00 00 00	 mov	 eax, 1
$LN39@obj2ast_co:
  00189	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
$LN34@obj2ast_co:

; 6360 :     return 1;
; 6361 : }

  0018e	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  00193	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
  00198	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0019c	41 5d		 pop	 r13
  0019e	41 5c		 pop	 r12
  001a0	5f		 pop	 rdi
  001a1	c3		 ret	 0
$LN15@obj2ast_co:

; 6340 :             goto failed;
; 6341 :         }
; 6342 :         len = PyList_GET_SIZE(tmp);

  001a2	48 8b 70 60	 mov	 rsi, QWORD PTR [rax+96]

; 6343 :         ifs = asdl_seq_new(len, arena);

  001a6	49 8b d4	 mov	 rdx, r12
  001a9	48 8b ce	 mov	 rcx, rsi
  001ac	e8 00 00 00 00	 call	 asdl_seq_new
  001b1	48 8b e8	 mov	 rbp, rax

; 6344 :         if (ifs == NULL) goto failed;

  001b4	48 85 c0	 test	 rax, rax
  001b7	74 c3		 je	 SHORT $failed$27322

; 6345 :         for (i = 0; i < len; i++) {

  001b9	33 ff		 xor	 edi, edi
  001bb	48 85 f6	 test	 rsi, rsi
  001be	7e 2b		 jle	 SHORT $LN9@obj2ast_co
$LL13@obj2ast_co:

; 6346 :             expr_ty value;
; 6347 :             res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);

  001c0	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  001c4	48 8d 54 24 78	 lea	 rdx, QWORD PTR value$27365[rsp]
  001c9	4d 8b c4	 mov	 r8, r12
  001cc	48 8b 0c f9	 mov	 rcx, QWORD PTR [rcx+rdi*8]
  001d0	e8 00 00 00 00	 call	 obj2ast_expr

; 6348 :             if (res != 0) goto failed;

  001d5	85 c0		 test	 eax, eax
  001d7	75 a3		 jne	 SHORT $failed$27322

; 6349 :             asdl_seq_SET(ifs, i, value);

  001d9	48 8b 44 24 78	 mov	 rax, QWORD PTR value$27365[rsp]
  001de	48 ff c7	 inc	 rdi
  001e1	48 89 44 fd 00	 mov	 QWORD PTR [rbp+rdi*8], rax
  001e6	48 3b fe	 cmp	 rdi, rsi
  001e9	7c d5		 jl	 SHORT $LL13@obj2ast_co
$LN9@obj2ast_co:

; 6350 :         }
; 6351 :         Py_CLEAR(tmp);

  001eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  001f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@EEJNPDLC@obj2ast_comprehension?$AA@
  001f9	4c 8b cb	 mov	 r9, rbx
  001fc	41 b8 cf 18 00
	00		 mov	 r8d, 6351		; 000018cfH
  00202	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0020a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0020f	85 c0		 test	 eax, eax
  00211	75 08		 jne	 SHORT $LN8@obj2ast_co
  00213	48 8b cb	 mov	 rcx, rbx
  00216	e8 00 00 00 00	 call	 _Py_DecRef
$LN8@obj2ast_co:

; 6355 :     }
; 6356 :     *out = comprehension(target, iter, ifs, arena);

  0021b	48 8b 54 24 30	 mov	 rdx, QWORD PTR iter$[rsp]
  00220	48 8b 4c 24 38	 mov	 rcx, QWORD PTR target$[rsp]
  00225	4d 8b cc	 mov	 r9, r12
  00228	4c 8b c5	 mov	 r8, rbp
  0022b	e8 00 00 00 00	 call	 _Py_comprehension
  00230	49 89 45 00	 mov	 QWORD PTR [r13], rax

; 6357 :     return 0;

  00234	33 c0		 xor	 eax, eax
  00236	e9 4e ff ff ff	 jmp	 $LN39@obj2ast_co
$LN17@obj2ast_co:

; 6352 :     } else {
; 6353 :         PyErr_SetString(PyExc_TypeError, "required field \"ifs\" missing from comprehension");

  0023b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00242	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@CLHABNLI@required?5field?5?$CCifs?$CC?5missing?5fro@
  00249	e8 00 00 00 00	 call	 PyErr_SetString

; 6354 :         return 1;

  0024e	e9 31 ff ff ff	 jmp	 $LN3@obj2ast_co
$LN25@obj2ast_co:

; 6352 :     } else {
; 6353 :         PyErr_SetString(PyExc_TypeError, "required field \"ifs\" missing from comprehension");

  00253	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0025a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@ICLPMMIK@required?5field?5?$CCiter?$CC?5missing?5fr@
  00261	e8 00 00 00 00	 call	 PyErr_SetString

; 6354 :         return 1;

  00266	e9 19 ff ff ff	 jmp	 $LN3@obj2ast_co
$LN33@obj2ast_co:

; 6317 :     } else {
; 6318 :         PyErr_SetString(PyExc_TypeError, "required field \"target\" missing from comprehension");

  0026b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00272	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@IBPNPKND@required?5field?5?$CCtarget?$CC?5missing?5@
  00279	e8 00 00 00 00	 call	 PyErr_SetString

; 6319 :         return 1;

  0027e	b8 01 00 00 00	 mov	 eax, 1
  00283	e9 06 ff ff ff	 jmp	 $LN34@obj2ast_co
obj2ast_comprehension ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@OMIDOBAH@required?5field?5?$CCarg?$CC?5missing?5fro@ ; `string'
PUBLIC	??_C@_0M@FDEDFJL@obj2ast_arg?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_arg DD imagerel obj2ast_arg
	DD	imagerel obj2ast_arg+370
	DD	imagerel $unwind$obj2ast_arg
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_arg DD 081201H
	DD	0d5412H
	DD	0c3412H
	DD	0c00e7212H
	DD	0600b700cH
xdata	ENDS
;	COMDAT ??_C@_0CG@OMIDOBAH@required?5field?5?$CCarg?$CC?5missing?5fro@
CONST	SEGMENT
??_C@_0CG@OMIDOBAH@required?5field?5?$CCarg?$CC?5missing?5fro@ DB 'requir'
	DB	'ed field "arg" missing from arg', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FDEDFJL@obj2ast_arg?$AA@
CONST	SEGMENT
??_C@_0M@FDEDFJL@obj2ast_arg?$AA@ DB 'obj2ast_arg', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT obj2ast_arg
_TEXT	SEGMENT
arg$ = 48
obj$ = 96
out$ = 104
arena$ = 112
annotation$ = 120
obj2ast_arg PROC					; COMDAT

; 6621 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	41 54		 push	 r12
  0000e	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 6622 :     PyObject* tmp = NULL;
; 6623 :     identifier arg;
; 6624 :     expr_ty annotation;
; 6625 : 
; 6626 :     if (_PyObject_HasAttrId(obj, &PyId_arg)) {

  00012	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR _tls_index
  00019	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00022	4c 8b e2	 mov	 r12, rdx
  00025	4a 8b 2c c8	 mov	 rbp, QWORD PTR [rax+r9*8]
  00029	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_arg
  0002e	49 8b f0	 mov	 rsi, r8
  00031	48 03 dd	 add	 rbx, rbp
  00034	48 8b f9	 mov	 rdi, rcx
  00037	48 8b d3	 mov	 rdx, rbx
  0003a	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0003f	85 c0		 test	 eax, eax
  00041	0f 84 00 01 00
	00		 je	 $LN20@obj2ast_ar

; 6627 :         int res;
; 6628 :         tmp = _PyObject_GetAttrId(obj, &PyId_arg);

  00047	48 8b d3	 mov	 rdx, rbx
  0004a	48 8b cf	 mov	 rcx, rdi
  0004d	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00052	48 8b d8	 mov	 rbx, rax

; 6629 :         if (tmp == NULL) goto failed;

  00055	48 85 c0	 test	 rax, rax
  00058	0f 84 fc 00 00
	00		 je	 $LN3@obj2ast_ar

; 6630 :         res = obj2ast_identifier(tmp, &arg, arena);

  0005e	48 8d 54 24 30	 lea	 rdx, QWORD PTR arg$[rsp]
  00063	4c 8b c6	 mov	 r8, rsi
  00066	48 8b c8	 mov	 rcx, rax
  00069	e8 00 00 00 00	 call	 obj2ast_identifier

; 6631 :         if (res != 0) goto failed;

  0006e	85 c0		 test	 eax, eax
  00070	0f 85 c7 00 00
	00		 jne	 $failed$27712

; 6632 :         Py_CLEAR(tmp);

  00076	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0007d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@FDEDFJL@obj2ast_arg?$AA@
  00084	4c 8b cb	 mov	 r9, rbx
  00087	41 b8 e8 19 00
	00		 mov	 r8d, 6632		; 000019e8H
  0008d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00095	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009a	85 c0		 test	 eax, eax
  0009c	75 08		 jne	 SHORT $LN16@obj2ast_ar
  0009e	48 8b cb	 mov	 rcx, rbx
  000a1	e8 00 00 00 00	 call	 _Py_DecRef
$LN16@obj2ast_ar:

; 6636 :     }
; 6637 :     if (_PyObject_HasAttrId(obj, &PyId_annotation)) {

  000a6	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_annotation
  000ab	48 8b cf	 mov	 rcx, rdi
  000ae	48 03 dd	 add	 rbx, rbp
  000b1	48 8b d3	 mov	 rdx, rbx
  000b4	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  000b9	85 c0		 test	 eax, eax
  000bb	74 5d		 je	 SHORT $LN12@obj2ast_ar

; 6638 :         int res;
; 6639 :         tmp = _PyObject_GetAttrId(obj, &PyId_annotation);

  000bd	48 8b d3	 mov	 rdx, rbx
  000c0	48 8b cf	 mov	 rcx, rdi
  000c3	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  000c8	48 8b d8	 mov	 rbx, rax

; 6640 :         if (tmp == NULL) goto failed;

  000cb	48 85 c0	 test	 rax, rax
  000ce	0f 84 86 00 00
	00		 je	 $LN3@obj2ast_ar

; 6641 :         res = obj2ast_expr(tmp, &annotation, arena);

  000d4	48 8d 54 24 78	 lea	 rdx, QWORD PTR annotation$[rsp]
  000d9	4c 8b c6	 mov	 r8, rsi
  000dc	48 8b c8	 mov	 rcx, rax
  000df	e8 00 00 00 00	 call	 obj2ast_expr

; 6642 :         if (res != 0) goto failed;

  000e4	85 c0		 test	 eax, eax
  000e6	75 55		 jne	 SHORT $failed$27712

; 6643 :         Py_CLEAR(tmp);

  000e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  000ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@FDEDFJL@obj2ast_arg?$AA@
  000f6	4c 8b cb	 mov	 r9, rbx
  000f9	41 b8 f3 19 00
	00		 mov	 r8d, 6643		; 000019f3H
  000ff	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00107	e8 00 00 00 00	 call	 _PyParallel_Guard
  0010c	85 c0		 test	 eax, eax
  0010e	75 13		 jne	 SHORT $LN5@obj2ast_ar
  00110	48 8b cb	 mov	 rcx, rbx
  00113	e8 00 00 00 00	 call	 _Py_DecRef

; 6644 :     } else {

  00118	eb 09		 jmp	 SHORT $LN5@obj2ast_ar
$LN12@obj2ast_ar:

; 6645 :         annotation = NULL;

  0011a	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR annotation$[rsp], 0
$LN5@obj2ast_ar:

; 6646 :     }
; 6647 :     *out = arg(arg, annotation, arena);

  00123	48 8b 54 24 78	 mov	 rdx, QWORD PTR annotation$[rsp]
  00128	48 8b 4c 24 30	 mov	 rcx, QWORD PTR arg$[rsp]
  0012d	4c 8b c6	 mov	 r8, rsi
  00130	e8 00 00 00 00	 call	 _Py_arg
  00135	49 89 04 24	 mov	 QWORD PTR [r12], rax

; 6648 :     return 0;

  00139	33 c0		 xor	 eax, eax
  0013b	eb 22		 jmp	 SHORT $LN21@obj2ast_ar
$failed$27712:

; 6649 : failed:
; 6650 :     Py_XDECREF(tmp);

  0013d	48 8b cb	 mov	 rcx, rbx
  00140	e8 00 00 00 00	 call	 _Py_DecRef

; 6651 :     return 1;

  00145	eb 13		 jmp	 SHORT $LN3@obj2ast_ar
$LN20@obj2ast_ar:

; 6633 :     } else {
; 6634 :         PyErr_SetString(PyExc_TypeError, "required field \"arg\" missing from arg");

  00147	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0014e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@OMIDOBAH@required?5field?5?$CCarg?$CC?5missing?5fro@
  00155	e8 00 00 00 00	 call	 PyErr_SetString
$LN3@obj2ast_ar:

; 6635 :         return 1;

  0015a	b8 01 00 00 00	 mov	 eax, 1
$LN21@obj2ast_ar:

; 6652 : }

  0015f	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00164	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  00169	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0016d	41 5c		 pop	 r12
  0016f	5f		 pop	 rdi
  00170	5e		 pop	 rsi
  00171	c3		 ret	 0
obj2ast_arg ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@PINDPDIB@required?5field?5?$CCarg?$CC?5missing?5fro@ ; `string'
PUBLIC	??_C@_0CM@HMJIBNCO@required?5field?5?$CCvalue?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_0BA@PHJHFCNC@obj2ast_keyword?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_keyword DD imagerel obj2ast_keyword
	DD	imagerel obj2ast_keyword+368
	DD	imagerel $unwind$obj2ast_keyword
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_keyword DD 081201H
	DD	0d5412H
	DD	0c3412H
	DD	0c00e7212H
	DD	0600b700cH
xdata	ENDS
;	COMDAT ??_C@_0CK@PINDPDIB@required?5field?5?$CCarg?$CC?5missing?5fro@
CONST	SEGMENT
??_C@_0CK@PINDPDIB@required?5field?5?$CCarg?$CC?5missing?5fro@ DB 'requir'
	DB	'ed field "arg" missing from keyword', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@HMJIBNCO@required?5field?5?$CCvalue?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CM@HMJIBNCO@required?5field?5?$CCvalue?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "value" missing from keyword', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PHJHFCNC@obj2ast_keyword?$AA@
CONST	SEGMENT
??_C@_0BA@PHJHFCNC@obj2ast_keyword?$AA@ DB 'obj2ast_keyword', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT obj2ast_keyword
_TEXT	SEGMENT
arg$ = 48
obj$ = 96
out$ = 104
arena$ = 112
value$ = 120
obj2ast_keyword PROC					; COMDAT

; 6656 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	41 54		 push	 r12
  0000e	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 6657 :     PyObject* tmp = NULL;
; 6658 :     identifier arg;
; 6659 :     expr_ty value;
; 6660 : 
; 6661 :     if (_PyObject_HasAttrId(obj, &PyId_arg)) {

  00012	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR _tls_index
  00019	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00022	4c 8b e2	 mov	 r12, rdx
  00025	4a 8b 2c c8	 mov	 rbp, QWORD PTR [rax+r9*8]
  00029	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_arg
  0002e	49 8b f0	 mov	 rsi, r8
  00031	48 03 dd	 add	 rbx, rbp
  00034	48 8b f9	 mov	 rdi, rcx
  00037	48 8b d3	 mov	 rdx, rbx
  0003a	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0003f	85 c0		 test	 eax, eax
  00041	0f 84 fe 00 00
	00		 je	 $LN20@obj2ast_ke

; 6662 :         int res;
; 6663 :         tmp = _PyObject_GetAttrId(obj, &PyId_arg);

  00047	48 8b d3	 mov	 rdx, rbx
  0004a	48 8b cf	 mov	 rcx, rdi
  0004d	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00052	48 8b d8	 mov	 rbx, rax

; 6664 :         if (tmp == NULL) goto failed;

  00055	48 85 c0	 test	 rax, rax
  00058	0f 84 fa 00 00
	00		 je	 $LN3@obj2ast_ke

; 6665 :         res = obj2ast_identifier(tmp, &arg, arena);

  0005e	48 8d 54 24 30	 lea	 rdx, QWORD PTR arg$[rsp]
  00063	4c 8b c6	 mov	 r8, rsi
  00066	48 8b c8	 mov	 rcx, rax
  00069	e8 00 00 00 00	 call	 obj2ast_identifier

; 6666 :         if (res != 0) goto failed;

  0006e	85 c0		 test	 eax, eax
  00070	0f 85 c5 00 00
	00		 jne	 $failed$27760

; 6667 :         Py_CLEAR(tmp);

  00076	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0007d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@PHJHFCNC@obj2ast_keyword?$AA@
  00084	4c 8b cb	 mov	 r9, rbx
  00087	41 b8 0b 1a 00
	00		 mov	 r8d, 6667		; 00001a0bH
  0008d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00095	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009a	85 c0		 test	 eax, eax
  0009c	75 08		 jne	 SHORT $LN16@obj2ast_ke
  0009e	48 8b cb	 mov	 rcx, rbx
  000a1	e8 00 00 00 00	 call	 _Py_DecRef
$LN16@obj2ast_ke:

; 6671 :     }
; 6672 :     if (_PyObject_HasAttrId(obj, &PyId_value)) {

  000a6	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_value
  000ab	48 8b cf	 mov	 rcx, rdi
  000ae	48 03 dd	 add	 rbx, rbp
  000b1	48 8b d3	 mov	 rdx, rbx
  000b4	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  000b9	85 c0		 test	 eax, eax
  000bb	74 75		 je	 SHORT $LN12@obj2ast_ke

; 6673 :         int res;
; 6674 :         tmp = _PyObject_GetAttrId(obj, &PyId_value);

  000bd	48 8b d3	 mov	 rdx, rbx
  000c0	48 8b cf	 mov	 rcx, rdi
  000c3	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  000c8	48 8b d8	 mov	 rbx, rax

; 6675 :         if (tmp == NULL) goto failed;

  000cb	48 85 c0	 test	 rax, rax
  000ce	0f 84 84 00 00
	00		 je	 $LN3@obj2ast_ke

; 6676 :         res = obj2ast_expr(tmp, &value, arena);

  000d4	48 8d 54 24 78	 lea	 rdx, QWORD PTR value$[rsp]
  000d9	4c 8b c6	 mov	 r8, rsi
  000dc	48 8b c8	 mov	 rcx, rax
  000df	e8 00 00 00 00	 call	 obj2ast_expr

; 6677 :         if (res != 0) goto failed;

  000e4	85 c0		 test	 eax, eax
  000e6	75 53		 jne	 SHORT $failed$27760

; 6678 :         Py_CLEAR(tmp);

  000e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  000ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@PHJHFCNC@obj2ast_keyword?$AA@
  000f6	4c 8b cb	 mov	 r9, rbx
  000f9	41 b8 16 1a 00
	00		 mov	 r8d, 6678		; 00001a16H
  000ff	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00107	e8 00 00 00 00	 call	 _PyParallel_Guard
  0010c	85 c0		 test	 eax, eax
  0010e	75 08		 jne	 SHORT $LN8@obj2ast_ke
  00110	48 8b cb	 mov	 rcx, rbx
  00113	e8 00 00 00 00	 call	 _Py_DecRef
$LN8@obj2ast_ke:

; 6682 :     }
; 6683 :     *out = keyword(arg, value, arena);

  00118	48 8b 54 24 78	 mov	 rdx, QWORD PTR value$[rsp]
  0011d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR arg$[rsp]
  00122	4c 8b c6	 mov	 r8, rsi
  00125	e8 00 00 00 00	 call	 _Py_keyword
  0012a	49 89 04 24	 mov	 QWORD PTR [r12], rax

; 6684 :     return 0;

  0012e	33 c0		 xor	 eax, eax
  00130	eb 2b		 jmp	 SHORT $LN21@obj2ast_ke
$LN12@obj2ast_ke:

; 6679 :     } else {
; 6680 :         PyErr_SetString(PyExc_TypeError, "required field \"value\" missing from keyword");

  00132	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@HMJIBNCO@required?5field?5?$CCvalue?$CC?5missing?5f@

; 6681 :         return 1;

  00139	eb 11		 jmp	 SHORT $LN23@obj2ast_ke
$failed$27760:

; 6685 : failed:
; 6686 :     Py_XDECREF(tmp);

  0013b	48 8b cb	 mov	 rcx, rbx
  0013e	e8 00 00 00 00	 call	 _Py_DecRef

; 6687 :     return 1;

  00143	eb 13		 jmp	 SHORT $LN3@obj2ast_ke
$LN20@obj2ast_ke:

; 6668 :     } else {
; 6669 :         PyErr_SetString(PyExc_TypeError, "required field \"arg\" missing from keyword");

  00145	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@PINDPDIB@required?5field?5?$CCarg?$CC?5missing?5fro@
$LN23@obj2ast_ke:
  0014c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00153	e8 00 00 00 00	 call	 PyErr_SetString
$LN3@obj2ast_ke:

; 6670 :         return 1;

  00158	b8 01 00 00 00	 mov	 eax, 1
$LN21@obj2ast_ke:

; 6688 : }

  0015d	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00162	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  00167	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0016b	41 5c		 pop	 r12
  0016d	5f		 pop	 rdi
  0016e	5e		 pop	 rsi
  0016f	c3		 ret	 0
obj2ast_keyword ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@HAJLLOEN@required?5field?5?$CCname?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0O@LGAOEHDE@obj2ast_alias?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_alias DD imagerel obj2ast_alias
	DD	imagerel obj2ast_alias+359
	DD	imagerel $unwind$obj2ast_alias
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_alias DD 081201H
	DD	0d5412H
	DD	0c3412H
	DD	0c00e7212H
	DD	0600b700cH
xdata	ENDS
;	COMDAT ??_C@_0CJ@HAJLLOEN@required?5field?5?$CCname?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CJ@HAJLLOEN@required?5field?5?$CCname?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "name" missing from alias', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LGAOEHDE@obj2ast_alias?$AA@
CONST	SEGMENT
??_C@_0O@LGAOEHDE@obj2ast_alias?$AA@ DB 'obj2ast_alias', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT obj2ast_alias
_TEXT	SEGMENT
name$ = 48
obj$ = 96
out$ = 104
arena$ = 112
asname$ = 120
obj2ast_alias PROC					; COMDAT

; 6692 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	41 54		 push	 r12
  0000e	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 6693 :     PyObject* tmp = NULL;
; 6694 :     identifier name;
; 6695 :     identifier asname;
; 6696 : 
; 6697 :     if (_PyObject_HasAttrId(obj, &PyId_name)) {

  00012	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR _tls_index
  00019	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00022	4c 8b e2	 mov	 r12, rdx
  00025	4a 8b 2c c8	 mov	 rbp, QWORD PTR [rax+r9*8]
  00029	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_name
  0002e	49 8b f0	 mov	 rsi, r8
  00031	48 03 dd	 add	 rbx, rbp
  00034	48 8b f9	 mov	 rdi, rcx
  00037	48 8b d3	 mov	 rdx, rbx
  0003a	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0003f	85 c0		 test	 eax, eax
  00041	0f 84 f5 00 00
	00		 je	 $LN20@obj2ast_al

; 6698 :         int res;
; 6699 :         tmp = _PyObject_GetAttrId(obj, &PyId_name);

  00047	48 8b d3	 mov	 rdx, rbx
  0004a	48 8b cf	 mov	 rcx, rdi
  0004d	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00052	48 8b d8	 mov	 rbx, rax

; 6700 :         if (tmp == NULL) goto failed;

  00055	48 85 c0	 test	 rax, rax
  00058	0f 84 f1 00 00
	00		 je	 $LN3@obj2ast_al

; 6701 :         res = obj2ast_identifier(tmp, &name, arena);

  0005e	48 8d 54 24 30	 lea	 rdx, QWORD PTR name$[rsp]
  00063	4c 8b c6	 mov	 r8, rsi
  00066	48 8b c8	 mov	 rcx, rax
  00069	e8 00 00 00 00	 call	 obj2ast_identifier

; 6702 :         if (res != 0) goto failed;

  0006e	85 c0		 test	 eax, eax
  00070	0f 85 bc 00 00
	00		 jne	 $failed$27808

; 6703 :         Py_CLEAR(tmp);

  00076	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0007d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@LGAOEHDE@obj2ast_alias?$AA@
  00084	4c 8b cb	 mov	 r9, rbx
  00087	41 b8 2f 1a 00
	00		 mov	 r8d, 6703		; 00001a2fH
  0008d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00095	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009a	85 c0		 test	 eax, eax
  0009c	75 08		 jne	 SHORT $LN16@obj2ast_al
  0009e	48 8b cb	 mov	 rcx, rbx
  000a1	e8 00 00 00 00	 call	 _Py_DecRef
$LN16@obj2ast_al:

; 6707 :     }
; 6708 :     if (_PyObject_HasAttrId(obj, &PyId_asname)) {

  000a6	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_asname
  000ab	48 8b cf	 mov	 rcx, rdi
  000ae	48 03 dd	 add	 rbx, rbp
  000b1	48 8b d3	 mov	 rdx, rbx
  000b4	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  000b9	85 c0		 test	 eax, eax
  000bb	74 5e		 je	 SHORT $LN12@obj2ast_al

; 6709 :         int res;
; 6710 :         tmp = _PyObject_GetAttrId(obj, &PyId_asname);

  000bd	48 8b d3	 mov	 rdx, rbx
  000c0	48 8b cf	 mov	 rcx, rdi
  000c3	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  000c8	48 8b d8	 mov	 rbx, rax

; 6711 :         if (tmp == NULL) goto failed;

  000cb	48 85 c0	 test	 rax, rax
  000ce	74 7f		 je	 SHORT $LN3@obj2ast_al

; 6712 :         res = obj2ast_identifier(tmp, &asname, arena);

  000d0	48 8d 54 24 78	 lea	 rdx, QWORD PTR asname$[rsp]
  000d5	4c 8b c6	 mov	 r8, rsi
  000d8	48 8b c8	 mov	 rcx, rax
  000db	e8 00 00 00 00	 call	 obj2ast_identifier

; 6713 :         if (res != 0) goto failed;

  000e0	85 c0		 test	 eax, eax
  000e2	75 4e		 jne	 SHORT $failed$27808

; 6714 :         Py_CLEAR(tmp);

  000e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  000eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@LGAOEHDE@obj2ast_alias?$AA@
  000f2	4c 8b cb	 mov	 r9, rbx
  000f5	41 b8 3a 1a 00
	00		 mov	 r8d, 6714		; 00001a3aH
  000fb	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00103	e8 00 00 00 00	 call	 _PyParallel_Guard
  00108	85 c0		 test	 eax, eax
  0010a	75 08		 jne	 SHORT $LN23@obj2ast_al
  0010c	48 8b cb	 mov	 rcx, rbx
  0010f	e8 00 00 00 00	 call	 _Py_DecRef
$LN23@obj2ast_al:

; 6715 :     } else {

  00114	48 8b 54 24 78	 mov	 rdx, QWORD PTR asname$[rsp]
  00119	eb 02		 jmp	 SHORT $LN5@obj2ast_al
$LN12@obj2ast_al:

; 6716 :         asname = NULL;

  0011b	33 d2		 xor	 edx, edx
$LN5@obj2ast_al:

; 6717 :     }
; 6718 :     *out = alias(name, asname, arena);

  0011d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR name$[rsp]
  00122	4c 8b c6	 mov	 r8, rsi
  00125	e8 00 00 00 00	 call	 _Py_alias
  0012a	49 89 04 24	 mov	 QWORD PTR [r12], rax

; 6719 :     return 0;

  0012e	33 c0		 xor	 eax, eax
  00130	eb 22		 jmp	 SHORT $LN21@obj2ast_al
$failed$27808:

; 6720 : failed:
; 6721 :     Py_XDECREF(tmp);

  00132	48 8b cb	 mov	 rcx, rbx
  00135	e8 00 00 00 00	 call	 _Py_DecRef

; 6722 :     return 1;

  0013a	eb 13		 jmp	 SHORT $LN3@obj2ast_al
$LN20@obj2ast_al:

; 6704 :     } else {
; 6705 :         PyErr_SetString(PyExc_TypeError, "required field \"name\" missing from alias");

  0013c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00143	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@HAJLLOEN@required?5field?5?$CCname?$CC?5missing?5fr@
  0014a	e8 00 00 00 00	 call	 PyErr_SetString
$LN3@obj2ast_al:

; 6706 :         return 1;

  0014f	b8 01 00 00 00	 mov	 eax, 1
$LN21@obj2ast_al:

; 6723 : }

  00154	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00159	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  0015e	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00162	41 5c		 pop	 r12
  00164	5f		 pop	 rdi
  00165	5e		 pop	 rsi
  00166	c3		 ret	 0
obj2ast_alias ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@LJOBGFGA@PyCF_ONLY_AST?$AA@		; `string'
PUBLIC	??_C@_03ENDOBHAC@AST?$AA@			; `string'
PUBLIC	PyInit__ast
EXTRN	PyModule_AddIntConstant:PROC
EXTRN	PyModule_GetDict:PROC
EXTRN	PyModule_Create2:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyInit__ast DD imagerel $LN114
	DD	imagerel $LN114+32
	DD	imagerel $unwind$PyInit__ast
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyInit__ast DD imagerel $LN114+32
	DD	imagerel $LN114+60
	DD	imagerel $chain$0$PyInit__ast
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyInit__ast DD imagerel $LN114+60
	DD	imagerel $LN114+3222
	DD	imagerel $chain$3$PyInit__ast
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$PyInit__ast DD imagerel $LN114+3222
	DD	imagerel $LN114+3270
	DD	imagerel $chain$5$PyInit__ast
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$PyInit__ast DD 040021H
	DD	047400H
	DD	063400H
	DD	imagerel $LN114
	DD	imagerel $LN114+32
	DD	imagerel $unwind$PyInit__ast
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyInit__ast DD 040821H
	DD	063408H
	DD	047400H
	DD	imagerel $LN114
	DD	imagerel $LN114+32
	DD	imagerel $unwind$PyInit__ast
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyInit__ast DD 020521H
	DD	047405H
	DD	imagerel $LN114
	DD	imagerel $LN114+32
	DD	imagerel $unwind$PyInit__ast
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit__ast DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0O@LJOBGFGA@PyCF_ONLY_AST?$AA@
CONST	SEGMENT
??_C@_0O@LJOBGFGA@PyCF_ONLY_AST?$AA@ DB 'PyCF_ONLY_AST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03ENDOBHAC@AST?$AA@
CONST	SEGMENT
??_C@_03ENDOBHAC@AST?$AA@ DB 'AST', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyInit__ast
_TEXT	SEGMENT
PyInit__ast PROC					; COMDAT

; 6766 : {

$LN114:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 6767 :     PyObject *m, *d;
; 6768 :     if (!init_types()) return NULL;

  00004	e8 00 00 00 00	 call	 init_types
  00009	85 c0		 test	 eax, eax
  0000b	75 07		 jne	 SHORT $LN108@PyInit__as
  0000d	33 c0		 xor	 eax, eax

; 6945 :         return NULL;
; 6946 :     return m;
; 6947 : }

  0000f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00013	c3		 ret	 0
$LN108@PyInit__as:

; 6769 :     m = PyModule_Create(&_astmodule);

  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_astmodule
  0001b	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00020	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00025	e8 00 00 00 00	 call	 PyModule_Create2
  0002a	48 8b f8	 mov	 rdi, rax

; 6770 :     if (!m) return NULL;

  0002d	48 85 c0	 test	 rax, rax
  00030	75 0a		 jne	 SHORT $LN107@PyInit__as
  00032	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]

; 6945 :         return NULL;
; 6946 :     return m;
; 6947 : }

  00037	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003b	c3		 ret	 0
$LN107@PyInit__as:

; 6771 :     d = PyModule_GetDict(m);

  0003c	48 8b c8	 mov	 rcx, rax
  0003f	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00044	e8 00 00 00 00	 call	 PyModule_GetDict

; 6772 :     if (PyDict_SetItemString(d, "AST", (PyObject*)&AST_type) < 0) return NULL;

  00049	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:AST_type
  00050	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03ENDOBHAC@AST?$AA@
  00057	48 8b c8	 mov	 rcx, rax
  0005a	48 8b d8	 mov	 rbx, rax
  0005d	e8 00 00 00 00	 call	 PyDict_SetItemString
  00062	85 c0		 test	 eax, eax
  00064	0f 88 1b 0c 00
	00		 js	 $LN113@PyInit__as

; 6773 :     if (PyModule_AddIntConstant(m, "PyCF_ONLY_AST", PyCF_ONLY_AST) < 0)

  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@LJOBGFGA@PyCF_ONLY_AST?$AA@
  00071	41 b8 00 04 00
	00		 mov	 r8d, 1024		; 00000400H
  00077	48 8b cf	 mov	 rcx, rdi
  0007a	e8 00 00 00 00	 call	 PyModule_AddIntConstant
  0007f	85 c0		 test	 eax, eax

; 6774 :         return NULL;

  00081	0f 88 fe 0b 00
	00		 js	 $LN113@PyInit__as

; 6775 :     if (PyDict_SetItemString(d, "mod", (PyObject*)mod_type) < 0) return NULL;

  00087	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR mod_type
  0008e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03FFONCNID@mod?$AA@
  00095	48 8b cb	 mov	 rcx, rbx
  00098	e8 00 00 00 00	 call	 PyDict_SetItemString
  0009d	85 c0		 test	 eax, eax
  0009f	0f 88 e0 0b 00
	00		 js	 $LN113@PyInit__as

; 6776 :     if (PyDict_SetItemString(d, "Module", (PyObject*)Module_type) < 0) return

  000a5	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Module_type
  000ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06NHPJKFDC@Module?$AA@
  000b3	48 8b cb	 mov	 rcx, rbx
  000b6	e8 00 00 00 00	 call	 PyDict_SetItemString
  000bb	85 c0		 test	 eax, eax

; 6777 :         NULL;

  000bd	0f 88 c2 0b 00
	00		 js	 $LN113@PyInit__as

; 6778 :     if (PyDict_SetItemString(d, "Interactive", (PyObject*)Interactive_type) <
; 6779 :         0) return NULL;

  000c3	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Interactive_type
  000ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@INEKDBAI@Interactive?$AA@
  000d1	48 8b cb	 mov	 rcx, rbx
  000d4	e8 00 00 00 00	 call	 PyDict_SetItemString
  000d9	85 c0		 test	 eax, eax
  000db	0f 88 a4 0b 00
	00		 js	 $LN113@PyInit__as

; 6780 :     if (PyDict_SetItemString(d, "Expression", (PyObject*)Expression_type) < 0)

  000e1	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Expression_type
  000e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@NMLOJPGF@Expression?$AA@
  000ef	48 8b cb	 mov	 rcx, rbx
  000f2	e8 00 00 00 00	 call	 PyDict_SetItemString
  000f7	85 c0		 test	 eax, eax

; 6781 :         return NULL;

  000f9	0f 88 86 0b 00
	00		 js	 $LN113@PyInit__as

; 6782 :     if (PyDict_SetItemString(d, "Suite", (PyObject*)Suite_type) < 0) return

  000ff	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Suite_type
  00106	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05PIEJKMFN@Suite?$AA@
  0010d	48 8b cb	 mov	 rcx, rbx
  00110	e8 00 00 00 00	 call	 PyDict_SetItemString
  00115	85 c0		 test	 eax, eax

; 6783 :         NULL;

  00117	0f 88 68 0b 00
	00		 js	 $LN113@PyInit__as

; 6784 :     if (PyDict_SetItemString(d, "stmt", (PyObject*)stmt_type) < 0) return NULL;

  0011d	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR stmt_type
  00124	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04GIKOEBLH@stmt?$AA@
  0012b	48 8b cb	 mov	 rcx, rbx
  0012e	e8 00 00 00 00	 call	 PyDict_SetItemString
  00133	85 c0		 test	 eax, eax
  00135	0f 88 4a 0b 00
	00		 js	 $LN113@PyInit__as

; 6785 :     if (PyDict_SetItemString(d, "FunctionDef", (PyObject*)FunctionDef_type) <
; 6786 :         0) return NULL;

  0013b	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR FunctionDef_type
  00142	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@POJILEOM@FunctionDef?$AA@
  00149	48 8b cb	 mov	 rcx, rbx
  0014c	e8 00 00 00 00	 call	 PyDict_SetItemString
  00151	85 c0		 test	 eax, eax
  00153	0f 88 2c 0b 00
	00		 js	 $LN113@PyInit__as

; 6787 :     if (PyDict_SetItemString(d, "ClassDef", (PyObject*)ClassDef_type) < 0)

  00159	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR ClassDef_type
  00160	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OGFMJMG@ClassDef?$AA@
  00167	48 8b cb	 mov	 rcx, rbx
  0016a	e8 00 00 00 00	 call	 PyDict_SetItemString
  0016f	85 c0		 test	 eax, eax

; 6788 :         return NULL;

  00171	0f 88 0e 0b 00
	00		 js	 $LN113@PyInit__as

; 6789 :     if (PyDict_SetItemString(d, "Return", (PyObject*)Return_type) < 0) return

  00177	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Return_type
  0017e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06HCFIKKEA@Return?$AA@
  00185	48 8b cb	 mov	 rcx, rbx
  00188	e8 00 00 00 00	 call	 PyDict_SetItemString
  0018d	85 c0		 test	 eax, eax

; 6790 :         NULL;

  0018f	0f 88 f0 0a 00
	00		 js	 $LN113@PyInit__as

; 6791 :     if (PyDict_SetItemString(d, "Delete", (PyObject*)Delete_type) < 0) return

  00195	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Delete_type
  0019c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06JBKGCNBB@Delete?$AA@
  001a3	48 8b cb	 mov	 rcx, rbx
  001a6	e8 00 00 00 00	 call	 PyDict_SetItemString
  001ab	85 c0		 test	 eax, eax

; 6792 :         NULL;

  001ad	0f 88 d2 0a 00
	00		 js	 $LN113@PyInit__as

; 6793 :     if (PyDict_SetItemString(d, "Assign", (PyObject*)Assign_type) < 0) return

  001b3	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Assign_type
  001ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06EDODJIDJ@Assign?$AA@
  001c1	48 8b cb	 mov	 rcx, rbx
  001c4	e8 00 00 00 00	 call	 PyDict_SetItemString
  001c9	85 c0		 test	 eax, eax

; 6794 :         NULL;

  001cb	0f 88 b4 0a 00
	00		 js	 $LN113@PyInit__as

; 6795 :     if (PyDict_SetItemString(d, "AugAssign", (PyObject*)AugAssign_type) < 0)

  001d1	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR AugAssign_type
  001d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09CMGHGMJH@AugAssign?$AA@
  001df	48 8b cb	 mov	 rcx, rbx
  001e2	e8 00 00 00 00	 call	 PyDict_SetItemString
  001e7	85 c0		 test	 eax, eax

; 6796 :         return NULL;

  001e9	0f 88 96 0a 00
	00		 js	 $LN113@PyInit__as

; 6797 :     if (PyDict_SetItemString(d, "For", (PyObject*)For_type) < 0) return NULL;

  001ef	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR For_type
  001f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03DOEGLAGL@For?$AA@
  001fd	48 8b cb	 mov	 rcx, rbx
  00200	e8 00 00 00 00	 call	 PyDict_SetItemString
  00205	85 c0		 test	 eax, eax
  00207	0f 88 78 0a 00
	00		 js	 $LN113@PyInit__as

; 6798 :     if (PyDict_SetItemString(d, "While", (PyObject*)While_type) < 0) return

  0020d	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR While_type
  00214	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05OJJNEPLA@While?$AA@
  0021b	48 8b cb	 mov	 rcx, rbx
  0021e	e8 00 00 00 00	 call	 PyDict_SetItemString
  00223	85 c0		 test	 eax, eax

; 6799 :         NULL;

  00225	0f 88 5a 0a 00
	00		 js	 $LN113@PyInit__as

; 6800 :     if (PyDict_SetItemString(d, "If", (PyObject*)If_type) < 0) return NULL;

  0022b	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR If_type
  00232	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02EMFCFMID@If?$AA@
  00239	48 8b cb	 mov	 rcx, rbx
  0023c	e8 00 00 00 00	 call	 PyDict_SetItemString
  00241	85 c0		 test	 eax, eax
  00243	0f 88 3c 0a 00
	00		 js	 $LN113@PyInit__as

; 6801 :     if (PyDict_SetItemString(d, "With", (PyObject*)With_type) < 0) return NULL;

  00249	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR With_type
  00250	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04LBMICJD@With?$AA@
  00257	48 8b cb	 mov	 rcx, rbx
  0025a	e8 00 00 00 00	 call	 PyDict_SetItemString
  0025f	85 c0		 test	 eax, eax
  00261	0f 88 1e 0a 00
	00		 js	 $LN113@PyInit__as

; 6802 :     if (PyDict_SetItemString(d, "Raise", (PyObject*)Raise_type) < 0) return

  00267	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Raise_type
  0026e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KDDKFIDP@Raise?$AA@
  00275	48 8b cb	 mov	 rcx, rbx
  00278	e8 00 00 00 00	 call	 PyDict_SetItemString
  0027d	85 c0		 test	 eax, eax

; 6803 :         NULL;

  0027f	0f 88 00 0a 00
	00		 js	 $LN113@PyInit__as

; 6804 :     if (PyDict_SetItemString(d, "Try", (PyObject*)Try_type) < 0) return NULL;

  00285	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Try_type
  0028c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03DDFMMGJH@Try?$AA@
  00293	48 8b cb	 mov	 rcx, rbx
  00296	e8 00 00 00 00	 call	 PyDict_SetItemString
  0029b	85 c0		 test	 eax, eax
  0029d	0f 88 e2 09 00
	00		 js	 $LN113@PyInit__as

; 6805 :     if (PyDict_SetItemString(d, "Assert", (PyObject*)Assert_type) < 0) return

  002a3	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Assert_type
  002aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06KDPFLMMB@Assert?$AA@
  002b1	48 8b cb	 mov	 rcx, rbx
  002b4	e8 00 00 00 00	 call	 PyDict_SetItemString
  002b9	85 c0		 test	 eax, eax

; 6806 :         NULL;

  002bb	0f 88 c4 09 00
	00		 js	 $LN113@PyInit__as

; 6807 :     if (PyDict_SetItemString(d, "Import", (PyObject*)Import_type) < 0) return

  002c1	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Import_type
  002c8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06IBNLALPJ@Import?$AA@
  002cf	48 8b cb	 mov	 rcx, rbx
  002d2	e8 00 00 00 00	 call	 PyDict_SetItemString
  002d7	85 c0		 test	 eax, eax

; 6808 :         NULL;

  002d9	0f 88 a6 09 00
	00		 js	 $LN113@PyInit__as

; 6809 :     if (PyDict_SetItemString(d, "ImportFrom", (PyObject*)ImportFrom_type) < 0)

  002df	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR ImportFrom_type
  002e6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@IKBFEFKH@ImportFrom?$AA@
  002ed	48 8b cb	 mov	 rcx, rbx
  002f0	e8 00 00 00 00	 call	 PyDict_SetItemString
  002f5	85 c0		 test	 eax, eax

; 6810 :         return NULL;

  002f7	0f 88 88 09 00
	00		 js	 $LN113@PyInit__as

; 6811 :     if (PyDict_SetItemString(d, "Global", (PyObject*)Global_type) < 0) return

  002fd	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Global_type
  00304	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06JGBJPOPP@Global?$AA@
  0030b	48 8b cb	 mov	 rcx, rbx
  0030e	e8 00 00 00 00	 call	 PyDict_SetItemString
  00313	85 c0		 test	 eax, eax

; 6812 :         NULL;

  00315	0f 88 6a 09 00
	00		 js	 $LN113@PyInit__as

; 6813 :     if (PyDict_SetItemString(d, "Nonlocal", (PyObject*)Nonlocal_type) < 0)

  0031b	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Nonlocal_type
  00322	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08BAHOEEIH@Nonlocal?$AA@
  00329	48 8b cb	 mov	 rcx, rbx
  0032c	e8 00 00 00 00	 call	 PyDict_SetItemString
  00331	85 c0		 test	 eax, eax

; 6814 :         return NULL;

  00333	0f 88 4c 09 00
	00		 js	 $LN113@PyInit__as

; 6815 :     if (PyDict_SetItemString(d, "Expr", (PyObject*)Expr_type) < 0) return NULL;

  00339	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Expr_type
  00340	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04EOLNCEIM@Expr?$AA@
  00347	48 8b cb	 mov	 rcx, rbx
  0034a	e8 00 00 00 00	 call	 PyDict_SetItemString
  0034f	85 c0		 test	 eax, eax
  00351	0f 88 2e 09 00
	00		 js	 $LN113@PyInit__as

; 6816 :     if (PyDict_SetItemString(d, "Pass", (PyObject*)Pass_type) < 0) return NULL;

  00357	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Pass_type
  0035e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04NAPBKLHD@Pass?$AA@
  00365	48 8b cb	 mov	 rcx, rbx
  00368	e8 00 00 00 00	 call	 PyDict_SetItemString
  0036d	85 c0		 test	 eax, eax
  0036f	0f 88 10 09 00
	00		 js	 $LN113@PyInit__as

; 6817 :     if (PyDict_SetItemString(d, "Break", (PyObject*)Break_type) < 0) return

  00375	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Break_type
  0037c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05EMFLFCNO@Break?$AA@
  00383	48 8b cb	 mov	 rcx, rbx
  00386	e8 00 00 00 00	 call	 PyDict_SetItemString
  0038b	85 c0		 test	 eax, eax

; 6818 :         NULL;

  0038d	0f 88 f2 08 00
	00		 js	 $LN113@PyInit__as

; 6819 :     if (PyDict_SetItemString(d, "Continue", (PyObject*)Continue_type) < 0)

  00393	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Continue_type
  0039a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08LJHDLOLO@Continue?$AA@
  003a1	48 8b cb	 mov	 rcx, rbx
  003a4	e8 00 00 00 00	 call	 PyDict_SetItemString
  003a9	85 c0		 test	 eax, eax

; 6820 :         return NULL;

  003ab	0f 88 d4 08 00
	00		 js	 $LN113@PyInit__as

; 6821 :     if (PyDict_SetItemString(d, "expr", (PyObject*)expr_type) < 0) return NULL;

  003b1	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR expr_type
  003b8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04IPHMALII@expr?$AA@
  003bf	48 8b cb	 mov	 rcx, rbx
  003c2	e8 00 00 00 00	 call	 PyDict_SetItemString
  003c7	85 c0		 test	 eax, eax
  003c9	0f 88 b6 08 00
	00		 js	 $LN113@PyInit__as

; 6822 :     if (PyDict_SetItemString(d, "BoolOp", (PyObject*)BoolOp_type) < 0) return

  003cf	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR BoolOp_type
  003d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06HGMOOCHC@BoolOp?$AA@
  003dd	48 8b cb	 mov	 rcx, rbx
  003e0	e8 00 00 00 00	 call	 PyDict_SetItemString
  003e5	85 c0		 test	 eax, eax

; 6823 :         NULL;

  003e7	0f 88 98 08 00
	00		 js	 $LN113@PyInit__as

; 6824 :     if (PyDict_SetItemString(d, "BinOp", (PyObject*)BinOp_type) < 0) return

  003ed	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR BinOp_type
  003f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05BHIPNDDM@BinOp?$AA@
  003fb	48 8b cb	 mov	 rcx, rbx
  003fe	e8 00 00 00 00	 call	 PyDict_SetItemString
  00403	85 c0		 test	 eax, eax

; 6825 :         NULL;

  00405	0f 88 7a 08 00
	00		 js	 $LN113@PyInit__as

; 6826 :     if (PyDict_SetItemString(d, "UnaryOp", (PyObject*)UnaryOp_type) < 0) return

  0040b	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR UnaryOp_type
  00412	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07FOOGNJMB@UnaryOp?$AA@
  00419	48 8b cb	 mov	 rcx, rbx
  0041c	e8 00 00 00 00	 call	 PyDict_SetItemString
  00421	85 c0		 test	 eax, eax

; 6827 :         NULL;

  00423	0f 88 5c 08 00
	00		 js	 $LN113@PyInit__as

; 6828 :     if (PyDict_SetItemString(d, "Lambda", (PyObject*)Lambda_type) < 0) return

  00429	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Lambda_type
  00430	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06OBCFFGBN@Lambda?$AA@
  00437	48 8b cb	 mov	 rcx, rbx
  0043a	e8 00 00 00 00	 call	 PyDict_SetItemString
  0043f	85 c0		 test	 eax, eax

; 6829 :         NULL;

  00441	0f 88 3e 08 00
	00		 js	 $LN113@PyInit__as

; 6830 :     if (PyDict_SetItemString(d, "IfExp", (PyObject*)IfExp_type) < 0) return

  00447	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR IfExp_type
  0044e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KJAPGPAE@IfExp?$AA@
  00455	48 8b cb	 mov	 rcx, rbx
  00458	e8 00 00 00 00	 call	 PyDict_SetItemString
  0045d	85 c0		 test	 eax, eax

; 6831 :         NULL;

  0045f	0f 88 20 08 00
	00		 js	 $LN113@PyInit__as

; 6832 :     if (PyDict_SetItemString(d, "Dict", (PyObject*)Dict_type) < 0) return NULL;

  00465	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Dict_type
  0046c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04NDECIHGJ@Dict?$AA@
  00473	48 8b cb	 mov	 rcx, rbx
  00476	e8 00 00 00 00	 call	 PyDict_SetItemString
  0047b	85 c0		 test	 eax, eax
  0047d	0f 88 02 08 00
	00		 js	 $LN113@PyInit__as

; 6833 :     if (PyDict_SetItemString(d, "Set", (PyObject*)Set_type) < 0) return NULL;

  00483	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Set_type
  0048a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03CEMDFJG@Set?$AA@
  00491	48 8b cb	 mov	 rcx, rbx
  00494	e8 00 00 00 00	 call	 PyDict_SetItemString
  00499	85 c0		 test	 eax, eax
  0049b	0f 88 e4 07 00
	00		 js	 $LN113@PyInit__as

; 6834 :     if (PyDict_SetItemString(d, "ListComp", (PyObject*)ListComp_type) < 0)

  004a1	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR ListComp_type
  004a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08LAOBMBPK@ListComp?$AA@
  004af	48 8b cb	 mov	 rcx, rbx
  004b2	e8 00 00 00 00	 call	 PyDict_SetItemString
  004b7	85 c0		 test	 eax, eax

; 6835 :         return NULL;

  004b9	0f 88 c6 07 00
	00		 js	 $LN113@PyInit__as

; 6836 :     if (PyDict_SetItemString(d, "SetComp", (PyObject*)SetComp_type) < 0) return

  004bf	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR SetComp_type
  004c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07BLGPBMGP@SetComp?$AA@
  004cd	48 8b cb	 mov	 rcx, rbx
  004d0	e8 00 00 00 00	 call	 PyDict_SetItemString
  004d5	85 c0		 test	 eax, eax

; 6837 :         NULL;

  004d7	0f 88 a8 07 00
	00		 js	 $LN113@PyInit__as

; 6838 :     if (PyDict_SetItemString(d, "DictComp", (PyObject*)DictComp_type) < 0)

  004dd	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR DictComp_type
  004e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08GMOHPPCM@DictComp?$AA@
  004eb	48 8b cb	 mov	 rcx, rbx
  004ee	e8 00 00 00 00	 call	 PyDict_SetItemString
  004f3	85 c0		 test	 eax, eax

; 6839 :         return NULL;

  004f5	0f 88 8a 07 00
	00		 js	 $LN113@PyInit__as

; 6840 :     if (PyDict_SetItemString(d, "GeneratorExp", (PyObject*)GeneratorExp_type) <
; 6841 :         0) return NULL;

  004fb	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR GeneratorExp_type
  00502	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@MMHMBOOD@GeneratorExp?$AA@
  00509	48 8b cb	 mov	 rcx, rbx
  0050c	e8 00 00 00 00	 call	 PyDict_SetItemString
  00511	85 c0		 test	 eax, eax
  00513	0f 88 6c 07 00
	00		 js	 $LN113@PyInit__as

; 6842 :     if (PyDict_SetItemString(d, "Yield", (PyObject*)Yield_type) < 0) return

  00519	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Yield_type
  00520	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05LNDKIJIJ@Yield?$AA@
  00527	48 8b cb	 mov	 rcx, rbx
  0052a	e8 00 00 00 00	 call	 PyDict_SetItemString
  0052f	85 c0		 test	 eax, eax

; 6843 :         NULL;

  00531	0f 88 4e 07 00
	00		 js	 $LN113@PyInit__as

; 6844 :     if (PyDict_SetItemString(d, "YieldFrom", (PyObject*)YieldFrom_type) < 0)

  00537	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR YieldFrom_type
  0053e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09GLJBJEPP@YieldFrom?$AA@
  00545	48 8b cb	 mov	 rcx, rbx
  00548	e8 00 00 00 00	 call	 PyDict_SetItemString
  0054d	85 c0		 test	 eax, eax

; 6845 :         return NULL;

  0054f	0f 88 30 07 00
	00		 js	 $LN113@PyInit__as

; 6846 :     if (PyDict_SetItemString(d, "Compare", (PyObject*)Compare_type) < 0) return

  00555	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Compare_type
  0055c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07MBOMJGGF@Compare?$AA@
  00563	48 8b cb	 mov	 rcx, rbx
  00566	e8 00 00 00 00	 call	 PyDict_SetItemString
  0056b	85 c0		 test	 eax, eax

; 6847 :         NULL;

  0056d	0f 88 12 07 00
	00		 js	 $LN113@PyInit__as

; 6848 :     if (PyDict_SetItemString(d, "Call", (PyObject*)Call_type) < 0) return NULL;

  00573	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Call_type
  0057a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04CNJBKMPC@Call?$AA@
  00581	48 8b cb	 mov	 rcx, rbx
  00584	e8 00 00 00 00	 call	 PyDict_SetItemString
  00589	85 c0		 test	 eax, eax
  0058b	0f 88 f4 06 00
	00		 js	 $LN113@PyInit__as

; 6849 :     if (PyDict_SetItemString(d, "Num", (PyObject*)Num_type) < 0) return NULL;

  00591	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Num_type
  00598	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03CHBJLALM@Num?$AA@
  0059f	48 8b cb	 mov	 rcx, rbx
  005a2	e8 00 00 00 00	 call	 PyDict_SetItemString
  005a7	85 c0		 test	 eax, eax
  005a9	0f 88 d6 06 00
	00		 js	 $LN113@PyInit__as

; 6850 :     if (PyDict_SetItemString(d, "Str", (PyObject*)Str_type) < 0) return NULL;

  005af	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Str_type
  005b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03EJPCFLFH@Str?$AA@
  005bd	48 8b cb	 mov	 rcx, rbx
  005c0	e8 00 00 00 00	 call	 PyDict_SetItemString
  005c5	85 c0		 test	 eax, eax
  005c7	0f 88 b8 06 00
	00		 js	 $LN113@PyInit__as

; 6851 :     if (PyDict_SetItemString(d, "Bytes", (PyObject*)Bytes_type) < 0) return

  005cd	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Bytes_type
  005d4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05FGDMGDLA@Bytes?$AA@
  005db	48 8b cb	 mov	 rcx, rbx
  005de	e8 00 00 00 00	 call	 PyDict_SetItemString
  005e3	85 c0		 test	 eax, eax

; 6852 :         NULL;

  005e5	0f 88 9a 06 00
	00		 js	 $LN113@PyInit__as

; 6853 :     if (PyDict_SetItemString(d, "Ellipsis", (PyObject*)Ellipsis_type) < 0)

  005eb	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Ellipsis_type
  005f2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08KKBGFFMJ@Ellipsis?$AA@
  005f9	48 8b cb	 mov	 rcx, rbx
  005fc	e8 00 00 00 00	 call	 PyDict_SetItemString
  00601	85 c0		 test	 eax, eax

; 6854 :         return NULL;

  00603	0f 88 7c 06 00
	00		 js	 $LN113@PyInit__as

; 6855 :     if (PyDict_SetItemString(d, "Attribute", (PyObject*)Attribute_type) < 0)

  00609	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Attribute_type
  00610	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09EIDFECNJ@Attribute?$AA@
  00617	48 8b cb	 mov	 rcx, rbx
  0061a	e8 00 00 00 00	 call	 PyDict_SetItemString
  0061f	85 c0		 test	 eax, eax

; 6856 :         return NULL;

  00621	0f 88 5e 06 00
	00		 js	 $LN113@PyInit__as

; 6857 :     if (PyDict_SetItemString(d, "Subscript", (PyObject*)Subscript_type) < 0)

  00627	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Subscript_type
  0062e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09OPNCODFI@Subscript?$AA@
  00635	48 8b cb	 mov	 rcx, rbx
  00638	e8 00 00 00 00	 call	 PyDict_SetItemString
  0063d	85 c0		 test	 eax, eax

; 6858 :         return NULL;

  0063f	0f 88 40 06 00
	00		 js	 $LN113@PyInit__as

; 6859 :     if (PyDict_SetItemString(d, "Starred", (PyObject*)Starred_type) < 0) return

  00645	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Starred_type
  0064c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07JHFCIAKE@Starred?$AA@
  00653	48 8b cb	 mov	 rcx, rbx
  00656	e8 00 00 00 00	 call	 PyDict_SetItemString
  0065b	85 c0		 test	 eax, eax

; 6860 :         NULL;

  0065d	0f 88 22 06 00
	00		 js	 $LN113@PyInit__as

; 6861 :     if (PyDict_SetItemString(d, "Name", (PyObject*)Name_type) < 0) return NULL;

  00663	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Name_type
  0066a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04FABLJDN@Name?$AA@
  00671	48 8b cb	 mov	 rcx, rbx
  00674	e8 00 00 00 00	 call	 PyDict_SetItemString
  00679	85 c0		 test	 eax, eax
  0067b	0f 88 04 06 00
	00		 js	 $LN113@PyInit__as

; 6862 :     if (PyDict_SetItemString(d, "List", (PyObject*)List_type) < 0) return NULL;

  00681	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR List_type
  00688	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04PPBEGPNI@List?$AA@
  0068f	48 8b cb	 mov	 rcx, rbx
  00692	e8 00 00 00 00	 call	 PyDict_SetItemString
  00697	85 c0		 test	 eax, eax
  00699	0f 88 e6 05 00
	00		 js	 $LN113@PyInit__as

; 6863 :     if (PyDict_SetItemString(d, "Tuple", (PyObject*)Tuple_type) < 0) return

  0069f	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Tuple_type
  006a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05NKGIHGDI@Tuple?$AA@
  006ad	48 8b cb	 mov	 rcx, rbx
  006b0	e8 00 00 00 00	 call	 PyDict_SetItemString
  006b5	85 c0		 test	 eax, eax

; 6864 :         NULL;

  006b7	0f 88 c8 05 00
	00		 js	 $LN113@PyInit__as

; 6865 :     if (PyDict_SetItemString(d, "expr_context", (PyObject*)expr_context_type) <
; 6866 :         0) return NULL;

  006bd	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR expr_context_type
  006c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@GABLJPJB@expr_context?$AA@
  006cb	48 8b cb	 mov	 rcx, rbx
  006ce	e8 00 00 00 00	 call	 PyDict_SetItemString
  006d3	85 c0		 test	 eax, eax
  006d5	0f 88 aa 05 00
	00		 js	 $LN113@PyInit__as

; 6867 :     if (PyDict_SetItemString(d, "Load", (PyObject*)Load_type) < 0) return NULL;

  006db	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Load_type
  006e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04IPBPFFEL@Load?$AA@
  006e9	48 8b cb	 mov	 rcx, rbx
  006ec	e8 00 00 00 00	 call	 PyDict_SetItemString
  006f1	85 c0		 test	 eax, eax
  006f3	0f 88 8c 05 00
	00		 js	 $LN113@PyInit__as

; 6868 :     if (PyDict_SetItemString(d, "Store", (PyObject*)Store_type) < 0) return

  006f9	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Store_type
  00700	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05OEMPKGID@Store?$AA@
  00707	48 8b cb	 mov	 rcx, rbx
  0070a	e8 00 00 00 00	 call	 PyDict_SetItemString
  0070f	85 c0		 test	 eax, eax

; 6869 :         NULL;

  00711	0f 88 6e 05 00
	00		 js	 $LN113@PyInit__as

; 6870 :     if (PyDict_SetItemString(d, "Del", (PyObject*)Del_type) < 0) return NULL;

  00717	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Del_type
  0071e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03ENJJMCOJ@Del?$AA@
  00725	48 8b cb	 mov	 rcx, rbx
  00728	e8 00 00 00 00	 call	 PyDict_SetItemString
  0072d	85 c0		 test	 eax, eax
  0072f	0f 88 50 05 00
	00		 js	 $LN113@PyInit__as

; 6871 :     if (PyDict_SetItemString(d, "AugLoad", (PyObject*)AugLoad_type) < 0) return

  00735	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR AugLoad_type
  0073c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07GCIJHPCC@AugLoad?$AA@
  00743	48 8b cb	 mov	 rcx, rbx
  00746	e8 00 00 00 00	 call	 PyDict_SetItemString
  0074b	85 c0		 test	 eax, eax

; 6872 :         NULL;

  0074d	0f 88 32 05 00
	00		 js	 $LN113@PyInit__as

; 6873 :     if (PyDict_SetItemString(d, "AugStore", (PyObject*)AugStore_type) < 0)

  00753	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR AugStore_type
  0075a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08NAEMOJFF@AugStore?$AA@
  00761	48 8b cb	 mov	 rcx, rbx
  00764	e8 00 00 00 00	 call	 PyDict_SetItemString
  00769	85 c0		 test	 eax, eax

; 6874 :         return NULL;

  0076b	0f 88 14 05 00
	00		 js	 $LN113@PyInit__as

; 6875 :     if (PyDict_SetItemString(d, "Param", (PyObject*)Param_type) < 0) return

  00771	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Param_type
  00778	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05LOJBNELM@Param?$AA@
  0077f	48 8b cb	 mov	 rcx, rbx
  00782	e8 00 00 00 00	 call	 PyDict_SetItemString
  00787	85 c0		 test	 eax, eax

; 6876 :         NULL;

  00789	0f 88 f6 04 00
	00		 js	 $LN113@PyInit__as

; 6877 :     if (PyDict_SetItemString(d, "slice", (PyObject*)slice_type) < 0) return

  0078f	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR slice_type
  00796	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05ILHMOJGN@slice?$AA@
  0079d	48 8b cb	 mov	 rcx, rbx
  007a0	e8 00 00 00 00	 call	 PyDict_SetItemString
  007a5	85 c0		 test	 eax, eax

; 6878 :         NULL;

  007a7	0f 88 d8 04 00
	00		 js	 $LN113@PyInit__as

; 6879 :     if (PyDict_SetItemString(d, "Slice", (PyObject*)Slice_type) < 0) return

  007ad	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Slice_type
  007b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05IMNAOMFL@Slice?$AA@
  007bb	48 8b cb	 mov	 rcx, rbx
  007be	e8 00 00 00 00	 call	 PyDict_SetItemString
  007c3	85 c0		 test	 eax, eax

; 6880 :         NULL;

  007c5	0f 88 ba 04 00
	00		 js	 $LN113@PyInit__as

; 6881 :     if (PyDict_SetItemString(d, "ExtSlice", (PyObject*)ExtSlice_type) < 0)

  007cb	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR ExtSlice_type
  007d2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08CIIMGBAD@ExtSlice?$AA@
  007d9	48 8b cb	 mov	 rcx, rbx
  007dc	e8 00 00 00 00	 call	 PyDict_SetItemString
  007e1	85 c0		 test	 eax, eax

; 6882 :         return NULL;

  007e3	0f 88 9c 04 00
	00		 js	 $LN113@PyInit__as

; 6883 :     if (PyDict_SetItemString(d, "Index", (PyObject*)Index_type) < 0) return

  007e9	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Index_type
  007f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05FNNGFGLF@Index?$AA@
  007f7	48 8b cb	 mov	 rcx, rbx
  007fa	e8 00 00 00 00	 call	 PyDict_SetItemString
  007ff	85 c0		 test	 eax, eax

; 6884 :         NULL;

  00801	0f 88 7e 04 00
	00		 js	 $LN113@PyInit__as

; 6885 :     if (PyDict_SetItemString(d, "boolop", (PyObject*)boolop_type) < 0) return

  00807	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR boolop_type
  0080e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06IBDOJNAO@boolop?$AA@
  00815	48 8b cb	 mov	 rcx, rbx
  00818	e8 00 00 00 00	 call	 PyDict_SetItemString
  0081d	85 c0		 test	 eax, eax

; 6886 :         NULL;

  0081f	0f 88 60 04 00
	00		 js	 $LN113@PyInit__as

; 6887 :     if (PyDict_SetItemString(d, "And", (PyObject*)And_type) < 0) return NULL;

  00825	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR And_type
  0082c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03LOMLFHDC@And?$AA@
  00833	48 8b cb	 mov	 rcx, rbx
  00836	e8 00 00 00 00	 call	 PyDict_SetItemString
  0083b	85 c0		 test	 eax, eax
  0083d	0f 88 42 04 00
	00		 js	 $LN113@PyInit__as

; 6888 :     if (PyDict_SetItemString(d, "Or", (PyObject*)Or_type) < 0) return NULL;

  00843	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Or_type
  0084a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02GGHBPHGE@Or?$AA@
  00851	48 8b cb	 mov	 rcx, rbx
  00854	e8 00 00 00 00	 call	 PyDict_SetItemString
  00859	85 c0		 test	 eax, eax
  0085b	0f 88 24 04 00
	00		 js	 $LN113@PyInit__as

; 6889 :     if (PyDict_SetItemString(d, "operator", (PyObject*)operator_type) < 0)

  00861	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR operator_type
  00868	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08LHJFAFGD@operator?$AA@
  0086f	48 8b cb	 mov	 rcx, rbx
  00872	e8 00 00 00 00	 call	 PyDict_SetItemString
  00877	85 c0		 test	 eax, eax

; 6890 :         return NULL;

  00879	0f 88 06 04 00
	00		 js	 $LN113@PyInit__as

; 6891 :     if (PyDict_SetItemString(d, "Add", (PyObject*)Add_type) < 0) return NULL;

  0087f	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Add_type
  00886	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03LDFMNCOE@Add?$AA@
  0088d	48 8b cb	 mov	 rcx, rbx
  00890	e8 00 00 00 00	 call	 PyDict_SetItemString
  00895	85 c0		 test	 eax, eax
  00897	0f 88 e8 03 00
	00		 js	 $LN113@PyInit__as

; 6892 :     if (PyDict_SetItemString(d, "Sub", (PyObject*)Sub_type) < 0) return NULL;

  0089d	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Sub_type
  008a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03CPCCDDB@Sub?$AA@
  008ab	48 8b cb	 mov	 rcx, rbx
  008ae	e8 00 00 00 00	 call	 PyDict_SetItemString
  008b3	85 c0		 test	 eax, eax
  008b5	0f 88 ca 03 00
	00		 js	 $LN113@PyInit__as

; 6893 :     if (PyDict_SetItemString(d, "Mult", (PyObject*)Mult_type) < 0) return NULL;

  008bb	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Mult_type
  008c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04MPMBEKAC@Mult?$AA@
  008c9	48 8b cb	 mov	 rcx, rbx
  008cc	e8 00 00 00 00	 call	 PyDict_SetItemString
  008d1	85 c0		 test	 eax, eax
  008d3	0f 88 ac 03 00
	00		 js	 $LN113@PyInit__as

; 6894 :     if (PyDict_SetItemString(d, "Div", (PyObject*)Div_type) < 0) return NULL;

  008d9	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Div_type
  008e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03PEKOMBFG@Div?$AA@
  008e7	48 8b cb	 mov	 rcx, rbx
  008ea	e8 00 00 00 00	 call	 PyDict_SetItemString
  008ef	85 c0		 test	 eax, eax
  008f1	0f 88 8e 03 00
	00		 js	 $LN113@PyInit__as

; 6895 :     if (PyDict_SetItemString(d, "Mod", (PyObject*)Mod_type) < 0) return NULL;

  008f7	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Mod_type
  008fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03PFNPICLN@Mod?$AA@
  00905	48 8b cb	 mov	 rcx, rbx
  00908	e8 00 00 00 00	 call	 PyDict_SetItemString
  0090d	85 c0		 test	 eax, eax
  0090f	0f 88 70 03 00
	00		 js	 $LN113@PyInit__as

; 6896 :     if (PyDict_SetItemString(d, "Pow", (PyObject*)Pow_type) < 0) return NULL;

  00915	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Pow_type
  0091c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03DGEDEMGN@Pow?$AA@
  00923	48 8b cb	 mov	 rcx, rbx
  00926	e8 00 00 00 00	 call	 PyDict_SetItemString
  0092b	85 c0		 test	 eax, eax
  0092d	0f 88 52 03 00
	00		 js	 $LN113@PyInit__as

; 6897 :     if (PyDict_SetItemString(d, "LShift", (PyObject*)LShift_type) < 0) return

  00933	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR LShift_type
  0093a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06IDEHMKLA@LShift?$AA@
  00941	48 8b cb	 mov	 rcx, rbx
  00944	e8 00 00 00 00	 call	 PyDict_SetItemString
  00949	85 c0		 test	 eax, eax

; 6898 :         NULL;

  0094b	0f 88 34 03 00
	00		 js	 $LN113@PyInit__as

; 6899 :     if (PyDict_SetItemString(d, "RShift", (PyObject*)RShift_type) < 0) return

  00951	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR RShift_type
  00958	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06LEKGCNCD@RShift?$AA@
  0095f	48 8b cb	 mov	 rcx, rbx
  00962	e8 00 00 00 00	 call	 PyDict_SetItemString
  00967	85 c0		 test	 eax, eax

; 6900 :         NULL;

  00969	0f 88 16 03 00
	00		 js	 $LN113@PyInit__as

; 6901 :     if (PyDict_SetItemString(d, "BitOr", (PyObject*)BitOr_type) < 0) return

  0096f	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR BitOr_type
  00976	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05BKBNAGEF@BitOr?$AA@
  0097d	48 8b cb	 mov	 rcx, rbx
  00980	e8 00 00 00 00	 call	 PyDict_SetItemString
  00985	85 c0		 test	 eax, eax

; 6902 :         NULL;

  00987	0f 88 f8 02 00
	00		 js	 $LN113@PyInit__as

; 6903 :     if (PyDict_SetItemString(d, "BitXor", (PyObject*)BitXor_type) < 0) return

  0098d	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR BitXor_type
  00994	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06MCJFOMGI@BitXor?$AA@
  0099b	48 8b cb	 mov	 rcx, rbx
  0099e	e8 00 00 00 00	 call	 PyDict_SetItemString
  009a3	85 c0		 test	 eax, eax

; 6904 :         NULL;

  009a5	0f 88 da 02 00
	00		 js	 $LN113@PyInit__as

; 6905 :     if (PyDict_SetItemString(d, "BitAnd", (PyObject*)BitAnd_type) < 0) return

  009ab	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR BitAnd_type
  009b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06PCNOCLJN@BitAnd?$AA@
  009b9	48 8b cb	 mov	 rcx, rbx
  009bc	e8 00 00 00 00	 call	 PyDict_SetItemString
  009c1	85 c0		 test	 eax, eax

; 6906 :         NULL;

  009c3	0f 88 bc 02 00
	00		 js	 $LN113@PyInit__as

; 6907 :     if (PyDict_SetItemString(d, "FloorDiv", (PyObject*)FloorDiv_type) < 0)

  009c9	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR FloorDiv_type
  009d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08BOGBPHLB@FloorDiv?$AA@
  009d7	48 8b cb	 mov	 rcx, rbx
  009da	e8 00 00 00 00	 call	 PyDict_SetItemString
  009df	85 c0		 test	 eax, eax

; 6908 :         return NULL;

  009e1	0f 88 9e 02 00
	00		 js	 $LN113@PyInit__as

; 6909 :     if (PyDict_SetItemString(d, "unaryop", (PyObject*)unaryop_type) < 0) return

  009e7	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR unaryop_type
  009ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07JPNNPNHH@unaryop?$AA@
  009f5	48 8b cb	 mov	 rcx, rbx
  009f8	e8 00 00 00 00	 call	 PyDict_SetItemString
  009fd	85 c0		 test	 eax, eax

; 6910 :         NULL;

  009ff	0f 88 80 02 00
	00		 js	 $LN113@PyInit__as

; 6911 :     if (PyDict_SetItemString(d, "Invert", (PyObject*)Invert_type) < 0) return

  00a05	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Invert_type
  00a0c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06OHLCGMJD@Invert?$AA@
  00a13	48 8b cb	 mov	 rcx, rbx
  00a16	e8 00 00 00 00	 call	 PyDict_SetItemString
  00a1b	85 c0		 test	 eax, eax

; 6912 :         NULL;

  00a1d	0f 88 62 02 00
	00		 js	 $LN113@PyInit__as

; 6913 :     if (PyDict_SetItemString(d, "Not", (PyObject*)Not_type) < 0) return NULL;

  00a23	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Not_type
  00a2a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03KNKIDPAC@Not?$AA@
  00a31	48 8b cb	 mov	 rcx, rbx
  00a34	e8 00 00 00 00	 call	 PyDict_SetItemString
  00a39	85 c0		 test	 eax, eax
  00a3b	0f 88 44 02 00
	00		 js	 $LN113@PyInit__as

; 6914 :     if (PyDict_SetItemString(d, "UAdd", (PyObject*)UAdd_type) < 0) return NULL;

  00a41	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR UAdd_type
  00a48	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04KEMJLKFO@UAdd?$AA@
  00a4f	48 8b cb	 mov	 rcx, rbx
  00a52	e8 00 00 00 00	 call	 PyDict_SetItemString
  00a57	85 c0		 test	 eax, eax
  00a59	0f 88 26 02 00
	00		 js	 $LN113@PyInit__as

; 6915 :     if (PyDict_SetItemString(d, "USub", (PyObject*)USub_type) < 0) return NULL;

  00a5f	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR USub_type
  00a66	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04BFGHELIL@USub?$AA@
  00a6d	48 8b cb	 mov	 rcx, rbx
  00a70	e8 00 00 00 00	 call	 PyDict_SetItemString
  00a75	85 c0		 test	 eax, eax
  00a77	0f 88 08 02 00
	00		 js	 $LN113@PyInit__as

; 6916 :     if (PyDict_SetItemString(d, "cmpop", (PyObject*)cmpop_type) < 0) return

  00a7d	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR cmpop_type
  00a84	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KGHEMFCD@cmpop?$AA@
  00a8b	48 8b cb	 mov	 rcx, rbx
  00a8e	e8 00 00 00 00	 call	 PyDict_SetItemString
  00a93	85 c0		 test	 eax, eax

; 6917 :         NULL;

  00a95	0f 88 ea 01 00
	00		 js	 $LN113@PyInit__as

; 6918 :     if (PyDict_SetItemString(d, "Eq", (PyObject*)Eq_type) < 0) return NULL;

  00a9b	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Eq_type
  00aa2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02EAMLCBHB@Eq?$AA@
  00aa9	48 8b cb	 mov	 rcx, rbx
  00aac	e8 00 00 00 00	 call	 PyDict_SetItemString
  00ab1	85 c0		 test	 eax, eax
  00ab3	0f 88 cc 01 00
	00		 js	 $LN113@PyInit__as

; 6919 :     if (PyDict_SetItemString(d, "NotEq", (PyObject*)NotEq_type) < 0) return

  00ab9	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR NotEq_type
  00ac0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05MECFOFIL@NotEq?$AA@
  00ac7	48 8b cb	 mov	 rcx, rbx
  00aca	e8 00 00 00 00	 call	 PyDict_SetItemString
  00acf	85 c0		 test	 eax, eax

; 6920 :         NULL;

  00ad1	0f 88 ae 01 00
	00		 js	 $LN113@PyInit__as

; 6921 :     if (PyDict_SetItemString(d, "Lt", (PyObject*)Lt_type) < 0) return NULL;

  00ad7	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Lt_type
  00ade	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02DCGNOOLL@Lt?$AA@
  00ae5	48 8b cb	 mov	 rcx, rbx
  00ae8	e8 00 00 00 00	 call	 PyDict_SetItemString
  00aed	85 c0		 test	 eax, eax
  00aef	0f 88 90 01 00
	00		 js	 $LN113@PyInit__as

; 6922 :     if (PyDict_SetItemString(d, "LtE", (PyObject*)LtE_type) < 0) return NULL;

  00af5	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR LtE_type
  00afc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03NBIPLMKK@LtE?$AA@
  00b03	48 8b cb	 mov	 rcx, rbx
  00b06	e8 00 00 00 00	 call	 PyDict_SetItemString
  00b0b	85 c0		 test	 eax, eax
  00b0d	0f 88 72 01 00
	00		 js	 $LN113@PyInit__as

; 6923 :     if (PyDict_SetItemString(d, "Gt", (PyObject*)Gt_type) < 0) return NULL;

  00b13	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Gt_type
  00b1a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02DODIABFK@Gt?$AA@
  00b21	48 8b cb	 mov	 rcx, rbx
  00b24	e8 00 00 00 00	 call	 PyDict_SetItemString
  00b29	85 c0		 test	 eax, eax
  00b2b	0f 88 54 01 00
	00		 js	 $LN113@PyInit__as

; 6924 :     if (PyDict_SetItemString(d, "GtE", (PyObject*)GtE_type) < 0) return NULL;

  00b31	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR GtE_type
  00b38	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03GIODLKL@GtE?$AA@
  00b3f	48 8b cb	 mov	 rcx, rbx
  00b42	e8 00 00 00 00	 call	 PyDict_SetItemString
  00b47	85 c0		 test	 eax, eax
  00b49	0f 88 36 01 00
	00		 js	 $LN113@PyInit__as

; 6925 :     if (PyDict_SetItemString(d, "Is", (PyObject*)Is_type) < 0) return NULL;

  00b4f	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Is_type
  00b56	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02HLOHLKJH@Is?$AA@
  00b5d	48 8b cb	 mov	 rcx, rbx
  00b60	e8 00 00 00 00	 call	 PyDict_SetItemString
  00b65	85 c0		 test	 eax, eax
  00b67	0f 88 18 01 00
	00		 js	 $LN113@PyInit__as

; 6926 :     if (PyDict_SetItemString(d, "IsNot", (PyObject*)IsNot_type) < 0) return

  00b6d	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR IsNot_type
  00b74	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KLALIAAG@IsNot?$AA@
  00b7b	48 8b cb	 mov	 rcx, rbx
  00b7e	e8 00 00 00 00	 call	 PyDict_SetItemString
  00b83	85 c0		 test	 eax, eax

; 6927 :         NULL;

  00b85	0f 88 fa 00 00
	00		 js	 $LN113@PyInit__as

; 6928 :     if (PyDict_SetItemString(d, "In", (PyObject*)In_type) < 0) return NULL;

  00b8b	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR In_type
  00b92	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02IEILNGIL@In?$AA@
  00b99	48 8b cb	 mov	 rcx, rbx
  00b9c	e8 00 00 00 00	 call	 PyDict_SetItemString
  00ba1	85 c0		 test	 eax, eax
  00ba3	0f 88 dc 00 00
	00		 js	 $LN113@PyInit__as

; 6929 :     if (PyDict_SetItemString(d, "NotIn", (PyObject*)NotIn_type) < 0) return

  00ba9	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR NotIn_type
  00bb0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05GFBCHB@NotIn?$AA@
  00bb7	48 8b cb	 mov	 rcx, rbx
  00bba	e8 00 00 00 00	 call	 PyDict_SetItemString
  00bbf	85 c0		 test	 eax, eax

; 6930 :         NULL;

  00bc1	0f 88 be 00 00
	00		 js	 $LN113@PyInit__as

; 6931 :     if (PyDict_SetItemString(d, "comprehension", (PyObject*)comprehension_type)
; 6932 :         < 0) return NULL;

  00bc7	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR comprehension_type
  00bce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@PDDLNDDO@comprehension?$AA@
  00bd5	48 8b cb	 mov	 rcx, rbx
  00bd8	e8 00 00 00 00	 call	 PyDict_SetItemString
  00bdd	85 c0		 test	 eax, eax
  00bdf	0f 88 a0 00 00
	00		 js	 $LN113@PyInit__as

; 6933 :     if (PyDict_SetItemString(d, "excepthandler", (PyObject*)excepthandler_type)
; 6934 :         < 0) return NULL;

  00be5	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR excepthandler_type
  00bec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@LBOCECKK@excepthandler?$AA@
  00bf3	48 8b cb	 mov	 rcx, rbx
  00bf6	e8 00 00 00 00	 call	 PyDict_SetItemString
  00bfb	85 c0		 test	 eax, eax
  00bfd	0f 88 82 00 00
	00		 js	 $LN113@PyInit__as

; 6935 :     if (PyDict_SetItemString(d, "ExceptHandler", (PyObject*)ExceptHandler_type)
; 6936 :         < 0) return NULL;

  00c03	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR ExceptHandler_type
  00c0a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@IFPAFICE@ExceptHandler?$AA@
  00c11	48 8b cb	 mov	 rcx, rbx
  00c14	e8 00 00 00 00	 call	 PyDict_SetItemString
  00c19	85 c0		 test	 eax, eax
  00c1b	78 68		 js	 SHORT $LN113@PyInit__as

; 6937 :     if (PyDict_SetItemString(d, "arguments", (PyObject*)arguments_type) < 0)

  00c1d	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR arguments_type
  00c24	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09PBNAMLIK@arguments?$AA@
  00c2b	48 8b cb	 mov	 rcx, rbx
  00c2e	e8 00 00 00 00	 call	 PyDict_SetItemString
  00c33	85 c0		 test	 eax, eax

; 6938 :         return NULL;

  00c35	78 4e		 js	 SHORT $LN113@PyInit__as

; 6939 :     if (PyDict_SetItemString(d, "arg", (PyObject*)arg_type) < 0) return NULL;

  00c37	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR arg_type
  00c3e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03CAOIPBNL@arg?$AA@
  00c45	48 8b cb	 mov	 rcx, rbx
  00c48	e8 00 00 00 00	 call	 PyDict_SetItemString
  00c4d	85 c0		 test	 eax, eax
  00c4f	78 34		 js	 SHORT $LN113@PyInit__as

; 6940 :     if (PyDict_SetItemString(d, "keyword", (PyObject*)keyword_type) < 0) return

  00c51	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR keyword_type
  00c58	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07JMKMGKCH@keyword?$AA@
  00c5f	48 8b cb	 mov	 rcx, rbx
  00c62	e8 00 00 00 00	 call	 PyDict_SetItemString
  00c67	85 c0		 test	 eax, eax

; 6941 :         NULL;

  00c69	78 1a		 js	 SHORT $LN113@PyInit__as

; 6942 :     if (PyDict_SetItemString(d, "alias", (PyObject*)alias_type) < 0) return

  00c6b	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR alias_type
  00c72	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05NKHOCLEE@alias?$AA@
  00c79	48 8b cb	 mov	 rcx, rbx
  00c7c	e8 00 00 00 00	 call	 PyDict_SetItemString
  00c81	85 c0		 test	 eax, eax
  00c83	79 11		 jns	 SHORT $LN2@PyInit__as
$LN113@PyInit__as:
  00c85	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00c8a	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]

; 6943 :         NULL;

  00c8f	33 c0		 xor	 eax, eax

; 6945 :         return NULL;
; 6946 :     return m;
; 6947 : }

  00c91	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00c95	c3		 ret	 0
$LN2@PyInit__as:

; 6944 :     if (PyDict_SetItemString(d, "withitem", (PyObject*)withitem_type) < 0)

  00c96	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR withitem_type
  00c9d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08FACALJAE@withitem?$AA@
  00ca4	48 8b cb	 mov	 rcx, rbx
  00ca7	e8 00 00 00 00	 call	 PyDict_SetItemString
  00cac	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00cb1	33 c9		 xor	 ecx, ecx
  00cb3	85 c0		 test	 eax, eax
  00cb5	48 0f 48 f9	 cmovs	 rdi, rcx
  00cb9	48 8b c7	 mov	 rax, rdi
  00cbc	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]

; 6945 :         return NULL;
; 6946 :     return m;
; 6947 : }

  00cc1	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00cc5	c3		 ret	 0
PyInit__ast ENDP
_TEXT	ENDS
PUBLIC	PyAST_Check
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyAST_Check DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$PyAST_Check
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyAST_Check DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyAST_Check
_TEXT	SEGMENT
obj$ = 48
PyAST_Check PROC					; COMDAT

; 6987 : {

$LN3:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 6988 :     init_types();

  00009	e8 00 00 00 00	 call	 init_types

; 6989 :     return PyObject_IsInstance(obj, (PyObject*)&AST_type);

  0000e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AST_type
  00015	48 8b cb	 mov	 rcx, rbx

; 6990 : }

  00018	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001c	5b		 pop	 rbx
  0001d	e9 00 00 00 00	 jmp	 PyObject_IsInstance
PyAST_Check ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$ast2obj_arguments DD imagerel ast2obj_arguments
	DD	imagerel ast2obj_arguments+108
	DD	imagerel $unwind$ast2obj_arguments
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$ast2obj_arguments DD imagerel ast2obj_arguments+108
	DD	imagerel ast2obj_arguments+137
	DD	imagerel $chain$0$ast2obj_arguments
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$ast2obj_arguments DD imagerel ast2obj_arguments+137
	DD	imagerel ast2obj_arguments+673
	DD	imagerel $chain$4$ast2obj_arguments
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$ast2obj_arguments DD 061421H
	DD	095414H
	DD	08340fH
	DD	0a7400H
	DD	imagerel ast2obj_arguments
	DD	imagerel ast2obj_arguments+108
	DD	imagerel $unwind$ast2obj_arguments
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$ast2obj_arguments DD 020521H
	DD	0a7405H
	DD	imagerel ast2obj_arguments
	DD	imagerel ast2obj_arguments+108
	DD	imagerel $unwind$ast2obj_arguments
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_arguments DD 020601H
	DD	060025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\python-ast.c
xdata	ENDS
;	COMDAT ast2obj_arguments
_TEXT	SEGMENT
_o$ = 64
ast2obj_arguments PROC					; COMDAT

; 3349 : {

  00000	40 56		 push	 rsi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b f1	 mov	 rsi, rcx

; 3350 :     arguments_ty o = (arguments_ty)_o;
; 3351 :     PyObject *result = NULL, *value = NULL;
; 3352 :     if (!o) {

  00009	48 85 c9	 test	 rcx, rcx
  0000c	75 52		 jne	 SHORT $LN26@ast2obj_ar@2

; 3353 :         Py_INCREF(Py_None);

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	75 3c		 jne	 SHORT $LN30@ast2obj_ar@2
  00017	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0002c	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00032	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0003a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003f	85 c0		 test	 eax, eax
  00041	75 09		 jne	 SHORT $LN29@ast2obj_ar@2
  00043	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0004a	74 07		 je	 SHORT $LN30@ast2obj_ar@2
$LN29@ast2obj_ar@2:
  0004c	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN30@ast2obj_ar@2:

; 3354 :         return Py_None;

  00053	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 3404 : }

  0005a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005e	5e		 pop	 rsi
  0005f	c3		 ret	 0
$LN26@ast2obj_ar@2:

; 3355 :     }
; 3356 : 
; 3357 :     result = PyType_GenericNew(arguments_type, NULL, NULL);

  00060	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR arguments_type
  00067	45 33 c0	 xor	 r8d, r8d
  0006a	33 d2		 xor	 edx, edx
  0006c	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  00071	e8 00 00 00 00	 call	 PyType_GenericNew
  00076	48 8b f8	 mov	 rdi, rax

; 3358 :     if (!result) return NULL;

  00079	48 85 c0	 test	 rax, rax
  0007c	75 0b		 jne	 SHORT $LN25@ast2obj_ar@2
  0007e	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 3404 : }

  00083	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00087	5e		 pop	 rsi
  00088	c3		 ret	 0
$LN25@ast2obj_ar@2:

; 3359 :     value = ast2obj_list(o->args, ast2obj_arg);

  00089	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  0008c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_arg
  00093	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00098	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp
  0009d	e8 00 00 00 00	 call	 ast2obj_list
  000a2	48 8b d8	 mov	 rbx, rax

; 3360 :     if (!value) goto failed;

  000a5	48 85 c0	 test	 rax, rax
  000a8	0f 84 d4 01 00
	00		 je	 $LN7@ast2obj_ar@2

; 3361 :     if (_PyObject_SetAttrId(result, &PyId_args, value) == -1)

  000ae	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  000b4	65 48 8b 0c 25
	58 00 00 00	 mov	 rcx, QWORD PTR gs:88
  000bd	4c 8b c0	 mov	 r8, rax
  000c0	48 8b 2c d1	 mov	 rbp, QWORD PTR [rcx+rdx*8]
  000c4	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_args
  000c9	48 8b cf	 mov	 rcx, rdi
  000cc	48 03 d5	 add	 rdx, rbp
  000cf	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  000d4	83 f8 ff	 cmp	 eax, -1
  000d7	0f 84 9d 01 00
	00		 je	 $failed$24342

; 3362 :         goto failed;
; 3363 :     Py_DECREF(value);

  000dd	48 8b cb	 mov	 rcx, rbx
  000e0	e8 00 00 00 00	 call	 _Py_DecRef

; 3364 :     value = ast2obj_identifier(o->vararg);

  000e5	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  000e9	e8 00 00 00 00	 call	 ast2obj_object
  000ee	48 8b d8	 mov	 rbx, rax

; 3365 :     if (!value) goto failed;

  000f1	48 85 c0	 test	 rax, rax
  000f4	0f 84 88 01 00
	00		 je	 $LN7@ast2obj_ar@2

; 3366 :     if (_PyObject_SetAttrId(result, &PyId_vararg, value) == -1)

  000fa	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_vararg
  000ff	4c 8b c0	 mov	 r8, rax
  00102	48 8b cf	 mov	 rcx, rdi
  00105	48 03 d5	 add	 rdx, rbp
  00108	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0010d	83 f8 ff	 cmp	 eax, -1
  00110	0f 84 64 01 00
	00		 je	 $failed$24342

; 3367 :         goto failed;
; 3368 :     Py_DECREF(value);

  00116	48 8b cb	 mov	 rcx, rbx
  00119	e8 00 00 00 00	 call	 _Py_DecRef

; 3369 :     value = ast2obj_expr(o->varargannotation);

  0011e	48 8b 4e 10	 mov	 rcx, QWORD PTR [rsi+16]
  00122	e8 00 00 00 00	 call	 ast2obj_expr
  00127	48 8b d8	 mov	 rbx, rax

; 3370 :     if (!value) goto failed;

  0012a	48 85 c0	 test	 rax, rax
  0012d	0f 84 4f 01 00
	00		 je	 $LN7@ast2obj_ar@2

; 3371 :     if (_PyObject_SetAttrId(result, &PyId_varargannotation, value) == -1)

  00133	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_varargannotation
  00138	4c 8b c0	 mov	 r8, rax
  0013b	48 8b cf	 mov	 rcx, rdi
  0013e	48 03 d5	 add	 rdx, rbp
  00141	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00146	83 f8 ff	 cmp	 eax, -1
  00149	0f 84 2b 01 00
	00		 je	 $failed$24342

; 3372 :         goto failed;
; 3373 :     Py_DECREF(value);

  0014f	48 8b cb	 mov	 rcx, rbx
  00152	e8 00 00 00 00	 call	 _Py_DecRef

; 3374 :     value = ast2obj_list(o->kwonlyargs, ast2obj_arg);

  00157	48 8b 4e 18	 mov	 rcx, QWORD PTR [rsi+24]
  0015b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_arg
  00162	e8 00 00 00 00	 call	 ast2obj_list
  00167	48 8b d8	 mov	 rbx, rax

; 3375 :     if (!value) goto failed;

  0016a	48 85 c0	 test	 rax, rax
  0016d	0f 84 0f 01 00
	00		 je	 $LN7@ast2obj_ar@2

; 3376 :     if (_PyObject_SetAttrId(result, &PyId_kwonlyargs, value) == -1)

  00173	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_kwonlyargs
  00178	4c 8b c0	 mov	 r8, rax
  0017b	48 8b cf	 mov	 rcx, rdi
  0017e	48 03 d5	 add	 rdx, rbp
  00181	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00186	83 f8 ff	 cmp	 eax, -1
  00189	0f 84 eb 00 00
	00		 je	 $failed$24342

; 3377 :         goto failed;
; 3378 :     Py_DECREF(value);

  0018f	48 8b cb	 mov	 rcx, rbx
  00192	e8 00 00 00 00	 call	 _Py_DecRef

; 3379 :     value = ast2obj_identifier(o->kwarg);

  00197	48 8b 4e 20	 mov	 rcx, QWORD PTR [rsi+32]
  0019b	e8 00 00 00 00	 call	 ast2obj_object
  001a0	48 8b d8	 mov	 rbx, rax

; 3380 :     if (!value) goto failed;

  001a3	48 85 c0	 test	 rax, rax
  001a6	0f 84 d6 00 00
	00		 je	 $LN7@ast2obj_ar@2

; 3381 :     if (_PyObject_SetAttrId(result, &PyId_kwarg, value) == -1)

  001ac	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_kwarg
  001b1	4c 8b c0	 mov	 r8, rax
  001b4	48 8b cf	 mov	 rcx, rdi
  001b7	48 03 d5	 add	 rdx, rbp
  001ba	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  001bf	83 f8 ff	 cmp	 eax, -1
  001c2	0f 84 b2 00 00
	00		 je	 $failed$24342

; 3382 :         goto failed;
; 3383 :     Py_DECREF(value);

  001c8	48 8b cb	 mov	 rcx, rbx
  001cb	e8 00 00 00 00	 call	 _Py_DecRef

; 3384 :     value = ast2obj_expr(o->kwargannotation);

  001d0	48 8b 4e 28	 mov	 rcx, QWORD PTR [rsi+40]
  001d4	e8 00 00 00 00	 call	 ast2obj_expr
  001d9	48 8b d8	 mov	 rbx, rax

; 3385 :     if (!value) goto failed;

  001dc	48 85 c0	 test	 rax, rax
  001df	0f 84 9d 00 00
	00		 je	 $LN7@ast2obj_ar@2

; 3386 :     if (_PyObject_SetAttrId(result, &PyId_kwargannotation, value) == -1)

  001e5	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_kwargannotation
  001ea	4c 8b c0	 mov	 r8, rax
  001ed	48 8b cf	 mov	 rcx, rdi
  001f0	48 03 d5	 add	 rdx, rbp
  001f3	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  001f8	83 f8 ff	 cmp	 eax, -1
  001fb	74 7d		 je	 SHORT $failed$24342

; 3387 :         goto failed;
; 3388 :     Py_DECREF(value);

  001fd	48 8b cb	 mov	 rcx, rbx
  00200	e8 00 00 00 00	 call	 _Py_DecRef

; 3389 :     value = ast2obj_list(o->defaults, ast2obj_expr);

  00205	48 8b 4e 30	 mov	 rcx, QWORD PTR [rsi+48]
  00209	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_expr
  00210	e8 00 00 00 00	 call	 ast2obj_list
  00215	48 8b d8	 mov	 rbx, rax

; 3390 :     if (!value) goto failed;

  00218	48 85 c0	 test	 rax, rax
  0021b	74 65		 je	 SHORT $LN7@ast2obj_ar@2

; 3391 :     if (_PyObject_SetAttrId(result, &PyId_defaults, value) == -1)

  0021d	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_defaults
  00222	4c 8b c0	 mov	 r8, rax
  00225	48 8b cf	 mov	 rcx, rdi
  00228	48 03 d5	 add	 rdx, rbp
  0022b	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00230	83 f8 ff	 cmp	 eax, -1
  00233	74 45		 je	 SHORT $failed$24342

; 3392 :         goto failed;
; 3393 :     Py_DECREF(value);

  00235	48 8b cb	 mov	 rcx, rbx
  00238	e8 00 00 00 00	 call	 _Py_DecRef

; 3394 :     value = ast2obj_list(o->kw_defaults, ast2obj_expr);

  0023d	48 8b 4e 38	 mov	 rcx, QWORD PTR [rsi+56]
  00241	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_expr
  00248	e8 00 00 00 00	 call	 ast2obj_list
  0024d	48 8b d8	 mov	 rbx, rax

; 3395 :     if (!value) goto failed;

  00250	48 85 c0	 test	 rax, rax
  00253	74 2d		 je	 SHORT $LN7@ast2obj_ar@2

; 3396 :     if (_PyObject_SetAttrId(result, &PyId_kw_defaults, value) == -1)

  00255	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_kw_defaults
  0025a	4c 8b c0	 mov	 r8, rax
  0025d	48 8b cf	 mov	 rcx, rdi
  00260	48 03 d5	 add	 rdx, rbp
  00263	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00268	83 f8 ff	 cmp	 eax, -1
  0026b	74 0d		 je	 SHORT $failed$24342

; 3397 :         goto failed;
; 3398 :     Py_DECREF(value);

  0026d	48 8b cb	 mov	 rcx, rbx
  00270	e8 00 00 00 00	 call	 _Py_DecRef

; 3399 :     return result;

  00275	48 8b c7	 mov	 rax, rdi
  00278	eb 12		 jmp	 SHORT $LN35@ast2obj_ar@2
$failed$24342:

; 3400 : failed:
; 3401 :     Py_XDECREF(value);

  0027a	48 8b cb	 mov	 rcx, rbx
  0027d	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@ast2obj_ar@2:

; 3402 :     Py_XDECREF(result);

  00282	48 8b cf	 mov	 rcx, rdi
  00285	e8 00 00 00 00	 call	 _Py_DecRef

; 3403 :     return NULL;

  0028a	33 c0		 xor	 eax, eax
$LN35@ast2obj_ar@2:
  0028c	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00291	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00296	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 3404 : }

  0029b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0029f	5e		 pop	 rsi
  002a0	c3		 ret	 0
ast2obj_arguments ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CN@KNCHMPGN@required?5field?5?$CCargs?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0DD@BHLCGNME@required?5field?5?$CCkwonlyargs?$CC?5miss@ ; `string'
PUBLIC	??_C@_0DB@MPBJNEFN@required?5field?5?$CCdefaults?$CC?5missin@ ; `string'
PUBLIC	??_C@_0DE@GCEJPHGL@required?5field?5?$CCkw_defaults?$CC?5mis@ ; `string'
PUBLIC	??_C@_0DL@IAKMBFAB@arguments?5field?5?$CCkw_defaults?$CC?5mu@ ; `string'
PUBLIC	??_C@_0DI@DFMGFEGL@arguments?5field?5?$CCdefaults?$CC?5must?5@ ; `string'
PUBLIC	??_C@_0DK@DLAPFEKE@arguments?5field?5?$CCkwonlyargs?$CC?5mus@ ; `string'
PUBLIC	??_C@_0BC@LABJANNH@obj2ast_arguments?$AA@	; `string'
PUBLIC	??_C@_0DE@BACKFDNE@arguments?5field?5?$CCargs?$CC?5must?5be?5a@ ; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$obj2ast_arguments DD imagerel obj2ast_arguments
	DD	imagerel obj2ast_arguments+74
	DD	imagerel $unwind$obj2ast_arguments
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$obj2ast_arguments DD imagerel obj2ast_arguments+74
	DD	imagerel obj2ast_arguments+316
	DD	imagerel $chain$3$obj2ast_arguments
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$obj2ast_arguments DD imagerel obj2ast_arguments+316
	DD	imagerel obj2ast_arguments+1839
	DD	imagerel $chain$5$obj2ast_arguments
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$obj2ast_arguments DD imagerel obj2ast_arguments+1839
	DD	imagerel obj2ast_arguments+1878
	DD	imagerel $chain$6$obj2ast_arguments
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$obj2ast_arguments DD 021H
	DD	imagerel obj2ast_arguments
	DD	imagerel obj2ast_arguments+74
	DD	imagerel $unwind$obj2ast_arguments
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$obj2ast_arguments DD 080021H
	DD	010f400H
	DD	0117400H
	DD	0126400H
	DD	0185400H
	DD	imagerel obj2ast_arguments
	DD	imagerel obj2ast_arguments+74
	DD	imagerel $unwind$obj2ast_arguments
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$obj2ast_arguments DD 082621H
	DD	010f426H
	DD	011741eH
	DD	0126410H
	DD	0185408H
	DD	imagerel obj2ast_arguments
	DD	imagerel obj2ast_arguments+74
	DD	imagerel $unwind$obj2ast_arguments
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_arguments DD 061301H
	DD	0130113H
	DD	0d00ae00cH
	DD	03006c008H
xdata	ENDS
;	COMDAT ??_C@_0CN@KNCHMPGN@required?5field?5?$CCargs?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CN@KNCHMPGN@required?5field?5?$CCargs?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "args" missing from arguments', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@BHLCGNME@required?5field?5?$CCkwonlyargs?$CC?5miss@
CONST	SEGMENT
??_C@_0DD@BHLCGNME@required?5field?5?$CCkwonlyargs?$CC?5miss@ DB 'require'
	DB	'd field "kwonlyargs" missing from arguments', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@MPBJNEFN@required?5field?5?$CCdefaults?$CC?5missin@
CONST	SEGMENT
??_C@_0DB@MPBJNEFN@required?5field?5?$CCdefaults?$CC?5missin@ DB 'require'
	DB	'd field "defaults" missing from arguments', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@GCEJPHGL@required?5field?5?$CCkw_defaults?$CC?5mis@
CONST	SEGMENT
??_C@_0DE@GCEJPHGL@required?5field?5?$CCkw_defaults?$CC?5mis@ DB 'require'
	DB	'd field "kw_defaults" missing from arguments', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@IAKMBFAB@arguments?5field?5?$CCkw_defaults?$CC?5mu@
CONST	SEGMENT
??_C@_0DL@IAKMBFAB@arguments?5field?5?$CCkw_defaults?$CC?5mu@ DB 'argumen'
	DB	'ts field "kw_defaults" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@DFMGFEGL@arguments?5field?5?$CCdefaults?$CC?5must?5@
CONST	SEGMENT
??_C@_0DI@DFMGFEGL@arguments?5field?5?$CCdefaults?$CC?5must?5@ DB 'argume'
	DB	'nts field "defaults" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@DLAPFEKE@arguments?5field?5?$CCkwonlyargs?$CC?5mus@
CONST	SEGMENT
??_C@_0DK@DLAPFEKE@arguments?5field?5?$CCkwonlyargs?$CC?5mus@ DB 'argumen'
	DB	'ts field "kwonlyargs" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LABJANNH@obj2ast_arguments?$AA@
CONST	SEGMENT
??_C@_0BC@LABJANNH@obj2ast_arguments?$AA@ DB 'obj2ast_arguments', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@BACKFDNE@arguments?5field?5?$CCargs?$CC?5must?5be?5a@
CONST	SEGMENT
??_C@_0DE@BACKFDNE@arguments?5field?5?$CCargs?$CC?5must?5be?5a@ DB 'argum'
	DB	'ents field "args" must be a list, not a %.200s', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\python-ast.c
CONST	ENDS
;	COMDAT obj2ast_arguments
_TEXT	SEGMENT
value$27651 = 80
kwarg$ = 80
value$27593 = 80
kwargannotation$ = 88
varargannotation$ = 96
tv834 = 104
value$27679 = 104
kwonlyargs$1$ = 112
args$1$ = 120
obj$ = 192
out$ = 200
arena$ = 208
vararg$1$ = 216
vararg$ = 216
value$27534 = 216
obj2ast_arguments PROC					; COMDAT

; 6464 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	53		 push	 rbx
  00006	41 54		 push	 r12
  00008	41 55		 push	 r13
  0000a	41 56		 push	 r14
  0000c	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 6465 :     PyObject* tmp = NULL;
; 6466 :     asdl_seq* args;
; 6467 :     identifier vararg;
; 6468 :     expr_ty varargannotation;
; 6469 :     asdl_seq* kwonlyargs;
; 6470 :     identifier kwarg;
; 6471 :     expr_ty kwargannotation;
; 6472 :     asdl_seq* defaults;
; 6473 :     asdl_seq* kw_defaults;
; 6474 : 
; 6475 :     if (_PyObject_HasAttrId(obj, &PyId_args)) {

  00013	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR _tls_index
  0001a	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00023	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_args
  00028	4e 8b 34 c8	 mov	 r14, QWORD PTR [rax+r9*8]
  0002c	4d 8b e8	 mov	 r13, r8
  0002f	4c 8b e1	 mov	 r12, rcx
  00032	49 03 de	 add	 rbx, r14
  00035	4c 89 74 24 68	 mov	 QWORD PTR tv834[rsp], r14
  0003a	48 8b d3	 mov	 rdx, rbx
  0003d	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00042	85 c0		 test	 eax, eax
  00044	0f 84 e5 06 00
	00		 je	 $LN88@obj2ast_ar@2

; 6476 :         int res;
; 6477 :         Py_ssize_t len;
; 6478 :         Py_ssize_t i;
; 6479 :         tmp = _PyObject_GetAttrId(obj, &PyId_args);

  0004a	48 89 ac 24 c0
	00 00 00	 mov	 QWORD PTR [rsp+192], rbp
  00052	48 89 b4 24 90
	00 00 00	 mov	 QWORD PTR [rsp+144], rsi
  0005a	48 8b d3	 mov	 rdx, rbx
  0005d	49 8b cc	 mov	 rcx, r12
  00060	48 89 bc 24 88
	00 00 00	 mov	 QWORD PTR [rsp+136], rdi
  00068	4c 89 bc 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], r15
  00070	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00075	48 8b d8	 mov	 rbx, rax

; 6480 :         if (tmp == NULL) goto failed;

  00078	48 85 c0	 test	 rax, rax
  0007b	0f 84 87 00 00
	00		 je	 $LN3@obj2ast_ar@2

; 6481 :         if (!PyList_Check(tmp)) {

  00081	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  00085	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  00090	0f 85 a6 00 00
	00		 jne	 $LN86@obj2ast_ar@2

; 6482 :             PyErr_Format(PyExc_TypeError, "arguments field \"args\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  00096	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  0009a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@BACKFDNE@arguments?5field?5?$CCargs?$CC?5must?5be?5a@
$LN120@obj2ast_ar@2:

; 6526 :             PyErr_Format(PyExc_TypeError, "arguments field \"kwonlyargs\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  000a1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000a8	e8 00 00 00 00	 call	 PyErr_Format
$failed$27524:

; 6614 : failed:
; 6615 :     Py_XDECREF(tmp);

  000ad	e8 00 00 00 00	 call	 _Py_PXCTX
  000b2	85 c0		 test	 eax, eax
  000b4	75 52		 jne	 SHORT $LN3@obj2ast_ar@2
  000b6	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000ba	a8 20		 test	 al, 32			; 00000020H
  000bc	0f 85 60 06 00
	00		 jne	 $LN95@obj2ast_ar@2
  000c2	84 c0		 test	 al, al
  000c4	0f 88 58 06 00
	00		 js	 $LN95@obj2ast_ar@2
  000ca	a8 02		 test	 al, 2
  000cc	75 3a		 jne	 SHORT $LN3@obj2ast_ar@2
  000ce	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000d2	75 34		 jne	 SHORT $LN3@obj2ast_ar@2
  000d4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000e2	4c 8b cb	 mov	 r9, rbx
  000e5	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000eb	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000f3	e8 00 00 00 00	 call	 _PyParallel_Guard
  000f8	48 8b cb	 mov	 rcx, rbx
  000fb	85 c0		 test	 eax, eax
  000fd	0f 84 10 06 00
	00		 je	 $LN100@obj2ast_ar@2
  00103	e8 00 00 00 00	 call	 _Px_Dealloc
$LN3@obj2ast_ar@2:

; 6541 :         return 1;

  00108	b8 01 00 00 00	 mov	 eax, 1
$LN119@obj2ast_ar@2:
  0010d	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR [rsp+136]
  00115	48 8b b4 24 90
	00 00 00	 mov	 rsi, QWORD PTR [rsp+144]
  0011d	48 8b ac 24 c0
	00 00 00	 mov	 rbp, QWORD PTR [rsp+192]
  00125	4c 8b bc 24 80
	00 00 00	 mov	 r15, QWORD PTR [rsp+128]

; 6617 : }

  0012d	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00134	41 5e		 pop	 r14
  00136	41 5d		 pop	 r13
  00138	41 5c		 pop	 r12
  0013a	5b		 pop	 rbx
  0013b	c3		 ret	 0
$LN86@obj2ast_ar@2:

; 6483 :             goto failed;
; 6484 :         }
; 6485 :         len = PyList_GET_SIZE(tmp);

  0013c	48 8b 68 60	 mov	 rbp, QWORD PTR [rax+96]

; 6486 :         args = asdl_seq_new(len, arena);

  00140	49 8b d5	 mov	 rdx, r13
  00143	48 8b cd	 mov	 rcx, rbp
  00146	e8 00 00 00 00	 call	 asdl_seq_new
  0014b	4c 8b f8	 mov	 r15, rax
  0014e	48 89 44 24 78	 mov	 QWORD PTR args$1$[rsp], rax

; 6487 :         if (args == NULL) goto failed;

  00153	48 85 c0	 test	 rax, rax
  00156	0f 84 51 ff ff
	ff		 je	 $failed$27524

; 6488 :         for (i = 0; i < len; i++) {

  0015c	33 f6		 xor	 esi, esi
  0015e	8b fe		 mov	 edi, esi
  00160	48 85 ed	 test	 rbp, rbp
  00163	7e 3f		 jle	 SHORT $LN80@obj2ast_ar@2
  00165	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL84@obj2ast_ar@2:

; 6489 :             arg_ty value;
; 6490 :             res = obj2ast_arg(PyList_GET_ITEM(tmp, i), &value, arena);

  00170	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00174	48 8d 94 24 d8
	00 00 00	 lea	 rdx, QWORD PTR value$27534[rsp]
  0017c	4d 8b c5	 mov	 r8, r13
  0017f	48 8b 0c f9	 mov	 rcx, QWORD PTR [rcx+rdi*8]
  00183	e8 00 00 00 00	 call	 obj2ast_arg

; 6491 :             if (res != 0) goto failed;

  00188	85 c0		 test	 eax, eax
  0018a	0f 85 1d ff ff
	ff		 jne	 $failed$27524

; 6492 :             asdl_seq_SET(args, i, value);

  00190	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR value$27534[rsp]
  00198	48 ff c7	 inc	 rdi
  0019b	49 89 04 ff	 mov	 QWORD PTR [r15+rdi*8], rax
  0019f	48 3b fd	 cmp	 rdi, rbp
  001a2	7c cc		 jl	 SHORT $LL84@obj2ast_ar@2
$LN80@obj2ast_ar@2:

; 6493 :         }
; 6494 :         Py_CLEAR(tmp);

  001a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  001ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@LABJANNH@obj2ast_arguments?$AA@
  001b2	4c 8b cb	 mov	 r9, rbx
  001b5	41 b8 5e 19 00
	00		 mov	 r8d, 6494		; 0000195eH
  001bb	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001c3	e8 00 00 00 00	 call	 _PyParallel_Guard
  001c8	85 c0		 test	 eax, eax
  001ca	75 08		 jne	 SHORT $LN79@obj2ast_ar@2
  001cc	48 8b cb	 mov	 rcx, rbx
  001cf	e8 00 00 00 00	 call	 _Py_DecRef
$LN79@obj2ast_ar@2:

; 6498 :     }
; 6499 :     if (_PyObject_HasAttrId(obj, &PyId_vararg)) {

  001d4	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_vararg
  001d9	49 8b cc	 mov	 rcx, r12
  001dc	49 03 de	 add	 rbx, r14
  001df	48 8b d3	 mov	 rdx, rbx
  001e2	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  001e7	85 c0		 test	 eax, eax
  001e9	74 74		 je	 SHORT $LN75@obj2ast_ar@2

; 6500 :         int res;
; 6501 :         tmp = _PyObject_GetAttrId(obj, &PyId_vararg);

  001eb	48 8b d3	 mov	 rdx, rbx
  001ee	49 8b cc	 mov	 rcx, r12
  001f1	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  001f6	48 8b d8	 mov	 rbx, rax

; 6502 :         if (tmp == NULL) goto failed;

  001f9	48 85 c0	 test	 rax, rax
  001fc	0f 84 06 ff ff
	ff		 je	 $LN3@obj2ast_ar@2

; 6503 :         res = obj2ast_identifier(tmp, &vararg, arena);

  00202	48 8d 94 24 d8
	00 00 00	 lea	 rdx, QWORD PTR vararg$[rsp]
  0020a	4d 8b c5	 mov	 r8, r13
  0020d	48 8b c8	 mov	 rcx, rax
  00210	e8 00 00 00 00	 call	 obj2ast_identifier

; 6504 :         if (res != 0) goto failed;

  00215	85 c0		 test	 eax, eax
  00217	0f 85 90 fe ff
	ff		 jne	 $failed$27524

; 6505 :         Py_CLEAR(tmp);

  0021d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00224	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@LABJANNH@obj2ast_arguments?$AA@
  0022b	4c 8b cb	 mov	 r9, rbx
  0022e	41 b8 69 19 00
	00		 mov	 r8d, 6505		; 00001969H
  00234	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0023c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00241	85 c0		 test	 eax, eax
  00243	75 08		 jne	 SHORT $LN114@obj2ast_ar@2
  00245	48 8b cb	 mov	 rcx, rbx
  00248	e8 00 00 00 00	 call	 _Py_DecRef
$LN114@obj2ast_ar@2:

; 6506 :     } else {

  0024d	48 8b bc 24 d8
	00 00 00	 mov	 rdi, QWORD PTR vararg$[rsp]
  00255	48 89 bc 24 d8
	00 00 00	 mov	 QWORD PTR vararg$1$[rsp], rdi
  0025d	eb 08		 jmp	 SHORT $LN68@obj2ast_ar@2
$LN75@obj2ast_ar@2:

; 6507 :         vararg = NULL;

  0025f	48 89 b4 24 d8
	00 00 00	 mov	 QWORD PTR vararg$1$[rsp], rsi
$LN68@obj2ast_ar@2:

; 6508 :     }
; 6509 :     if (_PyObject_HasAttrId(obj, &PyId_varargannotation)) {

  00267	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_varargannotation
  0026c	49 8b cc	 mov	 rcx, r12
  0026f	49 03 de	 add	 rbx, r14
  00272	48 8b d3	 mov	 rdx, rbx
  00275	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0027a	85 c0		 test	 eax, eax
  0027c	74 61		 je	 SHORT $LN67@obj2ast_ar@2

; 6510 :         int res;
; 6511 :         tmp = _PyObject_GetAttrId(obj, &PyId_varargannotation);

  0027e	48 8b d3	 mov	 rdx, rbx
  00281	49 8b cc	 mov	 rcx, r12
  00284	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00289	48 8b d8	 mov	 rbx, rax

; 6512 :         if (tmp == NULL) goto failed;

  0028c	48 85 c0	 test	 rax, rax
  0028f	0f 84 73 fe ff
	ff		 je	 $LN3@obj2ast_ar@2

; 6513 :         res = obj2ast_expr(tmp, &varargannotation, arena);

  00295	48 8d 54 24 60	 lea	 rdx, QWORD PTR varargannotation$[rsp]
  0029a	4d 8b c5	 mov	 r8, r13
  0029d	48 8b c8	 mov	 rcx, rax
  002a0	e8 00 00 00 00	 call	 obj2ast_expr

; 6514 :         if (res != 0) goto failed;

  002a5	85 c0		 test	 eax, eax
  002a7	0f 85 00 fe ff
	ff		 jne	 $failed$27524

; 6515 :         Py_CLEAR(tmp);

  002ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  002b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@LABJANNH@obj2ast_arguments?$AA@
  002bb	4c 8b cb	 mov	 r9, rbx
  002be	41 b8 73 19 00
	00		 mov	 r8d, 6515		; 00001973H
  002c4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002cc	e8 00 00 00 00	 call	 _PyParallel_Guard
  002d1	85 c0		 test	 eax, eax
  002d3	75 0f		 jne	 SHORT $LN60@obj2ast_ar@2
  002d5	48 8b cb	 mov	 rcx, rbx
  002d8	e8 00 00 00 00	 call	 _Py_DecRef

; 6516 :     } else {

  002dd	eb 05		 jmp	 SHORT $LN60@obj2ast_ar@2
$LN67@obj2ast_ar@2:

; 6517 :         varargannotation = NULL;

  002df	48 89 74 24 60	 mov	 QWORD PTR varargannotation$[rsp], rsi
$LN60@obj2ast_ar@2:

; 6518 :     }
; 6519 :     if (_PyObject_HasAttrId(obj, &PyId_kwonlyargs)) {

  002e4	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_kwonlyargs
  002e9	49 8b cc	 mov	 rcx, r12
  002ec	49 03 de	 add	 rbx, r14
  002ef	48 8b d3	 mov	 rdx, rbx
  002f2	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  002f7	85 c0		 test	 eax, eax
  002f9	0f 84 fc 03 00
	00		 je	 $LN59@obj2ast_ar@2

; 6520 :         int res;
; 6521 :         Py_ssize_t len;
; 6522 :         Py_ssize_t i;
; 6523 :         tmp = _PyObject_GetAttrId(obj, &PyId_kwonlyargs);

  002ff	48 8b d3	 mov	 rdx, rbx
  00302	49 8b cc	 mov	 rcx, r12
  00305	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0030a	48 8b d8	 mov	 rbx, rax

; 6524 :         if (tmp == NULL) goto failed;

  0030d	48 85 c0	 test	 rax, rax
  00310	0f 84 f2 fd ff
	ff		 je	 $LN3@obj2ast_ar@2

; 6525 :         if (!PyList_Check(tmp)) {

  00316	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  0031a	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  00325	75 10		 jne	 SHORT $LN57@obj2ast_ar@2

; 6526 :             PyErr_Format(PyExc_TypeError, "arguments field \"kwonlyargs\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  00327	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  0032b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DK@DLAPFEKE@arguments?5field?5?$CCkwonlyargs?$CC?5mus@

; 6527 :             goto failed;

  00332	e9 6a fd ff ff	 jmp	 $LN120@obj2ast_ar@2
$LN57@obj2ast_ar@2:

; 6528 :         }
; 6529 :         len = PyList_GET_SIZE(tmp);

  00337	48 8b 68 60	 mov	 rbp, QWORD PTR [rax+96]

; 6530 :         kwonlyargs = asdl_seq_new(len, arena);

  0033b	49 8b d5	 mov	 rdx, r13
  0033e	48 8b cd	 mov	 rcx, rbp
  00341	e8 00 00 00 00	 call	 asdl_seq_new
  00346	4c 8b f8	 mov	 r15, rax
  00349	48 89 44 24 70	 mov	 QWORD PTR kwonlyargs$1$[rsp], rax

; 6531 :         if (kwonlyargs == NULL) goto failed;

  0034e	48 85 c0	 test	 rax, rax
  00351	0f 84 56 fd ff
	ff		 je	 $failed$27524

; 6532 :         for (i = 0; i < len; i++) {

  00357	48 8b fe	 mov	 rdi, rsi
  0035a	48 85 ed	 test	 rbp, rbp
  0035d	7e 2f		 jle	 SHORT $LN51@obj2ast_ar@2
  0035f	90		 npad	 1
$LL55@obj2ast_ar@2:

; 6533 :             arg_ty value;
; 6534 :             res = obj2ast_arg(PyList_GET_ITEM(tmp, i), &value, arena);

  00360	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00364	48 8d 54 24 50	 lea	 rdx, QWORD PTR value$27593[rsp]
  00369	4d 8b c5	 mov	 r8, r13
  0036c	48 8b 0c f9	 mov	 rcx, QWORD PTR [rcx+rdi*8]
  00370	e8 00 00 00 00	 call	 obj2ast_arg

; 6535 :             if (res != 0) goto failed;

  00375	85 c0		 test	 eax, eax
  00377	0f 85 30 fd ff
	ff		 jne	 $failed$27524

; 6536 :             asdl_seq_SET(kwonlyargs, i, value);

  0037d	48 8b 44 24 50	 mov	 rax, QWORD PTR value$27593[rsp]
  00382	48 ff c7	 inc	 rdi
  00385	49 89 04 ff	 mov	 QWORD PTR [r15+rdi*8], rax
  00389	48 3b fd	 cmp	 rdi, rbp
  0038c	7c d2		 jl	 SHORT $LL55@obj2ast_ar@2
$LN51@obj2ast_ar@2:

; 6537 :         }
; 6538 :         Py_CLEAR(tmp);

  0038e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00395	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@LABJANNH@obj2ast_arguments?$AA@
  0039c	4c 8b cb	 mov	 r9, rbx
  0039f	41 b8 8a 19 00
	00		 mov	 r8d, 6538		; 0000198aH
  003a5	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003ad	e8 00 00 00 00	 call	 _PyParallel_Guard
  003b2	85 c0		 test	 eax, eax
  003b4	75 08		 jne	 SHORT $LN50@obj2ast_ar@2
  003b6	48 8b cb	 mov	 rcx, rbx
  003b9	e8 00 00 00 00	 call	 _Py_DecRef
$LN50@obj2ast_ar@2:

; 6542 :     }
; 6543 :     if (_PyObject_HasAttrId(obj, &PyId_kwarg)) {

  003be	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_kwarg
  003c3	49 8b cc	 mov	 rcx, r12
  003c6	49 03 de	 add	 rbx, r14
  003c9	48 8b d3	 mov	 rdx, rbx
  003cc	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  003d1	85 c0		 test	 eax, eax
  003d3	74 66		 je	 SHORT $LN46@obj2ast_ar@2

; 6544 :         int res;
; 6545 :         tmp = _PyObject_GetAttrId(obj, &PyId_kwarg);

  003d5	48 8b d3	 mov	 rdx, rbx
  003d8	49 8b cc	 mov	 rcx, r12
  003db	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  003e0	48 8b d8	 mov	 rbx, rax

; 6546 :         if (tmp == NULL) goto failed;

  003e3	48 85 c0	 test	 rax, rax
  003e6	0f 84 1c fd ff
	ff		 je	 $LN3@obj2ast_ar@2

; 6547 :         res = obj2ast_identifier(tmp, &kwarg, arena);

  003ec	48 8d 54 24 50	 lea	 rdx, QWORD PTR kwarg$[rsp]
  003f1	4d 8b c5	 mov	 r8, r13
  003f4	48 8b c8	 mov	 rcx, rax
  003f7	e8 00 00 00 00	 call	 obj2ast_identifier

; 6548 :         if (res != 0) goto failed;

  003fc	85 c0		 test	 eax, eax
  003fe	0f 85 a9 fc ff
	ff		 jne	 $failed$27524

; 6549 :         Py_CLEAR(tmp);

  00404	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0040b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@LABJANNH@obj2ast_arguments?$AA@
  00412	4c 8b cb	 mov	 r9, rbx
  00415	41 b8 95 19 00
	00		 mov	 r8d, 6549		; 00001995H
  0041b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00423	e8 00 00 00 00	 call	 _PyParallel_Guard
  00428	85 c0		 test	 eax, eax
  0042a	75 08		 jne	 SHORT $LN115@obj2ast_ar@2
  0042c	48 8b cb	 mov	 rcx, rbx
  0042f	e8 00 00 00 00	 call	 _Py_DecRef
$LN115@obj2ast_ar@2:

; 6550 :     } else {

  00434	4c 8b 7c 24 50	 mov	 r15, QWORD PTR kwarg$[rsp]
  00439	eb 03		 jmp	 SHORT $LN39@obj2ast_ar@2
$LN46@obj2ast_ar@2:

; 6551 :         kwarg = NULL;

  0043b	4c 8b fe	 mov	 r15, rsi
$LN39@obj2ast_ar@2:

; 6552 :     }
; 6553 :     if (_PyObject_HasAttrId(obj, &PyId_kwargannotation)) {

  0043e	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_kwargannotation
  00443	49 8b cc	 mov	 rcx, r12
  00446	49 03 de	 add	 rbx, r14
  00449	48 8b d3	 mov	 rdx, rbx
  0044c	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00451	85 c0		 test	 eax, eax
  00453	74 61		 je	 SHORT $LN38@obj2ast_ar@2

; 6554 :         int res;
; 6555 :         tmp = _PyObject_GetAttrId(obj, &PyId_kwargannotation);

  00455	48 8b d3	 mov	 rdx, rbx
  00458	49 8b cc	 mov	 rcx, r12
  0045b	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00460	48 8b d8	 mov	 rbx, rax

; 6556 :         if (tmp == NULL) goto failed;

  00463	48 85 c0	 test	 rax, rax
  00466	0f 84 9c fc ff
	ff		 je	 $LN3@obj2ast_ar@2

; 6557 :         res = obj2ast_expr(tmp, &kwargannotation, arena);

  0046c	48 8d 54 24 58	 lea	 rdx, QWORD PTR kwargannotation$[rsp]
  00471	4d 8b c5	 mov	 r8, r13
  00474	48 8b c8	 mov	 rcx, rax
  00477	e8 00 00 00 00	 call	 obj2ast_expr

; 6558 :         if (res != 0) goto failed;

  0047c	85 c0		 test	 eax, eax
  0047e	0f 85 29 fc ff
	ff		 jne	 $failed$27524

; 6559 :         Py_CLEAR(tmp);

  00484	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0048b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@LABJANNH@obj2ast_arguments?$AA@
  00492	4c 8b cb	 mov	 r9, rbx
  00495	41 b8 9f 19 00
	00		 mov	 r8d, 6559		; 0000199fH
  0049b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  004a3	e8 00 00 00 00	 call	 _PyParallel_Guard
  004a8	85 c0		 test	 eax, eax
  004aa	75 0f		 jne	 SHORT $LN31@obj2ast_ar@2
  004ac	48 8b cb	 mov	 rcx, rbx
  004af	e8 00 00 00 00	 call	 _Py_DecRef

; 6560 :     } else {

  004b4	eb 05		 jmp	 SHORT $LN31@obj2ast_ar@2
$LN38@obj2ast_ar@2:

; 6561 :         kwargannotation = NULL;

  004b6	48 89 74 24 58	 mov	 QWORD PTR kwargannotation$[rsp], rsi
$LN31@obj2ast_ar@2:

; 6562 :     }
; 6563 :     if (_PyObject_HasAttrId(obj, &PyId_defaults)) {

  004bb	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_defaults
  004c0	49 8b cc	 mov	 rcx, r12
  004c3	49 03 de	 add	 rbx, r14
  004c6	48 8b d3	 mov	 rdx, rbx
  004c9	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  004ce	85 c0		 test	 eax, eax
  004d0	0f 84 0d 02 00
	00		 je	 $LN30@obj2ast_ar@2

; 6564 :         int res;
; 6565 :         Py_ssize_t len;
; 6566 :         Py_ssize_t i;
; 6567 :         tmp = _PyObject_GetAttrId(obj, &PyId_defaults);

  004d6	48 8b d3	 mov	 rdx, rbx
  004d9	49 8b cc	 mov	 rcx, r12
  004dc	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  004e1	48 8b d8	 mov	 rbx, rax

; 6568 :         if (tmp == NULL) goto failed;

  004e4	48 85 c0	 test	 rax, rax
  004e7	0f 84 1b fc ff
	ff		 je	 $LN3@obj2ast_ar@2

; 6569 :         if (!PyList_Check(tmp)) {

  004ed	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  004f1	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  004fc	75 10		 jne	 SHORT $LN28@obj2ast_ar@2

; 6570 :             PyErr_Format(PyExc_TypeError, "arguments field \"defaults\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  004fe	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00502	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DI@DFMGFEGL@arguments?5field?5?$CCdefaults?$CC?5must?5@

; 6571 :             goto failed;

  00509	e9 93 fb ff ff	 jmp	 $LN120@obj2ast_ar@2
$LN28@obj2ast_ar@2:

; 6572 :         }
; 6573 :         len = PyList_GET_SIZE(tmp);

  0050e	48 8b 68 60	 mov	 rbp, QWORD PTR [rax+96]

; 6574 :         defaults = asdl_seq_new(len, arena);

  00512	49 8b d5	 mov	 rdx, r13
  00515	48 8b cd	 mov	 rcx, rbp
  00518	e8 00 00 00 00	 call	 asdl_seq_new
  0051d	4c 8b f0	 mov	 r14, rax

; 6575 :         if (defaults == NULL) goto failed;

  00520	48 85 c0	 test	 rax, rax
  00523	0f 84 84 fb ff
	ff		 je	 $failed$27524

; 6576 :         for (i = 0; i < len; i++) {

  00529	48 8b fe	 mov	 rdi, rsi
  0052c	48 85 ed	 test	 rbp, rbp
  0052f	7e 3d		 jle	 SHORT $LN22@obj2ast_ar@2
  00531	66 66 66 66 66
	66 66 0f 1f 84
	00 00 00 00 00	 npad	 15
$LL26@obj2ast_ar@2:

; 6577 :             expr_ty value;
; 6578 :             res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);

  00540	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00544	48 8d 54 24 50	 lea	 rdx, QWORD PTR value$27651[rsp]
  00549	4d 8b c5	 mov	 r8, r13
  0054c	48 8b 0c f9	 mov	 rcx, QWORD PTR [rcx+rdi*8]
  00550	e8 00 00 00 00	 call	 obj2ast_expr

; 6579 :             if (res != 0) goto failed;

  00555	85 c0		 test	 eax, eax
  00557	0f 85 50 fb ff
	ff		 jne	 $failed$27524

; 6580 :             asdl_seq_SET(defaults, i, value);

  0055d	48 8b 44 24 50	 mov	 rax, QWORD PTR value$27651[rsp]
  00562	48 ff c7	 inc	 rdi
  00565	49 89 04 fe	 mov	 QWORD PTR [r14+rdi*8], rax
  00569	48 3b fd	 cmp	 rdi, rbp
  0056c	7c d2		 jl	 SHORT $LL26@obj2ast_ar@2
$LN22@obj2ast_ar@2:

; 6581 :         }
; 6582 :         Py_CLEAR(tmp);

  0056e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00575	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@LABJANNH@obj2ast_arguments?$AA@
  0057c	4c 8b cb	 mov	 r9, rbx
  0057f	41 b8 b6 19 00
	00		 mov	 r8d, 6582		; 000019b6H
  00585	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0058d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00592	85 c0		 test	 eax, eax
  00594	75 08		 jne	 SHORT $LN21@obj2ast_ar@2
  00596	48 8b cb	 mov	 rcx, rbx
  00599	e8 00 00 00 00	 call	 _Py_DecRef
$LN21@obj2ast_ar@2:

; 6585 :         return 1;
; 6586 :     }
; 6587 :     if (_PyObject_HasAttrId(obj, &PyId_kw_defaults)) {

  0059e	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_kw_defaults
  005a3	49 8b cc	 mov	 rcx, r12
  005a6	48 03 5c 24 68	 add	 rbx, QWORD PTR tv834[rsp]
  005ab	48 8b d3	 mov	 rdx, rbx
  005ae	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  005b3	85 c0		 test	 eax, eax
  005b5	0f 84 10 01 00
	00		 je	 $LN17@obj2ast_ar@2

; 6588 :         int res;
; 6589 :         Py_ssize_t len;
; 6590 :         Py_ssize_t i;
; 6591 :         tmp = _PyObject_GetAttrId(obj, &PyId_kw_defaults);

  005bb	48 8b d3	 mov	 rdx, rbx
  005be	49 8b cc	 mov	 rcx, r12
  005c1	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  005c6	48 8b d8	 mov	 rbx, rax

; 6592 :         if (tmp == NULL) goto failed;

  005c9	48 85 c0	 test	 rax, rax
  005cc	0f 84 36 fb ff
	ff		 je	 $LN3@obj2ast_ar@2

; 6593 :         if (!PyList_Check(tmp)) {

  005d2	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  005d6	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  005e1	75 10		 jne	 SHORT $LN15@obj2ast_ar@2

; 6594 :             PyErr_Format(PyExc_TypeError, "arguments field \"kw_defaults\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  005e3	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  005e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DL@IAKMBFAB@arguments?5field?5?$CCkw_defaults?$CC?5mu@

; 6595 :             goto failed;

  005ee	e9 ae fa ff ff	 jmp	 $LN120@obj2ast_ar@2
$LN15@obj2ast_ar@2:

; 6596 :         }
; 6597 :         len = PyList_GET_SIZE(tmp);

  005f3	48 8b 78 60	 mov	 rdi, QWORD PTR [rax+96]

; 6598 :         kw_defaults = asdl_seq_new(len, arena);

  005f7	49 8b d5	 mov	 rdx, r13
  005fa	48 8b cf	 mov	 rcx, rdi
  005fd	e8 00 00 00 00	 call	 asdl_seq_new
  00602	48 8b e8	 mov	 rbp, rax

; 6599 :         if (kw_defaults == NULL) goto failed;

  00605	48 85 c0	 test	 rax, rax
  00608	0f 84 9f fa ff
	ff		 je	 $failed$27524

; 6600 :         for (i = 0; i < len; i++) {

  0060e	48 85 ff	 test	 rdi, rdi
  00611	7e 3c		 jle	 SHORT $LN9@obj2ast_ar@2
  00613	66 66 66 66 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL13@obj2ast_ar@2:

; 6601 :             expr_ty value;
; 6602 :             res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);

  00620	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00624	48 8d 54 24 68	 lea	 rdx, QWORD PTR value$27679[rsp]
  00629	4d 8b c5	 mov	 r8, r13
  0062c	48 8b 0c f1	 mov	 rcx, QWORD PTR [rcx+rsi*8]
  00630	e8 00 00 00 00	 call	 obj2ast_expr

; 6603 :             if (res != 0) goto failed;

  00635	85 c0		 test	 eax, eax
  00637	0f 85 70 fa ff
	ff		 jne	 $failed$27524

; 6604 :             asdl_seq_SET(kw_defaults, i, value);

  0063d	48 8b 44 24 68	 mov	 rax, QWORD PTR value$27679[rsp]
  00642	48 ff c6	 inc	 rsi
  00645	48 89 44 f5 00	 mov	 QWORD PTR [rbp+rsi*8], rax
  0064a	48 3b f7	 cmp	 rsi, rdi
  0064d	7c d1		 jl	 SHORT $LL13@obj2ast_ar@2
$LN9@obj2ast_ar@2:

; 6605 :         }
; 6606 :         Py_CLEAR(tmp);

  0064f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00656	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@LABJANNH@obj2ast_arguments?$AA@
  0065d	4c 8b cb	 mov	 r9, rbx
  00660	41 b8 ce 19 00
	00		 mov	 r8d, 6606		; 000019ceH
  00666	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0066e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00673	85 c0		 test	 eax, eax
  00675	75 08		 jne	 SHORT $LN8@obj2ast_ar@2
  00677	48 8b cb	 mov	 rcx, rbx
  0067a	e8 00 00 00 00	 call	 _Py_DecRef
$LN8@obj2ast_ar@2:

; 6609 :         return 1;
; 6610 :     }
; 6611 :     *out = arguments(args, vararg, varargannotation, kwonlyargs, kwarg,
; 6612 :                      kwargannotation, defaults, kw_defaults, arena);

  0067f	48 8b 44 24 58	 mov	 rax, QWORD PTR kwargannotation$[rsp]
  00684	4c 8b 4c 24 70	 mov	 r9, QWORD PTR kwonlyargs$1$[rsp]
  00689	4c 8b 44 24 60	 mov	 r8, QWORD PTR varargannotation$[rsp]
  0068e	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR vararg$1$[rsp]
  00696	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$1$[rsp]
  0069b	4c 89 6c 24 40	 mov	 QWORD PTR [rsp+64], r13
  006a0	48 89 6c 24 38	 mov	 QWORD PTR [rsp+56], rbp
  006a5	4c 89 74 24 30	 mov	 QWORD PTR [rsp+48], r14
  006aa	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  006af	4c 89 7c 24 20	 mov	 QWORD PTR [rsp+32], r15
  006b4	e8 00 00 00 00	 call	 _Py_arguments
  006b9	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  006c1	48 89 01	 mov	 QWORD PTR [rcx], rax

; 6613 :     return 0;

  006c4	33 c0		 xor	 eax, eax
  006c6	e9 42 fa ff ff	 jmp	 $LN119@obj2ast_ar@2
$LN17@obj2ast_ar@2:

; 6539 :     } else {
; 6540 :         PyErr_SetString(PyExc_TypeError, "required field \"kwonlyargs\" missing from arguments");

  006cb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError

; 6607 :     } else {
; 6608 :         PyErr_SetString(PyExc_TypeError, "required field \"kw_defaults\" missing from arguments");

  006d2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@GCEJPHGL@required?5field?5?$CCkw_defaults?$CC?5mis@
  006d9	e8 00 00 00 00	 call	 PyErr_SetString
  006de	e9 25 fa ff ff	 jmp	 $LN3@obj2ast_ar@2
$LN30@obj2ast_ar@2:

; 6539 :     } else {
; 6540 :         PyErr_SetString(PyExc_TypeError, "required field \"kwonlyargs\" missing from arguments");

  006e3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError

; 6583 :     } else {
; 6584 :         PyErr_SetString(PyExc_TypeError, "required field \"defaults\" missing from arguments");

  006ea	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@MPBJNEFN@required?5field?5?$CCdefaults?$CC?5missin@
  006f1	e8 00 00 00 00	 call	 PyErr_SetString
  006f6	e9 0d fa ff ff	 jmp	 $LN3@obj2ast_ar@2
$LN59@obj2ast_ar@2:

; 6539 :     } else {
; 6540 :         PyErr_SetString(PyExc_TypeError, "required field \"kwonlyargs\" missing from arguments");

  006fb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00702	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@BHLCGNME@required?5field?5?$CCkwonlyargs?$CC?5miss@
  00709	e8 00 00 00 00	 call	 PyErr_SetString

; 6541 :         return 1;

  0070e	e9 f5 f9 ff ff	 jmp	 $LN3@obj2ast_ar@2

; 6614 : failed:
; 6615 :     Py_XDECREF(tmp);

$LN100@obj2ast_ar@2:
  00713	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00717	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0071d	e9 e6 f9 ff ff	 jmp	 $LN3@obj2ast_ar@2
$LN95@obj2ast_ar@2:
  00722	48 8b cb	 mov	 rcx, rbx
  00725	e8 00 00 00 00	 call	 Px_DecRef

; 6616 :     return 1;

  0072a	e9 d9 f9 ff ff	 jmp	 $LN3@obj2ast_ar@2
$LN88@obj2ast_ar@2:

; 6495 :     } else {
; 6496 :         PyErr_SetString(PyExc_TypeError, "required field \"args\" missing from arguments");

  0072f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00736	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@KNCHMPGN@required?5field?5?$CCargs?$CC?5missing?5fr@
  0073d	e8 00 00 00 00	 call	 PyErr_SetString

; 6497 :         return 1;

  00742	b8 01 00 00 00	 mov	 eax, 1

; 6617 : }

  00747	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0074e	41 5e		 pop	 r14
  00750	41 5d		 pop	 r13
  00752	41 5c		 pop	 r12
  00754	5b		 pop	 rbx
  00755	c3		 ret	 0
obj2ast_arguments ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$ast2obj_expr DD imagerel ast2obj_expr
	DD	imagerel ast2obj_expr+106
	DD	imagerel $unwind$ast2obj_expr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$ast2obj_expr DD imagerel ast2obj_expr+106
	DD	imagerel ast2obj_expr+3078
	DD	imagerel $chain$0$ast2obj_expr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$ast2obj_expr DD imagerel ast2obj_expr+3078
	DD	imagerel ast2obj_expr+3278
	DD	imagerel $chain$2$ast2obj_expr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$ast2obj_expr DD imagerel ast2obj_expr+3278
	DD	imagerel ast2obj_expr+3303
	DD	imagerel $chain$4$ast2obj_expr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$ast2obj_expr DD imagerel ast2obj_expr+3303
	DD	imagerel ast2obj_expr+3328
	DD	imagerel $chain$6$ast2obj_expr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$ast2obj_expr DD imagerel ast2obj_expr+3328
	DD	imagerel ast2obj_expr+3428
	DD	imagerel $chain$8$ast2obj_expr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$ast2obj_expr DD 020021H
	DD	073400H
	DD	imagerel ast2obj_expr
	DD	imagerel ast2obj_expr+106
	DD	imagerel $unwind$ast2obj_expr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$ast2obj_expr DD 020021H
	DD	073400H
	DD	imagerel ast2obj_expr
	DD	imagerel ast2obj_expr+106
	DD	imagerel $unwind$ast2obj_expr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$ast2obj_expr DD 020021H
	DD	073400H
	DD	imagerel ast2obj_expr
	DD	imagerel ast2obj_expr+106
	DD	imagerel $unwind$ast2obj_expr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$ast2obj_expr DD 020021H
	DD	073400H
	DD	imagerel ast2obj_expr
	DD	imagerel ast2obj_expr+106
	DD	imagerel $unwind$ast2obj_expr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$ast2obj_expr DD 020521H
	DD	073405H
	DD	imagerel ast2obj_expr
	DD	imagerel ast2obj_expr+106
	DD	imagerel $unwind$ast2obj_expr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_expr DD 040801H
	DD	070047208H
	DD	050026003H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\python-ast.c
xdata	ENDS
;	COMDAT ast2obj_expr
_TEXT	SEGMENT
n$1$ = 96
_o$ = 96
tv1457 = 104
result$1$ = 112
tv1474 = 120
ast2obj_expr PROC					; COMDAT

; 2673 : {

  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 2674 :     expr_ty o = (expr_ty)_o;
; 2675 :     PyObject *result = NULL, *value = NULL;

  00008	33 ed		 xor	 ebp, ebp
  0000a	48 8b f1	 mov	 rsi, rcx
  0000d	8b fd		 mov	 edi, ebp

; 2676 :     if (!o) {

  0000f	48 85 c9	 test	 rcx, rcx
  00012	75 54		 jne	 SHORT $LN171@ast2obj_ex@2

; 2677 :         Py_INCREF(Py_None);

  00014	e8 00 00 00 00	 call	 _Py_PXCTX
  00019	85 c0		 test	 eax, eax
  0001b	75 3c		 jne	 SHORT $LN177@ast2obj_ex@2
  0001d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00032	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00038	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00040	e8 00 00 00 00	 call	 _PyParallel_Guard
  00045	85 c0		 test	 eax, eax
  00047	75 09		 jne	 SHORT $LN176@ast2obj_ex@2
  00049	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00050	74 07		 je	 SHORT $LN177@ast2obj_ex@2
$LN176@ast2obj_ex@2:
  00052	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN177@ast2obj_ex@2:

; 2678 :         return Py_None;

  00059	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 3060 : }

  00060	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00064	5f		 pop	 rdi
  00065	5e		 pop	 rsi
  00066	5d		 pop	 rbp
  00067	c3		 ret	 0
$LN171@ast2obj_ex@2:

; 2679 :     }
; 2680 : 
; 2681 :     switch (o->kind) {

  00068	8b 01		 mov	 eax, DWORD PTR [rcx]
  0006a	48 89 5c 24 38	 mov	 QWORD PTR [rsp+56], rbx
  0006f	ff c8		 dec	 eax
  00071	83 f8 18	 cmp	 eax, 24
  00074	0f 87 01 0b 00
	00		 ja	 $LN206@ast2obj_ex@2
  0007a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:__ImageBase
  00081	48 98		 cdqe
  00083	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR $LN204@ast2obj_ex@2[rdx+rax*4]
  0008a	48 03 ca	 add	 rcx, rdx
  0008d	ff e1		 jmp	 rcx
$LN168@ast2obj_ex@2:

; 2682 :     case BoolOp_kind:
; 2683 :         result = PyType_GenericNew(BoolOp_type, NULL, NULL);

  0008f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR BoolOp_type
  00096	45 33 c0	 xor	 r8d, r8d
  00099	33 d2		 xor	 edx, edx
  0009b	e8 00 00 00 00	 call	 PyType_GenericNew
  000a0	48 8b f8	 mov	 rdi, rax

; 2684 :         if (!result) goto failed;

  000a3	48 85 c0	 test	 rax, rax
  000a6	0f 84 43 0c 00
	00		 je	 $LN3@ast2obj_ex@2

; 2685 :         value = ast2obj_boolop(o->v.BoolOp.op);

  000ac	8b 4e 08	 mov	 ecx, DWORD PTR [rsi+8]
  000af	e8 00 00 00 00	 call	 ast2obj_boolop
  000b4	48 8b d8	 mov	 rbx, rax

; 2686 :         if (!value) goto failed;

  000b7	48 85 c0	 test	 rax, rax
  000ba	0f 84 ab 0b 00
	00		 je	 $LN7@ast2obj_ex@2

; 2687 :         if (_PyObject_SetAttrId(result, &PyId_op, value) == -1)

  000c0	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _tls_index
  000c6	65 48 8b 0c 25
	58 00 00 00	 mov	 rcx, QWORD PTR gs:88
  000cf	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_op
  000d4	48 8b 2c c1	 mov	 rbp, QWORD PTR [rcx+rax*8]
$LN210@ast2obj_ex@2:
  000d8	48 03 d5	 add	 rdx, rbp
  000db	4c 8b c3	 mov	 r8, rbx
  000de	48 8b cf	 mov	 rcx, rdi
  000e1	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  000e6	83 f8 ff	 cmp	 eax, -1
  000e9	0f 84 17 0b 00
	00		 je	 $failed$23796

; 2688 :             goto failed;
; 2689 :         Py_DECREF(value);

  000ef	48 8b cb	 mov	 rcx, rbx
  000f2	e8 00 00 00 00	 call	 _Py_DecRef

; 2690 :         value = ast2obj_list(o->v.BoolOp.values, ast2obj_expr);

  000f7	48 8b 4e 10	 mov	 rcx, QWORD PTR [rsi+16]
  000fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_expr
  00102	e8 00 00 00 00	 call	 ast2obj_list
  00107	48 8b d8	 mov	 rbx, rax

; 2691 :         if (!value) goto failed;

  0010a	48 85 c0	 test	 rax, rax
  0010d	0f 84 58 0b 00
	00		 je	 $LN7@ast2obj_ex@2

; 2692 :         if (_PyObject_SetAttrId(result, &PyId_values, value) == -1)

  00113	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_values

; 2693 :             goto failed;
; 2694 :         Py_DECREF(value);
; 2695 :         break;

  00118	e9 3f 0a 00 00	 jmp	 $LN209@ast2obj_ex@2
$LN162@ast2obj_ex@2:

; 2696 :     case BinOp_kind:
; 2697 :         result = PyType_GenericNew(BinOp_type, NULL, NULL);

  0011d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR BinOp_type
  00124	45 33 c0	 xor	 r8d, r8d
  00127	33 d2		 xor	 edx, edx
  00129	e8 00 00 00 00	 call	 PyType_GenericNew
  0012e	48 8b f8	 mov	 rdi, rax

; 2698 :         if (!result) goto failed;

  00131	48 85 c0	 test	 rax, rax
  00134	0f 84 b5 0b 00
	00		 je	 $LN3@ast2obj_ex@2

; 2699 :         value = ast2obj_expr(o->v.BinOp.left);

  0013a	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  0013e	e8 00 00 00 00	 call	 ast2obj_expr
  00143	48 8b d8	 mov	 rbx, rax

; 2700 :         if (!value) goto failed;

  00146	48 85 c0	 test	 rax, rax
  00149	0f 84 1c 0b 00
	00		 je	 $LN7@ast2obj_ex@2

; 2701 :         if (_PyObject_SetAttrId(result, &PyId_left, value) == -1)

  0014f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00155	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0015e	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_left
  00163	48 8b 2c c8	 mov	 rbp, QWORD PTR [rax+rcx*8]
  00167	4c 8b c3	 mov	 r8, rbx
  0016a	48 8b cf	 mov	 rcx, rdi
  0016d	48 03 d5	 add	 rdx, rbp
  00170	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00175	83 f8 ff	 cmp	 eax, -1
  00178	0f 84 88 0a 00
	00		 je	 $failed$23796

; 2702 :             goto failed;
; 2703 :         Py_DECREF(value);

  0017e	48 8b cb	 mov	 rcx, rbx
  00181	e8 00 00 00 00	 call	 _Py_DecRef

; 2704 :         value = ast2obj_operator(o->v.BinOp.op);

  00186	8b 4e 10	 mov	 ecx, DWORD PTR [rsi+16]
  00189	e8 00 00 00 00	 call	 ast2obj_operator
  0018e	48 8b d8	 mov	 rbx, rax

; 2705 :         if (!value) goto failed;

  00191	48 85 c0	 test	 rax, rax
  00194	0f 84 d1 0a 00
	00		 je	 $LN7@ast2obj_ex@2

; 2706 :         if (_PyObject_SetAttrId(result, &PyId_op, value) == -1)

  0019a	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_op
  0019f	4c 8b c0	 mov	 r8, rax
  001a2	48 8b cf	 mov	 rcx, rdi
  001a5	48 03 d5	 add	 rdx, rbp
  001a8	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  001ad	83 f8 ff	 cmp	 eax, -1
  001b0	0f 84 50 0a 00
	00		 je	 $failed$23796

; 2707 :             goto failed;
; 2708 :         Py_DECREF(value);

  001b6	48 8b cb	 mov	 rcx, rbx
  001b9	e8 00 00 00 00	 call	 _Py_DecRef

; 2709 :         value = ast2obj_expr(o->v.BinOp.right);

  001be	48 8b 4e 18	 mov	 rcx, QWORD PTR [rsi+24]
  001c2	e8 00 00 00 00	 call	 ast2obj_expr
  001c7	48 8b d8	 mov	 rbx, rax

; 2710 :         if (!value) goto failed;

  001ca	48 85 c0	 test	 rax, rax
  001cd	0f 84 98 0a 00
	00		 je	 $LN7@ast2obj_ex@2

; 2711 :         if (_PyObject_SetAttrId(result, &PyId_right, value) == -1)

  001d3	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_right

; 2712 :             goto failed;
; 2713 :         Py_DECREF(value);
; 2714 :         break;

  001d8	e9 7f 09 00 00	 jmp	 $LN209@ast2obj_ex@2
$LN154@ast2obj_ex@2:

; 2715 :     case UnaryOp_kind:
; 2716 :         result = PyType_GenericNew(UnaryOp_type, NULL, NULL);

  001dd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR UnaryOp_type
  001e4	45 33 c0	 xor	 r8d, r8d
  001e7	33 d2		 xor	 edx, edx
  001e9	e8 00 00 00 00	 call	 PyType_GenericNew
  001ee	48 8b f8	 mov	 rdi, rax

; 2717 :         if (!result) goto failed;

  001f1	48 85 c0	 test	 rax, rax
  001f4	0f 84 f5 0a 00
	00		 je	 $LN3@ast2obj_ex@2

; 2718 :         value = ast2obj_unaryop(o->v.UnaryOp.op);

  001fa	8b 4e 08	 mov	 ecx, DWORD PTR [rsi+8]
  001fd	e8 00 00 00 00	 call	 ast2obj_unaryop
  00202	48 8b d8	 mov	 rbx, rax

; 2719 :         if (!value) goto failed;

  00205	48 85 c0	 test	 rax, rax
  00208	0f 84 5d 0a 00
	00		 je	 $LN7@ast2obj_ex@2

; 2720 :         if (_PyObject_SetAttrId(result, &PyId_op, value) == -1)

  0020e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00214	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0021d	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_op
  00222	48 8b 2c c8	 mov	 rbp, QWORD PTR [rax+rcx*8]
  00226	4c 8b c3	 mov	 r8, rbx
  00229	48 8b cf	 mov	 rcx, rdi
  0022c	48 03 d5	 add	 rdx, rbp
  0022f	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00234	83 f8 ff	 cmp	 eax, -1
  00237	0f 84 c9 09 00
	00		 je	 $failed$23796

; 2721 :             goto failed;
; 2722 :         Py_DECREF(value);

  0023d	48 8b cb	 mov	 rcx, rbx
  00240	e8 00 00 00 00	 call	 _Py_DecRef

; 2723 :         value = ast2obj_expr(o->v.UnaryOp.operand);

  00245	48 8b 4e 10	 mov	 rcx, QWORD PTR [rsi+16]
  00249	e8 00 00 00 00	 call	 ast2obj_expr
  0024e	48 8b d8	 mov	 rbx, rax

; 2724 :         if (!value) goto failed;

  00251	48 85 c0	 test	 rax, rax
  00254	0f 84 11 0a 00
	00		 je	 $LN7@ast2obj_ex@2

; 2725 :         if (_PyObject_SetAttrId(result, &PyId_operand, value) == -1)

  0025a	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_operand

; 2726 :             goto failed;
; 2727 :         Py_DECREF(value);
; 2728 :         break;

  0025f	e9 f8 08 00 00	 jmp	 $LN209@ast2obj_ex@2
$LN148@ast2obj_ex@2:

; 2729 :     case Lambda_kind:
; 2730 :         result = PyType_GenericNew(Lambda_type, NULL, NULL);

  00264	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Lambda_type
  0026b	45 33 c0	 xor	 r8d, r8d
  0026e	33 d2		 xor	 edx, edx
  00270	e8 00 00 00 00	 call	 PyType_GenericNew
  00275	48 8b f8	 mov	 rdi, rax

; 2731 :         if (!result) goto failed;

  00278	48 85 c0	 test	 rax, rax
  0027b	0f 84 6e 0a 00
	00		 je	 $LN3@ast2obj_ex@2

; 2732 :         value = ast2obj_arguments(o->v.Lambda.args);

  00281	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  00285	e8 00 00 00 00	 call	 ast2obj_arguments
  0028a	48 8b d8	 mov	 rbx, rax

; 2733 :         if (!value) goto failed;

  0028d	48 85 c0	 test	 rax, rax
  00290	0f 84 d5 09 00
	00		 je	 $LN7@ast2obj_ex@2

; 2734 :         if (_PyObject_SetAttrId(result, &PyId_args, value) == -1)

  00296	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0029c	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  002a5	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_args
  002aa	48 8b 2c c8	 mov	 rbp, QWORD PTR [rax+rcx*8]
  002ae	4c 8b c3	 mov	 r8, rbx
  002b1	48 8b cf	 mov	 rcx, rdi
  002b4	48 03 d5	 add	 rdx, rbp
  002b7	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  002bc	83 f8 ff	 cmp	 eax, -1
  002bf	0f 84 41 09 00
	00		 je	 $failed$23796

; 2735 :             goto failed;
; 2736 :         Py_DECREF(value);

  002c5	48 8b cb	 mov	 rcx, rbx
  002c8	e8 00 00 00 00	 call	 _Py_DecRef

; 2737 :         value = ast2obj_expr(o->v.Lambda.body);

  002cd	48 8b 4e 10	 mov	 rcx, QWORD PTR [rsi+16]
  002d1	e8 00 00 00 00	 call	 ast2obj_expr
  002d6	48 8b d8	 mov	 rbx, rax

; 2738 :         if (!value) goto failed;

  002d9	48 85 c0	 test	 rax, rax
  002dc	0f 84 89 09 00
	00		 je	 $LN7@ast2obj_ex@2

; 2739 :         if (_PyObject_SetAttrId(result, &PyId_body, value) == -1)

  002e2	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_body

; 2740 :             goto failed;
; 2741 :         Py_DECREF(value);
; 2742 :         break;

  002e7	e9 70 08 00 00	 jmp	 $LN209@ast2obj_ex@2
$LN142@ast2obj_ex@2:

; 2743 :     case IfExp_kind:
; 2744 :         result = PyType_GenericNew(IfExp_type, NULL, NULL);

  002ec	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR IfExp_type
  002f3	45 33 c0	 xor	 r8d, r8d
  002f6	33 d2		 xor	 edx, edx
  002f8	e8 00 00 00 00	 call	 PyType_GenericNew
  002fd	48 8b f8	 mov	 rdi, rax

; 2745 :         if (!result) goto failed;

  00300	48 85 c0	 test	 rax, rax
  00303	0f 84 e6 09 00
	00		 je	 $LN3@ast2obj_ex@2

; 2746 :         value = ast2obj_expr(o->v.IfExp.test);

  00309	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  0030d	e8 00 00 00 00	 call	 ast2obj_expr
  00312	48 8b d8	 mov	 rbx, rax

; 2747 :         if (!value) goto failed;

  00315	48 85 c0	 test	 rax, rax
  00318	0f 84 4d 09 00
	00		 je	 $LN7@ast2obj_ex@2

; 2748 :         if (_PyObject_SetAttrId(result, &PyId_test, value) == -1)

  0031e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00324	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0032d	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_test
  00332	48 8b 2c c8	 mov	 rbp, QWORD PTR [rax+rcx*8]
  00336	4c 8b c3	 mov	 r8, rbx
  00339	48 8b cf	 mov	 rcx, rdi
  0033c	48 03 d5	 add	 rdx, rbp
  0033f	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00344	83 f8 ff	 cmp	 eax, -1
  00347	0f 84 b9 08 00
	00		 je	 $failed$23796

; 2749 :             goto failed;
; 2750 :         Py_DECREF(value);

  0034d	48 8b cb	 mov	 rcx, rbx
  00350	e8 00 00 00 00	 call	 _Py_DecRef

; 2751 :         value = ast2obj_expr(o->v.IfExp.body);

  00355	48 8b 4e 10	 mov	 rcx, QWORD PTR [rsi+16]
  00359	e8 00 00 00 00	 call	 ast2obj_expr
  0035e	48 8b d8	 mov	 rbx, rax

; 2752 :         if (!value) goto failed;

  00361	48 85 c0	 test	 rax, rax
  00364	0f 84 01 09 00
	00		 je	 $LN7@ast2obj_ex@2

; 2753 :         if (_PyObject_SetAttrId(result, &PyId_body, value) == -1)

  0036a	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_body
  0036f	4c 8b c0	 mov	 r8, rax
  00372	48 8b cf	 mov	 rcx, rdi
  00375	48 03 d5	 add	 rdx, rbp
  00378	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0037d	83 f8 ff	 cmp	 eax, -1
  00380	0f 84 80 08 00
	00		 je	 $failed$23796

; 2754 :             goto failed;
; 2755 :         Py_DECREF(value);

  00386	48 8b cb	 mov	 rcx, rbx
  00389	e8 00 00 00 00	 call	 _Py_DecRef

; 2756 :         value = ast2obj_expr(o->v.IfExp.orelse);

  0038e	48 8b 4e 18	 mov	 rcx, QWORD PTR [rsi+24]
  00392	e8 00 00 00 00	 call	 ast2obj_expr
  00397	48 8b d8	 mov	 rbx, rax

; 2757 :         if (!value) goto failed;

  0039a	48 85 c0	 test	 rax, rax
  0039d	0f 84 c8 08 00
	00		 je	 $LN7@ast2obj_ex@2

; 2758 :         if (_PyObject_SetAttrId(result, &PyId_orelse, value) == -1)

  003a3	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_orelse

; 2759 :             goto failed;
; 2760 :         Py_DECREF(value);
; 2761 :         break;

  003a8	e9 af 07 00 00	 jmp	 $LN209@ast2obj_ex@2
$LN134@ast2obj_ex@2:

; 2762 :     case Dict_kind:
; 2763 :         result = PyType_GenericNew(Dict_type, NULL, NULL);

  003ad	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Dict_type
  003b4	45 33 c0	 xor	 r8d, r8d
  003b7	33 d2		 xor	 edx, edx
  003b9	e8 00 00 00 00	 call	 PyType_GenericNew
  003be	48 8b f8	 mov	 rdi, rax

; 2764 :         if (!result) goto failed;

  003c1	48 85 c0	 test	 rax, rax
  003c4	0f 84 25 09 00
	00		 je	 $LN3@ast2obj_ex@2

; 2765 :         value = ast2obj_list(o->v.Dict.keys, ast2obj_expr);

  003ca	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  003ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_expr
  003d5	e8 00 00 00 00	 call	 ast2obj_list
  003da	48 8b d8	 mov	 rbx, rax

; 2766 :         if (!value) goto failed;

  003dd	48 85 c0	 test	 rax, rax
  003e0	0f 84 85 08 00
	00		 je	 $LN7@ast2obj_ex@2

; 2767 :         if (_PyObject_SetAttrId(result, &PyId_keys, value) == -1)

  003e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  003ec	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  003f5	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_keys
  003fa	48 8b 2c c8	 mov	 rbp, QWORD PTR [rax+rcx*8]

; 2768 :             goto failed;
; 2769 :         Py_DECREF(value);
; 2770 :         value = ast2obj_list(o->v.Dict.values, ast2obj_expr);
; 2771 :         if (!value) goto failed;
; 2772 :         if (_PyObject_SetAttrId(result, &PyId_values, value) == -1)
; 2773 :             goto failed;
; 2774 :         Py_DECREF(value);
; 2775 :         break;

  003fe	e9 d5 fc ff ff	 jmp	 $LN210@ast2obj_ex@2
$LN128@ast2obj_ex@2:

; 2776 :     case Set_kind:
; 2777 :         result = PyType_GenericNew(Set_type, NULL, NULL);

  00403	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Set_type
  0040a	45 33 c0	 xor	 r8d, r8d
  0040d	33 d2		 xor	 edx, edx
  0040f	e8 00 00 00 00	 call	 PyType_GenericNew
  00414	48 8b f8	 mov	 rdi, rax

; 2778 :         if (!result) goto failed;

  00417	48 85 c0	 test	 rax, rax
  0041a	0f 84 cf 08 00
	00		 je	 $LN3@ast2obj_ex@2

; 2779 :         value = ast2obj_list(o->v.Set.elts, ast2obj_expr);

  00420	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  00424	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_expr
  0042b	e8 00 00 00 00	 call	 ast2obj_list
  00430	48 8b d8	 mov	 rbx, rax

; 2780 :         if (!value) goto failed;

  00433	48 85 c0	 test	 rax, rax
  00436	0f 84 2f 08 00
	00		 je	 $LN7@ast2obj_ex@2

; 2781 :         if (_PyObject_SetAttrId(result, &PyId_elts, value) == -1)

  0043c	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_elts
$LN221@ast2obj_ex@2:
  00441	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0044a	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR _tls_index
  00450	4c 8b c3	 mov	 r8, rbx
  00453	48 03 14 e8	 add	 rdx, QWORD PTR [rax+rbp*8]
  00457	48 8b cf	 mov	 rcx, rdi
  0045a	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0045f	83 f8 ff	 cmp	 eax, -1
  00462	0f 84 9e 07 00
	00		 je	 $failed$23796

; 2782 :             goto failed;
; 2783 :         Py_DECREF(value);

  00468	48 8b cb	 mov	 rcx, rbx
  0046b	e8 00 00 00 00	 call	 _Py_DecRef

; 2784 :         break;

  00470	e9 0c 07 00 00	 jmp	 $LN169@ast2obj_ex@2
$LN124@ast2obj_ex@2:

; 2785 :     case ListComp_kind:
; 2786 :         result = PyType_GenericNew(ListComp_type, NULL, NULL);

  00475	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ListComp_type
$LN219@ast2obj_ex@2:
  0047c	45 33 c0	 xor	 r8d, r8d
  0047f	33 d2		 xor	 edx, edx
  00481	e8 00 00 00 00	 call	 PyType_GenericNew
  00486	48 8b f8	 mov	 rdi, rax

; 2787 :         if (!result) goto failed;

  00489	48 85 c0	 test	 rax, rax
  0048c	0f 84 5d 08 00
	00		 je	 $LN3@ast2obj_ex@2

; 2788 :         value = ast2obj_expr(o->v.ListComp.elt);

  00492	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  00496	e8 00 00 00 00	 call	 ast2obj_expr
  0049b	48 8b d8	 mov	 rbx, rax

; 2789 :         if (!value) goto failed;

  0049e	48 85 c0	 test	 rax, rax
  004a1	0f 84 c4 07 00
	00		 je	 $LN7@ast2obj_ex@2

; 2790 :         if (_PyObject_SetAttrId(result, &PyId_elt, value) == -1)

  004a7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  004ad	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  004b6	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_elt
  004bb	48 8b 2c c8	 mov	 rbp, QWORD PTR [rax+rcx*8]
  004bf	4c 8b c3	 mov	 r8, rbx
  004c2	48 8b cf	 mov	 rcx, rdi
  004c5	48 03 d5	 add	 rdx, rbp
  004c8	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  004cd	83 f8 ff	 cmp	 eax, -1
  004d0	0f 84 30 07 00
	00		 je	 $failed$23796

; 2791 :             goto failed;
; 2792 :         Py_DECREF(value);

  004d6	48 8b cb	 mov	 rcx, rbx
  004d9	e8 00 00 00 00	 call	 _Py_DecRef

; 2793 :         value = ast2obj_list(o->v.ListComp.generators, ast2obj_comprehension);

  004de	48 8b 4e 10	 mov	 rcx, QWORD PTR [rsi+16]
$LN220@ast2obj_ex@2:
  004e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_comprehension
  004e9	e8 00 00 00 00	 call	 ast2obj_list
  004ee	48 8b d8	 mov	 rbx, rax

; 2794 :         if (!value) goto failed;

  004f1	48 85 c0	 test	 rax, rax
  004f4	0f 84 71 07 00
	00		 je	 $LN7@ast2obj_ex@2

; 2795 :         if (_PyObject_SetAttrId(result, &PyId_generators, value) == -1)

  004fa	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_generators

; 2796 :             goto failed;
; 2797 :         Py_DECREF(value);
; 2798 :         break;

  004ff	e9 58 06 00 00	 jmp	 $LN209@ast2obj_ex@2
$LN118@ast2obj_ex@2:

; 2799 :     case SetComp_kind:
; 2800 :         result = PyType_GenericNew(SetComp_type, NULL, NULL);

  00504	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR SetComp_type

; 2801 :         if (!result) goto failed;
; 2802 :         value = ast2obj_expr(o->v.SetComp.elt);
; 2803 :         if (!value) goto failed;
; 2804 :         if (_PyObject_SetAttrId(result, &PyId_elt, value) == -1)
; 2805 :             goto failed;
; 2806 :         Py_DECREF(value);
; 2807 :         value = ast2obj_list(o->v.SetComp.generators, ast2obj_comprehension);
; 2808 :         if (!value) goto failed;
; 2809 :         if (_PyObject_SetAttrId(result, &PyId_generators, value) == -1)
; 2810 :             goto failed;
; 2811 :         Py_DECREF(value);
; 2812 :         break;

  0050b	e9 6c ff ff ff	 jmp	 $LN219@ast2obj_ex@2
$LN112@ast2obj_ex@2:

; 2813 :     case DictComp_kind:
; 2814 :         result = PyType_GenericNew(DictComp_type, NULL, NULL);

  00510	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR DictComp_type
  00517	45 33 c0	 xor	 r8d, r8d
  0051a	33 d2		 xor	 edx, edx
  0051c	e8 00 00 00 00	 call	 PyType_GenericNew
  00521	48 8b f8	 mov	 rdi, rax

; 2815 :         if (!result) goto failed;

  00524	48 85 c0	 test	 rax, rax
  00527	0f 84 c2 07 00
	00		 je	 $LN3@ast2obj_ex@2

; 2816 :         value = ast2obj_expr(o->v.DictComp.key);

  0052d	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  00531	e8 00 00 00 00	 call	 ast2obj_expr
  00536	48 8b d8	 mov	 rbx, rax

; 2817 :         if (!value) goto failed;

  00539	48 85 c0	 test	 rax, rax
  0053c	0f 84 29 07 00
	00		 je	 $LN7@ast2obj_ex@2

; 2818 :         if (_PyObject_SetAttrId(result, &PyId_key, value) == -1)

  00542	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00548	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00551	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_key
  00556	48 8b 2c c8	 mov	 rbp, QWORD PTR [rax+rcx*8]
  0055a	4c 8b c3	 mov	 r8, rbx
  0055d	48 8b cf	 mov	 rcx, rdi
  00560	48 03 d5	 add	 rdx, rbp
  00563	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00568	83 f8 ff	 cmp	 eax, -1
  0056b	0f 84 95 06 00
	00		 je	 $failed$23796

; 2819 :             goto failed;
; 2820 :         Py_DECREF(value);

  00571	48 8b cb	 mov	 rcx, rbx
  00574	e8 00 00 00 00	 call	 _Py_DecRef

; 2821 :         value = ast2obj_expr(o->v.DictComp.value);

  00579	48 8b 4e 10	 mov	 rcx, QWORD PTR [rsi+16]
  0057d	e8 00 00 00 00	 call	 ast2obj_expr
  00582	48 8b d8	 mov	 rbx, rax

; 2822 :         if (!value) goto failed;

  00585	48 85 c0	 test	 rax, rax
  00588	0f 84 dd 06 00
	00		 je	 $LN7@ast2obj_ex@2

; 2823 :         if (_PyObject_SetAttrId(result, &PyId_value, value) == -1)

  0058e	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_value
  00593	4c 8b c0	 mov	 r8, rax
  00596	48 8b cf	 mov	 rcx, rdi
  00599	48 03 d5	 add	 rdx, rbp
  0059c	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  005a1	83 f8 ff	 cmp	 eax, -1
  005a4	0f 84 5c 06 00
	00		 je	 $failed$23796

; 2824 :             goto failed;
; 2825 :         Py_DECREF(value);

  005aa	48 8b cb	 mov	 rcx, rbx
  005ad	e8 00 00 00 00	 call	 _Py_DecRef

; 2826 :         value = ast2obj_list(o->v.DictComp.generators, ast2obj_comprehension);

  005b2	48 8b 4e 18	 mov	 rcx, QWORD PTR [rsi+24]

; 2827 :         if (!value) goto failed;
; 2828 :         if (_PyObject_SetAttrId(result, &PyId_generators, value) == -1)
; 2829 :             goto failed;
; 2830 :         Py_DECREF(value);
; 2831 :         break;

  005b6	e9 27 ff ff ff	 jmp	 $LN220@ast2obj_ex@2
$LN104@ast2obj_ex@2:

; 2832 :     case GeneratorExp_kind:
; 2833 :         result = PyType_GenericNew(GeneratorExp_type, NULL, NULL);

  005bb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR GeneratorExp_type

; 2834 :         if (!result) goto failed;
; 2835 :         value = ast2obj_expr(o->v.GeneratorExp.elt);
; 2836 :         if (!value) goto failed;
; 2837 :         if (_PyObject_SetAttrId(result, &PyId_elt, value) == -1)
; 2838 :             goto failed;
; 2839 :         Py_DECREF(value);
; 2840 :         value = ast2obj_list(o->v.GeneratorExp.generators,
; 2841 :                              ast2obj_comprehension);
; 2842 :         if (!value) goto failed;
; 2843 :         if (_PyObject_SetAttrId(result, &PyId_generators, value) == -1)
; 2844 :             goto failed;
; 2845 :         Py_DECREF(value);
; 2846 :         break;

  005c2	e9 b5 fe ff ff	 jmp	 $LN219@ast2obj_ex@2
$LN98@ast2obj_ex@2:

; 2847 :     case Yield_kind:
; 2848 :         result = PyType_GenericNew(Yield_type, NULL, NULL);

  005c7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Yield_type
$LN222@ast2obj_ex@2:
  005ce	45 33 c0	 xor	 r8d, r8d
  005d1	33 d2		 xor	 edx, edx
  005d3	e8 00 00 00 00	 call	 PyType_GenericNew
  005d8	48 8b f8	 mov	 rdi, rax

; 2849 :         if (!result) goto failed;

  005db	48 85 c0	 test	 rax, rax
  005de	0f 84 0b 07 00
	00		 je	 $LN3@ast2obj_ex@2

; 2850 :         value = ast2obj_expr(o->v.Yield.value);

  005e4	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  005e8	e8 00 00 00 00	 call	 ast2obj_expr
  005ed	48 8b d8	 mov	 rbx, rax

; 2851 :         if (!value) goto failed;

  005f0	48 85 c0	 test	 rax, rax
  005f3	0f 84 72 06 00
	00		 je	 $LN7@ast2obj_ex@2

; 2852 :         if (_PyObject_SetAttrId(result, &PyId_value, value) == -1)

  005f9	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_value

; 2853 :             goto failed;
; 2854 :         Py_DECREF(value);
; 2855 :         break;

  005fe	e9 3e fe ff ff	 jmp	 $LN221@ast2obj_ex@2
$LN94@ast2obj_ex@2:

; 2856 :     case YieldFrom_kind:
; 2857 :         result = PyType_GenericNew(YieldFrom_type, NULL, NULL);

  00603	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR YieldFrom_type

; 2858 :         if (!result) goto failed;
; 2859 :         value = ast2obj_expr(o->v.YieldFrom.value);
; 2860 :         if (!value) goto failed;
; 2861 :         if (_PyObject_SetAttrId(result, &PyId_value, value) == -1)
; 2862 :             goto failed;
; 2863 :         Py_DECREF(value);
; 2864 :         break;

  0060a	eb c2		 jmp	 SHORT $LN222@ast2obj_ex@2
$LN90@ast2obj_ex@2:

; 2865 :     case Compare_kind:
; 2866 :         result = PyType_GenericNew(Compare_type, NULL, NULL);

  0060c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Compare_type
  00613	45 33 c0	 xor	 r8d, r8d
  00616	33 d2		 xor	 edx, edx
  00618	e8 00 00 00 00	 call	 PyType_GenericNew
  0061d	48 8b f8	 mov	 rdi, rax
  00620	48 89 44 24 70	 mov	 QWORD PTR result$1$[rsp], rax

; 2867 :         if (!result) goto failed;

  00625	48 85 c0	 test	 rax, rax
  00628	0f 84 c1 06 00
	00		 je	 $LN3@ast2obj_ex@2

; 2868 :         value = ast2obj_expr(o->v.Compare.left);

  0062e	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  00632	e8 00 00 00 00	 call	 ast2obj_expr
  00637	48 8b d8	 mov	 rbx, rax

; 2869 :         if (!value) goto failed;

  0063a	48 85 c0	 test	 rax, rax
  0063d	0f 84 28 06 00
	00		 je	 $LN7@ast2obj_ex@2

; 2870 :         if (_PyObject_SetAttrId(result, &PyId_left, value) == -1)

  00643	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0064c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00652	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_left
  00657	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  0065b	4c 8b c3	 mov	 r8, rbx
  0065e	48 89 4c 24 78	 mov	 QWORD PTR tv1474[rsp], rcx
  00663	48 03 d1	 add	 rdx, rcx
  00666	48 8b cf	 mov	 rcx, rdi
  00669	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0066e	83 f8 ff	 cmp	 eax, -1
  00671	0f 84 8f 05 00
	00		 je	 $failed$23796

; 2871 :             goto failed;
; 2872 :         Py_DECREF(value);

  00677	48 8b cb	 mov	 rcx, rbx
  0067a	e8 00 00 00 00	 call	 _Py_DecRef

; 2873 :         {
; 2874 :             Py_ssize_t i, n = asdl_seq_LEN(o->v.Compare.ops);

  0067f	48 8b 46 10	 mov	 rax, QWORD PTR [rsi+16]
  00683	48 85 c0	 test	 rax, rax
  00686	75 05		 jne	 SHORT $LN174@ast2obj_ex@2
  00688	48 8b c5	 mov	 rax, rbp
  0068b	eb 03		 jmp	 SHORT $LN208@ast2obj_ex@2
$LN174@ast2obj_ex@2:
  0068d	48 8b 00	 mov	 rax, QWORD PTR [rax]
$LN208@ast2obj_ex@2:

; 2875 :             value = PyList_New(n);

  00690	48 8b c8	 mov	 rcx, rax
  00693	48 89 44 24 60	 mov	 QWORD PTR n$1$[rsp], rax
  00698	e8 00 00 00 00	 call	 PyList_New
  0069d	48 8b d8	 mov	 rbx, rax

; 2876 :             if (!value) goto failed;

  006a0	48 85 c0	 test	 rax, rax
  006a3	0f 84 c2 05 00
	00		 je	 $LN7@ast2obj_ex@2

; 2877 :             for(i = 0; i < n; i++)

  006a9	48 39 6c 24 60	 cmp	 QWORD PTR n$1$[rsp], rbp
  006ae	7e 40		 jle	 SHORT $LN83@ast2obj_ex@2
  006b0	48 8b 7c 24 60	 mov	 rdi, QWORD PTR n$1$[rsp]
  006b5	b9 08 00 00 00	 mov	 ecx, 8
  006ba	48 89 4c 24 68	 mov	 QWORD PTR tv1457[rsp], rcx
  006bf	90		 npad	 1
$LL85@ast2obj_ex@2:

; 2878 :                 PyList_SET_ITEM(value, i, ast2obj_cmpop((cmpop_ty)asdl_seq_GET(o->v.Compare.ops, i)));

  006c0	48 8b 46 10	 mov	 rax, QWORD PTR [rsi+16]
  006c4	8b 0c 08	 mov	 ecx, DWORD PTR [rax+rcx]
  006c7	e8 00 00 00 00	 call	 ast2obj_cmpop
  006cc	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  006d0	48 ff c5	 inc	 rbp
  006d3	48 89 44 e9 f8	 mov	 QWORD PTR [rcx+rbp*8-8], rax
  006d8	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv1457[rsp]
  006dd	48 83 c1 04	 add	 rcx, 4
  006e1	48 89 4c 24 68	 mov	 QWORD PTR tv1457[rsp], rcx
  006e6	48 3b ef	 cmp	 rbp, rdi
  006e9	7c d5		 jl	 SHORT $LL85@ast2obj_ex@2
  006eb	48 8b 7c 24 70	 mov	 rdi, QWORD PTR result$1$[rsp]
$LN83@ast2obj_ex@2:

; 2879 :         }
; 2880 :         if (!value) goto failed;
; 2881 :         if (_PyObject_SetAttrId(result, &PyId_ops, value) == -1)

  006f0	48 8b 6c 24 78	 mov	 rbp, QWORD PTR tv1474[rsp]
  006f5	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_ops
  006fa	4c 8b c3	 mov	 r8, rbx
  006fd	48 03 d5	 add	 rdx, rbp
  00700	48 8b cf	 mov	 rcx, rdi
  00703	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00708	83 f8 ff	 cmp	 eax, -1
  0070b	0f 84 f5 04 00
	00		 je	 $failed$23796

; 2882 :             goto failed;
; 2883 :         Py_DECREF(value);

  00711	48 8b cb	 mov	 rcx, rbx
  00714	e8 00 00 00 00	 call	 _Py_DecRef

; 2884 :         value = ast2obj_list(o->v.Compare.comparators, ast2obj_expr);

  00719	48 8b 4e 18	 mov	 rcx, QWORD PTR [rsi+24]
  0071d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_expr
  00724	e8 00 00 00 00	 call	 ast2obj_list
  00729	48 8b d8	 mov	 rbx, rax

; 2885 :         if (!value) goto failed;

  0072c	48 85 c0	 test	 rax, rax
  0072f	0f 84 36 05 00
	00		 je	 $LN7@ast2obj_ex@2

; 2886 :         if (_PyObject_SetAttrId(result, &PyId_comparators, value) == -1)

  00735	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_comparators

; 2887 :             goto failed;
; 2888 :         Py_DECREF(value);
; 2889 :         break;

  0073a	e9 1d 04 00 00	 jmp	 $LN209@ast2obj_ex@2
$LN78@ast2obj_ex@2:

; 2890 :     case Call_kind:
; 2891 :         result = PyType_GenericNew(Call_type, NULL, NULL);

  0073f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Call_type
  00746	45 33 c0	 xor	 r8d, r8d
  00749	33 d2		 xor	 edx, edx
  0074b	e8 00 00 00 00	 call	 PyType_GenericNew
  00750	48 8b f8	 mov	 rdi, rax

; 2892 :         if (!result) goto failed;

  00753	48 85 c0	 test	 rax, rax
  00756	0f 84 93 05 00
	00		 je	 $LN3@ast2obj_ex@2

; 2893 :         value = ast2obj_expr(o->v.Call.func);

  0075c	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  00760	e8 00 00 00 00	 call	 ast2obj_expr
  00765	48 8b d8	 mov	 rbx, rax

; 2894 :         if (!value) goto failed;

  00768	48 85 c0	 test	 rax, rax
  0076b	0f 84 fa 04 00
	00		 je	 $LN7@ast2obj_ex@2

; 2895 :         if (_PyObject_SetAttrId(result, &PyId_func, value) == -1)

  00771	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00777	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00780	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_func
  00785	48 8b 2c c8	 mov	 rbp, QWORD PTR [rax+rcx*8]
  00789	4c 8b c3	 mov	 r8, rbx
  0078c	48 8b cf	 mov	 rcx, rdi
  0078f	48 03 d5	 add	 rdx, rbp
  00792	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00797	83 f8 ff	 cmp	 eax, -1
  0079a	0f 84 66 04 00
	00		 je	 $failed$23796

; 2896 :             goto failed;
; 2897 :         Py_DECREF(value);

  007a0	48 8b cb	 mov	 rcx, rbx
  007a3	e8 00 00 00 00	 call	 _Py_DecRef

; 2898 :         value = ast2obj_list(o->v.Call.args, ast2obj_expr);

  007a8	48 8b 4e 10	 mov	 rcx, QWORD PTR [rsi+16]
  007ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_expr
  007b3	e8 00 00 00 00	 call	 ast2obj_list
  007b8	48 8b d8	 mov	 rbx, rax

; 2899 :         if (!value) goto failed;

  007bb	48 85 c0	 test	 rax, rax
  007be	0f 84 a7 04 00
	00		 je	 $LN7@ast2obj_ex@2

; 2900 :         if (_PyObject_SetAttrId(result, &PyId_args, value) == -1)

  007c4	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_args
  007c9	4c 8b c0	 mov	 r8, rax
  007cc	48 8b cf	 mov	 rcx, rdi
  007cf	48 03 d5	 add	 rdx, rbp
  007d2	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  007d7	83 f8 ff	 cmp	 eax, -1
  007da	0f 84 26 04 00
	00		 je	 $failed$23796

; 2901 :             goto failed;
; 2902 :         Py_DECREF(value);

  007e0	48 8b cb	 mov	 rcx, rbx
  007e3	e8 00 00 00 00	 call	 _Py_DecRef

; 2903 :         value = ast2obj_list(o->v.Call.keywords, ast2obj_keyword);

  007e8	48 8b 4e 18	 mov	 rcx, QWORD PTR [rsi+24]
  007ec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_keyword
  007f3	e8 00 00 00 00	 call	 ast2obj_list
  007f8	48 8b d8	 mov	 rbx, rax

; 2904 :         if (!value) goto failed;

  007fb	48 85 c0	 test	 rax, rax
  007fe	0f 84 67 04 00
	00		 je	 $LN7@ast2obj_ex@2

; 2905 :         if (_PyObject_SetAttrId(result, &PyId_keywords, value) == -1)

  00804	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_keywords
  00809	4c 8b c0	 mov	 r8, rax
  0080c	48 8b cf	 mov	 rcx, rdi
  0080f	48 03 d5	 add	 rdx, rbp
  00812	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00817	83 f8 ff	 cmp	 eax, -1
  0081a	0f 84 e6 03 00
	00		 je	 $failed$23796

; 2906 :             goto failed;
; 2907 :         Py_DECREF(value);

  00820	48 8b cb	 mov	 rcx, rbx
  00823	e8 00 00 00 00	 call	 _Py_DecRef

; 2908 :         value = ast2obj_expr(o->v.Call.starargs);

  00828	48 8b 4e 20	 mov	 rcx, QWORD PTR [rsi+32]
  0082c	e8 00 00 00 00	 call	 ast2obj_expr
  00831	48 8b d8	 mov	 rbx, rax

; 2909 :         if (!value) goto failed;

  00834	48 85 c0	 test	 rax, rax
  00837	0f 84 2e 04 00
	00		 je	 $LN7@ast2obj_ex@2

; 2910 :         if (_PyObject_SetAttrId(result, &PyId_starargs, value) == -1)

  0083d	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_starargs
  00842	4c 8b c0	 mov	 r8, rax
  00845	48 8b cf	 mov	 rcx, rdi
  00848	48 03 d5	 add	 rdx, rbp
  0084b	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00850	83 f8 ff	 cmp	 eax, -1
  00853	0f 84 ad 03 00
	00		 je	 $failed$23796

; 2911 :             goto failed;
; 2912 :         Py_DECREF(value);

  00859	48 8b cb	 mov	 rcx, rbx
  0085c	e8 00 00 00 00	 call	 _Py_DecRef

; 2913 :         value = ast2obj_expr(o->v.Call.kwargs);

  00861	48 8b 4e 28	 mov	 rcx, QWORD PTR [rsi+40]
  00865	e8 00 00 00 00	 call	 ast2obj_expr
  0086a	48 8b d8	 mov	 rbx, rax

; 2914 :         if (!value) goto failed;

  0086d	48 85 c0	 test	 rax, rax
  00870	0f 84 f5 03 00
	00		 je	 $LN7@ast2obj_ex@2

; 2915 :         if (_PyObject_SetAttrId(result, &PyId_kwargs, value) == -1)

  00876	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_kwargs

; 2916 :             goto failed;
; 2917 :         Py_DECREF(value);
; 2918 :         break;

  0087b	e9 dc 02 00 00	 jmp	 $LN209@ast2obj_ex@2
$LN66@ast2obj_ex@2:

; 2919 :     case Num_kind:
; 2920 :         result = PyType_GenericNew(Num_type, NULL, NULL);

  00880	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Num_type
  00887	45 33 c0	 xor	 r8d, r8d
  0088a	33 d2		 xor	 edx, edx
  0088c	e8 00 00 00 00	 call	 PyType_GenericNew
  00891	48 8b f8	 mov	 rdi, rax

; 2921 :         if (!result) goto failed;

  00894	48 85 c0	 test	 rax, rax
  00897	0f 84 52 04 00
	00		 je	 $LN3@ast2obj_ex@2

; 2922 :         value = ast2obj_object(o->v.Num.n);

  0089d	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  008a1	e8 00 00 00 00	 call	 ast2obj_object
  008a6	48 8b d8	 mov	 rbx, rax

; 2923 :         if (!value) goto failed;

  008a9	48 85 c0	 test	 rax, rax
  008ac	0f 84 b9 03 00
	00		 je	 $LN7@ast2obj_ex@2

; 2924 :         if (_PyObject_SetAttrId(result, &PyId_n, value) == -1)

  008b2	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_n

; 2925 :             goto failed;
; 2926 :         Py_DECREF(value);
; 2927 :         break;

  008b7	e9 85 fb ff ff	 jmp	 $LN221@ast2obj_ex@2
$LN62@ast2obj_ex@2:

; 2928 :     case Str_kind:
; 2929 :         result = PyType_GenericNew(Str_type, NULL, NULL);

  008bc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Str_type
$LN223@ast2obj_ex@2:
  008c3	45 33 c0	 xor	 r8d, r8d
  008c6	33 d2		 xor	 edx, edx
  008c8	e8 00 00 00 00	 call	 PyType_GenericNew
  008cd	48 8b f8	 mov	 rdi, rax

; 2930 :         if (!result) goto failed;

  008d0	48 85 c0	 test	 rax, rax
  008d3	0f 84 16 04 00
	00		 je	 $LN3@ast2obj_ex@2

; 2931 :         value = ast2obj_string(o->v.Str.s);

  008d9	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  008dd	e8 00 00 00 00	 call	 ast2obj_object
  008e2	48 8b d8	 mov	 rbx, rax

; 2932 :         if (!value) goto failed;

  008e5	48 85 c0	 test	 rax, rax
  008e8	0f 84 7d 03 00
	00		 je	 $LN7@ast2obj_ex@2

; 2933 :         if (_PyObject_SetAttrId(result, &PyId_s, value) == -1)

  008ee	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_s

; 2934 :             goto failed;
; 2935 :         Py_DECREF(value);
; 2936 :         break;

  008f3	e9 49 fb ff ff	 jmp	 $LN221@ast2obj_ex@2
$LN58@ast2obj_ex@2:

; 2937 :     case Bytes_kind:
; 2938 :         result = PyType_GenericNew(Bytes_type, NULL, NULL);

  008f8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Bytes_type

; 2939 :         if (!result) goto failed;
; 2940 :         value = ast2obj_bytes(o->v.Bytes.s);
; 2941 :         if (!value) goto failed;
; 2942 :         if (_PyObject_SetAttrId(result, &PyId_s, value) == -1)
; 2943 :             goto failed;
; 2944 :         Py_DECREF(value);
; 2945 :         break;

  008ff	eb c2		 jmp	 SHORT $LN223@ast2obj_ex@2
$LN54@ast2obj_ex@2:

; 2946 :     case Ellipsis_kind:
; 2947 :         result = PyType_GenericNew(Ellipsis_type, NULL, NULL);

  00901	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Ellipsis_type
  00908	45 33 c0	 xor	 r8d, r8d
  0090b	33 d2		 xor	 edx, edx
  0090d	e8 00 00 00 00	 call	 PyType_GenericNew
  00912	48 8b f8	 mov	 rdi, rax

; 2948 :         if (!result) goto failed;

  00915	48 85 c0	 test	 rax, rax
  00918	0f 84 d1 03 00
	00		 je	 $LN3@ast2obj_ex@2

; 2949 :         break;

  0091e	e9 58 02 00 00	 jmp	 $LN206@ast2obj_ex@2
$LN52@ast2obj_ex@2:

; 2950 :     case Attribute_kind:
; 2951 :         result = PyType_GenericNew(Attribute_type, NULL, NULL);

  00923	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Attribute_type
  0092a	45 33 c0	 xor	 r8d, r8d
  0092d	33 d2		 xor	 edx, edx
  0092f	e8 00 00 00 00	 call	 PyType_GenericNew
  00934	48 8b f8	 mov	 rdi, rax

; 2952 :         if (!result) goto failed;

  00937	48 85 c0	 test	 rax, rax
  0093a	0f 84 af 03 00
	00		 je	 $LN3@ast2obj_ex@2

; 2953 :         value = ast2obj_expr(o->v.Attribute.value);

  00940	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  00944	e8 00 00 00 00	 call	 ast2obj_expr
  00949	48 8b d8	 mov	 rbx, rax

; 2954 :         if (!value) goto failed;

  0094c	48 85 c0	 test	 rax, rax
  0094f	0f 84 16 03 00
	00		 je	 $LN7@ast2obj_ex@2

; 2955 :         if (_PyObject_SetAttrId(result, &PyId_value, value) == -1)

  00955	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0095b	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00964	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_value
  00969	48 8b 2c c8	 mov	 rbp, QWORD PTR [rax+rcx*8]
  0096d	4c 8b c3	 mov	 r8, rbx
  00970	48 8b cf	 mov	 rcx, rdi
  00973	48 03 d5	 add	 rdx, rbp
  00976	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0097b	83 f8 ff	 cmp	 eax, -1
  0097e	0f 84 82 02 00
	00		 je	 $failed$23796

; 2956 :             goto failed;
; 2957 :         Py_DECREF(value);

  00984	48 8b cb	 mov	 rcx, rbx
  00987	e8 00 00 00 00	 call	 _Py_DecRef

; 2958 :         value = ast2obj_identifier(o->v.Attribute.attr);

  0098c	48 8b 4e 10	 mov	 rcx, QWORD PTR [rsi+16]
  00990	e8 00 00 00 00	 call	 ast2obj_object
  00995	48 8b d8	 mov	 rbx, rax

; 2959 :         if (!value) goto failed;

  00998	48 85 c0	 test	 rax, rax
  0099b	0f 84 ca 02 00
	00		 je	 $LN7@ast2obj_ex@2

; 2960 :         if (_PyObject_SetAttrId(result, &PyId_attr, value) == -1)

  009a1	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_attr
$LN214@ast2obj_ex@2:
  009a6	48 03 d5	 add	 rdx, rbp
  009a9	4c 8b c0	 mov	 r8, rax
  009ac	48 8b cf	 mov	 rcx, rdi
  009af	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  009b4	83 f8 ff	 cmp	 eax, -1
  009b7	0f 84 49 02 00
	00		 je	 $failed$23796

; 2961 :             goto failed;
; 2962 :         Py_DECREF(value);

  009bd	48 8b cb	 mov	 rcx, rbx
  009c0	e8 00 00 00 00	 call	 _Py_DecRef

; 2963 :         value = ast2obj_expr_context(o->v.Attribute.ctx);

  009c5	8b 4e 18	 mov	 ecx, DWORD PTR [rsi+24]

; 2964 :         if (!value) goto failed;
; 2965 :         if (_PyObject_SetAttrId(result, &PyId_ctx, value) == -1)
; 2966 :             goto failed;
; 2967 :         Py_DECREF(value);
; 2968 :         break;

  009c8	e9 79 01 00 00	 jmp	 $LN215@ast2obj_ex@2
$LN44@ast2obj_ex@2:

; 2969 :     case Subscript_kind:
; 2970 :         result = PyType_GenericNew(Subscript_type, NULL, NULL);

  009cd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Subscript_type
  009d4	45 33 c0	 xor	 r8d, r8d
  009d7	33 d2		 xor	 edx, edx
  009d9	e8 00 00 00 00	 call	 PyType_GenericNew
  009de	48 8b f8	 mov	 rdi, rax

; 2971 :         if (!result) goto failed;

  009e1	48 85 c0	 test	 rax, rax
  009e4	0f 84 05 03 00
	00		 je	 $LN3@ast2obj_ex@2

; 2972 :         value = ast2obj_expr(o->v.Subscript.value);

  009ea	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  009ee	e8 00 00 00 00	 call	 ast2obj_expr
  009f3	48 8b d8	 mov	 rbx, rax

; 2973 :         if (!value) goto failed;

  009f6	48 85 c0	 test	 rax, rax
  009f9	0f 84 6c 02 00
	00		 je	 $LN7@ast2obj_ex@2

; 2974 :         if (_PyObject_SetAttrId(result, &PyId_value, value) == -1)

  009ff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00a05	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00a0e	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_value
  00a13	48 8b 2c c8	 mov	 rbp, QWORD PTR [rax+rcx*8]
  00a17	4c 8b c3	 mov	 r8, rbx
  00a1a	48 8b cf	 mov	 rcx, rdi
  00a1d	48 03 d5	 add	 rdx, rbp
  00a20	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00a25	83 f8 ff	 cmp	 eax, -1
  00a28	0f 84 d8 01 00
	00		 je	 $failed$23796

; 2975 :             goto failed;
; 2976 :         Py_DECREF(value);

  00a2e	48 8b cb	 mov	 rcx, rbx
  00a31	e8 00 00 00 00	 call	 _Py_DecRef

; 2977 :         value = ast2obj_slice(o->v.Subscript.slice);

  00a36	48 8b 4e 10	 mov	 rcx, QWORD PTR [rsi+16]
  00a3a	e8 00 00 00 00	 call	 ast2obj_slice
  00a3f	48 8b d8	 mov	 rbx, rax

; 2978 :         if (!value) goto failed;

  00a42	48 85 c0	 test	 rax, rax
  00a45	0f 84 20 02 00
	00		 je	 $LN7@ast2obj_ex@2

; 2979 :         if (_PyObject_SetAttrId(result, &PyId_slice, value) == -1)

  00a4b	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_slice

; 2980 :             goto failed;
; 2981 :         Py_DECREF(value);
; 2982 :         value = ast2obj_expr_context(o->v.Subscript.ctx);
; 2983 :         if (!value) goto failed;
; 2984 :         if (_PyObject_SetAttrId(result, &PyId_ctx, value) == -1)
; 2985 :             goto failed;
; 2986 :         Py_DECREF(value);
; 2987 :         break;

  00a50	e9 51 ff ff ff	 jmp	 $LN214@ast2obj_ex@2
$LN36@ast2obj_ex@2:

; 2988 :     case Starred_kind:
; 2989 :         result = PyType_GenericNew(Starred_type, NULL, NULL);

  00a55	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Starred_type
  00a5c	45 33 c0	 xor	 r8d, r8d
  00a5f	33 d2		 xor	 edx, edx
  00a61	e8 00 00 00 00	 call	 PyType_GenericNew
  00a66	48 8b f8	 mov	 rdi, rax

; 2990 :         if (!result) goto failed;

  00a69	48 85 c0	 test	 rax, rax
  00a6c	0f 84 7d 02 00
	00		 je	 $LN3@ast2obj_ex@2

; 2991 :         value = ast2obj_expr(o->v.Starred.value);

  00a72	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  00a76	e8 00 00 00 00	 call	 ast2obj_expr
  00a7b	48 8b d8	 mov	 rbx, rax

; 2992 :         if (!value) goto failed;

  00a7e	48 85 c0	 test	 rax, rax
  00a81	0f 84 e4 01 00
	00		 je	 $LN7@ast2obj_ex@2

; 2993 :         if (_PyObject_SetAttrId(result, &PyId_value, value) == -1)

  00a87	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_value

; 2994 :             goto failed;
; 2995 :         Py_DECREF(value);
; 2996 :         value = ast2obj_expr_context(o->v.Starred.ctx);
; 2997 :         if (!value) goto failed;
; 2998 :         if (_PyObject_SetAttrId(result, &PyId_ctx, value) == -1)
; 2999 :             goto failed;
; 3000 :         Py_DECREF(value);
; 3001 :         break;

  00a8c	e9 80 00 00 00	 jmp	 $LN227@ast2obj_ex@2
$LN30@ast2obj_ex@2:

; 3002 :     case Name_kind:
; 3003 :         result = PyType_GenericNew(Name_type, NULL, NULL);

  00a91	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Name_type
  00a98	45 33 c0	 xor	 r8d, r8d
  00a9b	33 d2		 xor	 edx, edx
  00a9d	e8 00 00 00 00	 call	 PyType_GenericNew
  00aa2	48 8b f8	 mov	 rdi, rax

; 3004 :         if (!result) goto failed;

  00aa5	48 85 c0	 test	 rax, rax
  00aa8	0f 84 41 02 00
	00		 je	 $LN3@ast2obj_ex@2

; 3005 :         value = ast2obj_identifier(o->v.Name.id);

  00aae	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  00ab2	e8 00 00 00 00	 call	 ast2obj_object
  00ab7	48 8b d8	 mov	 rbx, rax

; 3006 :         if (!value) goto failed;

  00aba	48 85 c0	 test	 rax, rax
  00abd	0f 84 a8 01 00
	00		 je	 $LN7@ast2obj_ex@2

; 3007 :         if (_PyObject_SetAttrId(result, &PyId_id, value) == -1)

  00ac3	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_id

; 3008 :             goto failed;
; 3009 :         Py_DECREF(value);
; 3010 :         value = ast2obj_expr_context(o->v.Name.ctx);
; 3011 :         if (!value) goto failed;
; 3012 :         if (_PyObject_SetAttrId(result, &PyId_ctx, value) == -1)
; 3013 :             goto failed;
; 3014 :         Py_DECREF(value);
; 3015 :         break;

  00ac8	eb 47		 jmp	 SHORT $LN227@ast2obj_ex@2
$LN24@ast2obj_ex@2:

; 3016 :     case List_kind:
; 3017 :         result = PyType_GenericNew(List_type, NULL, NULL);

  00aca	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR List_type

; 3018 :         if (!result) goto failed;
; 3019 :         value = ast2obj_list(o->v.List.elts, ast2obj_expr);
; 3020 :         if (!value) goto failed;
; 3021 :         if (_PyObject_SetAttrId(result, &PyId_elts, value) == -1)
; 3022 :             goto failed;
; 3023 :         Py_DECREF(value);
; 3024 :         value = ast2obj_expr_context(o->v.List.ctx);
; 3025 :         if (!value) goto failed;
; 3026 :         if (_PyObject_SetAttrId(result, &PyId_ctx, value) == -1)
; 3027 :             goto failed;
; 3028 :         Py_DECREF(value);
; 3029 :         break;

  00ad1	eb 07		 jmp	 SHORT $LN230@ast2obj_ex@2
$LN18@ast2obj_ex@2:

; 3030 :     case Tuple_kind:
; 3031 :         result = PyType_GenericNew(Tuple_type, NULL, NULL);

  00ad3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Tuple_type
$LN230@ast2obj_ex@2:
  00ada	45 33 c0	 xor	 r8d, r8d
  00add	33 d2		 xor	 edx, edx
  00adf	e8 00 00 00 00	 call	 PyType_GenericNew
  00ae4	48 8b f8	 mov	 rdi, rax

; 3032 :         if (!result) goto failed;

  00ae7	48 85 c0	 test	 rax, rax
  00aea	0f 84 ff 01 00
	00		 je	 $LN3@ast2obj_ex@2

; 3033 :         value = ast2obj_list(o->v.Tuple.elts, ast2obj_expr);

  00af0	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  00af4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_expr
  00afb	e8 00 00 00 00	 call	 ast2obj_list
  00b00	48 8b d8	 mov	 rbx, rax

; 3034 :         if (!value) goto failed;

  00b03	48 85 c0	 test	 rax, rax
  00b06	0f 84 5f 01 00
	00		 je	 $LN7@ast2obj_ex@2

; 3035 :         if (_PyObject_SetAttrId(result, &PyId_elts, value) == -1)

  00b0c	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_elts
$LN227@ast2obj_ex@2:
  00b11	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00b17	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00b20	4c 8b c3	 mov	 r8, rbx
  00b23	48 8b 2c c8	 mov	 rbp, QWORD PTR [rax+rcx*8]
  00b27	48 8b cf	 mov	 rcx, rdi
  00b2a	48 03 d5	 add	 rdx, rbp
  00b2d	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00b32	83 f8 ff	 cmp	 eax, -1
  00b35	0f 84 cb 00 00
	00		 je	 $failed$23796

; 3036 :             goto failed;
; 3037 :         Py_DECREF(value);

  00b3b	48 8b cb	 mov	 rcx, rbx
  00b3e	e8 00 00 00 00	 call	 _Py_DecRef

; 3038 :         value = ast2obj_expr_context(o->v.Tuple.ctx);

  00b43	8b 4e 10	 mov	 ecx, DWORD PTR [rsi+16]
$LN215@ast2obj_ex@2:
  00b46	e8 00 00 00 00	 call	 ast2obj_expr_context
  00b4b	48 8b d8	 mov	 rbx, rax

; 3039 :         if (!value) goto failed;

  00b4e	48 85 c0	 test	 rax, rax
  00b51	0f 84 14 01 00
	00		 je	 $LN7@ast2obj_ex@2

; 3040 :         if (_PyObject_SetAttrId(result, &PyId_ctx, value) == -1)

  00b57	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_ctx
$LN209@ast2obj_ex@2:
  00b5c	4c 8b c0	 mov	 r8, rax
  00b5f	48 03 d5	 add	 rdx, rbp
  00b62	48 8b cf	 mov	 rcx, rdi
  00b65	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00b6a	83 f8 ff	 cmp	 eax, -1
  00b6d	0f 84 93 00 00
	00		 je	 $failed$23796

; 3041 :             goto failed;
; 3042 :         Py_DECREF(value);

  00b73	48 8b cb	 mov	 rcx, rbx
  00b76	e8 00 00 00 00	 call	 _Py_DecRef
$LN206@ast2obj_ex@2:

; 2870 :         if (_PyObject_SetAttrId(result, &PyId_left, value) == -1)

  00b7b	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR _tls_index
$LN169@ast2obj_ex@2:

; 3043 :         break;
; 3044 :     }
; 3045 :     value = ast2obj_int(o->lineno);

  00b81	8b 4e 30	 mov	 ecx, DWORD PTR [rsi+48]
  00b84	e8 00 00 00 00	 call	 ast2obj_int
  00b89	48 8b d8	 mov	 rbx, rax

; 3046 :     if (!value) goto failed;

  00b8c	48 85 c0	 test	 rax, rax
  00b8f	0f 84 d6 00 00
	00		 je	 $LN7@ast2obj_ex@2

; 3047 :     if (_PyObject_SetAttrId(result, &PyId_lineno, value) < 0)

  00b95	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00b9e	8b cd		 mov	 ecx, ebp
  00ba0	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_lineno
  00ba5	48 8b 2c c8	 mov	 rbp, QWORD PTR [rax+rcx*8]
  00ba9	4c 8b c3	 mov	 r8, rbx
  00bac	48 8b cf	 mov	 rcx, rdi
  00baf	48 03 d5	 add	 rdx, rbp
  00bb2	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00bb7	85 c0		 test	 eax, eax
  00bb9	78 4b		 js	 SHORT $failed$23796

; 3048 :         goto failed;
; 3049 :     Py_DECREF(value);

  00bbb	48 8b cb	 mov	 rcx, rbx
  00bbe	e8 00 00 00 00	 call	 _Py_DecRef

; 3050 :     value = ast2obj_int(o->col_offset);

  00bc3	8b 4e 34	 mov	 ecx, DWORD PTR [rsi+52]
  00bc6	e8 00 00 00 00	 call	 ast2obj_int
  00bcb	48 8b d8	 mov	 rbx, rax

; 3051 :     if (!value) goto failed;

  00bce	48 85 c0	 test	 rax, rax
  00bd1	0f 84 94 00 00
	00		 je	 $LN7@ast2obj_ex@2

; 3052 :     if (_PyObject_SetAttrId(result, &PyId_col_offset, value) < 0)

  00bd7	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_col_offset
  00bdc	4c 8b c0	 mov	 r8, rax
  00bdf	48 8b cf	 mov	 rcx, rdi
  00be2	48 03 d5	 add	 rdx, rbp
  00be5	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00bea	85 c0		 test	 eax, eax
  00bec	78 18		 js	 SHORT $failed$23796

; 3053 :         goto failed;
; 3054 :     Py_DECREF(value);

  00bee	48 8b cb	 mov	 rcx, rbx
  00bf1	e8 00 00 00 00	 call	 _Py_DecRef
  00bf6	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]

; 3055 :     return result;

  00bfb	48 8b c7	 mov	 rax, rdi

; 3060 : }

  00bfe	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00c02	5f		 pop	 rdi
  00c03	5e		 pop	 rsi
  00c04	5d		 pop	 rbp
  00c05	c3		 ret	 0
$failed$23796:

; 3056 : failed:
; 3057 :     Py_XDECREF(value);

  00c06	e8 00 00 00 00	 call	 _Py_PXCTX
  00c0b	85 c0		 test	 eax, eax
  00c0d	75 5c		 jne	 SHORT $LN7@ast2obj_ex@2
  00c0f	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00c13	a8 20		 test	 al, 32			; 00000020H
  00c15	75 4c		 jne	 SHORT $LN184@ast2obj_ex@2
  00c17	84 c0		 test	 al, al
  00c19	78 48		 js	 SHORT $LN184@ast2obj_ex@2
  00c1b	a8 02		 test	 al, 2
  00c1d	75 4c		 jne	 SHORT $LN7@ast2obj_ex@2
  00c1f	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00c23	75 46		 jne	 SHORT $LN7@ast2obj_ex@2
  00c25	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00c2c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00c33	4c 8b cb	 mov	 r9, rbx
  00c36	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00c3c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00c44	e8 00 00 00 00	 call	 _PyParallel_Guard
  00c49	48 8b cb	 mov	 rcx, rbx
  00c4c	85 c0		 test	 eax, eax
  00c4e	74 07		 je	 SHORT $LN189@ast2obj_ex@2
  00c50	e8 00 00 00 00	 call	 _Px_Dealloc
  00c55	eb 14		 jmp	 SHORT $LN7@ast2obj_ex@2
$LN189@ast2obj_ex@2:
  00c57	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00c5b	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00c61	eb 08		 jmp	 SHORT $LN7@ast2obj_ex@2
$LN184@ast2obj_ex@2:
  00c63	48 8b cb	 mov	 rcx, rbx
  00c66	e8 00 00 00 00	 call	 Px_DecRef
$LN7@ast2obj_ex@2:

; 3058 :     Py_XDECREF(result);

  00c6b	48 85 ff	 test	 rdi, rdi
  00c6e	74 7f		 je	 SHORT $LN3@ast2obj_ex@2
  00c70	e8 00 00 00 00	 call	 _Py_PXCTX
  00c75	85 c0		 test	 eax, eax
  00c77	75 76		 jne	 SHORT $LN3@ast2obj_ex@2
  00c79	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00c7d	a8 20		 test	 al, 32			; 00000020H
  00c7f	75 66		 jne	 SHORT $LN195@ast2obj_ex@2
  00c81	84 c0		 test	 al, al
  00c83	78 62		 js	 SHORT $LN195@ast2obj_ex@2
  00c85	a8 02		 test	 al, 2
  00c87	75 66		 jne	 SHORT $LN3@ast2obj_ex@2
  00c89	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00c8d	75 60		 jne	 SHORT $LN3@ast2obj_ex@2
  00c8f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00c96	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00c9d	4c 8b cf	 mov	 r9, rdi
  00ca0	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00ca6	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00cae	e8 00 00 00 00	 call	 _PyParallel_Guard
  00cb3	48 8b cf	 mov	 rcx, rdi
  00cb6	85 c0		 test	 eax, eax
  00cb8	74 14		 je	 SHORT $LN200@ast2obj_ex@2
  00cba	e8 00 00 00 00	 call	 _Px_Dealloc
  00cbf	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]

; 3059 :     return NULL;

  00cc4	33 c0		 xor	 eax, eax

; 3060 : }

  00cc6	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00cca	5f		 pop	 rdi
  00ccb	5e		 pop	 rsi
  00ccc	5d		 pop	 rbp
  00ccd	c3		 ret	 0

; 3058 :     Py_XDECREF(result);

$LN200@ast2obj_ex@2:
  00cce	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00cd2	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00cd8	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]

; 3059 :     return NULL;

  00cdd	33 c0		 xor	 eax, eax

; 3060 : }

  00cdf	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00ce3	5f		 pop	 rdi
  00ce4	5e		 pop	 rsi
  00ce5	5d		 pop	 rbp
  00ce6	c3		 ret	 0

; 3058 :     Py_XDECREF(result);

$LN195@ast2obj_ex@2:
  00ce7	48 8b cf	 mov	 rcx, rdi
  00cea	e8 00 00 00 00	 call	 Px_DecRef
$LN3@ast2obj_ex@2:

; 3059 :     return NULL;

  00cef	33 c0		 xor	 eax, eax
  00cf1	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]

; 3060 : }

  00cf6	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00cfa	5f		 pop	 rdi
  00cfb	5e		 pop	 rsi
  00cfc	5d		 pop	 rbp
  00cfd	c3		 ret	 0
  00cfe	66 90		 npad	 2
$LN204@ast2obj_ex@2:
  00d00	00 00 00 00	 DD	 $LN168@ast2obj_ex@2
  00d04	00 00 00 00	 DD	 $LN162@ast2obj_ex@2
  00d08	00 00 00 00	 DD	 $LN154@ast2obj_ex@2
  00d0c	00 00 00 00	 DD	 $LN148@ast2obj_ex@2
  00d10	00 00 00 00	 DD	 $LN142@ast2obj_ex@2
  00d14	00 00 00 00	 DD	 $LN134@ast2obj_ex@2
  00d18	00 00 00 00	 DD	 $LN128@ast2obj_ex@2
  00d1c	00 00 00 00	 DD	 $LN124@ast2obj_ex@2
  00d20	00 00 00 00	 DD	 $LN118@ast2obj_ex@2
  00d24	00 00 00 00	 DD	 $LN112@ast2obj_ex@2
  00d28	00 00 00 00	 DD	 $LN104@ast2obj_ex@2
  00d2c	00 00 00 00	 DD	 $LN98@ast2obj_ex@2
  00d30	00 00 00 00	 DD	 $LN94@ast2obj_ex@2
  00d34	00 00 00 00	 DD	 $LN90@ast2obj_ex@2
  00d38	00 00 00 00	 DD	 $LN78@ast2obj_ex@2
  00d3c	00 00 00 00	 DD	 $LN66@ast2obj_ex@2
  00d40	00 00 00 00	 DD	 $LN62@ast2obj_ex@2
  00d44	00 00 00 00	 DD	 $LN58@ast2obj_ex@2
  00d48	00 00 00 00	 DD	 $LN54@ast2obj_ex@2
  00d4c	00 00 00 00	 DD	 $LN52@ast2obj_ex@2
  00d50	00 00 00 00	 DD	 $LN44@ast2obj_ex@2
  00d54	00 00 00 00	 DD	 $LN36@ast2obj_ex@2
  00d58	00 00 00 00	 DD	 $LN30@ast2obj_ex@2
  00d5c	00 00 00 00	 DD	 $LN24@ast2obj_ex@2
  00d60	00 00 00 00	 DD	 $LN18@ast2obj_ex@2
ast2obj_expr ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$ast2obj_excepthandler DD imagerel ast2obj_excepthandler
	DD	imagerel ast2obj_excepthandler+712
	DD	imagerel $unwind$ast2obj_excepthandler
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_excepthandler DD 087701H
	DD	095477H
	DD	083472H
	DD	0a640aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\python-ast.c
xdata	ENDS
;	COMDAT ast2obj_excepthandler
_TEXT	SEGMENT
_o$ = 64
ast2obj_excepthandler PROC				; COMDAT

; 3301 : {

  00000	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 3302 :     excepthandler_ty o = (excepthandler_ty)_o;
; 3303 :     PyObject *result = NULL, *value = NULL;

  0000a	33 ff		 xor	 edi, edi
  0000c	48 8b f1	 mov	 rsi, rcx

; 3304 :     if (!o) {

  0000f	48 85 c9	 test	 rcx, rcx
  00012	75 57		 jne	 SHORT $LN23@ast2obj_ex@3

; 3305 :         Py_INCREF(Py_None);

  00014	e8 00 00 00 00	 call	 _Py_PXCTX
  00019	85 c0		 test	 eax, eax
  0001b	75 3c		 jne	 SHORT $LN27@ast2obj_ex@3
  0001d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00032	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00038	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00040	e8 00 00 00 00	 call	 _PyParallel_Guard
  00045	85 c0		 test	 eax, eax
  00047	75 09		 jne	 SHORT $LN26@ast2obj_ex@3
  00049	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00050	74 07		 je	 SHORT $LN27@ast2obj_ex@3
$LN26@ast2obj_ex@3:
  00052	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN27@ast2obj_ex@3:

; 3306 :         return Py_None;

  00059	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 3345 : }

  00060	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00065	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00069	5f		 pop	 rdi
  0006a	c3		 ret	 0
$LN23@ast2obj_ex@3:

; 3307 :     }
; 3308 : 
; 3309 :     switch (o->kind) {

  0006b	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0006d	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00072	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp
  00077	ff c9		 dec	 ecx
  00079	0f 85 e2 00 00
	00		 jne	 $LN21@ast2obj_ex@3

; 3310 :     case ExceptHandler_kind:
; 3311 :         result = PyType_GenericNew(ExceptHandler_type, NULL, NULL);

  0007f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ExceptHandler_type
  00086	45 33 c0	 xor	 r8d, r8d
  00089	33 d2		 xor	 edx, edx
  0008b	e8 00 00 00 00	 call	 PyType_GenericNew
  00090	48 8b f8	 mov	 rdi, rax

; 3312 :         if (!result) goto failed;

  00093	48 85 c0	 test	 rax, rax
  00096	0f 84 15 02 00
	00		 je	 $LN3@ast2obj_ex@3

; 3313 :         value = ast2obj_expr(o->v.ExceptHandler.type);

  0009c	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  000a0	e8 00 00 00 00	 call	 ast2obj_expr
  000a5	48 8b d8	 mov	 rbx, rax

; 3314 :         if (!value) goto failed;

  000a8	48 85 c0	 test	 rax, rax
  000ab	0f 84 96 01 00
	00		 je	 $LN7@ast2obj_ex@3

; 3315 :         if (_PyObject_SetAttrId(result, &PyId_type, value) == -1)

  000b1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  000b7	65 48 8b 0c 25
	58 00 00 00	 mov	 rcx, QWORD PTR gs:88
  000c0	4c 8b c0	 mov	 r8, rax
  000c3	48 8b 2c d1	 mov	 rbp, QWORD PTR [rcx+rdx*8]
  000c7	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_type
  000cc	48 8b cf	 mov	 rcx, rdi
  000cf	48 03 d5	 add	 rdx, rbp
  000d2	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  000d7	83 f8 ff	 cmp	 eax, -1
  000da	0f 84 02 01 00
	00		 je	 $failed$24299

; 3316 :             goto failed;
; 3317 :         Py_DECREF(value);

  000e0	48 8b cb	 mov	 rcx, rbx
  000e3	e8 00 00 00 00	 call	 _Py_DecRef

; 3318 :         value = ast2obj_identifier(o->v.ExceptHandler.name);

  000e8	48 8b 4e 10	 mov	 rcx, QWORD PTR [rsi+16]
  000ec	e8 00 00 00 00	 call	 ast2obj_object
  000f1	48 8b d8	 mov	 rbx, rax

; 3319 :         if (!value) goto failed;

  000f4	48 85 c0	 test	 rax, rax
  000f7	0f 84 4a 01 00
	00		 je	 $LN7@ast2obj_ex@3

; 3320 :         if (_PyObject_SetAttrId(result, &PyId_name, value) == -1)

  000fd	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_name
  00102	4c 8b c0	 mov	 r8, rax
  00105	48 8b cf	 mov	 rcx, rdi
  00108	48 03 d5	 add	 rdx, rbp
  0010b	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00110	83 f8 ff	 cmp	 eax, -1
  00113	0f 84 c9 00 00
	00		 je	 $failed$24299

; 3321 :             goto failed;
; 3322 :         Py_DECREF(value);

  00119	48 8b cb	 mov	 rcx, rbx
  0011c	e8 00 00 00 00	 call	 _Py_DecRef

; 3323 :         value = ast2obj_list(o->v.ExceptHandler.body, ast2obj_stmt);

  00121	48 8b 4e 18	 mov	 rcx, QWORD PTR [rsi+24]
  00125	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_stmt
  0012c	e8 00 00 00 00	 call	 ast2obj_list
  00131	48 8b d8	 mov	 rbx, rax

; 3324 :         if (!value) goto failed;

  00134	48 85 c0	 test	 rax, rax
  00137	0f 84 0a 01 00
	00		 je	 $LN7@ast2obj_ex@3

; 3325 :         if (_PyObject_SetAttrId(result, &PyId_body, value) == -1)

  0013d	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_body
  00142	4c 8b c0	 mov	 r8, rax
  00145	48 8b cf	 mov	 rcx, rdi
  00148	48 03 d5	 add	 rdx, rbp
  0014b	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00150	83 f8 ff	 cmp	 eax, -1
  00153	0f 84 89 00 00
	00		 je	 $failed$24299

; 3326 :             goto failed;
; 3327 :         Py_DECREF(value);

  00159	48 8b cb	 mov	 rcx, rbx
  0015c	e8 00 00 00 00	 call	 _Py_DecRef
$LN21@ast2obj_ex@3:

; 3328 :         break;
; 3329 :     }
; 3330 :     value = ast2obj_int(o->lineno);

  00161	8b 4e 20	 mov	 ecx, DWORD PTR [rsi+32]
  00164	e8 00 00 00 00	 call	 ast2obj_int
  00169	48 8b d8	 mov	 rbx, rax

; 3331 :     if (!value) goto failed;

  0016c	48 85 c0	 test	 rax, rax
  0016f	0f 84 d2 00 00
	00		 je	 $LN7@ast2obj_ex@3

; 3332 :     if (_PyObject_SetAttrId(result, &PyId_lineno, value) < 0)

  00175	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0017b	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00184	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_lineno
  00189	48 8b 2c c8	 mov	 rbp, QWORD PTR [rax+rcx*8]
  0018d	4c 8b c3	 mov	 r8, rbx
  00190	48 8b cf	 mov	 rcx, rdi
  00193	48 03 d5	 add	 rdx, rbp
  00196	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0019b	85 c0		 test	 eax, eax
  0019d	78 43		 js	 SHORT $failed$24299

; 3333 :         goto failed;
; 3334 :     Py_DECREF(value);

  0019f	48 8b cb	 mov	 rcx, rbx
  001a2	e8 00 00 00 00	 call	 _Py_DecRef

; 3335 :     value = ast2obj_int(o->col_offset);

  001a7	8b 4e 24	 mov	 ecx, DWORD PTR [rsi+36]
  001aa	e8 00 00 00 00	 call	 ast2obj_int
  001af	48 8b d8	 mov	 rbx, rax

; 3336 :     if (!value) goto failed;

  001b2	48 85 c0	 test	 rax, rax
  001b5	0f 84 8c 00 00
	00		 je	 $LN7@ast2obj_ex@3

; 3337 :     if (_PyObject_SetAttrId(result, &PyId_col_offset, value) < 0)

  001bb	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_col_offset
  001c0	4c 8b c0	 mov	 r8, rax
  001c3	48 8b cf	 mov	 rcx, rdi
  001c6	48 03 d5	 add	 rdx, rbp
  001c9	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  001ce	85 c0		 test	 eax, eax
  001d0	78 10		 js	 SHORT $failed$24299

; 3338 :         goto failed;
; 3339 :     Py_DECREF(value);

  001d2	48 8b cb	 mov	 rcx, rbx
  001d5	e8 00 00 00 00	 call	 _Py_DecRef

; 3340 :     return result;

  001da	48 8b c7	 mov	 rax, rdi
  001dd	e9 d1 00 00 00	 jmp	 $LN53@ast2obj_ex@3
$failed$24299:

; 3341 : failed:
; 3342 :     Py_XDECREF(value);

  001e2	e8 00 00 00 00	 call	 _Py_PXCTX
  001e7	85 c0		 test	 eax, eax
  001e9	75 5c		 jne	 SHORT $LN7@ast2obj_ex@3
  001eb	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  001ef	a8 20		 test	 al, 32			; 00000020H
  001f1	75 4c		 jne	 SHORT $LN34@ast2obj_ex@3
  001f3	84 c0		 test	 al, al
  001f5	78 48		 js	 SHORT $LN34@ast2obj_ex@3
  001f7	a8 02		 test	 al, 2
  001f9	75 4c		 jne	 SHORT $LN7@ast2obj_ex@3
  001fb	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  001ff	75 46		 jne	 SHORT $LN7@ast2obj_ex@3
  00201	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00208	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0020f	4c 8b cb	 mov	 r9, rbx
  00212	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00218	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00220	e8 00 00 00 00	 call	 _PyParallel_Guard
  00225	48 8b cb	 mov	 rcx, rbx
  00228	85 c0		 test	 eax, eax
  0022a	74 07		 je	 SHORT $LN39@ast2obj_ex@3
  0022c	e8 00 00 00 00	 call	 _Px_Dealloc
  00231	eb 14		 jmp	 SHORT $LN7@ast2obj_ex@3
$LN39@ast2obj_ex@3:
  00233	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00237	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0023d	eb 08		 jmp	 SHORT $LN7@ast2obj_ex@3
$LN34@ast2obj_ex@3:
  0023f	48 8b cb	 mov	 rcx, rbx
  00242	e8 00 00 00 00	 call	 Px_DecRef
$LN7@ast2obj_ex@3:

; 3343 :     Py_XDECREF(result);

  00247	48 85 ff	 test	 rdi, rdi
  0024a	74 65		 je	 SHORT $LN3@ast2obj_ex@3
  0024c	e8 00 00 00 00	 call	 _Py_PXCTX
  00251	85 c0		 test	 eax, eax
  00253	75 5c		 jne	 SHORT $LN3@ast2obj_ex@3
  00255	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00259	a8 20		 test	 al, 32			; 00000020H
  0025b	75 4c		 jne	 SHORT $LN45@ast2obj_ex@3
  0025d	84 c0		 test	 al, al
  0025f	78 48		 js	 SHORT $LN45@ast2obj_ex@3
  00261	a8 02		 test	 al, 2
  00263	75 4c		 jne	 SHORT $LN3@ast2obj_ex@3
  00265	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00269	75 46		 jne	 SHORT $LN3@ast2obj_ex@3
  0026b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00272	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00279	4c 8b cf	 mov	 r9, rdi
  0027c	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00282	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0028a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0028f	48 8b cf	 mov	 rcx, rdi
  00292	85 c0		 test	 eax, eax
  00294	74 07		 je	 SHORT $LN50@ast2obj_ex@3
  00296	e8 00 00 00 00	 call	 _Px_Dealloc
  0029b	eb 14		 jmp	 SHORT $LN3@ast2obj_ex@3
$LN50@ast2obj_ex@3:
  0029d	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  002a1	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  002a7	eb 08		 jmp	 SHORT $LN3@ast2obj_ex@3
$LN45@ast2obj_ex@3:
  002a9	48 8b cf	 mov	 rcx, rdi
  002ac	e8 00 00 00 00	 call	 Px_DecRef
$LN3@ast2obj_ex@3:

; 3344 :     return NULL;

  002b1	33 c0		 xor	 eax, eax
$LN53@ast2obj_ex@3:
  002b3	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  002b8	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]

; 3345 : }

  002bd	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  002c2	48 83 c4 30	 add	 rsp, 48			; 00000030H
  002c6	5f		 pop	 rdi
  002c7	c3		 ret	 0
ast2obj_excepthandler ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$ast2obj_withitem DD imagerel ast2obj_withitem
	DD	imagerel ast2obj_withitem+108
	DD	imagerel $unwind$ast2obj_withitem
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$ast2obj_withitem DD imagerel ast2obj_withitem+108
	DD	imagerel ast2obj_withitem+137
	DD	imagerel $chain$0$ast2obj_withitem
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$ast2obj_withitem DD imagerel ast2obj_withitem+137
	DD	imagerel ast2obj_withitem+307
	DD	imagerel $chain$4$ast2obj_withitem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$ast2obj_withitem DD 060d21H
	DD	09540dH
	DD	083408H
	DD	0a7400H
	DD	imagerel ast2obj_withitem
	DD	imagerel ast2obj_withitem+108
	DD	imagerel $unwind$ast2obj_withitem
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$ast2obj_withitem DD 020521H
	DD	0a7405H
	DD	imagerel ast2obj_withitem
	DD	imagerel ast2obj_withitem+108
	DD	imagerel $unwind$ast2obj_withitem
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_withitem DD 020601H
	DD	060025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\python-ast.c
xdata	ENDS
;	COMDAT ast2obj_withitem
_TEXT	SEGMENT
_o$ = 64
ast2obj_withitem PROC					; COMDAT

; 3495 : {

  00000	40 56		 push	 rsi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b f1	 mov	 rsi, rcx

; 3496 :     withitem_ty o = (withitem_ty)_o;
; 3497 :     PyObject *result = NULL, *value = NULL;
; 3498 :     if (!o) {

  00009	48 85 c9	 test	 rcx, rcx
  0000c	75 52		 jne	 SHORT $LN14@ast2obj_wi

; 3499 :         Py_INCREF(Py_None);

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	75 3c		 jne	 SHORT $LN18@ast2obj_wi
  00017	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0002c	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00032	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0003a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003f	85 c0		 test	 eax, eax
  00041	75 09		 jne	 SHORT $LN17@ast2obj_wi
  00043	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0004a	74 07		 je	 SHORT $LN18@ast2obj_wi
$LN17@ast2obj_wi:
  0004c	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN18@ast2obj_wi:

; 3500 :         return Py_None;

  00053	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 3520 : }

  0005a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005e	5e		 pop	 rsi
  0005f	c3		 ret	 0
$LN14@ast2obj_wi:

; 3501 :     }
; 3502 : 
; 3503 :     result = PyType_GenericNew(withitem_type, NULL, NULL);

  00060	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR withitem_type
  00067	45 33 c0	 xor	 r8d, r8d
  0006a	33 d2		 xor	 edx, edx
  0006c	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  00071	e8 00 00 00 00	 call	 PyType_GenericNew
  00076	48 8b f8	 mov	 rdi, rax

; 3504 :     if (!result) return NULL;

  00079	48 85 c0	 test	 rax, rax
  0007c	75 0b		 jne	 SHORT $LN13@ast2obj_wi
  0007e	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 3520 : }

  00083	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00087	5e		 pop	 rsi
  00088	c3		 ret	 0
$LN13@ast2obj_wi:

; 3505 :     value = ast2obj_expr(o->context_expr);

  00089	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  0008c	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00091	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp
  00096	e8 00 00 00 00	 call	 ast2obj_expr
  0009b	48 8b d8	 mov	 rbx, rax

; 3506 :     if (!value) goto failed;

  0009e	48 85 c0	 test	 rax, rax
  000a1	74 71		 je	 SHORT $LN7@ast2obj_wi

; 3507 :     if (_PyObject_SetAttrId(result, &PyId_context_expr, value) == -1)

  000a3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  000a9	65 48 8b 0c 25
	58 00 00 00	 mov	 rcx, QWORD PTR gs:88
  000b2	4c 8b c0	 mov	 r8, rax
  000b5	48 8b 2c d1	 mov	 rbp, QWORD PTR [rcx+rdx*8]
  000b9	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_context_expr
  000be	48 8b cf	 mov	 rcx, rdi
  000c1	48 03 d5	 add	 rdx, rbp
  000c4	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  000c9	83 f8 ff	 cmp	 eax, -1
  000cc	74 3e		 je	 SHORT $failed$24492

; 3508 :         goto failed;
; 3509 :     Py_DECREF(value);

  000ce	48 8b cb	 mov	 rcx, rbx
  000d1	e8 00 00 00 00	 call	 _Py_DecRef

; 3510 :     value = ast2obj_expr(o->optional_vars);

  000d6	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  000da	e8 00 00 00 00	 call	 ast2obj_expr
  000df	48 8b d8	 mov	 rbx, rax

; 3511 :     if (!value) goto failed;

  000e2	48 85 c0	 test	 rax, rax
  000e5	74 2d		 je	 SHORT $LN7@ast2obj_wi

; 3512 :     if (_PyObject_SetAttrId(result, &PyId_optional_vars, value) == -1)

  000e7	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_optional_vars
  000ec	4c 8b c0	 mov	 r8, rax
  000ef	48 8b cf	 mov	 rcx, rdi
  000f2	48 03 d5	 add	 rdx, rbp
  000f5	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  000fa	83 f8 ff	 cmp	 eax, -1
  000fd	74 0d		 je	 SHORT $failed$24492

; 3513 :         goto failed;
; 3514 :     Py_DECREF(value);

  000ff	48 8b cb	 mov	 rcx, rbx
  00102	e8 00 00 00 00	 call	 _Py_DecRef

; 3515 :     return result;

  00107	48 8b c7	 mov	 rax, rdi
  0010a	eb 12		 jmp	 SHORT $LN23@ast2obj_wi
$failed$24492:

; 3516 : failed:
; 3517 :     Py_XDECREF(value);

  0010c	48 8b cb	 mov	 rcx, rbx
  0010f	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@ast2obj_wi:

; 3518 :     Py_XDECREF(result);

  00114	48 8b cf	 mov	 rcx, rdi
  00117	e8 00 00 00 00	 call	 _Py_DecRef

; 3519 :     return NULL;

  0011c	33 c0		 xor	 eax, eax
$LN23@ast2obj_wi:
  0011e	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00123	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00128	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 3520 : }

  0012d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00131	5e		 pop	 rsi
  00132	c3		 ret	 0
ast2obj_withitem ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@JMPPCFJN@required?5field?5?$CClineno?$CC?5missing?5@ ; `string'
PUBLIC	??_C@_0CO@IEOFEKON@required?5field?5?$CCcol_offset?$CC?5miss@ ; `string'
PUBLIC	??_C@_0CH@JDNNBGGD@expected?5some?5sort?5of?5expr?0?5but?5@ ; `string'
PUBLIC	??_C@_0CJ@BCPLDOGM@required?5field?5?$CCelts?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CI@KLMOMMFA@required?5field?5?$CCctx?$CC?5missing?5fro@ ; `string'
PUBLIC	??_C@_0DA@HDHPGNPM@Tuple?5field?5?$CCelts?$CC?5must?5be?5a?5lis@ ; `string'
PUBLIC	??_C@_0CI@LLANLLOK@required?5field?5?$CCelts?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CH@OICLIOJM@required?5field?5?$CCctx?$CC?5missing?5fro@ ; `string'
PUBLIC	??_C@_0CP@NOICNLCE@List?5field?5?$CCelts?$CC?5must?5be?5a?5list@ ; `string'
PUBLIC	??_C@_0CG@KDGIGLGJ@required?5field?5?$CCid?$CC?5missing?5from@ ; `string'
PUBLIC	??_C@_0CH@BCDOFIHJ@required?5field?5?$CCctx?$CC?5missing?5fro@ ; `string'
PUBLIC	??_C@_0CM@HHGGPHKN@required?5field?5?$CCvalue?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_0CK@BBMCEKDP@required?5field?5?$CCctx?$CC?5missing?5fro@ ; `string'
PUBLIC	??_C@_0CO@PAHBFMLK@required?5field?5?$CCvalue?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_0CO@ECGILCDO@required?5field?5?$CCslice?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_0CM@GNGBNLH@required?5field?5?$CCctx?$CC?5missing?5fro@ ; `string'
PUBLIC	??_C@_0CO@FHJGPNDL@required?5field?5?$CCvalue?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_0CN@BLIDGIHB@required?5field?5?$CCattr?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CM@KBDBLMDG@required?5field?5?$CCctx?$CC?5missing?5fro@ ; `string'
PUBLIC	??_C@_0CG@INBJMMPB@required?5field?5?$CCs?$CC?5missing?5from?5@ ; `string'
PUBLIC	??_C@_0CE@ELPANCFA@required?5field?5?$CCs?$CC?5missing?5from?5@ ; `string'
PUBLIC	??_C@_0CE@HDIMJEDD@required?5field?5?$CCn?$CC?5missing?5from?5@ ; `string'
PUBLIC	??_C@_0CI@NOCOEJHL@required?5field?5?$CCfunc?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CI@HMAALGIO@required?5field?5?$CCargs?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CM@CAEPCCCE@required?5field?5?$CCkeywords?$CC?5missin@ ; `string'
PUBLIC	??_C@_0DD@OIKFBKNP@Call?5field?5?$CCkeywords?$CC?5must?5be?5a?5@ ; `string'
PUBLIC	??_C@_0CP@BJIMJFDA@Call?5field?5?$CCargs?$CC?5must?5be?5a?5list@ ; `string'
PUBLIC	??_C@_0CL@IAGPHPKA@required?5field?5?$CCleft?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CK@EJGPDIPB@required?5field?5?$CCops?$CC?5missing?5fro@ ; `string'
PUBLIC	??_C@_0DC@OKCKOOGB@required?5field?5?$CCcomparators?$CC?5mis@ ; `string'
PUBLIC	??_C@_0DJ@BIJCFAHA@Compare?5field?5?$CCcomparators?$CC?5must@ ; `string'
PUBLIC	??_C@_0DB@LPCFPBLI@Compare?5field?5?$CCops?$CC?5must?5be?5a?5li@ ; `string'
PUBLIC	??_C@_0CO@HEDCCLBN@required?5field?5?$CCvalue?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_0CP@HEOIHGCL@required?5field?5?$CCelt?$CC?5missing?5fro@ ; `string'
PUBLIC	??_C@_0DG@FFMKMNIB@required?5field?5?$CCgenerators?$CC?5miss@ ; `string'
PUBLIC	??_C@_0DN@BPOKNM@GeneratorExp?5field?5?$CCgenerators?$CC?5@ ; `string'
PUBLIC	??_C@_0CL@CBPKJOEB@required?5field?5?$CCkey?$CC?5missing?5fro@ ; `string'
PUBLIC	??_C@_0CN@BFNLHDPP@required?5field?5?$CCvalue?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_0DC@CAIFLNII@required?5field?5?$CCgenerators?$CC?5miss@ ; `string'
PUBLIC	??_C@_0DJ@CAGFCIFA@DictComp?5field?5?$CCgenerators?$CC?5must@ ; `string'
PUBLIC	??_C@_0CK@GNDGBNHN@required?5field?5?$CCelt?$CC?5missing?5fro@ ; `string'
PUBLIC	??_C@_0DB@BADNOGEO@required?5field?5?$CCgenerators?$CC?5miss@ ; `string'
PUBLIC	??_C@_0DI@MNDNMCPF@SetComp?5field?5?$CCgenerators?$CC?5must?5@ ; `string'
PUBLIC	??_C@_0CL@EDCOOJLD@required?5field?5?$CCelt?$CC?5missing?5fro@ ; `string'
PUBLIC	??_C@_0DC@PMIDIDFO@required?5field?5?$CCgenerators?$CC?5miss@ ; `string'
PUBLIC	??_C@_0DJ@KIJLIALD@ListComp?5field?5?$CCgenerators?$CC?5must@ ; `string'
PUBLIC	??_C@_0CH@BPLFHEPK@required?5field?5?$CCelts?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CO@KGPNPPNE@Set?5field?5?$CCelts?$CC?5must?5be?5a?5list?0@ ; `string'
PUBLIC	??_C@_0CI@JMGLEFIH@required?5field?5?$CCkeys?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CK@CCGGNJEC@required?5field?5?$CCvalues?$CC?5missing?5@ ; `string'
PUBLIC	??_C@_0DB@GGCPIMOJ@Dict?5field?5?$CCvalues?$CC?5must?5be?5a?5li@ ; `string'
PUBLIC	??_C@_0CP@EGMKHIJH@Dict?5field?5?$CCkeys?$CC?5must?5be?5a?5list@ ; `string'
PUBLIC	??_C@_0CJ@NMEIGPEH@required?5field?5?$CCtest?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CJ@GBLDBLBM@required?5field?5?$CCbody?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CL@DNEAKDOO@required?5field?5?$CCorelse?$CC?5missing?5@ ; `string'
PUBLIC	??_C@_0CK@JPMNMIAM@required?5field?5?$CCargs?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CK@PCIBHCDP@required?5field?5?$CCbody?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CJ@MPIFKMKO@required?5field?5?$CCop?$CC?5missing?5from@ ; `string'
PUBLIC	??_C@_0CO@CAINBGKB@required?5field?5?$CCoperand?$CC?5missing@ ; `string'
PUBLIC	??_C@_0CJ@IMIJKKKN@required?5field?5?$CCleft?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CH@GDLDIEDI@required?5field?5?$CCop?$CC?5missing?5from@ ; `string'
PUBLIC	??_C@_0CK@CPLHPBCE@required?5field?5?$CCright?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_0CI@HBNHBKDM@required?5field?5?$CCop?$CC?5missing?5from@ ; `string'
PUBLIC	??_C@_0CM@IMGNJCMM@required?5field?5?$CCvalues?$CC?5missing?5@ ; `string'
PUBLIC	??_C@_0DD@BPOBLELF@BoolOp?5field?5?$CCvalues?$CC?5must?5be?5a?5@ ; `string'
PUBLIC	??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@		; `string'
EXTRN	asdl_int_seq_new:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_expr DD imagerel obj2ast_expr
	DD	imagerel obj2ast_expr+10341
	DD	imagerel $unwind$obj2ast_expr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_expr DD 075101H
	DD	0243451H
	DD	01e0114H
	DD	060077008H
	DD	05006H
xdata	ENDS
;	COMDAT ??_C@_0CK@JMPPCFJN@required?5field?5?$CClineno?$CC?5missing?5@
CONST	SEGMENT
??_C@_0CK@JMPPCFJN@required?5field?5?$CClineno?$CC?5missing?5@ DB 'requir'
	DB	'ed field "lineno" missing from expr', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@IEOFEKON@required?5field?5?$CCcol_offset?$CC?5miss@
CONST	SEGMENT
??_C@_0CO@IEOFEKON@required?5field?5?$CCcol_offset?$CC?5miss@ DB 'require'
	DB	'd field "col_offset" missing from expr', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@JDNNBGGD@expected?5some?5sort?5of?5expr?0?5but?5@
CONST	SEGMENT
??_C@_0CH@JDNNBGGD@expected?5some?5sort?5of?5expr?0?5but?5@ DB 'expected '
	DB	'some sort of expr, but got %R', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@BCPLDOGM@required?5field?5?$CCelts?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CJ@BCPLDOGM@required?5field?5?$CCelts?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "elts" missing from Tuple', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KLMOMMFA@required?5field?5?$CCctx?$CC?5missing?5fro@
CONST	SEGMENT
??_C@_0CI@KLMOMMFA@required?5field?5?$CCctx?$CC?5missing?5fro@ DB 'requir'
	DB	'ed field "ctx" missing from Tuple', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@HDHPGNPM@Tuple?5field?5?$CCelts?$CC?5must?5be?5a?5lis@
CONST	SEGMENT
??_C@_0DA@HDHPGNPM@Tuple?5field?5?$CCelts?$CC?5must?5be?5a?5lis@ DB 'Tupl'
	DB	'e field "elts" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@LLANLLOK@required?5field?5?$CCelts?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CI@LLANLLOK@required?5field?5?$CCelts?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "elts" missing from List', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@OICLIOJM@required?5field?5?$CCctx?$CC?5missing?5fro@
CONST	SEGMENT
??_C@_0CH@OICLIOJM@required?5field?5?$CCctx?$CC?5missing?5fro@ DB 'requir'
	DB	'ed field "ctx" missing from List', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@NOICNLCE@List?5field?5?$CCelts?$CC?5must?5be?5a?5list@
CONST	SEGMENT
??_C@_0CP@NOICNLCE@List?5field?5?$CCelts?$CC?5must?5be?5a?5list@ DB 'List'
	DB	' field "elts" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@KDGIGLGJ@required?5field?5?$CCid?$CC?5missing?5from@
CONST	SEGMENT
??_C@_0CG@KDGIGLGJ@required?5field?5?$CCid?$CC?5missing?5from@ DB 'requir'
	DB	'ed field "id" missing from Name', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@BCDOFIHJ@required?5field?5?$CCctx?$CC?5missing?5fro@
CONST	SEGMENT
??_C@_0CH@BCDOFIHJ@required?5field?5?$CCctx?$CC?5missing?5fro@ DB 'requir'
	DB	'ed field "ctx" missing from Name', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@HHGGPHKN@required?5field?5?$CCvalue?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CM@HHGGPHKN@required?5field?5?$CCvalue?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "value" missing from Starred', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@BBMCEKDP@required?5field?5?$CCctx?$CC?5missing?5fro@
CONST	SEGMENT
??_C@_0CK@BBMCEKDP@required?5field?5?$CCctx?$CC?5missing?5fro@ DB 'requir'
	DB	'ed field "ctx" missing from Starred', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@PAHBFMLK@required?5field?5?$CCvalue?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CO@PAHBFMLK@required?5field?5?$CCvalue?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "value" missing from Subscript', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@ECGILCDO@required?5field?5?$CCslice?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CO@ECGILCDO@required?5field?5?$CCslice?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "slice" missing from Subscript', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@GNGBNLH@required?5field?5?$CCctx?$CC?5missing?5fro@
CONST	SEGMENT
??_C@_0CM@GNGBNLH@required?5field?5?$CCctx?$CC?5missing?5fro@ DB 'require'
	DB	'd field "ctx" missing from Subscript', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@FHJGPNDL@required?5field?5?$CCvalue?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CO@FHJGPNDL@required?5field?5?$CCvalue?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "value" missing from Attribute', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@BLIDGIHB@required?5field?5?$CCattr?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CN@BLIDGIHB@required?5field?5?$CCattr?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "attr" missing from Attribute', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@KBDBLMDG@required?5field?5?$CCctx?$CC?5missing?5fro@
CONST	SEGMENT
??_C@_0CM@KBDBLMDG@required?5field?5?$CCctx?$CC?5missing?5fro@ DB 'requir'
	DB	'ed field "ctx" missing from Attribute', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@INBJMMPB@required?5field?5?$CCs?$CC?5missing?5from?5@
CONST	SEGMENT
??_C@_0CG@INBJMMPB@required?5field?5?$CCs?$CC?5missing?5from?5@ DB 'requi'
	DB	'red field "s" missing from Bytes', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@ELPANCFA@required?5field?5?$CCs?$CC?5missing?5from?5@
CONST	SEGMENT
??_C@_0CE@ELPANCFA@required?5field?5?$CCs?$CC?5missing?5from?5@ DB 'requi'
	DB	'red field "s" missing from Str', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@HDIMJEDD@required?5field?5?$CCn?$CC?5missing?5from?5@
CONST	SEGMENT
??_C@_0CE@HDIMJEDD@required?5field?5?$CCn?$CC?5missing?5from?5@ DB 'requi'
	DB	'red field "n" missing from Num', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@NOCOEJHL@required?5field?5?$CCfunc?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CI@NOCOEJHL@required?5field?5?$CCfunc?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "func" missing from Call', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@HMAALGIO@required?5field?5?$CCargs?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CI@HMAALGIO@required?5field?5?$CCargs?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "args" missing from Call', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@CAEPCCCE@required?5field?5?$CCkeywords?$CC?5missin@
CONST	SEGMENT
??_C@_0CM@CAEPCCCE@required?5field?5?$CCkeywords?$CC?5missin@ DB 'require'
	DB	'd field "keywords" missing from Call', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@OIKFBKNP@Call?5field?5?$CCkeywords?$CC?5must?5be?5a?5@
CONST	SEGMENT
??_C@_0DD@OIKFBKNP@Call?5field?5?$CCkeywords?$CC?5must?5be?5a?5@ DB 'Call'
	DB	' field "keywords" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@BJIMJFDA@Call?5field?5?$CCargs?$CC?5must?5be?5a?5list@
CONST	SEGMENT
??_C@_0CP@BJIMJFDA@Call?5field?5?$CCargs?$CC?5must?5be?5a?5list@ DB 'Call'
	DB	' field "args" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@IAGPHPKA@required?5field?5?$CCleft?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CL@IAGPHPKA@required?5field?5?$CCleft?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "left" missing from Compare', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@EJGPDIPB@required?5field?5?$CCops?$CC?5missing?5fro@
CONST	SEGMENT
??_C@_0CK@EJGPDIPB@required?5field?5?$CCops?$CC?5missing?5fro@ DB 'requir'
	DB	'ed field "ops" missing from Compare', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@OKCKOOGB@required?5field?5?$CCcomparators?$CC?5mis@
CONST	SEGMENT
??_C@_0DC@OKCKOOGB@required?5field?5?$CCcomparators?$CC?5mis@ DB 'require'
	DB	'd field "comparators" missing from Compare', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@BIJCFAHA@Compare?5field?5?$CCcomparators?$CC?5must@
CONST	SEGMENT
??_C@_0DJ@BIJCFAHA@Compare?5field?5?$CCcomparators?$CC?5must@ DB 'Compare'
	DB	' field "comparators" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@LPCFPBLI@Compare?5field?5?$CCops?$CC?5must?5be?5a?5li@
CONST	SEGMENT
??_C@_0DB@LPCFPBLI@Compare?5field?5?$CCops?$CC?5must?5be?5a?5li@ DB 'Comp'
	DB	'are field "ops" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@HEDCCLBN@required?5field?5?$CCvalue?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CO@HEDCCLBN@required?5field?5?$CCvalue?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "value" missing from YieldFrom', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@HEOIHGCL@required?5field?5?$CCelt?$CC?5missing?5fro@
CONST	SEGMENT
??_C@_0CP@HEOIHGCL@required?5field?5?$CCelt?$CC?5missing?5fro@ DB 'requir'
	DB	'ed field "elt" missing from GeneratorExp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@FFMKMNIB@required?5field?5?$CCgenerators?$CC?5miss@
CONST	SEGMENT
??_C@_0DG@FFMKMNIB@required?5field?5?$CCgenerators?$CC?5miss@ DB 'require'
	DB	'd field "generators" missing from GeneratorExp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@BPOKNM@GeneratorExp?5field?5?$CCgenerators?$CC?5@
CONST	SEGMENT
??_C@_0DN@BPOKNM@GeneratorExp?5field?5?$CCgenerators?$CC?5@ DB 'Generator'
	DB	'Exp field "generators" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@CBPKJOEB@required?5field?5?$CCkey?$CC?5missing?5fro@
CONST	SEGMENT
??_C@_0CL@CBPKJOEB@required?5field?5?$CCkey?$CC?5missing?5fro@ DB 'requir'
	DB	'ed field "key" missing from DictComp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@BFNLHDPP@required?5field?5?$CCvalue?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CN@BFNLHDPP@required?5field?5?$CCvalue?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "value" missing from DictComp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@CAIFLNII@required?5field?5?$CCgenerators?$CC?5miss@
CONST	SEGMENT
??_C@_0DC@CAIFLNII@required?5field?5?$CCgenerators?$CC?5miss@ DB 'require'
	DB	'd field "generators" missing from DictComp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@CAGFCIFA@DictComp?5field?5?$CCgenerators?$CC?5must@
CONST	SEGMENT
??_C@_0DJ@CAGFCIFA@DictComp?5field?5?$CCgenerators?$CC?5must@ DB 'DictCom'
	DB	'p field "generators" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@GNDGBNHN@required?5field?5?$CCelt?$CC?5missing?5fro@
CONST	SEGMENT
??_C@_0CK@GNDGBNHN@required?5field?5?$CCelt?$CC?5missing?5fro@ DB 'requir'
	DB	'ed field "elt" missing from SetComp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@BADNOGEO@required?5field?5?$CCgenerators?$CC?5miss@
CONST	SEGMENT
??_C@_0DB@BADNOGEO@required?5field?5?$CCgenerators?$CC?5miss@ DB 'require'
	DB	'd field "generators" missing from SetComp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@MNDNMCPF@SetComp?5field?5?$CCgenerators?$CC?5must?5@
CONST	SEGMENT
??_C@_0DI@MNDNMCPF@SetComp?5field?5?$CCgenerators?$CC?5must?5@ DB 'SetCom'
	DB	'p field "generators" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@EDCOOJLD@required?5field?5?$CCelt?$CC?5missing?5fro@
CONST	SEGMENT
??_C@_0CL@EDCOOJLD@required?5field?5?$CCelt?$CC?5missing?5fro@ DB 'requir'
	DB	'ed field "elt" missing from ListComp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@PMIDIDFO@required?5field?5?$CCgenerators?$CC?5miss@
CONST	SEGMENT
??_C@_0DC@PMIDIDFO@required?5field?5?$CCgenerators?$CC?5miss@ DB 'require'
	DB	'd field "generators" missing from ListComp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@KIJLIALD@ListComp?5field?5?$CCgenerators?$CC?5must@
CONST	SEGMENT
??_C@_0DJ@KIJLIALD@ListComp?5field?5?$CCgenerators?$CC?5must@ DB 'ListCom'
	DB	'p field "generators" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@BPLFHEPK@required?5field?5?$CCelts?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CH@BPLFHEPK@required?5field?5?$CCelts?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "elts" missing from Set', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@KGPNPPNE@Set?5field?5?$CCelts?$CC?5must?5be?5a?5list?0@
CONST	SEGMENT
??_C@_0CO@KGPNPPNE@Set?5field?5?$CCelts?$CC?5must?5be?5a?5list?0@ DB 'Set'
	DB	' field "elts" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@JMGLEFIH@required?5field?5?$CCkeys?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CI@JMGLEFIH@required?5field?5?$CCkeys?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "keys" missing from Dict', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@CCGGNJEC@required?5field?5?$CCvalues?$CC?5missing?5@
CONST	SEGMENT
??_C@_0CK@CCGGNJEC@required?5field?5?$CCvalues?$CC?5missing?5@ DB 'requir'
	DB	'ed field "values" missing from Dict', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@GGCPIMOJ@Dict?5field?5?$CCvalues?$CC?5must?5be?5a?5li@
CONST	SEGMENT
??_C@_0DB@GGCPIMOJ@Dict?5field?5?$CCvalues?$CC?5must?5be?5a?5li@ DB 'Dict'
	DB	' field "values" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@EGMKHIJH@Dict?5field?5?$CCkeys?$CC?5must?5be?5a?5list@
CONST	SEGMENT
??_C@_0CP@EGMKHIJH@Dict?5field?5?$CCkeys?$CC?5must?5be?5a?5list@ DB 'Dict'
	DB	' field "keys" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@NMEIGPEH@required?5field?5?$CCtest?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CJ@NMEIGPEH@required?5field?5?$CCtest?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "test" missing from IfExp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@GBLDBLBM@required?5field?5?$CCbody?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CJ@GBLDBLBM@required?5field?5?$CCbody?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "body" missing from IfExp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@DNEAKDOO@required?5field?5?$CCorelse?$CC?5missing?5@
CONST	SEGMENT
??_C@_0CL@DNEAKDOO@required?5field?5?$CCorelse?$CC?5missing?5@ DB 'requir'
	DB	'ed field "orelse" missing from IfExp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@JPMNMIAM@required?5field?5?$CCargs?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CK@JPMNMIAM@required?5field?5?$CCargs?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "args" missing from Lambda', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@PCIBHCDP@required?5field?5?$CCbody?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CK@PCIBHCDP@required?5field?5?$CCbody?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "body" missing from Lambda', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@MPIFKMKO@required?5field?5?$CCop?$CC?5missing?5from@
CONST	SEGMENT
??_C@_0CJ@MPIFKMKO@required?5field?5?$CCop?$CC?5missing?5from@ DB 'requir'
	DB	'ed field "op" missing from UnaryOp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@CAINBGKB@required?5field?5?$CCoperand?$CC?5missing@
CONST	SEGMENT
??_C@_0CO@CAINBGKB@required?5field?5?$CCoperand?$CC?5missing@ DB 'require'
	DB	'd field "operand" missing from UnaryOp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@IMIJKKKN@required?5field?5?$CCleft?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CJ@IMIJKKKN@required?5field?5?$CCleft?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "left" missing from BinOp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@GDLDIEDI@required?5field?5?$CCop?$CC?5missing?5from@
CONST	SEGMENT
??_C@_0CH@GDLDIEDI@required?5field?5?$CCop?$CC?5missing?5from@ DB 'requir'
	DB	'ed field "op" missing from BinOp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@CPLHPBCE@required?5field?5?$CCright?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CK@CPLHPBCE@required?5field?5?$CCright?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "right" missing from BinOp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@HBNHBKDM@required?5field?5?$CCop?$CC?5missing?5from@
CONST	SEGMENT
??_C@_0CI@HBNHBKDM@required?5field?5?$CCop?$CC?5missing?5from@ DB 'requir'
	DB	'ed field "op" missing from BoolOp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@IMGNJCMM@required?5field?5?$CCvalues?$CC?5missing?5@
CONST	SEGMENT
??_C@_0CM@IMGNJCMM@required?5field?5?$CCvalues?$CC?5missing?5@ DB 'requir'
	DB	'ed field "values" missing from BoolOp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@BPOBLELF@BoolOp?5field?5?$CCvalues?$CC?5must?5be?5a?5@
CONST	SEGMENT
??_C@_0DD@BPOBLELF@BoolOp?5field?5?$CCvalues?$CC?5must?5be?5a?5@ DB 'Bool'
	DB	'Op field "values" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
CONST	SEGMENT
??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@ DB 'obj2ast_expr', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT obj2ast_expr
_TEXT	SEGMENT
values$1$ = 64
tv4095 = 64
len$1$ = 64
value$26469 = 64
len$1$ = 72
len$1$ = 72
comparators$1$ = 72
i$1$ = 72
len$1$ = 72
len$1$ = 72
len$1$ = 72
len$1$ = 72
len$1$ = 72
keys$1$ = 72
value$26448 = 72
generators$1$ = 80
generators$1$ = 80
generators$1$ = 80
generators$1$ = 80
elts$1$ = 80
len$1$ = 80
i$1$ = 80
values$1$ = 80
tv3992 = 80
kwargs$26573 = 80
len$1$ = 88
ctx$26979 = 88
ctx$26929 = 88
ctx$26892 = 88
ctx$26855 = 88
ctx$26803 = 88
ctx$26750 = 88
starargs$26572 = 88
value$26523 = 88
op$26008 = 88
op$25956 = 88
op$25905 = 88
elts$1$ = 96
elts$1$ = 96
i$1$ = 96
i$1$ = 96
len$1$ = 96
len$1$ = 96
operand$26009 = 96
i$1$ = 104
i$1$ = 104
args$1$ = 104
args$26045 = 104
right$25957 = 104
value$25937 = 104
len$1$ = 112
len$1$ = 112
keywords$1$ = 112
left$25955 = 112
value$26264 = 120
value$26214 = 120
value$26180 = 120
value$26152 = 120
test$26082 = 120
attr$26749 = 128
s$26722 = 128
s$26701 = 128
n$26680 = 128
func$26569 = 128
value$26995 = 136
value$26945 = 136
id$26891 = 136
value$26854 = 136
ops$1$ = 144
value$26430 = 144
key$26332 = 144
tv4036 = 152
value$26551 = 152
elt$26398 = 152
value$26632 = 160
value$26604 = 160
left$26490 = 160
value$26380 = 168
elt$26282 = 168
slice$26802 = 176
value$26748 = 176
value$26314 = 184
elt$26232 = 184
body$26083 = 192
value$26333 = 200
value$26801 = 208
orelse$26084 = 216
body$26046 = 224
col_offset$ = 272
obj$ = 272
out$ = 280
arena$ = 288
lineno$ = 296
obj2ast_expr PROC					; COMDAT

; 4780 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	48 8d 6c 24 b9	 lea	 rbp, QWORD PTR [rsp-71]
  0000d	48 81 ec f0 00
	00 00		 sub	 rsp, 240		; 000000f0H
  00014	48 8b f9	 mov	 rdi, rcx

; 4781 :     int isinstance;
; 4782 : 
; 4783 :     PyObject *tmp = NULL;
; 4784 :     int lineno;
; 4785 :     int col_offset;
; 4786 : 
; 4787 :     if (obj == Py_None) {

  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0001e	49 8b f0	 mov	 rsi, r8
  00021	48 3b f9	 cmp	 rdi, rcx
  00024	75 14		 jne	 SHORT $LN574@obj2ast_ex@2

; 4788 :         *out = NULL;

  00026	48 c7 02 00 00
	00 00		 mov	 QWORD PTR [rdx], 0

; 4789 :         return 0;

  0002d	33 c0		 xor	 eax, eax

; 5860 : }

  0002f	48 81 c4 f0 00
	00 00		 add	 rsp, 240		; 000000f0H
  00036	5f		 pop	 rdi
  00037	5e		 pop	 rsi
  00038	5d		 pop	 rbp
  00039	c3		 ret	 0
$LN574@obj2ast_ex@2:

; 4790 :     }
; 4791 :     if (_PyObject_HasAttrId(obj, &PyId_lineno)) {

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00040	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00049	48 89 9c 24 20
	01 00 00	 mov	 QWORD PTR [rsp+288], rbx
  00051	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00055	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_lineno
  0005a	48 8b cf	 mov	 rcx, rdi
  0005d	48 03 d8	 add	 rbx, rax
  00060	48 89 45 97	 mov	 QWORD PTR tv4095[rbp-169], rax
  00064	48 8b d3	 mov	 rdx, rbx
  00067	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0006c	85 c0		 test	 eax, eax
  0006e	0f 84 c6 27 00
	00		 je	 $LN573@obj2ast_ex@2

; 4792 :         int res;
; 4793 :         tmp = _PyObject_GetAttrId(obj, &PyId_lineno);

  00074	48 8b d3	 mov	 rdx, rbx
  00077	48 8b cf	 mov	 rcx, rdi
  0007a	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0007f	48 8b d8	 mov	 rbx, rax

; 4794 :         if (tmp == NULL) goto failed;

  00082	48 85 c0	 test	 rax, rax
  00085	0f 84 c2 27 00
	00		 je	 $LN622@obj2ast_ex@2

; 4795 :         res = obj2ast_int(tmp, &lineno, arena);

  0008b	48 8d 55 7f	 lea	 rdx, QWORD PTR lineno$[rbp-169]
  0008f	48 8b c8	 mov	 rcx, rax
  00092	e8 00 00 00 00	 call	 obj2ast_int

; 4796 :         if (res != 0) goto failed;

  00097	85 c0		 test	 eax, eax
  00099	0f 85 9b 01 00
	00		 jne	 $failed$25874

; 4797 :         Py_CLEAR(tmp);

  0009f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  000a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  000ad	4c 8b cb	 mov	 r9, rbx
  000b0	41 b8 bd 12 00
	00		 mov	 r8d, 4797		; 000012bdH
  000b6	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000be	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c3	85 c0		 test	 eax, eax
  000c5	75 08		 jne	 SHORT $LN569@obj2ast_ex@2
  000c7	48 8b cb	 mov	 rcx, rbx
  000ca	e8 00 00 00 00	 call	 _Py_DecRef
$LN569@obj2ast_ex@2:

; 4801 :     }
; 4802 :     if (_PyObject_HasAttrId(obj, &PyId_col_offset)) {

  000cf	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_col_offset
  000d4	48 8b cf	 mov	 rcx, rdi
  000d7	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  000db	48 8b d3	 mov	 rdx, rbx
  000de	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  000e3	85 c0		 test	 eax, eax
  000e5	0f 84 46 27 00
	00		 je	 $LN565@obj2ast_ex@2

; 4803 :         int res;
; 4804 :         tmp = _PyObject_GetAttrId(obj, &PyId_col_offset);

  000eb	48 8b d3	 mov	 rdx, rbx
  000ee	48 8b cf	 mov	 rcx, rdi
  000f1	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  000f6	48 8b d8	 mov	 rbx, rax

; 4805 :         if (tmp == NULL) goto failed;

  000f9	48 85 c0	 test	 rax, rax
  000fc	0f 84 4b 27 00
	00		 je	 $LN622@obj2ast_ex@2

; 4806 :         res = obj2ast_int(tmp, &col_offset, arena);

  00102	48 8d 55 67	 lea	 rdx, QWORD PTR col_offset$[rbp-169]
  00106	48 8b c8	 mov	 rcx, rax
  00109	e8 00 00 00 00	 call	 obj2ast_int

; 4807 :         if (res != 0) goto failed;

  0010e	85 c0		 test	 eax, eax
  00110	0f 85 24 01 00
	00		 jne	 $failed$25874

; 4808 :         Py_CLEAR(tmp);

  00116	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0011d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  00124	4c 8b cb	 mov	 r9, rbx
  00127	41 b8 c8 12 00
	00		 mov	 r8d, 4808		; 000012c8H
  0012d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00135	e8 00 00 00 00	 call	 _PyParallel_Guard
  0013a	85 c0		 test	 eax, eax
  0013c	75 0a		 jne	 SHORT $LN561@obj2ast_ex@2
  0013e	48 8b cb	 mov	 rcx, rbx
  00141	33 db		 xor	 ebx, ebx
  00143	e8 00 00 00 00	 call	 _Py_DecRef
$LN561@obj2ast_ex@2:

; 4812 :     }
; 4813 :     isinstance = PyObject_IsInstance(obj, (PyObject*)BoolOp_type);

  00148	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR BoolOp_type
  0014f	48 8b cf	 mov	 rcx, rdi
  00152	e8 00 00 00 00	 call	 PyObject_IsInstance

; 4814 :     if (isinstance == -1) {

  00157	83 f8 ff	 cmp	 eax, -1

; 4815 :         return 1;

  0015a	0f 84 ed 26 00
	00		 je	 $LN622@obj2ast_ex@2

; 4816 :     }
; 4817 :     if (isinstance) {
; 4818 :         boolop_ty op;
; 4819 :         asdl_seq* values;
; 4820 : 
; 4821 :         if (_PyObject_HasAttrId(obj, &PyId_op)) {

  00160	48 8b cf	 mov	 rcx, rdi
  00163	85 c0		 test	 eax, eax
  00165	0f 84 aa 01 00
	00		 je	 $LN556@obj2ast_ex@2
  0016b	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_op
  00170	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  00174	48 8b d3	 mov	 rdx, rbx
  00177	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0017c	85 c0		 test	 eax, eax
  0017e	0f 84 85 01 00
	00		 je	 $LN555@obj2ast_ex@2

; 4822 :             int res;
; 4823 :             tmp = _PyObject_GetAttrId(obj, &PyId_op);

  00184	48 8b d3	 mov	 rdx, rbx
  00187	48 8b cf	 mov	 rcx, rdi
  0018a	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0018f	48 8b d8	 mov	 rbx, rax

; 4824 :             if (tmp == NULL) goto failed;

  00192	48 85 c0	 test	 rax, rax
  00195	0f 84 b2 26 00
	00		 je	 $LN622@obj2ast_ex@2

; 4825 :             res = obj2ast_boolop(tmp, &op, arena);

  0019b	48 8d 55 af	 lea	 rdx, QWORD PTR op$25905[rbp-169]
  0019f	48 8b c8	 mov	 rcx, rax
  001a2	e8 00 00 00 00	 call	 obj2ast_boolop

; 4826 :             if (res != 0) goto failed;

  001a7	85 c0		 test	 eax, eax
  001a9	0f 85 8b 00 00
	00		 jne	 $failed$25874

; 4827 :             Py_CLEAR(tmp);

  001af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  001b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  001bd	4c 8b cb	 mov	 r9, rbx
  001c0	41 b8 db 12 00
	00		 mov	 r8d, 4827		; 000012dbH
  001c6	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001ce	e8 00 00 00 00	 call	 _PyParallel_Guard
  001d3	85 c0		 test	 eax, eax
  001d5	75 08		 jne	 SHORT $LN551@obj2ast_ex@2
  001d7	48 8b cb	 mov	 rcx, rbx
  001da	e8 00 00 00 00	 call	 _Py_DecRef
$LN551@obj2ast_ex@2:

; 4831 :         }
; 4832 :         if (_PyObject_HasAttrId(obj, &PyId_values)) {

  001df	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_values
  001e4	48 8b cf	 mov	 rcx, rdi
  001e7	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  001eb	48 8b d3	 mov	 rdx, rbx
  001ee	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  001f3	85 c0		 test	 eax, eax
  001f5	0f 84 02 01 00
	00		 je	 $LN547@obj2ast_ex@2

; 4833 :             int res;
; 4834 :             Py_ssize_t len;
; 4835 :             Py_ssize_t i;
; 4836 :             tmp = _PyObject_GetAttrId(obj, &PyId_values);

  001fb	48 8b d3	 mov	 rdx, rbx
  001fe	48 8b cf	 mov	 rcx, rdi
  00201	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00206	48 8b d8	 mov	 rbx, rax

; 4837 :             if (tmp == NULL) goto failed;

  00209	48 85 c0	 test	 rax, rax
  0020c	0f 84 3b 26 00
	00		 je	 $LN622@obj2ast_ex@2

; 4838 :             if (!PyList_Check(tmp)) {

  00212	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  00216	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  00221	75 2d		 jne	 SHORT $LN545@obj2ast_ex@2

; 4839 :                 PyErr_Format(PyExc_TypeError, "BoolOp field \"values\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  00223	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00227	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@BPOBLELF@BoolOp?5field?5?$CCvalues?$CC?5must?5be?5a?5@
$LN624@obj2ast_ex@2:

; 5035 :                 PyErr_Format(PyExc_TypeError, "Dict field \"keys\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  0022e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00235	e8 00 00 00 00	 call	 PyErr_Format
$failed$25874:

; 5857 :     failed:
; 5858 :     Py_XDECREF(tmp);

  0023a	48 85 db	 test	 rbx, rbx
  0023d	0f 84 0a 26 00
	00		 je	 $LN622@obj2ast_ex@2
  00243	48 8b cb	 mov	 rcx, rbx
  00246	e8 00 00 00 00	 call	 _Py_DecRef

; 5859 :     return 1;

  0024b	e9 fd 25 00 00	 jmp	 $LN622@obj2ast_ex@2
$LN545@obj2ast_ex@2:

; 4840 :                 goto failed;
; 4841 :             }
; 4842 :             len = PyList_GET_SIZE(tmp);

  00250	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 4843 :             values = asdl_seq_new(len, arena);

  00254	48 8b d6	 mov	 rdx, rsi
  00257	48 8b c8	 mov	 rcx, rax
  0025a	48 89 45 97	 mov	 QWORD PTR len$1$[rbp-169], rax
  0025e	e8 00 00 00 00	 call	 asdl_seq_new
  00263	48 89 45 a7	 mov	 QWORD PTR values$1$[rbp-169], rax

; 4844 :             if (values == NULL) goto failed;

  00267	48 85 c0	 test	 rax, rax
  0026a	74 ce		 je	 SHORT $failed$25874

; 4845 :             for (i = 0; i < len; i++) {

  0026c	33 ff		 xor	 edi, edi
  0026e	48 39 7d 97	 cmp	 QWORD PTR len$1$[rbp-169], rdi
  00272	7e 39		 jle	 SHORT $LN539@obj2ast_ex@2
  00274	66 66 66 66 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL543@obj2ast_ex@2:

; 4846 :                 expr_ty value;
; 4847 :                 res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);

  00280	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00284	48 8d 55 bf	 lea	 rdx, QWORD PTR value$25937[rbp-169]
  00288	4c 8b c6	 mov	 r8, rsi
  0028b	48 8b 0c f9	 mov	 rcx, QWORD PTR [rcx+rdi*8]
  0028f	e8 00 00 00 00	 call	 obj2ast_expr

; 4848 :                 if (res != 0) goto failed;

  00294	85 c0		 test	 eax, eax
  00296	75 a2		 jne	 SHORT $failed$25874

; 4849 :                 asdl_seq_SET(values, i, value);

  00298	48 8b 4d a7	 mov	 rcx, QWORD PTR values$1$[rbp-169]
  0029c	48 8b 45 bf	 mov	 rax, QWORD PTR value$25937[rbp-169]
  002a0	48 ff c7	 inc	 rdi
  002a3	48 89 04 f9	 mov	 QWORD PTR [rcx+rdi*8], rax
  002a7	48 3b 7d 97	 cmp	 rdi, QWORD PTR len$1$[rbp-169]
  002ab	7c d3		 jl	 SHORT $LL543@obj2ast_ex@2
$LN539@obj2ast_ex@2:

; 4850 :             }
; 4851 :             Py_CLEAR(tmp);

  002ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  002b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  002bb	4c 8b cb	 mov	 r9, rbx
  002be	41 b8 f3 12 00
	00		 mov	 r8d, 4851		; 000012f3H
  002c4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002cc	e8 00 00 00 00	 call	 _PyParallel_Guard
  002d1	85 c0		 test	 eax, eax
  002d3	75 0a		 jne	 SHORT $LN538@obj2ast_ex@2
  002d5	48 8b cb	 mov	 rcx, rbx
  002d8	33 db		 xor	 ebx, ebx
  002da	e8 00 00 00 00	 call	 _Py_DecRef
$LN538@obj2ast_ex@2:

; 4855 :         }
; 4856 :         *out = BoolOp(op, values, lineno, col_offset, arena);

  002df	44 8b 4d 67	 mov	 r9d, DWORD PTR col_offset$[rbp-169]
  002e3	44 8b 45 7f	 mov	 r8d, DWORD PTR lineno$[rbp-169]
  002e7	48 8b 55 a7	 mov	 rdx, QWORD PTR values$1$[rbp-169]
  002eb	8b 4d af	 mov	 ecx, DWORD PTR op$25905[rbp-169]
  002ee	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  002f3	e8 00 00 00 00	 call	 _Py_BoolOp

; 4857 :         if (*out == NULL) goto failed;
; 4858 :         return 0;

  002f8	e9 ff 24 00 00	 jmp	 $LN625@obj2ast_ex@2
$LN547@obj2ast_ex@2:

; 4852 :         } else {
; 4853 :             PyErr_SetString(PyExc_TypeError, "required field \"values\" missing from BoolOp");

  002fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@IMGNJCMM@required?5field?5?$CCvalues?$CC?5missing?5@

; 4854 :             return 1;

  00304	e9 38 25 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN555@obj2ast_ex@2:

; 4828 :         } else {
; 4829 :             PyErr_SetString(PyExc_TypeError, "required field \"op\" missing from BoolOp");

  00309	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@HBNHBKDM@required?5field?5?$CCop?$CC?5missing?5from@

; 4830 :             return 1;

  00310	e9 2c 25 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN556@obj2ast_ex@2:

; 4859 :     }
; 4860 :     isinstance = PyObject_IsInstance(obj, (PyObject*)BinOp_type);

  00315	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR BinOp_type
  0031c	e8 00 00 00 00	 call	 PyObject_IsInstance

; 4861 :     if (isinstance == -1) {

  00321	83 f8 ff	 cmp	 eax, -1

; 4862 :         return 1;

  00324	0f 84 23 25 00
	00		 je	 $LN622@obj2ast_ex@2

; 4863 :     }
; 4864 :     if (isinstance) {
; 4865 :         expr_ty left;
; 4866 :         operator_ty op;
; 4867 :         expr_ty right;
; 4868 : 
; 4869 :         if (_PyObject_HasAttrId(obj, &PyId_left)) {

  0032a	48 8b cf	 mov	 rcx, rdi
  0032d	85 c0		 test	 eax, eax
  0032f	0f 84 b3 01 00
	00		 je	 $LN532@obj2ast_ex@2
  00335	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_left
  0033a	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  0033e	48 8b d3	 mov	 rdx, rbx
  00341	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00346	85 c0		 test	 eax, eax
  00348	0f 84 8e 01 00
	00		 je	 $LN531@obj2ast_ex@2

; 4870 :             int res;
; 4871 :             tmp = _PyObject_GetAttrId(obj, &PyId_left);

  0034e	48 8b d3	 mov	 rdx, rbx
  00351	48 8b cf	 mov	 rcx, rdi
  00354	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00359	48 8b d8	 mov	 rbx, rax

; 4872 :             if (tmp == NULL) goto failed;

  0035c	48 85 c0	 test	 rax, rax
  0035f	0f 84 e8 24 00
	00		 je	 $LN622@obj2ast_ex@2

; 4873 :             res = obj2ast_expr(tmp, &left, arena);

  00365	48 8d 55 c7	 lea	 rdx, QWORD PTR left$25955[rbp-169]
  00369	4c 8b c6	 mov	 r8, rsi
  0036c	48 8b c8	 mov	 rcx, rax
  0036f	e8 00 00 00 00	 call	 obj2ast_expr

; 4874 :             if (res != 0) goto failed;

  00374	85 c0		 test	 eax, eax
  00376	0f 85 be fe ff
	ff		 jne	 $failed$25874

; 4875 :             Py_CLEAR(tmp);

  0037c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00383	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  0038a	4c 8b cb	 mov	 r9, rbx
  0038d	41 b8 0b 13 00
	00		 mov	 r8d, 4875		; 0000130bH
  00393	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0039b	e8 00 00 00 00	 call	 _PyParallel_Guard
  003a0	85 c0		 test	 eax, eax
  003a2	75 08		 jne	 SHORT $LN527@obj2ast_ex@2
  003a4	48 8b cb	 mov	 rcx, rbx
  003a7	e8 00 00 00 00	 call	 _Py_DecRef
$LN527@obj2ast_ex@2:

; 4879 :         }
; 4880 :         if (_PyObject_HasAttrId(obj, &PyId_op)) {

  003ac	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_op
  003b1	48 8b cf	 mov	 rcx, rdi
  003b4	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  003b8	48 8b d3	 mov	 rdx, rbx
  003bb	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  003c0	85 c0		 test	 eax, eax
  003c2	0f 84 08 01 00
	00		 je	 $LN523@obj2ast_ex@2

; 4881 :             int res;
; 4882 :             tmp = _PyObject_GetAttrId(obj, &PyId_op);

  003c8	48 8b d3	 mov	 rdx, rbx
  003cb	48 8b cf	 mov	 rcx, rdi
  003ce	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  003d3	48 8b d8	 mov	 rbx, rax

; 4883 :             if (tmp == NULL) goto failed;

  003d6	48 85 c0	 test	 rax, rax
  003d9	0f 84 6e 24 00
	00		 je	 $LN622@obj2ast_ex@2

; 4884 :             res = obj2ast_operator(tmp, &op, arena);

  003df	48 8d 55 af	 lea	 rdx, QWORD PTR op$25956[rbp-169]
  003e3	48 8b c8	 mov	 rcx, rax
  003e6	e8 00 00 00 00	 call	 obj2ast_operator

; 4885 :             if (res != 0) goto failed;

  003eb	85 c0		 test	 eax, eax
  003ed	0f 85 47 fe ff
	ff		 jne	 $failed$25874

; 4886 :             Py_CLEAR(tmp);

  003f3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  003fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  00401	4c 8b cb	 mov	 r9, rbx
  00404	41 b8 16 13 00
	00		 mov	 r8d, 4886		; 00001316H
  0040a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00412	e8 00 00 00 00	 call	 _PyParallel_Guard
  00417	85 c0		 test	 eax, eax
  00419	75 08		 jne	 SHORT $LN519@obj2ast_ex@2
  0041b	48 8b cb	 mov	 rcx, rbx
  0041e	e8 00 00 00 00	 call	 _Py_DecRef
$LN519@obj2ast_ex@2:

; 4890 :         }
; 4891 :         if (_PyObject_HasAttrId(obj, &PyId_right)) {

  00423	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_right
  00428	48 8b cf	 mov	 rcx, rdi
  0042b	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  0042f	48 8b d3	 mov	 rdx, rbx
  00432	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00437	85 c0		 test	 eax, eax
  00439	0f 84 85 00 00
	00		 je	 $LN515@obj2ast_ex@2

; 4892 :             int res;
; 4893 :             tmp = _PyObject_GetAttrId(obj, &PyId_right);

  0043f	48 8b d3	 mov	 rdx, rbx
  00442	48 8b cf	 mov	 rcx, rdi
  00445	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0044a	48 8b d8	 mov	 rbx, rax

; 4894 :             if (tmp == NULL) goto failed;

  0044d	48 85 c0	 test	 rax, rax
  00450	0f 84 f7 23 00
	00		 je	 $LN622@obj2ast_ex@2

; 4895 :             res = obj2ast_expr(tmp, &right, arena);

  00456	48 8d 55 bf	 lea	 rdx, QWORD PTR right$25957[rbp-169]
  0045a	4c 8b c6	 mov	 r8, rsi
  0045d	48 8b c8	 mov	 rcx, rax
  00460	e8 00 00 00 00	 call	 obj2ast_expr

; 4896 :             if (res != 0) goto failed;

  00465	85 c0		 test	 eax, eax
  00467	0f 85 cd fd ff
	ff		 jne	 $failed$25874

; 4897 :             Py_CLEAR(tmp);

  0046d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00474	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  0047b	4c 8b cb	 mov	 r9, rbx
  0047e	41 b8 21 13 00
	00		 mov	 r8d, 4897		; 00001321H
  00484	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0048c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00491	85 c0		 test	 eax, eax
  00493	75 0a		 jne	 SHORT $LN511@obj2ast_ex@2
  00495	48 8b cb	 mov	 rcx, rbx
  00498	33 db		 xor	 ebx, ebx
  0049a	e8 00 00 00 00	 call	 _Py_DecRef
$LN511@obj2ast_ex@2:

; 4901 :         }
; 4902 :         *out = BinOp(left, op, right, lineno, col_offset, arena);

  0049f	8b 45 67	 mov	 eax, DWORD PTR col_offset$[rbp-169]
  004a2	44 8b 4d 7f	 mov	 r9d, DWORD PTR lineno$[rbp-169]
  004a6	4c 8b 45 bf	 mov	 r8, QWORD PTR right$25957[rbp-169]
  004aa	8b 55 af	 mov	 edx, DWORD PTR op$25956[rbp-169]
  004ad	48 8b 4d c7	 mov	 rcx, QWORD PTR left$25955[rbp-169]
  004b1	48 89 74 24 28	 mov	 QWORD PTR [rsp+40], rsi
  004b6	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  004ba	e8 00 00 00 00	 call	 _Py_BinOp

; 4903 :         if (*out == NULL) goto failed;
; 4904 :         return 0;

  004bf	e9 38 23 00 00	 jmp	 $LN625@obj2ast_ex@2
$LN515@obj2ast_ex@2:

; 4898 :         } else {
; 4899 :             PyErr_SetString(PyExc_TypeError, "required field \"right\" missing from BinOp");

  004c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@CPLHPBCE@required?5field?5?$CCright?$CC?5missing?5f@

; 4900 :             return 1;

  004cb	e9 71 23 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN523@obj2ast_ex@2:

; 4887 :         } else {
; 4888 :             PyErr_SetString(PyExc_TypeError, "required field \"op\" missing from BinOp");

  004d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@GDLDIEDI@required?5field?5?$CCop?$CC?5missing?5from@

; 4889 :             return 1;

  004d7	e9 65 23 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN531@obj2ast_ex@2:

; 4876 :         } else {
; 4877 :             PyErr_SetString(PyExc_TypeError, "required field \"left\" missing from BinOp");

  004dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@IMIJKKKN@required?5field?5?$CCleft?$CC?5missing?5fr@

; 4878 :             return 1;

  004e3	e9 59 23 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN532@obj2ast_ex@2:

; 4905 :     }
; 4906 :     isinstance = PyObject_IsInstance(obj, (PyObject*)UnaryOp_type);

  004e8	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR UnaryOp_type
  004ef	e8 00 00 00 00	 call	 PyObject_IsInstance

; 4907 :     if (isinstance == -1) {

  004f4	83 f8 ff	 cmp	 eax, -1

; 4908 :         return 1;

  004f7	0f 84 50 23 00
	00		 je	 $LN622@obj2ast_ex@2

; 4909 :     }
; 4910 :     if (isinstance) {
; 4911 :         unaryop_ty op;
; 4912 :         expr_ty operand;
; 4913 : 
; 4914 :         if (_PyObject_HasAttrId(obj, &PyId_op)) {

  004fd	48 8b cf	 mov	 rcx, rdi
  00500	85 c0		 test	 eax, eax
  00502	0f 84 22 01 00
	00		 je	 $LN505@obj2ast_ex@2
  00508	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_op
  0050d	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  00511	48 8b d3	 mov	 rdx, rbx
  00514	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00519	85 c0		 test	 eax, eax
  0051b	0f 84 fd 00 00
	00		 je	 $LN504@obj2ast_ex@2

; 4915 :             int res;
; 4916 :             tmp = _PyObject_GetAttrId(obj, &PyId_op);

  00521	48 8b d3	 mov	 rdx, rbx
  00524	48 8b cf	 mov	 rcx, rdi
  00527	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0052c	48 8b d8	 mov	 rbx, rax

; 4917 :             if (tmp == NULL) goto failed;

  0052f	48 85 c0	 test	 rax, rax
  00532	0f 84 15 23 00
	00		 je	 $LN622@obj2ast_ex@2

; 4918 :             res = obj2ast_unaryop(tmp, &op, arena);

  00538	48 8d 55 af	 lea	 rdx, QWORD PTR op$26008[rbp-169]
  0053c	48 8b c8	 mov	 rcx, rax
  0053f	e8 00 00 00 00	 call	 obj2ast_unaryop

; 4919 :             if (res != 0) goto failed;

  00544	85 c0		 test	 eax, eax
  00546	0f 85 ee fc ff
	ff		 jne	 $failed$25874

; 4920 :             Py_CLEAR(tmp);

  0054c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00553	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  0055a	4c 8b cb	 mov	 r9, rbx
  0055d	41 b8 38 13 00
	00		 mov	 r8d, 4920		; 00001338H
  00563	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0056b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00570	85 c0		 test	 eax, eax
  00572	75 08		 jne	 SHORT $LN500@obj2ast_ex@2
  00574	48 8b cb	 mov	 rcx, rbx
  00577	e8 00 00 00 00	 call	 _Py_DecRef
$LN500@obj2ast_ex@2:

; 4924 :         }
; 4925 :         if (_PyObject_HasAttrId(obj, &PyId_operand)) {

  0057c	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_operand
  00581	48 8b cf	 mov	 rcx, rdi
  00584	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  00588	48 8b d3	 mov	 rdx, rbx
  0058b	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00590	85 c0		 test	 eax, eax
  00592	74 7e		 je	 SHORT $LN496@obj2ast_ex@2

; 4926 :             int res;
; 4927 :             tmp = _PyObject_GetAttrId(obj, &PyId_operand);

  00594	48 8b d3	 mov	 rdx, rbx
  00597	48 8b cf	 mov	 rcx, rdi
  0059a	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0059f	48 8b d8	 mov	 rbx, rax

; 4928 :             if (tmp == NULL) goto failed;

  005a2	48 85 c0	 test	 rax, rax
  005a5	0f 84 a2 22 00
	00		 je	 $LN622@obj2ast_ex@2

; 4929 :             res = obj2ast_expr(tmp, &operand, arena);

  005ab	48 8d 55 b7	 lea	 rdx, QWORD PTR operand$26009[rbp-169]
  005af	4c 8b c6	 mov	 r8, rsi
  005b2	48 8b c8	 mov	 rcx, rax
  005b5	e8 00 00 00 00	 call	 obj2ast_expr

; 4930 :             if (res != 0) goto failed;

  005ba	85 c0		 test	 eax, eax
  005bc	0f 85 78 fc ff
	ff		 jne	 $failed$25874

; 4931 :             Py_CLEAR(tmp);

  005c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  005c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  005d0	4c 8b cb	 mov	 r9, rbx
  005d3	41 b8 43 13 00
	00		 mov	 r8d, 4931		; 00001343H
  005d9	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  005e1	e8 00 00 00 00	 call	 _PyParallel_Guard
  005e6	85 c0		 test	 eax, eax
  005e8	75 0a		 jne	 SHORT $LN492@obj2ast_ex@2
  005ea	48 8b cb	 mov	 rcx, rbx
  005ed	33 db		 xor	 ebx, ebx
  005ef	e8 00 00 00 00	 call	 _Py_DecRef
$LN492@obj2ast_ex@2:

; 4935 :         }
; 4936 :         *out = UnaryOp(op, operand, lineno, col_offset, arena);

  005f4	44 8b 4d 67	 mov	 r9d, DWORD PTR col_offset$[rbp-169]
  005f8	44 8b 45 7f	 mov	 r8d, DWORD PTR lineno$[rbp-169]
  005fc	48 8b 55 b7	 mov	 rdx, QWORD PTR operand$26009[rbp-169]
  00600	8b 4d af	 mov	 ecx, DWORD PTR op$26008[rbp-169]
  00603	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  00608	e8 00 00 00 00	 call	 _Py_UnaryOp

; 4937 :         if (*out == NULL) goto failed;
; 4938 :         return 0;

  0060d	e9 ea 21 00 00	 jmp	 $LN625@obj2ast_ex@2
$LN496@obj2ast_ex@2:

; 4932 :         } else {
; 4933 :             PyErr_SetString(PyExc_TypeError, "required field \"operand\" missing from UnaryOp");

  00612	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@CAINBGKB@required?5field?5?$CCoperand?$CC?5missing@

; 4934 :             return 1;

  00619	e9 23 22 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN504@obj2ast_ex@2:

; 4921 :         } else {
; 4922 :             PyErr_SetString(PyExc_TypeError, "required field \"op\" missing from UnaryOp");

  0061e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@MPIFKMKO@required?5field?5?$CCop?$CC?5missing?5from@

; 4923 :             return 1;

  00625	e9 17 22 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN505@obj2ast_ex@2:

; 4939 :     }
; 4940 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Lambda_type);

  0062a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Lambda_type
  00631	e8 00 00 00 00	 call	 PyObject_IsInstance

; 4941 :     if (isinstance == -1) {

  00636	83 f8 ff	 cmp	 eax, -1

; 4942 :         return 1;

  00639	0f 84 0e 22 00
	00		 je	 $LN622@obj2ast_ex@2

; 4943 :     }
; 4944 :     if (isinstance) {
; 4945 :         arguments_ty args;
; 4946 :         expr_ty body;
; 4947 : 
; 4948 :         if (_PyObject_HasAttrId(obj, &PyId_args)) {

  0063f	48 8b cf	 mov	 rcx, rdi
  00642	85 c0		 test	 eax, eax
  00644	0f 84 26 01 00
	00		 je	 $LN486@obj2ast_ex@2
  0064a	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_args
  0064f	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  00653	48 8b d3	 mov	 rdx, rbx
  00656	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0065b	85 c0		 test	 eax, eax
  0065d	0f 84 01 01 00
	00		 je	 $LN485@obj2ast_ex@2

; 4949 :             int res;
; 4950 :             tmp = _PyObject_GetAttrId(obj, &PyId_args);

  00663	48 8b d3	 mov	 rdx, rbx
  00666	48 8b cf	 mov	 rcx, rdi
  00669	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0066e	48 8b d8	 mov	 rbx, rax

; 4951 :             if (tmp == NULL) goto failed;

  00671	48 85 c0	 test	 rax, rax
  00674	0f 84 d3 21 00
	00		 je	 $LN622@obj2ast_ex@2

; 4952 :             res = obj2ast_arguments(tmp, &args, arena);

  0067a	48 8d 55 bf	 lea	 rdx, QWORD PTR args$26045[rbp-169]
  0067e	4c 8b c6	 mov	 r8, rsi
  00681	48 8b c8	 mov	 rcx, rax
  00684	e8 00 00 00 00	 call	 obj2ast_arguments

; 4953 :             if (res != 0) goto failed;

  00689	85 c0		 test	 eax, eax
  0068b	0f 85 a9 fb ff
	ff		 jne	 $failed$25874

; 4954 :             Py_CLEAR(tmp);

  00691	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00698	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  0069f	4c 8b cb	 mov	 r9, rbx
  006a2	41 b8 5a 13 00
	00		 mov	 r8d, 4954		; 0000135aH
  006a8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  006b0	e8 00 00 00 00	 call	 _PyParallel_Guard
  006b5	85 c0		 test	 eax, eax
  006b7	75 08		 jne	 SHORT $LN481@obj2ast_ex@2
  006b9	48 8b cb	 mov	 rcx, rbx
  006bc	e8 00 00 00 00	 call	 _Py_DecRef
$LN481@obj2ast_ex@2:

; 4958 :         }
; 4959 :         if (_PyObject_HasAttrId(obj, &PyId_body)) {

  006c1	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_body
  006c6	48 8b cf	 mov	 rcx, rdi
  006c9	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  006cd	48 8b d3	 mov	 rdx, rbx
  006d0	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  006d5	85 c0		 test	 eax, eax
  006d7	74 7f		 je	 SHORT $LN477@obj2ast_ex@2

; 4960 :             int res;
; 4961 :             tmp = _PyObject_GetAttrId(obj, &PyId_body);

  006d9	48 8b d3	 mov	 rdx, rbx
  006dc	48 8b cf	 mov	 rcx, rdi
  006df	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  006e4	48 8b d8	 mov	 rbx, rax

; 4962 :             if (tmp == NULL) goto failed;

  006e7	48 85 c0	 test	 rax, rax
  006ea	0f 84 5d 21 00
	00		 je	 $LN622@obj2ast_ex@2

; 4963 :             res = obj2ast_expr(tmp, &body, arena);

  006f0	48 8d 55 37	 lea	 rdx, QWORD PTR body$26046[rbp-169]
  006f4	4c 8b c6	 mov	 r8, rsi
  006f7	48 8b c8	 mov	 rcx, rax
  006fa	e8 00 00 00 00	 call	 obj2ast_expr

; 4964 :             if (res != 0) goto failed;

  006ff	85 c0		 test	 eax, eax
  00701	0f 85 33 fb ff
	ff		 jne	 $failed$25874

; 4965 :             Py_CLEAR(tmp);

  00707	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0070e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  00715	4c 8b cb	 mov	 r9, rbx
  00718	41 b8 65 13 00
	00		 mov	 r8d, 4965		; 00001365H
  0071e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00726	e8 00 00 00 00	 call	 _PyParallel_Guard
  0072b	85 c0		 test	 eax, eax
  0072d	75 0a		 jne	 SHORT $LN473@obj2ast_ex@2
  0072f	48 8b cb	 mov	 rcx, rbx
  00732	33 db		 xor	 ebx, ebx
  00734	e8 00 00 00 00	 call	 _Py_DecRef
$LN473@obj2ast_ex@2:

; 4969 :         }
; 4970 :         *out = Lambda(args, body, lineno, col_offset, arena);

  00739	44 8b 4d 67	 mov	 r9d, DWORD PTR col_offset$[rbp-169]
  0073d	44 8b 45 7f	 mov	 r8d, DWORD PTR lineno$[rbp-169]
  00741	48 8b 55 37	 mov	 rdx, QWORD PTR body$26046[rbp-169]
  00745	48 8b 4d bf	 mov	 rcx, QWORD PTR args$26045[rbp-169]
  00749	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0074e	e8 00 00 00 00	 call	 _Py_Lambda

; 4971 :         if (*out == NULL) goto failed;
; 4972 :         return 0;

  00753	e9 a4 20 00 00	 jmp	 $LN625@obj2ast_ex@2
$LN477@obj2ast_ex@2:

; 4966 :         } else {
; 4967 :             PyErr_SetString(PyExc_TypeError, "required field \"body\" missing from Lambda");

  00758	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@PCIBHCDP@required?5field?5?$CCbody?$CC?5missing?5fr@

; 4968 :             return 1;

  0075f	e9 dd 20 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN485@obj2ast_ex@2:

; 4955 :         } else {
; 4956 :             PyErr_SetString(PyExc_TypeError, "required field \"args\" missing from Lambda");

  00764	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@JPMNMIAM@required?5field?5?$CCargs?$CC?5missing?5fr@

; 4957 :             return 1;

  0076b	e9 d1 20 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN486@obj2ast_ex@2:

; 4973 :     }
; 4974 :     isinstance = PyObject_IsInstance(obj, (PyObject*)IfExp_type);

  00770	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR IfExp_type
  00777	e8 00 00 00 00	 call	 PyObject_IsInstance

; 4975 :     if (isinstance == -1) {

  0077c	83 f8 ff	 cmp	 eax, -1

; 4976 :         return 1;

  0077f	0f 84 c8 20 00
	00		 je	 $LN622@obj2ast_ex@2

; 4977 :     }
; 4978 :     if (isinstance) {
; 4979 :         expr_ty test;
; 4980 :         expr_ty body;
; 4981 :         expr_ty orelse;
; 4982 : 
; 4983 :         if (_PyObject_HasAttrId(obj, &PyId_test)) {

  00785	48 8b cf	 mov	 rcx, rdi
  00788	85 c0		 test	 eax, eax
  0078a	0f 84 b7 01 00
	00		 je	 $LN467@obj2ast_ex@2
  00790	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_test
  00795	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  00799	48 8b d3	 mov	 rdx, rbx
  0079c	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  007a1	85 c0		 test	 eax, eax
  007a3	0f 84 92 01 00
	00		 je	 $LN466@obj2ast_ex@2

; 4984 :             int res;
; 4985 :             tmp = _PyObject_GetAttrId(obj, &PyId_test);

  007a9	48 8b d3	 mov	 rdx, rbx
  007ac	48 8b cf	 mov	 rcx, rdi
  007af	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  007b4	48 8b d8	 mov	 rbx, rax

; 4986 :             if (tmp == NULL) goto failed;

  007b7	48 85 c0	 test	 rax, rax
  007ba	0f 84 8d 20 00
	00		 je	 $LN622@obj2ast_ex@2

; 4987 :             res = obj2ast_expr(tmp, &test, arena);

  007c0	48 8d 55 cf	 lea	 rdx, QWORD PTR test$26082[rbp-169]
  007c4	4c 8b c6	 mov	 r8, rsi
  007c7	48 8b c8	 mov	 rcx, rax
  007ca	e8 00 00 00 00	 call	 obj2ast_expr

; 4988 :             if (res != 0) goto failed;

  007cf	85 c0		 test	 eax, eax
  007d1	0f 85 63 fa ff
	ff		 jne	 $failed$25874

; 4989 :             Py_CLEAR(tmp);

  007d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  007de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  007e5	4c 8b cb	 mov	 r9, rbx
  007e8	41 b8 7d 13 00
	00		 mov	 r8d, 4989		; 0000137dH
  007ee	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  007f6	e8 00 00 00 00	 call	 _PyParallel_Guard
  007fb	85 c0		 test	 eax, eax
  007fd	75 08		 jne	 SHORT $LN462@obj2ast_ex@2
  007ff	48 8b cb	 mov	 rcx, rbx
  00802	e8 00 00 00 00	 call	 _Py_DecRef
$LN462@obj2ast_ex@2:

; 4993 :         }
; 4994 :         if (_PyObject_HasAttrId(obj, &PyId_body)) {

  00807	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_body
  0080c	48 8b cf	 mov	 rcx, rdi
  0080f	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  00813	48 8b d3	 mov	 rdx, rbx
  00816	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0081b	85 c0		 test	 eax, eax
  0081d	0f 84 0c 01 00
	00		 je	 $LN458@obj2ast_ex@2

; 4995 :             int res;
; 4996 :             tmp = _PyObject_GetAttrId(obj, &PyId_body);

  00823	48 8b d3	 mov	 rdx, rbx
  00826	48 8b cf	 mov	 rcx, rdi
  00829	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0082e	48 8b d8	 mov	 rbx, rax

; 4997 :             if (tmp == NULL) goto failed;

  00831	48 85 c0	 test	 rax, rax
  00834	0f 84 13 20 00
	00		 je	 $LN622@obj2ast_ex@2

; 4998 :             res = obj2ast_expr(tmp, &body, arena);

  0083a	48 8d 55 17	 lea	 rdx, QWORD PTR body$26083[rbp-169]
  0083e	4c 8b c6	 mov	 r8, rsi
  00841	48 8b c8	 mov	 rcx, rax
  00844	e8 00 00 00 00	 call	 obj2ast_expr

; 4999 :             if (res != 0) goto failed;

  00849	85 c0		 test	 eax, eax
  0084b	0f 85 e9 f9 ff
	ff		 jne	 $failed$25874

; 5000 :             Py_CLEAR(tmp);

  00851	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00858	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  0085f	4c 8b cb	 mov	 r9, rbx
  00862	41 b8 88 13 00
	00		 mov	 r8d, 5000		; 00001388H
  00868	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00870	e8 00 00 00 00	 call	 _PyParallel_Guard
  00875	85 c0		 test	 eax, eax
  00877	75 08		 jne	 SHORT $LN454@obj2ast_ex@2
  00879	48 8b cb	 mov	 rcx, rbx
  0087c	e8 00 00 00 00	 call	 _Py_DecRef
$LN454@obj2ast_ex@2:

; 5004 :         }
; 5005 :         if (_PyObject_HasAttrId(obj, &PyId_orelse)) {

  00881	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_orelse
  00886	48 8b cf	 mov	 rcx, rdi
  00889	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  0088d	48 8b d3	 mov	 rdx, rbx
  00890	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00895	85 c0		 test	 eax, eax
  00897	0f 84 86 00 00
	00		 je	 $LN450@obj2ast_ex@2

; 5006 :             int res;
; 5007 :             tmp = _PyObject_GetAttrId(obj, &PyId_orelse);

  0089d	48 8b d3	 mov	 rdx, rbx
  008a0	48 8b cf	 mov	 rcx, rdi
  008a3	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  008a8	48 8b d8	 mov	 rbx, rax

; 5008 :             if (tmp == NULL) goto failed;

  008ab	48 85 c0	 test	 rax, rax
  008ae	0f 84 99 1f 00
	00		 je	 $LN622@obj2ast_ex@2

; 5009 :             res = obj2ast_expr(tmp, &orelse, arena);

  008b4	48 8d 55 2f	 lea	 rdx, QWORD PTR orelse$26084[rbp-169]
  008b8	4c 8b c6	 mov	 r8, rsi
  008bb	48 8b c8	 mov	 rcx, rax
  008be	e8 00 00 00 00	 call	 obj2ast_expr

; 5010 :             if (res != 0) goto failed;

  008c3	85 c0		 test	 eax, eax
  008c5	0f 85 6f f9 ff
	ff		 jne	 $failed$25874

; 5011 :             Py_CLEAR(tmp);

  008cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  008d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  008d9	4c 8b cb	 mov	 r9, rbx
  008dc	41 b8 93 13 00
	00		 mov	 r8d, 5011		; 00001393H
  008e2	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  008ea	e8 00 00 00 00	 call	 _PyParallel_Guard
  008ef	85 c0		 test	 eax, eax
  008f1	75 0a		 jne	 SHORT $LN446@obj2ast_ex@2
  008f3	48 8b cb	 mov	 rcx, rbx
  008f6	33 db		 xor	 ebx, ebx
  008f8	e8 00 00 00 00	 call	 _Py_DecRef
$LN446@obj2ast_ex@2:

; 5015 :         }
; 5016 :         *out = IfExp(test, body, orelse, lineno, col_offset, arena);

  008fd	8b 45 67	 mov	 eax, DWORD PTR col_offset$[rbp-169]
  00900	44 8b 4d 7f	 mov	 r9d, DWORD PTR lineno$[rbp-169]
  00904	4c 8b 45 2f	 mov	 r8, QWORD PTR orelse$26084[rbp-169]
  00908	48 8b 55 17	 mov	 rdx, QWORD PTR body$26083[rbp-169]
  0090c	48 8b 4d cf	 mov	 rcx, QWORD PTR test$26082[rbp-169]
  00910	48 89 74 24 28	 mov	 QWORD PTR [rsp+40], rsi
  00915	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00919	e8 00 00 00 00	 call	 _Py_IfExp

; 5017 :         if (*out == NULL) goto failed;
; 5018 :         return 0;

  0091e	e9 d9 1e 00 00	 jmp	 $LN625@obj2ast_ex@2
$LN450@obj2ast_ex@2:

; 5012 :         } else {
; 5013 :             PyErr_SetString(PyExc_TypeError, "required field \"orelse\" missing from IfExp");

  00923	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@DNEAKDOO@required?5field?5?$CCorelse?$CC?5missing?5@

; 5014 :             return 1;

  0092a	e9 12 1f 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN458@obj2ast_ex@2:

; 5001 :         } else {
; 5002 :             PyErr_SetString(PyExc_TypeError, "required field \"body\" missing from IfExp");

  0092f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@GBLDBLBM@required?5field?5?$CCbody?$CC?5missing?5fr@

; 5003 :             return 1;

  00936	e9 06 1f 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN466@obj2ast_ex@2:

; 4990 :         } else {
; 4991 :             PyErr_SetString(PyExc_TypeError, "required field \"test\" missing from IfExp");

  0093b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@NMEIGPEH@required?5field?5?$CCtest?$CC?5missing?5fr@

; 4992 :             return 1;

  00942	e9 fa 1e 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN467@obj2ast_ex@2:

; 5019 :     }
; 5020 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Dict_type);

  00947	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Dict_type
  0094e	e8 00 00 00 00	 call	 PyObject_IsInstance

; 5021 :     if (isinstance == -1) {

  00953	83 f8 ff	 cmp	 eax, -1

; 5022 :         return 1;

  00956	0f 84 f1 1e 00
	00		 je	 $LN622@obj2ast_ex@2

; 5023 :     }
; 5024 :     if (isinstance) {
; 5025 :         asdl_seq* keys;
; 5026 :         asdl_seq* values;
; 5027 : 
; 5028 :         if (_PyObject_HasAttrId(obj, &PyId_keys)) {

  0095c	48 8b cf	 mov	 rcx, rdi
  0095f	85 c0		 test	 eax, eax
  00961	0f 84 13 02 00
	00		 je	 $LN440@obj2ast_ex@2
  00967	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_keys
  0096c	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  00970	48 8b d3	 mov	 rdx, rbx
  00973	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00978	85 c0		 test	 eax, eax
  0097a	0f 84 ee 01 00
	00		 je	 $LN439@obj2ast_ex@2

; 5029 :             int res;
; 5030 :             Py_ssize_t len;
; 5031 :             Py_ssize_t i;
; 5032 :             tmp = _PyObject_GetAttrId(obj, &PyId_keys);

  00980	48 8b d3	 mov	 rdx, rbx
  00983	48 8b cf	 mov	 rcx, rdi
  00986	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0098b	48 8b d8	 mov	 rbx, rax

; 5033 :             if (tmp == NULL) goto failed;

  0098e	48 85 c0	 test	 rax, rax
  00991	0f 84 b6 1e 00
	00		 je	 $LN622@obj2ast_ex@2

; 5034 :             if (!PyList_Check(tmp)) {

  00997	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  0099b	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  009a6	75 10		 jne	 SHORT $LN437@obj2ast_ex@2

; 5035 :                 PyErr_Format(PyExc_TypeError, "Dict field \"keys\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  009a8	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  009ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@EGMKHIJH@Dict?5field?5?$CCkeys?$CC?5must?5be?5a?5list@

; 5036 :                 goto failed;

  009b3	e9 76 f8 ff ff	 jmp	 $LN624@obj2ast_ex@2
$LN437@obj2ast_ex@2:

; 5037 :             }
; 5038 :             len = PyList_GET_SIZE(tmp);

  009b8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 5039 :             keys = asdl_seq_new(len, arena);

  009bc	48 8b d6	 mov	 rdx, rsi
  009bf	48 8b c8	 mov	 rcx, rax
  009c2	48 89 45 af	 mov	 QWORD PTR len$1$[rbp-169], rax
  009c6	e8 00 00 00 00	 call	 asdl_seq_new
  009cb	48 89 45 9f	 mov	 QWORD PTR keys$1$[rbp-169], rax

; 5040 :             if (keys == NULL) goto failed;

  009cf	48 85 c0	 test	 rax, rax
  009d2	0f 84 62 f8 ff
	ff		 je	 $failed$25874

; 5041 :             for (i = 0; i < len; i++) {

  009d8	45 33 c9	 xor	 r9d, r9d
  009db	4c 89 4d a7	 mov	 QWORD PTR i$1$[rbp-169], r9
  009df	4c 39 4d af	 cmp	 QWORD PTR len$1$[rbp-169], r9
  009e3	7e 45		 jle	 SHORT $LN431@obj2ast_ex@2
  009e5	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL435@obj2ast_ex@2:

; 5042 :                 expr_ty value;
; 5043 :                 res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);

  009f0	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  009f4	48 8d 55 cf	 lea	 rdx, QWORD PTR value$26152[rbp-169]
  009f8	4c 8b c6	 mov	 r8, rsi
  009fb	4a 8b 0c c9	 mov	 rcx, QWORD PTR [rcx+r9*8]
  009ff	e8 00 00 00 00	 call	 obj2ast_expr

; 5044 :                 if (res != 0) goto failed;

  00a04	85 c0		 test	 eax, eax
  00a06	0f 85 2e f8 ff
	ff		 jne	 $failed$25874

; 5045 :                 asdl_seq_SET(keys, i, value);

  00a0c	4c 8b 4d a7	 mov	 r9, QWORD PTR i$1$[rbp-169]
  00a10	48 8b 4d 9f	 mov	 rcx, QWORD PTR keys$1$[rbp-169]
  00a14	48 8b 45 cf	 mov	 rax, QWORD PTR value$26152[rbp-169]
  00a18	4a 89 44 c9 08	 mov	 QWORD PTR [rcx+r9*8+8], rax
  00a1d	49 ff c1	 inc	 r9
  00a20	4c 89 4d a7	 mov	 QWORD PTR i$1$[rbp-169], r9
  00a24	4c 3b 4d af	 cmp	 r9, QWORD PTR len$1$[rbp-169]
  00a28	7c c6		 jl	 SHORT $LL435@obj2ast_ex@2
$LN431@obj2ast_ex@2:

; 5046 :             }
; 5047 :             Py_CLEAR(tmp);

  00a2a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00a31	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  00a38	4c 8b cb	 mov	 r9, rbx
  00a3b	41 b8 b7 13 00
	00		 mov	 r8d, 5047		; 000013b7H
  00a41	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00a49	e8 00 00 00 00	 call	 _PyParallel_Guard
  00a4e	85 c0		 test	 eax, eax
  00a50	75 08		 jne	 SHORT $LN430@obj2ast_ex@2
  00a52	48 8b cb	 mov	 rcx, rbx
  00a55	e8 00 00 00 00	 call	 _Py_DecRef
$LN430@obj2ast_ex@2:

; 5051 :         }
; 5052 :         if (_PyObject_HasAttrId(obj, &PyId_values)) {

  00a5a	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_values
  00a5f	48 8b cf	 mov	 rcx, rdi
  00a62	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  00a66	48 8b d3	 mov	 rdx, rbx
  00a69	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00a6e	85 c0		 test	 eax, eax
  00a70	0f 84 ec 00 00
	00		 je	 $LN426@obj2ast_ex@2

; 5053 :             int res;
; 5054 :             Py_ssize_t len;
; 5055 :             Py_ssize_t i;
; 5056 :             tmp = _PyObject_GetAttrId(obj, &PyId_values);

  00a76	48 8b d3	 mov	 rdx, rbx
  00a79	48 8b cf	 mov	 rcx, rdi
  00a7c	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00a81	48 8b d8	 mov	 rbx, rax

; 5057 :             if (tmp == NULL) goto failed;

  00a84	48 85 c0	 test	 rax, rax
  00a87	0f 84 c0 1d 00
	00		 je	 $LN622@obj2ast_ex@2

; 5058 :             if (!PyList_Check(tmp)) {

  00a8d	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  00a91	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  00a9c	75 10		 jne	 SHORT $LN424@obj2ast_ex@2

; 5059 :                 PyErr_Format(PyExc_TypeError, "Dict field \"values\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  00a9e	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00aa2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@GGCPIMOJ@Dict?5field?5?$CCvalues?$CC?5must?5be?5a?5li@

; 5060 :                 goto failed;

  00aa9	e9 80 f7 ff ff	 jmp	 $LN624@obj2ast_ex@2
$LN424@obj2ast_ex@2:

; 5061 :             }
; 5062 :             len = PyList_GET_SIZE(tmp);

  00aae	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 5063 :             values = asdl_seq_new(len, arena);

  00ab2	48 8b d6	 mov	 rdx, rsi
  00ab5	48 8b c8	 mov	 rcx, rax
  00ab8	48 89 45 a7	 mov	 QWORD PTR len$1$[rbp-169], rax
  00abc	e8 00 00 00 00	 call	 asdl_seq_new
  00ac1	48 89 45 97	 mov	 QWORD PTR values$1$[rbp-169], rax

; 5064 :             if (values == NULL) goto failed;

  00ac5	48 85 c0	 test	 rax, rax
  00ac8	0f 84 6c f7 ff
	ff		 je	 $failed$25874

; 5065 :             for (i = 0; i < len; i++) {

  00ace	33 ff		 xor	 edi, edi
  00ad0	48 39 7d a7	 cmp	 QWORD PTR len$1$[rbp-169], rdi
  00ad4	7e 3b		 jle	 SHORT $LN418@obj2ast_ex@2
  00ad6	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL422@obj2ast_ex@2:

; 5066 :                 expr_ty value;
; 5067 :                 res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);

  00ae0	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00ae4	48 8d 55 cf	 lea	 rdx, QWORD PTR value$26180[rbp-169]
  00ae8	4c 8b c6	 mov	 r8, rsi
  00aeb	48 8b 0c f9	 mov	 rcx, QWORD PTR [rcx+rdi*8]
  00aef	e8 00 00 00 00	 call	 obj2ast_expr

; 5068 :                 if (res != 0) goto failed;

  00af4	85 c0		 test	 eax, eax
  00af6	0f 85 3e f7 ff
	ff		 jne	 $failed$25874

; 5069 :                 asdl_seq_SET(values, i, value);

  00afc	48 8b 4d 97	 mov	 rcx, QWORD PTR values$1$[rbp-169]
  00b00	48 8b 45 cf	 mov	 rax, QWORD PTR value$26180[rbp-169]
  00b04	48 ff c7	 inc	 rdi
  00b07	48 89 04 f9	 mov	 QWORD PTR [rcx+rdi*8], rax
  00b0b	48 3b 7d a7	 cmp	 rdi, QWORD PTR len$1$[rbp-169]
  00b0f	7c cf		 jl	 SHORT $LL422@obj2ast_ex@2
$LN418@obj2ast_ex@2:

; 5070 :             }
; 5071 :             Py_CLEAR(tmp);

  00b11	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00b18	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  00b1f	4c 8b cb	 mov	 r9, rbx
  00b22	41 b8 cf 13 00
	00		 mov	 r8d, 5071		; 000013cfH
  00b28	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00b30	e8 00 00 00 00	 call	 _PyParallel_Guard
  00b35	85 c0		 test	 eax, eax
  00b37	75 0a		 jne	 SHORT $LN417@obj2ast_ex@2
  00b39	48 8b cb	 mov	 rcx, rbx
  00b3c	33 db		 xor	 ebx, ebx
  00b3e	e8 00 00 00 00	 call	 _Py_DecRef
$LN417@obj2ast_ex@2:

; 5075 :         }
; 5076 :         *out = Dict(keys, values, lineno, col_offset, arena);

  00b43	44 8b 4d 67	 mov	 r9d, DWORD PTR col_offset$[rbp-169]
  00b47	44 8b 45 7f	 mov	 r8d, DWORD PTR lineno$[rbp-169]
  00b4b	48 8b 55 97	 mov	 rdx, QWORD PTR values$1$[rbp-169]
  00b4f	48 8b 4d 9f	 mov	 rcx, QWORD PTR keys$1$[rbp-169]
  00b53	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  00b58	e8 00 00 00 00	 call	 _Py_Dict

; 5077 :         if (*out == NULL) goto failed;
; 5078 :         return 0;

  00b5d	e9 9a 1c 00 00	 jmp	 $LN625@obj2ast_ex@2
$LN426@obj2ast_ex@2:

; 5072 :         } else {
; 5073 :             PyErr_SetString(PyExc_TypeError, "required field \"values\" missing from Dict");

  00b62	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@CCGGNJEC@required?5field?5?$CCvalues?$CC?5missing?5@

; 5074 :             return 1;

  00b69	e9 d3 1c 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN439@obj2ast_ex@2:

; 5048 :         } else {
; 5049 :             PyErr_SetString(PyExc_TypeError, "required field \"keys\" missing from Dict");

  00b6e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@JMGLEFIH@required?5field?5?$CCkeys?$CC?5missing?5fr@

; 5050 :             return 1;

  00b75	e9 c7 1c 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN440@obj2ast_ex@2:

; 5079 :     }
; 5080 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Set_type);

  00b7a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Set_type
  00b81	e8 00 00 00 00	 call	 PyObject_IsInstance

; 5081 :     if (isinstance == -1) {

  00b86	83 f8 ff	 cmp	 eax, -1

; 5082 :         return 1;

  00b89	0f 84 be 1c 00
	00		 je	 $LN622@obj2ast_ex@2

; 5083 :     }
; 5084 :     if (isinstance) {
; 5085 :         asdl_seq* elts;
; 5086 : 
; 5087 :         if (_PyObject_HasAttrId(obj, &PyId_elts)) {

  00b8f	48 8b cf	 mov	 rcx, rdi
  00b92	85 c0		 test	 eax, eax
  00b94	0f 84 0d 01 00
	00		 je	 $LN411@obj2ast_ex@2
  00b9a	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_elts
  00b9f	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  00ba3	48 8b d3	 mov	 rdx, rbx
  00ba6	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00bab	85 c0		 test	 eax, eax
  00bad	0f 84 e8 00 00
	00		 je	 $LN410@obj2ast_ex@2

; 5088 :             int res;
; 5089 :             Py_ssize_t len;
; 5090 :             Py_ssize_t i;
; 5091 :             tmp = _PyObject_GetAttrId(obj, &PyId_elts);

  00bb3	48 8b d3	 mov	 rdx, rbx
  00bb6	48 8b cf	 mov	 rcx, rdi
  00bb9	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00bbe	48 8b d8	 mov	 rbx, rax

; 5092 :             if (tmp == NULL) goto failed;

  00bc1	48 85 c0	 test	 rax, rax
  00bc4	0f 84 83 1c 00
	00		 je	 $LN622@obj2ast_ex@2

; 5093 :             if (!PyList_Check(tmp)) {

  00bca	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  00bce	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  00bd9	75 10		 jne	 SHORT $LN408@obj2ast_ex@2

; 5094 :                 PyErr_Format(PyExc_TypeError, "Set field \"elts\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  00bdb	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00bdf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@KGPNPPNE@Set?5field?5?$CCelts?$CC?5must?5be?5a?5list?0@

; 5095 :                 goto failed;

  00be6	e9 43 f6 ff ff	 jmp	 $LN624@obj2ast_ex@2
$LN408@obj2ast_ex@2:

; 5096 :             }
; 5097 :             len = PyList_GET_SIZE(tmp);

  00beb	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 5098 :             elts = asdl_seq_new(len, arena);

  00bef	48 8b d6	 mov	 rdx, rsi
  00bf2	48 8b c8	 mov	 rcx, rax
  00bf5	48 89 45 9f	 mov	 QWORD PTR len$1$[rbp-169], rax
  00bf9	e8 00 00 00 00	 call	 asdl_seq_new
  00bfe	48 89 45 a7	 mov	 QWORD PTR elts$1$[rbp-169], rax

; 5099 :             if (elts == NULL) goto failed;

  00c02	48 85 c0	 test	 rax, rax
  00c05	0f 84 2f f6 ff
	ff		 je	 $failed$25874

; 5100 :             for (i = 0; i < len; i++) {

  00c0b	33 ff		 xor	 edi, edi
  00c0d	48 39 7d 9f	 cmp	 QWORD PTR len$1$[rbp-169], rdi
  00c11	7e 3e		 jle	 SHORT $LN402@obj2ast_ex@2
  00c13	66 66 66 66 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL406@obj2ast_ex@2:

; 5101 :                 expr_ty value;
; 5102 :                 res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);

  00c20	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00c24	48 8d 55 cf	 lea	 rdx, QWORD PTR value$26214[rbp-169]
  00c28	4c 8b c6	 mov	 r8, rsi
  00c2b	48 8b 0c f9	 mov	 rcx, QWORD PTR [rcx+rdi*8]
  00c2f	e8 00 00 00 00	 call	 obj2ast_expr

; 5103 :                 if (res != 0) goto failed;

  00c34	85 c0		 test	 eax, eax
  00c36	0f 85 fe f5 ff
	ff		 jne	 $failed$25874

; 5104 :                 asdl_seq_SET(elts, i, value);

  00c3c	48 8b 4d a7	 mov	 rcx, QWORD PTR elts$1$[rbp-169]
  00c40	48 8b 45 cf	 mov	 rax, QWORD PTR value$26214[rbp-169]
  00c44	48 ff c7	 inc	 rdi
  00c47	48 89 04 f9	 mov	 QWORD PTR [rcx+rdi*8], rax
  00c4b	48 3b 7d 9f	 cmp	 rdi, QWORD PTR len$1$[rbp-169]
  00c4f	7c cf		 jl	 SHORT $LL406@obj2ast_ex@2
$LN402@obj2ast_ex@2:

; 5105 :             }
; 5106 :             Py_CLEAR(tmp);

  00c51	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00c58	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  00c5f	4c 8b cb	 mov	 r9, rbx
  00c62	41 b8 f2 13 00
	00		 mov	 r8d, 5106		; 000013f2H
  00c68	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00c70	e8 00 00 00 00	 call	 _PyParallel_Guard
  00c75	85 c0		 test	 eax, eax
  00c77	75 0a		 jne	 SHORT $LN401@obj2ast_ex@2
  00c79	48 8b cb	 mov	 rcx, rbx
  00c7c	33 db		 xor	 ebx, ebx
  00c7e	e8 00 00 00 00	 call	 _Py_DecRef
$LN401@obj2ast_ex@2:

; 5110 :         }
; 5111 :         *out = Set(elts, lineno, col_offset, arena);

  00c83	44 8b 45 67	 mov	 r8d, DWORD PTR col_offset$[rbp-169]
  00c87	8b 55 7f	 mov	 edx, DWORD PTR lineno$[rbp-169]
  00c8a	48 8b 4d a7	 mov	 rcx, QWORD PTR elts$1$[rbp-169]
  00c8e	4c 8b ce	 mov	 r9, rsi
  00c91	e8 00 00 00 00	 call	 _Py_Set

; 5112 :         if (*out == NULL) goto failed;
; 5113 :         return 0;

  00c96	e9 61 1b 00 00	 jmp	 $LN625@obj2ast_ex@2
$LN410@obj2ast_ex@2:

; 5107 :         } else {
; 5108 :             PyErr_SetString(PyExc_TypeError, "required field \"elts\" missing from Set");

  00c9b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@BPLFHEPK@required?5field?5?$CCelts?$CC?5missing?5fr@

; 5109 :             return 1;

  00ca2	e9 9a 1b 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN411@obj2ast_ex@2:

; 5114 :     }
; 5115 :     isinstance = PyObject_IsInstance(obj, (PyObject*)ListComp_type);

  00ca7	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ListComp_type
  00cae	e8 00 00 00 00	 call	 PyObject_IsInstance

; 5116 :     if (isinstance == -1) {

  00cb3	83 f8 ff	 cmp	 eax, -1

; 5117 :         return 1;

  00cb6	0f 84 91 1b 00
	00		 je	 $LN622@obj2ast_ex@2

; 5118 :     }
; 5119 :     if (isinstance) {
; 5120 :         expr_ty elt;
; 5121 :         asdl_seq* generators;
; 5122 : 
; 5123 :         if (_PyObject_HasAttrId(obj, &PyId_elt)) {

  00cbc	48 8b cf	 mov	 rcx, rdi
  00cbf	85 c0		 test	 eax, eax
  00cc1	0f 84 93 01 00
	00		 je	 $LN395@obj2ast_ex@2
  00cc7	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_elt
  00ccc	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  00cd0	48 8b d3	 mov	 rdx, rbx
  00cd3	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00cd8	85 c0		 test	 eax, eax
  00cda	0f 84 6e 01 00
	00		 je	 $LN394@obj2ast_ex@2

; 5124 :             int res;
; 5125 :             tmp = _PyObject_GetAttrId(obj, &PyId_elt);

  00ce0	48 8b d3	 mov	 rdx, rbx
  00ce3	48 8b cf	 mov	 rcx, rdi
  00ce6	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00ceb	48 8b d8	 mov	 rbx, rax

; 5126 :             if (tmp == NULL) goto failed;

  00cee	48 85 c0	 test	 rax, rax
  00cf1	0f 84 56 1b 00
	00		 je	 $LN622@obj2ast_ex@2

; 5127 :             res = obj2ast_expr(tmp, &elt, arena);

  00cf7	48 8d 55 0f	 lea	 rdx, QWORD PTR elt$26232[rbp-169]
  00cfb	4c 8b c6	 mov	 r8, rsi
  00cfe	48 8b c8	 mov	 rcx, rax
  00d01	e8 00 00 00 00	 call	 obj2ast_expr

; 5128 :             if (res != 0) goto failed;

  00d06	85 c0		 test	 eax, eax
  00d08	0f 85 2c f5 ff
	ff		 jne	 $failed$25874

; 5129 :             Py_CLEAR(tmp);

  00d0e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00d15	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  00d1c	4c 8b cb	 mov	 r9, rbx
  00d1f	41 b8 09 14 00
	00		 mov	 r8d, 5129		; 00001409H
  00d25	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00d2d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00d32	85 c0		 test	 eax, eax
  00d34	75 08		 jne	 SHORT $LN390@obj2ast_ex@2
  00d36	48 8b cb	 mov	 rcx, rbx
  00d39	e8 00 00 00 00	 call	 _Py_DecRef
$LN390@obj2ast_ex@2:

; 5133 :         }
; 5134 :         if (_PyObject_HasAttrId(obj, &PyId_generators)) {

  00d3e	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_generators
  00d43	48 8b cf	 mov	 rcx, rdi
  00d46	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  00d4a	48 8b d3	 mov	 rdx, rbx
  00d4d	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00d52	85 c0		 test	 eax, eax
  00d54	0f 84 e8 00 00
	00		 je	 $LN386@obj2ast_ex@2

; 5135 :             int res;
; 5136 :             Py_ssize_t len;
; 5137 :             Py_ssize_t i;
; 5138 :             tmp = _PyObject_GetAttrId(obj, &PyId_generators);

  00d5a	48 8b d3	 mov	 rdx, rbx
  00d5d	48 8b cf	 mov	 rcx, rdi
  00d60	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00d65	48 8b d8	 mov	 rbx, rax

; 5139 :             if (tmp == NULL) goto failed;

  00d68	48 85 c0	 test	 rax, rax
  00d6b	0f 84 dc 1a 00
	00		 je	 $LN622@obj2ast_ex@2

; 5140 :             if (!PyList_Check(tmp)) {

  00d71	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  00d75	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  00d80	75 10		 jne	 SHORT $LN384@obj2ast_ex@2

; 5141 :                 PyErr_Format(PyExc_TypeError, "ListComp field \"generators\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  00d82	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00d86	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DJ@KIJLIALD@ListComp?5field?5?$CCgenerators?$CC?5must@

; 5142 :                 goto failed;

  00d8d	e9 9c f4 ff ff	 jmp	 $LN624@obj2ast_ex@2
$LN384@obj2ast_ex@2:

; 5143 :             }
; 5144 :             len = PyList_GET_SIZE(tmp);

  00d92	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 5145 :             generators = asdl_seq_new(len, arena);

  00d96	48 8b d6	 mov	 rdx, rsi
  00d99	48 8b c8	 mov	 rcx, rax
  00d9c	48 89 45 9f	 mov	 QWORD PTR len$1$[rbp-169], rax
  00da0	e8 00 00 00 00	 call	 asdl_seq_new
  00da5	48 89 45 a7	 mov	 QWORD PTR generators$1$[rbp-169], rax

; 5146 :             if (generators == NULL) goto failed;

  00da9	48 85 c0	 test	 rax, rax
  00dac	0f 84 88 f4 ff
	ff		 je	 $failed$25874

; 5147 :             for (i = 0; i < len; i++) {

  00db2	33 ff		 xor	 edi, edi
  00db4	48 39 7d 9f	 cmp	 QWORD PTR len$1$[rbp-169], rdi
  00db8	7e 37		 jle	 SHORT $LN378@obj2ast_ex@2
  00dba	66 0f 1f 44 00
	00		 npad	 6
$LL382@obj2ast_ex@2:

; 5148 :                 comprehension_ty value;
; 5149 :                 res = obj2ast_comprehension(PyList_GET_ITEM(tmp, i), &value, arena);

  00dc0	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00dc4	48 8d 55 cf	 lea	 rdx, QWORD PTR value$26264[rbp-169]
  00dc8	4c 8b c6	 mov	 r8, rsi
  00dcb	48 8b 0c f9	 mov	 rcx, QWORD PTR [rcx+rdi*8]
  00dcf	e8 00 00 00 00	 call	 obj2ast_comprehension

; 5150 :                 if (res != 0) goto failed;

  00dd4	85 c0		 test	 eax, eax
  00dd6	0f 85 5e f4 ff
	ff		 jne	 $failed$25874

; 5151 :                 asdl_seq_SET(generators, i, value);

  00ddc	48 8b 4d a7	 mov	 rcx, QWORD PTR generators$1$[rbp-169]
  00de0	48 8b 45 cf	 mov	 rax, QWORD PTR value$26264[rbp-169]
  00de4	48 ff c7	 inc	 rdi
  00de7	48 89 04 f9	 mov	 QWORD PTR [rcx+rdi*8], rax
  00deb	48 3b 7d 9f	 cmp	 rdi, QWORD PTR len$1$[rbp-169]
  00def	7c cf		 jl	 SHORT $LL382@obj2ast_ex@2
$LN378@obj2ast_ex@2:

; 5152 :             }
; 5153 :             Py_CLEAR(tmp);

  00df1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00df8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  00dff	4c 8b cb	 mov	 r9, rbx
  00e02	41 b8 21 14 00
	00		 mov	 r8d, 5153		; 00001421H
  00e08	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00e10	e8 00 00 00 00	 call	 _PyParallel_Guard
  00e15	85 c0		 test	 eax, eax
  00e17	75 0a		 jne	 SHORT $LN377@obj2ast_ex@2
  00e19	48 8b cb	 mov	 rcx, rbx
  00e1c	33 db		 xor	 ebx, ebx
  00e1e	e8 00 00 00 00	 call	 _Py_DecRef
$LN377@obj2ast_ex@2:

; 5157 :         }
; 5158 :         *out = ListComp(elt, generators, lineno, col_offset, arena);

  00e23	44 8b 4d 67	 mov	 r9d, DWORD PTR col_offset$[rbp-169]
  00e27	44 8b 45 7f	 mov	 r8d, DWORD PTR lineno$[rbp-169]
  00e2b	48 8b 55 a7	 mov	 rdx, QWORD PTR generators$1$[rbp-169]
  00e2f	48 8b 4d 0f	 mov	 rcx, QWORD PTR elt$26232[rbp-169]
  00e33	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  00e38	e8 00 00 00 00	 call	 _Py_ListComp

; 5159 :         if (*out == NULL) goto failed;
; 5160 :         return 0;

  00e3d	e9 ba 19 00 00	 jmp	 $LN625@obj2ast_ex@2
$LN386@obj2ast_ex@2:

; 5154 :         } else {
; 5155 :             PyErr_SetString(PyExc_TypeError, "required field \"generators\" missing from ListComp");

  00e42	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@PMIDIDFO@required?5field?5?$CCgenerators?$CC?5miss@

; 5156 :             return 1;

  00e49	e9 f3 19 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN394@obj2ast_ex@2:

; 5130 :         } else {
; 5131 :             PyErr_SetString(PyExc_TypeError, "required field \"elt\" missing from ListComp");

  00e4e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@EDCOOJLD@required?5field?5?$CCelt?$CC?5missing?5fro@

; 5132 :             return 1;

  00e55	e9 e7 19 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN395@obj2ast_ex@2:

; 5161 :     }
; 5162 :     isinstance = PyObject_IsInstance(obj, (PyObject*)SetComp_type);

  00e5a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR SetComp_type
  00e61	e8 00 00 00 00	 call	 PyObject_IsInstance

; 5163 :     if (isinstance == -1) {

  00e66	83 f8 ff	 cmp	 eax, -1

; 5164 :         return 1;

  00e69	0f 84 de 19 00
	00		 je	 $LN622@obj2ast_ex@2

; 5165 :     }
; 5166 :     if (isinstance) {
; 5167 :         expr_ty elt;
; 5168 :         asdl_seq* generators;
; 5169 : 
; 5170 :         if (_PyObject_HasAttrId(obj, &PyId_elt)) {

  00e6f	48 8b cf	 mov	 rcx, rdi
  00e72	85 c0		 test	 eax, eax
  00e74	0f 84 90 01 00
	00		 je	 $LN371@obj2ast_ex@2
  00e7a	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_elt
  00e7f	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  00e83	48 8b d3	 mov	 rdx, rbx
  00e86	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00e8b	85 c0		 test	 eax, eax
  00e8d	0f 84 6b 01 00
	00		 je	 $LN370@obj2ast_ex@2

; 5171 :             int res;
; 5172 :             tmp = _PyObject_GetAttrId(obj, &PyId_elt);

  00e93	48 8b d3	 mov	 rdx, rbx
  00e96	48 8b cf	 mov	 rcx, rdi
  00e99	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00e9e	48 8b d8	 mov	 rbx, rax

; 5173 :             if (tmp == NULL) goto failed;

  00ea1	48 85 c0	 test	 rax, rax
  00ea4	0f 84 a3 19 00
	00		 je	 $LN622@obj2ast_ex@2

; 5174 :             res = obj2ast_expr(tmp, &elt, arena);

  00eaa	48 8d 55 ff	 lea	 rdx, QWORD PTR elt$26282[rbp-169]
  00eae	4c 8b c6	 mov	 r8, rsi
  00eb1	48 8b c8	 mov	 rcx, rax
  00eb4	e8 00 00 00 00	 call	 obj2ast_expr

; 5175 :             if (res != 0) goto failed;

  00eb9	85 c0		 test	 eax, eax
  00ebb	0f 85 79 f3 ff
	ff		 jne	 $failed$25874

; 5176 :             Py_CLEAR(tmp);

  00ec1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00ec8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  00ecf	4c 8b cb	 mov	 r9, rbx
  00ed2	41 b8 38 14 00
	00		 mov	 r8d, 5176		; 00001438H
  00ed8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00ee0	e8 00 00 00 00	 call	 _PyParallel_Guard
  00ee5	85 c0		 test	 eax, eax
  00ee7	75 08		 jne	 SHORT $LN366@obj2ast_ex@2
  00ee9	48 8b cb	 mov	 rcx, rbx
  00eec	e8 00 00 00 00	 call	 _Py_DecRef
$LN366@obj2ast_ex@2:

; 5180 :         }
; 5181 :         if (_PyObject_HasAttrId(obj, &PyId_generators)) {

  00ef1	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_generators
  00ef6	48 8b cf	 mov	 rcx, rdi
  00ef9	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  00efd	48 8b d3	 mov	 rdx, rbx
  00f00	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00f05	85 c0		 test	 eax, eax
  00f07	0f 84 e5 00 00
	00		 je	 $LN362@obj2ast_ex@2

; 5182 :             int res;
; 5183 :             Py_ssize_t len;
; 5184 :             Py_ssize_t i;
; 5185 :             tmp = _PyObject_GetAttrId(obj, &PyId_generators);

  00f0d	48 8b d3	 mov	 rdx, rbx
  00f10	48 8b cf	 mov	 rcx, rdi
  00f13	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00f18	48 8b d8	 mov	 rbx, rax

; 5186 :             if (tmp == NULL) goto failed;

  00f1b	48 85 c0	 test	 rax, rax
  00f1e	0f 84 29 19 00
	00		 je	 $LN622@obj2ast_ex@2

; 5187 :             if (!PyList_Check(tmp)) {

  00f24	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  00f28	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  00f33	75 10		 jne	 SHORT $LN360@obj2ast_ex@2

; 5188 :                 PyErr_Format(PyExc_TypeError, "SetComp field \"generators\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  00f35	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00f39	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DI@MNDNMCPF@SetComp?5field?5?$CCgenerators?$CC?5must?5@

; 5189 :                 goto failed;

  00f40	e9 e9 f2 ff ff	 jmp	 $LN624@obj2ast_ex@2
$LN360@obj2ast_ex@2:

; 5190 :             }
; 5191 :             len = PyList_GET_SIZE(tmp);

  00f45	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 5192 :             generators = asdl_seq_new(len, arena);

  00f49	48 8b d6	 mov	 rdx, rsi
  00f4c	48 8b c8	 mov	 rcx, rax
  00f4f	48 89 45 9f	 mov	 QWORD PTR len$1$[rbp-169], rax
  00f53	e8 00 00 00 00	 call	 asdl_seq_new
  00f58	48 89 45 a7	 mov	 QWORD PTR generators$1$[rbp-169], rax

; 5193 :             if (generators == NULL) goto failed;

  00f5c	48 85 c0	 test	 rax, rax
  00f5f	0f 84 d5 f2 ff
	ff		 je	 $failed$25874

; 5194 :             for (i = 0; i < len; i++) {

  00f65	33 ff		 xor	 edi, edi
  00f67	48 39 7d 9f	 cmp	 QWORD PTR len$1$[rbp-169], rdi
  00f6b	7e 34		 jle	 SHORT $LN354@obj2ast_ex@2
  00f6d	0f 1f 00	 npad	 3
$LL358@obj2ast_ex@2:

; 5195 :                 comprehension_ty value;
; 5196 :                 res = obj2ast_comprehension(PyList_GET_ITEM(tmp, i), &value, arena);

  00f70	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00f74	48 8d 55 0f	 lea	 rdx, QWORD PTR value$26314[rbp-169]
  00f78	4c 8b c6	 mov	 r8, rsi
  00f7b	48 8b 0c f9	 mov	 rcx, QWORD PTR [rcx+rdi*8]
  00f7f	e8 00 00 00 00	 call	 obj2ast_comprehension

; 5197 :                 if (res != 0) goto failed;

  00f84	85 c0		 test	 eax, eax
  00f86	0f 85 ae f2 ff
	ff		 jne	 $failed$25874

; 5198 :                 asdl_seq_SET(generators, i, value);

  00f8c	48 8b 4d a7	 mov	 rcx, QWORD PTR generators$1$[rbp-169]
  00f90	48 8b 45 0f	 mov	 rax, QWORD PTR value$26314[rbp-169]
  00f94	48 ff c7	 inc	 rdi
  00f97	48 89 04 f9	 mov	 QWORD PTR [rcx+rdi*8], rax
  00f9b	48 3b 7d 9f	 cmp	 rdi, QWORD PTR len$1$[rbp-169]
  00f9f	7c cf		 jl	 SHORT $LL358@obj2ast_ex@2
$LN354@obj2ast_ex@2:

; 5199 :             }
; 5200 :             Py_CLEAR(tmp);

  00fa1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00fa8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  00faf	4c 8b cb	 mov	 r9, rbx
  00fb2	41 b8 50 14 00
	00		 mov	 r8d, 5200		; 00001450H
  00fb8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00fc0	e8 00 00 00 00	 call	 _PyParallel_Guard
  00fc5	85 c0		 test	 eax, eax
  00fc7	75 0a		 jne	 SHORT $LN353@obj2ast_ex@2
  00fc9	48 8b cb	 mov	 rcx, rbx
  00fcc	33 db		 xor	 ebx, ebx
  00fce	e8 00 00 00 00	 call	 _Py_DecRef
$LN353@obj2ast_ex@2:

; 5204 :         }
; 5205 :         *out = SetComp(elt, generators, lineno, col_offset, arena);

  00fd3	44 8b 4d 67	 mov	 r9d, DWORD PTR col_offset$[rbp-169]
  00fd7	44 8b 45 7f	 mov	 r8d, DWORD PTR lineno$[rbp-169]
  00fdb	48 8b 55 a7	 mov	 rdx, QWORD PTR generators$1$[rbp-169]
  00fdf	48 8b 4d ff	 mov	 rcx, QWORD PTR elt$26282[rbp-169]
  00fe3	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  00fe8	e8 00 00 00 00	 call	 _Py_SetComp

; 5206 :         if (*out == NULL) goto failed;
; 5207 :         return 0;

  00fed	e9 0a 18 00 00	 jmp	 $LN625@obj2ast_ex@2
$LN362@obj2ast_ex@2:

; 5201 :         } else {
; 5202 :             PyErr_SetString(PyExc_TypeError, "required field \"generators\" missing from SetComp");

  00ff2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@BADNOGEO@required?5field?5?$CCgenerators?$CC?5miss@

; 5203 :             return 1;

  00ff9	e9 43 18 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN370@obj2ast_ex@2:

; 5177 :         } else {
; 5178 :             PyErr_SetString(PyExc_TypeError, "required field \"elt\" missing from SetComp");

  00ffe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@GNDGBNHN@required?5field?5?$CCelt?$CC?5missing?5fro@

; 5179 :             return 1;

  01005	e9 37 18 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN371@obj2ast_ex@2:

; 5208 :     }
; 5209 :     isinstance = PyObject_IsInstance(obj, (PyObject*)DictComp_type);

  0100a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR DictComp_type
  01011	e8 00 00 00 00	 call	 PyObject_IsInstance

; 5210 :     if (isinstance == -1) {

  01016	83 f8 ff	 cmp	 eax, -1

; 5211 :         return 1;

  01019	0f 84 2e 18 00
	00		 je	 $LN622@obj2ast_ex@2

; 5212 :     }
; 5213 :     if (isinstance) {
; 5214 :         expr_ty key;
; 5215 :         expr_ty value;
; 5216 :         asdl_seq* generators;
; 5217 : 
; 5218 :         if (_PyObject_HasAttrId(obj, &PyId_key)) {

  0101f	48 8b cf	 mov	 rcx, rdi
  01022	85 c0		 test	 eax, eax
  01024	0f 84 23 02 00
	00		 je	 $LN347@obj2ast_ex@2
  0102a	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_key
  0102f	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  01033	48 8b d3	 mov	 rdx, rbx
  01036	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0103b	85 c0		 test	 eax, eax
  0103d	0f 84 fe 01 00
	00		 je	 $LN346@obj2ast_ex@2

; 5219 :             int res;
; 5220 :             tmp = _PyObject_GetAttrId(obj, &PyId_key);

  01043	48 8b d3	 mov	 rdx, rbx
  01046	48 8b cf	 mov	 rcx, rdi
  01049	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0104e	48 8b d8	 mov	 rbx, rax

; 5221 :             if (tmp == NULL) goto failed;

  01051	48 85 c0	 test	 rax, rax
  01054	0f 84 f3 17 00
	00		 je	 $LN622@obj2ast_ex@2

; 5222 :             res = obj2ast_expr(tmp, &key, arena);

  0105a	48 8d 55 e7	 lea	 rdx, QWORD PTR key$26332[rbp-169]
  0105e	4c 8b c6	 mov	 r8, rsi
  01061	48 8b c8	 mov	 rcx, rax
  01064	e8 00 00 00 00	 call	 obj2ast_expr

; 5223 :             if (res != 0) goto failed;

  01069	85 c0		 test	 eax, eax
  0106b	0f 85 c9 f1 ff
	ff		 jne	 $failed$25874

; 5224 :             Py_CLEAR(tmp);

  01071	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01078	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  0107f	4c 8b cb	 mov	 r9, rbx
  01082	41 b8 68 14 00
	00		 mov	 r8d, 5224		; 00001468H
  01088	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01090	e8 00 00 00 00	 call	 _PyParallel_Guard
  01095	85 c0		 test	 eax, eax
  01097	75 08		 jne	 SHORT $LN342@obj2ast_ex@2
  01099	48 8b cb	 mov	 rcx, rbx
  0109c	e8 00 00 00 00	 call	 _Py_DecRef
$LN342@obj2ast_ex@2:

; 5228 :         }
; 5229 :         if (_PyObject_HasAttrId(obj, &PyId_value)) {

  010a1	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_value
  010a6	48 8b cf	 mov	 rcx, rdi
  010a9	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  010ad	48 8b d3	 mov	 rdx, rbx
  010b0	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  010b5	85 c0		 test	 eax, eax
  010b7	0f 84 78 01 00
	00		 je	 $LN338@obj2ast_ex@2

; 5230 :             int res;
; 5231 :             tmp = _PyObject_GetAttrId(obj, &PyId_value);

  010bd	48 8b d3	 mov	 rdx, rbx
  010c0	48 8b cf	 mov	 rcx, rdi
  010c3	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  010c8	48 8b d8	 mov	 rbx, rax

; 5232 :             if (tmp == NULL) goto failed;

  010cb	48 85 c0	 test	 rax, rax
  010ce	0f 84 79 17 00
	00		 je	 $LN622@obj2ast_ex@2

; 5233 :             res = obj2ast_expr(tmp, &value, arena);

  010d4	48 8d 55 1f	 lea	 rdx, QWORD PTR value$26333[rbp-169]
  010d8	4c 8b c6	 mov	 r8, rsi
  010db	48 8b c8	 mov	 rcx, rax
  010de	e8 00 00 00 00	 call	 obj2ast_expr

; 5234 :             if (res != 0) goto failed;

  010e3	85 c0		 test	 eax, eax
  010e5	0f 85 4f f1 ff
	ff		 jne	 $failed$25874

; 5235 :             Py_CLEAR(tmp);

  010eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  010f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  010f9	4c 8b cb	 mov	 r9, rbx
  010fc	41 b8 73 14 00
	00		 mov	 r8d, 5235		; 00001473H
  01102	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0110a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0110f	85 c0		 test	 eax, eax
  01111	75 08		 jne	 SHORT $LN334@obj2ast_ex@2
  01113	48 8b cb	 mov	 rcx, rbx
  01116	e8 00 00 00 00	 call	 _Py_DecRef
$LN334@obj2ast_ex@2:

; 5239 :         }
; 5240 :         if (_PyObject_HasAttrId(obj, &PyId_generators)) {

  0111b	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_generators
  01120	48 8b cf	 mov	 rcx, rdi
  01123	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  01127	48 8b d3	 mov	 rdx, rbx
  0112a	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0112f	85 c0		 test	 eax, eax
  01131	0f 84 f2 00 00
	00		 je	 $LN330@obj2ast_ex@2

; 5241 :             int res;
; 5242 :             Py_ssize_t len;
; 5243 :             Py_ssize_t i;
; 5244 :             tmp = _PyObject_GetAttrId(obj, &PyId_generators);

  01137	48 8b d3	 mov	 rdx, rbx
  0113a	48 8b cf	 mov	 rcx, rdi
  0113d	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  01142	48 8b d8	 mov	 rbx, rax

; 5245 :             if (tmp == NULL) goto failed;

  01145	48 85 c0	 test	 rax, rax
  01148	0f 84 ff 16 00
	00		 je	 $LN622@obj2ast_ex@2

; 5246 :             if (!PyList_Check(tmp)) {

  0114e	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  01152	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  0115d	75 10		 jne	 SHORT $LN328@obj2ast_ex@2

; 5247 :                 PyErr_Format(PyExc_TypeError, "DictComp field \"generators\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  0115f	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  01163	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DJ@CAGFCIFA@DictComp?5field?5?$CCgenerators?$CC?5must@

; 5248 :                 goto failed;

  0116a	e9 bf f0 ff ff	 jmp	 $LN624@obj2ast_ex@2
$LN328@obj2ast_ex@2:

; 5249 :             }
; 5250 :             len = PyList_GET_SIZE(tmp);

  0116f	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 5251 :             generators = asdl_seq_new(len, arena);

  01173	48 8b d6	 mov	 rdx, rsi
  01176	48 8b c8	 mov	 rcx, rax
  01179	48 89 45 9f	 mov	 QWORD PTR len$1$[rbp-169], rax
  0117d	e8 00 00 00 00	 call	 asdl_seq_new
  01182	48 89 45 a7	 mov	 QWORD PTR generators$1$[rbp-169], rax

; 5252 :             if (generators == NULL) goto failed;

  01186	48 85 c0	 test	 rax, rax
  01189	0f 84 ab f0 ff
	ff		 je	 $failed$25874

; 5253 :             for (i = 0; i < len; i++) {

  0118f	33 ff		 xor	 edi, edi
  01191	48 39 7d 9f	 cmp	 QWORD PTR len$1$[rbp-169], rdi
  01195	7e 3a		 jle	 SHORT $LN322@obj2ast_ex@2
  01197	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL326@obj2ast_ex@2:

; 5254 :                 comprehension_ty value;
; 5255 :                 res = obj2ast_comprehension(PyList_GET_ITEM(tmp, i), &value, arena);

  011a0	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  011a4	48 8d 55 ff	 lea	 rdx, QWORD PTR value$26380[rbp-169]
  011a8	4c 8b c6	 mov	 r8, rsi
  011ab	48 8b 0c f9	 mov	 rcx, QWORD PTR [rcx+rdi*8]
  011af	e8 00 00 00 00	 call	 obj2ast_comprehension

; 5256 :                 if (res != 0) goto failed;

  011b4	85 c0		 test	 eax, eax
  011b6	0f 85 7e f0 ff
	ff		 jne	 $failed$25874

; 5257 :                 asdl_seq_SET(generators, i, value);

  011bc	48 8b 4d a7	 mov	 rcx, QWORD PTR generators$1$[rbp-169]
  011c0	48 8b 45 ff	 mov	 rax, QWORD PTR value$26380[rbp-169]
  011c4	48 ff c7	 inc	 rdi
  011c7	48 89 04 f9	 mov	 QWORD PTR [rcx+rdi*8], rax
  011cb	48 3b 7d 9f	 cmp	 rdi, QWORD PTR len$1$[rbp-169]
  011cf	7c cf		 jl	 SHORT $LL326@obj2ast_ex@2
$LN322@obj2ast_ex@2:

; 5258 :             }
; 5259 :             Py_CLEAR(tmp);

  011d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  011d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  011df	4c 8b cb	 mov	 r9, rbx
  011e2	41 b8 8b 14 00
	00		 mov	 r8d, 5259		; 0000148bH
  011e8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  011f0	e8 00 00 00 00	 call	 _PyParallel_Guard
  011f5	85 c0		 test	 eax, eax
  011f7	75 0a		 jne	 SHORT $LN321@obj2ast_ex@2
  011f9	48 8b cb	 mov	 rcx, rbx
  011fc	33 db		 xor	 ebx, ebx
  011fe	e8 00 00 00 00	 call	 _Py_DecRef
$LN321@obj2ast_ex@2:

; 5263 :         }
; 5264 :         *out = DictComp(key, value, generators, lineno, col_offset, arena);

  01203	8b 45 67	 mov	 eax, DWORD PTR col_offset$[rbp-169]
  01206	44 8b 4d 7f	 mov	 r9d, DWORD PTR lineno$[rbp-169]
  0120a	4c 8b 45 a7	 mov	 r8, QWORD PTR generators$1$[rbp-169]
  0120e	48 8b 55 1f	 mov	 rdx, QWORD PTR value$26333[rbp-169]
  01212	48 8b 4d e7	 mov	 rcx, QWORD PTR key$26332[rbp-169]
  01216	48 89 74 24 28	 mov	 QWORD PTR [rsp+40], rsi
  0121b	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0121f	e8 00 00 00 00	 call	 _Py_DictComp

; 5265 :         if (*out == NULL) goto failed;
; 5266 :         return 0;

  01224	e9 d3 15 00 00	 jmp	 $LN625@obj2ast_ex@2
$LN330@obj2ast_ex@2:

; 5260 :         } else {
; 5261 :             PyErr_SetString(PyExc_TypeError, "required field \"generators\" missing from DictComp");

  01229	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@CAIFLNII@required?5field?5?$CCgenerators?$CC?5miss@

; 5262 :             return 1;

  01230	e9 0c 16 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN338@obj2ast_ex@2:

; 5236 :         } else {
; 5237 :             PyErr_SetString(PyExc_TypeError, "required field \"value\" missing from DictComp");

  01235	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@BFNLHDPP@required?5field?5?$CCvalue?$CC?5missing?5f@

; 5238 :             return 1;

  0123c	e9 00 16 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN346@obj2ast_ex@2:

; 5225 :         } else {
; 5226 :             PyErr_SetString(PyExc_TypeError, "required field \"key\" missing from DictComp");

  01241	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@CBPKJOEB@required?5field?5?$CCkey?$CC?5missing?5fro@

; 5227 :             return 1;

  01248	e9 f4 15 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN347@obj2ast_ex@2:

; 5267 :     }
; 5268 :     isinstance = PyObject_IsInstance(obj, (PyObject*)GeneratorExp_type);

  0124d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR GeneratorExp_type
  01254	e8 00 00 00 00	 call	 PyObject_IsInstance

; 5269 :     if (isinstance == -1) {

  01259	83 f8 ff	 cmp	 eax, -1

; 5270 :         return 1;

  0125c	0f 84 eb 15 00
	00		 je	 $LN622@obj2ast_ex@2

; 5271 :     }
; 5272 :     if (isinstance) {
; 5273 :         expr_ty elt;
; 5274 :         asdl_seq* generators;
; 5275 : 
; 5276 :         if (_PyObject_HasAttrId(obj, &PyId_elt)) {

  01262	48 8b cf	 mov	 rcx, rdi
  01265	85 c0		 test	 eax, eax
  01267	0f 84 8d 01 00
	00		 je	 $LN315@obj2ast_ex@2
  0126d	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_elt
  01272	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  01276	48 8b d3	 mov	 rdx, rbx
  01279	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0127e	85 c0		 test	 eax, eax
  01280	0f 84 68 01 00
	00		 je	 $LN314@obj2ast_ex@2

; 5277 :             int res;
; 5278 :             tmp = _PyObject_GetAttrId(obj, &PyId_elt);

  01286	48 8b d3	 mov	 rdx, rbx
  01289	48 8b cf	 mov	 rcx, rdi
  0128c	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  01291	48 8b d8	 mov	 rbx, rax

; 5279 :             if (tmp == NULL) goto failed;

  01294	48 85 c0	 test	 rax, rax
  01297	0f 84 b0 15 00
	00		 je	 $LN622@obj2ast_ex@2

; 5280 :             res = obj2ast_expr(tmp, &elt, arena);

  0129d	48 8d 55 ef	 lea	 rdx, QWORD PTR elt$26398[rbp-169]
  012a1	4c 8b c6	 mov	 r8, rsi
  012a4	48 8b c8	 mov	 rcx, rax
  012a7	e8 00 00 00 00	 call	 obj2ast_expr

; 5281 :             if (res != 0) goto failed;

  012ac	85 c0		 test	 eax, eax
  012ae	0f 85 86 ef ff
	ff		 jne	 $failed$25874

; 5282 :             Py_CLEAR(tmp);

  012b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  012bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  012c2	4c 8b cb	 mov	 r9, rbx
  012c5	41 b8 a2 14 00
	00		 mov	 r8d, 5282		; 000014a2H
  012cb	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  012d3	e8 00 00 00 00	 call	 _PyParallel_Guard
  012d8	85 c0		 test	 eax, eax
  012da	75 08		 jne	 SHORT $LN310@obj2ast_ex@2
  012dc	48 8b cb	 mov	 rcx, rbx
  012df	e8 00 00 00 00	 call	 _Py_DecRef
$LN310@obj2ast_ex@2:

; 5286 :         }
; 5287 :         if (_PyObject_HasAttrId(obj, &PyId_generators)) {

  012e4	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_generators
  012e9	48 8b cf	 mov	 rcx, rdi
  012ec	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  012f0	48 8b d3	 mov	 rdx, rbx
  012f3	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  012f8	85 c0		 test	 eax, eax
  012fa	0f 84 e2 00 00
	00		 je	 $LN306@obj2ast_ex@2

; 5288 :             int res;
; 5289 :             Py_ssize_t len;
; 5290 :             Py_ssize_t i;
; 5291 :             tmp = _PyObject_GetAttrId(obj, &PyId_generators);

  01300	48 8b d3	 mov	 rdx, rbx
  01303	48 8b cf	 mov	 rcx, rdi
  01306	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0130b	48 8b d8	 mov	 rbx, rax

; 5292 :             if (tmp == NULL) goto failed;

  0130e	48 85 c0	 test	 rax, rax
  01311	0f 84 36 15 00
	00		 je	 $LN622@obj2ast_ex@2

; 5293 :             if (!PyList_Check(tmp)) {

  01317	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  0131b	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  01326	75 10		 jne	 SHORT $LN304@obj2ast_ex@2

; 5294 :                 PyErr_Format(PyExc_TypeError, "GeneratorExp field \"generators\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  01328	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  0132c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DN@BPOKNM@GeneratorExp?5field?5?$CCgenerators?$CC?5@

; 5295 :                 goto failed;

  01333	e9 f6 ee ff ff	 jmp	 $LN624@obj2ast_ex@2
$LN304@obj2ast_ex@2:

; 5296 :             }
; 5297 :             len = PyList_GET_SIZE(tmp);

  01338	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 5298 :             generators = asdl_seq_new(len, arena);

  0133c	48 8b d6	 mov	 rdx, rsi
  0133f	48 8b c8	 mov	 rcx, rax
  01342	48 89 45 9f	 mov	 QWORD PTR len$1$[rbp-169], rax
  01346	e8 00 00 00 00	 call	 asdl_seq_new
  0134b	48 89 45 a7	 mov	 QWORD PTR generators$1$[rbp-169], rax

; 5299 :             if (generators == NULL) goto failed;

  0134f	48 85 c0	 test	 rax, rax
  01352	0f 84 e2 ee ff
	ff		 je	 $failed$25874

; 5300 :             for (i = 0; i < len; i++) {

  01358	33 ff		 xor	 edi, edi
  0135a	48 39 7d 9f	 cmp	 QWORD PTR len$1$[rbp-169], rdi
  0135e	7e 31		 jle	 SHORT $LN298@obj2ast_ex@2
$LL302@obj2ast_ex@2:

; 5301 :                 comprehension_ty value;
; 5302 :                 res = obj2ast_comprehension(PyList_GET_ITEM(tmp, i), &value, arena);

  01360	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  01364	48 8d 55 e7	 lea	 rdx, QWORD PTR value$26430[rbp-169]
  01368	4c 8b c6	 mov	 r8, rsi
  0136b	48 8b 0c f9	 mov	 rcx, QWORD PTR [rcx+rdi*8]
  0136f	e8 00 00 00 00	 call	 obj2ast_comprehension

; 5303 :                 if (res != 0) goto failed;

  01374	85 c0		 test	 eax, eax
  01376	0f 85 be ee ff
	ff		 jne	 $failed$25874

; 5304 :                 asdl_seq_SET(generators, i, value);

  0137c	48 8b 4d a7	 mov	 rcx, QWORD PTR generators$1$[rbp-169]
  01380	48 8b 45 e7	 mov	 rax, QWORD PTR value$26430[rbp-169]
  01384	48 ff c7	 inc	 rdi
  01387	48 89 04 f9	 mov	 QWORD PTR [rcx+rdi*8], rax
  0138b	48 3b 7d 9f	 cmp	 rdi, QWORD PTR len$1$[rbp-169]
  0138f	7c cf		 jl	 SHORT $LL302@obj2ast_ex@2
$LN298@obj2ast_ex@2:

; 5305 :             }
; 5306 :             Py_CLEAR(tmp);

  01391	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01398	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  0139f	4c 8b cb	 mov	 r9, rbx
  013a2	41 b8 ba 14 00
	00		 mov	 r8d, 5306		; 000014baH
  013a8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  013b0	e8 00 00 00 00	 call	 _PyParallel_Guard
  013b5	85 c0		 test	 eax, eax
  013b7	75 0a		 jne	 SHORT $LN297@obj2ast_ex@2
  013b9	48 8b cb	 mov	 rcx, rbx
  013bc	33 db		 xor	 ebx, ebx
  013be	e8 00 00 00 00	 call	 _Py_DecRef
$LN297@obj2ast_ex@2:

; 5310 :         }
; 5311 :         *out = GeneratorExp(elt, generators, lineno, col_offset, arena);

  013c3	44 8b 4d 67	 mov	 r9d, DWORD PTR col_offset$[rbp-169]
  013c7	44 8b 45 7f	 mov	 r8d, DWORD PTR lineno$[rbp-169]
  013cb	48 8b 55 a7	 mov	 rdx, QWORD PTR generators$1$[rbp-169]
  013cf	48 8b 4d ef	 mov	 rcx, QWORD PTR elt$26398[rbp-169]
  013d3	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  013d8	e8 00 00 00 00	 call	 _Py_GeneratorExp

; 5312 :         if (*out == NULL) goto failed;
; 5313 :         return 0;

  013dd	e9 1a 14 00 00	 jmp	 $LN625@obj2ast_ex@2
$LN306@obj2ast_ex@2:

; 5307 :         } else {
; 5308 :             PyErr_SetString(PyExc_TypeError, "required field \"generators\" missing from GeneratorExp");

  013e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DG@FFMKMNIB@required?5field?5?$CCgenerators?$CC?5miss@

; 5309 :             return 1;

  013e9	e9 53 14 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN314@obj2ast_ex@2:

; 5283 :         } else {
; 5284 :             PyErr_SetString(PyExc_TypeError, "required field \"elt\" missing from GeneratorExp");

  013ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@HEOIHGCL@required?5field?5?$CCelt?$CC?5missing?5fro@

; 5285 :             return 1;

  013f5	e9 47 14 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN315@obj2ast_ex@2:

; 5314 :     }
; 5315 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Yield_type);

  013fa	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Yield_type
  01401	e8 00 00 00 00	 call	 PyObject_IsInstance

; 5316 :     if (isinstance == -1) {

  01406	83 f8 ff	 cmp	 eax, -1

; 5317 :         return 1;

  01409	0f 84 3e 14 00
	00		 je	 $LN622@obj2ast_ex@2

; 5318 :     }
; 5319 :     if (isinstance) {
; 5320 :         expr_ty value;
; 5321 : 
; 5322 :         if (_PyObject_HasAttrId(obj, &PyId_value)) {

  0140f	48 8b cf	 mov	 rcx, rdi
  01412	85 c0		 test	 eax, eax
  01414	0f 84 9c 00 00
	00		 je	 $LN291@obj2ast_ex@2
  0141a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  0141f	48 03 45 97	 add	 rax, QWORD PTR tv4095[rbp-169]
  01423	48 8b d0	 mov	 rdx, rax
  01426	48 89 45 ef	 mov	 QWORD PTR tv4036[rbp-169], rax
  0142a	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0142f	85 c0		 test	 eax, eax
  01431	74 63		 je	 SHORT $LN290@obj2ast_ex@2

; 5323 :             int res;
; 5324 :             tmp = _PyObject_GetAttrId(obj, &PyId_value);

  01433	48 8b 55 ef	 mov	 rdx, QWORD PTR tv4036[rbp-169]
  01437	48 8b cf	 mov	 rcx, rdi
  0143a	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0143f	48 8b d8	 mov	 rbx, rax

; 5325 :             if (tmp == NULL) goto failed;

  01442	48 85 c0	 test	 rax, rax
  01445	0f 84 02 14 00
	00		 je	 $LN622@obj2ast_ex@2

; 5326 :             res = obj2ast_expr(tmp, &value, arena);

  0144b	48 8d 55 9f	 lea	 rdx, QWORD PTR value$26448[rbp-169]
  0144f	4c 8b c6	 mov	 r8, rsi
  01452	48 8b c8	 mov	 rcx, rax
  01455	e8 00 00 00 00	 call	 obj2ast_expr

; 5327 :             if (res != 0) goto failed;

  0145a	85 c0		 test	 eax, eax
  0145c	0f 85 d8 ed ff
	ff		 jne	 $failed$25874

; 5328 :             Py_CLEAR(tmp);

  01462	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01469	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  01470	4c 8b cb	 mov	 r9, rbx
  01473	41 b8 d0 14 00
	00		 mov	 r8d, 5328		; 000014d0H
  01479	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01481	e8 00 00 00 00	 call	 _PyParallel_Guard
  01486	85 c0		 test	 eax, eax
  01488	75 14		 jne	 SHORT $LN283@obj2ast_ex@2
  0148a	48 8b cb	 mov	 rcx, rbx
  0148d	33 db		 xor	 ebx, ebx
  0148f	e8 00 00 00 00	 call	 _Py_DecRef

; 5329 :         } else {

  01494	eb 08		 jmp	 SHORT $LN283@obj2ast_ex@2
$LN290@obj2ast_ex@2:

; 5330 :             value = NULL;

  01496	48 c7 45 9f 00
	00 00 00	 mov	 QWORD PTR value$26448[rbp-169], 0
$LN283@obj2ast_ex@2:

; 5331 :         }
; 5332 :         *out = Yield(value, lineno, col_offset, arena);

  0149e	44 8b 45 67	 mov	 r8d, DWORD PTR col_offset$[rbp-169]
  014a2	8b 55 7f	 mov	 edx, DWORD PTR lineno$[rbp-169]
  014a5	48 8b 4d 9f	 mov	 rcx, QWORD PTR value$26448[rbp-169]
  014a9	4c 8b ce	 mov	 r9, rsi
  014ac	e8 00 00 00 00	 call	 _Py_Yield

; 5333 :         if (*out == NULL) goto failed;
; 5334 :         return 0;

  014b1	e9 46 13 00 00	 jmp	 $LN625@obj2ast_ex@2
$LN291@obj2ast_ex@2:

; 5335 :     }
; 5336 :     isinstance = PyObject_IsInstance(obj, (PyObject*)YieldFrom_type);

  014b6	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR YieldFrom_type
  014bd	e8 00 00 00 00	 call	 PyObject_IsInstance

; 5337 :     if (isinstance == -1) {

  014c2	83 f8 ff	 cmp	 eax, -1

; 5338 :         return 1;

  014c5	0f 84 82 13 00
	00		 je	 $LN622@obj2ast_ex@2

; 5339 :     }
; 5340 :     if (isinstance) {
; 5341 :         expr_ty value;
; 5342 : 
; 5343 :         if (_PyObject_HasAttrId(obj, &PyId_value)) {

  014cb	48 8b cf	 mov	 rcx, rdi
  014ce	85 c0		 test	 eax, eax
  014d0	0f 84 99 00 00
	00		 je	 $LN280@obj2ast_ex@2
  014d6	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_value
  014db	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  014df	48 8b d3	 mov	 rdx, rbx
  014e2	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  014e7	85 c0		 test	 eax, eax
  014e9	74 78		 je	 SHORT $LN279@obj2ast_ex@2

; 5344 :             int res;
; 5345 :             tmp = _PyObject_GetAttrId(obj, &PyId_value);

  014eb	48 8b d3	 mov	 rdx, rbx
  014ee	48 8b cf	 mov	 rcx, rdi
  014f1	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  014f6	48 8b d8	 mov	 rbx, rax

; 5346 :             if (tmp == NULL) goto failed;

  014f9	48 85 c0	 test	 rax, rax
  014fc	0f 84 4b 13 00
	00		 je	 $LN622@obj2ast_ex@2

; 5347 :             res = obj2ast_expr(tmp, &value, arena);

  01502	48 8d 55 97	 lea	 rdx, QWORD PTR value$26469[rbp-169]
  01506	4c 8b c6	 mov	 r8, rsi
  01509	48 8b c8	 mov	 rcx, rax
  0150c	e8 00 00 00 00	 call	 obj2ast_expr

; 5348 :             if (res != 0) goto failed;

  01511	85 c0		 test	 eax, eax
  01513	0f 85 21 ed ff
	ff		 jne	 $failed$25874

; 5349 :             Py_CLEAR(tmp);

  01519	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01520	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  01527	4c 8b cb	 mov	 r9, rbx
  0152a	41 b8 e5 14 00
	00		 mov	 r8d, 5349		; 000014e5H
  01530	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01538	e8 00 00 00 00	 call	 _PyParallel_Guard
  0153d	85 c0		 test	 eax, eax
  0153f	75 0a		 jne	 SHORT $LN275@obj2ast_ex@2
  01541	48 8b cb	 mov	 rcx, rbx
  01544	33 db		 xor	 ebx, ebx
  01546	e8 00 00 00 00	 call	 _Py_DecRef
$LN275@obj2ast_ex@2:

; 5353 :         }
; 5354 :         *out = YieldFrom(value, lineno, col_offset, arena);

  0154b	44 8b 45 67	 mov	 r8d, DWORD PTR col_offset$[rbp-169]
  0154f	8b 55 7f	 mov	 edx, DWORD PTR lineno$[rbp-169]
  01552	48 8b 4d 97	 mov	 rcx, QWORD PTR value$26469[rbp-169]
  01556	4c 8b ce	 mov	 r9, rsi
  01559	e8 00 00 00 00	 call	 _Py_YieldFrom

; 5355 :         if (*out == NULL) goto failed;
; 5356 :         return 0;

  0155e	e9 99 12 00 00	 jmp	 $LN625@obj2ast_ex@2
$LN279@obj2ast_ex@2:

; 5350 :         } else {
; 5351 :             PyErr_SetString(PyExc_TypeError, "required field \"value\" missing from YieldFrom");

  01563	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@HEDCCLBN@required?5field?5?$CCvalue?$CC?5missing?5f@

; 5352 :             return 1;

  0156a	e9 d2 12 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN280@obj2ast_ex@2:

; 5357 :     }
; 5358 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Compare_type);

  0156f	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Compare_type
  01576	e8 00 00 00 00	 call	 PyObject_IsInstance

; 5359 :     if (isinstance == -1) {

  0157b	83 f8 ff	 cmp	 eax, -1

; 5360 :         return 1;

  0157e	0f 84 c9 12 00
	00		 je	 $LN622@obj2ast_ex@2

; 5361 :     }
; 5362 :     if (isinstance) {
; 5363 :         expr_ty left;
; 5364 :         asdl_int_seq* ops;
; 5365 :         asdl_seq* comparators;
; 5366 : 
; 5367 :         if (_PyObject_HasAttrId(obj, &PyId_left)) {

  01584	48 8b cf	 mov	 rcx, rdi
  01587	85 c0		 test	 eax, eax
  01589	0f 84 9e 02 00
	00		 je	 $LN269@obj2ast_ex@2
  0158f	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_left
  01594	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  01598	48 8b d3	 mov	 rdx, rbx
  0159b	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  015a0	85 c0		 test	 eax, eax
  015a2	0f 84 79 02 00
	00		 je	 $LN268@obj2ast_ex@2

; 5368 :             int res;
; 5369 :             tmp = _PyObject_GetAttrId(obj, &PyId_left);

  015a8	48 8b d3	 mov	 rdx, rbx
  015ab	48 8b cf	 mov	 rcx, rdi
  015ae	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  015b3	48 8b d8	 mov	 rbx, rax

; 5370 :             if (tmp == NULL) goto failed;

  015b6	48 85 c0	 test	 rax, rax
  015b9	0f 84 8e 12 00
	00		 je	 $LN622@obj2ast_ex@2

; 5371 :             res = obj2ast_expr(tmp, &left, arena);

  015bf	48 8d 55 f7	 lea	 rdx, QWORD PTR left$26490[rbp-169]
  015c3	4c 8b c6	 mov	 r8, rsi
  015c6	48 8b c8	 mov	 rcx, rax
  015c9	e8 00 00 00 00	 call	 obj2ast_expr

; 5372 :             if (res != 0) goto failed;

  015ce	85 c0		 test	 eax, eax
  015d0	0f 85 64 ec ff
	ff		 jne	 $failed$25874

; 5373 :             Py_CLEAR(tmp);

  015d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  015dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  015e4	4c 8b cb	 mov	 r9, rbx
  015e7	41 b8 fd 14 00
	00		 mov	 r8d, 5373		; 000014fdH
  015ed	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  015f5	e8 00 00 00 00	 call	 _PyParallel_Guard
  015fa	85 c0		 test	 eax, eax
  015fc	75 08		 jne	 SHORT $LN264@obj2ast_ex@2
  015fe	48 8b cb	 mov	 rcx, rbx
  01601	e8 00 00 00 00	 call	 _Py_DecRef
$LN264@obj2ast_ex@2:

; 5377 :         }
; 5378 :         if (_PyObject_HasAttrId(obj, &PyId_ops)) {

  01606	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_ops
  0160b	48 8b cf	 mov	 rcx, rdi
  0160e	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  01612	48 8b d3	 mov	 rdx, rbx
  01615	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0161a	85 c0		 test	 eax, eax
  0161c	0f 84 f3 01 00
	00		 je	 $LN260@obj2ast_ex@2

; 5379 :             int res;
; 5380 :             Py_ssize_t len;
; 5381 :             Py_ssize_t i;
; 5382 :             tmp = _PyObject_GetAttrId(obj, &PyId_ops);

  01622	48 8b d3	 mov	 rdx, rbx
  01625	48 8b cf	 mov	 rcx, rdi
  01628	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0162d	48 8b d8	 mov	 rbx, rax

; 5383 :             if (tmp == NULL) goto failed;

  01630	48 85 c0	 test	 rax, rax
  01633	0f 84 14 12 00
	00		 je	 $LN622@obj2ast_ex@2

; 5384 :             if (!PyList_Check(tmp)) {

  01639	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  0163d	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  01648	75 10		 jne	 SHORT $LN258@obj2ast_ex@2

; 5385 :                 PyErr_Format(PyExc_TypeError, "Compare field \"ops\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  0164a	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  0164e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@LPCFPBLI@Compare?5field?5?$CCops?$CC?5must?5be?5a?5li@

; 5386 :                 goto failed;

  01655	e9 d4 eb ff ff	 jmp	 $LN624@obj2ast_ex@2
$LN258@obj2ast_ex@2:

; 5387 :             }
; 5388 :             len = PyList_GET_SIZE(tmp);

  0165a	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 5389 :             ops = asdl_int_seq_new(len, arena);

  0165e	48 8b d6	 mov	 rdx, rsi
  01661	48 8b c8	 mov	 rcx, rax
  01664	48 89 45 b7	 mov	 QWORD PTR len$1$[rbp-169], rax
  01668	e8 00 00 00 00	 call	 asdl_int_seq_new
  0166d	48 8b c8	 mov	 rcx, rax
  01670	48 89 45 e7	 mov	 QWORD PTR ops$1$[rbp-169], rax

; 5390 :             if (ops == NULL) goto failed;

  01674	48 85 c0	 test	 rax, rax
  01677	0f 84 bd eb ff
	ff		 je	 $failed$25874

; 5391 :             for (i = 0; i < len; i++) {

  0167d	33 c0		 xor	 eax, eax
  0167f	48 89 45 9f	 mov	 QWORD PTR i$1$[rbp-169], rax
  01683	48 39 45 b7	 cmp	 QWORD PTR len$1$[rbp-169], rax
  01687	7e 43		 jle	 SHORT $LN252@obj2ast_ex@2
  01689	48 83 c1 08	 add	 rcx, 8
  0168d	48 89 4d a7	 mov	 QWORD PTR tv3992[rbp-169], rcx
$LL256@obj2ast_ex@2:

; 5392 :                 cmpop_ty value;
; 5393 :                 res = obj2ast_cmpop(PyList_GET_ITEM(tmp, i), &value, arena);

  01691	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  01695	48 8d 55 af	 lea	 rdx, QWORD PTR value$26523[rbp-169]
  01699	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0169d	e8 00 00 00 00	 call	 obj2ast_cmpop

; 5394 :                 if (res != 0) goto failed;

  016a2	85 c0		 test	 eax, eax
  016a4	0f 85 90 eb ff
	ff		 jne	 $failed$25874

; 5395 :                 asdl_seq_SET(ops, i, value);

  016aa	48 8b 4d a7	 mov	 rcx, QWORD PTR tv3992[rbp-169]
  016ae	8b 45 af	 mov	 eax, DWORD PTR value$26523[rbp-169]
  016b1	89 01		 mov	 DWORD PTR [rcx], eax
  016b3	48 8b 45 9f	 mov	 rax, QWORD PTR i$1$[rbp-169]
  016b7	48 83 c1 04	 add	 rcx, 4
  016bb	48 ff c0	 inc	 rax
  016be	48 89 4d a7	 mov	 QWORD PTR tv3992[rbp-169], rcx
  016c2	48 89 45 9f	 mov	 QWORD PTR i$1$[rbp-169], rax
  016c6	48 3b 45 b7	 cmp	 rax, QWORD PTR len$1$[rbp-169]
  016ca	7c c5		 jl	 SHORT $LL256@obj2ast_ex@2
$LN252@obj2ast_ex@2:

; 5396 :             }
; 5397 :             Py_CLEAR(tmp);

  016cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  016d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  016da	4c 8b cb	 mov	 r9, rbx
  016dd	41 b8 15 15 00
	00		 mov	 r8d, 5397		; 00001515H
  016e3	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  016eb	e8 00 00 00 00	 call	 _PyParallel_Guard
  016f0	85 c0		 test	 eax, eax
  016f2	75 08		 jne	 SHORT $LN251@obj2ast_ex@2
  016f4	48 8b cb	 mov	 rcx, rbx
  016f7	e8 00 00 00 00	 call	 _Py_DecRef
$LN251@obj2ast_ex@2:

; 5401 :         }
; 5402 :         if (_PyObject_HasAttrId(obj, &PyId_comparators)) {

  016fc	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_comparators
  01701	48 8b cf	 mov	 rcx, rdi
  01704	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  01708	48 8b d3	 mov	 rdx, rbx
  0170b	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  01710	85 c0		 test	 eax, eax
  01712	0f 84 f1 00 00
	00		 je	 $LN247@obj2ast_ex@2

; 5403 :             int res;
; 5404 :             Py_ssize_t len;
; 5405 :             Py_ssize_t i;
; 5406 :             tmp = _PyObject_GetAttrId(obj, &PyId_comparators);

  01718	48 8b d3	 mov	 rdx, rbx
  0171b	48 8b cf	 mov	 rcx, rdi
  0171e	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  01723	48 8b d8	 mov	 rbx, rax

; 5407 :             if (tmp == NULL) goto failed;

  01726	48 85 c0	 test	 rax, rax
  01729	0f 84 1e 11 00
	00		 je	 $LN622@obj2ast_ex@2

; 5408 :             if (!PyList_Check(tmp)) {

  0172f	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  01733	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  0173e	75 10		 jne	 SHORT $LN245@obj2ast_ex@2

; 5409 :                 PyErr_Format(PyExc_TypeError, "Compare field \"comparators\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  01740	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  01744	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DJ@BIJCFAHA@Compare?5field?5?$CCcomparators?$CC?5must@

; 5410 :                 goto failed;

  0174b	e9 de ea ff ff	 jmp	 $LN624@obj2ast_ex@2
$LN245@obj2ast_ex@2:

; 5411 :             }
; 5412 :             len = PyList_GET_SIZE(tmp);

  01750	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 5413 :             comparators = asdl_seq_new(len, arena);

  01754	48 8b d6	 mov	 rdx, rsi
  01757	48 8b c8	 mov	 rcx, rax
  0175a	48 89 45 b7	 mov	 QWORD PTR len$1$[rbp-169], rax
  0175e	e8 00 00 00 00	 call	 asdl_seq_new
  01763	48 89 45 9f	 mov	 QWORD PTR comparators$1$[rbp-169], rax

; 5414 :             if (comparators == NULL) goto failed;

  01767	48 85 c0	 test	 rax, rax
  0176a	0f 84 ca ea ff
	ff		 je	 $failed$25874

; 5415 :             for (i = 0; i < len; i++) {

  01770	33 ff		 xor	 edi, edi
  01772	48 39 7d b7	 cmp	 QWORD PTR len$1$[rbp-169], rdi
  01776	7e 39		 jle	 SHORT $LN239@obj2ast_ex@2
  01778	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL243@obj2ast_ex@2:

; 5416 :                 expr_ty value;
; 5417 :                 res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);

  01780	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  01784	48 8d 55 ef	 lea	 rdx, QWORD PTR value$26551[rbp-169]
  01788	4c 8b c6	 mov	 r8, rsi
  0178b	48 8b 0c f9	 mov	 rcx, QWORD PTR [rcx+rdi*8]
  0178f	e8 00 00 00 00	 call	 obj2ast_expr

; 5418 :                 if (res != 0) goto failed;

  01794	85 c0		 test	 eax, eax
  01796	0f 85 9e ea ff
	ff		 jne	 $failed$25874

; 5419 :                 asdl_seq_SET(comparators, i, value);

  0179c	48 8b 4d 9f	 mov	 rcx, QWORD PTR comparators$1$[rbp-169]
  017a0	48 8b 45 ef	 mov	 rax, QWORD PTR value$26551[rbp-169]
  017a4	48 ff c7	 inc	 rdi
  017a7	48 89 04 f9	 mov	 QWORD PTR [rcx+rdi*8], rax
  017ab	48 3b 7d b7	 cmp	 rdi, QWORD PTR len$1$[rbp-169]
  017af	7c cf		 jl	 SHORT $LL243@obj2ast_ex@2
$LN239@obj2ast_ex@2:

; 5420 :             }
; 5421 :             Py_CLEAR(tmp);

  017b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  017b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  017bf	4c 8b cb	 mov	 r9, rbx
  017c2	41 b8 2d 15 00
	00		 mov	 r8d, 5421		; 0000152dH
  017c8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  017d0	e8 00 00 00 00	 call	 _PyParallel_Guard
  017d5	85 c0		 test	 eax, eax
  017d7	75 0a		 jne	 SHORT $LN238@obj2ast_ex@2
  017d9	48 8b cb	 mov	 rcx, rbx
  017dc	33 db		 xor	 ebx, ebx
  017de	e8 00 00 00 00	 call	 _Py_DecRef
$LN238@obj2ast_ex@2:

; 5425 :         }
; 5426 :         *out = Compare(left, ops, comparators, lineno, col_offset, arena);

  017e3	8b 45 67	 mov	 eax, DWORD PTR col_offset$[rbp-169]
  017e6	44 8b 4d 7f	 mov	 r9d, DWORD PTR lineno$[rbp-169]
  017ea	4c 8b 45 9f	 mov	 r8, QWORD PTR comparators$1$[rbp-169]
  017ee	48 8b 55 e7	 mov	 rdx, QWORD PTR ops$1$[rbp-169]
  017f2	48 8b 4d f7	 mov	 rcx, QWORD PTR left$26490[rbp-169]
  017f6	48 89 74 24 28	 mov	 QWORD PTR [rsp+40], rsi
  017fb	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  017ff	e8 00 00 00 00	 call	 _Py_Compare

; 5427 :         if (*out == NULL) goto failed;
; 5428 :         return 0;

  01804	e9 f3 0f 00 00	 jmp	 $LN625@obj2ast_ex@2
$LN247@obj2ast_ex@2:

; 5422 :         } else {
; 5423 :             PyErr_SetString(PyExc_TypeError, "required field \"comparators\" missing from Compare");

  01809	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@OKCKOOGB@required?5field?5?$CCcomparators?$CC?5mis@

; 5424 :             return 1;

  01810	e9 2c 10 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN260@obj2ast_ex@2:

; 5398 :         } else {
; 5399 :             PyErr_SetString(PyExc_TypeError, "required field \"ops\" missing from Compare");

  01815	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@EJGPDIPB@required?5field?5?$CCops?$CC?5missing?5fro@

; 5400 :             return 1;

  0181c	e9 20 10 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN268@obj2ast_ex@2:

; 5374 :         } else {
; 5375 :             PyErr_SetString(PyExc_TypeError, "required field \"left\" missing from Compare");

  01821	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@IAGPHPKA@required?5field?5?$CCleft?$CC?5missing?5fr@

; 5376 :             return 1;

  01828	e9 14 10 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN269@obj2ast_ex@2:

; 5429 :     }
; 5430 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Call_type);

  0182d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Call_type
  01834	e8 00 00 00 00	 call	 PyObject_IsInstance

; 5431 :     if (isinstance == -1) {

  01839	83 f8 ff	 cmp	 eax, -1

; 5432 :         return 1;

  0183c	0f 84 0b 10 00
	00		 je	 $LN622@obj2ast_ex@2

; 5433 :     }
; 5434 :     if (isinstance) {
; 5435 :         expr_ty func;
; 5436 :         asdl_seq* args;
; 5437 :         asdl_seq* keywords;
; 5438 :         expr_ty starargs;
; 5439 :         expr_ty kwargs;
; 5440 : 
; 5441 :         if (_PyObject_HasAttrId(obj, &PyId_func)) {

  01842	48 8b cf	 mov	 rcx, rdi
  01845	85 c0		 test	 eax, eax
  01847	0f 84 c9 03 00
	00		 je	 $LN232@obj2ast_ex@2
  0184d	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_func
  01852	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  01856	48 8b d3	 mov	 rdx, rbx
  01859	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0185e	85 c0		 test	 eax, eax
  01860	0f 84 a4 03 00
	00		 je	 $LN231@obj2ast_ex@2

; 5442 :             int res;
; 5443 :             tmp = _PyObject_GetAttrId(obj, &PyId_func);

  01866	48 8b d3	 mov	 rdx, rbx
  01869	48 8b cf	 mov	 rcx, rdi
  0186c	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  01871	48 8b d8	 mov	 rbx, rax

; 5444 :             if (tmp == NULL) goto failed;

  01874	48 85 c0	 test	 rax, rax
  01877	0f 84 d0 0f 00
	00		 je	 $LN622@obj2ast_ex@2

; 5445 :             res = obj2ast_expr(tmp, &func, arena);

  0187d	48 8d 55 d7	 lea	 rdx, QWORD PTR func$26569[rbp-169]
  01881	4c 8b c6	 mov	 r8, rsi
  01884	48 8b c8	 mov	 rcx, rax
  01887	e8 00 00 00 00	 call	 obj2ast_expr

; 5446 :             if (res != 0) goto failed;

  0188c	85 c0		 test	 eax, eax
  0188e	0f 85 a6 e9 ff
	ff		 jne	 $failed$25874

; 5447 :             Py_CLEAR(tmp);

  01894	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0189b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  018a2	4c 8b cb	 mov	 r9, rbx
  018a5	41 b8 47 15 00
	00		 mov	 r8d, 5447		; 00001547H
  018ab	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  018b3	e8 00 00 00 00	 call	 _PyParallel_Guard
  018b8	85 c0		 test	 eax, eax
  018ba	75 08		 jne	 SHORT $LN227@obj2ast_ex@2
  018bc	48 8b cb	 mov	 rcx, rbx
  018bf	e8 00 00 00 00	 call	 _Py_DecRef
$LN227@obj2ast_ex@2:

; 5451 :         }
; 5452 :         if (_PyObject_HasAttrId(obj, &PyId_args)) {

  018c4	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_args
  018c9	48 8b cf	 mov	 rcx, rdi
  018cc	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  018d0	48 8b d3	 mov	 rdx, rbx
  018d3	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  018d8	85 c0		 test	 eax, eax
  018da	0f 84 1e 03 00
	00		 je	 $LN223@obj2ast_ex@2

; 5453 :             int res;
; 5454 :             Py_ssize_t len;
; 5455 :             Py_ssize_t i;
; 5456 :             tmp = _PyObject_GetAttrId(obj, &PyId_args);

  018e0	48 8b d3	 mov	 rdx, rbx
  018e3	48 8b cf	 mov	 rcx, rdi
  018e6	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  018eb	48 8b d8	 mov	 rbx, rax

; 5457 :             if (tmp == NULL) goto failed;

  018ee	48 85 c0	 test	 rax, rax
  018f1	0f 84 56 0f 00
	00		 je	 $LN622@obj2ast_ex@2

; 5458 :             if (!PyList_Check(tmp)) {

  018f7	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  018fb	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  01906	75 10		 jne	 SHORT $LN221@obj2ast_ex@2

; 5459 :                 PyErr_Format(PyExc_TypeError, "Call field \"args\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  01908	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  0190c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@BJIMJFDA@Call?5field?5?$CCargs?$CC?5must?5be?5a?5list@

; 5460 :                 goto failed;

  01913	e9 16 e9 ff ff	 jmp	 $LN624@obj2ast_ex@2
$LN221@obj2ast_ex@2:

; 5461 :             }
; 5462 :             len = PyList_GET_SIZE(tmp);

  01918	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 5463 :             args = asdl_seq_new(len, arena);

  0191c	48 8b d6	 mov	 rdx, rsi
  0191f	48 8b c8	 mov	 rcx, rax
  01922	48 89 45 9f	 mov	 QWORD PTR len$1$[rbp-169], rax
  01926	e8 00 00 00 00	 call	 asdl_seq_new
  0192b	48 89 45 bf	 mov	 QWORD PTR args$1$[rbp-169], rax

; 5464 :             if (args == NULL) goto failed;

  0192f	48 85 c0	 test	 rax, rax
  01932	0f 84 02 e9 ff
	ff		 je	 $failed$25874

; 5465 :             for (i = 0; i < len; i++) {

  01938	45 33 c9	 xor	 r9d, r9d
  0193b	4c 89 4d b7	 mov	 QWORD PTR i$1$[rbp-169], r9
  0193f	4c 39 4d 9f	 cmp	 QWORD PTR len$1$[rbp-169], r9
  01943	7e 45		 jle	 SHORT $LN215@obj2ast_ex@2
  01945	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL219@obj2ast_ex@2:

; 5466 :                 expr_ty value;
; 5467 :                 res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);

  01950	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  01954	48 8d 55 f7	 lea	 rdx, QWORD PTR value$26604[rbp-169]
  01958	4c 8b c6	 mov	 r8, rsi
  0195b	4a 8b 0c c9	 mov	 rcx, QWORD PTR [rcx+r9*8]
  0195f	e8 00 00 00 00	 call	 obj2ast_expr

; 5468 :                 if (res != 0) goto failed;

  01964	85 c0		 test	 eax, eax
  01966	0f 85 ce e8 ff
	ff		 jne	 $failed$25874

; 5469 :                 asdl_seq_SET(args, i, value);

  0196c	4c 8b 4d b7	 mov	 r9, QWORD PTR i$1$[rbp-169]
  01970	48 8b 4d bf	 mov	 rcx, QWORD PTR args$1$[rbp-169]
  01974	48 8b 45 f7	 mov	 rax, QWORD PTR value$26604[rbp-169]
  01978	4a 89 44 c9 08	 mov	 QWORD PTR [rcx+r9*8+8], rax
  0197d	49 ff c1	 inc	 r9
  01980	4c 89 4d b7	 mov	 QWORD PTR i$1$[rbp-169], r9
  01984	4c 3b 4d 9f	 cmp	 r9, QWORD PTR len$1$[rbp-169]
  01988	7c c6		 jl	 SHORT $LL219@obj2ast_ex@2
$LN215@obj2ast_ex@2:

; 5470 :             }
; 5471 :             Py_CLEAR(tmp);

  0198a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01991	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  01998	4c 8b cb	 mov	 r9, rbx
  0199b	41 b8 5f 15 00
	00		 mov	 r8d, 5471		; 0000155fH
  019a1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  019a9	e8 00 00 00 00	 call	 _PyParallel_Guard
  019ae	85 c0		 test	 eax, eax
  019b0	75 08		 jne	 SHORT $LN214@obj2ast_ex@2
  019b2	48 8b cb	 mov	 rcx, rbx
  019b5	e8 00 00 00 00	 call	 _Py_DecRef
$LN214@obj2ast_ex@2:

; 5475 :         }
; 5476 :         if (_PyObject_HasAttrId(obj, &PyId_keywords)) {

  019ba	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_keywords
  019bf	48 8b cf	 mov	 rcx, rdi
  019c2	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  019c6	48 8b d3	 mov	 rdx, rbx
  019c9	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  019ce	85 c0		 test	 eax, eax
  019d0	0f 84 1c 02 00
	00		 je	 $LN210@obj2ast_ex@2

; 5477 :             int res;
; 5478 :             Py_ssize_t len;
; 5479 :             Py_ssize_t i;
; 5480 :             tmp = _PyObject_GetAttrId(obj, &PyId_keywords);

  019d6	48 8b d3	 mov	 rdx, rbx
  019d9	48 8b cf	 mov	 rcx, rdi
  019dc	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  019e1	48 8b d8	 mov	 rbx, rax

; 5481 :             if (tmp == NULL) goto failed;

  019e4	48 85 c0	 test	 rax, rax
  019e7	0f 84 60 0e 00
	00		 je	 $LN622@obj2ast_ex@2

; 5482 :             if (!PyList_Check(tmp)) {

  019ed	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  019f1	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  019fc	75 10		 jne	 SHORT $LN208@obj2ast_ex@2

; 5483 :                 PyErr_Format(PyExc_TypeError, "Call field \"keywords\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  019fe	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  01a02	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@OIKFBKNP@Call?5field?5?$CCkeywords?$CC?5must?5be?5a?5@

; 5484 :                 goto failed;

  01a09	e9 20 e8 ff ff	 jmp	 $LN624@obj2ast_ex@2
$LN208@obj2ast_ex@2:

; 5485 :             }
; 5486 :             len = PyList_GET_SIZE(tmp);

  01a0e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 5487 :             keywords = asdl_seq_new(len, arena);

  01a12	48 8b d6	 mov	 rdx, rsi
  01a15	48 8b c8	 mov	 rcx, rax
  01a18	48 89 45 9f	 mov	 QWORD PTR len$1$[rbp-169], rax
  01a1c	e8 00 00 00 00	 call	 asdl_seq_new
  01a21	48 89 45 c7	 mov	 QWORD PTR keywords$1$[rbp-169], rax

; 5488 :             if (keywords == NULL) goto failed;

  01a25	48 85 c0	 test	 rax, rax
  01a28	0f 84 0c e8 ff
	ff		 je	 $failed$25874

; 5489 :             for (i = 0; i < len; i++) {

  01a2e	45 33 c9	 xor	 r9d, r9d
  01a31	4c 89 4d b7	 mov	 QWORD PTR i$1$[rbp-169], r9
  01a35	4c 39 4d 9f	 cmp	 QWORD PTR len$1$[rbp-169], r9
  01a39	7e 3f		 jle	 SHORT $LN202@obj2ast_ex@2
  01a3b	0f 1f 44 00 00	 npad	 5
$LL206@obj2ast_ex@2:

; 5490 :                 keyword_ty value;
; 5491 :                 res = obj2ast_keyword(PyList_GET_ITEM(tmp, i), &value, arena);

  01a40	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  01a44	48 8d 55 f7	 lea	 rdx, QWORD PTR value$26632[rbp-169]
  01a48	4c 8b c6	 mov	 r8, rsi
  01a4b	4a 8b 0c c9	 mov	 rcx, QWORD PTR [rcx+r9*8]
  01a4f	e8 00 00 00 00	 call	 obj2ast_keyword

; 5492 :                 if (res != 0) goto failed;

  01a54	85 c0		 test	 eax, eax
  01a56	0f 85 de e7 ff
	ff		 jne	 $failed$25874

; 5493 :                 asdl_seq_SET(keywords, i, value);

  01a5c	4c 8b 4d b7	 mov	 r9, QWORD PTR i$1$[rbp-169]
  01a60	48 8b 4d c7	 mov	 rcx, QWORD PTR keywords$1$[rbp-169]
  01a64	48 8b 45 f7	 mov	 rax, QWORD PTR value$26632[rbp-169]
  01a68	4a 89 44 c9 08	 mov	 QWORD PTR [rcx+r9*8+8], rax
  01a6d	49 ff c1	 inc	 r9
  01a70	4c 89 4d b7	 mov	 QWORD PTR i$1$[rbp-169], r9
  01a74	4c 3b 4d 9f	 cmp	 r9, QWORD PTR len$1$[rbp-169]
  01a78	7c c6		 jl	 SHORT $LL206@obj2ast_ex@2
$LN202@obj2ast_ex@2:

; 5494 :             }
; 5495 :             Py_CLEAR(tmp);

  01a7a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01a81	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  01a88	4c 8b cb	 mov	 r9, rbx
  01a8b	41 b8 77 15 00
	00		 mov	 r8d, 5495		; 00001577H
  01a91	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01a99	e8 00 00 00 00	 call	 _PyParallel_Guard
  01a9e	85 c0		 test	 eax, eax
  01aa0	75 0a		 jne	 SHORT $LN201@obj2ast_ex@2
  01aa2	48 8b cb	 mov	 rcx, rbx
  01aa5	33 db		 xor	 ebx, ebx
  01aa7	e8 00 00 00 00	 call	 _Py_DecRef
$LN201@obj2ast_ex@2:

; 5499 :         }
; 5500 :         if (_PyObject_HasAttrId(obj, &PyId_starargs)) {

  01aac	48 8b 55 97	 mov	 rdx, QWORD PTR tv4095[rbp-169]
  01ab0	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:PyId_starargs
  01ab5	48 03 d1	 add	 rdx, rcx
  01ab8	48 8b cf	 mov	 rcx, rdi
  01abb	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  01ac0	85 c0		 test	 eax, eax
  01ac2	74 68		 je	 SHORT $LN197@obj2ast_ex@2

; 5501 :             int res;
; 5502 :             tmp = _PyObject_GetAttrId(obj, &PyId_starargs);

  01ac4	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_starargs
  01ac9	48 8b cf	 mov	 rcx, rdi
  01acc	48 03 55 97	 add	 rdx, QWORD PTR tv4095[rbp-169]
  01ad0	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  01ad5	48 8b d8	 mov	 rbx, rax

; 5503 :             if (tmp == NULL) goto failed;

  01ad8	48 85 c0	 test	 rax, rax
  01adb	0f 84 6c 0d 00
	00		 je	 $LN622@obj2ast_ex@2

; 5504 :             res = obj2ast_expr(tmp, &starargs, arena);

  01ae1	48 8d 55 af	 lea	 rdx, QWORD PTR starargs$26572[rbp-169]
  01ae5	4c 8b c6	 mov	 r8, rsi
  01ae8	48 8b c8	 mov	 rcx, rax
  01aeb	e8 00 00 00 00	 call	 obj2ast_expr

; 5505 :             if (res != 0) goto failed;

  01af0	85 c0		 test	 eax, eax
  01af2	0f 85 42 e7 ff
	ff		 jne	 $failed$25874

; 5506 :             Py_CLEAR(tmp);

  01af8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01aff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  01b06	4c 8b cb	 mov	 r9, rbx
  01b09	41 b8 82 15 00
	00		 mov	 r8d, 5506		; 00001582H
  01b0f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01b17	e8 00 00 00 00	 call	 _PyParallel_Guard
  01b1c	85 c0		 test	 eax, eax
  01b1e	75 14		 jne	 SHORT $LN190@obj2ast_ex@2
  01b20	48 8b cb	 mov	 rcx, rbx
  01b23	33 db		 xor	 ebx, ebx
  01b25	e8 00 00 00 00	 call	 _Py_DecRef

; 5507 :         } else {

  01b2a	eb 08		 jmp	 SHORT $LN190@obj2ast_ex@2
$LN197@obj2ast_ex@2:

; 5508 :             starargs = NULL;

  01b2c	48 c7 45 af 00
	00 00 00	 mov	 QWORD PTR starargs$26572[rbp-169], 0
$LN190@obj2ast_ex@2:

; 5509 :         }
; 5510 :         if (_PyObject_HasAttrId(obj, &PyId_kwargs)) {

  01b34	48 8b 55 97	 mov	 rdx, QWORD PTR tv4095[rbp-169]
  01b38	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:PyId_kwargs
  01b3d	48 03 d1	 add	 rdx, rcx
  01b40	48 8b cf	 mov	 rcx, rdi
  01b43	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  01b48	85 c0		 test	 eax, eax
  01b4a	74 68		 je	 SHORT $LN189@obj2ast_ex@2

; 5511 :             int res;
; 5512 :             tmp = _PyObject_GetAttrId(obj, &PyId_kwargs);

  01b4c	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_kwargs
  01b51	48 8b cf	 mov	 rcx, rdi
  01b54	48 03 55 97	 add	 rdx, QWORD PTR tv4095[rbp-169]
  01b58	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  01b5d	48 8b d8	 mov	 rbx, rax

; 5513 :             if (tmp == NULL) goto failed;

  01b60	48 85 c0	 test	 rax, rax
  01b63	0f 84 e4 0c 00
	00		 je	 $LN622@obj2ast_ex@2

; 5514 :             res = obj2ast_expr(tmp, &kwargs, arena);

  01b69	48 8d 55 a7	 lea	 rdx, QWORD PTR kwargs$26573[rbp-169]
  01b6d	4c 8b c6	 mov	 r8, rsi
  01b70	48 8b c8	 mov	 rcx, rax
  01b73	e8 00 00 00 00	 call	 obj2ast_expr

; 5515 :             if (res != 0) goto failed;

  01b78	85 c0		 test	 eax, eax
  01b7a	0f 85 ba e6 ff
	ff		 jne	 $failed$25874

; 5516 :             Py_CLEAR(tmp);

  01b80	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01b87	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  01b8e	4c 8b cb	 mov	 r9, rbx
  01b91	41 b8 8c 15 00
	00		 mov	 r8d, 5516		; 0000158cH
  01b97	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01b9f	e8 00 00 00 00	 call	 _PyParallel_Guard
  01ba4	85 c0		 test	 eax, eax
  01ba6	75 14		 jne	 SHORT $LN182@obj2ast_ex@2
  01ba8	48 8b cb	 mov	 rcx, rbx
  01bab	33 db		 xor	 ebx, ebx
  01bad	e8 00 00 00 00	 call	 _Py_DecRef

; 5517 :         } else {

  01bb2	eb 08		 jmp	 SHORT $LN182@obj2ast_ex@2
$LN189@obj2ast_ex@2:

; 5518 :             kwargs = NULL;

  01bb4	48 c7 45 a7 00
	00 00 00	 mov	 QWORD PTR kwargs$26573[rbp-169], 0
$LN182@obj2ast_ex@2:

; 5519 :         }
; 5520 :         *out = Call(func, args, keywords, starargs, kwargs, lineno, col_offset,
; 5521 :                     arena);

  01bbc	8b 45 67	 mov	 eax, DWORD PTR col_offset$[rbp-169]
  01bbf	4c 8b 4d af	 mov	 r9, QWORD PTR starargs$26572[rbp-169]
  01bc3	4c 8b 45 c7	 mov	 r8, QWORD PTR keywords$1$[rbp-169]
  01bc7	48 8b 55 bf	 mov	 rdx, QWORD PTR args$1$[rbp-169]
  01bcb	48 8b 4d d7	 mov	 rcx, QWORD PTR func$26569[rbp-169]
  01bcf	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  01bd4	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  01bd8	8b 45 7f	 mov	 eax, DWORD PTR lineno$[rbp-169]
  01bdb	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  01bdf	48 8b 45 a7	 mov	 rax, QWORD PTR kwargs$26573[rbp-169]
  01be3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01be8	e8 00 00 00 00	 call	 _Py_Call

; 5522 :         if (*out == NULL) goto failed;
; 5523 :         return 0;

  01bed	e9 0a 0c 00 00	 jmp	 $LN625@obj2ast_ex@2
$LN210@obj2ast_ex@2:

; 5496 :         } else {
; 5497 :             PyErr_SetString(PyExc_TypeError, "required field \"keywords\" missing from Call");

  01bf2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@CAEPCCCE@required?5field?5?$CCkeywords?$CC?5missin@

; 5498 :             return 1;

  01bf9	e9 43 0c 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN223@obj2ast_ex@2:

; 5472 :         } else {
; 5473 :             PyErr_SetString(PyExc_TypeError, "required field \"args\" missing from Call");

  01bfe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@HMAALGIO@required?5field?5?$CCargs?$CC?5missing?5fr@

; 5474 :             return 1;

  01c05	e9 37 0c 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN231@obj2ast_ex@2:

; 5448 :         } else {
; 5449 :             PyErr_SetString(PyExc_TypeError, "required field \"func\" missing from Call");

  01c0a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@NOCOEJHL@required?5field?5?$CCfunc?$CC?5missing?5fr@

; 5450 :             return 1;

  01c11	e9 2b 0c 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN232@obj2ast_ex@2:

; 5524 :     }
; 5525 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Num_type);

  01c16	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Num_type
  01c1d	e8 00 00 00 00	 call	 PyObject_IsInstance

; 5526 :     if (isinstance == -1) {

  01c22	83 f8 ff	 cmp	 eax, -1

; 5527 :         return 1;

  01c25	0f 84 22 0c 00
	00		 je	 $LN622@obj2ast_ex@2

; 5528 :     }
; 5529 :     if (isinstance) {
; 5530 :         object n;
; 5531 : 
; 5532 :         if (_PyObject_HasAttrId(obj, &PyId_n)) {

  01c2b	48 8b cf	 mov	 rcx, rdi
  01c2e	85 c0		 test	 eax, eax
  01c30	0f 84 99 00 00
	00		 je	 $LN179@obj2ast_ex@2
  01c36	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_n
  01c3b	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  01c3f	48 8b d3	 mov	 rdx, rbx
  01c42	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  01c47	85 c0		 test	 eax, eax
  01c49	74 78		 je	 SHORT $LN178@obj2ast_ex@2

; 5533 :             int res;
; 5534 :             tmp = _PyObject_GetAttrId(obj, &PyId_n);

  01c4b	48 8b d3	 mov	 rdx, rbx
  01c4e	48 8b cf	 mov	 rcx, rdi
  01c51	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  01c56	48 8b d8	 mov	 rbx, rax

; 5535 :             if (tmp == NULL) goto failed;

  01c59	48 85 c0	 test	 rax, rax
  01c5c	0f 84 eb 0b 00
	00		 je	 $LN622@obj2ast_ex@2

; 5536 :             res = obj2ast_object(tmp, &n, arena);

  01c62	48 8d 55 d7	 lea	 rdx, QWORD PTR n$26680[rbp-169]
  01c66	4c 8b c6	 mov	 r8, rsi
  01c69	48 8b c8	 mov	 rcx, rax
  01c6c	e8 00 00 00 00	 call	 obj2ast_object

; 5537 :             if (res != 0) goto failed;

  01c71	85 c0		 test	 eax, eax
  01c73	0f 85 c1 e5 ff
	ff		 jne	 $failed$25874

; 5538 :             Py_CLEAR(tmp);

  01c79	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01c80	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  01c87	4c 8b cb	 mov	 r9, rbx
  01c8a	41 b8 a2 15 00
	00		 mov	 r8d, 5538		; 000015a2H
  01c90	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01c98	e8 00 00 00 00	 call	 _PyParallel_Guard
  01c9d	85 c0		 test	 eax, eax
  01c9f	75 0a		 jne	 SHORT $LN174@obj2ast_ex@2
  01ca1	48 8b cb	 mov	 rcx, rbx
  01ca4	33 db		 xor	 ebx, ebx
  01ca6	e8 00 00 00 00	 call	 _Py_DecRef
$LN174@obj2ast_ex@2:

; 5542 :         }
; 5543 :         *out = Num(n, lineno, col_offset, arena);

  01cab	44 8b 45 67	 mov	 r8d, DWORD PTR col_offset$[rbp-169]
  01caf	8b 55 7f	 mov	 edx, DWORD PTR lineno$[rbp-169]
  01cb2	48 8b 4d d7	 mov	 rcx, QWORD PTR n$26680[rbp-169]
  01cb6	4c 8b ce	 mov	 r9, rsi
  01cb9	e8 00 00 00 00	 call	 _Py_Num

; 5544 :         if (*out == NULL) goto failed;
; 5545 :         return 0;

  01cbe	e9 39 0b 00 00	 jmp	 $LN625@obj2ast_ex@2
$LN178@obj2ast_ex@2:

; 5539 :         } else {
; 5540 :             PyErr_SetString(PyExc_TypeError, "required field \"n\" missing from Num");

  01cc3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@HDIMJEDD@required?5field?5?$CCn?$CC?5missing?5from?5@

; 5541 :             return 1;

  01cca	e9 72 0b 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN179@obj2ast_ex@2:

; 5546 :     }
; 5547 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Str_type);

  01ccf	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Str_type
  01cd6	e8 00 00 00 00	 call	 PyObject_IsInstance

; 5548 :     if (isinstance == -1) {

  01cdb	83 f8 ff	 cmp	 eax, -1

; 5549 :         return 1;

  01cde	0f 84 69 0b 00
	00		 je	 $LN622@obj2ast_ex@2

; 5550 :     }
; 5551 :     if (isinstance) {
; 5552 :         string s;
; 5553 : 
; 5554 :         if (_PyObject_HasAttrId(obj, &PyId_s)) {

  01ce4	48 8b cf	 mov	 rcx, rdi
  01ce7	85 c0		 test	 eax, eax
  01ce9	0f 84 99 00 00
	00		 je	 $LN168@obj2ast_ex@2
  01cef	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_s
  01cf4	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  01cf8	48 8b d3	 mov	 rdx, rbx
  01cfb	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  01d00	85 c0		 test	 eax, eax
  01d02	74 78		 je	 SHORT $LN167@obj2ast_ex@2

; 5555 :             int res;
; 5556 :             tmp = _PyObject_GetAttrId(obj, &PyId_s);

  01d04	48 8b d3	 mov	 rdx, rbx
  01d07	48 8b cf	 mov	 rcx, rdi
  01d0a	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  01d0f	48 8b d8	 mov	 rbx, rax

; 5557 :             if (tmp == NULL) goto failed;

  01d12	48 85 c0	 test	 rax, rax
  01d15	0f 84 32 0b 00
	00		 je	 $LN622@obj2ast_ex@2

; 5558 :             res = obj2ast_string(tmp, &s, arena);

  01d1b	48 8d 55 d7	 lea	 rdx, QWORD PTR s$26701[rbp-169]
  01d1f	4c 8b c6	 mov	 r8, rsi
  01d22	48 8b c8	 mov	 rcx, rax
  01d25	e8 00 00 00 00	 call	 obj2ast_string

; 5559 :             if (res != 0) goto failed;

  01d2a	85 c0		 test	 eax, eax
  01d2c	0f 85 08 e5 ff
	ff		 jne	 $failed$25874

; 5560 :             Py_CLEAR(tmp);

  01d32	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01d39	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  01d40	4c 8b cb	 mov	 r9, rbx
  01d43	41 b8 b8 15 00
	00		 mov	 r8d, 5560		; 000015b8H
  01d49	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01d51	e8 00 00 00 00	 call	 _PyParallel_Guard
  01d56	85 c0		 test	 eax, eax
  01d58	75 0a		 jne	 SHORT $LN163@obj2ast_ex@2
  01d5a	48 8b cb	 mov	 rcx, rbx
  01d5d	33 db		 xor	 ebx, ebx
  01d5f	e8 00 00 00 00	 call	 _Py_DecRef
$LN163@obj2ast_ex@2:

; 5564 :         }
; 5565 :         *out = Str(s, lineno, col_offset, arena);

  01d64	44 8b 45 67	 mov	 r8d, DWORD PTR col_offset$[rbp-169]
  01d68	8b 55 7f	 mov	 edx, DWORD PTR lineno$[rbp-169]
  01d6b	48 8b 4d d7	 mov	 rcx, QWORD PTR s$26701[rbp-169]
  01d6f	4c 8b ce	 mov	 r9, rsi
  01d72	e8 00 00 00 00	 call	 _Py_Str

; 5566 :         if (*out == NULL) goto failed;
; 5567 :         return 0;

  01d77	e9 80 0a 00 00	 jmp	 $LN625@obj2ast_ex@2
$LN167@obj2ast_ex@2:

; 5561 :         } else {
; 5562 :             PyErr_SetString(PyExc_TypeError, "required field \"s\" missing from Str");

  01d7c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@ELPANCFA@required?5field?5?$CCs?$CC?5missing?5from?5@

; 5563 :             return 1;

  01d83	e9 b9 0a 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN168@obj2ast_ex@2:

; 5568 :     }
; 5569 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Bytes_type);

  01d88	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Bytes_type
  01d8f	e8 00 00 00 00	 call	 PyObject_IsInstance

; 5570 :     if (isinstance == -1) {

  01d94	83 f8 ff	 cmp	 eax, -1

; 5571 :         return 1;

  01d97	0f 84 b0 0a 00
	00		 je	 $LN622@obj2ast_ex@2

; 5572 :     }
; 5573 :     if (isinstance) {
; 5574 :         bytes s;
; 5575 : 
; 5576 :         if (_PyObject_HasAttrId(obj, &PyId_s)) {

  01d9d	48 8b cf	 mov	 rcx, rdi
  01da0	85 c0		 test	 eax, eax
  01da2	0f 84 99 00 00
	00		 je	 $LN157@obj2ast_ex@2
  01da8	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_s
  01dad	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  01db1	48 8b d3	 mov	 rdx, rbx
  01db4	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  01db9	85 c0		 test	 eax, eax
  01dbb	74 78		 je	 SHORT $LN156@obj2ast_ex@2

; 5577 :             int res;
; 5578 :             tmp = _PyObject_GetAttrId(obj, &PyId_s);

  01dbd	48 8b d3	 mov	 rdx, rbx
  01dc0	48 8b cf	 mov	 rcx, rdi
  01dc3	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  01dc8	48 8b d8	 mov	 rbx, rax

; 5579 :             if (tmp == NULL) goto failed;

  01dcb	48 85 c0	 test	 rax, rax
  01dce	0f 84 79 0a 00
	00		 je	 $LN622@obj2ast_ex@2

; 5580 :             res = obj2ast_bytes(tmp, &s, arena);

  01dd4	48 8d 55 d7	 lea	 rdx, QWORD PTR s$26722[rbp-169]
  01dd8	4c 8b c6	 mov	 r8, rsi
  01ddb	48 8b c8	 mov	 rcx, rax
  01dde	e8 00 00 00 00	 call	 obj2ast_bytes

; 5581 :             if (res != 0) goto failed;

  01de3	85 c0		 test	 eax, eax
  01de5	0f 85 4f e4 ff
	ff		 jne	 $failed$25874

; 5582 :             Py_CLEAR(tmp);

  01deb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01df2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  01df9	4c 8b cb	 mov	 r9, rbx
  01dfc	41 b8 ce 15 00
	00		 mov	 r8d, 5582		; 000015ceH
  01e02	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01e0a	e8 00 00 00 00	 call	 _PyParallel_Guard
  01e0f	85 c0		 test	 eax, eax
  01e11	75 0a		 jne	 SHORT $LN152@obj2ast_ex@2
  01e13	48 8b cb	 mov	 rcx, rbx
  01e16	33 db		 xor	 ebx, ebx
  01e18	e8 00 00 00 00	 call	 _Py_DecRef
$LN152@obj2ast_ex@2:

; 5586 :         }
; 5587 :         *out = Bytes(s, lineno, col_offset, arena);

  01e1d	44 8b 45 67	 mov	 r8d, DWORD PTR col_offset$[rbp-169]
  01e21	8b 55 7f	 mov	 edx, DWORD PTR lineno$[rbp-169]
  01e24	48 8b 4d d7	 mov	 rcx, QWORD PTR s$26722[rbp-169]
  01e28	4c 8b ce	 mov	 r9, rsi
  01e2b	e8 00 00 00 00	 call	 _Py_Bytes

; 5588 :         if (*out == NULL) goto failed;
; 5589 :         return 0;

  01e30	e9 c7 09 00 00	 jmp	 $LN625@obj2ast_ex@2
$LN156@obj2ast_ex@2:

; 5583 :         } else {
; 5584 :             PyErr_SetString(PyExc_TypeError, "required field \"s\" missing from Bytes");

  01e35	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@INBJMMPB@required?5field?5?$CCs?$CC?5missing?5from?5@

; 5585 :             return 1;

  01e3c	e9 00 0a 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN157@obj2ast_ex@2:

; 5590 :     }
; 5591 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Ellipsis_type);

  01e41	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Ellipsis_type
  01e48	e8 00 00 00 00	 call	 PyObject_IsInstance

; 5592 :     if (isinstance == -1) {

  01e4d	83 f8 ff	 cmp	 eax, -1

; 5593 :         return 1;

  01e50	0f 84 f7 09 00
	00		 je	 $LN622@obj2ast_ex@2

; 5594 :     }
; 5595 :     if (isinstance) {

  01e56	85 c0		 test	 eax, eax
  01e58	74 13		 je	 SHORT $LN146@obj2ast_ex@2

; 5596 : 
; 5597 :         *out = Ellipsis(lineno, col_offset, arena);

  01e5a	8b 55 67	 mov	 edx, DWORD PTR col_offset$[rbp-169]
  01e5d	8b 4d 7f	 mov	 ecx, DWORD PTR lineno$[rbp-169]
  01e60	4c 8b c6	 mov	 r8, rsi
  01e63	e8 00 00 00 00	 call	 _Py_Ellipsis

; 5598 :         if (*out == NULL) goto failed;
; 5599 :         return 0;

  01e68	e9 8f 09 00 00	 jmp	 $LN625@obj2ast_ex@2
$LN146@obj2ast_ex@2:

; 5600 :     }
; 5601 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Attribute_type);

  01e6d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Attribute_type
  01e74	48 8b cf	 mov	 rcx, rdi
  01e77	e8 00 00 00 00	 call	 PyObject_IsInstance

; 5602 :     if (isinstance == -1) {

  01e7c	83 f8 ff	 cmp	 eax, -1

; 5603 :         return 1;

  01e7f	0f 84 c8 09 00
	00		 je	 $LN622@obj2ast_ex@2

; 5604 :     }
; 5605 :     if (isinstance) {
; 5606 :         expr_ty value;
; 5607 :         identifier attr;
; 5608 :         expr_context_ty ctx;
; 5609 : 
; 5610 :         if (_PyObject_HasAttrId(obj, &PyId_value)) {

  01e85	48 8b cf	 mov	 rcx, rdi
  01e88	85 c0		 test	 eax, eax
  01e8a	0f 84 b4 01 00
	00		 je	 $LN143@obj2ast_ex@2
  01e90	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_value
  01e95	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  01e99	48 8b d3	 mov	 rdx, rbx
  01e9c	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  01ea1	85 c0		 test	 eax, eax
  01ea3	0f 84 8f 01 00
	00		 je	 $LN142@obj2ast_ex@2

; 5611 :             int res;
; 5612 :             tmp = _PyObject_GetAttrId(obj, &PyId_value);

  01ea9	48 8b d3	 mov	 rdx, rbx
  01eac	48 8b cf	 mov	 rcx, rdi
  01eaf	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  01eb4	48 8b d8	 mov	 rbx, rax

; 5613 :             if (tmp == NULL) goto failed;

  01eb7	48 85 c0	 test	 rax, rax
  01eba	0f 84 8d 09 00
	00		 je	 $LN622@obj2ast_ex@2

; 5614 :             res = obj2ast_expr(tmp, &value, arena);

  01ec0	48 8d 55 07	 lea	 rdx, QWORD PTR value$26748[rbp-169]
  01ec4	4c 8b c6	 mov	 r8, rsi
  01ec7	48 8b c8	 mov	 rcx, rax
  01eca	e8 00 00 00 00	 call	 obj2ast_expr

; 5615 :             if (res != 0) goto failed;

  01ecf	85 c0		 test	 eax, eax
  01ed1	0f 85 63 e3 ff
	ff		 jne	 $failed$25874

; 5616 :             Py_CLEAR(tmp);

  01ed7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01ede	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  01ee5	4c 8b cb	 mov	 r9, rbx
  01ee8	41 b8 f0 15 00
	00		 mov	 r8d, 5616		; 000015f0H
  01eee	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01ef6	e8 00 00 00 00	 call	 _PyParallel_Guard
  01efb	85 c0		 test	 eax, eax
  01efd	75 08		 jne	 SHORT $LN138@obj2ast_ex@2
  01eff	48 8b cb	 mov	 rcx, rbx
  01f02	e8 00 00 00 00	 call	 _Py_DecRef
$LN138@obj2ast_ex@2:

; 5620 :         }
; 5621 :         if (_PyObject_HasAttrId(obj, &PyId_attr)) {

  01f07	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_attr
  01f0c	48 8b cf	 mov	 rcx, rdi
  01f0f	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  01f13	48 8b d3	 mov	 rdx, rbx
  01f16	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  01f1b	85 c0		 test	 eax, eax
  01f1d	0f 84 09 01 00
	00		 je	 $LN134@obj2ast_ex@2

; 5622 :             int res;
; 5623 :             tmp = _PyObject_GetAttrId(obj, &PyId_attr);

  01f23	48 8b d3	 mov	 rdx, rbx
  01f26	48 8b cf	 mov	 rcx, rdi
  01f29	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  01f2e	48 8b d8	 mov	 rbx, rax

; 5624 :             if (tmp == NULL) goto failed;

  01f31	48 85 c0	 test	 rax, rax
  01f34	0f 84 13 09 00
	00		 je	 $LN622@obj2ast_ex@2

; 5625 :             res = obj2ast_identifier(tmp, &attr, arena);

  01f3a	48 8d 55 d7	 lea	 rdx, QWORD PTR attr$26749[rbp-169]
  01f3e	4c 8b c6	 mov	 r8, rsi
  01f41	48 8b c8	 mov	 rcx, rax
  01f44	e8 00 00 00 00	 call	 obj2ast_identifier

; 5626 :             if (res != 0) goto failed;

  01f49	85 c0		 test	 eax, eax
  01f4b	0f 85 e9 e2 ff
	ff		 jne	 $failed$25874

; 5627 :             Py_CLEAR(tmp);

  01f51	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01f58	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  01f5f	4c 8b cb	 mov	 r9, rbx
  01f62	41 b8 fb 15 00
	00		 mov	 r8d, 5627		; 000015fbH
  01f68	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01f70	e8 00 00 00 00	 call	 _PyParallel_Guard
  01f75	85 c0		 test	 eax, eax
  01f77	75 08		 jne	 SHORT $LN130@obj2ast_ex@2
  01f79	48 8b cb	 mov	 rcx, rbx
  01f7c	e8 00 00 00 00	 call	 _Py_DecRef
$LN130@obj2ast_ex@2:

; 5631 :         }
; 5632 :         if (_PyObject_HasAttrId(obj, &PyId_ctx)) {

  01f81	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_ctx
  01f86	48 8b cf	 mov	 rcx, rdi
  01f89	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  01f8d	48 8b d3	 mov	 rdx, rbx
  01f90	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  01f95	85 c0		 test	 eax, eax
  01f97	0f 84 83 00 00
	00		 je	 $LN126@obj2ast_ex@2

; 5633 :             int res;
; 5634 :             tmp = _PyObject_GetAttrId(obj, &PyId_ctx);

  01f9d	48 8b d3	 mov	 rdx, rbx
  01fa0	48 8b cf	 mov	 rcx, rdi
  01fa3	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  01fa8	48 8b d8	 mov	 rbx, rax

; 5635 :             if (tmp == NULL) goto failed;

  01fab	48 85 c0	 test	 rax, rax
  01fae	0f 84 99 08 00
	00		 je	 $LN622@obj2ast_ex@2

; 5636 :             res = obj2ast_expr_context(tmp, &ctx, arena);

  01fb4	48 8d 55 af	 lea	 rdx, QWORD PTR ctx$26750[rbp-169]
  01fb8	48 8b c8	 mov	 rcx, rax
  01fbb	e8 00 00 00 00	 call	 obj2ast_expr_context

; 5637 :             if (res != 0) goto failed;

  01fc0	85 c0		 test	 eax, eax
  01fc2	0f 85 72 e2 ff
	ff		 jne	 $failed$25874

; 5638 :             Py_CLEAR(tmp);

  01fc8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01fcf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  01fd6	4c 8b cb	 mov	 r9, rbx
  01fd9	41 b8 06 16 00
	00		 mov	 r8d, 5638		; 00001606H
  01fdf	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01fe7	e8 00 00 00 00	 call	 _PyParallel_Guard
  01fec	85 c0		 test	 eax, eax
  01fee	75 0a		 jne	 SHORT $LN122@obj2ast_ex@2
  01ff0	48 8b cb	 mov	 rcx, rbx
  01ff3	33 db		 xor	 ebx, ebx
  01ff5	e8 00 00 00 00	 call	 _Py_DecRef
$LN122@obj2ast_ex@2:

; 5642 :         }
; 5643 :         *out = Attribute(value, attr, ctx, lineno, col_offset, arena);

  01ffa	8b 45 67	 mov	 eax, DWORD PTR col_offset$[rbp-169]
  01ffd	44 8b 4d 7f	 mov	 r9d, DWORD PTR lineno$[rbp-169]
  02001	44 8b 45 af	 mov	 r8d, DWORD PTR ctx$26750[rbp-169]
  02005	48 8b 55 d7	 mov	 rdx, QWORD PTR attr$26749[rbp-169]
  02009	48 8b 4d 07	 mov	 rcx, QWORD PTR value$26748[rbp-169]
  0200d	48 89 74 24 28	 mov	 QWORD PTR [rsp+40], rsi
  02012	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  02016	e8 00 00 00 00	 call	 _Py_Attribute

; 5644 :         if (*out == NULL) goto failed;
; 5645 :         return 0;

  0201b	e9 dc 07 00 00	 jmp	 $LN625@obj2ast_ex@2
$LN126@obj2ast_ex@2:

; 5639 :         } else {
; 5640 :             PyErr_SetString(PyExc_TypeError, "required field \"ctx\" missing from Attribute");

  02020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@KBDBLMDG@required?5field?5?$CCctx?$CC?5missing?5fro@

; 5641 :             return 1;

  02027	e9 15 08 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN134@obj2ast_ex@2:

; 5628 :         } else {
; 5629 :             PyErr_SetString(PyExc_TypeError, "required field \"attr\" missing from Attribute");

  0202c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@BLIDGIHB@required?5field?5?$CCattr?$CC?5missing?5fr@

; 5630 :             return 1;

  02033	e9 09 08 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN142@obj2ast_ex@2:

; 5617 :         } else {
; 5618 :             PyErr_SetString(PyExc_TypeError, "required field \"value\" missing from Attribute");

  02038	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@FHJGPNDL@required?5field?5?$CCvalue?$CC?5missing?5f@

; 5619 :             return 1;

  0203f	e9 fd 07 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN143@obj2ast_ex@2:

; 5646 :     }
; 5647 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Subscript_type);

  02044	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Subscript_type
  0204b	e8 00 00 00 00	 call	 PyObject_IsInstance

; 5648 :     if (isinstance == -1) {

  02050	83 f8 ff	 cmp	 eax, -1

; 5649 :         return 1;

  02053	0f 84 f4 07 00
	00		 je	 $LN622@obj2ast_ex@2

; 5650 :     }
; 5651 :     if (isinstance) {
; 5652 :         expr_ty value;
; 5653 :         slice_ty slice;
; 5654 :         expr_context_ty ctx;
; 5655 : 
; 5656 :         if (_PyObject_HasAttrId(obj, &PyId_value)) {

  02059	48 8b cf	 mov	 rcx, rdi
  0205c	85 c0		 test	 eax, eax
  0205e	0f 84 b4 01 00
	00		 je	 $LN116@obj2ast_ex@2
  02064	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_value
  02069	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  0206d	48 8b d3	 mov	 rdx, rbx
  02070	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  02075	85 c0		 test	 eax, eax
  02077	0f 84 8f 01 00
	00		 je	 $LN115@obj2ast_ex@2

; 5657 :             int res;
; 5658 :             tmp = _PyObject_GetAttrId(obj, &PyId_value);

  0207d	48 8b d3	 mov	 rdx, rbx
  02080	48 8b cf	 mov	 rcx, rdi
  02083	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  02088	48 8b d8	 mov	 rbx, rax

; 5659 :             if (tmp == NULL) goto failed;

  0208b	48 85 c0	 test	 rax, rax
  0208e	0f 84 b9 07 00
	00		 je	 $LN622@obj2ast_ex@2

; 5660 :             res = obj2ast_expr(tmp, &value, arena);

  02094	48 8d 55 27	 lea	 rdx, QWORD PTR value$26801[rbp-169]
  02098	4c 8b c6	 mov	 r8, rsi
  0209b	48 8b c8	 mov	 rcx, rax
  0209e	e8 00 00 00 00	 call	 obj2ast_expr

; 5661 :             if (res != 0) goto failed;

  020a3	85 c0		 test	 eax, eax
  020a5	0f 85 8f e1 ff
	ff		 jne	 $failed$25874

; 5662 :             Py_CLEAR(tmp);

  020ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  020b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  020b9	4c 8b cb	 mov	 r9, rbx
  020bc	41 b8 1e 16 00
	00		 mov	 r8d, 5662		; 0000161eH
  020c2	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  020ca	e8 00 00 00 00	 call	 _PyParallel_Guard
  020cf	85 c0		 test	 eax, eax
  020d1	75 08		 jne	 SHORT $LN111@obj2ast_ex@2
  020d3	48 8b cb	 mov	 rcx, rbx
  020d6	e8 00 00 00 00	 call	 _Py_DecRef
$LN111@obj2ast_ex@2:

; 5666 :         }
; 5667 :         if (_PyObject_HasAttrId(obj, &PyId_slice)) {

  020db	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_slice
  020e0	48 8b cf	 mov	 rcx, rdi
  020e3	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  020e7	48 8b d3	 mov	 rdx, rbx
  020ea	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  020ef	85 c0		 test	 eax, eax
  020f1	0f 84 09 01 00
	00		 je	 $LN107@obj2ast_ex@2

; 5668 :             int res;
; 5669 :             tmp = _PyObject_GetAttrId(obj, &PyId_slice);

  020f7	48 8b d3	 mov	 rdx, rbx
  020fa	48 8b cf	 mov	 rcx, rdi
  020fd	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  02102	48 8b d8	 mov	 rbx, rax

; 5670 :             if (tmp == NULL) goto failed;

  02105	48 85 c0	 test	 rax, rax
  02108	0f 84 3f 07 00
	00		 je	 $LN622@obj2ast_ex@2

; 5671 :             res = obj2ast_slice(tmp, &slice, arena);

  0210e	48 8d 55 07	 lea	 rdx, QWORD PTR slice$26802[rbp-169]
  02112	4c 8b c6	 mov	 r8, rsi
  02115	48 8b c8	 mov	 rcx, rax
  02118	e8 00 00 00 00	 call	 obj2ast_slice

; 5672 :             if (res != 0) goto failed;

  0211d	85 c0		 test	 eax, eax
  0211f	0f 85 15 e1 ff
	ff		 jne	 $failed$25874

; 5673 :             Py_CLEAR(tmp);

  02125	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0212c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  02133	4c 8b cb	 mov	 r9, rbx
  02136	41 b8 29 16 00
	00		 mov	 r8d, 5673		; 00001629H
  0213c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  02144	e8 00 00 00 00	 call	 _PyParallel_Guard
  02149	85 c0		 test	 eax, eax
  0214b	75 08		 jne	 SHORT $LN103@obj2ast_ex@2
  0214d	48 8b cb	 mov	 rcx, rbx
  02150	e8 00 00 00 00	 call	 _Py_DecRef
$LN103@obj2ast_ex@2:

; 5677 :         }
; 5678 :         if (_PyObject_HasAttrId(obj, &PyId_ctx)) {

  02155	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_ctx
  0215a	48 8b cf	 mov	 rcx, rdi
  0215d	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  02161	48 8b d3	 mov	 rdx, rbx
  02164	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  02169	85 c0		 test	 eax, eax
  0216b	0f 84 83 00 00
	00		 je	 $LN99@obj2ast_ex@2

; 5679 :             int res;
; 5680 :             tmp = _PyObject_GetAttrId(obj, &PyId_ctx);

  02171	48 8b d3	 mov	 rdx, rbx
  02174	48 8b cf	 mov	 rcx, rdi
  02177	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0217c	48 8b d8	 mov	 rbx, rax

; 5681 :             if (tmp == NULL) goto failed;

  0217f	48 85 c0	 test	 rax, rax
  02182	0f 84 c5 06 00
	00		 je	 $LN622@obj2ast_ex@2

; 5682 :             res = obj2ast_expr_context(tmp, &ctx, arena);

  02188	48 8d 55 af	 lea	 rdx, QWORD PTR ctx$26803[rbp-169]
  0218c	48 8b c8	 mov	 rcx, rax
  0218f	e8 00 00 00 00	 call	 obj2ast_expr_context

; 5683 :             if (res != 0) goto failed;

  02194	85 c0		 test	 eax, eax
  02196	0f 85 9e e0 ff
	ff		 jne	 $failed$25874

; 5684 :             Py_CLEAR(tmp);

  0219c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  021a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  021aa	4c 8b cb	 mov	 r9, rbx
  021ad	41 b8 34 16 00
	00		 mov	 r8d, 5684		; 00001634H
  021b3	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  021bb	e8 00 00 00 00	 call	 _PyParallel_Guard
  021c0	85 c0		 test	 eax, eax
  021c2	75 0a		 jne	 SHORT $LN95@obj2ast_ex@2
  021c4	48 8b cb	 mov	 rcx, rbx
  021c7	33 db		 xor	 ebx, ebx
  021c9	e8 00 00 00 00	 call	 _Py_DecRef
$LN95@obj2ast_ex@2:

; 5688 :         }
; 5689 :         *out = Subscript(value, slice, ctx, lineno, col_offset, arena);

  021ce	8b 45 67	 mov	 eax, DWORD PTR col_offset$[rbp-169]
  021d1	44 8b 4d 7f	 mov	 r9d, DWORD PTR lineno$[rbp-169]
  021d5	44 8b 45 af	 mov	 r8d, DWORD PTR ctx$26803[rbp-169]
  021d9	48 8b 55 07	 mov	 rdx, QWORD PTR slice$26802[rbp-169]
  021dd	48 8b 4d 27	 mov	 rcx, QWORD PTR value$26801[rbp-169]
  021e1	48 89 74 24 28	 mov	 QWORD PTR [rsp+40], rsi
  021e6	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  021ea	e8 00 00 00 00	 call	 _Py_Subscript

; 5690 :         if (*out == NULL) goto failed;
; 5691 :         return 0;

  021ef	e9 08 06 00 00	 jmp	 $LN625@obj2ast_ex@2
$LN99@obj2ast_ex@2:

; 5685 :         } else {
; 5686 :             PyErr_SetString(PyExc_TypeError, "required field \"ctx\" missing from Subscript");

  021f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@GNGBNLH@required?5field?5?$CCctx?$CC?5missing?5fro@

; 5687 :             return 1;

  021fb	e9 41 06 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN107@obj2ast_ex@2:

; 5674 :         } else {
; 5675 :             PyErr_SetString(PyExc_TypeError, "required field \"slice\" missing from Subscript");

  02200	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@ECGILCDO@required?5field?5?$CCslice?$CC?5missing?5f@

; 5676 :             return 1;

  02207	e9 35 06 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN115@obj2ast_ex@2:

; 5663 :         } else {
; 5664 :             PyErr_SetString(PyExc_TypeError, "required field \"value\" missing from Subscript");

  0220c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@PAHBFMLK@required?5field?5?$CCvalue?$CC?5missing?5f@

; 5665 :             return 1;

  02213	e9 29 06 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN116@obj2ast_ex@2:

; 5692 :     }
; 5693 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Starred_type);

  02218	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Starred_type
  0221f	e8 00 00 00 00	 call	 PyObject_IsInstance

; 5694 :     if (isinstance == -1) {

  02224	83 f8 ff	 cmp	 eax, -1

; 5695 :         return 1;

  02227	0f 84 20 06 00
	00		 je	 $LN622@obj2ast_ex@2

; 5696 :     }
; 5697 :     if (isinstance) {
; 5698 :         expr_ty value;
; 5699 :         expr_context_ty ctx;
; 5700 : 
; 5701 :         if (_PyObject_HasAttrId(obj, &PyId_value)) {

  0222d	48 8b cf	 mov	 rcx, rdi
  02230	85 c0		 test	 eax, eax
  02232	0f 84 22 01 00
	00		 je	 $LN89@obj2ast_ex@2
  02238	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_value
  0223d	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  02241	48 8b d3	 mov	 rdx, rbx
  02244	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  02249	85 c0		 test	 eax, eax
  0224b	0f 84 fd 00 00
	00		 je	 $LN88@obj2ast_ex@2

; 5702 :             int res;
; 5703 :             tmp = _PyObject_GetAttrId(obj, &PyId_value);

  02251	48 8b d3	 mov	 rdx, rbx
  02254	48 8b cf	 mov	 rcx, rdi
  02257	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0225c	48 8b d8	 mov	 rbx, rax

; 5704 :             if (tmp == NULL) goto failed;

  0225f	48 85 c0	 test	 rax, rax
  02262	0f 84 e5 05 00
	00		 je	 $LN622@obj2ast_ex@2

; 5705 :             res = obj2ast_expr(tmp, &value, arena);

  02268	48 8d 55 df	 lea	 rdx, QWORD PTR value$26854[rbp-169]
  0226c	4c 8b c6	 mov	 r8, rsi
  0226f	48 8b c8	 mov	 rcx, rax
  02272	e8 00 00 00 00	 call	 obj2ast_expr

; 5706 :             if (res != 0) goto failed;

  02277	85 c0		 test	 eax, eax
  02279	0f 85 bb df ff
	ff		 jne	 $failed$25874

; 5707 :             Py_CLEAR(tmp);

  0227f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  02286	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  0228d	4c 8b cb	 mov	 r9, rbx
  02290	41 b8 4b 16 00
	00		 mov	 r8d, 5707		; 0000164bH
  02296	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0229e	e8 00 00 00 00	 call	 _PyParallel_Guard
  022a3	85 c0		 test	 eax, eax
  022a5	75 08		 jne	 SHORT $LN84@obj2ast_ex@2
  022a7	48 8b cb	 mov	 rcx, rbx
  022aa	e8 00 00 00 00	 call	 _Py_DecRef
$LN84@obj2ast_ex@2:

; 5711 :         }
; 5712 :         if (_PyObject_HasAttrId(obj, &PyId_ctx)) {

  022af	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_ctx
  022b4	48 8b cf	 mov	 rcx, rdi
  022b7	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  022bb	48 8b d3	 mov	 rdx, rbx
  022be	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  022c3	85 c0		 test	 eax, eax
  022c5	74 7b		 je	 SHORT $LN80@obj2ast_ex@2

; 5713 :             int res;
; 5714 :             tmp = _PyObject_GetAttrId(obj, &PyId_ctx);

  022c7	48 8b d3	 mov	 rdx, rbx
  022ca	48 8b cf	 mov	 rcx, rdi
  022cd	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  022d2	48 8b d8	 mov	 rbx, rax

; 5715 :             if (tmp == NULL) goto failed;

  022d5	48 85 c0	 test	 rax, rax
  022d8	0f 84 6f 05 00
	00		 je	 $LN622@obj2ast_ex@2

; 5716 :             res = obj2ast_expr_context(tmp, &ctx, arena);

  022de	48 8d 55 af	 lea	 rdx, QWORD PTR ctx$26855[rbp-169]
  022e2	48 8b c8	 mov	 rcx, rax
  022e5	e8 00 00 00 00	 call	 obj2ast_expr_context

; 5717 :             if (res != 0) goto failed;

  022ea	85 c0		 test	 eax, eax
  022ec	0f 85 48 df ff
	ff		 jne	 $failed$25874

; 5718 :             Py_CLEAR(tmp);

  022f2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  022f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  02300	4c 8b cb	 mov	 r9, rbx
  02303	41 b8 56 16 00
	00		 mov	 r8d, 5718		; 00001656H
  02309	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  02311	e8 00 00 00 00	 call	 _PyParallel_Guard
  02316	85 c0		 test	 eax, eax
  02318	75 0a		 jne	 SHORT $LN76@obj2ast_ex@2
  0231a	48 8b cb	 mov	 rcx, rbx
  0231d	33 db		 xor	 ebx, ebx
  0231f	e8 00 00 00 00	 call	 _Py_DecRef
$LN76@obj2ast_ex@2:

; 5722 :         }
; 5723 :         *out = Starred(value, ctx, lineno, col_offset, arena);

  02324	44 8b 4d 67	 mov	 r9d, DWORD PTR col_offset$[rbp-169]
  02328	44 8b 45 7f	 mov	 r8d, DWORD PTR lineno$[rbp-169]
  0232c	8b 55 af	 mov	 edx, DWORD PTR ctx$26855[rbp-169]
  0232f	48 8b 4d df	 mov	 rcx, QWORD PTR value$26854[rbp-169]
  02333	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  02338	e8 00 00 00 00	 call	 _Py_Starred

; 5724 :         if (*out == NULL) goto failed;
; 5725 :         return 0;

  0233d	e9 ba 04 00 00	 jmp	 $LN625@obj2ast_ex@2
$LN80@obj2ast_ex@2:

; 5719 :         } else {
; 5720 :             PyErr_SetString(PyExc_TypeError, "required field \"ctx\" missing from Starred");

  02342	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@BBMCEKDP@required?5field?5?$CCctx?$CC?5missing?5fro@

; 5721 :             return 1;

  02349	e9 f3 04 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN88@obj2ast_ex@2:

; 5708 :         } else {
; 5709 :             PyErr_SetString(PyExc_TypeError, "required field \"value\" missing from Starred");

  0234e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@HHGGPHKN@required?5field?5?$CCvalue?$CC?5missing?5f@

; 5710 :             return 1;

  02355	e9 e7 04 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN89@obj2ast_ex@2:

; 5726 :     }
; 5727 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Name_type);

  0235a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Name_type
  02361	e8 00 00 00 00	 call	 PyObject_IsInstance

; 5728 :     if (isinstance == -1) {

  02366	83 f8 ff	 cmp	 eax, -1

; 5729 :         return 1;

  02369	0f 84 de 04 00
	00		 je	 $LN622@obj2ast_ex@2

; 5730 :     }
; 5731 :     if (isinstance) {
; 5732 :         identifier id;
; 5733 :         expr_context_ty ctx;
; 5734 : 
; 5735 :         if (_PyObject_HasAttrId(obj, &PyId_id)) {

  0236f	48 8b cf	 mov	 rcx, rdi
  02372	85 c0		 test	 eax, eax
  02374	0f 84 22 01 00
	00		 je	 $LN70@obj2ast_ex@2
  0237a	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_id
  0237f	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  02383	48 8b d3	 mov	 rdx, rbx
  02386	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0238b	85 c0		 test	 eax, eax
  0238d	0f 84 fd 00 00
	00		 je	 $LN69@obj2ast_ex@2

; 5736 :             int res;
; 5737 :             tmp = _PyObject_GetAttrId(obj, &PyId_id);

  02393	48 8b d3	 mov	 rdx, rbx
  02396	48 8b cf	 mov	 rcx, rdi
  02399	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0239e	48 8b d8	 mov	 rbx, rax

; 5738 :             if (tmp == NULL) goto failed;

  023a1	48 85 c0	 test	 rax, rax
  023a4	0f 84 a3 04 00
	00		 je	 $LN622@obj2ast_ex@2

; 5739 :             res = obj2ast_identifier(tmp, &id, arena);

  023aa	48 8d 55 df	 lea	 rdx, QWORD PTR id$26891[rbp-169]
  023ae	4c 8b c6	 mov	 r8, rsi
  023b1	48 8b c8	 mov	 rcx, rax
  023b4	e8 00 00 00 00	 call	 obj2ast_identifier

; 5740 :             if (res != 0) goto failed;

  023b9	85 c0		 test	 eax, eax
  023bb	0f 85 79 de ff
	ff		 jne	 $failed$25874

; 5741 :             Py_CLEAR(tmp);

  023c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  023c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  023cf	4c 8b cb	 mov	 r9, rbx
  023d2	41 b8 6d 16 00
	00		 mov	 r8d, 5741		; 0000166dH
  023d8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  023e0	e8 00 00 00 00	 call	 _PyParallel_Guard
  023e5	85 c0		 test	 eax, eax
  023e7	75 08		 jne	 SHORT $LN65@obj2ast_ex@2
  023e9	48 8b cb	 mov	 rcx, rbx
  023ec	e8 00 00 00 00	 call	 _Py_DecRef
$LN65@obj2ast_ex@2:

; 5745 :         }
; 5746 :         if (_PyObject_HasAttrId(obj, &PyId_ctx)) {

  023f1	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_ctx
  023f6	48 8b cf	 mov	 rcx, rdi
  023f9	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  023fd	48 8b d3	 mov	 rdx, rbx
  02400	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  02405	85 c0		 test	 eax, eax
  02407	74 7b		 je	 SHORT $LN61@obj2ast_ex@2

; 5747 :             int res;
; 5748 :             tmp = _PyObject_GetAttrId(obj, &PyId_ctx);

  02409	48 8b d3	 mov	 rdx, rbx
  0240c	48 8b cf	 mov	 rcx, rdi
  0240f	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  02414	48 8b d8	 mov	 rbx, rax

; 5749 :             if (tmp == NULL) goto failed;

  02417	48 85 c0	 test	 rax, rax
  0241a	0f 84 2d 04 00
	00		 je	 $LN622@obj2ast_ex@2

; 5750 :             res = obj2ast_expr_context(tmp, &ctx, arena);

  02420	48 8d 55 af	 lea	 rdx, QWORD PTR ctx$26892[rbp-169]
  02424	48 8b c8	 mov	 rcx, rax
  02427	e8 00 00 00 00	 call	 obj2ast_expr_context

; 5751 :             if (res != 0) goto failed;

  0242c	85 c0		 test	 eax, eax
  0242e	0f 85 06 de ff
	ff		 jne	 $failed$25874

; 5752 :             Py_CLEAR(tmp);

  02434	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0243b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  02442	4c 8b cb	 mov	 r9, rbx
  02445	41 b8 78 16 00
	00		 mov	 r8d, 5752		; 00001678H
  0244b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  02453	e8 00 00 00 00	 call	 _PyParallel_Guard
  02458	85 c0		 test	 eax, eax
  0245a	75 0a		 jne	 SHORT $LN57@obj2ast_ex@2
  0245c	48 8b cb	 mov	 rcx, rbx
  0245f	33 db		 xor	 ebx, ebx
  02461	e8 00 00 00 00	 call	 _Py_DecRef
$LN57@obj2ast_ex@2:

; 5756 :         }
; 5757 :         *out = Name(id, ctx, lineno, col_offset, arena);

  02466	44 8b 4d 67	 mov	 r9d, DWORD PTR col_offset$[rbp-169]
  0246a	44 8b 45 7f	 mov	 r8d, DWORD PTR lineno$[rbp-169]
  0246e	8b 55 af	 mov	 edx, DWORD PTR ctx$26892[rbp-169]
  02471	48 8b 4d df	 mov	 rcx, QWORD PTR id$26891[rbp-169]
  02475	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0247a	e8 00 00 00 00	 call	 _Py_Name

; 5758 :         if (*out == NULL) goto failed;
; 5759 :         return 0;

  0247f	e9 78 03 00 00	 jmp	 $LN625@obj2ast_ex@2
$LN61@obj2ast_ex@2:

; 5753 :         } else {
; 5754 :             PyErr_SetString(PyExc_TypeError, "required field \"ctx\" missing from Name");

  02484	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@BCDOFIHJ@required?5field?5?$CCctx?$CC?5missing?5fro@

; 5755 :             return 1;

  0248b	e9 b1 03 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN69@obj2ast_ex@2:

; 5742 :         } else {
; 5743 :             PyErr_SetString(PyExc_TypeError, "required field \"id\" missing from Name");

  02490	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@KDGIGLGJ@required?5field?5?$CCid?$CC?5missing?5from@

; 5744 :             return 1;

  02497	e9 a5 03 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN70@obj2ast_ex@2:

; 5760 :     }
; 5761 :     isinstance = PyObject_IsInstance(obj, (PyObject*)List_type);

  0249c	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR List_type
  024a3	e8 00 00 00 00	 call	 PyObject_IsInstance

; 5762 :     if (isinstance == -1) {

  024a8	83 f8 ff	 cmp	 eax, -1

; 5763 :         return 1;

  024ab	0f 84 9c 03 00
	00		 je	 $LN622@obj2ast_ex@2

; 5764 :     }
; 5765 :     if (isinstance) {
; 5766 :         asdl_seq* elts;
; 5767 :         expr_context_ty ctx;
; 5768 : 
; 5769 :         if (_PyObject_HasAttrId(obj, &PyId_elts)) {

  024b1	48 8b cf	 mov	 rcx, rdi
  024b4	85 c0		 test	 eax, eax
  024b6	0f 84 99 01 00
	00		 je	 $LN51@obj2ast_ex@2
  024bc	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_elts
  024c1	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  024c5	48 8b d3	 mov	 rdx, rbx
  024c8	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  024cd	85 c0		 test	 eax, eax
  024cf	0f 84 74 01 00
	00		 je	 $LN50@obj2ast_ex@2

; 5770 :             int res;
; 5771 :             Py_ssize_t len;
; 5772 :             Py_ssize_t i;
; 5773 :             tmp = _PyObject_GetAttrId(obj, &PyId_elts);

  024d5	48 8b d3	 mov	 rdx, rbx
  024d8	48 8b cf	 mov	 rcx, rdi
  024db	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  024e0	48 8b d8	 mov	 rbx, rax

; 5774 :             if (tmp == NULL) goto failed;

  024e3	48 85 c0	 test	 rax, rax
  024e6	0f 84 61 03 00
	00		 je	 $LN622@obj2ast_ex@2

; 5775 :             if (!PyList_Check(tmp)) {

  024ec	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  024f0	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  024fb	75 10		 jne	 SHORT $LN48@obj2ast_ex@2

; 5776 :                 PyErr_Format(PyExc_TypeError, "List field \"elts\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  024fd	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  02501	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@NOICNLCE@List?5field?5?$CCelts?$CC?5must?5be?5a?5list@

; 5777 :                 goto failed;

  02508	e9 21 dd ff ff	 jmp	 $LN624@obj2ast_ex@2
$LN48@obj2ast_ex@2:

; 5778 :             }
; 5779 :             len = PyList_GET_SIZE(tmp);

  0250d	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 5780 :             elts = asdl_seq_new(len, arena);

  02511	48 8b d6	 mov	 rdx, rsi
  02514	48 8b c8	 mov	 rcx, rax
  02517	48 89 45 c7	 mov	 QWORD PTR len$1$[rbp-169], rax
  0251b	e8 00 00 00 00	 call	 asdl_seq_new
  02520	48 89 45 b7	 mov	 QWORD PTR elts$1$[rbp-169], rax

; 5781 :             if (elts == NULL) goto failed;

  02524	48 85 c0	 test	 rax, rax
  02527	0f 84 0d dd ff
	ff		 je	 $failed$25874

; 5782 :             for (i = 0; i < len; i++) {

  0252d	45 33 c9	 xor	 r9d, r9d
  02530	4c 89 4d bf	 mov	 QWORD PTR i$1$[rbp-169], r9
  02534	4c 39 4d c7	 cmp	 QWORD PTR len$1$[rbp-169], r9
  02538	7e 40		 jle	 SHORT $LN42@obj2ast_ex@2
  0253a	66 0f 1f 44 00
	00		 npad	 6
$LL46@obj2ast_ex@2:

; 5783 :                 expr_ty value;
; 5784 :                 res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);

  02540	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  02544	48 8d 55 df	 lea	 rdx, QWORD PTR value$26945[rbp-169]
  02548	4c 8b c6	 mov	 r8, rsi
  0254b	4a 8b 0c c9	 mov	 rcx, QWORD PTR [rcx+r9*8]
  0254f	e8 00 00 00 00	 call	 obj2ast_expr

; 5785 :                 if (res != 0) goto failed;

  02554	85 c0		 test	 eax, eax
  02556	0f 85 de dc ff
	ff		 jne	 $failed$25874

; 5786 :                 asdl_seq_SET(elts, i, value);

  0255c	4c 8b 4d bf	 mov	 r9, QWORD PTR i$1$[rbp-169]
  02560	48 8b 4d b7	 mov	 rcx, QWORD PTR elts$1$[rbp-169]
  02564	48 8b 45 df	 mov	 rax, QWORD PTR value$26945[rbp-169]
  02568	4a 89 44 c9 08	 mov	 QWORD PTR [rcx+r9*8+8], rax
  0256d	49 ff c1	 inc	 r9
  02570	4c 89 4d bf	 mov	 QWORD PTR i$1$[rbp-169], r9
  02574	4c 3b 4d c7	 cmp	 r9, QWORD PTR len$1$[rbp-169]
  02578	7c c6		 jl	 SHORT $LL46@obj2ast_ex@2
$LN42@obj2ast_ex@2:

; 5787 :             }
; 5788 :             Py_CLEAR(tmp);

  0257a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  02581	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  02588	4c 8b cb	 mov	 r9, rbx
  0258b	41 b8 9c 16 00
	00		 mov	 r8d, 5788		; 0000169cH
  02591	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  02599	e8 00 00 00 00	 call	 _PyParallel_Guard
  0259e	85 c0		 test	 eax, eax
  025a0	75 08		 jne	 SHORT $LN41@obj2ast_ex@2
  025a2	48 8b cb	 mov	 rcx, rbx
  025a5	e8 00 00 00 00	 call	 _Py_DecRef
$LN41@obj2ast_ex@2:

; 5792 :         }
; 5793 :         if (_PyObject_HasAttrId(obj, &PyId_ctx)) {

  025aa	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_ctx
  025af	48 8b cf	 mov	 rcx, rdi
  025b2	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  025b6	48 8b d3	 mov	 rdx, rbx
  025b9	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  025be	85 c0		 test	 eax, eax
  025c0	74 7b		 je	 SHORT $LN37@obj2ast_ex@2

; 5794 :             int res;
; 5795 :             tmp = _PyObject_GetAttrId(obj, &PyId_ctx);

  025c2	48 8b d3	 mov	 rdx, rbx
  025c5	48 8b cf	 mov	 rcx, rdi
  025c8	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  025cd	48 8b d8	 mov	 rbx, rax

; 5796 :             if (tmp == NULL) goto failed;

  025d0	48 85 c0	 test	 rax, rax
  025d3	0f 84 74 02 00
	00		 je	 $LN622@obj2ast_ex@2

; 5797 :             res = obj2ast_expr_context(tmp, &ctx, arena);

  025d9	48 8d 55 af	 lea	 rdx, QWORD PTR ctx$26929[rbp-169]
  025dd	48 8b c8	 mov	 rcx, rax
  025e0	e8 00 00 00 00	 call	 obj2ast_expr_context

; 5798 :             if (res != 0) goto failed;

  025e5	85 c0		 test	 eax, eax
  025e7	0f 85 4d dc ff
	ff		 jne	 $failed$25874

; 5799 :             Py_CLEAR(tmp);

  025ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  025f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  025fb	4c 8b cb	 mov	 r9, rbx
  025fe	41 b8 a7 16 00
	00		 mov	 r8d, 5799		; 000016a7H
  02604	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0260c	e8 00 00 00 00	 call	 _PyParallel_Guard
  02611	85 c0		 test	 eax, eax
  02613	75 0a		 jne	 SHORT $LN33@obj2ast_ex@2
  02615	48 8b cb	 mov	 rcx, rbx
  02618	33 db		 xor	 ebx, ebx
  0261a	e8 00 00 00 00	 call	 _Py_DecRef
$LN33@obj2ast_ex@2:

; 5803 :         }
; 5804 :         *out = List(elts, ctx, lineno, col_offset, arena);

  0261f	44 8b 4d 67	 mov	 r9d, DWORD PTR col_offset$[rbp-169]
  02623	44 8b 45 7f	 mov	 r8d, DWORD PTR lineno$[rbp-169]
  02627	8b 55 af	 mov	 edx, DWORD PTR ctx$26929[rbp-169]
  0262a	48 8b 4d b7	 mov	 rcx, QWORD PTR elts$1$[rbp-169]
  0262e	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  02633	e8 00 00 00 00	 call	 _Py_List

; 5805 :         if (*out == NULL) goto failed;
; 5806 :         return 0;

  02638	e9 bf 01 00 00	 jmp	 $LN625@obj2ast_ex@2
$LN37@obj2ast_ex@2:

; 5800 :         } else {
; 5801 :             PyErr_SetString(PyExc_TypeError, "required field \"ctx\" missing from List");

  0263d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@OICLIOJM@required?5field?5?$CCctx?$CC?5missing?5fro@

; 5802 :             return 1;

  02644	e9 f8 01 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN50@obj2ast_ex@2:

; 5789 :         } else {
; 5790 :             PyErr_SetString(PyExc_TypeError, "required field \"elts\" missing from List");

  02649	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@LLANLLOK@required?5field?5?$CCelts?$CC?5missing?5fr@

; 5791 :             return 1;

  02650	e9 ec 01 00 00	 jmp	 $LN623@obj2ast_ex@2
$LN51@obj2ast_ex@2:

; 5807 :     }
; 5808 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Tuple_type);

  02655	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Tuple_type
  0265c	e8 00 00 00 00	 call	 PyObject_IsInstance

; 5809 :     if (isinstance == -1) {

  02661	83 f8 ff	 cmp	 eax, -1

; 5810 :         return 1;

  02664	0f 84 e3 01 00
	00		 je	 $LN622@obj2ast_ex@2

; 5811 :     }
; 5812 :     if (isinstance) {

  0266a	85 c0		 test	 eax, eax
  0266c	0f 84 b0 01 00
	00		 je	 $LN27@obj2ast_ex@2

; 5813 :         asdl_seq* elts;
; 5814 :         expr_context_ty ctx;
; 5815 : 
; 5816 :         if (_PyObject_HasAttrId(obj, &PyId_elts)) {

  02672	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_elts
  02677	48 8b cf	 mov	 rcx, rdi
  0267a	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  0267e	48 8b d3	 mov	 rdx, rbx
  02681	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  02686	85 c0		 test	 eax, eax
  02688	0f 84 8b 01 00
	00		 je	 $LN26@obj2ast_ex@2

; 5817 :             int res;
; 5818 :             Py_ssize_t len;
; 5819 :             Py_ssize_t i;
; 5820 :             tmp = _PyObject_GetAttrId(obj, &PyId_elts);

  0268e	48 8b d3	 mov	 rdx, rbx
  02691	48 8b cf	 mov	 rcx, rdi
  02694	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  02699	48 8b d8	 mov	 rbx, rax

; 5821 :             if (tmp == NULL) goto failed;

  0269c	48 85 c0	 test	 rax, rax
  0269f	0f 84 a8 01 00
	00		 je	 $LN622@obj2ast_ex@2

; 5822 :             if (!PyList_Check(tmp)) {

  026a5	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  026a9	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  026b4	75 10		 jne	 SHORT $LN24@obj2ast_ex@2

; 5823 :                 PyErr_Format(PyExc_TypeError, "Tuple field \"elts\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  026b6	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  026ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@HDHPGNPM@Tuple?5field?5?$CCelts?$CC?5must?5be?5a?5lis@

; 5824 :                 goto failed;

  026c1	e9 68 db ff ff	 jmp	 $LN624@obj2ast_ex@2
$LN24@obj2ast_ex@2:

; 5825 :             }
; 5826 :             len = PyList_GET_SIZE(tmp);

  026c6	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 5827 :             elts = asdl_seq_new(len, arena);

  026ca	48 8b d6	 mov	 rdx, rsi
  026cd	48 8b c8	 mov	 rcx, rax
  026d0	48 89 45 c7	 mov	 QWORD PTR len$1$[rbp-169], rax
  026d4	e8 00 00 00 00	 call	 asdl_seq_new
  026d9	48 89 45 b7	 mov	 QWORD PTR elts$1$[rbp-169], rax

; 5828 :             if (elts == NULL) goto failed;

  026dd	48 85 c0	 test	 rax, rax
  026e0	0f 84 54 db ff
	ff		 je	 $failed$25874

; 5829 :             for (i = 0; i < len; i++) {

  026e6	45 33 c9	 xor	 r9d, r9d
  026e9	4c 89 4d bf	 mov	 QWORD PTR i$1$[rbp-169], r9
  026ed	4c 39 4d c7	 cmp	 QWORD PTR len$1$[rbp-169], r9
  026f1	7e 47		 jle	 SHORT $LN18@obj2ast_ex@2
  026f3	66 66 66 66 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL22@obj2ast_ex@2:

; 5830 :                 expr_ty value;
; 5831 :                 res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);

  02700	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  02704	48 8d 55 df	 lea	 rdx, QWORD PTR value$26995[rbp-169]
  02708	4c 8b c6	 mov	 r8, rsi
  0270b	4a 8b 0c c9	 mov	 rcx, QWORD PTR [rcx+r9*8]
  0270f	e8 00 00 00 00	 call	 obj2ast_expr

; 5832 :                 if (res != 0) goto failed;

  02714	85 c0		 test	 eax, eax
  02716	0f 85 1e db ff
	ff		 jne	 $failed$25874

; 5833 :                 asdl_seq_SET(elts, i, value);

  0271c	4c 8b 4d bf	 mov	 r9, QWORD PTR i$1$[rbp-169]
  02720	48 8b 4d b7	 mov	 rcx, QWORD PTR elts$1$[rbp-169]
  02724	48 8b 45 df	 mov	 rax, QWORD PTR value$26995[rbp-169]
  02728	4a 89 44 c9 08	 mov	 QWORD PTR [rcx+r9*8+8], rax
  0272d	49 ff c1	 inc	 r9
  02730	4c 89 4d bf	 mov	 QWORD PTR i$1$[rbp-169], r9
  02734	4c 3b 4d c7	 cmp	 r9, QWORD PTR len$1$[rbp-169]
  02738	7c c6		 jl	 SHORT $LL22@obj2ast_ex@2
$LN18@obj2ast_ex@2:

; 5834 :             }
; 5835 :             Py_CLEAR(tmp);

  0273a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  02741	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  02748	4c 8b cb	 mov	 r9, rbx
  0274b	41 b8 cb 16 00
	00		 mov	 r8d, 5835		; 000016cbH
  02751	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  02759	e8 00 00 00 00	 call	 _PyParallel_Guard
  0275e	85 c0		 test	 eax, eax
  02760	75 08		 jne	 SHORT $LN17@obj2ast_ex@2
  02762	48 8b cb	 mov	 rcx, rbx
  02765	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@obj2ast_ex@2:

; 5839 :         }
; 5840 :         if (_PyObject_HasAttrId(obj, &PyId_ctx)) {

  0276a	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_ctx
  0276f	48 8b cf	 mov	 rcx, rdi
  02772	48 03 5d 97	 add	 rbx, QWORD PTR tv4095[rbp-169]
  02776	48 8b d3	 mov	 rdx, rbx
  02779	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0277e	85 c0		 test	 eax, eax
  02780	0f 84 8a 00 00
	00		 je	 $LN13@obj2ast_ex@2

; 5841 :             int res;
; 5842 :             tmp = _PyObject_GetAttrId(obj, &PyId_ctx);

  02786	48 8b d3	 mov	 rdx, rbx
  02789	48 8b cf	 mov	 rcx, rdi
  0278c	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  02791	48 8b d8	 mov	 rbx, rax

; 5843 :             if (tmp == NULL) goto failed;

  02794	48 85 c0	 test	 rax, rax
  02797	0f 84 b0 00 00
	00		 je	 $LN622@obj2ast_ex@2

; 5844 :             res = obj2ast_expr_context(tmp, &ctx, arena);

  0279d	48 8d 55 af	 lea	 rdx, QWORD PTR ctx$26979[rbp-169]
  027a1	48 8b c8	 mov	 rcx, rax
  027a4	e8 00 00 00 00	 call	 obj2ast_expr_context

; 5845 :             if (res != 0) goto failed;

  027a9	85 c0		 test	 eax, eax
  027ab	0f 85 89 da ff
	ff		 jne	 $failed$25874

; 5846 :             Py_CLEAR(tmp);

  027b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  027b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  027bf	4c 8b cb	 mov	 r9, rbx
  027c2	41 b8 d6 16 00
	00		 mov	 r8d, 5846		; 000016d6H
  027c8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  027d0	e8 00 00 00 00	 call	 _PyParallel_Guard
  027d5	85 c0		 test	 eax, eax
  027d7	75 0a		 jne	 SHORT $LN9@obj2ast_ex@2
  027d9	48 8b cb	 mov	 rcx, rbx
  027dc	33 db		 xor	 ebx, ebx
  027de	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@obj2ast_ex@2:

; 5850 :         }
; 5851 :         *out = Tuple(elts, ctx, lineno, col_offset, arena);

  027e3	44 8b 4d 67	 mov	 r9d, DWORD PTR col_offset$[rbp-169]
  027e7	44 8b 45 7f	 mov	 r8d, DWORD PTR lineno$[rbp-169]
  027eb	8b 55 af	 mov	 edx, DWORD PTR ctx$26979[rbp-169]
  027ee	48 8b 4d b7	 mov	 rcx, QWORD PTR elts$1$[rbp-169]
  027f2	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  027f7	e8 00 00 00 00	 call	 _Py_Tuple
$LN625@obj2ast_ex@2:
  027fc	48 8b 4d 6f	 mov	 rcx, QWORD PTR out$[rbp-169]
  02800	48 89 01	 mov	 QWORD PTR [rcx], rax

; 5852 :         if (*out == NULL) goto failed;

  02803	48 85 c0	 test	 rax, rax
  02806	0f 84 2e da ff
	ff		 je	 $failed$25874

; 5853 :         return 0;

  0280c	33 c0		 xor	 eax, eax
  0280e	eb 42		 jmp	 SHORT $LN621@obj2ast_ex@2
$LN13@obj2ast_ex@2:

; 5847 :         } else {
; 5848 :             PyErr_SetString(PyExc_TypeError, "required field \"ctx\" missing from Tuple");

  02810	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@KLMOMMFA@required?5field?5?$CCctx?$CC?5missing?5fro@

; 5849 :             return 1;

  02817	eb 28		 jmp	 SHORT $LN623@obj2ast_ex@2
$LN26@obj2ast_ex@2:

; 5836 :         } else {
; 5837 :             PyErr_SetString(PyExc_TypeError, "required field \"elts\" missing from Tuple");

  02819	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@BCPLDOGM@required?5field?5?$CCelts?$CC?5missing?5fr@

; 5838 :             return 1;

  02820	eb 1f		 jmp	 SHORT $LN623@obj2ast_ex@2
$LN27@obj2ast_ex@2:

; 5854 :     }
; 5855 : 
; 5856 :     PyErr_Format(PyExc_TypeError, "expected some sort of expr, but got %R", obj);

  02822	4c 8b c7	 mov	 r8, rdi
  02825	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@JDNNBGGD@expected?5some?5sort?5of?5expr?0?5but?5@
  0282c	e9 fd d9 ff ff	 jmp	 $LN624@obj2ast_ex@2
$LN565@obj2ast_ex@2:

; 4809 :     } else {
; 4810 :         PyErr_SetString(PyExc_TypeError, "required field \"col_offset\" missing from expr");

  02831	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@IEOFEKON@required?5field?5?$CCcol_offset?$CC?5miss@

; 4811 :         return 1;

  02838	eb 07		 jmp	 SHORT $LN623@obj2ast_ex@2
$LN573@obj2ast_ex@2:

; 4798 :     } else {
; 4799 :         PyErr_SetString(PyExc_TypeError, "required field \"lineno\" missing from expr");

  0283a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@JMPPCFJN@required?5field?5?$CClineno?$CC?5missing?5@
$LN623@obj2ast_ex@2:
  02841	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  02848	e8 00 00 00 00	 call	 PyErr_SetString
$LN622@obj2ast_ex@2:

; 4800 :         return 1;

  0284d	b8 01 00 00 00	 mov	 eax, 1
$LN621@obj2ast_ex@2:
  02852	48 8b 9c 24 20
	01 00 00	 mov	 rbx, QWORD PTR [rsp+288]

; 5860 : }

  0285a	48 81 c4 f0 00
	00 00		 add	 rsp, 240		; 000000f0H
  02861	5f		 pop	 rdi
  02862	5e		 pop	 rsi
  02863	5d		 pop	 rbp
  02864	c3		 ret	 0
obj2ast_expr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DD@IHPFLFKK@required?5field?5?$CClineno?$CC?5missing?5@ ; `string'
PUBLIC	??_C@_0DH@FCLGIHBO@required?5field?5?$CCcol_offset?$CC?5miss@ ; `string'
PUBLIC	??_C@_0DA@EMHGDKLJ@expected?5some?5sort?5of?5excepthand@ ; `string'
PUBLIC	??_C@_0DB@IGOEPGJG@required?5field?5?$CCbody?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0DI@PLBLPMFL@ExceptHandler?5field?5?$CCbody?$CC?5must?5@ ; `string'
PUBLIC	??_C@_0BG@GEEGCCG@obj2ast_excepthandler?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_excepthandler DD imagerel obj2ast_excepthandler
	DD	imagerel obj2ast_excepthandler+65
	DD	imagerel $unwind$obj2ast_excepthandler
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$obj2ast_excepthandler DD imagerel obj2ast_excepthandler+65
	DD	imagerel obj2ast_excepthandler+109
	DD	imagerel $chain$1$obj2ast_excepthandler
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$obj2ast_excepthandler DD imagerel obj2ast_excepthandler+109
	DD	imagerel obj2ast_excepthandler+750
	DD	imagerel $chain$4$obj2ast_excepthandler
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$obj2ast_excepthandler DD imagerel obj2ast_excepthandler+750
	DD	imagerel obj2ast_excepthandler+773
	DD	imagerel $chain$5$obj2ast_excepthandler
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$obj2ast_excepthandler DD imagerel obj2ast_excepthandler+773
	DD	imagerel obj2ast_excepthandler+1029
	DD	imagerel $chain$7$obj2ast_excepthandler
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$obj2ast_excepthandler DD imagerel obj2ast_excepthandler+1029
	DD	imagerel obj2ast_excepthandler+1058
	DD	imagerel $chain$8$obj2ast_excepthandler
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$obj2ast_excepthandler DD 040021H
	DD	0a6400H
	DD	0113400H
	DD	imagerel obj2ast_excepthandler
	DD	imagerel obj2ast_excepthandler+65
	DD	imagerel $unwind$obj2ast_excepthandler
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$obj2ast_excepthandler DD 0a0021H
	DD	08d400H
	DD	09c400H
	DD	0a6400H
	DD	0b5400H
	DD	0113400H
	DD	imagerel obj2ast_excepthandler
	DD	imagerel obj2ast_excepthandler+65
	DD	imagerel $unwind$obj2ast_excepthandler
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$obj2ast_excepthandler DD 021H
	DD	imagerel obj2ast_excepthandler+65
	DD	imagerel obj2ast_excepthandler+109
	DD	imagerel $chain$1$obj2ast_excepthandler
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$obj2ast_excepthandler DD 061521H
	DD	08d415H
	DD	09c410H
	DD	0b5405H
	DD	imagerel obj2ast_excepthandler+65
	DD	imagerel obj2ast_excepthandler+109
	DD	imagerel $chain$1$obj2ast_excepthandler
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$obj2ast_excepthandler DD 040d21H
	DD	0a640dH
	DD	0113408H
	DD	imagerel obj2ast_excepthandler
	DD	imagerel obj2ast_excepthandler+65
	DD	imagerel $unwind$obj2ast_excepthandler
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_excepthandler DD 040a01H
	DD	0f006b20aH
	DD	07002e004H
xdata	ENDS
;	COMDAT ??_C@_0DD@IHPFLFKK@required?5field?5?$CClineno?$CC?5missing?5@
CONST	SEGMENT
??_C@_0DD@IHPFLFKK@required?5field?5?$CClineno?$CC?5missing?5@ DB 'requir'
	DB	'ed field "lineno" missing from excepthandler', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@FCLGIHBO@required?5field?5?$CCcol_offset?$CC?5miss@
CONST	SEGMENT
??_C@_0DH@FCLGIHBO@required?5field?5?$CCcol_offset?$CC?5miss@ DB 'require'
	DB	'd field "col_offset" missing from excepthandler', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@EMHGDKLJ@expected?5some?5sort?5of?5excepthand@
CONST	SEGMENT
??_C@_0DA@EMHGDKLJ@expected?5some?5sort?5of?5excepthand@ DB 'expected som'
	DB	'e sort of excepthandler, but got %R', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@IGOEPGJG@required?5field?5?$CCbody?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0DB@IGOEPGJG@required?5field?5?$CCbody?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "body" missing from ExceptHandler', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@PLBLPMFL@ExceptHandler?5field?5?$CCbody?$CC?5must?5@
CONST	SEGMENT
??_C@_0DI@PLBLPMFL@ExceptHandler?5field?5?$CCbody?$CC?5must?5@ DB 'Except'
	DB	'Handler field "body" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GEEGCCG@obj2ast_excepthandler?$AA@
CONST	SEGMENT
??_C@_0BG@GEEGCCG@obj2ast_excepthandler?$AA@ DB 'obj2ast_excepthandler', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT obj2ast_excepthandler
_TEXT	SEGMENT
value$27480 = 48
name$27433 = 48
type$27432 = 48
col_offset$ = 128
obj$ = 128
out$ = 136
arena$ = 144
lineno$ = 152
obj2ast_excepthandler PROC				; COMDAT

; 6365 : {

  00000	40 57		 push	 rdi
  00002	41 56		 push	 r14
  00004	41 57		 push	 r15
  00006	48 83 ec 60	 sub	 rsp, 96			; 00000060H

; 6366 :     int isinstance;
; 6367 : 
; 6368 :     PyObject *tmp = NULL;
; 6369 :     int lineno;
; 6370 :     int col_offset;
; 6371 : 
; 6372 :     if (obj == Py_None) {

  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00011	4d 8b f0	 mov	 r14, r8
  00014	4c 8b fa	 mov	 r15, rdx
  00017	48 8b f9	 mov	 rdi, rcx
  0001a	48 3b c8	 cmp	 rcx, rax
  0001d	75 13		 jne	 SHORT $LN53@obj2ast_ex@3

; 6373 :         *out = NULL;

  0001f	48 c7 02 00 00
	00 00		 mov	 QWORD PTR [rdx], 0

; 6374 :         return 0;

  00026	33 c0		 xor	 eax, eax

; 6459 :     return 1;
; 6460 : }

  00028	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0002c	41 5f		 pop	 r15
  0002e	41 5e		 pop	 r14
  00030	5f		 pop	 rdi
  00031	c3		 ret	 0
$LN53@obj2ast_ex@3:

; 6375 :     }
; 6376 :     if (_PyObject_HasAttrId(obj, &PyId_lineno)) {

  00032	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00038	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00041	48 89 9c 24 88
	00 00 00	 mov	 QWORD PTR [rsp+136], rbx
  00049	48 89 74 24 50	 mov	 QWORD PTR [rsp+80], rsi
  0004e	48 8b 34 c8	 mov	 rsi, QWORD PTR [rax+rcx*8]
  00052	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_lineno
  00057	48 03 de	 add	 rbx, rsi
  0005a	48 8b cf	 mov	 rcx, rdi
  0005d	48 8b d3	 mov	 rdx, rbx
  00060	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00065	85 c0		 test	 eax, eax
  00067	0f 84 98 03 00
	00		 je	 $LN52@obj2ast_ex@3

; 6377 :         int res;
; 6378 :         tmp = _PyObject_GetAttrId(obj, &PyId_lineno);

  0006d	48 89 6c 24 58	 mov	 QWORD PTR [rsp+88], rbp
  00072	48 8b d3	 mov	 rdx, rbx
  00075	48 8b cf	 mov	 rcx, rdi
  00078	4c 89 64 24 48	 mov	 QWORD PTR [rsp+72], r12
  0007d	4c 89 6c 24 40	 mov	 QWORD PTR [rsp+64], r13
  00082	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00087	48 8b d8	 mov	 rbx, rax

; 6379 :         if (tmp == NULL) goto failed;

  0008a	48 85 c0	 test	 rax, rax
  0008d	0f 84 47 02 00
	00		 je	 $LN3@obj2ast_ex@3

; 6380 :         res = obj2ast_int(tmp, &lineno, arena);

  00093	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR lineno$[rsp]
  0009b	48 8b c8	 mov	 rcx, rax
  0009e	e8 00 00 00 00	 call	 obj2ast_int

; 6381 :         if (res != 0) goto failed;

  000a3	85 c0		 test	 eax, eax
  000a5	0f 85 22 02 00
	00		 jne	 $failed$27401

; 6382 :         Py_CLEAR(tmp);

  000ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@GEEGCCG@obj2ast_excepthandler?$AA@
  000b9	4c 8b cb	 mov	 r9, rbx
  000bc	41 b8 ee 18 00
	00		 mov	 r8d, 6382		; 000018eeH
  000c2	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ca	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cf	85 c0		 test	 eax, eax
  000d1	75 08		 jne	 SHORT $LN48@obj2ast_ex@3
  000d3	48 8b cb	 mov	 rcx, rbx
  000d6	e8 00 00 00 00	 call	 _Py_DecRef
$LN48@obj2ast_ex@3:

; 6386 :     }
; 6387 :     if (_PyObject_HasAttrId(obj, &PyId_col_offset)) {

  000db	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_col_offset
  000e0	48 8b cf	 mov	 rcx, rdi
  000e3	48 03 de	 add	 rbx, rsi
  000e6	48 8b d3	 mov	 rdx, rbx
  000e9	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  000ee	85 c0		 test	 eax, eax
  000f0	0f 84 f7 02 00
	00		 je	 $LN44@obj2ast_ex@3

; 6388 :         int res;
; 6389 :         tmp = _PyObject_GetAttrId(obj, &PyId_col_offset);

  000f6	48 8b d3	 mov	 rdx, rbx
  000f9	48 8b cf	 mov	 rcx, rdi
  000fc	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00101	48 8b d8	 mov	 rbx, rax

; 6390 :         if (tmp == NULL) goto failed;

  00104	48 85 c0	 test	 rax, rax
  00107	0f 84 cd 01 00
	00		 je	 $LN3@obj2ast_ex@3

; 6391 :         res = obj2ast_int(tmp, &col_offset, arena);

  0010d	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR col_offset$[rsp]
  00115	48 8b c8	 mov	 rcx, rax
  00118	e8 00 00 00 00	 call	 obj2ast_int

; 6392 :         if (res != 0) goto failed;

  0011d	85 c0		 test	 eax, eax
  0011f	0f 85 a8 01 00
	00		 jne	 $failed$27401

; 6393 :         Py_CLEAR(tmp);

  00125	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0012c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@GEEGCCG@obj2ast_excepthandler?$AA@
  00133	4c 8b cb	 mov	 r9, rbx
  00136	41 b8 f9 18 00
	00		 mov	 r8d, 6393		; 000018f9H
  0013c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00144	e8 00 00 00 00	 call	 _PyParallel_Guard
  00149	85 c0		 test	 eax, eax
  0014b	75 0a		 jne	 SHORT $LN40@obj2ast_ex@3
  0014d	48 8b cb	 mov	 rcx, rbx
  00150	33 db		 xor	 ebx, ebx
  00152	e8 00 00 00 00	 call	 _Py_DecRef
$LN40@obj2ast_ex@3:

; 6394 :     } else {
; 6395 :         PyErr_SetString(PyExc_TypeError, "required field \"col_offset\" missing from excepthandler");
; 6396 :         return 1;
; 6397 :     }
; 6398 :     isinstance = PyObject_IsInstance(obj, (PyObject*)ExceptHandler_type);

  00157	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ExceptHandler_type
  0015e	48 8b cf	 mov	 rcx, rdi
  00161	e8 00 00 00 00	 call	 PyObject_IsInstance

; 6399 :     if (isinstance == -1) {

  00166	83 f8 ff	 cmp	 eax, -1

; 6400 :         return 1;

  00169	0f 84 6b 01 00
	00		 je	 $LN3@obj2ast_ex@3

; 6401 :     }
; 6402 :     if (isinstance) {

  0016f	85 c0		 test	 eax, eax
  00171	0f 84 67 02 00
	00		 je	 $LN35@obj2ast_ex@3

; 6403 :         expr_ty type;
; 6404 :         identifier name;
; 6405 :         asdl_seq* body;
; 6406 : 
; 6407 :         if (_PyObject_HasAttrId(obj, &PyId_type)) {

  00177	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_type
  0017c	48 8b cf	 mov	 rcx, rdi
  0017f	48 03 de	 add	 rbx, rsi
  00182	48 8b d3	 mov	 rdx, rbx
  00185	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0018a	85 c0		 test	 eax, eax
  0018c	74 66		 je	 SHORT $LN34@obj2ast_ex@3

; 6408 :             int res;
; 6409 :             tmp = _PyObject_GetAttrId(obj, &PyId_type);

  0018e	48 8b d3	 mov	 rdx, rbx
  00191	48 8b cf	 mov	 rcx, rdi
  00194	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00199	48 8b d8	 mov	 rbx, rax

; 6410 :             if (tmp == NULL) goto failed;

  0019c	48 85 c0	 test	 rax, rax
  0019f	0f 84 35 01 00
	00		 je	 $LN3@obj2ast_ex@3

; 6411 :             res = obj2ast_expr(tmp, &type, arena);

  001a5	48 8d 54 24 30	 lea	 rdx, QWORD PTR type$27432[rsp]
  001aa	4d 8b c6	 mov	 r8, r14
  001ad	48 8b c8	 mov	 rcx, rax
  001b0	e8 00 00 00 00	 call	 obj2ast_expr

; 6412 :             if (res != 0) goto failed;

  001b5	85 c0		 test	 eax, eax
  001b7	0f 85 10 01 00
	00		 jne	 $failed$27401

; 6413 :             Py_CLEAR(tmp);

  001bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  001c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@GEEGCCG@obj2ast_excepthandler?$AA@
  001cb	4c 8b cb	 mov	 r9, rbx
  001ce	41 b8 0d 19 00
	00		 mov	 r8d, 6413		; 0000190dH
  001d4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001dc	e8 00 00 00 00	 call	 _PyParallel_Guard
  001e1	85 c0		 test	 eax, eax
  001e3	75 08		 jne	 SHORT $LN59@obj2ast_ex@3
  001e5	48 8b cb	 mov	 rcx, rbx
  001e8	e8 00 00 00 00	 call	 _Py_DecRef
$LN59@obj2ast_ex@3:

; 6414 :         } else {

  001ed	4c 8b 6c 24 30	 mov	 r13, QWORD PTR type$27432[rsp]
  001f2	eb 03		 jmp	 SHORT $LN27@obj2ast_ex@3
$LN34@obj2ast_ex@3:

; 6415 :             type = NULL;

  001f4	45 33 ed	 xor	 r13d, r13d
$LN27@obj2ast_ex@3:

; 6416 :         }
; 6417 :         if (_PyObject_HasAttrId(obj, &PyId_name)) {

  001f7	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_name
  001fc	48 8b cf	 mov	 rcx, rdi
  001ff	48 03 de	 add	 rbx, rsi
  00202	48 8b d3	 mov	 rdx, rbx
  00205	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0020a	85 c0		 test	 eax, eax
  0020c	74 66		 je	 SHORT $LN26@obj2ast_ex@3

; 6418 :             int res;
; 6419 :             tmp = _PyObject_GetAttrId(obj, &PyId_name);

  0020e	48 8b d3	 mov	 rdx, rbx
  00211	48 8b cf	 mov	 rcx, rdi
  00214	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00219	48 8b d8	 mov	 rbx, rax

; 6420 :             if (tmp == NULL) goto failed;

  0021c	48 85 c0	 test	 rax, rax
  0021f	0f 84 b5 00 00
	00		 je	 $LN3@obj2ast_ex@3

; 6421 :             res = obj2ast_identifier(tmp, &name, arena);

  00225	48 8d 54 24 30	 lea	 rdx, QWORD PTR name$27433[rsp]
  0022a	4d 8b c6	 mov	 r8, r14
  0022d	48 8b c8	 mov	 rcx, rax
  00230	e8 00 00 00 00	 call	 obj2ast_identifier

; 6422 :             if (res != 0) goto failed;

  00235	85 c0		 test	 eax, eax
  00237	0f 85 90 00 00
	00		 jne	 $failed$27401

; 6423 :             Py_CLEAR(tmp);

  0023d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00244	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@GEEGCCG@obj2ast_excepthandler?$AA@
  0024b	4c 8b cb	 mov	 r9, rbx
  0024e	41 b8 17 19 00
	00		 mov	 r8d, 6423		; 00001917H
  00254	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0025c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00261	85 c0		 test	 eax, eax
  00263	75 08		 jne	 SHORT $LN60@obj2ast_ex@3
  00265	48 8b cb	 mov	 rcx, rbx
  00268	e8 00 00 00 00	 call	 _Py_DecRef
$LN60@obj2ast_ex@3:

; 6424 :         } else {

  0026d	4c 8b 64 24 30	 mov	 r12, QWORD PTR name$27433[rsp]
  00272	eb 03		 jmp	 SHORT $LN19@obj2ast_ex@3
$LN26@obj2ast_ex@3:

; 6425 :             name = NULL;

  00274	45 33 e4	 xor	 r12d, r12d
$LN19@obj2ast_ex@3:

; 6426 :         }
; 6427 :         if (_PyObject_HasAttrId(obj, &PyId_body)) {

  00277	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_body
  0027c	48 8b cf	 mov	 rcx, rdi
  0027f	48 03 de	 add	 rbx, rsi
  00282	48 8b d3	 mov	 rdx, rbx
  00285	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0028a	85 c0		 test	 eax, eax
  0028c	0f 84 34 01 00
	00		 je	 $LN18@obj2ast_ex@3

; 6428 :             int res;
; 6429 :             Py_ssize_t len;
; 6430 :             Py_ssize_t i;
; 6431 :             tmp = _PyObject_GetAttrId(obj, &PyId_body);

  00292	48 8b d3	 mov	 rdx, rbx
  00295	48 8b cf	 mov	 rcx, rdi
  00298	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0029d	48 8b d8	 mov	 rbx, rax

; 6432 :             if (tmp == NULL) goto failed;

  002a0	48 85 c0	 test	 rax, rax
  002a3	74 35		 je	 SHORT $LN3@obj2ast_ex@3

; 6433 :             if (!PyList_Check(tmp)) {

  002a5	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  002a9	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  002b4	75 4f		 jne	 SHORT $LN16@obj2ast_ex@3

; 6434 :                 PyErr_Format(PyExc_TypeError, "ExceptHandler field \"body\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  002b6	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  002ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DI@PLBLPMFL@ExceptHandler?5field?5?$CCbody?$CC?5must?5@
$LN66@obj2ast_ex@3:

; 6454 :     }
; 6455 : 
; 6456 :     PyErr_Format(PyExc_TypeError, "expected some sort of excepthandler, but got %R", obj);

  002c1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  002c8	e8 00 00 00 00	 call	 PyErr_Format
$failed$27401:

; 6457 :     failed:
; 6458 :     Py_XDECREF(tmp);

  002cd	48 85 db	 test	 rbx, rbx
  002d0	74 08		 je	 SHORT $LN3@obj2ast_ex@3
  002d2	48 8b cb	 mov	 rcx, rbx
  002d5	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@obj2ast_ex@3:

; 6449 :             return 1;

  002da	b8 01 00 00 00	 mov	 eax, 1
$LN65@obj2ast_ex@3:
  002df	4c 8b 64 24 48	 mov	 r12, QWORD PTR [rsp+72]
  002e4	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  002e9	4c 8b 6c 24 40	 mov	 r13, QWORD PTR [rsp+64]
$LN62@obj2ast_ex@3:
  002ee	48 8b 9c 24 88
	00 00 00	 mov	 rbx, QWORD PTR [rsp+136]
  002f6	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]

; 6459 :     return 1;
; 6460 : }

  002fb	48 83 c4 60	 add	 rsp, 96			; 00000060H
  002ff	41 5f		 pop	 r15
  00301	41 5e		 pop	 r14
  00303	5f		 pop	 rdi
  00304	c3		 ret	 0
$LN16@obj2ast_ex@3:

; 6435 :                 goto failed;
; 6436 :             }
; 6437 :             len = PyList_GET_SIZE(tmp);

  00305	48 8b 70 60	 mov	 rsi, QWORD PTR [rax+96]

; 6438 :             body = asdl_seq_new(len, arena);

  00309	49 8b d6	 mov	 rdx, r14
  0030c	48 8b ce	 mov	 rcx, rsi
  0030f	e8 00 00 00 00	 call	 asdl_seq_new
  00314	48 8b e8	 mov	 rbp, rax

; 6439 :             if (body == NULL) goto failed;

  00317	48 85 c0	 test	 rax, rax
  0031a	74 b1		 je	 SHORT $failed$27401

; 6440 :             for (i = 0; i < len; i++) {

  0031c	33 ff		 xor	 edi, edi
  0031e	48 85 f6	 test	 rsi, rsi
  00321	7e 38		 jle	 SHORT $LN10@obj2ast_ex@3
  00323	66 66 66 66 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL14@obj2ast_ex@3:

; 6441 :                 stmt_ty value;
; 6442 :                 res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);

  00330	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00334	48 8d 54 24 30	 lea	 rdx, QWORD PTR value$27480[rsp]
  00339	4d 8b c6	 mov	 r8, r14
  0033c	48 8b 0c f9	 mov	 rcx, QWORD PTR [rcx+rdi*8]
  00340	e8 00 00 00 00	 call	 obj2ast_stmt

; 6443 :                 if (res != 0) goto failed;

  00345	85 c0		 test	 eax, eax
  00347	75 84		 jne	 SHORT $failed$27401

; 6444 :                 asdl_seq_SET(body, i, value);

  00349	48 8b 44 24 30	 mov	 rax, QWORD PTR value$27480[rsp]
  0034e	48 ff c7	 inc	 rdi
  00351	48 89 44 fd 00	 mov	 QWORD PTR [rbp+rdi*8], rax
  00356	48 3b fe	 cmp	 rdi, rsi
  00359	7c d5		 jl	 SHORT $LL14@obj2ast_ex@3
$LN10@obj2ast_ex@3:

; 6445 :             }
; 6446 :             Py_CLEAR(tmp);

  0035b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00362	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@GEEGCCG@obj2ast_excepthandler?$AA@
  00369	4c 8b cb	 mov	 r9, rbx
  0036c	41 b8 2e 19 00
	00		 mov	 r8d, 6446		; 0000192eH
  00372	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0037a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0037f	85 c0		 test	 eax, eax
  00381	75 0a		 jne	 SHORT $LN9@obj2ast_ex@3
  00383	48 8b cb	 mov	 rcx, rbx
  00386	33 db		 xor	 ebx, ebx
  00388	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@obj2ast_ex@3:

; 6450 :         }
; 6451 :         *out = ExceptHandler(type, name, body, lineno, col_offset, arena);

  0038d	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR col_offset$[rsp]
  00394	44 8b 8c 24 98
	00 00 00	 mov	 r9d, DWORD PTR lineno$[rsp]
  0039c	4c 8b c5	 mov	 r8, rbp
  0039f	49 8b d4	 mov	 rdx, r12
  003a2	49 8b cd	 mov	 rcx, r13
  003a5	4c 89 74 24 28	 mov	 QWORD PTR [rsp+40], r14
  003aa	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  003ae	e8 00 00 00 00	 call	 _Py_ExceptHandler
  003b3	49 89 07	 mov	 QWORD PTR [r15], rax

; 6452 :         if (*out == NULL) goto failed;

  003b6	48 85 c0	 test	 rax, rax
  003b9	0f 84 0e ff ff
	ff		 je	 $failed$27401

; 6453 :         return 0;

  003bf	33 c0		 xor	 eax, eax
  003c1	e9 19 ff ff ff	 jmp	 $LN65@obj2ast_ex@3
$LN18@obj2ast_ex@3:

; 6447 :         } else {
; 6448 :             PyErr_SetString(PyExc_TypeError, "required field \"body\" missing from ExceptHandler");

  003c6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  003cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@IGOEPGJG@required?5field?5?$CCbody?$CC?5missing?5fr@
  003d4	e8 00 00 00 00	 call	 PyErr_SetString

; 6449 :             return 1;

  003d9	e9 fc fe ff ff	 jmp	 $LN3@obj2ast_ex@3
$LN35@obj2ast_ex@3:

; 6454 :     }
; 6455 : 
; 6456 :     PyErr_Format(PyExc_TypeError, "expected some sort of excepthandler, but got %R", obj);

  003de	4c 8b c7	 mov	 r8, rdi
  003e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@EMHGDKLJ@expected?5some?5sort?5of?5excepthand@
  003e8	e9 d4 fe ff ff	 jmp	 $LN66@obj2ast_ex@3
$LN44@obj2ast_ex@3:

; 6447 :         } else {
; 6448 :             PyErr_SetString(PyExc_TypeError, "required field \"body\" missing from ExceptHandler");

  003ed	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  003f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DH@FCLGIHBO@required?5field?5?$CCcol_offset?$CC?5miss@
  003fb	e8 00 00 00 00	 call	 PyErr_SetString

; 6449 :             return 1;

  00400	e9 d5 fe ff ff	 jmp	 $LN3@obj2ast_ex@3
$LN52@obj2ast_ex@3:

; 6383 :     } else {
; 6384 :         PyErr_SetString(PyExc_TypeError, "required field \"lineno\" missing from excepthandler");

  00405	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0040c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@IHPFLFKK@required?5field?5?$CClineno?$CC?5missing?5@
  00413	e8 00 00 00 00	 call	 PyErr_SetString

; 6385 :         return 1;

  00418	b8 01 00 00 00	 mov	 eax, 1
  0041d	e9 cc fe ff ff	 jmp	 $LN62@obj2ast_ex@3
obj2ast_excepthandler ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DE@NEPNEKJG@required?5field?5?$CCcontext_expr?$CC?5mi@ ; `string'
PUBLIC	??_C@_0BB@JNJMIEKP@obj2ast_withitem?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_withitem DD imagerel obj2ast_withitem
	DD	imagerel obj2ast_withitem+359
	DD	imagerel $unwind$obj2ast_withitem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_withitem DD 081201H
	DD	0d5412H
	DD	0c3412H
	DD	0c00e7212H
	DD	0600b700cH
xdata	ENDS
;	COMDAT ??_C@_0DE@NEPNEKJG@required?5field?5?$CCcontext_expr?$CC?5mi@
CONST	SEGMENT
??_C@_0DE@NEPNEKJG@required?5field?5?$CCcontext_expr?$CC?5mi@ DB 'require'
	DB	'd field "context_expr" missing from withitem', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JNJMIEKP@obj2ast_withitem?$AA@
CONST	SEGMENT
??_C@_0BB@JNJMIEKP@obj2ast_withitem?$AA@ DB 'obj2ast_withitem', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT obj2ast_withitem
_TEXT	SEGMENT
context_expr$ = 48
obj$ = 96
out$ = 104
arena$ = 112
optional_vars$ = 120
obj2ast_withitem PROC					; COMDAT

; 6727 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	41 54		 push	 r12
  0000e	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 6728 :     PyObject* tmp = NULL;
; 6729 :     expr_ty context_expr;
; 6730 :     expr_ty optional_vars;
; 6731 : 
; 6732 :     if (_PyObject_HasAttrId(obj, &PyId_context_expr)) {

  00012	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR _tls_index
  00019	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00022	4c 8b e2	 mov	 r12, rdx
  00025	4a 8b 2c c8	 mov	 rbp, QWORD PTR [rax+r9*8]
  00029	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_context_expr
  0002e	49 8b f0	 mov	 rsi, r8
  00031	48 03 dd	 add	 rbx, rbp
  00034	48 8b f9	 mov	 rdi, rcx
  00037	48 8b d3	 mov	 rdx, rbx
  0003a	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0003f	85 c0		 test	 eax, eax
  00041	0f 84 f5 00 00
	00		 je	 $LN20@obj2ast_wi

; 6733 :         int res;
; 6734 :         tmp = _PyObject_GetAttrId(obj, &PyId_context_expr);

  00047	48 8b d3	 mov	 rdx, rbx
  0004a	48 8b cf	 mov	 rcx, rdi
  0004d	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00052	48 8b d8	 mov	 rbx, rax

; 6735 :         if (tmp == NULL) goto failed;

  00055	48 85 c0	 test	 rax, rax
  00058	0f 84 f1 00 00
	00		 je	 $LN3@obj2ast_wi

; 6736 :         res = obj2ast_expr(tmp, &context_expr, arena);

  0005e	48 8d 54 24 30	 lea	 rdx, QWORD PTR context_expr$[rsp]
  00063	4c 8b c6	 mov	 r8, rsi
  00066	48 8b c8	 mov	 rcx, rax
  00069	e8 00 00 00 00	 call	 obj2ast_expr

; 6737 :         if (res != 0) goto failed;

  0006e	85 c0		 test	 eax, eax
  00070	0f 85 bc 00 00
	00		 jne	 $failed$27856

; 6738 :         Py_CLEAR(tmp);

  00076	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0007d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@JNJMIEKP@obj2ast_withitem?$AA@
  00084	4c 8b cb	 mov	 r9, rbx
  00087	41 b8 52 1a 00
	00		 mov	 r8d, 6738		; 00001a52H
  0008d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00095	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009a	85 c0		 test	 eax, eax
  0009c	75 08		 jne	 SHORT $LN16@obj2ast_wi
  0009e	48 8b cb	 mov	 rcx, rbx
  000a1	e8 00 00 00 00	 call	 _Py_DecRef
$LN16@obj2ast_wi:

; 6742 :     }
; 6743 :     if (_PyObject_HasAttrId(obj, &PyId_optional_vars)) {

  000a6	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_optional_vars
  000ab	48 8b cf	 mov	 rcx, rdi
  000ae	48 03 dd	 add	 rbx, rbp
  000b1	48 8b d3	 mov	 rdx, rbx
  000b4	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  000b9	85 c0		 test	 eax, eax
  000bb	74 5e		 je	 SHORT $LN12@obj2ast_wi

; 6744 :         int res;
; 6745 :         tmp = _PyObject_GetAttrId(obj, &PyId_optional_vars);

  000bd	48 8b d3	 mov	 rdx, rbx
  000c0	48 8b cf	 mov	 rcx, rdi
  000c3	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  000c8	48 8b d8	 mov	 rbx, rax

; 6746 :         if (tmp == NULL) goto failed;

  000cb	48 85 c0	 test	 rax, rax
  000ce	74 7f		 je	 SHORT $LN3@obj2ast_wi

; 6747 :         res = obj2ast_expr(tmp, &optional_vars, arena);

  000d0	48 8d 54 24 78	 lea	 rdx, QWORD PTR optional_vars$[rsp]
  000d5	4c 8b c6	 mov	 r8, rsi
  000d8	48 8b c8	 mov	 rcx, rax
  000db	e8 00 00 00 00	 call	 obj2ast_expr

; 6748 :         if (res != 0) goto failed;

  000e0	85 c0		 test	 eax, eax
  000e2	75 4e		 jne	 SHORT $failed$27856

; 6749 :         Py_CLEAR(tmp);

  000e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  000eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@JNJMIEKP@obj2ast_withitem?$AA@
  000f2	4c 8b cb	 mov	 r9, rbx
  000f5	41 b8 5d 1a 00
	00		 mov	 r8d, 6749		; 00001a5dH
  000fb	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00103	e8 00 00 00 00	 call	 _PyParallel_Guard
  00108	85 c0		 test	 eax, eax
  0010a	75 08		 jne	 SHORT $LN23@obj2ast_wi
  0010c	48 8b cb	 mov	 rcx, rbx
  0010f	e8 00 00 00 00	 call	 _Py_DecRef
$LN23@obj2ast_wi:

; 6750 :     } else {

  00114	48 8b 54 24 78	 mov	 rdx, QWORD PTR optional_vars$[rsp]
  00119	eb 02		 jmp	 SHORT $LN5@obj2ast_wi
$LN12@obj2ast_wi:

; 6751 :         optional_vars = NULL;

  0011b	33 d2		 xor	 edx, edx
$LN5@obj2ast_wi:

; 6752 :     }
; 6753 :     *out = withitem(context_expr, optional_vars, arena);

  0011d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR context_expr$[rsp]
  00122	4c 8b c6	 mov	 r8, rsi
  00125	e8 00 00 00 00	 call	 _Py_withitem
  0012a	49 89 04 24	 mov	 QWORD PTR [r12], rax

; 6754 :     return 0;

  0012e	33 c0		 xor	 eax, eax
  00130	eb 22		 jmp	 SHORT $LN21@obj2ast_wi
$failed$27856:

; 6755 : failed:
; 6756 :     Py_XDECREF(tmp);

  00132	48 8b cb	 mov	 rcx, rbx
  00135	e8 00 00 00 00	 call	 _Py_DecRef

; 6757 :     return 1;

  0013a	eb 13		 jmp	 SHORT $LN3@obj2ast_wi
$LN20@obj2ast_wi:

; 6739 :     } else {
; 6740 :         PyErr_SetString(PyExc_TypeError, "required field \"context_expr\" missing from withitem");

  0013c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00143	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@NEPNEKJG@required?5field?5?$CCcontext_expr?$CC?5mi@
  0014a	e8 00 00 00 00	 call	 PyErr_SetString
$LN3@obj2ast_wi:

; 6741 :         return 1;

  0014f	b8 01 00 00 00	 mov	 eax, 1
$LN21@obj2ast_wi:

; 6758 : }

  00154	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00159	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  0015e	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00162	41 5c		 pop	 r12
  00164	5f		 pop	 rdi
  00165	5e		 pop	 rsi
  00166	c3		 ret	 0
obj2ast_withitem ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$ast2obj_stmt DD imagerel ast2obj_stmt
	DD	imagerel ast2obj_stmt+109
	DD	imagerel $unwind$ast2obj_stmt
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$ast2obj_stmt DD imagerel ast2obj_stmt+109
	DD	imagerel ast2obj_stmt+3276
	DD	imagerel $chain$2$ast2obj_stmt
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$ast2obj_stmt DD imagerel ast2obj_stmt+3276
	DD	imagerel ast2obj_stmt+3360
	DD	imagerel $chain$4$ast2obj_stmt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$ast2obj_stmt DD 060021H
	DD	0ac400H
	DD	095400H
	DD	083400H
	DD	imagerel ast2obj_stmt
	DD	imagerel ast2obj_stmt+109
	DD	imagerel $unwind$ast2obj_stmt
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$ast2obj_stmt DD 061121H
	DD	0ac411H
	DD	09540aH
	DD	083405H
	DD	imagerel ast2obj_stmt
	DD	imagerel ast2obj_stmt+109
	DD	imagerel $unwind$ast2obj_stmt
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_stmt DD 040a01H
	DD	0b640aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\python-ast.c
xdata	ENDS
;	COMDAT ast2obj_stmt
_TEXT	SEGMENT
_o$ = 64
ast2obj_stmt PROC					; COMDAT

; 2330 : {

  00000	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 2331 :     stmt_ty o = (stmt_ty)_o;
; 2332 :     PyObject *result = NULL, *value = NULL;

  0000a	33 ff		 xor	 edi, edi
  0000c	48 8b f1	 mov	 rsi, rcx

; 2333 :     if (!o) {

  0000f	48 85 c9	 test	 rcx, rcx
  00012	75 57		 jne	 SHORT $LN149@ast2obj_st

; 2334 :         Py_INCREF(Py_None);

  00014	e8 00 00 00 00	 call	 _Py_PXCTX
  00019	85 c0		 test	 eax, eax
  0001b	75 3c		 jne	 SHORT $LN153@ast2obj_st
  0001d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00032	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00038	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00040	e8 00 00 00 00	 call	 _PyParallel_Guard
  00045	85 c0		 test	 eax, eax
  00047	75 09		 jne	 SHORT $LN152@ast2obj_st
  00049	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00050	74 07		 je	 SHORT $LN153@ast2obj_st
$LN152@ast2obj_st:
  00052	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN153@ast2obj_st:

; 2335 :         return Py_None;

  00059	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 2669 : }

  00060	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  00065	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00069	5f		 pop	 rdi
  0006a	c3		 ret	 0
$LN149@ast2obj_st:

; 2336 :     }
; 2337 : 
; 2338 :     switch (o->kind) {

  0006b	8b 01		 mov	 eax, DWORD PTR [rcx]
  0006d	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00072	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp
  00077	ff c8		 dec	 eax
  00079	4c 89 64 24 50	 mov	 QWORD PTR [rsp+80], r12
  0007e	44 8b 25 00 00
	00 00		 mov	 r12d, DWORD PTR _tls_index
  00085	83 f8 14	 cmp	 eax, 20
  00088	0f 87 d5 0a 00
	00		 ja	 $LN13@ast2obj_st
  0008e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:__ImageBase
  00095	48 98		 cdqe
  00097	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR $LN178@ast2obj_st[rdx+rax*4]
  0009e	48 03 ca	 add	 rcx, rdx
  000a1	ff e1		 jmp	 rcx
$LN146@ast2obj_st:

; 2339 :     case FunctionDef_kind:
; 2340 :         result = PyType_GenericNew(FunctionDef_type, NULL, NULL);

  000a3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR FunctionDef_type
  000aa	45 33 c0	 xor	 r8d, r8d
  000ad	33 d2		 xor	 edx, edx
  000af	e8 00 00 00 00	 call	 PyType_GenericNew
  000b4	48 8b f8	 mov	 rdi, rax

; 2341 :         if (!result) goto failed;

  000b7	48 85 c0	 test	 rax, rax
  000ba	0f 84 ed 0b 00
	00		 je	 $LN3@ast2obj_st

; 2342 :         value = ast2obj_identifier(o->v.FunctionDef.name);

  000c0	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  000c4	e8 00 00 00 00	 call	 ast2obj_object
  000c9	48 8b d8	 mov	 rbx, rax

; 2343 :         if (!value) goto failed;

  000cc	48 85 c0	 test	 rax, rax
  000cf	0f 84 6e 0b 00
	00		 je	 $LN7@ast2obj_st

; 2344 :         if (_PyObject_SetAttrId(result, &PyId_name, value) == -1)

  000d5	65 48 8b 0c 25
	58 00 00 00	 mov	 rcx, QWORD PTR gs:88
  000de	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_name
  000e3	4c 8b c0	 mov	 r8, rax
  000e6	4a 8b 2c e1	 mov	 rbp, QWORD PTR [rcx+r12*8]
  000ea	48 8b cf	 mov	 rcx, rdi
  000ed	48 03 d5	 add	 rdx, rbp
  000f0	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  000f5	83 f8 ff	 cmp	 eax, -1
  000f8	0f 84 e0 0a 00
	00		 je	 $failed$23541

; 2345 :             goto failed;
; 2346 :         Py_DECREF(value);

  000fe	48 8b cb	 mov	 rcx, rbx
  00101	e8 00 00 00 00	 call	 _Py_DecRef

; 2347 :         value = ast2obj_arguments(o->v.FunctionDef.args);

  00106	48 8b 4e 10	 mov	 rcx, QWORD PTR [rsi+16]
  0010a	e8 00 00 00 00	 call	 ast2obj_arguments
  0010f	48 8b d8	 mov	 rbx, rax

; 2348 :         if (!value) goto failed;

  00112	48 85 c0	 test	 rax, rax
  00115	0f 84 28 0b 00
	00		 je	 $LN7@ast2obj_st

; 2349 :         if (_PyObject_SetAttrId(result, &PyId_args, value) == -1)

  0011b	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_args
  00120	4c 8b c0	 mov	 r8, rax
  00123	48 8b cf	 mov	 rcx, rdi
  00126	48 03 d5	 add	 rdx, rbp
  00129	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0012e	83 f8 ff	 cmp	 eax, -1
  00131	0f 84 a7 0a 00
	00		 je	 $failed$23541

; 2350 :             goto failed;
; 2351 :         Py_DECREF(value);

  00137	48 8b cb	 mov	 rcx, rbx
  0013a	e8 00 00 00 00	 call	 _Py_DecRef

; 2352 :         value = ast2obj_list(o->v.FunctionDef.body, ast2obj_stmt);

  0013f	48 8b 4e 18	 mov	 rcx, QWORD PTR [rsi+24]
  00143	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_stmt
  0014a	e8 00 00 00 00	 call	 ast2obj_list
  0014f	48 8b d8	 mov	 rbx, rax

; 2353 :         if (!value) goto failed;

  00152	48 85 c0	 test	 rax, rax
  00155	0f 84 e8 0a 00
	00		 je	 $LN7@ast2obj_st

; 2354 :         if (_PyObject_SetAttrId(result, &PyId_body, value) == -1)

  0015b	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_body
  00160	4c 8b c0	 mov	 r8, rax
  00163	48 8b cf	 mov	 rcx, rdi
  00166	48 03 d5	 add	 rdx, rbp
  00169	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0016e	83 f8 ff	 cmp	 eax, -1
  00171	0f 84 67 0a 00
	00		 je	 $failed$23541

; 2355 :             goto failed;
; 2356 :         Py_DECREF(value);

  00177	48 8b cb	 mov	 rcx, rbx
  0017a	e8 00 00 00 00	 call	 _Py_DecRef

; 2357 :         value = ast2obj_list(o->v.FunctionDef.decorator_list, ast2obj_expr);

  0017f	48 8b 4e 20	 mov	 rcx, QWORD PTR [rsi+32]
  00183	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_expr
  0018a	e8 00 00 00 00	 call	 ast2obj_list
  0018f	48 8b d8	 mov	 rbx, rax

; 2358 :         if (!value) goto failed;

  00192	48 85 c0	 test	 rax, rax
  00195	0f 84 a8 0a 00
	00		 je	 $LN7@ast2obj_st

; 2359 :         if (_PyObject_SetAttrId(result, &PyId_decorator_list, value) == -1)

  0019b	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_decorator_list
  001a0	4c 8b c0	 mov	 r8, rax
  001a3	48 8b cf	 mov	 rcx, rdi
  001a6	48 03 d5	 add	 rdx, rbp
  001a9	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  001ae	83 f8 ff	 cmp	 eax, -1
  001b1	0f 84 27 0a 00
	00		 je	 $failed$23541

; 2360 :             goto failed;
; 2361 :         Py_DECREF(value);

  001b7	48 8b cb	 mov	 rcx, rbx
  001ba	e8 00 00 00 00	 call	 _Py_DecRef

; 2362 :         value = ast2obj_expr(o->v.FunctionDef.returns);

  001bf	48 8b 4e 28	 mov	 rcx, QWORD PTR [rsi+40]
  001c3	e8 00 00 00 00	 call	 ast2obj_expr
  001c8	48 8b d8	 mov	 rbx, rax

; 2363 :         if (!value) goto failed;

  001cb	48 85 c0	 test	 rax, rax
  001ce	0f 84 6f 0a 00
	00		 je	 $LN7@ast2obj_st

; 2364 :         if (_PyObject_SetAttrId(result, &PyId_returns, value) == -1)

  001d4	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_returns
$LN184@ast2obj_st:
  001d9	48 03 d5	 add	 rdx, rbp
  001dc	4c 8b c0	 mov	 r8, rax
$LN185@ast2obj_st:
  001df	48 8b cf	 mov	 rcx, rdi
  001e2	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  001e7	83 f8 ff	 cmp	 eax, -1
  001ea	0f 84 ee 09 00
	00		 je	 $failed$23541

; 2365 :             goto failed;
; 2366 :         Py_DECREF(value);

  001f0	48 8b cb	 mov	 rcx, rbx
  001f3	e8 00 00 00 00	 call	 _Py_DecRef

; 2367 :         break;

  001f8	e9 66 09 00 00	 jmp	 $LN13@ast2obj_st
$LN134@ast2obj_st:

; 2368 :     case ClassDef_kind:
; 2369 :         result = PyType_GenericNew(ClassDef_type, NULL, NULL);

  001fd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ClassDef_type
  00204	45 33 c0	 xor	 r8d, r8d
  00207	33 d2		 xor	 edx, edx
  00209	e8 00 00 00 00	 call	 PyType_GenericNew
  0020e	48 8b f8	 mov	 rdi, rax

; 2370 :         if (!result) goto failed;

  00211	48 85 c0	 test	 rax, rax
  00214	0f 84 93 0a 00
	00		 je	 $LN3@ast2obj_st

; 2371 :         value = ast2obj_identifier(o->v.ClassDef.name);

  0021a	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  0021e	e8 00 00 00 00	 call	 ast2obj_object
  00223	48 8b d8	 mov	 rbx, rax

; 2372 :         if (!value) goto failed;

  00226	48 85 c0	 test	 rax, rax
  00229	0f 84 14 0a 00
	00		 je	 $LN7@ast2obj_st

; 2373 :         if (_PyObject_SetAttrId(result, &PyId_name, value) == -1)

  0022f	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00238	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_name
  0023d	4c 8b c3	 mov	 r8, rbx
  00240	4a 8b 2c e0	 mov	 rbp, QWORD PTR [rax+r12*8]
  00244	48 8b cf	 mov	 rcx, rdi
  00247	48 03 d5	 add	 rdx, rbp
  0024a	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0024f	83 f8 ff	 cmp	 eax, -1
  00252	0f 84 86 09 00
	00		 je	 $failed$23541

; 2374 :             goto failed;
; 2375 :         Py_DECREF(value);

  00258	48 8b cb	 mov	 rcx, rbx
  0025b	e8 00 00 00 00	 call	 _Py_DecRef

; 2376 :         value = ast2obj_list(o->v.ClassDef.bases, ast2obj_expr);

  00260	48 8b 4e 10	 mov	 rcx, QWORD PTR [rsi+16]
  00264	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_expr
  0026b	e8 00 00 00 00	 call	 ast2obj_list
  00270	48 8b d8	 mov	 rbx, rax

; 2377 :         if (!value) goto failed;

  00273	48 85 c0	 test	 rax, rax
  00276	0f 84 c7 09 00
	00		 je	 $LN7@ast2obj_st

; 2378 :         if (_PyObject_SetAttrId(result, &PyId_bases, value) == -1)

  0027c	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_bases
  00281	4c 8b c0	 mov	 r8, rax
  00284	48 8b cf	 mov	 rcx, rdi
  00287	48 03 d5	 add	 rdx, rbp
  0028a	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0028f	83 f8 ff	 cmp	 eax, -1
  00292	0f 84 46 09 00
	00		 je	 $failed$23541

; 2379 :             goto failed;
; 2380 :         Py_DECREF(value);

  00298	48 8b cb	 mov	 rcx, rbx
  0029b	e8 00 00 00 00	 call	 _Py_DecRef

; 2381 :         value = ast2obj_list(o->v.ClassDef.keywords, ast2obj_keyword);

  002a0	48 8b 4e 18	 mov	 rcx, QWORD PTR [rsi+24]
  002a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_keyword
  002ab	e8 00 00 00 00	 call	 ast2obj_list
  002b0	48 8b d8	 mov	 rbx, rax

; 2382 :         if (!value) goto failed;

  002b3	48 85 c0	 test	 rax, rax
  002b6	0f 84 87 09 00
	00		 je	 $LN7@ast2obj_st

; 2383 :         if (_PyObject_SetAttrId(result, &PyId_keywords, value) == -1)

  002bc	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_keywords
  002c1	4c 8b c0	 mov	 r8, rax
  002c4	48 8b cf	 mov	 rcx, rdi
  002c7	48 03 d5	 add	 rdx, rbp
  002ca	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  002cf	83 f8 ff	 cmp	 eax, -1
  002d2	0f 84 06 09 00
	00		 je	 $failed$23541

; 2384 :             goto failed;
; 2385 :         Py_DECREF(value);

  002d8	48 8b cb	 mov	 rcx, rbx
  002db	e8 00 00 00 00	 call	 _Py_DecRef

; 2386 :         value = ast2obj_expr(o->v.ClassDef.starargs);

  002e0	48 8b 4e 20	 mov	 rcx, QWORD PTR [rsi+32]
  002e4	e8 00 00 00 00	 call	 ast2obj_expr
  002e9	48 8b d8	 mov	 rbx, rax

; 2387 :         if (!value) goto failed;

  002ec	48 85 c0	 test	 rax, rax
  002ef	0f 84 4e 09 00
	00		 je	 $LN7@ast2obj_st

; 2388 :         if (_PyObject_SetAttrId(result, &PyId_starargs, value) == -1)

  002f5	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_starargs
  002fa	4c 8b c0	 mov	 r8, rax
  002fd	48 8b cf	 mov	 rcx, rdi
  00300	48 03 d5	 add	 rdx, rbp
  00303	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00308	83 f8 ff	 cmp	 eax, -1
  0030b	0f 84 cd 08 00
	00		 je	 $failed$23541

; 2389 :             goto failed;
; 2390 :         Py_DECREF(value);

  00311	48 8b cb	 mov	 rcx, rbx
  00314	e8 00 00 00 00	 call	 _Py_DecRef

; 2391 :         value = ast2obj_expr(o->v.ClassDef.kwargs);

  00319	48 8b 4e 28	 mov	 rcx, QWORD PTR [rsi+40]
  0031d	e8 00 00 00 00	 call	 ast2obj_expr
  00322	48 8b d8	 mov	 rbx, rax

; 2392 :         if (!value) goto failed;

  00325	48 85 c0	 test	 rax, rax
  00328	0f 84 15 09 00
	00		 je	 $LN7@ast2obj_st

; 2393 :         if (_PyObject_SetAttrId(result, &PyId_kwargs, value) == -1)

  0032e	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_kwargs
  00333	4c 8b c0	 mov	 r8, rax
  00336	48 8b cf	 mov	 rcx, rdi
  00339	48 03 d5	 add	 rdx, rbp
  0033c	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00341	83 f8 ff	 cmp	 eax, -1
  00344	0f 84 94 08 00
	00		 je	 $failed$23541

; 2394 :             goto failed;
; 2395 :         Py_DECREF(value);

  0034a	48 8b cb	 mov	 rcx, rbx
  0034d	e8 00 00 00 00	 call	 _Py_DecRef

; 2396 :         value = ast2obj_list(o->v.ClassDef.body, ast2obj_stmt);

  00352	48 8b 4e 30	 mov	 rcx, QWORD PTR [rsi+48]
  00356	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_stmt
  0035d	e8 00 00 00 00	 call	 ast2obj_list
  00362	48 8b d8	 mov	 rbx, rax

; 2397 :         if (!value) goto failed;

  00365	48 85 c0	 test	 rax, rax
  00368	0f 84 d5 08 00
	00		 je	 $LN7@ast2obj_st

; 2398 :         if (_PyObject_SetAttrId(result, &PyId_body, value) == -1)

  0036e	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_body
  00373	4c 8b c0	 mov	 r8, rax
  00376	48 8b cf	 mov	 rcx, rdi
  00379	48 03 d5	 add	 rdx, rbp
  0037c	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00381	83 f8 ff	 cmp	 eax, -1
  00384	0f 84 54 08 00
	00		 je	 $failed$23541

; 2399 :             goto failed;
; 2400 :         Py_DECREF(value);

  0038a	48 8b cb	 mov	 rcx, rbx
  0038d	e8 00 00 00 00	 call	 _Py_DecRef

; 2401 :         value = ast2obj_list(o->v.ClassDef.decorator_list, ast2obj_expr);

  00392	48 8b 4e 38	 mov	 rcx, QWORD PTR [rsi+56]
  00396	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_expr
  0039d	e8 00 00 00 00	 call	 ast2obj_list
  003a2	48 8b d8	 mov	 rbx, rax

; 2402 :         if (!value) goto failed;

  003a5	48 85 c0	 test	 rax, rax
  003a8	0f 84 95 08 00
	00		 je	 $LN7@ast2obj_st

; 2403 :         if (_PyObject_SetAttrId(result, &PyId_decorator_list, value) == -1)

  003ae	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_decorator_list

; 2404 :             goto failed;
; 2405 :         Py_DECREF(value);
; 2406 :         break;

  003b3	e9 21 fe ff ff	 jmp	 $LN184@ast2obj_st
$LN118@ast2obj_st:

; 2407 :     case Return_kind:
; 2408 :         result = PyType_GenericNew(Return_type, NULL, NULL);

  003b8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Return_type
$LN195@ast2obj_st:
  003bf	45 33 c0	 xor	 r8d, r8d
  003c2	33 d2		 xor	 edx, edx
  003c4	e8 00 00 00 00	 call	 PyType_GenericNew
  003c9	48 8b f8	 mov	 rdi, rax

; 2409 :         if (!result) goto failed;

  003cc	48 85 c0	 test	 rax, rax
  003cf	0f 84 d8 08 00
	00		 je	 $LN3@ast2obj_st

; 2410 :         value = ast2obj_expr(o->v.Return.value);

  003d5	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  003d9	e8 00 00 00 00	 call	 ast2obj_expr
  003de	48 8b d8	 mov	 rbx, rax

; 2411 :         if (!value) goto failed;

  003e1	48 85 c0	 test	 rax, rax
  003e4	0f 84 59 08 00
	00		 je	 $LN7@ast2obj_st

; 2412 :         if (_PyObject_SetAttrId(result, &PyId_value, value) == -1)

  003ea	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  003f3	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_value
  003f8	4c 8b c3	 mov	 r8, rbx
  003fb	4a 03 14 e0	 add	 rdx, QWORD PTR [rax+r12*8]

; 2413 :             goto failed;
; 2414 :         Py_DECREF(value);
; 2415 :         break;

  003ff	e9 db fd ff ff	 jmp	 $LN185@ast2obj_st
$LN114@ast2obj_st:

; 2416 :     case Delete_kind:
; 2417 :         result = PyType_GenericNew(Delete_type, NULL, NULL);

  00404	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Delete_type
  0040b	45 33 c0	 xor	 r8d, r8d
  0040e	33 d2		 xor	 edx, edx
  00410	e8 00 00 00 00	 call	 PyType_GenericNew
  00415	48 8b f8	 mov	 rdi, rax

; 2418 :         if (!result) goto failed;

  00418	48 85 c0	 test	 rax, rax
  0041b	0f 84 8c 08 00
	00		 je	 $LN3@ast2obj_st

; 2419 :         value = ast2obj_list(o->v.Delete.targets, ast2obj_expr);

  00421	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  00425	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_expr
  0042c	e8 00 00 00 00	 call	 ast2obj_list
  00431	48 8b d8	 mov	 rbx, rax

; 2420 :         if (!value) goto failed;

  00434	48 85 c0	 test	 rax, rax
  00437	0f 84 06 08 00
	00		 je	 $LN7@ast2obj_st

; 2421 :         if (_PyObject_SetAttrId(result, &PyId_targets, value) == -1)

  0043d	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00446	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_targets
  0044b	4c 8b c3	 mov	 r8, rbx
  0044e	4a 03 14 e0	 add	 rdx, QWORD PTR [rax+r12*8]

; 2422 :             goto failed;
; 2423 :         Py_DECREF(value);
; 2424 :         break;

  00452	e9 88 fd ff ff	 jmp	 $LN185@ast2obj_st
$LN110@ast2obj_st:

; 2425 :     case Assign_kind:
; 2426 :         result = PyType_GenericNew(Assign_type, NULL, NULL);

  00457	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Assign_type
  0045e	45 33 c0	 xor	 r8d, r8d
  00461	33 d2		 xor	 edx, edx
  00463	e8 00 00 00 00	 call	 PyType_GenericNew
  00468	48 8b f8	 mov	 rdi, rax

; 2427 :         if (!result) goto failed;

  0046b	48 85 c0	 test	 rax, rax
  0046e	0f 84 39 08 00
	00		 je	 $LN3@ast2obj_st

; 2428 :         value = ast2obj_list(o->v.Assign.targets, ast2obj_expr);

  00474	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  00478	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_expr
  0047f	e8 00 00 00 00	 call	 ast2obj_list
  00484	48 8b d8	 mov	 rbx, rax

; 2429 :         if (!value) goto failed;

  00487	48 85 c0	 test	 rax, rax
  0048a	0f 84 b3 07 00
	00		 je	 $LN7@ast2obj_st

; 2430 :         if (_PyObject_SetAttrId(result, &PyId_targets, value) == -1)

  00490	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00499	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_targets
  0049e	4c 8b c3	 mov	 r8, rbx
  004a1	4a 8b 2c e0	 mov	 rbp, QWORD PTR [rax+r12*8]
  004a5	48 8b cf	 mov	 rcx, rdi
  004a8	48 03 d5	 add	 rdx, rbp
  004ab	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  004b0	83 f8 ff	 cmp	 eax, -1
  004b3	0f 84 25 07 00
	00		 je	 $failed$23541

; 2431 :             goto failed;
; 2432 :         Py_DECREF(value);

  004b9	48 8b cb	 mov	 rcx, rbx
  004bc	e8 00 00 00 00	 call	 _Py_DecRef

; 2433 :         value = ast2obj_expr(o->v.Assign.value);

  004c1	48 8b 4e 10	 mov	 rcx, QWORD PTR [rsi+16]
$LN186@ast2obj_st:
  004c5	e8 00 00 00 00	 call	 ast2obj_expr
  004ca	48 8b d8	 mov	 rbx, rax

; 2434 :         if (!value) goto failed;

  004cd	48 85 c0	 test	 rax, rax
  004d0	0f 84 6d 07 00
	00		 je	 $LN7@ast2obj_st

; 2435 :         if (_PyObject_SetAttrId(result, &PyId_value, value) == -1)

  004d6	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_value

; 2436 :             goto failed;
; 2437 :         Py_DECREF(value);
; 2438 :         break;

  004db	e9 f9 fc ff ff	 jmp	 $LN184@ast2obj_st
$LN104@ast2obj_st:

; 2439 :     case AugAssign_kind:
; 2440 :         result = PyType_GenericNew(AugAssign_type, NULL, NULL);

  004e0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR AugAssign_type
  004e7	45 33 c0	 xor	 r8d, r8d
  004ea	33 d2		 xor	 edx, edx
  004ec	e8 00 00 00 00	 call	 PyType_GenericNew
  004f1	48 8b f8	 mov	 rdi, rax

; 2441 :         if (!result) goto failed;

  004f4	48 85 c0	 test	 rax, rax
  004f7	0f 84 b0 07 00
	00		 je	 $LN3@ast2obj_st

; 2442 :         value = ast2obj_expr(o->v.AugAssign.target);

  004fd	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  00501	e8 00 00 00 00	 call	 ast2obj_expr
  00506	48 8b d8	 mov	 rbx, rax

; 2443 :         if (!value) goto failed;

  00509	48 85 c0	 test	 rax, rax
  0050c	0f 84 31 07 00
	00		 je	 $LN7@ast2obj_st

; 2444 :         if (_PyObject_SetAttrId(result, &PyId_target, value) == -1)

  00512	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0051b	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_target
  00520	4c 8b c3	 mov	 r8, rbx
  00523	4a 8b 2c e0	 mov	 rbp, QWORD PTR [rax+r12*8]
  00527	48 8b cf	 mov	 rcx, rdi
  0052a	48 03 d5	 add	 rdx, rbp
  0052d	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00532	83 f8 ff	 cmp	 eax, -1
  00535	0f 84 a3 06 00
	00		 je	 $failed$23541

; 2445 :             goto failed;
; 2446 :         Py_DECREF(value);

  0053b	48 8b cb	 mov	 rcx, rbx
  0053e	e8 00 00 00 00	 call	 _Py_DecRef

; 2447 :         value = ast2obj_operator(o->v.AugAssign.op);

  00543	8b 4e 10	 mov	 ecx, DWORD PTR [rsi+16]
  00546	e8 00 00 00 00	 call	 ast2obj_operator
  0054b	48 8b d8	 mov	 rbx, rax

; 2448 :         if (!value) goto failed;

  0054e	48 85 c0	 test	 rax, rax
  00551	0f 84 ec 06 00
	00		 je	 $LN7@ast2obj_st

; 2449 :         if (_PyObject_SetAttrId(result, &PyId_op, value) == -1)

  00557	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_op
  0055c	4c 8b c0	 mov	 r8, rax
  0055f	48 8b cf	 mov	 rcx, rdi
  00562	48 03 d5	 add	 rdx, rbp
  00565	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0056a	83 f8 ff	 cmp	 eax, -1
  0056d	0f 84 6b 06 00
	00		 je	 $failed$23541

; 2450 :             goto failed;
; 2451 :         Py_DECREF(value);

  00573	48 8b cb	 mov	 rcx, rbx
  00576	e8 00 00 00 00	 call	 _Py_DecRef

; 2452 :         value = ast2obj_expr(o->v.AugAssign.value);

  0057b	48 8b 4e 18	 mov	 rcx, QWORD PTR [rsi+24]

; 2453 :         if (!value) goto failed;
; 2454 :         if (_PyObject_SetAttrId(result, &PyId_value, value) == -1)
; 2455 :             goto failed;
; 2456 :         Py_DECREF(value);
; 2457 :         break;

  0057f	e9 41 ff ff ff	 jmp	 $LN186@ast2obj_st
$LN96@ast2obj_st:

; 2458 :     case For_kind:
; 2459 :         result = PyType_GenericNew(For_type, NULL, NULL);

  00584	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR For_type
  0058b	45 33 c0	 xor	 r8d, r8d
  0058e	33 d2		 xor	 edx, edx
  00590	e8 00 00 00 00	 call	 PyType_GenericNew
  00595	48 8b f8	 mov	 rdi, rax

; 2460 :         if (!result) goto failed;

  00598	48 85 c0	 test	 rax, rax
  0059b	0f 84 0c 07 00
	00		 je	 $LN3@ast2obj_st

; 2461 :         value = ast2obj_expr(o->v.For.target);

  005a1	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  005a5	e8 00 00 00 00	 call	 ast2obj_expr
  005aa	48 8b d8	 mov	 rbx, rax

; 2462 :         if (!value) goto failed;

  005ad	48 85 c0	 test	 rax, rax
  005b0	0f 84 8d 06 00
	00		 je	 $LN7@ast2obj_st

; 2463 :         if (_PyObject_SetAttrId(result, &PyId_target, value) == -1)

  005b6	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  005bf	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_target
  005c4	4c 8b c3	 mov	 r8, rbx
  005c7	4a 8b 2c e0	 mov	 rbp, QWORD PTR [rax+r12*8]
  005cb	48 8b cf	 mov	 rcx, rdi
  005ce	48 03 d5	 add	 rdx, rbp
  005d1	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  005d6	83 f8 ff	 cmp	 eax, -1
  005d9	0f 84 ff 05 00
	00		 je	 $failed$23541

; 2464 :             goto failed;
; 2465 :         Py_DECREF(value);

  005df	48 8b cb	 mov	 rcx, rbx
  005e2	e8 00 00 00 00	 call	 _Py_DecRef

; 2466 :         value = ast2obj_expr(o->v.For.iter);

  005e7	48 8b 4e 10	 mov	 rcx, QWORD PTR [rsi+16]
  005eb	e8 00 00 00 00	 call	 ast2obj_expr
  005f0	48 8b d8	 mov	 rbx, rax

; 2467 :         if (!value) goto failed;

  005f3	48 85 c0	 test	 rax, rax
  005f6	0f 84 47 06 00
	00		 je	 $LN7@ast2obj_st

; 2468 :         if (_PyObject_SetAttrId(result, &PyId_iter, value) == -1)

  005fc	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_iter
  00601	4c 8b c0	 mov	 r8, rax
  00604	48 8b cf	 mov	 rcx, rdi
  00607	48 03 d5	 add	 rdx, rbp
  0060a	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0060f	83 f8 ff	 cmp	 eax, -1
  00612	0f 84 c6 05 00
	00		 je	 $failed$23541

; 2469 :             goto failed;
; 2470 :         Py_DECREF(value);

  00618	48 8b cb	 mov	 rcx, rbx
  0061b	e8 00 00 00 00	 call	 _Py_DecRef

; 2471 :         value = ast2obj_list(o->v.For.body, ast2obj_stmt);

  00620	48 8b 4e 18	 mov	 rcx, QWORD PTR [rsi+24]
  00624	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_stmt
  0062b	e8 00 00 00 00	 call	 ast2obj_list
  00630	48 8b d8	 mov	 rbx, rax

; 2472 :         if (!value) goto failed;

  00633	48 85 c0	 test	 rax, rax
  00636	0f 84 07 06 00
	00		 je	 $LN7@ast2obj_st

; 2473 :         if (_PyObject_SetAttrId(result, &PyId_body, value) == -1)

  0063c	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_body
  00641	4c 8b c0	 mov	 r8, rax
  00644	48 8b cf	 mov	 rcx, rdi
  00647	48 03 d5	 add	 rdx, rbp
  0064a	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0064f	83 f8 ff	 cmp	 eax, -1
  00652	0f 84 86 05 00
	00		 je	 $failed$23541

; 2474 :             goto failed;
; 2475 :         Py_DECREF(value);

  00658	48 8b cb	 mov	 rcx, rbx
  0065b	e8 00 00 00 00	 call	 _Py_DecRef

; 2476 :         value = ast2obj_list(o->v.For.orelse, ast2obj_stmt);

  00660	48 8b 4e 20	 mov	 rcx, QWORD PTR [rsi+32]
$LN191@ast2obj_st:
  00664	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_stmt
  0066b	e8 00 00 00 00	 call	 ast2obj_list
  00670	48 8b d8	 mov	 rbx, rax

; 2477 :         if (!value) goto failed;

  00673	48 85 c0	 test	 rax, rax
  00676	0f 84 c7 05 00
	00		 je	 $LN7@ast2obj_st

; 2478 :         if (_PyObject_SetAttrId(result, &PyId_orelse, value) == -1)

  0067c	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_orelse

; 2479 :             goto failed;
; 2480 :         Py_DECREF(value);
; 2481 :         break;

  00681	e9 53 fb ff ff	 jmp	 $LN184@ast2obj_st
$LN86@ast2obj_st:

; 2482 :     case While_kind:
; 2483 :         result = PyType_GenericNew(While_type, NULL, NULL);

  00686	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR While_type
$LN192@ast2obj_st:
  0068d	45 33 c0	 xor	 r8d, r8d
  00690	33 d2		 xor	 edx, edx
  00692	e8 00 00 00 00	 call	 PyType_GenericNew
  00697	48 8b f8	 mov	 rdi, rax

; 2484 :         if (!result) goto failed;

  0069a	48 85 c0	 test	 rax, rax
  0069d	0f 84 0a 06 00
	00		 je	 $LN3@ast2obj_st

; 2485 :         value = ast2obj_expr(o->v.While.test);

  006a3	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  006a7	e8 00 00 00 00	 call	 ast2obj_expr
  006ac	48 8b d8	 mov	 rbx, rax

; 2486 :         if (!value) goto failed;

  006af	48 85 c0	 test	 rax, rax
  006b2	0f 84 8b 05 00
	00		 je	 $LN7@ast2obj_st

; 2487 :         if (_PyObject_SetAttrId(result, &PyId_test, value) == -1)

  006b8	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  006c1	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_test
  006c6	4c 8b c3	 mov	 r8, rbx
  006c9	4a 8b 2c e0	 mov	 rbp, QWORD PTR [rax+r12*8]
  006cd	48 8b cf	 mov	 rcx, rdi
  006d0	48 03 d5	 add	 rdx, rbp
  006d3	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  006d8	83 f8 ff	 cmp	 eax, -1
  006db	0f 84 fd 04 00
	00		 je	 $failed$23541

; 2488 :             goto failed;
; 2489 :         Py_DECREF(value);

  006e1	48 8b cb	 mov	 rcx, rbx
  006e4	e8 00 00 00 00	 call	 _Py_DecRef

; 2490 :         value = ast2obj_list(o->v.While.body, ast2obj_stmt);

  006e9	48 8b 4e 10	 mov	 rcx, QWORD PTR [rsi+16]
  006ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_stmt
  006f4	e8 00 00 00 00	 call	 ast2obj_list
  006f9	48 8b d8	 mov	 rbx, rax

; 2491 :         if (!value) goto failed;

  006fc	48 85 c0	 test	 rax, rax
  006ff	0f 84 3e 05 00
	00		 je	 $LN7@ast2obj_st

; 2492 :         if (_PyObject_SetAttrId(result, &PyId_body, value) == -1)

  00705	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_body
  0070a	4c 8b c0	 mov	 r8, rax
  0070d	48 8b cf	 mov	 rcx, rdi
  00710	48 03 d5	 add	 rdx, rbp
  00713	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00718	83 f8 ff	 cmp	 eax, -1
  0071b	0f 84 bd 04 00
	00		 je	 $failed$23541

; 2493 :             goto failed;
; 2494 :         Py_DECREF(value);

  00721	48 8b cb	 mov	 rcx, rbx
  00724	e8 00 00 00 00	 call	 _Py_DecRef

; 2495 :         value = ast2obj_list(o->v.While.orelse, ast2obj_stmt);

  00729	48 8b 4e 18	 mov	 rcx, QWORD PTR [rsi+24]

; 2496 :         if (!value) goto failed;
; 2497 :         if (_PyObject_SetAttrId(result, &PyId_orelse, value) == -1)
; 2498 :             goto failed;
; 2499 :         Py_DECREF(value);
; 2500 :         break;

  0072d	e9 32 ff ff ff	 jmp	 $LN191@ast2obj_st
$LN78@ast2obj_st:

; 2501 :     case If_kind:
; 2502 :         result = PyType_GenericNew(If_type, NULL, NULL);

  00732	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR If_type

; 2503 :         if (!result) goto failed;
; 2504 :         value = ast2obj_expr(o->v.If.test);
; 2505 :         if (!value) goto failed;
; 2506 :         if (_PyObject_SetAttrId(result, &PyId_test, value) == -1)
; 2507 :             goto failed;
; 2508 :         Py_DECREF(value);
; 2509 :         value = ast2obj_list(o->v.If.body, ast2obj_stmt);
; 2510 :         if (!value) goto failed;
; 2511 :         if (_PyObject_SetAttrId(result, &PyId_body, value) == -1)
; 2512 :             goto failed;
; 2513 :         Py_DECREF(value);
; 2514 :         value = ast2obj_list(o->v.If.orelse, ast2obj_stmt);
; 2515 :         if (!value) goto failed;
; 2516 :         if (_PyObject_SetAttrId(result, &PyId_orelse, value) == -1)
; 2517 :             goto failed;
; 2518 :         Py_DECREF(value);
; 2519 :         break;

  00739	e9 4f ff ff ff	 jmp	 $LN192@ast2obj_st
$LN70@ast2obj_st:

; 2520 :     case With_kind:
; 2521 :         result = PyType_GenericNew(With_type, NULL, NULL);

  0073e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR With_type
  00745	45 33 c0	 xor	 r8d, r8d
  00748	33 d2		 xor	 edx, edx
  0074a	e8 00 00 00 00	 call	 PyType_GenericNew
  0074f	48 8b f8	 mov	 rdi, rax

; 2522 :         if (!result) goto failed;

  00752	48 85 c0	 test	 rax, rax
  00755	0f 84 52 05 00
	00		 je	 $LN3@ast2obj_st

; 2523 :         value = ast2obj_list(o->v.With.items, ast2obj_withitem);

  0075b	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  0075f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_withitem
  00766	e8 00 00 00 00	 call	 ast2obj_list
  0076b	48 8b d8	 mov	 rbx, rax

; 2524 :         if (!value) goto failed;

  0076e	48 85 c0	 test	 rax, rax
  00771	0f 84 cc 04 00
	00		 je	 $LN7@ast2obj_st

; 2525 :         if (_PyObject_SetAttrId(result, &PyId_items, value) == -1)

  00777	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00780	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_items
  00785	4c 8b c3	 mov	 r8, rbx
  00788	4a 8b 2c e0	 mov	 rbp, QWORD PTR [rax+r12*8]
  0078c	48 8b cf	 mov	 rcx, rdi
  0078f	48 03 d5	 add	 rdx, rbp
  00792	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00797	83 f8 ff	 cmp	 eax, -1
  0079a	0f 84 3e 04 00
	00		 je	 $failed$23541

; 2526 :             goto failed;
; 2527 :         Py_DECREF(value);

  007a0	48 8b cb	 mov	 rcx, rbx
  007a3	e8 00 00 00 00	 call	 _Py_DecRef

; 2528 :         value = ast2obj_list(o->v.With.body, ast2obj_stmt);

  007a8	48 8b 4e 10	 mov	 rcx, QWORD PTR [rsi+16]
  007ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_stmt
  007b3	e8 00 00 00 00	 call	 ast2obj_list
  007b8	48 8b d8	 mov	 rbx, rax

; 2529 :         if (!value) goto failed;

  007bb	48 85 c0	 test	 rax, rax
  007be	0f 84 7f 04 00
	00		 je	 $LN7@ast2obj_st

; 2530 :         if (_PyObject_SetAttrId(result, &PyId_body, value) == -1)

  007c4	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_body

; 2531 :             goto failed;
; 2532 :         Py_DECREF(value);
; 2533 :         break;

  007c9	e9 0b fa ff ff	 jmp	 $LN184@ast2obj_st
$LN64@ast2obj_st:

; 2534 :     case Raise_kind:
; 2535 :         result = PyType_GenericNew(Raise_type, NULL, NULL);

  007ce	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Raise_type
  007d5	45 33 c0	 xor	 r8d, r8d
  007d8	33 d2		 xor	 edx, edx
  007da	e8 00 00 00 00	 call	 PyType_GenericNew
  007df	48 8b f8	 mov	 rdi, rax

; 2536 :         if (!result) goto failed;

  007e2	48 85 c0	 test	 rax, rax
  007e5	0f 84 c2 04 00
	00		 je	 $LN3@ast2obj_st

; 2537 :         value = ast2obj_expr(o->v.Raise.exc);

  007eb	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  007ef	e8 00 00 00 00	 call	 ast2obj_expr
  007f4	48 8b d8	 mov	 rbx, rax

; 2538 :         if (!value) goto failed;

  007f7	48 85 c0	 test	 rax, rax
  007fa	0f 84 43 04 00
	00		 je	 $LN7@ast2obj_st

; 2539 :         if (_PyObject_SetAttrId(result, &PyId_exc, value) == -1)

  00800	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00809	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_exc
  0080e	4c 8b c3	 mov	 r8, rbx
  00811	4a 8b 2c e0	 mov	 rbp, QWORD PTR [rax+r12*8]
  00815	48 8b cf	 mov	 rcx, rdi
  00818	48 03 d5	 add	 rdx, rbp
  0081b	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00820	83 f8 ff	 cmp	 eax, -1
  00823	0f 84 b5 03 00
	00		 je	 $failed$23541

; 2540 :             goto failed;
; 2541 :         Py_DECREF(value);

  00829	48 8b cb	 mov	 rcx, rbx
  0082c	e8 00 00 00 00	 call	 _Py_DecRef

; 2542 :         value = ast2obj_expr(o->v.Raise.cause);

  00831	48 8b 4e 10	 mov	 rcx, QWORD PTR [rsi+16]
  00835	e8 00 00 00 00	 call	 ast2obj_expr
  0083a	48 8b d8	 mov	 rbx, rax

; 2543 :         if (!value) goto failed;

  0083d	48 85 c0	 test	 rax, rax
  00840	0f 84 fd 03 00
	00		 je	 $LN7@ast2obj_st

; 2544 :         if (_PyObject_SetAttrId(result, &PyId_cause, value) == -1)

  00846	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_cause

; 2545 :             goto failed;
; 2546 :         Py_DECREF(value);
; 2547 :         break;

  0084b	e9 89 f9 ff ff	 jmp	 $LN184@ast2obj_st
$LN58@ast2obj_st:

; 2548 :     case Try_kind:
; 2549 :         result = PyType_GenericNew(Try_type, NULL, NULL);

  00850	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Try_type
  00857	45 33 c0	 xor	 r8d, r8d
  0085a	33 d2		 xor	 edx, edx
  0085c	e8 00 00 00 00	 call	 PyType_GenericNew
  00861	48 8b f8	 mov	 rdi, rax

; 2550 :         if (!result) goto failed;

  00864	48 85 c0	 test	 rax, rax
  00867	0f 84 40 04 00
	00		 je	 $LN3@ast2obj_st

; 2551 :         value = ast2obj_list(o->v.Try.body, ast2obj_stmt);

  0086d	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  00871	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_stmt
  00878	e8 00 00 00 00	 call	 ast2obj_list
  0087d	48 8b d8	 mov	 rbx, rax

; 2552 :         if (!value) goto failed;

  00880	48 85 c0	 test	 rax, rax
  00883	0f 84 ba 03 00
	00		 je	 $LN7@ast2obj_st

; 2553 :         if (_PyObject_SetAttrId(result, &PyId_body, value) == -1)

  00889	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00892	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_body
  00897	4c 8b c3	 mov	 r8, rbx
  0089a	4a 8b 2c e0	 mov	 rbp, QWORD PTR [rax+r12*8]
  0089e	48 8b cf	 mov	 rcx, rdi
  008a1	48 03 d5	 add	 rdx, rbp
  008a4	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  008a9	83 f8 ff	 cmp	 eax, -1
  008ac	0f 84 2c 03 00
	00		 je	 $failed$23541

; 2554 :             goto failed;
; 2555 :         Py_DECREF(value);

  008b2	48 8b cb	 mov	 rcx, rbx
  008b5	e8 00 00 00 00	 call	 _Py_DecRef

; 2556 :         value = ast2obj_list(o->v.Try.handlers, ast2obj_excepthandler);

  008ba	48 8b 4e 10	 mov	 rcx, QWORD PTR [rsi+16]
  008be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_excepthandler
  008c5	e8 00 00 00 00	 call	 ast2obj_list
  008ca	48 8b d8	 mov	 rbx, rax

; 2557 :         if (!value) goto failed;

  008cd	48 85 c0	 test	 rax, rax
  008d0	0f 84 6d 03 00
	00		 je	 $LN7@ast2obj_st

; 2558 :         if (_PyObject_SetAttrId(result, &PyId_handlers, value) == -1)

  008d6	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_handlers
  008db	4c 8b c0	 mov	 r8, rax
  008de	48 8b cf	 mov	 rcx, rdi
  008e1	48 03 d5	 add	 rdx, rbp
  008e4	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  008e9	83 f8 ff	 cmp	 eax, -1
  008ec	0f 84 ec 02 00
	00		 je	 $failed$23541

; 2559 :             goto failed;
; 2560 :         Py_DECREF(value);

  008f2	48 8b cb	 mov	 rcx, rbx
  008f5	e8 00 00 00 00	 call	 _Py_DecRef

; 2561 :         value = ast2obj_list(o->v.Try.orelse, ast2obj_stmt);

  008fa	48 8b 4e 18	 mov	 rcx, QWORD PTR [rsi+24]
  008fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_stmt
  00905	e8 00 00 00 00	 call	 ast2obj_list
  0090a	48 8b d8	 mov	 rbx, rax

; 2562 :         if (!value) goto failed;

  0090d	48 85 c0	 test	 rax, rax
  00910	0f 84 2d 03 00
	00		 je	 $LN7@ast2obj_st

; 2563 :         if (_PyObject_SetAttrId(result, &PyId_orelse, value) == -1)

  00916	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_orelse
  0091b	4c 8b c0	 mov	 r8, rax
  0091e	48 8b cf	 mov	 rcx, rdi
  00921	48 03 d5	 add	 rdx, rbp
  00924	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00929	83 f8 ff	 cmp	 eax, -1
  0092c	0f 84 ac 02 00
	00		 je	 $failed$23541

; 2564 :             goto failed;
; 2565 :         Py_DECREF(value);

  00932	48 8b cb	 mov	 rcx, rbx
  00935	e8 00 00 00 00	 call	 _Py_DecRef

; 2566 :         value = ast2obj_list(o->v.Try.finalbody, ast2obj_stmt);

  0093a	48 8b 4e 20	 mov	 rcx, QWORD PTR [rsi+32]
  0093e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_stmt
  00945	e8 00 00 00 00	 call	 ast2obj_list
  0094a	48 8b d8	 mov	 rbx, rax

; 2567 :         if (!value) goto failed;

  0094d	48 85 c0	 test	 rax, rax
  00950	0f 84 ed 02 00
	00		 je	 $LN7@ast2obj_st

; 2568 :         if (_PyObject_SetAttrId(result, &PyId_finalbody, value) == -1)

  00956	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_finalbody

; 2569 :             goto failed;
; 2570 :         Py_DECREF(value);
; 2571 :         break;

  0095b	e9 79 f8 ff ff	 jmp	 $LN184@ast2obj_st
$LN48@ast2obj_st:

; 2572 :     case Assert_kind:
; 2573 :         result = PyType_GenericNew(Assert_type, NULL, NULL);

  00960	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Assert_type
  00967	45 33 c0	 xor	 r8d, r8d
  0096a	33 d2		 xor	 edx, edx
  0096c	e8 00 00 00 00	 call	 PyType_GenericNew
  00971	48 8b f8	 mov	 rdi, rax

; 2574 :         if (!result) goto failed;

  00974	48 85 c0	 test	 rax, rax
  00977	0f 84 30 03 00
	00		 je	 $LN3@ast2obj_st

; 2575 :         value = ast2obj_expr(o->v.Assert.test);

  0097d	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  00981	e8 00 00 00 00	 call	 ast2obj_expr
  00986	48 8b d8	 mov	 rbx, rax

; 2576 :         if (!value) goto failed;

  00989	48 85 c0	 test	 rax, rax
  0098c	0f 84 b1 02 00
	00		 je	 $LN7@ast2obj_st

; 2577 :         if (_PyObject_SetAttrId(result, &PyId_test, value) == -1)

  00992	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0099b	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_test
  009a0	4c 8b c3	 mov	 r8, rbx
  009a3	4a 8b 2c e0	 mov	 rbp, QWORD PTR [rax+r12*8]
  009a7	48 8b cf	 mov	 rcx, rdi
  009aa	48 03 d5	 add	 rdx, rbp
  009ad	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  009b2	83 f8 ff	 cmp	 eax, -1
  009b5	0f 84 23 02 00
	00		 je	 $failed$23541

; 2578 :             goto failed;
; 2579 :         Py_DECREF(value);

  009bb	48 8b cb	 mov	 rcx, rbx
  009be	e8 00 00 00 00	 call	 _Py_DecRef

; 2580 :         value = ast2obj_expr(o->v.Assert.msg);

  009c3	48 8b 4e 10	 mov	 rcx, QWORD PTR [rsi+16]
  009c7	e8 00 00 00 00	 call	 ast2obj_expr
  009cc	48 8b d8	 mov	 rbx, rax

; 2581 :         if (!value) goto failed;

  009cf	48 85 c0	 test	 rax, rax
  009d2	0f 84 6b 02 00
	00		 je	 $LN7@ast2obj_st

; 2582 :         if (_PyObject_SetAttrId(result, &PyId_msg, value) == -1)

  009d8	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_msg

; 2583 :             goto failed;
; 2584 :         Py_DECREF(value);
; 2585 :         break;

  009dd	e9 f7 f7 ff ff	 jmp	 $LN184@ast2obj_st
$LN42@ast2obj_st:

; 2586 :     case Import_kind:
; 2587 :         result = PyType_GenericNew(Import_type, NULL, NULL);

  009e2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Import_type
  009e9	45 33 c0	 xor	 r8d, r8d
  009ec	33 d2		 xor	 edx, edx
  009ee	e8 00 00 00 00	 call	 PyType_GenericNew
  009f3	48 8b f8	 mov	 rdi, rax

; 2588 :         if (!result) goto failed;

  009f6	48 85 c0	 test	 rax, rax
  009f9	0f 84 ae 02 00
	00		 je	 $LN3@ast2obj_st

; 2589 :         value = ast2obj_list(o->v.Import.names, ast2obj_alias);

  009ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_alias
$LN189@ast2obj_st:
  00a06	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  00a0a	e8 00 00 00 00	 call	 ast2obj_list
  00a0f	48 8b d8	 mov	 rbx, rax

; 2590 :         if (!value) goto failed;

  00a12	48 85 c0	 test	 rax, rax
  00a15	0f 84 28 02 00
	00		 je	 $LN7@ast2obj_st

; 2591 :         if (_PyObject_SetAttrId(result, &PyId_names, value) == -1)

  00a1b	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00a24	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_names
  00a29	4c 8b c3	 mov	 r8, rbx
  00a2c	4a 03 14 e0	 add	 rdx, QWORD PTR [rax+r12*8]

; 2592 :             goto failed;
; 2593 :         Py_DECREF(value);
; 2594 :         break;

  00a30	e9 aa f7 ff ff	 jmp	 $LN185@ast2obj_st
$LN38@ast2obj_st:

; 2595 :     case ImportFrom_kind:
; 2596 :         result = PyType_GenericNew(ImportFrom_type, NULL, NULL);

  00a35	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ImportFrom_type
  00a3c	45 33 c0	 xor	 r8d, r8d
  00a3f	33 d2		 xor	 edx, edx
  00a41	e8 00 00 00 00	 call	 PyType_GenericNew
  00a46	48 8b f8	 mov	 rdi, rax

; 2597 :         if (!result) goto failed;

  00a49	48 85 c0	 test	 rax, rax
  00a4c	0f 84 5b 02 00
	00		 je	 $LN3@ast2obj_st

; 2598 :         value = ast2obj_identifier(o->v.ImportFrom.module);

  00a52	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  00a56	e8 00 00 00 00	 call	 ast2obj_object
  00a5b	48 8b d8	 mov	 rbx, rax

; 2599 :         if (!value) goto failed;

  00a5e	48 85 c0	 test	 rax, rax
  00a61	0f 84 dc 01 00
	00		 je	 $LN7@ast2obj_st

; 2600 :         if (_PyObject_SetAttrId(result, &PyId_module, value) == -1)

  00a67	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00a70	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_module
  00a75	4c 8b c3	 mov	 r8, rbx
  00a78	4a 8b 2c e0	 mov	 rbp, QWORD PTR [rax+r12*8]
  00a7c	48 8b cf	 mov	 rcx, rdi
  00a7f	48 03 d5	 add	 rdx, rbp
  00a82	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00a87	83 f8 ff	 cmp	 eax, -1
  00a8a	0f 84 4e 01 00
	00		 je	 $failed$23541

; 2601 :             goto failed;
; 2602 :         Py_DECREF(value);

  00a90	48 8b cb	 mov	 rcx, rbx
  00a93	e8 00 00 00 00	 call	 _Py_DecRef

; 2603 :         value = ast2obj_list(o->v.ImportFrom.names, ast2obj_alias);

  00a98	48 8b 4e 10	 mov	 rcx, QWORD PTR [rsi+16]
  00a9c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_alias
  00aa3	e8 00 00 00 00	 call	 ast2obj_list
  00aa8	48 8b d8	 mov	 rbx, rax

; 2604 :         if (!value) goto failed;

  00aab	48 85 c0	 test	 rax, rax
  00aae	0f 84 8f 01 00
	00		 je	 $LN7@ast2obj_st

; 2605 :         if (_PyObject_SetAttrId(result, &PyId_names, value) == -1)

  00ab4	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_names
  00ab9	4c 8b c0	 mov	 r8, rax
  00abc	48 8b cf	 mov	 rcx, rdi
  00abf	48 03 d5	 add	 rdx, rbp
  00ac2	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00ac7	83 f8 ff	 cmp	 eax, -1
  00aca	0f 84 0e 01 00
	00		 je	 $failed$23541

; 2606 :             goto failed;
; 2607 :         Py_DECREF(value);

  00ad0	48 8b cb	 mov	 rcx, rbx
  00ad3	e8 00 00 00 00	 call	 _Py_DecRef

; 2608 :         value = ast2obj_int(o->v.ImportFrom.level);

  00ad8	8b 4e 18	 mov	 ecx, DWORD PTR [rsi+24]
  00adb	e8 00 00 00 00	 call	 ast2obj_int
  00ae0	48 8b d8	 mov	 rbx, rax

; 2609 :         if (!value) goto failed;

  00ae3	48 85 c0	 test	 rax, rax
  00ae6	0f 84 57 01 00
	00		 je	 $LN7@ast2obj_st

; 2610 :         if (_PyObject_SetAttrId(result, &PyId_level, value) == -1)

  00aec	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_level

; 2611 :             goto failed;
; 2612 :         Py_DECREF(value);
; 2613 :         break;

  00af1	e9 e3 f6 ff ff	 jmp	 $LN184@ast2obj_st
$LN30@ast2obj_st:

; 2614 :     case Global_kind:
; 2615 :         result = PyType_GenericNew(Global_type, NULL, NULL);

  00af6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Global_type
$LN194@ast2obj_st:
  00afd	45 33 c0	 xor	 r8d, r8d
  00b00	33 d2		 xor	 edx, edx
  00b02	e8 00 00 00 00	 call	 PyType_GenericNew
  00b07	48 8b f8	 mov	 rdi, rax

; 2616 :         if (!result) goto failed;

  00b0a	48 85 c0	 test	 rax, rax
  00b0d	0f 84 9a 01 00
	00		 je	 $LN3@ast2obj_st

; 2617 :         value = ast2obj_list(o->v.Global.names, ast2obj_identifier);

  00b13	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_object

; 2618 :         if (!value) goto failed;
; 2619 :         if (_PyObject_SetAttrId(result, &PyId_names, value) == -1)
; 2620 :             goto failed;
; 2621 :         Py_DECREF(value);
; 2622 :         break;

  00b1a	e9 e7 fe ff ff	 jmp	 $LN189@ast2obj_st
$LN26@ast2obj_st:

; 2623 :     case Nonlocal_kind:
; 2624 :         result = PyType_GenericNew(Nonlocal_type, NULL, NULL);

  00b1f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Nonlocal_type

; 2625 :         if (!result) goto failed;
; 2626 :         value = ast2obj_list(o->v.Nonlocal.names, ast2obj_identifier);
; 2627 :         if (!value) goto failed;
; 2628 :         if (_PyObject_SetAttrId(result, &PyId_names, value) == -1)
; 2629 :             goto failed;
; 2630 :         Py_DECREF(value);
; 2631 :         break;

  00b26	eb d5		 jmp	 SHORT $LN194@ast2obj_st
$LN22@ast2obj_st:

; 2632 :     case Expr_kind:
; 2633 :         result = PyType_GenericNew(Expr_type, NULL, NULL);

  00b28	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Expr_type

; 2634 :         if (!result) goto failed;
; 2635 :         value = ast2obj_expr(o->v.Expr.value);
; 2636 :         if (!value) goto failed;
; 2637 :         if (_PyObject_SetAttrId(result, &PyId_value, value) == -1)
; 2638 :             goto failed;
; 2639 :         Py_DECREF(value);
; 2640 :         break;

  00b2f	e9 8b f8 ff ff	 jmp	 $LN195@ast2obj_st
$LN18@ast2obj_st:

; 2641 :     case Pass_kind:
; 2642 :         result = PyType_GenericNew(Pass_type, NULL, NULL);

  00b34	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Pass_type

; 2643 :         if (!result) goto failed;
; 2644 :         break;

  00b3b	eb 10		 jmp	 SHORT $LN183@ast2obj_st
$LN16@ast2obj_st:

; 2645 :     case Break_kind:
; 2646 :         result = PyType_GenericNew(Break_type, NULL, NULL);

  00b3d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Break_type

; 2647 :         if (!result) goto failed;
; 2648 :         break;

  00b44	eb 07		 jmp	 SHORT $LN183@ast2obj_st
$LN14@ast2obj_st:

; 2649 :     case Continue_kind:
; 2650 :         result = PyType_GenericNew(Continue_type, NULL, NULL);

  00b46	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Continue_type
$LN183@ast2obj_st:
  00b4d	45 33 c0	 xor	 r8d, r8d
  00b50	33 d2		 xor	 edx, edx
  00b52	e8 00 00 00 00	 call	 PyType_GenericNew
  00b57	48 8b f8	 mov	 rdi, rax

; 2651 :         if (!result) goto failed;

  00b5a	48 85 c0	 test	 rax, rax
  00b5d	0f 84 4a 01 00
	00		 je	 $LN3@ast2obj_st
$LN13@ast2obj_st:

; 2652 :         break;
; 2653 :     }
; 2654 :     value = ast2obj_int(o->lineno);

  00b63	8b 4e 40	 mov	 ecx, DWORD PTR [rsi+64]
  00b66	e8 00 00 00 00	 call	 ast2obj_int
  00b6b	48 8b d8	 mov	 rbx, rax

; 2655 :     if (!value) goto failed;

  00b6e	48 85 c0	 test	 rax, rax
  00b71	0f 84 cc 00 00
	00		 je	 $LN7@ast2obj_st

; 2656 :     if (_PyObject_SetAttrId(result, &PyId_lineno, value) < 0)

  00b77	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00b80	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_lineno
  00b85	4c 8b c3	 mov	 r8, rbx
  00b88	4a 8b 2c e0	 mov	 rbp, QWORD PTR [rax+r12*8]
  00b8c	48 8b cf	 mov	 rcx, rdi
  00b8f	48 03 d5	 add	 rdx, rbp
  00b92	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00b97	85 c0		 test	 eax, eax
  00b99	78 43		 js	 SHORT $failed$23541

; 2657 :         goto failed;
; 2658 :     Py_DECREF(value);

  00b9b	48 8b cb	 mov	 rcx, rbx
  00b9e	e8 00 00 00 00	 call	 _Py_DecRef

; 2659 :     value = ast2obj_int(o->col_offset);

  00ba3	8b 4e 44	 mov	 ecx, DWORD PTR [rsi+68]
  00ba6	e8 00 00 00 00	 call	 ast2obj_int
  00bab	48 8b d8	 mov	 rbx, rax

; 2660 :     if (!value) goto failed;

  00bae	48 85 c0	 test	 rax, rax
  00bb1	0f 84 8c 00 00
	00		 je	 $LN7@ast2obj_st

; 2661 :     if (_PyObject_SetAttrId(result, &PyId_col_offset, value) < 0)

  00bb7	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_col_offset
  00bbc	4c 8b c0	 mov	 r8, rax
  00bbf	48 8b cf	 mov	 rcx, rdi
  00bc2	48 03 d5	 add	 rdx, rbp
  00bc5	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00bca	85 c0		 test	 eax, eax
  00bcc	78 10		 js	 SHORT $failed$23541

; 2662 :         goto failed;
; 2663 :     Py_DECREF(value);

  00bce	48 8b cb	 mov	 rcx, rbx
  00bd1	e8 00 00 00 00	 call	 _Py_DecRef

; 2664 :     return result;

  00bd6	48 8b c7	 mov	 rax, rdi
  00bd9	e9 d1 00 00 00	 jmp	 $LN181@ast2obj_st
$failed$23541:

; 2665 : failed:
; 2666 :     Py_XDECREF(value);

  00bde	e8 00 00 00 00	 call	 _Py_PXCTX
  00be3	85 c0		 test	 eax, eax
  00be5	75 5c		 jne	 SHORT $LN7@ast2obj_st
  00be7	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00beb	a8 20		 test	 al, 32			; 00000020H
  00bed	75 4c		 jne	 SHORT $LN160@ast2obj_st
  00bef	84 c0		 test	 al, al
  00bf1	78 48		 js	 SHORT $LN160@ast2obj_st
  00bf3	a8 02		 test	 al, 2
  00bf5	75 4c		 jne	 SHORT $LN7@ast2obj_st
  00bf7	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00bfb	75 46		 jne	 SHORT $LN7@ast2obj_st
  00bfd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00c04	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00c0b	4c 8b cb	 mov	 r9, rbx
  00c0e	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00c14	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00c1c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00c21	48 8b cb	 mov	 rcx, rbx
  00c24	85 c0		 test	 eax, eax
  00c26	74 07		 je	 SHORT $LN165@ast2obj_st
  00c28	e8 00 00 00 00	 call	 _Px_Dealloc
  00c2d	eb 14		 jmp	 SHORT $LN7@ast2obj_st
$LN165@ast2obj_st:
  00c2f	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00c33	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00c39	eb 08		 jmp	 SHORT $LN7@ast2obj_st
$LN160@ast2obj_st:
  00c3b	48 8b cb	 mov	 rcx, rbx
  00c3e	e8 00 00 00 00	 call	 Px_DecRef
$LN7@ast2obj_st:

; 2667 :     Py_XDECREF(result);

  00c43	48 85 ff	 test	 rdi, rdi
  00c46	74 65		 je	 SHORT $LN3@ast2obj_st
  00c48	e8 00 00 00 00	 call	 _Py_PXCTX
  00c4d	85 c0		 test	 eax, eax
  00c4f	75 5c		 jne	 SHORT $LN3@ast2obj_st
  00c51	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00c55	a8 20		 test	 al, 32			; 00000020H
  00c57	75 4c		 jne	 SHORT $LN171@ast2obj_st
  00c59	84 c0		 test	 al, al
  00c5b	78 48		 js	 SHORT $LN171@ast2obj_st
  00c5d	a8 02		 test	 al, 2
  00c5f	75 4c		 jne	 SHORT $LN3@ast2obj_st
  00c61	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00c65	75 46		 jne	 SHORT $LN3@ast2obj_st
  00c67	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00c6e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00c75	4c 8b cf	 mov	 r9, rdi
  00c78	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00c7e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00c86	e8 00 00 00 00	 call	 _PyParallel_Guard
  00c8b	48 8b cf	 mov	 rcx, rdi
  00c8e	85 c0		 test	 eax, eax
  00c90	74 07		 je	 SHORT $LN176@ast2obj_st
  00c92	e8 00 00 00 00	 call	 _Px_Dealloc
  00c97	eb 14		 jmp	 SHORT $LN3@ast2obj_st
$LN176@ast2obj_st:
  00c99	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00c9d	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00ca3	eb 08		 jmp	 SHORT $LN3@ast2obj_st
$LN171@ast2obj_st:
  00ca5	48 8b cf	 mov	 rcx, rdi
  00ca8	e8 00 00 00 00	 call	 Px_DecRef
$LN3@ast2obj_st:

; 2668 :     return NULL;

  00cad	33 c0		 xor	 eax, eax
$LN181@ast2obj_st:
  00caf	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00cb4	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00cb9	4c 8b 64 24 50	 mov	 r12, QWORD PTR [rsp+80]

; 2669 : }

  00cbe	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  00cc3	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00cc7	5f		 pop	 rdi
  00cc8	c3		 ret	 0
  00cc9	0f 1f 00	 npad	 3
$LN178@ast2obj_st:
  00ccc	00 00 00 00	 DD	 $LN146@ast2obj_st
  00cd0	00 00 00 00	 DD	 $LN134@ast2obj_st
  00cd4	00 00 00 00	 DD	 $LN118@ast2obj_st
  00cd8	00 00 00 00	 DD	 $LN114@ast2obj_st
  00cdc	00 00 00 00	 DD	 $LN110@ast2obj_st
  00ce0	00 00 00 00	 DD	 $LN104@ast2obj_st
  00ce4	00 00 00 00	 DD	 $LN96@ast2obj_st
  00ce8	00 00 00 00	 DD	 $LN86@ast2obj_st
  00cec	00 00 00 00	 DD	 $LN78@ast2obj_st
  00cf0	00 00 00 00	 DD	 $LN70@ast2obj_st
  00cf4	00 00 00 00	 DD	 $LN64@ast2obj_st
  00cf8	00 00 00 00	 DD	 $LN58@ast2obj_st
  00cfc	00 00 00 00	 DD	 $LN48@ast2obj_st
  00d00	00 00 00 00	 DD	 $LN42@ast2obj_st
  00d04	00 00 00 00	 DD	 $LN38@ast2obj_st
  00d08	00 00 00 00	 DD	 $LN30@ast2obj_st
  00d0c	00 00 00 00	 DD	 $LN26@ast2obj_st
  00d10	00 00 00 00	 DD	 $LN22@ast2obj_st
  00d14	00 00 00 00	 DD	 $LN18@ast2obj_st
  00d18	00 00 00 00	 DD	 $LN16@ast2obj_st
  00d1c	00 00 00 00	 DD	 $LN14@ast2obj_st
ast2obj_stmt ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@HLCNGPKC@required?5field?5?$CClineno?$CC?5missing?5@ ; `string'
PUBLIC	??_C@_0CO@GDDHAANC@required?5field?5?$CCcol_offset?$CC?5miss@ ; `string'
PUBLIC	??_C@_0CH@MEDEENCL@expected?5some?5sort?5of?5stmt?0?5but?5@ ; `string'
PUBLIC	??_C@_0CJ@HOLCPOID@required?5field?5?$CCvalue?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_0CN@LGEEILAC@required?5field?5?$CCnames?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_0DE@JLMFHJNN@Nonlocal?5field?5?$CCnames?$CC?5must?5be?5a@ ; `string'
PUBLIC	??_C@_0CL@NNCJIPCP@required?5field?5?$CCnames?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_0DC@HNDCGNHP@Global?5field?5?$CCnames?$CC?5must?5be?5a?5l@ ; `string'
PUBLIC	??_C@_0CP@MHDKFALC@required?5field?5?$CCnames?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_0DG@LPEJBEJL@ImportFrom?5field?5?$CCnames?$CC?5must?5be@ ; `string'
PUBLIC	??_C@_0CL@MKOLHKCJ@required?5field?5?$CCnames?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_0DC@JDHMGOED@Import?5field?5?$CCnames?$CC?5must?5be?5a?5l@ ; `string'
PUBLIC	??_C@_0CK@EMFFOLOL@required?5field?5?$CCtest?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CH@HNJFAAMH@required?5field?5?$CCbody?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CL@KPJIMCMF@required?5field?5?$CChandlers?$CC?5missin@ ; `string'
PUBLIC	??_C@_0CJ@HAGINNCN@required?5field?5?$CCorelse?$CC?5missing?5@ ; `string'
PUBLIC	??_C@_0CM@LKCDFMOJ@required?5field?5?$CCfinalbody?$CC?5missi@ ; `string'
PUBLIC	??_C@_0DD@LHHDMHOG@Try?5field?5?$CCfinalbody?$CC?5must?5be?5a?5@ ; `string'
PUBLIC	??_C@_0DA@PCPJJJJH@Try?5field?5?$CCorelse?$CC?5must?5be?5a?5lis@ ; `string'
PUBLIC	??_C@_0DC@OJKLHJOP@Try?5field?5?$CChandlers?$CC?5must?5be?5a?5l@ ; `string'
PUBLIC	??_C@_0CO@IDFBPFON@Try?5field?5?$CCbody?$CC?5must?5be?5a?5list?0@ ; `string'
PUBLIC	??_C@_0CJ@CALAEGDB@required?5field?5?$CCitems?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_0CI@GADJBKKB@required?5field?5?$CCbody?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CP@OEFDOBHK@With?5field?5?$CCbody?$CC?5must?5be?5a?5list@ ; `string'
PUBLIC	??_C@_0DA@DOBGIIJD@With?5field?5?$CCitems?$CC?5must?5be?5a?5lis@ ; `string'
PUBLIC	??_C@_0CG@KNIONNCC@required?5field?5?$CCtest?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CG@IBBHFIGB@required?5field?5?$CCbody?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CI@BBKAIMOL@required?5field?5?$CCorelse?$CC?5missing?5@ ; `string'
PUBLIC	??_C@_0CP@EKCAPFKA@If?5field?5?$CCorelse?$CC?5must?5be?5a?5list@ ; `string'
PUBLIC	??_C@_0CN@CBMBACPE@If?5field?5?$CCbody?$CC?5must?5be?5a?5list?0?5@ ; `string'
PUBLIC	??_C@_0CJ@JMNKEPPD@required?5field?5?$CCtest?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CJ@CBCBDLKI@required?5field?5?$CCbody?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CL@HNNCIDFK@required?5field?5?$CCorelse?$CC?5missing?5@ ; `string'
PUBLIC	??_C@_0DC@CBNJGDLK@While?5field?5?$CCorelse?$CC?5must?5be?5a?5l@ ; `string'
PUBLIC	??_C@_0DA@DEKBMJDI@While?5field?5?$CCbody?$CC?5must?5be?5a?5lis@ ; `string'
PUBLIC	??_C@_0CJ@NEHOGNKF@required?5field?5?$CCtarget?$CC?5missing?5@ ; `string'
PUBLIC	??_C@_0CH@ICLHNFMH@required?5field?5?$CCiter?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CH@HAIPHGDL@required?5field?5?$CCbody?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CJ@HNHCKLNB@required?5field?5?$CCorelse?$CC?5missing?5@ ; `string'
PUBLIC	??_C@_0DA@OHHBCDMN@For?5field?5?$CCorelse?$CC?5must?5be?5a?5lis@ ; `string'
PUBLIC	??_C@_0CO@HMKAJOFO@For?5field?5?$CCbody?$CC?5must?5be?5a?5list?0@ ; `string'
PUBLIC	??_C@_0CP@OHAKCNID@required?5field?5?$CCtarget?$CC?5missing?5@ ; `string'
PUBLIC	??_C@_0CL@OOGNAPCP@required?5field?5?$CCop?$CC?5missing?5from@ ; `string'
PUBLIC	??_C@_0CO@DDMENDHF@required?5field?5?$CCvalue?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_0CN@BNPHBHEF@required?5field?5?$CCtargets?$CC?5missing@ ; `string'
PUBLIC	??_C@_0CL@KCHNIPDD@required?5field?5?$CCvalue?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_0DE@CHFJFKNC@Assign?5field?5?$CCtargets?$CC?5must?5be?5a@ ; `string'
PUBLIC	??_C@_0CN@MPLCKCGN@required?5field?5?$CCtargets?$CC?5missing@ ; `string'
PUBLIC	??_C@_0DE@JEFKDOEM@Delete?5field?5?$CCtargets?$CC?5must?5be?5a@ ; `string'
PUBLIC	??_C@_0CM@NNOCJKEL@required?5field?5?$CCname?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CN@HBECIBCI@required?5field?5?$CCbases?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_0DA@IHPLINCF@required?5field?5?$CCkeywords?$CC?5missin@ ; `string'
PUBLIC	??_C@_0CM@JFNEHIJD@required?5field?5?$CCbody?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0DG@NOLEJLGL@required?5field?5?$CCdecorator_list?$CC?5@ ; `string'
PUBLIC	??_C@_0DN@MFOMKLEB@ClassDef?5field?5?$CCdecorator_list?$CC?5@ ; `string'
PUBLIC	??_C@_0DD@FELJEMHL@ClassDef?5field?5?$CCbody?$CC?5must?5be?5a?5@ ; `string'
PUBLIC	??_C@_0DH@FAJFAAEL@ClassDef?5field?5?$CCkeywords?$CC?5must?5b@ ; `string'
PUBLIC	??_C@_0DE@MHEBOGJH@ClassDef?5field?5?$CCbases?$CC?5must?5be?5a@ ; `string'
PUBLIC	??_C@_0CP@PFDPCEPI@required?5field?5?$CCname?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CP@OIMKEJCJ@required?5field?5?$CCargs?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CP@NFFHEEMP@required?5field?5?$CCbody?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0DJ@FGGBKHJL@required?5field?5?$CCdecorator_list?$CC?5@ ; `string'
PUBLIC	??_C@_0EA@GALCHNKH@FunctionDef?5field?5?$CCdecorator_lis@ ; `string'
PUBLIC	??_C@_0DG@NOJACNBG@FunctionDef?5field?5?$CCbody?$CC?5must?5be@ ; `string'
PUBLIC	??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_stmt DD imagerel obj2ast_stmt
	DD	imagerel obj2ast_stmt+10654
	DD	imagerel $unwind$obj2ast_stmt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_stmt DD 075101H
	DD	01a3451H
	DD	0140114H
	DD	060077008H
	DD	05006H
xdata	ENDS
;	COMDAT ??_C@_0CK@HLCNGPKC@required?5field?5?$CClineno?$CC?5missing?5@
CONST	SEGMENT
??_C@_0CK@HLCNGPKC@required?5field?5?$CClineno?$CC?5missing?5@ DB 'requir'
	DB	'ed field "lineno" missing from stmt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@GDDHAANC@required?5field?5?$CCcol_offset?$CC?5miss@
CONST	SEGMENT
??_C@_0CO@GDDHAANC@required?5field?5?$CCcol_offset?$CC?5miss@ DB 'require'
	DB	'd field "col_offset" missing from stmt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@MEDEENCL@expected?5some?5sort?5of?5stmt?0?5but?5@
CONST	SEGMENT
??_C@_0CH@MEDEENCL@expected?5some?5sort?5of?5stmt?0?5but?5@ DB 'expected '
	DB	'some sort of stmt, but got %R', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@HOLCPOID@required?5field?5?$CCvalue?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CJ@HOLCPOID@required?5field?5?$CCvalue?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "value" missing from Expr', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@LGEEILAC@required?5field?5?$CCnames?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CN@LGEEILAC@required?5field?5?$CCnames?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "names" missing from Nonlocal', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@JLMFHJNN@Nonlocal?5field?5?$CCnames?$CC?5must?5be?5a@
CONST	SEGMENT
??_C@_0DE@JLMFHJNN@Nonlocal?5field?5?$CCnames?$CC?5must?5be?5a@ DB 'Nonlo'
	DB	'cal field "names" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@NNCJIPCP@required?5field?5?$CCnames?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CL@NNCJIPCP@required?5field?5?$CCnames?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "names" missing from Global', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@HNDCGNHP@Global?5field?5?$CCnames?$CC?5must?5be?5a?5l@
CONST	SEGMENT
??_C@_0DC@HNDCGNHP@Global?5field?5?$CCnames?$CC?5must?5be?5a?5l@ DB 'Glob'
	DB	'al field "names" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@MHDKFALC@required?5field?5?$CCnames?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CP@MHDKFALC@required?5field?5?$CCnames?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "names" missing from ImportFrom', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@LPEJBEJL@ImportFrom?5field?5?$CCnames?$CC?5must?5be@
CONST	SEGMENT
??_C@_0DG@LPEJBEJL@ImportFrom?5field?5?$CCnames?$CC?5must?5be@ DB 'Import'
	DB	'From field "names" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@MKOLHKCJ@required?5field?5?$CCnames?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CL@MKOLHKCJ@required?5field?5?$CCnames?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "names" missing from Import', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@JDHMGOED@Import?5field?5?$CCnames?$CC?5must?5be?5a?5l@
CONST	SEGMENT
??_C@_0DC@JDHMGOED@Import?5field?5?$CCnames?$CC?5must?5be?5a?5l@ DB 'Impo'
	DB	'rt field "names" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@EMFFOLOL@required?5field?5?$CCtest?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CK@EMFFOLOL@required?5field?5?$CCtest?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "test" missing from Assert', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@HNJFAAMH@required?5field?5?$CCbody?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CH@HNJFAAMH@required?5field?5?$CCbody?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "body" missing from Try', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@KPJIMCMF@required?5field?5?$CChandlers?$CC?5missin@
CONST	SEGMENT
??_C@_0CL@KPJIMCMF@required?5field?5?$CChandlers?$CC?5missin@ DB 'require'
	DB	'd field "handlers" missing from Try', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@HAGINNCN@required?5field?5?$CCorelse?$CC?5missing?5@
CONST	SEGMENT
??_C@_0CJ@HAGINNCN@required?5field?5?$CCorelse?$CC?5missing?5@ DB 'requir'
	DB	'ed field "orelse" missing from Try', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@LKCDFMOJ@required?5field?5?$CCfinalbody?$CC?5missi@
CONST	SEGMENT
??_C@_0CM@LKCDFMOJ@required?5field?5?$CCfinalbody?$CC?5missi@ DB 'require'
	DB	'd field "finalbody" missing from Try', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@LHHDMHOG@Try?5field?5?$CCfinalbody?$CC?5must?5be?5a?5@
CONST	SEGMENT
??_C@_0DD@LHHDMHOG@Try?5field?5?$CCfinalbody?$CC?5must?5be?5a?5@ DB 'Try '
	DB	'field "finalbody" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@PCPJJJJH@Try?5field?5?$CCorelse?$CC?5must?5be?5a?5lis@
CONST	SEGMENT
??_C@_0DA@PCPJJJJH@Try?5field?5?$CCorelse?$CC?5must?5be?5a?5lis@ DB 'Try '
	DB	'field "orelse" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@OJKLHJOP@Try?5field?5?$CChandlers?$CC?5must?5be?5a?5l@
CONST	SEGMENT
??_C@_0DC@OJKLHJOP@Try?5field?5?$CChandlers?$CC?5must?5be?5a?5l@ DB 'Try '
	DB	'field "handlers" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@IDFBPFON@Try?5field?5?$CCbody?$CC?5must?5be?5a?5list?0@
CONST	SEGMENT
??_C@_0CO@IDFBPFON@Try?5field?5?$CCbody?$CC?5must?5be?5a?5list?0@ DB 'Try'
	DB	' field "body" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@CALAEGDB@required?5field?5?$CCitems?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CJ@CALAEGDB@required?5field?5?$CCitems?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "items" missing from With', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@GADJBKKB@required?5field?5?$CCbody?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CI@GADJBKKB@required?5field?5?$CCbody?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "body" missing from With', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@OEFDOBHK@With?5field?5?$CCbody?$CC?5must?5be?5a?5list@
CONST	SEGMENT
??_C@_0CP@OEFDOBHK@With?5field?5?$CCbody?$CC?5must?5be?5a?5list@ DB 'With'
	DB	' field "body" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@DOBGIIJD@With?5field?5?$CCitems?$CC?5must?5be?5a?5lis@
CONST	SEGMENT
??_C@_0DA@DOBGIIJD@With?5field?5?$CCitems?$CC?5must?5be?5a?5lis@ DB 'With'
	DB	' field "items" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@KNIONNCC@required?5field?5?$CCtest?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CG@KNIONNCC@required?5field?5?$CCtest?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "test" missing from If', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@IBBHFIGB@required?5field?5?$CCbody?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CG@IBBHFIGB@required?5field?5?$CCbody?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "body" missing from If', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@BBKAIMOL@required?5field?5?$CCorelse?$CC?5missing?5@
CONST	SEGMENT
??_C@_0CI@BBKAIMOL@required?5field?5?$CCorelse?$CC?5missing?5@ DB 'requir'
	DB	'ed field "orelse" missing from If', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@EKCAPFKA@If?5field?5?$CCorelse?$CC?5must?5be?5a?5list@
CONST	SEGMENT
??_C@_0CP@EKCAPFKA@If?5field?5?$CCorelse?$CC?5must?5be?5a?5list@ DB 'If f'
	DB	'ield "orelse" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@CBMBACPE@If?5field?5?$CCbody?$CC?5must?5be?5a?5list?0?5@
CONST	SEGMENT
??_C@_0CN@CBMBACPE@If?5field?5?$CCbody?$CC?5must?5be?5a?5list?0?5@ DB 'If'
	DB	' field "body" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@JMNKEPPD@required?5field?5?$CCtest?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CJ@JMNKEPPD@required?5field?5?$CCtest?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "test" missing from While', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@CBCBDLKI@required?5field?5?$CCbody?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CJ@CBCBDLKI@required?5field?5?$CCbody?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "body" missing from While', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@HNNCIDFK@required?5field?5?$CCorelse?$CC?5missing?5@
CONST	SEGMENT
??_C@_0CL@HNNCIDFK@required?5field?5?$CCorelse?$CC?5missing?5@ DB 'requir'
	DB	'ed field "orelse" missing from While', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@CBNJGDLK@While?5field?5?$CCorelse?$CC?5must?5be?5a?5l@
CONST	SEGMENT
??_C@_0DC@CBNJGDLK@While?5field?5?$CCorelse?$CC?5must?5be?5a?5l@ DB 'Whil'
	DB	'e field "orelse" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@DEKBMJDI@While?5field?5?$CCbody?$CC?5must?5be?5a?5lis@
CONST	SEGMENT
??_C@_0DA@DEKBMJDI@While?5field?5?$CCbody?$CC?5must?5be?5a?5lis@ DB 'Whil'
	DB	'e field "body" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@NEHOGNKF@required?5field?5?$CCtarget?$CC?5missing?5@
CONST	SEGMENT
??_C@_0CJ@NEHOGNKF@required?5field?5?$CCtarget?$CC?5missing?5@ DB 'requir'
	DB	'ed field "target" missing from For', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@ICLHNFMH@required?5field?5?$CCiter?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CH@ICLHNFMH@required?5field?5?$CCiter?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "iter" missing from For', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@HAIPHGDL@required?5field?5?$CCbody?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CH@HAIPHGDL@required?5field?5?$CCbody?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "body" missing from For', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@HNHCKLNB@required?5field?5?$CCorelse?$CC?5missing?5@
CONST	SEGMENT
??_C@_0CJ@HNHCKLNB@required?5field?5?$CCorelse?$CC?5missing?5@ DB 'requir'
	DB	'ed field "orelse" missing from For', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@OHHBCDMN@For?5field?5?$CCorelse?$CC?5must?5be?5a?5lis@
CONST	SEGMENT
??_C@_0DA@OHHBCDMN@For?5field?5?$CCorelse?$CC?5must?5be?5a?5lis@ DB 'For '
	DB	'field "orelse" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@HMKAJOFO@For?5field?5?$CCbody?$CC?5must?5be?5a?5list?0@
CONST	SEGMENT
??_C@_0CO@HMKAJOFO@For?5field?5?$CCbody?$CC?5must?5be?5a?5list?0@ DB 'For'
	DB	' field "body" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@OHAKCNID@required?5field?5?$CCtarget?$CC?5missing?5@
CONST	SEGMENT
??_C@_0CP@OHAKCNID@required?5field?5?$CCtarget?$CC?5missing?5@ DB 'requir'
	DB	'ed field "target" missing from AugAssign', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@OOGNAPCP@required?5field?5?$CCop?$CC?5missing?5from@
CONST	SEGMENT
??_C@_0CL@OOGNAPCP@required?5field?5?$CCop?$CC?5missing?5from@ DB 'requir'
	DB	'ed field "op" missing from AugAssign', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@DDMENDHF@required?5field?5?$CCvalue?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CO@DDMENDHF@required?5field?5?$CCvalue?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "value" missing from AugAssign', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@BNPHBHEF@required?5field?5?$CCtargets?$CC?5missing@
CONST	SEGMENT
??_C@_0CN@BNPHBHEF@required?5field?5?$CCtargets?$CC?5missing@ DB 'require'
	DB	'd field "targets" missing from Assign', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@KCHNIPDD@required?5field?5?$CCvalue?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CL@KCHNIPDD@required?5field?5?$CCvalue?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "value" missing from Assign', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@CHFJFKNC@Assign?5field?5?$CCtargets?$CC?5must?5be?5a@
CONST	SEGMENT
??_C@_0DE@CHFJFKNC@Assign?5field?5?$CCtargets?$CC?5must?5be?5a@ DB 'Assig'
	DB	'n field "targets" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@MPLCKCGN@required?5field?5?$CCtargets?$CC?5missing@
CONST	SEGMENT
??_C@_0CN@MPLCKCGN@required?5field?5?$CCtargets?$CC?5missing@ DB 'require'
	DB	'd field "targets" missing from Delete', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@JEFKDOEM@Delete?5field?5?$CCtargets?$CC?5must?5be?5a@
CONST	SEGMENT
??_C@_0DE@JEFKDOEM@Delete?5field?5?$CCtargets?$CC?5must?5be?5a@ DB 'Delet'
	DB	'e field "targets" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@NNOCJKEL@required?5field?5?$CCname?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CM@NNOCJKEL@required?5field?5?$CCname?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "name" missing from ClassDef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@HBECIBCI@required?5field?5?$CCbases?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CN@HBECIBCI@required?5field?5?$CCbases?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "bases" missing from ClassDef', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@IHPLINCF@required?5field?5?$CCkeywords?$CC?5missin@
CONST	SEGMENT
??_C@_0DA@IHPLINCF@required?5field?5?$CCkeywords?$CC?5missin@ DB 'require'
	DB	'd field "keywords" missing from ClassDef', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@JFNEHIJD@required?5field?5?$CCbody?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CM@JFNEHIJD@required?5field?5?$CCbody?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "body" missing from ClassDef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@NOLEJLGL@required?5field?5?$CCdecorator_list?$CC?5@
CONST	SEGMENT
??_C@_0DG@NOLEJLGL@required?5field?5?$CCdecorator_list?$CC?5@ DB 'require'
	DB	'd field "decorator_list" missing from ClassDef', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@MFOMKLEB@ClassDef?5field?5?$CCdecorator_list?$CC?5@
CONST	SEGMENT
??_C@_0DN@MFOMKLEB@ClassDef?5field?5?$CCdecorator_list?$CC?5@ DB 'ClassDe'
	DB	'f field "decorator_list" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@FELJEMHL@ClassDef?5field?5?$CCbody?$CC?5must?5be?5a?5@
CONST	SEGMENT
??_C@_0DD@FELJEMHL@ClassDef?5field?5?$CCbody?$CC?5must?5be?5a?5@ DB 'Clas'
	DB	'sDef field "body" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@FAJFAAEL@ClassDef?5field?5?$CCkeywords?$CC?5must?5b@
CONST	SEGMENT
??_C@_0DH@FAJFAAEL@ClassDef?5field?5?$CCkeywords?$CC?5must?5b@ DB 'ClassD'
	DB	'ef field "keywords" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@MHEBOGJH@ClassDef?5field?5?$CCbases?$CC?5must?5be?5a@
CONST	SEGMENT
??_C@_0DE@MHEBOGJH@ClassDef?5field?5?$CCbases?$CC?5must?5be?5a@ DB 'Class'
	DB	'Def field "bases" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@PFDPCEPI@required?5field?5?$CCname?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CP@PFDPCEPI@required?5field?5?$CCname?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "name" missing from FunctionDef', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@OIMKEJCJ@required?5field?5?$CCargs?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CP@OIMKEJCJ@required?5field?5?$CCargs?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "args" missing from FunctionDef', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@NFFHEEMP@required?5field?5?$CCbody?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CP@NFFHEEMP@required?5field?5?$CCbody?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "body" missing from FunctionDef', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@FGGBKHJL@required?5field?5?$CCdecorator_list?$CC?5@
CONST	SEGMENT
??_C@_0DJ@FGGBKHJL@required?5field?5?$CCdecorator_list?$CC?5@ DB 'require'
	DB	'd field "decorator_list" missing from FunctionDef', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@GALCHNKH@FunctionDef?5field?5?$CCdecorator_lis@
CONST	SEGMENT
??_C@_0EA@GALCHNKH@FunctionDef?5field?5?$CCdecorator_lis@ DB 'FunctionDef'
	DB	' field "decorator_list" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@NOJACNBG@FunctionDef?5field?5?$CCbody?$CC?5must?5be@
CONST	SEGMENT
??_C@_0DG@NOJACNBG@FunctionDef?5field?5?$CCbody?$CC?5must?5be@ DB 'Functi'
	DB	'onDef field "body" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
CONST	SEGMENT
??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@ DB 'obj2ast_stmt', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT obj2ast_stmt
_TEXT	SEGMENT
len$1$ = 80
len$1$ = 80
i$1$ = 80
len$1$ = 80
len$1$ = 80
i$1$ = 80
i$1$ = 80
i$1$ = 80
len$1$ = 80
i$1$ = 80
len$1$ = 80
i$1$ = 80
len$1$ = 80
i$1$ = 80
len$1$ = 80
i$1$ = 80
i$1$ = 80
len$1$ = 80
bases$1$ = 80
module$25684 = 80
msg$25614 = 80
cause$25456 = 80
exc$25455 = 80
value$24981 = 80
value$24779 = 80
value$24751 = 80
names$1$ = 88
names$1$ = 88
len$1$ = 88
names$1$ = 88
finalbody$1$ = 88
len$1$ = 88
len$1$ = 88
len$1$ = 88
body$1$ = 88
len$1$ = 88
orelse$1$ = 88
len$1$ = 88
orelse$1$ = 88
len$1$ = 88
orelse$1$ = 88
len$1$ = 88
len$1$ = 88
targets$1$ = 88
keywords$1$ = 88
args$24702 = 88
tv4777 = 96
tv4701 = 104
value$25817 = 104
value$25799 = 104
value$25765 = 104
value$25717 = 104
value$25666 = 104
test$25613 = 104
value$25595 = 104
value$25567 = 104
value$25539 = 104
value$25511 = 104
value$25437 = 104
value$25409 = 104
value$25374 = 104
value$25346 = 104
value$25295 = 104
value$25267 = 104
value$25216 = 104
value$25188 = 104
value$25088 = 104
value$25037 = 104
value$25053 = 104
value$25018 = 104
name$24812 = 104
names$1$ = 112
orelse$1$ = 112
items$1$ = 112
body$1$ = 112
body$1$ = 112
body$1$ = 112
targets$1$ = 112
len$1$ = 112
i$1$ = 112
i$1$ = 112
i$1$ = 112
body$1$ = 112
kwargs$24816 = 112
starargs$24815 = 112
handlers$1$ = 120
decorator_list$1$ = 120
len$1$ = 120
len$1$ = 120
len$1$ = 120
decorator_list$1$ = 120
target$25139 = 120
module$1$ = 128
exc$1$ = 128
starargs$1$ = 128
len$1$ = 128
i$1$ = 128
test$25313 = 136
test$25234 = 136
iter$25140 = 136
target$25086 = 136
value$24963 = 136
value$24935 = 136
value$24877 = 136
value$24849 = 136
name$24701 = 136
msg$1$ = 144
kwargs$1$ = 144
level$25686 = 144
op$25087 = 144
body$1$ = 152
body$1$ = 152
len$1$ = 152
i$1$ = 152
returns$24705 = 152
col_offset$ = 192
obj$ = 192
out$ = 200
arena$ = 208
lineno$ = 216
obj2ast_stmt PROC					; COMDAT

; 3670 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	48 8d 6c 24 b9	 lea	 rbp, QWORD PTR [rsp-71]
  0000d	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  00014	48 8b f9	 mov	 rdi, rcx

; 3671 :     int isinstance;
; 3672 : 
; 3673 :     PyObject *tmp = NULL;
; 3674 :     int lineno;
; 3675 :     int col_offset;
; 3676 : 
; 3677 :     if (obj == Py_None) {

  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0001e	49 8b f0	 mov	 rsi, r8
  00021	48 3b f9	 cmp	 rdi, rcx
  00024	75 14		 jne	 SHORT $LN572@obj2ast_st@2

; 3678 :         *out = NULL;

  00026	48 c7 02 00 00
	00 00		 mov	 QWORD PTR [rdx], 0

; 3679 :         return 0;

  0002d	33 c0		 xor	 eax, eax

; 4776 : }

  0002f	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  00036	5f		 pop	 rdi
  00037	5e		 pop	 rsi
  00038	5d		 pop	 rbp
  00039	c3		 ret	 0
$LN572@obj2ast_st@2:

; 3680 :     }
; 3681 :     if (_PyObject_HasAttrId(obj, &PyId_lineno)) {

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00040	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00049	48 89 9c 24 d0
	00 00 00	 mov	 QWORD PTR [rsp+208], rbx
  00051	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00055	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_lineno
  0005a	48 8b cf	 mov	 rcx, rdi
  0005d	48 03 d8	 add	 rbx, rax
  00060	48 89 45 07	 mov	 QWORD PTR tv4777[rbp-89], rax
  00064	48 8b d3	 mov	 rdx, rbx
  00067	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0006c	85 c0		 test	 eax, eax
  0006e	0f 84 ff 28 00
	00		 je	 $LN571@obj2ast_st@2

; 3682 :         int res;
; 3683 :         tmp = _PyObject_GetAttrId(obj, &PyId_lineno);

  00074	48 8b d3	 mov	 rdx, rbx
  00077	48 8b cf	 mov	 rcx, rdi
  0007a	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0007f	48 8b d8	 mov	 rbx, rax

; 3684 :         if (tmp == NULL) goto failed;

  00082	48 85 c0	 test	 rax, rax
  00085	0f 84 fb 28 00
	00		 je	 $LN657@obj2ast_st@2

; 3685 :         res = obj2ast_int(tmp, &lineno, arena);

  0008b	48 8d 55 7f	 lea	 rdx, QWORD PTR lineno$[rbp-89]
  0008f	48 8b c8	 mov	 rcx, rax
  00092	e8 00 00 00 00	 call	 obj2ast_int

; 3686 :         if (res != 0) goto failed;

  00097	85 c0		 test	 eax, eax
  00099	0f 85 1e 02 00
	00		 jne	 $failed$24670

; 3687 :         Py_CLEAR(tmp);

  0009f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  000a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  000ad	4c 8b cb	 mov	 r9, rbx
  000b0	41 b8 67 0e 00
	00		 mov	 r8d, 3687		; 00000e67H
  000b6	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000be	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c3	85 c0		 test	 eax, eax
  000c5	75 08		 jne	 SHORT $LN567@obj2ast_st@2
  000c7	48 8b cb	 mov	 rcx, rbx
  000ca	e8 00 00 00 00	 call	 _Py_DecRef
$LN567@obj2ast_st@2:

; 3691 :     }
; 3692 :     if (_PyObject_HasAttrId(obj, &PyId_col_offset)) {

  000cf	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_col_offset
  000d4	48 8b cf	 mov	 rcx, rdi
  000d7	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  000db	48 8b d3	 mov	 rdx, rbx
  000de	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  000e3	85 c0		 test	 eax, eax
  000e5	0f 84 7f 28 00
	00		 je	 $LN563@obj2ast_st@2

; 3693 :         int res;
; 3694 :         tmp = _PyObject_GetAttrId(obj, &PyId_col_offset);

  000eb	48 8b d3	 mov	 rdx, rbx
  000ee	48 8b cf	 mov	 rcx, rdi
  000f1	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  000f6	48 8b d8	 mov	 rbx, rax

; 3695 :         if (tmp == NULL) goto failed;

  000f9	48 85 c0	 test	 rax, rax
  000fc	0f 84 84 28 00
	00		 je	 $LN657@obj2ast_st@2

; 3696 :         res = obj2ast_int(tmp, &col_offset, arena);

  00102	48 8d 55 67	 lea	 rdx, QWORD PTR col_offset$[rbp-89]
  00106	48 8b c8	 mov	 rcx, rax
  00109	e8 00 00 00 00	 call	 obj2ast_int

; 3697 :         if (res != 0) goto failed;

  0010e	85 c0		 test	 eax, eax
  00110	0f 85 a7 01 00
	00		 jne	 $failed$24670

; 3698 :         Py_CLEAR(tmp);

  00116	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0011d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  00124	4c 8b cb	 mov	 r9, rbx
  00127	41 b8 72 0e 00
	00		 mov	 r8d, 3698		; 00000e72H
  0012d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00135	e8 00 00 00 00	 call	 _PyParallel_Guard
  0013a	33 d2		 xor	 edx, edx
  0013c	48 89 55 37	 mov	 QWORD PTR msg$1$[rbp-89], rdx
  00140	85 c0		 test	 eax, eax
  00142	75 0a		 jne	 SHORT $LN559@obj2ast_st@2
  00144	48 8b cb	 mov	 rcx, rbx
  00147	8b da		 mov	 ebx, edx
  00149	e8 00 00 00 00	 call	 _Py_DecRef
$LN559@obj2ast_st@2:

; 3702 :     }
; 3703 :     isinstance = PyObject_IsInstance(obj, (PyObject*)FunctionDef_type);

  0014e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR FunctionDef_type
  00155	48 8b cf	 mov	 rcx, rdi
  00158	e8 00 00 00 00	 call	 PyObject_IsInstance

; 3704 :     if (isinstance == -1) {

  0015d	83 f8 ff	 cmp	 eax, -1

; 3705 :         return 1;

  00160	0f 84 20 28 00
	00		 je	 $LN657@obj2ast_st@2

; 3706 :     }
; 3707 :     if (isinstance) {
; 3708 :         identifier name;
; 3709 :         arguments_ty args;
; 3710 :         asdl_seq* body;
; 3711 :         asdl_seq* decorator_list;
; 3712 :         expr_ty returns;
; 3713 : 
; 3714 :         if (_PyObject_HasAttrId(obj, &PyId_name)) {

  00166	48 8b cf	 mov	 rcx, rdi
  00169	85 c0		 test	 eax, eax
  0016b	0f 84 d7 03 00
	00		 je	 $LN554@obj2ast_st@2
  00171	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_name
  00176	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  0017a	48 8b d3	 mov	 rdx, rbx
  0017d	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00182	85 c0		 test	 eax, eax
  00184	0f 84 b2 03 00
	00		 je	 $LN553@obj2ast_st@2

; 3715 :             int res;
; 3716 :             tmp = _PyObject_GetAttrId(obj, &PyId_name);

  0018a	48 8b d3	 mov	 rdx, rbx
  0018d	48 8b cf	 mov	 rcx, rdi
  00190	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00195	48 8b d8	 mov	 rbx, rax

; 3717 :             if (tmp == NULL) goto failed;

  00198	48 85 c0	 test	 rax, rax
  0019b	0f 84 e5 27 00
	00		 je	 $LN657@obj2ast_st@2

; 3718 :             res = obj2ast_identifier(tmp, &name, arena);

  001a1	48 8d 55 2f	 lea	 rdx, QWORD PTR name$24701[rbp-89]
  001a5	4c 8b c6	 mov	 r8, rsi
  001a8	48 8b c8	 mov	 rcx, rax
  001ab	e8 00 00 00 00	 call	 obj2ast_identifier

; 3719 :             if (res != 0) goto failed;

  001b0	85 c0		 test	 eax, eax
  001b2	0f 85 05 01 00
	00		 jne	 $failed$24670

; 3720 :             Py_CLEAR(tmp);

  001b8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  001bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  001c6	4c 8b cb	 mov	 r9, rbx
  001c9	41 b8 88 0e 00
	00		 mov	 r8d, 3720		; 00000e88H
  001cf	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001d7	e8 00 00 00 00	 call	 _PyParallel_Guard
  001dc	85 c0		 test	 eax, eax
  001de	75 08		 jne	 SHORT $LN549@obj2ast_st@2
  001e0	48 8b cb	 mov	 rcx, rbx
  001e3	e8 00 00 00 00	 call	 _Py_DecRef
$LN549@obj2ast_st@2:

; 3724 :         }
; 3725 :         if (_PyObject_HasAttrId(obj, &PyId_args)) {

  001e8	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_args
  001ed	48 8b cf	 mov	 rcx, rdi
  001f0	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  001f4	48 8b d3	 mov	 rdx, rbx
  001f7	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  001fc	85 c0		 test	 eax, eax
  001fe	0f 84 2c 03 00
	00		 je	 $LN545@obj2ast_st@2

; 3726 :             int res;
; 3727 :             tmp = _PyObject_GetAttrId(obj, &PyId_args);

  00204	48 8b d3	 mov	 rdx, rbx
  00207	48 8b cf	 mov	 rcx, rdi
  0020a	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0020f	48 8b d8	 mov	 rbx, rax

; 3728 :             if (tmp == NULL) goto failed;

  00212	48 85 c0	 test	 rax, rax
  00215	0f 84 6b 27 00
	00		 je	 $LN657@obj2ast_st@2

; 3729 :             res = obj2ast_arguments(tmp, &args, arena);

  0021b	48 8d 55 ff	 lea	 rdx, QWORD PTR args$24702[rbp-89]
  0021f	4c 8b c6	 mov	 r8, rsi
  00222	48 8b c8	 mov	 rcx, rax
  00225	e8 00 00 00 00	 call	 obj2ast_arguments

; 3730 :             if (res != 0) goto failed;

  0022a	85 c0		 test	 eax, eax
  0022c	0f 85 8b 00 00
	00		 jne	 $failed$24670

; 3731 :             Py_CLEAR(tmp);

  00232	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00239	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  00240	4c 8b cb	 mov	 r9, rbx
  00243	41 b8 93 0e 00
	00		 mov	 r8d, 3731		; 00000e93H
  00249	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00251	e8 00 00 00 00	 call	 _PyParallel_Guard
  00256	85 c0		 test	 eax, eax
  00258	75 08		 jne	 SHORT $LN541@obj2ast_st@2
  0025a	48 8b cb	 mov	 rcx, rbx
  0025d	e8 00 00 00 00	 call	 _Py_DecRef
$LN541@obj2ast_st@2:

; 3735 :         }
; 3736 :         if (_PyObject_HasAttrId(obj, &PyId_body)) {

  00262	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_body
  00267	48 8b cf	 mov	 rcx, rdi
  0026a	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  0026e	48 8b d3	 mov	 rdx, rbx
  00271	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00276	85 c0		 test	 eax, eax
  00278	0f 84 a6 02 00
	00		 je	 $LN537@obj2ast_st@2

; 3737 :             int res;
; 3738 :             Py_ssize_t len;
; 3739 :             Py_ssize_t i;
; 3740 :             tmp = _PyObject_GetAttrId(obj, &PyId_body);

  0027e	48 8b d3	 mov	 rdx, rbx
  00281	48 8b cf	 mov	 rcx, rdi
  00284	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00289	48 8b d8	 mov	 rbx, rax

; 3741 :             if (tmp == NULL) goto failed;

  0028c	48 85 c0	 test	 rax, rax
  0028f	0f 84 f1 26 00
	00		 je	 $LN657@obj2ast_st@2

; 3742 :             if (!PyList_Check(tmp)) {

  00295	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  00299	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  002a4	75 2d		 jne	 SHORT $LN535@obj2ast_st@2

; 3743 :                 PyErr_Format(PyExc_TypeError, "FunctionDef field \"body\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  002a6	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  002aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DG@NOJACNBG@FunctionDef?5field?5?$CCbody?$CC?5must?5be@
$LN659@obj2ast_st@2:

; 3767 :                 PyErr_Format(PyExc_TypeError, "FunctionDef field \"decorator_list\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  002b1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  002b8	e8 00 00 00 00	 call	 PyErr_Format
$failed$24670:

; 4773 :     failed:
; 4774 :     Py_XDECREF(tmp);

  002bd	48 85 db	 test	 rbx, rbx
  002c0	0f 84 c0 26 00
	00		 je	 $LN657@obj2ast_st@2
  002c6	48 8b cb	 mov	 rcx, rbx
  002c9	e8 00 00 00 00	 call	 _Py_DecRef

; 4775 :     return 1;

  002ce	e9 b3 26 00 00	 jmp	 $LN657@obj2ast_st@2
$LN535@obj2ast_st@2:

; 3744 :                 goto failed;
; 3745 :             }
; 3746 :             len = PyList_GET_SIZE(tmp);

  002d3	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 3747 :             body = asdl_seq_new(len, arena);

  002d7	48 8b d6	 mov	 rdx, rsi
  002da	48 8b c8	 mov	 rcx, rax
  002dd	48 89 45 3f	 mov	 QWORD PTR len$1$[rbp-89], rax
  002e1	e8 00 00 00 00	 call	 asdl_seq_new
  002e6	48 89 45 17	 mov	 QWORD PTR body$1$[rbp-89], rax

; 3748 :             if (body == NULL) goto failed;

  002ea	48 85 c0	 test	 rax, rax
  002ed	74 ce		 je	 SHORT $failed$24670

; 3749 :             for (i = 0; i < len; i++) {

  002ef	45 33 c9	 xor	 r9d, r9d
  002f2	4c 89 4d 27	 mov	 QWORD PTR i$1$[rbp-89], r9
  002f6	4c 39 4d 3f	 cmp	 QWORD PTR len$1$[rbp-89], r9
  002fa	7e 3a		 jle	 SHORT $LN529@obj2ast_st@2
  002fc	0f 1f 40 00	 npad	 4
$LL533@obj2ast_st@2:

; 3750 :                 stmt_ty value;
; 3751 :                 res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);

  00300	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00304	48 8d 55 f7	 lea	 rdx, QWORD PTR value$24751[rbp-89]
  00308	4c 8b c6	 mov	 r8, rsi
  0030b	4a 8b 0c c9	 mov	 rcx, QWORD PTR [rcx+r9*8]
  0030f	e8 00 00 00 00	 call	 obj2ast_stmt

; 3752 :                 if (res != 0) goto failed;

  00314	85 c0		 test	 eax, eax
  00316	75 a5		 jne	 SHORT $failed$24670

; 3753 :                 asdl_seq_SET(body, i, value);

  00318	4c 8b 4d 27	 mov	 r9, QWORD PTR i$1$[rbp-89]
  0031c	48 8b 4d 17	 mov	 rcx, QWORD PTR body$1$[rbp-89]
  00320	48 8b 45 f7	 mov	 rax, QWORD PTR value$24751[rbp-89]
  00324	4a 89 44 c9 08	 mov	 QWORD PTR [rcx+r9*8+8], rax
  00329	49 ff c1	 inc	 r9
  0032c	4c 89 4d 27	 mov	 QWORD PTR i$1$[rbp-89], r9
  00330	4c 3b 4d 3f	 cmp	 r9, QWORD PTR len$1$[rbp-89]
  00334	7c ca		 jl	 SHORT $LL533@obj2ast_st@2
$LN529@obj2ast_st@2:

; 3754 :             }
; 3755 :             Py_CLEAR(tmp);

  00336	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0033d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  00344	4c 8b cb	 mov	 r9, rbx
  00347	41 b8 ab 0e 00
	00		 mov	 r8d, 3755		; 00000eabH
  0034d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00355	e8 00 00 00 00	 call	 _PyParallel_Guard
  0035a	85 c0		 test	 eax, eax
  0035c	75 08		 jne	 SHORT $LN528@obj2ast_st@2
  0035e	48 8b cb	 mov	 rcx, rbx
  00361	e8 00 00 00 00	 call	 _Py_DecRef
$LN528@obj2ast_st@2:

; 3759 :         }
; 3760 :         if (_PyObject_HasAttrId(obj, &PyId_decorator_list)) {

  00366	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_decorator_list
  0036b	48 8b cf	 mov	 rcx, rdi
  0036e	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  00372	48 8b d3	 mov	 rdx, rbx
  00375	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0037a	85 c0		 test	 eax, eax
  0037c	0f 84 96 01 00
	00		 je	 $LN524@obj2ast_st@2

; 3761 :             int res;
; 3762 :             Py_ssize_t len;
; 3763 :             Py_ssize_t i;
; 3764 :             tmp = _PyObject_GetAttrId(obj, &PyId_decorator_list);

  00382	48 8b d3	 mov	 rdx, rbx
  00385	48 8b cf	 mov	 rcx, rdi
  00388	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0038d	48 8b d8	 mov	 rbx, rax

; 3765 :             if (tmp == NULL) goto failed;

  00390	48 85 c0	 test	 rax, rax
  00393	0f 84 ed 25 00
	00		 je	 $LN657@obj2ast_st@2

; 3766 :             if (!PyList_Check(tmp)) {

  00399	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  0039d	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  003a8	75 10		 jne	 SHORT $LN522@obj2ast_st@2

; 3767 :                 PyErr_Format(PyExc_TypeError, "FunctionDef field \"decorator_list\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  003aa	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  003ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EA@GALCHNKH@FunctionDef?5field?5?$CCdecorator_lis@

; 3768 :                 goto failed;

  003b5	e9 f7 fe ff ff	 jmp	 $LN659@obj2ast_st@2
$LN522@obj2ast_st@2:

; 3769 :             }
; 3770 :             len = PyList_GET_SIZE(tmp);

  003ba	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 3771 :             decorator_list = asdl_seq_new(len, arena);

  003be	48 8b d6	 mov	 rdx, rsi
  003c1	48 8b c8	 mov	 rcx, rax
  003c4	48 89 45 27	 mov	 QWORD PTR len$1$[rbp-89], rax
  003c8	e8 00 00 00 00	 call	 asdl_seq_new
  003cd	48 89 45 1f	 mov	 QWORD PTR decorator_list$1$[rbp-89], rax

; 3772 :             if (decorator_list == NULL) goto failed;

  003d1	48 85 c0	 test	 rax, rax
  003d4	0f 84 e3 fe ff
	ff		 je	 $failed$24670

; 3773 :             for (i = 0; i < len; i++) {

  003da	45 33 c9	 xor	 r9d, r9d
  003dd	4c 89 4d 3f	 mov	 QWORD PTR i$1$[rbp-89], r9
  003e1	4c 39 4d 27	 cmp	 QWORD PTR len$1$[rbp-89], r9
  003e5	7e 43		 jle	 SHORT $LN516@obj2ast_st@2
  003e7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL520@obj2ast_st@2:

; 3774 :                 expr_ty value;
; 3775 :                 res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);

  003f0	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  003f4	48 8d 55 f7	 lea	 rdx, QWORD PTR value$24779[rbp-89]
  003f8	4c 8b c6	 mov	 r8, rsi
  003fb	4a 8b 0c c9	 mov	 rcx, QWORD PTR [rcx+r9*8]
  003ff	e8 00 00 00 00	 call	 obj2ast_expr

; 3776 :                 if (res != 0) goto failed;

  00404	85 c0		 test	 eax, eax
  00406	0f 85 b1 fe ff
	ff		 jne	 $failed$24670

; 3777 :                 asdl_seq_SET(decorator_list, i, value);

  0040c	4c 8b 4d 3f	 mov	 r9, QWORD PTR i$1$[rbp-89]
  00410	48 8b 4d 1f	 mov	 rcx, QWORD PTR decorator_list$1$[rbp-89]
  00414	48 8b 45 f7	 mov	 rax, QWORD PTR value$24779[rbp-89]
  00418	4a 89 44 c9 08	 mov	 QWORD PTR [rcx+r9*8+8], rax
  0041d	49 ff c1	 inc	 r9
  00420	4c 89 4d 3f	 mov	 QWORD PTR i$1$[rbp-89], r9
  00424	4c 3b 4d 27	 cmp	 r9, QWORD PTR len$1$[rbp-89]
  00428	7c c6		 jl	 SHORT $LL520@obj2ast_st@2
$LN516@obj2ast_st@2:

; 3778 :             }
; 3779 :             Py_CLEAR(tmp);

  0042a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00431	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  00438	4c 8b cb	 mov	 r9, rbx
  0043b	41 b8 c3 0e 00
	00		 mov	 r8d, 3779		; 00000ec3H
  00441	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00449	e8 00 00 00 00	 call	 _PyParallel_Guard
  0044e	85 c0		 test	 eax, eax
  00450	75 0a		 jne	 SHORT $LN515@obj2ast_st@2
  00452	48 8b cb	 mov	 rcx, rbx
  00455	33 db		 xor	 ebx, ebx
  00457	e8 00 00 00 00	 call	 _Py_DecRef
$LN515@obj2ast_st@2:

; 3783 :         }
; 3784 :         if (_PyObject_HasAttrId(obj, &PyId_returns)) {

  0045c	48 8b 55 07	 mov	 rdx, QWORD PTR tv4777[rbp-89]
  00460	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:PyId_returns
  00465	48 03 d1	 add	 rdx, rcx
  00468	48 8b cf	 mov	 rcx, rdi
  0046b	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00470	85 c0		 test	 eax, eax
  00472	74 6e		 je	 SHORT $LN511@obj2ast_st@2

; 3785 :             int res;
; 3786 :             tmp = _PyObject_GetAttrId(obj, &PyId_returns);

  00474	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_returns
  00479	48 8b cf	 mov	 rcx, rdi
  0047c	48 03 55 07	 add	 rdx, QWORD PTR tv4777[rbp-89]
  00480	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00485	48 8b d8	 mov	 rbx, rax

; 3787 :             if (tmp == NULL) goto failed;

  00488	48 85 c0	 test	 rax, rax
  0048b	0f 84 f5 24 00
	00		 je	 $LN657@obj2ast_st@2

; 3788 :             res = obj2ast_expr(tmp, &returns, arena);

  00491	48 8d 55 3f	 lea	 rdx, QWORD PTR returns$24705[rbp-89]
  00495	4c 8b c6	 mov	 r8, rsi
  00498	48 8b c8	 mov	 rcx, rax
  0049b	e8 00 00 00 00	 call	 obj2ast_expr

; 3789 :             if (res != 0) goto failed;

  004a0	85 c0		 test	 eax, eax
  004a2	0f 85 15 fe ff
	ff		 jne	 $failed$24670

; 3790 :             Py_CLEAR(tmp);

  004a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  004af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  004b6	4c 8b cb	 mov	 r9, rbx
  004b9	41 b8 ce 0e 00
	00		 mov	 r8d, 3790		; 00000eceH
  004bf	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  004c7	e8 00 00 00 00	 call	 _PyParallel_Guard
  004cc	85 c0		 test	 eax, eax
  004ce	75 0a		 jne	 SHORT $LN647@obj2ast_st@2
  004d0	48 8b cb	 mov	 rcx, rbx
  004d3	33 db		 xor	 ebx, ebx
  004d5	e8 00 00 00 00	 call	 _Py_DecRef
$LN647@obj2ast_st@2:

; 3791 :         } else {

  004da	48 8b 45 3f	 mov	 rax, QWORD PTR returns$24705[rbp-89]
  004de	48 89 45 37	 mov	 QWORD PTR msg$1$[rbp-89], rax
$LN511@obj2ast_st@2:

; 3792 :             returns = NULL;
; 3793 :         }
; 3794 :         *out = FunctionDef(name, args, body, decorator_list, returns, lineno,
; 3795 :                            col_offset, arena);

  004e2	8b 45 67	 mov	 eax, DWORD PTR col_offset$[rbp-89]
  004e5	4c 8b 4d 1f	 mov	 r9, QWORD PTR decorator_list$1$[rbp-89]
  004e9	4c 8b 45 17	 mov	 r8, QWORD PTR body$1$[rbp-89]
  004ed	48 8b 55 ff	 mov	 rdx, QWORD PTR args$24702[rbp-89]
  004f1	48 8b 4d 2f	 mov	 rcx, QWORD PTR name$24701[rbp-89]
  004f5	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  004fa	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  004fe	8b 45 7f	 mov	 eax, DWORD PTR lineno$[rbp-89]
  00501	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00505	48 8b 45 37	 mov	 rax, QWORD PTR msg$1$[rbp-89]
  00509	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0050e	e8 00 00 00 00	 call	 _Py_FunctionDef

; 3796 :         if (*out == NULL) goto failed;
; 3797 :         return 0;

  00513	e9 2f 24 00 00	 jmp	 $LN660@obj2ast_st@2
$LN524@obj2ast_st@2:

; 3780 :         } else {
; 3781 :             PyErr_SetString(PyExc_TypeError, "required field \"decorator_list\" missing from FunctionDef");

  00518	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DJ@FGGBKHJL@required?5field?5?$CCdecorator_list?$CC?5@

; 3782 :             return 1;

  0051f	e9 56 24 00 00	 jmp	 $LN658@obj2ast_st@2
$LN537@obj2ast_st@2:

; 3756 :         } else {
; 3757 :             PyErr_SetString(PyExc_TypeError, "required field \"body\" missing from FunctionDef");

  00524	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@NFFHEEMP@required?5field?5?$CCbody?$CC?5missing?5fr@

; 3758 :             return 1;

  0052b	e9 4a 24 00 00	 jmp	 $LN658@obj2ast_st@2
$LN545@obj2ast_st@2:

; 3732 :         } else {
; 3733 :             PyErr_SetString(PyExc_TypeError, "required field \"args\" missing from FunctionDef");

  00530	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@OIMKEJCJ@required?5field?5?$CCargs?$CC?5missing?5fr@

; 3734 :             return 1;

  00537	e9 3e 24 00 00	 jmp	 $LN658@obj2ast_st@2
$LN553@obj2ast_st@2:

; 3721 :         } else {
; 3722 :             PyErr_SetString(PyExc_TypeError, "required field \"name\" missing from FunctionDef");

  0053c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@PFDPCEPI@required?5field?5?$CCname?$CC?5missing?5fr@

; 3723 :             return 1;

  00543	e9 32 24 00 00	 jmp	 $LN658@obj2ast_st@2
$LN554@obj2ast_st@2:

; 3798 :     }
; 3799 :     isinstance = PyObject_IsInstance(obj, (PyObject*)ClassDef_type);

  00548	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ClassDef_type
  0054f	e8 00 00 00 00	 call	 PyObject_IsInstance

; 3800 :     if (isinstance == -1) {

  00554	83 f8 ff	 cmp	 eax, -1

; 3801 :         return 1;

  00557	0f 84 29 24 00
	00		 je	 $LN657@obj2ast_st@2

; 3802 :     }
; 3803 :     if (isinstance) {
; 3804 :         identifier name;
; 3805 :         asdl_seq* bases;
; 3806 :         asdl_seq* keywords;
; 3807 :         expr_ty starargs;
; 3808 :         expr_ty kwargs;
; 3809 :         asdl_seq* body;
; 3810 :         asdl_seq* decorator_list;
; 3811 : 
; 3812 :         if (_PyObject_HasAttrId(obj, &PyId_name)) {

  0055d	48 8b cf	 mov	 rcx, rdi
  00560	85 c0		 test	 eax, eax
  00562	0f 84 bf 05 00
	00		 je	 $LN501@obj2ast_st@2
  00568	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_name
  0056d	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  00571	48 8b d3	 mov	 rdx, rbx
  00574	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00579	85 c0		 test	 eax, eax
  0057b	0f 84 9a 05 00
	00		 je	 $LN500@obj2ast_st@2

; 3813 :             int res;
; 3814 :             tmp = _PyObject_GetAttrId(obj, &PyId_name);

  00581	48 8b d3	 mov	 rdx, rbx
  00584	48 8b cf	 mov	 rcx, rdi
  00587	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0058c	48 8b d8	 mov	 rbx, rax

; 3815 :             if (tmp == NULL) goto failed;

  0058f	48 85 c0	 test	 rax, rax
  00592	0f 84 ee 23 00
	00		 je	 $LN657@obj2ast_st@2

; 3816 :             res = obj2ast_identifier(tmp, &name, arena);

  00598	48 8d 55 0f	 lea	 rdx, QWORD PTR name$24812[rbp-89]
  0059c	4c 8b c6	 mov	 r8, rsi
  0059f	48 8b c8	 mov	 rcx, rax
  005a2	e8 00 00 00 00	 call	 obj2ast_identifier

; 3817 :             if (res != 0) goto failed;

  005a7	85 c0		 test	 eax, eax
  005a9	0f 85 0e fd ff
	ff		 jne	 $failed$24670

; 3818 :             Py_CLEAR(tmp);

  005af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  005b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  005bd	4c 8b cb	 mov	 r9, rbx
  005c0	41 b8 ea 0e 00
	00		 mov	 r8d, 3818		; 00000eeaH
  005c6	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  005ce	e8 00 00 00 00	 call	 _PyParallel_Guard
  005d3	85 c0		 test	 eax, eax
  005d5	75 08		 jne	 SHORT $LN496@obj2ast_st@2
  005d7	48 8b cb	 mov	 rcx, rbx
  005da	e8 00 00 00 00	 call	 _Py_DecRef
$LN496@obj2ast_st@2:

; 3822 :         }
; 3823 :         if (_PyObject_HasAttrId(obj, &PyId_bases)) {

  005df	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_bases
  005e4	48 8b cf	 mov	 rcx, rdi
  005e7	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  005eb	48 8b d3	 mov	 rdx, rbx
  005ee	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  005f3	85 c0		 test	 eax, eax
  005f5	0f 84 14 05 00
	00		 je	 $LN492@obj2ast_st@2

; 3824 :             int res;
; 3825 :             Py_ssize_t len;
; 3826 :             Py_ssize_t i;
; 3827 :             tmp = _PyObject_GetAttrId(obj, &PyId_bases);

  005fb	48 8b d3	 mov	 rdx, rbx
  005fe	48 8b cf	 mov	 rcx, rdi
  00601	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00606	48 8b d8	 mov	 rbx, rax

; 3828 :             if (tmp == NULL) goto failed;

  00609	48 85 c0	 test	 rax, rax
  0060c	0f 84 74 23 00
	00		 je	 $LN657@obj2ast_st@2

; 3829 :             if (!PyList_Check(tmp)) {

  00612	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  00616	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  00621	75 10		 jne	 SHORT $LN490@obj2ast_st@2

; 3830 :                 PyErr_Format(PyExc_TypeError, "ClassDef field \"bases\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  00623	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00627	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@MHEBOGJH@ClassDef?5field?5?$CCbases?$CC?5must?5be?5a@

; 3831 :                 goto failed;

  0062e	e9 7e fc ff ff	 jmp	 $LN659@obj2ast_st@2
$LN490@obj2ast_st@2:

; 3832 :             }
; 3833 :             len = PyList_GET_SIZE(tmp);

  00633	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 3834 :             bases = asdl_seq_new(len, arena);

  00637	48 8b d6	 mov	 rdx, rsi
  0063a	48 8b c8	 mov	 rcx, rax
  0063d	48 89 45 1f	 mov	 QWORD PTR len$1$[rbp-89], rax
  00641	e8 00 00 00 00	 call	 asdl_seq_new
  00646	48 89 45 f7	 mov	 QWORD PTR bases$1$[rbp-89], rax

; 3835 :             if (bases == NULL) goto failed;

  0064a	48 85 c0	 test	 rax, rax
  0064d	0f 84 6a fc ff
	ff		 je	 $failed$24670

; 3836 :             for (i = 0; i < len; i++) {

  00653	45 33 c9	 xor	 r9d, r9d
  00656	4c 89 4d 17	 mov	 QWORD PTR i$1$[rbp-89], r9
  0065a	4c 39 4d 1f	 cmp	 QWORD PTR len$1$[rbp-89], r9
  0065e	7e 3a		 jle	 SHORT $LN484@obj2ast_st@2
$LL488@obj2ast_st@2:

; 3837 :                 expr_ty value;
; 3838 :                 res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);

  00660	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00664	48 8d 55 2f	 lea	 rdx, QWORD PTR value$24849[rbp-89]
  00668	4c 8b c6	 mov	 r8, rsi
  0066b	4a 8b 0c c9	 mov	 rcx, QWORD PTR [rcx+r9*8]
  0066f	e8 00 00 00 00	 call	 obj2ast_expr

; 3839 :                 if (res != 0) goto failed;

  00674	85 c0		 test	 eax, eax
  00676	0f 85 41 fc ff
	ff		 jne	 $failed$24670

; 3840 :                 asdl_seq_SET(bases, i, value);

  0067c	4c 8b 4d 17	 mov	 r9, QWORD PTR i$1$[rbp-89]
  00680	48 8b 4d f7	 mov	 rcx, QWORD PTR bases$1$[rbp-89]
  00684	48 8b 45 2f	 mov	 rax, QWORD PTR value$24849[rbp-89]
  00688	4a 89 44 c9 08	 mov	 QWORD PTR [rcx+r9*8+8], rax
  0068d	49 ff c1	 inc	 r9
  00690	4c 89 4d 17	 mov	 QWORD PTR i$1$[rbp-89], r9
  00694	4c 3b 4d 1f	 cmp	 r9, QWORD PTR len$1$[rbp-89]
  00698	7c c6		 jl	 SHORT $LL488@obj2ast_st@2
$LN484@obj2ast_st@2:

; 3841 :             }
; 3842 :             Py_CLEAR(tmp);

  0069a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  006a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  006a8	4c 8b cb	 mov	 r9, rbx
  006ab	41 b8 02 0f 00
	00		 mov	 r8d, 3842		; 00000f02H
  006b1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  006b9	e8 00 00 00 00	 call	 _PyParallel_Guard
  006be	85 c0		 test	 eax, eax
  006c0	75 08		 jne	 SHORT $LN483@obj2ast_st@2
  006c2	48 8b cb	 mov	 rcx, rbx
  006c5	e8 00 00 00 00	 call	 _Py_DecRef
$LN483@obj2ast_st@2:

; 3846 :         }
; 3847 :         if (_PyObject_HasAttrId(obj, &PyId_keywords)) {

  006ca	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_keywords
  006cf	48 8b cf	 mov	 rcx, rdi
  006d2	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  006d6	48 8b d3	 mov	 rdx, rbx
  006d9	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  006de	85 c0		 test	 eax, eax
  006e0	0f 84 1d 04 00
	00		 je	 $LN479@obj2ast_st@2

; 3848 :             int res;
; 3849 :             Py_ssize_t len;
; 3850 :             Py_ssize_t i;
; 3851 :             tmp = _PyObject_GetAttrId(obj, &PyId_keywords);

  006e6	48 8b d3	 mov	 rdx, rbx
  006e9	48 8b cf	 mov	 rcx, rdi
  006ec	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  006f1	48 8b d8	 mov	 rbx, rax

; 3852 :             if (tmp == NULL) goto failed;

  006f4	48 85 c0	 test	 rax, rax
  006f7	0f 84 89 22 00
	00		 je	 $LN657@obj2ast_st@2

; 3853 :             if (!PyList_Check(tmp)) {

  006fd	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  00701	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  0070c	75 10		 jne	 SHORT $LN477@obj2ast_st@2

; 3854 :                 PyErr_Format(PyExc_TypeError, "ClassDef field \"keywords\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  0070e	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00712	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DH@FAJFAAEL@ClassDef?5field?5?$CCkeywords?$CC?5must?5b@

; 3855 :                 goto failed;

  00719	e9 93 fb ff ff	 jmp	 $LN659@obj2ast_st@2
$LN477@obj2ast_st@2:

; 3856 :             }
; 3857 :             len = PyList_GET_SIZE(tmp);

  0071e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 3858 :             keywords = asdl_seq_new(len, arena);

  00722	48 8b d6	 mov	 rdx, rsi
  00725	48 8b c8	 mov	 rcx, rax
  00728	48 89 45 1f	 mov	 QWORD PTR len$1$[rbp-89], rax
  0072c	e8 00 00 00 00	 call	 asdl_seq_new
  00731	48 89 45 ff	 mov	 QWORD PTR keywords$1$[rbp-89], rax

; 3859 :             if (keywords == NULL) goto failed;

  00735	48 85 c0	 test	 rax, rax
  00738	0f 84 7f fb ff
	ff		 je	 $failed$24670

; 3860 :             for (i = 0; i < len; i++) {

  0073e	45 33 c9	 xor	 r9d, r9d
  00741	4c 89 4d 17	 mov	 QWORD PTR i$1$[rbp-89], r9
  00745	4c 39 4d 1f	 cmp	 QWORD PTR len$1$[rbp-89], r9
  00749	7e 3f		 jle	 SHORT $LN471@obj2ast_st@2
  0074b	0f 1f 44 00 00	 npad	 5
$LL475@obj2ast_st@2:

; 3861 :                 keyword_ty value;
; 3862 :                 res = obj2ast_keyword(PyList_GET_ITEM(tmp, i), &value, arena);

  00750	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00754	48 8d 55 2f	 lea	 rdx, QWORD PTR value$24877[rbp-89]
  00758	4c 8b c6	 mov	 r8, rsi
  0075b	4a 8b 0c c9	 mov	 rcx, QWORD PTR [rcx+r9*8]
  0075f	e8 00 00 00 00	 call	 obj2ast_keyword

; 3863 :                 if (res != 0) goto failed;

  00764	85 c0		 test	 eax, eax
  00766	0f 85 51 fb ff
	ff		 jne	 $failed$24670

; 3864 :                 asdl_seq_SET(keywords, i, value);

  0076c	4c 8b 4d 17	 mov	 r9, QWORD PTR i$1$[rbp-89]
  00770	48 8b 4d ff	 mov	 rcx, QWORD PTR keywords$1$[rbp-89]
  00774	48 8b 45 2f	 mov	 rax, QWORD PTR value$24877[rbp-89]
  00778	4a 89 44 c9 08	 mov	 QWORD PTR [rcx+r9*8+8], rax
  0077d	49 ff c1	 inc	 r9
  00780	4c 89 4d 17	 mov	 QWORD PTR i$1$[rbp-89], r9
  00784	4c 3b 4d 1f	 cmp	 r9, QWORD PTR len$1$[rbp-89]
  00788	7c c6		 jl	 SHORT $LL475@obj2ast_st@2
$LN471@obj2ast_st@2:

; 3865 :             }
; 3866 :             Py_CLEAR(tmp);

  0078a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00791	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  00798	4c 8b cb	 mov	 r9, rbx
  0079b	41 b8 1a 0f 00
	00		 mov	 r8d, 3866		; 00000f1aH
  007a1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  007a9	e8 00 00 00 00	 call	 _PyParallel_Guard
  007ae	85 c0		 test	 eax, eax
  007b0	75 08		 jne	 SHORT $LN470@obj2ast_st@2
  007b2	48 8b cb	 mov	 rcx, rbx
  007b5	e8 00 00 00 00	 call	 _Py_DecRef
$LN470@obj2ast_st@2:

; 3870 :         }
; 3871 :         if (_PyObject_HasAttrId(obj, &PyId_starargs)) {

  007ba	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_starargs
  007bf	48 8b cf	 mov	 rcx, rdi
  007c2	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  007c6	48 8b d3	 mov	 rdx, rbx
  007c9	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  007ce	85 c0		 test	 eax, eax
  007d0	74 68		 je	 SHORT $LN466@obj2ast_st@2

; 3872 :             int res;
; 3873 :             tmp = _PyObject_GetAttrId(obj, &PyId_starargs);

  007d2	48 8b d3	 mov	 rdx, rbx
  007d5	48 8b cf	 mov	 rcx, rdi
  007d8	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  007dd	48 8b d8	 mov	 rbx, rax

; 3874 :             if (tmp == NULL) goto failed;

  007e0	48 85 c0	 test	 rax, rax
  007e3	0f 84 9d 21 00
	00		 je	 $LN657@obj2ast_st@2

; 3875 :             res = obj2ast_expr(tmp, &starargs, arena);

  007e9	48 8d 55 17	 lea	 rdx, QWORD PTR starargs$24815[rbp-89]
  007ed	4c 8b c6	 mov	 r8, rsi
  007f0	48 8b c8	 mov	 rcx, rax
  007f3	e8 00 00 00 00	 call	 obj2ast_expr

; 3876 :             if (res != 0) goto failed;

  007f8	85 c0		 test	 eax, eax
  007fa	0f 85 bd fa ff
	ff		 jne	 $failed$24670

; 3877 :             Py_CLEAR(tmp);

  00800	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00807	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  0080e	4c 8b cb	 mov	 r9, rbx
  00811	41 b8 25 0f 00
	00		 mov	 r8d, 3877		; 00000f25H
  00817	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0081f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00824	85 c0		 test	 eax, eax
  00826	75 08		 jne	 SHORT $LN648@obj2ast_st@2
  00828	48 8b cb	 mov	 rcx, rbx
  0082b	e8 00 00 00 00	 call	 _Py_DecRef
$LN648@obj2ast_st@2:

; 3878 :         } else {

  00830	48 8b 45 17	 mov	 rax, QWORD PTR starargs$24815[rbp-89]
  00834	48 89 45 27	 mov	 QWORD PTR starargs$1$[rbp-89], rax
  00838	eb 08		 jmp	 SHORT $LN459@obj2ast_st@2
$LN466@obj2ast_st@2:

; 3879 :             starargs = NULL;

  0083a	48 c7 45 27 00
	00 00 00	 mov	 QWORD PTR starargs$1$[rbp-89], 0
$LN459@obj2ast_st@2:

; 3880 :         }
; 3881 :         if (_PyObject_HasAttrId(obj, &PyId_kwargs)) {

  00842	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_kwargs
  00847	48 8b cf	 mov	 rcx, rdi
  0084a	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  0084e	48 8b d3	 mov	 rdx, rbx
  00851	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00856	85 c0		 test	 eax, eax
  00858	74 68		 je	 SHORT $LN458@obj2ast_st@2

; 3882 :             int res;
; 3883 :             tmp = _PyObject_GetAttrId(obj, &PyId_kwargs);

  0085a	48 8b d3	 mov	 rdx, rbx
  0085d	48 8b cf	 mov	 rcx, rdi
  00860	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00865	48 8b d8	 mov	 rbx, rax

; 3884 :             if (tmp == NULL) goto failed;

  00868	48 85 c0	 test	 rax, rax
  0086b	0f 84 15 21 00
	00		 je	 $LN657@obj2ast_st@2

; 3885 :             res = obj2ast_expr(tmp, &kwargs, arena);

  00871	48 8d 55 17	 lea	 rdx, QWORD PTR kwargs$24816[rbp-89]
  00875	4c 8b c6	 mov	 r8, rsi
  00878	48 8b c8	 mov	 rcx, rax
  0087b	e8 00 00 00 00	 call	 obj2ast_expr

; 3886 :             if (res != 0) goto failed;

  00880	85 c0		 test	 eax, eax
  00882	0f 85 35 fa ff
	ff		 jne	 $failed$24670

; 3887 :             Py_CLEAR(tmp);

  00888	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0088f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  00896	4c 8b cb	 mov	 r9, rbx
  00899	41 b8 2f 0f 00
	00		 mov	 r8d, 3887		; 00000f2fH
  0089f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  008a7	e8 00 00 00 00	 call	 _PyParallel_Guard
  008ac	85 c0		 test	 eax, eax
  008ae	75 08		 jne	 SHORT $LN649@obj2ast_st@2
  008b0	48 8b cb	 mov	 rcx, rbx
  008b3	e8 00 00 00 00	 call	 _Py_DecRef
$LN649@obj2ast_st@2:

; 3888 :         } else {

  008b8	48 8b 45 17	 mov	 rax, QWORD PTR kwargs$24816[rbp-89]
  008bc	48 89 45 37	 mov	 QWORD PTR kwargs$1$[rbp-89], rax
  008c0	eb 08		 jmp	 SHORT $LN451@obj2ast_st@2
$LN458@obj2ast_st@2:

; 3889 :             kwargs = NULL;

  008c2	48 c7 45 37 00
	00 00 00	 mov	 QWORD PTR kwargs$1$[rbp-89], 0
$LN451@obj2ast_st@2:

; 3890 :         }
; 3891 :         if (_PyObject_HasAttrId(obj, &PyId_body)) {

  008ca	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_body
  008cf	48 8b cf	 mov	 rcx, rdi
  008d2	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  008d6	48 8b d3	 mov	 rdx, rbx
  008d9	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  008de	85 c0		 test	 eax, eax
  008e0	0f 84 11 02 00
	00		 je	 $LN450@obj2ast_st@2

; 3892 :             int res;
; 3893 :             Py_ssize_t len;
; 3894 :             Py_ssize_t i;
; 3895 :             tmp = _PyObject_GetAttrId(obj, &PyId_body);

  008e6	48 8b d3	 mov	 rdx, rbx
  008e9	48 8b cf	 mov	 rcx, rdi
  008ec	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  008f1	48 8b d8	 mov	 rbx, rax

; 3896 :             if (tmp == NULL) goto failed;

  008f4	48 85 c0	 test	 rax, rax
  008f7	0f 84 89 20 00
	00		 je	 $LN657@obj2ast_st@2

; 3897 :             if (!PyList_Check(tmp)) {

  008fd	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  00901	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  0090c	75 10		 jne	 SHORT $LN448@obj2ast_st@2

; 3898 :                 PyErr_Format(PyExc_TypeError, "ClassDef field \"body\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  0090e	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00912	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@FELJEMHL@ClassDef?5field?5?$CCbody?$CC?5must?5be?5a?5@

; 3899 :                 goto failed;

  00919	e9 93 f9 ff ff	 jmp	 $LN659@obj2ast_st@2
$LN448@obj2ast_st@2:

; 3900 :             }
; 3901 :             len = PyList_GET_SIZE(tmp);

  0091e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 3902 :             body = asdl_seq_new(len, arena);

  00922	48 8b d6	 mov	 rdx, rsi
  00925	48 8b c8	 mov	 rcx, rax
  00928	48 89 45 1f	 mov	 QWORD PTR len$1$[rbp-89], rax
  0092c	e8 00 00 00 00	 call	 asdl_seq_new
  00931	48 89 45 3f	 mov	 QWORD PTR body$1$[rbp-89], rax

; 3903 :             if (body == NULL) goto failed;

  00935	48 85 c0	 test	 rax, rax
  00938	0f 84 7f f9 ff
	ff		 je	 $failed$24670

; 3904 :             for (i = 0; i < len; i++) {

  0093e	45 33 c9	 xor	 r9d, r9d
  00941	4c 89 4d 17	 mov	 QWORD PTR i$1$[rbp-89], r9
  00945	4c 39 4d 1f	 cmp	 QWORD PTR len$1$[rbp-89], r9
  00949	7e 3f		 jle	 SHORT $LN442@obj2ast_st@2
  0094b	0f 1f 44 00 00	 npad	 5
$LL446@obj2ast_st@2:

; 3905 :                 stmt_ty value;
; 3906 :                 res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);

  00950	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00954	48 8d 55 2f	 lea	 rdx, QWORD PTR value$24935[rbp-89]
  00958	4c 8b c6	 mov	 r8, rsi
  0095b	4a 8b 0c c9	 mov	 rcx, QWORD PTR [rcx+r9*8]
  0095f	e8 00 00 00 00	 call	 obj2ast_stmt

; 3907 :                 if (res != 0) goto failed;

  00964	85 c0		 test	 eax, eax
  00966	0f 85 51 f9 ff
	ff		 jne	 $failed$24670

; 3908 :                 asdl_seq_SET(body, i, value);

  0096c	4c 8b 4d 17	 mov	 r9, QWORD PTR i$1$[rbp-89]
  00970	48 8b 4d 3f	 mov	 rcx, QWORD PTR body$1$[rbp-89]
  00974	48 8b 45 2f	 mov	 rax, QWORD PTR value$24935[rbp-89]
  00978	4a 89 44 c9 08	 mov	 QWORD PTR [rcx+r9*8+8], rax
  0097d	49 ff c1	 inc	 r9
  00980	4c 89 4d 17	 mov	 QWORD PTR i$1$[rbp-89], r9
  00984	4c 3b 4d 1f	 cmp	 r9, QWORD PTR len$1$[rbp-89]
  00988	7c c6		 jl	 SHORT $LL446@obj2ast_st@2
$LN442@obj2ast_st@2:

; 3909 :             }
; 3910 :             Py_CLEAR(tmp);

  0098a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00991	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  00998	4c 8b cb	 mov	 r9, rbx
  0099b	41 b8 46 0f 00
	00		 mov	 r8d, 3910		; 00000f46H
  009a1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  009a9	e8 00 00 00 00	 call	 _PyParallel_Guard
  009ae	85 c0		 test	 eax, eax
  009b0	75 08		 jne	 SHORT $LN441@obj2ast_st@2
  009b2	48 8b cb	 mov	 rcx, rbx
  009b5	e8 00 00 00 00	 call	 _Py_DecRef
$LN441@obj2ast_st@2:

; 3914 :         }
; 3915 :         if (_PyObject_HasAttrId(obj, &PyId_decorator_list)) {

  009ba	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_decorator_list
  009bf	48 8b cf	 mov	 rcx, rdi
  009c2	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  009c6	48 8b d3	 mov	 rdx, rbx
  009c9	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  009ce	85 c0		 test	 eax, eax
  009d0	0f 84 15 01 00
	00		 je	 $LN437@obj2ast_st@2

; 3916 :             int res;
; 3917 :             Py_ssize_t len;
; 3918 :             Py_ssize_t i;
; 3919 :             tmp = _PyObject_GetAttrId(obj, &PyId_decorator_list);

  009d6	48 8b d3	 mov	 rdx, rbx
  009d9	48 8b cf	 mov	 rcx, rdi
  009dc	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  009e1	48 8b d8	 mov	 rbx, rax

; 3920 :             if (tmp == NULL) goto failed;

  009e4	48 85 c0	 test	 rax, rax
  009e7	0f 84 99 1f 00
	00		 je	 $LN657@obj2ast_st@2

; 3921 :             if (!PyList_Check(tmp)) {

  009ed	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  009f1	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  009fc	75 10		 jne	 SHORT $LN435@obj2ast_st@2

; 3922 :                 PyErr_Format(PyExc_TypeError, "ClassDef field \"decorator_list\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  009fe	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00a02	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DN@MFOMKLEB@ClassDef?5field?5?$CCdecorator_list?$CC?5@

; 3923 :                 goto failed;

  00a09	e9 a3 f8 ff ff	 jmp	 $LN659@obj2ast_st@2
$LN435@obj2ast_st@2:

; 3924 :             }
; 3925 :             len = PyList_GET_SIZE(tmp);

  00a0e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 3926 :             decorator_list = asdl_seq_new(len, arena);

  00a12	48 8b d6	 mov	 rdx, rsi
  00a15	48 8b c8	 mov	 rcx, rax
  00a18	48 89 45 17	 mov	 QWORD PTR len$1$[rbp-89], rax
  00a1c	e8 00 00 00 00	 call	 asdl_seq_new
  00a21	48 89 45 1f	 mov	 QWORD PTR decorator_list$1$[rbp-89], rax

; 3927 :             if (decorator_list == NULL) goto failed;

  00a25	48 85 c0	 test	 rax, rax
  00a28	0f 84 8f f8 ff
	ff		 je	 $failed$24670

; 3928 :             for (i = 0; i < len; i++) {

  00a2e	33 ff		 xor	 edi, edi
  00a30	48 39 7d 17	 cmp	 QWORD PTR len$1$[rbp-89], rdi
  00a34	7e 3b		 jle	 SHORT $LN429@obj2ast_st@2
  00a36	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL433@obj2ast_st@2:

; 3929 :                 expr_ty value;
; 3930 :                 res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);

  00a40	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00a44	48 8d 55 2f	 lea	 rdx, QWORD PTR value$24963[rbp-89]
  00a48	4c 8b c6	 mov	 r8, rsi
  00a4b	48 8b 0c f9	 mov	 rcx, QWORD PTR [rcx+rdi*8]
  00a4f	e8 00 00 00 00	 call	 obj2ast_expr

; 3931 :                 if (res != 0) goto failed;

  00a54	85 c0		 test	 eax, eax
  00a56	0f 85 61 f8 ff
	ff		 jne	 $failed$24670

; 3932 :                 asdl_seq_SET(decorator_list, i, value);

  00a5c	48 8b 4d 1f	 mov	 rcx, QWORD PTR decorator_list$1$[rbp-89]
  00a60	48 8b 45 2f	 mov	 rax, QWORD PTR value$24963[rbp-89]
  00a64	48 ff c7	 inc	 rdi
  00a67	48 89 04 f9	 mov	 QWORD PTR [rcx+rdi*8], rax
  00a6b	48 3b 7d 17	 cmp	 rdi, QWORD PTR len$1$[rbp-89]
  00a6f	7c cf		 jl	 SHORT $LL433@obj2ast_st@2
$LN429@obj2ast_st@2:

; 3933 :             }
; 3934 :             Py_CLEAR(tmp);

  00a71	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00a78	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  00a7f	4c 8b cb	 mov	 r9, rbx
  00a82	41 b8 5e 0f 00
	00		 mov	 r8d, 3934		; 00000f5eH
  00a88	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00a90	e8 00 00 00 00	 call	 _PyParallel_Guard
  00a95	85 c0		 test	 eax, eax
  00a97	75 0a		 jne	 SHORT $LN428@obj2ast_st@2
  00a99	48 8b cb	 mov	 rcx, rbx
  00a9c	33 db		 xor	 ebx, ebx
  00a9e	e8 00 00 00 00	 call	 _Py_DecRef
$LN428@obj2ast_st@2:

; 3938 :         }
; 3939 :         *out = ClassDef(name, bases, keywords, starargs, kwargs, body,
; 3940 :                         decorator_list, lineno, col_offset, arena);

  00aa3	8b 45 67	 mov	 eax, DWORD PTR col_offset$[rbp-89]
  00aa6	4c 8b 4d 27	 mov	 r9, QWORD PTR starargs$1$[rbp-89]
  00aaa	4c 8b 45 ff	 mov	 r8, QWORD PTR keywords$1$[rbp-89]
  00aae	48 8b 55 f7	 mov	 rdx, QWORD PTR bases$1$[rbp-89]
  00ab2	48 8b 4d 0f	 mov	 rcx, QWORD PTR name$24812[rbp-89]
  00ab6	48 89 74 24 48	 mov	 QWORD PTR [rsp+72], rsi
  00abb	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00abf	8b 45 7f	 mov	 eax, DWORD PTR lineno$[rbp-89]
  00ac2	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00ac6	48 8b 45 1f	 mov	 rax, QWORD PTR decorator_list$1$[rbp-89]
  00aca	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00acf	48 8b 45 3f	 mov	 rax, QWORD PTR body$1$[rbp-89]
  00ad3	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00ad8	48 8b 45 37	 mov	 rax, QWORD PTR kwargs$1$[rbp-89]
  00adc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00ae1	e8 00 00 00 00	 call	 _Py_ClassDef

; 3941 :         if (*out == NULL) goto failed;
; 3942 :         return 0;

  00ae6	e9 5c 1e 00 00	 jmp	 $LN660@obj2ast_st@2
$LN437@obj2ast_st@2:

; 3935 :         } else {
; 3936 :             PyErr_SetString(PyExc_TypeError, "required field \"decorator_list\" missing from ClassDef");

  00aeb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DG@NOLEJLGL@required?5field?5?$CCdecorator_list?$CC?5@

; 3937 :             return 1;

  00af2	e9 83 1e 00 00	 jmp	 $LN658@obj2ast_st@2
$LN450@obj2ast_st@2:

; 3911 :         } else {
; 3912 :             PyErr_SetString(PyExc_TypeError, "required field \"body\" missing from ClassDef");

  00af7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@JFNEHIJD@required?5field?5?$CCbody?$CC?5missing?5fr@

; 3913 :             return 1;

  00afe	e9 77 1e 00 00	 jmp	 $LN658@obj2ast_st@2
$LN479@obj2ast_st@2:

; 3867 :         } else {
; 3868 :             PyErr_SetString(PyExc_TypeError, "required field \"keywords\" missing from ClassDef");

  00b03	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@IHPLINCF@required?5field?5?$CCkeywords?$CC?5missin@

; 3869 :             return 1;

  00b0a	e9 6b 1e 00 00	 jmp	 $LN658@obj2ast_st@2
$LN492@obj2ast_st@2:

; 3843 :         } else {
; 3844 :             PyErr_SetString(PyExc_TypeError, "required field \"bases\" missing from ClassDef");

  00b0f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@HBECIBCI@required?5field?5?$CCbases?$CC?5missing?5f@

; 3845 :             return 1;

  00b16	e9 5f 1e 00 00	 jmp	 $LN658@obj2ast_st@2
$LN500@obj2ast_st@2:

; 3819 :         } else {
; 3820 :             PyErr_SetString(PyExc_TypeError, "required field \"name\" missing from ClassDef");

  00b1b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@NNOCJKEL@required?5field?5?$CCname?$CC?5missing?5fr@

; 3821 :             return 1;

  00b22	e9 53 1e 00 00	 jmp	 $LN658@obj2ast_st@2
$LN501@obj2ast_st@2:

; 3943 :     }
; 3944 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Return_type);

  00b27	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Return_type
  00b2e	e8 00 00 00 00	 call	 PyObject_IsInstance

; 3945 :     if (isinstance == -1) {

  00b33	83 f8 ff	 cmp	 eax, -1

; 3946 :         return 1;

  00b36	0f 84 4a 1e 00
	00		 je	 $LN657@obj2ast_st@2

; 3947 :     }
; 3948 :     if (isinstance) {
; 3949 :         expr_ty value;
; 3950 : 
; 3951 :         if (_PyObject_HasAttrId(obj, &PyId_value)) {

  00b3c	48 8b cf	 mov	 rcx, rdi
  00b3f	85 c0		 test	 eax, eax
  00b41	0f 84 99 00 00
	00		 je	 $LN422@obj2ast_st@2
  00b47	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  00b4c	48 03 45 07	 add	 rax, QWORD PTR tv4777[rbp-89]
  00b50	48 8b d0	 mov	 rdx, rax
  00b53	48 89 45 0f	 mov	 QWORD PTR tv4701[rbp-89], rax
  00b57	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00b5c	85 c0		 test	 eax, eax
  00b5e	74 67		 je	 SHORT $LN421@obj2ast_st@2

; 3952 :             int res;
; 3953 :             tmp = _PyObject_GetAttrId(obj, &PyId_value);

  00b60	48 8b 55 0f	 mov	 rdx, QWORD PTR tv4701[rbp-89]
  00b64	48 8b cf	 mov	 rcx, rdi
  00b67	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00b6c	48 8b d8	 mov	 rbx, rax

; 3954 :             if (tmp == NULL) goto failed;

  00b6f	48 85 c0	 test	 rax, rax
  00b72	0f 84 0e 1e 00
	00		 je	 $LN657@obj2ast_st@2

; 3955 :             res = obj2ast_expr(tmp, &value, arena);

  00b78	48 8d 55 f7	 lea	 rdx, QWORD PTR value$24981[rbp-89]
  00b7c	4c 8b c6	 mov	 r8, rsi
  00b7f	48 8b c8	 mov	 rcx, rax
  00b82	e8 00 00 00 00	 call	 obj2ast_expr

; 3956 :             if (res != 0) goto failed;

  00b87	85 c0		 test	 eax, eax
  00b89	0f 85 2e f7 ff
	ff		 jne	 $failed$24670

; 3957 :             Py_CLEAR(tmp);

  00b8f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00b96	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  00b9d	4c 8b cb	 mov	 r9, rbx
  00ba0	41 b8 75 0f 00
	00		 mov	 r8d, 3957		; 00000f75H
  00ba6	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00bae	e8 00 00 00 00	 call	 _PyParallel_Guard
  00bb3	85 c0		 test	 eax, eax
  00bb5	75 0a		 jne	 SHORT $LN650@obj2ast_st@2
  00bb7	48 8b cb	 mov	 rcx, rbx
  00bba	33 db		 xor	 ebx, ebx
  00bbc	e8 00 00 00 00	 call	 _Py_DecRef
$LN650@obj2ast_st@2:

; 3958 :         } else {

  00bc1	48 8b 45 f7	 mov	 rax, QWORD PTR value$24981[rbp-89]
  00bc5	eb 02		 jmp	 SHORT $LN414@obj2ast_st@2
$LN421@obj2ast_st@2:
  00bc7	33 c0		 xor	 eax, eax
$LN414@obj2ast_st@2:

; 3959 :             value = NULL;
; 3960 :         }
; 3961 :         *out = Return(value, lineno, col_offset, arena);

  00bc9	44 8b 45 67	 mov	 r8d, DWORD PTR col_offset$[rbp-89]
  00bcd	8b 55 7f	 mov	 edx, DWORD PTR lineno$[rbp-89]
  00bd0	4c 8b ce	 mov	 r9, rsi
  00bd3	48 8b c8	 mov	 rcx, rax
  00bd6	e8 00 00 00 00	 call	 _Py_Return

; 3962 :         if (*out == NULL) goto failed;
; 3963 :         return 0;

  00bdb	e9 67 1d 00 00	 jmp	 $LN660@obj2ast_st@2
$LN422@obj2ast_st@2:

; 3964 :     }
; 3965 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Delete_type);

  00be0	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Delete_type
  00be7	e8 00 00 00 00	 call	 PyObject_IsInstance

; 3966 :     if (isinstance == -1) {

  00bec	83 f8 ff	 cmp	 eax, -1

; 3967 :         return 1;

  00bef	0f 84 91 1d 00
	00		 je	 $LN657@obj2ast_st@2

; 3968 :     }
; 3969 :     if (isinstance) {
; 3970 :         asdl_seq* targets;
; 3971 : 
; 3972 :         if (_PyObject_HasAttrId(obj, &PyId_targets)) {

  00bf5	48 8b cf	 mov	 rcx, rdi
  00bf8	85 c0		 test	 eax, eax
  00bfa	0f 84 07 01 00
	00		 je	 $LN411@obj2ast_st@2
  00c00	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_targets
  00c05	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  00c09	48 8b d3	 mov	 rdx, rbx
  00c0c	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00c11	85 c0		 test	 eax, eax
  00c13	0f 84 e2 00 00
	00		 je	 $LN410@obj2ast_st@2

; 3973 :             int res;
; 3974 :             Py_ssize_t len;
; 3975 :             Py_ssize_t i;
; 3976 :             tmp = _PyObject_GetAttrId(obj, &PyId_targets);

  00c19	48 8b d3	 mov	 rdx, rbx
  00c1c	48 8b cf	 mov	 rcx, rdi
  00c1f	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00c24	48 8b d8	 mov	 rbx, rax

; 3977 :             if (tmp == NULL) goto failed;

  00c27	48 85 c0	 test	 rax, rax
  00c2a	0f 84 56 1d 00
	00		 je	 $LN657@obj2ast_st@2

; 3978 :             if (!PyList_Check(tmp)) {

  00c30	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  00c34	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  00c3f	75 10		 jne	 SHORT $LN408@obj2ast_st@2

; 3979 :                 PyErr_Format(PyExc_TypeError, "Delete field \"targets\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  00c41	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00c45	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@JEFKDOEM@Delete?5field?5?$CCtargets?$CC?5must?5be?5a@

; 3980 :                 goto failed;

  00c4c	e9 60 f6 ff ff	 jmp	 $LN659@obj2ast_st@2
$LN408@obj2ast_st@2:

; 3981 :             }
; 3982 :             len = PyList_GET_SIZE(tmp);

  00c51	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 3983 :             targets = asdl_seq_new(len, arena);

  00c55	48 8b d6	 mov	 rdx, rsi
  00c58	48 8b c8	 mov	 rcx, rax
  00c5b	48 89 45 f7	 mov	 QWORD PTR len$1$[rbp-89], rax
  00c5f	e8 00 00 00 00	 call	 asdl_seq_new
  00c64	48 89 45 ff	 mov	 QWORD PTR targets$1$[rbp-89], rax

; 3984 :             if (targets == NULL) goto failed;

  00c68	48 85 c0	 test	 rax, rax
  00c6b	0f 84 4c f6 ff
	ff		 je	 $failed$24670

; 3985 :             for (i = 0; i < len; i++) {

  00c71	33 ff		 xor	 edi, edi
  00c73	48 39 7d f7	 cmp	 QWORD PTR len$1$[rbp-89], rdi
  00c77	7e 38		 jle	 SHORT $LN402@obj2ast_st@2
  00c79	0f 1f 80 00 00
	00 00		 npad	 7
$LL406@obj2ast_st@2:

; 3986 :                 expr_ty value;
; 3987 :                 res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);

  00c80	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00c84	48 8d 55 0f	 lea	 rdx, QWORD PTR value$25018[rbp-89]
  00c88	4c 8b c6	 mov	 r8, rsi
  00c8b	48 8b 0c f9	 mov	 rcx, QWORD PTR [rcx+rdi*8]
  00c8f	e8 00 00 00 00	 call	 obj2ast_expr

; 3988 :                 if (res != 0) goto failed;

  00c94	85 c0		 test	 eax, eax
  00c96	0f 85 21 f6 ff
	ff		 jne	 $failed$24670

; 3989 :                 asdl_seq_SET(targets, i, value);

  00c9c	48 8b 4d ff	 mov	 rcx, QWORD PTR targets$1$[rbp-89]
  00ca0	48 8b 45 0f	 mov	 rax, QWORD PTR value$25018[rbp-89]
  00ca4	48 ff c7	 inc	 rdi
  00ca7	48 89 04 f9	 mov	 QWORD PTR [rcx+rdi*8], rax
  00cab	48 3b 7d f7	 cmp	 rdi, QWORD PTR len$1$[rbp-89]
  00caf	7c cf		 jl	 SHORT $LL406@obj2ast_st@2
$LN402@obj2ast_st@2:

; 3990 :             }
; 3991 :             Py_CLEAR(tmp);

  00cb1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00cb8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  00cbf	4c 8b cb	 mov	 r9, rbx
  00cc2	41 b8 97 0f 00
	00		 mov	 r8d, 3991		; 00000f97H
  00cc8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00cd0	e8 00 00 00 00	 call	 _PyParallel_Guard
  00cd5	85 c0		 test	 eax, eax
  00cd7	75 0a		 jne	 SHORT $LN401@obj2ast_st@2
  00cd9	48 8b cb	 mov	 rcx, rbx
  00cdc	33 db		 xor	 ebx, ebx
  00cde	e8 00 00 00 00	 call	 _Py_DecRef
$LN401@obj2ast_st@2:

; 3995 :         }
; 3996 :         *out = Delete(targets, lineno, col_offset, arena);

  00ce3	44 8b 45 67	 mov	 r8d, DWORD PTR col_offset$[rbp-89]
  00ce7	8b 55 7f	 mov	 edx, DWORD PTR lineno$[rbp-89]
  00cea	48 8b 4d ff	 mov	 rcx, QWORD PTR targets$1$[rbp-89]
  00cee	4c 8b ce	 mov	 r9, rsi
  00cf1	e8 00 00 00 00	 call	 _Py_Delete

; 3997 :         if (*out == NULL) goto failed;
; 3998 :         return 0;

  00cf6	e9 4c 1c 00 00	 jmp	 $LN660@obj2ast_st@2
$LN410@obj2ast_st@2:

; 3992 :         } else {
; 3993 :             PyErr_SetString(PyExc_TypeError, "required field \"targets\" missing from Delete");

  00cfb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@MPLCKCGN@required?5field?5?$CCtargets?$CC?5missing@

; 3994 :             return 1;

  00d02	e9 73 1c 00 00	 jmp	 $LN658@obj2ast_st@2
$LN411@obj2ast_st@2:

; 3999 :     }
; 4000 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Assign_type);

  00d07	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Assign_type
  00d0e	e8 00 00 00 00	 call	 PyObject_IsInstance

; 4001 :     if (isinstance == -1) {

  00d13	83 f8 ff	 cmp	 eax, -1

; 4002 :         return 1;

  00d16	0f 84 6a 1c 00
	00		 je	 $LN657@obj2ast_st@2

; 4003 :     }
; 4004 :     if (isinstance) {
; 4005 :         asdl_seq* targets;
; 4006 :         expr_ty value;
; 4007 : 
; 4008 :         if (_PyObject_HasAttrId(obj, &PyId_targets)) {

  00d1c	48 8b cf	 mov	 rcx, rdi
  00d1f	85 c0		 test	 eax, eax
  00d21	0f 84 a2 01 00
	00		 je	 $LN395@obj2ast_st@2
  00d27	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_targets
  00d2c	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  00d30	48 8b d3	 mov	 rdx, rbx
  00d33	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00d38	85 c0		 test	 eax, eax
  00d3a	0f 84 7d 01 00
	00		 je	 $LN394@obj2ast_st@2

; 4009 :             int res;
; 4010 :             Py_ssize_t len;
; 4011 :             Py_ssize_t i;
; 4012 :             tmp = _PyObject_GetAttrId(obj, &PyId_targets);

  00d40	48 8b d3	 mov	 rdx, rbx
  00d43	48 8b cf	 mov	 rcx, rdi
  00d46	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00d4b	48 8b d8	 mov	 rbx, rax

; 4013 :             if (tmp == NULL) goto failed;

  00d4e	48 85 c0	 test	 rax, rax
  00d51	0f 84 2f 1c 00
	00		 je	 $LN657@obj2ast_st@2

; 4014 :             if (!PyList_Check(tmp)) {

  00d57	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  00d5b	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  00d66	75 10		 jne	 SHORT $LN392@obj2ast_st@2

; 4015 :                 PyErr_Format(PyExc_TypeError, "Assign field \"targets\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  00d68	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00d6c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@CHFJFKNC@Assign?5field?5?$CCtargets?$CC?5must?5be?5a@

; 4016 :                 goto failed;

  00d73	e9 39 f5 ff ff	 jmp	 $LN659@obj2ast_st@2
$LN392@obj2ast_st@2:

; 4017 :             }
; 4018 :             len = PyList_GET_SIZE(tmp);

  00d78	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 4019 :             targets = asdl_seq_new(len, arena);

  00d7c	48 8b d6	 mov	 rdx, rsi
  00d7f	48 8b c8	 mov	 rcx, rax
  00d82	48 89 45 ff	 mov	 QWORD PTR len$1$[rbp-89], rax
  00d86	e8 00 00 00 00	 call	 asdl_seq_new
  00d8b	48 89 45 17	 mov	 QWORD PTR targets$1$[rbp-89], rax

; 4020 :             if (targets == NULL) goto failed;

  00d8f	48 85 c0	 test	 rax, rax
  00d92	0f 84 25 f5 ff
	ff		 je	 $failed$24670

; 4021 :             for (i = 0; i < len; i++) {

  00d98	45 33 c9	 xor	 r9d, r9d
  00d9b	4c 89 4d f7	 mov	 QWORD PTR i$1$[rbp-89], r9
  00d9f	4c 39 4d ff	 cmp	 QWORD PTR len$1$[rbp-89], r9
  00da3	7e 45		 jle	 SHORT $LN386@obj2ast_st@2
  00da5	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL390@obj2ast_st@2:

; 4022 :                 expr_ty value;
; 4023 :                 res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);

  00db0	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00db4	48 8d 55 0f	 lea	 rdx, QWORD PTR value$25053[rbp-89]
  00db8	4c 8b c6	 mov	 r8, rsi
  00dbb	4a 8b 0c c9	 mov	 rcx, QWORD PTR [rcx+r9*8]
  00dbf	e8 00 00 00 00	 call	 obj2ast_expr

; 4024 :                 if (res != 0) goto failed;

  00dc4	85 c0		 test	 eax, eax
  00dc6	0f 85 f1 f4 ff
	ff		 jne	 $failed$24670

; 4025 :                 asdl_seq_SET(targets, i, value);

  00dcc	4c 8b 4d f7	 mov	 r9, QWORD PTR i$1$[rbp-89]
  00dd0	48 8b 4d 17	 mov	 rcx, QWORD PTR targets$1$[rbp-89]
  00dd4	48 8b 45 0f	 mov	 rax, QWORD PTR value$25053[rbp-89]
  00dd8	4a 89 44 c9 08	 mov	 QWORD PTR [rcx+r9*8+8], rax
  00ddd	49 ff c1	 inc	 r9
  00de0	4c 89 4d f7	 mov	 QWORD PTR i$1$[rbp-89], r9
  00de4	4c 3b 4d ff	 cmp	 r9, QWORD PTR len$1$[rbp-89]
  00de8	7c c6		 jl	 SHORT $LL390@obj2ast_st@2
$LN386@obj2ast_st@2:

; 4026 :             }
; 4027 :             Py_CLEAR(tmp);

  00dea	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00df1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  00df8	4c 8b cb	 mov	 r9, rbx
  00dfb	41 b8 bb 0f 00
	00		 mov	 r8d, 4027		; 00000fbbH
  00e01	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00e09	e8 00 00 00 00	 call	 _PyParallel_Guard
  00e0e	85 c0		 test	 eax, eax
  00e10	75 08		 jne	 SHORT $LN385@obj2ast_st@2
  00e12	48 8b cb	 mov	 rcx, rbx
  00e15	e8 00 00 00 00	 call	 _Py_DecRef
$LN385@obj2ast_st@2:

; 4031 :         }
; 4032 :         if (_PyObject_HasAttrId(obj, &PyId_value)) {

  00e1a	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_value
  00e1f	48 8b cf	 mov	 rcx, rdi
  00e22	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  00e26	48 8b d3	 mov	 rdx, rbx
  00e29	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00e2e	85 c0		 test	 eax, eax
  00e30	74 7f		 je	 SHORT $LN381@obj2ast_st@2

; 4033 :             int res;
; 4034 :             tmp = _PyObject_GetAttrId(obj, &PyId_value);

  00e32	48 8b d3	 mov	 rdx, rbx
  00e35	48 8b cf	 mov	 rcx, rdi
  00e38	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00e3d	48 8b d8	 mov	 rbx, rax

; 4035 :             if (tmp == NULL) goto failed;

  00e40	48 85 c0	 test	 rax, rax
  00e43	0f 84 3d 1b 00
	00		 je	 $LN657@obj2ast_st@2

; 4036 :             res = obj2ast_expr(tmp, &value, arena);

  00e49	48 8d 55 0f	 lea	 rdx, QWORD PTR value$25037[rbp-89]
  00e4d	4c 8b c6	 mov	 r8, rsi
  00e50	48 8b c8	 mov	 rcx, rax
  00e53	e8 00 00 00 00	 call	 obj2ast_expr

; 4037 :             if (res != 0) goto failed;

  00e58	85 c0		 test	 eax, eax
  00e5a	0f 85 5d f4 ff
	ff		 jne	 $failed$24670

; 4038 :             Py_CLEAR(tmp);

  00e60	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00e67	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  00e6e	4c 8b cb	 mov	 r9, rbx
  00e71	41 b8 c6 0f 00
	00		 mov	 r8d, 4038		; 00000fc6H
  00e77	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00e7f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00e84	85 c0		 test	 eax, eax
  00e86	75 0a		 jne	 SHORT $LN377@obj2ast_st@2
  00e88	48 8b cb	 mov	 rcx, rbx
  00e8b	33 db		 xor	 ebx, ebx
  00e8d	e8 00 00 00 00	 call	 _Py_DecRef
$LN377@obj2ast_st@2:

; 4042 :         }
; 4043 :         *out = Assign(targets, value, lineno, col_offset, arena);

  00e92	44 8b 4d 67	 mov	 r9d, DWORD PTR col_offset$[rbp-89]
  00e96	44 8b 45 7f	 mov	 r8d, DWORD PTR lineno$[rbp-89]
  00e9a	48 8b 55 0f	 mov	 rdx, QWORD PTR value$25037[rbp-89]
  00e9e	48 8b 4d 17	 mov	 rcx, QWORD PTR targets$1$[rbp-89]
  00ea2	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  00ea7	e8 00 00 00 00	 call	 _Py_Assign

; 4044 :         if (*out == NULL) goto failed;
; 4045 :         return 0;

  00eac	e9 96 1a 00 00	 jmp	 $LN660@obj2ast_st@2
$LN381@obj2ast_st@2:

; 4039 :         } else {
; 4040 :             PyErr_SetString(PyExc_TypeError, "required field \"value\" missing from Assign");

  00eb1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@KCHNIPDD@required?5field?5?$CCvalue?$CC?5missing?5f@

; 4041 :             return 1;

  00eb8	e9 bd 1a 00 00	 jmp	 $LN658@obj2ast_st@2
$LN394@obj2ast_st@2:

; 4028 :         } else {
; 4029 :             PyErr_SetString(PyExc_TypeError, "required field \"targets\" missing from Assign");

  00ebd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@BNPHBHEF@required?5field?5?$CCtargets?$CC?5missing@

; 4030 :             return 1;

  00ec4	e9 b1 1a 00 00	 jmp	 $LN658@obj2ast_st@2
$LN395@obj2ast_st@2:

; 4046 :     }
; 4047 :     isinstance = PyObject_IsInstance(obj, (PyObject*)AugAssign_type);

  00ec9	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR AugAssign_type
  00ed0	e8 00 00 00 00	 call	 PyObject_IsInstance

; 4048 :     if (isinstance == -1) {

  00ed5	83 f8 ff	 cmp	 eax, -1

; 4049 :         return 1;

  00ed8	0f 84 a8 1a 00
	00		 je	 $LN657@obj2ast_st@2

; 4050 :     }
; 4051 :     if (isinstance) {
; 4052 :         expr_ty target;
; 4053 :         operator_ty op;
; 4054 :         expr_ty value;
; 4055 : 
; 4056 :         if (_PyObject_HasAttrId(obj, &PyId_target)) {

  00ede	48 8b cf	 mov	 rcx, rdi
  00ee1	85 c0		 test	 eax, eax
  00ee3	0f 84 b3 01 00
	00		 je	 $LN371@obj2ast_st@2
  00ee9	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_target
  00eee	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  00ef2	48 8b d3	 mov	 rdx, rbx
  00ef5	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00efa	85 c0		 test	 eax, eax
  00efc	0f 84 8e 01 00
	00		 je	 $LN370@obj2ast_st@2

; 4057 :             int res;
; 4058 :             tmp = _PyObject_GetAttrId(obj, &PyId_target);

  00f02	48 8b d3	 mov	 rdx, rbx
  00f05	48 8b cf	 mov	 rcx, rdi
  00f08	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00f0d	48 8b d8	 mov	 rbx, rax

; 4059 :             if (tmp == NULL) goto failed;

  00f10	48 85 c0	 test	 rax, rax
  00f13	0f 84 6d 1a 00
	00		 je	 $LN657@obj2ast_st@2

; 4060 :             res = obj2ast_expr(tmp, &target, arena);

  00f19	48 8d 55 2f	 lea	 rdx, QWORD PTR target$25086[rbp-89]
  00f1d	4c 8b c6	 mov	 r8, rsi
  00f20	48 8b c8	 mov	 rcx, rax
  00f23	e8 00 00 00 00	 call	 obj2ast_expr

; 4061 :             if (res != 0) goto failed;

  00f28	85 c0		 test	 eax, eax
  00f2a	0f 85 8d f3 ff
	ff		 jne	 $failed$24670

; 4062 :             Py_CLEAR(tmp);

  00f30	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00f37	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  00f3e	4c 8b cb	 mov	 r9, rbx
  00f41	41 b8 de 0f 00
	00		 mov	 r8d, 4062		; 00000fdeH
  00f47	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00f4f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00f54	85 c0		 test	 eax, eax
  00f56	75 08		 jne	 SHORT $LN366@obj2ast_st@2
  00f58	48 8b cb	 mov	 rcx, rbx
  00f5b	e8 00 00 00 00	 call	 _Py_DecRef
$LN366@obj2ast_st@2:

; 4066 :         }
; 4067 :         if (_PyObject_HasAttrId(obj, &PyId_op)) {

  00f60	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_op
  00f65	48 8b cf	 mov	 rcx, rdi
  00f68	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  00f6c	48 8b d3	 mov	 rdx, rbx
  00f6f	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00f74	85 c0		 test	 eax, eax
  00f76	0f 84 08 01 00
	00		 je	 $LN362@obj2ast_st@2

; 4068 :             int res;
; 4069 :             tmp = _PyObject_GetAttrId(obj, &PyId_op);

  00f7c	48 8b d3	 mov	 rdx, rbx
  00f7f	48 8b cf	 mov	 rcx, rdi
  00f82	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00f87	48 8b d8	 mov	 rbx, rax

; 4070 :             if (tmp == NULL) goto failed;

  00f8a	48 85 c0	 test	 rax, rax
  00f8d	0f 84 f3 19 00
	00		 je	 $LN657@obj2ast_st@2

; 4071 :             res = obj2ast_operator(tmp, &op, arena);

  00f93	48 8d 55 37	 lea	 rdx, QWORD PTR op$25087[rbp-89]
  00f97	48 8b c8	 mov	 rcx, rax
  00f9a	e8 00 00 00 00	 call	 obj2ast_operator

; 4072 :             if (res != 0) goto failed;

  00f9f	85 c0		 test	 eax, eax
  00fa1	0f 85 16 f3 ff
	ff		 jne	 $failed$24670

; 4073 :             Py_CLEAR(tmp);

  00fa7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00fae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  00fb5	4c 8b cb	 mov	 r9, rbx
  00fb8	41 b8 e9 0f 00
	00		 mov	 r8d, 4073		; 00000fe9H
  00fbe	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00fc6	e8 00 00 00 00	 call	 _PyParallel_Guard
  00fcb	85 c0		 test	 eax, eax
  00fcd	75 08		 jne	 SHORT $LN358@obj2ast_st@2
  00fcf	48 8b cb	 mov	 rcx, rbx
  00fd2	e8 00 00 00 00	 call	 _Py_DecRef
$LN358@obj2ast_st@2:

; 4077 :         }
; 4078 :         if (_PyObject_HasAttrId(obj, &PyId_value)) {

  00fd7	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_value
  00fdc	48 8b cf	 mov	 rcx, rdi
  00fdf	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  00fe3	48 8b d3	 mov	 rdx, rbx
  00fe6	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00feb	85 c0		 test	 eax, eax
  00fed	0f 84 85 00 00
	00		 je	 $LN354@obj2ast_st@2

; 4079 :             int res;
; 4080 :             tmp = _PyObject_GetAttrId(obj, &PyId_value);

  00ff3	48 8b d3	 mov	 rdx, rbx
  00ff6	48 8b cf	 mov	 rcx, rdi
  00ff9	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00ffe	48 8b d8	 mov	 rbx, rax

; 4081 :             if (tmp == NULL) goto failed;

  01001	48 85 c0	 test	 rax, rax
  01004	0f 84 7c 19 00
	00		 je	 $LN657@obj2ast_st@2

; 4082 :             res = obj2ast_expr(tmp, &value, arena);

  0100a	48 8d 55 0f	 lea	 rdx, QWORD PTR value$25088[rbp-89]
  0100e	4c 8b c6	 mov	 r8, rsi
  01011	48 8b c8	 mov	 rcx, rax
  01014	e8 00 00 00 00	 call	 obj2ast_expr

; 4083 :             if (res != 0) goto failed;

  01019	85 c0		 test	 eax, eax
  0101b	0f 85 9c f2 ff
	ff		 jne	 $failed$24670

; 4084 :             Py_CLEAR(tmp);

  01021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  0102f	4c 8b cb	 mov	 r9, rbx
  01032	41 b8 f4 0f 00
	00		 mov	 r8d, 4084		; 00000ff4H
  01038	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01040	e8 00 00 00 00	 call	 _PyParallel_Guard
  01045	85 c0		 test	 eax, eax
  01047	75 0a		 jne	 SHORT $LN350@obj2ast_st@2
  01049	48 8b cb	 mov	 rcx, rbx
  0104c	33 db		 xor	 ebx, ebx
  0104e	e8 00 00 00 00	 call	 _Py_DecRef
$LN350@obj2ast_st@2:

; 4088 :         }
; 4089 :         *out = AugAssign(target, op, value, lineno, col_offset, arena);

  01053	8b 45 67	 mov	 eax, DWORD PTR col_offset$[rbp-89]
  01056	44 8b 4d 7f	 mov	 r9d, DWORD PTR lineno$[rbp-89]
  0105a	4c 8b 45 0f	 mov	 r8, QWORD PTR value$25088[rbp-89]
  0105e	8b 55 37	 mov	 edx, DWORD PTR op$25087[rbp-89]
  01061	48 8b 4d 2f	 mov	 rcx, QWORD PTR target$25086[rbp-89]
  01065	48 89 74 24 28	 mov	 QWORD PTR [rsp+40], rsi
  0106a	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0106e	e8 00 00 00 00	 call	 _Py_AugAssign

; 4090 :         if (*out == NULL) goto failed;
; 4091 :         return 0;

  01073	e9 cf 18 00 00	 jmp	 $LN660@obj2ast_st@2
$LN354@obj2ast_st@2:

; 4085 :         } else {
; 4086 :             PyErr_SetString(PyExc_TypeError, "required field \"value\" missing from AugAssign");

  01078	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@DDMENDHF@required?5field?5?$CCvalue?$CC?5missing?5f@

; 4087 :             return 1;

  0107f	e9 f6 18 00 00	 jmp	 $LN658@obj2ast_st@2
$LN362@obj2ast_st@2:

; 4074 :         } else {
; 4075 :             PyErr_SetString(PyExc_TypeError, "required field \"op\" missing from AugAssign");

  01084	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@OOGNAPCP@required?5field?5?$CCop?$CC?5missing?5from@

; 4076 :             return 1;

  0108b	e9 ea 18 00 00	 jmp	 $LN658@obj2ast_st@2
$LN370@obj2ast_st@2:

; 4063 :         } else {
; 4064 :             PyErr_SetString(PyExc_TypeError, "required field \"target\" missing from AugAssign");

  01090	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@OHAKCNID@required?5field?5?$CCtarget?$CC?5missing?5@

; 4065 :             return 1;

  01097	e9 de 18 00 00	 jmp	 $LN658@obj2ast_st@2
$LN371@obj2ast_st@2:

; 4092 :     }
; 4093 :     isinstance = PyObject_IsInstance(obj, (PyObject*)For_type);

  0109c	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR For_type
  010a3	e8 00 00 00 00	 call	 PyObject_IsInstance

; 4094 :     if (isinstance == -1) {

  010a8	83 f8 ff	 cmp	 eax, -1

; 4095 :         return 1;

  010ab	0f 84 d5 18 00
	00		 je	 $LN657@obj2ast_st@2

; 4096 :     }
; 4097 :     if (isinstance) {
; 4098 :         expr_ty target;
; 4099 :         expr_ty iter;
; 4100 :         asdl_seq* body;
; 4101 :         asdl_seq* orelse;
; 4102 : 
; 4103 :         if (_PyObject_HasAttrId(obj, &PyId_target)) {

  010b1	48 8b cf	 mov	 rcx, rdi
  010b4	85 c0		 test	 eax, eax
  010b6	0f 84 24 03 00
	00		 je	 $LN344@obj2ast_st@2
  010bc	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_target
  010c1	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  010c5	48 8b d3	 mov	 rdx, rbx
  010c8	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  010cd	85 c0		 test	 eax, eax
  010cf	0f 84 ff 02 00
	00		 je	 $LN343@obj2ast_st@2

; 4104 :             int res;
; 4105 :             tmp = _PyObject_GetAttrId(obj, &PyId_target);

  010d5	48 8b d3	 mov	 rdx, rbx
  010d8	48 8b cf	 mov	 rcx, rdi
  010db	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  010e0	48 8b d8	 mov	 rbx, rax

; 4106 :             if (tmp == NULL) goto failed;

  010e3	48 85 c0	 test	 rax, rax
  010e6	0f 84 9a 18 00
	00		 je	 $LN657@obj2ast_st@2

; 4107 :             res = obj2ast_expr(tmp, &target, arena);

  010ec	48 8d 55 1f	 lea	 rdx, QWORD PTR target$25139[rbp-89]
  010f0	4c 8b c6	 mov	 r8, rsi
  010f3	48 8b c8	 mov	 rcx, rax
  010f6	e8 00 00 00 00	 call	 obj2ast_expr

; 4108 :             if (res != 0) goto failed;

  010fb	85 c0		 test	 eax, eax
  010fd	0f 85 ba f1 ff
	ff		 jne	 $failed$24670

; 4109 :             Py_CLEAR(tmp);

  01103	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0110a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  01111	4c 8b cb	 mov	 r9, rbx
  01114	41 b8 0d 10 00
	00		 mov	 r8d, 4109		; 0000100dH
  0111a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01122	e8 00 00 00 00	 call	 _PyParallel_Guard
  01127	85 c0		 test	 eax, eax
  01129	75 08		 jne	 SHORT $LN339@obj2ast_st@2
  0112b	48 8b cb	 mov	 rcx, rbx
  0112e	e8 00 00 00 00	 call	 _Py_DecRef
$LN339@obj2ast_st@2:

; 4113 :         }
; 4114 :         if (_PyObject_HasAttrId(obj, &PyId_iter)) {

  01133	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_iter
  01138	48 8b cf	 mov	 rcx, rdi
  0113b	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  0113f	48 8b d3	 mov	 rdx, rbx
  01142	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  01147	85 c0		 test	 eax, eax
  01149	0f 84 79 02 00
	00		 je	 $LN335@obj2ast_st@2

; 4115 :             int res;
; 4116 :             tmp = _PyObject_GetAttrId(obj, &PyId_iter);

  0114f	48 8b d3	 mov	 rdx, rbx
  01152	48 8b cf	 mov	 rcx, rdi
  01155	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0115a	48 8b d8	 mov	 rbx, rax

; 4117 :             if (tmp == NULL) goto failed;

  0115d	48 85 c0	 test	 rax, rax
  01160	0f 84 20 18 00
	00		 je	 $LN657@obj2ast_st@2

; 4118 :             res = obj2ast_expr(tmp, &iter, arena);

  01166	48 8d 55 2f	 lea	 rdx, QWORD PTR iter$25140[rbp-89]
  0116a	4c 8b c6	 mov	 r8, rsi
  0116d	48 8b c8	 mov	 rcx, rax
  01170	e8 00 00 00 00	 call	 obj2ast_expr

; 4119 :             if (res != 0) goto failed;

  01175	85 c0		 test	 eax, eax
  01177	0f 85 40 f1 ff
	ff		 jne	 $failed$24670

; 4120 :             Py_CLEAR(tmp);

  0117d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01184	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  0118b	4c 8b cb	 mov	 r9, rbx
  0118e	41 b8 18 10 00
	00		 mov	 r8d, 4120		; 00001018H
  01194	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0119c	e8 00 00 00 00	 call	 _PyParallel_Guard
  011a1	85 c0		 test	 eax, eax
  011a3	75 08		 jne	 SHORT $LN331@obj2ast_st@2
  011a5	48 8b cb	 mov	 rcx, rbx
  011a8	e8 00 00 00 00	 call	 _Py_DecRef
$LN331@obj2ast_st@2:

; 4124 :         }
; 4125 :         if (_PyObject_HasAttrId(obj, &PyId_body)) {

  011ad	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_body
  011b2	48 8b cf	 mov	 rcx, rdi
  011b5	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  011b9	48 8b d3	 mov	 rdx, rbx
  011bc	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  011c1	85 c0		 test	 eax, eax
  011c3	0f 84 f3 01 00
	00		 je	 $LN327@obj2ast_st@2

; 4126 :             int res;
; 4127 :             Py_ssize_t len;
; 4128 :             Py_ssize_t i;
; 4129 :             tmp = _PyObject_GetAttrId(obj, &PyId_body);

  011c9	48 8b d3	 mov	 rdx, rbx
  011cc	48 8b cf	 mov	 rcx, rdi
  011cf	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  011d4	48 8b d8	 mov	 rbx, rax

; 4130 :             if (tmp == NULL) goto failed;

  011d7	48 85 c0	 test	 rax, rax
  011da	0f 84 a6 17 00
	00		 je	 $LN657@obj2ast_st@2

; 4131 :             if (!PyList_Check(tmp)) {

  011e0	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  011e4	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  011ef	75 10		 jne	 SHORT $LN325@obj2ast_st@2

; 4132 :                 PyErr_Format(PyExc_TypeError, "For field \"body\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  011f1	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  011f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@HMKAJOFO@For?5field?5?$CCbody?$CC?5must?5be?5a?5list?0@

; 4133 :                 goto failed;

  011fc	e9 b0 f0 ff ff	 jmp	 $LN659@obj2ast_st@2
$LN325@obj2ast_st@2:

; 4134 :             }
; 4135 :             len = PyList_GET_SIZE(tmp);

  01201	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 4136 :             body = asdl_seq_new(len, arena);

  01205	48 8b d6	 mov	 rdx, rsi
  01208	48 8b c8	 mov	 rcx, rax
  0120b	48 89 45 ff	 mov	 QWORD PTR len$1$[rbp-89], rax
  0120f	e8 00 00 00 00	 call	 asdl_seq_new
  01214	48 89 45 17	 mov	 QWORD PTR body$1$[rbp-89], rax

; 4137 :             if (body == NULL) goto failed;

  01218	48 85 c0	 test	 rax, rax
  0121b	0f 84 9c f0 ff
	ff		 je	 $failed$24670

; 4138 :             for (i = 0; i < len; i++) {

  01221	45 33 c9	 xor	 r9d, r9d
  01224	4c 89 4d f7	 mov	 QWORD PTR i$1$[rbp-89], r9
  01228	4c 39 4d ff	 cmp	 QWORD PTR len$1$[rbp-89], r9
  0122c	7e 3c		 jle	 SHORT $LN319@obj2ast_st@2
  0122e	66 90		 npad	 2
$LL323@obj2ast_st@2:

; 4139 :                 stmt_ty value;
; 4140 :                 res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);

  01230	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  01234	48 8d 55 0f	 lea	 rdx, QWORD PTR value$25188[rbp-89]
  01238	4c 8b c6	 mov	 r8, rsi
  0123b	4a 8b 0c c9	 mov	 rcx, QWORD PTR [rcx+r9*8]
  0123f	e8 00 00 00 00	 call	 obj2ast_stmt

; 4141 :                 if (res != 0) goto failed;

  01244	85 c0		 test	 eax, eax
  01246	0f 85 71 f0 ff
	ff		 jne	 $failed$24670

; 4142 :                 asdl_seq_SET(body, i, value);

  0124c	4c 8b 4d f7	 mov	 r9, QWORD PTR i$1$[rbp-89]
  01250	48 8b 4d 17	 mov	 rcx, QWORD PTR body$1$[rbp-89]
  01254	48 8b 45 0f	 mov	 rax, QWORD PTR value$25188[rbp-89]
  01258	4a 89 44 c9 08	 mov	 QWORD PTR [rcx+r9*8+8], rax
  0125d	49 ff c1	 inc	 r9
  01260	4c 89 4d f7	 mov	 QWORD PTR i$1$[rbp-89], r9
  01264	4c 3b 4d ff	 cmp	 r9, QWORD PTR len$1$[rbp-89]
  01268	7c c6		 jl	 SHORT $LL323@obj2ast_st@2
$LN319@obj2ast_st@2:

; 4143 :             }
; 4144 :             Py_CLEAR(tmp);

  0126a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01271	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  01278	4c 8b cb	 mov	 r9, rbx
  0127b	41 b8 30 10 00
	00		 mov	 r8d, 4144		; 00001030H
  01281	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01289	e8 00 00 00 00	 call	 _PyParallel_Guard
  0128e	85 c0		 test	 eax, eax
  01290	75 08		 jne	 SHORT $LN318@obj2ast_st@2
  01292	48 8b cb	 mov	 rcx, rbx
  01295	e8 00 00 00 00	 call	 _Py_DecRef
$LN318@obj2ast_st@2:

; 4148 :         }
; 4149 :         if (_PyObject_HasAttrId(obj, &PyId_orelse)) {

  0129a	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_orelse
  0129f	48 8b cf	 mov	 rcx, rdi
  012a2	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  012a6	48 8b d3	 mov	 rdx, rbx
  012a9	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  012ae	85 c0		 test	 eax, eax
  012b0	0f 84 fa 00 00
	00		 je	 $LN314@obj2ast_st@2

; 4150 :             int res;
; 4151 :             Py_ssize_t len;
; 4152 :             Py_ssize_t i;
; 4153 :             tmp = _PyObject_GetAttrId(obj, &PyId_orelse);

  012b6	48 8b d3	 mov	 rdx, rbx
  012b9	48 8b cf	 mov	 rcx, rdi
  012bc	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  012c1	48 8b d8	 mov	 rbx, rax

; 4154 :             if (tmp == NULL) goto failed;

  012c4	48 85 c0	 test	 rax, rax
  012c7	0f 84 b9 16 00
	00		 je	 $LN657@obj2ast_st@2

; 4155 :             if (!PyList_Check(tmp)) {

  012cd	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  012d1	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  012dc	75 10		 jne	 SHORT $LN312@obj2ast_st@2

; 4156 :                 PyErr_Format(PyExc_TypeError, "For field \"orelse\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  012de	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  012e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@OHHBCDMN@For?5field?5?$CCorelse?$CC?5must?5be?5a?5lis@

; 4157 :                 goto failed;

  012e9	e9 c3 ef ff ff	 jmp	 $LN659@obj2ast_st@2
$LN312@obj2ast_st@2:

; 4158 :             }
; 4159 :             len = PyList_GET_SIZE(tmp);

  012ee	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 4160 :             orelse = asdl_seq_new(len, arena);

  012f2	48 8b d6	 mov	 rdx, rsi
  012f5	48 8b c8	 mov	 rcx, rax
  012f8	48 89 45 f7	 mov	 QWORD PTR len$1$[rbp-89], rax
  012fc	e8 00 00 00 00	 call	 asdl_seq_new
  01301	48 89 45 ff	 mov	 QWORD PTR orelse$1$[rbp-89], rax

; 4161 :             if (orelse == NULL) goto failed;

  01305	48 85 c0	 test	 rax, rax
  01308	0f 84 af ef ff
	ff		 je	 $failed$24670

; 4162 :             for (i = 0; i < len; i++) {

  0130e	33 ff		 xor	 edi, edi
  01310	48 39 7d f7	 cmp	 QWORD PTR len$1$[rbp-89], rdi
  01314	7e 3b		 jle	 SHORT $LN306@obj2ast_st@2
  01316	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL310@obj2ast_st@2:

; 4163 :                 stmt_ty value;
; 4164 :                 res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);

  01320	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  01324	48 8d 55 0f	 lea	 rdx, QWORD PTR value$25216[rbp-89]
  01328	4c 8b c6	 mov	 r8, rsi
  0132b	48 8b 0c f9	 mov	 rcx, QWORD PTR [rcx+rdi*8]
  0132f	e8 00 00 00 00	 call	 obj2ast_stmt

; 4165 :                 if (res != 0) goto failed;

  01334	85 c0		 test	 eax, eax
  01336	0f 85 81 ef ff
	ff		 jne	 $failed$24670

; 4166 :                 asdl_seq_SET(orelse, i, value);

  0133c	48 8b 4d ff	 mov	 rcx, QWORD PTR orelse$1$[rbp-89]
  01340	48 8b 45 0f	 mov	 rax, QWORD PTR value$25216[rbp-89]
  01344	48 ff c7	 inc	 rdi
  01347	48 89 04 f9	 mov	 QWORD PTR [rcx+rdi*8], rax
  0134b	48 3b 7d f7	 cmp	 rdi, QWORD PTR len$1$[rbp-89]
  0134f	7c cf		 jl	 SHORT $LL310@obj2ast_st@2
$LN306@obj2ast_st@2:

; 4167 :             }
; 4168 :             Py_CLEAR(tmp);

  01351	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01358	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  0135f	4c 8b cb	 mov	 r9, rbx
  01362	41 b8 48 10 00
	00		 mov	 r8d, 4168		; 00001048H
  01368	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01370	e8 00 00 00 00	 call	 _PyParallel_Guard
  01375	85 c0		 test	 eax, eax
  01377	75 0a		 jne	 SHORT $LN305@obj2ast_st@2
  01379	48 8b cb	 mov	 rcx, rbx
  0137c	33 db		 xor	 ebx, ebx
  0137e	e8 00 00 00 00	 call	 _Py_DecRef
$LN305@obj2ast_st@2:

; 4172 :         }
; 4173 :         *out = For(target, iter, body, orelse, lineno, col_offset, arena);

  01383	8b 45 67	 mov	 eax, DWORD PTR col_offset$[rbp-89]
  01386	4c 8b 4d ff	 mov	 r9, QWORD PTR orelse$1$[rbp-89]
  0138a	4c 8b 45 17	 mov	 r8, QWORD PTR body$1$[rbp-89]
  0138e	48 8b 55 2f	 mov	 rdx, QWORD PTR iter$25140[rbp-89]
  01392	48 8b 4d 1f	 mov	 rcx, QWORD PTR target$25139[rbp-89]
  01396	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  0139b	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0139f	8b 45 7f	 mov	 eax, DWORD PTR lineno$[rbp-89]
  013a2	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  013a6	e8 00 00 00 00	 call	 _Py_For

; 4174 :         if (*out == NULL) goto failed;
; 4175 :         return 0;

  013ab	e9 97 15 00 00	 jmp	 $LN660@obj2ast_st@2
$LN314@obj2ast_st@2:

; 4169 :         } else {
; 4170 :             PyErr_SetString(PyExc_TypeError, "required field \"orelse\" missing from For");

  013b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@HNHCKLNB@required?5field?5?$CCorelse?$CC?5missing?5@

; 4171 :             return 1;

  013b7	e9 be 15 00 00	 jmp	 $LN658@obj2ast_st@2
$LN327@obj2ast_st@2:

; 4145 :         } else {
; 4146 :             PyErr_SetString(PyExc_TypeError, "required field \"body\" missing from For");

  013bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@HAIPHGDL@required?5field?5?$CCbody?$CC?5missing?5fr@

; 4147 :             return 1;

  013c3	e9 b2 15 00 00	 jmp	 $LN658@obj2ast_st@2
$LN335@obj2ast_st@2:

; 4121 :         } else {
; 4122 :             PyErr_SetString(PyExc_TypeError, "required field \"iter\" missing from For");

  013c8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@ICLHNFMH@required?5field?5?$CCiter?$CC?5missing?5fr@

; 4123 :             return 1;

  013cf	e9 a6 15 00 00	 jmp	 $LN658@obj2ast_st@2
$LN343@obj2ast_st@2:

; 4110 :         } else {
; 4111 :             PyErr_SetString(PyExc_TypeError, "required field \"target\" missing from For");

  013d4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@NEHOGNKF@required?5field?5?$CCtarget?$CC?5missing?5@

; 4112 :             return 1;

  013db	e9 9a 15 00 00	 jmp	 $LN658@obj2ast_st@2
$LN344@obj2ast_st@2:

; 4176 :     }
; 4177 :     isinstance = PyObject_IsInstance(obj, (PyObject*)While_type);

  013e0	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR While_type
  013e7	e8 00 00 00 00	 call	 PyObject_IsInstance

; 4178 :     if (isinstance == -1) {

  013ec	83 f8 ff	 cmp	 eax, -1

; 4179 :         return 1;

  013ef	0f 84 91 15 00
	00		 je	 $LN657@obj2ast_st@2

; 4180 :     }
; 4181 :     if (isinstance) {
; 4182 :         expr_ty test;
; 4183 :         asdl_seq* body;
; 4184 :         asdl_seq* orelse;
; 4185 : 
; 4186 :         if (_PyObject_HasAttrId(obj, &PyId_test)) {

  013f5	48 8b cf	 mov	 rcx, rdi
  013f8	85 c0		 test	 eax, eax
  013fa	0f 84 9d 02 00
	00		 je	 $LN299@obj2ast_st@2
  01400	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_test
  01405	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  01409	48 8b d3	 mov	 rdx, rbx
  0140c	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  01411	85 c0		 test	 eax, eax
  01413	0f 84 78 02 00
	00		 je	 $LN298@obj2ast_st@2

; 4187 :             int res;
; 4188 :             tmp = _PyObject_GetAttrId(obj, &PyId_test);

  01419	48 8b d3	 mov	 rdx, rbx
  0141c	48 8b cf	 mov	 rcx, rdi
  0141f	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  01424	48 8b d8	 mov	 rbx, rax

; 4189 :             if (tmp == NULL) goto failed;

  01427	48 85 c0	 test	 rax, rax
  0142a	0f 84 56 15 00
	00		 je	 $LN657@obj2ast_st@2

; 4190 :             res = obj2ast_expr(tmp, &test, arena);

  01430	48 8d 55 2f	 lea	 rdx, QWORD PTR test$25234[rbp-89]
  01434	4c 8b c6	 mov	 r8, rsi
  01437	48 8b c8	 mov	 rcx, rax
  0143a	e8 00 00 00 00	 call	 obj2ast_expr

; 4191 :             if (res != 0) goto failed;

  0143f	85 c0		 test	 eax, eax
  01441	0f 85 76 ee ff
	ff		 jne	 $failed$24670

; 4192 :             Py_CLEAR(tmp);

  01447	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0144e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  01455	4c 8b cb	 mov	 r9, rbx
  01458	41 b8 60 10 00
	00		 mov	 r8d, 4192		; 00001060H
  0145e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01466	e8 00 00 00 00	 call	 _PyParallel_Guard
  0146b	85 c0		 test	 eax, eax
  0146d	75 08		 jne	 SHORT $LN294@obj2ast_st@2
  0146f	48 8b cb	 mov	 rcx, rbx
  01472	e8 00 00 00 00	 call	 _Py_DecRef
$LN294@obj2ast_st@2:

; 4196 :         }
; 4197 :         if (_PyObject_HasAttrId(obj, &PyId_body)) {

  01477	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_body
  0147c	48 8b cf	 mov	 rcx, rdi
  0147f	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  01483	48 8b d3	 mov	 rdx, rbx
  01486	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0148b	85 c0		 test	 eax, eax
  0148d	0f 84 f2 01 00
	00		 je	 $LN290@obj2ast_st@2

; 4198 :             int res;
; 4199 :             Py_ssize_t len;
; 4200 :             Py_ssize_t i;
; 4201 :             tmp = _PyObject_GetAttrId(obj, &PyId_body);

  01493	48 8b d3	 mov	 rdx, rbx
  01496	48 8b cf	 mov	 rcx, rdi
  01499	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0149e	48 8b d8	 mov	 rbx, rax

; 4202 :             if (tmp == NULL) goto failed;

  014a1	48 85 c0	 test	 rax, rax
  014a4	0f 84 dc 14 00
	00		 je	 $LN657@obj2ast_st@2

; 4203 :             if (!PyList_Check(tmp)) {

  014aa	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  014ae	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  014b9	75 10		 jne	 SHORT $LN288@obj2ast_st@2

; 4204 :                 PyErr_Format(PyExc_TypeError, "While field \"body\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  014bb	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  014bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@DEKBMJDI@While?5field?5?$CCbody?$CC?5must?5be?5a?5lis@

; 4205 :                 goto failed;

  014c6	e9 e6 ed ff ff	 jmp	 $LN659@obj2ast_st@2
$LN288@obj2ast_st@2:

; 4206 :             }
; 4207 :             len = PyList_GET_SIZE(tmp);

  014cb	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 4208 :             body = asdl_seq_new(len, arena);

  014cf	48 8b d6	 mov	 rdx, rsi
  014d2	48 8b c8	 mov	 rcx, rax
  014d5	48 89 45 ff	 mov	 QWORD PTR len$1$[rbp-89], rax
  014d9	e8 00 00 00 00	 call	 asdl_seq_new
  014de	48 89 45 17	 mov	 QWORD PTR body$1$[rbp-89], rax

; 4209 :             if (body == NULL) goto failed;

  014e2	48 85 c0	 test	 rax, rax
  014e5	0f 84 d2 ed ff
	ff		 je	 $failed$24670

; 4210 :             for (i = 0; i < len; i++) {

  014eb	45 33 c9	 xor	 r9d, r9d
  014ee	4c 89 4d f7	 mov	 QWORD PTR i$1$[rbp-89], r9
  014f2	4c 39 4d ff	 cmp	 QWORD PTR len$1$[rbp-89], r9
  014f6	7e 42		 jle	 SHORT $LN282@obj2ast_st@2
  014f8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL286@obj2ast_st@2:

; 4211 :                 stmt_ty value;
; 4212 :                 res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);

  01500	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  01504	48 8d 55 0f	 lea	 rdx, QWORD PTR value$25267[rbp-89]
  01508	4c 8b c6	 mov	 r8, rsi
  0150b	4a 8b 0c c9	 mov	 rcx, QWORD PTR [rcx+r9*8]
  0150f	e8 00 00 00 00	 call	 obj2ast_stmt

; 4213 :                 if (res != 0) goto failed;

  01514	85 c0		 test	 eax, eax
  01516	0f 85 a1 ed ff
	ff		 jne	 $failed$24670

; 4214 :                 asdl_seq_SET(body, i, value);

  0151c	4c 8b 4d f7	 mov	 r9, QWORD PTR i$1$[rbp-89]
  01520	48 8b 4d 17	 mov	 rcx, QWORD PTR body$1$[rbp-89]
  01524	48 8b 45 0f	 mov	 rax, QWORD PTR value$25267[rbp-89]
  01528	4a 89 44 c9 08	 mov	 QWORD PTR [rcx+r9*8+8], rax
  0152d	49 ff c1	 inc	 r9
  01530	4c 89 4d f7	 mov	 QWORD PTR i$1$[rbp-89], r9
  01534	4c 3b 4d ff	 cmp	 r9, QWORD PTR len$1$[rbp-89]
  01538	7c c6		 jl	 SHORT $LL286@obj2ast_st@2
$LN282@obj2ast_st@2:

; 4215 :             }
; 4216 :             Py_CLEAR(tmp);

  0153a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01541	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  01548	4c 8b cb	 mov	 r9, rbx
  0154b	41 b8 78 10 00
	00		 mov	 r8d, 4216		; 00001078H
  01551	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01559	e8 00 00 00 00	 call	 _PyParallel_Guard
  0155e	85 c0		 test	 eax, eax
  01560	75 08		 jne	 SHORT $LN281@obj2ast_st@2
  01562	48 8b cb	 mov	 rcx, rbx
  01565	e8 00 00 00 00	 call	 _Py_DecRef
$LN281@obj2ast_st@2:

; 4220 :         }
; 4221 :         if (_PyObject_HasAttrId(obj, &PyId_orelse)) {

  0156a	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_orelse
  0156f	48 8b cf	 mov	 rcx, rdi
  01572	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  01576	48 8b d3	 mov	 rdx, rbx
  01579	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0157e	85 c0		 test	 eax, eax
  01580	0f 84 f3 00 00
	00		 je	 $LN277@obj2ast_st@2

; 4222 :             int res;
; 4223 :             Py_ssize_t len;
; 4224 :             Py_ssize_t i;
; 4225 :             tmp = _PyObject_GetAttrId(obj, &PyId_orelse);

  01586	48 8b d3	 mov	 rdx, rbx
  01589	48 8b cf	 mov	 rcx, rdi
  0158c	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  01591	48 8b d8	 mov	 rbx, rax

; 4226 :             if (tmp == NULL) goto failed;

  01594	48 85 c0	 test	 rax, rax
  01597	0f 84 e9 13 00
	00		 je	 $LN657@obj2ast_st@2

; 4227 :             if (!PyList_Check(tmp)) {

  0159d	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  015a1	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  015ac	75 10		 jne	 SHORT $LN275@obj2ast_st@2

; 4228 :                 PyErr_Format(PyExc_TypeError, "While field \"orelse\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  015ae	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  015b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@CBNJGDLK@While?5field?5?$CCorelse?$CC?5must?5be?5a?5l@

; 4229 :                 goto failed;

  015b9	e9 f3 ec ff ff	 jmp	 $LN659@obj2ast_st@2
$LN275@obj2ast_st@2:

; 4230 :             }
; 4231 :             len = PyList_GET_SIZE(tmp);

  015be	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 4232 :             orelse = asdl_seq_new(len, arena);

  015c2	48 8b d6	 mov	 rdx, rsi
  015c5	48 8b c8	 mov	 rcx, rax
  015c8	48 89 45 f7	 mov	 QWORD PTR len$1$[rbp-89], rax
  015cc	e8 00 00 00 00	 call	 asdl_seq_new
  015d1	48 89 45 ff	 mov	 QWORD PTR orelse$1$[rbp-89], rax

; 4233 :             if (orelse == NULL) goto failed;

  015d5	48 85 c0	 test	 rax, rax
  015d8	0f 84 df ec ff
	ff		 je	 $failed$24670

; 4234 :             for (i = 0; i < len; i++) {

  015de	33 ff		 xor	 edi, edi
  015e0	48 39 7d f7	 cmp	 QWORD PTR len$1$[rbp-89], rdi
  015e4	7e 3b		 jle	 SHORT $LN269@obj2ast_st@2
  015e6	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL273@obj2ast_st@2:

; 4235 :                 stmt_ty value;
; 4236 :                 res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);

  015f0	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  015f4	48 8d 55 0f	 lea	 rdx, QWORD PTR value$25295[rbp-89]
  015f8	4c 8b c6	 mov	 r8, rsi
  015fb	48 8b 0c f9	 mov	 rcx, QWORD PTR [rcx+rdi*8]
  015ff	e8 00 00 00 00	 call	 obj2ast_stmt

; 4237 :                 if (res != 0) goto failed;

  01604	85 c0		 test	 eax, eax
  01606	0f 85 b1 ec ff
	ff		 jne	 $failed$24670

; 4238 :                 asdl_seq_SET(orelse, i, value);

  0160c	48 8b 4d ff	 mov	 rcx, QWORD PTR orelse$1$[rbp-89]
  01610	48 8b 45 0f	 mov	 rax, QWORD PTR value$25295[rbp-89]
  01614	48 ff c7	 inc	 rdi
  01617	48 89 04 f9	 mov	 QWORD PTR [rcx+rdi*8], rax
  0161b	48 3b 7d f7	 cmp	 rdi, QWORD PTR len$1$[rbp-89]
  0161f	7c cf		 jl	 SHORT $LL273@obj2ast_st@2
$LN269@obj2ast_st@2:

; 4239 :             }
; 4240 :             Py_CLEAR(tmp);

  01621	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01628	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  0162f	4c 8b cb	 mov	 r9, rbx
  01632	41 b8 90 10 00
	00		 mov	 r8d, 4240		; 00001090H
  01638	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01640	e8 00 00 00 00	 call	 _PyParallel_Guard
  01645	85 c0		 test	 eax, eax
  01647	75 0a		 jne	 SHORT $LN268@obj2ast_st@2
  01649	48 8b cb	 mov	 rcx, rbx
  0164c	33 db		 xor	 ebx, ebx
  0164e	e8 00 00 00 00	 call	 _Py_DecRef
$LN268@obj2ast_st@2:

; 4244 :         }
; 4245 :         *out = While(test, body, orelse, lineno, col_offset, arena);

  01653	8b 45 67	 mov	 eax, DWORD PTR col_offset$[rbp-89]
  01656	44 8b 4d 7f	 mov	 r9d, DWORD PTR lineno$[rbp-89]
  0165a	4c 8b 45 ff	 mov	 r8, QWORD PTR orelse$1$[rbp-89]
  0165e	48 8b 55 17	 mov	 rdx, QWORD PTR body$1$[rbp-89]
  01662	48 8b 4d 2f	 mov	 rcx, QWORD PTR test$25234[rbp-89]
  01666	48 89 74 24 28	 mov	 QWORD PTR [rsp+40], rsi
  0166b	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0166f	e8 00 00 00 00	 call	 _Py_While

; 4246 :         if (*out == NULL) goto failed;
; 4247 :         return 0;

  01674	e9 ce 12 00 00	 jmp	 $LN660@obj2ast_st@2
$LN277@obj2ast_st@2:

; 4241 :         } else {
; 4242 :             PyErr_SetString(PyExc_TypeError, "required field \"orelse\" missing from While");

  01679	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@HNNCIDFK@required?5field?5?$CCorelse?$CC?5missing?5@

; 4243 :             return 1;

  01680	e9 f5 12 00 00	 jmp	 $LN658@obj2ast_st@2
$LN290@obj2ast_st@2:

; 4217 :         } else {
; 4218 :             PyErr_SetString(PyExc_TypeError, "required field \"body\" missing from While");

  01685	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@CBCBDLKI@required?5field?5?$CCbody?$CC?5missing?5fr@

; 4219 :             return 1;

  0168c	e9 e9 12 00 00	 jmp	 $LN658@obj2ast_st@2
$LN298@obj2ast_st@2:

; 4193 :         } else {
; 4194 :             PyErr_SetString(PyExc_TypeError, "required field \"test\" missing from While");

  01691	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@JMNKEPPD@required?5field?5?$CCtest?$CC?5missing?5fr@

; 4195 :             return 1;

  01698	e9 dd 12 00 00	 jmp	 $LN658@obj2ast_st@2
$LN299@obj2ast_st@2:

; 4248 :     }
; 4249 :     isinstance = PyObject_IsInstance(obj, (PyObject*)If_type);

  0169d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR If_type
  016a4	e8 00 00 00 00	 call	 PyObject_IsInstance

; 4250 :     if (isinstance == -1) {

  016a9	83 f8 ff	 cmp	 eax, -1

; 4251 :         return 1;

  016ac	0f 84 d4 12 00
	00		 je	 $LN657@obj2ast_st@2

; 4252 :     }
; 4253 :     if (isinstance) {
; 4254 :         expr_ty test;
; 4255 :         asdl_seq* body;
; 4256 :         asdl_seq* orelse;
; 4257 : 
; 4258 :         if (_PyObject_HasAttrId(obj, &PyId_test)) {

  016b2	48 8b cf	 mov	 rcx, rdi
  016b5	85 c0		 test	 eax, eax
  016b7	0f 84 a0 02 00
	00		 je	 $LN262@obj2ast_st@2
  016bd	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_test
  016c2	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  016c6	48 8b d3	 mov	 rdx, rbx
  016c9	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  016ce	85 c0		 test	 eax, eax
  016d0	0f 84 7b 02 00
	00		 je	 $LN261@obj2ast_st@2

; 4259 :             int res;
; 4260 :             tmp = _PyObject_GetAttrId(obj, &PyId_test);

  016d6	48 8b d3	 mov	 rdx, rbx
  016d9	48 8b cf	 mov	 rcx, rdi
  016dc	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  016e1	48 8b d8	 mov	 rbx, rax

; 4261 :             if (tmp == NULL) goto failed;

  016e4	48 85 c0	 test	 rax, rax
  016e7	0f 84 99 12 00
	00		 je	 $LN657@obj2ast_st@2

; 4262 :             res = obj2ast_expr(tmp, &test, arena);

  016ed	48 8d 55 2f	 lea	 rdx, QWORD PTR test$25313[rbp-89]
  016f1	4c 8b c6	 mov	 r8, rsi
  016f4	48 8b c8	 mov	 rcx, rax
  016f7	e8 00 00 00 00	 call	 obj2ast_expr

; 4263 :             if (res != 0) goto failed;

  016fc	85 c0		 test	 eax, eax
  016fe	0f 85 b9 eb ff
	ff		 jne	 $failed$24670

; 4264 :             Py_CLEAR(tmp);

  01704	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0170b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  01712	4c 8b cb	 mov	 r9, rbx
  01715	41 b8 a8 10 00
	00		 mov	 r8d, 4264		; 000010a8H
  0171b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01723	e8 00 00 00 00	 call	 _PyParallel_Guard
  01728	85 c0		 test	 eax, eax
  0172a	75 08		 jne	 SHORT $LN257@obj2ast_st@2
  0172c	48 8b cb	 mov	 rcx, rbx
  0172f	e8 00 00 00 00	 call	 _Py_DecRef
$LN257@obj2ast_st@2:

; 4268 :         }
; 4269 :         if (_PyObject_HasAttrId(obj, &PyId_body)) {

  01734	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_body
  01739	48 8b cf	 mov	 rcx, rdi
  0173c	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  01740	48 8b d3	 mov	 rdx, rbx
  01743	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  01748	85 c0		 test	 eax, eax
  0174a	0f 84 f5 01 00
	00		 je	 $LN253@obj2ast_st@2

; 4270 :             int res;
; 4271 :             Py_ssize_t len;
; 4272 :             Py_ssize_t i;
; 4273 :             tmp = _PyObject_GetAttrId(obj, &PyId_body);

  01750	48 8b d3	 mov	 rdx, rbx
  01753	48 8b cf	 mov	 rcx, rdi
  01756	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0175b	48 8b d8	 mov	 rbx, rax

; 4274 :             if (tmp == NULL) goto failed;

  0175e	48 85 c0	 test	 rax, rax
  01761	0f 84 1f 12 00
	00		 je	 $LN657@obj2ast_st@2

; 4275 :             if (!PyList_Check(tmp)) {

  01767	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  0176b	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  01776	75 10		 jne	 SHORT $LN251@obj2ast_st@2

; 4276 :                 PyErr_Format(PyExc_TypeError, "If field \"body\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  01778	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  0177c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@CBMBACPE@If?5field?5?$CCbody?$CC?5must?5be?5a?5list?0?5@

; 4277 :                 goto failed;

  01783	e9 29 eb ff ff	 jmp	 $LN659@obj2ast_st@2
$LN251@obj2ast_st@2:

; 4278 :             }
; 4279 :             len = PyList_GET_SIZE(tmp);

  01788	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 4280 :             body = asdl_seq_new(len, arena);

  0178c	48 8b d6	 mov	 rdx, rsi
  0178f	48 8b c8	 mov	 rcx, rax
  01792	48 89 45 ff	 mov	 QWORD PTR len$1$[rbp-89], rax
  01796	e8 00 00 00 00	 call	 asdl_seq_new
  0179b	48 89 45 17	 mov	 QWORD PTR body$1$[rbp-89], rax

; 4281 :             if (body == NULL) goto failed;

  0179f	48 85 c0	 test	 rax, rax
  017a2	0f 84 15 eb ff
	ff		 je	 $failed$24670

; 4282 :             for (i = 0; i < len; i++) {

  017a8	45 33 c9	 xor	 r9d, r9d
  017ab	4c 89 4d f7	 mov	 QWORD PTR i$1$[rbp-89], r9
  017af	4c 39 4d ff	 cmp	 QWORD PTR len$1$[rbp-89], r9
  017b3	7e 45		 jle	 SHORT $LN245@obj2ast_st@2
  017b5	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL249@obj2ast_st@2:

; 4283 :                 stmt_ty value;
; 4284 :                 res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);

  017c0	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  017c4	48 8d 55 0f	 lea	 rdx, QWORD PTR value$25346[rbp-89]
  017c8	4c 8b c6	 mov	 r8, rsi
  017cb	4a 8b 0c c9	 mov	 rcx, QWORD PTR [rcx+r9*8]
  017cf	e8 00 00 00 00	 call	 obj2ast_stmt

; 4285 :                 if (res != 0) goto failed;

  017d4	85 c0		 test	 eax, eax
  017d6	0f 85 e1 ea ff
	ff		 jne	 $failed$24670

; 4286 :                 asdl_seq_SET(body, i, value);

  017dc	4c 8b 4d f7	 mov	 r9, QWORD PTR i$1$[rbp-89]
  017e0	48 8b 4d 17	 mov	 rcx, QWORD PTR body$1$[rbp-89]
  017e4	48 8b 45 0f	 mov	 rax, QWORD PTR value$25346[rbp-89]
  017e8	4a 89 44 c9 08	 mov	 QWORD PTR [rcx+r9*8+8], rax
  017ed	49 ff c1	 inc	 r9
  017f0	4c 89 4d f7	 mov	 QWORD PTR i$1$[rbp-89], r9
  017f4	4c 3b 4d ff	 cmp	 r9, QWORD PTR len$1$[rbp-89]
  017f8	7c c6		 jl	 SHORT $LL249@obj2ast_st@2
$LN245@obj2ast_st@2:

; 4287 :             }
; 4288 :             Py_CLEAR(tmp);

  017fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01801	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  01808	4c 8b cb	 mov	 r9, rbx
  0180b	41 b8 c0 10 00
	00		 mov	 r8d, 4288		; 000010c0H
  01811	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01819	e8 00 00 00 00	 call	 _PyParallel_Guard
  0181e	85 c0		 test	 eax, eax
  01820	75 08		 jne	 SHORT $LN244@obj2ast_st@2
  01822	48 8b cb	 mov	 rcx, rbx
  01825	e8 00 00 00 00	 call	 _Py_DecRef
$LN244@obj2ast_st@2:

; 4292 :         }
; 4293 :         if (_PyObject_HasAttrId(obj, &PyId_orelse)) {

  0182a	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_orelse
  0182f	48 8b cf	 mov	 rcx, rdi
  01832	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  01836	48 8b d3	 mov	 rdx, rbx
  01839	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0183e	85 c0		 test	 eax, eax
  01840	0f 84 f3 00 00
	00		 je	 $LN240@obj2ast_st@2

; 4294 :             int res;
; 4295 :             Py_ssize_t len;
; 4296 :             Py_ssize_t i;
; 4297 :             tmp = _PyObject_GetAttrId(obj, &PyId_orelse);

  01846	48 8b d3	 mov	 rdx, rbx
  01849	48 8b cf	 mov	 rcx, rdi
  0184c	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  01851	48 8b d8	 mov	 rbx, rax

; 4298 :             if (tmp == NULL) goto failed;

  01854	48 85 c0	 test	 rax, rax
  01857	0f 84 29 11 00
	00		 je	 $LN657@obj2ast_st@2

; 4299 :             if (!PyList_Check(tmp)) {

  0185d	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  01861	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  0186c	75 10		 jne	 SHORT $LN238@obj2ast_st@2

; 4300 :                 PyErr_Format(PyExc_TypeError, "If field \"orelse\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  0186e	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  01872	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@EKCAPFKA@If?5field?5?$CCorelse?$CC?5must?5be?5a?5list@

; 4301 :                 goto failed;

  01879	e9 33 ea ff ff	 jmp	 $LN659@obj2ast_st@2
$LN238@obj2ast_st@2:

; 4302 :             }
; 4303 :             len = PyList_GET_SIZE(tmp);

  0187e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 4304 :             orelse = asdl_seq_new(len, arena);

  01882	48 8b d6	 mov	 rdx, rsi
  01885	48 8b c8	 mov	 rcx, rax
  01888	48 89 45 f7	 mov	 QWORD PTR len$1$[rbp-89], rax
  0188c	e8 00 00 00 00	 call	 asdl_seq_new
  01891	48 89 45 ff	 mov	 QWORD PTR orelse$1$[rbp-89], rax

; 4305 :             if (orelse == NULL) goto failed;

  01895	48 85 c0	 test	 rax, rax
  01898	0f 84 1f ea ff
	ff		 je	 $failed$24670

; 4306 :             for (i = 0; i < len; i++) {

  0189e	33 ff		 xor	 edi, edi
  018a0	48 39 7d f7	 cmp	 QWORD PTR len$1$[rbp-89], rdi
  018a4	7e 3b		 jle	 SHORT $LN232@obj2ast_st@2
  018a6	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL236@obj2ast_st@2:

; 4307 :                 stmt_ty value;
; 4308 :                 res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);

  018b0	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  018b4	48 8d 55 0f	 lea	 rdx, QWORD PTR value$25374[rbp-89]
  018b8	4c 8b c6	 mov	 r8, rsi
  018bb	48 8b 0c f9	 mov	 rcx, QWORD PTR [rcx+rdi*8]
  018bf	e8 00 00 00 00	 call	 obj2ast_stmt

; 4309 :                 if (res != 0) goto failed;

  018c4	85 c0		 test	 eax, eax
  018c6	0f 85 f1 e9 ff
	ff		 jne	 $failed$24670

; 4310 :                 asdl_seq_SET(orelse, i, value);

  018cc	48 8b 4d ff	 mov	 rcx, QWORD PTR orelse$1$[rbp-89]
  018d0	48 8b 45 0f	 mov	 rax, QWORD PTR value$25374[rbp-89]
  018d4	48 ff c7	 inc	 rdi
  018d7	48 89 04 f9	 mov	 QWORD PTR [rcx+rdi*8], rax
  018db	48 3b 7d f7	 cmp	 rdi, QWORD PTR len$1$[rbp-89]
  018df	7c cf		 jl	 SHORT $LL236@obj2ast_st@2
$LN232@obj2ast_st@2:

; 4311 :             }
; 4312 :             Py_CLEAR(tmp);

  018e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  018e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  018ef	4c 8b cb	 mov	 r9, rbx
  018f2	41 b8 d8 10 00
	00		 mov	 r8d, 4312		; 000010d8H
  018f8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01900	e8 00 00 00 00	 call	 _PyParallel_Guard
  01905	85 c0		 test	 eax, eax
  01907	75 0a		 jne	 SHORT $LN231@obj2ast_st@2
  01909	48 8b cb	 mov	 rcx, rbx
  0190c	33 db		 xor	 ebx, ebx
  0190e	e8 00 00 00 00	 call	 _Py_DecRef
$LN231@obj2ast_st@2:

; 4316 :         }
; 4317 :         *out = If(test, body, orelse, lineno, col_offset, arena);

  01913	8b 45 67	 mov	 eax, DWORD PTR col_offset$[rbp-89]
  01916	44 8b 4d 7f	 mov	 r9d, DWORD PTR lineno$[rbp-89]
  0191a	4c 8b 45 ff	 mov	 r8, QWORD PTR orelse$1$[rbp-89]
  0191e	48 8b 55 17	 mov	 rdx, QWORD PTR body$1$[rbp-89]
  01922	48 8b 4d 2f	 mov	 rcx, QWORD PTR test$25313[rbp-89]
  01926	48 89 74 24 28	 mov	 QWORD PTR [rsp+40], rsi
  0192b	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0192f	e8 00 00 00 00	 call	 _Py_If

; 4318 :         if (*out == NULL) goto failed;
; 4319 :         return 0;

  01934	e9 0e 10 00 00	 jmp	 $LN660@obj2ast_st@2
$LN240@obj2ast_st@2:

; 4313 :         } else {
; 4314 :             PyErr_SetString(PyExc_TypeError, "required field \"orelse\" missing from If");

  01939	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@BBKAIMOL@required?5field?5?$CCorelse?$CC?5missing?5@

; 4315 :             return 1;

  01940	e9 35 10 00 00	 jmp	 $LN658@obj2ast_st@2
$LN253@obj2ast_st@2:

; 4289 :         } else {
; 4290 :             PyErr_SetString(PyExc_TypeError, "required field \"body\" missing from If");

  01945	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@IBBHFIGB@required?5field?5?$CCbody?$CC?5missing?5fr@

; 4291 :             return 1;

  0194c	e9 29 10 00 00	 jmp	 $LN658@obj2ast_st@2
$LN261@obj2ast_st@2:

; 4265 :         } else {
; 4266 :             PyErr_SetString(PyExc_TypeError, "required field \"test\" missing from If");

  01951	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@KNIONNCC@required?5field?5?$CCtest?$CC?5missing?5fr@

; 4267 :             return 1;

  01958	e9 1d 10 00 00	 jmp	 $LN658@obj2ast_st@2
$LN262@obj2ast_st@2:

; 4320 :     }
; 4321 :     isinstance = PyObject_IsInstance(obj, (PyObject*)With_type);

  0195d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR With_type
  01964	e8 00 00 00 00	 call	 PyObject_IsInstance

; 4322 :     if (isinstance == -1) {

  01969	83 f8 ff	 cmp	 eax, -1

; 4323 :         return 1;

  0196c	0f 84 14 10 00
	00		 je	 $LN657@obj2ast_st@2

; 4324 :     }
; 4325 :     if (isinstance) {
; 4326 :         asdl_seq* items;
; 4327 :         asdl_seq* body;
; 4328 : 
; 4329 :         if (_PyObject_HasAttrId(obj, &PyId_items)) {

  01972	48 8b cf	 mov	 rcx, rdi
  01975	85 c0		 test	 eax, eax
  01977	0f 84 0d 02 00
	00		 je	 $LN225@obj2ast_st@2
  0197d	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_items
  01982	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  01986	48 8b d3	 mov	 rdx, rbx
  01989	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0198e	85 c0		 test	 eax, eax
  01990	0f 84 e8 01 00
	00		 je	 $LN224@obj2ast_st@2

; 4330 :             int res;
; 4331 :             Py_ssize_t len;
; 4332 :             Py_ssize_t i;
; 4333 :             tmp = _PyObject_GetAttrId(obj, &PyId_items);

  01996	48 8b d3	 mov	 rdx, rbx
  01999	48 8b cf	 mov	 rcx, rdi
  0199c	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  019a1	48 8b d8	 mov	 rbx, rax

; 4334 :             if (tmp == NULL) goto failed;

  019a4	48 85 c0	 test	 rax, rax
  019a7	0f 84 d9 0f 00
	00		 je	 $LN657@obj2ast_st@2

; 4335 :             if (!PyList_Check(tmp)) {

  019ad	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  019b1	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  019bc	75 10		 jne	 SHORT $LN222@obj2ast_st@2

; 4336 :                 PyErr_Format(PyExc_TypeError, "With field \"items\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  019be	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  019c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@DOBGIIJD@With?5field?5?$CCitems?$CC?5must?5be?5a?5lis@

; 4337 :                 goto failed;

  019c9	e9 e3 e8 ff ff	 jmp	 $LN659@obj2ast_st@2
$LN222@obj2ast_st@2:

; 4338 :             }
; 4339 :             len = PyList_GET_SIZE(tmp);

  019ce	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 4340 :             items = asdl_seq_new(len, arena);

  019d2	48 8b d6	 mov	 rdx, rsi
  019d5	48 8b c8	 mov	 rcx, rax
  019d8	48 89 45 ff	 mov	 QWORD PTR len$1$[rbp-89], rax
  019dc	e8 00 00 00 00	 call	 asdl_seq_new
  019e1	48 89 45 17	 mov	 QWORD PTR items$1$[rbp-89], rax

; 4341 :             if (items == NULL) goto failed;

  019e5	48 85 c0	 test	 rax, rax
  019e8	0f 84 cf e8 ff
	ff		 je	 $failed$24670

; 4342 :             for (i = 0; i < len; i++) {

  019ee	45 33 c9	 xor	 r9d, r9d
  019f1	4c 89 4d f7	 mov	 QWORD PTR i$1$[rbp-89], r9
  019f5	4c 39 4d ff	 cmp	 QWORD PTR len$1$[rbp-89], r9
  019f9	7e 3f		 jle	 SHORT $LN216@obj2ast_st@2
  019fb	0f 1f 44 00 00	 npad	 5
$LL220@obj2ast_st@2:

; 4343 :                 withitem_ty value;
; 4344 :                 res = obj2ast_withitem(PyList_GET_ITEM(tmp, i), &value, arena);

  01a00	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  01a04	48 8d 55 0f	 lea	 rdx, QWORD PTR value$25409[rbp-89]
  01a08	4c 8b c6	 mov	 r8, rsi
  01a0b	4a 8b 0c c9	 mov	 rcx, QWORD PTR [rcx+r9*8]
  01a0f	e8 00 00 00 00	 call	 obj2ast_withitem

; 4345 :                 if (res != 0) goto failed;

  01a14	85 c0		 test	 eax, eax
  01a16	0f 85 a1 e8 ff
	ff		 jne	 $failed$24670

; 4346 :                 asdl_seq_SET(items, i, value);

  01a1c	4c 8b 4d f7	 mov	 r9, QWORD PTR i$1$[rbp-89]
  01a20	48 8b 4d 17	 mov	 rcx, QWORD PTR items$1$[rbp-89]
  01a24	48 8b 45 0f	 mov	 rax, QWORD PTR value$25409[rbp-89]
  01a28	4a 89 44 c9 08	 mov	 QWORD PTR [rcx+r9*8+8], rax
  01a2d	49 ff c1	 inc	 r9
  01a30	4c 89 4d f7	 mov	 QWORD PTR i$1$[rbp-89], r9
  01a34	4c 3b 4d ff	 cmp	 r9, QWORD PTR len$1$[rbp-89]
  01a38	7c c6		 jl	 SHORT $LL220@obj2ast_st@2
$LN216@obj2ast_st@2:

; 4347 :             }
; 4348 :             Py_CLEAR(tmp);

  01a3a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01a41	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  01a48	4c 8b cb	 mov	 r9, rbx
  01a4b	41 b8 fc 10 00
	00		 mov	 r8d, 4348		; 000010fcH
  01a51	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01a59	e8 00 00 00 00	 call	 _PyParallel_Guard
  01a5e	85 c0		 test	 eax, eax
  01a60	75 08		 jne	 SHORT $LN215@obj2ast_st@2
  01a62	48 8b cb	 mov	 rcx, rbx
  01a65	e8 00 00 00 00	 call	 _Py_DecRef
$LN215@obj2ast_st@2:

; 4352 :         }
; 4353 :         if (_PyObject_HasAttrId(obj, &PyId_body)) {

  01a6a	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_body
  01a6f	48 8b cf	 mov	 rcx, rdi
  01a72	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  01a76	48 8b d3	 mov	 rdx, rbx
  01a79	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  01a7e	85 c0		 test	 eax, eax
  01a80	0f 84 ec 00 00
	00		 je	 $LN211@obj2ast_st@2

; 4354 :             int res;
; 4355 :             Py_ssize_t len;
; 4356 :             Py_ssize_t i;
; 4357 :             tmp = _PyObject_GetAttrId(obj, &PyId_body);

  01a86	48 8b d3	 mov	 rdx, rbx
  01a89	48 8b cf	 mov	 rcx, rdi
  01a8c	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  01a91	48 8b d8	 mov	 rbx, rax

; 4358 :             if (tmp == NULL) goto failed;

  01a94	48 85 c0	 test	 rax, rax
  01a97	0f 84 e9 0e 00
	00		 je	 $LN657@obj2ast_st@2

; 4359 :             if (!PyList_Check(tmp)) {

  01a9d	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  01aa1	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  01aac	75 10		 jne	 SHORT $LN209@obj2ast_st@2

; 4360 :                 PyErr_Format(PyExc_TypeError, "With field \"body\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  01aae	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  01ab2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@OEFDOBHK@With?5field?5?$CCbody?$CC?5must?5be?5a?5list@

; 4361 :                 goto failed;

  01ab9	e9 f3 e7 ff ff	 jmp	 $LN659@obj2ast_st@2
$LN209@obj2ast_st@2:

; 4362 :             }
; 4363 :             len = PyList_GET_SIZE(tmp);

  01abe	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 4364 :             body = asdl_seq_new(len, arena);

  01ac2	48 8b d6	 mov	 rdx, rsi
  01ac5	48 8b c8	 mov	 rcx, rax
  01ac8	48 89 45 f7	 mov	 QWORD PTR len$1$[rbp-89], rax
  01acc	e8 00 00 00 00	 call	 asdl_seq_new
  01ad1	48 89 45 ff	 mov	 QWORD PTR body$1$[rbp-89], rax

; 4365 :             if (body == NULL) goto failed;

  01ad5	48 85 c0	 test	 rax, rax
  01ad8	0f 84 df e7 ff
	ff		 je	 $failed$24670

; 4366 :             for (i = 0; i < len; i++) {

  01ade	33 ff		 xor	 edi, edi
  01ae0	48 39 7d f7	 cmp	 QWORD PTR len$1$[rbp-89], rdi
  01ae4	7e 3b		 jle	 SHORT $LN203@obj2ast_st@2
  01ae6	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL207@obj2ast_st@2:

; 4367 :                 stmt_ty value;
; 4368 :                 res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);

  01af0	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  01af4	48 8d 55 0f	 lea	 rdx, QWORD PTR value$25437[rbp-89]
  01af8	4c 8b c6	 mov	 r8, rsi
  01afb	48 8b 0c f9	 mov	 rcx, QWORD PTR [rcx+rdi*8]
  01aff	e8 00 00 00 00	 call	 obj2ast_stmt

; 4369 :                 if (res != 0) goto failed;

  01b04	85 c0		 test	 eax, eax
  01b06	0f 85 b1 e7 ff
	ff		 jne	 $failed$24670

; 4370 :                 asdl_seq_SET(body, i, value);

  01b0c	48 8b 4d ff	 mov	 rcx, QWORD PTR body$1$[rbp-89]
  01b10	48 8b 45 0f	 mov	 rax, QWORD PTR value$25437[rbp-89]
  01b14	48 ff c7	 inc	 rdi
  01b17	48 89 04 f9	 mov	 QWORD PTR [rcx+rdi*8], rax
  01b1b	48 3b 7d f7	 cmp	 rdi, QWORD PTR len$1$[rbp-89]
  01b1f	7c cf		 jl	 SHORT $LL207@obj2ast_st@2
$LN203@obj2ast_st@2:

; 4371 :             }
; 4372 :             Py_CLEAR(tmp);

  01b21	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01b28	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  01b2f	4c 8b cb	 mov	 r9, rbx
  01b32	41 b8 14 11 00
	00		 mov	 r8d, 4372		; 00001114H
  01b38	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01b40	e8 00 00 00 00	 call	 _PyParallel_Guard
  01b45	85 c0		 test	 eax, eax
  01b47	75 0a		 jne	 SHORT $LN202@obj2ast_st@2
  01b49	48 8b cb	 mov	 rcx, rbx
  01b4c	33 db		 xor	 ebx, ebx
  01b4e	e8 00 00 00 00	 call	 _Py_DecRef
$LN202@obj2ast_st@2:

; 4376 :         }
; 4377 :         *out = With(items, body, lineno, col_offset, arena);

  01b53	44 8b 4d 67	 mov	 r9d, DWORD PTR col_offset$[rbp-89]
  01b57	44 8b 45 7f	 mov	 r8d, DWORD PTR lineno$[rbp-89]
  01b5b	48 8b 55 ff	 mov	 rdx, QWORD PTR body$1$[rbp-89]
  01b5f	48 8b 4d 17	 mov	 rcx, QWORD PTR items$1$[rbp-89]
  01b63	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  01b68	e8 00 00 00 00	 call	 _Py_With

; 4378 :         if (*out == NULL) goto failed;
; 4379 :         return 0;

  01b6d	e9 d5 0d 00 00	 jmp	 $LN660@obj2ast_st@2
$LN211@obj2ast_st@2:

; 4373 :         } else {
; 4374 :             PyErr_SetString(PyExc_TypeError, "required field \"body\" missing from With");

  01b72	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@GADJBKKB@required?5field?5?$CCbody?$CC?5missing?5fr@

; 4375 :             return 1;

  01b79	e9 fc 0d 00 00	 jmp	 $LN658@obj2ast_st@2
$LN224@obj2ast_st@2:

; 4349 :         } else {
; 4350 :             PyErr_SetString(PyExc_TypeError, "required field \"items\" missing from With");

  01b7e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@CALAEGDB@required?5field?5?$CCitems?$CC?5missing?5f@

; 4351 :             return 1;

  01b85	e9 f0 0d 00 00	 jmp	 $LN658@obj2ast_st@2
$LN225@obj2ast_st@2:

; 4380 :     }
; 4381 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Raise_type);

  01b8a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Raise_type
  01b91	e8 00 00 00 00	 call	 PyObject_IsInstance

; 4382 :     if (isinstance == -1) {

  01b96	83 f8 ff	 cmp	 eax, -1

; 4383 :         return 1;

  01b99	0f 84 e7 0d 00
	00		 je	 $LN657@obj2ast_st@2

; 4384 :     }
; 4385 :     if (isinstance) {

  01b9f	85 c0		 test	 eax, eax
  01ba1	0f 84 34 01 00
	00		 je	 $LN196@obj2ast_st@2

; 4386 :         expr_ty exc;
; 4387 :         expr_ty cause;
; 4388 : 
; 4389 :         if (_PyObject_HasAttrId(obj, &PyId_exc)) {

  01ba7	48 8b 55 07	 mov	 rdx, QWORD PTR tv4777[rbp-89]
  01bab	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:PyId_exc
  01bb0	48 03 d1	 add	 rdx, rcx
  01bb3	48 8b cf	 mov	 rcx, rdi
  01bb6	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  01bbb	85 c0		 test	 eax, eax
  01bbd	74 70		 je	 SHORT $LN195@obj2ast_st@2

; 4390 :             int res;
; 4391 :             tmp = _PyObject_GetAttrId(obj, &PyId_exc);

  01bbf	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_exc
  01bc4	48 8b cf	 mov	 rcx, rdi
  01bc7	48 03 55 07	 add	 rdx, QWORD PTR tv4777[rbp-89]
  01bcb	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  01bd0	48 8b d8	 mov	 rbx, rax

; 4392 :             if (tmp == NULL) goto failed;

  01bd3	48 85 c0	 test	 rax, rax
  01bd6	0f 84 aa 0d 00
	00		 je	 $LN657@obj2ast_st@2

; 4393 :             res = obj2ast_expr(tmp, &exc, arena);

  01bdc	48 8d 55 f7	 lea	 rdx, QWORD PTR exc$25455[rbp-89]
  01be0	4c 8b c6	 mov	 r8, rsi
  01be3	48 8b c8	 mov	 rcx, rax
  01be6	e8 00 00 00 00	 call	 obj2ast_expr

; 4394 :             if (res != 0) goto failed;

  01beb	85 c0		 test	 eax, eax
  01bed	0f 85 ca e6 ff
	ff		 jne	 $failed$24670

; 4395 :             Py_CLEAR(tmp);

  01bf3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01bfa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  01c01	4c 8b cb	 mov	 r9, rbx
  01c04	41 b8 2b 11 00
	00		 mov	 r8d, 4395		; 0000112bH
  01c0a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01c12	e8 00 00 00 00	 call	 _PyParallel_Guard
  01c17	85 c0		 test	 eax, eax
  01c19	75 0a		 jne	 SHORT $LN651@obj2ast_st@2
  01c1b	48 8b cb	 mov	 rcx, rbx
  01c1e	33 db		 xor	 ebx, ebx
  01c20	e8 00 00 00 00	 call	 _Py_DecRef
$LN651@obj2ast_st@2:

; 4396 :         } else {

  01c25	48 8b 45 f7	 mov	 rax, QWORD PTR exc$25455[rbp-89]
  01c29	48 89 45 27	 mov	 QWORD PTR exc$1$[rbp-89], rax
  01c2d	eb 08		 jmp	 SHORT $LN188@obj2ast_st@2
$LN195@obj2ast_st@2:

; 4397 :             exc = NULL;

  01c2f	48 c7 45 27 00
	00 00 00	 mov	 QWORD PTR exc$1$[rbp-89], 0
$LN188@obj2ast_st@2:

; 4398 :         }
; 4399 :         if (_PyObject_HasAttrId(obj, &PyId_cause)) {

  01c37	48 8b 55 07	 mov	 rdx, QWORD PTR tv4777[rbp-89]
  01c3b	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:PyId_cause
  01c40	48 03 d1	 add	 rdx, rcx
  01c43	48 8b cf	 mov	 rcx, rdi
  01c46	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  01c4b	85 c0		 test	 eax, eax
  01c4d	74 6c		 je	 SHORT $LN187@obj2ast_st@2

; 4400 :             int res;
; 4401 :             tmp = _PyObject_GetAttrId(obj, &PyId_cause);

  01c4f	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_cause
  01c54	48 8b cf	 mov	 rcx, rdi
  01c57	48 03 55 07	 add	 rdx, QWORD PTR tv4777[rbp-89]
  01c5b	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  01c60	48 8b d8	 mov	 rbx, rax

; 4402 :             if (tmp == NULL) goto failed;

  01c63	48 85 c0	 test	 rax, rax
  01c66	0f 84 1a 0d 00
	00		 je	 $LN657@obj2ast_st@2

; 4403 :             res = obj2ast_expr(tmp, &cause, arena);

  01c6c	48 8d 55 f7	 lea	 rdx, QWORD PTR cause$25456[rbp-89]
  01c70	4c 8b c6	 mov	 r8, rsi
  01c73	48 8b c8	 mov	 rcx, rax
  01c76	e8 00 00 00 00	 call	 obj2ast_expr

; 4404 :             if (res != 0) goto failed;

  01c7b	85 c0		 test	 eax, eax
  01c7d	0f 85 3a e6 ff
	ff		 jne	 $failed$24670

; 4405 :             Py_CLEAR(tmp);

  01c83	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01c8a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  01c91	4c 8b cb	 mov	 r9, rbx
  01c94	41 b8 35 11 00
	00		 mov	 r8d, 4405		; 00001135H
  01c9a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01ca2	e8 00 00 00 00	 call	 _PyParallel_Guard
  01ca7	85 c0		 test	 eax, eax
  01ca9	75 0a		 jne	 SHORT $LN652@obj2ast_st@2
  01cab	48 8b cb	 mov	 rcx, rbx
  01cae	33 db		 xor	 ebx, ebx
  01cb0	e8 00 00 00 00	 call	 _Py_DecRef
$LN652@obj2ast_st@2:

; 4406 :         } else {

  01cb5	48 8b 45 f7	 mov	 rax, QWORD PTR cause$25456[rbp-89]
  01cb9	eb 02		 jmp	 SHORT $LN180@obj2ast_st@2
$LN187@obj2ast_st@2:
  01cbb	33 c0		 xor	 eax, eax
$LN180@obj2ast_st@2:

; 4407 :             cause = NULL;
; 4408 :         }
; 4409 :         *out = Raise(exc, cause, lineno, col_offset, arena);

  01cbd	44 8b 4d 67	 mov	 r9d, DWORD PTR col_offset$[rbp-89]
  01cc1	44 8b 45 7f	 mov	 r8d, DWORD PTR lineno$[rbp-89]
  01cc5	48 8b 4d 27	 mov	 rcx, QWORD PTR exc$1$[rbp-89]
  01cc9	48 8b d0	 mov	 rdx, rax
  01ccc	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  01cd1	e8 00 00 00 00	 call	 _Py_Raise

; 4410 :         if (*out == NULL) goto failed;
; 4411 :         return 0;

  01cd6	e9 6c 0c 00 00	 jmp	 $LN660@obj2ast_st@2
$LN196@obj2ast_st@2:

; 4412 :     }
; 4413 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Try_type);

  01cdb	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Try_type
  01ce2	48 8b cf	 mov	 rcx, rdi
  01ce5	e8 00 00 00 00	 call	 PyObject_IsInstance

; 4414 :     if (isinstance == -1) {

  01cea	83 f8 ff	 cmp	 eax, -1

; 4415 :         return 1;

  01ced	0f 84 93 0c 00
	00		 je	 $LN657@obj2ast_st@2

; 4416 :     }
; 4417 :     if (isinstance) {
; 4418 :         asdl_seq* body;
; 4419 :         asdl_seq* handlers;
; 4420 :         asdl_seq* orelse;
; 4421 :         asdl_seq* finalbody;
; 4422 : 
; 4423 :         if (_PyObject_HasAttrId(obj, &PyId_body)) {

  01cf3	48 8b cf	 mov	 rcx, rdi
  01cf6	85 c0		 test	 eax, eax
  01cf8	0f 84 12 04 00
	00		 je	 $LN177@obj2ast_st@2
  01cfe	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_body
  01d03	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  01d07	48 8b d3	 mov	 rdx, rbx
  01d0a	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  01d0f	85 c0		 test	 eax, eax
  01d11	0f 84 ed 03 00
	00		 je	 $LN176@obj2ast_st@2

; 4424 :             int res;
; 4425 :             Py_ssize_t len;
; 4426 :             Py_ssize_t i;
; 4427 :             tmp = _PyObject_GetAttrId(obj, &PyId_body);

  01d17	48 8b d3	 mov	 rdx, rbx
  01d1a	48 8b cf	 mov	 rcx, rdi
  01d1d	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  01d22	48 8b d8	 mov	 rbx, rax

; 4428 :             if (tmp == NULL) goto failed;

  01d25	48 85 c0	 test	 rax, rax
  01d28	0f 84 58 0c 00
	00		 je	 $LN657@obj2ast_st@2

; 4429 :             if (!PyList_Check(tmp)) {

  01d2e	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  01d32	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  01d3d	75 10		 jne	 SHORT $LN174@obj2ast_st@2

; 4430 :                 PyErr_Format(PyExc_TypeError, "Try field \"body\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  01d3f	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  01d43	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@IDFBPFON@Try?5field?5?$CCbody?$CC?5must?5be?5a?5list?0@

; 4431 :                 goto failed;

  01d4a	e9 62 e5 ff ff	 jmp	 $LN659@obj2ast_st@2
$LN174@obj2ast_st@2:

; 4432 :             }
; 4433 :             len = PyList_GET_SIZE(tmp);

  01d4f	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 4434 :             body = asdl_seq_new(len, arena);

  01d53	48 8b d6	 mov	 rdx, rsi
  01d56	48 8b c8	 mov	 rcx, rax
  01d59	48 89 45 ff	 mov	 QWORD PTR len$1$[rbp-89], rax
  01d5d	e8 00 00 00 00	 call	 asdl_seq_new
  01d62	48 89 45 3f	 mov	 QWORD PTR body$1$[rbp-89], rax

; 4435 :             if (body == NULL) goto failed;

  01d66	48 85 c0	 test	 rax, rax
  01d69	0f 84 4e e5 ff
	ff		 je	 $failed$24670

; 4436 :             for (i = 0; i < len; i++) {

  01d6f	45 33 c9	 xor	 r9d, r9d
  01d72	4c 89 4d f7	 mov	 QWORD PTR i$1$[rbp-89], r9
  01d76	4c 39 4d ff	 cmp	 QWORD PTR len$1$[rbp-89], r9
  01d7a	7e 3e		 jle	 SHORT $LN168@obj2ast_st@2
  01d7c	0f 1f 40 00	 npad	 4
$LL172@obj2ast_st@2:

; 4437 :                 stmt_ty value;
; 4438 :                 res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);

  01d80	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  01d84	48 8d 55 0f	 lea	 rdx, QWORD PTR value$25511[rbp-89]
  01d88	4c 8b c6	 mov	 r8, rsi
  01d8b	4a 8b 0c c9	 mov	 rcx, QWORD PTR [rcx+r9*8]
  01d8f	e8 00 00 00 00	 call	 obj2ast_stmt

; 4439 :                 if (res != 0) goto failed;

  01d94	85 c0		 test	 eax, eax
  01d96	0f 85 21 e5 ff
	ff		 jne	 $failed$24670

; 4440 :                 asdl_seq_SET(body, i, value);

  01d9c	4c 8b 4d f7	 mov	 r9, QWORD PTR i$1$[rbp-89]
  01da0	48 8b 4d 3f	 mov	 rcx, QWORD PTR body$1$[rbp-89]
  01da4	48 8b 45 0f	 mov	 rax, QWORD PTR value$25511[rbp-89]
  01da8	4a 89 44 c9 08	 mov	 QWORD PTR [rcx+r9*8+8], rax
  01dad	49 ff c1	 inc	 r9
  01db0	4c 89 4d f7	 mov	 QWORD PTR i$1$[rbp-89], r9
  01db4	4c 3b 4d ff	 cmp	 r9, QWORD PTR len$1$[rbp-89]
  01db8	7c c6		 jl	 SHORT $LL172@obj2ast_st@2
$LN168@obj2ast_st@2:

; 4441 :             }
; 4442 :             Py_CLEAR(tmp);

  01dba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01dc1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  01dc8	4c 8b cb	 mov	 r9, rbx
  01dcb	41 b8 5a 11 00
	00		 mov	 r8d, 4442		; 0000115aH
  01dd1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01dd9	e8 00 00 00 00	 call	 _PyParallel_Guard
  01dde	85 c0		 test	 eax, eax
  01de0	75 08		 jne	 SHORT $LN167@obj2ast_st@2
  01de2	48 8b cb	 mov	 rcx, rbx
  01de5	e8 00 00 00 00	 call	 _Py_DecRef
$LN167@obj2ast_st@2:

; 4446 :         }
; 4447 :         if (_PyObject_HasAttrId(obj, &PyId_handlers)) {

  01dea	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_handlers
  01def	48 8b cf	 mov	 rcx, rdi
  01df2	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  01df6	48 8b d3	 mov	 rdx, rbx
  01df9	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  01dfe	85 c0		 test	 eax, eax
  01e00	0f 84 f2 02 00
	00		 je	 $LN163@obj2ast_st@2

; 4448 :             int res;
; 4449 :             Py_ssize_t len;
; 4450 :             Py_ssize_t i;
; 4451 :             tmp = _PyObject_GetAttrId(obj, &PyId_handlers);

  01e06	48 8b d3	 mov	 rdx, rbx
  01e09	48 8b cf	 mov	 rcx, rdi
  01e0c	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  01e11	48 8b d8	 mov	 rbx, rax

; 4452 :             if (tmp == NULL) goto failed;

  01e14	48 85 c0	 test	 rax, rax
  01e17	0f 84 69 0b 00
	00		 je	 $LN657@obj2ast_st@2

; 4453 :             if (!PyList_Check(tmp)) {

  01e1d	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  01e21	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  01e2c	75 10		 jne	 SHORT $LN161@obj2ast_st@2

; 4454 :                 PyErr_Format(PyExc_TypeError, "Try field \"handlers\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  01e2e	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  01e32	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@OJKLHJOP@Try?5field?5?$CChandlers?$CC?5must?5be?5a?5l@

; 4455 :                 goto failed;

  01e39	e9 73 e4 ff ff	 jmp	 $LN659@obj2ast_st@2
$LN161@obj2ast_st@2:

; 4456 :             }
; 4457 :             len = PyList_GET_SIZE(tmp);

  01e3e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 4458 :             handlers = asdl_seq_new(len, arena);

  01e42	48 8b d6	 mov	 rdx, rsi
  01e45	48 8b c8	 mov	 rcx, rax
  01e48	48 89 45 ff	 mov	 QWORD PTR len$1$[rbp-89], rax
  01e4c	e8 00 00 00 00	 call	 asdl_seq_new
  01e51	48 89 45 1f	 mov	 QWORD PTR handlers$1$[rbp-89], rax

; 4459 :             if (handlers == NULL) goto failed;

  01e55	48 85 c0	 test	 rax, rax
  01e58	0f 84 5f e4 ff
	ff		 je	 $failed$24670

; 4460 :             for (i = 0; i < len; i++) {

  01e5e	45 33 c9	 xor	 r9d, r9d
  01e61	4c 89 4d f7	 mov	 QWORD PTR i$1$[rbp-89], r9
  01e65	4c 39 4d ff	 cmp	 QWORD PTR len$1$[rbp-89], r9
  01e69	7e 3f		 jle	 SHORT $LN155@obj2ast_st@2
  01e6b	0f 1f 44 00 00	 npad	 5
$LL159@obj2ast_st@2:

; 4461 :                 excepthandler_ty value;
; 4462 :                 res = obj2ast_excepthandler(PyList_GET_ITEM(tmp, i), &value, arena);

  01e70	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  01e74	48 8d 55 0f	 lea	 rdx, QWORD PTR value$25539[rbp-89]
  01e78	4c 8b c6	 mov	 r8, rsi
  01e7b	4a 8b 0c c9	 mov	 rcx, QWORD PTR [rcx+r9*8]
  01e7f	e8 00 00 00 00	 call	 obj2ast_excepthandler

; 4463 :                 if (res != 0) goto failed;

  01e84	85 c0		 test	 eax, eax
  01e86	0f 85 31 e4 ff
	ff		 jne	 $failed$24670

; 4464 :                 asdl_seq_SET(handlers, i, value);

  01e8c	4c 8b 4d f7	 mov	 r9, QWORD PTR i$1$[rbp-89]
  01e90	48 8b 4d 1f	 mov	 rcx, QWORD PTR handlers$1$[rbp-89]
  01e94	48 8b 45 0f	 mov	 rax, QWORD PTR value$25539[rbp-89]
  01e98	4a 89 44 c9 08	 mov	 QWORD PTR [rcx+r9*8+8], rax
  01e9d	49 ff c1	 inc	 r9
  01ea0	4c 89 4d f7	 mov	 QWORD PTR i$1$[rbp-89], r9
  01ea4	4c 3b 4d ff	 cmp	 r9, QWORD PTR len$1$[rbp-89]
  01ea8	7c c6		 jl	 SHORT $LL159@obj2ast_st@2
$LN155@obj2ast_st@2:

; 4465 :             }
; 4466 :             Py_CLEAR(tmp);

  01eaa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01eb1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  01eb8	4c 8b cb	 mov	 r9, rbx
  01ebb	41 b8 72 11 00
	00		 mov	 r8d, 4466		; 00001172H
  01ec1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01ec9	e8 00 00 00 00	 call	 _PyParallel_Guard
  01ece	85 c0		 test	 eax, eax
  01ed0	75 08		 jne	 SHORT $LN154@obj2ast_st@2
  01ed2	48 8b cb	 mov	 rcx, rbx
  01ed5	e8 00 00 00 00	 call	 _Py_DecRef
$LN154@obj2ast_st@2:

; 4470 :         }
; 4471 :         if (_PyObject_HasAttrId(obj, &PyId_orelse)) {

  01eda	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_orelse
  01edf	48 8b cf	 mov	 rcx, rdi
  01ee2	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  01ee6	48 8b d3	 mov	 rdx, rbx
  01ee9	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  01eee	85 c0		 test	 eax, eax
  01ef0	0f 84 f6 01 00
	00		 je	 $LN150@obj2ast_st@2

; 4472 :             int res;
; 4473 :             Py_ssize_t len;
; 4474 :             Py_ssize_t i;
; 4475 :             tmp = _PyObject_GetAttrId(obj, &PyId_orelse);

  01ef6	48 8b d3	 mov	 rdx, rbx
  01ef9	48 8b cf	 mov	 rcx, rdi
  01efc	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  01f01	48 8b d8	 mov	 rbx, rax

; 4476 :             if (tmp == NULL) goto failed;

  01f04	48 85 c0	 test	 rax, rax
  01f07	0f 84 79 0a 00
	00		 je	 $LN657@obj2ast_st@2

; 4477 :             if (!PyList_Check(tmp)) {

  01f0d	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  01f11	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  01f1c	75 10		 jne	 SHORT $LN148@obj2ast_st@2

; 4478 :                 PyErr_Format(PyExc_TypeError, "Try field \"orelse\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  01f1e	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  01f22	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@PCPJJJJH@Try?5field?5?$CCorelse?$CC?5must?5be?5a?5lis@

; 4479 :                 goto failed;

  01f29	e9 83 e3 ff ff	 jmp	 $LN659@obj2ast_st@2
$LN148@obj2ast_st@2:

; 4480 :             }
; 4481 :             len = PyList_GET_SIZE(tmp);

  01f2e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 4482 :             orelse = asdl_seq_new(len, arena);

  01f32	48 8b d6	 mov	 rdx, rsi
  01f35	48 8b c8	 mov	 rcx, rax
  01f38	48 89 45 ff	 mov	 QWORD PTR len$1$[rbp-89], rax
  01f3c	e8 00 00 00 00	 call	 asdl_seq_new
  01f41	48 89 45 17	 mov	 QWORD PTR orelse$1$[rbp-89], rax

; 4483 :             if (orelse == NULL) goto failed;

  01f45	48 85 c0	 test	 rax, rax
  01f48	0f 84 6f e3 ff
	ff		 je	 $failed$24670

; 4484 :             for (i = 0; i < len; i++) {

  01f4e	45 33 c9	 xor	 r9d, r9d
  01f51	4c 89 4d f7	 mov	 QWORD PTR i$1$[rbp-89], r9
  01f55	4c 39 4d ff	 cmp	 QWORD PTR len$1$[rbp-89], r9
  01f59	7e 3f		 jle	 SHORT $LN142@obj2ast_st@2
  01f5b	0f 1f 44 00 00	 npad	 5
$LL146@obj2ast_st@2:

; 4485 :                 stmt_ty value;
; 4486 :                 res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);

  01f60	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  01f64	48 8d 55 0f	 lea	 rdx, QWORD PTR value$25567[rbp-89]
  01f68	4c 8b c6	 mov	 r8, rsi
  01f6b	4a 8b 0c c9	 mov	 rcx, QWORD PTR [rcx+r9*8]
  01f6f	e8 00 00 00 00	 call	 obj2ast_stmt

; 4487 :                 if (res != 0) goto failed;

  01f74	85 c0		 test	 eax, eax
  01f76	0f 85 41 e3 ff
	ff		 jne	 $failed$24670

; 4488 :                 asdl_seq_SET(orelse, i, value);

  01f7c	4c 8b 4d f7	 mov	 r9, QWORD PTR i$1$[rbp-89]
  01f80	48 8b 4d 17	 mov	 rcx, QWORD PTR orelse$1$[rbp-89]
  01f84	48 8b 45 0f	 mov	 rax, QWORD PTR value$25567[rbp-89]
  01f88	4a 89 44 c9 08	 mov	 QWORD PTR [rcx+r9*8+8], rax
  01f8d	49 ff c1	 inc	 r9
  01f90	4c 89 4d f7	 mov	 QWORD PTR i$1$[rbp-89], r9
  01f94	4c 3b 4d ff	 cmp	 r9, QWORD PTR len$1$[rbp-89]
  01f98	7c c6		 jl	 SHORT $LL146@obj2ast_st@2
$LN142@obj2ast_st@2:

; 4489 :             }
; 4490 :             Py_CLEAR(tmp);

  01f9a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01fa1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  01fa8	4c 8b cb	 mov	 r9, rbx
  01fab	41 b8 8a 11 00
	00		 mov	 r8d, 4490		; 0000118aH
  01fb1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01fb9	e8 00 00 00 00	 call	 _PyParallel_Guard
  01fbe	85 c0		 test	 eax, eax
  01fc0	75 08		 jne	 SHORT $LN141@obj2ast_st@2
  01fc2	48 8b cb	 mov	 rcx, rbx
  01fc5	e8 00 00 00 00	 call	 _Py_DecRef
$LN141@obj2ast_st@2:

; 4494 :         }
; 4495 :         if (_PyObject_HasAttrId(obj, &PyId_finalbody)) {

  01fca	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_finalbody
  01fcf	48 8b cf	 mov	 rcx, rdi
  01fd2	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  01fd6	48 8b d3	 mov	 rdx, rbx
  01fd9	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  01fde	85 c0		 test	 eax, eax
  01fe0	0f 84 fa 00 00
	00		 je	 $LN137@obj2ast_st@2

; 4496 :             int res;
; 4497 :             Py_ssize_t len;
; 4498 :             Py_ssize_t i;
; 4499 :             tmp = _PyObject_GetAttrId(obj, &PyId_finalbody);

  01fe6	48 8b d3	 mov	 rdx, rbx
  01fe9	48 8b cf	 mov	 rcx, rdi
  01fec	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  01ff1	48 8b d8	 mov	 rbx, rax

; 4500 :             if (tmp == NULL) goto failed;

  01ff4	48 85 c0	 test	 rax, rax
  01ff7	0f 84 89 09 00
	00		 je	 $LN657@obj2ast_st@2

; 4501 :             if (!PyList_Check(tmp)) {

  01ffd	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  02001	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  0200c	75 10		 jne	 SHORT $LN135@obj2ast_st@2

; 4502 :                 PyErr_Format(PyExc_TypeError, "Try field \"finalbody\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  0200e	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  02012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@LHHDMHOG@Try?5field?5?$CCfinalbody?$CC?5must?5be?5a?5@

; 4503 :                 goto failed;

  02019	e9 93 e2 ff ff	 jmp	 $LN659@obj2ast_st@2
$LN135@obj2ast_st@2:

; 4504 :             }
; 4505 :             len = PyList_GET_SIZE(tmp);

  0201e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 4506 :             finalbody = asdl_seq_new(len, arena);

  02022	48 8b d6	 mov	 rdx, rsi
  02025	48 8b c8	 mov	 rcx, rax
  02028	48 89 45 f7	 mov	 QWORD PTR len$1$[rbp-89], rax
  0202c	e8 00 00 00 00	 call	 asdl_seq_new
  02031	48 89 45 ff	 mov	 QWORD PTR finalbody$1$[rbp-89], rax

; 4507 :             if (finalbody == NULL) goto failed;

  02035	48 85 c0	 test	 rax, rax
  02038	0f 84 7f e2 ff
	ff		 je	 $failed$24670

; 4508 :             for (i = 0; i < len; i++) {

  0203e	33 ff		 xor	 edi, edi
  02040	48 39 7d f7	 cmp	 QWORD PTR len$1$[rbp-89], rdi
  02044	7e 3b		 jle	 SHORT $LN129@obj2ast_st@2
  02046	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL133@obj2ast_st@2:

; 4509 :                 stmt_ty value;
; 4510 :                 res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);

  02050	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  02054	48 8d 55 0f	 lea	 rdx, QWORD PTR value$25595[rbp-89]
  02058	4c 8b c6	 mov	 r8, rsi
  0205b	48 8b 0c f9	 mov	 rcx, QWORD PTR [rcx+rdi*8]
  0205f	e8 00 00 00 00	 call	 obj2ast_stmt

; 4511 :                 if (res != 0) goto failed;

  02064	85 c0		 test	 eax, eax
  02066	0f 85 51 e2 ff
	ff		 jne	 $failed$24670

; 4512 :                 asdl_seq_SET(finalbody, i, value);

  0206c	48 8b 4d ff	 mov	 rcx, QWORD PTR finalbody$1$[rbp-89]
  02070	48 8b 45 0f	 mov	 rax, QWORD PTR value$25595[rbp-89]
  02074	48 ff c7	 inc	 rdi
  02077	48 89 04 f9	 mov	 QWORD PTR [rcx+rdi*8], rax
  0207b	48 3b 7d f7	 cmp	 rdi, QWORD PTR len$1$[rbp-89]
  0207f	7c cf		 jl	 SHORT $LL133@obj2ast_st@2
$LN129@obj2ast_st@2:

; 4513 :             }
; 4514 :             Py_CLEAR(tmp);

  02081	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  02088	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  0208f	4c 8b cb	 mov	 r9, rbx
  02092	41 b8 a2 11 00
	00		 mov	 r8d, 4514		; 000011a2H
  02098	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  020a0	e8 00 00 00 00	 call	 _PyParallel_Guard
  020a5	85 c0		 test	 eax, eax
  020a7	75 0a		 jne	 SHORT $LN128@obj2ast_st@2
  020a9	48 8b cb	 mov	 rcx, rbx
  020ac	33 db		 xor	 ebx, ebx
  020ae	e8 00 00 00 00	 call	 _Py_DecRef
$LN128@obj2ast_st@2:

; 4518 :         }
; 4519 :         *out = Try(body, handlers, orelse, finalbody, lineno, col_offset,
; 4520 :                    arena);

  020b3	8b 45 67	 mov	 eax, DWORD PTR col_offset$[rbp-89]
  020b6	4c 8b 4d ff	 mov	 r9, QWORD PTR finalbody$1$[rbp-89]
  020ba	4c 8b 45 17	 mov	 r8, QWORD PTR orelse$1$[rbp-89]
  020be	48 8b 55 1f	 mov	 rdx, QWORD PTR handlers$1$[rbp-89]
  020c2	48 8b 4d 3f	 mov	 rcx, QWORD PTR body$1$[rbp-89]
  020c6	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  020cb	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  020cf	8b 45 7f	 mov	 eax, DWORD PTR lineno$[rbp-89]
  020d2	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  020d6	e8 00 00 00 00	 call	 _Py_Try

; 4521 :         if (*out == NULL) goto failed;
; 4522 :         return 0;

  020db	e9 67 08 00 00	 jmp	 $LN660@obj2ast_st@2
$LN137@obj2ast_st@2:

; 4515 :         } else {
; 4516 :             PyErr_SetString(PyExc_TypeError, "required field \"finalbody\" missing from Try");

  020e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@LKCDFMOJ@required?5field?5?$CCfinalbody?$CC?5missi@

; 4517 :             return 1;

  020e7	e9 8e 08 00 00	 jmp	 $LN658@obj2ast_st@2
$LN150@obj2ast_st@2:

; 4491 :         } else {
; 4492 :             PyErr_SetString(PyExc_TypeError, "required field \"orelse\" missing from Try");

  020ec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@HAGINNCN@required?5field?5?$CCorelse?$CC?5missing?5@

; 4493 :             return 1;

  020f3	e9 82 08 00 00	 jmp	 $LN658@obj2ast_st@2
$LN163@obj2ast_st@2:

; 4467 :         } else {
; 4468 :             PyErr_SetString(PyExc_TypeError, "required field \"handlers\" missing from Try");

  020f8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@KPJIMCMF@required?5field?5?$CChandlers?$CC?5missin@

; 4469 :             return 1;

  020ff	e9 76 08 00 00	 jmp	 $LN658@obj2ast_st@2
$LN176@obj2ast_st@2:

; 4443 :         } else {
; 4444 :             PyErr_SetString(PyExc_TypeError, "required field \"body\" missing from Try");

  02104	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@HNJFAAMH@required?5field?5?$CCbody?$CC?5missing?5fr@

; 4445 :             return 1;

  0210b	e9 6a 08 00 00	 jmp	 $LN658@obj2ast_st@2
$LN177@obj2ast_st@2:

; 4523 :     }
; 4524 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Assert_type);

  02110	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Assert_type
  02117	e8 00 00 00 00	 call	 PyObject_IsInstance

; 4525 :     if (isinstance == -1) {

  0211c	83 f8 ff	 cmp	 eax, -1

; 4526 :         return 1;

  0211f	0f 84 61 08 00
	00		 je	 $LN657@obj2ast_st@2

; 4527 :     }
; 4528 :     if (isinstance) {
; 4529 :         expr_ty test;
; 4530 :         expr_ty msg;
; 4531 : 
; 4532 :         if (_PyObject_HasAttrId(obj, &PyId_test)) {

  02125	48 8b cf	 mov	 rcx, rdi
  02128	85 c0		 test	 eax, eax
  0212a	0f 84 29 01 00
	00		 je	 $LN122@obj2ast_st@2
  02130	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_test
  02135	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  02139	48 8b d3	 mov	 rdx, rbx
  0213c	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  02141	85 c0		 test	 eax, eax
  02143	0f 84 04 01 00
	00		 je	 $LN121@obj2ast_st@2

; 4533 :             int res;
; 4534 :             tmp = _PyObject_GetAttrId(obj, &PyId_test);

  02149	48 8b d3	 mov	 rdx, rbx
  0214c	48 8b cf	 mov	 rcx, rdi
  0214f	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  02154	48 8b d8	 mov	 rbx, rax

; 4535 :             if (tmp == NULL) goto failed;

  02157	48 85 c0	 test	 rax, rax
  0215a	0f 84 26 08 00
	00		 je	 $LN657@obj2ast_st@2

; 4536 :             res = obj2ast_expr(tmp, &test, arena);

  02160	48 8d 55 0f	 lea	 rdx, QWORD PTR test$25613[rbp-89]
  02164	4c 8b c6	 mov	 r8, rsi
  02167	48 8b c8	 mov	 rcx, rax
  0216a	e8 00 00 00 00	 call	 obj2ast_expr

; 4537 :             if (res != 0) goto failed;

  0216f	85 c0		 test	 eax, eax
  02171	0f 85 46 e1 ff
	ff		 jne	 $failed$24670

; 4538 :             Py_CLEAR(tmp);

  02177	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0217e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  02185	4c 8b cb	 mov	 r9, rbx
  02188	41 b8 ba 11 00
	00		 mov	 r8d, 4538		; 000011baH
  0218e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  02196	e8 00 00 00 00	 call	 _PyParallel_Guard
  0219b	85 c0		 test	 eax, eax
  0219d	75 0a		 jne	 SHORT $LN117@obj2ast_st@2
  0219f	48 8b cb	 mov	 rcx, rbx
  021a2	33 db		 xor	 ebx, ebx
  021a4	e8 00 00 00 00	 call	 _Py_DecRef
$LN117@obj2ast_st@2:

; 4542 :         }
; 4543 :         if (_PyObject_HasAttrId(obj, &PyId_msg)) {

  021a9	48 8b 55 07	 mov	 rdx, QWORD PTR tv4777[rbp-89]
  021ad	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:PyId_msg
  021b2	48 03 d1	 add	 rdx, rcx
  021b5	48 8b cf	 mov	 rcx, rdi
  021b8	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  021bd	85 c0		 test	 eax, eax
  021bf	74 6c		 je	 SHORT $LN113@obj2ast_st@2

; 4544 :             int res;
; 4545 :             tmp = _PyObject_GetAttrId(obj, &PyId_msg);

  021c1	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_msg
  021c6	48 8b cf	 mov	 rcx, rdi
  021c9	48 03 55 07	 add	 rdx, QWORD PTR tv4777[rbp-89]
  021cd	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  021d2	48 8b d8	 mov	 rbx, rax

; 4546 :             if (tmp == NULL) goto failed;

  021d5	48 85 c0	 test	 rax, rax
  021d8	0f 84 a8 07 00
	00		 je	 $LN657@obj2ast_st@2

; 4547 :             res = obj2ast_expr(tmp, &msg, arena);

  021de	48 8d 55 f7	 lea	 rdx, QWORD PTR msg$25614[rbp-89]
  021e2	4c 8b c6	 mov	 r8, rsi
  021e5	48 8b c8	 mov	 rcx, rax
  021e8	e8 00 00 00 00	 call	 obj2ast_expr

; 4548 :             if (res != 0) goto failed;

  021ed	85 c0		 test	 eax, eax
  021ef	0f 85 c8 e0 ff
	ff		 jne	 $failed$24670

; 4549 :             Py_CLEAR(tmp);

  021f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  021fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  02203	4c 8b cb	 mov	 r9, rbx
  02206	41 b8 c5 11 00
	00		 mov	 r8d, 4549		; 000011c5H
  0220c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  02214	e8 00 00 00 00	 call	 _PyParallel_Guard
  02219	85 c0		 test	 eax, eax
  0221b	75 0a		 jne	 SHORT $LN653@obj2ast_st@2
  0221d	48 8b cb	 mov	 rcx, rbx
  02220	33 db		 xor	 ebx, ebx
  02222	e8 00 00 00 00	 call	 _Py_DecRef
$LN653@obj2ast_st@2:

; 4550 :         } else {

  02227	48 8b 45 f7	 mov	 rax, QWORD PTR msg$25614[rbp-89]
  0222b	eb 02		 jmp	 SHORT $LN106@obj2ast_st@2
$LN113@obj2ast_st@2:
  0222d	33 c0		 xor	 eax, eax
$LN106@obj2ast_st@2:

; 4551 :             msg = NULL;
; 4552 :         }
; 4553 :         *out = Assert(test, msg, lineno, col_offset, arena);

  0222f	44 8b 4d 67	 mov	 r9d, DWORD PTR col_offset$[rbp-89]
  02233	44 8b 45 7f	 mov	 r8d, DWORD PTR lineno$[rbp-89]
  02237	48 8b 4d 0f	 mov	 rcx, QWORD PTR test$25613[rbp-89]
  0223b	48 8b d0	 mov	 rdx, rax
  0223e	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  02243	e8 00 00 00 00	 call	 _Py_Assert

; 4554 :         if (*out == NULL) goto failed;
; 4555 :         return 0;

  02248	e9 fa 06 00 00	 jmp	 $LN660@obj2ast_st@2
$LN121@obj2ast_st@2:

; 4539 :         } else {
; 4540 :             PyErr_SetString(PyExc_TypeError, "required field \"test\" missing from Assert");

  0224d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@EMFFOLOL@required?5field?5?$CCtest?$CC?5missing?5fr@

; 4541 :             return 1;

  02254	e9 21 07 00 00	 jmp	 $LN658@obj2ast_st@2
$LN122@obj2ast_st@2:

; 4556 :     }
; 4557 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Import_type);

  02259	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Import_type
  02260	e8 00 00 00 00	 call	 PyObject_IsInstance

; 4558 :     if (isinstance == -1) {

  02265	83 f8 ff	 cmp	 eax, -1

; 4559 :         return 1;

  02268	0f 84 18 07 00
	00		 je	 $LN657@obj2ast_st@2

; 4560 :     }
; 4561 :     if (isinstance) {
; 4562 :         asdl_seq* names;
; 4563 : 
; 4564 :         if (_PyObject_HasAttrId(obj, &PyId_names)) {

  0226e	48 8b cf	 mov	 rcx, rdi
  02271	85 c0		 test	 eax, eax
  02273	0f 84 0e 01 00
	00		 je	 $LN103@obj2ast_st@2
  02279	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_names
  0227e	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  02282	48 8b d3	 mov	 rdx, rbx
  02285	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0228a	85 c0		 test	 eax, eax
  0228c	0f 84 e9 00 00
	00		 je	 $LN102@obj2ast_st@2

; 4565 :             int res;
; 4566 :             Py_ssize_t len;
; 4567 :             Py_ssize_t i;
; 4568 :             tmp = _PyObject_GetAttrId(obj, &PyId_names);

  02292	48 8b d3	 mov	 rdx, rbx
  02295	48 8b cf	 mov	 rcx, rdi
  02298	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0229d	48 8b d8	 mov	 rbx, rax

; 4569 :             if (tmp == NULL) goto failed;

  022a0	48 85 c0	 test	 rax, rax
  022a3	0f 84 dd 06 00
	00		 je	 $LN657@obj2ast_st@2

; 4570 :             if (!PyList_Check(tmp)) {

  022a9	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  022ad	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  022b8	75 10		 jne	 SHORT $LN100@obj2ast_st@2

; 4571 :                 PyErr_Format(PyExc_TypeError, "Import field \"names\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  022ba	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  022be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@JDHMGOED@Import?5field?5?$CCnames?$CC?5must?5be?5a?5l@

; 4572 :                 goto failed;

  022c5	e9 e7 df ff ff	 jmp	 $LN659@obj2ast_st@2
$LN100@obj2ast_st@2:

; 4573 :             }
; 4574 :             len = PyList_GET_SIZE(tmp);

  022ca	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 4575 :             names = asdl_seq_new(len, arena);

  022ce	48 8b d6	 mov	 rdx, rsi
  022d1	48 8b c8	 mov	 rcx, rax
  022d4	48 89 45 f7	 mov	 QWORD PTR len$1$[rbp-89], rax
  022d8	e8 00 00 00 00	 call	 asdl_seq_new
  022dd	48 89 45 ff	 mov	 QWORD PTR names$1$[rbp-89], rax

; 4576 :             if (names == NULL) goto failed;

  022e1	48 85 c0	 test	 rax, rax
  022e4	0f 84 d3 df ff
	ff		 je	 $failed$24670

; 4577 :             for (i = 0; i < len; i++) {

  022ea	33 ff		 xor	 edi, edi
  022ec	48 39 7d f7	 cmp	 QWORD PTR len$1$[rbp-89], rdi
  022f0	7e 3f		 jle	 SHORT $LN94@obj2ast_st@2
  022f2	66 66 66 66 66
	66 0f 1f 84 00
	00 00 00 00	 npad	 14
$LL98@obj2ast_st@2:

; 4578 :                 alias_ty value;
; 4579 :                 res = obj2ast_alias(PyList_GET_ITEM(tmp, i), &value, arena);

  02300	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  02304	48 8d 55 0f	 lea	 rdx, QWORD PTR value$25666[rbp-89]
  02308	4c 8b c6	 mov	 r8, rsi
  0230b	48 8b 0c f9	 mov	 rcx, QWORD PTR [rcx+rdi*8]
  0230f	e8 00 00 00 00	 call	 obj2ast_alias

; 4580 :                 if (res != 0) goto failed;

  02314	85 c0		 test	 eax, eax
  02316	0f 85 a1 df ff
	ff		 jne	 $failed$24670

; 4581 :                 asdl_seq_SET(names, i, value);

  0231c	48 8b 4d ff	 mov	 rcx, QWORD PTR names$1$[rbp-89]
  02320	48 8b 45 0f	 mov	 rax, QWORD PTR value$25666[rbp-89]
  02324	48 ff c7	 inc	 rdi
  02327	48 89 04 f9	 mov	 QWORD PTR [rcx+rdi*8], rax
  0232b	48 3b 7d f7	 cmp	 rdi, QWORD PTR len$1$[rbp-89]
  0232f	7c cf		 jl	 SHORT $LL98@obj2ast_st@2
$LN94@obj2ast_st@2:

; 4582 :             }
; 4583 :             Py_CLEAR(tmp);

  02331	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  02338	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  0233f	4c 8b cb	 mov	 r9, rbx
  02342	41 b8 e7 11 00
	00		 mov	 r8d, 4583		; 000011e7H
  02348	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  02350	e8 00 00 00 00	 call	 _PyParallel_Guard
  02355	85 c0		 test	 eax, eax
  02357	75 0a		 jne	 SHORT $LN93@obj2ast_st@2
  02359	48 8b cb	 mov	 rcx, rbx
  0235c	33 db		 xor	 ebx, ebx
  0235e	e8 00 00 00 00	 call	 _Py_DecRef
$LN93@obj2ast_st@2:

; 4587 :         }
; 4588 :         *out = Import(names, lineno, col_offset, arena);

  02363	44 8b 45 67	 mov	 r8d, DWORD PTR col_offset$[rbp-89]
  02367	8b 55 7f	 mov	 edx, DWORD PTR lineno$[rbp-89]
  0236a	48 8b 4d ff	 mov	 rcx, QWORD PTR names$1$[rbp-89]
  0236e	4c 8b ce	 mov	 r9, rsi
  02371	e8 00 00 00 00	 call	 _Py_Import

; 4589 :         if (*out == NULL) goto failed;
; 4590 :         return 0;

  02376	e9 cc 05 00 00	 jmp	 $LN660@obj2ast_st@2
$LN102@obj2ast_st@2:

; 4584 :         } else {
; 4585 :             PyErr_SetString(PyExc_TypeError, "required field \"names\" missing from Import");

  0237b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@MKOLHKCJ@required?5field?5?$CCnames?$CC?5missing?5f@

; 4586 :             return 1;

  02382	e9 f3 05 00 00	 jmp	 $LN658@obj2ast_st@2
$LN103@obj2ast_st@2:

; 4591 :     }
; 4592 :     isinstance = PyObject_IsInstance(obj, (PyObject*)ImportFrom_type);

  02387	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ImportFrom_type
  0238e	e8 00 00 00 00	 call	 PyObject_IsInstance

; 4593 :     if (isinstance == -1) {

  02393	83 f8 ff	 cmp	 eax, -1

; 4594 :         return 1;

  02396	0f 84 ea 05 00
	00		 je	 $LN657@obj2ast_st@2

; 4595 :     }
; 4596 :     if (isinstance) {
; 4597 :         identifier module;
; 4598 :         asdl_seq* names;
; 4599 :         int level;
; 4600 : 
; 4601 :         if (_PyObject_HasAttrId(obj, &PyId_module)) {

  0239c	48 8b cf	 mov	 rcx, rdi
  0239f	85 c0		 test	 eax, eax
  023a1	0f 84 29 02 00
	00		 je	 $LN87@obj2ast_st@2
  023a7	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_module
  023ac	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  023b0	48 8b d3	 mov	 rdx, rbx
  023b3	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  023b8	85 c0		 test	 eax, eax
  023ba	74 68		 je	 SHORT $LN86@obj2ast_st@2

; 4602 :             int res;
; 4603 :             tmp = _PyObject_GetAttrId(obj, &PyId_module);

  023bc	48 8b d3	 mov	 rdx, rbx
  023bf	48 8b cf	 mov	 rcx, rdi
  023c2	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  023c7	48 8b d8	 mov	 rbx, rax

; 4604 :             if (tmp == NULL) goto failed;

  023ca	48 85 c0	 test	 rax, rax
  023cd	0f 84 b3 05 00
	00		 je	 $LN657@obj2ast_st@2

; 4605 :             res = obj2ast_identifier(tmp, &module, arena);

  023d3	48 8d 55 f7	 lea	 rdx, QWORD PTR module$25684[rbp-89]
  023d7	4c 8b c6	 mov	 r8, rsi
  023da	48 8b c8	 mov	 rcx, rax
  023dd	e8 00 00 00 00	 call	 obj2ast_identifier

; 4606 :             if (res != 0) goto failed;

  023e2	85 c0		 test	 eax, eax
  023e4	0f 85 d3 de ff
	ff		 jne	 $failed$24670

; 4607 :             Py_CLEAR(tmp);

  023ea	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  023f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  023f8	4c 8b cb	 mov	 r9, rbx
  023fb	41 b8 ff 11 00
	00		 mov	 r8d, 4607		; 000011ffH
  02401	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  02409	e8 00 00 00 00	 call	 _PyParallel_Guard
  0240e	85 c0		 test	 eax, eax
  02410	75 08		 jne	 SHORT $LN654@obj2ast_st@2
  02412	48 8b cb	 mov	 rcx, rbx
  02415	e8 00 00 00 00	 call	 _Py_DecRef
$LN654@obj2ast_st@2:

; 4608 :         } else {

  0241a	48 8b 45 f7	 mov	 rax, QWORD PTR module$25684[rbp-89]
  0241e	48 89 45 27	 mov	 QWORD PTR module$1$[rbp-89], rax
  02422	eb 08		 jmp	 SHORT $LN79@obj2ast_st@2
$LN86@obj2ast_st@2:

; 4609 :             module = NULL;

  02424	48 c7 45 27 00
	00 00 00	 mov	 QWORD PTR module$1$[rbp-89], 0
$LN79@obj2ast_st@2:

; 4610 :         }
; 4611 :         if (_PyObject_HasAttrId(obj, &PyId_names)) {

  0242c	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_names
  02431	48 8b cf	 mov	 rcx, rdi
  02434	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  02438	48 8b d3	 mov	 rdx, rbx
  0243b	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  02440	85 c0		 test	 eax, eax
  02442	0f 84 7c 01 00
	00		 je	 $LN78@obj2ast_st@2

; 4612 :             int res;
; 4613 :             Py_ssize_t len;
; 4614 :             Py_ssize_t i;
; 4615 :             tmp = _PyObject_GetAttrId(obj, &PyId_names);

  02448	48 8b d3	 mov	 rdx, rbx
  0244b	48 8b cf	 mov	 rcx, rdi
  0244e	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  02453	48 8b d8	 mov	 rbx, rax

; 4616 :             if (tmp == NULL) goto failed;

  02456	48 85 c0	 test	 rax, rax
  02459	0f 84 27 05 00
	00		 je	 $LN657@obj2ast_st@2

; 4617 :             if (!PyList_Check(tmp)) {

  0245f	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  02463	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  0246e	75 10		 jne	 SHORT $LN76@obj2ast_st@2

; 4618 :                 PyErr_Format(PyExc_TypeError, "ImportFrom field \"names\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  02470	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  02474	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DG@LPEJBEJL@ImportFrom?5field?5?$CCnames?$CC?5must?5be@

; 4619 :                 goto failed;

  0247b	e9 31 de ff ff	 jmp	 $LN659@obj2ast_st@2
$LN76@obj2ast_st@2:

; 4620 :             }
; 4621 :             len = PyList_GET_SIZE(tmp);

  02480	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 4622 :             names = asdl_seq_new(len, arena);

  02484	48 8b d6	 mov	 rdx, rsi
  02487	48 8b c8	 mov	 rcx, rax
  0248a	48 89 45 ff	 mov	 QWORD PTR len$1$[rbp-89], rax
  0248e	e8 00 00 00 00	 call	 asdl_seq_new
  02493	48 89 45 17	 mov	 QWORD PTR names$1$[rbp-89], rax

; 4623 :             if (names == NULL) goto failed;

  02497	48 85 c0	 test	 rax, rax
  0249a	0f 84 1d de ff
	ff		 je	 $failed$24670

; 4624 :             for (i = 0; i < len; i++) {

  024a0	45 33 c9	 xor	 r9d, r9d
  024a3	4c 89 4d f7	 mov	 QWORD PTR i$1$[rbp-89], r9
  024a7	4c 39 4d ff	 cmp	 QWORD PTR len$1$[rbp-89], r9
  024ab	7e 3d		 jle	 SHORT $LN70@obj2ast_st@2
  024ad	0f 1f 00	 npad	 3
$LL74@obj2ast_st@2:

; 4625 :                 alias_ty value;
; 4626 :                 res = obj2ast_alias(PyList_GET_ITEM(tmp, i), &value, arena);

  024b0	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  024b4	48 8d 55 0f	 lea	 rdx, QWORD PTR value$25717[rbp-89]
  024b8	4c 8b c6	 mov	 r8, rsi
  024bb	4a 8b 0c c9	 mov	 rcx, QWORD PTR [rcx+r9*8]
  024bf	e8 00 00 00 00	 call	 obj2ast_alias

; 4627 :                 if (res != 0) goto failed;

  024c4	85 c0		 test	 eax, eax
  024c6	0f 85 f1 dd ff
	ff		 jne	 $failed$24670

; 4628 :                 asdl_seq_SET(names, i, value);

  024cc	4c 8b 4d f7	 mov	 r9, QWORD PTR i$1$[rbp-89]
  024d0	48 8b 4d 17	 mov	 rcx, QWORD PTR names$1$[rbp-89]
  024d4	48 8b 45 0f	 mov	 rax, QWORD PTR value$25717[rbp-89]
  024d8	4a 89 44 c9 08	 mov	 QWORD PTR [rcx+r9*8+8], rax
  024dd	49 ff c1	 inc	 r9
  024e0	4c 89 4d f7	 mov	 QWORD PTR i$1$[rbp-89], r9
  024e4	4c 3b 4d ff	 cmp	 r9, QWORD PTR len$1$[rbp-89]
  024e8	7c c6		 jl	 SHORT $LL74@obj2ast_st@2
$LN70@obj2ast_st@2:

; 4629 :             }
; 4630 :             Py_CLEAR(tmp);

  024ea	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  024f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  024f8	4c 8b cb	 mov	 r9, rbx
  024fb	41 b8 16 12 00
	00		 mov	 r8d, 4630		; 00001216H
  02501	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  02509	e8 00 00 00 00	 call	 _PyParallel_Guard
  0250e	85 c0		 test	 eax, eax
  02510	75 0a		 jne	 SHORT $LN69@obj2ast_st@2
  02512	48 8b cb	 mov	 rcx, rbx
  02515	33 db		 xor	 ebx, ebx
  02517	e8 00 00 00 00	 call	 _Py_DecRef
$LN69@obj2ast_st@2:

; 4634 :         }
; 4635 :         if (_PyObject_HasAttrId(obj, &PyId_level)) {

  0251c	48 8b 55 07	 mov	 rdx, QWORD PTR tv4777[rbp-89]
  02520	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:PyId_level
  02525	48 03 d1	 add	 rdx, rcx
  02528	48 8b cf	 mov	 rcx, rdi
  0252b	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  02530	85 c0		 test	 eax, eax
  02532	74 6a		 je	 SHORT $LN65@obj2ast_st@2

; 4636 :             int res;
; 4637 :             tmp = _PyObject_GetAttrId(obj, &PyId_level);

  02534	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_level
  02539	48 8b cf	 mov	 rcx, rdi
  0253c	48 03 55 07	 add	 rdx, QWORD PTR tv4777[rbp-89]
  02540	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  02545	48 8b d8	 mov	 rbx, rax

; 4638 :             if (tmp == NULL) goto failed;

  02548	48 85 c0	 test	 rax, rax
  0254b	0f 84 35 04 00
	00		 je	 $LN657@obj2ast_st@2

; 4639 :             res = obj2ast_int(tmp, &level, arena);

  02551	48 8d 55 37	 lea	 rdx, QWORD PTR level$25686[rbp-89]
  02555	48 8b c8	 mov	 rcx, rax
  02558	e8 00 00 00 00	 call	 obj2ast_int

; 4640 :             if (res != 0) goto failed;

  0255d	85 c0		 test	 eax, eax
  0255f	0f 85 58 dd ff
	ff		 jne	 $failed$24670

; 4641 :             Py_CLEAR(tmp);

  02565	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0256c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  02573	4c 8b cb	 mov	 r9, rbx
  02576	41 b8 21 12 00
	00		 mov	 r8d, 4641		; 00001221H
  0257c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  02584	e8 00 00 00 00	 call	 _PyParallel_Guard
  02589	85 c0		 test	 eax, eax
  0258b	75 0a		 jne	 SHORT $LN655@obj2ast_st@2
  0258d	48 8b cb	 mov	 rcx, rbx
  02590	33 db		 xor	 ebx, ebx
  02592	e8 00 00 00 00	 call	 _Py_DecRef
$LN655@obj2ast_st@2:

; 4642 :         } else {

  02597	8b 45 37	 mov	 eax, DWORD PTR level$25686[rbp-89]
  0259a	48 89 45 37	 mov	 QWORD PTR msg$1$[rbp-89], rax
$LN65@obj2ast_st@2:

; 4643 :             level = 0;
; 4644 :         }
; 4645 :         *out = ImportFrom(module, names, level, lineno, col_offset, arena);

  0259e	8b 45 67	 mov	 eax, DWORD PTR col_offset$[rbp-89]
  025a1	44 8b 4d 7f	 mov	 r9d, DWORD PTR lineno$[rbp-89]
  025a5	44 8b 45 37	 mov	 r8d, DWORD PTR msg$1$[rbp-89]
  025a9	48 8b 55 17	 mov	 rdx, QWORD PTR names$1$[rbp-89]
  025ad	48 8b 4d 27	 mov	 rcx, QWORD PTR module$1$[rbp-89]
  025b1	48 89 74 24 28	 mov	 QWORD PTR [rsp+40], rsi
  025b6	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  025ba	e8 00 00 00 00	 call	 _Py_ImportFrom

; 4646 :         if (*out == NULL) goto failed;
; 4647 :         return 0;

  025bf	e9 83 03 00 00	 jmp	 $LN660@obj2ast_st@2
$LN78@obj2ast_st@2:

; 4631 :         } else {
; 4632 :             PyErr_SetString(PyExc_TypeError, "required field \"names\" missing from ImportFrom");

  025c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@MHDKFALC@required?5field?5?$CCnames?$CC?5missing?5f@

; 4633 :             return 1;

  025cb	e9 aa 03 00 00	 jmp	 $LN658@obj2ast_st@2
$LN87@obj2ast_st@2:

; 4648 :     }
; 4649 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Global_type);

  025d0	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Global_type
  025d7	e8 00 00 00 00	 call	 PyObject_IsInstance

; 4650 :     if (isinstance == -1) {

  025dc	83 f8 ff	 cmp	 eax, -1

; 4651 :         return 1;

  025df	0f 84 a1 03 00
	00		 je	 $LN657@obj2ast_st@2

; 4652 :     }
; 4653 :     if (isinstance) {
; 4654 :         asdl_seq* names;
; 4655 : 
; 4656 :         if (_PyObject_HasAttrId(obj, &PyId_names)) {

  025e5	48 8b cf	 mov	 rcx, rdi
  025e8	85 c0		 test	 eax, eax
  025ea	0f 84 07 01 00
	00		 je	 $LN55@obj2ast_st@2
  025f0	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_names
  025f5	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  025f9	48 8b d3	 mov	 rdx, rbx
  025fc	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  02601	85 c0		 test	 eax, eax
  02603	0f 84 e2 00 00
	00		 je	 $LN54@obj2ast_st@2

; 4657 :             int res;
; 4658 :             Py_ssize_t len;
; 4659 :             Py_ssize_t i;
; 4660 :             tmp = _PyObject_GetAttrId(obj, &PyId_names);

  02609	48 8b d3	 mov	 rdx, rbx
  0260c	48 8b cf	 mov	 rcx, rdi
  0260f	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  02614	48 8b d8	 mov	 rbx, rax

; 4661 :             if (tmp == NULL) goto failed;

  02617	48 85 c0	 test	 rax, rax
  0261a	0f 84 66 03 00
	00		 je	 $LN657@obj2ast_st@2

; 4662 :             if (!PyList_Check(tmp)) {

  02620	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  02624	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  0262f	75 10		 jne	 SHORT $LN52@obj2ast_st@2

; 4663 :                 PyErr_Format(PyExc_TypeError, "Global field \"names\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  02631	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  02635	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@HNDCGNHP@Global?5field?5?$CCnames?$CC?5must?5be?5a?5l@

; 4664 :                 goto failed;

  0263c	e9 70 dc ff ff	 jmp	 $LN659@obj2ast_st@2
$LN52@obj2ast_st@2:

; 4665 :             }
; 4666 :             len = PyList_GET_SIZE(tmp);

  02641	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 4667 :             names = asdl_seq_new(len, arena);

  02645	48 8b d6	 mov	 rdx, rsi
  02648	48 8b c8	 mov	 rcx, rax
  0264b	48 89 45 f7	 mov	 QWORD PTR len$1$[rbp-89], rax
  0264f	e8 00 00 00 00	 call	 asdl_seq_new
  02654	48 89 45 ff	 mov	 QWORD PTR names$1$[rbp-89], rax

; 4668 :             if (names == NULL) goto failed;

  02658	48 85 c0	 test	 rax, rax
  0265b	0f 84 5c dc ff
	ff		 je	 $failed$24670

; 4669 :             for (i = 0; i < len; i++) {

  02661	33 ff		 xor	 edi, edi
  02663	48 39 7d f7	 cmp	 QWORD PTR len$1$[rbp-89], rdi
  02667	7e 38		 jle	 SHORT $LN46@obj2ast_st@2
  02669	0f 1f 80 00 00
	00 00		 npad	 7
$LL50@obj2ast_st@2:

; 4670 :                 identifier value;
; 4671 :                 res = obj2ast_identifier(PyList_GET_ITEM(tmp, i), &value, arena);

  02670	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  02674	48 8d 55 0f	 lea	 rdx, QWORD PTR value$25765[rbp-89]
  02678	4c 8b c6	 mov	 r8, rsi
  0267b	48 8b 0c f9	 mov	 rcx, QWORD PTR [rcx+rdi*8]
  0267f	e8 00 00 00 00	 call	 obj2ast_identifier

; 4672 :                 if (res != 0) goto failed;

  02684	85 c0		 test	 eax, eax
  02686	0f 85 31 dc ff
	ff		 jne	 $failed$24670

; 4673 :                 asdl_seq_SET(names, i, value);

  0268c	48 8b 4d ff	 mov	 rcx, QWORD PTR names$1$[rbp-89]
  02690	48 8b 45 0f	 mov	 rax, QWORD PTR value$25765[rbp-89]
  02694	48 ff c7	 inc	 rdi
  02697	48 89 04 f9	 mov	 QWORD PTR [rcx+rdi*8], rax
  0269b	48 3b 7d f7	 cmp	 rdi, QWORD PTR len$1$[rbp-89]
  0269f	7c cf		 jl	 SHORT $LL50@obj2ast_st@2
$LN46@obj2ast_st@2:

; 4674 :             }
; 4675 :             Py_CLEAR(tmp);

  026a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  026a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  026af	4c 8b cb	 mov	 r9, rbx
  026b2	41 b8 43 12 00
	00		 mov	 r8d, 4675		; 00001243H
  026b8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  026c0	e8 00 00 00 00	 call	 _PyParallel_Guard
  026c5	85 c0		 test	 eax, eax
  026c7	75 0a		 jne	 SHORT $LN45@obj2ast_st@2
  026c9	48 8b cb	 mov	 rcx, rbx
  026cc	33 db		 xor	 ebx, ebx
  026ce	e8 00 00 00 00	 call	 _Py_DecRef
$LN45@obj2ast_st@2:

; 4679 :         }
; 4680 :         *out = Global(names, lineno, col_offset, arena);

  026d3	44 8b 45 67	 mov	 r8d, DWORD PTR col_offset$[rbp-89]
  026d7	8b 55 7f	 mov	 edx, DWORD PTR lineno$[rbp-89]
  026da	48 8b 4d ff	 mov	 rcx, QWORD PTR names$1$[rbp-89]
  026de	4c 8b ce	 mov	 r9, rsi
  026e1	e8 00 00 00 00	 call	 _Py_Global

; 4681 :         if (*out == NULL) goto failed;
; 4682 :         return 0;

  026e6	e9 5c 02 00 00	 jmp	 $LN660@obj2ast_st@2
$LN54@obj2ast_st@2:

; 4676 :         } else {
; 4677 :             PyErr_SetString(PyExc_TypeError, "required field \"names\" missing from Global");

  026eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@NNCJIPCP@required?5field?5?$CCnames?$CC?5missing?5f@

; 4678 :             return 1;

  026f2	e9 83 02 00 00	 jmp	 $LN658@obj2ast_st@2
$LN55@obj2ast_st@2:

; 4683 :     }
; 4684 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Nonlocal_type);

  026f7	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Nonlocal_type
  026fe	e8 00 00 00 00	 call	 PyObject_IsInstance

; 4685 :     if (isinstance == -1) {

  02703	83 f8 ff	 cmp	 eax, -1

; 4686 :         return 1;

  02706	0f 84 7a 02 00
	00		 je	 $LN657@obj2ast_st@2

; 4687 :     }
; 4688 :     if (isinstance) {
; 4689 :         asdl_seq* names;
; 4690 : 
; 4691 :         if (_PyObject_HasAttrId(obj, &PyId_names)) {

  0270c	48 8b cf	 mov	 rcx, rdi
  0270f	85 c0		 test	 eax, eax
  02711	0f 84 00 01 00
	00		 je	 $LN39@obj2ast_st@2
  02717	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_names
  0271c	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  02720	48 8b d3	 mov	 rdx, rbx
  02723	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  02728	85 c0		 test	 eax, eax
  0272a	0f 84 db 00 00
	00		 je	 $LN38@obj2ast_st@2

; 4692 :             int res;
; 4693 :             Py_ssize_t len;
; 4694 :             Py_ssize_t i;
; 4695 :             tmp = _PyObject_GetAttrId(obj, &PyId_names);

  02730	48 8b d3	 mov	 rdx, rbx
  02733	48 8b cf	 mov	 rcx, rdi
  02736	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0273b	48 8b d8	 mov	 rbx, rax

; 4696 :             if (tmp == NULL) goto failed;

  0273e	48 85 c0	 test	 rax, rax
  02741	0f 84 3f 02 00
	00		 je	 $LN657@obj2ast_st@2

; 4697 :             if (!PyList_Check(tmp)) {

  02747	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  0274b	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  02756	75 10		 jne	 SHORT $LN36@obj2ast_st@2

; 4698 :                 PyErr_Format(PyExc_TypeError, "Nonlocal field \"names\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  02758	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  0275c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@JLMFHJNN@Nonlocal?5field?5?$CCnames?$CC?5must?5be?5a@

; 4699 :                 goto failed;

  02763	e9 49 db ff ff	 jmp	 $LN659@obj2ast_st@2
$LN36@obj2ast_st@2:

; 4700 :             }
; 4701 :             len = PyList_GET_SIZE(tmp);

  02768	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 4702 :             names = asdl_seq_new(len, arena);

  0276c	48 8b d6	 mov	 rdx, rsi
  0276f	48 8b c8	 mov	 rcx, rax
  02772	48 89 45 f7	 mov	 QWORD PTR len$1$[rbp-89], rax
  02776	e8 00 00 00 00	 call	 asdl_seq_new
  0277b	48 89 45 ff	 mov	 QWORD PTR names$1$[rbp-89], rax

; 4703 :             if (names == NULL) goto failed;

  0277f	48 85 c0	 test	 rax, rax
  02782	0f 84 35 db ff
	ff		 je	 $failed$24670

; 4704 :             for (i = 0; i < len; i++) {

  02788	33 ff		 xor	 edi, edi
  0278a	48 39 7d f7	 cmp	 QWORD PTR len$1$[rbp-89], rdi
  0278e	7e 31		 jle	 SHORT $LN30@obj2ast_st@2
$LL34@obj2ast_st@2:

; 4705 :                 identifier value;
; 4706 :                 res = obj2ast_identifier(PyList_GET_ITEM(tmp, i), &value, arena);

  02790	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  02794	48 8d 55 0f	 lea	 rdx, QWORD PTR value$25799[rbp-89]
  02798	4c 8b c6	 mov	 r8, rsi
  0279b	48 8b 0c f9	 mov	 rcx, QWORD PTR [rcx+rdi*8]
  0279f	e8 00 00 00 00	 call	 obj2ast_identifier

; 4707 :                 if (res != 0) goto failed;

  027a4	85 c0		 test	 eax, eax
  027a6	0f 85 11 db ff
	ff		 jne	 $failed$24670

; 4708 :                 asdl_seq_SET(names, i, value);

  027ac	48 8b 4d ff	 mov	 rcx, QWORD PTR names$1$[rbp-89]
  027b0	48 8b 45 0f	 mov	 rax, QWORD PTR value$25799[rbp-89]
  027b4	48 ff c7	 inc	 rdi
  027b7	48 89 04 f9	 mov	 QWORD PTR [rcx+rdi*8], rax
  027bb	48 3b 7d f7	 cmp	 rdi, QWORD PTR len$1$[rbp-89]
  027bf	7c cf		 jl	 SHORT $LL34@obj2ast_st@2
$LN30@obj2ast_st@2:

; 4709 :             }
; 4710 :             Py_CLEAR(tmp);

  027c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  027c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  027cf	4c 8b cb	 mov	 r9, rbx
  027d2	41 b8 66 12 00
	00		 mov	 r8d, 4710		; 00001266H
  027d8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  027e0	e8 00 00 00 00	 call	 _PyParallel_Guard
  027e5	85 c0		 test	 eax, eax
  027e7	75 0a		 jne	 SHORT $LN29@obj2ast_st@2
  027e9	48 8b cb	 mov	 rcx, rbx
  027ec	33 db		 xor	 ebx, ebx
  027ee	e8 00 00 00 00	 call	 _Py_DecRef
$LN29@obj2ast_st@2:

; 4714 :         }
; 4715 :         *out = Nonlocal(names, lineno, col_offset, arena);

  027f3	44 8b 45 67	 mov	 r8d, DWORD PTR col_offset$[rbp-89]
  027f7	8b 55 7f	 mov	 edx, DWORD PTR lineno$[rbp-89]
  027fa	48 8b 4d ff	 mov	 rcx, QWORD PTR names$1$[rbp-89]
  027fe	4c 8b ce	 mov	 r9, rsi
  02801	e8 00 00 00 00	 call	 _Py_Nonlocal

; 4716 :         if (*out == NULL) goto failed;
; 4717 :         return 0;

  02806	e9 3c 01 00 00	 jmp	 $LN660@obj2ast_st@2
$LN38@obj2ast_st@2:

; 4711 :         } else {
; 4712 :             PyErr_SetString(PyExc_TypeError, "required field \"names\" missing from Nonlocal");

  0280b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@LGEEILAC@required?5field?5?$CCnames?$CC?5missing?5f@

; 4713 :             return 1;

  02812	e9 63 01 00 00	 jmp	 $LN658@obj2ast_st@2
$LN39@obj2ast_st@2:

; 4718 :     }
; 4719 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Expr_type);

  02817	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Expr_type
  0281e	e8 00 00 00 00	 call	 PyObject_IsInstance

; 4720 :     if (isinstance == -1) {

  02823	83 f8 ff	 cmp	 eax, -1

; 4721 :         return 1;

  02826	0f 84 5a 01 00
	00		 je	 $LN657@obj2ast_st@2

; 4722 :     }
; 4723 :     if (isinstance) {
; 4724 :         expr_ty value;
; 4725 : 
; 4726 :         if (_PyObject_HasAttrId(obj, &PyId_value)) {

  0282c	48 8b cf	 mov	 rcx, rdi
  0282f	85 c0		 test	 eax, eax
  02831	0f 84 99 00 00
	00		 je	 $LN23@obj2ast_st@2
  02837	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:PyId_value
  0283c	48 03 5d 07	 add	 rbx, QWORD PTR tv4777[rbp-89]
  02840	48 8b d3	 mov	 rdx, rbx
  02843	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  02848	85 c0		 test	 eax, eax
  0284a	74 78		 je	 SHORT $LN22@obj2ast_st@2

; 4727 :             int res;
; 4728 :             tmp = _PyObject_GetAttrId(obj, &PyId_value);

  0284c	48 8b d3	 mov	 rdx, rbx
  0284f	48 8b cf	 mov	 rcx, rdi
  02852	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  02857	48 8b d8	 mov	 rbx, rax

; 4729 :             if (tmp == NULL) goto failed;

  0285a	48 85 c0	 test	 rax, rax
  0285d	0f 84 23 01 00
	00		 je	 $LN657@obj2ast_st@2

; 4730 :             res = obj2ast_expr(tmp, &value, arena);

  02863	48 8d 55 0f	 lea	 rdx, QWORD PTR value$25817[rbp-89]
  02867	4c 8b c6	 mov	 r8, rsi
  0286a	48 8b c8	 mov	 rcx, rax
  0286d	e8 00 00 00 00	 call	 obj2ast_expr

; 4731 :             if (res != 0) goto failed;

  02872	85 c0		 test	 eax, eax
  02874	0f 85 43 da ff
	ff		 jne	 $failed$24670

; 4732 :             Py_CLEAR(tmp);

  0287a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  02881	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  02888	4c 8b cb	 mov	 r9, rbx
  0288b	41 b8 7c 12 00
	00		 mov	 r8d, 4732		; 0000127cH
  02891	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  02899	e8 00 00 00 00	 call	 _PyParallel_Guard
  0289e	85 c0		 test	 eax, eax
  028a0	75 0a		 jne	 SHORT $LN18@obj2ast_st@2
  028a2	48 8b cb	 mov	 rcx, rbx
  028a5	33 db		 xor	 ebx, ebx
  028a7	e8 00 00 00 00	 call	 _Py_DecRef
$LN18@obj2ast_st@2:

; 4736 :         }
; 4737 :         *out = Expr(value, lineno, col_offset, arena);

  028ac	44 8b 45 67	 mov	 r8d, DWORD PTR col_offset$[rbp-89]
  028b0	8b 55 7f	 mov	 edx, DWORD PTR lineno$[rbp-89]
  028b3	48 8b 4d 0f	 mov	 rcx, QWORD PTR value$25817[rbp-89]
  028b7	4c 8b ce	 mov	 r9, rsi
  028ba	e8 00 00 00 00	 call	 _Py_Expr

; 4738 :         if (*out == NULL) goto failed;
; 4739 :         return 0;

  028bf	e9 83 00 00 00	 jmp	 $LN660@obj2ast_st@2
$LN22@obj2ast_st@2:

; 4733 :         } else {
; 4734 :             PyErr_SetString(PyExc_TypeError, "required field \"value\" missing from Expr");

  028c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@HOLCPOID@required?5field?5?$CCvalue?$CC?5missing?5f@

; 4735 :             return 1;

  028cb	e9 aa 00 00 00	 jmp	 $LN658@obj2ast_st@2
$LN23@obj2ast_st@2:

; 4740 :     }
; 4741 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Pass_type);

  028d0	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Pass_type
  028d7	e8 00 00 00 00	 call	 PyObject_IsInstance

; 4742 :     if (isinstance == -1) {

  028dc	83 f8 ff	 cmp	 eax, -1

; 4743 :         return 1;

  028df	0f 84 a1 00 00
	00		 je	 $LN657@obj2ast_st@2

; 4744 :     }
; 4745 :     if (isinstance) {

  028e5	85 c0		 test	 eax, eax
  028e7	74 10		 je	 SHORT $LN12@obj2ast_st@2

; 4746 : 
; 4747 :         *out = Pass(lineno, col_offset, arena);

  028e9	8b 55 67	 mov	 edx, DWORD PTR col_offset$[rbp-89]
  028ec	8b 4d 7f	 mov	 ecx, DWORD PTR lineno$[rbp-89]
  028ef	4c 8b c6	 mov	 r8, rsi
  028f2	e8 00 00 00 00	 call	 _Py_Pass

; 4748 :         if (*out == NULL) goto failed;
; 4749 :         return 0;

  028f7	eb 4e		 jmp	 SHORT $LN660@obj2ast_st@2
$LN12@obj2ast_st@2:

; 4750 :     }
; 4751 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Break_type);

  028f9	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Break_type
  02900	48 8b cf	 mov	 rcx, rdi
  02903	e8 00 00 00 00	 call	 PyObject_IsInstance

; 4752 :     if (isinstance == -1) {

  02908	83 f8 ff	 cmp	 eax, -1

; 4753 :         return 1;

  0290b	74 79		 je	 SHORT $LN657@obj2ast_st@2

; 4754 :     }
; 4755 :     if (isinstance) {

  0290d	85 c0		 test	 eax, eax
  0290f	74 10		 je	 SHORT $LN9@obj2ast_st@2

; 4756 : 
; 4757 :         *out = Break(lineno, col_offset, arena);

  02911	8b 55 67	 mov	 edx, DWORD PTR col_offset$[rbp-89]
  02914	8b 4d 7f	 mov	 ecx, DWORD PTR lineno$[rbp-89]
  02917	4c 8b c6	 mov	 r8, rsi
  0291a	e8 00 00 00 00	 call	 _Py_Break

; 4758 :         if (*out == NULL) goto failed;
; 4759 :         return 0;

  0291f	eb 26		 jmp	 SHORT $LN660@obj2ast_st@2
$LN9@obj2ast_st@2:

; 4760 :     }
; 4761 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Continue_type);

  02921	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Continue_type
  02928	48 8b cf	 mov	 rcx, rdi
  0292b	e8 00 00 00 00	 call	 PyObject_IsInstance

; 4762 :     if (isinstance == -1) {

  02930	83 f8 ff	 cmp	 eax, -1

; 4763 :         return 1;

  02933	74 51		 je	 SHORT $LN657@obj2ast_st@2

; 4764 :     }
; 4765 :     if (isinstance) {

  02935	85 c0		 test	 eax, eax
  02937	74 22		 je	 SHORT $LN6@obj2ast_st@2

; 4766 : 
; 4767 :         *out = Continue(lineno, col_offset, arena);

  02939	8b 55 67	 mov	 edx, DWORD PTR col_offset$[rbp-89]
  0293c	8b 4d 7f	 mov	 ecx, DWORD PTR lineno$[rbp-89]
  0293f	4c 8b c6	 mov	 r8, rsi
  02942	e8 00 00 00 00	 call	 _Py_Continue
$LN660@obj2ast_st@2:
  02947	48 8b 4d 6f	 mov	 rcx, QWORD PTR out$[rbp-89]
  0294b	48 89 01	 mov	 QWORD PTR [rcx], rax

; 4768 :         if (*out == NULL) goto failed;

  0294e	48 85 c0	 test	 rax, rax
  02951	0f 84 66 d9 ff
	ff		 je	 $failed$24670

; 4769 :         return 0;

  02957	33 c0		 xor	 eax, eax
  02959	eb 30		 jmp	 SHORT $LN656@obj2ast_st@2
$LN6@obj2ast_st@2:

; 4770 :     }
; 4771 : 
; 4772 :     PyErr_Format(PyExc_TypeError, "expected some sort of stmt, but got %R", obj);

  0295b	4c 8b c7	 mov	 r8, rdi
  0295e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@MEDEENCL@expected?5some?5sort?5of?5stmt?0?5but?5@
  02965	e9 47 d9 ff ff	 jmp	 $LN659@obj2ast_st@2
$LN563@obj2ast_st@2:

; 3699 :     } else {
; 3700 :         PyErr_SetString(PyExc_TypeError, "required field \"col_offset\" missing from stmt");

  0296a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@GDDHAANC@required?5field?5?$CCcol_offset?$CC?5miss@

; 3701 :         return 1;

  02971	eb 07		 jmp	 SHORT $LN658@obj2ast_st@2
$LN571@obj2ast_st@2:

; 3688 :     } else {
; 3689 :         PyErr_SetString(PyExc_TypeError, "required field \"lineno\" missing from stmt");

  02973	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@HLCNGPKC@required?5field?5?$CClineno?$CC?5missing?5@
$LN658@obj2ast_st@2:
  0297a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  02981	e8 00 00 00 00	 call	 PyErr_SetString
$LN657@obj2ast_st@2:

; 3690 :         return 1;

  02986	b8 01 00 00 00	 mov	 eax, 1
$LN656@obj2ast_st@2:
  0298b	48 8b 9c 24 d0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+208]

; 4776 : }

  02993	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  0299a	5f		 pop	 rdi
  0299b	5e		 pop	 rsi
  0299c	5d		 pop	 rbp
  0299d	c3		 ret	 0
obj2ast_stmt ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$ast2obj_mod DD imagerel ast2obj_mod
	DD	imagerel ast2obj_mod+505
	DD	imagerel $unwind$ast2obj_mod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_mod DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\python-ast.c
xdata	ENDS
;	COMDAT ast2obj_mod
_TEXT	SEGMENT
_o$ = 64
ast2obj_mod PROC					; COMDAT

; 2275 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 2276 :     mod_ty o = (mod_ty)_o;
; 2277 :     PyObject *result = NULL, *value = NULL;

  0000a	33 ff		 xor	 edi, edi
  0000c	48 8b d9	 mov	 rbx, rcx

; 2278 :     if (!o) {

  0000f	48 85 c9	 test	 rcx, rcx
  00012	75 57		 jne	 SHORT $LN27@ast2obj_mo

; 2279 :         Py_INCREF(Py_None);

  00014	e8 00 00 00 00	 call	 _Py_PXCTX
  00019	85 c0		 test	 eax, eax
  0001b	75 3c		 jne	 SHORT $LN31@ast2obj_mo
  0001d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00032	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00038	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00040	e8 00 00 00 00	 call	 _PyParallel_Guard
  00045	85 c0		 test	 eax, eax
  00047	75 09		 jne	 SHORT $LN30@ast2obj_mo
  00049	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00050	74 07		 je	 SHORT $LN31@ast2obj_mo
$LN30@ast2obj_mo:
  00052	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN31@ast2obj_mo:

; 2280 :         return Py_None;

  00059	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 2326 : }

  00060	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00065	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00069	5f		 pop	 rdi
  0006a	c3		 ret	 0
$LN27@ast2obj_mo:

; 2281 :     }
; 2282 : 
; 2283 :     switch (o->kind) {

  0006b	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0006d	ff c9		 dec	 ecx
  0006f	0f 84 0a 01 00
	00		 je	 $LN24@ast2obj_mo
  00075	ff c9		 dec	 ecx
  00077	0f 84 d7 00 00
	00		 je	 $LN20@ast2obj_mo
  0007d	ff c9		 dec	 ecx
  0007f	0f 84 80 00 00
	00		 je	 $LN16@ast2obj_mo
  00085	ff c9		 dec	 ecx
  00087	75 6e		 jne	 SHORT $LN25@ast2obj_mo

; 2311 :     case Suite_kind:
; 2312 :         result = PyType_GenericNew(Suite_type, NULL, NULL);

  00089	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Suite_type
  00090	45 33 c0	 xor	 r8d, r8d
  00093	33 d2		 xor	 edx, edx
  00095	e8 00 00 00 00	 call	 PyType_GenericNew
  0009a	48 8b f8	 mov	 rdi, rax

; 2313 :         if (!result) goto failed;

  0009d	48 85 c0	 test	 rax, rax
  000a0	0f 84 46 01 00
	00		 je	 $LN3@ast2obj_mo

; 2314 :         value = ast2obj_list(o->v.Suite.body, ast2obj_stmt);

  000a6	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  000aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_stmt
  000b1	e8 00 00 00 00	 call	 ast2obj_list
  000b6	48 8b d8	 mov	 rbx, rax

; 2315 :         if (!value) goto failed;

  000b9	48 85 c0	 test	 rax, rax
  000bc	0f 84 22 01 00
	00		 je	 $LN7@ast2obj_mo

; 2316 :         if (_PyObject_SetAttrId(result, &PyId_body, value) == -1)

  000c2	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  000c9	65 48 8b 0c 25
	58 00 00 00	 mov	 rcx, QWORD PTR gs:88
  000d2	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_body
  000d7	4a 03 14 c1	 add	 rdx, QWORD PTR [rcx+r8*8]
  000db	4c 8b c0	 mov	 r8, rax
$LN34@ast2obj_mo:
  000de	48 8b cf	 mov	 rcx, rdi
  000e1	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  000e6	83 f8 ff	 cmp	 eax, -1
  000e9	0f 84 ed 00 00
	00		 je	 $failed$23486
$LN21@ast2obj_mo:

; 2290 :             goto failed;
; 2291 :         Py_DECREF(value);

  000ef	48 8b cb	 mov	 rcx, rbx
  000f2	e8 00 00 00 00	 call	 _Py_DecRef
$LN25@ast2obj_mo:

; 2317 :             goto failed;
; 2318 :         Py_DECREF(value);
; 2319 :         break;
; 2320 :     }
; 2321 :     return result;

  000f7	48 8b c7	 mov	 rax, rdi

; 2326 : }

  000fa	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000ff	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00103	5f		 pop	 rdi
  00104	c3		 ret	 0
$LN16@ast2obj_mo:

; 2302 :     case Expression_kind:
; 2303 :         result = PyType_GenericNew(Expression_type, NULL, NULL);

  00105	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Expression_type
  0010c	45 33 c0	 xor	 r8d, r8d
  0010f	33 d2		 xor	 edx, edx
  00111	e8 00 00 00 00	 call	 PyType_GenericNew
  00116	48 8b f8	 mov	 rdi, rax

; 2304 :         if (!result) goto failed;

  00119	48 85 c0	 test	 rax, rax
  0011c	0f 84 ca 00 00
	00		 je	 $LN3@ast2obj_mo

; 2305 :         value = ast2obj_expr(o->v.Expression.body);

  00122	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  00126	e8 00 00 00 00	 call	 ast2obj_expr
$LN35@ast2obj_mo:
  0012b	48 8b d8	 mov	 rbx, rax

; 2306 :         if (!value) goto failed;

  0012e	48 85 c0	 test	 rax, rax
  00131	0f 84 ad 00 00
	00		 je	 $LN7@ast2obj_mo

; 2307 :         if (_PyObject_SetAttrId(result, &PyId_body, value) == -1)

  00137	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0013d	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00146	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_body
  0014b	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  0014f	4c 8b c3	 mov	 r8, rbx

; 2308 :             goto failed;
; 2309 :         Py_DECREF(value);
; 2310 :         break;

  00152	eb 8a		 jmp	 SHORT $LN34@ast2obj_mo
$LN20@ast2obj_mo:

; 2292 :         break;
; 2293 :     case Interactive_kind:
; 2294 :         result = PyType_GenericNew(Interactive_type, NULL, NULL);

  00154	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Interactive_type
  0015b	45 33 c0	 xor	 r8d, r8d
  0015e	33 d2		 xor	 edx, edx
  00160	e8 00 00 00 00	 call	 PyType_GenericNew
  00165	48 8b f8	 mov	 rdi, rax

; 2295 :         if (!result) goto failed;

  00168	48 85 c0	 test	 rax, rax
  0016b	74 7f		 je	 SHORT $LN3@ast2obj_mo

; 2296 :         value = ast2obj_list(o->v.Interactive.body, ast2obj_stmt);

  0016d	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  00171	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_stmt
  00178	e8 00 00 00 00	 call	 ast2obj_list

; 2297 :         if (!value) goto failed;
; 2298 :         if (_PyObject_SetAttrId(result, &PyId_body, value) == -1)
; 2299 :             goto failed;
; 2300 :         Py_DECREF(value);
; 2301 :         break;

  0017d	eb ac		 jmp	 SHORT $LN35@ast2obj_mo
$LN24@ast2obj_mo:

; 2284 :     case Module_kind:
; 2285 :         result = PyType_GenericNew(Module_type, NULL, NULL);

  0017f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Module_type
  00186	45 33 c0	 xor	 r8d, r8d
  00189	33 d2		 xor	 edx, edx
  0018b	e8 00 00 00 00	 call	 PyType_GenericNew
  00190	48 8b f8	 mov	 rdi, rax

; 2286 :         if (!result) goto failed;

  00193	48 85 c0	 test	 rax, rax
  00196	74 54		 je	 SHORT $LN3@ast2obj_mo

; 2287 :         value = ast2obj_list(o->v.Module.body, ast2obj_stmt);

  00198	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  0019c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_stmt
  001a3	e8 00 00 00 00	 call	 ast2obj_list
  001a8	48 8b d8	 mov	 rbx, rax

; 2288 :         if (!value) goto failed;

  001ab	48 85 c0	 test	 rax, rax
  001ae	74 34		 je	 SHORT $LN7@ast2obj_mo

; 2289 :         if (_PyObject_SetAttrId(result, &PyId_body, value) == -1)

  001b0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  001b6	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  001bf	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_body
  001c4	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  001c8	4c 8b c3	 mov	 r8, rbx
  001cb	48 8b cf	 mov	 rcx, rdi
  001ce	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  001d3	83 f8 ff	 cmp	 eax, -1
  001d6	0f 85 13 ff ff
	ff		 jne	 $LN21@ast2obj_mo
$failed$23486:

; 2322 : failed:
; 2323 :     Py_XDECREF(value);

  001dc	48 8b cb	 mov	 rcx, rbx
  001df	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@ast2obj_mo:

; 2324 :     Py_XDECREF(result);

  001e4	48 8b cf	 mov	 rcx, rdi
  001e7	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@ast2obj_mo:

; 2325 :     return NULL;

  001ec	33 c0		 xor	 eax, eax

; 2326 : }

  001ee	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  001f3	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001f7	5f		 pop	 rdi
  001f8	c3		 ret	 0
ast2obj_mod ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@KBNAANJO@expected?5some?5sort?5of?5mod?0?5but?5g@ ; `string'
PUBLIC	??_C@_0CJ@DAPFNIEF@required?5field?5?$CCbody?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0DA@CMKPFGKO@Suite?5field?5?$CCbody?$CC?5must?5be?5a?5lis@ ; `string'
PUBLIC	??_C@_0CO@KHBECONP@required?5field?5?$CCbody?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CP@KGIFMBCL@required?5field?5?$CCbody?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0DG@BHFFGJPL@Interactive?5field?5?$CCbody?$CC?5must?5be@ ; `string'
PUBLIC	??_C@_0CK@MEFNIBBA@required?5field?5?$CCbody?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0M@HADBOJMD@obj2ast_mod?$AA@		; `string'
PUBLIC	??_C@_0DB@BLHMLCNG@Module?5field?5?$CCbody?$CC?5must?5be?5a?5li@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_mod DD imagerel obj2ast_mod
	DD	imagerel obj2ast_mod+1348
	DD	imagerel $unwind$obj2ast_mod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_mod DD 0a5e01H
	DD	0dc45eH
	DD	0c7459H
	DD	0b6454H
	DD	0d0055209H
	DD	030025003H
xdata	ENDS
;	COMDAT ??_C@_0CG@KBNAANJO@expected?5some?5sort?5of?5mod?0?5but?5g@
CONST	SEGMENT
??_C@_0CG@KBNAANJO@expected?5some?5sort?5of?5mod?0?5but?5g@ DB 'expected '
	DB	'some sort of mod, but got %R', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@DAPFNIEF@required?5field?5?$CCbody?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CJ@DAPFNIEF@required?5field?5?$CCbody?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "body" missing from Suite', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@CMKPFGKO@Suite?5field?5?$CCbody?$CC?5must?5be?5a?5lis@
CONST	SEGMENT
??_C@_0DA@CMKPFGKO@Suite?5field?5?$CCbody?$CC?5must?5be?5a?5lis@ DB 'Suit'
	DB	'e field "body" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@KHBECONP@required?5field?5?$CCbody?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CO@KHBECONP@required?5field?5?$CCbody?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "body" missing from Expression', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@KGIFMBCL@required?5field?5?$CCbody?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CP@KGIFMBCL@required?5field?5?$CCbody?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "body" missing from Interactive', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@BHFFGJPL@Interactive?5field?5?$CCbody?$CC?5must?5be@
CONST	SEGMENT
??_C@_0DG@BHFFGJPL@Interactive?5field?5?$CCbody?$CC?5must?5be@ DB 'Intera'
	DB	'ctive field "body" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@MEFNIBBA@required?5field?5?$CCbody?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CK@MEFNIBBA@required?5field?5?$CCbody?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "body" missing from Module', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HADBOJMD@obj2ast_mod?$AA@
CONST	SEGMENT
??_C@_0M@HADBOJMD@obj2ast_mod?$AA@ DB 'obj2ast_mod', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@BLHMLCNG@Module?5field?5?$CCbody?$CC?5must?5be?5a?5li@
CONST	SEGMENT
??_C@_0DB@BLHMLCNG@Module?5field?5?$CCbody?$CC?5must?5be?5a?5li@ DB 'Modu'
	DB	'le field "body" must be a list, not a %.200s', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT obj2ast_mod
_TEXT	SEGMENT
value$24631 = 80
body$24594 = 80
value$24576 = 80
value$24541 = 80
obj$ = 80
out$ = 88
arena$ = 96
obj2ast_mod PROC					; COMDAT

; 3525 : {

  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	41 55		 push	 r13
  00005	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 3526 :     int isinstance;
; 3527 : 
; 3528 :     PyObject *tmp = NULL;
; 3529 : 
; 3530 :     if (obj == Py_None) {

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00010	49 8b e8	 mov	 rbp, r8
  00013	4c 8b ea	 mov	 r13, rdx
  00016	48 8b d9	 mov	 rbx, rcx
  00019	48 3b c8	 cmp	 rcx, rax
  0001c	75 12		 jne	 SHORT $LN64@obj2ast_mo

; 3531 :         *out = NULL;

  0001e	48 c7 02 00 00
	00 00		 mov	 QWORD PTR [rdx], 0

; 3532 :         return 0;

  00025	33 c0		 xor	 eax, eax

; 3666 : }

  00027	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0002b	41 5d		 pop	 r13
  0002d	5d		 pop	 rbp
  0002e	5b		 pop	 rbx
  0002f	c3		 ret	 0
$LN64@obj2ast_mo:

; 3533 :     }
; 3534 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Module_type);

  00030	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Module_type
  00037	e8 00 00 00 00	 call	 PyObject_IsInstance

; 3535 :     if (isinstance == -1) {

  0003c	83 f8 ff	 cmp	 eax, -1
  0003f	75 0e		 jne	 SHORT $LN63@obj2ast_mo

; 3536 :         return 1;

  00041	b8 01 00 00 00	 mov	 eax, 1

; 3666 : }

  00046	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0004a	41 5d		 pop	 r13
  0004c	5d		 pop	 rbp
  0004d	5b		 pop	 rbx
  0004e	c3		 ret	 0
$LN63@obj2ast_mo:
  0004f	48 89 74 24 58	 mov	 QWORD PTR [rsp+88], rsi
  00054	48 89 7c 24 60	 mov	 QWORD PTR [rsp+96], rdi
  00059	4c 89 64 24 68	 mov	 QWORD PTR [rsp+104], r12

; 3537 :     }
; 3538 :     if (isinstance) {

  0005e	85 c0		 test	 eax, eax
  00060	0f 84 3d 01 00
	00		 je	 $LN62@obj2ast_mo

; 3539 :         asdl_seq* body;
; 3540 : 
; 3541 :         if (_PyObject_HasAttrId(obj, &PyId_body)) {

  00066	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  0006c	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00075	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:PyId_body
  0007a	48 8b 3c d0	 mov	 rdi, QWORD PTR [rax+rdx*8]
  0007e	48 03 f9	 add	 rdi, rcx
  00081	48 8b cb	 mov	 rcx, rbx
  00084	48 8b d7	 mov	 rdx, rdi
  00087	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0008c	85 c0		 test	 eax, eax
  0008e	0f 84 f7 00 00
	00		 je	 $LN61@obj2ast_mo

; 3542 :             int res;
; 3543 :             Py_ssize_t len;
; 3544 :             Py_ssize_t i;
; 3545 :             tmp = _PyObject_GetAttrId(obj, &PyId_body);

  00094	48 8b d7	 mov	 rdx, rdi
  00097	48 8b cb	 mov	 rcx, rbx
  0009a	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0009f	48 8b d8	 mov	 rbx, rax

; 3546 :             if (tmp == NULL) goto failed;

  000a2	48 85 c0	 test	 rax, rax
  000a5	0f 84 7c 04 00
	00		 je	 $LN3@obj2ast_mo

; 3547 :             if (!PyList_Check(tmp)) {

  000ab	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  000af	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  000ba	75 2d		 jne	 SHORT $LN59@obj2ast_mo

; 3548 :                 PyErr_Format(PyExc_TypeError, "Module field \"body\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  000bc	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  000c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@BLHMLCNG@Module?5field?5?$CCbody?$CC?5must?5be?5a?5li@
$LN79@obj2ast_mo:

; 3583 :                 PyErr_Format(PyExc_TypeError, "Interactive field \"body\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  000c7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000ce	e8 00 00 00 00	 call	 PyErr_Format
$failed$24531:

; 3663 :     failed:
; 3664 :     Py_XDECREF(tmp);

  000d3	48 85 db	 test	 rbx, rbx
  000d6	0f 84 4b 04 00
	00		 je	 $LN3@obj2ast_mo
  000dc	48 8b cb	 mov	 rcx, rbx
  000df	e8 00 00 00 00	 call	 _Py_DecRef
  000e4	e9 3e 04 00 00	 jmp	 $LN3@obj2ast_mo
$LN59@obj2ast_mo:

; 3549 :                 goto failed;
; 3550 :             }
; 3551 :             len = PyList_GET_SIZE(tmp);

  000e9	48 8b 70 60	 mov	 rsi, QWORD PTR [rax+96]

; 3552 :             body = asdl_seq_new(len, arena);

  000ed	48 8b d5	 mov	 rdx, rbp
  000f0	48 8b ce	 mov	 rcx, rsi
  000f3	e8 00 00 00 00	 call	 asdl_seq_new
  000f8	4c 8b e0	 mov	 r12, rax

; 3553 :             if (body == NULL) goto failed;

  000fb	48 85 c0	 test	 rax, rax
  000fe	74 d3		 je	 SHORT $failed$24531

; 3554 :             for (i = 0; i < len; i++) {

  00100	33 ff		 xor	 edi, edi
  00102	48 85 f6	 test	 rsi, rsi
  00105	7e 33		 jle	 SHORT $LN53@obj2ast_mo
  00107	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL57@obj2ast_mo:

; 3555 :                 stmt_ty value;
; 3556 :                 res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);

  00110	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00114	48 8d 54 24 50	 lea	 rdx, QWORD PTR value$24541[rsp]
  00119	4c 8b c5	 mov	 r8, rbp
  0011c	48 8b 0c f9	 mov	 rcx, QWORD PTR [rcx+rdi*8]
  00120	e8 00 00 00 00	 call	 obj2ast_stmt

; 3557 :                 if (res != 0) goto failed;

  00125	85 c0		 test	 eax, eax
  00127	75 aa		 jne	 SHORT $failed$24531

; 3558 :                 asdl_seq_SET(body, i, value);

  00129	48 8b 44 24 50	 mov	 rax, QWORD PTR value$24541[rsp]
  0012e	48 ff c7	 inc	 rdi
  00131	49 89 04 fc	 mov	 QWORD PTR [r12+rdi*8], rax
  00135	48 3b fe	 cmp	 rdi, rsi
  00138	7c d6		 jl	 SHORT $LL57@obj2ast_mo
$LN53@obj2ast_mo:

; 3559 :             }
; 3560 :             Py_CLEAR(tmp);

  0013a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00141	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@HADBOJMD@obj2ast_mod?$AA@
  00148	4c 8b cb	 mov	 r9, rbx
  0014b	41 b8 e8 0d 00
	00		 mov	 r8d, 3560		; 00000de8H
  00151	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00159	e8 00 00 00 00	 call	 _PyParallel_Guard
  0015e	85 c0		 test	 eax, eax
  00160	75 0a		 jne	 SHORT $LN52@obj2ast_mo
  00162	48 8b cb	 mov	 rcx, rbx
  00165	33 db		 xor	 ebx, ebx
  00167	e8 00 00 00 00	 call	 _Py_DecRef
$LN52@obj2ast_mo:

; 3564 :         }
; 3565 :         *out = Module(body, arena);

  0016c	48 8b d5	 mov	 rdx, rbp
  0016f	49 8b cc	 mov	 rcx, r12
  00172	e8 00 00 00 00	 call	 _Py_Module
  00177	49 89 45 00	 mov	 QWORD PTR [r13], rax

; 3566 :         if (*out == NULL) goto failed;

  0017b	48 85 c0	 test	 rax, rax
  0017e	0f 84 4f ff ff
	ff		 je	 $failed$24531

; 3567 :         return 0;

  00184	33 c0		 xor	 eax, eax
  00186	e9 a1 03 00 00	 jmp	 $LN78@obj2ast_mo
$LN61@obj2ast_mo:

; 3561 :         } else {
; 3562 :             PyErr_SetString(PyExc_TypeError, "required field \"body\" missing from Module");

  0018b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00192	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@MEFNIBBA@required?5field?5?$CCbody?$CC?5missing?5fr@
  00199	e8 00 00 00 00	 call	 PyErr_SetString

; 3563 :             return 1;

  0019e	e9 84 03 00 00	 jmp	 $LN3@obj2ast_mo
$LN62@obj2ast_mo:

; 3568 :     }
; 3569 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Interactive_type);

  001a3	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Interactive_type
  001aa	48 8b cb	 mov	 rcx, rbx
  001ad	e8 00 00 00 00	 call	 PyObject_IsInstance

; 3570 :     if (isinstance == -1) {

  001b2	83 f8 ff	 cmp	 eax, -1

; 3571 :         return 1;

  001b5	0f 84 6c 03 00
	00		 je	 $LN3@obj2ast_mo

; 3572 :     }
; 3573 :     if (isinstance) {

  001bb	85 c0		 test	 eax, eax
  001bd	0f 84 24 01 00
	00		 je	 $LN46@obj2ast_mo

; 3574 :         asdl_seq* body;
; 3575 : 
; 3576 :         if (_PyObject_HasAttrId(obj, &PyId_body)) {

  001c3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  001c9	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  001d2	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:PyId_body
  001d7	48 8b 3c d0	 mov	 rdi, QWORD PTR [rax+rdx*8]
  001db	48 03 f9	 add	 rdi, rcx
  001de	48 8b cb	 mov	 rcx, rbx
  001e1	48 8b d7	 mov	 rdx, rdi
  001e4	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  001e9	85 c0		 test	 eax, eax
  001eb	0f 84 de 00 00
	00		 je	 $LN45@obj2ast_mo

; 3577 :             int res;
; 3578 :             Py_ssize_t len;
; 3579 :             Py_ssize_t i;
; 3580 :             tmp = _PyObject_GetAttrId(obj, &PyId_body);

  001f1	48 8b d7	 mov	 rdx, rdi
  001f4	48 8b cb	 mov	 rcx, rbx
  001f7	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  001fc	48 8b d8	 mov	 rbx, rax

; 3581 :             if (tmp == NULL) goto failed;

  001ff	48 85 c0	 test	 rax, rax
  00202	0f 84 1f 03 00
	00		 je	 $LN3@obj2ast_mo

; 3582 :             if (!PyList_Check(tmp)) {

  00208	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  0020c	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  00217	75 10		 jne	 SHORT $LN43@obj2ast_mo

; 3583 :                 PyErr_Format(PyExc_TypeError, "Interactive field \"body\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  00219	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  0021d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DG@BHFFGJPL@Interactive?5field?5?$CCbody?$CC?5must?5be@

; 3584 :                 goto failed;

  00224	e9 9e fe ff ff	 jmp	 $LN79@obj2ast_mo
$LN43@obj2ast_mo:

; 3585 :             }
; 3586 :             len = PyList_GET_SIZE(tmp);

  00229	48 8b 70 60	 mov	 rsi, QWORD PTR [rax+96]

; 3587 :             body = asdl_seq_new(len, arena);

  0022d	48 8b d5	 mov	 rdx, rbp
  00230	48 8b ce	 mov	 rcx, rsi
  00233	e8 00 00 00 00	 call	 asdl_seq_new
  00238	4c 8b e0	 mov	 r12, rax

; 3588 :             if (body == NULL) goto failed;

  0023b	48 85 c0	 test	 rax, rax
  0023e	0f 84 8f fe ff
	ff		 je	 $failed$24531

; 3589 :             for (i = 0; i < len; i++) {

  00244	33 ff		 xor	 edi, edi
  00246	48 85 f6	 test	 rsi, rsi
  00249	7e 33		 jle	 SHORT $LN37@obj2ast_mo
  0024b	0f 1f 44 00 00	 npad	 5
$LL41@obj2ast_mo:

; 3590 :                 stmt_ty value;
; 3591 :                 res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);

  00250	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00254	48 8d 54 24 50	 lea	 rdx, QWORD PTR value$24576[rsp]
  00259	4c 8b c5	 mov	 r8, rbp
  0025c	48 8b 0c f9	 mov	 rcx, QWORD PTR [rcx+rdi*8]
  00260	e8 00 00 00 00	 call	 obj2ast_stmt

; 3592 :                 if (res != 0) goto failed;

  00265	85 c0		 test	 eax, eax
  00267	0f 85 66 fe ff
	ff		 jne	 $failed$24531

; 3593 :                 asdl_seq_SET(body, i, value);

  0026d	48 8b 44 24 50	 mov	 rax, QWORD PTR value$24576[rsp]
  00272	48 ff c7	 inc	 rdi
  00275	49 89 04 fc	 mov	 QWORD PTR [r12+rdi*8], rax
  00279	48 3b fe	 cmp	 rdi, rsi
  0027c	7c d2		 jl	 SHORT $LL41@obj2ast_mo
$LN37@obj2ast_mo:

; 3594 :             }
; 3595 :             Py_CLEAR(tmp);

  0027e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00285	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@HADBOJMD@obj2ast_mod?$AA@
  0028c	4c 8b cb	 mov	 r9, rbx
  0028f	41 b8 0b 0e 00
	00		 mov	 r8d, 3595		; 00000e0bH
  00295	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0029d	e8 00 00 00 00	 call	 _PyParallel_Guard
  002a2	85 c0		 test	 eax, eax
  002a4	75 0a		 jne	 SHORT $LN36@obj2ast_mo
  002a6	48 8b cb	 mov	 rcx, rbx
  002a9	33 db		 xor	 ebx, ebx
  002ab	e8 00 00 00 00	 call	 _Py_DecRef
$LN36@obj2ast_mo:

; 3599 :         }
; 3600 :         *out = Interactive(body, arena);

  002b0	48 8b d5	 mov	 rdx, rbp
  002b3	49 8b cc	 mov	 rcx, r12
  002b6	e8 00 00 00 00	 call	 _Py_Interactive
  002bb	49 89 45 00	 mov	 QWORD PTR [r13], rax

; 3601 :         if (*out == NULL) goto failed;

  002bf	48 85 c0	 test	 rax, rax
  002c2	0f 84 0b fe ff
	ff		 je	 $failed$24531

; 3602 :         return 0;

  002c8	33 c0		 xor	 eax, eax
  002ca	e9 5d 02 00 00	 jmp	 $LN78@obj2ast_mo
$LN45@obj2ast_mo:

; 3596 :         } else {
; 3597 :             PyErr_SetString(PyExc_TypeError, "required field \"body\" missing from Interactive");

  002cf	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  002d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@KGIFMBCL@required?5field?5?$CCbody?$CC?5missing?5fr@
  002dd	e8 00 00 00 00	 call	 PyErr_SetString

; 3598 :             return 1;

  002e2	e9 40 02 00 00	 jmp	 $LN3@obj2ast_mo
$LN46@obj2ast_mo:

; 3603 :     }
; 3604 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Expression_type);

  002e7	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Expression_type
  002ee	48 8b cb	 mov	 rcx, rbx
  002f1	e8 00 00 00 00	 call	 PyObject_IsInstance

; 3605 :     if (isinstance == -1) {

  002f6	83 f8 ff	 cmp	 eax, -1

; 3606 :         return 1;

  002f9	0f 84 28 02 00
	00		 je	 $LN3@obj2ast_mo

; 3607 :     }
; 3608 :     if (isinstance) {

  002ff	85 c0		 test	 eax, eax
  00301	0f 84 c8 00 00
	00		 je	 $LN30@obj2ast_mo

; 3609 :         expr_ty body;
; 3610 : 
; 3611 :         if (_PyObject_HasAttrId(obj, &PyId_body)) {

  00307	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  0030d	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00316	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:PyId_body
  0031b	48 8b 3c d0	 mov	 rdi, QWORD PTR [rax+rdx*8]
  0031f	48 03 f9	 add	 rdi, rcx
  00322	48 8b cb	 mov	 rcx, rbx
  00325	48 8b d7	 mov	 rdx, rdi
  00328	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0032d	85 c0		 test	 eax, eax
  0032f	0f 84 82 00 00
	00		 je	 $LN29@obj2ast_mo

; 3612 :             int res;
; 3613 :             tmp = _PyObject_GetAttrId(obj, &PyId_body);

  00335	48 8b d7	 mov	 rdx, rdi
  00338	48 8b cb	 mov	 rcx, rbx
  0033b	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00340	48 8b d8	 mov	 rbx, rax

; 3614 :             if (tmp == NULL) goto failed;

  00343	48 85 c0	 test	 rax, rax
  00346	0f 84 db 01 00
	00		 je	 $LN3@obj2ast_mo

; 3615 :             res = obj2ast_expr(tmp, &body, arena);

  0034c	48 8d 54 24 50	 lea	 rdx, QWORD PTR body$24594[rsp]
  00351	4c 8b c5	 mov	 r8, rbp
  00354	48 8b c8	 mov	 rcx, rax
  00357	e8 00 00 00 00	 call	 obj2ast_expr

; 3616 :             if (res != 0) goto failed;

  0035c	85 c0		 test	 eax, eax
  0035e	0f 85 6f fd ff
	ff		 jne	 $failed$24531

; 3617 :             Py_CLEAR(tmp);

  00364	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0036b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@HADBOJMD@obj2ast_mod?$AA@
  00372	4c 8b cb	 mov	 r9, rbx
  00375	41 b8 21 0e 00
	00		 mov	 r8d, 3617		; 00000e21H
  0037b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00383	e8 00 00 00 00	 call	 _PyParallel_Guard
  00388	85 c0		 test	 eax, eax
  0038a	75 0a		 jne	 SHORT $LN25@obj2ast_mo
  0038c	48 8b cb	 mov	 rcx, rbx
  0038f	33 db		 xor	 ebx, ebx
  00391	e8 00 00 00 00	 call	 _Py_DecRef
$LN25@obj2ast_mo:

; 3621 :         }
; 3622 :         *out = Expression(body, arena);

  00396	48 8b 4c 24 50	 mov	 rcx, QWORD PTR body$24594[rsp]
  0039b	48 8b d5	 mov	 rdx, rbp
  0039e	e8 00 00 00 00	 call	 _Py_Expression
  003a3	49 89 45 00	 mov	 QWORD PTR [r13], rax

; 3623 :         if (*out == NULL) goto failed;

  003a7	48 85 c0	 test	 rax, rax
  003aa	0f 84 23 fd ff
	ff		 je	 $failed$24531

; 3624 :         return 0;

  003b0	33 c0		 xor	 eax, eax
  003b2	e9 75 01 00 00	 jmp	 $LN78@obj2ast_mo
$LN29@obj2ast_mo:

; 3618 :         } else {
; 3619 :             PyErr_SetString(PyExc_TypeError, "required field \"body\" missing from Expression");

  003b7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  003be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@KHBECONP@required?5field?5?$CCbody?$CC?5missing?5fr@
  003c5	e8 00 00 00 00	 call	 PyErr_SetString

; 3620 :             return 1;

  003ca	e9 58 01 00 00	 jmp	 $LN3@obj2ast_mo
$LN30@obj2ast_mo:

; 3625 :     }
; 3626 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Suite_type);

  003cf	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Suite_type
  003d6	48 8b cb	 mov	 rcx, rbx
  003d9	e8 00 00 00 00	 call	 PyObject_IsInstance

; 3627 :     if (isinstance == -1) {

  003de	83 f8 ff	 cmp	 eax, -1

; 3628 :         return 1;

  003e1	0f 84 40 01 00
	00		 je	 $LN3@obj2ast_mo

; 3629 :     }
; 3630 :     if (isinstance) {

  003e7	85 c0		 test	 eax, eax
  003e9	0f 84 22 01 00
	00		 je	 $LN19@obj2ast_mo

; 3631 :         asdl_seq* body;
; 3632 : 
; 3633 :         if (_PyObject_HasAttrId(obj, &PyId_body)) {

  003ef	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  003f5	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  003fe	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:PyId_body
  00403	48 8b 3c d0	 mov	 rdi, QWORD PTR [rax+rdx*8]
  00407	48 03 f9	 add	 rdi, rcx
  0040a	48 8b cb	 mov	 rcx, rbx
  0040d	48 8b d7	 mov	 rdx, rdi
  00410	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00415	85 c0		 test	 eax, eax
  00417	0f 84 df 00 00
	00		 je	 $LN18@obj2ast_mo

; 3634 :             int res;
; 3635 :             Py_ssize_t len;
; 3636 :             Py_ssize_t i;
; 3637 :             tmp = _PyObject_GetAttrId(obj, &PyId_body);

  0041d	48 8b d7	 mov	 rdx, rdi
  00420	48 8b cb	 mov	 rcx, rbx
  00423	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00428	48 8b d8	 mov	 rbx, rax

; 3638 :             if (tmp == NULL) goto failed;

  0042b	48 85 c0	 test	 rax, rax
  0042e	0f 84 f3 00 00
	00		 je	 $LN3@obj2ast_mo

; 3639 :             if (!PyList_Check(tmp)) {

  00434	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  00438	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  00443	75 10		 jne	 SHORT $LN16@obj2ast_mo

; 3640 :                 PyErr_Format(PyExc_TypeError, "Suite field \"body\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  00445	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00449	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@CMKPFGKO@Suite?5field?5?$CCbody?$CC?5must?5be?5a?5lis@

; 3641 :                 goto failed;

  00450	e9 72 fc ff ff	 jmp	 $LN79@obj2ast_mo
$LN16@obj2ast_mo:

; 3642 :             }
; 3643 :             len = PyList_GET_SIZE(tmp);

  00455	48 8b 70 60	 mov	 rsi, QWORD PTR [rax+96]

; 3644 :             body = asdl_seq_new(len, arena);

  00459	48 8b d5	 mov	 rdx, rbp
  0045c	48 8b ce	 mov	 rcx, rsi
  0045f	e8 00 00 00 00	 call	 asdl_seq_new
  00464	4c 8b e0	 mov	 r12, rax

; 3645 :             if (body == NULL) goto failed;

  00467	48 85 c0	 test	 rax, rax
  0046a	0f 84 63 fc ff
	ff		 je	 $failed$24531

; 3646 :             for (i = 0; i < len; i++) {

  00470	33 ff		 xor	 edi, edi
  00472	48 85 f6	 test	 rsi, rsi
  00475	7e 37		 jle	 SHORT $LN10@obj2ast_mo
  00477	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL14@obj2ast_mo:

; 3647 :                 stmt_ty value;
; 3648 :                 res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);

  00480	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00484	48 8d 54 24 50	 lea	 rdx, QWORD PTR value$24631[rsp]
  00489	4c 8b c5	 mov	 r8, rbp
  0048c	48 8b 0c f9	 mov	 rcx, QWORD PTR [rcx+rdi*8]
  00490	e8 00 00 00 00	 call	 obj2ast_stmt

; 3649 :                 if (res != 0) goto failed;

  00495	85 c0		 test	 eax, eax
  00497	0f 85 36 fc ff
	ff		 jne	 $failed$24531

; 3650 :                 asdl_seq_SET(body, i, value);

  0049d	48 8b 44 24 50	 mov	 rax, QWORD PTR value$24631[rsp]
  004a2	48 ff c7	 inc	 rdi
  004a5	49 89 04 fc	 mov	 QWORD PTR [r12+rdi*8], rax
  004a9	48 3b fe	 cmp	 rdi, rsi
  004ac	7c d2		 jl	 SHORT $LL14@obj2ast_mo
$LN10@obj2ast_mo:

; 3651 :             }
; 3652 :             Py_CLEAR(tmp);

  004ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  004b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@HADBOJMD@obj2ast_mod?$AA@
  004bc	4c 8b cb	 mov	 r9, rbx
  004bf	41 b8 44 0e 00
	00		 mov	 r8d, 3652		; 00000e44H
  004c5	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  004cd	e8 00 00 00 00	 call	 _PyParallel_Guard
  004d2	85 c0		 test	 eax, eax
  004d4	75 0a		 jne	 SHORT $LN9@obj2ast_mo
  004d6	48 8b cb	 mov	 rcx, rbx
  004d9	33 db		 xor	 ebx, ebx
  004db	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@obj2ast_mo:

; 3656 :         }
; 3657 :         *out = Suite(body, arena);

  004e0	48 8b d5	 mov	 rdx, rbp
  004e3	49 8b cc	 mov	 rcx, r12
  004e6	e8 00 00 00 00	 call	 _Py_Suite
  004eb	49 89 45 00	 mov	 QWORD PTR [r13], rax

; 3658 :         if (*out == NULL) goto failed;

  004ef	48 85 c0	 test	 rax, rax
  004f2	0f 84 db fb ff
	ff		 je	 $failed$24531

; 3659 :         return 0;

  004f8	33 c0		 xor	 eax, eax
  004fa	eb 30		 jmp	 SHORT $LN78@obj2ast_mo
$LN18@obj2ast_mo:

; 3653 :         } else {
; 3654 :             PyErr_SetString(PyExc_TypeError, "required field \"body\" missing from Suite");

  004fc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00503	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@DAPFNIEF@required?5field?5?$CCbody?$CC?5missing?5fr@
  0050a	e8 00 00 00 00	 call	 PyErr_SetString

; 3655 :             return 1;

  0050f	eb 16		 jmp	 SHORT $LN3@obj2ast_mo
$LN19@obj2ast_mo:

; 3660 :     }
; 3661 : 
; 3662 :     PyErr_Format(PyExc_TypeError, "expected some sort of mod, but got %R", obj);

  00511	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00518	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@KBNAANJO@expected?5some?5sort?5of?5mod?0?5but?5g@
  0051f	4c 8b c3	 mov	 r8, rbx
  00522	e8 00 00 00 00	 call	 PyErr_Format
$LN3@obj2ast_mo:

; 3665 :     return 1;

  00527	b8 01 00 00 00	 mov	 eax, 1
$LN78@obj2ast_mo:
  0052c	48 8b 7c 24 60	 mov	 rdi, QWORD PTR [rsp+96]
  00531	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  00536	4c 8b 64 24 68	 mov	 r12, QWORD PTR [rsp+104]

; 3666 : }

  0053b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0053f	41 5d		 pop	 r13
  00541	5d		 pop	 rbp
  00542	5b		 pop	 rbx
  00543	c3		 ret	 0
obj2ast_mod ENDP
_TEXT	ENDS
PUBLIC	PyAST_mod2obj
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyAST_mod2obj DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$PyAST_mod2obj
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyAST_mod2obj DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyAST_mod2obj
_TEXT	SEGMENT
t$ = 48
PyAST_mod2obj PROC					; COMDAT

; 6951 : {

$LN3:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 6952 :     init_types();

  00009	e8 00 00 00 00	 call	 init_types

; 6953 :     return ast2obj_mod(t);

  0000e	48 8b cb	 mov	 rcx, rbx

; 6954 : }

  00011	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00015	5b		 pop	 rbx
  00016	e9 00 00 00 00	 jmp	 ast2obj_mod
PyAST_mod2obj ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@OEMLNFOL@expected?5?$CFs?5node?0?5got?5?$CF?4400s?$AA@ ; `string'
PUBLIC	PyAST_obj2mod
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyAST_obj2mod DD imagerel $LN8
	DD	imagerel $LN8+216
	DD	imagerel $unwind$PyAST_obj2mod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyAST_obj2mod DD 061001H
	DD	0d6410H
	DD	0c3410H
	DD	0700c9210H
xdata	ENDS
;	COMDAT ??_C@_0BN@OEMLNFOL@expected?5?$CFs?5node?0?5got?5?$CF?4400s?$AA@
CONST	SEGMENT
??_C@_0BN@OEMLNFOL@expected?5?$CFs?5node?0?5got?5?$CF?4400s?$AA@ DB 'expe'
	DB	'cted %s node, got %.400s', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyAST_obj2mod
_TEXT	SEGMENT
req_type$ = 32
req_name$ = 56
ast$ = 96
arena$ = 104
mode$ = 112
res$ = 120
PyAST_obj2mod PROC					; COMDAT

; 6958 : {

$LN8:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	49 89 5b 08	 mov	 QWORD PTR [r11+8], rbx
  00007	49 89 73 10	 mov	 QWORD PTR [r11+16], rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 6959 :     mod_ty res;
; 6960 :     PyObject *req_type[3];
; 6961 :     char *req_name[] = {"Module", "Expression", "Interactive"};

  00010	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06NHPJKFDC@Module?$AA@
  00017	49 63 d8	 movsxd	 rbx, r8d
  0001a	48 8b f2	 mov	 rsi, rdx
  0001d	49 89 43 e0	 mov	 QWORD PTR [r11-32], rax
  00021	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0L@NMLOJPGF@Expression?$AA@
  00028	48 8b f9	 mov	 rdi, rcx
  0002b	49 89 43 e8	 mov	 QWORD PTR [r11-24], rax
  0002f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0M@INEKDBAI@Interactive?$AA@
  00036	49 89 43 f0	 mov	 QWORD PTR [r11-16], rax

; 6962 :     int isinstance;
; 6963 : 
; 6964 :     req_type[0] = (PyObject*)Module_type;

  0003a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Module_type
  00041	49 89 43 c8	 mov	 QWORD PTR [r11-56], rax

; 6965 :     req_type[1] = (PyObject*)Expression_type;

  00045	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Expression_type
  0004c	49 89 43 d0	 mov	 QWORD PTR [r11-48], rax

; 6966 :     req_type[2] = (PyObject*)Interactive_type;

  00050	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Interactive_type
  00057	49 89 43 d8	 mov	 QWORD PTR [r11-40], rax

; 6967 : 
; 6968 :     assert(0 <= mode && mode <= 2);
; 6969 : 
; 6970 :     init_types();

  0005b	e8 00 00 00 00	 call	 init_types

; 6971 : 
; 6972 :     isinstance = PyObject_IsInstance(ast, req_type[mode]);

  00060	48 8b 54 dc 20	 mov	 rdx, QWORD PTR req_type$[rsp+rbx*8]
  00065	48 8b cf	 mov	 rcx, rdi
  00068	e8 00 00 00 00	 call	 PyObject_IsInstance

; 6973 :     if (isinstance == -1)

  0006d	83 f8 ff	 cmp	 eax, -1

; 6974 :         return NULL;

  00070	74 24		 je	 SHORT $LN7@PyAST_obj2

; 6975 :     if (!isinstance) {

  00072	85 c0		 test	 eax, eax
  00074	75 32		 jne	 SHORT $LN3@PyAST_obj2

; 6976 :         PyErr_Format(PyExc_TypeError, "expected %s node, got %.400s",
; 6977 :                      req_name[mode], Py_TYPE(ast)->tp_name);

  00076	4c 8b 4f 58	 mov	 r9, QWORD PTR [rdi+88]
  0007a	4c 8b 44 dc 38	 mov	 r8, QWORD PTR req_name$[rsp+rbx*8]
  0007f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00086	4d 8b 49 70	 mov	 r9, QWORD PTR [r9+112]
  0008a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@OEMLNFOL@expected?5?$CFs?5node?0?5got?5?$CF?4400s?$AA@
  00091	e8 00 00 00 00	 call	 PyErr_Format
$LN7@PyAST_obj2:

; 6978 :         return NULL;

  00096	33 c0		 xor	 eax, eax

; 6981 :         return NULL;
; 6982 :     else
; 6983 :         return res;
; 6984 : }

  00098	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  0009d	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  000a2	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000a6	5f		 pop	 rdi
  000a7	c3		 ret	 0
$LN3@PyAST_obj2:

; 6979 :     }
; 6980 :     if (obj2ast_mod(ast, &res, arena) != 0)

  000a8	48 8d 54 24 78	 lea	 rdx, QWORD PTR res$[rsp]
  000ad	4c 8b c6	 mov	 r8, rsi
  000b0	48 8b cf	 mov	 rcx, rdi
  000b3	e8 00 00 00 00	 call	 obj2ast_mod
  000b8	48 8b 4c 24 78	 mov	 rcx, QWORD PTR res$[rsp]

; 6981 :         return NULL;
; 6982 :     else
; 6983 :         return res;
; 6984 : }

  000bd	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  000c2	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  000c7	33 d2		 xor	 edx, edx
  000c9	85 c0		 test	 eax, eax
  000cb	48 0f 45 ca	 cmovne	 rcx, rdx
  000cf	48 8b c1	 mov	 rax, rcx
  000d2	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000d6	5f		 pop	 rdi
  000d7	c3		 ret	 0
PyAST_obj2mod ENDP
_TEXT	ENDS
END
