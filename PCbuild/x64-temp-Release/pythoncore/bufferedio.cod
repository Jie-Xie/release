; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BD@CHOOIEPI@_io?4BufferedRandom?$AA@	; `string'
PUBLIC	??_C@_0BD@BFNFOELB@_io?4BufferedRWPair?$AA@	; `string'
PUBLIC	??_C@_0BD@NCGANLKN@_io?4BufferedWriter?$AA@	; `string'
PUBLIC	??_C@_0BD@POOCNKHH@_io?4BufferedReader?$AA@	; `string'
PUBLIC	??_C@_06IKJOPBFO@closed?$AA@			; `string'
PUBLIC	??_C@_03DGOGAGNC@raw?$AA@			; `string'
PUBLIC	??_C@_0L@HOGGIPGN@__sizeof__?$AA@		; `string'
PUBLIC	??_C@_08MABILMFG@truncate?$AA@			; `string'
PUBLIC	??_C@_04LBPCFPDD@tell?$AA@			; `string'
PUBLIC	??_C@_04EDECCOGL@seek?$AA@			; `string'
PUBLIC	??_C@_08KBCDPPMN@readline?$AA@			; `string'
PUBLIC	??_C@_0N@NAMJJHIO@__getstate__?$AA@		; `string'
PUBLIC	??_C@_06FFBIALPD@fileno?$AA@			; `string'
PUBLIC	??_C@_08JPFEOKJG@seekable?$AA@			; `string'
PUBLIC	??_C@_0BE@OAGPJFOG@_io?4_BufferedIOBase?$AA@	; `string'
PUBLIC	??_C@_06CNCOJECB@detach?$AA@			; `string'
PUBLIC	??_C@_05NGFEDHGN@write?$AA@			; `string'
PUBLIC	??_C@_08IBOGFJJC@writable?$AA@			; `string'
PUBLIC	??_C@_08BPEKIGCI@readinto?$AA@			; `string'
PUBLIC	??_C@_08INDGGIBD@readable?$AA@			; `string'
PUBLIC	??_C@_05FDBMPOID@read1?$AA@			; `string'
PUBLIC	??_C@_04POLDLDMI@read?$AA@			; `string'
PUBLIC	??_C@_04EOCFELL@peek?$AA@			; `string'
PUBLIC	??_C@_04MEMAJGDJ@name?$AA@			; `string'
PUBLIC	??_C@_04GMGOKAFF@mode?$AA@			; `string'
PUBLIC	??_C@_06BMABDNNN@isatty?$AA@			; `string'
PUBLIC	??_C@_05GLCAEPFP@flush?$AA@			; `string'
PUBLIC	??_C@_0O@OLJIIFNG@_dealloc_warn?$AA@		; `string'
PUBLIC	??_C@_05LBOHBHFK@close?$AA@			; `string'
PUBLIC	PyBufferedIOBase_Type
PUBLIC	PyBufferedReader_Type
PUBLIC	PyBufferedWriter_Type
PUBLIC	PyBufferedRWPair_Type
PUBLIC	PyBufferedRandom_Type
EXTRN	PyType_GenericNew:PROC
EXTRN	PyIOBase_Type:BYTE
_BSS	SEGMENT
?eintr_int@?1??_PyIO_trap_eintr@@9@9 DQ 01H DUP (?)	; `_PyIO_trap_eintr'::`2'::eintr_int
_BSS	ENDS
;	COMDAT ??_C@_0BD@CHOOIEPI@_io?4BufferedRandom?$AA@
CONST	SEGMENT
??_C@_0BD@CHOOIEPI@_io?4BufferedRandom?$AA@ DB '_io.BufferedRandom', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BFNFOELB@_io?4BufferedRWPair?$AA@
CONST	SEGMENT
??_C@_0BD@BFNFOELB@_io?4BufferedRWPair?$AA@ DB '_io.BufferedRWPair', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NCGANLKN@_io?4BufferedWriter?$AA@
CONST	SEGMENT
??_C@_0BD@NCGANLKN@_io?4BufferedWriter?$AA@ DB '_io.BufferedWriter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@POOCNKHH@_io?4BufferedReader?$AA@
CONST	SEGMENT
??_C@_0BD@POOCNKHH@_io?4BufferedReader?$AA@ DB '_io.BufferedReader', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06IKJOPBFO@closed?$AA@
CONST	SEGMENT
??_C@_06IKJOPBFO@closed?$AA@ DB 'closed', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DGOGAGNC@raw?$AA@
CONST	SEGMENT
??_C@_03DGOGAGNC@raw?$AA@ DB 'raw', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HOGGIPGN@__sizeof__?$AA@
CONST	SEGMENT
??_C@_0L@HOGGIPGN@__sizeof__?$AA@ DB '__sizeof__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08MABILMFG@truncate?$AA@
CONST	SEGMENT
??_C@_08MABILMFG@truncate?$AA@ DB 'truncate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04LBPCFPDD@tell?$AA@
CONST	SEGMENT
??_C@_04LBPCFPDD@tell?$AA@ DB 'tell', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EDECCOGL@seek?$AA@
CONST	SEGMENT
??_C@_04EDECCOGL@seek?$AA@ DB 'seek', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KBCDPPMN@readline?$AA@
CONST	SEGMENT
??_C@_08KBCDPPMN@readline?$AA@ DB 'readline', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NAMJJHIO@__getstate__?$AA@
CONST	SEGMENT
??_C@_0N@NAMJJHIO@__getstate__?$AA@ DB '__getstate__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FFBIALPD@fileno?$AA@
CONST	SEGMENT
??_C@_06FFBIALPD@fileno?$AA@ DB 'fileno', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JPFEOKJG@seekable?$AA@
CONST	SEGMENT
??_C@_08JPFEOKJG@seekable?$AA@ DB 'seekable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OAGPJFOG@_io?4_BufferedIOBase?$AA@
CONST	SEGMENT
??_C@_0BE@OAGPJFOG@_io?4_BufferedIOBase?$AA@ DB '_io._BufferedIOBase', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06CNCOJECB@detach?$AA@
CONST	SEGMENT
??_C@_06CNCOJECB@detach?$AA@ DB 'detach', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
bufferediobase_doc DB 'Base class for buffered IO objects.', 0aH, 0aH, 'T'
	DB	'he main difference with RawIOBase is that the read() method', 0aH
	DB	'supports omitting the size argument, and does not have a defa'
	DB	'ult', 0aH, 'implementation that defers to readinto().', 0aH, 0aH
	DB	'In addition, read(), readinto() and write() may raise', 0aH, 'B'
	DB	'lockingIOError if the underlying raw stream is in non-blockin'
	DB	'g', 0aH, 'mode and not ready; unlike their raw counterparts, '
	DB	'they will never', 0aH, 'return None.', 0aH, 0aH, 'A typical i'
	DB	'mplementation should not inherit from a RawIOBase', 0aH, 'imp'
	DB	'lementation, but wrap one.', 0aH, 00H
	ORG $+15
bufferediobase_detach_doc DB 'Disconnect this buffer from its underlying '
	DB	'raw stream and return it.', 0aH, 0aH, 'After the raw stream h'
	DB	'as been detached, the buffer is in an unusable', 0aH, 'state.'
	DB	0aH, 00H
	ORG $+13
bufferediobase_read_doc DB 'Read and return up to n bytes.', 0aH, 0aH, 'I'
	DB	'f the argument is omitted, None, or negative, reads and', 0aH
	DB	'returns all data until EOF.', 0aH, 0aH, 'If the argument is p'
	DB	'ositive, and the underlying raw stream is', 0aH, 'not ''inter'
	DB	'active'', multiple raw reads may be issued to satisfy', 0aH, 't'
	DB	'he byte count (unless EOF is reached first).  But for', 0aH, 'i'
	DB	'nteractive raw streams (as well as sockets and pipes), at mos'
	DB	't', 0aH, 'one raw read will be issued, and a short result doe'
	DB	's not imply', 0aH, 'that EOF is imminent.', 0aH, 0aH, 'Return'
	DB	's an empty bytes object on EOF.', 0aH, 0aH, 'Returns None if '
	DB	'the underlying raw stream was open in non-blocking', 0aH, 'mo'
	DB	'de and no data is available at the moment.', 0aH, 00H
	ORG $+8
bufferediobase_read1_doc DB 'Read and return up to n bytes, with at most '
	DB	'one read() call', 0aH, 'to the underlying raw stream. A short'
	DB	' result does not imply', 0aH, 'that EOF is imminent.', 0aH, 0aH
	DB	'Returns an empty bytes object on EOF.', 0aH, 00H
	ORG $+10
bufferediobase_write_doc DB 'Write the given buffer to the IO stream.', 0aH
	DB	0aH, 'Returns the number of bytes written, which is never less'
	DB	' than', 0aH, 'len(b).', 0aH, 0aH, 'Raises BlockingIOError if '
	DB	'the buffer is full and the', 0aH, 'underlying raw stream cann'
	DB	'ot accept more data at the moment.', 0aH, 00H
	ORG $+12
bufferediobase_methods DQ FLAT:??_C@_06CNCOJECB@detach?$AA@
	DQ	FLAT:bufferediobase_detach
	DD	04H
	ORG $+4
	DQ	FLAT:bufferediobase_detach_doc
	DQ	FLAT:??_C@_04POLDLDMI@read?$AA@
	DQ	FLAT:bufferediobase_read
	DD	01H
	ORG $+4
	DQ	FLAT:bufferediobase_read_doc
	DQ	FLAT:??_C@_05FDBMPOID@read1?$AA@
	DQ	FLAT:bufferediobase_read1
	DD	01H
	ORG $+4
	DQ	FLAT:bufferediobase_read1_doc
	DQ	FLAT:??_C@_08BPEKIGCI@readinto?$AA@
	DQ	FLAT:bufferediobase_readinto
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	FLAT:bufferediobase_write
	DD	01H
	ORG $+4
	DQ	FLAT:bufferediobase_write_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PyBufferedIOBase_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BE@OAGPJFOG@_io?4_BufferedIOBase?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040400H
	ORG $+4
	DQ	FLAT:bufferediobase_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:bufferediobase_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyIOBase_Type
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+72
bufferedreader_doc DB 'Create a new buffered reader using the given reada'
	DB	'ble raw IO object.', 00H
	ORG $+11
bufferedreader_methods DQ FLAT:??_C@_06CNCOJECB@detach?$AA@
	DQ	FLAT:buffered_detach
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_05GLCAEPFP@flush?$AA@
	DQ	FLAT:buffered_simple_flush
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_05LBOHBHFK@close?$AA@
	DQ	FLAT:buffered_close
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08JPFEOKJG@seekable?$AA@
	DQ	FLAT:buffered_seekable
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08INDGGIBD@readable?$AA@
	DQ	FLAT:buffered_readable
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08IBOGFJJC@writable?$AA@
	DQ	FLAT:buffered_writable
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_06FFBIALPD@fileno?$AA@
	DQ	FLAT:buffered_fileno
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_06BMABDNNN@isatty?$AA@
	DQ	FLAT:buffered_isatty
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0O@OLJIIFNG@_dealloc_warn?$AA@
	DQ	FLAT:buffered_dealloc_warn
	DD	08H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0N@NAMJJHIO@__getstate__?$AA@
	DQ	FLAT:buffered_getstate
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04POLDLDMI@read?$AA@
	DQ	FLAT:buffered_read
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04EOCFELL@peek?$AA@
	DQ	FLAT:buffered_peek
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_05FDBMPOID@read1?$AA@
	DQ	FLAT:buffered_read1
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08BPEKIGCI@readinto?$AA@
	DQ	FLAT:buffered_readinto
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08KBCDPPMN@readline?$AA@
	DQ	FLAT:buffered_readline
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04EDECCOGL@seek?$AA@
	DQ	FLAT:buffered_seek
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04LBPCFPDD@tell?$AA@
	DQ	FLAT:buffered_tell
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08MABILMFG@truncate?$AA@
	DQ	FLAT:buffered_truncate
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0L@HOGGIPGN@__sizeof__?$AA@
	DQ	FLAT:buffered_sizeof
	DD	04H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
bufferedreader_members DQ FLAT:??_C@_03DGOGAGNC@raw?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
bufferedreader_getset DQ FLAT:??_C@_06IKJOPBFO@closed?$AA@
	DQ	FLAT:buffered_closed_get
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_04MEMAJGDJ@name?$AA@
	DQ	FLAT:buffered_name_get
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_04GMGOKAFF@mode?$AA@
	DQ	FLAT:buffered_mode_get
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
PyBufferedReader_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BD@POOCNKHH@_io?4BufferedReader?$AA@
	DQ	00000000000000f0H
	DQ	0000000000000000H
	DQ	FLAT:buffered_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:buffered_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:bufferedreader_doc
	DQ	FLAT:buffered_traverse
	DQ	FLAT:buffered_clear
	DQ	0000000000000000H
	DQ	00000000000000e0H
	DQ	0000000000000000H
	DQ	FLAT:buffered_iternext
	DQ	FLAT:bufferedreader_methods
	DQ	FLAT:bufferedreader_members
	DQ	FLAT:bufferedreader_getset
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	00000000000000d8H
	DQ	FLAT:bufferedreader_init
	DQ	0000000000000000H
	DQ	FLAT:PyType_GenericNew
	ORG $+72
bufferedwriter_doc DB 'A buffer for a writeable sequential RawIO object.', 0aH
	DB	0aH, 'The constructor creates a BufferedWriter for the given w'
	DB	'riteable raw', 0aH, 'stream. If the buffer_size is not given,'
	DB	' it defaults to', 0aH, 'DEFAULT_BUFFER_SIZE.', 0aH, 00H
	ORG $+10
bufferedwriter_methods DQ FLAT:??_C@_05LBOHBHFK@close?$AA@
	DQ	FLAT:buffered_close
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_06CNCOJECB@detach?$AA@
	DQ	FLAT:buffered_detach
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08JPFEOKJG@seekable?$AA@
	DQ	FLAT:buffered_seekable
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08INDGGIBD@readable?$AA@
	DQ	FLAT:buffered_readable
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08IBOGFJJC@writable?$AA@
	DQ	FLAT:buffered_writable
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_06FFBIALPD@fileno?$AA@
	DQ	FLAT:buffered_fileno
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_06BMABDNNN@isatty?$AA@
	DQ	FLAT:buffered_isatty
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0O@OLJIIFNG@_dealloc_warn?$AA@
	DQ	FLAT:buffered_dealloc_warn
	DD	08H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0N@NAMJJHIO@__getstate__?$AA@
	DQ	FLAT:buffered_getstate
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	FLAT:bufferedwriter_write
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08MABILMFG@truncate?$AA@
	DQ	FLAT:buffered_truncate
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_05GLCAEPFP@flush?$AA@
	DQ	FLAT:buffered_flush
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04EDECCOGL@seek?$AA@
	DQ	FLAT:buffered_seek
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04LBPCFPDD@tell?$AA@
	DQ	FLAT:buffered_tell
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0L@HOGGIPGN@__sizeof__?$AA@
	DQ	FLAT:buffered_sizeof
	DD	04H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
bufferedwriter_members DQ FLAT:??_C@_03DGOGAGNC@raw?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
bufferedwriter_getset DQ FLAT:??_C@_06IKJOPBFO@closed?$AA@
	DQ	FLAT:buffered_closed_get
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_04MEMAJGDJ@name?$AA@
	DQ	FLAT:buffered_name_get
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_04GMGOKAFF@mode?$AA@
	DQ	FLAT:buffered_mode_get
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
PyBufferedWriter_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BD@NCGANLKN@_io?4BufferedWriter?$AA@
	DQ	00000000000000f0H
	DQ	0000000000000000H
	DQ	FLAT:buffered_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:buffered_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:bufferedwriter_doc
	DQ	FLAT:buffered_traverse
	DQ	FLAT:buffered_clear
	DQ	0000000000000000H
	DQ	00000000000000e0H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:bufferedwriter_methods
	DQ	FLAT:bufferedwriter_members
	DQ	FLAT:bufferedwriter_getset
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	00000000000000d8H
	DQ	FLAT:bufferedwriter_init
	DQ	0000000000000000H
	DQ	FLAT:PyType_GenericNew
	ORG $+72
bufferedrwpair_doc DB 'A buffered reader and writer object together.', 0aH
	DB	0aH, 'A buffered reader object and buffered writer object put '
	DB	'together to', 0aH, 'form a sequential IO object that can read'
	DB	' and write. This is typically', 0aH, 'used with a socket or t'
	DB	'wo-way pipe.', 0aH, 0aH, 'reader and writer are RawIOBase obj'
	DB	'ects that are readable and', 0aH, 'writeable respectively. If'
	DB	' the buffer_size is omitted it defaults to', 0aH, 'DEFAULT_BU'
	DB	'FFER_SIZE.', 0aH, 00H
	ORG $+8
bufferedrwpair_methods DQ FLAT:??_C@_04POLDLDMI@read?$AA@
	DQ	FLAT:bufferedrwpair_read
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04EOCFELL@peek?$AA@
	DQ	FLAT:bufferedrwpair_peek
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_05FDBMPOID@read1?$AA@
	DQ	FLAT:bufferedrwpair_read1
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08BPEKIGCI@readinto?$AA@
	DQ	FLAT:bufferedrwpair_readinto
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	FLAT:bufferedrwpair_write
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_05GLCAEPFP@flush?$AA@
	DQ	FLAT:bufferedrwpair_flush
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08INDGGIBD@readable?$AA@
	DQ	FLAT:bufferedrwpair_readable
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08IBOGFJJC@writable?$AA@
	DQ	FLAT:bufferedrwpair_writable
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_05LBOHBHFK@close?$AA@
	DQ	FLAT:bufferedrwpair_close
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_06BMABDNNN@isatty?$AA@
	DQ	FLAT:bufferedrwpair_isatty
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0N@NAMJJHIO@__getstate__?$AA@
	DQ	FLAT:buffered_getstate
	DD	04H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
bufferedrwpair_getset DQ FLAT:??_C@_06IKJOPBFO@closed?$AA@
	DQ	FLAT:bufferedrwpair_closed_get
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
PyBufferedRWPair_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BD@BFNFOELB@_io?4BufferedRWPair?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:bufferedrwpair_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:bufferedrwpair_doc
	DQ	FLAT:bufferedrwpair_traverse
	DQ	FLAT:bufferedrwpair_clear
	DQ	0000000000000000H
	DQ	0000000000000078H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:bufferedrwpair_methods
	DQ	0000000000000000H
	DQ	FLAT:bufferedrwpair_getset
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000070H
	DQ	FLAT:bufferedrwpair_init
	DQ	0000000000000000H
	DQ	FLAT:PyType_GenericNew
	ORG $+72
bufferedrandom_doc DB 'A buffered interface to random access streams.', 0aH
	DB	0aH, 'The constructor creates a reader and writer for a seekab'
	DB	'le stream,', 0aH, 'raw, given in the first argument. If the b'
	DB	'uffer_size is omitted it', 0aH, 'defaults to DEFAULT_BUFFER_S'
	DB	'IZE.', 0aH, 00H
	ORG $+8
bufferedrandom_methods DQ FLAT:??_C@_05LBOHBHFK@close?$AA@
	DQ	FLAT:buffered_close
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_06CNCOJECB@detach?$AA@
	DQ	FLAT:buffered_detach
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08JPFEOKJG@seekable?$AA@
	DQ	FLAT:buffered_seekable
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08INDGGIBD@readable?$AA@
	DQ	FLAT:buffered_readable
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08IBOGFJJC@writable?$AA@
	DQ	FLAT:buffered_writable
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_06FFBIALPD@fileno?$AA@
	DQ	FLAT:buffered_fileno
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_06BMABDNNN@isatty?$AA@
	DQ	FLAT:buffered_isatty
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0O@OLJIIFNG@_dealloc_warn?$AA@
	DQ	FLAT:buffered_dealloc_warn
	DD	08H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0N@NAMJJHIO@__getstate__?$AA@
	DQ	FLAT:buffered_getstate
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_05GLCAEPFP@flush?$AA@
	DQ	FLAT:buffered_flush
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04EDECCOGL@seek?$AA@
	DQ	FLAT:buffered_seek
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04LBPCFPDD@tell?$AA@
	DQ	FLAT:buffered_tell
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08MABILMFG@truncate?$AA@
	DQ	FLAT:buffered_truncate
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04POLDLDMI@read?$AA@
	DQ	FLAT:buffered_read
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_05FDBMPOID@read1?$AA@
	DQ	FLAT:buffered_read1
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08BPEKIGCI@readinto?$AA@
	DQ	FLAT:buffered_readinto
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08KBCDPPMN@readline?$AA@
	DQ	FLAT:buffered_readline
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04EOCFELL@peek?$AA@
	DQ	FLAT:buffered_peek
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	FLAT:bufferedwriter_write
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0L@HOGGIPGN@__sizeof__?$AA@
	DQ	FLAT:buffered_sizeof
	DD	04H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
bufferedrandom_members DQ FLAT:??_C@_03DGOGAGNC@raw?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
bufferedrandom_getset DQ FLAT:??_C@_06IKJOPBFO@closed?$AA@
	DQ	FLAT:buffered_closed_get
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_04MEMAJGDJ@name?$AA@
	DQ	FLAT:buffered_name_get
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_04GMGOKAFF@mode?$AA@
	DQ	FLAT:buffered_mode_get
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
PyBufferedRandom_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BD@CHOOIEPI@_io?4BufferedRandom?$AA@
	DQ	00000000000000f0H
	DQ	0000000000000000H
	DQ	FLAT:buffered_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:buffered_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:bufferedrandom_doc
	DQ	FLAT:buffered_traverse
	DQ	FLAT:buffered_clear
	DQ	0000000000000000H
	DQ	00000000000000e0H
	DQ	0000000000000000H
	DQ	FLAT:buffered_iternext
	DQ	FLAT:bufferedrandom_methods
	DQ	FLAT:bufferedrandom_members
	DQ	FLAT:bufferedrandom_getset
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	00000000000000d8H
	DQ	FLAT:bufferedrandom_init
	DQ	0000000000000000H
	DQ	FLAT:PyType_GenericNew
	ORG $+72
_DATA	ENDS
;	COMDAT ??_C@_05NGFEDHGN@write?$AA@
CONST	SEGMENT
??_C@_05NGFEDHGN@write?$AA@ DB 'write', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08IBOGFJJC@writable?$AA@
CONST	SEGMENT
??_C@_08IBOGFJJC@writable?$AA@ DB 'writable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BPEKIGCI@readinto?$AA@
CONST	SEGMENT
??_C@_08BPEKIGCI@readinto?$AA@ DB 'readinto', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08INDGGIBD@readable?$AA@
CONST	SEGMENT
??_C@_08INDGGIBD@readable?$AA@ DB 'readable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05FDBMPOID@read1?$AA@
CONST	SEGMENT
??_C@_05FDBMPOID@read1?$AA@ DB 'read1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04POLDLDMI@read?$AA@
CONST	SEGMENT
??_C@_04POLDLDMI@read?$AA@ DB 'read', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EOCFELL@peek?$AA@
CONST	SEGMENT
??_C@_04EOCFELL@peek?$AA@ DB 'peek', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MEMAJGDJ@name?$AA@
CONST	SEGMENT
??_C@_04MEMAJGDJ@name?$AA@ DB 'name', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GMGOKAFF@mode?$AA@
CONST	SEGMENT
??_C@_04GMGOKAFF@mode?$AA@ DB 'mode', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BMABDNNN@isatty?$AA@
CONST	SEGMENT
??_C@_06BMABDNNN@isatty?$AA@ DB 'isatty', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GLCAEPFP@flush?$AA@
CONST	SEGMENT
??_C@_05GLCAEPFP@flush?$AA@ DB 'flush', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OLJIIFNG@_dealloc_warn?$AA@
CONST	SEGMENT
??_C@_0O@OLJIIFNG@_dealloc_warn?$AA@ DB '_dealloc_warn', 00H ; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId_read@?1??bufferediobase_readinto@@9@9 DQ 0000000000000000H ; `bufferediobase_readinto'::`2'::PyId_read
	DQ	FLAT:??_C@_04POLDLDMI@read?$AA@
	DQ	0000000000000000H
PyId_name DQ	0000000000000000H
	DQ	FLAT:??_C@_04MEMAJGDJ@name?$AA@
	DQ	0000000000000000H
PyId_isatty DQ	0000000000000000H
	DQ	FLAT:??_C@_06BMABDNNN@isatty?$AA@
	DQ	0000000000000000H
PyId_close DQ	0000000000000000H
	DQ	FLAT:??_C@_05LBOHBHFK@close?$AA@
	DQ	0000000000000000H
PyId_write DQ	0000000000000000H
	DQ	FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	0000000000000000H
PyId_writable DQ 0000000000000000H
	DQ	FLAT:??_C@_08IBOGFJJC@writable?$AA@
	DQ	0000000000000000H
PyId_readinto DQ 0000000000000000H
	DQ	FLAT:??_C@_08BPEKIGCI@readinto?$AA@
	DQ	0000000000000000H
PyId_readable DQ 0000000000000000H
	DQ	FLAT:??_C@_08INDGGIBD@readable?$AA@
	DQ	0000000000000000H
PyId_read1 DQ	0000000000000000H
	DQ	FLAT:??_C@_05FDBMPOID@read1?$AA@
	DQ	0000000000000000H
PyId_read DQ	0000000000000000H
	DQ	FLAT:??_C@_04POLDLDMI@read?$AA@
	DQ	0000000000000000H
PyId_peek DQ	0000000000000000H
	DQ	FLAT:??_C@_04EOCFELL@peek?$AA@
	DQ	0000000000000000H
PyId_mode DQ	0000000000000000H
	DQ	FLAT:??_C@_04GMGOKAFF@mode?$AA@
	DQ	0000000000000000H
PyId_flush DQ	0000000000000000H
	DQ	FLAT:??_C@_05GLCAEPFP@flush?$AA@
	DQ	0000000000000000H
PyId__dealloc_warn DQ 0000000000000000H
	DQ	FLAT:??_C@_0O@OLJIIFNG@_dealloc_warn?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_05LBOHBHFK@close?$AA@
CONST	SEGMENT
??_C@_05LBOHBHFK@close?$AA@ DB 'close', 00H		; `string'
CONST	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EB@GMKHCBKL@read?$CI?$CJ?5returned?5too?5much?5data?3?5?$CF@ ; `string'
PUBLIC	??_C@_0BL@LFIKHDFM@read?$CI?$CJ?5should?5return?5bytes?$AA@ ; `string'
PUBLIC	??_C@_01EFFIKLCJ@n?$AA@				; `string'
PUBLIC	??_C@_0M@MJKGPJDA@w?$CK?3readinto?$AA@		; `string'
EXTRN	PyLong_FromSsize_t:PROC
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_ValueError:QWORD
EXTRN	PyBuffer_Release:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	_PyObject_CallMethodId_SizeT:PROC
EXTRN	_PyArg_ParseTuple_SizeT:PROC
EXTRN	memcpy:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\modules\_io\bufferedio.c
pdata	SEGMENT
$pdata$bufferediobase_readinto DD imagerel bufferediobase_readinto
	DD	imagerel bufferediobase_readinto+76
	DD	imagerel $unwind$bufferediobase_readinto
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$bufferediobase_readinto DD imagerel bufferediobase_readinto+76
	DD	imagerel bufferediobase_readinto+173
	DD	imagerel $chain$0$bufferediobase_readinto
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$bufferediobase_readinto DD imagerel bufferediobase_readinto+173
	DD	imagerel bufferediobase_readinto+276
	DD	imagerel $chain$2$bufferediobase_readinto
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$bufferediobase_readinto DD 020021H
	DD	0107400H
	DD	imagerel bufferediobase_readinto
	DD	imagerel bufferediobase_readinto+76
	DD	imagerel $unwind$bufferediobase_readinto
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$bufferediobase_readinto DD 020821H
	DD	0107408H
	DD	imagerel bufferediobase_readinto
	DD	imagerel bufferediobase_readinto+76
	DD	imagerel $unwind$bufferediobase_readinto
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferediobase_readinto DD 020601H
	DD	03002d206H
xdata	ENDS
;	COMDAT ??_C@_0EB@GMKHCBKL@read?$CI?$CJ?5returned?5too?5much?5data?3?5?$CF@
CONST	SEGMENT
??_C@_0EB@GMKHCBKL@read?$CI?$CJ?5returned?5too?5much?5data?3?5?$CF@ DB 'r'
	DB	'ead() returned too much data: %zd bytes requested, %zd return'
	DB	'ed', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LFIKHDFM@read?$CI?$CJ?5should?5return?5bytes?$AA@
CONST	SEGMENT
??_C@_0BL@LFIKHDFM@read?$CI?$CJ?5should?5return?5bytes?$AA@ DB 'read() sh'
	DB	'ould return bytes', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EFFIKLCJ@n?$AA@
CONST	SEGMENT
??_C@_01EFFIKLCJ@n?$AA@ DB 'n', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MJKGPJDA@w?$CK?3readinto?$AA@
CONST	SEGMENT
??_C@_0M@MJKGPJDA@w?$CK?3readinto?$AA@ DB 'w*:readinto', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT bufferediobase_readinto
_TEXT	SEGMENT
buf$ = 32
self$ = 128
args$ = 136
bufferediobase_readinto PROC				; COMDAT

; 51   : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  00006	48 8b c2	 mov	 rax, rdx
  00009	48 8b d9	 mov	 rbx, rcx

; 52   :     Py_buffer buf;
; 53   :     Py_ssize_t len;
; 54   :     PyObject *data;
; 55   :     _Py_IDENTIFIER(read);
; 56   : 
; 57   :     if (!PyArg_ParseTuple(args, "w*:readinto", &buf)) {

  0000c	4c 8d 44 24 20	 lea	 r8, QWORD PTR buf$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@MJKGPJDA@w?$CK?3readinto?$AA@
  00018	48 8b c8	 mov	 rcx, rax
  0001b	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00020	85 c0		 test	 eax, eax
  00022	75 08		 jne	 SHORT $LN4@bufferedio

; 58   :         return NULL;

  00024	33 c0		 xor	 eax, eax

; 90   : }

  00026	48 83 c4 70	 add	 rsp, 112		; 00000070H
  0002a	5b		 pop	 rbx
  0002b	c3		 ret	 0
$LN4@bufferedio:

; 59   :     }
; 60   : 
; 61   :     data = _PyObject_CallMethodId(self, &PyId_read, "n", buf.len);

  0002c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00032	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0003b	4c 8b 4c 24 30	 mov	 r9, QWORD PTR buf$[rsp+16]
  00040	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_read@?1??bufferediobase_readinto@@9@9
  00045	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01EFFIKLCJ@n?$AA@
  0004c	48 89 bc 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rdi
  00054	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  00058	48 8b cb	 mov	 rcx, rbx
  0005b	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  00060	48 8b d8	 mov	 rbx, rax

; 62   :     if (data == NULL)

  00063	48 85 c0	 test	 rax, rax
  00066	74 2b		 je	 SHORT $error$20440

; 63   :         goto error;
; 64   : 
; 65   :     if (!PyBytes_Check(data)) {

  00068	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0006c	f7 81 00 01 00
	00 00 00 00 08	 test	 DWORD PTR [rcx+256], 134217728 ; 08000000H
  00076	75 35		 jne	 SHORT $LN2@bufferedio

; 66   :         Py_DECREF(data);

  00078	48 8b c8	 mov	 rcx, rax
  0007b	e8 00 00 00 00	 call	 _Py_DecRef

; 67   :         PyErr_SetString(PyExc_TypeError, "read() should return bytes");

  00080	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00087	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@LFIKHDFM@read?$CI?$CJ?5should?5return?5bytes?$AA@
  0008e	e8 00 00 00 00	 call	 PyErr_SetString
$error$20440:

; 86   : 
; 87   :   error:
; 88   :     PyBuffer_Release(&buf);

  00093	48 8d 4c 24 20	 lea	 rcx, QWORD PTR buf$[rsp]
  00098	e8 00 00 00 00	 call	 PyBuffer_Release
  0009d	48 8b bc 24 80
	00 00 00	 mov	 rdi, QWORD PTR [rsp+128]

; 89   :     return NULL;

  000a5	33 c0		 xor	 eax, eax

; 90   : }

  000a7	48 83 c4 70	 add	 rsp, 112		; 00000070H
  000ab	5b		 pop	 rbx
  000ac	c3		 ret	 0
$LN2@bufferedio:

; 68   :         goto error;
; 69   :     }
; 70   : 
; 71   :     len = Py_SIZE(data);

  000ad	48 8b 78 60	 mov	 rdi, QWORD PTR [rax+96]

; 72   :     if (len > buf.len) {

  000b1	4c 8b 44 24 30	 mov	 r8, QWORD PTR buf$[rsp+16]
  000b6	49 3b f8	 cmp	 rdi, r8
  000b9	7e 20		 jle	 SHORT $LN1@bufferedio

; 73   :         PyErr_Format(PyExc_ValueError,
; 74   :                      "read() returned too much data: "
; 75   :                      "%zd bytes requested, %zd returned",
; 76   :                      buf.len, len);

  000bb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EB@GMKHCBKL@read?$CI?$CJ?5returned?5too?5much?5data?3?5?$CF@
  000c9	4c 8b cf	 mov	 r9, rdi
  000cc	e8 00 00 00 00	 call	 PyErr_Format

; 77   :         Py_DECREF(data);

  000d1	48 8b cb	 mov	 rcx, rbx
  000d4	e8 00 00 00 00	 call	 _Py_DecRef
  000d9	eb b8		 jmp	 SHORT $error$20440
$LN1@bufferedio:

; 78   :         goto error;
; 79   :     }
; 80   :     memcpy(buf.buf, PyBytes_AS_STRING(data), len);

  000db	48 8b 4c 24 20	 mov	 rcx, QWORD PTR buf$[rsp]
  000e0	48 8d 50 78	 lea	 rdx, QWORD PTR [rax+120]
  000e4	4c 8b c7	 mov	 r8, rdi
  000e7	e8 00 00 00 00	 call	 memcpy

; 81   : 
; 82   :     PyBuffer_Release(&buf);

  000ec	48 8d 4c 24 20	 lea	 rcx, QWORD PTR buf$[rsp]
  000f1	e8 00 00 00 00	 call	 PyBuffer_Release

; 83   :     Py_DECREF(data);

  000f6	48 8b cb	 mov	 rcx, rbx
  000f9	e8 00 00 00 00	 call	 _Py_DecRef

; 84   : 
; 85   :     return PyLong_FromSsize_t(len);

  000fe	48 8b cf	 mov	 rcx, rdi
  00101	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  00106	48 8b bc 24 80
	00 00 00	 mov	 rdi, QWORD PTR [rsp+128]

; 90   : }

  0010e	48 83 c4 70	 add	 rsp, 112		; 00000070H
  00112	5b		 pop	 rbx
  00113	c3		 ret	 0
bufferediobase_readinto ENDP
_TEXT	ENDS
EXTRN	PyModule_GetState:PROC
EXTRN	PyState_FindModule:PROC
EXTRN	_PyIO_Module:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$bufferediobase_unsupported DD imagerel bufferediobase_unsupported
	DD	imagerel bufferediobase_unsupported+49
	DD	imagerel $unwind$bufferediobase_unsupported
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferediobase_unsupported DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT bufferediobase_unsupported
_TEXT	SEGMENT
message$ = 48
bufferediobase_unsupported PROC				; COMDAT

; 94   : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 95   :     PyErr_SetString(IO_STATE->unsupported_operation, message);

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyIO_Module
  00010	e8 00 00 00 00	 call	 PyState_FindModule
  00015	48 8b c8	 mov	 rcx, rax
  00018	e8 00 00 00 00	 call	 PyModule_GetState
  0001d	48 8b d3	 mov	 rdx, rbx
  00020	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00024	e8 00 00 00 00	 call	 PyErr_SetString

; 96   :     return NULL;

  00029	33 c0		 xor	 eax, eax

; 97   : }

  0002b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002f	5b		 pop	 rbx
  00030	c3		 ret	 0
bufferediobase_unsupported ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT bufferediobase_detach
_TEXT	SEGMENT
self$ = 8
bufferediobase_detach PROC				; COMDAT

; 108  :     return bufferediobase_unsupported("detach");

  00000	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06CNCOJECB@detach?$AA@

; 109  : }

  00007	e9 00 00 00 00	 jmp	 bufferediobase_unsupported
bufferediobase_detach ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT bufferediobase_read
_TEXT	SEGMENT
self$ = 8
args$ = 16
bufferediobase_read PROC				; COMDAT

; 132  :     return bufferediobase_unsupported("read");

  00000	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04POLDLDMI@read?$AA@

; 133  : }

  00007	e9 00 00 00 00	 jmp	 bufferediobase_unsupported
bufferediobase_read ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT bufferediobase_read1
_TEXT	SEGMENT
self$ = 8
args$ = 16
bufferediobase_read1 PROC				; COMDAT

; 145  :     return bufferediobase_unsupported("read1");

  00000	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05FDBMPOID@read1?$AA@

; 146  : }

  00007	e9 00 00 00 00	 jmp	 bufferediobase_unsupported
bufferediobase_read1 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT bufferediobase_write
_TEXT	SEGMENT
self$ = 8
args$ = 16
bufferediobase_write PROC				; COMDAT

; 160  :     return bufferediobase_unsupported("write");

  00000	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05NGFEDHGN@write?$AA@

; 161  : }

  00007	e9 00 00 00 00	 jmp	 bufferediobase_unsupported
bufferediobase_write ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@KBALIPGJ@reentrant?5call?5inside?5?$CFR?$AA@ ; `string'
EXTRN	PyEval_RestoreThread:PROC
EXTRN	PyThread_acquire_lock:PROC
EXTRN	PyEval_SaveThread:PROC
EXTRN	PyExc_RuntimeError:QWORD
EXTRN	PyThread_get_thread_ident:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_enter_buffered_busy DD imagerel _enter_buffered_busy
	DD	imagerel _enter_buffered_busy+108
	DD	imagerel $unwind$_enter_buffered_busy
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_enter_buffered_busy DD 043b01H
	DD	06343bH
	DD	070023206H
xdata	ENDS
;	COMDAT ??_C@_0BJ@KBALIPGJ@reentrant?5call?5inside?5?$CFR?$AA@
CONST	SEGMENT
??_C@_0BJ@KBALIPGJ@reentrant?5call?5inside?5?$CFR?$AA@ DB 'reentrant call'
	DB	' inside %R', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _enter_buffered_busy
_TEXT	SEGMENT
self$ = 48
_enter_buffered_busy PROC				; COMDAT

; 290  : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b f9	 mov	 rdi, rcx

; 291  :     if (self->owner == PyThread_get_thread_ident()) {

  00009	e8 00 00 00 00	 call	 PyThread_get_thread_ident
  0000e	8b 97 c0 00 00
	00		 mov	 edx, DWORD PTR [rdi+192]
  00014	3b d0		 cmp	 edx, eax
  00016	75 1e		 jne	 SHORT $LN1@enter_buff

; 292  :         PyErr_Format(PyExc_RuntimeError,
; 293  :                      "reentrant call inside %R", self);

  00018	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@KBALIPGJ@reentrant?5call?5inside?5?$CFR?$AA@
  00026	4c 8b c7	 mov	 r8, rdi
  00029	e8 00 00 00 00	 call	 PyErr_Format

; 294  :         return 0;

  0002e	33 c0		 xor	 eax, eax

; 300  : }

  00030	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00034	5f		 pop	 rdi
  00035	c3		 ret	 0
$LN1@enter_buff:
  00036	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx

; 295  :     }
; 296  :     Py_BEGIN_ALLOW_THREADS

  0003b	e8 00 00 00 00	 call	 PyEval_SaveThread

; 297  :     PyThread_acquire_lock(self->lock, 1);

  00040	48 8b 8f b8 00
	00 00		 mov	 rcx, QWORD PTR [rdi+184]
  00047	ba 01 00 00 00	 mov	 edx, 1
  0004c	48 8b d8	 mov	 rbx, rax
  0004f	e8 00 00 00 00	 call	 PyThread_acquire_lock

; 298  :     Py_END_ALLOW_THREADS

  00054	48 8b cb	 mov	 rcx, rbx
  00057	e8 00 00 00 00	 call	 PyEval_RestoreThread
  0005c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 299  :     return 1;

  00061	b8 01 00 00 00	 mov	 eax, 1

; 300  : }

  00066	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006a	5f		 pop	 rdi
  0006b	c3		 ret	 0
_enter_buffered_busy ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@MBAKODIJ@buffered_dealloc?$AA@	; `string'
PUBLIC	??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@ ; `string'
EXTRN	PyThread_free_lock:PROC
EXTRN	PyMem_Free:PROC
EXTRN	PyObject_ClearWeakRefs:PROC
EXTRN	_PyIOBase_finalize:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_dealloc DD imagerel buffered_dealloc
	DD	imagerel buffered_dealloc+58
	DD	imagerel $unwind$buffered_dealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$buffered_dealloc DD imagerel buffered_dealloc+58
	DD	imagerel buffered_dealloc+373
	DD	imagerel $chain$0$buffered_dealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$buffered_dealloc DD imagerel buffered_dealloc+373
	DD	imagerel buffered_dealloc+379
	DD	imagerel $chain$1$buffered_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$buffered_dealloc DD 021H
	DD	imagerel buffered_dealloc
	DD	imagerel buffered_dealloc+58
	DD	imagerel $unwind$buffered_dealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$buffered_dealloc DD 020521H
	DD	087405H
	DD	imagerel buffered_dealloc
	DD	imagerel buffered_dealloc+58
	DD	imagerel $unwind$buffered_dealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_dealloc DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0BB@MBAKODIJ@buffered_dealloc?$AA@
CONST	SEGMENT
??_C@_0BB@MBAKODIJ@buffered_dealloc?$AA@ DB 'buffered_dealloc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
CONST	SEGMENT
??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@ DB '..\Modules\'
	DB	'_io\bufferedio.c', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT buffered_dealloc
_TEXT	SEGMENT
self$ = 64
buffered_dealloc PROC					; COMDAT

; 386  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 387  :     self->deallocating = 1;
; 388  :     if (self->ok && _PyIOBase_finalize((PyObject *) self) < 0)

  00006	83 79 68 00	 cmp	 DWORD PTR [rcx+104], 0
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	c7 41 78 01 00
	00 00		 mov	 DWORD PTR [rcx+120], 1
  00014	74 0d		 je	 SHORT $LN16@buffered_d
  00016	e8 00 00 00 00	 call	 _PyIOBase_finalize
  0001b	85 c0		 test	 eax, eax
  0001d	0f 88 52 01 00
	00		 js	 $LN17@buffered_d
$LN16@buffered_d:

; 389  :         return;
; 390  :     _PyObject_GC_UNTRACK(self);

  00023	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@MBAKODIJ@buffered_dealloc?$AA@
  00031	4c 8b cb	 mov	 r9, rbx
  00034	41 b8 86 01 00
	00		 mov	 r8d, 390		; 00000186H
  0003a	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	33 ff		 xor	 edi, edi
  0004e	85 c0		 test	 eax, eax
  00050	75 4e		 jne	 SHORT $LN12@buffered_d
  00052	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  00059	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@MBAKODIJ@buffered_dealloc?$AA@
  00060	4c 8b cb	 mov	 r9, rbx
  00063	41 b8 86 01 00
	00		 mov	 r8d, 390		; 00000186H
  00069	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00071	e8 00 00 00 00	 call	 _PyParallel_Guard
  00076	8b d7		 mov	 edx, edi
  00078	85 c0		 test	 eax, eax
  0007a	75 04		 jne	 SHORT $LN20@buffered_d
  0007c	48 8d 53 e8	 lea	 rdx, QWORD PTR [rbx-24]
$LN20@buffered_d:
  00080	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00083	48 8b 4a 08	 mov	 rcx, QWORD PTR [rdx+8]
  00087	48 c7 42 10 fe
	ff ff ff	 mov	 QWORD PTR [rdx+16], -2
  0008f	48 89 01	 mov	 QWORD PTR [rcx], rax
  00092	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  00095	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  00099	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  0009d	48 89 3a	 mov	 QWORD PTR [rdx], rdi
$LN12@buffered_d:

; 391  :     self->ok = 0;

  000a0	89 7b 68	 mov	 DWORD PTR [rbx+104], edi

; 392  :     if (self->weakreflist != NULL)

  000a3	48 39 bb e0 00
	00 00		 cmp	 QWORD PTR [rbx+224], rdi
  000aa	74 08		 je	 SHORT $LN10@buffered_d

; 393  :         PyObject_ClearWeakRefs((PyObject *)self);

  000ac	48 8b cb	 mov	 rcx, rbx
  000af	e8 00 00 00 00	 call	 PyObject_ClearWeakRefs
$LN10@buffered_d:

; 394  :     Py_CLEAR(self->raw);

  000b4	4c 8b 4b 60	 mov	 r9, QWORD PTR [rbx+96]
  000b8	4d 85 c9	 test	 r9, r9
  000bb	74 32		 je	 SHORT $LN9@buffered_d
  000bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  000c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@MBAKODIJ@buffered_dealloc?$AA@
  000cb	41 b8 8a 01 00
	00		 mov	 r8d, 394		; 0000018aH
  000d1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d9	e8 00 00 00 00	 call	 _PyParallel_Guard
  000de	85 c0		 test	 eax, eax
  000e0	75 0d		 jne	 SHORT $LN9@buffered_d
  000e2	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  000e6	48 89 7b 60	 mov	 QWORD PTR [rbx+96], rdi
  000ea	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@buffered_d:

; 395  :     if (self->buffer) {

  000ef	48 8b 8b 88 00
	00 00		 mov	 rcx, QWORD PTR [rbx+136]
  000f6	48 85 c9	 test	 rcx, rcx
  000f9	74 0c		 je	 SHORT $LN6@buffered_d

; 396  :         PyMem_Free(self->buffer);

  000fb	e8 00 00 00 00	 call	 PyMem_Free

; 397  :         self->buffer = NULL;

  00100	48 89 bb 88 00
	00 00		 mov	 QWORD PTR [rbx+136], rdi
$LN6@buffered_d:

; 398  :     }
; 399  : #ifdef WITH_THREAD
; 400  :     if (self->lock) {

  00107	48 8b 8b b8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+184]
  0010e	48 85 c9	 test	 rcx, rcx
  00111	74 0c		 je	 SHORT $LN4@buffered_d

; 401  :         PyThread_free_lock(self->lock);

  00113	e8 00 00 00 00	 call	 PyThread_free_lock

; 402  :         self->lock = NULL;

  00118	48 89 bb b8 00
	00 00		 mov	 QWORD PTR [rbx+184], rdi
$LN4@buffered_d:

; 403  :     }
; 404  : #endif
; 405  :     Py_CLEAR(self->dict);

  0011f	4c 8b 8b d8 00
	00 00		 mov	 r9, QWORD PTR [rbx+216]
  00126	4d 85 c9	 test	 r9, r9
  00129	74 38		 je	 SHORT $LN3@buffered_d
  0012b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  00132	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@MBAKODIJ@buffered_dealloc?$AA@
  00139	41 b8 95 01 00
	00		 mov	 r8d, 405		; 00000195H
  0013f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00147	e8 00 00 00 00	 call	 _PyParallel_Guard
  0014c	85 c0		 test	 eax, eax
  0014e	75 13		 jne	 SHORT $LN3@buffered_d
  00150	48 8b 8b d8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+216]
  00157	48 89 bb d8 00
	00 00		 mov	 QWORD PTR [rbx+216], rdi
  0015e	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@buffered_d:

; 406  :     Py_TYPE(self)->tp_free((PyObject *)self);

  00163	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00167	48 8b cb	 mov	 rcx, rbx
  0016a	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]
  00170	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
$LN17@buffered_d:

; 407  : }

  00175	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00179	5b		 pop	 rbx
  0017a	c3		 ret	 0
buffered_dealloc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT buffered_sizeof
_TEXT	SEGMENT
self$ = 8
unused$ = 16
buffered_sizeof PROC					; COMDAT

; 411  : {

  00000	48 8b c1	 mov	 rax, rcx

; 412  :     Py_ssize_t res;
; 413  : 
; 414  :     res = sizeof(buffered);

  00003	b9 f0 00 00 00	 mov	 ecx, 240		; 000000f0H

; 415  :     if (self->buffer)

  00008	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  00010	74 0a		 je	 SHORT $LN1@buffered_s

; 416  :         res += self->buffer_size;

  00012	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  00019	48 03 c8	 add	 rcx, rax
$LN1@buffered_s:

; 417  :     return PyLong_FromSsize_t(res);
; 418  : }

  0001c	e9 00 00 00 00	 jmp	 PyLong_FromSsize_t
buffered_sizeof ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@EHJJLLHI@buffered_traverse?$AA@	; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_traverse DD imagerel buffered_traverse
	DD	imagerel buffered_traverse+155
	DD	imagerel $unwind$buffered_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BC@EHJJLLHI@buffered_traverse?$AA@
CONST	SEGMENT
??_C@_0BC@EHJJLLHI@buffered_traverse?$AA@ DB 'buffered_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT buffered_traverse
_TEXT	SEGMENT
self$ = 48
visit$ = 56
arg$ = 64
buffered_traverse PROC					; COMDAT

; 422  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 423  :     Py_VISIT(self->raw);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN9@buffered_t
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@EHJJLLHI@buffered_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 a7 01 00
	00		 mov	 r8d, 423		; 000001a7H
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@buffered_t:
  0003d	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN11@buffered_t
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 3c		 jne	 SHORT $LN13@buffered_t
$LN11@buffered_t:

; 424  :     Py_VISIT(self->dict);

  0004f	e8 00 00 00 00	 call	 _Py_PXCTX
  00054	85 c0		 test	 eax, eax
  00056	74 1c		 je	 SHORT $LN3@buffered_t
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@EHJJLLHI@buffered_traverse?$AA@
  00066	45 33 c9	 xor	 r9d, r9d
  00069	41 b8 a8 01 00
	00		 mov	 r8d, 424		; 000001a8H
  0006f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@buffered_t:
  00074	48 8b 8b d8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+216]
  0007b	48 85 c9	 test	 rcx, rcx
  0007e	74 09		 je	 SHORT $LN5@buffered_t
  00080	48 8b d7	 mov	 rdx, rdi
  00083	ff d6		 call	 rsi
  00085	85 c0		 test	 eax, eax
  00087	75 02		 jne	 SHORT $LN13@buffered_t
$LN5@buffered_t:

; 425  :     return 0;

  00089	33 c0		 xor	 eax, eax
$LN13@buffered_t:

; 426  : }

  0008b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00090	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00095	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00099	5f		 pop	 rdi
  0009a	c3		 ret	 0
buffered_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@LJANPOI@buffered_clear?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$buffered_clear DD imagerel buffered_clear
	DD	imagerel buffered_clear+90
	DD	imagerel $unwind$buffered_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$buffered_clear DD imagerel buffered_clear+90
	DD	imagerel buffered_clear+213
	DD	imagerel $chain$0$buffered_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$buffered_clear DD imagerel buffered_clear+213
	DD	imagerel buffered_clear+293
	DD	imagerel $chain$1$buffered_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$buffered_clear DD 021H
	DD	imagerel buffered_clear
	DD	imagerel buffered_clear+90
	DD	imagerel $unwind$buffered_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$buffered_clear DD 020521H
	DD	087405H
	DD	imagerel buffered_clear
	DD	imagerel buffered_clear+90
	DD	imagerel $unwind$buffered_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_clear DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0P@LJANPOI@buffered_clear?$AA@
CONST	SEGMENT
??_C@_0P@LJANPOI@buffered_clear?$AA@ DB 'buffered_clear', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\bufferedio.c
CONST	ENDS
;	COMDAT buffered_clear
_TEXT	SEGMENT
self$ = 64
buffered_clear PROC					; COMDAT

; 430  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 431  :     if (self->ok && _PyIOBase_finalize((PyObject *) self) < 0)

  00006	83 79 68 00	 cmp	 DWORD PTR [rcx+104], 0
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	74 12		 je	 SHORT $LN9@buffered_c
  0000f	e8 00 00 00 00	 call	 _PyIOBase_finalize
  00014	85 c0		 test	 eax, eax
  00016	79 09		 jns	 SHORT $LN9@buffered_c

; 432  :         return -1;

  00018	83 c8 ff	 or	 eax, -1

; 437  : }

  0001b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0001f	5b		 pop	 rbx
  00020	c3		 ret	 0
$LN9@buffered_c:

; 433  :     self->ok = 0;
; 434  :     Py_CLEAR(self->raw);

  00021	4c 8b 4b 60	 mov	 r9, QWORD PTR [rbx+96]
  00025	c7 43 68 00 00
	00 00		 mov	 DWORD PTR [rbx+104], 0
  0002c	4d 85 c9	 test	 r9, r9
  0002f	0f 84 a0 00 00
	00		 je	 $LN7@buffered_c
  00035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@LJANPOI@buffered_clear?$AA@
  00043	41 b8 b2 01 00
	00		 mov	 r8d, 434		; 000001b2H
  00049	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00051	e8 00 00 00 00	 call	 _PyParallel_Guard
  00056	85 c0		 test	 eax, eax
  00058	75 7b		 jne	 SHORT $LN7@buffered_c
  0005a	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  0005f	48 8b 7b 60	 mov	 rdi, QWORD PTR [rbx+96]
  00063	48 c7 43 60 00
	00 00 00	 mov	 QWORD PTR [rbx+96], 0
  0006b	e8 00 00 00 00	 call	 _Py_PXCTX
  00070	85 c0		 test	 eax, eax
  00072	75 5c		 jne	 SHORT $LN23@buffered_c
  00074	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00078	a8 20		 test	 al, 32			; 00000020H
  0007a	75 4c		 jne	 SHORT $LN16@buffered_c
  0007c	84 c0		 test	 al, al
  0007e	78 48		 js	 SHORT $LN16@buffered_c
  00080	a8 02		 test	 al, 2
  00082	75 4c		 jne	 SHORT $LN23@buffered_c
  00084	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00088	75 46		 jne	 SHORT $LN23@buffered_c
  0008a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00091	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00098	4c 8b cf	 mov	 r9, rdi
  0009b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000a1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000a9	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ae	48 8b cf	 mov	 rcx, rdi
  000b1	85 c0		 test	 eax, eax
  000b3	74 07		 je	 SHORT $LN21@buffered_c
  000b5	e8 00 00 00 00	 call	 _Px_Dealloc
  000ba	eb 14		 jmp	 SHORT $LN23@buffered_c
$LN21@buffered_c:
  000bc	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000c0	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000c6	eb 08		 jmp	 SHORT $LN23@buffered_c
$LN16@buffered_c:
  000c8	48 8b cf	 mov	 rcx, rdi
  000cb	e8 00 00 00 00	 call	 Px_DecRef
$LN23@buffered_c:
  000d0	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
$LN7@buffered_c:

; 435  :     Py_CLEAR(self->dict);

  000d5	4c 8b 8b d8 00
	00 00		 mov	 r9, QWORD PTR [rbx+216]
  000dc	4d 85 c9	 test	 r9, r9
  000df	74 3c		 je	 SHORT $LN3@buffered_c
  000e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  000e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@LJANPOI@buffered_clear?$AA@
  000ef	41 b8 b3 01 00
	00		 mov	 r8d, 435		; 000001b3H
  000f5	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000fd	e8 00 00 00 00	 call	 _PyParallel_Guard
  00102	85 c0		 test	 eax, eax
  00104	75 17		 jne	 SHORT $LN3@buffered_c
  00106	48 8b 8b d8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+216]
  0010d	48 c7 83 d8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rbx+216], 0
  00118	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@buffered_c:

; 436  :     return 0;

  0011d	33 c0		 xor	 eax, eax

; 437  : }

  0011f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00123	5b		 pop	 rbx
  00124	c3		 ret	 0
buffered_clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_01MJMHLOMK@O?$AA@				; `string'
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyErr_Clear:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$buffered_dealloc_warn DD imagerel buffered_dealloc_warn
	DD	imagerel buffered_dealloc_warn+186
	DD	imagerel $unwind$buffered_dealloc_warn
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_dealloc_warn DD 035401H
	DD	063454H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_01MJMHLOMK@O?$AA@
CONST	SEGMENT
??_C@_01MJMHLOMK@O?$AA@ DB 'O', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\bufferedio.c
CONST	ENDS
;	COMDAT buffered_dealloc_warn
_TEXT	SEGMENT
self$ = 64
source$ = 72
buffered_dealloc_warn PROC				; COMDAT

; 444  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 445  :     if (self->ok && self->raw) {

  00004	83 79 68 00	 cmp	 DWORD PTR [rcx+104], 0
  00008	4c 8b ca	 mov	 r9, rdx
  0000b	74 42		 je	 SHORT $LN1@buffered_d@2
  0000d	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00011	48 85 c9	 test	 rcx, rcx
  00014	74 39		 je	 SHORT $LN1@buffered_d@2

; 446  :         PyObject *r;
; 447  :         r = _PyObject_CallMethodId(self->raw, &PyId__dealloc_warn, "O", source);

  00016	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  0001d	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00026	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId__dealloc_warn
  0002b	4a 03 14 c0	 add	 rdx, QWORD PTR [rax+r8*8]
  0002f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01MJMHLOMK@O?$AA@
  00036	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT

; 448  :         if (r)

  0003b	48 85 c0	 test	 rax, rax
  0003e	74 0a		 je	 SHORT $LN2@buffered_d@2

; 449  :             Py_DECREF(r);

  00040	48 8b c8	 mov	 rcx, rax
  00043	e8 00 00 00 00	 call	 _Py_DecRef

; 450  :         else

  00048	eb 05		 jmp	 SHORT $LN1@buffered_d@2
$LN2@buffered_d@2:

; 451  :             PyErr_Clear();

  0004a	e8 00 00 00 00	 call	 PyErr_Clear
$LN1@buffered_d@2:
  0004f	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx

; 452  :     }
; 453  :     Py_RETURN_NONE;

  00054	e8 00 00 00 00	 call	 _Py_PXCTX
  00059	85 c0		 test	 eax, eax
  0005b	75 4c		 jne	 SHORT $LN10@buffered_d@2
  0005d	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  00064	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0006b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00072	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00078	4c 8b cb	 mov	 r9, rbx
  0007b	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00083	e8 00 00 00 00	 call	 _PyParallel_Guard
  00088	85 c0		 test	 eax, eax
  0008a	75 09		 jne	 SHORT $LN6@buffered_d@2
  0008c	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00093	74 07		 je	 SHORT $LN12@buffered_d@2
$LN6@buffered_d@2:
  00095	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN12@buffered_d@2:
  0009c	48 8b c3	 mov	 rax, rbx
  0009f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 454  : }

  000a4	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a8	c3		 ret	 0
$LN10@buffered_d@2:

; 452  :     }
; 453  :     Py_RETURN_NONE;

  000a9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000b0	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 454  : }

  000b5	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b9	c3		 ret	 0
buffered_dealloc_warn ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@ ; `string'
PUBLIC	??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@ ; `string'
EXTRN	PyObject_CallMethodObjArgs:PROC
EXTRN	_PyIO_str_flush:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_simple_flush DD imagerel buffered_simple_flush
	DD	imagerel buffered_simple_flush+72
	DD	imagerel $unwind$buffered_simple_flush
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_simple_flush DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
CONST	SEGMENT
??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@ DB 'I/O operati'
	DB	'on on uninitialized object', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
CONST	SEGMENT
??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@ DB 'raw stream h'
	DB	'as been detached', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT buffered_simple_flush
_TEXT	SEGMENT
self$ = 48
args$ = 56
buffered_simple_flush PROC				; COMDAT

; 466  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 467  :     CHECK_INITIALIZED(self)

  00004	83 79 68 00	 cmp	 DWORD PTR [rcx+104], 0
  00008	7f 27		 jg	 SHORT $LN3@buffered_s@2
  0000a	83 79 6c 00	 cmp	 DWORD PTR [rcx+108], 0
  0000e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  0001c	75 07		 jne	 SHORT $LN6@buffered_s@2
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
$LN6@buffered_s@2:
  00025	e8 00 00 00 00	 call	 PyErr_SetString
  0002a	33 c0		 xor	 eax, eax

; 469  : }

  0002c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00030	c3		 ret	 0
$LN3@buffered_s@2:

; 468  :     return PyObject_CallMethodObjArgs(self->raw, _PyIO_str_flush, NULL);

  00031	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_flush
  00038	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  0003c	45 33 c0	 xor	 r8d, r8d

; 469  : }

  0003f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00043	e9 00 00 00 00	 jmp	 PyObject_CallMethodObjArgs
buffered_simple_flush ENDP
_TEXT	ENDS
EXTRN	PyObject_IsTrue:PROC
EXTRN	PyObject_GetAttr:PROC
EXTRN	_PyIO_str_closed:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_closed DD imagerel buffered_closed
	DD	imagerel buffered_closed+61
	DD	imagerel $unwind$buffered_closed
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$buffered_closed DD imagerel buffered_closed+61
	DD	imagerel buffered_closed+92
	DD	imagerel $chain$0$buffered_closed
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$buffered_closed DD imagerel buffered_closed+92
	DD	imagerel buffered_closed+132
	DD	imagerel $chain$3$buffered_closed
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$buffered_closed DD 040821H
	DD	063408H
	DD	047400H
	DD	imagerel buffered_closed
	DD	imagerel buffered_closed+61
	DD	imagerel $unwind$buffered_closed
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$buffered_closed DD 020521H
	DD	047405H
	DD	imagerel buffered_closed
	DD	imagerel buffered_closed+61
	DD	imagerel $unwind$buffered_closed
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_closed DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT buffered_closed
_TEXT	SEGMENT
self$ = 48
buffered_closed PROC					; COMDAT

; 473  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 474  :     int closed;
; 475  :     PyObject *res;
; 476  :     CHECK_INITIALIZED_INT(self)

  00004	83 79 68 00	 cmp	 DWORD PTR [rcx+104], 0
  00008	7f 28		 jg	 SHORT $LN4@buffered_c@2
  0000a	83 79 6c 00	 cmp	 DWORD PTR [rcx+108], 0
  0000e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  0001c	75 07		 jne	 SHORT $LN8@buffered_c@2
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
$LN8@buffered_c@2:
  00025	e8 00 00 00 00	 call	 PyErr_SetString
  0002a	83 c8 ff	 or	 eax, -1

; 483  : }

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
$LN4@buffered_c@2:

; 477  :     res = PyObject_GetAttr(self->raw, _PyIO_str_closed);

  00032	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_closed
  00039	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  0003d	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00042	e8 00 00 00 00	 call	 PyObject_GetAttr
  00047	48 8b f8	 mov	 rdi, rax

; 478  :     if (res == NULL)

  0004a	48 85 c0	 test	 rax, rax
  0004d	75 0d		 jne	 SHORT $LN1@buffered_c@2

; 479  :         return -1;

  0004f	83 c8 ff	 or	 eax, -1
  00052	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]

; 483  : }

  00057	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005b	c3		 ret	 0
$LN1@buffered_c@2:

; 480  :     closed = PyObject_IsTrue(res);

  0005c	48 8b c8	 mov	 rcx, rax
  0005f	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00064	e8 00 00 00 00	 call	 PyObject_IsTrue

; 481  :     Py_DECREF(res);

  00069	48 8b cf	 mov	 rcx, rdi
  0006c	8b d8		 mov	 ebx, eax
  0006e	e8 00 00 00 00	 call	 _Py_DecRef
  00073	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]

; 482  :     return closed;

  00078	8b c3		 mov	 eax, ebx
  0007a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 483  : }

  0007f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00083	c3		 ret	 0
buffered_closed ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_closed_get DD imagerel buffered_closed_get
	DD	imagerel buffered_closed_get+69
	DD	imagerel $unwind$buffered_closed_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_closed_get DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT buffered_closed_get
_TEXT	SEGMENT
self$ = 48
context$ = 56
buffered_closed_get PROC				; COMDAT

; 487  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 488  :     CHECK_INITIALIZED(self)

  00004	83 79 68 00	 cmp	 DWORD PTR [rcx+104], 0
  00008	7f 27		 jg	 SHORT $LN3@buffered_c@3
  0000a	83 79 6c 00	 cmp	 DWORD PTR [rcx+108], 0
  0000e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  0001c	75 07		 jne	 SHORT $LN6@buffered_c@3
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
$LN6@buffered_c@3:
  00025	e8 00 00 00 00	 call	 PyErr_SetString
  0002a	33 c0		 xor	 eax, eax

; 490  : }

  0002c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00030	c3		 ret	 0
$LN3@buffered_c@3:

; 489  :     return PyObject_GetAttr(self->raw, _PyIO_str_closed);

  00031	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_closed
  00038	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]

; 490  : }

  0003c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00040	e9 00 00 00 00	 jmp	 PyObject_GetAttr
buffered_closed_get ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@HOAMMMAE@buffered_close?$AA@		; `string'
EXTRN	PyErr_Restore:PROC
EXTRN	PyException_SetContext:PROC
EXTRN	PyErr_NormalizeException:PROC
EXTRN	_PyIO_str_close:QWORD
EXTRN	PyErr_Fetch:PROC
EXTRN	PyThread_release_lock:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_close DD imagerel buffered_close
	DD	imagerel buffered_close+532
	DD	imagerel $unwind$buffered_close
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_close DD 040a01H
	DD	0b340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT ??_C@_0P@HOAMMMAE@buffered_close?$AA@
CONST	SEGMENT
??_C@_0P@HOAMMMAE@buffered_close?$AA@ DB 'buffered_close', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT buffered_close
_TEXT	SEGMENT
val$ = 48
exc$ = 80
self$ = 80
args$ = 88
tb$ = 96
val2$20752 = 104
buffered_close PROC					; COMDAT

; 494  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 495  :     PyObject *res = NULL, *exc = NULL, *val, *tb;

  0000a	33 ff		 xor	 edi, edi
  0000c	48 8b d9	 mov	 rbx, rcx
  0000f	48 89 7c 24 50	 mov	 QWORD PTR exc$[rsp], rdi

; 496  :     int r;
; 497  : 
; 498  :     CHECK_INITIALIZED(self)

  00014	39 79 68	 cmp	 DWORD PTR [rcx+104], edi
  00017	7f 2c		 jg	 SHORT $LN31@buffered_c@4
  00019	39 79 6c	 cmp	 DWORD PTR [rcx+108], edi
  0001c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00023	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  0002a	75 07		 jne	 SHORT $LN41@buffered_c@4
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
$LN41@buffered_c@4:
  00033	e8 00 00 00 00	 call	 PyErr_SetString
$LN43@buffered_c@4:
  00038	33 c0		 xor	 eax, eax

; 548  :     return res;
; 549  : }

  0003a	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  0003f	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00043	5f		 pop	 rdi
  00044	c3		 ret	 0
$LN31@buffered_c@4:

; 499  :     if (!ENTER_BUFFERED(self))

  00045	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  0004c	33 d2		 xor	 edx, edx
  0004e	e8 00 00 00 00	 call	 PyThread_acquire_lock
  00053	85 c0		 test	 eax, eax
  00055	75 0c		 jne	 SHORT $LN39@buffered_c@4
  00057	48 8b cb	 mov	 rcx, rbx
  0005a	e8 00 00 00 00	 call	 _enter_buffered_busy
  0005f	85 c0		 test	 eax, eax

; 500  :         return NULL;

  00061	74 d5		 je	 SHORT $LN43@buffered_c@4
$LN39@buffered_c@4:

; 499  :     if (!ENTER_BUFFERED(self))

  00063	e8 00 00 00 00	 call	 PyThread_get_thread_ident

; 501  : 
; 502  :     r = buffered_closed(self);

  00068	48 8b cb	 mov	 rcx, rbx
  0006b	89 83 c0 00 00
	00		 mov	 DWORD PTR [rbx+192], eax
  00071	e8 00 00 00 00	 call	 buffered_closed

; 503  :     if (r < 0)

  00076	85 c0		 test	 eax, eax
  00078	0f 88 72 01 00
	00		 js	 $end$20716

; 504  :         goto end;
; 505  :     if (r > 0) {

  0007e	7e 14		 jle	 SHORT $LN25@buffered_c@4

; 506  :         res = Py_None;

  00080	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct

; 507  :         Py_INCREF(res);

  00087	48 8b cf	 mov	 rcx, rdi
  0008a	e8 00 00 00 00	 call	 _Py_IncRef

; 508  :         goto end;

  0008f	e9 5c 01 00 00	 jmp	 $end$20716
$LN25@buffered_c@4:

; 509  :     }
; 510  : 
; 511  :     if (self->deallocating) {

  00094	39 7b 78	 cmp	 DWORD PTR [rbx+120], edi
  00097	74 1f		 je	 SHORT $LN21@buffered_c@4

; 512  :         PyObject *r = buffered_dealloc_warn(self, (PyObject *) self);

  00099	48 8b d3	 mov	 rdx, rbx
  0009c	48 8b cb	 mov	 rcx, rbx
  0009f	e8 00 00 00 00	 call	 buffered_dealloc_warn

; 513  :         if (r)

  000a4	48 85 c0	 test	 rax, rax
  000a7	74 0a		 je	 SHORT $LN23@buffered_c@4

; 514  :             Py_DECREF(r);

  000a9	48 8b c8	 mov	 rcx, rax
  000ac	e8 00 00 00 00	 call	 _Py_DecRef

; 515  :         else

  000b1	eb 05		 jmp	 SHORT $LN21@buffered_c@4
$LN23@buffered_c@4:

; 516  :             PyErr_Clear();

  000b3	e8 00 00 00 00	 call	 PyErr_Clear
$LN21@buffered_c@4:

; 517  :     }
; 518  :     /* flush() will most probably re-take the lock, so drop it first */
; 519  :     LEAVE_BUFFERED(self)

  000b8	48 8b 8b b8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+184]
  000bf	89 bb c0 00 00
	00		 mov	 DWORD PTR [rbx+192], edi
  000c5	e8 00 00 00 00	 call	 PyThread_release_lock

; 520  :     res = PyObject_CallMethodObjArgs((PyObject *)self, _PyIO_str_flush, NULL);

  000ca	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_flush
  000d1	45 33 c0	 xor	 r8d, r8d
  000d4	48 8b cb	 mov	 rcx, rbx
  000d7	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs

; 521  :     if (!ENTER_BUFFERED(self))

  000dc	48 8b 8b b8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+184]
  000e3	33 d2		 xor	 edx, edx
  000e5	48 8b f8	 mov	 rdi, rax
  000e8	e8 00 00 00 00	 call	 PyThread_acquire_lock
  000ed	85 c0		 test	 eax, eax
  000ef	75 10		 jne	 SHORT $LN40@buffered_c@4
  000f1	48 8b cb	 mov	 rcx, rbx
  000f4	e8 00 00 00 00	 call	 _enter_buffered_busy
  000f9	85 c0		 test	 eax, eax

; 522  :         return NULL;

  000fb	0f 84 37 ff ff
	ff		 je	 $LN43@buffered_c@4
$LN40@buffered_c@4:

; 521  :     if (!ENTER_BUFFERED(self))

  00101	e8 00 00 00 00	 call	 PyThread_get_thread_ident
  00106	89 83 c0 00 00
	00		 mov	 DWORD PTR [rbx+192], eax

; 523  :     if (res == NULL)

  0010c	48 85 ff	 test	 rdi, rdi
  0010f	75 16		 jne	 SHORT $LN16@buffered_c@4

; 524  :         PyErr_Fetch(&exc, &val, &tb);

  00111	4c 8d 44 24 60	 lea	 r8, QWORD PTR tb$[rsp]
  00116	48 8d 54 24 30	 lea	 rdx, QWORD PTR val$[rsp]
  0011b	48 8d 4c 24 50	 lea	 rcx, QWORD PTR exc$[rsp]
  00120	e8 00 00 00 00	 call	 PyErr_Fetch

; 525  :     else

  00125	eb 08		 jmp	 SHORT $LN15@buffered_c@4
$LN16@buffered_c@4:

; 526  :         Py_DECREF(res);

  00127	48 8b cf	 mov	 rcx, rdi
  0012a	e8 00 00 00 00	 call	 _Py_DecRef
$LN15@buffered_c@4:

; 527  : 
; 528  :     res = PyObject_CallMethodObjArgs(self->raw, _PyIO_str_close, NULL);

  0012f	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_close
  00136	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  0013a	45 33 c0	 xor	 r8d, r8d
  0013d	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs

; 529  : 
; 530  :     if (exc != NULL) {

  00142	48 8b 4c 24 50	 mov	 rcx, QWORD PTR exc$[rsp]
  00147	48 8b f8	 mov	 rdi, rax
  0014a	48 85 c9	 test	 rcx, rcx
  0014d	0f 84 9d 00 00
	00		 je	 $end$20716

; 531  :         if (res != NULL) {

  00153	48 85 c0	 test	 rax, rax
  00156	74 39		 je	 SHORT $LN13@buffered_c@4

; 532  :             Py_CLEAR(res);

  00158	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  0015f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@HOAMMMAE@buffered_close?$AA@
  00166	4c 8b c8	 mov	 r9, rax
  00169	41 b8 14 02 00
	00		 mov	 r8d, 532		; 00000214H
  0016f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00177	e8 00 00 00 00	 call	 _PyParallel_Guard
  0017c	85 c0		 test	 eax, eax
  0017e	75 0a		 jne	 SHORT $LN11@buffered_c@4
  00180	48 8b cf	 mov	 rcx, rdi
  00183	33 ff		 xor	 edi, edi
  00185	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@buffered_c@4:

; 533  :             PyErr_Restore(exc, val, tb);

  0018a	48 8b 54 24 30	 mov	 rdx, QWORD PTR val$[rsp]

; 534  :         }
; 535  :         else {

  0018f	eb 50		 jmp	 SHORT $LN42@buffered_c@4
$LN13@buffered_c@4:

; 536  :             PyObject *val2;
; 537  :             Py_DECREF(exc);

  00191	e8 00 00 00 00	 call	 _Py_DecRef

; 538  :             Py_XDECREF(tb);

  00196	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tb$[rsp]
  0019b	48 85 c9	 test	 rcx, rcx
  0019e	74 05		 je	 SHORT $LN6@buffered_c@4
  001a0	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@buffered_c@4:

; 539  :             PyErr_Fetch(&exc, &val2, &tb);

  001a5	4c 8d 44 24 60	 lea	 r8, QWORD PTR tb$[rsp]
  001aa	48 8d 54 24 68	 lea	 rdx, QWORD PTR val2$20752[rsp]
  001af	48 8d 4c 24 50	 lea	 rcx, QWORD PTR exc$[rsp]
  001b4	e8 00 00 00 00	 call	 PyErr_Fetch

; 540  :             PyErr_NormalizeException(&exc, &val2, &tb);

  001b9	4c 8d 44 24 60	 lea	 r8, QWORD PTR tb$[rsp]
  001be	48 8d 54 24 68	 lea	 rdx, QWORD PTR val2$20752[rsp]
  001c3	48 8d 4c 24 50	 lea	 rcx, QWORD PTR exc$[rsp]
  001c8	e8 00 00 00 00	 call	 PyErr_NormalizeException

; 541  :             PyException_SetContext(val2, val);

  001cd	48 8b 54 24 30	 mov	 rdx, QWORD PTR val$[rsp]
  001d2	48 8b 4c 24 68	 mov	 rcx, QWORD PTR val2$20752[rsp]
  001d7	e8 00 00 00 00	 call	 PyException_SetContext

; 542  :             PyErr_Restore(exc, val2, tb);

  001dc	48 8b 54 24 68	 mov	 rdx, QWORD PTR val2$20752[rsp]
$LN42@buffered_c@4:
  001e1	4c 8b 44 24 60	 mov	 r8, QWORD PTR tb$[rsp]
  001e6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR exc$[rsp]
  001eb	e8 00 00 00 00	 call	 PyErr_Restore
$end$20716:

; 543  :         }
; 544  :     }
; 545  : 
; 546  : end:
; 547  :     LEAVE_BUFFERED(self)

  001f0	48 8b 8b b8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+184]
  001f7	c7 83 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rbx+192], 0
  00201	e8 00 00 00 00	 call	 PyThread_release_lock

; 548  :     return res;
; 549  : }

  00206	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  0020b	48 8b c7	 mov	 rax, rdi
  0020e	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00212	5f		 pop	 rdi
  00213	c3		 ret	 0
buffered_close ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_detach DD imagerel buffered_detach
	DD	imagerel buffered_detach+109
	DD	imagerel $unwind$buffered_detach
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_detach DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT buffered_detach
_TEXT	SEGMENT
self$ = 48
args$ = 56
buffered_detach PROC					; COMDAT

; 555  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 556  :     PyObject *raw, *res;
; 557  :     CHECK_INITIALIZED(self)

  00006	83 79 68 00	 cmp	 DWORD PTR [rcx+104], 0
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	7f 28		 jg	 SHORT $LN4@buffered_d@3
  0000f	83 79 6c 00	 cmp	 DWORD PTR [rcx+108], 0
  00013	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0001a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  00021	75 07		 jne	 SHORT $LN7@buffered_d@3
  00023	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
$LN7@buffered_d@3:
  0002a	e8 00 00 00 00	 call	 PyErr_SetString
$LN8@buffered_d@3:
  0002f	33 c0		 xor	 eax, eax

; 566  :     return raw;
; 567  : }

  00031	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00035	5b		 pop	 rbx
  00036	c3		 ret	 0
$LN4@buffered_d@3:

; 558  :     res = PyObject_CallMethodObjArgs((PyObject *)self, _PyIO_str_flush, NULL);

  00037	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_flush
  0003e	45 33 c0	 xor	 r8d, r8d
  00041	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs

; 559  :     if (res == NULL)

  00046	48 85 c0	 test	 rax, rax

; 560  :         return NULL;

  00049	74 e4		 je	 SHORT $LN8@buffered_d@3

; 561  :     Py_DECREF(res);

  0004b	48 8b c8	 mov	 rcx, rax
  0004e	e8 00 00 00 00	 call	 _Py_DecRef

; 562  :     raw = self->raw;

  00053	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]

; 563  :     self->raw = NULL;

  00057	33 c9		 xor	 ecx, ecx
  00059	48 89 4b 60	 mov	 QWORD PTR [rbx+96], rcx

; 564  :     self->detached = 1;
; 565  :     self->ok = 0;

  0005d	89 4b 68	 mov	 DWORD PTR [rbx+104], ecx
  00060	c7 43 6c 01 00
	00 00		 mov	 DWORD PTR [rbx+108], 1

; 566  :     return raw;
; 567  : }

  00067	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006b	5b		 pop	 rbx
  0006c	c3		 ret	 0
buffered_detach ENDP
_TEXT	ENDS
EXTRN	_PyIO_str_seekable:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_seekable DD imagerel buffered_seekable
	DD	imagerel buffered_seekable+72
	DD	imagerel $unwind$buffered_seekable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_seekable DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT buffered_seekable
_TEXT	SEGMENT
self$ = 48
args$ = 56
buffered_seekable PROC					; COMDAT

; 573  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 574  :     CHECK_INITIALIZED(self)

  00004	83 79 68 00	 cmp	 DWORD PTR [rcx+104], 0
  00008	7f 27		 jg	 SHORT $LN3@buffered_s@3
  0000a	83 79 6c 00	 cmp	 DWORD PTR [rcx+108], 0
  0000e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  0001c	75 07		 jne	 SHORT $LN6@buffered_s@3
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
$LN6@buffered_s@3:
  00025	e8 00 00 00 00	 call	 PyErr_SetString
  0002a	33 c0		 xor	 eax, eax

; 576  : }

  0002c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00030	c3		 ret	 0
$LN3@buffered_s@3:

; 575  :     return PyObject_CallMethodObjArgs(self->raw, _PyIO_str_seekable, NULL);

  00031	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_seekable
  00038	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  0003c	45 33 c0	 xor	 r8d, r8d

; 576  : }

  0003f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00043	e9 00 00 00 00	 jmp	 PyObject_CallMethodObjArgs
buffered_seekable ENDP
_TEXT	ENDS
EXTRN	_PyIO_str_readable:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_readable DD imagerel buffered_readable
	DD	imagerel buffered_readable+72
	DD	imagerel $unwind$buffered_readable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_readable DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT buffered_readable
_TEXT	SEGMENT
self$ = 48
args$ = 56
buffered_readable PROC					; COMDAT

; 580  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 581  :     CHECK_INITIALIZED(self)

  00004	83 79 68 00	 cmp	 DWORD PTR [rcx+104], 0
  00008	7f 27		 jg	 SHORT $LN3@buffered_r
  0000a	83 79 6c 00	 cmp	 DWORD PTR [rcx+108], 0
  0000e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  0001c	75 07		 jne	 SHORT $LN6@buffered_r
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
$LN6@buffered_r:
  00025	e8 00 00 00 00	 call	 PyErr_SetString
  0002a	33 c0		 xor	 eax, eax

; 583  : }

  0002c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00030	c3		 ret	 0
$LN3@buffered_r:

; 582  :     return PyObject_CallMethodObjArgs(self->raw, _PyIO_str_readable, NULL);

  00031	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_readable
  00038	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  0003c	45 33 c0	 xor	 r8d, r8d

; 583  : }

  0003f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00043	e9 00 00 00 00	 jmp	 PyObject_CallMethodObjArgs
buffered_readable ENDP
_TEXT	ENDS
EXTRN	_PyIO_str_writable:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_writable DD imagerel buffered_writable
	DD	imagerel buffered_writable+72
	DD	imagerel $unwind$buffered_writable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_writable DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT buffered_writable
_TEXT	SEGMENT
self$ = 48
args$ = 56
buffered_writable PROC					; COMDAT

; 587  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 588  :     CHECK_INITIALIZED(self)

  00004	83 79 68 00	 cmp	 DWORD PTR [rcx+104], 0
  00008	7f 27		 jg	 SHORT $LN3@buffered_w
  0000a	83 79 6c 00	 cmp	 DWORD PTR [rcx+108], 0
  0000e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  0001c	75 07		 jne	 SHORT $LN6@buffered_w
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
$LN6@buffered_w:
  00025	e8 00 00 00 00	 call	 PyErr_SetString
  0002a	33 c0		 xor	 eax, eax

; 590  : }

  0002c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00030	c3		 ret	 0
$LN3@buffered_w:

; 589  :     return PyObject_CallMethodObjArgs(self->raw, _PyIO_str_writable, NULL);

  00031	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_writable
  00038	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  0003c	45 33 c0	 xor	 r8d, r8d

; 590  : }

  0003f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00043	e9 00 00 00 00	 jmp	 PyObject_CallMethodObjArgs
buffered_writable ENDP
_TEXT	ENDS
EXTRN	_PyObject_GetAttrId:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_name_get DD imagerel buffered_name_get
	DD	imagerel buffered_name_get+89
	DD	imagerel $unwind$buffered_name_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_name_get DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT buffered_name_get
_TEXT	SEGMENT
self$ = 48
context$ = 56
buffered_name_get PROC					; COMDAT

; 594  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 595  :     CHECK_INITIALIZED(self)

  00004	83 79 68 00	 cmp	 DWORD PTR [rcx+104], 0
  00008	4c 8b c1	 mov	 r8, rcx
  0000b	7f 27		 jg	 SHORT $LN3@buffered_n
  0000d	83 79 6c 00	 cmp	 DWORD PTR [rcx+108], 0
  00011	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00018	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  0001f	75 07		 jne	 SHORT $LN6@buffered_n
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
$LN6@buffered_n:
  00028	e8 00 00 00 00	 call	 PyErr_SetString
  0002d	33 c0		 xor	 eax, eax

; 597  : }

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
$LN3@buffered_n:

; 596  :     return _PyObject_GetAttrId(self->raw, &PyId_name);

  00034	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0003a	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00043	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_name
  00048	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  0004c	49 8b 48 60	 mov	 rcx, QWORD PTR [r8+96]

; 597  : }

  00050	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00054	e9 00 00 00 00	 jmp	 _PyObject_GetAttrId
buffered_name_get ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_mode_get DD imagerel buffered_mode_get
	DD	imagerel buffered_mode_get+89
	DD	imagerel $unwind$buffered_mode_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_mode_get DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT buffered_mode_get
_TEXT	SEGMENT
self$ = 48
context$ = 56
buffered_mode_get PROC					; COMDAT

; 601  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 602  :     CHECK_INITIALIZED(self)

  00004	83 79 68 00	 cmp	 DWORD PTR [rcx+104], 0
  00008	4c 8b c1	 mov	 r8, rcx
  0000b	7f 27		 jg	 SHORT $LN3@buffered_m
  0000d	83 79 6c 00	 cmp	 DWORD PTR [rcx+108], 0
  00011	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00018	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  0001f	75 07		 jne	 SHORT $LN6@buffered_m
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
$LN6@buffered_m:
  00028	e8 00 00 00 00	 call	 PyErr_SetString
  0002d	33 c0		 xor	 eax, eax

; 604  : }

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
$LN3@buffered_m:

; 603  :     return _PyObject_GetAttrId(self->raw, &PyId_mode);

  00034	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0003a	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00043	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_mode
  00048	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  0004c	49 8b 48 60	 mov	 rcx, QWORD PTR [r8+96]

; 604  : }

  00050	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00054	e9 00 00 00 00	 jmp	 _PyObject_GetAttrId
buffered_mode_get ENDP
_TEXT	ENDS
EXTRN	_PyIO_str_fileno:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_fileno DD imagerel buffered_fileno
	DD	imagerel buffered_fileno+72
	DD	imagerel $unwind$buffered_fileno
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_fileno DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT buffered_fileno
_TEXT	SEGMENT
self$ = 48
args$ = 56
buffered_fileno PROC					; COMDAT

; 610  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 611  :     CHECK_INITIALIZED(self)

  00004	83 79 68 00	 cmp	 DWORD PTR [rcx+104], 0
  00008	7f 27		 jg	 SHORT $LN3@buffered_f
  0000a	83 79 6c 00	 cmp	 DWORD PTR [rcx+108], 0
  0000e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  0001c	75 07		 jne	 SHORT $LN6@buffered_f
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
$LN6@buffered_f:
  00025	e8 00 00 00 00	 call	 PyErr_SetString
  0002a	33 c0		 xor	 eax, eax

; 613  : }

  0002c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00030	c3		 ret	 0
$LN3@buffered_f:

; 612  :     return PyObject_CallMethodObjArgs(self->raw, _PyIO_str_fileno, NULL);

  00031	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_fileno
  00038	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  0003c	45 33 c0	 xor	 r8d, r8d

; 613  : }

  0003f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00043	e9 00 00 00 00	 jmp	 PyObject_CallMethodObjArgs
buffered_fileno ENDP
_TEXT	ENDS
EXTRN	_PyIO_str_isatty:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_isatty DD imagerel buffered_isatty
	DD	imagerel buffered_isatty+72
	DD	imagerel $unwind$buffered_isatty
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_isatty DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT buffered_isatty
_TEXT	SEGMENT
self$ = 48
args$ = 56
buffered_isatty PROC					; COMDAT

; 617  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 618  :     CHECK_INITIALIZED(self)

  00004	83 79 68 00	 cmp	 DWORD PTR [rcx+104], 0
  00008	7f 27		 jg	 SHORT $LN3@buffered_i
  0000a	83 79 6c 00	 cmp	 DWORD PTR [rcx+108], 0
  0000e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  0001c	75 07		 jne	 SHORT $LN6@buffered_i
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
$LN6@buffered_i:
  00025	e8 00 00 00 00	 call	 PyErr_SetString
  0002a	33 c0		 xor	 eax, eax

; 620  : }

  0002c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00030	c3		 ret	 0
$LN3@buffered_i:

; 619  :     return PyObject_CallMethodObjArgs(self->raw, _PyIO_str_isatty, NULL);

  00031	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_isatty
  00038	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  0003c	45 33 c0	 xor	 r8d, r8d

; 620  : }

  0003f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00043	e9 00 00 00 00	 jmp	 PyObject_CallMethodObjArgs
buffered_isatty ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@OMCOKFBI@cannot?5serialize?5?8?$CFs?8?5object?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_getstate DD imagerel buffered_getstate
	DD	imagerel buffered_getstate+38
	DD	imagerel $unwind$buffered_getstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_getstate DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BN@OMCOKFBI@cannot?5serialize?5?8?$CFs?8?5object?$AA@
CONST	SEGMENT
??_C@_0BN@OMCOKFBI@cannot?5serialize?5?8?$CFs?8?5object?$AA@ DB 'cannot s'
	DB	'erialize ''%s'' object', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT buffered_getstate
_TEXT	SEGMENT
self$ = 48
args$ = 56
buffered_getstate PROC					; COMDAT

; 626  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 627  :     PyErr_Format(PyExc_TypeError,
; 628  :                  "cannot serialize '%s' object", Py_TYPE(self)->tp_name);

  00004	4c 8b 41 58	 mov	 r8, QWORD PTR [rcx+88]
  00008	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0000f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@OMCOKFBI@cannot?5serialize?5?8?$CFs?8?5object?$AA@
  00016	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  0001a	e8 00 00 00 00	 call	 PyErr_Format

; 629  :     return NULL;

  0001f	33 c0		 xor	 eax, eax

; 630  : }

  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	c3		 ret	 0
buffered_getstate ENDP
_TEXT	ENDS
PUBLIC	??_C@_03DFFMAIEK@isn?$AA@			; `string'
EXTRN	PyErr_SetObject:PROC
EXTRN	_PyObject_CallFunction_SizeT:PROC
EXTRN	PyExc_BlockingIOError:QWORD
EXTRN	__imp__errno:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_set_BlockingIOError DD imagerel _set_BlockingIOError
	DD	imagerel _set_BlockingIOError+208
	DD	imagerel $unwind$_set_BlockingIOError
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_set_BlockingIOError DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_03DFFMAIEK@isn?$AA@
CONST	SEGMENT
??_C@_03DFFMAIEK@isn?$AA@ DB 'isn', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\bufferedio.c
CONST	ENDS
;	COMDAT _set_BlockingIOError
_TEXT	SEGMENT
msg$ = 64
written$ = 72
_set_BlockingIOError PROC				; COMDAT

; 659  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	48 8b f9	 mov	 rdi, rcx

; 660  :     PyObject *err;
; 661  :     err = PyObject_CallFunction(PyExc_BlockingIOError, "isn",
; 662  :                                 errno, msg, written);

  00010	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00016	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_BlockingIOError
  0001d	44 8b 00	 mov	 r8d, DWORD PTR [rax]
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03DFFMAIEK@isn?$AA@
  00027	4c 8b cf	 mov	 r9, rdi
  0002a	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  0002f	e8 00 00 00 00	 call	 _PyObject_CallFunction_SizeT
  00034	48 8b d8	 mov	 rbx, rax

; 663  :     if (err)

  00037	48 85 c0	 test	 rax, rax
  0003a	0f 84 85 00 00
	00		 je	 $LN3@set_Blocki

; 664  :         PyErr_SetObject(PyExc_BlockingIOError, err);

  00040	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_BlockingIOError
  00047	48 8b d0	 mov	 rdx, rax
  0004a	e8 00 00 00 00	 call	 PyErr_SetObject

; 665  :     Py_XDECREF(err);

  0004f	e8 00 00 00 00	 call	 _Py_PXCTX
  00054	85 c0		 test	 eax, eax
  00056	75 6d		 jne	 SHORT $LN3@set_Blocki
  00058	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0005c	a8 20		 test	 al, 32			; 00000020H
  0005e	75 5d		 jne	 SHORT $LN12@set_Blocki
  00060	84 c0		 test	 al, al
  00062	78 59		 js	 SHORT $LN12@set_Blocki
  00064	a8 02		 test	 al, 2
  00066	75 5d		 jne	 SHORT $LN3@set_Blocki
  00068	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0006c	75 57		 jne	 SHORT $LN3@set_Blocki
  0006e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00075	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0007c	4c 8b cb	 mov	 r9, rbx
  0007f	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00085	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0008d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00092	48 8b cb	 mov	 rcx, rbx
  00095	85 c0		 test	 eax, eax
  00097	74 0f		 je	 SHORT $LN17@set_Blocki

; 666  : }

  00099	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0009e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a2	5f		 pop	 rdi
  000a3	e9 00 00 00 00	 jmp	 _Px_Dealloc

; 665  :     Py_XDECREF(err);

$LN17@set_Blocki:
  000a8	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 666  : }

  000ac	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000b1	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b5	5f		 pop	 rdi
  000b6	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]

; 665  :     Py_XDECREF(err);

$LN12@set_Blocki:
  000bd	48 8b cb	 mov	 rcx, rbx
  000c0	e8 00 00 00 00	 call	 Px_DecRef
$LN3@set_Blocki:

; 666  : }

  000c5	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000ca	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ce	5f		 pop	 rdi
  000cf	c3		 ret	 0
_set_BlockingIOError ENDP
_TEXT	ENDS
EXTRN	PyErr_GivenExceptionMatches:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_buffered_check_blocking_error DD imagerel _buffered_check_blocking_error
	DD	imagerel _buffered_check_blocking_error+63
	DD	imagerel $unwind$_buffered_check_blocking_error
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_buffered_check_blocking_error DD imagerel _buffered_check_blocking_error+63
	DD	imagerel _buffered_check_blocking_error+98
	DD	imagerel $chain$0$_buffered_check_blocking_error
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_buffered_check_blocking_error DD imagerel _buffered_check_blocking_error+98
	DD	imagerel _buffered_check_blocking_error+128
	DD	imagerel $chain$1$_buffered_check_blocking_error
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_buffered_check_blocking_error DD 021H
	DD	imagerel _buffered_check_blocking_error
	DD	imagerel _buffered_check_blocking_error+63
	DD	imagerel $unwind$_buffered_check_blocking_error
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_buffered_check_blocking_error DD 020521H
	DD	043405H
	DD	imagerel _buffered_check_blocking_error
	DD	imagerel _buffered_check_blocking_error+63
	DD	imagerel $unwind$_buffered_check_blocking_error
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_buffered_check_blocking_error DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _buffered_check_blocking_error
_TEXT	SEGMENT
v$ = 48
tb$ = 56
t$ = 64
_buffered_check_blocking_error PROC			; COMDAT

; 672  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 673  :     PyObject *t, *v, *tb;
; 674  :     PyOSErrorObject *err;
; 675  : 
; 676  :     PyErr_Fetch(&t, &v, &tb);

  00004	4c 8d 44 24 38	 lea	 r8, QWORD PTR tb$[rsp]
  00009	48 8d 54 24 30	 lea	 rdx, QWORD PTR v$[rsp]
  0000e	48 8d 4c 24 40	 lea	 rcx, QWORD PTR t$[rsp]
  00013	e8 00 00 00 00	 call	 PyErr_Fetch

; 677  :     if (v == NULL || !PyErr_GivenExceptionMatches(v, PyExc_BlockingIOError)) {

  00018	4c 8b 5c 24 30	 mov	 r11, QWORD PTR v$[rsp]
  0001d	4d 85 db	 test	 r11, r11
  00020	74 45		 je	 SHORT $LN1@buffered_c@5
  00022	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_BlockingIOError
  00029	49 8b cb	 mov	 rcx, r11
  0002c	e8 00 00 00 00	 call	 PyErr_GivenExceptionMatches
  00031	85 c0		 test	 eax, eax
  00033	74 2d		 je	 SHORT $LN5@buffered_c@5

; 680  :     }
; 681  :     err = (PyOSErrorObject *) v;
; 682  :     /* TODO: sanity check (err->written >= 0) */
; 683  :     PyErr_Restore(t, v, tb);

  00035	4c 8b 44 24 38	 mov	 r8, QWORD PTR tb$[rsp]
  0003a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR t$[rsp]
  0003f	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00044	48 8b 5c 24 30	 mov	 rbx, QWORD PTR v$[rsp]
  00049	48 8b d3	 mov	 rdx, rbx
  0004c	e8 00 00 00 00	 call	 PyErr_Restore

; 684  :     return &err->written;

  00051	48 8d 83 b0 00
	00 00		 lea	 rax, QWORD PTR [rbx+176]
  00058	48 8b 5c 24 20	 mov	 rbx, QWORD PTR [rsp+32]

; 685  : }

  0005d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00061	c3		 ret	 0
$LN5@buffered_c@5:

; 684  :     return &err->written;

  00062	4c 8b 5c 24 30	 mov	 r11, QWORD PTR v$[rsp]
$LN1@buffered_c@5:

; 678  :         PyErr_Restore(t, v, tb);

  00067	4c 8b 44 24 38	 mov	 r8, QWORD PTR tb$[rsp]
  0006c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR t$[rsp]
  00071	49 8b d3	 mov	 rdx, r11
  00074	e8 00 00 00 00	 call	 PyErr_Restore

; 679  :         return NULL;

  00079	33 c0		 xor	 eax, eax

; 685  : }

  0007b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0007f	c3		 ret	 0
_buffered_check_blocking_error ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@EGGHLFCO@Raw?5stream?5returned?5invalid?5posi@ ; `string'
EXTRN	PyExc_IOError:QWORD
EXTRN	PyErr_Occurred:PROC
EXTRN	PyNumber_AsOff_t:PROC
EXTRN	_PyIO_str_tell:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$_buffered_raw_tell DD imagerel _buffered_raw_tell
	DD	imagerel _buffered_raw_tell+65
	DD	imagerel $unwind$_buffered_raw_tell
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_buffered_raw_tell DD imagerel _buffered_raw_tell+65
	DD	imagerel _buffered_raw_tell+143
	DD	imagerel $chain$0$_buffered_raw_tell
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_buffered_raw_tell DD imagerel _buffered_raw_tell+143
	DD	imagerel _buffered_raw_tell+169
	DD	imagerel $chain$2$_buffered_raw_tell
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_buffered_raw_tell DD 020021H
	DD	063400H
	DD	imagerel _buffered_raw_tell
	DD	imagerel _buffered_raw_tell+65
	DD	imagerel $unwind$_buffered_raw_tell
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_buffered_raw_tell DD 020521H
	DD	063405H
	DD	imagerel _buffered_raw_tell
	DD	imagerel _buffered_raw_tell+65
	DD	imagerel $unwind$_buffered_raw_tell
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_buffered_raw_tell DD 040a01H
	DD	07640aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CK@EGGHLFCO@Raw?5stream?5returned?5invalid?5posi@
CONST	SEGMENT
??_C@_0CK@EGGHLFCO@Raw?5stream?5returned?5invalid?5posi@ DB 'Raw stream r'
	DB	'eturned invalid position %lld', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _buffered_raw_tell
_TEXT	SEGMENT
self$ = 48
_buffered_raw_tell PROC					; COMDAT

; 689  : {

  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 690  :     Py_off_t n;
; 691  :     PyObject *res;
; 692  :     res = PyObject_CallMethodObjArgs(self->raw, _PyIO_str_tell, NULL);

  0000a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_tell
  00011	48 8b f9	 mov	 rdi, rcx
  00014	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00018	45 33 c0	 xor	 r8d, r8d
  0001b	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  00020	48 8b f0	 mov	 rsi, rax

; 693  :     if (res == NULL)

  00023	48 85 c0	 test	 rax, rax
  00026	75 0f		 jne	 SHORT $LN3@buffered_r@2

; 694  :         return -1;

  00028	48 83 c8 ff	 or	 rax, -1

; 703  :     }
; 704  :     self->abs_pos = n;
; 705  :     return n;
; 706  : }

  0002c	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00031	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00035	5f		 pop	 rdi
  00036	c3		 ret	 0
$LN3@buffered_r@2:

; 695  :     n = PyNumber_AsOff_t(res, PyExc_ValueError);

  00037	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_ValueError
  0003e	48 8b c8	 mov	 rcx, rax
  00041	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00046	e8 00 00 00 00	 call	 PyNumber_AsOff_t

; 696  :     Py_DECREF(res);

  0004b	48 8b ce	 mov	 rcx, rsi
  0004e	48 8b d8	 mov	 rbx, rax
  00051	e8 00 00 00 00	 call	 _Py_DecRef

; 697  :     if (n < 0) {

  00056	48 85 db	 test	 rbx, rbx
  00059	79 34		 jns	 SHORT $LN2@buffered_r@2

; 698  :         if (!PyErr_Occurred())

  0005b	e8 00 00 00 00	 call	 PyErr_Occurred
  00060	48 85 c0	 test	 rax, rax
  00063	75 16		 jne	 SHORT $LN1@buffered_r@2

; 699  :             PyErr_Format(PyExc_IOError,
; 700  :                          "Raw stream returned invalid position %" PY_PRIdOFF,
; 701  :                          (PY_OFF_T_COMPAT)n);

  00065	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  0006c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@EGGHLFCO@Raw?5stream?5returned?5invalid?5posi@
  00073	4c 8b c3	 mov	 r8, rbx
  00076	e8 00 00 00 00	 call	 PyErr_Format
$LN1@buffered_r@2:

; 702  :         return -1;

  0007b	48 83 c8 ff	 or	 rax, -1
  0007f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 703  :     }
; 704  :     self->abs_pos = n;
; 705  :     return n;
; 706  : }

  00084	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00089	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008d	5f		 pop	 rdi
  0008e	c3		 ret	 0
$LN2@buffered_r@2:
  0008f	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00094	48 89 9f 80 00
	00 00		 mov	 QWORD PTR [rdi+128], rbx
  0009b	48 8b c3	 mov	 rax, rbx
  0009e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a7	5f		 pop	 rdi
  000a8	c3		 ret	 0
_buffered_raw_tell ENDP
_TEXT	ENDS
EXTRN	_PyIO_str_seek:QWORD
EXTRN	PyLong_FromLong:PROC
EXTRN	PyLong_FromLongLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_buffered_raw_seek DD imagerel _buffered_raw_seek
	DD	imagerel _buffered_raw_seek+240
	DD	imagerel $unwind$_buffered_raw_seek
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_buffered_raw_seek DD 086601H
	DD	085466H
	DD	0a640fH
	DD	09340fH
	DD	0700b520fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _buffered_raw_seek
_TEXT	SEGMENT
self$ = 64
target$ = 72
whence$ = 80
_buffered_raw_seek PROC					; COMDAT

; 710  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b f1	 mov	 rsi, rcx

; 711  :     PyObject *res, *posobj, *whenceobj;
; 712  :     Py_off_t n;
; 713  : 
; 714  :     posobj = PyLong_FromOff_t(target);

  00012	48 8b ca	 mov	 rcx, rdx
  00015	41 8b f8	 mov	 edi, r8d
  00018	e8 00 00 00 00	 call	 PyLong_FromLongLong
  0001d	48 8b d8	 mov	 rbx, rax

; 715  :     if (posobj == NULL)

  00020	48 85 c0	 test	 rax, rax

; 716  :         return -1;

  00023	74 17		 je	 SHORT $LN9@buffered_r@3

; 717  :     whenceobj = PyLong_FromLong(whence);

  00025	8b cf		 mov	 ecx, edi
  00027	e8 00 00 00 00	 call	 PyLong_FromLong
  0002c	48 8b f8	 mov	 rdi, rax

; 718  :     if (whenceobj == NULL) {

  0002f	48 85 c0	 test	 rax, rax
  00032	75 1c		 jne	 SHORT $LN4@buffered_r@3

; 719  :         Py_DECREF(posobj);

  00034	48 8b cb	 mov	 rcx, rbx
  00037	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@buffered_r@3:

; 720  :         return -1;

  0003c	48 83 c8 ff	 or	 rax, -1

; 739  : }

  00040	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00045	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  0004a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0004e	5f		 pop	 rdi
  0004f	c3		 ret	 0
$LN4@buffered_r@3:

; 721  :     }
; 722  :     res = PyObject_CallMethodObjArgs(self->raw, _PyIO_str_seek,
; 723  :                                      posobj, whenceobj, NULL);

  00050	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_seek
  00057	48 8b 4e 60	 mov	 rcx, QWORD PTR [rsi+96]
  0005b	4c 8b c8	 mov	 r9, rax
  0005e	4c 8b c3	 mov	 r8, rbx
  00061	48 89 6c 24 40	 mov	 QWORD PTR [rsp+64], rbp
  00066	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0006f	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs

; 724  :     Py_DECREF(posobj);

  00074	48 8b cb	 mov	 rcx, rbx
  00077	48 8b e8	 mov	 rbp, rax
  0007a	e8 00 00 00 00	 call	 _Py_DecRef

; 725  :     Py_DECREF(whenceobj);

  0007f	48 8b cf	 mov	 rcx, rdi
  00082	e8 00 00 00 00	 call	 _Py_DecRef

; 726  :     if (res == NULL)

  00087	48 85 ed	 test	 rbp, rbp

; 727  :         return -1;

  0008a	74 3f		 je	 SHORT $LN1@buffered_r@3

; 728  :     n = PyNumber_AsOff_t(res, PyExc_ValueError);

  0008c	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_ValueError
  00093	48 8b cd	 mov	 rcx, rbp
  00096	e8 00 00 00 00	 call	 PyNumber_AsOff_t

; 729  :     Py_DECREF(res);

  0009b	48 8b cd	 mov	 rcx, rbp
  0009e	48 8b d8	 mov	 rbx, rax
  000a1	e8 00 00 00 00	 call	 _Py_DecRef

; 730  :     if (n < 0) {

  000a6	48 85 db	 test	 rbx, rbx
  000a9	79 26		 jns	 SHORT $LN2@buffered_r@3

; 731  :         if (!PyErr_Occurred())

  000ab	e8 00 00 00 00	 call	 PyErr_Occurred
  000b0	48 85 c0	 test	 rax, rax
  000b3	75 16		 jne	 SHORT $LN1@buffered_r@3

; 732  :             PyErr_Format(PyExc_IOError,
; 733  :                          "Raw stream returned invalid position %" PY_PRIdOFF,
; 734  :                          (PY_OFF_T_COMPAT)n);

  000b5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  000bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@EGGHLFCO@Raw?5stream?5returned?5invalid?5posi@
  000c3	4c 8b c3	 mov	 r8, rbx
  000c6	e8 00 00 00 00	 call	 PyErr_Format
$LN1@buffered_r@3:

; 735  :         return -1;

  000cb	48 83 c8 ff	 or	 rax, -1
  000cf	eb 0a		 jmp	 SHORT $LN8@buffered_r@3
$LN2@buffered_r@3:

; 736  :     }
; 737  :     self->abs_pos = n;

  000d1	48 89 9e 80 00
	00 00		 mov	 QWORD PTR [rsi+128], rbx

; 738  :     return n;

  000d8	48 8b c3	 mov	 rax, rbx
$LN8@buffered_r@3:

; 739  : }

  000db	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  000e0	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000e5	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  000ea	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ee	5f		 pop	 rdi
  000ef	c3		 ret	 0
_buffered_raw_seek ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@DNNLAOIP@can?8t?5allocate?5read?5lock?$AA@ ; `string'
PUBLIC	??_C@_0CG@CPDFKOKL@buffer?5size?5must?5be?5strictly?5pos@ ; `string'
EXTRN	PyThread_allocate_lock:PROC
EXTRN	PyErr_NoMemory:PROC
EXTRN	PyMem_Malloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_buffered_init DD imagerel _buffered_init
	DD	imagerel _buffered_init+240
	DD	imagerel $unwind$_buffered_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_buffered_init DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0BJ@DNNLAOIP@can?8t?5allocate?5read?5lock?$AA@
CONST	SEGMENT
??_C@_0BJ@DNNLAOIP@can?8t?5allocate?5read?5lock?$AA@ DB 'can''t allocate '
	DB	'read lock', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@CPDFKOKL@buffer?5size?5must?5be?5strictly?5pos@
CONST	SEGMENT
??_C@_0CG@CPDFKOKL@buffer?5size?5must?5be?5strictly?5pos@ DB 'buffer size'
	DB	' must be strictly positive', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _buffered_init
_TEXT	SEGMENT
self$ = 48
_buffered_init PROC					; COMDAT

; 743  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 744  :     Py_ssize_t n;
; 745  :     if (self->buffer_size <= 0) {

  00006	48 83 b9 c8 00
	00 00 00	 cmp	 QWORD PTR [rcx+200], 0
  0000e	48 8b d9	 mov	 rbx, rcx
  00011	7f 1c		 jg	 SHORT $LN11@buffered_i@2

; 746  :         PyErr_SetString(PyExc_ValueError,
; 747  :             "buffer size must be strictly positive");

  00013	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0001a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@CPDFKOKL@buffer?5size?5must?5be?5strictly?5pos@
  00021	e8 00 00 00 00	 call	 PyErr_SetString

; 748  :         return -1;

  00026	83 c8 ff	 or	 eax, -1

; 778  : }

  00029	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002d	5b		 pop	 rbx
  0002e	c3		 ret	 0
$LN11@buffered_i@2:

; 749  :     }
; 750  :     if (self->buffer)

  0002f	48 8b 89 88 00
	00 00		 mov	 rcx, QWORD PTR [rcx+136]
  00036	48 85 c9	 test	 rcx, rcx
  00039	74 05		 je	 SHORT $LN10@buffered_i@2

; 751  :         PyMem_Free(self->buffer);

  0003b	e8 00 00 00 00	 call	 PyMem_Free
$LN10@buffered_i@2:

; 752  :     self->buffer = PyMem_Malloc(self->buffer_size);

  00040	48 8b 8b c8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+200]
  00047	e8 00 00 00 00	 call	 PyMem_Malloc
  0004c	48 89 83 88 00
	00 00		 mov	 QWORD PTR [rbx+136], rax

; 753  :     if (self->buffer == NULL) {

  00053	48 85 c0	 test	 rax, rax
  00056	75 0e		 jne	 SHORT $LN9@buffered_i@2

; 754  :         PyErr_NoMemory();

  00058	e8 00 00 00 00	 call	 PyErr_NoMemory

; 755  :         return -1;

  0005d	83 c8 ff	 or	 eax, -1

; 778  : }

  00060	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00064	5b		 pop	 rbx
  00065	c3		 ret	 0
$LN9@buffered_i@2:

; 756  :     }
; 757  : #ifdef WITH_THREAD
; 758  :     if (self->lock)

  00066	48 8b 8b b8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+184]
  0006d	48 85 c9	 test	 rcx, rcx
  00070	74 05		 je	 SHORT $LN8@buffered_i@2

; 759  :         PyThread_free_lock(self->lock);

  00072	e8 00 00 00 00	 call	 PyThread_free_lock
$LN8@buffered_i@2:

; 760  :     self->lock = PyThread_allocate_lock();

  00077	e8 00 00 00 00	 call	 PyThread_allocate_lock
  0007c	48 89 83 b8 00
	00 00		 mov	 QWORD PTR [rbx+184], rax

; 761  :     if (self->lock == NULL) {

  00083	48 85 c0	 test	 rax, rax
  00086	75 1c		 jne	 SHORT $LN7@buffered_i@2

; 762  :         PyErr_SetString(PyExc_RuntimeError, "can't allocate read lock");

  00088	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  0008f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@DNNLAOIP@can?8t?5allocate?5read?5lock?$AA@
  00096	e8 00 00 00 00	 call	 PyErr_SetString

; 763  :         return -1;

  0009b	83 c8 ff	 or	 eax, -1

; 778  : }

  0009e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a2	5b		 pop	 rbx
  000a3	c3		 ret	 0
$LN7@buffered_i@2:

; 764  :     }
; 765  :     self->owner = 0;
; 766  : #endif
; 767  :     /* Find out whether buffer_size is a power of 2 */
; 768  :     /* XXX is this optimization useful? */
; 769  :     for (n = self->buffer_size - 1; n & 1; n >>= 1)

  000a4	48 8b 93 c8 00
	00 00		 mov	 rdx, QWORD PTR [rbx+200]
  000ab	33 c9		 xor	 ecx, ecx
  000ad	48 ff ca	 dec	 rdx
  000b0	89 8b c0 00 00
	00		 mov	 DWORD PTR [rbx+192], ecx
  000b6	48 8b c2	 mov	 rax, rdx
  000b9	f6 c2 01	 test	 dl, 1
  000bc	74 09		 je	 SHORT $LN4@buffered_i@2
  000be	66 90		 npad	 2
$LL6@buffered_i@2:
  000c0	48 d1 f8	 sar	 rax, 1
  000c3	a8 01		 test	 al, 1
  000c5	75 f9		 jne	 SHORT $LL6@buffered_i@2
$LN4@buffered_i@2:

; 770  :         ;
; 771  :     if (n == 0)

  000c7	48 85 c0	 test	 rax, rax
  000ca	48 0f 44 ca	 cmove	 rcx, rdx
  000ce	48 89 8b d0 00
	00 00		 mov	 QWORD PTR [rbx+208], rcx

; 772  :         self->buffer_mask = self->buffer_size - 1;
; 773  :     else
; 774  :         self->buffer_mask = 0;
; 775  :     if (_buffered_raw_tell(self) == -1)

  000d5	48 8b cb	 mov	 rcx, rbx
  000d8	e8 00 00 00 00	 call	 _buffered_raw_tell
  000dd	48 83 f8 ff	 cmp	 rax, -1
  000e1	75 05		 jne	 SHORT $LN1@buffered_i@2

; 776  :         PyErr_Clear();

  000e3	e8 00 00 00 00	 call	 PyErr_Clear
$LN1@buffered_i@2:

; 777  :     return 0;

  000e8	33 c0		 xor	 eax, eax

; 778  : }

  000ea	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ee	5b		 pop	 rbx
  000ef	c3		 ret	 0
_buffered_init ENDP
_TEXT	ENDS
PUBLIC	_PyIO_trap_eintr
EXTRN	PyObject_RichCompareBool:PROC
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_EnvironmentError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyIO_trap_eintr DD imagerel $LN12
	DD	imagerel $LN12+202
	DD	imagerel $unwind$_PyIO_trap_eintr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyIO_trap_eintr DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyIO_trap_eintr
_TEXT	SEGMENT
val$ = 48
tb$ = 56
typ$ = 64
_PyIO_trap_eintr PROC					; COMDAT

; 786  : {

$LN12:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 787  :     static PyObject *eintr_int = NULL;
; 788  :     PyObject *typ, *val, *tb;
; 789  :     PyEnvironmentErrorObject *env_err;
; 790  : 
; 791  :     if (eintr_int == NULL) {

  00004	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?eintr_int@?1??_PyIO_trap_eintr@@9@9, 0
  0000c	75 11		 jne	 SHORT $LN7@PyIO_trap_

; 792  :         eintr_int = PyLong_FromLong(EINTR);

  0000e	b9 04 00 00 00	 mov	 ecx, 4
  00013	e8 00 00 00 00	 call	 PyLong_FromLong
  00018	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?eintr_int@?1??_PyIO_trap_eintr@@9@9, rax
$LN7@PyIO_trap_:

; 793  :         assert(eintr_int != NULL);
; 794  :     }
; 795  :     if (!PyErr_ExceptionMatches(PyExc_EnvironmentError))

  0001f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_EnvironmentError
  00026	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  0002b	85 c0		 test	 eax, eax

; 796  :         return 0;

  0002d	0f 84 90 00 00
	00		 je	 $LN11@PyIO_trap_

; 797  :     PyErr_Fetch(&typ, &val, &tb);

  00033	4c 8d 44 24 38	 lea	 r8, QWORD PTR tb$[rsp]
  00038	48 8d 54 24 30	 lea	 rdx, QWORD PTR val$[rsp]
  0003d	48 8d 4c 24 40	 lea	 rcx, QWORD PTR typ$[rsp]
  00042	e8 00 00 00 00	 call	 PyErr_Fetch

; 798  :     PyErr_NormalizeException(&typ, &val, &tb);

  00047	4c 8d 44 24 38	 lea	 r8, QWORD PTR tb$[rsp]
  0004c	48 8d 54 24 30	 lea	 rdx, QWORD PTR val$[rsp]
  00051	48 8d 4c 24 40	 lea	 rcx, QWORD PTR typ$[rsp]
  00056	e8 00 00 00 00	 call	 PyErr_NormalizeException

; 799  :     env_err = (PyEnvironmentErrorObject *) val;
; 800  :     assert(env_err != NULL);
; 801  :     if (env_err->myerrno != NULL &&
; 802  :         PyObject_RichCompareBool(env_err->myerrno, eintr_int, Py_EQ) > 0) {

  0005b	48 8b 54 24 30	 mov	 rdx, QWORD PTR val$[rsp]
  00060	48 8b 8a 90 00
	00 00		 mov	 rcx, QWORD PTR [rdx+144]
  00067	48 85 c9	 test	 rcx, rcx
  0006a	74 48		 je	 SHORT $LN5@PyIO_trap_
  0006c	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?eintr_int@?1??_PyIO_trap_eintr@@9@9
  00073	41 b8 02 00 00
	00		 mov	 r8d, 2
  00079	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  0007e	85 c0		 test	 eax, eax
  00080	7e 2d		 jle	 SHORT $LN10@PyIO_trap_

; 803  :         Py_DECREF(typ);

  00082	48 8b 4c 24 40	 mov	 rcx, QWORD PTR typ$[rsp]
  00087	e8 00 00 00 00	 call	 _Py_DecRef

; 804  :         Py_DECREF(val);

  0008c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR val$[rsp]
  00091	e8 00 00 00 00	 call	 _Py_DecRef

; 805  :         Py_XDECREF(tb);

  00096	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tb$[rsp]
  0009b	48 85 c9	 test	 rcx, rcx
  0009e	74 05		 je	 SHORT $LN3@PyIO_trap_
  000a0	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@PyIO_trap_:

; 806  :         return 1;

  000a5	b8 01 00 00 00	 mov	 eax, 1

; 811  : }

  000aa	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000ae	c3		 ret	 0
$LN10@PyIO_trap_:

; 806  :         return 1;

  000af	48 8b 54 24 30	 mov	 rdx, QWORD PTR val$[rsp]
$LN5@PyIO_trap_:

; 807  :     }
; 808  :     /* This silences any error set by PyObject_RichCompareBool() */
; 809  :     PyErr_Restore(typ, val, tb);

  000b4	4c 8b 44 24 38	 mov	 r8, QWORD PTR tb$[rsp]
  000b9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR typ$[rsp]
  000be	e8 00 00 00 00	 call	 PyErr_Restore
$LN11@PyIO_trap_:

; 810  :     return 0;

  000c3	33 c0		 xor	 eax, eax

; 811  : }

  000c5	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000c9	c3		 ret	 0
_PyIO_trap_eintr ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_tell DD imagerel buffered_tell
	DD	imagerel buffered_tell+148
	DD	imagerel $unwind$buffered_tell
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_tell DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT buffered_tell
_TEXT	SEGMENT
self$ = 48
args$ = 56
buffered_tell PROC					; COMDAT

; 1172 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1173 :     Py_off_t pos;
; 1174 : 
; 1175 :     CHECK_INITIALIZED(self)

  00006	83 79 68 00	 cmp	 DWORD PTR [rcx+104], 0
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	7f 28		 jg	 SHORT $LN4@buffered_t@2
  0000f	83 79 6c 00	 cmp	 DWORD PTR [rcx+108], 0
  00013	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0001a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  00021	75 07		 jne	 SHORT $LN11@buffered_t@2
  00023	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
$LN11@buffered_t@2:
  0002a	e8 00 00 00 00	 call	 PyErr_SetString
$LN12@buffered_t@2:
  0002f	33 c0		 xor	 eax, eax

; 1180 :     /* TODO: sanity check (pos >= 0) */
; 1181 :     return PyLong_FromOff_t(pos);
; 1182 : }

  00031	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00035	5b		 pop	 rbx
  00036	c3		 ret	 0
$LN4@buffered_t@2:

; 1176 :     pos = _buffered_raw_tell(self);

  00037	e8 00 00 00 00	 call	 _buffered_raw_tell
  0003c	48 8b c8	 mov	 rcx, rax

; 1177 :     if (pos == -1)

  0003f	48 83 f8 ff	 cmp	 rax, -1

; 1178 :         return NULL;

  00043	74 ea		 je	 SHORT $LN12@buffered_t@2

; 1179 :     pos -= RAW_OFFSET(self);

  00045	83 7b 70 00	 cmp	 DWORD PTR [rbx+112], 0
  00049	74 0a		 je	 SHORT $LN7@buffered_t@2
  0004b	48 83 bb a0 00
	00 00 ff	 cmp	 QWORD PTR [rbx+160], -1
  00053	75 10		 jne	 SHORT $LN9@buffered_t@2
$LN7@buffered_t@2:
  00055	83 7b 74 00	 cmp	 DWORD PTR [rbx+116], 0
  00059	74 2a		 je	 SHORT $LN8@buffered_t@2
  0005b	48 83 bb b0 00
	00 00 ff	 cmp	 QWORD PTR [rbx+176], -1
  00063	74 20		 je	 SHORT $LN8@buffered_t@2
$LN9@buffered_t@2:
  00065	48 8b 83 98 00
	00 00		 mov	 rax, QWORD PTR [rbx+152]
  0006c	48 85 c0	 test	 rax, rax
  0006f	78 14		 js	 SHORT $LN8@buffered_t@2
  00071	48 2b 83 90 00
	00 00		 sub	 rax, QWORD PTR [rbx+144]
  00078	48 2b c8	 sub	 rcx, rax

; 1180 :     /* TODO: sanity check (pos >= 0) */
; 1181 :     return PyLong_FromOff_t(pos);
; 1182 : }

  0007b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007f	5b		 pop	 rbx
  00080	e9 00 00 00 00	 jmp	 PyLong_FromLongLong
$LN8@buffered_t@2:

; 1179 :     pos -= RAW_OFFSET(self);

  00085	33 c0		 xor	 eax, eax
  00087	48 2b c8	 sub	 rcx, rax

; 1180 :     /* TODO: sanity check (pos >= 0) */
; 1181 :     return PyLong_FromOff_t(pos);
; 1182 : }

  0008a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008e	5b		 pop	 rbx
  0008f	e9 00 00 00 00	 jmp	 PyLong_FromLongLong
buffered_tell ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@BPFPPNCE@?$DM?$CFs?5name?$DN?$CFR?$DO?$AA@ ; `string'
PUBLIC	??_C@_04NNJCMPBN@?$DM?$CFs?$DO?$AA@		; `string'
EXTRN	PyUnicode_FromFormat:PROC
EXTRN	PyExc_AttributeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_repr DD imagerel buffered_repr
	DD	imagerel buffered_repr+167
	DD	imagerel $unwind$buffered_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_repr DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0N@BPFPPNCE@?$DM?$CFs?5name?$DN?$CFR?$DO?$AA@
CONST	SEGMENT
??_C@_0N@BPFPPNCE@?$DM?$CFs?5name?$DN?$CFR?$DO?$AA@ DB '<%s name=%R>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04NNJCMPBN@?$DM?$CFs?$DO?$AA@
CONST	SEGMENT
??_C@_04NNJCMPBN@?$DM?$CFs?$DO?$AA@ DB '<%s>', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT buffered_repr
_TEXT	SEGMENT
self$ = 48
buffered_repr PROC					; COMDAT

; 1348 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1349 :     PyObject *nameobj, *res;
; 1350 : 
; 1351 :     nameobj = _PyObject_GetAttrId((PyObject *) self, &PyId_name);

  0000a	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  00011	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0001a	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_name
  0001f	4a 03 14 c0	 add	 rdx, QWORD PTR [rax+r8*8]
  00023	48 8b d9	 mov	 rbx, rcx
  00026	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0002b	48 8b f8	 mov	 rdi, rax

; 1352 :     if (nameobj == NULL) {

  0002e	48 85 c0	 test	 rax, rax
  00031	75 44		 jne	 SHORT $LN4@buffered_r@4

; 1353 :         if (PyErr_ExceptionMatches(PyExc_AttributeError))

  00033	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  0003a	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  0003f	85 c0		 test	 eax, eax
  00041	74 27		 je	 SHORT $LN3@buffered_r@4

; 1354 :             PyErr_Clear();

  00043	e8 00 00 00 00	 call	 PyErr_Clear

; 1357 :         res = PyUnicode_FromFormat("<%s>", Py_TYPE(self)->tp_name);

  00048	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04NNJCMPBN@?$DM?$CFs?$DO?$AA@
  00053	48 8b 52 70	 mov	 rdx, QWORD PTR [rdx+112]
  00057	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  0005c	48 8b d8	 mov	 rbx, rax

; 1365 : }

  0005f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00064	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00068	5f		 pop	 rdi
  00069	c3		 ret	 0
$LN3@buffered_r@4:

; 1355 :         else
; 1356 :             return NULL;

  0006a	33 c0		 xor	 eax, eax

; 1365 : }

  0006c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00071	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00075	5f		 pop	 rdi
  00076	c3		 ret	 0
$LN4@buffered_r@4:

; 1358 :     }
; 1359 :     else {
; 1360 :         res = PyUnicode_FromFormat("<%s name=%R>",
; 1361 :                                    Py_TYPE(self)->tp_name, nameobj);

  00077	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0007b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BPFPPNCE@?$DM?$CFs?5name?$DN?$CFR?$DO?$AA@
  00082	4c 8b c0	 mov	 r8, rax
  00085	48 8b 52 70	 mov	 rdx, QWORD PTR [rdx+112]
  00089	e8 00 00 00 00	 call	 PyUnicode_FromFormat

; 1362 :         Py_DECREF(nameobj);

  0008e	48 8b cf	 mov	 rcx, rdi
  00091	48 8b d8	 mov	 rbx, rax
  00094	e8 00 00 00 00	 call	 _Py_DecRef

; 1363 :     }
; 1364 :     return res;

  00099	48 8b c3	 mov	 rax, rbx

; 1365 : }

  0009c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a1	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a5	5f		 pop	 rdi
  000a6	c3		 ret	 0
buffered_repr ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _bufferedreader_reset_buf
_TEXT	SEGMENT
self$ = 8
_bufferedreader_reset_buf PROC				; COMDAT

; 1376 :     self->read_end = -1;

  00000	48 c7 81 a0 00
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rcx+160], -1

; 1377 : }

  0000b	c3		 ret	 0
_bufferedreader_reset_buf ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@MOMGKGMF@bufferedreader_init?$AA@	; `string'
PUBLIC	??_C@_0BD@JCEJGFNI@O?$HMn?3BufferedReader?$AA@	; `string'
PUBLIC	??_C@_0M@JLCCDMKC@buffer_size?$AA@		; `string'
EXTRN	PyFileIO_Type:BYTE
EXTRN	_PyIOBase_check_readable:PROC
EXTRN	_Py_TrueStruct:BYTE
EXTRN	_PyArg_ParseTupleAndKeywords_SizeT:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$bufferedreader_init DD imagerel bufferedreader_init
	DD	imagerel bufferedreader_init+143
	DD	imagerel $unwind$bufferedreader_init
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$bufferedreader_init DD imagerel bufferedreader_init+143
	DD	imagerel bufferedreader_init+317
	DD	imagerel $chain$0$bufferedreader_init
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$bufferedreader_init DD imagerel bufferedreader_init+317
	DD	imagerel bufferedreader_init+384
	DD	imagerel $chain$1$bufferedreader_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$bufferedreader_init DD 021H
	DD	imagerel bufferedreader_init
	DD	imagerel bufferedreader_init+143
	DD	imagerel $unwind$bufferedreader_init
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$bufferedreader_init DD 020521H
	DD	0d7405H
	DD	imagerel bufferedreader_init
	DD	imagerel bufferedreader_init+143
	DD	imagerel $unwind$bufferedreader_init
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferedreader_init DD 040c01H
	DD	0e340cH
	DD	06008920cH
xdata	ENDS
;	COMDAT ??_C@_0BE@MOMGKGMF@bufferedreader_init?$AA@
CONST	SEGMENT
??_C@_0BE@MOMGKGMF@bufferedreader_init?$AA@ DB 'bufferedreader_init', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JCEJGFNI@O?$HMn?3BufferedReader?$AA@
CONST	SEGMENT
??_C@_0BD@JCEJGFNI@O?$HMn?3BufferedReader?$AA@ DB 'O|n:BufferedReader', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JLCCDMKC@buffer_size?$AA@
CONST	SEGMENT
??_C@_0M@JLCCDMKC@buffer_size?$AA@ DB 'buffer_size', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\bufferedio.c
CONST	ENDS
;	COMDAT bufferedreader_init
_TEXT	SEGMENT
raw$ = 96
self$ = 96
args$ = 104
kwds$ = 112
buffer_size$ = 120
bufferedreader_init PROC				; COMDAT

; 1381 : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	49 89 5b 18	 mov	 QWORD PTR [r11+24], rbx
  00007	56		 push	 rsi
  00008	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000c	48 8b d9	 mov	 rbx, rcx
  0000f	49 8b c0	 mov	 rax, r8
  00012	4c 8b d2	 mov	 r10, rdx

; 1382 :     char *kwlist[] = {"raw", "buffer_size", NULL};

  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03DGOGAGNC@raw?$AA@
  0001c	33 f6		 xor	 esi, esi

; 1383 :     Py_ssize_t buffer_size = DEFAULT_BUFFER_SIZE;
; 1384 :     PyObject *raw;
; 1385 : 
; 1386 :     self->ok = 0;
; 1387 :     self->detached = 0;
; 1388 : 
; 1389 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|n:BufferedReader", kwlist,
; 1390 :                                      &raw, &buffer_size)) {

  0001e	4d 8d 4b d8	 lea	 r9, QWORD PTR [r11-40]
  00022	49 89 4b d8	 mov	 QWORD PTR [r11-40], rcx
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@JLCCDMKC@buffer_size?$AA@
  0002d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@JCEJGFNI@O?$HMn?3BufferedReader?$AA@
  00034	49 89 4b e0	 mov	 QWORD PTR [r11-32], rcx
  00038	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  0003c	48 8b d0	 mov	 rdx, rax
  0003f	49 89 4b d0	 mov	 QWORD PTR [r11-48], rcx
  00043	49 8d 4b 08	 lea	 rcx, QWORD PTR [r11+8]
  00047	49 89 73 e8	 mov	 QWORD PTR [r11-24], rsi
  0004b	49 89 4b c8	 mov	 QWORD PTR [r11-56], rcx
  0004f	49 8b ca	 mov	 rcx, r10
  00052	49 c7 43 20 00
	20 00 00	 mov	 QWORD PTR [r11+32], 8192 ; 00002000H
  0005a	48 89 73 68	 mov	 QWORD PTR [rbx+104], rsi
  0005e	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  00063	85 c0		 test	 eax, eax
  00065	75 0e		 jne	 SHORT $LN7@bufferedre
$LN16@bufferedre:

; 1391 :         return -1;

  00067	83 c8 ff	 or	 eax, -1

; 1412 :     return 0;
; 1413 : }

  0006a	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  0006f	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00073	5e		 pop	 rsi
  00074	c3		 ret	 0
$LN7@bufferedre:

; 1392 :     }
; 1393 : 
; 1394 :     if (_PyIOBase_check_readable(raw, Py_True) == NULL)

  00075	48 8b 4c 24 60	 mov	 rcx, QWORD PTR raw$[rsp]
  0007a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_TrueStruct
  00081	e8 00 00 00 00	 call	 _PyIOBase_check_readable
  00086	48 85 c0	 test	 rax, rax

; 1395 :         return -1;

  00089	74 dc		 je	 SHORT $LN16@bufferedre

; 1396 : 
; 1397 :     Py_CLEAR(self->raw);

  0008b	4c 8b 4b 60	 mov	 r9, QWORD PTR [rbx+96]
  0008f	48 89 7c 24 68	 mov	 QWORD PTR [rsp+104], rdi
  00094	4d 85 c9	 test	 r9, r9
  00097	74 32		 je	 SHORT $LN4@bufferedre
  00099	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  000a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@MOMGKGMF@bufferedreader_init?$AA@
  000a7	41 b8 75 05 00
	00		 mov	 r8d, 1397		; 00000575H
  000ad	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000b5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ba	85 c0		 test	 eax, eax
  000bc	75 0d		 jne	 SHORT $LN4@bufferedre
  000be	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  000c2	48 89 73 60	 mov	 QWORD PTR [rbx+96], rsi
  000c6	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@bufferedre:

; 1398 :     Py_INCREF(raw);

  000cb	48 8b 7c 24 60	 mov	 rdi, QWORD PTR raw$[rsp]
  000d0	e8 00 00 00 00	 call	 _Py_PXCTX
  000d5	85 c0		 test	 eax, eax
  000d7	75 32		 jne	 SHORT $LN13@bufferedre
  000d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000e7	4c 8b cf	 mov	 r9, rdi
  000ea	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000f0	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000f8	e8 00 00 00 00	 call	 _PyParallel_Guard
  000fd	85 c0		 test	 eax, eax
  000ff	75 06		 jne	 SHORT $LN12@bufferedre
  00101	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  00105	74 04		 je	 SHORT $LN13@bufferedre
$LN12@bufferedre:
  00107	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN13@bufferedre:

; 1399 :     self->raw = raw;

  0010b	48 8b 44 24 60	 mov	 rax, QWORD PTR raw$[rsp]

; 1400 :     self->buffer_size = buffer_size;
; 1401 :     self->readable = 1;
; 1402 :     self->writable = 0;
; 1403 : 
; 1404 :     if (_buffered_init(self) < 0)

  00110	48 8b cb	 mov	 rcx, rbx
  00113	48 c7 43 70 01
	00 00 00	 mov	 QWORD PTR [rbx+112], 1
  0011b	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax
  0011f	48 8b 44 24 78	 mov	 rax, QWORD PTR buffer_size$[rsp]
  00124	48 89 83 c8 00
	00 00		 mov	 QWORD PTR [rbx+200], rax
  0012b	e8 00 00 00 00	 call	 _buffered_init
  00130	48 8b 7c 24 68	 mov	 rdi, QWORD PTR [rsp+104]
  00135	85 c0		 test	 eax, eax

; 1405 :         return -1;

  00137	0f 88 2a ff ff
	ff		 js	 $LN16@bufferedre

; 1406 :     _bufferedreader_reset_buf(self);

  0013d	48 8b cb	 mov	 rcx, rbx
  00140	e8 00 00 00 00	 call	 _bufferedreader_reset_buf

; 1407 : 
; 1408 :     self->fast_closed_checks = (Py_TYPE(self) == &PyBufferedReader_Type &&
; 1409 :                                 Py_TYPE(raw) == &PyFileIO_Type);

  00145	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBufferedReader_Type
  0014c	48 39 43 58	 cmp	 QWORD PTR [rbx+88], rax
  00150	75 17		 jne	 SHORT $LN10@bufferedre
  00152	48 8b 44 24 60	 mov	 rax, QWORD PTR raw$[rsp]
  00157	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyFileIO_Type
  0015e	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  00162	75 05		 jne	 SHORT $LN10@bufferedre
  00164	be 01 00 00 00	 mov	 esi, 1
$LN10@bufferedre:
  00169	89 73 7c	 mov	 DWORD PTR [rbx+124], esi

; 1410 : 
; 1411 :     self->ok = 1;

  0016c	c7 43 68 01 00
	00 00		 mov	 DWORD PTR [rbx+104], 1

; 1412 :     return 0;
; 1413 : }

  00173	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  00178	33 c0		 xor	 eax, eax
  0017a	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0017e	5e		 pop	 rsi
  0017f	c3		 ret	 0
bufferedreader_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0FA@EMOGLMJO@raw?5readinto?$CI?$CJ?5returned?5invalid?5@ ; `string'
EXTRN	PyNumber_AsSsize_t:PROC
EXTRN	_PyIO_str_readinto:QWORD
EXTRN	PyMemoryView_FromBuffer:PROC
EXTRN	PyBuffer_FillInfo:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_bufferedreader_raw_read DD imagerel _bufferedreader_raw_read
	DD	imagerel _bufferedreader_raw_read+114
	DD	imagerel $unwind$_bufferedreader_raw_read
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_bufferedreader_raw_read DD imagerel _bufferedreader_raw_read+114
	DD	imagerel _bufferedreader_raw_read+312
	DD	imagerel $chain$1$_bufferedreader_raw_read
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_bufferedreader_raw_read DD imagerel _bufferedreader_raw_read+312
	DD	imagerel _bufferedreader_raw_read+337
	DD	imagerel $chain$2$_bufferedreader_raw_read
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_bufferedreader_raw_read DD 021H
	DD	imagerel _bufferedreader_raw_read
	DD	imagerel _bufferedreader_raw_read+114
	DD	imagerel $unwind$_bufferedreader_raw_read
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_bufferedreader_raw_read DD 020821H
	DD	0123408H
	DD	imagerel _bufferedreader_raw_read
	DD	imagerel _bufferedreader_raw_read+114
	DD	imagerel $unwind$_bufferedreader_raw_read
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_bufferedreader_raw_read DD 065c01H
	DD	013745cH
	DD	014540dH
	DD	06006f20dH
xdata	ENDS
;	COMDAT ??_C@_0FA@EMOGLMJO@raw?5readinto?$CI?$CJ?5returned?5invalid?5@
CONST	SEGMENT
??_C@_0FA@EMOGLMJO@raw?5readinto?$CI?$CJ?5returned?5invalid?5@ DB 'raw re'
	DB	'adinto() returned invalid length %zd (should have been betwee'
	DB	'n 0 and %zd)', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _bufferedreader_raw_read
_TEXT	SEGMENT
buf$ = 48
self$ = 144
start$ = 152
len$ = 160
_bufferedreader_raw_read PROC				; COMDAT

; 1417 : {

  00000	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  00005	56		 push	 rsi
  00006	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  0000d	48 8b f1	 mov	 rsi, rcx
  00010	49 8b e8	 mov	 rbp, r8

; 1418 :     Py_buffer buf;
; 1419 :     PyObject *memobj, *res;
; 1420 :     Py_ssize_t n;
; 1421 :     /* NOTE: the buffer needn't be released as its object is NULL. */
; 1422 :     if (PyBuffer_FillInfo(&buf, NULL, start, len, 0, PyBUF_CONTIG) == -1)

  00013	4d 8b c8	 mov	 r9, r8
  00016	4c 8b c2	 mov	 r8, rdx
  00019	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  0001e	33 d2		 xor	 edx, edx
  00020	c7 44 24 28 09
	00 00 00	 mov	 DWORD PTR [rsp+40], 9
  00028	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  00030	e8 00 00 00 00	 call	 PyBuffer_FillInfo
  00035	83 f8 ff	 cmp	 eax, -1
  00038	75 15		 jne	 SHORT $LN11@bufferedre@2

; 1423 :         return -1;

  0003a	48 83 c8 ff	 or	 rax, -1

; 1454 : }

  0003e	48 8b ac 24 a0
	00 00 00	 mov	 rbp, QWORD PTR [rsp+160]
  00046	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  0004d	5e		 pop	 rsi
  0004e	c3		 ret	 0
$LN11@bufferedre@2:

; 1424 :     memobj = PyMemoryView_FromBuffer(&buf);

  0004f	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  00054	48 89 bc 24 98
	00 00 00	 mov	 QWORD PTR [rsp+152], rdi
  0005c	e8 00 00 00 00	 call	 PyMemoryView_FromBuffer
  00061	48 8b f8	 mov	 rdi, rax

; 1425 :     if (memobj == NULL)

  00064	48 85 c0	 test	 rax, rax
  00067	75 09		 jne	 SHORT $LN15@bufferedre@2

; 1426 :         return -1;

  00069	48 83 c8 ff	 or	 rax, -1
  0006d	e9 c6 00 00 00	 jmp	 $LN16@bufferedre@2
$LN15@bufferedre@2:
  00072	48 89 9c 24 90
	00 00 00	 mov	 QWORD PTR [rsp+144], rbx
  0007a	66 0f 1f 44 00
	00		 npad	 6
$LL9@bufferedre@2:

; 1427 :     /* NOTE: PyErr_SetFromErrno() calls PyErr_CheckSignals() when EINTR
; 1428 :        occurs so we needn't do it ourselves.
; 1429 :        We then retry reading, ignoring the signal if no handler has
; 1430 :        raised (see issue #10956).
; 1431 :     */
; 1432 :     do {
; 1433 :         res = PyObject_CallMethodObjArgs(self->raw, _PyIO_str_readinto, memobj, NULL);

  00080	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_readinto
  00087	48 8b 4e 60	 mov	 rcx, QWORD PTR [rsi+96]
  0008b	45 33 c9	 xor	 r9d, r9d
  0008e	4c 8b c7	 mov	 r8, rdi
  00091	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  00096	48 8b d8	 mov	 rbx, rax

; 1434 :     } while (res == NULL && _PyIO_trap_eintr());

  00099	48 85 c0	 test	 rax, rax
  0009c	75 09		 jne	 SHORT $LN6@bufferedre@2
  0009e	e8 00 00 00 00	 call	 _PyIO_trap_eintr
  000a3	85 c0		 test	 eax, eax
  000a5	75 d9		 jne	 SHORT $LL9@bufferedre@2
$LN6@bufferedre@2:

; 1435 :     Py_DECREF(memobj);

  000a7	48 8b cf	 mov	 rcx, rdi
  000aa	e8 00 00 00 00	 call	 _Py_DecRef

; 1436 :     if (res == NULL)

  000af	48 85 db	 test	 rbx, rbx

; 1437 :         return -1;

  000b2	74 78		 je	 SHORT $LN18@bufferedre@2

; 1438 :     if (res == Py_None) {

  000b4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1439 :         /* Non-blocking stream would have blocked. Special return code! */
; 1440 :         Py_DECREF(res);

  000bb	48 8b cb	 mov	 rcx, rbx
  000be	48 3b d8	 cmp	 rbx, rax
  000c1	75 0e		 jne	 SHORT $LN4@bufferedre@2
  000c3	e8 00 00 00 00	 call	 _Py_DecRef

; 1441 :         return -2;

  000c8	48 c7 c0 fe ff
	ff ff		 mov	 rax, -2
  000cf	eb 5f		 jmp	 SHORT $LN17@bufferedre@2
$LN4@bufferedre@2:

; 1442 :     }
; 1443 :     n = PyNumber_AsSsize_t(res, PyExc_ValueError);

  000d1	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_ValueError
  000d8	e8 00 00 00 00	 call	 PyNumber_AsSsize_t

; 1444 :     Py_DECREF(res);

  000dd	48 8b cb	 mov	 rcx, rbx
  000e0	48 8b f8	 mov	 rdi, rax
  000e3	e8 00 00 00 00	 call	 _Py_DecRef

; 1445 :     if (n < 0 || n > len) {

  000e8	48 85 ff	 test	 rdi, rdi
  000eb	78 26		 js	 SHORT $LN2@bufferedre@2
  000ed	48 3b fd	 cmp	 rdi, rbp
  000f0	7f 21		 jg	 SHORT $LN2@bufferedre@2

; 1450 :     }
; 1451 :     if (n > 0 && self->abs_pos != -1)

  000f2	48 85 ff	 test	 rdi, rdi
  000f5	7e 17		 jle	 SHORT $LN1@bufferedre@2
  000f7	48 8b 86 80 00
	00 00		 mov	 rax, QWORD PTR [rsi+128]
  000fe	48 83 f8 ff	 cmp	 rax, -1
  00102	74 0a		 je	 SHORT $LN1@bufferedre@2

; 1452 :         self->abs_pos += n;

  00104	48 03 c7	 add	 rax, rdi
  00107	48 89 86 80 00
	00 00		 mov	 QWORD PTR [rsi+128], rax
$LN1@bufferedre@2:

; 1453 :     return n;

  0010e	48 8b c7	 mov	 rax, rdi
  00111	eb 1d		 jmp	 SHORT $LN17@bufferedre@2
$LN2@bufferedre@2:

; 1446 :         PyErr_Format(PyExc_IOError,
; 1447 :                      "raw readinto() returned invalid length %zd "
; 1448 :                      "(should have been between 0 and %zd)", n, len);

  00113	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  0011a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0FA@EMOGLMJO@raw?5readinto?$CI?$CJ?5returned?5invalid?5@
  00121	4c 8b cd	 mov	 r9, rbp
  00124	4c 8b c7	 mov	 r8, rdi
  00127	e8 00 00 00 00	 call	 PyErr_Format
$LN18@bufferedre@2:

; 1449 :         return -1;

  0012c	48 83 c8 ff	 or	 rax, -1
$LN17@bufferedre@2:
  00130	48 8b 9c 24 90
	00 00 00	 mov	 rbx, QWORD PTR [rsp+144]
$LN16@bufferedre@2:
  00138	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR [rsp+152]

; 1454 : }

  00140	48 8b ac 24 a0
	00 00 00	 mov	 rbp, QWORD PTR [rsp+160]
  00148	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  0014f	5e		 pop	 rsi
  00150	c3		 ret	 0
_bufferedreader_raw_read ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_bufferedreader_fill_buffer DD imagerel _bufferedreader_fill_buffer
	DD	imagerel _bufferedreader_fill_buffer+99
	DD	imagerel $unwind$_bufferedreader_fill_buffer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_bufferedreader_fill_buffer DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _bufferedreader_fill_buffer
_TEXT	SEGMENT
self$ = 48
_bufferedreader_fill_buffer PROC			; COMDAT

; 1458 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1459 :     Py_ssize_t start, len, n;
; 1460 :     if (VALID_READ_BUFFER(self))

  0000a	83 79 70 00	 cmp	 DWORD PTR [rcx+112], 0
  0000e	48 8b d9	 mov	 rbx, rcx
  00011	74 0d		 je	 SHORT $LN3@bufferedre@3
  00013	48 8b b9 a0 00
	00 00		 mov	 rdi, QWORD PTR [rcx+160]
  0001a	48 83 ff ff	 cmp	 rdi, -1
  0001e	75 02		 jne	 SHORT $LN2@bufferedre@3
$LN3@bufferedre@3:

; 1461 :         start = Py_SAFE_DOWNCAST(self->read_end, Py_off_t, Py_ssize_t);
; 1462 :     else
; 1463 :         start = 0;

  00020	33 ff		 xor	 edi, edi
$LN2@bufferedre@3:

; 1464 :     len = self->buffer_size - start;
; 1465 :     n = _bufferedreader_raw_read(self, self->buffer + start, len);

  00022	48 8b 81 88 00
	00 00		 mov	 rax, QWORD PTR [rcx+136]
  00029	4c 8b 81 c8 00
	00 00		 mov	 r8, QWORD PTR [rcx+200]
  00030	48 8d 14 07	 lea	 rdx, QWORD PTR [rdi+rax]
  00034	4c 2b c7	 sub	 r8, rdi
  00037	e8 00 00 00 00	 call	 _bufferedreader_raw_read
  0003c	4c 8b d8	 mov	 r11, rax

; 1466 :     if (n <= 0)

  0003f	48 85 c0	 test	 rax, rax

; 1467 :         return n;

  00042	7e 14		 jle	 SHORT $LN4@bufferedre@3

; 1468 :     self->read_end = start + n;

  00044	48 03 c7	 add	 rax, rdi
  00047	48 89 83 a0 00
	00 00		 mov	 QWORD PTR [rbx+160], rax

; 1469 :     self->raw_pos = start + n;

  0004e	48 89 83 98 00
	00 00		 mov	 QWORD PTR [rbx+152], rax

; 1470 :     return n;

  00055	49 8b c3	 mov	 rax, r11
$LN4@bufferedre@3:

; 1471 : }

  00058	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00061	5f		 pop	 rdi
  00062	c3		 ret	 0
_bufferedreader_fill_buffer ENDP
_TEXT	ENDS
EXTRN	PyBytes_FromStringAndSize:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_bufferedreader_read_fast DD imagerel _bufferedreader_read_fast
	DD	imagerel _bufferedreader_read_fast+180
	DD	imagerel $unwind$_bufferedreader_read_fast
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_bufferedreader_read_fast DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\bufferedio.c
xdata	ENDS
;	COMDAT _bufferedreader_read_fast
_TEXT	SEGMENT
self$ = 64
n$ = 72
_bufferedreader_read_fast PROC				; COMDAT

; 1572 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1573 :     Py_ssize_t current_size;
; 1574 : 
; 1575 :     current_size = Py_SAFE_DOWNCAST(READAHEAD(self), Py_off_t, Py_ssize_t);

  0000a	83 79 70 00	 cmp	 DWORD PTR [rcx+112], 0
  0000e	48 8b fa	 mov	 rdi, rdx
  00011	48 8b d9	 mov	 rbx, rcx
  00014	74 16		 je	 SHORT $LN5@bufferedre@4
  00016	48 8b 81 a0 00
	00 00		 mov	 rax, QWORD PTR [rcx+160]
  0001d	48 83 f8 ff	 cmp	 rax, -1
  00021	74 09		 je	 SHORT $LN5@bufferedre@4
  00023	48 2b 81 90 00
	00 00		 sub	 rax, QWORD PTR [rcx+144]
  0002a	eb 02		 jmp	 SHORT $LN6@bufferedre@4
$LN5@bufferedre@4:
  0002c	33 c0		 xor	 eax, eax
$LN6@bufferedre@4:

; 1576 :     if (n <= current_size) {

  0002e	48 3b d0	 cmp	 rdx, rax
  00031	7f 2a		 jg	 SHORT $LN2@bufferedre@4

; 1577 :         /* Fast path: the data to read is fully buffered. */
; 1578 :         PyObject *res = PyBytes_FromStringAndSize(self->buffer + self->pos, n);

  00033	48 8b 89 88 00
	00 00		 mov	 rcx, QWORD PTR [rcx+136]
  0003a	48 03 8b 90 00
	00 00		 add	 rcx, QWORD PTR [rbx+144]
  00041	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize

; 1579 :         if (res != NULL)

  00046	48 85 c0	 test	 rax, rax
  00049	74 5e		 je	 SHORT $LN3@bufferedre@4

; 1580 :             self->pos += n;

  0004b	48 01 bb 90 00
	00 00		 add	 QWORD PTR [rbx+144], rdi

; 1584 : }

  00052	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00057	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005b	5f		 pop	 rdi
  0005c	c3		 ret	 0
$LN2@bufferedre@4:

; 1581 :         return res;
; 1582 :     }
; 1583 :     Py_RETURN_NONE;

  0005d	e8 00 00 00 00	 call	 _Py_PXCTX
  00062	85 c0		 test	 eax, eax
  00064	75 3c		 jne	 SHORT $LN8@bufferedre@4
  00066	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  0006d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00074	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0007b	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00081	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00089	e8 00 00 00 00	 call	 _PyParallel_Guard
  0008e	85 c0		 test	 eax, eax
  00090	75 09		 jne	 SHORT $LN7@bufferedre@4
  00092	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00099	74 07		 je	 SHORT $LN8@bufferedre@4
$LN7@bufferedre@4:
  0009b	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN8@bufferedre@4:
  000a2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN3@bufferedre@4:

; 1584 : }

  000a9	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000ae	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b2	5f		 pop	 rdi
  000b3	c3		 ret	 0
_bufferedreader_read_fast ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_bufferedreader_peek_unlocked DD imagerel _bufferedreader_peek_unlocked
	DD	imagerel _bufferedreader_peek_unlocked+124
	DD	imagerel $unwind$_bufferedreader_peek_unlocked
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_bufferedreader_peek_unlocked DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _bufferedreader_peek_unlocked
_TEXT	SEGMENT
self$ = 48
_bufferedreader_peek_unlocked PROC			; COMDAT

; 1690 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1691 :     Py_ssize_t have, r;
; 1692 : 
; 1693 :     have = Py_SAFE_DOWNCAST(READAHEAD(self), Py_off_t, Py_ssize_t);

  00006	83 79 70 00	 cmp	 DWORD PTR [rcx+112], 0
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	74 2d		 je	 SHORT $LN3@bufferedre@5
  0000f	48 8b 91 a0 00
	00 00		 mov	 rdx, QWORD PTR [rcx+160]
  00016	48 83 fa ff	 cmp	 rdx, -1
  0001a	74 20		 je	 SHORT $LN3@bufferedre@5
  0001c	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  00023	48 2b d1	 sub	 rdx, rcx

; 1694 :     /* Constraints:
; 1695 :        1. we don't want to advance the file position.
; 1696 :        2. we don't want to lose block alignment, so we can't shift the buffer
; 1697 :           to make some place.
; 1698 :        Therefore, we either return `have` bytes (if > 0), or a full buffer.
; 1699 :     */
; 1700 :     if (have > 0) {

  00026	48 85 d2	 test	 rdx, rdx
  00029	7e 11		 jle	 SHORT $LN3@bufferedre@5

; 1701 :         return PyBytes_FromStringAndSize(self->buffer + self->pos, have);

  0002b	48 03 8b 88 00
	00 00		 add	 rcx, QWORD PTR [rbx+136]

; 1713 : }

  00032	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00036	5b		 pop	 rbx
  00037	e9 00 00 00 00	 jmp	 PyBytes_FromStringAndSize
$LN3@bufferedre@5:

; 1702 :     }
; 1703 : 
; 1704 :     /* Fill the buffer from the raw stream, and copy it to the result. */
; 1705 :     _bufferedreader_reset_buf(self);

  0003c	48 8b cb	 mov	 rcx, rbx
  0003f	e8 00 00 00 00	 call	 _bufferedreader_reset_buf

; 1706 :     r = _bufferedreader_fill_buffer(self);

  00044	e8 00 00 00 00	 call	 _bufferedreader_fill_buffer

; 1707 :     if (r == -1)

  00049	48 83 f8 ff	 cmp	 rax, -1
  0004d	75 08		 jne	 SHORT $LN2@bufferedre@5

; 1708 :         return NULL;

  0004f	33 c0		 xor	 eax, eax

; 1713 : }

  00051	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00055	5b		 pop	 rbx
  00056	c3		 ret	 0
$LN2@bufferedre@5:

; 1709 :     if (r == -2)

  00057	33 c9		 xor	 ecx, ecx
  00059	48 83 f8 fe	 cmp	 rax, -2
  0005d	48 0f 44 c1	 cmove	 rax, rcx

; 1710 :         r = 0;
; 1711 :     self->pos = 0;

  00061	48 89 8b 90 00
	00 00		 mov	 QWORD PTR [rbx+144], rcx

; 1712 :     return PyBytes_FromStringAndSize(self->buffer, r);

  00068	48 8b 8b 88 00
	00 00		 mov	 rcx, QWORD PTR [rbx+136]
  0006f	48 8b d0	 mov	 rdx, rax

; 1713 : }

  00072	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00076	5b		 pop	 rbx
  00077	e9 00 00 00 00	 jmp	 PyBytes_FromStringAndSize
_bufferedreader_peek_unlocked ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _bufferedwriter_reset_buf
_TEXT	SEGMENT
self$ = 8
_bufferedwriter_reset_buf PROC				; COMDAT

; 1811 :     self->write_pos = 0;

  00000	48 c7 81 a8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rcx+168], 0

; 1812 :     self->write_end = -1;

  0000b	48 c7 81 b0 00
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rcx+176], -1

; 1813 : }

  00016	c3		 ret	 0
_bufferedwriter_reset_buf ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@GOLPACBI@bufferedwriter_init?$AA@	; `string'
PUBLIC	??_C@_0BD@LOMLGEAC@O?$HMn?3BufferedWriter?$AA@	; `string'
EXTRN	_PyIOBase_check_writable:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$bufferedwriter_init DD imagerel bufferedwriter_init
	DD	imagerel bufferedwriter_init+143
	DD	imagerel $unwind$bufferedwriter_init
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$bufferedwriter_init DD imagerel bufferedwriter_init+143
	DD	imagerel bufferedwriter_init+319
	DD	imagerel $chain$0$bufferedwriter_init
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$bufferedwriter_init DD imagerel bufferedwriter_init+319
	DD	imagerel bufferedwriter_init+393
	DD	imagerel $chain$1$bufferedwriter_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$bufferedwriter_init DD 021H
	DD	imagerel bufferedwriter_init
	DD	imagerel bufferedwriter_init+143
	DD	imagerel $unwind$bufferedwriter_init
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$bufferedwriter_init DD 020521H
	DD	0d6405H
	DD	imagerel bufferedwriter_init
	DD	imagerel bufferedwriter_init+143
	DD	imagerel $unwind$bufferedwriter_init
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferedwriter_init DD 040c01H
	DD	0e340cH
	DD	07008920cH
xdata	ENDS
;	COMDAT ??_C@_0BE@GOLPACBI@bufferedwriter_init?$AA@
CONST	SEGMENT
??_C@_0BE@GOLPACBI@bufferedwriter_init?$AA@ DB 'bufferedwriter_init', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LOMLGEAC@O?$HMn?3BufferedWriter?$AA@
CONST	SEGMENT
??_C@_0BD@LOMLGEAC@O?$HMn?3BufferedWriter?$AA@ DB 'O|n:BufferedWriter', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\bufferedio.c
CONST	ENDS
;	COMDAT bufferedwriter_init
_TEXT	SEGMENT
raw$ = 96
self$ = 96
args$ = 104
kwds$ = 112
buffer_size$ = 120
bufferedwriter_init PROC				; COMDAT

; 1817 : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	49 89 5b 18	 mov	 QWORD PTR [r11+24], rbx
  00007	57		 push	 rdi
  00008	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000c	48 8b d9	 mov	 rbx, rcx
  0000f	49 8b c0	 mov	 rax, r8
  00012	4c 8b d2	 mov	 r10, rdx

; 1818 :     char *kwlist[] = {"raw", "buffer_size", NULL};

  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03DGOGAGNC@raw?$AA@
  0001c	33 ff		 xor	 edi, edi

; 1819 :     Py_ssize_t buffer_size = DEFAULT_BUFFER_SIZE;
; 1820 :     PyObject *raw;
; 1821 : 
; 1822 :     self->ok = 0;
; 1823 :     self->detached = 0;
; 1824 : 
; 1825 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|n:BufferedWriter", kwlist,
; 1826 :                                      &raw, &buffer_size)) {

  0001e	4d 8d 4b d8	 lea	 r9, QWORD PTR [r11-40]
  00022	49 89 4b d8	 mov	 QWORD PTR [r11-40], rcx
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@JLCCDMKC@buffer_size?$AA@
  0002d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@LOMLGEAC@O?$HMn?3BufferedWriter?$AA@
  00034	49 89 4b e0	 mov	 QWORD PTR [r11-32], rcx
  00038	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  0003c	48 8b d0	 mov	 rdx, rax
  0003f	49 89 4b d0	 mov	 QWORD PTR [r11-48], rcx
  00043	49 8d 4b 08	 lea	 rcx, QWORD PTR [r11+8]
  00047	49 89 7b e8	 mov	 QWORD PTR [r11-24], rdi
  0004b	49 89 4b c8	 mov	 QWORD PTR [r11-56], rcx
  0004f	49 8b ca	 mov	 rcx, r10
  00052	49 c7 43 20 00
	20 00 00	 mov	 QWORD PTR [r11+32], 8192 ; 00002000H
  0005a	48 89 7b 68	 mov	 QWORD PTR [rbx+104], rdi
  0005e	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  00063	85 c0		 test	 eax, eax
  00065	75 0e		 jne	 SHORT $LN7@bufferedwr
$LN16@bufferedwr:

; 1827 :         return -1;

  00067	83 c8 ff	 or	 eax, -1

; 1849 :     return 0;
; 1850 : }

  0006a	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  0006f	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00073	5f		 pop	 rdi
  00074	c3		 ret	 0
$LN7@bufferedwr:

; 1828 :     }
; 1829 : 
; 1830 :     if (_PyIOBase_check_writable(raw, Py_True) == NULL)

  00075	48 8b 4c 24 60	 mov	 rcx, QWORD PTR raw$[rsp]
  0007a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_TrueStruct
  00081	e8 00 00 00 00	 call	 _PyIOBase_check_writable
  00086	48 85 c0	 test	 rax, rax

; 1831 :         return -1;

  00089	74 dc		 je	 SHORT $LN16@bufferedwr

; 1832 : 
; 1833 :     Py_CLEAR(self->raw);

  0008b	4c 8b 4b 60	 mov	 r9, QWORD PTR [rbx+96]
  0008f	48 89 74 24 68	 mov	 QWORD PTR [rsp+104], rsi
  00094	4d 85 c9	 test	 r9, r9
  00097	74 32		 je	 SHORT $LN4@bufferedwr
  00099	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  000a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@GOLPACBI@bufferedwriter_init?$AA@
  000a7	41 b8 29 07 00
	00		 mov	 r8d, 1833		; 00000729H
  000ad	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000b5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ba	85 c0		 test	 eax, eax
  000bc	75 0d		 jne	 SHORT $LN4@bufferedwr
  000be	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  000c2	48 89 7b 60	 mov	 QWORD PTR [rbx+96], rdi
  000c6	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@bufferedwr:

; 1834 :     Py_INCREF(raw);

  000cb	48 8b 74 24 60	 mov	 rsi, QWORD PTR raw$[rsp]
  000d0	e8 00 00 00 00	 call	 _Py_PXCTX
  000d5	85 c0		 test	 eax, eax
  000d7	75 32		 jne	 SHORT $LN13@bufferedwr
  000d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000e7	4c 8b ce	 mov	 r9, rsi
  000ea	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000f0	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000f8	e8 00 00 00 00	 call	 _PyParallel_Guard
  000fd	85 c0		 test	 eax, eax
  000ff	75 06		 jne	 SHORT $LN12@bufferedwr
  00101	f6 46 20 20	 test	 BYTE PTR [rsi+32], 32	; 00000020H
  00105	74 04		 je	 SHORT $LN13@bufferedwr
$LN12@bufferedwr:
  00107	48 ff 46 50	 inc	 QWORD PTR [rsi+80]
$LN13@bufferedwr:

; 1835 :     self->raw = raw;

  0010b	48 8b 44 24 60	 mov	 rax, QWORD PTR raw$[rsp]

; 1836 :     self->readable = 0;
; 1837 :     self->writable = 1;
; 1838 : 
; 1839 :     self->buffer_size = buffer_size;
; 1840 :     if (_buffered_init(self) < 0)

  00110	48 8b cb	 mov	 rcx, rbx
  00113	89 7b 70	 mov	 DWORD PTR [rbx+112], edi
  00116	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax
  0011a	48 8b 44 24 78	 mov	 rax, QWORD PTR buffer_size$[rsp]
  0011f	c7 43 74 01 00
	00 00		 mov	 DWORD PTR [rbx+116], 1
  00126	48 89 83 c8 00
	00 00		 mov	 QWORD PTR [rbx+200], rax
  0012d	e8 00 00 00 00	 call	 _buffered_init
  00132	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  00137	85 c0		 test	 eax, eax

; 1841 :         return -1;

  00139	0f 88 28 ff ff
	ff		 js	 $LN16@bufferedwr

; 1842 :     _bufferedwriter_reset_buf(self);

  0013f	48 8b cb	 mov	 rcx, rbx
  00142	e8 00 00 00 00	 call	 _bufferedwriter_reset_buf

; 1843 :     self->pos = 0;
; 1844 : 
; 1845 :     self->fast_closed_checks = (Py_TYPE(self) == &PyBufferedWriter_Type &&
; 1846 :                                 Py_TYPE(raw) == &PyFileIO_Type);

  00147	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBufferedWriter_Type
  0014e	48 89 bb 90 00
	00 00		 mov	 QWORD PTR [rbx+144], rdi
  00155	48 39 43 58	 cmp	 QWORD PTR [rbx+88], rax
  00159	75 17		 jne	 SHORT $LN10@bufferedwr
  0015b	48 8b 44 24 60	 mov	 rax, QWORD PTR raw$[rsp]
  00160	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyFileIO_Type
  00167	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  0016b	75 05		 jne	 SHORT $LN10@bufferedwr
  0016d	bf 01 00 00 00	 mov	 edi, 1
$LN10@bufferedwr:
  00172	89 7b 7c	 mov	 DWORD PTR [rbx+124], edi

; 1847 : 
; 1848 :     self->ok = 1;

  00175	c7 43 68 01 00
	00 00		 mov	 DWORD PTR [rbx+104], 1

; 1849 :     return 0;
; 1850 : }

  0017c	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  00181	33 c0		 xor	 eax, eax
  00183	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00187	5f		 pop	 rdi
  00188	c3		 ret	 0
bufferedwriter_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EN@PMBDGOJF@raw?5write?$CI?$CJ?5returned?5invalid?5len@ ; `string'
EXTRN	_PyIO_str_write:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$_bufferedwriter_raw_write DD imagerel _bufferedwriter_raw_write
	DD	imagerel _bufferedwriter_raw_write+74
	DD	imagerel $unwind$_bufferedwriter_raw_write
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_bufferedwriter_raw_write DD imagerel _bufferedwriter_raw_write+74
	DD	imagerel _bufferedwriter_raw_write+117
	DD	imagerel $chain$0$_bufferedwriter_raw_write
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$_bufferedwriter_raw_write DD imagerel _bufferedwriter_raw_write+117
	DD	imagerel _bufferedwriter_raw_write+133
	DD	imagerel $chain$4$_bufferedwriter_raw_write
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$_bufferedwriter_raw_write DD imagerel _bufferedwriter_raw_write+133
	DD	imagerel _bufferedwriter_raw_write+226
	DD	imagerel $chain$5$_bufferedwriter_raw_write
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$_bufferedwriter_raw_write DD imagerel _bufferedwriter_raw_write+226
	DD	imagerel _bufferedwriter_raw_write+393
	DD	imagerel $chain$6$_bufferedwriter_raw_write
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$_bufferedwriter_raw_write DD 021H
	DD	imagerel _bufferedwriter_raw_write+117
	DD	imagerel _bufferedwriter_raw_write+133
	DD	imagerel $chain$4$_bufferedwriter_raw_write
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$_bufferedwriter_raw_write DD 020821H
	DD	010d408H
	DD	imagerel _bufferedwriter_raw_write+117
	DD	imagerel _bufferedwriter_raw_write+133
	DD	imagerel $chain$4$_bufferedwriter_raw_write
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$_bufferedwriter_raw_write DD 061021H
	DD	016c410H
	DD	0157408H
	DD	0143400H
	DD	imagerel _bufferedwriter_raw_write
	DD	imagerel _bufferedwriter_raw_write+74
	DD	imagerel $unwind$_bufferedwriter_raw_write
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_bufferedwriter_raw_write DD 020821H
	DD	0143408H
	DD	imagerel _bufferedwriter_raw_write
	DD	imagerel _bufferedwriter_raw_write+74
	DD	imagerel $unwind$_bufferedwriter_raw_write
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_bufferedwriter_raw_write DD 040a01H
	DD	011010aH
	DD	050026003H
xdata	ENDS
;	COMDAT ??_C@_0EN@PMBDGOJF@raw?5write?$CI?$CJ?5returned?5invalid?5len@
CONST	SEGMENT
??_C@_0EN@PMBDGOJF@raw?5write?$CI?$CJ?5returned?5invalid?5len@ DB 'raw wr'
	DB	'ite() returned invalid length %zd (should have been between 0'
	DB	' and %zd)', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _bufferedwriter_raw_write
_TEXT	SEGMENT
buf$ = 48
self$ = 160
start$ = 168
len$ = 176
_bufferedwriter_raw_write PROC				; COMDAT

; 1854 : {

  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H
  0000a	48 8b f1	 mov	 rsi, rcx
  0000d	49 8b e8	 mov	 rbp, r8

; 1855 :     Py_buffer buf;
; 1856 :     PyObject *memobj, *res;
; 1857 :     Py_ssize_t n;
; 1858 :     int errnum;
; 1859 :     /* NOTE: the buffer needn't be released as its object is NULL. */
; 1860 :     if (PyBuffer_FillInfo(&buf, NULL, start, len, 1, PyBUF_CONTIG_RO) == -1)

  00010	4d 8b c8	 mov	 r9, r8
  00013	4c 8b c2	 mov	 r8, rdx
  00016	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  0001b	33 d2		 xor	 edx, edx
  0001d	c7 44 24 28 08
	00 00 00	 mov	 DWORD PTR [rsp+40], 8
  00025	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  0002d	e8 00 00 00 00	 call	 PyBuffer_FillInfo
  00032	83 f8 ff	 cmp	 eax, -1
  00035	75 0e		 jne	 SHORT $LN11@bufferedwr@2

; 1861 :         return -1;

  00037	48 83 c8 ff	 or	 rax, -1

; 1897 : }

  0003b	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00042	5e		 pop	 rsi
  00043	5d		 pop	 rbp
  00044	c3		 ret	 0
$LN11@bufferedwr@2:

; 1862 :     memobj = PyMemoryView_FromBuffer(&buf);

  00045	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  0004a	48 89 9c 24 a0
	00 00 00	 mov	 QWORD PTR [rsp+160], rbx
  00052	e8 00 00 00 00	 call	 PyMemoryView_FromBuffer
  00057	48 8b d8	 mov	 rbx, rax

; 1863 :     if (memobj == NULL)

  0005a	48 85 c0	 test	 rax, rax
  0005d	75 16		 jne	 SHORT $LN14@bufferedwr@2

; 1864 :         return -1;

  0005f	48 83 c8 ff	 or	 rax, -1
  00063	48 8b 9c 24 a0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+160]

; 1897 : }

  0006b	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00072	5e		 pop	 rsi
  00073	5d		 pop	 rbp
  00074	c3		 ret	 0
$LN14@bufferedwr@2:
  00075	48 89 bc 24 a8
	00 00 00	 mov	 QWORD PTR [rsp+168], rdi
  0007d	4c 89 a4 24 b0
	00 00 00	 mov	 QWORD PTR [rsp+176], r12
  00085	4c 89 ac 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], r13

; 1864 :         return -1;

  0008d	45 33 ed	 xor	 r13d, r13d
$LL9@bufferedwr@2:

; 1865 :     /* NOTE: PyErr_SetFromErrno() calls PyErr_CheckSignals() when EINTR
; 1866 :        occurs so we needn't do it ourselves.
; 1867 :        We then retry writing, ignoring the signal if no handler has
; 1868 :        raised (see issue #10956).
; 1869 :     */
; 1870 :     do {
; 1871 :         errno = 0;

  00090	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno

; 1872 :         res = PyObject_CallMethodObjArgs(self->raw, _PyIO_str_write, memobj, NULL);

  00096	45 33 c9	 xor	 r9d, r9d
  00099	4c 8b c3	 mov	 r8, rbx
  0009c	44 89 28	 mov	 DWORD PTR [rax], r13d
  0009f	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_write
  000a6	48 8b 4e 60	 mov	 rcx, QWORD PTR [rsi+96]
  000aa	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  000af	48 8b f8	 mov	 rdi, rax

; 1873 :         errnum = errno;

  000b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  000b8	44 8b 20	 mov	 r12d, DWORD PTR [rax]

; 1874 :     } while (res == NULL && _PyIO_trap_eintr());

  000bb	48 85 ff	 test	 rdi, rdi
  000be	75 09		 jne	 SHORT $LN6@bufferedwr@2
  000c0	e8 00 00 00 00	 call	 _PyIO_trap_eintr
  000c5	85 c0		 test	 eax, eax
  000c7	75 c7		 jne	 SHORT $LL9@bufferedwr@2
$LN6@bufferedwr@2:

; 1875 :     Py_DECREF(memobj);

  000c9	48 8b cb	 mov	 rcx, rbx
  000cc	e8 00 00 00 00	 call	 _Py_DecRef
  000d1	4c 8b ac 24 80
	00 00 00	 mov	 r13, QWORD PTR [rsp+128]

; 1876 :     if (res == NULL)

  000d9	48 85 ff	 test	 rdi, rdi

; 1877 :         return -1;

  000dc	0f 84 81 00 00
	00		 je	 $LN18@bufferedwr@2

; 1878 :     if (res == Py_None) {

  000e2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1879 :         /* Non-blocking stream would have blocked. Special return code!
; 1880 :            Being paranoid we reset errno in case it is changed by code
; 1881 :            triggered by a decref.  errno is used by _set_BlockingIOError(). */
; 1882 :         Py_DECREF(res);

  000e9	48 8b cf	 mov	 rcx, rdi
  000ec	48 3b f8	 cmp	 rdi, rax
  000ef	75 17		 jne	 SHORT $LN4@bufferedwr@2
  000f1	e8 00 00 00 00	 call	 _Py_DecRef

; 1883 :         errno = errnum;

  000f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  000fc	44 89 20	 mov	 DWORD PTR [rax], r12d

; 1884 :         return -2;

  000ff	48 c7 c0 fe ff
	ff ff		 mov	 rax, -2
  00106	eb 5f		 jmp	 SHORT $LN17@bufferedwr@2
$LN4@bufferedwr@2:

; 1885 :     }
; 1886 :     n = PyNumber_AsSsize_t(res, PyExc_ValueError);

  00108	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_ValueError
  0010f	e8 00 00 00 00	 call	 PyNumber_AsSsize_t

; 1887 :     Py_DECREF(res);

  00114	48 8b cf	 mov	 rcx, rdi
  00117	48 8b d8	 mov	 rbx, rax
  0011a	e8 00 00 00 00	 call	 _Py_DecRef

; 1888 :     if (n < 0 || n > len) {

  0011f	48 85 db	 test	 rbx, rbx
  00122	78 26		 js	 SHORT $LN2@bufferedwr@2
  00124	48 3b dd	 cmp	 rbx, rbp
  00127	7f 21		 jg	 SHORT $LN2@bufferedwr@2

; 1893 :     }
; 1894 :     if (n > 0 && self->abs_pos != -1)

  00129	48 85 db	 test	 rbx, rbx
  0012c	7e 17		 jle	 SHORT $LN1@bufferedwr@2
  0012e	48 8b 86 80 00
	00 00		 mov	 rax, QWORD PTR [rsi+128]
  00135	48 83 f8 ff	 cmp	 rax, -1
  00139	74 0a		 je	 SHORT $LN1@bufferedwr@2

; 1895 :         self->abs_pos += n;

  0013b	48 03 c3	 add	 rax, rbx
  0013e	48 89 86 80 00
	00 00		 mov	 QWORD PTR [rsi+128], rax
$LN1@bufferedwr@2:

; 1896 :     return n;

  00145	48 8b c3	 mov	 rax, rbx
  00148	eb 1d		 jmp	 SHORT $LN17@bufferedwr@2
$LN2@bufferedwr@2:

; 1889 :         PyErr_Format(PyExc_IOError,
; 1890 :                      "raw write() returned invalid length %zd "
; 1891 :                      "(should have been between 0 and %zd)", n, len);

  0014a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  00151	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EN@PMBDGOJF@raw?5write?$CI?$CJ?5returned?5invalid?5len@
  00158	4c 8b cd	 mov	 r9, rbp
  0015b	4c 8b c3	 mov	 r8, rbx
  0015e	e8 00 00 00 00	 call	 PyErr_Format
$LN18@bufferedwr@2:

; 1892 :         return -1;

  00163	48 83 c8 ff	 or	 rax, -1
$LN17@bufferedwr@2:
  00167	48 8b bc 24 a8
	00 00 00	 mov	 rdi, QWORD PTR [rsp+168]
  0016f	4c 8b a4 24 b0
	00 00 00	 mov	 r12, QWORD PTR [rsp+176]
  00177	48 8b 9c 24 a0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+160]

; 1897 : }

  0017f	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00186	5e		 pop	 rsi
  00187	5d		 pop	 rbp
  00188	c3		 ret	 0
_bufferedwriter_raw_write ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@HJILFEOG@write?5could?5not?5complete?5without@ ; `string'
EXTRN	PyErr_CheckSignals:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_bufferedwriter_flush_unlocked DD imagerel _bufferedwriter_flush_unlocked
	DD	imagerel _bufferedwriter_flush_unlocked+370
	DD	imagerel $unwind$_bufferedwriter_flush_unlocked
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_bufferedwriter_flush_unlocked DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0CK@HJILFEOG@write?5could?5not?5complete?5without@
CONST	SEGMENT
??_C@_0CK@HJILFEOG@write?5could?5not?5complete?5without@ DB 'write could '
	DB	'not complete without blocking', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\bufferedio.c
CONST	ENDS
;	COMDAT _bufferedwriter_flush_unlocked
_TEXT	SEGMENT
self$ = 64
_bufferedwriter_flush_unlocked PROC			; COMDAT

; 1903 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1904 :     Py_ssize_t written = 0;
; 1905 :     Py_off_t n, rewind;
; 1906 : 
; 1907 :     if (!VALID_WRITE_BUFFER(self) || self->write_pos == self->write_end)

  0000a	83 79 74 00	 cmp	 DWORD PTR [rcx+116], 0
  0000e	48 8b d9	 mov	 rbx, rcx
  00011	0f 84 e9 00 00
	00		 je	 $end$21909
  00017	48 8b 81 b0 00
	00 00		 mov	 rax, QWORD PTR [rcx+176]
  0001e	48 83 f8 ff	 cmp	 rax, -1
  00022	0f 84 d8 00 00
	00		 je	 $end$21909
  00028	48 8b 89 a8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+168]
  0002f	48 3b c8	 cmp	 rcx, rax
  00032	0f 84 c8 00 00
	00		 je	 $end$21909

; 1908 :         goto end;
; 1909 :     /* First, rewind */
; 1910 :     rewind = RAW_OFFSET(self) + (self->pos - self->write_pos);

  00038	48 8b 83 98 00
	00 00		 mov	 rax, QWORD PTR [rbx+152]
  0003f	48 85 c0	 test	 rax, rax
  00042	78 09		 js	 SHORT $LN14@bufferedwr@3
  00044	48 2b 83 90 00
	00 00		 sub	 rax, QWORD PTR [rbx+144]
  0004b	eb 02		 jmp	 SHORT $LN16@bufferedwr@3
$LN14@bufferedwr@3:
  0004d	33 c0		 xor	 eax, eax
$LN16@bufferedwr@3:
  0004f	48 8b bb 90 00
	00 00		 mov	 rdi, QWORD PTR [rbx+144]
  00056	48 2b f9	 sub	 rdi, rcx
  00059	48 03 f8	 add	 rdi, rax

; 1911 :     if (rewind != 0) {

  0005c	74 24		 je	 SHORT $LN21@bufferedwr@3

; 1912 :         n = _buffered_raw_seek(self, -rewind, 1);

  0005e	48 8b d7	 mov	 rdx, rdi
  00061	41 b8 01 00 00
	00		 mov	 r8d, 1
  00067	48 8b cb	 mov	 rcx, rbx
  0006a	48 f7 da	 neg	 rdx
  0006d	e8 00 00 00 00	 call	 _buffered_raw_seek

; 1913 :         if (n < 0) {

  00072	48 85 c0	 test	 rax, rax
  00075	0f 88 ea 00 00
	00		 js	 $error$21912

; 1914 :             goto error;
; 1915 :         }
; 1916 :         self->raw_pos -= rewind;

  0007b	48 29 bb 98 00
	00 00		 sub	 QWORD PTR [rbx+152], rdi
$LN21@bufferedwr@3:

; 1917 :     }
; 1918 :     while (self->write_pos < self->write_end) {

  00082	48 8b 83 b0 00
	00 00		 mov	 rax, QWORD PTR [rbx+176]
  00089	48 39 83 a8 00
	00 00		 cmp	 QWORD PTR [rbx+168], rax
  00090	7d 66		 jge	 SHORT $LN5@bufferedwr@3
$LL6@bufferedwr@3:

; 1919 :         n = _bufferedwriter_raw_write(self,
; 1920 :             self->buffer + self->write_pos,
; 1921 :             Py_SAFE_DOWNCAST(self->write_end - self->write_pos,
; 1922 :                              Py_off_t, Py_ssize_t));

  00092	48 8b 8b a8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+168]
  00099	48 8b 83 88 00
	00 00		 mov	 rax, QWORD PTR [rbx+136]
  000a0	4c 8b 83 b0 00
	00 00		 mov	 r8, QWORD PTR [rbx+176]
  000a7	48 8d 14 01	 lea	 rdx, QWORD PTR [rcx+rax]
  000ab	4c 2b c1	 sub	 r8, rcx
  000ae	48 8b cb	 mov	 rcx, rbx
  000b1	e8 00 00 00 00	 call	 _bufferedwriter_raw_write

; 1923 :         if (n == -1) {

  000b6	48 83 f8 ff	 cmp	 rax, -1
  000ba	0f 84 a5 00 00
	00		 je	 $error$21912

; 1924 :             goto error;
; 1925 :         }
; 1926 :         else if (n == -2) {

  000c0	48 83 f8 fe	 cmp	 rax, -2
  000c4	0f 84 8d 00 00
	00		 je	 $LN23@bufferedwr@3

; 1929 :             goto error;
; 1930 :         }
; 1931 :         self->write_pos += n;

  000ca	48 01 83 a8 00
	00 00		 add	 QWORD PTR [rbx+168], rax
  000d1	48 8b 83 a8 00
	00 00		 mov	 rax, QWORD PTR [rbx+168]

; 1932 :         self->raw_pos = self->write_pos;

  000d8	48 89 83 98 00
	00 00		 mov	 QWORD PTR [rbx+152], rax

; 1933 :         written += Py_SAFE_DOWNCAST(n, Py_off_t, Py_ssize_t);
; 1934 :         /* Partial writes can return successfully when interrupted by a
; 1935 :            signal (see write(2)).  We must run signal handlers before
; 1936 :            blocking another time, possibly indefinitely. */
; 1937 :         if (PyErr_CheckSignals() < 0)

  000df	e8 00 00 00 00	 call	 PyErr_CheckSignals
  000e4	85 c0		 test	 eax, eax
  000e6	78 7d		 js	 SHORT $error$21912

; 1917 :     }
; 1918 :     while (self->write_pos < self->write_end) {

  000e8	48 8b 83 b0 00
	00 00		 mov	 rax, QWORD PTR [rbx+176]
  000ef	48 39 83 a8 00
	00 00		 cmp	 QWORD PTR [rbx+168], rax
  000f6	7c 9a		 jl	 SHORT $LL6@bufferedwr@3
$LN5@bufferedwr@3:

; 1938 :             goto error;
; 1939 :     }
; 1940 : 
; 1941 :     _bufferedwriter_reset_buf(self);

  000f8	48 8b cb	 mov	 rcx, rbx
  000fb	e8 00 00 00 00	 call	 _bufferedwriter_reset_buf
$end$21909:

; 1942 : 
; 1943 : end:
; 1944 :     Py_RETURN_NONE;

  00100	e8 00 00 00 00	 call	 _Py_PXCTX
  00105	85 c0		 test	 eax, eax
  00107	75 3c		 jne	 SHORT $LN18@bufferedwr@3
  00109	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00110	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00117	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0011e	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00124	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0012c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00131	85 c0		 test	 eax, eax
  00133	75 09		 jne	 SHORT $LN17@bufferedwr@3
  00135	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0013c	74 07		 je	 SHORT $LN18@bufferedwr@3
$LN17@bufferedwr@3:
  0013e	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN18@bufferedwr@3:
  00145	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1948 : }

  0014c	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00151	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00155	5f		 pop	 rdi
  00156	c3		 ret	 0
$LN23@bufferedwr@3:

; 1927 :             _set_BlockingIOError("write could not complete without blocking",
; 1928 :                                  0);

  00157	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CK@HJILFEOG@write?5could?5not?5complete?5without@
  0015e	33 d2		 xor	 edx, edx
  00160	e8 00 00 00 00	 call	 _set_BlockingIOError
$error$21912:

; 1945 : 
; 1946 : error:
; 1947 :     return NULL;

  00165	33 c0		 xor	 eax, eax

; 1948 : }

  00167	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0016c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00170	5f		 pop	 rdi
  00171	c3		 ret	 0
_bufferedwriter_flush_unlocked ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@JHEEKBNO@bufferedwriter_write?$AA@	; `string'
PUBLIC	??_C@_0BF@PNDEOONP@write?5to?5closed?5file?$AA@	; `string'
PUBLIC	??_C@_08LJDKHDGM@y?$CK?3write?$AA@		; `string'
EXTRN	__imp_memmove:PROC
EXTRN	_PyFileIO_closed:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$bufferedwriter_write DD imagerel bufferedwriter_write
	DD	imagerel bufferedwriter_write+285
	DD	imagerel $unwind$bufferedwriter_write
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$bufferedwriter_write DD imagerel bufferedwriter_write+285
	DD	imagerel bufferedwriter_write+1239
	DD	imagerel $chain$3$bufferedwriter_write
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$bufferedwriter_write DD 041021H
	DD	0147410H
	DD	0136408H
	DD	imagerel bufferedwriter_write
	DD	imagerel bufferedwriter_write+285
	DD	imagerel $unwind$bufferedwriter_write
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferedwriter_write DD 06cb01H
	DD	015c4cbH
	DD	01254c3H
	DD	03002f209H
xdata	ENDS
;	COMDAT ??_C@_0BF@JHEEKBNO@bufferedwriter_write?$AA@
CONST	SEGMENT
??_C@_0BF@JHEEKBNO@bufferedwriter_write?$AA@ DB 'bufferedwriter_write', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PNDEOONP@write?5to?5closed?5file?$AA@
CONST	SEGMENT
??_C@_0BF@PNDEOONP@write?5to?5closed?5file?$AA@ DB 'write to closed file', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08LJDKHDGM@y?$CK?3write?$AA@
CONST	SEGMENT
??_C@_08LJDKHDGM@y?$CK?3write?$AA@ DB 'y*:write', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT bufferedwriter_write
_TEXT	SEGMENT
buf$ = 48
self$ = 144
args$ = 152
bufferedwriter_write PROC				; COMDAT

; 1952 : {

  00000	40 53		 push	 rbx
  00002	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H

; 1953 :     PyObject *res = NULL;
; 1954 :     Py_buffer buf;
; 1955 :     Py_ssize_t written, avail, remaining;
; 1956 :     Py_off_t offset;
; 1957 : 
; 1958 :     CHECK_INITIALIZED(self)

  00009	83 79 68 00	 cmp	 DWORD PTR [rcx+104], 0
  0000d	48 8b c2	 mov	 rax, rdx
  00010	48 8b d9	 mov	 rbx, rcx
  00013	7f 2b		 jg	 SHORT $LN48@bufferedwr@4
  00015	83 79 6c 00	 cmp	 DWORD PTR [rcx+108], 0
  00019	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  00027	75 07		 jne	 SHORT $LN69@bufferedwr@4
  00029	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
$LN69@bufferedwr@4:
  00030	e8 00 00 00 00	 call	 PyErr_SetString
$LN70@bufferedwr@4:
  00035	33 c0		 xor	 eax, eax

; 2098 : }

  00037	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  0003e	5b		 pop	 rbx
  0003f	c3		 ret	 0
$LN48@bufferedwr@4:

; 1959 :     if (!PyArg_ParseTuple(args, "y*:write", &buf)) {

  00040	4c 8d 44 24 30	 lea	 r8, QWORD PTR buf$[rsp]
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08LJDKHDGM@y?$CK?3write?$AA@
  0004c	48 8b c8	 mov	 rcx, rax
  0004f	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00054	85 c0		 test	 eax, eax

; 1960 :         return NULL;

  00056	74 dd		 je	 SHORT $LN70@bufferedwr@4

; 1961 :     }
; 1962 : 
; 1963 :     if (IS_CLOSED(self)) {

  00058	83 7b 7c 00	 cmp	 DWORD PTR [rbx+124], 0
  0005c	74 0b		 je	 SHORT $LN51@bufferedwr@4
  0005e	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00062	e8 00 00 00 00	 call	 _PyFileIO_closed
  00067	eb 08		 jmp	 SHORT $LN52@bufferedwr@4
$LN51@bufferedwr@4:
  00069	48 8b cb	 mov	 rcx, rbx
  0006c	e8 00 00 00 00	 call	 buffered_closed
$LN52@bufferedwr@4:
  00071	85 c0		 test	 eax, eax
  00073	74 28		 je	 SHORT $LN44@bufferedwr@4

; 1964 :         PyErr_SetString(PyExc_ValueError, "write to closed file");

  00075	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0007c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@PNDEOONP@write?5to?5closed?5file?$AA@
  00083	e8 00 00 00 00	 call	 PyErr_SetString
$LN71@bufferedwr@4:

; 1965 :         PyBuffer_Release(&buf);

  00088	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  0008d	e8 00 00 00 00	 call	 PyBuffer_Release

; 1966 :         return NULL;

  00092	33 c0		 xor	 eax, eax

; 2098 : }

  00094	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  0009b	5b		 pop	 rbx
  0009c	c3		 ret	 0
$LN44@bufferedwr@4:

; 1967 :     }
; 1968 : 
; 1969 :     if (!ENTER_BUFFERED(self)) {

  0009d	48 8b 8b b8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+184]
  000a4	33 d2		 xor	 edx, edx
  000a6	e8 00 00 00 00	 call	 PyThread_acquire_lock
  000ab	85 c0		 test	 eax, eax
  000ad	75 0c		 jne	 SHORT $LN64@bufferedwr@4
  000af	48 8b cb	 mov	 rcx, rbx
  000b2	e8 00 00 00 00	 call	 _enter_buffered_busy
  000b7	85 c0		 test	 eax, eax

; 1970 :         PyBuffer_Release(&buf);
; 1971 :         return NULL;

  000b9	74 cd		 je	 SHORT $LN71@bufferedwr@4
$LN64@bufferedwr@4:
  000bb	48 89 ac 24 90
	00 00 00	 mov	 QWORD PTR [rsp+144], rbp
  000c3	4c 89 a4 24 a8
	00 00 00	 mov	 QWORD PTR [rsp+168], r12

; 1967 :     }
; 1968 : 
; 1969 :     if (!ENTER_BUFFERED(self)) {

  000cb	e8 00 00 00 00	 call	 PyThread_get_thread_ident

; 1972 :     }
; 1973 : 
; 1974 :     /* Fast path: the data to write can be fully buffered. */
; 1975 :     if (!VALID_READ_BUFFER(self) && !VALID_WRITE_BUFFER(self)) {

  000d0	45 33 e4	 xor	 r12d, r12d
  000d3	89 83 c0 00 00
	00		 mov	 DWORD PTR [rbx+192], eax
  000d9	44 39 63 70	 cmp	 DWORD PTR [rbx+112], r12d
  000dd	74 0a		 je	 SHORT $LN40@bufferedwr@4
  000df	48 83 bb a0 00
	00 00 ff	 cmp	 QWORD PTR [rbx+160], -1
  000e7	75 1e		 jne	 SHORT $LN41@bufferedwr@4
$LN40@bufferedwr@4:
  000e9	44 39 63 74	 cmp	 DWORD PTR [rbx+116], r12d
  000ed	74 0a		 je	 SHORT $LN39@bufferedwr@4
  000ef	48 83 bb b0 00
	00 00 ff	 cmp	 QWORD PTR [rbx+176], -1
  000f7	75 0e		 jne	 SHORT $LN41@bufferedwr@4
$LN39@bufferedwr@4:

; 1976 :         self->pos = 0;

  000f9	4c 89 a3 90 00
	00 00		 mov	 QWORD PTR [rbx+144], r12

; 1977 :         self->raw_pos = 0;

  00100	4c 89 a3 98 00
	00 00		 mov	 QWORD PTR [rbx+152], r12
$LN41@bufferedwr@4:

; 1978 :     }
; 1979 :     avail = Py_SAFE_DOWNCAST(self->buffer_size - self->pos, Py_off_t, Py_ssize_t);

  00107	48 8b 8b 90 00
	00 00		 mov	 rcx, QWORD PTR [rbx+144]
  0010e	48 8b 83 c8 00
	00 00		 mov	 rax, QWORD PTR [rbx+200]

; 1980 :     if (buf.len <= avail) {

  00115	4c 8b 44 24 40	 mov	 r8, QWORD PTR buf$[rsp+16]
  0011a	48 2b c1	 sub	 rax, rcx
  0011d	48 89 b4 24 98
	00 00 00	 mov	 QWORD PTR [rsp+152], rsi
  00125	48 89 bc 24 a0
	00 00 00	 mov	 QWORD PTR [rsp+160], rdi
  0012d	4c 3b c0	 cmp	 r8, rax
  00130	0f 8f 86 00 00
	00		 jg	 $LN38@bufferedwr@4

; 1981 :         memcpy(self->buffer + self->pos, buf.buf, buf.len);

  00136	48 03 8b 88 00
	00 00		 add	 rcx, QWORD PTR [rbx+136]
  0013d	48 8b 54 24 30	 mov	 rdx, QWORD PTR buf$[rsp]
  00142	e8 00 00 00 00	 call	 memcpy

; 1982 :         if (!VALID_WRITE_BUFFER(self) || self->write_pos > self->pos) {

  00147	44 39 63 74	 cmp	 DWORD PTR [rbx+116], r12d
  0014b	74 1a		 je	 SHORT $LN36@bufferedwr@4
  0014d	48 83 bb b0 00
	00 00 ff	 cmp	 QWORD PTR [rbx+176], -1
  00155	74 10		 je	 SHORT $LN36@bufferedwr@4
  00157	48 8b 83 90 00
	00 00		 mov	 rax, QWORD PTR [rbx+144]
  0015e	48 39 83 a8 00
	00 00		 cmp	 QWORD PTR [rbx+168], rax
  00165	7e 0e		 jle	 SHORT $LN35@bufferedwr@4
$LN36@bufferedwr@4:

; 1983 :             self->write_pos = self->pos;

  00167	48 8b 83 90 00
	00 00		 mov	 rax, QWORD PTR [rbx+144]
  0016e	48 89 83 a8 00
	00 00		 mov	 QWORD PTR [rbx+168], rax
$LN35@bufferedwr@4:

; 1984 :         }
; 1985 :         ADJUST_POSITION(self, self->pos + buf.len);

  00175	48 8b 74 24 40	 mov	 rsi, QWORD PTR buf$[rsp+16]
  0017a	48 03 c6	 add	 rax, rsi
  0017d	48 89 83 90 00
	00 00		 mov	 QWORD PTR [rbx+144], rax
  00184	44 39 63 70	 cmp	 DWORD PTR [rbx+112], r12d
  00188	74 19		 je	 SHORT $LN34@bufferedwr@4
  0018a	48 8b 8b a0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+160]
  00191	48 83 f9 ff	 cmp	 rcx, -1
  00195	74 0c		 je	 SHORT $LN34@bufferedwr@4
  00197	48 3b c8	 cmp	 rcx, rax
  0019a	7d 07		 jge	 SHORT $LN34@bufferedwr@4
  0019c	48 89 83 a0 00
	00 00		 mov	 QWORD PTR [rbx+160], rax
$LN34@bufferedwr@4:

; 1986 :         if (self->pos > self->write_end)

  001a3	48 3b 83 b0 00
	00 00		 cmp	 rax, QWORD PTR [rbx+176]
  001aa	0f 8e d3 02 00
	00		 jle	 $end$21963

; 1987 :             self->write_end = self->pos;

  001b0	48 89 83 b0 00
	00 00		 mov	 QWORD PTR [rbx+176], rax

; 1988 :         written = buf.len;
; 1989 :         goto end;

  001b7	e9 c7 02 00 00	 jmp	 $end$21963
$LN38@bufferedwr@4:

; 1990 :     }
; 1991 : 
; 1992 :     /* First write the current buffer */
; 1993 :     res = _bufferedwriter_flush_unlocked(self);

  001bc	48 8b cb	 mov	 rcx, rbx
  001bf	e8 00 00 00 00	 call	 _bufferedwriter_flush_unlocked
  001c4	48 8b e8	 mov	 rbp, rax

; 1994 :     if (res == NULL) {

  001c7	48 85 c0	 test	 rax, rax
  001ca	0f 85 e9 00 00
	00		 jne	 $LN63@bufferedwr@4

; 1995 :         Py_ssize_t *w = _buffered_check_blocking_error();

  001d0	e8 00 00 00 00	 call	 _buffered_check_blocking_error

; 1996 :         if (w == NULL)

  001d5	48 85 c0	 test	 rax, rax
  001d8	0f 84 b0 02 00
	00		 je	 $error$21969

; 1997 :             goto error;
; 1998 :         if (self->readable)

  001de	44 39 63 70	 cmp	 DWORD PTR [rbx+112], r12d
  001e2	74 08		 je	 SHORT $LN28@bufferedwr@4

; 1999 :             _bufferedreader_reset_buf(self);

  001e4	48 8b cb	 mov	 rcx, rbx
  001e7	e8 00 00 00 00	 call	 _bufferedreader_reset_buf
$LN28@bufferedwr@4:

; 2000 :         /* Make some place by shifting the buffer. */
; 2001 :         assert(VALID_WRITE_BUFFER(self));
; 2002 :         memmove(self->buffer, self->buffer + self->write_pos,
; 2003 :                 Py_SAFE_DOWNCAST(self->write_end - self->write_pos,
; 2004 :                                  Py_off_t, Py_ssize_t));

  001ec	48 8b 83 a8 00
	00 00		 mov	 rax, QWORD PTR [rbx+168]
  001f3	48 8b 8b 88 00
	00 00		 mov	 rcx, QWORD PTR [rbx+136]
  001fa	4c 8b 83 b0 00
	00 00		 mov	 r8, QWORD PTR [rbx+176]
  00201	48 8d 14 08	 lea	 rdx, QWORD PTR [rax+rcx]
  00205	4c 2b c0	 sub	 r8, rax
  00208	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memmove

; 2005 :         self->write_end -= self->write_pos;

  0020e	4c 8b 9b a8 00
	00 00		 mov	 r11, QWORD PTR [rbx+168]

; 2006 :         self->raw_pos -= self->write_pos;
; 2007 :         self->pos -= self->write_pos;
; 2008 :         self->write_pos = 0;
; 2009 :         avail = Py_SAFE_DOWNCAST(self->buffer_size - self->write_end,
; 2010 :                                  Py_off_t, Py_ssize_t);

  00215	48 8b bb c8 00
	00 00		 mov	 rdi, QWORD PTR [rbx+200]
  0021c	4c 29 9b b0 00
	00 00		 sub	 QWORD PTR [rbx+176], r11
  00223	48 8b 8b b0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+176]
  0022a	4c 29 9b 98 00
	00 00		 sub	 QWORD PTR [rbx+152], r11
  00231	4c 29 9b 90 00
	00 00		 sub	 QWORD PTR [rbx+144], r11
  00238	48 2b f9	 sub	 rdi, rcx
  0023b	4c 89 a3 a8 00
	00 00		 mov	 QWORD PTR [rbx+168], r12

; 2011 :         if (buf.len <= avail) {

  00242	48 39 7c 24 40	 cmp	 QWORD PTR buf$[rsp+16], rdi
  00247	7f 3a		 jg	 SHORT $LN27@bufferedwr@4

; 2012 :             /* Everything can be buffered */
; 2013 :             PyErr_Clear();

  00249	e8 00 00 00 00	 call	 PyErr_Clear

; 2014 :             memcpy(self->buffer + self->write_end, buf.buf, buf.len);

  0024e	48 8b 8b 88 00
	00 00		 mov	 rcx, QWORD PTR [rbx+136]
  00255	4c 8b 44 24 40	 mov	 r8, QWORD PTR buf$[rsp+16]
  0025a	48 03 8b b0 00
	00 00		 add	 rcx, QWORD PTR [rbx+176]
  00261	48 8b 54 24 30	 mov	 rdx, QWORD PTR buf$[rsp]
  00266	e8 00 00 00 00	 call	 memcpy

; 2015 :             self->write_end += buf.len;

  0026b	48 8b 74 24 40	 mov	 rsi, QWORD PTR buf$[rsp+16]
  00270	48 01 b3 b0 00
	00 00		 add	 QWORD PTR [rbx+176], rsi

; 2016 :             self->pos += buf.len;

  00277	48 01 b3 90 00
	00 00		 add	 QWORD PTR [rbx+144], rsi

; 2017 :             written = buf.len;
; 2018 :             goto end;

  0027e	e9 00 02 00 00	 jmp	 $end$21963
$LN27@bufferedwr@4:

; 2019 :         }
; 2020 :         /* Buffer as much as possible. */
; 2021 :         memcpy(self->buffer + self->write_end, buf.buf, avail);

  00283	48 03 8b 88 00
	00 00		 add	 rcx, QWORD PTR [rbx+136]
  0028a	48 8b 54 24 30	 mov	 rdx, QWORD PTR buf$[rsp]
  0028f	4c 8b c7	 mov	 r8, rdi
  00292	e8 00 00 00 00	 call	 memcpy

; 2022 :         self->write_end += avail;

  00297	48 01 bb b0 00
	00 00		 add	 QWORD PTR [rbx+176], rdi

; 2023 :         self->pos += avail;

  0029e	48 01 bb 90 00
	00 00		 add	 QWORD PTR [rbx+144], rdi

; 2024 :         /* XXX Modifying the existing exception e using the pointer w
; 2025 :            will change e.characters_written but not e.args[2].
; 2026 :            Therefore we just replace with a new error. */
; 2027 :         _set_BlockingIOError("write could not complete without blocking",
; 2028 :                              avail);

  002a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CK@HJILFEOG@write?5could?5not?5complete?5without@
  002ac	48 8b d7	 mov	 rdx, rdi
  002af	e8 00 00 00 00	 call	 _set_BlockingIOError

; 2029 :         goto error;

  002b4	e9 d5 01 00 00	 jmp	 $error$21969
$LN63@bufferedwr@4:

; 2030 :     }
; 2031 :     Py_CLEAR(res);

  002b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  002c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@JHEEKBNO@bufferedwriter_write?$AA@
  002c7	4c 8b c8	 mov	 r9, rax
  002ca	41 b8 ef 07 00
	00		 mov	 r8d, 2031		; 000007efH
  002d0	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002d8	e8 00 00 00 00	 call	 _PyParallel_Guard
  002dd	85 c0		 test	 eax, eax
  002df	75 0b		 jne	 SHORT $LN25@bufferedwr@4
  002e1	48 8b cd	 mov	 rcx, rbp
  002e4	49 8b ec	 mov	 rbp, r12
  002e7	e8 00 00 00 00	 call	 _Py_DecRef
$LN25@bufferedwr@4:

; 2032 : 
; 2033 :     /* Adjust the raw stream position if it is away from the logical stream
; 2034 :        position. This happens if the read buffer has been filled but not
; 2035 :        modified (and therefore _bufferedwriter_flush_unlocked() didn't rewind
; 2036 :        the raw stream by itself).
; 2037 :        Fixes issue #6629.
; 2038 :     */
; 2039 :     offset = RAW_OFFSET(self);

  002ec	44 39 63 70	 cmp	 DWORD PTR [rbx+112], r12d
  002f0	74 0a		 je	 SHORT $LN55@bufferedwr@4
  002f2	48 83 bb a0 00
	00 00 ff	 cmp	 QWORD PTR [rbx+160], -1
  002fa	75 10		 jne	 SHORT $LN57@bufferedwr@4
$LN55@bufferedwr@4:
  002fc	44 39 63 74	 cmp	 DWORD PTR [rbx+116], r12d
  00300	74 43		 je	 SHORT $LN22@bufferedwr@4
  00302	48 83 bb b0 00
	00 00 ff	 cmp	 QWORD PTR [rbx+176], -1
  0030a	74 39		 je	 SHORT $LN22@bufferedwr@4
$LN57@bufferedwr@4:
  0030c	48 8b bb 98 00
	00 00		 mov	 rdi, QWORD PTR [rbx+152]
  00313	48 85 ff	 test	 rdi, rdi
  00316	78 2d		 js	 SHORT $LN22@bufferedwr@4
  00318	48 2b bb 90 00
	00 00		 sub	 rdi, QWORD PTR [rbx+144]

; 2040 :     if (offset != 0) {

  0031f	74 24		 je	 SHORT $LN22@bufferedwr@4

; 2041 :         if (_buffered_raw_seek(self, -offset, 1) < 0)

  00321	48 8b d7	 mov	 rdx, rdi
  00324	41 b8 01 00 00
	00		 mov	 r8d, 1
  0032a	48 8b cb	 mov	 rcx, rbx
  0032d	48 f7 da	 neg	 rdx
  00330	e8 00 00 00 00	 call	 _buffered_raw_seek
  00335	48 85 c0	 test	 rax, rax
  00338	0f 88 50 01 00
	00		 js	 $error$21969

; 2042 :             goto error;
; 2043 :         self->raw_pos -= offset;

  0033e	48 29 bb 98 00
	00 00		 sub	 QWORD PTR [rbx+152], rdi
$LN22@bufferedwr@4:

; 2044 :     }
; 2045 : 
; 2046 :     /* Then write buf itself. At this point the buffer has been emptied. */
; 2047 :     remaining = buf.len;

  00345	4c 8b 44 24 40	 mov	 r8, QWORD PTR buf$[rsp+16]

; 2048 :     written = 0;

  0034a	49 8b f4	 mov	 rsi, r12
  0034d	49 8b f8	 mov	 rdi, r8

; 2049 :     while (remaining > self->buffer_size) {

  00350	4c 3b 83 c8 00
	00 00		 cmp	 r8, QWORD PTR [rbx+200]
  00357	0f 8e bd 00 00
	00		 jle	 $LN19@bufferedwr@4
  0035d	0f 1f 00	 npad	 3
$LL20@bufferedwr@4:

; 2050 :         Py_ssize_t n = _bufferedwriter_raw_write(
; 2051 :             self, (char *) buf.buf + written, buf.len - written);

  00360	48 8b 44 24 30	 mov	 rax, QWORD PTR buf$[rsp]
  00365	4c 2b c6	 sub	 r8, rsi
  00368	48 8b cb	 mov	 rcx, rbx
  0036b	48 8d 14 06	 lea	 rdx, QWORD PTR [rsi+rax]
  0036f	e8 00 00 00 00	 call	 _bufferedwriter_raw_write

; 2052 :         if (n == -1) {

  00374	48 83 f8 ff	 cmp	 rax, -1
  00378	0f 84 10 01 00
	00		 je	 $error$21969

; 2053 :             goto error;
; 2054 :         } else if (n == -2) {

  0037e	48 83 f8 fe	 cmp	 rax, -2
  00382	74 23		 je	 SHORT $LN61@bufferedwr@4

; 2069 :             break;
; 2070 :         }
; 2071 :         written += n;

  00384	48 03 f0	 add	 rsi, rax

; 2072 :         remaining -= n;

  00387	48 2b f8	 sub	 rdi, rax

; 2073 :         /* Partial writes can return successfully when interrupted by a
; 2074 :            signal (see write(2)).  We must run signal handlers before
; 2075 :            blocking another time, possibly indefinitely. */
; 2076 :         if (PyErr_CheckSignals() < 0)

  0038a	e8 00 00 00 00	 call	 PyErr_CheckSignals
  0038f	85 c0		 test	 eax, eax
  00391	0f 88 f7 00 00
	00		 js	 $error$21969

; 2049 :     while (remaining > self->buffer_size) {

  00397	48 3b bb c8 00
	00 00		 cmp	 rdi, QWORD PTR [rbx+200]
  0039e	7e 7a		 jle	 SHORT $LN19@bufferedwr@4
  003a0	4c 8b 44 24 40	 mov	 r8, QWORD PTR buf$[rsp+16]
  003a5	eb b9		 jmp	 SHORT $LL20@bufferedwr@4
$LN61@bufferedwr@4:

; 2055 :             /* Write failed because raw file is non-blocking */
; 2056 :             if (remaining > self->buffer_size) {

  003a7	4c 8b 83 c8 00
	00 00		 mov	 r8, QWORD PTR [rbx+200]
  003ae	49 3b f8	 cmp	 rdi, r8
  003b1	7e 62		 jle	 SHORT $LN15@bufferedwr@4

; 2057 :                 /* Can't buffer everything, still buffer as much as possible */
; 2058 :                 memcpy(self->buffer,
; 2059 :                        (char *) buf.buf + written, self->buffer_size);

  003b3	48 8b 44 24 30	 mov	 rax, QWORD PTR buf$[rsp]
  003b8	48 8b 8b 88 00
	00 00		 mov	 rcx, QWORD PTR [rbx+136]
  003bf	48 8d 14 06	 lea	 rdx, QWORD PTR [rsi+rax]
  003c3	e8 00 00 00 00	 call	 memcpy

; 2060 :                 self->raw_pos = 0;
; 2061 :                 ADJUST_POSITION(self, self->buffer_size);

  003c8	48 8b 83 c8 00
	00 00		 mov	 rax, QWORD PTR [rbx+200]
  003cf	4c 89 a3 98 00
	00 00		 mov	 QWORD PTR [rbx+152], r12
  003d6	48 89 83 90 00
	00 00		 mov	 QWORD PTR [rbx+144], rax
  003dd	44 39 63 70	 cmp	 DWORD PTR [rbx+112], r12d
  003e1	74 19		 je	 SHORT $LN13@bufferedwr@4
  003e3	48 8b 8b a0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+160]
  003ea	48 83 f9 ff	 cmp	 rcx, -1
  003ee	74 0c		 je	 SHORT $LN13@bufferedwr@4
  003f0	48 3b c8	 cmp	 rcx, rax
  003f3	7d 07		 jge	 SHORT $LN13@bufferedwr@4
  003f5	48 89 83 a0 00
	00 00		 mov	 QWORD PTR [rbx+160], rax
$LN13@bufferedwr@4:

; 2062 :                 self->write_end = self->buffer_size;
; 2063 :                 written += self->buffer_size;

  003fc	48 8d 14 30	 lea	 rdx, QWORD PTR [rax+rsi]

; 2064 :                 _set_BlockingIOError("write could not complete without "
; 2065 :                                      "blocking", written);

  00400	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CK@HJILFEOG@write?5could?5not?5complete?5without@
  00407	48 89 83 b0 00
	00 00		 mov	 QWORD PTR [rbx+176], rax
  0040e	e8 00 00 00 00	 call	 _set_BlockingIOError

; 2066 :                 goto error;

  00413	eb 79		 jmp	 SHORT $error$21969
$LN15@bufferedwr@4:

; 2067 :             }
; 2068 :             PyErr_Clear();

  00415	e8 00 00 00 00	 call	 PyErr_Clear
$LN19@bufferedwr@4:

; 2077 :             goto error;
; 2078 :     }
; 2079 :     if (self->readable)

  0041a	44 39 63 70	 cmp	 DWORD PTR [rbx+112], r12d
  0041e	74 08		 je	 SHORT $LN9@bufferedwr@4

; 2080 :         _bufferedreader_reset_buf(self);

  00420	48 8b cb	 mov	 rcx, rbx
  00423	e8 00 00 00 00	 call	 _bufferedreader_reset_buf
$LN9@bufferedwr@4:

; 2081 :     if (remaining > 0) {

  00428	48 85 ff	 test	 rdi, rdi
  0042b	7e 1b		 jle	 SHORT $LN8@bufferedwr@4

; 2082 :         memcpy(self->buffer, (char *) buf.buf + written, remaining);

  0042d	48 8b 44 24 30	 mov	 rax, QWORD PTR buf$[rsp]
  00432	48 8b 8b 88 00
	00 00		 mov	 rcx, QWORD PTR [rbx+136]
  00439	4c 8b c7	 mov	 r8, rdi
  0043c	48 8d 14 06	 lea	 rdx, QWORD PTR [rsi+rax]
  00440	e8 00 00 00 00	 call	 memcpy

; 2083 :         written += remaining;

  00445	48 03 f7	 add	 rsi, rdi
$LN8@bufferedwr@4:

; 2084 :     }
; 2085 :     self->write_pos = 0;

  00448	4c 89 a3 a8 00
	00 00		 mov	 QWORD PTR [rbx+168], r12

; 2086 :     /* TODO: sanity check (remaining >= 0) */
; 2087 :     self->write_end = remaining;

  0044f	48 89 bb b0 00
	00 00		 mov	 QWORD PTR [rbx+176], rdi

; 2088 :     ADJUST_POSITION(self, remaining);

  00456	48 89 bb 90 00
	00 00		 mov	 QWORD PTR [rbx+144], rdi
  0045d	44 39 63 70	 cmp	 DWORD PTR [rbx+112], r12d
  00461	74 19		 je	 SHORT $LN6@bufferedwr@4
  00463	48 8b 83 a0 00
	00 00		 mov	 rax, QWORD PTR [rbx+160]
  0046a	48 83 f8 ff	 cmp	 rax, -1
  0046e	74 0c		 je	 SHORT $LN6@bufferedwr@4
  00470	48 3b c7	 cmp	 rax, rdi
  00473	7d 07		 jge	 SHORT $LN6@bufferedwr@4
  00475	48 89 bb a0 00
	00 00		 mov	 QWORD PTR [rbx+160], rdi
$LN6@bufferedwr@4:

; 2089 :     self->raw_pos = 0;

  0047c	4c 89 a3 98 00
	00 00		 mov	 QWORD PTR [rbx+152], r12
$end$21963:

; 2090 : 
; 2091 : end:
; 2092 :     res = PyLong_FromSsize_t(written);

  00483	48 8b ce	 mov	 rcx, rsi
  00486	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  0048b	48 8b e8	 mov	 rbp, rax
$error$21969:

; 2093 : 
; 2094 : error:
; 2095 :     LEAVE_BUFFERED(self)

  0048e	48 8b 8b b8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+184]
  00495	44 89 a3 c0 00
	00 00		 mov	 DWORD PTR [rbx+192], r12d
  0049c	e8 00 00 00 00	 call	 PyThread_release_lock

; 2096 :     PyBuffer_Release(&buf);

  004a1	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  004a6	e8 00 00 00 00	 call	 PyBuffer_Release
  004ab	4c 8b a4 24 a8
	00 00 00	 mov	 r12, QWORD PTR [rsp+168]
  004b3	48 8b bc 24 a0
	00 00 00	 mov	 rdi, QWORD PTR [rsp+160]
  004bb	48 8b b4 24 98
	00 00 00	 mov	 rsi, QWORD PTR [rsp+152]

; 2097 :     return res;

  004c3	48 8b c5	 mov	 rax, rbp
  004c6	48 8b ac 24 90
	00 00 00	 mov	 rbp, QWORD PTR [rsp+144]

; 2098 : }

  004ce	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  004d5	5b		 pop	 rbx
  004d6	c3		 ret	 0
bufferedwriter_write ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@ONAIGBBJ@bufferedrwpair_init?$AA@	; `string'
PUBLIC	??_C@_02IAAGKKDJ@On?$AA@			; `string'
PUBLIC	??_C@_0BE@OFMENJML@OO?$HMn?3BufferedRWPair?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$bufferedrwpair_init DD imagerel bufferedrwpair_init
	DD	imagerel bufferedrwpair_init+272
	DD	imagerel $unwind$bufferedrwpair_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferedrwpair_init DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT ??_C@_0BE@ONAIGBBJ@bufferedrwpair_init?$AA@
CONST	SEGMENT
??_C@_0BE@ONAIGBBJ@bufferedrwpair_init?$AA@ DB 'bufferedrwpair_init', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02IAAGKKDJ@On?$AA@
CONST	SEGMENT
??_C@_02IAAGKKDJ@On?$AA@ DB 'On', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OFMENJML@OO?$HMn?3BufferedRWPair?$AA@
CONST	SEGMENT
??_C@_0BE@OFMENJML@OO?$HMn?3BufferedRWPair?$AA@ DB 'OO|n:BufferedRWPair', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT bufferedrwpair_init
_TEXT	SEGMENT
reader$ = 48
writer$ = 56
self$ = 80
args$ = 88
kwds$ = 96
buffer_size$ = 104
bufferedrwpair_init PROC				; COMDAT

; 2208 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00006	48 8b d9	 mov	 rbx, rcx
  00009	48 8b c2	 mov	 rax, rdx

; 2209 :     PyObject *reader, *writer;
; 2210 :     Py_ssize_t buffer_size = DEFAULT_BUFFER_SIZE;
; 2211 : 
; 2212 :     if (!PyArg_ParseTuple(args, "OO|n:BufferedRWPair", &reader, &writer,
; 2213 :                           &buffer_size)) {

  0000c	48 8d 4c 24 68	 lea	 rcx, QWORD PTR buffer_size$[rsp]
  00011	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00016	4c 8d 4c 24 38	 lea	 r9, QWORD PTR writer$[rsp]
  0001b	4c 8d 44 24 30	 lea	 r8, QWORD PTR reader$[rsp]
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@OFMENJML@OO?$HMn?3BufferedRWPair?$AA@
  00027	48 8b c8	 mov	 rcx, rax
  0002a	48 c7 44 24 68
	00 20 00 00	 mov	 QWORD PTR buffer_size$[rsp], 8192 ; 00002000H
  00033	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00038	85 c0		 test	 eax, eax

; 2214 :         return -1;

  0003a	0f 84 bf 00 00
	00		 je	 $LN3@bufferedrw

; 2215 :     }
; 2216 : 
; 2217 :     if (_PyIOBase_check_readable(reader, Py_True) == NULL)

  00040	48 8b 4c 24 30	 mov	 rcx, QWORD PTR reader$[rsp]
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_TrueStruct
  0004c	e8 00 00 00 00	 call	 _PyIOBase_check_readable
  00051	48 85 c0	 test	 rax, rax

; 2218 :         return -1;

  00054	0f 84 a5 00 00
	00		 je	 $LN3@bufferedrw

; 2219 :     if (_PyIOBase_check_writable(writer, Py_True) == NULL)

  0005a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR writer$[rsp]
  0005f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_TrueStruct
  00066	e8 00 00 00 00	 call	 _PyIOBase_check_writable
  0006b	48 85 c0	 test	 rax, rax

; 2220 :         return -1;

  0006e	0f 84 8b 00 00
	00		 je	 $LN3@bufferedrw

; 2221 : 
; 2222 :     self->reader = (buffered *) PyObject_CallFunction(
; 2223 :             (PyObject *) &PyBufferedReader_Type, "On", reader, buffer_size);

  00074	4c 8b 4c 24 68	 mov	 r9, QWORD PTR buffer_size$[rsp]
  00079	4c 8b 44 24 30	 mov	 r8, QWORD PTR reader$[rsp]
  0007e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02IAAGKKDJ@On?$AA@
  00085	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBufferedReader_Type
  0008c	e8 00 00 00 00	 call	 _PyObject_CallFunction_SizeT
  00091	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax

; 2224 :     if (self->reader == NULL)

  00095	48 85 c0	 test	 rax, rax

; 2225 :         return -1;

  00098	74 65		 je	 SHORT $LN3@bufferedrw

; 2226 : 
; 2227 :     self->writer = (buffered *) PyObject_CallFunction(
; 2228 :             (PyObject *) &PyBufferedWriter_Type, "On", writer, buffer_size);

  0009a	4c 8b 4c 24 68	 mov	 r9, QWORD PTR buffer_size$[rsp]
  0009f	4c 8b 44 24 38	 mov	 r8, QWORD PTR writer$[rsp]
  000a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02IAAGKKDJ@On?$AA@
  000ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBufferedWriter_Type
  000b2	e8 00 00 00 00	 call	 _PyObject_CallFunction_SizeT
  000b7	48 89 43 68	 mov	 QWORD PTR [rbx+104], rax

; 2229 :     if (self->writer == NULL) {

  000bb	48 85 c0	 test	 rax, rax
  000be	75 48		 jne	 SHORT $LN5@bufferedrw

; 2230 :         Py_CLEAR(self->reader);

  000c0	4c 8b 4b 60	 mov	 r9, QWORD PTR [rbx+96]
  000c4	4d 85 c9	 test	 r9, r9
  000c7	74 36		 je	 SHORT $LN3@bufferedrw
  000c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  000d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@ONAIGBBJ@bufferedrwpair_init?$AA@
  000d7	41 b8 b6 08 00
	00		 mov	 r8d, 2230		; 000008b6H
  000dd	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000e5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ea	85 c0		 test	 eax, eax
  000ec	75 11		 jne	 SHORT $LN3@bufferedrw
  000ee	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  000f2	48 c7 43 60 00
	00 00 00	 mov	 QWORD PTR [rbx+96], 0
  000fa	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@bufferedrw:

; 2231 :         return -1;

  000ff	83 c8 ff	 or	 eax, -1

; 2235 : }

  00102	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00106	5b		 pop	 rbx
  00107	c3		 ret	 0
$LN5@bufferedrw:

; 2232 :     }
; 2233 : 
; 2234 :     return 0;

  00108	33 c0		 xor	 eax, eax

; 2235 : }

  0010a	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0010e	5b		 pop	 rbx
  0010f	c3		 ret	 0
bufferedrwpair_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@KEADBKCA@bufferedrwpair_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$bufferedrwpair_traverse DD imagerel bufferedrwpair_traverse
	DD	imagerel bufferedrwpair_traverse+97
	DD	imagerel $unwind$bufferedrwpair_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferedrwpair_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BI@KEADBKCA@bufferedrwpair_traverse?$AA@
CONST	SEGMENT
??_C@_0BI@KEADBKCA@bufferedrwpair_traverse?$AA@ DB 'bufferedrwpair_traver'
	DB	'se', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT bufferedrwpair_traverse
_TEXT	SEGMENT
self$ = 48
visit$ = 56
arg$ = 64
bufferedrwpair_traverse PROC				; COMDAT

; 2239 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 2240 :     Py_VISIT(self->dict);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN3@bufferedrw@2
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@KEADBKCA@bufferedrwpair_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 c0 08 00
	00		 mov	 r8d, 2240		; 000008c0H
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@bufferedrw@2:
  0003d	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN5@bufferedrw@2
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 02		 jne	 SHORT $LN7@bufferedrw@2
$LN5@bufferedrw@2:

; 2241 :     return 0;

  0004f	33 c0		 xor	 eax, eax
$LN7@bufferedrw@2:

; 2242 : }

  00051	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00056	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0005b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005f	5f		 pop	 rdi
  00060	c3		 ret	 0
bufferedrwpair_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@PCOPBFPA@bufferedrwpair_clear?$AA@	; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$bufferedrwpair_clear DD imagerel bufferedrwpair_clear
	DD	imagerel bufferedrwpair_clear+541
	DD	imagerel $unwind$bufferedrwpair_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferedrwpair_clear DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0BF@PCOPBFPA@bufferedrwpair_clear?$AA@
CONST	SEGMENT
??_C@_0BF@PCOPBFPA@bufferedrwpair_clear?$AA@ DB 'bufferedrwpair_clear', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\bufferedio.c
CONST	ENDS
;	COMDAT bufferedrwpair_clear
_TEXT	SEGMENT
self$ = 64
bufferedrwpair_clear PROC				; COMDAT

; 2246 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 2247 :     Py_CLEAR(self->reader);

  0000a	4c 8b 49 60	 mov	 r9, QWORD PTR [rcx+96]
  0000e	48 8b f9	 mov	 rdi, rcx
  00011	4d 85 c9	 test	 r9, r9
  00014	0f 84 96 00 00
	00		 je	 $LN11@bufferedrw@3
  0001a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@PCOPBFPA@bufferedrwpair_clear?$AA@
  00028	41 b8 c7 08 00
	00		 mov	 r8d, 2247		; 000008c7H
  0002e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00036	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003b	85 c0		 test	 eax, eax
  0003d	75 71		 jne	 SHORT $LN11@bufferedrw@3
  0003f	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  00043	48 c7 47 60 00
	00 00 00	 mov	 QWORD PTR [rdi+96], 0
  0004b	e8 00 00 00 00	 call	 _Py_PXCTX
  00050	85 c0		 test	 eax, eax
  00052	75 5c		 jne	 SHORT $LN11@bufferedrw@3
  00054	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00058	a8 20		 test	 al, 32			; 00000020H
  0005a	75 4c		 jne	 SHORT $LN19@bufferedrw@3
  0005c	84 c0		 test	 al, al
  0005e	78 48		 js	 SHORT $LN19@bufferedrw@3
  00060	a8 02		 test	 al, 2
  00062	75 4c		 jne	 SHORT $LN11@bufferedrw@3
  00064	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00068	75 46		 jne	 SHORT $LN11@bufferedrw@3
  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00078	4c 8b cb	 mov	 r9, rbx
  0007b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00081	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00089	e8 00 00 00 00	 call	 _PyParallel_Guard
  0008e	48 8b cb	 mov	 rcx, rbx
  00091	85 c0		 test	 eax, eax
  00093	74 07		 je	 SHORT $LN24@bufferedrw@3
  00095	e8 00 00 00 00	 call	 _Px_Dealloc
  0009a	eb 14		 jmp	 SHORT $LN11@bufferedrw@3
$LN24@bufferedrw@3:
  0009c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000a0	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000a6	eb 08		 jmp	 SHORT $LN11@bufferedrw@3
$LN19@bufferedrw@3:
  000a8	48 8b cb	 mov	 rcx, rbx
  000ab	e8 00 00 00 00	 call	 Px_DecRef
$LN11@bufferedrw@3:

; 2248 :     Py_CLEAR(self->writer);

  000b0	4c 8b 4f 68	 mov	 r9, QWORD PTR [rdi+104]
  000b4	4d 85 c9	 test	 r9, r9
  000b7	0f 84 96 00 00
	00		 je	 $LN7@bufferedrw@3
  000bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  000c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@PCOPBFPA@bufferedrwpair_clear?$AA@
  000cb	41 b8 c8 08 00
	00		 mov	 r8d, 2248		; 000008c8H
  000d1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d9	e8 00 00 00 00	 call	 _PyParallel_Guard
  000de	85 c0		 test	 eax, eax
  000e0	75 71		 jne	 SHORT $LN7@bufferedrw@3
  000e2	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  000e6	48 c7 47 68 00
	00 00 00	 mov	 QWORD PTR [rdi+104], 0
  000ee	e8 00 00 00 00	 call	 _Py_PXCTX
  000f3	85 c0		 test	 eax, eax
  000f5	75 5c		 jne	 SHORT $LN7@bufferedrw@3
  000f7	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000fb	a8 20		 test	 al, 32			; 00000020H
  000fd	75 4c		 jne	 SHORT $LN30@bufferedrw@3
  000ff	84 c0		 test	 al, al
  00101	78 48		 js	 SHORT $LN30@bufferedrw@3
  00103	a8 02		 test	 al, 2
  00105	75 4c		 jne	 SHORT $LN7@bufferedrw@3
  00107	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0010b	75 46		 jne	 SHORT $LN7@bufferedrw@3
  0010d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00114	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0011b	4c 8b cb	 mov	 r9, rbx
  0011e	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00124	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0012c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00131	48 8b cb	 mov	 rcx, rbx
  00134	85 c0		 test	 eax, eax
  00136	74 07		 je	 SHORT $LN35@bufferedrw@3
  00138	e8 00 00 00 00	 call	 _Px_Dealloc
  0013d	eb 14		 jmp	 SHORT $LN7@bufferedrw@3
$LN35@bufferedrw@3:
  0013f	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00143	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00149	eb 08		 jmp	 SHORT $LN7@bufferedrw@3
$LN30@bufferedrw@3:
  0014b	48 8b cb	 mov	 rcx, rbx
  0014e	e8 00 00 00 00	 call	 Px_DecRef
$LN7@bufferedrw@3:

; 2249 :     Py_CLEAR(self->dict);

  00153	4c 8b 4f 70	 mov	 r9, QWORD PTR [rdi+112]
  00157	4d 85 c9	 test	 r9, r9
  0015a	0f 84 b0 00 00
	00		 je	 $LN50@bufferedrw@3
  00160	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  00167	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@PCOPBFPA@bufferedrwpair_clear?$AA@
  0016e	41 b8 c9 08 00
	00		 mov	 r8d, 2249		; 000008c9H
  00174	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0017c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00181	85 c0		 test	 eax, eax
  00183	0f 85 87 00 00
	00		 jne	 $LN50@bufferedrw@3
  00189	48 8b 5f 70	 mov	 rbx, QWORD PTR [rdi+112]
  0018d	48 c7 47 70 00
	00 00 00	 mov	 QWORD PTR [rdi+112], 0
  00195	e8 00 00 00 00	 call	 _Py_PXCTX
  0019a	85 c0		 test	 eax, eax
  0019c	75 72		 jne	 SHORT $LN50@bufferedrw@3
  0019e	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  001a2	a8 20		 test	 al, 32			; 00000020H
  001a4	75 62		 jne	 SHORT $LN41@bufferedrw@3
  001a6	84 c0		 test	 al, al
  001a8	78 5e		 js	 SHORT $LN41@bufferedrw@3
  001aa	a8 02		 test	 al, 2
  001ac	75 62		 jne	 SHORT $LN50@bufferedrw@3
  001ae	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  001b2	75 5c		 jne	 SHORT $LN50@bufferedrw@3
  001b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  001c2	4c 8b cb	 mov	 r9, rbx
  001c5	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001cb	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001d3	e8 00 00 00 00	 call	 _PyParallel_Guard
  001d8	48 8b cb	 mov	 rcx, rbx
  001db	85 c0		 test	 eax, eax
  001dd	74 12		 je	 SHORT $LN46@bufferedrw@3
  001df	e8 00 00 00 00	 call	 _Px_Dealloc

; 2250 :     return 0;

  001e4	33 c0		 xor	 eax, eax

; 2251 : }

  001e6	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  001eb	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001ef	5f		 pop	 rdi
  001f0	c3		 ret	 0

; 2249 :     Py_CLEAR(self->dict);

$LN46@bufferedrw@3:
  001f1	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001f5	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 2250 :     return 0;

  001fb	33 c0		 xor	 eax, eax

; 2251 : }

  001fd	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00202	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00206	5f		 pop	 rdi
  00207	c3		 ret	 0

; 2249 :     Py_CLEAR(self->dict);

$LN41@bufferedrw@3:
  00208	48 8b cb	 mov	 rcx, rbx
  0020b	e8 00 00 00 00	 call	 Px_DecRef
$LN50@bufferedrw@3:

; 2250 :     return 0;

  00210	33 c0		 xor	 eax, eax

; 2251 : }

  00212	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00217	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0021b	5f		 pop	 rdi
  0021c	c3		 ret	 0
bufferedrwpair_clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@DIKAKJAB@bufferedrwpair_dealloc?$AA@	; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$bufferedrwpair_dealloc DD imagerel bufferedrwpair_dealloc
	DD	imagerel bufferedrwpair_dealloc+644
	DD	imagerel $unwind$bufferedrwpair_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferedrwpair_dealloc DD 068e01H
	DD	08348eH
	DD	09640aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0BH@DIKAKJAB@bufferedrwpair_dealloc?$AA@
CONST	SEGMENT
??_C@_0BH@DIKAKJAB@bufferedrwpair_dealloc?$AA@ DB 'bufferedrwpair_dealloc'
	DB	00H						; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\bufferedio.c
CONST	ENDS
;	COMDAT bufferedrwpair_dealloc
_TEXT	SEGMENT
self$ = 64
bufferedrwpair_dealloc PROC				; COMDAT

; 2255 : {

  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 2256 :     _PyObject_GC_UNTRACK(self);

  0000d	4c 8b c9	 mov	 r9, rcx
  00010	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@DIKAKJAB@bufferedrwpair_dealloc?$AA@
  0001e	41 b8 d0 08 00
	00		 mov	 r8d, 2256		; 000008d0H
  00024	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0002c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00031	33 f6		 xor	 esi, esi
  00033	85 c0		 test	 eax, eax
  00035	75 4e		 jne	 SHORT $LN13@bufferedrw@4
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@DIKAKJAB@bufferedrwpair_dealloc?$AA@
  00045	4c 8b cf	 mov	 r9, rdi
  00048	41 b8 d0 08 00
	00		 mov	 r8d, 2256		; 000008d0H
  0004e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00056	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005b	8b d6		 mov	 edx, esi
  0005d	85 c0		 test	 eax, eax
  0005f	75 04		 jne	 SHORT $LN20@bufferedrw@4
  00061	48 8d 57 e8	 lea	 rdx, QWORD PTR [rdi-24]
$LN20@bufferedrw@4:
  00065	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00068	48 8b 4a 08	 mov	 rcx, QWORD PTR [rdx+8]
  0006c	48 c7 42 10 fe
	ff ff ff	 mov	 QWORD PTR [rdx+16], -2
  00074	48 89 01	 mov	 QWORD PTR [rcx], rax
  00077	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  0007a	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  0007e	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00082	48 89 32	 mov	 QWORD PTR [rdx], rsi
$LN13@bufferedrw@4:

; 2257 :     Py_CLEAR(self->reader);

  00085	4c 8b 4f 60	 mov	 r9, QWORD PTR [rdi+96]
  00089	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0008e	4d 85 c9	 test	 r9, r9
  00091	0f 84 92 00 00
	00		 je	 $LN11@bufferedrw@4
  00097	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@DIKAKJAB@bufferedrwpair_dealloc?$AA@
  000a5	41 b8 d1 08 00
	00		 mov	 r8d, 2257		; 000008d1H
  000ab	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000b3	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b8	85 c0		 test	 eax, eax
  000ba	75 6d		 jne	 SHORT $LN11@bufferedrw@4
  000bc	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  000c0	48 89 77 60	 mov	 QWORD PTR [rdi+96], rsi
  000c4	e8 00 00 00 00	 call	 _Py_PXCTX
  000c9	85 c0		 test	 eax, eax
  000cb	75 5c		 jne	 SHORT $LN11@bufferedrw@4
  000cd	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000d1	a8 20		 test	 al, 32			; 00000020H
  000d3	75 4c		 jne	 SHORT $LN25@bufferedrw@4
  000d5	84 c0		 test	 al, al
  000d7	78 48		 js	 SHORT $LN25@bufferedrw@4
  000d9	a8 02		 test	 al, 2
  000db	75 4c		 jne	 SHORT $LN11@bufferedrw@4
  000dd	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000e1	75 46		 jne	 SHORT $LN11@bufferedrw@4
  000e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000f1	4c 8b cb	 mov	 r9, rbx
  000f4	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000fa	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00102	e8 00 00 00 00	 call	 _PyParallel_Guard
  00107	48 8b cb	 mov	 rcx, rbx
  0010a	85 c0		 test	 eax, eax
  0010c	74 07		 je	 SHORT $LN30@bufferedrw@4
  0010e	e8 00 00 00 00	 call	 _Px_Dealloc
  00113	eb 14		 jmp	 SHORT $LN11@bufferedrw@4
$LN30@bufferedrw@4:
  00115	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00119	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0011f	eb 08		 jmp	 SHORT $LN11@bufferedrw@4
$LN25@bufferedrw@4:
  00121	48 8b cb	 mov	 rcx, rbx
  00124	e8 00 00 00 00	 call	 Px_DecRef
$LN11@bufferedrw@4:

; 2258 :     Py_CLEAR(self->writer);

  00129	4c 8b 4f 68	 mov	 r9, QWORD PTR [rdi+104]
  0012d	4d 85 c9	 test	 r9, r9
  00130	0f 84 92 00 00
	00		 je	 $LN7@bufferedrw@4
  00136	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  0013d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@DIKAKJAB@bufferedrwpair_dealloc?$AA@
  00144	41 b8 d2 08 00
	00		 mov	 r8d, 2258		; 000008d2H
  0014a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00152	e8 00 00 00 00	 call	 _PyParallel_Guard
  00157	85 c0		 test	 eax, eax
  00159	75 6d		 jne	 SHORT $LN7@bufferedrw@4
  0015b	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  0015f	48 89 77 68	 mov	 QWORD PTR [rdi+104], rsi
  00163	e8 00 00 00 00	 call	 _Py_PXCTX
  00168	85 c0		 test	 eax, eax
  0016a	75 5c		 jne	 SHORT $LN7@bufferedrw@4
  0016c	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00170	a8 20		 test	 al, 32			; 00000020H
  00172	75 4c		 jne	 SHORT $LN36@bufferedrw@4
  00174	84 c0		 test	 al, al
  00176	78 48		 js	 SHORT $LN36@bufferedrw@4
  00178	a8 02		 test	 al, 2
  0017a	75 4c		 jne	 SHORT $LN7@bufferedrw@4
  0017c	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00180	75 46		 jne	 SHORT $LN7@bufferedrw@4
  00182	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00189	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00190	4c 8b cb	 mov	 r9, rbx
  00193	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00199	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001a1	e8 00 00 00 00	 call	 _PyParallel_Guard
  001a6	48 8b cb	 mov	 rcx, rbx
  001a9	85 c0		 test	 eax, eax
  001ab	74 07		 je	 SHORT $LN41@bufferedrw@4
  001ad	e8 00 00 00 00	 call	 _Px_Dealloc
  001b2	eb 14		 jmp	 SHORT $LN7@bufferedrw@4
$LN41@bufferedrw@4:
  001b4	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001b8	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001be	eb 08		 jmp	 SHORT $LN7@bufferedrw@4
$LN36@bufferedrw@4:
  001c0	48 8b cb	 mov	 rcx, rbx
  001c3	e8 00 00 00 00	 call	 Px_DecRef
$LN7@bufferedrw@4:

; 2259 :     Py_CLEAR(self->dict);

  001c8	4c 8b 4f 70	 mov	 r9, QWORD PTR [rdi+112]
  001cc	4d 85 c9	 test	 r9, r9
  001cf	0f 84 92 00 00
	00		 je	 $LN3@bufferedrw@4
  001d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  001dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@DIKAKJAB@bufferedrwpair_dealloc?$AA@
  001e3	41 b8 d3 08 00
	00		 mov	 r8d, 2259		; 000008d3H
  001e9	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001f1	e8 00 00 00 00	 call	 _PyParallel_Guard
  001f6	85 c0		 test	 eax, eax
  001f8	75 6d		 jne	 SHORT $LN3@bufferedrw@4
  001fa	48 8b 5f 70	 mov	 rbx, QWORD PTR [rdi+112]
  001fe	48 89 77 70	 mov	 QWORD PTR [rdi+112], rsi
  00202	e8 00 00 00 00	 call	 _Py_PXCTX
  00207	85 c0		 test	 eax, eax
  00209	75 5c		 jne	 SHORT $LN3@bufferedrw@4
  0020b	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0020f	a8 20		 test	 al, 32			; 00000020H
  00211	75 4c		 jne	 SHORT $LN47@bufferedrw@4
  00213	84 c0		 test	 al, al
  00215	78 48		 js	 SHORT $LN47@bufferedrw@4
  00217	a8 02		 test	 al, 2
  00219	75 4c		 jne	 SHORT $LN3@bufferedrw@4
  0021b	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0021f	75 46		 jne	 SHORT $LN3@bufferedrw@4
  00221	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00228	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0022f	4c 8b cb	 mov	 r9, rbx
  00232	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00238	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00240	e8 00 00 00 00	 call	 _PyParallel_Guard
  00245	48 8b cb	 mov	 rcx, rbx
  00248	85 c0		 test	 eax, eax
  0024a	74 07		 je	 SHORT $LN52@bufferedrw@4
  0024c	e8 00 00 00 00	 call	 _Px_Dealloc
  00251	eb 14		 jmp	 SHORT $LN3@bufferedrw@4
$LN52@bufferedrw@4:
  00253	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00257	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0025d	eb 08		 jmp	 SHORT $LN3@bufferedrw@4
$LN47@bufferedrw@4:
  0025f	48 8b cb	 mov	 rcx, rbx
  00262	e8 00 00 00 00	 call	 Px_DecRef
$LN3@bufferedrw@4:

; 2260 :     Py_TYPE(self)->tp_free((PyObject *) self);

  00267	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  0026b	48 8b cf	 mov	 rcx, rdi
  0026e	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 2261 : }

  00273	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00278	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0027c	5f		 pop	 rdi
  0027d	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
bufferedrwpair_dealloc ENDP
_TEXT	ENDS
EXTRN	PyObject_CallObject:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_forward_call DD imagerel _forward_call
	DD	imagerel _forward_call+53
	DD	imagerel $unwind$_forward_call
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_forward_call DD imagerel _forward_call+53
	DD	imagerel _forward_call+105
	DD	imagerel $chain$0$_forward_call
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_forward_call DD imagerel _forward_call+105
	DD	imagerel _forward_call+146
	DD	imagerel $chain$2$_forward_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_forward_call DD 020021H
	DD	067400H
	DD	imagerel _forward_call
	DD	imagerel _forward_call+53
	DD	imagerel $unwind$_forward_call
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_forward_call DD 020521H
	DD	067405H
	DD	imagerel _forward_call
	DD	imagerel _forward_call+53
	DD	imagerel $unwind$_forward_call
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_forward_call DD 040a01H
	DD	07340aH
	DD	06006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _forward_call
_TEXT	SEGMENT
self$ = 48
name$ = 56
args$ = 64
_forward_call PROC					; COMDAT

; 2265 : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	49 8b f0	 mov	 rsi, r8
  0000d	48 8b da	 mov	 rbx, rdx

; 2266 :     PyObject *func, *ret;
; 2267 :     if (self == NULL) {

  00010	48 85 c9	 test	 rcx, rcx
  00013	75 20		 jne	 SHORT $LN2@forward_ca

; 2268 :         PyErr_SetString(PyExc_ValueError,
; 2269 :                         "I/O operation on uninitialized object");

  00015	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00023	e8 00 00 00 00	 call	 PyErr_SetString

; 2270 :         return NULL;

  00028	33 c0		 xor	 eax, eax

; 2282 : }

  0002a	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0002f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00033	5e		 pop	 rsi
  00034	c3		 ret	 0
$LN2@forward_ca:
  00035	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi

; 2271 :     }
; 2272 : 
; 2273 :     func = _PyObject_GetAttrId((PyObject *)self, name);

  0003a	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0003f	48 8b f8	 mov	 rdi, rax

; 2274 :     if (func == NULL) {

  00042	48 85 c0	 test	 rax, rax
  00045	75 22		 jne	 SHORT $LN1@forward_ca

; 2275 :         PyErr_SetString(PyExc_AttributeError, name->string);

  00047	48 8b 53 08	 mov	 rdx, QWORD PTR [rbx+8]
  0004b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  00052	e8 00 00 00 00	 call	 PyErr_SetString
  00057	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 2276 :         return NULL;

  0005c	33 c0		 xor	 eax, eax

; 2282 : }

  0005e	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00063	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00067	5e		 pop	 rsi
  00068	c3		 ret	 0
$LN1@forward_ca:

; 2277 :     }
; 2278 : 
; 2279 :     ret = PyObject_CallObject(func, args);

  00069	48 8b d6	 mov	 rdx, rsi
  0006c	48 8b c8	 mov	 rcx, rax
  0006f	e8 00 00 00 00	 call	 PyObject_CallObject

; 2280 :     Py_DECREF(func);

  00074	48 8b cf	 mov	 rcx, rdi
  00077	48 8b d8	 mov	 rbx, rax
  0007a	e8 00 00 00 00	 call	 _Py_DecRef
  0007f	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 2281 :     return ret;

  00084	48 8b c3	 mov	 rax, rbx

; 2282 : }

  00087	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0008c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00090	5e		 pop	 rsi
  00091	c3		 ret	 0
_forward_call ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT bufferedrwpair_read
_TEXT	SEGMENT
self$ = 8
args$ = 16
bufferedrwpair_read PROC				; COMDAT

; 2287 :     return _forward_call(self->reader, &PyId_read, args);

  00000	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  00007	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00010	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00014	4c 8b ca	 mov	 r9, rdx
  00017	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_read
  0001c	4a 03 14 c0	 add	 rdx, QWORD PTR [rax+r8*8]
  00020	4d 8b c1	 mov	 r8, r9

; 2288 : }

  00023	e9 00 00 00 00	 jmp	 _forward_call
bufferedrwpair_read ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT bufferedrwpair_peek
_TEXT	SEGMENT
self$ = 8
args$ = 16
bufferedrwpair_peek PROC				; COMDAT

; 2293 :     return _forward_call(self->reader, &PyId_peek, args);

  00000	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  00007	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00010	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00014	4c 8b ca	 mov	 r9, rdx
  00017	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_peek
  0001c	4a 03 14 c0	 add	 rdx, QWORD PTR [rax+r8*8]
  00020	4d 8b c1	 mov	 r8, r9

; 2294 : }

  00023	e9 00 00 00 00	 jmp	 _forward_call
bufferedrwpair_peek ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT bufferedrwpair_read1
_TEXT	SEGMENT
self$ = 8
args$ = 16
bufferedrwpair_read1 PROC				; COMDAT

; 2299 :     return _forward_call(self->reader, &PyId_read1, args);

  00000	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  00007	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00010	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00014	4c 8b ca	 mov	 r9, rdx
  00017	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_read1
  0001c	4a 03 14 c0	 add	 rdx, QWORD PTR [rax+r8*8]
  00020	4d 8b c1	 mov	 r8, r9

; 2300 : }

  00023	e9 00 00 00 00	 jmp	 _forward_call
bufferedrwpair_read1 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT bufferedrwpair_readinto
_TEXT	SEGMENT
self$ = 8
args$ = 16
bufferedrwpair_readinto PROC				; COMDAT

; 2305 :     return _forward_call(self->reader, &PyId_readinto, args);

  00000	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  00007	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00010	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00014	4c 8b ca	 mov	 r9, rdx
  00017	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_readinto
  0001c	4a 03 14 c0	 add	 rdx, QWORD PTR [rax+r8*8]
  00020	4d 8b c1	 mov	 r8, r9

; 2306 : }

  00023	e9 00 00 00 00	 jmp	 _forward_call
bufferedrwpair_readinto ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT bufferedrwpair_write
_TEXT	SEGMENT
self$ = 8
args$ = 16
bufferedrwpair_write PROC				; COMDAT

; 2311 :     return _forward_call(self->writer, &PyId_write, args);

  00000	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  00007	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00010	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00014	4c 8b ca	 mov	 r9, rdx
  00017	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_write
  0001c	4a 03 14 c0	 add	 rdx, QWORD PTR [rax+r8*8]
  00020	4d 8b c1	 mov	 r8, r9

; 2312 : }

  00023	e9 00 00 00 00	 jmp	 _forward_call
bufferedrwpair_write ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT bufferedrwpair_flush
_TEXT	SEGMENT
self$ = 8
args$ = 16
bufferedrwpair_flush PROC				; COMDAT

; 2317 :     return _forward_call(self->writer, &PyId_flush, args);

  00000	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  00007	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00010	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00014	4c 8b ca	 mov	 r9, rdx
  00017	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_flush
  0001c	4a 03 14 c0	 add	 rdx, QWORD PTR [rax+r8*8]
  00020	4d 8b c1	 mov	 r8, r9

; 2318 : }

  00023	e9 00 00 00 00	 jmp	 _forward_call
bufferedrwpair_flush ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT bufferedrwpair_readable
_TEXT	SEGMENT
self$ = 8
args$ = 16
bufferedrwpair_readable PROC				; COMDAT

; 2323 :     return _forward_call(self->reader, &PyId_readable, args);

  00000	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  00007	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00010	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00014	4c 8b ca	 mov	 r9, rdx
  00017	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_readable
  0001c	4a 03 14 c0	 add	 rdx, QWORD PTR [rax+r8*8]
  00020	4d 8b c1	 mov	 r8, r9

; 2324 : }

  00023	e9 00 00 00 00	 jmp	 _forward_call
bufferedrwpair_readable ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT bufferedrwpair_writable
_TEXT	SEGMENT
self$ = 8
args$ = 16
bufferedrwpair_writable PROC				; COMDAT

; 2329 :     return _forward_call(self->writer, &PyId_writable, args);

  00000	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  00007	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00010	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00014	4c 8b ca	 mov	 r9, rdx
  00017	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_writable
  0001c	4a 03 14 c0	 add	 rdx, QWORD PTR [rax+r8*8]
  00020	4d 8b c1	 mov	 r8, r9

; 2330 : }

  00023	e9 00 00 00 00	 jmp	 _forward_call
bufferedrwpair_writable ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$bufferedrwpair_close DD imagerel bufferedrwpair_close
	DD	imagerel bufferedrwpair_close+123
	DD	imagerel $unwind$bufferedrwpair_close
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferedrwpair_close DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT bufferedrwpair_close
_TEXT	SEGMENT
self$ = 48
args$ = 56
bufferedrwpair_close PROC				; COMDAT

; 2334 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2335 :     PyObject *ret = _forward_call(self->writer, &PyId_close, args);

  0000f	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  00016	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0001f	48 8b f9	 mov	 rdi, rcx
  00022	4a 8b 34 c0	 mov	 rsi, QWORD PTR [rax+r8*8]
  00026	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:PyId_close
  0002b	48 8b da	 mov	 rbx, rdx
  0002e	48 03 f1	 add	 rsi, rcx
  00031	48 8b 4f 68	 mov	 rcx, QWORD PTR [rdi+104]
  00035	4c 8b c2	 mov	 r8, rdx
  00038	48 8b d6	 mov	 rdx, rsi
  0003b	e8 00 00 00 00	 call	 _forward_call

; 2336 :     if (ret == NULL)

  00040	48 85 c0	 test	 rax, rax
  00043	75 10		 jne	 SHORT $LN1@bufferedrw@5

; 2341 : }

  00045	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004a	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0004f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00053	5f		 pop	 rdi
  00054	c3		 ret	 0
$LN1@bufferedrw@5:

; 2337 :         return NULL;
; 2338 :     Py_DECREF(ret);

  00055	48 8b c8	 mov	 rcx, rax
  00058	e8 00 00 00 00	 call	 _Py_DecRef

; 2339 : 
; 2340 :     return _forward_call(self->reader, &PyId_close, args);

  0005d	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  00061	4c 8b c3	 mov	 r8, rbx
  00064	48 8b d6	 mov	 rdx, rsi

; 2341 : }

  00067	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0006c	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00071	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00075	5f		 pop	 rdi
  00076	e9 00 00 00 00	 jmp	 _forward_call
bufferedrwpair_close ENDP
_TEXT	ENDS
EXTRN	_Py_FalseStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$bufferedrwpair_isatty DD imagerel bufferedrwpair_isatty
	DD	imagerel bufferedrwpair_isatty+115
	DD	imagerel $unwind$bufferedrwpair_isatty
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferedrwpair_isatty DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT bufferedrwpair_isatty
_TEXT	SEGMENT
self$ = 48
args$ = 56
bufferedrwpair_isatty PROC				; COMDAT

; 2345 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2346 :     PyObject *ret = _forward_call(self->writer, &PyId_isatty, args);

  0000f	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  00016	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0001f	48 8b f9	 mov	 rdi, rcx
  00022	4a 8b 34 c0	 mov	 rsi, QWORD PTR [rax+r8*8]
  00026	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:PyId_isatty
  0002b	48 8b da	 mov	 rbx, rdx
  0002e	48 03 f1	 add	 rsi, rcx
  00031	48 8b 4f 68	 mov	 rcx, QWORD PTR [rdi+104]
  00035	4c 8b c2	 mov	 r8, rdx
  00038	48 8b d6	 mov	 rdx, rsi
  0003b	e8 00 00 00 00	 call	 _forward_call

; 2347 : 
; 2348 :     if (ret != Py_False) {

  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  00047	48 3b c1	 cmp	 rax, rcx

; 2349 :         /* either True or exception */
; 2350 :         return ret;

  0004a	75 17		 jne	 SHORT $LN2@bufferedrw@6

; 2351 :     }
; 2352 :     Py_DECREF(ret);

  0004c	48 8b c8	 mov	 rcx, rax
  0004f	e8 00 00 00 00	 call	 _Py_DecRef

; 2353 : 
; 2354 :     return _forward_call(self->reader, &PyId_isatty, args);

  00054	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  00058	4c 8b c3	 mov	 r8, rbx
  0005b	48 8b d6	 mov	 rdx, rsi
  0005e	e8 00 00 00 00	 call	 _forward_call
$LN2@bufferedrw@6:

; 2355 : }

  00063	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00068	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0006d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00071	5f		 pop	 rdi
  00072	c3		 ret	 0
bufferedrwpair_isatty ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DF@IPBMMNNN@the?5BufferedRWPair?5object?5is?5bei@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$bufferedrwpair_closed_get DD imagerel bufferedrwpair_closed_get
	DD	imagerel bufferedrwpair_closed_get+55
	DD	imagerel $unwind$bufferedrwpair_closed_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferedrwpair_closed_get DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0DF@IPBMMNNN@the?5BufferedRWPair?5object?5is?5bei@
CONST	SEGMENT
??_C@_0DF@IPBMMNNN@the?5BufferedRWPair?5object?5is?5bei@ DB 'the Buffered'
	DB	'RWPair object is being garbage-collected', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT bufferedrwpair_closed_get
_TEXT	SEGMENT
self$ = 48
context$ = 56
bufferedrwpair_closed_get PROC				; COMDAT

; 2359 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2360 :     if (self->writer == NULL) {

  00004	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00008	48 85 c9	 test	 rcx, rcx
  0000b	75 1a		 jne	 SHORT $LN1@bufferedrw@7

; 2361 :         PyErr_SetString(PyExc_RuntimeError,
; 2362 :                 "the BufferedRWPair object is being garbage-collected");

  0000d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00014	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DF@IPBMMNNN@the?5BufferedRWPair?5object?5is?5bei@
  0001b	e8 00 00 00 00	 call	 PyErr_SetString

; 2363 :         return NULL;

  00020	33 c0		 xor	 eax, eax

; 2366 : }

  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
$LN1@bufferedrw@7:

; 2364 :     }
; 2365 :     return PyObject_GetAttr((PyObject *) self->writer, _PyIO_str_closed);

  00027	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_closed

; 2366 : }

  0002e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00032	e9 00 00 00 00	 jmp	 PyObject_GetAttr
bufferedrwpair_closed_get ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@IPECHOCF@bufferedrandom_init?$AA@	; `string'
PUBLIC	??_C@_0BD@ELEFDLFH@O?$HMn?3BufferedRandom?$AA@	; `string'
EXTRN	_PyIOBase_check_seekable:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$bufferedrandom_init DD imagerel bufferedrandom_init
	DD	imagerel bufferedrandom_init+382
	DD	imagerel $unwind$bufferedrandom_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferedrandom_init DD 040c01H
	DD	0d340cH
	DD	07008920cH
xdata	ENDS
;	COMDAT ??_C@_0BE@IPECHOCF@bufferedrandom_init?$AA@
CONST	SEGMENT
??_C@_0BE@IPECHOCF@bufferedrandom_init?$AA@ DB 'bufferedrandom_init', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@ELEFDLFH@O?$HMn?3BufferedRandom?$AA@
CONST	SEGMENT
??_C@_0BD@ELEFDLFH@O?$HMn?3BufferedRandom?$AA@ DB 'O|n:BufferedRandom', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT bufferedrandom_init
_TEXT	SEGMENT
raw$ = 96
self$ = 96
args$ = 104
kwds$ = 112
buffer_size$ = 120
bufferedrandom_init PROC				; COMDAT

; 2451 : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	49 89 5b 10	 mov	 QWORD PTR [r11+16], rbx
  00007	57		 push	 rdi
  00008	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000c	48 8b d9	 mov	 rbx, rcx
  0000f	49 8b c0	 mov	 rax, r8
  00012	4c 8b d2	 mov	 r10, rdx

; 2452 :     char *kwlist[] = {"raw", "buffer_size", NULL};

  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03DGOGAGNC@raw?$AA@
  0001c	33 ff		 xor	 edi, edi

; 2453 :     Py_ssize_t buffer_size = DEFAULT_BUFFER_SIZE;
; 2454 :     PyObject *raw;
; 2455 : 
; 2456 :     self->ok = 0;
; 2457 :     self->detached = 0;
; 2458 : 
; 2459 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|n:BufferedRandom", kwlist,
; 2460 :                                      &raw, &buffer_size)) {

  0001e	4d 8d 4b d8	 lea	 r9, QWORD PTR [r11-40]
  00022	49 89 4b d8	 mov	 QWORD PTR [r11-40], rcx
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@JLCCDMKC@buffer_size?$AA@
  0002d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@ELEFDLFH@O?$HMn?3BufferedRandom?$AA@
  00034	49 89 4b e0	 mov	 QWORD PTR [r11-32], rcx
  00038	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  0003c	48 8b d0	 mov	 rdx, rax
  0003f	49 89 4b d0	 mov	 QWORD PTR [r11-48], rcx
  00043	49 8d 4b 08	 lea	 rcx, QWORD PTR [r11+8]
  00047	49 89 7b e8	 mov	 QWORD PTR [r11-24], rdi
  0004b	49 89 4b c8	 mov	 QWORD PTR [r11-56], rcx
  0004f	49 8b ca	 mov	 rcx, r10
  00052	49 c7 43 20 00
	20 00 00	 mov	 QWORD PTR [r11+32], 8192 ; 00002000H
  0005a	48 89 7b 68	 mov	 QWORD PTR [rbx+104], rdi
  0005e	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  00063	85 c0		 test	 eax, eax
  00065	75 0e		 jne	 SHORT $LN9@bufferedra
$LN14@bufferedra:

; 2461 :         return -1;

  00067	83 c8 ff	 or	 eax, -1

; 2488 :     return 0;
; 2489 : }

  0006a	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  0006f	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00073	5f		 pop	 rdi
  00074	c3		 ret	 0
$LN9@bufferedra:

; 2462 :     }
; 2463 : 
; 2464 :     if (_PyIOBase_check_seekable(raw, Py_True) == NULL)

  00075	48 8b 4c 24 60	 mov	 rcx, QWORD PTR raw$[rsp]
  0007a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_TrueStruct
  00081	e8 00 00 00 00	 call	 _PyIOBase_check_seekable
  00086	48 85 c0	 test	 rax, rax

; 2465 :         return -1;

  00089	74 dc		 je	 SHORT $LN14@bufferedra

; 2466 :     if (_PyIOBase_check_readable(raw, Py_True) == NULL)

  0008b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR raw$[rsp]
  00090	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_TrueStruct
  00097	e8 00 00 00 00	 call	 _PyIOBase_check_readable
  0009c	48 85 c0	 test	 rax, rax

; 2467 :         return -1;

  0009f	74 c6		 je	 SHORT $LN14@bufferedra

; 2468 :     if (_PyIOBase_check_writable(raw, Py_True) == NULL)

  000a1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR raw$[rsp]
  000a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_TrueStruct
  000ad	e8 00 00 00 00	 call	 _PyIOBase_check_writable
  000b2	48 85 c0	 test	 rax, rax

; 2469 :         return -1;

  000b5	74 b0		 je	 SHORT $LN14@bufferedra

; 2470 : 
; 2471 :     Py_CLEAR(self->raw);

  000b7	4c 8b 4b 60	 mov	 r9, QWORD PTR [rbx+96]
  000bb	4d 85 c9	 test	 r9, r9
  000be	74 32		 je	 SHORT $LN4@bufferedra
  000c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  000c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@IPECHOCF@bufferedrandom_init?$AA@
  000ce	41 b8 a7 09 00
	00		 mov	 r8d, 2471		; 000009a7H
  000d4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000dc	e8 00 00 00 00	 call	 _PyParallel_Guard
  000e1	85 c0		 test	 eax, eax
  000e3	75 0d		 jne	 SHORT $LN4@bufferedra
  000e5	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  000e9	48 89 7b 60	 mov	 QWORD PTR [rbx+96], rdi
  000ed	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@bufferedra:

; 2472 :     Py_INCREF(raw);

  000f2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR raw$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_IncRef

; 2473 :     self->raw = raw;

  000fc	4c 8b 5c 24 60	 mov	 r11, QWORD PTR raw$[rsp]

; 2474 :     self->buffer_size = buffer_size;

  00101	48 8b 44 24 78	 mov	 rax, QWORD PTR buffer_size$[rsp]

; 2475 :     self->readable = 1;
; 2476 :     self->writable = 1;
; 2477 : 
; 2478 :     if (_buffered_init(self) < 0)

  00106	48 8b cb	 mov	 rcx, rbx
  00109	4c 89 5b 60	 mov	 QWORD PTR [rbx+96], r11
  0010d	48 89 83 c8 00
	00 00		 mov	 QWORD PTR [rbx+200], rax
  00114	c7 43 70 01 00
	00 00		 mov	 DWORD PTR [rbx+112], 1
  0011b	c7 43 74 01 00
	00 00		 mov	 DWORD PTR [rbx+116], 1
  00122	e8 00 00 00 00	 call	 _buffered_init
  00127	85 c0		 test	 eax, eax

; 2479 :         return -1;

  00129	0f 88 38 ff ff
	ff		 js	 $LN14@bufferedra

; 2480 :     _bufferedreader_reset_buf(self);

  0012f	48 8b cb	 mov	 rcx, rbx
  00132	e8 00 00 00 00	 call	 _bufferedreader_reset_buf

; 2481 :     _bufferedwriter_reset_buf(self);

  00137	e8 00 00 00 00	 call	 _bufferedwriter_reset_buf

; 2482 :     self->pos = 0;
; 2483 : 
; 2484 :     self->fast_closed_checks = (Py_TYPE(self) == &PyBufferedRandom_Type &&
; 2485 :                                 Py_TYPE(raw) == &PyFileIO_Type);

  0013c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBufferedRandom_Type
  00143	48 89 bb 90 00
	00 00		 mov	 QWORD PTR [rbx+144], rdi
  0014a	48 39 43 58	 cmp	 QWORD PTR [rbx+88], rax
  0014e	75 17		 jne	 SHORT $LN12@bufferedra
  00150	48 8b 44 24 60	 mov	 rax, QWORD PTR raw$[rsp]
  00155	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyFileIO_Type
  0015c	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  00160	75 05		 jne	 SHORT $LN12@bufferedra
  00162	bf 01 00 00 00	 mov	 edi, 1
$LN12@bufferedra:
  00167	89 7b 7c	 mov	 DWORD PTR [rbx+124], edi

; 2486 : 
; 2487 :     self->ok = 1;

  0016a	c7 43 68 01 00
	00 00		 mov	 DWORD PTR [rbx+104], 1

; 2488 :     return 0;
; 2489 : }

  00171	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  00176	33 c0		 xor	 eax, eax
  00178	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0017c	5f		 pop	 rdi
  0017d	c3		 ret	 0
bufferedrandom_init ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$buffered_flush_and_rewind_unlocked DD imagerel buffered_flush_and_rewind_unlocked
	DD	imagerel buffered_flush_and_rewind_unlocked+203
	DD	imagerel $unwind$buffered_flush_and_rewind_unlocked
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_flush_and_rewind_unlocked DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\bufferedio.c
xdata	ENDS
;	COMDAT buffered_flush_and_rewind_unlocked
_TEXT	SEGMENT
self$ = 64
buffered_flush_and_rewind_unlocked PROC			; COMDAT

; 819  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 820  :     PyObject *res;
; 821  : 
; 822  :     res = _bufferedwriter_flush_unlocked(self);

  00009	e8 00 00 00 00	 call	 _bufferedwriter_flush_unlocked

; 823  :     if (res == NULL)

  0000e	48 85 c0	 test	 rax, rax
  00011	75 08		 jne	 SHORT $LN3@buffered_f@2
$LN14@buffered_f@2:

; 824  :         return NULL;

  00013	33 c0		 xor	 eax, eax

; 837  : }

  00015	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00019	5b		 pop	 rbx
  0001a	c3		 ret	 0
$LN3@buffered_f@2:

; 825  :     Py_DECREF(res);

  0001b	48 8b c8	 mov	 rcx, rax
  0001e	e8 00 00 00 00	 call	 _Py_DecRef

; 826  : 
; 827  :     if (self->readable) {

  00023	83 7b 70 00	 cmp	 DWORD PTR [rbx+112], 0
  00027	74 50		 je	 SHORT $LN1@buffered_f@2

; 828  :         /* Rewind the raw stream so that its position corresponds to
; 829  :            the current logical position. */
; 830  :         Py_off_t n;
; 831  :         n = _buffered_raw_seek(self, -RAW_OFFSET(self), 1);

  00029	48 83 bb a0 00
	00 00 ff	 cmp	 QWORD PTR [rbx+160], -1
  00031	75 10		 jne	 SHORT $LN8@buffered_f@2
  00033	83 7b 74 00	 cmp	 DWORD PTR [rbx+116], 0
  00037	74 1f		 je	 SHORT $LN7@buffered_f@2
  00039	48 83 bb b0 00
	00 00 ff	 cmp	 QWORD PTR [rbx+176], -1
  00041	74 15		 je	 SHORT $LN7@buffered_f@2
$LN8@buffered_f@2:
  00043	48 8b 93 98 00
	00 00		 mov	 rdx, QWORD PTR [rbx+152]
  0004a	48 85 d2	 test	 rdx, rdx
  0004d	78 09		 js	 SHORT $LN7@buffered_f@2
  0004f	48 2b 93 90 00
	00 00		 sub	 rdx, QWORD PTR [rbx+144]
  00056	eb 02		 jmp	 SHORT $LN9@buffered_f@2
$LN7@buffered_f@2:
  00058	33 d2		 xor	 edx, edx
$LN9@buffered_f@2:
  0005a	48 f7 da	 neg	 rdx
  0005d	41 b8 01 00 00
	00		 mov	 r8d, 1
  00063	48 8b cb	 mov	 rcx, rbx
  00066	e8 00 00 00 00	 call	 _buffered_raw_seek

; 832  :         _bufferedreader_reset_buf(self);

  0006b	48 8b cb	 mov	 rcx, rbx
  0006e	e8 00 00 00 00	 call	 _bufferedreader_reset_buf

; 833  :         if (n == -1)

  00073	48 83 f8 ff	 cmp	 rax, -1

; 834  :             return NULL;

  00077	74 9a		 je	 SHORT $LN14@buffered_f@2
$LN1@buffered_f@2:

; 835  :     }
; 836  :     Py_RETURN_NONE;

  00079	e8 00 00 00 00	 call	 _Py_PXCTX
  0007e	85 c0		 test	 eax, eax
  00080	75 3c		 jne	 SHORT $LN11@buffered_f@2
  00082	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00089	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00090	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00097	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0009d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000a5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000aa	85 c0		 test	 eax, eax
  000ac	75 09		 jne	 SHORT $LN10@buffered_f@2
  000ae	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  000b5	74 07		 je	 SHORT $LN11@buffered_f@2
$LN10@buffered_f@2:
  000b7	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN11@buffered_f@2:
  000be	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 837  : }

  000c5	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c9	5b		 pop	 rbx
  000ca	c3		 ret	 0
buffered_flush_and_rewind_unlocked ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@OEOPNLAF@flush?5of?5closed?5file?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_flush DD imagerel buffered_flush
	DD	imagerel buffered_flush+201
	DD	imagerel $unwind$buffered_flush
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_flush DD 048f01H
	DD	06348fH
	DD	070023206H
xdata	ENDS
;	COMDAT ??_C@_0BF@OEOPNLAF@flush?5of?5closed?5file?$AA@
CONST	SEGMENT
??_C@_0BF@OEOPNLAF@flush?5of?5closed?5file?$AA@ DB 'flush of closed file', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT buffered_flush
_TEXT	SEGMENT
self$ = 48
args$ = 56
buffered_flush PROC					; COMDAT

; 841  : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 842  :     PyObject *res;
; 843  : 
; 844  :     CHECK_INITIALIZED(self)

  00006	83 79 68 00	 cmp	 DWORD PTR [rcx+104], 0
  0000a	48 8b f9	 mov	 rdi, rcx
  0000d	7f 28		 jg	 SHORT $LN9@buffered_f@3
  0000f	83 79 6c 00	 cmp	 DWORD PTR [rcx+108], 0
  00013	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0001a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  00021	75 07		 jne	 SHORT $LN17@buffered_f@3
  00023	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
$LN17@buffered_f@3:
  0002a	e8 00 00 00 00	 call	 PyErr_SetString
$LN18@buffered_f@3:
  0002f	33 c0		 xor	 eax, eax

; 853  : }

  00031	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00035	5f		 pop	 rdi
  00036	c3		 ret	 0
$LN9@buffered_f@3:

; 845  :     CHECK_CLOSED(self, "flush of closed file")

  00037	83 79 7c 00	 cmp	 DWORD PTR [rcx+124], 0
  0003b	74 0b		 je	 SHORT $LN12@buffered_f@3
  0003d	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00041	e8 00 00 00 00	 call	 _PyFileIO_closed
  00046	eb 05		 jmp	 SHORT $LN13@buffered_f@3
$LN12@buffered_f@3:
  00048	e8 00 00 00 00	 call	 buffered_closed
$LN13@buffered_f@3:
  0004d	85 c0		 test	 eax, eax
  0004f	74 1b		 je	 SHORT $LN6@buffered_f@3
  00051	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@OEOPNLAF@flush?5of?5closed?5file?$AA@
  0005f	e8 00 00 00 00	 call	 PyErr_SetString
  00064	33 c0		 xor	 eax, eax

; 853  : }

  00066	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006a	5f		 pop	 rdi
  0006b	c3		 ret	 0
$LN6@buffered_f@3:

; 846  : 
; 847  :     if (!ENTER_BUFFERED(self))

  0006c	48 8b 8f b8 00
	00 00		 mov	 rcx, QWORD PTR [rdi+184]
  00073	33 d2		 xor	 edx, edx
  00075	e8 00 00 00 00	 call	 PyThread_acquire_lock
  0007a	85 c0		 test	 eax, eax
  0007c	75 0c		 jne	 SHORT $LN16@buffered_f@3
  0007e	48 8b cf	 mov	 rcx, rdi
  00081	e8 00 00 00 00	 call	 _enter_buffered_busy
  00086	85 c0		 test	 eax, eax

; 848  :         return NULL;

  00088	74 a5		 je	 SHORT $LN18@buffered_f@3
$LN16@buffered_f@3:
  0008a	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx

; 846  : 
; 847  :     if (!ENTER_BUFFERED(self))

  0008f	e8 00 00 00 00	 call	 PyThread_get_thread_ident

; 849  :     res = buffered_flush_and_rewind_unlocked(self);

  00094	48 8b cf	 mov	 rcx, rdi
  00097	89 87 c0 00 00
	00		 mov	 DWORD PTR [rdi+192], eax
  0009d	e8 00 00 00 00	 call	 buffered_flush_and_rewind_unlocked

; 850  :     LEAVE_BUFFERED(self)

  000a2	48 8b 8f b8 00
	00 00		 mov	 rcx, QWORD PTR [rdi+184]
  000a9	48 8b d8	 mov	 rbx, rax
  000ac	c7 87 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rdi+192], 0
  000b6	e8 00 00 00 00	 call	 PyThread_release_lock

; 851  : 
; 852  :     return res;

  000bb	48 8b c3	 mov	 rax, rbx
  000be	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 853  : }

  000c3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c7	5f		 pop	 rdi
  000c8	c3		 ret	 0
buffered_flush ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@FFKMJDIN@buffered_peek?$AA@		; `string'
PUBLIC	??_C@_07CCHFOLGD@?$HMn?3peek?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_peek DD imagerel buffered_peek
	DD	imagerel buffered_peek+254
	DD	imagerel $unwind$buffered_peek
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_peek DD 047e01H
	DD	09747eH
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0O@FFKMJDIN@buffered_peek?$AA@
CONST	SEGMENT
??_C@_0O@FFKMJDIN@buffered_peek?$AA@ DB 'buffered_peek', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07CCHFOLGD@?$HMn?3peek?$AA@
CONST	SEGMENT
??_C@_07CCHFOLGD@?$HMn?3peek?$AA@ DB '|n:peek', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT buffered_peek
_TEXT	SEGMENT
n$ = 64
self$ = 64
args$ = 72
buffered_peek PROC					; COMDAT

; 857  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 858  :     Py_ssize_t n = 0;
; 859  :     PyObject *res = NULL;
; 860  : 
; 861  :     CHECK_INITIALIZED(self)

  00006	83 79 68 00	 cmp	 DWORD PTR [rcx+104], 0
  0000a	48 8b c2	 mov	 rax, rdx
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR n$[rsp], 0
  00019	7f 28		 jg	 SHORT $LN15@buffered_p
  0001b	83 79 6c 00	 cmp	 DWORD PTR [rcx+108], 0
  0001f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  0002d	75 07		 jne	 SHORT $LN22@buffered_p
  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
$LN22@buffered_p:
  00036	e8 00 00 00 00	 call	 PyErr_SetString
$LN23@buffered_p:
  0003b	33 c0		 xor	 eax, eax

; 880  : }

  0003d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00041	5b		 pop	 rbx
  00042	c3		 ret	 0
$LN15@buffered_p:

; 862  :     if (!PyArg_ParseTuple(args, "|n:peek", &n)) {

  00043	4c 8d 44 24 40	 lea	 r8, QWORD PTR n$[rsp]
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07CCHFOLGD@?$HMn?3peek?$AA@
  0004f	48 8b c8	 mov	 rcx, rax
  00052	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00057	85 c0		 test	 eax, eax

; 863  :         return NULL;

  00059	74 e0		 je	 SHORT $LN23@buffered_p

; 864  :     }
; 865  : 
; 866  :     if (!ENTER_BUFFERED(self))

  0005b	48 8b 8b b8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+184]
  00062	33 d2		 xor	 edx, edx
  00064	e8 00 00 00 00	 call	 PyThread_acquire_lock
  00069	85 c0		 test	 eax, eax
  0006b	75 0c		 jne	 SHORT $LN21@buffered_p
  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 _enter_buffered_busy
  00075	85 c0		 test	 eax, eax

; 867  :         return NULL;

  00077	74 c2		 je	 SHORT $LN23@buffered_p
$LN21@buffered_p:
  00079	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi

; 864  :     }
; 865  : 
; 866  :     if (!ENTER_BUFFERED(self))

  0007e	e8 00 00 00 00	 call	 PyThread_get_thread_ident

; 868  : 
; 869  :     if (self->writable) {

  00083	83 7b 74 00	 cmp	 DWORD PTR [rbx+116], 0
  00087	89 83 c0 00 00
	00		 mov	 DWORD PTR [rbx+192], eax
  0008d	74 40		 je	 SHORT $LN5@buffered_p

; 870  :         res = buffered_flush_and_rewind_unlocked(self);

  0008f	48 8b cb	 mov	 rcx, rbx
  00092	e8 00 00 00 00	 call	 buffered_flush_and_rewind_unlocked
  00097	48 8b f8	 mov	 rdi, rax

; 871  :         if (res == NULL)

  0009a	48 85 c0	 test	 rax, rax
  0009d	74 3b		 je	 SHORT $end$21063

; 872  :             goto end;
; 873  :         Py_CLEAR(res);

  0009f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  000a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@FFKMJDIN@buffered_peek?$AA@
  000ad	4c 8b c8	 mov	 r9, rax
  000b0	41 b8 69 03 00
	00		 mov	 r8d, 873		; 00000369H
  000b6	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000be	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c3	85 c0		 test	 eax, eax
  000c5	75 08		 jne	 SHORT $LN5@buffered_p
  000c7	48 8b cf	 mov	 rcx, rdi
  000ca	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@buffered_p:

; 874  :     }
; 875  :     res = _bufferedreader_peek_unlocked(self);

  000cf	48 8b cb	 mov	 rcx, rbx
  000d2	e8 00 00 00 00	 call	 _bufferedreader_peek_unlocked
  000d7	48 8b f8	 mov	 rdi, rax
$end$21063:

; 876  : 
; 877  : end:
; 878  :     LEAVE_BUFFERED(self)

  000da	48 8b 8b b8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+184]
  000e1	c7 83 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rbx+192], 0
  000eb	e8 00 00 00 00	 call	 PyThread_release_lock

; 879  :     return res;

  000f0	48 8b c7	 mov	 rax, rdi
  000f3	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]

; 880  : }

  000f8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000fc	5b		 pop	 rbx
  000fd	c3		 ret	 0
buffered_peek ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@BLNCHBAD@read?5length?5must?5be?5positive?$AA@ ; `string'
PUBLIC	??_C@_07EOIOMINM@n?3read1?$AA@			; `string'
EXTRN	_PyBytes_Resize:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_read1 DD imagerel buffered_read1
	DD	imagerel buffered_read1+298
	DD	imagerel $unwind$buffered_read1
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$buffered_read1 DD imagerel buffered_read1+298
	DD	imagerel buffered_read1+396
	DD	imagerel $chain$0$buffered_read1
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$buffered_read1 DD imagerel buffered_read1+396
	DD	imagerel buffered_read1+445
	DD	imagerel $chain$2$buffered_read1
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$buffered_read1 DD 020021H
	DD	077400H
	DD	imagerel buffered_read1
	DD	imagerel buffered_read1+298
	DD	imagerel $unwind$buffered_read1
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$buffered_read1 DD 020521H
	DD	077405H
	DD	imagerel buffered_read1
	DD	imagerel buffered_read1+298
	DD	imagerel $unwind$buffered_read1
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_read1 DD 040a01H
	DD	09340aH
	DD	06006320aH
xdata	ENDS
;	COMDAT ??_C@_0BN@BLNCHBAD@read?5length?5must?5be?5positive?$AA@
CONST	SEGMENT
??_C@_0BN@BLNCHBAD@read?5length?5must?5be?5positive?$AA@ DB 'read length '
	DB	'must be positive', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07EOIOMINM@n?3read1?$AA@
CONST	SEGMENT
??_C@_07EOIOMINM@n?3read1?$AA@ DB 'n:read1', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT buffered_read1
_TEXT	SEGMENT
res$ = 48
self$ = 48
args$ = 56
n$ = 64
buffered_read1 PROC					; COMDAT

; 922  : {

  00000	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 923  :     Py_ssize_t n, have, r;
; 924  :     PyObject *res = NULL;

  0000a	33 f6		 xor	 esi, esi
  0000c	48 8b c2	 mov	 rax, rdx
  0000f	48 8b d9	 mov	 rbx, rcx
  00012	48 89 74 24 30	 mov	 QWORD PTR res$[rsp], rsi

; 925  : 
; 926  :     CHECK_INITIALIZED(self)

  00017	39 71 68	 cmp	 DWORD PTR [rcx+104], esi
  0001a	7f 2c		 jg	 SHORT $LN16@buffered_r@5
  0001c	39 71 6c	 cmp	 DWORD PTR [rcx+108], esi
  0001f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  0002d	75 07		 jne	 SHORT $LN25@buffered_r@5
  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
$LN25@buffered_r@5:
  00036	e8 00 00 00 00	 call	 PyErr_SetString
$LN27@buffered_r@5:
  0003b	33 c0		 xor	 eax, eax

; 968  : }

  0003d	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00042	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00046	5e		 pop	 rsi
  00047	c3		 ret	 0
$LN16@buffered_r@5:

; 927  :     if (!PyArg_ParseTuple(args, "n:read1", &n)) {

  00048	4c 8d 44 24 40	 lea	 r8, QWORD PTR n$[rsp]
  0004d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07EOIOMINM@n?3read1?$AA@
  00054	48 8b c8	 mov	 rcx, rax
  00057	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0005c	85 c0		 test	 eax, eax

; 928  :         return NULL;

  0005e	74 db		 je	 SHORT $LN27@buffered_r@5

; 929  :     }
; 930  : 
; 931  :     if (n < 0) {

  00060	48 8b 44 24 40	 mov	 rax, QWORD PTR n$[rsp]
  00065	48 85 c0	 test	 rax, rax
  00068	79 20		 jns	 SHORT $LN26@buffered_r@5

; 932  :         PyErr_SetString(PyExc_ValueError,
; 933  :                         "read length must be positive");

  0006a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00071	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@BLNCHBAD@read?5length?5must?5be?5positive?$AA@
  00078	e8 00 00 00 00	 call	 PyErr_SetString

; 934  :         return NULL;

  0007d	33 c0		 xor	 eax, eax

; 968  : }

  0007f	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00084	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00088	5e		 pop	 rsi
  00089	c3		 ret	 0
$LN26@buffered_r@5:

; 935  :     }
; 936  :     if (n == 0)

  0008a	75 14		 jne	 SHORT $LN11@buffered_r@5

; 937  :         return PyBytes_FromStringAndSize(NULL, 0);

  0008c	33 d2		 xor	 edx, edx
  0008e	33 c9		 xor	 ecx, ecx
  00090	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize

; 968  : }

  00095	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  0009a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009e	5e		 pop	 rsi
  0009f	c3		 ret	 0
$LN11@buffered_r@5:

; 938  : 
; 939  :     /* Return up to n bytes.  If at least one byte is buffered, we
; 940  :        only return buffered bytes.  Otherwise, we do one raw read. */
; 941  : 
; 942  :     have = Py_SAFE_DOWNCAST(READAHEAD(self), Py_off_t, Py_ssize_t);

  000a0	39 73 70	 cmp	 DWORD PTR [rbx+112], esi
  000a3	74 38		 je	 SHORT $LN10@buffered_r@5
  000a5	48 8b 93 a0 00
	00 00		 mov	 rdx, QWORD PTR [rbx+160]
  000ac	48 83 fa ff	 cmp	 rdx, -1
  000b0	74 2b		 je	 SHORT $LN10@buffered_r@5
  000b2	48 2b 93 90 00
	00 00		 sub	 rdx, QWORD PTR [rbx+144]

; 943  :     if (have > 0) {

  000b9	48 85 d2	 test	 rdx, rdx
  000bc	7e 1f		 jle	 SHORT $LN10@buffered_r@5

; 944  :         n = Py_MIN(have, n);

  000be	48 3b d0	 cmp	 rdx, rax

; 945  :         res = _bufferedreader_read_fast(self, n);

  000c1	48 8b cb	 mov	 rcx, rbx
  000c4	48 0f 4f d0	 cmovg	 rdx, rax
  000c8	48 89 54 24 40	 mov	 QWORD PTR n$[rsp], rdx
  000cd	e8 00 00 00 00	 call	 _bufferedreader_read_fast

; 968  : }

  000d2	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000d7	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000db	5e		 pop	 rsi
  000dc	c3		 ret	 0
$LN10@buffered_r@5:

; 946  :         assert(res != Py_None);
; 947  :         return res;
; 948  :     }
; 949  :     res = PyBytes_FromStringAndSize(NULL, n);

  000dd	48 8b d0	 mov	 rdx, rax
  000e0	33 c9		 xor	 ecx, ecx
  000e2	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  000e7	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 950  :     if (res == NULL)

  000ec	48 85 c0	 test	 rax, rax

; 951  :         return NULL;

  000ef	0f 84 46 ff ff
	ff		 je	 $LN27@buffered_r@5

; 952  :     if (!ENTER_BUFFERED(self)) {

  000f5	48 8b 8b b8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+184]
  000fc	33 d2		 xor	 edx, edx
  000fe	e8 00 00 00 00	 call	 PyThread_acquire_lock
  00103	85 c0		 test	 eax, eax
  00105	75 23		 jne	 SHORT $LN23@buffered_r@5
  00107	48 8b cb	 mov	 rcx, rbx
  0010a	e8 00 00 00 00	 call	 _enter_buffered_busy
  0010f	85 c0		 test	 eax, eax
  00111	75 17		 jne	 SHORT $LN23@buffered_r@5

; 953  :         Py_DECREF(res);

  00113	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  00118	e8 00 00 00 00	 call	 _Py_DecRef

; 954  :         return NULL;

  0011d	33 c0		 xor	 eax, eax

; 968  : }

  0011f	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00124	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00128	5e		 pop	 rsi
  00129	c3		 ret	 0
$LN23@buffered_r@5:
  0012a	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi

; 952  :     if (!ENTER_BUFFERED(self)) {

  0012f	e8 00 00 00 00	 call	 PyThread_get_thread_ident

; 955  :     }
; 956  :     _bufferedreader_reset_buf(self);

  00134	48 8b cb	 mov	 rcx, rbx
  00137	89 83 c0 00 00
	00		 mov	 DWORD PTR [rbx+192], eax
  0013d	e8 00 00 00 00	 call	 _bufferedreader_reset_buf

; 957  :     r = _bufferedreader_raw_read(self, PyBytes_AS_STRING(res), n);

  00142	48 8b 54 24 30	 mov	 rdx, QWORD PTR res$[rsp]
  00147	4c 8b 44 24 40	 mov	 r8, QWORD PTR n$[rsp]
  0014c	48 83 c2 78	 add	 rdx, 120		; 00000078H
  00150	e8 00 00 00 00	 call	 _bufferedreader_raw_read

; 958  :     LEAVE_BUFFERED(self)

  00155	48 8b 8b b8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+184]
  0015c	89 b3 c0 00 00
	00		 mov	 DWORD PTR [rbx+192], esi
  00162	48 8b f8	 mov	 rdi, rax
  00165	e8 00 00 00 00	 call	 PyThread_release_lock

; 959  :     if (r == -1) {

  0016a	48 83 ff ff	 cmp	 rdi, -1
  0016e	75 1c		 jne	 SHORT $LN3@buffered_r@5

; 960  :         Py_DECREF(res);

  00170	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  00175	e8 00 00 00 00	 call	 _Py_DecRef
  0017a	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]

; 961  :         return NULL;

  0017f	33 c0		 xor	 eax, eax

; 968  : }

  00181	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00186	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0018a	5e		 pop	 rsi
  0018b	c3		 ret	 0
$LN3@buffered_r@5:

; 962  :     }
; 963  :     if (r == -2)

  0018c	48 83 ff fe	 cmp	 rdi, -2
  00190	48 0f 44 fe	 cmove	 rdi, rsi

; 964  :         r = 0;
; 965  :     if (n > r)

  00194	48 39 7c 24 40	 cmp	 QWORD PTR n$[rsp], rdi
  00199	7e 0d		 jle	 SHORT $LN1@buffered_r@5

; 966  :         _PyBytes_Resize(&res, r);

  0019b	48 8d 4c 24 30	 lea	 rcx, QWORD PTR res$[rsp]
  001a0	48 8b d7	 mov	 rdx, rdi
  001a3	e8 00 00 00 00	 call	 _PyBytes_Resize
$LN1@buffered_r@5:

; 967  :     return res;

  001a8	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
  001ad	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]

; 968  : }

  001b2	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  001b7	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001bb	5e		 pop	 rsi
  001bc	c3		 ret	 0
buffered_read1 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@CMHMKCHJ@buffered_readinto?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_readinto DD imagerel buffered_readinto
	DD	imagerel buffered_readinto+97
	DD	imagerel $unwind$buffered_readinto
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$buffered_readinto DD imagerel buffered_readinto+97
	DD	imagerel buffered_readinto+337
	DD	imagerel $chain$0$buffered_readinto
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$buffered_readinto DD imagerel buffered_readinto+337
	DD	imagerel buffered_readinto+473
	DD	imagerel $chain$1$buffered_readinto
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$buffered_readinto DD imagerel buffered_readinto+473
	DD	imagerel buffered_readinto+516
	DD	imagerel $chain$2$buffered_readinto
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$buffered_readinto DD imagerel buffered_readinto+516
	DD	imagerel buffered_readinto+538
	DD	imagerel $chain$3$buffered_readinto
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$buffered_readinto DD imagerel buffered_readinto+538
	DD	imagerel buffered_readinto+663
	DD	imagerel $chain$4$buffered_readinto
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$buffered_readinto DD 040021H
	DD	0136400H
	DD	0123400H
	DD	imagerel buffered_readinto
	DD	imagerel buffered_readinto+97
	DD	imagerel $unwind$buffered_readinto
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$buffered_readinto DD 021H
	DD	imagerel buffered_readinto
	DD	imagerel buffered_readinto+97
	DD	imagerel $unwind$buffered_readinto
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$buffered_readinto DD 021H
	DD	imagerel buffered_readinto+97
	DD	imagerel buffered_readinto+337
	DD	imagerel $chain$0$buffered_readinto
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$buffered_readinto DD 020821H
	DD	0136408H
	DD	imagerel buffered_readinto+97
	DD	imagerel buffered_readinto+337
	DD	imagerel $chain$0$buffered_readinto
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$buffered_readinto DD 020821H
	DD	0123408H
	DD	imagerel buffered_readinto
	DD	imagerel buffered_readinto+97
	DD	imagerel $unwind$buffered_readinto
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_readinto DD 061301H
	DD	0157413H
	DD	0145413H
	DD	0c00cf213H
xdata	ENDS
;	COMDAT ??_C@_0BC@CMHMKCHJ@buffered_readinto?$AA@
CONST	SEGMENT
??_C@_0BC@CMHMKCHJ@buffered_readinto?$AA@ DB 'buffered_readinto', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT buffered_readinto
_TEXT	SEGMENT
buf$ = 48
self$ = 144
args$ = 152
buffered_readinto PROC					; COMDAT

; 972  : {

  00000	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  00005	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0000a	41 54		 push	 r12
  0000c	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H

; 973  :     Py_buffer buf;
; 974  :     Py_ssize_t n, written = 0, remaining;

  00013	33 ed		 xor	 ebp, ebp

; 975  :     PyObject *res = NULL;

  00015	45 33 e4	 xor	 r12d, r12d
  00018	48 8b c2	 mov	 rax, rdx
  0001b	48 8b f9	 mov	 rdi, rcx

; 976  : 
; 977  :     CHECK_INITIALIZED(self)

  0001e	39 69 68	 cmp	 DWORD PTR [rcx+104], ebp
  00021	7f 26		 jg	 SHORT $LN28@buffered_r@6
  00023	39 69 6c	 cmp	 DWORD PTR [rcx+108], ebp
  00026	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  00034	75 07		 jne	 SHORT $LN45@buffered_r@6
  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
$LN45@buffered_r@6:
  0003d	e8 00 00 00 00	 call	 PyErr_SetString
$LN46@buffered_r@6:
  00042	33 c0		 xor	 eax, eax
  00044	e9 bb 01 00 00	 jmp	 $LN29@buffered_r@6
$LN28@buffered_r@6:

; 978  : 
; 979  :     if (!PyArg_ParseTuple(args, "w*:readinto", &buf))

  00049	4c 8d 44 24 30	 lea	 r8, QWORD PTR buf$[rsp]
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@MJKGPJDA@w?$CK?3readinto?$AA@
  00055	48 8b c8	 mov	 rcx, rax
  00058	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0005d	85 c0		 test	 eax, eax

; 980  :         return NULL;

  0005f	74 e1		 je	 SHORT $LN46@buffered_r@6

; 981  : 
; 982  :     n = Py_SAFE_DOWNCAST(READAHEAD(self), Py_off_t, Py_ssize_t);

  00061	48 89 9c 24 90
	00 00 00	 mov	 QWORD PTR [rsp+144], rbx
  00069	39 6f 70	 cmp	 DWORD PTR [rdi+112], ebp
  0006c	74 66		 je	 SHORT $LN24@buffered_r@6
  0006e	48 8b 9f a0 00
	00 00		 mov	 rbx, QWORD PTR [rdi+160]
  00075	48 83 fb ff	 cmp	 rbx, -1
  00079	74 59		 je	 SHORT $LN24@buffered_r@6
  0007b	48 8b 8f 90 00
	00 00		 mov	 rcx, QWORD PTR [rdi+144]
  00082	48 2b d9	 sub	 rbx, rcx

; 983  :     if (n > 0) {

  00085	48 85 db	 test	 rbx, rbx
  00088	7e 4a		 jle	 SHORT $LN24@buffered_r@6

; 984  :         if (n >= buf.len) {
; 985  :             memcpy(buf.buf, self->buffer + self->pos, buf.len);

  0008a	48 8b 87 88 00
	00 00		 mov	 rax, QWORD PTR [rdi+136]
  00091	4c 8b 44 24 40	 mov	 r8, QWORD PTR buf$[rsp+16]
  00096	48 8d 14 01	 lea	 rdx, QWORD PTR [rcx+rax]
  0009a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR buf$[rsp]
  0009f	49 3b d8	 cmp	 rbx, r8
  000a2	7c 1e		 jl	 SHORT $LN23@buffered_r@6
  000a4	e8 00 00 00 00	 call	 memcpy

; 986  :             self->pos += buf.len;

  000a9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buf$[rsp+16]
  000ae	48 01 8f 90 00
	00 00		 add	 QWORD PTR [rdi+144], rcx

; 987  :             res = PyLong_FromSsize_t(buf.len);

  000b5	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  000ba	4c 8b e0	 mov	 r12, rax

; 988  :             goto end_unlocked;

  000bd	e9 2d 01 00 00	 jmp	 $end_unlocked$21175
$LN23@buffered_r@6:

; 989  :         }
; 990  :         memcpy(buf.buf, self->buffer + self->pos, n);

  000c2	4c 8b c3	 mov	 r8, rbx
  000c5	e8 00 00 00 00	 call	 memcpy

; 991  :         self->pos += n;

  000ca	48 01 9f 90 00
	00 00		 add	 QWORD PTR [rdi+144], rbx

; 992  :         written = n;

  000d1	48 8b eb	 mov	 rbp, rbx
$LN24@buffered_r@6:

; 993  :     }
; 994  : 
; 995  :     if (!ENTER_BUFFERED(self))

  000d4	48 8b 8f b8 00
	00 00		 mov	 rcx, QWORD PTR [rdi+184]
  000db	33 d2		 xor	 edx, edx
  000dd	e8 00 00 00 00	 call	 PyThread_acquire_lock
  000e2	85 c0		 test	 eax, eax
  000e4	75 10		 jne	 SHORT $LN40@buffered_r@6
  000e6	48 8b cf	 mov	 rcx, rdi
  000e9	e8 00 00 00 00	 call	 _enter_buffered_busy
  000ee	85 c0		 test	 eax, eax
  000f0	0f 84 f9 00 00
	00		 je	 $end_unlocked$21175
$LN40@buffered_r@6:
  000f6	e8 00 00 00 00	 call	 PyThread_get_thread_ident
  000fb	89 87 c0 00 00
	00		 mov	 DWORD PTR [rdi+192], eax

; 996  :         goto end_unlocked;
; 997  : 
; 998  :     if (self->writable) {

  00101	44 39 67 74	 cmp	 DWORD PTR [rdi+116], r12d
  00105	74 47		 je	 SHORT $LN16@buffered_r@6

; 999  :         res = buffered_flush_and_rewind_unlocked(self);

  00107	48 8b cf	 mov	 rcx, rdi
  0010a	e8 00 00 00 00	 call	 buffered_flush_and_rewind_unlocked
  0010f	4c 8b e0	 mov	 r12, rax

; 1000 :         if (res == NULL)

  00112	48 85 c0	 test	 rax, rax
  00115	0f 84 be 00 00
	00		 je	 $end$21181

; 1001 :             goto end;
; 1002 :         Py_CLEAR(res);

  0011b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  00122	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@CMHMKCHJ@buffered_readinto?$AA@
  00129	4c 8b c8	 mov	 r9, rax
  0012c	41 b8 ea 03 00
	00		 mov	 r8d, 1002		; 000003eaH
  00132	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0013a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0013f	85 c0		 test	 eax, eax
  00141	75 0b		 jne	 SHORT $LN16@buffered_r@6
  00143	49 8b cc	 mov	 rcx, r12
  00146	45 33 e4	 xor	 r12d, r12d
  00149	e8 00 00 00 00	 call	 _Py_DecRef
$LN16@buffered_r@6:

; 1003 :     }
; 1004 : 
; 1005 :     _bufferedreader_reset_buf(self);

  0014e	48 8b cf	 mov	 rcx, rdi
  00151	48 89 b4 24 98
	00 00 00	 mov	 QWORD PTR [rsp+152], rsi
  00159	e8 00 00 00 00	 call	 _bufferedreader_reset_buf

; 1006 :     self->pos = 0;
; 1007 : 
; 1008 :     for (remaining = buf.len - written;
; 1009 :          remaining > 0;
; 1010 :          written += n, remaining -= n) {

  0015e	48 8b 74 24 40	 mov	 rsi, QWORD PTR buf$[rsp+16]
  00163	48 c7 87 90 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rdi+144], 0
  0016e	48 2b f5	 sub	 rsi, rbp
  00171	48 85 f6	 test	 rsi, rsi
  00174	7e 50		 jle	 SHORT $LN6@buffered_r@6
  00176	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL14@buffered_r@6:

; 1011 :         /* If remaining bytes is larger than internal buffer size, copy
; 1012 :          * directly into caller's buffer. */
; 1013 :         if (remaining > self->buffer_size) {
; 1014 :             n = _bufferedreader_raw_read(self, (char *) buf.buf + written,
; 1015 :                                          remaining);

  00180	48 8b cf	 mov	 rcx, rdi
  00183	48 3b b7 c8 00
	00 00		 cmp	 rsi, QWORD PTR [rdi+200]
  0018a	0f 8e 8a 00 00
	00		 jle	 $LN11@buffered_r@6
  00190	48 8b 54 24 30	 mov	 rdx, QWORD PTR buf$[rsp]
  00195	4c 8b c6	 mov	 r8, rsi
  00198	48 03 d5	 add	 rdx, rbp
  0019b	e8 00 00 00 00	 call	 _bufferedreader_raw_read
  001a0	48 8b d8	 mov	 rbx, rax
$LN9@buffered_r@6:

; 1026 :             }
; 1027 :         }
; 1028 :         if (n == 0 || (n == -2 && written > 0))

  001a3	48 85 db	 test	 rbx, rbx
  001a6	74 1e		 je	 SHORT $LN6@buffered_r@6
  001a8	48 83 fb fe	 cmp	 rbx, -2
  001ac	0f 84 c8 00 00
	00		 je	 $LN42@buffered_r@6

; 1029 :             break;
; 1030 :         if (n < 0) {

  001b2	48 85 db	 test	 rbx, rbx
  001b5	0f 88 a1 00 00
	00		 js	 $LN37@buffered_r@6
$LN13@buffered_r@6:

; 1006 :     self->pos = 0;
; 1007 : 
; 1008 :     for (remaining = buf.len - written;
; 1009 :          remaining > 0;
; 1010 :          written += n, remaining -= n) {

  001bb	48 2b f3	 sub	 rsi, rbx
  001be	48 03 eb	 add	 rbp, rbx
  001c1	48 85 f6	 test	 rsi, rsi
  001c4	7f ba		 jg	 SHORT $LL14@buffered_r@6
$LN6@buffered_r@6:

; 1036 :         }
; 1037 :     }
; 1038 :     res = PyLong_FromSsize_t(written);

  001c6	48 8b cd	 mov	 rcx, rbp
  001c9	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  001ce	4c 8b e0	 mov	 r12, rax
$LN44@buffered_r@6:
  001d1	48 8b b4 24 98
	00 00 00	 mov	 rsi, QWORD PTR [rsp+152]
$end$21181:

; 1039 : 
; 1040 : end:
; 1041 :     LEAVE_BUFFERED(self);

  001d9	48 8b 8f b8 00
	00 00		 mov	 rcx, QWORD PTR [rdi+184]
  001e0	c7 87 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rdi+192], 0
  001ea	e8 00 00 00 00	 call	 PyThread_release_lock
$end_unlocked$21175:

; 1042 : end_unlocked:
; 1043 :     PyBuffer_Release(&buf);

  001ef	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  001f4	e8 00 00 00 00	 call	 PyBuffer_Release
  001f9	48 8b 9c 24 90
	00 00 00	 mov	 rbx, QWORD PTR [rsp+144]

; 1044 :     return res;

  00201	49 8b c4	 mov	 rax, r12
$LN29@buffered_r@6:

; 1045 : }

  00204	4c 8d 9c 24 80
	00 00 00	 lea	 r11, QWORD PTR [rsp+128]
  0020c	49 8b 6b 20	 mov	 rbp, QWORD PTR [r11+32]
  00210	49 8b 7b 28	 mov	 rdi, QWORD PTR [r11+40]
  00214	49 8b e3	 mov	 rsp, r11
  00217	41 5c		 pop	 r12
  00219	c3		 ret	 0
$LN11@buffered_r@6:

; 1016 :         }
; 1017 :         else {
; 1018 :             n = _bufferedreader_fill_buffer(self);

  0021a	e8 00 00 00 00	 call	 _bufferedreader_fill_buffer
  0021f	48 8b d8	 mov	 rbx, rax

; 1019 :             if (n > 0) {

  00222	48 85 c0	 test	 rax, rax
  00225	0f 8e 78 ff ff
	ff		 jle	 $LN9@buffered_r@6

; 1020 :                 if (n > remaining)
; 1021 :                     n = remaining;
; 1022 :                 memcpy((char *) buf.buf + written,
; 1023 :                        self->buffer + self->pos, n);

  0022b	48 8b 97 88 00
	00 00		 mov	 rdx, QWORD PTR [rdi+136]
  00232	48 8b 4c 24 30	 mov	 rcx, QWORD PTR buf$[rsp]
  00237	48 3b c6	 cmp	 rax, rsi
  0023a	48 0f 4f de	 cmovg	 rbx, rsi
  0023e	48 03 97 90 00
	00 00		 add	 rdx, QWORD PTR [rdi+144]
  00245	48 03 cd	 add	 rcx, rbp
  00248	4c 8b c3	 mov	 r8, rbx
  0024b	e8 00 00 00 00	 call	 memcpy

; 1024 :                 self->pos += n;

  00250	48 01 9f 90 00
	00 00		 add	 QWORD PTR [rdi+144], rbx

; 1025 :                 continue; /* short circuit */

  00257	e9 5f ff ff ff	 jmp	 $LN13@buffered_r@6
$LN37@buffered_r@6:

; 1031 :             if (n == -2) {

  0025c	48 83 fb fe	 cmp	 rbx, -2
  00260	0f 85 6b ff ff
	ff		 jne	 $LN44@buffered_r@6

; 1032 :                 Py_INCREF(Py_None);

  00266	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:_Py_NoneStruct
  0026d	49 8b cc	 mov	 rcx, r12
  00270	e8 00 00 00 00	 call	 _Py_IncRef

; 1033 :                 res = Py_None;
; 1034 :             }
; 1035 :             goto end;

  00275	e9 57 ff ff ff	 jmp	 $LN44@buffered_r@6
$LN42@buffered_r@6:

; 1026 :             }
; 1027 :         }
; 1028 :         if (n == 0 || (n == -2 && written > 0))

  0027a	48 85 ed	 test	 rbp, rbp
  0027d	0f 8f 43 ff ff
	ff		 jg	 $LN6@buffered_r@6

; 1032 :                 Py_INCREF(Py_None);

  00283	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:_Py_NoneStruct
  0028a	49 8b cc	 mov	 rcx, r12
  0028d	e8 00 00 00 00	 call	 _Py_IncRef

; 1033 :                 res = Py_None;
; 1034 :             }
; 1035 :             goto end;

  00292	e9 3a ff ff ff	 jmp	 $LN44@buffered_r@6
buffered_readinto ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@DCNDJMFC@_buffered_readline?$AA@	; `string'
PUBLIC	??_C@_0BI@GJHAPCIJ@readline?5of?5closed?5file?$AA@ ; `string'
EXTRN	_PyBytes_Join:PROC
EXTRN	_PyIO_empty_bytes:QWORD
EXTRN	PyList_Append:PROC
EXTRN	PyList_New:PROC
EXTRN	__imp_memchr:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_buffered_readline DD imagerel _buffered_readline
	DD	imagerel _buffered_readline+295
	DD	imagerel $unwind$_buffered_readline
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$_buffered_readline DD imagerel _buffered_readline+295
	DD	imagerel _buffered_readline+1023
	DD	imagerel $chain$3$_buffered_readline
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$_buffered_readline DD imagerel _buffered_readline+1023
	DD	imagerel _buffered_readline+1052
	DD	imagerel $chain$4$_buffered_readline
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$_buffered_readline DD 021H
	DD	imagerel _buffered_readline
	DD	imagerel _buffered_readline+295
	DD	imagerel $unwind$_buffered_readline
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$_buffered_readline DD 020521H
	DD	06e405H
	DD	imagerel _buffered_readline
	DD	imagerel _buffered_readline+295
	DD	imagerel $unwind$_buffered_readline
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_buffered_readline DD 0b5e01H
	DD	0ed45eH
	DD	0d6459H
	DD	0c3454H
	DD	0f007620bH
	DD	07003c005H
	DD	05002H
xdata	ENDS
;	COMDAT ??_C@_0BD@DCNDJMFC@_buffered_readline?$AA@
CONST	SEGMENT
??_C@_0BD@DCNDJMFC@_buffered_readline?$AA@ DB '_buffered_readline', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GJHAPCIJ@readline?5of?5closed?5file?$AA@
CONST	SEGMENT
??_C@_0BI@GJHAPCIJ@readline?5of?5closed?5file?$AA@ DB 'readline of closed'
	DB	' file', 00H					; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\bufferedio.c
CONST	ENDS
;	COMDAT _buffered_readline
_TEXT	SEGMENT
self$ = 96
limit$ = 104
_buffered_readline PROC					; COMDAT

; 1049 : {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	41 54		 push	 r12
  00005	41 57		 push	 r15
  00007	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1050 :     PyObject *res = NULL;

  0000b	33 ff		 xor	 edi, edi

; 1051 :     PyObject *chunks = NULL;
; 1052 :     Py_ssize_t n, written = 0;

  0000d	45 33 ff	 xor	 r15d, r15d
  00010	4c 8b e2	 mov	 r12, rdx
  00013	48 8b e9	 mov	 rbp, rcx

; 1053 :     const char *start, *s, *end;
; 1054 : 
; 1055 :     CHECK_CLOSED(self, "readline of closed file")

  00016	39 79 7c	 cmp	 DWORD PTR [rcx+124], edi
  00019	74 0b		 je	 SHORT $LN63@buffered_r@7
  0001b	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  0001f	e8 00 00 00 00	 call	 _PyFileIO_closed
  00024	eb 05		 jmp	 SHORT $LN64@buffered_r@7
$LN63@buffered_r@7:
  00026	e8 00 00 00 00	 call	 buffered_closed
$LN64@buffered_r@7:
  0002b	85 c0		 test	 eax, eax
  0002d	74 20		 je	 SHORT $LN60@buffered_r@7
  0002f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@GJHAPCIJ@readline?5of?5closed?5file?$AA@
  0003d	e8 00 00 00 00	 call	 PyErr_SetString
  00042	33 c0		 xor	 eax, eax

; 1156 : }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	41 5f		 pop	 r15
  0004a	41 5c		 pop	 r12
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
$LN60@buffered_r@7:
  0004f	48 89 5c 24 60	 mov	 QWORD PTR [rsp+96], rbx
  00054	48 89 74 24 68	 mov	 QWORD PTR [rsp+104], rsi
  00059	4c 89 6c 24 70	 mov	 QWORD PTR [rsp+112], r13

; 1056 : 
; 1057 :     /* First, try to find a line in the buffer. This can run unlocked because
; 1058 :        the calls to the C API are simple enough that they can't trigger
; 1059 :        any thread switch. */
; 1060 :     n = Py_SAFE_DOWNCAST(READAHEAD(self), Py_off_t, Py_ssize_t);

  0005e	39 7d 70	 cmp	 DWORD PTR [rbp+112], edi
  00061	74 16		 je	 SHORT $LN65@buffered_r@7
  00063	48 8b 9d a0 00
	00 00		 mov	 rbx, QWORD PTR [rbp+160]
  0006a	48 83 fb ff	 cmp	 rbx, -1
  0006e	74 09		 je	 SHORT $LN65@buffered_r@7
  00070	48 2b 9d 90 00
	00 00		 sub	 rbx, QWORD PTR [rbp+144]
  00077	eb 02		 jmp	 SHORT $LN66@buffered_r@7
$LN65@buffered_r@7:
  00079	33 db		 xor	 ebx, ebx
$LN66@buffered_r@7:

; 1061 :     if (limit >= 0 && n > limit)

  0007b	4d 85 e4	 test	 r12, r12
  0007e	78 07		 js	 SHORT $LN59@buffered_r@7
  00080	49 3b dc	 cmp	 rbx, r12
  00083	49 0f 4f dc	 cmovg	 rbx, r12
$LN59@buffered_r@7:

; 1062 :         n = limit;
; 1063 :     start = self->buffer + self->pos;

  00087	4c 8b ad 88 00
	00 00		 mov	 r13, QWORD PTR [rbp+136]

; 1064 :     s = memchr(start, '\n', n);

  0008e	4c 8b c3	 mov	 r8, rbx
  00091	ba 0a 00 00 00	 mov	 edx, 10
  00096	4c 03 ad 90 00
	00 00		 add	 r13, QWORD PTR [rbp+144]
  0009d	49 8b cd	 mov	 rcx, r13
  000a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memchr
  000a6	48 8b f0	 mov	 rsi, rax

; 1065 :     if (s != NULL) {

  000a9	48 85 c0	 test	 rax, rax
  000ac	74 2f		 je	 SHORT $LN58@buffered_r@7

; 1066 :         res = PyBytes_FromStringAndSize(start, s - start + 1);

  000ae	48 8b d0	 mov	 rdx, rax
  000b1	49 8b cd	 mov	 rcx, r13
  000b4	49 2b d5	 sub	 rdx, r13
  000b7	48 ff c2	 inc	 rdx
  000ba	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  000bf	48 8b f8	 mov	 rdi, rax

; 1067 :         if (res != NULL)

  000c2	48 85 c0	 test	 rax, rax
  000c5	0f 84 34 03 00
	00		 je	 $LN3@buffered_r@7

; 1068 :             self->pos += s - start + 1;

  000cb	49 2b f5	 sub	 rsi, r13
  000ce	48 ff c6	 inc	 rsi
  000d1	48 01 b5 90 00
	00 00		 add	 QWORD PTR [rbp+144], rsi

; 1069 :         goto end_unlocked;

  000d8	e9 22 03 00 00	 jmp	 $LN3@buffered_r@7
$LN58@buffered_r@7:

; 1070 :     }
; 1071 :     if (n == limit) {

  000dd	49 3b dc	 cmp	 rbx, r12
  000e0	75 23		 jne	 SHORT $LN56@buffered_r@7

; 1072 :         res = PyBytes_FromStringAndSize(start, n);

  000e2	48 8b d3	 mov	 rdx, rbx
  000e5	49 8b cd	 mov	 rcx, r13
  000e8	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  000ed	48 8b f8	 mov	 rdi, rax

; 1073 :         if (res != NULL)

  000f0	48 85 c0	 test	 rax, rax
  000f3	0f 84 06 03 00
	00		 je	 $LN3@buffered_r@7

; 1074 :             self->pos += n;

  000f9	48 01 9d 90 00
	00 00		 add	 QWORD PTR [rbp+144], rbx

; 1075 :         goto end_unlocked;

  00100	e9 fa 02 00 00	 jmp	 $LN3@buffered_r@7
$LN56@buffered_r@7:

; 1076 :     }
; 1077 : 
; 1078 :     if (!ENTER_BUFFERED(self))

  00105	48 8b 8d b8 00
	00 00		 mov	 rcx, QWORD PTR [rbp+184]
  0010c	33 d2		 xor	 edx, edx
  0010e	e8 00 00 00 00	 call	 PyThread_acquire_lock
  00113	85 c0		 test	 eax, eax
  00115	75 10		 jne	 SHORT $LN88@buffered_r@7
  00117	48 8b cd	 mov	 rcx, rbp
  0011a	e8 00 00 00 00	 call	 _enter_buffered_busy
  0011f	85 c0		 test	 eax, eax
  00121	0f 84 d8 02 00
	00		 je	 $LN3@buffered_r@7
$LN88@buffered_r@7:
  00127	4c 89 74 24 30	 mov	 QWORD PTR [rsp+48], r14
  0012c	e8 00 00 00 00	 call	 PyThread_get_thread_ident

; 1079 :         goto end_unlocked;
; 1080 : 
; 1081 :     /* Now we try to get some more from the raw stream */
; 1082 :     chunks = PyList_New(0);

  00131	33 c9		 xor	 ecx, ecx
  00133	89 85 c0 00 00
	00		 mov	 DWORD PTR [rbp+192], eax
  00139	e8 00 00 00 00	 call	 PyList_New
  0013e	4c 8b f0	 mov	 r14, rax

; 1083 :     if (chunks == NULL)

  00141	48 85 c0	 test	 rax, rax
  00144	0f 84 30 02 00
	00		 je	 $end$21240

; 1084 :         goto end;
; 1085 :     if (n > 0) {

  0014a	48 85 db	 test	 rbx, rbx
  0014d	0f 8e 8c 00 00
	00		 jle	 $LN40@buffered_r@7

; 1086 :         res = PyBytes_FromStringAndSize(start, n);

  00153	48 8b d3	 mov	 rdx, rbx
  00156	49 8b cd	 mov	 rcx, r13
  00159	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  0015e	48 8b f8	 mov	 rdi, rax

; 1087 :         if (res == NULL)

  00161	48 85 c0	 test	 rax, rax
  00164	0f 84 10 02 00
	00		 je	 $end$21240

; 1088 :             goto end;
; 1089 :         if (PyList_Append(chunks, res) < 0) {

  0016a	48 8b d0	 mov	 rdx, rax
  0016d	49 8b ce	 mov	 rcx, r14
  00170	e8 00 00 00 00	 call	 PyList_Append

; 1090 :             Py_CLEAR(res);

  00175	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0017d	4c 8b cf	 mov	 r9, rdi
  00180	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  00187	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@DCNDJMFC@_buffered_readline?$AA@
  0018e	85 c0		 test	 eax, eax
  00190	79 22		 jns	 SHORT $LN44@buffered_r@7
  00192	41 b8 42 04 00
	00		 mov	 r8d, 1090		; 00000442H
$LN91@buffered_r@7:
  00198	e8 00 00 00 00	 call	 _PyParallel_Guard
  0019d	85 c0		 test	 eax, eax
  0019f	0f 85 d5 01 00
	00		 jne	 $end$21240
  001a5	48 8b cf	 mov	 rcx, rdi
  001a8	33 ff		 xor	 edi, edi
  001aa	e8 00 00 00 00	 call	 _Py_DecRef

; 1091 :             goto end;

  001af	e9 c6 01 00 00	 jmp	 $end$21240
$LN44@buffered_r@7:

; 1092 :         }
; 1093 :         Py_CLEAR(res);

  001b4	41 b8 45 04 00
	00		 mov	 r8d, 1093		; 00000445H
  001ba	e8 00 00 00 00	 call	 _PyParallel_Guard
  001bf	85 c0		 test	 eax, eax
  001c1	75 0a		 jne	 SHORT $LN43@buffered_r@7
  001c3	48 8b cf	 mov	 rcx, rdi
  001c6	33 ff		 xor	 edi, edi
  001c8	e8 00 00 00 00	 call	 _Py_DecRef
$LN43@buffered_r@7:

; 1094 :         written += n;
; 1095 :         self->pos += n;

  001cd	48 01 9d 90 00
	00 00		 add	 QWORD PTR [rbp+144], rbx
  001d4	4c 8b fb	 mov	 r15, rbx

; 1096 :         if (limit >= 0)

  001d7	4d 85 e4	 test	 r12, r12
  001da	78 03		 js	 SHORT $LN40@buffered_r@7

; 1097 :             limit -= n;

  001dc	4c 2b e3	 sub	 r12, rbx
$LN40@buffered_r@7:

; 1098 :     }
; 1099 :     if (self->writable) {

  001df	83 7d 74 00	 cmp	 DWORD PTR [rbp+116], 0
  001e3	74 19		 je	 SHORT $LN80@buffered_r@7

; 1100 :         PyObject *r = buffered_flush_and_rewind_unlocked(self);

  001e5	48 8b cd	 mov	 rcx, rbp
  001e8	e8 00 00 00 00	 call	 buffered_flush_and_rewind_unlocked

; 1101 :         if (r == NULL)

  001ed	48 85 c0	 test	 rax, rax
  001f0	0f 84 84 01 00
	00		 je	 $end$21240

; 1102 :             goto end;
; 1103 :         Py_DECREF(r);

  001f6	48 8b c8	 mov	 rcx, rax
  001f9	e8 00 00 00 00	 call	 _Py_DecRef
$LN80@buffered_r@7:

; 1104 :     }
; 1105 : 
; 1106 :     for (;;) {
; 1107 :         _bufferedreader_reset_buf(self);

  001fe	48 8b cd	 mov	 rcx, rbp
  00201	e8 00 00 00 00	 call	 _bufferedreader_reset_buf

; 1108 :         n = _bufferedreader_fill_buffer(self);

  00206	e8 00 00 00 00	 call	 _bufferedreader_fill_buffer
  0020b	48 8b f0	 mov	 rsi, rax

; 1109 :         if (n == -1)

  0020e	48 83 f8 ff	 cmp	 rax, -1
  00212	0f 84 62 01 00
	00		 je	 $end$21240
  00218	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL37@buffered_r@7:

; 1110 :             goto end;
; 1111 :         if (n <= 0)

  00220	48 85 f6	 test	 rsi, rsi
  00223	0f 8e f0 00 00
	00		 jle	 $found$21280

; 1112 :             break;
; 1113 :         if (limit >= 0 && n > limit)

  00229	4d 85 e4	 test	 r12, r12
  0022c	78 07		 js	 SHORT $LN33@buffered_r@7
  0022e	49 3b f4	 cmp	 rsi, r12
  00231	49 0f 4f f4	 cmovg	 rsi, r12
$LN33@buffered_r@7:

; 1114 :             n = limit;
; 1115 :         start = self->buffer;

  00235	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR [rbp+136]

; 1116 :         end = start + n;
; 1117 :         s = start;

  0023c	48 8b d9	 mov	 rbx, rcx
  0023f	48 8d 14 31	 lea	 rdx, QWORD PTR [rcx+rsi]

; 1118 :         while (s < end) {

  00243	48 3b ca	 cmp	 rcx, rdx
  00246	73 1b		 jae	 SHORT $LN31@buffered_r@7
  00248	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL32@buffered_r@7:

; 1119 :             if (*s++ == '\n') {

  00250	0f b6 03	 movzx	 eax, BYTE PTR [rbx]
  00253	48 ff c3	 inc	 rbx
  00256	3c 0a		 cmp	 al, 10
  00258	0f 84 8d 00 00
	00		 je	 $LN82@buffered_r@7

; 1118 :         while (s < end) {

  0025e	48 3b da	 cmp	 rbx, rdx
  00261	72 ed		 jb	 SHORT $LL32@buffered_r@7
$LN31@buffered_r@7:

; 1125 :             }
; 1126 :         }
; 1127 :         res = PyBytes_FromStringAndSize(start, n);

  00263	48 8b d6	 mov	 rdx, rsi
  00266	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  0026b	48 8b f8	 mov	 rdi, rax

; 1128 :         if (res == NULL)

  0026e	48 85 c0	 test	 rax, rax
  00271	0f 84 03 01 00
	00		 je	 $end$21240

; 1129 :             goto end;
; 1130 :         if (n == limit) {

  00277	49 3b f4	 cmp	 rsi, r12
  0027a	0f 84 92 00 00
	00		 je	 $LN86@buffered_r@7

; 1132 :             break;
; 1133 :         }
; 1134 :         if (PyList_Append(chunks, res) < 0) {

  00280	48 8b d0	 mov	 rdx, rax
  00283	49 8b ce	 mov	 rcx, r14
  00286	e8 00 00 00 00	 call	 PyList_Append

; 1136 :             goto end;
; 1137 :         }
; 1138 :         Py_CLEAR(res);

  0028b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00293	4c 8b cf	 mov	 r9, rdi
  00296	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  0029d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@DCNDJMFC@_buffered_readline?$AA@
  002a4	85 c0		 test	 eax, eax
  002a6	78 5f		 js	 SHORT $LN87@buffered_r@7
  002a8	41 b8 72 04 00
	00		 mov	 r8d, 1138		; 00000472H
  002ae	e8 00 00 00 00	 call	 _PyParallel_Guard
  002b3	85 c0		 test	 eax, eax
  002b5	75 0a		 jne	 SHORT $LN20@buffered_r@7
  002b7	48 8b cf	 mov	 rcx, rdi
  002ba	33 ff		 xor	 edi, edi
  002bc	e8 00 00 00 00	 call	 _Py_DecRef
$LN20@buffered_r@7:

; 1139 :         written += n;

  002c1	4c 03 fe	 add	 r15, rsi

; 1140 :         if (limit >= 0)

  002c4	4d 85 e4	 test	 r12, r12
  002c7	78 03		 js	 SHORT $LN17@buffered_r@7

; 1141 :             limit -= n;

  002c9	4c 2b e6	 sub	 r12, rsi
$LN17@buffered_r@7:

; 1104 :     }
; 1105 : 
; 1106 :     for (;;) {
; 1107 :         _bufferedreader_reset_buf(self);

  002cc	48 8b cd	 mov	 rcx, rbp
  002cf	e8 00 00 00 00	 call	 _bufferedreader_reset_buf

; 1108 :         n = _bufferedreader_fill_buffer(self);

  002d4	e8 00 00 00 00	 call	 _bufferedreader_fill_buffer
  002d9	48 8b f0	 mov	 rsi, rax

; 1109 :         if (n == -1)

  002dc	48 83 f8 ff	 cmp	 rax, -1
  002e0	0f 85 3a ff ff
	ff		 jne	 $LL37@buffered_r@7
  002e6	e9 8f 00 00 00	 jmp	 $end$21240
$LN82@buffered_r@7:

; 1120 :                 res = PyBytes_FromStringAndSize(start, s - start);

  002eb	48 2b d9	 sub	 rbx, rcx
  002ee	48 8b d3	 mov	 rdx, rbx
  002f1	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  002f6	48 8b f8	 mov	 rdi, rax

; 1121 :                 if (res == NULL)

  002f9	48 85 c0	 test	 rax, rax
  002fc	74 7c		 je	 SHORT $end$21240

; 1122 :                     goto end;
; 1123 :                 self->pos = s - start;

  002fe	48 89 9d 90 00
	00 00		 mov	 QWORD PTR [rbp+144], rbx

; 1124 :                 goto found;

  00305	eb 12		 jmp	 SHORT $found$21280
$LN87@buffered_r@7:

; 1135 :             Py_CLEAR(res);

  00307	41 b8 6f 04 00
	00		 mov	 r8d, 1135		; 0000046fH
  0030d	e9 86 fe ff ff	 jmp	 $LN91@buffered_r@7
$LN86@buffered_r@7:

; 1131 :             self->pos = n;

  00312	48 89 b5 90 00
	00 00		 mov	 QWORD PTR [rbp+144], rsi
$found$21280:

; 1142 :     }
; 1143 : found:
; 1144 :     if (res != NULL && PyList_Append(chunks, res) < 0) {

  00319	48 85 ff	 test	 rdi, rdi
  0031c	74 4a		 je	 SHORT $LN10@buffered_r@7
  0031e	48 8b d7	 mov	 rdx, rdi
  00321	49 8b ce	 mov	 rcx, r14
  00324	e8 00 00 00 00	 call	 PyList_Append

; 1145 :         Py_CLEAR(res);

  00329	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00331	4c 8b cf	 mov	 r9, rdi
  00334	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  0033b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@DCNDJMFC@_buffered_readline?$AA@
  00342	85 c0		 test	 eax, eax
  00344	79 0b		 jns	 SHORT $LN11@buffered_r@7
  00346	41 b8 79 04 00
	00		 mov	 r8d, 1145		; 00000479H

; 1146 :         goto end;

  0034c	e9 47 fe ff ff	 jmp	 $LN91@buffered_r@7
$LN11@buffered_r@7:

; 1147 :     }
; 1148 :     Py_CLEAR(res);

  00351	41 b8 7c 04 00
	00		 mov	 r8d, 1148		; 0000047cH
  00357	e8 00 00 00 00	 call	 _PyParallel_Guard
  0035c	85 c0		 test	 eax, eax
  0035e	75 08		 jne	 SHORT $LN10@buffered_r@7
  00360	48 8b cf	 mov	 rcx, rdi
  00363	e8 00 00 00 00	 call	 _Py_DecRef
$LN10@buffered_r@7:

; 1149 :     res = _PyBytes_Join(_PyIO_empty_bytes, chunks);

  00368	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyIO_empty_bytes
  0036f	49 8b d6	 mov	 rdx, r14
  00372	e8 00 00 00 00	 call	 _PyBytes_Join
  00377	48 8b f8	 mov	 rdi, rax
$end$21240:

; 1150 : 
; 1151 : end:
; 1152 :     LEAVE_BUFFERED(self)

  0037a	48 8b 8d b8 00
	00 00		 mov	 rcx, QWORD PTR [rbp+184]
  00381	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rbp+192], 0
  0038b	e8 00 00 00 00	 call	 PyThread_release_lock
$end_unlocked$21232:

; 1153 : end_unlocked:
; 1154 :     Py_XDECREF(chunks);

  00390	4d 85 f6	 test	 r14, r14
  00393	74 65		 je	 SHORT $LN90@buffered_r@7
  00395	e8 00 00 00 00	 call	 _Py_PXCTX
  0039a	85 c0		 test	 eax, eax
  0039c	75 5c		 jne	 SHORT $LN90@buffered_r@7
  0039e	49 8b 46 20	 mov	 rax, QWORD PTR [r14+32]
  003a2	a8 20		 test	 al, 32			; 00000020H
  003a4	75 4c		 jne	 SHORT $LN73@buffered_r@7
  003a6	84 c0		 test	 al, al
  003a8	78 48		 js	 SHORT $LN73@buffered_r@7
  003aa	a8 02		 test	 al, 2
  003ac	75 4c		 jne	 SHORT $LN90@buffered_r@7
  003ae	49 ff 4e 50	 dec	 QWORD PTR [r14+80]
  003b2	75 46		 jne	 SHORT $LN90@buffered_r@7
  003b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  003bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  003c2	4d 8b ce	 mov	 r9, r14
  003c5	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  003cb	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003d3	e8 00 00 00 00	 call	 _PyParallel_Guard
  003d8	49 8b ce	 mov	 rcx, r14
  003db	85 c0		 test	 eax, eax
  003dd	74 07		 je	 SHORT $LN78@buffered_r@7
  003df	e8 00 00 00 00	 call	 _Px_Dealloc
  003e4	eb 14		 jmp	 SHORT $LN90@buffered_r@7
$LN78@buffered_r@7:
  003e6	49 8b 46 58	 mov	 rax, QWORD PTR [r14+88]
  003ea	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  003f0	eb 08		 jmp	 SHORT $LN90@buffered_r@7
$LN73@buffered_r@7:
  003f2	49 8b ce	 mov	 rcx, r14
  003f5	e8 00 00 00 00	 call	 Px_DecRef
$LN90@buffered_r@7:
  003fa	4c 8b 74 24 30	 mov	 r14, QWORD PTR [rsp+48]
$LN3@buffered_r@7:
  003ff	4c 8b 6c 24 70	 mov	 r13, QWORD PTR [rsp+112]
  00404	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  00409	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]

; 1155 :     return res;

  0040e	48 8b c7	 mov	 rax, rdi

; 1156 : }

  00411	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00415	41 5f		 pop	 r15
  00417	41 5c		 pop	 r12
  00419	5f		 pop	 rdi
  0041a	5d		 pop	 rbp
  0041b	c3		 ret	 0
_buffered_readline ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@DLBPBHHK@?$HMO?$CG?3readline?$AA@	; `string'
EXTRN	_PyIO_ConvertSsize_t:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_readline DD imagerel buffered_readline
	DD	imagerel buffered_readline+117
	DD	imagerel $unwind$buffered_readline
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_readline DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0N@DLBPBHHK@?$HMO?$CG?3readline?$AA@
CONST	SEGMENT
??_C@_0N@DLBPBHHK@?$HMO?$CG?3readline?$AA@ DB '|O&:readline', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT buffered_readline
_TEXT	SEGMENT
limit$ = 48
self$ = 48
args$ = 56
buffered_readline PROC					; COMDAT

; 1160 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1161 :     Py_ssize_t limit = -1;
; 1162 : 
; 1163 :     CHECK_INITIALIZED(self)

  00006	83 79 68 00	 cmp	 DWORD PTR [rcx+104], 0
  0000a	48 8b c2	 mov	 rax, rdx
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	48 c7 44 24 30
	ff ff ff ff	 mov	 QWORD PTR limit$[rsp], -1
  00019	7f 28		 jg	 SHORT $LN4@buffered_r@8
  0001b	83 79 6c 00	 cmp	 DWORD PTR [rcx+108], 0
  0001f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  0002d	75 07		 jne	 SHORT $LN7@buffered_r@8
  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
$LN7@buffered_r@8:
  00036	e8 00 00 00 00	 call	 PyErr_SetString
$LN8@buffered_r@8:
  0003b	33 c0		 xor	 eax, eax

; 1167 : }

  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5b		 pop	 rbx
  00042	c3		 ret	 0
$LN4@buffered_r@8:

; 1164 :     if (!PyArg_ParseTuple(args, "|O&:readline", &_PyIO_ConvertSsize_t, &limit))

  00043	4c 8d 4c 24 30	 lea	 r9, QWORD PTR limit$[rsp]
  00048	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_PyIO_ConvertSsize_t
  0004f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@DLBPBHHK@?$HMO?$CG?3readline?$AA@
  00056	48 8b c8	 mov	 rcx, rax
  00059	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0005e	85 c0		 test	 eax, eax

; 1165 :         return NULL;

  00060	74 d9		 je	 SHORT $LN8@buffered_r@8

; 1166 :     return _buffered_readline(self, limit);

  00062	48 8b 54 24 30	 mov	 rdx, QWORD PTR limit$[rsp]
  00067	48 8b cb	 mov	 rcx, rbx
  0006a	e8 00 00 00 00	 call	 _buffered_readline

; 1167 : }

  0006f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00073	5b		 pop	 rbx
  00074	c3		 ret	 0
buffered_readline ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@OCLCFAG@whence?5value?5?$CFd?5unsupported?$AA@ ; `string'
PUBLIC	??_C@_0O@BCAMOJFN@buffered_seek?$AA@		; `string'
PUBLIC	??_C@_0BE@MDHELDPL@seek?5of?5closed?5file?$AA@	; `string'
PUBLIC	??_C@_08CCHCKICM@O?$HMi?3seek?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_seek DD imagerel buffered_seek
	DD	imagerel buffered_seek+216
	DD	imagerel $unwind$buffered_seek
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$buffered_seek DD imagerel buffered_seek+216
	DD	imagerel buffered_seek+430
	DD	imagerel $chain$0$buffered_seek
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$buffered_seek DD imagerel buffered_seek+430
	DD	imagerel buffered_seek+478
	DD	imagerel $chain$2$buffered_seek
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$buffered_seek DD imagerel buffered_seek+478
	DD	imagerel buffered_seek+740
	DD	imagerel $chain$4$buffered_seek
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$buffered_seek DD imagerel buffered_seek+740
	DD	imagerel buffered_seek+772
	DD	imagerel $chain$5$buffered_seek
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$buffered_seek DD 021H
	DD	imagerel buffered_seek
	DD	imagerel buffered_seek+216
	DD	imagerel $unwind$buffered_seek
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$buffered_seek DD 020021H
	DD	096400H
	DD	imagerel buffered_seek
	DD	imagerel buffered_seek+216
	DD	imagerel $unwind$buffered_seek
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$buffered_seek DD 020021H
	DD	096400H
	DD	imagerel buffered_seek
	DD	imagerel buffered_seek+216
	DD	imagerel $unwind$buffered_seek
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$buffered_seek DD 020521H
	DD	096405H
	DD	imagerel buffered_seek
	DD	imagerel buffered_seek+216
	DD	imagerel $unwind$buffered_seek
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_seek DD 040a01H
	DD	0b340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0BM@OCLCFAG@whence?5value?5?$CFd?5unsupported?$AA@
CONST	SEGMENT
??_C@_0BM@OCLCFAG@whence?5value?5?$CFd?5unsupported?$AA@ DB 'whence value'
	DB	' %d unsupported', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BCAMOJFN@buffered_seek?$AA@
CONST	SEGMENT
??_C@_0O@BCAMOJFN@buffered_seek?$AA@ DB 'buffered_seek', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MDHELDPL@seek?5of?5closed?5file?$AA@
CONST	SEGMENT
??_C@_0BE@MDHELDPL@seek?5of?5closed?5file?$AA@ DB 'seek of closed file', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08CCHCKICM@O?$HMi?3seek?$AA@
CONST	SEGMENT
??_C@_08CCHCKICM@O?$HMi?3seek?$AA@ DB 'O|i:seek', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT buffered_seek
_TEXT	SEGMENT
whence$ = 64
self$ = 64
args$ = 72
targetobj$ = 80
buffered_seek PROC					; COMDAT

; 1186 : {

  00000	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1187 :     Py_off_t target, n;
; 1188 :     int whence = 0;
; 1189 :     PyObject *targetobj, *res = NULL;

  0000a	33 ff		 xor	 edi, edi
  0000c	48 8b c2	 mov	 rax, rdx
  0000f	48 8b d9	 mov	 rbx, rcx
  00012	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR whence$[rsp], 0

; 1190 : 
; 1191 :     CHECK_INITIALIZED(self)

  0001a	39 79 68	 cmp	 DWORD PTR [rcx+104], edi
  0001d	7f 2c		 jg	 SHORT $LN29@buffered_s@4
  0001f	39 79 6c	 cmp	 DWORD PTR [rcx+108], edi
  00022	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00029	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  00030	75 07		 jne	 SHORT $LN51@buffered_s@4
  00032	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
$LN51@buffered_s@4:
  00039	e8 00 00 00 00	 call	 PyErr_SetString
$LN53@buffered_s@4:
  0003e	33 c0		 xor	 eax, eax

; 1274 : }

  00040	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  00045	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00049	5f		 pop	 rdi
  0004a	c3		 ret	 0
$LN29@buffered_s@4:

; 1192 :     if (!PyArg_ParseTuple(args, "O|i:seek", &targetobj, &whence)) {

  0004b	4c 8d 4c 24 40	 lea	 r9, QWORD PTR whence$[rsp]
  00050	4c 8d 44 24 50	 lea	 r8, QWORD PTR targetobj$[rsp]
  00055	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08CCHCKICM@O?$HMi?3seek?$AA@
  0005c	48 8b c8	 mov	 rcx, rax
  0005f	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00064	85 c0		 test	 eax, eax

; 1193 :         return NULL;

  00066	74 d6		 je	 SHORT $LN53@buffered_s@4

; 1194 :     }
; 1195 : 
; 1196 :     /* Do some error checking instead of trusting OS 'seek()'
; 1197 :     ** error detection, just in case.
; 1198 :     */
; 1199 :     if ((whence < 0 || whence >2)
; 1200 : #ifdef SEEK_HOLE
; 1201 :         && (whence != SEEK_HOLE)
; 1202 : #endif
; 1203 : #ifdef SEEK_DATA
; 1204 :         && (whence != SEEK_DATA)
; 1205 : #endif
; 1206 :         ) {

  00068	44 8b 44 24 40	 mov	 r8d, DWORD PTR whence$[rsp]
  0006d	41 83 f8 02	 cmp	 r8d, 2
  00071	0f 87 6d 02 00
	00		 ja	 $LN24@buffered_s@4

; 1209 :         return NULL;
; 1210 :     }
; 1211 : 
; 1212 :     CHECK_CLOSED(self, "seek of closed file")

  00077	39 7b 7c	 cmp	 DWORD PTR [rbx+124], edi
  0007a	74 0b		 je	 SHORT $LN32@buffered_s@4
  0007c	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00080	e8 00 00 00 00	 call	 _PyFileIO_closed
  00085	eb 08		 jmp	 SHORT $LN33@buffered_s@4
$LN32@buffered_s@4:
  00087	48 8b cb	 mov	 rcx, rbx
  0008a	e8 00 00 00 00	 call	 buffered_closed
$LN33@buffered_s@4:
  0008f	85 c0		 test	 eax, eax
  00091	74 20		 je	 SHORT $LN23@buffered_s@4
  00093	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0009a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@MDHELDPL@seek?5of?5closed?5file?$AA@
  000a1	e8 00 00 00 00	 call	 PyErr_SetString
  000a6	33 c0		 xor	 eax, eax

; 1274 : }

  000a8	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  000ad	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b1	5f		 pop	 rdi
  000b2	c3		 ret	 0
$LN23@buffered_s@4:

; 1213 : 
; 1214 :     if (_PyIOBase_check_seekable(self->raw, Py_True) == NULL)

  000b3	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_TrueStruct
  000be	e8 00 00 00 00	 call	 _PyIOBase_check_seekable
  000c3	48 85 c0	 test	 rax, rax

; 1215 :         return NULL;

  000c6	0f 84 72 ff ff
	ff		 je	 $LN53@buffered_s@4

; 1216 : 
; 1217 :     target = PyNumber_AsOff_t(targetobj, PyExc_ValueError);

  000cc	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_ValueError
  000d3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR targetobj$[rsp]
  000d8	48 89 74 24 48	 mov	 QWORD PTR [rsp+72], rsi
  000dd	e8 00 00 00 00	 call	 PyNumber_AsOff_t
  000e2	48 8b f0	 mov	 rsi, rax

; 1218 :     if (target == -1 && PyErr_Occurred())

  000e5	48 83 f8 ff	 cmp	 rax, -1
  000e9	75 0e		 jne	 SHORT $LN21@buffered_s@4
  000eb	e8 00 00 00 00	 call	 PyErr_Occurred
  000f0	48 85 c0	 test	 rax, rax

; 1219 :         return NULL;

  000f3	0f 85 d3 00 00
	00		 jne	 $LN52@buffered_s@4
$LN21@buffered_s@4:

; 1220 : 
; 1221 :     /* SEEK_SET and SEEK_CUR are special because we could seek inside the
; 1222 :        buffer. Other whence values must be managed without this optimization.
; 1223 :        Some Operating Systems can provide additional values, like
; 1224 :        SEEK_HOLE/SEEK_DATA. */
; 1225 :     if (((whence == 0) || (whence == 1)) && self->readable) {

  000f9	8b 44 24 40	 mov	 eax, DWORD PTR whence$[rsp]
  000fd	85 c0		 test	 eax, eax
  000ff	74 09		 je	 SHORT $LN19@buffered_s@4
  00101	83 f8 01	 cmp	 eax, 1
  00104	0f 85 a4 00 00
	00		 jne	 $LN15@buffered_s@4
$LN19@buffered_s@4:
  0010a	39 7b 70	 cmp	 DWORD PTR [rbx+112], edi
  0010d	0f 84 9b 00 00
	00		 je	 $LN15@buffered_s@4

; 1226 :         Py_off_t current, avail;
; 1227 :         /* Check if seeking leaves us inside the current buffer,
; 1228 :            so as to return quickly if possible. Also, we needn't take the
; 1229 :            lock in this fast path.
; 1230 :            Don't know how to do that when whence == 2, though. */
; 1231 :         /* NOTE: RAW_TELL() can release the GIL but the object is in a stable
; 1232 :            state at this point. */
; 1233 :         current = RAW_TELL(self);

  00113	4c 8b 83 80 00
	00 00		 mov	 r8, QWORD PTR [rbx+128]
  0011a	49 83 f8 ff	 cmp	 r8, -1
  0011e	75 0f		 jne	 SHORT $LN35@buffered_s@4
  00120	48 8b cb	 mov	 rcx, rbx
  00123	e8 00 00 00 00	 call	 _buffered_raw_tell
  00128	4c 8b c0	 mov	 r8, rax
  0012b	8b 44 24 40	 mov	 eax, DWORD PTR whence$[rsp]
$LN35@buffered_s@4:

; 1234 :         avail = READAHEAD(self);

  0012f	39 7b 70	 cmp	 DWORD PTR [rbx+112], edi
  00132	74 7a		 je	 SHORT $LN15@buffered_s@4
  00134	48 8b 93 a0 00
	00 00		 mov	 rdx, QWORD PTR [rbx+160]
  0013b	48 83 fa ff	 cmp	 rdx, -1
  0013f	74 6d		 je	 SHORT $LN15@buffered_s@4
  00141	4c 8b 8b 90 00
	00 00		 mov	 r9, QWORD PTR [rbx+144]
  00148	49 2b d1	 sub	 rdx, r9

; 1235 :         if (avail > 0) {

  0014b	48 85 d2	 test	 rdx, rdx
  0014e	7e 5e		 jle	 SHORT $LN15@buffered_s@4

; 1236 :             Py_off_t offset;
; 1237 :             if (whence == 0)

  00150	85 c0		 test	 eax, eax
  00152	75 21		 jne	 SHORT $LN17@buffered_s@4

; 1238 :                 offset = target - (current - RAW_OFFSET(self));

  00154	48 8b 8b 98 00
	00 00		 mov	 rcx, QWORD PTR [rbx+152]
  0015b	48 85 c9	 test	 rcx, rcx
  0015e	78 0b		 js	 SHORT $LN39@buffered_s@4
  00160	49 2b c9	 sub	 rcx, r9
  00163	49 2b c8	 sub	 rcx, r8
  00166	48 03 ce	 add	 rcx, rsi

; 1239 :             else

  00169	eb 0d		 jmp	 SHORT $LN16@buffered_s@4
$LN39@buffered_s@4:

; 1238 :                 offset = target - (current - RAW_OFFSET(self));

  0016b	33 c9		 xor	 ecx, ecx
  0016d	49 2b c8	 sub	 rcx, r8
  00170	48 03 ce	 add	 rcx, rsi

; 1239 :             else

  00173	eb 03		 jmp	 SHORT $LN16@buffered_s@4
$LN17@buffered_s@4:

; 1240 :                 offset = target;

  00175	48 8b ce	 mov	 rcx, rsi
$LN16@buffered_s@4:

; 1241 :             if (offset >= -self->pos && offset <= avail) {

  00178	49 8b c1	 mov	 rax, r9
  0017b	48 f7 d8	 neg	 rax
  0017e	48 3b c8	 cmp	 rcx, rax
  00181	7c 2b		 jl	 SHORT $LN15@buffered_s@4
  00183	48 3b ca	 cmp	 rcx, rdx
  00186	7f 26		 jg	 SHORT $LN15@buffered_s@4

; 1242 :                 self->pos += offset;

  00188	49 8d 04 09	 lea	 rax, QWORD PTR [r9+rcx]

; 1243 :                 return PyLong_FromOff_t(current - avail + offset);

  0018c	48 2b ca	 sub	 rcx, rdx
  0018f	49 03 c8	 add	 rcx, r8
  00192	48 89 83 90 00
	00 00		 mov	 QWORD PTR [rbx+144], rax
  00199	e8 00 00 00 00	 call	 PyLong_FromLongLong
  0019e	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]

; 1274 : }

  001a3	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  001a8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001ac	5f		 pop	 rdi
  001ad	c3		 ret	 0
$LN15@buffered_s@4:

; 1244 :             }
; 1245 :         }
; 1246 :     }
; 1247 : 
; 1248 :     if (!ENTER_BUFFERED(self))

  001ae	48 8b 8b b8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+184]
  001b5	33 d2		 xor	 edx, edx
  001b7	e8 00 00 00 00	 call	 PyThread_acquire_lock
  001bc	85 c0		 test	 eax, eax
  001be	75 1e		 jne	 SHORT $LN49@buffered_s@4
  001c0	48 8b cb	 mov	 rcx, rbx
  001c3	e8 00 00 00 00	 call	 _enter_buffered_busy
  001c8	85 c0		 test	 eax, eax
  001ca	75 12		 jne	 SHORT $LN49@buffered_s@4
$LN52@buffered_s@4:

; 1249 :         return NULL;

  001cc	33 c0		 xor	 eax, eax
  001ce	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]

; 1274 : }

  001d3	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  001d8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001dc	5f		 pop	 rdi
  001dd	c3		 ret	 0
$LN49@buffered_s@4:

; 1244 :             }
; 1245 :         }
; 1246 :     }
; 1247 : 
; 1248 :     if (!ENTER_BUFFERED(self))

  001de	e8 00 00 00 00	 call	 PyThread_get_thread_ident
  001e3	89 83 c0 00 00
	00		 mov	 DWORD PTR [rbx+192], eax

; 1250 : 
; 1251 :     /* Fallback: invoke raw seek() method and clear buffer */
; 1252 :     if (self->writable) {

  001e9	39 7b 74	 cmp	 DWORD PTR [rbx+116], edi
  001ec	74 4e		 je	 SHORT $LN12@buffered_s@4

; 1253 :         res = _bufferedwriter_flush_unlocked(self);

  001ee	48 8b cb	 mov	 rcx, rbx
  001f1	e8 00 00 00 00	 call	 _bufferedwriter_flush_unlocked
  001f6	48 8b f8	 mov	 rdi, rax

; 1254 :         if (res == NULL)

  001f9	48 85 c0	 test	 rax, rax
  001fc	0f 84 b9 00 00
	00		 je	 $end$21402

; 1255 :             goto end;
; 1256 :         Py_CLEAR(res);

  00202	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  00209	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@BCAMOJFN@buffered_seek?$AA@
  00210	4c 8b c8	 mov	 r9, rax
  00213	41 b8 e8 04 00
	00		 mov	 r8d, 1256		; 000004e8H
  00219	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00221	e8 00 00 00 00	 call	 _PyParallel_Guard
  00226	85 c0		 test	 eax, eax
  00228	75 0a		 jne	 SHORT $LN9@buffered_s@4
  0022a	48 8b cf	 mov	 rcx, rdi
  0022d	33 ff		 xor	 edi, edi
  0022f	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@buffered_s@4:

; 1257 :         _bufferedwriter_reset_buf(self);

  00234	48 8b cb	 mov	 rcx, rbx
  00237	e8 00 00 00 00	 call	 _bufferedwriter_reset_buf
$LN12@buffered_s@4:

; 1258 :     }
; 1259 : 
; 1260 :     /* TODO: align on block boundary and read buffer if needed? */
; 1261 :     if (whence == 1)

  0023c	44 8b 44 24 40	 mov	 r8d, DWORD PTR whence$[rsp]
  00241	41 83 f8 01	 cmp	 r8d, 1
  00245	75 3a		 jne	 SHORT $LN6@buffered_s@4

; 1262 :         target -= RAW_OFFSET(self);

  00247	83 7b 70 00	 cmp	 DWORD PTR [rbx+112], 0
  0024b	74 0a		 je	 SHORT $LN44@buffered_s@4
  0024d	48 83 bb a0 00
	00 00 ff	 cmp	 QWORD PTR [rbx+160], -1
  00255	75 10		 jne	 SHORT $LN46@buffered_s@4
$LN44@buffered_s@4:
  00257	83 7b 74 00	 cmp	 DWORD PTR [rbx+116], 0
  0025b	74 1f		 je	 SHORT $LN45@buffered_s@4
  0025d	48 83 bb b0 00
	00 00 ff	 cmp	 QWORD PTR [rbx+176], -1
  00265	74 15		 je	 SHORT $LN45@buffered_s@4
$LN46@buffered_s@4:
  00267	48 8b 83 98 00
	00 00		 mov	 rax, QWORD PTR [rbx+152]
  0026e	48 85 c0	 test	 rax, rax
  00271	78 09		 js	 SHORT $LN45@buffered_s@4
  00273	48 2b 83 90 00
	00 00		 sub	 rax, QWORD PTR [rbx+144]
  0027a	eb 02		 jmp	 SHORT $LN47@buffered_s@4
$LN45@buffered_s@4:
  0027c	33 c0		 xor	 eax, eax
$LN47@buffered_s@4:
  0027e	48 2b f0	 sub	 rsi, rax
$LN6@buffered_s@4:

; 1263 :     n = _buffered_raw_seek(self, target, whence);

  00281	48 8b d6	 mov	 rdx, rsi
  00284	48 8b cb	 mov	 rcx, rbx
  00287	e8 00 00 00 00	 call	 _buffered_raw_seek

; 1264 :     if (n == -1)

  0028c	48 83 f8 ff	 cmp	 rax, -1
  00290	74 29		 je	 SHORT $end$21402

; 1265 :         goto end;
; 1266 :     self->raw_pos = -1;
; 1267 :     res = PyLong_FromOff_t(n);

  00292	48 8b c8	 mov	 rcx, rax
  00295	48 c7 83 98 00
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rbx+152], -1
  002a0	e8 00 00 00 00	 call	 PyLong_FromLongLong
  002a5	48 8b f8	 mov	 rdi, rax

; 1268 :     if (res != NULL && self->readable)

  002a8	48 85 c0	 test	 rax, rax
  002ab	74 0e		 je	 SHORT $end$21402
  002ad	83 7b 70 00	 cmp	 DWORD PTR [rbx+112], 0
  002b1	74 08		 je	 SHORT $end$21402

; 1269 :         _bufferedreader_reset_buf(self);

  002b3	48 8b cb	 mov	 rcx, rbx
  002b6	e8 00 00 00 00	 call	 _bufferedreader_reset_buf
$end$21402:

; 1270 : 
; 1271 : end:
; 1272 :     LEAVE_BUFFERED(self)

  002bb	48 8b 8b b8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+184]
  002c2	c7 83 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rbx+192], 0
  002cc	e8 00 00 00 00	 call	 PyThread_release_lock
  002d1	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]

; 1273 :     return res;

  002d6	48 8b c7	 mov	 rax, rdi

; 1274 : }

  002d9	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  002de	48 83 c4 30	 add	 rsp, 48			; 00000030H
  002e2	5f		 pop	 rdi
  002e3	c3		 ret	 0
$LN24@buffered_s@4:

; 1207 :         PyErr_Format(PyExc_ValueError,
; 1208 :                      "whence value %d unsupported", whence);

  002e4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  002eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@OCLCFAG@whence?5value?5?$CFd?5unsupported?$AA@
  002f2	e8 00 00 00 00	 call	 PyErr_Format

; 1274 : }

  002f7	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  002fc	33 c0		 xor	 eax, eax
  002fe	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00302	5f		 pop	 rdi
  00303	c3		 ret	 0
buffered_seek ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@PDCOJIAH@buffered_truncate?$AA@	; `string'
PUBLIC	??_C@_0M@EGOFFNDK@?$HMO?3truncate?$AA@		; `string'
EXTRN	_PyIO_str_truncate:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_truncate DD imagerel buffered_truncate
	DD	imagerel buffered_truncate+297
	DD	imagerel $unwind$buffered_truncate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_truncate DD 048101H
	DD	097481H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0BC@PDCOJIAH@buffered_truncate?$AA@
CONST	SEGMENT
??_C@_0BC@PDCOJIAH@buffered_truncate?$AA@ DB 'buffered_truncate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EGOFFNDK@?$HMO?3truncate?$AA@
CONST	SEGMENT
??_C@_0M@EGOFFNDK@?$HMO?3truncate?$AA@ DB '|O:truncate', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT buffered_truncate
_TEXT	SEGMENT
pos$ = 64
self$ = 64
args$ = 72
buffered_truncate PROC					; COMDAT

; 1278 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 1279 :     PyObject *pos = Py_None;

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00010	48 8b c2	 mov	 rax, rdx

; 1280 :     PyObject *res = NULL;
; 1281 : 
; 1282 :     CHECK_INITIALIZED(self)

  00013	83 7b 68 00	 cmp	 DWORD PTR [rbx+104], 0
  00017	48 89 4c 24 40	 mov	 QWORD PTR pos$[rsp], rcx
  0001c	7f 28		 jg	 SHORT $LN17@buffered_t@3
  0001e	83 7b 6c 00	 cmp	 DWORD PTR [rbx+108], 0
  00022	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00029	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  00030	75 07		 jne	 SHORT $LN24@buffered_t@3
  00032	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
$LN24@buffered_t@3:
  00039	e8 00 00 00 00	 call	 PyErr_SetString
$LN25@buffered_t@3:
  0003e	33 c0		 xor	 eax, eax

; 1306 : }

  00040	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00044	5b		 pop	 rbx
  00045	c3		 ret	 0
$LN17@buffered_t@3:

; 1283 :     if (!PyArg_ParseTuple(args, "|O:truncate", &pos)) {

  00046	4c 8d 44 24 40	 lea	 r8, QWORD PTR pos$[rsp]
  0004b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@EGOFFNDK@?$HMO?3truncate?$AA@
  00052	48 8b c8	 mov	 rcx, rax
  00055	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0005a	85 c0		 test	 eax, eax

; 1284 :         return NULL;

  0005c	74 e0		 je	 SHORT $LN25@buffered_t@3

; 1285 :     }
; 1286 : 
; 1287 :     if (!ENTER_BUFFERED(self))

  0005e	48 8b 8b b8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+184]
  00065	33 d2		 xor	 edx, edx
  00067	e8 00 00 00 00	 call	 PyThread_acquire_lock
  0006c	85 c0		 test	 eax, eax
  0006e	75 0c		 jne	 SHORT $LN23@buffered_t@3
  00070	48 8b cb	 mov	 rcx, rbx
  00073	e8 00 00 00 00	 call	 _enter_buffered_busy
  00078	85 c0		 test	 eax, eax

; 1288 :         return NULL;

  0007a	74 c2		 je	 SHORT $LN25@buffered_t@3
$LN23@buffered_t@3:
  0007c	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi

; 1285 :     }
; 1286 : 
; 1287 :     if (!ENTER_BUFFERED(self))

  00081	e8 00 00 00 00	 call	 PyThread_get_thread_ident

; 1289 : 
; 1290 :     if (self->writable) {

  00086	83 7b 74 00	 cmp	 DWORD PTR [rbx+116], 0
  0008a	89 83 c0 00 00
	00		 mov	 DWORD PTR [rbx+192], eax
  00090	74 40		 je	 SHORT $LN7@buffered_t@3

; 1291 :         res = buffered_flush_and_rewind_unlocked(self);

  00092	48 8b cb	 mov	 rcx, rbx
  00095	e8 00 00 00 00	 call	 buffered_flush_and_rewind_unlocked
  0009a	48 8b f8	 mov	 rdi, rax

; 1292 :         if (res == NULL)

  0009d	48 85 c0	 test	 rax, rax
  000a0	74 63		 je	 SHORT $end$21441

; 1293 :             goto end;
; 1294 :         Py_CLEAR(res);

  000a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  000a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@PDCOJIAH@buffered_truncate?$AA@
  000b0	4c 8b c8	 mov	 r9, rax
  000b3	41 b8 0e 05 00
	00		 mov	 r8d, 1294		; 0000050eH
  000b9	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c1	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c6	85 c0		 test	 eax, eax
  000c8	75 08		 jne	 SHORT $LN7@buffered_t@3
  000ca	48 8b cf	 mov	 rcx, rdi
  000cd	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@buffered_t@3:

; 1295 :     }
; 1296 :     res = PyObject_CallMethodObjArgs(self->raw, _PyIO_str_truncate, pos, NULL);

  000d2	4c 8b 44 24 40	 mov	 r8, QWORD PTR pos$[rsp]
  000d7	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_truncate
  000de	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  000e2	45 33 c9	 xor	 r9d, r9d
  000e5	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  000ea	48 8b f8	 mov	 rdi, rax

; 1297 :     if (res == NULL)

  000ed	48 85 c0	 test	 rax, rax
  000f0	74 13		 je	 SHORT $end$21441

; 1298 :         goto end;
; 1299 :     /* Reset cached position */
; 1300 :     if (_buffered_raw_tell(self) == -1)

  000f2	48 8b cb	 mov	 rcx, rbx
  000f5	e8 00 00 00 00	 call	 _buffered_raw_tell
  000fa	48 83 f8 ff	 cmp	 rax, -1
  000fe	75 05		 jne	 SHORT $end$21441

; 1301 :         PyErr_Clear();

  00100	e8 00 00 00 00	 call	 PyErr_Clear
$end$21441:

; 1302 : 
; 1303 : end:
; 1304 :     LEAVE_BUFFERED(self)

  00105	48 8b 8b b8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+184]
  0010c	c7 83 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rbx+192], 0
  00116	e8 00 00 00 00	 call	 PyThread_release_lock

; 1305 :     return res;

  0011b	48 8b c7	 mov	 rax, rdi
  0011e	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]

; 1306 : }

  00123	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00127	5b		 pop	 rbx
  00128	c3		 ret	 0
buffered_truncate ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DN@PHLOKDEL@readline?$CI?$CJ?5should?5have?5returned?5@ ; `string'
EXTRN	_PyIO_str_readline:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_iternext DD imagerel buffered_iternext
	DD	imagerel buffered_iternext+60
	DD	imagerel $unwind$buffered_iternext
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$buffered_iternext DD imagerel buffered_iternext+60
	DD	imagerel buffered_iternext+165
	DD	imagerel $chain$0$buffered_iternext
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$buffered_iternext DD imagerel buffered_iternext+165
	DD	imagerel buffered_iternext+202
	DD	imagerel $chain$2$buffered_iternext
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$buffered_iternext DD 020021H
	DD	043400H
	DD	imagerel buffered_iternext
	DD	imagerel buffered_iternext+60
	DD	imagerel $unwind$buffered_iternext
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$buffered_iternext DD 020521H
	DD	043405H
	DD	imagerel buffered_iternext
	DD	imagerel buffered_iternext+60
	DD	imagerel $unwind$buffered_iternext
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_iternext DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0DN@PHLOKDEL@readline?$CI?$CJ?5should?5have?5returned?5@
CONST	SEGMENT
??_C@_0DN@PHLOKDEL@readline?$CI?$CJ?5should?5have?5returned?5@ DB 'readli'
	DB	'ne() should have returned a bytes object, not ''%.200s''', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT buffered_iternext
_TEXT	SEGMENT
self$ = 48
buffered_iternext PROC					; COMDAT

; 1310 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1311 :     PyObject *line;
; 1312 :     PyTypeObject *tp;
; 1313 : 
; 1314 :     CHECK_INITIALIZED(self);

  00004	83 79 68 00	 cmp	 DWORD PTR [rcx+104], 0
  00008	7f 27		 jg	 SHORT $LN9@buffered_i@3
  0000a	83 79 6c 00	 cmp	 DWORD PTR [rcx+108], 0
  0000e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  0001c	75 07		 jne	 SHORT $LN14@buffered_i@3
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
$LN14@buffered_i@3:
  00025	e8 00 00 00 00	 call	 PyErr_SetString
  0002a	33 c0		 xor	 eax, eax

; 1344 : }

  0002c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00030	c3		 ret	 0
$LN9@buffered_i@3:

; 1315 : 
; 1316 :     tp = Py_TYPE(self);

  00031	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]

; 1317 :     if (tp == &PyBufferedReader_Type ||
; 1318 :         tp == &PyBufferedRandom_Type) {

  00035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyBufferedReader_Type
  0003c	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00041	48 3b c2	 cmp	 rax, rdx
  00044	74 5f		 je	 SHORT $LN5@buffered_i@3
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyBufferedRandom_Type
  0004d	48 3b c2	 cmp	 rax, rdx
  00050	74 53		 je	 SHORT $LN5@buffered_i@3

; 1321 :     }
; 1322 :     else {
; 1323 :         line = PyObject_CallMethodObjArgs((PyObject *)self,
; 1324 :                                            _PyIO_str_readline, NULL);

  00052	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_readline
  00059	45 33 c0	 xor	 r8d, r8d
  0005c	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  00061	48 8b d8	 mov	 rbx, rax

; 1325 :         if (line && !PyBytes_Check(line)) {

  00064	48 85 c0	 test	 rax, rax
  00067	74 30		 je	 SHORT $LN12@buffered_i@3
  00069	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  0006d	41 f7 80 00 01
	00 00 00 00 00
	08		 test	 DWORD PTR [r8+256], 134217728 ; 08000000H
  00078	75 37		 jne	 SHORT $LN3@buffered_i@3

; 1326 :             PyErr_Format(PyExc_IOError,
; 1327 :                          "readline() should have returned a bytes object, "
; 1328 :                          "not '%.200s'", Py_TYPE(line)->tp_name);

  0007a	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  0007e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  00085	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DN@PHLOKDEL@readline?$CI?$CJ?5should?5have?5returned?5@
  0008c	e8 00 00 00 00	 call	 PyErr_Format
$LN15@buffered_i@3:

; 1329 :             Py_DECREF(line);

  00091	48 8b cb	 mov	 rcx, rbx
  00094	e8 00 00 00 00	 call	 _Py_DecRef
$LN12@buffered_i@3:

; 1330 :             return NULL;

  00099	33 c0		 xor	 eax, eax
  0009b	48 8b 5c 24 20	 mov	 rbx, QWORD PTR [rsp+32]

; 1344 : }

  000a0	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000a4	c3		 ret	 0
$LN5@buffered_i@3:

; 1319 :         /* Skip method call overhead for speed */
; 1320 :         line = _buffered_readline(self, -1);

  000a5	48 83 ca ff	 or	 rdx, -1
  000a9	e8 00 00 00 00	 call	 _buffered_readline
  000ae	48 8b d8	 mov	 rbx, rax
$LN3@buffered_i@3:

; 1331 :         }
; 1332 :     }
; 1333 : 
; 1334 :     if (line == NULL)

  000b1	48 85 db	 test	 rbx, rbx

; 1335 :         return NULL;

  000b4	74 e3		 je	 SHORT $LN12@buffered_i@3

; 1336 : 
; 1337 :     if (PyBytes_GET_SIZE(line) == 0) {

  000b6	48 83 7b 60 00	 cmp	 QWORD PTR [rbx+96], 0

; 1338 :         /* Reached EOF or would have blocked */
; 1339 :         Py_DECREF(line);
; 1340 :         return NULL;

  000bb	74 d4		 je	 SHORT $LN15@buffered_i@3

; 1341 :     }
; 1342 : 
; 1343 :     return line;

  000bd	48 8b c3	 mov	 rax, rbx
  000c0	48 8b 5c 24 20	 mov	 rbx, QWORD PTR [rsp+32]

; 1344 : }

  000c5	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000c9	c3		 ret	 0
buffered_iternext ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@PIAEPOCB@readall?$CI?$CJ?5should?5return?5bytes?$AA@ ; `string'
PUBLIC	??_C@_0BJ@MEOPOFCL@_bufferedreader_read_all?$AA@ ; `string'
EXTRN	_PyIO_str_read:QWORD
EXTRN	PyBytes_Concat:PROC
EXTRN	PyObject_HasAttr:PROC
EXTRN	_PyIO_str_readall:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_bufferedreader_read_all DD imagerel _bufferedreader_read_all
	DD	imagerel _bufferedreader_read_all+106
	DD	imagerel $unwind$_bufferedreader_read_all
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_bufferedreader_read_all DD imagerel _bufferedreader_read_all+106
	DD	imagerel _bufferedreader_read_all+824
	DD	imagerel $chain$1$_bufferedreader_read_all
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_bufferedreader_read_all DD imagerel _bufferedreader_read_all+824
	DD	imagerel _bufferedreader_read_all+1076
	DD	imagerel $chain$2$_bufferedreader_read_all
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_bufferedreader_read_all DD 021H
	DD	imagerel _bufferedreader_read_all
	DD	imagerel _bufferedreader_read_all+106
	DD	imagerel $unwind$_bufferedreader_read_all
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_bufferedreader_read_all DD 040a21H
	DD	0ee40aH
	DD	0d3405H
	DD	imagerel _bufferedreader_read_all
	DD	imagerel _bufferedreader_read_all+106
	DD	imagerel $unwind$_bufferedreader_read_all
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_bufferedreader_read_all DD 060c01H
	DD	0d008520cH
	DD	07004c006H
	DD	050026003H
xdata	ENDS
;	COMDAT ??_C@_0BO@PIAEPOCB@readall?$CI?$CJ?5should?5return?5bytes?$AA@
CONST	SEGMENT
??_C@_0BO@PIAEPOCB@readall?$CI?$CJ?5should?5return?5bytes?$AA@ DB 'readal'
	DB	'l() should return bytes', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MEOPOFCL@_bufferedreader_read_all?$AA@
CONST	SEGMENT
??_C@_0BJ@MEOPOFCL@_bufferedreader_read_all?$AA@ DB '_bufferedreader_read'
	DB	'_all', 00H					; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\bufferedio.c
CONST	ENDS
;	COMDAT _bufferedreader_read_all
_TEXT	SEGMENT
data$ = 96
self$ = 96
_bufferedreader_read_all PROC				; COMDAT

; 1475 : {

  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	41 54		 push	 r12
  00006	41 55		 push	 r13
  00008	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1476 :     Py_ssize_t current_size;
; 1477 :     PyObject *res = NULL, *data = NULL, *tmp = NULL, *chunks = NULL;

  0000c	33 ff		 xor	 edi, edi
  0000e	48 8b e9	 mov	 rbp, rcx
  00011	8b f7		 mov	 esi, edi
  00013	48 89 7c 24 60	 mov	 QWORD PTR data$[rsp], rdi
  00018	44 8b ef	 mov	 r13d, edi

; 1478 : 
; 1479 :     /* First copy what we have in the current buffer. */
; 1480 :     current_size = Py_SAFE_DOWNCAST(READAHEAD(self), Py_off_t, Py_ssize_t);

  0001b	39 71 70	 cmp	 DWORD PTR [rcx+112], esi
  0001e	74 47		 je	 SHORT $LN52@bufferedre@6
  00020	4c 8b a1 a0 00
	00 00		 mov	 r12, QWORD PTR [rcx+160]
  00027	49 83 fc ff	 cmp	 r12, -1
  0002b	74 3a		 je	 SHORT $LN52@bufferedre@6
  0002d	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  00034	4c 2b e1	 sub	 r12, rcx

; 1481 :     if (current_size) {

  00037	74 31		 je	 SHORT $LN49@bufferedre@6

; 1482 :         data = PyBytes_FromStringAndSize(
; 1483 :             self->buffer + self->pos, current_size);

  00039	48 03 8d 88 00
	00 00		 add	 rcx, QWORD PTR [rbp+136]
  00040	49 8b d4	 mov	 rdx, r12
  00043	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00048	48 89 44 24 60	 mov	 QWORD PTR data$[rsp], rax

; 1484 :         if (data == NULL)

  0004d	48 85 c0	 test	 rax, rax
  00050	75 0c		 jne	 SHORT $LN48@bufferedre@6

; 1566 : }

  00052	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00056	41 5d		 pop	 r13
  00058	41 5c		 pop	 r12
  0005a	5f		 pop	 rdi
  0005b	5e		 pop	 rsi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
$LN48@bufferedre@6:

; 1485 :             return NULL;
; 1486 :         self->pos += current_size;

  0005e	4c 01 a5 90 00
	00 00		 add	 QWORD PTR [rbp+144], r12
  00065	eb 03		 jmp	 SHORT $LN49@bufferedre@6
$LN52@bufferedre@6:

; 1478 : 
; 1479 :     /* First copy what we have in the current buffer. */
; 1480 :     current_size = Py_SAFE_DOWNCAST(READAHEAD(self), Py_off_t, Py_ssize_t);

  00067	4c 8b e7	 mov	 r12, rdi
$LN49@bufferedre@6:
  0006a	48 89 5c 24 68	 mov	 QWORD PTR [rsp+104], rbx
  0006f	4c 89 74 24 70	 mov	 QWORD PTR [rsp+112], r14

; 1487 :     }
; 1488 :     /* We're going past the buffer's bounds, flush it */
; 1489 :     if (self->writable) {

  00074	39 75 74	 cmp	 DWORD PTR [rbp+116], esi
  00077	74 47		 je	 SHORT $LN43@bufferedre@6

; 1490 :         tmp = buffered_flush_and_rewind_unlocked(self);

  00079	48 8b cd	 mov	 rcx, rbp
  0007c	e8 00 00 00 00	 call	 buffered_flush_and_rewind_unlocked
  00081	48 8b f0	 mov	 rsi, rax

; 1491 :         if (tmp == NULL)

  00084	48 85 c0	 test	 rax, rax
  00087	0f 84 2d 02 00
	00		 je	 $LN99@bufferedre@6

; 1492 :             goto cleanup;
; 1493 :         Py_CLEAR(tmp);

  0008d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  00094	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@MEOPOFCL@_bufferedreader_read_all?$AA@
  0009b	4c 8b c8	 mov	 r9, rax
  0009e	41 b8 d5 05 00
	00		 mov	 r8d, 1493		; 000005d5H
  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b1	85 c0		 test	 eax, eax
  000b3	75 0b		 jne	 SHORT $LN43@bufferedre@6
  000b5	48 8b ce	 mov	 rcx, rsi
  000b8	48 8b f7	 mov	 rsi, rdi
  000bb	e8 00 00 00 00	 call	 _Py_DecRef
$LN43@bufferedre@6:

; 1494 :     }
; 1495 :     _bufferedreader_reset_buf(self);

  000c0	48 8b cd	 mov	 rcx, rbp
  000c3	e8 00 00 00 00	 call	 _bufferedreader_reset_buf

; 1496 : 
; 1497 :     if (PyObject_HasAttr(self->raw, _PyIO_str_readall)) {

  000c8	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_readall
  000cf	48 8b 4d 60	 mov	 rcx, QWORD PTR [rbp+96]
  000d3	e8 00 00 00 00	 call	 PyObject_HasAttr
  000d8	85 c0		 test	 eax, eax
  000da	0f 84 87 00 00
	00		 je	 $LN33@bufferedre@6

; 1498 :         tmp = PyObject_CallMethodObjArgs(self->raw, _PyIO_str_readall, NULL);

  000e0	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_readall
  000e7	48 8b 4d 60	 mov	 rcx, QWORD PTR [rbp+96]
  000eb	45 33 c0	 xor	 r8d, r8d
  000ee	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  000f3	48 8b f0	 mov	 rsi, rax

; 1499 :         if (tmp == NULL)

  000f6	48 85 c0	 test	 rax, rax
  000f9	0f 84 bb 01 00
	00		 je	 $LN99@bufferedre@6

; 1500 :             goto cleanup;
; 1501 :         if (tmp != Py_None && !PyBytes_Check(tmp)) {

  000ff	4c 8d 35 00 00
	00 00		 lea	 r14, OFFSET FLAT:_Py_NoneStruct
  00106	49 3b c6	 cmp	 rax, r14
  00109	74 4f		 je	 SHORT $LN96@bufferedre@6
  0010b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0010f	f7 80 00 01 00
	00 00 00 00 08	 test	 DWORD PTR [rax+256], 134217728 ; 08000000H
  00119	75 18		 jne	 SHORT $LN38@bufferedre@6

; 1502 :             PyErr_SetString(PyExc_TypeError, "readall() should return bytes");

  0011b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00122	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@PIAEPOCB@readall?$CI?$CJ?5should?5return?5bytes?$AA@
  00129	e8 00 00 00 00	 call	 PyErr_SetString

; 1503 :             goto cleanup;

  0012e	e9 87 01 00 00	 jmp	 $LN99@bufferedre@6
$LN38@bufferedre@6:

; 1509 :             } else {
; 1510 :                 res = data;
; 1511 :                 goto cleanup;
; 1512 :             }
; 1513 :         }
; 1514 :         else if (current_size) {

  00133	4d 85 e4	 test	 r12, r12
  00136	74 1a		 je	 SHORT $LN34@bufferedre@6

; 1515 :             PyBytes_Concat(&data, tmp);

  00138	48 8d 4c 24 60	 lea	 rcx, QWORD PTR data$[rsp]
  0013d	48 8b d6	 mov	 rdx, rsi
  00140	e8 00 00 00 00	 call	 PyBytes_Concat
$LN37@bufferedre@6:

; 1516 :             res = data;

  00145	48 8b 5c 24 60	 mov	 rbx, QWORD PTR data$[rsp]
  0014a	48 8b fb	 mov	 rdi, rbx

; 1517 :             goto cleanup;

  0014d	e9 28 01 00 00	 jmp	 $cleanup$21603
$LN34@bufferedre@6:

; 1518 :         }
; 1519 :         else {
; 1520 :             res = tmp;

  00152	48 8b fe	 mov	 rdi, rsi

; 1521 :             goto cleanup;

  00155	e9 1b 01 00 00	 jmp	 $LN100@bufferedre@6
$LN96@bufferedre@6:

; 1504 :         }
; 1505 :         if (tmp == Py_None) {
; 1506 :             if (current_size == 0) {

  0015a	4d 85 e4	 test	 r12, r12
  0015d	75 e6		 jne	 SHORT $LN37@bufferedre@6

; 1507 :                 res = Py_None;

  0015f	49 8b fe	 mov	 rdi, r14

; 1508 :                 goto cleanup;

  00162	e9 18 01 00 00	 jmp	 $LN98@bufferedre@6
$LN33@bufferedre@6:

; 1522 :         }
; 1523 :     }
; 1524 : 
; 1525 :     chunks = PyList_New(0);

  00167	33 c9		 xor	 ecx, ecx
  00169	e8 00 00 00 00	 call	 PyList_New
  0016e	4c 8b e8	 mov	 r13, rax

; 1526 :     if (chunks == NULL)

  00171	48 85 c0	 test	 rax, rax
  00174	0f 84 40 01 00
	00		 je	 $LN99@bufferedre@6
  0017a	48 8b 5c 24 60	 mov	 rbx, QWORD PTR data$[rsp]
  0017f	4c 8d 35 00 00
	00 00		 lea	 r14, OFFSET FLAT:_Py_NoneStruct
$LL31@bufferedre@6:

; 1527 :         goto cleanup;
; 1528 : 
; 1529 :     while (1) {
; 1530 :         if (data) {

  00186	48 85 db	 test	 rbx, rbx
  00189	74 51		 je	 SHORT $LN25@bufferedre@6

; 1531 :             if (PyList_Append(chunks, data) < 0)

  0018b	48 8b d3	 mov	 rdx, rbx
  0018e	49 8b cd	 mov	 rcx, r13
  00191	e8 00 00 00 00	 call	 PyList_Append
  00196	85 c0		 test	 eax, eax
  00198	0f 88 1c 01 00
	00		 js	 $LN99@bufferedre@6

; 1532 :                 goto cleanup;
; 1533 :             Py_CLEAR(data);

  0019e	4c 8b 4c 24 60	 mov	 r9, QWORD PTR data$[rsp]
  001a3	4d 85 c9	 test	 r9, r9
  001a6	74 34		 je	 SHORT $LN25@bufferedre@6
  001a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  001af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@MEOPOFCL@_bufferedreader_read_all?$AA@
  001b6	41 b8 fd 05 00
	00		 mov	 r8d, 1533		; 000005fdH
  001bc	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001c4	e8 00 00 00 00	 call	 _PyParallel_Guard
  001c9	85 c0		 test	 eax, eax
  001cb	75 0f		 jne	 SHORT $LN25@bufferedre@6
  001cd	48 8b 4c 24 60	 mov	 rcx, QWORD PTR data$[rsp]
  001d2	48 89 7c 24 60	 mov	 QWORD PTR data$[rsp], rdi
  001d7	e8 00 00 00 00	 call	 _Py_DecRef
$LN25@bufferedre@6:

; 1534 :         }
; 1535 : 
; 1536 :         /* Read until EOF or until read() would block. */
; 1537 :         data = PyObject_CallMethodObjArgs(self->raw, _PyIO_str_read, NULL);

  001dc	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_read
  001e3	48 8b 4d 60	 mov	 rcx, QWORD PTR [rbp+96]
  001e7	45 33 c0	 xor	 r8d, r8d
  001ea	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  001ef	48 8b d8	 mov	 rbx, rax
  001f2	48 89 44 24 60	 mov	 QWORD PTR data$[rsp], rax

; 1538 :         if (data == NULL)

  001f7	48 85 c0	 test	 rax, rax
  001fa	0f 84 29 01 00
	00		 je	 $LN11@bufferedre@6

; 1539 :             goto cleanup;
; 1540 :         if (data != Py_None && !PyBytes_Check(data)) {

  00200	49 3b c6	 cmp	 rax, r14
  00203	74 51		 je	 SHORT $LN95@bufferedre@6
  00205	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00209	f7 80 00 01 00
	00 00 00 00 08	 test	 DWORD PTR [rax+256], 134217728 ; 08000000H
  00213	74 2c		 je	 SHORT $LN94@bufferedre@6

; 1543 :         }
; 1544 :         if (data == Py_None || PyBytes_GET_SIZE(data) == 0) {

  00215	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00219	48 85 c0	 test	 rax, rax
  0021c	74 38		 je	 SHORT $LN95@bufferedre@6

; 1552 :                 goto cleanup;
; 1553 :             }
; 1554 :         }
; 1555 :         current_size += PyBytes_GET_SIZE(data);
; 1556 :         if (self->abs_pos != -1)

  0021e	48 8b 8d 80 00
	00 00		 mov	 rcx, QWORD PTR [rbp+128]
  00225	4c 03 e0	 add	 r12, rax
  00228	48 83 f9 ff	 cmp	 rcx, -1
  0022c	0f 84 54 ff ff
	ff		 je	 $LL31@bufferedre@6

; 1557 :             self->abs_pos += PyBytes_GET_SIZE(data);

  00232	48 03 c1	 add	 rax, rcx
  00235	48 89 85 80 00
	00 00		 mov	 QWORD PTR [rbp+128], rax

; 1558 :     }

  0023c	e9 45 ff ff ff	 jmp	 $LL31@bufferedre@6
$LN94@bufferedre@6:

; 1541 :             PyErr_SetString(PyExc_TypeError, "read() should return bytes");

  00241	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00248	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@LFIKHDFM@read?$CI?$CJ?5should?5return?5bytes?$AA@
  0024f	e8 00 00 00 00	 call	 PyErr_SetString

; 1542 :             goto cleanup;

  00254	eb 64		 jmp	 SHORT $LN99@bufferedre@6
$LN95@bufferedre@6:

; 1545 :             if (current_size == 0) {

  00256	4d 85 e4	 test	 r12, r12
  00259	75 05		 jne	 SHORT $LN19@bufferedre@6

; 1546 :                 res = data;

  0025b	48 8b fb	 mov	 rdi, rbx

; 1547 :                 goto cleanup;

  0025e	eb 1a		 jmp	 SHORT $cleanup$21603
$LN19@bufferedre@6:

; 1548 :             }
; 1549 :             else {
; 1550 :                 tmp = _PyBytes_Join(_PyIO_empty_bytes, chunks);

  00260	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyIO_empty_bytes
  00267	49 8b d5	 mov	 rdx, r13
  0026a	e8 00 00 00 00	 call	 _PyBytes_Join
  0026f	48 8b f0	 mov	 rsi, rax

; 1551 :                 res = tmp;

  00272	48 8b f8	 mov	 rdi, rax
$LN100@bufferedre@6:
  00275	48 8b 5c 24 60	 mov	 rbx, QWORD PTR data$[rsp]
$cleanup$21603:

; 1559 : cleanup:
; 1560 :     /* res is either NULL or a borrowed ref */
; 1561 :     Py_XINCREF(res);

  0027a	48 85 ff	 test	 rdi, rdi
  0027d	74 40		 je	 SHORT $LN15@bufferedre@6
$LN98@bufferedre@6:
  0027f	e8 00 00 00 00	 call	 _Py_PXCTX
  00284	85 c0		 test	 eax, eax
  00286	75 32		 jne	 SHORT $LN99@bufferedre@6
  00288	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0028f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00296	4c 8b cf	 mov	 r9, rdi
  00299	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0029f	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  002a7	e8 00 00 00 00	 call	 _PyParallel_Guard
  002ac	85 c0		 test	 eax, eax
  002ae	75 06		 jne	 SHORT $LN54@bufferedre@6
  002b0	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  002b4	74 04		 je	 SHORT $LN99@bufferedre@6
$LN54@bufferedre@6:
  002b6	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN99@bufferedre@6:
  002ba	48 8b 5c 24 60	 mov	 rbx, QWORD PTR data$[rsp]
$LN15@bufferedre@6:

; 1562 :     Py_XDECREF(data);

  002bf	48 85 db	 test	 rbx, rbx
  002c2	74 65		 je	 SHORT $LN11@bufferedre@6
  002c4	e8 00 00 00 00	 call	 _Py_PXCTX
  002c9	85 c0		 test	 eax, eax
  002cb	75 5c		 jne	 SHORT $LN11@bufferedre@6
  002cd	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  002d1	a8 20		 test	 al, 32			; 00000020H
  002d3	75 4c		 jne	 SHORT $LN62@bufferedre@6
  002d5	84 c0		 test	 al, al
  002d7	78 48		 js	 SHORT $LN62@bufferedre@6
  002d9	a8 02		 test	 al, 2
  002db	75 4c		 jne	 SHORT $LN11@bufferedre@6
  002dd	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  002e1	75 46		 jne	 SHORT $LN11@bufferedre@6
  002e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  002ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  002f1	4c 8b cb	 mov	 r9, rbx
  002f4	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  002fa	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00302	e8 00 00 00 00	 call	 _PyParallel_Guard
  00307	48 8b cb	 mov	 rcx, rbx
  0030a	85 c0		 test	 eax, eax
  0030c	74 07		 je	 SHORT $LN67@bufferedre@6
  0030e	e8 00 00 00 00	 call	 _Px_Dealloc
  00313	eb 14		 jmp	 SHORT $LN11@bufferedre@6
$LN67@bufferedre@6:
  00315	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00319	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0031f	eb 08		 jmp	 SHORT $LN11@bufferedre@6
$LN62@bufferedre@6:
  00321	48 8b cb	 mov	 rcx, rbx
  00324	e8 00 00 00 00	 call	 Px_DecRef
$LN11@bufferedre@6:

; 1563 :     Py_XDECREF(tmp);

  00329	4c 8b 74 24 70	 mov	 r14, QWORD PTR [rsp+112]
  0032e	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  00333	48 85 f6	 test	 rsi, rsi
  00336	74 65		 je	 SHORT $LN7@bufferedre@6
  00338	e8 00 00 00 00	 call	 _Py_PXCTX
  0033d	85 c0		 test	 eax, eax
  0033f	75 5c		 jne	 SHORT $LN7@bufferedre@6
  00341	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  00345	a8 20		 test	 al, 32			; 00000020H
  00347	75 4c		 jne	 SHORT $LN73@bufferedre@6
  00349	84 c0		 test	 al, al
  0034b	78 48		 js	 SHORT $LN73@bufferedre@6
  0034d	a8 02		 test	 al, 2
  0034f	75 4c		 jne	 SHORT $LN7@bufferedre@6
  00351	48 ff 4e 50	 dec	 QWORD PTR [rsi+80]
  00355	75 46		 jne	 SHORT $LN7@bufferedre@6
  00357	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0035e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00365	4c 8b ce	 mov	 r9, rsi
  00368	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0036e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00376	e8 00 00 00 00	 call	 _PyParallel_Guard
  0037b	48 8b ce	 mov	 rcx, rsi
  0037e	85 c0		 test	 eax, eax
  00380	74 07		 je	 SHORT $LN78@bufferedre@6
  00382	e8 00 00 00 00	 call	 _Px_Dealloc
  00387	eb 14		 jmp	 SHORT $LN7@bufferedre@6
$LN78@bufferedre@6:
  00389	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  0038d	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00393	eb 08		 jmp	 SHORT $LN7@bufferedre@6
$LN73@bufferedre@6:
  00395	48 8b ce	 mov	 rcx, rsi
  00398	e8 00 00 00 00	 call	 Px_DecRef
$LN7@bufferedre@6:

; 1564 :     Py_XDECREF(chunks);

  0039d	4d 85 ed	 test	 r13, r13
  003a0	0f 84 7f 00 00
	00		 je	 $LN3@bufferedre@6
  003a6	e8 00 00 00 00	 call	 _Py_PXCTX
  003ab	85 c0		 test	 eax, eax
  003ad	75 76		 jne	 SHORT $LN3@bufferedre@6
  003af	49 8b 45 20	 mov	 rax, QWORD PTR [r13+32]
  003b3	a8 20		 test	 al, 32			; 00000020H
  003b5	75 66		 jne	 SHORT $LN84@bufferedre@6
  003b7	84 c0		 test	 al, al
  003b9	78 62		 js	 SHORT $LN84@bufferedre@6
  003bb	a8 02		 test	 al, 2
  003bd	75 66		 jne	 SHORT $LN3@bufferedre@6
  003bf	49 ff 4d 50	 dec	 QWORD PTR [r13+80]
  003c3	75 60		 jne	 SHORT $LN3@bufferedre@6
  003c5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  003cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  003d3	4d 8b cd	 mov	 r9, r13
  003d6	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  003dc	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003e4	e8 00 00 00 00	 call	 _PyParallel_Guard
  003e9	49 8b cd	 mov	 rcx, r13
  003ec	85 c0		 test	 eax, eax
  003ee	74 14		 je	 SHORT $LN89@bufferedre@6
  003f0	e8 00 00 00 00	 call	 _Px_Dealloc

; 1565 :     return res;

  003f5	48 8b c7	 mov	 rax, rdi

; 1566 : }

  003f8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  003fc	41 5d		 pop	 r13
  003fe	41 5c		 pop	 r12
  00400	5f		 pop	 rdi
  00401	5e		 pop	 rsi
  00402	5d		 pop	 rbp
  00403	c3		 ret	 0

; 1564 :     Py_XDECREF(chunks);

$LN89@bufferedre@6:
  00404	49 8b 45 58	 mov	 rax, QWORD PTR [r13+88]
  00408	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 1565 :     return res;

  0040e	48 8b c7	 mov	 rax, rdi

; 1566 : }

  00411	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00415	41 5d		 pop	 r13
  00417	41 5c		 pop	 r12
  00419	5f		 pop	 rdi
  0041a	5e		 pop	 rsi
  0041b	5d		 pop	 rbp
  0041c	c3		 ret	 0

; 1564 :     Py_XDECREF(chunks);

$LN84@bufferedre@6:
  0041d	49 8b cd	 mov	 rcx, r13
  00420	e8 00 00 00 00	 call	 Px_DecRef
$LN3@bufferedre@6:

; 1565 :     return res;

  00425	48 8b c7	 mov	 rax, rdi

; 1566 : }

  00428	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0042c	41 5d		 pop	 r13
  0042e	41 5c		 pop	 r12
  00430	5f		 pop	 rdi
  00431	5e		 pop	 rsi
  00432	5d		 pop	 rbp
  00433	c3		 ret	 0
_bufferedreader_read_all ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_bufferedreader_read_generic DD imagerel _bufferedreader_read_generic
	DD	imagerel _bufferedreader_read_generic+607
	DD	imagerel $unwind$_bufferedreader_read_generic
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_bufferedreader_read_generic DD 0a5e01H
	DD	0ac45eH
	DD	095459H
	DD	0b340dH
	DD	0d009320dH
	DD	060067007H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _bufferedreader_read_generic
_TEXT	SEGMENT
res$ = 64
self$ = 64
n$ = 72
_bufferedreader_read_generic PROC			; COMDAT

; 1591 : {

  00000	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	41 55		 push	 r13
  00009	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1592 :     PyObject *res = NULL;

  0000d	45 33 ed	 xor	 r13d, r13d
  00010	48 8b fa	 mov	 rdi, rdx
  00013	48 8b d9	 mov	 rbx, rcx
  00016	4c 89 6c 24 40	 mov	 QWORD PTR res$[rsp], r13

; 1593 :     Py_ssize_t current_size, remaining, written;
; 1594 :     char *out;
; 1595 : 
; 1596 :     current_size = Py_SAFE_DOWNCAST(READAHEAD(self), Py_off_t, Py_ssize_t);

  0001b	44 39 69 70	 cmp	 DWORD PTR [rcx+112], r13d
  0001f	74 16		 je	 SHORT $LN33@bufferedre@7
  00021	48 8b b1 a0 00
	00 00		 mov	 rsi, QWORD PTR [rcx+160]
  00028	48 83 fe ff	 cmp	 rsi, -1
  0002c	74 09		 je	 SHORT $LN33@bufferedre@7
  0002e	48 2b b1 90 00
	00 00		 sub	 rsi, QWORD PTR [rcx+144]
  00035	eb 03		 jmp	 SHORT $LN34@bufferedre@7
$LN33@bufferedre@7:
  00037	49 8b f5	 mov	 rsi, r13
$LN34@bufferedre@7:

; 1597 :     if (n <= current_size)

  0003a	48 3b d6	 cmp	 rdx, rsi
  0003d	7f 13		 jg	 SHORT $LN30@bufferedre@7

; 1598 :         return _bufferedreader_read_fast(self, n);

  0003f	e8 00 00 00 00	 call	 _bufferedreader_read_fast

; 1686 : }

  00044	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  00049	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004d	41 5d		 pop	 r13
  0004f	5f		 pop	 rdi
  00050	5e		 pop	 rsi
  00051	c3		 ret	 0
$LN30@bufferedre@7:

; 1599 : 
; 1600 :     res = PyBytes_FromStringAndSize(NULL, n);

  00052	33 c9		 xor	 ecx, ecx
  00054	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp
  00059	4c 89 64 24 50	 mov	 QWORD PTR [rsp+80], r12
  0005e	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00063	48 89 44 24 40	 mov	 QWORD PTR res$[rsp], rax

; 1601 :     if (res == NULL)

  00068	48 85 c0	 test	 rax, rax
  0006b	0f 84 d4 01 00
	00		 je	 $LN3@bufferedre@7

; 1602 :         goto error;
; 1603 :     out = PyBytes_AS_STRING(res);

  00071	4c 8d 60 78	 lea	 r12, QWORD PTR [rax+120]

; 1604 :     remaining = n;
; 1605 :     written = 0;

  00075	49 8b ed	 mov	 rbp, r13

; 1606 :     if (current_size > 0) {

  00078	48 85 f6	 test	 rsi, rsi
  0007b	7e 26		 jle	 SHORT $LN28@bufferedre@7

; 1607 :         memcpy(out, self->buffer + self->pos, current_size);

  0007d	48 8b 93 88 00
	00 00		 mov	 rdx, QWORD PTR [rbx+136]
  00084	4c 8b c6	 mov	 r8, rsi
  00087	49 8b cc	 mov	 rcx, r12
  0008a	48 03 93 90 00
	00 00		 add	 rdx, QWORD PTR [rbx+144]
  00091	e8 00 00 00 00	 call	 memcpy

; 1608 :         remaining -= current_size;

  00096	48 2b fe	 sub	 rdi, rsi

; 1609 :         written += current_size;
; 1610 :         self->pos += current_size;

  00099	48 01 b3 90 00
	00 00		 add	 QWORD PTR [rbx+144], rsi
  000a0	48 8b ee	 mov	 rbp, rsi
$LN28@bufferedre@7:

; 1611 :     }
; 1612 :     /* Flush the write buffer if necessary */
; 1613 :     if (self->writable) {

  000a3	44 39 6b 74	 cmp	 DWORD PTR [rbx+116], r13d
  000a7	74 19		 je	 SHORT $LN27@bufferedre@7

; 1614 :         PyObject *r = buffered_flush_and_rewind_unlocked(self);

  000a9	48 8b cb	 mov	 rcx, rbx
  000ac	e8 00 00 00 00	 call	 buffered_flush_and_rewind_unlocked

; 1615 :         if (r == NULL)

  000b1	48 85 c0	 test	 rax, rax
  000b4	0f 84 7c 01 00
	00		 je	 $error$21705

; 1616 :             goto error;
; 1617 :         Py_DECREF(r);

  000ba	48 8b c8	 mov	 rcx, rax
  000bd	e8 00 00 00 00	 call	 _Py_DecRef
$LN27@bufferedre@7:

; 1618 :     }
; 1619 :     _bufferedreader_reset_buf(self);

  000c2	48 8b cb	 mov	 rcx, rbx
  000c5	e8 00 00 00 00	 call	 _bufferedreader_reset_buf

; 1620 :     while (remaining > 0) {

  000ca	48 85 ff	 test	 rdi, rdi
  000cd	7e 64		 jle	 SHORT $LN49@bufferedre@7
  000cf	90		 npad	 1
$LL25@bufferedre@7:

; 1621 :         /* We want to read a whole block at the end into buffer.
; 1622 :            If we had readv() we could do this in one pass. */
; 1623 :         Py_ssize_t r = MINUS_LAST_BLOCK(self, remaining);

  000d0	48 8b 83 d0 00
	00 00		 mov	 rax, QWORD PTR [rbx+208]
  000d7	48 85 c0	 test	 rax, rax
  000da	74 08		 je	 SHORT $LN35@bufferedre@7
  000dc	48 f7 d0	 not	 rax
  000df	48 23 c7	 and	 rax, rdi
  000e2	eb 13		 jmp	 SHORT $LN36@bufferedre@7
$LN35@bufferedre@7:
  000e4	48 8b 8b c8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+200]
  000eb	48 8b c7	 mov	 rax, rdi
  000ee	48 99		 cdq
  000f0	48 f7 f9	 idiv	 rcx
  000f3	48 0f af c1	 imul	 rax, rcx
$LN36@bufferedre@7:

; 1624 :         if (r == 0)

  000f7	48 85 c0	 test	 rax, rax
  000fa	74 37		 je	 SHORT $LN49@bufferedre@7

; 1625 :             break;
; 1626 :         r = _bufferedreader_raw_read(self, out + written, r);

  000fc	49 8d 14 2c	 lea	 rdx, QWORD PTR [r12+rbp]
  00100	4c 8b c0	 mov	 r8, rax
  00103	48 8b cb	 mov	 rcx, rbx
  00106	e8 00 00 00 00	 call	 _bufferedreader_raw_read

; 1627 :         if (r == -1)

  0010b	48 83 f8 ff	 cmp	 rax, -1
  0010f	0f 84 21 01 00
	00		 je	 $error$21705

; 1628 :             goto error;
; 1629 :         if (r == 0 || r == -2) {

  00115	48 85 c0	 test	 rax, rax
  00118	0f 84 b5 00 00
	00		 je	 $LN18@bufferedre@7
  0011e	48 83 f8 fe	 cmp	 rax, -2
  00122	0f 84 a6 00 00
	00		 je	 $LN41@bufferedre@7

; 1639 :         }
; 1640 :         remaining -= r;

  00128	48 2b f8	 sub	 rdi, rax

; 1641 :         written += r;

  0012b	48 03 e8	 add	 rbp, rax
  0012e	48 85 ff	 test	 rdi, rdi
  00131	7f 9d		 jg	 SHORT $LL25@bufferedre@7
$LN49@bufferedre@7:

; 1642 :     }
; 1643 :     assert(remaining <= self->buffer_size);
; 1644 :     self->pos = 0;

  00133	4c 89 ab 90 00
	00 00		 mov	 QWORD PTR [rbx+144], r13

; 1645 :     self->raw_pos = 0;

  0013a	4c 89 ab 98 00
	00 00		 mov	 QWORD PTR [rbx+152], r13

; 1646 :     self->read_end = 0;

  00141	4c 89 ab a0 00
	00 00		 mov	 QWORD PTR [rbx+160], r13

; 1647 :     /* NOTE: when the read is satisfied, we avoid issuing any additional
; 1648 :        reads, which could block indefinitely (e.g. on a socket).
; 1649 :        See issue #9550. */
; 1650 :     while (remaining > 0 && self->read_end < self->buffer_size) {

  00148	48 85 ff	 test	 rdi, rdi
  0014b	0f 8e 93 00 00
	00		 jle	 $LN50@bufferedre@7
  00151	66 66 66 66 66
	66 66 0f 1f 84
	00 00 00 00 00	 npad	 15
$LL16@bufferedre@7:
  00160	48 8b 83 c8 00
	00 00		 mov	 rax, QWORD PTR [rbx+200]
  00167	48 39 83 a0 00
	00 00		 cmp	 QWORD PTR [rbx+160], rax
  0016e	7d 74		 jge	 SHORT $LN50@bufferedre@7

; 1651 :         Py_ssize_t r = _bufferedreader_fill_buffer(self);

  00170	48 8b cb	 mov	 rcx, rbx
  00173	e8 00 00 00 00	 call	 _bufferedreader_fill_buffer
  00178	48 8b f0	 mov	 rsi, rax

; 1652 :         if (r == -1)

  0017b	48 83 f8 ff	 cmp	 rax, -1
  0017f	0f 84 b1 00 00
	00		 je	 $error$21705

; 1653 :             goto error;
; 1654 :         if (r == 0 || r == -2) {

  00185	48 85 c0	 test	 rax, rax
  00188	0f 84 97 00 00
	00		 je	 $LN10@bufferedre@7
  0018e	48 83 f8 fe	 cmp	 rax, -2
  00192	74 6d		 je	 SHORT $LN46@bufferedre@7

; 1664 :         }
; 1665 :         if (remaining > r) {
; 1666 :             memcpy(out + written, self->buffer + self->pos, r);

  00194	48 8b 93 88 00
	00 00		 mov	 rdx, QWORD PTR [rbx+136]
  0019b	49 8d 0c 2c	 lea	 rcx, QWORD PTR [r12+rbp]
  0019f	48 03 93 90 00
	00 00		 add	 rdx, QWORD PTR [rbx+144]
  001a6	48 3b f8	 cmp	 rdi, rax
  001a9	7e 40		 jle	 SHORT $LN8@bufferedre@7
  001ab	4c 8b c0	 mov	 r8, rax
  001ae	e8 00 00 00 00	 call	 memcpy

; 1667 :             written += r;
; 1668 :             self->pos += r;

  001b3	48 01 b3 90 00
	00 00		 add	 QWORD PTR [rbx+144], rsi
  001ba	48 03 ee	 add	 rbp, rsi

; 1669 :             remaining -= r;

  001bd	48 2b fe	 sub	 rdi, rsi

; 1675 :             remaining = 0;
; 1676 :         }
; 1677 :         if (remaining == 0)

  001c0	74 22		 je	 SHORT $LN50@bufferedre@7

; 1647 :     /* NOTE: when the read is satisfied, we avoid issuing any additional
; 1648 :        reads, which could block indefinitely (e.g. on a socket).
; 1649 :        See issue #9550. */
; 1650 :     while (remaining > 0 && self->read_end < self->buffer_size) {

  001c2	48 85 ff	 test	 rdi, rdi
  001c5	7f 99		 jg	 SHORT $LL16@bufferedre@7

; 1633 :                     goto error;
; 1634 :                 return res;

  001c7	48 8b 44 24 40	 mov	 rax, QWORD PTR res$[rsp]
  001cc	eb 79		 jmp	 SHORT $LN52@bufferedre@7
$LN41@bufferedre@7:

; 1630 :             /* EOF occurred or read() would block. */
; 1631 :             if (r == 0 || written > 0) {

  001ce	48 85 ed	 test	 rbp, rbp

; 1635 :             }
; 1636 :             Py_DECREF(res);
; 1637 :             Py_INCREF(Py_None);
; 1638 :             return Py_None;

  001d1	7e 33		 jle	 SHORT $LN53@bufferedre@7
$LN18@bufferedre@7:

; 1632 :                 if (_PyBytes_Resize(&res, written))

  001d3	48 8d 4c 24 40	 lea	 rcx, QWORD PTR res$[rsp]
  001d8	48 8b d5	 mov	 rdx, rbp
  001db	e8 00 00 00 00	 call	 _PyBytes_Resize
  001e0	85 c0		 test	 eax, eax
  001e2	75 52		 jne	 SHORT $error$21705
$LN50@bufferedre@7:

; 1633 :                     goto error;
; 1634 :                 return res;

  001e4	48 8b 44 24 40	 mov	 rax, QWORD PTR res$[rsp]
  001e9	eb 5c		 jmp	 SHORT $LN52@bufferedre@7
$LN8@bufferedre@7:

; 1670 :         }
; 1671 :         else if (remaining > 0) {
; 1672 :             memcpy(out + written, self->buffer + self->pos, remaining);

  001eb	4c 8b c7	 mov	 r8, rdi
  001ee	e8 00 00 00 00	 call	 memcpy

; 1673 :             written += remaining;
; 1674 :             self->pos += remaining;

  001f3	48 01 bb 90 00
	00 00		 add	 QWORD PTR [rbx+144], rdi
  001fa	48 8b 44 24 40	 mov	 rax, QWORD PTR res$[rsp]
  001ff	eb 46		 jmp	 SHORT $LN52@bufferedre@7
$LN46@bufferedre@7:

; 1655 :             /* EOF occurred or read() would block. */
; 1656 :             if (r == 0 || written > 0) {

  00201	48 85 ed	 test	 rbp, rbp
  00204	7f 1f		 jg	 SHORT $LN10@bufferedre@7
$LN53@bufferedre@7:

; 1660 :             }
; 1661 :             Py_DECREF(res);

  00206	48 8b 4c 24 40	 mov	 rcx, QWORD PTR res$[rsp]
  0020b	e8 00 00 00 00	 call	 _Py_DecRef

; 1662 :             Py_INCREF(Py_None);

  00210	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00217	e8 00 00 00 00	 call	 _Py_IncRef

; 1663 :             return Py_None;

  0021c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00223	eb 22		 jmp	 SHORT $LN52@bufferedre@7
$LN10@bufferedre@7:

; 1657 :                 if (_PyBytes_Resize(&res, written))

  00225	48 8d 4c 24 40	 lea	 rcx, QWORD PTR res$[rsp]
  0022a	48 8b d5	 mov	 rdx, rbp
  0022d	e8 00 00 00 00	 call	 _PyBytes_Resize
  00232	85 c0		 test	 eax, eax

; 1658 :                     goto error;
; 1659 :                 return res;

  00234	74 ae		 je	 SHORT $LN50@bufferedre@7
$error$21705:

; 1678 :             break;
; 1679 :     }
; 1680 : 
; 1681 :     return res;
; 1682 : 
; 1683 : error:
; 1684 :     Py_XDECREF(res);

  00236	48 8b 4c 24 40	 mov	 rcx, QWORD PTR res$[rsp]
  0023b	48 85 c9	 test	 rcx, rcx
  0023e	74 05		 je	 SHORT $LN3@bufferedre@7
  00240	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@bufferedre@7:

; 1685 :     return NULL;

  00245	33 c0		 xor	 eax, eax
$LN52@bufferedre@7:
  00247	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  0024c	4c 8b 64 24 50	 mov	 r12, QWORD PTR [rsp+80]

; 1686 : }

  00251	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  00256	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0025a	41 5d		 pop	 r13
  0025c	5f		 pop	 rdi
  0025d	5e		 pop	 rsi
  0025e	c3		 ret	 0
_bufferedreader_read_generic ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@GLDJGMGO@read?5of?5closed?5file?$AA@	; `string'
PUBLIC	??_C@_0CD@DNPPMMNB@read?5length?5must?5be?5positive?5or?5@ ; `string'
PUBLIC	??_C@_08DBDOJIJG@?$HMO?$CG?3read?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_read DD imagerel buffered_read
	DD	imagerel buffered_read+194
	DD	imagerel $unwind$buffered_read
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$buffered_read DD imagerel buffered_read+194
	DD	imagerel buffered_read+327
	DD	imagerel $chain$0$buffered_read
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$buffered_read DD imagerel buffered_read+327
	DD	imagerel buffered_read+390
	DD	imagerel $chain$2$buffered_read
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$buffered_read DD 020021H
	DD	077400H
	DD	imagerel buffered_read
	DD	imagerel buffered_read+194
	DD	imagerel $unwind$buffered_read
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$buffered_read DD 020521H
	DD	077405H
	DD	imagerel buffered_read
	DD	imagerel buffered_read+194
	DD	imagerel $unwind$buffered_read
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_read DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0BE@GLDJGMGO@read?5of?5closed?5file?$AA@
CONST	SEGMENT
??_C@_0BE@GLDJGMGO@read?5of?5closed?5file?$AA@ DB 'read of closed file', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@DNPPMMNB@read?5length?5must?5be?5positive?5or?5@
CONST	SEGMENT
??_C@_0CD@DNPPMMNB@read?5length?5must?5be?5positive?5or?5@ DB 'read lengt'
	DB	'h must be positive or -1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DBDOJIJG@?$HMO?$CG?3read?$AA@
CONST	SEGMENT
??_C@_08DBDOJIJG@?$HMO?$CG?3read?$AA@ DB '|O&:read', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT buffered_read
_TEXT	SEGMENT
n$ = 48
self$ = 48
args$ = 56
buffered_read PROC					; COMDAT

; 884  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 885  :     Py_ssize_t n = -1;
; 886  :     PyObject *res;
; 887  : 
; 888  :     CHECK_INITIALIZED(self)

  00006	83 79 68 00	 cmp	 DWORD PTR [rcx+104], 0
  0000a	48 8b c2	 mov	 rax, rdx
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	48 c7 44 24 30
	ff ff ff ff	 mov	 QWORD PTR n$[rsp], -1
  00019	7f 28		 jg	 SHORT $LN16@buffered_r@9
  0001b	83 79 6c 00	 cmp	 DWORD PTR [rcx+108], 0
  0001f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  0002d	75 07		 jne	 SHORT $LN28@buffered_r@9
  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
$LN28@buffered_r@9:
  00036	e8 00 00 00 00	 call	 PyErr_SetString
$LN31@buffered_r@9:
  0003b	33 c0		 xor	 eax, eax

; 918  : }

  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5b		 pop	 rbx
  00042	c3		 ret	 0
$LN16@buffered_r@9:

; 889  :     if (!PyArg_ParseTuple(args, "|O&:read", &_PyIO_ConvertSsize_t, &n)) {

  00043	4c 8d 4c 24 30	 lea	 r9, QWORD PTR n$[rsp]
  00048	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_PyIO_ConvertSsize_t
  0004f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08DBDOJIJG@?$HMO?$CG?3read?$AA@
  00056	48 8b c8	 mov	 rcx, rax
  00059	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0005e	85 c0		 test	 eax, eax

; 890  :         return NULL;

  00060	74 d9		 je	 SHORT $LN31@buffered_r@9

; 891  :     }
; 892  :     if (n < -1) {

  00062	48 83 7c 24 30
	ff		 cmp	 QWORD PTR n$[rsp], -1
  00068	7d 1b		 jge	 SHORT $LN12@buffered_r@9

; 893  :         PyErr_SetString(PyExc_ValueError,
; 894  :                         "read length must be positive or -1");

  0006a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00071	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@DNPPMMNB@read?5length?5must?5be?5positive?5or?5@
  00078	e8 00 00 00 00	 call	 PyErr_SetString

; 895  :         return NULL;

  0007d	33 c0		 xor	 eax, eax

; 918  : }

  0007f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00083	5b		 pop	 rbx
  00084	c3		 ret	 0
$LN12@buffered_r@9:

; 896  :     }
; 897  : 
; 898  :     CHECK_CLOSED(self, "read of closed file")

  00085	83 7b 7c 00	 cmp	 DWORD PTR [rbx+124], 0
  00089	74 0b		 je	 SHORT $LN19@buffered_r@9
  0008b	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  0008f	e8 00 00 00 00	 call	 _PyFileIO_closed
  00094	eb 08		 jmp	 SHORT $LN20@buffered_r@9
$LN19@buffered_r@9:
  00096	48 8b cb	 mov	 rcx, rbx
  00099	e8 00 00 00 00	 call	 buffered_closed
$LN20@buffered_r@9:
  0009e	85 c0		 test	 eax, eax
  000a0	74 1b		 je	 SHORT $LN11@buffered_r@9
  000a2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@GLDJGMGO@read?5of?5closed?5file?$AA@
  000b0	e8 00 00 00 00	 call	 PyErr_SetString
  000b5	33 c0		 xor	 eax, eax

; 918  : }

  000b7	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000bb	5b		 pop	 rbx
  000bc	c3		 ret	 0
$LN11@buffered_r@9:

; 899  : 
; 900  :     if (n == -1) {

  000bd	48 8b 54 24 30	 mov	 rdx, QWORD PTR n$[rsp]
  000c2	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  000c7	48 83 fa ff	 cmp	 rdx, -1
  000cb	75 33		 jne	 SHORT $LN10@buffered_r@9

; 901  :         /* The number of bytes is unspecified, read until the end of stream */
; 902  :         if (!ENTER_BUFFERED(self))

  000cd	48 8b 8b b8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+184]
  000d4	33 d2		 xor	 edx, edx
  000d6	e8 00 00 00 00	 call	 PyThread_acquire_lock
  000db	85 c0		 test	 eax, eax
  000dd	75 0c		 jne	 SHORT $LN25@buffered_r@9
  000df	48 8b cb	 mov	 rcx, rbx
  000e2	e8 00 00 00 00	 call	 _enter_buffered_busy
  000e7	85 c0		 test	 eax, eax

; 903  :             return NULL;

  000e9	74 4f		 je	 SHORT $LN30@buffered_r@9
$LN25@buffered_r@9:

; 901  :         /* The number of bytes is unspecified, read until the end of stream */
; 902  :         if (!ENTER_BUFFERED(self))

  000eb	e8 00 00 00 00	 call	 PyThread_get_thread_ident

; 904  :         res = _bufferedreader_read_all(self);

  000f0	48 8b cb	 mov	 rcx, rbx
  000f3	89 83 c0 00 00
	00		 mov	 DWORD PTR [rbx+192], eax
  000f9	e8 00 00 00 00	 call	 _bufferedreader_read_all

; 905  :     }
; 906  :     else {

  000fe	eb 5f		 jmp	 SHORT $LN29@buffered_r@9
$LN10@buffered_r@9:

; 907  :         res = _bufferedreader_read_fast(self, n);

  00100	48 8b cb	 mov	 rcx, rbx
  00103	e8 00 00 00 00	 call	 _bufferedreader_read_fast

; 908  :         if (res != Py_None)

  00108	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0010f	48 3b c1	 cmp	 rax, rcx

; 909  :             return res;

  00112	75 67		 jne	 SHORT $LN27@buffered_r@9

; 910  :         Py_DECREF(res);

  00114	48 8b c8	 mov	 rcx, rax
  00117	e8 00 00 00 00	 call	 _Py_DecRef

; 911  :         if (!ENTER_BUFFERED(self))

  0011c	48 8b 8b b8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+184]
  00123	33 d2		 xor	 edx, edx
  00125	e8 00 00 00 00	 call	 PyThread_acquire_lock
  0012a	85 c0		 test	 eax, eax
  0012c	75 19		 jne	 SHORT $LN26@buffered_r@9
  0012e	48 8b cb	 mov	 rcx, rbx
  00131	e8 00 00 00 00	 call	 _enter_buffered_busy
  00136	85 c0		 test	 eax, eax
  00138	75 0d		 jne	 SHORT $LN26@buffered_r@9
$LN30@buffered_r@9:

; 912  :             return NULL;

  0013a	33 c0		 xor	 eax, eax
  0013c	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]

; 918  : }

  00141	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00145	5b		 pop	 rbx
  00146	c3		 ret	 0
$LN26@buffered_r@9:

; 911  :         if (!ENTER_BUFFERED(self))

  00147	e8 00 00 00 00	 call	 PyThread_get_thread_ident

; 913  :         res = _bufferedreader_read_generic(self, n);

  0014c	48 8b 54 24 30	 mov	 rdx, QWORD PTR n$[rsp]
  00151	48 8b cb	 mov	 rcx, rbx
  00154	89 83 c0 00 00
	00		 mov	 DWORD PTR [rbx+192], eax
  0015a	e8 00 00 00 00	 call	 _bufferedreader_read_generic
$LN29@buffered_r@9:

; 914  :     }
; 915  : 
; 916  :     LEAVE_BUFFERED(self)

  0015f	48 8b 8b b8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+184]
  00166	48 8b f8	 mov	 rdi, rax
  00169	c7 83 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rbx+192], 0
  00173	e8 00 00 00 00	 call	 PyThread_release_lock

; 917  :     return res;

  00178	48 8b c7	 mov	 rax, rdi
$LN27@buffered_r@9:
  0017b	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]

; 918  : }

  00180	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00184	5b		 pop	 rbx
  00185	c3		 ret	 0
buffered_read ENDP
_TEXT	ENDS
END
