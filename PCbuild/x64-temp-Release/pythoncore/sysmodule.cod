; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_11LOCGONAA@?$AA?$AA@			; `string'
PUBLIC	??_C@_03PIADFGHL@sys?$AA@			; `string'
PUBLIC	??_C@_0L@DIPKOOGN@cpython?933?$AA@		; `string'
PUBLIC	??_C@_07EOMJFIDL@cpython?$AA@			; `string'
PUBLIC	??_C@_0BB@DNJDILJD@sys?4version_info?$AA@	; `string'
PUBLIC	??_C@_0BG@GIMBGDAI@Serial?5release?5number?$AA@	; `string'
PUBLIC	??_C@_06KCELPKEE@serial?$AA@			; `string'
PUBLIC	??_C@_0CL@HEOEKGNF@?8alpha?8?0?5?8beta?8?0?5?8candidate?8?0?5or@ ; `string'
PUBLIC	??_C@_0N@KAHPCFIL@releaselevel?$AA@		; `string'
PUBLIC	??_C@_0BF@JHPIGCCC@Patch?5release?5number?$AA@	; `string'
PUBLIC	??_C@_05PCPGMEFP@micro?$AA@			; `string'
PUBLIC	??_C@_0BF@LOMFDHHP@Minor?5release?5number?$AA@	; `string'
PUBLIC	??_C@_0BF@MKHGOMCP@Major?5release?5number?$AA@	; `string'
PUBLIC	??_C@_09KICJBJND@sys?4flags?$AA@		; `string'
PUBLIC	??_C@_02LIKGMMII@?9R?$AA@			; `string'
PUBLIC	??_C@_0BD@CKHJKECB@hash_randomization?$AA@	; `string'
PUBLIC	??_C@_02GAPLLOJ@?9q?$AA@			; `string'
PUBLIC	??_C@_05PMBAOCDH@quiet?$AA@			; `string'
PUBLIC	??_C@_02GHOAPKHL@?9b?$AA@			; `string'
PUBLIC	??_C@_0O@NKLJCOA@bytes_warning?$AA@		; `string'
PUBLIC	??_C@_02EJEOCNCO@?9v?$AA@			; `string'
PUBLIC	??_C@_07KBAMPNJK@verbose?$AA@			; `string'
PUBLIC	??_C@_02LNCFEIBO@?9E?$AA@			; `string'
PUBLIC	??_C@_0BD@OHBIJAIF@ignore_environment?$AA@	; `string'
PUBLIC	??_C@_02KBLNPNMJ@?9S?$AA@			; `string'
PUBLIC	??_C@_07GMLEGJMJ@no_site?$AA@			; `string'
PUBLIC	??_C@_02DEDJNJGL@?9s?$AA@			; `string'
PUBLIC	??_C@_0N@MBFKKMMD@no_user_site?$AA@		; `string'
PUBLIC	??_C@_02PCGENONJ@?9B?$AA@			; `string'
PUBLIC	??_C@_0BE@CMMEJPLN@dont_write_bytecode?$AA@	; `string'
PUBLIC	??_C@_09PKCBOAHP@?9O?5or?5?9OO?$AA@		; `string'
PUBLIC	??_C@_08GHMAOHAP@optimize?$AA@			; `string'
PUBLIC	??_C@_0M@JFHLOKPA@interactive?$AA@		; `string'
PUBLIC	??_C@_02IEBECDLA@?9i?$AA@			; `string'
PUBLIC	??_C@_07PHKOPNKE@inspect?$AA@			; `string'
PUBLIC	??_C@_02DBLKFNPN@?9d?$AA@			; `string'
PUBLIC	??_C@_05GFCDIDHO@debug?$AA@			; `string'
PUBLIC	??_C@_0BC@POJOHICO@_debugmallocstats?$AA@	; `string'
PUBLIC	??_C@_0N@KMLHGNOF@call_tracing?$AA@		; `string'
PUBLIC	??_C@_08GDPINLFO@gettrace?$AA@			; `string'
PUBLIC	??_C@_08JCNEMICD@settrace?$AA@			; `string'
PUBLIC	??_C@_0BC@CJNNCJOO@setrecursionlimit?$AA@	; `string'
PUBLIC	??_C@_0L@FAAIOKJK@getprofile?$AA@		; `string'
PUBLIC	??_C@_0L@EOCHFNND@setprofile?$AA@		; `string'
PUBLIC	??_C@_0BC@BHBGOHLO@getswitchinterval?$AA@	; `string'
PUBLIC	??_C@_0BC@DCBNGMKA@setswitchinterval?$AA@	; `string'
PUBLIC	??_C@_0BB@GGHHFLMK@getcheckinterval?$AA@	; `string'
PUBLIC	??_C@_0BB@CCOOFHI@setcheckinterval?$AA@		; `string'
PUBLIC	??_C@_06OCOCPMLE@intern?$AA@			; `string'
PUBLIC	??_C@_0BC@NJOPCOOO@getwindowsversion?$AA@	; `string'
PUBLIC	??_C@_09GKOEPENJ@_getframe?$AA@			; `string'
PUBLIC	??_C@_09CMGNPIEG@getsizeof?$AA@			; `string'
PUBLIC	??_C@_0BC@MNGKCPA@getrecursionlimit?$AA@	; `string'
PUBLIC	??_C@_0M@GIAAAIMC@getrefcount?$AA@		; `string'
PUBLIC	??_C@_0BG@PHHGLMBK@getfilesystemencoding?$AA@	; `string'
PUBLIC	??_C@_0BD@OAPOKCOC@getdefaultencoding?$AA@	; `string'
PUBLIC	??_C@_04MKNBDEPB@exit?$AA@			; `string'
PUBLIC	??_C@_0L@NONONIOP@excepthook?$AA@		; `string'
PUBLIC	??_C@_08NGNFBMDD@exc_info?$AA@			; `string'
PUBLIC	??_C@_0M@OABHHABA@displayhook?$AA@		; `string'
PUBLIC	??_C@_0BA@DMNJMFCA@_current_frames?$AA@		; `string'
PUBLIC	??_C@_0BC@BEPIHGAL@_clear_type_cache?$AA@	; `string'
PUBLIC	??_C@_09PDHLGNMH@callstats?$AA@			; `string'
PUBLIC	??_C@_0L@HOGGIPGN@__sizeof__?$AA@		; `string'
PUBLIC	??_C@_07DLHCIBDH@default?$AA@			; `string'
PUBLIC	??_C@_06IEOJBDIK@object?$AA@			; `string'
PUBLIC	??_C@_0BG@IEPEIABL@sys?4getwindowsversion?$AA@	; `string'
PUBLIC	??_C@_0BE@OMEOIKCM@System?5product?5type?$AA@	; `string'
PUBLIC	??_C@_0N@MOJPCNBF@product_type?$AA@		; `string'
PUBLIC	??_C@_0CO@GOCNOCCF@Bit?5mask?5identifying?5available?5p@ ; `string'
PUBLIC	??_C@_0L@CNNCACDH@suite_mask?$AA@		; `string'
PUBLIC	??_C@_0CC@IKCJAIGH@Service?5Pack?5minor?5version?5numbe@ ; `string'
PUBLIC	??_C@_0BD@CENDDB@service_pack_minor?$AA@	; `string'
PUBLIC	??_C@_0CC@POJKNDDH@Service?5Pack?5major?5version?5numbe@ ; `string'
PUBLIC	??_C@_0BD@LPDGAPKH@service_pack_major?$AA@	; `string'
PUBLIC	??_C@_0CM@JMPIOEPN@Latest?5Service?5Pack?5installed?5on@ ; `string'
PUBLIC	??_C@_0N@CGHPFCLJ@service_pack?$AA@		; `string'
PUBLIC	??_C@_0BK@MILMMMCK@Operating?5system?5platform?$AA@ ; `string'
PUBLIC	??_C@_08CBHCFJJK@platform?$AA@			; `string'
PUBLIC	??_C@_0N@KKPGKAMF@Build?5number?$AA@		; `string'
PUBLIC	??_C@_05DMEBLLNM@build?$AA@			; `string'
PUBLIC	??_C@_0BF@JMHJKOJE@Minor?5version?5number?$AA@	; `string'
PUBLIC	??_C@_05OLAOEALN@minor?$AA@			; `string'
PUBLIC	??_C@_0BF@OIMKHFME@Major?5version?5number?$AA@	; `string'
PUBLIC	??_C@_05FEBMJMCL@major?$AA@			; `string'
PUBLIC	??_C@_0O@NIHDLFJ@sys?4hash_info?$AA@		; `string'
PUBLIC	??_C@_0DL@GNKDLGEF@multiplier?5used?5for?5the?5imaginar@ ; `string'
PUBLIC	??_C@_04HBKGOHH@imag?$AA@			; `string'
PUBLIC	??_C@_0CD@FMLNIOBD@value?5to?5be?5used?5for?5hash?5of?5a?5n@ ; `string'
PUBLIC	??_C@_03LHCJEHON@nan?$AA@			; `string'
PUBLIC	??_C@_0DB@JFCIJPEO@value?5to?5be?5used?5for?5hash?5of?5a?5p@ ; `string'
PUBLIC	??_C@_03OJHLLCGB@inf?$AA@			; `string'
PUBLIC	??_C@_0EE@JNKOINOJ@prime?5number?5giving?5the?5modulus?5@ ; `string'
PUBLIC	??_C@_07CJECEDDG@modulus?$AA@			; `string'
PUBLIC	??_C@_0CM@ELCDEPAM@width?5of?5the?5type?5used?5for?5hashi@ ; `string'
PUBLIC	??_C@_05IGKADHGO@width?$AA@			; `string'
PUBLIC	??_C@_08CPGIAEAH@c_return?$AA@			; `string'
PUBLIC	??_C@_0M@DCFEPNBK@c_exception?$AA@		; `string'
PUBLIC	??_C@_06PAJIEHMP@c_call?$AA@			; `string'
PUBLIC	??_C@_06LNOFJDNM@return?$AA@			; `string'
PUBLIC	??_C@_04HJPCFDOP@line?$AA@			; `string'
PUBLIC	??_C@_09BOIBMEBJ@exception?$AA@			; `string'
PUBLIC	??_C@_04OMFAIDPG@call?$AA@			; `string'
PUBLIC	??_C@_01IDAFKMJL@_?$AA@				; `string'
PUBLIC	??_C@_05NGFEDHGN@write?$AA@			; `string'
PUBLIC	??_C@_06HOHPNJLC@buffer?$AA@			; `string'
PUBLIC	??_C@_08MLPGAEIK@encoding?$AA@			; `string'
PUBLIC	_PySys_ImplName
PUBLIC	_PySys_ImplCacheTag
EXTRN	PyEval_GetCallStats:PROC
_BSS	SEGMENT
whatstrings DQ	07H DUP (?)
WindowsVersionType DB 01e0H DUP (?)
?gc_head_size@?1??sys_getsizeof@@9@9 DQ 01H DUP (?)	; `sys_getsizeof'::`2'::gc_head_size
warnoptions DQ	01H DUP (?)
xoptions DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_11LOCGONAA@?$AA?$AA@
CONST	SEGMENT
??_C@_11LOCGONAA@?$AA?$AA@ DB 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PIADFGHL@sys?$AA@
CONST	SEGMENT
??_C@_03PIADFGHL@sys?$AA@ DB 'sys', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DIPKOOGN@cpython?933?$AA@
CONST	SEGMENT
??_C@_0L@DIPKOOGN@cpython?933?$AA@ DB 'cpython-33', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07EOMJFIDL@cpython?$AA@
CONST	SEGMENT
??_C@_07EOMJFIDL@cpython?$AA@ DB 'cpython', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DNJDILJD@sys?4version_info?$AA@
CONST	SEGMENT
??_C@_0BB@DNJDILJD@sys?4version_info?$AA@ DB 'sys.version_info', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GIMBGDAI@Serial?5release?5number?$AA@
CONST	SEGMENT
??_C@_0BG@GIMBGDAI@Serial?5release?5number?$AA@ DB 'Serial release number'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_06KCELPKEE@serial?$AA@
CONST	SEGMENT
??_C@_06KCELPKEE@serial?$AA@ DB 'serial', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@HEOEKGNF@?8alpha?8?0?5?8beta?8?0?5?8candidate?8?0?5or@
CONST	SEGMENT
??_C@_0CL@HEOEKGNF@?8alpha?8?0?5?8beta?8?0?5?8candidate?8?0?5or@ DB '''al'
	DB	'pha'', ''beta'', ''candidate'', or ''release''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KAHPCFIL@releaselevel?$AA@
CONST	SEGMENT
??_C@_0N@KAHPCFIL@releaselevel?$AA@ DB 'releaselevel', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JHPIGCCC@Patch?5release?5number?$AA@
CONST	SEGMENT
??_C@_0BF@JHPIGCCC@Patch?5release?5number?$AA@ DB 'Patch release number', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05PCPGMEFP@micro?$AA@
CONST	SEGMENT
??_C@_05PCPGMEFP@micro?$AA@ DB 'micro', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LOMFDHHP@Minor?5release?5number?$AA@
CONST	SEGMENT
??_C@_0BF@LOMFDHHP@Minor?5release?5number?$AA@ DB 'Minor release number', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MKHGOMCP@Major?5release?5number?$AA@
CONST	SEGMENT
??_C@_0BF@MKHGOMCP@Major?5release?5number?$AA@ DB 'Major release number', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09KICJBJND@sys?4flags?$AA@
CONST	SEGMENT
??_C@_09KICJBJND@sys?4flags?$AA@ DB 'sys.flags', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02LIKGMMII@?9R?$AA@
CONST	SEGMENT
??_C@_02LIKGMMII@?9R?$AA@ DB '-R', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CKHJKECB@hash_randomization?$AA@
CONST	SEGMENT
??_C@_0BD@CKHJKECB@hash_randomization?$AA@ DB 'hash_randomization', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02GAPLLOJ@?9q?$AA@
CONST	SEGMENT
??_C@_02GAPLLOJ@?9q?$AA@ DB '-q', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PMBAOCDH@quiet?$AA@
CONST	SEGMENT
??_C@_05PMBAOCDH@quiet?$AA@ DB 'quiet', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02GHOAPKHL@?9b?$AA@
CONST	SEGMENT
??_C@_02GHOAPKHL@?9b?$AA@ DB '-b', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NKLJCOA@bytes_warning?$AA@
CONST	SEGMENT
??_C@_0O@NKLJCOA@bytes_warning?$AA@ DB 'bytes_warning', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02EJEOCNCO@?9v?$AA@
CONST	SEGMENT
??_C@_02EJEOCNCO@?9v?$AA@ DB '-v', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07KBAMPNJK@verbose?$AA@
CONST	SEGMENT
??_C@_07KBAMPNJK@verbose?$AA@ DB 'verbose', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02LNCFEIBO@?9E?$AA@
CONST	SEGMENT
??_C@_02LNCFEIBO@?9E?$AA@ DB '-E', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OHBIJAIF@ignore_environment?$AA@
CONST	SEGMENT
??_C@_0BD@OHBIJAIF@ignore_environment?$AA@ DB 'ignore_environment', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KBLNPNMJ@?9S?$AA@
CONST	SEGMENT
??_C@_02KBLNPNMJ@?9S?$AA@ DB '-S', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07GMLEGJMJ@no_site?$AA@
CONST	SEGMENT
??_C@_07GMLEGJMJ@no_site?$AA@ DB 'no_site', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DEDJNJGL@?9s?$AA@
CONST	SEGMENT
??_C@_02DEDJNJGL@?9s?$AA@ DB '-s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MBFKKMMD@no_user_site?$AA@
CONST	SEGMENT
??_C@_0N@MBFKKMMD@no_user_site?$AA@ DB 'no_user_site', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02PCGENONJ@?9B?$AA@
CONST	SEGMENT
??_C@_02PCGENONJ@?9B?$AA@ DB '-B', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CMMEJPLN@dont_write_bytecode?$AA@
CONST	SEGMENT
??_C@_0BE@CMMEJPLN@dont_write_bytecode?$AA@ DB 'dont_write_bytecode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09PKCBOAHP@?9O?5or?5?9OO?$AA@
CONST	SEGMENT
??_C@_09PKCBOAHP@?9O?5or?5?9OO?$AA@ DB '-O or -OO', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GHMAOHAP@optimize?$AA@
CONST	SEGMENT
??_C@_08GHMAOHAP@optimize?$AA@ DB 'optimize', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JFHLOKPA@interactive?$AA@
CONST	SEGMENT
??_C@_0M@JFHLOKPA@interactive?$AA@ DB 'interactive', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02IEBECDLA@?9i?$AA@
CONST	SEGMENT
??_C@_02IEBECDLA@?9i?$AA@ DB '-i', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07PHKOPNKE@inspect?$AA@
CONST	SEGMENT
??_C@_07PHKOPNKE@inspect?$AA@ DB 'inspect', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DBLKFNPN@?9d?$AA@
CONST	SEGMENT
??_C@_02DBLKFNPN@?9d?$AA@ DB '-d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05GFCDIDHO@debug?$AA@
CONST	SEGMENT
??_C@_05GFCDIDHO@debug?$AA@ DB 'debug', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@POJOHICO@_debugmallocstats?$AA@
CONST	SEGMENT
??_C@_0BC@POJOHICO@_debugmallocstats?$AA@ DB '_debugmallocstats', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KMLHGNOF@call_tracing?$AA@
CONST	SEGMENT
??_C@_0N@KMLHGNOF@call_tracing?$AA@ DB 'call_tracing', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08GDPINLFO@gettrace?$AA@
CONST	SEGMENT
??_C@_08GDPINLFO@gettrace?$AA@ DB 'gettrace', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JCNEMICD@settrace?$AA@
CONST	SEGMENT
??_C@_08JCNEMICD@settrace?$AA@ DB 'settrace', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CJNNCJOO@setrecursionlimit?$AA@
CONST	SEGMENT
??_C@_0BC@CJNNCJOO@setrecursionlimit?$AA@ DB 'setrecursionlimit', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FAAIOKJK@getprofile?$AA@
CONST	SEGMENT
??_C@_0L@FAAIOKJK@getprofile?$AA@ DB 'getprofile', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EOCHFNND@setprofile?$AA@
CONST	SEGMENT
??_C@_0L@EOCHFNND@setprofile?$AA@ DB 'setprofile', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BHBGOHLO@getswitchinterval?$AA@
CONST	SEGMENT
??_C@_0BC@BHBGOHLO@getswitchinterval?$AA@ DB 'getswitchinterval', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DCBNGMKA@setswitchinterval?$AA@
CONST	SEGMENT
??_C@_0BC@DCBNGMKA@setswitchinterval?$AA@ DB 'setswitchinterval', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GGHHFLMK@getcheckinterval?$AA@
CONST	SEGMENT
??_C@_0BB@GGHHFLMK@getcheckinterval?$AA@ DB 'getcheckinterval', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CCOOFHI@setcheckinterval?$AA@
CONST	SEGMENT
??_C@_0BB@CCOOFHI@setcheckinterval?$AA@ DB 'setcheckinterval', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06OCOCPMLE@intern?$AA@
CONST	SEGMENT
??_C@_06OCOCPMLE@intern?$AA@ DB 'intern', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NJOPCOOO@getwindowsversion?$AA@
CONST	SEGMENT
??_C@_0BC@NJOPCOOO@getwindowsversion?$AA@ DB 'getwindowsversion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GKOEPENJ@_getframe?$AA@
CONST	SEGMENT
??_C@_09GKOEPENJ@_getframe?$AA@ DB '_getframe', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09CMGNPIEG@getsizeof?$AA@
CONST	SEGMENT
??_C@_09CMGNPIEG@getsizeof?$AA@ DB 'getsizeof', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MNGKCPA@getrecursionlimit?$AA@
CONST	SEGMENT
??_C@_0BC@MNGKCPA@getrecursionlimit?$AA@ DB 'getrecursionlimit', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GIAAAIMC@getrefcount?$AA@
CONST	SEGMENT
??_C@_0M@GIAAAIMC@getrefcount?$AA@ DB 'getrefcount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PHHGLMBK@getfilesystemencoding?$AA@
CONST	SEGMENT
??_C@_0BG@PHHGLMBK@getfilesystemencoding?$AA@ DB 'getfilesystemencoding', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OAPOKCOC@getdefaultencoding?$AA@
CONST	SEGMENT
??_C@_0BD@OAPOKCOC@getdefaultencoding?$AA@ DB 'getdefaultencoding', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04MKNBDEPB@exit?$AA@
CONST	SEGMENT
??_C@_04MKNBDEPB@exit?$AA@ DB 'exit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NONONIOP@excepthook?$AA@
CONST	SEGMENT
??_C@_0L@NONONIOP@excepthook?$AA@ DB 'excepthook', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08NGNFBMDD@exc_info?$AA@
CONST	SEGMENT
??_C@_08NGNFBMDD@exc_info?$AA@ DB 'exc_info', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OABHHABA@displayhook?$AA@
CONST	SEGMENT
??_C@_0M@OABHHABA@displayhook?$AA@ DB 'displayhook', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DMNJMFCA@_current_frames?$AA@
CONST	SEGMENT
??_C@_0BA@DMNJMFCA@_current_frames?$AA@ DB '_current_frames', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BEPIHGAL@_clear_type_cache?$AA@
CONST	SEGMENT
??_C@_0BC@BEPIHGAL@_clear_type_cache?$AA@ DB '_clear_type_cache', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09PDHLGNMH@callstats?$AA@
CONST	SEGMENT
??_C@_09PDHLGNMH@callstats?$AA@ DB 'callstats', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HOGGIPGN@__sizeof__?$AA@
CONST	SEGMENT
??_C@_0L@HOGGIPGN@__sizeof__?$AA@ DB '__sizeof__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DLHCIBDH@default?$AA@
CONST	SEGMENT
??_C@_07DLHCIBDH@default?$AA@ DB 'default', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IEOJBDIK@object?$AA@
CONST	SEGMENT
??_C@_06IEOJBDIK@object?$AA@ DB 'object', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IEPEIABL@sys?4getwindowsversion?$AA@
CONST	SEGMENT
??_C@_0BG@IEPEIABL@sys?4getwindowsversion?$AA@ DB 'sys.getwindowsversion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OMEOIKCM@System?5product?5type?$AA@
CONST	SEGMENT
??_C@_0BE@OMEOIKCM@System?5product?5type?$AA@ DB 'System product type', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MOJPCNBF@product_type?$AA@
CONST	SEGMENT
??_C@_0N@MOJPCNBF@product_type?$AA@ DB 'product_type', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@GOCNOCCF@Bit?5mask?5identifying?5available?5p@
CONST	SEGMENT
??_C@_0CO@GOCNOCCF@Bit?5mask?5identifying?5available?5p@ DB 'Bit mask ide'
	DB	'ntifying available product suites', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CNNCACDH@suite_mask?$AA@
CONST	SEGMENT
??_C@_0L@CNNCACDH@suite_mask?$AA@ DB 'suite_mask', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@IKCJAIGH@Service?5Pack?5minor?5version?5numbe@
CONST	SEGMENT
??_C@_0CC@IKCJAIGH@Service?5Pack?5minor?5version?5numbe@ DB 'Service Pack'
	DB	' minor version number', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CENDDB@service_pack_minor?$AA@
CONST	SEGMENT
??_C@_0BD@CENDDB@service_pack_minor?$AA@ DB 'service_pack_minor', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@POJKNDDH@Service?5Pack?5major?5version?5numbe@
CONST	SEGMENT
??_C@_0CC@POJKNDDH@Service?5Pack?5major?5version?5numbe@ DB 'Service Pack'
	DB	' major version number', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LPDGAPKH@service_pack_major?$AA@
CONST	SEGMENT
??_C@_0BD@LPDGAPKH@service_pack_major?$AA@ DB 'service_pack_major', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@JMPIOEPN@Latest?5Service?5Pack?5installed?5on@
CONST	SEGMENT
??_C@_0CM@JMPIOEPN@Latest?5Service?5Pack?5installed?5on@ DB 'Latest Servi'
	DB	'ce Pack installed on the system', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CGHPFCLJ@service_pack?$AA@
CONST	SEGMENT
??_C@_0N@CGHPFCLJ@service_pack?$AA@ DB 'service_pack', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MILMMMCK@Operating?5system?5platform?$AA@
CONST	SEGMENT
??_C@_0BK@MILMMMCK@Operating?5system?5platform?$AA@ DB 'Operating system '
	DB	'platform', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08CBHCFJJK@platform?$AA@
CONST	SEGMENT
??_C@_08CBHCFJJK@platform?$AA@ DB 'platform', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KKPGKAMF@Build?5number?$AA@
CONST	SEGMENT
??_C@_0N@KKPGKAMF@Build?5number?$AA@ DB 'Build number', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05DMEBLLNM@build?$AA@
CONST	SEGMENT
??_C@_05DMEBLLNM@build?$AA@ DB 'build', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JMHJKOJE@Minor?5version?5number?$AA@
CONST	SEGMENT
??_C@_0BF@JMHJKOJE@Minor?5version?5number?$AA@ DB 'Minor version number', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05OLAOEALN@minor?$AA@
CONST	SEGMENT
??_C@_05OLAOEALN@minor?$AA@ DB 'minor', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OIMKHFME@Major?5version?5number?$AA@
CONST	SEGMENT
??_C@_0BF@OIMKHFME@Major?5version?5number?$AA@ DB 'Major version number', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05FEBMJMCL@major?$AA@
CONST	SEGMENT
??_C@_05FEBMJMCL@major?$AA@ DB 'major', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NIHDLFJ@sys?4hash_info?$AA@
CONST	SEGMENT
??_C@_0O@NIHDLFJ@sys?4hash_info?$AA@ DB 'sys.hash_info', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@GNKDLGEF@multiplier?5used?5for?5the?5imaginar@
CONST	SEGMENT
??_C@_0DL@GNKDLGEF@multiplier?5used?5for?5the?5imaginar@ DB 'multiplier u'
	DB	'sed for the imaginary part of a complex number', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04HBKGOHH@imag?$AA@
CONST	SEGMENT
??_C@_04HBKGOHH@imag?$AA@ DB 'imag', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@FMLNIOBD@value?5to?5be?5used?5for?5hash?5of?5a?5n@
CONST	SEGMENT
??_C@_0CD@FMLNIOBD@value?5to?5be?5used?5for?5hash?5of?5a?5n@ DB 'value to'
	DB	' be used for hash of a nan', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03LHCJEHON@nan?$AA@
CONST	SEGMENT
??_C@_03LHCJEHON@nan?$AA@ DB 'nan', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@JFCIJPEO@value?5to?5be?5used?5for?5hash?5of?5a?5p@
CONST	SEGMENT
??_C@_0DB@JFCIJPEO@value?5to?5be?5used?5for?5hash?5of?5a?5p@ DB 'value to'
	DB	' be used for hash of a positive infinity', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03OJHLLCGB@inf?$AA@
CONST	SEGMENT
??_C@_03OJHLLCGB@inf?$AA@ DB 'inf', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@JNKOINOJ@prime?5number?5giving?5the?5modulus?5@
CONST	SEGMENT
??_C@_0EE@JNKOINOJ@prime?5number?5giving?5the?5modulus?5@ DB 'prime numbe'
	DB	'r giving the modulus on which the hash function is based', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07CJECEDDG@modulus?$AA@
CONST	SEGMENT
??_C@_07CJECEDDG@modulus?$AA@ DB 'modulus', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@ELCDEPAM@width?5of?5the?5type?5used?5for?5hashi@
CONST	SEGMENT
??_C@_0CM@ELCDEPAM@width?5of?5the?5type?5used?5for?5hashi@ DB 'width of t'
	DB	'he type used for hashing, in bits', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05IGKADHGO@width?$AA@
CONST	SEGMENT
??_C@_05IGKADHGO@width?$AA@ DB 'width', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CPGIAEAH@c_return?$AA@
CONST	SEGMENT
??_C@_08CPGIAEAH@c_return?$AA@ DB 'c_return', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DCFEPNBK@c_exception?$AA@
CONST	SEGMENT
??_C@_0M@DCFEPNBK@c_exception?$AA@ DB 'c_exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06PAJIEHMP@c_call?$AA@
CONST	SEGMENT
??_C@_06PAJIEHMP@c_call?$AA@ DB 'c_call', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LNOFJDNM@return?$AA@
CONST	SEGMENT
??_C@_06LNOFJDNM@return?$AA@ DB 'return', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HJPCFDOP@line?$AA@
CONST	SEGMENT
??_C@_04HJPCFDOP@line?$AA@ DB 'line', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09BOIBMEBJ@exception?$AA@
CONST	SEGMENT
??_C@_09BOIBMEBJ@exception?$AA@ DB 'exception', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04OMFAIDPG@call?$AA@
CONST	SEGMENT
??_C@_04OMFAIDPG@call?$AA@ DB 'call', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
displayhook_doc DB 'displayhook(object) -> None', 0aH, 0aH, 'Print an obj'
	DB	'ect to sys.stdout and also save it in builtins._', 0aH, 00H
	ORG $+5
excepthook_doc DB 'excepthook(exctype, value, traceback) -> None', 0aH, 0aH
	DB	'Handle an exception by displaying it with a traceback on sys.'
	DB	'stderr.', 0aH, 00H
	ORG $+3
?whatnames@?1??trace_init@@9@9 DQ FLAT:??_C@_04OMFAIDPG@call?$AA@ ; `trace_init'::`2'::whatnames
	DQ	FLAT:??_C@_09BOIBMEBJ@exception?$AA@
	DQ	FLAT:??_C@_04HJPCFDOP@line?$AA@
	DQ	FLAT:??_C@_06LNOFJDNM@return?$AA@
	DQ	FLAT:??_C@_06PAJIEHMP@c_call?$AA@
	DQ	FLAT:??_C@_0M@DCFEPNBK@c_exception?$AA@
	DQ	FLAT:??_C@_08CPGIAEAH@c_return?$AA@
exc_info_doc DB	'exc_info() -> (type, value, traceback)', 0aH, 0aH, 'Retu'
	DB	'rn information about the most recent exception caught by an e'
	DB	'xcept', 0aH, 'clause in the current stack frame or in an olde'
	DB	'r stack frame.', 00H
	ORG $+3
exit_doc DB	'exit([status])', 0aH, 0aH, 'Exit the interpreter by rais'
	DB	'ing SystemExit(status).', 0aH, 'If the status is omitted or N'
	DB	'one, it defaults to zero (i.e., success).', 0aH, 'If the stat'
	DB	'us is an integer, it will be used as the system exit status.', 0aH
	DB	'If it is another kind of object, it will be printed and the s'
	DB	'ystem', 0aH, 'exit status will be one (i.e., failure).', 00H
	ORG $+1
getdefaultencoding_doc DB 'getdefaultencoding() -> string', 0aH, 0aH, 'Re'
	DB	'turn the current default string encoding used by the Unicode '
	DB	0aH, 'implementation.', 00H
getfilesystemencoding_doc DB 'getfilesystemencoding() -> string', 0aH, 0aH
	DB	'Return the encoding used to convert Unicode filenames in', 0aH
	DB	'operating system filenames.', 00H
_check_interval DD 064H
	ORG $+4
intern_doc DB	'intern(string) -> string', 0aH, 0aH, '``Intern'''' the g'
	DB	'iven string.  This enters the string in the (global)', 0aH, 't'
	DB	'able of interned strings whose purpose is to speed up diction'
	DB	'ary lookups.', 0aH, 'Return the string itself or the previous'
	DB	'ly interned string object with the', 0aH, 'same value.', 00H
	ORG $+7
hash_info_desc DQ FLAT:??_C@_0O@NIHDLFJ@sys?4hash_info?$AA@
	DQ	FLAT:hash_info_doc
	DQ	FLAT:hash_info_fields
	DD	05H
	ORG $+4
?kwlist@?1??sys_getsizeof@@9@9 DQ FLAT:??_C@_06IEOJBDIK@object?$AA@ ; `sys_getsizeof'::`2'::kwlist
	DQ	FLAT:??_C@_07DLHCIBDH@default?$AA@
	DQ	0000000000000000H
settrace_doc DB	'settrace(function)', 0aH, 0aH, 'Set the global debug tra'
	DB	'cing function.  It will be called on each', 0aH, 'function ca'
	DB	'll.  See the debugger chapter in the library manual.', 00H
	ORG $+2
windows_version_desc DQ FLAT:??_C@_0BG@IEPEIABL@sys?4getwindowsversion?$AA@
	DQ	FLAT:getwindowsversion_doc
	DQ	FLAT:windows_version_fields
	DD	05H
	ORG $+4
version_info__doc__ DB 'sys.version_info', 0aH, 0aH, 'Version information'
	DB	' as a named tuple.', 00H
gettrace_doc DB	'gettrace()', 0aH, 0aH, 'Return the global debug tracing '
	DB	'function set with sys.settrace.', 0aH, 'See the debugger chap'
	DB	'ter in the library manual.', 00H
	ORG $+4
setprofile_doc DB 'setprofile(function)', 0aH, 0aH, 'Set the profiling fu'
	DB	'nction.  It will be called on each function call', 0aH, 'and '
	DB	'return.  See the profiler chapter in the library manual.', 00H
_PySys_ImplName DQ FLAT:??_C@_07EOMJFIDL@cpython?$AA@
getprofile_doc DB 'getprofile()', 0aH, 0aH, 'Return the profiling functio'
	DB	'n set with sys.setprofile.', 0aH, 'See the profiler chapter i'
	DB	'n the library manual.', 00H
	ORG $+3
flags_desc DQ	FLAT:??_C@_09KICJBJND@sys?4flags?$AA@
	DQ	FLAT:flags__doc__
	DQ	FLAT:flags_fields
	DD	0cH
	ORG $+4
_PySys_ImplCacheTag DQ FLAT:??_C@_0L@DIPKOOGN@cpython?933?$AA@
setcheckinterval_doc DB 'setcheckinterval(n)', 0aH, 0aH, 'Tell the Python'
	DB	' interpreter to check for asynchronous events every', 0aH, 'n'
	DB	' instructions.  This also affects how often thread switches o'
	DB	'ccur.', 00H
	ORG $+4
getcheckinterval_doc DB 'getcheckinterval() -> current check interval; se'
	DB	'e setcheckinterval().', 00H
	ORG $+2
version_info_desc DQ FLAT:??_C@_0BB@DNJDILJD@sys?4version_info?$AA@
	DQ	FLAT:version_info__doc__
	DQ	FLAT:version_info_fields
	DD	05H
	ORG $+4
?empty_argv@?2??makeargvobject@@9@9 DQ FLAT:??_C@_11LOCGONAA@?$AA?$AA@ ; `makeargvobject'::`3'::empty_argv
setswitchinterval_doc DB 'setswitchinterval(n)', 0aH, 0aH, 'Set the ideal'
	DB	' thread switching delay inside the Python interpreter', 0aH, 'T'
	DB	'he actual frequency of switching threads can be lower if the', 0aH
	DB	'interpreter executes long sequences of uninterruptible code', 0aH
	DB	'(this is implementation-specific and workload-dependent).', 0aH
	DB	0aH, 'The parameter must represent the desired switching delay'
	DB	' in seconds', 0aH, 'A typical value is 0.005 (5 milliseconds)'
	DB	'.', 00H
	ORG $+3
getswitchinterval_doc DB 'getswitchinterval() -> current thread switch in'
	DB	'terval; see setswitchinterval().', 00H
hash_info_doc DB 'hash_info', 0aH, 0aH, 'A struct sequence providing para'
	DB	'meters used for computing', 0aH, 'numeric hashes.  The attrib'
	DB	'utes are read only.', 00H
	ORG $+12
hash_info_fields DQ FLAT:??_C@_05IGKADHGO@width?$AA@
	DQ	FLAT:??_C@_0CM@ELCDEPAM@width?5of?5the?5type?5used?5for?5hashi@
	DQ	FLAT:??_C@_07CJECEDDG@modulus?$AA@
	DQ	FLAT:??_C@_0EE@JNKOINOJ@prime?5number?5giving?5the?5modulus?5@
	DQ	FLAT:??_C@_03OJHLLCGB@inf?$AA@
	DQ	FLAT:??_C@_0DB@JFCIJPEO@value?5to?5be?5used?5for?5hash?5of?5a?5p@
	DQ	FLAT:??_C@_03LHCJEHON@nan?$AA@
	DQ	FLAT:??_C@_0CD@FMLNIOBD@value?5to?5be?5used?5for?5hash?5of?5a?5n@
	DQ	FLAT:??_C@_04HBKGOHH@imag?$AA@
	DQ	FLAT:??_C@_0DL@GNKDLGEF@multiplier?5used?5for?5the?5imaginar@
	DQ	0000000000000000H
	DQ	0000000000000000H
setrecursionlimit_doc DB 'setrecursionlimit(n)', 0aH, 0aH, 'Set the maxim'
	DB	'um depth of the Python interpreter stack to n.  This', 0aH, 'l'
	DB	'imit prevents infinite recursion from causing an overflow of '
	DB	'the C', 0aH, 'stack and crashing Python.  The highest possibl'
	DB	'e limit is platform-', 0aH, 'dependent.', 00H
	ORG $+5
getrecursionlimit_doc DB 'getrecursionlimit()', 0aH, 0aH, 'Return the cur'
	DB	'rent value of the recursion limit, the maximum depth', 0aH, 'o'
	DB	'f the Python interpreter stack.  This limit prevents infinite'
	DB	0aH, 'recursion from causing an overflow of the C stack and cr'
	DB	'ashing Python.', 00H
	ORG $+2
getwindowsversion_doc DB 'getwindowsversion()', 0aH, 0aH, 'Return informa'
	DB	'tion about the running version of Windows as a named tuple.', 0aH
	DB	'The members are named: major, minor, build, platform, service'
	DB	'_pack,', 0aH, 'service_pack_major, service_pack_minor, suite_'
	DB	'mask, and product_type. For', 0aH, 'backward compatibility, o'
	DB	'nly the first 5 items are available by indexing.', 0aH, 'All '
	DB	'elements are numbers, except service_pack which is a string. '
	DB	'Platform', 0aH, 'may be 0 for win32s, 1 for Windows 9x/ME, 2 '
	DB	'for Windows NT/2000/XP/Vista/7,', 0aH, '3 for Windows CE. Pro'
	DB	'duct_type may be 1 for a workstation, 2 for a domain', 0aH, 'c'
	DB	'ontroller, 3 for a server.', 00H
	ORG $+13
windows_version_fields DQ FLAT:??_C@_05FEBMJMCL@major?$AA@
	DQ	FLAT:??_C@_0BF@OIMKHFME@Major?5version?5number?$AA@
	DQ	FLAT:??_C@_05OLAOEALN@minor?$AA@
	DQ	FLAT:??_C@_0BF@JMHJKOJE@Minor?5version?5number?$AA@
	DQ	FLAT:??_C@_05DMEBLLNM@build?$AA@
	DQ	FLAT:??_C@_0N@KKPGKAMF@Build?5number?$AA@
	DQ	FLAT:??_C@_08CBHCFJJK@platform?$AA@
	DQ	FLAT:??_C@_0BK@MILMMMCK@Operating?5system?5platform?$AA@
	DQ	FLAT:??_C@_0N@CGHPFCLJ@service_pack?$AA@
	DQ	FLAT:??_C@_0CM@JMPIOEPN@Latest?5Service?5Pack?5installed?5on@
	DQ	FLAT:??_C@_0BD@LPDGAPKH@service_pack_major?$AA@
	DQ	FLAT:??_C@_0CC@POJKNDDH@Service?5Pack?5major?5version?5numbe@
	DQ	FLAT:??_C@_0BD@CENDDB@service_pack_minor?$AA@
	DQ	FLAT:??_C@_0CC@IKCJAIGH@Service?5Pack?5minor?5version?5numbe@
	DQ	FLAT:??_C@_0L@CNNCACDH@suite_mask?$AA@
	DQ	FLAT:??_C@_0CO@GOCNOCCF@Bit?5mask?5identifying?5available?5p@
	DQ	FLAT:??_C@_0N@MOJPCNBF@product_type?$AA@
	DQ	FLAT:??_C@_0BE@OMEOIKCM@System?5product?5type?$AA@
	DQ	0000000000000000H
	ORG $+8
getsizeof_doc DB 'getsizeof(object, default) -> int', 0aH, 0aH, 'Return t'
	DB	'he size of object in bytes.', 00H
	ORG $+9
getrefcount_doc DB 'getrefcount(object) -> integer', 0aH, 0aH, 'Return th'
	DB	'e reference count of object.  The count returned is generally'
	DB	0aH, 'one higher than you might expect, because it includes th'
	DB	'e (temporary)', 0aH, 'reference as an argument to getrefcount'
	DB	'().', 00H
	ORG $+8
getframe_doc DB	'_getframe([depth]) -> frameobject', 0aH, 0aH, 'Return a '
	DB	'frame object from the call stack.  If optional integer depth '
	DB	'is', 0aH, 'given, return the frame object that many calls bel'
	DB	'ow the top of the stack.', 0aH, 'If that is deeper than the c'
	DB	'all stack, ValueError is raised.  The default', 0aH, 'for dep'
	DB	'th is zero, returning the frame at the top of the call stack.'
	DB	0aH, 0aH, 'This function should be used for internal and speci'
	DB	'alized', 0aH, 'purposes only.', 00H
current_frames_doc DB '_current_frames() -> dictionary', 0aH, 0aH, 'Retur'
	DB	'n a dictionary mapping each current thread T''s thread id to '
	DB	'T''s', 0aH, 'current stack frame.', 0aH, 0aH, 'This function '
	DB	'should be used for specialized purposes only.', 00H
	ORG $+8
call_tracing_doc DB 'call_tracing(func, args) -> object', 0aH, 0aH, 'Call'
	DB	' func(*args), while tracing is enabled.  The tracing state is'
	DB	0aH, 'saved, and restored afterwards.  This is intended to be '
	DB	'called from', 0aH, 'a debugger from a checkpoint, to recursiv'
	DB	'ely debug some other code.', 00H
	ORG $+2
callstats_doc DB 'callstats() -> tuple of integers', 0aH, 0aH, 'Return a '
	DB	'tuple of function call statistics, if CALL_PROFILE was define'
	DB	'd', 0aH, 'when Python was built.  Otherwise, return None.', 0aH
	DB	0aH, 'When enabled, this function returns detailed, implementa'
	DB	'tion-specific', 0aH, 'details about the number of function ca'
	DB	'lls executed. The return value is', 0aH, 'a 11-tuple where th'
	DB	'e entries in the tuple are counts of:', 0aH, '0. all function'
	DB	' calls', 0aH, '1. calls to PyFunction_Type objects', 0aH, '2.'
	DB	' PyFunction calls that do not create an argument tuple', 0aH, '3'
	DB	'. PyFunction calls that do not create an argument tuple', 0aH
	DB	'   and bypass PyEval_EvalCodeEx()', 0aH, '4. PyMethod calls', 0aH
	DB	'5. PyMethod calls on bound methods', 0aH, '6. PyType calls', 0aH
	DB	'7. PyCFunction calls', 0aH, '8. generator calls', 0aH, '9. Al'
	DB	'l other calls', 0aH, '10. Number of stack pops performed by c'
	DB	'all_function()', 00H
	ORG $+9
debugmallocstats_doc DB '_debugmallocstats()', 0aH, 0aH, 'Print summary i'
	DB	'nfo to stderr about the state of', 0aH, 'pymalloc''s structur'
	DB	'es.', 0aH, 0aH, 'In Py_DEBUG mode, also perform some expensiv'
	DB	'e internal consistency', 0aH, 'checks.', 0aH, 00H
	ORG $+7
sys_clear_type_cache__doc__ DB '_clear_type_cache() -> None', 0aH, 'Clear'
	DB	' the internal type lookup cache.', 00H
	ORG $+14
sys_methods DQ	FLAT:??_C@_09PDHLGNMH@callstats?$AA@
	DQ	FLAT:PyEval_GetCallStats
	DD	04H
	ORG $+4
	DQ	FLAT:callstats_doc
	DQ	FLAT:??_C@_0BC@BEPIHGAL@_clear_type_cache?$AA@
	DQ	FLAT:sys_clear_type_cache
	DD	04H
	ORG $+4
	DQ	FLAT:sys_clear_type_cache__doc__
	DQ	FLAT:??_C@_0BA@DMNJMFCA@_current_frames?$AA@
	DQ	FLAT:sys_current_frames
	DD	04H
	ORG $+4
	DQ	FLAT:current_frames_doc
	DQ	FLAT:??_C@_0M@OABHHABA@displayhook?$AA@
	DQ	FLAT:sys_displayhook
	DD	08H
	ORG $+4
	DQ	FLAT:displayhook_doc
	DQ	FLAT:??_C@_08NGNFBMDD@exc_info?$AA@
	DQ	FLAT:sys_exc_info
	DD	04H
	ORG $+4
	DQ	FLAT:exc_info_doc
	DQ	FLAT:??_C@_0L@NONONIOP@excepthook?$AA@
	DQ	FLAT:sys_excepthook
	DD	01H
	ORG $+4
	DQ	FLAT:excepthook_doc
	DQ	FLAT:??_C@_04MKNBDEPB@exit?$AA@
	DQ	FLAT:sys_exit
	DD	01H
	ORG $+4
	DQ	FLAT:exit_doc
	DQ	FLAT:??_C@_0BD@OAPOKCOC@getdefaultencoding?$AA@
	DQ	FLAT:sys_getdefaultencoding
	DD	04H
	ORG $+4
	DQ	FLAT:getdefaultencoding_doc
	DQ	FLAT:??_C@_0BG@PHHGLMBK@getfilesystemencoding?$AA@
	DQ	FLAT:sys_getfilesystemencoding
	DD	04H
	ORG $+4
	DQ	FLAT:getfilesystemencoding_doc
	DQ	FLAT:??_C@_0M@GIAAAIMC@getrefcount?$AA@
	DQ	FLAT:sys_getrefcount
	DD	08H
	ORG $+4
	DQ	FLAT:getrefcount_doc
	DQ	FLAT:??_C@_0BC@MNGKCPA@getrecursionlimit?$AA@
	DQ	FLAT:sys_getrecursionlimit
	DD	04H
	ORG $+4
	DQ	FLAT:getrecursionlimit_doc
	DQ	FLAT:??_C@_09CMGNPIEG@getsizeof?$AA@
	DQ	FLAT:sys_getsizeof
	DD	03H
	ORG $+4
	DQ	FLAT:getsizeof_doc
	DQ	FLAT:??_C@_09GKOEPENJ@_getframe?$AA@
	DQ	FLAT:sys_getframe
	DD	01H
	ORG $+4
	DQ	FLAT:getframe_doc
	DQ	FLAT:??_C@_0BC@NJOPCOOO@getwindowsversion?$AA@
	DQ	FLAT:sys_getwindowsversion
	DD	04H
	ORG $+4
	DQ	FLAT:getwindowsversion_doc
	DQ	FLAT:??_C@_06OCOCPMLE@intern?$AA@
	DQ	FLAT:sys_intern
	DD	01H
	ORG $+4
	DQ	FLAT:intern_doc
	DQ	FLAT:??_C@_0BB@CCOOFHI@setcheckinterval?$AA@
	DQ	FLAT:sys_setcheckinterval
	DD	01H
	ORG $+4
	DQ	FLAT:setcheckinterval_doc
	DQ	FLAT:??_C@_0BB@GGHHFLMK@getcheckinterval?$AA@
	DQ	FLAT:sys_getcheckinterval
	DD	04H
	ORG $+4
	DQ	FLAT:getcheckinterval_doc
	DQ	FLAT:??_C@_0BC@DCBNGMKA@setswitchinterval?$AA@
	DQ	FLAT:sys_setswitchinterval
	DD	01H
	ORG $+4
	DQ	FLAT:setswitchinterval_doc
	DQ	FLAT:??_C@_0BC@BHBGOHLO@getswitchinterval?$AA@
	DQ	FLAT:sys_getswitchinterval
	DD	04H
	ORG $+4
	DQ	FLAT:getswitchinterval_doc
	DQ	FLAT:??_C@_0L@EOCHFNND@setprofile?$AA@
	DQ	FLAT:sys_setprofile
	DD	08H
	ORG $+4
	DQ	FLAT:setprofile_doc
	DQ	FLAT:??_C@_0L@FAAIOKJK@getprofile?$AA@
	DQ	FLAT:sys_getprofile
	DD	04H
	ORG $+4
	DQ	FLAT:getprofile_doc
	DQ	FLAT:??_C@_0BC@CJNNCJOO@setrecursionlimit?$AA@
	DQ	FLAT:sys_setrecursionlimit
	DD	01H
	ORG $+4
	DQ	FLAT:setrecursionlimit_doc
	DQ	FLAT:??_C@_08JCNEMICD@settrace?$AA@
	DQ	FLAT:sys_settrace
	DD	08H
	ORG $+4
	DQ	FLAT:settrace_doc
	DQ	FLAT:??_C@_08GDPINLFO@gettrace?$AA@
	DQ	FLAT:sys_gettrace
	DD	04H
	ORG $+4
	DQ	FLAT:gettrace_doc
	DQ	FLAT:??_C@_0N@KMLHGNOF@call_tracing?$AA@
	DQ	FLAT:sys_call_tracing
	DD	01H
	ORG $+4
	DQ	FLAT:call_tracing_doc
	DQ	FLAT:??_C@_0BC@POJOHICO@_debugmallocstats?$AA@
	DQ	FLAT:sys_debugmallocstats
	DD	01H
	ORG $+4
	DQ	FLAT:debugmallocstats_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
sys_doc	DB	'This module provides access to some objects used or main'
	DB	'tained by the', 0aH, 'interpreter and to functions that inter'
	DB	'act strongly with the interpreter.', 0aH, 0aH, 'Dynamic objec'
	DB	'ts:', 0aH, 0aH, 'argv -- command line arguments; argv[0] is t'
	DB	'he script pathname if known', 0aH, 'path -- module search pat'
	DB	'h; path[0] is the script directory, else ''''', 0aH, 'modules'
	DB	' -- dictionary of loaded modules', 0aH, 0aH, 'displayhook -- '
	DB	'called to show results in an interactive session', 0aH, 'exce'
	DB	'pthook -- called to handle any uncaught exception other than '
	DB	'SystemExit', 0aH, '  To customize printing in an interactive '
	DB	'session or to install a custom', 0aH, '  top-level exception '
	DB	'handler, assign other functions to replace these.', 0aH, 0aH, 's'
	DB	'tdin -- standard input file object; used by input()', 0aH, 's'
	DB	'tdout -- standard output file object; used by print()', 0aH, 's'
	DB	'tderr -- standard error object; used for error messages', 0aH
	DB	'  By assigning other file objects (or objects that behave lik'
	DB	'e files)', 0aH, '  to these, it is possible to redirect all o'
	DB	'f the interpreter''s I/O.', 0aH, 0aH, 'last_type -- type of l'
	DB	'ast uncaught exception', 0aH, 'last_value -- value of last un'
	DB	'caught exception', 0aH, 'last_traceback -- traceback of last '
	DB	'uncaught exception', 0aH, '  These three are only available i'
	DB	'n an interactive session after a', 0aH, '  traceback has been'
	DB	' printed.', 0aH, 0aH, 'Static objects:', 0aH, 0aH, 'builtin_m'
	DB	'odule_names -- tuple of module names built into this interpre'
	DB	'ter', 0aH, 'copyright -- copyright notice pertaining to this '
	DB	'interpreter', 0aH, 'exec_prefix -- prefix used to find the ma'
	DB	'chine-specific Python library', 0aH, 'executable -- absolute '
	DB	'path of the executable binary of the Python interpreter', 0aH
	DB	'float_info -- a struct sequence with information about the fl'
	DB	'oat implementation.', 0aH, 'float_repr_style -- string indica'
	DB	'ting the style of repr() output for floats', 0aH, 'hexversion'
	DB	' -- version information encoded as a single integer', 0aH, 'i'
	DB	'mplementation -- Python implementation information.', 0aH, 'i'
	DB	'nt_info -- a struct sequence with information about the int i'
	DB	'mplementation.', 0aH, 'maxsize -- the largest supported lengt'
	DB	'h of containers.', 0aH, 'maxunicode -- the value of the large'
	DB	'st Unicode codepoint', 0aH, 'platform -- platform identifier', 0aH
	DB	'prefix -- prefix used to find the Python library', 0aH, 'thre'
	DB	'ad_info -- a struct sequence with information about the threa'
	DB	'd implementation.', 0aH, 'version -- the version of this inte'
	DB	'rpreter as a string', 0aH, 'version_info -- version informati'
	DB	'on as a named tuple', 0aH, 'dllhandle -- [Windows only] integ'
	DB	'er handle of the Python DLL', 0aH, 'winver -- [Windows only] '
	DB	'version number of the Python DLL', 0aH, '__stdin__ -- the ori'
	DB	'ginal stdin; don''t touch!', 0aH, '__stdout__ -- the original'
	DB	' stdout; don''t touch!', 0aH, '__stderr__ -- the original std'
	DB	'err; don''t touch!', 0aH, '__displayhook__ -- the original di'
	DB	'splayhook; don''t touch!', 0aH, '__excepthook__ -- the origin'
	DB	'al excepthook; don''t touch!', 0aH, 0aH, 'Functions:', 0aH, 0aH
	DB	'displayhook() -- print an object to the screen, and save it i'
	DB	'n builtins._', 0aH, 'excepthook() -- print an exception and i'
	DB	'ts traceback to sys.stderr', 0aH, 'exc_info() -- return threa'
	DB	'd-safe information about the current exception', 0aH, 'exit()'
	DB	' -- exit the interpreter by raising SystemExit', 0aH, 'getdlo'
	DB	'penflags() -- returns flags to be used for dlopen() calls', 0aH
	DB	'getprofile() -- get the global profiling function', 0aH, 'get'
	DB	'refcount() -- return the reference count for an object (plus '
	DB	'one :-)', 0aH, 'getrecursionlimit() -- return the max recursi'
	DB	'on depth for the interpreter', 0aH, 'getsizeof() -- return th'
	DB	'e size of an object in bytes', 0aH, 'gettrace() -- get the gl'
	DB	'obal debug tracing function', 0aH, 'setcheckinterval() -- con'
	DB	'trol how often the interpreter checks for events', 0aH, 'setd'
	DB	'lopenflags() -- set the flags to be used for dlopen() calls', 0aH
	DB	'setprofile() -- set the global profiling function', 0aH, 'set'
	DB	'recursionlimit() -- set the max recursion depth for the inter'
	DB	'preter', 0aH, 'settrace() -- set the global debug tracing fun'
	DB	'ction', 0aH, 00H
	ORG $+4
flags__doc__ DB	'sys.flags', 0aH, 0aH, 'Flags provided through command li'
	DB	'ne arguments or environment vars.', 00H
	ORG $+2
flags_fields DQ	FLAT:??_C@_05GFCDIDHO@debug?$AA@
	DQ	FLAT:??_C@_02DBLKFNPN@?9d?$AA@
	DQ	FLAT:??_C@_07PHKOPNKE@inspect?$AA@
	DQ	FLAT:??_C@_02IEBECDLA@?9i?$AA@
	DQ	FLAT:??_C@_0M@JFHLOKPA@interactive?$AA@
	DQ	FLAT:??_C@_02IEBECDLA@?9i?$AA@
	DQ	FLAT:??_C@_08GHMAOHAP@optimize?$AA@
	DQ	FLAT:??_C@_09PKCBOAHP@?9O?5or?5?9OO?$AA@
	DQ	FLAT:??_C@_0BE@CMMEJPLN@dont_write_bytecode?$AA@
	DQ	FLAT:??_C@_02PCGENONJ@?9B?$AA@
	DQ	FLAT:??_C@_0N@MBFKKMMD@no_user_site?$AA@
	DQ	FLAT:??_C@_02DEDJNJGL@?9s?$AA@
	DQ	FLAT:??_C@_07GMLEGJMJ@no_site?$AA@
	DQ	FLAT:??_C@_02KBLNPNMJ@?9S?$AA@
	DQ	FLAT:??_C@_0BD@OHBIJAIF@ignore_environment?$AA@
	DQ	FLAT:??_C@_02LNCFEIBO@?9E?$AA@
	DQ	FLAT:??_C@_07KBAMPNJK@verbose?$AA@
	DQ	FLAT:??_C@_02EJEOCNCO@?9v?$AA@
	DQ	FLAT:??_C@_0O@NKLJCOA@bytes_warning?$AA@
	DQ	FLAT:??_C@_02GHOAPKHL@?9b?$AA@
	DQ	FLAT:??_C@_05PMBAOCDH@quiet?$AA@
	DQ	FLAT:??_C@_02GAPLLOJ@?9q?$AA@
	DQ	FLAT:??_C@_0BD@CKHJKECB@hash_randomization?$AA@
	DQ	FLAT:??_C@_02LIKGMMII@?9R?$AA@
	DQ	0000000000000000H
	ORG $+8
version_info_fields DQ FLAT:??_C@_05FEBMJMCL@major?$AA@
	DQ	FLAT:??_C@_0BF@MKHGOMCP@Major?5release?5number?$AA@
	DQ	FLAT:??_C@_05OLAOEALN@minor?$AA@
	DQ	FLAT:??_C@_0BF@LOMFDHHP@Minor?5release?5number?$AA@
	DQ	FLAT:??_C@_05PCPGMEFP@micro?$AA@
	DQ	FLAT:??_C@_0BF@JHPIGCCC@Patch?5release?5number?$AA@
	DQ	FLAT:??_C@_0N@KAHPCFIL@releaselevel?$AA@
	DQ	FLAT:??_C@_0CL@HEOEKGNF@?8alpha?8?0?5?8beta?8?0?5?8candidate?8?0?5or@
	DQ	FLAT:??_C@_06KCELPKEE@serial?$AA@
	DQ	FLAT:??_C@_0BG@GIMBGDAI@Serial?5release?5number?$AA@
	DQ	0000000000000000H
	ORG $+8
sysmodule DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_03PIADFGHL@sys?$AA@
	DQ	FLAT:sys_doc
	DQ	ffffffffffffffffH
	DQ	FLAT:sys_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
;	COMDAT ??_C@_01IDAFKMJL@_?$AA@
CONST	SEGMENT
??_C@_01IDAFKMJL@_?$AA@ DB '_', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NGFEDHGN@write?$AA@
CONST	SEGMENT
??_C@_05NGFEDHGN@write?$AA@ DB 'write', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HOHPNJLC@buffer?$AA@
CONST	SEGMENT
??_C@_06HOHPNJLC@buffer?$AA@ DB 'buffer', 00H		; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId__@?1??sys_displayhook@@9@9 DQ 0000000000000000H	; `sys_displayhook'::`2'::PyId__
	DQ	FLAT:??_C@_01IDAFKMJL@_?$AA@
	DQ	0000000000000000H
?PyId_write@?1??sys_pyfile_write_unicode@@9@9 DQ 0000000000000000H ; `sys_pyfile_write_unicode'::`2'::PyId_write
	DQ	FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	0000000000000000H
?PyId___sizeof__@?1??sys_getsizeof@@9@9 DQ 0000000000000000H ; `sys_getsizeof'::`2'::PyId___sizeof__
	DQ	FLAT:??_C@_0L@HOGGIPGN@__sizeof__?$AA@
	DQ	0000000000000000H
?PyId_write@?2??sys_displayhook_unencodable@@9@9 DQ 0000000000000000H ; `sys_displayhook_unencodable'::`3'::PyId_write
	DQ	FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	0000000000000000H
?PyId_buffer@?1??sys_displayhook_unencodable@@9@9 DQ 0000000000000000H ; `sys_displayhook_unencodable'::`2'::PyId_buffer
	DQ	FLAT:??_C@_06HOHPNJLC@buffer?$AA@
	DQ	0000000000000000H
?PyId_encoding@?1??sys_displayhook_unencodable@@9@9 DQ 0000000000000000H ; `sys_displayhook_unencodable'::`2'::PyId_encoding
	DQ	FLAT:??_C@_08MLPGAEIK@encoding?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_08MLPGAEIK@encoding?$AA@
CONST	SEGMENT
??_C@_08MLPGAEIK@encoding?$AA@ DB 'encoding', 00H	; `string'
CONST	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	PySys_GetObject
EXTRN	PyDict_GetItemString:PROC
EXTRN	_PyThreadState_Current:QWORD
EXTRN	_PyParallel_GetThreadState:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\sysmodule.c
pdata	SEGMENT
$pdata$PySys_GetObject DD imagerel $LN6
	DD	imagerel $LN6+66
	DD	imagerel $unwind$PySys_GetObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySys_GetObject DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PySys_GetObject
_TEXT	SEGMENT
name$ = 48
PySys_GetObject PROC					; COMDAT

; 46   : {

$LN6:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 47   :     PyThreadState *tstate = PyThreadState_GET();

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 07		 je	 SHORT $LN4@PySys_GetO
  00012	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00017	eb 07		 jmp	 SHORT $LN5@PySys_GetO
$LN4@PySys_GetO:
  00019	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
$LN5@PySys_GetO:

; 48   :     PyObject *sd = tstate->interp->sysdict;

  00020	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00024	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]

; 49   :     if (sd == NULL)

  00028	48 85 c9	 test	 rcx, rcx
  0002b	75 08		 jne	 SHORT $LN1@PySys_GetO

; 50   :         return NULL;

  0002d	33 c0		 xor	 eax, eax

; 52   : }

  0002f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00033	5b		 pop	 rbx
  00034	c3		 ret	 0
$LN1@PySys_GetO:

; 51   :     return PyDict_GetItemString(sd, name);

  00035	48 8b d3	 mov	 rdx, rbx

; 52   : }

  00038	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003c	5b		 pop	 rbx
  0003d	e9 00 00 00 00	 jmp	 PyDict_GetItemString
PySys_GetObject ENDP
_TEXT	ENDS
PUBLIC	PySys_SetObject
EXTRN	PyDict_SetItemString:PROC
EXTRN	PyDict_DelItemString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySys_SetObject DD imagerel $LN9
	DD	imagerel $LN9+138
	DD	imagerel $unwind$PySys_SetObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySys_SetObject DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PySys_SetObject
_TEXT	SEGMENT
name$ = 48
v$ = 56
PySys_SetObject PROC					; COMDAT

; 56   : {

$LN9:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b f2	 mov	 rsi, rdx
  00012	48 8b f9	 mov	 rdi, rcx

; 57   :     PyThreadState *tstate = PyThreadState_GET();

  00015	e8 00 00 00 00	 call	 _Py_PXCTX
  0001a	85 c0		 test	 eax, eax
  0001c	74 07		 je	 SHORT $LN7@PySys_SetO
  0001e	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00023	eb 07		 jmp	 SHORT $LN8@PySys_SetO
$LN7@PySys_SetO:
  00025	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
$LN8@PySys_SetO:

; 58   :     PyObject *sd = tstate->interp->sysdict;

  0002c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]

; 59   :     if (v == NULL) {
; 60   :         if (PyDict_GetItemString(sd, name) == NULL)

  00030	48 8b d7	 mov	 rdx, rdi
  00033	48 8b 58 20	 mov	 rbx, QWORD PTR [rax+32]
  00037	48 8b cb	 mov	 rcx, rbx
  0003a	48 85 f6	 test	 rsi, rsi
  0003d	75 34		 jne	 SHORT $LN4@PySys_SetO
  0003f	e8 00 00 00 00	 call	 PyDict_GetItemString
  00044	48 85 c0	 test	 rax, rax
  00047	75 10		 jne	 SHORT $LN3@PySys_SetO

; 67   : }

  00049	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004e	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5f		 pop	 rdi
  00058	c3		 ret	 0
$LN3@PySys_SetO:

; 61   :             return 0;
; 62   :         else
; 63   :             return PyDict_DelItemString(sd, name);

  00059	48 8b d7	 mov	 rdx, rdi
  0005c	48 8b cb	 mov	 rcx, rbx

; 67   : }

  0005f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00064	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00069	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006d	5f		 pop	 rdi
  0006e	e9 00 00 00 00	 jmp	 PyDict_DelItemString
$LN4@PySys_SetO:

; 64   :     }
; 65   :     else
; 66   :         return PyDict_SetItemString(sd, name, v);

  00073	4c 8b c6	 mov	 r8, rsi

; 67   : }

  00076	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0007b	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00080	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00084	5f		 pop	 rdi
  00085	e9 00 00 00 00	 jmp	 PyDict_SetItemString
PySys_SetObject ENDP
_TEXT	ENDS
PUBLIC	??_C@_06OLFOGHEN@strict?$AA@			; `string'
PUBLIC	??_C@_03IELNPCCE@?$CIO?$CJ?$AA@			; `string'
PUBLIC	??_C@_0BB@GGCFDDAA@backslashreplace?$AA@	; `string'
EXTRN	PyFile_WriteObject:PROC
EXTRN	PyUnicode_FromEncodedObject:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	_PyObject_CallMethodId:PROC
EXTRN	PyUnicode_AsEncodedString:PROC
EXTRN	PyObject_Repr:PROC
EXTRN	PyUnicode_AsUTF8:PROC
EXTRN	_PyObject_GetAttrId:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$sys_displayhook_unencodable DD imagerel sys_displayhook_unencodable
	DD	imagerel sys_displayhook_unencodable+23
	DD	imagerel $unwind$sys_displayhook_unencodable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$sys_displayhook_unencodable DD imagerel sys_displayhook_unencodable+23
	DD	imagerel sys_displayhook_unencodable+343
	DD	imagerel $chain$4$sys_displayhook_unencodable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$sys_displayhook_unencodable DD imagerel sys_displayhook_unencodable+343
	DD	imagerel sys_displayhook_unencodable+467
	DD	imagerel $chain$5$sys_displayhook_unencodable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$sys_displayhook_unencodable DD 021H
	DD	imagerel sys_displayhook_unencodable
	DD	imagerel sys_displayhook_unencodable+23
	DD	imagerel $unwind$sys_displayhook_unencodable
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$sys_displayhook_unencodable DD 0a2821H
	DD	06e428H
	DD	0dd417H
	DD	0cc412H
	DD	0b640aH
	DD	0a5405H
	DD	imagerel sys_displayhook_unencodable
	DD	imagerel sys_displayhook_unencodable+23
	DD	imagerel $unwind$sys_displayhook_unencodable
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_displayhook_unencodable DD 030701H
	DD	070036207H
	DD	03002H
xdata	ENDS
;	COMDAT ??_C@_06OLFOGHEN@strict?$AA@
CONST	SEGMENT
??_C@_06OLFOGHEN@strict?$AA@ DB 'strict', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
CONST	SEGMENT
??_C@_03IELNPCCE@?$CIO?$CJ?$AA@ DB '(O)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GGCFDDAA@backslashreplace?$AA@
CONST	SEGMENT
??_C@_0BB@GGCFDDAA@backslashreplace?$AA@ DB 'backslashreplace', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\sysmodule.c
CONST	ENDS
;	COMDAT sys_displayhook_unencodable
_TEXT	SEGMENT
outf$ = 80
o$ = 88
sys_displayhook_unencodable PROC			; COMDAT

; 77   : {

  00000	40 53		 push	 rbx
  00002	57		 push	 rdi
  00003	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 78   :     PyObject *stdout_encoding = NULL;
; 79   :     PyObject *encoded, *escaped_str, *repr_str, *buffer, *result;
; 80   :     char *stdout_encoding_str;
; 81   :     int ret;
; 82   :     _Py_IDENTIFIER(encoding);
; 83   :     _Py_IDENTIFIER(buffer);
; 84   : 
; 85   :     stdout_encoding = _PyObject_GetAttrId(outf, &PyId_encoding);

  00007	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  0000e	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00017	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp
  0001c	48 89 74 24 58	 mov	 QWORD PTR [rsp+88], rsi
  00021	48 8b da	 mov	 rbx, rdx
  00024	4c 89 64 24 60	 mov	 QWORD PTR [rsp+96], r12
  00029	4c 89 6c 24 68	 mov	 QWORD PTR [rsp+104], r13
  0002e	4e 8b 2c c0	 mov	 r13, QWORD PTR [rax+r8*8]
  00032	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_encoding@?1??sys_displayhook_unencodable@@9@9
  00037	49 03 d5	 add	 rdx, r13
  0003a	4c 89 74 24 30	 mov	 QWORD PTR [rsp+48], r14
  0003f	4c 8b f1	 mov	 r14, rcx
  00042	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00047	48 8b f8	 mov	 rdi, rax

; 86   :     if (stdout_encoding == NULL)

  0004a	48 85 c0	 test	 rax, rax
  0004d	0f 84 e3 00 00
	00		 je	 $error$63648

; 87   :         goto error;
; 88   :     stdout_encoding_str = _PyUnicode_AsString(stdout_encoding);

  00053	48 8b c8	 mov	 rcx, rax
  00056	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  0005b	48 8b f0	 mov	 rsi, rax

; 89   :     if (stdout_encoding_str == NULL)

  0005e	48 85 c0	 test	 rax, rax
  00061	0f 84 cf 00 00
	00		 je	 $error$63648

; 90   :         goto error;
; 91   : 
; 92   :     repr_str = PyObject_Repr(o);

  00067	48 8b cb	 mov	 rcx, rbx
  0006a	e8 00 00 00 00	 call	 PyObject_Repr
  0006f	48 8b d8	 mov	 rbx, rax

; 93   :     if (repr_str == NULL)

  00072	48 85 c0	 test	 rax, rax
  00075	0f 84 bb 00 00
	00		 je	 $error$63648

; 94   :         goto error;
; 95   :     encoded = PyUnicode_AsEncodedString(repr_str,
; 96   :                                         stdout_encoding_str,
; 97   :                                         "backslashreplace");

  0007b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BB@GGCFDDAA@backslashreplace?$AA@
  00082	48 8b d6	 mov	 rdx, rsi
  00085	48 8b c8	 mov	 rcx, rax
  00088	e8 00 00 00 00	 call	 PyUnicode_AsEncodedString

; 98   :     Py_DECREF(repr_str);

  0008d	48 8b cb	 mov	 rcx, rbx
  00090	4c 8b e0	 mov	 r12, rax
  00093	e8 00 00 00 00	 call	 _Py_DecRef

; 99   :     if (encoded == NULL)

  00098	4d 85 e4	 test	 r12, r12
  0009b	0f 84 95 00 00
	00		 je	 $error$63648

; 100  :         goto error;
; 101  : 
; 102  :     buffer = _PyObject_GetAttrId(outf, &PyId_buffer);

  000a1	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_buffer@?1??sys_displayhook_unencodable@@9@9
  000a6	49 8b ce	 mov	 rcx, r14
  000a9	49 03 d5	 add	 rdx, r13
  000ac	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  000b1	48 8b e8	 mov	 rbp, rax

; 103  :     if (buffer) {

  000b4	48 85 c0	 test	 rax, rax
  000b7	74 3e		 je	 SHORT $LN8@sys_displa

; 104  :         _Py_IDENTIFIER(write);
; 105  :         result = _PyObject_CallMethodId(buffer, &PyId_write, "(O)", encoded);

  000b9	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_write@?2??sys_displayhook_unencodable@@9@9
  000be	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  000c5	4d 8b cc	 mov	 r9, r12
  000c8	49 03 d5	 add	 rdx, r13
  000cb	48 8b c8	 mov	 rcx, rax
  000ce	e8 00 00 00 00	 call	 _PyObject_CallMethodId

; 106  :         Py_DECREF(buffer);

  000d3	48 8b cd	 mov	 rcx, rbp
  000d6	48 8b d8	 mov	 rbx, rax
  000d9	e8 00 00 00 00	 call	 _Py_DecRef

; 107  :         Py_DECREF(encoded);

  000de	49 8b cc	 mov	 rcx, r12
  000e1	e8 00 00 00 00	 call	 _Py_DecRef

; 108  :         if (result == NULL)

  000e6	48 85 db	 test	 rbx, rbx
  000e9	74 4b		 je	 SHORT $error$63648
$LN5@sys_displa:

; 120  :             goto error;
; 121  :         }
; 122  :         Py_DECREF(escaped_str);

  000eb	48 8b cb	 mov	 rcx, rbx
  000ee	e8 00 00 00 00	 call	 _Py_DecRef

; 123  :     }
; 124  :     ret = 0;

  000f3	33 db		 xor	 ebx, ebx
  000f5	eb 42		 jmp	 SHORT $finally$63673
$LN8@sys_displa:

; 109  :             goto error;
; 110  :         Py_DECREF(result);
; 111  :     }
; 112  :     else {
; 113  :         PyErr_Clear();

  000f7	e8 00 00 00 00	 call	 PyErr_Clear

; 114  :         escaped_str = PyUnicode_FromEncodedObject(encoded,
; 115  :                                                   stdout_encoding_str,
; 116  :                                                   "strict");

  000fc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06OLFOGHEN@strict?$AA@
  00103	48 8b d6	 mov	 rdx, rsi
  00106	49 8b cc	 mov	 rcx, r12
  00109	e8 00 00 00 00	 call	 PyUnicode_FromEncodedObject

; 117  :         Py_DECREF(encoded);

  0010e	49 8b cc	 mov	 rcx, r12
  00111	48 8b d8	 mov	 rbx, rax
  00114	e8 00 00 00 00	 call	 _Py_DecRef

; 118  :         if (PyFile_WriteObject(escaped_str, outf, Py_PRINT_RAW) != 0) {

  00119	41 b8 01 00 00
	00		 mov	 r8d, 1
  0011f	49 8b d6	 mov	 rdx, r14
  00122	48 8b cb	 mov	 rcx, rbx
  00125	e8 00 00 00 00	 call	 PyFile_WriteObject
  0012a	85 c0		 test	 eax, eax
  0012c	74 bd		 je	 SHORT $LN5@sys_displa

; 119  :             Py_DECREF(escaped_str);

  0012e	48 8b cb	 mov	 rcx, rbx
  00131	e8 00 00 00 00	 call	 _Py_DecRef
$error$63648:

; 125  :     goto finally;
; 126  : 
; 127  : error:
; 128  :     ret = -1;

  00136	83 cb ff	 or	 ebx, -1
$finally$63673:
  00139	4c 8b 74 24 30	 mov	 r14, QWORD PTR [rsp+48]
  0013e	4c 8b 6c 24 68	 mov	 r13, QWORD PTR [rsp+104]
  00143	4c 8b 64 24 60	 mov	 r12, QWORD PTR [rsp+96]
  00148	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  0014d	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]

; 129  : finally:
; 130  :     Py_XDECREF(stdout_encoding);

  00152	48 85 ff	 test	 rdi, rdi
  00155	74 73		 je	 SHORT $LN28@sys_displa
  00157	e8 00 00 00 00	 call	 _Py_PXCTX
  0015c	85 c0		 test	 eax, eax
  0015e	75 6a		 jne	 SHORT $LN28@sys_displa
  00160	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00164	a8 20		 test	 al, 32			; 00000020H
  00166	75 5a		 jne	 SHORT $LN19@sys_displa
  00168	84 c0		 test	 al, al
  0016a	78 56		 js	 SHORT $LN19@sys_displa
  0016c	a8 02		 test	 al, 2
  0016e	75 5a		 jne	 SHORT $LN28@sys_displa
  00170	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00174	75 54		 jne	 SHORT $LN28@sys_displa
  00176	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0017d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00184	4c 8b cf	 mov	 r9, rdi
  00187	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0018d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00195	e8 00 00 00 00	 call	 _PyParallel_Guard
  0019a	48 8b cf	 mov	 rcx, rdi
  0019d	85 c0		 test	 eax, eax
  0019f	74 0e		 je	 SHORT $LN24@sys_displa
  001a1	e8 00 00 00 00	 call	 _Px_Dealloc

; 131  :     return ret;

  001a6	8b c3		 mov	 eax, ebx

; 132  : }

  001a8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001ac	5f		 pop	 rdi
  001ad	5b		 pop	 rbx
  001ae	c3		 ret	 0

; 129  : finally:
; 130  :     Py_XDECREF(stdout_encoding);

$LN24@sys_displa:
  001af	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  001b3	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 131  :     return ret;

  001b9	8b c3		 mov	 eax, ebx

; 132  : }

  001bb	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001bf	5f		 pop	 rdi
  001c0	5b		 pop	 rbx
  001c1	c3		 ret	 0

; 129  : finally:
; 130  :     Py_XDECREF(stdout_encoding);

$LN19@sys_displa:
  001c2	48 8b cf	 mov	 rcx, rdi
  001c5	e8 00 00 00 00	 call	 Px_DecRef
$LN28@sys_displa:

; 131  :     return ret;

  001ca	8b c3		 mov	 eax, ebx

; 132  : }

  001cc	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001d0	5f		 pop	 rdi
  001d1	5b		 pop	 rbx
  001d2	c3		 ret	 0
sys_displayhook_unencodable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@HMAAIHML@lost?5sys?4stdout?$AA@	; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_06DJDOIFHB@stdout?$AA@			; `string'
PUBLIC	??_C@_0BF@DKDFFBBE@lost?5builtins?5module?$AA@	; `string'
PUBLIC	??_C@_08OCOMCJAJ@builtins?$AA@			; `string'
EXTRN	PyFile_WriteString:PROC
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_UnicodeEncodeError:QWORD
EXTRN	_PyObject_SetAttrId:PROC
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_RuntimeError:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$sys_displayhook DD imagerel sys_displayhook
	DD	imagerel sys_displayhook+96
	DD	imagerel $unwind$sys_displayhook
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$sys_displayhook DD imagerel sys_displayhook+96
	DD	imagerel sys_displayhook+197
	DD	imagerel $chain$0$sys_displayhook
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$sys_displayhook DD imagerel sys_displayhook+197
	DD	imagerel sys_displayhook+261
	DD	imagerel $chain$3$sys_displayhook
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$sys_displayhook DD imagerel sys_displayhook+261
	DD	imagerel sys_displayhook+414
	DD	imagerel $chain$4$sys_displayhook
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$sys_displayhook DD imagerel sys_displayhook+414
	DD	imagerel sys_displayhook+435
	DD	imagerel $chain$5$sys_displayhook
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$sys_displayhook DD 021H
	DD	imagerel sys_displayhook+197
	DD	imagerel sys_displayhook+261
	DD	imagerel $chain$3$sys_displayhook
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$sys_displayhook DD 020521H
	DD	083405H
	DD	imagerel sys_displayhook+197
	DD	imagerel sys_displayhook+261
	DD	imagerel $chain$3$sys_displayhook
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$sys_displayhook DD 041421H
	DD	095414H
	DD	0ac400H
	DD	imagerel sys_displayhook
	DD	imagerel sys_displayhook+96
	DD	imagerel $unwind$sys_displayhook
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$sys_displayhook DD 020521H
	DD	0ac405H
	DD	imagerel sys_displayhook
	DD	imagerel sys_displayhook+96
	DD	imagerel $unwind$sys_displayhook
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_displayhook DD 040a01H
	DD	0b640aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0BA@HMAAIHML@lost?5sys?4stdout?$AA@
CONST	SEGMENT
??_C@_0BA@HMAAIHML@lost?5sys?4stdout?$AA@ DB 'lost sys.stdout', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06DJDOIFHB@stdout?$AA@
CONST	SEGMENT
??_C@_06DJDOIFHB@stdout?$AA@ DB 'stdout', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DKDFFBBE@lost?5builtins?5module?$AA@
CONST	SEGMENT
??_C@_0BF@DKDFFBBE@lost?5builtins?5module?$AA@ DB 'lost builtins module', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08OCOMCJAJ@builtins?$AA@
CONST	SEGMENT
??_C@_08OCOMCJAJ@builtins?$AA@ DB 'builtins', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\sysmodule.c
CONST	ENDS
;	COMDAT sys_displayhook
_TEXT	SEGMENT
self$ = 64
o$ = 72
sys_displayhook PROC					; COMDAT

; 136  : {

  00000	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fa	 mov	 rdi, rdx

; 137  :     PyObject *outf;
; 138  :     PyInterpreterState *interp = PyThreadState_GET()->interp;

  0000d	e8 00 00 00 00	 call	 _Py_PXCTX
  00012	85 c0		 test	 eax, eax
  00014	74 07		 je	 SHORT $LN14@sys_displa@2
  00016	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  0001b	eb 07		 jmp	 SHORT $LN15@sys_displa@2
$LN14@sys_displa@2:
  0001d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
$LN15@sys_displa@2:

; 139  :     PyObject *modules = interp->modules;

  00024	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]

; 140  :     PyObject *builtins = PyDict_GetItemString(modules, "builtins");

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
  0002f	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00033	e8 00 00 00 00	 call	 PyDict_GetItemString
  00038	48 8b f0	 mov	 rsi, rax

; 141  :     int err;
; 142  :     _Py_IDENTIFIER(_);
; 143  : 
; 144  :     if (builtins == NULL) {

  0003b	48 85 c0	 test	 rax, rax
  0003e	75 20		 jne	 SHORT $LN11@sys_displa@2

; 145  :         PyErr_SetString(PyExc_RuntimeError, "lost builtins module");

  00040	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00047	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@DKDFFBBE@lost?5builtins?5module?$AA@
  0004e	e8 00 00 00 00	 call	 PyErr_SetString

; 146  :         return NULL;

  00053	33 c0		 xor	 eax, eax

; 182  : }

  00055	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  0005a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005e	5f		 pop	 rdi
  0005f	c3		 ret	 0
$LN11@sys_displa@2:
  00060	4c 89 64 24 50	 mov	 QWORD PTR [rsp+80], r12

; 147  :     }
; 148  : 
; 149  :     /* Print value except if None */
; 150  :     /* After printing, also assign to '_' */
; 151  :     /* Before, set '_' to None to avoid recursion */
; 152  :     if (o == Py_None) {

  00065	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:_Py_NoneStruct
  0006c	49 3b fc	 cmp	 rdi, r12
  0006f	75 54		 jne	 SHORT $LN10@sys_displa@2

; 153  :         Py_INCREF(Py_None);

  00071	e8 00 00 00 00	 call	 _Py_PXCTX
  00076	85 c0		 test	 eax, eax
  00078	75 38		 jne	 SHORT $LN17@sys_displa@2
  0007a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00081	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00088	4d 8b cc	 mov	 r9, r12
  0008b	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00091	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00099	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009e	85 c0		 test	 eax, eax
  000a0	75 09		 jne	 SHORT $LN16@sys_displa@2
  000a2	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  000a9	74 07		 je	 SHORT $LN17@sys_displa@2
$LN16@sys_displa@2:
  000ab	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN17@sys_displa@2:

; 154  :         return Py_None;

  000b2	49 8b c4	 mov	 rax, r12
  000b5	4c 8b 64 24 50	 mov	 r12, QWORD PTR [rsp+80]

; 182  : }

  000ba	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  000bf	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c3	5f		 pop	 rdi
  000c4	c3		 ret	 0
$LN10@sys_displa@2:

; 155  :     }
; 156  :     if (_PyObject_SetAttrId(builtins, &PyId__, Py_None) != 0)

  000c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000cb	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  000d4	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp
  000d9	48 8b 2c c8	 mov	 rbp, QWORD PTR [rax+rcx*8]
  000dd	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId__@?1??sys_displayhook@@9@9
  000e2	4d 8b c4	 mov	 r8, r12
  000e5	48 03 ea	 add	 rbp, rdx
  000e8	48 8b ce	 mov	 rcx, rsi
  000eb	48 8b d5	 mov	 rdx, rbp
  000ee	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  000f3	85 c0		 test	 eax, eax
  000f5	74 07		 je	 SHORT $LN9@sys_displa@2

; 157  :         return NULL;

  000f7	33 c0		 xor	 eax, eax
  000f9	e9 a0 00 00 00	 jmp	 $LN21@sys_displa@2
$LN9@sys_displa@2:

; 158  :     outf = PySys_GetObject("stdout");

  000fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06DJDOIFHB@stdout?$AA@
  00105	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0010a	e8 00 00 00 00	 call	 PySys_GetObject
  0010f	48 8b d8	 mov	 rbx, rax

; 159  :     if (outf == NULL || outf == Py_None) {

  00112	48 85 c0	 test	 rax, rax
  00115	74 6d		 je	 SHORT $LN7@sys_displa@2
  00117	49 3b c4	 cmp	 rax, r12
  0011a	74 68		 je	 SHORT $LN7@sys_displa@2

; 162  :     }
; 163  :     if (PyFile_WriteObject(o, outf, 0) != 0) {

  0011c	45 33 c0	 xor	 r8d, r8d
  0011f	48 8b d0	 mov	 rdx, rax
  00122	48 8b cf	 mov	 rcx, rdi
  00125	e8 00 00 00 00	 call	 PyFile_WriteObject
  0012a	85 c0		 test	 eax, eax
  0012c	74 24		 je	 SHORT $LN3@sys_displa@2

; 164  :         if (PyErr_ExceptionMatches(PyExc_UnicodeEncodeError)) {

  0012e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_UnicodeEncodeError
  00135	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  0013a	85 c0		 test	 eax, eax
  0013c	74 59		 je	 SHORT $LN23@sys_displa@2

; 165  :             /* repr(o) is not encodable to sys.stdout.encoding with
; 166  :              * sys.stdout.errors error handler (which is probably 'strict') */
; 167  :             PyErr_Clear();

  0013e	e8 00 00 00 00	 call	 PyErr_Clear

; 168  :             err = sys_displayhook_unencodable(outf, o);

  00143	48 8b d7	 mov	 rdx, rdi
  00146	48 8b cb	 mov	 rcx, rbx
  00149	e8 00 00 00 00	 call	 sys_displayhook_unencodable

; 169  :             if (err)

  0014e	85 c0		 test	 eax, eax

; 170  :                 return NULL;

  00150	75 45		 jne	 SHORT $LN23@sys_displa@2
$LN3@sys_displa@2:

; 171  :         }
; 172  :         else {
; 173  :             return NULL;
; 174  :         }
; 175  :     }
; 176  :     if (PyFile_WriteString("\n", outf) != 0)

  00152	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  00159	48 8b d3	 mov	 rdx, rbx
  0015c	e8 00 00 00 00	 call	 PyFile_WriteString
  00161	85 c0		 test	 eax, eax

; 177  :         return NULL;

  00163	75 32		 jne	 SHORT $LN23@sys_displa@2

; 178  :     if (_PyObject_SetAttrId(builtins, &PyId__, o) != 0)

  00165	4c 8b c7	 mov	 r8, rdi
  00168	48 8b d5	 mov	 rdx, rbp
  0016b	48 8b ce	 mov	 rcx, rsi
  0016e	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00173	85 c0		 test	 eax, eax

; 179  :         return NULL;

  00175	75 20		 jne	 SHORT $LN23@sys_displa@2

; 180  :     Py_INCREF(Py_None);

  00177	49 8b cc	 mov	 rcx, r12
  0017a	e8 00 00 00 00	 call	 _Py_IncRef

; 181  :     return Py_None;

  0017f	49 8b c4	 mov	 rax, r12
  00182	eb 15		 jmp	 SHORT $LN22@sys_displa@2
$LN7@sys_displa@2:

; 160  :         PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");

  00184	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  0018b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@HMAAIHML@lost?5sys?4stdout?$AA@
  00192	e8 00 00 00 00	 call	 PyErr_SetString
$LN23@sys_displa@2:

; 161  :         return NULL;

  00197	33 c0		 xor	 eax, eax
$LN22@sys_displa@2:
  00199	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN21@sys_displa@2:
  0019e	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  001a3	4c 8b 64 24 50	 mov	 r12, QWORD PTR [rsp+80]

; 182  : }

  001a8	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  001ad	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001b1	5f		 pop	 rdi
  001b2	c3		 ret	 0
sys_displayhook ENDP
_TEXT	ENDS
EXTRN	PyErr_Display:PROC
EXTRN	PyArg_UnpackTuple:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$sys_excepthook DD imagerel sys_excepthook
	DD	imagerel sys_excepthook+173
	DD	imagerel $unwind$sys_excepthook
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_excepthook DD 010401H
	DD	0a204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\sysmodule.c
xdata	ENDS
;	COMDAT sys_excepthook
_TEXT	SEGMENT
exc$ = 64
self$ = 96
args$ = 104
tb$ = 112
value$ = 120
sys_excepthook PROC					; COMDAT

; 192  : {

  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  00004	48 8b c2	 mov	 rax, rdx

; 193  :     PyObject *exc, *value, *tb;
; 194  :     if (!PyArg_UnpackTuple(args, "excepthook", 3, 3, &exc, &value, &tb))

  00007	48 8d 4c 24 70	 lea	 rcx, QWORD PTR tb$[rsp]
  0000c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00012	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00017	48 8d 4c 24 78	 lea	 rcx, QWORD PTR value$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@NONONIOP@excepthook?$AA@
  00023	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00028	48 8d 4c 24 40	 lea	 rcx, QWORD PTR exc$[rsp]
  0002d	45 8b c1	 mov	 r8d, r9d
  00030	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00035	48 8b c8	 mov	 rcx, rax
  00038	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003d	85 c0		 test	 eax, eax
  0003f	75 07		 jne	 SHORT $LN1@sys_except

; 195  :         return NULL;

  00041	33 c0		 xor	 eax, eax

; 199  : }

  00043	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00047	c3		 ret	 0
$LN1@sys_except:

; 196  :     PyErr_Display(exc, value, tb);

  00048	4c 8b 44 24 70	 mov	 r8, QWORD PTR tb$[rsp]
  0004d	48 8b 54 24 78	 mov	 rdx, QWORD PTR value$[rsp]
  00052	48 8b 4c 24 40	 mov	 rcx, QWORD PTR exc$[rsp]
  00057	e8 00 00 00 00	 call	 PyErr_Display

; 197  :     Py_INCREF(Py_None);

  0005c	e8 00 00 00 00	 call	 _Py_PXCTX
  00061	85 c0		 test	 eax, eax
  00063	75 3c		 jne	 SHORT $LN5@sys_except
  00065	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  0006c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00073	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0007a	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00080	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00088	e8 00 00 00 00	 call	 _PyParallel_Guard
  0008d	85 c0		 test	 eax, eax
  0008f	75 09		 jne	 SHORT $LN4@sys_except
  00091	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00098	74 07		 je	 SHORT $LN5@sys_except
$LN4@sys_except:
  0009a	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN5@sys_except:

; 198  :     return Py_None;

  000a1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 199  : }

  000a8	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000ac	c3		 ret	 0
sys_excepthook ENDP
_TEXT	ENDS
PUBLIC	??_C@_05IDJGALOC@?$CIOOO?$CJ?$AA@		; `string'
EXTRN	Py_BuildValue:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_exc_info DD imagerel sys_exc_info
	DD	imagerel sys_exc_info+92
	DD	imagerel $unwind$sys_exc_info
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_exc_info DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_05IDJGALOC@?$CIOOO?$CJ?$AA@
CONST	SEGMENT
??_C@_05IDJGALOC@?$CIOOO?$CJ?$AA@ DB '(OOO)', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT sys_exc_info
_TEXT	SEGMENT
self$ = 48
noargs$ = 56
sys_exc_info PROC					; COMDAT

; 209  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 210  :     PyThreadState *tstate;
; 211  :     tstate = PyThreadState_GET();

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	74 0a		 je	 SHORT $LN3@sys_exc_in
  0000d	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00012	4c 8b d8	 mov	 r11, rax
  00015	eb 07		 jmp	 SHORT $LN4@sys_exc_in
$LN3@sys_exc_in:
  00017	4c 8b 1d 00 00
	00 00		 mov	 r11, QWORD PTR _PyThreadState_Current
$LN4@sys_exc_in:

; 212  :     return Py_BuildValue(
; 213  :         "(OOO)",
; 214  :         tstate->exc_type != NULL ? tstate->exc_type : Py_None,
; 215  :         tstate->exc_value != NULL ? tstate->exc_value : Py_None,
; 216  :         tstate->exc_traceback != NULL ?
; 217  :             tstate->exc_traceback : Py_None);

  0001e	49 8b 43 70	 mov	 rax, QWORD PTR [r11+112]
  00022	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_NoneStruct
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05IDJGALOC@?$CIOOO?$CJ?$AA@
  00030	48 85 c0	 test	 rax, rax
  00033	4c 8b ca	 mov	 r9, rdx
  00036	4c 8b c2	 mov	 r8, rdx
  00039	4c 0f 45 c8	 cmovne	 r9, rax
  0003d	49 8b 43 68	 mov	 rax, QWORD PTR [r11+104]
  00041	48 85 c0	 test	 rax, rax
  00044	4c 0f 45 c0	 cmovne	 r8, rax
  00048	49 8b 43 60	 mov	 rax, QWORD PTR [r11+96]
  0004c	48 85 c0	 test	 rax, rax
  0004f	48 0f 45 d0	 cmovne	 rdx, rax

; 218  : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	e9 00 00 00 00	 jmp	 Py_BuildValue
sys_exc_info ENDP
_TEXT	ENDS
EXTRN	PyErr_SetObject:PROC
EXTRN	PyExc_SystemExit:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_exit DD imagerel sys_exit
	DD	imagerel sys_exit+78
	DD	imagerel $unwind$sys_exit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_exit DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT sys_exit
_TEXT	SEGMENT
self$ = 64
args$ = 72
exit_code$ = 80
sys_exit PROC						; COMDAT

; 229  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx

; 230  :     PyObject *exit_code = 0;
; 231  :     if (!PyArg_UnpackTuple(args, "exit", 0, 1, &exit_code))

  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR exit_code$[rsp]
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04MKNBDEPB@exit?$AA@
  00013	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00018	41 b9 01 00 00
	00		 mov	 r9d, 1
  0001e	45 33 c0	 xor	 r8d, r8d
  00021	48 8b c8	 mov	 rcx, rax
  00024	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR exit_code$[rsp], 0
  0002d	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00032	85 c0		 test	 eax, eax

; 232  :         return NULL;

  00034	74 11		 je	 SHORT $LN4@sys_exit

; 233  :     /* Raise SystemExit so callers may catch it or clean up. */
; 234  :     PyErr_SetObject(PyExc_SystemExit, exit_code);

  00036	48 8b 54 24 50	 mov	 rdx, QWORD PTR exit_code$[rsp]
  0003b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemExit
  00042	e8 00 00 00 00	 call	 PyErr_SetObject
$LN4@sys_exit:

; 235  :     return NULL;

  00047	33 c0		 xor	 eax, eax

; 236  : }

  00049	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004d	c3		 ret	 0
sys_exit ENDP
_TEXT	ENDS
EXTRN	PyUnicode_FromString:PROC
EXTRN	PyUnicode_GetDefaultEncoding:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_getdefaultencoding DD imagerel sys_getdefaultencoding
	DD	imagerel sys_getdefaultencoding+21
	DD	imagerel $unwind$sys_getdefaultencoding
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_getdefaultencoding DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT sys_getdefaultencoding
_TEXT	SEGMENT
self$ = 48
sys_getdefaultencoding PROC				; COMDAT

; 251  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 252  :     return PyUnicode_FromString(PyUnicode_GetDefaultEncoding());

  00004	e8 00 00 00 00	 call	 PyUnicode_GetDefaultEncoding
  00009	48 8b c8	 mov	 rcx, rax

; 253  : }

  0000c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00010	e9 00 00 00 00	 jmp	 PyUnicode_FromString
sys_getdefaultencoding ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@ONHMLP@filesystem?5encoding?5is?5not?5initi@ ; `string'
EXTRN	Py_FileSystemDefaultEncoding:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_getfilesystemencoding DD imagerel sys_getfilesystemencoding
	DD	imagerel sys_getfilesystemencoding+51
	DD	imagerel $unwind$sys_getfilesystemencoding
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_getfilesystemencoding DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0CH@ONHMLP@filesystem?5encoding?5is?5not?5initi@
CONST	SEGMENT
??_C@_0CH@ONHMLP@filesystem?5encoding?5is?5not?5initi@ DB 'filesystem enc'
	DB	'oding is not initialized', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT sys_getfilesystemencoding
_TEXT	SEGMENT
self$ = 48
sys_getfilesystemencoding PROC				; COMDAT

; 264  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 265  :     if (Py_FileSystemDefaultEncoding)

  00004	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Py_FileSystemDefaultEncoding
  0000b	48 85 c9	 test	 rcx, rcx
  0000e	74 09		 je	 SHORT $LN1@sys_getfil

; 270  : }

  00010	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00014	e9 00 00 00 00	 jmp	 PyUnicode_FromString
$LN1@sys_getfil:

; 266  :         return PyUnicode_FromString(Py_FileSystemDefaultEncoding);
; 267  :     PyErr_SetString(PyExc_RuntimeError,
; 268  :                     "filesystem encoding is not initialized");

  00019	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@ONHMLP@filesystem?5encoding?5is?5not?5initi@
  00027	e8 00 00 00 00	 call	 PyErr_SetString

; 269  :     return NULL;

  0002c	33 c0		 xor	 eax, eax

; 270  : }

  0002e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00032	c3		 ret	 0
sys_getfilesystemencoding ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@NEEGIGCF@can?8t?5intern?5?$CF?4400s?$AA@ ; `string'
PUBLIC	??_C@_08LFEPHMOI@U?3intern?$AA@			; `string'
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyUnicode_InternInPlace:PROC
EXTRN	PyUnicode_Type:BYTE
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$sys_intern DD imagerel sys_intern
	DD	imagerel sys_intern+35
	DD	imagerel $unwind$sys_intern
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$sys_intern DD imagerel sys_intern+35
	DD	imagerel sys_intern+142
	DD	imagerel $chain$0$sys_intern
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$sys_intern DD imagerel sys_intern+142
	DD	imagerel sys_intern+181
	DD	imagerel $chain$2$sys_intern
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$sys_intern DD 020021H
	DD	063400H
	DD	imagerel sys_intern
	DD	imagerel sys_intern+35
	DD	imagerel $unwind$sys_intern
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$sys_intern DD 020521H
	DD	063405H
	DD	imagerel sys_intern
	DD	imagerel sys_intern+35
	DD	imagerel $unwind$sys_intern
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_intern DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0BE@NEEGIGCF@can?8t?5intern?5?$CF?4400s?$AA@
CONST	SEGMENT
??_C@_0BE@NEEGIGCF@can?8t?5intern?5?$CF?4400s?$AA@ DB 'can''t intern %.40'
	DB	'0s', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_08LFEPHMOI@U?3intern?$AA@
CONST	SEGMENT
??_C@_08LFEPHMOI@U?3intern?$AA@ DB 'U:intern', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\sysmodule.c
CONST	ENDS
;	COMDAT sys_intern
_TEXT	SEGMENT
self$ = 64
args$ = 72
s$ = 80
sys_intern PROC						; COMDAT

; 281  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 282  :     PyObject *s;
; 283  :     if (!PyArg_ParseTuple(args, "U:intern", &s))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 44 24 50	 lea	 r8, QWORD PTR s$[rsp]
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08LFEPHMOI@U?3intern?$AA@
  00013	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00018	85 c0		 test	 eax, eax
  0001a	75 07		 jne	 SHORT $LN3@sys_intern

; 284  :         return NULL;

  0001c	33 c0		 xor	 eax, eax

; 294  :     }
; 295  : }

  0001e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00022	c3		 ret	 0
$LN3@sys_intern:
  00023	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx

; 285  :     if (PyUnicode_CheckExact(s)) {

  00028	48 8b 5c 24 50	 mov	 rbx, QWORD PTR s$[rsp]
  0002d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  00034	48 39 43 58	 cmp	 QWORD PTR [rbx+88], rax
  00038	75 54		 jne	 SHORT $LN2@sys_intern

; 286  :         Py_INCREF(s);

  0003a	e8 00 00 00 00	 call	 _Py_PXCTX
  0003f	85 c0		 test	 eax, eax
  00041	75 32		 jne	 SHORT $LN7@sys_intern
  00043	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00051	4c 8b cb	 mov	 r9, rbx
  00054	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0005a	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00062	e8 00 00 00 00	 call	 _PyParallel_Guard
  00067	85 c0		 test	 eax, eax
  00069	75 06		 jne	 SHORT $LN6@sys_intern
  0006b	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0006f	74 04		 je	 SHORT $LN7@sys_intern
$LN6@sys_intern:
  00071	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN7@sys_intern:

; 287  :         PyUnicode_InternInPlace(&s);

  00075	48 8d 4c 24 50	 lea	 rcx, QWORD PTR s$[rsp]
  0007a	e8 00 00 00 00	 call	 PyUnicode_InternInPlace

; 288  :         return s;

  0007f	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00084	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 294  :     }
; 295  : }

  00089	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008d	c3		 ret	 0
$LN2@sys_intern:

; 289  :     }
; 290  :     else {
; 291  :         PyErr_Format(PyExc_TypeError,
; 292  :                         "can't intern %.400s", s->ob_type->tp_name);

  0008e	4c 8b 43 58	 mov	 r8, QWORD PTR [rbx+88]
  00092	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00099	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@NEEGIGCF@can?8t?5intern?5?$CF?4400s?$AA@
  000a0	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  000a4	e8 00 00 00 00	 call	 PyErr_Format
  000a9	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 293  :         return NULL;

  000ae	33 c0		 xor	 eax, eax

; 294  :     }
; 295  : }

  000b0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b4	c3		 ret	 0
sys_intern ENDP
_TEXT	ENDS
EXTRN	PyUnicode_InternFromString:PROC
EXTRN	__ImageBase:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$trace_init DD imagerel trace_init
	DD	imagerel trace_init+93
	DD	imagerel $unwind$trace_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$trace_init DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT trace_init
_TEXT	SEGMENT
trace_init PROC						; COMDAT

; 314  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 315  :     static char *whatnames[7] = {"call", "exception", "line", "return",
; 316  :                                     "c_call", "c_exception", "c_return"};
; 317  :     PyObject *name;
; 318  :     int i;
; 319  :     for (i = 0; i < 7; ++i) {

  0000a	33 db		 xor	 ebx, ebx
  0000c	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:__ImageBase
$LL5@trace_init:

; 320  :         if (whatstrings[i] == NULL) {

  00013	48 83 bc 3b 00
	00 00 00 00	 cmp	 QWORD PTR whatstrings[rbx+rdi], 0
  0001c	75 1a		 jne	 SHORT $LN4@trace_init

; 321  :             name = PyUnicode_InternFromString(whatnames[i]);

  0001e	48 8b 8c 3b 00
	00 00 00	 mov	 rcx, QWORD PTR ?whatnames@?1??trace_init@@9@9[rbx+rdi]
  00026	e8 00 00 00 00	 call	 PyUnicode_InternFromString

; 322  :             if (name == NULL)

  0002b	48 85 c0	 test	 rax, rax
  0002e	74 1f		 je	 SHORT $LN9@trace_init

; 324  :             whatstrings[i] = name;

  00030	48 89 84 3b 00
	00 00 00	 mov	 QWORD PTR whatstrings[rbx+rdi], rax
$LN4@trace_init:

; 315  :     static char *whatnames[7] = {"call", "exception", "line", "return",
; 316  :                                     "c_call", "c_exception", "c_return"};
; 317  :     PyObject *name;
; 318  :     int i;
; 319  :     for (i = 0; i < 7; ++i) {

  00038	48 83 c3 08	 add	 rbx, 8
  0003c	48 83 fb 38	 cmp	 rbx, 56			; 00000038H
  00040	7c d1		 jl	 SHORT $LL5@trace_init

; 325  :         }
; 326  :     }
; 327  :     return 0;

  00042	33 c0		 xor	 eax, eax

; 328  : }

  00044	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00049	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004d	5f		 pop	 rdi
  0004e	c3		 ret	 0
$LN9@trace_init:

; 323  :                 return -1;

  0004f	83 c8 ff	 or	 eax, -1

; 328  : }

  00052	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00057	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005b	5f		 pop	 rdi
  0005c	c3		 ret	 0
trace_init ENDP
_TEXT	ENDS
EXTRN	PyTraceBack_Here:PROC
EXTRN	PyFrame_LocalsToFast:PROC
EXTRN	PyEval_CallObjectWithKeywords:PROC
EXTRN	PyFrame_FastToLocals:PROC
EXTRN	PyTuple_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$call_trampoline DD imagerel call_trampoline
	DD	imagerel call_trampoline+53
	DD	imagerel $unwind$call_trampoline
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$call_trampoline DD imagerel call_trampoline+53
	DD	imagerel call_trampoline+323
	DD	imagerel $chain$0$call_trampoline
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$call_trampoline DD imagerel call_trampoline+323
	DD	imagerel call_trampoline+362
	DD	imagerel $chain$1$call_trampoline
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$call_trampoline DD 021H
	DD	imagerel call_trampoline
	DD	imagerel call_trampoline+53
	DD	imagerel $unwind$call_trampoline
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$call_trampoline DD 020521H
	DD	0a6405H
	DD	imagerel call_trampoline
	DD	imagerel call_trampoline+53
	DD	imagerel $unwind$call_trampoline
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$call_trampoline DD 081301H
	DD	0c5413H
	DD	0b3413H
	DD	0d00f5213H
	DD	0700bc00dH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\sysmodule.c
xdata	ENDS
;	COMDAT call_trampoline
_TEXT	SEGMENT
callback$ = 80
frame$ = 88
what$ = 96
arg$ = 104
call_trampoline PROC					; COMDAT

; 334  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	57		 push	 rdi
  0000b	41 54		 push	 r12
  0000d	41 55		 push	 r13
  0000f	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00013	4c 8b e9	 mov	 r13, rcx

; 335  :     PyObject *args = PyTuple_New(3);

  00016	b9 03 00 00 00	 mov	 ecx, 3
  0001b	4d 8b e1	 mov	 r12, r9
  0001e	49 63 d8	 movsxd	 rbx, r8d
  00021	48 8b fa	 mov	 rdi, rdx
  00024	e8 00 00 00 00	 call	 PyTuple_New
  00029	48 8b e8	 mov	 rbp, rax

; 336  :     PyObject *whatstr;
; 337  :     PyObject *result;
; 338  : 
; 339  :     if (args == NULL)

  0002c	48 85 c0	 test	 rax, rax
  0002f	0f 84 21 01 00
	00		 je	 $LN4@call_tramp
$LN3@call_tramp:
  00035	48 89 74 24 50	 mov	 QWORD PTR [rsp+80], rsi

; 340  :         return NULL;
; 341  :     Py_INCREF(frame);

  0003a	e8 00 00 00 00	 call	 _Py_PXCTX
  0003f	85 c0		 test	 eax, eax
  00041	75 32		 jne	 SHORT $LN7@call_tramp
  00043	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00051	4c 8b cf	 mov	 r9, rdi
  00054	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0005a	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00062	e8 00 00 00 00	 call	 _PyParallel_Guard
  00067	85 c0		 test	 eax, eax
  00069	75 06		 jne	 SHORT $LN6@call_tramp
  0006b	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  0006f	74 04		 je	 SHORT $LN7@call_tramp
$LN6@call_tramp:
  00071	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN7@call_tramp:

; 342  :     whatstr = whatstrings[what];

  00075	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:whatstrings
  0007c	48 8b 34 de	 mov	 rsi, QWORD PTR [rsi+rbx*8]

; 343  :     Py_INCREF(whatstr);

  00080	e8 00 00 00 00	 call	 _Py_PXCTX
  00085	85 c0		 test	 eax, eax
  00087	75 32		 jne	 SHORT $LN11@call_tramp
  00089	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00090	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00097	4c 8b ce	 mov	 r9, rsi
  0009a	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000a0	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000a8	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ad	85 c0		 test	 eax, eax
  000af	75 06		 jne	 SHORT $LN10@call_tramp
  000b1	f6 46 20 20	 test	 BYTE PTR [rsi+32], 32	; 00000020H
  000b5	74 04		 je	 SHORT $LN11@call_tramp
$LN10@call_tramp:
  000b7	48 ff 46 50	 inc	 QWORD PTR [rsi+80]
$LN11@call_tramp:

; 344  :     if (arg == NULL)

  000bb	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  000c2	4d 85 e4	 test	 r12, r12
  000c5	49 0f 45 dc	 cmovne	 rbx, r12

; 345  :         arg = Py_None;
; 346  :     Py_INCREF(arg);

  000c9	e8 00 00 00 00	 call	 _Py_PXCTX
  000ce	85 c0		 test	 eax, eax
  000d0	75 32		 jne	 SHORT $LN15@call_tramp
  000d2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000e0	4c 8b cb	 mov	 r9, rbx
  000e3	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000e9	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000f1	e8 00 00 00 00	 call	 _PyParallel_Guard
  000f6	85 c0		 test	 eax, eax
  000f8	75 06		 jne	 SHORT $LN14@call_tramp
  000fa	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000fe	74 04		 je	 SHORT $LN15@call_tramp
$LN14@call_tramp:
  00100	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN15@call_tramp:

; 347  :     PyTuple_SET_ITEM(args, 0, (PyObject *)frame);
; 348  :     PyTuple_SET_ITEM(args, 1, whatstr);
; 349  :     PyTuple_SET_ITEM(args, 2, arg);
; 350  : 
; 351  :     /* call the Python-level function */
; 352  :     PyFrame_FastToLocals(frame);

  00104	48 8b cf	 mov	 rcx, rdi
  00107	48 89 7d 70	 mov	 QWORD PTR [rbp+112], rdi
  0010b	48 89 75 78	 mov	 QWORD PTR [rbp+120], rsi
  0010f	48 89 9d 80 00
	00 00		 mov	 QWORD PTR [rbp+128], rbx
  00116	e8 00 00 00 00	 call	 PyFrame_FastToLocals

; 353  :     result = PyEval_CallObject(callback, args);

  0011b	45 33 c0	 xor	 r8d, r8d
  0011e	48 8b d5	 mov	 rdx, rbp
  00121	49 8b cd	 mov	 rcx, r13
  00124	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords

; 354  :     PyFrame_LocalsToFast(frame, 1);

  00129	ba 01 00 00 00	 mov	 edx, 1
  0012e	48 8b cf	 mov	 rcx, rdi
  00131	48 8b d8	 mov	 rbx, rax
  00134	e8 00 00 00 00	 call	 PyFrame_LocalsToFast
  00139	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]

; 355  :     if (result == NULL)

  0013e	48 85 db	 test	 rbx, rbx
  00141	75 08		 jne	 SHORT $LN1@call_tramp

; 356  :         PyTraceBack_Here(frame);

  00143	48 8b cf	 mov	 rcx, rdi
  00146	e8 00 00 00 00	 call	 PyTraceBack_Here
$LN1@call_tramp:

; 357  : 
; 358  :     /* cleanup */
; 359  :     Py_DECREF(args);

  0014b	48 8b cd	 mov	 rcx, rbp
  0014e	e8 00 00 00 00	 call	 _Py_DecRef

; 360  :     return result;

  00153	48 8b c3	 mov	 rax, rbx
$LN4@call_tramp:

; 361  : }

  00156	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  0015b	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
  00160	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00164	41 5d		 pop	 r13
  00166	41 5c		 pop	 r12
  00168	5f		 pop	 rdi
  00169	c3		 ret	 0
call_trampoline ENDP
_TEXT	ENDS
EXTRN	PyEval_SetProfile:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$profile_trampoline DD imagerel profile_trampoline
	DD	imagerel profile_trampoline+63
	DD	imagerel $unwind$profile_trampoline
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$profile_trampoline DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT profile_trampoline
_TEXT	SEGMENT
self$ = 48
frame$ = 56
what$ = 64
arg$ = 72
profile_trampoline PROC					; COMDAT

; 366  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	49 8b c1	 mov	 rax, r9

; 367  :     PyThreadState *tstate = frame->f_tstate;
; 368  :     PyObject *result;
; 369  : 
; 370  :     if (arg == NULL)

  00007	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  0000e	48 85 c0	 test	 rax, rax
  00011	4c 0f 45 c8	 cmovne	 r9, rax

; 371  :         arg = Py_None;
; 372  :     result = call_trampoline(tstate, self, frame, what, arg);

  00015	e8 00 00 00 00	 call	 call_trampoline

; 373  :     if (result == NULL) {

  0001a	48 85 c0	 test	 rax, rax
  0001d	75 11		 jne	 SHORT $LN1@profile_tr

; 374  :         PyEval_SetProfile(NULL, NULL);

  0001f	33 d2		 xor	 edx, edx
  00021	33 c9		 xor	 ecx, ecx
  00023	e8 00 00 00 00	 call	 PyEval_SetProfile

; 375  :         return -1;

  00028	83 c8 ff	 or	 eax, -1

; 379  : }

  0002b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002f	c3		 ret	 0
$LN1@profile_tr:

; 376  :     }
; 377  :     Py_DECREF(result);

  00030	48 8b c8	 mov	 rcx, rax
  00033	e8 00 00 00 00	 call	 _Py_DecRef

; 378  :     return 0;

  00038	33 c0		 xor	 eax, eax

; 379  : }

  0003a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003e	c3		 ret	 0
profile_trampoline ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@MGHEILLN@trace_trampoline?$AA@	; `string'
PUBLIC	??_C@_0BG@MBPGCCDI@?4?4?2Python?2sysmodule?4c?$AA@ ; `string'
EXTRN	PyEval_SetTrace:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$trace_trampoline DD imagerel trace_trampoline
	DD	imagerel trace_trampoline+34
	DD	imagerel $unwind$trace_trampoline
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$trace_trampoline DD imagerel trace_trampoline+34
	DD	imagerel trace_trampoline+147
	DD	imagerel $chain$0$trace_trampoline
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$trace_trampoline DD imagerel trace_trampoline+147
	DD	imagerel trace_trampoline+207
	DD	imagerel $chain$2$trace_trampoline
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$trace_trampoline DD imagerel trace_trampoline+207
	DD	imagerel trace_trampoline+228
	DD	imagerel $chain$4$trace_trampoline
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$trace_trampoline DD 020021H
	DD	087400H
	DD	imagerel trace_trampoline
	DD	imagerel trace_trampoline+34
	DD	imagerel $unwind$trace_trampoline
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$trace_trampoline DD 020021H
	DD	087400H
	DD	imagerel trace_trampoline
	DD	imagerel trace_trampoline+34
	DD	imagerel $unwind$trace_trampoline
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$trace_trampoline DD 020521H
	DD	087405H
	DD	imagerel trace_trampoline
	DD	imagerel trace_trampoline+34
	DD	imagerel $unwind$trace_trampoline
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$trace_trampoline DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0BB@MGHEILLN@trace_trampoline?$AA@
CONST	SEGMENT
??_C@_0BB@MGHEILLN@trace_trampoline?$AA@ DB 'trace_trampoline', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MBPGCCDI@?4?4?2Python?2sysmodule?4c?$AA@
CONST	SEGMENT
??_C@_0BG@MBPGCCDI@?4?4?2Python?2sysmodule?4c?$AA@ DB '..\Python\sysmodul'
	DB	'e.c', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT trace_trampoline
_TEXT	SEGMENT
self$ = 64
frame$ = 72
what$ = 80
arg$ = 88
trace_trampoline PROC					; COMDAT

; 384  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b da	 mov	 rbx, rdx

; 385  :     PyThreadState *tstate = frame->f_tstate;
; 386  :     PyObject *callback;
; 387  :     PyObject *result;
; 388  : 
; 389  :     if (what == PyTrace_CALL)

  00009	45 85 c0	 test	 r8d, r8d
  0000c	74 07		 je	 SHORT $LN13@trace_tram

; 390  :         callback = self;
; 391  :     else
; 392  :         callback = frame->f_trace;

  0000e	48 8b 8a a8 00
	00 00		 mov	 rcx, QWORD PTR [rdx+168]
$LN13@trace_tram:

; 393  :     if (callback == NULL)

  00015	48 85 c9	 test	 rcx, rcx
  00018	75 08		 jne	 SHORT $LN12@trace_tram

; 394  :         return 0;

  0001a	33 c0		 xor	 eax, eax

; 411  : }

  0001c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00020	5b		 pop	 rbx
  00021	c3		 ret	 0
$LN12@trace_tram:
  00022	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi

; 395  :     result = call_trampoline(tstate, callback, frame, what, arg);

  00027	e8 00 00 00 00	 call	 call_trampoline
  0002c	48 8b f8	 mov	 rdi, rax

; 396  :     if (result == NULL) {

  0002f	48 85 c0	 test	 rax, rax
  00032	75 5f		 jne	 SHORT $LN11@trace_tram

; 397  :         PyEval_SetTrace(NULL, NULL);

  00034	33 d2		 xor	 edx, edx
  00036	33 c9		 xor	 ecx, ecx
  00038	e8 00 00 00 00	 call	 PyEval_SetTrace

; 398  :         Py_CLEAR(frame->f_trace);

  0003d	4c 8b 8b a8 00
	00 00		 mov	 r9, QWORD PTR [rbx+168]
  00044	4d 85 c9	 test	 r9, r9
  00047	74 3c		 je	 SHORT $LN9@trace_tram
  00049	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@MBPGCCDI@?4?4?2Python?2sysmodule?4c?$AA@
  00050	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@MGHEILLN@trace_trampoline?$AA@
  00057	41 b8 8e 01 00
	00		 mov	 r8d, 398		; 0000018eH
  0005d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00065	e8 00 00 00 00	 call	 _PyParallel_Guard
  0006a	85 c0		 test	 eax, eax
  0006c	75 17		 jne	 SHORT $LN9@trace_tram
  0006e	48 8b 8b a8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+168]
  00075	48 c7 83 a8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rbx+168], 0
  00080	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@trace_tram:

; 399  :         return -1;

  00085	83 c8 ff	 or	 eax, -1
  00088	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 411  : }

  0008d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00091	5b		 pop	 rbx
  00092	c3		 ret	 0
$LN11@trace_tram:

; 400  :     }
; 401  :     if (result != Py_None) {

  00093	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0009a	48 3b f8	 cmp	 rdi, rax
  0009d	74 30		 je	 SHORT $LN6@trace_tram

; 402  :         PyObject *temp = frame->f_trace;

  0009f	48 8b 8b a8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+168]

; 403  :         frame->f_trace = NULL;

  000a6	48 c7 83 a8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rbx+168], 0

; 404  :         Py_XDECREF(temp);

  000b1	48 85 c9	 test	 rcx, rcx
  000b4	74 05		 je	 SHORT $LN4@trace_tram
  000b6	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@trace_tram:

; 405  :         frame->f_trace = result;

  000bb	48 89 bb a8 00
	00 00		 mov	 QWORD PTR [rbx+168], rdi
  000c2	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 409  :     }
; 410  :     return 0;

  000c7	33 c0		 xor	 eax, eax

; 411  : }

  000c9	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000cd	5b		 pop	 rbx
  000ce	c3		 ret	 0
$LN6@trace_tram:

; 406  :     }
; 407  :     else {
; 408  :         Py_DECREF(result);

  000cf	48 8b cf	 mov	 rcx, rdi
  000d2	e8 00 00 00 00	 call	 _Py_DecRef
  000d7	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 409  :     }
; 410  :     return 0;

  000dc	33 c0		 xor	 eax, eax

; 411  : }

  000de	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000e2	5b		 pop	 rbx
  000e3	c3		 ret	 0
trace_trampoline ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$sys_settrace DD imagerel sys_settrace
	DD	imagerel sys_settrace+144
	DD	imagerel $unwind$sys_settrace
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_settrace DD 042001H
	DD	087420H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\sysmodule.c
xdata	ENDS
;	COMDAT sys_settrace
_TEXT	SEGMENT
self$ = 64
args$ = 72
sys_settrace PROC					; COMDAT

; 415  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b da	 mov	 rbx, rdx

; 416  :     if (trace_init() == -1)

  00009	e8 00 00 00 00	 call	 trace_init
  0000e	83 f8 ff	 cmp	 eax, -1
  00011	75 08		 jne	 SHORT $LN3@sys_settra

; 417  :         return NULL;

  00013	33 c0		 xor	 eax, eax

; 424  : }

  00015	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00019	5b		 pop	 rbx
  0001a	c3		 ret	 0
$LN3@sys_settra:
  0001b	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi

; 418  :     if (args == Py_None)

  00020	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  00027	48 3b df	 cmp	 rbx, rdi
  0002a	75 06		 jne	 SHORT $LN2@sys_settra

; 419  :         PyEval_SetTrace(NULL, NULL);

  0002c	33 d2		 xor	 edx, edx
  0002e	33 c9		 xor	 ecx, ecx

; 420  :     else

  00030	eb 0a		 jmp	 SHORT $LN10@sys_settra
$LN2@sys_settra:

; 421  :         PyEval_SetTrace(trace_trampoline, args);

  00032	48 8b d3	 mov	 rdx, rbx
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:trace_trampoline
$LN10@sys_settra:
  0003c	e8 00 00 00 00	 call	 PyEval_SetTrace

; 422  :     Py_INCREF(Py_None);

  00041	e8 00 00 00 00	 call	 _Py_PXCTX
  00046	85 c0		 test	 eax, eax
  00048	75 38		 jne	 SHORT $LN7@sys_settra
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00051	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00058	4c 8b cf	 mov	 r9, rdi
  0005b	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00061	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00069	e8 00 00 00 00	 call	 _PyParallel_Guard
  0006e	85 c0		 test	 eax, eax
  00070	75 09		 jne	 SHORT $LN6@sys_settra
  00072	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00079	74 07		 je	 SHORT $LN7@sys_settra
$LN6@sys_settra:
  0007b	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN7@sys_settra:

; 423  :     return Py_None;

  00082	48 8b c7	 mov	 rax, rdi
  00085	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 424  : }

  0008a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008e	5b		 pop	 rbx
  0008f	c3		 ret	 0
sys_settrace ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$sys_gettrace DD imagerel sys_gettrace
	DD	imagerel sys_gettrace+115
	DD	imagerel $unwind$sys_gettrace
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_gettrace DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\sysmodule.c
xdata	ENDS
;	COMDAT sys_gettrace
_TEXT	SEGMENT
self$ = 64
args$ = 72
sys_gettrace PROC					; COMDAT

; 435  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 436  :     PyThreadState *tstate = PyThreadState_GET();

  00006	e8 00 00 00 00	 call	 _Py_PXCTX
  0000b	85 c0		 test	 eax, eax
  0000d	74 07		 je	 SHORT $LN4@sys_gettra
  0000f	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00014	eb 07		 jmp	 SHORT $LN5@sys_gettra
$LN4@sys_gettra:
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
$LN5@sys_gettra:

; 437  :     PyObject *temp = tstate->c_traceobj;

  0001d	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]

; 438  : 
; 439  :     if (temp == NULL)

  00021	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  00028	48 85 c0	 test	 rax, rax
  0002b	48 0f 45 d8	 cmovne	 rbx, rax

; 440  :         temp = Py_None;
; 441  :     Py_INCREF(temp);

  0002f	e8 00 00 00 00	 call	 _Py_PXCTX
  00034	85 c0		 test	 eax, eax
  00036	75 32		 jne	 SHORT $LN10@sys_gettra
  00038	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00046	4c 8b cb	 mov	 r9, rbx
  00049	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0004f	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00057	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005c	85 c0		 test	 eax, eax
  0005e	75 06		 jne	 SHORT $LN6@sys_gettra
  00060	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00064	74 04		 je	 SHORT $LN10@sys_gettra
$LN6@sys_gettra:
  00066	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN10@sys_gettra:

; 442  :     return temp;

  0006a	48 8b c3	 mov	 rax, rbx

; 443  : }

  0006d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00071	5b		 pop	 rbx
  00072	c3		 ret	 0
sys_gettrace ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$sys_setprofile DD imagerel sys_setprofile
	DD	imagerel sys_setprofile+144
	DD	imagerel $unwind$sys_setprofile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_setprofile DD 042001H
	DD	087420H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\sysmodule.c
xdata	ENDS
;	COMDAT sys_setprofile
_TEXT	SEGMENT
self$ = 64
args$ = 72
sys_setprofile PROC					; COMDAT

; 454  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b da	 mov	 rbx, rdx

; 455  :     if (trace_init() == -1)

  00009	e8 00 00 00 00	 call	 trace_init
  0000e	83 f8 ff	 cmp	 eax, -1
  00011	75 08		 jne	 SHORT $LN3@sys_setpro

; 456  :         return NULL;

  00013	33 c0		 xor	 eax, eax

; 463  : }

  00015	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00019	5b		 pop	 rbx
  0001a	c3		 ret	 0
$LN3@sys_setpro:
  0001b	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi

; 457  :     if (args == Py_None)

  00020	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  00027	48 3b df	 cmp	 rbx, rdi
  0002a	75 06		 jne	 SHORT $LN2@sys_setpro

; 458  :         PyEval_SetProfile(NULL, NULL);

  0002c	33 d2		 xor	 edx, edx
  0002e	33 c9		 xor	 ecx, ecx

; 459  :     else

  00030	eb 0a		 jmp	 SHORT $LN10@sys_setpro
$LN2@sys_setpro:

; 460  :         PyEval_SetProfile(profile_trampoline, args);

  00032	48 8b d3	 mov	 rdx, rbx
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:profile_trampoline
$LN10@sys_setpro:
  0003c	e8 00 00 00 00	 call	 PyEval_SetProfile

; 461  :     Py_INCREF(Py_None);

  00041	e8 00 00 00 00	 call	 _Py_PXCTX
  00046	85 c0		 test	 eax, eax
  00048	75 38		 jne	 SHORT $LN7@sys_setpro
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00051	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00058	4c 8b cf	 mov	 r9, rdi
  0005b	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00061	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00069	e8 00 00 00 00	 call	 _PyParallel_Guard
  0006e	85 c0		 test	 eax, eax
  00070	75 09		 jne	 SHORT $LN6@sys_setpro
  00072	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00079	74 07		 je	 SHORT $LN7@sys_setpro
$LN6@sys_setpro:
  0007b	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN7@sys_setpro:

; 462  :     return Py_None;

  00082	48 8b c7	 mov	 rax, rdi
  00085	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 463  : }

  0008a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008e	5b		 pop	 rbx
  0008f	c3		 ret	 0
sys_setprofile ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$sys_getprofile DD imagerel sys_getprofile
	DD	imagerel sys_getprofile+115
	DD	imagerel $unwind$sys_getprofile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_getprofile DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\sysmodule.c
xdata	ENDS
;	COMDAT sys_getprofile
_TEXT	SEGMENT
self$ = 64
args$ = 72
sys_getprofile PROC					; COMDAT

; 474  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 475  :     PyThreadState *tstate = PyThreadState_GET();

  00006	e8 00 00 00 00	 call	 _Py_PXCTX
  0000b	85 c0		 test	 eax, eax
  0000d	74 07		 je	 SHORT $LN4@sys_getpro
  0000f	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00014	eb 07		 jmp	 SHORT $LN5@sys_getpro
$LN4@sys_getpro:
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
$LN5@sys_getpro:

; 476  :     PyObject *temp = tstate->c_profileobj;

  0001d	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]

; 477  : 
; 478  :     if (temp == NULL)

  00021	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  00028	48 85 c0	 test	 rax, rax
  0002b	48 0f 45 d8	 cmovne	 rbx, rax

; 479  :         temp = Py_None;
; 480  :     Py_INCREF(temp);

  0002f	e8 00 00 00 00	 call	 _Py_PXCTX
  00034	85 c0		 test	 eax, eax
  00036	75 32		 jne	 SHORT $LN10@sys_getpro
  00038	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00046	4c 8b cb	 mov	 r9, rbx
  00049	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0004f	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00057	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005c	85 c0		 test	 eax, eax
  0005e	75 06		 jne	 SHORT $LN6@sys_getpro
  00060	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00064	74 04		 je	 SHORT $LN10@sys_getpro
$LN6@sys_getpro:
  00066	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN10@sys_getpro:

; 481  :     return temp;

  0006a	48 8b c3	 mov	 rax, rbx

; 482  : }

  0006d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00071	5b		 pop	 rbx
  00072	c3		 ret	 0
sys_getprofile ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@MFGGPLOM@i?3setcheckinterval?$AA@	; `string'
PUBLIC	??_C@_0GI@BOFGDJIC@sys?4getcheckinterval?$CI?$CJ?5and?5sys?4s@ ; `string'
EXTRN	PyErr_WarnEx:PROC
EXTRN	PyExc_DeprecationWarning:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$sys_setcheckinterval DD imagerel sys_setcheckinterval
	DD	imagerel sys_setcheckinterval+154
	DD	imagerel $unwind$sys_setcheckinterval
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_setcheckinterval DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0BD@MFGGPLOM@i?3setcheckinterval?$AA@
CONST	SEGMENT
??_C@_0BD@MFGGPLOM@i?3setcheckinterval?$AA@ DB 'i:setcheckinterval', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@BOFGDJIC@sys?4getcheckinterval?$CI?$CJ?5and?5sys?4s@
CONST	SEGMENT
??_C@_0GI@BOFGDJIC@sys?4getcheckinterval?$CI?$CJ?5and?5sys?4s@ DB 'sys.ge'
	DB	'tcheckinterval() and sys.setcheckinterval() are deprecated.  '
	DB	'Use sys.setswitchinterval() instead.', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\sysmodule.c
CONST	ENDS
;	COMDAT sys_setcheckinterval
_TEXT	SEGMENT
self$ = 64
args$ = 72
sys_setcheckinterval PROC				; COMDAT

; 495  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 496  :     if (PyErr_WarnEx(PyExc_DeprecationWarning,
; 497  :                      "sys.getcheckinterval() and sys.setcheckinterval() "
; 498  :                      "are deprecated.  Use sys.setswitchinterval() "
; 499  :                      "instead.", 1) < 0)

  00006	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_DeprecationWarning
  0000d	48 8b da	 mov	 rbx, rdx
  00010	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GI@BOFGDJIC@sys?4getcheckinterval?$CI?$CJ?5and?5sys?4s@
  00017	41 b8 01 00 00
	00		 mov	 r8d, 1
  0001d	e8 00 00 00 00	 call	 PyErr_WarnEx
  00022	85 c0		 test	 eax, eax
  00024	79 08		 jns	 SHORT $LN2@sys_setche
$LN9@sys_setche:

; 500  :         return NULL;

  00026	33 c0		 xor	 eax, eax

; 505  : }

  00028	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0002c	5b		 pop	 rbx
  0002d	c3		 ret	 0
$LN2@sys_setche:

; 501  :     if (!PyArg_ParseTuple(args, "i:setcheckinterval", &_check_interval))

  0002e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_check_interval
  00035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@MFGGPLOM@i?3setcheckinterval?$AA@
  0003c	48 8b cb	 mov	 rcx, rbx
  0003f	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00044	85 c0		 test	 eax, eax

; 502  :         return NULL;

  00046	74 de		 je	 SHORT $LN9@sys_setche

; 503  :     Py_INCREF(Py_None);

  00048	e8 00 00 00 00	 call	 _Py_PXCTX
  0004d	85 c0		 test	 eax, eax
  0004f	75 3c		 jne	 SHORT $LN6@sys_setche
  00051	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00066	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0006c	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00074	e8 00 00 00 00	 call	 _PyParallel_Guard
  00079	85 c0		 test	 eax, eax
  0007b	75 09		 jne	 SHORT $LN5@sys_setche
  0007d	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00084	74 07		 je	 SHORT $LN6@sys_setche
$LN5@sys_setche:
  00086	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN6@sys_setche:

; 504  :     return Py_None;

  0008d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 505  : }

  00094	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00098	5b		 pop	 rbx
  00099	c3		 ret	 0
sys_setcheckinterval ENDP
_TEXT	ENDS
PUBLIC	??_C@_0GI@MPPANGFG@sys?4getcheckinterval?$CI?$CJ?5and?5sys?4s@ ; `string'
EXTRN	PyLong_FromLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_getcheckinterval DD imagerel sys_getcheckinterval
	DD	imagerel sys_getcheckinterval+55
	DD	imagerel $unwind$sys_getcheckinterval
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_getcheckinterval DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0GI@MPPANGFG@sys?4getcheckinterval?$CI?$CJ?5and?5sys?4s@
CONST	SEGMENT
??_C@_0GI@MPPANGFG@sys?4getcheckinterval?$CI?$CJ?5and?5sys?4s@ DB 'sys.ge'
	DB	'tcheckinterval() and sys.setcheckinterval() are deprecated.  '
	DB	'Use sys.getswitchinterval() instead.', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT sys_getcheckinterval
_TEXT	SEGMENT
self$ = 48
args$ = 56
sys_getcheckinterval PROC				; COMDAT

; 516  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 517  :     if (PyErr_WarnEx(PyExc_DeprecationWarning,
; 518  :                      "sys.getcheckinterval() and sys.setcheckinterval() "
; 519  :                      "are deprecated.  Use sys.getswitchinterval() "
; 520  :                      "instead.", 1) < 0)

  00004	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_DeprecationWarning
  0000b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GI@MPPANGFG@sys?4getcheckinterval?$CI?$CJ?5and?5sys?4s@
  00012	41 b8 01 00 00
	00		 mov	 r8d, 1
  00018	e8 00 00 00 00	 call	 PyErr_WarnEx
  0001d	85 c0		 test	 eax, eax
  0001f	79 07		 jns	 SHORT $LN1@sys_getche

; 521  :         return NULL;

  00021	33 c0		 xor	 eax, eax

; 523  : }

  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	c3		 ret	 0
$LN1@sys_getche:

; 522  :     return PyLong_FromLong(_check_interval);

  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _check_interval

; 523  : }

  0002e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00032	e9 00 00 00 00	 jmp	 PyLong_FromLong
sys_getcheckinterval ENDP
_TEXT	ENDS
PUBLIC	__real@412e848000000000
PUBLIC	??_C@_0CK@MNGLHIP@switch?5interval?5must?5be?5strictly@ ; `string'
PUBLIC	??_C@_0BE@HDOJHFEO@d?3setswitchinterval?$AA@	; `string'
EXTRN	_PyEval_SetSwitchInterval:PROC
EXTRN	PyExc_ValueError:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$sys_setswitchinterval DD imagerel sys_setswitchinterval
	DD	imagerel sys_setswitchinterval+169
	DD	imagerel $unwind$sys_setswitchinterval
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_setswitchinterval DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT __real@412e848000000000
CONST	SEGMENT
__real@412e848000000000 DQ 0412e848000000000r	; 1e+006
CONST	ENDS
;	COMDAT ??_C@_0CK@MNGLHIP@switch?5interval?5must?5be?5strictly@
CONST	SEGMENT
??_C@_0CK@MNGLHIP@switch?5interval?5must?5be?5strictly@ DB 'switch interv'
	DB	'al must be strictly positive', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HDOJHFEO@d?3setswitchinterval?$AA@
CONST	SEGMENT
??_C@_0BE@HDOJHFEO@d?3setswitchinterval?$AA@ DB 'd:setswitchinterval', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\sysmodule.c
CONST	ENDS
;	COMDAT sys_setswitchinterval
_TEXT	SEGMENT
self$ = 64
args$ = 72
d$ = 80
sys_setswitchinterval PROC				; COMDAT

; 532  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 533  :     double d;
; 534  :     if (!PyArg_ParseTuple(args, "d:setswitchinterval", &d))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 44 24 50	 lea	 r8, QWORD PTR d$[rsp]
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HDOJHFEO@d?3setswitchinterval?$AA@
  00013	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00018	85 c0		 test	 eax, eax

; 535  :         return NULL;

  0001a	74 23		 je	 SHORT $LN9@sys_setswi

; 536  :     if (d <= 0.0) {

  0001c	66 0f 57 c0	 xorpd	 xmm0, xmm0
  00020	f2 0f 10 4c 24
	50		 movsdx	 xmm1, QWORD PTR d$[rsp]
  00026	66 0f 2f c1	 comisd	 xmm0, xmm1
  0002a	72 1a		 jb	 SHORT $LN1@sys_setswi

; 537  :         PyErr_SetString(PyExc_ValueError,
; 538  :                         "switch interval must be strictly positive");

  0002c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@MNGLHIP@switch?5interval?5must?5be?5strictly@
  0003a	e8 00 00 00 00	 call	 PyErr_SetString
$LN9@sys_setswi:

; 539  :         return NULL;

  0003f	33 c0		 xor	 eax, eax

; 544  : }

  00041	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00045	c3		 ret	 0
$LN1@sys_setswi:

; 540  :     }
; 541  :     _PyEval_SetSwitchInterval((unsigned long) (1e6 * d));

  00046	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@412e848000000000
  0004e	f2 48 0f 2c c9	 cvttsd2si rcx, xmm1
  00053	e8 00 00 00 00	 call	 _PyEval_SetSwitchInterval

; 542  :     Py_INCREF(Py_None);

  00058	e8 00 00 00 00	 call	 _Py_PXCTX
  0005d	85 c0		 test	 eax, eax
  0005f	75 3c		 jne	 SHORT $LN6@sys_setswi
  00061	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00068	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00076	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0007c	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00084	e8 00 00 00 00	 call	 _PyParallel_Guard
  00089	85 c0		 test	 eax, eax
  0008b	75 09		 jne	 SHORT $LN5@sys_setswi
  0008d	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00094	74 07		 je	 SHORT $LN6@sys_setswi
$LN5@sys_setswi:
  00096	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN6@sys_setswi:

; 543  :     return Py_None;

  0009d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 544  : }

  000a4	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a8	c3		 ret	 0
sys_setswitchinterval ENDP
_TEXT	ENDS
PUBLIC	__real@3eb0c6f7a0b5ed8d
EXTRN	PyFloat_FromDouble:PROC
EXTRN	_PyEval_GetSwitchInterval:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_getswitchinterval DD imagerel sys_getswitchinterval
	DD	imagerel sys_getswitchinterval+38
	DD	imagerel $unwind$sys_getswitchinterval
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_getswitchinterval DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT __real@3eb0c6f7a0b5ed8d
CONST	SEGMENT
__real@3eb0c6f7a0b5ed8d DQ 03eb0c6f7a0b5ed8dr	; 1e-006
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT sys_getswitchinterval
_TEXT	SEGMENT
self$ = 48
args$ = 56
sys_getswitchinterval PROC				; COMDAT

; 560  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 561  :     return PyFloat_FromDouble(1e-6 * _PyEval_GetSwitchInterval());

  00004	e8 00 00 00 00	 call	 _PyEval_GetSwitchInterval
  00009	44 8b d8	 mov	 r11d, eax
  0000c	66 0f ef c0	 pxor	 xmm0, xmm0
  00010	f2 49 0f 2a c3	 cvtsi2sd xmm0, r11
  00015	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3eb0c6f7a0b5ed8d

; 562  : }

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	e9 00 00 00 00	 jmp	 PyFloat_FromDouble
sys_getswitchinterval ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@HHNMPKGC@recursion?5limit?5must?5be?5positive@ ; `string'
PUBLIC	??_C@_0BE@NOHIDGKN@i?3setrecursionlimit?$AA@	; `string'
EXTRN	Py_SetRecursionLimit:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$sys_setrecursionlimit DD imagerel sys_setrecursionlimit
	DD	imagerel sys_setrecursionlimit+148
	DD	imagerel $unwind$sys_setrecursionlimit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_setrecursionlimit DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0CB@HHNMPKGC@recursion?5limit?5must?5be?5positive@
CONST	SEGMENT
??_C@_0CB@HHNMPKGC@recursion?5limit?5must?5be?5positive@ DB 'recursion li'
	DB	'mit must be positive', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NOHIDGKN@i?3setrecursionlimit?$AA@
CONST	SEGMENT
??_C@_0BE@NOHIDGKN@i?3setrecursionlimit?$AA@ DB 'i:setrecursionlimit', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\sysmodule.c
CONST	ENDS
;	COMDAT sys_setrecursionlimit
_TEXT	SEGMENT
self$ = 64
args$ = 72
new_limit$ = 80
sys_setrecursionlimit PROC				; COMDAT

; 599  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 600  :     int new_limit;
; 601  :     if (!PyArg_ParseTuple(args, "i:setrecursionlimit", &new_limit))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 44 24 50	 lea	 r8, QWORD PTR new_limit$[rsp]
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@NOHIDGKN@i?3setrecursionlimit?$AA@
  00013	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00018	85 c0		 test	 eax, eax

; 602  :         return NULL;

  0001a	74 1b		 je	 SHORT $LN9@sys_setrec

; 603  :     if (new_limit <= 0) {

  0001c	8b 4c 24 50	 mov	 ecx, DWORD PTR new_limit$[rsp]
  00020	85 c9		 test	 ecx, ecx
  00022	7f 1a		 jg	 SHORT $LN1@sys_setrec

; 604  :         PyErr_SetString(PyExc_ValueError,
; 605  :                         "recursion limit must be positive");

  00024	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@HHNMPKGC@recursion?5limit?5must?5be?5positive@
  00032	e8 00 00 00 00	 call	 PyErr_SetString
$LN9@sys_setrec:

; 606  :         return NULL;

  00037	33 c0		 xor	 eax, eax

; 611  : }

  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN1@sys_setrec:

; 607  :     }
; 608  :     Py_SetRecursionLimit(new_limit);

  0003e	e8 00 00 00 00	 call	 Py_SetRecursionLimit

; 609  :     Py_INCREF(Py_None);

  00043	e8 00 00 00 00	 call	 _Py_PXCTX
  00048	85 c0		 test	 eax, eax
  0004a	75 3c		 jne	 SHORT $LN6@sys_setrec
  0004c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00053	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0005a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00061	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00067	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0006f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00074	85 c0		 test	 eax, eax
  00076	75 09		 jne	 SHORT $LN5@sys_setrec
  00078	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0007f	74 07		 je	 SHORT $LN6@sys_setrec
$LN5@sys_setrec:
  00081	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN6@sys_setrec:

; 610  :     return Py_None;

  00088	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 611  : }

  0008f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00093	c3		 ret	 0
sys_setrecursionlimit ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@BHBAPDLD@get_hash_info?$AA@		; `string'
EXTRN	PyErr_Occurred:PROC
EXTRN	PyLong_FromSsize_t:PROC
EXTRN	PyStructSequence_New:PROC
_BSS	SEGMENT
Hash_InfoType DB 01e0H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_hash_info DD imagerel get_hash_info
	DD	imagerel get_hash_info+186
	DD	imagerel $unwind$get_hash_info
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_hash_info DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0O@BHBAPDLD@get_hash_info?$AA@
CONST	SEGMENT
??_C@_0O@BHBAPDLD@get_hash_info?$AA@ DB 'get_hash_info', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT get_hash_info
_TEXT	SEGMENT
get_hash_info PROC					; COMDAT

; 640  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 641  :     PyObject *hash_info;
; 642  :     int field = 0;
; 643  :     hash_info = PyStructSequence_New(&Hash_InfoType);

  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:Hash_InfoType
  0000d	e8 00 00 00 00	 call	 PyStructSequence_New
  00012	48 8b d8	 mov	 rbx, rax

; 644  :     if (hash_info == NULL)

  00015	48 85 c0	 test	 rax, rax

; 645  :         return NULL;

  00018	0f 84 8b 00 00
	00		 je	 $LN3@get_hash_i

; 646  :     PyStructSequence_SET_ITEM(hash_info, field++,
; 647  :                               PyLong_FromLong(8*sizeof(Py_hash_t)));

  0001e	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00023	e8 00 00 00 00	 call	 PyLong_FromLong

; 648  :     PyStructSequence_SET_ITEM(hash_info, field++,
; 649  :                               PyLong_FromSsize_t(_PyHASH_MODULUS));

  00028	48 b9 ff ff ff
	ff ff ff ff 1f	 mov	 rcx, 2305843009213693951 ; 1fffffffffffffffH
  00032	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax
  00036	e8 00 00 00 00	 call	 PyLong_FromSsize_t

; 650  :     PyStructSequence_SET_ITEM(hash_info, field++,
; 651  :                               PyLong_FromLong(_PyHASH_INF));

  0003b	b9 2f cb 04 00	 mov	 ecx, 314159		; 0004cb2fH
  00040	48 89 43 78	 mov	 QWORD PTR [rbx+120], rax
  00044	e8 00 00 00 00	 call	 PyLong_FromLong

; 652  :     PyStructSequence_SET_ITEM(hash_info, field++,
; 653  :                               PyLong_FromLong(_PyHASH_NAN));

  00049	33 c9		 xor	 ecx, ecx
  0004b	48 89 83 80 00
	00 00		 mov	 QWORD PTR [rbx+128], rax
  00052	e8 00 00 00 00	 call	 PyLong_FromLong

; 654  :     PyStructSequence_SET_ITEM(hash_info, field++,
; 655  :                               PyLong_FromLong(_PyHASH_IMAG));

  00057	b9 43 42 0f 00	 mov	 ecx, 1000003		; 000f4243H
  0005c	48 89 83 88 00
	00 00		 mov	 QWORD PTR [rbx+136], rax
  00063	e8 00 00 00 00	 call	 PyLong_FromLong
  00068	48 89 83 90 00
	00 00		 mov	 QWORD PTR [rbx+144], rax

; 656  :     if (PyErr_Occurred()) {

  0006f	e8 00 00 00 00	 call	 PyErr_Occurred
  00074	48 85 c0	 test	 rax, rax
  00077	74 38		 je	 SHORT $LN5@get_hash_i

; 657  :         Py_CLEAR(hash_info);

  00079	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@MBPGCCDI@?4?4?2Python?2sysmodule?4c?$AA@
  00080	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@BHBAPDLD@get_hash_info?$AA@
  00087	4c 8b cb	 mov	 r9, rbx
  0008a	41 b8 91 02 00
	00		 mov	 r8d, 657		; 00000291H
  00090	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00098	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009d	85 c0		 test	 eax, eax
  0009f	75 08		 jne	 SHORT $LN3@get_hash_i
  000a1	48 8b cb	 mov	 rcx, rbx
  000a4	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@get_hash_i:

; 658  :         return NULL;

  000a9	33 c0		 xor	 eax, eax

; 661  : }

  000ab	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000af	5b		 pop	 rbx
  000b0	c3		 ret	 0
$LN5@get_hash_i:

; 659  :     }
; 660  :     return hash_info;

  000b1	48 8b c3	 mov	 rax, rbx

; 661  : }

  000b4	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b8	5b		 pop	 rbx
  000b9	c3		 ret	 0
get_hash_info ENDP
_TEXT	ENDS
EXTRN	Py_GetRecursionLimit:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_getrecursionlimit DD imagerel sys_getrecursionlimit
	DD	imagerel sys_getrecursionlimit+20
	DD	imagerel $unwind$sys_getrecursionlimit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_getrecursionlimit DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT sys_getrecursionlimit
_TEXT	SEGMENT
self$ = 48
sys_getrecursionlimit PROC				; COMDAT

; 675  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 676  :     return PyLong_FromLong(Py_GetRecursionLimit());

  00004	e8 00 00 00 00	 call	 Py_GetRecursionLimit
  00009	8b c8		 mov	 ecx, eax

; 677  : }

  0000b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0000f	e9 00 00 00 00	 jmp	 PyLong_FromLong
sys_getrecursionlimit ENDP
_TEXT	ENDS
EXTRN	PyErr_SetFromWindowsErr:PROC
EXTRN	__imp_GetVersionExA:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_getwindowsversion DD imagerel sys_getwindowsversion
	DD	imagerel sys_getwindowsversion+52
	DD	imagerel $unwind$sys_getwindowsversion
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$sys_getwindowsversion DD imagerel sys_getwindowsversion+52
	DD	imagerel sys_getwindowsversion+268
	DD	imagerel $chain$0$sys_getwindowsversion
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$sys_getwindowsversion DD imagerel sys_getwindowsversion+268
	DD	imagerel sys_getwindowsversion+287
	DD	imagerel $chain$2$sys_getwindowsversion
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$sys_getwindowsversion DD 020021H
	DD	0183400H
	DD	imagerel sys_getwindowsversion
	DD	imagerel sys_getwindowsversion+52
	DD	imagerel $unwind$sys_getwindowsversion
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$sys_getwindowsversion DD 020821H
	DD	0183408H
	DD	imagerel sys_getwindowsversion
	DD	imagerel sys_getwindowsversion+52
	DD	imagerel $unwind$sys_getwindowsversion
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_getwindowsversion DD 020701H
	DD	0190107H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT sys_getwindowsversion
_TEXT	SEGMENT
ver$ = 32
self$ = 208
sys_getwindowsversion PROC				; COMDAT

; 727  : {

  00000	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 728  :     PyObject *version;
; 729  :     int pos = 0;
; 730  :     OSVERSIONINFOEX ver;
; 731  :     ver.dwOSVersionInfoSize = sizeof(ver);
; 732  :     if (!GetVersionEx((OSVERSIONINFO*) &ver))

  00007	48 8d 4c 24 20	 lea	 rcx, QWORD PTR ver$[rsp]
  0000c	c7 44 24 20 9c
	00 00 00	 mov	 DWORD PTR ver$[rsp], 156 ; 0000009cH
  00014	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetVersionExA
  0001a	85 c0		 test	 eax, eax
  0001c	75 0f		 jne	 SHORT $LN3@sys_getwin

; 733  :         return PyErr_SetFromWindowsErr(0);

  0001e	33 c9		 xor	 ecx, ecx
  00020	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 754  : }

  00025	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  0002c	c3		 ret	 0
$LN3@sys_getwin:

; 734  : 
; 735  :     version = PyStructSequence_New(&WindowsVersionType);

  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:WindowsVersionType
  00034	48 89 9c 24 c0
	00 00 00	 mov	 QWORD PTR [rsp+192], rbx
  0003c	e8 00 00 00 00	 call	 PyStructSequence_New
  00041	48 8b d8	 mov	 rbx, rax

; 736  :     if (version == NULL)

  00044	48 85 c0	 test	 rax, rax

; 737  :         return NULL;

  00047	0f 84 ad 00 00
	00		 je	 $LN7@sys_getwin

; 738  : 
; 739  :     PyStructSequence_SET_ITEM(version, pos++, PyLong_FromLong(ver.dwMajorVersion));

  0004d	8b 4c 24 24	 mov	 ecx, DWORD PTR ver$[rsp+4]
  00051	e8 00 00 00 00	 call	 PyLong_FromLong
  00056	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax

; 740  :     PyStructSequence_SET_ITEM(version, pos++, PyLong_FromLong(ver.dwMinorVersion));

  0005a	8b 4c 24 28	 mov	 ecx, DWORD PTR ver$[rsp+8]
  0005e	e8 00 00 00 00	 call	 PyLong_FromLong
  00063	48 89 43 78	 mov	 QWORD PTR [rbx+120], rax

; 741  :     PyStructSequence_SET_ITEM(version, pos++, PyLong_FromLong(ver.dwBuildNumber));

  00067	8b 4c 24 2c	 mov	 ecx, DWORD PTR ver$[rsp+12]
  0006b	e8 00 00 00 00	 call	 PyLong_FromLong
  00070	48 89 83 80 00
	00 00		 mov	 QWORD PTR [rbx+128], rax

; 742  :     PyStructSequence_SET_ITEM(version, pos++, PyLong_FromLong(ver.dwPlatformId));

  00077	8b 4c 24 30	 mov	 ecx, DWORD PTR ver$[rsp+16]
  0007b	e8 00 00 00 00	 call	 PyLong_FromLong

; 743  :     PyStructSequence_SET_ITEM(version, pos++, PyUnicode_FromString(ver.szCSDVersion));

  00080	48 8d 4c 24 34	 lea	 rcx, QWORD PTR ver$[rsp+20]
  00085	48 89 83 88 00
	00 00		 mov	 QWORD PTR [rbx+136], rax
  0008c	e8 00 00 00 00	 call	 PyUnicode_FromString
  00091	48 89 83 90 00
	00 00		 mov	 QWORD PTR [rbx+144], rax

; 744  :     PyStructSequence_SET_ITEM(version, pos++, PyLong_FromLong(ver.wServicePackMajor));

  00098	0f b7 8c 24 b4
	00 00 00	 movzx	 ecx, WORD PTR ver$[rsp+148]
  000a0	e8 00 00 00 00	 call	 PyLong_FromLong
  000a5	48 89 83 98 00
	00 00		 mov	 QWORD PTR [rbx+152], rax

; 745  :     PyStructSequence_SET_ITEM(version, pos++, PyLong_FromLong(ver.wServicePackMinor));

  000ac	0f b7 8c 24 b6
	00 00 00	 movzx	 ecx, WORD PTR ver$[rsp+150]
  000b4	e8 00 00 00 00	 call	 PyLong_FromLong
  000b9	48 89 83 a0 00
	00 00		 mov	 QWORD PTR [rbx+160], rax

; 746  :     PyStructSequence_SET_ITEM(version, pos++, PyLong_FromLong(ver.wSuiteMask));

  000c0	0f b7 8c 24 b8
	00 00 00	 movzx	 ecx, WORD PTR ver$[rsp+152]
  000c8	e8 00 00 00 00	 call	 PyLong_FromLong
  000cd	48 89 83 a8 00
	00 00		 mov	 QWORD PTR [rbx+168], rax

; 747  :     PyStructSequence_SET_ITEM(version, pos++, PyLong_FromLong(ver.wProductType));

  000d4	0f b6 8c 24 ba
	00 00 00	 movzx	 ecx, BYTE PTR ver$[rsp+154]
  000dc	e8 00 00 00 00	 call	 PyLong_FromLong
  000e1	48 89 83 b0 00
	00 00		 mov	 QWORD PTR [rbx+176], rax

; 748  : 
; 749  :     if (PyErr_Occurred()) {

  000e8	e8 00 00 00 00	 call	 PyErr_Occurred
  000ed	48 85 c0	 test	 rax, rax
  000f0	74 1a		 je	 SHORT $LN1@sys_getwin

; 750  :         Py_DECREF(version);

  000f2	48 8b cb	 mov	 rcx, rbx
  000f5	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@sys_getwin:

; 751  :         return NULL;

  000fa	33 c0		 xor	 eax, eax
  000fc	48 8b 9c 24 c0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+192]

; 754  : }

  00104	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  0010b	c3		 ret	 0
$LN1@sys_getwin:

; 752  :     }
; 753  :     return version;

  0010c	48 8b c3	 mov	 rax, rbx
  0010f	48 8b 9c 24 c0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+192]

; 754  : }

  00117	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  0011e	c3		 ret	 0
sys_getwindowsversion ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@NKBHDOD@sys_getsizeof?$AA@		; `string'
PUBLIC	??_C@_0CG@GBLMBCEI@Type?5?$CF?4100s?5doesn?8t?5define?5__siz@ ; `string'
PUBLIC	??_C@_0O@KBANFEJG@O?$HMO?3getsizeof?$AA@	; `string'
EXTRN	PyNumber_Add:PROC
EXTRN	PyObject_CallFunctionObjArgs:PROC
EXTRN	_PyObject_LookupSpecial:PROC
EXTRN	PyType_Ready:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_getsizeof DD imagerel sys_getsizeof
	DD	imagerel sys_getsizeof+154
	DD	imagerel $unwind$sys_getsizeof
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$sys_getsizeof DD imagerel sys_getsizeof+154
	DD	imagerel sys_getsizeof+306
	DD	imagerel $chain$1$sys_getsizeof
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$sys_getsizeof DD imagerel sys_getsizeof+306
	DD	imagerel sys_getsizeof+323
	DD	imagerel $chain$3$sys_getsizeof
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$sys_getsizeof DD imagerel sys_getsizeof+323
	DD	imagerel sys_getsizeof+462
	DD	imagerel $chain$5$sys_getsizeof
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$sys_getsizeof DD 040021H
	DD	087400H
	DD	0a3400H
	DD	imagerel sys_getsizeof
	DD	imagerel sys_getsizeof+154
	DD	imagerel $unwind$sys_getsizeof
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$sys_getsizeof DD 040021H
	DD	087400H
	DD	0a3400H
	DD	imagerel sys_getsizeof
	DD	imagerel sys_getsizeof+154
	DD	imagerel $unwind$sys_getsizeof
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$sys_getsizeof DD 040a21H
	DD	08740aH
	DD	0a3405H
	DD	imagerel sys_getsizeof
	DD	imagerel sys_getsizeof+154
	DD	imagerel $unwind$sys_getsizeof
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_getsizeof DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_0O@NKBHDOD@sys_getsizeof?$AA@
CONST	SEGMENT
??_C@_0O@NKBHDOD@sys_getsizeof?$AA@ DB 'sys_getsizeof', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@GBLMBCEI@Type?5?$CF?4100s?5doesn?8t?5define?5__siz@
CONST	SEGMENT
??_C@_0CG@GBLMBCEI@Type?5?$CF?4100s?5doesn?8t?5define?5__siz@ DB 'Type %.'
	DB	'100s doesn''t define __sizeof__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KBANFEJG@O?$HMO?3getsizeof?$AA@
CONST	SEGMENT
??_C@_0O@KBANFEJG@O?$HMO?3getsizeof?$AA@ DB 'O|O:getsizeof', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT sys_getsizeof
_TEXT	SEGMENT
o$ = 48
dflt$ = 56
self$ = 80
args$ = 88
kwds$ = 96
tv153 = 104
sys_getsizeof PROC					; COMDAT

; 818  : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00004	49 8b c0	 mov	 rax, r8
  00007	4c 8b d2	 mov	 r10, rdx

; 819  :     PyObject *res = NULL;
; 820  :     static PyObject *gc_head_size = NULL;
; 821  :     static char *kwlist[] = {"object", "default", 0};
; 822  :     PyObject *o, *dflt = NULL;
; 823  :     PyObject *method;
; 824  :     _Py_IDENTIFIER(__sizeof__);
; 825  : 
; 826  :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|O:getsizeof",
; 827  :                                      kwlist, &o, &dflt))

  0000a	48 8d 4c 24 38	 lea	 rcx, QWORD PTR dflt$[rsp]
  0000f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00014	48 8d 4c 24 30	 lea	 rcx, QWORD PTR o$[rsp]
  00019	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??sys_getsizeof@@9@9
  00020	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00025	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@KBANFEJG@O?$HMO?3getsizeof?$AA@
  0002c	48 8b d0	 mov	 rdx, rax
  0002f	49 8b ca	 mov	 rcx, r10
  00032	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR dflt$[rsp], 0
  0003b	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00040	85 c0		 test	 eax, eax
  00042	75 07		 jne	 SHORT $LN11@sys_getsiz
$LN26@sys_getsiz:

; 828  :         return NULL;

  00044	33 c0		 xor	 eax, eax

; 871  : }

  00046	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0004a	c3		 ret	 0
$LN11@sys_getsiz:

; 829  : 
; 830  :     /* Initialize static variable for GC head size */
; 831  :     if (gc_head_size == NULL) {

  0004b	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?gc_head_size@?1??sys_getsizeof@@9@9, 0
  00053	75 16		 jne	 SHORT $LN9@sys_getsiz

; 832  :         gc_head_size = PyLong_FromSsize_t(sizeof(PyGC_Head));

  00055	b9 18 00 00 00	 mov	 ecx, 24
  0005a	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  0005f	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?gc_head_size@?1??sys_getsizeof@@9@9, rax

; 833  :         if (gc_head_size == NULL)

  00066	48 85 c0	 test	 rax, rax

; 834  :             return NULL;

  00069	74 d9		 je	 SHORT $LN26@sys_getsiz
$LN9@sys_getsiz:

; 835  :     }
; 836  : 
; 837  :     /* Make sure the type is initialized. float gets initialized late */
; 838  :     if (PyType_Ready(Py_TYPE(o)) < 0)

  0006b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR o$[rsp]
  00070	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  00074	e8 00 00 00 00	 call	 PyType_Ready
  00079	85 c0		 test	 eax, eax

; 839  :         return NULL;

  0007b	78 c7		 js	 SHORT $LN26@sys_getsiz

; 840  : 
; 841  :     method = _PyObject_LookupSpecial(o, &PyId___sizeof__);

  0007d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00083	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0008c	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId___sizeof__@?1??sys_getsizeof@@9@9
  00091	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  00095	48 8b 4c 24 30	 mov	 rcx, QWORD PTR o$[rsp]
  0009a	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  0009f	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  000a4	e8 00 00 00 00	 call	 _PyObject_LookupSpecial
  000a9	48 8b d8	 mov	 rbx, rax

; 842  :     if (method == NULL) {

  000ac	48 85 c0	 test	 rax, rax
  000af	75 2c		 jne	 SHORT $LN7@sys_getsiz

; 843  :         if (!PyErr_Occurred())

  000b1	e8 00 00 00 00	 call	 PyErr_Occurred
  000b6	48 85 c0	 test	 rax, rax
  000b9	75 3c		 jne	 SHORT $LN21@sys_getsiz

; 844  :             PyErr_Format(PyExc_TypeError,
; 845  :                          "Type %.100s doesn't define __sizeof__",
; 846  :                          Py_TYPE(o)->tp_name);

  000bb	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  000c0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@GBLMBCEI@Type?5?$CF?4100s?5doesn?8t?5define?5__siz@
  000ce	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  000d2	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  000d6	e8 00 00 00 00	 call	 PyErr_Format

; 847  :     }
; 848  :     else {

  000db	eb 1a		 jmp	 SHORT $LN21@sys_getsiz
$LN7@sys_getsiz:

; 849  :         res = PyObject_CallFunctionObjArgs(method, NULL);

  000dd	33 d2		 xor	 edx, edx
  000df	48 8b c8	 mov	 rcx, rax
  000e2	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs

; 850  :         Py_DECREF(method);

  000e7	48 8b cb	 mov	 rcx, rbx
  000ea	48 8b f8	 mov	 rdi, rax
  000ed	e8 00 00 00 00	 call	 _Py_DecRef

; 851  :     }
; 852  : 
; 853  :     /* Has a default value been given */
; 854  :     if ((res == NULL) && (dflt != NULL) &&
; 855  :         PyErr_ExceptionMatches(PyExc_TypeError))

  000f2	48 85 ff	 test	 rdi, rdi
  000f5	75 4c		 jne	 SHORT $LN2@sys_getsiz
$LN21@sys_getsiz:
  000f7	48 83 7c 24 38
	00		 cmp	 QWORD PTR dflt$[rsp], 0
  000fd	74 33		 je	 SHORT $LN22@sys_getsiz
  000ff	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00106	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  0010b	85 c0		 test	 eax, eax
  0010d	74 23		 je	 SHORT $LN22@sys_getsiz

; 856  :     {
; 857  :         PyErr_Clear();

  0010f	e8 00 00 00 00	 call	 PyErr_Clear

; 858  :         Py_INCREF(dflt);

  00114	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dflt$[rsp]
  00119	e8 00 00 00 00	 call	 _Py_IncRef

; 859  :         return dflt;

  0011e	48 8b 44 24 38	 mov	 rax, QWORD PTR dflt$[rsp]
  00123	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00128	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 871  : }

  0012d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00131	c3		 ret	 0
$LN22@sys_getsiz:
  00132	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00137	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 860  :     }
; 861  :     else if (res == NULL)
; 862  :         return res;

  0013c	33 c0		 xor	 eax, eax

; 871  : }

  0013e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00142	c3		 ret	 0
$LN2@sys_getsiz:

; 863  : 
; 864  :     /* add gc_head size */
; 865  :     if (PyObject_IS_GC(o)) {

  00143	4c 8b 4c 24 30	 mov	 r9, QWORD PTR o$[rsp]
  00148	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@MBPGCCDI@?4?4?2Python?2sysmodule?4c?$AA@
  0014f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NKBHDOD@sys_getsizeof?$AA@
  00156	41 b8 61 03 00
	00		 mov	 r8d, 865		; 00000361H
  0015c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00164	e8 00 00 00 00	 call	 _PyParallel_Guard
  00169	85 c0		 test	 eax, eax
  0016b	75 4f		 jne	 SHORT $LN1@sys_getsiz
  0016d	e8 00 00 00 00	 call	 _Py_PXCTX
  00172	85 c0		 test	 eax, eax
  00174	75 46		 jne	 SHORT $LN1@sys_getsiz
  00176	48 8b 4c 24 30	 mov	 rcx, QWORD PTR o$[rsp]
  0017b	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0017f	8b 82 00 01 00
	00		 mov	 eax, DWORD PTR [rdx+256]
  00185	c1 e8 0e	 shr	 eax, 14
  00188	83 e0 01	 and	 eax, 1
  0018b	74 2f		 je	 SHORT $LN1@sys_getsiz
  0018d	48 8b 82 a0 01
	00 00		 mov	 rax, QWORD PTR [rdx+416]
  00194	48 85 c0	 test	 rax, rax
  00197	74 06		 je	 SHORT $LN23@sys_getsiz
  00199	ff d0		 call	 rax
  0019b	85 c0		 test	 eax, eax
  0019d	74 1d		 je	 SHORT $LN1@sys_getsiz
$LN23@sys_getsiz:

; 866  :         PyObject *tmp = res;
; 867  :         res = PyNumber_Add(tmp, gc_head_size);

  0019f	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?gc_head_size@?1??sys_getsizeof@@9@9
  001a6	48 8b cf	 mov	 rcx, rdi
  001a9	48 8b df	 mov	 rbx, rdi
  001ac	e8 00 00 00 00	 call	 PyNumber_Add

; 868  :         Py_DECREF(tmp);

  001b1	48 8b cb	 mov	 rcx, rbx
  001b4	48 8b f8	 mov	 rdi, rax
  001b7	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@sys_getsiz:

; 869  :     }
; 870  :     return res;

  001bc	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  001c1	48 8b c7	 mov	 rax, rdi
  001c4	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 871  : }

  001c9	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001cd	c3		 ret	 0
sys_getsizeof ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT sys_getrefcount
_TEXT	SEGMENT
self$ = 8
arg$ = 16
sys_getrefcount PROC					; COMDAT

; 881  :     return PyLong_FromSsize_t(arg->ob_refcnt);

  00000	48 8b 4a 50	 mov	 rcx, QWORD PTR [rdx+80]

; 882  : }

  00004	e9 00 00 00 00	 jmp	 PyLong_FromSsize_t
sys_getrefcount ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@EGKBMAC@call?5stack?5is?5not?5deep?5enough?$AA@ ; `string'
PUBLIC	??_C@_0N@NJGKFKFD@?$HMi?3_getframe?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$sys_getframe DD imagerel sys_getframe
	DD	imagerel sys_getframe+209
	DD	imagerel $unwind$sys_getframe
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_getframe DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0BO@EGKBMAC@call?5stack?5is?5not?5deep?5enough?$AA@
CONST	SEGMENT
??_C@_0BO@EGKBMAC@call?5stack?5is?5not?5deep?5enough?$AA@ DB 'call stack '
	DB	'is not deep enough', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NJGKFKFD@?$HMi?3_getframe?$AA@
CONST	SEGMENT
??_C@_0N@NJGKFKFD@?$HMi?3_getframe?$AA@ DB '|i:_getframe', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\sysmodule.c
CONST	ENDS
;	COMDAT sys_getframe
_TEXT	SEGMENT
self$ = 64
args$ = 72
depth$ = 80
sys_getframe PROC					; COMDAT

; 924  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fa	 mov	 rdi, rdx

; 925  :     PyFrameObject *f = PyThreadState_GET()->frame;

  0000d	e8 00 00 00 00	 call	 _Py_PXCTX
  00012	85 c0		 test	 eax, eax
  00014	74 07		 je	 SHORT $LN7@sys_getfra
  00016	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  0001b	eb 07		 jmp	 SHORT $LN8@sys_getfra
$LN7@sys_getfra:
  0001d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
$LN8@sys_getfra:
  00024	48 8b 58 10	 mov	 rbx, QWORD PTR [rax+16]

; 926  :     int depth = -1;
; 927  : 
; 928  :     if (!PyArg_ParseTuple(args, "|i:_getframe", &depth))

  00028	4c 8d 44 24 50	 lea	 r8, QWORD PTR depth$[rsp]
  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@NJGKFKFD@?$HMi?3_getframe?$AA@
  00034	48 8b cf	 mov	 rcx, rdi
  00037	c7 44 24 50 ff
	ff ff ff	 mov	 DWORD PTR depth$[rsp], -1
  0003f	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00044	85 c0		 test	 eax, eax

; 929  :         return NULL;

  00046	74 33		 je	 SHORT $LN16@sys_getfra

; 930  : 
; 931  :     while (depth > 0 && f != NULL) {

  00048	8b 44 24 50	 mov	 eax, DWORD PTR depth$[rsp]
  0004c	85 c0		 test	 eax, eax
  0004e	7e 13		 jle	 SHORT $LN2@sys_getfra
$LL3@sys_getfra:
  00050	48 85 db	 test	 rbx, rbx
  00053	74 13		 je	 SHORT $LN15@sys_getfra

; 932  :         f = f->f_back;

  00055	48 8b 5b 70	 mov	 rbx, QWORD PTR [rbx+112]

; 933  :         --depth;

  00059	ff c8		 dec	 eax
  0005b	89 44 24 50	 mov	 DWORD PTR depth$[rsp], eax
  0005f	85 c0		 test	 eax, eax
  00061	7f ed		 jg	 SHORT $LL3@sys_getfra
$LN2@sys_getfra:

; 934  :     }
; 935  :     if (f == NULL) {

  00063	48 85 db	 test	 rbx, rbx
  00066	75 20		 jne	 SHORT $LN1@sys_getfra
$LN15@sys_getfra:

; 936  :         PyErr_SetString(PyExc_ValueError,
; 937  :                         "call stack is not deep enough");

  00068	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0006f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@EGKBMAC@call?5stack?5is?5not?5deep?5enough?$AA@
  00076	e8 00 00 00 00	 call	 PyErr_SetString
$LN16@sys_getfra:

; 938  :         return NULL;

  0007b	33 c0		 xor	 eax, eax

; 942  : }

  0007d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00082	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00086	5f		 pop	 rdi
  00087	c3		 ret	 0
$LN1@sys_getfra:

; 939  :     }
; 940  :     Py_INCREF(f);

  00088	e8 00 00 00 00	 call	 _Py_PXCTX
  0008d	85 c0		 test	 eax, eax
  0008f	75 32		 jne	 SHORT $LN10@sys_getfra
  00091	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0009f	4c 8b cb	 mov	 r9, rbx
  000a2	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000a8	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000b0	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b5	85 c0		 test	 eax, eax
  000b7	75 06		 jne	 SHORT $LN9@sys_getfra
  000b9	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000bd	74 04		 je	 SHORT $LN10@sys_getfra
$LN9@sys_getfra:
  000bf	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN10@sys_getfra:

; 941  :     return (PyObject*)f;

  000c3	48 8b c3	 mov	 rax, rbx

; 942  : }

  000c6	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000cb	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000cf	5f		 pop	 rdi
  000d0	c3		 ret	 0
sys_getframe ENDP
_TEXT	ENDS
EXTRN	_PyThread_CurrentFrames:PROC
; Function compile flags: /Ogtpy
;	COMDAT sys_current_frames
_TEXT	SEGMENT
self$ = 8
noargs$ = 16
sys_current_frames PROC					; COMDAT

; 956  :     return _PyThread_CurrentFrames();
; 957  : }

  00000	e9 00 00 00 00	 jmp	 _PyThread_CurrentFrames
sys_current_frames ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@BJKDGGGC@OO?$CB?3call_tracing?$AA@	; `string'
EXTRN	_PyEval_CallTracing:PROC
EXTRN	PyTuple_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_call_tracing DD imagerel sys_call_tracing
	DD	imagerel sys_call_tracing+75
	DD	imagerel $unwind$sys_call_tracing
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_call_tracing DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0BB@BJKDGGGC@OO?$CB?3call_tracing?$AA@
CONST	SEGMENT
??_C@_0BB@BJKDGGGC@OO?$CB?3call_tracing?$AA@ DB 'OO!:call_tracing', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT sys_call_tracing
_TEXT	SEGMENT
self$ = 64
args$ = 72
funcargs$ = 80
func$ = 88
sys_call_tracing PROC					; COMDAT

; 969  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx

; 970  :     PyObject *func, *funcargs;
; 971  :     if (!PyArg_ParseTuple(args, "OO!:call_tracing", &func, &PyTuple_Type, &funcargs))

  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR funcargs$[rsp]
  0000c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:PyTuple_Type
  00013	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00018	4c 8d 44 24 58	 lea	 r8, QWORD PTR func$[rsp]
  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@BJKDGGGC@OO?$CB?3call_tracing?$AA@
  00024	48 8b c8	 mov	 rcx, rax
  00027	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0002c	85 c0		 test	 eax, eax
  0002e	75 07		 jne	 SHORT $LN1@sys_call_t

; 972  :         return NULL;

  00030	33 c0		 xor	 eax, eax

; 974  : }

  00032	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00036	c3		 ret	 0
$LN1@sys_call_t:

; 973  :     return _PyEval_CallTracing(func, funcargs);

  00037	48 8b 54 24 50	 mov	 rdx, QWORD PTR funcargs$[rsp]
  0003c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR func$[rsp]
  00041	e8 00 00 00 00	 call	 _PyEval_CallTracing

; 974  : }

  00046	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004a	c3		 ret	 0
sys_call_tracing ENDP
_TEXT	ENDS
EXTRN	_PyObject_DebugTypeStats:PROC
EXTRN	__imp_fputc:PROC
EXTRN	_PyObject_DebugMallocStats:PROC
EXTRN	__imp___iob_func:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$sys_debugmallocstats DD imagerel sys_debugmallocstats
	DD	imagerel sys_debugmallocstats+151
	DD	imagerel $unwind$sys_debugmallocstats
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_debugmallocstats DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\sysmodule.c
xdata	ENDS
;	COMDAT sys_debugmallocstats
_TEXT	SEGMENT
self$ = 64
args$ = 72
sys_debugmallocstats PROC				; COMDAT

; 1005 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1006 : #ifdef WITH_PYMALLOC
; 1007 :     _PyObject_DebugMallocStats(stderr);

  00006	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0000c	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  00010	e8 00 00 00 00	 call	 _PyObject_DebugMallocStats

; 1008 :     fputc('\n', stderr);

  00015	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0001b	b9 0a 00 00 00	 mov	 ecx, 10
  00020	48 8d 50 60	 lea	 rdx, QWORD PTR [rax+96]
  00024	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fputc

; 1009 : #endif
; 1010 :     _PyObject_DebugTypeStats(stderr);

  0002a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00030	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  00034	e8 00 00 00 00	 call	 _PyObject_DebugTypeStats

; 1011 : 
; 1012 :     Py_RETURN_NONE;

  00039	e8 00 00 00 00	 call	 _Py_PXCTX
  0003e	85 c0		 test	 eax, eax
  00040	75 48		 jne	 SHORT $LN7@sys_debugm
  00042	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  00049	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00050	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00057	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0005d	4c 8b cb	 mov	 r9, rbx
  00060	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00068	e8 00 00 00 00	 call	 _PyParallel_Guard
  0006d	85 c0		 test	 eax, eax
  0006f	75 09		 jne	 SHORT $LN3@sys_debugm
  00071	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00078	74 07		 je	 SHORT $LN9@sys_debugm
$LN3@sys_debugm:
  0007a	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN9@sys_debugm:
  00081	48 8b c3	 mov	 rax, rbx

; 1013 : }

  00084	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00088	5b		 pop	 rbx
  00089	c3		 ret	 0
$LN7@sys_debugm:

; 1011 : 
; 1012 :     Py_RETURN_NONE;

  0008a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1013 : }

  00091	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00095	5b		 pop	 rbx
  00096	c3		 ret	 0
sys_debugmallocstats ENDP
_TEXT	ENDS
EXTRN	PyType_ClearCache:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$sys_clear_type_cache DD imagerel sys_clear_type_cache
	DD	imagerel sys_clear_type_cache+105
	DD	imagerel $unwind$sys_clear_type_cache
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_clear_type_cache DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\sysmodule.c
xdata	ENDS
;	COMDAT sys_clear_type_cache
_TEXT	SEGMENT
self$ = 64
args$ = 72
sys_clear_type_cache PROC				; COMDAT

; 1040 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1041 :     PyType_ClearCache();

  00006	e8 00 00 00 00	 call	 PyType_ClearCache

; 1042 :     Py_RETURN_NONE;

  0000b	e8 00 00 00 00	 call	 _Py_PXCTX
  00010	85 c0		 test	 eax, eax
  00012	75 48		 jne	 SHORT $LN7@sys_clear_
  00014	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00029	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0002f	4c 8b cb	 mov	 r9, rbx
  00032	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0003a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003f	85 c0		 test	 eax, eax
  00041	75 09		 jne	 SHORT $LN3@sys_clear_
  00043	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0004a	74 07		 je	 SHORT $LN9@sys_clear_
$LN3@sys_clear_:
  0004c	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN9@sys_clear_:
  00053	48 8b c3	 mov	 rax, rbx

; 1043 : }

  00056	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005a	5b		 pop	 rbx
  0005b	c3		 ret	 0
$LN7@sys_clear_:

; 1042 :     Py_RETURN_NONE;

  0005c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1043 : }

  00063	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00067	5b		 pop	 rbx
  00068	c3		 ret	 0
sys_clear_type_cache ENDP
_TEXT	ENDS
EXTRN	PyList_AsTuple:PROC
EXTRN	PyList_Sort:PROC
EXTRN	PyList_Append:PROC
EXTRN	PyImport_Inittab:QWORD
EXTRN	PyList_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$list_builtin_module_names DD imagerel list_builtin_module_names
	DD	imagerel list_builtin_module_names+41
	DD	imagerel $unwind$list_builtin_module_names
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$list_builtin_module_names DD imagerel list_builtin_module_names+41
	DD	imagerel list_builtin_module_names+57
	DD	imagerel $chain$1$list_builtin_module_names
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$list_builtin_module_names DD imagerel list_builtin_module_names+57
	DD	imagerel list_builtin_module_names+229
	DD	imagerel $chain$2$list_builtin_module_names
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$list_builtin_module_names DD imagerel list_builtin_module_names+229
	DD	imagerel list_builtin_module_names+249
	DD	imagerel $chain$3$list_builtin_module_names
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$list_builtin_module_names DD imagerel list_builtin_module_names+249
	DD	imagerel list_builtin_module_names+279
	DD	imagerel $chain$4$list_builtin_module_names
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$list_builtin_module_names DD 021H
	DD	imagerel list_builtin_module_names
	DD	imagerel list_builtin_module_names+41
	DD	imagerel $unwind$list_builtin_module_names
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$list_builtin_module_names DD 021H
	DD	imagerel list_builtin_module_names+41
	DD	imagerel list_builtin_module_names+57
	DD	imagerel $chain$1$list_builtin_module_names
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$list_builtin_module_names DD 020521H
	DD	083405H
	DD	imagerel list_builtin_module_names+41
	DD	imagerel list_builtin_module_names+57
	DD	imagerel $chain$1$list_builtin_module_names
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$list_builtin_module_names DD 020521H
	DD	0a6405H
	DD	imagerel list_builtin_module_names
	DD	imagerel list_builtin_module_names+41
	DD	imagerel $unwind$list_builtin_module_names
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$list_builtin_module_names DD 042701H
	DD	095427H
	DD	070025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\sysmodule.c
xdata	ENDS
;	COMDAT list_builtin_module_names
_TEXT	SEGMENT
list_builtin_module_names PROC				; COMDAT

; 1127 : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1128 :     PyObject *list = PyList_New(0);

  00006	33 c9		 xor	 ecx, ecx
  00008	e8 00 00 00 00	 call	 PyList_New
  0000d	48 8b f8	 mov	 rdi, rax

; 1129 :     int i;
; 1130 :     if (list == NULL)

  00010	48 85 c0	 test	 rax, rax
  00013	75 06		 jne	 SHORT $LN7@list_built

; 1150 : }

  00015	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00019	5f		 pop	 rdi
  0001a	c3		 ret	 0
$LN7@list_built:

; 1131 :         return NULL;
; 1132 :     for (i = 0; PyImport_Inittab[i].name != NULL; i++) {

  0001b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyImport_Inittab
  00022	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp
  00027	33 ed		 xor	 ebp, ebp
  00029	48 89 74 24 50	 mov	 QWORD PTR [rsp+80], rsi
  0002e	8b f5		 mov	 esi, ebp
  00030	48 39 29	 cmp	 QWORD PTR [rcx], rbp
  00033	0f 84 ac 00 00
	00		 je	 $LN24@list_built
  00039	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0003e	8b c5		 mov	 eax, ebp
$LL6@list_built:

; 1133 :         PyObject *name = PyUnicode_FromString(
; 1134 :             PyImport_Inittab[i].name);

  00040	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00044	e8 00 00 00 00	 call	 PyUnicode_FromString
  00049	48 8b d8	 mov	 rbx, rax

; 1135 :         if (name == NULL)

  0004c	48 85 c0	 test	 rax, rax
  0004f	0f 84 8b 00 00
	00		 je	 $LN25@list_built

; 1136 :             break;
; 1137 :         PyList_Append(list, name);

  00055	48 8b d0	 mov	 rdx, rax
  00058	48 8b cf	 mov	 rcx, rdi
  0005b	e8 00 00 00 00	 call	 PyList_Append

; 1138 :         Py_DECREF(name);

  00060	e8 00 00 00 00	 call	 _Py_PXCTX
  00065	85 c0		 test	 eax, eax
  00067	75 5c		 jne	 SHORT $LN5@list_built
  00069	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0006d	a8 20		 test	 al, 32			; 00000020H
  0006f	75 4c		 jne	 SHORT $LN14@list_built
  00071	84 c0		 test	 al, al
  00073	78 48		 js	 SHORT $LN14@list_built
  00075	a8 02		 test	 al, 2
  00077	75 4c		 jne	 SHORT $LN5@list_built
  00079	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0007d	75 46		 jne	 SHORT $LN5@list_built
  0007f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00086	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0008d	4c 8b cb	 mov	 r9, rbx
  00090	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00096	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0009e	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a3	48 8b cb	 mov	 rcx, rbx
  000a6	85 c0		 test	 eax, eax
  000a8	74 07		 je	 SHORT $LN19@list_built
  000aa	e8 00 00 00 00	 call	 _Px_Dealloc
  000af	eb 14		 jmp	 SHORT $LN5@list_built
$LN19@list_built:
  000b1	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000b5	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000bb	eb 08		 jmp	 SHORT $LN5@list_built
$LN14@list_built:
  000bd	48 8b cb	 mov	 rcx, rbx
  000c0	e8 00 00 00 00	 call	 Px_DecRef
$LN5@list_built:

; 1131 :         return NULL;
; 1132 :     for (i = 0; PyImport_Inittab[i].name != NULL; i++) {

  000c5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyImport_Inittab
  000cc	48 ff c6	 inc	 rsi
  000cf	48 8b c6	 mov	 rax, rsi
  000d2	48 c1 e0 04	 shl	 rax, 4
  000d6	48 39 2c 08	 cmp	 QWORD PTR [rax+rcx], rbp
  000da	0f 85 60 ff ff
	ff		 jne	 $LL6@list_built
$LN25@list_built:
  000e0	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN24@list_built:

; 1139 :     }
; 1140 :     if (PyList_Sort(list) != 0) {

  000e5	48 8b cf	 mov	 rcx, rdi
  000e8	e8 00 00 00 00	 call	 PyList_Sort
  000ed	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]

; 1141 :         Py_DECREF(list);

  000f2	48 8b cf	 mov	 rcx, rdi
  000f5	85 c0		 test	 eax, eax

; 1142 :         list = NULL;
; 1143 :     }
; 1144 :     if (list) {

  000f7	75 0b		 jne	 SHORT $LN26@list_built

; 1145 :         PyObject *v = PyList_AsTuple(list);

  000f9	e8 00 00 00 00	 call	 PyList_AsTuple

; 1146 :         Py_DECREF(list);

  000fe	48 8b cf	 mov	 rcx, rdi
  00101	48 8b e8	 mov	 rbp, rax
$LN26@list_built:
  00104	e8 00 00 00 00	 call	 _Py_DecRef

; 1147 :         list = v;
; 1148 :     }
; 1149 :     return list;

  00109	48 8b c5	 mov	 rax, rbp
  0010c	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]

; 1150 : }

  00111	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00115	5f		 pop	 rdi
  00116	c3		 ret	 0
list_builtin_module_names ENDP
_TEXT	ENDS
PUBLIC	PySys_ResetWarnOptions
EXTRN	PyList_SetSlice:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySys_ResetWarnOptions DD imagerel $LN5
	DD	imagerel $LN5+51
	DD	imagerel $unwind$PySys_ResetWarnOptions
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySys_ResetWarnOptions DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PySys_ResetWarnOptions
_TEXT	SEGMENT
PySys_ResetWarnOptions PROC				; COMDAT

; 1156 : {

$LN5:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1157 :     if (warnoptions == NULL || !PyList_Check(warnoptions))

  00004	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR warnoptions
  0000b	48 85 c9	 test	 rcx, rcx
  0000e	74 1e		 je	 SHORT $LN1@PySys_Rese
  00010	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00014	f7 80 00 01 00
	00 00 00 00 02	 test	 DWORD PTR [rax+256], 33554432 ; 02000000H
  0001e	74 0e		 je	 SHORT $LN1@PySys_Rese

; 1158 :         return;
; 1159 :     PyList_SetSlice(warnoptions, 0, PyList_GET_SIZE(warnoptions), NULL);

  00020	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]
  00024	45 33 c9	 xor	 r9d, r9d
  00027	33 d2		 xor	 edx, edx
  00029	e8 00 00 00 00	 call	 PyList_SetSlice
$LN1@PySys_Rese:

; 1160 : }

  0002e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00032	c3		 ret	 0
PySys_ResetWarnOptions ENDP
_TEXT	ENDS
PUBLIC	PySys_AddWarnOptionUnicode
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PySys_AddWarnOptionUnicode DD imagerel $LN21
	DD	imagerel $LN21+186
	DD	imagerel $unwind$PySys_AddWarnOptionUnicode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySys_AddWarnOptionUnicode DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\sysmodule.c
xdata	ENDS
;	COMDAT PySys_AddWarnOptionUnicode
_TEXT	SEGMENT
unicode$ = 64
PySys_AddWarnOptionUnicode PROC				; COMDAT

; 1164 : {

$LN21:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1165 :     if (warnoptions == NULL || !PyList_Check(warnoptions)) {

  0000a	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR warnoptions
  00011	48 8b f9	 mov	 rdi, rcx
  00014	48 85 db	 test	 rbx, rbx
  00017	74 75		 je	 SHORT $LN4@PySys_AddW
  00019	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0001d	f7 80 00 01 00
	00 00 00 00 02	 test	 DWORD PTR [rax+256], 33554432 ; 02000000H
  00027	75 7b		 jne	 SHORT $LN1@PySys_AddW

; 1166 :         Py_XDECREF(warnoptions);

  00029	e8 00 00 00 00	 call	 _Py_PXCTX
  0002e	85 c0		 test	 eax, eax
  00030	75 5c		 jne	 SHORT $LN4@PySys_AddW
  00032	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00036	a8 20		 test	 al, 32			; 00000020H
  00038	75 4c		 jne	 SHORT $LN14@PySys_AddW
  0003a	84 c0		 test	 al, al
  0003c	78 48		 js	 SHORT $LN14@PySys_AddW
  0003e	a8 02		 test	 al, 2
  00040	75 4c		 jne	 SHORT $LN4@PySys_AddW
  00042	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00046	75 46		 jne	 SHORT $LN4@PySys_AddW
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00056	4c 8b cb	 mov	 r9, rbx
  00059	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0005f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00067	e8 00 00 00 00	 call	 _PyParallel_Guard
  0006c	48 8b cb	 mov	 rcx, rbx
  0006f	85 c0		 test	 eax, eax
  00071	74 07		 je	 SHORT $LN19@PySys_AddW
  00073	e8 00 00 00 00	 call	 _Px_Dealloc
  00078	eb 14		 jmp	 SHORT $LN4@PySys_AddW
$LN19@PySys_AddW:
  0007a	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0007e	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00084	eb 08		 jmp	 SHORT $LN4@PySys_AddW
$LN14@PySys_AddW:
  00086	48 8b cb	 mov	 rcx, rbx
  00089	e8 00 00 00 00	 call	 Px_DecRef
$LN4@PySys_AddW:

; 1167 :         warnoptions = PyList_New(0);

  0008e	33 c9		 xor	 ecx, ecx
  00090	e8 00 00 00 00	 call	 PyList_New
  00095	48 8b d8	 mov	 rbx, rax
  00098	48 89 05 00 00
	00 00		 mov	 QWORD PTR warnoptions, rax

; 1168 :         if (warnoptions == NULL)

  0009f	48 85 c0	 test	 rax, rax
  000a2	74 0b		 je	 SHORT $LN8@PySys_AddW
$LN1@PySys_AddW:

; 1169 :             return;
; 1170 :     }
; 1171 :     PyList_Append(warnoptions, unicode);

  000a4	48 8b d7	 mov	 rdx, rdi
  000a7	48 8b cb	 mov	 rcx, rbx
  000aa	e8 00 00 00 00	 call	 PyList_Append
$LN8@PySys_AddW:

; 1172 : }

  000af	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000b4	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b8	5f		 pop	 rdi
  000b9	c3		 ret	 0
PySys_AddWarnOptionUnicode ENDP
_TEXT	ENDS
PUBLIC	PySys_AddWarnOption
EXTRN	PyUnicode_FromWideChar:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySys_AddWarnOption DD imagerel $LN4
	DD	imagerel $LN4+45
	DD	imagerel $unwind$PySys_AddWarnOption
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySys_AddWarnOption DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PySys_AddWarnOption
_TEXT	SEGMENT
s$ = 48
PySys_AddWarnOption PROC				; COMDAT

; 1176 : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1177 :     PyObject *unicode;
; 1178 :     unicode = PyUnicode_FromWideChar(s, -1);

  00006	48 83 ca ff	 or	 rdx, -1
  0000a	e8 00 00 00 00	 call	 PyUnicode_FromWideChar
  0000f	48 8b d8	 mov	 rbx, rax

; 1179 :     if (unicode == NULL)

  00012	48 85 c0	 test	 rax, rax
  00015	74 10		 je	 SHORT $LN2@PySys_AddW@2

; 1180 :         return;
; 1181 :     PySys_AddWarnOptionUnicode(unicode);

  00017	48 8b c8	 mov	 rcx, rax
  0001a	e8 00 00 00 00	 call	 PySys_AddWarnOptionUnicode

; 1182 :     Py_DECREF(unicode);

  0001f	48 8b cb	 mov	 rcx, rbx
  00022	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@PySys_AddW@2:

; 1183 : }

  00027	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002b	5b		 pop	 rbx
  0002c	c3		 ret	 0
PySys_AddWarnOption ENDP
_TEXT	ENDS
PUBLIC	PySys_HasWarnOptions
EXTRN	PyList_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySys_HasWarnOptions DD imagerel $LN5
	DD	imagerel $LN5+43
	DD	imagerel $unwind$PySys_HasWarnOptions
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySys_HasWarnOptions DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PySys_HasWarnOptions
_TEXT	SEGMENT
PySys_HasWarnOptions PROC				; COMDAT

; 1187 : {

$LN5:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1188 :     return (warnoptions != NULL && (PyList_Size(warnoptions) > 0)) ? 1 : 0;

  00004	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR warnoptions
  0000b	48 85 c9	 test	 rcx, rcx
  0000e	74 14		 je	 SHORT $LN3@PySys_HasW
  00010	e8 00 00 00 00	 call	 PyList_Size
  00015	48 85 c0	 test	 rax, rax
  00018	7e 0a		 jle	 SHORT $LN3@PySys_HasW
  0001a	b8 01 00 00 00	 mov	 eax, 1

; 1189 : }

  0001f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00023	c3		 ret	 0
$LN3@PySys_HasW:

; 1188 :     return (warnoptions != NULL && (PyList_Size(warnoptions) > 0)) ? 1 : 0;

  00024	33 c0		 xor	 eax, eax

; 1189 : }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
PySys_HasWarnOptions ENDP
_TEXT	ENDS
EXTRN	PyDict_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$get_xoptions DD imagerel get_xoptions
	DD	imagerel get_xoptions+198
	DD	imagerel $unwind$get_xoptions
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_xoptions DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\sysmodule.c
xdata	ENDS
;	COMDAT get_xoptions
_TEXT	SEGMENT
get_xoptions PROC					; COMDAT

; 1195 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1196 :     if (xoptions == NULL || !PyDict_Check(xoptions)) {

  00006	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR xoptions
  0000d	48 85 db	 test	 rbx, rbx
  00010	74 63		 je	 SHORT $LN3@get_xoptio
  00012	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00016	f7 80 00 01 00
	00 00 00 00 20	 test	 DWORD PTR [rax+256], 536870912 ; 20000000H
  00020	0f 85 97 00 00
	00		 jne	 $LN20@get_xoptio

; 1197 :         Py_XDECREF(xoptions);

  00026	e8 00 00 00 00	 call	 _Py_PXCTX
  0002b	85 c0		 test	 eax, eax
  0002d	75 46		 jne	 SHORT $LN3@get_xoptio
  0002f	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00033	a8 20		 test	 al, 32			; 00000020H
  00035	75 6c		 jne	 SHORT $LN13@get_xoptio
  00037	84 c0		 test	 al, al
  00039	78 68		 js	 SHORT $LN13@get_xoptio
  0003b	a8 02		 test	 al, 2
  0003d	75 36		 jne	 SHORT $LN3@get_xoptio
  0003f	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00043	75 30		 jne	 SHORT $LN3@get_xoptio
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00053	4c 8b cb	 mov	 r9, rbx
  00056	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0005c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00064	e8 00 00 00 00	 call	 _PyParallel_Guard
  00069	48 8b cb	 mov	 rcx, rbx
  0006c	85 c0		 test	 eax, eax
  0006e	74 17		 je	 SHORT $LN18@get_xoptio
  00070	e8 00 00 00 00	 call	 _Px_Dealloc
$LN3@get_xoptio:

; 1198 :         xoptions = PyDict_New();

  00075	e8 00 00 00 00	 call	 PyDict_New
  0007a	48 89 05 00 00
	00 00		 mov	 QWORD PTR xoptions, rax

; 1201 : }

  00081	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00085	5b		 pop	 rbx
  00086	c3		 ret	 0

; 1197 :         Py_XDECREF(xoptions);

$LN18@get_xoptio:
  00087	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0008b	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 1198 :         xoptions = PyDict_New();

  00091	e8 00 00 00 00	 call	 PyDict_New
  00096	48 89 05 00 00
	00 00		 mov	 QWORD PTR xoptions, rax

; 1201 : }

  0009d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a1	5b		 pop	 rbx
  000a2	c3		 ret	 0

; 1197 :         Py_XDECREF(xoptions);

$LN13@get_xoptio:
  000a3	48 8b cb	 mov	 rcx, rbx
  000a6	e8 00 00 00 00	 call	 Px_DecRef

; 1198 :         xoptions = PyDict_New();

  000ab	e8 00 00 00 00	 call	 PyDict_New
  000b0	48 89 05 00 00
	00 00		 mov	 QWORD PTR xoptions, rax

; 1201 : }

  000b7	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000bb	5b		 pop	 rbx
  000bc	c3		 ret	 0
$LN20@get_xoptio:

; 1199 :     }
; 1200 :     return xoptions;

  000bd	48 8b c3	 mov	 rax, rbx

; 1201 : }

  000c0	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c4	5b		 pop	 rbx
  000c5	c3		 ret	 0
get_xoptions ENDP
_TEXT	ENDS
PUBLIC	PySys_AddXOption
EXTRN	PyDict_SetItem:PROC
EXTRN	_Py_TrueStruct:BYTE
EXTRN	__imp_wcschr:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PySys_AddXOption DD imagerel $LN44
	DD	imagerel $LN44+43
	DD	imagerel $unwind$PySys_AddXOption
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PySys_AddXOption DD imagerel $LN44+43
	DD	imagerel $LN44+198
	DD	imagerel $chain$0$PySys_AddXOption
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PySys_AddXOption DD imagerel $LN44+198
	DD	imagerel $LN44+495
	DD	imagerel $chain$1$PySys_AddXOption
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PySys_AddXOption DD 021H
	DD	imagerel $LN44
	DD	imagerel $LN44+43
	DD	imagerel $unwind$PySys_AddXOption
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PySys_AddXOption DD 020521H
	DD	085405H
	DD	imagerel $LN44
	DD	imagerel $LN44+43
	DD	imagerel $unwind$PySys_AddXOption
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySys_AddXOption DD 060f01H
	DD	0a640fH
	DD	09340fH
	DD	0700b520fH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\sysmodule.c
xdata	ENDS
;	COMDAT PySys_AddXOption
_TEXT	SEGMENT
s$ = 64
PySys_AddXOption PROC					; COMDAT

; 1205 : {

$LN44:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b d9	 mov	 rbx, rcx

; 1206 :     PyObject *opts;
; 1207 :     PyObject *name = NULL, *value = NULL;
; 1208 :     const wchar_t *name_end;
; 1209 : 
; 1210 :     opts = get_xoptions();

  00012	e8 00 00 00 00	 call	 get_xoptions
  00017	48 8b f0	 mov	 rsi, rax

; 1211 :     if (opts == NULL)

  0001a	48 85 c0	 test	 rax, rax
  0001d	0f 84 ad 01 00
	00		 je	 $LN4@PySys_AddX

; 1212 :         goto error;
; 1213 : 
; 1214 :     name_end = wcschr(s, L'=');

  00023	ba 3d 00 00 00	 mov	 edx, 61			; 0000003dH
  00028	48 8b cb	 mov	 rcx, rbx
  0002b	48 89 6c 24 40	 mov	 QWORD PTR [rsp+64], rbp
  00030	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wcschr

; 1215 :     if (!name_end) {
; 1216 :         name = PyUnicode_FromWideChar(s, -1);

  00036	48 8b cb	 mov	 rcx, rbx
  00039	48 8b e8	 mov	 rbp, rax
  0003c	48 85 c0	 test	 rax, rax
  0003f	75 56		 jne	 SHORT $LN13@PySys_AddX
  00041	48 83 ca ff	 or	 rdx, -1
  00045	e8 00 00 00 00	 call	 PyUnicode_FromWideChar

; 1217 :         value = Py_True;

  0004a	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_TrueStruct
  00051	48 8b f8	 mov	 rdi, rax

; 1218 :         Py_INCREF(value);

  00054	e8 00 00 00 00	 call	 _Py_PXCTX
  00059	85 c0		 test	 eax, eax
  0005b	75 5b		 jne	 SHORT $LN12@PySys_AddX
  0005d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00064	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0006b	4c 8b cb	 mov	 r9, rbx
  0006e	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00074	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0007c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00081	85 c0		 test	 eax, eax
  00083	75 09		 jne	 SHORT $LN17@PySys_AddX
  00085	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_TrueStruct+32, 32 ; 00000020H
  0008c	74 2a		 je	 SHORT $LN12@PySys_AddX
$LN17@PySys_AddX:
  0008e	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_TrueStruct+80

; 1219 :     }
; 1220 :     else {

  00095	eb 21		 jmp	 SHORT $LN12@PySys_AddX
$LN13@PySys_AddX:

; 1221 :         name = PyUnicode_FromWideChar(s, name_end - s);

  00097	48 8b d0	 mov	 rdx, rax
  0009a	48 2b d3	 sub	 rdx, rbx
  0009d	48 d1 fa	 sar	 rdx, 1
  000a0	e8 00 00 00 00	 call	 PyUnicode_FromWideChar

; 1222 :         value = PyUnicode_FromWideChar(name_end + 1, -1);

  000a5	48 8d 4d 02	 lea	 rcx, QWORD PTR [rbp+2]
  000a9	48 83 ca ff	 or	 rdx, -1
  000ad	48 8b f8	 mov	 rdi, rax
  000b0	e8 00 00 00 00	 call	 PyUnicode_FromWideChar
  000b5	48 8b d8	 mov	 rbx, rax
$LN12@PySys_AddX:

; 1223 :     }
; 1224 :     if (name == NULL || value == NULL)

  000b8	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  000bd	48 85 ff	 test	 rdi, rdi
  000c0	0f 84 a0 00 00
	00		 je	 $LN8@PySys_AddX
  000c6	48 85 db	 test	 rbx, rbx
  000c9	74 2d		 je	 SHORT $error$64365

; 1225 :         goto error;
; 1226 :     PyDict_SetItem(opts, name, value);

  000cb	4c 8b c3	 mov	 r8, rbx
  000ce	48 8b d7	 mov	 rdx, rdi
  000d1	48 8b ce	 mov	 rcx, rsi
  000d4	e8 00 00 00 00	 call	 PyDict_SetItem

; 1227 :     Py_DECREF(name);

  000d9	48 8b cf	 mov	 rcx, rdi
  000dc	e8 00 00 00 00	 call	 _Py_DecRef

; 1228 :     Py_DECREF(value);

  000e1	48 8b cb	 mov	 rcx, rbx

; 1237 : }

  000e4	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000e9	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  000ee	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000f2	5f		 pop	 rdi
  000f3	e9 00 00 00 00	 jmp	 _Py_DecRef
$error$64365:

; 1229 :     return;
; 1230 : 
; 1231 : error:
; 1232 :     Py_XDECREF(name);

  000f8	e8 00 00 00 00	 call	 _Py_PXCTX
  000fd	85 c0		 test	 eax, eax
  000ff	0f 85 cb 00 00
	00		 jne	 $LN4@PySys_AddX
  00105	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00109	a8 20		 test	 al, 32			; 00000020H
  0010b	75 54		 jne	 SHORT $LN25@PySys_AddX
  0010d	84 c0		 test	 al, al
  0010f	78 50		 js	 SHORT $LN25@PySys_AddX
  00111	a8 02		 test	 al, 2
  00113	0f 85 b7 00 00
	00		 jne	 $LN4@PySys_AddX
  00119	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  0011d	0f 85 ad 00 00
	00		 jne	 $LN4@PySys_AddX
  00123	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0012a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00131	4c 8b cf	 mov	 r9, rdi
  00134	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0013a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00142	e8 00 00 00 00	 call	 _PyParallel_Guard
  00147	48 8b cf	 mov	 rcx, rdi
  0014a	85 c0		 test	 eax, eax
  0014c	74 07		 je	 SHORT $LN30@PySys_AddX
  0014e	e8 00 00 00 00	 call	 _Px_Dealloc
  00153	eb 7b		 jmp	 SHORT $LN4@PySys_AddX
$LN30@PySys_AddX:
  00155	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00159	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0015f	eb 6f		 jmp	 SHORT $LN4@PySys_AddX
$LN25@PySys_AddX:
  00161	48 8b cf	 mov	 rcx, rdi

; 1233 :     Py_XDECREF(value);

  00164	eb 65		 jmp	 SHORT $LN43@PySys_AddX
$LN8@PySys_AddX:
  00166	48 85 db	 test	 rbx, rbx
  00169	74 65		 je	 SHORT $LN4@PySys_AddX
  0016b	e8 00 00 00 00	 call	 _Py_PXCTX
  00170	85 c0		 test	 eax, eax
  00172	75 5c		 jne	 SHORT $LN4@PySys_AddX
  00174	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00178	a8 20		 test	 al, 32			; 00000020H
  0017a	75 4c		 jne	 SHORT $LN36@PySys_AddX
  0017c	84 c0		 test	 al, al
  0017e	78 48		 js	 SHORT $LN36@PySys_AddX
  00180	a8 02		 test	 al, 2
  00182	75 4c		 jne	 SHORT $LN4@PySys_AddX
  00184	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00188	75 46		 jne	 SHORT $LN4@PySys_AddX
  0018a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00191	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00198	4c 8b cb	 mov	 r9, rbx
  0019b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001a1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001a9	e8 00 00 00 00	 call	 _PyParallel_Guard
  001ae	48 8b cb	 mov	 rcx, rbx
  001b1	85 c0		 test	 eax, eax
  001b3	74 07		 je	 SHORT $LN41@PySys_AddX
  001b5	e8 00 00 00 00	 call	 _Px_Dealloc
  001ba	eb 14		 jmp	 SHORT $LN4@PySys_AddX
$LN41@PySys_AddX:
  001bc	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001c0	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001c6	eb 08		 jmp	 SHORT $LN4@PySys_AddX
$LN36@PySys_AddX:
  001c8	48 8b cb	 mov	 rcx, rbx
$LN43@PySys_AddX:
  001cb	e8 00 00 00 00	 call	 Px_DecRef
$LN4@PySys_AddX:

; 1234 :     /* No return value, therefore clear error state if possible */
; 1235 :     if (_Py_atomic_load_relaxed(&_PyThreadState_Current))

  001d0	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _PyThreadState_Current, 0
  001d8	74 05		 je	 SHORT $LN1@PySys_AddX

; 1236 :         PyErr_Clear();

  001da	e8 00 00 00 00	 call	 PyErr_Clear
$LN1@PySys_AddX:

; 1237 : }

  001df	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  001e4	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  001e9	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001ed	5f		 pop	 rdi
  001ee	c3		 ret	 0
PySys_AddXOption ENDP
_TEXT	ENDS
PUBLIC	PySys_GetXOptions
; Function compile flags: /Ogtpy
;	COMDAT PySys_GetXOptions
_TEXT	SEGMENT
PySys_GetXOptions PROC					; COMDAT

; 1242 :     return get_xoptions();
; 1243 : }

  00000	e9 00 00 00 00	 jmp	 get_xoptions
PySys_GetXOptions ENDP
_TEXT	ENDS
EXTRN	Py_HashRandomizationFlag:DWORD
EXTRN	Py_QuietFlag:DWORD
EXTRN	Py_BytesWarningFlag:DWORD
EXTRN	Py_VerboseFlag:DWORD
EXTRN	Py_IgnoreEnvironmentFlag:DWORD
EXTRN	Py_NoSiteFlag:DWORD
EXTRN	Py_NoUserSiteDirectory:DWORD
EXTRN	Py_DontWriteBytecodeFlag:DWORD
EXTRN	Py_OptimizeFlag:DWORD
EXTRN	Py_InteractiveFlag:DWORD
EXTRN	Py_InspectFlag:DWORD
EXTRN	Py_DebugFlag:DWORD
_BSS	SEGMENT
FlagsType DB	01e0H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$make_flags DD imagerel make_flags
	DD	imagerel make_flags+275
	DD	imagerel $unwind$make_flags
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$make_flags DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT make_flags
_TEXT	SEGMENT
make_flags PROC						; COMDAT

; 1379 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1380 :     int pos = 0;
; 1381 :     PyObject *seq;
; 1382 : 
; 1383 :     seq = PyStructSequence_New(&FlagsType);

  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:FlagsType
  0000d	e8 00 00 00 00	 call	 PyStructSequence_New
  00012	48 8b d8	 mov	 rbx, rax

; 1384 :     if (seq == NULL)

  00015	48 85 c0	 test	 rax, rax

; 1385 :         return NULL;

  00018	0f 84 e4 00 00
	00		 je	 $LN5@make_flags

; 1386 : 
; 1387 : #define SetFlag(flag) \
; 1388 :     PyStructSequence_SET_ITEM(seq, pos++, PyLong_FromLong(flag))
; 1389 : 
; 1390 :     SetFlag(Py_DebugFlag);

  0001e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_DebugFlag
  00024	e8 00 00 00 00	 call	 PyLong_FromLong
  00029	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax

; 1391 :     SetFlag(Py_InspectFlag);

  0002d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_InspectFlag
  00033	e8 00 00 00 00	 call	 PyLong_FromLong
  00038	48 89 43 78	 mov	 QWORD PTR [rbx+120], rax

; 1392 :     SetFlag(Py_InteractiveFlag);

  0003c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_InteractiveFlag
  00042	e8 00 00 00 00	 call	 PyLong_FromLong
  00047	48 89 83 80 00
	00 00		 mov	 QWORD PTR [rbx+128], rax

; 1393 :     SetFlag(Py_OptimizeFlag);

  0004e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_OptimizeFlag
  00054	e8 00 00 00 00	 call	 PyLong_FromLong
  00059	48 89 83 88 00
	00 00		 mov	 QWORD PTR [rbx+136], rax

; 1394 :     SetFlag(Py_DontWriteBytecodeFlag);

  00060	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_DontWriteBytecodeFlag
  00066	e8 00 00 00 00	 call	 PyLong_FromLong
  0006b	48 89 83 90 00
	00 00		 mov	 QWORD PTR [rbx+144], rax

; 1395 :     SetFlag(Py_NoUserSiteDirectory);

  00072	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_NoUserSiteDirectory
  00078	e8 00 00 00 00	 call	 PyLong_FromLong
  0007d	48 89 83 98 00
	00 00		 mov	 QWORD PTR [rbx+152], rax

; 1396 :     SetFlag(Py_NoSiteFlag);

  00084	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_NoSiteFlag
  0008a	e8 00 00 00 00	 call	 PyLong_FromLong
  0008f	48 89 83 a0 00
	00 00		 mov	 QWORD PTR [rbx+160], rax

; 1397 :     SetFlag(Py_IgnoreEnvironmentFlag);

  00096	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_IgnoreEnvironmentFlag
  0009c	e8 00 00 00 00	 call	 PyLong_FromLong
  000a1	48 89 83 a8 00
	00 00		 mov	 QWORD PTR [rbx+168], rax

; 1398 :     SetFlag(Py_VerboseFlag);

  000a8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_VerboseFlag
  000ae	e8 00 00 00 00	 call	 PyLong_FromLong
  000b3	48 89 83 b0 00
	00 00		 mov	 QWORD PTR [rbx+176], rax

; 1399 : #ifdef RISCOS
; 1400 :     SetFlag(Py_RISCOSWimpFlag);
; 1401 : #endif
; 1402 :     /* SetFlag(saw_unbuffered_flag); */
; 1403 :     /* SetFlag(skipfirstline); */
; 1404 :     SetFlag(Py_BytesWarningFlag);

  000ba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_BytesWarningFlag
  000c0	e8 00 00 00 00	 call	 PyLong_FromLong
  000c5	48 89 83 b8 00
	00 00		 mov	 QWORD PTR [rbx+184], rax

; 1405 :     SetFlag(Py_QuietFlag);

  000cc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_QuietFlag
  000d2	e8 00 00 00 00	 call	 PyLong_FromLong
  000d7	48 89 83 c0 00
	00 00		 mov	 QWORD PTR [rbx+192], rax

; 1406 :     SetFlag(Py_HashRandomizationFlag);

  000de	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_HashRandomizationFlag
  000e4	e8 00 00 00 00	 call	 PyLong_FromLong
  000e9	48 89 83 c8 00
	00 00		 mov	 QWORD PTR [rbx+200], rax

; 1407 : #undef SetFlag
; 1408 : 
; 1409 :     if (PyErr_Occurred()) {

  000f0	e8 00 00 00 00	 call	 PyErr_Occurred
  000f5	48 85 c0	 test	 rax, rax
  000f8	74 10		 je	 SHORT $LN1@make_flags

; 1410 :         Py_DECREF(seq);

  000fa	48 8b cb	 mov	 rcx, rbx
  000fd	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@make_flags:

; 1411 :         return NULL;

  00102	33 c0		 xor	 eax, eax

; 1414 : }

  00104	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00108	5b		 pop	 rbx
  00109	c3		 ret	 0
$LN1@make_flags:

; 1412 :     }
; 1413 :     return seq;

  0010a	48 8b c3	 mov	 rax, rbx

; 1414 : }

  0010d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00111	5b		 pop	 rbx
  00112	c3		 ret	 0
make_flags ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@DEBFLJBB@make_version_info?$AA@	; `string'
PUBLIC	??_C@_05FPBGKCKL@final?$AA@			; `string'
_BSS	SEGMENT
VersionInfoType DB 01e0H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$make_version_info DD imagerel make_version_info
	DD	imagerel make_version_info+183
	DD	imagerel $unwind$make_version_info
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$make_version_info DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0BC@DEBFLJBB@make_version_info?$AA@
CONST	SEGMENT
??_C@_0BC@DEBFLJBB@make_version_info?$AA@ DB 'make_version_info', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05FPBGKCKL@final?$AA@
CONST	SEGMENT
??_C@_05FPBGKCKL@final?$AA@ DB 'final', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT make_version_info
_TEXT	SEGMENT
make_version_info PROC					; COMDAT

; 1441 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1442 :     PyObject *version_info;
; 1443 :     char *s;
; 1444 :     int pos = 0;
; 1445 : 
; 1446 :     version_info = PyStructSequence_New(&VersionInfoType);

  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:VersionInfoType
  0000d	e8 00 00 00 00	 call	 PyStructSequence_New
  00012	48 8b d8	 mov	 rbx, rax

; 1447 :     if (version_info == NULL) {

  00015	48 85 c0	 test	 rax, rax

; 1448 :         return NULL;

  00018	0f 84 88 00 00
	00		 je	 $LN3@make_versi

; 1449 :     }
; 1450 : 
; 1451 :     /*
; 1452 :      * These release level checks are mutually exclusive and cover
; 1453 :      * the field, so don't get too fancy with the pre-processor!
; 1454 :      */
; 1455 : #if PY_RELEASE_LEVEL == PY_RELEASE_LEVEL_ALPHA
; 1456 :     s = "alpha";
; 1457 : #elif PY_RELEASE_LEVEL == PY_RELEASE_LEVEL_BETA
; 1458 :     s = "beta";
; 1459 : #elif PY_RELEASE_LEVEL == PY_RELEASE_LEVEL_GAMMA
; 1460 :     s = "candidate";
; 1461 : #elif PY_RELEASE_LEVEL == PY_RELEASE_LEVEL_FINAL
; 1462 :     s = "final";
; 1463 : #endif
; 1464 : 
; 1465 : #define SetIntItem(flag) \
; 1466 :     PyStructSequence_SET_ITEM(version_info, pos++, PyLong_FromLong(flag))
; 1467 : #define SetStrItem(flag) \
; 1468 :     PyStructSequence_SET_ITEM(version_info, pos++, PyUnicode_FromString(flag))
; 1469 : 
; 1470 :     SetIntItem(PY_MAJOR_VERSION);

  0001e	b9 03 00 00 00	 mov	 ecx, 3
  00023	e8 00 00 00 00	 call	 PyLong_FromLong

; 1471 :     SetIntItem(PY_MINOR_VERSION);

  00028	b9 03 00 00 00	 mov	 ecx, 3
  0002d	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax
  00031	e8 00 00 00 00	 call	 PyLong_FromLong

; 1472 :     SetIntItem(PY_MICRO_VERSION);

  00036	b9 05 00 00 00	 mov	 ecx, 5
  0003b	48 89 43 78	 mov	 QWORD PTR [rbx+120], rax
  0003f	e8 00 00 00 00	 call	 PyLong_FromLong

; 1473 :     SetStrItem(s);

  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05FPBGKCKL@final?$AA@
  0004b	48 89 83 80 00
	00 00		 mov	 QWORD PTR [rbx+128], rax
  00052	e8 00 00 00 00	 call	 PyUnicode_FromString

; 1474 :     SetIntItem(PY_RELEASE_SERIAL);

  00057	33 c9		 xor	 ecx, ecx
  00059	48 89 83 88 00
	00 00		 mov	 QWORD PTR [rbx+136], rax
  00060	e8 00 00 00 00	 call	 PyLong_FromLong
  00065	48 89 83 90 00
	00 00		 mov	 QWORD PTR [rbx+144], rax

; 1475 : #undef SetIntItem
; 1476 : #undef SetStrItem
; 1477 : 
; 1478 :     if (PyErr_Occurred()) {

  0006c	e8 00 00 00 00	 call	 PyErr_Occurred
  00071	48 85 c0	 test	 rax, rax
  00074	74 38		 je	 SHORT $LN5@make_versi

; 1479 :         Py_CLEAR(version_info);

  00076	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@MBPGCCDI@?4?4?2Python?2sysmodule?4c?$AA@
  0007d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@DEBFLJBB@make_version_info?$AA@
  00084	4c 8b cb	 mov	 r9, rbx
  00087	41 b8 c7 05 00
	00		 mov	 r8d, 1479		; 000005c7H
  0008d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00095	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009a	85 c0		 test	 eax, eax
  0009c	75 08		 jne	 SHORT $LN3@make_versi
  0009e	48 8b cb	 mov	 rcx, rbx
  000a1	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@make_versi:

; 1480 :         return NULL;

  000a6	33 c0		 xor	 eax, eax

; 1483 : }

  000a8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ac	5b		 pop	 rbx
  000ad	c3		 ret	 0
$LN5@make_versi:

; 1481 :     }
; 1482 :     return version_info;

  000ae	48 8b c3	 mov	 rax, rbx

; 1483 : }

  000b1	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b5	5b		 pop	 rbx
  000b6	c3		 ret	 0
make_version_info ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@EJOHODDD@make_impl_info?$AA@		; `string'
PUBLIC	??_C@_0L@LHCICIKK@hexversion?$AA@		; `string'
PUBLIC	??_C@_07CPCPJPKL@version?$AA@			; `string'
PUBLIC	??_C@_09OOAOLFII@cache_tag?$AA@			; `string'
PUBLIC	??_C@_04MEMAJGDJ@name?$AA@			; `string'
EXTRN	_PyNamespace_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$make_impl_info DD imagerel make_impl_info
	DD	imagerel make_impl_info+330
	DD	imagerel $unwind$make_impl_info
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$make_impl_info DD 083601H
	DD	096436H
	DD	083431H
	DD	0a540aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0P@EJOHODDD@make_impl_info?$AA@
CONST	SEGMENT
??_C@_0P@EJOHODDD@make_impl_info?$AA@ DB 'make_impl_info', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LHCICIKK@hexversion?$AA@
CONST	SEGMENT
??_C@_0L@LHCICIKK@hexversion?$AA@ DB 'hexversion', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07CPCPJPKL@version?$AA@
CONST	SEGMENT
??_C@_07CPCPJPKL@version?$AA@ DB 'version', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09OOAOLFII@cache_tag?$AA@
CONST	SEGMENT
??_C@_09OOAOLFII@cache_tag?$AA@ DB 'cache_tag', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04MEMAJGDJ@name?$AA@
CONST	SEGMENT
??_C@_04MEMAJGDJ@name?$AA@ DB 'name', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT make_impl_info
_TEXT	SEGMENT
version_info$ = 64
make_impl_info PROC					; COMDAT

; 1503 : {

  00000	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b e9	 mov	 rbp, rcx

; 1504 :     int res;
; 1505 :     PyObject *impl_info, *value, *ns;
; 1506 : 
; 1507 :     impl_info = PyDict_New();

  0000d	e8 00 00 00 00	 call	 PyDict_New
  00012	48 8b f8	 mov	 rdi, rax

; 1508 :     if (impl_info == NULL)

  00015	48 85 c0	 test	 rax, rax
  00018	75 0b		 jne	 SHORT $LN12@make_impl_

; 1550 : }

  0001a	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  0001f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00023	5f		 pop	 rdi
  00024	c3		 ret	 0
$LN12@make_impl_:

; 1509 :         return NULL;
; 1510 : 
; 1511 :     /* populate the dict */
; 1512 : 
; 1513 :     value = PyUnicode_FromString(_PySys_ImplName);

  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PySys_ImplName
  0002c	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00031	48 89 74 24 48	 mov	 QWORD PTR [rsp+72], rsi
  00036	e8 00 00 00 00	 call	 PyUnicode_FromString
  0003b	48 8b f0	 mov	 rsi, rax

; 1514 :     if (value == NULL)

  0003e	48 85 c0	 test	 rax, rax
  00041	0f 84 bc 00 00
	00		 je	 $error$64506

; 1515 :         goto error;
; 1516 :     res = PyDict_SetItemString(impl_info, "name", value);

  00047	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04MEMAJGDJ@name?$AA@
  0004e	4c 8b c0	 mov	 r8, rax
  00051	48 8b cf	 mov	 rcx, rdi
  00054	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1517 :     Py_DECREF(value);

  00059	48 8b ce	 mov	 rcx, rsi
  0005c	8b d8		 mov	 ebx, eax
  0005e	e8 00 00 00 00	 call	 _Py_DecRef

; 1518 :     if (res < 0)

  00063	85 db		 test	 ebx, ebx
  00065	0f 88 98 00 00
	00		 js	 $error$64506

; 1519 :         goto error;
; 1520 : 
; 1521 :     value = PyUnicode_FromString(_PySys_ImplCacheTag);

  0006b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PySys_ImplCacheTag
  00072	e8 00 00 00 00	 call	 PyUnicode_FromString
  00077	48 8b f0	 mov	 rsi, rax

; 1522 :     if (value == NULL)

  0007a	48 85 c0	 test	 rax, rax
  0007d	0f 84 80 00 00
	00		 je	 $error$64506

; 1523 :         goto error;
; 1524 :     res = PyDict_SetItemString(impl_info, "cache_tag", value);

  00083	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09OOAOLFII@cache_tag?$AA@
  0008a	4c 8b c0	 mov	 r8, rax
  0008d	48 8b cf	 mov	 rcx, rdi
  00090	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1525 :     Py_DECREF(value);

  00095	48 8b ce	 mov	 rcx, rsi
  00098	8b d8		 mov	 ebx, eax
  0009a	e8 00 00 00 00	 call	 _Py_DecRef

; 1526 :     if (res < 0)

  0009f	85 db		 test	 ebx, ebx
  000a1	78 60		 js	 SHORT $error$64506

; 1527 :         goto error;
; 1528 : 
; 1529 :     res = PyDict_SetItemString(impl_info, "version", version_info);

  000a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07CPCPJPKL@version?$AA@
  000aa	4c 8b c5	 mov	 r8, rbp
  000ad	48 8b cf	 mov	 rcx, rdi
  000b0	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1530 :     if (res < 0)

  000b5	85 c0		 test	 eax, eax
  000b7	78 4a		 js	 SHORT $error$64506

; 1531 :         goto error;
; 1532 : 
; 1533 :     value = PyLong_FromLong(PY_VERSION_HEX);

  000b9	b9 f0 05 03 03	 mov	 ecx, 50529776		; 030305f0H
  000be	e8 00 00 00 00	 call	 PyLong_FromLong
  000c3	48 8b f0	 mov	 rsi, rax

; 1534 :     if (value == NULL)

  000c6	48 85 c0	 test	 rax, rax
  000c9	74 38		 je	 SHORT $error$64506

; 1535 :         goto error;
; 1536 :     res = PyDict_SetItemString(impl_info, "hexversion", value);

  000cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@LHCICIKK@hexversion?$AA@
  000d2	4c 8b c0	 mov	 r8, rax
  000d5	48 8b cf	 mov	 rcx, rdi
  000d8	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1537 :     Py_DECREF(value);

  000dd	48 8b ce	 mov	 rcx, rsi
  000e0	8b d8		 mov	 ebx, eax
  000e2	e8 00 00 00 00	 call	 _Py_DecRef

; 1538 :     if (res < 0)

  000e7	85 db		 test	 ebx, ebx
  000e9	78 18		 js	 SHORT $error$64506

; 1539 :         goto error;
; 1540 : 
; 1541 :     /* dict ready */
; 1542 : 
; 1543 :     ns = _PyNamespace_New(impl_info);

  000eb	48 8b cf	 mov	 rcx, rdi
  000ee	e8 00 00 00 00	 call	 _PyNamespace_New

; 1544 :     Py_DECREF(impl_info);

  000f3	48 8b cf	 mov	 rcx, rdi
  000f6	48 8b d8	 mov	 rbx, rax
  000f9	e8 00 00 00 00	 call	 _Py_DecRef

; 1545 :     return ns;

  000fe	48 8b c3	 mov	 rax, rbx
  00101	eb 32		 jmp	 SHORT $LN16@make_impl_
$error$64506:

; 1546 : 
; 1547 : error:
; 1548 :     Py_CLEAR(impl_info);

  00103	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@MBPGCCDI@?4?4?2Python?2sysmodule?4c?$AA@
  0010a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@EJOHODDD@make_impl_info?$AA@
  00111	4c 8b cf	 mov	 r9, rdi
  00114	41 b8 0c 06 00
	00		 mov	 r8d, 1548		; 0000060cH
  0011a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00122	e8 00 00 00 00	 call	 _PyParallel_Guard
  00127	85 c0		 test	 eax, eax
  00129	75 08		 jne	 SHORT $LN3@make_impl_
  0012b	48 8b cf	 mov	 rcx, rdi
  0012e	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@make_impl_:

; 1549 :     return NULL;

  00133	33 c0		 xor	 eax, eax
$LN16@make_impl_:
  00135	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0013a	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]

; 1550 : }

  0013f	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  00144	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00148	5f		 pop	 rdi
  00149	c3		 ret	 0
make_impl_info ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@NCLNECCP@thread_info?$AA@		; `string'
PUBLIC	??_C@_0BB@NLDLBIPF@float_repr_style?$AA@	; `string'
PUBLIC	??_C@_05BFKKPKCG@short?$AA@			; `string'
PUBLIC	??_C@_05GECEPKB@flags?$AA@			; `string'
PUBLIC	??_C@_0P@EPOCNDEG@implementation?$AA@		; `string'
PUBLIC	??_C@_0N@NPOFIJBB@version_info?$AA@		; `string'
PUBLIC	??_C@_09NLDNDIBM@_xoptions?$AA@			; `string'
PUBLIC	??_C@_0M@OHJDAEBN@warnoptions?$AA@		; `string'
PUBLIC	??_C@_06FPOELEGF@winver?$AA@			; `string'
PUBLIC	??_C@_09EJJKCOGE@dllhandle?$AA@			; `string'
PUBLIC	??_C@_09PJBCLGKJ@byteorder?$AA@			; `string'
PUBLIC	??_C@_06LADGIEOA@little?$AA@			; `string'
PUBLIC	??_C@_0BF@LPKMLNFN@builtin_module_names?$AA@	; `string'
PUBLIC	??_C@_0L@IACHHLKH@maxunicode?$AA@		; `string'
PUBLIC	??_C@_09BDOHDNMP@hash_info?$AA@			; `string'
PUBLIC	??_C@_08CIEMHFML@int_info?$AA@			; `string'
PUBLIC	??_C@_0L@HMECADCK@float_info?$AA@		; `string'
PUBLIC	??_C@_07KCDDANPD@maxsize?$AA@			; `string'
PUBLIC	??_C@_0BB@FIIOHCIL@base_exec_prefix?$AA@	; `string'
PUBLIC	??_C@_0M@BDGILGLH@base_prefix?$AA@		; `string'
PUBLIC	??_C@_0M@OLOBCNFD@exec_prefix?$AA@		; `string'
PUBLIC	??_C@_06CHGOAPND@prefix?$AA@			; `string'
PUBLIC	??_C@_0L@FKCMKODO@executable?$AA@		; `string'
PUBLIC	??_C@_09JHBDCMB@copyright?$AA@			; `string'
PUBLIC	??_C@_0M@PMBEFFCE@api_version?$AA@		; `string'
PUBLIC	??_C@_0L@HHGPOKH@_mercurial?$AA@		; `string'
PUBLIC	??_C@_05CBCHBIN@?$CIszz?$CJ?$AA@		; `string'
PUBLIC	??_C@_07HIACADPB@CPython?$AA@			; `string'
PUBLIC	??_C@_0P@HIAEFOKM@__excepthook__?$AA@		; `string'
PUBLIC	??_C@_0BA@OBKGBBAP@__displayhook__?$AA@		; `string'
PUBLIC	_PySys_Init
EXTRN	PyThread_GetInfo:PROC
EXTRN	PyWin_DLLVersionString:QWORD
EXTRN	PyLong_FromVoidPtr:PROC
EXTRN	PyWin_DLLhModule:QWORD
EXTRN	PyStructSequence_InitType:PROC
EXTRN	PyLong_GetInfo:PROC
EXTRN	PyFloat_GetInfo:PROC
EXTRN	Py_GetExecPrefix:PROC
EXTRN	Py_GetPrefix:PROC
EXTRN	Py_GetProgramFullPath:PROC
EXTRN	Py_GetPlatform:PROC
EXTRN	Py_GetCopyright:PROC
EXTRN	PyBool_FromLong:PROC
EXTRN	_Py_hgidentifier:PROC
EXTRN	_Py_hgversion:PROC
EXTRN	Py_GetVersion:PROC
EXTRN	PyModule_GetDict:PROC
EXTRN	PyModule_Create2:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_PySys_Init DD imagerel $LN436
	DD	imagerel $LN436+4079
	DD	imagerel $unwind$_PySys_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PySys_Init DD 083701H
	DD	0a7437H
	DD	095432H
	DD	08342aH
	DD	060025206H
xdata	ENDS
;	COMDAT ??_C@_0M@NCLNECCP@thread_info?$AA@
CONST	SEGMENT
??_C@_0M@NCLNECCP@thread_info?$AA@ DB 'thread_info', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NLDLBIPF@float_repr_style?$AA@
CONST	SEGMENT
??_C@_0BB@NLDLBIPF@float_repr_style?$AA@ DB 'float_repr_style', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05BFKKPKCG@short?$AA@
CONST	SEGMENT
??_C@_05BFKKPKCG@short?$AA@ DB 'short', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GECEPKB@flags?$AA@
CONST	SEGMENT
??_C@_05GECEPKB@flags?$AA@ DB 'flags', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EPOCNDEG@implementation?$AA@
CONST	SEGMENT
??_C@_0P@EPOCNDEG@implementation?$AA@ DB 'implementation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NPOFIJBB@version_info?$AA@
CONST	SEGMENT
??_C@_0N@NPOFIJBB@version_info?$AA@ DB 'version_info', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09NLDNDIBM@_xoptions?$AA@
CONST	SEGMENT
??_C@_09NLDNDIBM@_xoptions?$AA@ DB '_xoptions', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OHJDAEBN@warnoptions?$AA@
CONST	SEGMENT
??_C@_0M@OHJDAEBN@warnoptions?$AA@ DB 'warnoptions', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FPOELEGF@winver?$AA@
CONST	SEGMENT
??_C@_06FPOELEGF@winver?$AA@ DB 'winver', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09EJJKCOGE@dllhandle?$AA@
CONST	SEGMENT
??_C@_09EJJKCOGE@dllhandle?$AA@ DB 'dllhandle', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PJBCLGKJ@byteorder?$AA@
CONST	SEGMENT
??_C@_09PJBCLGKJ@byteorder?$AA@ DB 'byteorder', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06LADGIEOA@little?$AA@
CONST	SEGMENT
??_C@_06LADGIEOA@little?$AA@ DB 'little', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LPKMLNFN@builtin_module_names?$AA@
CONST	SEGMENT
??_C@_0BF@LPKMLNFN@builtin_module_names?$AA@ DB 'builtin_module_names', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IACHHLKH@maxunicode?$AA@
CONST	SEGMENT
??_C@_0L@IACHHLKH@maxunicode?$AA@ DB 'maxunicode', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09BDOHDNMP@hash_info?$AA@
CONST	SEGMENT
??_C@_09BDOHDNMP@hash_info?$AA@ DB 'hash_info', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CIEMHFML@int_info?$AA@
CONST	SEGMENT
??_C@_08CIEMHFML@int_info?$AA@ DB 'int_info', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HMECADCK@float_info?$AA@
CONST	SEGMENT
??_C@_0L@HMECADCK@float_info?$AA@ DB 'float_info', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07KCDDANPD@maxsize?$AA@
CONST	SEGMENT
??_C@_07KCDDANPD@maxsize?$AA@ DB 'maxsize', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FIIOHCIL@base_exec_prefix?$AA@
CONST	SEGMENT
??_C@_0BB@FIIOHCIL@base_exec_prefix?$AA@ DB 'base_exec_prefix', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BDGILGLH@base_prefix?$AA@
CONST	SEGMENT
??_C@_0M@BDGILGLH@base_prefix?$AA@ DB 'base_prefix', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OLOBCNFD@exec_prefix?$AA@
CONST	SEGMENT
??_C@_0M@OLOBCNFD@exec_prefix?$AA@ DB 'exec_prefix', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06CHGOAPND@prefix?$AA@
CONST	SEGMENT
??_C@_06CHGOAPND@prefix?$AA@ DB 'prefix', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FKCMKODO@executable?$AA@
CONST	SEGMENT
??_C@_0L@FKCMKODO@executable?$AA@ DB 'executable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JHBDCMB@copyright?$AA@
CONST	SEGMENT
??_C@_09JHBDCMB@copyright?$AA@ DB 'copyright', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PMBEFFCE@api_version?$AA@
CONST	SEGMENT
??_C@_0M@PMBEFFCE@api_version?$AA@ DB 'api_version', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HHGPOKH@_mercurial?$AA@
CONST	SEGMENT
??_C@_0L@HHGPOKH@_mercurial?$AA@ DB '_mercurial', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05CBCHBIN@?$CIszz?$CJ?$AA@
CONST	SEGMENT
??_C@_05CBCHBIN@?$CIszz?$CJ?$AA@ DB '(szz)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07HIACADPB@CPython?$AA@
CONST	SEGMENT
??_C@_07HIACADPB@CPython?$AA@ DB 'CPython', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HIAEFOKM@__excepthook__?$AA@
CONST	SEGMENT
??_C@_0P@HIAEFOKM@__excepthook__?$AA@ DB '__excepthook__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OBKGBBAP@__displayhook__?$AA@
CONST	SEGMENT
??_C@_0BA@OBKGBBAP@__displayhook__?$AA@ DB '__displayhook__', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\sysmodule.c
CONST	ENDS
;	COMDAT _PySys_Init
_TEXT	SEGMENT
_PySys_Init PROC					; COMDAT

; 1566 : {

$LN436:
  00000	40 56		 push	 rsi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1567 :     PyObject *m, *v, *sysdict, *version_info;
; 1568 :     char *s;
; 1569 : 
; 1570 :     m = PyModule_Create(&sysmodule);

  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:sysmodule
  0000d	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00012	e8 00 00 00 00	 call	 PyModule_Create2
  00017	48 8b f0	 mov	 rsi, rax

; 1571 :     if (m == NULL)

  0001a	48 85 c0	 test	 rax, rax
  0001d	75 06		 jne	 SHORT $LN142@PySys_Init

; 1729 :         return NULL;
; 1730 :     return m;
; 1731 : }

  0001f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00023	5e		 pop	 rsi
  00024	c3		 ret	 0
$LN142@PySys_Init:
  00025	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx

; 1572 :         return NULL;
; 1573 :     sysdict = PyModule_GetDict(m);

  0002a	48 8b c8	 mov	 rcx, rax
  0002d	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp
  00032	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  00037	e8 00 00 00 00	 call	 PyModule_GetDict

; 1574 : #define SET_SYS_FROM_STRING(key, value)                 \
; 1575 :     v = value;                                          \
; 1576 :     if (v != NULL)                                      \
; 1577 :         PyDict_SetItemString(sysdict, key, v);          \
; 1578 :     Py_XDECREF(v)
; 1579 : 
; 1580 :     /* Check that stdin is not a directory
; 1581 :     Using shell redirection, you can redirect stdin to a directory,
; 1582 :     crashing the Python interpreter. Catch this common mistake here
; 1583 :     and output a useful error message. Note that under MS Windows,
; 1584 :     the shell already prevents that. */
; 1585 : #if !defined(MS_WINDOWS)
; 1586 :     {
; 1587 :         struct stat sb;
; 1588 :         if (fstat(fileno(stdin), &sb) == 0 &&
; 1589 :             S_ISDIR(sb.st_mode)) {
; 1590 :             /* There's nothing more we can do. */
; 1591 :             /* Py_FatalError() will core dump, so just exit. */
; 1592 :             PySys_WriteStderr("Python error: <stdin> is a directory, cannot continue\n");
; 1593 :             exit(EXIT_FAILURE);
; 1594 :         }
; 1595 :     }
; 1596 : #endif
; 1597 : 
; 1598 :     /* stdin/stdout/stderr are now set by pythonrun.c */
; 1599 : 
; 1600 :     PyDict_SetItemString(sysdict, "__displayhook__",
; 1601 :                          PyDict_GetItemString(sysdict, "displayhook"));

  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@OABHHABA@displayhook?$AA@
  00043	48 8b c8	 mov	 rcx, rax
  00046	48 8b f8	 mov	 rdi, rax
  00049	e8 00 00 00 00	 call	 PyDict_GetItemString
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@OBKGBBAP@__displayhook__?$AA@
  00055	48 8b cf	 mov	 rcx, rdi
  00058	4c 8b c0	 mov	 r8, rax
  0005b	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1602 :     PyDict_SetItemString(sysdict, "__excepthook__",
; 1603 :                          PyDict_GetItemString(sysdict, "excepthook"));

  00060	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@NONONIOP@excepthook?$AA@
  00067	48 8b cf	 mov	 rcx, rdi
  0006a	e8 00 00 00 00	 call	 PyDict_GetItemString
  0006f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@HIAEFOKM@__excepthook__?$AA@
  00076	48 8b cf	 mov	 rcx, rdi
  00079	4c 8b c0	 mov	 r8, rax
  0007c	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1604 :     SET_SYS_FROM_STRING("version",
; 1605 :                          PyUnicode_FromString(Py_GetVersion()));

  00081	e8 00 00 00 00	 call	 Py_GetVersion
  00086	48 8b c8	 mov	 rcx, rax
  00089	e8 00 00 00 00	 call	 PyUnicode_FromString
  0008e	48 8b d8	 mov	 rbx, rax
  00091	48 85 c0	 test	 rax, rax
  00094	74 77		 je	 SHORT $LN139@PySys_Init
  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07CPCPJPKL@version?$AA@
  0009d	4c 8b c0	 mov	 r8, rax
  000a0	48 8b cf	 mov	 rcx, rdi
  000a3	e8 00 00 00 00	 call	 PyDict_SetItemString
  000a8	e8 00 00 00 00	 call	 _Py_PXCTX
  000ad	85 c0		 test	 eax, eax
  000af	75 5c		 jne	 SHORT $LN139@PySys_Init
  000b1	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000b5	a8 20		 test	 al, 32			; 00000020H
  000b7	75 4c		 jne	 SHORT $LN149@PySys_Init
  000b9	84 c0		 test	 al, al
  000bb	78 48		 js	 SHORT $LN149@PySys_Init
  000bd	a8 02		 test	 al, 2
  000bf	75 4c		 jne	 SHORT $LN139@PySys_Init
  000c1	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000c5	75 46		 jne	 SHORT $LN139@PySys_Init
  000c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000d5	4c 8b cb	 mov	 r9, rbx
  000d8	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000de	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000e6	e8 00 00 00 00	 call	 _PyParallel_Guard
  000eb	48 8b cb	 mov	 rcx, rbx
  000ee	85 c0		 test	 eax, eax
  000f0	74 07		 je	 SHORT $LN154@PySys_Init
  000f2	e8 00 00 00 00	 call	 _Px_Dealloc
  000f7	eb 14		 jmp	 SHORT $LN139@PySys_Init
$LN154@PySys_Init:
  000f9	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000fd	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00103	eb 08		 jmp	 SHORT $LN139@PySys_Init
$LN149@PySys_Init:
  00105	48 8b cb	 mov	 rcx, rbx
  00108	e8 00 00 00 00	 call	 Px_DecRef
$LN139@PySys_Init:

; 1606 :     SET_SYS_FROM_STRING("hexversion",
; 1607 :                          PyLong_FromLong(PY_VERSION_HEX));

  0010d	b9 f0 05 03 03	 mov	 ecx, 50529776		; 030305f0H
  00112	e8 00 00 00 00	 call	 PyLong_FromLong
  00117	48 8b d8	 mov	 rbx, rax
  0011a	48 85 c0	 test	 rax, rax
  0011d	74 77		 je	 SHORT $LN134@PySys_Init
  0011f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@LHCICIKK@hexversion?$AA@
  00126	4c 8b c0	 mov	 r8, rax
  00129	48 8b cf	 mov	 rcx, rdi
  0012c	e8 00 00 00 00	 call	 PyDict_SetItemString
  00131	e8 00 00 00 00	 call	 _Py_PXCTX
  00136	85 c0		 test	 eax, eax
  00138	75 5c		 jne	 SHORT $LN134@PySys_Init
  0013a	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0013e	a8 20		 test	 al, 32			; 00000020H
  00140	75 4c		 jne	 SHORT $LN160@PySys_Init
  00142	84 c0		 test	 al, al
  00144	78 48		 js	 SHORT $LN160@PySys_Init
  00146	a8 02		 test	 al, 2
  00148	75 4c		 jne	 SHORT $LN134@PySys_Init
  0014a	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0014e	75 46		 jne	 SHORT $LN134@PySys_Init
  00150	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00157	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0015e	4c 8b cb	 mov	 r9, rbx
  00161	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00167	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0016f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00174	48 8b cb	 mov	 rcx, rbx
  00177	85 c0		 test	 eax, eax
  00179	74 07		 je	 SHORT $LN165@PySys_Init
  0017b	e8 00 00 00 00	 call	 _Px_Dealloc
  00180	eb 14		 jmp	 SHORT $LN134@PySys_Init
$LN165@PySys_Init:
  00182	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00186	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0018c	eb 08		 jmp	 SHORT $LN134@PySys_Init
$LN160@PySys_Init:
  0018e	48 8b cb	 mov	 rcx, rbx
  00191	e8 00 00 00 00	 call	 Px_DecRef
$LN134@PySys_Init:

; 1608 :     SET_SYS_FROM_STRING("_mercurial",
; 1609 :                         Py_BuildValue("(szz)", "CPython", _Py_hgidentifier(),
; 1610 :                                       _Py_hgversion()));

  00196	e8 00 00 00 00	 call	 _Py_hgversion
  0019b	48 8b d8	 mov	 rbx, rax
  0019e	e8 00 00 00 00	 call	 _Py_hgidentifier
  001a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07HIACADPB@CPython?$AA@
  001aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05CBCHBIN@?$CIszz?$CJ?$AA@
  001b1	4c 8b cb	 mov	 r9, rbx
  001b4	4c 8b c0	 mov	 r8, rax
  001b7	e8 00 00 00 00	 call	 Py_BuildValue
  001bc	48 8b d8	 mov	 rbx, rax
  001bf	48 85 c0	 test	 rax, rax
  001c2	74 77		 je	 SHORT $LN129@PySys_Init
  001c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@HHGPOKH@_mercurial?$AA@
  001cb	4c 8b c0	 mov	 r8, rax
  001ce	48 8b cf	 mov	 rcx, rdi
  001d1	e8 00 00 00 00	 call	 PyDict_SetItemString
  001d6	e8 00 00 00 00	 call	 _Py_PXCTX
  001db	85 c0		 test	 eax, eax
  001dd	75 5c		 jne	 SHORT $LN129@PySys_Init
  001df	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  001e3	a8 20		 test	 al, 32			; 00000020H
  001e5	75 4c		 jne	 SHORT $LN171@PySys_Init
  001e7	84 c0		 test	 al, al
  001e9	78 48		 js	 SHORT $LN171@PySys_Init
  001eb	a8 02		 test	 al, 2
  001ed	75 4c		 jne	 SHORT $LN129@PySys_Init
  001ef	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  001f3	75 46		 jne	 SHORT $LN129@PySys_Init
  001f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00203	4c 8b cb	 mov	 r9, rbx
  00206	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0020c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00214	e8 00 00 00 00	 call	 _PyParallel_Guard
  00219	48 8b cb	 mov	 rcx, rbx
  0021c	85 c0		 test	 eax, eax
  0021e	74 07		 je	 SHORT $LN176@PySys_Init
  00220	e8 00 00 00 00	 call	 _Px_Dealloc
  00225	eb 14		 jmp	 SHORT $LN129@PySys_Init
$LN176@PySys_Init:
  00227	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0022b	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00231	eb 08		 jmp	 SHORT $LN129@PySys_Init
$LN171@PySys_Init:
  00233	48 8b cb	 mov	 rcx, rbx
  00236	e8 00 00 00 00	 call	 Px_DecRef
$LN129@PySys_Init:

; 1611 :     SET_SYS_FROM_STRING("dont_write_bytecode",
; 1612 :                          PyBool_FromLong(Py_DontWriteBytecodeFlag));

  0023b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_DontWriteBytecodeFlag
  00241	e8 00 00 00 00	 call	 PyBool_FromLong
  00246	48 8b d8	 mov	 rbx, rax
  00249	48 85 c0	 test	 rax, rax
  0024c	74 77		 je	 SHORT $LN124@PySys_Init
  0024e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@CMMEJPLN@dont_write_bytecode?$AA@
  00255	4c 8b c0	 mov	 r8, rax
  00258	48 8b cf	 mov	 rcx, rdi
  0025b	e8 00 00 00 00	 call	 PyDict_SetItemString
  00260	e8 00 00 00 00	 call	 _Py_PXCTX
  00265	85 c0		 test	 eax, eax
  00267	75 5c		 jne	 SHORT $LN124@PySys_Init
  00269	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0026d	a8 20		 test	 al, 32			; 00000020H
  0026f	75 4c		 jne	 SHORT $LN182@PySys_Init
  00271	84 c0		 test	 al, al
  00273	78 48		 js	 SHORT $LN182@PySys_Init
  00275	a8 02		 test	 al, 2
  00277	75 4c		 jne	 SHORT $LN124@PySys_Init
  00279	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0027d	75 46		 jne	 SHORT $LN124@PySys_Init
  0027f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00286	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0028d	4c 8b cb	 mov	 r9, rbx
  00290	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00296	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0029e	e8 00 00 00 00	 call	 _PyParallel_Guard
  002a3	48 8b cb	 mov	 rcx, rbx
  002a6	85 c0		 test	 eax, eax
  002a8	74 07		 je	 SHORT $LN187@PySys_Init
  002aa	e8 00 00 00 00	 call	 _Px_Dealloc
  002af	eb 14		 jmp	 SHORT $LN124@PySys_Init
$LN187@PySys_Init:
  002b1	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  002b5	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  002bb	eb 08		 jmp	 SHORT $LN124@PySys_Init
$LN182@PySys_Init:
  002bd	48 8b cb	 mov	 rcx, rbx
  002c0	e8 00 00 00 00	 call	 Px_DecRef
$LN124@PySys_Init:

; 1613 :     SET_SYS_FROM_STRING("api_version",
; 1614 :                         PyLong_FromLong(PYTHON_API_VERSION));

  002c5	b9 f5 03 00 00	 mov	 ecx, 1013		; 000003f5H
  002ca	e8 00 00 00 00	 call	 PyLong_FromLong
  002cf	48 8b d8	 mov	 rbx, rax
  002d2	48 85 c0	 test	 rax, rax
  002d5	74 77		 je	 SHORT $LN119@PySys_Init
  002d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@PMBEFFCE@api_version?$AA@
  002de	4c 8b c0	 mov	 r8, rax
  002e1	48 8b cf	 mov	 rcx, rdi
  002e4	e8 00 00 00 00	 call	 PyDict_SetItemString
  002e9	e8 00 00 00 00	 call	 _Py_PXCTX
  002ee	85 c0		 test	 eax, eax
  002f0	75 5c		 jne	 SHORT $LN119@PySys_Init
  002f2	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  002f6	a8 20		 test	 al, 32			; 00000020H
  002f8	75 4c		 jne	 SHORT $LN193@PySys_Init
  002fa	84 c0		 test	 al, al
  002fc	78 48		 js	 SHORT $LN193@PySys_Init
  002fe	a8 02		 test	 al, 2
  00300	75 4c		 jne	 SHORT $LN119@PySys_Init
  00302	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00306	75 46		 jne	 SHORT $LN119@PySys_Init
  00308	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0030f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00316	4c 8b cb	 mov	 r9, rbx
  00319	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0031f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00327	e8 00 00 00 00	 call	 _PyParallel_Guard
  0032c	48 8b cb	 mov	 rcx, rbx
  0032f	85 c0		 test	 eax, eax
  00331	74 07		 je	 SHORT $LN198@PySys_Init
  00333	e8 00 00 00 00	 call	 _Px_Dealloc
  00338	eb 14		 jmp	 SHORT $LN119@PySys_Init
$LN198@PySys_Init:
  0033a	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0033e	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00344	eb 08		 jmp	 SHORT $LN119@PySys_Init
$LN193@PySys_Init:
  00346	48 8b cb	 mov	 rcx, rbx
  00349	e8 00 00 00 00	 call	 Px_DecRef
$LN119@PySys_Init:

; 1615 :     SET_SYS_FROM_STRING("copyright",
; 1616 :                         PyUnicode_FromString(Py_GetCopyright()));

  0034e	e8 00 00 00 00	 call	 Py_GetCopyright
  00353	48 8b c8	 mov	 rcx, rax
  00356	e8 00 00 00 00	 call	 PyUnicode_FromString
  0035b	48 8b d8	 mov	 rbx, rax
  0035e	48 85 c0	 test	 rax, rax
  00361	74 77		 je	 SHORT $LN114@PySys_Init
  00363	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09JHBDCMB@copyright?$AA@
  0036a	4c 8b c0	 mov	 r8, rax
  0036d	48 8b cf	 mov	 rcx, rdi
  00370	e8 00 00 00 00	 call	 PyDict_SetItemString
  00375	e8 00 00 00 00	 call	 _Py_PXCTX
  0037a	85 c0		 test	 eax, eax
  0037c	75 5c		 jne	 SHORT $LN114@PySys_Init
  0037e	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00382	a8 20		 test	 al, 32			; 00000020H
  00384	75 4c		 jne	 SHORT $LN204@PySys_Init
  00386	84 c0		 test	 al, al
  00388	78 48		 js	 SHORT $LN204@PySys_Init
  0038a	a8 02		 test	 al, 2
  0038c	75 4c		 jne	 SHORT $LN114@PySys_Init
  0038e	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00392	75 46		 jne	 SHORT $LN114@PySys_Init
  00394	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0039b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  003a2	4c 8b cb	 mov	 r9, rbx
  003a5	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  003ab	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003b3	e8 00 00 00 00	 call	 _PyParallel_Guard
  003b8	48 8b cb	 mov	 rcx, rbx
  003bb	85 c0		 test	 eax, eax
  003bd	74 07		 je	 SHORT $LN209@PySys_Init
  003bf	e8 00 00 00 00	 call	 _Px_Dealloc
  003c4	eb 14		 jmp	 SHORT $LN114@PySys_Init
$LN209@PySys_Init:
  003c6	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  003ca	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  003d0	eb 08		 jmp	 SHORT $LN114@PySys_Init
$LN204@PySys_Init:
  003d2	48 8b cb	 mov	 rcx, rbx
  003d5	e8 00 00 00 00	 call	 Px_DecRef
$LN114@PySys_Init:

; 1617 :     SET_SYS_FROM_STRING("platform",
; 1618 :                         PyUnicode_FromString(Py_GetPlatform()));

  003da	e8 00 00 00 00	 call	 Py_GetPlatform
  003df	48 8b c8	 mov	 rcx, rax
  003e2	e8 00 00 00 00	 call	 PyUnicode_FromString
  003e7	48 8b d8	 mov	 rbx, rax
  003ea	48 85 c0	 test	 rax, rax
  003ed	74 77		 je	 SHORT $LN109@PySys_Init
  003ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08CBHCFJJK@platform?$AA@
  003f6	4c 8b c0	 mov	 r8, rax
  003f9	48 8b cf	 mov	 rcx, rdi
  003fc	e8 00 00 00 00	 call	 PyDict_SetItemString
  00401	e8 00 00 00 00	 call	 _Py_PXCTX
  00406	85 c0		 test	 eax, eax
  00408	75 5c		 jne	 SHORT $LN109@PySys_Init
  0040a	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0040e	a8 20		 test	 al, 32			; 00000020H
  00410	75 4c		 jne	 SHORT $LN215@PySys_Init
  00412	84 c0		 test	 al, al
  00414	78 48		 js	 SHORT $LN215@PySys_Init
  00416	a8 02		 test	 al, 2
  00418	75 4c		 jne	 SHORT $LN109@PySys_Init
  0041a	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0041e	75 46		 jne	 SHORT $LN109@PySys_Init
  00420	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00427	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0042e	4c 8b cb	 mov	 r9, rbx
  00431	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00437	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0043f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00444	48 8b cb	 mov	 rcx, rbx
  00447	85 c0		 test	 eax, eax
  00449	74 07		 je	 SHORT $LN220@PySys_Init
  0044b	e8 00 00 00 00	 call	 _Px_Dealloc
  00450	eb 14		 jmp	 SHORT $LN109@PySys_Init
$LN220@PySys_Init:
  00452	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00456	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0045c	eb 08		 jmp	 SHORT $LN109@PySys_Init
$LN215@PySys_Init:
  0045e	48 8b cb	 mov	 rcx, rbx
  00461	e8 00 00 00 00	 call	 Px_DecRef
$LN109@PySys_Init:

; 1619 :     SET_SYS_FROM_STRING("executable",
; 1620 :                         PyUnicode_FromWideChar(
; 1621 :                                Py_GetProgramFullPath(), -1));

  00466	e8 00 00 00 00	 call	 Py_GetProgramFullPath
  0046b	48 83 ca ff	 or	 rdx, -1
  0046f	48 8b c8	 mov	 rcx, rax
  00472	e8 00 00 00 00	 call	 PyUnicode_FromWideChar
  00477	48 8b d8	 mov	 rbx, rax
  0047a	48 85 c0	 test	 rax, rax
  0047d	74 77		 je	 SHORT $LN104@PySys_Init
  0047f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@FKCMKODO@executable?$AA@
  00486	4c 8b c0	 mov	 r8, rax
  00489	48 8b cf	 mov	 rcx, rdi
  0048c	e8 00 00 00 00	 call	 PyDict_SetItemString
  00491	e8 00 00 00 00	 call	 _Py_PXCTX
  00496	85 c0		 test	 eax, eax
  00498	75 5c		 jne	 SHORT $LN104@PySys_Init
  0049a	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0049e	a8 20		 test	 al, 32			; 00000020H
  004a0	75 4c		 jne	 SHORT $LN226@PySys_Init
  004a2	84 c0		 test	 al, al
  004a4	78 48		 js	 SHORT $LN226@PySys_Init
  004a6	a8 02		 test	 al, 2
  004a8	75 4c		 jne	 SHORT $LN104@PySys_Init
  004aa	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  004ae	75 46		 jne	 SHORT $LN104@PySys_Init
  004b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  004b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  004be	4c 8b cb	 mov	 r9, rbx
  004c1	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  004c7	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  004cf	e8 00 00 00 00	 call	 _PyParallel_Guard
  004d4	48 8b cb	 mov	 rcx, rbx
  004d7	85 c0		 test	 eax, eax
  004d9	74 07		 je	 SHORT $LN231@PySys_Init
  004db	e8 00 00 00 00	 call	 _Px_Dealloc
  004e0	eb 14		 jmp	 SHORT $LN104@PySys_Init
$LN231@PySys_Init:
  004e2	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  004e6	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  004ec	eb 08		 jmp	 SHORT $LN104@PySys_Init
$LN226@PySys_Init:
  004ee	48 8b cb	 mov	 rcx, rbx
  004f1	e8 00 00 00 00	 call	 Px_DecRef
$LN104@PySys_Init:

; 1622 :     SET_SYS_FROM_STRING("prefix",
; 1623 :                         PyUnicode_FromWideChar(Py_GetPrefix(), -1));

  004f6	e8 00 00 00 00	 call	 Py_GetPrefix
  004fb	48 83 ca ff	 or	 rdx, -1
  004ff	48 8b c8	 mov	 rcx, rax
  00502	e8 00 00 00 00	 call	 PyUnicode_FromWideChar
  00507	48 8b d8	 mov	 rbx, rax
  0050a	48 85 c0	 test	 rax, rax
  0050d	74 77		 je	 SHORT $LN99@PySys_Init
  0050f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06CHGOAPND@prefix?$AA@
  00516	4c 8b c0	 mov	 r8, rax
  00519	48 8b cf	 mov	 rcx, rdi
  0051c	e8 00 00 00 00	 call	 PyDict_SetItemString
  00521	e8 00 00 00 00	 call	 _Py_PXCTX
  00526	85 c0		 test	 eax, eax
  00528	75 5c		 jne	 SHORT $LN99@PySys_Init
  0052a	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0052e	a8 20		 test	 al, 32			; 00000020H
  00530	75 4c		 jne	 SHORT $LN237@PySys_Init
  00532	84 c0		 test	 al, al
  00534	78 48		 js	 SHORT $LN237@PySys_Init
  00536	a8 02		 test	 al, 2
  00538	75 4c		 jne	 SHORT $LN99@PySys_Init
  0053a	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0053e	75 46		 jne	 SHORT $LN99@PySys_Init
  00540	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00547	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0054e	4c 8b cb	 mov	 r9, rbx
  00551	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00557	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0055f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00564	48 8b cb	 mov	 rcx, rbx
  00567	85 c0		 test	 eax, eax
  00569	74 07		 je	 SHORT $LN242@PySys_Init
  0056b	e8 00 00 00 00	 call	 _Px_Dealloc
  00570	eb 14		 jmp	 SHORT $LN99@PySys_Init
$LN242@PySys_Init:
  00572	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00576	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0057c	eb 08		 jmp	 SHORT $LN99@PySys_Init
$LN237@PySys_Init:
  0057e	48 8b cb	 mov	 rcx, rbx
  00581	e8 00 00 00 00	 call	 Px_DecRef
$LN99@PySys_Init:

; 1624 :     SET_SYS_FROM_STRING("exec_prefix",
; 1625 :                         PyUnicode_FromWideChar(Py_GetExecPrefix(), -1));

  00586	e8 00 00 00 00	 call	 Py_GetExecPrefix
  0058b	48 83 ca ff	 or	 rdx, -1
  0058f	48 8b c8	 mov	 rcx, rax
  00592	e8 00 00 00 00	 call	 PyUnicode_FromWideChar
  00597	48 8b d8	 mov	 rbx, rax
  0059a	48 85 c0	 test	 rax, rax
  0059d	74 77		 je	 SHORT $LN94@PySys_Init
  0059f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@OLOBCNFD@exec_prefix?$AA@
  005a6	4c 8b c0	 mov	 r8, rax
  005a9	48 8b cf	 mov	 rcx, rdi
  005ac	e8 00 00 00 00	 call	 PyDict_SetItemString
  005b1	e8 00 00 00 00	 call	 _Py_PXCTX
  005b6	85 c0		 test	 eax, eax
  005b8	75 5c		 jne	 SHORT $LN94@PySys_Init
  005ba	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  005be	a8 20		 test	 al, 32			; 00000020H
  005c0	75 4c		 jne	 SHORT $LN248@PySys_Init
  005c2	84 c0		 test	 al, al
  005c4	78 48		 js	 SHORT $LN248@PySys_Init
  005c6	a8 02		 test	 al, 2
  005c8	75 4c		 jne	 SHORT $LN94@PySys_Init
  005ca	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  005ce	75 46		 jne	 SHORT $LN94@PySys_Init
  005d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  005d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  005de	4c 8b cb	 mov	 r9, rbx
  005e1	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  005e7	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  005ef	e8 00 00 00 00	 call	 _PyParallel_Guard
  005f4	48 8b cb	 mov	 rcx, rbx
  005f7	85 c0		 test	 eax, eax
  005f9	74 07		 je	 SHORT $LN253@PySys_Init
  005fb	e8 00 00 00 00	 call	 _Px_Dealloc
  00600	eb 14		 jmp	 SHORT $LN94@PySys_Init
$LN253@PySys_Init:
  00602	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00606	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0060c	eb 08		 jmp	 SHORT $LN94@PySys_Init
$LN248@PySys_Init:
  0060e	48 8b cb	 mov	 rcx, rbx
  00611	e8 00 00 00 00	 call	 Px_DecRef
$LN94@PySys_Init:

; 1626 :     SET_SYS_FROM_STRING("base_prefix",
; 1627 :                         PyUnicode_FromWideChar(Py_GetPrefix(), -1));

  00616	e8 00 00 00 00	 call	 Py_GetPrefix
  0061b	48 83 ca ff	 or	 rdx, -1
  0061f	48 8b c8	 mov	 rcx, rax
  00622	e8 00 00 00 00	 call	 PyUnicode_FromWideChar
  00627	48 8b d8	 mov	 rbx, rax
  0062a	48 85 c0	 test	 rax, rax
  0062d	74 77		 je	 SHORT $LN89@PySys_Init
  0062f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@BDGILGLH@base_prefix?$AA@
  00636	4c 8b c0	 mov	 r8, rax
  00639	48 8b cf	 mov	 rcx, rdi
  0063c	e8 00 00 00 00	 call	 PyDict_SetItemString
  00641	e8 00 00 00 00	 call	 _Py_PXCTX
  00646	85 c0		 test	 eax, eax
  00648	75 5c		 jne	 SHORT $LN89@PySys_Init
  0064a	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0064e	a8 20		 test	 al, 32			; 00000020H
  00650	75 4c		 jne	 SHORT $LN259@PySys_Init
  00652	84 c0		 test	 al, al
  00654	78 48		 js	 SHORT $LN259@PySys_Init
  00656	a8 02		 test	 al, 2
  00658	75 4c		 jne	 SHORT $LN89@PySys_Init
  0065a	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0065e	75 46		 jne	 SHORT $LN89@PySys_Init
  00660	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00667	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0066e	4c 8b cb	 mov	 r9, rbx
  00671	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00677	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0067f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00684	48 8b cb	 mov	 rcx, rbx
  00687	85 c0		 test	 eax, eax
  00689	74 07		 je	 SHORT $LN264@PySys_Init
  0068b	e8 00 00 00 00	 call	 _Px_Dealloc
  00690	eb 14		 jmp	 SHORT $LN89@PySys_Init
$LN264@PySys_Init:
  00692	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00696	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0069c	eb 08		 jmp	 SHORT $LN89@PySys_Init
$LN259@PySys_Init:
  0069e	48 8b cb	 mov	 rcx, rbx
  006a1	e8 00 00 00 00	 call	 Px_DecRef
$LN89@PySys_Init:

; 1628 :     SET_SYS_FROM_STRING("base_exec_prefix",
; 1629 :                         PyUnicode_FromWideChar(Py_GetExecPrefix(), -1));

  006a6	e8 00 00 00 00	 call	 Py_GetExecPrefix
  006ab	48 83 ca ff	 or	 rdx, -1
  006af	48 8b c8	 mov	 rcx, rax
  006b2	e8 00 00 00 00	 call	 PyUnicode_FromWideChar
  006b7	48 8b d8	 mov	 rbx, rax
  006ba	48 85 c0	 test	 rax, rax
  006bd	74 77		 je	 SHORT $LN84@PySys_Init
  006bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@FIIOHCIL@base_exec_prefix?$AA@
  006c6	4c 8b c0	 mov	 r8, rax
  006c9	48 8b cf	 mov	 rcx, rdi
  006cc	e8 00 00 00 00	 call	 PyDict_SetItemString
  006d1	e8 00 00 00 00	 call	 _Py_PXCTX
  006d6	85 c0		 test	 eax, eax
  006d8	75 5c		 jne	 SHORT $LN84@PySys_Init
  006da	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  006de	a8 20		 test	 al, 32			; 00000020H
  006e0	75 4c		 jne	 SHORT $LN270@PySys_Init
  006e2	84 c0		 test	 al, al
  006e4	78 48		 js	 SHORT $LN270@PySys_Init
  006e6	a8 02		 test	 al, 2
  006e8	75 4c		 jne	 SHORT $LN84@PySys_Init
  006ea	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  006ee	75 46		 jne	 SHORT $LN84@PySys_Init
  006f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  006f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  006fe	4c 8b cb	 mov	 r9, rbx
  00701	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00707	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0070f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00714	48 8b cb	 mov	 rcx, rbx
  00717	85 c0		 test	 eax, eax
  00719	74 07		 je	 SHORT $LN275@PySys_Init
  0071b	e8 00 00 00 00	 call	 _Px_Dealloc
  00720	eb 14		 jmp	 SHORT $LN84@PySys_Init
$LN275@PySys_Init:
  00722	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00726	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0072c	eb 08		 jmp	 SHORT $LN84@PySys_Init
$LN270@PySys_Init:
  0072e	48 8b cb	 mov	 rcx, rbx
  00731	e8 00 00 00 00	 call	 Px_DecRef
$LN84@PySys_Init:

; 1630 :     SET_SYS_FROM_STRING("maxsize",
; 1631 :                         PyLong_FromSsize_t(PY_SSIZE_T_MAX));

  00736	48 b9 ff ff ff
	ff ff ff ff 7f	 mov	 rcx, 9223372036854775807 ; 7fffffffffffffffH
  00740	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  00745	48 8b d8	 mov	 rbx, rax
  00748	48 85 c0	 test	 rax, rax
  0074b	74 77		 je	 SHORT $LN79@PySys_Init
  0074d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07KCDDANPD@maxsize?$AA@
  00754	4c 8b c0	 mov	 r8, rax
  00757	48 8b cf	 mov	 rcx, rdi
  0075a	e8 00 00 00 00	 call	 PyDict_SetItemString
  0075f	e8 00 00 00 00	 call	 _Py_PXCTX
  00764	85 c0		 test	 eax, eax
  00766	75 5c		 jne	 SHORT $LN79@PySys_Init
  00768	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0076c	a8 20		 test	 al, 32			; 00000020H
  0076e	75 4c		 jne	 SHORT $LN281@PySys_Init
  00770	84 c0		 test	 al, al
  00772	78 48		 js	 SHORT $LN281@PySys_Init
  00774	a8 02		 test	 al, 2
  00776	75 4c		 jne	 SHORT $LN79@PySys_Init
  00778	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0077c	75 46		 jne	 SHORT $LN79@PySys_Init
  0077e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00785	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0078c	4c 8b cb	 mov	 r9, rbx
  0078f	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00795	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0079d	e8 00 00 00 00	 call	 _PyParallel_Guard
  007a2	48 8b cb	 mov	 rcx, rbx
  007a5	85 c0		 test	 eax, eax
  007a7	74 07		 je	 SHORT $LN286@PySys_Init
  007a9	e8 00 00 00 00	 call	 _Px_Dealloc
  007ae	eb 14		 jmp	 SHORT $LN79@PySys_Init
$LN286@PySys_Init:
  007b0	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  007b4	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  007ba	eb 08		 jmp	 SHORT $LN79@PySys_Init
$LN281@PySys_Init:
  007bc	48 8b cb	 mov	 rcx, rbx
  007bf	e8 00 00 00 00	 call	 Px_DecRef
$LN79@PySys_Init:

; 1632 :     SET_SYS_FROM_STRING("float_info",
; 1633 :                         PyFloat_GetInfo());

  007c4	e8 00 00 00 00	 call	 PyFloat_GetInfo
  007c9	48 8b d8	 mov	 rbx, rax
  007cc	48 85 c0	 test	 rax, rax
  007cf	74 77		 je	 SHORT $LN74@PySys_Init
  007d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@HMECADCK@float_info?$AA@
  007d8	4c 8b c0	 mov	 r8, rax
  007db	48 8b cf	 mov	 rcx, rdi
  007de	e8 00 00 00 00	 call	 PyDict_SetItemString
  007e3	e8 00 00 00 00	 call	 _Py_PXCTX
  007e8	85 c0		 test	 eax, eax
  007ea	75 5c		 jne	 SHORT $LN74@PySys_Init
  007ec	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  007f0	a8 20		 test	 al, 32			; 00000020H
  007f2	75 4c		 jne	 SHORT $LN292@PySys_Init
  007f4	84 c0		 test	 al, al
  007f6	78 48		 js	 SHORT $LN292@PySys_Init
  007f8	a8 02		 test	 al, 2
  007fa	75 4c		 jne	 SHORT $LN74@PySys_Init
  007fc	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00800	75 46		 jne	 SHORT $LN74@PySys_Init
  00802	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00809	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00810	4c 8b cb	 mov	 r9, rbx
  00813	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00819	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00821	e8 00 00 00 00	 call	 _PyParallel_Guard
  00826	48 8b cb	 mov	 rcx, rbx
  00829	85 c0		 test	 eax, eax
  0082b	74 07		 je	 SHORT $LN297@PySys_Init
  0082d	e8 00 00 00 00	 call	 _Px_Dealloc
  00832	eb 14		 jmp	 SHORT $LN74@PySys_Init
$LN297@PySys_Init:
  00834	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00838	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0083e	eb 08		 jmp	 SHORT $LN74@PySys_Init
$LN292@PySys_Init:
  00840	48 8b cb	 mov	 rcx, rbx
  00843	e8 00 00 00 00	 call	 Px_DecRef
$LN74@PySys_Init:

; 1634 :     SET_SYS_FROM_STRING("int_info",
; 1635 :                         PyLong_GetInfo());

  00848	e8 00 00 00 00	 call	 PyLong_GetInfo
  0084d	48 8b d8	 mov	 rbx, rax
  00850	48 85 c0	 test	 rax, rax
  00853	74 77		 je	 SHORT $LN69@PySys_Init
  00855	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08CIEMHFML@int_info?$AA@
  0085c	4c 8b c0	 mov	 r8, rax
  0085f	48 8b cf	 mov	 rcx, rdi
  00862	e8 00 00 00 00	 call	 PyDict_SetItemString
  00867	e8 00 00 00 00	 call	 _Py_PXCTX
  0086c	85 c0		 test	 eax, eax
  0086e	75 5c		 jne	 SHORT $LN69@PySys_Init
  00870	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00874	a8 20		 test	 al, 32			; 00000020H
  00876	75 4c		 jne	 SHORT $LN303@PySys_Init
  00878	84 c0		 test	 al, al
  0087a	78 48		 js	 SHORT $LN303@PySys_Init
  0087c	a8 02		 test	 al, 2
  0087e	75 4c		 jne	 SHORT $LN69@PySys_Init
  00880	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00884	75 46		 jne	 SHORT $LN69@PySys_Init
  00886	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0088d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00894	4c 8b cb	 mov	 r9, rbx
  00897	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0089d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  008a5	e8 00 00 00 00	 call	 _PyParallel_Guard
  008aa	48 8b cb	 mov	 rcx, rbx
  008ad	85 c0		 test	 eax, eax
  008af	74 07		 je	 SHORT $LN308@PySys_Init
  008b1	e8 00 00 00 00	 call	 _Px_Dealloc
  008b6	eb 14		 jmp	 SHORT $LN69@PySys_Init
$LN308@PySys_Init:
  008b8	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  008bc	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  008c2	eb 08		 jmp	 SHORT $LN69@PySys_Init
$LN303@PySys_Init:
  008c4	48 8b cb	 mov	 rcx, rbx
  008c7	e8 00 00 00 00	 call	 Px_DecRef
$LN69@PySys_Init:

; 1636 :     /* initialize hash_info */
; 1637 :     if (Hash_InfoType.tp_name == 0)

  008cc	48 83 3d 70 00
	00 00 00	 cmp	 QWORD PTR Hash_InfoType+112, 0
  008d4	75 13		 jne	 SHORT $LN66@PySys_Init

; 1638 :         PyStructSequence_InitType(&Hash_InfoType, &hash_info_desc);

  008d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:hash_info_desc
  008dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:Hash_InfoType
  008e4	e8 00 00 00 00	 call	 PyStructSequence_InitType
$LN66@PySys_Init:

; 1639 :     SET_SYS_FROM_STRING("hash_info",
; 1640 :                         get_hash_info());

  008e9	e8 00 00 00 00	 call	 get_hash_info
  008ee	48 8b d8	 mov	 rbx, rax
  008f1	48 85 c0	 test	 rax, rax
  008f4	74 77		 je	 SHORT $LN63@PySys_Init
  008f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09BDOHDNMP@hash_info?$AA@
  008fd	4c 8b c0	 mov	 r8, rax
  00900	48 8b cf	 mov	 rcx, rdi
  00903	e8 00 00 00 00	 call	 PyDict_SetItemString
  00908	e8 00 00 00 00	 call	 _Py_PXCTX
  0090d	85 c0		 test	 eax, eax
  0090f	75 5c		 jne	 SHORT $LN63@PySys_Init
  00911	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00915	a8 20		 test	 al, 32			; 00000020H
  00917	75 4c		 jne	 SHORT $LN314@PySys_Init
  00919	84 c0		 test	 al, al
  0091b	78 48		 js	 SHORT $LN314@PySys_Init
  0091d	a8 02		 test	 al, 2
  0091f	75 4c		 jne	 SHORT $LN63@PySys_Init
  00921	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00925	75 46		 jne	 SHORT $LN63@PySys_Init
  00927	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0092e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00935	4c 8b cb	 mov	 r9, rbx
  00938	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0093e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00946	e8 00 00 00 00	 call	 _PyParallel_Guard
  0094b	48 8b cb	 mov	 rcx, rbx
  0094e	85 c0		 test	 eax, eax
  00950	74 07		 je	 SHORT $LN319@PySys_Init
  00952	e8 00 00 00 00	 call	 _Px_Dealloc
  00957	eb 14		 jmp	 SHORT $LN63@PySys_Init
$LN319@PySys_Init:
  00959	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0095d	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00963	eb 08		 jmp	 SHORT $LN63@PySys_Init
$LN314@PySys_Init:
  00965	48 8b cb	 mov	 rcx, rbx
  00968	e8 00 00 00 00	 call	 Px_DecRef
$LN63@PySys_Init:

; 1641 :     SET_SYS_FROM_STRING("maxunicode",
; 1642 :                         PyLong_FromLong(0x10FFFF));

  0096d	b9 ff ff 10 00	 mov	 ecx, 1114111		; 0010ffffH
  00972	e8 00 00 00 00	 call	 PyLong_FromLong
  00977	48 8b d8	 mov	 rbx, rax
  0097a	48 85 c0	 test	 rax, rax
  0097d	74 77		 je	 SHORT $LN58@PySys_Init
  0097f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@IACHHLKH@maxunicode?$AA@
  00986	4c 8b c0	 mov	 r8, rax
  00989	48 8b cf	 mov	 rcx, rdi
  0098c	e8 00 00 00 00	 call	 PyDict_SetItemString
  00991	e8 00 00 00 00	 call	 _Py_PXCTX
  00996	85 c0		 test	 eax, eax
  00998	75 5c		 jne	 SHORT $LN58@PySys_Init
  0099a	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0099e	a8 20		 test	 al, 32			; 00000020H
  009a0	75 4c		 jne	 SHORT $LN325@PySys_Init
  009a2	84 c0		 test	 al, al
  009a4	78 48		 js	 SHORT $LN325@PySys_Init
  009a6	a8 02		 test	 al, 2
  009a8	75 4c		 jne	 SHORT $LN58@PySys_Init
  009aa	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  009ae	75 46		 jne	 SHORT $LN58@PySys_Init
  009b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  009b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  009be	4c 8b cb	 mov	 r9, rbx
  009c1	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  009c7	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  009cf	e8 00 00 00 00	 call	 _PyParallel_Guard
  009d4	48 8b cb	 mov	 rcx, rbx
  009d7	85 c0		 test	 eax, eax
  009d9	74 07		 je	 SHORT $LN330@PySys_Init
  009db	e8 00 00 00 00	 call	 _Px_Dealloc
  009e0	eb 14		 jmp	 SHORT $LN58@PySys_Init
$LN330@PySys_Init:
  009e2	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  009e6	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  009ec	eb 08		 jmp	 SHORT $LN58@PySys_Init
$LN325@PySys_Init:
  009ee	48 8b cb	 mov	 rcx, rbx
  009f1	e8 00 00 00 00	 call	 Px_DecRef
$LN58@PySys_Init:

; 1643 :     SET_SYS_FROM_STRING("builtin_module_names",
; 1644 :                         list_builtin_module_names());

  009f6	e8 00 00 00 00	 call	 list_builtin_module_names
  009fb	48 8b d8	 mov	 rbx, rax
  009fe	48 85 c0	 test	 rax, rax
  00a01	74 77		 je	 SHORT $LN53@PySys_Init
  00a03	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@LPKMLNFN@builtin_module_names?$AA@
  00a0a	4c 8b c0	 mov	 r8, rax
  00a0d	48 8b cf	 mov	 rcx, rdi
  00a10	e8 00 00 00 00	 call	 PyDict_SetItemString
  00a15	e8 00 00 00 00	 call	 _Py_PXCTX
  00a1a	85 c0		 test	 eax, eax
  00a1c	75 5c		 jne	 SHORT $LN53@PySys_Init
  00a1e	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00a22	a8 20		 test	 al, 32			; 00000020H
  00a24	75 4c		 jne	 SHORT $LN336@PySys_Init
  00a26	84 c0		 test	 al, al
  00a28	78 48		 js	 SHORT $LN336@PySys_Init
  00a2a	a8 02		 test	 al, 2
  00a2c	75 4c		 jne	 SHORT $LN53@PySys_Init
  00a2e	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00a32	75 46		 jne	 SHORT $LN53@PySys_Init
  00a34	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00a3b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00a42	4c 8b cb	 mov	 r9, rbx
  00a45	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00a4b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00a53	e8 00 00 00 00	 call	 _PyParallel_Guard
  00a58	48 8b cb	 mov	 rcx, rbx
  00a5b	85 c0		 test	 eax, eax
  00a5d	74 07		 je	 SHORT $LN341@PySys_Init
  00a5f	e8 00 00 00 00	 call	 _Px_Dealloc
  00a64	eb 14		 jmp	 SHORT $LN53@PySys_Init
$LN341@PySys_Init:
  00a66	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00a6a	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00a70	eb 08		 jmp	 SHORT $LN53@PySys_Init
$LN336@PySys_Init:
  00a72	48 8b cb	 mov	 rcx, rbx
  00a75	e8 00 00 00 00	 call	 Px_DecRef
$LN53@PySys_Init:

; 1645 :     {
; 1646 :         /* Assumes that longs are at least 2 bytes long.
; 1647 :            Should be safe! */
; 1648 :         unsigned long number = 1;
; 1649 :         char *value;
; 1650 : 
; 1651 :         s = (char *) &number;
; 1652 :         if (s[0] == 0)
; 1653 :             value = "big";
; 1654 :         else
; 1655 :             value = "little";
; 1656 :         SET_SYS_FROM_STRING("byteorder",
; 1657 :                             PyUnicode_FromString(value));

  00a7a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06LADGIEOA@little?$AA@
  00a81	e8 00 00 00 00	 call	 PyUnicode_FromString
  00a86	48 8b d8	 mov	 rbx, rax
  00a89	48 85 c0	 test	 rax, rax
  00a8c	74 77		 je	 SHORT $LN46@PySys_Init
  00a8e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09PJBCLGKJ@byteorder?$AA@
  00a95	4c 8b c0	 mov	 r8, rax
  00a98	48 8b cf	 mov	 rcx, rdi
  00a9b	e8 00 00 00 00	 call	 PyDict_SetItemString
  00aa0	e8 00 00 00 00	 call	 _Py_PXCTX
  00aa5	85 c0		 test	 eax, eax
  00aa7	75 5c		 jne	 SHORT $LN46@PySys_Init
  00aa9	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00aad	a8 20		 test	 al, 32			; 00000020H
  00aaf	75 4c		 jne	 SHORT $LN347@PySys_Init
  00ab1	84 c0		 test	 al, al
  00ab3	78 48		 js	 SHORT $LN347@PySys_Init
  00ab5	a8 02		 test	 al, 2
  00ab7	75 4c		 jne	 SHORT $LN46@PySys_Init
  00ab9	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00abd	75 46		 jne	 SHORT $LN46@PySys_Init
  00abf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00ac6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00acd	4c 8b cb	 mov	 r9, rbx
  00ad0	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00ad6	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00ade	e8 00 00 00 00	 call	 _PyParallel_Guard
  00ae3	48 8b cb	 mov	 rcx, rbx
  00ae6	85 c0		 test	 eax, eax
  00ae8	74 07		 je	 SHORT $LN352@PySys_Init
  00aea	e8 00 00 00 00	 call	 _Px_Dealloc
  00aef	eb 14		 jmp	 SHORT $LN46@PySys_Init
$LN352@PySys_Init:
  00af1	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00af5	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00afb	eb 08		 jmp	 SHORT $LN46@PySys_Init
$LN347@PySys_Init:
  00afd	48 8b cb	 mov	 rcx, rbx
  00b00	e8 00 00 00 00	 call	 Px_DecRef
$LN46@PySys_Init:

; 1658 :     }
; 1659 : #ifdef MS_COREDLL
; 1660 :     SET_SYS_FROM_STRING("dllhandle",
; 1661 :                         PyLong_FromVoidPtr(PyWin_DLLhModule));

  00b05	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyWin_DLLhModule
  00b0c	e8 00 00 00 00	 call	 PyLong_FromVoidPtr
  00b11	48 8b d8	 mov	 rbx, rax
  00b14	48 85 c0	 test	 rax, rax
  00b17	74 77		 je	 SHORT $LN41@PySys_Init
  00b19	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09EJJKCOGE@dllhandle?$AA@
  00b20	4c 8b c0	 mov	 r8, rax
  00b23	48 8b cf	 mov	 rcx, rdi
  00b26	e8 00 00 00 00	 call	 PyDict_SetItemString
  00b2b	e8 00 00 00 00	 call	 _Py_PXCTX
  00b30	85 c0		 test	 eax, eax
  00b32	75 5c		 jne	 SHORT $LN41@PySys_Init
  00b34	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00b38	a8 20		 test	 al, 32			; 00000020H
  00b3a	75 4c		 jne	 SHORT $LN358@PySys_Init
  00b3c	84 c0		 test	 al, al
  00b3e	78 48		 js	 SHORT $LN358@PySys_Init
  00b40	a8 02		 test	 al, 2
  00b42	75 4c		 jne	 SHORT $LN41@PySys_Init
  00b44	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00b48	75 46		 jne	 SHORT $LN41@PySys_Init
  00b4a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00b51	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00b58	4c 8b cb	 mov	 r9, rbx
  00b5b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00b61	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00b69	e8 00 00 00 00	 call	 _PyParallel_Guard
  00b6e	48 8b cb	 mov	 rcx, rbx
  00b71	85 c0		 test	 eax, eax
  00b73	74 07		 je	 SHORT $LN363@PySys_Init
  00b75	e8 00 00 00 00	 call	 _Px_Dealloc
  00b7a	eb 14		 jmp	 SHORT $LN41@PySys_Init
$LN363@PySys_Init:
  00b7c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00b80	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00b86	eb 08		 jmp	 SHORT $LN41@PySys_Init
$LN358@PySys_Init:
  00b88	48 8b cb	 mov	 rcx, rbx
  00b8b	e8 00 00 00 00	 call	 Px_DecRef
$LN41@PySys_Init:

; 1662 :     SET_SYS_FROM_STRING("winver",
; 1663 :                         PyUnicode_FromString(PyWin_DLLVersionString));

  00b90	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyWin_DLLVersionString
  00b97	e8 00 00 00 00	 call	 PyUnicode_FromString
  00b9c	48 8b d8	 mov	 rbx, rax
  00b9f	48 85 c0	 test	 rax, rax
  00ba2	74 77		 je	 SHORT $LN36@PySys_Init
  00ba4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06FPOELEGF@winver?$AA@
  00bab	4c 8b c0	 mov	 r8, rax
  00bae	48 8b cf	 mov	 rcx, rdi
  00bb1	e8 00 00 00 00	 call	 PyDict_SetItemString
  00bb6	e8 00 00 00 00	 call	 _Py_PXCTX
  00bbb	85 c0		 test	 eax, eax
  00bbd	75 5c		 jne	 SHORT $LN36@PySys_Init
  00bbf	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00bc3	a8 20		 test	 al, 32			; 00000020H
  00bc5	75 4c		 jne	 SHORT $LN369@PySys_Init
  00bc7	84 c0		 test	 al, al
  00bc9	78 48		 js	 SHORT $LN369@PySys_Init
  00bcb	a8 02		 test	 al, 2
  00bcd	75 4c		 jne	 SHORT $LN36@PySys_Init
  00bcf	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00bd3	75 46		 jne	 SHORT $LN36@PySys_Init
  00bd5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00bdc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00be3	4c 8b cb	 mov	 r9, rbx
  00be6	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00bec	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00bf4	e8 00 00 00 00	 call	 _PyParallel_Guard
  00bf9	48 8b cb	 mov	 rcx, rbx
  00bfc	85 c0		 test	 eax, eax
  00bfe	74 07		 je	 SHORT $LN374@PySys_Init
  00c00	e8 00 00 00 00	 call	 _Px_Dealloc
  00c05	eb 14		 jmp	 SHORT $LN36@PySys_Init
$LN374@PySys_Init:
  00c07	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00c0b	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00c11	eb 08		 jmp	 SHORT $LN36@PySys_Init
$LN369@PySys_Init:
  00c13	48 8b cb	 mov	 rcx, rbx
  00c16	e8 00 00 00 00	 call	 Px_DecRef
$LN36@PySys_Init:

; 1664 : #endif
; 1665 : #ifdef ABIFLAGS
; 1666 :     SET_SYS_FROM_STRING("abiflags",
; 1667 :                         PyUnicode_FromString(ABIFLAGS));
; 1668 : #endif
; 1669 :     if (warnoptions == NULL) {

  00c1b	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR warnoptions
  00c22	48 85 db	 test	 rbx, rbx
  00c25	75 10		 jne	 SHORT $LN33@PySys_Init

; 1670 :         warnoptions = PyList_New(0);

  00c27	33 c9		 xor	 ecx, ecx
  00c29	e8 00 00 00 00	 call	 PyList_New
  00c2e	48 89 05 00 00
	00 00		 mov	 QWORD PTR warnoptions, rax

; 1671 :     }
; 1672 :     else {

  00c35	eb 42		 jmp	 SHORT $LN377@PySys_Init
$LN33@PySys_Init:

; 1673 :         Py_INCREF(warnoptions);

  00c37	e8 00 00 00 00	 call	 _Py_PXCTX
  00c3c	85 c0		 test	 eax, eax
  00c3e	75 32		 jne	 SHORT $LN435@PySys_Init
  00c40	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00c47	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00c4e	4c 8b cb	 mov	 r9, rbx
  00c51	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00c57	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00c5f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00c64	85 c0		 test	 eax, eax
  00c66	75 06		 jne	 SHORT $LN376@PySys_Init
  00c68	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00c6c	74 04		 je	 SHORT $LN435@PySys_Init
$LN376@PySys_Init:
  00c6e	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN435@PySys_Init:
  00c72	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR warnoptions
$LN377@PySys_Init:

; 1674 :     }
; 1675 :     if (warnoptions != NULL) {

  00c79	48 85 c0	 test	 rax, rax
  00c7c	74 12		 je	 SHORT $LN31@PySys_Init

; 1676 :         PyDict_SetItemString(sysdict, "warnoptions", warnoptions);

  00c7e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@OHJDAEBN@warnoptions?$AA@
  00c85	4c 8b c0	 mov	 r8, rax
  00c88	48 8b cf	 mov	 rcx, rdi
  00c8b	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN31@PySys_Init:

; 1677 :     }
; 1678 : 
; 1679 :     v = get_xoptions();

  00c90	e8 00 00 00 00	 call	 get_xoptions

; 1680 :     if (v != NULL) {

  00c95	48 85 c0	 test	 rax, rax
  00c98	74 12		 je	 SHORT $LN30@PySys_Init

; 1681 :         PyDict_SetItemString(sysdict, "_xoptions", v);

  00c9a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09NLDNDIBM@_xoptions?$AA@
  00ca1	4c 8b c0	 mov	 r8, rax
  00ca4	48 8b cf	 mov	 rcx, rdi
  00ca7	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN30@PySys_Init:

; 1682 :     }
; 1683 : 
; 1684 :     /* version_info */
; 1685 :     if (VersionInfoType.tp_name == 0)

  00cac	48 83 3d 70 00
	00 00 00	 cmp	 QWORD PTR VersionInfoType+112, 0
  00cb4	75 13		 jne	 SHORT $LN29@PySys_Init

; 1686 :         PyStructSequence_InitType(&VersionInfoType, &version_info_desc);

  00cb6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:version_info_desc
  00cbd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:VersionInfoType
  00cc4	e8 00 00 00 00	 call	 PyStructSequence_InitType
$LN29@PySys_Init:

; 1687 :     version_info = make_version_info();

  00cc9	e8 00 00 00 00	 call	 make_version_info
  00cce	48 8b d8	 mov	 rbx, rax

; 1688 :     SET_SYS_FROM_STRING("version_info", version_info);

  00cd1	48 85 c0	 test	 rax, rax
  00cd4	74 77		 je	 SHORT $LN26@PySys_Init
  00cd6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@NPOFIJBB@version_info?$AA@
  00cdd	4c 8b c0	 mov	 r8, rax
  00ce0	48 8b cf	 mov	 rcx, rdi
  00ce3	e8 00 00 00 00	 call	 PyDict_SetItemString
  00ce8	e8 00 00 00 00	 call	 _Py_PXCTX
  00ced	85 c0		 test	 eax, eax
  00cef	75 5c		 jne	 SHORT $LN26@PySys_Init
  00cf1	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00cf5	a8 20		 test	 al, 32			; 00000020H
  00cf7	75 4c		 jne	 SHORT $LN384@PySys_Init
  00cf9	84 c0		 test	 al, al
  00cfb	78 48		 js	 SHORT $LN384@PySys_Init
  00cfd	a8 02		 test	 al, 2
  00cff	75 4c		 jne	 SHORT $LN26@PySys_Init
  00d01	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00d05	75 46		 jne	 SHORT $LN26@PySys_Init
  00d07	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00d0e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00d15	4c 8b cb	 mov	 r9, rbx
  00d18	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00d1e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00d26	e8 00 00 00 00	 call	 _PyParallel_Guard
  00d2b	48 8b cb	 mov	 rcx, rbx
  00d2e	85 c0		 test	 eax, eax
  00d30	74 07		 je	 SHORT $LN389@PySys_Init
  00d32	e8 00 00 00 00	 call	 _Px_Dealloc
  00d37	eb 14		 jmp	 SHORT $LN26@PySys_Init
$LN389@PySys_Init:
  00d39	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00d3d	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00d43	eb 08		 jmp	 SHORT $LN26@PySys_Init
$LN384@PySys_Init:
  00d45	48 8b cb	 mov	 rcx, rbx
  00d48	e8 00 00 00 00	 call	 Px_DecRef
$LN26@PySys_Init:

; 1689 :     /* prevent user from creating new instances */
; 1690 :     VersionInfoType.tp_init = NULL;

  00d4d	33 ed		 xor	 ebp, ebp

; 1691 :     VersionInfoType.tp_new = NULL;
; 1692 : 
; 1693 :     /* implementation */
; 1694 :     SET_SYS_FROM_STRING("implementation", make_impl_info(version_info));

  00d4f	48 8b cb	 mov	 rcx, rbx
  00d52	48 89 2d 80 01
	00 00		 mov	 QWORD PTR VersionInfoType+384, rbp
  00d59	48 89 2d 90 01
	00 00		 mov	 QWORD PTR VersionInfoType+400, rbp
  00d60	e8 00 00 00 00	 call	 make_impl_info
  00d65	48 8b d8	 mov	 rbx, rax
  00d68	48 85 c0	 test	 rax, rax
  00d6b	74 77		 je	 SHORT $LN21@PySys_Init
  00d6d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@EPOCNDEG@implementation?$AA@
  00d74	4c 8b c0	 mov	 r8, rax
  00d77	48 8b cf	 mov	 rcx, rdi
  00d7a	e8 00 00 00 00	 call	 PyDict_SetItemString
  00d7f	e8 00 00 00 00	 call	 _Py_PXCTX
  00d84	85 c0		 test	 eax, eax
  00d86	75 5c		 jne	 SHORT $LN21@PySys_Init
  00d88	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00d8c	a8 20		 test	 al, 32			; 00000020H
  00d8e	75 4c		 jne	 SHORT $LN395@PySys_Init
  00d90	84 c0		 test	 al, al
  00d92	78 48		 js	 SHORT $LN395@PySys_Init
  00d94	a8 02		 test	 al, 2
  00d96	75 4c		 jne	 SHORT $LN21@PySys_Init
  00d98	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00d9c	75 46		 jne	 SHORT $LN21@PySys_Init
  00d9e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00da5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00dac	4c 8b cb	 mov	 r9, rbx
  00daf	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00db5	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00dbd	e8 00 00 00 00	 call	 _PyParallel_Guard
  00dc2	48 8b cb	 mov	 rcx, rbx
  00dc5	85 c0		 test	 eax, eax
  00dc7	74 07		 je	 SHORT $LN400@PySys_Init
  00dc9	e8 00 00 00 00	 call	 _Px_Dealloc
  00dce	eb 14		 jmp	 SHORT $LN21@PySys_Init
$LN400@PySys_Init:
  00dd0	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00dd4	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00dda	eb 08		 jmp	 SHORT $LN21@PySys_Init
$LN395@PySys_Init:
  00ddc	48 8b cb	 mov	 rcx, rbx
  00ddf	e8 00 00 00 00	 call	 Px_DecRef
$LN21@PySys_Init:

; 1695 : 
; 1696 :     /* flags */
; 1697 :     if (FlagsType.tp_name == 0)

  00de4	48 39 2d 70 00
	00 00		 cmp	 QWORD PTR FlagsType+112, rbp
  00deb	75 13		 jne	 SHORT $LN18@PySys_Init

; 1698 :         PyStructSequence_InitType(&FlagsType, &flags_desc);

  00ded	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:flags_desc
  00df4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:FlagsType
  00dfb	e8 00 00 00 00	 call	 PyStructSequence_InitType
$LN18@PySys_Init:

; 1699 :     SET_SYS_FROM_STRING("flags", make_flags());

  00e00	e8 00 00 00 00	 call	 make_flags
  00e05	48 8b d8	 mov	 rbx, rax
  00e08	48 85 c0	 test	 rax, rax
  00e0b	74 77		 je	 SHORT $LN15@PySys_Init
  00e0d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05GECEPKB@flags?$AA@
  00e14	4c 8b c0	 mov	 r8, rax
  00e17	48 8b cf	 mov	 rcx, rdi
  00e1a	e8 00 00 00 00	 call	 PyDict_SetItemString
  00e1f	e8 00 00 00 00	 call	 _Py_PXCTX
  00e24	85 c0		 test	 eax, eax
  00e26	75 5c		 jne	 SHORT $LN15@PySys_Init
  00e28	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00e2c	a8 20		 test	 al, 32			; 00000020H
  00e2e	75 4c		 jne	 SHORT $LN406@PySys_Init
  00e30	84 c0		 test	 al, al
  00e32	78 48		 js	 SHORT $LN406@PySys_Init
  00e34	a8 02		 test	 al, 2
  00e36	75 4c		 jne	 SHORT $LN15@PySys_Init
  00e38	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00e3c	75 46		 jne	 SHORT $LN15@PySys_Init
  00e3e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00e45	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00e4c	4c 8b cb	 mov	 r9, rbx
  00e4f	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00e55	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00e5d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00e62	48 8b cb	 mov	 rcx, rbx
  00e65	85 c0		 test	 eax, eax
  00e67	74 07		 je	 SHORT $LN411@PySys_Init
  00e69	e8 00 00 00 00	 call	 _Px_Dealloc
  00e6e	eb 14		 jmp	 SHORT $LN15@PySys_Init
$LN411@PySys_Init:
  00e70	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00e74	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00e7a	eb 08		 jmp	 SHORT $LN15@PySys_Init
$LN406@PySys_Init:
  00e7c	48 8b cb	 mov	 rcx, rbx
  00e7f	e8 00 00 00 00	 call	 Px_DecRef
$LN15@PySys_Init:

; 1700 :     /* prevent user from creating new instances */
; 1701 :     FlagsType.tp_init = NULL;
; 1702 :     FlagsType.tp_new = NULL;
; 1703 : 
; 1704 : 
; 1705 : #if defined(MS_WINDOWS)
; 1706 :     /* getwindowsversion */
; 1707 :     if (WindowsVersionType.tp_name == 0)

  00e84	48 39 2d 70 00
	00 00		 cmp	 QWORD PTR WindowsVersionType+112, rbp
  00e8b	48 89 2d 80 01
	00 00		 mov	 QWORD PTR FlagsType+384, rbp
  00e92	48 89 2d 90 01
	00 00		 mov	 QWORD PTR FlagsType+400, rbp
  00e99	75 13		 jne	 SHORT $LN12@PySys_Init

; 1708 :         PyStructSequence_InitType(&WindowsVersionType, &windows_version_desc);

  00e9b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:windows_version_desc
  00ea2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:WindowsVersionType
  00ea9	e8 00 00 00 00	 call	 PyStructSequence_InitType
$LN12@PySys_Init:

; 1709 :     /* prevent user from creating new instances */
; 1710 :     WindowsVersionType.tp_init = NULL;
; 1711 :     WindowsVersionType.tp_new = NULL;
; 1712 : #endif
; 1713 : 
; 1714 :     /* float repr style: 0.03 (short) vs 0.029999999999999999 (legacy) */
; 1715 : #ifndef PY_NO_SHORT_FLOAT_REPR
; 1716 :     SET_SYS_FROM_STRING("float_repr_style",
; 1717 :                         PyUnicode_FromString("short"));

  00eae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05BFKKPKCG@short?$AA@
  00eb5	48 89 2d 80 01
	00 00		 mov	 QWORD PTR WindowsVersionType+384, rbp
  00ebc	48 89 2d 90 01
	00 00		 mov	 QWORD PTR WindowsVersionType+400, rbp
  00ec3	e8 00 00 00 00	 call	 PyUnicode_FromString
  00ec8	48 8b d8	 mov	 rbx, rax
  00ecb	48 85 c0	 test	 rax, rax
  00ece	74 77		 je	 SHORT $LN9@PySys_Init
  00ed0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@NLDLBIPF@float_repr_style?$AA@
  00ed7	4c 8b c0	 mov	 r8, rax
  00eda	48 8b cf	 mov	 rcx, rdi
  00edd	e8 00 00 00 00	 call	 PyDict_SetItemString
  00ee2	e8 00 00 00 00	 call	 _Py_PXCTX
  00ee7	85 c0		 test	 eax, eax
  00ee9	75 5c		 jne	 SHORT $LN9@PySys_Init
  00eeb	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00eef	a8 20		 test	 al, 32			; 00000020H
  00ef1	75 4c		 jne	 SHORT $LN417@PySys_Init
  00ef3	84 c0		 test	 al, al
  00ef5	78 48		 js	 SHORT $LN417@PySys_Init
  00ef7	a8 02		 test	 al, 2
  00ef9	75 4c		 jne	 SHORT $LN9@PySys_Init
  00efb	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00eff	75 46		 jne	 SHORT $LN9@PySys_Init
  00f01	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00f08	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00f0f	4c 8b cb	 mov	 r9, rbx
  00f12	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00f18	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00f20	e8 00 00 00 00	 call	 _PyParallel_Guard
  00f25	48 8b cb	 mov	 rcx, rbx
  00f28	85 c0		 test	 eax, eax
  00f2a	74 07		 je	 SHORT $LN422@PySys_Init
  00f2c	e8 00 00 00 00	 call	 _Px_Dealloc
  00f31	eb 14		 jmp	 SHORT $LN9@PySys_Init
$LN422@PySys_Init:
  00f33	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00f37	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00f3d	eb 08		 jmp	 SHORT $LN9@PySys_Init
$LN417@PySys_Init:
  00f3f	48 8b cb	 mov	 rcx, rbx
  00f42	e8 00 00 00 00	 call	 Px_DecRef
$LN9@PySys_Init:

; 1718 : #else
; 1719 :     SET_SYS_FROM_STRING("float_repr_style",
; 1720 :                         PyUnicode_FromString("legacy"));
; 1721 : #endif
; 1722 : 
; 1723 : #ifdef WITH_THREAD
; 1724 :     SET_SYS_FROM_STRING("thread_info", PyThread_GetInfo());

  00f47	e8 00 00 00 00	 call	 PyThread_GetInfo
  00f4c	48 8b d8	 mov	 rbx, rax
  00f4f	48 85 c0	 test	 rax, rax
  00f52	74 77		 je	 SHORT $LN4@PySys_Init
  00f54	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@NCLNECCP@thread_info?$AA@
  00f5b	4c 8b c0	 mov	 r8, rax
  00f5e	48 8b cf	 mov	 rcx, rdi
  00f61	e8 00 00 00 00	 call	 PyDict_SetItemString
  00f66	e8 00 00 00 00	 call	 _Py_PXCTX
  00f6b	85 c0		 test	 eax, eax
  00f6d	75 5c		 jne	 SHORT $LN4@PySys_Init
  00f6f	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00f73	a8 20		 test	 al, 32			; 00000020H
  00f75	75 4c		 jne	 SHORT $LN428@PySys_Init
  00f77	84 c0		 test	 al, al
  00f79	78 48		 js	 SHORT $LN428@PySys_Init
  00f7b	a8 02		 test	 al, 2
  00f7d	75 4c		 jne	 SHORT $LN4@PySys_Init
  00f7f	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00f83	75 46		 jne	 SHORT $LN4@PySys_Init
  00f85	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00f8c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00f93	4c 8b cb	 mov	 r9, rbx
  00f96	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00f9c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00fa4	e8 00 00 00 00	 call	 _PyParallel_Guard
  00fa9	48 8b cb	 mov	 rcx, rbx
  00fac	85 c0		 test	 eax, eax
  00fae	74 07		 je	 SHORT $LN433@PySys_Init
  00fb0	e8 00 00 00 00	 call	 _Px_Dealloc
  00fb5	eb 14		 jmp	 SHORT $LN4@PySys_Init
$LN433@PySys_Init:
  00fb7	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00fbb	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00fc1	eb 08		 jmp	 SHORT $LN4@PySys_Init
$LN428@PySys_Init:
  00fc3	48 8b cb	 mov	 rcx, rbx
  00fc6	e8 00 00 00 00	 call	 Px_DecRef
$LN4@PySys_Init:

; 1725 : #endif
; 1726 : 
; 1727 : #undef SET_SYS_FROM_STRING
; 1728 :     if (PyErr_Occurred())

  00fcb	e8 00 00 00 00	 call	 PyErr_Occurred
  00fd0	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]
  00fd5	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00fda	48 85 c0	 test	 rax, rax
  00fdd	48 0f 45 f5	 cmovne	 rsi, rbp
  00fe1	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00fe6	48 8b c6	 mov	 rax, rsi

; 1729 :         return NULL;
; 1730 :     return m;
; 1731 : }

  00fe9	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00fed	5e		 pop	 rsi
  00fee	c3		 ret	 0
_PySys_Init ENDP
_TEXT	ENDS
EXTRN	PyList_SetItem:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$makepathobject DD imagerel makepathobject
	DD	imagerel makepathobject+89
	DD	imagerel $unwind$makepathobject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$makepathobject DD imagerel makepathobject+89
	DD	imagerel makepathobject+298
	DD	imagerel $chain$0$makepathobject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$makepathobject DD imagerel makepathobject+298
	DD	imagerel makepathobject+320
	DD	imagerel $chain$1$makepathobject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$makepathobject DD 021H
	DD	imagerel makepathobject
	DD	imagerel makepathobject+89
	DD	imagerel $unwind$makepathobject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$makepathobject DD 020521H
	DD	085405H
	DD	imagerel makepathobject
	DD	imagerel makepathobject+89
	DD	imagerel $unwind$makepathobject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$makepathobject DD 081501H
	DD	0b7415H
	DD	0a6415H
	DD	093415H
	DD	0c0115215H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\sysmodule.c
xdata	ENDS
;	COMDAT makepathobject
_TEXT	SEGMENT
path$ = 64
delim$ = 72
makepathobject PROC					; COMDAT

; 1735 : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0000f	41 54		 push	 r12
  00011	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00015	44 0f b7 e2	 movzx	 r12d, dx
  00019	48 8b f1	 mov	 rsi, rcx

; 1736 :     int i, n;
; 1737 :     const wchar_t *p;
; 1738 :     PyObject *v, *w;
; 1739 : 
; 1740 :     n = 1;

  0001c	bf 01 00 00 00	 mov	 edi, 1

; 1741 :     p = path;
; 1742 :     while ((p = wcschr(p, delim)) != NULL) {

  00021	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wcschr
  00027	48 85 c0	 test	 rax, rax
  0002a	74 19		 je	 SHORT $LN8@makepathob
  0002c	0f 1f 40 00	 npad	 4
$LL9@makepathob:

; 1743 :         n++;
; 1744 :         p++;

  00030	48 8d 48 02	 lea	 rcx, QWORD PTR [rax+2]
  00034	41 0f b7 d4	 movzx	 edx, r12w
  00038	ff c7		 inc	 edi
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wcschr
  00040	48 85 c0	 test	 rax, rax
  00043	75 eb		 jne	 SHORT $LL9@makepathob
$LN8@makepathob:

; 1745 :     }
; 1746 :     v = PyList_New(n);

  00045	48 63 cf	 movsxd	 rcx, edi
  00048	e8 00 00 00 00	 call	 PyList_New
  0004d	48 8b d8	 mov	 rbx, rax

; 1747 :     if (v == NULL)

  00050	48 85 c0	 test	 rax, rax
  00053	0f 84 d1 00 00
	00		 je	 $LN10@makepathob
$LN7@makepathob:
  00059	48 89 6c 24 40	 mov	 QWORD PTR [rsp+64], rbp

; 1748 :         return NULL;
; 1749 :     for (i = 0; ; i++) {

  0005e	33 ed		 xor	 ebp, ebp
$LL6@makepathob:

; 1750 :         p = wcschr(path, delim);

  00060	41 0f b7 d4	 movzx	 edx, r12w
  00064	48 8b ce	 mov	 rcx, rsi
  00067	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wcschr
  0006d	48 8b f8	 mov	 rdi, rax

; 1751 :         if (p == NULL)

  00070	48 85 c0	 test	 rax, rax
  00073	75 12		 jne	 SHORT $LN3@makepathob

; 1752 :             p = path + wcslen(path); /* End of string */

  00075	48 83 c9 ff	 or	 rcx, -1
  00079	48 8b fe	 mov	 rdi, rsi
  0007c	66 f2 af	 repne scasw
  0007f	48 f7 d1	 not	 rcx
  00082	48 8d 7c 4e fe	 lea	 rdi, QWORD PTR [rsi+rcx*2-2]
$LN3@makepathob:

; 1753 :         w = PyUnicode_FromWideChar(path, (Py_ssize_t)(p - path));

  00087	48 8b d7	 mov	 rdx, rdi
  0008a	48 8b ce	 mov	 rcx, rsi
  0008d	48 2b d6	 sub	 rdx, rsi
  00090	48 d1 fa	 sar	 rdx, 1
  00093	e8 00 00 00 00	 call	 PyUnicode_FromWideChar

; 1754 :         if (w == NULL) {

  00098	48 85 c0	 test	 rax, rax
  0009b	74 21		 je	 SHORT $LN26@makepathob

; 1757 :         }
; 1758 :         PyList_SetItem(v, i, w);

  0009d	48 63 d5	 movsxd	 rdx, ebp
  000a0	4c 8b c0	 mov	 r8, rax
  000a3	48 8b cb	 mov	 rcx, rbx
  000a6	e8 00 00 00 00	 call	 PyList_SetItem

; 1759 :         if (*p == '\0')

  000ab	66 83 3f 00	 cmp	 WORD PTR [rdi], 0
  000af	74 08		 je	 SHORT $LN27@makepathob

; 1760 :             break;
; 1761 :         path = p+1;

  000b1	48 8d 77 02	 lea	 rsi, QWORD PTR [rdi+2]
  000b5	ff c5		 inc	 ebp
  000b7	eb a7		 jmp	 SHORT $LL6@makepathob
$LN27@makepathob:

; 1762 :     }
; 1763 :     return v;

  000b9	48 8b c3	 mov	 rax, rbx
  000bc	eb 67		 jmp	 SHORT $LN29@makepathob
$LN26@makepathob:

; 1755 :             Py_DECREF(v);

  000be	e8 00 00 00 00	 call	 _Py_PXCTX
  000c3	85 c0		 test	 eax, eax
  000c5	75 5c		 jne	 SHORT $LN22@makepathob
  000c7	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000cb	a8 20		 test	 al, 32			; 00000020H
  000cd	75 4c		 jne	 SHORT $LN16@makepathob
  000cf	84 c0		 test	 al, al
  000d1	78 48		 js	 SHORT $LN16@makepathob
  000d3	a8 02		 test	 al, 2
  000d5	75 4c		 jne	 SHORT $LN22@makepathob
  000d7	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000db	75 46		 jne	 SHORT $LN22@makepathob
  000dd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000eb	4c 8b cb	 mov	 r9, rbx
  000ee	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000f4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000fc	e8 00 00 00 00	 call	 _PyParallel_Guard
  00101	48 8b cb	 mov	 rcx, rbx
  00104	85 c0		 test	 eax, eax
  00106	74 07		 je	 SHORT $LN21@makepathob
  00108	e8 00 00 00 00	 call	 _Px_Dealloc
  0010d	eb 14		 jmp	 SHORT $LN22@makepathob
$LN21@makepathob:
  0010f	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00113	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00119	eb 08		 jmp	 SHORT $LN22@makepathob
$LN16@makepathob:
  0011b	48 8b cb	 mov	 rcx, rbx
  0011e	e8 00 00 00 00	 call	 Px_DecRef
$LN22@makepathob:

; 1756 :             return NULL;

  00123	33 c0		 xor	 eax, eax
$LN29@makepathob:
  00125	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
$LN10@makepathob:

; 1764 : }

  0012a	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  0012f	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00134	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  00139	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0013d	41 5c		 pop	 r12
  0013f	c3		 ret	 0
makepathobject ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@PGHPNFCO@can?8t?5assign?5sys?4path?$AA@ ; `string'
PUBLIC	??_C@_04LNEJFJGI@path?$AA@			; `string'
PUBLIC	??_C@_0BG@FEPADHFK@can?8t?5create?5sys?4path?$AA@ ; `string'
PUBLIC	PySys_SetPath
EXTRN	Py_FatalError:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySys_SetPath DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$PySys_SetPath
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySys_SetPath DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0BG@PGHPNFCO@can?8t?5assign?5sys?4path?$AA@
CONST	SEGMENT
??_C@_0BG@PGHPNFCO@can?8t?5assign?5sys?4path?$AA@ DB 'can''t assign sys.p'
	DB	'ath', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_04LNEJFJGI@path?$AA@
CONST	SEGMENT
??_C@_04LNEJFJGI@path?$AA@ DB 'path', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FEPADHFK@can?8t?5create?5sys?4path?$AA@
CONST	SEGMENT
??_C@_0BG@FEPADHFK@can?8t?5create?5sys?4path?$AA@ DB 'can''t create sys.p'
	DB	'ath', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PySys_SetPath
_TEXT	SEGMENT
path$ = 48
PySys_SetPath PROC					; COMDAT

; 1768 : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1769 :     PyObject *v;
; 1770 :     if ((v = makepathobject(path, DELIM)) == NULL)

  00006	ba 3b 00 00 00	 mov	 edx, 59			; 0000003bH
  0000b	e8 00 00 00 00	 call	 makepathobject
  00010	48 8b d8	 mov	 rbx, rax
  00013	48 85 c0	 test	 rax, rax
  00016	75 0c		 jne	 SHORT $LN2@PySys_SetP

; 1771 :         Py_FatalError("can't create sys.path");

  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@FEPADHFK@can?8t?5create?5sys?4path?$AA@
  0001f	e8 00 00 00 00	 call	 Py_FatalError
$LN2@PySys_SetP:

; 1772 :     if (PySys_SetObject("path", v) != 0)

  00024	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04LNEJFJGI@path?$AA@
  0002b	48 8b d3	 mov	 rdx, rbx
  0002e	e8 00 00 00 00	 call	 PySys_SetObject
  00033	85 c0		 test	 eax, eax
  00035	74 0c		 je	 SHORT $LN1@PySys_SetP

; 1773 :         Py_FatalError("can't assign sys.path");

  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@PGHPNFCO@can?8t?5assign?5sys?4path?$AA@
  0003e	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PySys_SetP:

; 1774 :     Py_DECREF(v);

  00043	48 8b cb	 mov	 rcx, rbx

; 1775 : }

  00046	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004a	5b		 pop	 rbx
  0004b	e9 00 00 00 00	 jmp	 _Py_DecRef
PySys_SetPath ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$makeargvobject DD imagerel makeargvobject
	DD	imagerel makeargvobject+62
	DD	imagerel $unwind$makeargvobject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$makeargvobject DD imagerel makeargvobject+62
	DD	imagerel makeargvobject+257
	DD	imagerel $chain$1$makeargvobject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$makeargvobject DD imagerel makeargvobject+257
	DD	imagerel makeargvobject+273
	DD	imagerel $chain$2$makeargvobject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$makeargvobject DD 021H
	DD	imagerel makeargvobject
	DD	imagerel makeargvobject+62
	DD	imagerel $unwind$makeargvobject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$makeargvobject DD 040a21H
	DD	09c40aH
	DD	086405H
	DD	imagerel makeargvobject
	DD	imagerel makeargvobject+62
	DD	imagerel $unwind$makeargvobject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$makeargvobject DD 060f01H
	DD	0b540fH
	DD	0a340fH
	DD	0700b520fH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\sysmodule.c
xdata	ENDS
;	COMDAT makeargvobject
_TEXT	SEGMENT
argc$ = 64
argv$ = 72
makeargvobject PROC					; COMDAT

; 1779 : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fa	 mov	 rdi, rdx

; 1780 :     PyObject *av;
; 1781 :     if (argc <= 0 || argv == NULL) {

  00012	85 c9		 test	 ecx, ecx
  00014	7e 05		 jle	 SHORT $LN6@makeargvob
  00016	48 85 d2	 test	 rdx, rdx
  00019	75 0c		 jne	 SHORT $LN7@makeargvob
$LN6@makeargvob:

; 1782 :         /* Ensure at least one (empty) argument is seen */
; 1783 :         static wchar_t *empty_argv[1] = {L""};
; 1784 :         argv = empty_argv;

  0001b	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:?empty_argv@?2??makeargvobject@@9@9

; 1785 :         argc = 1;

  00022	b9 01 00 00 00	 mov	 ecx, 1
$LN7@makeargvob:

; 1786 :     }
; 1787 :     av = PyList_New(argc);

  00027	48 63 e9	 movsxd	 rbp, ecx
  0002a	48 8b cd	 mov	 rcx, rbp
  0002d	e8 00 00 00 00	 call	 PyList_New
  00032	48 8b d8	 mov	 rbx, rax

; 1788 :     if (av != NULL) {

  00035	48 85 c0	 test	 rax, rax
  00038	0f 84 c3 00 00
	00		 je	 $LN2@makeargvob

; 1789 :         int i;
; 1790 :         for (i = 0; i < argc; i++) {

  0003e	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  00043	4c 89 64 24 48	 mov	 QWORD PTR [rsp+72], r12
  00048	45 33 e4	 xor	 r12d, r12d
  0004b	33 f6		 xor	 esi, esi
  0004d	48 85 ed	 test	 rbp, rbp
  00050	0f 8e a1 00 00
	00		 jle	 $LN27@makeargvob
  00056	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL4@makeargvob:

; 1791 : #ifdef __VMS
; 1792 :             PyObject *v;
; 1793 : 
; 1794 :             /* argv[0] is the script pathname if known */
; 1795 :             if (i == 0) {
; 1796 :                 char* fn = decc$translate_vms(argv[0]);
; 1797 :                 if ((fn == (char *)0) || fn == (char *)-1)
; 1798 :                     v = PyUnicode_FromString(argv[0]);
; 1799 :                 else
; 1800 :                     v = PyUnicode_FromString(
; 1801 :                         decc$translate_vms(argv[0]));
; 1802 :             } else
; 1803 :                 v = PyUnicode_FromString(argv[i]);
; 1804 : #else
; 1805 :             PyObject *v = PyUnicode_FromWideChar(argv[i], -1);

  00060	48 8b 0c f7	 mov	 rcx, QWORD PTR [rdi+rsi*8]
  00064	48 83 ca ff	 or	 rdx, -1
  00068	e8 00 00 00 00	 call	 PyUnicode_FromWideChar

; 1806 : #endif
; 1807 :             if (v == NULL) {

  0006d	48 85 c0	 test	 rax, rax
  00070	74 1e		 je	 SHORT $LN22@makeargvob

; 1809 :                 av = NULL;
; 1810 :                 break;
; 1811 :             }
; 1812 :             PyList_SetItem(av, i, v);

  00072	49 63 d4	 movsxd	 rdx, r12d
  00075	4c 8b c0	 mov	 r8, rax
  00078	48 8b cb	 mov	 rcx, rbx
  0007b	e8 00 00 00 00	 call	 PyList_SetItem
  00080	48 ff c6	 inc	 rsi
  00083	41 ff c4	 inc	 r12d
  00086	48 3b f5	 cmp	 rsi, rbp
  00089	7c d5		 jl	 SHORT $LL4@makeargvob

; 1813 :         }
; 1814 :     }
; 1815 :     return av;

  0008b	48 8b c3	 mov	 rax, rbx

; 1806 : #endif
; 1807 :             if (v == NULL) {

  0008e	eb 67		 jmp	 SHORT $LN27@makeargvob
$LN22@makeargvob:

; 1808 :                 Py_DECREF(av);

  00090	e8 00 00 00 00	 call	 _Py_PXCTX
  00095	85 c0		 test	 eax, eax
  00097	75 5c		 jne	 SHORT $LN20@makeargvob
  00099	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0009d	a8 20		 test	 al, 32			; 00000020H
  0009f	75 4c		 jne	 SHORT $LN14@makeargvob
  000a1	84 c0		 test	 al, al
  000a3	78 48		 js	 SHORT $LN14@makeargvob
  000a5	a8 02		 test	 al, 2
  000a7	75 4c		 jne	 SHORT $LN20@makeargvob
  000a9	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000ad	75 46		 jne	 SHORT $LN20@makeargvob
  000af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000bd	4c 8b cb	 mov	 r9, rbx
  000c0	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000c6	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ce	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d3	48 8b cb	 mov	 rcx, rbx
  000d6	85 c0		 test	 eax, eax
  000d8	74 07		 je	 SHORT $LN19@makeargvob
  000da	e8 00 00 00 00	 call	 _Px_Dealloc
  000df	eb 14		 jmp	 SHORT $LN20@makeargvob
$LN19@makeargvob:
  000e1	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000e5	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000eb	eb 08		 jmp	 SHORT $LN20@makeargvob
$LN14@makeargvob:
  000ed	48 8b cb	 mov	 rcx, rbx
  000f0	e8 00 00 00 00	 call	 Px_DecRef
$LN20@makeargvob:

; 1813 :         }
; 1814 :     }
; 1815 :     return av;

  000f5	33 c0		 xor	 eax, eax
$LN27@makeargvob:
  000f7	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000fc	4c 8b 64 24 48	 mov	 r12, QWORD PTR [rsp+72]
$LN2@makeargvob:

; 1816 : }

  00101	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00106	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  0010b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0010f	5f		 pop	 rdi
  00110	c3		 ret	 0
makeargvobject ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@NCOKNMEB@sys?4path?4insert?$CI0?$CJ?5failed?$AA@ ; `string'
PUBLIC	??_C@_0BO@NELCPBNJ@no?5mem?5for?5sys?4path?5insertion?$AA@ ; `string'
PUBLIC	??_C@_15DMEDGHGK@?$AA?9?$AAm?$AA?$AA@		; `string'
PUBLIC	??_C@_15NMJMBAFJ@?$AA?9?$AAc?$AA?$AA@		; `string'
EXTRN	PyList_Insert:PROC
EXTRN	__imp_wcsrchr:PROC
EXTRN	__imp_GetFullPathNameW:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_update_path DD imagerel sys_update_path
	DD	imagerel sys_update_path+68
	DD	imagerel $unwind$sys_update_path
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$sys_update_path DD imagerel sys_update_path+68
	DD	imagerel sys_update_path+241
	DD	imagerel $chain$0$sys_update_path
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$sys_update_path DD imagerel sys_update_path+241
	DD	imagerel sys_update_path+329
	DD	imagerel $chain$1$sys_update_path
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$sys_update_path DD 021H
	DD	imagerel sys_update_path
	DD	imagerel sys_update_path+68
	DD	imagerel $unwind$sys_update_path
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$sys_update_path DD 020821H
	DD	04a6408H
	DD	imagerel sys_update_path
	DD	imagerel sys_update_path+68
	DD	imagerel $unwind$sys_update_path
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_update_path DD 071001H
	DD	04b3410H
	DD	0460110H
	DD	07007c009H
	DD	05006H
xdata	ENDS
;	COMDAT ??_C@_0BK@NCOKNMEB@sys?4path?4insert?$CI0?$CJ?5failed?$AA@
CONST	SEGMENT
??_C@_0BK@NCOKNMEB@sys?4path?4insert?$CI0?$CJ?5failed?$AA@ DB 'sys.path.i'
	DB	'nsert(0) failed', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@NELCPBNJ@no?5mem?5for?5sys?4path?5insertion?$AA@
CONST	SEGMENT
??_C@_0BO@NELCPBNJ@no?5mem?5for?5sys?4path?5insertion?$AA@ DB 'no mem for'
	DB	' sys.path insertion', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_15DMEDGHGK@?$AA?9?$AAm?$AA?$AA@
CONST	SEGMENT
??_C@_15DMEDGHGK@?$AA?9?$AAm?$AA?$AA@ DB '-', 00H, 'm', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_15NMJMBAFJ@?$AA?9?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_15NMJMBAFJ@?$AA?9?$AAc?$AA?$AA@ DB '-', 00H, 'c', 00H, 00H, 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT sys_update_path
_TEXT	SEGMENT
fullpath$ = 32
argc$ = 592
argv$ = 600
ptemp$64890 = 608
sys_update_path PROC					; COMDAT

; 1824 : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	41 54		 push	 r12
  00009	48 81 ec 30 02
	00 00		 sub	 rsp, 560		; 00000230H
  00010	8b f9		 mov	 edi, ecx

; 1825 :     wchar_t *argv0;
; 1826 :     wchar_t *p = NULL;
; 1827 :     Py_ssize_t n = 0;
; 1828 :     PyObject *a;
; 1829 :     PyObject *path;
; 1830 : #ifdef HAVE_READLINK
; 1831 :     wchar_t link[MAXPATHLEN+1];
; 1832 :     wchar_t argv0copy[2*MAXPATHLEN+1];
; 1833 :     int nr = 0;
; 1834 : #endif
; 1835 : #if defined(HAVE_REALPATH)
; 1836 :     wchar_t fullpath[MAXPATHLEN];
; 1837 : #elif defined(MS_WINDOWS) && !defined(MS_WINCE)
; 1838 :     wchar_t fullpath[MAX_PATH];
; 1839 : #endif
; 1840 : 
; 1841 :     path = PySys_GetObject("path");

  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04LNEJFJGI@path?$AA@
  00019	48 8b ea	 mov	 rbp, rdx
  0001c	33 db		 xor	 ebx, ebx
  0001e	e8 00 00 00 00	 call	 PySys_GetObject
  00023	4c 8b e0	 mov	 r12, rax

; 1842 :     if (path == NULL)

  00026	48 85 c0	 test	 rax, rax
  00029	0f 84 06 01 00
	00		 je	 $LN9@sys_update

; 1843 :         return;
; 1844 : 
; 1845 :     argv0 = argv[0];

  0002f	48 8b 6d 00	 mov	 rbp, QWORD PTR [rbp]

; 1846 : 
; 1847 : #ifdef HAVE_READLINK
; 1848 :     if (_HAVE_SCRIPT_ARGUMENT(argc, argv))
; 1849 :         nr = _Py_wreadlink(argv0, link, MAXPATHLEN);
; 1850 :     if (nr > 0) {
; 1851 :         /* It's a symlink */
; 1852 :         link[nr] = '\0';
; 1853 :         if (link[0] == SEP)
; 1854 :             argv0 = link; /* Link to absolute path */
; 1855 :         else if (wcschr(link, SEP) == NULL)
; 1856 :             ; /* Link without path */
; 1857 :         else {
; 1858 :             /* Must join(dirname(argv0), link) */
; 1859 :             wchar_t *q = wcsrchr(argv0, SEP);
; 1860 :             if (q == NULL)
; 1861 :                 argv0 = link; /* argv0 without path */
; 1862 :             else {
; 1863 :                 /* Must make a copy, argv0copy has room for 2 * MAXPATHLEN */
; 1864 :                 wcsncpy(argv0copy, argv0, MAXPATHLEN);
; 1865 :                 q = wcsrchr(argv0copy, SEP);
; 1866 :                 wcsncpy(q+1, link, MAXPATHLEN);
; 1867 :                 q[MAXPATHLEN + 1] = L'\0';
; 1868 :                 argv0 = argv0copy;
; 1869 :             }
; 1870 :         }
; 1871 :     }
; 1872 : #endif /* HAVE_READLINK */
; 1873 : #if SEP == '\\' /* Special case for MS filename syntax */
; 1874 :     if (_HAVE_SCRIPT_ARGUMENT(argc, argv)) {

  00033	85 ff		 test	 edi, edi
  00035	0f 8e b6 00 00
	00		 jle	 $LN3@sys_update
  0003b	48 85 ed	 test	 rbp, rbp
  0003e	0f 84 ad 00 00
	00		 je	 $LN3@sys_update
  00044	48 89 b4 24 50
	02 00 00	 mov	 QWORD PTR [rsp+592], rsi
  0004c	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_15NMJMBAFJ@?$AA?9?$AAc?$AA?$AA@
  00053	b9 03 00 00 00	 mov	 ecx, 3
  00058	48 8b f5	 mov	 rsi, rbp
  0005b	66 f3 a7	 repe cmpsw
  0005e	0f 84 85 00 00
	00		 je	 $LN11@sys_update
  00064	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_15DMEDGHGK@?$AA?9?$AAm?$AA?$AA@
  0006b	48 8b f5	 mov	 rsi, rbp
  0006e	b9 03 00 00 00	 mov	 ecx, 3
  00073	66 f3 a7	 repe cmpsw
  00076	74 71		 je	 SHORT $LN11@sys_update

; 1875 :         wchar_t *q;
; 1876 : #if defined(MS_WINDOWS) && !defined(MS_WINCE)
; 1877 :         /* This code here replaces the first element in argv with the full
; 1878 :         path that it represents. Under CE, there are no relative paths so
; 1879 :         the argument must be the full path anyway. */
; 1880 :         wchar_t *ptemp;
; 1881 :         if (GetFullPathNameW(argv0,
; 1882 :                            Py_ARRAY_LENGTH(fullpath),
; 1883 :                            fullpath,
; 1884 :                            &ptemp)) {

  00078	4c 8d 8c 24 60
	02 00 00	 lea	 r9, QWORD PTR ptemp$64890[rsp]
  00080	4c 8d 44 24 20	 lea	 r8, QWORD PTR fullpath$[rsp]
  00085	ba 04 01 00 00	 mov	 edx, 260		; 00000104H
  0008a	48 8b cd	 mov	 rcx, rbp
  0008d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetFullPathNameW
  00093	48 8d 4c 24 20	 lea	 rcx, QWORD PTR fullpath$[rsp]

; 1885 :             argv0 = fullpath;
; 1886 :         }
; 1887 : #endif
; 1888 :         p = wcsrchr(argv0, SEP);

  00098	8d 53 5c	 lea	 edx, QWORD PTR [rbx+92]
  0009b	85 c0		 test	 eax, eax
  0009d	48 0f 44 cd	 cmove	 rcx, rbp
  000a1	48 8b e9	 mov	 rbp, rcx
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wcsrchr

; 1889 :         /* Test for alternate separator */
; 1890 :         q = wcsrchr(p ? p : argv0, '/');

  000aa	48 8b cd	 mov	 rcx, rbp
  000ad	48 85 c0	 test	 rax, rax
  000b0	8d 53 2f	 lea	 edx, QWORD PTR [rbx+47]
  000b3	48 8b f8	 mov	 rdi, rax
  000b6	48 0f 45 c8	 cmovne	 rcx, rax
  000ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wcsrchr

; 1891 :         if (q != NULL)

  000c0	48 85 c0	 test	 rax, rax
  000c3	48 0f 45 f8	 cmovne	 rdi, rax

; 1892 :             p = q;
; 1893 :         if (p != NULL) {

  000c7	48 85 ff	 test	 rdi, rdi
  000ca	74 1d		 je	 SHORT $LN11@sys_update

; 1894 :             n = p + 1 - argv0;

  000cc	48 8b df	 mov	 rbx, rdi
  000cf	48 2b dd	 sub	 rbx, rbp
  000d2	48 83 c3 02	 add	 rbx, 2
  000d6	48 d1 fb	 sar	 rbx, 1

; 1895 :             if (n > 1 && p[-1] != ':')

  000d9	48 83 fb 01	 cmp	 rbx, 1
  000dd	7e 0a		 jle	 SHORT $LN11@sys_update
  000df	66 83 7f fe 3a	 cmp	 WORD PTR [rdi-2], 58	; 0000003aH
  000e4	74 03		 je	 SHORT $LN11@sys_update

; 1896 :                 n--; /* Drop trailing separator */

  000e6	48 ff cb	 dec	 rbx
$LN11@sys_update:
  000e9	48 8b b4 24 50
	02 00 00	 mov	 rsi, QWORD PTR [rsp+592]
$LN3@sys_update:

; 1897 :         }
; 1898 :     }
; 1899 : #else /* All other filename syntaxes */
; 1900 :     if (_HAVE_SCRIPT_ARGUMENT(argc, argv)) {
; 1901 : #if defined(HAVE_REALPATH)
; 1902 :         if (_Py_wrealpath(argv0, fullpath, Py_ARRAY_LENGTH(fullpath))) {
; 1903 :             argv0 = fullpath;
; 1904 :         }
; 1905 : #endif
; 1906 :         p = wcsrchr(argv0, SEP);
; 1907 :     }
; 1908 :     if (p != NULL) {
; 1909 :         n = p + 1 - argv0;
; 1910 : #if SEP == '/' /* Special case for Unix filename syntax */
; 1911 :         if (n > 1)
; 1912 :             n--; /* Drop trailing separator */
; 1913 : #endif /* Unix */
; 1914 :     }
; 1915 : #endif /* All others */
; 1916 :     a = PyUnicode_FromWideChar(argv0, n);

  000f1	48 8b d3	 mov	 rdx, rbx
  000f4	48 8b cd	 mov	 rcx, rbp
  000f7	e8 00 00 00 00	 call	 PyUnicode_FromWideChar
  000fc	48 8b f8	 mov	 rdi, rax

; 1917 :     if (a == NULL)

  000ff	48 85 c0	 test	 rax, rax
  00102	75 0c		 jne	 SHORT $LN2@sys_update

; 1918 :         Py_FatalError("no mem for sys.path insertion");

  00104	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@NELCPBNJ@no?5mem?5for?5sys?4path?5insertion?$AA@
  0010b	e8 00 00 00 00	 call	 Py_FatalError
$LN2@sys_update:

; 1919 :     if (PyList_Insert(path, 0, a) < 0)

  00110	4c 8b c7	 mov	 r8, rdi
  00113	33 d2		 xor	 edx, edx
  00115	49 8b cc	 mov	 rcx, r12
  00118	e8 00 00 00 00	 call	 PyList_Insert
  0011d	85 c0		 test	 eax, eax
  0011f	79 0c		 jns	 SHORT $LN1@sys_update

; 1920 :         Py_FatalError("sys.path.insert(0) failed");

  00121	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@NCOKNMEB@sys?4path?4insert?$CI0?$CJ?5failed?$AA@
  00128	e8 00 00 00 00	 call	 Py_FatalError
$LN1@sys_update:

; 1921 :     Py_DECREF(a);

  0012d	48 8b cf	 mov	 rcx, rdi
  00130	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@sys_update:

; 1922 : }

  00135	48 8b 9c 24 58
	02 00 00	 mov	 rbx, QWORD PTR [rsp+600]
  0013d	48 81 c4 30 02
	00 00		 add	 rsp, 560		; 00000230H
  00144	41 5c		 pop	 r12
  00146	5f		 pop	 rdi
  00147	5d		 pop	 rbp
  00148	c3		 ret	 0
sys_update_path ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@CDHCLBJL@can?8t?5assign?5sys?4argv?$AA@ ; `string'
PUBLIC	??_C@_04GIEEDNNN@argv?$AA@			; `string'
PUBLIC	??_C@_0BE@DENJHAAM@no?5mem?5for?5sys?4argv?$AA@	; `string'
PUBLIC	PySys_SetArgvEx
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySys_SetArgvEx DD imagerel $LN6
	DD	imagerel $LN6+127
	DD	imagerel $unwind$PySys_SetArgvEx
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySys_SetArgvEx DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0BG@CDHCLBJL@can?8t?5assign?5sys?4argv?$AA@
CONST	SEGMENT
??_C@_0BG@CDHCLBJL@can?8t?5assign?5sys?4argv?$AA@ DB 'can''t assign sys.a'
	DB	'rgv', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_04GIEEDNNN@argv?$AA@
CONST	SEGMENT
??_C@_04GIEEDNNN@argv?$AA@ DB 'argv', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DENJHAAM@no?5mem?5for?5sys?4argv?$AA@
CONST	SEGMENT
??_C@_0BE@DENJHAAM@no?5mem?5for?5sys?4argv?$AA@ DB 'no mem for sys.argv', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PySys_SetArgvEx
_TEXT	SEGMENT
argc$ = 48
argv$ = 56
updatepath$ = 64
PySys_SetArgvEx PROC					; COMDAT

; 1926 : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	41 8b e8	 mov	 ebp, r8d
  00017	48 8b fa	 mov	 rdi, rdx
  0001a	8b f1		 mov	 esi, ecx

; 1927 :     PyObject *av = makeargvobject(argc, argv);

  0001c	e8 00 00 00 00	 call	 makeargvobject
  00021	48 8b d8	 mov	 rbx, rax

; 1928 :     if (av == NULL)

  00024	48 85 c0	 test	 rax, rax
  00027	75 0c		 jne	 SHORT $LN3@PySys_SetA

; 1929 :         Py_FatalError("no mem for sys.argv");

  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@DENJHAAM@no?5mem?5for?5sys?4argv?$AA@
  00030	e8 00 00 00 00	 call	 Py_FatalError
$LN3@PySys_SetA:

; 1930 :     if (PySys_SetObject("argv", av) != 0)

  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GIEEDNNN@argv?$AA@
  0003c	48 8b d3	 mov	 rdx, rbx
  0003f	e8 00 00 00 00	 call	 PySys_SetObject
  00044	85 c0		 test	 eax, eax
  00046	74 0c		 je	 SHORT $LN2@PySys_SetA

; 1931 :         Py_FatalError("can't assign sys.argv");

  00048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@CDHCLBJL@can?8t?5assign?5sys?4argv?$AA@
  0004f	e8 00 00 00 00	 call	 Py_FatalError
$LN2@PySys_SetA:

; 1932 :     Py_DECREF(av);

  00054	48 8b cb	 mov	 rcx, rbx
  00057	e8 00 00 00 00	 call	 _Py_DecRef

; 1933 :     if (updatepath)

  0005c	85 ed		 test	 ebp, ebp
  0005e	74 0a		 je	 SHORT $LN1@PySys_SetA

; 1934 :         sys_update_path(argc, argv);

  00060	48 8b d7	 mov	 rdx, rdi
  00063	8b ce		 mov	 ecx, esi
  00065	e8 00 00 00 00	 call	 sys_update_path
$LN1@PySys_SetA:

; 1935 : }

  0006a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0006f	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00074	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00079	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007d	5f		 pop	 rdi
  0007e	c3		 ret	 0
PySys_SetArgvEx ENDP
_TEXT	ENDS
PUBLIC	PySys_SetArgv
; Function compile flags: /Ogtpy
;	COMDAT PySys_SetArgv
_TEXT	SEGMENT
argc$ = 8
argv$ = 16
PySys_SetArgv PROC					; COMDAT

; 1940 :     PySys_SetArgvEx(argc, argv, 1);

  00000	41 b8 01 00 00
	00		 mov	 r8d, 1

; 1941 : }

  00006	e9 00 00 00 00	 jmp	 PySys_SetArgvEx
PySys_SetArgv ENDP
_TEXT	ENDS
EXTRN	PyTuple_Pack:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$sys_pyfile_write_unicode DD imagerel sys_pyfile_write_unicode
	DD	imagerel sys_pyfile_write_unicode+76
	DD	imagerel $unwind$sys_pyfile_write_unicode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$sys_pyfile_write_unicode DD imagerel sys_pyfile_write_unicode+76
	DD	imagerel sys_pyfile_write_unicode+257
	DD	imagerel $chain$0$sys_pyfile_write_unicode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$sys_pyfile_write_unicode DD imagerel sys_pyfile_write_unicode+257
	DD	imagerel sys_pyfile_write_unicode+489
	DD	imagerel $chain$1$sys_pyfile_write_unicode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$sys_pyfile_write_unicode DD 021H
	DD	imagerel sys_pyfile_write_unicode
	DD	imagerel sys_pyfile_write_unicode+76
	DD	imagerel $unwind$sys_pyfile_write_unicode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$sys_pyfile_write_unicode DD 020521H
	DD	086405H
	DD	imagerel sys_pyfile_write_unicode
	DD	imagerel sys_pyfile_write_unicode+76
	DD	imagerel $unwind$sys_pyfile_write_unicode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_pyfile_write_unicode DD 081501H
	DD	0b7415H
	DD	0a5415H
	DD	093415H
	DD	0c0115215H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\sysmodule.c
xdata	ENDS
;	COMDAT sys_pyfile_write_unicode
_TEXT	SEGMENT
unicode$ = 64
file$ = 72
sys_pyfile_write_unicode PROC				; COMDAT

; 1948 : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0000f	41 54		 push	 r12
  00011	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1949 :     PyObject *writer = NULL, *args = NULL, *result = NULL;

  00015	45 33 e4	 xor	 r12d, r12d
  00018	4c 8b c2	 mov	 r8, rdx
  0001b	48 8b e9	 mov	 rbp, rcx
  0001e	41 8b fc	 mov	 edi, r12d
  00021	41 8b dc	 mov	 ebx, r12d

; 1950 :     int err;
; 1951 :     _Py_IDENTIFIER(write);
; 1952 : 
; 1953 :     if (file == NULL)

  00024	48 85 d2	 test	 rdx, rdx
  00027	75 08		 jne	 SHORT $LN17@sys_pyfile

; 1954 :         return -1;

  00029	83 c8 ff	 or	 eax, -1
  0002c	e9 a2 01 00 00	 jmp	 $LN18@sys_pyfile
$LN17@sys_pyfile:

; 1955 : 
; 1956 :     writer = _PyObject_GetAttrId(file, &PyId_write);

  00031	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00037	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00040	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_write@?1??sys_pyfile_write_unicode@@9@9
  00045	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  00049	49 8b c8	 mov	 rcx, r8
  0004c	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  00051	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00056	48 8b f0	 mov	 rsi, rax

; 1957 :     if (writer == NULL)

  00059	48 85 c0	 test	 rax, rax
  0005c	74 2b		 je	 SHORT $error$64943

; 1958 :         goto error;
; 1959 : 
; 1960 :     args = PyTuple_Pack(1, unicode);

  0005e	48 8b d5	 mov	 rdx, rbp
  00061	b9 01 00 00 00	 mov	 ecx, 1
  00066	e8 00 00 00 00	 call	 PyTuple_Pack
  0006b	48 8b f8	 mov	 rdi, rax

; 1961 :     if (args == NULL)

  0006e	48 85 c0	 test	 rax, rax
  00071	74 16		 je	 SHORT $error$64943

; 1962 :         goto error;
; 1963 : 
; 1964 :     result = PyEval_CallObject(writer, args);

  00073	45 33 c0	 xor	 r8d, r8d
  00076	48 8b d0	 mov	 rdx, rax
  00079	48 8b ce	 mov	 rcx, rsi
  0007c	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords
  00081	48 8b d8	 mov	 rbx, rax

; 1965 :     if (result == NULL) {

  00084	48 85 c0	 test	 rax, rax
  00087	75 04		 jne	 SHORT $finally$64951
$error$64943:

; 1966 :         goto error;
; 1967 :     } else {
; 1968 :         err = 0;
; 1969 :         goto finally;
; 1970 :     }
; 1971 : 
; 1972 : error:
; 1973 :     err = -1;

  00089	41 83 cc ff	 or	 r12d, -1
$finally$64951:

; 1974 : finally:
; 1975 :     Py_XDECREF(writer);

  0008d	48 85 f6	 test	 rsi, rsi
  00090	74 65		 je	 SHORT $LN11@sys_pyfile
  00092	e8 00 00 00 00	 call	 _Py_PXCTX
  00097	85 c0		 test	 eax, eax
  00099	75 5c		 jne	 SHORT $LN11@sys_pyfile
  0009b	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  0009f	a8 20		 test	 al, 32			; 00000020H
  000a1	75 4c		 jne	 SHORT $LN24@sys_pyfile
  000a3	84 c0		 test	 al, al
  000a5	78 48		 js	 SHORT $LN24@sys_pyfile
  000a7	a8 02		 test	 al, 2
  000a9	75 4c		 jne	 SHORT $LN11@sys_pyfile
  000ab	48 ff 4e 50	 dec	 QWORD PTR [rsi+80]
  000af	75 46		 jne	 SHORT $LN11@sys_pyfile
  000b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000bf	4c 8b ce	 mov	 r9, rsi
  000c2	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000c8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d0	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d5	48 8b ce	 mov	 rcx, rsi
  000d8	85 c0		 test	 eax, eax
  000da	74 07		 je	 SHORT $LN29@sys_pyfile
  000dc	e8 00 00 00 00	 call	 _Px_Dealloc
  000e1	eb 14		 jmp	 SHORT $LN11@sys_pyfile
$LN29@sys_pyfile:
  000e3	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  000e7	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000ed	eb 08		 jmp	 SHORT $LN11@sys_pyfile
$LN24@sys_pyfile:
  000ef	48 8b ce	 mov	 rcx, rsi
  000f2	e8 00 00 00 00	 call	 Px_DecRef
$LN11@sys_pyfile:

; 1976 :     Py_XDECREF(args);

  000f7	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000fc	48 85 ff	 test	 rdi, rdi
  000ff	74 65		 je	 SHORT $LN7@sys_pyfile
  00101	e8 00 00 00 00	 call	 _Py_PXCTX
  00106	85 c0		 test	 eax, eax
  00108	75 5c		 jne	 SHORT $LN7@sys_pyfile
  0010a	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  0010e	a8 20		 test	 al, 32			; 00000020H
  00110	75 4c		 jne	 SHORT $LN35@sys_pyfile
  00112	84 c0		 test	 al, al
  00114	78 48		 js	 SHORT $LN35@sys_pyfile
  00116	a8 02		 test	 al, 2
  00118	75 4c		 jne	 SHORT $LN7@sys_pyfile
  0011a	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  0011e	75 46		 jne	 SHORT $LN7@sys_pyfile
  00120	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00127	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0012e	4c 8b cf	 mov	 r9, rdi
  00131	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00137	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0013f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00144	48 8b cf	 mov	 rcx, rdi
  00147	85 c0		 test	 eax, eax
  00149	74 07		 je	 SHORT $LN40@sys_pyfile
  0014b	e8 00 00 00 00	 call	 _Px_Dealloc
  00150	eb 14		 jmp	 SHORT $LN7@sys_pyfile
$LN40@sys_pyfile:
  00152	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00156	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0015c	eb 08		 jmp	 SHORT $LN7@sys_pyfile
$LN35@sys_pyfile:
  0015e	48 8b cf	 mov	 rcx, rdi
  00161	e8 00 00 00 00	 call	 Px_DecRef
$LN7@sys_pyfile:

; 1977 :     Py_XDECREF(result);

  00166	48 85 db	 test	 rbx, rbx
  00169	74 65		 je	 SHORT $LN3@sys_pyfile
  0016b	e8 00 00 00 00	 call	 _Py_PXCTX
  00170	85 c0		 test	 eax, eax
  00172	75 5c		 jne	 SHORT $LN3@sys_pyfile
  00174	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00178	a8 20		 test	 al, 32			; 00000020H
  0017a	75 4c		 jne	 SHORT $LN46@sys_pyfile
  0017c	84 c0		 test	 al, al
  0017e	78 48		 js	 SHORT $LN46@sys_pyfile
  00180	a8 02		 test	 al, 2
  00182	75 4c		 jne	 SHORT $LN3@sys_pyfile
  00184	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00188	75 46		 jne	 SHORT $LN3@sys_pyfile
  0018a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00191	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00198	4c 8b cb	 mov	 r9, rbx
  0019b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001a1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001a9	e8 00 00 00 00	 call	 _PyParallel_Guard
  001ae	48 8b cb	 mov	 rcx, rbx
  001b1	85 c0		 test	 eax, eax
  001b3	74 07		 je	 SHORT $LN51@sys_pyfile
  001b5	e8 00 00 00 00	 call	 _Px_Dealloc
  001ba	eb 14		 jmp	 SHORT $LN3@sys_pyfile
$LN51@sys_pyfile:
  001bc	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001c0	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001c6	eb 08		 jmp	 SHORT $LN3@sys_pyfile
$LN46@sys_pyfile:
  001c8	48 8b cb	 mov	 rcx, rbx
  001cb	e8 00 00 00 00	 call	 Px_DecRef
$LN3@sys_pyfile:

; 1978 :     return err;

  001d0	41 8b c4	 mov	 eax, r12d
$LN18@sys_pyfile:

; 1979 : }

  001d3	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  001d8	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  001dd	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  001e2	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001e6	41 5c		 pop	 r12
  001e8	c3		 ret	 0
sys_pyfile_write_unicode ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_pyfile_write DD imagerel sys_pyfile_write
	DD	imagerel sys_pyfile_write+23
	DD	imagerel $unwind$sys_pyfile_write
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$sys_pyfile_write DD imagerel sys_pyfile_write+23
	DD	imagerel sys_pyfile_write+55
	DD	imagerel $chain$0$sys_pyfile_write
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$sys_pyfile_write DD imagerel sys_pyfile_write+55
	DD	imagerel sys_pyfile_write+89
	DD	imagerel $chain$2$sys_pyfile_write
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$sys_pyfile_write DD 020021H
	DD	067400H
	DD	imagerel sys_pyfile_write
	DD	imagerel sys_pyfile_write+23
	DD	imagerel $unwind$sys_pyfile_write
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$sys_pyfile_write DD 020521H
	DD	067405H
	DD	imagerel sys_pyfile_write
	DD	imagerel sys_pyfile_write+23
	DD	imagerel $unwind$sys_pyfile_write
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_pyfile_write DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT sys_pyfile_write
_TEXT	SEGMENT
text$ = 48
file$ = 56
sys_pyfile_write PROC					; COMDAT

; 1983 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b da	 mov	 rbx, rdx

; 1984 :     PyObject *unicode = NULL;
; 1985 :     int err;
; 1986 : 
; 1987 :     if (file == NULL)

  00009	48 85 d2	 test	 rdx, rdx
  0000c	75 09		 jne	 SHORT $LN2@sys_pyfile@2

; 1988 :         return -1;

  0000e	83 c8 ff	 or	 eax, -1

; 1997 : }

  00011	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00015	5b		 pop	 rbx
  00016	c3		 ret	 0
$LN2@sys_pyfile@2:
  00017	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi

; 1989 : 
; 1990 :     unicode = PyUnicode_FromString(text);

  0001c	e8 00 00 00 00	 call	 PyUnicode_FromString
  00021	48 8b f8	 mov	 rdi, rax

; 1991 :     if (unicode == NULL)

  00024	48 85 c0	 test	 rax, rax
  00027	75 0e		 jne	 SHORT $LN1@sys_pyfile@2

; 1992 :         return -1;

  00029	83 c8 ff	 or	 eax, -1
  0002c	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 1997 : }

  00031	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00035	5b		 pop	 rbx
  00036	c3		 ret	 0
$LN1@sys_pyfile@2:

; 1993 : 
; 1994 :     err = sys_pyfile_write_unicode(unicode, file);

  00037	48 8b d3	 mov	 rdx, rbx
  0003a	48 8b c8	 mov	 rcx, rax
  0003d	e8 00 00 00 00	 call	 sys_pyfile_write_unicode

; 1995 :     Py_DECREF(unicode);

  00042	48 8b cf	 mov	 rcx, rdi
  00045	8b d8		 mov	 ebx, eax
  00047	e8 00 00 00 00	 call	 _Py_DecRef
  0004c	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 1996 :     return err;

  00051	8b c3		 mov	 eax, ebx

; 1997 : }

  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5b		 pop	 rbx
  00058	c3		 ret	 0
sys_pyfile_write ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@IJJDLOED@?4?4?4?5truncated?$AA@	; `string'
EXTRN	PyErr_Restore:PROC
EXTRN	__imp_fputs:PROC
EXTRN	PyOS_vsnprintf:PROC
EXTRN	PyErr_Fetch:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_write DD imagerel sys_write
	DD	imagerel sys_write+228
	DD	imagerel $unwind$sys_write
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_write DD 0b1d01H
	DD	08b741dH
	DD	08a641dH
	DD	089541dH
	DD	088341dH
	DD	086011dH
	DD	0c016H
xdata	ENDS
;	COMDAT ??_C@_0O@IJJDLOED@?4?4?4?5truncated?$AA@
CONST	SEGMENT
??_C@_0O@IJJDLOED@?4?4?4?5truncated?$AA@ DB '... truncated', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT sys_write
_TEXT	SEGMENT
error_value$ = 32
error_type$ = 40
error_traceback$ = 48
buffer$ = 64
name$ = 1088
fp$ = 1096
format$ = 1104
va$ = 1112
sys_write PROC						; COMDAT

; 2029 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	48 81 ec 30 04
	00 00		 sub	 rsp, 1072		; 00000430H
  0001d	49 8b f0	 mov	 rsi, r8
  00020	48 8b ea	 mov	 rbp, rdx
  00023	48 8b d9	 mov	 rbx, rcx

; 2030 :     PyObject *file;
; 2031 :     PyObject *error_type, *error_value, *error_traceback;
; 2032 :     char buffer[1001];
; 2033 :     int written;
; 2034 : 
; 2035 :     PyErr_Fetch(&error_type, &error_value, &error_traceback);

  00026	4c 8d 44 24 30	 lea	 r8, QWORD PTR error_traceback$[rsp]
  0002b	48 8d 54 24 20	 lea	 rdx, QWORD PTR error_value$[rsp]
  00030	48 8d 4c 24 28	 lea	 rcx, QWORD PTR error_type$[rsp]
  00035	49 8b f9	 mov	 rdi, r9
  00038	e8 00 00 00 00	 call	 PyErr_Fetch

; 2036 :     file = PySys_GetObject(name);

  0003d	48 8b cb	 mov	 rcx, rbx
  00040	e8 00 00 00 00	 call	 PySys_GetObject

; 2037 :     written = PyOS_vsnprintf(buffer, sizeof(buffer), format, va);

  00045	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buffer$[rsp]
  0004a	4c 8b cf	 mov	 r9, rdi
  0004d	4c 8b c6	 mov	 r8, rsi
  00050	ba e9 03 00 00	 mov	 edx, 1001		; 000003e9H
  00055	4c 8b e0	 mov	 r12, rax
  00058	e8 00 00 00 00	 call	 PyOS_vsnprintf

; 2038 :     if (sys_pyfile_write(buffer, file) != 0) {

  0005d	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buffer$[rsp]
  00062	49 8b d4	 mov	 rdx, r12
  00065	8b d8		 mov	 ebx, eax
  00067	e8 00 00 00 00	 call	 sys_pyfile_write
  0006c	85 c0		 test	 eax, eax
  0006e	74 13		 je	 SHORT $LN4@sys_write

; 2039 :         PyErr_Clear();

  00070	e8 00 00 00 00	 call	 PyErr_Clear

; 2040 :         fputs(buffer, fp);

  00075	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buffer$[rsp]
  0007a	48 8b d5	 mov	 rdx, rbp
  0007d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fputs
$LN4@sys_write:

; 2041 :     }
; 2042 :     if (written < 0 || (size_t)written >= sizeof(buffer)) {

  00083	85 db		 test	 ebx, ebx
  00085	78 08		 js	 SHORT $LN2@sys_write
  00087	81 fb e9 03 00
	00		 cmp	 ebx, 1001		; 000003e9H
  0008d	72 23		 jb	 SHORT $LN1@sys_write
$LN2@sys_write:

; 2043 :         const char *truncated = "... truncated";
; 2044 :         if (sys_pyfile_write(truncated, file) != 0)

  0008f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@IJJDLOED@?4?4?4?5truncated?$AA@
  00096	49 8b d4	 mov	 rdx, r12
  00099	e8 00 00 00 00	 call	 sys_pyfile_write
  0009e	85 c0		 test	 eax, eax
  000a0	74 10		 je	 SHORT $LN1@sys_write

; 2045 :             fputs(truncated, fp);

  000a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@IJJDLOED@?4?4?4?5truncated?$AA@
  000a9	48 8b d5	 mov	 rdx, rbp
  000ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fputs
$LN1@sys_write:

; 2046 :     }
; 2047 :     PyErr_Restore(error_type, error_value, error_traceback);

  000b2	4c 8b 44 24 30	 mov	 r8, QWORD PTR error_traceback$[rsp]
  000b7	48 8b 54 24 20	 mov	 rdx, QWORD PTR error_value$[rsp]
  000bc	48 8b 4c 24 28	 mov	 rcx, QWORD PTR error_type$[rsp]
  000c1	e8 00 00 00 00	 call	 PyErr_Restore

; 2048 : }

  000c6	4c 8d 9c 24 30
	04 00 00	 lea	 r11, QWORD PTR [rsp+1072]
  000ce	49 8b 5b 10	 mov	 rbx, QWORD PTR [r11+16]
  000d2	49 8b 6b 18	 mov	 rbp, QWORD PTR [r11+24]
  000d6	49 8b 73 20	 mov	 rsi, QWORD PTR [r11+32]
  000da	49 8b 7b 28	 mov	 rdi, QWORD PTR [r11+40]
  000de	49 8b e3	 mov	 rsp, r11
  000e1	41 5c		 pop	 r12
  000e3	c3		 ret	 0
sys_write ENDP
_TEXT	ENDS
PUBLIC	PySys_WriteStdout
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySys_WriteStdout DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$PySys_WriteStdout
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySys_WriteStdout DD 021901H
	DD	030153219H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PySys_WriteStdout
_TEXT	SEGMENT
format$ = 48
PySys_WriteStdout PROC					; COMDAT

; 2052 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	53		 push	 rbx
  00015	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2053 :     va_list va;
; 2054 : 
; 2055 :     va_start(va, format);

  00019	48 8d 5c 24 38	 lea	 rbx, QWORD PTR format$[rsp+8]

; 2056 :     sys_write("stdout", stdout, format, va);

  0001e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00024	4c 8b 44 24 30	 mov	 r8, QWORD PTR format$[rsp]
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06DJDOIFHB@stdout?$AA@
  00030	48 8d 50 30	 lea	 rdx, QWORD PTR [rax+48]
  00034	4c 8b cb	 mov	 r9, rbx
  00037	e8 00 00 00 00	 call	 sys_write

; 2057 :     va_end(va);
; 2058 : }

  0003c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00040	5b		 pop	 rbx
  00041	c3		 ret	 0
PySys_WriteStdout ENDP
_TEXT	ENDS
PUBLIC	??_C@_06FJGNEBG@stderr?$AA@			; `string'
PUBLIC	PySys_WriteStderr
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySys_WriteStderr DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$PySys_WriteStderr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySys_WriteStderr DD 021901H
	DD	030153219H
xdata	ENDS
;	COMDAT ??_C@_06FJGNEBG@stderr?$AA@
CONST	SEGMENT
??_C@_06FJGNEBG@stderr?$AA@ DB 'stderr', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PySys_WriteStderr
_TEXT	SEGMENT
format$ = 48
PySys_WriteStderr PROC					; COMDAT

; 2062 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	53		 push	 rbx
  00015	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2063 :     va_list va;
; 2064 : 
; 2065 :     va_start(va, format);

  00019	48 8d 5c 24 38	 lea	 rbx, QWORD PTR format$[rsp+8]

; 2066 :     sys_write("stderr", stderr, format, va);

  0001e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00024	4c 8b 44 24 30	 mov	 r8, QWORD PTR format$[rsp]
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FJGNEBG@stderr?$AA@
  00030	48 8d 50 60	 lea	 rdx, QWORD PTR [rax+96]
  00034	4c 8b cb	 mov	 r9, rbx
  00037	e8 00 00 00 00	 call	 sys_write

; 2067 :     va_end(va);
; 2068 : }

  0003c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00040	5b		 pop	 rbx
  00041	c3		 ret	 0
PySys_WriteStderr ENDP
_TEXT	ENDS
EXTRN	PyUnicode_FromFormatV:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_format DD imagerel sys_format
	DD	imagerel sys_format+184
	DD	imagerel $unwind$sys_format
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_format DD 0a1901H
	DD	0d7419H
	DD	0c6419H
	DD	0b5419H
	DD	0a3419H
	DD	0c0157219H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT sys_format
_TEXT	SEGMENT
error_traceback$ = 32
error_value$ = 40
error_type$ = 48
name$ = 80
fp$ = 88
format$ = 96
va$ = 104
sys_format PROC						; COMDAT

; 2072 : {

  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00007	48 89 68 10	 mov	 QWORD PTR [rax+16], rbp
  0000b	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi
  0000f	48 89 78 20	 mov	 QWORD PTR [rax+32], rdi
  00013	41 54		 push	 r12
  00015	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00019	49 8b f0	 mov	 rsi, r8
  0001c	48 8b ea	 mov	 rbp, rdx
  0001f	48 8b d9	 mov	 rbx, rcx

; 2073 :     PyObject *file, *message;
; 2074 :     PyObject *error_type, *error_value, *error_traceback;
; 2075 :     char *utf8;
; 2076 : 
; 2077 :     PyErr_Fetch(&error_type, &error_value, &error_traceback);

  00022	4c 8d 40 d8	 lea	 r8, QWORD PTR [rax-40]
  00026	48 8d 50 e0	 lea	 rdx, QWORD PTR [rax-32]
  0002a	48 8d 48 e8	 lea	 rcx, QWORD PTR [rax-24]
  0002e	49 8b f9	 mov	 rdi, r9
  00031	e8 00 00 00 00	 call	 PyErr_Fetch

; 2078 :     file = PySys_GetObject(name);

  00036	48 8b cb	 mov	 rcx, rbx
  00039	e8 00 00 00 00	 call	 PySys_GetObject

; 2079 :     message = PyUnicode_FromFormatV(format, va);

  0003e	48 8b d7	 mov	 rdx, rdi
  00041	48 8b ce	 mov	 rcx, rsi
  00044	4c 8b e0	 mov	 r12, rax
  00047	e8 00 00 00 00	 call	 PyUnicode_FromFormatV
  0004c	48 8b d8	 mov	 rbx, rax

; 2080 :     if (message != NULL) {

  0004f	48 85 c0	 test	 rax, rax
  00052	74 35		 je	 SHORT $LN3@sys_format

; 2081 :         if (sys_pyfile_write_unicode(message, file) != 0) {

  00054	49 8b d4	 mov	 rdx, r12
  00057	48 8b c8	 mov	 rcx, rax
  0005a	e8 00 00 00 00	 call	 sys_pyfile_write_unicode
  0005f	85 c0		 test	 eax, eax
  00061	74 1e		 je	 SHORT $LN1@sys_format

; 2082 :             PyErr_Clear();

  00063	e8 00 00 00 00	 call	 PyErr_Clear

; 2083 :             utf8 = _PyUnicode_AsString(message);

  00068	48 8b cb	 mov	 rcx, rbx
  0006b	e8 00 00 00 00	 call	 PyUnicode_AsUTF8

; 2084 :             if (utf8 != NULL)

  00070	48 85 c0	 test	 rax, rax
  00073	74 0c		 je	 SHORT $LN1@sys_format

; 2085 :                 fputs(utf8, fp);

  00075	48 8b d5	 mov	 rdx, rbp
  00078	48 8b c8	 mov	 rcx, rax
  0007b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fputs
$LN1@sys_format:

; 2086 :         }
; 2087 :         Py_DECREF(message);

  00081	48 8b cb	 mov	 rcx, rbx
  00084	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@sys_format:

; 2088 :     }
; 2089 :     PyErr_Restore(error_type, error_value, error_traceback);

  00089	4c 8b 44 24 20	 mov	 r8, QWORD PTR error_traceback$[rsp]
  0008e	48 8b 54 24 28	 mov	 rdx, QWORD PTR error_value$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR error_type$[rsp]
  00098	e8 00 00 00 00	 call	 PyErr_Restore

; 2090 : }

  0009d	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000a2	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  000a7	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  000ac	48 8b 7c 24 68	 mov	 rdi, QWORD PTR [rsp+104]
  000b1	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000b5	41 5c		 pop	 r12
  000b7	c3		 ret	 0
sys_format ENDP
_TEXT	ENDS
PUBLIC	PySys_FormatStdout
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySys_FormatStdout DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$PySys_FormatStdout
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySys_FormatStdout DD 021901H
	DD	030153219H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PySys_FormatStdout
_TEXT	SEGMENT
format$ = 48
PySys_FormatStdout PROC					; COMDAT

; 2094 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	53		 push	 rbx
  00015	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2095 :     va_list va;
; 2096 : 
; 2097 :     va_start(va, format);

  00019	48 8d 5c 24 38	 lea	 rbx, QWORD PTR format$[rsp+8]

; 2098 :     sys_format("stdout", stdout, format, va);

  0001e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00024	4c 8b 44 24 30	 mov	 r8, QWORD PTR format$[rsp]
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06DJDOIFHB@stdout?$AA@
  00030	48 8d 50 30	 lea	 rdx, QWORD PTR [rax+48]
  00034	4c 8b cb	 mov	 r9, rbx
  00037	e8 00 00 00 00	 call	 sys_format

; 2099 :     va_end(va);
; 2100 : }

  0003c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00040	5b		 pop	 rbx
  00041	c3		 ret	 0
PySys_FormatStdout ENDP
_TEXT	ENDS
PUBLIC	PySys_FormatStderr
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySys_FormatStderr DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$PySys_FormatStderr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySys_FormatStderr DD 021901H
	DD	030153219H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PySys_FormatStderr
_TEXT	SEGMENT
format$ = 48
PySys_FormatStderr PROC					; COMDAT

; 2104 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	53		 push	 rbx
  00015	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2105 :     va_list va;
; 2106 : 
; 2107 :     va_start(va, format);

  00019	48 8d 5c 24 38	 lea	 rbx, QWORD PTR format$[rsp+8]

; 2108 :     sys_format("stderr", stderr, format, va);

  0001e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00024	4c 8b 44 24 30	 mov	 r8, QWORD PTR format$[rsp]
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FJGNEBG@stderr?$AA@
  00030	48 8d 50 60	 lea	 rdx, QWORD PTR [rax+96]
  00034	4c 8b cb	 mov	 r9, rbx
  00037	e8 00 00 00 00	 call	 sys_format

; 2109 :     va_end(va);
; 2110 : }

  0003c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00040	5b		 pop	 rbx
  00041	c3		 ret	 0
PySys_FormatStderr ENDP
_TEXT	ENDS
END
