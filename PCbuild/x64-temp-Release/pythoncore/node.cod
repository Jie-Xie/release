; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	PyNode_New
EXTRN	PyObject_Malloc:PROC
;	COMDAT pdata
; File c:\src\pyparallel\parser\node.c
pdata	SEGMENT
$pdata$PyNode_New DD imagerel $LN4
	DD	imagerel $LN4+54
	DD	imagerel $unwind$PyNode_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyNode_New DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyNode_New
_TEXT	SEGMENT
type$ = 48
PyNode_New PROC						; COMDAT

; 9    : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	8b d9		 mov	 ebx, ecx

; 10   :     node *n = (node *) PyObject_MALLOC(1 * sizeof(node));

  00008	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  0000d	e8 00 00 00 00	 call	 PyObject_Malloc

; 11   :     if (n == NULL)

  00012	48 85 c0	 test	 rax, rax
  00015	75 06		 jne	 SHORT $LN1@PyNode_New

; 18   :     return n;
; 19   : }

  00017	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001b	5b		 pop	 rbx
  0001c	c3		 ret	 0
$LN1@PyNode_New:

; 12   :         return NULL;
; 13   :     n->n_type = type;
; 14   :     n->n_str = NULL;

  0001d	33 c9		 xor	 ecx, ecx
  0001f	66 89 18	 mov	 WORD PTR [rax], bx
  00022	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 15   :     n->n_lineno = 0;

  00026	89 48 10	 mov	 DWORD PTR [rax+16], ecx

; 16   :     n->n_nchildren = 0;

  00029	89 48 18	 mov	 DWORD PTR [rax+24], ecx

; 17   :     n->n_child = NULL;

  0002c	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 18   :     return n;
; 19   : }

  00030	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00034	5b		 pop	 rbx
  00035	c3		 ret	 0
PyNode_New ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT fancy_roundup
_TEXT	SEGMENT
n$ = 8
fancy_roundup PROC					; COMDAT

; 25   :     /* Round up to the closest power of 2 >= n. */
; 26   :     int result = 256;

  00000	b8 00 01 00 00	 mov	 eax, 256		; 00000100H

; 27   :     assert(n > 128);
; 28   :     while (result < n) {

  00005	3b c8		 cmp	 ecx, eax
  00007	7e 16		 jle	 SHORT $LN2@fancy_roun
  00009	0f 1f 80 00 00
	00 00		 npad	 7
$LL3@fancy_roun:

; 29   :         result <<= 1;

  00010	03 c0		 add	 eax, eax

; 30   :         if (result <= 0)

  00012	85 c0		 test	 eax, eax
  00014	7e 06		 jle	 SHORT $LN7@fancy_roun

; 27   :     assert(n > 128);
; 28   :     while (result < n) {

  00016	3b c1		 cmp	 eax, ecx
  00018	7c f6		 jl	 SHORT $LL3@fancy_roun

; 32   :     }
; 33   :     return result;
; 34   : }

  0001a	f3 c3		 fatret	 0
$LN7@fancy_roun:

; 31   :             return -1;

  0001c	83 c8 ff	 or	 eax, -1
$LN2@fancy_roun:

; 32   :     }
; 33   :     return result;
; 34   : }

  0001f	f3 c3		 fatret	 0
fancy_roundup ENDP
_TEXT	ENDS
PUBLIC	PyNode_AddChild
EXTRN	PyObject_Realloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyNode_AddChild DD imagerel $LN19
	DD	imagerel $LN19+261
	DD	imagerel $unwind$PyNode_AddChild
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyNode_AddChild DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyNode_AddChild
_TEXT	SEGMENT
n1$ = 48
type$ = 56
str$ = 64
lineno$ = 72
col_offset$ = 80
PyNode_AddChild PROC					; COMDAT

; 80   : {

$LN19:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b d9	 mov	 rbx, rcx

; 81   :     const int nch = n1->n_nchildren;

  00017	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  0001a	41 8b f9	 mov	 edi, r9d
  0001d	49 8b f0	 mov	 rsi, r8
  00020	8b ea		 mov	 ebp, edx

; 82   :     int current_capacity;
; 83   :     int required_capacity;
; 84   :     node *n;
; 85   : 
; 86   :     if (nch == INT_MAX || nch < 0)

  00022	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH
  00028	0f 84 bd 00 00
	00		 je	 $LN6@PyNode_Add
  0002e	85 c9		 test	 ecx, ecx
  00030	0f 88 b5 00 00
	00		 js	 $LN6@PyNode_Add

; 88   : 
; 89   :     current_capacity = XXXROUNDUP(nch);

  00036	83 f9 01	 cmp	 ecx, 1
  00039	7f 04		 jg	 SHORT $LN12@PyNode_Add
  0003b	8b d1		 mov	 edx, ecx
  0003d	eb 17		 jmp	 SHORT $LN11@PyNode_Add
$LN12@PyNode_Add:
  0003f	81 f9 80 00 00
	00		 cmp	 ecx, 128		; 00000080H
  00045	7f 08		 jg	 SHORT $LN10@PyNode_Add
  00047	8d 51 03	 lea	 edx, DWORD PTR [rcx+3]
  0004a	83 e2 fc	 and	 edx, -4
  0004d	eb 07		 jmp	 SHORT $LN11@PyNode_Add
$LN10@PyNode_Add:
  0004f	e8 00 00 00 00	 call	 fancy_roundup
  00054	8b d0		 mov	 edx, eax
$LN11@PyNode_Add:

; 90   :     required_capacity = XXXROUNDUP(nch + 1);

  00056	ff c1		 inc	 ecx
  00058	83 f9 01	 cmp	 ecx, 1
  0005b	7e 17		 jle	 SHORT $LN15@PyNode_Add
  0005d	81 f9 80 00 00
	00		 cmp	 ecx, 128		; 00000080H
  00063	7f 08		 jg	 SHORT $LN14@PyNode_Add
  00065	83 c1 03	 add	 ecx, 3
  00068	83 e1 fc	 and	 ecx, -4
  0006b	eb 07		 jmp	 SHORT $LN15@PyNode_Add
$LN14@PyNode_Add:
  0006d	e8 00 00 00 00	 call	 fancy_roundup
  00072	8b c8		 mov	 ecx, eax
$LN15@PyNode_Add:

; 91   :     if (current_capacity < 0 || required_capacity < 0)

  00074	85 d2		 test	 edx, edx
  00076	78 73		 js	 SHORT $LN6@PyNode_Add
  00078	85 c9		 test	 ecx, ecx
  0007a	78 6f		 js	 SHORT $LN6@PyNode_Add

; 92   :         return E_OVERFLOW;
; 93   :     if (current_capacity < required_capacity) {

  0007c	3b d1		 cmp	 edx, ecx
  0007e	7d 33		 jge	 SHORT $LN3@PyNode_Add

; 94   :         if (required_capacity > PY_SIZE_MAX / sizeof(node)) {

  00080	48 63 c1	 movsxd	 rax, ecx
  00083	48 b9 66 66 66
	66 66 66 66 06	 mov	 rcx, 461168601842738790	; 0666666666666666H
  0008d	48 3b c1	 cmp	 rax, rcx
  00090	76 07		 jbe	 SHORT $LN2@PyNode_Add
$LN18@PyNode_Add:

; 95   :             return E_NOMEM;

  00092	b8 0f 00 00 00	 mov	 eax, 15
  00097	eb 57		 jmp	 SHORT $LN8@PyNode_Add
$LN2@PyNode_Add:

; 96   :         }
; 97   :         n = n1->n_child;
; 98   :         n = (node *) PyObject_REALLOC(n,
; 99   :                                       required_capacity * sizeof(node));

  00099	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  0009d	48 8d 14 80	 lea	 rdx, QWORD PTR [rax+rax*4]
  000a1	48 c1 e2 03	 shl	 rdx, 3
  000a5	e8 00 00 00 00	 call	 PyObject_Realloc

; 100  :         if (n == NULL)

  000aa	48 85 c0	 test	 rax, rax

; 101  :             return E_NOMEM;

  000ad	74 e3		 je	 SHORT $LN18@PyNode_Add

; 102  :         n1->n_child = n;

  000af	48 89 43 20	 mov	 QWORD PTR [rbx+32], rax
$LN3@PyNode_Add:

; 103  :     }
; 104  : 
; 105  :     n = &n1->n_child[n1->n_nchildren++];

  000b3	48 63 4b 18	 movsxd	 rcx, DWORD PTR [rbx+24]
  000b7	48 8b 53 20	 mov	 rdx, QWORD PTR [rbx+32]
  000bb	4c 8d 04 89	 lea	 r8, QWORD PTR [rcx+rcx*4]
  000bf	8d 41 01	 lea	 eax, DWORD PTR [rcx+1]
  000c2	89 43 18	 mov	 DWORD PTR [rbx+24], eax

; 106  :     n->n_type = type;
; 107  :     n->n_str = str;
; 108  :     n->n_lineno = lineno;
; 109  :     n->n_col_offset = col_offset;

  000c5	8b 44 24 50	 mov	 eax, DWORD PTR col_offset$[rsp]
  000c9	66 42 89 2c c2	 mov	 WORD PTR [rdx+r8*8], bp
  000ce	42 89 44 c2 14	 mov	 DWORD PTR [rdx+r8*8+20], eax

; 110  :     n->n_nchildren = 0;

  000d3	33 c0		 xor	 eax, eax
  000d5	4a 89 74 c2 08	 mov	 QWORD PTR [rdx+r8*8+8], rsi
  000da	42 89 44 c2 18	 mov	 DWORD PTR [rdx+r8*8+24], eax

; 111  :     n->n_child = NULL;

  000df	4a 89 44 c2 20	 mov	 QWORD PTR [rdx+r8*8+32], rax
  000e4	42 89 7c c2 10	 mov	 DWORD PTR [rdx+r8*8+16], edi

; 112  :     return 0;

  000e9	eb 05		 jmp	 SHORT $LN8@PyNode_Add
$LN6@PyNode_Add:

; 87   :         return E_OVERFLOW;

  000eb	b8 13 00 00 00	 mov	 eax, 19
$LN8@PyNode_Add:

; 113  : }

  000f0	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000f5	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000fa	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000ff	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00103	5f		 pop	 rdi
  00104	c3		 ret	 0
PyNode_AddChild ENDP
_TEXT	ENDS
EXTRN	PyObject_Free:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$freechildren DD imagerel freechildren
	DD	imagerel freechildren+4
	DD	imagerel $unwind$freechildren
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$freechildren DD imagerel freechildren+4
	DD	imagerel freechildren+24
	DD	imagerel $chain$1$freechildren
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$freechildren DD imagerel freechildren+24
	DD	imagerel freechildren+74
	DD	imagerel $chain$2$freechildren
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$freechildren DD imagerel freechildren+74
	DD	imagerel freechildren+88
	DD	imagerel $chain$3$freechildren
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$freechildren DD imagerel freechildren+88
	DD	imagerel freechildren+107
	DD	imagerel $chain$4$freechildren
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$freechildren DD imagerel freechildren+107
	DD	imagerel freechildren+117
	DD	imagerel $chain$5$freechildren
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$freechildren DD 021H
	DD	imagerel freechildren
	DD	imagerel freechildren+4
	DD	imagerel $unwind$freechildren
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$freechildren DD 020021H
	DD	047400H
	DD	imagerel freechildren
	DD	imagerel freechildren+4
	DD	imagerel $unwind$freechildren
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$freechildren DD 021H
	DD	imagerel freechildren+4
	DD	imagerel freechildren+24
	DD	imagerel $chain$1$freechildren
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$freechildren DD 020521H
	DD	076405H
	DD	imagerel freechildren+4
	DD	imagerel freechildren+24
	DD	imagerel $chain$1$freechildren
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$freechildren DD 040d21H
	DD	04740dH
	DD	063405H
	DD	imagerel freechildren
	DD	imagerel freechildren+4
	DD	imagerel $unwind$freechildren
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$freechildren DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT freechildren
_TEXT	SEGMENT
n$ = 48
freechildren PROC					; COMDAT

; 141  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx

; 142  :     int i;
; 143  :     for (i = NCH(n); --i >= 0; )

  00009	8b 59 18	 mov	 ebx, DWORD PTR [rcx+24]
  0000c	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00011	ff cb		 dec	 ebx
  00013	48 8b f9	 mov	 rdi, rcx
  00016	78 32		 js	 SHORT $LN3@freechildr
  00018	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  0001d	48 63 c3	 movsxd	 rax, ebx
  00020	48 8d 34 80	 lea	 rsi, QWORD PTR [rax+rax*4]
  00024	48 c1 e6 03	 shl	 rsi, 3
  00028	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@freechildr:

; 144  :         freechildren(CHILD(n, i));

  00030	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00034	48 8d 0c 06	 lea	 rcx, QWORD PTR [rsi+rax]
  00038	e8 00 00 00 00	 call	 freechildren
  0003d	48 83 ee 28	 sub	 rsi, 40			; 00000028H
  00041	ff cb		 dec	 ebx
  00043	79 eb		 jns	 SHORT $LL4@freechildr
  00045	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
$LN3@freechildr:

; 145  :     if (n->n_child != NULL)

  0004a	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  0004e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00053	48 85 c9	 test	 rcx, rcx
  00056	74 05		 je	 SHORT $LN2@freechildr

; 146  :         PyObject_FREE(n->n_child);

  00058	e8 00 00 00 00	 call	 PyObject_Free
$LN2@freechildr:

; 147  :     if (STR(n) != NULL)

  0005d	48 8b 4f 08	 mov	 rcx, QWORD PTR [rdi+8]
  00061	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]
  00066	48 85 c9	 test	 rcx, rcx
  00069	74 05		 je	 SHORT $LN1@freechildr

; 148  :         PyObject_FREE(STR(n));

  0006b	e8 00 00 00 00	 call	 PyObject_Free
$LN1@freechildr:

; 149  : }

  00070	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00074	c3		 ret	 0
freechildren ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sizeofchildren DD imagerel sizeofchildren
	DD	imagerel sizeofchildren+10
	DD	imagerel $unwind$sizeofchildren
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$sizeofchildren DD imagerel sizeofchildren+10
	DD	imagerel sizeofchildren+27
	DD	imagerel $chain$0$sizeofchildren
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$sizeofchildren DD imagerel sizeofchildren+27
	DD	imagerel sizeofchildren+76
	DD	imagerel $chain$1$sizeofchildren
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$sizeofchildren DD imagerel sizeofchildren+76
	DD	imagerel sizeofchildren+88
	DD	imagerel $chain$2$sizeofchildren
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$sizeofchildren DD imagerel sizeofchildren+88
	DD	imagerel sizeofchildren+184
	DD	imagerel $chain$3$sizeofchildren
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$sizeofchildren DD 021H
	DD	imagerel sizeofchildren
	DD	imagerel sizeofchildren+10
	DD	imagerel $unwind$sizeofchildren
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$sizeofchildren DD 021H
	DD	imagerel sizeofchildren+10
	DD	imagerel sizeofchildren+27
	DD	imagerel $chain$0$sizeofchildren
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$sizeofchildren DD 020521H
	DD	065405H
	DD	imagerel sizeofchildren+10
	DD	imagerel sizeofchildren+27
	DD	imagerel $chain$0$sizeofchildren
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$sizeofchildren DD 020521H
	DD	076405H
	DD	imagerel sizeofchildren
	DD	imagerel sizeofchildren+10
	DD	imagerel $unwind$sizeofchildren
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sizeofchildren DD 040a01H
	DD	08340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT sizeofchildren
_TEXT	SEGMENT
n$ = 48
sizeofchildren PROC					; COMDAT

; 153  : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi

; 155  :     int i;
; 156  :     for (i = NCH(n); --i >= 0; )

  0000f	8b 71 18	 mov	 esi, DWORD PTR [rcx+24]
  00012	33 db		 xor	 ebx, ebx
  00014	ff ce		 dec	 esi
  00016	48 8b f9	 mov	 rdi, rcx
  00019	78 31		 js	 SHORT $LN3@sizeofchil

; 154  :     Py_ssize_t res = 0;

  0001b	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp
  00020	48 63 c6	 movsxd	 rax, esi
  00023	48 8d 2c 80	 lea	 rbp, QWORD PTR [rax+rax*4]
  00027	48 c1 e5 03	 shl	 rbp, 3
  0002b	0f 1f 44 00 00	 npad	 5
$LL4@sizeofchil:

; 157  :         res += sizeofchildren(CHILD(n, i));

  00030	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00034	48 03 cd	 add	 rcx, rbp
  00037	e8 00 00 00 00	 call	 sizeofchildren
  0003c	48 83 ed 28	 sub	 rbp, 40			; 00000028H
  00040	48 03 d8	 add	 rbx, rax
  00043	ff ce		 dec	 esi
  00045	79 e9		 jns	 SHORT $LL4@sizeofchil
  00047	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
$LN3@sizeofchil:

; 158  :     if (n->n_child != NULL)

  0004c	48 83 7f 20 00	 cmp	 QWORD PTR [rdi+32], 0
  00051	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00056	74 2f		 je	 SHORT $LN2@sizeofchil

; 159  :         /* allocated size of n->n_child array */
; 160  :         res += XXXROUNDUP(NCH(n)) * sizeof(node);

  00058	48 63 4f 18	 movsxd	 rcx, DWORD PTR [rdi+24]
  0005c	83 f9 01	 cmp	 ecx, 1
  0005f	7f 05		 jg	 SHORT $LN9@sizeofchil
  00061	48 8b c1	 mov	 rax, rcx
  00064	eb 19		 jmp	 SHORT $LN8@sizeofchil
$LN9@sizeofchil:
  00066	81 f9 80 00 00
	00		 cmp	 ecx, 128		; 00000080H
  0006c	7f 0a		 jg	 SHORT $LN7@sizeofchil
  0006e	48 8d 41 03	 lea	 rax, QWORD PTR [rcx+3]
  00072	48 83 e0 fc	 and	 rax, -4
  00076	eb 07		 jmp	 SHORT $LN8@sizeofchil
$LN7@sizeofchil:
  00078	e8 00 00 00 00	 call	 fancy_roundup
  0007d	48 98		 cdqe
$LN8@sizeofchil:
  0007f	48 8d 04 80	 lea	 rax, QWORD PTR [rax+rax*4]
  00083	48 8d 1c c3	 lea	 rbx, QWORD PTR [rbx+rax*8]
$LN2@sizeofchil:

; 161  :     if (STR(n) != NULL)

  00087	48 8b 7f 08	 mov	 rdi, QWORD PTR [rdi+8]
  0008b	48 85 ff	 test	 rdi, rdi
  0008e	74 1a		 je	 SHORT $LN13@sizeofchil

; 162  :         res += strlen(STR(n)) + 1;

  00090	33 c0		 xor	 eax, eax
  00092	48 83 c9 ff	 or	 rcx, -1
  00096	f2 ae		 repne scasb
  00098	48 f7 d1	 not	 rcx
  0009b	48 8d 04 0b	 lea	 rax, QWORD PTR [rbx+rcx]

; 164  : }

  0009f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000a4	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a8	5f		 pop	 rdi
  000a9	c3		 ret	 0
$LN13@sizeofchil:

; 163  :     return res;

  000aa	48 8b c3	 mov	 rax, rbx

; 164  : }

  000ad	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000b2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b6	5f		 pop	 rdi
  000b7	c3		 ret	 0
sizeofchildren ENDP
_TEXT	ENDS
PUBLIC	PyNode_Free
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyNode_Free DD imagerel $LN5
	DD	imagerel $LN5+33
	DD	imagerel $unwind$PyNode_Free
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyNode_Free DD 020a01H
	DD	03006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyNode_Free
_TEXT	SEGMENT
n$ = 48
PyNode_Free PROC					; COMDAT

; 122  : {

$LN5:

; 123  :     if (n != NULL) {

  00000	48 85 c9	 test	 rcx, rcx
  00003	74 1a		 je	 SHORT $LN4@PyNode_Fre
  00005	53		 push	 rbx
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 122  : {

  0000a	48 8b d9	 mov	 rbx, rcx

; 124  :         freechildren(n);

  0000d	e8 00 00 00 00	 call	 freechildren

; 125  :         PyObject_FREE(n);

  00012	48 8b cb	 mov	 rcx, rbx
  00015	e8 00 00 00 00	 call	 PyObject_Free

; 126  :     }
; 127  : }

  0001a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001e	5b		 pop	 rbx
$LN4@PyNode_Fre:
  0001f	f3 c3		 fatret	 0
PyNode_Free ENDP
_TEXT	ENDS
PUBLIC	_PyNode_SizeOf
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyNode_SizeOf DD imagerel $LN5
	DD	imagerel $LN5+30
	DD	imagerel $unwind$_PyNode_SizeOf
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyNode_SizeOf DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyNode_SizeOf
_TEXT	SEGMENT
n$ = 48
_PyNode_SizeOf PROC					; COMDAT

; 131  : {

$LN5:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 132  :     Py_ssize_t res = 0;
; 133  : 
; 134  :     if (n != NULL)

  00004	48 85 c9	 test	 rcx, rcx
  00007	74 0e		 je	 SHORT $LN4@PyNode_Siz

; 135  :         res = sizeof(node) + sizeofchildren(n);

  00009	e8 00 00 00 00	 call	 sizeofchildren
  0000e	48 83 c0 28	 add	 rax, 40			; 00000028H

; 137  : }

  00012	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00016	c3		 ret	 0
$LN4@PyNode_Siz:

; 136  :     return res;

  00017	33 c0		 xor	 eax, eax

; 137  : }

  00019	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001d	c3		 ret	 0
_PyNode_SizeOf ENDP
_TEXT	ENDS
END
