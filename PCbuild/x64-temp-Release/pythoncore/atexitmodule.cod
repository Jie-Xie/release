; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_06CMONBEBE@atexit?$AA@			; `string'
PUBLIC	??_C@_0P@KFBBEIOJ@_run_exitfuncs?$AA@		; `string'
PUBLIC	??_C@_0L@PKKNFCHP@unregister?$AA@		; `string'
PUBLIC	??_C@_06DNEIODDF@_clear?$AA@			; `string'
PUBLIC	??_C@_08DHHIDNEP@register?$AA@			; `string'
;	COMDAT ??_C@_06CMONBEBE@atexit?$AA@
CONST	SEGMENT
??_C@_06CMONBEBE@atexit?$AA@ DB 'atexit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KFBBEIOJ@_run_exitfuncs?$AA@
CONST	SEGMENT
??_C@_0P@KFBBEIOJ@_run_exitfuncs?$AA@ DB '_run_exitfuncs', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PKKNFCHP@unregister?$AA@
CONST	SEGMENT
??_C@_0L@PKKNFCHP@unregister?$AA@ DB 'unregister', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06DNEIODDF@_clear?$AA@
CONST	SEGMENT
??_C@_06DNEIODDF@_clear?$AA@ DB '_clear', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DHHIDNEP@register?$AA@
CONST	SEGMENT
??_C@_08DHHIDNEP@register?$AA@ DB 'register', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
atexit_register__doc__ DB 'register(func, *args, **kwargs) -> func', 0aH, 0aH
	DB	'Register a function to be executed upon normal program termin'
	DB	'ation', 0aH, 0aH, '    func - function to be called at exit', 0aH
	DB	'    args - optional arguments to pass to func', 0aH, '    kwa'
	DB	'rgs - optional keyword arguments to pass to func', 0aH, 0aH, ' '
	DB	'   func is returned to facilitate usage as a decorator.', 00H
	ORG $+2
atexit_run_exitfuncs__doc__ DB '_run_exitfuncs() -> None', 0aH, 0aH, 'Run'
	DB	' all registered exit functions.', 00H
	ORG $+11
atexit_clear__doc__ DB '_clear() -> None', 0aH, 0aH, 'Clear the list of p'
	DB	'reviously registered exit functions.', 00H
	ORG $+6
atexit_unregister__doc__ DB 'unregister(func) -> None', 0aH, 0aH, 'Unregi'
	DB	'ster a exit function which was previously registered using', 0aH
	DB	'atexit.register', 0aH, 0aH, '    func - function to be unregi'
	DB	'stered', 00H
	ORG $+13
atexit_methods DQ FLAT:??_C@_08DHHIDNEP@register?$AA@
	DQ	FLAT:atexit_register
	DD	03H
	ORG $+4
	DQ	FLAT:atexit_register__doc__
	DQ	FLAT:??_C@_06DNEIODDF@_clear?$AA@
	DQ	FLAT:atexit_clear
	DD	04H
	ORG $+4
	DQ	FLAT:atexit_clear__doc__
	DQ	FLAT:??_C@_0L@PKKNFCHP@unregister?$AA@
	DQ	FLAT:atexit_unregister
	DD	08H
	ORG $+4
	DQ	FLAT:atexit_unregister__doc__
	DQ	FLAT:??_C@_0P@KFBBEIOJ@_run_exitfuncs?$AA@
	DQ	FLAT:atexit_run_exitfuncs
	DD	04H
	ORG $+4
	DQ	FLAT:atexit_run_exitfuncs__doc__
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
atexit__doc__ DB 'allow programmer to define multiple exit functions to b'
	DB	'e executedupon normal program termination.', 0aH, 0aH, 'Two p'
	DB	'ublic functions, register and unregister, are defined.', 0aH, 00H
atexitmodule DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_06CMONBEBE@atexit?$AA@
	DQ	FLAT:atexit__doc__
	DQ	0000000000000010H
	DQ	FLAT:atexit_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:atexit_free
_DATA	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
EXTRN	PyMem_Free:PROC
EXTRN	PyModule_GetState:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$atexit_delete_cb DD imagerel atexit_delete_cb
	DD	imagerel atexit_delete_cb+214
	DD	imagerel $unwind$atexit_delete_cb
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$atexit_delete_cb DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\atexitmodule.c
xdata	ENDS
;	COMDAT atexit_delete_cb
_TEXT	SEGMENT
self$ = 64
i$ = 72
atexit_delete_cb PROC					; COMDAT

; 89   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 63 da	 movsxd	 rbx, edx

; 90   :     atexitmodule_state *modstate;
; 91   :     atexit_callback *cb;
; 92   : 
; 93   :     modstate = GET_ATEXIT_STATE(self);

  0000d	e8 00 00 00 00	 call	 PyModule_GetState

; 94   :     cb = modstate->atexit_callbacks[i];

  00012	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00015	48 8b 3c d9	 mov	 rdi, QWORD PTR [rcx+rbx*8]

; 95   :     modstate->atexit_callbacks[i] = NULL;

  00019	48 c7 04 d9 00
	00 00 00	 mov	 QWORD PTR [rcx+rbx*8], 0

; 96   :     Py_DECREF(cb->func);

  00021	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  00024	e8 00 00 00 00	 call	 _Py_DecRef

; 97   :     Py_DECREF(cb->args);

  00029	48 8b 4f 08	 mov	 rcx, QWORD PTR [rdi+8]
  0002d	e8 00 00 00 00	 call	 _Py_DecRef

; 98   :     Py_XDECREF(cb->kwargs);

  00032	48 8b 5f 10	 mov	 rbx, QWORD PTR [rdi+16]
  00036	48 85 db	 test	 rbx, rbx
  00039	0f 84 85 00 00
	00		 je	 $LN3@atexit_del
  0003f	e8 00 00 00 00	 call	 _Py_PXCTX
  00044	85 c0		 test	 eax, eax
  00046	75 7c		 jne	 SHORT $LN3@atexit_del
  00048	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0004c	a8 20		 test	 al, 32			; 00000020H
  0004e	75 6c		 jne	 SHORT $LN11@atexit_del
  00050	84 c0		 test	 al, al
  00052	78 68		 js	 SHORT $LN11@atexit_del
  00054	a8 02		 test	 al, 2
  00056	75 6c		 jne	 SHORT $LN3@atexit_del
  00058	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0005c	75 66		 jne	 SHORT $LN3@atexit_del
  0005e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00065	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0006c	4c 8b cb	 mov	 r9, rbx
  0006f	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00075	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0007d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00082	48 8b cb	 mov	 rcx, rbx
  00085	85 c0		 test	 eax, eax
  00087	74 17		 je	 SHORT $LN16@atexit_del
  00089	e8 00 00 00 00	 call	 _Px_Dealloc

; 99   :     PyMem_Free(cb);

  0008e	48 8b cf	 mov	 rcx, rdi

; 100  : }

  00091	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00096	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0009a	5f		 pop	 rdi
  0009b	e9 00 00 00 00	 jmp	 PyMem_Free

; 98   :     Py_XDECREF(cb->kwargs);

$LN16@atexit_del:
  000a0	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000a4	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 99   :     PyMem_Free(cb);

  000aa	48 8b cf	 mov	 rcx, rdi

; 100  : }

  000ad	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000b2	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b6	5f		 pop	 rdi
  000b7	e9 00 00 00 00	 jmp	 PyMem_Free

; 98   :     Py_XDECREF(cb->kwargs);

$LN11@atexit_del:
  000bc	48 8b cb	 mov	 rcx, rbx
  000bf	e8 00 00 00 00	 call	 Px_DecRef
$LN3@atexit_del:

; 99   :     PyMem_Free(cb);

  000c4	48 8b cf	 mov	 rcx, rdi

; 100  : }

  000c7	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000cc	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d0	5f		 pop	 rdi
  000d1	e9 00 00 00 00	 jmp	 PyMem_Free
atexit_delete_cb ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@ILJKFDML@the?5first?5argument?5must?5be?5calla@ ; `string'
PUBLIC	??_C@_0CP@NKAFPPKC@register?$CI?$CJ?5takes?5at?5least?51?5argu@ ; `string'
EXTRN	PyTuple_GetSlice:PROC
EXTRN	PyMem_Malloc:PROC
EXTRN	PyCallable_Check:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyErr_NoMemory:PROC
EXTRN	PyMem_Realloc:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$atexit_register DD imagerel atexit_register
	DD	imagerel atexit_register+187
	DD	imagerel $unwind$atexit_register
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$atexit_register DD imagerel atexit_register+187
	DD	imagerel atexit_register+363
	DD	imagerel $chain$1$atexit_register
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$atexit_register DD imagerel atexit_register+363
	DD	imagerel atexit_register+385
	DD	imagerel $chain$2$atexit_register
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$atexit_register DD 021H
	DD	imagerel atexit_register
	DD	imagerel atexit_register+187
	DD	imagerel $unwind$atexit_register
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$atexit_register DD 020521H
	DD	083405H
	DD	imagerel atexit_register
	DD	imagerel atexit_register+187
	DD	imagerel $unwind$atexit_register
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$atexit_register DD 088b01H
	DD	09548bH
	DD	0b7410H
	DD	0a6410H
	DD	0c00c5210H
xdata	ENDS
;	COMDAT ??_C@_0CE@ILJKFDML@the?5first?5argument?5must?5be?5calla@
CONST	SEGMENT
??_C@_0CE@ILJKFDML@the?5first?5argument?5must?5be?5calla@ DB 'the first a'
	DB	'rgument must be callable', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@NKAFPPKC@register?$CI?$CJ?5takes?5at?5least?51?5argu@
CONST	SEGMENT
??_C@_0CP@NKAFPPKC@register?$CI?$CJ?5takes?5at?5least?51?5argu@ DB 'regis'
	DB	'ter() takes at least 1 argument (0 given)', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\atexitmodule.c
CONST	ENDS
;	COMDAT atexit_register
_TEXT	SEGMENT
self$ = 64
args$ = 72
kwargs$ = 80
atexit_register PROC					; COMDAT

; 125  : {

  00000	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  00005	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0000a	41 54		 push	 r12
  0000c	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00010	49 8b f8	 mov	 rdi, r8
  00013	4c 8b e2	 mov	 r12, rdx

; 126  :     atexitmodule_state *modstate;
; 127  :     atexit_callback *new_callback;
; 128  :     PyObject *func = NULL;
; 129  : 
; 130  :     modstate = GET_ATEXIT_STATE(self);

  00016	e8 00 00 00 00	 call	 PyModule_GetState

; 131  : 
; 132  :     if (modstate->ncallbacks >= modstate->callback_len) {

  0001b	8b 48 0c	 mov	 ecx, DWORD PTR [rax+12]
  0001e	48 8b f0	 mov	 rsi, rax
  00021	39 48 08	 cmp	 DWORD PTR [rax+8], ecx
  00024	7c 32		 jl	 SHORT $LN10@atexit_reg

; 133  :         atexit_callback **r;
; 134  :         modstate->callback_len += 16;

  00026	83 c1 10	 add	 ecx, 16

; 135  :         r = (atexit_callback**)PyMem_Realloc(modstate->atexit_callbacks,
; 136  :                                       sizeof(atexit_callback*) * modstate->callback_len);

  00029	48 63 d1	 movsxd	 rdx, ecx
  0002c	89 48 0c	 mov	 DWORD PTR [rax+12], ecx
  0002f	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00032	48 c1 e2 03	 shl	 rdx, 3
  00036	e8 00 00 00 00	 call	 PyMem_Realloc

; 137  :         if (r == NULL)

  0003b	48 85 c0	 test	 rax, rax
  0003e	75 15		 jne	 SHORT $LN9@atexit_reg

; 173  : }

  00040	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00045	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  0004a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0004e	41 5c		 pop	 r12
  00050	e9 00 00 00 00	 jmp	 PyErr_NoMemory
$LN9@atexit_reg:

; 138  :             return PyErr_NoMemory();
; 139  :         modstate->atexit_callbacks = r;

  00055	48 89 06	 mov	 QWORD PTR [rsi], rax
$LN10@atexit_reg:

; 140  :     }
; 141  : 
; 142  :     if (PyTuple_GET_SIZE(args) == 0) {

  00058	49 83 7c 24 60
	00		 cmp	 QWORD PTR [r12+96], 0
  0005e	75 26		 jne	 SHORT $LN8@atexit_reg

; 143  :         PyErr_SetString(PyExc_TypeError,
; 144  :                 "register() takes at least 1 argument (0 given)");

  00060	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00067	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@NKAFPPKC@register?$CI?$CJ?5takes?5at?5least?51?5argu@
  0006e	e8 00 00 00 00	 call	 PyErr_SetString

; 145  :         return NULL; 

  00073	33 c0		 xor	 eax, eax

; 173  : }

  00075	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  0007a	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  0007f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00083	41 5c		 pop	 r12
  00085	c3		 ret	 0
$LN8@atexit_reg:
  00086	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp

; 146  :     }
; 147  : 
; 148  :     func = PyTuple_GET_ITEM(args, 0);

  0008b	49 8b 6c 24 70	 mov	 rbp, QWORD PTR [r12+112]

; 149  :     if (!PyCallable_Check(func)) {

  00090	48 8b cd	 mov	 rcx, rbp
  00093	e8 00 00 00 00	 call	 PyCallable_Check
  00098	85 c0		 test	 eax, eax
  0009a	75 1a		 jne	 SHORT $LN7@atexit_reg

; 150  :         PyErr_SetString(PyExc_TypeError,
; 151  :                 "the first argument must be callable");

  0009c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@ILJKFDML@the?5first?5argument?5must?5be?5calla@
  000aa	e8 00 00 00 00	 call	 PyErr_SetString

; 152  :         return NULL;

  000af	33 c0		 xor	 eax, eax
  000b1	e9 b5 00 00 00	 jmp	 $LN17@atexit_reg
$LN7@atexit_reg:

; 153  :     }
; 154  : 
; 155  :     new_callback = PyMem_Malloc(sizeof(atexit_callback));

  000b6	b9 18 00 00 00	 mov	 ecx, 24
  000bb	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  000c0	e8 00 00 00 00	 call	 PyMem_Malloc
  000c5	48 8b d8	 mov	 rbx, rax

; 156  :     if (new_callback == NULL)

  000c8	48 85 c0	 test	 rax, rax
  000cb	75 0a		 jne	 SHORT $LN6@atexit_reg

; 157  :         return PyErr_NoMemory();   

  000cd	e8 00 00 00 00	 call	 PyErr_NoMemory
  000d2	e9 8f 00 00 00	 jmp	 $LN18@atexit_reg
$LN6@atexit_reg:

; 158  : 
; 159  :     new_callback->args = PyTuple_GetSlice(args, 1, PyTuple_GET_SIZE(args));

  000d7	4d 8b 44 24 60	 mov	 r8, QWORD PTR [r12+96]
  000dc	ba 01 00 00 00	 mov	 edx, 1
  000e1	49 8b cc	 mov	 rcx, r12
  000e4	e8 00 00 00 00	 call	 PyTuple_GetSlice
  000e9	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax

; 160  :     if (new_callback->args == NULL) {

  000ed	48 85 c0	 test	 rax, rax
  000f0	75 0c		 jne	 SHORT $LN5@atexit_reg

; 161  :         PyMem_Free(new_callback);

  000f2	48 8b cb	 mov	 rcx, rbx
  000f5	e8 00 00 00 00	 call	 PyMem_Free

; 162  :         return NULL;

  000fa	33 c0		 xor	 eax, eax
  000fc	eb 68		 jmp	 SHORT $LN18@atexit_reg
$LN5@atexit_reg:

; 163  :     }
; 164  :     new_callback->func = func;
; 165  :     new_callback->kwargs = kwargs;
; 166  :     Py_INCREF(func);

  000fe	48 8b cd	 mov	 rcx, rbp
  00101	48 89 2b	 mov	 QWORD PTR [rbx], rbp
  00104	48 89 7b 10	 mov	 QWORD PTR [rbx+16], rdi
  00108	e8 00 00 00 00	 call	 _Py_IncRef

; 167  :     Py_XINCREF(kwargs);

  0010d	48 85 ff	 test	 rdi, rdi
  00110	74 3b		 je	 SHORT $LN3@atexit_reg
  00112	e8 00 00 00 00	 call	 _Py_PXCTX
  00117	85 c0		 test	 eax, eax
  00119	75 32		 jne	 SHORT $LN3@atexit_reg
  0011b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00122	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00129	4c 8b cf	 mov	 r9, rdi
  0012c	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00132	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0013a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0013f	85 c0		 test	 eax, eax
  00141	75 06		 jne	 SHORT $LN13@atexit_reg
  00143	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  00147	74 04		 je	 SHORT $LN3@atexit_reg
$LN13@atexit_reg:
  00149	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN3@atexit_reg:

; 168  : 
; 169  :     modstate->atexit_callbacks[modstate->ncallbacks++] = new_callback;

  0014d	48 63 56 08	 movsxd	 rdx, DWORD PTR [rsi+8]
  00151	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  00154	48 89 1c d1	 mov	 QWORD PTR [rcx+rdx*8], rbx
  00158	ff 46 08	 inc	 DWORD PTR [rsi+8]

; 170  : 
; 171  :     Py_INCREF(func);

  0015b	48 8b cd	 mov	 rcx, rbp
  0015e	e8 00 00 00 00	 call	 _Py_IncRef

; 172  :     return func;

  00163	48 8b c5	 mov	 rax, rbp
$LN18@atexit_reg:
  00166	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN17@atexit_reg:
  0016b	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]

; 173  : }

  00170	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00175	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  0017a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0017e	41 5c		 pop	 r12
  00180	c3		 ret	 0
atexit_register ENDP
_TEXT	ENDS
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$atexit_clear DD imagerel atexit_clear
	DD	imagerel atexit_clear+6
	DD	imagerel $unwind$atexit_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$atexit_clear DD imagerel atexit_clear+6
	DD	imagerel atexit_clear+34
	DD	imagerel $chain$1$atexit_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$atexit_clear DD imagerel atexit_clear+34
	DD	imagerel atexit_clear+84
	DD	imagerel $chain$2$atexit_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$atexit_clear DD imagerel atexit_clear+84
	DD	imagerel atexit_clear+110
	DD	imagerel $chain$3$atexit_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$atexit_clear DD imagerel atexit_clear+110
	DD	imagerel atexit_clear+195
	DD	imagerel $chain$4$atexit_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$atexit_clear DD 021H
	DD	imagerel atexit_clear
	DD	imagerel atexit_clear+6
	DD	imagerel $unwind$atexit_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$atexit_clear DD 021H
	DD	imagerel atexit_clear+6
	DD	imagerel atexit_clear+34
	DD	imagerel $chain$1$atexit_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$atexit_clear DD 020521H
	DD	0a7405H
	DD	imagerel atexit_clear+6
	DD	imagerel atexit_clear+34
	DD	imagerel $chain$1$atexit_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$atexit_clear DD 040a21H
	DD	09640aH
	DD	085405H
	DD	imagerel atexit_clear
	DD	imagerel atexit_clear+6
	DD	imagerel $unwind$atexit_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$atexit_clear DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\atexitmodule.c
xdata	ENDS
;	COMDAT atexit_clear
_TEXT	SEGMENT
self$ = 64
unused$ = 72
atexit_clear PROC					; COMDAT

; 196  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 89 6c 24 40	 mov	 QWORD PTR [rsp+64], rbp
  0000b	48 89 74 24 48	 mov	 QWORD PTR [rsp+72], rsi
  00010	48 8b e9	 mov	 rbp, rcx

; 197  :     atexitmodule_state *modstate;
; 198  :     atexit_callback *cb;
; 199  :     int i;
; 200  : 
; 201  :     modstate = GET_ATEXIT_STATE(self);

  00013	e8 00 00 00 00	 call	 PyModule_GetState

; 202  : 
; 203  :     for (i = 0; i < modstate->ncallbacks; i++) {

  00018	33 db		 xor	 ebx, ebx
  0001a	48 8b f0	 mov	 rsi, rax
  0001d	39 58 08	 cmp	 DWORD PTR [rax+8], ebx
  00020	7e 32		 jle	 SHORT $LN2@atexit_cle

; 197  :     atexitmodule_state *modstate;
; 198  :     atexit_callback *cb;
; 199  :     int i;
; 200  : 
; 201  :     modstate = GET_ATEXIT_STATE(self);

  00022	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  00027	33 ff		 xor	 edi, edi
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@atexit_cle:

; 204  :         cb = modstate->atexit_callbacks[i];
; 205  :         if (cb == NULL)

  00030	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  00033	48 83 3c 0f 00	 cmp	 QWORD PTR [rdi+rcx], 0
  00038	74 0a		 je	 SHORT $LN3@atexit_cle

; 206  :             continue;
; 207  : 
; 208  :         atexit_delete_cb(self, i);

  0003a	8b d3		 mov	 edx, ebx
  0003c	48 8b cd	 mov	 rcx, rbp
  0003f	e8 00 00 00 00	 call	 atexit_delete_cb
$LN3@atexit_cle:

; 202  : 
; 203  :     for (i = 0; i < modstate->ncallbacks; i++) {

  00044	ff c3		 inc	 ebx
  00046	48 83 c7 08	 add	 rdi, 8
  0004a	3b 5e 08	 cmp	 ebx, DWORD PTR [rsi+8]
  0004d	7c e1		 jl	 SHORT $LL4@atexit_cle
  0004f	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]
$LN2@atexit_cle:

; 209  :     }
; 210  :     modstate->ncallbacks = 0;

  00054	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [rsi+8], 0

; 211  :     Py_RETURN_NONE;

  0005b	e8 00 00 00 00	 call	 _Py_PXCTX
  00060	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00065	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  0006a	85 c0		 test	 eax, eax
  0006c	75 48		 jne	 SHORT $LN13@atexit_cle
  0006e	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  00075	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0007c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00083	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00089	4c 8b cb	 mov	 r9, rbx
  0008c	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00094	e8 00 00 00 00	 call	 _PyParallel_Guard
  00099	85 c0		 test	 eax, eax
  0009b	75 09		 jne	 SHORT $LN7@atexit_cle
  0009d	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  000a4	74 07		 je	 SHORT $LN15@atexit_cle
$LN7@atexit_cle:
  000a6	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN15@atexit_cle:
  000ad	48 8b c3	 mov	 rax, rbx

; 212  : }

  000b0	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b4	5b		 pop	 rbx
  000b5	c3		 ret	 0
$LN13@atexit_cle:

; 211  :     Py_RETURN_NONE;

  000b6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 212  : }

  000bd	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c1	5b		 pop	 rbx
  000c2	c3		 ret	 0
atexit_clear ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$atexit_free DD imagerel atexit_free
	DD	imagerel atexit_free+21
	DD	imagerel $unwind$atexit_free
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$atexit_free DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT atexit_free
_TEXT	SEGMENT
m$ = 48
atexit_free PROC					; COMDAT

; 216  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 217  :     atexitmodule_state *modstate;
; 218  :     modstate = GET_ATEXIT_STATE(m);

  00004	e8 00 00 00 00	 call	 PyModule_GetState

; 219  :     PyMem_Free(modstate->atexit_callbacks);

  00009	48 8b 08	 mov	 rcx, QWORD PTR [rax]

; 220  : }

  0000c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00010	e9 00 00 00 00	 jmp	 PyMem_Free
atexit_free ENDP
_TEXT	ENDS
EXTRN	PyObject_RichCompareBool:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$atexit_unregister DD imagerel atexit_unregister
	DD	imagerel atexit_unregister+212
	DD	imagerel $unwind$atexit_unregister
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$atexit_unregister DD 0a1a01H
	DD	0b741aH
	DD	0a641aH
	DD	09541aH
	DD	08341aH
	DD	0c016521aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\atexitmodule.c
xdata	ENDS
;	COMDAT atexit_unregister
_TEXT	SEGMENT
self$ = 64
func$ = 72
atexit_unregister PROC					; COMDAT

; 232  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0001a	4c 8b e2	 mov	 r12, rdx
  0001d	48 8b e9	 mov	 rbp, rcx

; 233  :     atexitmodule_state *modstate;
; 234  :     atexit_callback *cb;
; 235  :     int i, eq;
; 236  : 
; 237  :     modstate = GET_ATEXIT_STATE(self);

  00020	e8 00 00 00 00	 call	 PyModule_GetState

; 238  : 
; 239  :     for (i = 0; i < modstate->ncallbacks; i++)

  00025	33 db		 xor	 ebx, ebx
  00027	48 8b f0	 mov	 rsi, rax
  0002a	39 58 08	 cmp	 DWORD PTR [rax+8], ebx
  0002d	7e 3a		 jle	 SHORT $LN16@atexit_unr

; 233  :     atexitmodule_state *modstate;
; 234  :     atexit_callback *cb;
; 235  :     int i, eq;
; 236  : 
; 237  :     modstate = GET_ATEXIT_STATE(self);

  0002f	8b fb		 mov	 edi, ebx
$LL6@atexit_unr:

; 240  :     {
; 241  :         cb = modstate->atexit_callbacks[i];

  00031	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  00034	48 8b 0c 0f	 mov	 rcx, QWORD PTR [rdi+rcx]

; 242  :         if (cb == NULL)

  00038	48 85 c9	 test	 rcx, rcx
  0003b	74 21		 je	 SHORT $LN5@atexit_unr

; 243  :             continue;
; 244  : 
; 245  :         eq = PyObject_RichCompareBool(cb->func, func, Py_EQ);

  0003d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00040	41 b8 02 00 00
	00		 mov	 r8d, 2
  00046	49 8b d4	 mov	 rdx, r12
  00049	e8 00 00 00 00	 call	 PyObject_RichCompareBool

; 246  :         if (eq < 0)

  0004e	85 c0		 test	 eax, eax
  00050	78 7e		 js	 SHORT $LN14@atexit_unr

; 248  :         if (eq)

  00052	74 0a		 je	 SHORT $LN5@atexit_unr

; 249  :             atexit_delete_cb(self, i);

  00054	8b d3		 mov	 edx, ebx
  00056	48 8b cd	 mov	 rcx, rbp
  00059	e8 00 00 00 00	 call	 atexit_delete_cb
$LN5@atexit_unr:

; 238  : 
; 239  :     for (i = 0; i < modstate->ncallbacks; i++)

  0005e	ff c3		 inc	 ebx
  00060	48 83 c7 08	 add	 rdi, 8
  00064	3b 5e 08	 cmp	 ebx, DWORD PTR [rsi+8]
  00067	7c c8		 jl	 SHORT $LL6@atexit_unr
$LN16@atexit_unr:

; 250  :     }
; 251  :     Py_RETURN_NONE;

  00069	e8 00 00 00 00	 call	 _Py_PXCTX
  0006e	85 c0		 test	 eax, eax
  00070	75 3c		 jne	 SHORT $LN10@atexit_unr
  00072	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00079	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00080	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00087	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0008d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00095	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009a	85 c0		 test	 eax, eax
  0009c	75 09		 jne	 SHORT $LN9@atexit_unr
  0009e	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  000a5	74 07		 je	 SHORT $LN10@atexit_unr
$LN9@atexit_unr:
  000a7	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN10@atexit_unr:
  000ae	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN7@atexit_unr:

; 252  : }

  000b5	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000ba	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  000bf	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  000c4	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  000c9	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000cd	41 5c		 pop	 r12
  000cf	c3		 ret	 0
$LN14@atexit_unr:

; 247  :             return NULL;

  000d0	33 c0		 xor	 eax, eax
  000d2	eb e1		 jmp	 SHORT $LN7@atexit_unr
atexit_unregister ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$atexit_cleanup DD imagerel atexit_cleanup
	DD	imagerel atexit_cleanup+23
	DD	imagerel $unwind$atexit_cleanup
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$atexit_cleanup DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT atexit_cleanup
_TEXT	SEGMENT
self$ = 48
atexit_cleanup PROC					; COMDAT

; 104  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 105  :     PyObject *r = atexit_clear(self, NULL);

  00004	33 d2		 xor	 edx, edx
  00006	e8 00 00 00 00	 call	 atexit_clear

; 106  :     Py_DECREF(r);

  0000b	48 8b c8	 mov	 rcx, rax

; 107  : }

  0000e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00012	e9 00 00 00 00	 jmp	 _Py_DecRef
atexit_cleanup ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@OCGJGIFK@Error?5in?5atexit?4_run_exitfuncs?3?6@ ; `string'
EXTRN	PyErr_Restore:PROC
EXTRN	PyErr_Display:PROC
EXTRN	PyErr_NormalizeException:PROC
EXTRN	PySys_WriteStderr:PROC
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_SystemExit:QWORD
EXTRN	PyErr_Fetch:PROC
EXTRN	PyObject_Call:PROC
EXTRN	PyState_FindModule:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$atexit_callfuncs DD imagerel atexit_callfuncs
	DD	imagerel atexit_callfuncs+42
	DD	imagerel $unwind$atexit_callfuncs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$atexit_callfuncs DD imagerel atexit_callfuncs+42
	DD	imagerel atexit_callfuncs+68
	DD	imagerel $chain$0$atexit_callfuncs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$atexit_callfuncs DD imagerel atexit_callfuncs+68
	DD	imagerel atexit_callfuncs+82
	DD	imagerel $chain$1$atexit_callfuncs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$atexit_callfuncs DD imagerel atexit_callfuncs+82
	DD	imagerel atexit_callfuncs+407
	DD	imagerel $chain$2$atexit_callfuncs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$atexit_callfuncs DD imagerel atexit_callfuncs+407
	DD	imagerel atexit_callfuncs+430
	DD	imagerel $chain$3$atexit_callfuncs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$atexit_callfuncs DD imagerel atexit_callfuncs+430
	DD	imagerel atexit_callfuncs+450
	DD	imagerel $chain$4$atexit_callfuncs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$atexit_callfuncs DD imagerel atexit_callfuncs+450
	DD	imagerel atexit_callfuncs+456
	DD	imagerel $chain$5$atexit_callfuncs
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$atexit_callfuncs DD 021H
	DD	imagerel atexit_callfuncs
	DD	imagerel atexit_callfuncs+42
	DD	imagerel $unwind$atexit_callfuncs
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$atexit_callfuncs DD 021H
	DD	imagerel atexit_callfuncs+42
	DD	imagerel atexit_callfuncs+68
	DD	imagerel $chain$0$atexit_callfuncs
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$atexit_callfuncs DD 021H
	DD	imagerel atexit_callfuncs+68
	DD	imagerel atexit_callfuncs+82
	DD	imagerel $chain$1$atexit_callfuncs
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$atexit_callfuncs DD 020521H
	DD	0d3405H
	DD	imagerel atexit_callfuncs+68
	DD	imagerel atexit_callfuncs+82
	DD	imagerel $chain$1$atexit_callfuncs
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$atexit_callfuncs DD 020521H
	DD	067405H
	DD	imagerel atexit_callfuncs+42
	DD	imagerel atexit_callfuncs+68
	DD	imagerel $chain$0$atexit_callfuncs
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$atexit_callfuncs DD 020521H
	DD	076405H
	DD	imagerel atexit_callfuncs
	DD	imagerel atexit_callfuncs+42
	DD	imagerel $unwind$atexit_callfuncs
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$atexit_callfuncs DD 020601H
	DD	050027206H
xdata	ENDS
;	COMDAT ??_C@_0CB@OCGJGIFK@Error?5in?5atexit?4_run_exitfuncs?3?6@
CONST	SEGMENT
??_C@_0CB@OCGJGIFK@Error?5in?5atexit?4_run_exitfuncs?3?6@ DB 'Error in at'
	DB	'exit._run_exitfuncs:', 0aH, 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\atexitmodule.c
CONST	ENDS
;	COMDAT atexit_callfuncs
_TEXT	SEGMENT
exc_type$ = 80
exc_tb$ = 88
exc_value$ = 96
atexit_callfuncs PROC					; COMDAT

; 40   : {

  00000	40 55		 push	 rbp
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 41   :     PyObject *exc_type = NULL, *exc_value, *exc_tb, *r;
; 42   :     atexit_callback *cb;
; 43   :     PyObject *module;
; 44   :     atexitmodule_state *modstate;
; 45   :     int i;
; 46   : 
; 47   :     module = PyState_FindModule(&atexitmodule);

  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:atexitmodule
  0000d	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR exc_type$[rsp], 0
  00016	e8 00 00 00 00	 call	 PyState_FindModule
  0001b	48 8b e8	 mov	 rbp, rax

; 48   :     if (module == NULL)

  0001e	48 85 c0	 test	 rax, rax
  00021	0f 84 9b 01 00
	00		 je	 $LN1@atexit_cal

; 49   :         return;
; 50   :     modstate = GET_ATEXIT_STATE(module);

  00027	48 8b c8	 mov	 rcx, rax
  0002a	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  0002f	e8 00 00 00 00	 call	 PyModule_GetState
  00034	48 8b f0	 mov	 rsi, rax

; 51   : 
; 52   :     if (modstate->ncallbacks == 0)

  00037	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  0003a	85 c9		 test	 ecx, ecx
  0003c	0f 84 7b 01 00
	00		 je	 $LN39@atexit_cal

; 53   :         return;
; 54   : 
; 55   : 
; 56   :     for (i = modstate->ncallbacks - 1; i >= 0; i--)

  00042	ff c9		 dec	 ecx
  00044	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  00049	48 63 f9	 movsxd	 rdi, ecx
  0004c	0f 88 45 01 00
	00		 js	 $LN18@atexit_cal
  00052	48 89 5c 24 68	 mov	 QWORD PTR [rsp+104], rbx
  00057	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL20@atexit_cal:

; 57   :     {
; 58   :         cb = modstate->atexit_callbacks[i];

  00060	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  00063	48 8b 0c f8	 mov	 rcx, QWORD PTR [rax+rdi*8]

; 59   :         if (cb == NULL)

  00067	48 85 c9	 test	 rcx, rcx
  0006a	0f 84 19 01 00
	00		 je	 $LN19@atexit_cal

; 60   :             continue;
; 61   : 
; 62   :         r = PyObject_Call(cb->func, cb->args, cb->kwargs);

  00070	4c 8b 41 10	 mov	 r8, QWORD PTR [rcx+16]
  00074	48 8b 51 08	 mov	 rdx, QWORD PTR [rcx+8]
  00078	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0007b	e8 00 00 00 00	 call	 PyObject_Call
  00080	48 8b d8	 mov	 rbx, rax

; 63   :         Py_XDECREF(r);

  00083	48 85 c0	 test	 rax, rax
  00086	74 7c		 je	 SHORT $LN38@atexit_cal
  00088	e8 00 00 00 00	 call	 _Py_PXCTX
  0008d	85 c0		 test	 eax, eax
  0008f	0f 85 f4 00 00
	00		 jne	 $LN19@atexit_cal
  00095	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00099	a8 20		 test	 al, 32			; 00000020H
  0009b	75 5a		 jne	 SHORT $LN29@atexit_cal
  0009d	84 c0		 test	 al, al
  0009f	78 56		 js	 SHORT $LN29@atexit_cal
  000a1	a8 02		 test	 al, 2
  000a3	0f 85 e0 00 00
	00		 jne	 $LN19@atexit_cal
  000a9	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000ad	0f 85 d6 00 00
	00		 jne	 $LN19@atexit_cal
  000b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c1	4c 8b cb	 mov	 r9, rbx
  000c4	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000ca	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d2	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d7	48 8b cb	 mov	 rcx, rbx
  000da	85 c0		 test	 eax, eax
  000dc	74 0a		 je	 SHORT $LN34@atexit_cal
  000de	e8 00 00 00 00	 call	 _Px_Dealloc
  000e3	e9 a1 00 00 00	 jmp	 $LN19@atexit_cal
$LN34@atexit_cal:
  000e8	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000ec	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000f2	e9 92 00 00 00	 jmp	 $LN19@atexit_cal
$LN29@atexit_cal:
  000f7	48 8b cb	 mov	 rcx, rbx
  000fa	e8 00 00 00 00	 call	 Px_DecRef

; 64   :         if (r == NULL) {

  000ff	e9 85 00 00 00	 jmp	 $LN19@atexit_cal
$LN38@atexit_cal:

; 65   :             /* Maintain the last exception, but don't leak if there are
; 66   :                multiple exceptions. */
; 67   :             if (exc_type) {

  00104	48 8b 4c 24 50	 mov	 rcx, QWORD PTR exc_type$[rsp]
  00109	48 85 c9	 test	 rcx, rcx
  0010c	74 23		 je	 SHORT $LN4@atexit_cal

; 68   :                 Py_DECREF(exc_type);

  0010e	e8 00 00 00 00	 call	 _Py_DecRef

; 69   :                 Py_XDECREF(exc_value);

  00113	48 8b 4c 24 60	 mov	 rcx, QWORD PTR exc_value$[rsp]
  00118	48 85 c9	 test	 rcx, rcx
  0011b	74 05		 je	 SHORT $LN9@atexit_cal
  0011d	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@atexit_cal:

; 70   :                 Py_XDECREF(exc_tb);    

  00122	48 8b 4c 24 58	 mov	 rcx, QWORD PTR exc_tb$[rsp]
  00127	48 85 c9	 test	 rcx, rcx
  0012a	74 05		 je	 SHORT $LN4@atexit_cal
  0012c	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@atexit_cal:

; 71   :             }
; 72   :             PyErr_Fetch(&exc_type, &exc_value, &exc_tb);

  00131	4c 8d 44 24 58	 lea	 r8, QWORD PTR exc_tb$[rsp]
  00136	48 8d 54 24 60	 lea	 rdx, QWORD PTR exc_value$[rsp]
  0013b	48 8d 4c 24 50	 lea	 rcx, QWORD PTR exc_type$[rsp]
  00140	e8 00 00 00 00	 call	 PyErr_Fetch

; 73   :             if (!PyErr_ExceptionMatches(PyExc_SystemExit)) {

  00145	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemExit
  0014c	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00151	85 c0		 test	 eax, eax
  00153	75 34		 jne	 SHORT $LN19@atexit_cal

; 74   :                 PySys_WriteStderr("Error in atexit._run_exitfuncs:\n");

  00155	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CB@OCGJGIFK@Error?5in?5atexit?4_run_exitfuncs?3?6@
  0015c	e8 00 00 00 00	 call	 PySys_WriteStderr

; 75   :                 PyErr_NormalizeException(&exc_type, &exc_value, &exc_tb);

  00161	4c 8d 44 24 58	 lea	 r8, QWORD PTR exc_tb$[rsp]
  00166	48 8d 54 24 60	 lea	 rdx, QWORD PTR exc_value$[rsp]
  0016b	48 8d 4c 24 50	 lea	 rcx, QWORD PTR exc_type$[rsp]
  00170	e8 00 00 00 00	 call	 PyErr_NormalizeException

; 76   :                 PyErr_Display(exc_type, exc_value, exc_tb);

  00175	4c 8b 44 24 58	 mov	 r8, QWORD PTR exc_tb$[rsp]
  0017a	48 8b 54 24 60	 mov	 rdx, QWORD PTR exc_value$[rsp]
  0017f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR exc_type$[rsp]
  00184	e8 00 00 00 00	 call	 PyErr_Display
$LN19@atexit_cal:

; 53   :         return;
; 54   : 
; 55   : 
; 56   :     for (i = modstate->ncallbacks - 1; i >= 0; i--)

  00189	48 ff cf	 dec	 rdi
  0018c	0f 89 ce fe ff
	ff		 jns	 $LL20@atexit_cal
  00192	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
$LN18@atexit_cal:

; 77   :             }
; 78   :         }
; 79   :     }
; 80   : 
; 81   :     atexit_cleanup(module);

  00197	48 8b cd	 mov	 rcx, rbp
  0019a	e8 00 00 00 00	 call	 atexit_cleanup

; 82   : 
; 83   :     if (exc_type)

  0019f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR exc_type$[rsp]
  001a4	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
  001a9	48 85 c9	 test	 rcx, rcx
  001ac	74 0f		 je	 SHORT $LN39@atexit_cal

; 84   :         PyErr_Restore(exc_type, exc_value, exc_tb);

  001ae	4c 8b 44 24 58	 mov	 r8, QWORD PTR exc_tb$[rsp]
  001b3	48 8b 54 24 60	 mov	 rdx, QWORD PTR exc_value$[rsp]
  001b8	e8 00 00 00 00	 call	 PyErr_Restore
$LN39@atexit_cal:
  001bd	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
$LN1@atexit_cal:

; 85   : }

  001c2	48 83 c4 40	 add	 rsp, 64			; 00000040H
  001c6	5d		 pop	 rbp
  001c7	c3		 ret	 0
atexit_callfuncs ENDP
_TEXT	ENDS
EXTRN	PyErr_Occurred:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$atexit_run_exitfuncs DD imagerel atexit_run_exitfuncs
	DD	imagerel atexit_run_exitfuncs+107
	DD	imagerel $unwind$atexit_run_exitfuncs
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$atexit_run_exitfuncs DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\atexitmodule.c
xdata	ENDS
;	COMDAT atexit_run_exitfuncs
_TEXT	SEGMENT
self$ = 64
unused$ = 72
atexit_run_exitfuncs PROC				; COMDAT

; 182  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 183  :     atexit_callfuncs();

  00004	e8 00 00 00 00	 call	 atexit_callfuncs

; 184  :     if (PyErr_Occurred())

  00009	e8 00 00 00 00	 call	 PyErr_Occurred
  0000e	48 85 c0	 test	 rax, rax
  00011	74 07		 je	 SHORT $LN1@atexit_run

; 185  :         return NULL;

  00013	33 c0		 xor	 eax, eax

; 187  : }

  00015	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00019	c3		 ret	 0
$LN1@atexit_run:

; 186  :     Py_RETURN_NONE;

  0001a	e8 00 00 00 00	 call	 _Py_PXCTX
  0001f	85 c0		 test	 eax, eax
  00021	75 3c		 jne	 SHORT $LN5@atexit_run
  00023	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00038	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0003e	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00046	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004b	85 c0		 test	 eax, eax
  0004d	75 09		 jne	 SHORT $LN4@atexit_run
  0004f	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00056	74 07		 je	 SHORT $LN5@atexit_run
$LN4@atexit_run:
  00058	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN5@atexit_run:
  0005f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 187  : }

  00066	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006a	c3		 ret	 0
atexit_run_exitfuncs ENDP
_TEXT	ENDS
PUBLIC	PyInit_atexit
EXTRN	_Py_PyAtExit:PROC
EXTRN	PyModule_Create2:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyInit_atexit DD imagerel $LN8
	DD	imagerel $LN8+42
	DD	imagerel $unwind$PyInit_atexit
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyInit_atexit DD imagerel $LN8+42
	DD	imagerel $LN8+92
	DD	imagerel $chain$0$PyInit_atexit
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyInit_atexit DD imagerel $LN8+92
	DD	imagerel $LN8+113
	DD	imagerel $chain$1$PyInit_atexit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyInit_atexit DD 021H
	DD	imagerel $LN8
	DD	imagerel $LN8+42
	DD	imagerel $unwind$PyInit_atexit
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyInit_atexit DD 020521H
	DD	063405H
	DD	imagerel $LN8
	DD	imagerel $LN8+42
	DD	imagerel $unwind$PyInit_atexit
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit_atexit DD 020601H
	DD	070023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyInit_atexit
_TEXT	SEGMENT
PyInit_atexit PROC					; COMDAT

; 291  : {

$LN8:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 292  :     PyObject *m;
; 293  :     atexitmodule_state *modstate;
; 294  : 
; 295  :     m = PyModule_Create(&atexitmodule);

  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:atexitmodule
  0000d	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00012	e8 00 00 00 00	 call	 PyModule_Create2
  00017	48 8b f8	 mov	 rdi, rax

; 296  :     if (m == NULL)

  0001a	48 85 c0	 test	 rax, rax
  0001d	75 08		 jne	 SHORT $LN2@PyInit_ate
$LN7@PyInit_ate:

; 297  :         return NULL;

  0001f	33 c0		 xor	 eax, eax

; 309  : }

  00021	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00025	5f		 pop	 rdi
  00026	c3		 ret	 0
$LN2@PyInit_ate:

; 298  : 
; 299  :     modstate = GET_ATEXIT_STATE(m);

  00027	48 8b c8	 mov	 rcx, rax
  0002a	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0002f	e8 00 00 00 00	 call	 PyModule_GetState

; 300  :     modstate->callback_len = 32;
; 301  :     modstate->ncallbacks = 0;
; 302  :     modstate->atexit_callbacks = PyMem_New(atexit_callback*, 
; 303  :                                            modstate->callback_len);

  00034	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00039	c7 40 0c 20 00
	00 00		 mov	 DWORD PTR [rax+12], 32	; 00000020H
  00040	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [rax+8], 0
  00047	48 8b d8	 mov	 rbx, rax
  0004a	e8 00 00 00 00	 call	 PyMem_Malloc
  0004f	48 89 03	 mov	 QWORD PTR [rbx], rax
  00052	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 304  :     if (modstate->atexit_callbacks == NULL)

  00057	48 85 c0	 test	 rax, rax

; 305  :         return NULL;

  0005a	74 c3		 je	 SHORT $LN7@PyInit_ate

; 306  : 
; 307  :     _Py_PyAtExit(atexit_callfuncs);

  0005c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:atexit_callfuncs
  00063	e8 00 00 00 00	 call	 _Py_PyAtExit

; 308  :     return m;

  00068	48 8b c7	 mov	 rax, rdi

; 309  : }

  0006b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006f	5f		 pop	 rdi
  00070	c3		 ret	 0
PyInit_atexit ENDP
_TEXT	ENDS
END
