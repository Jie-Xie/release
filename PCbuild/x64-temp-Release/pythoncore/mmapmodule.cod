; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_04PHBJEMCB@mmap?$AA@			; `string'
PUBLIC	??_C@_06KLHHMIGM@offset?$AA@			; `string'
PUBLIC	??_C@_06EBPNOMLE@access?$AA@			; `string'
PUBLIC	??_C@_07HHOKFJJE@tagname?$AA@			; `string'
PUBLIC	??_C@_06IJDLPEM@length?$AA@			; `string'
PUBLIC	??_C@_06FFBIALPD@fileno?$AA@			; `string'
PUBLIC	??_C@_09JGALCODB@mmap?4mmap?$AA@		; `string'
PUBLIC	??_C@_06IKJOPBFO@closed?$AA@			; `string'
PUBLIC	??_C@_08CMFIGCJD@__exit__?$AA@			; `string'
PUBLIC	??_C@_09OAJHKKGH@__enter__?$AA@			; `string'
PUBLIC	??_C@_0L@PDOGLJGG@write_byte?$AA@		; `string'
PUBLIC	??_C@_05NGFEDHGN@write?$AA@			; `string'
PUBLIC	??_C@_04LBPCFPDD@tell?$AA@			; `string'
PUBLIC	??_C@_04IAGNFIBA@size?$AA@			; `string'
PUBLIC	??_C@_04EDECCOGL@seek?$AA@			; `string'
PUBLIC	??_C@_06PIONCPJI@resize?$AA@			; `string'
PUBLIC	??_C@_08KBCDPPMN@readline?$AA@			; `string'
PUBLIC	??_C@_09NIOKOAGD@read_byte?$AA@			; `string'
PUBLIC	??_C@_04POLDLDMI@read?$AA@			; `string'
PUBLIC	??_C@_04HDMMNHEL@move?$AA@			; `string'
PUBLIC	??_C@_05GLCAEPFP@flush?$AA@			; `string'
PUBLIC	??_C@_05BLFDIAHL@rfind?$AA@			; `string'
PUBLIC	??_C@_04CKFJHKAP@find?$AA@			; `string'
PUBLIC	??_C@_05LBOHBHFK@close?$AA@			; `string'
EXTRN	PyObject_Free:PROC
EXTRN	PyType_GenericAlloc:PROC
EXTRN	PyObject_GenericGetAttr:PROC
;	COMDAT ??_C@_04PHBJEMCB@mmap?$AA@
CONST	SEGMENT
??_C@_04PHBJEMCB@mmap?$AA@ DB 'mmap', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KLHHMIGM@offset?$AA@
CONST	SEGMENT
??_C@_06KLHHMIGM@offset?$AA@ DB 'offset', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EBPNOMLE@access?$AA@
CONST	SEGMENT
??_C@_06EBPNOMLE@access?$AA@ DB 'access', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HHOKFJJE@tagname?$AA@
CONST	SEGMENT
??_C@_07HHOKFJJE@tagname?$AA@ DB 'tagname', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IJDLPEM@length?$AA@
CONST	SEGMENT
??_C@_06IJDLPEM@length?$AA@ DB 'length', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FFBIALPD@fileno?$AA@
CONST	SEGMENT
??_C@_06FFBIALPD@fileno?$AA@ DB 'fileno', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09JGALCODB@mmap?4mmap?$AA@
CONST	SEGMENT
??_C@_09JGALCODB@mmap?4mmap?$AA@ DB 'mmap.mmap', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06IKJOPBFO@closed?$AA@
CONST	SEGMENT
??_C@_06IKJOPBFO@closed?$AA@ DB 'closed', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
mmap_object_methods DQ FLAT:??_C@_05LBOHBHFK@close?$AA@
	DQ	FLAT:mmap_close_method
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04CKFJHKAP@find?$AA@
	DQ	FLAT:mmap_find_method
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_05BLFDIAHL@rfind?$AA@
	DQ	FLAT:mmap_rfind_method
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_05GLCAEPFP@flush?$AA@
	DQ	FLAT:mmap_flush_method
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04HDMMNHEL@move?$AA@
	DQ	FLAT:mmap_move_method
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04POLDLDMI@read?$AA@
	DQ	FLAT:mmap_read_method
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_09NIOKOAGD@read_byte?$AA@
	DQ	FLAT:mmap_read_byte_method
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08KBCDPPMN@readline?$AA@
	DQ	FLAT:mmap_read_line_method
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_06PIONCPJI@resize?$AA@
	DQ	FLAT:mmap_resize_method
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04EDECCOGL@seek?$AA@
	DQ	FLAT:mmap_seek_method
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04IAGNFIBA@size?$AA@
	DQ	FLAT:mmap_size_method
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04LBPCFPDD@tell?$AA@
	DQ	FLAT:mmap_tell_method
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	FLAT:mmap_write_method
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0L@PDOGLJGG@write_byte?$AA@
	DQ	FLAT:mmap_write_byte_method
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_09OAJHKKGH@__enter__?$AA@
	DQ	FLAT:mmap__enter__method
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08CMFIGCJD@__exit__?$AA@
	DQ	FLAT:mmap__exit__method
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
mmap_object_getset DQ FLAT:??_C@_06IKJOPBFO@closed?$AA@
	DQ	FLAT:mmap_closed_get
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
mmap_as_sequence DQ FLAT:mmap_length
	DQ	FLAT:mmap_concat
	DQ	FLAT:mmap_repeat
	DQ	FLAT:mmap_item
	DQ	0000000000000000H
	DQ	FLAT:mmap_ass_item
	DQ	0000000000000000H
	ORG $+24
mmap_as_mapping DQ FLAT:mmap_length
	DQ	FLAT:mmap_subscript
	DQ	FLAT:mmap_ass_subscript
mmap_as_buffer DQ FLAT:mmap_buffer_getbuf
	DQ	FLAT:mmap_buffer_releasebuf
	ORG $+8
mmap_doc DB	'Windows: mmap(fileno, length[, tagname[, access[, offset'
	DB	']]])', 0aH, 0aH, 'Maps length bytes from the file specified b'
	DB	'y the file handle fileno,', 0aH, 'and returns a mmap object. '
	DB	' If length is larger than the current size', 0aH, 'of the fil'
	DB	'e, the file is extended to contain length bytes.  If length', 0aH
	DB	'is 0, the maximum length of the map is the current size of th'
	DB	'e file,', 0aH, 'except that if the file is empty Windows rais'
	DB	'es an exception (you cannot', 0aH, 'create an empty mapping o'
	DB	'n Windows).', 0aH, 0aH, 'Unix: mmap(fileno, length[, flags[, '
	DB	'prot[, access[, offset]]]])', 0aH, 0aH, 'Maps length bytes fr'
	DB	'om the file specified by the file descriptor fileno,', 0aH, 'a'
	DB	'nd returns a mmap object.  If length is 0, the maximum length'
	DB	' of the map', 0aH, 'will be the current size of the file when'
	DB	' mmap is called.', 0aH, 'flags specifies the nature of the ma'
	DB	'pping. MAP_PRIVATE creates a', 0aH, 'private copy-on-write ma'
	DB	'pping, so changes to the contents of the mmap', 0aH, 'object '
	DB	'will be private to this process, and MAP_SHARED creates a map'
	DB	'ping', 0aH, 'that''s shared with all other processes mapping '
	DB	'the same areas of the file.', 0aH, 'The default value is MAP_'
	DB	'SHARED.', 0aH, 0aH, 'To map anonymous memory, pass -1 as the '
	DB	'fileno (both versions).', 00H
	ORG $+2
mmap_object_type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_09JGALCODB@mmap?4mmap?$AA@
	DQ	00000000000000b0H
	DQ	0000000000000000H
	DQ	FLAT:mmap_object_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:mmap_as_sequence
	DQ	FLAT:mmap_as_mapping
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	FLAT:mmap_as_buffer
	DD	040400H
	ORG $+4
	DQ	FLAT:mmap_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:mmap_object_methods
	DQ	0000000000000000H
	DQ	FLAT:mmap_object_getset
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:new_mmap_object
	DQ	FLAT:PyObject_Free
	ORG $+64
?keywords@?1??new_mmap_object@@9@9 DQ FLAT:??_C@_06FFBIALPD@fileno?$AA@ ; `new_mmap_object'::`2'::keywords
	DQ	FLAT:??_C@_06IJDLPEM@length?$AA@
	DQ	FLAT:??_C@_07HHOKFJJE@tagname?$AA@
	DQ	FLAT:??_C@_06EBPNOMLE@access?$AA@
	DQ	FLAT:??_C@_06KLHHMIGM@offset?$AA@
	DQ	0000000000000000H
mmapmodule DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_04PHBJEMCB@mmap?$AA@
	DQ	0000000000000000H
	DQ	ffffffffffffffffH
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
;	COMDAT ??_C@_08CMFIGCJD@__exit__?$AA@
CONST	SEGMENT
??_C@_08CMFIGCJD@__exit__?$AA@ DB '__exit__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OAJHKKGH@__enter__?$AA@
CONST	SEGMENT
??_C@_09OAJHKKGH@__enter__?$AA@ DB '__enter__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PDOGLJGG@write_byte?$AA@
CONST	SEGMENT
??_C@_0L@PDOGLJGG@write_byte?$AA@ DB 'write_byte', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05NGFEDHGN@write?$AA@
CONST	SEGMENT
??_C@_05NGFEDHGN@write?$AA@ DB 'write', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LBPCFPDD@tell?$AA@
CONST	SEGMENT
??_C@_04LBPCFPDD@tell?$AA@ DB 'tell', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IAGNFIBA@size?$AA@
CONST	SEGMENT
??_C@_04IAGNFIBA@size?$AA@ DB 'size', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EDECCOGL@seek?$AA@
CONST	SEGMENT
??_C@_04EDECCOGL@seek?$AA@ DB 'seek', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PIONCPJI@resize?$AA@
CONST	SEGMENT
??_C@_06PIONCPJI@resize?$AA@ DB 'resize', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KBCDPPMN@readline?$AA@
CONST	SEGMENT
??_C@_08KBCDPPMN@readline?$AA@ DB 'readline', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NIOKOAGD@read_byte?$AA@
CONST	SEGMENT
??_C@_09NIOKOAGD@read_byte?$AA@ DB 'read_byte', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04POLDLDMI@read?$AA@
CONST	SEGMENT
??_C@_04POLDLDMI@read?$AA@ DB 'read', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HDMMNHEL@move?$AA@
CONST	SEGMENT
??_C@_04HDMMNHEL@move?$AA@ DB 'move', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GLCAEPFP@flush?$AA@
CONST	SEGMENT
??_C@_05GLCAEPFP@flush?$AA@ DB 'flush', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BLFDIAHL@rfind?$AA@
CONST	SEGMENT
??_C@_05BLFDIAHL@rfind?$AA@ DB 'rfind', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CKFJHKAP@find?$AA@
CONST	SEGMENT
??_C@_04CKFJHKAP@find?$AA@ DB 'find', 00H		; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId_close@?1??mmap__exit__method@@9@9 DQ 0000000000000000H ; `mmap__exit__method'::`2'::PyId_close
	DQ	FLAT:??_C@_05LBOHBHFK@close?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_05LBOHBHFK@close?$AA@
CONST	SEGMENT
??_C@_05LBOHBHFK@close?$AA@ DB 'close', 00H		; `string'
CONST	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
EXTRN	__imp_GetSystemInfo:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\mmapmodule.c
pdata	SEGMENT
$pdata$my_getpagesize DD imagerel my_getpagesize
	DD	imagerel my_getpagesize+24
	DD	imagerel $unwind$my_getpagesize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$my_getpagesize DD 010401H
	DD	0a204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT my_getpagesize
_TEXT	SEGMENT
si$ = 32
my_getpagesize PROC					; COMDAT

; 35   : {

  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 36   :     SYSTEM_INFO si;
; 37   :     GetSystemInfo(&si);

  00004	48 8d 4c 24 20	 lea	 rcx, QWORD PTR si$[rsp]
  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetSystemInfo

; 38   :     return si.dwPageSize;

  0000f	8b 44 24 24	 mov	 eax, DWORD PTR si$[rsp+4]

; 39   : }

  00013	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00017	c3		 ret	 0
my_getpagesize ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$my_getallocationgranularity DD imagerel my_getallocationgranularity
	DD	imagerel my_getallocationgranularity+24
	DD	imagerel $unwind$my_getallocationgranularity
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$my_getallocationgranularity DD 010401H
	DD	0a204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT my_getallocationgranularity
_TEXT	SEGMENT
si$ = 32
my_getallocationgranularity PROC			; COMDAT

; 43   : {

  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 44   : 
; 45   :     SYSTEM_INFO si;
; 46   :     GetSystemInfo(&si);

  00004	48 8d 4c 24 20	 lea	 rcx, QWORD PTR si$[rsp]
  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetSystemInfo

; 47   :     return si.dwAllocationGranularity;

  0000f	8b 44 24 48	 mov	 eax, DWORD PTR si$[rsp+40]

; 48   : }

  00013	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00017	c3		 ret	 0
my_getallocationgranularity ENDP
_TEXT	ENDS
EXTRN	PyMem_Free:PROC
EXTRN	__imp_CloseHandle:PROC
EXTRN	__imp_UnmapViewOfFile:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mmap_object_dealloc DD imagerel mmap_object_dealloc
	DD	imagerel mmap_object_dealloc+97
	DD	imagerel $unwind$mmap_object_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mmap_object_dealloc DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT mmap_object_dealloc
_TEXT	SEGMENT
m_obj$ = 48
mmap_object_dealloc PROC				; COMDAT

; 117  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 118  : #ifdef MS_WINDOWS
; 119  :     if (m_obj->data != NULL)

  00009	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  0000d	48 85 c9	 test	 rcx, rcx
  00010	74 06		 je	 SHORT $LN4@mmap_objec

; 120  :         UnmapViewOfFile (m_obj->data);

  00012	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_UnmapViewOfFile
$LN4@mmap_objec:

; 121  :     if (m_obj->map_handle != NULL)

  00018	48 8b 8b 88 00
	00 00		 mov	 rcx, QWORD PTR [rbx+136]
  0001f	48 85 c9	 test	 rcx, rcx
  00022	74 06		 je	 SHORT $LN3@mmap_objec

; 122  :         CloseHandle (m_obj->map_handle);

  00024	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle
$LN3@mmap_objec:

; 123  :     if (m_obj->file_handle != INVALID_HANDLE_VALUE)

  0002a	48 8b 8b 90 00
	00 00		 mov	 rcx, QWORD PTR [rbx+144]
  00031	48 83 f9 ff	 cmp	 rcx, -1
  00035	74 06		 je	 SHORT $LN2@mmap_objec

; 124  :         CloseHandle (m_obj->file_handle);

  00037	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle
$LN2@mmap_objec:

; 125  :     if (m_obj->tagname)

  0003d	48 8b 8b 98 00
	00 00		 mov	 rcx, QWORD PTR [rbx+152]
  00044	48 85 c9	 test	 rcx, rcx
  00047	74 05		 je	 SHORT $LN1@mmap_objec

; 126  :         PyMem_Free(m_obj->tagname);

  00049	e8 00 00 00 00	 call	 PyMem_Free
$LN1@mmap_objec:

; 127  : #endif /* MS_WINDOWS */
; 128  : 
; 129  : #ifdef UNIX
; 130  :     if (m_obj->fd >= 0)
; 131  :         (void) close(m_obj->fd);
; 132  :     if (m_obj->data!=NULL) {
; 133  :         munmap(m_obj->data, m_obj->size);
; 134  :     }
; 135  : #endif /* UNIX */
; 136  : 
; 137  :     Py_TYPE(m_obj)->tp_free((PyObject*)m_obj);

  0004e	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00052	48 8b cb	 mov	 rcx, rbx

; 138  : }

  00055	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00059	5b		 pop	 rbx
  0005a	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
mmap_object_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@EJIMDHDP@cannot?5close?5exported?5pointers?5e@ ; `string'
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_BufferError:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$mmap_close_method DD imagerel mmap_close_method
	DD	imagerel mmap_close_method+209
	DD	imagerel $unwind$mmap_close_method
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mmap_close_method DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0CF@EJIMDHDP@cannot?5close?5exported?5pointers?5e@
CONST	SEGMENT
??_C@_0CF@EJIMDHDP@cannot?5close?5exported?5pointers?5e@ DB 'cannot close'
	DB	' exported pointers exist', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\mmapmodule.c
CONST	ENDS
;	COMDAT mmap_close_method
_TEXT	SEGMENT
self$ = 64
unused$ = 72
mmap_close_method PROC					; COMDAT

; 142  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 143  :     if (self->exports > 0) {

  00006	83 b9 80 00 00
	00 00		 cmp	 DWORD PTR [rcx+128], 0
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	7e 1b		 jle	 SHORT $LN4@mmap_close

; 144  :         PyErr_SetString(PyExc_BufferError, "cannot close "\
; 145  :                         "exported pointers exist");

  00012	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_BufferError
  00019	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@EJIMDHDP@cannot?5close?5exported?5pointers?5e@
  00020	e8 00 00 00 00	 call	 PyErr_SetString

; 146  :         return NULL;

  00025	33 c0		 xor	 eax, eax

; 182  : }

  00027	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0002b	5b		 pop	 rbx
  0002c	c3		 ret	 0
$LN4@mmap_close:

; 147  :     }
; 148  : #ifdef MS_WINDOWS
; 149  :     /* For each resource we maintain, we need to check
; 150  :        the value is valid, and if so, free the resource
; 151  :        and set the member value to an invalid value so
; 152  :        the dealloc does not attempt to resource clearing
; 153  :        again.
; 154  :        TODO - should we check for errors in the close operations???
; 155  :     */
; 156  :     if (self->data != NULL) {

  0002d	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00031	48 85 c9	 test	 rcx, rcx
  00034	74 0e		 je	 SHORT $LN3@mmap_close

; 157  :         UnmapViewOfFile(self->data);

  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_UnmapViewOfFile

; 158  :         self->data = NULL;

  0003c	48 c7 43 60 00
	00 00 00	 mov	 QWORD PTR [rbx+96], 0
$LN3@mmap_close:

; 159  :     }
; 160  :     if (self->map_handle != NULL) {

  00044	48 8b 8b 88 00
	00 00		 mov	 rcx, QWORD PTR [rbx+136]
  0004b	48 85 c9	 test	 rcx, rcx
  0004e	74 11		 je	 SHORT $LN2@mmap_close

; 161  :         CloseHandle(self->map_handle);

  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 162  :         self->map_handle = NULL;

  00056	48 c7 83 88 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rbx+136], 0
$LN2@mmap_close:

; 163  :     }
; 164  :     if (self->file_handle != INVALID_HANDLE_VALUE) {

  00061	48 8b 8b 90 00
	00 00		 mov	 rcx, QWORD PTR [rbx+144]
  00068	48 83 f9 ff	 cmp	 rcx, -1
  0006c	74 11		 je	 SHORT $LN1@mmap_close

; 165  :         CloseHandle(self->file_handle);

  0006e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 166  :         self->file_handle = INVALID_HANDLE_VALUE;

  00074	48 c7 83 90 00
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rbx+144], -1
$LN1@mmap_close:

; 167  :     }
; 168  : #endif /* MS_WINDOWS */
; 169  : 
; 170  : #ifdef UNIX
; 171  :     if (0 <= self->fd)
; 172  :         (void) close(self->fd);
; 173  :     self->fd = -1;
; 174  :     if (self->data != NULL) {
; 175  :         munmap(self->data, self->size);
; 176  :         self->data = NULL;
; 177  :     }
; 178  : #endif
; 179  : 
; 180  :     Py_INCREF(Py_None);

  0007f	e8 00 00 00 00	 call	 _Py_PXCTX
  00084	85 c0		 test	 eax, eax
  00086	75 3c		 jne	 SHORT $LN8@mmap_close
  00088	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  0008f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00096	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0009d	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000a3	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000ab	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b0	85 c0		 test	 eax, eax
  000b2	75 09		 jne	 SHORT $LN7@mmap_close
  000b4	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  000bb	74 07		 je	 SHORT $LN8@mmap_close
$LN7@mmap_close:
  000bd	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN8@mmap_close:

; 181  :     return Py_None;

  000c4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 182  : }

  000cb	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000cf	5b		 pop	 rbx
  000d0	c3		 ret	 0
mmap_close_method ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@CGLJPLHN@read?5byte?5out?5of?5range?$AA@ ; `string'
PUBLIC	??_C@_01HMGJMAIH@B?$AA@				; `string'
PUBLIC	??_C@_0BH@MIHFAFBK@mmap?5closed?5or?5invalid?$AA@ ; `string'
EXTRN	_Py_BuildValue_SizeT:PROC
EXTRN	PyExc_ValueError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$mmap_read_byte_method DD imagerel mmap_read_byte_method
	DD	imagerel mmap_read_byte_method+114
	DD	imagerel $unwind$mmap_read_byte_method
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mmap_read_byte_method DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BH@CGLJPLHN@read?5byte?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0BH@CGLJPLHN@read?5byte?5out?5of?5range?$AA@ DB 'read byte out of r'
	DB	'ange', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B?$AA@
CONST	SEGMENT
??_C@_01HMGJMAIH@B?$AA@ DB 'B', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MIHFAFBK@mmap?5closed?5or?5invalid?$AA@
CONST	SEGMENT
??_C@_0BH@MIHFAFBK@mmap?5closed?5or?5invalid?$AA@ DB 'mmap closed or inva'
	DB	'lid', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mmap_read_byte_method
_TEXT	SEGMENT
self$ = 48
unused$ = 56
mmap_read_byte_method PROC				; COMDAT

; 207  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 208  :     CHECK_VALID(NULL);

  00004	48 83 b9 88 00
	00 00 00	 cmp	 QWORD PTR [rcx+136], 0
  0000c	48 8b d1	 mov	 rdx, rcx
  0000f	75 1a		 jne	 SHORT $LN5@mmap_read_

; 213  :     } else {
; 214  :         PyErr_SetString(PyExc_ValueError, "read byte out of range");

  00011	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00018	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@MIHFAFBK@mmap?5closed?5or?5invalid?$AA@
  0001f	e8 00 00 00 00	 call	 PyErr_SetString

; 215  :         return NULL;

  00024	33 c0		 xor	 eax, eax

; 216  :     }
; 217  : }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
$LN5@mmap_read_:

; 209  :     if (self->pos < self->size) {

  0002b	4c 8b 41 70	 mov	 r8, QWORD PTR [rcx+112]
  0002f	4c 3b 41 68	 cmp	 r8, QWORD PTR [rcx+104]
  00033	73 23		 jae	 SHORT $LN2@mmap_read_

; 210  :         char value = self->data[self->pos];

  00035	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  00039	41 0f b6 0c 00	 movzx	 ecx, BYTE PTR [r8+rax]

; 211  :         self->pos += 1;

  0003e	49 8d 40 01	 lea	 rax, QWORD PTR [r8+1]
  00042	48 89 42 70	 mov	 QWORD PTR [rdx+112], rax

; 212  :         return Py_BuildValue("B", (unsigned char)value);

  00046	8b d1		 mov	 edx, ecx
  00048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01HMGJMAIH@B?$AA@

; 216  :     }
; 217  : }

  0004f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00053	e9 00 00 00 00	 jmp	 _Py_BuildValue_SizeT
$LN2@mmap_read_:

; 213  :     } else {
; 214  :         PyErr_SetString(PyExc_ValueError, "read byte out of range");

  00058	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0005f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@CGLJPLHN@read?5byte?5out?5of?5range?$AA@
  00066	e8 00 00 00 00	 call	 PyErr_SetString

; 215  :         return NULL;

  0006b	33 c0		 xor	 eax, eax

; 216  :     }
; 217  : }

  0006d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00071	c3		 ret	 0
mmap_read_byte_method ENDP
_TEXT	ENDS
EXTRN	PyBytes_FromStringAndSize:PROC
EXTRN	__imp_memchr:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mmap_read_line_method DD imagerel mmap_read_line_method
	DD	imagerel mmap_read_line_method+165
	DD	imagerel $unwind$mmap_read_line_method
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mmap_read_line_method DD 086501H
	DD	063465H
	DD	08640fH
	DD	07540fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT mmap_read_line_method
_TEXT	SEGMENT
self$ = 48
unused$ = 56
mmap_read_line_method PROC				; COMDAT

; 222  : {

  00000	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b f9	 mov	 rdi, rcx

; 223  :     char *start = self->data+self->pos;

  00012	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]

; 224  :     char *eof = self->data+self->size;
; 225  :     char *eol;
; 226  :     PyObject *result;
; 227  : 
; 228  :     CHECK_VALID(NULL);

  00016	48 83 bf 88 00
	00 00 00	 cmp	 QWORD PTR [rdi+136], 0
  0001e	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00022	4c 8b 47 68	 mov	 r8, QWORD PTR [rdi+104]
  00026	48 8d 34 08	 lea	 rsi, QWORD PTR [rax+rcx]
  0002a	49 8d 2c 00	 lea	 rbp, QWORD PTR [r8+rax]
  0002e	75 25		 jne	 SHORT $LN5@mmap_read_@2
  00030	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@MIHFAFBK@mmap?5closed?5or?5invalid?$AA@
  0003e	e8 00 00 00 00	 call	 PyErr_SetString
  00043	33 c0		 xor	 eax, eax

; 237  :     self->pos += (eol - start);
; 238  :     return result;
; 239  : }

  00045	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0004a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0004f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00053	5f		 pop	 rdi
  00054	c3		 ret	 0
$LN5@mmap_read_@2:

; 229  : 
; 230  :     eol = memchr(start, '\n', self->size - self->pos);

  00055	4c 2b c1	 sub	 r8, rcx
  00058	ba 0a 00 00 00	 mov	 edx, 10
  0005d	48 8b ce	 mov	 rcx, rsi
  00060	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00065	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memchr
  0006b	48 8b d8	 mov	 rbx, rax

; 231  :     if (!eol)

  0006e	48 85 c0	 test	 rax, rax
  00071	75 05		 jne	 SHORT $LN2@mmap_read_@2

; 232  :         eol = eof;

  00073	48 8b dd	 mov	 rbx, rbp

; 233  :     else

  00076	eb 03		 jmp	 SHORT $LN1@mmap_read_@2
$LN2@mmap_read_@2:

; 234  :         ++eol;                  /* we're interested in the position after the

  00078	48 ff c3	 inc	 rbx
$LN1@mmap_read_@2:

; 235  :                            newline. */
; 236  :     result = PyBytes_FromStringAndSize(start, (eol - start));

  0007b	48 8b d3	 mov	 rdx, rbx
  0007e	48 8b ce	 mov	 rcx, rsi
  00081	48 2b d6	 sub	 rdx, rsi
  00084	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize

; 237  :     self->pos += (eol - start);
; 238  :     return result;
; 239  : }

  00089	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0008e	48 2b de	 sub	 rbx, rsi
  00091	48 01 5f 70	 add	 QWORD PTR [rdi+112], rbx
  00095	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0009f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a3	5f		 pop	 rdi
  000a4	c3		 ret	 0
mmap_read_line_method ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@INOFDAGI@integer?5argument?5expected?0?5got?5?8@ ; `string'
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyErr_Occurred:PROC
EXTRN	PyNumber_AsSsize_t:PROC
EXTRN	PyExc_OverflowError:QWORD
EXTRN	PyNumber_Check:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mmap_convert_ssize_t DD imagerel mmap_convert_ssize_t
	DD	imagerel mmap_convert_ssize_t+151
	DD	imagerel $unwind$mmap_convert_ssize_t
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mmap_convert_ssize_t DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CI@INOFDAGI@integer?5argument?5expected?0?5got?5?8@
CONST	SEGMENT
??_C@_0CI@INOFDAGI@integer?5argument?5expected?0?5got?5?8@ DB 'integer ar'
	DB	'gument expected, got ''%.200s''', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mmap_convert_ssize_t
_TEXT	SEGMENT
obj$ = 48
result$ = 56
mmap_convert_ssize_t PROC				; COMDAT

; 243  : mmap_convert_ssize_t(PyObject *obj, void *result) {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 244  :     Py_ssize_t limit;
; 245  :     if (obj == Py_None) {

  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00011	48 8b fa	 mov	 rdi, rdx
  00014	48 8b d9	 mov	 rbx, rcx
  00017	48 3b c8	 cmp	 rcx, rax
  0001a	75 15		 jne	 SHORT $LN5@mmap_conve

; 246  :         limit = -1;

  0001c	48 83 cb ff	 or	 rbx, -1

; 258  :     }
; 259  :     *((Py_ssize_t *)result) = limit;

  00020	48 89 1a	 mov	 QWORD PTR [rdx], rbx

; 260  :     return 1;

  00023	8d 43 02	 lea	 eax, QWORD PTR [rbx+2]

; 261  : }

  00026	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002f	5f		 pop	 rdi
  00030	c3		 ret	 0
$LN5@mmap_conve:

; 247  :     }
; 248  :     else if (PyNumber_Check(obj)) {

  00031	e8 00 00 00 00	 call	 PyNumber_Check
  00036	85 c0		 test	 eax, eax
  00038	74 35		 je	 SHORT $LN3@mmap_conve

; 249  :         limit = PyNumber_AsSsize_t(obj, PyExc_OverflowError);

  0003a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_OverflowError
  00041	48 8b cb	 mov	 rcx, rbx
  00044	e8 00 00 00 00	 call	 PyNumber_AsSsize_t
  00049	48 8b d8	 mov	 rbx, rax

; 250  :         if (limit == -1 && PyErr_Occurred())

  0004c	48 83 f8 ff	 cmp	 rax, -1
  00050	75 0a		 jne	 SHORT $LN2@mmap_conve
  00052	e8 00 00 00 00	 call	 PyErr_Occurred
  00057	48 85 c0	 test	 rax, rax

; 251  :             return 0;

  0005a	75 2e		 jne	 SHORT $LN8@mmap_conve
$LN2@mmap_conve:

; 258  :     }
; 259  :     *((Py_ssize_t *)result) = limit;

  0005c	48 89 1f	 mov	 QWORD PTR [rdi], rbx

; 260  :     return 1;

  0005f	b8 01 00 00 00	 mov	 eax, 1

; 261  : }

  00064	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00069	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006d	5f		 pop	 rdi
  0006e	c3		 ret	 0
$LN3@mmap_conve:

; 252  :     }
; 253  :     else {
; 254  :         PyErr_Format(PyExc_TypeError,
; 255  :                      "integer argument expected, got '%.200s'",
; 256  :                      Py_TYPE(obj)->tp_name);

  0006f	4c 8b 43 58	 mov	 r8, QWORD PTR [rbx+88]
  00073	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0007a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@INOFDAGI@integer?5argument?5expected?0?5got?5?8@
  00081	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00085	e8 00 00 00 00	 call	 PyErr_Format
$LN8@mmap_conve:

; 257  :         return 0;

  0008a	33 c0		 xor	 eax, eax

; 261  : }

  0008c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00091	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00095	5f		 pop	 rdi
  00096	c3		 ret	 0
mmap_convert_ssize_t ENDP
_TEXT	ENDS
PUBLIC	??_C@_08DBDOJIJG@?$HMO?$CG?3read?$AA@		; `string'
EXTRN	_PyArg_ParseTuple_SizeT:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mmap_read_method DD imagerel mmap_read_method
	DD	imagerel mmap_read_method+161
	DD	imagerel $unwind$mmap_read_method
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mmap_read_method DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_08DBDOJIJG@?$HMO?$CG?3read?$AA@
CONST	SEGMENT
??_C@_08DBDOJIJG@?$HMO?$CG?3read?$AA@ DB '|O&:read', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mmap_read_method
_TEXT	SEGMENT
num_bytes$ = 48
self$ = 48
args$ = 56
mmap_read_method PROC					; COMDAT

; 266  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 267  :     Py_ssize_t num_bytes = -1, n;
; 268  :     PyObject *result;
; 269  : 
; 270  :     CHECK_VALID(NULL);

  00006	48 83 b9 88 00
	00 00 00	 cmp	 QWORD PTR [rcx+136], 0
  0000e	48 8b c2	 mov	 rax, rdx
  00011	48 8b d9	 mov	 rbx, rcx
  00014	48 c7 44 24 30
	ff ff ff ff	 mov	 QWORD PTR num_bytes$[rsp], -1
  0001d	75 1b		 jne	 SHORT $LN7@mmap_read_@3
  0001f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@MIHFAFBK@mmap?5closed?5or?5invalid?$AA@
  0002d	e8 00 00 00 00	 call	 PyErr_SetString
$LN11@mmap_read_@3:
  00032	33 c0		 xor	 eax, eax

; 290  :     return result;
; 291  : }

  00034	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00038	5b		 pop	 rbx
  00039	c3		 ret	 0
$LN7@mmap_read_@3:

; 271  :     if (!PyArg_ParseTuple(args, "|O&:read", mmap_convert_ssize_t, &num_bytes))

  0003a	4c 8d 4c 24 30	 lea	 r9, QWORD PTR num_bytes$[rsp]
  0003f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:mmap_convert_ssize_t
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08DBDOJIJG@?$HMO?$CG?3read?$AA@
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00055	85 c0		 test	 eax, eax

; 272  :         return(NULL);

  00057	74 d9		 je	 SHORT $LN11@mmap_read_@3

; 273  : 
; 274  :     /* silently 'adjust' out-of-range requests */
; 275  :     assert(self->size >= self->pos);
; 276  :     n = self->size - self->pos;

  00059	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  0005d	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]

; 277  :     /* The difference can overflow, only if self->size is greater than
; 278  :      * PY_SSIZE_T_MAX.  But then the operation cannot possibly succeed,
; 279  :      * because the mapped area and the returned string each need more
; 280  :      * than half of the addressable memory.  So we clip the size, and let
; 281  :      * the code below raise MemoryError.
; 282  :      */
; 283  :     if (n < 0)

  00061	48 ba ff ff ff
	ff ff ff ff 7f	 mov	 rdx, 9223372036854775807 ; 7fffffffffffffffH
  0006b	48 2b c1	 sub	 rax, rcx
  0006e	48 0f 48 c2	 cmovs	 rax, rdx

; 284  :         n = PY_SSIZE_T_MAX;
; 285  :     if (num_bytes < 0 || num_bytes > n) {

  00072	48 8b 54 24 30	 mov	 rdx, QWORD PTR num_bytes$[rsp]
  00077	48 85 d2	 test	 rdx, rdx
  0007a	78 05		 js	 SHORT $LN1@mmap_read_@3
  0007c	48 3b d0	 cmp	 rdx, rax
  0007f	7e 08		 jle	 SHORT $LN2@mmap_read_@3
$LN1@mmap_read_@3:

; 286  :         num_bytes = n;

  00081	48 8b d0	 mov	 rdx, rax
  00084	48 89 44 24 30	 mov	 QWORD PTR num_bytes$[rsp], rax
$LN2@mmap_read_@3:

; 287  :     }
; 288  :     result = PyBytes_FromStringAndSize(self->data+self->pos, num_bytes);

  00089	48 03 4b 60	 add	 rcx, QWORD PTR [rbx+96]
  0008d	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize

; 289  :     self->pos += num_bytes;

  00092	48 8b 4c 24 30	 mov	 rcx, QWORD PTR num_bytes$[rsp]
  00097	48 01 4b 70	 add	 QWORD PTR [rbx+112], rcx

; 290  :     return result;
; 291  : }

  0009b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009f	5b		 pop	 rbx
  000a0	c3		 ret	 0
mmap_read_method ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@LGHHJGA@y?$CD?$HMnn?3find?$AA@		; `string'
PUBLIC	??_C@_0M@MGHPMCLB@y?$CD?$HMnn?3rfind?$AA@	; `string'
EXTRN	PyLong_FromSsize_t:PROC
EXTRN	PyLong_FromLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mmap_gfind DD imagerel mmap_gfind
	DD	imagerel mmap_gfind+139
	DD	imagerel $unwind$mmap_gfind
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$mmap_gfind DD imagerel mmap_gfind+139
	DD	imagerel mmap_gfind+296
	DD	imagerel $chain$2$mmap_gfind
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$mmap_gfind DD imagerel mmap_gfind+296
	DD	imagerel mmap_gfind+388
	DD	imagerel $chain$4$mmap_gfind
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$mmap_gfind DD 060021H
	DD	08c400H
	DD	0e6400H
	DD	0d5400H
	DD	imagerel mmap_gfind
	DD	imagerel mmap_gfind+139
	DD	imagerel $unwind$mmap_gfind
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$mmap_gfind DD 060f21H
	DD	08c40fH
	DD	0e640aH
	DD	0d5405H
	DD	imagerel mmap_gfind
	DD	imagerel mmap_gfind+139
	DD	imagerel $unwind$mmap_gfind
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mmap_gfind DD 030701H
	DD	070038207H
	DD	03002H
xdata	ENDS
;	COMDAT ??_C@_0L@LGHHJGA@y?$CD?$HMnn?3find?$AA@
CONST	SEGMENT
??_C@_0L@LGHHJGA@y?$CD?$HMnn?3find?$AA@ DB 'y#|nn:find', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MGHPMCLB@y?$CD?$HMnn?3rfind?$AA@
CONST	SEGMENT
??_C@_0M@MGHPMCLB@y?$CD?$HMnn?3rfind?$AA@ DB 'y#|nn:rfind', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mmap_gfind
_TEXT	SEGMENT
len$ = 48
needle$ = 56
start$ = 96
self$ = 96
args$ = 104
reverse$ = 112
end$ = 120
mmap_gfind PROC						; COMDAT

; 297  : {

  00000	40 53		 push	 rbx
  00002	57		 push	 rdi
  00003	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 298  :     Py_ssize_t start = self->pos;
; 299  :     Py_ssize_t end = self->size;
; 300  :     const char *needle;
; 301  :     Py_ssize_t len;
; 302  : 
; 303  :     CHECK_VALID(NULL);

  00007	48 83 b9 88 00
	00 00 00	 cmp	 QWORD PTR [rcx+136], 0
  0000f	48 8b 41 70	 mov	 rax, QWORD PTR [rcx+112]
  00013	41 8b d8	 mov	 ebx, r8d
  00016	48 89 44 24 60	 mov	 QWORD PTR start$[rsp], rax
  0001b	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]
  0001f	4c 8b d2	 mov	 r10, rdx
  00022	48 89 44 24 78	 mov	 QWORD PTR end$[rsp], rax
  00027	48 8b f9	 mov	 rdi, rcx
  0002a	75 1c		 jne	 SHORT $LN20@mmap_gfind
  0002c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@MIHFAFBK@mmap?5closed?5or?5invalid?$AA@
  0003a	e8 00 00 00 00	 call	 PyErr_SetString
$LN42@mmap_gfind:
  0003f	33 c0		 xor	 eax, eax

; 338  :     }
; 339  : }

  00041	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00045	5f		 pop	 rdi
  00046	5b		 pop	 rbx
  00047	c3		 ret	 0
$LN20@mmap_gfind:

; 304  :     if (!PyArg_ParseTuple(args, reverse ? "y#|nn:rfind" : "y#|nn:find",
; 305  :                           &needle, &len, &start, &end)) {

  00048	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0M@MGHPMCLB@y?$CD?$HMnn?3rfind?$AA@
  0004f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@LGHHJGA@y?$CD?$HMnn?3find?$AA@
  00056	85 db		 test	 ebx, ebx
  00058	48 0f 45 d0	 cmovne	 rdx, rax
  0005c	48 8d 44 24 78	 lea	 rax, QWORD PTR end$[rsp]
  00061	4c 8d 4c 24 30	 lea	 r9, QWORD PTR len$[rsp]
  00066	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0006b	48 8d 44 24 60	 lea	 rax, QWORD PTR start$[rsp]
  00070	4c 8d 44 24 38	 lea	 r8, QWORD PTR needle$[rsp]
  00075	49 8b ca	 mov	 rcx, r10
  00078	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0007d	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00082	85 c0		 test	 eax, eax

; 306  :         return NULL;

  00084	74 b9		 je	 SHORT $LN42@mmap_gfind

; 307  :     } else {
; 308  :         const char *p, *start_p, *end_p;
; 309  :         int sign = reverse ? -1 : 1;
; 310  : 
; 311  :         if (start < 0)

  00086	48 8b 54 24 60	 mov	 rdx, QWORD PTR start$[rsp]
  0008b	48 89 6c 24 68	 mov	 QWORD PTR [rsp+104], rbp
  00090	48 89 74 24 70	 mov	 QWORD PTR [rsp+112], rsi
  00095	4c 89 64 24 40	 mov	 QWORD PTR [rsp+64], r12
  0009a	41 83 cc ff	 or	 r12d, -1
  0009e	85 db		 test	 ebx, ebx
  000a0	bd 01 00 00 00	 mov	 ebp, 1
  000a5	41 0f 45 ec	 cmovne	 ebp, r12d
  000a9	48 85 d2	 test	 rdx, rdx
  000ac	79 0d		 jns	 SHORT $LN14@mmap_gfind

; 312  :             start += self->size;

  000ae	48 8b 47 68	 mov	 rax, QWORD PTR [rdi+104]
  000b2	48 03 d0	 add	 rdx, rax

; 313  :         if (start < 0)

  000b5	79 04		 jns	 SHORT $LN14@mmap_gfind

; 314  :             start = 0;

  000b7	33 d2		 xor	 edx, edx
  000b9	eb 0b		 jmp	 SHORT $LN40@mmap_gfind
$LN14@mmap_gfind:

; 315  :         else if ((size_t)start > self->size)

  000bb	48 8b 47 68	 mov	 rax, QWORD PTR [rdi+104]
  000bf	48 3b d0	 cmp	 rdx, rax
  000c2	48 0f 47 d0	 cmova	 rdx, rax
$LN40@mmap_gfind:

; 316  :             start = self->size;
; 317  : 
; 318  :         if (end < 0)

  000c6	48 8b 4c 24 78	 mov	 rcx, QWORD PTR end$[rsp]
  000cb	48 89 54 24 60	 mov	 QWORD PTR start$[rsp], rdx
  000d0	48 85 c9	 test	 rcx, rcx
  000d3	79 09		 jns	 SHORT $LN10@mmap_gfind

; 319  :             end += self->size;

  000d5	48 03 c8	 add	 rcx, rax

; 320  :         if (end < 0)

  000d8	79 04		 jns	 SHORT $LN10@mmap_gfind

; 321  :             end = 0;

  000da	33 c9		 xor	 ecx, ecx
  000dc	eb 07		 jmp	 SHORT $LN41@mmap_gfind
$LN10@mmap_gfind:

; 322  :         else if ((size_t)end > self->size)

  000de	48 3b c8	 cmp	 rcx, rax
  000e1	48 0f 47 c8	 cmova	 rcx, rax
$LN41@mmap_gfind:

; 323  :             end = self->size;
; 324  : 
; 325  :         start_p = self->data + start;

  000e5	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]

; 326  :         end_p = self->data + end;
; 327  : 
; 328  :         for (p = (reverse ? end_p - len : start_p);
; 329  :              (p >= start_p) && (p + len <= end_p); p += sign) {

  000e9	4c 8b 4c 24 30	 mov	 r9, QWORD PTR len$[rsp]
  000ee	48 89 4c 24 78	 mov	 QWORD PTR end$[rsp], rcx
  000f3	4c 8d 1c 10	 lea	 r11, QWORD PTR [rax+rdx]
  000f7	48 8d 34 08	 lea	 rsi, QWORD PTR [rax+rcx]
  000fb	85 db		 test	 ebx, ebx
  000fd	74 29		 je	 SHORT $LN24@mmap_gfind
  000ff	4c 8b c6	 mov	 r8, rsi
  00102	4d 2b c1	 sub	 r8, r9
  00105	4d 3b c3	 cmp	 r8, r11
  00108	73 21		 jae	 SHORT $LN34@mmap_gfind
$LN5@mmap_gfind:

; 335  :             }
; 336  :         }
; 337  :         return PyLong_FromLong(-1);

  0010a	41 8b cc	 mov	 ecx, r12d
  0010d	e8 00 00 00 00	 call	 PyLong_FromLong
$LN39@mmap_gfind:
  00112	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
  00117	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  0011c	4c 8b 64 24 40	 mov	 r12, QWORD PTR [rsp+64]

; 338  :     }
; 339  : }

  00121	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00125	5f		 pop	 rdi
  00126	5b		 pop	 rbx
  00127	c3		 ret	 0
$LN24@mmap_gfind:

; 326  :         end_p = self->data + end;
; 327  : 
; 328  :         for (p = (reverse ? end_p - len : start_p);
; 329  :              (p >= start_p) && (p + len <= end_p); p += sign) {

  00128	4d 8b c3	 mov	 r8, r11
$LN34@mmap_gfind:
  0012b	48 8b 5c 24 38	 mov	 rbx, QWORD PTR needle$[rsp]
$LL32@mmap_gfind:
  00130	4b 8d 04 08	 lea	 rax, QWORD PTR [r8+r9]
  00134	48 3b c6	 cmp	 rax, rsi
  00137	77 d1		 ja	 SHORT $LN5@mmap_gfind

; 330  :             Py_ssize_t i;
; 331  :             for (i = 0; i < len && needle[i] == p[i]; ++i)

  00139	33 d2		 xor	 edx, edx
  0013b	4d 85 c9	 test	 r9, r9
  0013e	7e 24		 jle	 SHORT $LN36@mmap_gfind
  00140	4d 8b d0	 mov	 r10, r8
  00143	48 8b cb	 mov	 rcx, rbx
  00146	4c 2b d3	 sub	 r10, rbx
  00149	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@mmap_gfind:
  00150	41 0f b6 04 0a	 movzx	 eax, BYTE PTR [r10+rcx]
  00155	38 01		 cmp	 BYTE PTR [rcx], al
  00157	75 0b		 jne	 SHORT $LN36@mmap_gfind
  00159	48 ff c2	 inc	 rdx
  0015c	48 ff c1	 inc	 rcx
  0015f	49 3b d1	 cmp	 rdx, r9
  00162	7c ec		 jl	 SHORT $LL4@mmap_gfind
$LN36@mmap_gfind:

; 332  :                 /* nothing */;
; 333  :             if (i == len) {

  00164	49 3b d1	 cmp	 rdx, r9
  00167	74 0d		 je	 SHORT $LN28@mmap_gfind

; 326  :         end_p = self->data + end;
; 327  : 
; 328  :         for (p = (reverse ? end_p - len : start_p);
; 329  :              (p >= start_p) && (p + len <= end_p); p += sign) {

  00169	48 63 c5	 movsxd	 rax, ebp
  0016c	4c 03 c0	 add	 r8, rax
  0016f	4d 3b c3	 cmp	 r8, r11
  00172	73 bc		 jae	 SHORT $LL32@mmap_gfind

; 332  :                 /* nothing */;
; 333  :             if (i == len) {

  00174	eb 94		 jmp	 SHORT $LN5@mmap_gfind
$LN28@mmap_gfind:

; 334  :                 return PyLong_FromSsize_t(p - self->data);

  00176	4c 2b 47 60	 sub	 r8, QWORD PTR [rdi+96]
  0017a	49 8b c8	 mov	 rcx, r8
  0017d	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  00182	eb 8e		 jmp	 SHORT $LN39@mmap_gfind
mmap_gfind ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT mmap_find_method
_TEXT	SEGMENT
self$ = 8
args$ = 16
mmap_find_method PROC					; COMDAT

; 345  :     return mmap_gfind(self, args, 0);

  00000	45 33 c0	 xor	 r8d, r8d

; 346  : }

  00003	e9 00 00 00 00	 jmp	 mmap_gfind
mmap_find_method ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT mmap_rfind_method
_TEXT	SEGMENT
self$ = 8
args$ = 16
mmap_rfind_method PROC					; COMDAT

; 352  :     return mmap_gfind(self, args, 1);

  00000	41 b8 01 00 00
	00		 mov	 r8d, 1

; 353  : }

  00006	e9 00 00 00 00	 jmp	 mmap_gfind
mmap_rfind_method ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@MFMLCJHP@mmap?5can?8t?5modify?5a?5readonly?5mem@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$is_writable DD imagerel is_writable
	DD	imagerel is_writable+49
	DD	imagerel $unwind$is_writable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$is_writable DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0CJ@MFMLCJHP@mmap?5can?8t?5modify?5a?5readonly?5mem@
CONST	SEGMENT
??_C@_0CJ@MFMLCJHP@mmap?5can?8t?5modify?5a?5readonly?5mem@ DB 'mmap can'''
	DB	't modify a readonly memory map.', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT is_writable
_TEXT	SEGMENT
self$ = 48
is_writable PROC					; COMDAT

; 357  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 358  :     if (self->access != ACCESS_READ)

  00004	83 b9 a0 00 00
	00 01		 cmp	 DWORD PTR [rcx+160], 1
  0000b	74 0a		 je	 SHORT $LN1@is_writabl

; 359  :         return 1;

  0000d	b8 01 00 00 00	 mov	 eax, 1

; 362  : }

  00012	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00016	c3		 ret	 0
$LN1@is_writabl:

; 360  :     PyErr_Format(PyExc_TypeError, "mmap can't modify a readonly memory map.");

  00017	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@MFMLCJHP@mmap?5can?8t?5modify?5a?5readonly?5mem@
  00025	e8 00 00 00 00	 call	 PyErr_Format

; 361  :     return 0;

  0002a	33 c0		 xor	 eax, eax

; 362  : }

  0002c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00030	c3		 ret	 0
is_writable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DK@MOJPDOHG@mmap?5can?8t?5resize?5a?5readonly?5or?5@ ; `string'
PUBLIC	??_C@_0DA@BLDNJAKJ@mmap?5can?8t?5resize?5with?5extant?5bu@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$is_resizeable DD imagerel is_resizeable
	DD	imagerel is_resizeable+90
	DD	imagerel $unwind$is_resizeable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$is_resizeable DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0DK@MOJPDOHG@mmap?5can?8t?5resize?5a?5readonly?5or?5@
CONST	SEGMENT
??_C@_0DK@MOJPDOHG@mmap?5can?8t?5resize?5a?5readonly?5or?5@ DB 'mmap can'''
	DB	't resize a readonly or copy-on-write memory map.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@BLDNJAKJ@mmap?5can?8t?5resize?5with?5extant?5bu@
CONST	SEGMENT
??_C@_0DA@BLDNJAKJ@mmap?5can?8t?5resize?5with?5extant?5bu@ DB 'mmap can'''
	DB	't resize with extant buffers exported.', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT is_resizeable
_TEXT	SEGMENT
self$ = 48
is_resizeable PROC					; COMDAT

; 366  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 367  :     if (self->exports > 0) {

  00004	83 b9 80 00 00
	00 00		 cmp	 DWORD PTR [rcx+128], 0
  0000b	7e 1a		 jle	 SHORT $LN3@is_resizea

; 368  :         PyErr_SetString(PyExc_BufferError,
; 369  :                         "mmap can't resize with extant buffers exported.");

  0000d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_BufferError
  00014	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@BLDNJAKJ@mmap?5can?8t?5resize?5with?5extant?5bu@
  0001b	e8 00 00 00 00	 call	 PyErr_SetString

; 370  :         return 0;

  00020	33 c0		 xor	 eax, eax

; 377  : }

  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
$LN3@is_resizea:

; 371  :     }
; 372  :     if ((self->access == ACCESS_WRITE) || (self->access == ACCESS_DEFAULT))

  00027	8b 81 a0 00 00
	00		 mov	 eax, DWORD PTR [rcx+160]
  0002d	83 f8 02	 cmp	 eax, 2
  00030	74 1e		 je	 SHORT $LN1@is_resizea
  00032	85 c0		 test	 eax, eax
  00034	74 1a		 je	 SHORT $LN1@is_resizea

; 374  :     PyErr_Format(PyExc_TypeError,
; 375  :                  "mmap can't resize a readonly or copy-on-write memory map.");

  00036	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0003d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DK@MOJPDOHG@mmap?5can?8t?5resize?5a?5readonly?5or?5@
  00044	e8 00 00 00 00	 call	 PyErr_Format

; 376  :     return 0;

  00049	33 c0		 xor	 eax, eax

; 377  : }

  0004b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004f	c3		 ret	 0
$LN1@is_resizea:

; 373  :         return 1;

  00050	b8 01 00 00 00	 mov	 eax, 1

; 377  : }

  00055	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00059	c3		 ret	 0
is_resizeable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@BPEOJPFP@data?5out?5of?5range?$AA@	; `string'
PUBLIC	??_C@_08KGHFGIEH@y?$CD?3write?$AA@		; `string'
EXTRN	memcpy:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mmap_write_method DD imagerel mmap_write_method
	DD	imagerel mmap_write_method+184
	DD	imagerel $unwind$mmap_write_method
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mmap_write_method DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0BC@BPEOJPFP@data?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0BC@BPEOJPFP@data?5out?5of?5range?$AA@ DB 'data out of range', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08KGHFGIEH@y?$CD?3write?$AA@
CONST	SEGMENT
??_C@_08KGHFGIEH@y?$CD?3write?$AA@ DB 'y#:write', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mmap_write_method
_TEXT	SEGMENT
length$ = 48
self$ = 48
args$ = 56
data$ = 64
mmap_write_method PROC					; COMDAT

; 383  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 384  :     Py_ssize_t length;
; 385  :     char *data;
; 386  : 
; 387  :     CHECK_VALID(NULL);

  00006	48 83 b9 88 00
	00 00 00	 cmp	 QWORD PTR [rcx+136], 0
  0000e	48 8b c2	 mov	 rax, rdx
  00011	48 8b d9	 mov	 rbx, rcx
  00014	75 1b		 jne	 SHORT $LN6@mmap_write
  00016	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@MIHFAFBK@mmap?5closed?5or?5invalid?$AA@
  00024	e8 00 00 00 00	 call	 PyErr_SetString
$LN10@mmap_write:
  00029	33 c0		 xor	 eax, eax

; 402  : }

  0002b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002f	5b		 pop	 rbx
  00030	c3		 ret	 0
$LN6@mmap_write:

; 388  :     if (!PyArg_ParseTuple(args, "y#:write", &data, &length))

  00031	4c 8d 4c 24 30	 lea	 r9, QWORD PTR length$[rsp]
  00036	4c 8d 44 24 40	 lea	 r8, QWORD PTR data$[rsp]
  0003b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08KGHFGIEH@y?$CD?3write?$AA@
  00042	48 8b c8	 mov	 rcx, rax
  00045	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0004a	85 c0		 test	 eax, eax

; 389  :         return(NULL);

  0004c	74 db		 je	 SHORT $LN10@mmap_write

; 390  : 
; 391  :     if (!is_writable(self))

  0004e	48 8b cb	 mov	 rcx, rbx
  00051	e8 00 00 00 00	 call	 is_writable
  00056	85 c0		 test	 eax, eax

; 392  :         return NULL;

  00058	74 cf		 je	 SHORT $LN10@mmap_write

; 393  : 
; 394  :     if ((self->pos + length) > self->size) {

  0005a	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  0005e	4c 8b 44 24 30	 mov	 r8, QWORD PTR length$[rsp]
  00063	4a 8d 04 01	 lea	 rax, QWORD PTR [rcx+r8]
  00067	48 3b 43 68	 cmp	 rax, QWORD PTR [rbx+104]
  0006b	76 1b		 jbe	 SHORT $LN1@mmap_write

; 395  :         PyErr_SetString(PyExc_ValueError, "data out of range");

  0006d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00074	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@BPEOJPFP@data?5out?5of?5range?$AA@
  0007b	e8 00 00 00 00	 call	 PyErr_SetString

; 396  :         return NULL;

  00080	33 c0		 xor	 eax, eax

; 402  : }

  00082	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00086	5b		 pop	 rbx
  00087	c3		 ret	 0
$LN1@mmap_write:

; 397  :     }
; 398  :     memcpy(self->data+self->pos, data, length);

  00088	48 03 4b 60	 add	 rcx, QWORD PTR [rbx+96]
  0008c	48 8b 54 24 40	 mov	 rdx, QWORD PTR data$[rsp]
  00091	e8 00 00 00 00	 call	 memcpy

; 399  :     self->pos = self->pos+length;

  00096	4c 8b 5c 24 30	 mov	 r11, QWORD PTR length$[rsp]

; 400  :     Py_INCREF(Py_None);

  0009b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000a2	4c 01 5b 70	 add	 QWORD PTR [rbx+112], r11
  000a6	e8 00 00 00 00	 call	 _Py_IncRef

; 401  :     return Py_None;

  000ab	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 402  : }

  000b2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b6	5b		 pop	 rbx
  000b7	c3		 ret	 0
mmap_write_method ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@CHODECBD@write?5byte?5out?5of?5range?$AA@ ; `string'
PUBLIC	??_C@_0N@HKEPPHI@b?3write_byte?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$mmap_write_byte_method DD imagerel mmap_write_byte_method
	DD	imagerel mmap_write_byte_method+145
	DD	imagerel $unwind$mmap_write_byte_method
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mmap_write_byte_method DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0BI@CHODECBD@write?5byte?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0BI@CHODECBD@write?5byte?5out?5of?5range?$AA@ DB 'write byte out of'
	DB	' range', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HKEPPHI@b?3write_byte?$AA@
CONST	SEGMENT
??_C@_0N@HKEPPHI@b?3write_byte?$AA@ DB 'b:write_byte', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mmap_write_byte_method
_TEXT	SEGMENT
value$ = 48
self$ = 48
args$ = 56
mmap_write_byte_method PROC				; COMDAT

; 407  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 408  :     char value;
; 409  : 
; 410  :     CHECK_VALID(NULL);

  00006	48 83 b9 88 00
	00 00 00	 cmp	 QWORD PTR [rcx+136], 0
  0000e	48 8b c2	 mov	 rax, rdx
  00011	48 8b d9	 mov	 rbx, rcx
  00014	75 09		 jne	 SHORT $LN7@mmap_write@2
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@MIHFAFBK@mmap?5closed?5or?5invalid?$AA@
  0001d	eb 5e		 jmp	 SHORT $LN11@mmap_write@2
$LN7@mmap_write@2:

; 411  :     if (!PyArg_ParseTuple(args, "b:write_byte", &value))

  0001f	4c 8d 44 24 30	 lea	 r8, QWORD PTR value$[rsp]
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@HKEPPHI@b?3write_byte?$AA@
  0002b	48 8b c8	 mov	 rcx, rax
  0002e	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00033	85 c0		 test	 eax, eax

; 412  :         return(NULL);

  00035	74 52		 je	 SHORT $LN12@mmap_write@2

; 413  : 
; 414  :     if (!is_writable(self))

  00037	48 8b cb	 mov	 rcx, rbx
  0003a	e8 00 00 00 00	 call	 is_writable
  0003f	85 c0		 test	 eax, eax

; 415  :         return NULL;

  00041	74 46		 je	 SHORT $LN12@mmap_write@2

; 416  : 
; 417  :     if (self->pos < self->size) {

  00043	48 8b 53 70	 mov	 rdx, QWORD PTR [rbx+112]
  00047	48 3b 53 68	 cmp	 rdx, QWORD PTR [rbx+104]
  0004b	73 29		 jae	 SHORT $LN2@mmap_write@2

; 418  :         *(self->data+self->pos) = value;

  0004d	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00051	0f b6 44 24 30	 movzx	 eax, BYTE PTR value$[rsp]
  00056	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 419  :         self->pos += 1;

  00059	48 ff 43 70	 inc	 QWORD PTR [rbx+112]

; 420  :         Py_INCREF(Py_None);

  0005d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00064	e8 00 00 00 00	 call	 _Py_IncRef

; 421  :         return Py_None;

  00069	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 426  :     }
; 427  : }

  00070	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00074	5b		 pop	 rbx
  00075	c3		 ret	 0
$LN2@mmap_write@2:

; 422  :     }
; 423  :     else {
; 424  :         PyErr_SetString(PyExc_ValueError, "write byte out of range");

  00076	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@CHODECBD@write?5byte?5out?5of?5range?$AA@
$LN11@mmap_write@2:
  0007d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00084	e8 00 00 00 00	 call	 PyErr_SetString
$LN12@mmap_write@2:

; 425  :         return NULL;

  00089	33 c0		 xor	 eax, eax

; 426  :     }
; 427  : }

  0008b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008f	5b		 pop	 rbx
  00090	c3		 ret	 0
mmap_write_byte_method ENDP
_TEXT	ENDS
EXTRN	PyLong_FromLongLong:PROC
EXTRN	PyErr_SetFromWindowsErr:PROC
EXTRN	__imp_GetLastError:PROC
EXTRN	__imp_GetFileSize:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mmap_size_method DD imagerel mmap_size_method
	DD	imagerel mmap_size_method+61
	DD	imagerel $unwind$mmap_size_method
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$mmap_size_method DD imagerel mmap_size_method+61
	DD	imagerel mmap_size_method+106
	DD	imagerel $chain$0$mmap_size_method
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$mmap_size_method DD imagerel mmap_size_method+106
	DD	imagerel mmap_size_method+139
	DD	imagerel $chain$2$mmap_size_method
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$mmap_size_method DD imagerel mmap_size_method+139
	DD	imagerel mmap_size_method+164
	DD	imagerel $chain$4$mmap_size_method
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$mmap_size_method DD imagerel mmap_size_method+164
	DD	imagerel mmap_size_method+177
	DD	imagerel $chain$5$mmap_size_method
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$mmap_size_method DD 021H
	DD	imagerel mmap_size_method
	DD	imagerel mmap_size_method+61
	DD	imagerel $unwind$mmap_size_method
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$mmap_size_method DD 020021H
	DD	043400H
	DD	imagerel mmap_size_method
	DD	imagerel mmap_size_method+61
	DD	imagerel $unwind$mmap_size_method
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$mmap_size_method DD 020021H
	DD	043400H
	DD	imagerel mmap_size_method
	DD	imagerel mmap_size_method+61
	DD	imagerel $unwind$mmap_size_method
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$mmap_size_method DD 020521H
	DD	043405H
	DD	imagerel mmap_size_method
	DD	imagerel mmap_size_method+61
	DD	imagerel $unwind$mmap_size_method
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mmap_size_method DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT mmap_size_method
_TEXT	SEGMENT
high$120565 = 48
self$ = 48
unused$ = 56
mmap_size_method PROC					; COMDAT

; 432  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 433  :     CHECK_VALID(NULL);

  00004	48 83 b9 88 00
	00 00 00	 cmp	 QWORD PTR [rcx+136], 0
  0000c	75 1a		 jne	 SHORT $LN8@mmap_size_
  0000e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@MIHFAFBK@mmap?5closed?5or?5invalid?$AA@
  0001c	e8 00 00 00 00	 call	 PyErr_SetString
  00021	33 c0		 xor	 eax, eax

; 453  :     }
; 454  : #endif /* MS_WINDOWS */
; 455  : 
; 456  : #ifdef UNIX
; 457  :     {
; 458  :         struct stat buf;
; 459  :         if (-1 == fstat(self->fd, &buf)) {
; 460  :             PyErr_SetFromErrno(PyExc_OSError);
; 461  :             return NULL;
; 462  :         }
; 463  : #ifdef HAVE_LARGEFILE_SUPPORT
; 464  :         return PyLong_FromLongLong(buf.st_size);
; 465  : #else
; 466  :         return PyLong_FromLong(buf.st_size);
; 467  : #endif
; 468  :     }
; 469  : #endif /* UNIX */
; 470  : }

  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	c3		 ret	 0
$LN8@mmap_size_:

; 434  : 
; 435  : #ifdef MS_WINDOWS
; 436  :     if (self->file_handle != INVALID_HANDLE_VALUE) {

  00028	48 8b 81 90 00
	00 00		 mov	 rax, QWORD PTR [rcx+144]
  0002f	48 83 f8 ff	 cmp	 rax, -1
  00033	74 6f		 je	 SHORT $LN5@mmap_size_

; 437  :         DWORD low,high;
; 438  :         PY_LONG_LONG size;
; 439  :         low = GetFileSize(self->file_handle, &high);

  00035	48 8d 54 24 30	 lea	 rdx, QWORD PTR high$120565[rsp]
  0003a	48 8b c8	 mov	 rcx, rax
  0003d	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00042	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetFileSize
  00048	8b d8		 mov	 ebx, eax

; 440  :         if (low == INVALID_FILE_SIZE) {

  0004a	83 f8 ff	 cmp	 eax, -1			; ffffffffH
  0004d	75 1b		 jne	 SHORT $LN3@mmap_size_

; 441  :             /* It might be that the function appears to have failed,
; 442  :                when indeed its size equals INVALID_FILE_SIZE */
; 443  :             DWORD error = GetLastError();

  0004f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError

; 444  :             if (error != NO_ERROR)

  00055	85 c0		 test	 eax, eax
  00057	74 11		 je	 SHORT $LN3@mmap_size_

; 445  :                 return PyErr_SetFromWindowsErr(error);

  00059	8b c8		 mov	 ecx, eax
  0005b	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00060	48 8b 5c 24 20	 mov	 rbx, QWORD PTR [rsp+32]

; 453  :     }
; 454  : #endif /* MS_WINDOWS */
; 455  : 
; 456  : #ifdef UNIX
; 457  :     {
; 458  :         struct stat buf;
; 459  :         if (-1 == fstat(self->fd, &buf)) {
; 460  :             PyErr_SetFromErrno(PyExc_OSError);
; 461  :             return NULL;
; 462  :         }
; 463  : #ifdef HAVE_LARGEFILE_SUPPORT
; 464  :         return PyLong_FromLongLong(buf.st_size);
; 465  : #else
; 466  :         return PyLong_FromLong(buf.st_size);
; 467  : #endif
; 468  :     }
; 469  : #endif /* UNIX */
; 470  : }

  00065	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00069	c3		 ret	 0
$LN3@mmap_size_:

; 446  :         }
; 447  :         if (!high && low < LONG_MAX)

  0006a	8b 44 24 30	 mov	 eax, DWORD PTR high$120565[rsp]
  0006e	85 c0		 test	 eax, eax
  00070	75 19		 jne	 SHORT $LN2@mmap_size_
  00072	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00078	73 11		 jae	 SHORT $LN2@mmap_size_

; 448  :             return PyLong_FromLong((long)low);

  0007a	8b cb		 mov	 ecx, ebx
  0007c	e8 00 00 00 00	 call	 PyLong_FromLong
  00081	48 8b 5c 24 20	 mov	 rbx, QWORD PTR [rsp+32]

; 453  :     }
; 454  : #endif /* MS_WINDOWS */
; 455  : 
; 456  : #ifdef UNIX
; 457  :     {
; 458  :         struct stat buf;
; 459  :         if (-1 == fstat(self->fd, &buf)) {
; 460  :             PyErr_SetFromErrno(PyExc_OSError);
; 461  :             return NULL;
; 462  :         }
; 463  : #ifdef HAVE_LARGEFILE_SUPPORT
; 464  :         return PyLong_FromLongLong(buf.st_size);
; 465  : #else
; 466  :         return PyLong_FromLong(buf.st_size);
; 467  : #endif
; 468  :     }
; 469  : #endif /* UNIX */
; 470  : }

  00086	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0008a	c3		 ret	 0
$LN2@mmap_size_:

; 449  :         size = (((PY_LONG_LONG)high)<<32) + low;

  0008b	48 8b c8	 mov	 rcx, rax
  0008e	48 c1 e1 20	 shl	 rcx, 32			; 00000020H
  00092	48 03 cb	 add	 rcx, rbx

; 450  :         return PyLong_FromLongLong(size);

  00095	e8 00 00 00 00	 call	 PyLong_FromLongLong
  0009a	48 8b 5c 24 20	 mov	 rbx, QWORD PTR [rsp+32]

; 453  :     }
; 454  : #endif /* MS_WINDOWS */
; 455  : 
; 456  : #ifdef UNIX
; 457  :     {
; 458  :         struct stat buf;
; 459  :         if (-1 == fstat(self->fd, &buf)) {
; 460  :             PyErr_SetFromErrno(PyExc_OSError);
; 461  :             return NULL;
; 462  :         }
; 463  : #ifdef HAVE_LARGEFILE_SUPPORT
; 464  :         return PyLong_FromLongLong(buf.st_size);
; 465  : #else
; 466  :         return PyLong_FromLong(buf.st_size);
; 467  : #endif
; 468  :     }
; 469  : #endif /* UNIX */
; 470  : }

  0009f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000a3	c3		 ret	 0
$LN5@mmap_size_:

; 451  :     } else {
; 452  :         return PyLong_FromSsize_t(self->size);

  000a4	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]

; 453  :     }
; 454  : #endif /* MS_WINDOWS */
; 455  : 
; 456  : #ifdef UNIX
; 457  :     {
; 458  :         struct stat buf;
; 459  :         if (-1 == fstat(self->fd, &buf)) {
; 460  :             PyErr_SetFromErrno(PyExc_OSError);
; 461  :             return NULL;
; 462  :         }
; 463  : #ifdef HAVE_LARGEFILE_SUPPORT
; 464  :         return PyLong_FromLongLong(buf.st_size);
; 465  : #else
; 466  :         return PyLong_FromLong(buf.st_size);
; 467  : #endif
; 468  :     }
; 469  : #endif /* UNIX */
; 470  : }

  000a8	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000ac	e9 00 00 00 00	 jmp	 PyLong_FromSsize_t
mmap_size_method ENDP
_TEXT	ENDS
PUBLIC	??_C@_08DCEPBML@n?3resize?$AA@			; `string'
EXTRN	__imp_MapViewOfFile:PROC
EXTRN	__imp_CreateFileMappingA:PROC
EXTRN	__imp_SetEndOfFile:PROC
EXTRN	__imp_SetFilePointer:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mmap_resize_method DD imagerel mmap_resize_method
	DD	imagerel mmap_resize_method+386
	DD	imagerel $unwind$mmap_resize_method
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mmap_resize_method DD 086801H
	DD	067468H
	DD	076463H
	DD	0b545eH
	DD	030027206H
xdata	ENDS
;	COMDAT ??_C@_08DCEPBML@n?3resize?$AA@
CONST	SEGMENT
??_C@_08DCEPBML@n?3resize?$AA@ DB 'n:resize', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mmap_resize_method
_TEXT	SEGMENT
newSizeHigh$120597 = 80
self$ = 80
args$ = 88
new_size$ = 96
mmap_resize_method PROC					; COMDAT

; 484  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 485  :     Py_ssize_t new_size;
; 486  :     CHECK_VALID(NULL);

  00006	48 83 b9 88 00
	00 00 00	 cmp	 QWORD PTR [rcx+136], 0
  0000e	48 8b c2	 mov	 rax, rdx
  00011	48 8b d9	 mov	 rbx, rcx
  00014	75 1b		 jne	 SHORT $LN10@mmap_resiz
  00016	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@MIHFAFBK@mmap?5closed?5or?5invalid?$AA@
  00024	e8 00 00 00 00	 call	 PyErr_SetString
$LN6@mmap_resiz:
  00029	33 c0		 xor	 eax, eax

; 537  : #endif /* MS_WINDOWS */
; 538  : 
; 539  : #ifdef UNIX
; 540  : #ifndef HAVE_MREMAP
; 541  :     } else {
; 542  :         PyErr_SetString(PyExc_SystemError,
; 543  :                         "mmap: resizing not available--no mremap()");
; 544  :         return NULL;
; 545  : #else
; 546  :     } else {
; 547  :         void *newmap;
; 548  : 
; 549  :         if (ftruncate(self->fd, self->offset + new_size) == -1) {
; 550  :             PyErr_SetFromErrno(PyExc_OSError);
; 551  :             return NULL;
; 552  :         }
; 553  : 
; 554  : #ifdef MREMAP_MAYMOVE
; 555  :         newmap = mremap(self->data, self->size, new_size, MREMAP_MAYMOVE);
; 556  : #else
; 557  :         #if defined(__NetBSD__)
; 558  :             newmap = mremap(self->data, self->size, self->data, new_size, 0);
; 559  :         #else
; 560  :             newmap = mremap(self->data, self->size, new_size, 0);
; 561  :         #endif /* __NetBSD__ */
; 562  : #endif
; 563  :         if (newmap == (void *)-1)
; 564  :         {
; 565  :             PyErr_SetFromErrno(PyExc_OSError);
; 566  :             return NULL;
; 567  :         }
; 568  :         self->data = newmap;
; 569  :         self->size = new_size;
; 570  :         Py_INCREF(Py_None);
; 571  :         return Py_None;
; 572  : #endif /* HAVE_MREMAP */
; 573  : #endif /* UNIX */
; 574  :     }
; 575  : }

  0002b	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0002f	5b		 pop	 rbx
  00030	c3		 ret	 0
$LN10@mmap_resiz:

; 487  :     if (!PyArg_ParseTuple(args, "n:resize", &new_size) ||
; 488  :         !is_resizeable(self)) {

  00031	4c 8d 44 24 60	 lea	 r8, QWORD PTR new_size$[rsp]
  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08DCEPBML@n?3resize?$AA@
  0003d	48 8b c8	 mov	 rcx, rax
  00040	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00045	85 c0		 test	 eax, eax
  00047	74 e0		 je	 SHORT $LN6@mmap_resiz
  00049	48 8b cb	 mov	 rcx, rbx
  0004c	e8 00 00 00 00	 call	 is_resizeable
  00051	85 c0		 test	 eax, eax
  00053	74 d4		 je	 SHORT $LN6@mmap_resiz

; 489  :         return NULL;
; 490  : #ifdef MS_WINDOWS
; 491  :     } else {
; 492  :         DWORD dwErrCode = 0;
; 493  :         DWORD off_hi, off_lo, newSizeLow, newSizeHigh;
; 494  :         /* First, unmap the file view */
; 495  :         UnmapViewOfFile(self->data);

  00055	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00059	48 89 6c 24 58	 mov	 QWORD PTR [rsp+88], rbp
  0005e	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  00063	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  00068	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_UnmapViewOfFile

; 496  :         self->data = NULL;
; 497  :         /* Close the mapping object */
; 498  :         CloseHandle(self->map_handle);

  0006e	48 8b 8b 88 00
	00 00		 mov	 rcx, QWORD PTR [rbx+136]
  00075	33 ed		 xor	 ebp, ebp
  00077	48 89 6b 60	 mov	 QWORD PTR [rbx+96], rbp
  0007b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 499  :         self->map_handle = NULL;
; 500  :         /* Move to the desired EOF position */
; 501  :         newSizeHigh = (DWORD)((self->offset + new_size) >> 32);

  00081	48 8b 4c 24 60	 mov	 rcx, QWORD PTR new_size$[rsp]
  00086	48 8b 7b 78	 mov	 rdi, QWORD PTR [rbx+120]

; 502  :         newSizeLow = (DWORD)((self->offset + new_size) & 0xFFFFFFFF);
; 503  :         off_hi = (DWORD)(self->offset >> 32);
; 504  :         off_lo = (DWORD)(self->offset & 0xFFFFFFFF);

  0008a	8b 73 78	 mov	 esi, DWORD PTR [rbx+120]

; 505  :         SetFilePointer(self->file_handle,
; 506  :                        newSizeLow, &newSizeHigh, FILE_BEGIN);

  0008d	4c 8d 44 24 50	 lea	 r8, QWORD PTR newSizeHigh$120597[rsp]
  00092	48 8d 04 0f	 lea	 rax, QWORD PTR [rdi+rcx]
  00096	8d 14 0e	 lea	 edx, DWORD PTR [rsi+rcx]
  00099	48 8b 8b 90 00
	00 00		 mov	 rcx, QWORD PTR [rbx+144]
  000a0	48 c1 f8 20	 sar	 rax, 32			; 00000020H
  000a4	45 33 c9	 xor	 r9d, r9d
  000a7	48 89 ab 88 00
	00 00		 mov	 QWORD PTR [rbx+136], rbp
  000ae	89 44 24 50	 mov	 DWORD PTR newSizeHigh$120597[rsp], eax
  000b2	48 c1 ff 20	 sar	 rdi, 32			; 00000020H
  000b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetFilePointer

; 507  :         /* Change the size of the file */
; 508  :         SetEndOfFile(self->file_handle);

  000bc	48 8b 8b 90 00
	00 00		 mov	 rcx, QWORD PTR [rbx+144]
  000c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetEndOfFile

; 509  :         /* Create another mapping object and remap the file view */
; 510  :         self->map_handle = CreateFileMapping(
; 511  :             self->file_handle,
; 512  :             NULL,
; 513  :             PAGE_READWRITE,
; 514  :             0,
; 515  :             0,
; 516  :             self->tagname);

  000c9	4c 8b 9b 98 00
	00 00		 mov	 r11, QWORD PTR [rbx+152]
  000d0	48 8b 8b 90 00
	00 00		 mov	 rcx, QWORD PTR [rbx+144]
  000d7	4c 89 5c 24 28	 mov	 QWORD PTR [rsp+40], r11
  000dc	44 8d 45 04	 lea	 r8d, QWORD PTR [rbp+4]
  000e0	45 33 c9	 xor	 r9d, r9d
  000e3	33 d2		 xor	 edx, edx
  000e5	89 6c 24 20	 mov	 DWORD PTR [rsp+32], ebp
  000e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateFileMappingA
  000ef	48 89 83 88 00
	00 00		 mov	 QWORD PTR [rbx+136], rax

; 517  :         if (self->map_handle != NULL) {

  000f6	48 85 c0	 test	 rax, rax
  000f9	74 61		 je	 SHORT $LN4@mmap_resiz

; 518  :             self->data = (char *) MapViewOfFile(self->map_handle,
; 519  :                                                 FILE_MAP_WRITE,
; 520  :                                                 off_hi,
; 521  :                                                 off_lo,
; 522  :                                                 new_size);

  000fb	48 8b 4c 24 60	 mov	 rcx, QWORD PTR new_size$[rsp]
  00100	8d 55 02	 lea	 edx, QWORD PTR [rbp+2]
  00103	44 8b ce	 mov	 r9d, esi
  00106	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0010b	48 8b c8	 mov	 rcx, rax
  0010e	44 8b c7	 mov	 r8d, edi
  00111	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_MapViewOfFile
  00117	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax

; 523  :             if (self->data != NULL) {

  0011b	48 85 c0	 test	 rax, rax
  0011e	74 1e		 je	 SHORT $LN3@mmap_resiz

; 524  :                 self->size = new_size;

  00120	48 8b 44 24 60	 mov	 rax, QWORD PTR new_size$[rsp]

; 525  :                 Py_INCREF(Py_None);

  00125	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0012c	48 89 43 68	 mov	 QWORD PTR [rbx+104], rax
  00130	e8 00 00 00 00	 call	 _Py_IncRef

; 526  :                 return Py_None;

  00135	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0013c	eb 2f		 jmp	 SHORT $LN16@mmap_resiz
$LN3@mmap_resiz:

; 527  :             } else {
; 528  :                 dwErrCode = GetLastError();

  0013e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError

; 529  :                 CloseHandle(self->map_handle);

  00144	48 8b 8b 88 00
	00 00		 mov	 rcx, QWORD PTR [rbx+136]
  0014b	8b f8		 mov	 edi, eax
  0014d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 530  :                 self->map_handle = NULL;

  00153	48 89 ab 88 00
	00 00		 mov	 QWORD PTR [rbx+136], rbp

; 531  :             }
; 532  :         } else {

  0015a	eb 08		 jmp	 SHORT $LN1@mmap_resiz
$LN4@mmap_resiz:

; 533  :             dwErrCode = GetLastError();

  0015c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  00162	8b f8		 mov	 edi, eax
$LN1@mmap_resiz:

; 534  :         }
; 535  :         PyErr_SetFromWindowsErr(dwErrCode);

  00164	8b cf		 mov	 ecx, edi
  00166	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 536  :         return NULL;

  0016b	33 c0		 xor	 eax, eax
$LN16@mmap_resiz:
  0016d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00172	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  00177	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 537  : #endif /* MS_WINDOWS */
; 538  : 
; 539  : #ifdef UNIX
; 540  : #ifndef HAVE_MREMAP
; 541  :     } else {
; 542  :         PyErr_SetString(PyExc_SystemError,
; 543  :                         "mmap: resizing not available--no mremap()");
; 544  :         return NULL;
; 545  : #else
; 546  :     } else {
; 547  :         void *newmap;
; 548  : 
; 549  :         if (ftruncate(self->fd, self->offset + new_size) == -1) {
; 550  :             PyErr_SetFromErrno(PyExc_OSError);
; 551  :             return NULL;
; 552  :         }
; 553  : 
; 554  : #ifdef MREMAP_MAYMOVE
; 555  :         newmap = mremap(self->data, self->size, new_size, MREMAP_MAYMOVE);
; 556  : #else
; 557  :         #if defined(__NetBSD__)
; 558  :             newmap = mremap(self->data, self->size, self->data, new_size, 0);
; 559  :         #else
; 560  :             newmap = mremap(self->data, self->size, new_size, 0);
; 561  :         #endif /* __NetBSD__ */
; 562  : #endif
; 563  :         if (newmap == (void *)-1)
; 564  :         {
; 565  :             PyErr_SetFromErrno(PyExc_OSError);
; 566  :             return NULL;
; 567  :         }
; 568  :         self->data = newmap;
; 569  :         self->size = new_size;
; 570  :         Py_INCREF(Py_None);
; 571  :         return Py_None;
; 572  : #endif /* HAVE_MREMAP */
; 573  : #endif /* UNIX */
; 574  :     }
; 575  : }

  0017c	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00180	5b		 pop	 rbx
  00181	c3		 ret	 0
mmap_resize_method ENDP
_TEXT	ENDS
EXTRN	PyLong_FromSize_t:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mmap_tell_method DD imagerel mmap_tell_method
	DD	imagerel mmap_tell_method+53
	DD	imagerel $unwind$mmap_tell_method
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mmap_tell_method DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT mmap_tell_method
_TEXT	SEGMENT
self$ = 48
unused$ = 56
mmap_tell_method PROC					; COMDAT

; 579  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 580  :     CHECK_VALID(NULL);

  00004	48 83 b9 88 00
	00 00 00	 cmp	 QWORD PTR [rcx+136], 0
  0000c	75 1a		 jne	 SHORT $LN3@mmap_tell_
  0000e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@MIHFAFBK@mmap?5closed?5or?5invalid?$AA@
  0001c	e8 00 00 00 00	 call	 PyErr_SetString
  00021	33 c0		 xor	 eax, eax

; 582  : }

  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	c3		 ret	 0
$LN3@mmap_tell_:

; 581  :     return PyLong_FromSize_t(self->pos);

  00028	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]

; 582  : }

  0002c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00030	e9 00 00 00 00	 jmp	 PyLong_FromSize_t
mmap_tell_method ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@MFBDNAD@flush?5values?5out?5of?5range?$AA@ ; `string'
PUBLIC	??_C@_09IIMOPBDP@?$HMnn?3flush?$AA@		; `string'
EXTRN	__imp_FlushViewOfFile:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mmap_flush_method DD imagerel mmap_flush_method
	DD	imagerel mmap_flush_method+195
	DD	imagerel $unwind$mmap_flush_method
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mmap_flush_method DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0BK@MFBDNAD@flush?5values?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0BK@MFBDNAD@flush?5values?5out?5of?5range?$AA@ DB 'flush values out'
	DB	' of range', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09IIMOPBDP@?$HMnn?3flush?$AA@
CONST	SEGMENT
??_C@_09IIMOPBDP@?$HMnn?3flush?$AA@ DB '|nn:flush', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mmap_flush_method
_TEXT	SEGMENT
size$ = 48
self$ = 48
args$ = 56
offset$ = 64
mmap_flush_method PROC					; COMDAT

; 586  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 587  :     Py_ssize_t offset = 0;
; 588  :     Py_ssize_t size = self->size;
; 589  :     CHECK_VALID(NULL);

  00006	48 83 b9 88 00
	00 00 00	 cmp	 QWORD PTR [rcx+136], 0
  0000e	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]
  00012	4c 8b d2	 mov	 r10, rdx
  00015	48 8b d9	 mov	 rbx, rcx
  00018	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR offset$[rsp], 0
  00021	48 89 44 24 30	 mov	 QWORD PTR size$[rsp], rax
  00026	75 1b		 jne	 SHORT $LN7@mmap_flush
  00028	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@MIHFAFBK@mmap?5closed?5or?5invalid?$AA@
  00036	e8 00 00 00 00	 call	 PyErr_SetString
$LN12@mmap_flush:
  0003b	33 c0		 xor	 eax, eax

; 602  : #elif defined(UNIX)
; 603  :     /* XXX semantics of return value? */
; 604  :     /* XXX flags for msync? */
; 605  :     if (-1 == msync(self->data + offset, size, MS_SYNC)) {
; 606  :         PyErr_SetFromErrno(PyExc_OSError);
; 607  :         return NULL;
; 608  :     }
; 609  :     return PyLong_FromLong(0);
; 610  : #else
; 611  :     PyErr_SetString(PyExc_ValueError, "flush not supported on this system");
; 612  :     return NULL;
; 613  : #endif
; 614  : }

  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5b		 pop	 rbx
  00042	c3		 ret	 0
$LN7@mmap_flush:

; 590  :     if (!PyArg_ParseTuple(args, "|nn:flush", &offset, &size))

  00043	4c 8d 4c 24 30	 lea	 r9, QWORD PTR size$[rsp]
  00048	4c 8d 44 24 40	 lea	 r8, QWORD PTR offset$[rsp]
  0004d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09IIMOPBDP@?$HMnn?3flush?$AA@
  00054	49 8b ca	 mov	 rcx, r10
  00057	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0005c	85 c0		 test	 eax, eax

; 591  :         return NULL;

  0005e	74 db		 je	 SHORT $LN12@mmap_flush

; 592  :     if ((size_t)(offset + size) > self->size) {

  00060	48 8b 54 24 30	 mov	 rdx, QWORD PTR size$[rsp]
  00065	48 8b 4c 24 40	 mov	 rcx, QWORD PTR offset$[rsp]
  0006a	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]
  0006e	48 3b 43 68	 cmp	 rax, QWORD PTR [rbx+104]
  00072	76 1b		 jbe	 SHORT $LN3@mmap_flush

; 593  :         PyErr_SetString(PyExc_ValueError, "flush values out of range");

  00074	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0007b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@MFBDNAD@flush?5values?5out?5of?5range?$AA@
  00082	e8 00 00 00 00	 call	 PyErr_SetString

; 594  :         return NULL;

  00087	33 c0		 xor	 eax, eax

; 602  : #elif defined(UNIX)
; 603  :     /* XXX semantics of return value? */
; 604  :     /* XXX flags for msync? */
; 605  :     if (-1 == msync(self->data + offset, size, MS_SYNC)) {
; 606  :         PyErr_SetFromErrno(PyExc_OSError);
; 607  :         return NULL;
; 608  :     }
; 609  :     return PyLong_FromLong(0);
; 610  : #else
; 611  :     PyErr_SetString(PyExc_ValueError, "flush not supported on this system");
; 612  :     return NULL;
; 613  : #endif
; 614  : }

  00089	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008d	5b		 pop	 rbx
  0008e	c3		 ret	 0
$LN3@mmap_flush:

; 595  :     }
; 596  : 
; 597  :     if (self->access == ACCESS_READ || self->access == ACCESS_COPY)

  0008f	8b 83 a0 00 00
	00		 mov	 eax, DWORD PTR [rbx+160]
  00095	83 f8 01	 cmp	 eax, 1
  00098	74 1c		 je	 SHORT $LN1@mmap_flush
  0009a	83 f8 03	 cmp	 eax, 3
  0009d	74 17		 je	 SHORT $LN1@mmap_flush

; 599  : 
; 600  : #ifdef MS_WINDOWS
; 601  :     return PyLong_FromLong((long) FlushViewOfFile(self->data+offset, size));

  0009f	48 03 4b 60	 add	 rcx, QWORD PTR [rbx+96]
  000a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FlushViewOfFile
  000a9	8b c8		 mov	 ecx, eax
  000ab	e8 00 00 00 00	 call	 PyLong_FromLong

; 602  : #elif defined(UNIX)
; 603  :     /* XXX semantics of return value? */
; 604  :     /* XXX flags for msync? */
; 605  :     if (-1 == msync(self->data + offset, size, MS_SYNC)) {
; 606  :         PyErr_SetFromErrno(PyExc_OSError);
; 607  :         return NULL;
; 608  :     }
; 609  :     return PyLong_FromLong(0);
; 610  : #else
; 611  :     PyErr_SetString(PyExc_ValueError, "flush not supported on this system");
; 612  :     return NULL;
; 613  : #endif
; 614  : }

  000b0	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b4	5b		 pop	 rbx
  000b5	c3		 ret	 0
$LN1@mmap_flush:

; 598  :         return PyLong_FromLong(0);

  000b6	33 c9		 xor	 ecx, ecx
  000b8	e8 00 00 00 00	 call	 PyLong_FromLong

; 602  : #elif defined(UNIX)
; 603  :     /* XXX semantics of return value? */
; 604  :     /* XXX flags for msync? */
; 605  :     if (-1 == msync(self->data + offset, size, MS_SYNC)) {
; 606  :         PyErr_SetFromErrno(PyExc_OSError);
; 607  :         return NULL;
; 608  :     }
; 609  :     return PyLong_FromLong(0);
; 610  : #else
; 611  :     PyErr_SetString(PyExc_ValueError, "flush not supported on this system");
; 612  :     return NULL;
; 613  : #endif
; 614  : }

  000bd	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c1	5b		 pop	 rbx
  000c2	c3		 ret	 0
mmap_flush_method ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@IMILDMPF@seek?5out?5of?5range?$AA@	; `string'
PUBLIC	??_C@_0BC@FKNDPHMG@unknown?5seek?5type?$AA@	; `string'
PUBLIC	??_C@_08LHPIDOMM@n?$HMi?3seek?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$mmap_seek_method DD imagerel mmap_seek_method
	DD	imagerel mmap_seek_method+190
	DD	imagerel $unwind$mmap_seek_method
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mmap_seek_method DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0BC@IMILDMPF@seek?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0BC@IMILDMPF@seek?5out?5of?5range?$AA@ DB 'seek out of range', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FKNDPHMG@unknown?5seek?5type?$AA@
CONST	SEGMENT
??_C@_0BC@FKNDPHMG@unknown?5seek?5type?$AA@ DB 'unknown seek type', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08LHPIDOMM@n?$HMi?3seek?$AA@
CONST	SEGMENT
??_C@_08LHPIDOMM@n?$HMi?3seek?$AA@ DB 'n|i:seek', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mmap_seek_method
_TEXT	SEGMENT
how$ = 48
self$ = 48
args$ = 56
dist$ = 64
mmap_seek_method PROC					; COMDAT

; 618  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 619  :     Py_ssize_t dist;
; 620  :     int how=0;
; 621  :     CHECK_VALID(NULL);

  00006	48 83 b9 88 00
	00 00 00	 cmp	 QWORD PTR [rcx+136], 0
  0000e	48 8b c2	 mov	 rax, rdx
  00011	48 8b d9	 mov	 rbx, rcx
  00014	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR how$[rsp], 0
  0001c	75 0c		 jne	 SHORT $LN15@mmap_seek_
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@MIHFAFBK@mmap?5closed?5or?5invalid?$AA@
  00025	e9 80 00 00 00	 jmp	 $LN19@mmap_seek_
$LN15@mmap_seek_:

; 622  :     if (!PyArg_ParseTuple(args, "n|i:seek", &dist, &how))

  0002a	4c 8d 4c 24 30	 lea	 r9, QWORD PTR how$[rsp]
  0002f	4c 8d 44 24 40	 lea	 r8, QWORD PTR dist$[rsp]
  00034	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08LHPIDOMM@n?$HMi?3seek?$AA@
  0003b	48 8b c8	 mov	 rcx, rax
  0003e	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00043	85 c0		 test	 eax, eax

; 623  :         return NULL;

  00045	74 6f		 je	 SHORT $LN20@mmap_seek_

; 624  :     else {
; 625  :         size_t where;
; 626  :         switch (how) {

  00047	8b 4c 24 30	 mov	 ecx, DWORD PTR how$[rsp]
  0004b	85 c9		 test	 ecx, ecx
  0004d	74 27		 je	 SHORT $LN8@mmap_seek_
  0004f	ff c9		 dec	 ecx
  00051	74 18		 je	 SHORT $LN6@mmap_seek_
  00053	ff c9		 dec	 ecx
  00055	74 09		 je	 SHORT $LN4@mmap_seek_

; 642  :         default:
; 643  :             PyErr_SetString(PyExc_ValueError, "unknown seek type");

  00057	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@FKNDPHMG@unknown?5seek?5type?$AA@

; 644  :             return NULL;

  0005e	eb 4a		 jmp	 SHORT $LN19@mmap_seek_
$LN4@mmap_seek_:

; 637  :         case 2: /* relative to end */
; 638  :             if ((Py_ssize_t)self->size + dist < 0)

  00060	48 8b 53 68	 mov	 rdx, QWORD PTR [rbx+104]
  00064	48 03 54 24 40	 add	 rdx, QWORD PTR dist$[rsp]

; 639  :                 goto onoutofrange;
; 640  :             where = self->size + dist;
; 641  :             break;

  00069	eb 13		 jmp	 SHORT $LN21@mmap_seek_
$LN6@mmap_seek_:

; 629  :                 goto onoutofrange;
; 630  :             where = dist;
; 631  :             break;
; 632  :         case 1: /* relative to current position */
; 633  :             if ((Py_ssize_t)self->pos + dist < 0)

  0006b	48 8b 53 70	 mov	 rdx, QWORD PTR [rbx+112]
  0006f	48 03 54 24 40	 add	 rdx, QWORD PTR dist$[rsp]

; 634  :                 goto onoutofrange;
; 635  :             where = self->pos + dist;
; 636  :             break;

  00074	eb 08		 jmp	 SHORT $LN21@mmap_seek_
$LN8@mmap_seek_:

; 627  :         case 0: /* relative to start */
; 628  :             if (dist < 0)

  00076	48 8b 54 24 40	 mov	 rdx, QWORD PTR dist$[rsp]
  0007b	48 85 d2	 test	 rdx, rdx
$LN21@mmap_seek_:
  0007e	78 23		 js	 SHORT $onoutofrange$120676

; 645  :         }
; 646  :         if (where > self->size)

  00080	48 3b 53 68	 cmp	 rdx, QWORD PTR [rbx+104]
  00084	77 1d		 ja	 SHORT $onoutofrange$120676

; 647  :             goto onoutofrange;
; 648  :         self->pos = where;
; 649  :         Py_INCREF(Py_None);

  00086	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0008d	48 89 53 70	 mov	 QWORD PTR [rbx+112], rdx
  00091	e8 00 00 00 00	 call	 _Py_IncRef

; 650  :         return Py_None;

  00096	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 656  : }

  0009d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a1	5b		 pop	 rbx
  000a2	c3		 ret	 0
$onoutofrange$120676:

; 651  :     }
; 652  : 
; 653  :   onoutofrange:
; 654  :     PyErr_SetString(PyExc_ValueError, "seek out of range");

  000a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@IMILDMPF@seek?5out?5of?5range?$AA@
$LN19@mmap_seek_:
  000aa	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000b1	e8 00 00 00 00	 call	 PyErr_SetString
$LN20@mmap_seek_:

; 655  :     return NULL;

  000b6	33 c0		 xor	 eax, eax

; 656  : }

  000b8	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000bc	5b		 pop	 rbx
  000bd	c3		 ret	 0
mmap_seek_method ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@GLEHCJNM@source?0?5destination?0?5or?5count?5ou@ ; `string'
PUBLIC	??_C@_08CMAAKLLI@kkk?3move?$AA@			; `string'
EXTRN	__imp_memmove:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mmap_move_method DD imagerel mmap_move_method
	DD	imagerel mmap_move_method+233
	DD	imagerel $unwind$mmap_move_method
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mmap_move_method DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0CL@GLEHCJNM@source?0?5destination?0?5or?5count?5ou@
CONST	SEGMENT
??_C@_0CL@GLEHCJNM@source?0?5destination?0?5or?5count?5ou@ DB 'source, de'
	DB	'stination, or count out of range', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CMAAKLLI@kkk?3move?$AA@
CONST	SEGMENT
??_C@_08CMAAKLLI@kkk?3move?$AA@ DB 'kkk:move', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mmap_move_method
_TEXT	SEGMENT
dest$ = 64
self$ = 64
args$ = 72
cnt$ = 80
src$ = 88
mmap_move_method PROC					; COMDAT

; 660  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 661  :     unsigned long dest, src, cnt;
; 662  :     CHECK_VALID(NULL);

  00006	48 83 b9 88 00
	00 00 00	 cmp	 QWORD PTR [rcx+136], 0
  0000e	48 8b c2	 mov	 rax, rdx
  00011	48 8b d9	 mov	 rbx, rcx
  00014	75 0c		 jne	 SHORT $LN8@mmap_move_
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@MIHFAFBK@mmap?5closed?5or?5invalid?$AA@
  0001d	e9 b3 00 00 00	 jmp	 $LN12@mmap_move_
$LN8@mmap_move_:

; 663  :     if (!PyArg_ParseTuple(args, "kkk:move", &dest, &src, &cnt) ||
; 664  :         !is_writable(self)) {

  00022	48 8d 4c 24 50	 lea	 rcx, QWORD PTR cnt$[rsp]
  00027	4c 8d 4c 24 58	 lea	 r9, QWORD PTR src$[rsp]
  0002c	4c 8d 44 24 40	 lea	 r8, QWORD PTR dest$[rsp]
  00031	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08CMAAKLLI@kkk?3move?$AA@
  0003d	48 8b c8	 mov	 rcx, rax
  00040	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00045	85 c0		 test	 eax, eax
  00047	0f 84 94 00 00
	00		 je	 $LN4@mmap_move_
  0004d	48 8b cb	 mov	 rcx, rbx
  00050	e8 00 00 00 00	 call	 is_writable
  00055	85 c0		 test	 eax, eax
  00057	0f 84 84 00 00
	00		 je	 $LN4@mmap_move_

; 666  :     } else {
; 667  :         /* bounds check the values */
; 668  :         if ((cnt + dest) < cnt || (cnt + src) < cnt ||
; 669  :            src > self->size || (src + cnt) > self->size ||
; 670  :            dest > self->size || (dest + cnt) > self->size) {

  0005d	8b 4c 24 50	 mov	 ecx, DWORD PTR cnt$[rsp]
  00061	44 8b 44 24 40	 mov	 r8d, DWORD PTR dest$[rsp]
  00066	45 8d 0c 08	 lea	 r9d, DWORD PTR [r8+rcx]
  0006a	44 3b c9	 cmp	 r9d, ecx
  0006d	72 5f		 jb	 SHORT $LN1@mmap_move_
  0006f	8b 44 24 58	 mov	 eax, DWORD PTR src$[rsp]
  00073	44 8d 14 08	 lea	 r10d, DWORD PTR [rax+rcx]
  00077	44 3b d1	 cmp	 r10d, ecx
  0007a	72 52		 jb	 SHORT $LN1@mmap_move_
  0007c	48 8b 53 68	 mov	 rdx, QWORD PTR [rbx+104]
  00080	44 8b d8	 mov	 r11d, eax
  00083	48 3b c2	 cmp	 rax, rdx
  00086	77 46		 ja	 SHORT $LN1@mmap_move_
  00088	41 8b c2	 mov	 eax, r10d
  0008b	48 3b c2	 cmp	 rax, rdx
  0008e	77 3e		 ja	 SHORT $LN1@mmap_move_
  00090	45 8b d0	 mov	 r10d, r8d
  00093	4c 3b c2	 cmp	 r8, rdx
  00096	77 36		 ja	 SHORT $LN1@mmap_move_
  00098	41 8b c1	 mov	 eax, r9d
  0009b	48 3b c2	 cmp	 rax, rdx
  0009e	77 2e		 ja	 SHORT $LN1@mmap_move_

; 673  :             return NULL;
; 674  :         }
; 675  :         memmove(self->data+dest, self->data+src, cnt);

  000a0	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  000a4	44 8b c1	 mov	 r8d, ecx
  000a7	4a 8d 14 18	 lea	 rdx, QWORD PTR [rax+r11]
  000ab	4a 8d 0c 10	 lea	 rcx, QWORD PTR [rax+r10]
  000af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memmove

; 676  :         Py_INCREF(Py_None);

  000b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000bc	e8 00 00 00 00	 call	 _Py_IncRef

; 677  :         return Py_None;

  000c1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 678  :     }
; 679  : }

  000c8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000cc	5b		 pop	 rbx
  000cd	c3		 ret	 0
$LN1@mmap_move_:

; 671  :             PyErr_SetString(PyExc_ValueError,
; 672  :                 "source, destination, or count out of range");

  000ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@GLEHCJNM@source?0?5destination?0?5or?5count?5ou@
$LN12@mmap_move_:
  000d5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000dc	e8 00 00 00 00	 call	 PyErr_SetString
$LN4@mmap_move_:

; 665  :         return NULL;

  000e1	33 c0		 xor	 eax, eax

; 678  :     }
; 679  : }

  000e3	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000e7	5b		 pop	 rbx
  000e8	c3		 ret	 0
mmap_move_method ENDP
_TEXT	ENDS
EXTRN	PyBool_FromLong:PROC
; Function compile flags: /Ogtpy
;	COMDAT mmap_closed_get
_TEXT	SEGMENT
self$ = 8
mmap_closed_get PROC					; COMDAT

; 684  : #ifdef MS_WINDOWS
; 685  :     return PyBool_FromLong(self->map_handle == NULL ? 1 : 0);

  00000	33 c0		 xor	 eax, eax
  00002	48 39 81 88 00
	00 00		 cmp	 QWORD PTR [rcx+136], rax
  00009	0f 94 c0	 sete	 al
  0000c	8b c8		 mov	 ecx, eax

; 686  : #elif defined(UNIX)
; 687  :     return PyBool_FromLong(self->data == NULL ? 1 : 0);
; 688  : #endif
; 689  : }

  0000e	e9 00 00 00 00	 jmp	 PyBool_FromLong
mmap_closed_get ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$mmap__enter__method DD imagerel mmap__enter__method
	DD	imagerel mmap__enter__method+114
	DD	imagerel $unwind$mmap__enter__method
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mmap__enter__method DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\mmapmodule.c
xdata	ENDS
;	COMDAT mmap__enter__method
_TEXT	SEGMENT
self$ = 64
args$ = 72
mmap__enter__method PROC				; COMDAT

; 693  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 694  :     CHECK_VALID(NULL);

  00006	48 83 b9 88 00
	00 00 00	 cmp	 QWORD PTR [rcx+136], 0
  0000e	48 8b d9	 mov	 rbx, rcx
  00011	75 1b		 jne	 SHORT $LN3@mmap__ente
  00013	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0001a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@MIHFAFBK@mmap?5closed?5or?5invalid?$AA@
  00021	e8 00 00 00 00	 call	 PyErr_SetString
  00026	33 c0		 xor	 eax, eax

; 698  : }

  00028	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0002c	5b		 pop	 rbx
  0002d	c3		 ret	 0
$LN3@mmap__ente:

; 695  : 
; 696  :     Py_INCREF(self);

  0002e	e8 00 00 00 00	 call	 _Py_PXCTX
  00033	85 c0		 test	 eax, eax
  00035	75 32		 jne	 SHORT $LN8@mmap__ente
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00045	4c 8b cb	 mov	 r9, rbx
  00048	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0004e	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00056	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005b	85 c0		 test	 eax, eax
  0005d	75 06		 jne	 SHORT $LN7@mmap__ente
  0005f	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00063	74 04		 je	 SHORT $LN8@mmap__ente
$LN7@mmap__ente:
  00065	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN8@mmap__ente:

; 697  :     return (PyObject *)self;

  00069	48 8b c3	 mov	 rax, rbx

; 698  : }

  0006c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00070	5b		 pop	 rbx
  00071	c3		 ret	 0
mmap__enter__method ENDP
_TEXT	ENDS
EXTRN	_PyObject_CallMethodId_SizeT:PROC
EXTRN	_tls_index:DWORD
; Function compile flags: /Ogtpy
;	COMDAT mmap__exit__method
_TEXT	SEGMENT
self$ = 8
args$ = 16
mmap__exit__method PROC					; COMDAT

; 703  :     _Py_IDENTIFIER(close);
; 704  : 
; 705  :     return _PyObject_CallMethodId(self, &PyId_close, NULL);

  00000	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  00007	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00010	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_close@?1??mmap__exit__method@@9@9
  00015	4a 03 14 c0	 add	 rdx, QWORD PTR [rax+r8*8]
  00019	45 33 c0	 xor	 r8d, r8d

; 706  : }

  0001c	e9 00 00 00 00	 jmp	 _PyObject_CallMethodId_SizeT
mmap__exit__method ENDP
_TEXT	ENDS
EXTRN	PyBuffer_FillInfo:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mmap_buffer_getbuf DD imagerel mmap_buffer_getbuf
	DD	imagerel mmap_buffer_getbuf+108
	DD	imagerel $unwind$mmap_buffer_getbuf
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mmap_buffer_getbuf DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT mmap_buffer_getbuf
_TEXT	SEGMENT
self$ = 64
view$ = 72
flags$ = 80
mmap_buffer_getbuf PROC					; COMDAT

; 738  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 739  :     CHECK_VALID(-1);

  00006	48 83 b9 88 00
	00 00 00	 cmp	 QWORD PTR [rcx+136], 0
  0000e	4c 8b d2	 mov	 r10, rdx
  00011	48 8b d9	 mov	 rbx, rcx
  00014	75 1c		 jne	 SHORT $LN4@mmap_buffe
  00016	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@MIHFAFBK@mmap?5closed?5or?5invalid?$AA@
  00024	e8 00 00 00 00	 call	 PyErr_SetString
$LN8@mmap_buffe:
  00029	83 c8 ff	 or	 eax, -1

; 745  : }

  0002c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00030	5b		 pop	 rbx
  00031	c3		 ret	 0
$LN4@mmap_buffe:

; 740  :     if (PyBuffer_FillInfo(view, (PyObject*)self, self->data, self->size,
; 741  :                           (self->access == ACCESS_READ), flags) < 0)

  00032	4c 8b 49 68	 mov	 r9, QWORD PTR [rcx+104]
  00036	33 c0		 xor	 eax, eax
  00038	83 b9 a0 00 00
	00 01		 cmp	 DWORD PTR [rcx+160], 1
  0003f	44 89 44 24 28	 mov	 DWORD PTR [rsp+40], r8d
  00044	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]
  00048	48 8b d1	 mov	 rdx, rcx
  0004b	0f 94 c0	 sete	 al
  0004e	49 8b ca	 mov	 rcx, r10
  00051	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00055	e8 00 00 00 00	 call	 PyBuffer_FillInfo
  0005a	85 c0		 test	 eax, eax

; 742  :         return -1;

  0005c	78 cb		 js	 SHORT $LN8@mmap_buffe

; 743  :     self->exports++;

  0005e	ff 83 80 00 00
	00		 inc	 DWORD PTR [rbx+128]

; 744  :     return 0;

  00064	33 c0		 xor	 eax, eax

; 745  : }

  00066	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0006a	5b		 pop	 rbx
  0006b	c3		 ret	 0
mmap_buffer_getbuf ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT mmap_buffer_releasebuf
_TEXT	SEGMENT
self$ = 8
view$ = 16
mmap_buffer_releasebuf PROC				; COMDAT

; 750  :     self->exports--;

  00000	ff 89 80 00 00
	00		 dec	 DWORD PTR [rcx+128]

; 751  : }

  00006	c3		 ret	 0
mmap_buffer_releasebuf ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$mmap_length DD imagerel mmap_length
	DD	imagerel mmap_length+51
	DD	imagerel $unwind$mmap_length
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mmap_length DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT mmap_length
_TEXT	SEGMENT
self$ = 48
mmap_length PROC					; COMDAT

; 755  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 756  :     CHECK_VALID(-1);

  00004	48 83 b9 88 00
	00 00 00	 cmp	 QWORD PTR [rcx+136], 0
  0000c	75 1c		 jne	 SHORT $LN3@mmap_lengt
  0000e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@MIHFAFBK@mmap?5closed?5or?5invalid?$AA@
  0001c	e8 00 00 00 00	 call	 PyErr_SetString
  00021	48 83 c8 ff	 or	 rax, -1

; 758  : }

  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
$LN3@mmap_lengt:

; 757  :     return self->size;

  0002a	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]

; 758  : }

  0002e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00032	c3		 ret	 0
mmap_length ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@OLHKLCDF@mmap?5index?5out?5of?5range?$AA@ ; `string'
EXTRN	PyExc_IndexError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$mmap_item DD imagerel mmap_item
	DD	imagerel mmap_item+99
	DD	imagerel $unwind$mmap_item
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mmap_item DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BI@OLHKLCDF@mmap?5index?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0BI@OLHKLCDF@mmap?5index?5out?5of?5range?$AA@ DB 'mmap index out of'
	DB	' range', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mmap_item
_TEXT	SEGMENT
self$ = 48
i$ = 56
mmap_item PROC						; COMDAT

; 762  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 763  :     CHECK_VALID(NULL);

  00004	48 83 b9 88 00
	00 00 00	 cmp	 QWORD PTR [rcx+136], 0
  0000c	75 1a		 jne	 SHORT $LN5@mmap_item
  0000e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@MIHFAFBK@mmap?5closed?5or?5invalid?$AA@

; 765  :         PyErr_SetString(PyExc_IndexError, "mmap index out of range");

  0001c	e8 00 00 00 00	 call	 PyErr_SetString

; 766  :         return NULL;

  00021	33 c0		 xor	 eax, eax

; 769  : }

  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	c3		 ret	 0
$LN5@mmap_item:

; 764  :     if (i < 0 || (size_t)i >= self->size) {

  00028	48 85 d2	 test	 rdx, rdx
  0002b	78 1c		 js	 SHORT $LN1@mmap_item
  0002d	48 3b 51 68	 cmp	 rdx, QWORD PTR [rcx+104]
  00031	73 16		 jae	 SHORT $LN1@mmap_item

; 767  :     }
; 768  :     return PyBytes_FromStringAndSize(self->data + i, 1);

  00033	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  00037	48 8d 0c 02	 lea	 rcx, QWORD PTR [rdx+rax]
  0003b	ba 01 00 00 00	 mov	 edx, 1

; 769  : }

  00040	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00044	e9 00 00 00 00	 jmp	 PyBytes_FromStringAndSize
$LN1@mmap_item:

; 765  :         PyErr_SetString(PyExc_IndexError, "mmap index out of range");

  00049	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
  00050	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@OLHKLCDF@mmap?5index?5out?5of?5range?$AA@
  00057	e8 00 00 00 00	 call	 PyErr_SetString

; 766  :         return NULL;

  0005c	33 c0		 xor	 eax, eax

; 769  : }

  0005e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00062	c3		 ret	 0
mmap_item ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@CNGHHAPG@mmap?5indices?5must?5be?5integers?$AA@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
EXTRN	PyErr_NoMemory:PROC
EXTRN	PyMem_Malloc:PROC
EXTRN	PySlice_GetIndicesEx:PROC
EXTRN	PySlice_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$mmap_subscript DD imagerel mmap_subscript
	DD	imagerel mmap_subscript+53
	DD	imagerel $unwind$mmap_subscript
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$mmap_subscript DD imagerel mmap_subscript+53
	DD	imagerel mmap_subscript+131
	DD	imagerel $chain$0$mmap_subscript
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$mmap_subscript DD imagerel mmap_subscript+131
	DD	imagerel mmap_subscript+171
	DD	imagerel $chain$2$mmap_subscript
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$mmap_subscript DD imagerel mmap_subscript+171
	DD	imagerel mmap_subscript+203
	DD	imagerel $chain$4$mmap_subscript
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$mmap_subscript DD imagerel mmap_subscript+203
	DD	imagerel mmap_subscript+304
	DD	imagerel $chain$6$mmap_subscript
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$mmap_subscript DD imagerel mmap_subscript+304
	DD	imagerel mmap_subscript+337
	DD	imagerel $chain$8$mmap_subscript
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$10$mmap_subscript DD imagerel mmap_subscript+337
	DD	imagerel mmap_subscript+369
	DD	imagerel $chain$10$mmap_subscript
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$12$mmap_subscript DD imagerel mmap_subscript+369
	DD	imagerel mmap_subscript+452
	DD	imagerel $chain$12$mmap_subscript
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$14$mmap_subscript DD imagerel mmap_subscript+452
	DD	imagerel mmap_subscript+484
	DD	imagerel $chain$14$mmap_subscript
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$14$mmap_subscript DD 020021H
	DD	0b7400H
	DD	imagerel mmap_subscript
	DD	imagerel mmap_subscript+53
	DD	imagerel $unwind$mmap_subscript
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$12$mmap_subscript DD 020021H
	DD	0b7400H
	DD	imagerel mmap_subscript
	DD	imagerel mmap_subscript+53
	DD	imagerel $unwind$mmap_subscript
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$10$mmap_subscript DD 020021H
	DD	0b7400H
	DD	imagerel mmap_subscript
	DD	imagerel mmap_subscript+53
	DD	imagerel $unwind$mmap_subscript
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$mmap_subscript DD 020021H
	DD	0b7400H
	DD	imagerel mmap_subscript
	DD	imagerel mmap_subscript+53
	DD	imagerel $unwind$mmap_subscript
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$mmap_subscript DD 020021H
	DD	0b7400H
	DD	imagerel mmap_subscript
	DD	imagerel mmap_subscript+53
	DD	imagerel $unwind$mmap_subscript
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$mmap_subscript DD 020021H
	DD	0b7400H
	DD	imagerel mmap_subscript
	DD	imagerel mmap_subscript+53
	DD	imagerel $unwind$mmap_subscript
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$mmap_subscript DD 020021H
	DD	0b7400H
	DD	imagerel mmap_subscript
	DD	imagerel mmap_subscript+53
	DD	imagerel $unwind$mmap_subscript
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$mmap_subscript DD 020521H
	DD	0b7405H
	DD	imagerel mmap_subscript
	DD	imagerel mmap_subscript+53
	DD	imagerel $unwind$mmap_subscript
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mmap_subscript DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT ??_C@_0BO@CNGHHAPG@mmap?5indices?5must?5be?5integers?$AA@
CONST	SEGMENT
??_C@_0BO@CNGHHAPG@mmap?5indices?5must?5be?5integers?$AA@ DB 'mmap indice'
	DB	's must be integers', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mmap_subscript
_TEXT	SEGMENT
stop$120859 = 48
slicelen$120861 = 80
self$ = 80
item$ = 88
start$120858 = 96
step$120860 = 104
mmap_subscript PROC					; COMDAT

; 773  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 774  :     CHECK_VALID(NULL);

  00006	48 83 b9 88 00
	00 00 00	 cmp	 QWORD PTR [rcx+136], 0
  0000e	4c 8b d2	 mov	 r10, rdx
  00011	48 8b d9	 mov	 rbx, rcx
  00014	75 1b		 jne	 SHORT $LN20@mmap_subsc
  00016	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@MIHFAFBK@mmap?5closed?5or?5invalid?$AA@
  00024	e8 00 00 00 00	 call	 PyErr_SetString
  00029	33 c0		 xor	 eax, eax

; 822  :     }
; 823  : }

  0002b	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0002f	5b		 pop	 rbx
  00030	c3		 ret	 0
$LN20@mmap_subsc:

; 775  :     if (PyIndex_Check(item)) {

  00031	48 8b 4a 58	 mov	 rcx, QWORD PTR [rdx+88]
  00035	48 89 7c 24 58	 mov	 QWORD PTR [rsp+88], rdi
  0003a	48 8b 81 b8 00
	00 00		 mov	 rax, QWORD PTR [rcx+184]
  00041	48 85 c0	 test	 rax, rax
  00044	0f 84 81 00 00
	00		 je	 $LN17@mmap_subsc
  0004a	48 83 b8 08 01
	00 00 00	 cmp	 QWORD PTR [rax+264], 0
  00052	74 77		 je	 SHORT $LN17@mmap_subsc

; 776  :         Py_ssize_t i = PyNumber_AsSsize_t(item, PyExc_IndexError);

  00054	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_IndexError
  0005b	49 8b ca	 mov	 rcx, r10
  0005e	e8 00 00 00 00	 call	 PyNumber_AsSsize_t
  00063	48 8b f8	 mov	 rdi, rax

; 777  :         if (i == -1 && PyErr_Occurred())

  00066	48 83 f8 ff	 cmp	 rax, -1
  0006a	75 17		 jne	 SHORT $LN16@mmap_subsc
  0006c	e8 00 00 00 00	 call	 PyErr_Occurred
  00071	48 85 c0	 test	 rax, rax
  00074	74 12		 je	 SHORT $LN27@mmap_subsc

; 821  :         return NULL;

  00076	33 c0		 xor	 eax, eax
  00078	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]

; 822  :     }
; 823  : }

  0007d	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00081	5b		 pop	 rbx
  00082	c3		 ret	 0
$LN16@mmap_subsc:

; 778  :             return NULL;
; 779  :         if (i < 0)

  00083	48 85 c0	 test	 rax, rax
  00086	79 06		 jns	 SHORT $LN26@mmap_subsc
$LN27@mmap_subsc:

; 780  :             i += self->size;

  00088	48 03 7b 68	 add	 rdi, QWORD PTR [rbx+104]

; 781  :         if (i < 0 || (size_t)i >= self->size) {

  0008c	78 1d		 js	 SHORT $LN13@mmap_subsc
$LN26@mmap_subsc:
  0008e	48 3b 7b 68	 cmp	 rdi, QWORD PTR [rbx+104]
  00092	73 17		 jae	 SHORT $LN13@mmap_subsc

; 784  :             return NULL;
; 785  :         }
; 786  :         return PyLong_FromLong(Py_CHARMASK(self->data[i]));

  00094	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00098	0f b6 0c 38	 movzx	 ecx, BYTE PTR [rax+rdi]
  0009c	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]

; 822  :     }
; 823  : }

  000a1	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000a5	5b		 pop	 rbx
  000a6	e9 00 00 00 00	 jmp	 PyLong_FromLong
$LN13@mmap_subsc:

; 782  :             PyErr_SetString(PyExc_IndexError,
; 783  :                 "mmap index out of range");

  000ab	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
  000b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@OLHKLCDF@mmap?5index?5out?5of?5range?$AA@

; 816  :         }
; 817  :     }
; 818  :     else {
; 819  :         PyErr_SetString(PyExc_TypeError,
; 820  :                         "mmap indices must be integers");

  000b9	e8 00 00 00 00	 call	 PyErr_SetString
  000be	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]

; 821  :         return NULL;

  000c3	33 c0		 xor	 eax, eax

; 822  :     }
; 823  : }

  000c5	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000c9	5b		 pop	 rbx
  000ca	c3		 ret	 0
$LN17@mmap_subsc:

; 787  :     }
; 788  :     else if (PySlice_Check(item)) {

  000cb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PySlice_Type
  000d2	48 3b c8	 cmp	 rcx, rax
  000d5	0f 85 e9 00 00
	00		 jne	 $LN11@mmap_subsc

; 789  :         Py_ssize_t start, stop, step, slicelen;
; 790  : 
; 791  :         if (PySlice_GetIndicesEx(item, self->size,
; 792  :                          &start, &stop, &step, &slicelen) < 0) {

  000db	48 8b 53 68	 mov	 rdx, QWORD PTR [rbx+104]
  000df	48 8d 44 24 50	 lea	 rax, QWORD PTR slicelen$120861[rsp]
  000e4	4c 8d 4c 24 30	 lea	 r9, QWORD PTR stop$120859[rsp]
  000e9	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000ee	48 8d 44 24 68	 lea	 rax, QWORD PTR step$120860[rsp]
  000f3	4c 8d 44 24 60	 lea	 r8, QWORD PTR start$120858[rsp]
  000f8	49 8b ca	 mov	 rcx, r10
  000fb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00100	e8 00 00 00 00	 call	 PySlice_GetIndicesEx
  00105	85 c0		 test	 eax, eax

; 793  :             return NULL;

  00107	0f 88 ca 00 00
	00		 js	 $LN29@mmap_subsc

; 794  :         }
; 795  : 
; 796  :         if (slicelen <= 0)

  0010d	48 8b 54 24 50	 mov	 rdx, QWORD PTR slicelen$120861[rsp]
  00112	48 85 d2	 test	 rdx, rdx
  00115	7f 19		 jg	 SHORT $LN9@mmap_subsc

; 797  :             return PyBytes_FromStringAndSize("", 0);

  00117	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0011e	33 d2		 xor	 edx, edx
  00120	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00125	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]

; 822  :     }
; 823  : }

  0012a	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0012e	5b		 pop	 rbx
  0012f	c3		 ret	 0
$LN9@mmap_subsc:

; 798  :         else if (step == 1)

  00130	48 83 7c 24 68
	01		 cmp	 QWORD PTR step$120860[rsp], 1
  00136	75 19		 jne	 SHORT $LN7@mmap_subsc

; 799  :             return PyBytes_FromStringAndSize(self->data + start,
; 800  :                                               slicelen);

  00138	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  0013c	48 03 4c 24 60	 add	 rcx, QWORD PTR start$120858[rsp]
  00141	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00146	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]

; 822  :     }
; 823  : }

  0014b	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0014f	5b		 pop	 rbx
  00150	c3		 ret	 0
$LN7@mmap_subsc:

; 801  :         else {
; 802  :             char *result_buf = (char *)PyMem_Malloc(slicelen);

  00151	48 8b ca	 mov	 rcx, rdx
  00154	e8 00 00 00 00	 call	 PyMem_Malloc
  00159	48 8b f8	 mov	 rdi, rax

; 803  :             Py_ssize_t cur, i;
; 804  :             PyObject *result;
; 805  : 
; 806  :             if (result_buf == NULL)

  0015c	48 85 c0	 test	 rax, rax
  0015f	75 10		 jne	 SHORT $LN5@mmap_subsc

; 807  :                 return PyErr_NoMemory();

  00161	e8 00 00 00 00	 call	 PyErr_NoMemory
  00166	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]

; 822  :     }
; 823  : }

  0016b	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0016f	5b		 pop	 rbx
  00170	c3		 ret	 0
$LN5@mmap_subsc:

; 808  :             for (cur = start, i = 0; i < slicelen;
; 809  :                  cur += step, i++) {

  00171	48 8b 54 24 50	 mov	 rdx, QWORD PTR slicelen$120861[rsp]
  00176	4c 8b 4c 24 60	 mov	 r9, QWORD PTR start$120858[rsp]
  0017b	45 33 c0	 xor	 r8d, r8d
  0017e	48 85 d2	 test	 rdx, rdx
  00181	7e 20		 jle	 SHORT $LN2@mmap_subsc
$LL4@mmap_subsc:

; 810  :                 result_buf[i] = self->data[cur];

  00183	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00187	49 ff c0	 inc	 r8
  0018a	41 0f b6 0c 01	 movzx	 ecx, BYTE PTR [r9+rax]
  0018f	41 88 4c 38 ff	 mov	 BYTE PTR [r8+rdi-1], cl
  00194	48 8b 54 24 50	 mov	 rdx, QWORD PTR slicelen$120861[rsp]
  00199	4c 03 4c 24 68	 add	 r9, QWORD PTR step$120860[rsp]
  0019e	4c 3b c2	 cmp	 r8, rdx
  001a1	7c e0		 jl	 SHORT $LL4@mmap_subsc
$LN2@mmap_subsc:

; 811  :             }
; 812  :             result = PyBytes_FromStringAndSize(result_buf,
; 813  :                                                 slicelen);

  001a3	48 8b cf	 mov	 rcx, rdi
  001a6	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize

; 814  :             PyMem_Free(result_buf);

  001ab	48 8b cf	 mov	 rcx, rdi
  001ae	48 8b d8	 mov	 rbx, rax
  001b1	e8 00 00 00 00	 call	 PyMem_Free
  001b6	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]

; 815  :             return result;

  001bb	48 8b c3	 mov	 rax, rbx

; 822  :     }
; 823  : }

  001be	48 83 c4 40	 add	 rsp, 64			; 00000040H
  001c2	5b		 pop	 rbx
  001c3	c3		 ret	 0
$LN11@mmap_subsc:

; 816  :         }
; 817  :     }
; 818  :     else {
; 819  :         PyErr_SetString(PyExc_TypeError,
; 820  :                         "mmap indices must be integers");

  001c4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  001cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@CNGHHAPG@mmap?5indices?5must?5be?5integers?$AA@
  001d2	e8 00 00 00 00	 call	 PyErr_SetString
$LN29@mmap_subsc:

; 821  :         return NULL;

  001d7	33 c0		 xor	 eax, eax
  001d9	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]

; 822  :     }
; 823  : }

  001de	48 83 c4 40	 add	 rsp, 64			; 00000040H
  001e2	5b		 pop	 rbx
  001e3	c3		 ret	 0
mmap_subscript ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@EDMKIJGP@mmaps?5don?8t?5support?5concatenatio@ ; `string'
EXTRN	PyExc_SystemError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$mmap_concat DD imagerel mmap_concat
	DD	imagerel mmap_concat+66
	DD	imagerel $unwind$mmap_concat
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mmap_concat DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0CC@EDMKIJGP@mmaps?5don?8t?5support?5concatenatio@
CONST	SEGMENT
??_C@_0CC@EDMKIJGP@mmaps?5don?8t?5support?5concatenatio@ DB 'mmaps don''t'
	DB	' support concatenation', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mmap_concat
_TEXT	SEGMENT
self$ = 48
bb$ = 56
mmap_concat PROC					; COMDAT

; 827  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 828  :     CHECK_VALID(NULL);

  00004	48 83 b9 88 00
	00 00 00	 cmp	 QWORD PTR [rcx+136], 0
  0000c	75 1a		 jne	 SHORT $LN3@mmap_conca
  0000e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@MIHFAFBK@mmap?5closed?5or?5invalid?$AA@

; 829  :     PyErr_SetString(PyExc_SystemError,
; 830  :                     "mmaps don't support concatenation");

  0001c	e8 00 00 00 00	 call	 PyErr_SetString

; 831  :     return NULL;

  00021	33 c0		 xor	 eax, eax

; 832  : }

  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	c3		 ret	 0
$LN3@mmap_conca:

; 829  :     PyErr_SetString(PyExc_SystemError,
; 830  :                     "mmaps don't support concatenation");

  00028	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@EDMKIJGP@mmaps?5don?8t?5support?5concatenatio@
  00036	e8 00 00 00 00	 call	 PyErr_SetString

; 831  :     return NULL;

  0003b	33 c0		 xor	 eax, eax

; 832  : }

  0003d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00041	c3		 ret	 0
mmap_concat ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@CPMDENKC@mmaps?5don?8t?5support?5repeat?5opera@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$mmap_repeat DD imagerel mmap_repeat
	DD	imagerel mmap_repeat+66
	DD	imagerel $unwind$mmap_repeat
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mmap_repeat DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0CF@CPMDENKC@mmaps?5don?8t?5support?5repeat?5opera@
CONST	SEGMENT
??_C@_0CF@CPMDENKC@mmaps?5don?8t?5support?5repeat?5opera@ DB 'mmaps don'''
	DB	't support repeat operation', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mmap_repeat
_TEXT	SEGMENT
self$ = 48
n$ = 56
mmap_repeat PROC					; COMDAT

; 836  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 837  :     CHECK_VALID(NULL);

  00004	48 83 b9 88 00
	00 00 00	 cmp	 QWORD PTR [rcx+136], 0
  0000c	75 1a		 jne	 SHORT $LN3@mmap_repea
  0000e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@MIHFAFBK@mmap?5closed?5or?5invalid?$AA@

; 838  :     PyErr_SetString(PyExc_SystemError,
; 839  :                     "mmaps don't support repeat operation");

  0001c	e8 00 00 00 00	 call	 PyErr_SetString

; 840  :     return NULL;

  00021	33 c0		 xor	 eax, eax

; 841  : }

  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	c3		 ret	 0
$LN3@mmap_repea:

; 838  :     PyErr_SetString(PyExc_SystemError,
; 839  :                     "mmaps don't support repeat operation");

  00028	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@CPMDENKC@mmaps?5don?8t?5support?5repeat?5opera@
  00036	e8 00 00 00 00	 call	 PyErr_SetString

; 840  :     return NULL;

  0003b	33 c0		 xor	 eax, eax

; 841  : }

  0003d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00041	c3		 ret	 0
mmap_repeat ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@GAHJEJOI@mmap?5assignment?5must?5be?5length?91@ ; `string'
PUBLIC	??_C@_0CK@KBIEBJOM@mmap?5object?5doesn?8t?5support?5item@ ; `string'
EXTRN	PyBytes_AsString:PROC
EXTRN	PyBytes_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mmap_ass_item DD imagerel mmap_ass_item
	DD	imagerel mmap_ass_item+210
	DD	imagerel $unwind$mmap_ass_item
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mmap_ass_item DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0CJ@GAHJEJOI@mmap?5assignment?5must?5be?5length?91@
CONST	SEGMENT
??_C@_0CJ@GAHJEJOI@mmap?5assignment?5must?5be?5length?91@ DB 'mmap assign'
	DB	'ment must be length-1 bytes()', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@KBIEBJOM@mmap?5object?5doesn?8t?5support?5item@
CONST	SEGMENT
??_C@_0CK@KBIEBJOM@mmap?5object?5doesn?8t?5support?5item@ DB 'mmap object'
	DB	' doesn''t support item deletion', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mmap_ass_item
_TEXT	SEGMENT
self$ = 48
i$ = 56
v$ = 64
mmap_ass_item PROC					; COMDAT

; 845  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 846  :     const char *buf;
; 847  : 
; 848  :     CHECK_VALID(-1);

  0000f	48 83 b9 88 00
	00 00 00	 cmp	 QWORD PTR [rcx+136], 0
  00017	49 8b d8	 mov	 rbx, r8
  0001a	48 8b f2	 mov	 rsi, rdx
  0001d	48 8b f9	 mov	 rdi, rcx
  00020	75 13		 jne	 SHORT $LN9@mmap_ass_i
  00022	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00029	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@MIHFAFBK@mmap?5closed?5or?5invalid?$AA@
  00030	e9 85 00 00 00	 jmp	 $LN13@mmap_ass_i
$LN9@mmap_ass_i:

; 849  :     if (i < 0 || (size_t)i >= self->size) {

  00035	48 85 d2	 test	 rdx, rdx
  00038	78 72		 js	 SHORT $LN5@mmap_ass_i
  0003a	48 3b 51 68	 cmp	 rdx, QWORD PTR [rcx+104]
  0003e	73 6c		 jae	 SHORT $LN5@mmap_ass_i

; 851  :         return -1;
; 852  :     }
; 853  :     if (v == NULL) {

  00040	48 85 db	 test	 rbx, rbx
  00043	75 10		 jne	 SHORT $LN4@mmap_ass_i

; 854  :         PyErr_SetString(PyExc_TypeError,
; 855  :                         "mmap object doesn't support item deletion");

  00045	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0004c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@KBIEBJOM@mmap?5object?5doesn?8t?5support?5item@

; 856  :         return -1;

  00053	eb 65		 jmp	 SHORT $LN13@mmap_ass_i
$LN4@mmap_ass_i:

; 857  :     }
; 858  :     if (! (PyBytes_Check(v) && PyBytes_Size(v)==1) ) {

  00055	49 8b 40 58	 mov	 rax, QWORD PTR [r8+88]
  00059	f7 80 00 01 00
	00 00 00 00 08	 test	 DWORD PTR [rax+256], 134217728 ; 08000000H
  00063	74 3e		 je	 SHORT $LN2@mmap_ass_i
  00065	48 8b cb	 mov	 rcx, rbx
  00068	e8 00 00 00 00	 call	 PyBytes_Size
  0006d	48 83 f8 01	 cmp	 rax, 1
  00071	75 30		 jne	 SHORT $LN2@mmap_ass_i

; 862  :     }
; 863  :     if (!is_writable(self))

  00073	48 8b cf	 mov	 rcx, rdi
  00076	e8 00 00 00 00	 call	 is_writable
  0007b	85 c0		 test	 eax, eax

; 864  :         return -1;

  0007d	74 40		 je	 SHORT $LN14@mmap_ass_i

; 865  :     buf = PyBytes_AsString(v);

  0007f	48 8b cb	 mov	 rcx, rbx
  00082	e8 00 00 00 00	 call	 PyBytes_AsString

; 866  :     self->data[i] = buf[0];

  00087	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  0008b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0008e	88 04 0e	 mov	 BYTE PTR [rsi+rcx], al

; 867  :     return 0;

  00091	33 c0		 xor	 eax, eax

; 868  : }

  00093	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00098	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0009d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a1	5f		 pop	 rdi
  000a2	c3		 ret	 0
$LN2@mmap_ass_i:

; 859  :         PyErr_SetString(PyExc_IndexError,
; 860  :                         "mmap assignment must be length-1 bytes()");

  000a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@GAHJEJOI@mmap?5assignment?5must?5be?5length?91@

; 861  :         return -1;

  000aa	eb 07		 jmp	 SHORT $LN15@mmap_ass_i
$LN5@mmap_ass_i:

; 850  :         PyErr_SetString(PyExc_IndexError, "mmap index out of range");

  000ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@OLHKLCDF@mmap?5index?5out?5of?5range?$AA@
$LN15@mmap_ass_i:
  000b3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
$LN13@mmap_ass_i:
  000ba	e8 00 00 00 00	 call	 PyErr_SetString
$LN14@mmap_ass_i:

; 868  : }

  000bf	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000c4	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000c9	83 c8 ff	 or	 eax, -1
  000cc	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d0	5f		 pop	 rdi
  000d1	c3		 ret	 0
mmap_ass_item ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@KMJDFLHJ@mmap?5indices?5must?5be?5integer?$AA@ ; `string'
PUBLIC	??_C@_0CE@OJOLNMIH@mmap?5slice?5assignment?5is?5wrong?5s@ ; `string'
PUBLIC	??_C@_0CL@IONPCJKP@mmap?5object?5doesn?8t?5support?5slic@ ; `string'
PUBLIC	??_C@_0BP@OFGMNLFP@mmap?5item?5value?5must?5be?5an?5int?$AA@ ; `string'
PUBLIC	??_C@_0CJ@IDJECKPJ@mmap?5item?5value?5must?5be?5in?5range@ ; `string'
PUBLIC	??_C@_0CD@CHMIGJCN@mmap?5doesn?8t?5support?5item?5deleti@ ; `string'
EXTRN	PyBuffer_Release:PROC
EXTRN	PyObject_GetBuffer:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mmap_ass_subscript DD imagerel mmap_ass_subscript
	DD	imagerel mmap_ass_subscript+654
	DD	imagerel $unwind$mmap_ass_subscript
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mmap_ass_subscript DD 071201H
	DD	0166412H
	DD	0153412H
	DD	0120112H
	DD	0700bH
xdata	ENDS
;	COMDAT ??_C@_0BN@KMJDFLHJ@mmap?5indices?5must?5be?5integer?$AA@
CONST	SEGMENT
??_C@_0BN@KMJDFLHJ@mmap?5indices?5must?5be?5integer?$AA@ DB 'mmap indices'
	DB	' must be integer', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@OJOLNMIH@mmap?5slice?5assignment?5is?5wrong?5s@
CONST	SEGMENT
??_C@_0CE@OJOLNMIH@mmap?5slice?5assignment?5is?5wrong?5s@ DB 'mmap slice '
	DB	'assignment is wrong size', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@IONPCJKP@mmap?5object?5doesn?8t?5support?5slic@
CONST	SEGMENT
??_C@_0CL@IONPCJKP@mmap?5object?5doesn?8t?5support?5slic@ DB 'mmap object'
	DB	' doesn''t support slice deletion', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OFGMNLFP@mmap?5item?5value?5must?5be?5an?5int?$AA@
CONST	SEGMENT
??_C@_0BP@OFGMNLFP@mmap?5item?5value?5must?5be?5an?5int?$AA@ DB 'mmap ite'
	DB	'm value must be an int', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@IDJECKPJ@mmap?5item?5value?5must?5be?5in?5range@
CONST	SEGMENT
??_C@_0CJ@IDJECKPJ@mmap?5item?5value?5must?5be?5in?5range@ DB 'mmap item '
	DB	'value must be in range(0, 256)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@CHMIGJCN@mmap?5doesn?8t?5support?5item?5deleti@
CONST	SEGMENT
??_C@_0CD@CHMIGJCN@mmap?5doesn?8t?5support?5item?5deleti@ DB 'mmap doesn'''
	DB	't support item deletion', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mmap_ass_subscript
_TEXT	SEGMENT
slicelen$120978 = 48
stop$120976 = 56
vbuf$120979 = 64
start$120975 = 160
self$ = 160
item$ = 168
value$ = 176
step$120977 = 184
mmap_ass_subscript PROC					; COMDAT

; 872  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H

; 873  :     CHECK_VALID(-1);

  00012	48 83 b9 88 00
	00 00 00	 cmp	 QWORD PTR [rcx+136], 0
  0001a	49 8b f0	 mov	 rsi, r8
  0001d	48 8b fa	 mov	 rdi, rdx
  00020	48 8b d9	 mov	 rbx, rcx
  00023	75 13		 jne	 SHORT $LN29@mmap_ass_s
  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@MIHFAFBK@mmap?5closed?5or?5invalid?$AA@
  00033	e9 39 02 00 00	 jmp	 $LN37@mmap_ass_s
$LN29@mmap_ass_s:

; 874  : 
; 875  :     if (!is_writable(self))

  00038	e8 00 00 00 00	 call	 is_writable
  0003d	85 c0		 test	 eax, eax

; 876  :         return -1;

  0003f	0f 84 31 02 00
	00		 je	 $LN38@mmap_ass_s

; 877  : 
; 878  :     if (PyIndex_Check(item)) {

  00045	48 8b 4f 58	 mov	 rcx, QWORD PTR [rdi+88]
  00049	48 8b 81 b8 00
	00 00		 mov	 rax, QWORD PTR [rcx+184]
  00050	48 85 c0	 test	 rax, rax
  00053	0f 84 e8 00 00
	00		 je	 $LN25@mmap_ass_s
  00059	48 83 b8 08 01
	00 00 00	 cmp	 QWORD PTR [rax+264], 0
  00061	0f 84 da 00 00
	00		 je	 $LN25@mmap_ass_s

; 879  :         Py_ssize_t i = PyNumber_AsSsize_t(item, PyExc_IndexError);

  00067	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_IndexError
  0006e	48 8b cf	 mov	 rcx, rdi
  00071	e8 00 00 00 00	 call	 PyNumber_AsSsize_t
  00076	48 8b f8	 mov	 rdi, rax

; 880  :         Py_ssize_t v;
; 881  : 
; 882  :         if (i == -1 && PyErr_Occurred())

  00079	48 83 f8 ff	 cmp	 rax, -1
  0007d	75 0f		 jne	 SHORT $LN24@mmap_ass_s
  0007f	e8 00 00 00 00	 call	 PyErr_Occurred
  00084	48 85 c0	 test	 rax, rax
  00087	74 0a		 je	 SHORT $LN36@mmap_ass_s

; 883  :             return -1;

  00089	e9 e8 01 00 00	 jmp	 $LN38@mmap_ass_s
$LN24@mmap_ass_s:

; 884  :         if (i < 0)

  0008e	48 85 c0	 test	 rax, rax
  00091	79 0a		 jns	 SHORT $LN35@mmap_ass_s
$LN36@mmap_ass_s:

; 885  :             i += self->size;

  00093	48 03 7b 68	 add	 rdi, QWORD PTR [rbx+104]

; 886  :         if (i < 0 || (size_t)i >= self->size) {

  00097	0f 88 91 00 00
	00		 js	 $LN21@mmap_ass_s
$LN35@mmap_ass_s:
  0009d	48 3b 7b 68	 cmp	 rdi, QWORD PTR [rbx+104]
  000a1	0f 83 87 00 00
	00		 jae	 $LN21@mmap_ass_s

; 890  :         }
; 891  :         if (value == NULL) {

  000a7	48 85 f6	 test	 rsi, rsi
  000aa	75 0c		 jne	 SHORT $LN20@mmap_ass_s

; 892  :             PyErr_SetString(PyExc_TypeError,
; 893  :                             "mmap doesn't support item deletion");

  000ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@CHMIGJCN@mmap?5doesn?8t?5support?5item?5deleti@

; 894  :             return -1;

  000b3	e9 b2 01 00 00	 jmp	 $LN39@mmap_ass_s
$LN20@mmap_ass_s:

; 895  :         }
; 896  :         if (!PyIndex_Check(value)) {

  000b8	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  000bc	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  000c3	48 85 c9	 test	 rcx, rcx
  000c6	74 5a		 je	 SHORT $LN18@mmap_ass_s
  000c8	48 83 b9 08 01
	00 00 00	 cmp	 QWORD PTR [rcx+264], 0
  000d0	74 50		 je	 SHORT $LN18@mmap_ass_s

; 900  :         }
; 901  :         v = PyNumber_AsSsize_t(value, PyExc_TypeError);

  000d2	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_TypeError
  000d9	48 8b ce	 mov	 rcx, rsi
  000dc	e8 00 00 00 00	 call	 PyNumber_AsSsize_t
  000e1	4c 8b d8	 mov	 r11, rax

; 902  :         if (v == -1 && PyErr_Occurred())

  000e4	48 83 f8 ff	 cmp	 rax, -1
  000e8	75 21		 jne	 SHORT $LN17@mmap_ass_s
  000ea	e8 00 00 00 00	 call	 PyErr_Occurred
  000ef	48 85 c0	 test	 rax, rax
  000f2	0f 85 7e 01 00
	00		 jne	 $LN38@mmap_ass_s
$LN15@mmap_ass_s:

; 905  :             PyErr_SetString(PyExc_ValueError,
; 906  :                             "mmap item value must be "
; 907  :                             "in range(0, 256)");

  000f8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@IDJECKPJ@mmap?5item?5value?5must?5be?5in?5range@

; 908  :             return -1;

  00106	e9 66 01 00 00	 jmp	 $LN37@mmap_ass_s
$LN17@mmap_ass_s:

; 903  :             return -1;
; 904  :         if (v < 0 || v > 255) {

  0010b	48 3d ff 00 00
	00		 cmp	 rax, 255		; 000000ffH
  00111	77 e5		 ja	 SHORT $LN15@mmap_ass_s

; 909  :         }
; 910  :         self->data[i] = (char) v;

  00113	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00117	44 88 1c 07	 mov	 BYTE PTR [rdi+rax], r11b

; 911  :         return 0;

  0011b	33 c0		 xor	 eax, eax
  0011d	e9 57 01 00 00	 jmp	 $LN1@mmap_ass_s
$LN18@mmap_ass_s:

; 897  :             PyErr_SetString(PyExc_TypeError,
; 898  :                             "mmap item value must be an int");

  00122	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@OFGMNLFP@mmap?5item?5value?5must?5be?5an?5int?$AA@

; 899  :             return -1;

  00129	e9 3c 01 00 00	 jmp	 $LN39@mmap_ass_s
$LN21@mmap_ass_s:

; 887  :             PyErr_SetString(PyExc_IndexError,
; 888  :                             "mmap index out of range");

  0012e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
  00135	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@OLHKLCDF@mmap?5index?5out?5of?5range?$AA@

; 889  :             return -1;

  0013c	e9 30 01 00 00	 jmp	 $LN37@mmap_ass_s
$LN25@mmap_ass_s:

; 912  :     }
; 913  :     else if (PySlice_Check(item)) {

  00141	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PySlice_Type
  00148	48 3b c8	 cmp	 rcx, rax
  0014b	0f 85 12 01 00
	00		 jne	 $LN13@mmap_ass_s

; 914  :         Py_ssize_t start, stop, step, slicelen;
; 915  :         Py_buffer vbuf;
; 916  : 
; 917  :         if (PySlice_GetIndicesEx(item,
; 918  :                                  self->size, &start, &stop,
; 919  :                                  &step, &slicelen) < 0) {

  00151	48 8b 53 68	 mov	 rdx, QWORD PTR [rbx+104]
  00155	48 8d 44 24 30	 lea	 rax, QWORD PTR slicelen$120978[rsp]
  0015a	4c 8d 4c 24 38	 lea	 r9, QWORD PTR stop$120976[rsp]
  0015f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00164	48 8d 84 24 b8
	00 00 00	 lea	 rax, QWORD PTR step$120977[rsp]
  0016c	4c 8d 84 24 a0
	00 00 00	 lea	 r8, QWORD PTR start$120975[rsp]
  00174	48 8b cf	 mov	 rcx, rdi
  00177	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0017c	e8 00 00 00 00	 call	 PySlice_GetIndicesEx
  00181	85 c0		 test	 eax, eax

; 920  :             return -1;

  00183	0f 88 ed 00 00
	00		 js	 $LN38@mmap_ass_s

; 921  :         }
; 922  :         if (value == NULL) {

  00189	48 85 f6	 test	 rsi, rsi
  0018c	75 0c		 jne	 SHORT $LN11@mmap_ass_s

; 923  :             PyErr_SetString(PyExc_TypeError,
; 924  :                 "mmap object doesn't support slice deletion");

  0018e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@IONPCJKP@mmap?5object?5doesn?8t?5support?5slic@

; 925  :             return -1;

  00195	e9 d0 00 00 00	 jmp	 $LN39@mmap_ass_s
$LN11@mmap_ass_s:

; 926  :         }
; 927  :         if (PyObject_GetBuffer(value, &vbuf, PyBUF_SIMPLE) < 0)

  0019a	48 8d 54 24 40	 lea	 rdx, QWORD PTR vbuf$120979[rsp]
  0019f	45 33 c0	 xor	 r8d, r8d
  001a2	48 8b ce	 mov	 rcx, rsi
  001a5	e8 00 00 00 00	 call	 PyObject_GetBuffer
  001aa	85 c0		 test	 eax, eax

; 928  :             return -1;

  001ac	0f 88 c4 00 00
	00		 js	 $LN38@mmap_ass_s

; 929  :         if (vbuf.len != slicelen) {

  001b2	48 8b 54 24 30	 mov	 rdx, QWORD PTR slicelen$120978[rsp]
  001b7	48 39 54 24 50	 cmp	 QWORD PTR vbuf$120979[rsp+16], rdx
  001bc	74 22		 je	 SHORT $LN9@mmap_ass_s

; 930  :             PyErr_SetString(PyExc_IndexError,
; 931  :                 "mmap slice assignment is wrong size");

  001be	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
  001c5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@OJOLNMIH@mmap?5slice?5assignment?5is?5wrong?5s@
  001cc	e8 00 00 00 00	 call	 PyErr_SetString

; 932  :             PyBuffer_Release(&vbuf);

  001d1	48 8d 4c 24 40	 lea	 rcx, QWORD PTR vbuf$120979[rsp]
  001d6	e8 00 00 00 00	 call	 PyBuffer_Release

; 933  :             return -1;

  001db	e9 96 00 00 00	 jmp	 $LN38@mmap_ass_s
$LN9@mmap_ass_s:

; 934  :         }
; 935  : 
; 936  :         if (slicelen == 0) {

  001e0	48 85 d2	 test	 rdx, rdx
  001e3	74 70		 je	 SHORT $LN2@mmap_ass_s

; 937  :         }
; 938  :         else if (step == 1) {

  001e5	48 83 bc 24 b8
	00 00 00 01	 cmp	 QWORD PTR step$120977[rsp], 1
  001ee	75 27		 jne	 SHORT $LN6@mmap_ass_s

; 939  :             memcpy(self->data + start, vbuf.buf, slicelen);

  001f0	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  001f4	4c 8b c2	 mov	 r8, rdx
  001f7	48 8b 54 24 40	 mov	 rdx, QWORD PTR vbuf$120979[rsp]
  001fc	48 03 8c 24 a0
	00 00 00	 add	 rcx, QWORD PTR start$120975[rsp]
  00204	e8 00 00 00 00	 call	 memcpy

; 949  :             }
; 950  :         }
; 951  :         PyBuffer_Release(&vbuf);

  00209	48 8d 4c 24 40	 lea	 rcx, QWORD PTR vbuf$120979[rsp]
  0020e	e8 00 00 00 00	 call	 PyBuffer_Release

; 952  :         return 0;

  00213	33 c0		 xor	 eax, eax
  00215	eb 62		 jmp	 SHORT $LN1@mmap_ass_s
$LN6@mmap_ass_s:

; 940  :         }
; 941  :         else {
; 942  :             Py_ssize_t cur, i;
; 943  : 
; 944  :             for (cur = start, i = 0;
; 945  :                  i < slicelen;
; 946  :                  cur += step, i++)

  00217	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR start$120975[rsp]
  0021f	45 33 c0	 xor	 r8d, r8d
  00222	48 85 d2	 test	 rdx, rdx
  00225	7e 2e		 jle	 SHORT $LN2@mmap_ass_s
  00227	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@mmap_ass_s:

; 947  :             {
; 948  :                 self->data[cur] = ((char *)vbuf.buf)[i];

  00230	48 8b 44 24 40	 mov	 rax, QWORD PTR vbuf$120979[rsp]
  00235	48 8b 53 60	 mov	 rdx, QWORD PTR [rbx+96]
  00239	49 ff c0	 inc	 r8
  0023c	41 0f b6 4c 00
	ff		 movzx	 ecx, BYTE PTR [r8+rax-1]
  00242	41 88 0c 11	 mov	 BYTE PTR [r9+rdx], cl
  00246	4c 03 8c 24 b8
	00 00 00	 add	 r9, QWORD PTR step$120977[rsp]
  0024e	4c 3b 44 24 30	 cmp	 r8, QWORD PTR slicelen$120978[rsp]
  00253	7c db		 jl	 SHORT $LL4@mmap_ass_s
$LN2@mmap_ass_s:

; 949  :             }
; 950  :         }
; 951  :         PyBuffer_Release(&vbuf);

  00255	48 8d 4c 24 40	 lea	 rcx, QWORD PTR vbuf$120979[rsp]
  0025a	e8 00 00 00 00	 call	 PyBuffer_Release

; 952  :         return 0;

  0025f	33 c0		 xor	 eax, eax
  00261	eb 16		 jmp	 SHORT $LN1@mmap_ass_s
$LN13@mmap_ass_s:

; 953  :     }
; 954  :     else {
; 955  :         PyErr_SetString(PyExc_TypeError,
; 956  :                         "mmap indices must be integer");

  00263	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@KMJDFLHJ@mmap?5indices?5must?5be?5integer?$AA@
$LN39@mmap_ass_s:
  0026a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
$LN37@mmap_ass_s:
  00271	e8 00 00 00 00	 call	 PyErr_SetString
$LN38@mmap_ass_s:

; 957  :         return -1;

  00276	83 c8 ff	 or	 eax, -1
$LN1@mmap_ass_s:

; 958  :     }
; 959  : }

  00279	4c 8d 9c 24 90
	00 00 00	 lea	 r11, QWORD PTR [rsp+144]
  00281	49 8b 5b 18	 mov	 rbx, QWORD PTR [r11+24]
  00285	49 8b 73 20	 mov	 rsi, QWORD PTR [r11+32]
  00289	49 8b e3	 mov	 rsp, r11
  0028c	5f		 pop	 rdi
  0028d	c3		 ret	 0
mmap_ass_subscript ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@FBABAJKH@map?5size?5must?5be?5an?5integral?5val@ ; `string'
PUBLIC	??_C@_0CC@DACBLODL@memory?5mapped?5?$CFs?5must?5be?5positiv@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$_GetMapSize DD imagerel _GetMapSize
	DD	imagerel _GetMapSize+158
	DD	imagerel $unwind$_GetMapSize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_GetMapSize DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0CD@FBABAJKH@map?5size?5must?5be?5an?5integral?5val@
CONST	SEGMENT
??_C@_0CD@FBABAJKH@map?5size?5must?5be?5an?5integral?5val@ DB 'map size m'
	DB	'ust be an integral value', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@DACBLODL@memory?5mapped?5?$CFs?5must?5be?5positiv@
CONST	SEGMENT
??_C@_0CC@DACBLODL@memory?5mapped?5?$CFs?5must?5be?5positiv@ DB 'memory m'
	DB	'apped %s must be positive', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _GetMapSize
_TEXT	SEGMENT
o$ = 48
param$ = 56
_GetMapSize PROC					; COMDAT

; 1059 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b da	 mov	 rbx, rdx
  00009	4c 8b c1	 mov	 r8, rcx

; 1060 :     if (o == NULL)

  0000c	48 85 c9	 test	 rcx, rcx
  0000f	75 08		 jne	 SHORT $LN4@GetMapSize

; 1061 :         return 0;

  00011	33 c0		 xor	 eax, eax

; 1077 : }

  00013	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00017	5b		 pop	 rbx
  00018	c3		 ret	 0
$LN4@GetMapSize:

; 1062 :     if (PyIndex_Check(o)) {

  00019	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0001d	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  00024	48 85 c9	 test	 rcx, rcx
  00027	74 58		 je	 SHORT $LN3@GetMapSize
  00029	48 83 b9 08 01
	00 00 00	 cmp	 QWORD PTR [rcx+264], 0
  00031	74 4e		 je	 SHORT $LN3@GetMapSize

; 1063 :         Py_ssize_t i = PyNumber_AsSsize_t(o, PyExc_OverflowError);

  00033	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_OverflowError
  0003a	49 8b c8	 mov	 rcx, r8
  0003d	e8 00 00 00 00	 call	 PyNumber_AsSsize_t

; 1064 :         if (i==-1 && PyErr_Occurred())

  00042	48 83 f8 ff	 cmp	 rax, -1
  00046	75 14		 jne	 SHORT $LN2@GetMapSize
  00048	e8 00 00 00 00	 call	 PyErr_Occurred
  0004d	48 85 c0	 test	 rax, rax
  00050	74 0f		 je	 SHORT $LN7@GetMapSize

; 1076 :     return -1;

  00052	48 83 c8 ff	 or	 rax, -1

; 1077 : }

  00056	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005a	5b		 pop	 rbx
  0005b	c3		 ret	 0
$LN2@GetMapSize:

; 1065 :             return -1;
; 1066 :         if (i < 0) {

  0005c	48 85 c0	 test	 rax, rax
  0005f	79 37		 jns	 SHORT $LN5@GetMapSize
$LN7@GetMapSize:

; 1067 :             PyErr_Format(PyExc_OverflowError,
; 1068 :                             "memory mapped %s must be positive",
; 1069 :                             param);

  00061	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  00068	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@DACBLODL@memory?5mapped?5?$CFs?5must?5be?5positiv@
  0006f	4c 8b c3	 mov	 r8, rbx
  00072	e8 00 00 00 00	 call	 PyErr_Format

; 1076 :     return -1;

  00077	48 83 c8 ff	 or	 rax, -1

; 1077 : }

  0007b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007f	5b		 pop	 rbx
  00080	c3		 ret	 0
$LN3@GetMapSize:

; 1070 :             return -1;
; 1071 :         }
; 1072 :         return i;
; 1073 :     }
; 1074 : 
; 1075 :     PyErr_SetString(PyExc_TypeError, "map size must be an integral value");

  00081	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00088	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@FBABAJKH@map?5size?5must?5be?5an?5integral?5val@
  0008f	e8 00 00 00 00	 call	 PyErr_SetString

; 1076 :     return -1;

  00094	48 83 c8 ff	 or	 rax, -1
$LN5@GetMapSize:

; 1077 : }

  00098	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009c	5b		 pop	 rbx
  0009d	c3		 ret	 0
_GetMapSize ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@ILNJPNME@mmap?5length?5is?5too?5large?$AA@ ; `string'
PUBLIC	??_C@_0CG@JJJMKNMA@mmap?5offset?5is?5greater?5than?5file@ ; `string'
PUBLIC	??_C@_0BK@BFJDGGFK@cannot?5mmap?5an?5empty?5file?$AA@ ; `string'
PUBLIC	??_C@_0CG@ODNCCLGL@memory?5mapped?5offset?5must?5be?5pos@ ; `string'
PUBLIC	??_C@_0BP@MEHKOKFA@mmap?5invalid?5access?5parameter?4?$AA@ ; `string'
PUBLIC	??_C@_06KBNJCMJO@iO?$HMziL?$AA@			; `string'
EXTRN	__imp_DuplicateHandle:PROC
EXTRN	__imp_GetCurrentProcess:PROC
EXTRN	__imp_lseek:PROC
EXTRN	__imp__get_osfhandle:PROC
EXTRN	PyErr_SetFromErrno:PROC
EXTRN	PyExc_OSError:QWORD
EXTRN	_PyVerify_fd:PROC
EXTRN	_PyArg_ParseTupleAndKeywords_SizeT:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$new_mmap_object DD imagerel new_mmap_object
	DD	imagerel new_mmap_object+245
	DD	imagerel $unwind$new_mmap_object
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$new_mmap_object DD imagerel new_mmap_object+245
	DD	imagerel new_mmap_object+1004
	DD	imagerel $chain$2$new_mmap_object
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$new_mmap_object DD imagerel new_mmap_object+1004
	DD	imagerel new_mmap_object+1032
	DD	imagerel $chain$3$new_mmap_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$new_mmap_object DD 021H
	DD	imagerel new_mmap_object
	DD	imagerel new_mmap_object+245
	DD	imagerel $unwind$new_mmap_object
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$new_mmap_object DD 020821H
	DD	0146408H
	DD	imagerel new_mmap_object
	DD	imagerel new_mmap_object+245
	DD	imagerel $unwind$new_mmap_object
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$new_mmap_object DD 0aa001H
	DD	016e4a0H
	DD	015d498H
	DD	0f008d20fH
	DD	07004c006H
	DD	050023003H
xdata	ENDS
;	COMDAT ??_C@_0BJ@ILNJPNME@mmap?5length?5is?5too?5large?$AA@
CONST	SEGMENT
??_C@_0BJ@ILNJPNME@mmap?5length?5is?5too?5large?$AA@ DB 'mmap length is t'
	DB	'oo large', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@JJJMKNMA@mmap?5offset?5is?5greater?5than?5file@
CONST	SEGMENT
??_C@_0CG@JJJMKNMA@mmap?5offset?5is?5greater?5than?5file@ DB 'mmap offset'
	DB	' is greater than file size', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BFJDGGFK@cannot?5mmap?5an?5empty?5file?$AA@
CONST	SEGMENT
??_C@_0BK@BFJDGGFK@cannot?5mmap?5an?5empty?5file?$AA@ DB 'cannot mmap an '
	DB	'empty file', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@ODNCCLGL@memory?5mapped?5offset?5must?5be?5pos@
CONST	SEGMENT
??_C@_0CG@ODNCCLGL@memory?5mapped?5offset?5must?5be?5pos@ DB 'memory mapp'
	DB	'ed offset must be positive', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@MEHKOKFA@mmap?5invalid?5access?5parameter?4?$AA@
CONST	SEGMENT
??_C@_0BP@MEHKOKFA@mmap?5invalid?5access?5parameter?4?$AA@ DB 'mmap inval'
	DB	'id access parameter.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06KBNJCMJO@iO?$HMziL?$AA@
CONST	SEGMENT
??_C@_06KBNJCMJO@iO?$HMziL?$AA@ DB 'iO|ziL', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT new_mmap_object
_TEXT	SEGMENT
access$ = 80
high$121127 = 84
offset$ = 88
tagname$ = 96
map_size_obj$ = 104
type$ = 160
args$ = 168
kwdict$ = 176
fileno$ = 184
new_mmap_object PROC					; COMDAT

; 1250 : {

  00000	40 55		 push	 rbp
  00002	53		 push	 rbx
  00003	57		 push	 rdi
  00004	41 54		 push	 r12
  00006	41 57		 push	 r15
  00008	48 8b ec	 mov	 rbp, rsp
  0000b	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  0000f	48 8b d9	 mov	 rbx, rcx

; 1251 :     mmap_object *m_obj;
; 1252 :     PyObject *map_size_obj = NULL;

  00012	45 33 ff	 xor	 r15d, r15d

; 1253 :     Py_ssize_t map_size;
; 1254 :     PY_LONG_LONG offset = 0, size;
; 1255 :     DWORD off_hi;       /* upper 32 bits of offset */
; 1256 :     DWORD off_lo;       /* lower 32 bits of offset */
; 1257 :     DWORD size_hi;      /* upper 32 bits of size */
; 1258 :     DWORD size_lo;      /* lower 32 bits of size */
; 1259 :     char *tagname = "";

  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0001c	48 89 4d f0	 mov	 QWORD PTR tagname$[rbp-112], rcx
  00020	49 8b c0	 mov	 rax, r8
  00023	48 8b fa	 mov	 rdi, rdx

; 1260 :     DWORD dwErr = 0;
; 1261 :     int fileno;
; 1262 :     HANDLE fh = 0;
; 1263 :     int access = (access_mode)ACCESS_DEFAULT;
; 1264 :     DWORD flProtect, dwDesiredAccess;
; 1265 :     static char *keywords[] = { "fileno", "length",
; 1266 :                                 "tagname",
; 1267 :                                 "access", "offset", NULL };
; 1268 : 
; 1269 :     if (!PyArg_ParseTupleAndKeywords(args, kwdict, "iO|ziL", keywords,
; 1270 :                                      &fileno, &map_size_obj,
; 1271 :                                      &tagname, &access, &offset)) {

  00026	48 8d 4d e8	 lea	 rcx, QWORD PTR offset$[rbp-112]
  0002a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?keywords@?1??new_mmap_object@@9@9
  00031	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06KBNJCMJO@iO?$HMziL?$AA@
  00038	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0003d	48 8d 4d e0	 lea	 rcx, QWORD PTR access$[rbp-112]
  00041	48 8b d0	 mov	 rdx, rax
  00044	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00049	48 8d 4d f0	 lea	 rcx, QWORD PTR tagname$[rbp-112]
  0004d	4c 89 7d f8	 mov	 QWORD PTR map_size_obj$[rbp-112], r15
  00051	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00056	48 8d 4d f8	 lea	 rcx, QWORD PTR map_size_obj$[rbp-112]
  0005a	4c 89 7d e8	 mov	 QWORD PTR offset$[rbp-112], r15
  0005e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00063	48 8d 4d 48	 lea	 rcx, QWORD PTR fileno$[rbp-112]
  00067	45 8b e7	 mov	 r12d, r15d
  0006a	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0006f	48 8b cf	 mov	 rcx, rdi
  00072	44 89 7d e0	 mov	 DWORD PTR access$[rbp-112], r15d
  00076	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  0007b	85 c0		 test	 eax, eax
  0007d	75 0e		 jne	 SHORT $LN29@new_mmap_o

; 1272 :         return NULL;

  0007f	33 c0		 xor	 eax, eax

; 1442 : }

  00081	48 83 c4 70	 add	 rsp, 112		; 00000070H
  00085	41 5f		 pop	 r15
  00087	41 5c		 pop	 r12
  00089	5f		 pop	 rdi
  0008a	5b		 pop	 rbx
  0008b	5d		 pop	 rbp
  0008c	c3		 ret	 0
$LN29@new_mmap_o:

; 1273 :     }
; 1274 : 
; 1275 :     switch((access_mode)access) {

  0008d	8b 4d e0	 mov	 ecx, DWORD PTR access$[rbp-112]
  00090	4c 89 ac 24 a8
	00 00 00	 mov	 QWORD PTR [rsp+168], r13
  00098	4c 89 b4 24 b0
	00 00 00	 mov	 QWORD PTR [rsp+176], r14
  000a0	85 c9		 test	 ecx, ecx
  000a2	74 3c		 je	 SHORT $LN25@new_mmap_o
  000a4	ff c9		 dec	 ecx
  000a6	74 2c		 je	 SHORT $LN26@new_mmap_o
  000a8	ff c9		 dec	 ecx
  000aa	74 34		 je	 SHORT $LN25@new_mmap_o
  000ac	ff c9		 dec	 ecx
  000ae	74 18		 je	 SHORT $LN24@new_mmap_o

; 1288 :     default:
; 1289 :         return PyErr_Format(PyExc_ValueError,
; 1290 :                             "mmap invalid access parameter.");

  000b0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@MEHKOKFA@mmap?5invalid?5access?5parameter?4?$AA@
  000be	e8 00 00 00 00	 call	 PyErr_Format
  000c3	e9 24 03 00 00	 jmp	 $LN35@new_mmap_o
$LN24@new_mmap_o:

; 1283 :         break;
; 1284 :     case ACCESS_COPY:
; 1285 :         flProtect = PAGE_WRITECOPY;

  000c8	41 be 08 00 00
	00		 mov	 r14d, 8

; 1286 :         dwDesiredAccess = FILE_MAP_COPY;

  000ce	45 8d 6e f9	 lea	 r13d, QWORD PTR [r14-7]

; 1287 :         break;

  000d2	eb 16		 jmp	 SHORT $LN27@new_mmap_o
$LN26@new_mmap_o:

; 1276 :     case ACCESS_READ:
; 1277 :         flProtect = PAGE_READONLY;

  000d4	41 be 02 00 00
	00		 mov	 r14d, 2

; 1278 :         dwDesiredAccess = FILE_MAP_READ;

  000da	45 8d 6e 02	 lea	 r13d, QWORD PTR [r14+2]

; 1279 :         break;

  000de	eb 0a		 jmp	 SHORT $LN27@new_mmap_o
$LN25@new_mmap_o:

; 1280 :     case ACCESS_DEFAULT:  case ACCESS_WRITE:
; 1281 :         flProtect = PAGE_READWRITE;

  000e0	41 be 04 00 00
	00		 mov	 r14d, 4

; 1282 :         dwDesiredAccess = FILE_MAP_WRITE;

  000e6	45 8d 6e fe	 lea	 r13d, QWORD PTR [r14-2]
$LN27@new_mmap_o:

; 1291 :     }
; 1292 : 
; 1293 :     map_size = _GetMapSize(map_size_obj, "size");

  000ea	48 8b 4d f8	 mov	 rcx, QWORD PTR map_size_obj$[rbp-112]
  000ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04IAGNFIBA@size?$AA@
  000f5	48 89 b4 24 a0
	00 00 00	 mov	 QWORD PTR [rsp+160], rsi
  000fd	e8 00 00 00 00	 call	 _GetMapSize
  00102	48 8b f0	 mov	 rsi, rax

; 1294 :     if (map_size < 0)

  00105	48 85 c0	 test	 rax, rax

; 1295 :         return NULL;

  00108	0f 88 d4 02 00
	00		 js	 $LN37@new_mmap_o

; 1296 :     if (offset < 0) {

  0010e	4c 39 65 e8	 cmp	 QWORD PTR offset$[rbp-112], r12
  00112	7d 18		 jge	 SHORT $LN21@new_mmap_o

; 1297 :         PyErr_SetString(PyExc_OverflowError,
; 1298 :             "memory mapped offset must be positive");

  00114	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  0011b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@ODNCCLGL@memory?5mapped?5offset?5must?5be?5pos@
  00122	e8 00 00 00 00	 call	 PyErr_SetString

; 1299 :         return NULL;

  00127	e9 b6 02 00 00	 jmp	 $LN37@new_mmap_o
$LN21@new_mmap_o:

; 1300 :     }
; 1301 : 
; 1302 :     /* assume -1 and 0 both mean invalid filedescriptor
; 1303 :        to 'anonymously' map memory.
; 1304 :        XXX: fileno == 0 is a valid fd, but was accepted prior to 2.5.
; 1305 :        XXX: Should this code be added?
; 1306 :        if (fileno == 0)
; 1307 :         PyErr_WarnEx(PyExc_DeprecationWarning,
; 1308 :                      "don't use 0 for anonymous memory",
; 1309 :                      1);
; 1310 :      */
; 1311 :     if (fileno != -1 && fileno != 0) {

  0012c	8b 4d 48	 mov	 ecx, DWORD PTR fileno$[rbp-112]
  0012f	83 f9 ff	 cmp	 ecx, -1
  00132	74 3e		 je	 SHORT $LN20@new_mmap_o
  00134	85 c9		 test	 ecx, ecx
  00136	74 3a		 je	 SHORT $LN20@new_mmap_o

; 1312 :         /* Ensure that fileno is within the CRT's valid range */
; 1313 :         if (_PyVerify_fd(fileno) == 0) {

  00138	e8 00 00 00 00	 call	 _PyVerify_fd
  0013d	85 c0		 test	 eax, eax
  0013f	75 11		 jne	 SHORT $LN19@new_mmap_o
$LN38@new_mmap_o:

; 1314 :             PyErr_SetFromErrno(PyExc_OSError);

  00141	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OSError
  00148	e8 00 00 00 00	 call	 PyErr_SetFromErrno

; 1315 :             return NULL;

  0014d	e9 90 02 00 00	 jmp	 $LN37@new_mmap_o
$LN19@new_mmap_o:

; 1316 :         }
; 1317 :         fh = (HANDLE)_get_osfhandle(fileno);

  00152	8b 4d 48	 mov	 ecx, DWORD PTR fileno$[rbp-112]
  00155	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__get_osfhandle
  0015b	4c 8b e0	 mov	 r12, rax

; 1318 :         if (fh==(HANDLE)-1) {

  0015e	48 83 f8 ff	 cmp	 rax, -1

; 1319 :             PyErr_SetFromErrno(PyExc_OSError);
; 1320 :             return NULL;

  00162	74 dd		 je	 SHORT $LN38@new_mmap_o

; 1321 :         }
; 1322 :         /* Win9x appears to need us seeked to zero */
; 1323 :         lseek(fileno, 0, SEEK_SET);

  00164	8b 4d 48	 mov	 ecx, DWORD PTR fileno$[rbp-112]
  00167	45 33 c0	 xor	 r8d, r8d
  0016a	33 d2		 xor	 edx, edx
  0016c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lseek
$LN20@new_mmap_o:

; 1324 :     }
; 1325 : 
; 1326 :     m_obj = (mmap_object *)type->tp_alloc(type, 0);

  00172	33 d2		 xor	 edx, edx
  00174	48 8b cb	 mov	 rcx, rbx
  00177	ff 93 88 01 00
	00		 call	 QWORD PTR [rbx+392]
  0017d	48 8b d8	 mov	 rbx, rax

; 1327 :     if (m_obj == NULL)

  00180	48 85 c0	 test	 rax, rax

; 1328 :         return NULL;

  00183	0f 84 59 02 00
	00		 je	 $LN37@new_mmap_o

; 1329 :     /* Set every field to an invalid marker, so we can safely
; 1330 :        destruct the object in the face of failure */
; 1331 :     m_obj->data = NULL;

  00189	4c 89 78 60	 mov	 QWORD PTR [rax+96], r15

; 1332 :     m_obj->file_handle = INVALID_HANDLE_VALUE;

  0018d	48 c7 80 90 00
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rax+144], -1

; 1333 :     m_obj->map_handle = NULL;

  00198	33 c0		 xor	 eax, eax
  0019a	48 89 83 88 00
	00 00		 mov	 QWORD PTR [rbx+136], rax

; 1334 :     m_obj->tagname = NULL;

  001a1	48 89 83 98 00
	00 00		 mov	 QWORD PTR [rbx+152], rax

; 1335 :     m_obj->offset = offset;

  001a8	48 8b 45 e8	 mov	 rax, QWORD PTR offset$[rbp-112]
  001ac	48 89 43 78	 mov	 QWORD PTR [rbx+120], rax

; 1336 : 
; 1337 :     if (fh) {

  001b0	4d 85 e4	 test	 r12, r12
  001b3	0f 84 0d 01 00
	00		 je	 $LN16@new_mmap_o

; 1338 :         /* It is necessary to duplicate the handle, so the
; 1339 :            Python code can close it on us */
; 1340 :         if (!DuplicateHandle(
; 1341 :             GetCurrentProcess(), /* source process handle */
; 1342 :             fh, /* handle to be duplicated */
; 1343 :             GetCurrentProcess(), /* target proc handle */
; 1344 :             (LPHANDLE)&m_obj->file_handle, /* result */
; 1345 :             0, /* access - ignored due to options value */
; 1346 :             FALSE, /* inherited by child processes? */
; 1347 :             DUPLICATE_SAME_ACCESS)) { /* options */

  001b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetCurrentProcess
  001bf	48 8b f8	 mov	 rdi, rax
  001c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetCurrentProcess
  001c8	c7 44 24 30 02
	00 00 00	 mov	 DWORD PTR [rsp+48], 2
  001d0	48 8b c8	 mov	 rcx, rax
  001d3	33 c0		 xor	 eax, eax
  001d5	4c 8d 8b 90 00
	00 00		 lea	 r9, QWORD PTR [rbx+144]
  001dc	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  001e0	4c 8b c7	 mov	 r8, rdi
  001e3	49 8b d4	 mov	 rdx, r12
  001e6	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  001ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DuplicateHandle
  001f0	85 c0		 test	 eax, eax

; 1348 :             dwErr = GetLastError();
; 1349 :             Py_DECREF(m_obj);
; 1350 :             PyErr_SetFromWindowsErr(dwErr);
; 1351 :             return NULL;

  001f2	0f 84 d3 01 00
	00		 je	 $LN4@new_mmap_o

; 1352 :         }
; 1353 :         if (!map_size) {

  001f8	48 85 f6	 test	 rsi, rsi
  001fb	0f 85 c5 00 00
	00		 jne	 $LN16@new_mmap_o

; 1354 :             DWORD low,high;
; 1355 :             low = GetFileSize(fh, &high);

  00201	48 8d 55 e4	 lea	 rdx, QWORD PTR high$121127[rbp-112]
  00205	49 8b cc	 mov	 rcx, r12
  00208	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetFileSize
  0020e	44 8b e0	 mov	 r12d, eax

; 1356 :             /* low might just happen to have the value INVALID_FILE_SIZE;
; 1357 :                so we need to check the last error also. */
; 1358 :             if (low == INVALID_FILE_SIZE &&
; 1359 :                 (dwErr = GetLastError()) != NO_ERROR) {

  00211	83 f8 ff	 cmp	 eax, -1			; ffffffffH
  00214	75 20		 jne	 SHORT $LN13@new_mmap_o
  00216	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  0021c	8b f8		 mov	 edi, eax
  0021e	85 c0		 test	 eax, eax
  00220	74 14		 je	 SHORT $LN13@new_mmap_o

; 1360 :                 Py_DECREF(m_obj);

  00222	48 8b cb	 mov	 rcx, rbx
  00225	e8 00 00 00 00	 call	 _Py_DecRef

; 1361 :                 return PyErr_SetFromWindowsErr(dwErr);

  0022a	8b cf		 mov	 ecx, edi
  0022c	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00231	e9 ae 01 00 00	 jmp	 $LN36@new_mmap_o
$LN13@new_mmap_o:

; 1362 :             }
; 1363 : 
; 1364 :             size = (((PY_LONG_LONG) high) << 32) + low;

  00236	8b 75 e4	 mov	 esi, DWORD PTR high$121127[rbp-112]
  00239	48 c1 e6 20	 shl	 rsi, 32			; 00000020H
  0023d	49 03 f4	 add	 rsi, r12

; 1365 :             if (size == 0) {

  00240	75 20		 jne	 SHORT $LN12@new_mmap_o

; 1366 :                 PyErr_SetString(PyExc_ValueError,
; 1367 :                                 "cannot mmap an empty file");

  00242	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00249	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@BFJDGGFK@cannot?5mmap?5an?5empty?5file?$AA@
  00250	e8 00 00 00 00	 call	 PyErr_SetString

; 1368 :                 Py_DECREF(m_obj);

  00255	48 8b cb	 mov	 rcx, rbx
  00258	e8 00 00 00 00	 call	 _Py_DecRef

; 1369 :                 return NULL;

  0025d	e9 80 01 00 00	 jmp	 $LN37@new_mmap_o
$LN12@new_mmap_o:

; 1370 :             }
; 1371 :             if (offset >= size) {

  00262	48 8b 4d e8	 mov	 rcx, QWORD PTR offset$[rbp-112]
  00266	48 3b ce	 cmp	 rcx, rsi
  00269	7c 20		 jl	 SHORT $LN11@new_mmap_o

; 1372 :                 PyErr_SetString(PyExc_ValueError,
; 1373 :                                 "mmap offset is greater than file size");

  0026b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00272	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@JJJMKNMA@mmap?5offset?5is?5greater?5than?5file@
  00279	e8 00 00 00 00	 call	 PyErr_SetString

; 1374 :                 Py_DECREF(m_obj);

  0027e	48 8b cb	 mov	 rcx, rbx
  00281	e8 00 00 00 00	 call	 _Py_DecRef

; 1375 :                 return NULL;

  00286	e9 57 01 00 00	 jmp	 $LN37@new_mmap_o
$LN11@new_mmap_o:

; 1376 :             }
; 1377 :             if (size - offset > PY_SSIZE_T_MAX) {

  0028b	48 8b c6	 mov	 rax, rsi
  0028e	48 2b c1	 sub	 rax, rcx
  00291	48 b9 ff ff ff
	ff ff ff ff 7f	 mov	 rcx, 9223372036854775807 ; 7fffffffffffffffH
  0029b	48 3b c1	 cmp	 rax, rcx
  0029e	7e 20		 jle	 SHORT $LN10@new_mmap_o

; 1378 :                 PyErr_SetString(PyExc_ValueError,
; 1379 :                                 "mmap length is too large");

  002a0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  002a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@ILNJPNME@mmap?5length?5is?5too?5large?$AA@
  002ae	e8 00 00 00 00	 call	 PyErr_SetString

; 1380 :                 Py_DECREF(m_obj);

  002b3	48 8b cb	 mov	 rcx, rbx
  002b6	e8 00 00 00 00	 call	 _Py_DecRef

; 1381 :                 return NULL;

  002bb	e9 22 01 00 00	 jmp	 $LN37@new_mmap_o
$LN10@new_mmap_o:

; 1382 :             }
; 1383 :             m_obj->size = (Py_ssize_t) (size - offset);

  002c0	48 89 43 68	 mov	 QWORD PTR [rbx+104], rax

; 1384 :         } else {

  002c4	eb 08		 jmp	 SHORT $LN8@new_mmap_o
$LN16@new_mmap_o:

; 1385 :             m_obj->size = map_size;
; 1386 :             size = offset + map_size;
; 1387 :         }
; 1388 :     }
; 1389 :     else {
; 1390 :         m_obj->size = map_size;

  002c6	48 89 73 68	 mov	 QWORD PTR [rbx+104], rsi

; 1391 :         size = offset + map_size;

  002ca	48 03 75 e8	 add	 rsi, QWORD PTR offset$[rbp-112]
$LN8@new_mmap_o:

; 1392 :     }
; 1393 : 
; 1394 :     /* set the initial position */
; 1395 :     m_obj->pos = (size_t) 0;

  002ce	33 c0		 xor	 eax, eax
  002d0	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax

; 1396 : 
; 1397 :     m_obj->exports = 0;

  002d4	89 83 80 00 00
	00		 mov	 DWORD PTR [rbx+128], eax

; 1398 :     /* set the tag name */
; 1399 :     if (tagname != NULL && *tagname != '\0') {

  002da	48 8b 7d f0	 mov	 rdi, QWORD PTR tagname$[rbp-112]
  002de	48 85 ff	 test	 rdi, rdi
  002e1	74 4f		 je	 SHORT $LN7@new_mmap_o
  002e3	38 07		 cmp	 BYTE PTR [rdi], al
  002e5	74 4b		 je	 SHORT $LN7@new_mmap_o

; 1400 :         m_obj->tagname = PyMem_Malloc(strlen(tagname)+1);

  002e7	48 83 c9 ff	 or	 rcx, -1
  002eb	f2 ae		 repne scasb
  002ed	48 f7 d1	 not	 rcx
  002f0	e8 00 00 00 00	 call	 PyMem_Malloc
  002f5	48 8b d0	 mov	 rdx, rax
  002f8	48 89 83 98 00
	00 00		 mov	 QWORD PTR [rbx+152], rax

; 1401 :         if (m_obj->tagname == NULL) {

  002ff	48 85 c0	 test	 rax, rax
  00302	75 12		 jne	 SHORT $LN6@new_mmap_o

; 1402 :             PyErr_NoMemory();

  00304	e8 00 00 00 00	 call	 PyErr_NoMemory

; 1403 :             Py_DECREF(m_obj);

  00309	48 8b cb	 mov	 rcx, rbx
  0030c	e8 00 00 00 00	 call	 _Py_DecRef

; 1404 :             return NULL;

  00311	e9 cc 00 00 00	 jmp	 $LN37@new_mmap_o
$LN6@new_mmap_o:

; 1405 :         }
; 1406 :         strcpy(m_obj->tagname, tagname);

  00316	48 8b 4d f0	 mov	 rcx, QWORD PTR tagname$[rbp-112]
  0031a	66 0f 1f 44 00
	00		 npad	 6
$LL32@new_mmap_o:
  00320	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  00323	48 ff c2	 inc	 rdx
  00326	48 ff c1	 inc	 rcx
  00329	88 42 ff	 mov	 BYTE PTR [rdx-1], al
  0032c	84 c0		 test	 al, al
  0032e	75 f0		 jne	 SHORT $LL32@new_mmap_o

; 1407 :     }
; 1408 :     else

  00330	eb 07		 jmp	 SHORT $LN5@new_mmap_o
$LN7@new_mmap_o:

; 1409 :         m_obj->tagname = NULL;

  00332	48 89 83 98 00
	00 00		 mov	 QWORD PTR [rbx+152], rax
$LN5@new_mmap_o:

; 1410 : 
; 1411 :     m_obj->access = (access_mode)access;

  00339	8b 45 e0	 mov	 eax, DWORD PTR access$[rbp-112]

; 1412 :     size_hi = (DWORD)(size >> 32);
; 1413 :     size_lo = (DWORD)(size & 0xFFFFFFFF);
; 1414 :     off_hi = (DWORD)(offset >> 32);
; 1415 :     off_lo = (DWORD)(offset & 0xFFFFFFFF);
; 1416 :     /* For files, it would be sufficient to pass 0 as size.
; 1417 :        For anonymous maps, we have to pass the size explicitly. */
; 1418 :     m_obj->map_handle = CreateFileMapping(m_obj->file_handle,
; 1419 :                                           NULL,
; 1420 :                                           flProtect,
; 1421 :                                           size_hi,
; 1422 :                                           size_lo,
; 1423 :                                           m_obj->tagname);

  0033c	48 8b 8b 90 00
	00 00		 mov	 rcx, QWORD PTR [rbx+144]
  00343	4c 8b ce	 mov	 r9, rsi
  00346	89 83 a0 00 00
	00		 mov	 DWORD PTR [rbx+160], eax
  0034c	4c 8b 65 e8	 mov	 r12, QWORD PTR offset$[rbp-112]
  00350	48 8b 83 98 00
	00 00		 mov	 rax, QWORD PTR [rbx+152]
  00357	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0035c	49 8b fc	 mov	 rdi, r12
  0035f	49 c1 f9 20	 sar	 r9, 32			; 00000020H
  00363	45 8b c6	 mov	 r8d, r14d
  00366	33 d2		 xor	 edx, edx
  00368	48 c1 ff 20	 sar	 rdi, 32			; 00000020H
  0036c	89 74 24 20	 mov	 DWORD PTR [rsp+32], esi
  00370	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateFileMappingA
  00376	48 89 83 88 00
	00 00		 mov	 QWORD PTR [rbx+136], rax

; 1424 :     if (m_obj->map_handle != NULL) {

  0037d	48 85 c0	 test	 rax, rax
  00380	74 49		 je	 SHORT $LN4@new_mmap_o

; 1425 :         m_obj->data = (char *) MapViewOfFile(m_obj->map_handle,
; 1426 :                                              dwDesiredAccess,
; 1427 :                                              off_hi,
; 1428 :                                              off_lo,
; 1429 :                                              m_obj->size);

  00382	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00386	45 8b cc	 mov	 r9d, r12d
  00389	44 8b c7	 mov	 r8d, edi
  0038c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00391	48 8b c8	 mov	 rcx, rax
  00394	41 8b d5	 mov	 edx, r13d
  00397	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_MapViewOfFile
  0039d	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax

; 1430 :         if (m_obj->data != NULL)

  003a1	48 85 c0	 test	 rax, rax
  003a4	74 05		 je	 SHORT $LN3@new_mmap_o

; 1431 :             return (PyObject *)m_obj;

  003a6	48 8b c3	 mov	 rax, rbx
  003a9	eb 39		 jmp	 SHORT $LN36@new_mmap_o
$LN3@new_mmap_o:

; 1432 :         else {
; 1433 :             dwErr = GetLastError();

  003ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError

; 1434 :             CloseHandle(m_obj->map_handle);

  003b1	48 8b 8b 88 00
	00 00		 mov	 rcx, QWORD PTR [rbx+136]
  003b8	8b f8		 mov	 edi, eax
  003ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 1435 :             m_obj->map_handle = NULL;

  003c0	33 c0		 xor	 eax, eax
  003c2	48 89 83 88 00
	00 00		 mov	 QWORD PTR [rbx+136], rax

; 1436 :         }
; 1437 :     } else

  003c9	eb 08		 jmp	 SHORT $LN1@new_mmap_o
$LN4@new_mmap_o:

; 1438 :         dwErr = GetLastError();

  003cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  003d1	8b f8		 mov	 edi, eax
$LN1@new_mmap_o:

; 1439 :     Py_DECREF(m_obj);

  003d3	48 8b cb	 mov	 rcx, rbx
  003d6	e8 00 00 00 00	 call	 _Py_DecRef

; 1440 :     PyErr_SetFromWindowsErr(dwErr);

  003db	8b cf		 mov	 ecx, edi
  003dd	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
$LN37@new_mmap_o:

; 1441 :     return NULL;

  003e2	33 c0		 xor	 eax, eax
$LN36@new_mmap_o:
  003e4	48 8b b4 24 a0
	00 00 00	 mov	 rsi, QWORD PTR [rsp+160]
$LN35@new_mmap_o:
  003ec	4c 8b ac 24 a8
	00 00 00	 mov	 r13, QWORD PTR [rsp+168]
  003f4	4c 8b b4 24 b0
	00 00 00	 mov	 r14, QWORD PTR [rsp+176]

; 1442 : }

  003fc	48 83 c4 70	 add	 rsp, 112		; 00000070H
  00400	41 5f		 pop	 r15
  00402	41 5c		 pop	 r12
  00404	5f		 pop	 rdi
  00405	5b		 pop	 rbx
  00406	5d		 pop	 rbp
  00407	c3		 ret	 0
new_mmap_object ENDP
_TEXT	ENDS
EXTRN	PyDict_SetItemString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$setint DD imagerel setint
	DD	imagerel setint+79
	DD	imagerel $unwind$setint
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$setint DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT setint
_TEXT	SEGMENT
d$ = 48
name$ = 56
value$ = 64
setint	PROC						; COMDAT

; 1447 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b f1	 mov	 rsi, rcx

; 1448 :     PyObject *o = PyLong_FromLong(value);

  00012	41 8b c8	 mov	 ecx, r8d
  00015	48 8b fa	 mov	 rdi, rdx
  00018	e8 00 00 00 00	 call	 PyLong_FromLong
  0001d	48 8b d8	 mov	 rbx, rax

; 1449 :     if (o && PyDict_SetItemString(d, name, o) == 0) {

  00020	48 85 c0	 test	 rax, rax
  00023	74 1a		 je	 SHORT $LN1@setint
  00025	4c 8b c0	 mov	 r8, rax
  00028	48 8b d7	 mov	 rdx, rdi
  0002b	48 8b ce	 mov	 rcx, rsi
  0002e	e8 00 00 00 00	 call	 PyDict_SetItemString
  00033	85 c0		 test	 eax, eax
  00035	75 08		 jne	 SHORT $LN1@setint

; 1450 :         Py_DECREF(o);

  00037	48 8b cb	 mov	 rcx, rbx
  0003a	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@setint:

; 1451 :     }
; 1452 : }

  0003f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00044	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00049	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004d	5f		 pop	 rdi
  0004e	c3		 ret	 0
setint	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@GOGDFIHI@ACCESS_COPY?$AA@		; `string'
PUBLIC	??_C@_0N@PGEALJOO@ACCESS_WRITE?$AA@		; `string'
PUBLIC	??_C@_0M@LONGKDHF@ACCESS_READ?$AA@		; `string'
PUBLIC	??_C@_0BG@CGCEMFPN@ALLOCATIONGRANULARITY?$AA@	; `string'
PUBLIC	??_C@_08CFCAAKPG@PAGESIZE?$AA@			; `string'
PUBLIC	??_C@_05KKCIMGE@error?$AA@			; `string'
PUBLIC	PyInit_mmap
EXTRN	PyModule_GetDict:PROC
EXTRN	PyModule_Create2:PROC
EXTRN	PyType_Ready:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyInit_mmap DD imagerel $LN8
	DD	imagerel $LN8+39
	DD	imagerel $unwind$PyInit_mmap
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyInit_mmap DD imagerel $LN8+39
	DD	imagerel $LN8+67
	DD	imagerel $chain$0$PyInit_mmap
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyInit_mmap DD imagerel $LN8+67
	DD	imagerel $LN8+103
	DD	imagerel $chain$3$PyInit_mmap
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$PyInit_mmap DD imagerel $LN8+103
	DD	imagerel $LN8+274
	DD	imagerel $chain$5$PyInit_mmap
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$PyInit_mmap DD 040021H
	DD	047400H
	DD	063400H
	DD	imagerel $LN8
	DD	imagerel $LN8+39
	DD	imagerel $unwind$PyInit_mmap
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyInit_mmap DD 040821H
	DD	047408H
	DD	063400H
	DD	imagerel $LN8
	DD	imagerel $LN8+39
	DD	imagerel $unwind$PyInit_mmap
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyInit_mmap DD 020521H
	DD	063405H
	DD	imagerel $LN8
	DD	imagerel $LN8+39
	DD	imagerel $unwind$PyInit_mmap
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit_mmap DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0M@GOGDFIHI@ACCESS_COPY?$AA@
CONST	SEGMENT
??_C@_0M@GOGDFIHI@ACCESS_COPY?$AA@ DB 'ACCESS_COPY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PGEALJOO@ACCESS_WRITE?$AA@
CONST	SEGMENT
??_C@_0N@PGEALJOO@ACCESS_WRITE?$AA@ DB 'ACCESS_WRITE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LONGKDHF@ACCESS_READ?$AA@
CONST	SEGMENT
??_C@_0M@LONGKDHF@ACCESS_READ?$AA@ DB 'ACCESS_READ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@CGCEMFPN@ALLOCATIONGRANULARITY?$AA@
CONST	SEGMENT
??_C@_0BG@CGCEMFPN@ALLOCATIONGRANULARITY?$AA@ DB 'ALLOCATIONGRANULARITY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08CFCAAKPG@PAGESIZE?$AA@
CONST	SEGMENT
??_C@_08CFCAAKPG@PAGESIZE?$AA@ DB 'PAGESIZE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05KKCIMGE@error?$AA@
CONST	SEGMENT
??_C@_05KKCIMGE@error?$AA@ DB 'error', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyInit_mmap
_TEXT	SEGMENT
PyInit_mmap PROC					; COMDAT

; 1469 : {

$LN8:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1470 :     PyObject *dict, *module;
; 1471 : 
; 1472 :     if (PyType_Ready(&mmap_object_type) < 0)

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:mmap_object_type
  0000b	e8 00 00 00 00	 call	 PyType_Ready
  00010	85 c0		 test	 eax, eax
  00012	79 07		 jns	 SHORT $LN3@PyInit_mma

; 1473 :         return NULL;

  00014	33 c0		 xor	 eax, eax

; 1518 : }

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
$LN3@PyInit_mma:

; 1474 : 
; 1475 :     module = PyModule_Create(&mmapmodule);

  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:mmapmodule
  00022	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00027	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0002c	e8 00 00 00 00	 call	 PyModule_Create2
  00031	48 8b d8	 mov	 rbx, rax

; 1476 :     if (module == NULL)

  00034	48 85 c0	 test	 rax, rax
  00037	75 0a		 jne	 SHORT $LN2@PyInit_mma
  00039	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1518 : }

  0003e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00042	c3		 ret	 0
$LN2@PyInit_mma:

; 1477 :         return NULL;
; 1478 :     dict = PyModule_GetDict(module);

  00043	48 8b c8	 mov	 rcx, rax
  00046	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0004b	e8 00 00 00 00	 call	 PyModule_GetDict
  00050	48 8b f8	 mov	 rdi, rax

; 1479 :     if (!dict)

  00053	48 85 c0	 test	 rax, rax
  00056	75 0f		 jne	 SHORT $LN1@PyInit_mma
  00058	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]
  0005d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1518 : }

  00062	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00066	c3		 ret	 0
$LN1@PyInit_mma:

; 1480 :         return NULL;
; 1481 :     PyDict_SetItemString(dict, "error", PyExc_OSError);

  00067	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR PyExc_OSError
  0006e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KKCIMGE@error?$AA@
  00075	48 8b c8	 mov	 rcx, rax
  00078	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1482 :     PyDict_SetItemString(dict, "mmap", (PyObject*) &mmap_object_type);

  0007d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:mmap_object_type
  00084	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04PHBJEMCB@mmap?$AA@
  0008b	48 8b cf	 mov	 rcx, rdi
  0008e	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1483 : #ifdef PROT_EXEC
; 1484 :     setint(dict, "PROT_EXEC", PROT_EXEC);
; 1485 : #endif
; 1486 : #ifdef PROT_READ
; 1487 :     setint(dict, "PROT_READ", PROT_READ);
; 1488 : #endif
; 1489 : #ifdef PROT_WRITE
; 1490 :     setint(dict, "PROT_WRITE", PROT_WRITE);
; 1491 : #endif
; 1492 : 
; 1493 : #ifdef MAP_SHARED
; 1494 :     setint(dict, "MAP_SHARED", MAP_SHARED);
; 1495 : #endif
; 1496 : #ifdef MAP_PRIVATE
; 1497 :     setint(dict, "MAP_PRIVATE", MAP_PRIVATE);
; 1498 : #endif
; 1499 : #ifdef MAP_DENYWRITE
; 1500 :     setint(dict, "MAP_DENYWRITE", MAP_DENYWRITE);
; 1501 : #endif
; 1502 : #ifdef MAP_EXECUTABLE
; 1503 :     setint(dict, "MAP_EXECUTABLE", MAP_EXECUTABLE);
; 1504 : #endif
; 1505 : #ifdef MAP_ANONYMOUS
; 1506 :     setint(dict, "MAP_ANON", MAP_ANONYMOUS);
; 1507 :     setint(dict, "MAP_ANONYMOUS", MAP_ANONYMOUS);
; 1508 : #endif
; 1509 : 
; 1510 :     setint(dict, "PAGESIZE", (long)my_getpagesize());

  00093	e8 00 00 00 00	 call	 my_getpagesize
  00098	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08CFCAAKPG@PAGESIZE?$AA@
  0009f	44 8b c0	 mov	 r8d, eax
  000a2	48 8b cf	 mov	 rcx, rdi
  000a5	e8 00 00 00 00	 call	 setint

; 1511 : 
; 1512 :     setint(dict, "ALLOCATIONGRANULARITY", (long)my_getallocationgranularity());

  000aa	e8 00 00 00 00	 call	 my_getallocationgranularity
  000af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@CGCEMFPN@ALLOCATIONGRANULARITY?$AA@
  000b6	44 8b c0	 mov	 r8d, eax
  000b9	48 8b cf	 mov	 rcx, rdi
  000bc	e8 00 00 00 00	 call	 setint

; 1513 : 
; 1514 :     setint(dict, "ACCESS_READ", ACCESS_READ);

  000c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@LONGKDHF@ACCESS_READ?$AA@
  000c8	41 b8 01 00 00
	00		 mov	 r8d, 1
  000ce	48 8b cf	 mov	 rcx, rdi
  000d1	e8 00 00 00 00	 call	 setint

; 1515 :     setint(dict, "ACCESS_WRITE", ACCESS_WRITE);

  000d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@PGEALJOO@ACCESS_WRITE?$AA@
  000dd	41 b8 02 00 00
	00		 mov	 r8d, 2
  000e3	48 8b cf	 mov	 rcx, rdi
  000e6	e8 00 00 00 00	 call	 setint

; 1516 :     setint(dict, "ACCESS_COPY", ACCESS_COPY);

  000eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@GOGDFIHI@ACCESS_COPY?$AA@
  000f2	41 b8 03 00 00
	00		 mov	 r8d, 3
  000f8	48 8b cf	 mov	 rcx, rdi
  000fb	e8 00 00 00 00	 call	 setint
  00100	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]

; 1517 :     return module;

  00105	48 8b c3	 mov	 rax, rbx
  00108	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1518 : }

  0010d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00111	c3		 ret	 0
PyInit_mmap ENDP
_TEXT	ENDS
END
