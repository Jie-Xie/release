; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_09NCHPBFFI@itertools?$AA@			; `string'
PUBLIC	??_C@_03GMHAIBAB@tee?$AA@			; `string'
PUBLIC	??_C@_0BG@NNPBFPMG@itertools?4zip_longest?$AA@	; `string'
PUBLIC	??_C@_0BB@IMKAOHGA@itertools?4repeat?$AA@	; `string'
PUBLIC	??_C@_0BA@BJLPBKGK@__length_hint__?$AA@		; `string'
PUBLIC	??_C@_05MJOOAIJH@times?$AA@			; `string'
PUBLIC	??_C@_06IEOJBDIK@object?$AA@			; `string'
PUBLIC	??_C@_0BA@KKPHBGCD@itertools?4count?$AA@	; `string'
PUBLIC	??_C@_04CNBNFAL@step?$AA@			; `string'
PUBLIC	??_C@_05FAGFPHJG@start?$AA@			; `string'
PUBLIC	??_C@_0BG@LNFBHPNB@itertools?4filterfalse?$AA@	; `string'
PUBLIC	??_C@_0BD@LJLKJFJE@itertools?4compress?$AA@	; `string'
PUBLIC	??_C@_09PLCFPBOK@selectors?$AA@			; `string'
PUBLIC	??_C@_04PJOLNDGD@data?$AA@			; `string'
PUBLIC	??_C@_0BF@JGKIDDED@itertools?4accumulate?$AA@	; `string'
PUBLIC	??_C@_04HPNHAEOP@func?$AA@			; `string'
PUBLIC	??_C@_0BH@OBMBIGIH@itertools?4permutations?$AA@	; `string'
PUBLIC	??_C@_0CI@LFGIIFFE@itertools?4combinations_with_repl@ ; `string'
PUBLIC	??_C@_0BH@GJLBFDPE@itertools?4combinations?$AA@	; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_0BC@OPMDDELD@itertools?4product?$AA@	; `string'
PUBLIC	??_C@_0BA@HCMOOGKF@itertools?4chain?$AA@	; `string'
PUBLIC	??_C@_0O@CCOONFCF@from_iterable?$AA@		; `string'
PUBLIC	??_C@_0BC@CFHDGLCC@itertools?4starmap?$AA@	; `string'
PUBLIC	??_C@_0BB@IDGNPMJH@itertools?4islice?$AA@	; `string'
PUBLIC	??_C@_0BE@JBOLIPHD@itertools?4takewhile?$AA@	; `string'
PUBLIC	??_C@_0BE@JCKEMNLM@itertools?4dropwhile?$AA@	; `string'
PUBLIC	??_C@_0BA@GAHIILDM@itertools?4cycle?$AA@	; `string'
PUBLIC	??_C@_0P@LGCJDGOJ@itertools?4_tee?$AA@		; `string'
PUBLIC	??_C@_08MOMBEIKE@__copy__?$AA@			; `string'
PUBLIC	??_C@_0BK@MAONMKPL@itertools?4_tee_dataobject?$AA@ ; `string'
PUBLIC	??_C@_0BD@BFBLHELA@itertools?4_grouper?$AA@	; `string'
PUBLIC	??_C@_0BC@EHIPFGPL@itertools?4groupby?$AA@	; `string'
PUBLIC	??_C@_0N@MOOGCAMH@__setstate__?$AA@		; `string'
PUBLIC	??_C@_0L@NNMACJIG@__reduce__?$AA@		; `string'
PUBLIC	??_C@_03ICHNJLJF@key?$AA@			; `string'
PUBLIC	??_C@_08DCHCEAJP@iterable?$AA@			; `string'
EXTRN	PyObject_GC_Del:PROC
EXTRN	PyObject_SelfIter:PROC
EXTRN	PyObject_GenericGetAttr:PROC
;	COMDAT ??_C@_09NCHPBFFI@itertools?$AA@
CONST	SEGMENT
??_C@_09NCHPBFFI@itertools?$AA@ DB 'itertools', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03GMHAIBAB@tee?$AA@
CONST	SEGMENT
??_C@_03GMHAIBAB@tee?$AA@ DB 'tee', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NNPBFPMG@itertools?4zip_longest?$AA@
CONST	SEGMENT
??_C@_0BG@NNPBFPMG@itertools?4zip_longest?$AA@ DB 'itertools.zip_longest', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IMKAOHGA@itertools?4repeat?$AA@
CONST	SEGMENT
??_C@_0BB@IMKAOHGA@itertools?4repeat?$AA@ DB 'itertools.repeat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BJLPBKGK@__length_hint__?$AA@
CONST	SEGMENT
??_C@_0BA@BJLPBKGK@__length_hint__?$AA@ DB '__length_hint__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05MJOOAIJH@times?$AA@
CONST	SEGMENT
??_C@_05MJOOAIJH@times?$AA@ DB 'times', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IEOJBDIK@object?$AA@
CONST	SEGMENT
??_C@_06IEOJBDIK@object?$AA@ DB 'object', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KKPHBGCD@itertools?4count?$AA@
CONST	SEGMENT
??_C@_0BA@KKPHBGCD@itertools?4count?$AA@ DB 'itertools.count', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04CNBNFAL@step?$AA@
CONST	SEGMENT
??_C@_04CNBNFAL@step?$AA@ DB 'step', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FAGFPHJG@start?$AA@
CONST	SEGMENT
??_C@_05FAGFPHJG@start?$AA@ DB 'start', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LNFBHPNB@itertools?4filterfalse?$AA@
CONST	SEGMENT
??_C@_0BG@LNFBHPNB@itertools?4filterfalse?$AA@ DB 'itertools.filterfalse', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LJLKJFJE@itertools?4compress?$AA@
CONST	SEGMENT
??_C@_0BD@LJLKJFJE@itertools?4compress?$AA@ DB 'itertools.compress', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09PLCFPBOK@selectors?$AA@
CONST	SEGMENT
??_C@_09PLCFPBOK@selectors?$AA@ DB 'selectors', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04PJOLNDGD@data?$AA@
CONST	SEGMENT
??_C@_04PJOLNDGD@data?$AA@ DB 'data', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JGKIDDED@itertools?4accumulate?$AA@
CONST	SEGMENT
??_C@_0BF@JGKIDDED@itertools?4accumulate?$AA@ DB 'itertools.accumulate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04HPNHAEOP@func?$AA@
CONST	SEGMENT
??_C@_04HPNHAEOP@func?$AA@ DB 'func', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@OBMBIGIH@itertools?4permutations?$AA@
CONST	SEGMENT
??_C@_0BH@OBMBIGIH@itertools?4permutations?$AA@ DB 'itertools.permutation'
	DB	's', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@LFGIIFFE@itertools?4combinations_with_repl@
CONST	SEGMENT
??_C@_0CI@LFGIIFFE@itertools?4combinations_with_repl@ DB 'itertools.combi'
	DB	'nations_with_replacement', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GJLBFDPE@itertools?4combinations?$AA@
CONST	SEGMENT
??_C@_0BH@GJLBFDPE@itertools?4combinations?$AA@ DB 'itertools.combination'
	DB	's', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OPMDDELD@itertools?4product?$AA@
CONST	SEGMENT
??_C@_0BC@OPMDDELD@itertools?4product?$AA@ DB 'itertools.product', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HCMOOGKF@itertools?4chain?$AA@
CONST	SEGMENT
??_C@_0BA@HCMOOGKF@itertools?4chain?$AA@ DB 'itertools.chain', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CCOONFCF@from_iterable?$AA@
CONST	SEGMENT
??_C@_0O@CCOONFCF@from_iterable?$AA@ DB 'from_iterable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CFHDGLCC@itertools?4starmap?$AA@
CONST	SEGMENT
??_C@_0BC@CFHDGLCC@itertools?4starmap?$AA@ DB 'itertools.starmap', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IDGNPMJH@itertools?4islice?$AA@
CONST	SEGMENT
??_C@_0BB@IDGNPMJH@itertools?4islice?$AA@ DB 'itertools.islice', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JBOLIPHD@itertools?4takewhile?$AA@
CONST	SEGMENT
??_C@_0BE@JBOLIPHD@itertools?4takewhile?$AA@ DB 'itertools.takewhile', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JCKEMNLM@itertools?4dropwhile?$AA@
CONST	SEGMENT
??_C@_0BE@JCKEMNLM@itertools?4dropwhile?$AA@ DB 'itertools.dropwhile', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GAHIILDM@itertools?4cycle?$AA@
CONST	SEGMENT
??_C@_0BA@GAHIILDM@itertools?4cycle?$AA@ DB 'itertools.cycle', 00H ; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId___copy__@?1??tee@@9@9 DQ 0000000000000000H	; `tee'::`2'::PyId___copy__
	DQ	FLAT:??_C@_08MOMBEIKE@__copy__?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_0P@LGCJDGOJ@itertools?4_tee?$AA@
CONST	SEGMENT
??_C@_0P@LGCJDGOJ@itertools?4_tee?$AA@ DB 'itertools._tee', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08MOMBEIKE@__copy__?$AA@
CONST	SEGMENT
??_C@_08MOMBEIKE@__copy__?$AA@ DB '__copy__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MAONMKPL@itertools?4_tee_dataobject?$AA@
CONST	SEGMENT
??_C@_0BK@MAONMKPL@itertools?4_tee_dataobject?$AA@ DB 'itertools._tee_dat'
	DB	'aobject', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BFBLHELA@itertools?4_grouper?$AA@
CONST	SEGMENT
??_C@_0BD@BFBLHELA@itertools?4_grouper?$AA@ DB 'itertools._grouper', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EHIPFGPL@itertools?4groupby?$AA@
CONST	SEGMENT
??_C@_0BC@EHIPFGPL@itertools?4groupby?$AA@ DB 'itertools.groupby', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MOOGCAMH@__setstate__?$AA@
CONST	SEGMENT
??_C@_0N@MOOGCAMH@__setstate__?$AA@ DB '__setstate__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNMACJIG@__reduce__?$AA@
CONST	SEGMENT
??_C@_0L@NNMACJIG@__reduce__?$AA@ DB '__reduce__', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
?kwargs@?1??groupby_new@@9@9 DQ FLAT:??_C@_08DCHCEAJP@iterable?$AA@ ; `groupby_new'::`2'::kwargs
	DQ	FLAT:??_C@_03ICHNJLJF@key?$AA@
	DQ	0000000000000000H
reduce_doc DB	'Return state information for pickling.', 00H
	ORG $+1
setstate_doc DB	'Set state information for unpickling.', 00H
	ORG $+10
groupby_methods DQ FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:groupby_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	FLAT:??_C@_0N@MOOGCAMH@__setstate__?$AA@
	DQ	FLAT:groupby_setstate
	DD	08H
	ORG $+4
	DQ	FLAT:setstate_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
groupby_doc DB	'groupby(iterable[, keyfunc]) -> create an iterator which'
	DB	' returns', 0aH, '(key, sub-iterator) grouped by each value of'
	DB	' key(value).', 0aH, 00H
	ORG $+5
groupby_type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BC@EHIPFGPL@itertools?4groupby?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:groupby_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:groupby_doc
	DQ	FLAT:groupby_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:groupby_next
	DQ	FLAT:groupby_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:groupby_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
_grouper_methods DQ FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:_grouper_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
_grouper_type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BD@BFBLHELA@itertools?4_grouper?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:_grouper_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:_grouper_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:_grouper_next
	DQ	FLAT:_grouper_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:_grouper_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
teedataobject_methods DQ FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:teedataobject_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
teedataobject_doc DB 'Data container common to multiple tee objects.', 00H
	ORG $+1
teedataobject_type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BK@MAONMKPL@itertools?4_tee_dataobject?$AA@
	DQ	0000000000000240H
	DQ	0000000000000000H
	DQ	FLAT:teedataobject_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	FLAT:teedataobject_doc
	DQ	FLAT:teedataobject_traverse
	DQ	FLAT:teedataobject_clear
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:teedataobject_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:teedataobject_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
teecopy_doc DB	'Returns an independent iterator.', 00H
	ORG $+7
teeobject_doc DB 'Iterator wrapped to make it copyable', 00H
	ORG $+3
tee_methods DQ	FLAT:??_C@_08MOMBEIKE@__copy__?$AA@
	DQ	FLAT:tee_copy
	DD	04H
	ORG $+4
	DQ	FLAT:teecopy_doc
	DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:tee_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	FLAT:??_C@_0N@MOOGCAMH@__setstate__?$AA@
	DQ	FLAT:tee_setstate
	DD	08H
	ORG $+4
	DQ	FLAT:setstate_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
tee_type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0P@LGCJDGOJ@itertools?4_tee?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:tee_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	FLAT:teeobject_doc
	DQ	FLAT:tee_traverse
	DQ	FLAT:tee_clear
	DQ	0000000000000000H
	DQ	0000000000000070H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:tee_next
	DQ	FLAT:tee_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:tee_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
tee_doc	DB	'tee(iterable, n=2) --> tuple of n independent iterators.'
	DB	00H
	ORG $+7
cycle_methods DQ FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:cycle_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	FLAT:??_C@_0N@MOOGCAMH@__setstate__?$AA@
	DQ	FLAT:cycle_setstate
	DD	08H
	ORG $+4
	DQ	FLAT:setstate_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
cycle_doc DB	'cycle(iterable) --> cycle object', 0aH, 0aH, 'Return ele'
	DB	'ments from the iterable until it is exhausted.', 0aH, 'Then r'
	DB	'epeat the sequence indefinitely.', 00H
	ORG $+14
cycle_type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BA@GAHIILDM@itertools?4cycle?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:cycle_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:cycle_doc
	DQ	FLAT:cycle_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:cycle_next
	DQ	FLAT:cycle_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:cycle_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
dropwhile_methods DQ FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:dropwhile_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	FLAT:??_C@_0N@MOOGCAMH@__setstate__?$AA@
	DQ	FLAT:dropwhile_setstate
	DD	08H
	ORG $+4
	DQ	FLAT:setstate_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
dropwhile_doc DB 'dropwhile(predicate, iterable) --> dropwhile object', 0aH
	DB	0aH, 'Drop items from the iterable while predicate(item) is tr'
	DB	'ue.', 0aH, 'Afterwards, return every element until the iterab'
	DB	'le is exhausted.', 00H
	ORG $+13
dropwhile_type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BE@JCKEMNLM@itertools?4dropwhile?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:dropwhile_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:dropwhile_doc
	DQ	FLAT:dropwhile_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:dropwhile_next
	DQ	FLAT:dropwhile_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:dropwhile_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
takewhile_reduce_methods DQ FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:takewhile_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	FLAT:??_C@_0N@MOOGCAMH@__setstate__?$AA@
	DQ	FLAT:takewhile_reduce_setstate
	DD	08H
	ORG $+4
	DQ	FLAT:setstate_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
takewhile_doc DB 'takewhile(predicate, iterable) --> takewhile object', 0aH
	DB	0aH, 'Return successive entries from an iterable as long as th'
	DB	'e ', 0aH, 'predicate evaluates to true for each entry.', 00H
	ORG $+4
takewhile_type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BE@JBOLIPHD@itertools?4takewhile?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:takewhile_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:takewhile_doc
	DQ	FLAT:takewhile_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:takewhile_next
	DQ	FLAT:takewhile_reduce_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:takewhile_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
islice_methods DQ FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:islice_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	FLAT:??_C@_0N@MOOGCAMH@__setstate__?$AA@
	DQ	FLAT:islice_setstate
	DD	08H
	ORG $+4
	DQ	FLAT:setstate_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
islice_doc DB	'islice(iterable, stop) --> islice object', 0aH, 'islice('
	DB	'iterable, start, stop[, step]) --> islice object', 0aH, 0aH, 'R'
	DB	'eturn an iterator whose next() method returns selected values'
	DB	' from an', 0aH, 'iterable.  If start is specified, will skip '
	DB	'all preceding elements;', 0aH, 'otherwise, start defaults to '
	DB	'zero.  Step defaults to one.  If', 0aH, 'specified as another'
	DB	' value, step determines how many values are ', 0aH, 'skipped '
	DB	'between successive calls.  Works like a slice() on a list', 0aH
	DB	'but returns an iterator.', 00H
	ORG $+9
islice_type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BB@IDGNPMJH@itertools?4islice?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:islice_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:islice_doc
	DQ	FLAT:islice_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:islice_next
	DQ	FLAT:islice_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:islice_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
starmap_methods DQ FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:starmap_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
starmap_doc DB	'starmap(function, sequence) --> starmap object', 0aH, 0aH
	DB	'Return an iterator whose values are returned from the functio'
	DB	'n evaluated', 0aH, 'with a argument tuple taken from the give'
	DB	'n sequence.', 00H
	ORG $+2
starmap_type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BC@CFHDGLCC@itertools?4starmap?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:starmap_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:starmap_doc
	DQ	FLAT:starmap_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:starmap_next
	DQ	FLAT:starmap_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:starmap_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
chain_doc DB	'chain(*iterables) --> chain object', 0aH, 0aH, 'Return a'
	DB	' chain object whose .__next__() method returns elements from '
	DB	'the', 0aH, 'first iterable until it is exhausted, then elemen'
	DB	'ts from the next', 0aH, 'iterable, until all of the iterables'
	DB	' are exhausted.', 00H
	ORG $+13
chain_from_iterable_doc DB 'chain.from_iterable(iterable) --> chain objec'
	DB	't', 0aH, 0aH, 'Alternate chain() contructor taking a single i'
	DB	'terable argument', 0aH, 'that evaluates lazily.', 00H
	ORG $+10
chain_methods DQ FLAT:??_C@_0O@CCOONFCF@from_iterable?$AA@
	DQ	FLAT:chain_new_from_iterable
	DD	018H
	ORG $+4
	DQ	FLAT:chain_from_iterable_doc
	DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:chain_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	FLAT:??_C@_0N@MOOGCAMH@__setstate__?$AA@
	DQ	FLAT:chain_setstate
	DD	08H
	ORG $+4
	DQ	FLAT:setstate_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
chain_type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BA@HCMOOGKF@itertools?4chain?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:chain_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:chain_doc
	DQ	FLAT:chain_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:chain_next
	DQ	FLAT:chain_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:chain_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
product_methods DQ FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:product_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	FLAT:??_C@_0N@MOOGCAMH@__setstate__?$AA@
	DQ	FLAT:product_setstate
	DD	08H
	ORG $+4
	DQ	FLAT:setstate_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
product_doc DB	'product(*iterables, repeat=1) --> product object', 0aH, 0aH
	DB	'Cartesian product of input iterables.  Equivalent to nested f'
	DB	'or-loops.', 0aH, 0aH, 'For example, product(A, B) returns the'
	DB	' same as:  ((x,y) for x in A for y in B).', 0aH, 'The leftmos'
	DB	't iterators are in the outermost for-loop, so the output tupl'
	DB	'es', 0aH, 'cycle in a manner similar to an odometer (with the'
	DB	' rightmost element changing', 0aH, 'on every iteration).', 0aH
	DB	0aH, 'To compute the product of an iterable with itself, speci'
	DB	'fy the number', 0aH, 'of repetitions with the optional repeat'
	DB	' keyword argument. For example,', 0aH, 'product(A, repeat=4) '
	DB	'means the same as product(A, A, A, A).', 0aH, 0aH, 'product('''
	DB	'ab'', range(3)) --> (''a'',0) (''a'',1) (''a'',2) (''b'',0) ('
	DB	'''b'',1) (''b'',2)', 0aH, 'product((0,1), (0,1), (0,1)) --> ('
	DB	'0,0,0) (0,0,1) (0,1,0) (0,1,1) (1,0,0) ...', 00H
	ORG $+4
product_type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BC@OPMDDELD@itertools?4product?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:product_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:product_doc
	DQ	FLAT:product_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:product_next
	DQ	FLAT:product_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:product_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
?kwargs@?1??combinations_new@@9@9 DQ FLAT:??_C@_08DCHCEAJP@iterable?$AA@ ; `combinations_new'::`2'::kwargs
	DQ	FLAT:??_C@_01KDCPPGHE@r?$AA@
	DQ	0000000000000000H
	ORG $+8
combinations_methods DQ FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:combinations_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	FLAT:??_C@_0N@MOOGCAMH@__setstate__?$AA@
	DQ	FLAT:combinations_setstate
	DD	08H
	ORG $+4
	DQ	FLAT:setstate_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
combinations_doc DB 'combinations(iterable, r) --> combinations object', 0aH
	DB	0aH, 'Return successive r-length combinations of elements in t'
	DB	'he iterable.', 0aH, 0aH, 'combinations(range(4), 3) --> (0,1,'
	DB	'2), (0,1,3), (0,2,3), (1,2,3)', 00H
	ORG $+6
combinations_type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BH@GJLBFDPE@itertools?4combinations?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:combinations_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:combinations_doc
	DQ	FLAT:combinations_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:combinations_next
	DQ	FLAT:combinations_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:combinations_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
?kwargs@?1??cwr_new@@9@9 DQ FLAT:??_C@_08DCHCEAJP@iterable?$AA@ ; `cwr_new'::`2'::kwargs
	DQ	FLAT:??_C@_01KDCPPGHE@r?$AA@
	DQ	0000000000000000H
	ORG $+8
cwr_methods DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:cwr_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	FLAT:??_C@_0N@MOOGCAMH@__setstate__?$AA@
	DQ	FLAT:cwr_setstate
	DD	08H
	ORG $+4
	DQ	FLAT:setstate_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
cwr_doc	DB	'combinations_with_replacement(iterable, r) --> combinati'
	DB	'ons_with_replacement object', 0aH, 0aH, 'Return successive r-'
	DB	'length combinations of elements in the iterable', 0aH, 'allow'
	DB	'ing individual elements to have successive repeats.', 0aH, 'c'
	DB	'ombinations_with_replacement(''ABC'', 2) --> AA AB AC BB BC C'
	DB	'C', 00H
cwr_type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0CI@LFGIIFFE@itertools?4combinations_with_repl@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:cwr_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:cwr_doc
	DQ	FLAT:cwr_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:cwr_next
	DQ	FLAT:cwr_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:cwr_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
?kwargs@?1??permutations_new@@9@9 DQ FLAT:??_C@_08DCHCEAJP@iterable?$AA@ ; `permutations_new'::`2'::kwargs
	DQ	FLAT:??_C@_01KDCPPGHE@r?$AA@
	DQ	0000000000000000H
	ORG $+8
permuations_methods DQ FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:permutations_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	FLAT:??_C@_0N@MOOGCAMH@__setstate__?$AA@
	DQ	FLAT:permutations_setstate
	DD	08H
	ORG $+4
	DQ	FLAT:setstate_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
permutations_doc DB 'permutations(iterable[, r]) --> permutations object', 0aH
	DB	0aH, 'Return successive r-length permutations of elements in t'
	DB	'he iterable.', 0aH, 0aH, 'permutations(range(3), 2) --> (0,1)'
	DB	', (0,2), (1,0), (1,2), (2,0), (2,1)', 00H
	ORG $+14
permutations_type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BH@OBMBIGIH@itertools?4permutations?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:permutations_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:permutations_doc
	DQ	FLAT:permutations_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:permutations_next
	DQ	FLAT:permuations_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:permutations_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
?kwargs@?1??accumulate_new@@9@9 DQ FLAT:??_C@_08DCHCEAJP@iterable?$AA@ ; `accumulate_new'::`2'::kwargs
	DQ	FLAT:??_C@_04HPNHAEOP@func?$AA@
	DQ	0000000000000000H
	ORG $+8
accumulate_methods DQ FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:accumulate_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	FLAT:??_C@_0N@MOOGCAMH@__setstate__?$AA@
	DQ	FLAT:accumulate_setstate
	DD	08H
	ORG $+4
	DQ	FLAT:setstate_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
accumulate_doc DB 'accumulate(iterable[, func]) --> accumulate object', 0aH
	DB	0aH, 'Return series of accumulated sums (or other binary funct'
	DB	'ion results).', 00H
	ORG $+6
accumulate_type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BF@JGKIDDED@itertools?4accumulate?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:accumulate_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:accumulate_doc
	DQ	FLAT:accumulate_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:accumulate_next
	DQ	FLAT:accumulate_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:accumulate_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
?kwargs@?1??compress_new@@9@9 DQ FLAT:??_C@_04PJOLNDGD@data?$AA@ ; `compress_new'::`2'::kwargs
	DQ	FLAT:??_C@_09PLCFPBOK@selectors?$AA@
	DQ	0000000000000000H
	ORG $+8
compress_methods DQ FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:compress_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
compress_doc DB	'compress(data, selectors) --> iterator over selected dat'
	DB	'a', 0aH, 0aH, 'Return data elements corresponding to true sel'
	DB	'ector elements.', 0aH, 'Forms a shorter iterator from selecte'
	DB	'd data elements using the', 0aH, 'selectors to choose the dat'
	DB	'a elements.', 00H
	ORG $+1
compress_type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BD@LJLKJFJE@itertools?4compress?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:compress_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:compress_doc
	DQ	FLAT:compress_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:compress_next
	DQ	FLAT:compress_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:compress_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
filterfalse_methods DQ FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:filterfalse_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
filterfalse_doc DB 'filterfalse(function or None, sequence) --> filterfal'
	DB	'se object', 0aH, 0aH, 'Return those items of sequence for whi'
	DB	'ch function(item) is false.', 0aH, 'If function is None, retu'
	DB	'rn the items that are false.', 00H
	ORG $+8
filterfalse_type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BG@LNFBHPNB@itertools?4filterfalse?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:filterfalse_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:filterfalse_doc
	DQ	FLAT:filterfalse_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:filterfalse_next
	DQ	FLAT:filterfalse_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:filterfalse_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
?kwlist@?1??count_new@@9@9 DQ FLAT:??_C@_05FAGFPHJG@start?$AA@ ; `count_new'::`2'::kwlist
	DQ	FLAT:??_C@_04CNBNFAL@step?$AA@
	DQ	0000000000000000H
	ORG $+8
count_methods DQ FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:count_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
count_doc DB	'count(start=0, step=1) --> count object', 0aH, 0aH, 'Ret'
	DB	'urn a count object whose .__next__() method returns consecuti'
	DB	've values.', 0aH, 'Equivalent to:', 0aH, 0aH, '    def count('
	DB	'firstval=0, step=1):', 0aH, '        x = firstval', 0aH, '   '
	DB	'     while 1:', 0aH, '            yield x', 0aH, '           '
	DB	' x += step', 0aH, 00H
	ORG $+8
count_type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BA@KKPHBGCD@itertools?4count?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:count_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:count_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:count_doc
	DQ	FLAT:count_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:count_next
	DQ	FLAT:count_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:count_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
?kwargs@?1??repeat_new@@9@9 DQ FLAT:??_C@_06IEOJBDIK@object?$AA@ ; `repeat_new'::`2'::kwargs
	DQ	FLAT:??_C@_05MJOOAIJH@times?$AA@
	DQ	0000000000000000H
length_hint_doc DB 'Private method returning an estimate of len(list(it))'
	DB	'.', 00H
	ORG $+1
repeat_methods DQ FLAT:??_C@_0BA@BJLPBKGK@__length_hint__?$AA@
	DQ	FLAT:repeat_len
	DD	04H
	ORG $+4
	DQ	FLAT:length_hint_doc
	DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:repeat_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
repeat_doc DB	'repeat(object [,times]) -> create an iterator which retu'
	DB	'rns the object', 0aH, 'for the specified number of times.  If'
	DB	' not specified, returns the object', 0aH, 'endlessly.', 00H
	ORG $+5
repeat_type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BB@IMKAOHGA@itertools?4repeat?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:repeat_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:repeat_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:repeat_doc
	DQ	FLAT:repeat_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:repeat_next
	DQ	FLAT:repeat_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:repeat_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
zip_longest_methods DQ FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:zip_longest_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	FLAT:??_C@_0N@MOOGCAMH@__setstate__?$AA@
	DQ	FLAT:zip_longest_setstate
	DD	08H
	ORG $+4
	DQ	FLAT:setstate_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
zip_longest_doc DB 'zip_longest(iter1 [,iter2 [...]], [fillvalue=None]) -'
	DB	'-> zip_longest object', 0aH, 0aH, 'Return an zip_longest obje'
	DB	'ct whose .__next__() method returns a tuple where', 0aH, 'the'
	DB	' i-th element comes from the i-th iterable argument.  The .__'
	DB	'next__()', 0aH, 'method continues until the longest iterable '
	DB	'in the argument sequence', 0aH, 'is exhausted and then it rai'
	DB	'ses StopIteration.  When the shorter iterables', 0aH, 'are ex'
	DB	'hausted, the fillvalue is substituted in their place.  The fi'
	DB	'llvalue', 0aH, 'defaults to None or can be specified by a key'
	DB	'word argument.', 0aH, 00H
	ORG $+7
ziplongest_type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BG@NNPBFPMG@itertools?4zip_longest?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:zip_longest_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:zip_longest_doc
	DQ	FLAT:zip_longest_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:zip_longest_next
	DQ	FLAT:zip_longest_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:zip_longest_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
module_doc DB	'Functional tools for creating and using iterators.', 0aH
	DB	0aH, 'Infinite iterators:', 0aH, 'count(start=0, step=1) --> s'
	DB	'tart, start+step, start+2*step, ...', 0aH, 'cycle(p) --> p0, '
	DB	'p1, ... plast, p0, p1, ...', 0aH, 'repeat(elem [,n]) --> elem'
	DB	', elem, elem, ... endlessly or up to n times', 0aH, 0aH, 'Ite'
	DB	'rators terminating on the shortest input sequence:', 0aH, 'ac'
	DB	'cumulate(p[, func]) --> p0, p0+p1, p0+p1+p2', 0aH, 'chain(p, '
	DB	'q, ...) --> p0, p1, ... plast, q0, q1, ... ', 0aH, 'chain.fro'
	DB	'm_iterable([p, q, ...]) --> p0, p1, ... plast, q0, q1, ... ', 0aH
	DB	'compress(data, selectors) --> (d[0] if s[0]), (d[1] if s[1]),'
	DB	' ...', 0aH, 'dropwhile(pred, seq) --> seq[n], seq[n+1], start'
	DB	'ing when pred fails', 0aH, 'groupby(iterable[, keyfunc]) --> '
	DB	'sub-iterators grouped by value of keyfunc(v)', 0aH, 'filterfa'
	DB	'lse(pred, seq) --> elements of seq where pred(elem) is False', 0aH
	DB	'islice(seq, [start,] stop [, step]) --> elements from', 0aH, ' '
	DB	'      seq[start:stop:step]', 0aH, 'starmap(fun, seq) --> fun('
	DB	'*seq[0]), fun(*seq[1]), ...', 0aH, 'tee(it, n=2) --> (it1, it'
	DB	'2 , ... itn) splits one iterator into n', 0aH, 'takewhile(pre'
	DB	'd, seq) --> seq[0], seq[1], until pred fails', 0aH, 'zip_long'
	DB	'est(p, q, ...) --> (p[0], q[0]), (p[1], q[1]), ... ', 0aH, 0aH
	DB	'Combinatoric generators:', 0aH, 'product(p, q, ... [repeat=1]'
	DB	') --> cartesian product', 0aH, 'permutations(p[, r])', 0aH, 'c'
	DB	'ombinations(p, r)', 0aH, 'combinations_with_replacement(p, r)'
	DB	0aH, 00H
	ORG $+3
module_methods DQ FLAT:??_C@_03GMHAIBAB@tee?$AA@
	DQ	FLAT:tee
	DD	01H
	ORG $+4
	DQ	FLAT:tee_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
itertoolsmodule DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_09NCHPBFFI@itertools?$AA@
	DQ	FLAT:module_doc
	DQ	ffffffffffffffffH
	DQ	FLAT:module_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
;	COMDAT ??_C@_03ICHNJLJF@key?$AA@
CONST	SEGMENT
??_C@_03ICHNJLJF@key?$AA@ DB 'key', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08DCHCEAJP@iterable?$AA@
CONST	SEGMENT
??_C@_08DCHCEAJP@iterable?$AA@ DB 'iterable', 00H	; `string'
CONST	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@FBJDAALJ@O?$HMO?3groupby?$AA@		; `string'
EXTRN	PyObject_GetIter:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$groupby_new DD imagerel groupby_new
	DD	imagerel groupby_new+101
	DD	imagerel $unwind$groupby_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$groupby_new DD imagerel groupby_new+101
	DD	imagerel groupby_new+218
	DD	imagerel $chain$0$groupby_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$groupby_new DD imagerel groupby_new+218
	DD	imagerel groupby_new+243
	DD	imagerel $chain$1$groupby_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$groupby_new DD 021H
	DD	imagerel groupby_new
	DD	imagerel groupby_new+101
	DD	imagerel $unwind$groupby_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$groupby_new DD 020521H
	DD	0a7405H
	DD	imagerel groupby_new
	DD	imagerel groupby_new+101
	DD	imagerel $unwind$groupby_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$groupby_new DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT ??_C@_0M@FBJDAALJ@O?$HMO?3groupby?$AA@
CONST	SEGMENT
??_C@_0M@FBJDAALJ@O?$HMO?3groupby?$AA@ DB 'O|O:groupby', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
CONST	ENDS
;	COMDAT groupby_new
_TEXT	SEGMENT
it$ = 48
type$ = 80
args$ = 88
kwds$ = 96
keyfunc$ = 104
groupby_new PROC					; COMDAT

; 28   : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00006	48 8b d9	 mov	 rbx, rcx
  00009	49 8b c0	 mov	 rax, r8
  0000c	4c 8b d2	 mov	 r10, rdx

; 29   :     static char *kwargs[] = {"iterable", "key", NULL};
; 30   :     groupbyobject *gbo;
; 31   :     PyObject *it, *keyfunc = Py_None;

  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct

; 32   : 
; 33   :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|O:groupby", kwargs,
; 34   :                                      &it, &keyfunc))

  00016	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwargs@?1??groupby_new@@9@9
  0001d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@FBJDAALJ@O?$HMO?3groupby?$AA@
  00024	48 89 4c 24 68	 mov	 QWORD PTR keyfunc$[rsp], rcx
  00029	48 8d 4c 24 68	 lea	 rcx, QWORD PTR keyfunc$[rsp]
  0002e	48 8b d0	 mov	 rdx, rax
  00031	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00036	48 8d 4c 24 30	 lea	 rcx, QWORD PTR it$[rsp]
  0003b	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00040	49 8b ca	 mov	 rcx, r10
  00043	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00048	85 c0		 test	 eax, eax

; 35   :         return NULL;

  0004a	0f 84 92 00 00
	00		 je	 $LN10@groupby_ne

; 36   : 
; 37   :     gbo = (groupbyobject *)type->tp_alloc(type, 0);

  00050	33 d2		 xor	 edx, edx
  00052	48 8b cb	 mov	 rcx, rbx
  00055	ff 93 88 01 00
	00		 call	 QWORD PTR [rbx+392]
  0005b	48 8b d8	 mov	 rbx, rax

; 38   :     if (gbo == NULL)

  0005e	48 85 c0	 test	 rax, rax

; 39   :         return NULL;

  00061	74 7f		 je	 SHORT $LN10@groupby_ne

; 40   :     gbo->tgtkey = NULL;

  00063	33 c0		 xor	 eax, eax
  00065	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  0006a	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax

; 41   :     gbo->currkey = NULL;

  0006e	48 89 43 78	 mov	 QWORD PTR [rbx+120], rax

; 42   :     gbo->currvalue = NULL;

  00072	48 89 83 80 00
	00 00		 mov	 QWORD PTR [rbx+128], rax

; 43   :     gbo->keyfunc = keyfunc;

  00079	48 8b 44 24 68	 mov	 rax, QWORD PTR keyfunc$[rsp]
  0007e	48 89 43 68	 mov	 QWORD PTR [rbx+104], rax

; 44   :     Py_INCREF(keyfunc);

  00082	48 8b 7c 24 68	 mov	 rdi, QWORD PTR keyfunc$[rsp]
  00087	e8 00 00 00 00	 call	 _Py_PXCTX
  0008c	85 c0		 test	 eax, eax
  0008e	75 32		 jne	 SHORT $LN7@groupby_ne
  00090	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00097	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0009e	4c 8b cf	 mov	 r9, rdi
  000a1	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000a7	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000af	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b4	85 c0		 test	 eax, eax
  000b6	75 06		 jne	 SHORT $LN6@groupby_ne
  000b8	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  000bc	74 04		 je	 SHORT $LN7@groupby_ne
$LN6@groupby_ne:
  000be	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN7@groupby_ne:

; 45   :     gbo->it = PyObject_GetIter(it);

  000c2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR it$[rsp]
  000c7	e8 00 00 00 00	 call	 PyObject_GetIter
  000cc	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]
  000d1	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax

; 46   :     if (gbo->it == NULL) {

  000d5	48 85 c0	 test	 rax, rax
  000d8	75 10		 jne	 SHORT $LN1@groupby_ne

; 47   :         Py_DECREF(gbo);

  000da	48 8b cb	 mov	 rcx, rbx
  000dd	e8 00 00 00 00	 call	 _Py_DecRef
$LN10@groupby_ne:

; 48   :         return NULL;

  000e2	33 c0		 xor	 eax, eax

; 51   : }

  000e4	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000e8	5b		 pop	 rbx
  000e9	c3		 ret	 0
$LN1@groupby_ne:

; 49   :     }
; 50   :     return (PyObject *)gbo;

  000ea	48 8b c3	 mov	 rax, rbx

; 51   : }

  000ed	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000f1	5b		 pop	 rbx
  000f2	c3		 ret	 0
groupby_new ENDP
_TEXT	ENDS
EXTRN	PyObject_GC_UnTrack:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$groupby_dealloc DD imagerel groupby_dealloc
	DD	imagerel groupby_dealloc+595
	DD	imagerel $unwind$groupby_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$groupby_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT groupby_dealloc
_TEXT	SEGMENT
gbo$ = 64
groupby_dealloc PROC					; COMDAT

; 55   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 56   :     PyObject_GC_UnTrack(gbo);

  0000d	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 57   :     Py_XDECREF(gbo->it);

  00012	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  00016	48 85 db	 test	 rbx, rbx
  00019	74 65		 je	 SHORT $LN19@groupby_de
  0001b	e8 00 00 00 00	 call	 _Py_PXCTX
  00020	85 c0		 test	 eax, eax
  00022	75 5c		 jne	 SHORT $LN19@groupby_de
  00024	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00028	a8 20		 test	 al, 32			; 00000020H
  0002a	75 4c		 jne	 SHORT $LN27@groupby_de
  0002c	84 c0		 test	 al, al
  0002e	78 48		 js	 SHORT $LN27@groupby_de
  00030	a8 02		 test	 al, 2
  00032	75 4c		 jne	 SHORT $LN19@groupby_de
  00034	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00038	75 46		 jne	 SHORT $LN19@groupby_de
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00048	4c 8b cb	 mov	 r9, rbx
  0004b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00051	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00059	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005e	48 8b cb	 mov	 rcx, rbx
  00061	85 c0		 test	 eax, eax
  00063	74 07		 je	 SHORT $LN32@groupby_de
  00065	e8 00 00 00 00	 call	 _Px_Dealloc
  0006a	eb 14		 jmp	 SHORT $LN19@groupby_de
$LN32@groupby_de:
  0006c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00070	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00076	eb 08		 jmp	 SHORT $LN19@groupby_de
$LN27@groupby_de:
  00078	48 8b cb	 mov	 rcx, rbx
  0007b	e8 00 00 00 00	 call	 Px_DecRef
$LN19@groupby_de:

; 58   :     Py_XDECREF(gbo->keyfunc);

  00080	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  00084	48 85 db	 test	 rbx, rbx
  00087	74 65		 je	 SHORT $LN15@groupby_de
  00089	e8 00 00 00 00	 call	 _Py_PXCTX
  0008e	85 c0		 test	 eax, eax
  00090	75 5c		 jne	 SHORT $LN15@groupby_de
  00092	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00096	a8 20		 test	 al, 32			; 00000020H
  00098	75 4c		 jne	 SHORT $LN38@groupby_de
  0009a	84 c0		 test	 al, al
  0009c	78 48		 js	 SHORT $LN38@groupby_de
  0009e	a8 02		 test	 al, 2
  000a0	75 4c		 jne	 SHORT $LN15@groupby_de
  000a2	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000a6	75 46		 jne	 SHORT $LN15@groupby_de
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000b6	4c 8b cb	 mov	 r9, rbx
  000b9	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000bf	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cc	48 8b cb	 mov	 rcx, rbx
  000cf	85 c0		 test	 eax, eax
  000d1	74 07		 je	 SHORT $LN43@groupby_de
  000d3	e8 00 00 00 00	 call	 _Px_Dealloc
  000d8	eb 14		 jmp	 SHORT $LN15@groupby_de
$LN43@groupby_de:
  000da	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000de	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000e4	eb 08		 jmp	 SHORT $LN15@groupby_de
$LN38@groupby_de:
  000e6	48 8b cb	 mov	 rcx, rbx
  000e9	e8 00 00 00 00	 call	 Px_DecRef
$LN15@groupby_de:

; 59   :     Py_XDECREF(gbo->tgtkey);

  000ee	48 8b 5f 70	 mov	 rbx, QWORD PTR [rdi+112]
  000f2	48 85 db	 test	 rbx, rbx
  000f5	74 65		 je	 SHORT $LN11@groupby_de
  000f7	e8 00 00 00 00	 call	 _Py_PXCTX
  000fc	85 c0		 test	 eax, eax
  000fe	75 5c		 jne	 SHORT $LN11@groupby_de
  00100	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00104	a8 20		 test	 al, 32			; 00000020H
  00106	75 4c		 jne	 SHORT $LN49@groupby_de
  00108	84 c0		 test	 al, al
  0010a	78 48		 js	 SHORT $LN49@groupby_de
  0010c	a8 02		 test	 al, 2
  0010e	75 4c		 jne	 SHORT $LN11@groupby_de
  00110	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00114	75 46		 jne	 SHORT $LN11@groupby_de
  00116	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0011d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00124	4c 8b cb	 mov	 r9, rbx
  00127	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0012d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00135	e8 00 00 00 00	 call	 _PyParallel_Guard
  0013a	48 8b cb	 mov	 rcx, rbx
  0013d	85 c0		 test	 eax, eax
  0013f	74 07		 je	 SHORT $LN54@groupby_de
  00141	e8 00 00 00 00	 call	 _Px_Dealloc
  00146	eb 14		 jmp	 SHORT $LN11@groupby_de
$LN54@groupby_de:
  00148	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0014c	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00152	eb 08		 jmp	 SHORT $LN11@groupby_de
$LN49@groupby_de:
  00154	48 8b cb	 mov	 rcx, rbx
  00157	e8 00 00 00 00	 call	 Px_DecRef
$LN11@groupby_de:

; 60   :     Py_XDECREF(gbo->currkey);

  0015c	48 8b 5f 78	 mov	 rbx, QWORD PTR [rdi+120]
  00160	48 85 db	 test	 rbx, rbx
  00163	74 65		 je	 SHORT $LN7@groupby_de
  00165	e8 00 00 00 00	 call	 _Py_PXCTX
  0016a	85 c0		 test	 eax, eax
  0016c	75 5c		 jne	 SHORT $LN7@groupby_de
  0016e	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00172	a8 20		 test	 al, 32			; 00000020H
  00174	75 4c		 jne	 SHORT $LN60@groupby_de
  00176	84 c0		 test	 al, al
  00178	78 48		 js	 SHORT $LN60@groupby_de
  0017a	a8 02		 test	 al, 2
  0017c	75 4c		 jne	 SHORT $LN7@groupby_de
  0017e	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00182	75 46		 jne	 SHORT $LN7@groupby_de
  00184	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0018b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00192	4c 8b cb	 mov	 r9, rbx
  00195	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0019b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001a3	e8 00 00 00 00	 call	 _PyParallel_Guard
  001a8	48 8b cb	 mov	 rcx, rbx
  001ab	85 c0		 test	 eax, eax
  001ad	74 07		 je	 SHORT $LN65@groupby_de
  001af	e8 00 00 00 00	 call	 _Px_Dealloc
  001b4	eb 14		 jmp	 SHORT $LN7@groupby_de
$LN65@groupby_de:
  001b6	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001ba	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001c0	eb 08		 jmp	 SHORT $LN7@groupby_de
$LN60@groupby_de:
  001c2	48 8b cb	 mov	 rcx, rbx
  001c5	e8 00 00 00 00	 call	 Px_DecRef
$LN7@groupby_de:

; 61   :     Py_XDECREF(gbo->currvalue);

  001ca	48 8b 9f 80 00
	00 00		 mov	 rbx, QWORD PTR [rdi+128]
  001d1	48 85 db	 test	 rbx, rbx
  001d4	74 65		 je	 SHORT $LN3@groupby_de
  001d6	e8 00 00 00 00	 call	 _Py_PXCTX
  001db	85 c0		 test	 eax, eax
  001dd	75 5c		 jne	 SHORT $LN3@groupby_de
  001df	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  001e3	a8 20		 test	 al, 32			; 00000020H
  001e5	75 4c		 jne	 SHORT $LN71@groupby_de
  001e7	84 c0		 test	 al, al
  001e9	78 48		 js	 SHORT $LN71@groupby_de
  001eb	a8 02		 test	 al, 2
  001ed	75 4c		 jne	 SHORT $LN3@groupby_de
  001ef	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  001f3	75 46		 jne	 SHORT $LN3@groupby_de
  001f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00203	4c 8b cb	 mov	 r9, rbx
  00206	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0020c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00214	e8 00 00 00 00	 call	 _PyParallel_Guard
  00219	48 8b cb	 mov	 rcx, rbx
  0021c	85 c0		 test	 eax, eax
  0021e	74 07		 je	 SHORT $LN76@groupby_de
  00220	e8 00 00 00 00	 call	 _Px_Dealloc
  00225	eb 14		 jmp	 SHORT $LN3@groupby_de
$LN76@groupby_de:
  00227	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0022b	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00231	eb 08		 jmp	 SHORT $LN3@groupby_de
$LN71@groupby_de:
  00233	48 8b cb	 mov	 rcx, rbx
  00236	e8 00 00 00 00	 call	 Px_DecRef
$LN3@groupby_de:

; 62   :     Py_TYPE(gbo)->tp_free(gbo);

  0023b	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  0023f	48 8b cf	 mov	 rcx, rdi

; 63   : }

  00242	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00247	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0024b	5f		 pop	 rdi
  0024c	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
groupby_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@JLGPKDPD@groupby_traverse?$AA@	; `string'
PUBLIC	??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@ ; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$groupby_traverse DD imagerel groupby_traverse
	DD	imagerel groupby_traverse+318
	DD	imagerel $unwind$groupby_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$groupby_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BB@JLGPKDPD@groupby_traverse?$AA@
CONST	SEGMENT
??_C@_0BB@JLGPKDPD@groupby_traverse?$AA@ DB 'groupby_traverse', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
CONST	SEGMENT
??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@ DB '..\Modules\'
	DB	'itertoolsmodule.c', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT groupby_traverse
_TEXT	SEGMENT
gbo$ = 48
visit$ = 56
arg$ = 64
groupby_traverse PROC					; COMDAT

; 67   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 68   :     Py_VISIT(gbo->it);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1a		 je	 SHORT $LN27@groupby_tr
  00021	45 33 c9	 xor	 r9d, r9d
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@JLGPKDPD@groupby_traverse?$AA@
  00032	45 8d 41 44	 lea	 r8d, QWORD PTR [r9+68]
  00036	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN27@groupby_tr:
  0003b	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  0003f	48 85 c9	 test	 rcx, rcx
  00042	74 0d		 je	 SHORT $LN29@groupby_tr
  00044	48 8b d7	 mov	 rdx, rdi
  00047	ff d6		 call	 rsi
  00049	85 c0		 test	 eax, eax
  0004b	0f 85 dd 00 00
	00		 jne	 $LN31@groupby_tr
$LN29@groupby_tr:

; 69   :     Py_VISIT(gbo->keyfunc);

  00051	e8 00 00 00 00	 call	 _Py_PXCTX
  00056	85 c0		 test	 eax, eax
  00058	74 1a		 je	 SHORT $LN21@groupby_tr
  0005a	45 33 c9	 xor	 r9d, r9d
  0005d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  00064	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@JLGPKDPD@groupby_traverse?$AA@
  0006b	45 8d 41 45	 lea	 r8d, QWORD PTR [r9+69]
  0006f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN21@groupby_tr:
  00074	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00078	48 85 c9	 test	 rcx, rcx
  0007b	74 0d		 je	 SHORT $LN23@groupby_tr
  0007d	48 8b d7	 mov	 rdx, rdi
  00080	ff d6		 call	 rsi
  00082	85 c0		 test	 eax, eax
  00084	0f 85 a4 00 00
	00		 jne	 $LN31@groupby_tr
$LN23@groupby_tr:

; 70   :     Py_VISIT(gbo->tgtkey);

  0008a	e8 00 00 00 00	 call	 _Py_PXCTX
  0008f	85 c0		 test	 eax, eax
  00091	74 1a		 je	 SHORT $LN15@groupby_tr
  00093	45 33 c9	 xor	 r9d, r9d
  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  0009d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@JLGPKDPD@groupby_traverse?$AA@
  000a4	45 8d 41 46	 lea	 r8d, QWORD PTR [r9+70]
  000a8	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN15@groupby_tr:
  000ad	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  000b1	48 85 c9	 test	 rcx, rcx
  000b4	74 09		 je	 SHORT $LN17@groupby_tr
  000b6	48 8b d7	 mov	 rdx, rdi
  000b9	ff d6		 call	 rsi
  000bb	85 c0		 test	 eax, eax
  000bd	75 6f		 jne	 SHORT $LN31@groupby_tr
$LN17@groupby_tr:

; 71   :     Py_VISIT(gbo->currkey);

  000bf	e8 00 00 00 00	 call	 _Py_PXCTX
  000c4	85 c0		 test	 eax, eax
  000c6	74 1a		 je	 SHORT $LN9@groupby_tr
  000c8	45 33 c9	 xor	 r9d, r9d
  000cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  000d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@JLGPKDPD@groupby_traverse?$AA@
  000d9	45 8d 41 47	 lea	 r8d, QWORD PTR [r9+71]
  000dd	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@groupby_tr:
  000e2	48 8b 4b 78	 mov	 rcx, QWORD PTR [rbx+120]
  000e6	48 85 c9	 test	 rcx, rcx
  000e9	74 09		 je	 SHORT $LN11@groupby_tr
  000eb	48 8b d7	 mov	 rdx, rdi
  000ee	ff d6		 call	 rsi
  000f0	85 c0		 test	 eax, eax
  000f2	75 3a		 jne	 SHORT $LN31@groupby_tr
$LN11@groupby_tr:

; 72   :     Py_VISIT(gbo->currvalue);

  000f4	e8 00 00 00 00	 call	 _Py_PXCTX
  000f9	85 c0		 test	 eax, eax
  000fb	74 1a		 je	 SHORT $LN3@groupby_tr
  000fd	45 33 c9	 xor	 r9d, r9d
  00100	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  00107	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@JLGPKDPD@groupby_traverse?$AA@
  0010e	45 8d 41 48	 lea	 r8d, QWORD PTR [r9+72]
  00112	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@groupby_tr:
  00117	48 8b 8b 80 00
	00 00		 mov	 rcx, QWORD PTR [rbx+128]
  0011e	48 85 c9	 test	 rcx, rcx
  00121	74 09		 je	 SHORT $LN5@groupby_tr
  00123	48 8b d7	 mov	 rdx, rdi
  00126	ff d6		 call	 rsi
  00128	85 c0		 test	 eax, eax
  0012a	75 02		 jne	 SHORT $LN31@groupby_tr
$LN5@groupby_tr:

; 73   :     return 0;

  0012c	33 c0		 xor	 eax, eax
$LN31@groupby_tr:

; 74   : }

  0012e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00133	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00138	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0013c	5f		 pop	 rdi
  0013d	c3		 ret	 0
groupby_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_05LNHFJPFN@O?$CIOO?$CJ?$AA@		; `string'
PUBLIC	??_C@_0L@OLFKNFHI@O?$CIOO?$CJ?$CIOOO?$CJ?$AA@	; `string'
EXTRN	Py_BuildValue:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$groupby_reduce DD imagerel groupby_reduce
	DD	imagerel groupby_reduce+106
	DD	imagerel $unwind$groupby_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$groupby_reduce DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_05LNHFJPFN@O?$CIOO?$CJ?$AA@
CONST	SEGMENT
??_C@_05LNHFJPFN@O?$CIOO?$CJ?$AA@ DB 'O(OO)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OLFKNFHI@O?$CIOO?$CJ?$CIOOO?$CJ?$AA@
CONST	SEGMENT
??_C@_0L@OLFKNFHI@O?$CIOO?$CJ?$CIOOO?$CJ?$AA@ DB 'O(OO)(OOO)', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT groupby_reduce
_TEXT	SEGMENT
lz$ = 80
groupby_reduce PROC					; COMDAT

; 139  : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 140  :     /* reduce as a 'new' call with an optional 'setstate' if groupby
; 141  :      * has started
; 142  :      */
; 143  :     PyObject *value;
; 144  :     if (lz->tgtkey && lz->currkey && lz->currvalue)

  00004	48 8b 51 70	 mov	 rdx, QWORD PTR [rcx+112]
  00008	48 85 d2	 test	 rdx, rdx
  0000b	74 41		 je	 SHORT $LN2@groupby_re
  0000d	48 8b 41 78	 mov	 rax, QWORD PTR [rcx+120]
  00011	48 85 c0	 test	 rax, rax
  00014	74 38		 je	 SHORT $LN2@groupby_re
  00016	4c 8b 81 80 00
	00 00		 mov	 r8, QWORD PTR [rcx+128]
  0001d	4d 85 c0	 test	 r8, r8
  00020	74 2c		 je	 SHORT $LN2@groupby_re

; 145  :         value = Py_BuildValue("O(OO)(OOO)", Py_TYPE(lz),
; 146  :             lz->it, lz->keyfunc, lz->currkey, lz->currvalue, lz->tgtkey);

  00022	4c 8b 49 68	 mov	 r9, QWORD PTR [rcx+104]
  00026	48 89 54 24 30	 mov	 QWORD PTR [rsp+48], rdx
  0002b	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0002f	4c 89 44 24 28	 mov	 QWORD PTR [rsp+40], r8
  00034	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OLFKNFHI@O?$CIOO?$CJ?$CIOOO?$CJ?$AA@
  0003f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00044	e8 00 00 00 00	 call	 Py_BuildValue

; 150  : 
; 151  :     return value;
; 152  : }

  00049	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0004d	c3		 ret	 0
$LN2@groupby_re:

; 147  :     else
; 148  :         value = Py_BuildValue("O(OO)", Py_TYPE(lz),
; 149  :             lz->it, lz->keyfunc);

  0004e	4c 8b 49 68	 mov	 r9, QWORD PTR [rcx+104]
  00052	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]
  00056	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0005a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LNHFJPFN@O?$CIOO?$CJ?$AA@

; 150  : 
; 151  :     return value;
; 152  : }

  00061	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00065	e9 00 00 00 00	 jmp	 Py_BuildValue
groupby_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@PGDIIEBE@groupby_setstate?$AA@	; `string'
PUBLIC	??_C@_03BBOLPBLP@OOO?$AA@			; `string'
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$groupby_setstate DD imagerel groupby_setstate
	DD	imagerel groupby_setstate+63
	DD	imagerel $unwind$groupby_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$groupby_setstate DD imagerel groupby_setstate+63
	DD	imagerel groupby_setstate+483
	DD	imagerel $chain$0$groupby_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$groupby_setstate DD imagerel groupby_setstate+483
	DD	imagerel groupby_setstate+556
	DD	imagerel $chain$1$groupby_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$groupby_setstate DD 021H
	DD	imagerel groupby_setstate
	DD	imagerel groupby_setstate+63
	DD	imagerel $unwind$groupby_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$groupby_setstate DD 020521H
	DD	0a7405H
	DD	imagerel groupby_setstate
	DD	imagerel groupby_setstate+63
	DD	imagerel $unwind$groupby_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$groupby_setstate DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT ??_C@_0BB@PGDIIEBE@groupby_setstate?$AA@
CONST	SEGMENT
??_C@_0BB@PGDIIEBE@groupby_setstate?$AA@ DB 'groupby_setstate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03BBOLPBLP@OOO?$AA@
CONST	SEGMENT
??_C@_03BBOLPBLP@OOO?$AA@ DB 'OOO', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
CONST	ENDS
;	COMDAT groupby_setstate
_TEXT	SEGMENT
tgtkey$ = 48
lz$ = 80
state$ = 88
currkey$ = 96
currvalue$ = 104
groupby_setstate PROC					; COMDAT

; 158  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00006	48 8b d9	 mov	 rbx, rcx
  00009	48 8b c2	 mov	 rax, rdx

; 159  :     PyObject *currkey, *currvalue, *tgtkey;
; 160  :     if (!PyArg_ParseTuple(state, "OOO", &currkey, &currvalue, &tgtkey))

  0000c	48 8d 4c 24 30	 lea	 rcx, QWORD PTR tgtkey$[rsp]
  00011	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00016	4c 8d 4c 24 68	 lea	 r9, QWORD PTR currvalue$[rsp]
  0001b	4c 8d 44 24 60	 lea	 r8, QWORD PTR currkey$[rsp]
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03BBOLPBLP@OOO?$AA@
  00027	48 8b c8	 mov	 rcx, rax
  0002a	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0002f	85 c0		 test	 eax, eax
  00031	75 08		 jne	 SHORT $LN12@groupby_se

; 161  :         return NULL;

  00033	33 c0		 xor	 eax, eax

; 172  : }

  00035	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00039	5b		 pop	 rbx
  0003a	c3		 ret	 0
$LN12@groupby_se:

; 162  :     Py_CLEAR(lz->currkey);

  0003b	4c 8b 4b 78	 mov	 r9, QWORD PTR [rbx+120]
  0003f	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  00044	4d 85 c9	 test	 r9, r9
  00047	74 36		 je	 SHORT $LN11@groupby_se
  00049	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  00050	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@PGDIIEBE@groupby_setstate?$AA@
  00057	41 b8 a2 00 00
	00		 mov	 r8d, 162		; 000000a2H
  0005d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00065	e8 00 00 00 00	 call	 _PyParallel_Guard
  0006a	85 c0		 test	 eax, eax
  0006c	75 11		 jne	 SHORT $LN11@groupby_se
  0006e	48 8b 4b 78	 mov	 rcx, QWORD PTR [rbx+120]
  00072	48 c7 43 78 00
	00 00 00	 mov	 QWORD PTR [rbx+120], 0
  0007a	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@groupby_se:

; 163  :     lz->currkey = currkey;

  0007f	48 8b 7c 24 60	 mov	 rdi, QWORD PTR currkey$[rsp]
  00084	48 89 7b 78	 mov	 QWORD PTR [rbx+120], rdi

; 164  :     Py_INCREF(lz->currkey);

  00088	e8 00 00 00 00	 call	 _Py_PXCTX
  0008d	85 c0		 test	 eax, eax
  0008f	75 32		 jne	 SHORT $LN8@groupby_se
  00091	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0009f	4c 8b cf	 mov	 r9, rdi
  000a2	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000a8	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000b0	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b5	85 c0		 test	 eax, eax
  000b7	75 06		 jne	 SHORT $LN16@groupby_se
  000b9	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  000bd	74 04		 je	 SHORT $LN8@groupby_se
$LN16@groupby_se:
  000bf	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN8@groupby_se:

; 165  :     Py_CLEAR(lz->currvalue);

  000c3	4c 8b 8b 80 00
	00 00		 mov	 r9, QWORD PTR [rbx+128]
  000ca	4d 85 c9	 test	 r9, r9
  000cd	74 3c		 je	 SHORT $LN7@groupby_se
  000cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  000d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@PGDIIEBE@groupby_setstate?$AA@
  000dd	41 b8 a5 00 00
	00		 mov	 r8d, 165		; 000000a5H
  000e3	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000eb	e8 00 00 00 00	 call	 _PyParallel_Guard
  000f0	85 c0		 test	 eax, eax
  000f2	75 17		 jne	 SHORT $LN7@groupby_se
  000f4	48 8b 8b 80 00
	00 00		 mov	 rcx, QWORD PTR [rbx+128]
  000fb	48 c7 83 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rbx+128], 0
  00106	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@groupby_se:

; 166  :     lz->currvalue = currvalue;

  0010b	48 8b 7c 24 68	 mov	 rdi, QWORD PTR currvalue$[rsp]
  00110	48 89 bb 80 00
	00 00		 mov	 QWORD PTR [rbx+128], rdi

; 167  :     Py_INCREF(lz->currvalue);

  00117	e8 00 00 00 00	 call	 _Py_PXCTX
  0011c	85 c0		 test	 eax, eax
  0011e	75 32		 jne	 SHORT $LN4@groupby_se
  00120	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00127	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0012e	4c 8b cf	 mov	 r9, rdi
  00131	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00137	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0013f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00144	85 c0		 test	 eax, eax
  00146	75 06		 jne	 SHORT $LN20@groupby_se
  00148	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  0014c	74 04		 je	 SHORT $LN4@groupby_se
$LN20@groupby_se:
  0014e	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN4@groupby_se:

; 168  :     Py_CLEAR(lz->tgtkey);

  00152	4c 8b 4b 70	 mov	 r9, QWORD PTR [rbx+112]
  00156	4d 85 c9	 test	 r9, r9
  00159	74 36		 je	 SHORT $LN3@groupby_se
  0015b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  00162	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@PGDIIEBE@groupby_setstate?$AA@
  00169	41 b8 a8 00 00
	00		 mov	 r8d, 168		; 000000a8H
  0016f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00177	e8 00 00 00 00	 call	 _PyParallel_Guard
  0017c	85 c0		 test	 eax, eax
  0017e	75 11		 jne	 SHORT $LN3@groupby_se
  00180	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00184	48 c7 43 70 00
	00 00 00	 mov	 QWORD PTR [rbx+112], 0
  0018c	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@groupby_se:

; 169  :     lz->tgtkey = tgtkey;

  00191	48 8b 7c 24 30	 mov	 rdi, QWORD PTR tgtkey$[rsp]
  00196	48 89 7b 70	 mov	 QWORD PTR [rbx+112], rdi

; 170  :     Py_INCREF(lz->tgtkey);

  0019a	e8 00 00 00 00	 call	 _Py_PXCTX
  0019f	85 c0		 test	 eax, eax
  001a1	75 32		 jne	 SHORT $LN25@groupby_se
  001a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  001b1	4c 8b cf	 mov	 r9, rdi
  001b4	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  001ba	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  001c2	e8 00 00 00 00	 call	 _PyParallel_Guard
  001c7	85 c0		 test	 eax, eax
  001c9	75 06		 jne	 SHORT $LN24@groupby_se
  001cb	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  001cf	74 04		 je	 SHORT $LN25@groupby_se
$LN24@groupby_se:
  001d1	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN25@groupby_se:

; 171  :     Py_RETURN_NONE;

  001d5	e8 00 00 00 00	 call	 _Py_PXCTX
  001da	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]
  001df	85 c0		 test	 eax, eax
  001e1	75 3c		 jne	 SHORT $LN29@groupby_se
  001e3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  001ea	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  001f8	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  001fe	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00206	e8 00 00 00 00	 call	 _PyParallel_Guard
  0020b	85 c0		 test	 eax, eax
  0020d	75 09		 jne	 SHORT $LN28@groupby_se
  0020f	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00216	74 07		 je	 SHORT $LN29@groupby_se
$LN28@groupby_se:
  00218	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN29@groupby_se:
  0021f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 172  : }

  00226	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0022a	5b		 pop	 rbx
  0022b	c3		 ret	 0
groupby_setstate ENDP
_TEXT	ENDS
EXTRN	PyObject_GC_Track:PROC
EXTRN	_PyObject_GC_New:PROC
EXTRN	_PxObject_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_grouper_create DD imagerel _grouper_create
	DD	imagerel _grouper_create+226
	DD	imagerel $unwind$_grouper_create
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_grouper_create DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT _grouper_create
_TEXT	SEGMENT
parent$ = 64
tgtkey$ = 72
_grouper_create PROC					; COMDAT

; 256  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fa	 mov	 rdi, rdx
  00012	48 8b f1	 mov	 rsi, rcx

; 257  :     _grouperobject *igo;
; 258  : 
; 259  :     igo = PyObject_GC_New(_grouperobject, &_grouper_type);

  00015	e8 00 00 00 00	 call	 _Py_PXCTX
  0001a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_grouper_type
  00021	85 c0		 test	 eax, eax
  00023	74 07		 je	 SHORT $LN4@grouper_cr
  00025	e8 00 00 00 00	 call	 _PxObject_New
  0002a	eb 05		 jmp	 SHORT $LN14@grouper_cr
$LN4@grouper_cr:
  0002c	e8 00 00 00 00	 call	 _PyObject_GC_New
$LN14@grouper_cr:
  00031	48 8b d8	 mov	 rbx, rax

; 260  :     if (igo == NULL)

  00034	48 85 c0	 test	 rax, rax
  00037	75 10		 jne	 SHORT $LN1@grouper_cr

; 268  :     return (PyObject *)igo;
; 269  : }

  00039	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0003e	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00043	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00047	5f		 pop	 rdi
  00048	c3		 ret	 0
$LN1@grouper_cr:

; 261  :         return NULL;
; 262  :     igo->parent = (PyObject *)parent;

  00049	48 89 73 60	 mov	 QWORD PTR [rbx+96], rsi

; 263  :     Py_INCREF(parent);

  0004d	e8 00 00 00 00	 call	 _Py_PXCTX
  00052	85 c0		 test	 eax, eax
  00054	75 32		 jne	 SHORT $LN7@grouper_cr
  00056	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0005d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00064	4c 8b ce	 mov	 r9, rsi
  00067	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0006d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00075	e8 00 00 00 00	 call	 _PyParallel_Guard
  0007a	85 c0		 test	 eax, eax
  0007c	75 06		 jne	 SHORT $LN6@grouper_cr
  0007e	f6 46 20 20	 test	 BYTE PTR [rsi+32], 32	; 00000020H
  00082	74 04		 je	 SHORT $LN7@grouper_cr
$LN6@grouper_cr:
  00084	48 ff 46 50	 inc	 QWORD PTR [rsi+80]
$LN7@grouper_cr:

; 264  :     igo->tgtkey = tgtkey;

  00088	48 89 7b 68	 mov	 QWORD PTR [rbx+104], rdi

; 265  :     Py_INCREF(tgtkey);

  0008c	e8 00 00 00 00	 call	 _Py_PXCTX
  00091	85 c0		 test	 eax, eax
  00093	75 32		 jne	 SHORT $LN11@grouper_cr
  00095	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0009c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000a3	4c 8b cf	 mov	 r9, rdi
  000a6	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000ac	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000b4	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b9	85 c0		 test	 eax, eax
  000bb	75 06		 jne	 SHORT $LN10@grouper_cr
  000bd	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  000c1	74 04		 je	 SHORT $LN11@grouper_cr
$LN10@grouper_cr:
  000c3	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN11@grouper_cr:

; 266  : 
; 267  :     PyObject_GC_Track(igo);

  000c7	48 8b cb	 mov	 rcx, rbx
  000ca	e8 00 00 00 00	 call	 PyObject_GC_Track

; 268  :     return (PyObject *)igo;
; 269  : }

  000cf	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000d4	48 8b c3	 mov	 rax, rbx
  000d7	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000dc	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000e0	5f		 pop	 rdi
  000e1	c3		 ret	 0
_grouper_create ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_grouper_dealloc DD imagerel _grouper_dealloc
	DD	imagerel _grouper_dealloc+45
	DD	imagerel $unwind$_grouper_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_grouper_dealloc DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _grouper_dealloc
_TEXT	SEGMENT
igo$ = 48
_grouper_dealloc PROC					; COMDAT

; 273  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 274  :     PyObject_GC_UnTrack(igo);

  00009	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 275  :     Py_DECREF(igo->parent);

  0000e	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00012	e8 00 00 00 00	 call	 _Py_DecRef

; 276  :     Py_DECREF(igo->tgtkey);

  00017	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  0001b	e8 00 00 00 00	 call	 _Py_DecRef

; 277  :     PyObject_GC_Del(igo);

  00020	48 8b cb	 mov	 rcx, rbx

; 278  : }

  00023	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00027	5b		 pop	 rbx
  00028	e9 00 00 00 00	 jmp	 PyObject_GC_Del
_grouper_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@HDHLNI@_grouper_traverse?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$_grouper_traverse DD imagerel _grouper_traverse
	DD	imagerel _grouper_traverse+152
	DD	imagerel $unwind$_grouper_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_grouper_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BC@HDHLNI@_grouper_traverse?$AA@
CONST	SEGMENT
??_C@_0BC@HDHLNI@_grouper_traverse?$AA@ DB '_grouper_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _grouper_traverse
_TEXT	SEGMENT
igo$ = 48
visit$ = 56
arg$ = 64
_grouper_traverse PROC					; COMDAT

; 282  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 283  :     Py_VISIT(igo->parent);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN9@grouper_tr
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@HDHLNI@_grouper_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 1b 01 00
	00		 mov	 r8d, 283		; 0000011bH
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@grouper_tr:
  0003d	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN11@grouper_tr
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 39		 jne	 SHORT $LN13@grouper_tr
$LN11@grouper_tr:

; 284  :     Py_VISIT(igo->tgtkey);

  0004f	e8 00 00 00 00	 call	 _Py_PXCTX
  00054	85 c0		 test	 eax, eax
  00056	74 1c		 je	 SHORT $LN3@grouper_tr
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@HDHLNI@_grouper_traverse?$AA@
  00066	45 33 c9	 xor	 r9d, r9d
  00069	41 b8 1c 01 00
	00		 mov	 r8d, 284		; 0000011cH
  0006f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@grouper_tr:
  00074	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00078	48 85 c9	 test	 rcx, rcx
  0007b	74 09		 je	 SHORT $LN5@grouper_tr
  0007d	48 8b d7	 mov	 rdx, rdi
  00080	ff d6		 call	 rsi
  00082	85 c0		 test	 eax, eax
  00084	75 02		 jne	 SHORT $LN13@grouper_tr
$LN5@grouper_tr:

; 285  :     return 0;

  00086	33 c0		 xor	 eax, eax
$LN13@grouper_tr:

; 286  : }

  00088	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00092	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00096	5f		 pop	 rdi
  00097	c3		 ret	 0
_grouper_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@OCKKELDB@_grouper_next?$AA@		; `string'
EXTRN	PyObject_CallFunctionObjArgs:PROC
EXTRN	PyObject_RichCompareBool:PROC
EXTRN	PyIter_Next:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_grouper_next DD imagerel _grouper_next
	DD	imagerel _grouper_next+261
	DD	imagerel $unwind$_grouper_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_grouper_next DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
;	COMDAT ??_C@_0O@OCKKELDB@_grouper_next?$AA@
CONST	SEGMENT
??_C@_0O@OCKKELDB@_grouper_next?$AA@ DB '_grouper_next', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _grouper_next
_TEXT	SEGMENT
igo$ = 64
_grouper_next PROC					; COMDAT

; 290  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 291  :     groupbyobject *gbo = (groupbyobject *)igo->parent;

  00014	48 8b 59 60	 mov	 rbx, QWORD PTR [rcx+96]
  00018	48 8b e9	 mov	 rbp, rcx

; 292  :     PyObject *newvalue, *newkey, *r;
; 293  :     int rcmp;
; 294  : 
; 295  :     if (gbo->currvalue == NULL) {

  0001b	48 83 bb 80 00
	00 00 00	 cmp	 QWORD PTR [rbx+128], 0
  00023	75 3f		 jne	 SHORT $LN10@grouper_ne

; 296  :         newvalue = PyIter_Next(gbo->it);

  00025	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00029	e8 00 00 00 00	 call	 PyIter_Next
  0002e	48 8b f8	 mov	 rdi, rax

; 297  :         if (newvalue == NULL)

  00031	48 85 c0	 test	 rax, rax

; 298  :             return NULL;

  00034	0f 84 c7 00 00
	00		 je	 $LN13@grouper_ne

; 299  : 
; 300  :         if (gbo->keyfunc == Py_None) {

  0003a	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  0003e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00045	48 3b c8	 cmp	 rcx, rax
  00048	0f 85 94 00 00
	00		 jne	 $LN8@grouper_ne

; 301  :             newkey = newvalue;
; 302  :             Py_INCREF(newvalue);

  0004e	48 8b cf	 mov	 rcx, rdi
  00051	48 8b f7	 mov	 rsi, rdi
  00054	e8 00 00 00 00	 call	 _Py_IncRef
$LN6@grouper_ne:

; 309  :             }
; 310  :         }
; 311  : 
; 312  :         assert(gbo->currkey == NULL);
; 313  :         gbo->currkey = newkey;

  00059	48 89 73 78	 mov	 QWORD PTR [rbx+120], rsi

; 314  :         gbo->currvalue = newvalue;

  0005d	48 89 bb 80 00
	00 00		 mov	 QWORD PTR [rbx+128], rdi
$LN10@grouper_ne:

; 315  :     }
; 316  : 
; 317  :     assert(gbo->currkey != NULL);
; 318  :     rcmp = PyObject_RichCompareBool(igo->tgtkey, gbo->currkey, Py_EQ);

  00064	48 8b 53 78	 mov	 rdx, QWORD PTR [rbx+120]
  00068	48 8b 4d 68	 mov	 rcx, QWORD PTR [rbp+104]
  0006c	41 b8 02 00 00
	00		 mov	 r8d, 2
  00072	e8 00 00 00 00	 call	 PyObject_RichCompareBool

; 319  :     if (rcmp <= 0)

  00077	85 c0		 test	 eax, eax

; 320  :         /* got any error or current group is end */
; 321  :         return NULL;

  00079	0f 8e 82 00 00
	00		 jle	 $LN13@grouper_ne

; 322  : 
; 323  :     r = gbo->currvalue;
; 324  :     gbo->currvalue = NULL;
; 325  :     Py_CLEAR(gbo->currkey);

  0007f	4c 8b 4b 78	 mov	 r9, QWORD PTR [rbx+120]
  00083	48 8b bb 80 00
	00 00		 mov	 rdi, QWORD PTR [rbx+128]
  0008a	33 f6		 xor	 esi, esi
  0008c	48 89 b3 80 00
	00 00		 mov	 QWORD PTR [rbx+128], rsi
  00093	4d 85 c9	 test	 r9, r9
  00096	74 32		 je	 SHORT $LN3@grouper_ne
  00098	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  0009f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@OCKKELDB@_grouper_next?$AA@
  000a6	41 b8 45 01 00
	00		 mov	 r8d, 325		; 00000145H
  000ac	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000b4	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b9	85 c0		 test	 eax, eax
  000bb	75 0d		 jne	 SHORT $LN3@grouper_ne
  000bd	48 8b 4b 78	 mov	 rcx, QWORD PTR [rbx+120]
  000c1	48 89 73 78	 mov	 QWORD PTR [rbx+120], rsi
  000c5	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@grouper_ne:

; 326  : 
; 327  :     return r;

  000ca	48 8b c7	 mov	 rax, rdi
$LN11@grouper_ne:

; 328  : }

  000cd	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000d2	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  000d7	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  000dc	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000e0	5f		 pop	 rdi
  000e1	c3		 ret	 0
$LN8@grouper_ne:

; 303  :         } else {
; 304  :             newkey = PyObject_CallFunctionObjArgs(gbo->keyfunc,
; 305  :                                                   newvalue, NULL);

  000e2	45 33 c0	 xor	 r8d, r8d
  000e5	48 8b d7	 mov	 rdx, rdi
  000e8	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  000ed	48 8b f0	 mov	 rsi, rax

; 306  :             if (newkey == NULL) {

  000f0	48 85 c0	 test	 rax, rax
  000f3	0f 85 60 ff ff
	ff		 jne	 $LN6@grouper_ne

; 307  :                 Py_DECREF(newvalue);

  000f9	48 8b cf	 mov	 rcx, rdi
  000fc	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@grouper_ne:

; 308  :                 return NULL;

  00101	33 c0		 xor	 eax, eax
  00103	eb c8		 jmp	 SHORT $LN11@grouper_ne
_grouper_next ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _grouper_reduce
_TEXT	SEGMENT
lz$ = 8
_grouper_reduce PROC					; COMDAT

; 333  :     return Py_BuildValue("O(OO)", Py_TYPE(lz),
; 334  :             lz->parent, lz->tgtkey);

  00000	4c 8b 49 68	 mov	 r9, QWORD PTR [rcx+104]
  00004	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]
  00008	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0000c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LNHFJPFN@O?$CIOO?$CJ?$AA@

; 335  : }

  00013	e9 00 00 00 00	 jmp	 Py_BuildValue
_grouper_reduce ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$teedataobject_newinternal DD imagerel teedataobject_newinternal
	DD	imagerel teedataobject_newinternal+143
	DD	imagerel $unwind$teedataobject_newinternal
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$teedataobject_newinternal DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT teedataobject_newinternal
_TEXT	SEGMENT
it$ = 64
teedataobject_newinternal PROC				; COMDAT

; 420  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 421  :     teedataobject *tdo;
; 422  : 
; 423  :     tdo = PyObject_GC_New(teedataobject, &teedataobject_type);

  0000d	e8 00 00 00 00	 call	 _Py_PXCTX
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:teedataobject_type
  00019	85 c0		 test	 eax, eax
  0001b	74 07		 je	 SHORT $LN4@teedataobj
  0001d	e8 00 00 00 00	 call	 _PxObject_New
  00022	eb 05		 jmp	 SHORT $LN10@teedataobj
$LN4@teedataobj:
  00024	e8 00 00 00 00	 call	 _PyObject_GC_New
$LN10@teedataobj:
  00029	48 8b d8	 mov	 rbx, rax

; 424  :     if (tdo == NULL)
; 425  :         return NULL;

  0002c	33 c0		 xor	 eax, eax
  0002e	48 85 db	 test	 rbx, rbx
  00031	74 51		 je	 SHORT $LN2@teedataobj

; 426  : 
; 427  :     tdo->numread = 0;

  00033	89 43 68	 mov	 DWORD PTR [rbx+104], eax

; 428  :     tdo->nextlink = NULL;

  00036	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax

; 429  :     Py_INCREF(it);

  0003a	e8 00 00 00 00	 call	 _Py_PXCTX
  0003f	85 c0		 test	 eax, eax
  00041	75 32		 jne	 SHORT $LN7@teedataobj
  00043	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00051	4c 8b cf	 mov	 r9, rdi
  00054	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0005a	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00062	e8 00 00 00 00	 call	 _PyParallel_Guard
  00067	85 c0		 test	 eax, eax
  00069	75 06		 jne	 SHORT $LN6@teedataobj
  0006b	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  0006f	74 04		 je	 SHORT $LN7@teedataobj
$LN6@teedataobj:
  00071	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN7@teedataobj:

; 430  :     tdo->it = it;
; 431  :     PyObject_GC_Track(tdo);

  00075	48 8b cb	 mov	 rcx, rbx
  00078	48 89 7b 60	 mov	 QWORD PTR [rbx+96], rdi
  0007c	e8 00 00 00 00	 call	 PyObject_GC_Track

; 432  :     return (PyObject *)tdo;

  00081	48 8b c3	 mov	 rax, rbx
$LN2@teedataobj:

; 433  : }

  00084	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00089	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008d	5f		 pop	 rdi
  0008e	c3		 ret	 0
teedataobject_newinternal ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$teedataobject_jumplink DD imagerel teedataobject_jumplink
	DD	imagerel teedataobject_jumplink+130
	DD	imagerel $unwind$teedataobject_jumplink
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$teedataobject_jumplink DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT teedataobject_jumplink
_TEXT	SEGMENT
tdo$ = 64
teedataobject_jumplink PROC				; COMDAT

; 437  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 438  :     if (tdo->nextlink == NULL)

  0000a	48 83 79 70 00	 cmp	 QWORD PTR [rcx+112], 0
  0000f	48 8b d9	 mov	 rbx, rcx
  00012	75 0d		 jne	 SHORT $LN4@teedataobj@2

; 439  :         tdo->nextlink = teedataobject_newinternal(tdo->it);

  00014	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00018	e8 00 00 00 00	 call	 teedataobject_newinternal
  0001d	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax
$LN4@teedataobj@2:

; 440  :     Py_XINCREF(tdo->nextlink);

  00021	48 8b 7b 70	 mov	 rdi, QWORD PTR [rbx+112]
  00025	48 85 ff	 test	 rdi, rdi
  00028	74 4a		 je	 SHORT $LN14@teedataobj@2
  0002a	e8 00 00 00 00	 call	 _Py_PXCTX
  0002f	85 c0		 test	 eax, eax
  00031	75 32		 jne	 SHORT $LN12@teedataobj@2
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00041	4c 8b cf	 mov	 r9, rdi
  00044	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0004a	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00052	e8 00 00 00 00	 call	 _PyParallel_Guard
  00057	85 c0		 test	 eax, eax
  00059	75 06		 jne	 SHORT $LN8@teedataobj@2
  0005b	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  0005f	74 04		 je	 SHORT $LN12@teedataobj@2
$LN8@teedataobj@2:
  00061	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN12@teedataobj@2:

; 441  :     return tdo->nextlink;

  00065	48 8b 43 70	 mov	 rax, QWORD PTR [rbx+112]

; 442  : }

  00069	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0006e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00072	5f		 pop	 rdi
  00073	c3		 ret	 0
$LN14@teedataobj@2:

; 441  :     return tdo->nextlink;

  00074	48 8b c7	 mov	 rax, rdi

; 442  : }

  00077	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0007c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00080	5f		 pop	 rdi
  00081	c3		 ret	 0
teedataobject_jumplink ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$teedataobject_getitem DD imagerel teedataobject_getitem
	DD	imagerel teedataobject_getitem+152
	DD	imagerel $unwind$teedataobject_getitem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$teedataobject_getitem DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT teedataobject_getitem
_TEXT	SEGMENT
tdo$ = 64
i$ = 72
teedataobject_getitem PROC				; COMDAT

; 446  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 63 f2	 movsxd	 rsi, edx
  00012	48 8b f9	 mov	 rdi, rcx

; 447  :     PyObject *value;
; 448  : 
; 449  :     assert(i < LINKCELLS);
; 450  :     if (i < tdo->numread)

  00015	3b 71 68	 cmp	 esi, DWORD PTR [rcx+104]
  00018	7d 07		 jge	 SHORT $LN3@teedataobj@3

; 451  :         value = tdo->values[i];

  0001a	48 8b 5c f1 78	 mov	 rbx, QWORD PTR [rcx+rsi*8+120]

; 452  :     else {

  0001f	eb 29		 jmp	 SHORT $LN2@teedataobj@3
$LN3@teedataobj@3:

; 453  :         /* this is the lead iterator, so fetch more data */
; 454  :         assert(i == tdo->numread);
; 455  :         value = PyIter_Next(tdo->it);

  00021	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00025	e8 00 00 00 00	 call	 PyIter_Next
  0002a	48 8b d8	 mov	 rbx, rax

; 456  :         if (value == NULL)

  0002d	48 85 c0	 test	 rax, rax
  00030	75 10		 jne	 SHORT $LN1@teedataobj@3

; 462  :     return value;
; 463  : }

  00032	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00037	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0003c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00040	5f		 pop	 rdi
  00041	c3		 ret	 0
$LN1@teedataobj@3:

; 457  :             return NULL;
; 458  :         tdo->numread++;

  00042	ff 47 68	 inc	 DWORD PTR [rdi+104]

; 459  :         tdo->values[i] = value;

  00045	48 89 44 f7 78	 mov	 QWORD PTR [rdi+rsi*8+120], rax
$LN2@teedataobj@3:

; 460  :     }
; 461  :     Py_INCREF(value);

  0004a	e8 00 00 00 00	 call	 _Py_PXCTX
  0004f	85 c0		 test	 eax, eax
  00051	75 32		 jne	 SHORT $LN7@teedataobj@3
  00053	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0005a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00061	4c 8b cb	 mov	 r9, rbx
  00064	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0006a	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00072	e8 00 00 00 00	 call	 _PyParallel_Guard
  00077	85 c0		 test	 eax, eax
  00079	75 06		 jne	 SHORT $LN6@teedataobj@3
  0007b	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0007f	74 04		 je	 SHORT $LN7@teedataobj@3
$LN6@teedataobj@3:
  00081	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN7@teedataobj@3:

; 462  :     return value;
; 463  : }

  00085	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0008a	48 8b c3	 mov	 rax, rbx
  0008d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00092	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00096	5f		 pop	 rdi
  00097	c3		 ret	 0
teedataobject_getitem ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@KDFMIKCD@teedataobject_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$teedataobject_traverse DD imagerel teedataobject_traverse
	DD	imagerel teedataobject_traverse+85
	DD	imagerel $unwind$teedataobject_traverse
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$teedataobject_traverse DD imagerel teedataobject_traverse+85
	DD	imagerel teedataobject_traverse+246
	DD	imagerel $chain$1$teedataobject_traverse
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$teedataobject_traverse DD imagerel teedataobject_traverse+246
	DD	imagerel teedataobject_traverse+263
	DD	imagerel $chain$2$teedataobject_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$teedataobject_traverse DD 021H
	DD	imagerel teedataobject_traverse
	DD	imagerel teedataobject_traverse+85
	DD	imagerel $unwind$teedataobject_traverse
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$teedataobject_traverse DD 040a21H
	DD	07740aH
	DD	063405H
	DD	imagerel teedataobject_traverse
	DD	imagerel teedataobject_traverse+85
	DD	imagerel $unwind$teedataobject_traverse
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$teedataobject_traverse DD 061001H
	DD	096410H
	DD	085410H
	DD	0c00c3210H
xdata	ENDS
;	COMDAT ??_C@_0BH@KDFMIKCD@teedataobject_traverse?$AA@
CONST	SEGMENT
??_C@_0BH@KDFMIKCD@teedataobject_traverse?$AA@ DB 'teedataobject_traverse'
	DB	00H						; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT teedataobject_traverse
_TEXT	SEGMENT
tdo$ = 48
visit$ = 56
arg$ = 64
teedataobject_traverse PROC				; COMDAT

; 467  : {

  00000	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  00005	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000a	41 54		 push	 r12
  0000c	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00010	49 8b e8	 mov	 rbp, r8
  00013	4c 8b e2	 mov	 r12, rdx
  00016	48 8b f1	 mov	 rsi, rcx

; 468  :     int i;
; 469  :     Py_VISIT(tdo->it);

  00019	e8 00 00 00 00	 call	 _Py_PXCTX
  0001e	85 c0		 test	 eax, eax
  00020	74 1c		 je	 SHORT $LN18@teedataobj@4
  00022	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@KDFMIKCD@teedataobject_traverse?$AA@
  00030	45 33 c9	 xor	 r9d, r9d
  00033	41 b8 d5 01 00
	00		 mov	 r8d, 469		; 000001d5H
  00039	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN18@teedataobj@4:
  0003e	48 8b 4e 60	 mov	 rcx, QWORD PTR [rsi+96]
  00042	48 85 c9	 test	 rcx, rcx
  00045	74 0e		 je	 SHORT $LN20@teedataobj@4
  00047	48 8b d5	 mov	 rdx, rbp
  0004a	41 ff d4	 call	 r12
  0004d	85 c0		 test	 eax, eax
  0004f	0f 85 a1 00 00
	00		 jne	 $LN22@teedataobj@4
$LN20@teedataobj@4:
  00055	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0005a	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi

; 470  :     for (i = 0; i < tdo->numread; i++)

  0005f	33 ff		 xor	 edi, edi
  00061	39 7e 68	 cmp	 DWORD PTR [rsi+104], edi
  00064	7e 4c		 jle	 SHORT $LN6@teedataobj@4
  00066	48 8d 5e 78	 lea	 rbx, QWORD PTR [rsi+120]
  0006a	66 0f 1f 44 00
	00		 npad	 6
$LL15@teedataobj@4:

; 471  :         Py_VISIT(tdo->values[i]);

  00070	e8 00 00 00 00	 call	 _Py_PXCTX
  00075	85 c0		 test	 eax, eax
  00077	74 1c		 je	 SHORT $LN9@teedataobj@4
  00079	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  00080	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@KDFMIKCD@teedataobject_traverse?$AA@
  00087	45 33 c9	 xor	 r9d, r9d
  0008a	41 b8 d7 01 00
	00		 mov	 r8d, 471		; 000001d7H
  00090	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@teedataobj@4:
  00095	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00098	48 85 c9	 test	 rcx, rcx
  0009b	74 0a		 je	 SHORT $LN11@teedataobj@4
  0009d	48 8b d5	 mov	 rdx, rbp
  000a0	41 ff d4	 call	 r12
  000a3	85 c0		 test	 eax, eax
  000a5	75 45		 jne	 SHORT $LN29@teedataobj@4
$LN11@teedataobj@4:

; 470  :     for (i = 0; i < tdo->numread; i++)

  000a7	ff c7		 inc	 edi
  000a9	48 83 c3 08	 add	 rbx, 8
  000ad	3b 7e 68	 cmp	 edi, DWORD PTR [rsi+104]
  000b0	7c be		 jl	 SHORT $LL15@teedataobj@4
$LN6@teedataobj@4:

; 472  :     Py_VISIT(tdo->nextlink);

  000b2	e8 00 00 00 00	 call	 _Py_PXCTX
  000b7	85 c0		 test	 eax, eax
  000b9	74 1c		 je	 SHORT $LN3@teedataobj@4
  000bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  000c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@KDFMIKCD@teedataobject_traverse?$AA@
  000c9	45 33 c9	 xor	 r9d, r9d
  000cc	41 b8 d8 01 00
	00		 mov	 r8d, 472		; 000001d8H
  000d2	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@teedataobj@4:
  000d7	48 8b 4e 70	 mov	 rcx, QWORD PTR [rsi+112]
  000db	48 85 c9	 test	 rcx, rcx
  000de	74 0a		 je	 SHORT $LN5@teedataobj@4
  000e0	48 8b d5	 mov	 rdx, rbp
  000e3	41 ff d4	 call	 r12
  000e6	85 c0		 test	 eax, eax
  000e8	75 02		 jne	 SHORT $LN29@teedataobj@4
$LN5@teedataobj@4:

; 473  :     return 0;

  000ea	33 c0		 xor	 eax, eax
$LN29@teedataobj@4:
  000ec	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000f1	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]
$LN22@teedataobj@4:

; 474  : }

  000f6	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  000fb	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00100	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00104	41 5c		 pop	 r12
  00106	c3		 ret	 0
teedataobject_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$teedataobject_safe_decref DD imagerel teedataobject_safe_decref
	DD	imagerel teedataobject_safe_decref+14
	DD	imagerel $unwind$teedataobject_safe_decref
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$teedataobject_safe_decref DD imagerel teedataobject_safe_decref+14
	DD	imagerel teedataobject_safe_decref+309
	DD	imagerel $chain$2$teedataobject_safe_decref
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$teedataobject_safe_decref DD imagerel teedataobject_safe_decref+309
	DD	imagerel teedataobject_safe_decref+311
	DD	imagerel $chain$3$teedataobject_safe_decref
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$teedataobject_safe_decref DD 021H
	DD	imagerel teedataobject_safe_decref
	DD	imagerel teedataobject_safe_decref+14
	DD	imagerel $unwind$teedataobject_safe_decref
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$teedataobject_safe_decref DD 061921H
	DD	0a7419H
	DD	09640aH
	DD	085405H
	DD	imagerel teedataobject_safe_decref
	DD	imagerel teedataobject_safe_decref+14
	DD	imagerel $unwind$teedataobject_safe_decref
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$teedataobject_safe_decref DD 020e01H
	DD	0300a520eH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT teedataobject_safe_decref
_TEXT	SEGMENT
obj$ = 64
teedataobject_safe_decref PROC				; COMDAT

; 479  :     while (obj && Py_TYPE(obj) == &teedataobject_type &&
; 480  :            Py_REFCNT(obj) == 1) {

  00000	48 85 c9	 test	 rcx, rcx
  00003	0f 84 2c 01 00
	00		 je	 $LN36@teedataobj@5
  00009	53		 push	 rbx
  0000a	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000e	48 89 6c 24 40	 mov	 QWORD PTR [rsp+64], rbp
  00013	48 89 74 24 48	 mov	 QWORD PTR [rsp+72], rsi

; 478  : {

  00018	48 8b d9	 mov	 rbx, rcx

; 479  :     while (obj && Py_TYPE(obj) == &teedataobject_type &&
; 480  :            Py_REFCNT(obj) == 1) {

  0001b	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:teedataobject_type
  00022	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  00027	33 ed		 xor	 ebp, ebp
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL6@teedataobj@5:
  00030	48 39 73 58	 cmp	 QWORD PTR [rbx+88], rsi
  00034	0f 85 82 00 00
	00		 jne	 $LN4@teedataobj@5
  0003a	48 83 7b 50 01	 cmp	 QWORD PTR [rbx+80], 1
  0003f	75 7b		 jne	 SHORT $LN4@teedataobj@5

; 481  :         PyObject *nextlink = ((teedataobject *)obj)->nextlink;

  00041	48 8b 7b 70	 mov	 rdi, QWORD PTR [rbx+112]

; 482  :         ((teedataobject *)obj)->nextlink = NULL;

  00045	48 89 6b 70	 mov	 QWORD PTR [rbx+112], rbp

; 483  :         Py_DECREF(obj);

  00049	e8 00 00 00 00	 call	 _Py_PXCTX
  0004e	85 c0		 test	 eax, eax
  00050	75 5c		 jne	 SHORT $LN19@teedataobj@5
  00052	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00056	a8 20		 test	 al, 32			; 00000020H
  00058	75 4c		 jne	 SHORT $LN13@teedataobj@5
  0005a	84 c0		 test	 al, al
  0005c	78 48		 js	 SHORT $LN13@teedataobj@5
  0005e	a8 02		 test	 al, 2
  00060	75 4c		 jne	 SHORT $LN19@teedataobj@5
  00062	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00066	75 46		 jne	 SHORT $LN19@teedataobj@5
  00068	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00076	4c 8b cb	 mov	 r9, rbx
  00079	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0007f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00087	e8 00 00 00 00	 call	 _PyParallel_Guard
  0008c	48 8b cb	 mov	 rcx, rbx
  0008f	85 c0		 test	 eax, eax
  00091	74 07		 je	 SHORT $LN18@teedataobj@5
  00093	e8 00 00 00 00	 call	 _Px_Dealloc
  00098	eb 14		 jmp	 SHORT $LN19@teedataobj@5
$LN18@teedataobj@5:
  0009a	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0009e	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000a4	eb 08		 jmp	 SHORT $LN19@teedataobj@5
$LN13@teedataobj@5:
  000a6	48 8b cb	 mov	 rcx, rbx
  000a9	e8 00 00 00 00	 call	 Px_DecRef
$LN19@teedataobj@5:

; 484  :         obj = nextlink;

  000ae	48 8b df	 mov	 rbx, rdi
  000b1	48 85 ff	 test	 rdi, rdi
  000b4	0f 85 76 ff ff
	ff		 jne	 $LL6@teedataobj@5

; 485  :     }
; 486  :     Py_XDECREF(obj);

  000ba	eb 65		 jmp	 SHORT $LN35@teedataobj@5
$LN4@teedataobj@5:
  000bc	e8 00 00 00 00	 call	 _Py_PXCTX
  000c1	85 c0		 test	 eax, eax
  000c3	75 5c		 jne	 SHORT $LN35@teedataobj@5
  000c5	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000c9	a8 20		 test	 al, 32			; 00000020H
  000cb	75 4c		 jne	 SHORT $LN24@teedataobj@5
  000cd	84 c0		 test	 al, al
  000cf	78 48		 js	 SHORT $LN24@teedataobj@5
  000d1	a8 02		 test	 al, 2
  000d3	75 4c		 jne	 SHORT $LN35@teedataobj@5
  000d5	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000d9	75 46		 jne	 SHORT $LN35@teedataobj@5
  000db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000e9	4c 8b cb	 mov	 r9, rbx
  000ec	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000f2	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000fa	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ff	48 8b cb	 mov	 rcx, rbx
  00102	85 c0		 test	 eax, eax
  00104	74 07		 je	 SHORT $LN29@teedataobj@5
  00106	e8 00 00 00 00	 call	 _Px_Dealloc
  0010b	eb 14		 jmp	 SHORT $LN35@teedataobj@5
$LN29@teedataobj@5:
  0010d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00111	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00117	eb 08		 jmp	 SHORT $LN35@teedataobj@5
$LN24@teedataobj@5:
  00119	48 8b cb	 mov	 rcx, rbx
  0011c	e8 00 00 00 00	 call	 Px_DecRef
$LN35@teedataobj@5:
  00121	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]
  00126	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  0012b	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]

; 487  : }

  00130	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00134	5b		 pop	 rbx
$LN36@teedataobj@5:
  00135	f3 c3		 fatret	 0
teedataobject_safe_decref ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@FHHEMKKO@teedataobject_clear?$AA@	; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$teedataobject_clear DD imagerel teedataobject_clear
	DD	imagerel teedataobject_clear+199
	DD	imagerel $unwind$teedataobject_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$teedataobject_clear DD imagerel teedataobject_clear+199
	DD	imagerel teedataobject_clear+384
	DD	imagerel $chain$0$teedataobject_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$teedataobject_clear DD imagerel teedataobject_clear+384
	DD	imagerel teedataobject_clear+421
	DD	imagerel $chain$1$teedataobject_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$teedataobject_clear DD 021H
	DD	imagerel teedataobject_clear
	DD	imagerel teedataobject_clear+199
	DD	imagerel $unwind$teedataobject_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$teedataobject_clear DD 020521H
	DD	087405H
	DD	imagerel teedataobject_clear
	DD	imagerel teedataobject_clear+199
	DD	imagerel $unwind$teedataobject_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$teedataobject_clear DD 081501H
	DD	0b6415H
	DD	0a5415H
	DD	093415H
	DD	0c0115215H
xdata	ENDS
;	COMDAT ??_C@_0BE@FHHEMKKO@teedataobject_clear?$AA@
CONST	SEGMENT
??_C@_0BE@FHHEMKKO@teedataobject_clear?$AA@ DB 'teedataobject_clear', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
CONST	ENDS
;	COMDAT teedataobject_clear
_TEXT	SEGMENT
tdo$ = 64
teedataobject_clear PROC				; COMDAT

; 491  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	41 54		 push	 r12
  00011	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 492  :     int i;
; 493  :     PyObject *tmp;
; 494  : 
; 495  :     Py_CLEAR(tdo->it);

  00015	4c 8b 49 60	 mov	 r9, QWORD PTR [rcx+96]
  00019	45 33 e4	 xor	 r12d, r12d
  0001c	48 8b e9	 mov	 rbp, rcx
  0001f	4d 85 c9	 test	 r9, r9
  00022	0f 84 92 00 00
	00		 je	 $LN10@teedataobj@6
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@FHHEMKKO@teedataobject_clear?$AA@
  00036	41 b8 ef 01 00
	00		 mov	 r8d, 495		; 000001efH
  0003c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00044	e8 00 00 00 00	 call	 _PyParallel_Guard
  00049	85 c0		 test	 eax, eax
  0004b	75 6d		 jne	 SHORT $LN10@teedataobj@6
  0004d	48 8b 5d 60	 mov	 rbx, QWORD PTR [rbp+96]
  00051	4c 89 65 60	 mov	 QWORD PTR [rbp+96], r12
  00055	e8 00 00 00 00	 call	 _Py_PXCTX
  0005a	85 c0		 test	 eax, eax
  0005c	75 5c		 jne	 SHORT $LN10@teedataobj@6
  0005e	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00062	a8 20		 test	 al, 32			; 00000020H
  00064	75 4c		 jne	 SHORT $LN18@teedataobj@6
  00066	84 c0		 test	 al, al
  00068	78 48		 js	 SHORT $LN18@teedataobj@6
  0006a	a8 02		 test	 al, 2
  0006c	75 4c		 jne	 SHORT $LN10@teedataobj@6
  0006e	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00072	75 46		 jne	 SHORT $LN10@teedataobj@6
  00074	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0007b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00082	4c 8b cb	 mov	 r9, rbx
  00085	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0008b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00093	e8 00 00 00 00	 call	 _PyParallel_Guard
  00098	48 8b cb	 mov	 rcx, rbx
  0009b	85 c0		 test	 eax, eax
  0009d	74 07		 je	 SHORT $LN23@teedataobj@6
  0009f	e8 00 00 00 00	 call	 _Px_Dealloc
  000a4	eb 14		 jmp	 SHORT $LN10@teedataobj@6
$LN23@teedataobj@6:
  000a6	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000aa	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000b0	eb 08		 jmp	 SHORT $LN10@teedataobj@6
$LN18@teedataobj@6:
  000b2	48 8b cb	 mov	 rcx, rbx
  000b5	e8 00 00 00 00	 call	 Px_DecRef
$LN10@teedataobj@6:

; 496  :     for (i=0 ; i<tdo->numread ; i++)

  000ba	41 8b f4	 mov	 esi, r12d
  000bd	44 39 65 68	 cmp	 DWORD PTR [rbp+104], r12d
  000c1	0f 8e b9 00 00
	00		 jle	 $LN5@teedataobj@6
  000c7	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  000cc	48 8d 7d 78	 lea	 rdi, QWORD PTR [rbp+120]
$LL7@teedataobj@6:

; 497  :         Py_CLEAR(tdo->values[i]);

  000d0	4c 8b 0f	 mov	 r9, QWORD PTR [rdi]
  000d3	4d 85 c9	 test	 r9, r9
  000d6	0f 84 90 00 00
	00		 je	 $LN3@teedataobj@6
  000dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  000e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@FHHEMKKO@teedataobject_clear?$AA@
  000ea	41 b8 f1 01 00
	00		 mov	 r8d, 497		; 000001f1H
  000f0	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000f8	e8 00 00 00 00	 call	 _PyParallel_Guard
  000fd	85 c0		 test	 eax, eax
  000ff	75 6b		 jne	 SHORT $LN3@teedataobj@6
  00101	48 8b 1f	 mov	 rbx, QWORD PTR [rdi]
  00104	4c 89 27	 mov	 QWORD PTR [rdi], r12
  00107	e8 00 00 00 00	 call	 _Py_PXCTX
  0010c	85 c0		 test	 eax, eax
  0010e	75 5c		 jne	 SHORT $LN3@teedataobj@6
  00110	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00114	a8 20		 test	 al, 32			; 00000020H
  00116	75 4c		 jne	 SHORT $LN29@teedataobj@6
  00118	84 c0		 test	 al, al
  0011a	78 48		 js	 SHORT $LN29@teedataobj@6
  0011c	a8 02		 test	 al, 2
  0011e	75 4c		 jne	 SHORT $LN3@teedataobj@6
  00120	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00124	75 46		 jne	 SHORT $LN3@teedataobj@6
  00126	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0012d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00134	4c 8b cb	 mov	 r9, rbx
  00137	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0013d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00145	e8 00 00 00 00	 call	 _PyParallel_Guard
  0014a	48 8b cb	 mov	 rcx, rbx
  0014d	85 c0		 test	 eax, eax
  0014f	74 07		 je	 SHORT $LN34@teedataobj@6
  00151	e8 00 00 00 00	 call	 _Px_Dealloc
  00156	eb 14		 jmp	 SHORT $LN3@teedataobj@6
$LN34@teedataobj@6:
  00158	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0015c	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00162	eb 08		 jmp	 SHORT $LN3@teedataobj@6
$LN29@teedataobj@6:
  00164	48 8b cb	 mov	 rcx, rbx
  00167	e8 00 00 00 00	 call	 Px_DecRef
$LN3@teedataobj@6:

; 496  :     for (i=0 ; i<tdo->numread ; i++)

  0016c	ff c6		 inc	 esi
  0016e	48 83 c7 08	 add	 rdi, 8
  00172	3b 75 68	 cmp	 esi, DWORD PTR [rbp+104]
  00175	0f 8c 55 ff ff
	ff		 jl	 $LL7@teedataobj@6
  0017b	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
$LN5@teedataobj@6:

; 498  :     tmp = tdo->nextlink;

  00180	48 8b 4d 70	 mov	 rcx, QWORD PTR [rbp+112]

; 499  :     tdo->nextlink = NULL;

  00184	4c 89 65 70	 mov	 QWORD PTR [rbp+112], r12

; 500  :     teedataobject_safe_decref(tmp);

  00188	e8 00 00 00 00	 call	 teedataobject_safe_decref

; 501  :     return 0;
; 502  : }

  0018d	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00192	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  00197	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  0019c	33 c0		 xor	 eax, eax
  0019e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001a2	41 5c		 pop	 r12
  001a4	c3		 ret	 0
teedataobject_clear ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$teedataobject_dealloc DD imagerel teedataobject_dealloc
	DD	imagerel teedataobject_dealloc+35
	DD	imagerel $unwind$teedataobject_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$teedataobject_dealloc DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT teedataobject_dealloc
_TEXT	SEGMENT
tdo$ = 48
teedataobject_dealloc PROC				; COMDAT

; 506  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 507  :     PyObject_GC_UnTrack(tdo);

  00009	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 508  :     teedataobject_clear(tdo);

  0000e	48 8b cb	 mov	 rcx, rbx
  00011	e8 00 00 00 00	 call	 teedataobject_clear

; 509  :     PyObject_GC_Del(tdo);

  00016	48 8b cb	 mov	 rcx, rbx

; 510  : }

  00019	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001d	5b		 pop	 rbx
  0001e	e9 00 00 00 00	 jmp	 PyObject_GC_Del
teedataobject_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_06KFMHBHMK@O?$CIONO?$CJ?$AA@		; `string'
EXTRN	PyList_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$teedataobject_reduce DD imagerel teedataobject_reduce
	DD	imagerel teedataobject_reduce+52
	DD	imagerel $unwind$teedataobject_reduce
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$teedataobject_reduce DD imagerel teedataobject_reduce+52
	DD	imagerel teedataobject_reduce+186
	DD	imagerel $chain$3$teedataobject_reduce
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$teedataobject_reduce DD imagerel teedataobject_reduce+186
	DD	imagerel teedataobject_reduce+245
	DD	imagerel $chain$4$teedataobject_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$teedataobject_reduce DD 021H
	DD	imagerel teedataobject_reduce
	DD	imagerel teedataobject_reduce+52
	DD	imagerel $unwind$teedataobject_reduce
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$teedataobject_reduce DD 060f21H
	DD	06d40fH
	DD	0c740aH
	DD	0a3405H
	DD	imagerel teedataobject_reduce
	DD	imagerel teedataobject_reduce+52
	DD	imagerel $unwind$teedataobject_reduce
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$teedataobject_reduce DD 052901H
	DD	0b5429H
	DD	0c0046208H
	DD	06002H
xdata	ENDS
;	COMDAT ??_C@_06KFMHBHMK@O?$CIONO?$CJ?$AA@
CONST	SEGMENT
??_C@_06KFMHBHMK@O?$CIONO?$CJ?$AA@ DB 'O(ONO)', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
CONST	ENDS
;	COMDAT teedataobject_reduce
_TEXT	SEGMENT
tdo$ = 80
teedataobject_reduce PROC				; COMDAT

; 514  : {

  00000	40 56		 push	 rsi
  00002	41 54		 push	 r12
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00008	48 8b f1	 mov	 rsi, rcx

; 515  :     int i;
; 516  :     /* create a temporary list of already iterated values */
; 517  :     PyObject *values = PyList_New(tdo->numread);

  0000b	48 63 49 68	 movsxd	 rcx, DWORD PTR [rcx+104]
  0000f	e8 00 00 00 00	 call	 PyList_New
  00014	4c 8b e0	 mov	 r12, rax

; 518  :     if (!values)

  00017	48 85 c0	 test	 rax, rax
  0001a	75 08		 jne	 SHORT $LN4@teedataobj@7

; 527  : }

  0001c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00020	41 5c		 pop	 r12
  00022	5e		 pop	 rsi
  00023	c3		 ret	 0
$LN4@teedataobj@7:
  00024	48 89 6c 24 58	 mov	 QWORD PTR [rsp+88], rbp

; 519  :         return NULL;
; 520  :     for (i=0 ; i<tdo->numread ; i++) {

  00029	33 ed		 xor	 ebp, ebp
  0002b	39 6e 68	 cmp	 DWORD PTR [rsi+104], ebp
  0002e	0f 8e 86 00 00
	00		 jle	 $LN1@teedataobj@7
  00034	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  00039	48 89 7c 24 60	 mov	 QWORD PTR [rsp+96], rdi
  0003e	4c 89 6c 24 30	 mov	 QWORD PTR [rsp+48], r13
  00043	49 c7 c5 88 ff
	ff ff		 mov	 r13, -120		; ffffffffffffff88H
  0004a	48 8d 7e 78	 lea	 rdi, QWORD PTR [rsi+120]
  0004e	4c 2b ee	 sub	 r13, rsi
$LL3@teedataobj@7:

; 521  :         Py_INCREF(tdo->values[i]);

  00051	48 8b 1f	 mov	 rbx, QWORD PTR [rdi]
  00054	e8 00 00 00 00	 call	 _Py_PXCTX
  00059	85 c0		 test	 eax, eax
  0005b	75 32		 jne	 SHORT $LN10@teedataobj@7
  0005d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00064	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0006b	4c 8b cb	 mov	 r9, rbx
  0006e	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00074	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0007c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00081	85 c0		 test	 eax, eax
  00083	75 06		 jne	 SHORT $LN9@teedataobj@7
  00085	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00089	74 04		 je	 SHORT $LN10@teedataobj@7
$LN9@teedataobj@7:
  0008b	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN10@teedataobj@7:

; 522  :         PyList_SET_ITEM(values, i, tdo->values[i]);

  0008f	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00092	49 8b 4c 24 70	 mov	 rcx, QWORD PTR [r12+112]
  00097	49 8d 54 3d 00	 lea	 rdx, QWORD PTR [r13+rdi]
  0009c	ff c5		 inc	 ebp
  0009e	48 83 c7 08	 add	 rdi, 8
  000a2	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
  000a6	3b 6e 68	 cmp	 ebp, DWORD PTR [rsi+104]
  000a9	7c a6		 jl	 SHORT $LL3@teedataobj@7
  000ab	4c 8b 6c 24 30	 mov	 r13, QWORD PTR [rsp+48]
  000b0	48 8b 7c 24 60	 mov	 rdi, QWORD PTR [rsp+96]
  000b5	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
$LN1@teedataobj@7:

; 523  :     }
; 524  :     return Py_BuildValue("O(ONO)", Py_TYPE(tdo), tdo->it,
; 525  :                          values,
; 526  :                          tdo->nextlink ? tdo->nextlink : Py_None);

  000ba	48 8b 46 70	 mov	 rax, QWORD PTR [rsi+112]
  000be	4c 8b 46 60	 mov	 r8, QWORD PTR [rsi+96]
  000c2	48 8b 56 58	 mov	 rdx, QWORD PTR [rsi+88]
  000c6	48 85 c0	 test	 rax, rax
  000c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000d0	4d 8b cc	 mov	 r9, r12
  000d3	48 0f 45 c8	 cmovne	 rcx, rax
  000d7	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  000dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06KFMHBHMK@O?$CIONO?$CJ?$AA@
  000e3	e8 00 00 00 00	 call	 Py_BuildValue
  000e8	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]

; 527  : }

  000ed	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000f1	41 5c		 pop	 r12
  000f3	5e		 pop	 rsi
  000f4	c3		 ret	 0
teedataobject_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@PALKPJEA@Invalid?5arguments?$AA@	; `string'
PUBLIC	??_C@_04GOGHPAAM@OO?$CBO?$AA@			; `string'
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_ValueError:QWORD
EXTRN	PyList_Type:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$teedataobject_new DD imagerel teedataobject_new
	DD	imagerel teedataobject_new+70
	DD	imagerel $unwind$teedataobject_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$teedataobject_new DD imagerel teedataobject_new+70
	DD	imagerel teedataobject_new+98
	DD	imagerel $chain$0$teedataobject_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$teedataobject_new DD imagerel teedataobject_new+98
	DD	imagerel teedataobject_new+122
	DD	imagerel $chain$3$teedataobject_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$teedataobject_new DD imagerel teedataobject_new+122
	DD	imagerel teedataobject_new+134
	DD	imagerel $chain$4$teedataobject_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$teedataobject_new DD imagerel teedataobject_new+134
	DD	imagerel teedataobject_new+236
	DD	imagerel $chain$5$teedataobject_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$teedataobject_new DD imagerel teedataobject_new+236
	DD	imagerel teedataobject_new+257
	DD	imagerel $chain$6$teedataobject_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$teedataobject_new DD imagerel teedataobject_new+257
	DD	imagerel teedataobject_new+312
	DD	imagerel $chain$7$teedataobject_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$teedataobject_new DD imagerel teedataobject_new+312
	DD	imagerel teedataobject_new+337
	DD	imagerel $chain$9$teedataobject_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$11$teedataobject_new DD imagerel teedataobject_new+337
	DD	imagerel teedataobject_new+381
	DD	imagerel $chain$11$teedataobject_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$11$teedataobject_new DD 040021H
	DD	0c6400H
	DD	0b5400H
	DD	imagerel teedataobject_new
	DD	imagerel teedataobject_new+70
	DD	imagerel $unwind$teedataobject_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$teedataobject_new DD 040021H
	DD	0c6400H
	DD	0b5400H
	DD	imagerel teedataobject_new
	DD	imagerel teedataobject_new+70
	DD	imagerel $unwind$teedataobject_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$teedataobject_new DD 021H
	DD	imagerel teedataobject_new+98
	DD	imagerel teedataobject_new+122
	DD	imagerel $chain$3$teedataobject_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$teedataobject_new DD 021H
	DD	imagerel teedataobject_new+122
	DD	imagerel teedataobject_new+134
	DD	imagerel $chain$4$teedataobject_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$teedataobject_new DD 020521H
	DD	087405H
	DD	imagerel teedataobject_new+122
	DD	imagerel teedataobject_new+134
	DD	imagerel $chain$4$teedataobject_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$teedataobject_new DD 020521H
	DD	0a3405H
	DD	imagerel teedataobject_new+98
	DD	imagerel teedataobject_new+122
	DD	imagerel $chain$3$teedataobject_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$teedataobject_new DD 040a21H
	DD	0c640aH
	DD	0b5400H
	DD	imagerel teedataobject_new
	DD	imagerel teedataobject_new+70
	DD	imagerel $unwind$teedataobject_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$teedataobject_new DD 020521H
	DD	0b5405H
	DD	imagerel teedataobject_new
	DD	imagerel teedataobject_new+70
	DD	imagerel $unwind$teedataobject_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$teedataobject_new DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_0BC@PALKPJEA@Invalid?5arguments?$AA@
CONST	SEGMENT
??_C@_0BC@PALKPJEA@Invalid?5arguments?$AA@ DB 'Invalid arguments', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04GOGHPAAM@OO?$CBO?$AA@
CONST	SEGMENT
??_C@_04GOGHPAAM@OO?$CBO?$AA@ DB 'OO!O', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
CONST	ENDS
;	COMDAT teedataobject_new
_TEXT	SEGMENT
values$ = 48
it$ = 56
type$ = 80
args$ = 88
kw$ = 96
next$ = 104
teedataobject_new PROC					; COMDAT

; 533  : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00004	48 8b c2	 mov	 rax, rdx

; 534  :     teedataobject *tdo;
; 535  :     PyObject *it, *values, *next;
; 536  :     Py_ssize_t i, len;
; 537  : 
; 538  :     assert(type == &teedataobject_type);
; 539  :     if (!PyArg_ParseTuple(args, "OO!O", &it, &PyList_Type, &values, &next))

  00007	48 8d 4c 24 68	 lea	 rcx, QWORD PTR next$[rsp]
  0000c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:PyList_Type
  00013	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00018	48 8d 4c 24 30	 lea	 rcx, QWORD PTR values$[rsp]
  0001d	4c 8d 44 24 38	 lea	 r8, QWORD PTR it$[rsp]
  00022	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04GOGHPAAM@OO?$CBO?$AA@
  0002e	48 8b c8	 mov	 rcx, rax
  00031	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00036	85 c0		 test	 eax, eax
  00038	75 07		 jne	 SHORT $LN15@teedataobj@8

; 540  :         return NULL;

  0003a	33 c0		 xor	 eax, eax

; 574  : }

  0003c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00040	c3		 ret	 0
$LN15@teedataobj@8:

; 541  : 
; 542  :     tdo = (teedataobject *)teedataobject_newinternal(it);

  00041	48 8b 4c 24 38	 mov	 rcx, QWORD PTR it$[rsp]
  00046	48 89 6c 24 58	 mov	 QWORD PTR [rsp+88], rbp
  0004b	e8 00 00 00 00	 call	 teedataobject_newinternal
  00050	48 8b e8	 mov	 rbp, rax

; 543  :     if (!tdo)

  00053	48 85 c0	 test	 rax, rax
  00056	75 0a		 jne	 SHORT $LN14@teedataobj@8
  00058	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]

; 574  : }

  0005d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00061	c3		 ret	 0
$LN14@teedataobj@8:

; 544  :         return NULL;
; 545  : 
; 546  :     len = PyList_GET_SIZE(values);

  00062	48 8b 44 24 30	 mov	 rax, QWORD PTR values$[rsp]
  00067	48 89 74 24 60	 mov	 QWORD PTR [rsp+96], rsi
  0006c	48 8b 70 60	 mov	 rsi, QWORD PTR [rax+96]

; 547  :     if (len > LINKCELLS)

  00070	48 83 fe 39	 cmp	 rsi, 57			; 00000039H
  00074	0f 8f d7 00 00
	00		 jg	 $err$20784

; 548  :         goto err;
; 549  :     for (i=0; i<len; i++) {

  0007a	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  0007f	33 db		 xor	 ebx, ebx
  00081	48 85 f6	 test	 rsi, rsi
  00084	7e 66		 jle	 SHORT $LN27@teedataobj@8
  00086	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  0008b	0f 1f 44 00 00	 npad	 5
$LL12@teedataobj@8:

; 550  :         tdo->values[i] = PyList_GET_ITEM(values, i);

  00090	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00094	48 8b 3c d8	 mov	 rdi, QWORD PTR [rax+rbx*8]
  00098	48 89 7c dd 78	 mov	 QWORD PTR [rbp+rbx*8+120], rdi

; 551  :         Py_INCREF(tdo->values[i]);

  0009d	e8 00 00 00 00	 call	 _Py_PXCTX
  000a2	85 c0		 test	 eax, eax
  000a4	75 32		 jne	 SHORT $LN11@teedataobj@8
  000a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000b4	4c 8b cf	 mov	 r9, rdi
  000b7	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000bd	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 06		 jne	 SHORT $LN18@teedataobj@8
  000ce	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  000d2	74 04		 je	 SHORT $LN11@teedataobj@8
$LN18@teedataobj@8:
  000d4	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN11@teedataobj@8:

; 548  :         goto err;
; 549  :     for (i=0; i<len; i++) {

  000d8	48 ff c3	 inc	 rbx
  000db	48 3b de	 cmp	 rbx, rsi
  000de	7d 07		 jge	 SHORT $LN30@teedataobj@8
  000e0	48 8b 44 24 30	 mov	 rax, QWORD PTR values$[rsp]
  000e5	eb a9		 jmp	 SHORT $LL12@teedataobj@8
$LN30@teedataobj@8:
  000e7	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
$LN27@teedataobj@8:
  000ec	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]

; 552  :     }
; 553  :     /* len <= LINKCELLS < INT_MAX */
; 554  :     tdo->numread = Py_SAFE_DOWNCAST(len, Py_ssize_t, int);

  000f1	89 75 68	 mov	 DWORD PTR [rbp+104], esi

; 555  : 
; 556  :     if (len == LINKCELLS) {
; 557  :         if (next != Py_None) {

  000f4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000fb	48 83 fe 39	 cmp	 rsi, 57			; 00000039H
  000ff	75 37		 jne	 SHORT $LN9@teedataobj@8
  00101	48 8b 4c 24 68	 mov	 rcx, QWORD PTR next$[rsp]
  00106	48 3b c8	 cmp	 rcx, rax
  00109	74 34		 je	 SHORT $LN5@teedataobj@8

; 558  :             if (Py_TYPE(next) != &teedataobject_type)

  0010b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:teedataobject_type
  00112	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00116	75 39		 jne	 SHORT $err$20784

; 559  :                 goto err;
; 560  :             assert(tdo->nextlink == NULL);
; 561  :             Py_INCREF(next);

  00118	e8 00 00 00 00	 call	 _Py_IncRef

; 562  :             tdo->nextlink = next;

  0011d	4c 8b 5c 24 68	 mov	 r11, QWORD PTR next$[rsp]
  00122	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  00127	4c 89 5d 70	 mov	 QWORD PTR [rbp+112], r11

; 566  :             goto err; /* shouldn't have a next if we are not full */
; 567  :     }
; 568  :     return (PyObject*)tdo;

  0012b	48 8b c5	 mov	 rax, rbp
  0012e	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]

; 574  : }

  00133	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00137	c3		 ret	 0
$LN9@teedataobj@8:

; 563  :         }
; 564  :     } else {
; 565  :         if (next != Py_None)

  00138	48 39 44 24 68	 cmp	 QWORD PTR next$[rsp], rax
  0013d	75 12		 jne	 SHORT $err$20784
$LN5@teedataobj@8:
  0013f	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]

; 566  :             goto err; /* shouldn't have a next if we are not full */
; 567  :     }
; 568  :     return (PyObject*)tdo;

  00144	48 8b c5	 mov	 rax, rbp
  00147	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]

; 574  : }

  0014c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00150	c3		 ret	 0
$err$20784:

; 569  : 
; 570  : err:
; 571  :     Py_XDECREF(tdo);

  00151	48 8b cd	 mov	 rcx, rbp
  00154	e8 00 00 00 00	 call	 _Py_DecRef

; 572  :     PyErr_SetString(PyExc_ValueError, "Invalid arguments");

  00159	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00160	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@PALKPJEA@Invalid?5arguments?$AA@
  00167	e8 00 00 00 00	 call	 PyErr_SetString
  0016c	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  00171	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]

; 573  :     return NULL;

  00176	33 c0		 xor	 eax, eax

; 574  : }

  00178	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0017c	c3		 ret	 0
teedataobject_new ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$tee_next DD imagerel tee_next
	DD	imagerel tee_next+100
	DD	imagerel $unwind$tee_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tee_next DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT tee_next
_TEXT	SEGMENT
to$ = 48
tee_next PROC						; COMDAT

; 632  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 633  :     PyObject *value, *link;
; 634  : 
; 635  :     if (to->index >= LINKCELLS) {

  0000a	83 79 68 39	 cmp	 DWORD PTR [rcx+104], 57	; 00000039H
  0000e	48 8b d9	 mov	 rbx, rcx
  00011	7c 32		 jl	 SHORT $LN3@tee_next

; 636  :         link = teedataobject_jumplink(to->dataobj);

  00013	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00017	e8 00 00 00 00	 call	 teedataobject_jumplink
  0001c	48 8b f8	 mov	 rdi, rax

; 637  :         if (link == NULL)

  0001f	48 85 c0	 test	 rax, rax
  00022	75 0d		 jne	 SHORT $LN2@tee_next
$LN6@tee_next:

; 638  :             return NULL;

  00024	33 c0		 xor	 eax, eax

; 647  :     return value;
; 648  : }

  00026	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002f	5f		 pop	 rdi
  00030	c3		 ret	 0
$LN2@tee_next:

; 639  :         Py_DECREF(to->dataobj);

  00031	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00035	e8 00 00 00 00	 call	 _Py_DecRef

; 640  :         to->dataobj = (teedataobject *)link;

  0003a	48 89 7b 60	 mov	 QWORD PTR [rbx+96], rdi

; 641  :         to->index = 0;

  0003e	c7 43 68 00 00
	00 00		 mov	 DWORD PTR [rbx+104], 0
$LN3@tee_next:

; 642  :     }
; 643  :     value = teedataobject_getitem(to->dataobj, to->index);

  00045	8b 53 68	 mov	 edx, DWORD PTR [rbx+104]
  00048	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  0004c	e8 00 00 00 00	 call	 teedataobject_getitem

; 644  :     if (value == NULL)

  00051	48 85 c0	 test	 rax, rax

; 645  :         return NULL;

  00054	74 ce		 je	 SHORT $LN6@tee_next

; 646  :     to->index++;

  00056	ff 43 68	 inc	 DWORD PTR [rbx+104]

; 647  :     return value;
; 648  : }

  00059	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00062	5f		 pop	 rdi
  00063	c3		 ret	 0
tee_next ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@DOPCCHLA@tee_traverse?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$tee_traverse DD imagerel tee_traverse
	DD	imagerel tee_traverse+97
	DD	imagerel $unwind$tee_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tee_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0N@DOPCCHLA@tee_traverse?$AA@
CONST	SEGMENT
??_C@_0N@DOPCCHLA@tee_traverse?$AA@ DB 'tee_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT tee_traverse
_TEXT	SEGMENT
to$ = 48
visit$ = 56
arg$ = 64
tee_traverse PROC					; COMDAT

; 652  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 653  :     Py_VISIT((PyObject *)to->dataobj);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN3@tee_traver
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@DOPCCHLA@tee_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 8d 02 00
	00		 mov	 r8d, 653		; 0000028dH
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@tee_traver:
  0003d	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN5@tee_traver
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 02		 jne	 SHORT $LN7@tee_traver
$LN5@tee_traver:

; 654  :     return 0;

  0004f	33 c0		 xor	 eax, eax
$LN7@tee_traver:

; 655  : }

  00051	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00056	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0005b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005f	5f		 pop	 rdi
  00060	c3		 ret	 0
tee_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$tee_copy DD imagerel tee_copy
	DD	imagerel tee_copy+177
	DD	imagerel $unwind$tee_copy
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tee_copy DD 064101H
	DD	087441H
	DD	09340aH
	DD	06006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT tee_copy
_TEXT	SEGMENT
to$ = 64
tee_copy PROC						; COMDAT

; 659  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f1	 mov	 rsi, rcx

; 660  :     teeobject *newto;
; 661  : 
; 662  :     newto = PyObject_GC_New(teeobject, &tee_type);

  0000d	e8 00 00 00 00	 call	 _Py_PXCTX
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:tee_type
  00019	85 c0		 test	 eax, eax
  0001b	74 07		 je	 SHORT $LN4@tee_copy
  0001d	e8 00 00 00 00	 call	 _PxObject_New
  00022	eb 05		 jmp	 SHORT $LN10@tee_copy
$LN4@tee_copy:
  00024	e8 00 00 00 00	 call	 _PyObject_GC_New
$LN10@tee_copy:
  00029	48 8b d8	 mov	 rbx, rax

; 663  :     if (newto == NULL)

  0002c	48 85 c0	 test	 rax, rax
  0002f	75 0b		 jne	 SHORT $LN1@tee_copy

; 671  : }

  00031	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00036	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0003a	5e		 pop	 rsi
  0003b	c3		 ret	 0
$LN1@tee_copy:
  0003c	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi

; 664  :         return NULL;
; 665  :     Py_INCREF(to->dataobj);

  00041	48 8b 7e 60	 mov	 rdi, QWORD PTR [rsi+96]
  00045	e8 00 00 00 00	 call	 _Py_PXCTX
  0004a	85 c0		 test	 eax, eax
  0004c	75 32		 jne	 SHORT $LN7@tee_copy
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0005c	4c 8b cf	 mov	 r9, rdi
  0005f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00065	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0006d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00072	85 c0		 test	 eax, eax
  00074	75 06		 jne	 SHORT $LN6@tee_copy
  00076	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  0007a	74 04		 je	 SHORT $LN7@tee_copy
$LN6@tee_copy:
  0007c	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN7@tee_copy:

; 666  :     newto->dataobj = to->dataobj;

  00080	48 8b 46 60	 mov	 rax, QWORD PTR [rsi+96]

; 667  :     newto->index = to->index;
; 668  :     newto->weakreflist = NULL;
; 669  :     PyObject_GC_Track(newto);

  00084	48 8b cb	 mov	 rcx, rbx
  00087	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax
  0008b	8b 46 68	 mov	 eax, DWORD PTR [rsi+104]
  0008e	48 c7 43 70 00
	00 00 00	 mov	 QWORD PTR [rbx+112], 0
  00096	89 43 68	 mov	 DWORD PTR [rbx+104], eax
  00099	e8 00 00 00 00	 call	 PyObject_GC_Track
  0009e	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 670  :     return (PyObject *)newto;

  000a3	48 8b c3	 mov	 rax, rbx

; 671  : }

  000a6	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000ab	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000af	5e		 pop	 rsi
  000b0	c3		 ret	 0
tee_copy ENDP
_TEXT	ENDS
EXTRN	PyType_IsSubtype:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$tee_fromiterable DD imagerel tee_fromiterable
	DD	imagerel tee_fromiterable+29
	DD	imagerel $unwind$tee_fromiterable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$tee_fromiterable DD imagerel tee_fromiterable+29
	DD	imagerel tee_fromiterable+245
	DD	imagerel $chain$0$tee_fromiterable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$tee_fromiterable DD imagerel tee_fromiterable+245
	DD	imagerel tee_fromiterable+269
	DD	imagerel $chain$2$tee_fromiterable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$tee_fromiterable DD imagerel tee_fromiterable+269
	DD	imagerel tee_fromiterable+291
	DD	imagerel $chain$4$tee_fromiterable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$tee_fromiterable DD 020021H
	DD	087400H
	DD	imagerel tee_fromiterable
	DD	imagerel tee_fromiterable+29
	DD	imagerel $unwind$tee_fromiterable
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$tee_fromiterable DD 020021H
	DD	087400H
	DD	imagerel tee_fromiterable
	DD	imagerel tee_fromiterable+29
	DD	imagerel $unwind$tee_fromiterable
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$tee_fromiterable DD 020521H
	DD	087405H
	DD	imagerel tee_fromiterable
	DD	imagerel tee_fromiterable+29
	DD	imagerel $unwind$tee_fromiterable
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tee_fromiterable DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT tee_fromiterable
_TEXT	SEGMENT
iterable$ = 64
tee_fromiterable PROC					; COMDAT

; 677  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 678  :     teeobject *to;
; 679  :     PyObject *it = NULL;
; 680  : 
; 681  :     it = PyObject_GetIter(iterable);

  00006	e8 00 00 00 00	 call	 PyObject_GetIter
  0000b	48 8b d8	 mov	 rbx, rax

; 682  :     if (it == NULL)

  0000e	48 85 c0	 test	 rax, rax
  00011	75 06		 jne	 SHORT $LN9@tee_fromit

; 705  : }

  00013	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00017	5b		 pop	 rbx
  00018	c3		 ret	 0
$LN9@tee_fromit:

; 683  :         return NULL;
; 684  :     if (PyObject_TypeCheck(it, &tee_type)) {

  00019	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0001d	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  00022	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:tee_type
  00029	48 3b cf	 cmp	 rcx, rdi
  0002c	74 5f		 je	 SHORT $LN7@tee_fromit
  0002e	48 8b d7	 mov	 rdx, rdi
  00031	e8 00 00 00 00	 call	 PyType_IsSubtype
  00036	85 c0		 test	 eax, eax
  00038	75 53		 jne	 SHORT $LN7@tee_fromit

; 686  :         goto done;
; 687  :     }
; 688  : 
; 689  :     to = PyObject_GC_New(teeobject, &tee_type);

  0003a	e8 00 00 00 00	 call	 _Py_PXCTX
  0003f	48 8b cf	 mov	 rcx, rdi
  00042	85 c0		 test	 eax, eax
  00044	74 07		 je	 SHORT $LN12@tee_fromit
  00046	e8 00 00 00 00	 call	 _PxObject_New
  0004b	eb 05		 jmp	 SHORT $LN25@tee_fromit
$LN12@tee_fromit:
  0004d	e8 00 00 00 00	 call	 _PyObject_GC_New
$LN25@tee_fromit:
  00052	48 8b f8	 mov	 rdi, rax

; 690  :     if (to == NULL)

  00055	48 85 c0	 test	 rax, rax
  00058	74 3e		 je	 SHORT $done$20894

; 691  :         goto done;
; 692  :     to->dataobj = (teedataobject *)teedataobject_newinternal(it);

  0005a	48 8b cb	 mov	 rcx, rbx
  0005d	e8 00 00 00 00	 call	 teedataobject_newinternal

; 693  :     if (!to->dataobj) {
; 694  :         PyObject_GC_Del(to);

  00062	48 8b cf	 mov	 rcx, rdi
  00065	48 89 47 60	 mov	 QWORD PTR [rdi+96], rax
  00069	48 85 c0	 test	 rax, rax
  0006c	75 09		 jne	 SHORT $LN5@tee_fromit
  0006e	e8 00 00 00 00	 call	 PyObject_GC_Del

; 695  :         to = NULL;

  00073	33 ff		 xor	 edi, edi

; 696  :         goto done;

  00075	eb 21		 jmp	 SHORT $done$20894
$LN5@tee_fromit:

; 697  :     }
; 698  : 
; 699  :     to->index = 0;

  00077	c7 47 68 00 00
	00 00		 mov	 DWORD PTR [rdi+104], 0

; 700  :     to->weakreflist = NULL;

  0007e	48 c7 47 70 00
	00 00 00	 mov	 QWORD PTR [rdi+112], 0

; 701  :     PyObject_GC_Track(to);

  00086	e8 00 00 00 00	 call	 PyObject_GC_Track
  0008b	eb 0b		 jmp	 SHORT $done$20894
$LN7@tee_fromit:

; 685  :         to = (teeobject *)tee_copy((teeobject *)it);

  0008d	48 8b cb	 mov	 rcx, rbx
  00090	e8 00 00 00 00	 call	 tee_copy
  00095	48 8b f8	 mov	 rdi, rax
$done$20894:

; 702  : done:
; 703  :     Py_XDECREF(it);

  00098	e8 00 00 00 00	 call	 _Py_PXCTX
  0009d	85 c0		 test	 eax, eax
  0009f	75 74		 jne	 SHORT $LN3@tee_fromit
  000a1	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000a5	a8 20		 test	 al, 32			; 00000020H
  000a7	75 64		 jne	 SHORT $LN18@tee_fromit
  000a9	84 c0		 test	 al, al
  000ab	78 60		 js	 SHORT $LN18@tee_fromit
  000ad	a8 02		 test	 al, 2
  000af	75 64		 jne	 SHORT $LN3@tee_fromit
  000b1	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000b5	75 5e		 jne	 SHORT $LN3@tee_fromit
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	4c 8b cb	 mov	 r9, rbx
  000c8	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000ce	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d6	e8 00 00 00 00	 call	 _PyParallel_Guard
  000db	48 8b cb	 mov	 rcx, rbx
  000de	85 c0		 test	 eax, eax
  000e0	74 13		 je	 SHORT $LN23@tee_fromit
  000e2	e8 00 00 00 00	 call	 _Px_Dealloc

; 704  :     return (PyObject *)to;

  000e7	48 8b c7	 mov	 rax, rdi
  000ea	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 705  : }

  000ef	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000f3	5b		 pop	 rbx
  000f4	c3		 ret	 0

; 702  : done:
; 703  :     Py_XDECREF(it);

$LN23@tee_fromit:
  000f5	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000f9	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 704  :     return (PyObject *)to;

  000ff	48 8b c7	 mov	 rax, rdi
  00102	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 705  : }

  00107	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0010b	5b		 pop	 rbx
  0010c	c3		 ret	 0

; 702  : done:
; 703  :     Py_XDECREF(it);

$LN18@tee_fromit:
  0010d	48 8b cb	 mov	 rcx, rbx
  00110	e8 00 00 00 00	 call	 Px_DecRef
$LN3@tee_fromit:

; 704  :     return (PyObject *)to;

  00115	48 8b c7	 mov	 rax, rdi
  00118	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 705  : }

  0011d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00121	5b		 pop	 rbx
  00122	c3		 ret	 0
tee_fromiterable ENDP
_TEXT	ENDS
PUBLIC	??_C@_04DBFFPBBK@_tee?$AA@			; `string'
EXTRN	PyArg_UnpackTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$tee_new DD imagerel tee_new
	DD	imagerel tee_new+67
	DD	imagerel $unwind$tee_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tee_new DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_04DBFFPBBK@_tee?$AA@
CONST	SEGMENT
??_C@_04DBFFPBBK@_tee?$AA@ DB '_tee', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT tee_new
_TEXT	SEGMENT
type$ = 64
args$ = 72
kw$ = 80
iterable$ = 88
tee_new	PROC						; COMDAT

; 709  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx

; 710  :     PyObject *iterable;
; 711  : 
; 712  :     if (!PyArg_UnpackTuple(args, "_tee", 1, 1, &iterable))

  00007	48 8d 4c 24 58	 lea	 rcx, QWORD PTR iterable$[rsp]
  0000c	41 b9 01 00 00
	00		 mov	 r9d, 1
  00012	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00017	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04DBFFPBBK@_tee?$AA@
  0001e	48 8b c8	 mov	 rcx, rax
  00021	45 8b c1	 mov	 r8d, r9d
  00024	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00029	85 c0		 test	 eax, eax
  0002b	75 07		 jne	 SHORT $LN1@tee_new

; 713  :         return NULL;

  0002d	33 c0		 xor	 eax, eax

; 715  : }

  0002f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00033	c3		 ret	 0
$LN1@tee_new:

; 714  :     return tee_fromiterable(iterable);

  00034	48 8b 4c 24 58	 mov	 rcx, QWORD PTR iterable$[rsp]
  00039	e8 00 00 00 00	 call	 tee_fromiterable

; 715  : }

  0003e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00042	c3		 ret	 0
tee_new	ENDP
_TEXT	ENDS
PUBLIC	??_C@_09DCPDBLOL@tee_clear?$AA@			; `string'
EXTRN	PyObject_ClearWeakRefs:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$tee_clear DD imagerel tee_clear
	DD	imagerel tee_clear+75
	DD	imagerel $unwind$tee_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$tee_clear DD imagerel tee_clear+75
	DD	imagerel tee_clear+184
	DD	imagerel $chain$0$tee_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$tee_clear DD imagerel tee_clear+184
	DD	imagerel tee_clear+207
	DD	imagerel $chain$2$tee_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$tee_clear DD imagerel tee_clear+207
	DD	imagerel tee_clear+220
	DD	imagerel $chain$4$tee_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$tee_clear DD imagerel tee_clear+220
	DD	imagerel tee_clear+228
	DD	imagerel $chain$5$tee_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$tee_clear DD 021H
	DD	imagerel tee_clear
	DD	imagerel tee_clear+75
	DD	imagerel $unwind$tee_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$tee_clear DD 020021H
	DD	083400H
	DD	imagerel tee_clear
	DD	imagerel tee_clear+75
	DD	imagerel $unwind$tee_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$tee_clear DD 020021H
	DD	083400H
	DD	imagerel tee_clear
	DD	imagerel tee_clear+75
	DD	imagerel $unwind$tee_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$tee_clear DD 020521H
	DD	083405H
	DD	imagerel tee_clear
	DD	imagerel tee_clear+75
	DD	imagerel $unwind$tee_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tee_clear DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT ??_C@_09DCPDBLOL@tee_clear?$AA@
CONST	SEGMENT
??_C@_09DCPDBLOL@tee_clear?$AA@ DB 'tee_clear', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
CONST	ENDS
;	COMDAT tee_clear
_TEXT	SEGMENT
to$ = 64
tee_clear PROC						; COMDAT

; 719  : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 720  :     if (to->weakreflist != NULL)

  00006	48 83 79 70 00	 cmp	 QWORD PTR [rcx+112], 0
  0000b	48 8b f9	 mov	 rdi, rcx
  0000e	74 05		 je	 SHORT $LN4@tee_clear

; 721  :         PyObject_ClearWeakRefs((PyObject *) to);

  00010	e8 00 00 00 00	 call	 PyObject_ClearWeakRefs
$LN4@tee_clear:

; 722  :     Py_CLEAR(to->dataobj);

  00015	4c 8b 4f 60	 mov	 r9, QWORD PTR [rdi+96]
  00019	4d 85 c9	 test	 r9, r9
  0001c	0f 84 ba 00 00
	00		 je	 $LN22@tee_clear
  00022	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09DCPDBLOL@tee_clear?$AA@
  00030	41 b8 d2 02 00
	00		 mov	 r8d, 722		; 000002d2H
  00036	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0003e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00043	85 c0		 test	 eax, eax
  00045	0f 85 91 00 00
	00		 jne	 $LN22@tee_clear
  0004b	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00050	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  00054	48 c7 47 60 00
	00 00 00	 mov	 QWORD PTR [rdi+96], 0
  0005c	e8 00 00 00 00	 call	 _Py_PXCTX
  00061	85 c0		 test	 eax, eax
  00063	75 72		 jne	 SHORT $LN23@tee_clear
  00065	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00069	a8 20		 test	 al, 32			; 00000020H
  0006b	75 62		 jne	 SHORT $LN12@tee_clear
  0006d	84 c0		 test	 al, al
  0006f	78 5e		 js	 SHORT $LN12@tee_clear
  00071	a8 02		 test	 al, 2
  00073	75 62		 jne	 SHORT $LN23@tee_clear
  00075	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00079	75 5c		 jne	 SHORT $LN23@tee_clear
  0007b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00082	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00089	4c 8b cb	 mov	 r9, rbx
  0008c	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00092	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0009a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009f	48 8b cb	 mov	 rcx, rbx
  000a2	85 c0		 test	 eax, eax
  000a4	74 12		 je	 SHORT $LN17@tee_clear
  000a6	e8 00 00 00 00	 call	 _Px_Dealloc
  000ab	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 723  :     return 0;

  000b0	33 c0		 xor	 eax, eax

; 724  : }

  000b2	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b6	5f		 pop	 rdi
  000b7	c3		 ret	 0

; 722  :     Py_CLEAR(to->dataobj);

$LN17@tee_clear:
  000b8	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000bc	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000c2	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 723  :     return 0;

  000c7	33 c0		 xor	 eax, eax

; 724  : }

  000c9	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000cd	5f		 pop	 rdi
  000ce	c3		 ret	 0

; 722  :     Py_CLEAR(to->dataobj);

$LN12@tee_clear:
  000cf	48 8b cb	 mov	 rcx, rbx
  000d2	e8 00 00 00 00	 call	 Px_DecRef
$LN23@tee_clear:
  000d7	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN22@tee_clear:

; 723  :     return 0;

  000dc	33 c0		 xor	 eax, eax

; 724  : }

  000de	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000e2	5f		 pop	 rdi
  000e3	c3		 ret	 0
tee_clear ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$tee_dealloc DD imagerel tee_dealloc
	DD	imagerel tee_dealloc+35
	DD	imagerel $unwind$tee_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tee_dealloc DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT tee_dealloc
_TEXT	SEGMENT
to$ = 48
tee_dealloc PROC					; COMDAT

; 728  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 729  :     PyObject_GC_UnTrack(to);

  00009	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 730  :     tee_clear(to);

  0000e	48 8b cb	 mov	 rcx, rbx
  00011	e8 00 00 00 00	 call	 tee_clear

; 731  :     PyObject_GC_Del(to);

  00016	48 8b cb	 mov	 rcx, rbx

; 732  : }

  00019	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001d	5b		 pop	 rbx
  0001e	e9 00 00 00 00	 jmp	 PyObject_GC_Del
tee_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_09CLHOPJKH@O?$CI?$CI?$CJ?$CJ?$CIOi?$CJ?$AA@ ; `string'
;	COMDAT ??_C@_09CLHOPJKH@O?$CI?$CI?$CJ?$CJ?$CIOi?$CJ?$AA@
CONST	SEGMENT
??_C@_09CLHOPJKH@O?$CI?$CI?$CJ?$CJ?$CIOi?$CJ?$AA@ DB 'O(())(Oi)', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT tee_reduce
_TEXT	SEGMENT
to$ = 8
tee_reduce PROC						; COMDAT

; 737  :     return Py_BuildValue("O(())(Oi)", Py_TYPE(to), to->dataobj, to->index);

  00000	44 8b 49 68	 mov	 r9d, DWORD PTR [rcx+104]
  00004	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]
  00008	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0000c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09CLHOPJKH@O?$CI?$CI?$CJ?$CJ?$CIOi?$CJ?$AA@

; 738  : }

  00013	e9 00 00 00 00	 jmp	 Py_BuildValue
tee_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@KNGCOGKE@Index?5out?5of?5range?$AA@	; `string'
PUBLIC	??_C@_0N@FDKFAAFH@tee_setstate?$AA@		; `string'
PUBLIC	??_C@_03JAHMJELB@O?$CBi?$AA@			; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$tee_setstate DD imagerel tee_setstate
	DD	imagerel tee_setstate+263
	DD	imagerel $unwind$tee_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tee_setstate DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0BD@KNGCOGKE@Index?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0BD@KNGCOGKE@Index?5out?5of?5range?$AA@ DB 'Index out of range', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FDKFAAFH@tee_setstate?$AA@
CONST	SEGMENT
??_C@_0N@FDKFAAFH@tee_setstate?$AA@ DB 'tee_setstate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JAHMJELB@O?$CBi?$AA@
CONST	SEGMENT
??_C@_03JAHMJELB@O?$CBi?$AA@ DB 'O!i', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
CONST	ENDS
;	COMDAT tee_setstate
_TEXT	SEGMENT
to$ = 64
state$ = 72
index$ = 80
tdo$ = 88
tee_setstate PROC					; COMDAT

; 742  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx
  00009	48 8b c2	 mov	 rax, rdx

; 743  :     teedataobject *tdo;
; 744  :     int index;
; 745  :     if (!PyArg_ParseTuple(state, "O!i", &teedataobject_type, &tdo, &index))

  0000c	48 8d 4c 24 50	 lea	 rcx, QWORD PTR index$[rsp]
  00011	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00016	4c 8d 4c 24 58	 lea	 r9, QWORD PTR tdo$[rsp]
  0001b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:teedataobject_type
  00022	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03JAHMJELB@O?$CBi?$AA@
  00029	48 8b c8	 mov	 rcx, rax
  0002c	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00031	85 c0		 test	 eax, eax

; 746  :         return NULL;

  00033	0f 84 c6 00 00
	00		 je	 $LN14@tee_setsta

; 747  :     if (index < 0 || index > LINKCELLS) {

  00039	83 7c 24 50 39	 cmp	 DWORD PTR index$[rsp], 57 ; 00000039H
  0003e	0f 87 a8 00 00
	00		 ja	 $LN5@tee_setsta

; 750  :     }
; 751  :     Py_CLEAR(to->dataobj);

  00044	4c 8b 4b 60	 mov	 r9, QWORD PTR [rbx+96]
  00048	4d 85 c9	 test	 r9, r9
  0004b	74 36		 je	 SHORT $LN3@tee_setsta
  0004d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  00054	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@FDKFAAFH@tee_setstate?$AA@
  0005b	41 b8 ef 02 00
	00		 mov	 r8d, 751		; 000002efH
  00061	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00069	e8 00 00 00 00	 call	 _PyParallel_Guard
  0006e	85 c0		 test	 eax, eax
  00070	75 11		 jne	 SHORT $LN3@tee_setsta
  00072	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00076	48 c7 43 60 00
	00 00 00	 mov	 QWORD PTR [rbx+96], 0
  0007e	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@tee_setsta:

; 752  :     to->dataobj = tdo;

  00083	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tdo$[rsp]
  00088	48 89 4b 60	 mov	 QWORD PTR [rbx+96], rcx

; 753  :     Py_INCREF(to->dataobj);

  0008c	e8 00 00 00 00	 call	 _Py_IncRef

; 754  :     to->index = index;

  00091	44 8b 5c 24 50	 mov	 r11d, DWORD PTR index$[rsp]
  00096	44 89 5b 68	 mov	 DWORD PTR [rbx+104], r11d

; 755  :     Py_RETURN_NONE;

  0009a	e8 00 00 00 00	 call	 _Py_PXCTX
  0009f	85 c0		 test	 eax, eax
  000a1	75 3c		 jne	 SHORT $LN11@tee_setsta
  000a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  000aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000b8	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000be	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000c6	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cb	85 c0		 test	 eax, eax
  000cd	75 09		 jne	 SHORT $LN10@tee_setsta
  000cf	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  000d6	74 07		 je	 SHORT $LN11@tee_setsta
$LN10@tee_setsta:
  000d8	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN11@tee_setsta:
  000df	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 756  : }

  000e6	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ea	5b		 pop	 rbx
  000eb	c3		 ret	 0
$LN5@tee_setsta:

; 748  :         PyErr_SetString(PyExc_ValueError, "Index out of range");

  000ec	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000f3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@KNGCOGKE@Index?5out?5of?5range?$AA@
  000fa	e8 00 00 00 00	 call	 PyErr_SetString
$LN14@tee_setsta:

; 749  :         return NULL;

  000ff	33 c0		 xor	 eax, eax

; 756  : }

  00101	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00105	5b		 pop	 rbx
  00106	c3		 ret	 0
tee_setstate ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@BCBHJBBL@n?5must?5be?5?$DO?$DN?50?$AA@	; `string'
PUBLIC	??_C@_03LLFJLPJF@O?$HMn?$AA@			; `string'
EXTRN	_PyObject_CallMethodId:PROC
EXTRN	_PyObject_HasAttrId:PROC
EXTRN	PyTuple_New:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$tee DD	imagerel tee
	DD	imagerel tee+78
	DD	imagerel $unwind$tee
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$tee DD	imagerel tee+78
	DD	imagerel tee+106
	DD	imagerel $chain$0$tee
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$tee DD	imagerel tee+106
	DD	imagerel tee+166
	DD	imagerel $chain$3$tee
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$tee DD	imagerel tee+166
	DD	imagerel tee+266
	DD	imagerel $chain$7$tee
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$tee DD	imagerel tee+266
	DD	imagerel tee+335
	DD	imagerel $chain$8$tee
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$tee DD	imagerel tee+335
	DD	imagerel tee+350
	DD	imagerel $chain$9$tee
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$10$tee DD imagerel tee+350
	DD	imagerel tee+360
	DD	imagerel $chain$10$tee
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$12$tee DD imagerel tee+360
	DD	imagerel tee+372
	DD	imagerel $chain$12$tee
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$12$tee DD 0a0021H
	DD	04c400H
	DD	057400H
	DD	066400H
	DD	095400H
	DD	083400H
	DD	imagerel tee
	DD	imagerel tee+78
	DD	imagerel $unwind$tee
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$10$tee DD 020021H
	DD	095400H
	DD	imagerel tee
	DD	imagerel tee+78
	DD	imagerel $unwind$tee
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$tee DD	021H
	DD	imagerel tee+166
	DD	imagerel tee+266
	DD	imagerel $chain$7$tee
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$tee DD	020521H
	DD	057405H
	DD	imagerel tee+166
	DD	imagerel tee+266
	DD	imagerel $chain$7$tee
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$tee DD	081e21H
	DD	04c41eH
	DD	066419H
	DD	095400H
	DD	083400H
	DD	imagerel tee
	DD	imagerel tee+78
	DD	imagerel $unwind$tee
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$tee DD	041621H
	DD	083416H
	DD	095400H
	DD	imagerel tee
	DD	imagerel tee+78
	DD	imagerel $unwind$tee
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$tee DD	020521H
	DD	095405H
	DD	imagerel tee
	DD	imagerel tee+78
	DD	imagerel $unwind$tee
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tee DD	010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0P@BCBHJBBL@n?5must?5be?5?$DO?$DN?50?$AA@
CONST	SEGMENT
??_C@_0P@BCBHJBBL@n?5must?5be?5?$DO?$DN?50?$AA@ DB 'n must be >= 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03LLFJLPJF@O?$HMn?$AA@
CONST	SEGMENT
??_C@_03LLFJLPJF@O?$HMn?$AA@ DB 'O|n', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT tee
_TEXT	SEGMENT
self$ = 64
args$ = 72
n$ = 80
iterable$ = 88
tee	PROC						; COMDAT

; 813  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 814  :     Py_ssize_t i, n=2;
; 815  :     PyObject *it, *iterable, *copyable, *result;
; 816  :     _Py_IDENTIFIER(__copy__);
; 817  : 
; 818  :     if (!PyArg_ParseTuple(args, "O|n", &iterable, &n))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 4c 24 50	 lea	 r9, QWORD PTR n$[rsp]
  0000c	4c 8d 44 24 58	 lea	 r8, QWORD PTR iterable$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03LLFJLPJF@O?$HMn?$AA@
  00018	48 c7 44 24 50
	02 00 00 00	 mov	 QWORD PTR n$[rsp], 2
  00021	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00026	85 c0		 test	 eax, eax

; 819  :         return NULL;

  00028	74 1d		 je	 SHORT $LN23@tee

; 820  :     if (n < 0) {

  0002a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR n$[rsp]
  0002f	48 85 c9	 test	 rcx, rcx
  00032	79 1a		 jns	 SHORT $LN11@tee

; 821  :         PyErr_SetString(PyExc_ValueError, "n must be >= 0");

  00034	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0003b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@BCBHJBBL@n?5must?5be?5?$DO?$DN?50?$AA@
  00042	e8 00 00 00 00	 call	 PyErr_SetString
$LN23@tee:

; 822  :         return NULL;

  00047	33 c0		 xor	 eax, eax

; 854  : }

  00049	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004d	c3		 ret	 0
$LN11@tee:
  0004e	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp

; 823  :     }
; 824  :     result = PyTuple_New(n);

  00053	e8 00 00 00 00	 call	 PyTuple_New
  00058	48 8b e8	 mov	 rbp, rax

; 825  :     if (result == NULL)

  0005b	48 85 c0	 test	 rax, rax
  0005e	75 0a		 jne	 SHORT $LN10@tee
  00060	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]

; 854  : }

  00065	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00069	c3		 ret	 0
$LN10@tee:

; 826  :         return NULL;
; 827  :     if (n == 0)

  0006a	48 83 7c 24 50
	00		 cmp	 QWORD PTR n$[rsp], 0

; 828  :         return result;

  00070	0f 84 e8 00 00
	00		 je	 $LN18@tee

; 829  :     it = PyObject_GetIter(iterable);

  00076	48 8b 4c 24 58	 mov	 rcx, QWORD PTR iterable$[rsp]
  0007b	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00080	e8 00 00 00 00	 call	 PyObject_GetIter
  00085	48 8b d8	 mov	 rbx, rax

; 830  :     if (it == NULL) {

  00088	48 85 c0	 test	 rax, rax
  0008b	75 19		 jne	 SHORT $LN8@tee

; 831  :         Py_DECREF(result);

  0008d	48 8b cd	 mov	 rcx, rbp
  00090	e8 00 00 00 00	 call	 _Py_DecRef
  00095	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0009a	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]

; 832  :         return NULL;

  0009f	33 c0		 xor	 eax, eax

; 854  : }

  000a1	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a5	c3		 ret	 0
$LN8@tee:

; 833  :     }
; 834  :     if (!_PyObject_HasAttrId(it, &PyId___copy__)) {

  000a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000ac	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  000b5	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId___copy__@?1??tee@@9@9
  000ba	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  000bf	4c 89 64 24 20	 mov	 QWORD PTR [rsp+32], r12
  000c4	4c 8b 24 c8	 mov	 r12, QWORD PTR [rax+rcx*8]
  000c8	4c 03 e2	 add	 r12, rdx
  000cb	48 8b cb	 mov	 rcx, rbx
  000ce	49 8b d4	 mov	 rdx, r12
  000d1	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  000d6	85 c0		 test	 eax, eax
  000d8	75 24		 jne	 SHORT $LN7@tee

; 835  :         copyable = tee_fromiterable(it);

  000da	48 8b cb	 mov	 rcx, rbx
  000dd	e8 00 00 00 00	 call	 tee_fromiterable

; 836  :         Py_DECREF(it);

  000e2	48 8b cb	 mov	 rcx, rbx
  000e5	48 8b f0	 mov	 rsi, rax
  000e8	e8 00 00 00 00	 call	 _Py_DecRef

; 837  :         if (copyable == NULL) {

  000ed	48 85 f6	 test	 rsi, rsi
  000f0	75 0f		 jne	 SHORT $LN5@tee

; 838  :             Py_DECREF(result);

  000f2	48 8b cd	 mov	 rcx, rbp
  000f5	e8 00 00 00 00	 call	 _Py_DecRef

; 839  :             return NULL;

  000fa	33 c0		 xor	 eax, eax
  000fc	eb 51		 jmp	 SHORT $LN21@tee
$LN7@tee:

; 840  :         }
; 841  :     } else
; 842  :         copyable = it;

  000fe	48 8b f3	 mov	 rsi, rbx
$LN5@tee:

; 844  :     for (i=1 ; i<n ; i++) {

  00101	bb 01 00 00 00	 mov	 ebx, 1
  00106	48 89 75 70	 mov	 QWORD PTR [rbp+112], rsi
  0010a	48 89 7c 24 28	 mov	 QWORD PTR [rsp+40], rdi
  0010f	48 3b 5c 24 50	 cmp	 rbx, QWORD PTR n$[rsp]
  00114	7d 31		 jge	 SHORT $LN2@tee

; 843  :     PyTuple_SET_ITEM(result, 0, copyable);

  00116	48 8d 7d 78	 lea	 rdi, QWORD PTR [rbp+120]
  0011a	66 0f 1f 44 00
	00		 npad	 6
$LL4@tee:

; 845  : 
; 846  :         copyable = _PyObject_CallMethodId(copyable, &PyId___copy__, NULL);

  00120	45 33 c0	 xor	 r8d, r8d
  00123	49 8b d4	 mov	 rdx, r12
  00126	48 8b ce	 mov	 rcx, rsi
  00129	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  0012e	48 8b f0	 mov	 rsi, rax

; 847  :         if (copyable == NULL) {

  00131	48 85 c0	 test	 rax, rax
  00134	74 32		 je	 SHORT $LN16@tee

; 850  :         }
; 851  :         PyTuple_SET_ITEM(result, i, copyable);

  00136	48 89 07	 mov	 QWORD PTR [rdi], rax
  00139	48 ff c3	 inc	 rbx
  0013c	48 83 c7 08	 add	 rdi, 8
  00140	48 3b 5c 24 50	 cmp	 rbx, QWORD PTR n$[rsp]
  00145	7c d9		 jl	 SHORT $LL4@tee
$LN2@tee:

; 852  :     }
; 853  :     return result;

  00147	48 8b c5	 mov	 rax, rbp
$LN22@tee:
  0014a	48 8b 7c 24 28	 mov	 rdi, QWORD PTR [rsp+40]
$LN21@tee:
  0014f	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  00154	4c 8b 64 24 20	 mov	 r12, QWORD PTR [rsp+32]
  00159	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN18@tee:
  0015e	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]

; 854  : }

  00163	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00167	c3		 ret	 0
$LN16@tee:

; 848  :             Py_DECREF(result);

  00168	48 8b cd	 mov	 rcx, rbp
  0016b	e8 00 00 00 00	 call	 _Py_DecRef

; 849  :             return NULL;

  00170	33 c0		 xor	 eax, eax
  00172	eb d6		 jmp	 SHORT $LN22@tee
tee	ENDP
_TEXT	ENDS
PUBLIC	??_C@_05EEELFEFN@cycle?$AA@			; `string'
PUBLIC	??_C@_07BBALHKAM@cycle?$CI?$CJ?$AA@		; `string'
EXTRN	_PyArg_NoKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$cycle_new DD imagerel cycle_new
	DD	imagerel cycle_new+118
	DD	imagerel $unwind$cycle_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$cycle_new DD imagerel cycle_new+118
	DD	imagerel cycle_new+162
	DD	imagerel $chain$0$cycle_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$cycle_new DD imagerel cycle_new+162
	DD	imagerel cycle_new+212
	DD	imagerel $chain$2$cycle_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$cycle_new DD imagerel cycle_new+212
	DD	imagerel cycle_new+243
	DD	imagerel $chain$4$cycle_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$cycle_new DD 020021H
	DD	097400H
	DD	imagerel cycle_new
	DD	imagerel cycle_new+118
	DD	imagerel $unwind$cycle_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$cycle_new DD 020021H
	DD	097400H
	DD	imagerel cycle_new
	DD	imagerel cycle_new+118
	DD	imagerel $unwind$cycle_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$cycle_new DD 020521H
	DD	097405H
	DD	imagerel cycle_new
	DD	imagerel cycle_new+118
	DD	imagerel $unwind$cycle_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cycle_new DD 040a01H
	DD	0a340aH
	DD	06006520aH
xdata	ENDS
;	COMDAT ??_C@_05EEELFEFN@cycle?$AA@
CONST	SEGMENT
??_C@_05EEELFEFN@cycle?$AA@ DB 'cycle', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BBALHKAM@cycle?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_07BBALHKAM@cycle?$CI?$CJ?$AA@ DB 'cycle()', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT cycle_new
_TEXT	SEGMENT
iterable$ = 64
type$ = 64
args$ = 72
kwds$ = 80
cycle_new PROC						; COMDAT

; 873  : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 874  :     PyObject *it;
; 875  :     PyObject *iterable;
; 876  :     PyObject *saved;
; 877  :     cycleobject *lz;
; 878  : 
; 879  :     if (type == &cycle_type && !_PyArg_NoKeywords("cycle()", kwds))

  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:cycle_type
  00011	48 8b da	 mov	 rbx, rdx
  00014	48 8b f1	 mov	 rsi, rcx
  00017	48 3b c8	 cmp	 rcx, rax
  0001a	75 20		 jne	 SHORT $LN5@cycle_new
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07BBALHKAM@cycle?$CI?$CJ?$AA@
  00023	49 8b d0	 mov	 rdx, r8
  00026	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  0002b	85 c0		 test	 eax, eax
  0002d	75 0d		 jne	 SHORT $LN5@cycle_new
$LN9@cycle_new:

; 880  :         return NULL;

  0002f	33 c0		 xor	 eax, eax

; 904  :     lz->saved = saved;
; 905  :     lz->firstpass = 0;
; 906  : 
; 907  :     return (PyObject *)lz;
; 908  : }

  00031	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00036	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0003a	5e		 pop	 rsi
  0003b	c3		 ret	 0
$LN5@cycle_new:

; 881  : 
; 882  :     if (!PyArg_UnpackTuple(args, "cycle", 1, 1, &iterable))

  0003c	48 8d 44 24 40	 lea	 rax, QWORD PTR iterable$[rsp]
  00041	41 b9 01 00 00
	00		 mov	 r9d, 1
  00047	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05EEELFEFN@cycle?$AA@
  0004e	45 8b c1	 mov	 r8d, r9d
  00051	48 8b cb	 mov	 rcx, rbx
  00054	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00059	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0005e	85 c0		 test	 eax, eax

; 883  :         return NULL;

  00060	74 cd		 je	 SHORT $LN9@cycle_new

; 884  : 
; 885  :     /* Get iterator. */
; 886  :     it = PyObject_GetIter(iterable);

  00062	48 8b 4c 24 40	 mov	 rcx, QWORD PTR iterable$[rsp]
  00067	e8 00 00 00 00	 call	 PyObject_GetIter
  0006c	48 8b d8	 mov	 rbx, rax

; 887  :     if (it == NULL)

  0006f	48 85 c0	 test	 rax, rax

; 888  :         return NULL;

  00072	74 bb		 je	 SHORT $LN9@cycle_new

; 889  : 
; 890  :     saved = PyList_New(0);

  00074	33 c9		 xor	 ecx, ecx
  00076	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  0007b	e8 00 00 00 00	 call	 PyList_New
  00080	48 8b f8	 mov	 rdi, rax

; 891  :     if (saved == NULL) {

  00083	48 85 c0	 test	 rax, rax
  00086	75 1a		 jne	 SHORT $LN2@cycle_new

; 892  :         Py_DECREF(it);

  00088	48 8b cb	 mov	 rcx, rbx
  0008b	e8 00 00 00 00	 call	 _Py_DecRef
  00090	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]

; 893  :         return NULL;

  00095	33 c0		 xor	 eax, eax

; 904  :     lz->saved = saved;
; 905  :     lz->firstpass = 0;
; 906  : 
; 907  :     return (PyObject *)lz;
; 908  : }

  00097	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0009c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
$LN2@cycle_new:

; 894  :     }
; 895  : 
; 896  :     /* create cycleobject structure */
; 897  :     lz = (cycleobject *)type->tp_alloc(type, 0);

  000a2	33 d2		 xor	 edx, edx
  000a4	48 8b ce	 mov	 rcx, rsi
  000a7	ff 96 88 01 00
	00		 call	 QWORD PTR [rsi+392]

; 898  :     if (lz == NULL) {

  000ad	48 85 c0	 test	 rax, rax
  000b0	75 22		 jne	 SHORT $LN1@cycle_new

; 899  :         Py_DECREF(it);

  000b2	48 8b cb	 mov	 rcx, rbx
  000b5	e8 00 00 00 00	 call	 _Py_DecRef

; 900  :         Py_DECREF(saved);

  000ba	48 8b cf	 mov	 rcx, rdi
  000bd	e8 00 00 00 00	 call	 _Py_DecRef
  000c2	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]

; 901  :         return NULL;

  000c7	33 c0		 xor	 eax, eax

; 904  :     lz->saved = saved;
; 905  :     lz->firstpass = 0;
; 906  : 
; 907  :     return (PyObject *)lz;
; 908  : }

  000c9	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000ce	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d2	5e		 pop	 rsi
  000d3	c3		 ret	 0
$LN1@cycle_new:

; 902  :     }
; 903  :     lz->it = it;

  000d4	48 89 58 60	 mov	 QWORD PTR [rax+96], rbx

; 904  :     lz->saved = saved;
; 905  :     lz->firstpass = 0;
; 906  : 
; 907  :     return (PyObject *)lz;
; 908  : }

  000d8	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000dd	48 89 78 68	 mov	 QWORD PTR [rax+104], rdi
  000e1	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  000e6	c7 40 70 00 00
	00 00		 mov	 DWORD PTR [rax+112], 0
  000ed	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000f1	5e		 pop	 rsi
  000f2	c3		 ret	 0
cycle_new ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$cycle_dealloc DD imagerel cycle_dealloc
	DD	imagerel cycle_dealloc+262
	DD	imagerel $unwind$cycle_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cycle_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT cycle_dealloc
_TEXT	SEGMENT
lz$ = 64
cycle_dealloc PROC					; COMDAT

; 912  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 913  :     PyObject_GC_UnTrack(lz);

  0000d	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 914  :     Py_XDECREF(lz->saved);

  00012	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  00016	48 85 db	 test	 rbx, rbx
  00019	74 65		 je	 SHORT $LN7@cycle_deal
  0001b	e8 00 00 00 00	 call	 _Py_PXCTX
  00020	85 c0		 test	 eax, eax
  00022	75 5c		 jne	 SHORT $LN7@cycle_deal
  00024	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00028	a8 20		 test	 al, 32			; 00000020H
  0002a	75 4c		 jne	 SHORT $LN15@cycle_deal
  0002c	84 c0		 test	 al, al
  0002e	78 48		 js	 SHORT $LN15@cycle_deal
  00030	a8 02		 test	 al, 2
  00032	75 4c		 jne	 SHORT $LN7@cycle_deal
  00034	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00038	75 46		 jne	 SHORT $LN7@cycle_deal
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00048	4c 8b cb	 mov	 r9, rbx
  0004b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00051	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00059	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005e	48 8b cb	 mov	 rcx, rbx
  00061	85 c0		 test	 eax, eax
  00063	74 07		 je	 SHORT $LN20@cycle_deal
  00065	e8 00 00 00 00	 call	 _Px_Dealloc
  0006a	eb 14		 jmp	 SHORT $LN7@cycle_deal
$LN20@cycle_deal:
  0006c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00070	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00076	eb 08		 jmp	 SHORT $LN7@cycle_deal
$LN15@cycle_deal:
  00078	48 8b cb	 mov	 rcx, rbx
  0007b	e8 00 00 00 00	 call	 Px_DecRef
$LN7@cycle_deal:

; 915  :     Py_XDECREF(lz->it);

  00080	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  00084	48 85 db	 test	 rbx, rbx
  00087	74 65		 je	 SHORT $LN3@cycle_deal
  00089	e8 00 00 00 00	 call	 _Py_PXCTX
  0008e	85 c0		 test	 eax, eax
  00090	75 5c		 jne	 SHORT $LN3@cycle_deal
  00092	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00096	a8 20		 test	 al, 32			; 00000020H
  00098	75 4c		 jne	 SHORT $LN26@cycle_deal
  0009a	84 c0		 test	 al, al
  0009c	78 48		 js	 SHORT $LN26@cycle_deal
  0009e	a8 02		 test	 al, 2
  000a0	75 4c		 jne	 SHORT $LN3@cycle_deal
  000a2	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000a6	75 46		 jne	 SHORT $LN3@cycle_deal
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000b6	4c 8b cb	 mov	 r9, rbx
  000b9	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000bf	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cc	48 8b cb	 mov	 rcx, rbx
  000cf	85 c0		 test	 eax, eax
  000d1	74 07		 je	 SHORT $LN31@cycle_deal
  000d3	e8 00 00 00 00	 call	 _Px_Dealloc
  000d8	eb 14		 jmp	 SHORT $LN3@cycle_deal
$LN31@cycle_deal:
  000da	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000de	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000e4	eb 08		 jmp	 SHORT $LN3@cycle_deal
$LN26@cycle_deal:
  000e6	48 8b cb	 mov	 rcx, rbx
  000e9	e8 00 00 00 00	 call	 Px_DecRef
$LN3@cycle_deal:

; 916  :     Py_TYPE(lz)->tp_free(lz);

  000ee	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000f2	48 8b cf	 mov	 rcx, rdi

; 917  : }

  000f5	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000fa	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000fe	5f		 pop	 rdi
  000ff	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
cycle_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@KFPCJLFJ@cycle_traverse?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$cycle_traverse DD imagerel cycle_traverse
	DD	imagerel cycle_traverse+152
	DD	imagerel $unwind$cycle_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cycle_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0P@KFPCJLFJ@cycle_traverse?$AA@
CONST	SEGMENT
??_C@_0P@KFPCJLFJ@cycle_traverse?$AA@ DB 'cycle_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT cycle_traverse
_TEXT	SEGMENT
lz$ = 48
visit$ = 56
arg$ = 64
cycle_traverse PROC					; COMDAT

; 921  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 922  :     Py_VISIT(lz->it);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN9@cycle_trav
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@KFPCJLFJ@cycle_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 9a 03 00
	00		 mov	 r8d, 922		; 0000039aH
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@cycle_trav:
  0003d	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN11@cycle_trav
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 39		 jne	 SHORT $LN13@cycle_trav
$LN11@cycle_trav:

; 923  :     Py_VISIT(lz->saved);

  0004f	e8 00 00 00 00	 call	 _Py_PXCTX
  00054	85 c0		 test	 eax, eax
  00056	74 1c		 je	 SHORT $LN3@cycle_trav
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@KFPCJLFJ@cycle_traverse?$AA@
  00066	45 33 c9	 xor	 r9d, r9d
  00069	41 b8 9b 03 00
	00		 mov	 r8d, 923		; 0000039bH
  0006f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@cycle_trav:
  00074	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00078	48 85 c9	 test	 rcx, rcx
  0007b	74 09		 je	 SHORT $LN5@cycle_trav
  0007d	48 8b d7	 mov	 rdx, rdi
  00080	ff d6		 call	 rsi
  00082	85 c0		 test	 eax, eax
  00084	75 02		 jne	 SHORT $LN13@cycle_trav
$LN5@cycle_trav:

; 924  :     return 0;

  00086	33 c0		 xor	 eax, eax
$LN13@cycle_trav:

; 925  : }

  00088	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00092	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00096	5f		 pop	 rdi
  00097	c3		 ret	 0
cycle_traverse ENDP
_TEXT	ENDS
EXTRN	PyList_Append:PROC
EXTRN	PyList_Size:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_StopIteration:QWORD
EXTRN	PyErr_Occurred:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$cycle_next DD imagerel cycle_next
	DD	imagerel cycle_next+299
	DD	imagerel $unwind$cycle_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cycle_next DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT cycle_next
_TEXT	SEGMENT
lz$ = 64
cycle_next PROC						; COMDAT

; 929  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 930  :     PyObject *item;
; 931  :     PyObject *it;
; 932  :     PyObject *tmp;
; 933  : 
; 934  :     while (1) {
; 935  :         item = PyIter_Next(lz->it);

  0000d	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00011	e8 00 00 00 00	 call	 PyIter_Next
  00016	48 8b d8	 mov	 rbx, rax

; 936  :         if (item != NULL) {

  00019	48 85 c0	 test	 rax, rax
  0001c	0f 85 d0 00 00
	00		 jne	 $LN25@cycle_next
$LL9@cycle_next:

; 942  :         }
; 943  :         if (PyErr_Occurred()) {

  00022	e8 00 00 00 00	 call	 PyErr_Occurred
  00027	48 85 c0	 test	 rax, rax
  0002a	74 19		 je	 SHORT $LN3@cycle_next

; 944  :             if (PyErr_ExceptionMatches(PyExc_StopIteration))

  0002c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_StopIteration
  00033	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00038	85 c0		 test	 eax, eax
  0003a	0f 84 d0 00 00
	00		 je	 $LN4@cycle_next

; 945  :                 PyErr_Clear();

  00040	e8 00 00 00 00	 call	 PyErr_Clear
$LN3@cycle_next:

; 946  :             else
; 947  :                 return NULL;
; 948  :         }
; 949  :         if (PyList_Size(lz->saved) == 0)

  00045	48 8b 4f 68	 mov	 rcx, QWORD PTR [rdi+104]
  00049	e8 00 00 00 00	 call	 PyList_Size
  0004e	48 85 c0	 test	 rax, rax
  00051	0f 84 b9 00 00
	00		 je	 $LN4@cycle_next

; 950  :             return NULL;
; 951  :         it = PyObject_GetIter(lz->saved);

  00057	48 8b 4f 68	 mov	 rcx, QWORD PTR [rdi+104]
  0005b	e8 00 00 00 00	 call	 PyObject_GetIter

; 952  :         if (it == NULL)

  00060	48 85 c0	 test	 rax, rax
  00063	0f 84 a7 00 00
	00		 je	 $LN4@cycle_next

; 953  :             return NULL;
; 954  :         tmp = lz->it;

  00069	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]

; 955  :         lz->it = it;
; 956  :         lz->firstpass = 1;

  0006d	c7 47 70 01 00
	00 00		 mov	 DWORD PTR [rdi+112], 1
  00074	48 89 47 60	 mov	 QWORD PTR [rdi+96], rax

; 957  :         Py_DECREF(tmp);

  00078	e8 00 00 00 00	 call	 _Py_PXCTX
  0007d	85 c0		 test	 eax, eax
  0007f	75 5c		 jne	 SHORT $LN22@cycle_next
  00081	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00085	a8 20		 test	 al, 32			; 00000020H
  00087	75 4c		 jne	 SHORT $LN16@cycle_next
  00089	84 c0		 test	 al, al
  0008b	78 48		 js	 SHORT $LN16@cycle_next
  0008d	a8 02		 test	 al, 2
  0008f	75 4c		 jne	 SHORT $LN22@cycle_next
  00091	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00095	75 46		 jne	 SHORT $LN22@cycle_next
  00097	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000a5	4c 8b cb	 mov	 r9, rbx
  000a8	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000ae	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000b6	e8 00 00 00 00	 call	 _PyParallel_Guard
  000bb	48 8b cb	 mov	 rcx, rbx
  000be	85 c0		 test	 eax, eax
  000c0	74 07		 je	 SHORT $LN21@cycle_next
  000c2	e8 00 00 00 00	 call	 _Px_Dealloc
  000c7	eb 14		 jmp	 SHORT $LN22@cycle_next
$LN21@cycle_next:
  000c9	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000cd	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000d3	eb 08		 jmp	 SHORT $LN22@cycle_next
$LN16@cycle_next:
  000d5	48 8b cb	 mov	 rcx, rbx
  000d8	e8 00 00 00 00	 call	 Px_DecRef
$LN22@cycle_next:

; 930  :     PyObject *item;
; 931  :     PyObject *it;
; 932  :     PyObject *tmp;
; 933  : 
; 934  :     while (1) {
; 935  :         item = PyIter_Next(lz->it);

  000dd	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  000e1	e8 00 00 00 00	 call	 PyIter_Next
  000e6	48 8b d8	 mov	 rbx, rax

; 936  :         if (item != NULL) {

  000e9	48 85 c0	 test	 rax, rax
  000ec	0f 84 30 ff ff
	ff		 je	 $LL9@cycle_next
$LN25@cycle_next:

; 937  :             if (!lz->firstpass && PyList_Append(lz->saved, item)) {

  000f2	83 7f 70 00	 cmp	 DWORD PTR [rdi+112], 0
  000f6	75 25		 jne	 SHORT $LN6@cycle_next
  000f8	48 8b 4f 68	 mov	 rcx, QWORD PTR [rdi+104]
  000fc	48 8b d3	 mov	 rdx, rbx
  000ff	e8 00 00 00 00	 call	 PyList_Append
  00104	85 c0		 test	 eax, eax
  00106	74 15		 je	 SHORT $LN6@cycle_next

; 938  :                 Py_DECREF(item);

  00108	48 8b cb	 mov	 rcx, rbx
  0010b	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@cycle_next:

; 939  :                 return NULL;

  00110	33 c0		 xor	 eax, eax

; 958  :     }
; 959  : }

  00112	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00117	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0011b	5f		 pop	 rdi
  0011c	c3		 ret	 0
$LN6@cycle_next:

; 940  :             }
; 941  :             return item;

  0011d	48 8b c3	 mov	 rax, rbx

; 958  :     }
; 959  : }

  00120	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00125	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00129	5f		 pop	 rdi
  0012a	c3		 ret	 0
cycle_next ENDP
_TEXT	ENDS
PUBLIC	??_C@_08JBCIEMOA@O?$CIO?$CJ?$CIOi?$CJ?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$cycle_reduce DD imagerel cycle_reduce
	DD	imagerel cycle_reduce+40
	DD	imagerel $unwind$cycle_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cycle_reduce DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_08JBCIEMOA@O?$CIO?$CJ?$CIOi?$CJ?$AA@
CONST	SEGMENT
??_C@_08JBCIEMOA@O?$CIO?$CJ?$CIOi?$CJ?$AA@ DB 'O(O)(Oi)', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT cycle_reduce
_TEXT	SEGMENT
lz$ = 64
cycle_reduce PROC					; COMDAT

; 963  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 964  :     /* Create a new cycle with the iterator tuple, then set
; 965  :      * the saved state on it.
; 966  :      */
; 967  :     return Py_BuildValue("O(O)(Oi)", Py_TYPE(lz),
; 968  :         lz->it, lz->saved, lz->firstpass);

  00004	8b 41 70	 mov	 eax, DWORD PTR [rcx+112]
  00007	4c 8b 49 68	 mov	 r9, QWORD PTR [rcx+104]
  0000b	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]
  0000f	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08JBCIEMOA@O?$CIO?$CJ?$CIOi?$CJ?$AA@
  0001a	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0001e	e8 00 00 00 00	 call	 Py_BuildValue

; 969  :     }

  00023	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00027	c3		 ret	 0
cycle_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@MIKFLMLO@cycle_setstate?$AA@		; `string'
PUBLIC	??_C@_02MPEHDMPO@Oi?$AA@			; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$cycle_setstate DD imagerel cycle_setstate
	DD	imagerel cycle_setstate+69
	DD	imagerel $unwind$cycle_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$cycle_setstate DD imagerel cycle_setstate+69
	DD	imagerel cycle_setstate+227
	DD	imagerel $chain$0$cycle_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$cycle_setstate DD imagerel cycle_setstate+227
	DD	imagerel cycle_setstate+305
	DD	imagerel $chain$1$cycle_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$cycle_setstate DD 021H
	DD	imagerel cycle_setstate
	DD	imagerel cycle_setstate+69
	DD	imagerel $unwind$cycle_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$cycle_setstate DD 020521H
	DD	083405H
	DD	imagerel cycle_setstate
	DD	imagerel cycle_setstate+69
	DD	imagerel $unwind$cycle_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cycle_setstate DD 040a01H
	DD	09640aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0P@MIKFLMLO@cycle_setstate?$AA@
CONST	SEGMENT
??_C@_0P@MIKFLMLO@cycle_setstate?$AA@ DB 'cycle_setstate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02MPEHDMPO@Oi?$AA@
CONST	SEGMENT
??_C@_02MPEHDMPO@Oi?$AA@ DB 'Oi', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
CONST	ENDS
;	COMDAT cycle_setstate
_TEXT	SEGMENT
lz$ = 64
state$ = 72
firstpass$ = 80
saved$ = 88
cycle_setstate PROC					; COMDAT

; 973  : {

  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b c2	 mov	 rax, rdx
  0000d	48 8b f9	 mov	 rdi, rcx

; 974  :     PyObject *saved=NULL;
; 975  :     int firstpass;
; 976  :     if (!PyArg_ParseTuple(state, "Oi", &saved, &firstpass))

  00010	4c 8d 4c 24 50	 lea	 r9, QWORD PTR firstpass$[rsp]
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02MPEHDMPO@Oi?$AA@
  0001c	4c 8d 44 24 58	 lea	 r8, QWORD PTR saved$[rsp]
  00021	33 f6		 xor	 esi, esi
  00023	48 8b c8	 mov	 rcx, rax
  00026	48 89 74 24 58	 mov	 QWORD PTR saved$[rsp], rsi
  0002b	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00030	85 c0		 test	 eax, eax
  00032	75 0d		 jne	 SHORT $LN8@cycle_sets

; 977  :         return NULL;

  00034	33 c0		 xor	 eax, eax

; 983  : }

  00036	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0003b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0003f	5f		 pop	 rdi
  00040	c3		 ret	 0
$LN8@cycle_sets:

; 978  :     Py_CLEAR(lz->saved);

  00041	4c 8b 4f 68	 mov	 r9, QWORD PTR [rdi+104]
  00045	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0004a	4d 85 c9	 test	 r9, r9
  0004d	74 32		 je	 SHORT $LN7@cycle_sets
  0004f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  00056	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@MIKFLMLO@cycle_setstate?$AA@
  0005d	41 b8 d2 03 00
	00		 mov	 r8d, 978		; 000003d2H
  00063	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0006b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00070	85 c0		 test	 eax, eax
  00072	75 0d		 jne	 SHORT $LN7@cycle_sets
  00074	48 8b 4f 68	 mov	 rcx, QWORD PTR [rdi+104]
  00078	48 89 77 68	 mov	 QWORD PTR [rdi+104], rsi
  0007c	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@cycle_sets:

; 979  :     lz->saved = saved;

  00081	48 8b 5c 24 58	 mov	 rbx, QWORD PTR saved$[rsp]
  00086	48 89 5f 68	 mov	 QWORD PTR [rdi+104], rbx

; 980  :     Py_XINCREF(lz->saved);

  0008a	48 85 db	 test	 rbx, rbx
  0008d	74 3b		 je	 SHORT $LN3@cycle_sets
  0008f	e8 00 00 00 00	 call	 _Py_PXCTX
  00094	85 c0		 test	 eax, eax
  00096	75 32		 jne	 SHORT $LN3@cycle_sets
  00098	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0009f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000a6	4c 8b cb	 mov	 r9, rbx
  000a9	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000af	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000b7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000bc	85 c0		 test	 eax, eax
  000be	75 06		 jne	 SHORT $LN12@cycle_sets
  000c0	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000c4	74 04		 je	 SHORT $LN3@cycle_sets
$LN12@cycle_sets:
  000c6	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN3@cycle_sets:

; 981  :     lz->firstpass = firstpass != 0;

  000ca	39 74 24 50	 cmp	 DWORD PTR firstpass$[rsp], esi
  000ce	40 0f 95 c6	 setne	 sil
  000d2	89 77 70	 mov	 DWORD PTR [rdi+112], esi

; 982  :     Py_RETURN_NONE;

  000d5	e8 00 00 00 00	 call	 _Py_PXCTX
  000da	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000df	85 c0		 test	 eax, eax
  000e1	75 3c		 jne	 SHORT $LN17@cycle_sets
  000e3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  000ea	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000f8	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000fe	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00106	e8 00 00 00 00	 call	 _PyParallel_Guard
  0010b	85 c0		 test	 eax, eax
  0010d	75 09		 jne	 SHORT $LN16@cycle_sets
  0010f	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00116	74 07		 je	 SHORT $LN17@cycle_sets
$LN16@cycle_sets:
  00118	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN17@cycle_sets:
  0011f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 983  : }

  00126	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0012b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0012f	5f		 pop	 rdi
  00130	c3		 ret	 0
cycle_setstate ENDP
_TEXT	ENDS
PUBLIC	??_C@_09FPIDKODG@dropwhile?$AA@			; `string'
PUBLIC	??_C@_0M@MKGKMIKK@dropwhile?$CI?$CJ?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$dropwhile_new DD imagerel dropwhile_new
	DD	imagerel dropwhile_new+197
	DD	imagerel $unwind$dropwhile_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dropwhile_new DD 040a01H
	DD	09340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_09FPIDKODG@dropwhile?$AA@
CONST	SEGMENT
??_C@_09FPIDKODG@dropwhile?$AA@ DB 'dropwhile', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MKGKMIKK@dropwhile?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_0M@MKGKMIKK@dropwhile?$CI?$CJ?$AA@ DB 'dropwhile()', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT dropwhile_new
_TEXT	SEGMENT
func$ = 64
type$ = 64
args$ = 72
kwds$ = 80
seq$ = 88
dropwhile_new PROC					; COMDAT

; 1057 : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1058 :     PyObject *func, *seq;
; 1059 :     PyObject *it;
; 1060 :     dropwhileobject *lz;
; 1061 : 
; 1062 :     if (type == &dropwhile_type && !_PyArg_NoKeywords("dropwhile()", kwds))

  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:dropwhile_type
  00011	48 8b fa	 mov	 rdi, rdx
  00014	48 8b d9	 mov	 rbx, rcx
  00017	48 3b c8	 cmp	 rcx, rax
  0001a	75 13		 jne	 SHORT $LN4@dropwhile_
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@MKGKMIKK@dropwhile?$CI?$CJ?$AA@
  00023	49 8b d0	 mov	 rdx, r8
  00026	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  0002b	85 c0		 test	 eax, eax

; 1063 :         return NULL;

  0002d	74 5d		 je	 SHORT $LN7@dropwhile_
$LN4@dropwhile_:

; 1064 : 
; 1065 :     if (!PyArg_UnpackTuple(args, "dropwhile", 2, 2, &func, &seq))

  0002f	48 8d 44 24 58	 lea	 rax, QWORD PTR seq$[rsp]
  00034	41 b9 02 00 00
	00		 mov	 r9d, 2
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09FPIDKODG@dropwhile?$AA@
  00041	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00046	48 8d 44 24 40	 lea	 rax, QWORD PTR func$[rsp]
  0004b	45 8b c1	 mov	 r8d, r9d
  0004e	48 8b cf	 mov	 rcx, rdi
  00051	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00056	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0005b	85 c0		 test	 eax, eax

; 1066 :         return NULL;

  0005d	74 2d		 je	 SHORT $LN7@dropwhile_

; 1067 : 
; 1068 :     /* Get iterator. */
; 1069 :     it = PyObject_GetIter(seq);

  0005f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR seq$[rsp]
  00064	e8 00 00 00 00	 call	 PyObject_GetIter
  00069	48 8b f8	 mov	 rdi, rax

; 1070 :     if (it == NULL)

  0006c	48 85 c0	 test	 rax, rax

; 1071 :         return NULL;

  0006f	74 1b		 je	 SHORT $LN7@dropwhile_

; 1072 : 
; 1073 :     /* create dropwhileobject structure */
; 1074 :     lz = (dropwhileobject *)type->tp_alloc(type, 0);

  00071	33 d2		 xor	 edx, edx
  00073	48 8b cb	 mov	 rcx, rbx
  00076	ff 93 88 01 00
	00		 call	 QWORD PTR [rbx+392]
  0007c	48 8b d8	 mov	 rbx, rax

; 1075 :     if (lz == NULL) {

  0007f	48 85 c0	 test	 rax, rax
  00082	75 15		 jne	 SHORT $LN1@dropwhile_

; 1076 :         Py_DECREF(it);

  00084	48 8b cf	 mov	 rcx, rdi
  00087	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@dropwhile_:

; 1077 :         return NULL;

  0008c	33 c0		 xor	 eax, eax

; 1085 : }

  0008e	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00093	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00097	5f		 pop	 rdi
  00098	c3		 ret	 0
$LN1@dropwhile_:

; 1078 :     }
; 1079 :     Py_INCREF(func);

  00099	48 8b 4c 24 40	 mov	 rcx, QWORD PTR func$[rsp]
  0009e	e8 00 00 00 00	 call	 _Py_IncRef

; 1080 :     lz->func = func;

  000a3	4c 8b 5c 24 40	 mov	 r11, QWORD PTR func$[rsp]

; 1081 :     lz->it = it;

  000a8	48 89 7b 68	 mov	 QWORD PTR [rbx+104], rdi
  000ac	4c 89 5b 60	 mov	 QWORD PTR [rbx+96], r11

; 1082 :     lz->start = 0;

  000b0	c7 43 70 00 00
	00 00		 mov	 DWORD PTR [rbx+112], 0

; 1083 : 
; 1084 :     return (PyObject *)lz;

  000b7	48 8b c3	 mov	 rax, rbx

; 1085 : }

  000ba	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000bf	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c3	5f		 pop	 rdi
  000c4	c3		 ret	 0
dropwhile_new ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$dropwhile_dealloc DD imagerel dropwhile_dealloc
	DD	imagerel dropwhile_dealloc+262
	DD	imagerel $unwind$dropwhile_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dropwhile_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT dropwhile_dealloc
_TEXT	SEGMENT
lz$ = 64
dropwhile_dealloc PROC					; COMDAT

; 1089 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 1090 :     PyObject_GC_UnTrack(lz);

  0000d	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 1091 :     Py_XDECREF(lz->func);

  00012	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  00016	48 85 db	 test	 rbx, rbx
  00019	74 65		 je	 SHORT $LN7@dropwhile_@2
  0001b	e8 00 00 00 00	 call	 _Py_PXCTX
  00020	85 c0		 test	 eax, eax
  00022	75 5c		 jne	 SHORT $LN7@dropwhile_@2
  00024	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00028	a8 20		 test	 al, 32			; 00000020H
  0002a	75 4c		 jne	 SHORT $LN15@dropwhile_@2
  0002c	84 c0		 test	 al, al
  0002e	78 48		 js	 SHORT $LN15@dropwhile_@2
  00030	a8 02		 test	 al, 2
  00032	75 4c		 jne	 SHORT $LN7@dropwhile_@2
  00034	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00038	75 46		 jne	 SHORT $LN7@dropwhile_@2
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00048	4c 8b cb	 mov	 r9, rbx
  0004b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00051	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00059	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005e	48 8b cb	 mov	 rcx, rbx
  00061	85 c0		 test	 eax, eax
  00063	74 07		 je	 SHORT $LN20@dropwhile_@2
  00065	e8 00 00 00 00	 call	 _Px_Dealloc
  0006a	eb 14		 jmp	 SHORT $LN7@dropwhile_@2
$LN20@dropwhile_@2:
  0006c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00070	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00076	eb 08		 jmp	 SHORT $LN7@dropwhile_@2
$LN15@dropwhile_@2:
  00078	48 8b cb	 mov	 rcx, rbx
  0007b	e8 00 00 00 00	 call	 Px_DecRef
$LN7@dropwhile_@2:

; 1092 :     Py_XDECREF(lz->it);

  00080	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  00084	48 85 db	 test	 rbx, rbx
  00087	74 65		 je	 SHORT $LN3@dropwhile_@2
  00089	e8 00 00 00 00	 call	 _Py_PXCTX
  0008e	85 c0		 test	 eax, eax
  00090	75 5c		 jne	 SHORT $LN3@dropwhile_@2
  00092	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00096	a8 20		 test	 al, 32			; 00000020H
  00098	75 4c		 jne	 SHORT $LN26@dropwhile_@2
  0009a	84 c0		 test	 al, al
  0009c	78 48		 js	 SHORT $LN26@dropwhile_@2
  0009e	a8 02		 test	 al, 2
  000a0	75 4c		 jne	 SHORT $LN3@dropwhile_@2
  000a2	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000a6	75 46		 jne	 SHORT $LN3@dropwhile_@2
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000b6	4c 8b cb	 mov	 r9, rbx
  000b9	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000bf	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cc	48 8b cb	 mov	 rcx, rbx
  000cf	85 c0		 test	 eax, eax
  000d1	74 07		 je	 SHORT $LN31@dropwhile_@2
  000d3	e8 00 00 00 00	 call	 _Px_Dealloc
  000d8	eb 14		 jmp	 SHORT $LN3@dropwhile_@2
$LN31@dropwhile_@2:
  000da	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000de	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000e4	eb 08		 jmp	 SHORT $LN3@dropwhile_@2
$LN26@dropwhile_@2:
  000e6	48 8b cb	 mov	 rcx, rbx
  000e9	e8 00 00 00 00	 call	 Px_DecRef
$LN3@dropwhile_@2:

; 1093 :     Py_TYPE(lz)->tp_free(lz);

  000ee	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000f2	48 8b cf	 mov	 rcx, rdi

; 1094 : }

  000f5	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000fa	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000fe	5f		 pop	 rdi
  000ff	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
dropwhile_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@IDIMKPBG@dropwhile_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$dropwhile_traverse DD imagerel dropwhile_traverse
	DD	imagerel dropwhile_traverse+152
	DD	imagerel $unwind$dropwhile_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dropwhile_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BD@IDIMKPBG@dropwhile_traverse?$AA@
CONST	SEGMENT
??_C@_0BD@IDIMKPBG@dropwhile_traverse?$AA@ DB 'dropwhile_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT dropwhile_traverse
_TEXT	SEGMENT
lz$ = 48
visit$ = 56
arg$ = 64
dropwhile_traverse PROC					; COMDAT

; 1098 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 1099 :     Py_VISIT(lz->it);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN9@dropwhile_@3
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@IDIMKPBG@dropwhile_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 4b 04 00
	00		 mov	 r8d, 1099		; 0000044bH
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@dropwhile_@3:
  0003d	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN11@dropwhile_@3
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 39		 jne	 SHORT $LN13@dropwhile_@3
$LN11@dropwhile_@3:

; 1100 :     Py_VISIT(lz->func);

  0004f	e8 00 00 00 00	 call	 _Py_PXCTX
  00054	85 c0		 test	 eax, eax
  00056	74 1c		 je	 SHORT $LN3@dropwhile_@3
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@IDIMKPBG@dropwhile_traverse?$AA@
  00066	45 33 c9	 xor	 r9d, r9d
  00069	41 b8 4c 04 00
	00		 mov	 r8d, 1100		; 0000044cH
  0006f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@dropwhile_@3:
  00074	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00078	48 85 c9	 test	 rcx, rcx
  0007b	74 09		 je	 SHORT $LN5@dropwhile_@3
  0007d	48 8b d7	 mov	 rdx, rdi
  00080	ff d6		 call	 rsi
  00082	85 c0		 test	 eax, eax
  00084	75 02		 jne	 SHORT $LN13@dropwhile_@3
$LN5@dropwhile_@3:

; 1101 :     return 0;

  00086	33 c0		 xor	 eax, eax
$LN13@dropwhile_@3:

; 1102 : }

  00088	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00092	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00096	5f		 pop	 rdi
  00097	c3		 ret	 0
dropwhile_traverse ENDP
_TEXT	ENDS
EXTRN	PyObject_IsTrue:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$dropwhile_next DD imagerel dropwhile_next
	DD	imagerel dropwhile_next+390
	DD	imagerel $unwind$dropwhile_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dropwhile_next DD 0a1801H
	DD	0c6418H
	DD	0b5418H
	DD	0a3418H
	DD	0d0145218H
	DD	07010c012H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT dropwhile_next
_TEXT	SEGMENT
lz$ = 80
dropwhile_next PROC					; COMDAT

; 1106 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1107 :     PyObject *item, *good;
; 1108 :     PyObject *it = lz->it;

  00018	4c 8b 61 68	 mov	 r12, QWORD PTR [rcx+104]
  0001c	48 8b e9	 mov	 rbp, rcx

; 1109 :     long ok;
; 1110 :     PyObject *(*iternext)(PyObject *);
; 1111 : 
; 1112 :     iternext = *Py_TYPE(it)->tp_iternext;

  0001f	49 8b 44 24 58	 mov	 rax, QWORD PTR [r12+88]

; 1113 :     for (;;) {
; 1114 :         item = iternext(it);

  00024	49 8b cc	 mov	 rcx, r12
  00027	4c 8b a8 38 01
	00 00		 mov	 r13, QWORD PTR [rax+312]
  0002e	41 ff d5	 call	 r13
  00031	48 8b d8	 mov	 rbx, rax

; 1115 :         if (item == NULL)

  00034	48 85 c0	 test	 rax, rax
  00037	0f 84 2e 01 00
	00		 je	 $LN34@dropwhile_@4
  0003d	0f 1f 00	 npad	 3
$LL7@dropwhile_@4:

; 1117 :         if (lz->start == 1)

  00040	83 7d 70 01	 cmp	 DWORD PTR [rbp+112], 1
  00044	0f 84 14 01 00
	00		 je	 $LN35@dropwhile_@4

; 1118 :             return item;
; 1119 : 
; 1120 :         good = PyObject_CallFunctionObjArgs(lz->func, item, NULL);

  0004a	48 8b 4d 60	 mov	 rcx, QWORD PTR [rbp+96]
  0004e	45 33 c0	 xor	 r8d, r8d
  00051	48 8b d3	 mov	 rdx, rbx
  00054	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  00059	48 8b f8	 mov	 rdi, rax

; 1121 :         if (good == NULL) {

  0005c	48 85 c0	 test	 rax, rax
  0005f	0f 84 fe 00 00
	00		 je	 $LN36@dropwhile_@4

; 1123 :             return NULL;
; 1124 :         }
; 1125 :         ok = PyObject_IsTrue(good);

  00065	48 8b c8	 mov	 rcx, rax
  00068	e8 00 00 00 00	 call	 PyObject_IsTrue
  0006d	8b f0		 mov	 esi, eax

; 1126 :         Py_DECREF(good);

  0006f	e8 00 00 00 00	 call	 _Py_PXCTX
  00074	85 c0		 test	 eax, eax
  00076	75 5e		 jne	 SHORT $LN20@dropwhile_@4
  00078	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  0007c	f6 c1 20	 test	 cl, 32			; 00000020H
  0007f	75 4d		 jne	 SHORT $LN14@dropwhile_@4
  00081	84 c9		 test	 cl, cl
  00083	78 49		 js	 SHORT $LN14@dropwhile_@4
  00085	f6 c1 02	 test	 cl, 2
  00088	75 4c		 jne	 SHORT $LN20@dropwhile_@4
  0008a	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  0008e	75 46		 jne	 SHORT $LN20@dropwhile_@4
  00090	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00097	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0009e	4c 8b cf	 mov	 r9, rdi
  000a1	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000a7	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000af	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b4	48 8b cf	 mov	 rcx, rdi
  000b7	85 c0		 test	 eax, eax
  000b9	74 07		 je	 SHORT $LN19@dropwhile_@4
  000bb	e8 00 00 00 00	 call	 _Px_Dealloc
  000c0	eb 14		 jmp	 SHORT $LN20@dropwhile_@4
$LN19@dropwhile_@4:
  000c2	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000c6	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000cc	eb 08		 jmp	 SHORT $LN20@dropwhile_@4
$LN14@dropwhile_@4:
  000ce	48 8b cf	 mov	 rcx, rdi
  000d1	e8 00 00 00 00	 call	 Px_DecRef
$LN20@dropwhile_@4:

; 1127 :         if (ok == 0) {

  000d6	85 f6		 test	 esi, esi
  000d8	74 7d		 je	 SHORT $LN37@dropwhile_@4

; 1130 :         }
; 1131 :         Py_DECREF(item);

  000da	e8 00 00 00 00	 call	 _Py_PXCTX
  000df	85 c0		 test	 eax, eax
  000e1	75 5c		 jne	 SHORT $LN31@dropwhile_@4
  000e3	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000e7	a8 20		 test	 al, 32			; 00000020H
  000e9	75 4c		 jne	 SHORT $LN25@dropwhile_@4
  000eb	84 c0		 test	 al, al
  000ed	78 48		 js	 SHORT $LN25@dropwhile_@4
  000ef	a8 02		 test	 al, 2
  000f1	75 4c		 jne	 SHORT $LN31@dropwhile_@4
  000f3	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000f7	75 46		 jne	 SHORT $LN31@dropwhile_@4
  000f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00100	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00107	4c 8b cb	 mov	 r9, rbx
  0010a	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00110	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00118	e8 00 00 00 00	 call	 _PyParallel_Guard
  0011d	48 8b cb	 mov	 rcx, rbx
  00120	85 c0		 test	 eax, eax
  00122	74 07		 je	 SHORT $LN30@dropwhile_@4
  00124	e8 00 00 00 00	 call	 _Px_Dealloc
  00129	eb 14		 jmp	 SHORT $LN31@dropwhile_@4
$LN30@dropwhile_@4:
  0012b	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0012f	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00135	eb 08		 jmp	 SHORT $LN31@dropwhile_@4
$LN25@dropwhile_@4:
  00137	48 8b cb	 mov	 rcx, rbx
  0013a	e8 00 00 00 00	 call	 Px_DecRef
$LN31@dropwhile_@4:

; 1132 :         if (ok < 0)

  0013f	85 f6		 test	 esi, esi
  00141	78 28		 js	 SHORT $LN34@dropwhile_@4

; 1113 :     for (;;) {
; 1114 :         item = iternext(it);

  00143	49 8b cc	 mov	 rcx, r12
  00146	41 ff d5	 call	 r13
  00149	48 8b d8	 mov	 rbx, rax

; 1115 :         if (item == NULL)

  0014c	48 85 c0	 test	 rax, rax
  0014f	0f 85 eb fe ff
	ff		 jne	 $LL7@dropwhile_@4
  00155	eb 14		 jmp	 SHORT $LN34@dropwhile_@4
$LN37@dropwhile_@4:

; 1128 :             lz->start = 1;

  00157	c7 45 70 01 00
	00 00		 mov	 DWORD PTR [rbp+112], 1
$LN35@dropwhile_@4:

; 1129 :             return item;

  0015e	48 8b c3	 mov	 rax, rbx
  00161	eb 0a		 jmp	 SHORT $LN6@dropwhile_@4
$LN36@dropwhile_@4:

; 1122 :             Py_DECREF(item);

  00163	48 8b cb	 mov	 rcx, rbx
  00166	e8 00 00 00 00	 call	 _Py_DecRef
$LN34@dropwhile_@4:

; 1116 :             return NULL;

  0016b	33 c0		 xor	 eax, eax
$LN6@dropwhile_@4:

; 1133 :             return NULL;
; 1134 :     }
; 1135 : }

  0016d	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00172	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  00177	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  0017c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00180	41 5d		 pop	 r13
  00182	41 5c		 pop	 r12
  00184	5f		 pop	 rdi
  00185	c3		 ret	 0
dropwhile_next ENDP
_TEXT	ENDS
PUBLIC	??_C@_06NMCPHMHN@O?$CIOO?$CJl?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$dropwhile_reduce DD imagerel dropwhile_reduce
	DD	imagerel dropwhile_reduce+40
	DD	imagerel $unwind$dropwhile_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dropwhile_reduce DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_06NMCPHMHN@O?$CIOO?$CJl?$AA@
CONST	SEGMENT
??_C@_06NMCPHMHN@O?$CIOO?$CJl?$AA@ DB 'O(OO)l', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT dropwhile_reduce
_TEXT	SEGMENT
lz$ = 64
dropwhile_reduce PROC					; COMDAT

; 1139 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1140 :     return Py_BuildValue("O(OO)l", Py_TYPE(lz),
; 1141 :                          lz->func, lz->it, lz->start);

  00004	8b 41 70	 mov	 eax, DWORD PTR [rcx+112]
  00007	4c 8b 49 68	 mov	 r9, QWORD PTR [rcx+104]
  0000b	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]
  0000f	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06NMCPHMHN@O?$CIOO?$CJl?$AA@
  0001a	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0001e	e8 00 00 00 00	 call	 Py_BuildValue

; 1142 : }

  00023	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00027	c3		 ret	 0
dropwhile_reduce ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$dropwhile_setstate DD imagerel dropwhile_setstate
	DD	imagerel dropwhile_setstate+114
	DD	imagerel $unwind$dropwhile_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dropwhile_setstate DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT dropwhile_setstate
_TEXT	SEGMENT
lz$ = 64
state$ = 72
dropwhile_setstate PROC					; COMDAT

; 1146 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 1147 :     int start = PyObject_IsTrue(state);

  00009	48 8b ca	 mov	 rcx, rdx
  0000c	e8 00 00 00 00	 call	 PyObject_IsTrue

; 1148 :     if (start < 0)

  00011	85 c0		 test	 eax, eax
  00013	79 08		 jns	 SHORT $LN1@dropwhile_@5

; 1149 :         return NULL;

  00015	33 c0		 xor	 eax, eax

; 1152 : }

  00017	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0001b	5b		 pop	 rbx
  0001c	c3		 ret	 0
$LN1@dropwhile_@5:

; 1150 :     lz->start = start;

  0001d	89 43 70	 mov	 DWORD PTR [rbx+112], eax

; 1151 :     Py_RETURN_NONE;

  00020	e8 00 00 00 00	 call	 _Py_PXCTX
  00025	85 c0		 test	 eax, eax
  00027	75 3c		 jne	 SHORT $LN5@dropwhile_@5
  00029	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00030	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0003e	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00044	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0004c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00051	85 c0		 test	 eax, eax
  00053	75 09		 jne	 SHORT $LN4@dropwhile_@5
  00055	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0005c	74 07		 je	 SHORT $LN5@dropwhile_@5
$LN4@dropwhile_@5:
  0005e	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN5@dropwhile_@5:
  00065	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1152 : }

  0006c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00070	5b		 pop	 rbx
  00071	c3		 ret	 0
dropwhile_setstate ENDP
_TEXT	ENDS
PUBLIC	??_C@_09FMMMOMPJ@takewhile?$AA@			; `string'
PUBLIC	??_C@_0M@BONKCANI@takewhile?$CI?$CJ?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$takewhile_new DD imagerel takewhile_new
	DD	imagerel takewhile_new+197
	DD	imagerel $unwind$takewhile_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$takewhile_new DD 040a01H
	DD	09340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_09FMMMOMPJ@takewhile?$AA@
CONST	SEGMENT
??_C@_09FMMMOMPJ@takewhile?$AA@ DB 'takewhile', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BONKCANI@takewhile?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_0M@BONKCANI@takewhile?$CI?$CJ?$AA@ DB 'takewhile()', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT takewhile_new
_TEXT	SEGMENT
func$ = 64
type$ = 64
args$ = 72
kwds$ = 80
seq$ = 88
takewhile_new PROC					; COMDAT

; 1226 : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1227 :     PyObject *func, *seq;
; 1228 :     PyObject *it;
; 1229 :     takewhileobject *lz;
; 1230 : 
; 1231 :     if (type == &takewhile_type && !_PyArg_NoKeywords("takewhile()", kwds))

  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:takewhile_type
  00011	48 8b fa	 mov	 rdi, rdx
  00014	48 8b d9	 mov	 rbx, rcx
  00017	48 3b c8	 cmp	 rcx, rax
  0001a	75 13		 jne	 SHORT $LN4@takewhile_
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@BONKCANI@takewhile?$CI?$CJ?$AA@
  00023	49 8b d0	 mov	 rdx, r8
  00026	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  0002b	85 c0		 test	 eax, eax

; 1232 :         return NULL;

  0002d	74 5d		 je	 SHORT $LN7@takewhile_
$LN4@takewhile_:

; 1233 : 
; 1234 :     if (!PyArg_UnpackTuple(args, "takewhile", 2, 2, &func, &seq))

  0002f	48 8d 44 24 58	 lea	 rax, QWORD PTR seq$[rsp]
  00034	41 b9 02 00 00
	00		 mov	 r9d, 2
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09FMMMOMPJ@takewhile?$AA@
  00041	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00046	48 8d 44 24 40	 lea	 rax, QWORD PTR func$[rsp]
  0004b	45 8b c1	 mov	 r8d, r9d
  0004e	48 8b cf	 mov	 rcx, rdi
  00051	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00056	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0005b	85 c0		 test	 eax, eax

; 1235 :         return NULL;

  0005d	74 2d		 je	 SHORT $LN7@takewhile_

; 1236 : 
; 1237 :     /* Get iterator. */
; 1238 :     it = PyObject_GetIter(seq);

  0005f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR seq$[rsp]
  00064	e8 00 00 00 00	 call	 PyObject_GetIter
  00069	48 8b f8	 mov	 rdi, rax

; 1239 :     if (it == NULL)

  0006c	48 85 c0	 test	 rax, rax

; 1240 :         return NULL;

  0006f	74 1b		 je	 SHORT $LN7@takewhile_

; 1241 : 
; 1242 :     /* create takewhileobject structure */
; 1243 :     lz = (takewhileobject *)type->tp_alloc(type, 0);

  00071	33 d2		 xor	 edx, edx
  00073	48 8b cb	 mov	 rcx, rbx
  00076	ff 93 88 01 00
	00		 call	 QWORD PTR [rbx+392]
  0007c	48 8b d8	 mov	 rbx, rax

; 1244 :     if (lz == NULL) {

  0007f	48 85 c0	 test	 rax, rax
  00082	75 15		 jne	 SHORT $LN1@takewhile_

; 1245 :         Py_DECREF(it);

  00084	48 8b cf	 mov	 rcx, rdi
  00087	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@takewhile_:

; 1246 :         return NULL;

  0008c	33 c0		 xor	 eax, eax

; 1254 : }

  0008e	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00093	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00097	5f		 pop	 rdi
  00098	c3		 ret	 0
$LN1@takewhile_:

; 1247 :     }
; 1248 :     Py_INCREF(func);

  00099	48 8b 4c 24 40	 mov	 rcx, QWORD PTR func$[rsp]
  0009e	e8 00 00 00 00	 call	 _Py_IncRef

; 1249 :     lz->func = func;

  000a3	4c 8b 5c 24 40	 mov	 r11, QWORD PTR func$[rsp]

; 1250 :     lz->it = it;

  000a8	48 89 7b 68	 mov	 QWORD PTR [rbx+104], rdi
  000ac	4c 89 5b 60	 mov	 QWORD PTR [rbx+96], r11

; 1251 :     lz->stop = 0;

  000b0	c7 43 70 00 00
	00 00		 mov	 DWORD PTR [rbx+112], 0

; 1252 : 
; 1253 :     return (PyObject *)lz;

  000b7	48 8b c3	 mov	 rax, rbx

; 1254 : }

  000ba	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000bf	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c3	5f		 pop	 rdi
  000c4	c3		 ret	 0
takewhile_new ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$takewhile_dealloc DD imagerel takewhile_dealloc
	DD	imagerel takewhile_dealloc+262
	DD	imagerel $unwind$takewhile_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$takewhile_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT takewhile_dealloc
_TEXT	SEGMENT
lz$ = 64
takewhile_dealloc PROC					; COMDAT

; 1258 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 1259 :     PyObject_GC_UnTrack(lz);

  0000d	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 1260 :     Py_XDECREF(lz->func);

  00012	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  00016	48 85 db	 test	 rbx, rbx
  00019	74 65		 je	 SHORT $LN7@takewhile_@2
  0001b	e8 00 00 00 00	 call	 _Py_PXCTX
  00020	85 c0		 test	 eax, eax
  00022	75 5c		 jne	 SHORT $LN7@takewhile_@2
  00024	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00028	a8 20		 test	 al, 32			; 00000020H
  0002a	75 4c		 jne	 SHORT $LN15@takewhile_@2
  0002c	84 c0		 test	 al, al
  0002e	78 48		 js	 SHORT $LN15@takewhile_@2
  00030	a8 02		 test	 al, 2
  00032	75 4c		 jne	 SHORT $LN7@takewhile_@2
  00034	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00038	75 46		 jne	 SHORT $LN7@takewhile_@2
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00048	4c 8b cb	 mov	 r9, rbx
  0004b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00051	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00059	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005e	48 8b cb	 mov	 rcx, rbx
  00061	85 c0		 test	 eax, eax
  00063	74 07		 je	 SHORT $LN20@takewhile_@2
  00065	e8 00 00 00 00	 call	 _Px_Dealloc
  0006a	eb 14		 jmp	 SHORT $LN7@takewhile_@2
$LN20@takewhile_@2:
  0006c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00070	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00076	eb 08		 jmp	 SHORT $LN7@takewhile_@2
$LN15@takewhile_@2:
  00078	48 8b cb	 mov	 rcx, rbx
  0007b	e8 00 00 00 00	 call	 Px_DecRef
$LN7@takewhile_@2:

; 1261 :     Py_XDECREF(lz->it);

  00080	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  00084	48 85 db	 test	 rbx, rbx
  00087	74 65		 je	 SHORT $LN3@takewhile_@2
  00089	e8 00 00 00 00	 call	 _Py_PXCTX
  0008e	85 c0		 test	 eax, eax
  00090	75 5c		 jne	 SHORT $LN3@takewhile_@2
  00092	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00096	a8 20		 test	 al, 32			; 00000020H
  00098	75 4c		 jne	 SHORT $LN26@takewhile_@2
  0009a	84 c0		 test	 al, al
  0009c	78 48		 js	 SHORT $LN26@takewhile_@2
  0009e	a8 02		 test	 al, 2
  000a0	75 4c		 jne	 SHORT $LN3@takewhile_@2
  000a2	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000a6	75 46		 jne	 SHORT $LN3@takewhile_@2
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000b6	4c 8b cb	 mov	 r9, rbx
  000b9	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000bf	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cc	48 8b cb	 mov	 rcx, rbx
  000cf	85 c0		 test	 eax, eax
  000d1	74 07		 je	 SHORT $LN31@takewhile_@2
  000d3	e8 00 00 00 00	 call	 _Px_Dealloc
  000d8	eb 14		 jmp	 SHORT $LN3@takewhile_@2
$LN31@takewhile_@2:
  000da	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000de	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000e4	eb 08		 jmp	 SHORT $LN3@takewhile_@2
$LN26@takewhile_@2:
  000e6	48 8b cb	 mov	 rcx, rbx
  000e9	e8 00 00 00 00	 call	 Px_DecRef
$LN3@takewhile_@2:

; 1262 :     Py_TYPE(lz)->tp_free(lz);

  000ee	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000f2	48 8b cf	 mov	 rcx, rdi

; 1263 : }

  000f5	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000fa	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000fe	5f		 pop	 rdi
  000ff	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
takewhile_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@LLJNNBCB@takewhile_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$takewhile_traverse DD imagerel takewhile_traverse
	DD	imagerel takewhile_traverse+152
	DD	imagerel $unwind$takewhile_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$takewhile_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BD@LLJNNBCB@takewhile_traverse?$AA@
CONST	SEGMENT
??_C@_0BD@LLJNNBCB@takewhile_traverse?$AA@ DB 'takewhile_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT takewhile_traverse
_TEXT	SEGMENT
lz$ = 48
visit$ = 56
arg$ = 64
takewhile_traverse PROC					; COMDAT

; 1267 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 1268 :     Py_VISIT(lz->it);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN9@takewhile_@3
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@LLJNNBCB@takewhile_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 f4 04 00
	00		 mov	 r8d, 1268		; 000004f4H
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@takewhile_@3:
  0003d	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN11@takewhile_@3
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 39		 jne	 SHORT $LN13@takewhile_@3
$LN11@takewhile_@3:

; 1269 :     Py_VISIT(lz->func);

  0004f	e8 00 00 00 00	 call	 _Py_PXCTX
  00054	85 c0		 test	 eax, eax
  00056	74 1c		 je	 SHORT $LN3@takewhile_@3
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@LLJNNBCB@takewhile_traverse?$AA@
  00066	45 33 c9	 xor	 r9d, r9d
  00069	41 b8 f5 04 00
	00		 mov	 r8d, 1269		; 000004f5H
  0006f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@takewhile_@3:
  00074	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00078	48 85 c9	 test	 rcx, rcx
  0007b	74 09		 je	 SHORT $LN5@takewhile_@3
  0007d	48 8b d7	 mov	 rdx, rdi
  00080	ff d6		 call	 rsi
  00082	85 c0		 test	 eax, eax
  00084	75 02		 jne	 SHORT $LN13@takewhile_@3
$LN5@takewhile_@3:

; 1270 :     return 0;

  00086	33 c0		 xor	 eax, eax
$LN13@takewhile_@3:

; 1271 : }

  00088	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00092	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00096	5f		 pop	 rdi
  00097	c3		 ret	 0
takewhile_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$takewhile_next DD imagerel takewhile_next
	DD	imagerel takewhile_next+31
	DD	imagerel $unwind$takewhile_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$takewhile_next DD imagerel takewhile_next+31
	DD	imagerel takewhile_next+61
	DD	imagerel $chain$0$takewhile_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$takewhile_next DD imagerel takewhile_next+61
	DD	imagerel takewhile_next+115
	DD	imagerel $chain$3$takewhile_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$takewhile_next DD imagerel takewhile_next+115
	DD	imagerel takewhile_next+190
	DD	imagerel $chain$6$takewhile_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$takewhile_next DD 060821H
	DD	086408H
	DD	075400H
	DD	063400H
	DD	imagerel takewhile_next
	DD	imagerel takewhile_next+31
	DD	imagerel $unwind$takewhile_next
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$takewhile_next DD 040f21H
	DD	07540fH
	DD	063400H
	DD	imagerel takewhile_next
	DD	imagerel takewhile_next+31
	DD	imagerel $unwind$takewhile_next
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$takewhile_next DD 020521H
	DD	063405H
	DD	imagerel takewhile_next
	DD	imagerel takewhile_next+31
	DD	imagerel $unwind$takewhile_next
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$takewhile_next DD 020601H
	DD	070023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT takewhile_next
_TEXT	SEGMENT
lz$ = 48
takewhile_next PROC					; COMDAT

; 1275 : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b f9	 mov	 rdi, rcx

; 1276 :     PyObject *item, *good;
; 1277 :     PyObject *it = lz->it;

  00009	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]

; 1278 :     long ok;
; 1279 : 
; 1280 :     if (lz->stop == 1)

  0000d	83 7f 70 01	 cmp	 DWORD PTR [rdi+112], 1
  00011	75 08		 jne	 SHORT $LN5@takewhile_@4

; 1281 :         return NULL;

  00013	33 c0		 xor	 eax, eax

; 1300 : }

  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5f		 pop	 rdi
  0001a	c3		 ret	 0
$LN5@takewhile_@4:

; 1282 : 
; 1283 :     item = (*Py_TYPE(it)->tp_iternext)(it);

  0001b	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0001f	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00024	ff 90 38 01 00
	00		 call	 QWORD PTR [rax+312]
  0002a	48 8b d8	 mov	 rbx, rax

; 1284 :     if (item == NULL)

  0002d	48 85 c0	 test	 rax, rax
  00030	75 0b		 jne	 SHORT $LN4@takewhile_@4
  00032	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1300 : }

  00037	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003b	5f		 pop	 rdi
  0003c	c3		 ret	 0
$LN4@takewhile_@4:

; 1285 :         return NULL;
; 1286 : 
; 1287 :     good = PyObject_CallFunctionObjArgs(lz->func, item, NULL);

  0003d	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  00041	45 33 c0	 xor	 r8d, r8d
  00044	48 8b d0	 mov	 rdx, rax
  00047	48 89 6c 24 38	 mov	 QWORD PTR [rsp+56], rbp
  0004c	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  00051	48 8b e8	 mov	 rbp, rax

; 1288 :     if (good == NULL) {

  00054	48 85 c0	 test	 rax, rax
  00057	75 1a		 jne	 SHORT $LN3@takewhile_@4

; 1289 :         Py_DECREF(item);

  00059	48 8b cb	 mov	 rcx, rbx
  0005c	e8 00 00 00 00	 call	 _Py_DecRef
  00061	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00066	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1290 :         return NULL;

  0006b	33 c0		 xor	 eax, eax

; 1300 : }

  0006d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00071	5f		 pop	 rdi
  00072	c3		 ret	 0
$LN3@takewhile_@4:

; 1291 :     }
; 1292 :     ok = PyObject_IsTrue(good);

  00073	48 8b c8	 mov	 rcx, rax
  00076	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  0007b	e8 00 00 00 00	 call	 PyObject_IsTrue

; 1293 :     Py_DECREF(good);

  00080	48 8b cd	 mov	 rcx, rbp
  00083	8b f0		 mov	 esi, eax
  00085	e8 00 00 00 00	 call	 _Py_DecRef

; 1294 :     if (ok == 1)

  0008a	83 fe 01	 cmp	 esi, 1
  0008d	75 05		 jne	 SHORT $LN2@takewhile_@4

; 1295 :         return item;

  0008f	48 8b c3	 mov	 rax, rbx
  00092	eb 15		 jmp	 SHORT $LN10@takewhile_@4
$LN2@takewhile_@4:

; 1296 :     Py_DECREF(item);

  00094	48 8b cb	 mov	 rcx, rbx
  00097	e8 00 00 00 00	 call	 _Py_DecRef

; 1297 :     if (ok == 0)

  0009c	85 f6		 test	 esi, esi
  0009e	75 07		 jne	 SHORT $LN1@takewhile_@4

; 1298 :         lz->stop = 1;

  000a0	c7 47 70 01 00
	00 00		 mov	 DWORD PTR [rdi+112], 1
$LN1@takewhile_@4:

; 1299 :     return NULL;

  000a7	33 c0		 xor	 eax, eax
$LN10@takewhile_@4:
  000a9	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000ae	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000b3	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1300 : }

  000b8	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000bc	5f		 pop	 rdi
  000bd	c3		 ret	 0
takewhile_next ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$takewhile_reduce DD imagerel takewhile_reduce
	DD	imagerel takewhile_reduce+40
	DD	imagerel $unwind$takewhile_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$takewhile_reduce DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT takewhile_reduce
_TEXT	SEGMENT
lz$ = 64
takewhile_reduce PROC					; COMDAT

; 1304 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1305 :     return Py_BuildValue("O(OO)l", Py_TYPE(lz),
; 1306 :                          lz->func, lz->it, lz->stop);

  00004	8b 41 70	 mov	 eax, DWORD PTR [rcx+112]
  00007	4c 8b 49 68	 mov	 r9, QWORD PTR [rcx+104]
  0000b	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]
  0000f	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06NMCPHMHN@O?$CIOO?$CJl?$AA@
  0001a	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0001e	e8 00 00 00 00	 call	 Py_BuildValue

; 1307 : }

  00023	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00027	c3		 ret	 0
takewhile_reduce ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$takewhile_reduce_setstate DD imagerel takewhile_reduce_setstate
	DD	imagerel takewhile_reduce_setstate+114
	DD	imagerel $unwind$takewhile_reduce_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$takewhile_reduce_setstate DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT takewhile_reduce_setstate
_TEXT	SEGMENT
lz$ = 64
state$ = 72
takewhile_reduce_setstate PROC				; COMDAT

; 1311 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 1312 :     int stop = PyObject_IsTrue(state);

  00009	48 8b ca	 mov	 rcx, rdx
  0000c	e8 00 00 00 00	 call	 PyObject_IsTrue

; 1313 :     if (stop < 0)

  00011	85 c0		 test	 eax, eax
  00013	79 08		 jns	 SHORT $LN1@takewhile_@5

; 1314 :         return NULL;

  00015	33 c0		 xor	 eax, eax

; 1317 : }

  00017	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0001b	5b		 pop	 rbx
  0001c	c3		 ret	 0
$LN1@takewhile_@5:

; 1315 :     lz->stop = stop;

  0001d	89 43 70	 mov	 DWORD PTR [rbx+112], eax

; 1316 :     Py_RETURN_NONE;

  00020	e8 00 00 00 00	 call	 _Py_PXCTX
  00025	85 c0		 test	 eax, eax
  00027	75 3c		 jne	 SHORT $LN5@takewhile_@5
  00029	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00030	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0003e	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00044	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0004c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00051	85 c0		 test	 eax, eax
  00053	75 09		 jne	 SHORT $LN4@takewhile_@5
  00055	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0005c	74 07		 je	 SHORT $LN5@takewhile_@5
$LN4@takewhile_@5:
  0005e	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN5@takewhile_@5:
  00065	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1317 : }

  0006c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00070	5b		 pop	 rbx
  00071	c3		 ret	 0
takewhile_reduce_setstate ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EI@DHOLOIGM@Indices?5for?5islice?$CI?$CJ?5must?5be?5Non@ ; `string'
PUBLIC	??_C@_0DG@DNHAKAJL@Step?5for?5islice?$CI?$CJ?5must?5be?5a?5posi@ ; `string'
PUBLIC	??_C@_0EO@DAIAMBKO@Stop?5argument?5for?5islice?$CI?$CJ?5must?5@ ; `string'
PUBLIC	??_C@_06LJPMJOIG@islice?$AA@			; `string'
PUBLIC	??_C@_08IHGLAMB@islice?$CI?$CJ?$AA@		; `string'
EXTRN	PyLong_AsSsize_t:PROC
EXTRN	PyTuple_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$islice_new DD imagerel islice_new
	DD	imagerel islice_new+498
	DD	imagerel $unwind$islice_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$islice_new DD 081201H
	DD	0113412H
	DD	0d00e9212H
	DD	0700ac00cH
	DD	050086009H
xdata	ENDS
;	COMDAT ??_C@_0EI@DHOLOIGM@Indices?5for?5islice?$CI?$CJ?5must?5be?5Non@
CONST	SEGMENT
??_C@_0EI@DHOLOIGM@Indices?5for?5islice?$CI?$CJ?5must?5be?5Non@ DB 'Indic'
	DB	'es for islice() must be None or an integer: 0 <= x <= sys.max'
	DB	'size.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@DNHAKAJL@Step?5for?5islice?$CI?$CJ?5must?5be?5a?5posi@
CONST	SEGMENT
??_C@_0DG@DNHAKAJL@Step?5for?5islice?$CI?$CJ?5must?5be?5a?5posi@ DB 'Step'
	DB	' for islice() must be a positive integer or None.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@DAIAMBKO@Stop?5argument?5for?5islice?$CI?$CJ?5must?5@
CONST	SEGMENT
??_C@_0EO@DAIAMBKO@Stop?5argument?5for?5islice?$CI?$CJ?5must?5@ DB 'Stop '
	DB	'argument for islice() must be None or an integer: 0 <= x <= s'
	DB	'ys.maxsize.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06LJPMJOIG@islice?$AA@
CONST	SEGMENT
??_C@_06LJPMJOIG@islice?$AA@ DB 'islice', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08IHGLAMB@islice?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_08IHGLAMB@islice?$CI?$CJ?$AA@ DB 'islice()', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT islice_new
_TEXT	SEGMENT
a3$ = 64
seq$ = 72
a1$ = 128
type$ = 128
args$ = 136
kwds$ = 144
a2$ = 152
islice_new PROC						; COMDAT

; 1392 : {

  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 10	 mov	 QWORD PTR [rax+16], rbx
  00007	55		 push	 rbp
  00008	56		 push	 rsi
  00009	57		 push	 rdi
  0000a	41 54		 push	 r12
  0000c	41 55		 push	 r13
  0000e	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 1393 :     PyObject *seq;
; 1394 :     Py_ssize_t start=0, stop=-1, step=1;

  00012	45 33 ed	 xor	 r13d, r13d
  00015	48 83 cf ff	 or	 rdi, -1
  00019	48 8b da	 mov	 rbx, rdx

; 1395 :     PyObject *it, *a1=NULL, *a2=NULL, *a3=NULL;

  0001c	4c 89 68 08	 mov	 QWORD PTR [rax+8], r13
  00020	4c 89 68 20	 mov	 QWORD PTR [rax+32], r13
  00024	4c 89 68 c8	 mov	 QWORD PTR [rax-56], r13

; 1396 :     Py_ssize_t numargs;
; 1397 :     isliceobject *lz;
; 1398 : 
; 1399 :     if (type == &islice_type && !_PyArg_NoKeywords("islice()", kwds))

  00028	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:islice_type
  0002f	4c 8b e1	 mov	 r12, rcx
  00032	41 8b ed	 mov	 ebp, r13d
  00035	8d 77 02	 lea	 esi, QWORD PTR [rdi+2]
  00038	48 3b c8	 cmp	 rcx, rax
  0003b	75 17		 jne	 SHORT $LN20@islice_new
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08IHGLAMB@islice?$CI?$CJ?$AA@
  00044	49 8b d0	 mov	 rdx, r8
  00047	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  0004c	85 c0		 test	 eax, eax

; 1400 :         return NULL;

  0004e	0f 84 88 01 00
	00		 je	 $LN26@islice_new
$LN20@islice_new:

; 1401 : 
; 1402 :     if (!PyArg_UnpackTuple(args, "islice", 2, 4, &seq, &a1, &a2, &a3))

  00054	48 8d 44 24 40	 lea	 rax, QWORD PTR a3$[rsp]
  00059	41 b9 04 00 00
	00		 mov	 r9d, 4
  0005f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06LJPMJOIG@islice?$AA@
  00066	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0006b	48 8d 84 24 98
	00 00 00	 lea	 rax, QWORD PTR a2$[rsp]
  00073	45 8d 41 fe	 lea	 r8d, QWORD PTR [r9-2]
  00077	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0007c	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR a1$[rsp]
  00084	48 8b cb	 mov	 rcx, rbx
  00087	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0008c	48 8d 44 24 48	 lea	 rax, QWORD PTR seq$[rsp]
  00091	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00096	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0009b	85 c0		 test	 eax, eax

; 1403 :         return NULL;

  0009d	0f 84 39 01 00
	00		 je	 $LN26@islice_new

; 1404 : 
; 1405 :     numargs = PyTuple_Size(args);

  000a3	48 8b cb	 mov	 rcx, rbx
  000a6	e8 00 00 00 00	 call	 PyTuple_Size

; 1406 :     if (numargs == 2) {
; 1407 :         if (a1 != Py_None) {

  000ab	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR a1$[rsp]
  000b3	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  000ba	48 83 f8 02	 cmp	 rax, 2
  000be	75 2e		 jne	 SHORT $LN18@islice_new
  000c0	48 3b cb	 cmp	 rcx, rbx
  000c3	74 79		 je	 SHORT $LN24@islice_new

; 1408 :             stop = PyLong_AsSsize_t(a1);

  000c5	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  000ca	48 8b f8	 mov	 rdi, rax

; 1409 :             if (stop == -1) {

  000cd	48 83 f8 ff	 cmp	 rax, -1
  000d1	75 61		 jne	 SHORT $LN23@islice_new
$LN28@islice_new:

; 1410 :                 if (PyErr_Occurred())

  000d3	e8 00 00 00 00	 call	 PyErr_Occurred
  000d8	48 85 c0	 test	 rax, rax
  000db	74 05		 je	 SHORT $LN15@islice_new

; 1411 :                     PyErr_Clear();

  000dd	e8 00 00 00 00	 call	 PyErr_Clear
$LN15@islice_new:

; 1412 :                 PyErr_SetString(PyExc_ValueError,
; 1413 :                    "Stop argument for islice() must be None or an integer: 0 <= x <= sys.maxsize.");

  000e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EO@DAIAMBKO@Stop?5argument?5for?5islice?$CI?$CJ?5must?5@

; 1414 :                 return NULL;

  000e9	e9 e2 00 00 00	 jmp	 $LN27@islice_new
$LN18@islice_new:

; 1415 :             }
; 1416 :         }
; 1417 :     } else {
; 1418 :         if (a1 != Py_None)

  000ee	48 3b cb	 cmp	 rcx, rbx
  000f1	74 1d		 je	 SHORT $LN12@islice_new

; 1419 :             start = PyLong_AsSsize_t(a1);

  000f3	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  000f8	48 8b e8	 mov	 rbp, rax

; 1420 :         if (start == -1 && PyErr_Occurred())

  000fb	48 83 f8 ff	 cmp	 rax, -1
  000ff	75 0f		 jne	 SHORT $LN12@islice_new
  00101	e8 00 00 00 00	 call	 PyErr_Occurred
  00106	48 85 c0	 test	 rax, rax
  00109	74 05		 je	 SHORT $LN12@islice_new

; 1421 :             PyErr_Clear();

  0010b	e8 00 00 00 00	 call	 PyErr_Clear
$LN12@islice_new:

; 1422 :         if (a2 != Py_None) {

  00110	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR a2$[rsp]
  00118	48 3b cb	 cmp	 rcx, rbx
  0011b	74 0e		 je	 SHORT $LN10@islice_new

; 1423 :             stop = PyLong_AsSsize_t(a2);

  0011d	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  00122	48 8b f8	 mov	 rdi, rax

; 1424 :             if (stop == -1) {

  00125	48 83 f8 ff	 cmp	 rax, -1

; 1425 :                 if (PyErr_Occurred())
; 1426 :                     PyErr_Clear();
; 1427 :                 PyErr_SetString(PyExc_ValueError,
; 1428 :                    "Stop argument for islice() must be None or an integer: 0 <= x <= sys.maxsize.");
; 1429 :                 return NULL;

  00129	74 a8		 je	 SHORT $LN28@islice_new
$LN10@islice_new:

; 1430 :             }
; 1431 :         }
; 1432 :     }
; 1433 :     if (start<0 || stop<-1) {

  0012b	48 85 ed	 test	 rbp, rbp
  0012e	0f 88 95 00 00
	00		 js	 $LN7@islice_new
$LN23@islice_new:
  00134	48 83 ff ff	 cmp	 rdi, -1
  00138	0f 8c 8b 00 00
	00		 jl	 $LN7@islice_new
$LN24@islice_new:

; 1437 :     }
; 1438 : 
; 1439 :     if (a3 != NULL) {

  0013e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR a3$[rsp]
  00143	48 85 c9	 test	 rcx, rcx
  00146	74 3a		 je	 SHORT $LN3@islice_new

; 1440 :         if (a3 != Py_None)

  00148	48 3b cb	 cmp	 rcx, rbx
  0014b	74 35		 je	 SHORT $LN3@islice_new

; 1441 :             step = PyLong_AsSsize_t(a3);

  0014d	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  00152	48 8b f0	 mov	 rsi, rax

; 1442 :         if (step == -1 && PyErr_Occurred())

  00155	48 83 f8 ff	 cmp	 rax, -1
  00159	75 18		 jne	 SHORT $LN4@islice_new
  0015b	e8 00 00 00 00	 call	 PyErr_Occurred
  00160	48 85 c0	 test	 rax, rax
  00163	74 14		 je	 SHORT $LN25@islice_new

; 1443 :             PyErr_Clear();

  00165	e8 00 00 00 00	 call	 PyErr_Clear

; 1446 :         PyErr_SetString(PyExc_ValueError,
; 1447 :            "Step for islice() must be a positive integer or None.");

  0016a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DG@DNHAKAJL@Step?5for?5islice?$CI?$CJ?5must?5be?5a?5posi@

; 1448 :         return NULL;

  00171	eb 5d		 jmp	 SHORT $LN27@islice_new
$LN4@islice_new:

; 1444 :     }
; 1445 :     if (step<1) {

  00173	48 83 f8 01	 cmp	 rax, 1
  00177	7d 09		 jge	 SHORT $LN3@islice_new
$LN25@islice_new:

; 1446 :         PyErr_SetString(PyExc_ValueError,
; 1447 :            "Step for islice() must be a positive integer or None.");

  00179	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DG@DNHAKAJL@Step?5for?5islice?$CI?$CJ?5must?5be?5a?5posi@

; 1448 :         return NULL;

  00180	eb 4e		 jmp	 SHORT $LN27@islice_new
$LN3@islice_new:

; 1449 :     }
; 1450 : 
; 1451 :     /* Get iterator. */
; 1452 :     it = PyObject_GetIter(seq);

  00182	48 8b 4c 24 48	 mov	 rcx, QWORD PTR seq$[rsp]
  00187	e8 00 00 00 00	 call	 PyObject_GetIter
  0018c	48 8b d8	 mov	 rbx, rax

; 1453 :     if (it == NULL)

  0018f	48 85 c0	 test	 rax, rax

; 1454 :         return NULL;

  00192	74 48		 je	 SHORT $LN26@islice_new

; 1455 : 
; 1456 :     /* create isliceobject structure */
; 1457 :     lz = (isliceobject *)type->tp_alloc(type, 0);

  00194	33 d2		 xor	 edx, edx
  00196	49 8b cc	 mov	 rcx, r12
  00199	41 ff 94 24 88
	01 00 00	 call	 QWORD PTR [r12+392]

; 1458 :     if (lz == NULL) {

  001a1	48 85 c0	 test	 rax, rax
  001a4	75 0a		 jne	 SHORT $LN1@islice_new

; 1459 :         Py_DECREF(it);

  001a6	48 8b cb	 mov	 rcx, rbx
  001a9	e8 00 00 00 00	 call	 _Py_DecRef

; 1460 :         return NULL;

  001ae	eb 2c		 jmp	 SHORT $LN26@islice_new
$LN1@islice_new:

; 1461 :     }
; 1462 :     lz->it = it;

  001b0	48 89 58 60	 mov	 QWORD PTR [rax+96], rbx

; 1463 :     lz->next = start;

  001b4	48 89 68 68	 mov	 QWORD PTR [rax+104], rbp

; 1464 :     lz->stop = stop;

  001b8	48 89 78 70	 mov	 QWORD PTR [rax+112], rdi

; 1465 :     lz->step = step;

  001bc	48 89 70 78	 mov	 QWORD PTR [rax+120], rsi

; 1466 :     lz->cnt = 0L;

  001c0	4c 89 a8 80 00
	00 00		 mov	 QWORD PTR [rax+128], r13

; 1467 : 
; 1468 :     return (PyObject *)lz;

  001c7	eb 15		 jmp	 SHORT $LN21@islice_new
$LN7@islice_new:

; 1434 :         PyErr_SetString(PyExc_ValueError,
; 1435 :            "Indices for islice() must be None or an integer: 0 <= x <= sys.maxsize.");

  001c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EI@DHOLOIGM@Indices?5for?5islice?$CI?$CJ?5must?5be?5Non@
$LN27@islice_new:
  001d0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  001d7	e8 00 00 00 00	 call	 PyErr_SetString
$LN26@islice_new:

; 1436 :         return NULL;

  001dc	33 c0		 xor	 eax, eax
$LN21@islice_new:

; 1469 : }

  001de	48 8b 9c 24 88
	00 00 00	 mov	 rbx, QWORD PTR [rsp+136]
  001e6	48 83 c4 50	 add	 rsp, 80			; 00000050H
  001ea	41 5d		 pop	 r13
  001ec	41 5c		 pop	 r12
  001ee	5f		 pop	 rdi
  001ef	5e		 pop	 rsi
  001f0	5d		 pop	 rbp
  001f1	c3		 ret	 0
islice_new ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$islice_dealloc DD imagerel islice_dealloc
	DD	imagerel islice_dealloc+152
	DD	imagerel $unwind$islice_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$islice_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT islice_dealloc
_TEXT	SEGMENT
lz$ = 64
islice_dealloc PROC					; COMDAT

; 1473 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 1474 :     PyObject_GC_UnTrack(lz);

  0000d	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 1475 :     Py_XDECREF(lz->it);

  00012	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  00016	48 85 db	 test	 rbx, rbx
  00019	74 65		 je	 SHORT $LN3@islice_dea
  0001b	e8 00 00 00 00	 call	 _Py_PXCTX
  00020	85 c0		 test	 eax, eax
  00022	75 5c		 jne	 SHORT $LN3@islice_dea
  00024	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00028	a8 20		 test	 al, 32			; 00000020H
  0002a	75 4c		 jne	 SHORT $LN11@islice_dea
  0002c	84 c0		 test	 al, al
  0002e	78 48		 js	 SHORT $LN11@islice_dea
  00030	a8 02		 test	 al, 2
  00032	75 4c		 jne	 SHORT $LN3@islice_dea
  00034	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00038	75 46		 jne	 SHORT $LN3@islice_dea
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00048	4c 8b cb	 mov	 r9, rbx
  0004b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00051	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00059	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005e	48 8b cb	 mov	 rcx, rbx
  00061	85 c0		 test	 eax, eax
  00063	74 07		 je	 SHORT $LN16@islice_dea
  00065	e8 00 00 00 00	 call	 _Px_Dealloc
  0006a	eb 14		 jmp	 SHORT $LN3@islice_dea
$LN16@islice_dea:
  0006c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00070	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00076	eb 08		 jmp	 SHORT $LN3@islice_dea
$LN11@islice_dea:
  00078	48 8b cb	 mov	 rcx, rbx
  0007b	e8 00 00 00 00	 call	 Px_DecRef
$LN3@islice_dea:

; 1476 :     Py_TYPE(lz)->tp_free(lz);

  00080	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00084	48 8b cf	 mov	 rcx, rdi

; 1477 : }

  00087	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0008c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00090	5f		 pop	 rdi
  00091	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
islice_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@JEBIGEKL@islice_traverse?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$islice_traverse DD imagerel islice_traverse
	DD	imagerel islice_traverse+97
	DD	imagerel $unwind$islice_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$islice_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BA@JEBIGEKL@islice_traverse?$AA@
CONST	SEGMENT
??_C@_0BA@JEBIGEKL@islice_traverse?$AA@ DB 'islice_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT islice_traverse
_TEXT	SEGMENT
lz$ = 48
visit$ = 56
arg$ = 64
islice_traverse PROC					; COMDAT

; 1481 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 1482 :     Py_VISIT(lz->it);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN3@islice_tra
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@JEBIGEKL@islice_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 ca 05 00
	00		 mov	 r8d, 1482		; 000005caH
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@islice_tra:
  0003d	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN5@islice_tra
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 02		 jne	 SHORT $LN7@islice_tra
$LN5@islice_tra:

; 1483 :     return 0;

  0004f	33 c0		 xor	 eax, eax
$LN7@islice_tra:

; 1484 : }

  00051	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00056	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0005b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005f	5f		 pop	 rdi
  00060	c3		 ret	 0
islice_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$islice_next DD imagerel islice_next
	DD	imagerel islice_next+307
	DD	imagerel $unwind$islice_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$islice_next DD 0a1a01H
	DD	0b741aH
	DD	0a641aH
	DD	09541aH
	DD	08341aH
	DD	0c016521aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT islice_next
_TEXT	SEGMENT
lz$ = 64
islice_next PROC					; COMDAT

; 1488 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1489 :     PyObject *item;
; 1490 :     PyObject *it = lz->it;

  0001a	48 8b 69 60	 mov	 rbp, QWORD PTR [rcx+96]

; 1491 :     Py_ssize_t stop = lz->stop;

  0001e	48 8b 71 70	 mov	 rsi, QWORD PTR [rcx+112]
  00022	48 8b f9	 mov	 rdi, rcx

; 1492 :     Py_ssize_t oldnext;
; 1493 :     PyObject *(*iternext)(PyObject *);
; 1494 : 
; 1495 :     iternext = *Py_TYPE(it)->tp_iternext;

  00025	48 8b 45 58	 mov	 rax, QWORD PTR [rbp+88]
  00029	4c 8b a0 38 01
	00 00		 mov	 r12, QWORD PTR [rax+312]

; 1496 :     while (lz->cnt < lz->next) {

  00030	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]
  00034	48 39 81 80 00
	00 00		 cmp	 QWORD PTR [rcx+128], rax
  0003b	0f 8d 8f 00 00
	00		 jge	 $LN6@islice_nex
$LL7@islice_nex:

; 1497 :         item = iternext(it);

  00041	48 8b cd	 mov	 rcx, rbp
  00044	41 ff d4	 call	 r12
  00047	48 8b d8	 mov	 rbx, rax

; 1498 :         if (item == NULL)

  0004a	48 85 c0	 test	 rax, rax
  0004d	0f 84 dc 00 00
	00		 je	 $LN22@islice_nex

; 1500 :         Py_DECREF(item);

  00053	e8 00 00 00 00	 call	 _Py_PXCTX
  00058	85 c0		 test	 eax, eax
  0005a	75 5c		 jne	 SHORT $LN20@islice_nex
  0005c	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00060	a8 20		 test	 al, 32			; 00000020H
  00062	75 4c		 jne	 SHORT $LN14@islice_nex
  00064	84 c0		 test	 al, al
  00066	78 48		 js	 SHORT $LN14@islice_nex
  00068	a8 02		 test	 al, 2
  0006a	75 4c		 jne	 SHORT $LN20@islice_nex
  0006c	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00070	75 46		 jne	 SHORT $LN20@islice_nex
  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00080	4c 8b cb	 mov	 r9, rbx
  00083	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00089	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00091	e8 00 00 00 00	 call	 _PyParallel_Guard
  00096	48 8b cb	 mov	 rcx, rbx
  00099	85 c0		 test	 eax, eax
  0009b	74 07		 je	 SHORT $LN19@islice_nex
  0009d	e8 00 00 00 00	 call	 _Px_Dealloc
  000a2	eb 14		 jmp	 SHORT $LN20@islice_nex
$LN19@islice_nex:
  000a4	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000a8	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000ae	eb 08		 jmp	 SHORT $LN20@islice_nex
$LN14@islice_nex:
  000b0	48 8b cb	 mov	 rcx, rbx
  000b3	e8 00 00 00 00	 call	 Px_DecRef
$LN20@islice_nex:

; 1501 :         lz->cnt++;

  000b8	48 ff 87 80 00
	00 00		 inc	 QWORD PTR [rdi+128]
  000bf	48 8b 47 68	 mov	 rax, QWORD PTR [rdi+104]
  000c3	48 39 87 80 00
	00 00		 cmp	 QWORD PTR [rdi+128], rax
  000ca	0f 8c 71 ff ff
	ff		 jl	 $LL7@islice_nex
$LN6@islice_nex:

; 1502 :     }
; 1503 :     if (stop != -1 && lz->cnt >= stop)

  000d0	48 83 fe ff	 cmp	 rsi, -1
  000d4	74 09		 je	 SHORT $LN4@islice_nex
  000d6	48 39 b7 80 00
	00 00		 cmp	 QWORD PTR [rdi+128], rsi

; 1504 :         return NULL;

  000dd	7d 50		 jge	 SHORT $LN22@islice_nex
$LN4@islice_nex:

; 1505 :     item = iternext(it);

  000df	48 8b cd	 mov	 rcx, rbp
  000e2	41 ff d4	 call	 r12

; 1506 :     if (item == NULL)

  000e5	48 85 c0	 test	 rax, rax

; 1507 :         return NULL;

  000e8	74 45		 je	 SHORT $LN22@islice_nex

; 1508 :     lz->cnt++;
; 1509 :     oldnext = lz->next;

  000ea	48 8b 4f 68	 mov	 rcx, QWORD PTR [rdi+104]

; 1510 :     /* The (size_t) cast below avoids the danger of undefined
; 1511 :        behaviour from signed integer overflow. */
; 1512 :     lz->next += (size_t)lz->step;

  000ee	48 8b 57 78	 mov	 rdx, QWORD PTR [rdi+120]
  000f2	48 ff 87 80 00
	00 00		 inc	 QWORD PTR [rdi+128]
  000f9	48 03 d1	 add	 rdx, rcx
  000fc	48 89 57 68	 mov	 QWORD PTR [rdi+104], rdx

; 1513 :     if (lz->next < oldnext || (stop != -1 && lz->next > stop))

  00100	48 3b d1	 cmp	 rdx, rcx
  00103	7c 0b		 jl	 SHORT $LN1@islice_nex
  00105	48 83 fe ff	 cmp	 rsi, -1
  00109	74 09		 je	 SHORT $LN8@islice_nex
  0010b	48 3b d6	 cmp	 rdx, rsi
  0010e	7e 04		 jle	 SHORT $LN8@islice_nex
$LN1@islice_nex:

; 1514 :         lz->next = stop;

  00110	48 89 77 68	 mov	 QWORD PTR [rdi+104], rsi
$LN8@islice_nex:

; 1515 :     return item;
; 1516 : }

  00114	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00119	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  0011e	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00123	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  00128	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0012c	41 5c		 pop	 r12
  0012e	c3		 ret	 0
$LN22@islice_nex:

; 1499 :             return NULL;

  0012f	33 c0		 xor	 eax, eax
  00131	eb e1		 jmp	 SHORT $LN8@islice_nex
islice_next ENDP
_TEXT	ENDS
PUBLIC	??_C@_08ECCLGIIA@O?$CIOnNn?$CJn?$AA@		; `string'
EXTRN	PyLong_FromSsize_t:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$islice_reduce DD imagerel islice_reduce
	DD	imagerel islice_reduce+184
	DD	imagerel $unwind$islice_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$islice_reduce DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT ??_C@_08ECCLGIIA@O?$CIOnNn?$CJn?$AA@
CONST	SEGMENT
??_C@_08ECCLGIIA@O?$CIOnNn?$CJn?$AA@ DB 'O(OnNn)n', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
CONST	ENDS
;	COMDAT islice_reduce
_TEXT	SEGMENT
lz$ = 80
islice_reduce PROC					; COMDAT

; 1520 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8b f9	 mov	 rdi, rcx

; 1521 :     /* When unpickled, generate a new object with the same bounds,
; 1522 :      * then 'setstate' with the next and count
; 1523 :      */
; 1524 :     PyObject *stop;
; 1525 :     if (lz->stop == -1) {

  0000d	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00011	48 83 f9 ff	 cmp	 rcx, -1
  00015	0f 85 85 00 00
	00		 jne	 $LN3@islice_red

; 1526 :         stop = Py_None;

  0001b	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct

; 1527 :         Py_INCREF(stop);

  00022	e8 00 00 00 00	 call	 _Py_PXCTX
  00027	85 c0		 test	 eax, eax
  00029	75 38		 jne	 SHORT $LN1@islice_red
  0002b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00039	4c 8b cb	 mov	 r9, rbx
  0003c	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00042	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0004a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004f	85 c0		 test	 eax, eax
  00051	75 09		 jne	 SHORT $LN6@islice_red
  00053	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0005a	74 07		 je	 SHORT $LN1@islice_red
$LN6@islice_red:
  0005c	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN1@islice_red:

; 1531 :             return NULL;
; 1532 :     }
; 1533 :     return Py_BuildValue("O(OnNn)n", Py_TYPE(lz),
; 1534 :         lz->it, lz->next, stop, lz->step,
; 1535 :         lz->cnt);

  00063	48 8b 87 80 00
	00 00		 mov	 rax, QWORD PTR [rdi+128]
  0006a	4c 8b 4f 68	 mov	 r9, QWORD PTR [rdi+104]
  0006e	4c 8b 47 60	 mov	 r8, QWORD PTR [rdi+96]
  00072	48 8b 57 58	 mov	 rdx, QWORD PTR [rdi+88]
  00076	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0007b	48 8b 47 78	 mov	 rax, QWORD PTR [rdi+120]
  0007f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00084	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08ECCLGIIA@O?$CIOnNn?$CJn?$AA@
  0008b	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00090	e8 00 00 00 00	 call	 Py_BuildValue

; 1536 : }

  00095	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0009a	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0009e	5f		 pop	 rdi
  0009f	c3		 ret	 0
$LN3@islice_red:

; 1528 :     } else {
; 1529 :         stop = PyLong_FromSsize_t(lz->stop);

  000a0	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  000a5	48 8b d8	 mov	 rbx, rax

; 1530 :         if (stop == NULL)

  000a8	48 85 c0	 test	 rax, rax
  000ab	75 b6		 jne	 SHORT $LN1@islice_red

; 1536 : }

  000ad	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000b2	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000b6	5f		 pop	 rdi
  000b7	c3		 ret	 0
islice_reduce ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$islice_setstate DD imagerel islice_setstate
	DD	imagerel islice_setstate+147
	DD	imagerel $unwind$islice_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$islice_setstate DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT islice_setstate
_TEXT	SEGMENT
lz$ = 64
state$ = 72
islice_setstate PROC					; COMDAT

; 1540 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 1541 :     Py_ssize_t cnt = PyLong_AsSsize_t(state);

  0000d	48 8b ca	 mov	 rcx, rdx
  00010	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  00015	48 8b d8	 mov	 rbx, rax

; 1542 :     if (cnt == -1 && PyErr_Occurred())

  00018	48 83 f8 ff	 cmp	 rax, -1
  0001c	75 17		 jne	 SHORT $LN1@islice_set
  0001e	e8 00 00 00 00	 call	 PyErr_Occurred
  00023	48 85 c0	 test	 rax, rax
  00026	74 0d		 je	 SHORT $LN1@islice_set

; 1543 :         return NULL;

  00028	33 c0		 xor	 eax, eax

; 1546 : }

  0002a	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0002f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00033	5f		 pop	 rdi
  00034	c3		 ret	 0
$LN1@islice_set:

; 1544 :     lz->cnt = cnt;

  00035	48 89 9f 80 00
	00 00		 mov	 QWORD PTR [rdi+128], rbx

; 1545 :     Py_RETURN_NONE;

  0003c	e8 00 00 00 00	 call	 _Py_PXCTX
  00041	85 c0		 test	 eax, eax
  00043	75 3c		 jne	 SHORT $LN5@islice_set
  00045	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  0004c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00053	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0005a	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00060	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00068	e8 00 00 00 00	 call	 _PyParallel_Guard
  0006d	85 c0		 test	 eax, eax
  0006f	75 09		 jne	 SHORT $LN4@islice_set
  00071	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00078	74 07		 je	 SHORT $LN5@islice_set
$LN4@islice_set:
  0007a	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN5@islice_set:
  00081	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1546 : }

  00088	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0008d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00091	5f		 pop	 rdi
  00092	c3		 ret	 0
islice_setstate ENDP
_TEXT	ENDS
PUBLIC	??_C@_07EPPJNKLC@starmap?$AA@			; `string'
PUBLIC	??_C@_09MCONDALK@starmap?$CI?$CJ?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$starmap_new DD imagerel starmap_new
	DD	imagerel starmap_new+190
	DD	imagerel $unwind$starmap_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$starmap_new DD 040a01H
	DD	09340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_07EPPJNKLC@starmap?$AA@
CONST	SEGMENT
??_C@_07EPPJNKLC@starmap?$AA@ DB 'starmap', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09MCONDALK@starmap?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_09MCONDALK@starmap?$CI?$CJ?$AA@ DB 'starmap()', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT starmap_new
_TEXT	SEGMENT
func$ = 64
type$ = 64
args$ = 72
kwds$ = 80
seq$ = 88
starmap_new PROC					; COMDAT

; 1624 : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1625 :     PyObject *func, *seq;
; 1626 :     PyObject *it;
; 1627 :     starmapobject *lz;
; 1628 : 
; 1629 :     if (type == &starmap_type && !_PyArg_NoKeywords("starmap()", kwds))

  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:starmap_type
  00011	48 8b fa	 mov	 rdi, rdx
  00014	48 8b d9	 mov	 rbx, rcx
  00017	48 3b c8	 cmp	 rcx, rax
  0001a	75 13		 jne	 SHORT $LN4@starmap_ne
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09MCONDALK@starmap?$CI?$CJ?$AA@
  00023	49 8b d0	 mov	 rdx, r8
  00026	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  0002b	85 c0		 test	 eax, eax

; 1630 :         return NULL;

  0002d	74 5d		 je	 SHORT $LN7@starmap_ne
$LN4@starmap_ne:

; 1631 : 
; 1632 :     if (!PyArg_UnpackTuple(args, "starmap", 2, 2, &func, &seq))

  0002f	48 8d 44 24 58	 lea	 rax, QWORD PTR seq$[rsp]
  00034	41 b9 02 00 00
	00		 mov	 r9d, 2
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07EPPJNKLC@starmap?$AA@
  00041	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00046	48 8d 44 24 40	 lea	 rax, QWORD PTR func$[rsp]
  0004b	45 8b c1	 mov	 r8d, r9d
  0004e	48 8b cf	 mov	 rcx, rdi
  00051	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00056	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0005b	85 c0		 test	 eax, eax

; 1633 :         return NULL;

  0005d	74 2d		 je	 SHORT $LN7@starmap_ne

; 1634 : 
; 1635 :     /* Get iterator. */
; 1636 :     it = PyObject_GetIter(seq);

  0005f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR seq$[rsp]
  00064	e8 00 00 00 00	 call	 PyObject_GetIter
  00069	48 8b f8	 mov	 rdi, rax

; 1637 :     if (it == NULL)

  0006c	48 85 c0	 test	 rax, rax

; 1638 :         return NULL;

  0006f	74 1b		 je	 SHORT $LN7@starmap_ne

; 1639 : 
; 1640 :     /* create starmapobject structure */
; 1641 :     lz = (starmapobject *)type->tp_alloc(type, 0);

  00071	33 d2		 xor	 edx, edx
  00073	48 8b cb	 mov	 rcx, rbx
  00076	ff 93 88 01 00
	00		 call	 QWORD PTR [rbx+392]
  0007c	48 8b d8	 mov	 rbx, rax

; 1642 :     if (lz == NULL) {

  0007f	48 85 c0	 test	 rax, rax
  00082	75 15		 jne	 SHORT $LN1@starmap_ne

; 1643 :         Py_DECREF(it);

  00084	48 8b cf	 mov	 rcx, rdi
  00087	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@starmap_ne:

; 1644 :         return NULL;

  0008c	33 c0		 xor	 eax, eax

; 1651 : }

  0008e	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00093	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00097	5f		 pop	 rdi
  00098	c3		 ret	 0
$LN1@starmap_ne:

; 1645 :     }
; 1646 :     Py_INCREF(func);

  00099	48 8b 4c 24 40	 mov	 rcx, QWORD PTR func$[rsp]
  0009e	e8 00 00 00 00	 call	 _Py_IncRef

; 1647 :     lz->func = func;

  000a3	4c 8b 5c 24 40	 mov	 r11, QWORD PTR func$[rsp]

; 1648 :     lz->it = it;

  000a8	48 89 7b 68	 mov	 QWORD PTR [rbx+104], rdi
  000ac	4c 89 5b 60	 mov	 QWORD PTR [rbx+96], r11

; 1649 : 
; 1650 :     return (PyObject *)lz;

  000b0	48 8b c3	 mov	 rax, rbx

; 1651 : }

  000b3	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000b8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000bc	5f		 pop	 rdi
  000bd	c3		 ret	 0
starmap_new ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$starmap_dealloc DD imagerel starmap_dealloc
	DD	imagerel starmap_dealloc+262
	DD	imagerel $unwind$starmap_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$starmap_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT starmap_dealloc
_TEXT	SEGMENT
lz$ = 64
starmap_dealloc PROC					; COMDAT

; 1655 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 1656 :     PyObject_GC_UnTrack(lz);

  0000d	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 1657 :     Py_XDECREF(lz->func);

  00012	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  00016	48 85 db	 test	 rbx, rbx
  00019	74 65		 je	 SHORT $LN7@starmap_de
  0001b	e8 00 00 00 00	 call	 _Py_PXCTX
  00020	85 c0		 test	 eax, eax
  00022	75 5c		 jne	 SHORT $LN7@starmap_de
  00024	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00028	a8 20		 test	 al, 32			; 00000020H
  0002a	75 4c		 jne	 SHORT $LN15@starmap_de
  0002c	84 c0		 test	 al, al
  0002e	78 48		 js	 SHORT $LN15@starmap_de
  00030	a8 02		 test	 al, 2
  00032	75 4c		 jne	 SHORT $LN7@starmap_de
  00034	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00038	75 46		 jne	 SHORT $LN7@starmap_de
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00048	4c 8b cb	 mov	 r9, rbx
  0004b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00051	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00059	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005e	48 8b cb	 mov	 rcx, rbx
  00061	85 c0		 test	 eax, eax
  00063	74 07		 je	 SHORT $LN20@starmap_de
  00065	e8 00 00 00 00	 call	 _Px_Dealloc
  0006a	eb 14		 jmp	 SHORT $LN7@starmap_de
$LN20@starmap_de:
  0006c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00070	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00076	eb 08		 jmp	 SHORT $LN7@starmap_de
$LN15@starmap_de:
  00078	48 8b cb	 mov	 rcx, rbx
  0007b	e8 00 00 00 00	 call	 Px_DecRef
$LN7@starmap_de:

; 1658 :     Py_XDECREF(lz->it);

  00080	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  00084	48 85 db	 test	 rbx, rbx
  00087	74 65		 je	 SHORT $LN3@starmap_de
  00089	e8 00 00 00 00	 call	 _Py_PXCTX
  0008e	85 c0		 test	 eax, eax
  00090	75 5c		 jne	 SHORT $LN3@starmap_de
  00092	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00096	a8 20		 test	 al, 32			; 00000020H
  00098	75 4c		 jne	 SHORT $LN26@starmap_de
  0009a	84 c0		 test	 al, al
  0009c	78 48		 js	 SHORT $LN26@starmap_de
  0009e	a8 02		 test	 al, 2
  000a0	75 4c		 jne	 SHORT $LN3@starmap_de
  000a2	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000a6	75 46		 jne	 SHORT $LN3@starmap_de
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000b6	4c 8b cb	 mov	 r9, rbx
  000b9	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000bf	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cc	48 8b cb	 mov	 rcx, rbx
  000cf	85 c0		 test	 eax, eax
  000d1	74 07		 je	 SHORT $LN31@starmap_de
  000d3	e8 00 00 00 00	 call	 _Px_Dealloc
  000d8	eb 14		 jmp	 SHORT $LN3@starmap_de
$LN31@starmap_de:
  000da	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000de	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000e4	eb 08		 jmp	 SHORT $LN3@starmap_de
$LN26@starmap_de:
  000e6	48 8b cb	 mov	 rcx, rbx
  000e9	e8 00 00 00 00	 call	 Px_DecRef
$LN3@starmap_de:

; 1659 :     Py_TYPE(lz)->tp_free(lz);

  000ee	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000f2	48 8b cf	 mov	 rcx, rdi

; 1660 : }

  000f5	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000fa	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000fe	5f		 pop	 rdi
  000ff	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
starmap_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@NLOBOMMB@starmap_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$starmap_traverse DD imagerel starmap_traverse
	DD	imagerel starmap_traverse+152
	DD	imagerel $unwind$starmap_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$starmap_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BB@NLOBOMMB@starmap_traverse?$AA@
CONST	SEGMENT
??_C@_0BB@NLOBOMMB@starmap_traverse?$AA@ DB 'starmap_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT starmap_traverse
_TEXT	SEGMENT
lz$ = 48
visit$ = 56
arg$ = 64
starmap_traverse PROC					; COMDAT

; 1664 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 1665 :     Py_VISIT(lz->it);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN9@starmap_tr
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@NLOBOMMB@starmap_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 81 06 00
	00		 mov	 r8d, 1665		; 00000681H
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@starmap_tr:
  0003d	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN11@starmap_tr
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 39		 jne	 SHORT $LN13@starmap_tr
$LN11@starmap_tr:

; 1666 :     Py_VISIT(lz->func);

  0004f	e8 00 00 00 00	 call	 _Py_PXCTX
  00054	85 c0		 test	 eax, eax
  00056	74 1c		 je	 SHORT $LN3@starmap_tr
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@NLOBOMMB@starmap_traverse?$AA@
  00066	45 33 c9	 xor	 r9d, r9d
  00069	41 b8 82 06 00
	00		 mov	 r8d, 1666		; 00000682H
  0006f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@starmap_tr:
  00074	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00078	48 85 c9	 test	 rcx, rcx
  0007b	74 09		 je	 SHORT $LN5@starmap_tr
  0007d	48 8b d7	 mov	 rdx, rdi
  00080	ff d6		 call	 rsi
  00082	85 c0		 test	 eax, eax
  00084	75 02		 jne	 SHORT $LN13@starmap_tr
$LN5@starmap_tr:

; 1667 :     return 0;

  00086	33 c0		 xor	 eax, eax
$LN13@starmap_tr:

; 1668 : }

  00088	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00092	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00096	5f		 pop	 rdi
  00097	c3		 ret	 0
starmap_traverse ENDP
_TEXT	ENDS
EXTRN	PyObject_Call:PROC
EXTRN	PySequence_Tuple:PROC
EXTRN	PyTuple_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$starmap_next DD imagerel starmap_next
	DD	imagerel starmap_next+53
	DD	imagerel $unwind$starmap_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$starmap_next DD imagerel starmap_next+53
	DD	imagerel starmap_next+106
	DD	imagerel $chain$0$starmap_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$starmap_next DD imagerel starmap_next+106
	DD	imagerel starmap_next+154
	DD	imagerel $chain$2$starmap_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$starmap_next DD 020021H
	DD	063400H
	DD	imagerel starmap_next
	DD	imagerel starmap_next+53
	DD	imagerel $unwind$starmap_next
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$starmap_next DD 020521H
	DD	063405H
	DD	imagerel starmap_next
	DD	imagerel starmap_next+53
	DD	imagerel $unwind$starmap_next
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$starmap_next DD 040a01H
	DD	07640aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT starmap_next
_TEXT	SEGMENT
lz$ = 48
starmap_next PROC					; COMDAT

; 1672 : {

  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f1	 mov	 rsi, rcx

; 1673 :     PyObject *args;
; 1674 :     PyObject *result;
; 1675 :     PyObject *it = lz->it;

  0000d	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]

; 1676 : 
; 1677 :     args = (*Py_TYPE(it)->tp_iternext)(it);

  00011	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00015	ff 90 38 01 00
	00		 call	 QWORD PTR [rax+312]
  0001b	48 8b f8	 mov	 rdi, rax

; 1678 :     if (args == NULL)

  0001e	48 85 c0	 test	 rax, rax
  00021	75 0b		 jne	 SHORT $LN3@starmap_ne@2

; 1689 :     return result;
; 1690 : }

  00023	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5f		 pop	 rdi
  0002d	c3		 ret	 0
$LN3@starmap_ne@2:

; 1679 :         return NULL;
; 1680 :     if (!PyTuple_CheckExact(args)) {

  0002e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTuple_Type
  00035	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0003a	48 39 47 58	 cmp	 QWORD PTR [rdi+88], rax
  0003e	74 2d		 je	 SHORT $LN2@starmap_ne@2

; 1681 :         PyObject *newargs = PySequence_Tuple(args);

  00040	48 8b cf	 mov	 rcx, rdi
  00043	e8 00 00 00 00	 call	 PySequence_Tuple

; 1682 :         Py_DECREF(args);

  00048	48 8b cf	 mov	 rcx, rdi
  0004b	48 8b d8	 mov	 rbx, rax
  0004e	e8 00 00 00 00	 call	 _Py_DecRef

; 1683 :         if (newargs == NULL)

  00053	48 85 db	 test	 rbx, rbx
  00056	75 12		 jne	 SHORT $LN1@starmap_ne@2

; 1684 :             return NULL;

  00058	33 c0		 xor	 eax, eax
  0005a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1689 :     return result;
; 1690 : }

  0005f	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00064	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00068	5f		 pop	 rdi
  00069	c3		 ret	 0
$LN1@starmap_ne@2:

; 1685 :         args = newargs;

  0006a	48 8b fb	 mov	 rdi, rbx
$LN2@starmap_ne@2:

; 1686 :     }
; 1687 :     result = PyObject_Call(lz->func, args, NULL);

  0006d	48 8b 4e 60	 mov	 rcx, QWORD PTR [rsi+96]
  00071	45 33 c0	 xor	 r8d, r8d
  00074	48 8b d7	 mov	 rdx, rdi
  00077	e8 00 00 00 00	 call	 PyObject_Call

; 1688 :     Py_DECREF(args);

  0007c	48 8b cf	 mov	 rcx, rdi
  0007f	48 8b d8	 mov	 rbx, rax
  00082	e8 00 00 00 00	 call	 _Py_DecRef

; 1689 :     return result;
; 1690 : }

  00087	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0008c	48 8b c3	 mov	 rax, rbx
  0008f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00094	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00098	5f		 pop	 rdi
  00099	c3		 ret	 0
starmap_next ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT starmap_reduce
_TEXT	SEGMENT
lz$ = 8
starmap_reduce PROC					; COMDAT

; 1695 :     /* Just pickle the iterator */
; 1696 :     return Py_BuildValue("O(OO)", Py_TYPE(lz), lz->func, lz->it);

  00000	4c 8b 49 68	 mov	 r9, QWORD PTR [rcx+104]
  00004	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]
  00008	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0000c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LNHFJPFN@O?$CIOO?$CJ?$AA@

; 1697 : }

  00013	e9 00 00 00 00	 jmp	 Py_BuildValue
starmap_reduce ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$chain_new_internal DD imagerel chain_new_internal
	DD	imagerel chain_new_internal+59
	DD	imagerel $unwind$chain_new_internal
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$chain_new_internal DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT chain_new_internal
_TEXT	SEGMENT
type$ = 48
source$ = 56
chain_new_internal PROC					; COMDAT

; 1768 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b da	 mov	 rbx, rdx
  00009	48 8b c1	 mov	 rax, rcx

; 1769 :     chainobject *lz;
; 1770 : 
; 1771 :     lz = (chainobject *)type->tp_alloc(type, 0);

  0000c	33 d2		 xor	 edx, edx
  0000e	ff 90 88 01 00
	00		 call	 QWORD PTR [rax+392]

; 1772 :     if (lz == NULL) {

  00014	48 85 c0	 test	 rax, rax
  00017	75 10		 jne	 SHORT $LN1@chain_new_

; 1773 :         Py_DECREF(source);

  00019	48 8b cb	 mov	 rcx, rbx
  0001c	e8 00 00 00 00	 call	 _Py_DecRef

; 1774 :         return NULL;

  00021	33 c0		 xor	 eax, eax

; 1779 :     return (PyObject *)lz;
; 1780 : }

  00023	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00027	5b		 pop	 rbx
  00028	c3		 ret	 0
$LN1@chain_new_:

; 1775 :     }
; 1776 : 
; 1777 :     lz->source = source;

  00029	48 89 58 60	 mov	 QWORD PTR [rax+96], rbx

; 1778 :     lz->active = NULL;

  0002d	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0

; 1779 :     return (PyObject *)lz;
; 1780 : }

  00035	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00039	5b		 pop	 rbx
  0003a	c3		 ret	 0
chain_new_internal ENDP
_TEXT	ENDS
PUBLIC	??_C@_07ICILEEAM@chain?$CI?$CJ?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$chain_new DD imagerel chain_new
	DD	imagerel chain_new+94
	DD	imagerel $unwind$chain_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$chain_new DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_07ICILEEAM@chain?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_07ICILEEAM@chain?$CI?$CJ?$AA@ DB 'chain()', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT chain_new
_TEXT	SEGMENT
type$ = 48
args$ = 56
kwds$ = 64
chain_new PROC						; COMDAT

; 1784 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1785 :     PyObject *source;
; 1786 : 
; 1787 :     if (type == &chain_type && !_PyArg_NoKeywords("chain()", kwds))

  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:chain_type
  00011	48 8b da	 mov	 rbx, rdx
  00014	48 8b f9	 mov	 rdi, rcx
  00017	48 3b c8	 cmp	 rcx, rax
  0001a	75 20		 jne	 SHORT $LN2@chain_new
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07ICILEEAM@chain?$CI?$CJ?$AA@
  00023	49 8b d0	 mov	 rdx, r8
  00026	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  0002b	85 c0		 test	 eax, eax
  0002d	75 0d		 jne	 SHORT $LN2@chain_new
$LN5@chain_new:

; 1788 :         return NULL;

  0002f	33 c0		 xor	 eax, eax

; 1795 : }

  00031	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00036	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003a	5f		 pop	 rdi
  0003b	c3		 ret	 0
$LN2@chain_new:

; 1789 : 
; 1790 :     source = PyObject_GetIter(args);

  0003c	48 8b cb	 mov	 rcx, rbx
  0003f	e8 00 00 00 00	 call	 PyObject_GetIter

; 1791 :     if (source == NULL)

  00044	48 85 c0	 test	 rax, rax

; 1792 :         return NULL;

  00047	74 e6		 je	 SHORT $LN5@chain_new

; 1793 : 
; 1794 :     return chain_new_internal(type, source);

  00049	48 8b d0	 mov	 rdx, rax
  0004c	48 8b cf	 mov	 rcx, rdi

; 1795 : }

  0004f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00054	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00058	5f		 pop	 rdi
  00059	e9 00 00 00 00	 jmp	 chain_new_internal
chain_new ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$chain_new_from_iterable DD imagerel chain_new_from_iterable
	DD	imagerel chain_new_from_iterable+44
	DD	imagerel $unwind$chain_new_from_iterable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$chain_new_from_iterable DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT chain_new_from_iterable
_TEXT	SEGMENT
type$ = 48
arg$ = 56
chain_new_from_iterable PROC				; COMDAT

; 1799 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 1800 :     PyObject *source;
; 1801 : 
; 1802 :     source = PyObject_GetIter(arg);

  00009	48 8b ca	 mov	 rcx, rdx
  0000c	e8 00 00 00 00	 call	 PyObject_GetIter

; 1803 :     if (source == NULL)

  00011	48 85 c0	 test	 rax, rax
  00014	75 06		 jne	 SHORT $LN1@chain_new_@2

; 1807 : }

  00016	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001a	5b		 pop	 rbx
  0001b	c3		 ret	 0
$LN1@chain_new_@2:

; 1804 :         return NULL;
; 1805 : 
; 1806 :     return chain_new_internal(type, source);

  0001c	48 8b d0	 mov	 rdx, rax
  0001f	48 8b cb	 mov	 rcx, rbx

; 1807 : }

  00022	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00026	5b		 pop	 rbx
  00027	e9 00 00 00 00	 jmp	 chain_new_internal
chain_new_from_iterable ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$chain_dealloc DD imagerel chain_dealloc
	DD	imagerel chain_dealloc+262
	DD	imagerel $unwind$chain_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$chain_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT chain_dealloc
_TEXT	SEGMENT
lz$ = 64
chain_dealloc PROC					; COMDAT

; 1811 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 1812 :     PyObject_GC_UnTrack(lz);

  0000d	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 1813 :     Py_XDECREF(lz->active);

  00012	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  00016	48 85 db	 test	 rbx, rbx
  00019	74 65		 je	 SHORT $LN7@chain_deal
  0001b	e8 00 00 00 00	 call	 _Py_PXCTX
  00020	85 c0		 test	 eax, eax
  00022	75 5c		 jne	 SHORT $LN7@chain_deal
  00024	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00028	a8 20		 test	 al, 32			; 00000020H
  0002a	75 4c		 jne	 SHORT $LN15@chain_deal
  0002c	84 c0		 test	 al, al
  0002e	78 48		 js	 SHORT $LN15@chain_deal
  00030	a8 02		 test	 al, 2
  00032	75 4c		 jne	 SHORT $LN7@chain_deal
  00034	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00038	75 46		 jne	 SHORT $LN7@chain_deal
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00048	4c 8b cb	 mov	 r9, rbx
  0004b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00051	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00059	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005e	48 8b cb	 mov	 rcx, rbx
  00061	85 c0		 test	 eax, eax
  00063	74 07		 je	 SHORT $LN20@chain_deal
  00065	e8 00 00 00 00	 call	 _Px_Dealloc
  0006a	eb 14		 jmp	 SHORT $LN7@chain_deal
$LN20@chain_deal:
  0006c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00070	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00076	eb 08		 jmp	 SHORT $LN7@chain_deal
$LN15@chain_deal:
  00078	48 8b cb	 mov	 rcx, rbx
  0007b	e8 00 00 00 00	 call	 Px_DecRef
$LN7@chain_deal:

; 1814 :     Py_XDECREF(lz->source);

  00080	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  00084	48 85 db	 test	 rbx, rbx
  00087	74 65		 je	 SHORT $LN3@chain_deal
  00089	e8 00 00 00 00	 call	 _Py_PXCTX
  0008e	85 c0		 test	 eax, eax
  00090	75 5c		 jne	 SHORT $LN3@chain_deal
  00092	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00096	a8 20		 test	 al, 32			; 00000020H
  00098	75 4c		 jne	 SHORT $LN26@chain_deal
  0009a	84 c0		 test	 al, al
  0009c	78 48		 js	 SHORT $LN26@chain_deal
  0009e	a8 02		 test	 al, 2
  000a0	75 4c		 jne	 SHORT $LN3@chain_deal
  000a2	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000a6	75 46		 jne	 SHORT $LN3@chain_deal
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000b6	4c 8b cb	 mov	 r9, rbx
  000b9	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000bf	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cc	48 8b cb	 mov	 rcx, rbx
  000cf	85 c0		 test	 eax, eax
  000d1	74 07		 je	 SHORT $LN31@chain_deal
  000d3	e8 00 00 00 00	 call	 _Px_Dealloc
  000d8	eb 14		 jmp	 SHORT $LN3@chain_deal
$LN31@chain_deal:
  000da	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000de	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000e4	eb 08		 jmp	 SHORT $LN3@chain_deal
$LN26@chain_deal:
  000e6	48 8b cb	 mov	 rcx, rbx
  000e9	e8 00 00 00 00	 call	 Px_DecRef
$LN3@chain_deal:

; 1815 :     Py_TYPE(lz)->tp_free(lz);

  000ee	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000f2	48 8b cf	 mov	 rcx, rdi

; 1816 : }

  000f5	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000fa	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000fe	5f		 pop	 rdi
  000ff	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
chain_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@IFJBADFM@chain_traverse?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$chain_traverse DD imagerel chain_traverse
	DD	imagerel chain_traverse+152
	DD	imagerel $unwind$chain_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$chain_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0P@IFJBADFM@chain_traverse?$AA@
CONST	SEGMENT
??_C@_0P@IFJBADFM@chain_traverse?$AA@ DB 'chain_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT chain_traverse
_TEXT	SEGMENT
lz$ = 48
visit$ = 56
arg$ = 64
chain_traverse PROC					; COMDAT

; 1820 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 1821 :     Py_VISIT(lz->source);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN9@chain_trav
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@IFJBADFM@chain_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 1d 07 00
	00		 mov	 r8d, 1821		; 0000071dH
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@chain_trav:
  0003d	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN11@chain_trav
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 39		 jne	 SHORT $LN13@chain_trav
$LN11@chain_trav:

; 1822 :     Py_VISIT(lz->active);

  0004f	e8 00 00 00 00	 call	 _Py_PXCTX
  00054	85 c0		 test	 eax, eax
  00056	74 1c		 je	 SHORT $LN3@chain_trav
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@IFJBADFM@chain_traverse?$AA@
  00066	45 33 c9	 xor	 r9d, r9d
  00069	41 b8 1e 07 00
	00		 mov	 r8d, 1822		; 0000071eH
  0006f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@chain_trav:
  00074	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00078	48 85 c9	 test	 rcx, rcx
  0007b	74 09		 je	 SHORT $LN5@chain_trav
  0007d	48 8b d7	 mov	 rdx, rdi
  00080	ff d6		 call	 rsi
  00082	85 c0		 test	 eax, eax
  00084	75 02		 jne	 SHORT $LN13@chain_trav
$LN5@chain_trav:

; 1823 :     return 0;

  00086	33 c0		 xor	 eax, eax
$LN13@chain_trav:

; 1824 : }

  00088	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00092	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00096	5f		 pop	 rdi
  00097	c3		 ret	 0
chain_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@GNIBCEE@chain_next?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$chain_next DD imagerel chain_next
	DD	imagerel chain_next+325
	DD	imagerel $unwind$chain_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$chain_next DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT ??_C@_0L@GNIBCEE@chain_next?$AA@
CONST	SEGMENT
??_C@_0L@GNIBCEE@chain_next?$AA@ DB 'chain_next', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT chain_next
_TEXT	SEGMENT
lz$ = 64
chain_next PROC						; COMDAT

; 1828 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1829 :     PyObject *item;
; 1830 : 
; 1831 :     if (lz->source == NULL)

  0000f	48 83 79 60 00	 cmp	 QWORD PTR [rcx+96], 0
  00014	48 8b d9	 mov	 rbx, rcx
  00017	0f 84 16 01 00
	00		 je	 $LN26@chain_next
  0001d	33 f6		 xor	 esi, esi
  0001f	90		 npad	 1
$LL23@chain_next:

; 1833 : 
; 1834 :     if (lz->active == NULL) {

  00020	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00024	48 85 c9	 test	 rcx, rcx
  00027	75 36		 jne	 SHORT $LN13@chain_next

; 1835 :         PyObject *iterable = PyIter_Next(lz->source);

  00029	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  0002d	e8 00 00 00 00	 call	 PyIter_Next
  00032	48 8b f8	 mov	 rdi, rax

; 1836 :         if (iterable == NULL) {

  00035	48 85 c0	 test	 rax, rax
  00038	0f 84 ba 00 00
	00		 je	 $LN27@chain_next

; 1838 :             return NULL;                                /* no more input sources */
; 1839 :         }
; 1840 :         lz->active = PyObject_GetIter(iterable);

  0003e	48 8b c8	 mov	 rcx, rax
  00041	e8 00 00 00 00	 call	 PyObject_GetIter

; 1841 :         Py_DECREF(iterable);

  00046	48 8b cf	 mov	 rcx, rdi
  00049	48 89 43 68	 mov	 QWORD PTR [rbx+104], rax
  0004d	e8 00 00 00 00	 call	 _Py_DecRef

; 1842 :         if (lz->active == NULL) {

  00052	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00056	48 85 c9	 test	 rcx, rcx
  00059	0f 84 88 00 00
	00		 je	 $LN28@chain_next
$LN13@chain_next:

; 1845 :         }
; 1846 :     }
; 1847 :     item = PyIter_Next(lz->active);

  0005f	e8 00 00 00 00	 call	 PyIter_Next

; 1848 :     if (item != NULL)

  00064	48 85 c0	 test	 rax, rax
  00067	0f 85 c8 00 00
	00		 jne	 $LN21@chain_next

; 1849 :         return item;
; 1850 :     if (PyErr_Occurred()) {

  0006d	e8 00 00 00 00	 call	 PyErr_Occurred
  00072	48 85 c0	 test	 rax, rax
  00075	74 19		 je	 SHORT $LN4@chain_next

; 1851 :         if (PyErr_ExceptionMatches(PyExc_StopIteration))

  00077	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_StopIteration
  0007e	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00083	85 c0		 test	 eax, eax
  00085	0f 84 a8 00 00
	00		 je	 $LN26@chain_next

; 1852 :             PyErr_Clear();

  0008b	e8 00 00 00 00	 call	 PyErr_Clear
$LN4@chain_next:

; 1853 :         else
; 1854 :             return NULL;                                /* input raised an exception */
; 1855 :     }
; 1856 :     Py_CLEAR(lz->active);

  00090	4c 8b 4b 68	 mov	 r9, QWORD PTR [rbx+104]
  00094	4d 85 c9	 test	 r9, r9
  00097	74 32		 je	 SHORT $LN3@chain_next
  00099	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  000a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@GNIBCEE@chain_next?$AA@
  000a7	41 b8 40 07 00
	00		 mov	 r8d, 1856		; 00000740H
  000ad	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000b5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ba	85 c0		 test	 eax, eax
  000bc	75 0d		 jne	 SHORT $LN3@chain_next
  000be	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  000c2	48 89 73 68	 mov	 QWORD PTR [rbx+104], rsi
  000c6	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@chain_next:

; 1829 :     PyObject *item;
; 1830 : 
; 1831 :     if (lz->source == NULL)

  000cb	48 39 73 60	 cmp	 QWORD PTR [rbx+96], rsi
  000cf	0f 85 4b ff ff
	ff		 jne	 $LL23@chain_next

; 1832 :         return NULL;                                    /* already stopped */

  000d5	33 c0		 xor	 eax, eax

; 1857 :     return chain_next(lz);                      /* recurse and use next active */
; 1858 : }

  000d7	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000dc	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000e1	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000e5	5f		 pop	 rdi
  000e6	c3		 ret	 0
$LN28@chain_next:

; 1843 :             Py_CLEAR(lz->source);

  000e7	4c 8b 4b 60	 mov	 r9, QWORD PTR [rbx+96]
  000eb	4d 85 c9	 test	 r9, r9
  000ee	74 43		 je	 SHORT $LN26@chain_next
  000f0	41 b8 33 07 00
	00		 mov	 r8d, 1843		; 00000733H

; 1844 :             return NULL;                                /* input not iterable */

  000f6	eb 0f		 jmp	 SHORT $LN33@chain_next
$LN27@chain_next:

; 1837 :             Py_CLEAR(lz->source);

  000f8	4c 8b 4b 60	 mov	 r9, QWORD PTR [rbx+96]
  000fc	4d 85 c9	 test	 r9, r9
  000ff	74 32		 je	 SHORT $LN26@chain_next
  00101	41 b8 2d 07 00
	00		 mov	 r8d, 1837		; 0000072dH
$LN33@chain_next:
  00107	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  0010e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@GNIBCEE@chain_next?$AA@
  00115	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0011d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00122	85 c0		 test	 eax, eax
  00124	75 0d		 jne	 SHORT $LN26@chain_next
  00126	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  0012a	48 89 73 60	 mov	 QWORD PTR [rbx+96], rsi
  0012e	e8 00 00 00 00	 call	 _Py_DecRef
$LN26@chain_next:

; 1832 :         return NULL;                                    /* already stopped */

  00133	33 c0		 xor	 eax, eax
$LN21@chain_next:

; 1857 :     return chain_next(lz);                      /* recurse and use next active */
; 1858 : }

  00135	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0013a	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0013f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00143	5f		 pop	 rdi
  00144	c3		 ret	 0
chain_next ENDP
_TEXT	ENDS
PUBLIC	??_C@_03GPNEOADL@O?$CI?$CJ?$AA@			; `string'
PUBLIC	??_C@_06KNPIDNPI@O?$CI?$CJ?$CIO?$CJ?$AA@	; `string'
PUBLIC	??_C@_07LLNHKKGK@O?$CI?$CJ?$CIOO?$CJ?$AA@	; `string'
;	COMDAT ??_C@_03GPNEOADL@O?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_03GPNEOADL@O?$CI?$CJ?$AA@ DB 'O()', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KNPIDNPI@O?$CI?$CJ?$CIO?$CJ?$AA@
CONST	SEGMENT
??_C@_06KNPIDNPI@O?$CI?$CJ?$CIO?$CJ?$AA@ DB 'O()(O)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07LLNHKKGK@O?$CI?$CJ?$CIOO?$CJ?$AA@
CONST	SEGMENT
??_C@_07LLNHKKGK@O?$CI?$CJ?$CIOO?$CJ?$AA@ DB 'O()(OO)', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT chain_reduce
_TEXT	SEGMENT
lz$ = 8
chain_reduce PROC					; COMDAT

; 1863 :     if (lz->source) {

  00000	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]

; 1869 :             return Py_BuildValue("O()(OO)", Py_TYPE(lz), lz->source, lz->active);

  00004	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00008	4d 85 c0	 test	 r8, r8
  0000b	74 21		 je	 SHORT $LN4@chain_redu

; 1864 :         /* we can't pickle function objects (itertools.from_iterable) so
; 1865 :          * we must use setstate to replace the iterable.  One day we
; 1866 :          * will fix pickling of functions
; 1867 :          */
; 1868 :         if (lz->active) {

  0000d	4c 8b 49 68	 mov	 r9, QWORD PTR [rcx+104]
  00011	4d 85 c9	 test	 r9, r9
  00014	74 0c		 je	 SHORT $LN3@chain_redu

; 1869 :             return Py_BuildValue("O()(OO)", Py_TYPE(lz), lz->source, lz->active);

  00016	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07LLNHKKGK@O?$CI?$CJ?$CIOO?$CJ?$AA@

; 1875 :     }
; 1876 :     return NULL;
; 1877 : }

  0001d	e9 00 00 00 00	 jmp	 Py_BuildValue
$LN3@chain_redu:

; 1870 :         } else {
; 1871 :             return Py_BuildValue("O()(O)", Py_TYPE(lz), lz->source);

  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06KNPIDNPI@O?$CI?$CJ?$CIO?$CJ?$AA@

; 1875 :     }
; 1876 :     return NULL;
; 1877 : }

  00029	e9 00 00 00 00	 jmp	 Py_BuildValue
$LN4@chain_redu:

; 1872 :         }
; 1873 :     } else {
; 1874 :         return Py_BuildValue("O()", Py_TYPE(lz)); /* exhausted */

  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03GPNEOADL@O?$CI?$CJ?$AA@

; 1875 :     }
; 1876 :     return NULL;
; 1877 : }

  00035	e9 00 00 00 00	 jmp	 Py_BuildValue
chain_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@OIMGCELL@chain_setstate?$AA@		; `string'
PUBLIC	??_C@_03DHMGKKHG@O?$HMO?$AA@			; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$chain_setstate DD imagerel chain_setstate
	DD	imagerel chain_setstate+62
	DD	imagerel $unwind$chain_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$chain_setstate DD imagerel chain_setstate+62
	DD	imagerel chain_setstate+344
	DD	imagerel $chain$0$chain_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$chain_setstate DD imagerel chain_setstate+344
	DD	imagerel chain_setstate+417
	DD	imagerel $chain$1$chain_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$chain_setstate DD 021H
	DD	imagerel chain_setstate
	DD	imagerel chain_setstate+62
	DD	imagerel $unwind$chain_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$chain_setstate DD 020521H
	DD	083405H
	DD	imagerel chain_setstate
	DD	imagerel chain_setstate+62
	DD	imagerel $unwind$chain_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$chain_setstate DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT ??_C@_0P@OIMGCELL@chain_setstate?$AA@
CONST	SEGMENT
??_C@_0P@OIMGCELL@chain_setstate?$AA@ DB 'chain_setstate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03DHMGKKHG@O?$HMO?$AA@
CONST	SEGMENT
??_C@_03DHMGKKHG@O?$HMO?$AA@ DB 'O|O', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
CONST	ENDS
;	COMDAT chain_setstate
_TEXT	SEGMENT
lz$ = 64
state$ = 72
active$ = 80
source$ = 88
chain_setstate PROC					; COMDAT

; 1881 : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b c2	 mov	 rax, rdx
  00009	48 8b f9	 mov	 rdi, rcx

; 1882 :     PyObject *source, *active=NULL;
; 1883 :     if (! PyArg_ParseTuple(state, "O|O", &source, &active))

  0000c	4c 8d 4c 24 50	 lea	 r9, QWORD PTR active$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03DHMGKKHG@O?$HMO?$AA@
  00018	4c 8d 44 24 58	 lea	 r8, QWORD PTR source$[rsp]
  0001d	48 8b c8	 mov	 rcx, rax
  00020	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR active$[rsp], 0
  00029	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0002e	85 c0		 test	 eax, eax
  00030	75 08		 jne	 SHORT $LN12@chain_sets

; 1884 :         return NULL;

  00032	33 c0		 xor	 eax, eax

; 1893 : }

  00034	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00038	5f		 pop	 rdi
  00039	c3		 ret	 0
$LN12@chain_sets:

; 1885 : 
; 1886 :     Py_CLEAR(lz->source);

  0003a	4c 8b 4f 60	 mov	 r9, QWORD PTR [rdi+96]
  0003e	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00043	4d 85 c9	 test	 r9, r9
  00046	74 36		 je	 SHORT $LN11@chain_sets
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  0004f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@OIMGCELL@chain_setstate?$AA@
  00056	41 b8 5e 07 00
	00		 mov	 r8d, 1886		; 0000075eH
  0005c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00064	e8 00 00 00 00	 call	 _PyParallel_Guard
  00069	85 c0		 test	 eax, eax
  0006b	75 11		 jne	 SHORT $LN11@chain_sets
  0006d	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  00071	48 c7 47 60 00
	00 00 00	 mov	 QWORD PTR [rdi+96], 0
  00079	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@chain_sets:

; 1887 :     lz->source = source;

  0007e	48 8b 5c 24 58	 mov	 rbx, QWORD PTR source$[rsp]
  00083	48 89 5f 60	 mov	 QWORD PTR [rdi+96], rbx

; 1888 :     Py_INCREF(lz->source);

  00087	e8 00 00 00 00	 call	 _Py_PXCTX
  0008c	85 c0		 test	 eax, eax
  0008e	75 32		 jne	 SHORT $LN8@chain_sets
  00090	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00097	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0009e	4c 8b cb	 mov	 r9, rbx
  000a1	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000a7	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000af	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b4	85 c0		 test	 eax, eax
  000b6	75 06		 jne	 SHORT $LN16@chain_sets
  000b8	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000bc	74 04		 je	 SHORT $LN8@chain_sets
$LN16@chain_sets:
  000be	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN8@chain_sets:

; 1889 :     Py_CLEAR(lz->active);

  000c2	4c 8b 4f 68	 mov	 r9, QWORD PTR [rdi+104]
  000c6	4d 85 c9	 test	 r9, r9
  000c9	74 36		 je	 SHORT $LN7@chain_sets
  000cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  000d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@OIMGCELL@chain_setstate?$AA@
  000d9	41 b8 61 07 00
	00		 mov	 r8d, 1889		; 00000761H
  000df	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000e7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ec	85 c0		 test	 eax, eax
  000ee	75 11		 jne	 SHORT $LN7@chain_sets
  000f0	48 8b 4f 68	 mov	 rcx, QWORD PTR [rdi+104]
  000f4	48 c7 47 68 00
	00 00 00	 mov	 QWORD PTR [rdi+104], 0
  000fc	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@chain_sets:

; 1890 :     lz->active = active;

  00101	48 8b 5c 24 50	 mov	 rbx, QWORD PTR active$[rsp]
  00106	48 89 5f 68	 mov	 QWORD PTR [rdi+104], rbx

; 1891 :     Py_XINCREF(lz->active);

  0010a	48 85 db	 test	 rbx, rbx
  0010d	74 3b		 je	 SHORT $LN3@chain_sets
  0010f	e8 00 00 00 00	 call	 _Py_PXCTX
  00114	85 c0		 test	 eax, eax
  00116	75 32		 jne	 SHORT $LN3@chain_sets
  00118	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0011f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00126	4c 8b cb	 mov	 r9, rbx
  00129	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0012f	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00137	e8 00 00 00 00	 call	 _PyParallel_Guard
  0013c	85 c0		 test	 eax, eax
  0013e	75 06		 jne	 SHORT $LN20@chain_sets
  00140	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00144	74 04		 je	 SHORT $LN3@chain_sets
$LN20@chain_sets:
  00146	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN3@chain_sets:

; 1892 :     Py_RETURN_NONE;

  0014a	e8 00 00 00 00	 call	 _Py_PXCTX
  0014f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00154	85 c0		 test	 eax, eax
  00156	75 3c		 jne	 SHORT $LN25@chain_sets
  00158	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  0015f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00166	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0016d	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00173	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0017b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00180	85 c0		 test	 eax, eax
  00182	75 09		 jne	 SHORT $LN24@chain_sets
  00184	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0018b	74 07		 je	 SHORT $LN25@chain_sets
$LN24@chain_sets:
  0018d	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN25@chain_sets:
  00194	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1893 : }

  0019b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0019f	5f		 pop	 rdi
  001a0	c3		 ret	 0
chain_setstate ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@PADFKNPL@repeat?5argument?5cannot?5be?5negati@ ; `string'
PUBLIC	??_C@_0L@LOFFFBN@?$HMn?3product?$AA@		; `string'
PUBLIC	??_C@_06LGDBIFHB@repeat?$AA@			; `string'
EXTRN	PyMem_Free:PROC
EXTRN	PyErr_NoMemory:PROC
EXTRN	PyMem_Malloc:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$product_new DD imagerel product_new
	DD	imagerel product_new+652
	DD	imagerel $unwind$product_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$product_new DD 0ddc01H
	DD	08f4dcH
	DD	09e4d7H
	DD	0ac4cfH
	DD	01164caH
	DD	0d00ca210H
	DD	05009700aH
	DD	03008H
xdata	ENDS
;	COMDAT ??_C@_0CD@PADFKNPL@repeat?5argument?5cannot?5be?5negati@
CONST	SEGMENT
??_C@_0CD@PADFKNPL@repeat?5argument?5cannot?5be?5negati@ DB 'repeat argum'
	DB	'ent cannot be negative', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LOFFFBN@?$HMn?3product?$AA@
CONST	SEGMENT
??_C@_0L@LOFFFBN@?$HMn?3product?$AA@ DB '|n:product', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06LGDBIFHB@repeat?$AA@
CONST	SEGMENT
??_C@_06LGDBIFHB@repeat?$AA@ DB 'repeat', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
CONST	ENDS
;	COMDAT product_new
_TEXT	SEGMENT
kwlist$22021 = 48
type$ = 128
args$ = 136
repeat$ = 144
kwds$ = 144
product_new PROC					; COMDAT

; 1977 : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	49 89 4b 08	 mov	 QWORD PTR [r11+8], rcx
  00007	53		 push	 rbx
  00008	55		 push	 rbp
  00009	57		 push	 rdi
  0000a	41 55		 push	 r13
  0000c	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1978 :     productobject *lz;
; 1979 :     Py_ssize_t nargs, npools, repeat=1;

  00010	b8 01 00 00 00	 mov	 eax, 1
  00015	49 8b f8	 mov	 rdi, r8
  00018	48 8b ea	 mov	 rbp, rdx
  0001b	49 89 43 18	 mov	 QWORD PTR [r11+24], rax

; 1980 :     PyObject *pools = NULL;
; 1981 :     Py_ssize_t *indices = NULL;
; 1982 :     Py_ssize_t i;
; 1983 : 
; 1984 :     if (kwds != NULL) {

  0001f	4d 85 c0	 test	 r8, r8
  00022	0f 84 96 00 00
	00		 je	 $LN22@product_ne

; 1985 :         char *kwlist[] = {"repeat", 0};

  00028	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06LGDBIFHB@repeat?$AA@

; 1986 :         PyObject *tmpargs = PyTuple_New(0);

  0002f	33 c9		 xor	 ecx, ecx
  00031	49 c7 43 c0 00
	00 00 00	 mov	 QWORD PTR [r11-64], 0
  00039	49 89 43 b8	 mov	 QWORD PTR [r11-72], rax
  0003d	e8 00 00 00 00	 call	 PyTuple_New
  00042	48 8b d8	 mov	 rbx, rax

; 1987 :         if (tmpargs == NULL)

  00045	48 85 c0	 test	 rax, rax

; 1988 :             return NULL;

  00048	74 30		 je	 SHORT $LN49@product_ne

; 1989 :         if (!PyArg_ParseTupleAndKeywords(tmpargs, kwds, "|n:product", kwlist, &repeat)) {

  0004a	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR repeat$[rsp]
  00052	4c 8d 4c 24 30	 lea	 r9, QWORD PTR kwlist$22021[rsp]
  00057	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@LOFFFBN@?$HMn?3product?$AA@
  0005e	48 8b d7	 mov	 rdx, rdi
  00061	48 8b cb	 mov	 rcx, rbx
  00064	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00069	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords

; 1990 :             Py_DECREF(tmpargs);

  0006e	48 8b cb	 mov	 rcx, rbx
  00071	85 c0		 test	 eax, eax
  00073	75 11		 jne	 SHORT $LN17@product_ne
  00075	e8 00 00 00 00	 call	 _Py_DecRef
$LN49@product_ne:

; 1991 :             return NULL;

  0007a	33 c0		 xor	 eax, eax

; 2047 : }

  0007c	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00080	41 5d		 pop	 r13
  00082	5f		 pop	 rdi
  00083	5d		 pop	 rbp
  00084	5b		 pop	 rbx
  00085	c3		 ret	 0
$LN17@product_ne:

; 1992 :         }
; 1993 :         Py_DECREF(tmpargs);

  00086	e8 00 00 00 00	 call	 _Py_DecRef

; 1994 :         if (repeat < 0) {

  0008b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR repeat$[rsp]
  00093	48 85 c0	 test	 rax, rax
  00096	79 1f		 jns	 SHORT $LN48@product_ne

; 1995 :             PyErr_SetString(PyExc_ValueError,
; 1996 :                             "repeat argument cannot be negative");

  00098	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0009f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@PADFKNPL@repeat?5argument?5cannot?5be?5negati@
  000a6	e8 00 00 00 00	 call	 PyErr_SetString

; 1997 :             return NULL;

  000ab	33 c0		 xor	 eax, eax

; 2047 : }

  000ad	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000b1	41 5d		 pop	 r13
  000b3	5f		 pop	 rdi
  000b4	5d		 pop	 rbp
  000b5	5b		 pop	 rbx
  000b6	c3		 ret	 0
$LN48@product_ne:

; 1998 :         }
; 1999 :     }
; 2000 : 
; 2001 :     assert(PyTuple_Check(args));
; 2002 :     nargs = (repeat == 0) ? 0 : PyTuple_GET_SIZE(args);

  000b7	75 05		 jne	 SHORT $LN22@product_ne
  000b9	45 33 ed	 xor	 r13d, r13d
  000bc	eb 04		 jmp	 SHORT $LN23@product_ne
$LN22@product_ne:
  000be	4c 8b 6d 60	 mov	 r13, QWORD PTR [rbp+96]
$LN23@product_ne:
  000c2	48 89 b4 24 88
	00 00 00	 mov	 QWORD PTR [rsp+136], rsi
  000ca	4c 89 64 24 50	 mov	 QWORD PTR [rsp+80], r12

; 2003 :     npools = nargs * repeat;

  000cf	4d 8b e5	 mov	 r12, r13
  000d2	4c 89 74 24 48	 mov	 QWORD PTR [rsp+72], r14
  000d7	4c 89 7c 24 40	 mov	 QWORD PTR [rsp+64], r15
  000dc	4c 0f af e0	 imul	 r12, rax

; 2004 : 
; 2005 :     indices = PyMem_Malloc(npools * sizeof(Py_ssize_t));

  000e0	4a 8d 0c e5 00
	00 00 00	 lea	 rcx, QWORD PTR [r12*8]
  000e8	e8 00 00 00 00	 call	 PyMem_Malloc
  000ed	4c 8b f8	 mov	 r15, rax

; 2006 :     if (indices == NULL) {

  000f0	48 85 c0	 test	 rax, rax
  000f3	75 0a		 jne	 SHORT $LN15@product_ne

; 2007 :         PyErr_NoMemory();

  000f5	e8 00 00 00 00	 call	 PyErr_NoMemory

; 2008 :         goto error;

  000fa	e9 6a 01 00 00	 jmp	 $LN3@product_ne
$LN15@product_ne:

; 2009 :     }
; 2010 : 
; 2011 :     pools = PyTuple_New(npools);

  000ff	49 8b cc	 mov	 rcx, r12
  00102	e8 00 00 00 00	 call	 PyTuple_New
  00107	48 8b f8	 mov	 rdi, rax

; 2012 :     if (pools == NULL)

  0010a	48 85 c0	 test	 rax, rax
  0010d	0f 84 e4 00 00
	00		 je	 $error$22040

; 2013 :         goto error;
; 2014 : 
; 2015 :     for (i=0; i < nargs ; ++i) {

  00113	33 f6		 xor	 esi, esi
  00115	4d 85 ed	 test	 r13, r13
  00118	7e 37		 jle	 SHORT $LN11@product_ne
  0011a	4d 8b f7	 mov	 r14, r15
  0011d	48 2b e8	 sub	 rbp, rax
  00120	48 8d 58 70	 lea	 rbx, QWORD PTR [rax+112]
  00124	4c 2b f0	 sub	 r14, rax
$LL13@product_ne:

; 2016 :         PyObject *item = PyTuple_GET_ITEM(args, i);
; 2017 :         PyObject *pool = PySequence_Tuple(item);

  00127	48 8b 0c 2b	 mov	 rcx, QWORD PTR [rbx+rbp]
  0012b	e8 00 00 00 00	 call	 PySequence_Tuple

; 2018 :         if (pool == NULL)

  00130	48 85 c0	 test	 rax, rax
  00133	0f 84 be 00 00
	00		 je	 $error$22040

; 2019 :             goto error;
; 2020 :         PyTuple_SET_ITEM(pools, i, pool);

  00139	48 89 03	 mov	 QWORD PTR [rbx], rax
  0013c	48 ff c6	 inc	 rsi

; 2021 :         indices[i] = 0;

  0013f	49 c7 44 1e 90
	00 00 00 00	 mov	 QWORD PTR [r14+rbx-112], 0
  00148	48 83 c3 08	 add	 rbx, 8
  0014c	49 3b f5	 cmp	 rsi, r13
  0014f	7c d6		 jl	 SHORT $LL13@product_ne
$LN11@product_ne:

; 2022 :     }
; 2023 :     for ( ; i < npools; ++i) {

  00151	49 3b f4	 cmp	 rsi, r12
  00154	7d 70		 jge	 SHORT $LN7@product_ne

; 2027 :         indices[i] = 0;

  00156	4d 8b f7	 mov	 r14, r15
  00159	49 f7 dd	 neg	 r13
  0015c	48 8d 6c f7 70	 lea	 rbp, QWORD PTR [rdi+rsi*8+112]
  00161	4c 2b f7	 sub	 r14, rdi
  00164	4c 2b e6	 sub	 r12, rsi
  00167	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL9@product_ne:

; 2024 :         PyObject *pool = PyTuple_GET_ITEM(pools, i - nargs);
; 2025 :         Py_INCREF(pool);

  00170	4a 8b 5c ed 00	 mov	 rbx, QWORD PTR [rbp+r13*8]
  00175	e8 00 00 00 00	 call	 _Py_PXCTX
  0017a	85 c0		 test	 eax, eax
  0017c	75 32		 jne	 SHORT $LN25@product_ne
  0017e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00185	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0018c	4c 8b cb	 mov	 r9, rbx
  0018f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00195	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0019d	e8 00 00 00 00	 call	 _PyParallel_Guard
  001a2	85 c0		 test	 eax, eax
  001a4	75 06		 jne	 SHORT $LN24@product_ne
  001a6	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  001aa	74 04		 je	 SHORT $LN25@product_ne
$LN24@product_ne:
  001ac	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN25@product_ne:

; 2026 :         PyTuple_SET_ITEM(pools, i, pool);

  001b0	48 89 5d 00	 mov	 QWORD PTR [rbp], rbx

; 2027 :         indices[i] = 0;

  001b4	49 c7 44 2e 90
	00 00 00 00	 mov	 QWORD PTR [r14+rbp-112], 0
  001bd	48 83 c5 08	 add	 rbp, 8
  001c1	49 ff cc	 dec	 r12
  001c4	75 aa		 jne	 SHORT $LL9@product_ne
$LN7@product_ne:

; 2028 :     }
; 2029 : 
; 2030 :     /* create productobject structure */
; 2031 :     lz = (productobject *)type->tp_alloc(type, 0);

  001c6	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  001ce	33 d2		 xor	 edx, edx
  001d0	48 8b c8	 mov	 rcx, rax
  001d3	ff 90 88 01 00
	00		 call	 QWORD PTR [rax+392]

; 2032 :     if (lz == NULL)

  001d9	48 85 c0	 test	 rax, rax
  001dc	74 19		 je	 SHORT $error$22040

; 2033 :         goto error;
; 2034 : 
; 2035 :     lz->pools = pools;

  001de	48 89 78 60	 mov	 QWORD PTR [rax+96], rdi

; 2036 :     lz->indices = indices;

  001e2	4c 89 78 68	 mov	 QWORD PTR [rax+104], r15

; 2037 :     lz->result = NULL;

  001e6	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0

; 2038 :     lz->stopped = 0;

  001ee	c7 40 78 00 00
	00 00		 mov	 DWORD PTR [rax+120], 0

; 2039 : 
; 2040 :     return (PyObject *)lz;

  001f5	eb 74		 jmp	 SHORT $LN47@product_ne
$error$22040:

; 2041 : 
; 2042 : error:
; 2043 :     if (indices != NULL)
; 2044 :         PyMem_Free(indices);

  001f7	49 8b cf	 mov	 rcx, r15
  001fa	e8 00 00 00 00	 call	 PyMem_Free

; 2045 :     Py_XDECREF(pools);

  001ff	48 85 ff	 test	 rdi, rdi
  00202	74 65		 je	 SHORT $LN3@product_ne
  00204	e8 00 00 00 00	 call	 _Py_PXCTX
  00209	85 c0		 test	 eax, eax
  0020b	75 5c		 jne	 SHORT $LN3@product_ne
  0020d	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00211	a8 20		 test	 al, 32			; 00000020H
  00213	75 4c		 jne	 SHORT $LN32@product_ne
  00215	84 c0		 test	 al, al
  00217	78 48		 js	 SHORT $LN32@product_ne
  00219	a8 02		 test	 al, 2
  0021b	75 4c		 jne	 SHORT $LN3@product_ne
  0021d	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00221	75 46		 jne	 SHORT $LN3@product_ne
  00223	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0022a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00231	4c 8b cf	 mov	 r9, rdi
  00234	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0023a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00242	e8 00 00 00 00	 call	 _PyParallel_Guard
  00247	48 8b cf	 mov	 rcx, rdi
  0024a	85 c0		 test	 eax, eax
  0024c	74 07		 je	 SHORT $LN37@product_ne
  0024e	e8 00 00 00 00	 call	 _Px_Dealloc
  00253	eb 14		 jmp	 SHORT $LN3@product_ne
$LN37@product_ne:
  00255	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00259	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0025f	eb 08		 jmp	 SHORT $LN3@product_ne
$LN32@product_ne:
  00261	48 8b cf	 mov	 rcx, rdi
  00264	e8 00 00 00 00	 call	 Px_DecRef
$LN3@product_ne:

; 2046 :     return NULL;

  00269	33 c0		 xor	 eax, eax
$LN47@product_ne:
  0026b	4c 8b 74 24 48	 mov	 r14, QWORD PTR [rsp+72]
  00270	4c 8b 64 24 50	 mov	 r12, QWORD PTR [rsp+80]
  00275	48 8b b4 24 88
	00 00 00	 mov	 rsi, QWORD PTR [rsp+136]
  0027d	4c 8b 7c 24 40	 mov	 r15, QWORD PTR [rsp+64]

; 2047 : }

  00282	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00286	41 5d		 pop	 r13
  00288	5f		 pop	 rdi
  00289	5d		 pop	 rbp
  0028a	5b		 pop	 rbx
  0028b	c3		 ret	 0
product_new ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$product_dealloc DD imagerel product_dealloc
	DD	imagerel product_dealloc+276
	DD	imagerel $unwind$product_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$product_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT product_dealloc
_TEXT	SEGMENT
lz$ = 64
product_dealloc PROC					; COMDAT

; 2051 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 2052 :     PyObject_GC_UnTrack(lz);

  0000d	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 2053 :     Py_XDECREF(lz->pools);

  00012	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  00016	48 85 db	 test	 rbx, rbx
  00019	74 65		 je	 SHORT $LN8@product_de
  0001b	e8 00 00 00 00	 call	 _Py_PXCTX
  00020	85 c0		 test	 eax, eax
  00022	75 5c		 jne	 SHORT $LN8@product_de
  00024	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00028	a8 20		 test	 al, 32			; 00000020H
  0002a	75 4c		 jne	 SHORT $LN16@product_de
  0002c	84 c0		 test	 al, al
  0002e	78 48		 js	 SHORT $LN16@product_de
  00030	a8 02		 test	 al, 2
  00032	75 4c		 jne	 SHORT $LN8@product_de
  00034	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00038	75 46		 jne	 SHORT $LN8@product_de
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00048	4c 8b cb	 mov	 r9, rbx
  0004b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00051	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00059	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005e	48 8b cb	 mov	 rcx, rbx
  00061	85 c0		 test	 eax, eax
  00063	74 07		 je	 SHORT $LN21@product_de
  00065	e8 00 00 00 00	 call	 _Px_Dealloc
  0006a	eb 14		 jmp	 SHORT $LN8@product_de
$LN21@product_de:
  0006c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00070	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00076	eb 08		 jmp	 SHORT $LN8@product_de
$LN16@product_de:
  00078	48 8b cb	 mov	 rcx, rbx
  0007b	e8 00 00 00 00	 call	 Px_DecRef
$LN8@product_de:

; 2054 :     Py_XDECREF(lz->result);

  00080	48 8b 5f 70	 mov	 rbx, QWORD PTR [rdi+112]
  00084	48 85 db	 test	 rbx, rbx
  00087	74 65		 je	 SHORT $LN4@product_de
  00089	e8 00 00 00 00	 call	 _Py_PXCTX
  0008e	85 c0		 test	 eax, eax
  00090	75 5c		 jne	 SHORT $LN4@product_de
  00092	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00096	a8 20		 test	 al, 32			; 00000020H
  00098	75 4c		 jne	 SHORT $LN27@product_de
  0009a	84 c0		 test	 al, al
  0009c	78 48		 js	 SHORT $LN27@product_de
  0009e	a8 02		 test	 al, 2
  000a0	75 4c		 jne	 SHORT $LN4@product_de
  000a2	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000a6	75 46		 jne	 SHORT $LN4@product_de
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000b6	4c 8b cb	 mov	 r9, rbx
  000b9	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000bf	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cc	48 8b cb	 mov	 rcx, rbx
  000cf	85 c0		 test	 eax, eax
  000d1	74 07		 je	 SHORT $LN32@product_de
  000d3	e8 00 00 00 00	 call	 _Px_Dealloc
  000d8	eb 14		 jmp	 SHORT $LN4@product_de
$LN32@product_de:
  000da	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000de	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000e4	eb 08		 jmp	 SHORT $LN4@product_de
$LN27@product_de:
  000e6	48 8b cb	 mov	 rcx, rbx
  000e9	e8 00 00 00 00	 call	 Px_DecRef
$LN4@product_de:

; 2055 :     if (lz->indices != NULL)

  000ee	48 8b 4f 68	 mov	 rcx, QWORD PTR [rdi+104]
  000f2	48 85 c9	 test	 rcx, rcx
  000f5	74 05		 je	 SHORT $LN1@product_de

; 2056 :         PyMem_Free(lz->indices);

  000f7	e8 00 00 00 00	 call	 PyMem_Free
$LN1@product_de:

; 2057 :     Py_TYPE(lz)->tp_free(lz);

  000fc	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00100	48 8b cf	 mov	 rcx, rdi

; 2058 : }

  00103	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00108	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0010c	5f		 pop	 rdi
  0010d	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
product_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@BKAPCJKE@product_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$product_traverse DD imagerel product_traverse
	DD	imagerel product_traverse+152
	DD	imagerel $unwind$product_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$product_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BB@BKAPCJKE@product_traverse?$AA@
CONST	SEGMENT
??_C@_0BB@BKAPCJKE@product_traverse?$AA@ DB 'product_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT product_traverse
_TEXT	SEGMENT
lz$ = 48
visit$ = 56
arg$ = 64
product_traverse PROC					; COMDAT

; 2062 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 2063 :     Py_VISIT(lz->pools);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN9@product_tr
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@BKAPCJKE@product_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 0f 08 00
	00		 mov	 r8d, 2063		; 0000080fH
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@product_tr:
  0003d	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN11@product_tr
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 39		 jne	 SHORT $LN13@product_tr
$LN11@product_tr:

; 2064 :     Py_VISIT(lz->result);

  0004f	e8 00 00 00 00	 call	 _Py_PXCTX
  00054	85 c0		 test	 eax, eax
  00056	74 1c		 je	 SHORT $LN3@product_tr
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@BKAPCJKE@product_traverse?$AA@
  00066	45 33 c9	 xor	 r9d, r9d
  00069	41 b8 10 08 00
	00		 mov	 r8d, 2064		; 00000810H
  0006f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@product_tr:
  00074	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00078	48 85 c9	 test	 rcx, rcx
  0007b	74 09		 je	 SHORT $LN5@product_tr
  0007d	48 8b d7	 mov	 rdx, rdi
  00080	ff d6		 call	 rsi
  00082	85 c0		 test	 eax, eax
  00084	75 02		 jne	 SHORT $LN13@product_tr
$LN5@product_tr:

; 2065 :     return 0;

  00086	33 c0		 xor	 eax, eax
$LN13@product_tr:

; 2066 : }

  00088	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00092	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00096	5f		 pop	 rdi
  00097	c3		 ret	 0
product_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$product_next DD imagerel product_next
	DD	imagerel product_next+49
	DD	imagerel $unwind$product_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$product_next DD imagerel product_next+49
	DD	imagerel product_next+581
	DD	imagerel $chain$3$product_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$product_next DD imagerel product_next+581
	DD	imagerel product_next+736
	DD	imagerel $chain$5$product_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$product_next DD 080021H
	DD	06e400H
	DD	07c400H
	DD	087400H
	DD	0105400H
	DD	imagerel product_next
	DD	imagerel product_next+49
	DD	imagerel $unwind$product_next
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$product_next DD 081721H
	DD	06e417H
	DD	07c412H
	DD	08740dH
	DD	0105408H
	DD	imagerel product_next
	DD	imagerel product_next+49
	DD	imagerel $unwind$product_next
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$product_next DD 050f01H
	DD	0f00b820fH
	DD	06007d009H
	DD	03006H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT product_next
_TEXT	SEGMENT
lz$ = 112
indices$1$ = 120
product_next PROC					; COMDAT

; 2070 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	53		 push	 rbx
  00006	56		 push	 rsi
  00007	41 55		 push	 r13
  00009	41 57		 push	 r15
  0000b	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2071 :     PyObject *pool;
; 2072 :     PyObject *elem;
; 2073 :     PyObject *oldelem;
; 2074 :     PyObject *pools = lz->pools;
; 2075 :     PyObject *result = lz->result;
; 2076 :     Py_ssize_t npools = PyTuple_GET_SIZE(pools);
; 2077 :     Py_ssize_t i;
; 2078 : 
; 2079 :     if (lz->stopped)

  0000f	83 79 78 00	 cmp	 DWORD PTR [rcx+120], 0
  00013	4c 8b 79 60	 mov	 r15, QWORD PTR [rcx+96]
  00017	48 8b 71 70	 mov	 rsi, QWORD PTR [rcx+112]
  0001b	4d 8b 6f 60	 mov	 r13, QWORD PTR [r15+96]
  0001f	48 8b d9	 mov	 rbx, rcx
  00022	74 0d		 je	 SHORT $LN19@product_ne@2

; 2080 :         return NULL;

  00024	33 c0		 xor	 eax, eax

; 2153 : }

  00026	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0002a	41 5f		 pop	 r15
  0002c	41 5d		 pop	 r13
  0002e	5e		 pop	 rsi
  0002f	5b		 pop	 rbx
  00030	c3		 ret	 0
$LN19@product_ne@2:
  00031	48 89 ac 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rbp
  00039	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  0003e	4c 89 64 24 38	 mov	 QWORD PTR [rsp+56], r12
  00043	4c 89 74 24 30	 mov	 QWORD PTR [rsp+48], r14

; 2081 : 
; 2082 :     if (result == NULL) {

  00048	48 85 f6	 test	 rsi, rsi
  0004b	0f 85 91 00 00
	00		 jne	 $LN18@product_ne@2

; 2083 :         /* On the first pass, return an initial tuple filled with the
; 2084 :            first element from each pool. */
; 2085 :         result = PyTuple_New(npools);

  00051	49 8b cd	 mov	 rcx, r13
  00054	e8 00 00 00 00	 call	 PyTuple_New
  00059	48 8b f0	 mov	 rsi, rax

; 2086 :         if (result == NULL)

  0005c	48 85 c0	 test	 rax, rax
  0005f	0f 84 b0 01 00
	00		 je	 $empty$22132

; 2087 :             goto empty;
; 2088 :         lz->result = result;
; 2089 :         for (i=0; i < npools; i++) {

  00065	45 33 e4	 xor	 r12d, r12d
  00068	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax
  0006c	4d 85 ed	 test	 r13, r13
  0006f	0f 8e 28 02 00
	00		 jle	 $LN1@product_ne@2
  00075	48 8d 78 70	 lea	 rdi, QWORD PTR [rax+112]
  00079	4c 2b f8	 sub	 r15, rax
  0007c	0f 1f 40 00	 npad	 4
$LL16@product_ne@2:

; 2090 :             pool = PyTuple_GET_ITEM(pools, i);

  00080	49 8b 1c 3f	 mov	 rbx, QWORD PTR [r15+rdi]

; 2091 :             if (PyTuple_GET_SIZE(pool) == 0)

  00084	48 83 7b 60 00	 cmp	 QWORD PTR [rbx+96], 0
  00089	0f 84 86 01 00
	00		 je	 $empty$22132

; 2092 :                 goto empty;
; 2093 :             elem = PyTuple_GET_ITEM(pool, 0);

  0008f	48 8b 5b 70	 mov	 rbx, QWORD PTR [rbx+112]

; 2094 :             Py_INCREF(elem);

  00093	e8 00 00 00 00	 call	 _Py_PXCTX
  00098	85 c0		 test	 eax, eax
  0009a	75 32		 jne	 SHORT $LN23@product_ne@2
  0009c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000aa	4c 8b cb	 mov	 r9, rbx
  000ad	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000b3	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000bb	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c0	85 c0		 test	 eax, eax
  000c2	75 06		 jne	 SHORT $LN22@product_ne@2
  000c4	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000c8	74 04		 je	 SHORT $LN23@product_ne@2
$LN22@product_ne@2:
  000ca	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN23@product_ne@2:

; 2095 :             PyTuple_SET_ITEM(result, i, elem);

  000ce	49 ff c4	 inc	 r12
  000d1	48 89 1f	 mov	 QWORD PTR [rdi], rbx
  000d4	48 83 c7 08	 add	 rdi, 8
  000d8	4d 3b e5	 cmp	 r12, r13
  000db	7c a3		 jl	 SHORT $LL16@product_ne@2

; 2091 :             if (PyTuple_GET_SIZE(pool) == 0)

  000dd	e9 bb 01 00 00	 jmp	 $LN1@product_ne@2
$LN18@product_ne@2:

; 2096 :         }
; 2097 :     } else {
; 2098 :         Py_ssize_t *indices = lz->indices;
; 2099 : 
; 2100 :         /* Copy the previous result tuple or re-use it if available */
; 2101 :         if (Py_REFCNT(result) > 1) {

  000e2	48 83 7e 50 01	 cmp	 QWORD PTR [rsi+80], 1
  000e7	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]
  000eb	48 89 44 24 78	 mov	 QWORD PTR indices$1$[rsp], rax
  000f0	0f 8e 85 00 00
	00		 jle	 $LN11@product_ne@2

; 2102 :             PyObject *old_result = result;
; 2103 :             result = PyTuple_New(npools);

  000f6	49 8b cd	 mov	 rcx, r13
  000f9	4c 8b f6	 mov	 r14, rsi
  000fc	e8 00 00 00 00	 call	 PyTuple_New
  00101	48 8b f0	 mov	 rsi, rax

; 2104 :             if (result == NULL)

  00104	48 85 c0	 test	 rax, rax
  00107	0f 84 08 01 00
	00		 je	 $empty$22132

; 2105 :                 goto empty;
; 2106 :             lz->result = result;

  0010d	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax

; 2107 :             for (i=0; i < npools; i++) {

  00111	4d 85 ed	 test	 r13, r13
  00114	7e 58		 jle	 SHORT $LN7@product_ne@2
  00116	4d 8b e6	 mov	 r12, r14
  00119	48 8d 78 70	 lea	 rdi, QWORD PTR [rax+112]
  0011d	49 8b ed	 mov	 rbp, r13
  00120	4c 2b e0	 sub	 r12, rax
$LL9@product_ne@2:

; 2108 :                 elem = PyTuple_GET_ITEM(old_result, i);

  00123	49 8b 1c 3c	 mov	 rbx, QWORD PTR [r12+rdi]

; 2109 :                 Py_INCREF(elem);

  00127	e8 00 00 00 00	 call	 _Py_PXCTX
  0012c	85 c0		 test	 eax, eax
  0012e	75 32		 jne	 SHORT $LN27@product_ne@2
  00130	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00137	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0013e	4c 8b cb	 mov	 r9, rbx
  00141	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00147	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0014f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00154	85 c0		 test	 eax, eax
  00156	75 06		 jne	 SHORT $LN26@product_ne@2
  00158	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0015c	74 04		 je	 SHORT $LN27@product_ne@2
$LN26@product_ne@2:
  0015e	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN27@product_ne@2:

; 2110 :                 PyTuple_SET_ITEM(result, i, elem);

  00162	48 89 1f	 mov	 QWORD PTR [rdi], rbx
  00165	48 83 c7 08	 add	 rdi, 8
  00169	48 ff cd	 dec	 rbp
  0016c	75 b5		 jne	 SHORT $LL9@product_ne@2
$LN7@product_ne@2:

; 2111 :             }
; 2112 :             Py_DECREF(old_result);

  0016e	49 8b ce	 mov	 rcx, r14
  00171	e8 00 00 00 00	 call	 _Py_DecRef
  00176	48 8b 44 24 78	 mov	 rax, QWORD PTR indices$1$[rsp]
$LN11@product_ne@2:

; 2113 :         }
; 2114 :         /* Now, we've got the only copy so we can update it in-place */
; 2115 :         assert (npools==0 || Py_REFCNT(result) == 1);
; 2116 : 
; 2117 :         /* Update the pool indices right-to-left.  Only advance to the
; 2118 :            next pool when the previous one rolls-over */
; 2119 :         for (i=npools-1 ; i >= 0 ; i--) {

  0017b	49 8d 6d ff	 lea	 rbp, QWORD PTR [r13-1]
  0017f	48 85 ed	 test	 rbp, rbp
  00182	0f 88 8d 00 00
	00		 js	 $empty$22132
  00188	4c 8b f6	 mov	 r14, rsi
  0018b	4c 2b fe	 sub	 r15, rsi
  0018e	48 8d 3c e8	 lea	 rdi, QWORD PTR [rax+rbp*8]
  00192	4c 2b f0	 sub	 r14, rax
  00195	45 33 e4	 xor	 r12d, r12d
  00198	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL6@product_ne@2:

; 2120 :             pool = PyTuple_GET_ITEM(pools, i);
; 2121 :             indices[i]++;

  001a0	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  001a3	4d 8d 6c 3e 70	 lea	 r13, QWORD PTR [r14+rdi+112]
  001a8	4b 8b 4c 3d 00	 mov	 rcx, QWORD PTR [r13+r15]
  001ad	48 ff c0	 inc	 rax
  001b0	48 89 07	 mov	 QWORD PTR [rdi], rax

; 2122 :             if (indices[i] == PyTuple_GET_SIZE(pool)) {

  001b3	48 3b 41 60	 cmp	 rax, QWORD PTR [rcx+96]
  001b7	0f 85 88 00 00
	00		 jne	 $LN3@product_ne@2

; 2123 :                 /* Roll-over and advance to next pool */
; 2124 :                 indices[i] = 0;

  001bd	4c 89 27	 mov	 QWORD PTR [rdi], r12

; 2125 :                 elem = PyTuple_GET_ITEM(pool, 0);

  001c0	48 8b 59 70	 mov	 rbx, QWORD PTR [rcx+112]

; 2126 :                 Py_INCREF(elem);

  001c4	e8 00 00 00 00	 call	 _Py_PXCTX
  001c9	85 c0		 test	 eax, eax
  001cb	75 32		 jne	 SHORT $LN31@product_ne@2
  001cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  001db	4c 8b cb	 mov	 r9, rbx
  001de	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  001e4	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  001ec	e8 00 00 00 00	 call	 _PyParallel_Guard
  001f1	85 c0		 test	 eax, eax
  001f3	75 06		 jne	 SHORT $LN30@product_ne@2
  001f5	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  001f9	74 04		 je	 SHORT $LN31@product_ne@2
$LN30@product_ne@2:
  001fb	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN31@product_ne@2:

; 2127 :                 oldelem = PyTuple_GET_ITEM(result, i);

  001ff	49 8b 4d 00	 mov	 rcx, QWORD PTR [r13]

; 2128 :                 PyTuple_SET_ITEM(result, i, elem);

  00203	49 89 5d 00	 mov	 QWORD PTR [r13], rbx

; 2129 :                 Py_DECREF(oldelem);

  00207	e8 00 00 00 00	 call	 _Py_DecRef
  0020c	48 83 ef 08	 sub	 rdi, 8
  00210	48 ff cd	 dec	 rbp
  00213	79 8b		 jns	 SHORT $LL6@product_ne@2
$empty$22132:

; 2149 : 
; 2150 : empty:
; 2151 :     lz->stopped = 1;

  00215	48 8b 44 24 70	 mov	 rax, QWORD PTR lz$[rsp]
  0021a	c7 40 78 01 00
	00 00		 mov	 DWORD PTR [rax+120], 1

; 2152 :     return NULL;

  00221	33 c0		 xor	 eax, eax
$LN52@product_ne@2:
  00223	4c 8b 64 24 38	 mov	 r12, QWORD PTR [rsp+56]
  00228	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  0022d	48 8b ac 24 80
	00 00 00	 mov	 rbp, QWORD PTR [rsp+128]
  00235	4c 8b 74 24 30	 mov	 r14, QWORD PTR [rsp+48]

; 2153 : }

  0023a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0023e	41 5f		 pop	 r15
  00240	41 5d		 pop	 r13
  00242	5e		 pop	 rsi
  00243	5b		 pop	 rbx
  00244	c3		 ret	 0
$LN3@product_ne@2:

; 2130 :             } else {
; 2131 :                 /* No rollover. Just increment and stop here. */
; 2132 :                 elem = PyTuple_GET_ITEM(pool, indices[i]);

  00245	48 8b 5c c1 70	 mov	 rbx, QWORD PTR [rcx+rax*8+112]

; 2133 :                 Py_INCREF(elem);

  0024a	e8 00 00 00 00	 call	 _Py_PXCTX
  0024f	85 c0		 test	 eax, eax
  00251	75 32		 jne	 SHORT $LN35@product_ne@2
  00253	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0025a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00261	4c 8b cb	 mov	 r9, rbx
  00264	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0026a	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00272	e8 00 00 00 00	 call	 _PyParallel_Guard
  00277	85 c0		 test	 eax, eax
  00279	75 06		 jne	 SHORT $LN34@product_ne@2
  0027b	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0027f	74 04		 je	 SHORT $LN35@product_ne@2
$LN34@product_ne@2:
  00281	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN35@product_ne@2:

; 2134 :                 oldelem = PyTuple_GET_ITEM(result, i);

  00285	48 8b 4c ee 70	 mov	 rcx, QWORD PTR [rsi+rbp*8+112]

; 2135 :                 PyTuple_SET_ITEM(result, i, elem);

  0028a	48 89 5c ee 70	 mov	 QWORD PTR [rsi+rbp*8+112], rbx

; 2136 :                 Py_DECREF(oldelem);

  0028f	e8 00 00 00 00	 call	 _Py_DecRef

; 2137 :                 break;
; 2138 :             }
; 2139 :         }
; 2140 : 
; 2141 :         /* If i is negative, then the indices have all rolled-over
; 2142 :            and we're done. */
; 2143 :         if (i < 0)

  00294	48 85 ed	 test	 rbp, rbp
  00297	0f 88 78 ff ff
	ff		 js	 $empty$22132
$LN1@product_ne@2:

; 2144 :             goto empty;
; 2145 :     }
; 2146 : 
; 2147 :     Py_INCREF(result);

  0029d	e8 00 00 00 00	 call	 _Py_PXCTX
  002a2	85 c0		 test	 eax, eax
  002a4	75 32		 jne	 SHORT $LN39@product_ne@2
  002a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  002ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  002b4	4c 8b ce	 mov	 r9, rsi
  002b7	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  002bd	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  002c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  002ca	85 c0		 test	 eax, eax
  002cc	75 06		 jne	 SHORT $LN38@product_ne@2
  002ce	f6 46 20 20	 test	 BYTE PTR [rsi+32], 32	; 00000020H
  002d2	74 04		 je	 SHORT $LN39@product_ne@2
$LN38@product_ne@2:
  002d4	48 ff 46 50	 inc	 QWORD PTR [rsi+80]
$LN39@product_ne@2:

; 2148 :     return result;

  002d8	48 8b c6	 mov	 rax, rsi
  002db	e9 43 ff ff ff	 jmp	 $LN52@product_ne@2
product_next ENDP
_TEXT	ENDS
PUBLIC	??_C@_03IPAMAPO@OON?$AA@			; `string'
PUBLIC	??_C@_02MJJLPNK@OO?$AA@				; `string'
PUBLIC	??_C@_05FHNOOHHF@O?$CI?$CI?$CJ?$CJ?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$product_reduce DD imagerel product_reduce
	DD	imagerel product_reduce+72
	DD	imagerel $unwind$product_reduce
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$product_reduce DD imagerel product_reduce+72
	DD	imagerel product_reduce+118
	DD	imagerel $chain$1$product_reduce
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$product_reduce DD imagerel product_reduce+118
	DD	imagerel product_reduce+205
	DD	imagerel $chain$4$product_reduce
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$product_reduce DD imagerel product_reduce+205
	DD	imagerel product_reduce+217
	DD	imagerel $chain$6$product_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$product_reduce DD 060021H
	DD	086400H
	DD	075400H
	DD	063400H
	DD	imagerel product_reduce
	DD	imagerel product_reduce+72
	DD	imagerel $unwind$product_reduce
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$product_reduce DD 060521H
	DD	063405H
	DD	086400H
	DD	075400H
	DD	imagerel product_reduce
	DD	imagerel product_reduce+72
	DD	imagerel $unwind$product_reduce
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$product_reduce DD 040a21H
	DD	08640aH
	DD	075405H
	DD	imagerel product_reduce
	DD	imagerel product_reduce+72
	DD	imagerel $unwind$product_reduce
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$product_reduce DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT ??_C@_03IPAMAPO@OON?$AA@
CONST	SEGMENT
??_C@_03IPAMAPO@OON?$AA@ DB 'OON', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MJJLPNK@OO?$AA@
CONST	SEGMENT
??_C@_02MJJLPNK@OO?$AA@ DB 'OO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05FHNOOHHF@O?$CI?$CI?$CJ?$CJ?$AA@
CONST	SEGMENT
??_C@_05FHNOOHHF@O?$CI?$CI?$CJ?$CJ?$AA@ DB 'O(())', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT product_reduce
_TEXT	SEGMENT
lz$ = 48
product_reduce PROC					; COMDAT

; 2157 : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2158 :     if (lz->stopped) {

  00006	83 79 78 00	 cmp	 DWORD PTR [rcx+120], 0
  0000a	48 8b f9	 mov	 rdi, rcx
  0000d	74 15		 je	 SHORT $LN9@product_re

; 2159 :         return Py_BuildValue("O(())", Py_TYPE(lz));

  0000f	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05FHNOOHHF@O?$CI?$CI?$CJ?$CJ?$AA@

; 2182 :     }
; 2183 : }

  0001a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001e	5f		 pop	 rdi
  0001f	e9 00 00 00 00	 jmp	 Py_BuildValue
$LN9@product_re:

; 2160 :     } else if (lz->result == NULL) {

  00024	48 83 79 70 00	 cmp	 QWORD PTR [rcx+112], 0
  00029	75 19		 jne	 SHORT $LN7@product_re

; 2161 :         return Py_BuildValue("OO", Py_TYPE(lz), lz->pools);

  0002b	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]
  0002f	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02MJJLPNK@OO?$AA@

; 2182 :     }
; 2183 : }

  0003a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003e	5f		 pop	 rdi
  0003f	e9 00 00 00 00	 jmp	 Py_BuildValue
$LN7@product_re:

; 2162 :     } else {
; 2163 :         PyObject *indices;
; 2164 :         Py_ssize_t n, i;
; 2165 : 
; 2166 :         /* we must pickle the indices use them for setstate, and
; 2167 :          * additionally indicate that the iterator has started
; 2168 :          */
; 2169 :         n = PyTuple_GET_SIZE(lz->pools);

  00044	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  00048	48 89 6c 24 38	 mov	 QWORD PTR [rsp+56], rbp
  0004d	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  00052	48 8b 68 60	 mov	 rbp, QWORD PTR [rax+96]

; 2170 :         indices = PyTuple_New(n);

  00056	48 8b cd	 mov	 rcx, rbp
  00059	e8 00 00 00 00	 call	 PyTuple_New
  0005e	48 8b f0	 mov	 rsi, rax

; 2171 :         if (indices == NULL)

  00061	48 85 c0	 test	 rax, rax
  00064	75 10		 jne	 SHORT $LN5@product_re
  00066	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0006b	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]

; 2182 :     }
; 2183 : }

  00070	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00074	5f		 pop	 rdi
  00075	c3		 ret	 0
$LN5@product_re:
  00076	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx

; 2172 :             return NULL;
; 2173 :         for (i=0; i<n; i++){

  0007b	33 db		 xor	 ebx, ebx
  0007d	48 85 ed	 test	 rbp, rbp
  00080	7e 1f		 jle	 SHORT $LN2@product_re
$LL4@product_re:

; 2174 :             PyObject* index = PyLong_FromSsize_t(lz->indices[i]);

  00082	48 8b 4f 68	 mov	 rcx, QWORD PTR [rdi+104]
  00086	48 8b 0c d9	 mov	 rcx, QWORD PTR [rcx+rbx*8]
  0008a	e8 00 00 00 00	 call	 PyLong_FromSsize_t

; 2175 :             if (!index) {

  0008f	48 85 c0	 test	 rax, rax
  00092	74 39		 je	 SHORT $LN13@product_re

; 2178 :             }
; 2179 :             PyTuple_SET_ITEM(indices, i, index);

  00094	48 89 44 de 70	 mov	 QWORD PTR [rsi+rbx*8+112], rax
  00099	48 ff c3	 inc	 rbx
  0009c	48 3b dd	 cmp	 rbx, rbp
  0009f	7c e1		 jl	 SHORT $LL4@product_re
$LN2@product_re:

; 2180 :         }
; 2181 :         return Py_BuildValue("OON", Py_TYPE(lz), lz->pools, indices);

  000a1	4c 8b 47 60	 mov	 r8, QWORD PTR [rdi+96]
  000a5	48 8b 57 58	 mov	 rdx, QWORD PTR [rdi+88]
  000a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03IPAMAPO@OON?$AA@
  000b0	4c 8b ce	 mov	 r9, rsi
  000b3	e8 00 00 00 00	 call	 Py_BuildValue
$LN17@product_re:
  000b8	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000bd	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000c2	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]

; 2182 :     }
; 2183 : }

  000c7	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000cb	5f		 pop	 rdi
  000cc	c3		 ret	 0
$LN13@product_re:

; 2176 :                 Py_DECREF(indices);

  000cd	48 8b ce	 mov	 rcx, rsi
  000d0	e8 00 00 00 00	 call	 _Py_DecRef

; 2177 :                 return NULL;

  000d5	33 c0		 xor	 eax, eax
  000d7	eb df		 jmp	 SHORT $LN17@product_re
product_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@KNPMEBHA@invalid?5arguments?$AA@	; `string'
PUBLIC	??_C@_0BB@HHFIAOED@product_setstate?$AA@	; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$product_setstate DD imagerel product_setstate
	DD	imagerel product_setstate+59
	DD	imagerel $unwind$product_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$product_setstate DD imagerel product_setstate+59
	DD	imagerel product_setstate+144
	DD	imagerel $chain$0$product_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$product_setstate DD imagerel product_setstate+144
	DD	imagerel product_setstate+167
	DD	imagerel $chain$1$product_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$product_setstate DD imagerel product_setstate+167
	DD	imagerel product_setstate+188
	DD	imagerel $chain$2$product_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$product_setstate DD imagerel product_setstate+188
	DD	imagerel product_setstate+192
	DD	imagerel $chain$4$product_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$product_setstate DD imagerel product_setstate+192
	DD	imagerel product_setstate+550
	DD	imagerel $chain$5$product_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$product_setstate DD imagerel product_setstate+550
	DD	imagerel product_setstate+587
	DD	imagerel $chain$6$product_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$product_setstate DD 021H
	DD	imagerel product_setstate
	DD	imagerel product_setstate+59
	DD	imagerel $unwind$product_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$product_setstate DD 040021H
	DD	09c400H
	DD	083400H
	DD	imagerel product_setstate
	DD	imagerel product_setstate+59
	DD	imagerel $unwind$product_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$product_setstate DD 020021H
	DD	083400H
	DD	imagerel product_setstate
	DD	imagerel product_setstate+59
	DD	imagerel $unwind$product_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$product_setstate DD 021H
	DD	imagerel product_setstate+59
	DD	imagerel product_setstate+144
	DD	imagerel $chain$0$product_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$product_setstate DD 020521H
	DD	09c405H
	DD	imagerel product_setstate+59
	DD	imagerel product_setstate+144
	DD	imagerel $chain$0$product_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$product_setstate DD 020521H
	DD	083405H
	DD	imagerel product_setstate
	DD	imagerel product_setstate+59
	DD	imagerel $unwind$product_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$product_setstate DD 060f01H
	DD	0b640fH
	DD	0a540fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT ??_C@_0BC@KNPMEBHA@invalid?5arguments?$AA@
CONST	SEGMENT
??_C@_0BC@KNPMEBHA@invalid?5arguments?$AA@ DB 'invalid arguments', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HHFIAOED@product_setstate?$AA@
CONST	SEGMENT
??_C@_0BB@HHFIAOED@product_setstate?$AA@ DB 'product_setstate', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
CONST	ENDS
;	COMDAT product_setstate
_TEXT	SEGMENT
lz$ = 64
state$ = 72
product_setstate PROC					; COMDAT

; 2187 : {

  00000	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  00005	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 2188 :     PyObject *result;
; 2189 :     Py_ssize_t n, i;
; 2190 : 
; 2191 :     n = PyTuple_GET_SIZE(lz->pools);

  0000f	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  00013	48 8b f2	 mov	 rsi, rdx
  00016	48 8b e9	 mov	 rbp, rcx
  00019	48 8b 78 60	 mov	 rdi, QWORD PTR [rax+96]

; 2192 :     if (!PyTuple_Check(state) || PyTuple_GET_SIZE(state) != n) {

  0001d	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  00021	f7 80 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rax+256], 67108864 ; 04000000H
  0002b	0f 84 f5 01 00
	00		 je	 $LN16@product_se
  00031	48 39 7a 60	 cmp	 QWORD PTR [rdx+96], rdi
  00035	0f 85 eb 01 00
	00		 jne	 $LN16@product_se

; 2194 :         return NULL;
; 2195 :     }
; 2196 :     for (i=0; i<n; i++)

  0003b	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00040	33 db		 xor	 ebx, ebx
  00042	48 85 ff	 test	 rdi, rdi
  00045	7e 46		 jle	 SHORT $LN44@product_se
  00047	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL15@product_se:

; 2197 :     {
; 2198 :         PyObject* indexObject = PyTuple_GET_ITEM(state, i);
; 2199 :         Py_ssize_t index = PyLong_AsSsize_t(indexObject);

  00050	48 8b 4c de 70	 mov	 rcx, QWORD PTR [rsi+rbx*8+112]
  00055	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  0005a	4c 8b d8	 mov	 r11, rax

; 2200 :         if (index < 0 && PyErr_Occurred())

  0005d	48 85 c0	 test	 rax, rax
  00060	79 0f		 jns	 SHORT $LN11@product_se
  00062	e8 00 00 00 00	 call	 PyErr_Occurred
  00067	48 85 c0	 test	 rax, rax
  0006a	75 50		 jne	 SHORT $LN41@product_se

; 2202 :         /* clamp the index */
; 2203 :         if (index < 0)
; 2204 :             index = 0;

  0006c	45 33 db	 xor	 r11d, r11d
  0006f	eb 0b		 jmp	 SHORT $LN9@product_se
$LN11@product_se:

; 2205 :         else if (index > n-1)

  00071	48 8d 47 ff	 lea	 rax, QWORD PTR [rdi-1]
  00075	4c 3b d8	 cmp	 r11, rax
  00078	4c 0f 4f d8	 cmovg	 r11, rax
$LN9@product_se:

; 2206 :             index = n-1;
; 2207 :         lz->indices[i] = index;

  0007c	48 8b 45 68	 mov	 rax, QWORD PTR [rbp+104]
  00080	48 ff c3	 inc	 rbx
  00083	4c 89 5c d8 f8	 mov	 QWORD PTR [rax+rbx*8-8], r11
  00088	48 3b df	 cmp	 rbx, rdi
  0008b	7c c3		 jl	 SHORT $LL15@product_se
$LN44@product_se:

; 2208 :     }
; 2209 : 
; 2210 :     result = PyTuple_New(n);

  0008d	48 8b cf	 mov	 rcx, rdi
  00090	4c 89 64 24 48	 mov	 QWORD PTR [rsp+72], r12
  00095	e8 00 00 00 00	 call	 PyTuple_New
  0009a	4c 8b e0	 mov	 r12, rax

; 2211 :     if (!result)

  0009d	48 85 c0	 test	 rax, rax
  000a0	75 1e		 jne	 SHORT $LN8@product_se
$LN46@product_se:
  000a2	4c 8b 64 24 48	 mov	 r12, QWORD PTR [rsp+72]
$LN45@product_se:
  000a7	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 2222 : }

  000ac	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  000b1	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  000b6	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ba	5f		 pop	 rdi
  000bb	c3		 ret	 0
$LN41@product_se:

; 2201 :             return NULL; /* not an integer */

  000bc	33 c0		 xor	 eax, eax
  000be	eb e7		 jmp	 SHORT $LN45@product_se
$LN8@product_se:

; 2212 :         return NULL;
; 2213 :     for (i=0; i<n; i++) {

  000c0	48 85 ff	 test	 rdi, rdi
  000c3	7e 69		 jle	 SHORT $LN4@product_se
  000c5	be 70 00 00 00	 mov	 esi, 112		; 00000070H
  000ca	66 0f 1f 44 00
	00		 npad	 6
$LL7@product_se:

; 2214 :         PyObject *pool = PyTuple_GET_ITEM(lz->pools, i);
; 2215 :         PyObject *element = PyTuple_GET_ITEM(pool, lz->indices[i]);

  000d0	48 8b 45 68	 mov	 rax, QWORD PTR [rbp+104]
  000d4	48 8b 54 06 90	 mov	 rdx, QWORD PTR [rsi+rax-112]
  000d9	48 8b 45 60	 mov	 rax, QWORD PTR [rbp+96]
  000dd	48 8b 0c 06	 mov	 rcx, QWORD PTR [rsi+rax]
  000e1	48 8b 5c d1 70	 mov	 rbx, QWORD PTR [rcx+rdx*8+112]

; 2216 :         Py_INCREF(element);

  000e6	e8 00 00 00 00	 call	 _Py_PXCTX
  000eb	85 c0		 test	 eax, eax
  000ed	75 32		 jne	 SHORT $LN21@product_se
  000ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000fd	4c 8b cb	 mov	 r9, rbx
  00100	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00106	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0010e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00113	85 c0		 test	 eax, eax
  00115	75 06		 jne	 SHORT $LN20@product_se
  00117	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0011b	74 04		 je	 SHORT $LN21@product_se
$LN20@product_se:
  0011d	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN21@product_se:

; 2217 :         PyTuple_SET_ITEM(result, i, element);

  00121	4a 89 1c 26	 mov	 QWORD PTR [rsi+r12], rbx
  00125	48 83 c6 08	 add	 rsi, 8
  00129	48 ff cf	 dec	 rdi
  0012c	75 a2		 jne	 SHORT $LL7@product_se
$LN4@product_se:

; 2218 :     }
; 2219 :     Py_CLEAR(lz->result);

  0012e	4c 8b 4d 70	 mov	 r9, QWORD PTR [rbp+112]
  00132	4d 85 c9	 test	 r9, r9
  00135	0f 84 96 00 00
	00		 je	 $LN3@product_se
  0013b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  00142	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@HHFIAOED@product_setstate?$AA@
  00149	41 b8 ab 08 00
	00		 mov	 r8d, 2219		; 000008abH
  0014f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00157	e8 00 00 00 00	 call	 _PyParallel_Guard
  0015c	85 c0		 test	 eax, eax
  0015e	75 71		 jne	 SHORT $LN3@product_se
  00160	48 8b 5d 70	 mov	 rbx, QWORD PTR [rbp+112]
  00164	48 c7 45 70 00
	00 00 00	 mov	 QWORD PTR [rbp+112], 0
  0016c	e8 00 00 00 00	 call	 _Py_PXCTX
  00171	85 c0		 test	 eax, eax
  00173	75 5c		 jne	 SHORT $LN3@product_se
  00175	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00179	a8 20		 test	 al, 32			; 00000020H
  0017b	75 4c		 jne	 SHORT $LN28@product_se
  0017d	84 c0		 test	 al, al
  0017f	78 48		 js	 SHORT $LN28@product_se
  00181	a8 02		 test	 al, 2
  00183	75 4c		 jne	 SHORT $LN3@product_se
  00185	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00189	75 46		 jne	 SHORT $LN3@product_se
  0018b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00192	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00199	4c 8b cb	 mov	 r9, rbx
  0019c	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001a2	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001aa	e8 00 00 00 00	 call	 _PyParallel_Guard
  001af	48 8b cb	 mov	 rcx, rbx
  001b2	85 c0		 test	 eax, eax
  001b4	74 07		 je	 SHORT $LN33@product_se
  001b6	e8 00 00 00 00	 call	 _Px_Dealloc
  001bb	eb 14		 jmp	 SHORT $LN3@product_se
$LN33@product_se:
  001bd	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001c1	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001c7	eb 08		 jmp	 SHORT $LN3@product_se
$LN28@product_se:
  001c9	48 8b cb	 mov	 rcx, rbx
  001cc	e8 00 00 00 00	 call	 Px_DecRef
$LN3@product_se:

; 2220 :     lz->result = result;

  001d1	4c 89 65 70	 mov	 QWORD PTR [rbp+112], r12

; 2221 :     Py_RETURN_NONE;

  001d5	e8 00 00 00 00	 call	 _Py_PXCTX
  001da	85 c0		 test	 eax, eax
  001dc	75 3c		 jne	 SHORT $LN36@product_se
  001de	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  001e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  001f3	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  001f9	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00201	e8 00 00 00 00	 call	 _PyParallel_Guard
  00206	85 c0		 test	 eax, eax
  00208	75 09		 jne	 SHORT $LN35@product_se
  0020a	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00211	74 07		 je	 SHORT $LN36@product_se
$LN35@product_se:
  00213	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN36@product_se:
  0021a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00221	e9 7c fe ff ff	 jmp	 $LN46@product_se
$LN16@product_se:

; 2193 :         PyErr_SetString(PyExc_ValueError, "invalid arguments");

  00226	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0022d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@KNPMEBHA@invalid?5arguments?$AA@
  00234	e8 00 00 00 00	 call	 PyErr_SetString

; 2222 : }

  00239	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  0023e	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  00243	33 c0		 xor	 eax, eax
  00245	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00249	5f		 pop	 rdi
  0024a	c3		 ret	 0
product_setstate ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@GBDHCGGF@r?5must?5be?5non?9negative?$AA@ ; `string'
PUBLIC	??_C@_0BA@PLDOBPMO@On?3combinations?$AA@	; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$combinations_new DD imagerel combinations_new
	DD	imagerel combinations_new+88
	DD	imagerel $unwind$combinations_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$combinations_new DD imagerel combinations_new+88
	DD	imagerel combinations_new+343
	DD	imagerel $chain$2$combinations_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$combinations_new DD imagerel combinations_new+343
	DD	imagerel combinations_new+407
	DD	imagerel $chain$4$combinations_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$combinations_new DD 060021H
	DD	087400H
	DD	0d5400H
	DD	0c3400H
	DD	imagerel combinations_new
	DD	imagerel combinations_new+88
	DD	imagerel $unwind$combinations_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$combinations_new DD 060f21H
	DD	08740fH
	DD	0d540aH
	DD	0c3405H
	DD	imagerel combinations_new
	DD	imagerel combinations_new+88
	DD	imagerel $unwind$combinations_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$combinations_new DD 030801H
	DD	0c0048208H
	DD	06002H
xdata	ENDS
;	COMDAT ??_C@_0BH@GBDHCGGF@r?5must?5be?5non?9negative?$AA@
CONST	SEGMENT
??_C@_0BH@GBDHCGGF@r?5must?5be?5non?9negative?$AA@ DB 'r must be non-nega'
	DB	'tive', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PLDOBPMO@On?3combinations?$AA@
CONST	SEGMENT
??_C@_0BA@PLDOBPMO@On?3combinations?$AA@ DB 'On:combinations', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
CONST	ENDS
;	COMDAT combinations_new
_TEXT	SEGMENT
iterable$ = 48
type$ = 96
args$ = 104
kwds$ = 112
r$ = 120
combinations_new PROC					; COMDAT

; 2306 : {

  00000	40 56		 push	 rsi
  00002	41 54		 push	 r12
  00004	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00008	4c 8b e1	 mov	 r12, rcx
  0000b	49 8b c0	 mov	 rax, r8
  0000e	4c 8b d2	 mov	 r10, rdx

; 2307 :     combinationsobject *co;
; 2308 :     Py_ssize_t n;
; 2309 :     Py_ssize_t r;
; 2310 :     PyObject *pool = NULL;
; 2311 :     PyObject *iterable = NULL;
; 2312 :     Py_ssize_t *indices = NULL;
; 2313 :     Py_ssize_t i;
; 2314 :     static char *kwargs[] = {"iterable", "r", NULL};
; 2315 : 
; 2316 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "On:combinations", kwargs,
; 2317 :                                      &iterable, &r))

  00011	48 8d 4c 24 78	 lea	 rcx, QWORD PTR r$[rsp]
  00016	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwargs@?1??combinations_new@@9@9
  0001d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@PLDOBPMO@On?3combinations?$AA@
  00024	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00029	48 8d 4c 24 30	 lea	 rcx, QWORD PTR iterable$[rsp]
  0002e	33 f6		 xor	 esi, esi
  00030	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00035	49 8b ca	 mov	 rcx, r10
  00038	48 8b d0	 mov	 rdx, rax
  0003b	48 89 74 24 30	 mov	 QWORD PTR iterable$[rsp], rsi
  00040	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00045	85 c0		 test	 eax, eax
  00047	75 0a		 jne	 SHORT $LN13@combinatio

; 2318 :         return NULL;

  00049	33 c0		 xor	 eax, eax

; 2356 : }

  0004b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0004f	41 5c		 pop	 r12
  00051	5e		 pop	 rsi
  00052	c3		 ret	 0
$LN13@combinatio:

; 2319 : 
; 2320 :     pool = PySequence_Tuple(iterable);

  00053	48 8b 4c 24 30	 mov	 rcx, QWORD PTR iterable$[rsp]
  00058	48 89 5c 24 60	 mov	 QWORD PTR [rsp+96], rbx
  0005d	48 89 6c 24 68	 mov	 QWORD PTR [rsp+104], rbp
  00062	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  00067	e8 00 00 00 00	 call	 PySequence_Tuple
  0006c	48 8b d8	 mov	 rbx, rax

; 2321 :     if (pool == NULL)

  0006f	48 85 c0	 test	 rax, rax
  00072	0f 84 c6 00 00
	00		 je	 $LN3@combinatio

; 2322 :         goto error;
; 2323 :     n = PyTuple_GET_SIZE(pool);
; 2324 :     if (r < 0) {

  00078	48 8b 4c 24 78	 mov	 rcx, QWORD PTR r$[rsp]
  0007d	48 8b 68 60	 mov	 rbp, QWORD PTR [rax+96]
  00081	48 85 c9	 test	 rcx, rcx
  00084	79 15		 jns	 SHORT $LN11@combinatio

; 2325 :         PyErr_SetString(PyExc_ValueError, "r must be non-negative");

  00086	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0008d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@GBDHCGGF@r?5must?5be?5non?9negative?$AA@
  00094	e8 00 00 00 00	 call	 PyErr_SetString

; 2326 :         goto error;

  00099	eb 54		 jmp	 SHORT $LN4@combinatio
$LN11@combinatio:

; 2327 :     }
; 2328 : 
; 2329 :     indices = PyMem_Malloc(r * sizeof(Py_ssize_t));

  0009b	48 c1 e1 03	 shl	 rcx, 3
  0009f	e8 00 00 00 00	 call	 PyMem_Malloc
  000a4	48 8b f8	 mov	 rdi, rax

; 2330 :     if (indices == NULL) {

  000a7	48 85 c0	 test	 rax, rax
  000aa	75 07		 jne	 SHORT $LN10@combinatio

; 2331 :         PyErr_NoMemory();

  000ac	e8 00 00 00 00	 call	 PyErr_NoMemory

; 2332 :         goto error;

  000b1	eb 3c		 jmp	 SHORT $LN4@combinatio
$LN10@combinatio:

; 2333 :     }
; 2334 : 
; 2335 :     for (i=0 ; i<r ; i++)

  000b3	48 8b c6	 mov	 rax, rsi
  000b6	48 39 44 24 78	 cmp	 QWORD PTR r$[rsp], rax
  000bb	7e 11		 jle	 SHORT $LN7@combinatio
  000bd	0f 1f 00	 npad	 3
$LL9@combinatio:

; 2336 :         indices[i] = i;

  000c0	48 89 04 c7	 mov	 QWORD PTR [rdi+rax*8], rax
  000c4	48 ff c0	 inc	 rax
  000c7	48 3b 44 24 78	 cmp	 rax, QWORD PTR r$[rsp]
  000cc	7c f2		 jl	 SHORT $LL9@combinatio
$LN7@combinatio:

; 2337 : 
; 2338 :     /* create combinationsobject structure */
; 2339 :     co = (combinationsobject *)type->tp_alloc(type, 0);

  000ce	33 d2		 xor	 edx, edx
  000d0	49 8b cc	 mov	 rcx, r12
  000d3	41 ff 94 24 88
	01 00 00	 call	 QWORD PTR [r12+392]
  000db	4c 8b d8	 mov	 r11, rax

; 2340 :     if (co == NULL)

  000de	48 85 c0	 test	 rax, rax
  000e1	0f 85 86 00 00
	00		 jne	 $LN6@combinatio

; 2350 : 
; 2351 : error:
; 2352 :     if (indices != NULL)
; 2353 :         PyMem_Free(indices);

  000e7	48 8b cf	 mov	 rcx, rdi
$error$22315:
  000ea	e8 00 00 00 00	 call	 PyMem_Free
$LN4@combinatio:

; 2354 :     Py_XDECREF(pool);

  000ef	e8 00 00 00 00	 call	 _Py_PXCTX
  000f4	85 c0		 test	 eax, eax
  000f6	75 46		 jne	 SHORT $LN3@combinatio
  000f8	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000fc	a8 20		 test	 al, 32			; 00000020H
  000fe	75 63		 jne	 SHORT $LN20@combinatio
  00100	84 c0		 test	 al, al
  00102	78 5f		 js	 SHORT $LN20@combinatio
  00104	a8 02		 test	 al, 2
  00106	75 36		 jne	 SHORT $LN3@combinatio
  00108	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0010c	75 30		 jne	 SHORT $LN3@combinatio
  0010e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00115	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0011c	4c 8b cb	 mov	 r9, rbx
  0011f	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00125	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0012d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00132	48 8b cb	 mov	 rcx, rbx
  00135	85 c0		 test	 eax, eax
  00137	74 1e		 je	 SHORT $LN25@combinatio
  00139	e8 00 00 00 00	 call	 _Px_Dealloc
$LN3@combinatio:

; 2355 :     return NULL;

  0013e	33 c0		 xor	 eax, eax
$LN31@combinatio:
  00140	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  00145	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  0014a	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 2356 : }

  0014f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00153	41 5c		 pop	 r12
  00155	5e		 pop	 rsi
  00156	c3		 ret	 0

; 2354 :     Py_XDECREF(pool);

$LN25@combinatio:
  00157	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0015b	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00161	eb db		 jmp	 SHORT $LN3@combinatio
$LN20@combinatio:
  00163	48 8b cb	 mov	 rcx, rbx
  00166	e8 00 00 00 00	 call	 Px_DecRef
  0016b	eb d1		 jmp	 SHORT $LN3@combinatio
$LN6@combinatio:

; 2341 :         goto error;
; 2342 : 
; 2343 :     co->pool = pool;
; 2344 :     co->indices = indices;
; 2345 :     co->result = NULL;

  0016d	48 89 70 70	 mov	 QWORD PTR [rax+112], rsi
  00171	48 89 58 60	 mov	 QWORD PTR [rax+96], rbx
  00175	48 89 78 68	 mov	 QWORD PTR [rax+104], rdi

; 2346 :     co->r = r;

  00179	48 8b 44 24 78	 mov	 rax, QWORD PTR r$[rsp]
  0017e	49 89 43 78	 mov	 QWORD PTR [r11+120], rax

; 2347 :     co->stopped = r > n ? 1 : 0;

  00182	48 39 6c 24 78	 cmp	 QWORD PTR r$[rsp], rbp

; 2348 : 
; 2349 :     return (PyObject *)co;

  00187	49 8b c3	 mov	 rax, r11
  0018a	40 0f 9f c6	 setg	 sil
  0018e	41 89 b3 80 00
	00 00		 mov	 DWORD PTR [r11+128], esi
  00195	eb a9		 jmp	 SHORT $LN31@combinatio
combinations_new ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$combinations_dealloc DD imagerel combinations_dealloc
	DD	imagerel combinations_dealloc+276
	DD	imagerel $unwind$combinations_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$combinations_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT combinations_dealloc
_TEXT	SEGMENT
co$ = 64
combinations_dealloc PROC				; COMDAT

; 2360 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 2361 :     PyObject_GC_UnTrack(co);

  0000d	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 2362 :     Py_XDECREF(co->pool);

  00012	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  00016	48 85 db	 test	 rbx, rbx
  00019	74 65		 je	 SHORT $LN8@combinatio@2
  0001b	e8 00 00 00 00	 call	 _Py_PXCTX
  00020	85 c0		 test	 eax, eax
  00022	75 5c		 jne	 SHORT $LN8@combinatio@2
  00024	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00028	a8 20		 test	 al, 32			; 00000020H
  0002a	75 4c		 jne	 SHORT $LN16@combinatio@2
  0002c	84 c0		 test	 al, al
  0002e	78 48		 js	 SHORT $LN16@combinatio@2
  00030	a8 02		 test	 al, 2
  00032	75 4c		 jne	 SHORT $LN8@combinatio@2
  00034	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00038	75 46		 jne	 SHORT $LN8@combinatio@2
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00048	4c 8b cb	 mov	 r9, rbx
  0004b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00051	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00059	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005e	48 8b cb	 mov	 rcx, rbx
  00061	85 c0		 test	 eax, eax
  00063	74 07		 je	 SHORT $LN21@combinatio@2
  00065	e8 00 00 00 00	 call	 _Px_Dealloc
  0006a	eb 14		 jmp	 SHORT $LN8@combinatio@2
$LN21@combinatio@2:
  0006c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00070	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00076	eb 08		 jmp	 SHORT $LN8@combinatio@2
$LN16@combinatio@2:
  00078	48 8b cb	 mov	 rcx, rbx
  0007b	e8 00 00 00 00	 call	 Px_DecRef
$LN8@combinatio@2:

; 2363 :     Py_XDECREF(co->result);

  00080	48 8b 5f 70	 mov	 rbx, QWORD PTR [rdi+112]
  00084	48 85 db	 test	 rbx, rbx
  00087	74 65		 je	 SHORT $LN4@combinatio@2
  00089	e8 00 00 00 00	 call	 _Py_PXCTX
  0008e	85 c0		 test	 eax, eax
  00090	75 5c		 jne	 SHORT $LN4@combinatio@2
  00092	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00096	a8 20		 test	 al, 32			; 00000020H
  00098	75 4c		 jne	 SHORT $LN27@combinatio@2
  0009a	84 c0		 test	 al, al
  0009c	78 48		 js	 SHORT $LN27@combinatio@2
  0009e	a8 02		 test	 al, 2
  000a0	75 4c		 jne	 SHORT $LN4@combinatio@2
  000a2	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000a6	75 46		 jne	 SHORT $LN4@combinatio@2
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000b6	4c 8b cb	 mov	 r9, rbx
  000b9	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000bf	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cc	48 8b cb	 mov	 rcx, rbx
  000cf	85 c0		 test	 eax, eax
  000d1	74 07		 je	 SHORT $LN32@combinatio@2
  000d3	e8 00 00 00 00	 call	 _Px_Dealloc
  000d8	eb 14		 jmp	 SHORT $LN4@combinatio@2
$LN32@combinatio@2:
  000da	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000de	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000e4	eb 08		 jmp	 SHORT $LN4@combinatio@2
$LN27@combinatio@2:
  000e6	48 8b cb	 mov	 rcx, rbx
  000e9	e8 00 00 00 00	 call	 Px_DecRef
$LN4@combinatio@2:

; 2364 :     if (co->indices != NULL)

  000ee	48 8b 4f 68	 mov	 rcx, QWORD PTR [rdi+104]
  000f2	48 85 c9	 test	 rcx, rcx
  000f5	74 05		 je	 SHORT $LN1@combinatio@2

; 2365 :         PyMem_Free(co->indices);

  000f7	e8 00 00 00 00	 call	 PyMem_Free
$LN1@combinatio@2:

; 2366 :     Py_TYPE(co)->tp_free(co);

  000fc	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00100	48 8b cf	 mov	 rcx, rdi

; 2367 : }

  00103	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00108	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0010c	5f		 pop	 rdi
  0010d	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
combinations_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@DLMDFOIG@combinations_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$combinations_traverse DD imagerel combinations_traverse
	DD	imagerel combinations_traverse+152
	DD	imagerel $unwind$combinations_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$combinations_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BG@DLMDFOIG@combinations_traverse?$AA@
CONST	SEGMENT
??_C@_0BG@DLMDFOIG@combinations_traverse?$AA@ DB 'combinations_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT combinations_traverse
_TEXT	SEGMENT
co$ = 48
visit$ = 56
arg$ = 64
combinations_traverse PROC				; COMDAT

; 2371 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 2372 :     Py_VISIT(co->pool);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN9@combinatio@3
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@DLMDFOIG@combinations_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 44 09 00
	00		 mov	 r8d, 2372		; 00000944H
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@combinatio@3:
  0003d	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN11@combinatio@3
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 39		 jne	 SHORT $LN13@combinatio@3
$LN11@combinatio@3:

; 2373 :     Py_VISIT(co->result);

  0004f	e8 00 00 00 00	 call	 _Py_PXCTX
  00054	85 c0		 test	 eax, eax
  00056	74 1c		 je	 SHORT $LN3@combinatio@3
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@DLMDFOIG@combinations_traverse?$AA@
  00066	45 33 c9	 xor	 r9d, r9d
  00069	41 b8 45 09 00
	00		 mov	 r8d, 2373		; 00000945H
  0006f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@combinatio@3:
  00074	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00078	48 85 c9	 test	 rcx, rcx
  0007b	74 09		 je	 SHORT $LN5@combinatio@3
  0007d	48 8b d7	 mov	 rdx, rdi
  00080	ff d6		 call	 rsi
  00082	85 c0		 test	 eax, eax
  00084	75 02		 jne	 SHORT $LN13@combinatio@3
$LN5@combinatio@3:

; 2374 :     return 0;

  00086	33 c0		 xor	 eax, eax
$LN13@combinatio@3:

; 2375 : }

  00088	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00092	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00096	5f		 pop	 rdi
  00097	c3		 ret	 0
combinations_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$combinations_next DD imagerel combinations_next
	DD	imagerel combinations_next+80
	DD	imagerel $unwind$combinations_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$combinations_next DD imagerel combinations_next+80
	DD	imagerel combinations_next+306
	DD	imagerel $chain$1$combinations_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$combinations_next DD imagerel combinations_next+306
	DD	imagerel combinations_next+429
	DD	imagerel $chain$3$combinations_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$combinations_next DD imagerel combinations_next+429
	DD	imagerel combinations_next+513
	DD	imagerel $chain$4$combinations_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$combinations_next DD imagerel combinations_next+513
	DD	imagerel combinations_next+860
	DD	imagerel $chain$6$combinations_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$combinations_next DD 040021H
	DD	096400H
	DD	0a3400H
	DD	imagerel combinations_next
	DD	imagerel combinations_next+80
	DD	imagerel $unwind$combinations_next
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$combinations_next DD 021H
	DD	imagerel combinations_next+80
	DD	imagerel combinations_next+306
	DD	imagerel $chain$1$combinations_next
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$combinations_next DD 040a21H
	DD	07f40aH
	DD	08d405H
	DD	imagerel combinations_next+80
	DD	imagerel combinations_next+306
	DD	imagerel $chain$1$combinations_next
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$combinations_next DD 040a21H
	DD	09640aH
	DD	0a3405H
	DD	imagerel combinations_next
	DD	imagerel combinations_next+80
	DD	imagerel $unwind$combinations_next
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$combinations_next DD 050b01H
	DD	0e007a20bH
	DD	07003c005H
	DD	05002H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT combinations_next
_TEXT	SEGMENT
result$1$ = 128
co$ = 128
pool$1$ = 136
old_result$1$ = 144
n$1$ = 152
combinations_next PROC					; COMDAT

; 2379 : {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	41 54		 push	 r12
  00005	41 56		 push	 r14
  00007	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 2380 :     PyObject *elem;
; 2381 :     PyObject *oldelem;
; 2382 :     PyObject *pool = co->pool;
; 2383 :     Py_ssize_t *indices = co->indices;
; 2384 :     PyObject *result = co->result;
; 2385 :     Py_ssize_t n = PyTuple_GET_SIZE(pool);
; 2386 :     Py_ssize_t r = co->r;
; 2387 :     Py_ssize_t i, j, index;
; 2388 : 
; 2389 :     if (co->stopped)

  0000b	83 b9 80 00 00
	00 00		 cmp	 DWORD PTR [rcx+128], 0
  00012	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00016	4c 8b 71 70	 mov	 r14, QWORD PTR [rcx+112]
  0001a	48 8b 79 68	 mov	 rdi, QWORD PTR [rcx+104]
  0001e	48 8b 69 78	 mov	 rbp, QWORD PTR [rcx+120]
  00022	48 89 94 24 88
	00 00 00	 mov	 QWORD PTR pool$1$[rsp], rdx
  0002a	48 8b 52 60	 mov	 rdx, QWORD PTR [rdx+96]
  0002e	4c 8b e1	 mov	 r12, rcx
  00031	4c 89 b4 24 80
	00 00 00	 mov	 QWORD PTR result$1$[rsp], r14
  00039	48 89 94 24 98
	00 00 00	 mov	 QWORD PTR n$1$[rsp], rdx
  00041	74 0d		 je	 SHORT $LN22@combinatio@4

; 2390 :         return NULL;

  00043	33 c0		 xor	 eax, eax

; 2461 : }

  00045	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00049	41 5e		 pop	 r14
  0004b	41 5c		 pop	 r12
  0004d	5f		 pop	 rdi
  0004e	5d		 pop	 rbp
  0004f	c3		 ret	 0
$LN22@combinatio@4:
  00050	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  00055	48 89 74 24 48	 mov	 QWORD PTR [rsp+72], rsi

; 2391 : 
; 2392 :     if (result == NULL) {

  0005a	4d 85 f6	 test	 r14, r14
  0005d	0f 85 93 00 00
	00		 jne	 $LN21@combinatio@4

; 2393 :         /* On the first pass, initialize result tuple using the indices */
; 2394 :         result = PyTuple_New(r);

  00063	48 8b cd	 mov	 rcx, rbp
  00066	e8 00 00 00 00	 call	 PyTuple_New
  0006b	4c 8b f0	 mov	 r14, rax
  0006e	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR result$1$[rsp], rax

; 2395 :         if (result == NULL)

  00076	48 85 c0	 test	 rax, rax
  00079	0f 84 5f 01 00
	00		 je	 $empty$22401

; 2396 :             goto empty;
; 2397 :         co->result = result;

  0007f	49 89 44 24 70	 mov	 QWORD PTR [r12+112], rax

; 2398 :         for (i=0; i<r ; i++) {

  00084	48 85 ed	 test	 rbp, rbp
  00087	0f 8e 8b 02 00
	00		 jle	 $LN1@combinatio@4
  0008d	4c 8b b4 24 88
	00 00 00	 mov	 r14, QWORD PTR pool$1$[rsp]
  00095	48 8b f0	 mov	 rsi, rax
  00098	48 2b f7	 sub	 rsi, rdi
  0009b	0f 1f 44 00 00	 npad	 5
$LL19@combinatio@4:

; 2399 :             index = indices[i];
; 2400 :             elem = PyTuple_GET_ITEM(pool, index);

  000a0	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  000a3	49 8b 5c c6 70	 mov	 rbx, QWORD PTR [r14+rax*8+112]

; 2401 :             Py_INCREF(elem);

  000a8	e8 00 00 00 00	 call	 _Py_PXCTX
  000ad	85 c0		 test	 eax, eax
  000af	75 32		 jne	 SHORT $LN26@combinatio@4
  000b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000bf	4c 8b cb	 mov	 r9, rbx
  000c2	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000c8	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000d0	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d5	85 c0		 test	 eax, eax
  000d7	75 06		 jne	 SHORT $LN25@combinatio@4
  000d9	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000dd	74 04		 je	 SHORT $LN26@combinatio@4
$LN25@combinatio@4:
  000df	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN26@combinatio@4:

; 2402 :             PyTuple_SET_ITEM(result, i, elem);

  000e3	48 89 5c 3e 70	 mov	 QWORD PTR [rsi+rdi+112], rbx
  000e8	48 83 c7 08	 add	 rdi, 8
  000ec	48 ff cd	 dec	 rbp
  000ef	75 af		 jne	 SHORT $LL19@combinatio@4

; 2403 :         }
; 2404 :     } else {

  000f1	e9 1a 02 00 00	 jmp	 $LN64@combinatio@4
$LN21@combinatio@4:

; 2405 :         /* Copy the previous result tuple or re-use it if available */
; 2406 :         if (Py_REFCNT(result) > 1) {

  000f6	49 83 7e 50 01	 cmp	 QWORD PTR [r14+80], 1
  000fb	0f 8e bc 00 00
	00		 jle	 $LN15@combinatio@4

; 2407 :             PyObject *old_result = result;

  00101	49 8b de	 mov	 rbx, r14

; 2408 :             result = PyTuple_New(r);

  00104	48 8b cd	 mov	 rcx, rbp
  00107	48 89 9c 24 90
	00 00 00	 mov	 QWORD PTR old_result$1$[rsp], rbx
  0010f	e8 00 00 00 00	 call	 PyTuple_New
  00114	4c 8b f0	 mov	 r14, rax
  00117	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR result$1$[rsp], rax

; 2409 :             if (result == NULL)

  0011f	48 85 c0	 test	 rax, rax
  00122	0f 84 b6 00 00
	00		 je	 $empty$22401

; 2410 :                 goto empty;
; 2411 :             co->result = result;

  00128	49 89 44 24 70	 mov	 QWORD PTR [r12+112], rax

; 2412 :             for (i=0; i<r ; i++) {

  0012d	48 85 ed	 test	 rbp, rbp
  00130	7e 7b		 jle	 SHORT $LN11@combinatio@4
  00132	4c 89 6c 24 40	 mov	 QWORD PTR [rsp+64], r13
  00137	4c 89 7c 24 38	 mov	 QWORD PTR [rsp+56], r15
  0013c	4c 8b fb	 mov	 r15, rbx
  0013f	48 8d 70 70	 lea	 rsi, QWORD PTR [rax+112]
  00143	4c 8b ed	 mov	 r13, rbp
  00146	4c 2b f8	 sub	 r15, rax
  00149	0f 1f 80 00 00
	00 00		 npad	 7
$LL13@combinatio@4:

; 2413 :                 elem = PyTuple_GET_ITEM(old_result, i);

  00150	49 8b 1c 37	 mov	 rbx, QWORD PTR [r15+rsi]

; 2414 :                 Py_INCREF(elem);

  00154	e8 00 00 00 00	 call	 _Py_PXCTX
  00159	85 c0		 test	 eax, eax
  0015b	75 32		 jne	 SHORT $LN30@combinatio@4
  0015d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00164	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0016b	4c 8b cb	 mov	 r9, rbx
  0016e	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00174	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0017c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00181	85 c0		 test	 eax, eax
  00183	75 06		 jne	 SHORT $LN29@combinatio@4
  00185	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00189	74 04		 je	 SHORT $LN30@combinatio@4
$LN29@combinatio@4:
  0018b	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN30@combinatio@4:

; 2415 :                 PyTuple_SET_ITEM(result, i, elem);

  0018f	48 89 1e	 mov	 QWORD PTR [rsi], rbx
  00192	48 83 c6 08	 add	 rsi, 8
  00196	49 ff cd	 dec	 r13
  00199	75 b5		 jne	 SHORT $LL13@combinatio@4
  0019b	48 8b 9c 24 90
	00 00 00	 mov	 rbx, QWORD PTR old_result$1$[rsp]
  001a3	4c 8b 7c 24 38	 mov	 r15, QWORD PTR [rsp+56]
  001a8	4c 8b 6c 24 40	 mov	 r13, QWORD PTR [rsp+64]
$LN11@combinatio@4:

; 2416 :             }
; 2417 :             Py_DECREF(old_result);

  001ad	48 8b cb	 mov	 rcx, rbx
  001b0	e8 00 00 00 00	 call	 _Py_DecRef
  001b5	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR n$1$[rsp]
$LN15@combinatio@4:

; 2418 :         }
; 2419 :         /* Now, we've got the only copy so we can update it in-place
; 2420 :          * CPython's empty tuple is a singleton and cached in
; 2421 :          * PyTuple's freelist.
; 2422 :          */
; 2423 :         assert(r == 0 || Py_REFCNT(result) == 1);
; 2424 : 
; 2425 :         /* Scan indices right-to-left until finding one that is not
; 2426 :            at its maximum (i + n - r). */
; 2427 :         for (i=r-1 ; i >= 0 && indices[i] == i+n-r ; i--)

  001bd	48 8d 4d ff	 lea	 rcx, QWORD PTR [rbp-1]
  001c1	48 85 c9	 test	 rcx, rcx
  001c4	78 18		 js	 SHORT $empty$22401
  001c6	48 8b c1	 mov	 rax, rcx
  001c9	48 2b c5	 sub	 rax, rbp
  001cc	48 03 c2	 add	 rax, rdx
  001cf	90		 npad	 1
$LL10@combinatio@4:
  001d0	48 39 04 cf	 cmp	 QWORD PTR [rdi+rcx*8], rax
  001d4	75 2b		 jne	 SHORT $LN8@combinatio@4
  001d6	48 ff c8	 dec	 rax
  001d9	48 ff c9	 dec	 rcx
  001dc	79 f2		 jns	 SHORT $LL10@combinatio@4
$empty$22401:

; 2457 : 
; 2458 : empty:
; 2459 :     co->stopped = 1;

  001de	41 c7 84 24 80
	00 00 00 01 00
	00 00		 mov	 DWORD PTR [r12+128], 1

; 2460 :     return NULL;

  001ea	33 c0		 xor	 eax, eax
$LN63@combinatio@4:
  001ec	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  001f1	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]

; 2461 : }

  001f6	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001fa	41 5e		 pop	 r14
  001fc	41 5c		 pop	 r12
  001fe	5f		 pop	 rdi
  001ff	5d		 pop	 rbp
  00200	c3		 ret	 0
$LN8@combinatio@4:

; 2428 :             ;
; 2429 : 
; 2430 :         /* If i is negative, then the indices are all at
; 2431 :            their maximum value and we're done. */
; 2432 :         if (i < 0)

  00201	48 85 c9	 test	 rcx, rcx
  00204	78 d8		 js	 SHORT $empty$22401

; 2433 :             goto empty;
; 2434 : 
; 2435 :         /* Increment the current index which we know is not at its
; 2436 :            maximum.  Then move back to the right setting each index
; 2437 :            to its lowest possible value (one higher than the index
; 2438 :            to its left -- this maintains the sort order invariant). */
; 2439 :         indices[i]++;

  00206	48 ff 04 cf	 inc	 QWORD PTR [rdi+rcx*8]

; 2440 :         for (j=i+1 ; j<r ; j++)

  0020a	48 8d 51 01	 lea	 rdx, QWORD PTR [rcx+1]
  0020e	48 3b d5	 cmp	 rdx, rbp
  00211	7d 22		 jge	 SHORT $LN4@combinatio@4
  00213	66 66 66 66 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL6@combinatio@4:

; 2441 :             indices[j] = indices[j-1] + 1;

  00220	48 8b 44 d7 f8	 mov	 rax, QWORD PTR [rdi+rdx*8-8]
  00225	48 ff c2	 inc	 rdx
  00228	48 ff c0	 inc	 rax
  0022b	48 89 44 d7 f8	 mov	 QWORD PTR [rdi+rdx*8-8], rax
  00230	48 3b d5	 cmp	 rdx, rbp
  00233	7c eb		 jl	 SHORT $LL6@combinatio@4
$LN4@combinatio@4:

; 2442 : 
; 2443 :         /* Update the result tuple for the new indices
; 2444 :            starting with i, the leftmost index that changed */
; 2445 :         for ( ; i<r ; i++) {

  00235	48 3b cd	 cmp	 rcx, rbp
  00238	0f 8d da 00 00
	00		 jge	 $LN1@combinatio@4
  0023e	49 2b fe	 sub	 rdi, r14
  00241	4d 8d 64 ce 70	 lea	 r12, QWORD PTR [r14+rcx*8+112]
  00246	4c 8b b4 24 88
	00 00 00	 mov	 r14, QWORD PTR pool$1$[rsp]
  0024e	48 2b e9	 sub	 rbp, rcx
$LL3@combinatio@4:

; 2446 :             index = indices[i];
; 2447 :             elem = PyTuple_GET_ITEM(pool, index);

  00251	4a 8b 44 27 90	 mov	 rax, QWORD PTR [rdi+r12-112]
  00256	49 8b 74 c6 70	 mov	 rsi, QWORD PTR [r14+rax*8+112]

; 2448 :             Py_INCREF(elem);

  0025b	e8 00 00 00 00	 call	 _Py_PXCTX
  00260	85 c0		 test	 eax, eax
  00262	75 32		 jne	 SHORT $LN34@combinatio@4
  00264	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0026b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00272	4c 8b ce	 mov	 r9, rsi
  00275	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0027b	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00283	e8 00 00 00 00	 call	 _PyParallel_Guard
  00288	85 c0		 test	 eax, eax
  0028a	75 06		 jne	 SHORT $LN33@combinatio@4
  0028c	f6 46 20 20	 test	 BYTE PTR [rsi+32], 32	; 00000020H
  00290	74 04		 je	 SHORT $LN34@combinatio@4
$LN33@combinatio@4:
  00292	48 ff 46 50	 inc	 QWORD PTR [rsi+80]
$LN34@combinatio@4:

; 2449 :             oldelem = PyTuple_GET_ITEM(result, i);

  00296	49 8b 1c 24	 mov	 rbx, QWORD PTR [r12]

; 2450 :             PyTuple_SET_ITEM(result, i, elem);

  0029a	49 89 34 24	 mov	 QWORD PTR [r12], rsi

; 2451 :             Py_DECREF(oldelem);

  0029e	e8 00 00 00 00	 call	 _Py_PXCTX
  002a3	85 c0		 test	 eax, eax
  002a5	75 5c		 jne	 SHORT $LN2@combinatio@4
  002a7	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  002ab	a8 20		 test	 al, 32			; 00000020H
  002ad	75 4c		 jne	 SHORT $LN41@combinatio@4
  002af	84 c0		 test	 al, al
  002b1	78 48		 js	 SHORT $LN41@combinatio@4
  002b3	a8 02		 test	 al, 2
  002b5	75 4c		 jne	 SHORT $LN2@combinatio@4
  002b7	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  002bb	75 46		 jne	 SHORT $LN2@combinatio@4
  002bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  002c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  002cb	4c 8b cb	 mov	 r9, rbx
  002ce	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  002d4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002dc	e8 00 00 00 00	 call	 _PyParallel_Guard
  002e1	48 8b cb	 mov	 rcx, rbx
  002e4	85 c0		 test	 eax, eax
  002e6	74 07		 je	 SHORT $LN46@combinatio@4
  002e8	e8 00 00 00 00	 call	 _Px_Dealloc
  002ed	eb 14		 jmp	 SHORT $LN2@combinatio@4
$LN46@combinatio@4:
  002ef	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  002f3	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  002f9	eb 08		 jmp	 SHORT $LN2@combinatio@4
$LN41@combinatio@4:
  002fb	48 8b cb	 mov	 rcx, rbx
  002fe	e8 00 00 00 00	 call	 Px_DecRef
$LN2@combinatio@4:

; 2442 : 
; 2443 :         /* Update the result tuple for the new indices
; 2444 :            starting with i, the leftmost index that changed */
; 2445 :         for ( ; i<r ; i++) {

  00303	49 83 c4 08	 add	 r12, 8
  00307	48 ff cd	 dec	 rbp
  0030a	0f 85 41 ff ff
	ff		 jne	 $LL3@combinatio@4
$LN64@combinatio@4:
  00310	4c 8b b4 24 80
	00 00 00	 mov	 r14, QWORD PTR result$1$[rsp]
$LN1@combinatio@4:

; 2452 :         }
; 2453 :     }
; 2454 : 
; 2455 :     Py_INCREF(result);

  00318	e8 00 00 00 00	 call	 _Py_PXCTX
  0031d	85 c0		 test	 eax, eax
  0031f	75 33		 jne	 SHORT $LN49@combinatio@4
  00321	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00328	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0032f	4d 8b ce	 mov	 r9, r14
  00332	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00338	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00340	e8 00 00 00 00	 call	 _PyParallel_Guard
  00345	85 c0		 test	 eax, eax
  00347	75 07		 jne	 SHORT $LN48@combinatio@4
  00349	41 f6 46 20 20	 test	 BYTE PTR [r14+32], 32	; 00000020H
  0034e	74 04		 je	 SHORT $LN49@combinatio@4
$LN48@combinatio@4:
  00350	49 ff 46 50	 inc	 QWORD PTR [r14+80]
$LN49@combinatio@4:

; 2456 :     return result;

  00354	49 8b c6	 mov	 rax, r14
  00357	e9 90 fe ff ff	 jmp	 $LN63@combinatio@4
combinations_next ENDP
_TEXT	ENDS
PUBLIC	??_C@_06GDBDPCAG@O?$CIOn?$CJN?$AA@		; `string'
PUBLIC	??_C@_06BBKLFPPK@O?$CI?$CI?$CJn?$CJ?$AA@	; `string'
PUBLIC	??_C@_05IEPKLDIK@O?$CIOn?$CJ?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$combinations_reduce DD imagerel combinations_reduce
	DD	imagerel combinations_reduce+83
	DD	imagerel $unwind$combinations_reduce
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$combinations_reduce DD imagerel combinations_reduce+83
	DD	imagerel combinations_reduce+112
	DD	imagerel $chain$0$combinations_reduce
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$combinations_reduce DD imagerel combinations_reduce+112
	DD	imagerel combinations_reduce+205
	DD	imagerel $chain$3$combinations_reduce
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$combinations_reduce DD imagerel combinations_reduce+205
	DD	imagerel combinations_reduce+231
	DD	imagerel $chain$5$combinations_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$combinations_reduce DD 040021H
	DD	097400H
	DD	086400H
	DD	imagerel combinations_reduce
	DD	imagerel combinations_reduce+83
	DD	imagerel $unwind$combinations_reduce
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$combinations_reduce DD 040521H
	DD	097405H
	DD	086400H
	DD	imagerel combinations_reduce
	DD	imagerel combinations_reduce+83
	DD	imagerel $unwind$combinations_reduce
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$combinations_reduce DD 020521H
	DD	086405H
	DD	imagerel combinations_reduce
	DD	imagerel combinations_reduce+83
	DD	imagerel $unwind$combinations_reduce
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$combinations_reduce DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_06GDBDPCAG@O?$CIOn?$CJN?$AA@
CONST	SEGMENT
??_C@_06GDBDPCAG@O?$CIOn?$CJN?$AA@ DB 'O(On)N', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06BBKLFPPK@O?$CI?$CI?$CJn?$CJ?$AA@
CONST	SEGMENT
??_C@_06BBKLFPPK@O?$CI?$CI?$CJn?$CJ?$AA@ DB 'O(()n)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05IEPKLDIK@O?$CIOn?$CJ?$AA@
CONST	SEGMENT
??_C@_05IEPKLDIK@O?$CIOn?$CJ?$AA@ DB 'O(On)', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT combinations_reduce
_TEXT	SEGMENT
lz$ = 64
combinations_reduce PROC				; COMDAT

; 2465 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 2466 :     if (lz->result == NULL) {

  00006	48 83 79 70 00	 cmp	 QWORD PTR [rcx+112], 0
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	75 1d		 jne	 SHORT $LN9@combinatio@5

; 2467 :         return Py_BuildValue("O(On)", Py_TYPE(lz), lz->pool, lz->r);

  00010	4c 8b 49 78	 mov	 r9, QWORD PTR [rcx+120]
  00014	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]
  00018	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05IEPKLDIK@O?$CIOn?$CJ?$AA@

; 2489 :     }
; 2490 : }

  00023	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00027	5b		 pop	 rbx
  00028	e9 00 00 00 00	 jmp	 Py_BuildValue
$LN9@combinatio@5:

; 2468 :     } else if (lz->stopped) {

  0002d	83 b9 80 00 00
	00 00		 cmp	 DWORD PTR [rcx+128], 0
  00034	74 19		 je	 SHORT $LN7@combinatio@5

; 2469 :         return Py_BuildValue("O(()n)", Py_TYPE(lz), lz->r);

  00036	4c 8b 41 78	 mov	 r8, QWORD PTR [rcx+120]
  0003a	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06BBKLFPPK@O?$CI?$CI?$CJn?$CJ?$AA@

; 2489 :     }
; 2490 : }

  00045	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00049	5b		 pop	 rbx
  0004a	e9 00 00 00 00	 jmp	 Py_BuildValue
$LN7@combinatio@5:

; 2470 :     } else {
; 2471 :         PyObject *indices;
; 2472 :         Py_ssize_t i;
; 2473 : 
; 2474 :         /* we must pickle the indices and use them for setstate */
; 2475 :         indices = PyTuple_New(lz->r);

  0004f	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  00053	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  00058	e8 00 00 00 00	 call	 PyTuple_New
  0005d	48 8b f0	 mov	 rsi, rax

; 2476 :         if (!indices)

  00060	48 85 c0	 test	 rax, rax
  00063	75 0b		 jne	 SHORT $LN5@combinatio@5
  00065	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]

; 2489 :     }
; 2490 : }

  0006a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0006e	5b		 pop	 rbx
  0006f	c3		 ret	 0
$LN5@combinatio@5:
  00070	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi

; 2477 :             return NULL;
; 2478 :         for (i=0; i<lz->r; i++)

  00075	33 ff		 xor	 edi, edi
  00077	48 39 7b 78	 cmp	 QWORD PTR [rbx+120], rdi
  0007b	7e 23		 jle	 SHORT $LN2@combinatio@5
  0007d	0f 1f 00	 npad	 3
$LL4@combinatio@5:

; 2479 :         {
; 2480 :             PyObject* index = PyLong_FromSsize_t(lz->indices[i]);

  00080	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00084	48 8b 0c f9	 mov	 rcx, QWORD PTR [rcx+rdi*8]
  00088	e8 00 00 00 00	 call	 PyLong_FromSsize_t

; 2481 :             if (!index) {

  0008d	48 85 c0	 test	 rax, rax
  00090	74 3b		 je	 SHORT $LN13@combinatio@5

; 2484 :             }
; 2485 :             PyTuple_SET_ITEM(indices, i, index);

  00092	48 89 44 fe 70	 mov	 QWORD PTR [rsi+rdi*8+112], rax
  00097	48 ff c7	 inc	 rdi
  0009a	48 3b 7b 78	 cmp	 rdi, QWORD PTR [rbx+120]
  0009e	7c e0		 jl	 SHORT $LL4@combinatio@5
$LN2@combinatio@5:

; 2486 :         }
; 2487 : 
; 2488 :         return Py_BuildValue("O(On)N", Py_TYPE(lz), lz->pool, lz->r, indices);

  000a0	4c 8b 4b 78	 mov	 r9, QWORD PTR [rbx+120]
  000a4	4c 8b 43 60	 mov	 r8, QWORD PTR [rbx+96]
  000a8	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06GDBDPCAG@O?$CIOn?$CJN?$AA@
  000b3	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  000b8	e8 00 00 00 00	 call	 Py_BuildValue
  000bd	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  000c2	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]

; 2489 :     }
; 2490 : }

  000c7	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000cb	5b		 pop	 rbx
  000cc	c3		 ret	 0
$LN13@combinatio@5:

; 2482 :                 Py_DECREF(indices);

  000cd	48 8b ce	 mov	 rcx, rsi
  000d0	e8 00 00 00 00	 call	 _Py_DecRef
  000d5	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  000da	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]

; 2483 :                 return NULL;

  000df	33 c0		 xor	 eax, eax

; 2489 :     }
; 2490 : }

  000e1	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000e5	5b		 pop	 rbx
  000e6	c3		 ret	 0
combinations_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@FGJEHJGB@combinations_setstate?$AA@	; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$combinations_setstate DD imagerel combinations_setstate
	DD	imagerel combinations_setstate+57
	DD	imagerel $unwind$combinations_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$combinations_setstate DD imagerel combinations_setstate+57
	DD	imagerel combinations_setstate+197
	DD	imagerel $chain$2$combinations_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$combinations_setstate DD imagerel combinations_setstate+197
	DD	imagerel combinations_setstate+542
	DD	imagerel $chain$4$combinations_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$combinations_setstate DD imagerel combinations_setstate+542
	DD	imagerel combinations_setstate+572
	DD	imagerel $chain$5$combinations_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$combinations_setstate DD 021H
	DD	imagerel combinations_setstate
	DD	imagerel combinations_setstate+57
	DD	imagerel $unwind$combinations_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$combinations_setstate DD 060021H
	DD	0cd400H
	DD	0b6400H
	DD	0a3400H
	DD	imagerel combinations_setstate
	DD	imagerel combinations_setstate+57
	DD	imagerel $unwind$combinations_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$combinations_setstate DD 060f21H
	DD	0cd40fH
	DD	0b640aH
	DD	0a3405H
	DD	imagerel combinations_setstate
	DD	imagerel combinations_setstate+57
	DD	imagerel $unwind$combinations_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$combinations_setstate DD 040901H
	DD	0c0055209H
	DD	050027003H
xdata	ENDS
;	COMDAT ??_C@_0BG@FGJEHJGB@combinations_setstate?$AA@
CONST	SEGMENT
??_C@_0BG@FGJEHJGB@combinations_setstate?$AA@ DB 'combinations_setstate', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
CONST	ENDS
;	COMDAT combinations_setstate
_TEXT	SEGMENT
lz$ = 80
state$ = 88
combinations_setstate PROC				; COMDAT

; 2494 : {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	41 54		 push	 r12
  00005	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 2495 :     PyObject *result;
; 2496 :     Py_ssize_t i;
; 2497 :     Py_ssize_t n = PyTuple_GET_SIZE(lz->pool);

  00009	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  0000d	48 8b ea	 mov	 rbp, rdx
  00010	48 8b f9	 mov	 rdi, rcx
  00013	4c 8b 60 60	 mov	 r12, QWORD PTR [rax+96]

; 2498 : 
; 2499 :     if (!PyTuple_Check(state) || PyTuple_GET_SIZE(state) != lz->r)

  00017	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  0001b	f7 80 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rax+256], 67108864 ; 04000000H
  00025	0f 84 f3 01 00
	00		 je	 $LN15@combinatio@6
  0002b	48 8b 41 78	 mov	 rax, QWORD PTR [rcx+120]
  0002f	48 39 42 60	 cmp	 QWORD PTR [rdx+96], rax
  00033	0f 85 e5 01 00
	00		 jne	 $LN15@combinatio@6

; 2503 :     }
; 2504 : 
; 2505 :     for (i=0; i<lz->r; i++)

  00039	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  0003e	48 89 74 24 58	 mov	 QWORD PTR [rsp+88], rsi
  00043	4c 89 6c 24 60	 mov	 QWORD PTR [rsp+96], r13
  00048	45 33 ed	 xor	 r13d, r13d
  0004b	41 8b f5	 mov	 esi, r13d
  0004e	48 85 c0	 test	 rax, rax
  00051	7e 47		 jle	 SHORT $LN43@combinatio@6
$LL14@combinatio@6:

; 2506 :     {
; 2507 :         Py_ssize_t max;
; 2508 :         PyObject* indexObject = PyTuple_GET_ITEM(state, i);
; 2509 :         Py_ssize_t index = PyLong_AsSsize_t(indexObject);

  00053	48 8b 4c f5 70	 mov	 rcx, QWORD PTR [rbp+rsi*8+112]
  00058	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  0005d	48 8b d8	 mov	 rbx, rax

; 2510 :         if (index == -1 && PyErr_Occurred())

  00060	48 83 f8 ff	 cmp	 rax, -1
  00064	75 0a		 jne	 SHORT $LN11@combinatio@6
  00066	e8 00 00 00 00	 call	 PyErr_Occurred
  0006b	48 85 c0	 test	 rax, rax
  0006e	75 3b		 jne	 SHORT $LN40@combinatio@6
$LN11@combinatio@6:

; 2511 :             return NULL; /* not an integer */
; 2512 :         max = i + n - lz->r;

  00070	48 8b c6	 mov	 rax, rsi
  00073	48 2b 47 78	 sub	 rax, QWORD PTR [rdi+120]
  00077	49 03 c4	 add	 rax, r12

; 2513 :         /* clamp the index (beware of negative max) */
; 2514 :         if (index > max)

  0007a	48 3b d8	 cmp	 rbx, rax
  0007d	48 0f 4f d8	 cmovg	 rbx, rax

; 2515 :             index = max;
; 2516 :         if (index < 0)
; 2517 :             index = 0;
; 2518 :         lz->indices[i] = index;

  00081	48 8b 47 68	 mov	 rax, QWORD PTR [rdi+104]
  00085	48 85 db	 test	 rbx, rbx
  00088	49 0f 48 dd	 cmovs	 rbx, r13
  0008c	48 ff c6	 inc	 rsi
  0008f	48 89 5c f0 f8	 mov	 QWORD PTR [rax+rsi*8-8], rbx
  00094	48 3b 77 78	 cmp	 rsi, QWORD PTR [rdi+120]
  00098	7c b9		 jl	 SHORT $LL14@combinatio@6
$LN43@combinatio@6:

; 2519 :     }
; 2520 : 
; 2521 :     result = PyTuple_New(lz->r);

  0009a	48 8b 4f 78	 mov	 rcx, QWORD PTR [rdi+120]
  0009e	e8 00 00 00 00	 call	 PyTuple_New
  000a3	48 8b e8	 mov	 rbp, rax

; 2522 :     if (result == NULL)

  000a6	48 85 c0	 test	 rax, rax
  000a9	75 1a		 jne	 SHORT $LN8@combinatio@6
$LN40@combinatio@6:

; 2523 :         return NULL;

  000ab	33 c0		 xor	 eax, eax
$LN46@combinatio@6:
  000ad	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  000b2	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000b7	4c 8b 6c 24 60	 mov	 r13, QWORD PTR [rsp+96]

; 2533 : }

  000bc	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c0	41 5c		 pop	 r12
  000c2	5f		 pop	 rdi
  000c3	5d		 pop	 rbp
  000c4	c3		 ret	 0
$LN8@combinatio@6:

; 2524 :     for (i=0; i<lz->r; i++) {

  000c5	49 8b f5	 mov	 rsi, r13
  000c8	4c 39 6f 78	 cmp	 QWORD PTR [rdi+120], r13
  000cc	7e 5c		 jle	 SHORT $LN4@combinatio@6
  000ce	66 90		 npad	 2
$LL7@combinatio@6:

; 2525 :         PyObject *element = PyTuple_GET_ITEM(lz->pool, lz->indices[i]);

  000d0	48 8b 47 68	 mov	 rax, QWORD PTR [rdi+104]
  000d4	48 8b 0c f0	 mov	 rcx, QWORD PTR [rax+rsi*8]
  000d8	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  000dc	48 8b 5c c8 70	 mov	 rbx, QWORD PTR [rax+rcx*8+112]

; 2526 :         Py_INCREF(element);

  000e1	e8 00 00 00 00	 call	 _Py_PXCTX
  000e6	85 c0		 test	 eax, eax
  000e8	75 32		 jne	 SHORT $LN20@combinatio@6
  000ea	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000f8	4c 8b cb	 mov	 r9, rbx
  000fb	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00101	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00109	e8 00 00 00 00	 call	 _PyParallel_Guard
  0010e	85 c0		 test	 eax, eax
  00110	75 06		 jne	 SHORT $LN19@combinatio@6
  00112	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00116	74 04		 je	 SHORT $LN20@combinatio@6
$LN19@combinatio@6:
  00118	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN20@combinatio@6:

; 2527 :         PyTuple_SET_ITEM(result, i, element);

  0011c	48 89 5c f5 70	 mov	 QWORD PTR [rbp+rsi*8+112], rbx
  00121	48 ff c6	 inc	 rsi
  00124	48 3b 77 78	 cmp	 rsi, QWORD PTR [rdi+120]
  00128	7c a6		 jl	 SHORT $LL7@combinatio@6
$LN4@combinatio@6:

; 2528 :     }
; 2529 : 
; 2530 :     Py_CLEAR(lz->result);

  0012a	4c 8b 4f 70	 mov	 r9, QWORD PTR [rdi+112]
  0012e	4d 85 c9	 test	 r9, r9
  00131	0f 84 92 00 00
	00		 je	 $LN3@combinatio@6
  00137	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  0013e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@FGJEHJGB@combinations_setstate?$AA@
  00145	41 b8 e2 09 00
	00		 mov	 r8d, 2530		; 000009e2H
  0014b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00153	e8 00 00 00 00	 call	 _PyParallel_Guard
  00158	85 c0		 test	 eax, eax
  0015a	75 6d		 jne	 SHORT $LN3@combinatio@6
  0015c	48 8b 5f 70	 mov	 rbx, QWORD PTR [rdi+112]
  00160	4c 89 6f 70	 mov	 QWORD PTR [rdi+112], r13
  00164	e8 00 00 00 00	 call	 _Py_PXCTX
  00169	85 c0		 test	 eax, eax
  0016b	75 5c		 jne	 SHORT $LN3@combinatio@6
  0016d	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00171	a8 20		 test	 al, 32			; 00000020H
  00173	75 4c		 jne	 SHORT $LN27@combinatio@6
  00175	84 c0		 test	 al, al
  00177	78 48		 js	 SHORT $LN27@combinatio@6
  00179	a8 02		 test	 al, 2
  0017b	75 4c		 jne	 SHORT $LN3@combinatio@6
  0017d	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00181	75 46		 jne	 SHORT $LN3@combinatio@6
  00183	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0018a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00191	4c 8b cb	 mov	 r9, rbx
  00194	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0019a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001a2	e8 00 00 00 00	 call	 _PyParallel_Guard
  001a7	48 8b cb	 mov	 rcx, rbx
  001aa	85 c0		 test	 eax, eax
  001ac	74 07		 je	 SHORT $LN32@combinatio@6
  001ae	e8 00 00 00 00	 call	 _Px_Dealloc
  001b3	eb 14		 jmp	 SHORT $LN3@combinatio@6
$LN32@combinatio@6:
  001b5	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001b9	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001bf	eb 08		 jmp	 SHORT $LN3@combinatio@6
$LN27@combinatio@6:
  001c1	48 8b cb	 mov	 rcx, rbx
  001c4	e8 00 00 00 00	 call	 Px_DecRef
$LN3@combinatio@6:

; 2531 :     lz->result = result;

  001c9	48 89 6f 70	 mov	 QWORD PTR [rdi+112], rbp

; 2532 :     Py_RETURN_NONE;

  001cd	e8 00 00 00 00	 call	 _Py_PXCTX
  001d2	85 c0		 test	 eax, eax
  001d4	75 3c		 jne	 SHORT $LN35@combinatio@6
  001d6	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  001dd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  001eb	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  001f1	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  001f9	e8 00 00 00 00	 call	 _PyParallel_Guard
  001fe	85 c0		 test	 eax, eax
  00200	75 09		 jne	 SHORT $LN34@combinatio@6
  00202	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00209	74 07		 je	 SHORT $LN35@combinatio@6
$LN34@combinatio@6:
  0020b	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN35@combinatio@6:
  00212	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00219	e9 8f fe ff ff	 jmp	 $LN46@combinatio@6
$LN15@combinatio@6:

; 2500 :     {
; 2501 :         PyErr_SetString(PyExc_ValueError, "invalid arguments");

  0021e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00225	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@KNPMEBHA@invalid?5arguments?$AA@
  0022c	e8 00 00 00 00	 call	 PyErr_SetString

; 2502 :         return NULL;

  00231	33 c0		 xor	 eax, eax

; 2533 : }

  00233	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00237	41 5c		 pop	 r12
  00239	5f		 pop	 rdi
  0023a	5d		 pop	 rbp
  0023b	c3		 ret	 0
combinations_setstate ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@CJEKPALN@On?3combinations_with_replacement@ ; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$cwr_new DD imagerel cwr_new
	DD	imagerel cwr_new+88
	DD	imagerel $unwind$cwr_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$cwr_new DD imagerel cwr_new+88
	DD	imagerel cwr_new+343
	DD	imagerel $chain$2$cwr_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$cwr_new DD imagerel cwr_new+343
	DD	imagerel cwr_new+415
	DD	imagerel $chain$4$cwr_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$cwr_new DD 060021H
	DD	086400H
	DD	0d5400H
	DD	0c3400H
	DD	imagerel cwr_new
	DD	imagerel cwr_new+88
	DD	imagerel $unwind$cwr_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$cwr_new DD 060f21H
	DD	08640fH
	DD	0d540aH
	DD	0c3405H
	DD	imagerel cwr_new
	DD	imagerel cwr_new+88
	DD	imagerel $unwind$cwr_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cwr_new DD 030801H
	DD	0c0048208H
	DD	07002H
xdata	ENDS
;	COMDAT ??_C@_0CB@CJEKPALN@On?3combinations_with_replacement@
CONST	SEGMENT
??_C@_0CB@CJEKPALN@On?3combinations_with_replacement@ DB 'On:combinations'
	DB	'_with_replacement', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
CONST	ENDS
;	COMDAT cwr_new
_TEXT	SEGMENT
iterable$ = 48
type$ = 96
args$ = 104
kwds$ = 112
r$ = 120
cwr_new	PROC						; COMDAT

; 2635 : {

  00000	40 57		 push	 rdi
  00002	41 54		 push	 r12
  00004	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00008	4c 8b e1	 mov	 r12, rcx
  0000b	49 8b c0	 mov	 rax, r8
  0000e	4c 8b d2	 mov	 r10, rdx

; 2636 :     cwrobject *co;
; 2637 :     Py_ssize_t n;
; 2638 :     Py_ssize_t r;
; 2639 :     PyObject *pool = NULL;
; 2640 :     PyObject *iterable = NULL;
; 2641 :     Py_ssize_t *indices = NULL;
; 2642 :     Py_ssize_t i;
; 2643 :     static char *kwargs[] = {"iterable", "r", NULL};
; 2644 : 
; 2645 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "On:combinations_with_replacement", kwargs,
; 2646 :                                      &iterable, &r))

  00011	48 8d 4c 24 78	 lea	 rcx, QWORD PTR r$[rsp]
  00016	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwargs@?1??cwr_new@@9@9
  0001d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CB@CJEKPALN@On?3combinations_with_replacement@
  00024	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00029	48 8d 4c 24 30	 lea	 rcx, QWORD PTR iterable$[rsp]
  0002e	33 ff		 xor	 edi, edi
  00030	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00035	49 8b ca	 mov	 rcx, r10
  00038	48 8b d0	 mov	 rdx, rax
  0003b	48 89 7c 24 30	 mov	 QWORD PTR iterable$[rsp], rdi
  00040	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00045	85 c0		 test	 eax, eax
  00047	75 0a		 jne	 SHORT $LN13@cwr_new

; 2647 :         return NULL;

  00049	33 c0		 xor	 eax, eax

; 2685 : }

  0004b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0004f	41 5c		 pop	 r12
  00051	5f		 pop	 rdi
  00052	c3		 ret	 0
$LN13@cwr_new:

; 2648 : 
; 2649 :     pool = PySequence_Tuple(iterable);

  00053	48 8b 4c 24 30	 mov	 rcx, QWORD PTR iterable$[rsp]
  00058	48 89 5c 24 60	 mov	 QWORD PTR [rsp+96], rbx
  0005d	48 89 6c 24 68	 mov	 QWORD PTR [rsp+104], rbp
  00062	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  00067	e8 00 00 00 00	 call	 PySequence_Tuple
  0006c	48 8b d8	 mov	 rbx, rax

; 2650 :     if (pool == NULL)

  0006f	48 85 c0	 test	 rax, rax
  00072	0f 84 c6 00 00
	00		 je	 $LN3@cwr_new

; 2651 :         goto error;
; 2652 :     n = PyTuple_GET_SIZE(pool);
; 2653 :     if (r < 0) {

  00078	48 8b 4c 24 78	 mov	 rcx, QWORD PTR r$[rsp]
  0007d	48 8b 68 60	 mov	 rbp, QWORD PTR [rax+96]
  00081	48 85 c9	 test	 rcx, rcx
  00084	79 15		 jns	 SHORT $LN11@cwr_new

; 2654 :         PyErr_SetString(PyExc_ValueError, "r must be non-negative");

  00086	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0008d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@GBDHCGGF@r?5must?5be?5non?9negative?$AA@
  00094	e8 00 00 00 00	 call	 PyErr_SetString

; 2655 :         goto error;

  00099	eb 54		 jmp	 SHORT $LN4@cwr_new
$LN11@cwr_new:

; 2656 :     }
; 2657 : 
; 2658 :     indices = PyMem_Malloc(r * sizeof(Py_ssize_t));

  0009b	48 c1 e1 03	 shl	 rcx, 3
  0009f	e8 00 00 00 00	 call	 PyMem_Malloc
  000a4	48 8b f0	 mov	 rsi, rax

; 2659 :     if (indices == NULL) {

  000a7	48 85 c0	 test	 rax, rax
  000aa	75 07		 jne	 SHORT $LN10@cwr_new

; 2660 :         PyErr_NoMemory();

  000ac	e8 00 00 00 00	 call	 PyErr_NoMemory

; 2661 :         goto error;

  000b1	eb 3c		 jmp	 SHORT $LN4@cwr_new
$LN10@cwr_new:

; 2662 :     }
; 2663 : 
; 2664 :     for (i=0 ; i<r ; i++)

  000b3	48 8b c7	 mov	 rax, rdi
  000b6	48 39 44 24 78	 cmp	 QWORD PTR r$[rsp], rax
  000bb	7e 11		 jle	 SHORT $LN7@cwr_new
  000bd	0f 1f 00	 npad	 3
$LL9@cwr_new:

; 2665 :         indices[i] = 0;

  000c0	48 89 3c c6	 mov	 QWORD PTR [rsi+rax*8], rdi
  000c4	48 ff c0	 inc	 rax
  000c7	48 3b 44 24 78	 cmp	 rax, QWORD PTR r$[rsp]
  000cc	7c f2		 jl	 SHORT $LL9@cwr_new
$LN7@cwr_new:

; 2666 : 
; 2667 :     /* create cwrobject structure */
; 2668 :     co = (cwrobject *)type->tp_alloc(type, 0);

  000ce	33 d2		 xor	 edx, edx
  000d0	49 8b cc	 mov	 rcx, r12
  000d3	41 ff 94 24 88
	01 00 00	 call	 QWORD PTR [r12+392]
  000db	4c 8b d8	 mov	 r11, rax

; 2669 :     if (co == NULL)

  000de	48 85 c0	 test	 rax, rax
  000e1	0f 85 86 00 00
	00		 jne	 $LN6@cwr_new

; 2679 : 
; 2680 : error:
; 2681 :     if (indices != NULL)
; 2682 :         PyMem_Free(indices);

  000e7	48 8b ce	 mov	 rcx, rsi
$error$22571:
  000ea	e8 00 00 00 00	 call	 PyMem_Free
$LN4@cwr_new:

; 2683 :     Py_XDECREF(pool);

  000ef	e8 00 00 00 00	 call	 _Py_PXCTX
  000f4	85 c0		 test	 eax, eax
  000f6	75 46		 jne	 SHORT $LN3@cwr_new
  000f8	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000fc	a8 20		 test	 al, 32			; 00000020H
  000fe	75 63		 jne	 SHORT $LN22@cwr_new
  00100	84 c0		 test	 al, al
  00102	78 5f		 js	 SHORT $LN22@cwr_new
  00104	a8 02		 test	 al, 2
  00106	75 36		 jne	 SHORT $LN3@cwr_new
  00108	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0010c	75 30		 jne	 SHORT $LN3@cwr_new
  0010e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00115	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0011c	4c 8b cb	 mov	 r9, rbx
  0011f	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00125	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0012d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00132	48 8b cb	 mov	 rcx, rbx
  00135	85 c0		 test	 eax, eax
  00137	74 1e		 je	 SHORT $LN27@cwr_new
  00139	e8 00 00 00 00	 call	 _Px_Dealloc
$LN3@cwr_new:

; 2684 :     return NULL;

  0013e	33 c0		 xor	 eax, eax
$LN33@cwr_new:
  00140	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  00145	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  0014a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]

; 2685 : }

  0014f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00153	41 5c		 pop	 r12
  00155	5f		 pop	 rdi
  00156	c3		 ret	 0

; 2683 :     Py_XDECREF(pool);

$LN27@cwr_new:
  00157	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0015b	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00161	eb db		 jmp	 SHORT $LN3@cwr_new
$LN22@cwr_new:
  00163	48 8b cb	 mov	 rcx, rbx
  00166	e8 00 00 00 00	 call	 Px_DecRef
  0016b	eb d1		 jmp	 SHORT $LN3@cwr_new
$LN6@cwr_new:

; 2670 :         goto error;
; 2671 : 
; 2672 :     co->pool = pool;

  0016d	48 89 58 60	 mov	 QWORD PTR [rax+96], rbx

; 2673 :     co->indices = indices;

  00171	48 89 70 68	 mov	 QWORD PTR [rax+104], rsi

; 2674 :     co->result = NULL;

  00175	48 89 78 70	 mov	 QWORD PTR [rax+112], rdi

; 2675 :     co->r = r;

  00179	48 8b 44 24 78	 mov	 rax, QWORD PTR r$[rsp]
  0017e	49 89 43 78	 mov	 QWORD PTR [r11+120], rax

; 2676 :     co->stopped = !n && r;

  00182	48 85 ed	 test	 rbp, rbp
  00185	75 0c		 jne	 SHORT $LN16@cwr_new
  00187	48 39 7c 24 78	 cmp	 QWORD PTR r$[rsp], rdi
  0018c	74 05		 je	 SHORT $LN16@cwr_new
  0018e	bf 01 00 00 00	 mov	 edi, 1
$LN16@cwr_new:
  00193	41 89 bb 80 00
	00 00		 mov	 DWORD PTR [r11+128], edi

; 2677 : 
; 2678 :     return (PyObject *)co;

  0019a	49 8b c3	 mov	 rax, r11
  0019d	eb a1		 jmp	 SHORT $LN33@cwr_new
cwr_new	ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$cwr_dealloc DD imagerel cwr_dealloc
	DD	imagerel cwr_dealloc+276
	DD	imagerel $unwind$cwr_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cwr_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT cwr_dealloc
_TEXT	SEGMENT
co$ = 64
cwr_dealloc PROC					; COMDAT

; 2689 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 2690 :     PyObject_GC_UnTrack(co);

  0000d	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 2691 :     Py_XDECREF(co->pool);

  00012	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  00016	48 85 db	 test	 rbx, rbx
  00019	74 65		 je	 SHORT $LN8@cwr_deallo
  0001b	e8 00 00 00 00	 call	 _Py_PXCTX
  00020	85 c0		 test	 eax, eax
  00022	75 5c		 jne	 SHORT $LN8@cwr_deallo
  00024	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00028	a8 20		 test	 al, 32			; 00000020H
  0002a	75 4c		 jne	 SHORT $LN16@cwr_deallo
  0002c	84 c0		 test	 al, al
  0002e	78 48		 js	 SHORT $LN16@cwr_deallo
  00030	a8 02		 test	 al, 2
  00032	75 4c		 jne	 SHORT $LN8@cwr_deallo
  00034	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00038	75 46		 jne	 SHORT $LN8@cwr_deallo
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00048	4c 8b cb	 mov	 r9, rbx
  0004b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00051	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00059	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005e	48 8b cb	 mov	 rcx, rbx
  00061	85 c0		 test	 eax, eax
  00063	74 07		 je	 SHORT $LN21@cwr_deallo
  00065	e8 00 00 00 00	 call	 _Px_Dealloc
  0006a	eb 14		 jmp	 SHORT $LN8@cwr_deallo
$LN21@cwr_deallo:
  0006c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00070	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00076	eb 08		 jmp	 SHORT $LN8@cwr_deallo
$LN16@cwr_deallo:
  00078	48 8b cb	 mov	 rcx, rbx
  0007b	e8 00 00 00 00	 call	 Px_DecRef
$LN8@cwr_deallo:

; 2692 :     Py_XDECREF(co->result);

  00080	48 8b 5f 70	 mov	 rbx, QWORD PTR [rdi+112]
  00084	48 85 db	 test	 rbx, rbx
  00087	74 65		 je	 SHORT $LN4@cwr_deallo
  00089	e8 00 00 00 00	 call	 _Py_PXCTX
  0008e	85 c0		 test	 eax, eax
  00090	75 5c		 jne	 SHORT $LN4@cwr_deallo
  00092	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00096	a8 20		 test	 al, 32			; 00000020H
  00098	75 4c		 jne	 SHORT $LN27@cwr_deallo
  0009a	84 c0		 test	 al, al
  0009c	78 48		 js	 SHORT $LN27@cwr_deallo
  0009e	a8 02		 test	 al, 2
  000a0	75 4c		 jne	 SHORT $LN4@cwr_deallo
  000a2	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000a6	75 46		 jne	 SHORT $LN4@cwr_deallo
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000b6	4c 8b cb	 mov	 r9, rbx
  000b9	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000bf	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cc	48 8b cb	 mov	 rcx, rbx
  000cf	85 c0		 test	 eax, eax
  000d1	74 07		 je	 SHORT $LN32@cwr_deallo
  000d3	e8 00 00 00 00	 call	 _Px_Dealloc
  000d8	eb 14		 jmp	 SHORT $LN4@cwr_deallo
$LN32@cwr_deallo:
  000da	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000de	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000e4	eb 08		 jmp	 SHORT $LN4@cwr_deallo
$LN27@cwr_deallo:
  000e6	48 8b cb	 mov	 rcx, rbx
  000e9	e8 00 00 00 00	 call	 Px_DecRef
$LN4@cwr_deallo:

; 2693 :     if (co->indices != NULL)

  000ee	48 8b 4f 68	 mov	 rcx, QWORD PTR [rdi+104]
  000f2	48 85 c9	 test	 rcx, rcx
  000f5	74 05		 je	 SHORT $LN1@cwr_deallo

; 2694 :         PyMem_Free(co->indices);

  000f7	e8 00 00 00 00	 call	 PyMem_Free
$LN1@cwr_deallo:

; 2695 :     Py_TYPE(co)->tp_free(co);

  000fc	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00100	48 8b cf	 mov	 rcx, rdi

; 2696 : }

  00103	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00108	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0010c	5f		 pop	 rdi
  0010d	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
cwr_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@JAGICFBJ@cwr_traverse?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$cwr_traverse DD imagerel cwr_traverse
	DD	imagerel cwr_traverse+152
	DD	imagerel $unwind$cwr_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cwr_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0N@JAGICFBJ@cwr_traverse?$AA@
CONST	SEGMENT
??_C@_0N@JAGICFBJ@cwr_traverse?$AA@ DB 'cwr_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT cwr_traverse
_TEXT	SEGMENT
co$ = 48
visit$ = 56
arg$ = 64
cwr_traverse PROC					; COMDAT

; 2700 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 2701 :     Py_VISIT(co->pool);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN9@cwr_traver
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@JAGICFBJ@cwr_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 8d 0a 00
	00		 mov	 r8d, 2701		; 00000a8dH
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@cwr_traver:
  0003d	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN11@cwr_traver
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 39		 jne	 SHORT $LN13@cwr_traver
$LN11@cwr_traver:

; 2702 :     Py_VISIT(co->result);

  0004f	e8 00 00 00 00	 call	 _Py_PXCTX
  00054	85 c0		 test	 eax, eax
  00056	74 1c		 je	 SHORT $LN3@cwr_traver
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@JAGICFBJ@cwr_traverse?$AA@
  00066	45 33 c9	 xor	 r9d, r9d
  00069	41 b8 8e 0a 00
	00		 mov	 r8d, 2702		; 00000a8eH
  0006f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@cwr_traver:
  00074	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00078	48 85 c9	 test	 rcx, rcx
  0007b	74 09		 je	 SHORT $LN5@cwr_traver
  0007d	48 8b d7	 mov	 rdx, rdi
  00080	ff d6		 call	 rsi
  00082	85 c0		 test	 eax, eax
  00084	75 02		 jne	 SHORT $LN13@cwr_traver
$LN5@cwr_traver:

; 2703 :     return 0;

  00086	33 c0		 xor	 eax, eax
$LN13@cwr_traver:

; 2704 : }

  00088	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00092	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00096	5f		 pop	 rdi
  00097	c3		 ret	 0
cwr_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$cwr_next DD imagerel cwr_next
	DD	imagerel cwr_next+72
	DD	imagerel $unwind$cwr_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$cwr_next DD imagerel cwr_next+72
	DD	imagerel cwr_next+255
	DD	imagerel $chain$2$cwr_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$cwr_next DD imagerel cwr_next+255
	DD	imagerel cwr_next+358
	DD	imagerel $chain$3$cwr_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$cwr_next DD imagerel cwr_next+358
	DD	imagerel cwr_next+442
	DD	imagerel $chain$4$cwr_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$cwr_next DD imagerel cwr_next+442
	DD	imagerel cwr_next+741
	DD	imagerel $chain$6$cwr_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$cwr_next DD 060021H
	DD	06f400H
	DD	08c400H
	DD	0117400H
	DD	imagerel cwr_next
	DD	imagerel cwr_next+72
	DD	imagerel $unwind$cwr_next
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$cwr_next DD 021H
	DD	imagerel cwr_next+72
	DD	imagerel cwr_next+255
	DD	imagerel $chain$2$cwr_next
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$cwr_next DD 020521H
	DD	07e405H
	DD	imagerel cwr_next+72
	DD	imagerel cwr_next+255
	DD	imagerel $chain$2$cwr_next
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$cwr_next DD 061221H
	DD	06f412H
	DD	08c40dH
	DD	0117408H
	DD	imagerel cwr_next
	DD	imagerel cwr_next+72
	DD	imagerel $unwind$cwr_next
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cwr_next DD 050a01H
	DD	0d006820aH
	DD	050036004H
	DD	03002H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT cwr_next
_TEXT	SEGMENT
indices$1$ = 112
co$ = 112
pool$1$ = 120
n$1$ = 128
cwr_next PROC						; COMDAT

; 2708 : {

  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	56		 push	 rsi
  00004	41 55		 push	 r13
  00006	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2709 :     PyObject *elem;
; 2710 :     PyObject *oldelem;
; 2711 :     PyObject *pool = co->pool;

  0000a	48 8b 59 60	 mov	 rbx, QWORD PTR [rcx+96]

; 2712 :     Py_ssize_t *indices = co->indices;

  0000e	48 8b 51 68	 mov	 rdx, QWORD PTR [rcx+104]

; 2713 :     PyObject *result = co->result;

  00012	4c 8b 69 70	 mov	 r13, QWORD PTR [rcx+112]
  00016	48 8b e9	 mov	 rbp, rcx

; 2714 :     Py_ssize_t n = PyTuple_GET_SIZE(pool);

  00019	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  0001d	48 89 5c 24 78	 mov	 QWORD PTR pool$1$[rsp], rbx

; 2715 :     Py_ssize_t r = co->r;
; 2716 :     Py_ssize_t i, index;
; 2717 : 
; 2718 :     if (co->stopped)

  00022	83 bd 80 00 00
	00 00		 cmp	 DWORD PTR [rbp+128], 0
  00029	48 8b 75 78	 mov	 rsi, QWORD PTR [rbp+120]
  0002d	48 89 8c 24 80
	00 00 00	 mov	 QWORD PTR n$1$[rsp], rcx
  00035	48 89 54 24 70	 mov	 QWORD PTR indices$1$[rsp], rdx
  0003a	74 0c		 je	 SHORT $LN19@cwr_next

; 2719 :         return NULL;

  0003c	33 c0		 xor	 eax, eax

; 2782 : }

  0003e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00042	41 5d		 pop	 r13
  00044	5e		 pop	 rsi
  00045	5d		 pop	 rbp
  00046	5b		 pop	 rbx
  00047	c3		 ret	 0
$LN19@cwr_next:
  00048	48 89 bc 24 88
	00 00 00	 mov	 QWORD PTR [rsp+136], rdi
  00050	4c 89 64 24 40	 mov	 QWORD PTR [rsp+64], r12
  00055	4c 89 7c 24 30	 mov	 QWORD PTR [rsp+48], r15

; 2720 : 
; 2721 :     if (result == NULL) {

  0005a	4d 85 ed	 test	 r13, r13
  0005d	75 75		 jne	 SHORT $LN18@cwr_next

; 2722 :         /* On the first pass, initialize result tuple with pool[0] */
; 2723 :         result = PyTuple_New(r);

  0005f	48 8b ce	 mov	 rcx, rsi
  00062	e8 00 00 00 00	 call	 PyTuple_New
  00067	4c 8b e8	 mov	 r13, rax

; 2724 :         if (result == NULL)

  0006a	48 85 c0	 test	 rax, rax
  0006d	0f 84 1f 01 00
	00		 je	 $empty$22655

; 2725 :             goto empty;
; 2726 :         co->result = result;

  00073	48 89 45 70	 mov	 QWORD PTR [rbp+112], rax

; 2727 :         elem = PyTuple_GET_ITEM(pool, 0);

  00077	48 8b 5b 70	 mov	 rbx, QWORD PTR [rbx+112]

; 2728 :         for (i=0; i<r ; i++) {

  0007b	48 85 f6	 test	 rsi, rsi
  0007e	0f 8e 1d 02 00
	00		 jle	 $LN1@cwr_next

; 2725 :             goto empty;
; 2726 :         co->result = result;

  00084	48 8d 78 70	 lea	 rdi, QWORD PTR [rax+112]
$LL16@cwr_next:

; 2729 :             assert(indices[i] == 0);
; 2730 :             Py_INCREF(elem);

  00088	e8 00 00 00 00	 call	 _Py_PXCTX
  0008d	85 c0		 test	 eax, eax
  0008f	75 32		 jne	 SHORT $LN23@cwr_next
  00091	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0009f	4c 8b cb	 mov	 r9, rbx
  000a2	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000a8	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000b0	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b5	85 c0		 test	 eax, eax
  000b7	75 06		 jne	 SHORT $LN22@cwr_next
  000b9	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000bd	74 04		 je	 SHORT $LN23@cwr_next
$LN22@cwr_next:
  000bf	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN23@cwr_next:

; 2731 :             PyTuple_SET_ITEM(result, i, elem);

  000c3	48 89 1f	 mov	 QWORD PTR [rdi], rbx
  000c6	48 83 c7 08	 add	 rdi, 8
  000ca	48 ff ce	 dec	 rsi
  000cd	75 b9		 jne	 SHORT $LL16@cwr_next

; 2732 :         }
; 2733 :     } else {

  000cf	e9 cd 01 00 00	 jmp	 $LN1@cwr_next
$LN18@cwr_next:

; 2734 :         /* Copy the previous result tuple or re-use it if available */
; 2735 :         if (Py_REFCNT(result) > 1) {

  000d4	49 83 7d 50 01	 cmp	 QWORD PTR [r13+80], 1
  000d9	0f 8e 9c 00 00
	00		 jle	 $LN12@cwr_next

; 2736 :             PyObject *old_result = result;
; 2737 :             result = PyTuple_New(r);

  000df	48 8b ce	 mov	 rcx, rsi
  000e2	4d 8b fd	 mov	 r15, r13
  000e5	e8 00 00 00 00	 call	 PyTuple_New
  000ea	4c 8b e8	 mov	 r13, rax

; 2738 :             if (result == NULL)

  000ed	48 85 c0	 test	 rax, rax
  000f0	0f 84 9c 00 00
	00		 je	 $empty$22655

; 2739 :                 goto empty;
; 2740 :             co->result = result;

  000f6	48 89 45 70	 mov	 QWORD PTR [rbp+112], rax

; 2741 :             for (i=0; i<r ; i++) {

  000fa	48 85 f6	 test	 rsi, rsi
  000fd	7e 67		 jle	 SHORT $LN8@cwr_next
  000ff	4c 89 74 24 38	 mov	 QWORD PTR [rsp+56], r14
  00104	4d 8b f7	 mov	 r14, r15
  00107	48 8d 78 70	 lea	 rdi, QWORD PTR [rax+112]
  0010b	4c 2b f0	 sub	 r14, rax
  0010e	4c 8b e6	 mov	 r12, rsi
$LL10@cwr_next:

; 2742 :                 elem = PyTuple_GET_ITEM(old_result, i);

  00111	49 8b 1c 3e	 mov	 rbx, QWORD PTR [r14+rdi]

; 2743 :                 Py_INCREF(elem);

  00115	e8 00 00 00 00	 call	 _Py_PXCTX
  0011a	85 c0		 test	 eax, eax
  0011c	75 32		 jne	 SHORT $LN27@cwr_next
  0011e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00125	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0012c	4c 8b cb	 mov	 r9, rbx
  0012f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00135	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0013d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00142	85 c0		 test	 eax, eax
  00144	75 06		 jne	 SHORT $LN26@cwr_next
  00146	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0014a	74 04		 je	 SHORT $LN27@cwr_next
$LN26@cwr_next:
  0014c	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN27@cwr_next:

; 2744 :                 PyTuple_SET_ITEM(result, i, elem);

  00150	48 89 1f	 mov	 QWORD PTR [rdi], rbx
  00153	48 83 c7 08	 add	 rdi, 8
  00157	49 ff cc	 dec	 r12
  0015a	75 b5		 jne	 SHORT $LL10@cwr_next
  0015c	48 8b 5c 24 78	 mov	 rbx, QWORD PTR pool$1$[rsp]
  00161	4c 8b 74 24 38	 mov	 r14, QWORD PTR [rsp+56]
$LN8@cwr_next:

; 2745 :             }
; 2746 :             Py_DECREF(old_result);

  00166	49 8b cf	 mov	 rcx, r15
  00169	e8 00 00 00 00	 call	 _Py_DecRef
  0016e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR n$1$[rsp]
  00176	48 8b 54 24 70	 mov	 rdx, QWORD PTR indices$1$[rsp]
$LN12@cwr_next:

; 2747 :         }
; 2748 :         /* Now, we've got the only copy so we can update it in-place CPython's
; 2749 :            empty tuple is a singleton and cached in PyTuple's freelist. */
; 2750 :         assert(r == 0 || Py_REFCNT(result) == 1);
; 2751 : 
; 2752 :        /* Scan indices right-to-left until finding one that is not
; 2753 :         * at its maximum (n-1). */
; 2754 :         for (i=r-1 ; i >= 0 && indices[i] == n-1; i--)

  0017b	48 8d 46 ff	 lea	 rax, QWORD PTR [rsi-1]
  0017f	48 85 c0	 test	 rax, rax
  00182	78 0e		 js	 SHORT $empty$22655
  00184	48 ff c9	 dec	 rcx
$LL7@cwr_next:
  00187	48 39 0c c2	 cmp	 QWORD PTR [rdx+rax*8], rcx
  0018b	75 2d		 jne	 SHORT $LN5@cwr_next
  0018d	48 ff c8	 dec	 rax
  00190	79 f5		 jns	 SHORT $LL7@cwr_next
$empty$22655:

; 2778 : 
; 2779 : empty:
; 2780 :     co->stopped = 1;

  00192	c7 85 80 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rbp+128], 1

; 2781 :     return NULL;

  0019c	33 c0		 xor	 eax, eax
$LN59@cwr_next:
  0019e	4c 8b 64 24 40	 mov	 r12, QWORD PTR [rsp+64]
  001a3	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR [rsp+136]
  001ab	4c 8b 7c 24 30	 mov	 r15, QWORD PTR [rsp+48]

; 2782 : }

  001b0	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001b4	41 5d		 pop	 r13
  001b6	5e		 pop	 rsi
  001b7	5d		 pop	 rbp
  001b8	5b		 pop	 rbx
  001b9	c3		 ret	 0
$LN5@cwr_next:

; 2755 :             ;
; 2756 : 
; 2757 :         /* If i is negative, then the indices are all at
; 2758 :            their maximum value and we're done. */
; 2759 :         if (i < 0)

  001ba	48 85 c0	 test	 rax, rax
  001bd	78 d3		 js	 SHORT $empty$22655

; 2760 :             goto empty;
; 2761 : 
; 2762 :         /* Increment the current index which we know is not at its
; 2763 :            maximum.  Then set all to the right to the same value. */
; 2764 :         index = indices[i] + 1;

  001bf	4c 8b 24 c2	 mov	 r12, QWORD PTR [rdx+rax*8]

; 2765 :         assert(index < n);
; 2766 :         elem = PyTuple_GET_ITEM(pool, index);

  001c3	4a 8b 6c e3 78	 mov	 rbp, QWORD PTR [rbx+r12*8+120]
  001c8	49 ff c4	 inc	 r12

; 2767 :         for ( ; i<r ; i++) {

  001cb	48 3b c6	 cmp	 rax, rsi
  001ce	0f 8d cd 00 00
	00		 jge	 $LN1@cwr_next

; 2768 :             indices[i] = index;

  001d4	49 2b d5	 sub	 rdx, r13
  001d7	49 8d 7c c5 70	 lea	 rdi, QWORD PTR [r13+rax*8+112]
  001dc	48 2b f0	 sub	 rsi, rax
  001df	48 89 54 24 70	 mov	 QWORD PTR indices$1$[rsp], rdx
$LL3@cwr_next:
  001e4	4c 89 64 3a 90	 mov	 QWORD PTR [rdx+rdi-112], r12

; 2769 :             Py_INCREF(elem);

  001e9	e8 00 00 00 00	 call	 _Py_PXCTX
  001ee	85 c0		 test	 eax, eax
  001f0	75 32		 jne	 SHORT $LN31@cwr_next
  001f2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00200	4c 8b cd	 mov	 r9, rbp
  00203	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00209	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00211	e8 00 00 00 00	 call	 _PyParallel_Guard
  00216	85 c0		 test	 eax, eax
  00218	75 06		 jne	 SHORT $LN30@cwr_next
  0021a	f6 45 20 20	 test	 BYTE PTR [rbp+32], 32	; 00000020H
  0021e	74 04		 je	 SHORT $LN31@cwr_next
$LN30@cwr_next:
  00220	48 ff 45 50	 inc	 QWORD PTR [rbp+80]
$LN31@cwr_next:

; 2770 :             oldelem = PyTuple_GET_ITEM(result, i);

  00224	48 8b 1f	 mov	 rbx, QWORD PTR [rdi]

; 2771 :             PyTuple_SET_ITEM(result, i, elem);

  00227	48 89 2f	 mov	 QWORD PTR [rdi], rbp

; 2772 :             Py_DECREF(oldelem);

  0022a	e8 00 00 00 00	 call	 _Py_PXCTX
  0022f	85 c0		 test	 eax, eax
  00231	75 5c		 jne	 SHORT $LN2@cwr_next
  00233	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00237	a8 20		 test	 al, 32			; 00000020H
  00239	75 4c		 jne	 SHORT $LN38@cwr_next
  0023b	84 c0		 test	 al, al
  0023d	78 48		 js	 SHORT $LN38@cwr_next
  0023f	a8 02		 test	 al, 2
  00241	75 4c		 jne	 SHORT $LN2@cwr_next
  00243	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00247	75 46		 jne	 SHORT $LN2@cwr_next
  00249	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00250	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00257	4c 8b cb	 mov	 r9, rbx
  0025a	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00260	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00268	e8 00 00 00 00	 call	 _PyParallel_Guard
  0026d	48 8b cb	 mov	 rcx, rbx
  00270	85 c0		 test	 eax, eax
  00272	74 07		 je	 SHORT $LN43@cwr_next
  00274	e8 00 00 00 00	 call	 _Px_Dealloc
  00279	eb 14		 jmp	 SHORT $LN2@cwr_next
$LN43@cwr_next:
  0027b	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0027f	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00285	eb 08		 jmp	 SHORT $LN2@cwr_next
$LN38@cwr_next:
  00287	48 8b cb	 mov	 rcx, rbx
  0028a	e8 00 00 00 00	 call	 Px_DecRef
$LN2@cwr_next:

; 2767 :         for ( ; i<r ; i++) {

  0028f	48 8b 54 24 70	 mov	 rdx, QWORD PTR indices$1$[rsp]
  00294	48 83 c7 08	 add	 rdi, 8
  00298	48 ff ce	 dec	 rsi
  0029b	0f 85 43 ff ff
	ff		 jne	 $LL3@cwr_next
$LN1@cwr_next:

; 2773 :         }
; 2774 :     }
; 2775 : 
; 2776 :     Py_INCREF(result);

  002a1	e8 00 00 00 00	 call	 _Py_PXCTX
  002a6	85 c0		 test	 eax, eax
  002a8	75 33		 jne	 SHORT $LN46@cwr_next
  002aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  002b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  002b8	4d 8b cd	 mov	 r9, r13
  002bb	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  002c1	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  002c9	e8 00 00 00 00	 call	 _PyParallel_Guard
  002ce	85 c0		 test	 eax, eax
  002d0	75 07		 jne	 SHORT $LN45@cwr_next
  002d2	41 f6 45 20 20	 test	 BYTE PTR [r13+32], 32	; 00000020H
  002d7	74 04		 je	 SHORT $LN46@cwr_next
$LN45@cwr_next:
  002d9	49 ff 45 50	 inc	 QWORD PTR [r13+80]
$LN46@cwr_next:

; 2777 :     return result;

  002dd	49 8b c5	 mov	 rax, r13
  002e0	e9 b9 fe ff ff	 jmp	 $LN59@cwr_next
cwr_next ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cwr_reduce DD imagerel cwr_reduce
	DD	imagerel cwr_reduce+83
	DD	imagerel $unwind$cwr_reduce
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$cwr_reduce DD imagerel cwr_reduce+83
	DD	imagerel cwr_reduce+112
	DD	imagerel $chain$0$cwr_reduce
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$cwr_reduce DD imagerel cwr_reduce+112
	DD	imagerel cwr_reduce+205
	DD	imagerel $chain$3$cwr_reduce
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$cwr_reduce DD imagerel cwr_reduce+205
	DD	imagerel cwr_reduce+231
	DD	imagerel $chain$5$cwr_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$cwr_reduce DD 040021H
	DD	097400H
	DD	086400H
	DD	imagerel cwr_reduce
	DD	imagerel cwr_reduce+83
	DD	imagerel $unwind$cwr_reduce
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$cwr_reduce DD 040521H
	DD	097405H
	DD	086400H
	DD	imagerel cwr_reduce
	DD	imagerel cwr_reduce+83
	DD	imagerel $unwind$cwr_reduce
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$cwr_reduce DD 020521H
	DD	086405H
	DD	imagerel cwr_reduce
	DD	imagerel cwr_reduce+83
	DD	imagerel $unwind$cwr_reduce
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cwr_reduce DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT cwr_reduce
_TEXT	SEGMENT
lz$ = 64
cwr_reduce PROC						; COMDAT

; 2786 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 2787 :     if (lz->result == NULL) {

  00006	48 83 79 70 00	 cmp	 QWORD PTR [rcx+112], 0
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	75 1d		 jne	 SHORT $LN9@cwr_reduce

; 2788 :         return Py_BuildValue("O(On)", Py_TYPE(lz), lz->pool, lz->r);

  00010	4c 8b 49 78	 mov	 r9, QWORD PTR [rcx+120]
  00014	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]
  00018	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05IEPKLDIK@O?$CIOn?$CJ?$AA@

; 2810 :     }
; 2811 : }

  00023	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00027	5b		 pop	 rbx
  00028	e9 00 00 00 00	 jmp	 Py_BuildValue
$LN9@cwr_reduce:

; 2789 :     } else if (lz->stopped) {

  0002d	83 b9 80 00 00
	00 00		 cmp	 DWORD PTR [rcx+128], 0
  00034	74 19		 je	 SHORT $LN7@cwr_reduce

; 2790 :         return Py_BuildValue("O(()n)", Py_TYPE(lz), lz->r);

  00036	4c 8b 41 78	 mov	 r8, QWORD PTR [rcx+120]
  0003a	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06BBKLFPPK@O?$CI?$CI?$CJn?$CJ?$AA@

; 2810 :     }
; 2811 : }

  00045	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00049	5b		 pop	 rbx
  0004a	e9 00 00 00 00	 jmp	 Py_BuildValue
$LN7@cwr_reduce:

; 2791 :     } else {
; 2792 :         PyObject *indices;
; 2793 :         Py_ssize_t i;
; 2794 : 
; 2795 :         /* we must pickle the indices and use them for setstate */
; 2796 :         indices = PyTuple_New(lz->r);

  0004f	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  00053	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  00058	e8 00 00 00 00	 call	 PyTuple_New
  0005d	48 8b f0	 mov	 rsi, rax

; 2797 :         if (!indices)

  00060	48 85 c0	 test	 rax, rax
  00063	75 0b		 jne	 SHORT $LN5@cwr_reduce
  00065	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]

; 2810 :     }
; 2811 : }

  0006a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0006e	5b		 pop	 rbx
  0006f	c3		 ret	 0
$LN5@cwr_reduce:
  00070	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi

; 2798 :             return NULL;
; 2799 :         for (i=0; i<lz->r; i++)

  00075	33 ff		 xor	 edi, edi
  00077	48 39 7b 78	 cmp	 QWORD PTR [rbx+120], rdi
  0007b	7e 23		 jle	 SHORT $LN2@cwr_reduce
  0007d	0f 1f 00	 npad	 3
$LL4@cwr_reduce:

; 2800 :         {
; 2801 :             PyObject* index = PyLong_FromSsize_t(lz->indices[i]);

  00080	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00084	48 8b 0c f9	 mov	 rcx, QWORD PTR [rcx+rdi*8]
  00088	e8 00 00 00 00	 call	 PyLong_FromSsize_t

; 2802 :             if (!index) {

  0008d	48 85 c0	 test	 rax, rax
  00090	74 3b		 je	 SHORT $LN13@cwr_reduce

; 2805 :             }
; 2806 :             PyTuple_SET_ITEM(indices, i, index);

  00092	48 89 44 fe 70	 mov	 QWORD PTR [rsi+rdi*8+112], rax
  00097	48 ff c7	 inc	 rdi
  0009a	48 3b 7b 78	 cmp	 rdi, QWORD PTR [rbx+120]
  0009e	7c e0		 jl	 SHORT $LL4@cwr_reduce
$LN2@cwr_reduce:

; 2807 :         }
; 2808 : 
; 2809 :         return Py_BuildValue("O(On)N", Py_TYPE(lz), lz->pool, lz->r, indices);

  000a0	4c 8b 4b 78	 mov	 r9, QWORD PTR [rbx+120]
  000a4	4c 8b 43 60	 mov	 r8, QWORD PTR [rbx+96]
  000a8	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06GDBDPCAG@O?$CIOn?$CJN?$AA@
  000b3	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  000b8	e8 00 00 00 00	 call	 Py_BuildValue
  000bd	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  000c2	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]

; 2810 :     }
; 2811 : }

  000c7	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000cb	5b		 pop	 rbx
  000cc	c3		 ret	 0
$LN13@cwr_reduce:

; 2803 :                 Py_DECREF(indices);

  000cd	48 8b ce	 mov	 rcx, rsi
  000d0	e8 00 00 00 00	 call	 _Py_DecRef
  000d5	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  000da	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]

; 2804 :                 return NULL;

  000df	33 c0		 xor	 eax, eax

; 2810 :     }
; 2811 : }

  000e1	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000e5	5b		 pop	 rbx
  000e6	c3		 ret	 0
cwr_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@PNDPACPO@cwr_setstate?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$cwr_setstate DD imagerel cwr_setstate
	DD	imagerel cwr_setstate+54
	DD	imagerel $unwind$cwr_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$cwr_setstate DD imagerel cwr_setstate+54
	DD	imagerel cwr_setstate+182
	DD	imagerel $chain$1$cwr_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$cwr_setstate DD imagerel cwr_setstate+182
	DD	imagerel cwr_setstate+530
	DD	imagerel $chain$3$cwr_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$cwr_setstate DD imagerel cwr_setstate+530
	DD	imagerel cwr_setstate+562
	DD	imagerel $chain$4$cwr_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$cwr_setstate DD 021H
	DD	imagerel cwr_setstate
	DD	imagerel cwr_setstate+54
	DD	imagerel $unwind$cwr_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$cwr_setstate DD 040021H
	DD	095400H
	DD	083400H
	DD	imagerel cwr_setstate
	DD	imagerel cwr_setstate+54
	DD	imagerel $unwind$cwr_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$cwr_setstate DD 040c21H
	DD	09540cH
	DD	083405H
	DD	imagerel cwr_setstate
	DD	imagerel cwr_setstate+54
	DD	imagerel $unwind$cwr_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cwr_setstate DD 040a01H
	DD	0a640aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0N@PNDPACPO@cwr_setstate?$AA@
CONST	SEGMENT
??_C@_0N@PNDPACPO@cwr_setstate?$AA@ DB 'cwr_setstate', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
CONST	ENDS
;	COMDAT cwr_setstate
_TEXT	SEGMENT
lz$ = 64
state$ = 72
cwr_setstate PROC					; COMDAT

; 2815 : {

  00000	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 2816 :     PyObject *result;
; 2817 :     Py_ssize_t n, i;
; 2818 : 
; 2819 :     if (!PyTuple_Check(state) || PyTuple_GET_SIZE(state) != lz->r)

  0000a	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  0000e	48 8b f2	 mov	 rsi, rdx
  00011	48 8b f9	 mov	 rdi, rcx
  00014	f7 80 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rax+256], 67108864 ; 04000000H
  0001e	0f 84 ee 01 00
	00		 je	 $LN16@cwr_setsta
  00024	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  00028	48 39 4a 60	 cmp	 QWORD PTR [rdx+96], rcx
  0002c	0f 85 e0 01 00
	00		 jne	 $LN16@cwr_setsta

; 2822 :         return NULL;
; 2823 :     }
; 2824 : 
; 2825 :     n = PyTuple_GET_SIZE(lz->pool);

  00032	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00036	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx

; 2826 :     for (i=0; i<lz->r; i++)

  0003b	33 db		 xor	 ebx, ebx
  0003d	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp
  00042	48 8b 68 60	 mov	 rbp, QWORD PTR [rax+96]
  00046	48 85 c9	 test	 rcx, rcx
  00049	7e 43		 jle	 SHORT $LN44@cwr_setsta
  0004b	0f 1f 44 00 00	 npad	 5
$LL15@cwr_setsta:

; 2827 :     {
; 2828 :         PyObject* indexObject = PyTuple_GET_ITEM(state, i);
; 2829 :         Py_ssize_t index = PyLong_AsSsize_t(indexObject);

  00050	48 8b 4c de 70	 mov	 rcx, QWORD PTR [rsi+rbx*8+112]
  00055	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  0005a	4c 8b d8	 mov	 r11, rax

; 2830 :         if (index < 0 && PyErr_Occurred())

  0005d	48 85 c0	 test	 rax, rax
  00060	79 0f		 jns	 SHORT $LN11@cwr_setsta
  00062	e8 00 00 00 00	 call	 PyErr_Occurred
  00067	48 85 c0	 test	 rax, rax
  0006a	75 33		 jne	 SHORT $LN41@cwr_setsta

; 2831 :             return NULL; /* not an integer */
; 2832 :         /* clamp the index */
; 2833 :         if (index < 0)
; 2834 :             index = 0;

  0006c	45 33 db	 xor	 r11d, r11d
  0006f	eb 0b		 jmp	 SHORT $LN9@cwr_setsta
$LN11@cwr_setsta:

; 2835 :         else if (index > n-1)

  00071	48 8d 45 ff	 lea	 rax, QWORD PTR [rbp-1]
  00075	4c 3b d8	 cmp	 r11, rax
  00078	4c 0f 4f d8	 cmovg	 r11, rax
$LN9@cwr_setsta:

; 2836 :             index = n-1;
; 2837 :         lz->indices[i] = index;

  0007c	48 8b 47 68	 mov	 rax, QWORD PTR [rdi+104]
  00080	48 ff c3	 inc	 rbx
  00083	4c 89 5c d8 f8	 mov	 QWORD PTR [rax+rbx*8-8], r11
  00088	48 3b 5f 78	 cmp	 rbx, QWORD PTR [rdi+120]
  0008c	7c c2		 jl	 SHORT $LL15@cwr_setsta
$LN44@cwr_setsta:

; 2838 :     }
; 2839 :     result = PyTuple_New(lz->r);

  0008e	48 8b 4f 78	 mov	 rcx, QWORD PTR [rdi+120]
  00092	e8 00 00 00 00	 call	 PyTuple_New
  00097	48 8b e8	 mov	 rbp, rax

; 2840 :     if (result == NULL)

  0009a	48 85 c0	 test	 rax, rax
  0009d	75 17		 jne	 SHORT $LN8@cwr_setsta
$LN41@cwr_setsta:

; 2841 :         return NULL;

  0009f	33 c0		 xor	 eax, eax
$LN46@cwr_setsta:
  000a1	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000a6	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]

; 2850 : }

  000ab	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  000b0	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b4	5f		 pop	 rdi
  000b5	c3		 ret	 0
$LN8@cwr_setsta:

; 2842 :     for (i=0; i<lz->r; i++) {

  000b6	33 f6		 xor	 esi, esi
  000b8	48 39 77 78	 cmp	 QWORD PTR [rdi+120], rsi
  000bc	7e 5c		 jle	 SHORT $LN4@cwr_setsta
  000be	66 90		 npad	 2
$LL7@cwr_setsta:

; 2843 :         PyObject *element = PyTuple_GET_ITEM(lz->pool, lz->indices[i]);

  000c0	48 8b 47 68	 mov	 rax, QWORD PTR [rdi+104]
  000c4	48 8b 0c f0	 mov	 rcx, QWORD PTR [rax+rsi*8]
  000c8	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  000cc	48 8b 5c c8 70	 mov	 rbx, QWORD PTR [rax+rcx*8+112]

; 2844 :         Py_INCREF(element);

  000d1	e8 00 00 00 00	 call	 _Py_PXCTX
  000d6	85 c0		 test	 eax, eax
  000d8	75 32		 jne	 SHORT $LN21@cwr_setsta
  000da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000e8	4c 8b cb	 mov	 r9, rbx
  000eb	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000f1	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000f9	e8 00 00 00 00	 call	 _PyParallel_Guard
  000fe	85 c0		 test	 eax, eax
  00100	75 06		 jne	 SHORT $LN20@cwr_setsta
  00102	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00106	74 04		 je	 SHORT $LN21@cwr_setsta
$LN20@cwr_setsta:
  00108	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN21@cwr_setsta:

; 2845 :         PyTuple_SET_ITEM(result, i, element);

  0010c	48 89 5c f5 70	 mov	 QWORD PTR [rbp+rsi*8+112], rbx
  00111	48 ff c6	 inc	 rsi
  00114	48 3b 77 78	 cmp	 rsi, QWORD PTR [rdi+120]
  00118	7c a6		 jl	 SHORT $LL7@cwr_setsta
$LN4@cwr_setsta:

; 2846 :     }
; 2847 :     Py_CLEAR(lz->result);

  0011a	4c 8b 4f 70	 mov	 r9, QWORD PTR [rdi+112]
  0011e	4d 85 c9	 test	 r9, r9
  00121	0f 84 96 00 00
	00		 je	 $LN3@cwr_setsta
  00127	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  0012e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PNDPACPO@cwr_setstate?$AA@
  00135	41 b8 1f 0b 00
	00		 mov	 r8d, 2847		; 00000b1fH
  0013b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00143	e8 00 00 00 00	 call	 _PyParallel_Guard
  00148	85 c0		 test	 eax, eax
  0014a	75 71		 jne	 SHORT $LN3@cwr_setsta
  0014c	48 8b 5f 70	 mov	 rbx, QWORD PTR [rdi+112]
  00150	48 c7 47 70 00
	00 00 00	 mov	 QWORD PTR [rdi+112], 0
  00158	e8 00 00 00 00	 call	 _Py_PXCTX
  0015d	85 c0		 test	 eax, eax
  0015f	75 5c		 jne	 SHORT $LN3@cwr_setsta
  00161	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00165	a8 20		 test	 al, 32			; 00000020H
  00167	75 4c		 jne	 SHORT $LN28@cwr_setsta
  00169	84 c0		 test	 al, al
  0016b	78 48		 js	 SHORT $LN28@cwr_setsta
  0016d	a8 02		 test	 al, 2
  0016f	75 4c		 jne	 SHORT $LN3@cwr_setsta
  00171	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00175	75 46		 jne	 SHORT $LN3@cwr_setsta
  00177	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0017e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00185	4c 8b cb	 mov	 r9, rbx
  00188	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0018e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00196	e8 00 00 00 00	 call	 _PyParallel_Guard
  0019b	48 8b cb	 mov	 rcx, rbx
  0019e	85 c0		 test	 eax, eax
  001a0	74 07		 je	 SHORT $LN33@cwr_setsta
  001a2	e8 00 00 00 00	 call	 _Px_Dealloc
  001a7	eb 14		 jmp	 SHORT $LN3@cwr_setsta
$LN33@cwr_setsta:
  001a9	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001ad	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001b3	eb 08		 jmp	 SHORT $LN3@cwr_setsta
$LN28@cwr_setsta:
  001b5	48 8b cb	 mov	 rcx, rbx
  001b8	e8 00 00 00 00	 call	 Px_DecRef
$LN3@cwr_setsta:

; 2848 :     lz->result = result;

  001bd	48 89 6f 70	 mov	 QWORD PTR [rdi+112], rbp

; 2849 :     Py_RETURN_NONE;

  001c1	e8 00 00 00 00	 call	 _Py_PXCTX
  001c6	85 c0		 test	 eax, eax
  001c8	75 3c		 jne	 SHORT $LN36@cwr_setsta
  001ca	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  001d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  001df	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  001e5	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  001ed	e8 00 00 00 00	 call	 _PyParallel_Guard
  001f2	85 c0		 test	 eax, eax
  001f4	75 09		 jne	 SHORT $LN35@cwr_setsta
  001f6	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  001fd	74 07		 je	 SHORT $LN36@cwr_setsta
$LN35@cwr_setsta:
  001ff	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN36@cwr_setsta:
  00206	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0020d	e9 8f fe ff ff	 jmp	 $LN46@cwr_setsta
$LN16@cwr_setsta:

; 2820 :     {
; 2821 :         PyErr_SetString(PyExc_ValueError, "invalid arguments");

  00212	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00219	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@KNPMEBHA@invalid?5arguments?$AA@
  00220	e8 00 00 00 00	 call	 PyErr_SetString

; 2850 : }

  00225	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  0022a	33 c0		 xor	 eax, eax
  0022c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00230	5f		 pop	 rdi
  00231	c3		 ret	 0
cwr_setstate ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@KNAONBFI@Expected?5int?5as?5r?$AA@	; `string'
PUBLIC	??_C@_0BB@CEDADCBD@O?$HMO?3permutations?$AA@	; `string'
EXTRN	PyExc_TypeError:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$permutations_new DD imagerel permutations_new
	DD	imagerel permutations_new+590
	DD	imagerel $unwind$permutations_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$permutations_new DD 0c7c01H
	DD	08c47cH
	DD	097477H
	DD	0f5472H
	DD	0e346dH
	DD	0e008920cH
	DD	06004d006H
xdata	ENDS
;	COMDAT ??_C@_0BC@KNAONBFI@Expected?5int?5as?5r?$AA@
CONST	SEGMENT
??_C@_0BC@KNAONBFI@Expected?5int?5as?5r?$AA@ DB 'Expected int as r', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CEDADCBD@O?$HMO?3permutations?$AA@
CONST	SEGMENT
??_C@_0BB@CEDADCBD@O?$HMO?3permutations?$AA@ DB 'O|O:permutations', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
CONST	ENDS
;	COMDAT permutations_new
_TEXT	SEGMENT
robj$ = 48
type$ = 112
args$ = 120
kwds$ = 128
iterable$ = 136
permutations_new PROC					; COMDAT

; 2951 : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	56		 push	 rsi
  00004	41 55		 push	 r13
  00006	41 56		 push	 r14
  00008	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000c	4c 8b f1	 mov	 r14, rcx

; 2952 :     permutationsobject *po;
; 2953 :     Py_ssize_t n;
; 2954 :     Py_ssize_t r;
; 2955 :     PyObject *robj = Py_None;
; 2956 :     PyObject *pool = NULL;
; 2957 :     PyObject *iterable = NULL;
; 2958 :     Py_ssize_t *indices = NULL;
; 2959 :     Py_ssize_t *cycles = NULL;
; 2960 :     Py_ssize_t i;
; 2961 :     static char *kwargs[] = {"iterable", "r", NULL};
; 2962 : 
; 2963 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|O:permutations", kwargs,
; 2964 :                                      &iterable, &robj))

  0000f	49 8d 4b c8	 lea	 rcx, QWORD PTR [r11-56]
  00013	49 8b c0	 mov	 rax, r8
  00016	49 89 4b c0	 mov	 QWORD PTR [r11-64], rcx
  0001a	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  0001e	4c 8b d2	 mov	 r10, rdx
  00021	49 89 4b b8	 mov	 QWORD PTR [r11-72], rcx
  00025	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_Py_NoneStruct
  0002c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwargs@?1??permutations_new@@9@9
  00033	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BB@CEDADCBD@O?$HMO?3permutations?$AA@
  0003a	45 33 ed	 xor	 r13d, r13d
  0003d	49 8b ca	 mov	 rcx, r10
  00040	48 8b d0	 mov	 rdx, rax
  00043	49 89 73 c8	 mov	 QWORD PTR [r11-56], rsi
  00047	4d 89 6b 20	 mov	 QWORD PTR [r11+32], r13
  0004b	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00050	85 c0		 test	 eax, eax
  00052	75 0c		 jne	 SHORT $LN21@permutatio

; 2965 :         return NULL;

  00054	33 c0		 xor	 eax, eax

; 3020 : }

  00056	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0005a	41 5e		 pop	 r14
  0005c	41 5d		 pop	 r13
  0005e	5e		 pop	 rsi
  0005f	c3		 ret	 0
$LN21@permutatio:

; 2966 : 
; 2967 :     pool = PySequence_Tuple(iterable);

  00060	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR iterable$[rsp]
  00068	48 89 5c 24 70	 mov	 QWORD PTR [rsp+112], rbx
  0006d	48 89 6c 24 78	 mov	 QWORD PTR [rsp+120], rbp
  00072	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  00077	4c 89 64 24 40	 mov	 QWORD PTR [rsp+64], r12
  0007c	e8 00 00 00 00	 call	 PySequence_Tuple
  00081	48 8b d8	 mov	 rbx, rax

; 2968 :     if (pool == NULL)

  00084	48 85 c0	 test	 rax, rax
  00087	0f 84 a1 01 00
	00		 je	 $LN3@permutatio

; 2969 :         goto error;
; 2970 :     n = PyTuple_GET_SIZE(pool);

  0008d	48 8b 68 60	 mov	 rbp, QWORD PTR [rax+96]

; 2971 : 
; 2972 :     r = n;
; 2973 :     if (robj != Py_None) {

  00091	48 8b 44 24 30	 mov	 rax, QWORD PTR robj$[rsp]
  00096	48 8b fd	 mov	 rdi, rbp
  00099	48 3b c6	 cmp	 rax, rsi
  0009c	74 49		 je	 SHORT $LN17@permutatio

; 2974 :         if (!PyLong_Check(robj)) {

  0009e	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000a2	f7 81 00 01 00
	00 00 00 00 01	 test	 DWORD PTR [rcx+256], 16777216 ; 01000000H
  000ac	75 18		 jne	 SHORT $LN18@permutatio

; 2975 :             PyErr_SetString(PyExc_TypeError, "Expected int as r");

  000ae	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@KNAONBFI@Expected?5int?5as?5r?$AA@
  000bc	e8 00 00 00 00	 call	 PyErr_SetString

; 2976 :             goto error;

  000c1	e9 03 01 00 00	 jmp	 $LN4@permutatio
$LN18@permutatio:

; 2977 :         }
; 2978 :         r = PyLong_AsSsize_t(robj);

  000c6	48 8b c8	 mov	 rcx, rax
  000c9	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  000ce	48 8b f8	 mov	 rdi, rax

; 2979 :         if (r == -1 && PyErr_Occurred())

  000d1	48 83 f8 ff	 cmp	 rax, -1
  000d5	75 10		 jne	 SHORT $LN17@permutatio
  000d7	e8 00 00 00 00	 call	 PyErr_Occurred
  000dc	48 85 c0	 test	 rax, rax
  000df	0f 85 e4 00 00
	00		 jne	 $LN4@permutatio

; 2980 :             goto error;
; 2981 :     }
; 2982 :     if (r < 0) {

  000e5	eb 05		 jmp	 SHORT $LN39@permutatio
$LN17@permutatio:
  000e7	48 85 ff	 test	 rdi, rdi
  000ea	79 18		 jns	 SHORT $LN16@permutatio
$LN39@permutatio:

; 2983 :         PyErr_SetString(PyExc_ValueError, "r must be non-negative");

  000ec	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000f3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@GBDHCGGF@r?5must?5be?5non?9negative?$AA@
  000fa	e8 00 00 00 00	 call	 PyErr_SetString

; 2984 :         goto error;

  000ff	e9 c5 00 00 00	 jmp	 $LN4@permutatio
$LN16@permutatio:

; 2985 :     }
; 2986 : 
; 2987 :     indices = PyMem_Malloc(n * sizeof(Py_ssize_t));

  00104	48 8d 0c ed 00
	00 00 00	 lea	 rcx, QWORD PTR [rbp*8]
  0010c	e8 00 00 00 00	 call	 PyMem_Malloc

; 2988 :     cycles = PyMem_Malloc(r * sizeof(Py_ssize_t));

  00111	48 8d 0c fd 00
	00 00 00	 lea	 rcx, QWORD PTR [rdi*8]
  00119	4c 8b e0	 mov	 r12, rax
  0011c	e8 00 00 00 00	 call	 PyMem_Malloc
  00121	48 8b f0	 mov	 rsi, rax

; 2989 :     if (indices == NULL || cycles == NULL) {

  00124	4d 85 e4	 test	 r12, r12
  00127	0f 84 7d 00 00
	00		 je	 $LN14@permutatio
  0012d	48 85 c0	 test	 rax, rax
  00130	74 78		 je	 SHORT $LN14@permutatio

; 2991 :         goto error;
; 2992 :     }
; 2993 : 
; 2994 :     for (i=0 ; i<n ; i++)

  00132	49 8b cd	 mov	 rcx, r13
  00135	48 85 ed	 test	 rbp, rbp
  00138	7e 12		 jle	 SHORT $LN11@permutatio
  0013a	66 0f 1f 44 00
	00		 npad	 6
$LL13@permutatio:

; 2995 :         indices[i] = i;

  00140	49 89 0c cc	 mov	 QWORD PTR [r12+rcx*8], rcx
  00144	48 ff c1	 inc	 rcx
  00147	48 3b cd	 cmp	 rcx, rbp
  0014a	7c f4		 jl	 SHORT $LL13@permutatio
$LN11@permutatio:

; 2996 :     for (i=0 ; i<r ; i++)

  0014c	49 8b c5	 mov	 rax, r13
  0014f	48 85 ff	 test	 rdi, rdi
  00152	7e 1b		 jle	 SHORT $LN8@permutatio
  00154	48 8b cd	 mov	 rcx, rbp
  00157	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL10@permutatio:

; 2997 :         cycles[i] = n - i;

  00160	48 89 0c c6	 mov	 QWORD PTR [rsi+rax*8], rcx
  00164	48 ff c0	 inc	 rax
  00167	48 ff c9	 dec	 rcx
  0016a	48 3b c7	 cmp	 rax, rdi
  0016d	7c f1		 jl	 SHORT $LL10@permutatio
$LN8@permutatio:

; 2998 : 
; 2999 :     /* create permutationsobject structure */
; 3000 :     po = (permutationsobject *)type->tp_alloc(type, 0);

  0016f	33 d2		 xor	 edx, edx
  00171	49 8b ce	 mov	 rcx, r14
  00174	41 ff 96 88 01
	00 00		 call	 QWORD PTR [r14+392]

; 3001 :     if (po == NULL)

  0017b	48 85 c0	 test	 rax, rax
  0017e	74 2f		 je	 SHORT $error$22825

; 3002 :         goto error;
; 3003 : 
; 3004 :     po->pool = pool;
; 3005 :     po->indices = indices;
; 3006 :     po->cycles = cycles;
; 3007 :     po->result = NULL;
; 3008 :     po->r = r;
; 3009 :     po->stopped = r > n ? 1 : 0;

  00180	48 3b fd	 cmp	 rdi, rbp
  00183	4c 89 68 78	 mov	 QWORD PTR [rax+120], r13
  00187	48 89 58 60	 mov	 QWORD PTR [rax+96], rbx
  0018b	41 0f 9f c5	 setg	 r13b
  0018f	4c 89 60 68	 mov	 QWORD PTR [rax+104], r12
  00193	48 89 70 70	 mov	 QWORD PTR [rax+112], rsi
  00197	44 89 a8 88 00
	00 00		 mov	 DWORD PTR [rax+136], r13d
  0019e	48 89 b8 80 00
	00 00		 mov	 QWORD PTR [rax+128], rdi

; 3010 : 
; 3011 :     return (PyObject *)po;

  001a5	e9 86 00 00 00	 jmp	 $LN43@permutatio
$LN14@permutatio:

; 2990 :         PyErr_NoMemory();

  001aa	e8 00 00 00 00	 call	 PyErr_NoMemory
$error$22825:

; 3012 : 
; 3013 : error:
; 3014 :     if (indices != NULL)

  001af	4d 85 e4	 test	 r12, r12
  001b2	74 08		 je	 SHORT $LN6@permutatio

; 3015 :         PyMem_Free(indices);

  001b4	49 8b cc	 mov	 rcx, r12
  001b7	e8 00 00 00 00	 call	 PyMem_Free
$LN6@permutatio:

; 3016 :     if (cycles != NULL)

  001bc	48 85 f6	 test	 rsi, rsi
  001bf	74 08		 je	 SHORT $LN4@permutatio

; 3017 :         PyMem_Free(cycles);

  001c1	48 8b ce	 mov	 rcx, rsi
  001c4	e8 00 00 00 00	 call	 PyMem_Free
$LN4@permutatio:

; 3018 :     Py_XDECREF(pool);

  001c9	e8 00 00 00 00	 call	 _Py_PXCTX
  001ce	85 c0		 test	 eax, eax
  001d0	75 5c		 jne	 SHORT $LN3@permutatio
  001d2	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  001d6	a8 20		 test	 al, 32			; 00000020H
  001d8	75 4c		 jne	 SHORT $LN28@permutatio
  001da	84 c0		 test	 al, al
  001dc	78 48		 js	 SHORT $LN28@permutatio
  001de	a8 02		 test	 al, 2
  001e0	75 4c		 jne	 SHORT $LN3@permutatio
  001e2	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  001e6	75 46		 jne	 SHORT $LN3@permutatio
  001e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  001f6	4c 8b cb	 mov	 r9, rbx
  001f9	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001ff	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00207	e8 00 00 00 00	 call	 _PyParallel_Guard
  0020c	48 8b cb	 mov	 rcx, rbx
  0020f	85 c0		 test	 eax, eax
  00211	74 07		 je	 SHORT $LN33@permutatio
  00213	e8 00 00 00 00	 call	 _Px_Dealloc
  00218	eb 14		 jmp	 SHORT $LN3@permutatio
$LN33@permutatio:
  0021a	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0021e	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00224	eb 08		 jmp	 SHORT $LN3@permutatio
$LN28@permutatio:
  00226	48 8b cb	 mov	 rcx, rbx
  00229	e8 00 00 00 00	 call	 Px_DecRef
$LN3@permutatio:

; 3019 :     return NULL;

  0022e	33 c0		 xor	 eax, eax
$LN43@permutatio:
  00230	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00235	48 8b 6c 24 78	 mov	 rbp, QWORD PTR [rsp+120]
  0023a	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  0023f	4c 8b 64 24 40	 mov	 r12, QWORD PTR [rsp+64]

; 3020 : }

  00244	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00248	41 5e		 pop	 r14
  0024a	41 5d		 pop	 r13
  0024c	5e		 pop	 rsi
  0024d	c3		 ret	 0
permutations_new ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$permutations_dealloc DD imagerel permutations_dealloc
	DD	imagerel permutations_dealloc+280
	DD	imagerel $unwind$permutations_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$permutations_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT permutations_dealloc
_TEXT	SEGMENT
po$ = 64
permutations_dealloc PROC				; COMDAT

; 3024 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 3025 :     PyObject_GC_UnTrack(po);

  0000d	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 3026 :     Py_XDECREF(po->pool);

  00012	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  00016	48 85 db	 test	 rbx, rbx
  00019	74 65		 je	 SHORT $LN7@permutatio@2
  0001b	e8 00 00 00 00	 call	 _Py_PXCTX
  00020	85 c0		 test	 eax, eax
  00022	75 5c		 jne	 SHORT $LN7@permutatio@2
  00024	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00028	a8 20		 test	 al, 32			; 00000020H
  0002a	75 4c		 jne	 SHORT $LN15@permutatio@2
  0002c	84 c0		 test	 al, al
  0002e	78 48		 js	 SHORT $LN15@permutatio@2
  00030	a8 02		 test	 al, 2
  00032	75 4c		 jne	 SHORT $LN7@permutatio@2
  00034	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00038	75 46		 jne	 SHORT $LN7@permutatio@2
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00048	4c 8b cb	 mov	 r9, rbx
  0004b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00051	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00059	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005e	48 8b cb	 mov	 rcx, rbx
  00061	85 c0		 test	 eax, eax
  00063	74 07		 je	 SHORT $LN20@permutatio@2
  00065	e8 00 00 00 00	 call	 _Px_Dealloc
  0006a	eb 14		 jmp	 SHORT $LN7@permutatio@2
$LN20@permutatio@2:
  0006c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00070	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00076	eb 08		 jmp	 SHORT $LN7@permutatio@2
$LN15@permutatio@2:
  00078	48 8b cb	 mov	 rcx, rbx
  0007b	e8 00 00 00 00	 call	 Px_DecRef
$LN7@permutatio@2:

; 3027 :     Py_XDECREF(po->result);

  00080	48 8b 5f 78	 mov	 rbx, QWORD PTR [rdi+120]
  00084	48 85 db	 test	 rbx, rbx
  00087	74 65		 je	 SHORT $LN3@permutatio@2
  00089	e8 00 00 00 00	 call	 _Py_PXCTX
  0008e	85 c0		 test	 eax, eax
  00090	75 5c		 jne	 SHORT $LN3@permutatio@2
  00092	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00096	a8 20		 test	 al, 32			; 00000020H
  00098	75 4c		 jne	 SHORT $LN26@permutatio@2
  0009a	84 c0		 test	 al, al
  0009c	78 48		 js	 SHORT $LN26@permutatio@2
  0009e	a8 02		 test	 al, 2
  000a0	75 4c		 jne	 SHORT $LN3@permutatio@2
  000a2	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000a6	75 46		 jne	 SHORT $LN3@permutatio@2
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000b6	4c 8b cb	 mov	 r9, rbx
  000b9	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000bf	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cc	48 8b cb	 mov	 rcx, rbx
  000cf	85 c0		 test	 eax, eax
  000d1	74 07		 je	 SHORT $LN31@permutatio@2
  000d3	e8 00 00 00 00	 call	 _Px_Dealloc
  000d8	eb 14		 jmp	 SHORT $LN3@permutatio@2
$LN31@permutatio@2:
  000da	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000de	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000e4	eb 08		 jmp	 SHORT $LN3@permutatio@2
$LN26@permutatio@2:
  000e6	48 8b cb	 mov	 rcx, rbx
  000e9	e8 00 00 00 00	 call	 Px_DecRef
$LN3@permutatio@2:

; 3028 :     PyMem_Free(po->indices);

  000ee	48 8b 4f 68	 mov	 rcx, QWORD PTR [rdi+104]
  000f2	e8 00 00 00 00	 call	 PyMem_Free

; 3029 :     PyMem_Free(po->cycles);

  000f7	48 8b 4f 70	 mov	 rcx, QWORD PTR [rdi+112]
  000fb	e8 00 00 00 00	 call	 PyMem_Free

; 3030 :     Py_TYPE(po)->tp_free(po);

  00100	4c 8b 5f 58	 mov	 r11, QWORD PTR [rdi+88]
  00104	48 8b cf	 mov	 rcx, rdi

; 3031 : }

  00107	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0010c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00110	5f		 pop	 rdi
  00111	49 ff a3 98 01
	00 00		 rex_jmp QWORD PTR [r11+408]
permutations_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@KCJLJPHA@permutations_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$permutations_traverse DD imagerel permutations_traverse
	DD	imagerel permutations_traverse+152
	DD	imagerel $unwind$permutations_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$permutations_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BG@KCJLJPHA@permutations_traverse?$AA@
CONST	SEGMENT
??_C@_0BG@KCJLJPHA@permutations_traverse?$AA@ DB 'permutations_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT permutations_traverse
_TEXT	SEGMENT
po$ = 48
visit$ = 56
arg$ = 64
permutations_traverse PROC				; COMDAT

; 3035 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 3036 :     Py_VISIT(po->pool);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN9@permutatio@3
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@KCJLJPHA@permutations_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 dc 0b 00
	00		 mov	 r8d, 3036		; 00000bdcH
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@permutatio@3:
  0003d	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN11@permutatio@3
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 39		 jne	 SHORT $LN13@permutatio@3
$LN11@permutatio@3:

; 3037 :     Py_VISIT(po->result);

  0004f	e8 00 00 00 00	 call	 _Py_PXCTX
  00054	85 c0		 test	 eax, eax
  00056	74 1c		 je	 SHORT $LN3@permutatio@3
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@KCJLJPHA@permutations_traverse?$AA@
  00066	45 33 c9	 xor	 r9d, r9d
  00069	41 b8 dd 0b 00
	00		 mov	 r8d, 3037		; 00000bddH
  0006f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@permutatio@3:
  00074	48 8b 4b 78	 mov	 rcx, QWORD PTR [rbx+120]
  00078	48 85 c9	 test	 rcx, rcx
  0007b	74 09		 je	 SHORT $LN5@permutatio@3
  0007d	48 8b d7	 mov	 rdx, rdi
  00080	ff d6		 call	 rsi
  00082	85 c0		 test	 eax, eax
  00084	75 02		 jne	 SHORT $LN13@permutatio@3
$LN5@permutatio@3:

; 3038 :     return 0;

  00086	33 c0		 xor	 eax, eax
$LN13@permutatio@3:

; 3039 : }

  00088	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00092	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00096	5f		 pop	 rdi
  00097	c3		 ret	 0
permutations_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$permutations_next DD imagerel permutations_next
	DD	imagerel permutations_next+89
	DD	imagerel $unwind$permutations_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$permutations_next DD imagerel permutations_next+89
	DD	imagerel permutations_next+487
	DD	imagerel $chain$1$permutations_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$permutations_next DD imagerel permutations_next+487
	DD	imagerel permutations_next+796
	DD	imagerel $chain$3$permutations_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$permutations_next DD 040021H
	DD	07c400H
	DD	086400H
	DD	imagerel permutations_next
	DD	imagerel permutations_next+89
	DD	imagerel $unwind$permutations_next
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$permutations_next DD 040a21H
	DD	07c40aH
	DD	086405H
	DD	imagerel permutations_next
	DD	imagerel permutations_next+89
	DD	imagerel $unwind$permutations_next
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$permutations_next DD 071201H
	DD	0f00e8212H
	DD	0d00ae00cH
	DD	050077008H
	DD	03006H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT permutations_next
_TEXT	SEGMENT
po$ = 128
result$1$ = 136
cycles$1$ = 144
pool$1$ = 152
permutations_next PROC					; COMDAT

; 3043 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	53		 push	 rbx
  00006	55		 push	 rbp
  00007	57		 push	 rdi
  00008	41 55		 push	 r13
  0000a	41 56		 push	 r14
  0000c	41 57		 push	 r15
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3044 :     PyObject *elem;
; 3045 :     PyObject *oldelem;
; 3046 :     PyObject *pool = po->pool;

  00012	4c 8b 79 60	 mov	 r15, QWORD PTR [rcx+96]

; 3047 :     Py_ssize_t *indices = po->indices;

  00016	48 8b 59 68	 mov	 rbx, QWORD PTR [rcx+104]
  0001a	48 8b f9	 mov	 rdi, rcx

; 3048 :     Py_ssize_t *cycles = po->cycles;
; 3049 :     PyObject *result = po->result;
; 3050 :     Py_ssize_t n = PyTuple_GET_SIZE(pool);
; 3051 :     Py_ssize_t r = po->r;
; 3052 :     Py_ssize_t i, j, k, index;
; 3053 : 
; 3054 :     if (po->stopped)

  0001d	83 bf 88 00 00
	00 00		 cmp	 DWORD PTR [rdi+136], 0
  00024	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00028	4c 8b 77 78	 mov	 r14, QWORD PTR [rdi+120]
  0002c	49 8b 6f 60	 mov	 rbp, QWORD PTR [r15+96]
  00030	4c 8b af 80 00
	00 00		 mov	 r13, QWORD PTR [rdi+128]
  00037	48 89 8c 24 90
	00 00 00	 mov	 QWORD PTR cycles$1$[rsp], rcx
  0003f	4c 89 bc 24 98
	00 00 00	 mov	 QWORD PTR pool$1$[rsp], r15
  00047	74 10		 je	 SHORT $LN25@permutatio@4

; 3055 :         return NULL;

  00049	33 c0		 xor	 eax, eax

; 3130 : }

  0004b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0004f	41 5f		 pop	 r15
  00051	41 5e		 pop	 r14
  00053	41 5d		 pop	 r13
  00055	5f		 pop	 rdi
  00056	5d		 pop	 rbp
  00057	5b		 pop	 rbx
  00058	c3		 ret	 0
$LN25@permutatio@4:
  00059	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  0005e	4c 89 64 24 38	 mov	 QWORD PTR [rsp+56], r12

; 3056 : 
; 3057 :     if (result == NULL) {

  00063	4d 85 f6	 test	 r14, r14
  00066	75 7e		 jne	 SHORT $LN24@permutatio@4

; 3058 :         /* On the first pass, initialize result tuple using the indices */
; 3059 :         result = PyTuple_New(r);

  00068	49 8b cd	 mov	 rcx, r13
  0006b	e8 00 00 00 00	 call	 PyTuple_New
  00070	4c 8b f0	 mov	 r14, rax

; 3060 :         if (result == NULL)

  00073	48 85 c0	 test	 rax, rax
  00076	0f 84 3f 01 00
	00		 je	 $empty$22923

; 3061 :             goto empty;
; 3062 :         po->result = result;

  0007c	48 89 47 78	 mov	 QWORD PTR [rdi+120], rax

; 3063 :         for (i=0; i<r ; i++) {

  00080	4d 85 ed	 test	 r13, r13
  00083	0f 8e 4f 02 00
	00		 jle	 $LN1@permutatio@4
  00089	48 8b f0	 mov	 rsi, rax
  0008c	48 2b f3	 sub	 rsi, rbx
  0008f	90		 npad	 1
$LL22@permutatio@4:

; 3064 :             index = indices[i];
; 3065 :             elem = PyTuple_GET_ITEM(pool, index);

  00090	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00093	49 8b 7c c7 70	 mov	 rdi, QWORD PTR [r15+rax*8+112]

; 3066 :             Py_INCREF(elem);

  00098	e8 00 00 00 00	 call	 _Py_PXCTX
  0009d	85 c0		 test	 eax, eax
  0009f	75 32		 jne	 SHORT $LN29@permutatio@4
  000a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000af	4c 8b cf	 mov	 r9, rdi
  000b2	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000b8	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000c0	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c5	85 c0		 test	 eax, eax
  000c7	75 06		 jne	 SHORT $LN28@permutatio@4
  000c9	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  000cd	74 04		 je	 SHORT $LN29@permutatio@4
$LN28@permutatio@4:
  000cf	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN29@permutatio@4:

; 3067 :             PyTuple_SET_ITEM(result, i, elem);

  000d3	48 89 7c 1e 70	 mov	 QWORD PTR [rsi+rbx+112], rdi
  000d8	48 83 c3 08	 add	 rbx, 8
  000dc	49 ff cd	 dec	 r13
  000df	75 af		 jne	 SHORT $LL22@permutatio@4

; 3068 :         }
; 3069 :     } else {

  000e1	e9 f2 01 00 00	 jmp	 $LN1@permutatio@4
$LN24@permutatio@4:

; 3070 :         if (n == 0)

  000e6	48 85 ed	 test	 rbp, rbp
  000e9	0f 84 cc 00 00
	00		 je	 $empty$22923

; 3071 :             goto empty;
; 3072 : 
; 3073 :         /* Copy the previous result tuple or re-use it if available */
; 3074 :         if (Py_REFCNT(result) > 1) {

  000ef	49 83 7e 50 01	 cmp	 QWORD PTR [r14+80], 1
  000f4	7e 72		 jle	 SHORT $LN17@permutatio@4

; 3075 :             PyObject *old_result = result;
; 3076 :             result = PyTuple_New(r);

  000f6	49 8b cd	 mov	 rcx, r13
  000f9	4d 8b fe	 mov	 r15, r14
  000fc	e8 00 00 00 00	 call	 PyTuple_New
  00101	4c 8b f0	 mov	 r14, rax
  00104	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR result$1$[rsp], rax

; 3077 :             if (result == NULL)

  0010c	48 85 c0	 test	 rax, rax
  0010f	0f 84 a6 00 00
	00		 je	 $empty$22923

; 3078 :                 goto empty;
; 3079 :             po->result = result;

  00115	48 89 47 78	 mov	 QWORD PTR [rdi+120], rax

; 3080 :             for (i=0; i<r ; i++) {

  00119	4d 85 ed	 test	 r13, r13
  0011c	7e 32		 jle	 SHORT $LN13@permutatio@4
  0011e	4d 8b f7	 mov	 r14, r15
  00121	48 8d 70 70	 lea	 rsi, QWORD PTR [rax+112]
  00125	4d 8b e5	 mov	 r12, r13
  00128	4c 2b f0	 sub	 r14, rax
  0012b	0f 1f 44 00 00	 npad	 5
$LL15@permutatio@4:

; 3081 :                 elem = PyTuple_GET_ITEM(old_result, i);

  00130	49 8b 3c 36	 mov	 rdi, QWORD PTR [r14+rsi]

; 3082 :                 Py_INCREF(elem);

  00134	48 8b cf	 mov	 rcx, rdi
  00137	e8 00 00 00 00	 call	 _Py_IncRef

; 3083 :                 PyTuple_SET_ITEM(result, i, elem);

  0013c	48 89 3e	 mov	 QWORD PTR [rsi], rdi
  0013f	48 83 c6 08	 add	 rsi, 8
  00143	49 ff cc	 dec	 r12
  00146	75 e8		 jne	 SHORT $LL15@permutatio@4
  00148	4c 8b b4 24 88
	00 00 00	 mov	 r14, QWORD PTR result$1$[rsp]
$LN13@permutatio@4:

; 3084 :             }
; 3085 :             Py_DECREF(old_result);

  00150	49 8b cf	 mov	 rcx, r15
  00153	e8 00 00 00 00	 call	 _Py_DecRef
  00158	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR cycles$1$[rsp]
  00160	4c 8b bc 24 98
	00 00 00	 mov	 r15, QWORD PTR pool$1$[rsp]
$LN17@permutatio@4:

; 3086 :         }
; 3087 :         /* Now, we've got the only copy so we can update it in-place */
; 3088 :         assert(r == 0 || Py_REFCNT(result) == 1);
; 3089 : 
; 3090 :         /* Decrement rightmost cycle, moving leftward upon zero rollover */
; 3091 :         for (i=r-1 ; i>=0 ; i--) {

  00168	4d 8d 65 ff	 lea	 r12, QWORD PTR [r13-1]
  0016c	4d 85 e4	 test	 r12, r12
  0016f	78 4a		 js	 SHORT $empty$22923
  00171	4c 8b c5	 mov	 r8, rbp
  00174	4c 8b cb	 mov	 r9, rbx
  00177	4a 8d 04 e1	 lea	 rax, QWORD PTR [rcx+r12*8]
  0017b	4d 2b c4	 sub	 r8, r12
  0017e	4c 2b c9	 sub	 r9, rcx
$LL12@permutatio@4:

; 3092 :             cycles[i] -= 1;

  00181	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00184	48 ff ca	 dec	 rdx
  00187	48 89 10	 mov	 QWORD PTR [rax], rdx

; 3093 :             if (cycles[i] == 0) {

  0018a	75 5b		 jne	 SHORT $LN9@permutatio@4

; 3094 :                 /* rotatation: indices[i:] = indices[i+1:] + indices[i:i+1] */
; 3095 :                 index = indices[i];

  0018c	49 8b 14 01	 mov	 rdx, QWORD PTR [r9+rax]
  00190	49 8d 3c 01	 lea	 rdi, QWORD PTR [r9+rax]

; 3096 :                 for (j=i ; j<n-1 ; j++)

  00194	48 8d 4d ff	 lea	 rcx, QWORD PTR [rbp-1]
  00198	4c 3b e1	 cmp	 r12, rcx
  0019b	7d 0a		 jge	 SHORT $LN8@permutatio@4

; 3094 :                 /* rotatation: indices[i:] = indices[i+1:] + indices[i:i+1] */
; 3095 :                 index = indices[i];

  0019d	48 8d 77 08	 lea	 rsi, QWORD PTR [rdi+8]
  001a1	49 2b cc	 sub	 rcx, r12
  001a4	f3 48 a5	 rep movsq
$LN8@permutatio@4:

; 3097 :                     indices[j] = indices[j+1];
; 3098 :                 indices[n-1] = index;

  001a7	48 89 54 eb f8	 mov	 QWORD PTR [rbx+rbp*8-8], rdx

; 3099 :                 cycles[i] = n - i;

  001ac	4c 89 00	 mov	 QWORD PTR [rax], r8
  001af	48 83 e8 08	 sub	 rax, 8
  001b3	49 ff c0	 inc	 r8
  001b6	49 ff cc	 dec	 r12
  001b9	79 c6		 jns	 SHORT $LL12@permutatio@4
$empty$22923:

; 3126 : 
; 3127 : empty:
; 3128 :     po->stopped = 1;

  001bb	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR po$[rsp]
  001c3	c7 80 88 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+136], 1

; 3129 :     return NULL;

  001cd	33 c0		 xor	 eax, eax
$LN62@permutatio@4:
  001cf	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  001d4	4c 8b 64 24 38	 mov	 r12, QWORD PTR [rsp+56]

; 3130 : }

  001d9	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001dd	41 5f		 pop	 r15
  001df	41 5e		 pop	 r14
  001e1	41 5d		 pop	 r13
  001e3	5f		 pop	 rdi
  001e4	5d		 pop	 rbp
  001e5	5b		 pop	 rbx
  001e6	c3		 ret	 0
$LN9@permutatio@4:

; 3100 :             } else {
; 3101 :                 j = cycles[i];
; 3102 :                 index = indices[i];

  001e7	4a 8b 0c e3	 mov	 rcx, QWORD PTR [rbx+r12*8]

; 3103 :                 indices[i] = indices[n-j];

  001eb	48 2b ea	 sub	 rbp, rdx
  001ee	48 8b 04 eb	 mov	 rax, QWORD PTR [rbx+rbp*8]
  001f2	4a 89 04 e3	 mov	 QWORD PTR [rbx+r12*8], rax

; 3104 :                 indices[n-j] = index;

  001f6	48 89 0c eb	 mov	 QWORD PTR [rbx+rbp*8], rcx

; 3105 : 
; 3106 :                 for (k=i; k<r ; k++) {

  001fa	4d 3b e5	 cmp	 r12, r13
  001fd	0f 8d cc 00 00
	00		 jge	 $LN2@permutatio@4
  00203	49 2b de	 sub	 rbx, r14
  00206	4b 8d 6c e6 70	 lea	 rbp, QWORD PTR [r14+r12*8+112]
  0020b	4d 2b ec	 sub	 r13, r12
  0020e	66 90		 npad	 2
$LL4@permutatio@4:

; 3107 :                     /* start with i, the leftmost element that changed */
; 3108 :                     /* yield tuple(pool[k] for k in indices[:r]) */
; 3109 :                     index = indices[k];
; 3110 :                     elem = PyTuple_GET_ITEM(pool, index);

  00210	48 8b 44 2b 90	 mov	 rax, QWORD PTR [rbx+rbp-112]
  00215	49 8b 74 c7 70	 mov	 rsi, QWORD PTR [r15+rax*8+112]

; 3111 :                     Py_INCREF(elem);

  0021a	e8 00 00 00 00	 call	 _Py_PXCTX
  0021f	85 c0		 test	 eax, eax
  00221	75 32		 jne	 SHORT $LN33@permutatio@4
  00223	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0022a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00231	4c 8b ce	 mov	 r9, rsi
  00234	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0023a	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00242	e8 00 00 00 00	 call	 _PyParallel_Guard
  00247	85 c0		 test	 eax, eax
  00249	75 06		 jne	 SHORT $LN32@permutatio@4
  0024b	f6 46 20 20	 test	 BYTE PTR [rsi+32], 32	; 00000020H
  0024f	74 04		 je	 SHORT $LN33@permutatio@4
$LN32@permutatio@4:
  00251	48 ff 46 50	 inc	 QWORD PTR [rsi+80]
$LN33@permutatio@4:

; 3112 :                     oldelem = PyTuple_GET_ITEM(result, k);

  00255	48 8b 7d 00	 mov	 rdi, QWORD PTR [rbp]

; 3113 :                     PyTuple_SET_ITEM(result, k, elem);

  00259	48 89 75 00	 mov	 QWORD PTR [rbp], rsi

; 3114 :                     Py_DECREF(oldelem);

  0025d	e8 00 00 00 00	 call	 _Py_PXCTX
  00262	85 c0		 test	 eax, eax
  00264	75 5c		 jne	 SHORT $LN3@permutatio@4
  00266	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  0026a	a8 20		 test	 al, 32			; 00000020H
  0026c	75 4c		 jne	 SHORT $LN40@permutatio@4
  0026e	84 c0		 test	 al, al
  00270	78 48		 js	 SHORT $LN40@permutatio@4
  00272	a8 02		 test	 al, 2
  00274	75 4c		 jne	 SHORT $LN3@permutatio@4
  00276	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  0027a	75 46		 jne	 SHORT $LN3@permutatio@4
  0027c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00283	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0028a	4c 8b cf	 mov	 r9, rdi
  0028d	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00293	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0029b	e8 00 00 00 00	 call	 _PyParallel_Guard
  002a0	48 8b cf	 mov	 rcx, rdi
  002a3	85 c0		 test	 eax, eax
  002a5	74 07		 je	 SHORT $LN45@permutatio@4
  002a7	e8 00 00 00 00	 call	 _Px_Dealloc
  002ac	eb 14		 jmp	 SHORT $LN3@permutatio@4
$LN45@permutatio@4:
  002ae	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  002b2	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  002b8	eb 08		 jmp	 SHORT $LN3@permutatio@4
$LN40@permutatio@4:
  002ba	48 8b cf	 mov	 rcx, rdi
  002bd	e8 00 00 00 00	 call	 Px_DecRef
$LN3@permutatio@4:

; 3105 : 
; 3106 :                 for (k=i; k<r ; k++) {

  002c2	48 83 c5 08	 add	 rbp, 8
  002c6	49 ff cd	 dec	 r13
  002c9	0f 85 41 ff ff
	ff		 jne	 $LL4@permutatio@4
$LN2@permutatio@4:

; 3115 :                 }
; 3116 :                 break;
; 3117 :             }
; 3118 :         }
; 3119 :         /* If i is negative, then the cycles have all
; 3120 :            rolled-over and we're done. */
; 3121 :         if (i < 0)

  002cf	4d 85 e4	 test	 r12, r12
  002d2	0f 88 e3 fe ff
	ff		 js	 $empty$22923
$LN1@permutatio@4:

; 3122 :             goto empty;
; 3123 :     }
; 3124 :     Py_INCREF(result);

  002d8	e8 00 00 00 00	 call	 _Py_PXCTX
  002dd	85 c0		 test	 eax, eax
  002df	75 33		 jne	 SHORT $LN48@permutatio@4
  002e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  002e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  002ef	4d 8b ce	 mov	 r9, r14
  002f2	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  002f8	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00300	e8 00 00 00 00	 call	 _PyParallel_Guard
  00305	85 c0		 test	 eax, eax
  00307	75 07		 jne	 SHORT $LN47@permutatio@4
  00309	41 f6 46 20 20	 test	 BYTE PTR [r14+32], 32	; 00000020H
  0030e	74 04		 je	 SHORT $LN48@permutatio@4
$LN47@permutatio@4:
  00310	49 ff 46 50	 inc	 QWORD PTR [r14+80]
$LN48@permutatio@4:

; 3125 :     return result;

  00314	49 8b c6	 mov	 rax, r14
  00317	e9 b3 fe ff ff	 jmp	 $LN62@permutatio@4
permutations_next ENDP
_TEXT	ENDS
PUBLIC	??_C@_09PFECCMPC@O?$CIOn?$CJ?$CINN?$CJ?$AA@	; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$permutations_reduce DD imagerel permutations_reduce
	DD	imagerel permutations_reduce+544
	DD	imagerel $unwind$permutations_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$permutations_reduce DD 0c7201H
	DD	06d472H
	DD	07c46dH
	DD	0c7468H
	DD	0b6463H
	DD	0a545eH
	DD	030027206H
xdata	ENDS
;	COMDAT ??_C@_09PFECCMPC@O?$CIOn?$CJ?$CINN?$CJ?$AA@
CONST	SEGMENT
??_C@_09PFECCMPC@O?$CIOn?$CJ?$CINN?$CJ?$AA@ DB 'O(On)(NN)', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
CONST	ENDS
;	COMDAT permutations_reduce
_TEXT	SEGMENT
po$ = 80
permutations_reduce PROC				; COMDAT

; 3134 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 3135 :     if (po->result == NULL) {

  00006	48 83 79 78 00	 cmp	 QWORD PTR [rcx+120], 0
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	75 20		 jne	 SHORT $LN22@permutatio@5

; 3136 :         return Py_BuildValue("O(On)", Py_TYPE(po), po->pool, po->r);

  00010	4c 8b 89 80 00
	00 00		 mov	 r9, QWORD PTR [rcx+128]
  00017	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]
  0001b	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0001f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05IEPKLDIK@O?$CIOn?$CJ?$AA@

; 3172 :     }
; 3173 : }

  00026	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0002a	5b		 pop	 rbx
  0002b	e9 00 00 00 00	 jmp	 Py_BuildValue
$LN22@permutatio@5:

; 3137 :     } else if (po->stopped) {

  00030	83 b9 88 00 00
	00 00		 cmp	 DWORD PTR [rcx+136], 0
  00037	74 1c		 je	 SHORT $LN20@permutatio@5

; 3138 :         return Py_BuildValue("O(()n)", Py_TYPE(po), po->r);

  00039	4c 8b 81 80 00
	00 00		 mov	 r8, QWORD PTR [rcx+128]
  00040	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06BBKLFPPK@O?$CI?$CI?$CJn?$CJ?$AA@

; 3172 :     }
; 3173 : }

  0004b	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0004f	5b		 pop	 rbx
  00050	e9 00 00 00 00	 jmp	 Py_BuildValue
$LN20@permutatio@5:

; 3139 :     } else {
; 3140 :         PyObject *indices=NULL, *cycles=NULL;
; 3141 :         Py_ssize_t n, i;
; 3142 : 
; 3143 :         /* we must pickle the indices and cycles and use them for setstate */
; 3144 :         n = PyTuple_GET_SIZE(po->pool);

  00055	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  00059	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp
  0005e	48 89 74 24 58	 mov	 QWORD PTR [rsp+88], rsi
  00063	48 89 7c 24 60	 mov	 QWORD PTR [rsp+96], rdi
  00068	4c 89 64 24 38	 mov	 QWORD PTR [rsp+56], r12
  0006d	4c 89 6c 24 30	 mov	 QWORD PTR [rsp+48], r13
  00072	4c 8b 68 60	 mov	 r13, QWORD PTR [rax+96]
  00076	33 f6		 xor	 esi, esi

; 3145 :         indices = PyTuple_New(n);

  00078	49 8b cd	 mov	 rcx, r13
  0007b	8b fe		 mov	 edi, esi
  0007d	e8 00 00 00 00	 call	 PyTuple_New
  00082	4c 8b e0	 mov	 r12, rax

; 3146 :         if (indices == NULL)

  00085	48 85 c0	 test	 rax, rax
  00088	0f 84 71 01 00
	00		 je	 $LN3@permutatio@5

; 3147 :             goto err;
; 3148 :         for (i=0; i<n; i++){

  0008e	8b ee		 mov	 ebp, esi
  00090	4d 85 ed	 test	 r13, r13
  00093	7e 2a		 jle	 SHORT $LN15@permutatio@5
  00095	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL17@permutatio@5:

; 3149 :             PyObject* index = PyLong_FromSsize_t(po->indices[i]);

  000a0	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  000a4	48 8b 0c e9	 mov	 rcx, QWORD PTR [rcx+rbp*8]
  000a8	e8 00 00 00 00	 call	 PyLong_FromSsize_t

; 3150 :             if (!index)

  000ad	48 85 c0	 test	 rax, rax
  000b0	74 7b		 je	 SHORT $err$22984

; 3151 :                 goto err;
; 3152 :             PyTuple_SET_ITEM(indices, i, index);

  000b2	49 89 44 ec 70	 mov	 QWORD PTR [r12+rbp*8+112], rax
  000b7	48 ff c5	 inc	 rbp
  000ba	49 3b ed	 cmp	 rbp, r13
  000bd	7c e1		 jl	 SHORT $LL17@permutatio@5
$LN15@permutatio@5:

; 3153 :         }
; 3154 : 
; 3155 :         cycles = PyTuple_New(po->r);

  000bf	48 8b 8b 80 00
	00 00		 mov	 rcx, QWORD PTR [rbx+128]
  000c6	e8 00 00 00 00	 call	 PyTuple_New
  000cb	48 8b f8	 mov	 rdi, rax

; 3156 :         if (cycles == NULL)

  000ce	48 85 c0	 test	 rax, rax
  000d1	74 5a		 je	 SHORT $err$22984

; 3157 :             goto err;
; 3158 :         for (i=0; i<po->r; i++)

  000d3	48 39 b3 80 00
	00 00		 cmp	 QWORD PTR [rbx+128], rsi
  000da	7e 27		 jle	 SHORT $LN10@permutatio@5
  000dc	0f 1f 40 00	 npad	 4
$LL12@permutatio@5:

; 3159 :         {
; 3160 :             PyObject* index = PyLong_FromSsize_t(po->cycles[i]);

  000e0	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  000e4	48 8b 0c f1	 mov	 rcx, QWORD PTR [rcx+rsi*8]
  000e8	e8 00 00 00 00	 call	 PyLong_FromSsize_t

; 3161 :             if (!index)

  000ed	48 85 c0	 test	 rax, rax
  000f0	74 3b		 je	 SHORT $err$22984

; 3162 :                 goto err;
; 3163 :             PyTuple_SET_ITEM(cycles, i, index);

  000f2	48 89 44 f7 70	 mov	 QWORD PTR [rdi+rsi*8+112], rax
  000f7	48 ff c6	 inc	 rsi
  000fa	48 3b b3 80 00
	00 00		 cmp	 rsi, QWORD PTR [rbx+128]
  00101	7c dd		 jl	 SHORT $LL12@permutatio@5
$LN10@permutatio@5:

; 3164 :         }
; 3165 :         return Py_BuildValue("O(On)(NN)", Py_TYPE(po),
; 3166 :                              po->pool, po->r,
; 3167 :                              indices, cycles);

  00103	4c 8b 8b 80 00
	00 00		 mov	 r9, QWORD PTR [rbx+128]
  0010a	4c 8b 43 60	 mov	 r8, QWORD PTR [rbx+96]
  0010e	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00112	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09PFECCMPC@O?$CIOn?$CJ?$CINN?$CJ?$AA@
  00119	48 89 7c 24 28	 mov	 QWORD PTR [rsp+40], rdi
  0011e	4c 89 64 24 20	 mov	 QWORD PTR [rsp+32], r12
  00123	e8 00 00 00 00	 call	 Py_BuildValue
  00128	e9 d4 00 00 00	 jmp	 $LN57@permutatio@5
$err$22984:

; 3168 :     err:
; 3169 :         Py_XDECREF(indices);

  0012d	e8 00 00 00 00	 call	 _Py_PXCTX
  00132	85 c0		 test	 eax, eax
  00134	75 5f		 jne	 SHORT $LN7@permutatio@5
  00136	49 8b 44 24 20	 mov	 rax, QWORD PTR [r12+32]
  0013b	a8 20		 test	 al, 32			; 00000020H
  0013d	75 4e		 jne	 SHORT $LN29@permutatio@5
  0013f	84 c0		 test	 al, al
  00141	78 4a		 js	 SHORT $LN29@permutatio@5
  00143	a8 02		 test	 al, 2
  00145	75 4e		 jne	 SHORT $LN7@permutatio@5
  00147	49 ff 4c 24 50	 dec	 QWORD PTR [r12+80]
  0014c	75 47		 jne	 SHORT $LN7@permutatio@5
  0014e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00155	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0015c	4d 8b cc	 mov	 r9, r12
  0015f	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00165	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0016d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00172	49 8b cc	 mov	 rcx, r12
  00175	85 c0		 test	 eax, eax
  00177	74 07		 je	 SHORT $LN34@permutatio@5
  00179	e8 00 00 00 00	 call	 _Px_Dealloc
  0017e	eb 15		 jmp	 SHORT $LN7@permutatio@5
$LN34@permutatio@5:
  00180	49 8b 44 24 58	 mov	 rax, QWORD PTR [r12+88]
  00185	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0018b	eb 08		 jmp	 SHORT $LN7@permutatio@5
$LN29@permutatio@5:
  0018d	49 8b cc	 mov	 rcx, r12
  00190	e8 00 00 00 00	 call	 Px_DecRef
$LN7@permutatio@5:

; 3170 :         Py_XDECREF(cycles);

  00195	48 85 ff	 test	 rdi, rdi
  00198	74 65		 je	 SHORT $LN3@permutatio@5
  0019a	e8 00 00 00 00	 call	 _Py_PXCTX
  0019f	85 c0		 test	 eax, eax
  001a1	75 5c		 jne	 SHORT $LN3@permutatio@5
  001a3	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  001a7	a8 20		 test	 al, 32			; 00000020H
  001a9	75 4c		 jne	 SHORT $LN40@permutatio@5
  001ab	84 c0		 test	 al, al
  001ad	78 48		 js	 SHORT $LN40@permutatio@5
  001af	a8 02		 test	 al, 2
  001b1	75 4c		 jne	 SHORT $LN3@permutatio@5
  001b3	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  001b7	75 46		 jne	 SHORT $LN3@permutatio@5
  001b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  001c7	4c 8b cf	 mov	 r9, rdi
  001ca	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001d0	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001d8	e8 00 00 00 00	 call	 _PyParallel_Guard
  001dd	48 8b cf	 mov	 rcx, rdi
  001e0	85 c0		 test	 eax, eax
  001e2	74 07		 je	 SHORT $LN45@permutatio@5
  001e4	e8 00 00 00 00	 call	 _Px_Dealloc
  001e9	eb 14		 jmp	 SHORT $LN3@permutatio@5
$LN45@permutatio@5:
  001eb	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  001ef	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001f5	eb 08		 jmp	 SHORT $LN3@permutatio@5
$LN40@permutatio@5:
  001f7	48 8b cf	 mov	 rcx, rdi
  001fa	e8 00 00 00 00	 call	 Px_DecRef
$LN3@permutatio@5:

; 3171 :         return NULL;

  001ff	33 c0		 xor	 eax, eax
$LN57@permutatio@5:
  00201	4c 8b 64 24 38	 mov	 r12, QWORD PTR [rsp+56]
  00206	48 8b 7c 24 60	 mov	 rdi, QWORD PTR [rsp+96]
  0020b	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  00210	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  00215	4c 8b 6c 24 30	 mov	 r13, QWORD PTR [rsp+48]

; 3172 :     }
; 3173 : }

  0021a	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0021e	5b		 pop	 rbx
  0021f	c3		 ret	 0
permutations_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@MPMMLIJH@permutations_setstate?$AA@	; `string'
PUBLIC	??_C@_04MKJNADP@O?$CBO?$CB?$AA@			; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$permutations_setstate DD imagerel permutations_setstate
	DD	imagerel permutations_setstate+75
	DD	imagerel $unwind$permutations_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$permutations_setstate DD imagerel permutations_setstate+75
	DD	imagerel permutations_setstate+214
	DD	imagerel $chain$1$permutations_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$permutations_setstate DD imagerel permutations_setstate+214
	DD	imagerel permutations_setstate+360
	DD	imagerel $chain$4$permutations_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$permutations_setstate DD imagerel permutations_setstate+360
	DD	imagerel permutations_setstate+712
	DD	imagerel $chain$6$permutations_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$permutations_setstate DD imagerel permutations_setstate+712
	DD	imagerel permutations_setstate+744
	DD	imagerel $chain$7$permutations_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$permutations_setstate DD 020021H
	DD	067400H
	DD	imagerel permutations_setstate
	DD	imagerel permutations_setstate+75
	DD	imagerel $unwind$permutations_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$permutations_setstate DD 060021H
	DD	067400H
	DD	075400H
	DD	0a3400H
	DD	imagerel permutations_setstate
	DD	imagerel permutations_setstate+75
	DD	imagerel $unwind$permutations_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$permutations_setstate DD 060521H
	DD	075405H
	DD	067400H
	DD	0a3400H
	DD	imagerel permutations_setstate
	DD	imagerel permutations_setstate+75
	DD	imagerel $unwind$permutations_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$permutations_setstate DD 042e21H
	DD	0a342eH
	DD	067405H
	DD	imagerel permutations_setstate
	DD	imagerel permutations_setstate+75
	DD	imagerel $unwind$permutations_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$permutations_setstate DD 020601H
	DD	060027206H
xdata	ENDS
;	COMDAT ??_C@_0BG@MPMMLIJH@permutations_setstate?$AA@
CONST	SEGMENT
??_C@_0BG@MPMMLIJH@permutations_setstate?$AA@ DB 'permutations_setstate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04MKJNADP@O?$CBO?$CB?$AA@
CONST	SEGMENT
??_C@_04MKJNADP@O?$CBO?$CB?$AA@ DB 'O!O!', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
CONST	ENDS
;	COMDAT permutations_setstate
_TEXT	SEGMENT
po$ = 80
state$ = 88
indices$ = 96
cycles$ = 104
permutations_setstate PROC				; COMDAT

; 3177 : {

  00000	40 56		 push	 rsi
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00006	48 8b f1	 mov	 rsi, rcx
  00009	48 8b c2	 mov	 rax, rdx

; 3178 :     PyObject *indices, *cycles, *result;
; 3179 :     Py_ssize_t n, i;
; 3180 : 
; 3181 :     if (!PyArg_ParseTuple(state, "O!O!",
; 3182 :                           &PyTuple_Type, &indices,
; 3183 :                           &PyTuple_Type, &cycles))

  0000c	48 8d 4c 24 68	 lea	 rcx, QWORD PTR cycles$[rsp]
  00011	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00016	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyTuple_Type
  0001d	4c 8d 4c 24 60	 lea	 r9, QWORD PTR indices$[rsp]
  00022	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04MKJNADP@O?$CBO?$CB?$AA@
  00029	48 8b c8	 mov	 rcx, rax
  0002c	4c 89 44 24 20	 mov	 QWORD PTR [rsp+32], r8
  00031	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00036	85 c0		 test	 eax, eax
  00038	75 08		 jne	 SHORT $LN25@permutatio@6

; 3184 :         return NULL;

  0003a	33 c0		 xor	 eax, eax

; 3231 : }

  0003c	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00040	5e		 pop	 rsi
  00041	c3		 ret	 0
$LN25@permutatio@6:

; 3185 : 
; 3186 :     n = PyTuple_GET_SIZE(po->pool);

  00042	48 8b 46 60	 mov	 rax, QWORD PTR [rsi+96]

; 3187 :     if (PyTuple_GET_SIZE(indices) != n ||
; 3188 :         PyTuple_GET_SIZE(cycles) != po->r)

  00046	48 8b 54 24 60	 mov	 rdx, QWORD PTR indices$[rsp]
  0004b	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  00050	48 8b 78 60	 mov	 rdi, QWORD PTR [rax+96]
  00054	48 39 7a 60	 cmp	 QWORD PTR [rdx+96], rdi
  00058	0f 85 6a 02 00
	00		 jne	 $LN23@permutatio@6
  0005e	48 8b 44 24 68	 mov	 rax, QWORD PTR cycles$[rsp]
  00063	48 8b 8e 80 00
	00 00		 mov	 rcx, QWORD PTR [rsi+128]
  0006a	48 39 48 60	 cmp	 QWORD PTR [rax+96], rcx
  0006e	0f 85 54 02 00
	00		 jne	 $LN23@permutatio@6

; 3192 :     }
; 3193 : 
; 3194 :     for (i=0; i<n; i++)

  00074	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  00079	33 db		 xor	 ebx, ebx
  0007b	48 85 ff	 test	 rdi, rdi
  0007e	7e 56		 jle	 SHORT $LN62@permutatio@6
$LL22@permutatio@6:

; 3195 :     {
; 3196 :         PyObject* indexObject = PyTuple_GET_ITEM(indices, i);
; 3197 :         Py_ssize_t index = PyLong_AsSsize_t(indexObject);

  00080	48 8b 4c da 70	 mov	 rcx, QWORD PTR [rdx+rbx*8+112]
  00085	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  0008a	4c 8b d8	 mov	 r11, rax

; 3198 :         if (index < 0 && PyErr_Occurred())

  0008d	48 85 c0	 test	 rax, rax
  00090	79 0f		 jns	 SHORT $LN18@permutatio@6
  00092	e8 00 00 00 00	 call	 PyErr_Occurred
  00097	48 85 c0	 test	 rax, rax
  0009a	75 28		 jne	 SHORT $LN50@permutatio@6

; 3200 :         /* clamp the index */
; 3201 :         if (index < 0)
; 3202 :             index = 0;

  0009c	45 33 db	 xor	 r11d, r11d
  0009f	eb 0b		 jmp	 SHORT $LN16@permutatio@6
$LN18@permutatio@6:

; 3203 :         else if (index > n-1)

  000a1	48 8d 47 ff	 lea	 rax, QWORD PTR [rdi-1]
  000a5	4c 3b d8	 cmp	 r11, rax
  000a8	4c 0f 4f d8	 cmovg	 r11, rax
$LN16@permutatio@6:

; 3204 :             index = n-1;
; 3205 :         po->indices[i] = index;

  000ac	48 8b 46 68	 mov	 rax, QWORD PTR [rsi+104]
  000b0	48 ff c3	 inc	 rbx
  000b3	4c 89 5c d8 f8	 mov	 QWORD PTR [rax+rbx*8-8], r11
  000b8	48 3b df	 cmp	 rbx, rdi
  000bb	7d 19		 jge	 SHORT $LN62@permutatio@6

; 3192 :     }
; 3193 : 
; 3194 :     for (i=0; i<n; i++)

  000bd	48 8b 54 24 60	 mov	 rdx, QWORD PTR indices$[rsp]
  000c2	eb bc		 jmp	 SHORT $LL22@permutatio@6
$LN50@permutatio@6:
  000c4	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000c9	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 3199 :             return NULL; /* not an integer */

  000ce	33 c0		 xor	 eax, eax

; 3231 : }

  000d0	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000d4	5e		 pop	 rsi
  000d5	c3		 ret	 0
$LN62@permutatio@6:
  000d6	48 89 6c 24 38	 mov	 QWORD PTR [rsp+56], rbp

; 3206 :     }
; 3207 : 
; 3208 :     for (i=0; i<po->r; i++)

  000db	33 ed		 xor	 ebp, ebp
  000dd	48 39 ae 80 00
	00 00		 cmp	 QWORD PTR [rsi+128], rbp
  000e4	7e 57		 jle	 SHORT $LN63@permutatio@6
  000e6	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL15@permutatio@6:

; 3209 :     {
; 3210 :         PyObject* indexObject = PyTuple_GET_ITEM(cycles, i);

  000f0	48 8b 44 24 68	 mov	 rax, QWORD PTR cycles$[rsp]

; 3211 :         Py_ssize_t index = PyLong_AsSsize_t(indexObject);

  000f5	48 8b 4c e8 70	 mov	 rcx, QWORD PTR [rax+rbp*8+112]
  000fa	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  000ff	48 8b d8	 mov	 rbx, rax

; 3212 :         if (index < 0 && PyErr_Occurred())

  00102	48 85 c0	 test	 rax, rax
  00105	79 0a		 jns	 SHORT $LN12@permutatio@6
  00107	e8 00 00 00 00	 call	 PyErr_Occurred
  0010c	48 85 c0	 test	 rax, rax
  0010f	75 40		 jne	 SHORT $LN51@permutatio@6
$LN12@permutatio@6:

; 3213 :             return NULL; /* not an integer */
; 3214 :         if (index < 1)

  00111	48 83 fb 01	 cmp	 rbx, 1
  00115	7d 07		 jge	 SHORT $LN11@permutatio@6

; 3215 :             index = 1;

  00117	bb 01 00 00 00	 mov	 ebx, 1
  0011c	eb 07		 jmp	 SHORT $LN9@permutatio@6
$LN11@permutatio@6:

; 3216 :         else if (index > n-i)

  0011e	48 3b df	 cmp	 rbx, rdi
  00121	48 0f 4f df	 cmovg	 rbx, rdi
$LN9@permutatio@6:

; 3217 :             index = n-i;
; 3218 :         po->cycles[i] = index;

  00125	48 8b 46 70	 mov	 rax, QWORD PTR [rsi+112]
  00129	48 ff c5	 inc	 rbp
  0012c	48 ff cf	 dec	 rdi
  0012f	48 89 5c e8 f8	 mov	 QWORD PTR [rax+rbp*8-8], rbx
  00134	48 3b ae 80 00
	00 00		 cmp	 rbp, QWORD PTR [rsi+128]
  0013b	7c b3		 jl	 SHORT $LL15@permutatio@6
$LN63@permutatio@6:

; 3219 :     }
; 3220 :     result = PyTuple_New(po->r);

  0013d	48 8b 8e 80 00
	00 00		 mov	 rcx, QWORD PTR [rsi+128]
  00144	e8 00 00 00 00	 call	 PyTuple_New
  00149	48 8b e8	 mov	 rbp, rax

; 3221 :     if (result == NULL)

  0014c	48 85 c0	 test	 rax, rax
  0014f	75 17		 jne	 SHORT $LN8@permutatio@6
$LN51@permutatio@6:

; 3222 :         return NULL;

  00151	33 c0		 xor	 eax, eax
$LN66@permutatio@6:
  00153	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00158	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0015d	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 3231 : }

  00162	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00166	5e		 pop	 rsi
  00167	c3		 ret	 0
$LN8@permutatio@6:

; 3223 :     for (i=0; i<po->r; i++) {

  00168	33 ff		 xor	 edi, edi
  0016a	48 39 be 80 00
	00 00		 cmp	 QWORD PTR [rsi+128], rdi
  00171	7e 5d		 jle	 SHORT $LN4@permutatio@6
$LL7@permutatio@6:

; 3224 :         PyObject *element = PyTuple_GET_ITEM(po->pool, po->indices[i]);

  00173	48 8b 46 68	 mov	 rax, QWORD PTR [rsi+104]
  00177	48 8b 0c f8	 mov	 rcx, QWORD PTR [rax+rdi*8]
  0017b	48 8b 46 60	 mov	 rax, QWORD PTR [rsi+96]
  0017f	48 8b 5c c8 70	 mov	 rbx, QWORD PTR [rax+rcx*8+112]

; 3225 :         Py_INCREF(element);

  00184	e8 00 00 00 00	 call	 _Py_PXCTX
  00189	85 c0		 test	 eax, eax
  0018b	75 32		 jne	 SHORT $LN29@permutatio@6
  0018d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00194	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0019b	4c 8b cb	 mov	 r9, rbx
  0019e	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  001a4	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  001ac	e8 00 00 00 00	 call	 _PyParallel_Guard
  001b1	85 c0		 test	 eax, eax
  001b3	75 06		 jne	 SHORT $LN28@permutatio@6
  001b5	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  001b9	74 04		 je	 SHORT $LN29@permutatio@6
$LN28@permutatio@6:
  001bb	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN29@permutatio@6:

; 3226 :         PyTuple_SET_ITEM(result, i, element);

  001bf	48 89 5c fd 70	 mov	 QWORD PTR [rbp+rdi*8+112], rbx
  001c4	48 ff c7	 inc	 rdi
  001c7	48 3b be 80 00
	00 00		 cmp	 rdi, QWORD PTR [rsi+128]
  001ce	7c a3		 jl	 SHORT $LL7@permutatio@6
$LN4@permutatio@6:

; 3227 :     }
; 3228 :     Py_CLEAR(po->result);

  001d0	4c 8b 4e 78	 mov	 r9, QWORD PTR [rsi+120]
  001d4	4d 85 c9	 test	 r9, r9
  001d7	0f 84 96 00 00
	00		 je	 $LN3@permutatio@6
  001dd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  001e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@MPMMLIJH@permutations_setstate?$AA@
  001eb	41 b8 9c 0c 00
	00		 mov	 r8d, 3228		; 00000c9cH
  001f1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001f9	e8 00 00 00 00	 call	 _PyParallel_Guard
  001fe	85 c0		 test	 eax, eax
  00200	75 71		 jne	 SHORT $LN3@permutatio@6
  00202	48 8b 5e 78	 mov	 rbx, QWORD PTR [rsi+120]
  00206	48 c7 46 78 00
	00 00 00	 mov	 QWORD PTR [rsi+120], 0
  0020e	e8 00 00 00 00	 call	 _Py_PXCTX
  00213	85 c0		 test	 eax, eax
  00215	75 5c		 jne	 SHORT $LN3@permutatio@6
  00217	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0021b	a8 20		 test	 al, 32			; 00000020H
  0021d	75 4c		 jne	 SHORT $LN36@permutatio@6
  0021f	84 c0		 test	 al, al
  00221	78 48		 js	 SHORT $LN36@permutatio@6
  00223	a8 02		 test	 al, 2
  00225	75 4c		 jne	 SHORT $LN3@permutatio@6
  00227	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0022b	75 46		 jne	 SHORT $LN3@permutatio@6
  0022d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00234	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0023b	4c 8b cb	 mov	 r9, rbx
  0023e	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00244	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0024c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00251	48 8b cb	 mov	 rcx, rbx
  00254	85 c0		 test	 eax, eax
  00256	74 07		 je	 SHORT $LN41@permutatio@6
  00258	e8 00 00 00 00	 call	 _Px_Dealloc
  0025d	eb 14		 jmp	 SHORT $LN3@permutatio@6
$LN41@permutatio@6:
  0025f	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00263	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00269	eb 08		 jmp	 SHORT $LN3@permutatio@6
$LN36@permutatio@6:
  0026b	48 8b cb	 mov	 rcx, rbx
  0026e	e8 00 00 00 00	 call	 Px_DecRef
$LN3@permutatio@6:

; 3229 :     po->result = result;

  00273	48 89 6e 78	 mov	 QWORD PTR [rsi+120], rbp

; 3230 :     Py_RETURN_NONE;

  00277	e8 00 00 00 00	 call	 _Py_PXCTX
  0027c	85 c0		 test	 eax, eax
  0027e	75 3c		 jne	 SHORT $LN44@permutatio@6
  00280	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00287	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0028e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00295	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0029b	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  002a3	e8 00 00 00 00	 call	 _PyParallel_Guard
  002a8	85 c0		 test	 eax, eax
  002aa	75 09		 jne	 SHORT $LN43@permutatio@6
  002ac	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  002b3	74 07		 je	 SHORT $LN44@permutatio@6
$LN43@permutatio@6:
  002b5	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN44@permutatio@6:
  002bc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  002c3	e9 8b fe ff ff	 jmp	 $LN66@permutatio@6
$LN23@permutatio@6:

; 3189 :     {
; 3190 :         PyErr_SetString(PyExc_ValueError, "invalid arguments");

  002c8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  002cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@KNPMEBHA@invalid?5arguments?$AA@
  002d6	e8 00 00 00 00	 call	 PyErr_SetString
  002db	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 3191 :         return NULL;

  002e0	33 c0		 xor	 eax, eax

; 3231 : }

  002e2	48 83 c4 40	 add	 rsp, 64			; 00000040H
  002e6	5e		 pop	 rsi
  002e7	c3		 ret	 0
permutations_setstate ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@BNFGMMGG@O?$HMO?3accumulate?$AA@	; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$accumulate_new DD imagerel accumulate_new
	DD	imagerel accumulate_new+98
	DD	imagerel $unwind$accumulate_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$accumulate_new DD imagerel accumulate_new+98
	DD	imagerel accumulate_new+132
	DD	imagerel $chain$0$accumulate_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$accumulate_new DD imagerel accumulate_new+132
	DD	imagerel accumulate_new+287
	DD	imagerel $chain$3$accumulate_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$accumulate_new DD 040a21H
	DD	0b740aH
	DD	0a6400H
	DD	imagerel accumulate_new
	DD	imagerel accumulate_new+98
	DD	imagerel $unwind$accumulate_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$accumulate_new DD 020521H
	DD	0a6405H
	DD	imagerel accumulate_new
	DD	imagerel accumulate_new+98
	DD	imagerel $unwind$accumulate_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$accumulate_new DD 040a01H
	DD	0c340aH
	DD	05006720aH
xdata	ENDS
;	COMDAT ??_C@_0P@BNFGMMGG@O?$HMO?3accumulate?$AA@
CONST	SEGMENT
??_C@_0P@BNFGMMGG@O?$HMO?3accumulate?$AA@ DB 'O|O:accumulate', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
CONST	ENDS
;	COMDAT accumulate_new
_TEXT	SEGMENT
iterable$ = 48
type$ = 80
args$ = 88
kwds$ = 96
binop$ = 104
accumulate_new PROC					; COMDAT

; 3304 : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	55		 push	 rbp
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	49 8b c0	 mov	 rax, r8
  00010	4c 8b d2	 mov	 r10, rdx

; 3305 :     static char *kwargs[] = {"iterable", "func", NULL};
; 3306 :     PyObject *iterable;
; 3307 :     PyObject *it;
; 3308 :     PyObject *binop = Py_None;
; 3309 :     accumulateobject *lz;
; 3310 : 
; 3311 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|O:accumulate",
; 3312 :                                      kwargs, &iterable, &binop))

  00013	48 8d 4c 24 68	 lea	 rcx, QWORD PTR binop$[rsp]
  00018	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_Py_NoneStruct
  0001f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwargs@?1??accumulate_new@@9@9
  00026	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0002b	48 8d 4c 24 30	 lea	 rcx, QWORD PTR iterable$[rsp]
  00030	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@BNFGMMGG@O?$HMO?3accumulate?$AA@
  00037	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0003c	48 8b d0	 mov	 rdx, rax
  0003f	49 8b ca	 mov	 rcx, r10
  00042	48 89 6c 24 68	 mov	 QWORD PTR binop$[rsp], rbp
  00047	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  0004c	85 c0		 test	 eax, eax
  0004e	75 0d		 jne	 SHORT $LN8@accumulate

; 3313 :         return NULL;

  00050	33 c0		 xor	 eax, eax

; 3334 : }

  00052	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00057	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0005b	5d		 pop	 rbp
  0005c	c3		 ret	 0
$LN8@accumulate:

; 3314 : 
; 3315 :     /* Get iterator. */
; 3316 :     it = PyObject_GetIter(iterable);

  0005d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR iterable$[rsp]
  00062	48 89 74 24 50	 mov	 QWORD PTR [rsp+80], rsi
  00067	e8 00 00 00 00	 call	 PyObject_GetIter
  0006c	48 8b f0	 mov	 rsi, rax

; 3317 :     if (it == NULL)

  0006f	48 85 c0	 test	 rax, rax
  00072	75 10		 jne	 SHORT $LN7@accumulate
  00074	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]

; 3334 : }

  00079	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  0007e	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
$LN7@accumulate:

; 3318 :         return NULL;
; 3319 : 
; 3320 :     /* create accumulateobject structure */
; 3321 :     lz = (accumulateobject *)type->tp_alloc(type, 0);

  00084	33 d2		 xor	 edx, edx
  00086	48 8b cb	 mov	 rcx, rbx
  00089	48 89 7c 24 58	 mov	 QWORD PTR [rsp+88], rdi
  0008e	ff 93 88 01 00
	00		 call	 QWORD PTR [rbx+392]
  00094	48 8b f8	 mov	 rdi, rax

; 3322 :     if (lz == NULL) {

  00097	48 85 c0	 test	 rax, rax
  0009a	75 0c		 jne	 SHORT $LN6@accumulate

; 3323 :         Py_DECREF(it);

  0009c	48 8b ce	 mov	 rcx, rsi
  0009f	e8 00 00 00 00	 call	 _Py_DecRef

; 3324 :         return NULL;

  000a4	33 c0		 xor	 eax, eax
  000a6	eb 62		 jmp	 SHORT $LN17@accumulate
$LN6@accumulate:

; 3325 :     }
; 3326 : 
; 3327 :     if (binop != Py_None) {

  000a8	48 8b 5c 24 68	 mov	 rbx, QWORD PTR binop$[rsp]
  000ad	48 3b dd	 cmp	 rbx, rbp
  000b0	74 49		 je	 SHORT $LN5@accumulate

; 3328 :         Py_XINCREF(binop);

  000b2	48 85 db	 test	 rbx, rbx
  000b5	74 40		 je	 SHORT $LN3@accumulate
  000b7	e8 00 00 00 00	 call	 _Py_PXCTX
  000bc	85 c0		 test	 eax, eax
  000be	75 32		 jne	 SHORT $LN15@accumulate
  000c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000ce	4c 8b cb	 mov	 r9, rbx
  000d1	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000d7	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000df	e8 00 00 00 00	 call	 _PyParallel_Guard
  000e4	85 c0		 test	 eax, eax
  000e6	75 06		 jne	 SHORT $LN11@accumulate
  000e8	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000ec	74 04		 je	 SHORT $LN15@accumulate
$LN11@accumulate:
  000ee	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN15@accumulate:
  000f2	48 8b 5c 24 68	 mov	 rbx, QWORD PTR binop$[rsp]
$LN3@accumulate:

; 3329 :         lz->binop = binop;

  000f7	48 89 5f 70	 mov	 QWORD PTR [rdi+112], rbx
$LN5@accumulate:

; 3330 :     }
; 3331 :     lz->total = NULL;

  000fb	48 c7 47 60 00
	00 00 00	 mov	 QWORD PTR [rdi+96], 0

; 3332 :     lz->it = it;

  00103	48 89 77 68	 mov	 QWORD PTR [rdi+104], rsi

; 3333 :     return (PyObject *)lz;

  00107	48 8b c7	 mov	 rax, rdi
$LN17@accumulate:

; 3334 : }

  0010a	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  0010f	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00114	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00119	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0011d	5d		 pop	 rbp
  0011e	c3		 ret	 0
accumulate_new ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$accumulate_dealloc DD imagerel accumulate_dealloc
	DD	imagerel accumulate_dealloc+372
	DD	imagerel $unwind$accumulate_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$accumulate_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT accumulate_dealloc
_TEXT	SEGMENT
lz$ = 64
accumulate_dealloc PROC					; COMDAT

; 3338 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 3339 :     PyObject_GC_UnTrack(lz);

  0000d	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 3340 :     Py_XDECREF(lz->binop);

  00012	48 8b 5f 70	 mov	 rbx, QWORD PTR [rdi+112]
  00016	48 85 db	 test	 rbx, rbx
  00019	74 65		 je	 SHORT $LN11@accumulate@2
  0001b	e8 00 00 00 00	 call	 _Py_PXCTX
  00020	85 c0		 test	 eax, eax
  00022	75 5c		 jne	 SHORT $LN11@accumulate@2
  00024	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00028	a8 20		 test	 al, 32			; 00000020H
  0002a	75 4c		 jne	 SHORT $LN19@accumulate@2
  0002c	84 c0		 test	 al, al
  0002e	78 48		 js	 SHORT $LN19@accumulate@2
  00030	a8 02		 test	 al, 2
  00032	75 4c		 jne	 SHORT $LN11@accumulate@2
  00034	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00038	75 46		 jne	 SHORT $LN11@accumulate@2
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00048	4c 8b cb	 mov	 r9, rbx
  0004b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00051	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00059	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005e	48 8b cb	 mov	 rcx, rbx
  00061	85 c0		 test	 eax, eax
  00063	74 07		 je	 SHORT $LN24@accumulate@2
  00065	e8 00 00 00 00	 call	 _Px_Dealloc
  0006a	eb 14		 jmp	 SHORT $LN11@accumulate@2
$LN24@accumulate@2:
  0006c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00070	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00076	eb 08		 jmp	 SHORT $LN11@accumulate@2
$LN19@accumulate@2:
  00078	48 8b cb	 mov	 rcx, rbx
  0007b	e8 00 00 00 00	 call	 Px_DecRef
$LN11@accumulate@2:

; 3341 :     Py_XDECREF(lz->total);

  00080	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  00084	48 85 db	 test	 rbx, rbx
  00087	74 65		 je	 SHORT $LN7@accumulate@2
  00089	e8 00 00 00 00	 call	 _Py_PXCTX
  0008e	85 c0		 test	 eax, eax
  00090	75 5c		 jne	 SHORT $LN7@accumulate@2
  00092	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00096	a8 20		 test	 al, 32			; 00000020H
  00098	75 4c		 jne	 SHORT $LN30@accumulate@2
  0009a	84 c0		 test	 al, al
  0009c	78 48		 js	 SHORT $LN30@accumulate@2
  0009e	a8 02		 test	 al, 2
  000a0	75 4c		 jne	 SHORT $LN7@accumulate@2
  000a2	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000a6	75 46		 jne	 SHORT $LN7@accumulate@2
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000b6	4c 8b cb	 mov	 r9, rbx
  000b9	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000bf	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cc	48 8b cb	 mov	 rcx, rbx
  000cf	85 c0		 test	 eax, eax
  000d1	74 07		 je	 SHORT $LN35@accumulate@2
  000d3	e8 00 00 00 00	 call	 _Px_Dealloc
  000d8	eb 14		 jmp	 SHORT $LN7@accumulate@2
$LN35@accumulate@2:
  000da	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000de	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000e4	eb 08		 jmp	 SHORT $LN7@accumulate@2
$LN30@accumulate@2:
  000e6	48 8b cb	 mov	 rcx, rbx
  000e9	e8 00 00 00 00	 call	 Px_DecRef
$LN7@accumulate@2:

; 3342 :     Py_XDECREF(lz->it);

  000ee	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  000f2	48 85 db	 test	 rbx, rbx
  000f5	74 65		 je	 SHORT $LN3@accumulate@2
  000f7	e8 00 00 00 00	 call	 _Py_PXCTX
  000fc	85 c0		 test	 eax, eax
  000fe	75 5c		 jne	 SHORT $LN3@accumulate@2
  00100	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00104	a8 20		 test	 al, 32			; 00000020H
  00106	75 4c		 jne	 SHORT $LN41@accumulate@2
  00108	84 c0		 test	 al, al
  0010a	78 48		 js	 SHORT $LN41@accumulate@2
  0010c	a8 02		 test	 al, 2
  0010e	75 4c		 jne	 SHORT $LN3@accumulate@2
  00110	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00114	75 46		 jne	 SHORT $LN3@accumulate@2
  00116	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0011d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00124	4c 8b cb	 mov	 r9, rbx
  00127	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0012d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00135	e8 00 00 00 00	 call	 _PyParallel_Guard
  0013a	48 8b cb	 mov	 rcx, rbx
  0013d	85 c0		 test	 eax, eax
  0013f	74 07		 je	 SHORT $LN46@accumulate@2
  00141	e8 00 00 00 00	 call	 _Px_Dealloc
  00146	eb 14		 jmp	 SHORT $LN3@accumulate@2
$LN46@accumulate@2:
  00148	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0014c	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00152	eb 08		 jmp	 SHORT $LN3@accumulate@2
$LN41@accumulate@2:
  00154	48 8b cb	 mov	 rcx, rbx
  00157	e8 00 00 00 00	 call	 Px_DecRef
$LN3@accumulate@2:

; 3343 :     Py_TYPE(lz)->tp_free(lz);

  0015c	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00160	48 8b cf	 mov	 rcx, rdi

; 3344 : }

  00163	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00168	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0016c	5f		 pop	 rdi
  0016d	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
accumulate_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@LMNABLBL@accumulate_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$accumulate_traverse DD imagerel accumulate_traverse
	DD	imagerel accumulate_traverse+207
	DD	imagerel $unwind$accumulate_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$accumulate_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BE@LMNABLBL@accumulate_traverse?$AA@
CONST	SEGMENT
??_C@_0BE@LMNABLBL@accumulate_traverse?$AA@ DB 'accumulate_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT accumulate_traverse
_TEXT	SEGMENT
lz$ = 48
visit$ = 56
arg$ = 64
accumulate_traverse PROC				; COMDAT

; 3348 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 3349 :     Py_VISIT(lz->binop);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN15@accumulate@3
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@LMNABLBL@accumulate_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 15 0d 00
	00		 mov	 r8d, 3349		; 00000d15H
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN15@accumulate@3:
  0003d	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN17@accumulate@3
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 70		 jne	 SHORT $LN19@accumulate@3
$LN17@accumulate@3:

; 3350 :     Py_VISIT(lz->it);

  0004f	e8 00 00 00 00	 call	 _Py_PXCTX
  00054	85 c0		 test	 eax, eax
  00056	74 1c		 je	 SHORT $LN9@accumulate@3
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@LMNABLBL@accumulate_traverse?$AA@
  00066	45 33 c9	 xor	 r9d, r9d
  00069	41 b8 16 0d 00
	00		 mov	 r8d, 3350		; 00000d16H
  0006f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@accumulate@3:
  00074	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00078	48 85 c9	 test	 rcx, rcx
  0007b	74 09		 je	 SHORT $LN11@accumulate@3
  0007d	48 8b d7	 mov	 rdx, rdi
  00080	ff d6		 call	 rsi
  00082	85 c0		 test	 eax, eax
  00084	75 39		 jne	 SHORT $LN19@accumulate@3
$LN11@accumulate@3:

; 3351 :     Py_VISIT(lz->total);

  00086	e8 00 00 00 00	 call	 _Py_PXCTX
  0008b	85 c0		 test	 eax, eax
  0008d	74 1c		 je	 SHORT $LN3@accumulate@3
  0008f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  00096	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@LMNABLBL@accumulate_traverse?$AA@
  0009d	45 33 c9	 xor	 r9d, r9d
  000a0	41 b8 17 0d 00
	00		 mov	 r8d, 3351		; 00000d17H
  000a6	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@accumulate@3:
  000ab	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  000af	48 85 c9	 test	 rcx, rcx
  000b2	74 09		 je	 SHORT $LN5@accumulate@3
  000b4	48 8b d7	 mov	 rdx, rdi
  000b7	ff d6		 call	 rsi
  000b9	85 c0		 test	 eax, eax
  000bb	75 02		 jne	 SHORT $LN19@accumulate@3
$LN5@accumulate@3:

; 3352 :     return 0;

  000bd	33 c0		 xor	 eax, eax
$LN19@accumulate@3:

; 3353 : }

  000bf	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000c4	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000c9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000cd	5f		 pop	 rdi
  000ce	c3		 ret	 0
accumulate_traverse ENDP
_TEXT	ENDS
EXTRN	PyNumber_Add:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$accumulate_next DD imagerel accumulate_next
	DD	imagerel accumulate_next+131
	DD	imagerel $unwind$accumulate_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$accumulate_next DD imagerel accumulate_next+131
	DD	imagerel accumulate_next+202
	DD	imagerel $chain$0$accumulate_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$accumulate_next DD imagerel accumulate_next+202
	DD	imagerel accumulate_next+242
	DD	imagerel $chain$2$accumulate_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$accumulate_next DD 020021H
	DD	086400H
	DD	imagerel accumulate_next
	DD	imagerel accumulate_next+131
	DD	imagerel $unwind$accumulate_next
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$accumulate_next DD 020521H
	DD	086405H
	DD	imagerel accumulate_next
	DD	imagerel accumulate_next+131
	DD	imagerel $unwind$accumulate_next
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$accumulate_next DD 040a01H
	DD	09340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT accumulate_next
_TEXT	SEGMENT
lz$ = 64
accumulate_next PROC					; COMDAT

; 3357 : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 3358 :     PyObject *val, *oldtotal, *newtotal;
; 3359 : 
; 3360 :     val = PyIter_Next(lz->it);

  0000d	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00011	e8 00 00 00 00	 call	 PyIter_Next
  00016	48 8b d8	 mov	 rbx, rax

; 3361 :     if (val == NULL)

  00019	48 85 c0	 test	 rax, rax
  0001c	75 0b		 jne	 SHORT $LN5@accumulate@4

; 3383 :     return newtotal;
; 3384 : }

  0001e	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00023	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00027	5f		 pop	 rdi
  00028	c3		 ret	 0
$LN5@accumulate@4:

; 3362 :         return NULL;
; 3363 : 
; 3364 :     if (lz->total == NULL) {

  00029	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  0002d	48 85 c0	 test	 rax, rax
  00030	75 4d		 jne	 SHORT $LN4@accumulate@4

; 3365 :         Py_INCREF(val);

  00032	e8 00 00 00 00	 call	 _Py_PXCTX
  00037	85 c0		 test	 eax, eax
  00039	75 32		 jne	 SHORT $LN9@accumulate@4
  0003b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00049	4c 8b cb	 mov	 r9, rbx
  0004c	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00052	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0005a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005f	85 c0		 test	 eax, eax
  00061	75 06		 jne	 SHORT $LN8@accumulate@4
  00063	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00067	74 04		 je	 SHORT $LN9@accumulate@4
$LN8@accumulate@4:
  00069	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN9@accumulate@4:

; 3366 :         lz->total = val;

  0006d	48 89 5f 60	 mov	 QWORD PTR [rdi+96], rbx

; 3367 :         return lz->total;

  00071	48 8b c3	 mov	 rax, rbx

; 3383 :     return newtotal;
; 3384 : }

  00074	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00079	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0007d	5f		 pop	 rdi
  0007e	c3		 ret	 0
$LN4@accumulate@4:

; 3368 :     }
; 3369 : 
; 3370 :     if (lz->binop == NULL)

  0007f	48 8b 4f 70	 mov	 rcx, QWORD PTR [rdi+112]
  00083	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  00088	48 85 c9	 test	 rcx, rcx
  0008b	75 0d		 jne	 SHORT $LN3@accumulate@4

; 3371 :         newtotal = PyNumber_Add(lz->total, val);

  0008d	48 8b d3	 mov	 rdx, rbx
  00090	48 8b c8	 mov	 rcx, rax
  00093	e8 00 00 00 00	 call	 PyNumber_Add

; 3372 :     else

  00098	eb 0e		 jmp	 SHORT $LN13@accumulate@4
$LN3@accumulate@4:

; 3373 :         newtotal = PyObject_CallFunctionObjArgs(lz->binop, lz->total, val, NULL);

  0009a	45 33 c9	 xor	 r9d, r9d
  0009d	4c 8b c3	 mov	 r8, rbx
  000a0	48 8b d0	 mov	 rdx, rax
  000a3	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
$LN13@accumulate@4:

; 3374 :     Py_DECREF(val);

  000a8	48 8b cb	 mov	 rcx, rbx
  000ab	48 8b f0	 mov	 rsi, rax
  000ae	e8 00 00 00 00	 call	 _Py_DecRef

; 3375 :     if (newtotal == NULL)

  000b3	48 85 f6	 test	 rsi, rsi
  000b6	75 12		 jne	 SHORT $LN1@accumulate@4

; 3376 :         return NULL;

  000b8	33 c0		 xor	 eax, eax
  000ba	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]

; 3383 :     return newtotal;
; 3384 : }

  000bf	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000c4	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c8	5f		 pop	 rdi
  000c9	c3		 ret	 0
$LN1@accumulate@4:

; 3377 : 
; 3378 :     oldtotal = lz->total;

  000ca	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]

; 3379 :     lz->total = newtotal;

  000ce	48 89 77 60	 mov	 QWORD PTR [rdi+96], rsi

; 3380 :     Py_DECREF(oldtotal);

  000d2	e8 00 00 00 00	 call	 _Py_DecRef

; 3381 : 
; 3382 :     Py_INCREF(newtotal);

  000d7	48 8b ce	 mov	 rcx, rsi
  000da	e8 00 00 00 00	 call	 _Py_IncRef

; 3383 :     return newtotal;
; 3384 : }

  000df	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000e4	48 8b c6	 mov	 rax, rsi
  000e7	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000ec	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000f0	5f		 pop	 rdi
  000f1	c3		 ret	 0
accumulate_next ENDP
_TEXT	ENDS
PUBLIC	??_C@_06GCIGALBM@O?$CIOO?$CJO?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$accumulate_reduce DD imagerel accumulate_reduce
	DD	imagerel accumulate_reduce+66
	DD	imagerel $unwind$accumulate_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$accumulate_reduce DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_06GCIGALBM@O?$CIOO?$CJO?$AA@
CONST	SEGMENT
??_C@_06GCIGALBM@O?$CIOO?$CJO?$AA@ DB 'O(OO)O', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT accumulate_reduce
_TEXT	SEGMENT
lz$ = 64
accumulate_reduce PROC					; COMDAT

; 3388 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3389 :     return Py_BuildValue("O(OO)O", Py_TYPE(lz),
; 3390 :                             lz->it, lz->binop?lz->binop:Py_None,
; 3391 :                             lz->total?lz->total:Py_None);

  00004	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  00008	4c 8b 41 68	 mov	 r8, QWORD PTR [rcx+104]
  0000c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00013	48 85 c0	 test	 rax, rax
  00016	49 8b d1	 mov	 rdx, r9
  00019	48 0f 45 d0	 cmovne	 rdx, rax
  0001d	48 8b 41 70	 mov	 rax, QWORD PTR [rcx+112]
  00021	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  00026	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0002a	48 85 c0	 test	 rax, rax
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06GCIGALBM@O?$CIOO?$CJO?$AA@
  00034	4c 0f 45 c8	 cmovne	 r9, rax
  00038	e8 00 00 00 00	 call	 Py_BuildValue

; 3392 :  }

  0003d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00041	c3		 ret	 0
accumulate_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@NBIHDMPM@accumulate_setstate?$AA@	; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$accumulate_setstate DD imagerel accumulate_setstate
	DD	imagerel accumulate_setstate+10
	DD	imagerel $unwind$accumulate_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$accumulate_setstate DD imagerel accumulate_setstate+10
	DD	imagerel accumulate_setstate+203
	DD	imagerel $chain$1$accumulate_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$accumulate_setstate DD imagerel accumulate_setstate+203
	DD	imagerel accumulate_setstate+267
	DD	imagerel $chain$2$accumulate_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$accumulate_setstate DD imagerel accumulate_setstate+267
	DD	imagerel accumulate_setstate+352
	DD	imagerel $chain$3$accumulate_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$accumulate_setstate DD 021H
	DD	imagerel accumulate_setstate
	DD	imagerel accumulate_setstate+10
	DD	imagerel $unwind$accumulate_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$accumulate_setstate DD 020021H
	DD	097400H
	DD	imagerel accumulate_setstate
	DD	imagerel accumulate_setstate+10
	DD	imagerel $unwind$accumulate_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$accumulate_setstate DD 040a21H
	DD	09740aH
	DD	086405H
	DD	imagerel accumulate_setstate
	DD	imagerel accumulate_setstate+10
	DD	imagerel $unwind$accumulate_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$accumulate_setstate DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0BE@NBIHDMPM@accumulate_setstate?$AA@
CONST	SEGMENT
??_C@_0BE@NBIHDMPM@accumulate_setstate?$AA@ DB 'accumulate_setstate', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
CONST	ENDS
;	COMDAT accumulate_setstate
_TEXT	SEGMENT
lz$ = 64
state$ = 72
accumulate_setstate PROC				; COMDAT

; 3396 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 3397 :     Py_CLEAR(lz->total);

  00006	4c 8b 49 60	 mov	 r9, QWORD PTR [rcx+96]
  0000a	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  0000f	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  00014	48 8b fa	 mov	 rdi, rdx
  00017	48 8b f1	 mov	 rsi, rcx
  0001a	4d 85 c9	 test	 r9, r9
  0001d	0f 84 96 00 00
	00		 je	 $LN3@accumulate@5
  00023	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@NBIHDMPM@accumulate_setstate?$AA@
  00031	41 b8 45 0d 00
	00		 mov	 r8d, 3397		; 00000d45H
  00037	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0003f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00044	85 c0		 test	 eax, eax
  00046	75 71		 jne	 SHORT $LN3@accumulate@5
  00048	48 8b 5e 60	 mov	 rbx, QWORD PTR [rsi+96]
  0004c	48 c7 46 60 00
	00 00 00	 mov	 QWORD PTR [rsi+96], 0
  00054	e8 00 00 00 00	 call	 _Py_PXCTX
  00059	85 c0		 test	 eax, eax
  0005b	75 5c		 jne	 SHORT $LN3@accumulate@5
  0005d	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00061	a8 20		 test	 al, 32			; 00000020H
  00063	75 4c		 jne	 SHORT $LN11@accumulate@5
  00065	84 c0		 test	 al, al
  00067	78 48		 js	 SHORT $LN11@accumulate@5
  00069	a8 02		 test	 al, 2
  0006b	75 4c		 jne	 SHORT $LN3@accumulate@5
  0006d	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00071	75 46		 jne	 SHORT $LN3@accumulate@5
  00073	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0007a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00081	4c 8b cb	 mov	 r9, rbx
  00084	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0008a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00092	e8 00 00 00 00	 call	 _PyParallel_Guard
  00097	48 8b cb	 mov	 rcx, rbx
  0009a	85 c0		 test	 eax, eax
  0009c	74 07		 je	 SHORT $LN16@accumulate@5
  0009e	e8 00 00 00 00	 call	 _Px_Dealloc
  000a3	eb 14		 jmp	 SHORT $LN3@accumulate@5
$LN16@accumulate@5:
  000a5	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000a9	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000af	eb 08		 jmp	 SHORT $LN3@accumulate@5
$LN11@accumulate@5:
  000b1	48 8b cb	 mov	 rcx, rbx
  000b4	e8 00 00 00 00	 call	 Px_DecRef
$LN3@accumulate@5:

; 3398 :     lz->total = state;

  000b9	48 89 7e 60	 mov	 QWORD PTR [rsi+96], rdi

; 3399 :     Py_INCREF(lz->total);

  000bd	e8 00 00 00 00	 call	 _Py_PXCTX
  000c2	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000c7	85 c0		 test	 eax, eax
  000c9	75 32		 jne	 SHORT $LN19@accumulate@5
  000cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000d9	4c 8b cf	 mov	 r9, rdi
  000dc	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000e2	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000ea	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ef	85 c0		 test	 eax, eax
  000f1	75 06		 jne	 SHORT $LN18@accumulate@5
  000f3	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  000f7	74 04		 je	 SHORT $LN19@accumulate@5
$LN18@accumulate@5:
  000f9	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN19@accumulate@5:

; 3400 :     Py_RETURN_NONE;

  000fd	e8 00 00 00 00	 call	 _Py_PXCTX
  00102	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00107	85 c0		 test	 eax, eax
  00109	75 48		 jne	 SHORT $LN26@accumulate@5
  0010b	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  00112	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00119	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00120	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00126	4c 8b cb	 mov	 r9, rbx
  00129	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00131	e8 00 00 00 00	 call	 _PyParallel_Guard
  00136	85 c0		 test	 eax, eax
  00138	75 09		 jne	 SHORT $LN22@accumulate@5
  0013a	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00141	74 07		 je	 SHORT $LN28@accumulate@5
$LN22@accumulate@5:
  00143	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN28@accumulate@5:
  0014a	48 8b c3	 mov	 rax, rbx

; 3401 : }

  0014d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00151	5b		 pop	 rbx
  00152	c3		 ret	 0
$LN26@accumulate@5:

; 3400 :     Py_RETURN_NONE;

  00153	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 3401 : }

  0015a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0015e	5b		 pop	 rbx
  0015f	c3		 ret	 0
accumulate_setstate ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@KMJFIJPJ@OO?3compress?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$compress_new DD imagerel compress_new
	DD	imagerel compress_new+77
	DD	imagerel $unwind$compress_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$compress_new DD imagerel compress_new+77
	DD	imagerel compress_new+162
	DD	imagerel $chain$1$compress_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$compress_new DD imagerel compress_new+162
	DD	imagerel compress_new+369
	DD	imagerel $chain$3$compress_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$compress_new DD imagerel compress_new+369
	DD	imagerel compress_new+397
	DD	imagerel $chain$5$compress_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$compress_new DD imagerel compress_new+397
	DD	imagerel compress_new+423
	DD	imagerel $chain$7$compress_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$compress_new DD 040021H
	DD	0b7400H
	DD	0a3400H
	DD	imagerel compress_new
	DD	imagerel compress_new+77
	DD	imagerel $unwind$compress_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$compress_new DD 040021H
	DD	0b7400H
	DD	0a3400H
	DD	imagerel compress_new
	DD	imagerel compress_new+77
	DD	imagerel $unwind$compress_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$compress_new DD 040021H
	DD	0b7400H
	DD	0a3400H
	DD	imagerel compress_new
	DD	imagerel compress_new+77
	DD	imagerel $unwind$compress_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$compress_new DD 040a21H
	DD	0b740aH
	DD	0a3405H
	DD	imagerel compress_new
	DD	imagerel compress_new+77
	DD	imagerel $unwind$compress_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$compress_new DD 020601H
	DD	060027206H
xdata	ENDS
;	COMDAT ??_C@_0M@KMJFIJPJ@OO?3compress?$AA@
CONST	SEGMENT
??_C@_0M@KMJFIJPJ@OO?3compress?$AA@ DB 'OO:compress', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
CONST	ENDS
;	COMDAT compress_new
_TEXT	SEGMENT
seq2$ = 48
type$ = 80
args$ = 88
kwds$ = 96
seq1$ = 104
compress_new PROC					; COMDAT

; 3480 : {

  00000	40 56		 push	 rsi
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00006	48 8b f1	 mov	 rsi, rcx
  00009	49 8b c0	 mov	 rax, r8
  0000c	4c 8b d2	 mov	 r10, rdx

; 3481 :     PyObject *seq1, *seq2;
; 3482 :     PyObject *data=NULL, *selectors=NULL;
; 3483 :     compressobject *lz;
; 3484 :     static char *kwargs[] = {"data", "selectors", NULL};
; 3485 : 
; 3486 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "OO:compress", kwargs, &seq1, &seq2))

  0000f	48 8d 4c 24 30	 lea	 rcx, QWORD PTR seq2$[rsp]
  00014	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwargs@?1??compress_new@@9@9
  0001b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@KMJFIJPJ@OO?3compress?$AA@
  00022	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00027	48 8d 4c 24 68	 lea	 rcx, QWORD PTR seq1$[rsp]
  0002c	48 8b d0	 mov	 rdx, rax
  0002f	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00034	49 8b ca	 mov	 rcx, r10
  00037	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  0003c	85 c0		 test	 eax, eax
  0003e	75 08		 jne	 SHORT $LN12@compress_n

; 3487 :         return NULL;

  00040	33 c0		 xor	 eax, eax

; 3508 : }

  00042	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00046	5e		 pop	 rsi
  00047	c3		 ret	 0
$LN12@compress_n:

; 3488 : 
; 3489 :     data = PyObject_GetIter(seq1);

  00048	48 8b 4c 24 68	 mov	 rcx, QWORD PTR seq1$[rsp]
  0004d	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  00052	48 89 7c 24 58	 mov	 QWORD PTR [rsp+88], rdi
  00057	e8 00 00 00 00	 call	 PyObject_GetIter
  0005c	48 8b f8	 mov	 rdi, rax

; 3490 :     if (data == NULL)

  0005f	48 85 c0	 test	 rax, rax
  00062	0f 84 2d 01 00
	00		 je	 $LN3@compress_n

; 3491 :         goto fail;
; 3492 :     selectors = PyObject_GetIter(seq2);

  00068	48 8b 4c 24 30	 mov	 rcx, QWORD PTR seq2$[rsp]
  0006d	e8 00 00 00 00	 call	 PyObject_GetIter
  00072	48 8b d8	 mov	 rbx, rax

; 3493 :     if (selectors == NULL)

  00075	48 85 c0	 test	 rax, rax
  00078	74 28		 je	 SHORT $fail$23294

; 3494 :         goto fail;
; 3495 : 
; 3496 :     /* create compressobject structure */
; 3497 :     lz = (compressobject *)type->tp_alloc(type, 0);

  0007a	33 d2		 xor	 edx, edx
  0007c	48 8b ce	 mov	 rcx, rsi
  0007f	ff 96 88 01 00
	00		 call	 QWORD PTR [rsi+392]

; 3498 :     if (lz == NULL)

  00085	48 85 c0	 test	 rax, rax
  00088	74 18		 je	 SHORT $fail$23294

; 3499 :         goto fail;
; 3500 :     lz->data = data;

  0008a	48 89 78 60	 mov	 QWORD PTR [rax+96], rdi
  0008e	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]

; 3501 :     lz->selectors = selectors;

  00093	48 89 58 68	 mov	 QWORD PTR [rax+104], rbx
  00097	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]

; 3508 : }

  0009c	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
$fail$23294:

; 3502 :     return (PyObject *)lz;
; 3503 : 
; 3504 : fail:
; 3505 :     Py_XDECREF(data);

  000a2	e8 00 00 00 00	 call	 _Py_PXCTX
  000a7	85 c0		 test	 eax, eax
  000a9	75 5c		 jne	 SHORT $LN7@compress_n
  000ab	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  000af	a8 20		 test	 al, 32			; 00000020H
  000b1	75 4c		 jne	 SHORT $LN19@compress_n
  000b3	84 c0		 test	 al, al
  000b5	78 48		 js	 SHORT $LN19@compress_n
  000b7	a8 02		 test	 al, 2
  000b9	75 4c		 jne	 SHORT $LN7@compress_n
  000bb	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  000bf	75 46		 jne	 SHORT $LN7@compress_n
  000c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000cf	4c 8b cf	 mov	 r9, rdi
  000d2	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000d8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000e0	e8 00 00 00 00	 call	 _PyParallel_Guard
  000e5	48 8b cf	 mov	 rcx, rdi
  000e8	85 c0		 test	 eax, eax
  000ea	74 07		 je	 SHORT $LN24@compress_n
  000ec	e8 00 00 00 00	 call	 _Px_Dealloc
  000f1	eb 14		 jmp	 SHORT $LN7@compress_n
$LN24@compress_n:
  000f3	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000f7	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000fd	eb 08		 jmp	 SHORT $LN7@compress_n
$LN19@compress_n:
  000ff	48 8b cf	 mov	 rcx, rdi
  00102	e8 00 00 00 00	 call	 Px_DecRef
$LN7@compress_n:

; 3506 :     Py_XDECREF(selectors);

  00107	48 85 db	 test	 rbx, rbx
  0010a	0f 84 85 00 00
	00		 je	 $LN3@compress_n
  00110	e8 00 00 00 00	 call	 _Py_PXCTX
  00115	85 c0		 test	 eax, eax
  00117	75 7c		 jne	 SHORT $LN3@compress_n
  00119	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0011d	a8 20		 test	 al, 32			; 00000020H
  0011f	75 6c		 jne	 SHORT $LN30@compress_n
  00121	84 c0		 test	 al, al
  00123	78 68		 js	 SHORT $LN30@compress_n
  00125	a8 02		 test	 al, 2
  00127	75 6c		 jne	 SHORT $LN3@compress_n
  00129	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0012d	75 66		 jne	 SHORT $LN3@compress_n
  0012f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00136	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0013d	4c 8b cb	 mov	 r9, rbx
  00140	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00146	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0014e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00153	48 8b cb	 mov	 rcx, rbx
  00156	85 c0		 test	 eax, eax
  00158	74 17		 je	 SHORT $LN35@compress_n
  0015a	e8 00 00 00 00	 call	 _Px_Dealloc
  0015f	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00164	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]

; 3507 :     return NULL;

  00169	33 c0		 xor	 eax, eax

; 3508 : }

  0016b	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0016f	5e		 pop	 rsi
  00170	c3		 ret	 0

; 3506 :     Py_XDECREF(selectors);

$LN35@compress_n:
  00171	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00175	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0017b	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00180	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]

; 3507 :     return NULL;

  00185	33 c0		 xor	 eax, eax

; 3508 : }

  00187	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0018b	5e		 pop	 rsi
  0018c	c3		 ret	 0

; 3506 :     Py_XDECREF(selectors);

$LN30@compress_n:
  0018d	48 8b cb	 mov	 rcx, rbx
  00190	e8 00 00 00 00	 call	 Px_DecRef
$LN3@compress_n:

; 3507 :     return NULL;

  00195	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0019a	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  0019f	33 c0		 xor	 eax, eax

; 3508 : }

  001a1	48 83 c4 40	 add	 rsp, 64			; 00000040H
  001a5	5e		 pop	 rsi
  001a6	c3		 ret	 0
compress_new ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$compress_dealloc DD imagerel compress_dealloc
	DD	imagerel compress_dealloc+262
	DD	imagerel $unwind$compress_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$compress_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT compress_dealloc
_TEXT	SEGMENT
lz$ = 64
compress_dealloc PROC					; COMDAT

; 3512 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 3513 :     PyObject_GC_UnTrack(lz);

  0000d	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 3514 :     Py_XDECREF(lz->data);

  00012	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  00016	48 85 db	 test	 rbx, rbx
  00019	74 65		 je	 SHORT $LN7@compress_d
  0001b	e8 00 00 00 00	 call	 _Py_PXCTX
  00020	85 c0		 test	 eax, eax
  00022	75 5c		 jne	 SHORT $LN7@compress_d
  00024	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00028	a8 20		 test	 al, 32			; 00000020H
  0002a	75 4c		 jne	 SHORT $LN15@compress_d
  0002c	84 c0		 test	 al, al
  0002e	78 48		 js	 SHORT $LN15@compress_d
  00030	a8 02		 test	 al, 2
  00032	75 4c		 jne	 SHORT $LN7@compress_d
  00034	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00038	75 46		 jne	 SHORT $LN7@compress_d
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00048	4c 8b cb	 mov	 r9, rbx
  0004b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00051	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00059	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005e	48 8b cb	 mov	 rcx, rbx
  00061	85 c0		 test	 eax, eax
  00063	74 07		 je	 SHORT $LN20@compress_d
  00065	e8 00 00 00 00	 call	 _Px_Dealloc
  0006a	eb 14		 jmp	 SHORT $LN7@compress_d
$LN20@compress_d:
  0006c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00070	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00076	eb 08		 jmp	 SHORT $LN7@compress_d
$LN15@compress_d:
  00078	48 8b cb	 mov	 rcx, rbx
  0007b	e8 00 00 00 00	 call	 Px_DecRef
$LN7@compress_d:

; 3515 :     Py_XDECREF(lz->selectors);

  00080	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  00084	48 85 db	 test	 rbx, rbx
  00087	74 65		 je	 SHORT $LN3@compress_d
  00089	e8 00 00 00 00	 call	 _Py_PXCTX
  0008e	85 c0		 test	 eax, eax
  00090	75 5c		 jne	 SHORT $LN3@compress_d
  00092	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00096	a8 20		 test	 al, 32			; 00000020H
  00098	75 4c		 jne	 SHORT $LN26@compress_d
  0009a	84 c0		 test	 al, al
  0009c	78 48		 js	 SHORT $LN26@compress_d
  0009e	a8 02		 test	 al, 2
  000a0	75 4c		 jne	 SHORT $LN3@compress_d
  000a2	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000a6	75 46		 jne	 SHORT $LN3@compress_d
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000b6	4c 8b cb	 mov	 r9, rbx
  000b9	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000bf	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cc	48 8b cb	 mov	 rcx, rbx
  000cf	85 c0		 test	 eax, eax
  000d1	74 07		 je	 SHORT $LN31@compress_d
  000d3	e8 00 00 00 00	 call	 _Px_Dealloc
  000d8	eb 14		 jmp	 SHORT $LN3@compress_d
$LN31@compress_d:
  000da	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000de	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000e4	eb 08		 jmp	 SHORT $LN3@compress_d
$LN26@compress_d:
  000e6	48 8b cb	 mov	 rcx, rbx
  000e9	e8 00 00 00 00	 call	 Px_DecRef
$LN3@compress_d:

; 3516 :     Py_TYPE(lz)->tp_free(lz);

  000ee	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000f2	48 8b cf	 mov	 rcx, rdi

; 3517 : }

  000f5	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000fa	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000fe	5f		 pop	 rdi
  000ff	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
compress_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@BPBGIEMH@compress_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$compress_traverse DD imagerel compress_traverse
	DD	imagerel compress_traverse+152
	DD	imagerel $unwind$compress_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$compress_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BC@BPBGIEMH@compress_traverse?$AA@
CONST	SEGMENT
??_C@_0BC@BPBGIEMH@compress_traverse?$AA@ DB 'compress_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT compress_traverse
_TEXT	SEGMENT
lz$ = 48
visit$ = 56
arg$ = 64
compress_traverse PROC					; COMDAT

; 3521 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 3522 :     Py_VISIT(lz->data);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN9@compress_t
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@BPBGIEMH@compress_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 c2 0d 00
	00		 mov	 r8d, 3522		; 00000dc2H
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@compress_t:
  0003d	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN11@compress_t
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 39		 jne	 SHORT $LN13@compress_t
$LN11@compress_t:

; 3523 :     Py_VISIT(lz->selectors);

  0004f	e8 00 00 00 00	 call	 _Py_PXCTX
  00054	85 c0		 test	 eax, eax
  00056	74 1c		 je	 SHORT $LN3@compress_t
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@BPBGIEMH@compress_traverse?$AA@
  00066	45 33 c9	 xor	 r9d, r9d
  00069	41 b8 c3 0d 00
	00		 mov	 r8d, 3523		; 00000dc3H
  0006f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@compress_t:
  00074	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00078	48 85 c9	 test	 rcx, rcx
  0007b	74 09		 je	 SHORT $LN5@compress_t
  0007d	48 8b d7	 mov	 rdx, rdi
  00080	ff d6		 call	 rsi
  00082	85 c0		 test	 eax, eax
  00084	75 02		 jne	 SHORT $LN13@compress_t
$LN5@compress_t:

; 3524 :     return 0;

  00086	33 c0		 xor	 eax, eax
$LN13@compress_t:

; 3525 : }

  00088	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00092	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00096	5f		 pop	 rdi
  00097	c3		 ret	 0
compress_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$compress_next DD imagerel compress_next
	DD	imagerel compress_next+387
	DD	imagerel $unwind$compress_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$compress_next DD 0c1e01H
	DD	0d741eH
	DD	0c641eH
	DD	0b541eH
	DD	0a341eH
	DD	0e01a521eH
	DD	0c016d018H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT compress_next
_TEXT	SEGMENT
lz$ = 80
compress_next PROC					; COMDAT

; 3529 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	41 55		 push	 r13
  00018	41 56		 push	 r14
  0001a	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 3530 :     PyObject *data = lz->data, *selectors = lz->selectors;

  0001e	48 8b 69 60	 mov	 rbp, QWORD PTR [rcx+96]
  00022	4c 8b 69 68	 mov	 r13, QWORD PTR [rcx+104]

; 3531 :     PyObject *datum, *selector;
; 3532 :     PyObject *(*datanext)(PyObject *) = *Py_TYPE(data)->tp_iternext;

  00026	48 8b 45 58	 mov	 rax, QWORD PTR [rbp+88]

; 3533 :     PyObject *(*selectornext)(PyObject *) = *Py_TYPE(selectors)->tp_iternext;
; 3534 :     int ok;
; 3535 : 
; 3536 :     while (1) {
; 3537 :         /* Steps:  get datum, get selector, evaluate selector.
; 3538 :            Order is important (to match the pure python version
; 3539 :            in terms of which input gets a chance to raise an
; 3540 :            exception first).
; 3541 :         */
; 3542 : 
; 3543 :         datum = datanext(data);

  0002a	48 8b cd	 mov	 rcx, rbp
  0002d	4c 8b a0 38 01
	00 00		 mov	 r12, QWORD PTR [rax+312]
  00034	49 8b 45 58	 mov	 rax, QWORD PTR [r13+88]
  00038	4c 8b b0 38 01
	00 00		 mov	 r14, QWORD PTR [rax+312]
  0003f	41 ff d4	 call	 r12
  00042	48 8b f8	 mov	 rdi, rax

; 3544 :         if (datum == NULL)

  00045	48 85 c0	 test	 rax, rax
  00048	0f 84 14 01 00
	00		 je	 $LN33@compress_n@2
  0004e	66 90		 npad	 2
$LL6@compress_n@2:

; 3546 : 
; 3547 :         selector = selectornext(selectors);

  00050	49 8b cd	 mov	 rcx, r13
  00053	41 ff d6	 call	 r14
  00056	48 8b d8	 mov	 rbx, rax

; 3548 :         if (selector == NULL) {

  00059	48 85 c0	 test	 rax, rax
  0005c	0f 84 f8 00 00
	00		 je	 $LN34@compress_n@2

; 3550 :             return NULL;
; 3551 :         }
; 3552 : 
; 3553 :         ok = PyObject_IsTrue(selector);

  00062	48 8b c8	 mov	 rcx, rax
  00065	e8 00 00 00 00	 call	 PyObject_IsTrue
  0006a	8b f0		 mov	 esi, eax

; 3554 :         Py_DECREF(selector);

  0006c	e8 00 00 00 00	 call	 _Py_PXCTX
  00071	85 c0		 test	 eax, eax
  00073	75 5e		 jne	 SHORT $LN19@compress_n@2
  00075	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00079	f6 c1 20	 test	 cl, 32			; 00000020H
  0007c	75 4d		 jne	 SHORT $LN13@compress_n@2
  0007e	84 c9		 test	 cl, cl
  00080	78 49		 js	 SHORT $LN13@compress_n@2
  00082	f6 c1 02	 test	 cl, 2
  00085	75 4c		 jne	 SHORT $LN19@compress_n@2
  00087	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0008b	75 46		 jne	 SHORT $LN19@compress_n@2
  0008d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00094	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0009b	4c 8b cb	 mov	 r9, rbx
  0009e	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b1	48 8b cb	 mov	 rcx, rbx
  000b4	85 c0		 test	 eax, eax
  000b6	74 07		 je	 SHORT $LN18@compress_n@2
  000b8	e8 00 00 00 00	 call	 _Px_Dealloc
  000bd	eb 14		 jmp	 SHORT $LN19@compress_n@2
$LN18@compress_n@2:
  000bf	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000c3	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000c9	eb 08		 jmp	 SHORT $LN19@compress_n@2
$LN13@compress_n@2:
  000cb	48 8b cb	 mov	 rcx, rbx
  000ce	e8 00 00 00 00	 call	 Px_DecRef
$LN19@compress_n@2:

; 3555 :         if (ok == 1)

  000d3	83 fe 01	 cmp	 esi, 1
  000d6	74 7d		 je	 SHORT $LN35@compress_n@2

; 3557 :         Py_DECREF(datum);

  000d8	e8 00 00 00 00	 call	 _Py_PXCTX
  000dd	85 c0		 test	 eax, eax
  000df	75 5c		 jne	 SHORT $LN30@compress_n@2
  000e1	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  000e5	a8 20		 test	 al, 32			; 00000020H
  000e7	75 4c		 jne	 SHORT $LN24@compress_n@2
  000e9	84 c0		 test	 al, al
  000eb	78 48		 js	 SHORT $LN24@compress_n@2
  000ed	a8 02		 test	 al, 2
  000ef	75 4c		 jne	 SHORT $LN30@compress_n@2
  000f1	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  000f5	75 46		 jne	 SHORT $LN30@compress_n@2
  000f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00105	4c 8b cf	 mov	 r9, rdi
  00108	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0010e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00116	e8 00 00 00 00	 call	 _PyParallel_Guard
  0011b	48 8b cf	 mov	 rcx, rdi
  0011e	85 c0		 test	 eax, eax
  00120	74 07		 je	 SHORT $LN29@compress_n@2
  00122	e8 00 00 00 00	 call	 _Px_Dealloc
  00127	eb 14		 jmp	 SHORT $LN30@compress_n@2
$LN29@compress_n@2:
  00129	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  0012d	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00133	eb 08		 jmp	 SHORT $LN30@compress_n@2
$LN24@compress_n@2:
  00135	48 8b cf	 mov	 rcx, rdi
  00138	e8 00 00 00 00	 call	 Px_DecRef
$LN30@compress_n@2:

; 3558 :         if (ok < 0)

  0013d	85 f6		 test	 esi, esi
  0013f	78 21		 js	 SHORT $LN33@compress_n@2

; 3533 :     PyObject *(*selectornext)(PyObject *) = *Py_TYPE(selectors)->tp_iternext;
; 3534 :     int ok;
; 3535 : 
; 3536 :     while (1) {
; 3537 :         /* Steps:  get datum, get selector, evaluate selector.
; 3538 :            Order is important (to match the pure python version
; 3539 :            in terms of which input gets a chance to raise an
; 3540 :            exception first).
; 3541 :         */
; 3542 : 
; 3543 :         datum = datanext(data);

  00141	48 8b cd	 mov	 rcx, rbp
  00144	41 ff d4	 call	 r12
  00147	48 8b f8	 mov	 rdi, rax

; 3544 :         if (datum == NULL)

  0014a	48 85 c0	 test	 rax, rax
  0014d	0f 85 fd fe ff
	ff		 jne	 $LL6@compress_n@2
  00153	eb 0d		 jmp	 SHORT $LN33@compress_n@2
$LN35@compress_n@2:

; 3556 :             return datum;

  00155	48 8b c7	 mov	 rax, rdi
  00158	eb 0a		 jmp	 SHORT $LN5@compress_n@2
$LN34@compress_n@2:

; 3549 :             Py_DECREF(datum);

  0015a	48 8b cf	 mov	 rcx, rdi
  0015d	e8 00 00 00 00	 call	 _Py_DecRef
$LN33@compress_n@2:

; 3545 :             return NULL;

  00162	33 c0		 xor	 eax, eax
$LN5@compress_n@2:

; 3559 :             return NULL;
; 3560 :     }
; 3561 : }

  00164	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00169	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  0016e	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  00173	48 8b 7c 24 68	 mov	 rdi, QWORD PTR [rsp+104]
  00178	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0017c	41 5e		 pop	 r14
  0017e	41 5d		 pop	 r13
  00180	41 5c		 pop	 r12
  00182	c3		 ret	 0
compress_next ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT compress_reduce
_TEXT	SEGMENT
lz$ = 8
compress_reduce PROC					; COMDAT

; 3566 :     return Py_BuildValue("O(OO)", Py_TYPE(lz),
; 3567 :         lz->data, lz->selectors);

  00000	4c 8b 49 68	 mov	 r9, QWORD PTR [rcx+104]
  00004	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]
  00008	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0000c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LNHFJPFN@O?$CIOO?$CJ?$AA@

; 3568 :     }

  00013	e9 00 00 00 00	 jmp	 Py_BuildValue
compress_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@KIIGPCNF@filterfalse?$AA@		; `string'
PUBLIC	??_C@_0O@NNOEICFP@filterfalse?$CI?$CJ?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$filterfalse_new DD imagerel filterfalse_new
	DD	imagerel filterfalse_new+190
	DD	imagerel $unwind$filterfalse_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$filterfalse_new DD 040a01H
	DD	09340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0M@KIIGPCNF@filterfalse?$AA@
CONST	SEGMENT
??_C@_0M@KIIGPCNF@filterfalse?$AA@ DB 'filterfalse', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NNOEICFP@filterfalse?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_0O@NNOEICFP@filterfalse?$CI?$CJ?$AA@ DB 'filterfalse()', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT filterfalse_new
_TEXT	SEGMENT
func$ = 64
type$ = 64
args$ = 72
kwds$ = 80
seq$ = 88
filterfalse_new PROC					; COMDAT

; 3640 : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 3641 :     PyObject *func, *seq;
; 3642 :     PyObject *it;
; 3643 :     filterfalseobject *lz;
; 3644 : 
; 3645 :     if (type == &filterfalse_type &&
; 3646 :         !_PyArg_NoKeywords("filterfalse()", kwds))

  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:filterfalse_type
  00011	48 8b fa	 mov	 rdi, rdx
  00014	48 8b d9	 mov	 rbx, rcx
  00017	48 3b c8	 cmp	 rcx, rax
  0001a	75 13		 jne	 SHORT $LN4@filterfals
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NNOEICFP@filterfalse?$CI?$CJ?$AA@
  00023	49 8b d0	 mov	 rdx, r8
  00026	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  0002b	85 c0		 test	 eax, eax

; 3647 :         return NULL;

  0002d	74 5d		 je	 SHORT $LN7@filterfals
$LN4@filterfals:

; 3648 : 
; 3649 :     if (!PyArg_UnpackTuple(args, "filterfalse", 2, 2, &func, &seq))

  0002f	48 8d 44 24 58	 lea	 rax, QWORD PTR seq$[rsp]
  00034	41 b9 02 00 00
	00		 mov	 r9d, 2
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@KIIGPCNF@filterfalse?$AA@
  00041	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00046	48 8d 44 24 40	 lea	 rax, QWORD PTR func$[rsp]
  0004b	45 8b c1	 mov	 r8d, r9d
  0004e	48 8b cf	 mov	 rcx, rdi
  00051	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00056	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0005b	85 c0		 test	 eax, eax

; 3650 :         return NULL;

  0005d	74 2d		 je	 SHORT $LN7@filterfals

; 3651 : 
; 3652 :     /* Get iterator. */
; 3653 :     it = PyObject_GetIter(seq);

  0005f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR seq$[rsp]
  00064	e8 00 00 00 00	 call	 PyObject_GetIter
  00069	48 8b f8	 mov	 rdi, rax

; 3654 :     if (it == NULL)

  0006c	48 85 c0	 test	 rax, rax

; 3655 :         return NULL;

  0006f	74 1b		 je	 SHORT $LN7@filterfals

; 3656 : 
; 3657 :     /* create filterfalseobject structure */
; 3658 :     lz = (filterfalseobject *)type->tp_alloc(type, 0);

  00071	33 d2		 xor	 edx, edx
  00073	48 8b cb	 mov	 rcx, rbx
  00076	ff 93 88 01 00
	00		 call	 QWORD PTR [rbx+392]
  0007c	48 8b d8	 mov	 rbx, rax

; 3659 :     if (lz == NULL) {

  0007f	48 85 c0	 test	 rax, rax
  00082	75 15		 jne	 SHORT $LN1@filterfals

; 3660 :         Py_DECREF(it);

  00084	48 8b cf	 mov	 rcx, rdi
  00087	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@filterfals:

; 3661 :         return NULL;

  0008c	33 c0		 xor	 eax, eax

; 3668 : }

  0008e	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00093	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00097	5f		 pop	 rdi
  00098	c3		 ret	 0
$LN1@filterfals:

; 3662 :     }
; 3663 :     Py_INCREF(func);

  00099	48 8b 4c 24 40	 mov	 rcx, QWORD PTR func$[rsp]
  0009e	e8 00 00 00 00	 call	 _Py_IncRef

; 3664 :     lz->func = func;

  000a3	4c 8b 5c 24 40	 mov	 r11, QWORD PTR func$[rsp]

; 3665 :     lz->it = it;

  000a8	48 89 7b 68	 mov	 QWORD PTR [rbx+104], rdi
  000ac	4c 89 5b 60	 mov	 QWORD PTR [rbx+96], r11

; 3666 : 
; 3667 :     return (PyObject *)lz;

  000b0	48 8b c3	 mov	 rax, rbx

; 3668 : }

  000b3	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000b8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000bc	5f		 pop	 rdi
  000bd	c3		 ret	 0
filterfalse_new ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$filterfalse_dealloc DD imagerel filterfalse_dealloc
	DD	imagerel filterfalse_dealloc+262
	DD	imagerel $unwind$filterfalse_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$filterfalse_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT filterfalse_dealloc
_TEXT	SEGMENT
lz$ = 64
filterfalse_dealloc PROC				; COMDAT

; 3672 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 3673 :     PyObject_GC_UnTrack(lz);

  0000d	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 3674 :     Py_XDECREF(lz->func);

  00012	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  00016	48 85 db	 test	 rbx, rbx
  00019	74 65		 je	 SHORT $LN7@filterfals@2
  0001b	e8 00 00 00 00	 call	 _Py_PXCTX
  00020	85 c0		 test	 eax, eax
  00022	75 5c		 jne	 SHORT $LN7@filterfals@2
  00024	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00028	a8 20		 test	 al, 32			; 00000020H
  0002a	75 4c		 jne	 SHORT $LN15@filterfals@2
  0002c	84 c0		 test	 al, al
  0002e	78 48		 js	 SHORT $LN15@filterfals@2
  00030	a8 02		 test	 al, 2
  00032	75 4c		 jne	 SHORT $LN7@filterfals@2
  00034	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00038	75 46		 jne	 SHORT $LN7@filterfals@2
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00048	4c 8b cb	 mov	 r9, rbx
  0004b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00051	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00059	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005e	48 8b cb	 mov	 rcx, rbx
  00061	85 c0		 test	 eax, eax
  00063	74 07		 je	 SHORT $LN20@filterfals@2
  00065	e8 00 00 00 00	 call	 _Px_Dealloc
  0006a	eb 14		 jmp	 SHORT $LN7@filterfals@2
$LN20@filterfals@2:
  0006c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00070	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00076	eb 08		 jmp	 SHORT $LN7@filterfals@2
$LN15@filterfals@2:
  00078	48 8b cb	 mov	 rcx, rbx
  0007b	e8 00 00 00 00	 call	 Px_DecRef
$LN7@filterfals@2:

; 3675 :     Py_XDECREF(lz->it);

  00080	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  00084	48 85 db	 test	 rbx, rbx
  00087	74 65		 je	 SHORT $LN3@filterfals@2
  00089	e8 00 00 00 00	 call	 _Py_PXCTX
  0008e	85 c0		 test	 eax, eax
  00090	75 5c		 jne	 SHORT $LN3@filterfals@2
  00092	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00096	a8 20		 test	 al, 32			; 00000020H
  00098	75 4c		 jne	 SHORT $LN26@filterfals@2
  0009a	84 c0		 test	 al, al
  0009c	78 48		 js	 SHORT $LN26@filterfals@2
  0009e	a8 02		 test	 al, 2
  000a0	75 4c		 jne	 SHORT $LN3@filterfals@2
  000a2	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000a6	75 46		 jne	 SHORT $LN3@filterfals@2
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000b6	4c 8b cb	 mov	 r9, rbx
  000b9	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000bf	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cc	48 8b cb	 mov	 rcx, rbx
  000cf	85 c0		 test	 eax, eax
  000d1	74 07		 je	 SHORT $LN31@filterfals@2
  000d3	e8 00 00 00 00	 call	 _Px_Dealloc
  000d8	eb 14		 jmp	 SHORT $LN3@filterfals@2
$LN31@filterfals@2:
  000da	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000de	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000e4	eb 08		 jmp	 SHORT $LN3@filterfals@2
$LN26@filterfals@2:
  000e6	48 8b cb	 mov	 rcx, rbx
  000e9	e8 00 00 00 00	 call	 Px_DecRef
$LN3@filterfals@2:

; 3676 :     Py_TYPE(lz)->tp_free(lz);

  000ee	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000f2	48 8b cf	 mov	 rcx, rdi

; 3677 : }

  000f5	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000fa	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000fe	5f		 pop	 rdi
  000ff	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
filterfalse_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@NIBBPCLH@filterfalse_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$filterfalse_traverse DD imagerel filterfalse_traverse
	DD	imagerel filterfalse_traverse+152
	DD	imagerel $unwind$filterfalse_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$filterfalse_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BF@NIBBPCLH@filterfalse_traverse?$AA@
CONST	SEGMENT
??_C@_0BF@NIBBPCLH@filterfalse_traverse?$AA@ DB 'filterfalse_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT filterfalse_traverse
_TEXT	SEGMENT
lz$ = 48
visit$ = 56
arg$ = 64
filterfalse_traverse PROC				; COMDAT

; 3681 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 3682 :     Py_VISIT(lz->it);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN9@filterfals@3
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@NIBBPCLH@filterfalse_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 62 0e 00
	00		 mov	 r8d, 3682		; 00000e62H
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@filterfals@3:
  0003d	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN11@filterfals@3
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 39		 jne	 SHORT $LN13@filterfals@3
$LN11@filterfals@3:

; 3683 :     Py_VISIT(lz->func);

  0004f	e8 00 00 00 00	 call	 _Py_PXCTX
  00054	85 c0		 test	 eax, eax
  00056	74 1c		 je	 SHORT $LN3@filterfals@3
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@NIBBPCLH@filterfalse_traverse?$AA@
  00066	45 33 c9	 xor	 r9d, r9d
  00069	41 b8 63 0e 00
	00		 mov	 r8d, 3683		; 00000e63H
  0006f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@filterfals@3:
  00074	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00078	48 85 c9	 test	 rcx, rcx
  0007b	74 09		 je	 SHORT $LN5@filterfals@3
  0007d	48 8b d7	 mov	 rdx, rdi
  00080	ff d6		 call	 rsi
  00082	85 c0		 test	 eax, eax
  00084	75 02		 jne	 SHORT $LN13@filterfals@3
$LN5@filterfals@3:

; 3684 :     return 0;

  00086	33 c0		 xor	 eax, eax
$LN13@filterfals@3:

; 3685 : }

  00088	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00092	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00096	5f		 pop	 rdi
  00097	c3		 ret	 0
filterfalse_traverse ENDP
_TEXT	ENDS
EXTRN	PyBool_Type:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$filterfalse_next DD imagerel filterfalse_next
	DD	imagerel filterfalse_next+428
	DD	imagerel $unwind$filterfalse_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$filterfalse_next DD 0c1c01H
	DD	0e641cH
	DD	0d541cH
	DD	0c341cH
	DD	0f018521cH
	DD	0d014e016H
	DD	07010c012H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT filterfalse_next
_TEXT	SEGMENT
lz$ = 96
filterfalse_next PROC					; COMDAT

; 3689 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	41 56		 push	 r14
  00016	41 57		 push	 r15
  00018	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 3690 :     PyObject *item;
; 3691 :     PyObject *it = lz->it;

  0001c	48 8b 69 68	 mov	 rbp, QWORD PTR [rcx+104]
  00020	4c 8b e1	 mov	 r12, rcx

; 3692 :     long ok;
; 3693 :     PyObject *(*iternext)(PyObject *);
; 3694 : 
; 3695 :     iternext = *Py_TYPE(it)->tp_iternext;

  00023	48 8b 45 58	 mov	 rax, QWORD PTR [rbp+88]

; 3696 :     for (;;) {
; 3697 :         item = iternext(it);

  00027	48 8b cd	 mov	 rcx, rbp
  0002a	4c 8b a8 38 01
	00 00		 mov	 r13, QWORD PTR [rax+312]
  00031	41 ff d5	 call	 r13
  00034	48 8b d8	 mov	 rbx, rax

; 3698 :         if (item == NULL)

  00037	48 85 c0	 test	 rax, rax
  0003a	0f 84 3e 01 00
	00		 je	 $LN36@filterfals@4
  00040	4c 8d 35 00 00
	00 00		 lea	 r14, OFFSET FLAT:_Py_NoneStruct
  00047	4c 8d 3d 00 00
	00 00		 lea	 r15, OFFSET FLAT:PyBool_Type
  0004e	66 90		 npad	 2
$LL9@filterfals@4:

; 3700 : 
; 3701 :         if (lz->func == Py_None || lz->func == (PyObject *)&PyBool_Type) {

  00050	49 8b 4c 24 60	 mov	 rcx, QWORD PTR [r12+96]
  00055	49 3b ce	 cmp	 rcx, r14
  00058	0f 84 93 00 00
	00		 je	 $LN5@filterfals@4
  0005e	49 3b cf	 cmp	 rcx, r15
  00061	0f 84 8a 00 00
	00		 je	 $LN5@filterfals@4

; 3703 :         } else {
; 3704 :             PyObject *good;
; 3705 :             good = PyObject_CallFunctionObjArgs(lz->func,
; 3706 :                                                 item, NULL);

  00067	45 33 c0	 xor	 r8d, r8d
  0006a	48 8b d3	 mov	 rdx, rbx
  0006d	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  00072	48 8b f8	 mov	 rdi, rax

; 3707 :             if (good == NULL) {

  00075	48 85 c0	 test	 rax, rax
  00078	0f 84 1f 01 00
	00		 je	 $LN37@filterfals@4

; 3710 :             }
; 3711 :             ok = PyObject_IsTrue(good);

  0007e	48 8b c8	 mov	 rcx, rax
  00081	e8 00 00 00 00	 call	 PyObject_IsTrue
  00086	8b f0		 mov	 esi, eax

; 3712 :             Py_DECREF(good);

  00088	e8 00 00 00 00	 call	 _Py_PXCTX
  0008d	85 c0		 test	 eax, eax
  0008f	75 6a		 jne	 SHORT $LN22@filterfals@4
  00091	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00095	f6 c1 20	 test	 cl, 32			; 00000020H
  00098	75 4d		 jne	 SHORT $LN16@filterfals@4
  0009a	84 c9		 test	 cl, cl
  0009c	78 49		 js	 SHORT $LN16@filterfals@4
  0009e	f6 c1 02	 test	 cl, 2
  000a1	75 58		 jne	 SHORT $LN22@filterfals@4
  000a3	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  000a7	75 52		 jne	 SHORT $LN22@filterfals@4
  000a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000b7	4c 8b cf	 mov	 r9, rdi
  000ba	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000c0	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c8	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cd	48 8b cf	 mov	 rcx, rdi
  000d0	85 c0		 test	 eax, eax
  000d2	74 07		 je	 SHORT $LN21@filterfals@4
  000d4	e8 00 00 00 00	 call	 _Px_Dealloc
  000d9	eb 20		 jmp	 SHORT $LN22@filterfals@4
$LN21@filterfals@4:
  000db	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000df	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000e5	eb 14		 jmp	 SHORT $LN22@filterfals@4
$LN16@filterfals@4:
  000e7	48 8b cf	 mov	 rcx, rdi
  000ea	e8 00 00 00 00	 call	 Px_DecRef
  000ef	eb 0a		 jmp	 SHORT $LN22@filterfals@4
$LN5@filterfals@4:

; 3702 :             ok = PyObject_IsTrue(item);

  000f1	48 8b cb	 mov	 rcx, rbx
  000f4	e8 00 00 00 00	 call	 PyObject_IsTrue
  000f9	8b f0		 mov	 esi, eax

; 3712 :             Py_DECREF(good);

$LN22@filterfals@4:

; 3713 :         }
; 3714 :         if (ok == 0)

  000fb	85 f6		 test	 esi, esi
  000fd	0f 84 a4 00 00
	00		 je	 $LN38@filterfals@4

; 3716 :         Py_DECREF(item);

  00103	e8 00 00 00 00	 call	 _Py_PXCTX
  00108	85 c0		 test	 eax, eax
  0010a	75 5c		 jne	 SHORT $LN33@filterfals@4
  0010c	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00110	a8 20		 test	 al, 32			; 00000020H
  00112	75 4c		 jne	 SHORT $LN27@filterfals@4
  00114	84 c0		 test	 al, al
  00116	78 48		 js	 SHORT $LN27@filterfals@4
  00118	a8 02		 test	 al, 2
  0011a	75 4c		 jne	 SHORT $LN33@filterfals@4
  0011c	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00120	75 46		 jne	 SHORT $LN33@filterfals@4
  00122	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00129	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00130	4c 8b cb	 mov	 r9, rbx
  00133	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00139	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00141	e8 00 00 00 00	 call	 _PyParallel_Guard
  00146	48 8b cb	 mov	 rcx, rbx
  00149	85 c0		 test	 eax, eax
  0014b	74 07		 je	 SHORT $LN32@filterfals@4
  0014d	e8 00 00 00 00	 call	 _Px_Dealloc
  00152	eb 14		 jmp	 SHORT $LN33@filterfals@4
$LN32@filterfals@4:
  00154	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00158	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0015e	eb 08		 jmp	 SHORT $LN33@filterfals@4
$LN27@filterfals@4:
  00160	48 8b cb	 mov	 rcx, rbx
  00163	e8 00 00 00 00	 call	 Px_DecRef
$LN33@filterfals@4:

; 3717 :         if (ok < 0)

  00168	85 f6		 test	 esi, esi
  0016a	78 12		 js	 SHORT $LN36@filterfals@4

; 3696 :     for (;;) {
; 3697 :         item = iternext(it);

  0016c	48 8b cd	 mov	 rcx, rbp
  0016f	41 ff d5	 call	 r13
  00172	48 8b d8	 mov	 rbx, rax

; 3698 :         if (item == NULL)

  00175	48 85 c0	 test	 rax, rax
  00178	0f 85 d2 fe ff
	ff		 jne	 $LL9@filterfals@4
$LN36@filterfals@4:

; 3699 :             return NULL;

  0017e	33 c0		 xor	 eax, eax
$LN8@filterfals@4:

; 3718 :             return NULL;
; 3719 :     }
; 3720 : }

  00180	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00185	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  0018a	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
  0018f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00193	41 5f		 pop	 r15
  00195	41 5e		 pop	 r14
  00197	41 5d		 pop	 r13
  00199	41 5c		 pop	 r12
  0019b	5f		 pop	 rdi
  0019c	c3		 ret	 0
$LN37@filterfals@4:

; 3708 :                 Py_DECREF(item);

  0019d	48 8b cb	 mov	 rcx, rbx
  001a0	e8 00 00 00 00	 call	 _Py_DecRef

; 3709 :                 return NULL;

  001a5	eb d7		 jmp	 SHORT $LN36@filterfals@4
$LN38@filterfals@4:

; 3715 :             return item;

  001a7	48 8b c3	 mov	 rax, rbx
  001aa	eb d4		 jmp	 SHORT $LN8@filterfals@4
filterfalse_next ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT filterfalse_reduce
_TEXT	SEGMENT
lz$ = 8
filterfalse_reduce PROC					; COMDAT

; 3725 :     return Py_BuildValue("O(OO)", Py_TYPE(lz),
; 3726 :         lz->func, lz->it);

  00000	4c 8b 49 68	 mov	 r9, QWORD PTR [rcx+104]
  00004	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]
  00008	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0000c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LNHFJPFN@O?$CIOO?$CJ?$AA@

; 3727 :     }

  00013	e9 00 00 00 00	 jmp	 Py_BuildValue
filterfalse_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_09EFCNLPME@count_new?$AA@			; `string'
PUBLIC	??_C@_0BF@EMLKNKNJ@a?5number?5is?5required?$AA@	; `string'
PUBLIC	??_C@_09MNHMIDAK@?$HMOO?3count?$AA@		; `string'
EXTRN	PyLong_AsLong:PROC
EXTRN	PyLong_FromLong:PROC
EXTRN	PyNumber_Check:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$count_new DD imagerel count_new
	DD	imagerel count_new+159
	DD	imagerel $unwind$count_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$count_new DD imagerel count_new+159
	DD	imagerel count_new+311
	DD	imagerel $chain$0$count_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$count_new DD imagerel count_new+311
	DD	imagerel count_new+500
	DD	imagerel $chain$2$count_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$count_new DD imagerel count_new+500
	DD	imagerel count_new+541
	DD	imagerel $chain$4$count_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$count_new DD 020021H
	DD	0a3400H
	DD	imagerel count_new
	DD	imagerel count_new+159
	DD	imagerel $unwind$count_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$count_new DD 020021H
	DD	0a3400H
	DD	imagerel count_new
	DD	imagerel count_new+159
	DD	imagerel $unwind$count_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$count_new DD 020521H
	DD	0a3405H
	DD	imagerel count_new
	DD	imagerel count_new+159
	DD	imagerel $unwind$count_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$count_new DD 040c01H
	DD	0b640cH
	DD	07008720cH
xdata	ENDS
;	COMDAT ??_C@_09EFCNLPME@count_new?$AA@
CONST	SEGMENT
??_C@_09EFCNLPME@count_new?$AA@ DB 'count_new', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EMLKNKNJ@a?5number?5is?5required?$AA@
CONST	SEGMENT
??_C@_0BF@EMLKNKNJ@a?5number?5is?5required?$AA@ DB 'a number is required', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09MNHMIDAK@?$HMOO?3count?$AA@
CONST	SEGMENT
??_C@_09MNHMIDAK@?$HMOO?3count?$AA@ DB '|OO:count', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT count_new
_TEXT	SEGMENT
long_step$ = 48
type$ = 80
args$ = 88
kwds$ = 96
long_cnt$ = 104
count_new PROC						; COMDAT

; 3816 : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	49 89 73 10	 mov	 QWORD PTR [r11+16], rsi
  00007	57		 push	 rdi
  00008	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000c	48 8b f1	 mov	 rsi, rcx

; 3817 :     countobject *lz;
; 3818 :     int slow_mode = 0;
; 3819 :     Py_ssize_t cnt = 0;
; 3820 :     PyObject *long_cnt = NULL;
; 3821 :     PyObject *long_step = NULL;
; 3822 :     long step;
; 3823 :     static char *kwlist[] = {"start", "step", 0};
; 3824 : 
; 3825 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "|OO:count",
; 3826 :                     kwlist, &long_cnt, &long_step))

  0000f	49 8d 4b e8	 lea	 rcx, QWORD PTR [r11-24]
  00013	49 8b c0	 mov	 rax, r8
  00016	49 89 4b e0	 mov	 QWORD PTR [r11-32], rcx
  0001a	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  0001e	4c 8b d2	 mov	 r10, rdx
  00021	33 ff		 xor	 edi, edi
  00023	49 89 4b d8	 mov	 QWORD PTR [r11-40], rcx
  00027	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??count_new@@9@9
  0002e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09MNHMIDAK@?$HMOO?3count?$AA@
  00035	49 8b ca	 mov	 rcx, r10
  00038	48 8b d0	 mov	 rdx, rax
  0003b	49 89 7b 20	 mov	 QWORD PTR [r11+32], rdi
  0003f	49 89 7b e8	 mov	 QWORD PTR [r11-24], rdi
  00043	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00048	85 c0		 test	 eax, eax

; 3827 :         return NULL;

  0004a	74 41		 je	 SHORT $LN31@count_new

; 3828 : 
; 3829 :     if ((long_cnt != NULL && !PyNumber_Check(long_cnt)) ||
; 3830 :         (long_step != NULL && !PyNumber_Check(long_step))) {

  0004c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR long_cnt$[rsp]
  00051	48 85 c9	 test	 rcx, rcx
  00054	74 0e		 je	 SHORT $LN22@count_new
  00056	e8 00 00 00 00	 call	 PyNumber_Check
  0005b	85 c0		 test	 eax, eax
  0005d	74 1b		 je	 SHORT $LN23@count_new
  0005f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR long_cnt$[rsp]
$LN22@count_new:
  00064	48 8b 44 24 30	 mov	 rax, QWORD PTR long_step$[rsp]
  00069	48 85 c0	 test	 rax, rax
  0006c	74 31		 je	 SHORT $LN24@count_new
  0006e	48 8b c8	 mov	 rcx, rax
  00071	e8 00 00 00 00	 call	 PyNumber_Check
  00076	85 c0		 test	 eax, eax
  00078	75 20		 jne	 SHORT $LN29@count_new
$LN23@count_new:

; 3831 :                     PyErr_SetString(PyExc_TypeError, "a number is required");

  0007a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00081	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@EMLKNKNJ@a?5number?5is?5required?$AA@
  00088	e8 00 00 00 00	 call	 PyErr_SetString
$LN31@count_new:

; 3832 :                     return NULL;

  0008d	33 c0		 xor	 eax, eax

; 3882 :     }
; 3883 :     lz->cnt = cnt;
; 3884 :     lz->long_cnt = long_cnt;
; 3885 :     lz->long_step = long_step;
; 3886 : 
; 3887 :     return (PyObject *)lz;
; 3888 : }

  0008f	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  00094	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00098	5f		 pop	 rdi
  00099	c3		 ret	 0
$LN29@count_new:

; 3832 :                     return NULL;

  0009a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR long_cnt$[rsp]
$LN24@count_new:
  0009f	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx

; 3833 :     }
; 3834 : 
; 3835 :     if (long_cnt != NULL) {

  000a4	48 85 c9	 test	 rcx, rcx
  000a7	74 46		 je	 SHORT $LN21@count_new

; 3836 :         cnt = PyLong_AsSsize_t(long_cnt);

  000a9	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  000ae	48 8b d8	 mov	 rbx, rax

; 3837 :         if ((cnt == -1 && PyErr_Occurred()) || !PyLong_Check(long_cnt)) {

  000b1	48 83 f8 ff	 cmp	 rax, -1
  000b5	75 0a		 jne	 SHORT $LN18@count_new
  000b7	e8 00 00 00 00	 call	 PyErr_Occurred
  000bc	48 85 c0	 test	 rax, rax
  000bf	75 15		 jne	 SHORT $LN19@count_new
$LN18@count_new:
  000c1	48 8b 44 24 68	 mov	 rax, QWORD PTR long_cnt$[rsp]
  000c6	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000ca	f7 81 00 01 00
	00 00 00 00 01	 test	 DWORD PTR [rcx+256], 16777216 ; 01000000H
  000d4	75 0f		 jne	 SHORT $LN20@count_new
$LN19@count_new:

; 3838 :             PyErr_Clear();

  000d6	e8 00 00 00 00	 call	 PyErr_Clear

; 3839 :             slow_mode = 1;

  000db	48 8b 44 24 68	 mov	 rax, QWORD PTR long_cnt$[rsp]
  000e0	bf 01 00 00 00	 mov	 edi, 1
$LN20@count_new:

; 3840 :         }
; 3841 :         Py_INCREF(long_cnt);

  000e5	48 8b c8	 mov	 rcx, rax
  000e8	e8 00 00 00 00	 call	 _Py_IncRef

; 3842 :     } else {

  000ed	eb 0e		 jmp	 SHORT $LN17@count_new
$LN21@count_new:

; 3843 :         cnt = 0;
; 3844 :         long_cnt = PyLong_FromLong(0);

  000ef	33 c9		 xor	 ecx, ecx
  000f1	33 db		 xor	 ebx, ebx
  000f3	e8 00 00 00 00	 call	 PyLong_FromLong
  000f8	48 89 44 24 68	 mov	 QWORD PTR long_cnt$[rsp], rax
$LN17@count_new:

; 3845 :     }
; 3846 : 
; 3847 :     /* If not specified, step defaults to 1 */
; 3848 :     if (long_step == NULL) {

  000fd	48 8b 4c 24 30	 mov	 rcx, QWORD PTR long_step$[rsp]
  00102	48 85 c9	 test	 rcx, rcx
  00105	75 30		 jne	 SHORT $LN16@count_new

; 3849 :         long_step = PyLong_FromLong(1);

  00107	b9 01 00 00 00	 mov	 ecx, 1
  0010c	e8 00 00 00 00	 call	 PyLong_FromLong
  00111	48 89 44 24 30	 mov	 QWORD PTR long_step$[rsp], rax

; 3850 :         if (long_step == NULL) {

  00116	48 85 c0	 test	 rax, rax
  00119	75 26		 jne	 SHORT $LN14@count_new

; 3851 :             Py_DECREF(long_cnt);

  0011b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR long_cnt$[rsp]
  00120	e8 00 00 00 00	 call	 _Py_DecRef
  00125	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]

; 3852 :             return NULL;

  0012a	33 c0		 xor	 eax, eax

; 3882 :     }
; 3883 :     lz->cnt = cnt;
; 3884 :     lz->long_cnt = long_cnt;
; 3885 :     lz->long_step = long_step;
; 3886 : 
; 3887 :     return (PyObject *)lz;
; 3888 : }

  0012c	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  00131	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00135	5f		 pop	 rdi
  00136	c3		 ret	 0
$LN16@count_new:

; 3853 :         }
; 3854 :     } else
; 3855 :         Py_INCREF(long_step);

  00137	e8 00 00 00 00	 call	 _Py_IncRef
  0013c	48 8b 44 24 30	 mov	 rax, QWORD PTR long_step$[rsp]
$LN14@count_new:

; 3856 : 
; 3857 :     assert(long_cnt != NULL && long_step != NULL);
; 3858 : 
; 3859 :     /* Fast mode only works when the step is 1 */
; 3860 :     step = PyLong_AsLong(long_step);

  00141	48 8b c8	 mov	 rcx, rax
  00144	e8 00 00 00 00	 call	 PyLong_AsLong

; 3861 :     if (step != 1) {

  00149	83 f8 01	 cmp	 eax, 1
  0014c	74 20		 je	 SHORT $LN12@count_new

; 3862 :         slow_mode = 1;
; 3863 :         if (step == -1 && PyErr_Occurred())

  0014e	83 f8 ff	 cmp	 eax, -1
  00151	75 1f		 jne	 SHORT $LN28@count_new
  00153	e8 00 00 00 00	 call	 PyErr_Occurred
  00158	48 85 c0	 test	 rax, rax
  0015b	74 15		 je	 SHORT $LN28@count_new

; 3864 :             PyErr_Clear();

  0015d	e8 00 00 00 00	 call	 PyErr_Clear

; 3868 :         cnt = PY_SSIZE_T_MAX;

  00162	48 bb ff ff ff
	ff ff ff ff 7f	 mov	 rbx, 9223372036854775807 ; 7fffffffffffffffH

; 3869 :     else

  0016c	eb 52		 jmp	 SHORT $LN7@count_new
$LN12@count_new:

; 3865 :     }
; 3866 : 
; 3867 :     if (slow_mode)

  0016e	85 ff		 test	 edi, edi
  00170	74 0c		 je	 SHORT $LN9@count_new
$LN28@count_new:

; 3868 :         cnt = PY_SSIZE_T_MAX;

  00172	48 bb ff ff ff
	ff ff ff ff 7f	 mov	 rbx, 9223372036854775807 ; 7fffffffffffffffH

; 3869 :     else

  0017c	eb 42		 jmp	 SHORT $LN7@count_new
$LN9@count_new:

; 3870 :         Py_CLEAR(long_cnt);

  0017e	4c 8b 4c 24 68	 mov	 r9, QWORD PTR long_cnt$[rsp]
  00183	4d 85 c9	 test	 r9, r9
  00186	74 38		 je	 SHORT $LN7@count_new
  00188	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  0018f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09EFCNLPME@count_new?$AA@
  00196	41 b8 1e 0f 00
	00		 mov	 r8d, 3870		; 00000f1eH
  0019c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001a4	e8 00 00 00 00	 call	 _PyParallel_Guard
  001a9	85 c0		 test	 eax, eax
  001ab	75 13		 jne	 SHORT $LN7@count_new
  001ad	48 8b 4c 24 68	 mov	 rcx, QWORD PTR long_cnt$[rsp]
  001b2	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR long_cnt$[rsp], 0
  001bb	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@count_new:

; 3871 : 
; 3872 :     assert((cnt != PY_SSIZE_T_MAX && long_cnt == NULL && !slow_mode) ||
; 3873 :            (cnt == PY_SSIZE_T_MAX && long_cnt != NULL && slow_mode));
; 3874 :     assert(slow_mode ||
; 3875 :            (PyLong_Check(long_step) && PyLong_AS_LONG(long_step) == 1));
; 3876 : 
; 3877 :     /* create countobject structure */
; 3878 :     lz = (countobject *)type->tp_alloc(type, 0);

  001c0	33 d2		 xor	 edx, edx
  001c2	48 8b ce	 mov	 rcx, rsi
  001c5	ff 96 88 01 00
	00		 call	 QWORD PTR [rsi+392]
  001cb	4c 8b d8	 mov	 r11, rax

; 3879 :     if (lz == NULL) {

  001ce	48 85 c0	 test	 rax, rax
  001d1	75 21		 jne	 SHORT $LN5@count_new

; 3880 :         Py_XDECREF(long_cnt);

  001d3	48 8b 4c 24 68	 mov	 rcx, QWORD PTR long_cnt$[rsp]
  001d8	48 85 c9	 test	 rcx, rcx
  001db	74 05		 je	 SHORT $LN3@count_new
  001dd	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@count_new:

; 3881 :         return NULL;

  001e2	33 c0		 xor	 eax, eax
  001e4	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]

; 3882 :     }
; 3883 :     lz->cnt = cnt;
; 3884 :     lz->long_cnt = long_cnt;
; 3885 :     lz->long_step = long_step;
; 3886 : 
; 3887 :     return (PyObject *)lz;
; 3888 : }

  001e9	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  001ee	48 83 c4 40	 add	 rsp, 64			; 00000040H
  001f2	5f		 pop	 rdi
  001f3	c3		 ret	 0
$LN5@count_new:
  001f4	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  001f9	48 89 58 60	 mov	 QWORD PTR [rax+96], rbx
  001fd	48 8b 44 24 68	 mov	 rax, QWORD PTR long_cnt$[rsp]
  00202	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00207	49 89 43 68	 mov	 QWORD PTR [r11+104], rax
  0020b	48 8b 44 24 30	 mov	 rax, QWORD PTR long_step$[rsp]
  00210	49 89 43 70	 mov	 QWORD PTR [r11+112], rax
  00214	49 8b c3	 mov	 rax, r11
  00217	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0021b	5f		 pop	 rdi
  0021c	c3		 ret	 0
count_new ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$count_dealloc DD imagerel count_dealloc
	DD	imagerel count_dealloc+262
	DD	imagerel $unwind$count_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$count_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT count_dealloc
_TEXT	SEGMENT
lz$ = 64
count_dealloc PROC					; COMDAT

; 3892 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 3893 :     PyObject_GC_UnTrack(lz);

  0000d	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 3894 :     Py_XDECREF(lz->long_cnt);

  00012	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  00016	48 85 db	 test	 rbx, rbx
  00019	74 65		 je	 SHORT $LN7@count_deal
  0001b	e8 00 00 00 00	 call	 _Py_PXCTX
  00020	85 c0		 test	 eax, eax
  00022	75 5c		 jne	 SHORT $LN7@count_deal
  00024	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00028	a8 20		 test	 al, 32			; 00000020H
  0002a	75 4c		 jne	 SHORT $LN15@count_deal
  0002c	84 c0		 test	 al, al
  0002e	78 48		 js	 SHORT $LN15@count_deal
  00030	a8 02		 test	 al, 2
  00032	75 4c		 jne	 SHORT $LN7@count_deal
  00034	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00038	75 46		 jne	 SHORT $LN7@count_deal
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00048	4c 8b cb	 mov	 r9, rbx
  0004b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00051	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00059	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005e	48 8b cb	 mov	 rcx, rbx
  00061	85 c0		 test	 eax, eax
  00063	74 07		 je	 SHORT $LN20@count_deal
  00065	e8 00 00 00 00	 call	 _Px_Dealloc
  0006a	eb 14		 jmp	 SHORT $LN7@count_deal
$LN20@count_deal:
  0006c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00070	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00076	eb 08		 jmp	 SHORT $LN7@count_deal
$LN15@count_deal:
  00078	48 8b cb	 mov	 rcx, rbx
  0007b	e8 00 00 00 00	 call	 Px_DecRef
$LN7@count_deal:

; 3895 :     Py_XDECREF(lz->long_step);

  00080	48 8b 5f 70	 mov	 rbx, QWORD PTR [rdi+112]
  00084	48 85 db	 test	 rbx, rbx
  00087	74 65		 je	 SHORT $LN3@count_deal
  00089	e8 00 00 00 00	 call	 _Py_PXCTX
  0008e	85 c0		 test	 eax, eax
  00090	75 5c		 jne	 SHORT $LN3@count_deal
  00092	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00096	a8 20		 test	 al, 32			; 00000020H
  00098	75 4c		 jne	 SHORT $LN26@count_deal
  0009a	84 c0		 test	 al, al
  0009c	78 48		 js	 SHORT $LN26@count_deal
  0009e	a8 02		 test	 al, 2
  000a0	75 4c		 jne	 SHORT $LN3@count_deal
  000a2	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000a6	75 46		 jne	 SHORT $LN3@count_deal
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000b6	4c 8b cb	 mov	 r9, rbx
  000b9	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000bf	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cc	48 8b cb	 mov	 rcx, rbx
  000cf	85 c0		 test	 eax, eax
  000d1	74 07		 je	 SHORT $LN31@count_deal
  000d3	e8 00 00 00 00	 call	 _Px_Dealloc
  000d8	eb 14		 jmp	 SHORT $LN3@count_deal
$LN31@count_deal:
  000da	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000de	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000e4	eb 08		 jmp	 SHORT $LN3@count_deal
$LN26@count_deal:
  000e6	48 8b cb	 mov	 rcx, rbx
  000e9	e8 00 00 00 00	 call	 Px_DecRef
$LN3@count_deal:

; 3896 :     Py_TYPE(lz)->tp_free(lz);

  000ee	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000f2	48 8b cf	 mov	 rcx, rdi

; 3897 : }

  000f5	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000fa	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000fe	5f		 pop	 rdi
  000ff	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
count_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@KMCDBABA@count_traverse?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$count_traverse DD imagerel count_traverse
	DD	imagerel count_traverse+152
	DD	imagerel $unwind$count_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$count_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0P@KMCDBABA@count_traverse?$AA@
CONST	SEGMENT
??_C@_0P@KMCDBABA@count_traverse?$AA@ DB 'count_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT count_traverse
_TEXT	SEGMENT
lz$ = 48
visit$ = 56
arg$ = 64
count_traverse PROC					; COMDAT

; 3901 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 3902 :     Py_VISIT(lz->long_cnt);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN9@count_trav
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@KMCDBABA@count_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 3e 0f 00
	00		 mov	 r8d, 3902		; 00000f3eH
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@count_trav:
  0003d	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN11@count_trav
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 39		 jne	 SHORT $LN13@count_trav
$LN11@count_trav:

; 3903 :     Py_VISIT(lz->long_step);

  0004f	e8 00 00 00 00	 call	 _Py_PXCTX
  00054	85 c0		 test	 eax, eax
  00056	74 1c		 je	 SHORT $LN3@count_trav
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@KMCDBABA@count_traverse?$AA@
  00066	45 33 c9	 xor	 r9d, r9d
  00069	41 b8 3f 0f 00
	00		 mov	 r8d, 3903		; 00000f3fH
  0006f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@count_trav:
  00074	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00078	48 85 c9	 test	 rcx, rcx
  0007b	74 09		 je	 SHORT $LN5@count_trav
  0007d	48 8b d7	 mov	 rdx, rdi
  00080	ff d6		 call	 rsi
  00082	85 c0		 test	 eax, eax
  00084	75 02		 jne	 SHORT $LN13@count_trav
$LN5@count_trav:

; 3904 :     return 0;

  00086	33 c0		 xor	 eax, eax
$LN13@count_trav:

; 3905 : }

  00088	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00092	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00096	5f		 pop	 rdi
  00097	c3		 ret	 0
count_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$count_nextlong DD imagerel count_nextlong
	DD	imagerel count_nextlong+93
	DD	imagerel $unwind$count_nextlong
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$count_nextlong DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT count_nextlong
_TEXT	SEGMENT
lz$ = 48
count_nextlong PROC					; COMDAT

; 3909 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 3910 :     PyObject *long_cnt;
; 3911 :     PyObject *stepped_up;
; 3912 : 
; 3913 :     long_cnt = lz->long_cnt;

  0000a	48 8b 59 68	 mov	 rbx, QWORD PTR [rcx+104]
  0000e	48 8b f9	 mov	 rdi, rcx

; 3914 :     if (long_cnt == NULL) {

  00011	48 85 db	 test	 rbx, rbx
  00014	75 24		 jne	 SHORT $LN2@count_next

; 3915 :         /* Switch to slow_mode */
; 3916 :         long_cnt = PyLong_FromSsize_t(PY_SSIZE_T_MAX);

  00016	48 b9 ff ff ff
	ff ff ff ff 7f	 mov	 rcx, 9223372036854775807 ; 7fffffffffffffffH
  00020	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  00025	48 8b d8	 mov	 rbx, rax

; 3917 :         if (long_cnt == NULL)

  00028	48 85 c0	 test	 rax, rax
  0002b	75 0d		 jne	 SHORT $LN2@count_next
$LN6@count_next:

; 3918 :             return NULL;

  0002d	33 c0		 xor	 eax, eax

; 3927 : }

  0002f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00034	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00038	5f		 pop	 rdi
  00039	c3		 ret	 0
$LN2@count_next:

; 3919 :     }
; 3920 :     assert(lz->cnt == PY_SSIZE_T_MAX && long_cnt != NULL);
; 3921 : 
; 3922 :     stepped_up = PyNumber_Add(long_cnt, lz->long_step);

  0003a	48 8b 57 70	 mov	 rdx, QWORD PTR [rdi+112]
  0003e	48 8b cb	 mov	 rcx, rbx
  00041	e8 00 00 00 00	 call	 PyNumber_Add

; 3923 :     if (stepped_up == NULL)

  00046	48 85 c0	 test	 rax, rax

; 3924 :         return NULL;

  00049	74 e2		 je	 SHORT $LN6@count_next

; 3925 :     lz->long_cnt = stepped_up;

  0004b	48 89 47 68	 mov	 QWORD PTR [rdi+104], rax

; 3926 :     return long_cnt;

  0004f	48 8b c3	 mov	 rax, rbx

; 3927 : }

  00052	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00057	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005b	5f		 pop	 rdi
  0005c	c3		 ret	 0
count_nextlong ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT count_next
_TEXT	SEGMENT
lz$ = 8
count_next PROC						; COMDAT

; 3932 :     if (lz->cnt == PY_SSIZE_T_MAX)

  00000	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00004	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  0000e	48 3b d0	 cmp	 rdx, rax
  00011	75 05		 jne	 SHORT $LN1@count_next@2

; 3935 : }

  00013	e9 00 00 00 00	 jmp	 count_nextlong
$LN1@count_next@2:

; 3933 :         return count_nextlong(lz);
; 3934 :     return PyLong_FromSsize_t(lz->cnt++);

  00018	48 8d 42 01	 lea	 rax, QWORD PTR [rdx+1]
  0001c	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax
  00020	48 8b ca	 mov	 rcx, rdx

; 3935 : }

  00023	e9 00 00 00 00	 jmp	 PyLong_FromSsize_t
count_next ENDP
_TEXT	ENDS
PUBLIC	??_C@_09EHNGNPOI@count?$CI?$CFR?$CJ?$AA@	; `string'
PUBLIC	??_C@_0O@IHFKCJPO@count?$CI?$CFR?0?5?$CFR?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0L@PHBELKDM@count?$CI?$CFzd?$CJ?$AA@	; `string'
EXTRN	PyUnicode_FromFormat:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$count_repr DD imagerel count_repr
	DD	imagerel count_repr+141
	DD	imagerel $unwind$count_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$count_repr DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_09EHNGNPOI@count?$CI?$CFR?$CJ?$AA@
CONST	SEGMENT
??_C@_09EHNGNPOI@count?$CI?$CFR?$CJ?$AA@ DB 'count(%R)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IHFKCJPO@count?$CI?$CFR?0?5?$CFR?$CJ?$AA@
CONST	SEGMENT
??_C@_0O@IHFKCJPO@count?$CI?$CFR?0?5?$CFR?$CJ?$AA@ DB 'count(%R, %R)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PHBELKDM@count?$CI?$CFzd?$CJ?$AA@
CONST	SEGMENT
??_C@_0L@PHBELKDM@count?$CI?$CFzd?$CJ?$AA@ DB 'count(%zd)', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT count_repr
_TEXT	SEGMENT
lz$ = 48
count_repr PROC						; COMDAT

; 3939 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 3940 :     if (lz->cnt != PY_SSIZE_T_MAX)

  00006	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  0000a	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  00014	48 8b d9	 mov	 rbx, rcx
  00017	48 3b d0	 cmp	 rdx, rax
  0001a	74 11		 je	 SHORT $LN4@count_repr

; 3941 :         return PyUnicode_FromFormat("count(%zd)", lz->cnt);

  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@PHBELKDM@count?$CI?$CFzd?$CJ?$AA@

; 3955 : }

  00023	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00027	5b		 pop	 rbx
  00028	e9 00 00 00 00	 jmp	 PyUnicode_FromFormat
$LN4@count_repr:

; 3942 : 
; 3943 :     if (PyLong_Check(lz->long_step)) {

  0002d	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00031	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00035	f7 80 00 01 00
	00 00 00 00 01	 test	 DWORD PTR [rax+256], 16777216 ; 01000000H
  0003f	74 19		 je	 SHORT $LN1@count_repr

; 3944 :         long step = PyLong_AsLong(lz->long_step);

  00041	e8 00 00 00 00	 call	 PyLong_AsLong

; 3945 :         if (step == -1 && PyErr_Occurred()) {

  00046	83 f8 ff	 cmp	 eax, -1
  00049	75 28		 jne	 SHORT $LN2@count_repr
  0004b	e8 00 00 00 00	 call	 PyErr_Occurred
  00050	48 85 c0	 test	 rax, rax
  00053	74 05		 je	 SHORT $LN1@count_repr

; 3946 :             PyErr_Clear();

  00055	e8 00 00 00 00	 call	 PyErr_Clear
$LN1@count_repr:

; 3951 :         }
; 3952 :     }
; 3953 :     return PyUnicode_FromFormat("count(%R, %R)",
; 3954 :                                                             lz->long_cnt, lz->long_step);

  0005a	4c 8b 43 70	 mov	 r8, QWORD PTR [rbx+112]
  0005e	48 8b 53 68	 mov	 rdx, QWORD PTR [rbx+104]
  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@IHFKCJPO@count?$CI?$CFR?0?5?$CFR?$CJ?$AA@

; 3955 : }

  00069	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006d	5b		 pop	 rbx
  0006e	e9 00 00 00 00	 jmp	 PyUnicode_FromFormat
$LN2@count_repr:

; 3947 :         }
; 3948 :         if (step == 1) {

  00073	83 f8 01	 cmp	 eax, 1
  00076	75 e2		 jne	 SHORT $LN1@count_repr

; 3949 :             /* Don't display step when it is an integer equal to 1 */
; 3950 :             return PyUnicode_FromFormat("count(%R)", lz->long_cnt);

  00078	48 8b 53 68	 mov	 rdx, QWORD PTR [rbx+104]
  0007c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09EHNGNPOI@count?$CI?$CFR?$CJ?$AA@

; 3955 : }

  00083	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00087	5b		 pop	 rbx
  00088	e9 00 00 00 00	 jmp	 PyUnicode_FromFormat
count_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_04IAPHDJGK@O?$CIn?$CJ?$AA@		; `string'
;	COMDAT ??_C@_04IAPHDJGK@O?$CIn?$CJ?$AA@
CONST	SEGMENT
??_C@_04IAPHDJGK@O?$CIn?$CJ?$AA@ DB 'O(n)', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT count_reduce
_TEXT	SEGMENT
lz$ = 8
count_reduce PROC					; COMDAT

; 3960 :     if (lz->cnt == PY_SSIZE_T_MAX)

  00000	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]

; 3961 :         return Py_BuildValue("O(OO)", Py_TYPE(lz), lz->long_cnt, lz->long_step);

  00004	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00008	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  00012	4c 3b c0	 cmp	 r8, rax
  00015	75 14		 jne	 SHORT $LN1@count_redu
  00017	4c 8b 49 70	 mov	 r9, QWORD PTR [rcx+112]
  0001b	4c 8b 41 68	 mov	 r8, QWORD PTR [rcx+104]
  0001f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LNHFJPFN@O?$CIOO?$CJ?$AA@

; 3963 : }

  00026	e9 00 00 00 00	 jmp	 Py_BuildValue
$LN1@count_redu:

; 3962 :     return Py_BuildValue("O(n)", Py_TYPE(lz), lz->cnt);

  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04IAPHDJGK@O?$CIn?$CJ?$AA@

; 3963 : }

  00032	e9 00 00 00 00	 jmp	 Py_BuildValue
count_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@GJLDHGFP@O?$HMn?3repeat?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$repeat_new DD imagerel repeat_new
	DD	imagerel repeat_new+238
	DD	imagerel $unwind$repeat_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$repeat_new DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT ??_C@_0L@GJLDHGFP@O?$HMn?3repeat?$AA@
CONST	SEGMENT
??_C@_0L@GJLDHGFP@O?$HMn?3repeat?$AA@ DB 'O|n:repeat', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
CONST	ENDS
;	COMDAT repeat_new
_TEXT	SEGMENT
element$ = 48
type$ = 80
args$ = 88
kwds$ = 96
cnt$ = 104
repeat_new PROC						; COMDAT

; 4039 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	49 8b c0	 mov	 rax, r8
  00010	48 8b fa	 mov	 rdi, rdx

; 4040 :     repeatobject *ro;
; 4041 :     PyObject *element;
; 4042 :     Py_ssize_t cnt = -1;
; 4043 :     static char *kwargs[] = {"object", "times", NULL};
; 4044 : 
; 4045 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|n:repeat", kwargs,
; 4046 :                                      &element, &cnt))

  00013	48 8d 4c 24 68	 lea	 rcx, QWORD PTR cnt$[rsp]
  00018	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwargs@?1??repeat_new@@9@9
  0001f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@GJLDHGFP@O?$HMn?3repeat?$AA@
  00026	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0002b	48 8d 4c 24 30	 lea	 rcx, QWORD PTR element$[rsp]
  00030	48 8b d0	 mov	 rdx, rax
  00033	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00038	48 8b cf	 mov	 rcx, rdi
  0003b	48 c7 44 24 68
	ff ff ff ff	 mov	 QWORD PTR cnt$[rsp], -1
  00044	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00049	85 c0		 test	 eax, eax
  0004b	75 0d		 jne	 SHORT $LN3@repeat_new
$LN10@repeat_new:

; 4047 :         return NULL;

  0004d	33 c0		 xor	 eax, eax

; 4057 :     ro->cnt = cnt;
; 4058 :     return (PyObject *)ro;
; 4059 : }

  0004f	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00054	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00058	5f		 pop	 rdi
  00059	c3		 ret	 0
$LN3@repeat_new:

; 4048 : 
; 4049 :     if (PyTuple_Size(args) == 2 && cnt < 0)

  0005a	48 8b cf	 mov	 rcx, rdi
  0005d	e8 00 00 00 00	 call	 PyTuple_Size
  00062	48 83 f8 02	 cmp	 rax, 2
  00066	75 13		 jne	 SHORT $LN2@repeat_new
  00068	48 8b 44 24 68	 mov	 rax, QWORD PTR cnt$[rsp]
  0006d	33 c9		 xor	 ecx, ecx
  0006f	48 85 c0	 test	 rax, rax
  00072	48 0f 48 c1	 cmovs	 rax, rcx
  00076	48 89 44 24 68	 mov	 QWORD PTR cnt$[rsp], rax
$LN2@repeat_new:

; 4050 :         cnt = 0;
; 4051 : 
; 4052 :     ro = (repeatobject *)type->tp_alloc(type, 0);

  0007b	33 d2		 xor	 edx, edx
  0007d	48 8b cb	 mov	 rcx, rbx
  00080	ff 93 88 01 00
	00		 call	 QWORD PTR [rbx+392]
  00086	48 8b f8	 mov	 rdi, rax

; 4053 :     if (ro == NULL)

  00089	48 85 c0	 test	 rax, rax

; 4054 :         return NULL;

  0008c	74 bf		 je	 SHORT $LN10@repeat_new

; 4055 :     Py_INCREF(element);

  0008e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR element$[rsp]
  00093	e8 00 00 00 00	 call	 _Py_PXCTX
  00098	85 c0		 test	 eax, eax
  0009a	75 32		 jne	 SHORT $LN7@repeat_new
  0009c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000aa	4c 8b cb	 mov	 r9, rbx
  000ad	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000b3	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000bb	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c0	85 c0		 test	 eax, eax
  000c2	75 06		 jne	 SHORT $LN6@repeat_new
  000c4	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000c8	74 04		 je	 SHORT $LN7@repeat_new
$LN6@repeat_new:
  000ca	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN7@repeat_new:

; 4056 :     ro->element = element;

  000ce	48 8b 44 24 30	 mov	 rax, QWORD PTR element$[rsp]

; 4057 :     ro->cnt = cnt;
; 4058 :     return (PyObject *)ro;
; 4059 : }

  000d3	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000d8	48 89 47 60	 mov	 QWORD PTR [rdi+96], rax
  000dc	48 8b 44 24 68	 mov	 rax, QWORD PTR cnt$[rsp]
  000e1	48 89 47 68	 mov	 QWORD PTR [rdi+104], rax
  000e5	48 8b c7	 mov	 rax, rdi
  000e8	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000ec	5f		 pop	 rdi
  000ed	c3		 ret	 0
repeat_new ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$repeat_dealloc DD imagerel repeat_dealloc
	DD	imagerel repeat_dealloc+152
	DD	imagerel $unwind$repeat_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$repeat_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT repeat_dealloc
_TEXT	SEGMENT
ro$ = 64
repeat_dealloc PROC					; COMDAT

; 4063 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 4064 :     PyObject_GC_UnTrack(ro);

  0000d	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 4065 :     Py_XDECREF(ro->element);

  00012	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  00016	48 85 db	 test	 rbx, rbx
  00019	74 65		 je	 SHORT $LN3@repeat_dea
  0001b	e8 00 00 00 00	 call	 _Py_PXCTX
  00020	85 c0		 test	 eax, eax
  00022	75 5c		 jne	 SHORT $LN3@repeat_dea
  00024	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00028	a8 20		 test	 al, 32			; 00000020H
  0002a	75 4c		 jne	 SHORT $LN11@repeat_dea
  0002c	84 c0		 test	 al, al
  0002e	78 48		 js	 SHORT $LN11@repeat_dea
  00030	a8 02		 test	 al, 2
  00032	75 4c		 jne	 SHORT $LN3@repeat_dea
  00034	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00038	75 46		 jne	 SHORT $LN3@repeat_dea
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00048	4c 8b cb	 mov	 r9, rbx
  0004b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00051	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00059	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005e	48 8b cb	 mov	 rcx, rbx
  00061	85 c0		 test	 eax, eax
  00063	74 07		 je	 SHORT $LN16@repeat_dea
  00065	e8 00 00 00 00	 call	 _Px_Dealloc
  0006a	eb 14		 jmp	 SHORT $LN3@repeat_dea
$LN16@repeat_dea:
  0006c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00070	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00076	eb 08		 jmp	 SHORT $LN3@repeat_dea
$LN11@repeat_dea:
  00078	48 8b cb	 mov	 rcx, rbx
  0007b	e8 00 00 00 00	 call	 Px_DecRef
$LN3@repeat_dea:

; 4066 :     Py_TYPE(ro)->tp_free(ro);

  00080	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00084	48 8b cf	 mov	 rcx, rdi

; 4067 : }

  00087	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0008c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00090	5f		 pop	 rdi
  00091	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
repeat_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@BLMCKLBL@repeat_traverse?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$repeat_traverse DD imagerel repeat_traverse
	DD	imagerel repeat_traverse+97
	DD	imagerel $unwind$repeat_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$repeat_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BA@BLMCKLBL@repeat_traverse?$AA@
CONST	SEGMENT
??_C@_0BA@BLMCKLBL@repeat_traverse?$AA@ DB 'repeat_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT repeat_traverse
_TEXT	SEGMENT
ro$ = 48
visit$ = 56
arg$ = 64
repeat_traverse PROC					; COMDAT

; 4071 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 4072 :     Py_VISIT(ro->element);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN3@repeat_tra
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@BLMCKLBL@repeat_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 e8 0f 00
	00		 mov	 r8d, 4072		; 00000fe8H
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@repeat_tra:
  0003d	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN5@repeat_tra
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 02		 jne	 SHORT $LN7@repeat_tra
$LN5@repeat_tra:

; 4073 :     return 0;

  0004f	33 c0		 xor	 eax, eax
$LN7@repeat_tra:

; 4074 : }

  00051	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00056	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0005b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005f	5f		 pop	 rdi
  00060	c3		 ret	 0
repeat_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$repeat_next DD imagerel repeat_next
	DD	imagerel repeat_next+119
	DD	imagerel $unwind$repeat_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$repeat_next DD 041d01H
	DD	08741dH
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT repeat_next
_TEXT	SEGMENT
ro$ = 64
repeat_next PROC					; COMDAT

; 4078 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 4079 :     if (ro->cnt == 0)

  00006	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	48 85 c0	 test	 rax, rax
  00010	75 06		 jne	 SHORT $LN2@repeat_nex

; 4085 : }

  00012	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00016	5b		 pop	 rbx
  00017	c3		 ret	 0
$LN2@repeat_nex:
  00018	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi

; 4080 :         return NULL;
; 4081 :     if (ro->cnt > 0)

  0001d	48 85 c0	 test	 rax, rax
  00020	7e 07		 jle	 SHORT $LN1@repeat_nex

; 4082 :         ro->cnt--;

  00022	48 ff c8	 dec	 rax
  00025	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
$LN1@repeat_nex:

; 4083 :     Py_INCREF(ro->element);

  00029	48 8b 79 60	 mov	 rdi, QWORD PTR [rcx+96]
  0002d	e8 00 00 00 00	 call	 _Py_PXCTX
  00032	85 c0		 test	 eax, eax
  00034	75 32		 jne	 SHORT $LN6@repeat_nex
  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00044	4c 8b cf	 mov	 r9, rdi
  00047	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0004d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00055	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005a	85 c0		 test	 eax, eax
  0005c	75 06		 jne	 SHORT $LN5@repeat_nex
  0005e	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  00062	74 04		 je	 SHORT $LN6@repeat_nex
$LN5@repeat_nex:
  00064	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN6@repeat_nex:

; 4084 :     return ro->element;

  00068	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  0006c	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 4085 : }

  00071	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00075	5b		 pop	 rbx
  00076	c3		 ret	 0
repeat_next ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@LEOBDIJA@repeat?$CI?$CFR?0?5?$CFzd?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0L@JNABFBGF@repeat?$CI?$CFR?$CJ?$AA@	; `string'
;	COMDAT ??_C@_0BA@LEOBDIJA@repeat?$CI?$CFR?0?5?$CFzd?$CJ?$AA@
CONST	SEGMENT
??_C@_0BA@LEOBDIJA@repeat?$CI?$CFR?0?5?$CFzd?$CJ?$AA@ DB 'repeat(%R, %zd)'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JNABFBGF@repeat?$CI?$CFR?$CJ?$AA@
CONST	SEGMENT
??_C@_0L@JNABFBGF@repeat?$CI?$CFR?$CJ?$AA@ DB 'repeat(%R)', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT repeat_repr
_TEXT	SEGMENT
ro$ = 8
repeat_repr PROC					; COMDAT

; 4090 :     if (ro->cnt == -1)

  00000	4c 8b 41 68	 mov	 r8, QWORD PTR [rcx+104]

; 4091 :         return PyUnicode_FromFormat("repeat(%R)", ro->element);

  00004	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00008	49 83 f8 ff	 cmp	 r8, -1
  0000c	75 0c		 jne	 SHORT $LN2@repeat_rep
  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@JNABFBGF@repeat?$CI?$CFR?$CJ?$AA@

; 4094 : }

  00015	e9 00 00 00 00	 jmp	 PyUnicode_FromFormat
$LN2@repeat_rep:

; 4092 :     else
; 4093 :         return PyUnicode_FromFormat("repeat(%R, %zd)", ro->element, ro->cnt);

  0001a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@LEOBDIJA@repeat?$CI?$CFR?0?5?$CFzd?$CJ?$AA@

; 4094 : }

  00021	e9 00 00 00 00	 jmp	 PyUnicode_FromFormat
repeat_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@HLGAKMHH@len?$CI?$CJ?5of?5unsized?5object?$AA@ ; `string'
EXTRN	PyLong_FromSize_t:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$repeat_len DD imagerel repeat_len
	DD	imagerel repeat_len+49
	DD	imagerel $unwind$repeat_len
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$repeat_len DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BI@HLGAKMHH@len?$CI?$CJ?5of?5unsized?5object?$AA@
CONST	SEGMENT
??_C@_0BI@HLGAKMHH@len?$CI?$CJ?5of?5unsized?5object?$AA@ DB 'len() of uns'
	DB	'ized object', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT repeat_len
_TEXT	SEGMENT
ro$ = 48
repeat_len PROC						; COMDAT

; 4098 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 4099 :     if (ro->cnt == -1) {

  00004	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00008	48 83 f9 ff	 cmp	 rcx, -1
  0000c	75 1a		 jne	 SHORT $LN1@repeat_len

; 4100 :         PyErr_SetString(PyExc_TypeError, "len() of unsized object");

  0000e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@HLGAKMHH@len?$CI?$CJ?5of?5unsized?5object?$AA@
  0001c	e8 00 00 00 00	 call	 PyErr_SetString

; 4101 :         return NULL;

  00021	33 c0		 xor	 eax, eax

; 4102 :     }
; 4103 :     return PyLong_FromSize_t(ro->cnt);
; 4104 : }

  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	c3		 ret	 0
$LN1@repeat_len:
  00028	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002c	e9 00 00 00 00	 jmp	 PyLong_FromSize_t
repeat_len ENDP
_TEXT	ENDS
PUBLIC	??_C@_04LJHIBFLN@O?$CIO?$CJ?$AA@		; `string'
;	COMDAT ??_C@_04LJHIBFLN@O?$CIO?$CJ?$AA@
CONST	SEGMENT
??_C@_04LJHIBFLN@O?$CIO?$CJ?$AA@ DB 'O(O)', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT repeat_reduce
_TEXT	SEGMENT
ro$ = 8
repeat_reduce PROC					; COMDAT

; 4111 :     /* unpickle this so that a new repeat iterator is constructed with an
; 4112 :      * object, then call __setstate__ on it to set cnt
; 4113 :      */
; 4114 :     if (ro->cnt >= 0)

  00000	4c 8b 49 68	 mov	 r9, QWORD PTR [rcx+104]

; 4115 :         return Py_BuildValue("O(On)", Py_TYPE(ro), ro->element, ro->cnt);

  00004	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]
  00008	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0000c	4d 85 c9	 test	 r9, r9
  0000f	78 0c		 js	 SHORT $LN2@repeat_red
  00011	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05IEPKLDIK@O?$CIOn?$CJ?$AA@

; 4118 : }

  00018	e9 00 00 00 00	 jmp	 Py_BuildValue
$LN2@repeat_red:

; 4116 :     else
; 4117 :         return Py_BuildValue("O(O)", Py_TYPE(ro), ro->element);

  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04LJHIBFLN@O?$CIO?$CJ?$AA@

; 4118 : }

  00024	e9 00 00 00 00	 jmp	 Py_BuildValue
repeat_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DB@HEDIPOBC@zip_longest?5argument?5?$CD?$CFzd?5must?5s@ ; `string'
PUBLIC	??_C@_0DB@DOPEADI@zip_longest?$CI?$CJ?5got?5an?5unexpected?5@ ; `string'
PUBLIC	??_C@_09LJHHIKOH@fillvalue?$AA@			; `string'
EXTRN	PyErr_Format:PROC
EXTRN	PyDict_GetItemString:PROC
EXTRN	PyDict_Size:PROC
EXTRN	PyDict_Type:BYTE
EXTRN	PySequence_Size:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$zip_longest_new DD imagerel zip_longest_new
	DD	imagerel zip_longest_new+187
	DD	imagerel $unwind$zip_longest_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$zip_longest_new DD imagerel zip_longest_new+187
	DD	imagerel zip_longest_new+749
	DD	imagerel $chain$1$zip_longest_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$zip_longest_new DD imagerel zip_longest_new+749
	DD	imagerel zip_longest_new+773
	DD	imagerel $chain$2$zip_longest_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$zip_longest_new DD 021H
	DD	imagerel zip_longest_new
	DD	imagerel zip_longest_new+187
	DD	imagerel $unwind$zip_longest_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$zip_longest_new DD 020521H
	DD	0d7405H
	DD	imagerel zip_longest_new
	DD	imagerel zip_longest_new+187
	DD	imagerel $unwind$zip_longest_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip_longest_new DD 0aaa01H
	DD	0c64aaH
	DD	0e3412H
	DD	0f00e5212H
	DD	0d00ae00cH
	DD	05006c008H
xdata	ENDS
;	COMDAT ??_C@_0DB@HEDIPOBC@zip_longest?5argument?5?$CD?$CFzd?5must?5s@
CONST	SEGMENT
??_C@_0DB@HEDIPOBC@zip_longest?5argument?5?$CD?$CFzd?5must?5s@ DB 'zip_lo'
	DB	'ngest argument #%zd must support iteration', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@DOPEADI@zip_longest?$CI?$CJ?5got?5an?5unexpected?5@
CONST	SEGMENT
??_C@_0DB@DOPEADI@zip_longest?$CI?$CJ?5got?5an?5unexpected?5@ DB 'zip_lon'
	DB	'gest() got an unexpected keyword argument', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09LJHHIKOH@fillvalue?$AA@
CONST	SEGMENT
??_C@_09LJHHIKOH@fillvalue?$AA@ DB 'fillvalue', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
CONST	ENDS
;	COMDAT zip_longest_new
_TEXT	SEGMENT
type$ = 96
args$ = 104
kwds$ = 112
zip_longest_new PROC					; COMDAT

; 4192 : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	55		 push	 rbp
  00006	41 54		 push	 r12
  00008	41 55		 push	 r13
  0000a	41 56		 push	 r14
  0000c	41 57		 push	 r15
  0000e	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00012	4c 8b f1	 mov	 r14, rcx

; 4193 :     ziplongestobject *lz;
; 4194 :     Py_ssize_t i;
; 4195 :     PyObject *ittuple;  /* tuple of iterators */
; 4196 :     PyObject *result;
; 4197 :     PyObject *fillvalue = Py_None;

  00015	4c 8d 3d 00 00
	00 00		 lea	 r15, OFFSET FLAT:_Py_NoneStruct

; 4198 :     Py_ssize_t tuplesize = PySequence_Length(args);

  0001c	48 8b ca	 mov	 rcx, rdx
  0001f	49 8b d8	 mov	 rbx, r8
  00022	4c 8b e2	 mov	 r12, rdx
  00025	4d 8b ef	 mov	 r13, r15
  00028	e8 00 00 00 00	 call	 PySequence_Size
  0002d	48 8b e8	 mov	 rbp, rax

; 4199 : 
; 4200 :     if (kwds != NULL && PyDict_CheckExact(kwds) && PyDict_Size(kwds) > 0) {

  00030	48 85 db	 test	 rbx, rbx
  00033	74 6d		 je	 SHORT $LN13@zip_longes
  00035	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  0003c	48 39 43 58	 cmp	 QWORD PTR [rbx+88], rax
  00040	74 06		 je	 SHORT $LN14@zip_longes
  00042	48 39 43 38	 cmp	 QWORD PTR [rbx+56], rax
  00046	75 5a		 jne	 SHORT $LN13@zip_longes
$LN14@zip_longes:
  00048	48 8b cb	 mov	 rcx, rbx
  0004b	e8 00 00 00 00	 call	 PyDict_Size
  00050	48 85 c0	 test	 rax, rax
  00053	7e 4d		 jle	 SHORT $LN13@zip_longes

; 4201 :         fillvalue = PyDict_GetItemString(kwds, "fillvalue");

  00055	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09LJHHIKOH@fillvalue?$AA@
  0005c	48 8b cb	 mov	 rcx, rbx
  0005f	e8 00 00 00 00	 call	 PyDict_GetItemString
  00064	4c 8b e8	 mov	 r13, rax

; 4202 :         if (fillvalue == NULL  ||  PyDict_Size(kwds) > 1) {

  00067	48 85 c0	 test	 rax, rax
  0006a	74 0e		 je	 SHORT $LN12@zip_longes
  0006c	48 8b cb	 mov	 rcx, rbx
  0006f	e8 00 00 00 00	 call	 PyDict_Size
  00074	48 83 f8 01	 cmp	 rax, 1
  00078	7e 28		 jle	 SHORT $LN13@zip_longes
$LN12@zip_longes:

; 4203 :             PyErr_SetString(PyExc_TypeError,
; 4204 :                 "zip_longest() got an unexpected keyword argument");

  0007a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00081	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@DOPEADI@zip_longest?$CI?$CJ?5got?5an?5unexpected?5@
  00088	e8 00 00 00 00	 call	 PyErr_SetString

; 4205 :             return NULL;

  0008d	33 c0		 xor	 eax, eax

; 4255 : }

  0008f	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  00094	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00098	41 5f		 pop	 r15
  0009a	41 5e		 pop	 r14
  0009c	41 5d		 pop	 r13
  0009e	41 5c		 pop	 r12
  000a0	5d		 pop	 rbp
  000a1	c3		 ret	 0
$LN13@zip_longes:

; 4206 :         }
; 4207 :     }
; 4208 : 
; 4209 :     /* args must be a tuple */
; 4210 :     assert(PyTuple_Check(args));
; 4211 : 
; 4212 :     /* obtain iterators */
; 4213 :     ittuple = PyTuple_New(tuplesize);

  000a2	48 8b cd	 mov	 rcx, rbp
  000a5	48 89 74 24 60	 mov	 QWORD PTR [rsp+96], rsi
  000aa	e8 00 00 00 00	 call	 PyTuple_New
  000af	48 8b f0	 mov	 rsi, rax

; 4214 :     if (ittuple == NULL)

  000b2	48 85 c0	 test	 rax, rax
  000b5	0f 84 32 02 00
	00		 je	 $LN53@zip_longes
$LN11@zip_longes:
  000bb	48 89 7c 24 68	 mov	 QWORD PTR [rsp+104], rdi

; 4215 :         return NULL;
; 4216 :     for (i=0; i < tuplesize; ++i) {

  000c0	33 ff		 xor	 edi, edi
  000c2	48 85 ed	 test	 rbp, rbp
  000c5	7e 2a		 jle	 SHORT $LN8@zip_longes
  000c7	48 8d 58 70	 lea	 rbx, QWORD PTR [rax+112]
  000cb	4c 2b e0	 sub	 r12, rax
  000ce	66 90		 npad	 2
$LL10@zip_longes:

; 4217 :         PyObject *item = PyTuple_GET_ITEM(args, i);
; 4218 :         PyObject *it = PyObject_GetIter(item);

  000d0	49 8b 0c 1c	 mov	 rcx, QWORD PTR [r12+rbx]
  000d4	e8 00 00 00 00	 call	 PyObject_GetIter

; 4219 :         if (it == NULL) {

  000d9	48 85 c0	 test	 rax, rax
  000dc	0f 84 f9 00 00
	00		 je	 $LN50@zip_longes

; 4226 :         }
; 4227 :         PyTuple_SET_ITEM(ittuple, i, it);

  000e2	48 ff c7	 inc	 rdi
  000e5	48 89 03	 mov	 QWORD PTR [rbx], rax
  000e8	48 83 c3 08	 add	 rbx, 8
  000ec	48 3b fd	 cmp	 rdi, rbp
  000ef	7c df		 jl	 SHORT $LL10@zip_longes
$LN8@zip_longes:

; 4228 :     }
; 4229 : 
; 4230 :     /* create a result holder */
; 4231 :     result = PyTuple_New(tuplesize);

  000f1	48 8b cd	 mov	 rcx, rbp
  000f4	e8 00 00 00 00	 call	 PyTuple_New
  000f9	48 8b d8	 mov	 rbx, rax

; 4232 :     if (result == NULL) {

  000fc	48 85 c0	 test	 rax, rax

; 4233 :         Py_DECREF(ittuple);
; 4234 :         return NULL;

  000ff	0f 84 fd 00 00
	00		 je	 $LN6@zip_longes

; 4235 :     }
; 4236 :     for (i=0 ; i < tuplesize ; i++) {

  00105	48 85 ed	 test	 rbp, rbp
  00108	7e 54		 jle	 SHORT $LN2@zip_longes
  0010a	48 8d 78 70	 lea	 rdi, QWORD PTR [rax+112]
  0010e	4c 8b e5	 mov	 r12, rbp
$LL4@zip_longes:

; 4237 :         Py_INCREF(Py_None);

  00111	e8 00 00 00 00	 call	 _Py_PXCTX
  00116	85 c0		 test	 eax, eax
  00118	75 38		 jne	 SHORT $LN19@zip_longes
  0011a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00121	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00128	4d 8b cf	 mov	 r9, r15
  0012b	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00131	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00139	e8 00 00 00 00	 call	 _PyParallel_Guard
  0013e	85 c0		 test	 eax, eax
  00140	75 09		 jne	 SHORT $LN18@zip_longes
  00142	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00149	74 07		 je	 SHORT $LN19@zip_longes
$LN18@zip_longes:
  0014b	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN19@zip_longes:

; 4238 :         PyTuple_SET_ITEM(result, i, Py_None);

  00152	4c 89 3f	 mov	 QWORD PTR [rdi], r15
  00155	48 83 c7 08	 add	 rdi, 8
  00159	49 ff cc	 dec	 r12
  0015c	75 b3		 jne	 SHORT $LL4@zip_longes
$LN2@zip_longes:

; 4239 :     }
; 4240 : 
; 4241 :     /* create ziplongestobject structure */
; 4242 :     lz = (ziplongestobject *)type->tp_alloc(type, 0);

  0015e	33 d2		 xor	 edx, edx
  00160	49 8b ce	 mov	 rcx, r14
  00163	41 ff 96 88 01
	00 00		 call	 QWORD PTR [r14+392]
  0016a	48 8b f8	 mov	 rdi, rax

; 4243 :     if (lz == NULL) {

  0016d	48 85 c0	 test	 rax, rax
  00170	0f 85 1c 01 00
	00		 jne	 $LN1@zip_longes

; 4244 :         Py_DECREF(ittuple);

  00176	e8 00 00 00 00	 call	 _Py_PXCTX
  0017b	85 c0		 test	 eax, eax
  0017d	0f 85 a2 00 00
	00		 jne	 $LN32@zip_longes
  00183	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  00187	a8 20		 test	 al, 32			; 00000020H
  00189	0f 85 8e 00 00
	00		 jne	 $LN26@zip_longes
  0018f	84 c0		 test	 al, al
  00191	0f 88 86 00 00
	00		 js	 $LN26@zip_longes
  00197	a8 02		 test	 al, 2
  00199	0f 85 86 00 00
	00		 jne	 $LN32@zip_longes
  0019f	48 ff 4e 50	 dec	 QWORD PTR [rsi+80]
  001a3	0f 85 7c 00 00
	00		 jne	 $LN32@zip_longes
  001a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  001b7	4c 8b ce	 mov	 r9, rsi
  001ba	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001c0	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001c8	e8 00 00 00 00	 call	 _PyParallel_Guard
  001cd	48 8b ce	 mov	 rcx, rsi
  001d0	85 c0		 test	 eax, eax
  001d2	74 3d		 je	 SHORT $LN31@zip_longes
  001d4	e8 00 00 00 00	 call	 _Px_Dealloc
  001d9	eb 4a		 jmp	 SHORT $LN32@zip_longes
$LN50@zip_longes:

; 4220 :             if (PyErr_ExceptionMatches(PyExc_TypeError))

  001db	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  001e2	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  001e7	85 c0		 test	 eax, eax
  001e9	74 17		 je	 SHORT $LN6@zip_longes

; 4221 :                 PyErr_Format(PyExc_TypeError,
; 4222 :                     "zip_longest argument #%zd must support iteration",
; 4223 :                     i+1);

  001eb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  001f2	4c 8d 47 01	 lea	 r8, QWORD PTR [rdi+1]
  001f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@HEDIPOBC@zip_longest?5argument?5?$CD?$CFzd?5must?5s@
  001fd	e8 00 00 00 00	 call	 PyErr_Format
$LN6@zip_longes:

; 4224 :             Py_DECREF(ittuple);

  00202	48 8b ce	 mov	 rcx, rsi
  00205	e8 00 00 00 00	 call	 _Py_DecRef

; 4225 :             return NULL;

  0020a	33 c0		 xor	 eax, eax
  0020c	e9 d7 00 00 00	 jmp	 $LN54@zip_longes

; 4244 :         Py_DECREF(ittuple);

$LN31@zip_longes:
  00211	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  00215	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0021b	eb 08		 jmp	 SHORT $LN32@zip_longes
$LN26@zip_longes:
  0021d	48 8b ce	 mov	 rcx, rsi
  00220	e8 00 00 00 00	 call	 Px_DecRef
$LN32@zip_longes:

; 4245 :         Py_DECREF(result);

  00225	e8 00 00 00 00	 call	 _Py_PXCTX
  0022a	85 c0		 test	 eax, eax
  0022c	75 60		 jne	 SHORT $LN43@zip_longes
  0022e	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00232	a8 20		 test	 al, 32			; 00000020H
  00234	75 50		 jne	 SHORT $LN37@zip_longes
  00236	84 c0		 test	 al, al
  00238	78 4c		 js	 SHORT $LN37@zip_longes
  0023a	a8 02		 test	 al, 2
  0023c	75 50		 jne	 SHORT $LN43@zip_longes
  0023e	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00242	75 4a		 jne	 SHORT $LN43@zip_longes
  00244	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0024b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00252	4c 8b cb	 mov	 r9, rbx
  00255	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0025b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00263	e8 00 00 00 00	 call	 _PyParallel_Guard
  00268	48 8b cb	 mov	 rcx, rbx
  0026b	85 c0		 test	 eax, eax
  0026d	74 09		 je	 SHORT $LN42@zip_longes
  0026f	e8 00 00 00 00	 call	 _Px_Dealloc

; 4246 :         return NULL;

  00274	33 c0		 xor	 eax, eax
  00276	eb 70		 jmp	 SHORT $LN54@zip_longes

; 4245 :         Py_DECREF(result);

$LN42@zip_longes:
  00278	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0027c	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 4246 :         return NULL;

  00282	33 c0		 xor	 eax, eax
  00284	eb 62		 jmp	 SHORT $LN54@zip_longes

; 4245 :         Py_DECREF(result);

$LN37@zip_longes:
  00286	48 8b cb	 mov	 rcx, rbx
  00289	e8 00 00 00 00	 call	 Px_DecRef
$LN43@zip_longes:

; 4246 :         return NULL;

  0028e	33 c0		 xor	 eax, eax
  00290	eb 56		 jmp	 SHORT $LN54@zip_longes
$LN1@zip_longes:

; 4247 :     }
; 4248 :     lz->ittuple = ittuple;

  00292	48 89 70 70	 mov	 QWORD PTR [rax+112], rsi

; 4249 :     lz->tuplesize = tuplesize;

  00296	48 89 68 60	 mov	 QWORD PTR [rax+96], rbp

; 4250 :     lz->numactive = tuplesize;

  0029a	48 89 68 68	 mov	 QWORD PTR [rax+104], rbp

; 4251 :     lz->result = result;

  0029e	48 89 58 78	 mov	 QWORD PTR [rax+120], rbx

; 4252 :     Py_INCREF(fillvalue);

  002a2	e8 00 00 00 00	 call	 _Py_PXCTX
  002a7	85 c0		 test	 eax, eax
  002a9	75 33		 jne	 SHORT $LN45@zip_longes
  002ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  002b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  002b9	4d 8b cd	 mov	 r9, r13
  002bc	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  002c2	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  002ca	e8 00 00 00 00	 call	 _PyParallel_Guard
  002cf	85 c0		 test	 eax, eax
  002d1	75 07		 jne	 SHORT $LN44@zip_longes
  002d3	41 f6 45 20 20	 test	 BYTE PTR [r13+32], 32	; 00000020H
  002d8	74 04		 je	 SHORT $LN45@zip_longes
$LN44@zip_longes:
  002da	49 ff 45 50	 inc	 QWORD PTR [r13+80]
$LN45@zip_longes:

; 4253 :     lz->fillvalue = fillvalue;

  002de	4c 89 af 80 00
	00 00		 mov	 QWORD PTR [rdi+128], r13

; 4254 :     return (PyObject *)lz;

  002e5	48 8b c7	 mov	 rax, rdi
$LN54@zip_longes:
  002e8	48 8b 7c 24 68	 mov	 rdi, QWORD PTR [rsp+104]
$LN53@zip_longes:
  002ed	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]

; 4255 : }

  002f2	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  002f7	48 83 c4 30	 add	 rsp, 48			; 00000030H
  002fb	41 5f		 pop	 r15
  002fd	41 5e		 pop	 r14
  002ff	41 5d		 pop	 r13
  00301	41 5c		 pop	 r12
  00303	5d		 pop	 rbp
  00304	c3		 ret	 0
zip_longest_new ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$zip_longest_dealloc DD imagerel zip_longest_dealloc
	DD	imagerel zip_longest_dealloc+375
	DD	imagerel $unwind$zip_longest_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip_longest_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT zip_longest_dealloc
_TEXT	SEGMENT
lz$ = 64
zip_longest_dealloc PROC				; COMDAT

; 4259 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 4260 :     PyObject_GC_UnTrack(lz);

  0000d	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 4261 :     Py_XDECREF(lz->ittuple);

  00012	48 8b 5f 70	 mov	 rbx, QWORD PTR [rdi+112]
  00016	48 85 db	 test	 rbx, rbx
  00019	74 65		 je	 SHORT $LN11@zip_longes@2
  0001b	e8 00 00 00 00	 call	 _Py_PXCTX
  00020	85 c0		 test	 eax, eax
  00022	75 5c		 jne	 SHORT $LN11@zip_longes@2
  00024	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00028	a8 20		 test	 al, 32			; 00000020H
  0002a	75 4c		 jne	 SHORT $LN19@zip_longes@2
  0002c	84 c0		 test	 al, al
  0002e	78 48		 js	 SHORT $LN19@zip_longes@2
  00030	a8 02		 test	 al, 2
  00032	75 4c		 jne	 SHORT $LN11@zip_longes@2
  00034	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00038	75 46		 jne	 SHORT $LN11@zip_longes@2
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00048	4c 8b cb	 mov	 r9, rbx
  0004b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00051	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00059	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005e	48 8b cb	 mov	 rcx, rbx
  00061	85 c0		 test	 eax, eax
  00063	74 07		 je	 SHORT $LN24@zip_longes@2
  00065	e8 00 00 00 00	 call	 _Px_Dealloc
  0006a	eb 14		 jmp	 SHORT $LN11@zip_longes@2
$LN24@zip_longes@2:
  0006c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00070	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00076	eb 08		 jmp	 SHORT $LN11@zip_longes@2
$LN19@zip_longes@2:
  00078	48 8b cb	 mov	 rcx, rbx
  0007b	e8 00 00 00 00	 call	 Px_DecRef
$LN11@zip_longes@2:

; 4262 :     Py_XDECREF(lz->result);

  00080	48 8b 5f 78	 mov	 rbx, QWORD PTR [rdi+120]
  00084	48 85 db	 test	 rbx, rbx
  00087	74 65		 je	 SHORT $LN7@zip_longes@2
  00089	e8 00 00 00 00	 call	 _Py_PXCTX
  0008e	85 c0		 test	 eax, eax
  00090	75 5c		 jne	 SHORT $LN7@zip_longes@2
  00092	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00096	a8 20		 test	 al, 32			; 00000020H
  00098	75 4c		 jne	 SHORT $LN30@zip_longes@2
  0009a	84 c0		 test	 al, al
  0009c	78 48		 js	 SHORT $LN30@zip_longes@2
  0009e	a8 02		 test	 al, 2
  000a0	75 4c		 jne	 SHORT $LN7@zip_longes@2
  000a2	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000a6	75 46		 jne	 SHORT $LN7@zip_longes@2
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000b6	4c 8b cb	 mov	 r9, rbx
  000b9	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000bf	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cc	48 8b cb	 mov	 rcx, rbx
  000cf	85 c0		 test	 eax, eax
  000d1	74 07		 je	 SHORT $LN35@zip_longes@2
  000d3	e8 00 00 00 00	 call	 _Px_Dealloc
  000d8	eb 14		 jmp	 SHORT $LN7@zip_longes@2
$LN35@zip_longes@2:
  000da	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000de	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000e4	eb 08		 jmp	 SHORT $LN7@zip_longes@2
$LN30@zip_longes@2:
  000e6	48 8b cb	 mov	 rcx, rbx
  000e9	e8 00 00 00 00	 call	 Px_DecRef
$LN7@zip_longes@2:

; 4263 :     Py_XDECREF(lz->fillvalue);

  000ee	48 8b 9f 80 00
	00 00		 mov	 rbx, QWORD PTR [rdi+128]
  000f5	48 85 db	 test	 rbx, rbx
  000f8	74 65		 je	 SHORT $LN3@zip_longes@2
  000fa	e8 00 00 00 00	 call	 _Py_PXCTX
  000ff	85 c0		 test	 eax, eax
  00101	75 5c		 jne	 SHORT $LN3@zip_longes@2
  00103	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00107	a8 20		 test	 al, 32			; 00000020H
  00109	75 4c		 jne	 SHORT $LN41@zip_longes@2
  0010b	84 c0		 test	 al, al
  0010d	78 48		 js	 SHORT $LN41@zip_longes@2
  0010f	a8 02		 test	 al, 2
  00111	75 4c		 jne	 SHORT $LN3@zip_longes@2
  00113	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00117	75 46		 jne	 SHORT $LN3@zip_longes@2
  00119	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00120	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00127	4c 8b cb	 mov	 r9, rbx
  0012a	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00130	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00138	e8 00 00 00 00	 call	 _PyParallel_Guard
  0013d	48 8b cb	 mov	 rcx, rbx
  00140	85 c0		 test	 eax, eax
  00142	74 07		 je	 SHORT $LN46@zip_longes@2
  00144	e8 00 00 00 00	 call	 _Px_Dealloc
  00149	eb 14		 jmp	 SHORT $LN3@zip_longes@2
$LN46@zip_longes@2:
  0014b	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0014f	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00155	eb 08		 jmp	 SHORT $LN3@zip_longes@2
$LN41@zip_longes@2:
  00157	48 8b cb	 mov	 rcx, rbx
  0015a	e8 00 00 00 00	 call	 Px_DecRef
$LN3@zip_longes@2:

; 4264 :     Py_TYPE(lz)->tp_free(lz);

  0015f	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00163	48 8b cf	 mov	 rcx, rdi

; 4265 : }

  00166	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0016b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0016f	5f		 pop	 rdi
  00170	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
zip_longest_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@KGJJGDGN@zip_longest_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip_longest_traverse DD imagerel zip_longest_traverse
	DD	imagerel zip_longest_traverse+210
	DD	imagerel $unwind$zip_longest_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip_longest_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BF@KGJJGDGN@zip_longest_traverse?$AA@
CONST	SEGMENT
??_C@_0BF@KGJJGDGN@zip_longest_traverse?$AA@ DB 'zip_longest_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT zip_longest_traverse
_TEXT	SEGMENT
lz$ = 48
visit$ = 56
arg$ = 64
zip_longest_traverse PROC				; COMDAT

; 4269 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 4270 :     Py_VISIT(lz->ittuple);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN15@zip_longes@3
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@KGJJGDGN@zip_longest_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 ae 10 00
	00		 mov	 r8d, 4270		; 000010aeH
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN15@zip_longes@3:
  0003d	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN17@zip_longes@3
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 73		 jne	 SHORT $LN19@zip_longes@3
$LN17@zip_longes@3:

; 4271 :     Py_VISIT(lz->result);

  0004f	e8 00 00 00 00	 call	 _Py_PXCTX
  00054	85 c0		 test	 eax, eax
  00056	74 1c		 je	 SHORT $LN9@zip_longes@3
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@KGJJGDGN@zip_longest_traverse?$AA@
  00066	45 33 c9	 xor	 r9d, r9d
  00069	41 b8 af 10 00
	00		 mov	 r8d, 4271		; 000010afH
  0006f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@zip_longes@3:
  00074	48 8b 4b 78	 mov	 rcx, QWORD PTR [rbx+120]
  00078	48 85 c9	 test	 rcx, rcx
  0007b	74 09		 je	 SHORT $LN11@zip_longes@3
  0007d	48 8b d7	 mov	 rdx, rdi
  00080	ff d6		 call	 rsi
  00082	85 c0		 test	 eax, eax
  00084	75 3c		 jne	 SHORT $LN19@zip_longes@3
$LN11@zip_longes@3:

; 4272 :     Py_VISIT(lz->fillvalue);

  00086	e8 00 00 00 00	 call	 _Py_PXCTX
  0008b	85 c0		 test	 eax, eax
  0008d	74 1c		 je	 SHORT $LN3@zip_longes@3
  0008f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  00096	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@KGJJGDGN@zip_longest_traverse?$AA@
  0009d	45 33 c9	 xor	 r9d, r9d
  000a0	41 b8 b0 10 00
	00		 mov	 r8d, 4272		; 000010b0H
  000a6	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@zip_longes@3:
  000ab	48 8b 8b 80 00
	00 00		 mov	 rcx, QWORD PTR [rbx+128]
  000b2	48 85 c9	 test	 rcx, rcx
  000b5	74 09		 je	 SHORT $LN5@zip_longes@3
  000b7	48 8b d7	 mov	 rdx, rdi
  000ba	ff d6		 call	 rsi
  000bc	85 c0		 test	 eax, eax
  000be	75 02		 jne	 SHORT $LN19@zip_longes@3
$LN5@zip_longes@3:

; 4273 :     return 0;

  000c0	33 c0		 xor	 eax, eax
$LN19@zip_longes@3:

; 4274 : }

  000c2	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000c7	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000cc	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d0	5f		 pop	 rdi
  000d1	c3		 ret	 0
zip_longest_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$zip_longest_next DD imagerel zip_longest_next
	DD	imagerel zip_longest_next+50
	DD	imagerel $unwind$zip_longest_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$zip_longest_next DD imagerel zip_longest_next+50
	DD	imagerel zip_longest_next+342
	DD	imagerel $chain$4$zip_longest_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$zip_longest_next DD imagerel zip_longest_next+342
	DD	imagerel zip_longest_next+525
	DD	imagerel $chain$6$zip_longest_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$zip_longest_next DD 0a0021H
	DD	06f400H
	DD	07c400H
	DD	0e7400H
	DD	0d6400H
	DD	0c5400H
	DD	imagerel zip_longest_next
	DD	imagerel zip_longest_next+50
	DD	imagerel $unwind$zip_longest_next
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$zip_longest_next DD 0a1921H
	DD	06f419H
	DD	07c414H
	DD	0e740fH
	DD	0d640aH
	DD	0c5405H
	DD	imagerel zip_longest_next
	DD	imagerel zip_longest_next+50
	DD	imagerel $unwind$zip_longest_next
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip_longest_next DD 040a01H
	DD	0e006720aH
	DD	03002d004H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT zip_longest_next
_TEXT	SEGMENT
lz$ = 96
zip_longest_next PROC					; COMDAT

; 4278 : {

  00000	40 53		 push	 rbx
  00002	41 55		 push	 r13
  00004	41 56		 push	 r14
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 4279 :     Py_ssize_t i;
; 4280 :     Py_ssize_t tuplesize = lz->tuplesize;

  0000a	4c 8b 71 60	 mov	 r14, QWORD PTR [rcx+96]

; 4281 :     PyObject *result = lz->result;

  0000e	4c 8b 69 78	 mov	 r13, QWORD PTR [rcx+120]
  00012	48 8b d9	 mov	 rbx, rcx

; 4282 :     PyObject *it;
; 4283 :     PyObject *item;
; 4284 :     PyObject *olditem;
; 4285 : 
; 4286 :     if (tuplesize == 0)

  00015	4d 85 f6	 test	 r14, r14
  00018	75 0c		 jne	 SHORT $LN23@zip_longes@4
$LN44@zip_longes@4:

; 4287 :         return NULL;

  0001a	33 c0		 xor	 eax, eax

; 4346 : }

  0001c	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00020	41 5e		 pop	 r14
  00022	41 5d		 pop	 r13
  00024	5b		 pop	 rbx
  00025	c3		 ret	 0
$LN23@zip_longes@4:

; 4288 :     if (lz->numactive == 0)

  00026	48 83 79 68 00	 cmp	 QWORD PTR [rcx+104], 0

; 4289 :         return NULL;

  0002b	74 ed		 je	 SHORT $LN44@zip_longes@4

; 4290 :     if (Py_REFCNT(result) == 1) {

  0002d	49 83 7d 50 01	 cmp	 QWORD PTR [r13+80], 1
  00032	48 89 6c 24 60	 mov	 QWORD PTR [rsp+96], rbp
  00037	48 89 74 24 68	 mov	 QWORD PTR [rsp+104], rsi
  0003c	48 89 7c 24 70	 mov	 QWORD PTR [rsp+112], rdi
  00041	4c 89 64 24 38	 mov	 QWORD PTR [rsp+56], r12
  00046	4c 89 7c 24 30	 mov	 QWORD PTR [rsp+48], r15
  0004b	0f 85 05 01 00
	00		 jne	 $LN21@zip_longes@4

; 4291 :         Py_INCREF(result);

  00051	49 8b cd	 mov	 rcx, r13
  00054	e8 00 00 00 00	 call	 _Py_IncRef

; 4292 :         for (i=0 ; i < tuplesize ; i++) {

  00059	45 33 ff	 xor	 r15d, r15d
  0005c	45 8b e7	 mov	 r12d, r15d
  0005f	4d 85 f6	 test	 r14, r14
  00062	0f 8e c8 00 00
	00		 jle	 $LN37@zip_longes@4

; 4291 :         Py_INCREF(result);

  00068	bf 70 00 00 00	 mov	 edi, 112		; 00000070H
  0006d	0f 1f 00	 npad	 3
$LL20@zip_longes@4:

; 4293 :             it = PyTuple_GET_ITEM(lz->ittuple, i);

  00070	48 8b 43 70	 mov	 rax, QWORD PTR [rbx+112]
  00074	48 8b 2c 07	 mov	 rbp, QWORD PTR [rdi+rax]

; 4294 :             if (it == NULL) {

  00078	48 85 ed	 test	 rbp, rbp
  0007b	75 4b		 jne	 SHORT $LN17@zip_longes@4

; 4295 :                 Py_INCREF(lz->fillvalue);

  0007d	48 8b b3 80 00
	00 00		 mov	 rsi, QWORD PTR [rbx+128]
  00084	e8 00 00 00 00	 call	 _Py_PXCTX
  00089	85 c0		 test	 eax, eax
  0008b	75 32		 jne	 SHORT $LN27@zip_longes@4
  0008d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00094	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0009b	4c 8b ce	 mov	 r9, rsi
  0009e	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000a4	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000ac	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b1	85 c0		 test	 eax, eax
  000b3	75 06		 jne	 SHORT $LN26@zip_longes@4
  000b5	f6 46 20 20	 test	 BYTE PTR [rsi+32], 32	; 00000020H
  000b9	74 04		 je	 SHORT $LN27@zip_longes@4
$LN26@zip_longes@4:
  000bb	48 ff 46 50	 inc	 QWORD PTR [rsi+80]
$LN27@zip_longes@4:

; 4296 :                 item = lz->fillvalue;

  000bf	48 8b b3 80 00
	00 00		 mov	 rsi, QWORD PTR [rbx+128]

; 4297 :             } else {

  000c6	eb 4b		 jmp	 SHORT $LN12@zip_longes@4
$LN17@zip_longes@4:

; 4298 :                 item = PyIter_Next(it);

  000c8	48 8b cd	 mov	 rcx, rbp
  000cb	e8 00 00 00 00	 call	 PyIter_Next
  000d0	48 8b f0	 mov	 rsi, rax

; 4299 :                 if (item == NULL) {

  000d3	48 85 c0	 test	 rax, rax
  000d6	75 3b		 jne	 SHORT $LN12@zip_longes@4

; 4300 :                     lz->numactive -= 1;

  000d8	48 ff 4b 68	 dec	 QWORD PTR [rbx+104]

; 4301 :                     if (lz->numactive == 0 || PyErr_Occurred()) {

  000dc	0f 84 18 01 00
	00		 je	 $LN33@zip_longes@4
  000e2	e8 00 00 00 00	 call	 PyErr_Occurred
  000e7	48 85 c0	 test	 rax, rax
  000ea	0f 85 0a 01 00
	00		 jne	 $LN33@zip_longes@4

; 4302 :                         lz->numactive = 0;
; 4303 :                         Py_DECREF(result);
; 4304 :                         return NULL;
; 4305 :                     } else {
; 4306 :                         Py_INCREF(lz->fillvalue);

  000f0	48 8b 8b 80 00
	00 00		 mov	 rcx, QWORD PTR [rbx+128]
  000f7	e8 00 00 00 00	 call	 _Py_IncRef

; 4307 :                         item = lz->fillvalue;
; 4308 :                         PyTuple_SET_ITEM(lz->ittuple, i, NULL);

  000fc	48 8b 43 70	 mov	 rax, QWORD PTR [rbx+112]
  00100	48 8b b3 80 00
	00 00		 mov	 rsi, QWORD PTR [rbx+128]

; 4309 :                         Py_DECREF(it);

  00107	48 8b cd	 mov	 rcx, rbp
  0010a	4c 89 3c 07	 mov	 QWORD PTR [rdi+rax], r15
  0010e	e8 00 00 00 00	 call	 _Py_DecRef
$LN12@zip_longes@4:

; 4310 :                     }
; 4311 :                 }
; 4312 :             }
; 4313 :             olditem = PyTuple_GET_ITEM(result, i);

  00113	4a 8b 0c 2f	 mov	 rcx, QWORD PTR [rdi+r13]

; 4314 :             PyTuple_SET_ITEM(result, i, item);

  00117	4a 89 34 2f	 mov	 QWORD PTR [rdi+r13], rsi

; 4315 :             Py_DECREF(olditem);

  0011b	e8 00 00 00 00	 call	 _Py_DecRef
  00120	49 ff c4	 inc	 r12
  00123	48 83 c7 08	 add	 rdi, 8
  00127	4d 3b e6	 cmp	 r12, r14
  0012a	0f 8c 40 ff ff
	ff		 jl	 $LL20@zip_longes@4
$LN37@zip_longes@4:

; 4343 :         }
; 4344 :     }
; 4345 :     return result;

  00130	49 8b c5	 mov	 rax, r13
$LN42@zip_longes@4:
  00133	4c 8b 64 24 38	 mov	 r12, QWORD PTR [rsp+56]
  00138	48 8b 7c 24 70	 mov	 rdi, QWORD PTR [rsp+112]
  0013d	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  00142	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
  00147	4c 8b 7c 24 30	 mov	 r15, QWORD PTR [rsp+48]

; 4346 : }

  0014c	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00150	41 5e		 pop	 r14
  00152	41 5d		 pop	 r13
  00154	5b		 pop	 rbx
  00155	c3		 ret	 0
$LN21@zip_longes@4:

; 4316 :         }
; 4317 :     } else {
; 4318 :         result = PyTuple_New(tuplesize);

  00156	49 8b ce	 mov	 rcx, r14
  00159	e8 00 00 00 00	 call	 PyTuple_New
  0015e	4c 8b e8	 mov	 r13, rax

; 4319 :         if (result == NULL)

  00161	48 85 c0	 test	 rax, rax

; 4320 :             return NULL;

  00164	0f 84 9c 00 00
	00		 je	 $LN43@zip_longes@4

; 4321 :         for (i=0 ; i < tuplesize ; i++) {

  0016a	45 33 ff	 xor	 r15d, r15d
  0016d	45 8b e7	 mov	 r12d, r15d
  00170	4d 85 f6	 test	 r14, r14
  00173	7e bb		 jle	 SHORT $LN37@zip_longes@4
  00175	bf 70 00 00 00	 mov	 edi, 112		; 00000070H
  0017a	66 0f 1f 44 00
	00		 npad	 6
$LL9@zip_longes@4:

; 4322 :             it = PyTuple_GET_ITEM(lz->ittuple, i);

  00180	48 8b 43 70	 mov	 rax, QWORD PTR [rbx+112]
  00184	48 8b 2c 07	 mov	 rbp, QWORD PTR [rdi+rax]

; 4323 :             if (it == NULL) {

  00188	48 85 ed	 test	 rbp, rbp
  0018b	75 15		 jne	 SHORT $LN6@zip_longes@4

; 4324 :                 Py_INCREF(lz->fillvalue);

  0018d	48 8b 8b 80 00
	00 00		 mov	 rcx, QWORD PTR [rbx+128]
  00194	e8 00 00 00 00	 call	 _Py_IncRef

; 4325 :                 item = lz->fillvalue;

  00199	48 8b b3 80 00
	00 00		 mov	 rsi, QWORD PTR [rbx+128]

; 4326 :             } else {

  001a0	eb 43		 jmp	 SHORT $LN1@zip_longes@4
$LN6@zip_longes@4:

; 4327 :                 item = PyIter_Next(it);

  001a2	48 8b cd	 mov	 rcx, rbp
  001a5	e8 00 00 00 00	 call	 PyIter_Next
  001aa	48 8b f0	 mov	 rsi, rax

; 4328 :                 if (item == NULL) {

  001ad	48 85 c0	 test	 rax, rax
  001b0	75 33		 jne	 SHORT $LN1@zip_longes@4

; 4329 :                     lz->numactive -= 1;

  001b2	48 ff 4b 68	 dec	 QWORD PTR [rbx+104]

; 4330 :                     if (lz->numactive == 0 || PyErr_Occurred()) {

  001b6	74 42		 je	 SHORT $LN33@zip_longes@4
  001b8	e8 00 00 00 00	 call	 PyErr_Occurred
  001bd	48 85 c0	 test	 rax, rax
  001c0	75 38		 jne	 SHORT $LN33@zip_longes@4

; 4334 :                     } else {
; 4335 :                         Py_INCREF(lz->fillvalue);

  001c2	48 8b 8b 80 00
	00 00		 mov	 rcx, QWORD PTR [rbx+128]
  001c9	e8 00 00 00 00	 call	 _Py_IncRef

; 4336 :                         item = lz->fillvalue;
; 4337 :                         PyTuple_SET_ITEM(lz->ittuple, i, NULL);

  001ce	48 8b 43 70	 mov	 rax, QWORD PTR [rbx+112]
  001d2	48 8b b3 80 00
	00 00		 mov	 rsi, QWORD PTR [rbx+128]

; 4338 :                         Py_DECREF(it);

  001d9	48 8b cd	 mov	 rcx, rbp
  001dc	4c 89 3c 07	 mov	 QWORD PTR [rdi+rax], r15
  001e0	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@zip_longes@4:

; 4339 :                     }
; 4340 :                 }
; 4341 :             }
; 4342 :             PyTuple_SET_ITEM(result, i, item);

  001e5	49 ff c4	 inc	 r12
  001e8	4a 89 34 2f	 mov	 QWORD PTR [rdi+r13], rsi
  001ec	48 83 c7 08	 add	 rdi, 8
  001f0	4d 3b e6	 cmp	 r12, r14
  001f3	7c 8b		 jl	 SHORT $LL9@zip_longes@4

; 4321 :         for (i=0 ; i < tuplesize ; i++) {

  001f5	e9 36 ff ff ff	 jmp	 $LN37@zip_longes@4
$LN33@zip_longes@4:

; 4331 :                         lz->numactive = 0;
; 4332 :                         Py_DECREF(result);

  001fa	49 8b cd	 mov	 rcx, r13
  001fd	4c 89 7b 68	 mov	 QWORD PTR [rbx+104], r15
  00201	e8 00 00 00 00	 call	 _Py_DecRef
$LN43@zip_longes@4:

; 4333 :                         return NULL;

  00206	33 c0		 xor	 eax, eax
  00208	e9 26 ff ff ff	 jmp	 $LN42@zip_longes@4
zip_longest_next ENDP
_TEXT	ENDS
PUBLIC	??_C@_03BACJJLII@ONO?$AA@			; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$zip_longest_reduce DD imagerel zip_longest_reduce
	DD	imagerel zip_longest_reduce+251
	DD	imagerel $unwind$zip_longest_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip_longest_reduce DD 0a4401H
	DD	0a7444H
	DD	09643dH
	DD	083438H
	DD	0b540bH
	DD	0c007520bH
xdata	ENDS
;	COMDAT ??_C@_03BACJJLII@ONO?$AA@
CONST	SEGMENT
??_C@_03BACJJLII@ONO?$AA@ DB 'ONO', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
CONST	ENDS
;	COMDAT zip_longest_reduce
_TEXT	SEGMENT
lz$ = 64
zip_longest_reduce PROC					; COMDAT

; 4350 : {

  00000	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  00005	41 54		 push	 r12
  00007	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000b	48 8b e9	 mov	 rbp, rcx

; 4351 : 
; 4352 :     /* Create a new tuple with empty sequences where appropriate to pickle.
; 4353 :      * Then use setstate to set the fillvalue
; 4354 :      */
; 4355 :     int i;
; 4356 :     PyObject *args = PyTuple_New(PyTuple_GET_SIZE(lz->ittuple));

  0000e	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00012	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00016	e8 00 00 00 00	 call	 PyTuple_New
  0001b	4c 8b e0	 mov	 r12, rax

; 4357 :     if (args == NULL)

  0001e	48 85 c0	 test	 rax, rax
  00021	75 0c		 jne	 SHORT $LN7@zip_longes@5

; 4372 : }

  00023	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  00028	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0002c	41 5c		 pop	 r12
  0002e	c3		 ret	 0
$LN7@zip_longes@5:

; 4358 :         return NULL;
; 4359 :     for (i=0; i<PyTuple_GET_SIZE(lz->ittuple); i++) {

  0002f	48 8b 4d 70	 mov	 rcx, QWORD PTR [rbp+112]
  00033	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00038	48 89 74 24 48	 mov	 QWORD PTR [rsp+72], rsi
  0003d	33 f6		 xor	 esi, esi
  0003f	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  00044	48 39 71 60	 cmp	 QWORD PTR [rcx+96], rsi
  00048	7e 7c		 jle	 SHORT $LN17@zip_longes@5
  0004a	bf 70 00 00 00	 mov	 edi, 112		; 00000070H
  0004f	90		 npad	 1
$LL6@zip_longes@5:

; 4360 :         PyObject *elem = PyTuple_GET_ITEM(lz->ittuple, i);

  00050	48 8b 1c 0f	 mov	 rbx, QWORD PTR [rdi+rcx]

; 4361 :         if (elem == NULL) {

  00054	48 85 db	 test	 rbx, rbx
  00057	75 1b		 jne	 SHORT $LN3@zip_longes@5

; 4362 :             elem = PyTuple_New(0);

  00059	33 c9		 xor	 ecx, ecx
  0005b	e8 00 00 00 00	 call	 PyTuple_New
  00060	48 8b d8	 mov	 rbx, rax

; 4363 :             if (elem == NULL) {

  00063	48 85 c0	 test	 rax, rax
  00066	75 47		 jne	 SHORT $LN11@zip_longes@5

; 4364 :                 Py_DECREF(args);

  00068	49 8b cc	 mov	 rcx, r12
  0006b	e8 00 00 00 00	 call	 _Py_DecRef

; 4365 :                 return NULL;

  00070	33 c0		 xor	 eax, eax
  00072	eb 6c		 jmp	 SHORT $LN20@zip_longes@5
$LN3@zip_longes@5:

; 4366 :             }
; 4367 :         } else
; 4368 :             Py_INCREF(elem);

  00074	e8 00 00 00 00	 call	 _Py_PXCTX
  00079	85 c0		 test	 eax, eax
  0007b	75 32		 jne	 SHORT $LN11@zip_longes@5
  0007d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00084	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0008b	4c 8b cb	 mov	 r9, rbx
  0008e	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00094	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0009c	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a1	85 c0		 test	 eax, eax
  000a3	75 06		 jne	 SHORT $LN10@zip_longes@5
  000a5	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000a9	74 04		 je	 SHORT $LN11@zip_longes@5
$LN10@zip_longes@5:
  000ab	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN11@zip_longes@5:

; 4369 :         PyTuple_SET_ITEM(args, i, elem);

  000af	4a 89 1c 27	 mov	 QWORD PTR [rdi+r12], rbx
  000b3	48 8b 4d 70	 mov	 rcx, QWORD PTR [rbp+112]
  000b7	ff c6		 inc	 esi
  000b9	48 63 c6	 movsxd	 rax, esi
  000bc	48 83 c7 08	 add	 rdi, 8
  000c0	48 3b 41 60	 cmp	 rax, QWORD PTR [rcx+96]
  000c4	7c 8a		 jl	 SHORT $LL6@zip_longes@5
$LN17@zip_longes@5:

; 4370 :     }
; 4371 :     return Py_BuildValue("ONO", Py_TYPE(lz), args, lz->fillvalue);

  000c6	4c 8b 8d 80 00
	00 00		 mov	 r9, QWORD PTR [rbp+128]
  000cd	48 8b 55 58	 mov	 rdx, QWORD PTR [rbp+88]
  000d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03BACJJLII@ONO?$AA@
  000d8	4d 8b c4	 mov	 r8, r12
  000db	e8 00 00 00 00	 call	 Py_BuildValue
$LN20@zip_longes@5:

; 4372 : }

  000e0	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000e5	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000ea	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]
  000ef	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  000f4	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000f8	41 5c		 pop	 r12
  000fa	c3		 ret	 0
zip_longest_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@MLMOEEIK@zip_longest_setstate?$AA@	; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$zip_longest_setstate DD imagerel zip_longest_setstate
	DD	imagerel zip_longest_setstate+13
	DD	imagerel $unwind$zip_longest_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$zip_longest_setstate DD imagerel zip_longest_setstate+13
	DD	imagerel zip_longest_setstate+215
	DD	imagerel $chain$1$zip_longest_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$zip_longest_setstate DD imagerel zip_longest_setstate+215
	DD	imagerel zip_longest_setstate+279
	DD	imagerel $chain$2$zip_longest_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$zip_longest_setstate DD imagerel zip_longest_setstate+279
	DD	imagerel zip_longest_setstate+364
	DD	imagerel $chain$3$zip_longest_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$zip_longest_setstate DD 021H
	DD	imagerel zip_longest_setstate
	DD	imagerel zip_longest_setstate+13
	DD	imagerel $unwind$zip_longest_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$zip_longest_setstate DD 020021H
	DD	097400H
	DD	imagerel zip_longest_setstate
	DD	imagerel zip_longest_setstate+13
	DD	imagerel $unwind$zip_longest_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$zip_longest_setstate DD 040a21H
	DD	09740aH
	DD	086405H
	DD	imagerel zip_longest_setstate
	DD	imagerel zip_longest_setstate+13
	DD	imagerel $unwind$zip_longest_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip_longest_setstate DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0BF@MLMOEEIK@zip_longest_setstate?$AA@
CONST	SEGMENT
??_C@_0BF@MLMOEEIK@zip_longest_setstate?$AA@ DB 'zip_longest_setstate', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
CONST	ENDS
;	COMDAT zip_longest_setstate
_TEXT	SEGMENT
lz$ = 64
state$ = 72
zip_longest_setstate PROC				; COMDAT

; 4376 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 4377 :     Py_CLEAR(lz->fillvalue);

  00006	4c 8b 89 80 00
	00 00		 mov	 r9, QWORD PTR [rcx+128]
  0000d	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  00012	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  00017	48 8b fa	 mov	 rdi, rdx
  0001a	48 8b f1	 mov	 rsi, rcx
  0001d	4d 85 c9	 test	 r9, r9
  00020	0f 84 9c 00 00
	00		 je	 $LN3@zip_longes@6
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@PMILGFFG@?4?4?2Modules?2itertoolsmodule?4c?$AA@
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@MLMOEEIK@zip_longest_setstate?$AA@
  00034	41 b8 19 11 00
	00		 mov	 r8d, 4377		; 00001119H
  0003a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00042	e8 00 00 00 00	 call	 _PyParallel_Guard
  00047	85 c0		 test	 eax, eax
  00049	75 77		 jne	 SHORT $LN3@zip_longes@6
  0004b	48 8b 9e 80 00
	00 00		 mov	 rbx, QWORD PTR [rsi+128]
  00052	48 c7 86 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rsi+128], 0
  0005d	e8 00 00 00 00	 call	 _Py_PXCTX
  00062	85 c0		 test	 eax, eax
  00064	75 5c		 jne	 SHORT $LN3@zip_longes@6
  00066	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0006a	a8 20		 test	 al, 32			; 00000020H
  0006c	75 4c		 jne	 SHORT $LN11@zip_longes@6
  0006e	84 c0		 test	 al, al
  00070	78 48		 js	 SHORT $LN11@zip_longes@6
  00072	a8 02		 test	 al, 2
  00074	75 4c		 jne	 SHORT $LN3@zip_longes@6
  00076	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0007a	75 46		 jne	 SHORT $LN3@zip_longes@6
  0007c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00083	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0008a	4c 8b cb	 mov	 r9, rbx
  0008d	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00093	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0009b	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a0	48 8b cb	 mov	 rcx, rbx
  000a3	85 c0		 test	 eax, eax
  000a5	74 07		 je	 SHORT $LN16@zip_longes@6
  000a7	e8 00 00 00 00	 call	 _Px_Dealloc
  000ac	eb 14		 jmp	 SHORT $LN3@zip_longes@6
$LN16@zip_longes@6:
  000ae	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000b2	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000b8	eb 08		 jmp	 SHORT $LN3@zip_longes@6
$LN11@zip_longes@6:
  000ba	48 8b cb	 mov	 rcx, rbx
  000bd	e8 00 00 00 00	 call	 Px_DecRef
$LN3@zip_longes@6:

; 4378 :     lz->fillvalue = state;

  000c2	48 89 be 80 00
	00 00		 mov	 QWORD PTR [rsi+128], rdi

; 4379 :     Py_INCREF(lz->fillvalue);

  000c9	e8 00 00 00 00	 call	 _Py_PXCTX
  000ce	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000d3	85 c0		 test	 eax, eax
  000d5	75 32		 jne	 SHORT $LN19@zip_longes@6
  000d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000e5	4c 8b cf	 mov	 r9, rdi
  000e8	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000ee	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000f6	e8 00 00 00 00	 call	 _PyParallel_Guard
  000fb	85 c0		 test	 eax, eax
  000fd	75 06		 jne	 SHORT $LN18@zip_longes@6
  000ff	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  00103	74 04		 je	 SHORT $LN19@zip_longes@6
$LN18@zip_longes@6:
  00105	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN19@zip_longes@6:

; 4380 :     Py_RETURN_NONE;

  00109	e8 00 00 00 00	 call	 _Py_PXCTX
  0010e	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00113	85 c0		 test	 eax, eax
  00115	75 48		 jne	 SHORT $LN26@zip_longes@6
  00117	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0011e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00125	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0012c	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00132	4c 8b cb	 mov	 r9, rbx
  00135	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0013d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00142	85 c0		 test	 eax, eax
  00144	75 09		 jne	 SHORT $LN22@zip_longes@6
  00146	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0014d	74 07		 je	 SHORT $LN28@zip_longes@6
$LN22@zip_longes@6:
  0014f	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN28@zip_longes@6:
  00156	48 8b c3	 mov	 rax, rbx

; 4381 : }

  00159	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0015d	5b		 pop	 rbx
  0015e	c3		 ret	 0
$LN26@zip_longes@6:

; 4380 :     Py_RETURN_NONE;

  0015f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 4381 : }

  00166	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0016a	5b		 pop	 rbx
  0016b	c3		 ret	 0
zip_longest_setstate ENDP
_TEXT	ENDS
PUBLIC	PyInit_itertools
EXTRN	PyModule_AddObject:PROC
EXTRN	__imp_strchr:PROC
EXTRN	PyType_Ready:PROC
EXTRN	PyModule_Create2:PROC
EXTRN	PyType_Type:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyInit_itertools DD imagerel $LN17
	DD	imagerel $LN17+295
	DD	imagerel $unwind$PyInit_itertools
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyInit_itertools DD imagerel $LN17+295
	DD	imagerel $LN17+436
	DD	imagerel $chain$0$PyInit_itertools
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyInit_itertools DD imagerel $LN17+436
	DD	imagerel $LN17+457
	DD	imagerel $chain$1$PyInit_itertools
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyInit_itertools DD 021H
	DD	imagerel $LN17
	DD	imagerel $LN17+295
	DD	imagerel $unwind$PyInit_itertools
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyInit_itertools DD 020821H
	DD	01e6408H
	DD	imagerel $LN17
	DD	imagerel $LN17+295
	DD	imagerel $unwind$PyInit_itertools
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit_itertools DD 071301H
	DD	0205413H
	DD	01f3413H
	DD	01c0113H
	DD	0700cH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT PyInit_itertools
_TEXT	SEGMENT
typelist$ = 48
PyInit_itertools PROC					; COMDAT

; 4499 : {

$LN17:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	49 89 5b 10	 mov	 QWORD PTR [r11+16], rbx
  00007	49 89 6b 18	 mov	 QWORD PTR [r11+24], rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e0 00
	00 00		 sub	 rsp, 224		; 000000e0H

; 4500 :     int i;
; 4501 :     PyObject *m;
; 4502 :     char *name;
; 4503 :     PyTypeObject *typelist[] = {
; 4504 :         &accumulate_type,
; 4505 :         &combinations_type,

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:combinations_type
  0001a	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:accumulate_type

; 4506 :         &cwr_type,
; 4507 :         &cycle_type,
; 4508 :         &dropwhile_type,
; 4509 :         &takewhile_type,
; 4510 :         &islice_type,
; 4511 :         &starmap_type,
; 4512 :         &chain_type,
; 4513 :         &compress_type,
; 4514 :         &filterfalse_type,
; 4515 :         &count_type,
; 4516 :         &ziplongest_type,
; 4517 :         &permutations_type,
; 4518 :         &product_type,
; 4519 :         &repeat_type,
; 4520 :         &groupby_type,
; 4521 :         &_grouper_type,
; 4522 :         &tee_type,
; 4523 :         &teedataobject_type,
; 4524 :         NULL
; 4525 :     };
; 4526 : 
; 4527 :     Py_TYPE(&teedataobject_type) = &PyType_Type;
; 4528 :     m = PyModule_Create(&itertoolsmodule);

  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:itertoolsmodule
  00028	48 89 44 24 38	 mov	 QWORD PTR typelist$[rsp+8], rax
  0002d	48 89 5c 24 30	 mov	 QWORD PTR typelist$[rsp], rbx
  00032	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:cwr_type
  00039	48 89 44 24 40	 mov	 QWORD PTR typelist$[rsp+16], rax
  0003e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:cycle_type
  00045	33 ff		 xor	 edi, edi
  00047	48 89 44 24 48	 mov	 QWORD PTR typelist$[rsp+24], rax
  0004c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:dropwhile_type
  00053	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00058	48 89 44 24 50	 mov	 QWORD PTR typelist$[rsp+32], rax
  0005d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:takewhile_type
  00064	48 89 44 24 58	 mov	 QWORD PTR typelist$[rsp+40], rax
  00069	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:islice_type
  00070	48 89 44 24 60	 mov	 QWORD PTR typelist$[rsp+48], rax
  00075	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:starmap_type
  0007c	49 89 7b e8	 mov	 QWORD PTR [r11-24], rdi
  00080	49 89 43 80	 mov	 QWORD PTR [r11-128], rax
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:chain_type
  0008b	49 89 43 88	 mov	 QWORD PTR [r11-120], rax
  0008f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:compress_type
  00096	49 89 43 90	 mov	 QWORD PTR [r11-112], rax
  0009a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:filterfalse_type
  000a1	49 89 43 98	 mov	 QWORD PTR [r11-104], rax
  000a5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:count_type
  000ac	49 89 43 a0	 mov	 QWORD PTR [r11-96], rax
  000b0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:ziplongest_type
  000b7	49 89 43 a8	 mov	 QWORD PTR [r11-88], rax
  000bb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:permutations_type
  000c2	49 89 43 b0	 mov	 QWORD PTR [r11-80], rax
  000c6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:product_type
  000cd	49 89 43 b8	 mov	 QWORD PTR [r11-72], rax
  000d1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:repeat_type
  000d8	49 89 43 c0	 mov	 QWORD PTR [r11-64], rax
  000dc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:groupby_type
  000e3	49 89 43 c8	 mov	 QWORD PTR [r11-56], rax
  000e7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_grouper_type
  000ee	49 89 43 d0	 mov	 QWORD PTR [r11-48], rax
  000f2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:tee_type
  000f9	49 89 43 d8	 mov	 QWORD PTR [r11-40], rax
  000fd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:teedataobject_type
  00104	49 89 43 e0	 mov	 QWORD PTR [r11-32], rax
  00108	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyType_Type
  0010f	48 89 05 58 00
	00 00		 mov	 QWORD PTR teedataobject_type+88, rax
  00116	e8 00 00 00 00	 call	 PyModule_Create2
  0011b	48 8b e8	 mov	 rbp, rax

; 4529 :     if (m == NULL)

  0011e	48 85 c0	 test	 rax, rax
  00121	0f 84 8d 00 00
	00		 je	 $LN6@PyInit_ite
$LN15@PyInit_ite:
  00127	48 89 b4 24 f0
	00 00 00	 mov	 QWORD PTR [rsp+240], rsi
  0012f	90		 npad	 1
$LL5@PyInit_ite:

; 4530 :         return NULL;
; 4531 : 
; 4532 :     for (i=0 ; typelist[i] != NULL ; i++) {
; 4533 :         if (PyType_Ready(typelist[i]) < 0)

  00130	48 8b cb	 mov	 rcx, rbx
  00133	e8 00 00 00 00	 call	 PyType_Ready
  00138	85 c0		 test	 eax, eax
  0013a	78 6e		 js	 SHORT $LN13@PyInit_ite

; 4535 :         name = strchr(typelist[i]->tp_name, '.');

  0013c	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00140	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  00145	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  0014b	48 8b f0	 mov	 rsi, rax

; 4536 :         assert (name != NULL);
; 4537 :         Py_INCREF(typelist[i]);

  0014e	e8 00 00 00 00	 call	 _Py_PXCTX
  00153	85 c0		 test	 eax, eax
  00155	75 32		 jne	 SHORT $LN9@PyInit_ite
  00157	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0015e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00165	4c 8b cb	 mov	 r9, rbx
  00168	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0016e	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00176	e8 00 00 00 00	 call	 _PyParallel_Guard
  0017b	85 c0		 test	 eax, eax
  0017d	75 06		 jne	 SHORT $LN8@PyInit_ite
  0017f	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00183	74 04		 je	 SHORT $LN9@PyInit_ite
$LN8@PyInit_ite:
  00185	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN9@PyInit_ite:

; 4538 :         PyModule_AddObject(m, name+1, (PyObject *)typelist[i]);

  00189	48 8d 56 01	 lea	 rdx, QWORD PTR [rsi+1]
  0018d	4c 8b c3	 mov	 r8, rbx
  00190	48 8b cd	 mov	 rcx, rbp
  00193	e8 00 00 00 00	 call	 PyModule_AddObject
  00198	48 8b 5c fc 38	 mov	 rbx, QWORD PTR typelist$[rsp+rdi*8+8]
  0019d	48 ff c7	 inc	 rdi
  001a0	48 85 db	 test	 rbx, rbx
  001a3	75 8b		 jne	 SHORT $LL5@PyInit_ite

; 4539 :     }
; 4540 : 
; 4541 :     return m;

  001a5	48 8b c5	 mov	 rax, rbp
  001a8	eb 02		 jmp	 SHORT $LN16@PyInit_ite
$LN13@PyInit_ite:

; 4534 :             return NULL;

  001aa	33 c0		 xor	 eax, eax
$LN16@PyInit_ite:
  001ac	48 8b b4 24 f0
	00 00 00	 mov	 rsi, QWORD PTR [rsp+240]
$LN6@PyInit_ite:

; 4542 : }

  001b4	4c 8d 9c 24 e0
	00 00 00	 lea	 r11, QWORD PTR [rsp+224]
  001bc	49 8b 5b 18	 mov	 rbx, QWORD PTR [r11+24]
  001c0	49 8b 6b 20	 mov	 rbp, QWORD PTR [r11+32]
  001c4	49 8b e3	 mov	 rsp, r11
  001c7	5f		 pop	 rdi
  001c8	c3		 ret	 0
PyInit_itertools ENDP
_TEXT	ENDS
EXTRN	PyTuple_Pack:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$groupby_next DD imagerel groupby_next
	DD	imagerel groupby_next+639
	DD	imagerel $unwind$groupby_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$groupby_next DD 0a1d01H
	DD	0a741dH
	DD	095415H
	DD	083410H
	DD	0b640bH
	DD	0c007520bH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\itertoolsmodule.c
xdata	ENDS
;	COMDAT groupby_next
_TEXT	SEGMENT
gbo$ = 64
groupby_next PROC					; COMDAT

; 78   : {

  00000	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  00005	41 54		 push	 r12
  00007	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000b	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00010	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp
  00015	48 8b f1	 mov	 rsi, rcx
  00018	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  0001d	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:_Py_NoneStruct
$LL26@groupby_ne@2:

; 79   :     PyObject *newvalue, *newkey, *r, *grouper, *tmp;
; 80   : 
; 81   :     /* skip to next iteration group */
; 82   :     for (;;) {
; 83   :         if (gbo->currkey == NULL)

  00024	48 8b 56 78	 mov	 rdx, QWORD PTR [rsi+120]
  00028	48 85 d2	 test	 rdx, rdx
  0002b	74 29		 je	 SHORT $LN18@groupby_ne@2

; 84   :             /* pass */;
; 85   :         else if (gbo->tgtkey == NULL)

  0002d	48 8b 4e 70	 mov	 rcx, QWORD PTR [rsi+112]
  00031	48 85 c9	 test	 rcx, rcx
  00034	0f 84 96 01 00
	00		 je	 $LN63@groupby_ne@2

; 86   :             break;
; 87   :         else {
; 88   :             int rcmp;
; 89   : 
; 90   :             rcmp = PyObject_RichCompareBool(gbo->tgtkey,
; 91   :                                             gbo->currkey, Py_EQ);

  0003a	41 b8 02 00 00
	00		 mov	 r8d, 2
  00040	e8 00 00 00 00	 call	 PyObject_RichCompareBool

; 92   :             if (rcmp == -1)

  00045	83 f8 ff	 cmp	 eax, -1
  00048	0f 84 14 02 00
	00		 je	 $LN64@groupby_ne@2

; 93   :                 return NULL;
; 94   :             else if (rcmp == 0)

  0004e	85 c0		 test	 eax, eax
  00050	0f 84 7a 01 00
	00		 je	 $LN63@groupby_ne@2
$LN18@groupby_ne@2:

; 95   :                 break;
; 96   :         }
; 97   : 
; 98   :         newvalue = PyIter_Next(gbo->it);

  00056	48 8b 4e 60	 mov	 rcx, QWORD PTR [rsi+96]
  0005a	e8 00 00 00 00	 call	 PyIter_Next
  0005f	48 8b f8	 mov	 rdi, rax

; 99   :         if (newvalue == NULL)

  00062	48 85 c0	 test	 rax, rax
  00065	0f 84 f7 01 00
	00		 je	 $LN64@groupby_ne@2

; 101  : 
; 102  :         if (gbo->keyfunc == Py_None) {

  0006b	48 8b 4e 68	 mov	 rcx, QWORD PTR [rsi+104]
  0006f	49 3b cc	 cmp	 rcx, r12
  00072	75 40		 jne	 SHORT $LN16@groupby_ne@2

; 103  :             newkey = newvalue;

  00074	48 8b e8	 mov	 rbp, rax

; 104  :             Py_INCREF(newvalue);

  00077	e8 00 00 00 00	 call	 _Py_PXCTX
  0007c	85 c0		 test	 eax, eax
  0007e	75 4b		 jne	 SHORT $LN14@groupby_ne@2
  00080	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00087	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0008e	4c 8b cd	 mov	 r9, rbp
  00091	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00097	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0009f	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a4	85 c0		 test	 eax, eax
  000a6	75 06		 jne	 SHORT $LN29@groupby_ne@2
  000a8	f6 45 20 20	 test	 BYTE PTR [rbp+32], 32	; 00000020H
  000ac	74 1d		 je	 SHORT $LN14@groupby_ne@2
$LN29@groupby_ne@2:
  000ae	48 ff 47 50	 inc	 QWORD PTR [rdi+80]

; 105  :         } else {

  000b2	eb 17		 jmp	 SHORT $LN14@groupby_ne@2
$LN16@groupby_ne@2:

; 106  :             newkey = PyObject_CallFunctionObjArgs(gbo->keyfunc,
; 107  :                                                   newvalue, NULL);

  000b4	45 33 c0	 xor	 r8d, r8d
  000b7	48 8b d0	 mov	 rdx, rax
  000ba	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  000bf	48 8b e8	 mov	 rbp, rax

; 108  :             if (newkey == NULL) {

  000c2	48 85 c0	 test	 rax, rax
  000c5	0f 84 8f 01 00
	00		 je	 $LN65@groupby_ne@2
$LN14@groupby_ne@2:

; 110  :                 return NULL;
; 111  :             }
; 112  :         }
; 113  : 
; 114  :         tmp = gbo->currkey;

  000cb	48 8b 5e 78	 mov	 rbx, QWORD PTR [rsi+120]

; 115  :         gbo->currkey = newkey;

  000cf	48 89 6e 78	 mov	 QWORD PTR [rsi+120], rbp

; 116  :         Py_XDECREF(tmp);

  000d3	48 85 db	 test	 rbx, rbx
  000d6	74 65		 je	 SHORT $LN12@groupby_ne@2
  000d8	e8 00 00 00 00	 call	 _Py_PXCTX
  000dd	85 c0		 test	 eax, eax
  000df	75 5c		 jne	 SHORT $LN12@groupby_ne@2
  000e1	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000e5	a8 20		 test	 al, 32			; 00000020H
  000e7	75 4c		 jne	 SHORT $LN37@groupby_ne@2
  000e9	84 c0		 test	 al, al
  000eb	78 48		 js	 SHORT $LN37@groupby_ne@2
  000ed	a8 02		 test	 al, 2
  000ef	75 4c		 jne	 SHORT $LN12@groupby_ne@2
  000f1	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000f5	75 46		 jne	 SHORT $LN12@groupby_ne@2
  000f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00105	4c 8b cb	 mov	 r9, rbx
  00108	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0010e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00116	e8 00 00 00 00	 call	 _PyParallel_Guard
  0011b	48 8b cb	 mov	 rcx, rbx
  0011e	85 c0		 test	 eax, eax
  00120	74 07		 je	 SHORT $LN42@groupby_ne@2
  00122	e8 00 00 00 00	 call	 _Px_Dealloc
  00127	eb 14		 jmp	 SHORT $LN12@groupby_ne@2
$LN42@groupby_ne@2:
  00129	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0012d	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00133	eb 08		 jmp	 SHORT $LN12@groupby_ne@2
$LN37@groupby_ne@2:
  00135	48 8b cb	 mov	 rcx, rbx
  00138	e8 00 00 00 00	 call	 Px_DecRef
$LN12@groupby_ne@2:

; 117  : 
; 118  :         tmp = gbo->currvalue;

  0013d	48 8b 9e 80 00
	00 00		 mov	 rbx, QWORD PTR [rsi+128]

; 119  :         gbo->currvalue = newvalue;

  00144	48 89 be 80 00
	00 00		 mov	 QWORD PTR [rsi+128], rdi

; 120  :         Py_XDECREF(tmp);

  0014b	48 85 db	 test	 rbx, rbx
  0014e	0f 84 d0 fe ff
	ff		 je	 $LL26@groupby_ne@2
  00154	e8 00 00 00 00	 call	 _Py_PXCTX
  00159	85 c0		 test	 eax, eax
  0015b	0f 85 c3 fe ff
	ff		 jne	 $LL26@groupby_ne@2
  00161	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00165	a8 20		 test	 al, 32			; 00000020H
  00167	75 5a		 jne	 SHORT $LN48@groupby_ne@2
  00169	84 c0		 test	 al, al
  0016b	78 56		 js	 SHORT $LN48@groupby_ne@2
  0016d	a8 02		 test	 al, 2
  0016f	0f 85 af fe ff
	ff		 jne	 $LL26@groupby_ne@2
  00175	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00179	0f 85 a5 fe ff
	ff		 jne	 $LL26@groupby_ne@2
  0017f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00186	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0018d	4c 8b cb	 mov	 r9, rbx
  00190	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00196	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0019e	e8 00 00 00 00	 call	 _PyParallel_Guard
  001a3	48 8b cb	 mov	 rcx, rbx
  001a6	85 c0		 test	 eax, eax
  001a8	74 0a		 je	 SHORT $LN53@groupby_ne@2
  001aa	e8 00 00 00 00	 call	 _Px_Dealloc
  001af	e9 70 fe ff ff	 jmp	 $LL26@groupby_ne@2
$LN53@groupby_ne@2:
  001b4	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001b8	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001be	e9 61 fe ff ff	 jmp	 $LL26@groupby_ne@2
$LN48@groupby_ne@2:
  001c3	48 8b cb	 mov	 rcx, rbx
  001c6	e8 00 00 00 00	 call	 Px_DecRef

; 121  :     }

  001cb	e9 54 fe ff ff	 jmp	 $LL26@groupby_ne@2
$LN63@groupby_ne@2:

; 122  : 
; 123  :     Py_INCREF(gbo->currkey);

  001d0	48 8b 5e 78	 mov	 rbx, QWORD PTR [rsi+120]
  001d4	e8 00 00 00 00	 call	 _Py_PXCTX
  001d9	85 c0		 test	 eax, eax
  001db	75 32		 jne	 SHORT $LN56@groupby_ne@2
  001dd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  001eb	4c 8b cb	 mov	 r9, rbx
  001ee	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  001f4	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  001fc	e8 00 00 00 00	 call	 _PyParallel_Guard
  00201	85 c0		 test	 eax, eax
  00203	75 06		 jne	 SHORT $LN55@groupby_ne@2
  00205	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00209	74 04		 je	 SHORT $LN56@groupby_ne@2
$LN55@groupby_ne@2:
  0020b	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN56@groupby_ne@2:

; 124  :     tmp = gbo->tgtkey;

  0020f	48 8b 4e 70	 mov	 rcx, QWORD PTR [rsi+112]

; 125  :     gbo->tgtkey = gbo->currkey;

  00213	48 8b 46 78	 mov	 rax, QWORD PTR [rsi+120]
  00217	48 89 46 70	 mov	 QWORD PTR [rsi+112], rax

; 126  :     Py_XDECREF(tmp);

  0021b	48 85 c9	 test	 rcx, rcx
  0021e	74 05		 je	 SHORT $LN4@groupby_ne@2
  00220	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@groupby_ne@2:

; 127  : 
; 128  :     grouper = _grouper_create(gbo, gbo->tgtkey);

  00225	48 8b 56 70	 mov	 rdx, QWORD PTR [rsi+112]
  00229	48 8b ce	 mov	 rcx, rsi
  0022c	e8 00 00 00 00	 call	 _grouper_create
  00231	48 8b f8	 mov	 rdi, rax

; 129  :     if (grouper == NULL)

  00234	48 85 c0	 test	 rax, rax

; 130  :         return NULL;

  00237	74 29		 je	 SHORT $LN64@groupby_ne@2

; 131  : 
; 132  :     r = PyTuple_Pack(2, gbo->currkey, grouper);

  00239	48 8b 56 78	 mov	 rdx, QWORD PTR [rsi+120]
  0023d	4c 8b c0	 mov	 r8, rax
  00240	b9 02 00 00 00	 mov	 ecx, 2
  00245	e8 00 00 00 00	 call	 PyTuple_Pack

; 133  :     Py_DECREF(grouper);

  0024a	48 8b cf	 mov	 rcx, rdi
  0024d	48 8b d8	 mov	 rbx, rax
  00250	e8 00 00 00 00	 call	 _Py_DecRef

; 134  :     return r;

  00255	48 8b c3	 mov	 rax, rbx
  00258	eb 0a		 jmp	 SHORT $LN27@groupby_ne@2
$LN65@groupby_ne@2:

; 109  :                 Py_DECREF(newvalue);

  0025a	48 8b cf	 mov	 rcx, rdi
  0025d	e8 00 00 00 00	 call	 _Py_DecRef
$LN64@groupby_ne@2:

; 100  :             return NULL;

  00262	33 c0		 xor	 eax, eax
$LN27@groupby_ne@2:
  00264	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]
  00269	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  0026e	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 135  : }

  00273	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  00278	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0027c	41 5c		 pop	 r12
  0027e	c3		 ret	 0
groupby_next ENDP
_TEXT	ENDS
PUBLIC	??_C@_03FDKCBHJF@O?$CBO?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$_grouper_new DD imagerel _grouper_new
	DD	imagerel _grouper_new+75
	DD	imagerel $unwind$_grouper_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_grouper_new DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_03FDKCBHJF@O?$CBO?$AA@
CONST	SEGMENT
??_C@_03FDKCBHJF@O?$CBO?$AA@ DB 'O!O', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _grouper_new
_TEXT	SEGMENT
parent$ = 48
type$ = 80
args$ = 88
kwds$ = 96
tgtkey$ = 104
_grouper_new PROC					; COMDAT

; 245  : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00004	48 8b c2	 mov	 rax, rdx

; 246  :     PyObject *parent, *tgtkey;
; 247  : 
; 248  :     if (!PyArg_ParseTuple(args, "O!O", &groupby_type, &parent, &tgtkey))

  00007	48 8d 4c 24 68	 lea	 rcx, QWORD PTR tgtkey$[rsp]
  0000c	4c 8d 4c 24 30	 lea	 r9, QWORD PTR parent$[rsp]
  00011	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00016	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:groupby_type
  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03FDKCBHJF@O?$CBO?$AA@
  00024	48 8b c8	 mov	 rcx, rax
  00027	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0002c	85 c0		 test	 eax, eax
  0002e	75 07		 jne	 SHORT $LN1@grouper_ne@2

; 249  :         return NULL;

  00030	33 c0		 xor	 eax, eax

; 252  : }

  00032	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00036	c3		 ret	 0
$LN1@grouper_ne@2:

; 250  : 
; 251  :     return _grouper_create((groupbyobject*) parent, tgtkey);

  00037	48 8b 54 24 68	 mov	 rdx, QWORD PTR tgtkey$[rsp]
  0003c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR parent$[rsp]
  00041	e8 00 00 00 00	 call	 _grouper_create

; 252  : }

  00046	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0004a	c3		 ret	 0
_grouper_new ENDP
_TEXT	ENDS
END
