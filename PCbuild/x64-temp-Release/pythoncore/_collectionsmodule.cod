; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0N@DAMHJIHH@_collections?$AA@		; `string'
PUBLIC	??_C@_0BA@JNDEBPOJ@_count_elements?$AA@		; `string'
PUBLIC	??_C@_0M@EONDAJAB@__setitem__?$AA@		; `string'
PUBLIC	??_C@_03HNAFFKGA@get?$AA@			; `string'
PUBLIC	??_C@_0BI@LNOCHOC@collections?4defaultdict?$AA@	; `string'
PUBLIC	??_C@_0DD@GLEDBJHK@Factory?5for?5default?5value?5called@ ; `string'
PUBLIC	??_C@_0BA@OPCDFMJK@default_factory?$AA@		; `string'
PUBLIC	??_C@_04COAGEIMF@copy?$AA@			; `string'
PUBLIC	??_C@_0M@PPMOEBOH@__missing__?$AA@		; `string'
PUBLIC	??_C@_05CFHBDDLG@items?$AA@			; `string'
PUBLIC	??_C@_0CF@OBJEPFGD@_collections?4_deque_reverse_iter@ ; `string'
PUBLIC	??_C@_0BN@EFKBDOAN@_collections?4_deque_iterator?$AA@ ; `string'
PUBLIC	??_C@_0BA@BJLPBKGK@__length_hint__?$AA@		; `string'
PUBLIC	??_C@_0BC@FMGACAFJ@collections?4deque?$AA@	; `string'
PUBLIC	??_C@_0L@HOGGIPGN@__sizeof__?$AA@		; `string'
PUBLIC	??_C@_06CEHMNFAL@rotate?$AA@			; `string'
PUBLIC	??_C@_07KOIEOCCE@reverse?$AA@			; `string'
PUBLIC	??_C@_0N@FDLIKANA@__reversed__?$AA@		; `string'
PUBLIC	??_C@_06LEMKAMD@remove?$AA@			; `string'
PUBLIC	??_C@_0L@NNMACJIG@__reduce__?$AA@		; `string'
PUBLIC	??_C@_07BHGCBGNG@popleft?$AA@			; `string'
PUBLIC	??_C@_03NJDAHFJE@pop?$AA@			; `string'
PUBLIC	??_C@_0L@HKPOGBOK@extendleft?$AA@		; `string'
PUBLIC	??_C@_06BPBOMFNI@extend?$AA@			; `string'
PUBLIC	??_C@_05IOMEMJEC@count?$AA@			; `string'
PUBLIC	??_C@_08MOMBEIKE@__copy__?$AA@			; `string'
PUBLIC	??_C@_05MEHLAELG@clear?$AA@			; `string'
PUBLIC	??_C@_0L@IEBMADJA@appendleft?$AA@		; `string'
PUBLIC	??_C@_06PCICMFGG@append?$AA@			; `string'
PUBLIC	??_C@_0CN@PPKFDFDA@maximum?5size?5of?5a?5deque?5or?5None?5@ ; `string'
PUBLIC	??_C@_06EGGKHNAM@maxlen?$AA@			; `string'
PUBLIC	??_C@_08IBFKALI@__dict__?$AA@			; `string'
EXTRN	PyObject_SelfIter:PROC
EXTRN	PyObject_GC_Del:PROC
EXTRN	PyType_GenericAlloc:PROC
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyObject_HashNotImplemented:PROC
_BSS	SEGMENT
numfreeblocks DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0N@DAMHJIHH@_collections?$AA@
CONST	SEGMENT
??_C@_0N@DAMHJIHH@_collections?$AA@ DB '_collections', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JNDEBPOJ@_count_elements?$AA@
CONST	SEGMENT
??_C@_0BA@JNDEBPOJ@_count_elements?$AA@ DB '_count_elements', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EONDAJAB@__setitem__?$AA@
CONST	SEGMENT
??_C@_0M@EONDAJAB@__setitem__?$AA@ DB '__setitem__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03HNAFFKGA@get?$AA@
CONST	SEGMENT
??_C@_03HNAFFKGA@get?$AA@ DB 'get', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LNOCHOC@collections?4defaultdict?$AA@
CONST	SEGMENT
??_C@_0BI@LNOCHOC@collections?4defaultdict?$AA@ DB 'collections.defaultdi'
	DB	'ct', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@GLEDBJHK@Factory?5for?5default?5value?5called@
CONST	SEGMENT
??_C@_0DD@GLEDBJHK@Factory?5for?5default?5value?5called@ DB 'Factory for '
	DB	'default value called by __missing__().', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OPCDFMJK@default_factory?$AA@
CONST	SEGMENT
??_C@_0BA@OPCDFMJK@default_factory?$AA@ DB 'default_factory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04COAGEIMF@copy?$AA@
CONST	SEGMENT
??_C@_04COAGEIMF@copy?$AA@ DB 'copy', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PPMOEBOH@__missing__?$AA@
CONST	SEGMENT
??_C@_0M@PPMOEBOH@__missing__?$AA@ DB '__missing__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05CFHBDDLG@items?$AA@
CONST	SEGMENT
??_C@_05CFHBDDLG@items?$AA@ DB 'items', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@OBJEPFGD@_collections?4_deque_reverse_iter@
CONST	SEGMENT
??_C@_0CF@OBJEPFGD@_collections?4_deque_reverse_iter@ DB '_collections._d'
	DB	'eque_reverse_iterator', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@EFKBDOAN@_collections?4_deque_iterator?$AA@
CONST	SEGMENT
??_C@_0BN@EFKBDOAN@_collections?4_deque_iterator?$AA@ DB '_collections._d'
	DB	'eque_iterator', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BJLPBKGK@__length_hint__?$AA@
CONST	SEGMENT
??_C@_0BA@BJLPBKGK@__length_hint__?$AA@ DB '__length_hint__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FMGACAFJ@collections?4deque?$AA@
CONST	SEGMENT
??_C@_0BC@FMGACAFJ@collections?4deque?$AA@ DB 'collections.deque', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HOGGIPGN@__sizeof__?$AA@
CONST	SEGMENT
??_C@_0L@HOGGIPGN@__sizeof__?$AA@ DB '__sizeof__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06CEHMNFAL@rotate?$AA@
CONST	SEGMENT
??_C@_06CEHMNFAL@rotate?$AA@ DB 'rotate', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KOIEOCCE@reverse?$AA@
CONST	SEGMENT
??_C@_07KOIEOCCE@reverse?$AA@ DB 'reverse', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FDLIKANA@__reversed__?$AA@
CONST	SEGMENT
??_C@_0N@FDLIKANA@__reversed__?$AA@ DB '__reversed__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06LEMKAMD@remove?$AA@
CONST	SEGMENT
??_C@_06LEMKAMD@remove?$AA@ DB 'remove', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNMACJIG@__reduce__?$AA@
CONST	SEGMENT
??_C@_0L@NNMACJIG@__reduce__?$AA@ DB '__reduce__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BHGCBGNG@popleft?$AA@
CONST	SEGMENT
??_C@_07BHGCBGNG@popleft?$AA@ DB 'popleft', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NJDAHFJE@pop?$AA@
CONST	SEGMENT
??_C@_03NJDAHFJE@pop?$AA@ DB 'pop', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HKPOGBOK@extendleft?$AA@
CONST	SEGMENT
??_C@_0L@HKPOGBOK@extendleft?$AA@ DB 'extendleft', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06BPBOMFNI@extend?$AA@
CONST	SEGMENT
??_C@_06BPBOMFNI@extend?$AA@ DB 'extend', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IOMEMJEC@count?$AA@
CONST	SEGMENT
??_C@_05IOMEMJEC@count?$AA@ DB 'count', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MOMBEIKE@__copy__?$AA@
CONST	SEGMENT
??_C@_08MOMBEIKE@__copy__?$AA@ DB '__copy__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MEHLAELG@clear?$AA@
CONST	SEGMENT
??_C@_05MEHLAELG@clear?$AA@ DB 'clear', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IEBMADJA@appendleft?$AA@
CONST	SEGMENT
??_C@_0L@IEBMADJA@appendleft?$AA@ DB 'appendleft', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06PCICMFGG@append?$AA@
CONST	SEGMENT
??_C@_06PCICMFGG@append?$AA@ DB 'append', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@PPKFDFDA@maximum?5size?5of?5a?5deque?5or?5None?5@
CONST	SEGMENT
??_C@_0CN@PPKFDFDA@maximum?5size?5of?5a?5deque?5or?5None?5@ DB 'maximum s'
	DB	'ize of a deque or None if unbounded', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06EGGKHNAM@maxlen?$AA@
CONST	SEGMENT
??_C@_06EGGKHNAM@maxlen?$AA@ DB 'maxlen', 00H		; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId___setitem__@?1??_count_elements@@9@9 DQ 0000000000000000H ; `_count_elements'::`2'::PyId___setitem__
	DQ	FLAT:??_C@_0M@EONDAJAB@__setitem__?$AA@
	DQ	0000000000000000H
?PyId_get@?1??_count_elements@@9@9 DQ 0000000000000000H	; `_count_elements'::`2'::PyId_get
	DQ	FLAT:??_C@_03HNAFFKGA@get?$AA@
	DQ	0000000000000000H
?PyId_items@?1??defdict_reduce@@9@9 DQ 0000000000000000H ; `defdict_reduce'::`2'::PyId_items
	DQ	FLAT:??_C@_05CFHBDDLG@items?$AA@
	DQ	0000000000000000H
?PyId___dict__@?1??deque_reduce@@9@9 DQ 0000000000000000H ; `deque_reduce'::`2'::PyId___dict__
	DQ	FLAT:??_C@_08IBFKALI@__dict__?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_08IBFKALI@__dict__?$AA@
CONST	SEGMENT
??_C@_08IBFKALI@__dict__?$AA@ DB '__dict__', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
pop_doc	DB	'Remove and return the rightmost element.', 00H
	ORG $+7
popleft_doc DB	'Remove and return the leftmost element.', 00H
append_doc DB	'Add an element to the right side of the deque.', 00H
	ORG $+1
appendleft_doc DB 'Add an element to the left side of the deque.', 00H
	ORG $+10
extend_doc DB	'Extend the right side of the deque with elements from th'
	DB	'e iterable', 00H
	ORG $+13
extendleft_doc DB 'Extend the left side of the deque with elements from t'
	DB	'he iterable', 00H
	ORG $+14
rotate_doc DB	'Rotate the deque n steps to the right (default n=1).  If'
	DB	' n is negative, rotates left.', 00H
	ORG $+2
reverse_doc DB	'D.reverse() -- reverse *IN PLACE*', 00H
	ORG $+6
count_doc DB	'D.count(value) -> integer -- return number of occurrence'
	DB	's of value', 00H
	ORG $+5
remove_doc DB	'D.remove(value) -- remove first occurrence of value.', 00H
	ORG $+3
clear_doc DB	'Remove all elements from the deque.', 00H
	ORG $+4
copy_doc DB	'Return a shallow copy of a deque.', 00H
	ORG $+6
reduce_doc DB	'Return state information for pickling.', 00H
	ORG $+1
sizeof_doc DB	'D.__sizeof__() -- size of D in memory, in bytes', 00H
	ORG $+8
deque_getset DQ	FLAT:??_C@_06EGGKHNAM@maxlen?$AA@
	DQ	FLAT:deque_get_maxlen
	DQ	0000000000000000H
	DQ	FLAT:??_C@_0CN@PPKFDFDA@maximum?5size?5of?5a?5deque?5or?5None?5@
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
deque_as_sequence DQ FLAT:deque_len
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:deque_item
	DQ	0000000000000000H
	DQ	FLAT:deque_ass_item
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:deque_inplace_concat
	DQ	0000000000000000H
reversed_doc DB	'D.__reversed__() -- return a reverse iterator over the d'
	DB	'eque', 00H
	ORG $+3
deque_methods DQ FLAT:??_C@_06PCICMFGG@append?$AA@
	DQ	FLAT:deque_append
	DD	08H
	ORG $+4
	DQ	FLAT:append_doc
	DQ	FLAT:??_C@_0L@IEBMADJA@appendleft?$AA@
	DQ	FLAT:deque_appendleft
	DD	08H
	ORG $+4
	DQ	FLAT:appendleft_doc
	DQ	FLAT:??_C@_05MEHLAELG@clear?$AA@
	DQ	FLAT:deque_clearmethod
	DD	04H
	ORG $+4
	DQ	FLAT:clear_doc
	DQ	FLAT:??_C@_08MOMBEIKE@__copy__?$AA@
	DQ	FLAT:deque_copy
	DD	04H
	ORG $+4
	DQ	FLAT:copy_doc
	DQ	FLAT:??_C@_05IOMEMJEC@count?$AA@
	DQ	FLAT:deque_count
	DD	08H
	ORG $+4
	DQ	FLAT:count_doc
	DQ	FLAT:??_C@_06BPBOMFNI@extend?$AA@
	DQ	FLAT:deque_extend
	DD	08H
	ORG $+4
	DQ	FLAT:extend_doc
	DQ	FLAT:??_C@_0L@HKPOGBOK@extendleft?$AA@
	DQ	FLAT:deque_extendleft
	DD	08H
	ORG $+4
	DQ	FLAT:extendleft_doc
	DQ	FLAT:??_C@_03NJDAHFJE@pop?$AA@
	DQ	FLAT:deque_pop
	DD	04H
	ORG $+4
	DQ	FLAT:pop_doc
	DQ	FLAT:??_C@_07BHGCBGNG@popleft?$AA@
	DQ	FLAT:deque_popleft
	DD	04H
	ORG $+4
	DQ	FLAT:popleft_doc
	DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:deque_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	FLAT:??_C@_06LEMKAMD@remove?$AA@
	DQ	FLAT:deque_remove
	DD	08H
	ORG $+4
	DQ	FLAT:remove_doc
	DQ	FLAT:??_C@_0N@FDLIKANA@__reversed__?$AA@
	DQ	FLAT:deque_reviter
	DD	04H
	ORG $+4
	DQ	FLAT:reversed_doc
	DQ	FLAT:??_C@_07KOIEOCCE@reverse?$AA@
	DQ	FLAT:deque_reverse
	DD	04H
	ORG $+4
	DQ	FLAT:reverse_doc
	DQ	FLAT:??_C@_06CEHMNFAL@rotate?$AA@
	DQ	FLAT:deque_rotate
	DD	01H
	ORG $+4
	DQ	FLAT:rotate_doc
	DQ	FLAT:??_C@_0L@HOGGIPGN@__sizeof__?$AA@
	DQ	FLAT:deque_sizeof
	DD	04H
	ORG $+4
	DQ	FLAT:sizeof_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
deque_doc DB	'deque([iterable[, maxlen]]) --> deque object', 0aH, 0aH, 'B'
	DB	'uild an ordered collection with optimized access from its end'
	DB	'points.', 00H
	ORG $+12
deque_type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BC@FMGACAFJ@collections?4deque?$AA@
	DQ	00000000000000a0H
	DQ	0000000000000000H
	DQ	FLAT:deque_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:deque_repr
	DQ	0000000000000000H
	DQ	FLAT:deque_as_sequence
	DQ	0000000000000000H
	DQ	FLAT:PyObject_HashNotImplemented
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:deque_doc
	DQ	FLAT:deque_traverse
	DQ	FLAT:deque_clear
	DQ	FLAT:deque_richcompare
	DQ	0000000000000098H
	DQ	FLAT:deque_iter
	DQ	0000000000000000H
	DQ	FLAT:deque_methods
	DQ	0000000000000000H
	DQ	FLAT:deque_getset
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:deque_init
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:deque_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
length_hint_doc DB 'Private method returning an estimate of len(list(it))'
	DB	'.', 00H
	ORG $+9
dequeiter_methods DQ FLAT:??_C@_0BA@BJLPBKGK@__length_hint__?$AA@
	DQ	FLAT:dequeiter_len
	DD	04H
	ORG $+4
	DQ	FLAT:length_hint_doc
	DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:dequeiter_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
dequeiter_type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BN@EFKBDOAN@_collections?4_deque_iterator?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:dequeiter_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:dequeiter_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:dequeiter_next
	DQ	FLAT:dequeiter_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:dequeiter_new
	DQ	0000000000000000H
	ORG $+64
dequereviter_type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0CF@OBJEPFGD@_collections?4_deque_reverse_iter@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:dequeiter_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:dequeiter_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:dequereviter_next
	DQ	FLAT:dequeiter_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:dequereviter_new
	DQ	0000000000000000H
	ORG $+64
defdict_missing_doc DB '__missing__(key) # Called by __getitem__ for miss'
	DB	'ing key; pseudo-code:', 0aH, '  if self.default_factory is No'
	DB	'ne: raise KeyError((key,))', 0aH, '  self[key] = value = self'
	DB	'.default_factory()', 0aH, '  return value', 0aH, 00H
	ORG $+2
defdict_copy_doc DB 'D.copy() -> a shallow copy of D.', 00H
	ORG $+15
defdict_methods DQ FLAT:??_C@_0M@PPMOEBOH@__missing__?$AA@
	DQ	FLAT:defdict_missing
	DD	08H
	ORG $+4
	DQ	FLAT:defdict_missing_doc
	DQ	FLAT:??_C@_04COAGEIMF@copy?$AA@
	DQ	FLAT:defdict_copy
	DD	04H
	ORG $+4
	DQ	FLAT:defdict_copy_doc
	DQ	FLAT:??_C@_08MOMBEIKE@__copy__?$AA@
	DQ	FLAT:defdict_copy
	DD	04H
	ORG $+4
	DQ	FLAT:defdict_copy_doc
	DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:defdict_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	0000000000000000H
	ORG $+24
defdict_members DQ FLAT:??_C@_0BA@OPCDFMJK@default_factory?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000080H
	DD	00H
	ORG $+4
	DQ	FLAT:??_C@_0DD@GLEDBJHK@Factory?5for?5default?5value?5called@
	DQ	0000000000000000H
	ORG $+32
defdict_doc DB	'defaultdict(default_factory[, ...]) --> dict with defaul'
	DB	't factory', 0aH, 0aH, 'The default factory is called without '
	DB	'arguments to produce', 0aH, 'a new value when a key is not pr'
	DB	'esent, in __getitem__ only.', 0aH, 'A defaultdict compares eq'
	DB	'ual to a dict with the same items.', 0aH, 'All remaining argu'
	DB	'ments are treated the same as if they were', 0aH, 'passed to '
	DB	'the dict constructor, including keyword arguments.', 0aH, 00H
	ORG $+15
defdict_type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BI@LNOCHOC@collections?4defaultdict?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:defdict_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:defdict_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:defdict_doc
	DQ	FLAT:defdict_traverse
	DQ	FLAT:defdict_tp_clear
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:defdict_methods
	DQ	FLAT:defdict_members
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:defdict_init
	DQ	FLAT:PyType_GenericAlloc
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
_count_elements_doc DB '_count_elements(mapping, iterable) -> None', 0aH, 0aH
	DB	'Count elements in the iterable, updating the mappping', 00H
	ORG $+14
module_doc DB	'High performance data structures.', 0aH, '- deque:      '
	DB	'  ordered collection accessible from endpoints only', 0aH, '-'
	DB	' defaultdict:  dict subclass with a default value factory', 0aH
	DB	00H
module_functions DQ FLAT:??_C@_0BA@JNDEBPOJ@_count_elements?$AA@
	DQ	FLAT:_count_elements
	DD	01H
	ORG $+4
	DQ	FLAT:_count_elements_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
_collectionsmodule DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0N@DAMHJIHH@_collections?$AA@
	DQ	FLAT:module_doc
	DQ	ffffffffffffffffH
	DQ	FLAT:module_functions
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@NAMPNEJD@cannot?5add?5more?5blocks?5to?5the?5de@ ; `string'
EXTRN	PyErr_NoMemory:PROC
EXTRN	PyMem_Malloc:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_OverflowError:QWORD
_BSS	SEGMENT
freeblocks DQ	0aH DUP (?)
_BSS	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\modules\_collectionsmodule.c
pdata	SEGMENT
$pdata$newblock DD imagerel newblock
	DD	imagerel newblock+147
	DD	imagerel $unwind$newblock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$newblock DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CE@NAMPNEJD@cannot?5add?5more?5blocks?5to?5the?5de@
CONST	SEGMENT
??_C@_0CE@NAMPNEJD@cannot?5add?5more?5blocks?5to?5the?5de@ DB 'cannot add'
	DB	' more blocks to the deque', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT newblock
_TEXT	SEGMENT
leftlink$ = 48
rightlink$ = 56
len$ = 64
newblock PROC						; COMDAT

; 59   : newblock(block *leftlink, block *rightlink, Py_ssize_t len) {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 60   :     block *b;
; 61   :     /* To prevent len from overflowing PY_SSIZE_T_MAX on 64-bit machines, we
; 62   :      * refuse to allocate new blocks if the current len is dangerously
; 63   :      * close.  There is some extra margin to prevent spurious arithmetic
; 64   :      * overflows at various places.  The following check ensures that
; 65   :      * the blocks allocated to the deque, in the worst case, can only
; 66   :      * have PY_SSIZE_T_MAX-2 entries in total.
; 67   :      */
; 68   :     if (len >= PY_SSIZE_T_MAX - 2*BLOCKLEN) {

  0000a	48 b8 83 ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775683 ; 7fffffffffffff83H
  00014	48 8b da	 mov	 rbx, rdx
  00017	48 8b f9	 mov	 rdi, rcx
  0001a	4c 3b c0	 cmp	 r8, rax
  0001d	7c 20		 jl	 SHORT $LN4@newblock

; 69   :         PyErr_SetString(PyExc_OverflowError,
; 70   :                         "cannot add more blocks to the deque");

  0001f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@NAMPNEJD@cannot?5add?5more?5blocks?5to?5the?5de@
  0002d	e8 00 00 00 00	 call	 PyErr_SetString

; 71   :         return NULL;

  00032	33 c0		 xor	 eax, eax

; 85   :     return b;
; 86   : }

  00034	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00039	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003d	5f		 pop	 rdi
  0003e	c3		 ret	 0
$LN4@newblock:

; 72   :     }
; 73   :     if (numfreeblocks) {

  0003f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR numfreeblocks
  00046	48 85 c0	 test	 rax, rax
  00049	74 27		 je	 SHORT $LN3@newblock

; 74   :         numfreeblocks -= 1;

  0004b	48 ff c8	 dec	 rax

; 75   :         b = freeblocks[numfreeblocks];

  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:freeblocks
  00055	48 89 05 00 00
	00 00		 mov	 QWORD PTR numfreeblocks, rax
  0005c	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
$LN1@newblock:

; 80   :             return NULL;
; 81   :         }
; 82   :     }
; 83   :     b->leftlink = leftlink;

  00060	48 89 38	 mov	 QWORD PTR [rax], rdi

; 84   :     b->rightlink = rightlink;

  00063	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx

; 85   :     return b;
; 86   : }

  00067	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0006c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00070	5f		 pop	 rdi
  00071	c3		 ret	 0
$LN3@newblock:

; 76   :     } else {
; 77   :         b = PyMem_Malloc(sizeof(block));

  00072	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  00077	e8 00 00 00 00	 call	 PyMem_Malloc

; 78   :         if (b == NULL) {

  0007c	48 85 c0	 test	 rax, rax
  0007f	75 df		 jne	 SHORT $LN1@newblock

; 79   :             PyErr_NoMemory();

  00081	e8 00 00 00 00	 call	 PyErr_NoMemory

; 85   :     return b;
; 86   : }

  00086	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008b	33 c0		 xor	 eax, eax
  0008d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00091	5f		 pop	 rdi
  00092	c3		 ret	 0
newblock ENDP
_TEXT	ENDS
EXTRN	PyMem_Free:PROC
; Function compile flags: /Ogtpy
;	COMDAT freeblock
_TEXT	SEGMENT
b$ = 8
freeblock PROC						; COMDAT

; 91   :     if (numfreeblocks < MAXFREEBLOCKS) {

  00000	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR numfreeblocks
  00007	48 83 f8 0a	 cmp	 rax, 10
  0000b	7d 17		 jge	 SHORT $LN2@freeblock

; 92   :         freeblocks[numfreeblocks] = b;

  0000d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:freeblocks

; 93   :         numfreeblocks++;

  00014	48 ff c0	 inc	 rax
  00017	48 89 4c c2 f8	 mov	 QWORD PTR [rdx+rax*8-8], rcx
  0001c	48 89 05 00 00
	00 00		 mov	 QWORD PTR numfreeblocks, rax

; 94   :     } else {
; 95   :         PyMem_Free(b);
; 96   :     }
; 97   : }

  00023	c3		 ret	 0
$LN2@freeblock:
  00024	e9 00 00 00 00	 jmp	 PyMem_Free
freeblock ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_new DD imagerel deque_new
	DD	imagerel deque_new+124
	DD	imagerel $unwind$deque_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_new DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT deque_new
_TEXT	SEGMENT
type$ = 48
args$ = 56
kwds$ = 64
deque_new PROC						; COMDAT

; 131  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b c1	 mov	 rax, rcx

; 132  :     dequeobject *deque;
; 133  :     block *b;
; 134  : 
; 135  :     /* create dequeobject structure */
; 136  :     deque = (dequeobject *)type->tp_alloc(type, 0);

  00009	33 d2		 xor	 edx, edx
  0000b	ff 90 88 01 00
	00		 call	 QWORD PTR [rax+392]
  00011	48 8b d8	 mov	 rbx, rax

; 137  :     if (deque == NULL)

  00014	48 85 c0	 test	 rax, rax

; 138  :         return NULL;

  00017	74 19		 je	 SHORT $LN5@deque_new

; 139  : 
; 140  :     b = newblock(NULL, NULL, 0);

  00019	45 33 c0	 xor	 r8d, r8d
  0001c	33 d2		 xor	 edx, edx
  0001e	33 c9		 xor	 ecx, ecx
  00020	e8 00 00 00 00	 call	 newblock

; 141  :     if (b == NULL) {

  00025	48 85 c0	 test	 rax, rax
  00028	75 10		 jne	 SHORT $LN1@deque_new

; 142  :         Py_DECREF(deque);

  0002a	48 8b cb	 mov	 rcx, rbx
  0002d	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@deque_new:

; 143  :         return NULL;

  00032	33 c0		 xor	 eax, eax

; 157  : }

  00034	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00038	5b		 pop	 rbx
  00039	c3		 ret	 0
$LN1@deque_new:

; 144  :     }
; 145  : 
; 146  :     assert(BLOCKLEN >= 2);
; 147  :     deque->leftblock = b;

  0003a	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax

; 148  :     deque->rightblock = b;

  0003e	48 89 43 68	 mov	 QWORD PTR [rbx+104], rax

; 149  :     deque->leftindex = CENTER + 1;
; 150  :     deque->rightindex = CENTER;
; 151  :     deque->len = 0;

  00042	33 c0		 xor	 eax, eax
  00044	48 89 83 80 00
	00 00		 mov	 QWORD PTR [rbx+128], rax

; 152  :     deque->state = 0;

  0004b	89 83 90 00 00
	00		 mov	 DWORD PTR [rbx+144], eax

; 153  :     deque->weakreflist = NULL;

  00051	48 89 83 98 00
	00 00		 mov	 QWORD PTR [rbx+152], rax

; 154  :     deque->maxlen = -1;
; 155  : 
; 156  :     return (PyObject *)deque;

  00058	48 8b c3	 mov	 rax, rbx
  0005b	48 c7 43 70 1f
	00 00 00	 mov	 QWORD PTR [rbx+112], 31
  00063	48 c7 43 78 1e
	00 00 00	 mov	 QWORD PTR [rbx+120], 30
  0006b	48 c7 83 88 00
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rbx+136], -1

; 157  : }

  00076	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007a	5b		 pop	 rbx
  0007b	c3		 ret	 0
deque_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@GOHPFLAB@pop?5from?5an?5empty?5deque?$AA@ ; `string'
EXTRN	PyExc_IndexError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_pop DD imagerel deque_pop
	DD	imagerel deque_pop+56
	DD	imagerel $unwind$deque_pop
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$deque_pop DD imagerel deque_pop+56
	DD	imagerel deque_pop+130
	DD	imagerel $chain$0$deque_pop
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$deque_pop DD imagerel deque_pop+130
	DD	imagerel deque_pop+133
	DD	imagerel $chain$2$deque_pop
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$deque_pop DD imagerel deque_pop+133
	DD	imagerel deque_pop+171
	DD	imagerel $chain$3$deque_pop
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$deque_pop DD imagerel deque_pop+171
	DD	imagerel deque_pop+185
	DD	imagerel $chain$4$deque_pop
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$deque_pop DD 021H
	DD	imagerel deque_pop+130
	DD	imagerel deque_pop+133
	DD	imagerel $chain$2$deque_pop
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$deque_pop DD 020521H
	DD	063405H
	DD	imagerel deque_pop+130
	DD	imagerel deque_pop+133
	DD	imagerel $chain$2$deque_pop
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$deque_pop DD 020021H
	DD	076400H
	DD	imagerel deque_pop
	DD	imagerel deque_pop+56
	DD	imagerel $unwind$deque_pop
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$deque_pop DD 020521H
	DD	076405H
	DD	imagerel deque_pop
	DD	imagerel deque_pop+56
	DD	imagerel $unwind$deque_pop
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_pop DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT ??_C@_0BI@GOHPFLAB@pop?5from?5an?5empty?5deque?$AA@
CONST	SEGMENT
??_C@_0BI@GOHPFLAB@pop?5from?5an?5empty?5deque?$AA@ DB 'pop from an empty'
	DB	' deque', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT deque_pop
_TEXT	SEGMENT
deque$ = 48
unused$ = 56
deque_pop PROC						; COMDAT

; 161  : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b f9	 mov	 rdi, rcx

; 162  :     PyObject *item;
; 163  :     block *prevblock;
; 164  : 
; 165  :     if (deque->len == 0) {

  00009	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  00010	48 85 c9	 test	 rcx, rcx
  00013	75 1b		 jne	 SHORT $LN4@deque_pop

; 166  :         PyErr_SetString(PyExc_IndexError, "pop from an empty deque");

  00015	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@GOHPFLAB@pop?5from?5an?5empty?5deque?$AA@
  00023	e8 00 00 00 00	 call	 PyErr_SetString

; 167  :         return NULL;

  00028	33 c0		 xor	 eax, eax

; 191  : }

  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5f		 pop	 rdi
  0002f	c3		 ret	 0
$LN4@deque_pop:

; 168  :     }
; 169  :     item = deque->rightblock->data[deque->rightindex];

  00030	48 8b 47 78	 mov	 rax, QWORD PTR [rdi+120]
  00034	48 8b 57 68	 mov	 rdx, QWORD PTR [rdi+104]
  00038	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  0003d	48 8b 74 c2 10	 mov	 rsi, QWORD PTR [rdx+rax*8+16]

; 170  :     deque->rightindex--;
; 171  :     deque->len--;
; 172  :     deque->state++;

  00042	ff 87 90 00 00
	00		 inc	 DWORD PTR [rdi+144]
  00048	48 ff c8	 dec	 rax
  0004b	48 ff c9	 dec	 rcx
  0004e	48 89 47 78	 mov	 QWORD PTR [rdi+120], rax
  00052	48 89 8f 80 00
	00 00		 mov	 QWORD PTR [rdi+128], rcx

; 173  : 
; 174  :     if (deque->rightindex == -1) {

  00059	48 83 f8 ff	 cmp	 rax, -1
  0005d	75 4c		 jne	 SHORT $LN1@deque_pop

; 175  :         if (deque->len == 0) {

  0005f	48 85 c9	 test	 rcx, rcx
  00062	75 1e		 jne	 SHORT $LN2@deque_pop

; 188  :         }
; 189  :     }
; 190  :     return item;

  00064	48 8b c6	 mov	 rax, rsi
  00067	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0006c	48 c7 47 70 1f
	00 00 00	 mov	 QWORD PTR [rdi+112], 31
  00074	48 c7 47 78 1e
	00 00 00	 mov	 QWORD PTR [rdi+120], 30

; 191  : }

  0007c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00080	5f		 pop	 rdi
  00081	c3		 ret	 0
$LN2@deque_pop:

; 176  :             assert(deque->leftblock == deque->rightblock);
; 177  :             assert(deque->leftindex == deque->rightindex+1);
; 178  :             /* re-center instead of freeing a block */
; 179  :             deque->leftindex = CENTER + 1;
; 180  :             deque->rightindex = CENTER;
; 181  :         } else {
; 182  :             prevblock = deque->rightblock->leftlink;
; 183  :             assert(deque->leftblock != deque->rightblock);
; 184  :             freeblock(deque->rightblock);

  00082	48 8b ca	 mov	 rcx, rdx
  00085	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0008a	48 8b 1a	 mov	 rbx, QWORD PTR [rdx]
  0008d	e8 00 00 00 00	 call	 freeblock

; 185  :             prevblock->rightlink = NULL;

  00092	48 c7 43 08 00
	00 00 00	 mov	 QWORD PTR [rbx+8], 0

; 186  :             deque->rightblock = prevblock;

  0009a	48 89 5f 68	 mov	 QWORD PTR [rdi+104], rbx
  0009e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 187  :             deque->rightindex = BLOCKLEN - 1;

  000a3	48 c7 47 78 3d
	00 00 00	 mov	 QWORD PTR [rdi+120], 61	; 0000003dH
$LN1@deque_pop:

; 188  :         }
; 189  :     }
; 190  :     return item;

  000ab	48 8b c6	 mov	 rax, rsi
  000ae	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]

; 191  : }

  000b3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b7	5f		 pop	 rdi
  000b8	c3		 ret	 0
deque_pop ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_popleft DD imagerel deque_popleft
	DD	imagerel deque_popleft+56
	DD	imagerel $unwind$deque_popleft
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$deque_popleft DD imagerel deque_popleft+56
	DD	imagerel deque_popleft+130
	DD	imagerel $chain$0$deque_popleft
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$deque_popleft DD imagerel deque_popleft+130
	DD	imagerel deque_popleft+133
	DD	imagerel $chain$2$deque_popleft
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$deque_popleft DD imagerel deque_popleft+133
	DD	imagerel deque_popleft+166
	DD	imagerel $chain$3$deque_popleft
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$deque_popleft DD imagerel deque_popleft+166
	DD	imagerel deque_popleft+180
	DD	imagerel $chain$4$deque_popleft
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$deque_popleft DD 021H
	DD	imagerel deque_popleft+130
	DD	imagerel deque_popleft+133
	DD	imagerel $chain$2$deque_popleft
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$deque_popleft DD 020521H
	DD	063405H
	DD	imagerel deque_popleft+130
	DD	imagerel deque_popleft+133
	DD	imagerel $chain$2$deque_popleft
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$deque_popleft DD 020021H
	DD	076400H
	DD	imagerel deque_popleft
	DD	imagerel deque_popleft+56
	DD	imagerel $unwind$deque_popleft
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$deque_popleft DD 020521H
	DD	076405H
	DD	imagerel deque_popleft
	DD	imagerel deque_popleft+56
	DD	imagerel $unwind$deque_popleft
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_popleft DD 020601H
	DD	070023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT deque_popleft
_TEXT	SEGMENT
deque$ = 48
unused$ = 56
deque_popleft PROC					; COMDAT

; 197  : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b f9	 mov	 rdi, rcx

; 198  :     PyObject *item;
; 199  :     block *prevblock;
; 200  : 
; 201  :     if (deque->len == 0) {

  00009	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  00010	48 85 c9	 test	 rcx, rcx
  00013	75 1b		 jne	 SHORT $LN4@deque_popl

; 202  :         PyErr_SetString(PyExc_IndexError, "pop from an empty deque");

  00015	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@GOHPFLAB@pop?5from?5an?5empty?5deque?$AA@
  00023	e8 00 00 00 00	 call	 PyErr_SetString

; 203  :         return NULL;

  00028	33 c0		 xor	 eax, eax

; 229  : }

  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5f		 pop	 rdi
  0002f	c3		 ret	 0
$LN4@deque_popl:

; 204  :     }
; 205  :     assert(deque->leftblock != NULL);
; 206  :     item = deque->leftblock->data[deque->leftindex];

  00030	48 8b 47 70	 mov	 rax, QWORD PTR [rdi+112]
  00034	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  00038	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  0003d	48 8b 74 c2 10	 mov	 rsi, QWORD PTR [rdx+rax*8+16]

; 207  :     deque->leftindex++;
; 208  :     deque->len--;
; 209  :     deque->state++;

  00042	ff 87 90 00 00
	00		 inc	 DWORD PTR [rdi+144]
  00048	48 ff c0	 inc	 rax
  0004b	48 ff c9	 dec	 rcx
  0004e	48 89 47 70	 mov	 QWORD PTR [rdi+112], rax
  00052	48 89 8f 80 00
	00 00		 mov	 QWORD PTR [rdi+128], rcx

; 210  : 
; 211  :     if (deque->leftindex == BLOCKLEN) {

  00059	48 83 f8 3e	 cmp	 rax, 62			; 0000003eH
  0005d	75 47		 jne	 SHORT $LN1@deque_popl

; 212  :         if (deque->len == 0) {

  0005f	48 85 c9	 test	 rcx, rcx
  00062	75 1e		 jne	 SHORT $LN2@deque_popl

; 226  :         }
; 227  :     }
; 228  :     return item;

  00064	48 8b c6	 mov	 rax, rsi
  00067	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0006c	48 c7 47 70 1f
	00 00 00	 mov	 QWORD PTR [rdi+112], 31
  00074	48 c7 47 78 1e
	00 00 00	 mov	 QWORD PTR [rdi+120], 30

; 229  : }

  0007c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00080	5f		 pop	 rdi
  00081	c3		 ret	 0
$LN2@deque_popl:

; 213  :             assert(deque->leftblock == deque->rightblock);
; 214  :             assert(deque->leftindex == deque->rightindex+1);
; 215  :             /* re-center instead of freeing a block */
; 216  :             deque->leftindex = CENTER + 1;
; 217  :             deque->rightindex = CENTER;
; 218  :         } else {
; 219  :             assert(deque->leftblock != deque->rightblock);
; 220  :             prevblock = deque->leftblock->rightlink;
; 221  :             freeblock(deque->leftblock);

  00082	48 8b ca	 mov	 rcx, rdx
  00085	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0008a	48 8b 5a 08	 mov	 rbx, QWORD PTR [rdx+8]
  0008e	e8 00 00 00 00	 call	 freeblock

; 222  :             assert(prevblock != NULL);
; 223  :             prevblock->leftlink = NULL;

  00093	45 33 db	 xor	 r11d, r11d
  00096	4c 89 1b	 mov	 QWORD PTR [rbx], r11

; 224  :             deque->leftblock = prevblock;

  00099	48 89 5f 60	 mov	 QWORD PTR [rdi+96], rbx
  0009d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 225  :             deque->leftindex = 0;

  000a2	4c 89 5f 70	 mov	 QWORD PTR [rdi+112], r11
$LN1@deque_popl:

; 226  :         }
; 227  :     }
; 228  :     return item;

  000a6	48 8b c6	 mov	 rax, rsi
  000a9	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]

; 229  : }

  000ae	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b2	5f		 pop	 rdi
  000b3	c3		 ret	 0
deque_popleft ENDP
_TEXT	ENDS
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$deque_append DD imagerel deque_append
	DD	imagerel deque_append+296
	DD	imagerel $unwind$deque_append
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_append DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_collectionsmodule.c
xdata	ENDS
;	COMDAT deque_append
_TEXT	SEGMENT
deque$ = 64
item$ = 72
deque_append PROC					; COMDAT

; 235  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 236  :     deque->state++;

  0000a	ff 81 90 00 00
	00		 inc	 DWORD PTR [rcx+144]

; 237  :     if (deque->rightindex == BLOCKLEN-1) {

  00010	48 83 79 78 3d	 cmp	 QWORD PTR [rcx+120], 61	; 0000003dH
  00015	48 8b fa	 mov	 rdi, rdx
  00018	48 8b d9	 mov	 rbx, rcx
  0001b	75 39		 jne	 SHORT $LN3@deque_appe

; 238  :         block *b = newblock(deque->rightblock, NULL, deque->len);

  0001d	4c 8b 81 80 00
	00 00		 mov	 r8, QWORD PTR [rcx+128]
  00024	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00028	33 d2		 xor	 edx, edx
  0002a	e8 00 00 00 00	 call	 newblock
  0002f	4c 8b d8	 mov	 r11, rax

; 239  :         if (b == NULL)

  00032	48 85 c0	 test	 rax, rax
  00035	75 0b		 jne	 SHORT $LN2@deque_appe

; 252  : }

  00037	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0003c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00040	5f		 pop	 rdi
  00041	c3		 ret	 0
$LN2@deque_appe:

; 240  :             return NULL;
; 241  :         assert(deque->rightblock->rightlink == NULL);
; 242  :         deque->rightblock->rightlink = b;

  00042	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  00046	4c 89 58 08	 mov	 QWORD PTR [rax+8], r11

; 243  :         deque->rightblock = b;

  0004a	4c 89 5b 68	 mov	 QWORD PTR [rbx+104], r11

; 244  :         deque->rightindex = -1;

  0004e	48 c7 43 78 ff
	ff ff ff	 mov	 QWORD PTR [rbx+120], -1
$LN3@deque_appe:

; 245  :     }
; 246  :     Py_INCREF(item);

  00056	e8 00 00 00 00	 call	 _Py_PXCTX
  0005b	85 c0		 test	 eax, eax
  0005d	75 32		 jne	 SHORT $LN7@deque_appe
  0005f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00066	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0006d	4c 8b cf	 mov	 r9, rdi
  00070	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00076	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0007e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00083	85 c0		 test	 eax, eax
  00085	75 06		 jne	 SHORT $LN6@deque_appe
  00087	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  0008b	74 04		 je	 SHORT $LN7@deque_appe
$LN6@deque_appe:
  0008d	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN7@deque_appe:

; 247  :     deque->len++;
; 248  :     deque->rightindex++;

  00091	48 ff 43 78	 inc	 QWORD PTR [rbx+120]

; 249  :     deque->rightblock->data[deque->rightindex] = item;

  00095	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  00099	48 ff 83 80 00
	00 00		 inc	 QWORD PTR [rbx+128]
  000a0	48 8b 4b 78	 mov	 rcx, QWORD PTR [rbx+120]
  000a4	48 89 7c c8 10	 mov	 QWORD PTR [rax+rcx*8+16], rdi

; 250  :     TRIM(deque, deque_popleft);

  000a9	48 8b 83 88 00
	00 00		 mov	 rax, QWORD PTR [rbx+136]
  000b0	48 83 f8 ff	 cmp	 rax, -1
  000b4	74 1b		 je	 SHORT $LN1@deque_appe
  000b6	48 39 83 80 00
	00 00		 cmp	 QWORD PTR [rbx+128], rax
  000bd	7e 12		 jle	 SHORT $LN1@deque_appe
  000bf	33 d2		 xor	 edx, edx
  000c1	48 8b cb	 mov	 rcx, rbx
  000c4	e8 00 00 00 00	 call	 deque_popleft
  000c9	48 8b c8	 mov	 rcx, rax
  000cc	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@deque_appe:

; 251  :     Py_RETURN_NONE;

  000d1	e8 00 00 00 00	 call	 _Py_PXCTX
  000d6	85 c0		 test	 eax, eax
  000d8	75 3c		 jne	 SHORT $LN11@deque_appe
  000da	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  000e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000ef	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000f5	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000fd	e8 00 00 00 00	 call	 _PyParallel_Guard
  00102	85 c0		 test	 eax, eax
  00104	75 09		 jne	 SHORT $LN10@deque_appe
  00106	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0010d	74 07		 je	 SHORT $LN11@deque_appe
$LN10@deque_appe:
  0010f	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN11@deque_appe:
  00116	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 252  : }

  0011d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00122	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00126	5f		 pop	 rdi
  00127	c3		 ret	 0
deque_append ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$deque_appendleft DD imagerel deque_appendleft
	DD	imagerel deque_appendleft+295
	DD	imagerel $unwind$deque_appendleft
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_appendleft DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_collectionsmodule.c
xdata	ENDS
;	COMDAT deque_appendleft
_TEXT	SEGMENT
deque$ = 64
item$ = 72
deque_appendleft PROC					; COMDAT

; 258  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 259  :     deque->state++;

  0000a	ff 81 90 00 00
	00		 inc	 DWORD PTR [rcx+144]

; 260  :     if (deque->leftindex == 0) {

  00010	48 83 79 70 00	 cmp	 QWORD PTR [rcx+112], 0
  00015	48 8b fa	 mov	 rdi, rdx
  00018	48 8b d9	 mov	 rbx, rcx
  0001b	75 38		 jne	 SHORT $LN3@deque_appe@2

; 261  :         block *b = newblock(NULL, deque->leftblock, deque->len);

  0001d	4c 8b 81 80 00
	00 00		 mov	 r8, QWORD PTR [rcx+128]
  00024	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00028	33 c9		 xor	 ecx, ecx
  0002a	e8 00 00 00 00	 call	 newblock
  0002f	4c 8b d8	 mov	 r11, rax

; 262  :         if (b == NULL)

  00032	48 85 c0	 test	 rax, rax
  00035	75 0b		 jne	 SHORT $LN2@deque_appe@2

; 275  : }

  00037	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0003c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00040	5f		 pop	 rdi
  00041	c3		 ret	 0
$LN2@deque_appe@2:

; 263  :             return NULL;
; 264  :         assert(deque->leftblock->leftlink == NULL);
; 265  :         deque->leftblock->leftlink = b;

  00042	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00046	4c 89 18	 mov	 QWORD PTR [rax], r11

; 266  :         deque->leftblock = b;

  00049	4c 89 5b 60	 mov	 QWORD PTR [rbx+96], r11

; 267  :         deque->leftindex = BLOCKLEN;

  0004d	48 c7 43 70 3e
	00 00 00	 mov	 QWORD PTR [rbx+112], 62	; 0000003eH
$LN3@deque_appe@2:

; 268  :     }
; 269  :     Py_INCREF(item);

  00055	e8 00 00 00 00	 call	 _Py_PXCTX
  0005a	85 c0		 test	 eax, eax
  0005c	75 32		 jne	 SHORT $LN7@deque_appe@2
  0005e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00065	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0006c	4c 8b cf	 mov	 r9, rdi
  0006f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00075	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0007d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00082	85 c0		 test	 eax, eax
  00084	75 06		 jne	 SHORT $LN6@deque_appe@2
  00086	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  0008a	74 04		 je	 SHORT $LN7@deque_appe@2
$LN6@deque_appe@2:
  0008c	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN7@deque_appe@2:

; 270  :     deque->len++;
; 271  :     deque->leftindex--;

  00090	48 ff 4b 70	 dec	 QWORD PTR [rbx+112]

; 272  :     deque->leftblock->data[deque->leftindex] = item;

  00094	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00098	48 ff 83 80 00
	00 00		 inc	 QWORD PTR [rbx+128]
  0009f	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  000a3	48 89 7c c8 10	 mov	 QWORD PTR [rax+rcx*8+16], rdi

; 273  :     TRIM(deque, deque_pop);

  000a8	48 8b 83 88 00
	00 00		 mov	 rax, QWORD PTR [rbx+136]
  000af	48 83 f8 ff	 cmp	 rax, -1
  000b3	74 1b		 je	 SHORT $LN1@deque_appe@2
  000b5	48 39 83 80 00
	00 00		 cmp	 QWORD PTR [rbx+128], rax
  000bc	7e 12		 jle	 SHORT $LN1@deque_appe@2
  000be	33 d2		 xor	 edx, edx
  000c0	48 8b cb	 mov	 rcx, rbx
  000c3	e8 00 00 00 00	 call	 deque_pop
  000c8	48 8b c8	 mov	 rcx, rax
  000cb	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@deque_appe@2:

; 274  :     Py_RETURN_NONE;

  000d0	e8 00 00 00 00	 call	 _Py_PXCTX
  000d5	85 c0		 test	 eax, eax
  000d7	75 3c		 jne	 SHORT $LN11@deque_appe@2
  000d9	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  000e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000ee	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000f4	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000fc	e8 00 00 00 00	 call	 _PyParallel_Guard
  00101	85 c0		 test	 eax, eax
  00103	75 09		 jne	 SHORT $LN10@deque_appe@2
  00105	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0010c	74 07		 je	 SHORT $LN11@deque_appe@2
$LN10@deque_appe@2:
  0010e	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN11@deque_appe@2:
  00115	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 275  : }

  0011c	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00121	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00125	5f		 pop	 rdi
  00126	c3		 ret	 0
deque_appendleft ENDP
_TEXT	ENDS
EXTRN	PyErr_Occurred:PROC
EXTRN	PyIter_Next:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$consume_iterator DD imagerel consume_iterator
	DD	imagerel consume_iterator+267
	DD	imagerel $unwind$consume_iterator
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$consume_iterator DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_collectionsmodule.c
xdata	ENDS
;	COMDAT consume_iterator
_TEXT	SEGMENT
it$ = 64
consume_iterator PROC					; COMDAT

; 284  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 285  :     PyObject *item;
; 286  : 
; 287  :     while ((item = PyIter_Next(it)) != NULL) {

  0000d	e8 00 00 00 00	 call	 PyIter_Next
  00012	48 8b d8	 mov	 rbx, rax
  00015	48 85 c0	 test	 rax, rax
  00018	74 7b		 je	 SHORT $LN2@consume_it
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL3@consume_it:

; 288  :         Py_DECREF(item);

  00020	e8 00 00 00 00	 call	 _Py_PXCTX
  00025	85 c0		 test	 eax, eax
  00027	75 5c		 jne	 SHORT $LN16@consume_it
  00029	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0002d	a8 20		 test	 al, 32			; 00000020H
  0002f	75 4c		 jne	 SHORT $LN10@consume_it
  00031	84 c0		 test	 al, al
  00033	78 48		 js	 SHORT $LN10@consume_it
  00035	a8 02		 test	 al, 2
  00037	75 4c		 jne	 SHORT $LN16@consume_it
  00039	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0003d	75 46		 jne	 SHORT $LN16@consume_it
  0003f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0004d	4c 8b cb	 mov	 r9, rbx
  00050	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00056	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0005e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00063	48 8b cb	 mov	 rcx, rbx
  00066	85 c0		 test	 eax, eax
  00068	74 07		 je	 SHORT $LN15@consume_it
  0006a	e8 00 00 00 00	 call	 _Px_Dealloc
  0006f	eb 14		 jmp	 SHORT $LN16@consume_it
$LN15@consume_it:
  00071	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00075	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0007b	eb 08		 jmp	 SHORT $LN16@consume_it
$LN10@consume_it:
  0007d	48 8b cb	 mov	 rcx, rbx
  00080	e8 00 00 00 00	 call	 Px_DecRef
$LN16@consume_it:

; 285  :     PyObject *item;
; 286  : 
; 287  :     while ((item = PyIter_Next(it)) != NULL) {

  00085	48 8b cf	 mov	 rcx, rdi
  00088	e8 00 00 00 00	 call	 PyIter_Next
  0008d	48 8b d8	 mov	 rbx, rax
  00090	48 85 c0	 test	 rax, rax
  00093	75 8b		 jne	 SHORT $LL3@consume_it
$LN2@consume_it:

; 289  :     }
; 290  :     Py_DECREF(it);

  00095	48 8b cf	 mov	 rcx, rdi
  00098	e8 00 00 00 00	 call	 _Py_DecRef

; 291  :     if (PyErr_Occurred())

  0009d	e8 00 00 00 00	 call	 PyErr_Occurred
  000a2	48 85 c0	 test	 rax, rax
  000a5	74 0d		 je	 SHORT $LN1@consume_it

; 292  :         return NULL;

  000a7	33 c0		 xor	 eax, eax

; 294  : }

  000a9	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000ae	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b2	5f		 pop	 rdi
  000b3	c3		 ret	 0
$LN1@consume_it:

; 293  :     Py_RETURN_NONE;

  000b4	e8 00 00 00 00	 call	 _Py_PXCTX
  000b9	85 c0		 test	 eax, eax
  000bb	75 3c		 jne	 SHORT $LN18@consume_it
  000bd	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  000c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000d2	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000d8	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000e0	e8 00 00 00 00	 call	 _PyParallel_Guard
  000e5	85 c0		 test	 eax, eax
  000e7	75 09		 jne	 SHORT $LN17@consume_it
  000e9	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  000f0	74 07		 je	 SHORT $LN18@consume_it
$LN17@consume_it:
  000f2	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN18@consume_it:
  000f9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 294  : }

  00100	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00105	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00109	5f		 pop	 rdi
  0010a	c3		 ret	 0
consume_iterator ENDP
_TEXT	ENDS
EXTRN	PyObject_GetIter:PROC
EXTRN	PySequence_List:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_extend DD imagerel deque_extend
	DD	imagerel deque_extend+81
	DD	imagerel $unwind$deque_extend
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$deque_extend DD imagerel deque_extend+81
	DD	imagerel deque_extend+136
	DD	imagerel $chain$0$deque_extend
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$deque_extend DD imagerel deque_extend+136
	DD	imagerel deque_extend+357
	DD	imagerel $chain$2$deque_extend
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$deque_extend DD imagerel deque_extend+357
	DD	imagerel deque_extend+391
	DD	imagerel $chain$4$deque_extend
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$deque_extend DD 020021H
	DD	066400H
	DD	imagerel deque_extend
	DD	imagerel deque_extend+81
	DD	imagerel $unwind$deque_extend
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$deque_extend DD 020021H
	DD	066400H
	DD	imagerel deque_extend
	DD	imagerel deque_extend+81
	DD	imagerel $unwind$deque_extend
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$deque_extend DD 020521H
	DD	066405H
	DD	imagerel deque_extend
	DD	imagerel deque_extend+81
	DD	imagerel $unwind$deque_extend
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_extend DD 040a01H
	DD	07340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT deque_extend
_TEXT	SEGMENT
deque$ = 48
iterable$ = 56
deque_extend PROC					; COMDAT

; 298  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b d9	 mov	 rbx, rcx

; 299  :     PyObject *it, *item;
; 300  : 
; 301  :     /* Handle case where id(deque) == id(iterable) */
; 302  :     if ((PyObject *)deque == iterable) {

  0000d	48 3b ca	 cmp	 rcx, rdx

; 303  :         PyObject *result;
; 304  :         PyObject *s = PySequence_List(iterable);

  00010	48 8b ca	 mov	 rcx, rdx
  00013	75 3c		 jne	 SHORT $LN10@deque_exte
  00015	e8 00 00 00 00	 call	 PySequence_List
  0001a	48 8b f8	 mov	 rdi, rax

; 305  :         if (s == NULL)

  0001d	48 85 c0	 test	 rax, rax
  00020	75 0b		 jne	 SHORT $LN9@deque_exte

; 343  : }

  00022	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00027	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002b	5f		 pop	 rdi
  0002c	c3		 ret	 0
$LN9@deque_exte:

; 306  :             return NULL;
; 307  :         result = deque_extend(deque, s);

  0002d	48 8b d0	 mov	 rdx, rax
  00030	48 8b cb	 mov	 rcx, rbx
  00033	e8 00 00 00 00	 call	 deque_extend

; 308  :         Py_DECREF(s);

  00038	48 8b cf	 mov	 rcx, rdi
  0003b	48 8b d8	 mov	 rbx, rax
  0003e	e8 00 00 00 00	 call	 _Py_DecRef

; 309  :         return result;

  00043	48 8b c3	 mov	 rax, rbx

; 343  : }

  00046	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5f		 pop	 rdi
  00050	c3		 ret	 0
$LN10@deque_exte:
  00051	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi

; 310  :     }
; 311  : 
; 312  :     it = PyObject_GetIter(iterable);

  00056	e8 00 00 00 00	 call	 PyObject_GetIter
  0005b	48 8b f0	 mov	 rsi, rax

; 313  :     if (it == NULL)

  0005e	48 85 c0	 test	 rax, rax

; 314  :         return NULL;

  00061	0f 84 0e 01 00
	00		 je	 $LN17@deque_exte

; 315  : 
; 316  :     if (deque->maxlen == 0)

  00067	48 83 bb 88 00
	00 00 00	 cmp	 QWORD PTR [rbx+136], 0

; 317  :         return consume_iterator(it);

  0006f	48 8b c8	 mov	 rcx, rax
  00072	75 14		 jne	 SHORT $LN13@deque_exte
  00074	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]

; 343  : }

  00079	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0007e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00082	5f		 pop	 rdi
  00083	e9 00 00 00 00	 jmp	 consume_iterator
$LN13@deque_exte:

; 318  : 
; 319  :     while ((item = PyIter_Next(it)) != NULL) {

  00088	e8 00 00 00 00	 call	 PyIter_Next
  0008d	48 8b f8	 mov	 rdi, rax
  00090	48 85 c0	 test	 rax, rax
  00093	0f 84 97 00 00
	00		 je	 $LN15@deque_exte
  00099	0f 1f 80 00 00
	00 00		 npad	 7
$LL6@deque_exte:

; 320  :         deque->state++;

  000a0	ff 83 90 00 00
	00		 inc	 DWORD PTR [rbx+144]

; 321  :         if (deque->rightindex == BLOCKLEN-1) {

  000a6	48 83 7b 78 3d	 cmp	 QWORD PTR [rbx+120], 61	; 0000003dH
  000ab	75 2f		 jne	 SHORT $LN4@deque_exte

; 322  :             block *b = newblock(deque->rightblock, NULL,
; 323  :                                 deque->len);

  000ad	4c 8b 83 80 00
	00 00		 mov	 r8, QWORD PTR [rbx+128]
  000b4	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  000b8	33 d2		 xor	 edx, edx
  000ba	e8 00 00 00 00	 call	 newblock

; 324  :             if (b == NULL) {

  000bf	48 85 c0	 test	 rax, rax
  000c2	0f 84 9d 00 00
	00		 je	 $LN14@deque_exte

; 327  :                 return NULL;
; 328  :             }
; 329  :             assert(deque->rightblock->rightlink == NULL);
; 330  :             deque->rightblock->rightlink = b;

  000c8	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  000cc	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 331  :             deque->rightblock = b;

  000d0	48 89 43 68	 mov	 QWORD PTR [rbx+104], rax

; 332  :             deque->rightindex = -1;

  000d4	48 c7 43 78 ff
	ff ff ff	 mov	 QWORD PTR [rbx+120], -1
$LN4@deque_exte:

; 333  :         }
; 334  :         deque->len++;
; 335  :         deque->rightindex++;

  000dc	48 ff 43 78	 inc	 QWORD PTR [rbx+120]

; 336  :         deque->rightblock->data[deque->rightindex] = item;

  000e0	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  000e4	48 ff 83 80 00
	00 00		 inc	 QWORD PTR [rbx+128]
  000eb	48 8b 4b 78	 mov	 rcx, QWORD PTR [rbx+120]
  000ef	48 89 7c c8 10	 mov	 QWORD PTR [rax+rcx*8+16], rdi

; 337  :         TRIM(deque, deque_popleft);

  000f4	48 8b 83 88 00
	00 00		 mov	 rax, QWORD PTR [rbx+136]
  000fb	48 83 f8 ff	 cmp	 rax, -1
  000ff	74 1b		 je	 SHORT $LN2@deque_exte
  00101	48 39 83 80 00
	00 00		 cmp	 QWORD PTR [rbx+128], rax
  00108	7e 12		 jle	 SHORT $LN2@deque_exte
  0010a	33 d2		 xor	 edx, edx
  0010c	48 8b cb	 mov	 rcx, rbx
  0010f	e8 00 00 00 00	 call	 deque_popleft
  00114	48 8b c8	 mov	 rcx, rax
  00117	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@deque_exte:

; 318  : 
; 319  :     while ((item = PyIter_Next(it)) != NULL) {

  0011c	48 8b ce	 mov	 rcx, rsi
  0011f	e8 00 00 00 00	 call	 PyIter_Next
  00124	48 8b f8	 mov	 rdi, rax
  00127	48 85 c0	 test	 rax, rax
  0012a	0f 85 70 ff ff
	ff		 jne	 $LL6@deque_exte
$LN15@deque_exte:

; 338  :     }
; 339  :     Py_DECREF(it);

  00130	48 8b ce	 mov	 rcx, rsi
  00133	e8 00 00 00 00	 call	 _Py_DecRef

; 340  :     if (PyErr_Occurred())

  00138	e8 00 00 00 00	 call	 PyErr_Occurred
  0013d	48 85 c0	 test	 rax, rax

; 341  :         return NULL;

  00140	75 33		 jne	 SHORT $LN17@deque_exte

; 342  :     Py_RETURN_NONE;

  00142	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00149	e8 00 00 00 00	 call	 _Py_IncRef
  0014e	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  00153	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 343  : }

  0015a	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0015f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00163	5f		 pop	 rdi
  00164	c3		 ret	 0
$LN14@deque_exte:

; 325  :                 Py_DECREF(item);

  00165	48 8b cf	 mov	 rcx, rdi
  00168	e8 00 00 00 00	 call	 _Py_DecRef

; 326  :                 Py_DECREF(it);

  0016d	48 8b ce	 mov	 rcx, rsi
  00170	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@deque_exte:

; 343  : }

  00175	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  0017a	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0017f	33 c0		 xor	 eax, eax
  00181	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00185	5f		 pop	 rdi
  00186	c3		 ret	 0
deque_extend ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_extendleft DD imagerel deque_extendleft
	DD	imagerel deque_extendleft+81
	DD	imagerel $unwind$deque_extendleft
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$deque_extendleft DD imagerel deque_extendleft+81
	DD	imagerel deque_extendleft+136
	DD	imagerel $chain$0$deque_extendleft
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$deque_extendleft DD imagerel deque_extendleft+136
	DD	imagerel deque_extendleft+356
	DD	imagerel $chain$2$deque_extendleft
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$deque_extendleft DD imagerel deque_extendleft+356
	DD	imagerel deque_extendleft+390
	DD	imagerel $chain$4$deque_extendleft
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$deque_extendleft DD 020021H
	DD	066400H
	DD	imagerel deque_extendleft
	DD	imagerel deque_extendleft+81
	DD	imagerel $unwind$deque_extendleft
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$deque_extendleft DD 020021H
	DD	066400H
	DD	imagerel deque_extendleft
	DD	imagerel deque_extendleft+81
	DD	imagerel $unwind$deque_extendleft
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$deque_extendleft DD 020521H
	DD	066405H
	DD	imagerel deque_extendleft
	DD	imagerel deque_extendleft+81
	DD	imagerel $unwind$deque_extendleft
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_extendleft DD 040a01H
	DD	07340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT deque_extendleft
_TEXT	SEGMENT
deque$ = 48
iterable$ = 56
deque_extendleft PROC					; COMDAT

; 350  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b d9	 mov	 rbx, rcx

; 351  :     PyObject *it, *item;
; 352  : 
; 353  :     /* Handle case where id(deque) == id(iterable) */
; 354  :     if ((PyObject *)deque == iterable) {

  0000d	48 3b ca	 cmp	 rcx, rdx

; 355  :         PyObject *result;
; 356  :         PyObject *s = PySequence_List(iterable);

  00010	48 8b ca	 mov	 rcx, rdx
  00013	75 3c		 jne	 SHORT $LN10@deque_exte@2
  00015	e8 00 00 00 00	 call	 PySequence_List
  0001a	48 8b f8	 mov	 rdi, rax

; 357  :         if (s == NULL)

  0001d	48 85 c0	 test	 rax, rax
  00020	75 0b		 jne	 SHORT $LN9@deque_exte@2

; 395  : }

  00022	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00027	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002b	5f		 pop	 rdi
  0002c	c3		 ret	 0
$LN9@deque_exte@2:

; 358  :             return NULL;
; 359  :         result = deque_extendleft(deque, s);

  0002d	48 8b d0	 mov	 rdx, rax
  00030	48 8b cb	 mov	 rcx, rbx
  00033	e8 00 00 00 00	 call	 deque_extendleft

; 360  :         Py_DECREF(s);

  00038	48 8b cf	 mov	 rcx, rdi
  0003b	48 8b d8	 mov	 rbx, rax
  0003e	e8 00 00 00 00	 call	 _Py_DecRef

; 361  :         return result;

  00043	48 8b c3	 mov	 rax, rbx

; 395  : }

  00046	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5f		 pop	 rdi
  00050	c3		 ret	 0
$LN10@deque_exte@2:
  00051	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi

; 362  :     }
; 363  : 
; 364  :     it = PyObject_GetIter(iterable);

  00056	e8 00 00 00 00	 call	 PyObject_GetIter
  0005b	48 8b f0	 mov	 rsi, rax

; 365  :     if (it == NULL)

  0005e	48 85 c0	 test	 rax, rax

; 366  :         return NULL;

  00061	0f 84 0d 01 00
	00		 je	 $LN17@deque_exte@2

; 367  : 
; 368  :     if (deque->maxlen == 0)

  00067	48 83 bb 88 00
	00 00 00	 cmp	 QWORD PTR [rbx+136], 0

; 369  :         return consume_iterator(it);

  0006f	48 8b c8	 mov	 rcx, rax
  00072	75 14		 jne	 SHORT $LN13@deque_exte@2
  00074	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]

; 395  : }

  00079	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0007e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00082	5f		 pop	 rdi
  00083	e9 00 00 00 00	 jmp	 consume_iterator
$LN13@deque_exte@2:

; 370  : 
; 371  :     while ((item = PyIter_Next(it)) != NULL) {

  00088	e8 00 00 00 00	 call	 PyIter_Next
  0008d	48 8b f8	 mov	 rdi, rax
  00090	48 85 c0	 test	 rax, rax
  00093	0f 84 96 00 00
	00		 je	 $LN15@deque_exte@2
  00099	0f 1f 80 00 00
	00 00		 npad	 7
$LL6@deque_exte@2:

; 372  :         deque->state++;

  000a0	ff 83 90 00 00
	00		 inc	 DWORD PTR [rbx+144]

; 373  :         if (deque->leftindex == 0) {

  000a6	48 83 7b 70 00	 cmp	 QWORD PTR [rbx+112], 0
  000ab	75 2e		 jne	 SHORT $LN4@deque_exte@2

; 374  :             block *b = newblock(NULL, deque->leftblock,
; 375  :                                 deque->len);

  000ad	4c 8b 83 80 00
	00 00		 mov	 r8, QWORD PTR [rbx+128]
  000b4	48 8b 53 60	 mov	 rdx, QWORD PTR [rbx+96]
  000b8	33 c9		 xor	 ecx, ecx
  000ba	e8 00 00 00 00	 call	 newblock

; 376  :             if (b == NULL) {

  000bf	48 85 c0	 test	 rax, rax
  000c2	0f 84 9c 00 00
	00		 je	 $LN14@deque_exte@2

; 379  :                 return NULL;
; 380  :             }
; 381  :             assert(deque->leftblock->leftlink == NULL);
; 382  :             deque->leftblock->leftlink = b;

  000c8	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  000cc	48 89 01	 mov	 QWORD PTR [rcx], rax

; 383  :             deque->leftblock = b;

  000cf	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax

; 384  :             deque->leftindex = BLOCKLEN;

  000d3	48 c7 43 70 3e
	00 00 00	 mov	 QWORD PTR [rbx+112], 62	; 0000003eH
$LN4@deque_exte@2:

; 385  :         }
; 386  :         deque->len++;
; 387  :         deque->leftindex--;

  000db	48 ff 4b 70	 dec	 QWORD PTR [rbx+112]

; 388  :         deque->leftblock->data[deque->leftindex] = item;

  000df	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  000e3	48 ff 83 80 00
	00 00		 inc	 QWORD PTR [rbx+128]
  000ea	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  000ee	48 89 7c c8 10	 mov	 QWORD PTR [rax+rcx*8+16], rdi

; 389  :         TRIM(deque, deque_pop);

  000f3	48 8b 83 88 00
	00 00		 mov	 rax, QWORD PTR [rbx+136]
  000fa	48 83 f8 ff	 cmp	 rax, -1
  000fe	74 1b		 je	 SHORT $LN2@deque_exte@2
  00100	48 39 83 80 00
	00 00		 cmp	 QWORD PTR [rbx+128], rax
  00107	7e 12		 jle	 SHORT $LN2@deque_exte@2
  00109	33 d2		 xor	 edx, edx
  0010b	48 8b cb	 mov	 rcx, rbx
  0010e	e8 00 00 00 00	 call	 deque_pop
  00113	48 8b c8	 mov	 rcx, rax
  00116	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@deque_exte@2:

; 370  : 
; 371  :     while ((item = PyIter_Next(it)) != NULL) {

  0011b	48 8b ce	 mov	 rcx, rsi
  0011e	e8 00 00 00 00	 call	 PyIter_Next
  00123	48 8b f8	 mov	 rdi, rax
  00126	48 85 c0	 test	 rax, rax
  00129	0f 85 71 ff ff
	ff		 jne	 $LL6@deque_exte@2
$LN15@deque_exte@2:

; 390  :     }
; 391  :     Py_DECREF(it);

  0012f	48 8b ce	 mov	 rcx, rsi
  00132	e8 00 00 00 00	 call	 _Py_DecRef

; 392  :     if (PyErr_Occurred())

  00137	e8 00 00 00 00	 call	 PyErr_Occurred
  0013c	48 85 c0	 test	 rax, rax

; 393  :         return NULL;

  0013f	75 33		 jne	 SHORT $LN17@deque_exte@2

; 394  :     Py_RETURN_NONE;

  00141	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00148	e8 00 00 00 00	 call	 _Py_IncRef
  0014d	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  00152	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 395  : }

  00159	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0015e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00162	5f		 pop	 rdi
  00163	c3		 ret	 0
$LN14@deque_exte@2:

; 377  :                 Py_DECREF(item);

  00164	48 8b cf	 mov	 rcx, rdi
  00167	e8 00 00 00 00	 call	 _Py_DecRef

; 378  :                 Py_DECREF(it);

  0016c	48 8b ce	 mov	 rcx, rsi
  0016f	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@deque_exte@2:

; 395  : }

  00174	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  00179	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0017e	33 c0		 xor	 eax, eax
  00180	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00184	5f		 pop	 rdi
  00185	c3		 ret	 0
deque_extendleft ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$deque_inplace_concat DD imagerel deque_inplace_concat
	DD	imagerel deque_inplace_concat+101
	DD	imagerel $unwind$deque_inplace_concat
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_inplace_concat DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_collectionsmodule.c
xdata	ENDS
;	COMDAT deque_inplace_concat
_TEXT	SEGMENT
deque$ = 64
other$ = 72
deque_inplace_concat PROC				; COMDAT

; 402  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 403  :     PyObject *result;
; 404  : 
; 405  :     result = deque_extend(deque, other);

  00009	e8 00 00 00 00	 call	 deque_extend

; 406  :     if (result == NULL)

  0000e	48 85 c0	 test	 rax, rax
  00011	75 06		 jne	 SHORT $LN1@deque_inpl

; 411  : }

  00013	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00017	5b		 pop	 rbx
  00018	c3		 ret	 0
$LN1@deque_inpl:

; 407  :         return result;
; 408  :     Py_DECREF(result);

  00019	48 8b c8	 mov	 rcx, rax
  0001c	e8 00 00 00 00	 call	 _Py_DecRef

; 409  :     Py_INCREF(deque);

  00021	e8 00 00 00 00	 call	 _Py_PXCTX
  00026	85 c0		 test	 eax, eax
  00028	75 32		 jne	 SHORT $LN5@deque_inpl
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00038	4c 8b cb	 mov	 r9, rbx
  0003b	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00041	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00049	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004e	85 c0		 test	 eax, eax
  00050	75 06		 jne	 SHORT $LN4@deque_inpl
  00052	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00056	74 04		 je	 SHORT $LN5@deque_inpl
$LN4@deque_inpl:
  00058	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN5@deque_inpl:

; 410  :     return (PyObject *)deque;

  0005c	48 8b c3	 mov	 rax, rbx

; 411  : }

  0005f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00063	5b		 pop	 rbx
  00064	c3		 ret	 0
deque_inplace_concat ENDP
_TEXT	ENDS
EXTRN	memcpy:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_deque_rotate DD imagerel _deque_rotate
	DD	imagerel _deque_rotate+58
	DD	imagerel $unwind$_deque_rotate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_deque_rotate DD imagerel _deque_rotate+58
	DD	imagerel _deque_rotate+526
	DD	imagerel $chain$1$_deque_rotate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$_deque_rotate DD imagerel _deque_rotate+526
	DD	imagerel _deque_rotate+531
	DD	imagerel $chain$3$_deque_rotate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$_deque_rotate DD 040021H
	DD	07c400H
	DD	063400H
	DD	imagerel _deque_rotate
	DD	imagerel _deque_rotate+58
	DD	imagerel $unwind$_deque_rotate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_deque_rotate DD 044321H
	DD	063443H
	DD	07c405H
	DD	imagerel _deque_rotate
	DD	imagerel _deque_rotate+58
	DD	imagerel $unwind$_deque_rotate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_deque_rotate DD 060f01H
	DD	09640fH
	DD	08540fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _deque_rotate
_TEXT	SEGMENT
deque$ = 48
n$ = 56
_deque_rotate PROC					; COMDAT

; 415  : {

  00000	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  00005	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 416  :     Py_ssize_t m, len=deque->len, halflen=len>>1;

  0000f	48 8b a9 80 00
	00 00		 mov	 rbp, QWORD PTR [rcx+128]
  00016	48 8b f9	 mov	 rdi, rcx
  00019	48 8b f2	 mov	 rsi, rdx
  0001c	48 8b cd	 mov	 rcx, rbp
  0001f	48 d1 f9	 sar	 rcx, 1

; 417  : 
; 418  :     if (len <= 1)

  00022	48 83 fd 01	 cmp	 rbp, 1
  00026	7f 12		 jg	 SHORT $LN20@deque_rota

; 419  :         return 0;

  00028	33 c0		 xor	 eax, eax

; 502  : }

  0002a	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  0002f	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00034	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00038	5f		 pop	 rdi
  00039	c3		 ret	 0
$LN20@deque_rota:
  0003a	4c 89 64 24 38	 mov	 QWORD PTR [rsp+56], r12

; 420  :     if (n > halflen || n < -halflen) {

  0003f	48 3b d1	 cmp	 rdx, rcx
  00042	7f 0b		 jg	 SHORT $LN18@deque_rota
  00044	48 8b c1	 mov	 rax, rcx
  00047	48 f7 d8	 neg	 rax
  0004a	48 3b d0	 cmp	 rdx, rax
  0004d	7d 20		 jge	 SHORT $LN15@deque_rota
$LN18@deque_rota:

; 421  :         n %= len;

  0004f	48 8b c2	 mov	 rax, rdx
  00052	48 99		 cdq
  00054	48 f7 fd	 idiv	 rbp
  00057	48 8b f2	 mov	 rsi, rdx

; 422  :         if (n > halflen)

  0005a	48 3b d1	 cmp	 rdx, rcx
  0005d	7e 05		 jle	 SHORT $LN17@deque_rota

; 423  :             n -= len;

  0005f	48 2b f5	 sub	 rsi, rbp
  00062	eb 0b		 jmp	 SHORT $LN15@deque_rota
$LN17@deque_rota:

; 424  :         else if (n < -halflen)

  00064	48 f7 d9	 neg	 rcx
  00067	48 3b d1	 cmp	 rdx, rcx
  0006a	7d 03		 jge	 SHORT $LN15@deque_rota

; 425  :             n += len;

  0006c	48 03 f5	 add	 rsi, rbp
$LN15@deque_rota:

; 426  :     }
; 427  :     assert(len > 1);
; 428  :     assert(-halflen <= n && n <= halflen);
; 429  : 
; 430  :     deque->state++;

  0006f	ff 87 90 00 00
	00		 inc	 DWORD PTR [rdi+144]

; 431  :     while (n > 0) {

  00075	45 33 e4	 xor	 r12d, r12d
  00078	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0007d	48 85 f6	 test	 rsi, rsi
  00080	0f 8e b0 00 00
	00		 jle	 $LN31@deque_rota
$LL14@deque_rota:

; 432  :         if (deque->leftindex == 0) {

  00086	4c 39 67 70	 cmp	 QWORD PTR [rdi+112], r12
  0008a	75 2a		 jne	 SHORT $LN12@deque_rota

; 433  :             block *b = newblock(NULL, deque->leftblock, len);

  0008c	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  00090	4c 8b c5	 mov	 r8, rbp
  00093	33 c9		 xor	 ecx, ecx
  00095	e8 00 00 00 00	 call	 newblock

; 434  :             if (b == NULL)

  0009a	48 85 c0	 test	 rax, rax
  0009d	0f 84 6b 01 00
	00		 je	 $LN26@deque_rota

; 435  :                 return -1;
; 436  :             assert(deque->leftblock->leftlink == NULL);
; 437  :             deque->leftblock->leftlink = b;

  000a3	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 438  :             deque->leftblock = b;

  000aa	48 89 47 60	 mov	 QWORD PTR [rdi+96], rax

; 439  :             deque->leftindex = BLOCKLEN;

  000ae	48 c7 47 70 3e
	00 00 00	 mov	 QWORD PTR [rdi+112], 62	; 0000003eH
$LN12@deque_rota:

; 440  :         }
; 441  :         assert(deque->leftindex > 0);
; 442  : 
; 443  :         m = n;
; 444  :         if (m > deque->rightindex + 1)

  000b6	48 8b 47 78	 mov	 rax, QWORD PTR [rdi+120]

; 445  :             m = deque->rightindex + 1;
; 446  :         if (m > deque->leftindex)
; 447  :             m = deque->leftindex;
; 448  :         assert (m > 0 && m <= len);
; 449  :         memcpy(&deque->leftblock->data[deque->leftindex - m],
; 450  :                &deque->rightblock->data[deque->rightindex + 1 - m],
; 451  :                m * sizeof(PyObject *));

  000ba	48 8b 4f 78	 mov	 rcx, QWORD PTR [rdi+120]
  000be	48 8b de	 mov	 rbx, rsi
  000c1	48 ff c0	 inc	 rax
  000c4	48 3b f0	 cmp	 rsi, rax
  000c7	48 0f 4f d8	 cmovg	 rbx, rax
  000cb	48 8b 47 70	 mov	 rax, QWORD PTR [rdi+112]
  000cf	48 3b d8	 cmp	 rbx, rax
  000d2	48 0f 4f d8	 cmovg	 rbx, rax
  000d6	48 8b 47 68	 mov	 rax, QWORD PTR [rdi+104]
  000da	48 2b cb	 sub	 rcx, rbx
  000dd	4c 8d 04 dd 00
	00 00 00	 lea	 r8, QWORD PTR [rbx*8]
  000e5	48 8d 54 c8 18	 lea	 rdx, QWORD PTR [rax+rcx*8+24]
  000ea	48 8b 4f 70	 mov	 rcx, QWORD PTR [rdi+112]
  000ee	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  000f2	48 2b cb	 sub	 rcx, rbx
  000f5	48 8d 4c c8 10	 lea	 rcx, QWORD PTR [rax+rcx*8+16]
  000fa	e8 00 00 00 00	 call	 memcpy

; 452  :         deque->rightindex -= m;

  000ff	48 29 5f 78	 sub	 QWORD PTR [rdi+120], rbx

; 453  :         deque->leftindex -= m;

  00103	48 29 5f 70	 sub	 QWORD PTR [rdi+112], rbx

; 454  :         n -= m;

  00107	48 2b f3	 sub	 rsi, rbx

; 455  : 
; 456  :         if (deque->rightindex == -1) {

  0010a	48 83 7f 78 ff	 cmp	 QWORD PTR [rdi+120], -1
  0010f	75 1c		 jne	 SHORT $LN8@deque_rota

; 457  :             block *prevblock = deque->rightblock->leftlink;

  00111	48 8b 4f 68	 mov	 rcx, QWORD PTR [rdi+104]
  00115	48 8b 19	 mov	 rbx, QWORD PTR [rcx]

; 458  :             assert(deque->rightblock != NULL);
; 459  :             assert(deque->leftblock != deque->rightblock);
; 460  :             freeblock(deque->rightblock);

  00118	e8 00 00 00 00	 call	 freeblock

; 461  :             prevblock->rightlink = NULL;

  0011d	4c 89 63 08	 mov	 QWORD PTR [rbx+8], r12

; 462  :             deque->rightblock = prevblock;

  00121	48 89 5f 68	 mov	 QWORD PTR [rdi+104], rbx

; 463  :             deque->rightindex = BLOCKLEN - 1;

  00125	48 c7 47 78 3d
	00 00 00	 mov	 QWORD PTR [rdi+120], 61	; 0000003dH
$LN8@deque_rota:

; 431  :     while (n > 0) {

  0012d	48 85 f6	 test	 rsi, rsi
  00130	0f 8f 50 ff ff
	ff		 jg	 $LL14@deque_rota
$LN31@deque_rota:

; 464  :         }
; 465  :     }
; 466  :     while (n < 0) {

  00136	0f 89 b6 00 00
	00		 jns	 $LN28@deque_rota
  0013c	0f 1f 40 00	 npad	 4
$LL7@deque_rota:

; 467  :         if (deque->rightindex == BLOCKLEN - 1) {

  00140	48 83 7f 78 3d	 cmp	 QWORD PTR [rdi+120], 61	; 0000003dH
  00145	75 2b		 jne	 SHORT $LN5@deque_rota

; 468  :             block *b = newblock(deque->rightblock, NULL, len);

  00147	48 8b 4f 68	 mov	 rcx, QWORD PTR [rdi+104]
  0014b	4c 8b c5	 mov	 r8, rbp
  0014e	33 d2		 xor	 edx, edx
  00150	e8 00 00 00 00	 call	 newblock

; 469  :             if (b == NULL)

  00155	48 85 c0	 test	 rax, rax
  00158	0f 84 b0 00 00
	00		 je	 $LN26@deque_rota

; 471  :             assert(deque->rightblock->rightlink == NULL);
; 472  :             deque->rightblock->rightlink = b;

  0015e	48 8b 4f 68	 mov	 rcx, QWORD PTR [rdi+104]
  00162	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 473  :             deque->rightblock = b;

  00166	48 89 47 68	 mov	 QWORD PTR [rdi+104], rax

; 474  :             deque->rightindex = -1;

  0016a	48 c7 47 78 ff
	ff ff ff	 mov	 QWORD PTR [rdi+120], -1
$LN5@deque_rota:

; 475  :         }
; 476  :         assert (deque->rightindex < BLOCKLEN - 1);
; 477  : 
; 478  :         m = -n;
; 479  :         if (m > BLOCKLEN - deque->leftindex)
; 480  :             m = BLOCKLEN - deque->leftindex;
; 481  :         if (m > BLOCKLEN - 1 - deque->rightindex)
; 482  :             m = BLOCKLEN - 1 - deque->rightindex;
; 483  :         assert (m > 0 && m <= len);
; 484  :         memcpy(&deque->rightblock->data[deque->rightindex + 1],
; 485  :                &deque->leftblock->data[deque->leftindex],
; 486  :                m * sizeof(PyObject *));

  00172	48 8b 4f 70	 mov	 rcx, QWORD PTR [rdi+112]
  00176	b8 3e 00 00 00	 mov	 eax, 62			; 0000003eH
  0017b	48 8b de	 mov	 rbx, rsi
  0017e	48 2b 47 70	 sub	 rax, QWORD PTR [rdi+112]
  00182	48 f7 db	 neg	 rbx
  00185	48 3b d8	 cmp	 rbx, rax
  00188	48 0f 4f d8	 cmovg	 rbx, rax
  0018c	b8 3d 00 00 00	 mov	 eax, 61			; 0000003dH
  00191	48 2b 47 78	 sub	 rax, QWORD PTR [rdi+120]
  00195	48 3b d8	 cmp	 rbx, rax
  00198	48 0f 4f d8	 cmovg	 rbx, rax
  0019c	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  001a0	48 8d 54 c8 10	 lea	 rdx, QWORD PTR [rax+rcx*8+16]
  001a5	48 8b 4f 78	 mov	 rcx, QWORD PTR [rdi+120]
  001a9	48 8b 47 68	 mov	 rax, QWORD PTR [rdi+104]
  001ad	48 8d 4c c8 18	 lea	 rcx, QWORD PTR [rax+rcx*8+24]
  001b2	4c 8d 04 dd 00
	00 00 00	 lea	 r8, QWORD PTR [rbx*8]
  001ba	e8 00 00 00 00	 call	 memcpy

; 487  :         deque->leftindex += m;

  001bf	48 01 5f 70	 add	 QWORD PTR [rdi+112], rbx

; 488  :         deque->rightindex += m;

  001c3	48 01 5f 78	 add	 QWORD PTR [rdi+120], rbx

; 489  :         n += m;

  001c7	48 03 f3	 add	 rsi, rbx

; 490  : 
; 491  :         if (deque->leftindex == BLOCKLEN) {

  001ca	48 83 7f 70 3e	 cmp	 QWORD PTR [rdi+112], 62	; 0000003eH
  001cf	75 18		 jne	 SHORT $LN1@deque_rota

; 492  :             block *nextblock = deque->leftblock->rightlink;

  001d1	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  001d5	48 8b 59 08	 mov	 rbx, QWORD PTR [rcx+8]

; 493  :             assert(deque->leftblock != deque->rightblock);
; 494  :             freeblock(deque->leftblock);

  001d9	e8 00 00 00 00	 call	 freeblock

; 495  :             assert(nextblock != NULL);
; 496  :             nextblock->leftlink = NULL;

  001de	4c 89 23	 mov	 QWORD PTR [rbx], r12

; 497  :             deque->leftblock = nextblock;

  001e1	48 89 5f 60	 mov	 QWORD PTR [rdi+96], rbx

; 498  :             deque->leftindex = 0;

  001e5	4c 89 67 70	 mov	 QWORD PTR [rdi+112], r12
$LN1@deque_rota:

; 464  :         }
; 465  :     }
; 466  :     while (n < 0) {

  001e9	48 85 f6	 test	 rsi, rsi
  001ec	0f 88 4e ff ff
	ff		 js	 $LL7@deque_rota
$LN28@deque_rota:

; 499  :         }
; 500  :     }
; 501  :     return 0;

  001f2	33 c0		 xor	 eax, eax
$LN30@deque_rota:
  001f4	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  001f9	4c 8b 64 24 38	 mov	 r12, QWORD PTR [rsp+56]

; 502  : }

  001fe	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00203	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00208	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0020c	5f		 pop	 rdi
  0020d	c3		 ret	 0
$LN26@deque_rota:

; 470  :                 return -1;

  0020e	83 c8 ff	 or	 eax, -1
  00211	eb e1		 jmp	 SHORT $LN30@deque_rota
_deque_rotate ENDP
_TEXT	ENDS
PUBLIC	??_C@_09DGEDBCJG@?$HMn?3rotate?$AA@		; `string'
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$deque_rotate DD imagerel deque_rotate
	DD	imagerel deque_rotate+152
	DD	imagerel $unwind$deque_rotate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_rotate DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_09DGEDBCJG@?$HMn?3rotate?$AA@
CONST	SEGMENT
??_C@_09DGEDBCJG@?$HMn?3rotate?$AA@ DB '|n:rotate', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_collectionsmodule.c
CONST	ENDS
;	COMDAT deque_rotate
_TEXT	SEGMENT
deque$ = 64
args$ = 72
n$ = 80
deque_rotate PROC					; COMDAT

; 506  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b c2	 mov	 rax, rdx
  00009	48 8b d9	 mov	 rbx, rcx

; 507  :     Py_ssize_t n=1;
; 508  : 
; 509  :     if (!PyArg_ParseTuple(args, "|n:rotate", &n))

  0000c	4c 8d 44 24 50	 lea	 r8, QWORD PTR n$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09DGEDBCJG@?$HMn?3rotate?$AA@
  00018	48 8b c8	 mov	 rcx, rax
  0001b	48 c7 44 24 50
	01 00 00 00	 mov	 QWORD PTR n$[rsp], 1
  00024	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00029	85 c0		 test	 eax, eax

; 510  :         return NULL;

  0002b	74 63		 je	 SHORT $LN1@deque_rota@2

; 511  :     if (_deque_rotate(deque, n) == 0)

  0002d	48 8b 54 24 50	 mov	 rdx, QWORD PTR n$[rsp]
  00032	48 8b cb	 mov	 rcx, rbx
  00035	e8 00 00 00 00	 call	 _deque_rotate
  0003a	85 c0		 test	 eax, eax
  0003c	75 52		 jne	 SHORT $LN1@deque_rota@2

; 512  :         Py_RETURN_NONE;

  0003e	e8 00 00 00 00	 call	 _Py_PXCTX
  00043	85 c0		 test	 eax, eax
  00045	75 3c		 jne	 SHORT $LN6@deque_rota@2
  00047	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0005c	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00062	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0006a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0006f	85 c0		 test	 eax, eax
  00071	75 09		 jne	 SHORT $LN5@deque_rota@2
  00073	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0007a	74 07		 je	 SHORT $LN6@deque_rota@2
$LN5@deque_rota@2:
  0007c	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN6@deque_rota@2:
  00083	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 514  : }

  0008a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008e	5b		 pop	 rbx
  0008f	c3		 ret	 0
$LN1@deque_rota@2:

; 513  :     return NULL;

  00090	33 c0		 xor	 eax, eax

; 514  : }

  00092	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00096	5b		 pop	 rbx
  00097	c3		 ret	 0
deque_rotate ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$deque_reverse DD imagerel deque_reverse
	DD	imagerel deque_reverse+213
	DD	imagerel $unwind$deque_reverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_reverse DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_collectionsmodule.c
xdata	ENDS
;	COMDAT deque_reverse
_TEXT	SEGMENT
deque$ = 64
unused$ = 72
deque_reverse PROC					; COMDAT

; 521  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 522  :     block *leftblock = deque->leftblock;
; 523  :     block *rightblock = deque->rightblock;
; 524  :     Py_ssize_t leftindex = deque->leftindex;
; 525  :     Py_ssize_t rightindex = deque->rightindex;
; 526  :     Py_ssize_t n = (deque->len)/2;

  00006	48 8b 81 80 00
	00 00		 mov	 rax, QWORD PTR [rcx+128]
  0000d	4c 8b 49 60	 mov	 r9, QWORD PTR [rcx+96]
  00011	4c 8b 51 68	 mov	 r10, QWORD PTR [rcx+104]
  00015	48 8b 59 70	 mov	 rbx, QWORD PTR [rcx+112]
  00019	4c 8b 41 78	 mov	 r8, QWORD PTR [rcx+120]
  0001d	48 99		 cdq
  0001f	48 2b c2	 sub	 rax, rdx

; 527  :     Py_ssize_t i;
; 528  :     PyObject *tmp;
; 529  : 
; 530  :     for (i=0 ; i<n ; i++) {

  00022	45 33 db	 xor	 r11d, r11d
  00025	48 d1 f8	 sar	 rax, 1
  00028	48 85 c0	 test	 rax, rax
  0002b	7e 4a		 jle	 SHORT $LN20@deque_reve
  0002d	0f 1f 00	 npad	 3
$LL7@deque_reve:

; 531  :         /* Validate that pointers haven't met in the middle */
; 532  :         assert(leftblock != rightblock || leftindex < rightindex);
; 533  : 
; 534  :         /* Swap */
; 535  :         tmp = leftblock->data[leftindex];

  00030	49 8b 54 d9 10	 mov	 rdx, QWORD PTR [r9+rbx*8+16]

; 536  :         leftblock->data[leftindex] = rightblock->data[rightindex];

  00035	4b 8b 4c c2 10	 mov	 rcx, QWORD PTR [r10+r8*8+16]

; 537  :         rightblock->data[rightindex] = tmp;
; 538  : 
; 539  :         /* Advance left block/index pair */
; 540  :         leftindex++;

  0003a	48 ff c3	 inc	 rbx
  0003d	49 89 4c d9 08	 mov	 QWORD PTR [r9+rbx*8+8], rcx
  00042	4b 89 54 c2 10	 mov	 QWORD PTR [r10+r8*8+16], rdx

; 541  :         if (leftindex == BLOCKLEN) {

  00047	48 83 fb 3e	 cmp	 rbx, 62			; 0000003eH
  0004b	75 0b		 jne	 SHORT $LN4@deque_reve

; 542  :             if (leftblock->rightlink == NULL)

  0004d	4d 8b 49 08	 mov	 r9, QWORD PTR [r9+8]
  00051	4d 85 c9	 test	 r9, r9
  00054	74 21		 je	 SHORT $LN20@deque_reve

; 543  :                 break;
; 544  :             leftblock = leftblock->rightlink;
; 545  :             leftindex = 0;

  00056	33 db		 xor	 ebx, ebx
$LN4@deque_reve:

; 546  :         }
; 547  : 
; 548  :         /* Step backwards with the right block/index pair */
; 549  :         rightindex--;

  00058	49 ff c8	 dec	 r8

; 550  :         if (rightindex == -1) {

  0005b	49 83 f8 ff	 cmp	 r8, -1
  0005f	75 0e		 jne	 SHORT $LN6@deque_reve

; 551  :             if (rightblock->leftlink == NULL)

  00061	4d 8b 12	 mov	 r10, QWORD PTR [r10]
  00064	4d 85 d2	 test	 r10, r10
  00067	74 0e		 je	 SHORT $LN20@deque_reve

; 552  :                 break;
; 553  :             rightblock = rightblock->leftlink;
; 554  :             rightindex = BLOCKLEN - 1;

  00069	41 b8 3d 00 00
	00		 mov	 r8d, 61			; 0000003dH
$LN6@deque_reve:

; 527  :     Py_ssize_t i;
; 528  :     PyObject *tmp;
; 529  : 
; 530  :     for (i=0 ; i<n ; i++) {

  0006f	49 ff c3	 inc	 r11
  00072	4c 3b d8	 cmp	 r11, rax
  00075	7c b9		 jl	 SHORT $LL7@deque_reve
$LN20@deque_reve:

; 555  :         }
; 556  :     }
; 557  :     Py_RETURN_NONE;

  00077	e8 00 00 00 00	 call	 _Py_PXCTX
  0007c	85 c0		 test	 eax, eax
  0007e	75 48		 jne	 SHORT $LN18@deque_reve
  00080	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  00087	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0008e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00095	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0009b	4c 8b cb	 mov	 r9, rbx
  0009e	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000a6	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ab	85 c0		 test	 eax, eax
  000ad	75 09		 jne	 SHORT $LN10@deque_reve
  000af	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  000b6	74 07		 je	 SHORT $LN21@deque_reve
$LN10@deque_reve:
  000b8	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN21@deque_reve:
  000bf	48 8b c3	 mov	 rax, rbx

; 558  : }

  000c2	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c6	5b		 pop	 rbx
  000c7	c3		 ret	 0
$LN18@deque_reve:

; 555  :         }
; 556  :     }
; 557  :     Py_RETURN_NONE;

  000c8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 558  : }

  000cf	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d3	5b		 pop	 rbx
  000d4	c3		 ret	 0
deque_reverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@NMAKCLDI@deque?5mutated?5during?5iteration?$AA@ ; `string'
EXTRN	PyExc_RuntimeError:QWORD
EXTRN	PyLong_FromSsize_t:PROC
EXTRN	PyObject_RichCompareBool:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_count DD imagerel deque_count
	DD	imagerel deque_count+193
	DD	imagerel $unwind$deque_count
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_count DD 0c1c01H
	DD	0c641cH
	DD	0b541cH
	DD	0a341cH
	DD	0f018321cH
	DD	0d014e016H
	DD	07010c012H
xdata	ENDS
;	COMDAT ??_C@_0BP@NMAKCLDI@deque?5mutated?5during?5iteration?$AA@
CONST	SEGMENT
??_C@_0BP@NMAKCLDI@deque?5mutated?5during?5iteration?$AA@ DB 'deque mutat'
	DB	'ed during iteration', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT deque_count
_TEXT	SEGMENT
deque$ = 80
v$ = 88
deque_count PROC					; COMDAT

; 565  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	41 56		 push	 r14
  00016	41 57		 push	 r15
  00018	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 566  :     block *leftblock = deque->leftblock;
; 567  :     Py_ssize_t leftindex = deque->leftindex;
; 568  :     Py_ssize_t n = deque->len;

  0001c	4c 8b a9 80 00
	00 00		 mov	 r13, QWORD PTR [rcx+128]
  00023	48 8b 79 60	 mov	 rdi, QWORD PTR [rcx+96]
  00027	48 8b 59 70	 mov	 rbx, QWORD PTR [rcx+112]

; 569  :     Py_ssize_t i;
; 570  :     Py_ssize_t count = 0;
; 571  :     PyObject *item;
; 572  :     long start_state = deque->state;

  0002b	44 8b b1 90 00
	00 00		 mov	 r14d, DWORD PTR [rcx+144]
  00032	33 ed		 xor	 ebp, ebp

; 573  :     int cmp;
; 574  : 
; 575  :     for (i=0 ; i<n ; i++) {

  00034	33 f6		 xor	 esi, esi
  00036	4c 8b fa	 mov	 r15, rdx
  00039	4c 8b e1	 mov	 r12, rcx
  0003c	4d 85 ed	 test	 r13, r13
  0003f	7e 44		 jle	 SHORT $LN15@deque_coun
$LL9@deque_coun:

; 576  :         item = leftblock->data[leftindex];
; 577  :         cmp = PyObject_RichCompareBool(item, v, Py_EQ);

  00041	48 8b 4c df 10	 mov	 rcx, QWORD PTR [rdi+rbx*8+16]
  00046	41 b8 02 00 00
	00		 mov	 r8d, 2
  0004c	49 8b d7	 mov	 rdx, r15
  0004f	e8 00 00 00 00	 call	 PyObject_RichCompareBool

; 578  :         if (cmp > 0)

  00054	85 c0		 test	 eax, eax
  00056	7e 05		 jle	 SHORT $LN17@deque_coun

; 579  :             count++;

  00058	48 ff c5	 inc	 rbp
  0005b	eb 02		 jmp	 SHORT $LN4@deque_coun
$LN17@deque_coun:

; 580  :         else if (cmp < 0)

  0005d	78 5e		 js	 SHORT $LN13@deque_coun
$LN4@deque_coun:

; 581  :             return NULL;
; 582  : 
; 583  :         if (start_state != deque->state) {

  0005f	45 3b b4 24 90
	00 00 00	 cmp	 r14d, DWORD PTR [r12+144]
  00067	75 41		 jne	 SHORT $LN14@deque_coun

; 587  :         }
; 588  : 
; 589  :         /* Advance left block/index pair */
; 590  :         leftindex++;

  00069	48 ff c3	 inc	 rbx

; 591  :         if (leftindex == BLOCKLEN) {

  0006c	48 83 fb 3e	 cmp	 rbx, 62			; 0000003eH
  00070	75 0b		 jne	 SHORT $LN8@deque_coun

; 592  :             if (leftblock->rightlink == NULL)  /* can occur when i==n-1 */

  00072	48 8b 7f 08	 mov	 rdi, QWORD PTR [rdi+8]
  00076	48 85 ff	 test	 rdi, rdi
  00079	74 0a		 je	 SHORT $LN15@deque_coun

; 593  :                 break;
; 594  :             leftblock = leftblock->rightlink;
; 595  :             leftindex = 0;

  0007b	33 db		 xor	 ebx, ebx
$LN8@deque_coun:

; 573  :     int cmp;
; 574  : 
; 575  :     for (i=0 ; i<n ; i++) {

  0007d	48 ff c6	 inc	 rsi
  00080	49 3b f5	 cmp	 rsi, r13
  00083	7c bc		 jl	 SHORT $LL9@deque_coun
$LN15@deque_coun:

; 596  :         }
; 597  :     }
; 598  :     return PyLong_FromSsize_t(count);

  00085	48 8b cd	 mov	 rcx, rbp
  00088	e8 00 00 00 00	 call	 PyLong_FromSsize_t
$LN10@deque_coun:

; 599  : }

  0008d	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00092	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  00097	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  0009c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a0	41 5f		 pop	 r15
  000a2	41 5e		 pop	 r14
  000a4	41 5d		 pop	 r13
  000a6	41 5c		 pop	 r12
  000a8	5f		 pop	 rdi
  000a9	c3		 ret	 0
$LN14@deque_coun:

; 584  :             PyErr_SetString(PyExc_RuntimeError,
; 585  :                             "deque mutated during iteration");

  000aa	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  000b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@NMAKCLDI@deque?5mutated?5during?5iteration?$AA@
  000b8	e8 00 00 00 00	 call	 PyErr_SetString
$LN13@deque_coun:

; 586  :             return NULL;

  000bd	33 c0		 xor	 eax, eax
  000bf	eb cc		 jmp	 SHORT $LN10@deque_coun
deque_count ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT deque_len
_TEXT	SEGMENT
deque$ = 8
deque_len PROC						; COMDAT

; 607  :     return deque->len;

  00000	48 8b 81 80 00
	00 00		 mov	 rax, QWORD PTR [rcx+128]

; 608  : }

  00007	c3		 ret	 0
deque_len ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@IJIGOMJA@deque?5mutated?5during?5remove?$CI?$CJ?4?$AA@ ; `string'
PUBLIC	??_C@_0CA@NMPFEAEC@deque?4remove?$CIx?$CJ?3?5x?5not?5in?5deque?$AA@ ; `string'
EXTRN	PyExc_ValueError:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$deque_remove DD imagerel deque_remove
	DD	imagerel deque_remove+297
	DD	imagerel $unwind$deque_remove
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_remove DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
;	COMDAT ??_C@_0BP@IJIGOMJA@deque?5mutated?5during?5remove?$CI?$CJ?4?$AA@
CONST	SEGMENT
??_C@_0BP@IJIGOMJA@deque?5mutated?5during?5remove?$CI?$CJ?4?$AA@ DB 'dequ'
	DB	'e mutated during remove().', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@NMPFEAEC@deque?4remove?$CIx?$CJ?3?5x?5not?5in?5deque?$AA@
CONST	SEGMENT
??_C@_0CA@NMPFEAEC@deque?4remove?$CIx?$CJ?3?5x?5not?5in?5deque?$AA@ DB 'd'
	DB	'eque.remove(x): x not in deque', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_collectionsmodule.c
CONST	ENDS
;	COMDAT deque_remove
_TEXT	SEGMENT
deque$ = 64
value$ = 72
deque_remove PROC					; COMDAT

; 612  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 613  :     Py_ssize_t i, n=deque->len;

  00014	48 8b b1 80 00
	00 00		 mov	 rsi, QWORD PTR [rcx+128]

; 614  : 
; 615  :     for (i=0 ; i<n ; i++) {

  0001b	33 db		 xor	 ebx, ebx
  0001d	48 8b ea	 mov	 rbp, rdx
  00020	48 8b f9	 mov	 rdi, rcx
  00023	48 85 f6	 test	 rsi, rsi
  00026	7e 4a		 jle	 SHORT $LN6@deque_remo
  00028	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL8@deque_remo:

; 616  :         PyObject *item = deque->leftblock->data[deque->leftindex];

  00030	48 8b 4f 70	 mov	 rcx, QWORD PTR [rdi+112]
  00034	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]

; 617  :         int cmp = PyObject_RichCompareBool(item, value, Py_EQ);

  00038	41 b8 02 00 00
	00		 mov	 r8d, 2
  0003e	48 8b 4c c8 10	 mov	 rcx, QWORD PTR [rax+rcx*8+16]
  00043	48 8b d5	 mov	 rdx, rbp
  00046	e8 00 00 00 00	 call	 PyObject_RichCompareBool

; 618  : 
; 619  :         if (deque->len != n) {

  0004b	48 39 b7 80 00
	00 00		 cmp	 QWORD PTR [rdi+128], rsi
  00052	0f 85 be 00 00
	00		 jne	 $LN16@deque_remo

; 635  :         }
; 636  :         _deque_rotate(deque, -1);

  00058	48 8b cf	 mov	 rcx, rdi
  0005b	85 c0		 test	 eax, eax
  0005d	7f 47		 jg	 SHORT $LN17@deque_remo

; 631  :         }
; 632  :         else if (cmp < 0) {

  0005f	78 3b		 js	 SHORT $LN18@deque_remo

; 635  :         }
; 636  :         _deque_rotate(deque, -1);

  00061	48 83 ca ff	 or	 rdx, -1
  00065	e8 00 00 00 00	 call	 _deque_rotate
  0006a	48 ff c3	 inc	 rbx
  0006d	48 3b de	 cmp	 rbx, rsi
  00070	7c be		 jl	 SHORT $LL8@deque_remo
$LN6@deque_remo:

; 637  :     }
; 638  :     PyErr_SetString(PyExc_ValueError, "deque.remove(x): x not in deque");

  00072	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00079	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@NMPFEAEC@deque?4remove?$CIx?$CJ?3?5x?5not?5in?5deque?$AA@
$LN21@deque_remo:
  00080	e8 00 00 00 00	 call	 PyErr_SetString
$LN20@deque_remo:

; 639  :     return NULL;

  00085	33 c0		 xor	 eax, eax
$LN9@deque_remo:

; 640  : }

  00087	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0008c	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00091	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00096	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0009a	5f		 pop	 rdi
  0009b	c3		 ret	 0
$LN18@deque_remo:

; 633  :             _deque_rotate(deque, i);

  0009c	48 8b d3	 mov	 rdx, rbx
  0009f	e8 00 00 00 00	 call	 _deque_rotate

; 634  :             return NULL;

  000a4	eb df		 jmp	 SHORT $LN20@deque_remo
$LN17@deque_remo:

; 623  :         }
; 624  :         if (cmp > 0) {
; 625  :             PyObject *tgt = deque_popleft(deque, NULL);

  000a6	33 d2		 xor	 edx, edx
  000a8	e8 00 00 00 00	 call	 deque_popleft

; 626  :             assert (tgt != NULL);
; 627  :             Py_DECREF(tgt);

  000ad	48 8b c8	 mov	 rcx, rax
  000b0	e8 00 00 00 00	 call	 _Py_DecRef

; 628  :             if (_deque_rotate(deque, i) == -1)

  000b5	48 8b d3	 mov	 rdx, rbx
  000b8	48 8b cf	 mov	 rcx, rdi
  000bb	e8 00 00 00 00	 call	 _deque_rotate
  000c0	83 f8 ff	 cmp	 eax, -1

; 629  :                 return NULL;

  000c3	74 c0		 je	 SHORT $LN20@deque_remo

; 630  :             Py_RETURN_NONE;

  000c5	e8 00 00 00 00	 call	 _Py_PXCTX
  000ca	85 c0		 test	 eax, eax
  000cc	75 3c		 jne	 SHORT $LN12@deque_remo
  000ce	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  000d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000e3	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000e9	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000f1	e8 00 00 00 00	 call	 _PyParallel_Guard
  000f6	85 c0		 test	 eax, eax
  000f8	75 09		 jne	 SHORT $LN11@deque_remo
  000fa	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00101	74 07		 je	 SHORT $LN12@deque_remo
$LN11@deque_remo:
  00103	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN12@deque_remo:
  0010a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00111	e9 71 ff ff ff	 jmp	 $LN9@deque_remo
$LN16@deque_remo:

; 620  :             PyErr_SetString(PyExc_IndexError,
; 621  :                 "deque mutated during remove().");

  00116	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
  0011d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@IJIGOMJA@deque?5mutated?5during?5remove?$CI?$CJ?4?$AA@

; 622  :             return NULL;

  00124	e9 57 ff ff ff	 jmp	 $LN21@deque_remo
deque_remove ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$deque_clear DD imagerel deque_clear
	DD	imagerel deque_clear+23
	DD	imagerel $unwind$deque_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$deque_clear DD imagerel deque_clear+23
	DD	imagerel deque_clear+161
	DD	imagerel $chain$0$deque_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$deque_clear DD imagerel deque_clear+161
	DD	imagerel deque_clear+167
	DD	imagerel $chain$1$deque_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$deque_clear DD 021H
	DD	imagerel deque_clear
	DD	imagerel deque_clear+23
	DD	imagerel $unwind$deque_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$deque_clear DD 020521H
	DD	083405H
	DD	imagerel deque_clear
	DD	imagerel deque_clear+23
	DD	imagerel $unwind$deque_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_clear DD 020601H
	DD	070025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_collectionsmodule.c
xdata	ENDS
;	COMDAT deque_clear
_TEXT	SEGMENT
deque$ = 64
deque_clear PROC					; COMDAT

; 647  : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 648  :     PyObject *item;
; 649  : 
; 650  :     while (deque->len) {

  00006	48 83 b9 80 00
	00 00 00	 cmp	 QWORD PTR [rcx+128], 0
  0000e	48 8b f9	 mov	 rdi, rcx
  00011	0f 84 8a 00 00
	00		 je	 $LN1@deque_clea
  00017	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0001c	0f 1f 40 00	 npad	 4
$LL2@deque_clea:

; 651  :         item = deque_pop(deque, NULL);

  00020	33 d2		 xor	 edx, edx
  00022	48 8b cf	 mov	 rcx, rdi
  00025	e8 00 00 00 00	 call	 deque_pop
  0002a	48 8b d8	 mov	 rbx, rax

; 652  :         assert (item != NULL);
; 653  :         Py_DECREF(item);

  0002d	e8 00 00 00 00	 call	 _Py_PXCTX
  00032	85 c0		 test	 eax, eax
  00034	75 5c		 jne	 SHORT $LN15@deque_clea
  00036	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0003a	a8 20		 test	 al, 32			; 00000020H
  0003c	75 4c		 jne	 SHORT $LN9@deque_clea
  0003e	84 c0		 test	 al, al
  00040	78 48		 js	 SHORT $LN9@deque_clea
  00042	a8 02		 test	 al, 2
  00044	75 4c		 jne	 SHORT $LN15@deque_clea
  00046	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0004a	75 46		 jne	 SHORT $LN15@deque_clea
  0004c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00053	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0005a	4c 8b cb	 mov	 r9, rbx
  0005d	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00063	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0006b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00070	48 8b cb	 mov	 rcx, rbx
  00073	85 c0		 test	 eax, eax
  00075	74 07		 je	 SHORT $LN14@deque_clea
  00077	e8 00 00 00 00	 call	 _Px_Dealloc
  0007c	eb 14		 jmp	 SHORT $LN15@deque_clea
$LN14@deque_clea:
  0007e	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00082	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00088	eb 08		 jmp	 SHORT $LN15@deque_clea
$LN9@deque_clea:
  0008a	48 8b cb	 mov	 rcx, rbx
  0008d	e8 00 00 00 00	 call	 Px_DecRef
$LN15@deque_clea:

; 648  :     PyObject *item;
; 649  : 
; 650  :     while (deque->len) {

  00092	48 83 bf 80 00
	00 00 00	 cmp	 QWORD PTR [rdi+128], 0
  0009a	75 84		 jne	 SHORT $LL2@deque_clea
  0009c	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN1@deque_clea:

; 654  :     }
; 655  :     assert(deque->leftblock == deque->rightblock &&
; 656  :            deque->leftindex - 1 == deque->rightindex &&
; 657  :            deque->len == 0);
; 658  : }

  000a1	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a5	5f		 pop	 rdi
  000a6	c3		 ret	 0
deque_clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@LBMBPNIL@deque?5index?5out?5of?5range?$AA@ ; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$deque_item DD imagerel deque_item
	DD	imagerel deque_item+38
	DD	imagerel $unwind$deque_item
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$deque_item DD imagerel deque_item+38
	DD	imagerel deque_item+87
	DD	imagerel $chain$0$deque_item
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$deque_item DD imagerel deque_item+87
	DD	imagerel deque_item+221
	DD	imagerel $chain$1$deque_item
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$deque_item DD imagerel deque_item+221
	DD	imagerel deque_item+298
	DD	imagerel $chain$2$deque_item
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$deque_item DD imagerel deque_item+298
	DD	imagerel deque_item+324
	DD	imagerel $chain$3$deque_item
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$deque_item DD 021H
	DD	imagerel deque_item
	DD	imagerel deque_item+38
	DD	imagerel $unwind$deque_item
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$deque_item DD 021H
	DD	imagerel deque_item+38
	DD	imagerel deque_item+87
	DD	imagerel $chain$0$deque_item
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$deque_item DD 020521H
	DD	067405H
	DD	imagerel deque_item+38
	DD	imagerel deque_item+87
	DD	imagerel $chain$0$deque_item
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$deque_item DD 020521H
	DD	083405H
	DD	imagerel deque_item
	DD	imagerel deque_item+38
	DD	imagerel $unwind$deque_item
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_item DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0BJ@LBMBPNIL@deque?5index?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0BJ@LBMBPNIL@deque?5index?5out?5of?5range?$AA@ DB 'deque index out '
	DB	'of range', 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_collectionsmodule.c
CONST	ENDS
;	COMDAT deque_item
_TEXT	SEGMENT
deque$ = 64
i$ = 72
deque_item PROC						; COMDAT

; 662  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	4c 8b ca	 mov	 r9, rdx
  00007	4c 8b d1	 mov	 r10, rcx

; 663  :     block *b;
; 664  :     PyObject *item;
; 665  :     Py_ssize_t n, index=i;

  0000a	4c 8b da	 mov	 r11, rdx

; 666  : 
; 667  :     if (i < 0 || i >= deque->len) {

  0000d	48 85 d2	 test	 rdx, rdx
  00010	0f 88 14 01 00
	00		 js	 $LN11@deque_item
  00016	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  0001d	48 3b d1	 cmp	 rdx, rcx
  00020	0f 8d 04 01 00
	00		 jge	 $LN11@deque_item

; 671  :     }
; 672  : 
; 673  :     if (i == 0) {

  00026	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0002b	48 85 d2	 test	 rdx, rdx
  0002e	75 0d		 jne	 SHORT $LN10@deque_item

; 674  :         i = deque->leftindex;

  00030	4d 8b 4a 70	 mov	 r9, QWORD PTR [r10+112]

; 675  :         b = deque->leftblock;

  00034	49 8b 42 60	 mov	 rax, QWORD PTR [r10+96]
  00038	e9 a0 00 00 00	 jmp	 $LN23@deque_item
$LN10@deque_item:

; 676  :     } else if (i == deque->len - 1) {

  0003d	48 8d 41 ff	 lea	 rax, QWORD PTR [rcx-1]
  00041	48 3b d0	 cmp	 rdx, rax
  00044	75 0d		 jne	 SHORT $LN8@deque_item

; 677  :         i = deque->rightindex;

  00046	4d 8b 4a 78	 mov	 r9, QWORD PTR [r10+120]

; 678  :         b = deque->rightblock;

  0004a	49 8b 42 68	 mov	 rax, QWORD PTR [r10+104]

; 679  :     } else {

  0004e	e9 8a 00 00 00	 jmp	 $LN23@deque_item
$LN8@deque_item:

; 680  :         i += deque->leftindex;

  00053	49 8b 5a 70	 mov	 rbx, QWORD PTR [r10+112]
  00057	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi

; 681  :         n = i / BLOCKLEN;

  0005c	48 bf 09 21 84
	10 42 08 21 84	 mov	 rdi, -8925843906633654007 ; 8421084210842109H
  00066	4c 03 cb	 add	 r9, rbx
  00069	48 8b c7	 mov	 rax, rdi
  0006c	49 f7 e9	 imul	 r9
  0006f	4d 8d 04 11	 lea	 r8, QWORD PTR [r9+rdx]
  00073	49 c1 f8 05	 sar	 r8, 5
  00077	49 8b c0	 mov	 rax, r8
  0007a	48 c1 e8 3f	 shr	 rax, 63			; 0000003fH
  0007e	4c 03 c0	 add	 r8, rax

; 682  :         i %= BLOCKLEN;

  00081	49 8b c0	 mov	 rax, r8
  00084	48 6b c0 c2	 imul	 rax, -62		; ffffffffffffffc2H
  00088	4c 03 c8	 add	 r9, rax

; 683  :         if (index < (deque->len >> 1)) {

  0008b	48 8b c1	 mov	 rax, rcx
  0008e	48 d1 f8	 sar	 rax, 1
  00091	4c 3b d8	 cmp	 r11, rax
  00094	7d 15		 jge	 SHORT $LN6@deque_item

; 684  :             b = deque->leftblock;

  00096	49 8b 42 60	 mov	 rax, QWORD PTR [r10+96]

; 685  :             while (n--)

  0009a	4d 85 c0	 test	 r8, r8
  0009d	74 39		 je	 SHORT $LN25@deque_item
  0009f	90		 npad	 1
$LL5@deque_item:
  000a0	49 ff c8	 dec	 r8

; 686  :                 b = b->rightlink;

  000a3	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000a7	75 f7		 jne	 SHORT $LL5@deque_item

; 687  :         } else {

  000a9	eb 2d		 jmp	 SHORT $LN25@deque_item
$LN6@deque_item:

; 688  :             n = (deque->leftindex + deque->len - 1) / BLOCKLEN - n;

  000ab	48 8d 4c 0b ff	 lea	 rcx, QWORD PTR [rbx+rcx-1]
  000b0	48 8b c7	 mov	 rax, rdi
  000b3	48 f7 e9	 imul	 rcx
  000b6	48 03 d1	 add	 rdx, rcx
  000b9	48 c1 fa 05	 sar	 rdx, 5
  000bd	48 8b c2	 mov	 rax, rdx
  000c0	48 c1 e8 3f	 shr	 rax, 63			; 0000003fH
  000c4	48 03 d0	 add	 rdx, rax

; 689  :             b = deque->rightblock;

  000c7	49 8b 42 68	 mov	 rax, QWORD PTR [r10+104]
  000cb	49 2b d0	 sub	 rdx, r8

; 690  :             while (n--)

  000ce	74 08		 je	 SHORT $LN25@deque_item
$LL2@deque_item:
  000d0	48 ff ca	 dec	 rdx

; 691  :                 b = b->leftlink;

  000d3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d6	75 f8		 jne	 SHORT $LL2@deque_item
$LN25@deque_item:
  000d8	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
$LN23@deque_item:

; 692  :         }
; 693  :     }
; 694  :     item = b->data[i];

  000dd	4a 8b 5c c8 10	 mov	 rbx, QWORD PTR [rax+r9*8+16]

; 695  :     Py_INCREF(item);

  000e2	e8 00 00 00 00	 call	 _Py_PXCTX
  000e7	85 c0		 test	 eax, eax
  000e9	75 32		 jne	 SHORT $LN16@deque_item
  000eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000f9	4c 8b cb	 mov	 r9, rbx
  000fc	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00102	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0010a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0010f	85 c0		 test	 eax, eax
  00111	75 06		 jne	 SHORT $LN15@deque_item
  00113	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00117	74 04		 je	 SHORT $LN16@deque_item
$LN15@deque_item:
  00119	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN16@deque_item:

; 696  :     return item;

  0011d	48 8b c3	 mov	 rax, rbx
  00120	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 697  : }

  00125	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00129	c3		 ret	 0
$LN11@deque_item:

; 668  :         PyErr_SetString(PyExc_IndexError,
; 669  :                         "deque index out of range");

  0012a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
  00131	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@LBMBPNIL@deque?5index?5out?5of?5range?$AA@
  00138	e8 00 00 00 00	 call	 PyErr_SetString

; 670  :         return NULL;

  0013d	33 c0		 xor	 eax, eax

; 697  : }

  0013f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00143	c3		 ret	 0
deque_item ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_del_item DD imagerel deque_del_item
	DD	imagerel deque_del_item+81
	DD	imagerel $unwind$deque_del_item
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_del_item DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT deque_del_item
_TEXT	SEGMENT
deque$ = 48
i$ = 56
deque_del_item PROC					; COMDAT

; 708  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fa	 mov	 rdi, rdx

; 709  :     PyObject *item;
; 710  : 
; 711  :     assert (i >= 0 && i < deque->len);
; 712  :     if (_deque_rotate(deque, -i) == -1)

  0000d	48 f7 da	 neg	 rdx
  00010	48 8b d9	 mov	 rbx, rcx
  00013	e8 00 00 00 00	 call	 _deque_rotate
  00018	83 f8 ff	 cmp	 eax, -1
  0001b	75 0d		 jne	 SHORT $LN1@deque_del_

; 713  :         return -1;

  0001d	0b c0		 or	 eax, eax

; 720  : }

  0001f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00024	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00028	5f		 pop	 rdi
  00029	c3		 ret	 0
$LN1@deque_del_:

; 714  : 
; 715  :     item = deque_popleft(deque, NULL);

  0002a	33 d2		 xor	 edx, edx
  0002c	48 8b cb	 mov	 rcx, rbx
  0002f	e8 00 00 00 00	 call	 deque_popleft

; 716  :     assert (item != NULL);
; 717  :     Py_DECREF(item);

  00034	48 8b c8	 mov	 rcx, rax
  00037	e8 00 00 00 00	 call	 _Py_DecRef

; 718  : 
; 719  :     return _deque_rotate(deque, i);

  0003c	48 8b d7	 mov	 rdx, rdi
  0003f	48 8b cb	 mov	 rcx, rbx

; 720  : }

  00042	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00047	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004b	5f		 pop	 rdi
  0004c	e9 00 00 00 00	 jmp	 _deque_rotate
deque_del_item ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_ass_item DD imagerel deque_ass_item
	DD	imagerel deque_ass_item+295
	DD	imagerel $unwind$deque_ass_item
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_ass_item DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT deque_ass_item
_TEXT	SEGMENT
deque$ = 48
i$ = 56
v$ = 64
deque_ass_item PROC					; COMDAT

; 724  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b d9	 mov	 rbx, rcx

; 725  :     PyObject *old_value;
; 726  :     block *b;
; 727  :     Py_ssize_t n, len=deque->len, halflen=(len+1)>>1, index=i;

  00012	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  00019	49 8b f0	 mov	 rsi, r8
  0001c	48 8b fa	 mov	 rdi, rdx
  0001f	4c 8b ca	 mov	 r9, rdx

; 728  : 
; 729  :     if (i < 0 || i >= len) {

  00022	48 85 d2	 test	 rdx, rdx
  00025	0f 88 d6 00 00
	00		 js	 $LN8@deque_ass_
  0002b	48 3b d1	 cmp	 rdx, rcx
  0002e	0f 8d cd 00 00
	00		 jge	 $LN8@deque_ass_

; 732  :         return -1;
; 733  :     }
; 734  :     if (v == NULL)

  00034	4d 85 c0	 test	 r8, r8
  00037	75 17		 jne	 SHORT $LN7@deque_ass_

; 735  :         return deque_del_item(deque, i);

  00039	48 8b cb	 mov	 rcx, rbx

; 755  : }

  0003c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00041	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00046	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004a	5f		 pop	 rdi
  0004b	e9 00 00 00 00	 jmp	 deque_del_item
$LN7@deque_ass_:

; 736  : 
; 737  :     i += deque->leftindex;

  00050	4c 8b 53 70	 mov	 r10, QWORD PTR [rbx+112]

; 738  :     n = i / BLOCKLEN;

  00054	49 bb 09 21 84
	10 42 08 21 84	 mov	 r11, -8925843906633654007 ; 8421084210842109H
  0005e	49 03 fa	 add	 rdi, r10
  00061	49 8b c3	 mov	 rax, r11
  00064	48 f7 ef	 imul	 rdi
  00067	4c 8d 04 17	 lea	 r8, QWORD PTR [rdi+rdx]
  0006b	49 c1 f8 05	 sar	 r8, 5
  0006f	49 8b c0	 mov	 rax, r8
  00072	48 c1 e8 3f	 shr	 rax, 63			; 0000003fH
  00076	4c 03 c0	 add	 r8, rax

; 739  :     i %= BLOCKLEN;

  00079	49 8b c0	 mov	 rax, r8
  0007c	48 6b c0 c2	 imul	 rax, -62		; ffffffffffffffc2H
  00080	48 03 f8	 add	 rdi, rax
  00083	48 8d 41 01	 lea	 rax, QWORD PTR [rcx+1]
  00087	48 d1 f8	 sar	 rax, 1

; 740  :     if (index <= halflen) {

  0008a	4c 3b c8	 cmp	 r9, rax
  0008d	7f 1c		 jg	 SHORT $LN6@deque_ass_

; 741  :         b = deque->leftblock;

  0008f	48 8b 5b 60	 mov	 rbx, QWORD PTR [rbx+96]

; 742  :         while (n--)

  00093	4d 85 c0	 test	 r8, r8
  00096	74 40		 je	 SHORT $LN16@deque_ass_
  00098	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL5@deque_ass_:
  000a0	49 ff c8	 dec	 r8

; 743  :             b = b->rightlink;

  000a3	48 8b 5b 08	 mov	 rbx, QWORD PTR [rbx+8]
  000a7	75 f7		 jne	 SHORT $LL5@deque_ass_

; 744  :     } else {

  000a9	eb 2d		 jmp	 SHORT $LN16@deque_ass_
$LN6@deque_ass_:

; 745  :         n = (deque->leftindex + len - 1) / BLOCKLEN - n;
; 746  :         b = deque->rightblock;

  000ab	48 8b 5b 68	 mov	 rbx, QWORD PTR [rbx+104]
  000af	49 8d 4c 0a ff	 lea	 rcx, QWORD PTR [r10+rcx-1]
  000b4	49 8b c3	 mov	 rax, r11
  000b7	48 f7 e9	 imul	 rcx
  000ba	48 03 d1	 add	 rdx, rcx
  000bd	48 c1 fa 05	 sar	 rdx, 5
  000c1	48 8b c2	 mov	 rax, rdx
  000c4	48 c1 e8 3f	 shr	 rax, 63			; 0000003fH
  000c8	48 03 d0	 add	 rdx, rax
  000cb	49 2b d0	 sub	 rdx, r8

; 747  :         while (n--)

  000ce	74 08		 je	 SHORT $LN16@deque_ass_
$LL2@deque_ass_:
  000d0	48 ff ca	 dec	 rdx

; 748  :             b = b->leftlink;

  000d3	48 8b 1b	 mov	 rbx, QWORD PTR [rbx]
  000d6	75 f8		 jne	 SHORT $LL2@deque_ass_
$LN16@deque_ass_:

; 749  :     }
; 750  :     Py_INCREF(v);

  000d8	48 8b ce	 mov	 rcx, rsi
  000db	e8 00 00 00 00	 call	 _Py_IncRef

; 751  :     old_value = b->data[i];

  000e0	48 8b 4c fb 10	 mov	 rcx, QWORD PTR [rbx+rdi*8+16]

; 752  :     b->data[i] = v;

  000e5	48 89 74 fb 10	 mov	 QWORD PTR [rbx+rdi*8+16], rsi

; 753  :     Py_DECREF(old_value);

  000ea	e8 00 00 00 00	 call	 _Py_DecRef

; 754  :     return 0;

  000ef	33 c0		 xor	 eax, eax

; 755  : }

  000f1	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000f6	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000fb	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ff	5f		 pop	 rdi
  00100	c3		 ret	 0
$LN8@deque_ass_:

; 730  :         PyErr_SetString(PyExc_IndexError,
; 731  :                         "deque index out of range");

  00101	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
  00108	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@LBMBPNIL@deque?5index?5out?5of?5range?$AA@
  0010f	e8 00 00 00 00	 call	 PyErr_SetString

; 755  : }

  00114	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00119	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0011e	83 c8 ff	 or	 eax, -1
  00121	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00125	5f		 pop	 rdi
  00126	c3		 ret	 0
deque_ass_item ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$deque_clearmethod DD imagerel deque_clearmethod
	DD	imagerel deque_clearmethod+105
	DD	imagerel $unwind$deque_clearmethod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_clearmethod DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_collectionsmodule.c
xdata	ENDS
;	COMDAT deque_clearmethod
_TEXT	SEGMENT
deque$ = 64
deque_clearmethod PROC					; COMDAT

; 759  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 760  :     deque_clear(deque);

  00006	e8 00 00 00 00	 call	 deque_clear

; 761  :     Py_RETURN_NONE;

  0000b	e8 00 00 00 00	 call	 _Py_PXCTX
  00010	85 c0		 test	 eax, eax
  00012	75 48		 jne	 SHORT $LN7@deque_clea@2
  00014	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00029	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0002f	4c 8b cb	 mov	 r9, rbx
  00032	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0003a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003f	85 c0		 test	 eax, eax
  00041	75 09		 jne	 SHORT $LN3@deque_clea@2
  00043	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0004a	74 07		 je	 SHORT $LN9@deque_clea@2
$LN3@deque_clea@2:
  0004c	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN9@deque_clea@2:
  00053	48 8b c3	 mov	 rax, rbx

; 762  : }

  00056	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005a	5b		 pop	 rbx
  0005b	c3		 ret	 0
$LN7@deque_clea@2:

; 761  :     Py_RETURN_NONE;

  0005c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 762  : }

  00063	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00067	5b		 pop	 rbx
  00068	c3		 ret	 0
deque_clearmethod ENDP
_TEXT	ENDS
EXTRN	PyObject_ClearWeakRefs:PROC
EXTRN	PyObject_GC_UnTrack:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_dealloc DD imagerel deque_dealloc
	DD	imagerel deque_dealloc+85
	DD	imagerel $unwind$deque_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_dealloc DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT deque_dealloc
_TEXT	SEGMENT
deque$ = 48
deque_dealloc PROC					; COMDAT

; 768  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 769  :     PyObject_GC_UnTrack(deque);

  00009	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 770  :     if (deque->weakreflist != NULL)

  0000e	48 83 bb 98 00
	00 00 00	 cmp	 QWORD PTR [rbx+152], 0
  00016	74 08		 je	 SHORT $LN2@deque_deal

; 771  :         PyObject_ClearWeakRefs((PyObject *) deque);

  00018	48 8b cb	 mov	 rcx, rbx
  0001b	e8 00 00 00 00	 call	 PyObject_ClearWeakRefs
$LN2@deque_deal:

; 772  :     if (deque->leftblock != NULL) {

  00020	48 83 7b 60 00	 cmp	 QWORD PTR [rbx+96], 0
  00025	74 11		 je	 SHORT $LN1@deque_deal

; 773  :         deque_clear(deque);

  00027	48 8b cb	 mov	 rcx, rbx
  0002a	e8 00 00 00 00	 call	 deque_clear

; 774  :         assert(deque->leftblock != NULL);
; 775  :         freeblock(deque->leftblock);

  0002f	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00033	e8 00 00 00 00	 call	 freeblock
$LN1@deque_deal:

; 776  :     }
; 777  :     deque->leftblock = NULL;

  00038	33 c0		 xor	 eax, eax

; 778  :     deque->rightblock = NULL;
; 779  :     Py_TYPE(deque)->tp_free(deque);

  0003a	48 8b cb	 mov	 rcx, rbx
  0003d	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax
  00041	48 89 43 68	 mov	 QWORD PTR [rbx+104], rax
  00045	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 780  : }

  00049	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004d	5b		 pop	 rbx
  0004e	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
deque_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@DHFOPNPO@deque_traverse?$AA@		; `string'
PUBLIC	??_C@_0CA@LDKINGDC@?4?4?2Modules?2_collectionsmodule?4c?$AA@ ; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_traverse DD imagerel deque_traverse
	DD	imagerel deque_traverse+193
	DD	imagerel $unwind$deque_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_traverse DD 0c1c01H
	DD	0c641cH
	DD	0b541cH
	DD	0a341cH
	DD	0f018321cH
	DD	0d014e016H
	DD	07010c012H
xdata	ENDS
;	COMDAT ??_C@_0P@DHFOPNPO@deque_traverse?$AA@
CONST	SEGMENT
??_C@_0P@DHFOPNPO@deque_traverse?$AA@ DB 'deque_traverse', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LDKINGDC@?4?4?2Modules?2_collectionsmodule?4c?$AA@
CONST	SEGMENT
??_C@_0CA@LDKINGDC@?4?4?2Modules?2_collectionsmodule?4c?$AA@ DB '..\Modul'
	DB	'es\_collectionsmodule.c', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT deque_traverse
_TEXT	SEGMENT
deque$ = 80
visit$ = 88
arg$ = 96
deque_traverse PROC					; COMDAT

; 784  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	41 56		 push	 r14
  00016	41 57		 push	 r15
  00018	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 785  :     block *b;
; 786  :     PyObject *item;
; 787  :     Py_ssize_t index;
; 788  :     Py_ssize_t indexlo = deque->leftindex;
; 789  : 
; 790  :     for (b = deque->leftblock; b != NULL; b = b->rightlink) {

  0001c	4c 8b 61 60	 mov	 r12, QWORD PTR [rcx+96]
  00020	48 8b 59 70	 mov	 rbx, QWORD PTR [rcx+112]
  00024	4d 8b f0	 mov	 r14, r8
  00027	4c 8b fa	 mov	 r15, rdx
  0002a	4c 8b e9	 mov	 r13, rcx
  0002d	4d 85 e4	 test	 r12, r12
  00030	74 70		 je	 SHORT $LN22@deque_trav
$LL12@deque_trav:

; 791  :         const Py_ssize_t indexhi = b == deque->rightblock ?
; 792  :                                  deque->rightindex :
; 793  :                      BLOCKLEN - 1;

  00032	4d 3b 65 68	 cmp	 r12, QWORD PTR [r13+104]
  00036	75 06		 jne	 SHORT $LN15@deque_trav
  00038	49 8b 6d 78	 mov	 rbp, QWORD PTR [r13+120]
  0003c	eb 05		 jmp	 SHORT $LN16@deque_trav
$LN15@deque_trav:
  0003e	bd 3d 00 00 00	 mov	 ebp, 61			; 0000003dH
$LN16@deque_trav:

; 794  : 
; 795  :         for (index = indexlo; index <= indexhi; ++index) {

  00043	48 3b dd	 cmp	 rbx, rbp
  00046	7f 4e		 jg	 SHORT $LN7@deque_trav
  00048	49 8d 7c dc 10	 lea	 rdi, QWORD PTR [r12+rbx*8+16]
  0004d	0f 1f 00	 npad	 3
$LL9@deque_trav:

; 796  :             item = b->data[index];

  00050	48 8b 37	 mov	 rsi, QWORD PTR [rdi]

; 797  :             Py_VISIT(item);

  00053	e8 00 00 00 00	 call	 _Py_PXCTX
  00058	85 c0		 test	 eax, eax
  0005a	74 1c		 je	 SHORT $LN3@deque_trav
  0005c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@LDKINGDC@?4?4?2Modules?2_collectionsmodule?4c?$AA@
  00063	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@DHFOPNPO@deque_traverse?$AA@
  0006a	45 33 c9	 xor	 r9d, r9d
  0006d	41 b8 1d 03 00
	00		 mov	 r8d, 797		; 0000031dH
  00073	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@deque_trav:
  00078	48 85 f6	 test	 rsi, rsi
  0007b	74 0d		 je	 SHORT $LN5@deque_trav
  0007d	49 8b d6	 mov	 rdx, r14
  00080	48 8b ce	 mov	 rcx, rsi
  00083	41 ff d7	 call	 r15
  00086	85 c0		 test	 eax, eax
  00088	75 1a		 jne	 SHORT $LN13@deque_trav
$LN5@deque_trav:

; 794  : 
; 795  :         for (index = indexlo; index <= indexhi; ++index) {

  0008a	48 ff c3	 inc	 rbx
  0008d	48 83 c7 08	 add	 rdi, 8
  00091	48 3b dd	 cmp	 rbx, rbp
  00094	7e ba		 jle	 SHORT $LL9@deque_trav
$LN7@deque_trav:

; 785  :     block *b;
; 786  :     PyObject *item;
; 787  :     Py_ssize_t index;
; 788  :     Py_ssize_t indexlo = deque->leftindex;
; 789  : 
; 790  :     for (b = deque->leftblock; b != NULL; b = b->rightlink) {

  00096	4d 8b 64 24 08	 mov	 r12, QWORD PTR [r12+8]

; 798  :         }
; 799  :         indexlo = 0;

  0009b	33 db		 xor	 ebx, ebx
  0009d	4d 85 e4	 test	 r12, r12
  000a0	75 90		 jne	 SHORT $LL12@deque_trav
$LN22@deque_trav:

; 800  :     }
; 801  :     return 0;

  000a2	33 c0		 xor	 eax, eax
$LN13@deque_trav:

; 802  : }

  000a4	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000a9	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  000ae	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  000b3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b7	41 5f		 pop	 r15
  000b9	41 5e		 pop	 r14
  000bb	41 5d		 pop	 r13
  000bd	41 5c		 pop	 r12
  000bf	5f		 pop	 rdi
  000c0	c3		 ret	 0
deque_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_02MPEHDMPO@Oi?$AA@			; `string'
PUBLIC	??_C@_01MJMHLOMK@O?$AA@				; `string'
EXTRN	PyObject_CallFunction:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_copy DD imagerel deque_copy
	DD	imagerel deque_copy+69
	DD	imagerel $unwind$deque_copy
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_copy DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_02MPEHDMPO@Oi?$AA@
CONST	SEGMENT
??_C@_02MPEHDMPO@Oi?$AA@ DB 'Oi', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01MJMHLOMK@O?$AA@
CONST	SEGMENT
??_C@_01MJMHLOMK@O?$AA@ DB 'O', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT deque_copy
_TEXT	SEGMENT
deque$ = 64
deque_copy PROC						; COMDAT

; 806  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 807  :     if (((dequeobject *)deque)->maxlen == -1)

  00004	4c 8b 89 88 00
	00 00		 mov	 r9, QWORD PTR [rcx+136]

; 808  :         return PyObject_CallFunction((PyObject *)(Py_TYPE(deque)), "O", deque, NULL);

  0000b	4c 8b c1	 mov	 r8, rcx
  0000e	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  00012	49 83 f9 ff	 cmp	 r9, -1
  00016	75 13		 jne	 SHORT $LN2@deque_copy
  00018	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01MJMHLOMK@O?$AA@
  0001f	45 33 c9	 xor	 r9d, r9d

; 812  : }

  00022	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00026	e9 00 00 00 00	 jmp	 PyObject_CallFunction
$LN2@deque_copy:

; 809  :     else
; 810  :         return PyObject_CallFunction((PyObject *)(Py_TYPE(deque)), "Oi",
; 811  :             deque, ((dequeobject *)deque)->maxlen, NULL);

  0002b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02MPEHDMPO@Oi?$AA@
  00032	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0003b	e8 00 00 00 00	 call	 PyObject_CallFunction

; 812  : }

  00040	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00044	c3		 ret	 0
deque_copy ENDP
_TEXT	ENDS
PUBLIC	??_C@_06HKAIMDEH@O?$CIOn?$CJO?$AA@		; `string'
PUBLIC	??_C@_06GCIGALBM@O?$CIOO?$CJO?$AA@		; `string'
PUBLIC	??_C@_05IEPKLDIK@O?$CIOn?$CJ?$AA@		; `string'
PUBLIC	??_C@_04LJHIBFLN@O?$CIO?$CJ?$AA@		; `string'
EXTRN	Py_BuildValue:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	_PyObject_GetAttrId:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$deque_reduce DD imagerel deque_reduce
	DD	imagerel deque_reduce+476
	DD	imagerel $unwind$deque_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_reduce DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT ??_C@_06HKAIMDEH@O?$CIOn?$CJO?$AA@
CONST	SEGMENT
??_C@_06HKAIMDEH@O?$CIOn?$CJO?$AA@ DB 'O(On)O', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06GCIGALBM@O?$CIOO?$CJO?$AA@
CONST	SEGMENT
??_C@_06GCIGALBM@O?$CIOO?$CJO?$AA@ DB 'O(OO)O', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05IEPKLDIK@O?$CIOn?$CJ?$AA@
CONST	SEGMENT
??_C@_05IEPKLDIK@O?$CIOn?$CJ?$AA@ DB 'O(On)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04LJHIBFLN@O?$CIO?$CJ?$AA@
CONST	SEGMENT
??_C@_04LJHIBFLN@O?$CIO?$CJ?$AA@ DB 'O(O)', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_collectionsmodule.c
CONST	ENDS
;	COMDAT deque_reduce
_TEXT	SEGMENT
deque$ = 64
deque_reduce PROC					; COMDAT

; 818  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 819  :     PyObject *dict, *result, *aslist;
; 820  :     _Py_IDENTIFIER(__dict__);
; 821  : 
; 822  :     dict = _PyObject_GetAttrId((PyObject *)deque, &PyId___dict__);

  0000f	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  00016	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0001f	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId___dict__@?1??deque_reduce@@9@9
  00024	4a 03 14 c0	 add	 rdx, QWORD PTR [rax+r8*8]
  00028	48 8b f9	 mov	 rdi, rcx
  0002b	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00030	48 8b d8	 mov	 rbx, rax

; 823  :     if (dict == NULL)

  00033	48 85 c0	 test	 rax, rax
  00036	75 05		 jne	 SHORT $LN16@deque_redu

; 824  :         PyErr_Clear();

  00038	e8 00 00 00 00	 call	 PyErr_Clear
$LN16@deque_redu:

; 825  :     aslist = PySequence_List((PyObject *)deque);

  0003d	48 8b cf	 mov	 rcx, rdi
  00040	e8 00 00 00 00	 call	 PySequence_List
  00045	48 8b f0	 mov	 rsi, rax

; 826  :     if (aslist == NULL) {

  00048	48 85 c0	 test	 rax, rax
  0004b	0f 85 a0 00 00
	00		 jne	 $LN15@deque_redu

; 827  :         Py_XDECREF(dict);

  00051	48 85 db	 test	 rbx, rbx
  00054	0f 84 85 00 00
	00		 je	 $LN13@deque_redu
  0005a	e8 00 00 00 00	 call	 _Py_PXCTX
  0005f	85 c0		 test	 eax, eax
  00061	75 7c		 jne	 SHORT $LN13@deque_redu
  00063	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00067	a8 20		 test	 al, 32			; 00000020H
  00069	75 6c		 jne	 SHORT $LN23@deque_redu
  0006b	84 c0		 test	 al, al
  0006d	78 68		 js	 SHORT $LN23@deque_redu
  0006f	a8 02		 test	 al, 2
  00071	75 6c		 jne	 SHORT $LN13@deque_redu
  00073	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00077	75 66		 jne	 SHORT $LN13@deque_redu
  00079	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00080	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00087	4c 8b cb	 mov	 r9, rbx
  0008a	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00090	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00098	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009d	48 8b cb	 mov	 rcx, rbx
  000a0	85 c0		 test	 eax, eax
  000a2	74 17		 je	 SHORT $LN28@deque_redu
  000a4	e8 00 00 00 00	 call	 _Px_Dealloc

; 828  :         return NULL;

  000a9	33 c0		 xor	 eax, eax

; 843  :     return result;
; 844  : }

  000ab	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000b0	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000b5	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b9	5f		 pop	 rdi
  000ba	c3		 ret	 0

; 827  :         Py_XDECREF(dict);

$LN28@deque_redu:
  000bb	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000bf	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 828  :         return NULL;

  000c5	33 c0		 xor	 eax, eax

; 843  :     return result;
; 844  : }

  000c7	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000cc	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000d1	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d5	5f		 pop	 rdi
  000d6	c3		 ret	 0

; 827  :         Py_XDECREF(dict);

$LN23@deque_redu:
  000d7	48 8b cb	 mov	 rcx, rbx
  000da	e8 00 00 00 00	 call	 Px_DecRef
$LN13@deque_redu:

; 828  :         return NULL;

  000df	33 c0		 xor	 eax, eax

; 843  :     return result;
; 844  : }

  000e1	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000e6	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000eb	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ef	5f		 pop	 rdi
  000f0	c3		 ret	 0
$LN15@deque_redu:

; 829  :     }
; 830  :     if (dict == NULL) {
; 831  :         if (deque->maxlen == -1)

  000f1	4c 8b 8f 88 00
	00 00		 mov	 r9, QWORD PTR [rdi+136]

; 832  :             result = Py_BuildValue("O(O)", Py_TYPE(deque), aslist);

  000f8	48 8b 57 58	 mov	 rdx, QWORD PTR [rdi+88]
  000fc	4c 8b c0	 mov	 r8, rax
  000ff	48 85 db	 test	 rbx, rbx
  00102	75 2e		 jne	 SHORT $LN10@deque_redu

; 829  :     }
; 830  :     if (dict == NULL) {
; 831  :         if (deque->maxlen == -1)

  00104	49 83 f9 ff	 cmp	 r9, -1
  00108	75 14		 jne	 SHORT $LN9@deque_redu

; 832  :             result = Py_BuildValue("O(O)", Py_TYPE(deque), aslist);

  0010a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04LJHIBFLN@O?$CIO?$CJ?$AA@
  00111	e8 00 00 00 00	 call	 Py_BuildValue
  00116	48 8b f8	 mov	 rdi, rax

; 833  :         else

  00119	e9 a3 00 00 00	 jmp	 $LN3@deque_redu
$LN9@deque_redu:

; 834  :             result = Py_BuildValue("O(On)", Py_TYPE(deque), aslist, deque->maxlen);

  0011e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05IEPKLDIK@O?$CIOn?$CJ?$AA@
  00125	e8 00 00 00 00	 call	 Py_BuildValue
  0012a	48 8b f8	 mov	 rdi, rax

; 835  :     } else {

  0012d	e9 8f 00 00 00	 jmp	 $LN3@deque_redu
$LN10@deque_redu:

; 836  :         if (deque->maxlen == -1)
; 837  :             result = Py_BuildValue("O(OO)O", Py_TYPE(deque), aslist, Py_None, dict);

  00132	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00137	49 83 f9 ff	 cmp	 r9, -1
  0013b	75 10		 jne	 SHORT $LN6@deque_redu
  0013d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00144	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06GCIGALBM@O?$CIOO?$CJO?$AA@

; 838  :         else

  0014b	eb 07		 jmp	 SHORT $LN41@deque_redu
$LN6@deque_redu:

; 839  :             result = Py_BuildValue("O(On)O", Py_TYPE(deque), aslist, deque->maxlen, dict);

  0014d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06HKAIMDEH@O?$CIOn?$CJO?$AA@
$LN41@deque_redu:
  00154	e8 00 00 00 00	 call	 Py_BuildValue
  00159	48 8b f8	 mov	 rdi, rax

; 840  :     }
; 841  :     Py_XDECREF(dict);

  0015c	e8 00 00 00 00	 call	 _Py_PXCTX
  00161	85 c0		 test	 eax, eax
  00163	75 5c		 jne	 SHORT $LN3@deque_redu
  00165	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00169	a8 20		 test	 al, 32			; 00000020H
  0016b	75 4c		 jne	 SHORT $LN34@deque_redu
  0016d	84 c0		 test	 al, al
  0016f	78 48		 js	 SHORT $LN34@deque_redu
  00171	a8 02		 test	 al, 2
  00173	75 4c		 jne	 SHORT $LN3@deque_redu
  00175	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00179	75 46		 jne	 SHORT $LN3@deque_redu
  0017b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00182	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00189	4c 8b cb	 mov	 r9, rbx
  0018c	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00192	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0019a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0019f	48 8b cb	 mov	 rcx, rbx
  001a2	85 c0		 test	 eax, eax
  001a4	74 07		 je	 SHORT $LN39@deque_redu
  001a6	e8 00 00 00 00	 call	 _Px_Dealloc
  001ab	eb 14		 jmp	 SHORT $LN3@deque_redu
$LN39@deque_redu:
  001ad	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001b1	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001b7	eb 08		 jmp	 SHORT $LN3@deque_redu
$LN34@deque_redu:
  001b9	48 8b cb	 mov	 rcx, rbx
  001bc	e8 00 00 00 00	 call	 Px_DecRef
$LN3@deque_redu:

; 842  :     Py_DECREF(aslist);

  001c1	48 8b ce	 mov	 rcx, rsi
  001c4	e8 00 00 00 00	 call	 _Py_DecRef

; 843  :     return result;
; 844  : }

  001c9	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  001ce	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  001d3	48 8b c7	 mov	 rax, rdi
  001d6	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001da	5f		 pop	 rdi
  001db	c3		 ret	 0
deque_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_09BJDNFJPP@deque?$CI?$CFR?$CJ?$AA@	; `string'
PUBLIC	??_C@_0BG@BKGKEILD@deque?$CI?$CFR?0?5maxlen?$DN?$CFzd?$CJ?$AA@ ; `string'
PUBLIC	??_C@_05CLKOKHPD@?$FL?4?4?4?$FN?$AA@		; `string'
EXTRN	PyUnicode_FromFormat:PROC
EXTRN	Py_ReprLeave:PROC
EXTRN	PyUnicode_FromString:PROC
EXTRN	Py_ReprEnter:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_repr DD imagerel deque_repr
	DD	imagerel deque_repr+48
	DD	imagerel $unwind$deque_repr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$deque_repr DD imagerel deque_repr+48
	DD	imagerel deque_repr+87
	DD	imagerel $chain$0$deque_repr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$deque_repr DD imagerel deque_repr+87
	DD	imagerel deque_repr+172
	DD	imagerel $chain$3$deque_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$deque_repr DD 040c21H
	DD	06640cH
	DD	077400H
	DD	imagerel deque_repr
	DD	imagerel deque_repr+48
	DD	imagerel $unwind$deque_repr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$deque_repr DD 020521H
	DD	077405H
	DD	imagerel deque_repr
	DD	imagerel deque_repr+48
	DD	imagerel $unwind$deque_repr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_repr DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_09BJDNFJPP@deque?$CI?$CFR?$CJ?$AA@
CONST	SEGMENT
??_C@_09BJDNFJPP@deque?$CI?$CFR?$CJ?$AA@ DB 'deque(%R)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BKGKEILD@deque?$CI?$CFR?0?5maxlen?$DN?$CFzd?$CJ?$AA@
CONST	SEGMENT
??_C@_0BG@BKGKEILD@deque?$CI?$CFR?0?5maxlen?$DN?$CFzd?$CJ?$AA@ DB 'deque('
	DB	'%R, maxlen=%zd)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05CLKOKHPD@?$FL?4?4?4?$FN?$AA@
CONST	SEGMENT
??_C@_05CLKOKHPD@?$FL?4?4?4?$FN?$AA@ DB '[...]', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT deque_repr
_TEXT	SEGMENT
deque$ = 48
deque_repr PROC						; COMDAT

; 850  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 851  :     PyObject *aslist, *result;
; 852  :     int i;
; 853  : 
; 854  :     i = Py_ReprEnter(deque);

  00009	e8 00 00 00 00	 call	 Py_ReprEnter

; 855  :     if (i != 0) {

  0000e	85 c0		 test	 eax, eax
  00010	74 1b		 je	 SHORT $LN5@deque_repr

; 856  :         if (i < 0)

  00012	79 08		 jns	 SHORT $LN4@deque_repr

; 857  :             return NULL;

  00014	33 c0		 xor	 eax, eax

; 875  : }

  00016	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001a	5b		 pop	 rbx
  0001b	c3		 ret	 0
$LN4@deque_repr:

; 858  :         return PyUnicode_FromString("[...]");

  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05CLKOKHPD@?$FL?4?4?4?$FN?$AA@

; 875  : }

  00023	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00027	5b		 pop	 rbx
  00028	e9 00 00 00 00	 jmp	 PyUnicode_FromString
$LN5@deque_repr:

; 859  :     }
; 860  : 
; 861  :     aslist = PySequence_List(deque);

  0002d	48 8b cb	 mov	 rcx, rbx
  00030	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  00035	e8 00 00 00 00	 call	 PySequence_List
  0003a	48 8b f8	 mov	 rdi, rax

; 862  :     if (aslist == NULL) {

  0003d	48 85 c0	 test	 rax, rax
  00040	75 15		 jne	 SHORT $LN3@deque_repr

; 863  :         Py_ReprLeave(deque);

  00042	48 8b cb	 mov	 rcx, rbx
  00045	e8 00 00 00 00	 call	 Py_ReprLeave
  0004a	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]

; 864  :         return NULL;

  0004f	33 c0		 xor	 eax, eax

; 875  : }

  00051	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00055	5b		 pop	 rbx
  00056	c3		 ret	 0
$LN3@deque_repr:

; 865  :     }
; 866  :     if (((dequeobject *)deque)->maxlen != -1)

  00057	4c 8b 83 88 00
	00 00		 mov	 r8, QWORD PTR [rbx+136]
  0005e	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi

; 867  : 
; 868  :         result = PyUnicode_FromFormat("deque(%R, maxlen=%zd)",
; 869  :                                       aslist, ((dequeobject *)deque)->maxlen);

  00063	48 8b d0	 mov	 rdx, rax
  00066	49 83 f8 ff	 cmp	 r8, -1
  0006a	74 0e		 je	 SHORT $LN2@deque_repr
  0006c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@BKGKEILD@deque?$CI?$CFR?0?5maxlen?$DN?$CFzd?$CJ?$AA@
  00073	e8 00 00 00 00	 call	 PyUnicode_FromFormat

; 870  :     else

  00078	eb 0c		 jmp	 SHORT $LN9@deque_repr
$LN2@deque_repr:

; 871  :         result = PyUnicode_FromFormat("deque(%R)", aslist);

  0007a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09BJDNFJPP@deque?$CI?$CFR?$CJ?$AA@
  00081	e8 00 00 00 00	 call	 PyUnicode_FromFormat
$LN9@deque_repr:

; 872  :     Py_DECREF(aslist);

  00086	48 8b cf	 mov	 rcx, rdi
  00089	48 8b f0	 mov	 rsi, rax
  0008c	e8 00 00 00 00	 call	 _Py_DecRef

; 873  :     Py_ReprLeave(deque);

  00091	48 8b cb	 mov	 rcx, rbx
  00094	e8 00 00 00 00	 call	 Py_ReprLeave
  00099	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]

; 874  :     return result;

  0009e	48 8b c6	 mov	 rax, rsi
  000a1	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]

; 875  : }

  000a6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000aa	5b		 pop	 rbx
  000ab	c3		 ret	 0
deque_repr ENDP
_TEXT	ENDS
EXTRN	__ImageBase:BYTE
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
EXTRN	_Py_NotImplementedStruct:BYTE
EXTRN	PyType_IsSubtype:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$deque_richcompare DD imagerel deque_richcompare
	DD	imagerel deque_richcompare+481
	DD	imagerel $unwind$deque_richcompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$deque_richcompare DD imagerel deque_richcompare+481
	DD	imagerel deque_richcompare+506
	DD	imagerel $chain$0$deque_richcompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$deque_richcompare DD imagerel deque_richcompare+506
	DD	imagerel deque_richcompare+791
	DD	imagerel $chain$1$deque_richcompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$deque_richcompare DD imagerel deque_richcompare+791
	DD	imagerel deque_richcompare+901
	DD	imagerel $chain$2$deque_richcompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$deque_richcompare DD imagerel deque_richcompare+901
	DD	imagerel deque_richcompare+920
	DD	imagerel $chain$3$deque_richcompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$deque_richcompare DD imagerel deque_richcompare+920
	DD	imagerel deque_richcompare+944
	DD	imagerel $chain$4$deque_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$deque_richcompare DD 040021H
	DD	0bd400H
	DD	0ac400H
	DD	imagerel deque_richcompare
	DD	imagerel deque_richcompare+481
	DD	imagerel $unwind$deque_richcompare
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$deque_richcompare DD 021H
	DD	imagerel deque_richcompare
	DD	imagerel deque_richcompare+481
	DD	imagerel $unwind$deque_richcompare
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$deque_richcompare DD 021H
	DD	imagerel deque_richcompare+481
	DD	imagerel deque_richcompare+506
	DD	imagerel $chain$0$deque_richcompare
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$deque_richcompare DD 020521H
	DD	0ac405H
	DD	imagerel deque_richcompare+481
	DD	imagerel deque_richcompare+506
	DD	imagerel $chain$0$deque_richcompare
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$deque_richcompare DD 020521H
	DD	0bd405H
	DD	imagerel deque_richcompare
	DD	imagerel deque_richcompare+481
	DD	imagerel $unwind$deque_richcompare
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_richcompare DD 081201H
	DD	0d5412H
	DD	0c3412H
	DD	0e00e5212H
	DD	0600b700cH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_collectionsmodule.c
xdata	ENDS
;	COMDAT deque_richcompare
_TEXT	SEGMENT
v$ = 80
w$ = 88
op$ = 96
deque_richcompare PROC					; COMDAT

; 879  : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	41 56		 push	 r14
  0000e	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00012	48 8b f1	 mov	 rsi, rcx

; 880  :     PyObject *it1=NULL, *it2=NULL, *x, *y;
; 881  :     Py_ssize_t vs, ws;
; 882  :     int b, cmp=-1;
; 883  : 
; 884  :     if (!PyObject_TypeCheck(v, &deque_type) ||
; 885  :         !PyObject_TypeCheck(w, &deque_type)) {

  00015	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  00019	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:deque_type
  00020	83 cb ff	 or	 ebx, -1
  00023	4d 63 f0	 movsxd	 r14, r8d
  00026	48 8b fa	 mov	 rdi, rdx
  00029	48 3b cd	 cmp	 rcx, rbp
  0002c	74 0c		 je	 SHORT $LN43@deque_rich
  0002e	48 8b d5	 mov	 rdx, rbp
  00031	e8 00 00 00 00	 call	 PyType_IsSubtype
  00036	85 c0		 test	 eax, eax
  00038	74 15		 je	 SHORT $LN44@deque_rich
$LN43@deque_rich:
  0003a	48 8b 4f 58	 mov	 rcx, QWORD PTR [rdi+88]
  0003e	48 3b cd	 cmp	 rcx, rbp
  00041	74 5d		 je	 SHORT $LN45@deque_rich
  00043	48 8b d5	 mov	 rdx, rbp
  00046	e8 00 00 00 00	 call	 PyType_IsSubtype
  0004b	85 c0		 test	 eax, eax
  0004d	75 51		 jne	 SHORT $LN45@deque_rich
$LN44@deque_rich:

; 886  :         Py_RETURN_NOTIMPLEMENTED;

  0004f	e8 00 00 00 00	 call	 _Py_PXCTX
  00054	85 c0		 test	 eax, eax
  00056	75 3c		 jne	 SHORT $LN49@deque_rich
  00058	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NotImplementedStruct
  0005f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00066	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0006d	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00073	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0007b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00080	85 c0		 test	 eax, eax
  00082	75 09		 jne	 SHORT $LN48@deque_rich
  00084	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NotImplementedStruct+32, 32 ; 00000020H
  0008b	74 07		 je	 SHORT $LN49@deque_rich
$LN48@deque_rich:
  0008d	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NotImplementedStruct+80
$LN49@deque_rich:
  00094	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  0009b	e9 e5 02 00 00	 jmp	 $LN46@deque_rich
$LN45@deque_rich:

; 887  :     }
; 888  : 
; 889  :     /* Shortcuts */
; 890  :     vs = ((dequeobject *)v)->len;

  000a0	48 8b 86 80 00
	00 00		 mov	 rax, QWORD PTR [rsi+128]

; 891  :     ws = ((dequeobject *)w)->len;

  000a7	48 8b 8f 80 00
	00 00		 mov	 rcx, QWORD PTR [rdi+128]

; 892  :     if (op == Py_EQ) {

  000ae	41 83 fe 02	 cmp	 r14d, 2
  000b2	0f 85 ad 00 00
	00		 jne	 $LN40@deque_rich

; 893  :         if (v == w)

  000b8	48 3b f7	 cmp	 rsi, rdi
  000bb	75 4e		 jne	 SHORT $LN41@deque_rich

; 894  :             Py_RETURN_TRUE;

  000bd	e8 00 00 00 00	 call	 _Py_PXCTX
  000c2	85 c0		 test	 eax, eax
  000c4	75 39		 jne	 SHORT $LN53@deque_rich
  000c6	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_TrueStruct
  000cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000db	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000e1	44 89 74 24 20	 mov	 DWORD PTR [rsp+32], r14d
  000e6	e8 00 00 00 00	 call	 _PyParallel_Guard
  000eb	85 c0		 test	 eax, eax
  000ed	75 09		 jne	 SHORT $LN52@deque_rich
  000ef	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_TrueStruct+32, 32 ; 00000020H
  000f6	74 07		 je	 SHORT $LN53@deque_rich
$LN52@deque_rich:
  000f8	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_TrueStruct+80
$LN53@deque_rich:
  000ff	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00106	e9 7a 02 00 00	 jmp	 $LN46@deque_rich
$LN41@deque_rich:

; 895  :         if (vs != ws)

  0010b	48 3b c1	 cmp	 rax, rcx
  0010e	0f 84 ca 00 00
	00		 je	 $LN37@deque_rich

; 896  :             Py_RETURN_FALSE;

  00114	e8 00 00 00 00	 call	 _Py_PXCTX
  00119	85 c0		 test	 eax, eax
  0011b	75 3c		 jne	 SHORT $LN57@deque_rich
  0011d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_FalseStruct
  00124	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0012b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00132	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00138	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00140	e8 00 00 00 00	 call	 _PyParallel_Guard
  00145	85 c0		 test	 eax, eax
  00147	75 09		 jne	 SHORT $LN56@deque_rich
  00149	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  00150	74 07		 je	 SHORT $LN57@deque_rich
$LN56@deque_rich:
  00152	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN57@deque_rich:
  00159	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  00160	e9 20 02 00 00	 jmp	 $LN46@deque_rich
$LN40@deque_rich:

; 897  :     }
; 898  :     if (op == Py_NE) {

  00165	41 83 fe 03	 cmp	 r14d, 3
  00169	75 73		 jne	 SHORT $LN37@deque_rich

; 899  :         if (v == w)

  0016b	48 3b f7	 cmp	 rsi, rdi
  0016e	75 51		 jne	 SHORT $LN38@deque_rich

; 900  :             Py_RETURN_FALSE;

  00170	e8 00 00 00 00	 call	 _Py_PXCTX
  00175	85 c0		 test	 eax, eax
  00177	75 3c		 jne	 SHORT $LN61@deque_rich
  00179	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_FalseStruct
  00180	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00187	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0018e	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00194	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0019c	e8 00 00 00 00	 call	 _PyParallel_Guard
  001a1	85 c0		 test	 eax, eax
  001a3	75 09		 jne	 SHORT $LN60@deque_rich
  001a5	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  001ac	74 07		 je	 SHORT $LN61@deque_rich
$LN60@deque_rich:
  001ae	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN61@deque_rich:
  001b5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  001bc	e9 c4 01 00 00	 jmp	 $LN46@deque_rich
$LN38@deque_rich:

; 901  :         if (vs != ws)

  001c1	48 3b c1	 cmp	 rax, rcx
  001c4	74 18		 je	 SHORT $LN37@deque_rich

; 902  :             Py_RETURN_TRUE;

  001c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  001cd	e8 00 00 00 00	 call	 _Py_IncRef
  001d2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  001d9	e9 a7 01 00 00	 jmp	 $LN46@deque_rich
$LN37@deque_rich:

; 903  :     }
; 904  : 
; 905  :     /* Search for the first index where items are different */
; 906  :     it1 = PyObject_GetIter(v);

  001de	48 8b ce	 mov	 rcx, rsi
  001e1	4c 89 6c 24 58	 mov	 QWORD PTR [rsp+88], r13
  001e6	e8 00 00 00 00	 call	 PyObject_GetIter
  001eb	4c 8b e8	 mov	 r13, rax

; 907  :     if (it1 == NULL)

  001ee	48 85 c0	 test	 rax, rax
  001f1	0f 84 87 01 00
	00		 je	 $LN1@deque_rich

; 908  :         goto done;
; 909  :     it2 = PyObject_GetIter(w);

  001f7	48 8b cf	 mov	 rcx, rdi
  001fa	4c 89 64 24 50	 mov	 QWORD PTR [rsp+80], r12
  001ff	e8 00 00 00 00	 call	 PyObject_GetIter
  00204	4c 8b e0	 mov	 r12, rax

; 910  :     if (it2 == NULL)

  00207	48 85 c0	 test	 rax, rax
  0020a	0f 84 e8 00 00
	00		 je	 $done$20896
$LL34@deque_rich:

; 911  :         goto done;
; 912  :     for (;;) {
; 913  :         x = PyIter_Next(it1);

  00210	49 8b cd	 mov	 rcx, r13
  00213	e8 00 00 00 00	 call	 PyIter_Next
  00218	48 8b f8	 mov	 rdi, rax

; 914  :         if (x == NULL && PyErr_Occurred())

  0021b	48 85 c0	 test	 rax, rax
  0021e	75 0e		 jne	 SHORT $LN32@deque_rich
  00220	e8 00 00 00 00	 call	 PyErr_Occurred
  00225	48 85 c0	 test	 rax, rax
  00228	0f 85 ca 00 00
	00		 jne	 $done$20896
$LN32@deque_rich:

; 915  :             goto done;
; 916  :         y = PyIter_Next(it2);

  0022e	49 8b cc	 mov	 rcx, r12
  00231	e8 00 00 00 00	 call	 PyIter_Next
  00236	48 8b f0	 mov	 rsi, rax

; 917  :         if (x == NULL || y == NULL)

  00239	48 85 ff	 test	 rdi, rdi
  0023c	74 55		 je	 SHORT $LN26@deque_rich

; 918  :             break;
; 919  :         b = PyObject_RichCompareBool(x, y, Py_EQ);

  0023e	48 8b cf	 mov	 rcx, rdi
  00241	48 85 c0	 test	 rax, rax
  00244	74 55		 je	 SHORT $LN27@deque_rich
  00246	41 b8 02 00 00
	00		 mov	 r8d, 2
  0024c	48 8b d0	 mov	 rdx, rax
  0024f	e8 00 00 00 00	 call	 PyObject_RichCompareBool

; 925  :         }
; 926  :         Py_DECREF(x);

  00254	48 8b cf	 mov	 rcx, rdi
  00257	8b e8		 mov	 ebp, eax
  00259	85 c0		 test	 eax, eax
  0025b	74 17		 je	 SHORT $LN71@deque_rich
  0025d	e8 00 00 00 00	 call	 _Py_DecRef

; 927  :         Py_DECREF(y);

  00262	48 8b ce	 mov	 rcx, rsi
  00265	e8 00 00 00 00	 call	 _Py_DecRef

; 928  :         if (b == -1)

  0026a	83 fd ff	 cmp	 ebp, -1
  0026d	75 a1		 jne	 SHORT $LL34@deque_rich

; 929  :             goto done;
; 930  :     }

  0026f	e9 84 00 00 00	 jmp	 $done$20896
$LN71@deque_rich:

; 920  :         if (b == 0) {
; 921  :             cmp = PyObject_RichCompareBool(x, y, op);

  00274	45 8b c6	 mov	 r8d, r14d
  00277	48 8b d6	 mov	 rdx, rsi
  0027a	e8 00 00 00 00	 call	 PyObject_RichCompareBool

; 922  :             Py_DECREF(x);

  0027f	48 8b cf	 mov	 rcx, rdi
  00282	8b d8		 mov	 ebx, eax
  00284	e8 00 00 00 00	 call	 _Py_DecRef

; 923  :             Py_DECREF(y);

  00289	48 8b ce	 mov	 rcx, rsi
  0028c	e8 00 00 00 00	 call	 _Py_DecRef

; 924  :             goto done;

  00291	eb 65		 jmp	 SHORT $done$20896
$LN26@deque_rich:

; 931  :     /* We reached the end of one deque or both */
; 932  :     Py_XDECREF(x);
; 933  :     Py_XDECREF(y);

  00293	48 85 c0	 test	 rax, rax
  00296	74 08		 je	 SHORT $LN22@deque_rich
  00298	48 8b c8	 mov	 rcx, rax
$LN27@deque_rich:
  0029b	e8 00 00 00 00	 call	 _Py_DecRef
$LN22@deque_rich:

; 934  :     if (PyErr_Occurred())

  002a0	e8 00 00 00 00	 call	 PyErr_Occurred
  002a5	48 85 c0	 test	 rax, rax
  002a8	75 4e		 jne	 SHORT $done$20896

; 935  :         goto done;
; 936  :     switch (op) {

  002aa	41 83 fe 05	 cmp	 r14d, 5
  002ae	77 48		 ja	 SHORT $done$20896
  002b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:__ImageBase
  002b7	42 8b 8c b2 00
	00 00 00	 mov	 ecx, DWORD PTR $LN73@deque_rich[rdx+r14*4]
  002bf	48 03 ca	 add	 rcx, rdx
  002c2	ff e1		 jmp	 rcx
$LN16@deque_rich:

; 937  :     case Py_LT: cmp = y != NULL; break;  /* if w was longer */

  002c4	33 db		 xor	 ebx, ebx
  002c6	48 85 f6	 test	 rsi, rsi
  002c9	0f 95 c3	 setne	 bl
  002cc	eb 2a		 jmp	 SHORT $done$20896
$LN15@deque_rich:

; 938  :     case Py_LE: cmp = x == NULL; break;  /* if v was not longer */

  002ce	33 db		 xor	 ebx, ebx
  002d0	48 85 ff	 test	 rdi, rdi
  002d3	eb 20		 jmp	 SHORT $LN75@deque_rich
$LN14@deque_rich:

; 939  :     case Py_EQ: cmp = x == y;    break;  /* if we reached the end of both */

  002d5	33 db		 xor	 ebx, ebx
  002d7	48 3b fe	 cmp	 rdi, rsi
  002da	eb 19		 jmp	 SHORT $LN75@deque_rich
$LN13@deque_rich:

; 940  :     case Py_NE: cmp = x != y;    break;  /* if one deque continues */

  002dc	33 db		 xor	 ebx, ebx
  002de	48 3b fe	 cmp	 rdi, rsi
  002e1	0f 95 c3	 setne	 bl
  002e4	eb 12		 jmp	 SHORT $done$20896
$LN12@deque_rich:

; 941  :     case Py_GT: cmp = x != NULL; break;  /* if v was longer */

  002e6	33 db		 xor	 ebx, ebx
  002e8	48 85 ff	 test	 rdi, rdi
  002eb	0f 95 c3	 setne	 bl
  002ee	eb 08		 jmp	 SHORT $done$20896
$LN11@deque_rich:

; 942  :     case Py_GE: cmp = y == NULL; break;  /* if w was not longer */

  002f0	33 db		 xor	 ebx, ebx
  002f2	48 85 f6	 test	 rsi, rsi
$LN75@deque_rich:
  002f5	0f 94 c3	 sete	 bl
$done$20896:

; 943  :     }
; 944  : 
; 945  : done:
; 946  :     Py_XDECREF(it1);

  002f8	49 8b cd	 mov	 rcx, r13
  002fb	e8 00 00 00 00	 call	 _Py_DecRef

; 947  :     Py_XDECREF(it2);

  00300	4d 85 e4	 test	 r12, r12
  00303	74 08		 je	 SHORT $LN5@deque_rich
  00305	49 8b cc	 mov	 rcx, r12
  00308	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@deque_rich:

; 948  :     if (cmp == 1)

  0030d	4c 8b 64 24 50	 mov	 r12, QWORD PTR [rsp+80]
  00312	83 fb 01	 cmp	 ebx, 1
  00315	75 4e		 jne	 SHORT $LN2@deque_rich

; 949  :         Py_RETURN_TRUE;

  00317	e8 00 00 00 00	 call	 _Py_PXCTX
  0031c	85 c0		 test	 eax, eax
  0031e	75 3c		 jne	 SHORT $LN65@deque_rich
  00320	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_TrueStruct
  00327	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0032e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00335	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0033b	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00343	e8 00 00 00 00	 call	 _PyParallel_Guard
  00348	85 c0		 test	 eax, eax
  0034a	75 09		 jne	 SHORT $LN64@deque_rich
  0034c	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_TrueStruct+32, 32 ; 00000020H
  00353	74 07		 je	 SHORT $LN65@deque_rich
$LN64@deque_rich:
  00355	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_TrueStruct+80
$LN65@deque_rich:
  0035c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00363	eb 1b		 jmp	 SHORT $LN74@deque_rich
$LN2@deque_rich:

; 950  :     if (cmp == 0)

  00365	85 db		 test	 ebx, ebx
  00367	75 15		 jne	 SHORT $LN1@deque_rich

; 951  :         Py_RETURN_FALSE;

  00369	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  00370	e8 00 00 00 00	 call	 _Py_IncRef
  00375	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  0037c	eb 02		 jmp	 SHORT $LN74@deque_rich
$LN1@deque_rich:

; 952  :     return NULL;

  0037e	33 c0		 xor	 eax, eax
$LN74@deque_rich:
  00380	4c 8b 6c 24 58	 mov	 r13, QWORD PTR [rsp+88]
$LN46@deque_rich:

; 953  : }

  00385	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  0038a	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  0038f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00393	41 5e		 pop	 r14
  00395	5f		 pop	 rdi
  00396	5e		 pop	 rsi
  00397	c3		 ret	 0
$LN73@deque_rich:
  00398	00 00 00 00	 DD	 $LN16@deque_rich
  0039c	00 00 00 00	 DD	 $LN15@deque_rich
  003a0	00 00 00 00	 DD	 $LN14@deque_rich
  003a4	00 00 00 00	 DD	 $LN13@deque_rich
  003a8	00 00 00 00	 DD	 $LN12@deque_rich
  003ac	00 00 00 00	 DD	 $LN11@deque_rich
deque_richcompare ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@OLFDKACG@maxlen?5must?5be?5non?9negative?$AA@ ; `string'
PUBLIC	??_C@_09FGABFDMF@?$HMOO?3deque?$AA@		; `string'
PUBLIC	??_C@_08DCHCEAJP@iterable?$AA@			; `string'
EXTRN	PyLong_AsSsize_t:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_init DD imagerel deque_init
	DD	imagerel deque_init+268
	DD	imagerel $unwind$deque_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_init DD 040a01H
	DD	0c340aH
	DD	07006920aH
xdata	ENDS
;	COMDAT ??_C@_0BM@OLFDKACG@maxlen?5must?5be?5non?9negative?$AA@
CONST	SEGMENT
??_C@_0BM@OLFDKACG@maxlen?5must?5be?5non?9negative?$AA@ DB 'maxlen must b'
	DB	'e non-negative', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09FGABFDMF@?$HMOO?3deque?$AA@
CONST	SEGMENT
??_C@_09FGABFDMF@?$HMOO?3deque?$AA@ DB '|OO:deque', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08DCHCEAJP@iterable?$AA@
CONST	SEGMENT
??_C@_08DCHCEAJP@iterable?$AA@ DB 'iterable', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT deque_init
_TEXT	SEGMENT
iterable$ = 48
kwlist$ = 56
deque$ = 96
args$ = 104
kwdargs$ = 112
maxlenobj$ = 120
deque_init PROC						; COMDAT

; 957  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000a	48 8b f9	 mov	 rdi, rcx

; 958  :     PyObject *iterable = NULL;

  0000d	33 c9		 xor	 ecx, ecx
  0000f	4d 8b d0	 mov	 r10, r8
  00012	48 89 4c 24 30	 mov	 QWORD PTR iterable$[rsp], rcx

; 959  :     PyObject *maxlenobj = NULL;

  00017	48 89 4c 24 78	 mov	 QWORD PTR maxlenobj$[rsp], rcx

; 960  :     Py_ssize_t maxlen = -1;
; 961  :     char *kwlist[] = {"iterable", "maxlen", 0};

  0001c	48 89 4c 24 48	 mov	 QWORD PTR kwlist$[rsp+16], rcx
  00021	4c 8b da	 mov	 r11, rdx

; 962  : 
; 963  :     if (!PyArg_ParseTupleAndKeywords(args, kwdargs, "|OO:deque", kwlist, &iterable, &maxlenobj))

  00024	48 8d 4c 24 78	 lea	 rcx, QWORD PTR maxlenobj$[rsp]
  00029	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08DCHCEAJP@iterable?$AA@
  00030	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00035	48 8d 4c 24 30	 lea	 rcx, QWORD PTR iterable$[rsp]
  0003a	48 89 44 24 38	 mov	 QWORD PTR kwlist$[rsp], rax
  0003f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06EGGKHNAM@maxlen?$AA@
  00046	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0004b	4c 8d 4c 24 38	 lea	 r9, QWORD PTR kwlist$[rsp]
  00050	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09FGABFDMF@?$HMOO?3deque?$AA@
  00057	49 8b cb	 mov	 rcx, r11
  0005a	49 8b d2	 mov	 rdx, r10
  0005d	48 83 cb ff	 or	 rbx, -1
  00061	48 89 44 24 40	 mov	 QWORD PTR kwlist$[rsp+8], rax
  00066	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  0006b	85 c0		 test	 eax, eax

; 964  :         return -1;

  0006d	74 2e		 je	 SHORT $LN10@deque_init

; 965  :     if (maxlenobj != NULL && maxlenobj != Py_None) {

  0006f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR maxlenobj$[rsp]
  00074	48 85 c9	 test	 rcx, rcx
  00077	74 58		 je	 SHORT $LN3@deque_init
  00079	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00080	48 3b c8	 cmp	 rcx, rax
  00083	74 4c		 je	 SHORT $LN3@deque_init

; 966  :         maxlen = PyLong_AsSsize_t(maxlenobj);

  00085	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  0008a	48 8b d8	 mov	 rbx, rax

; 967  :         if (maxlen == -1 && PyErr_Occurred())

  0008d	48 83 f8 ff	 cmp	 rax, -1
  00091	75 18		 jne	 SHORT $LN4@deque_init
  00093	e8 00 00 00 00	 call	 PyErr_Occurred
  00098	48 85 c0	 test	 rax, rax
  0009b	74 13		 je	 SHORT $LN9@deque_init
$LN10@deque_init:

; 968  :             return -1;

  0009d	83 c8 ff	 or	 eax, -1

; 983  : }

  000a0	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  000a5	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000a9	5f		 pop	 rdi
  000aa	c3		 ret	 0
$LN4@deque_init:

; 969  :         if (maxlen < 0) {

  000ab	48 85 c0	 test	 rax, rax
  000ae	79 21		 jns	 SHORT $LN3@deque_init
$LN9@deque_init:

; 970  :             PyErr_SetString(PyExc_ValueError, "maxlen must be non-negative");

  000b0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@OLFDKACG@maxlen?5must?5be?5non?9negative?$AA@
  000be	e8 00 00 00 00	 call	 PyErr_SetString

; 971  :             return -1;

  000c3	83 c8 ff	 or	 eax, -1

; 983  : }

  000c6	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  000cb	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000cf	5f		 pop	 rdi
  000d0	c3		 ret	 0
$LN3@deque_init:

; 972  :         }
; 973  :     }
; 974  :     deque->maxlen = maxlen;
; 975  :     deque_clear(deque);

  000d1	48 8b cf	 mov	 rcx, rdi
  000d4	48 89 9f 88 00
	00 00		 mov	 QWORD PTR [rdi+136], rbx
  000db	e8 00 00 00 00	 call	 deque_clear

; 976  :     if (iterable != NULL) {

  000e0	48 8b 54 24 30	 mov	 rdx, QWORD PTR iterable$[rsp]
  000e5	48 85 d2	 test	 rdx, rdx
  000e8	74 15		 je	 SHORT $LN2@deque_init

; 977  :         PyObject *rv = deque_extend(deque, iterable);

  000ea	48 8b cf	 mov	 rcx, rdi
  000ed	e8 00 00 00 00	 call	 deque_extend

; 978  :         if (rv == NULL)

  000f2	48 85 c0	 test	 rax, rax

; 979  :             return -1;

  000f5	74 a6		 je	 SHORT $LN10@deque_init

; 980  :         Py_DECREF(rv);

  000f7	48 8b c8	 mov	 rcx, rax
  000fa	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@deque_init:

; 981  :     }
; 982  :     return 0;

  000ff	33 c0		 xor	 eax, eax

; 983  : }

  00101	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00106	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0010a	5f		 pop	 rdi
  0010b	c3		 ret	 0
deque_init ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT deque_sizeof
_TEXT	SEGMENT
deque$ = 8
unused$ = 16
deque_sizeof PROC					; COMDAT

; 988  :     Py_ssize_t res;
; 989  :     Py_ssize_t blocks;
; 990  : 
; 991  :     res = sizeof(dequeobject);
; 992  :     blocks = (deque->leftindex + deque->len + BLOCKLEN - 1) / BLOCKLEN;

  00000	48 8b 91 80 00
	00 00		 mov	 rdx, QWORD PTR [rcx+128]
  00007	48 8b 41 70	 mov	 rax, QWORD PTR [rcx+112]
  0000b	48 8d 4c 02 3d	 lea	 rcx, QWORD PTR [rdx+rax+61]
  00010	48 b8 09 21 84
	10 42 08 21 84	 mov	 rax, -8925843906633654007 ; 8421084210842109H
  0001a	48 f7 e9	 imul	 rcx
  0001d	48 03 d1	 add	 rdx, rcx
  00020	48 c1 fa 05	 sar	 rdx, 5
  00024	48 8b ca	 mov	 rcx, rdx
  00027	48 c1 e9 3f	 shr	 rcx, 63			; 0000003fH
  0002b	48 03 ca	 add	 rcx, rdx

; 993  :     assert(deque->leftindex + deque->len - 1 ==
; 994  :            (blocks - 1) * BLOCKLEN + deque->rightindex);
; 995  :     res += blocks * sizeof(block);

  0002e	48 c1 e1 09	 shl	 rcx, 9

; 996  :     return PyLong_FromSsize_t(res);

  00032	48 81 c1 a0 00
	00 00		 add	 rcx, 160		; 000000a0H

; 997  : }

  00039	e9 00 00 00 00	 jmp	 PyLong_FromSsize_t
deque_sizeof ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$deque_get_maxlen DD imagerel deque_get_maxlen
	DD	imagerel deque_get_maxlen+107
	DD	imagerel $unwind$deque_get_maxlen
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_get_maxlen DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_collectionsmodule.c
xdata	ENDS
;	COMDAT deque_get_maxlen
_TEXT	SEGMENT
deque$ = 64
deque_get_maxlen PROC					; COMDAT

; 1004 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1005 :     if (deque->maxlen == -1)

  00004	48 8b 89 88 00
	00 00		 mov	 rcx, QWORD PTR [rcx+136]
  0000b	48 83 f9 ff	 cmp	 rcx, -1
  0000f	75 51		 jne	 SHORT $LN1@deque_get_

; 1006 :         Py_RETURN_NONE;

  00011	e8 00 00 00 00	 call	 _Py_PXCTX
  00016	85 c0		 test	 eax, eax
  00018	75 3c		 jne	 SHORT $LN5@deque_get_
  0001a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0002f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00035	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0003d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00042	85 c0		 test	 eax, eax
  00044	75 09		 jne	 SHORT $LN4@deque_get_
  00046	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0004d	74 07		 je	 SHORT $LN5@deque_get_
$LN4@deque_get_:
  0004f	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN5@deque_get_:
  00056	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1007 :     return PyLong_FromSsize_t(deque->maxlen);
; 1008 : }

  0005d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00061	c3		 ret	 0
$LN1@deque_get_:
  00062	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00066	e9 00 00 00 00	 jmp	 PyLong_FromSsize_t
deque_get_maxlen ENDP
_TEXT	ENDS
EXTRN	PyObject_GC_Track:PROC
EXTRN	_PyObject_GC_New:PROC
EXTRN	_PxObject_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$deque_iter DD imagerel deque_iter
	DD	imagerel deque_iter+184
	DD	imagerel $unwind$deque_iter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_iter DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_collectionsmodule.c
xdata	ENDS
;	COMDAT deque_iter
_TEXT	SEGMENT
deque$ = 64
deque_iter PROC						; COMDAT

; 1135 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b d9	 mov	 rbx, rcx

; 1136 :     dequeiterobject *it;
; 1137 : 
; 1138 :     it = PyObject_GC_New(dequeiterobject, &dequeiter_type);

  0000d	e8 00 00 00 00	 call	 _Py_PXCTX
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:dequeiter_type
  00019	85 c0		 test	 eax, eax
  0001b	74 07		 je	 SHORT $LN4@deque_iter
  0001d	e8 00 00 00 00	 call	 _PxObject_New
  00022	eb 05		 jmp	 SHORT $LN10@deque_iter
$LN4@deque_iter:
  00024	e8 00 00 00 00	 call	 _PyObject_GC_New
$LN10@deque_iter:
  00029	48 8b f8	 mov	 rdi, rax

; 1139 :     if (it == NULL)

  0002c	48 85 c0	 test	 rax, rax
  0002f	75 0b		 jne	 SHORT $LN1@deque_iter

; 1148 :     return (PyObject *)it;
; 1149 : }

  00031	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00036	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0003a	5f		 pop	 rdi
  0003b	c3		 ret	 0
$LN1@deque_iter:

; 1140 :         return NULL;
; 1141 :     it->b = deque->leftblock;

  0003c	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00040	48 89 47 68	 mov	 QWORD PTR [rdi+104], rax

; 1142 :     it->index = deque->leftindex;

  00044	48 8b 43 70	 mov	 rax, QWORD PTR [rbx+112]
  00048	48 89 47 60	 mov	 QWORD PTR [rdi+96], rax

; 1143 :     Py_INCREF(deque);

  0004c	e8 00 00 00 00	 call	 _Py_PXCTX
  00051	85 c0		 test	 eax, eax
  00053	75 32		 jne	 SHORT $LN7@deque_iter
  00055	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0005c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00063	4c 8b cb	 mov	 r9, rbx
  00066	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0006c	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00074	e8 00 00 00 00	 call	 _PyParallel_Guard
  00079	85 c0		 test	 eax, eax
  0007b	75 06		 jne	 SHORT $LN6@deque_iter
  0007d	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00081	74 04		 je	 SHORT $LN7@deque_iter
$LN6@deque_iter:
  00083	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN7@deque_iter:

; 1144 :     it->deque = deque;

  00087	48 89 5f 70	 mov	 QWORD PTR [rdi+112], rbx

; 1145 :     it->state = deque->state;

  0008b	8b 83 90 00 00
	00		 mov	 eax, DWORD PTR [rbx+144]

; 1146 :     it->counter = deque->len;
; 1147 :     PyObject_GC_Track(it);

  00091	48 8b cf	 mov	 rcx, rdi
  00094	89 47 78	 mov	 DWORD PTR [rdi+120], eax
  00097	48 8b 83 80 00
	00 00		 mov	 rax, QWORD PTR [rbx+128]
  0009e	48 89 87 80 00
	00 00		 mov	 QWORD PTR [rdi+128], rax
  000a5	e8 00 00 00 00	 call	 PyObject_GC_Track

; 1148 :     return (PyObject *)it;
; 1149 : }

  000aa	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000af	48 8b c7	 mov	 rax, rdi
  000b2	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b6	5f		 pop	 rdi
  000b7	c3		 ret	 0
deque_iter ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@PIIJKHEC@dequeiter_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$dequeiter_traverse DD imagerel dequeiter_traverse
	DD	imagerel dequeiter_traverse+97
	DD	imagerel $unwind$dequeiter_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dequeiter_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BD@PIIJKHEC@dequeiter_traverse?$AA@
CONST	SEGMENT
??_C@_0BD@PIIJKHEC@dequeiter_traverse?$AA@ DB 'dequeiter_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT dequeiter_traverse
_TEXT	SEGMENT
dio$ = 48
visit$ = 56
arg$ = 64
dequeiter_traverse PROC					; COMDAT

; 1153 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 1154 :     Py_VISIT(dio->deque);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN3@dequeiter_
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@LDKINGDC@?4?4?2Modules?2_collectionsmodule?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@PIIJKHEC@dequeiter_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 82 04 00
	00		 mov	 r8d, 1154		; 00000482H
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@dequeiter_:
  0003d	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN5@dequeiter_
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 02		 jne	 SHORT $LN7@dequeiter_
$LN5@dequeiter_:

; 1155 :     return 0;

  0004f	33 c0		 xor	 eax, eax
$LN7@dequeiter_:

; 1156 : }

  00051	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00056	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0005b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005f	5f		 pop	 rdi
  00060	c3		 ret	 0
dequeiter_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$dequeiter_dealloc DD imagerel dequeiter_dealloc
	DD	imagerel dequeiter_dealloc+177
	DD	imagerel $unwind$dequeiter_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dequeiter_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_collectionsmodule.c
xdata	ENDS
;	COMDAT dequeiter_dealloc
_TEXT	SEGMENT
dio$ = 64
dequeiter_dealloc PROC					; COMDAT

; 1160 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1161 :     Py_XDECREF(dio->deque);

  0000a	48 8b 59 70	 mov	 rbx, QWORD PTR [rcx+112]
  0000e	48 8b f9	 mov	 rdi, rcx
  00011	48 85 db	 test	 rbx, rbx
  00014	0f 84 85 00 00
	00		 je	 $LN3@dequeiter_@2
  0001a	e8 00 00 00 00	 call	 _Py_PXCTX
  0001f	85 c0		 test	 eax, eax
  00021	75 7c		 jne	 SHORT $LN3@dequeiter_@2
  00023	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00027	a8 20		 test	 al, 32			; 00000020H
  00029	75 6c		 jne	 SHORT $LN11@dequeiter_@2
  0002b	84 c0		 test	 al, al
  0002d	78 68		 js	 SHORT $LN11@dequeiter_@2
  0002f	a8 02		 test	 al, 2
  00031	75 6c		 jne	 SHORT $LN3@dequeiter_@2
  00033	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00037	75 66		 jne	 SHORT $LN3@dequeiter_@2
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00047	4c 8b cb	 mov	 r9, rbx
  0004a	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00050	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00058	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005d	48 8b cb	 mov	 rcx, rbx
  00060	85 c0		 test	 eax, eax
  00062	74 17		 je	 SHORT $LN16@dequeiter_@2
  00064	e8 00 00 00 00	 call	 _Px_Dealloc

; 1162 :     PyObject_GC_Del(dio);

  00069	48 8b cf	 mov	 rcx, rdi

; 1163 : }

  0006c	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00071	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00075	5f		 pop	 rdi
  00076	e9 00 00 00 00	 jmp	 PyObject_GC_Del

; 1161 :     Py_XDECREF(dio->deque);

$LN16@dequeiter_@2:
  0007b	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0007f	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 1162 :     PyObject_GC_Del(dio);

  00085	48 8b cf	 mov	 rcx, rdi

; 1163 : }

  00088	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0008d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00091	5f		 pop	 rdi
  00092	e9 00 00 00 00	 jmp	 PyObject_GC_Del

; 1161 :     Py_XDECREF(dio->deque);

$LN11@dequeiter_@2:
  00097	48 8b cb	 mov	 rcx, rbx
  0009a	e8 00 00 00 00	 call	 Px_DecRef
$LN3@dequeiter_@2:

; 1162 :     PyObject_GC_Del(dio);

  0009f	48 8b cf	 mov	 rcx, rdi

; 1163 : }

  000a2	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000a7	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ab	5f		 pop	 rdi
  000ac	e9 00 00 00 00	 jmp	 PyObject_GC_Del
dequeiter_dealloc ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$dequeiter_next DD imagerel dequeiter_next
	DD	imagerel dequeiter_next+202
	DD	imagerel $unwind$dequeiter_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dequeiter_next DD 035101H
	DD	063451H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_collectionsmodule.c
xdata	ENDS
;	COMDAT dequeiter_next
_TEXT	SEGMENT
it$ = 64
dequeiter_next PROC					; COMDAT

; 1167 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1168 :     PyObject *item;
; 1169 : 
; 1170 :     if (it->deque->state != it->state) {

  00004	48 8b 51 70	 mov	 rdx, QWORD PTR [rcx+112]
  00008	8b 41 78	 mov	 eax, DWORD PTR [rcx+120]
  0000b	39 82 90 00 00
	00		 cmp	 DWORD PTR [rdx+144], eax
  00011	74 25		 je	 SHORT $LN3@dequeiter_@3

; 1171 :         it->counter = 0;

  00013	48 c7 81 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rcx+128], 0

; 1172 :         PyErr_SetString(PyExc_RuntimeError,
; 1173 :                         "deque mutated during iteration");

  0001e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@NMAKCLDI@deque?5mutated?5during?5iteration?$AA@
  0002c	e8 00 00 00 00	 call	 PyErr_SetString
$LN10@dequeiter_@3:

; 1174 :         return NULL;

  00031	33 c0		 xor	 eax, eax

; 1191 : }

  00033	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00037	c3		 ret	 0
$LN3@dequeiter_@3:

; 1175 :     }
; 1176 :     if (it->counter == 0)

  00038	48 8b 91 80 00
	00 00		 mov	 rdx, QWORD PTR [rcx+128]
  0003f	48 85 d2	 test	 rdx, rdx

; 1177 :         return NULL;

  00042	74 ed		 je	 SHORT $LN10@dequeiter_@3

; 1178 :     assert (!(it->b == it->deque->rightblock &&
; 1179 :               it->index > it->deque->rightindex));
; 1180 : 
; 1181 :     item = it->b->data[it->index];

  00044	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  00048	4c 8b 41 68	 mov	 r8, QWORD PTR [rcx+104]
  0004c	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00051	49 8b 5c c0 10	 mov	 rbx, QWORD PTR [r8+rax*8+16]

; 1182 :     it->index++;

  00056	48 ff c0	 inc	 rax

; 1183 :     it->counter--;

  00059	48 ff ca	 dec	 rdx
  0005c	48 89 91 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rdx
  00063	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax

; 1184 :     if (it->index == BLOCKLEN && it->counter > 0) {

  00067	48 83 f8 3e	 cmp	 rax, 62			; 0000003eH
  0006b	75 15		 jne	 SHORT $LN1@dequeiter_@3
  0006d	48 85 d2	 test	 rdx, rdx
  00070	7e 10		 jle	 SHORT $LN1@dequeiter_@3

; 1185 :         assert (it->b->rightlink != NULL);
; 1186 :         it->b = it->b->rightlink;

  00072	49 8b 40 08	 mov	 rax, QWORD PTR [r8+8]

; 1187 :         it->index = 0;

  00076	48 c7 41 60 00
	00 00 00	 mov	 QWORD PTR [rcx+96], 0
  0007e	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
$LN1@dequeiter_@3:

; 1188 :     }
; 1189 :     Py_INCREF(item);

  00082	e8 00 00 00 00	 call	 _Py_PXCTX
  00087	85 c0		 test	 eax, eax
  00089	75 32		 jne	 SHORT $LN7@dequeiter_@3
  0008b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00092	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00099	4c 8b cb	 mov	 r9, rbx
  0009c	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000a2	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000aa	e8 00 00 00 00	 call	 _PyParallel_Guard
  000af	85 c0		 test	 eax, eax
  000b1	75 06		 jne	 SHORT $LN6@dequeiter_@3
  000b3	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000b7	74 04		 je	 SHORT $LN7@dequeiter_@3
$LN6@dequeiter_@3:
  000b9	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN7@dequeiter_@3:

; 1190 :     return item;

  000bd	48 8b c3	 mov	 rax, rbx
  000c0	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1191 : }

  000c5	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c9	c3		 ret	 0
dequeiter_next ENDP
_TEXT	ENDS
PUBLIC	??_C@_04FNGFNIDM@O?$CB?$HMn?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$dequeiter_new DD imagerel dequeiter_new
	DD	imagerel dequeiter_new+70
	DD	imagerel $unwind$dequeiter_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$dequeiter_new DD imagerel dequeiter_new+70
	DD	imagerel dequeiter_new+141
	DD	imagerel $chain$0$dequeiter_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$dequeiter_new DD imagerel dequeiter_new+141
	DD	imagerel dequeiter_new+172
	DD	imagerel $chain$2$dequeiter_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$dequeiter_new DD 020021H
	DD	0a7400H
	DD	imagerel dequeiter_new
	DD	imagerel dequeiter_new+70
	DD	imagerel $unwind$dequeiter_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$dequeiter_new DD 020521H
	DD	0a7405H
	DD	imagerel dequeiter_new
	DD	imagerel dequeiter_new+70
	DD	imagerel $unwind$dequeiter_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dequeiter_new DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT ??_C@_04FNGFNIDM@O?$CB?$HMn?$AA@
CONST	SEGMENT
??_C@_04FNGFNIDM@O?$CB?$HMn?$AA@ DB 'O!|n', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT dequeiter_new
_TEXT	SEGMENT
deque$ = 48
type$ = 80
args$ = 88
kwds$ = 96
index$ = 104
dequeiter_new PROC					; COMDAT

; 1195 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00006	48 8b c2	 mov	 rax, rdx

; 1196 :     Py_ssize_t i, index=0;
; 1197 :     PyObject *deque;
; 1198 :     dequeiterobject *it;
; 1199 :     if (!PyArg_ParseTuple(args, "O!|n", &deque_type, &deque, &index))

  00009	48 8d 4c 24 68	 lea	 rcx, QWORD PTR index$[rsp]
  0000e	4c 8d 4c 24 30	 lea	 r9, QWORD PTR deque$[rsp]
  00013	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00018	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:deque_type
  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04FNGFNIDM@O?$CB?$HMn?$AA@
  00026	33 db		 xor	 ebx, ebx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	48 89 5c 24 68	 mov	 QWORD PTR index$[rsp], rbx
  00030	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00035	85 c0		 test	 eax, eax
  00037	75 08		 jne	 SHORT $LN9@dequeiter_@4

; 1200 :         return NULL;

  00039	33 c0		 xor	 eax, eax

; 1220 : }

  0003b	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0003f	5b		 pop	 rbx
  00040	c3		 ret	 0
$LN9@dequeiter_@4:

; 1201 :     assert(type == &dequeiter_type);
; 1202 : 
; 1203 :     it = (dequeiterobject*)deque_iter((dequeobject *)deque);

  00041	48 8b 4c 24 30	 mov	 rcx, QWORD PTR deque$[rsp]
  00046	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  0004b	e8 00 00 00 00	 call	 deque_iter
  00050	48 8b f8	 mov	 rdi, rax

; 1204 :     if (!it)

  00053	48 85 c0	 test	 rax, rax

; 1205 :         return NULL;

  00056	74 47		 je	 SHORT $LN15@dequeiter_@4

; 1206 :     /* consume items from the queue */
; 1207 :     for(i=0; i<index; i++) {

  00058	48 39 5c 24 68	 cmp	 QWORD PTR index$[rsp], rbx
  0005d	7e 20		 jle	 SHORT $LN2@dequeiter_@4
  0005f	90		 npad	 1
$LL7@dequeiter_@4:

; 1208 :         PyObject *item = dequeiter_next(it);

  00060	48 8b cf	 mov	 rcx, rdi
  00063	e8 00 00 00 00	 call	 dequeiter_next

; 1209 :         if (item) {

  00068	48 85 c0	 test	 rax, rax
  0006b	74 20		 je	 SHORT $LN4@dequeiter_@4

; 1210 :             Py_DECREF(item);

  0006d	48 8b c8	 mov	 rcx, rax
  00070	e8 00 00 00 00	 call	 _Py_DecRef
  00075	48 ff c3	 inc	 rbx
  00078	48 3b 5c 24 68	 cmp	 rbx, QWORD PTR index$[rsp]
  0007d	7c e1		 jl	 SHORT $LL7@dequeiter_@4
$LN2@dequeiter_@4:

; 1215 :             } else
; 1216 :                 break;
; 1217 :         }
; 1218 :     }
; 1219 :     return (PyObject*)it;

  0007f	48 8b c7	 mov	 rax, rdi
  00082	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 1220 : }

  00087	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0008b	5b		 pop	 rbx
  0008c	c3		 ret	 0
$LN4@dequeiter_@4:

; 1211 :         } else {
; 1212 :             if (it->counter) {

  0008d	48 83 bf 80 00
	00 00 00	 cmp	 QWORD PTR [rdi+128], 0
  00095	74 e8		 je	 SHORT $LN2@dequeiter_@4

; 1213 :                 Py_DECREF(it);

  00097	48 8b cf	 mov	 rcx, rdi
  0009a	e8 00 00 00 00	 call	 _Py_DecRef
$LN15@dequeiter_@4:

; 1214 :                 return NULL;

  0009f	33 c0		 xor	 eax, eax
  000a1	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 1220 : }

  000a6	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000aa	5b		 pop	 rbx
  000ab	c3		 ret	 0
dequeiter_new ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT dequeiter_len
_TEXT	SEGMENT
it$ = 8
dequeiter_len PROC					; COMDAT

; 1225 :     return PyLong_FromSsize_t(it->counter);

  00000	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]

; 1226 : }

  00007	e9 00 00 00 00	 jmp	 PyLong_FromSsize_t
dequeiter_len ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT dequeiter_reduce
_TEXT	SEGMENT
it$ = 8
dequeiter_reduce PROC					; COMDAT

; 1233 :     return Py_BuildValue("O(On)", Py_TYPE(it), it->deque, it->deque->len - it->counter);

  00000	4c 8b 41 70	 mov	 r8, QWORD PTR [rcx+112]
  00004	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00008	4d 8b 88 80 00
	00 00		 mov	 r9, QWORD PTR [r8+128]
  0000f	4c 2b 89 80 00
	00 00		 sub	 r9, QWORD PTR [rcx+128]
  00016	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05IEPKLDIK@O?$CIOn?$CJ?$AA@

; 1234 : }

  0001d	e9 00 00 00 00	 jmp	 Py_BuildValue
dequeiter_reduce ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$deque_reviter DD imagerel deque_reviter
	DD	imagerel deque_reviter+184
	DD	imagerel $unwind$deque_reviter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_reviter DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_collectionsmodule.c
xdata	ENDS
;	COMDAT deque_reviter
_TEXT	SEGMENT
deque$ = 64
deque_reviter PROC					; COMDAT

; 1291 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b d9	 mov	 rbx, rcx

; 1292 :     dequeiterobject *it;
; 1293 : 
; 1294 :     it = PyObject_GC_New(dequeiterobject, &dequereviter_type);

  0000d	e8 00 00 00 00	 call	 _Py_PXCTX
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:dequereviter_type
  00019	85 c0		 test	 eax, eax
  0001b	74 07		 je	 SHORT $LN4@deque_revi
  0001d	e8 00 00 00 00	 call	 _PxObject_New
  00022	eb 05		 jmp	 SHORT $LN10@deque_revi
$LN4@deque_revi:
  00024	e8 00 00 00 00	 call	 _PyObject_GC_New
$LN10@deque_revi:
  00029	48 8b f8	 mov	 rdi, rax

; 1295 :     if (it == NULL)

  0002c	48 85 c0	 test	 rax, rax
  0002f	75 0b		 jne	 SHORT $LN1@deque_revi

; 1304 :     return (PyObject *)it;
; 1305 : }

  00031	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00036	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0003a	5f		 pop	 rdi
  0003b	c3		 ret	 0
$LN1@deque_revi:

; 1296 :         return NULL;
; 1297 :     it->b = deque->rightblock;

  0003c	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  00040	48 89 47 68	 mov	 QWORD PTR [rdi+104], rax

; 1298 :     it->index = deque->rightindex;

  00044	48 8b 43 78	 mov	 rax, QWORD PTR [rbx+120]
  00048	48 89 47 60	 mov	 QWORD PTR [rdi+96], rax

; 1299 :     Py_INCREF(deque);

  0004c	e8 00 00 00 00	 call	 _Py_PXCTX
  00051	85 c0		 test	 eax, eax
  00053	75 32		 jne	 SHORT $LN7@deque_revi
  00055	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0005c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00063	4c 8b cb	 mov	 r9, rbx
  00066	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0006c	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00074	e8 00 00 00 00	 call	 _PyParallel_Guard
  00079	85 c0		 test	 eax, eax
  0007b	75 06		 jne	 SHORT $LN6@deque_revi
  0007d	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00081	74 04		 je	 SHORT $LN7@deque_revi
$LN6@deque_revi:
  00083	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN7@deque_revi:

; 1300 :     it->deque = deque;

  00087	48 89 5f 70	 mov	 QWORD PTR [rdi+112], rbx

; 1301 :     it->state = deque->state;

  0008b	8b 83 90 00 00
	00		 mov	 eax, DWORD PTR [rbx+144]

; 1302 :     it->counter = deque->len;
; 1303 :     PyObject_GC_Track(it);

  00091	48 8b cf	 mov	 rcx, rdi
  00094	89 47 78	 mov	 DWORD PTR [rdi+120], eax
  00097	48 8b 83 80 00
	00 00		 mov	 rax, QWORD PTR [rbx+128]
  0009e	48 89 87 80 00
	00 00		 mov	 QWORD PTR [rdi+128], rax
  000a5	e8 00 00 00 00	 call	 PyObject_GC_Track

; 1304 :     return (PyObject *)it;
; 1305 : }

  000aa	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000af	48 8b c7	 mov	 rax, rdi
  000b2	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b6	5f		 pop	 rdi
  000b7	c3		 ret	 0
deque_reviter ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$dequereviter_next DD imagerel dequereviter_next
	DD	imagerel dequereviter_next+204
	DD	imagerel $unwind$dequereviter_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dequereviter_next DD 035401H
	DD	063454H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_collectionsmodule.c
xdata	ENDS
;	COMDAT dequereviter_next
_TEXT	SEGMENT
it$ = 64
dequereviter_next PROC					; COMDAT

; 1309 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1310 :     PyObject *item;
; 1311 :     if (it->counter == 0)

  00004	4c 8b 81 80 00
	00 00		 mov	 r8, QWORD PTR [rcx+128]
  0000b	48 8b d1	 mov	 rdx, rcx
  0000e	4d 85 c0	 test	 r8, r8

; 1312 :         return NULL;

  00011	74 2d		 je	 SHORT $LN10@dequerevit

; 1313 : 
; 1314 :     if (it->deque->state != it->state) {

  00013	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00017	8b 42 78	 mov	 eax, DWORD PTR [rdx+120]
  0001a	39 81 90 00 00
	00		 cmp	 DWORD PTR [rcx+144], eax
  00020	74 25		 je	 SHORT $LN2@dequerevit

; 1315 :         it->counter = 0;

  00022	48 c7 82 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rdx+128], 0

; 1316 :         PyErr_SetString(PyExc_RuntimeError,
; 1317 :                         "deque mutated during iteration");

  0002d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00034	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@NMAKCLDI@deque?5mutated?5during?5iteration?$AA@
  0003b	e8 00 00 00 00	 call	 PyErr_SetString
$LN10@dequerevit:

; 1318 :         return NULL;

  00040	33 c0		 xor	 eax, eax

; 1333 : }

  00042	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00046	c3		 ret	 0
$LN2@dequerevit:

; 1319 :     }
; 1320 :     assert (!(it->b == it->deque->leftblock &&
; 1321 :               it->index < it->deque->leftindex));
; 1322 : 
; 1323 :     item = it->b->data[it->index];

  00047	48 8b 42 60	 mov	 rax, QWORD PTR [rdx+96]
  0004b	48 8b 4a 68	 mov	 rcx, QWORD PTR [rdx+104]
  0004f	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00054	48 8b 5c c1 10	 mov	 rbx, QWORD PTR [rcx+rax*8+16]

; 1324 :     it->index--;

  00059	48 ff c8	 dec	 rax

; 1325 :     it->counter--;

  0005c	49 ff c8	 dec	 r8
  0005f	4c 89 82 80 00
	00 00		 mov	 QWORD PTR [rdx+128], r8
  00066	48 89 42 60	 mov	 QWORD PTR [rdx+96], rax

; 1326 :     if (it->index == -1 && it->counter > 0) {

  0006a	48 83 f8 ff	 cmp	 rax, -1
  0006e	75 14		 jne	 SHORT $LN1@dequerevit
  00070	4d 85 c0	 test	 r8, r8
  00073	7e 0f		 jle	 SHORT $LN1@dequerevit

; 1327 :         assert (it->b->leftlink != NULL);
; 1328 :         it->b = it->b->leftlink;

  00075	48 8b 01	 mov	 rax, QWORD PTR [rcx]

; 1329 :         it->index = BLOCKLEN - 1;

  00078	48 c7 42 60 3d
	00 00 00	 mov	 QWORD PTR [rdx+96], 61	; 0000003dH
  00080	48 89 42 68	 mov	 QWORD PTR [rdx+104], rax
$LN1@dequerevit:

; 1330 :     }
; 1331 :     Py_INCREF(item);

  00084	e8 00 00 00 00	 call	 _Py_PXCTX
  00089	85 c0		 test	 eax, eax
  0008b	75 32		 jne	 SHORT $LN7@dequerevit
  0008d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00094	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0009b	4c 8b cb	 mov	 r9, rbx
  0009e	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000a4	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000ac	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b1	85 c0		 test	 eax, eax
  000b3	75 06		 jne	 SHORT $LN6@dequerevit
  000b5	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000b9	74 04		 je	 SHORT $LN7@dequerevit
$LN6@dequerevit:
  000bb	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN7@dequerevit:

; 1332 :     return item;

  000bf	48 8b c3	 mov	 rax, rbx
  000c2	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1333 : }

  000c7	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000cb	c3		 ret	 0
dequereviter_next ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dequereviter_new DD imagerel dequereviter_new
	DD	imagerel dequereviter_new+70
	DD	imagerel $unwind$dequereviter_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$dequereviter_new DD imagerel dequereviter_new+70
	DD	imagerel dequereviter_new+141
	DD	imagerel $chain$0$dequereviter_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$dequereviter_new DD imagerel dequereviter_new+141
	DD	imagerel dequereviter_new+172
	DD	imagerel $chain$2$dequereviter_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$dequereviter_new DD 020021H
	DD	0a7400H
	DD	imagerel dequereviter_new
	DD	imagerel dequereviter_new+70
	DD	imagerel $unwind$dequereviter_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$dequereviter_new DD 020521H
	DD	0a7405H
	DD	imagerel dequereviter_new
	DD	imagerel dequereviter_new+70
	DD	imagerel $unwind$dequereviter_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dequereviter_new DD 020601H
	DD	030027206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT dequereviter_new
_TEXT	SEGMENT
deque$ = 48
type$ = 80
args$ = 88
kwds$ = 96
index$ = 104
dequereviter_new PROC					; COMDAT

; 1337 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00006	48 8b c2	 mov	 rax, rdx

; 1338 :     Py_ssize_t i, index=0;
; 1339 :     PyObject *deque;
; 1340 :     dequeiterobject *it;
; 1341 :     if (!PyArg_ParseTuple(args, "O!|n", &deque_type, &deque, &index))

  00009	48 8d 4c 24 68	 lea	 rcx, QWORD PTR index$[rsp]
  0000e	4c 8d 4c 24 30	 lea	 r9, QWORD PTR deque$[rsp]
  00013	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00018	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:deque_type
  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04FNGFNIDM@O?$CB?$HMn?$AA@
  00026	33 db		 xor	 ebx, ebx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	48 89 5c 24 68	 mov	 QWORD PTR index$[rsp], rbx
  00030	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00035	85 c0		 test	 eax, eax
  00037	75 08		 jne	 SHORT $LN9@dequerevit@2

; 1342 :         return NULL;

  00039	33 c0		 xor	 eax, eax

; 1362 : }

  0003b	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0003f	5b		 pop	 rbx
  00040	c3		 ret	 0
$LN9@dequerevit@2:

; 1343 :     assert(type == &dequereviter_type);
; 1344 : 
; 1345 :     it = (dequeiterobject*)deque_reviter((dequeobject *)deque);

  00041	48 8b 4c 24 30	 mov	 rcx, QWORD PTR deque$[rsp]
  00046	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  0004b	e8 00 00 00 00	 call	 deque_reviter
  00050	48 8b f8	 mov	 rdi, rax

; 1346 :     if (!it)

  00053	48 85 c0	 test	 rax, rax

; 1347 :         return NULL;

  00056	74 47		 je	 SHORT $LN15@dequerevit@2

; 1348 :     /* consume items from the queue */
; 1349 :     for(i=0; i<index; i++) {

  00058	48 39 5c 24 68	 cmp	 QWORD PTR index$[rsp], rbx
  0005d	7e 20		 jle	 SHORT $LN2@dequerevit@2
  0005f	90		 npad	 1
$LL7@dequerevit@2:

; 1350 :         PyObject *item = dequereviter_next(it);

  00060	48 8b cf	 mov	 rcx, rdi
  00063	e8 00 00 00 00	 call	 dequereviter_next

; 1351 :         if (item) {

  00068	48 85 c0	 test	 rax, rax
  0006b	74 20		 je	 SHORT $LN4@dequerevit@2

; 1352 :             Py_DECREF(item);

  0006d	48 8b c8	 mov	 rcx, rax
  00070	e8 00 00 00 00	 call	 _Py_DecRef
  00075	48 ff c3	 inc	 rbx
  00078	48 3b 5c 24 68	 cmp	 rbx, QWORD PTR index$[rsp]
  0007d	7c e1		 jl	 SHORT $LL7@dequerevit@2
$LN2@dequerevit@2:

; 1357 :             } else
; 1358 :                 break;
; 1359 :         }
; 1360 :     }
; 1361 :     return (PyObject*)it;

  0007f	48 8b c7	 mov	 rax, rdi
  00082	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 1362 : }

  00087	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0008b	5b		 pop	 rbx
  0008c	c3		 ret	 0
$LN4@dequerevit@2:

; 1353 :         } else {
; 1354 :             if (it->counter) {

  0008d	48 83 bf 80 00
	00 00 00	 cmp	 QWORD PTR [rdi+128], 0
  00095	74 e8		 je	 SHORT $LN2@dequerevit@2

; 1355 :                 Py_DECREF(it);

  00097	48 8b cf	 mov	 rcx, rdi
  0009a	e8 00 00 00 00	 call	 _Py_DecRef
$LN15@dequerevit@2:

; 1356 :                 return NULL;

  0009f	33 c0		 xor	 eax, eax
  000a1	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 1362 : }

  000a6	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000aa	5b		 pop	 rbx
  000ab	c3		 ret	 0
dequereviter_new ENDP
_TEXT	ENDS
EXTRN	PyErr_SetObject:PROC
EXTRN	PyExc_KeyError:QWORD
EXTRN	PyTuple_Pack:PROC
EXTRN	PyObject_SetItem:PROC
EXTRN	PyEval_CallObjectWithKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$defdict_missing DD imagerel defdict_missing
	DD	imagerel defdict_missing+159
	DD	imagerel $unwind$defdict_missing
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$defdict_missing DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT defdict_missing
_TEXT	SEGMENT
dd$ = 48
key$ = 56
defdict_missing PROC					; COMDAT

; 1425 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b f1	 mov	 rsi, rcx

; 1426 :     PyObject *factory = dd->default_factory;

  00012	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  00019	48 8b fa	 mov	 rdi, rdx

; 1427 :     PyObject *value;
; 1428 :     if (factory == NULL || factory == Py_None) {

  0001c	48 85 c9	 test	 rcx, rcx
  0001f	74 43		 je	 SHORT $LN4@defdict_mi
  00021	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00028	48 3b c8	 cmp	 rcx, rax
  0002b	74 37		 je	 SHORT $LN4@defdict_mi

; 1435 :         return NULL;
; 1436 :     }
; 1437 :     value = PyEval_CallObject(factory, NULL);

  0002d	45 33 c0	 xor	 r8d, r8d
  00030	33 d2		 xor	 edx, edx
  00032	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords
  00037	48 8b d8	 mov	 rbx, rax

; 1438 :     if (value == NULL)

  0003a	48 85 c0	 test	 rax, rax

; 1439 :         return value;

  0003d	74 4e		 je	 SHORT $LN8@defdict_mi

; 1440 :     if (PyObject_SetItem((PyObject *)dd, key, value) < 0) {

  0003f	4c 8b c0	 mov	 r8, rax
  00042	48 8b d7	 mov	 rdx, rdi
  00045	48 8b ce	 mov	 rcx, rsi
  00048	e8 00 00 00 00	 call	 PyObject_SetItem
  0004d	85 c0		 test	 eax, eax

; 1441 :         Py_DECREF(value);
; 1442 :         return NULL;

  0004f	78 34		 js	 SHORT $LN9@defdict_mi

; 1443 :     }
; 1444 :     return value;

  00051	48 8b c3	 mov	 rax, rbx

; 1445 : }

  00054	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00059	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0005e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00062	5f		 pop	 rdi
  00063	c3		 ret	 0
$LN4@defdict_mi:

; 1429 :         /* XXX Call dict.__missing__(key) */
; 1430 :         PyObject *tup;
; 1431 :         tup = PyTuple_Pack(1, key);

  00064	b9 01 00 00 00	 mov	 ecx, 1
  00069	e8 00 00 00 00	 call	 PyTuple_Pack
  0006e	48 8b d8	 mov	 rbx, rax

; 1432 :         if (!tup) return NULL;

  00071	48 85 c0	 test	 rax, rax
  00074	74 17		 je	 SHORT $LN8@defdict_mi

; 1433 :         PyErr_SetObject(PyExc_KeyError, tup);

  00076	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_KeyError
  0007d	48 8b d0	 mov	 rdx, rax
  00080	e8 00 00 00 00	 call	 PyErr_SetObject
$LN9@defdict_mi:

; 1434 :         Py_DECREF(tup);

  00085	48 8b cb	 mov	 rcx, rbx
  00088	e8 00 00 00 00	 call	 _Py_DecRef
$LN8@defdict_mi:

; 1445 : }

  0008d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00092	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00097	33 c0		 xor	 eax, eax
  00099	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009d	5f		 pop	 rdi
  0009e	c3		 ret	 0
defdict_missing ENDP
_TEXT	ENDS
EXTRN	PyObject_CallFunctionObjArgs:PROC
; Function compile flags: /Ogtpy
;	COMDAT defdict_copy
_TEXT	SEGMENT
dd$ = 8
defdict_copy PROC					; COMDAT

; 1452 :     /* This calls the object's class.  That only works for subclasses
; 1453 :        whose class constructor has the same signature.  Subclasses that
; 1454 :        define a different constructor signature must override copy().
; 1455 :     */
; 1456 : 
; 1457 :     if (dd->default_factory == NULL)

  00000	48 8b 91 80 00
	00 00		 mov	 rdx, QWORD PTR [rcx+128]

; 1458 :         return PyObject_CallFunctionObjArgs((PyObject*)Py_TYPE(dd), Py_None, dd, NULL);

  00007	45 33 c9	 xor	 r9d, r9d
  0000a	4c 8b c1	 mov	 r8, rcx
  0000d	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  00011	48 85 d2	 test	 rdx, rdx
  00014	75 07		 jne	 SHORT $LN1@defdict_co
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_NoneStruct
$LN1@defdict_co:

; 1459 :     return PyObject_CallFunctionObjArgs((PyObject*)Py_TYPE(dd),
; 1460 :                                         dd->default_factory, dd, NULL);
; 1461 : }

  0001d	e9 00 00 00 00	 jmp	 PyObject_CallFunctionObjArgs
defdict_copy ENDP
_TEXT	ENDS
PUBLIC	??_C@_02HCKGKOFO@?$CI?$CJ?$AA@			; `string'
EXTRN	_PyObject_CallMethodId:PROC
EXTRN	PyTuple_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$defdict_reduce DD imagerel defdict_reduce
	DD	imagerel defdict_reduce+154
	DD	imagerel $unwind$defdict_reduce
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$defdict_reduce DD imagerel defdict_reduce+154
	DD	imagerel defdict_reduce+257
	DD	imagerel $chain$1$defdict_reduce
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$defdict_reduce DD imagerel defdict_reduce+257
	DD	imagerel defdict_reduce+279
	DD	imagerel $chain$2$defdict_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$defdict_reduce DD 021H
	DD	imagerel defdict_reduce
	DD	imagerel defdict_reduce+154
	DD	imagerel $unwind$defdict_reduce
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$defdict_reduce DD 020521H
	DD	085405H
	DD	imagerel defdict_reduce
	DD	imagerel defdict_reduce+154
	DD	imagerel $unwind$defdict_reduce
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$defdict_reduce DD 087e01H
	DD	09647eH
	DD	0b7410H
	DD	0a3410H
	DD	0c00c5210H
xdata	ENDS
;	COMDAT ??_C@_02HCKGKOFO@?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_02HCKGKOFO@?$CI?$CJ?$AA@ DB '()', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT defdict_reduce
_TEXT	SEGMENT
dd$ = 64
defdict_reduce PROC					; COMDAT

; 1465 : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0000a	41 54		 push	 r12
  0000c	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1466 :     /* __reduce__ must return a 5-tuple as follows:
; 1467 : 
; 1468 :        - factory function
; 1469 :        - tuple of args for the factory function
; 1470 :        - additional state (here None)
; 1471 :        - sequence iterator (here None)
; 1472 :        - dictionary iterator (yielding successive (key, value) pairs
; 1473 : 
; 1474 :        This API is used by pickle.py and copy.py.
; 1475 : 
; 1476 :        For this to be useful with pickle.py, the default_factory
; 1477 :        must be picklable; e.g., None, a built-in, or a global
; 1478 :        function in a module or package.
; 1479 : 
; 1480 :        Both shallow and deep copying are supported, but for deep
; 1481 :        copying, the default_factory must be deep-copyable; e.g. None,
; 1482 :        or a built-in (functions are not copyable at this time).
; 1483 : 
; 1484 :        This only works for subclasses as long as their constructor
; 1485 :        signature is compatible; the first argument must be the
; 1486 :        optional default_factory, defaulting to None.
; 1487 :     */
; 1488 :     PyObject *args;
; 1489 :     PyObject *items;
; 1490 :     PyObject *iter;
; 1491 :     PyObject *result;
; 1492 :     _Py_IDENTIFIER(items);
; 1493 : 
; 1494 :     if (dd->default_factory == NULL || dd->default_factory == Py_None)

  00010	48 8b 91 80 00
	00 00		 mov	 rdx, QWORD PTR [rcx+128]
  00017	48 8b d9	 mov	 rbx, rcx
  0001a	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:_Py_NoneStruct
  00021	48 85 d2	 test	 rdx, rdx
  00024	74 11		 je	 SHORT $LN5@defdict_re
  00026	49 3b d4	 cmp	 rdx, r12
  00029	74 0c		 je	 SHORT $LN5@defdict_re

; 1496 :     else
; 1497 :         args = PyTuple_Pack(1, dd->default_factory);

  0002b	b9 01 00 00 00	 mov	 ecx, 1
  00030	e8 00 00 00 00	 call	 PyTuple_Pack
  00035	eb 07		 jmp	 SHORT $LN11@defdict_re
$LN5@defdict_re:

; 1495 :         args = PyTuple_New(0);

  00037	33 c9		 xor	 ecx, ecx
  00039	e8 00 00 00 00	 call	 PyTuple_New
$LN11@defdict_re:
  0003e	48 8b f8	 mov	 rdi, rax

; 1498 :     if (args == NULL)

  00041	48 85 c0	 test	 rax, rax
  00044	75 11		 jne	 SHORT $LN3@defdict_re

; 1517 : }

  00046	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0004b	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  00050	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00054	41 5c		 pop	 r12
  00056	c3		 ret	 0
$LN3@defdict_re:

; 1499 :         return NULL;
; 1500 :     items = _PyObject_CallMethodId((PyObject *)dd, &PyId_items, "()");

  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0005d	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00066	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_items@?1??defdict_reduce@@9@9
  0006b	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  0006f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02HCKGKOFO@?$CI?$CJ?$AA@
  00076	48 8b cb	 mov	 rcx, rbx
  00079	48 89 74 24 48	 mov	 QWORD PTR [rsp+72], rsi
  0007e	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  00083	48 8b f0	 mov	 rsi, rax

; 1501 :     if (items == NULL) {

  00086	48 85 c0	 test	 rax, rax
  00089	75 0c		 jne	 SHORT $LN2@defdict_re

; 1502 :         Py_DECREF(args);

  0008b	48 8b cf	 mov	 rcx, rdi
  0008e	e8 00 00 00 00	 call	 _Py_DecRef

; 1503 :         return NULL;

  00093	33 c0		 xor	 eax, eax
  00095	eb 6a		 jmp	 SHORT $LN9@defdict_re
$LN2@defdict_re:

; 1504 :     }
; 1505 :     iter = PyObject_GetIter(items);

  00097	48 8b c8	 mov	 rcx, rax
  0009a	48 89 6c 24 40	 mov	 QWORD PTR [rsp+64], rbp
  0009f	e8 00 00 00 00	 call	 PyObject_GetIter
  000a4	48 8b e8	 mov	 rbp, rax

; 1506 :     if (iter == NULL) {

  000a7	48 85 c0	 test	 rax, rax
  000aa	75 14		 jne	 SHORT $LN1@defdict_re

; 1507 :         Py_DECREF(items);

  000ac	48 8b ce	 mov	 rcx, rsi
  000af	e8 00 00 00 00	 call	 _Py_DecRef

; 1508 :         Py_DECREF(args);

  000b4	48 8b cf	 mov	 rcx, rdi
  000b7	e8 00 00 00 00	 call	 _Py_DecRef

; 1509 :         return NULL;

  000bc	33 c0		 xor	 eax, eax
  000be	eb 3c		 jmp	 SHORT $LN10@defdict_re
$LN1@defdict_re:

; 1510 :     }
; 1511 :     result = PyTuple_Pack(5, Py_TYPE(dd), args,
; 1512 :                           Py_None, Py_None, iter);

  000c0	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000c4	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000c9	4d 8b cc	 mov	 r9, r12
  000cc	4c 8b c7	 mov	 r8, rdi
  000cf	b9 05 00 00 00	 mov	 ecx, 5
  000d4	4c 89 64 24 20	 mov	 QWORD PTR [rsp+32], r12
  000d9	e8 00 00 00 00	 call	 PyTuple_Pack

; 1513 :     Py_DECREF(iter);

  000de	48 8b cd	 mov	 rcx, rbp
  000e1	48 8b d8	 mov	 rbx, rax
  000e4	e8 00 00 00 00	 call	 _Py_DecRef

; 1514 :     Py_DECREF(items);

  000e9	48 8b ce	 mov	 rcx, rsi
  000ec	e8 00 00 00 00	 call	 _Py_DecRef

; 1515 :     Py_DECREF(args);

  000f1	48 8b cf	 mov	 rcx, rdi
  000f4	e8 00 00 00 00	 call	 _Py_DecRef

; 1516 :     return result;

  000f9	48 8b c3	 mov	 rax, rbx
$LN10@defdict_re:
  000fc	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
$LN9@defdict_re:
  00101	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]

; 1517 : }

  00106	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0010b	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  00110	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00114	41 5c		 pop	 r12
  00116	c3		 ret	 0
defdict_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@HFLCIAAC@defdict_dealloc?$AA@		; `string'
EXTRN	PyDict_Type:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$defdict_dealloc DD imagerel defdict_dealloc
	DD	imagerel defdict_dealloc+66
	DD	imagerel $unwind$defdict_dealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$defdict_dealloc DD imagerel defdict_dealloc+66
	DD	imagerel defdict_dealloc+195
	DD	imagerel $chain$0$defdict_dealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$defdict_dealloc DD imagerel defdict_dealloc+195
	DD	imagerel defdict_dealloc+210
	DD	imagerel $chain$1$defdict_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$defdict_dealloc DD 021H
	DD	imagerel defdict_dealloc
	DD	imagerel defdict_dealloc+66
	DD	imagerel $unwind$defdict_dealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$defdict_dealloc DD 020521H
	DD	083405H
	DD	imagerel defdict_dealloc
	DD	imagerel defdict_dealloc+66
	DD	imagerel $unwind$defdict_dealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$defdict_dealloc DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT ??_C@_0BA@HFLCIAAC@defdict_dealloc?$AA@
CONST	SEGMENT
??_C@_0BA@HFLCIAAC@defdict_dealloc?$AA@ DB 'defdict_dealloc', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_collectionsmodule.c
CONST	ENDS
;	COMDAT defdict_dealloc
_TEXT	SEGMENT
dd$ = 64
defdict_dealloc PROC					; COMDAT

; 1540 : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1541 :     Py_CLEAR(dd->default_factory);

  00006	4c 8b 89 80 00
	00 00		 mov	 r9, QWORD PTR [rcx+128]
  0000d	48 8b f9	 mov	 rdi, rcx
  00010	4d 85 c9	 test	 r9, r9
  00013	0f 84 aa 00 00
	00		 je	 $LN3@defdict_de
  00019	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@LDKINGDC@?4?4?2Modules?2_collectionsmodule?4c?$AA@
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@HFLCIAAC@defdict_dealloc?$AA@
  00027	41 b8 05 06 00
	00		 mov	 r8d, 1541		; 00000605H
  0002d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00035	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003a	85 c0		 test	 eax, eax
  0003c	0f 85 81 00 00
	00		 jne	 $LN3@defdict_de
  00042	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00047	48 8b 9f 80 00
	00 00		 mov	 rbx, QWORD PTR [rdi+128]
  0004e	48 c7 87 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rdi+128], 0
  00059	e8 00 00 00 00	 call	 _Py_PXCTX
  0005e	85 c0		 test	 eax, eax
  00060	75 5c		 jne	 SHORT $LN18@defdict_de
  00062	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00066	a8 20		 test	 al, 32			; 00000020H
  00068	75 4c		 jne	 SHORT $LN11@defdict_de
  0006a	84 c0		 test	 al, al
  0006c	78 48		 js	 SHORT $LN11@defdict_de
  0006e	a8 02		 test	 al, 2
  00070	75 4c		 jne	 SHORT $LN18@defdict_de
  00072	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00076	75 46		 jne	 SHORT $LN18@defdict_de
  00078	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0007f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00086	4c 8b cb	 mov	 r9, rbx
  00089	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0008f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00097	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009c	48 8b cb	 mov	 rcx, rbx
  0009f	85 c0		 test	 eax, eax
  000a1	74 07		 je	 SHORT $LN16@defdict_de
  000a3	e8 00 00 00 00	 call	 _Px_Dealloc
  000a8	eb 14		 jmp	 SHORT $LN18@defdict_de
$LN16@defdict_de:
  000aa	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000ae	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000b4	eb 08		 jmp	 SHORT $LN18@defdict_de
$LN11@defdict_de:
  000b6	48 8b cb	 mov	 rcx, rbx
  000b9	e8 00 00 00 00	 call	 Px_DecRef
$LN18@defdict_de:
  000be	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN3@defdict_de:

; 1542 :     PyDict_Type.tp_dealloc((PyObject *)dd);

  000c3	48 8b cf	 mov	 rcx, rdi

; 1543 : }

  000c6	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ca	5f		 pop	 rdi
  000cb	48 ff 25 88 00
	00 00		 rex_jmp QWORD PTR PyDict_Type+136
defdict_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@DEADEBJI@defaultdict?$CI?$CFU?0?5?$CFU?$CJ?$AA@ ; `string'
PUBLIC	??_C@_03KHICJKCI@?4?4?4?$AA@			; `string'
PUBLIC	??_C@_04OHJIHAFH@None?$AA@			; `string'
EXTRN	PyObject_Repr:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$defdict_repr DD imagerel defdict_repr
	DD	imagerel defdict_repr+45
	DD	imagerel $unwind$defdict_repr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$defdict_repr DD imagerel defdict_repr+45
	DD	imagerel defdict_repr+155
	DD	imagerel $chain$0$defdict_repr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$defdict_repr DD imagerel defdict_repr+155
	DD	imagerel defdict_repr+211
	DD	imagerel $chain$2$defdict_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$defdict_repr DD 020021H
	DD	067400H
	DD	imagerel defdict_repr
	DD	imagerel defdict_repr+45
	DD	imagerel $unwind$defdict_repr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$defdict_repr DD 020521H
	DD	067405H
	DD	imagerel defdict_repr
	DD	imagerel defdict_repr+45
	DD	imagerel $unwind$defdict_repr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$defdict_repr DD 040a01H
	DD	07340aH
	DD	06006320aH
xdata	ENDS
;	COMDAT ??_C@_0BE@DEADEBJI@defaultdict?$CI?$CFU?0?5?$CFU?$CJ?$AA@
CONST	SEGMENT
??_C@_0BE@DEADEBJI@defaultdict?$CI?$CFU?0?5?$CFU?$CJ?$AA@ DB 'defaultdict'
	DB	'(%U, %U)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03KHICJKCI@?4?4?4?$AA@
CONST	SEGMENT
??_C@_03KHICJKCI@?4?4?4?$AA@ DB '...', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OHJIHAFH@None?$AA@
CONST	SEGMENT
??_C@_04OHJIHAFH@None?$AA@ DB 'None', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT defdict_repr
_TEXT	SEGMENT
dd$ = 48
defdict_repr PROC					; COMDAT

; 1547 : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b d9	 mov	 rbx, rcx

; 1548 :     PyObject *baserepr;
; 1549 :     PyObject *defrepr;
; 1550 :     PyObject *result;
; 1551 :     baserepr = PyDict_Type.tp_repr((PyObject *)dd);

  0000d	ff 15 b0 00 00
	00		 call	 QWORD PTR PyDict_Type+176
  00013	48 8b f0	 mov	 rsi, rax

; 1552 :     if (baserepr == NULL)

  00016	48 85 c0	 test	 rax, rax
  00019	75 0b		 jne	 SHORT $LN7@defdict_re@2

; 1579 : }

  0001b	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00020	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00024	5e		 pop	 rsi
  00025	c3		 ret	 0
$LN7@defdict_re@2:

; 1553 :         return NULL;
; 1554 :     if (dd->default_factory == NULL)

  00026	48 8b 8b 80 00
	00 00		 mov	 rcx, QWORD PTR [rbx+128]
  0002d	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  00032	48 85 c9	 test	 rcx, rcx
  00035	75 11		 jne	 SHORT $LN6@defdict_re@2

; 1555 :         defrepr = PyUnicode_FromString("None");

  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04OHJIHAFH@None?$AA@
  0003e	e8 00 00 00 00	 call	 PyUnicode_FromString
  00043	48 8b f8	 mov	 rdi, rax

; 1556 :     else

  00046	eb 34		 jmp	 SHORT $LN5@defdict_re@2
$LN6@defdict_re@2:

; 1557 :     {
; 1558 :         int status = Py_ReprEnter(dd->default_factory);

  00048	e8 00 00 00 00	 call	 Py_ReprEnter

; 1559 :         if (status != 0) {

  0004d	85 c0		 test	 eax, eax
  0004f	74 10		 je	 SHORT $LN4@defdict_re@2

; 1560 :             if (status < 0) {
; 1561 :                 Py_DECREF(baserepr);
; 1562 :                 return NULL;

  00051	78 2e		 js	 SHORT $LN12@defdict_re@2

; 1563 :             }
; 1564 :             defrepr = PyUnicode_FromString("...");

  00053	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03KHICJKCI@?4?4?4?$AA@
  0005a	e8 00 00 00 00	 call	 PyUnicode_FromString

; 1565 :         }
; 1566 :         else

  0005f	eb 0c		 jmp	 SHORT $LN11@defdict_re@2
$LN4@defdict_re@2:

; 1567 :             defrepr = PyObject_Repr(dd->default_factory);

  00061	48 8b 8b 80 00
	00 00		 mov	 rcx, QWORD PTR [rbx+128]
  00068	e8 00 00 00 00	 call	 PyObject_Repr
$LN11@defdict_re@2:

; 1568 :         Py_ReprLeave(dd->default_factory);

  0006d	48 8b 8b 80 00
	00 00		 mov	 rcx, QWORD PTR [rbx+128]
  00074	48 8b f8	 mov	 rdi, rax
  00077	e8 00 00 00 00	 call	 Py_ReprLeave
$LN5@defdict_re@2:

; 1569 :     }
; 1570 :     if (defrepr == NULL) {

  0007c	48 85 ff	 test	 rdi, rdi
  0007f	75 1a		 jne	 SHORT $LN1@defdict_re@2
$LN12@defdict_re@2:

; 1571 :         Py_DECREF(baserepr);

  00081	48 8b ce	 mov	 rcx, rsi
  00084	e8 00 00 00 00	 call	 _Py_DecRef
  00089	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 1572 :         return NULL;

  0008e	33 c0		 xor	 eax, eax

; 1579 : }

  00090	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00095	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00099	5e		 pop	 rsi
  0009a	c3		 ret	 0
$LN1@defdict_re@2:

; 1573 :     }
; 1574 :     result = PyUnicode_FromFormat("defaultdict(%U, %U)",
; 1575 :                                   defrepr, baserepr);

  0009b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@DEADEBJI@defaultdict?$CI?$CFU?0?5?$CFU?$CJ?$AA@
  000a2	4c 8b c6	 mov	 r8, rsi
  000a5	48 8b d7	 mov	 rdx, rdi
  000a8	e8 00 00 00 00	 call	 PyUnicode_FromFormat

; 1576 :     Py_DECREF(defrepr);

  000ad	48 8b cf	 mov	 rcx, rdi
  000b0	48 8b d8	 mov	 rbx, rax
  000b3	e8 00 00 00 00	 call	 _Py_DecRef

; 1577 :     Py_DECREF(baserepr);

  000b8	48 8b ce	 mov	 rcx, rsi
  000bb	e8 00 00 00 00	 call	 _Py_DecRef
  000c0	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 1578 :     return result;

  000c5	48 8b c3	 mov	 rax, rbx

; 1579 : }

  000c8	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000cd	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d1	5e		 pop	 rsi
  000d2	c3		 ret	 0
defdict_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@DNEHFJLD@defdict_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$defdict_traverse DD imagerel defdict_traverse
	DD	imagerel defdict_traverse+113
	DD	imagerel $unwind$defdict_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$defdict_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BB@DNEHFJLD@defdict_traverse?$AA@
CONST	SEGMENT
??_C@_0BB@DNEHFJLD@defdict_traverse?$AA@ DB 'defdict_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT defdict_traverse
_TEXT	SEGMENT
self$ = 48
visit$ = 56
arg$ = 64
defdict_traverse PROC					; COMDAT

; 1583 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 1584 :     Py_VISIT(((defdictobject *)self)->default_factory);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN3@defdict_tr
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@LDKINGDC@?4?4?2Modules?2_collectionsmodule?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@DNEHFJLD@defdict_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 30 06 00
	00		 mov	 r8d, 1584		; 00000630H
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@defdict_tr:
  0003d	48 8b 8b 80 00
	00 00		 mov	 rcx, QWORD PTR [rbx+128]
  00044	48 85 c9	 test	 rcx, rcx
  00047	74 09		 je	 SHORT $LN5@defdict_tr
  00049	48 8b d7	 mov	 rdx, rdi
  0004c	ff d6		 call	 rsi
  0004e	85 c0		 test	 eax, eax
  00050	75 0f		 jne	 SHORT $LN7@defdict_tr
$LN5@defdict_tr:

; 1585 :     return PyDict_Type.tp_traverse(self, visit, arg);

  00052	4c 8b c7	 mov	 r8, rdi
  00055	48 8b d6	 mov	 rdx, rsi
  00058	48 8b cb	 mov	 rcx, rbx
  0005b	ff 15 10 01 00
	00		 call	 QWORD PTR PyDict_Type+272
$LN7@defdict_tr:

; 1586 : }

  00061	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00066	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0006b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006f	5f		 pop	 rdi
  00070	c3		 ret	 0
defdict_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@ONKONDG@defdict_tp_clear?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$defdict_tp_clear DD imagerel defdict_tp_clear
	DD	imagerel defdict_tp_clear+66
	DD	imagerel $unwind$defdict_tp_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$defdict_tp_clear DD imagerel defdict_tp_clear+66
	DD	imagerel defdict_tp_clear+195
	DD	imagerel $chain$0$defdict_tp_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$defdict_tp_clear DD imagerel defdict_tp_clear+195
	DD	imagerel defdict_tp_clear+210
	DD	imagerel $chain$1$defdict_tp_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$defdict_tp_clear DD 021H
	DD	imagerel defdict_tp_clear
	DD	imagerel defdict_tp_clear+66
	DD	imagerel $unwind$defdict_tp_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$defdict_tp_clear DD 020521H
	DD	083405H
	DD	imagerel defdict_tp_clear
	DD	imagerel defdict_tp_clear+66
	DD	imagerel $unwind$defdict_tp_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$defdict_tp_clear DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT ??_C@_0BB@ONKONDG@defdict_tp_clear?$AA@
CONST	SEGMENT
??_C@_0BB@ONKONDG@defdict_tp_clear?$AA@ DB 'defdict_tp_clear', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_collectionsmodule.c
CONST	ENDS
;	COMDAT defdict_tp_clear
_TEXT	SEGMENT
dd$ = 64
defdict_tp_clear PROC					; COMDAT

; 1590 : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1591 :     Py_CLEAR(dd->default_factory);

  00006	4c 8b 89 80 00
	00 00		 mov	 r9, QWORD PTR [rcx+128]
  0000d	48 8b f9	 mov	 rdi, rcx
  00010	4d 85 c9	 test	 r9, r9
  00013	0f 84 aa 00 00
	00		 je	 $LN3@defdict_tp
  00019	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@LDKINGDC@?4?4?2Modules?2_collectionsmodule?4c?$AA@
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@ONKONDG@defdict_tp_clear?$AA@
  00027	41 b8 37 06 00
	00		 mov	 r8d, 1591		; 00000637H
  0002d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00035	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003a	85 c0		 test	 eax, eax
  0003c	0f 85 81 00 00
	00		 jne	 $LN3@defdict_tp
  00042	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00047	48 8b 9f 80 00
	00 00		 mov	 rbx, QWORD PTR [rdi+128]
  0004e	48 c7 87 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rdi+128], 0
  00059	e8 00 00 00 00	 call	 _Py_PXCTX
  0005e	85 c0		 test	 eax, eax
  00060	75 5c		 jne	 SHORT $LN18@defdict_tp
  00062	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00066	a8 20		 test	 al, 32			; 00000020H
  00068	75 4c		 jne	 SHORT $LN11@defdict_tp
  0006a	84 c0		 test	 al, al
  0006c	78 48		 js	 SHORT $LN11@defdict_tp
  0006e	a8 02		 test	 al, 2
  00070	75 4c		 jne	 SHORT $LN18@defdict_tp
  00072	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00076	75 46		 jne	 SHORT $LN18@defdict_tp
  00078	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0007f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00086	4c 8b cb	 mov	 r9, rbx
  00089	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0008f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00097	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009c	48 8b cb	 mov	 rcx, rbx
  0009f	85 c0		 test	 eax, eax
  000a1	74 07		 je	 SHORT $LN16@defdict_tp
  000a3	e8 00 00 00 00	 call	 _Px_Dealloc
  000a8	eb 14		 jmp	 SHORT $LN18@defdict_tp
$LN16@defdict_tp:
  000aa	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000ae	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000b4	eb 08		 jmp	 SHORT $LN18@defdict_tp
$LN11@defdict_tp:
  000b6	48 8b cb	 mov	 rcx, rbx
  000b9	e8 00 00 00 00	 call	 Px_DecRef
$LN18@defdict_tp:
  000be	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN3@defdict_tp:

; 1592 :     return PyDict_Type.tp_clear((PyObject *)dd);

  000c3	48 8b cf	 mov	 rcx, rdi

; 1593 : }

  000c6	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ca	5f		 pop	 rdi
  000cb	48 ff 25 18 01
	00 00		 rex_jmp QWORD PTR PyDict_Type+280
defdict_tp_clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@LJNCLGIM@first?5argument?5must?5be?5callable?$AA@ ; `string'
EXTRN	PySequence_GetSlice:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyCallable_Check:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$defdict_init DD imagerel defdict_init
	DD	imagerel defdict_init+392
	DD	imagerel $unwind$defdict_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$defdict_init DD 0a1801H
	DD	0c6418H
	DD	0b5418H
	DD	0a3418H
	DD	0d0145218H
	DD	07010c012H
xdata	ENDS
;	COMDAT ??_C@_0CA@LJNCLGIM@first?5argument?5must?5be?5callable?$AA@
CONST	SEGMENT
??_C@_0CA@LJNCLGIM@first?5argument?5must?5be?5callable?$AA@ DB 'first arg'
	DB	'ument must be callable', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_collectionsmodule.c
CONST	ENDS
;	COMDAT defdict_init
_TEXT	SEGMENT
self$ = 80
args$ = 88
kwds$ = 96
defdict_init PROC					; COMDAT

; 1597 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1598 :     defdictobject *dd = (defdictobject *)self;
; 1599 :     PyObject *olddefault = dd->default_factory;

  00018	48 8b 99 80 00
	00 00		 mov	 rbx, QWORD PTR [rcx+128]

; 1600 :     PyObject *newdefault = NULL;

  0001f	33 ff		 xor	 edi, edi
  00021	4d 8b e8	 mov	 r13, r8
  00024	48 8b f2	 mov	 rsi, rdx
  00027	4c 8b e1	 mov	 r12, rcx

; 1601 :     PyObject *newargs;
; 1602 :     int result;
; 1603 :     if (args == NULL || !PyTuple_Check(args))

  0002a	48 85 d2	 test	 rdx, rdx
  0002d	74 62		 je	 SHORT $LN13@defdict_in
  0002f	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  00033	f7 80 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rax+256], 67108864 ; 04000000H
  0003d	74 52		 je	 SHORT $LN13@defdict_in

; 1605 :     else {
; 1606 :         Py_ssize_t n = PyTuple_GET_SIZE(args);

  0003f	48 8b 6a 60	 mov	 rbp, QWORD PTR [rdx+96]

; 1607 :         if (n > 0) {

  00043	48 85 ed	 test	 rbp, rbp
  00046	7e 37		 jle	 SHORT $LN10@defdict_in

; 1608 :             newdefault = PyTuple_GET_ITEM(args, 0);

  00048	48 8b 7a 70	 mov	 rdi, QWORD PTR [rdx+112]

; 1609 :             if (!PyCallable_Check(newdefault) && newdefault != Py_None) {

  0004c	48 8b cf	 mov	 rcx, rdi
  0004f	e8 00 00 00 00	 call	 PyCallable_Check
  00054	85 c0		 test	 eax, eax
  00056	75 27		 jne	 SHORT $LN10@defdict_in
  00058	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0005f	48 3b f8	 cmp	 rdi, rax
  00062	74 1b		 je	 SHORT $LN10@defdict_in

; 1610 :                 PyErr_SetString(PyExc_TypeError,
; 1611 :                     "first argument must be callable");

  00064	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0006b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@LJNCLGIM@first?5argument?5must?5be?5callable?$AA@
  00072	e8 00 00 00 00	 call	 PyErr_SetString
$LN33@defdict_in:

; 1612 :                 return -1;

  00077	83 c8 ff	 or	 eax, -1
  0007a	e9 f0 00 00 00	 jmp	 $LN15@defdict_in
$LN10@defdict_in:

; 1613 :             }
; 1614 :         }
; 1615 :         newargs = PySequence_GetSlice(args, 1, n);

  0007f	4c 8b c5	 mov	 r8, rbp
  00082	ba 01 00 00 00	 mov	 edx, 1
  00087	48 8b ce	 mov	 rcx, rsi
  0008a	e8 00 00 00 00	 call	 PySequence_GetSlice
  0008f	eb 07		 jmp	 SHORT $LN32@defdict_in
$LN13@defdict_in:

; 1604 :         newargs = PyTuple_New(0);

  00091	33 c9		 xor	 ecx, ecx
  00093	e8 00 00 00 00	 call	 PyTuple_New
$LN32@defdict_in:
  00098	48 8b f0	 mov	 rsi, rax

; 1616 :     }
; 1617 :     if (newargs == NULL)

  0009b	48 85 c0	 test	 rax, rax

; 1618 :         return -1;

  0009e	74 d7		 je	 SHORT $LN33@defdict_in

; 1619 :     Py_XINCREF(newdefault);

  000a0	48 85 ff	 test	 rdi, rdi
  000a3	74 3b		 je	 SHORT $LN7@defdict_in
  000a5	e8 00 00 00 00	 call	 _Py_PXCTX
  000aa	85 c0		 test	 eax, eax
  000ac	75 32		 jne	 SHORT $LN7@defdict_in
  000ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000bc	4c 8b cf	 mov	 r9, rdi
  000bf	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000c5	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000cd	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d2	85 c0		 test	 eax, eax
  000d4	75 06		 jne	 SHORT $LN17@defdict_in
  000d6	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  000da	74 04		 je	 SHORT $LN7@defdict_in
$LN17@defdict_in:
  000dc	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN7@defdict_in:

; 1620 :     dd->default_factory = newdefault;
; 1621 :     result = PyDict_Type.tp_init(self, newargs, kwds);

  000e0	4d 8b c5	 mov	 r8, r13
  000e3	48 8b d6	 mov	 rdx, rsi
  000e6	49 8b cc	 mov	 rcx, r12
  000e9	49 89 bc 24 80
	00 00 00	 mov	 QWORD PTR [r12+128], rdi
  000f1	ff 15 80 01 00
	00		 call	 QWORD PTR PyDict_Type+384

; 1622 :     Py_DECREF(newargs);

  000f7	48 8b ce	 mov	 rcx, rsi
  000fa	8b f8		 mov	 edi, eax
  000fc	e8 00 00 00 00	 call	 _Py_DecRef

; 1623 :     Py_XDECREF(olddefault);

  00101	48 85 db	 test	 rbx, rbx
  00104	74 67		 je	 SHORT $LN3@defdict_in
  00106	e8 00 00 00 00	 call	 _Py_PXCTX
  0010b	85 c0		 test	 eax, eax
  0010d	75 5e		 jne	 SHORT $LN3@defdict_in
  0010f	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00113	f6 c1 20	 test	 cl, 32			; 00000020H
  00116	75 4d		 jne	 SHORT $LN25@defdict_in
  00118	84 c9		 test	 cl, cl
  0011a	78 49		 js	 SHORT $LN25@defdict_in
  0011c	f6 c1 02	 test	 cl, 2
  0011f	75 4c		 jne	 SHORT $LN3@defdict_in
  00121	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00125	75 46		 jne	 SHORT $LN3@defdict_in
  00127	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0012e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00135	4c 8b cb	 mov	 r9, rbx
  00138	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0013e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00146	e8 00 00 00 00	 call	 _PyParallel_Guard
  0014b	48 8b cb	 mov	 rcx, rbx
  0014e	85 c0		 test	 eax, eax
  00150	74 07		 je	 SHORT $LN30@defdict_in
  00152	e8 00 00 00 00	 call	 _Px_Dealloc
  00157	eb 14		 jmp	 SHORT $LN3@defdict_in
$LN30@defdict_in:
  00159	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0015d	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00163	eb 08		 jmp	 SHORT $LN3@defdict_in
$LN25@defdict_in:
  00165	48 8b cb	 mov	 rcx, rbx
  00168	e8 00 00 00 00	 call	 Px_DecRef
$LN3@defdict_in:

; 1624 :     return result;

  0016d	8b c7		 mov	 eax, edi
$LN15@defdict_in:

; 1625 : }

  0016f	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00174	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  00179	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  0017e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00182	41 5d		 pop	 r13
  00184	41 5c		 pop	 r12
  00186	5f		 pop	 rdi
  00187	c3		 ret	 0
defdict_init ENDP
_TEXT	ENDS
EXTRN	PyObject_GetAttrString:PROC
EXTRN	PyNumber_Add:PROC
EXTRN	PyDict_SetItem:PROC
EXTRN	PyDict_GetItem:PROC
EXTRN	_PyType_LookupId:PROC
EXTRN	PyLong_FromLong:PROC
EXTRN	PyArg_UnpackTuple:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_count_elements DD imagerel _count_elements
	DD	imagerel _count_elements+91
	DD	imagerel $unwind$_count_elements
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_count_elements DD imagerel _count_elements+91
	DD	imagerel _count_elements+118
	DD	imagerel $chain$0$_count_elements
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_count_elements DD imagerel _count_elements+118
	DD	imagerel _count_elements+155
	DD	imagerel $chain$1$_count_elements
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$_count_elements DD imagerel _count_elements+155
	DD	imagerel _count_elements+779
	DD	imagerel $chain$3$_count_elements
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$_count_elements DD imagerel _count_elements+779
	DD	imagerel _count_elements+867
	DD	imagerel $chain$4$_count_elements
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$_count_elements DD imagerel _count_elements+867
	DD	imagerel _count_elements+885
	DD	imagerel $chain$5$_count_elements
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$_count_elements DD imagerel _count_elements+885
	DD	imagerel _count_elements+977
	DD	imagerel $chain$7$_count_elements
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$_count_elements DD 020021H
	DD	08d400H
	DD	imagerel _count_elements
	DD	imagerel _count_elements+91
	DD	imagerel $unwind$_count_elements
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$_count_elements DD 021H
	DD	imagerel _count_elements+91
	DD	imagerel _count_elements+118
	DD	imagerel $chain$0$_count_elements
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$_count_elements DD 021H
	DD	imagerel _count_elements+118
	DD	imagerel _count_elements+155
	DD	imagerel $chain$1$_count_elements
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$_count_elements DD 040d21H
	DD	0a740dH
	DD	0103408H
	DD	imagerel _count_elements+118
	DD	imagerel _count_elements+155
	DD	imagerel $chain$1$_count_elements
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_count_elements DD 020521H
	DD	09c405H
	DD	imagerel _count_elements+91
	DD	imagerel _count_elements+118
	DD	imagerel $chain$0$_count_elements
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_count_elements DD 020521H
	DD	08d405H
	DD	imagerel _count_elements
	DD	imagerel _count_elements+91
	DD	imagerel $unwind$_count_elements
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_count_elements DD 050d01H
	DD	0f009a20dH
	DD	06005e007H
	DD	05004H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_collectionsmodule.c
xdata	ENDS
;	COMDAT _count_elements
_TEXT	SEGMENT
mapping_get$1$ = 48
dict_get$1$ = 56
self$ = 128
args$ = 136
mapping$ = 144
iterable$ = 152
_count_elements PROC					; COMDAT

; 1693 : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	55		 push	 rbp
  00004	56		 push	 rsi
  00005	41 56		 push	 r14
  00007	41 57		 push	 r15
  00009	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1694 :     _Py_IDENTIFIER(get);
; 1695 :     _Py_IDENTIFIER(__setitem__);
; 1696 :     PyObject *it, *iterable, *mapping, *oldval;
; 1697 :     PyObject *newval = NULL;
; 1698 :     PyObject *key = NULL;
; 1699 :     PyObject *zero = NULL;
; 1700 :     PyObject *one = NULL;
; 1701 :     PyObject *bound_get = NULL;
; 1702 :     PyObject *mapping_get;
; 1703 :     PyObject *dict_get;
; 1704 :     PyObject *mapping_setitem;
; 1705 :     PyObject *dict_setitem;
; 1706 : 
; 1707 :     if (!PyArg_UnpackTuple(args, "_count_elements", 2, 2, &mapping, &iterable))

  0000d	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  00011	48 8b c2	 mov	 rax, rdx
  00014	41 b9 02 00 00
	00		 mov	 r9d, 2
  0001a	49 89 4b b0	 mov	 QWORD PTR [r11-80], rcx
  0001e	49 8d 4b 18	 lea	 rcx, QWORD PTR [r11+24]
  00022	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@JNDEBPOJ@_count_elements?$AA@
  00029	49 89 4b a8	 mov	 QWORD PTR [r11-88], rcx
  0002d	45 8b c1	 mov	 r8d, r9d
  00030	48 8b c8	 mov	 rcx, rax
  00033	33 ed		 xor	 ebp, ebp
  00035	33 f6		 xor	 esi, esi
  00037	45 33 f6	 xor	 r14d, r14d
  0003a	45 33 ff	 xor	 r15d, r15d
  0003d	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00042	85 c0		 test	 eax, eax
  00044	75 0d		 jne	 SHORT $LN50@count_elem

; 1708 :         return NULL;

  00046	33 c0		 xor	 eax, eax

; 1783 : }

  00048	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0004c	41 5f		 pop	 r15
  0004e	41 5e		 pop	 r14
  00050	5e		 pop	 rsi
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
$LN50@count_elem:

; 1709 : 
; 1710 :     it = PyObject_GetIter(iterable);

  00053	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR iterable$[rsp]
  0005b	4c 89 6c 24 40	 mov	 QWORD PTR [rsp+64], r13
  00060	e8 00 00 00 00	 call	 PyObject_GetIter
  00065	4c 8b e8	 mov	 r13, rax

; 1711 :     if (it == NULL)

  00068	48 85 c0	 test	 rax, rax

; 1712 :         return NULL;

  0006b	0f 84 f2 02 00
	00		 je	 $LN74@count_elem

; 1713 : 
; 1714 :     one = PyLong_FromLong(1);

  00071	b9 01 00 00 00	 mov	 ecx, 1
  00076	4c 89 64 24 48	 mov	 QWORD PTR [rsp+72], r12
  0007b	e8 00 00 00 00	 call	 PyLong_FromLong
  00080	4c 8b e0	 mov	 r12, rax

; 1715 :     if (one == NULL)

  00083	48 85 c0	 test	 rax, rax
  00086	0f 84 7f 02 00
	00		 je	 $done$21544

; 1716 :         goto done;
; 1717 : 
; 1718 :     /* Only take the fast path when get() and __setitem__()
; 1719 :      * have not been overridden.
; 1720 :      */
; 1721 :     mapping_get = _PyType_LookupId(Py_TYPE(mapping), &PyId_get);

  0008c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00092	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0009b	48 89 9c 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rbx
  000a3	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  000a8	48 8b 3c c8	 mov	 rdi, QWORD PTR [rax+rcx*8]
  000ac	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR mapping$[rsp]
  000b4	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  000b8	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:?PyId_get@?1??_count_elements@@9@9
  000bd	48 03 df	 add	 rbx, rdi
  000c0	48 8b d3	 mov	 rdx, rbx
  000c3	e8 00 00 00 00	 call	 _PyType_LookupId

; 1722 :     dict_get = _PyType_LookupId(&PyDict_Type, &PyId_get);

  000c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyDict_Type
  000cf	48 8b d3	 mov	 rdx, rbx
  000d2	48 89 44 24 30	 mov	 QWORD PTR mapping_get$1$[rsp], rax
  000d7	e8 00 00 00 00	 call	 _PyType_LookupId

; 1723 :     mapping_setitem = _PyType_LookupId(Py_TYPE(mapping), &PyId___setitem__);

  000dc	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR mapping$[rsp]
  000e4	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  000e8	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:?PyId___setitem__@?1??_count_elements@@9@9
  000ed	48 89 44 24 38	 mov	 QWORD PTR dict_get$1$[rsp], rax
  000f2	48 03 df	 add	 rbx, rdi
  000f5	48 8b d3	 mov	 rdx, rbx
  000f8	e8 00 00 00 00	 call	 _PyType_LookupId

; 1724 :     dict_setitem = _PyType_LookupId(&PyDict_Type, &PyId___setitem__);

  000fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyDict_Type
  00104	48 8b d3	 mov	 rdx, rbx
  00107	48 8b f8	 mov	 rdi, rax
  0010a	e8 00 00 00 00	 call	 _PyType_LookupId
  0010f	4c 8b d8	 mov	 r11, rax

; 1725 : 
; 1726 :     if (mapping_get != NULL && mapping_get == dict_get &&
; 1727 :         mapping_setitem != NULL && mapping_setitem == dict_setitem) {

  00112	48 8b 44 24 30	 mov	 rax, QWORD PTR mapping_get$1$[rsp]
  00117	48 85 c0	 test	 rax, rax
  0011a	0f 84 f9 00 00
	00		 je	 $LN47@count_elem
  00120	48 3b 44 24 38	 cmp	 rax, QWORD PTR dict_get$1$[rsp]
  00125	0f 85 ee 00 00
	00		 jne	 $LN47@count_elem
  0012b	48 85 ff	 test	 rdi, rdi
  0012e	0f 84 e5 00 00
	00		 je	 $LN47@count_elem
  00134	49 3b fb	 cmp	 rdi, r11
  00137	0f 85 dc 00 00
	00		 jne	 $LN47@count_elem

; 1728 :         while (1) {
; 1729 :             key = PyIter_Next(it);

  0013d	49 8b cd	 mov	 rcx, r13
  00140	e8 00 00 00 00	 call	 PyIter_Next
  00145	48 8b f0	 mov	 rsi, rax

; 1730 :             if (key == NULL)

  00148	48 85 c0	 test	 rax, rax
  0014b	0f 84 ad 01 00
	00		 je	 $LN73@count_elem
  00151	66 66 66 66 66
	66 66 0f 1f 84
	00 00 00 00 00	 npad	 15
$LL46@count_elem:

; 1731 :                 break;
; 1732 :             oldval = PyDict_GetItem(mapping, key);

  00160	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR mapping$[rsp]
  00168	48 8b d6	 mov	 rdx, rsi
  0016b	e8 00 00 00 00	 call	 PyDict_GetItem

; 1733 :             if (oldval == NULL) {

  00170	48 85 c0	 test	 rax, rax
  00173	75 1e		 jne	 SHORT $LN43@count_elem

; 1734 :                 if (PyDict_SetItem(mapping, key, one) == -1)

  00175	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR mapping$[rsp]
  0017d	4d 8b c4	 mov	 r8, r12
  00180	48 8b d6	 mov	 rdx, rsi
  00183	e8 00 00 00 00	 call	 PyDict_SetItem
  00188	83 f8 ff	 cmp	 eax, -1
  0018b	0f 84 6d 01 00
	00		 je	 $LN73@count_elem

; 1735 :                     break;
; 1736 :             } else {

  00191	eb 65		 jmp	 SHORT $LN36@count_elem
$LN43@count_elem:

; 1737 :                 newval = PyNumber_Add(oldval, one);

  00193	49 8b d4	 mov	 rdx, r12
  00196	48 8b c8	 mov	 rcx, rax
  00199	e8 00 00 00 00	 call	 PyNumber_Add
  0019e	48 8b e8	 mov	 rbp, rax

; 1738 :                 if (newval == NULL)

  001a1	48 85 c0	 test	 rax, rax
  001a4	0f 84 54 01 00
	00		 je	 $LN73@count_elem

; 1739 :                     break;
; 1740 :                 if (PyDict_SetItem(mapping, key, newval) == -1)

  001aa	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR mapping$[rsp]
  001b2	4c 8b c0	 mov	 r8, rax
  001b5	48 8b d6	 mov	 rdx, rsi
  001b8	e8 00 00 00 00	 call	 PyDict_SetItem
  001bd	83 f8 ff	 cmp	 eax, -1
  001c0	0f 84 38 01 00
	00		 je	 $LN73@count_elem

; 1741 :                     break;
; 1742 :                 Py_CLEAR(newval);

  001c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@LDKINGDC@?4?4?2Modules?2_collectionsmodule?4c?$AA@
  001cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@JNDEBPOJ@_count_elements?$AA@
  001d4	4c 8b cd	 mov	 r9, rbp
  001d7	41 b8 ce 06 00
	00		 mov	 r8d, 1742		; 000006ceH
  001dd	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001e5	e8 00 00 00 00	 call	 _PyParallel_Guard
  001ea	85 c0		 test	 eax, eax
  001ec	75 0a		 jne	 SHORT $LN36@count_elem
  001ee	48 8b cd	 mov	 rcx, rbp
  001f1	33 ed		 xor	 ebp, ebp
  001f3	e8 00 00 00 00	 call	 _Py_DecRef
$LN36@count_elem:

; 1743 :             }
; 1744 :             Py_DECREF(key);

  001f8	48 8b ce	 mov	 rcx, rsi
  001fb	e8 00 00 00 00	 call	 _Py_DecRef
  00200	49 8b cd	 mov	 rcx, r13
  00203	e8 00 00 00 00	 call	 PyIter_Next
  00208	48 8b f0	 mov	 rsi, rax
  0020b	48 85 c0	 test	 rax, rax
  0020e	0f 85 4c ff ff
	ff		 jne	 $LL46@count_elem

; 1745 :         }
; 1746 :     } else {

  00214	e9 e5 00 00 00	 jmp	 $LN73@count_elem
$LN47@count_elem:

; 1747 :         bound_get = PyObject_GetAttrString(mapping, "get");

  00219	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR mapping$[rsp]
  00221	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03HNAFFKGA@get?$AA@
  00228	e8 00 00 00 00	 call	 PyObject_GetAttrString
  0022d	4c 8b f8	 mov	 r15, rax

; 1748 :         if (bound_get == NULL)

  00230	48 85 c0	 test	 rax, rax
  00233	0f 84 c5 00 00
	00		 je	 $LN73@count_elem

; 1749 :             goto done;
; 1750 : 
; 1751 :         zero = PyLong_FromLong(0);

  00239	33 c9		 xor	 ecx, ecx
  0023b	e8 00 00 00 00	 call	 PyLong_FromLong
  00240	4c 8b f0	 mov	 r14, rax

; 1752 :         if (zero == NULL)

  00243	48 85 c0	 test	 rax, rax
  00246	0f 84 b2 00 00
	00		 je	 $LN73@count_elem

; 1753 :             goto done;
; 1754 : 
; 1755 :         while (1) {
; 1756 :             key = PyIter_Next(it);

  0024c	49 8b cd	 mov	 rcx, r13
  0024f	e8 00 00 00 00	 call	 PyIter_Next
  00254	48 8b f0	 mov	 rsi, rax

; 1757 :             if (key == NULL)

  00257	48 85 c0	 test	 rax, rax
  0025a	0f 84 9e 00 00
	00		 je	 $LN73@count_elem
$LL31@count_elem:

; 1758 :                 break;
; 1759 :             oldval = PyObject_CallFunctionObjArgs(bound_get, key, zero, NULL);

  00260	45 33 c9	 xor	 r9d, r9d
  00263	4d 8b c6	 mov	 r8, r14
  00266	48 8b d6	 mov	 rdx, rsi
  00269	49 8b cf	 mov	 rcx, r15
  0026c	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  00271	48 8b d8	 mov	 rbx, rax

; 1760 :             if (oldval == NULL)

  00274	48 85 c0	 test	 rax, rax
  00277	0f 84 81 00 00
	00		 je	 $LN73@count_elem

; 1761 :                 break;
; 1762 :             newval = PyNumber_Add(oldval, one);

  0027d	49 8b d4	 mov	 rdx, r12
  00280	48 8b c8	 mov	 rcx, rax
  00283	e8 00 00 00 00	 call	 PyNumber_Add

; 1763 :             Py_DECREF(oldval);

  00288	48 8b cb	 mov	 rcx, rbx
  0028b	48 8b e8	 mov	 rbp, rax
  0028e	e8 00 00 00 00	 call	 _Py_DecRef

; 1764 :             if (newval == NULL)

  00293	48 85 ed	 test	 rbp, rbp
  00296	74 66		 je	 SHORT $LN73@count_elem

; 1765 :                 break;
; 1766 :             if (PyObject_SetItem(mapping, key, newval) == -1)

  00298	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR mapping$[rsp]
  002a0	4c 8b c5	 mov	 r8, rbp
  002a3	48 8b d6	 mov	 rdx, rsi
  002a6	e8 00 00 00 00	 call	 PyObject_SetItem
  002ab	83 f8 ff	 cmp	 eax, -1
  002ae	74 4e		 je	 SHORT $LN73@count_elem

; 1767 :                 break;
; 1768 :             Py_CLEAR(newval);

  002b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@LDKINGDC@?4?4?2Modules?2_collectionsmodule?4c?$AA@
  002b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@JNDEBPOJ@_count_elements?$AA@
  002be	4c 8b cd	 mov	 r9, rbp
  002c1	41 b8 e8 06 00
	00		 mov	 r8d, 1768		; 000006e8H
  002c7	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002cf	e8 00 00 00 00	 call	 _PyParallel_Guard
  002d4	85 c0		 test	 eax, eax
  002d6	75 0a		 jne	 SHORT $LN24@count_elem
  002d8	48 8b cd	 mov	 rcx, rbp
  002db	33 ed		 xor	 ebp, ebp
  002dd	e8 00 00 00 00	 call	 _Py_DecRef
$LN24@count_elem:

; 1769 :             Py_DECREF(key);

  002e2	48 8b ce	 mov	 rcx, rsi
  002e5	e8 00 00 00 00	 call	 _Py_DecRef
  002ea	49 8b cd	 mov	 rcx, r13
  002ed	e8 00 00 00 00	 call	 PyIter_Next
  002f2	48 8b f0	 mov	 rsi, rax
  002f5	48 85 c0	 test	 rax, rax
  002f8	0f 85 62 ff ff
	ff		 jne	 $LL31@count_elem
$LN73@count_elem:
  002fe	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]
  00303	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR [rsp+128]
$done$21544:

; 1770 :         }
; 1771 :     }
; 1772 : 
; 1773 : done:
; 1774 :     Py_DECREF(it);

  0030b	49 8b cd	 mov	 rcx, r13
  0030e	e8 00 00 00 00	 call	 _Py_DecRef

; 1775 :     Py_XDECREF(key);

  00313	48 85 f6	 test	 rsi, rsi
  00316	74 08		 je	 SHORT $LN20@count_elem
  00318	48 8b ce	 mov	 rcx, rsi
  0031b	e8 00 00 00 00	 call	 _Py_DecRef
$LN20@count_elem:

; 1776 :     Py_XDECREF(newval);

  00320	48 85 ed	 test	 rbp, rbp
  00323	74 08		 je	 SHORT $LN16@count_elem
  00325	48 8b cd	 mov	 rcx, rbp
  00328	e8 00 00 00 00	 call	 _Py_DecRef
$LN16@count_elem:

; 1777 :     Py_XDECREF(bound_get);

  0032d	4d 85 ff	 test	 r15, r15
  00330	74 08		 je	 SHORT $LN12@count_elem
  00332	49 8b cf	 mov	 rcx, r15
  00335	e8 00 00 00 00	 call	 _Py_DecRef
$LN12@count_elem:

; 1778 :     Py_XDECREF(zero);

  0033a	4d 85 f6	 test	 r14, r14
  0033d	74 08		 je	 SHORT $LN8@count_elem
  0033f	49 8b ce	 mov	 rcx, r14
  00342	e8 00 00 00 00	 call	 _Py_DecRef
$LN8@count_elem:

; 1779 :     Py_XDECREF(one);

  00347	4d 85 e4	 test	 r12, r12
  0034a	74 08		 je	 SHORT $LN4@count_elem
  0034c	49 8b cc	 mov	 rcx, r12
  0034f	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@count_elem:

; 1780 :     if (PyErr_Occurred())

  00354	e8 00 00 00 00	 call	 PyErr_Occurred
  00359	4c 8b 64 24 48	 mov	 r12, QWORD PTR [rsp+72]
  0035e	48 85 c0	 test	 rax, rax
  00361	74 12		 je	 SHORT $LN1@count_elem
$LN74@count_elem:

; 1781 :         return NULL;

  00363	33 c0		 xor	 eax, eax
  00365	4c 8b 6c 24 40	 mov	 r13, QWORD PTR [rsp+64]

; 1783 : }

  0036a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0036e	41 5f		 pop	 r15
  00370	41 5e		 pop	 r14
  00372	5e		 pop	 rsi
  00373	5d		 pop	 rbp
  00374	c3		 ret	 0
$LN1@count_elem:

; 1782 :     Py_RETURN_NONE;

  00375	e8 00 00 00 00	 call	 _Py_PXCTX
  0037a	85 c0		 test	 eax, eax
  0037c	75 3c		 jne	 SHORT $LN54@count_elem
  0037e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00385	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0038c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00393	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00399	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  003a1	e8 00 00 00 00	 call	 _PyParallel_Guard
  003a6	85 c0		 test	 eax, eax
  003a8	75 09		 jne	 SHORT $LN53@count_elem
  003aa	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  003b1	74 07		 je	 SHORT $LN54@count_elem
$LN53@count_elem:
  003b3	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN54@count_elem:
  003ba	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  003c1	4c 8b 6c 24 40	 mov	 r13, QWORD PTR [rsp+64]

; 1783 : }

  003c6	48 83 c4 58	 add	 rsp, 88			; 00000058H
  003ca	41 5f		 pop	 r15
  003cc	41 5e		 pop	 r14
  003ce	5e		 pop	 rsi
  003cf	5d		 pop	 rbp
  003d0	c3		 ret	 0
_count_elements ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@OKCEKBIC@_deque_reverse_iterator?$AA@	; `string'
PUBLIC	??_C@_0BA@HOOPPHCI@_deque_iterator?$AA@		; `string'
PUBLIC	??_C@_0M@KFHODHA@defaultdict?$AA@		; `string'
PUBLIC	??_C@_05BFLJBJIN@deque?$AA@			; `string'
PUBLIC	PyInit__collections
EXTRN	PyModule_AddObject:PROC
EXTRN	PyType_Ready:PROC
EXTRN	PyModule_Create2:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyInit__collections DD imagerel $LN25
	DD	imagerel $LN25+502
	DD	imagerel $unwind$PyInit__collections
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit__collections DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0BI@OKCEKBIC@_deque_reverse_iterator?$AA@
CONST	SEGMENT
??_C@_0BI@OKCEKBIC@_deque_reverse_iterator?$AA@ DB '_deque_reverse_iterat'
	DB	'or', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HOOPPHCI@_deque_iterator?$AA@
CONST	SEGMENT
??_C@_0BA@HOOPPHCI@_deque_iterator?$AA@ DB '_deque_iterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KFHODHA@defaultdict?$AA@
CONST	SEGMENT
??_C@_0M@KFHODHA@defaultdict?$AA@ DB 'defaultdict', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05BFLJBJIN@deque?$AA@
CONST	SEGMENT
??_C@_05BFLJBJIN@deque?$AA@ DB 'deque', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_collectionsmodule.c
CONST	ENDS
;	COMDAT PyInit__collections
_TEXT	SEGMENT
PyInit__collections PROC				; COMDAT

; 1812 : {

$LN25:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1813 :     PyObject *m;
; 1814 : 
; 1815 :     m = PyModule_Create(&_collectionsmodule);

  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_collectionsmodule
  0000d	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00012	e8 00 00 00 00	 call	 PyModule_Create2
  00017	48 8b d8	 mov	 rbx, rax

; 1816 :     if (m == NULL)

  0001a	48 85 c0	 test	 rax, rax
  0001d	75 08		 jne	 SHORT $LN5@PyInit__co
$LN24@PyInit__co:

; 1817 :         return NULL;

  0001f	33 c0		 xor	 eax, eax

; 1841 : }

  00021	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00025	5b		 pop	 rbx
  00026	c3		 ret	 0
$LN5@PyInit__co:

; 1818 : 
; 1819 :     if (PyType_Ready(&deque_type) < 0)

  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:deque_type
  0002e	e8 00 00 00 00	 call	 PyType_Ready
  00033	85 c0		 test	 eax, eax

; 1820 :         return NULL;

  00035	78 e8		 js	 SHORT $LN24@PyInit__co

; 1821 :     Py_INCREF(&deque_type);

  00037	e8 00 00 00 00	 call	 _Py_PXCTX
  0003c	85 c0		 test	 eax, eax
  0003e	75 3c		 jne	 SHORT $LN9@PyInit__co
  00040	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:deque_type
  00047	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00055	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0005b	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00063	e8 00 00 00 00	 call	 _PyParallel_Guard
  00068	85 c0		 test	 eax, eax
  0006a	75 09		 jne	 SHORT $LN8@PyInit__co
  0006c	f6 05 20 00 00
	00 20		 test	 BYTE PTR deque_type+32, 32 ; 00000020H
  00073	74 07		 je	 SHORT $LN9@PyInit__co
$LN8@PyInit__co:
  00075	48 ff 05 50 00
	00 00		 inc	 QWORD PTR deque_type+80
$LN9@PyInit__co:

; 1822 :     PyModule_AddObject(m, "deque", (PyObject *)&deque_type);

  0007c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:deque_type
  00083	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05BFLJBJIN@deque?$AA@
  0008a	48 8b cb	 mov	 rcx, rbx
  0008d	e8 00 00 00 00	 call	 PyModule_AddObject

; 1823 : 
; 1824 :     defdict_type.tp_base = &PyDict_Type;

  00092	4c 8d 1d 00 00
	00 00		 lea	 r11, OFFSET FLAT:PyDict_Type

; 1825 :     if (PyType_Ready(&defdict_type) < 0)

  00099	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:defdict_type
  000a0	4c 89 1d 58 01
	00 00		 mov	 QWORD PTR defdict_type+344, r11
  000a7	e8 00 00 00 00	 call	 PyType_Ready
  000ac	85 c0		 test	 eax, eax

; 1826 :         return NULL;

  000ae	0f 88 6b ff ff
	ff		 js	 $LN24@PyInit__co

; 1827 :     Py_INCREF(&defdict_type);

  000b4	e8 00 00 00 00	 call	 _Py_PXCTX
  000b9	85 c0		 test	 eax, eax
  000bb	75 3c		 jne	 SHORT $LN13@PyInit__co
  000bd	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:defdict_type
  000c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000d2	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000d8	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000e0	e8 00 00 00 00	 call	 _PyParallel_Guard
  000e5	85 c0		 test	 eax, eax
  000e7	75 09		 jne	 SHORT $LN12@PyInit__co
  000e9	f6 05 20 00 00
	00 20		 test	 BYTE PTR defdict_type+32, 32 ; 00000020H
  000f0	74 07		 je	 SHORT $LN13@PyInit__co
$LN12@PyInit__co:
  000f2	48 ff 05 50 00
	00 00		 inc	 QWORD PTR defdict_type+80
$LN13@PyInit__co:

; 1828 :     PyModule_AddObject(m, "defaultdict", (PyObject *)&defdict_type);

  000f9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:defdict_type
  00100	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@KFHODHA@defaultdict?$AA@
  00107	48 8b cb	 mov	 rcx, rbx
  0010a	e8 00 00 00 00	 call	 PyModule_AddObject

; 1829 : 
; 1830 :     if (PyType_Ready(&dequeiter_type) < 0)

  0010f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:dequeiter_type
  00116	e8 00 00 00 00	 call	 PyType_Ready
  0011b	85 c0		 test	 eax, eax

; 1831 :         return NULL;

  0011d	0f 88 fc fe ff
	ff		 js	 $LN24@PyInit__co

; 1832 :     Py_INCREF(&dequeiter_type);

  00123	e8 00 00 00 00	 call	 _Py_PXCTX
  00128	85 c0		 test	 eax, eax
  0012a	75 3c		 jne	 SHORT $LN17@PyInit__co
  0012c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:dequeiter_type
  00133	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0013a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00141	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00147	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0014f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00154	85 c0		 test	 eax, eax
  00156	75 09		 jne	 SHORT $LN16@PyInit__co
  00158	f6 05 20 00 00
	00 20		 test	 BYTE PTR dequeiter_type+32, 32 ; 00000020H
  0015f	74 07		 je	 SHORT $LN17@PyInit__co
$LN16@PyInit__co:
  00161	48 ff 05 50 00
	00 00		 inc	 QWORD PTR dequeiter_type+80
$LN17@PyInit__co:

; 1833 :     PyModule_AddObject(m, "_deque_iterator", (PyObject *)&dequeiter_type);

  00168	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:dequeiter_type
  0016f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@HOOPPHCI@_deque_iterator?$AA@
  00176	48 8b cb	 mov	 rcx, rbx
  00179	e8 00 00 00 00	 call	 PyModule_AddObject

; 1834 : 
; 1835 :     if (PyType_Ready(&dequereviter_type) < 0)

  0017e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:dequereviter_type
  00185	e8 00 00 00 00	 call	 PyType_Ready
  0018a	85 c0		 test	 eax, eax

; 1836 :         return NULL;

  0018c	0f 88 8d fe ff
	ff		 js	 $LN24@PyInit__co

; 1837 :     Py_INCREF(&dequereviter_type);

  00192	e8 00 00 00 00	 call	 _Py_PXCTX
  00197	85 c0		 test	 eax, eax
  00199	75 3c		 jne	 SHORT $LN21@PyInit__co
  0019b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:dequereviter_type
  001a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  001b0	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  001b6	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  001be	e8 00 00 00 00	 call	 _PyParallel_Guard
  001c3	85 c0		 test	 eax, eax
  001c5	75 09		 jne	 SHORT $LN20@PyInit__co
  001c7	f6 05 20 00 00
	00 20		 test	 BYTE PTR dequereviter_type+32, 32 ; 00000020H
  001ce	74 07		 je	 SHORT $LN21@PyInit__co
$LN20@PyInit__co:
  001d0	48 ff 05 50 00
	00 00		 inc	 QWORD PTR dequereviter_type+80
$LN21@PyInit__co:

; 1838 :     PyModule_AddObject(m, "_deque_reverse_iterator", (PyObject *)&dequereviter_type);

  001d7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:dequereviter_type
  001de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@OKCEKBIC@_deque_reverse_iterator?$AA@
  001e5	48 8b cb	 mov	 rcx, rbx
  001e8	e8 00 00 00 00	 call	 PyModule_AddObject

; 1839 : 
; 1840 :     return m;

  001ed	48 8b c3	 mov	 rax, rbx

; 1841 : }

  001f0	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001f4	5b		 pop	 rbx
  001f5	c3		 ret	 0
PyInit__collections ENDP
_TEXT	ENDS
END
