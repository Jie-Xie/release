; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BB@CKNECNBG@?$DMdummy?5key?$DO?5type?$AA@ ; `string'
PUBLIC	??_C@_0M@JJEDNKGI@dict_values?$AA@		; `string'
PUBLIC	??_C@_0L@KKKCFCKM@dict_items?$AA@		; `string'
PUBLIC	??_C@_09DCAKNFLJ@dict_keys?$AA@			; `string'
PUBLIC	??_C@_0L@EMANFHEK@isdisjoint?$AA@		; `string'
PUBLIC	??_C@_0BM@OJODNHLP@symmetric_difference_update?$AA@ ; `string'
PUBLIC	??_C@_0BE@EMPOGGNJ@intersection_update?$AA@	; `string'
PUBLIC	??_C@_0BC@LNEPHBNC@difference_update?$AA@	; `string'
PUBLIC	??_C@_0BC@HJGBEDCD@dict_itemiterator?$AA@	; `string'
PUBLIC	??_C@_0BD@EEPKNHCO@dict_valueiterator?$AA@	; `string'
PUBLIC	??_C@_0BB@HHJBMJDG@dict_keyiterator?$AA@	; `string'
PUBLIC	??_C@_0L@NNMACJIG@__reduce__?$AA@		; `string'
PUBLIC	??_C@_0BA@BJLPBKGK@__length_hint__?$AA@		; `string'
PUBLIC	??_C@_04BCIDKIGN@dict?$AA@			; `string'
PUBLIC	PyDict_Contains
PUBLIC	??_C@_04COAGEIMF@copy?$AA@			; `string'
PUBLIC	??_C@_05MEHLAELG@clear?$AA@			; `string'
PUBLIC	??_C@_08KMEGJNJN@fromkeys?$AA@			; `string'
PUBLIC	??_C@_06HDLLMMEJ@update?$AA@			; `string'
PUBLIC	??_C@_06GEKOPAHD@values?$AA@			; `string'
PUBLIC	??_C@_05CFHBDDLG@items?$AA@			; `string'
PUBLIC	??_C@_07KOGBLOBN@popitem?$AA@			; `string'
PUBLIC	??_C@_03NJDAHFJE@pop?$AA@			; `string'
PUBLIC	??_C@_0L@MIJGIGKN@setdefault?$AA@		; `string'
PUBLIC	??_C@_03HNAFFKGA@get?$AA@			; `string'
PUBLIC	??_C@_0L@HOGGIPGN@__sizeof__?$AA@		; `string'
PUBLIC	??_C@_0M@GAJGCIJD@__getitem__?$AA@		; `string'
PUBLIC	??_C@_0N@MCIOADFH@__contains__?$AA@		; `string'
PUBLIC	??_C@_04IEPFDAGF@keys?$AA@			; `string'
PUBLIC	??_C@_0M@PPMOEBOH@__missing__?$AA@		; `string'
PUBLIC	PyDict_Type
PUBLIC	PyDictIterKey_Type
PUBLIC	PyDictIterValue_Type
PUBLIC	PyDictIterItem_Type
PUBLIC	PyDictKeys_Type
PUBLIC	PyDictItems_Type
PUBLIC	PyDictValues_Type
EXTRN	PyObject_SelfIter:PROC
EXTRN	PyObject_GC_Del:PROC
EXTRN	PyType_GenericAlloc:PROC
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyObject_HashNotImplemented:PROC
EXTRN	PyType_Type:BYTE
_BSS	SEGMENT
numfree	DD	01H DUP (?)
	ALIGN	8

empty_values DQ	01H DUP (?)
dictvalues_methods DB 020H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0BB@CKNECNBG@?$DMdummy?5key?$DO?5type?$AA@
CONST	SEGMENT
??_C@_0BB@CKNECNBG@?$DMdummy?5key?$DO?5type?$AA@ DB '<dummy key> type', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JJEDNKGI@dict_values?$AA@
CONST	SEGMENT
??_C@_0M@JJEDNKGI@dict_values?$AA@ DB 'dict_values', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KKKCFCKM@dict_items?$AA@
CONST	SEGMENT
??_C@_0L@KKKCFCKM@dict_items?$AA@ DB 'dict_items', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09DCAKNFLJ@dict_keys?$AA@
CONST	SEGMENT
??_C@_09DCAKNFLJ@dict_keys?$AA@ DB 'dict_keys', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EMANFHEK@isdisjoint?$AA@
CONST	SEGMENT
??_C@_0L@EMANFHEK@isdisjoint?$AA@ DB 'isdisjoint', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@OJODNHLP@symmetric_difference_update?$AA@
CONST	SEGMENT
??_C@_0BM@OJODNHLP@symmetric_difference_update?$AA@ DB 'symmetric_differe'
	DB	'nce_update', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EMPOGGNJ@intersection_update?$AA@
CONST	SEGMENT
??_C@_0BE@EMPOGGNJ@intersection_update?$AA@ DB 'intersection_update', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LNEPHBNC@difference_update?$AA@
CONST	SEGMENT
??_C@_0BC@LNEPHBNC@difference_update?$AA@ DB 'difference_update', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HJGBEDCD@dict_itemiterator?$AA@
CONST	SEGMENT
??_C@_0BC@HJGBEDCD@dict_itemiterator?$AA@ DB 'dict_itemiterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EEPKNHCO@dict_valueiterator?$AA@
CONST	SEGMENT
??_C@_0BD@EEPKNHCO@dict_valueiterator?$AA@ DB 'dict_valueiterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HHJBMJDG@dict_keyiterator?$AA@
CONST	SEGMENT
??_C@_0BB@HHJBMJDG@dict_keyiterator?$AA@ DB 'dict_keyiterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNMACJIG@__reduce__?$AA@
CONST	SEGMENT
??_C@_0L@NNMACJIG@__reduce__?$AA@ DB '__reduce__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BJLPBKGK@__length_hint__?$AA@
CONST	SEGMENT
??_C@_0BA@BJLPBKGK@__length_hint__?$AA@ DB '__length_hint__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04BCIDKIGN@dict?$AA@
CONST	SEGMENT
??_C@_04BCIDKIGN@dict?$AA@ DB 'dict', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04COAGEIMF@copy?$AA@
CONST	SEGMENT
??_C@_04COAGEIMF@copy?$AA@ DB 'copy', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MEHLAELG@clear?$AA@
CONST	SEGMENT
??_C@_05MEHLAELG@clear?$AA@ DB 'clear', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KMEGJNJN@fromkeys?$AA@
CONST	SEGMENT
??_C@_08KMEGJNJN@fromkeys?$AA@ DB 'fromkeys', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HDLLMMEJ@update?$AA@
CONST	SEGMENT
??_C@_06HDLLMMEJ@update?$AA@ DB 'update', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GEKOPAHD@values?$AA@
CONST	SEGMENT
??_C@_06GEKOPAHD@values?$AA@ DB 'values', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CFHBDDLG@items?$AA@
CONST	SEGMENT
??_C@_05CFHBDDLG@items?$AA@ DB 'items', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KOGBLOBN@popitem?$AA@
CONST	SEGMENT
??_C@_07KOGBLOBN@popitem?$AA@ DB 'popitem', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NJDAHFJE@pop?$AA@
CONST	SEGMENT
??_C@_03NJDAHFJE@pop?$AA@ DB 'pop', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MIJGIGKN@setdefault?$AA@
CONST	SEGMENT
??_C@_0L@MIJGIGKN@setdefault?$AA@ DB 'setdefault', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03HNAFFKGA@get?$AA@
CONST	SEGMENT
??_C@_03HNAFFKGA@get?$AA@ DB 'get', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HOGGIPGN@__sizeof__?$AA@
CONST	SEGMENT
??_C@_0L@HOGGIPGN@__sizeof__?$AA@ DB '__sizeof__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GAJGCIJD@__getitem__?$AA@
CONST	SEGMENT
??_C@_0M@GAJGCIJD@__getitem__?$AA@ DB '__getitem__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MCIOADFH@__contains__?$AA@
CONST	SEGMENT
??_C@_0N@MCIOADFH@__contains__?$AA@ DB '__contains__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04IEPFDAGF@keys?$AA@
CONST	SEGMENT
??_C@_04IEPFDAGF@keys?$AA@ DB 'keys', 00H		; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId_symmetric_difference_update@?1??dictviews_xor@@9@9 DQ 0000000000000000H ; `dictviews_xor'::`2'::PyId_symmetric_difference_update
	DQ	FLAT:??_C@_0BM@OJODNHLP@symmetric_difference_update?$AA@
	DQ	0000000000000000H
?PyId_update@?1??dictviews_or@@9@9 DQ 0000000000000000H	; `dictviews_or'::`2'::PyId_update
	DQ	FLAT:??_C@_06HDLLMMEJ@update?$AA@
	DQ	0000000000000000H
?PyId_intersection_update@?1??dictviews_and@@9@9 DQ 0000000000000000H ; `dictviews_and'::`2'::PyId_intersection_update
	DQ	FLAT:??_C@_0BE@EMPOGGNJ@intersection_update?$AA@
	DQ	0000000000000000H
?PyId_difference_update@?1??dictviews_sub@@9@9 DQ 0000000000000000H ; `dictviews_sub'::`2'::PyId_difference_update
	DQ	FLAT:??_C@_0BC@LNEPHBNC@difference_update?$AA@
	DQ	0000000000000000H
?PyId_keys@?2??dict_update_common@@9@9 DQ 0000000000000000H ; `dict_update_common'::`3'::PyId_keys
	DQ	FLAT:??_C@_04IEPFDAGF@keys?$AA@
	DQ	0000000000000000H
?PyId___missing__@?4??dict_subscript@@9@9 DQ 0000000000000000H ; `dict_subscript'::`5'::PyId___missing__
	DQ	FLAT:??_C@_0M@PPMOEBOH@__missing__?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_0M@PPMOEBOH@__missing__?$AA@
CONST	SEGMENT
??_C@_0M@PPMOEBOH@__missing__?$AA@ DB '__missing__', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
empty_keys_struct DQ 0000000000000002H
	DQ	0000000000000001H
	DQ	FLAT:lookdict_split
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
dict_as_mapping DQ FLAT:dict_length
	DQ	FLAT:dict_subscript
	DQ	FLAT:dict_ass_sub
contains__doc__ DB 'D.__contains__(k) -> True if D has a key k, else Fals'
	DB	'e', 00H
	ORG $+1
getitem__doc__ DB 'x.__getitem__(y) <==> x[y]', 00H
	ORG $+5
sizeof__doc__ DB 'D.__sizeof__() -> size of D in memory, in bytes', 00H
get__doc__ DB	'D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to N'
	DB	'one.', 00H
	ORG $+11
setdefault_doc__ DB 'D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d i'
	DB	'f k not in D', 00H
	ORG $+15
pop__doc__ DB	'D.pop(k[,d]) -> v, remove specified key and return the c'
	DB	'orresponding value.', 0aH, 'If key is not found, d is returne'
	DB	'd if given, otherwise KeyError is raised', 00H
	ORG $+10
popitem__doc__ DB 'D.popitem() -> (k, v), remove and return some (key, va'
	DB	'lue) pair as a', 0aH, '2-tuple; but raise KeyError if D is em'
	DB	'pty.', 00H
update__doc__ DB 'D.update([E, ]**F) -> None.  Update D from dict/iterabl'
	DB	'e E and F.', 0aH, 'If E present and has a .keys() method, doe'
	DB	's:     for k in E: D[k] = E[k]', 0aH, 'If E present and lacks'
	DB	' .keys() method, does:     for (k, v) in E: D[k] = v', 0aH, 'I'
	DB	'n either case, this is followed by: for k in F: D[k] = F[k]', 00H
	ORG $+13
fromkeys__doc__ DB 'dict.fromkeys(S[,v]) -> New dict with keys from S and'
	DB	' values equal to v.', 0aH, 'v defaults to None.', 00H
	ORG $+3
clear__doc__ DB	'D.clear() -> None.  Remove all items from D.', 00H
	ORG $+3
copy__doc__ DB	'D.copy() -> a shallow copy of D', 00H
keys__doc__ DB	'D.keys() -> a set-like object providing a view on D''s k'
	DB	'eys', 00H
	ORG $+5
items__doc__ DB	'D.items() -> a set-like object providing a view on D''s '
	DB	'items', 00H
	ORG $+3
values__doc__ DB 'D.values() -> an object providing a view on D''s values'
	DB	00H
	ORG $+9
mapp_methods DQ	FLAT:??_C@_0N@MCIOADFH@__contains__?$AA@
	DQ	FLAT:dict_contains
	DD	048H
	ORG $+4
	DQ	FLAT:contains__doc__
	DQ	FLAT:??_C@_0M@GAJGCIJD@__getitem__?$AA@
	DQ	FLAT:dict_subscript
	DD	048H
	ORG $+4
	DQ	FLAT:getitem__doc__
	DQ	FLAT:??_C@_0L@HOGGIPGN@__sizeof__?$AA@
	DQ	FLAT:dict_sizeof
	DD	04H
	ORG $+4
	DQ	FLAT:sizeof__doc__
	DQ	FLAT:??_C@_03HNAFFKGA@get?$AA@
	DQ	FLAT:dict_get
	DD	01H
	ORG $+4
	DQ	FLAT:get__doc__
	DQ	FLAT:??_C@_0L@MIJGIGKN@setdefault?$AA@
	DQ	FLAT:dict_setdefault
	DD	01H
	ORG $+4
	DQ	FLAT:setdefault_doc__
	DQ	FLAT:??_C@_03NJDAHFJE@pop?$AA@
	DQ	FLAT:dict_pop
	DD	01H
	ORG $+4
	DQ	FLAT:pop__doc__
	DQ	FLAT:??_C@_07KOGBLOBN@popitem?$AA@
	DQ	FLAT:dict_popitem
	DD	04H
	ORG $+4
	DQ	FLAT:popitem__doc__
	DQ	FLAT:??_C@_04IEPFDAGF@keys?$AA@
	DQ	FLAT:dictkeys_new
	DD	04H
	ORG $+4
	DQ	FLAT:keys__doc__
	DQ	FLAT:??_C@_05CFHBDDLG@items?$AA@
	DQ	FLAT:dictitems_new
	DD	04H
	ORG $+4
	DQ	FLAT:items__doc__
	DQ	FLAT:??_C@_06GEKOPAHD@values?$AA@
	DQ	FLAT:dictvalues_new
	DD	04H
	ORG $+4
	DQ	FLAT:values__doc__
	DQ	FLAT:??_C@_06HDLLMMEJ@update?$AA@
	DQ	FLAT:dict_update
	DD	03H
	ORG $+4
	DQ	FLAT:update__doc__
	DQ	FLAT:??_C@_08KMEGJNJN@fromkeys?$AA@
	DQ	FLAT:dict_fromkeys
	DD	011H
	ORG $+4
	DQ	FLAT:fromkeys__doc__
	DQ	FLAT:??_C@_05MEHLAELG@clear?$AA@
	DQ	FLAT:dict_clear
	DD	04H
	ORG $+4
	DQ	FLAT:clear__doc__
	DQ	FLAT:??_C@_04COAGEIMF@copy?$AA@
	DQ	FLAT:dict_copy
	DD	04H
	ORG $+4
	DQ	FLAT:copy__doc__
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
dict_as_sequence DQ 0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyDict_Contains
	DQ	0000000000000000H
	DQ	0000000000000000H
dictionary_doc DB 'dict() -> new empty dictionary', 0aH, 'dict(mapping) -'
	DB	'> new dictionary initialized from a mapping object''s', 0aH, ' '
	DB	'   (key, value) pairs', 0aH, 'dict(iterable) -> new dictionar'
	DB	'y initialized as if via:', 0aH, '    d = {}', 0aH, '    for k'
	DB	', v in iterable:', 0aH, '        d[k] = v', 0aH, 'dict(**kwar'
	DB	'gs) -> new dictionary initialized with the name=value pairs', 0aH
	DB	'    in the keyword argument list.  For example:  dict(one=1, '
	DB	'two=2)', 00H
	ORG $+13
PyDict_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_04BCIDKIGN@dict?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:dict_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:dict_repr
	DQ	0000000000000000H
	DQ	FLAT:dict_as_sequence
	DQ	FLAT:dict_as_mapping
	DQ	FLAT:PyObject_HashNotImplemented
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	020044400H
	ORG $+4
	DQ	FLAT:dictionary_doc
	DQ	FLAT:dict_traverse
	DQ	FLAT:dict_tp_clear
	DQ	FLAT:dict_richcompare
	DQ	0000000000000000H
	DQ	FLAT:dict_iter
	DQ	0000000000000000H
	DQ	FLAT:mapp_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:dict_init
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:dict_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
length_hint_doc DB 'Private method returning an estimate of len(list(it))'
	DB	'.', 00H
	ORG $+1
reduce_doc DB	'Return state information for pickling.', 00H
	ORG $+1
dictiter_methods DQ FLAT:??_C@_0BA@BJLPBKGK@__length_hint__?$AA@
	DQ	FLAT:dictiter_len
	DD	04H
	ORG $+4
	DQ	FLAT:length_hint_doc
	DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:dictiter_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PyDictIterKey_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BB@HHJBMJDG@dict_keyiterator?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:dictiter_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:dictiter_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:dictiter_iternextkey
	DQ	FLAT:dictiter_methods
	DQ	0000000000000000H
	ORG $+144
PyDictIterValue_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BD@EEPKNHCO@dict_valueiterator?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:dictiter_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:dictiter_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:dictiter_iternextvalue
	DQ	FLAT:dictiter_methods
	DQ	0000000000000000H
	ORG $+144
PyDictIterItem_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BC@HJGBEDCD@dict_itemiterator?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:dictiter_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:dictiter_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:dictiter_iternextitem
	DQ	FLAT:dictiter_methods
	DQ	0000000000000000H
	ORG $+144
dictkeys_as_sequence DQ FLAT:dictview_len
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:dictkeys_contains
	ORG $+16
dictviews_as_number DQ 0000000000000000H
	DQ	FLAT:dictviews_sub
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:dictviews_and
	DQ	FLAT:dictviews_xor
	DQ	FLAT:dictviews_or
	ORG $+144
isdisjoint_doc DB 'Return True if the view and the given iterable have a '
	DB	'null intersection.', 00H
	ORG $+7
dictkeys_methods DQ FLAT:??_C@_0L@EMANFHEK@isdisjoint?$AA@
	DQ	FLAT:dictviews_isdisjoint
	DD	08H
	ORG $+4
	DQ	FLAT:isdisjoint_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PyDictKeys_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_09DCAKNFLJ@dict_keys?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:dictview_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:dictview_repr
	DQ	FLAT:dictviews_as_number
	DQ	FLAT:dictkeys_as_sequence
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:dictview_traverse
	DQ	0000000000000000H
	DQ	FLAT:dictview_richcompare
	DQ	0000000000000000H
	DQ	FLAT:dictkeys_iter
	DQ	0000000000000000H
	DQ	FLAT:dictkeys_methods
	DQ	0000000000000000H
	ORG $+144
dictitems_as_sequence DQ FLAT:dictview_len
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:dictitems_contains
	ORG $+16
dictitems_methods DQ FLAT:??_C@_0L@EMANFHEK@isdisjoint?$AA@
	DQ	FLAT:dictviews_isdisjoint
	DD	08H
	ORG $+4
	DQ	FLAT:isdisjoint_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PyDictItems_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0L@KKKCFCKM@dict_items?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:dictview_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:dictview_repr
	DQ	FLAT:dictviews_as_number
	DQ	FLAT:dictitems_as_sequence
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:dictview_traverse
	DQ	0000000000000000H
	DQ	FLAT:dictview_richcompare
	DQ	0000000000000000H
	DQ	FLAT:dictitems_iter
	DQ	0000000000000000H
	DQ	FLAT:dictitems_methods
	DQ	0000000000000000H
	ORG $+144
dictvalues_as_sequence DQ FLAT:dictview_len
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PyDictValues_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0M@JJEDNKGI@dict_values?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:dictview_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:dictview_repr
	DQ	0000000000000000H
	DQ	FLAT:dictvalues_as_sequence
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:dictview_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:dictvalues_iter
	DQ	0000000000000000H
	DQ	FLAT:dictvalues_methods
	DQ	0000000000000000H
	ORG $+144
PyDictDummy_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BB@CKNECNBG@?$DMdummy?5key?$DO?5type?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:dummy_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:dummy_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	ORG $+216
_dummy_struct DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000002H
	DQ	FLAT:PyDictDummy_Type
_DATA	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
EXTRN	_PyUnicode_Ready:PROC
EXTRN	memcmp:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\stringlib\eq.h
pdata	SEGMENT
$pdata$unicode_eq DD imagerel unicode_eq
	DD	imagerel unicode_eq+219
	DD	imagerel $unwind$unicode_eq
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unicode_eq DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT unicode_eq
_TEXT	SEGMENT
aa$ = 48
bb$ = 56
unicode_eq PROC						; COMDAT

; 8    : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 9    :     register PyUnicodeObject *a = (PyUnicodeObject *)aa;
; 10   :     register PyUnicodeObject *b = (PyUnicodeObject *)bb;
; 11   : 
; 12   :     if (PyUnicode_READY(a) == -1 || PyUnicode_READY(b) == -1) {

  0000a	f6 41 70 80	 test	 BYTE PTR [rcx+112], 128	; 00000080H
  0000e	48 8b da	 mov	 rbx, rdx
  00011	48 8b f9	 mov	 rdi, rcx
  00014	75 0a		 jne	 SHORT $LN20@unicode_eq
  00016	e8 00 00 00 00	 call	 _PyUnicode_Ready
  0001b	83 f8 ff	 cmp	 eax, -1
  0001e	74 1d		 je	 SHORT $LN22@unicode_eq
$LN20@unicode_eq:
  00020	f6 43 70 80	 test	 BYTE PTR [rbx+112], 128	; 00000080H
  00024	75 0d		 jne	 SHORT $LN21@unicode_eq
  00026	48 8b cb	 mov	 rcx, rbx
  00029	e8 00 00 00 00	 call	 _PyUnicode_Ready
  0002e	83 f8 ff	 cmp	 eax, -1

; 13   :         assert(0 && "unicode_eq ready fail");
; 14   :         return 0;

  00031	74 0a		 je	 SHORT $LN22@unicode_eq
$LN21@unicode_eq:

; 15   :     }
; 16   : 
; 17   :     if (PyUnicode_GET_LENGTH(a) != PyUnicode_GET_LENGTH(b))

  00033	4c 8b 4f 60	 mov	 r9, QWORD PTR [rdi+96]
  00037	4c 3b 4b 60	 cmp	 r9, QWORD PTR [rbx+96]
  0003b	74 0d		 je	 SHORT $LN3@unicode_eq
$LN22@unicode_eq:

; 18   :         return 0;

  0003d	33 c0		 xor	 eax, eax

; 25   : }

  0003f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00044	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00048	5f		 pop	 rdi
  00049	c3		 ret	 0
$LN3@unicode_eq:

; 19   :     if (PyUnicode_GET_LENGTH(a) == 0)

  0004a	4d 85 c9	 test	 r9, r9
  0004d	75 0f		 jne	 SHORT $LN2@unicode_eq

; 20   :         return 1;

  0004f	41 8d 41 01	 lea	 eax, QWORD PTR [r9+1]

; 25   : }

  00053	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00058	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005c	5f		 pop	 rdi
  0005d	c3		 ret	 0
$LN2@unicode_eq:

; 21   :     if (PyUnicode_KIND(a) != PyUnicode_KIND(b))

  0005e	8b 4b 70	 mov	 ecx, DWORD PTR [rbx+112]
  00061	44 8b 47 70	 mov	 r8d, DWORD PTR [rdi+112]
  00065	8b c1		 mov	 eax, ecx
  00067	41 33 c0	 xor	 eax, r8d
  0006a	a8 1c		 test	 al, 28

; 22   :         return 0;

  0006c	75 cf		 jne	 SHORT $LN22@unicode_eq

; 23   :     return memcmp(PyUnicode_1BYTE_DATA(a), PyUnicode_1BYTE_DATA(b),
; 24   :                   PyUnicode_GET_LENGTH(a) * PyUnicode_KIND(a)) == 0;

  0006e	f6 c1 20	 test	 cl, 32			; 00000020H
  00071	74 17		 je	 SHORT $LN14@unicode_eq
  00073	f6 c1 40	 test	 cl, 64			; 00000040H
  00076	74 09		 je	 SHORT $LN12@unicode_eq
  00078	48 8d 93 80 00
	00 00		 lea	 rdx, QWORD PTR [rbx+128]
  0007f	eb 10		 jmp	 SHORT $LN15@unicode_eq
$LN12@unicode_eq:
  00081	48 8d 93 a0 00
	00 00		 lea	 rdx, QWORD PTR [rbx+160]
  00088	eb 07		 jmp	 SHORT $LN15@unicode_eq
$LN14@unicode_eq:
  0008a	48 8b 93 a0 00
	00 00		 mov	 rdx, QWORD PTR [rbx+160]
$LN15@unicode_eq:
  00091	41 f6 c0 20	 test	 r8b, 32			; 00000020H
  00095	74 18		 je	 SHORT $LN18@unicode_eq
  00097	41 f6 c0 40	 test	 r8b, 64			; 00000040H
  0009b	74 09		 je	 SHORT $LN16@unicode_eq
  0009d	48 8d 8f 80 00
	00 00		 lea	 rcx, QWORD PTR [rdi+128]
  000a4	eb 10		 jmp	 SHORT $LN19@unicode_eq
$LN16@unicode_eq:
  000a6	48 8d 8f a0 00
	00 00		 lea	 rcx, QWORD PTR [rdi+160]
  000ad	eb 07		 jmp	 SHORT $LN19@unicode_eq
$LN18@unicode_eq:
  000af	48 8b 8f a0 00
	00 00		 mov	 rcx, QWORD PTR [rdi+160]
$LN19@unicode_eq:
  000b6	49 c1 e8 02	 shr	 r8, 2
  000ba	41 83 e0 07	 and	 r8d, 7
  000be	4d 0f af c1	 imul	 r8, r9
  000c2	e8 00 00 00 00	 call	 memcmp

; 25   : }

  000c7	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000cc	33 c9		 xor	 ecx, ecx
  000ce	85 c0		 test	 eax, eax
  000d0	0f 94 c1	 sete	 cl
  000d3	8b c1		 mov	 eax, ecx
  000d5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d9	5f		 pop	 rdi
  000da	c3		 ret	 0
unicode_eq ENDP
_TEXT	ENDS
EXTRN	PyErr_SetObject:PROC
EXTRN	PyExc_KeyError:QWORD
EXTRN	PyTuple_Pack:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\dictobject.c
pdata	SEGMENT
$pdata$set_key_error DD imagerel set_key_error
	DD	imagerel set_key_error+56
	DD	imagerel $unwind$set_key_error
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$set_key_error DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT set_key_error
_TEXT	SEGMENT
arg$ = 48
set_key_error PROC					; COMDAT

; 103  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 104  :     PyObject *tup;
; 105  :     tup = PyTuple_Pack(1, arg);

  00006	48 8b d1	 mov	 rdx, rcx
  00009	b9 01 00 00 00	 mov	 ecx, 1
  0000e	e8 00 00 00 00	 call	 PyTuple_Pack
  00013	48 8b d8	 mov	 rbx, rax

; 106  :     if (!tup)

  00016	48 85 c0	 test	 rax, rax
  00019	74 17		 je	 SHORT $LN2@set_key_er

; 107  :         return; /* caller will expect error to be set anyway */
; 108  :     PyErr_SetObject(PyExc_KeyError, tup);

  0001b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_KeyError
  00022	48 8b d0	 mov	 rdx, rax
  00025	e8 00 00 00 00	 call	 PyErr_SetObject

; 109  :     Py_DECREF(tup);

  0002a	48 8b cb	 mov	 rcx, rbx
  0002d	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@set_key_er:

; 110  : }

  00032	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00036	5b		 pop	 rbx
  00037	c3		 ret	 0
set_key_error ENDP
_TEXT	ENDS
PUBLIC	PyDict_ClearFreeList
_BSS	SEGMENT
free_list DQ	050H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_ClearFreeList DD imagerel $LN8
	DD	imagerel $LN8+39
	DD	imagerel $unwind$PyDict_ClearFreeList
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyDict_ClearFreeList DD imagerel $LN8+39
	DD	imagerel $LN8+99
	DD	imagerel $chain$0$PyDict_ClearFreeList
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyDict_ClearFreeList DD imagerel $LN8+99
	DD	imagerel $LN8+107
	DD	imagerel $chain$1$PyDict_ClearFreeList
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyDict_ClearFreeList DD 021H
	DD	imagerel $LN8
	DD	imagerel $LN8+39
	DD	imagerel $unwind$PyDict_ClearFreeList
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyDict_ClearFreeList DD 020521H
	DD	067405H
	DD	imagerel $LN8
	DD	imagerel $LN8+39
	DD	imagerel $unwind$PyDict_ClearFreeList
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_ClearFreeList DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyDict_ClearFreeList
_TEXT	SEGMENT
PyDict_ClearFreeList PROC				; COMDAT

; 247  : {

$LN8:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 248  :     PyDictObject *op;
; 249  :     int ret = numfree;

  00006	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR numfree

; 250  :     if (Py_PXCTX)

  0000c	e8 00 00 00 00	 call	 _Py_PXCTX
  00011	85 c0		 test	 eax, eax
  00013	74 08		 je	 SHORT $LN6@PyDict_Cle

; 251  :         return 0;

  00015	33 c0		 xor	 eax, eax

; 259  : }

  00017	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001b	5b		 pop	 rbx
  0001c	c3		 ret	 0
$LN6@PyDict_Cle:

; 252  : 
; 253  :     while (numfree) {

  0001d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR numfree
  00023	85 c9		 test	 ecx, ecx
  00025	74 3c		 je	 SHORT $LN1@PyDict_Cle
  00027	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  0002c	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:free_list
  00033	66 66 66 66 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL2@PyDict_Cle:

; 254  :         op = free_list[--numfree];

  00040	ff c9		 dec	 ecx
  00042	89 0d 00 00 00
	00		 mov	 DWORD PTR numfree, ecx

; 255  :         assert(PyDict_CheckExact(op));
; 256  :         PyObject_GC_Del(op);

  00048	48 63 c9	 movsxd	 rcx, ecx
  0004b	48 8b 0c cf	 mov	 rcx, QWORD PTR [rdi+rcx*8]
  0004f	e8 00 00 00 00	 call	 PyObject_GC_Del
  00054	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR numfree
  0005a	85 c9		 test	 ecx, ecx
  0005c	75 e2		 jne	 SHORT $LL2@PyDict_Cle
  0005e	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
$LN1@PyDict_Cle:

; 257  :     }
; 258  :     return ret;

  00063	8b c3		 mov	 eax, ebx

; 259  : }

  00065	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00069	5b		 pop	 rbx
  0006a	c3		 ret	 0
PyDict_ClearFreeList ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@KBCHCIKN@free?5PyDictObject?$AA@	; `string'
PUBLIC	_PyDict_DebugMallocStats
EXTRN	_PyDebugAllocatorStats:PROC
;	COMDAT ??_C@_0BC@KBCHCIKN@free?5PyDictObject?$AA@
CONST	SEGMENT
??_C@_0BC@KBCHCIKN@free?5PyDictObject?$AA@ DB 'free PyDictObject', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyDict_DebugMallocStats
_TEXT	SEGMENT
out$ = 8
_PyDict_DebugMallocStats PROC				; COMDAT

; 265  :     _PyDebugAllocatorStats(out,
; 266  :                            "free PyDictObject", numfree, sizeof(PyDictObject));

  00000	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR numfree
  00007	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@KBCHCIKN@free?5PyDictObject?$AA@
  0000e	41 b9 80 00 00
	00		 mov	 r9d, 128		; 00000080H

; 267  : }

  00014	e9 00 00 00 00	 jmp	 _PyDebugAllocatorStats
_PyDict_DebugMallocStats ENDP
_TEXT	ENDS
PUBLIC	PyDict_Fini
; Function compile flags: /Ogtpy
;	COMDAT PyDict_Fini
_TEXT	SEGMENT
PyDict_Fini PROC					; COMDAT

; 273  :     PyDict_ClearFreeList();
; 274  : }

  00000	e9 00 00 00 00	 jmp	 PyDict_ClearFreeList
PyDict_Fini ENDP
_TEXT	ENDS
EXTRN	__imp_free:PROC
EXTRN	_PxMem_Free:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$free_keys_object DD imagerel free_keys_object
	DD	imagerel free_keys_object+6
	DD	imagerel $unwind$free_keys_object
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$free_keys_object DD imagerel free_keys_object+6
	DD	imagerel free_keys_object+27
	DD	imagerel $chain$0$free_keys_object
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$free_keys_object DD imagerel free_keys_object+27
	DD	imagerel free_keys_object+290
	DD	imagerel $chain$2$free_keys_object
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$free_keys_object DD imagerel free_keys_object+290
	DD	imagerel free_keys_object+307
	DD	imagerel $chain$3$free_keys_object
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$free_keys_object DD imagerel free_keys_object+307
	DD	imagerel free_keys_object+329
	DD	imagerel $chain$4$free_keys_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$free_keys_object DD 021H
	DD	imagerel free_keys_object
	DD	imagerel free_keys_object+6
	DD	imagerel $unwind$free_keys_object
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$free_keys_object DD 021H
	DD	imagerel free_keys_object+6
	DD	imagerel free_keys_object+27
	DD	imagerel $chain$0$free_keys_object
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$free_keys_object DD 040a21H
	DD	0a740aH
	DD	083405H
	DD	imagerel free_keys_object+6
	DD	imagerel free_keys_object+27
	DD	imagerel $chain$0$free_keys_object
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$free_keys_object DD 020521H
	DD	096405H
	DD	imagerel free_keys_object
	DD	imagerel free_keys_object+6
	DD	imagerel $unwind$free_keys_object
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$free_keys_object DD 020601H
	DD	050025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\dictobject.c
xdata	ENDS
;	COMDAT free_keys_object
_TEXT	SEGMENT
keys$ = 64
free_keys_object PROC					; COMDAT

; 376  : {

  00000	40 55		 push	 rbp
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 89 74 24 48	 mov	 QWORD PTR [rsp+72], rsi

; 378  :     Py_ssize_t i, n;
; 379  :     for (i = 0, n = DK_SIZE(keys); i < n; i++) {

  0000b	48 8b 71 08	 mov	 rsi, QWORD PTR [rcx+8]
  0000f	48 8b e9	 mov	 rbp, rcx
  00012	48 85 f6	 test	 rsi, rsi
  00015	0f 8e 07 01 00
	00		 jle	 $LN9@free_keys_

; 377  :     PyDictKeyEntry *entries = &keys->dk_entries[0];

  0001b	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00020	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  00025	48 8d 79 30	 lea	 rdi, QWORD PTR [rcx+48]
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL11@free_keys_:

; 380  :         Py_XDECREF(entries[i].me_key);

  00030	48 8b 5f f8	 mov	 rbx, QWORD PTR [rdi-8]
  00034	48 85 db	 test	 rbx, rbx
  00037	74 65		 je	 SHORT $LN7@free_keys_
  00039	e8 00 00 00 00	 call	 _Py_PXCTX
  0003e	85 c0		 test	 eax, eax
  00040	75 5c		 jne	 SHORT $LN7@free_keys_
  00042	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00046	a8 20		 test	 al, 32			; 00000020H
  00048	75 4c		 jne	 SHORT $LN20@free_keys_
  0004a	84 c0		 test	 al, al
  0004c	78 48		 js	 SHORT $LN20@free_keys_
  0004e	a8 02		 test	 al, 2
  00050	75 4c		 jne	 SHORT $LN7@free_keys_
  00052	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00056	75 46		 jne	 SHORT $LN7@free_keys_
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00066	4c 8b cb	 mov	 r9, rbx
  00069	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0006f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00077	e8 00 00 00 00	 call	 _PyParallel_Guard
  0007c	48 8b cb	 mov	 rcx, rbx
  0007f	85 c0		 test	 eax, eax
  00081	74 07		 je	 SHORT $LN25@free_keys_
  00083	e8 00 00 00 00	 call	 _Px_Dealloc
  00088	eb 14		 jmp	 SHORT $LN7@free_keys_
$LN25@free_keys_:
  0008a	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0008e	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00094	eb 08		 jmp	 SHORT $LN7@free_keys_
$LN20@free_keys_:
  00096	48 8b cb	 mov	 rcx, rbx
  00099	e8 00 00 00 00	 call	 Px_DecRef
$LN7@free_keys_:

; 381  :         Py_XDECREF(entries[i].me_value);

  0009e	48 8b 1f	 mov	 rbx, QWORD PTR [rdi]
  000a1	48 85 db	 test	 rbx, rbx
  000a4	74 65		 je	 SHORT $LN3@free_keys_
  000a6	e8 00 00 00 00	 call	 _Py_PXCTX
  000ab	85 c0		 test	 eax, eax
  000ad	75 5c		 jne	 SHORT $LN3@free_keys_
  000af	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000b3	a8 20		 test	 al, 32			; 00000020H
  000b5	75 4c		 jne	 SHORT $LN31@free_keys_
  000b7	84 c0		 test	 al, al
  000b9	78 48		 js	 SHORT $LN31@free_keys_
  000bb	a8 02		 test	 al, 2
  000bd	75 4c		 jne	 SHORT $LN3@free_keys_
  000bf	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000c3	75 46		 jne	 SHORT $LN3@free_keys_
  000c5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000d3	4c 8b cb	 mov	 r9, rbx
  000d6	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000dc	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000e4	e8 00 00 00 00	 call	 _PyParallel_Guard
  000e9	48 8b cb	 mov	 rcx, rbx
  000ec	85 c0		 test	 eax, eax
  000ee	74 07		 je	 SHORT $LN36@free_keys_
  000f0	e8 00 00 00 00	 call	 _Px_Dealloc
  000f5	eb 14		 jmp	 SHORT $LN3@free_keys_
$LN36@free_keys_:
  000f7	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000fb	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00101	eb 08		 jmp	 SHORT $LN3@free_keys_
$LN31@free_keys_:
  00103	48 8b cb	 mov	 rcx, rbx
  00106	e8 00 00 00 00	 call	 Px_DecRef
$LN3@free_keys_:

; 378  :     Py_ssize_t i, n;
; 379  :     for (i = 0, n = DK_SIZE(keys); i < n; i++) {

  0010b	48 83 c7 18	 add	 rdi, 24
  0010f	48 ff ce	 dec	 rsi
  00112	0f 85 18 ff ff
	ff		 jne	 $LL11@free_keys_
  00118	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]
  0011d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN9@free_keys_:

; 382  :     }
; 383  :     PyMem_FREE(keys);

  00122	e8 00 00 00 00	 call	 _Py_PXCTX
  00127	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0012c	48 8b cd	 mov	 rcx, rbp
  0012f	85 c0		 test	 eax, eax
  00131	74 0a		 je	 SHORT $LN14@free_keys_

; 384  : }

  00133	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00137	5d		 pop	 rbp
  00138	e9 00 00 00 00	 jmp	 _PxMem_Free
$LN14@free_keys_:
  0013d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00141	5d		 pop	 rbp
  00142	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_free
free_keys_object ENDP
_TEXT	ENDS
PUBLIC	??_C@_08OKBFOLLA@new_dict?$AA@			; `string'
PUBLIC	??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@ ; `string'
EXTRN	_PyObject_GC_New:PROC
EXTRN	_PxObject_New:PROC
EXTRN	_Px_NewReference:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$new_dict DD imagerel new_dict
	DD	imagerel new_dict+262
	DD	imagerel $unwind$new_dict
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$new_dict DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT ??_C@_08OKBFOLLA@new_dict?$AA@
CONST	SEGMENT
??_C@_08OKBFOLLA@new_dict?$AA@ DB 'new_dict', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
CONST	SEGMENT
??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@ DB '..\Objects\dicto'
	DB	'bject.c', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT new_dict
_TEXT	SEGMENT
keys$ = 64
values$ = 72
new_dict PROC						; COMDAT

; 393  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b f2	 mov	 rsi, rdx
  00012	48 8b f9	 mov	 rdi, rcx

; 394  :     PyDictObject *mp;
; 395  : 
; 396  :     if (!Py_PXCTX && numfree) {

  00015	e8 00 00 00 00	 call	 _Py_PXCTX
  0001a	85 c0		 test	 eax, eax
  0001c	75 7c		 jne	 SHORT $LN4@new_dict
  0001e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR numfree
  00024	85 c0		 test	 eax, eax
  00026	74 72		 je	 SHORT $LN4@new_dict

; 397  :         mp = free_list[--numfree];

  00028	ff c8		 dec	 eax
  0002a	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:free_list

; 398  :         assert (mp != NULL);
; 399  :         assert (Py_TYPE(mp) == &PyDict_Type);
; 400  :         _Py_NewReference((PyObject *)mp);

  00031	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00038	89 05 00 00 00
	00		 mov	 DWORD PTR numfree, eax
  0003e	48 98		 cdqe
  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08OKBFOLLA@new_dict?$AA@
  00047	48 8b 1c c3	 mov	 rbx, QWORD PTR [rbx+rax*8]
  0004b	41 b8 90 01 00
	00		 mov	 r8d, 400		; 00000190H
  00051	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00059	4c 8b cb	 mov	 r9, rbx
  0005c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00061	85 c0		 test	 eax, eax
  00063	74 2b		 je	 SHORT $LN7@new_dict
  00065	48 8b cb	 mov	 rcx, rbx
  00068	e8 00 00 00 00	 call	 _Px_NewReference
$LN2@new_dict:

; 408  :         }
; 409  :     }
; 410  :     mp->ma_keys = keys;

  0006d	48 89 7b 68	 mov	 QWORD PTR [rbx+104], rdi

; 411  :     mp->ma_values = values;

  00071	48 89 73 70	 mov	 QWORD PTR [rbx+112], rsi

; 412  :     mp->ma_used = 0;

  00075	48 c7 43 60 00
	00 00 00	 mov	 QWORD PTR [rbx+96], 0

; 413  :     return (PyObject *)mp;

  0007d	48 8b c3	 mov	 rax, rbx

; 414  : }

  00080	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00085	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0008a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008e	5f		 pop	 rdi
  0008f	c3		 ret	 0
$LN7@new_dict:

; 398  :         assert (mp != NULL);
; 399  :         assert (Py_TYPE(mp) == &PyDict_Type);
; 400  :         _Py_NewReference((PyObject *)mp);

  00090	48 c7 43 50 01
	00 00 00	 mov	 QWORD PTR [rbx+80], 1

; 401  :     }
; 402  :     else {

  00098	eb d3		 jmp	 SHORT $LN2@new_dict
$LN4@new_dict:

; 403  :         mp = PyObject_GC_New(PyDictObject, &PyDict_Type);

  0009a	e8 00 00 00 00	 call	 _Py_PXCTX
  0009f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyDict_Type
  000a6	85 c0		 test	 eax, eax
  000a8	74 07		 je	 SHORT $LN9@new_dict
  000aa	e8 00 00 00 00	 call	 _PxObject_New
  000af	eb 05		 jmp	 SHORT $LN13@new_dict
$LN9@new_dict:
  000b1	e8 00 00 00 00	 call	 _PyObject_GC_New
$LN13@new_dict:
  000b6	48 8b d8	 mov	 rbx, rax

; 404  :         if (mp == NULL) {

  000b9	48 85 c0	 test	 rax, rax
  000bc	75 af		 jne	 SHORT $LN2@new_dict

; 405  :             DK_DECREF(keys);

  000be	48 ff 0f	 dec	 QWORD PTR [rdi]
  000c1	75 08		 jne	 SHORT $LN1@new_dict
  000c3	48 8b cf	 mov	 rcx, rdi
  000c6	e8 00 00 00 00	 call	 free_keys_object
$LN1@new_dict:

; 406  :             free_values(values);

  000cb	e8 00 00 00 00	 call	 _Py_PXCTX
  000d0	48 8b ce	 mov	 rcx, rsi
  000d3	85 c0		 test	 eax, eax
  000d5	74 17		 je	 SHORT $LN11@new_dict
  000d7	e8 00 00 00 00	 call	 _PxMem_Free

; 407  :             return NULL;

  000dc	33 c0		 xor	 eax, eax

; 414  : }

  000de	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000e3	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000e8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ec	5f		 pop	 rdi
  000ed	c3		 ret	 0
$LN11@new_dict:

; 406  :             free_values(values);

  000ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 414  : }

  000f4	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000f9	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000fe	33 c0		 xor	 eax, eax
  00100	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00104	5f		 pop	 rdi
  00105	c3		 ret	 0
new_dict ENDP
_TEXT	ENDS
EXTRN	PyErr_NoMemory:PROC
EXTRN	__imp_malloc:PROC
EXTRN	_PxMem_Malloc:PROC
EXTRN	memset:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$new_dict_with_shared_keys DD imagerel new_dict_with_shared_keys
	DD	imagerel new_dict_with_shared_keys+191
	DD	imagerel $unwind$new_dict_with_shared_keys
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$new_dict_with_shared_keys DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT new_dict_with_shared_keys
_TEXT	SEGMENT
keys$ = 48
new_dict_with_shared_keys PROC				; COMDAT

; 419  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 420  :     PyObject **values;
; 421  :     Py_ssize_t i, size;
; 422  : 
; 423  :     size = DK_SIZE(keys);

  0000f	48 8b 79 08	 mov	 rdi, QWORD PTR [rcx+8]

; 424  :     values = new_values(size);

  00013	48 b8 ff ff ff
	ff ff ff ff 0f	 mov	 rax, 1152921504606846975 ; 0fffffffffffffffH
  0001d	48 8b d9	 mov	 rbx, rcx
  00020	48 3b f8	 cmp	 rdi, rax
  00023	77 79		 ja	 SHORT $LN18@new_dict_w
  00025	e8 00 00 00 00	 call	 _Py_PXCTX
  0002a	85 c0		 test	 eax, eax
  0002c	74 0f		 je	 SHORT $LN12@new_dict_w
  0002e	48 8d 0c fd 00
	00 00 00	 lea	 rcx, QWORD PTR [rdi*8]
  00036	e8 00 00 00 00	 call	 _PxMem_Malloc
  0003b	eb 29		 jmp	 SHORT $LN19@new_dict_w
$LN12@new_dict_w:
  0003d	48 8d 04 fd 00
	00 00 00	 lea	 rax, QWORD PTR [rdi*8]
  00045	48 b9 ff ff ff
	ff ff ff ff 7f	 mov	 rcx, 9223372036854775807 ; 7fffffffffffffffH
  0004f	48 3b c1	 cmp	 rax, rcx
  00052	77 4a		 ja	 SHORT $LN18@new_dict_w
  00054	48 85 c0	 test	 rax, rax
  00057	b9 01 00 00 00	 mov	 ecx, 1
  0005c	48 0f 45 c8	 cmovne	 rcx, rax
  00060	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
$LN19@new_dict_w:
  00066	48 8b f0	 mov	 rsi, rax

; 425  :     if (values == NULL) {

  00069	48 85 c0	 test	 rax, rax
  0006c	74 30		 je	 SHORT $LN18@new_dict_w

; 427  :         return PyErr_NoMemory();
; 428  :     }
; 429  :     for (i = 0; i < size; i++) {

  0006e	48 85 ff	 test	 rdi, rdi
  00071	7e 11		 jle	 SHORT $LN3@new_dict_w
  00073	48 c1 e7 03	 shl	 rdi, 3
  00077	33 d2		 xor	 edx, edx
  00079	48 8b c8	 mov	 rcx, rax
  0007c	4c 8b c7	 mov	 r8, rdi
  0007f	e8 00 00 00 00	 call	 memset
$LN3@new_dict_w:

; 430  :         values[i] = NULL;
; 431  :     }
; 432  :     return new_dict(keys, values);

  00084	48 8b d6	 mov	 rdx, rsi
  00087	48 8b cb	 mov	 rcx, rbx

; 433  : }

  0008a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008f	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00094	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00098	5f		 pop	 rdi
  00099	e9 00 00 00 00	 jmp	 new_dict
$LN18@new_dict_w:

; 426  :         DK_DECREF(keys);

  0009e	48 ff 0b	 dec	 QWORD PTR [rbx]
  000a1	75 08		 jne	 SHORT $LN4@new_dict_w
  000a3	48 8b cb	 mov	 rcx, rbx
  000a6	e8 00 00 00 00	 call	 free_keys_object
$LN4@new_dict_w:

; 433  : }

  000ab	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000b0	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000b5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b9	5f		 pop	 rdi
  000ba	e9 00 00 00 00	 jmp	 PyErr_NoMemory
new_dict_with_shared_keys ENDP
_TEXT	ENDS
EXTRN	PyObject_RichCompareBool:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$lookdict DD imagerel lookdict
	DD	imagerel lookdict+764
	DD	imagerel $unwind$lookdict
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lookdict DD 0a1e01H
	DD	011341eH
	DD	0f01a721eH
	DD	0d016e018H
	DD	07012c014H
	DD	050106011H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\dictobject.c
xdata	ENDS
;	COMDAT lookdict
_TEXT	SEGMENT
mask$1$ = 48
mp$ = 128
key$ = 136
i$1$ = 144
hash$ = 144
value_addr$ = 152
lookdict PROC						; COMDAT

; 469  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	49 89 5b 10	 mov	 QWORD PTR [r11+16], rbx
  00007	4d 89 4b 20	 mov	 QWORD PTR [r11+32], r9
  0000b	49 89 4b 08	 mov	 QWORD PTR [r11+8], rcx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	41 54		 push	 r12
  00014	41 55		 push	 r13
  00016	41 56		 push	 r14
  00018	41 57		 push	 r15
  0001a	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 470  :     register size_t i;
; 471  :     register size_t perturb;
; 472  :     register PyDictKeyEntry *freeslot;
; 473  :     register size_t mask;
; 474  :     PyDictKeyEntry *ep0;
; 475  :     register PyDictKeyEntry *ep;
; 476  :     register int cmp;
; 477  :     PyObject *startkey;
; 478  : 
; 479  : top:
; 480  :     mask = DK_MASK(mp->ma_keys);

  0001e	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]
  00022	4c 8b ea	 mov	 r13, rdx
  00025	4d 8b e1	 mov	 r12, r9
  00028	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]

; 481  :     ep0 = &mp->ma_keys->dk_entries[0];

  0002c	4c 8d 78 20	 lea	 r15, QWORD PTR [rax+32]
  00030	4d 8b f0	 mov	 r14, r8
  00033	48 ff ca	 dec	 rdx

; 482  :     i = (size_t)hash & mask;

  00036	48 8b ca	 mov	 rcx, rdx
  00039	48 89 54 24 30	 mov	 QWORD PTR mask$1$[rsp], rdx
  0003e	49 23 c8	 and	 rcx, r8
  00041	48 89 8c 24 90
	00 00 00	 mov	 QWORD PTR i$1$[rsp], rcx

; 483  :     ep = &ep0[i];

  00049	48 8d 04 49	 lea	 rax, QWORD PTR [rcx+rcx*2]

; 484  :     if (ep->me_key == NULL || ep->me_key == key) {

  0004d	49 8b 5c c7 08	 mov	 rbx, QWORD PTR [r15+rax*8+8]
  00052	49 8d 3c c7	 lea	 rdi, QWORD PTR [r15+rax*8]
  00056	48 85 db	 test	 rbx, rbx
  00059	0f 84 15 02 00
	00		 je	 $LN22@lookdict
  0005f	49 8b 6b 08	 mov	 rbp, QWORD PTR [r11+8]
$LN52@lookdict:
  00063	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_dummy_struct
  0006a	66 0f 1f 44 00
	00		 npad	 6
$top$20484:
  00070	49 3b dd	 cmp	 rbx, r13
  00073	0f 84 f3 01 00
	00		 je	 $LN49@lookdict

; 487  :     }
; 488  :     if (ep->me_key == dummy)

  00079	49 3b d8	 cmp	 rbx, r8
  0007c	0f 84 a0 00 00
	00		 je	 $LN20@lookdict

; 489  :         freeslot = ep;
; 490  :     else {
; 491  :         if (ep->me_hash == hash) {

  00082	4c 39 37	 cmp	 QWORD PTR [rdi], r14
  00085	0f 85 95 00 00
	00		 jne	 $LN15@lookdict

; 492  :             startkey = ep->me_key;
; 493  :             Py_INCREF(startkey);

  0008b	e8 00 00 00 00	 call	 _Py_PXCTX
  00090	85 c0		 test	 eax, eax
  00092	75 32		 jne	 SHORT $LN27@lookdict
  00094	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0009b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000a2	4c 8b cb	 mov	 r9, rbx
  000a5	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000ab	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000b3	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b8	85 c0		 test	 eax, eax
  000ba	75 06		 jne	 SHORT $LN26@lookdict
  000bc	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000c0	74 04		 je	 SHORT $LN27@lookdict
$LN26@lookdict:
  000c2	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN27@lookdict:

; 494  :             cmp = PyObject_RichCompareBool(startkey, key, Py_EQ);

  000c6	41 b8 02 00 00
	00		 mov	 r8d, 2
  000cc	49 8b d5	 mov	 rdx, r13
  000cf	48 8b cb	 mov	 rcx, rbx
  000d2	e8 00 00 00 00	 call	 PyObject_RichCompareBool

; 495  :             Py_DECREF(startkey);

  000d7	48 8b cb	 mov	 rcx, rbx
  000da	8b f0		 mov	 esi, eax
  000dc	e8 00 00 00 00	 call	 _Py_DecRef

; 496  :             if (cmp < 0)

  000e1	85 f6		 test	 esi, esi
  000e3	0f 88 e2 01 00
	00		 js	 $LN43@lookdict

; 497  :                 return NULL;
; 498  :             if (ep0 == mp->ma_keys->dk_entries && ep->me_key == startkey) {

  000e9	48 8b 4d 68	 mov	 rcx, QWORD PTR [rbp+104]
  000ed	48 83 c1 20	 add	 rcx, 32			; 00000020H
  000f1	4c 3b f9	 cmp	 r15, rcx
  000f4	0f 85 3a 01 00
	00		 jne	 $LN5@lookdict
  000fa	48 39 5f 08	 cmp	 QWORD PTR [rdi+8], rbx
  000fe	0f 85 30 01 00
	00		 jne	 $LN5@lookdict

; 499  :                 if (cmp > 0) {

  00104	85 f6		 test	 esi, esi
  00106	0f 8f 8b 01 00
	00		 jg	 $LN44@lookdict
  0010c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR i$1$[rsp]
  00114	48 8b 54 24 30	 mov	 rdx, QWORD PTR mask$1$[rsp]
  00119	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_dummy_struct
$LN15@lookdict:

; 502  :                 }
; 503  :             }
; 504  :             else {
; 505  :                 /* The dict was mutated, restart */
; 506  :                 goto top;
; 507  :             }
; 508  :         }
; 509  :         freeslot = NULL;

  00120	33 ff		 xor	 edi, edi
$LN20@lookdict:

; 510  :     }
; 511  : 
; 512  :     /* In the loop, me_key == dummy is by far (factor of 100s) the
; 513  :        least likely outcome, so test for that last. */
; 514  :     for (perturb = hash; ; perturb >>= PERTURB_SHIFT) {

  00122	4d 8b e6	 mov	 r12, r14
  00125	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL14@lookdict:

; 515  :         i = (i << 2) + i + perturb + 1;

  00130	49 8d 04 8c	 lea	 rax, QWORD PTR [r12+rcx*4]
  00134	48 8d 4c 01 01	 lea	 rcx, QWORD PTR [rcx+rax+1]

; 516  :         ep = &ep0[i & mask];

  00139	48 8b c1	 mov	 rax, rcx
  0013c	48 89 8c 24 90
	00 00 00	 mov	 QWORD PTR i$1$[rsp], rcx
  00144	48 23 c2	 and	 rax, rdx
  00147	48 8d 04 40	 lea	 rax, QWORD PTR [rax+rax*2]

; 517  :         if (ep->me_key == NULL) {

  0014b	49 8b 5c c7 08	 mov	 rbx, QWORD PTR [r15+rax*8+8]
  00150	49 8d 2c c7	 lea	 rbp, QWORD PTR [r15+rax*8]
  00154	48 85 db	 test	 rbx, rbx
  00157	0f 84 72 01 00
	00		 je	 $LN38@lookdict

; 524  :             }
; 525  :         }
; 526  :         if (ep->me_key == key) {

  0015d	49 3b dd	 cmp	 rbx, r13
  00160	0f 84 6e 01 00
	00		 je	 $LN39@lookdict

; 527  :             *value_addr = &ep->me_value;
; 528  :             return ep;
; 529  :         }
; 530  :         if (ep->me_hash == hash && ep->me_key != dummy) {

  00166	4c 39 75 00	 cmp	 QWORD PTR [rbp], r14
  0016a	0f 85 a7 00 00
	00		 jne	 $LN7@lookdict
  00170	49 3b d8	 cmp	 rbx, r8
  00173	0f 84 a3 00 00
	00		 je	 $LN51@lookdict

; 531  :             startkey = ep->me_key;
; 532  :             Py_INCREF(startkey);

  00179	e8 00 00 00 00	 call	 _Py_PXCTX
  0017e	85 c0		 test	 eax, eax
  00180	75 32		 jne	 SHORT $LN31@lookdict
  00182	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00189	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00190	4c 8b cb	 mov	 r9, rbx
  00193	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00199	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  001a1	e8 00 00 00 00	 call	 _PyParallel_Guard
  001a6	85 c0		 test	 eax, eax
  001a8	75 06		 jne	 SHORT $LN30@lookdict
  001aa	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  001ae	74 04		 je	 SHORT $LN31@lookdict
$LN30@lookdict:
  001b0	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN31@lookdict:

; 533  :             cmp = PyObject_RichCompareBool(startkey, key, Py_EQ);

  001b4	41 b8 02 00 00
	00		 mov	 r8d, 2
  001ba	49 8b d5	 mov	 rdx, r13
  001bd	48 8b cb	 mov	 rcx, rbx
  001c0	e8 00 00 00 00	 call	 PyObject_RichCompareBool

; 534  :             Py_DECREF(startkey);

  001c5	48 8b cb	 mov	 rcx, rbx
  001c8	8b f0		 mov	 esi, eax
  001ca	e8 00 00 00 00	 call	 _Py_DecRef

; 535  :             if (cmp < 0) {

  001cf	85 f6		 test	 esi, esi
  001d1	0f 88 e5 00 00
	00		 js	 $LN40@lookdict

; 538  :             }
; 539  :             if (ep0 == mp->ma_keys->dk_entries && ep->me_key == startkey) {

  001d7	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  001df	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  001e3	48 83 c0 20	 add	 rax, 32			; 00000020H
  001e7	4c 3b f8	 cmp	 r15, rax
  001ea	75 40		 jne	 SHORT $LN48@lookdict
  001ec	48 39 5d 08	 cmp	 QWORD PTR [rbp+8], rbx
  001f0	75 3a		 jne	 SHORT $LN48@lookdict

; 540  :                 if (cmp > 0) {

  001f2	85 f6		 test	 esi, esi
  001f4	0f 8f ae 00 00
	00		 jg	 $LN41@lookdict

; 543  :                 }
; 544  :             }
; 545  :             else {
; 546  :                 /* The dict was mutated, restart */
; 547  :                 goto top;
; 548  :             }

  001fa	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR i$1$[rsp]
  00202	48 8b 54 24 30	 mov	 rdx, QWORD PTR mask$1$[rsp]
  00207	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_dummy_struct
  0020e	49 c1 ec 05	 shr	 r12, 5
  00212	e9 19 ff ff ff	 jmp	 $LL14@lookdict
$LN7@lookdict:

; 549  :         }
; 550  :         else if (ep->me_key == dummy && freeslot == NULL)

  00217	49 3b d8	 cmp	 rbx, r8
  0021a	75 07		 jne	 SHORT $LN13@lookdict
$LN51@lookdict:
  0021c	48 85 ff	 test	 rdi, rdi
  0021f	48 0f 44 fd	 cmove	 rdi, rbp
$LN13@lookdict:

; 510  :     }
; 511  : 
; 512  :     /* In the loop, me_key == dummy is by far (factor of 100s) the
; 513  :        least likely outcome, so test for that last. */
; 514  :     for (perturb = hash; ; perturb >>= PERTURB_SHIFT) {

  00223	49 c1 ec 05	 shr	 r12, 5
  00227	e9 04 ff ff ff	 jmp	 $LL14@lookdict
$LN48@lookdict:

; 543  :                 }
; 544  :             }
; 545  :             else {
; 546  :                 /* The dict was mutated, restart */
; 547  :                 goto top;
; 548  :             }

  0022c	48 8b ac 24 80
	00 00 00	 mov	 rbp, QWORD PTR mp$[rsp]
$LN5@lookdict:

; 470  :     register size_t i;
; 471  :     register size_t perturb;
; 472  :     register PyDictKeyEntry *freeslot;
; 473  :     register size_t mask;
; 474  :     PyDictKeyEntry *ep0;
; 475  :     register PyDictKeyEntry *ep;
; 476  :     register int cmp;
; 477  :     PyObject *startkey;
; 478  : 
; 479  : top:
; 480  :     mask = DK_MASK(mp->ma_keys);

  00234	48 8b 45 68	 mov	 rax, QWORD PTR [rbp+104]
  00238	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]

; 481  :     ep0 = &mp->ma_keys->dk_entries[0];

  0023c	4c 8d 78 20	 lea	 r15, QWORD PTR [rax+32]
  00240	48 ff ca	 dec	 rdx

; 482  :     i = (size_t)hash & mask;

  00243	48 8b ca	 mov	 rcx, rdx
  00246	48 89 54 24 30	 mov	 QWORD PTR mask$1$[rsp], rdx
  0024b	49 23 ce	 and	 rcx, r14
  0024e	48 89 8c 24 90
	00 00 00	 mov	 QWORD PTR i$1$[rsp], rcx

; 483  :     ep = &ep0[i];

  00256	48 8d 04 49	 lea	 rax, QWORD PTR [rcx+rcx*2]

; 484  :     if (ep->me_key == NULL || ep->me_key == key) {

  0025a	49 8b 5c c7 08	 mov	 rbx, QWORD PTR [r15+rax*8+8]
  0025f	49 8d 3c c7	 lea	 rdi, QWORD PTR [r15+rax*8]
  00263	48 85 db	 test	 rbx, rbx
  00266	0f 85 f7 fd ff
	ff		 jne	 $LN52@lookdict
$LN49@lookdict:

; 469  : {

  0026c	4c 8b a4 24 98
	00 00 00	 mov	 r12, QWORD PTR value_addr$[rsp]
$LN22@lookdict:

; 485  :         *value_addr = &ep->me_value;

  00274	48 8d 47 10	 lea	 rax, QWORD PTR [rdi+16]
  00278	49 89 04 24	 mov	 QWORD PTR [r12], rax
$LN53@lookdict:

; 486  :         return ep;

  0027c	48 8b c7	 mov	 rax, rdi
$LN24@lookdict:

; 551  :             freeslot = ep;
; 552  :     }
; 553  :     assert(0);          /* NOT REACHED */
; 554  :     return 0;
; 555  : }

  0027f	48 8b 9c 24 88
	00 00 00	 mov	 rbx, QWORD PTR [rsp+136]
  00287	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0028b	41 5f		 pop	 r15
  0028d	41 5e		 pop	 r14
  0028f	41 5d		 pop	 r13
  00291	41 5c		 pop	 r12
  00293	5f		 pop	 rdi
  00294	5e		 pop	 rsi
  00295	5d		 pop	 rbp
  00296	c3		 ret	 0
$LN44@lookdict:

; 500  :                     *value_addr = &ep->me_value;

  00297	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR value_addr$[rsp]
  0029f	48 8d 47 10	 lea	 rax, QWORD PTR [rdi+16]
  002a3	48 89 02	 mov	 QWORD PTR [rdx], rax

; 501  :                     return ep;

  002a6	eb d4		 jmp	 SHORT $LN53@lookdict
$LN41@lookdict:

; 521  :             } else {
; 522  :                 *value_addr = &freeslot->me_value;

  002a8	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR value_addr$[rsp]

; 541  :                     *value_addr = &ep->me_value;

  002b0	48 8d 4d 10	 lea	 rcx, QWORD PTR [rbp+16]

; 542  :                     return ep;

  002b4	48 8b c5	 mov	 rax, rbp
  002b7	48 89 0a	 mov	 QWORD PTR [rdx], rcx
  002ba	eb c3		 jmp	 SHORT $LN24@lookdict
$LN40@lookdict:

; 536  :                 *value_addr = NULL;

  002bc	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR value_addr$[rsp]
  002c4	48 c7 02 00 00
	00 00		 mov	 QWORD PTR [rdx], 0
$LN43@lookdict:

; 537  :                 return NULL;

  002cb	33 c0		 xor	 eax, eax
  002cd	eb b0		 jmp	 SHORT $LN24@lookdict
$LN38@lookdict:

; 518  :             if (freeslot == NULL) {

  002cf	48 85 ff	 test	 rdi, rdi
  002d2	75 14		 jne	 SHORT $LN10@lookdict
$LN39@lookdict:

; 519  :                 *value_addr = &ep->me_value;

  002d4	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR value_addr$[rsp]
  002dc	48 8d 45 10	 lea	 rax, QWORD PTR [rbp+16]
  002e0	48 89 02	 mov	 QWORD PTR [rdx], rax

; 520  :                 return ep;

  002e3	48 8b c5	 mov	 rax, rbp
  002e6	eb 97		 jmp	 SHORT $LN24@lookdict
$LN10@lookdict:

; 521  :             } else {
; 522  :                 *value_addr = &freeslot->me_value;

  002e8	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR value_addr$[rsp]
  002f0	48 8d 4f 10	 lea	 rcx, QWORD PTR [rdi+16]

; 523  :                 return freeslot;

  002f4	48 8b c7	 mov	 rax, rdi
  002f7	48 89 0a	 mov	 QWORD PTR [rdx], rcx
  002fa	eb 83		 jmp	 SHORT $LN24@lookdict
lookdict ENDP
_TEXT	ENDS
EXTRN	PyUnicode_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$lookdict_unicode DD imagerel lookdict_unicode
	DD	imagerel lookdict_unicode+77
	DD	imagerel $unwind$lookdict_unicode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$lookdict_unicode DD imagerel lookdict_unicode+77
	DD	imagerel lookdict_unicode+182
	DD	imagerel $chain$1$lookdict_unicode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$lookdict_unicode DD imagerel lookdict_unicode+182
	DD	imagerel lookdict_unicode+347
	DD	imagerel $chain$2$lookdict_unicode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$lookdict_unicode DD imagerel lookdict_unicode+347
	DD	imagerel lookdict_unicode+370
	DD	imagerel $chain$3$lookdict_unicode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$lookdict_unicode DD imagerel lookdict_unicode+370
	DD	imagerel lookdict_unicode+391
	DD	imagerel $chain$5$lookdict_unicode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$lookdict_unicode DD imagerel lookdict_unicode+391
	DD	imagerel lookdict_unicode+403
	DD	imagerel $chain$6$lookdict_unicode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$lookdict_unicode DD 040021H
	DD	0c7400H
	DD	0b3400H
	DD	imagerel lookdict_unicode
	DD	imagerel lookdict_unicode+77
	DD	imagerel $unwind$lookdict_unicode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$lookdict_unicode DD 060021H
	DD	0de400H
	DD	0c7400H
	DD	0b3400H
	DD	imagerel lookdict_unicode
	DD	imagerel lookdict_unicode+77
	DD	imagerel $unwind$lookdict_unicode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$lookdict_unicode DD 021H
	DD	imagerel lookdict_unicode+77
	DD	imagerel lookdict_unicode+182
	DD	imagerel $chain$1$lookdict_unicode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$lookdict_unicode DD 020521H
	DD	0de405H
	DD	imagerel lookdict_unicode+77
	DD	imagerel lookdict_unicode+182
	DD	imagerel $chain$1$lookdict_unicode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$lookdict_unicode DD 040a21H
	DD	0c740aH
	DD	0b3405H
	DD	imagerel lookdict_unicode
	DD	imagerel lookdict_unicode+77
	DD	imagerel $unwind$lookdict_unicode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lookdict_unicode DD 060d01H
	DD	0f009320dH
	DD	0c005d007H
	DD	050026003H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT lookdict_unicode
_TEXT	SEGMENT
perturb$1$ = 80
mp$ = 80
key$ = 88
hash$ = 96
value_addr$ = 104
lookdict_unicode PROC					; COMDAT

; 561  : {

  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	41 54		 push	 r12
  00005	41 55		 push	 r13
  00007	41 57		 push	 r15
  00009	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 562  :     register size_t i;
; 563  :     register size_t perturb;
; 564  :     register PyDictKeyEntry *freeslot;
; 565  :     register size_t mask = DK_MASK(mp->ma_keys);

  0000d	4c 8b 79 68	 mov	 r15, QWORD PTR [rcx+104]

; 566  :     PyDictKeyEntry *ep0 = &mp->ma_keys->dk_entries[0];
; 567  :     register PyDictKeyEntry *ep;
; 568  : 
; 569  :     /* Make sure this function doesn't have to handle non-unicode keys,
; 570  :        including subclasses of str; e.g., one reason to subclass
; 571  :        unicodes is to override __eq__, and for speed we don't cater to
; 572  :        that here. */
; 573  :     if (!PyUnicode_CheckExact(key)) {

  00011	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  00018	49 8b f1	 mov	 rsi, r9
  0001b	4d 8b 6f 08	 mov	 r13, QWORD PTR [r15+8]
  0001f	4d 8b e0	 mov	 r12, r8
  00022	48 8b ea	 mov	 rbp, rdx
  00025	49 ff cd	 dec	 r13
  00028	48 39 42 58	 cmp	 QWORD PTR [rdx+88], rax
  0002c	74 1f		 je	 SHORT $LN15@lookdict_u

; 574  :         mp->ma_keys->dk_lookup = lookdict;

  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:lookdict
  00035	49 89 57 10	 mov	 QWORD PTR [r15+16], rdx

; 575  :         return lookdict(mp, key, hash, value_addr);

  00039	48 8b d5	 mov	 rdx, rbp

; 615  :             freeslot = ep;
; 616  :     }
; 617  :     assert(0);          /* NOT REACHED */
; 618  :     return 0;
; 619  : }

  0003c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00040	41 5f		 pop	 r15
  00042	41 5d		 pop	 r13
  00044	41 5c		 pop	 r12
  00046	5e		 pop	 rsi
  00047	5d		 pop	 rbp
  00048	e9 00 00 00 00	 jmp	 lookdict
$LN15@lookdict_u:
  0004d	48 89 5c 24 58	 mov	 QWORD PTR [rsp+88], rbx
  00052	48 89 7c 24 60	 mov	 QWORD PTR [rsp+96], rdi

; 576  :     }
; 577  :     i = (size_t)hash & mask;

  00057	49 8b fd	 mov	 rdi, r13
  0005a	49 23 f8	 and	 rdi, r8

; 578  :     ep = &ep0[i];

  0005d	48 8d 04 7f	 lea	 rax, QWORD PTR [rdi+rdi*2]

; 579  :     if (ep->me_key == NULL || ep->me_key == key) {

  00061	49 8b 4c c7 28	 mov	 rcx, QWORD PTR [r15+rax*8+40]
  00066	49 8d 5c c7 20	 lea	 rbx, QWORD PTR [r15+rax*8+32]
  0006b	48 85 c9	 test	 rcx, rcx
  0006e	0f 84 13 01 00
	00		 je	 $LN13@lookdict_u
  00074	48 3b ca	 cmp	 rcx, rdx
  00077	0f 84 0a 01 00
	00		 je	 $LN13@lookdict_u

; 582  :     }
; 583  :     if (ep->me_key == dummy)

  0007d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_dummy_struct
  00084	48 3b ca	 cmp	 rcx, rdx
  00087	74 29		 je	 SHORT $LN11@lookdict_u

; 584  :         freeslot = ep;
; 585  :     else {
; 586  :         if (ep->me_hash == hash && unicode_eq(ep->me_key, key)) {

  00089	4c 39 03	 cmp	 QWORD PTR [rbx], r8
  0008c	75 22		 jne	 SHORT $LN10@lookdict_u
  0008e	48 8b d5	 mov	 rdx, rbp
  00091	e8 00 00 00 00	 call	 unicode_eq
  00096	85 c0		 test	 eax, eax
  00098	74 0f		 je	 SHORT $LN23@lookdict_u

; 587  :             *value_addr = &ep->me_value;

  0009a	48 8d 43 10	 lea	 rax, QWORD PTR [rbx+16]
  0009e	48 89 06	 mov	 QWORD PTR [rsi], rax

; 588  :             return ep;

  000a1	48 8b c3	 mov	 rax, rbx
  000a4	e9 b2 00 00 00	 jmp	 $LN25@lookdict_u
$LN23@lookdict_u:

; 591  :     }
; 592  : 
; 593  :     /* In the loop, me_key == dummy is by far (factor of 100s) the
; 594  :        least likely outcome, so test for that last. */
; 595  :     for (perturb = hash; ; perturb >>= PERTURB_SHIFT) {

  000a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_dummy_struct
$LN10@lookdict_u:

; 589  :         }
; 590  :         freeslot = NULL;

  000b0	33 db		 xor	 ebx, ebx
$LN11@lookdict_u:

; 596  :         i = (i << 2) + i + perturb + 1;

  000b2	49 8d 04 bc	 lea	 rax, QWORD PTR [r12+rdi*4]
  000b6	4c 89 74 24 68	 mov	 QWORD PTR [rsp+104], r14
  000bb	49 8b cc	 mov	 rcx, r12
  000be	4c 8d 74 07 01	 lea	 r14, QWORD PTR [rdi+rax+1]
  000c3	48 89 4c 24 50	 mov	 QWORD PTR perturb$1$[rsp], rcx

; 597  :         ep = &ep0[i & mask];

  000c8	49 8b c6	 mov	 rax, r14
  000cb	49 23 c5	 and	 rax, r13
  000ce	48 8d 04 40	 lea	 rax, QWORD PTR [rax+rax*2]
  000d2	49 8d 7c c7 20	 lea	 rdi, QWORD PTR [r15+rax*8+32]

; 598  :         if (ep->me_key == NULL) {

  000d7	49 8b 44 c7 28	 mov	 rax, QWORD PTR [r15+rax*8+40]
  000dc	48 85 c0	 test	 rax, rax
  000df	74 66		 je	 SHORT $LN19@lookdict_u
$LL9@lookdict_u:

; 605  :             }
; 606  :         }
; 607  :         if (ep->me_key == key
; 608  :             || (ep->me_hash == hash
; 609  :             && ep->me_key != dummy
; 610  :             && unicode_eq(ep->me_key, key))) {

  000e1	48 3b c5	 cmp	 rax, rbp
  000e4	0f 84 88 00 00
	00		 je	 $LN20@lookdict_u
  000ea	4c 39 27	 cmp	 QWORD PTR [rdi], r12
  000ed	75 20		 jne	 SHORT $LN3@lookdict_u
  000ef	48 3b c2	 cmp	 rax, rdx
  000f2	74 21		 je	 SHORT $LN22@lookdict_u
  000f4	48 8b d5	 mov	 rdx, rbp
  000f7	48 8b c8	 mov	 rcx, rax
  000fa	e8 00 00 00 00	 call	 unicode_eq
  000ff	85 c0		 test	 eax, eax
  00101	75 6f		 jne	 SHORT $LN20@lookdict_u
  00103	48 8b 4c 24 50	 mov	 rcx, QWORD PTR perturb$1$[rsp]
  00108	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_dummy_struct
$LN3@lookdict_u:

; 613  :         }
; 614  :         if (ep->me_key == dummy && freeslot == NULL)

  0010f	48 39 57 08	 cmp	 QWORD PTR [rdi+8], rdx
  00113	75 07		 jne	 SHORT $LN8@lookdict_u
$LN22@lookdict_u:
  00115	48 85 db	 test	 rbx, rbx
  00118	48 0f 44 df	 cmove	 rbx, rdi
$LN8@lookdict_u:

; 591  :     }
; 592  : 
; 593  :     /* In the loop, me_key == dummy is by far (factor of 100s) the
; 594  :        least likely outcome, so test for that last. */
; 595  :     for (perturb = hash; ; perturb >>= PERTURB_SHIFT) {

  0011c	48 c1 e9 05	 shr	 rcx, 5
  00120	48 89 4c 24 50	 mov	 QWORD PTR perturb$1$[rsp], rcx

; 596  :         i = (i << 2) + i + perturb + 1;

  00125	4a 8d 04 b1	 lea	 rax, QWORD PTR [rcx+r14*4]
  00129	4d 8d 74 06 01	 lea	 r14, QWORD PTR [r14+rax+1]

; 597  :         ep = &ep0[i & mask];

  0012e	49 8b c6	 mov	 rax, r14
  00131	49 23 c5	 and	 rax, r13
  00134	48 8d 04 40	 lea	 rax, QWORD PTR [rax+rax*2]
  00138	49 8d 7c c7 20	 lea	 rdi, QWORD PTR [r15+rax*8+32]

; 598  :         if (ep->me_key == NULL) {

  0013d	49 8b 44 c7 28	 mov	 rax, QWORD PTR [r15+rax*8+40]
  00142	48 85 c0	 test	 rax, rax
  00145	75 9a		 jne	 SHORT $LL9@lookdict_u
$LN19@lookdict_u:

; 599  :             if (freeslot == NULL) {

  00147	48 85 db	 test	 rbx, rbx
  0014a	75 2f		 jne	 SHORT $LN5@lookdict_u

; 600  :                 *value_addr = &ep->me_value;

  0014c	48 8d 47 10	 lea	 rax, QWORD PTR [rdi+16]
  00150	48 89 06	 mov	 QWORD PTR [rsi], rax
$LN27@lookdict_u:

; 612  :             return ep;

  00153	48 8b c7	 mov	 rax, rdi
$LN26@lookdict_u:
  00156	4c 8b 74 24 68	 mov	 r14, QWORD PTR [rsp+104]
$LN25@lookdict_u:
  0015b	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  00160	48 8b 7c 24 60	 mov	 rdi, QWORD PTR [rsp+96]

; 615  :             freeslot = ep;
; 616  :     }
; 617  :     assert(0);          /* NOT REACHED */
; 618  :     return 0;
; 619  : }

  00165	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00169	41 5f		 pop	 r15
  0016b	41 5d		 pop	 r13
  0016d	41 5c		 pop	 r12
  0016f	5e		 pop	 rsi
  00170	5d		 pop	 rbp
  00171	c3		 ret	 0
$LN20@lookdict_u:

; 611  :             *value_addr = &ep->me_value;

  00172	48 8d 4f 10	 lea	 rcx, QWORD PTR [rdi+16]
  00176	48 89 0e	 mov	 QWORD PTR [rsi], rcx

; 612  :             return ep;

  00179	eb d8		 jmp	 SHORT $LN27@lookdict_u
$LN5@lookdict_u:

; 601  :                 return ep;
; 602  :             } else {
; 603  :                 *value_addr = &freeslot->me_value;

  0017b	48 8d 4b 10	 lea	 rcx, QWORD PTR [rbx+16]

; 604  :                 return freeslot;

  0017f	48 8b c3	 mov	 rax, rbx
  00182	48 89 0e	 mov	 QWORD PTR [rsi], rcx
  00185	eb cf		 jmp	 SHORT $LN26@lookdict_u
$LN13@lookdict_u:

; 580  :         *value_addr = &ep->me_value;

  00187	48 8d 43 10	 lea	 rax, QWORD PTR [rbx+16]
  0018b	49 89 01	 mov	 QWORD PTR [r9], rax

; 581  :         return ep;

  0018e	48 8b c3	 mov	 rax, rbx
  00191	eb c8		 jmp	 SHORT $LN25@lookdict_u
lookdict_unicode ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$lookdict_unicode_nodummy DD imagerel lookdict_unicode_nodummy
	DD	imagerel lookdict_unicode_nodummy+140
	DD	imagerel $unwind$lookdict_unicode_nodummy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$lookdict_unicode_nodummy DD imagerel lookdict_unicode_nodummy+140
	DD	imagerel lookdict_unicode_nodummy+247
	DD	imagerel $chain$2$lookdict_unicode_nodummy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$lookdict_unicode_nodummy DD imagerel lookdict_unicode_nodummy+247
	DD	imagerel lookdict_unicode_nodummy+281
	DD	imagerel $chain$3$lookdict_unicode_nodummy
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$lookdict_unicode_nodummy DD 021H
	DD	imagerel lookdict_unicode_nodummy
	DD	imagerel lookdict_unicode_nodummy+140
	DD	imagerel $unwind$lookdict_unicode_nodummy
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$lookdict_unicode_nodummy DD 020521H
	DD	0cd405H
	DD	imagerel lookdict_unicode_nodummy
	DD	imagerel lookdict_unicode_nodummy+140
	DD	imagerel $unwind$lookdict_unicode_nodummy
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lookdict_unicode_nodummy DD 0a5701H
	DD	0b5457H
	DD	0a3452H
	DD	0f009320dH
	DD	0c005e007H
	DD	060027003H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT lookdict_unicode_nodummy
_TEXT	SEGMENT
mp$ = 80
key$ = 88
hash$ = 96
value_addr$ = 104
lookdict_unicode_nodummy PROC				; COMDAT

; 626  : {

  00000	40 56		 push	 rsi
  00002	57		 push	 rdi
  00003	41 54		 push	 r12
  00005	41 56		 push	 r14
  00007	41 57		 push	 r15
  00009	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 627  :     register size_t i;
; 628  :     register size_t perturb;
; 629  :     register size_t mask = DK_MASK(mp->ma_keys);

  0000d	4c 8b 79 68	 mov	 r15, QWORD PTR [rcx+104]

; 630  :     PyDictKeyEntry *ep0 = &mp->ma_keys->dk_entries[0];
; 631  :     register PyDictKeyEntry *ep;
; 632  : 
; 633  :     /* Make sure this function doesn't have to handle non-unicode keys,
; 634  :        including subclasses of str; e.g., one reason to subclass
; 635  :        unicodes is to override __eq__, and for speed we don't cater to
; 636  :        that here. */
; 637  :     if (!PyUnicode_CheckExact(key)) {

  00011	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  00018	4d 8b e1	 mov	 r12, r9
  0001b	4d 8b 77 08	 mov	 r14, QWORD PTR [r15+8]
  0001f	49 8b f0	 mov	 rsi, r8
  00022	48 8b fa	 mov	 rdi, rdx
  00025	49 ff ce	 dec	 r14
  00028	48 39 42 58	 cmp	 QWORD PTR [rdx+88], rax
  0002c	74 1f		 je	 SHORT $LN8@lookdict_u@2

; 638  :         mp->ma_keys->dk_lookup = lookdict;

  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:lookdict
  00035	49 89 57 10	 mov	 QWORD PTR [r15+16], rdx

; 639  :         return lookdict(mp, key, hash, value_addr);

  00039	48 8b d7	 mov	 rdx, rdi

; 655  :             *value_addr = &ep->me_value;
; 656  :             return ep;
; 657  :         }
; 658  :     }
; 659  :     assert(0);          /* NOT REACHED */
; 660  :     return 0;
; 661  : }

  0003c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00040	41 5f		 pop	 r15
  00042	41 5e		 pop	 r14
  00044	41 5c		 pop	 r12
  00046	5f		 pop	 rdi
  00047	5e		 pop	 rsi
  00048	e9 00 00 00 00	 jmp	 lookdict
$LN8@lookdict_u@2:
  0004d	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  00052	48 89 6c 24 58	 mov	 QWORD PTR [rsp+88], rbp

; 640  :     }
; 641  :     i = (size_t)hash & mask;

  00057	49 8b ee	 mov	 rbp, r14
  0005a	49 23 e8	 and	 rbp, r8

; 642  :     ep = &ep0[i];

  0005d	48 8d 44 6d 00	 lea	 rax, QWORD PTR [rbp+rbp*2]

; 643  :     assert(ep->me_key == NULL || PyUnicode_CheckExact(ep->me_key));
; 644  :     if (ep->me_key == NULL || ep->me_key == key ||
; 645  :         (ep->me_hash == hash && unicode_eq(ep->me_key, key))) {

  00062	49 8b 4c c7 28	 mov	 rcx, QWORD PTR [r15+rax*8+40]
  00067	49 8d 5c c7 20	 lea	 rbx, QWORD PTR [r15+rax*8+32]
  0006c	48 85 c9	 test	 rcx, rcx
  0006f	0f 84 82 00 00
	00		 je	 $LN6@lookdict_u@2
  00075	48 3b ca	 cmp	 rcx, rdx
  00078	74 7d		 je	 SHORT $LN6@lookdict_u@2
  0007a	4c 39 03	 cmp	 QWORD PTR [rbx], r8
  0007d	75 09		 jne	 SHORT $LN7@lookdict_u@2
  0007f	e8 00 00 00 00	 call	 unicode_eq
  00084	85 c0		 test	 eax, eax
  00086	75 6f		 jne	 SHORT $LN6@lookdict_u@2
$LN7@lookdict_u@2:

; 650  :         i = (i << 2) + i + perturb + 1;

  00088	48 8d 04 ae	 lea	 rax, QWORD PTR [rsi+rbp*4]
  0008c	4c 89 6c 24 60	 mov	 QWORD PTR [rsp+96], r13
  00091	4c 8b ee	 mov	 r13, rsi
  00094	48 8d 6c 28 01	 lea	 rbp, QWORD PTR [rax+rbp+1]

; 651  :         ep = &ep0[i & mask];

  00099	48 8b c5	 mov	 rax, rbp
  0009c	49 23 c6	 and	 rax, r14
  0009f	48 8d 04 40	 lea	 rax, QWORD PTR [rax+rax*2]
  000a3	49 8d 5c c7 20	 lea	 rbx, QWORD PTR [r15+rax*8+32]

; 652  :         assert(ep->me_key == NULL || PyUnicode_CheckExact(ep->me_key));
; 653  :         if (ep->me_key == NULL || ep->me_key == key ||
; 654  :             (ep->me_hash == hash && unicode_eq(ep->me_key, key))) {

  000a8	49 8b 44 c7 28	 mov	 rax, QWORD PTR [r15+rax*8+40]
  000ad	48 85 c0	 test	 rax, rax
  000b0	74 40		 je	 SHORT $LN14@lookdict_u@2
$LL5@lookdict_u@2:
  000b2	48 3b c7	 cmp	 rax, rdi
  000b5	74 3b		 je	 SHORT $LN14@lookdict_u@2
  000b7	48 39 33	 cmp	 QWORD PTR [rbx], rsi
  000ba	75 0f		 jne	 SHORT $LN4@lookdict_u@2
  000bc	48 8b d7	 mov	 rdx, rdi
  000bf	48 8b c8	 mov	 rcx, rax
  000c2	e8 00 00 00 00	 call	 unicode_eq
  000c7	85 c0		 test	 eax, eax
  000c9	75 27		 jne	 SHORT $LN14@lookdict_u@2
$LN4@lookdict_u@2:

; 648  :     }
; 649  :     for (perturb = hash; ; perturb >>= PERTURB_SHIFT) {

  000cb	49 c1 ed 05	 shr	 r13, 5

; 650  :         i = (i << 2) + i + perturb + 1;

  000cf	49 8d 44 ad 00	 lea	 rax, QWORD PTR [r13+rbp*4]
  000d4	48 8d 6c 28 01	 lea	 rbp, QWORD PTR [rax+rbp+1]

; 651  :         ep = &ep0[i & mask];

  000d9	48 8b c5	 mov	 rax, rbp
  000dc	49 23 c6	 and	 rax, r14
  000df	48 8d 04 40	 lea	 rax, QWORD PTR [rax+rax*2]
  000e3	49 8d 5c c7 20	 lea	 rbx, QWORD PTR [r15+rax*8+32]

; 652  :         assert(ep->me_key == NULL || PyUnicode_CheckExact(ep->me_key));
; 653  :         if (ep->me_key == NULL || ep->me_key == key ||
; 654  :             (ep->me_hash == hash && unicode_eq(ep->me_key, key))) {

  000e8	49 8b 44 c7 28	 mov	 rax, QWORD PTR [r15+rax*8+40]
  000ed	48 85 c0	 test	 rax, rax
  000f0	75 c0		 jne	 SHORT $LL5@lookdict_u@2
$LN14@lookdict_u@2:
  000f2	4c 8b 6c 24 60	 mov	 r13, QWORD PTR [rsp+96]
$LN6@lookdict_u@2:
  000f7	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]

; 646  :         *value_addr = &ep->me_value;

  000fc	48 8d 4b 10	 lea	 rcx, QWORD PTR [rbx+16]

; 647  :         return ep;

  00100	48 8b c3	 mov	 rax, rbx
  00103	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00108	49 89 0c 24	 mov	 QWORD PTR [r12], rcx

; 655  :             *value_addr = &ep->me_value;
; 656  :             return ep;
; 657  :         }
; 658  :     }
; 659  :     assert(0);          /* NOT REACHED */
; 660  :     return 0;
; 661  : }

  0010c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00110	41 5f		 pop	 r15
  00112	41 5e		 pop	 r14
  00114	41 5c		 pop	 r12
  00116	5f		 pop	 rdi
  00117	5e		 pop	 rsi
  00118	c3		 ret	 0
lookdict_unicode_nodummy ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$lookdict_split DD imagerel lookdict_split
	DD	imagerel lookdict_split+368
	DD	imagerel $unwind$lookdict_split
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lookdict_split DD 0c9701H
	DD	0b7497H
	DD	0a348fH
	DD	0c5417H
	DD	0f0133217H
	DD	0d00fe011H
	DD	0600bc00dH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT lookdict_split
_TEXT	SEGMENT
mp$ = 80
key$ = 88
hash$ = 96
value_addr$ = 104
lookdict_split PROC					; COMDAT

; 671  : {

  00000	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  00005	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  0000a	56		 push	 rsi
  0000b	41 54		 push	 r12
  0000d	41 55		 push	 r13
  0000f	41 56		 push	 r14
  00011	41 57		 push	 r15
  00013	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 672  :     register size_t i;
; 673  :     register size_t perturb;
; 674  :     register size_t mask = DK_MASK(mp->ma_keys);

  00017	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]
  0001b	4d 8b e9	 mov	 r13, r9
  0001e	49 8b e8	 mov	 rbp, r8
  00021	4c 8b 60 08	 mov	 r12, QWORD PTR [rax+8]

; 675  :     PyDictKeyEntry *ep0 = &mp->ma_keys->dk_entries[0];

  00025	4c 8d 70 20	 lea	 r14, QWORD PTR [rax+32]

; 676  :     register PyDictKeyEntry *ep;
; 677  : 
; 678  :     if (!PyUnicode_CheckExact(key)) {

  00029	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  00030	49 ff cc	 dec	 r12
  00033	48 8b f2	 mov	 rsi, rdx
  00036	4c 8b f9	 mov	 r15, rcx
  00039	48 39 42 58	 cmp	 QWORD PTR [rdx+88], rax
  0003d	74 4b		 je	 SHORT $LN8@lookdict_s

; 679  :         ep = lookdict(mp, key, hash, value_addr);

  0003f	e8 00 00 00 00	 call	 lookdict

; 680  :         /* lookdict expects a combined-table, so fix value_addr */
; 681  :         i = ep - ep0;

  00044	48 8b c8	 mov	 rcx, rax
  00047	4c 8b d8	 mov	 r11, rax
  0004a	48 b8 ab aa aa
	aa aa aa aa 2a	 mov	 rax, 3074457345618258603 ; 2aaaaaaaaaaaaaabH
  00054	49 2b ce	 sub	 rcx, r14
  00057	48 f7 e9	 imul	 rcx

; 682  :         *value_addr = &mp->ma_values[i];
; 683  :         return ep;

  0005a	49 8b c3	 mov	 rax, r11
  0005d	48 c1 fa 02	 sar	 rdx, 2
  00061	48 8b ca	 mov	 rcx, rdx
  00064	48 c1 e9 3f	 shr	 rcx, 63			; 0000003fH
  00068	48 03 d1	 add	 rdx, rcx
  0006b	49 8b 4f 70	 mov	 rcx, QWORD PTR [r15+112]
  0006f	48 8d 14 d1	 lea	 rdx, QWORD PTR [rcx+rdx*8]
  00073	49 89 55 00	 mov	 QWORD PTR [r13], rdx

; 701  :         }
; 702  :     }
; 703  :     assert(0);          /* NOT REACHED */
; 704  :     return 0;
; 705  : }

  00077	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
  0007c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00080	41 5f		 pop	 r15
  00082	41 5e		 pop	 r14
  00084	41 5d		 pop	 r13
  00086	41 5c		 pop	 r12
  00088	5e		 pop	 rsi
  00089	c3		 ret	 0
$LN8@lookdict_s:
  0008a	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx

; 684  :     }
; 685  :     i = (size_t)hash & mask;

  0008f	49 8b dc	 mov	 rbx, r12
  00092	48 89 7c 24 58	 mov	 QWORD PTR [rsp+88], rdi
  00097	49 23 d8	 and	 rbx, r8

; 686  :     ep = &ep0[i];

  0009a	48 8d 04 5b	 lea	 rax, QWORD PTR [rbx+rbx*2]

; 687  :     assert(ep->me_key == NULL || PyUnicode_CheckExact(ep->me_key));
; 688  :     if (ep->me_key == NULL || ep->me_key == key ||
; 689  :         (ep->me_hash == hash && unicode_eq(ep->me_key, key))) {

  0009e	49 8b 4c c6 08	 mov	 rcx, QWORD PTR [r14+rax*8+8]
  000a3	49 8d 3c c6	 lea	 rdi, QWORD PTR [r14+rax*8]
  000a7	48 85 c9	 test	 rcx, rcx
  000aa	0f 84 94 00 00
	00		 je	 $LN6@lookdict_s
  000b0	48 3b ca	 cmp	 rcx, rdx
  000b3	0f 84 8b 00 00
	00		 je	 $LN6@lookdict_s
  000b9	4c 39 07	 cmp	 QWORD PTR [rdi], r8
  000bc	75 09		 jne	 SHORT $LN7@lookdict_s
  000be	e8 00 00 00 00	 call	 unicode_eq
  000c3	85 c0		 test	 eax, eax
  000c5	75 7d		 jne	 SHORT $LN6@lookdict_s
$LN7@lookdict_s:

; 694  :         i = (i << 2) + i + perturb + 1;

  000c7	48 8d 44 9d 00	 lea	 rax, QWORD PTR [rbp+rbx*4]
  000cc	4c 8b ed	 mov	 r13, rbp
  000cf	48 8d 5c 03 01	 lea	 rbx, QWORD PTR [rbx+rax+1]

; 695  :         ep = &ep0[i & mask];

  000d4	48 8b c3	 mov	 rax, rbx
  000d7	49 23 c4	 and	 rax, r12
  000da	48 8d 04 40	 lea	 rax, QWORD PTR [rax+rax*2]
  000de	49 8d 3c c6	 lea	 rdi, QWORD PTR [r14+rax*8]

; 696  :         assert(ep->me_key == NULL || PyUnicode_CheckExact(ep->me_key));
; 697  :         if (ep->me_key == NULL || ep->me_key == key ||
; 698  :             (ep->me_hash == hash && unicode_eq(ep->me_key, key))) {

  000e2	49 8b 44 c6 08	 mov	 rax, QWORD PTR [r14+rax*8+8]
  000e7	48 85 c0	 test	 rax, rax
  000ea	74 43		 je	 SHORT $LN14@lookdict_s
  000ec	0f 1f 40 00	 npad	 4
$LL5@lookdict_s:
  000f0	48 3b c6	 cmp	 rax, rsi
  000f3	74 3a		 je	 SHORT $LN14@lookdict_s
  000f5	48 39 2f	 cmp	 QWORD PTR [rdi], rbp
  000f8	75 0f		 jne	 SHORT $LN4@lookdict_s
  000fa	48 8b d6	 mov	 rdx, rsi
  000fd	48 8b c8	 mov	 rcx, rax
  00100	e8 00 00 00 00	 call	 unicode_eq
  00105	85 c0		 test	 eax, eax
  00107	75 26		 jne	 SHORT $LN14@lookdict_s
$LN4@lookdict_s:

; 691  :         return ep;
; 692  :     }
; 693  :     for (perturb = hash; ; perturb >>= PERTURB_SHIFT) {

  00109	49 c1 ed 05	 shr	 r13, 5

; 694  :         i = (i << 2) + i + perturb + 1;

  0010d	49 8d 44 9d 00	 lea	 rax, QWORD PTR [r13+rbx*4]
  00112	48 8d 5c 03 01	 lea	 rbx, QWORD PTR [rbx+rax+1]

; 695  :         ep = &ep0[i & mask];

  00117	48 8b c3	 mov	 rax, rbx
  0011a	49 23 c4	 and	 rax, r12
  0011d	48 8d 04 40	 lea	 rax, QWORD PTR [rax+rax*2]
  00121	49 8d 3c c6	 lea	 rdi, QWORD PTR [r14+rax*8]

; 696  :         assert(ep->me_key == NULL || PyUnicode_CheckExact(ep->me_key));
; 697  :         if (ep->me_key == NULL || ep->me_key == key ||
; 698  :             (ep->me_hash == hash && unicode_eq(ep->me_key, key))) {

  00125	49 8b 44 c6 08	 mov	 rax, QWORD PTR [r14+rax*8+8]
  0012a	48 85 c0	 test	 rax, rax
  0012d	75 c1		 jne	 SHORT $LL5@lookdict_s
$LN14@lookdict_s:

; 699  :             *value_addr = &mp->ma_values[i & mask];

  0012f	49 8b 4f 70	 mov	 rcx, QWORD PTR [r15+112]
  00133	48 8b 44 24 68	 mov	 rax, QWORD PTR value_addr$[rsp]
  00138	49 23 dc	 and	 rbx, r12
  0013b	48 8d 14 d9	 lea	 rdx, QWORD PTR [rcx+rbx*8]
  0013f	48 89 10	 mov	 QWORD PTR [rax], rdx

; 700  :             return ep;

  00142	eb 0c		 jmp	 SHORT $LN17@lookdict_s
$LN6@lookdict_s:

; 690  :         *value_addr = &mp->ma_values[i];

  00144	49 8b 4f 70	 mov	 rcx, QWORD PTR [r15+112]
  00148	48 8d 14 d9	 lea	 rdx, QWORD PTR [rcx+rbx*8]
  0014c	49 89 55 00	 mov	 QWORD PTR [r13], rdx
$LN17@lookdict_s:

; 701  :         }
; 702  :     }
; 703  :     assert(0);          /* NOT REACHED */
; 704  :     return 0;
; 705  : }

  00150	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00155	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
  0015a	48 8b c7	 mov	 rax, rdi
  0015d	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  00162	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00166	41 5f		 pop	 r15
  00168	41 5e		 pop	 r14
  0016a	41 5d		 pop	 r13
  0016c	41 5c		 pop	 r12
  0016e	5e		 pop	 rsi
  0016f	c3		 ret	 0
lookdict_split ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@	; `string'
PUBLIC	_PyDict_MaybeUntrack
EXTRN	PyTuple_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyDict_MaybeUntrack DD imagerel $LN94
	DD	imagerel $LN94+147
	DD	imagerel $unwind$_PyDict_MaybeUntrack
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$_PyDict_MaybeUntrack DD imagerel $LN94+147
	DD	imagerel $LN94+1238
	DD	imagerel $chain$4$_PyDict_MaybeUntrack
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$_PyDict_MaybeUntrack DD imagerel $LN94+1238
	DD	imagerel $LN94+1244
	DD	imagerel $chain$5$_PyDict_MaybeUntrack
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$_PyDict_MaybeUntrack DD 021H
	DD	imagerel $LN94
	DD	imagerel $LN94+147
	DD	imagerel $unwind$_PyDict_MaybeUntrack
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$_PyDict_MaybeUntrack DD 0a2121H
	DD	06d421H
	DD	07c418H
	DD	0d740fH
	DD	0c640aH
	DD	0b3405H
	DD	imagerel $LN94
	DD	imagerel $LN94+147
	DD	imagerel $unwind$_PyDict_MaybeUntrack
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyDict_MaybeUntrack DD 020601H
	DD	050027206H
xdata	ENDS
;	COMDAT ??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
CONST	SEGMENT
??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@ DB '_PyDict_MaybeUntrack', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyDict_MaybeUntrack
_TEXT	SEGMENT
tv288 = 80
tv219 = 80
tv150 = 80
op$ = 80
_PyDict_MaybeUntrack PROC				; COMDAT

; 734  : {

$LN94:
  00000	40 55		 push	 rbp
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 735  :     PyDictObject *mp;
; 736  :     PyObject *value;
; 737  :     Py_ssize_t i, size;
; 738  : 
; 739  :     if (!PyDict_CheckExact(op) || !_PyObject_GC_IS_TRACKED(op))

  00006	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  0000d	48 8b e9	 mov	 rbp, rcx
  00010	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00014	74 0a		 je	 SHORT $LN18@PyDict_May
  00016	48 39 41 38	 cmp	 QWORD PTR [rcx+56], rax
  0001a	0f 85 b6 04 00
	00		 jne	 $LN1@PyDict_May
$LN18@PyDict_May:
  00020	4c 8b c9	 mov	 r9, rcx
  00023	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  00031	41 b8 e3 02 00
	00		 mov	 r8d, 739		; 000002e3H
  00037	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0003f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00044	85 c0		 test	 eax, eax
  00046	0f 85 8a 04 00
	00		 jne	 $LN1@PyDict_May
  0004c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00053	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  0005a	4c 8b cd	 mov	 r9, rbp
  0005d	41 b8 e3 02 00
	00		 mov	 r8d, 739		; 000002e3H
  00063	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0006b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00070	85 c0		 test	 eax, eax
  00072	74 04		 je	 SHORT $LN23@PyDict_May
  00074	33 c9		 xor	 ecx, ecx
  00076	eb 04		 jmp	 SHORT $LN24@PyDict_May
$LN23@PyDict_May:
  00078	48 8d 4d e8	 lea	 rcx, QWORD PTR [rbp-24]
$LN24@PyDict_May:
  0007c	33 c0		 xor	 eax, eax
  0007e	48 83 79 10 fe	 cmp	 QWORD PTR [rcx+16], -2
  00083	0f 95 c0	 setne	 al
  00086	85 c0		 test	 eax, eax

; 740  :         return;

  00088	0f 84 48 04 00
	00		 je	 $LN1@PyDict_May

; 741  : 
; 742  :     mp = (PyDictObject *) op;
; 743  :     size = DK_SIZE(mp->ma_keys);
; 744  :     if (_PyDict_HasSplitTable(mp)) {

  0008e	48 83 7d 70 00	 cmp	 QWORD PTR [rbp+112], 0
  00093	48 89 5c 24 58	 mov	 QWORD PTR [rsp+88], rbx
  00098	48 89 74 24 60	 mov	 QWORD PTR [rsp+96], rsi
  0009d	48 89 7c 24 68	 mov	 QWORD PTR [rsp+104], rdi
  000a2	48 8b 7d 68	 mov	 rdi, QWORD PTR [rbp+104]
  000a6	4c 89 64 24 38	 mov	 QWORD PTR [rsp+56], r12
  000ab	4c 8b 67 08	 mov	 r12, QWORD PTR [rdi+8]
  000af	4c 89 6c 24 30	 mov	 QWORD PTR [rsp+48], r13
  000b4	0f 84 3c 01 00
	00		 je	 $LN17@PyDict_May

; 745  :         for (i = 0; i < size; i++) {

  000ba	33 ff		 xor	 edi, edi
  000bc	4d 85 e4	 test	 r12, r12
  000bf	0f 8e 7c 03 00
	00		 jle	 $LN8@PyDict_May
  000c5	4c 8d 2d 00 00
	00 00		 lea	 r13, OFFSET FLAT:PyTuple_Type
  000cc	0f 1f 40 00	 npad	 4
$LL16@PyDict_May:

; 746  :             if ((value = mp->ma_values[i]) == NULL)

  000d0	48 8b 45 70	 mov	 rax, QWORD PTR [rbp+112]
  000d4	48 8b 1c f8	 mov	 rbx, QWORD PTR [rax+rdi*8]
  000d8	48 85 db	 test	 rbx, rbx
  000db	0f 84 04 01 00
	00		 je	 $LN15@PyDict_May

; 747  :                 continue;
; 748  :             if (_PyObject_GC_MAY_BE_TRACKED(value)) {

  000e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  000e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  000ef	4c 8b cb	 mov	 r9, rbx
  000f2	41 b8 ec 02 00
	00		 mov	 r8d, 748		; 000002ecH
  000f8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00100	e8 00 00 00 00	 call	 _PyParallel_Guard
  00105	85 c0		 test	 eax, eax
  00107	0f 85 d8 00 00
	00		 jne	 $LN15@PyDict_May
  0010d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00114	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  0011b	4c 8b cb	 mov	 r9, rbx
  0011e	41 b8 ec 02 00
	00		 mov	 r8d, 748		; 000002ecH
  00124	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0012c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00131	85 c0		 test	 eax, eax
  00133	0f 85 ac 00 00
	00		 jne	 $LN15@PyDict_May
  00139	e8 00 00 00 00	 call	 _Py_PXCTX
  0013e	85 c0		 test	 eax, eax
  00140	0f 85 9f 00 00
	00		 jne	 $LN15@PyDict_May
  00146	48 8b 4b 58	 mov	 rcx, QWORD PTR [rbx+88]
  0014a	8b 81 00 01 00
	00		 mov	 eax, DWORD PTR [rcx+256]
  00150	c1 e8 0e	 shr	 eax, 14
  00153	83 e0 01	 and	 eax, 1
  00156	0f 84 89 00 00
	00		 je	 $LN15@PyDict_May
  0015c	48 8b 81 a0 01
	00 00		 mov	 rax, QWORD PTR [rcx+416]
  00163	48 85 c0	 test	 rax, rax
  00166	74 09		 je	 SHORT $LN83@PyDict_May
  00168	48 8b cb	 mov	 rcx, rbx
  0016b	ff d0		 call	 rax
  0016d	85 c0		 test	 eax, eax
  0016f	74 74		 je	 SHORT $LN15@PyDict_May
$LN83@PyDict_May:
  00171	4c 39 6b 58	 cmp	 QWORD PTR [rbx+88], r13
  00175	0f 85 42 03 00
	00		 jne	 $LN93@PyDict_May
  0017b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00182	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  00189	4c 8b cb	 mov	 r9, rbx
  0018c	41 b8 ec 02 00
	00		 mov	 r8d, 748		; 000002ecH
  00192	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0019a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0019f	85 c0		 test	 eax, eax
  001a1	75 42		 jne	 SHORT $LN15@PyDict_May
  001a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  001aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  001b1	4c 8b cb	 mov	 r9, rbx
  001b4	41 b8 ec 02 00
	00		 mov	 r8d, 748		; 000002ecH
  001ba	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001c2	e8 00 00 00 00	 call	 _PyParallel_Guard
  001c7	85 c0		 test	 eax, eax
  001c9	74 04		 je	 SHORT $LN34@PyDict_May
  001cb	33 db		 xor	 ebx, ebx
  001cd	eb 04		 jmp	 SHORT $LN35@PyDict_May
$LN34@PyDict_May:
  001cf	48 83 c3 e8	 add	 rbx, -24
$LN35@PyDict_May:
  001d3	33 c0		 xor	 eax, eax
  001d5	48 83 7b 10 fe	 cmp	 QWORD PTR [rbx+16], -2
  001da	0f 95 c0	 setne	 al
  001dd	85 c0		 test	 eax, eax
  001df	0f 85 d8 02 00
	00		 jne	 $LN93@PyDict_May
$LN15@PyDict_May:

; 745  :         for (i = 0; i < size; i++) {

  001e5	48 ff c7	 inc	 rdi
  001e8	49 3b fc	 cmp	 rdi, r12
  001eb	0f 8c df fe ff
	ff		 jl	 $LL16@PyDict_May
  001f1	e9 4b 02 00 00	 jmp	 $LN8@PyDict_May
$LN17@PyDict_May:

; 757  :         for (i = 0; i < size; i++) {

  001f6	33 f6		 xor	 esi, esi
  001f8	4d 85 e4	 test	 r12, r12
  001fb	0f 8e 40 02 00
	00		 jle	 $LN8@PyDict_May

; 749  :                 assert(!_PyObject_GC_MAY_BE_TRACKED(
; 750  :                     mp->ma_keys->dk_entries[i].me_key));
; 751  :                 return;
; 752  :             }
; 753  :         }
; 754  :     }
; 755  :     else {
; 756  :         PyDictKeyEntry *ep0 = &mp->ma_keys->dk_entries[0];

  00201	48 83 c7 28	 add	 rdi, 40			; 00000028H
  00205	4c 8d 2d 00 00
	00 00		 lea	 r13, OFFSET FLAT:PyTuple_Type
  0020c	0f 1f 40 00	 npad	 4
$LL10@PyDict_May:

; 758  :             if ((value = ep0[i].me_value) == NULL)

  00210	48 8b 5f 08	 mov	 rbx, QWORD PTR [rdi+8]
  00214	48 85 db	 test	 rbx, rbx
  00217	0f 84 14 02 00
	00		 je	 $LN9@PyDict_May

; 759  :                 continue;
; 760  :             if (_PyObject_GC_MAY_BE_TRACKED(value) ||
; 761  :                 _PyObject_GC_MAY_BE_TRACKED(ep0[i].me_key))

  0021d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00224	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  0022b	4c 8b cb	 mov	 r9, rbx
  0022e	41 b8 f8 02 00
	00		 mov	 r8d, 760		; 000002f8H
  00234	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0023c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00241	85 c0		 test	 eax, eax
  00243	0f 85 d8 00 00
	00		 jne	 $LN55@PyDict_May
  00249	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00250	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  00257	4c 8b cb	 mov	 r9, rbx
  0025a	41 b8 f8 02 00
	00		 mov	 r8d, 760		; 000002f8H
  00260	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00268	e8 00 00 00 00	 call	 _PyParallel_Guard
  0026d	85 c0		 test	 eax, eax
  0026f	0f 85 ac 00 00
	00		 jne	 $LN55@PyDict_May
  00275	e8 00 00 00 00	 call	 _Py_PXCTX
  0027a	85 c0		 test	 eax, eax
  0027c	0f 85 9f 00 00
	00		 jne	 $LN55@PyDict_May
  00282	48 8b 4b 58	 mov	 rcx, QWORD PTR [rbx+88]
  00286	8b 81 00 01 00
	00		 mov	 eax, DWORD PTR [rcx+256]
  0028c	c1 e8 0e	 shr	 eax, 14
  0028f	83 e0 01	 and	 eax, 1
  00292	0f 84 89 00 00
	00		 je	 $LN55@PyDict_May
  00298	48 8b 81 a0 01
	00 00		 mov	 rax, QWORD PTR [rcx+416]
  0029f	48 85 c0	 test	 rax, rax
  002a2	74 09		 je	 SHORT $LN85@PyDict_May
  002a4	48 8b cb	 mov	 rcx, rbx
  002a7	ff d0		 call	 rax
  002a9	85 c0		 test	 eax, eax
  002ab	74 74		 je	 SHORT $LN55@PyDict_May
$LN85@PyDict_May:
  002ad	4c 39 6b 58	 cmp	 QWORD PTR [rbx+88], r13
  002b1	0f 85 06 02 00
	00		 jne	 $LN93@PyDict_May
  002b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  002be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  002c5	4c 8b cb	 mov	 r9, rbx
  002c8	41 b8 f8 02 00
	00		 mov	 r8d, 760		; 000002f8H
  002ce	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002d6	e8 00 00 00 00	 call	 _PyParallel_Guard
  002db	85 c0		 test	 eax, eax
  002dd	75 42		 jne	 SHORT $LN55@PyDict_May
  002df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  002e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  002ed	4c 8b cb	 mov	 r9, rbx
  002f0	41 b8 f8 02 00
	00		 mov	 r8d, 760		; 000002f8H
  002f6	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002fe	e8 00 00 00 00	 call	 _PyParallel_Guard
  00303	85 c0		 test	 eax, eax
  00305	74 04		 je	 SHORT $LN50@PyDict_May
  00307	33 db		 xor	 ebx, ebx
  00309	eb 04		 jmp	 SHORT $LN51@PyDict_May
$LN50@PyDict_May:
  0030b	48 83 c3 e8	 add	 rbx, -24
$LN51@PyDict_May:
  0030f	33 c0		 xor	 eax, eax
  00311	48 83 7b 10 fe	 cmp	 QWORD PTR [rbx+16], -2
  00316	0f 95 c0	 setne	 al
  00319	85 c0		 test	 eax, eax
  0031b	0f 85 9c 01 00
	00		 jne	 $LN93@PyDict_May
$LN55@PyDict_May:
  00321	4c 8b 0f	 mov	 r9, QWORD PTR [rdi]
  00324	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  0032b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  00332	41 b8 f9 02 00
	00		 mov	 r8d, 761		; 000002f9H
  00338	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00340	e8 00 00 00 00	 call	 _PyParallel_Guard
  00345	85 c0		 test	 eax, eax
  00347	0f 85 e4 00 00
	00		 jne	 $LN9@PyDict_May
  0034d	4c 8b 0f	 mov	 r9, QWORD PTR [rdi]
  00350	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00357	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  0035e	41 b8 f9 02 00
	00		 mov	 r8d, 761		; 000002f9H
  00364	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0036c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00371	85 c0		 test	 eax, eax
  00373	0f 85 b8 00 00
	00		 jne	 $LN9@PyDict_May
  00379	e8 00 00 00 00	 call	 _Py_PXCTX
  0037e	85 c0		 test	 eax, eax
  00380	0f 85 ab 00 00
	00		 jne	 $LN9@PyDict_May
  00386	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00389	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0038d	8b 81 00 01 00
	00		 mov	 eax, DWORD PTR [rcx+256]
  00393	c1 e8 0e	 shr	 eax, 14
  00396	83 e0 01	 and	 eax, 1
  00399	0f 84 92 00 00
	00		 je	 $LN9@PyDict_May
  0039f	48 83 b9 a0 01
	00 00 00	 cmp	 QWORD PTR [rcx+416], 0
  003a7	74 11		 je	 SHORT $LN86@PyDict_May
  003a9	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  003ac	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  003b0	ff 90 a0 01 00
	00		 call	 QWORD PTR [rax+416]
  003b6	85 c0		 test	 eax, eax
  003b8	74 77		 je	 SHORT $LN9@PyDict_May
$LN86@PyDict_May:
  003ba	4c 8b 0f	 mov	 r9, QWORD PTR [rdi]
  003bd	4d 39 69 58	 cmp	 QWORD PTR [r9+88], r13
  003c1	0f 85 f6 00 00
	00		 jne	 $LN93@PyDict_May
  003c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  003ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  003d5	41 b8 f9 02 00
	00		 mov	 r8d, 761		; 000002f9H
  003db	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003e3	e8 00 00 00 00	 call	 _PyParallel_Guard
  003e8	85 c0		 test	 eax, eax
  003ea	75 45		 jne	 SHORT $LN9@PyDict_May
  003ec	4c 8b 0f	 mov	 r9, QWORD PTR [rdi]
  003ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  003f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  003fd	41 b8 f9 02 00
	00		 mov	 r8d, 761		; 000002f9H
  00403	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0040b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00410	85 c0		 test	 eax, eax
  00412	74 04		 je	 SHORT $LN66@PyDict_May
  00414	33 c9		 xor	 ecx, ecx
  00416	eb 07		 jmp	 SHORT $LN67@PyDict_May
$LN66@PyDict_May:
  00418	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  0041b	48 83 e9 18	 sub	 rcx, 24
$LN67@PyDict_May:
  0041f	33 c0		 xor	 eax, eax
  00421	48 83 79 10 fe	 cmp	 QWORD PTR [rcx+16], -2
  00426	0f 95 c0	 setne	 al
  00429	85 c0		 test	 eax, eax
  0042b	0f 85 8c 00 00
	00		 jne	 $LN93@PyDict_May
$LN9@PyDict_May:

; 757  :         for (i = 0; i < size; i++) {

  00431	48 ff c6	 inc	 rsi
  00434	48 83 c7 18	 add	 rdi, 24
  00438	49 3b f4	 cmp	 rsi, r12
  0043b	0f 8c cf fd ff
	ff		 jl	 $LL10@PyDict_May
$LN8@PyDict_May:

; 762  :                 return;
; 763  :         }
; 764  :     }
; 765  :     _PyObject_GC_UNTRACK(op);

  00441	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00448	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  0044f	4c 8b cd	 mov	 r9, rbp
  00452	41 b8 fd 02 00
	00		 mov	 r8d, 765		; 000002fdH
  00458	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00460	e8 00 00 00 00	 call	 _PyParallel_Guard
  00465	85 c0		 test	 eax, eax
  00467	75 54		 jne	 SHORT $LN93@PyDict_May
  00469	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00470	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  00477	4c 8b cd	 mov	 r9, rbp
  0047a	41 b8 fd 02 00
	00		 mov	 r8d, 765		; 000002fdH
  00480	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00488	e8 00 00 00 00	 call	 _PyParallel_Guard
  0048d	85 c0		 test	 eax, eax
  0048f	74 04		 je	 SHORT $LN75@PyDict_May
  00491	33 d2		 xor	 edx, edx
  00493	eb 04		 jmp	 SHORT $LN76@PyDict_May
$LN75@PyDict_May:
  00495	48 8d 55 e8	 lea	 rdx, QWORD PTR [rbp-24]
$LN76@PyDict_May:
  00499	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  0049c	48 8b 4a 08	 mov	 rcx, QWORD PTR [rdx+8]
  004a0	48 c7 42 10 fe
	ff ff ff	 mov	 QWORD PTR [rdx+16], -2
  004a8	48 89 01	 mov	 QWORD PTR [rcx], rax
  004ab	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  004ae	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  004b2	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  004b6	48 c7 02 00 00
	00 00		 mov	 QWORD PTR [rdx], 0
$LN93@PyDict_May:
  004bd	4c 8b 64 24 38	 mov	 r12, QWORD PTR [rsp+56]
  004c2	48 8b 7c 24 68	 mov	 rdi, QWORD PTR [rsp+104]
  004c7	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  004cc	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  004d1	4c 8b 6c 24 30	 mov	 r13, QWORD PTR [rsp+48]
$LN1@PyDict_May:

; 766  : }

  004d6	48 83 c4 40	 add	 rsp, 64			; 00000040H
  004da	5d		 pop	 rbp
  004db	c3		 ret	 0
_PyDict_MaybeUntrack ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$find_empty_slot DD imagerel find_empty_slot
	DD	imagerel find_empty_slot+160
	DD	imagerel $unwind$find_empty_slot
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$find_empty_slot DD 020501H
	DD	013405H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT find_empty_slot
_TEXT	SEGMENT
mp$ = 8
key$ = 16
hash$ = 24
value_addr$ = 32
find_empty_slot PROC					; COMDAT

; 774  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx

; 775  :     size_t i;
; 776  :     size_t perturb;
; 777  :     size_t mask = DK_MASK(mp->ma_keys);

  00005	4c 8b 59 68	 mov	 r11, QWORD PTR [rcx+104]

; 778  :     PyDictKeyEntry *ep0 = &mp->ma_keys->dk_entries[0];
; 779  :     PyDictKeyEntry *ep;
; 780  : 
; 781  :     assert(key != NULL);
; 782  :     if (!PyUnicode_CheckExact(key))

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  00010	48 8b d9	 mov	 rbx, rcx
  00013	4d 8b 53 08	 mov	 r10, QWORD PTR [r11+8]
  00017	49 ff ca	 dec	 r10
  0001a	48 39 42 58	 cmp	 QWORD PTR [rdx+88], rax
  0001e	74 0b		 je	 SHORT $LN6@find_empty

; 783  :         mp->ma_keys->dk_lookup = lookdict;

  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict
  00027	49 89 4b 10	 mov	 QWORD PTR [r11+16], rcx
$LN6@find_empty:

; 784  :     i = hash & mask;

  0002b	49 8b ca	 mov	 rcx, r10
  0002e	49 23 c8	 and	 rcx, r8

; 785  :     ep = &ep0[i];

  00031	48 8d 04 49	 lea	 rax, QWORD PTR [rcx+rcx*2]

; 786  :     for (perturb = hash; ep->me_key != NULL; perturb >>= PERTURB_SHIFT) {

  00035	49 83 7c c3 28
	00		 cmp	 QWORD PTR [r11+rax*8+40], 0
  0003b	49 8d 54 c3 20	 lea	 rdx, QWORD PTR [r11+rax*8+32]
  00040	74 32		 je	 SHORT $LN3@find_empty
  00042	66 66 66 66 66
	66 0f 1f 84 00
	00 00 00 00	 npad	 14
$LL5@find_empty:

; 787  :         i = (i << 2) + i + perturb + 1;

  00050	49 8d 04 88	 lea	 rax, QWORD PTR [r8+rcx*4]
  00054	49 c1 e8 05	 shr	 r8, 5
  00058	48 8d 4c 01 01	 lea	 rcx, QWORD PTR [rcx+rax+1]

; 788  :         ep = &ep0[i & mask];

  0005d	48 8b c1	 mov	 rax, rcx
  00060	49 23 c2	 and	 rax, r10
  00063	48 8d 04 40	 lea	 rax, QWORD PTR [rax+rax*2]
  00067	49 83 7c c3 28
	00		 cmp	 QWORD PTR [r11+rax*8+40], 0
  0006d	49 8d 54 c3 20	 lea	 rdx, QWORD PTR [r11+rax*8+32]
  00072	75 dc		 jne	 SHORT $LL5@find_empty
$LN3@find_empty:

; 789  :     }
; 790  :     assert(ep->me_value == NULL);
; 791  :     if (mp->ma_values)

  00074	48 8b 43 70	 mov	 rax, QWORD PTR [rbx+112]
  00078	48 85 c0	 test	 rax, rax
  0007b	74 13		 je	 SHORT $LN2@find_empty

; 792  :         *value_addr = &mp->ma_values[i & mask];

  0007d	49 23 ca	 and	 rcx, r10
  00080	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]

; 793  :     else
; 794  :         *value_addr = &ep->me_value;
; 795  :     return ep;

  00084	48 8b c2	 mov	 rax, rdx
  00087	49 89 09	 mov	 QWORD PTR [r9], rcx

; 796  : }

  0008a	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  0008f	c3		 ret	 0
$LN2@find_empty:
  00090	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  00095	48 8d 42 10	 lea	 rax, QWORD PTR [rdx+16]
  00099	49 89 01	 mov	 QWORD PTR [r9], rax
  0009c	48 8b c2	 mov	 rax, rdx
  0009f	c3		 ret	 0
find_empty_slot ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$insertdict_clean DD imagerel insertdict_clean
	DD	imagerel insertdict_clean+122
	DD	imagerel $unwind$insertdict_clean
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$insertdict_clean DD 040a01H
	DD	02740aH
	DD	013405H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT insertdict_clean
_TEXT	SEGMENT
mp$ = 8
key$ = 16
hash$ = 24
value$ = 32
insertdict_clean PROC					; COMDAT

; 886  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 7c 24 10	 mov	 QWORD PTR [rsp+16], rdi
  0000a	48 8b fa	 mov	 rdi, rdx

; 887  :     size_t i;
; 888  :     size_t perturb;
; 889  :     PyDictKeysObject *k = mp->ma_keys;

  0000d	48 8b 51 68	 mov	 rdx, QWORD PTR [rcx+104]
  00011	49 8b d9	 mov	 rbx, r9

; 890  :     size_t mask = (size_t)DK_SIZE(k)-1;

  00014	4c 8b 5a 08	 mov	 r11, QWORD PTR [rdx+8]
  00018	4d 8b c8	 mov	 r9, r8
  0001b	49 ff cb	 dec	 r11

; 891  :     PyDictKeyEntry *ep0 = &k->dk_entries[0];
; 892  :     PyDictKeyEntry *ep;
; 893  : 
; 894  :     assert(k->dk_lookup != NULL);
; 895  :     assert(value != NULL);
; 896  :     assert(key != NULL);
; 897  :     assert(key != dummy);
; 898  :     assert(PyUnicode_CheckExact(key) || k->dk_lookup == lookdict);
; 899  :     i = hash & mask;

  0001e	4d 8b d3	 mov	 r10, r11
  00021	4d 23 d0	 and	 r10, r8

; 900  :     ep = &ep0[i];

  00024	4b 8d 04 52	 lea	 rax, QWORD PTR [r10+r10*2]

; 901  :     for (perturb = hash; ep->me_key != NULL; perturb >>= PERTURB_SHIFT) {

  00028	48 83 7c c2 28
	00		 cmp	 QWORD PTR [rdx+rax*8+40], 0
  0002e	48 8d 4c c2 20	 lea	 rcx, QWORD PTR [rdx+rax*8+32]
  00033	74 2f		 je	 SHORT $LN1@insertdict
  00035	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL3@insertdict:

; 902  :         i = (i << 2) + i + perturb + 1;

  00040	4b 8d 04 90	 lea	 rax, QWORD PTR [r8+r10*4]
  00044	49 c1 e8 05	 shr	 r8, 5
  00048	4d 8d 54 02 01	 lea	 r10, QWORD PTR [r10+rax+1]

; 903  :         ep = &ep0[i & mask];

  0004d	49 8b c2	 mov	 rax, r10
  00050	49 23 c3	 and	 rax, r11
  00053	48 8d 04 40	 lea	 rax, QWORD PTR [rax+rax*2]
  00057	48 83 7c c2 28
	00		 cmp	 QWORD PTR [rdx+rax*8+40], 0
  0005d	48 8d 4c c2 20	 lea	 rcx, QWORD PTR [rdx+rax*8+32]
  00062	75 dc		 jne	 SHORT $LL3@insertdict
$LN1@insertdict:

; 904  :     }
; 905  :     assert(ep->me_value == NULL);
; 906  :     ep->me_key = key;

  00064	48 89 79 08	 mov	 QWORD PTR [rcx+8], rdi

; 907  :     ep->me_hash = hash;
; 908  :     ep->me_value = value;
; 909  : }

  00068	48 8b 7c 24 10	 mov	 rdi, QWORD PTR [rsp+16]
  0006d	48 89 59 10	 mov	 QWORD PTR [rcx+16], rbx
  00071	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  00076	4c 89 09	 mov	 QWORD PTR [rcx], r9
  00079	c3		 ret	 0
insertdict_clean ENDP
_TEXT	ENDS
PUBLIC	PyDict_GetItem
EXTRN	PyErr_Clear:PROC
EXTRN	PyErr_Restore:PROC
EXTRN	PyErr_Fetch:PROC
EXTRN	_PyThreadState_Current:QWORD
EXTRN	PyObject_Hash:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_GetItem DD imagerel $LN13
	DD	imagerel $LN13+45
	DD	imagerel $unwind$PyDict_GetItem
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyDict_GetItem DD imagerel $LN13+45
	DD	imagerel $LN13+190
	DD	imagerel $chain$0$PyDict_GetItem
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyDict_GetItem DD imagerel $LN13+190
	DD	imagerel $LN13+235
	DD	imagerel $chain$2$PyDict_GetItem
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyDict_GetItem DD imagerel $LN13+235
	DD	imagerel $LN13+255
	DD	imagerel $chain$4$PyDict_GetItem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyDict_GetItem DD 020021H
	DD	063400H
	DD	imagerel $LN13
	DD	imagerel $LN13+45
	DD	imagerel $unwind$PyDict_GetItem
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyDict_GetItem DD 020021H
	DD	063400H
	DD	imagerel $LN13
	DD	imagerel $LN13+45
	DD	imagerel $unwind$PyDict_GetItem
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyDict_GetItem DD 020521H
	DD	063405H
	DD	imagerel $LN13
	DD	imagerel $LN13+45
	DD	imagerel $unwind$PyDict_GetItem
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_GetItem DD 030701H
	DD	070036207H
	DD	06002H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyDict_GetItem
_TEXT	SEGMENT
err_type$20971 = 32
value_addr$ = 80
op$ = 80
key$ = 88
err_tb$20973 = 96
err_value$20972 = 104
PyDict_GetItem PROC					; COMDAT

; 1080 : {

$LN13:
  00000	40 56		 push	 rsi
  00002	57		 push	 rdi
  00003	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1081 :     Py_hash_t hash;
; 1082 :     PyDictObject *mp = (PyDictObject *)op;
; 1083 :     PyDictKeyEntry *ep;
; 1084 :     PyThreadState *tstate;
; 1085 :     PyObject **value_addr;
; 1086 : 
; 1087 :     if (!PyDict_Check(op))

  00007	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0000b	48 8b fa	 mov	 rdi, rdx
  0000e	48 8b f1	 mov	 rsi, rcx
  00011	f7 80 00 01 00
	00 00 00 00 20	 test	 DWORD PTR [rax+256], 536870912 ; 20000000H
  0001b	75 09		 jne	 SHORT $LN8@PyDict_Get

; 1088 :         return NULL;

  0001d	33 c0		 xor	 eax, eax

; 1125 : }

  0001f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00023	5f		 pop	 rdi
  00024	5e		 pop	 rsi
  00025	c3		 ret	 0
$LN8@PyDict_Get:

; 1089 : 
; 1090 :     if (!PyUnicode_CheckExact(key) ||
; 1091 :         (hash = ((PyASCIIObject *) key)->hash) == -1)

  00026	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  0002d	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00032	48 39 42 58	 cmp	 QWORD PTR [rdx+88], rax
  00036	75 0a		 jne	 SHORT $LN6@PyDict_Get
  00038	48 8b 5a 68	 mov	 rbx, QWORD PTR [rdx+104]
  0003c	48 83 fb ff	 cmp	 rbx, -1
  00040	75 15		 jne	 SHORT $LN5@PyDict_Get
$LN6@PyDict_Get:

; 1092 :     {
; 1093 :         hash = PyObject_Hash(key);

  00042	48 8b ca	 mov	 rcx, rdx
  00045	e8 00 00 00 00	 call	 PyObject_Hash
  0004a	48 8b d8	 mov	 rbx, rax

; 1094 :         if (hash == -1) {

  0004d	48 83 f8 ff	 cmp	 rax, -1

; 1095 :             PyErr_Clear();
; 1096 :             return NULL;

  00051	0f 84 81 00 00
	00		 je	 $LN12@PyDict_Get
$LN5@PyDict_Get:

; 1097 :         }
; 1098 :     }
; 1099 : 
; 1100 :     /* We can arrive here with a NULL tstate during initialization: try
; 1101 :        running "python -Wi" for an example related to string interning.
; 1102 :        Let's just hope that no exception occurs then...  This must be
; 1103 :        _PyThreadState_Current and not PyThreadState_GET() because in debug
; 1104 :        mode, the latter complains if tstate is NULL. */
; 1105 :     tstate = (PyThreadState*)_Py_atomic_load_relaxed(
; 1106 :         &_PyThreadState_Current);

  00057	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current

; 1107 :     if (tstate != NULL && tstate->curexc_type != NULL) {

  0005e	48 85 c0	 test	 rax, rax
  00061	74 5b		 je	 SHORT $LN4@PyDict_Get
  00063	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  00068	74 54		 je	 SHORT $LN4@PyDict_Get

; 1108 :         /* preserve the existing exception */
; 1109 :         PyObject *err_type, *err_value, *err_tb;
; 1110 :         PyErr_Fetch(&err_type, &err_value, &err_tb);

  0006a	4c 8d 44 24 60	 lea	 r8, QWORD PTR err_tb$20973[rsp]
  0006f	48 8d 54 24 68	 lea	 rdx, QWORD PTR err_value$20972[rsp]
  00074	48 8d 4c 24 20	 lea	 rcx, QWORD PTR err_type$20971[rsp]
  00079	e8 00 00 00 00	 call	 PyErr_Fetch

; 1111 :         ep = (mp->ma_keys->dk_lookup)(mp, key, hash, &value_addr);

  0007e	4c 8b 5e 68	 mov	 r11, QWORD PTR [rsi+104]
  00082	4c 8d 4c 24 50	 lea	 r9, QWORD PTR value_addr$[rsp]
  00087	4c 8b c3	 mov	 r8, rbx
  0008a	48 8b d7	 mov	 rdx, rdi
  0008d	48 8b ce	 mov	 rcx, rsi
  00090	41 ff 53 10	 call	 QWORD PTR [r11+16]

; 1112 :         /* ignore errors */
; 1113 :         PyErr_Restore(err_type, err_value, err_tb);

  00094	4c 8b 44 24 60	 mov	 r8, QWORD PTR err_tb$20973[rsp]
  00099	48 8b 54 24 68	 mov	 rdx, QWORD PTR err_value$20972[rsp]
  0009e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR err_type$20971[rsp]
  000a3	48 8b d8	 mov	 rbx, rax
  000a6	e8 00 00 00 00	 call	 PyErr_Restore

; 1114 :         if (ep == NULL)

  000ab	48 85 db	 test	 rbx, rbx
  000ae	75 3b		 jne	 SHORT $LN1@PyDict_Get

; 1115 :             return NULL;

  000b0	33 c0		 xor	 eax, eax
  000b2	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1125 : }

  000b7	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000bb	5f		 pop	 rdi
  000bc	5e		 pop	 rsi
  000bd	c3		 ret	 0
$LN4@PyDict_Get:

; 1116 :     }
; 1117 :     else {
; 1118 :         ep = (mp->ma_keys->dk_lookup)(mp, key, hash, &value_addr);

  000be	48 8b 46 68	 mov	 rax, QWORD PTR [rsi+104]
  000c2	4c 8d 4c 24 50	 lea	 r9, QWORD PTR value_addr$[rsp]
  000c7	4c 8b c3	 mov	 r8, rbx
  000ca	48 8b d7	 mov	 rdx, rdi
  000cd	48 8b ce	 mov	 rcx, rsi
  000d0	ff 50 10	 call	 QWORD PTR [rax+16]

; 1119 :         if (ep == NULL) {

  000d3	48 85 c0	 test	 rax, rax
  000d6	75 13		 jne	 SHORT $LN1@PyDict_Get
$LN12@PyDict_Get:

; 1120 :             PyErr_Clear();

  000d8	e8 00 00 00 00	 call	 PyErr_Clear
  000dd	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1121 :             return NULL;

  000e2	33 c0		 xor	 eax, eax

; 1125 : }

  000e4	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000e8	5f		 pop	 rdi
  000e9	5e		 pop	 rsi
  000ea	c3		 ret	 0
$LN1@PyDict_Get:

; 1122 :         }
; 1123 :     }
; 1124 :     return *value_addr;

  000eb	48 8b 44 24 50	 mov	 rax, QWORD PTR value_addr$[rsp]
  000f0	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000f5	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 1125 : }

  000f8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fc	5f		 pop	 rdi
  000fd	5e		 pop	 rsi
  000fe	c3		 ret	 0
PyDict_GetItem ENDP
_TEXT	ENDS
PUBLIC	PyDict_GetItemWithError
EXTRN	_PyErr_BadInternalCall:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_GetItemWithError DD imagerel $LN9
	DD	imagerel $LN9+144
	DD	imagerel $unwind$PyDict_GetItemWithError
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_GetItemWithError DD 040a01H
	DD	07340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyDict_GetItemWithError
_TEXT	SEGMENT
value_addr$ = 48
op$ = 48
key$ = 56
PyDict_GetItemWithError PROC				; COMDAT

; 1133 : {

$LN9:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1134 :     Py_hash_t hash;
; 1135 :     PyDictObject*mp = (PyDictObject *)op;
; 1136 :     PyDictKeyEntry *ep;
; 1137 :     PyObject **value_addr;
; 1138 : 
; 1139 :     if (!PyDict_Check(op)) {

  0000a	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0000e	48 8b da	 mov	 rbx, rdx
  00011	48 8b f9	 mov	 rdi, rcx
  00014	f7 80 00 01 00
	00 00 00 00 20	 test	 DWORD PTR [rax+256], 536870912 ; 20000000H
  0001e	75 1e		 jne	 SHORT $LN5@PyDict_Get@2

; 1140 :         PyErr_BadInternalCall();

  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00027	ba 74 04 00 00	 mov	 edx, 1140		; 00000474H
  0002c	e8 00 00 00 00	 call	 _PyErr_BadInternalCall
$LN8@PyDict_Get@2:

; 1141 :         return NULL;

  00031	33 c0		 xor	 eax, eax

; 1157 : }

  00033	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00038	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003c	5f		 pop	 rdi
  0003d	c3		 ret	 0
$LN5@PyDict_Get@2:

; 1142 :     }
; 1143 : 
; 1144 :     if (!PyUnicode_CheckExact(key) ||
; 1145 :         (hash = ((PyASCIIObject *) key)->hash) == -1)

  0003e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  00045	48 39 42 58	 cmp	 QWORD PTR [rdx+88], rax
  00049	75 0a		 jne	 SHORT $LN3@PyDict_Get@2
  0004b	4c 8b 42 68	 mov	 r8, QWORD PTR [rdx+104]
  0004f	49 83 f8 ff	 cmp	 r8, -1
  00053	75 11		 jne	 SHORT $LN2@PyDict_Get@2
$LN3@PyDict_Get@2:

; 1146 :     {
; 1147 :         hash = PyObject_Hash(key);

  00055	48 8b ca	 mov	 rcx, rdx
  00058	e8 00 00 00 00	 call	 PyObject_Hash
  0005d	4c 8b c0	 mov	 r8, rax

; 1148 :         if (hash == -1) {

  00060	48 83 f8 ff	 cmp	 rax, -1

; 1149 :             return NULL;

  00064	74 cb		 je	 SHORT $LN8@PyDict_Get@2
$LN2@PyDict_Get@2:

; 1150 :         }
; 1151 :     }
; 1152 : 
; 1153 :     ep = (mp->ma_keys->dk_lookup)(mp, key, hash, &value_addr);

  00066	48 8b 47 68	 mov	 rax, QWORD PTR [rdi+104]
  0006a	4c 8d 4c 24 30	 lea	 r9, QWORD PTR value_addr$[rsp]
  0006f	48 8b d3	 mov	 rdx, rbx
  00072	48 8b cf	 mov	 rcx, rdi
  00075	ff 50 10	 call	 QWORD PTR [rax+16]

; 1154 :     if (ep == NULL)

  00078	48 85 c0	 test	 rax, rax

; 1155 :         return NULL;

  0007b	74 b4		 je	 SHORT $LN8@PyDict_Get@2

; 1156 :     return *value_addr;

  0007d	48 8b 44 24 30	 mov	 rax, QWORD PTR value_addr$[rsp]

; 1157 : }

  00082	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00087	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0008a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008e	5f		 pop	 rdi
  0008f	c3		 ret	 0
PyDict_GetItemWithError ENDP
_TEXT	ENDS
PUBLIC	_PyDict_GetItemIdWithError
EXTRN	_PyUnicode_FromId:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyDict_GetItemIdWithError DD imagerel $LN4
	DD	imagerel $LN4+44
	DD	imagerel $unwind$_PyDict_GetItemIdWithError
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyDict_GetItemIdWithError DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyDict_GetItemIdWithError
_TEXT	SEGMENT
dp$ = 48
key$ = 56
_PyDict_GetItemIdWithError PROC				; COMDAT

; 1161 : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 1162 :     PyObject *kv;
; 1163 :     kv = _PyUnicode_FromId(key); /* borrowed */

  00009	48 8b ca	 mov	 rcx, rdx
  0000c	e8 00 00 00 00	 call	 _PyUnicode_FromId

; 1164 :     if (kv == NULL)

  00011	48 85 c0	 test	 rax, rax
  00014	75 06		 jne	 SHORT $LN1@PyDict_Get@3

; 1167 : }

  00016	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001a	5b		 pop	 rbx
  0001b	c3		 ret	 0
$LN1@PyDict_Get@3:

; 1165 :         return NULL;
; 1166 :     return PyDict_GetItemWithError(dp, kv);

  0001c	48 8b d0	 mov	 rdx, rax
  0001f	48 8b cb	 mov	 rcx, rbx

; 1167 : }

  00022	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00026	5b		 pop	 rbx
  00027	e9 00 00 00 00	 jmp	 PyDict_GetItemWithError
_PyDict_GetItemIdWithError ENDP
_TEXT	ENDS
PUBLIC	_PyDict_LoadGlobal
EXTRN	PyErr_Occurred:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyDict_LoadGlobal DD imagerel $LN11
	DD	imagerel $LN11+198
	DD	imagerel $unwind$_PyDict_LoadGlobal
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyDict_LoadGlobal DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyDict_LoadGlobal
_TEXT	SEGMENT
globals$ = 48
builtins$ = 56
value_addr$21022 = 64
key$ = 64
_PyDict_LoadGlobal PROC					; COMDAT

; 1174 : {

$LN11:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1175 :     PyObject *x;
; 1176 :     if (PyUnicode_CheckExact(key)) {

  0000f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  00016	49 8b d8	 mov	 rbx, r8
  00019	48 8b f2	 mov	 rsi, rdx
  0001c	49 39 40 58	 cmp	 QWORD PTR [r8+88], rax
  00020	75 72		 jne	 SHORT $LN6@PyDict_Loa

; 1177 :         PyObject **value_addr;
; 1178 :         Py_hash_t hash = ((PyASCIIObject *)key)->hash;

  00022	49 8b 78 68	 mov	 rdi, QWORD PTR [r8+104]

; 1179 :         if (hash != -1) {

  00026	48 83 ff ff	 cmp	 rdi, -1
  0002a	74 68		 je	 SHORT $LN6@PyDict_Loa

; 1180 :             PyDictKeyEntry *e;
; 1181 :             e = globals->ma_keys->dk_lookup(globals, key, hash, &value_addr);

  0002c	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]
  00030	4c 8d 4c 24 40	 lea	 r9, QWORD PTR value_addr$21022[rsp]
  00035	4c 8b c7	 mov	 r8, rdi
  00038	48 8b d3	 mov	 rdx, rbx
  0003b	ff 50 10	 call	 QWORD PTR [rax+16]

; 1182 :             if (e == NULL) {

  0003e	48 85 c0	 test	 rax, rax
  00041	75 12		 jne	 SHORT $LN5@PyDict_Loa
$LN10@PyDict_Loa:

; 1183 :                 return NULL;

  00043	33 c0		 xor	 eax, eax

; 1202 : }

  00045	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004a	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0004f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00053	5f		 pop	 rdi
  00054	c3		 ret	 0
$LN5@PyDict_Loa:

; 1184 :             }
; 1185 :             x = *value_addr;

  00055	48 8b 44 24 40	 mov	 rax, QWORD PTR value_addr$21022[rsp]
  0005a	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 1186 :             if (x != NULL)

  0005d	48 85 c0	 test	 rax, rax

; 1187 :                 return x;

  00060	75 54		 jne	 SHORT $LN8@PyDict_Loa

; 1188 :             e = builtins->ma_keys->dk_lookup(builtins, key, hash, &value_addr);

  00062	48 8b 46 68	 mov	 rax, QWORD PTR [rsi+104]
  00066	4c 8d 4c 24 40	 lea	 r9, QWORD PTR value_addr$21022[rsp]
  0006b	4c 8b c7	 mov	 r8, rdi
  0006e	48 8b d3	 mov	 rdx, rbx
  00071	48 8b ce	 mov	 rcx, rsi
  00074	ff 50 10	 call	 QWORD PTR [rax+16]

; 1189 :             if (e == NULL) {

  00077	48 85 c0	 test	 rax, rax

; 1190 :                 return NULL;

  0007a	74 c7		 je	 SHORT $LN10@PyDict_Loa

; 1191 :             }
; 1192 :             x = *value_addr;
; 1193 :             return x;

  0007c	48 8b 44 24 40	 mov	 rax, QWORD PTR value_addr$21022[rsp]
  00081	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 1202 : }

  00084	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00089	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0008e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00092	5f		 pop	 rdi
  00093	c3		 ret	 0
$LN6@PyDict_Loa:

; 1194 :         }
; 1195 :     }
; 1196 :     x = PyDict_GetItemWithError((PyObject *)globals, key);

  00094	48 8b d3	 mov	 rdx, rbx
  00097	e8 00 00 00 00	 call	 PyDict_GetItemWithError

; 1197 :     if (x != NULL)

  0009c	48 85 c0	 test	 rax, rax

; 1198 :         return x;

  0009f	75 15		 jne	 SHORT $LN8@PyDict_Loa

; 1199 :     if (PyErr_Occurred())

  000a1	e8 00 00 00 00	 call	 PyErr_Occurred
  000a6	48 85 c0	 test	 rax, rax

; 1200 :         return NULL;

  000a9	75 98		 jne	 SHORT $LN10@PyDict_Loa

; 1201 :     return PyDict_GetItemWithError((PyObject *)builtins, key);

  000ab	48 8b d3	 mov	 rdx, rbx
  000ae	48 8b ce	 mov	 rcx, rsi
  000b1	e8 00 00 00 00	 call	 PyDict_GetItemWithError
$LN8@PyDict_Loa:

; 1202 : }

  000b6	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000bb	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000c0	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c4	5f		 pop	 rdi
  000c5	c3		 ret	 0
_PyDict_LoadGlobal ENDP
_TEXT	ENDS
PUBLIC	PyDict_DelItem
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyDict_DelItem DD imagerel $LN18
	DD	imagerel $LN18+118
	DD	imagerel $unwind$PyDict_DelItem
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyDict_DelItem DD imagerel $LN18+118
	DD	imagerel $LN18+172
	DD	imagerel $chain$0$PyDict_DelItem
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyDict_DelItem DD imagerel $LN18+172
	DD	imagerel $LN18+204
	DD	imagerel $chain$2$PyDict_DelItem
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyDict_DelItem DD imagerel $LN18+204
	DD	imagerel $LN18+319
	DD	imagerel $chain$3$PyDict_DelItem
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyDict_DelItem DD imagerel $LN18+319
	DD	imagerel $LN18+345
	DD	imagerel $chain$4$PyDict_DelItem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyDict_DelItem DD 021H
	DD	imagerel $LN18+172
	DD	imagerel $LN18+204
	DD	imagerel $chain$2$PyDict_DelItem
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyDict_DelItem DD 020521H
	DD	095405H
	DD	imagerel $LN18+172
	DD	imagerel $LN18+204
	DD	imagerel $chain$2$PyDict_DelItem
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyDict_DelItem DD 020021H
	DD	0a6400H
	DD	imagerel $LN18
	DD	imagerel $LN18+118
	DD	imagerel $unwind$PyDict_DelItem
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyDict_DelItem DD 020521H
	DD	0a6405H
	DD	imagerel $LN18
	DD	imagerel $LN18+118
	DD	imagerel $unwind$PyDict_DelItem
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_DelItem DD 040a01H
	DD	0b340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\dictobject.c
xdata	ENDS
;	COMDAT PyDict_DelItem
_TEXT	SEGMENT
value_addr$ = 64
op$ = 64
key$ = 72
PyDict_DelItem PROC					; COMDAT

; 1244 : {

$LN18:
  00000	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1245 :     PyDictObject *mp;
; 1246 :     Py_hash_t hash;
; 1247 :     PyDictKeyEntry *ep;
; 1248 :     PyObject *old_key, *old_value;
; 1249 :     PyObject **value_addr;
; 1250 : 
; 1251 :     if (!PyDict_Check(op)) {

  0000a	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0000e	48 8b da	 mov	 rbx, rdx
  00011	48 8b f9	 mov	 rdi, rcx
  00014	f7 80 00 01 00
	00 00 00 00 20	 test	 DWORD PTR [rax+256], 536870912 ; 20000000H
  0001e	75 1f		 jne	 SHORT $LN8@PyDict_Del

; 1252 :         PyErr_BadInternalCall();

  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00027	ba e4 04 00 00	 mov	 edx, 1252		; 000004e4H
  0002c	e8 00 00 00 00	 call	 _PyErr_BadInternalCall
$LN17@PyDict_Del:

; 1253 :         return -1;

  00031	83 c8 ff	 or	 eax, -1

; 1291 :     return 0;
; 1292 : }

  00034	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  00039	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0003d	5f		 pop	 rdi
  0003e	c3		 ret	 0
$LN8@PyDict_Del:

; 1254 :     }
; 1255 :     assert(key);
; 1256 : 
; 1257 :     /*
; 1258 :     if (Px_CHECK_PROTECTION(op, key, NULL))
; 1259 :         return -1;
; 1260 :     */
; 1261 : 
; 1262 :     if (!PyUnicode_CheckExact(key) ||
; 1263 :         (hash = ((PyASCIIObject *) key)->hash) == -1) {

  0003f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  00046	48 39 42 58	 cmp	 QWORD PTR [rdx+88], rax
  0004a	75 0a		 jne	 SHORT $LN6@PyDict_Del
  0004c	4c 8b 42 68	 mov	 r8, QWORD PTR [rdx+104]
  00050	49 83 f8 ff	 cmp	 r8, -1
  00054	75 11		 jne	 SHORT $LN5@PyDict_Del
$LN6@PyDict_Del:

; 1264 :         hash = PyObject_Hash(key);

  00056	48 8b ca	 mov	 rcx, rdx
  00059	e8 00 00 00 00	 call	 PyObject_Hash
  0005e	4c 8b c0	 mov	 r8, rax

; 1265 :         if (hash == -1)

  00061	48 83 f8 ff	 cmp	 rax, -1

; 1266 :             return -1;

  00065	74 ca		 je	 SHORT $LN17@PyDict_Del
$LN5@PyDict_Del:

; 1267 :     }
; 1268 :     mp = (PyDictObject *)op;
; 1269 :     ep = (mp->ma_keys->dk_lookup)(mp, key, hash, &value_addr);

  00067	48 8b 47 68	 mov	 rax, QWORD PTR [rdi+104]
  0006b	4c 8d 4c 24 40	 lea	 r9, QWORD PTR value_addr$[rsp]
  00070	48 8b d3	 mov	 rdx, rbx
  00073	48 8b cf	 mov	 rcx, rdi
  00076	48 89 74 24 50	 mov	 QWORD PTR [rsp+80], rsi
  0007b	ff 50 10	 call	 QWORD PTR [rax+16]
  0007e	48 8b f0	 mov	 rsi, rax

; 1270 :     if (ep == NULL)

  00081	48 85 c0	 test	 rax, rax

; 1271 :         return -1;

  00084	74 13		 je	 SHORT $LN16@PyDict_Del

; 1272 :     if (*value_addr == NULL) {

  00086	48 8b 44 24 40	 mov	 rax, QWORD PTR value_addr$[rsp]
  0008b	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0008f	75 1b		 jne	 SHORT $LN3@PyDict_Del

; 1273 :         set_key_error(key);

  00091	48 8b cb	 mov	 rcx, rbx
  00094	e8 00 00 00 00	 call	 set_key_error
$LN16@PyDict_Del:

; 1274 :         return -1;

  00099	83 c8 ff	 or	 eax, -1
  0009c	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]

; 1291 :     return 0;
; 1292 : }

  000a1	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  000a6	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000aa	5f		 pop	 rdi
  000ab	c3		 ret	 0
$LN3@PyDict_Del:

; 1275 :     }
; 1276 :     old_value = *value_addr;

  000ac	48 8b 18	 mov	 rbx, QWORD PTR [rax]

; 1277 :     /*
; 1278 :     if (Px_ASSIGNMENT_ERROR(op, old_value))
; 1279 :         return -1;
; 1280 :     */
; 1281 :     *value_addr = NULL;

  000af	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1282 :     mp->ma_used--;

  000b6	48 ff 4f 60	 dec	 QWORD PTR [rdi+96]

; 1283 :     if (!_PyDict_HasSplitTable(mp)) {

  000ba	48 83 7f 70 00	 cmp	 QWORD PTR [rdi+112], 0
  000bf	75 7e		 jne	 SHORT $LN2@PyDict_Del

; 1284 :         ENSURE_ALLOWS_DELETIONS(mp);

  000c1	48 8b 47 68	 mov	 rax, QWORD PTR [rdi+104]
  000c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict_unicode_nodummy
  000cc	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp
  000d1	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  000d5	75 0b		 jne	 SHORT $LN1@PyDict_Del
  000d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict_unicode
  000de	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
$LN1@PyDict_Del:

; 1285 :         old_key = ep->me_key;

  000e2	48 8b 7e 08	 mov	 rdi, QWORD PTR [rsi+8]

; 1286 :         Py_INCREF(dummy);

  000e6	e8 00 00 00 00	 call	 _Py_PXCTX
  000eb	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_dummy_struct
  000f2	85 c0		 test	 eax, eax
  000f4	75 38		 jne	 SHORT $LN12@PyDict_Del
  000f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00104	4c 8b cd	 mov	 r9, rbp
  00107	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0010d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00115	e8 00 00 00 00	 call	 _PyParallel_Guard
  0011a	85 c0		 test	 eax, eax
  0011c	75 09		 jne	 SHORT $LN11@PyDict_Del
  0011e	f6 05 20 00 00
	00 20		 test	 BYTE PTR _dummy_struct+32, 32 ; 00000020H
  00125	74 07		 je	 SHORT $LN12@PyDict_Del
$LN11@PyDict_Del:
  00127	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _dummy_struct+80
$LN12@PyDict_Del:

; 1287 :         ep->me_key = dummy;
; 1288 :         Py_DECREF(old_key);

  0012e	48 8b cf	 mov	 rcx, rdi
  00131	48 89 6e 08	 mov	 QWORD PTR [rsi+8], rbp
  00135	e8 00 00 00 00	 call	 _Py_DecRef
  0013a	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
$LN2@PyDict_Del:

; 1289 :     }
; 1290 :     Py_DECREF(old_value);

  0013f	48 8b cb	 mov	 rcx, rbx
  00142	e8 00 00 00 00	 call	 _Py_DecRef
  00147	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]

; 1291 :     return 0;
; 1292 : }

  0014c	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  00151	33 c0		 xor	 eax, eax
  00153	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00157	5f		 pop	 rdi
  00158	c3		 ret	 0
PyDict_DelItem ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@BOACJEDH@PyDict_Clear?$AA@		; `string'
PUBLIC	??_C@_0DG@NJAOCDNF@parallel?5thread?5attempted?5to?5cle@ ; `string'
PUBLIC	PyDict_Clear
EXTRN	Py_FatalError:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_Clear DD imagerel $LN25
	DD	imagerel $LN25+56
	DD	imagerel $unwind$PyDict_Clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyDict_Clear DD imagerel $LN25+56
	DD	imagerel $LN25+104
	DD	imagerel $chain$1$PyDict_Clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyDict_Clear DD imagerel $LN25+104
	DD	imagerel $LN25+129
	DD	imagerel $chain$2$PyDict_Clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyDict_Clear DD imagerel $LN25+129
	DD	imagerel $LN25+230
	DD	imagerel $chain$3$PyDict_Clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyDict_Clear DD imagerel $LN25+230
	DD	imagerel $LN25+261
	DD	imagerel $chain$4$PyDict_Clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$PyDict_Clear DD imagerel $LN25+261
	DD	imagerel $LN25+271
	DD	imagerel $chain$5$PyDict_Clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$PyDict_Clear DD imagerel $LN25+271
	DD	imagerel $LN25+277
	DD	imagerel $chain$6$PyDict_Clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$PyDict_Clear DD 021H
	DD	imagerel $LN25
	DD	imagerel $LN25+56
	DD	imagerel $unwind$PyDict_Clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$PyDict_Clear DD 021H
	DD	imagerel $LN25+56
	DD	imagerel $LN25+104
	DD	imagerel $chain$1$PyDict_Clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyDict_Clear DD 021H
	DD	imagerel $LN25+104
	DD	imagerel $LN25+129
	DD	imagerel $chain$2$PyDict_Clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyDict_Clear DD 020521H
	DD	085405H
	DD	imagerel $LN25+104
	DD	imagerel $LN25+129
	DD	imagerel $chain$2$PyDict_Clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyDict_Clear DD 020521H
	DD	0bc405H
	DD	imagerel $LN25+56
	DD	imagerel $LN25+104
	DD	imagerel $chain$1$PyDict_Clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyDict_Clear DD 040e21H
	DD	0a740eH
	DD	096405H
	DD	imagerel $LN25
	DD	imagerel $LN25+56
	DD	imagerel $unwind$PyDict_Clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_Clear DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0N@BOACJEDH@PyDict_Clear?$AA@
CONST	SEGMENT
??_C@_0N@BOACJEDH@PyDict_Clear?$AA@ DB 'PyDict_Clear', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@NJAOCDNF@parallel?5thread?5attempted?5to?5cle@
CONST	SEGMENT
??_C@_0DG@NJAOCDNF@parallel?5thread?5attempted?5to?5cle@ DB 'parallel thr'
	DB	'ead attempted to clear a main thread dict', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyDict_Clear
_TEXT	SEGMENT
op$ = 64
PyDict_Clear PROC					; COMDAT

; 1296 : {

$LN25:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 1297 :     PyDictObject *mp;
; 1298 :     PyDictKeysObject *oldkeys;
; 1299 :     PyObject **oldvalues;
; 1300 :     Py_ssize_t i, n;
; 1301 : 
; 1302 : #ifdef WITH_PARALLEL
; 1303 :     if (Py_PXCTX && Px_ISPY(op))

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 12		 je	 SHORT $LN14@PyDict_Cle@2
  00012	f6 43 20 01	 test	 BYTE PTR [rbx+32], 1
  00016	74 0c		 je	 SHORT $LN14@PyDict_Cle@2

; 1304 :         Py_FatalError("parallel thread attempted to clear a main thread dict");

  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DG@NJAOCDNF@parallel?5thread?5attempted?5to?5cle@
  0001f	e8 00 00 00 00	 call	 Py_FatalError
$LN14@PyDict_Cle@2:

; 1305 : #endif
; 1306 : 
; 1307 :     if (!PyDict_Check(op))

  00024	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00028	f7 80 00 01 00
	00 00 00 00 20	 test	 DWORD PTR [rax+256], 536870912 ; 20000000H
  00032	0f 84 d7 00 00
	00		 je	 $LN1@PyDict_Cle@2

; 1308 :         return;
; 1309 : 
; 1310 :     mp = ((PyDictObject *)op);
; 1311 :     oldkeys = mp->ma_keys;

  00038	48 89 74 24 48	 mov	 QWORD PTR [rsp+72], rsi
  0003d	48 8b 73 68	 mov	 rsi, QWORD PTR [rbx+104]
  00041	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi

; 1312 :     oldvalues = mp->ma_values;

  00046	48 8b 7b 70	 mov	 rdi, QWORD PTR [rbx+112]

; 1313 :     if (oldvalues == empty_values)

  0004a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:empty_values
  00051	48 3b f9	 cmp	 rdi, rcx
  00054	0f 84 ab 00 00
	00		 je	 $LN22@PyDict_Cle@2

; 1314 :         return;
; 1315 :     /* Empty the dict... */
; 1316 :     DK_INCREF(Py_EMPTY_KEYS);

  0005a	48 ff 05 00 00
	00 00		 inc	 QWORD PTR empty_keys_struct

; 1317 :     mp->ma_keys = Py_EMPTY_KEYS;

  00061	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:empty_keys_struct
  00068	4c 89 64 24 58	 mov	 QWORD PTR [rsp+88], r12

; 1318 :     mp->ma_values = empty_values;
; 1319 :     mp->ma_used = 0;

  0006d	45 33 e4	 xor	 r12d, r12d
  00070	48 89 43 68	 mov	 QWORD PTR [rbx+104], rax
  00074	48 89 4b 70	 mov	 QWORD PTR [rbx+112], rcx
  00078	4c 89 63 60	 mov	 QWORD PTR [rbx+96], r12

; 1320 :     /* ...then clear the keys and values */
; 1321 :     if (oldvalues != NULL) {

  0007c	48 85 ff	 test	 rdi, rdi
  0007f	74 72		 je	 SHORT $LN11@PyDict_Cle@2

; 1322 :         n = DK_SIZE(oldkeys);

  00081	48 89 6c 24 40	 mov	 QWORD PTR [rsp+64], rbp
  00086	48 8b 6e 08	 mov	 rbp, QWORD PTR [rsi+8]

; 1323 :         for (i = 0; i < n; i++)

  0008a	41 8b dc	 mov	 ebx, r12d
  0008d	48 85 ed	 test	 rbp, rbp
  00090	7e 43		 jle	 SHORT $LN8@PyDict_Cle@2
$LL10@PyDict_Cle@2:
  00092	4c 8b 0c df	 mov	 r9, QWORD PTR [rdi+rbx*8]

; 1324 :             Py_CLEAR(oldvalues[i]);

  00096	4d 85 c9	 test	 r9, r9
  00099	74 32		 je	 SHORT $LN6@PyDict_Cle@2
  0009b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  000a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOACJEDH@PyDict_Clear?$AA@
  000a9	41 b8 2c 05 00
	00		 mov	 r8d, 1324		; 0000052cH
  000af	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000b7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000bc	85 c0		 test	 eax, eax
  000be	75 0d		 jne	 SHORT $LN6@PyDict_Cle@2
  000c0	48 8b 0c df	 mov	 rcx, QWORD PTR [rdi+rbx*8]
  000c4	4c 89 24 df	 mov	 QWORD PTR [rdi+rbx*8], r12
  000c8	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@PyDict_Cle@2:

; 1323 :         for (i = 0; i < n; i++)

  000cd	48 ff c3	 inc	 rbx
  000d0	48 3b dd	 cmp	 rbx, rbp
  000d3	7c bd		 jl	 SHORT $LL10@PyDict_Cle@2
$LN8@PyDict_Cle@2:

; 1325 :         free_values(oldvalues);

  000d5	e8 00 00 00 00	 call	 _Py_PXCTX
  000da	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  000df	48 8b cf	 mov	 rcx, rdi
  000e2	85 c0		 test	 eax, eax
  000e4	74 07		 je	 SHORT $LN17@PyDict_Cle@2
  000e6	e8 00 00 00 00	 call	 _PxMem_Free
  000eb	eb 06		 jmp	 SHORT $LN11@PyDict_Cle@2
$LN17@PyDict_Cle@2:
  000ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN11@PyDict_Cle@2:

; 1326 :         DK_DECREF(oldkeys);
; 1327 :     }
; 1328 :     else {
; 1329 :        assert(oldkeys->dk_refcnt == 1);
; 1330 :        DK_DECREF(oldkeys);

  000f3	48 ff 0e	 dec	 QWORD PTR [rsi]
  000f6	75 08		 jne	 SHORT $LN23@PyDict_Cle@2
  000f8	48 8b ce	 mov	 rcx, rsi
  000fb	e8 00 00 00 00	 call	 free_keys_object
$LN23@PyDict_Cle@2:
  00100	4c 8b 64 24 58	 mov	 r12, QWORD PTR [rsp+88]
$LN22@PyDict_Cle@2:
  00105	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0010a	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]
$LN1@PyDict_Cle@2:

; 1331 :     }
; 1332 : }

  0010f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00113	5b		 pop	 rbx
  00114	c3		 ret	 0
PyDict_Clear ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT dict_next
_TEXT	SEGMENT
op$ = 8
i$ = 16
pvalue$ = 24
dict_next PROC						; COMDAT

; 1340 :     Py_ssize_t mask, offset;
; 1341 :     PyDictObject *mp;
; 1342 :     PyObject **value_ptr;
; 1343 : 
; 1344 : 
; 1345 :     if (!PyDict_Check(op))

  00000	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00004	4d 8b d8	 mov	 r11, r8
  00007	4c 8b d1	 mov	 r10, rcx
  0000a	f7 80 00 01 00
	00 00 00 00 20	 test	 DWORD PTR [rax+256], 536870912 ; 20000000H

; 1346 :         return -1;

  00014	74 4e		 je	 SHORT $LN13@dict_next

; 1347 :     mp = (PyDictObject *)op;
; 1348 :     if (i < 0)

  00016	48 85 d2	 test	 rdx, rdx

; 1349 :         return -1;

  00019	78 49		 js	 SHORT $LN13@dict_next

; 1350 :     if (mp->ma_values) {

  0001b	48 8b 41 70	 mov	 rax, QWORD PTR [rcx+112]
  0001f	48 85 c0	 test	 rax, rax
  00022	74 0c		 je	 SHORT $LN6@dict_next

; 1351 :         value_ptr = &mp->ma_values[i];

  00024	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]

; 1352 :         offset = sizeof(PyObject *);

  00028	41 b9 08 00 00
	00		 mov	 r9d, 8

; 1353 :     }
; 1354 :     else {

  0002e	eb 13		 jmp	 SHORT $LN5@dict_next
$LN6@dict_next:

; 1355 :         value_ptr = &mp->ma_keys->dk_entries[i].me_value;

  00030	49 8b 42 68	 mov	 rax, QWORD PTR [r10+104]
  00034	48 8d 4c 52 06	 lea	 rcx, QWORD PTR [rdx+rdx*2+6]

; 1356 :         offset = sizeof(PyDictKeyEntry);

  00039	41 b9 18 00 00
	00		 mov	 r9d, 24
  0003f	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
$LN5@dict_next:

; 1357 :     }
; 1358 :     mask = DK_MASK(mp->ma_keys);

  00043	49 8b 42 68	 mov	 rax, QWORD PTR [r10+104]
  00047	4c 8b 40 08	 mov	 r8, QWORD PTR [rax+8]
  0004b	49 ff c8	 dec	 r8

; 1359 :     while (i <= mask && *value_ptr == NULL) {

  0004e	49 3b d0	 cmp	 rdx, r8
  00051	7f 11		 jg	 SHORT $LN13@dict_next
$LL4@dict_next:
  00053	48 83 39 00	 cmp	 QWORD PTR [rcx], 0
  00057	75 10		 jne	 SHORT $LN3@dict_next

; 1360 :         value_ptr = (PyObject **)(((char *)value_ptr) + offset);
; 1361 :         i++;

  00059	48 ff c2	 inc	 rdx
  0005c	49 03 c9	 add	 rcx, r9
  0005f	49 3b d0	 cmp	 rdx, r8
  00062	7e ef		 jle	 SHORT $LL4@dict_next
$LN13@dict_next:

; 1364 :         return -1;

  00064	48 83 c8 ff	 or	 rax, -1

; 1368 : }

  00068	c3		 ret	 0
$LN3@dict_next:

; 1362 :     }
; 1363 :     if (i > mask)

  00069	49 3b d0	 cmp	 rdx, r8
  0006c	7f f6		 jg	 SHORT $LN13@dict_next

; 1365 :     if (pvalue)

  0006e	4d 85 db	 test	 r11, r11
  00071	74 06		 je	 SHORT $LN1@dict_next

; 1366 :         *pvalue = *value_ptr;

  00073	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00076	49 89 03	 mov	 QWORD PTR [r11], rax
$LN1@dict_next:

; 1367 :     return i;

  00079	48 8b c2	 mov	 rax, rdx

; 1368 : }

  0007c	c3		 ret	 0
dict_next ENDP
_TEXT	ENDS
PUBLIC	PyDict_Next
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_Next DD imagerel $LN5
	DD	imagerel $LN5+109
	DD	imagerel $unwind$PyDict_Next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_Next DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyDict_Next
_TEXT	SEGMENT
op$ = 48
ppos$ = 56
pkey$ = 64
pvalue$ = 72
PyDict_Next PROC					; COMDAT

; 1387 : {

$LN5:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fa	 mov	 rdi, rdx

; 1388 :     PyDictObject *mp;
; 1389 :     Py_ssize_t i = dict_next(op, *ppos, pvalue);

  00012	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00015	49 8b d8	 mov	 rbx, r8
  00018	4d 8b c1	 mov	 r8, r9
  0001b	48 8b f1	 mov	 rsi, rcx
  0001e	e8 00 00 00 00	 call	 dict_next
  00023	4c 8b d8	 mov	 r11, rax

; 1390 :     if (i < 0)

  00026	48 85 c0	 test	 rax, rax
  00029	79 12		 jns	 SHORT $LN2@PyDict_Nex

; 1391 :         return 0;

  0002b	33 c0		 xor	 eax, eax

; 1396 :     return 1;
; 1397 : }

  0002d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00032	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00037	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003b	5f		 pop	 rdi
  0003c	c3		 ret	 0
$LN2@PyDict_Nex:

; 1392 :     mp = (PyDictObject *)op;
; 1393 :     *ppos = i+1;

  0003d	48 ff c0	 inc	 rax
  00040	48 89 07	 mov	 QWORD PTR [rdi], rax

; 1394 :     if (pkey)

  00043	48 85 db	 test	 rbx, rbx
  00046	74 10		 je	 SHORT $LN1@PyDict_Nex

; 1395 :         *pkey = mp->ma_keys->dk_entries[i].me_key;

  00048	48 8b 46 68	 mov	 rax, QWORD PTR [rsi+104]
  0004c	4b 8d 0c 5b	 lea	 rcx, QWORD PTR [r11+r11*2]
  00050	48 8b 4c c8 28	 mov	 rcx, QWORD PTR [rax+rcx*8+40]
  00055	48 89 0b	 mov	 QWORD PTR [rbx], rcx
$LN1@PyDict_Nex:

; 1396 :     return 1;
; 1397 : }

  00058	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00062	b8 01 00 00 00	 mov	 eax, 1
  00067	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006b	5f		 pop	 rdi
  0006c	c3		 ret	 0
PyDict_Next ENDP
_TEXT	ENDS
PUBLIC	_PyDict_Next
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyDict_Next DD imagerel $LN5
	DD	imagerel $LN5+126
	DD	imagerel $unwind$_PyDict_Next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyDict_Next DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyDict_Next
_TEXT	SEGMENT
op$ = 48
ppos$ = 56
pkey$ = 64
pvalue$ = 72
phash$ = 80
_PyDict_Next PROC					; COMDAT

; 1405 : {

$LN5:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b f2	 mov	 rsi, rdx

; 1406 :     PyDictObject *mp;
; 1407 :     Py_ssize_t i = dict_next(op, *ppos, pvalue);

  00012	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00015	49 8b f8	 mov	 rdi, r8
  00018	4d 8b c1	 mov	 r8, r9
  0001b	48 8b d9	 mov	 rbx, rcx
  0001e	e8 00 00 00 00	 call	 dict_next
  00023	4c 8b d8	 mov	 r11, rax

; 1408 :     if (i < 0)

  00026	48 85 c0	 test	 rax, rax
  00029	79 12		 jns	 SHORT $LN2@PyDict_Nex@2

; 1409 :         return 0;

  0002b	33 c0		 xor	 eax, eax

; 1415 :     return 1;
; 1416 : }

  0002d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00032	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00037	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003b	5f		 pop	 rdi
  0003c	c3		 ret	 0
$LN2@PyDict_Nex@2:

; 1410 :     mp = (PyDictObject *)op;
; 1411 :     *ppos = i+1;

  0003d	48 ff c0	 inc	 rax

; 1412 :     *phash = mp->ma_keys->dk_entries[i].me_hash;

  00040	4b 8d 14 5b	 lea	 rdx, QWORD PTR [r11+r11*2]
  00044	48 89 06	 mov	 QWORD PTR [rsi], rax
  00047	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  0004b	48 8b 4c d0 20	 mov	 rcx, QWORD PTR [rax+rdx*8+32]
  00050	48 8b 44 24 50	 mov	 rax, QWORD PTR phash$[rsp]
  00055	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1413 :     if (pkey)

  00058	48 85 ff	 test	 rdi, rdi
  0005b	74 0c		 je	 SHORT $LN1@PyDict_Nex@2

; 1414 :         *pkey = mp->ma_keys->dk_entries[i].me_key;

  0005d	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  00061	48 8b 4c d0 28	 mov	 rcx, QWORD PTR [rax+rdx*8+40]
  00066	48 89 0f	 mov	 QWORD PTR [rdi], rcx
$LN1@PyDict_Nex@2:

; 1415 :     return 1;
; 1416 : }

  00069	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0006e	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00073	b8 01 00 00 00	 mov	 eax, 1
  00078	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007c	5f		 pop	 rdi
  0007d	c3		 ret	 0
_PyDict_Next ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@HOKLHDCC@dict_dealloc?$AA@		; `string'
EXTRN	_PyTrash_thread_deposit_object:PROC
EXTRN	_PyTrash_thread_destroy_chain:PROC
EXTRN	_PyParallel_GetThreadState:PROC
EXTRN	PyObject_GC_UnTrack:PROC
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$dict_dealloc DD imagerel dict_dealloc
	DD	imagerel dict_dealloc+148
	DD	imagerel $unwind$dict_dealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$dict_dealloc DD imagerel dict_dealloc+148
	DD	imagerel dict_dealloc+173
	DD	imagerel $chain$1$dict_dealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$dict_dealloc DD imagerel dict_dealloc+173
	DD	imagerel dict_dealloc+302
	DD	imagerel $chain$2$dict_dealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$dict_dealloc DD imagerel dict_dealloc+302
	DD	imagerel dict_dealloc+324
	DD	imagerel $chain$3$dict_dealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$dict_dealloc DD imagerel dict_dealloc+324
	DD	imagerel dict_dealloc+477
	DD	imagerel $chain$4$dict_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$dict_dealloc DD 021H
	DD	imagerel dict_dealloc
	DD	imagerel dict_dealloc+148
	DD	imagerel $unwind$dict_dealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$dict_dealloc DD 021H
	DD	imagerel dict_dealloc+148
	DD	imagerel dict_dealloc+173
	DD	imagerel $chain$1$dict_dealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$dict_dealloc DD 020521H
	DD	0a3405H
	DD	imagerel dict_dealloc+148
	DD	imagerel dict_dealloc+173
	DD	imagerel $chain$1$dict_dealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$dict_dealloc DD 040a21H
	DD	0ce40aH
	DD	0b7405H
	DD	imagerel dict_dealloc
	DD	imagerel dict_dealloc+148
	DD	imagerel $unwind$dict_dealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_dealloc DD 060e01H
	DD	0d540eH
	DD	0d00a520eH
	DD	06006c008H
xdata	ENDS
;	COMDAT ??_C@_0N@HOKLHDCC@dict_dealloc?$AA@
CONST	SEGMENT
??_C@_0N@HOKLHDCC@dict_dealloc?$AA@ DB 'dict_dealloc', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\dictobject.c
CONST	ENDS
;	COMDAT dict_dealloc
_TEXT	SEGMENT
mp$ = 80
dict_dealloc PROC					; COMDAT

; 1422 : {

  00000	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  00005	56		 push	 rsi
  00006	41 54		 push	 r12
  00008	41 55		 push	 r13
  0000a	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1423 :     PyObject **values = mp->ma_values;

  0000e	4c 8b 69 70	 mov	 r13, QWORD PTR [rcx+112]

; 1424 :     PyDictKeysObject *keys = mp->ma_keys;

  00012	4c 8b 61 68	 mov	 r12, QWORD PTR [rcx+104]
  00016	48 8b f1	 mov	 rsi, rcx

; 1425 :     Py_ssize_t i, n;
; 1426 :     Py_GUARD

  00019	e8 00 00 00 00	 call	 _Py_PXCTX
  0001e	85 c0		 test	 eax, eax
  00020	74 1c		 je	 SHORT $LN21@dict_deall
  00022	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@HOKLHDCC@dict_dealloc?$AA@
  00030	45 33 c9	 xor	 r9d, r9d
  00033	41 b8 92 05 00
	00		 mov	 r8d, 1426		; 00000592H
  00039	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN21@dict_deall:

; 1427 :     PyObject_GC_UnTrack(mp);

  0003e	48 8b ce	 mov	 rcx, rsi
  00041	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 1428 :     Py_TRASHCAN_SAFE_BEGIN(mp)

  00046	e8 00 00 00 00	 call	 _Py_PXCTX
  0004b	85 c0		 test	 eax, eax
  0004d	74 0a		 je	 SHORT $LN24@dict_deall
  0004f	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00054	48 8b e8	 mov	 rbp, rax
  00057	eb 07		 jmp	 SHORT $LN25@dict_deall
$LN24@dict_deall:
  00059	48 8b 2d 00 00
	00 00		 mov	 rbp, QWORD PTR _PyThreadState_Current
$LN25@dict_deall:
  00060	8b 85 94 00 00
	00		 mov	 eax, DWORD PTR [rbp+148]
  00066	83 f8 32	 cmp	 eax, 50			; 00000032H
  00069	0f 8d 57 01 00
	00		 jge	 $LN17@dict_deall
  0006f	ff c0		 inc	 eax
  00071	89 85 94 00 00
	00		 mov	 DWORD PTR [rbp+148], eax

; 1429 :     if (values != NULL) {

  00077	4d 85 ed	 test	 r13, r13
  0007a	0f 84 d1 00 00
	00		 je	 $LN16@dict_deall

; 1430 :         if (values != empty_values) {

  00080	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:empty_values
  00087	4c 3b e8	 cmp	 r13, rax
  0008a	0f 84 c1 00 00
	00		 je	 $LN16@dict_deall

; 1431 :             for (i = 0, n = DK_SIZE(mp->ma_keys); i < n; i++) {

  00090	48 8b 46 68	 mov	 rax, QWORD PTR [rsi+104]
  00094	48 89 7c 24 58	 mov	 QWORD PTR [rsp+88], rdi
  00099	4c 89 74 24 60	 mov	 QWORD PTR [rsp+96], r14
  0009e	4c 8b 70 08	 mov	 r14, QWORD PTR [rax+8]
  000a2	33 ff		 xor	 edi, edi
  000a4	4d 85 f6	 test	 r14, r14
  000a7	0f 8e 81 00 00
	00		 jle	 $LN12@dict_deall
  000ad	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
$LL14@dict_deall:
  000b2	49 8b 5c fd 00	 mov	 rbx, QWORD PTR [r13+rdi*8]

; 1432 :                 Py_XDECREF(values[i]);

  000b7	48 85 db	 test	 rbx, rbx
  000ba	74 65		 je	 SHORT $LN10@dict_deall
  000bc	e8 00 00 00 00	 call	 _Py_PXCTX
  000c1	85 c0		 test	 eax, eax
  000c3	75 5c		 jne	 SHORT $LN10@dict_deall
  000c5	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000c9	a8 20		 test	 al, 32			; 00000020H
  000cb	75 4c		 jne	 SHORT $LN32@dict_deall
  000cd	84 c0		 test	 al, al
  000cf	78 48		 js	 SHORT $LN32@dict_deall
  000d1	a8 02		 test	 al, 2
  000d3	75 4c		 jne	 SHORT $LN10@dict_deall
  000d5	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000d9	75 46		 jne	 SHORT $LN10@dict_deall
  000db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000e9	4c 8b cb	 mov	 r9, rbx
  000ec	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000f2	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000fa	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ff	48 8b cb	 mov	 rcx, rbx
  00102	85 c0		 test	 eax, eax
  00104	74 07		 je	 SHORT $LN37@dict_deall
  00106	e8 00 00 00 00	 call	 _Px_Dealloc
  0010b	eb 14		 jmp	 SHORT $LN10@dict_deall
$LN37@dict_deall:
  0010d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00111	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00117	eb 08		 jmp	 SHORT $LN10@dict_deall
$LN32@dict_deall:
  00119	48 8b cb	 mov	 rcx, rbx
  0011c	e8 00 00 00 00	 call	 Px_DecRef
$LN10@dict_deall:

; 1431 :             for (i = 0, n = DK_SIZE(mp->ma_keys); i < n; i++) {

  00121	48 ff c7	 inc	 rdi
  00124	49 3b fe	 cmp	 rdi, r14
  00127	7c 89		 jl	 SHORT $LL14@dict_deall
  00129	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
$LN12@dict_deall:

; 1433 :             }
; 1434 :             free_values(values);

  0012e	e8 00 00 00 00	 call	 _Py_PXCTX
  00133	4c 8b 74 24 60	 mov	 r14, QWORD PTR [rsp+96]
  00138	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  0013d	49 8b cd	 mov	 rcx, r13
  00140	85 c0		 test	 eax, eax
  00142	74 07		 je	 SHORT $LN26@dict_deall
  00144	e8 00 00 00 00	 call	 _PxMem_Free
  00149	eb 06		 jmp	 SHORT $LN16@dict_deall
$LN26@dict_deall:
  0014b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN16@dict_deall:

; 1435 :         }
; 1436 :         DK_DECREF(keys);
; 1437 :     }
; 1438 :     else {
; 1439 :         assert(keys->dk_refcnt == 1);
; 1440 :         DK_DECREF(keys);

  00151	49 ff 0c 24	 dec	 QWORD PTR [r12]
  00155	75 08		 jne	 SHORT $LN5@dict_deall
  00157	49 8b cc	 mov	 rcx, r12
  0015a	e8 00 00 00 00	 call	 free_keys_object
$LN5@dict_deall:

; 1441 :     }
; 1442 :     if (numfree < PyDict_MAXFREELIST && Py_TYPE(mp) == &PyDict_Type)

  0015f	48 63 0d 00 00
	00 00		 movsxd	 rcx, DWORD PTR numfree
  00166	83 f9 50	 cmp	 ecx, 80			; 00000050H
  00169	7d 22		 jge	 SHORT $LN4@dict_deall
  0016b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  00172	48 39 46 58	 cmp	 QWORD PTR [rsi+88], rax
  00176	75 15		 jne	 SHORT $LN4@dict_deall

; 1443 :         free_list[numfree++] = mp;

  00178	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:free_list
  0017f	48 89 34 ca	 mov	 QWORD PTR [rdx+rcx*8], rsi
  00183	ff c1		 inc	 ecx
  00185	89 0d 00 00 00
	00		 mov	 DWORD PTR numfree, ecx

; 1444 :     else

  0018b	eb 0d		 jmp	 SHORT $LN3@dict_deall
$LN4@dict_deall:

; 1445 :         Py_TYPE(mp)->tp_free((PyObject *)mp);

  0018d	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  00191	48 8b ce	 mov	 rcx, rsi
  00194	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]
$LN3@dict_deall:

; 1446 :     Py_TRASHCAN_SAFE_END(mp)

  0019a	ff 8d 94 00 00
	00		 dec	 DWORD PTR [rbp+148]
  001a0	48 83 bd 98 00
	00 00 00	 cmp	 QWORD PTR [rbp+152], 0
  001a8	74 24		 je	 SHORT $LN19@dict_deall
  001aa	83 bd 94 00 00
	00 00		 cmp	 DWORD PTR [rbp+148], 0
  001b1	7f 1b		 jg	 SHORT $LN19@dict_deall

; 1447 : }

  001b3	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  001b8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001bc	41 5d		 pop	 r13
  001be	41 5c		 pop	 r12
  001c0	5e		 pop	 rsi
  001c1	e9 00 00 00 00	 jmp	 _PyTrash_thread_destroy_chain
$LN17@dict_deall:

; 1446 :     Py_TRASHCAN_SAFE_END(mp)

  001c6	48 8b ce	 mov	 rcx, rsi
  001c9	e8 00 00 00 00	 call	 _PyTrash_thread_deposit_object
$LN19@dict_deall:

; 1447 : }

  001ce	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  001d3	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001d7	41 5d		 pop	 r13
  001d9	41 5c		 pop	 r12
  001db	5e		 pop	 rsi
  001dc	c3		 ret	 0
dict_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_02KEGNLNML@?0?5?$AA@			; `string'
PUBLIC	??_C@_01CELHOKLL@?$HN?$AA@			; `string'
PUBLIC	??_C@_01HCONENDN@?$HL?$AA@			; `string'
PUBLIC	??_C@_02LMMGGCAJ@?3?5?$AA@			; `string'
PUBLIC	??_C@_02MCILKGOH@?$HL?$HN?$AA@			; `string'
PUBLIC	??_C@_05LJIGIGGH@?$HL?4?4?4?$HN?$AA@		; `string'
EXTRN	Py_ReprLeave:PROC
EXTRN	PyUnicode_Join:PROC
EXTRN	PyList_Append:PROC
EXTRN	PyUnicode_AppendAndDel:PROC
EXTRN	PyUnicode_Append:PROC
EXTRN	PyObject_Repr:PROC
EXTRN	PyList_New:PROC
EXTRN	PyUnicode_FromString:PROC
EXTRN	Py_ReprEnter:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$dict_repr DD imagerel dict_repr
	DD	imagerel dict_repr+87
	DD	imagerel $unwind$dict_repr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$dict_repr DD imagerel dict_repr+87
	DD	imagerel dict_repr+116
	DD	imagerel $chain$0$dict_repr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$dict_repr DD imagerel dict_repr+116
	DD	imagerel dict_repr+153
	DD	imagerel $chain$1$dict_repr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$dict_repr DD imagerel dict_repr+153
	DD	imagerel dict_repr+623
	DD	imagerel $chain$3$dict_repr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$dict_repr DD imagerel dict_repr+623
	DD	imagerel dict_repr+838
	DD	imagerel $chain$4$dict_repr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$dict_repr DD imagerel dict_repr+838
	DD	imagerel dict_repr+843
	DD	imagerel $chain$5$dict_repr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$dict_repr DD imagerel dict_repr+843
	DD	imagerel dict_repr+864
	DD	imagerel $chain$6$dict_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$dict_repr DD 021H
	DD	imagerel dict_repr
	DD	imagerel dict_repr+87
	DD	imagerel $unwind$dict_repr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$dict_repr DD 021H
	DD	imagerel dict_repr+87
	DD	imagerel dict_repr+116
	DD	imagerel $chain$0$dict_repr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$dict_repr DD 021H
	DD	imagerel dict_repr+116
	DD	imagerel dict_repr+153
	DD	imagerel $chain$1$dict_repr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$dict_repr DD 040e21H
	DD	09740eH
	DD	0b3405H
	DD	imagerel dict_repr+116
	DD	imagerel dict_repr+153
	DD	imagerel $chain$1$dict_repr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$dict_repr DD 020521H
	DD	08c405H
	DD	imagerel dict_repr+87
	DD	imagerel dict_repr+116
	DD	imagerel $chain$0$dict_repr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$dict_repr DD 020521H
	DD	0a6405H
	DD	imagerel dict_repr
	DD	imagerel dict_repr+87
	DD	imagerel $unwind$dict_repr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_repr DD 040d01H
	DD	0e006b20dH
	DD	05002d004H
xdata	ENDS
;	COMDAT ??_C@_02KEGNLNML@?0?5?$AA@
CONST	SEGMENT
??_C@_02KEGNLNML@?0?5?$AA@ DB ', ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01CELHOKLL@?$HN?$AA@
CONST	SEGMENT
??_C@_01CELHOKLL@?$HN?$AA@ DB '}', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01HCONENDN@?$HL?$AA@
CONST	SEGMENT
??_C@_01HCONENDN@?$HL?$AA@ DB '{', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LMMGGCAJ@?3?5?$AA@
CONST	SEGMENT
??_C@_02LMMGGCAJ@?3?5?$AA@ DB ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MCILKGOH@?$HL?$HN?$AA@
CONST	SEGMENT
??_C@_02MCILKGOH@?$HL?$HN?$AA@ DB '{}', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LJIGIGGH@?$HL?4?4?4?$HN?$AA@
CONST	SEGMENT
??_C@_05LJIGIGGH@?$HL?4?4?4?$HN?$AA@ DB '{...}', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\dictobject.c
CONST	ENDS
;	COMDAT dict_repr
_TEXT	SEGMENT
key$ = 48
i$ = 56
mp$ = 128
s$ = 136
temp$ = 144
value$ = 152
dict_repr PROC						; COMDAT

; 1452 : {

  00000	40 55		 push	 rbp
  00002	41 55		 push	 r13
  00004	41 56		 push	 r14
  00006	48 8b ec	 mov	 rbp, rsp
  00009	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0000d	4c 8b e9	 mov	 r13, rcx

; 1453 :     Py_ssize_t i;
; 1454 :     PyObject *s, *temp, *colon = NULL;
; 1455 :     PyObject *pieces = NULL, *result = NULL;

  00010	45 33 f6	 xor	 r14d, r14d

; 1456 :     PyObject *key, *value;
; 1457 : 
; 1458 :     i = Py_ReprEnter((PyObject *)mp);

  00013	e8 00 00 00 00	 call	 Py_ReprEnter

; 1459 :     if (i != 0) {

  00018	85 c0		 test	 eax, eax
  0001a	74 1f		 je	 SHORT $LN21@dict_repr

; 1460 :         return i > 0 ? PyUnicode_FromString("{...}") : NULL;

  0001c	0f 8e 31 03 00
	00		 jle	 $LN24@dict_repr
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LJIGIGGH@?$HL?4?4?4?$HN?$AA@
  00029	e8 00 00 00 00	 call	 PyUnicode_FromString
  0002e	4c 8b f0	 mov	 r14, rax

; 1529 : }

  00031	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00035	41 5e		 pop	 r14
  00037	41 5d		 pop	 r13
  00039	5d		 pop	 rbp
  0003a	c3		 ret	 0
$LN21@dict_repr:

; 1461 :     }
; 1462 : 
; 1463 :     if (mp->ma_used == 0) {

  0003b	4d 39 75 60	 cmp	 QWORD PTR [r13+96], r14
  0003f	75 14		 jne	 SHORT $LN20@dict_repr

; 1464 :         result = PyUnicode_FromString("{}");

  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02MCILKGOH@?$HL?$HN?$AA@
  00048	e8 00 00 00 00	 call	 PyUnicode_FromString
  0004d	4c 8b f0	 mov	 r14, rax

; 1465 :         goto Done;

  00050	e9 f6 02 00 00	 jmp	 $LN3@dict_repr
$LN20@dict_repr:

; 1466 :     }
; 1467 : 
; 1468 :     pieces = PyList_New(0);

  00055	33 c9		 xor	 ecx, ecx
  00057	48 89 74 24 50	 mov	 QWORD PTR [rsp+80], rsi
  0005c	e8 00 00 00 00	 call	 PyList_New
  00061	48 8b f0	 mov	 rsi, rax

; 1469 :     if (pieces == NULL)

  00064	48 85 c0	 test	 rax, rax
  00067	0f 84 d9 02 00
	00		 je	 $LN59@dict_repr

; 1470 :         goto Done;
; 1471 : 
; 1472 :     colon = PyUnicode_FromString(": ");

  0006d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02LMMGGCAJ@?3?5?$AA@
  00074	4c 89 64 24 40	 mov	 QWORD PTR [rsp+64], r12
  00079	e8 00 00 00 00	 call	 PyUnicode_FromString
  0007e	4c 8b e0	 mov	 r12, rax

; 1473 :     if (colon == NULL)

  00081	48 85 c0	 test	 rax, rax
  00084	0f 84 e5 01 00
	00		 je	 $Done$21242

; 1474 :         goto Done;
; 1475 : 
; 1476 :     /* Do repr() on each key+value pair, and insert ": " between them.
; 1477 :        Note that repr may mutate the dict. */
; 1478 :     i = 0;
; 1479 :     while (PyDict_Next((PyObject *)mp, &i, &key, &value)) {

  0008a	4c 8d 4d 38	 lea	 r9, QWORD PTR value$[rbp-96]
  0008e	4c 8d 45 d0	 lea	 r8, QWORD PTR key$[rbp-96]
  00092	48 8d 55 d8	 lea	 rdx, QWORD PTR i$[rbp-96]
  00096	49 8b cd	 mov	 rcx, r13
  00099	48 89 5c 24 58	 mov	 QWORD PTR [rsp+88], rbx
  0009e	4c 89 75 d8	 mov	 QWORD PTR i$[rbp-96], r14
  000a2	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  000a7	e8 00 00 00 00	 call	 PyDict_Next
  000ac	85 c0		 test	 eax, eax
  000ae	0f 84 fe 00 00
	00		 je	 $LN16@dict_repr
$LL17@dict_repr:

; 1480 :         int status;
; 1481 :         /* Prevent repr from deleting key or value during key format. */
; 1482 :         Py_INCREF(key);

  000b4	e8 00 00 00 00	 call	 _Py_PXCTX
  000b9	48 8b 7d d0	 mov	 rdi, QWORD PTR key$[rbp-96]
  000bd	85 c0		 test	 eax, eax
  000bf	75 32		 jne	 SHORT $LN27@dict_repr
  000c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000cf	4c 8b cf	 mov	 r9, rdi
  000d2	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000d8	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000e0	e8 00 00 00 00	 call	 _PyParallel_Guard
  000e5	85 c0		 test	 eax, eax
  000e7	75 06		 jne	 SHORT $LN26@dict_repr
  000e9	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  000ed	74 04		 je	 SHORT $LN27@dict_repr
$LN26@dict_repr:
  000ef	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN27@dict_repr:

; 1483 :         Py_INCREF(value);

  000f3	e8 00 00 00 00	 call	 _Py_PXCTX
  000f8	48 8b 5d 38	 mov	 rbx, QWORD PTR value$[rbp-96]
  000fc	85 c0		 test	 eax, eax
  000fe	75 32		 jne	 SHORT $LN31@dict_repr
  00100	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00107	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0010e	4c 8b cb	 mov	 r9, rbx
  00111	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00117	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0011f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00124	85 c0		 test	 eax, eax
  00126	75 06		 jne	 SHORT $LN30@dict_repr
  00128	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0012c	74 04		 je	 SHORT $LN31@dict_repr
$LN30@dict_repr:
  0012e	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN31@dict_repr:

; 1484 :         s = PyObject_Repr(key);

  00132	48 8b cf	 mov	 rcx, rdi
  00135	e8 00 00 00 00	 call	 PyObject_Repr

; 1485 :         PyUnicode_Append(&s, colon);

  0013a	48 8d 4d 28	 lea	 rcx, QWORD PTR s$[rbp-96]
  0013e	49 8b d4	 mov	 rdx, r12
  00141	48 89 45 28	 mov	 QWORD PTR s$[rbp-96], rax
  00145	e8 00 00 00 00	 call	 PyUnicode_Append

; 1486 :         PyUnicode_AppendAndDel(&s, PyObject_Repr(value));

  0014a	48 8b cb	 mov	 rcx, rbx
  0014d	e8 00 00 00 00	 call	 PyObject_Repr
  00152	48 8d 4d 28	 lea	 rcx, QWORD PTR s$[rbp-96]
  00156	48 8b d0	 mov	 rdx, rax
  00159	e8 00 00 00 00	 call	 PyUnicode_AppendAndDel

; 1487 :         Py_DECREF(key);

  0015e	48 8b cf	 mov	 rcx, rdi
  00161	e8 00 00 00 00	 call	 _Py_DecRef

; 1488 :         Py_DECREF(value);

  00166	48 8b cb	 mov	 rcx, rbx
  00169	e8 00 00 00 00	 call	 _Py_DecRef

; 1489 :         if (s == NULL)

  0016e	48 8b 55 28	 mov	 rdx, QWORD PTR s$[rbp-96]
  00172	48 85 d2	 test	 rdx, rdx
  00175	0f 84 ea 00 00
	00		 je	 $LN62@dict_repr

; 1490 :             goto Done;
; 1491 :         status = PyList_Append(pieces, s);

  0017b	48 8b ce	 mov	 rcx, rsi
  0017e	e8 00 00 00 00	 call	 PyList_Append

; 1492 :         Py_DECREF(s);  /* append created a new ref */

  00183	48 8b 4d 28	 mov	 rcx, QWORD PTR s$[rbp-96]
  00187	8b d8		 mov	 ebx, eax
  00189	e8 00 00 00 00	 call	 _Py_DecRef

; 1493 :         if (status < 0)

  0018e	85 db		 test	 ebx, ebx
  00190	0f 88 cf 00 00
	00		 js	 $LN62@dict_repr

; 1474 :         goto Done;
; 1475 : 
; 1476 :     /* Do repr() on each key+value pair, and insert ": " between them.
; 1477 :        Note that repr may mutate the dict. */
; 1478 :     i = 0;
; 1479 :     while (PyDict_Next((PyObject *)mp, &i, &key, &value)) {

  00196	4c 8d 4d 38	 lea	 r9, QWORD PTR value$[rbp-96]
  0019a	4c 8d 45 d0	 lea	 r8, QWORD PTR key$[rbp-96]
  0019e	48 8d 55 d8	 lea	 rdx, QWORD PTR i$[rbp-96]
  001a2	49 8b cd	 mov	 rcx, r13
  001a5	e8 00 00 00 00	 call	 PyDict_Next
  001aa	85 c0		 test	 eax, eax
  001ac	0f 85 02 ff ff
	ff		 jne	 $LL17@dict_repr
$LN16@dict_repr:

; 1494 :             goto Done;
; 1495 :     }
; 1496 : 
; 1497 :     /* Add "{}" decorations to the first and last items. */
; 1498 :     assert(PyList_GET_SIZE(pieces) > 0);
; 1499 :     s = PyUnicode_FromString("{");

  001b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01HCONENDN@?$HL?$AA@
  001b9	e8 00 00 00 00	 call	 PyUnicode_FromString
  001be	48 89 45 28	 mov	 QWORD PTR s$[rbp-96], rax

; 1500 :     if (s == NULL)

  001c2	48 85 c0	 test	 rax, rax
  001c5	0f 84 9a 00 00
	00		 je	 $LN62@dict_repr

; 1501 :         goto Done;
; 1502 :     temp = PyList_GET_ITEM(pieces, 0);

  001cb	48 8b 46 70	 mov	 rax, QWORD PTR [rsi+112]

; 1503 :     PyUnicode_AppendAndDel(&s, temp);

  001cf	48 8d 4d 28	 lea	 rcx, QWORD PTR s$[rbp-96]
  001d3	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  001d6	48 89 55 30	 mov	 QWORD PTR temp$[rbp-96], rdx
  001da	e8 00 00 00 00	 call	 PyUnicode_AppendAndDel

; 1504 :     PyList_SET_ITEM(pieces, 0, s);

  001df	4c 8b 5e 70	 mov	 r11, QWORD PTR [rsi+112]
  001e3	48 8b 45 28	 mov	 rax, QWORD PTR s$[rbp-96]
  001e7	49 89 03	 mov	 QWORD PTR [r11], rax

; 1505 :     if (s == NULL)

  001ea	4c 39 75 28	 cmp	 QWORD PTR s$[rbp-96], r14
  001ee	74 75		 je	 SHORT $LN62@dict_repr

; 1506 :         goto Done;
; 1507 : 
; 1508 :     s = PyUnicode_FromString("}");

  001f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01CELHOKLL@?$HN?$AA@
  001f7	e8 00 00 00 00	 call	 PyUnicode_FromString
  001fc	48 89 45 28	 mov	 QWORD PTR s$[rbp-96], rax

; 1509 :     if (s == NULL)

  00200	48 85 c0	 test	 rax, rax
  00203	74 60		 je	 SHORT $LN62@dict_repr

; 1510 :         goto Done;
; 1511 :     temp = PyList_GET_ITEM(pieces, PyList_GET_SIZE(pieces) - 1);

  00205	48 8b 4e 70	 mov	 rcx, QWORD PTR [rsi+112]
  00209	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  0020d	48 8b 54 d1 f8	 mov	 rdx, QWORD PTR [rcx+rdx*8-8]

; 1512 :     PyUnicode_AppendAndDel(&temp, s);

  00212	48 8d 4d 30	 lea	 rcx, QWORD PTR temp$[rbp-96]
  00216	48 89 55 30	 mov	 QWORD PTR temp$[rbp-96], rdx
  0021a	48 8b d0	 mov	 rdx, rax
  0021d	e8 00 00 00 00	 call	 PyUnicode_AppendAndDel

; 1513 :     PyList_SET_ITEM(pieces, PyList_GET_SIZE(pieces) - 1, temp);

  00222	4c 8b 5e 60	 mov	 r11, QWORD PTR [rsi+96]
  00226	48 8b 4e 70	 mov	 rcx, QWORD PTR [rsi+112]
  0022a	48 8b 45 30	 mov	 rax, QWORD PTR temp$[rbp-96]
  0022e	4a 89 44 d9 f8	 mov	 QWORD PTR [rcx+r11*8-8], rax

; 1514 :     if (temp == NULL)

  00233	4c 39 75 30	 cmp	 QWORD PTR temp$[rbp-96], r14
  00237	74 2c		 je	 SHORT $LN62@dict_repr

; 1515 :         goto Done;
; 1516 : 
; 1517 :     /* Paste them all together with ", " between. */
; 1518 :     s = PyUnicode_FromString(", ");

  00239	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02KEGNLNML@?0?5?$AA@
  00240	e8 00 00 00 00	 call	 PyUnicode_FromString
  00245	48 89 45 28	 mov	 QWORD PTR s$[rbp-96], rax

; 1519 :     if (s == NULL)

  00249	48 85 c0	 test	 rax, rax
  0024c	74 17		 je	 SHORT $LN62@dict_repr

; 1520 :         goto Done;
; 1521 :     result = PyUnicode_Join(s, pieces);

  0024e	48 8b d6	 mov	 rdx, rsi
  00251	48 8b c8	 mov	 rcx, rax
  00254	e8 00 00 00 00	 call	 PyUnicode_Join

; 1522 :     Py_DECREF(s);

  00259	48 8b 4d 28	 mov	 rcx, QWORD PTR s$[rbp-96]
  0025d	4c 8b f0	 mov	 r14, rax
  00260	e8 00 00 00 00	 call	 _Py_DecRef
$LN62@dict_repr:
  00265	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  0026a	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
$Done$21242:

; 1523 : 
; 1524 : Done:
; 1525 :     Py_XDECREF(pieces);

  0026f	e8 00 00 00 00	 call	 _Py_PXCTX
  00274	85 c0		 test	 eax, eax
  00276	75 5c		 jne	 SHORT $LN7@dict_repr
  00278	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  0027c	a8 20		 test	 al, 32			; 00000020H
  0027e	75 4c		 jne	 SHORT $LN38@dict_repr
  00280	84 c0		 test	 al, al
  00282	78 48		 js	 SHORT $LN38@dict_repr
  00284	a8 02		 test	 al, 2
  00286	75 4c		 jne	 SHORT $LN7@dict_repr
  00288	48 ff 4e 50	 dec	 QWORD PTR [rsi+80]
  0028c	75 46		 jne	 SHORT $LN7@dict_repr
  0028e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00295	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0029c	4c 8b ce	 mov	 r9, rsi
  0029f	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  002a5	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002ad	e8 00 00 00 00	 call	 _PyParallel_Guard
  002b2	48 8b ce	 mov	 rcx, rsi
  002b5	85 c0		 test	 eax, eax
  002b7	74 07		 je	 SHORT $LN43@dict_repr
  002b9	e8 00 00 00 00	 call	 _Px_Dealloc
  002be	eb 14		 jmp	 SHORT $LN7@dict_repr
$LN43@dict_repr:
  002c0	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  002c4	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  002ca	eb 08		 jmp	 SHORT $LN7@dict_repr
$LN38@dict_repr:
  002cc	48 8b ce	 mov	 rcx, rsi
  002cf	e8 00 00 00 00	 call	 Px_DecRef
$LN7@dict_repr:

; 1526 :     Py_XDECREF(colon);

  002d4	4d 85 e4	 test	 r12, r12
  002d7	74 68		 je	 SHORT $LN60@dict_repr
  002d9	e8 00 00 00 00	 call	 _Py_PXCTX
  002de	85 c0		 test	 eax, eax
  002e0	75 5f		 jne	 SHORT $LN60@dict_repr
  002e2	49 8b 44 24 20	 mov	 rax, QWORD PTR [r12+32]
  002e7	a8 20		 test	 al, 32			; 00000020H
  002e9	75 4e		 jne	 SHORT $LN49@dict_repr
  002eb	84 c0		 test	 al, al
  002ed	78 4a		 js	 SHORT $LN49@dict_repr
  002ef	a8 02		 test	 al, 2
  002f1	75 4e		 jne	 SHORT $LN60@dict_repr
  002f3	49 ff 4c 24 50	 dec	 QWORD PTR [r12+80]
  002f8	75 47		 jne	 SHORT $LN60@dict_repr
  002fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00301	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00308	4d 8b cc	 mov	 r9, r12
  0030b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00311	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00319	e8 00 00 00 00	 call	 _PyParallel_Guard
  0031e	49 8b cc	 mov	 rcx, r12
  00321	85 c0		 test	 eax, eax
  00323	74 07		 je	 SHORT $LN54@dict_repr
  00325	e8 00 00 00 00	 call	 _Px_Dealloc
  0032a	eb 15		 jmp	 SHORT $LN60@dict_repr
$LN54@dict_repr:
  0032c	49 8b 44 24 58	 mov	 rax, QWORD PTR [r12+88]
  00331	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00337	eb 08		 jmp	 SHORT $LN60@dict_repr
$LN49@dict_repr:
  00339	49 8b cc	 mov	 rcx, r12
  0033c	e8 00 00 00 00	 call	 Px_DecRef
$LN60@dict_repr:
  00341	4c 8b 64 24 40	 mov	 r12, QWORD PTR [rsp+64]
$LN59@dict_repr:
  00346	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
$LN3@dict_repr:

; 1527 :     Py_ReprLeave((PyObject *)mp);

  0034b	49 8b cd	 mov	 rcx, r13
  0034e	e8 00 00 00 00	 call	 Py_ReprLeave
$LN24@dict_repr:

; 1528 :     return result;

  00353	49 8b c6	 mov	 rax, r14

; 1529 : }

  00356	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0035a	41 5e		 pop	 r14
  0035c	41 5d		 pop	 r13
  0035e	5d		 pop	 rbp
  0035f	c3		 ret	 0
dict_repr ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT dict_length
_TEXT	SEGMENT
mp$ = 8
dict_length PROC					; COMDAT

; 1534 :     return mp->ma_used;

  00000	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]

; 1535 : }

  00004	c3		 ret	 0
dict_length ENDP
_TEXT	ENDS
EXTRN	PyObject_CallFunctionObjArgs:PROC
EXTRN	_PyObject_LookupSpecial:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_subscript DD imagerel dict_subscript
	DD	imagerel dict_subscript+97
	DD	imagerel $unwind$dict_subscript
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$dict_subscript DD imagerel dict_subscript+97
	DD	imagerel dict_subscript+217
	DD	imagerel $chain$0$dict_subscript
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$dict_subscript DD imagerel dict_subscript+217
	DD	imagerel dict_subscript+253
	DD	imagerel $chain$2$dict_subscript
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$dict_subscript DD imagerel dict_subscript+253
	DD	imagerel dict_subscript+280
	DD	imagerel $chain$4$dict_subscript
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$dict_subscript DD 020021H
	DD	067400H
	DD	imagerel dict_subscript
	DD	imagerel dict_subscript+97
	DD	imagerel $unwind$dict_subscript
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$dict_subscript DD 020021H
	DD	067400H
	DD	imagerel dict_subscript
	DD	imagerel dict_subscript+97
	DD	imagerel $unwind$dict_subscript
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$dict_subscript DD 020521H
	DD	067405H
	DD	imagerel dict_subscript
	DD	imagerel dict_subscript+97
	DD	imagerel $unwind$dict_subscript
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_subscript DD 040a01H
	DD	08340aH
	DD	06006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT dict_subscript
_TEXT	SEGMENT
mp$ = 48
value_addr$ = 56
key$ = 56
dict_subscript PROC					; COMDAT

; 1539 : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1540 :     PyObject *v;
; 1541 :     Py_hash_t hash;
; 1542 :     PyDictKeyEntry *ep;
; 1543 :     PyObject **value_addr;
; 1544 : 
; 1545 :     if (!PyUnicode_CheckExact(key) ||
; 1546 :         (hash = ((PyASCIIObject *) key)->hash) == -1) {

  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  00011	48 8b da	 mov	 rbx, rdx
  00014	48 8b f1	 mov	 rsi, rcx
  00017	48 39 42 58	 cmp	 QWORD PTR [rdx+88], rax
  0001b	75 0a		 jne	 SHORT $LN9@dict_subsc
  0001d	4c 8b 42 68	 mov	 r8, QWORD PTR [rdx+104]
  00021	49 83 f8 ff	 cmp	 r8, -1
  00025	75 1e		 jne	 SHORT $LN8@dict_subsc
$LN9@dict_subsc:

; 1547 :         hash = PyObject_Hash(key);

  00027	48 8b ca	 mov	 rcx, rdx
  0002a	e8 00 00 00 00	 call	 PyObject_Hash
  0002f	4c 8b c0	 mov	 r8, rax

; 1548 :         if (hash == -1)

  00032	48 83 f8 ff	 cmp	 rax, -1
  00036	75 0d		 jne	 SHORT $LN8@dict_subsc
$LN15@dict_subsc:

; 1549 :             return NULL;

  00038	33 c0		 xor	 eax, eax

; 1575 :     return v;
; 1576 : }

  0003a	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0003f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00043	5e		 pop	 rsi
  00044	c3		 ret	 0
$LN8@dict_subsc:

; 1550 :     }
; 1551 :     ep = (mp->ma_keys->dk_lookup)(mp, key, hash, &value_addr);

  00045	48 8b 46 68	 mov	 rax, QWORD PTR [rsi+104]
  00049	4c 8d 4c 24 38	 lea	 r9, QWORD PTR value_addr$[rsp]
  0004e	48 8b d3	 mov	 rdx, rbx
  00051	48 8b ce	 mov	 rcx, rsi
  00054	ff 50 10	 call	 QWORD PTR [rax+16]

; 1552 :     if (ep == NULL)

  00057	48 85 c0	 test	 rax, rax

; 1553 :         return NULL;

  0005a	74 dc		 je	 SHORT $LN15@dict_subsc

; 1554 :     v = *value_addr;

  0005c	48 8b 44 24 38	 mov	 rax, QWORD PTR value_addr$[rsp]
  00061	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  00066	48 8b 38	 mov	 rdi, QWORD PTR [rax]

; 1555 :     if (v == NULL) {

  00069	48 85 ff	 test	 rdi, rdi
  0006c	0f 85 8b 00 00
	00		 jne	 $LN6@dict_subsc

; 1556 :         if (!PyDict_CheckExact(mp)) {

  00072	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  00079	48 39 46 58	 cmp	 QWORD PTR [rsi+88], rax
  0007d	74 64		 je	 SHORT $LN2@dict_subsc
  0007f	48 39 46 38	 cmp	 QWORD PTR [rsi+56], rax
  00083	74 5e		 je	 SHORT $LN2@dict_subsc

; 1557 :             /* Look up __missing__ method if we're a subclass. */
; 1558 :             PyObject *missing, *res;
; 1559 :             _Py_IDENTIFIER(__missing__);
; 1560 :             missing = _PyObject_LookupSpecial((PyObject *)mp, &PyId___missing__);

  00085	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0008b	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00094	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId___missing__@?4??dict_subscript@@9@9
  00099	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  0009d	48 8b ce	 mov	 rcx, rsi
  000a0	e8 00 00 00 00	 call	 _PyObject_LookupSpecial
  000a5	48 8b f8	 mov	 rdi, rax

; 1561 :             if (missing != NULL) {

  000a8	48 85 c0	 test	 rax, rax
  000ab	74 2c		 je	 SHORT $LN4@dict_subsc

; 1562 :                 res = PyObject_CallFunctionObjArgs(missing,
; 1563 :                                                    key, NULL);

  000ad	45 33 c0	 xor	 r8d, r8d
  000b0	48 8b d3	 mov	 rdx, rbx
  000b3	48 8b c8	 mov	 rcx, rax
  000b6	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs

; 1564 :                 Py_DECREF(missing);

  000bb	48 8b cf	 mov	 rcx, rdi
  000be	48 8b d8	 mov	 rbx, rax
  000c1	e8 00 00 00 00	 call	 _Py_DecRef
  000c6	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 1565 :                 return res;

  000cb	48 8b c3	 mov	 rax, rbx

; 1575 :     return v;
; 1576 : }

  000ce	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000d3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d7	5e		 pop	 rsi
  000d8	c3		 ret	 0
$LN4@dict_subsc:

; 1566 :             }
; 1567 :             else if (PyErr_Occurred())

  000d9	e8 00 00 00 00	 call	 PyErr_Occurred
  000de	48 85 c0	 test	 rax, rax

; 1568 :                 return NULL;

  000e1	75 08		 jne	 SHORT $LN14@dict_subsc
$LN2@dict_subsc:

; 1569 :         }
; 1570 :         set_key_error(key);

  000e3	48 8b cb	 mov	 rcx, rbx
  000e6	e8 00 00 00 00	 call	 set_key_error
$LN14@dict_subsc:

; 1571 :         return NULL;

  000eb	33 c0		 xor	 eax, eax
  000ed	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 1575 :     return v;
; 1576 : }

  000f2	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000f7	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000fb	5e		 pop	 rsi
  000fc	c3		 ret	 0
$LN6@dict_subsc:

; 1572 :     }
; 1573 :     else
; 1574 :         Py_INCREF(v);

  000fd	48 8b cf	 mov	 rcx, rdi
  00100	e8 00 00 00 00	 call	 _Py_IncRef

; 1575 :     return v;
; 1576 : }

  00105	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0010a	48 8b c7	 mov	 rax, rdi
  0010d	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
  00112	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00116	5e		 pop	 rsi
  00117	c3		 ret	 0
dict_subscript ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$dict_keys DD imagerel dict_keys
	DD	imagerel dict_keys+235
	DD	imagerel $unwind$dict_keys
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$dict_keys DD imagerel dict_keys+235
	DD	imagerel dict_keys+346
	DD	imagerel $chain$3$dict_keys
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$dict_keys DD imagerel dict_keys+346
	DD	imagerel dict_keys+372
	DD	imagerel $chain$4$dict_keys
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$dict_keys DD 021H
	DD	imagerel dict_keys
	DD	imagerel dict_keys+235
	DD	imagerel $unwind$dict_keys
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$dict_keys DD 020521H
	DD	0cd405H
	DD	imagerel dict_keys
	DD	imagerel dict_keys+235
	DD	imagerel $unwind$dict_keys
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_keys DD 0acf01H
	DD	0de4cfH
	DD	0bc4c6H
	DD	0a54b9H
	DD	070045208H
	DD	030026003H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\dictobject.c
xdata	ENDS
;	COMDAT dict_keys
_TEXT	SEGMENT
mp$ = 80
dict_keys PROC						; COMDAT

; 1595 : {

  00000	40 53		 push	 rbx
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1596 :     register PyObject *v;
; 1597 :     register Py_ssize_t i, j;
; 1598 :     PyDictKeyEntry *ep;
; 1599 :     Py_ssize_t size, n, offset;
; 1600 :     PyObject **value_ptr;
; 1601 : 
; 1602 :   again:
; 1603 :     n = mp->ma_used;

  00008	48 8b 79 60	 mov	 rdi, QWORD PTR [rcx+96]
  0000c	48 8b f1	 mov	 rsi, rcx

; 1604 :     v = PyList_New(n);

  0000f	48 8b cf	 mov	 rcx, rdi
  00012	e8 00 00 00 00	 call	 PyList_New
  00017	48 8b d8	 mov	 rbx, rax

; 1605 :     if (v == NULL)

  0001a	48 85 c0	 test	 rax, rax
  0001d	0f 84 87 00 00
	00		 je	 $LN28@dict_keys
$again$21366:

; 1607 :     if (n != mp->ma_used) {

  00023	48 3b 7e 60	 cmp	 rdi, QWORD PTR [rsi+96]
  00027	0f 84 87 00 00
	00		 je	 $LN7@dict_keys

; 1608 :         /* Durnit.  The allocations caused the dict to resize.
; 1609 :          * Just start over, this shouldn't normally happen.
; 1610 :          */
; 1611 :         Py_DECREF(v);

  0002d	e8 00 00 00 00	 call	 _Py_PXCTX
  00032	85 c0		 test	 eax, eax
  00034	75 5c		 jne	 SHORT $LN21@dict_keys
  00036	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0003a	a8 20		 test	 al, 32			; 00000020H
  0003c	75 4c		 jne	 SHORT $LN15@dict_keys
  0003e	84 c0		 test	 al, al
  00040	78 48		 js	 SHORT $LN15@dict_keys
  00042	a8 02		 test	 al, 2
  00044	75 4c		 jne	 SHORT $LN21@dict_keys
  00046	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0004a	75 46		 jne	 SHORT $LN21@dict_keys
  0004c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00053	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0005a	4c 8b cb	 mov	 r9, rbx
  0005d	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00063	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0006b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00070	48 8b cb	 mov	 rcx, rbx
  00073	85 c0		 test	 eax, eax
  00075	74 07		 je	 SHORT $LN20@dict_keys
  00077	e8 00 00 00 00	 call	 _Px_Dealloc
  0007c	eb 14		 jmp	 SHORT $LN21@dict_keys
$LN20@dict_keys:
  0007e	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00082	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00088	eb 08		 jmp	 SHORT $LN21@dict_keys
$LN15@dict_keys:
  0008a	48 8b cb	 mov	 rcx, rbx
  0008d	e8 00 00 00 00	 call	 Px_DecRef
$LN21@dict_keys:

; 1604 :     v = PyList_New(n);

  00092	48 8b 7e 60	 mov	 rdi, QWORD PTR [rsi+96]
  00096	48 8b cf	 mov	 rcx, rdi
  00099	e8 00 00 00 00	 call	 PyList_New
  0009e	48 8b d8	 mov	 rbx, rax

; 1605 :     if (v == NULL)

  000a1	48 85 c0	 test	 rax, rax
  000a4	0f 85 79 ff ff
	ff		 jne	 $again$21366
$LN28@dict_keys:

; 1606 :         return NULL;

  000aa	33 c0		 xor	 eax, eax

; 1635 : }

  000ac	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b0	5f		 pop	 rdi
  000b1	5e		 pop	 rsi
  000b2	5b		 pop	 rbx
  000b3	c3		 ret	 0
$LN7@dict_keys:
  000b4	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp

; 1612 :         goto again;
; 1613 :     }
; 1614 :     ep = &mp->ma_keys->dk_entries[0];

  000b9	48 8b 6e 68	 mov	 rbp, QWORD PTR [rsi+104]

; 1615 :     size = DK_SIZE(mp->ma_keys);
; 1616 :     if (mp->ma_values) {

  000bd	48 8b 76 70	 mov	 rsi, QWORD PTR [rsi+112]
  000c1	4c 89 64 24 58	 mov	 QWORD PTR [rsp+88], r12
  000c6	4c 8b 65 08	 mov	 r12, QWORD PTR [rbp+8]
  000ca	4c 89 74 24 68	 mov	 QWORD PTR [rsp+104], r14
  000cf	48 85 f6	 test	 rsi, rsi
  000d2	74 08		 je	 SHORT $LN6@dict_keys

; 1617 :         value_ptr = mp->ma_values;
; 1618 :         offset = sizeof(PyObject *);

  000d4	41 be 08 00 00
	00		 mov	 r14d, 8

; 1619 :     }
; 1620 :     else {

  000da	eb 0a		 jmp	 SHORT $LN5@dict_keys
$LN6@dict_keys:

; 1621 :         value_ptr = &ep[0].me_value;

  000dc	48 8d 75 30	 lea	 rsi, QWORD PTR [rbp+48]

; 1622 :         offset = sizeof(PyDictKeyEntry);

  000e0	41 be 18 00 00
	00		 mov	 r14d, 24
$LN5@dict_keys:

; 1623 :     }
; 1624 :     for (i = 0, j = 0; i < size; i++) {

  000e6	4d 85 e4	 test	 r12, r12
  000e9	7e 6f		 jle	 SHORT $LN2@dict_keys
  000eb	4c 89 6c 24 60	 mov	 QWORD PTR [rsp+96], r13
  000f0	45 33 ed	 xor	 r13d, r13d
  000f3	48 83 c5 28	 add	 rbp, 40			; 00000028H
$LL4@dict_keys:

; 1625 :         if (*value_ptr != NULL) {

  000f7	48 83 3e 00	 cmp	 QWORD PTR [rsi], 0
  000fb	74 4c		 je	 SHORT $LN1@dict_keys

; 1626 :             PyObject *key = ep[i].me_key;

  000fd	48 8b 7d 00	 mov	 rdi, QWORD PTR [rbp]

; 1627 :             Py_INCREF(key);

  00101	e8 00 00 00 00	 call	 _Py_PXCTX
  00106	85 c0		 test	 eax, eax
  00108	75 32		 jne	 SHORT $LN23@dict_keys
  0010a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00111	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00118	4c 8b cf	 mov	 r9, rdi
  0011b	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00121	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00129	e8 00 00 00 00	 call	 _PyParallel_Guard
  0012e	85 c0		 test	 eax, eax
  00130	75 06		 jne	 SHORT $LN22@dict_keys
  00132	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  00136	74 04		 je	 SHORT $LN23@dict_keys
$LN22@dict_keys:
  00138	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN23@dict_keys:

; 1628 :             PyList_SET_ITEM(v, j, key);

  0013c	48 8b 43 70	 mov	 rax, QWORD PTR [rbx+112]

; 1629 :             j++;

  00140	49 83 c5 08	 add	 r13, 8
  00144	49 89 7c 05 f8	 mov	 QWORD PTR [r13+rax-8], rdi
$LN1@dict_keys:

; 1630 :         }
; 1631 :         value_ptr = (PyObject **)(((char *)value_ptr) + offset);

  00149	49 03 f6	 add	 rsi, r14
  0014c	48 83 c5 18	 add	 rbp, 24
  00150	49 ff cc	 dec	 r12
  00153	75 a2		 jne	 SHORT $LL4@dict_keys
  00155	4c 8b 6c 24 60	 mov	 r13, QWORD PTR [rsp+96]
$LN2@dict_keys:
  0015a	4c 8b 74 24 68	 mov	 r14, QWORD PTR [rsp+104]
  0015f	4c 8b 64 24 58	 mov	 r12, QWORD PTR [rsp+88]
  00164	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]

; 1632 :     }
; 1633 :     assert(j == n);
; 1634 :     return v;

  00169	48 8b c3	 mov	 rax, rbx

; 1635 : }

  0016c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00170	5f		 pop	 rdi
  00171	5e		 pop	 rsi
  00172	5b		 pop	 rbx
  00173	c3		 ret	 0
dict_keys ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$dict_values DD imagerel dict_values
	DD	imagerel dict_values+230
	DD	imagerel $unwind$dict_values
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$dict_values DD imagerel dict_values+230
	DD	imagerel dict_values+333
	DD	imagerel $chain$2$dict_values
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$dict_values DD imagerel dict_values+333
	DD	imagerel dict_values+354
	DD	imagerel $chain$3$dict_values
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$dict_values DD 021H
	DD	imagerel dict_values
	DD	imagerel dict_values+230
	DD	imagerel $unwind$dict_values
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$dict_values DD 020521H
	DD	0bc405H
	DD	imagerel dict_values
	DD	imagerel dict_values+230
	DD	imagerel $unwind$dict_values
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_values DD 08ca01H
	DD	0cd4caH
	DD	0a54c1H
	DD	070045208H
	DD	030026003H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\dictobject.c
xdata	ENDS
;	COMDAT dict_values
_TEXT	SEGMENT
mp$ = 80
dict_values PROC					; COMDAT

; 1639 : {

  00000	40 53		 push	 rbx
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1640 :     register PyObject *v;
; 1641 :     register Py_ssize_t i, j;
; 1642 :     Py_ssize_t size, n, offset;
; 1643 :     PyObject **value_ptr;
; 1644 : 
; 1645 :   again:
; 1646 :     n = mp->ma_used;

  00008	48 8b 79 60	 mov	 rdi, QWORD PTR [rcx+96]
  0000c	48 8b f1	 mov	 rsi, rcx

; 1647 :     v = PyList_New(n);

  0000f	48 8b cf	 mov	 rcx, rdi
  00012	e8 00 00 00 00	 call	 PyList_New
  00017	48 8b d8	 mov	 rbx, rax

; 1648 :     if (v == NULL)

  0001a	48 85 c0	 test	 rax, rax
  0001d	0f 84 87 00 00
	00		 je	 $LN28@dict_value
$again$21398:

; 1650 :     if (n != mp->ma_used) {

  00023	48 3b 7e 60	 cmp	 rdi, QWORD PTR [rsi+96]
  00027	0f 84 87 00 00
	00		 je	 $LN7@dict_value

; 1651 :         /* Durnit.  The allocations caused the dict to resize.
; 1652 :          * Just start over, this shouldn't normally happen.
; 1653 :          */
; 1654 :         Py_DECREF(v);

  0002d	e8 00 00 00 00	 call	 _Py_PXCTX
  00032	85 c0		 test	 eax, eax
  00034	75 5c		 jne	 SHORT $LN21@dict_value
  00036	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0003a	a8 20		 test	 al, 32			; 00000020H
  0003c	75 4c		 jne	 SHORT $LN15@dict_value
  0003e	84 c0		 test	 al, al
  00040	78 48		 js	 SHORT $LN15@dict_value
  00042	a8 02		 test	 al, 2
  00044	75 4c		 jne	 SHORT $LN21@dict_value
  00046	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0004a	75 46		 jne	 SHORT $LN21@dict_value
  0004c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00053	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0005a	4c 8b cb	 mov	 r9, rbx
  0005d	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00063	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0006b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00070	48 8b cb	 mov	 rcx, rbx
  00073	85 c0		 test	 eax, eax
  00075	74 07		 je	 SHORT $LN20@dict_value
  00077	e8 00 00 00 00	 call	 _Px_Dealloc
  0007c	eb 14		 jmp	 SHORT $LN21@dict_value
$LN20@dict_value:
  0007e	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00082	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00088	eb 08		 jmp	 SHORT $LN21@dict_value
$LN15@dict_value:
  0008a	48 8b cb	 mov	 rcx, rbx
  0008d	e8 00 00 00 00	 call	 Px_DecRef
$LN21@dict_value:

; 1647 :     v = PyList_New(n);

  00092	48 8b 7e 60	 mov	 rdi, QWORD PTR [rsi+96]
  00096	48 8b cf	 mov	 rcx, rdi
  00099	e8 00 00 00 00	 call	 PyList_New
  0009e	48 8b d8	 mov	 rbx, rax

; 1648 :     if (v == NULL)

  000a1	48 85 c0	 test	 rax, rax
  000a4	0f 85 79 ff ff
	ff		 jne	 $again$21398
$LN28@dict_value:

; 1649 :         return NULL;

  000aa	33 c0		 xor	 eax, eax

; 1677 : }

  000ac	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b0	5f		 pop	 rdi
  000b1	5e		 pop	 rsi
  000b2	5b		 pop	 rbx
  000b3	c3		 ret	 0
$LN7@dict_value:

; 1655 :         goto again;
; 1656 :     }
; 1657 :     size = DK_SIZE(mp->ma_keys);

  000b4	48 8b 46 68	 mov	 rax, QWORD PTR [rsi+104]

; 1658 :     if (mp->ma_values) {

  000b8	48 8b 76 70	 mov	 rsi, QWORD PTR [rsi+112]
  000bc	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp
  000c1	48 8b 68 08	 mov	 rbp, QWORD PTR [rax+8]
  000c5	4c 89 6c 24 60	 mov	 QWORD PTR [rsp+96], r13
  000ca	48 85 f6	 test	 rsi, rsi
  000cd	74 08		 je	 SHORT $LN6@dict_value

; 1659 :         value_ptr = mp->ma_values;
; 1660 :         offset = sizeof(PyObject *);

  000cf	41 bd 08 00 00
	00		 mov	 r13d, 8

; 1661 :     }
; 1662 :     else {

  000d5	eb 0a		 jmp	 SHORT $LN5@dict_value
$LN6@dict_value:

; 1663 :         value_ptr = &mp->ma_keys->dk_entries[0].me_value;

  000d7	48 8d 70 30	 lea	 rsi, QWORD PTR [rax+48]

; 1664 :         offset = sizeof(PyDictKeyEntry);

  000db	41 bd 18 00 00
	00		 mov	 r13d, 24
$LN5@dict_value:

; 1665 :     }
; 1666 :     for (i = 0, j = 0; i < size; i++) {

  000e1	48 85 ed	 test	 rbp, rbp
  000e4	7e 67		 jle	 SHORT $LN2@dict_value
  000e6	4c 89 64 24 58	 mov	 QWORD PTR [rsp+88], r12
  000eb	45 33 e4	 xor	 r12d, r12d
  000ee	66 90		 npad	 2
$LL4@dict_value:

; 1667 :         PyObject *value = *value_ptr;

  000f0	48 8b 3e	 mov	 rdi, QWORD PTR [rsi]

; 1668 :         value_ptr = (PyObject **)(((char *)value_ptr) + offset);

  000f3	49 03 f5	 add	 rsi, r13

; 1669 :         if (value != NULL) {

  000f6	48 85 ff	 test	 rdi, rdi
  000f9	74 48		 je	 SHORT $LN3@dict_value

; 1670 :             Py_INCREF(value);

  000fb	e8 00 00 00 00	 call	 _Py_PXCTX
  00100	85 c0		 test	 eax, eax
  00102	75 32		 jne	 SHORT $LN23@dict_value
  00104	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0010b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00112	4c 8b cf	 mov	 r9, rdi
  00115	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0011b	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00123	e8 00 00 00 00	 call	 _PyParallel_Guard
  00128	85 c0		 test	 eax, eax
  0012a	75 06		 jne	 SHORT $LN22@dict_value
  0012c	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  00130	74 04		 je	 SHORT $LN23@dict_value
$LN22@dict_value:
  00132	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN23@dict_value:

; 1671 :             PyList_SET_ITEM(v, j, value);

  00136	48 8b 43 70	 mov	 rax, QWORD PTR [rbx+112]

; 1672 :             j++;

  0013a	49 83 c4 08	 add	 r12, 8
  0013e	49 89 7c 04 f8	 mov	 QWORD PTR [r12+rax-8], rdi
$LN3@dict_value:

; 1665 :     }
; 1666 :     for (i = 0, j = 0; i < size; i++) {

  00143	48 ff cd	 dec	 rbp
  00146	75 a8		 jne	 SHORT $LL4@dict_value
  00148	4c 8b 64 24 58	 mov	 r12, QWORD PTR [rsp+88]
$LN2@dict_value:
  0014d	4c 8b 6c 24 60	 mov	 r13, QWORD PTR [rsp+96]
  00152	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]

; 1673 :         }
; 1674 :     }
; 1675 :     assert(j == n);
; 1676 :     return v;

  00157	48 8b c3	 mov	 rax, rbx

; 1677 : }

  0015a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0015e	5f		 pop	 rdi
  0015f	5e		 pop	 rsi
  00160	5b		 pop	 rbx
  00161	c3		 ret	 0
dict_values ENDP
_TEXT	ENDS
EXTRN	PyTuple_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$dict_items DD imagerel dict_items
	DD	imagerel dict_items+378
	DD	imagerel $unwind$dict_items
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$dict_items DD imagerel dict_items+378
	DD	imagerel dict_items+424
	DD	imagerel $chain$1$dict_items
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$dict_items DD imagerel dict_items+424
	DD	imagerel dict_items+639
	DD	imagerel $chain$3$dict_items
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$dict_items DD imagerel dict_items+639
	DD	imagerel dict_items+661
	DD	imagerel $chain$4$dict_items
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$dict_items DD 021H
	DD	imagerel dict_items+378
	DD	imagerel dict_items+424
	DD	imagerel $chain$1$dict_items
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$dict_items DD 040e21H
	DD	0fe40eH
	DD	0dc405H
	DD	imagerel dict_items+378
	DD	imagerel dict_items+424
	DD	imagerel $chain$1$dict_items
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$dict_items DD 040e21H
	DD	06f40eH
	DD	0ed405H
	DD	imagerel dict_items
	DD	imagerel dict_items+378
	DD	imagerel $unwind$dict_items
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_items DD 050901H
	DD	070056209H
	DD	050036004H
	DD	03002H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\dictobject.c
xdata	ENDS
;	COMDAT dict_items
_TEXT	SEGMENT
tv386 = 96
mp$ = 96
dict_items PROC						; COMDAT

; 1681 : {

  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	56		 push	 rsi
  00004	57		 push	 rdi
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1682 :     register PyObject *v;
; 1683 :     register Py_ssize_t i, j, n;
; 1684 :     Py_ssize_t size, offset;
; 1685 :     PyObject *item, *key;
; 1686 :     PyDictKeyEntry *ep;
; 1687 :     PyObject **value_ptr;
; 1688 : 
; 1689 :     /* Preallocate the list of tuples, to avoid allocations during
; 1690 :      * the loop over the items, which could trigger GC, which
; 1691 :      * could resize the dict. :-(
; 1692 :      */
; 1693 :   again:
; 1694 :     n = mp->ma_used;

  00009	48 8b 71 60	 mov	 rsi, QWORD PTR [rcx+96]
  0000d	48 8b e9	 mov	 rbp, rcx

; 1695 :     v = PyList_New(n);

  00010	48 8b ce	 mov	 rcx, rsi
  00013	e8 00 00 00 00	 call	 PyList_New
  00018	48 8b d8	 mov	 rbx, rax

; 1696 :     if (v == NULL)

  0001b	48 85 c0	 test	 rax, rax
  0001e	0f 84 1b 01 00
	00		 je	 $LN49@dict_items
  00024	33 c9		 xor	 ecx, ecx
  00026	48 89 4c 24 60	 mov	 QWORD PTR tv386[rsp], rcx
  0002b	0f 1f 44 00 00	 npad	 5
$again$21433:

; 1698 :     for (i = 0; i < n; i++) {

  00030	48 8b f9	 mov	 rdi, rcx
  00033	48 85 f6	 test	 rsi, rsi
  00036	7e 2e		 jle	 SHORT $LN9@dict_items
  00038	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL11@dict_items:

; 1699 :         item = PyTuple_New(2);

  00040	b9 02 00 00 00	 mov	 ecx, 2
  00045	e8 00 00 00 00	 call	 PyTuple_New

; 1700 :         if (item == NULL) {

  0004a	48 85 c0	 test	 rax, rax
  0004d	0f 84 9d 00 00
	00		 je	 $LN48@dict_items

; 1702 :             return NULL;
; 1703 :         }
; 1704 :         PyList_SET_ITEM(v, i, item);

  00053	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00057	48 ff c7	 inc	 rdi
  0005a	48 89 44 f9 f8	 mov	 QWORD PTR [rcx+rdi*8-8], rax
  0005f	48 3b fe	 cmp	 rdi, rsi
  00062	7c dc		 jl	 SHORT $LL11@dict_items
  00064	33 c9		 xor	 ecx, ecx
$LN9@dict_items:

; 1705 :     }
; 1706 :     if (n != mp->ma_used) {

  00066	48 3b 75 60	 cmp	 rsi, QWORD PTR [rbp+96]
  0006a	0f 84 02 01 00
	00		 je	 $LN7@dict_items

; 1707 :         /* Durnit.  The allocations caused the dict to resize.
; 1708 :          * Just start over, this shouldn't normally happen.
; 1709 :          */
; 1710 :         Py_DECREF(v);

  00070	e8 00 00 00 00	 call	 _Py_PXCTX
  00075	85 c0		 test	 eax, eax
  00077	75 5c		 jne	 SHORT $LN36@dict_items
  00079	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0007d	a8 20		 test	 al, 32			; 00000020H
  0007f	75 4c		 jne	 SHORT $LN30@dict_items
  00081	84 c0		 test	 al, al
  00083	78 48		 js	 SHORT $LN30@dict_items
  00085	a8 02		 test	 al, 2
  00087	75 4c		 jne	 SHORT $LN36@dict_items
  00089	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0008d	75 46		 jne	 SHORT $LN36@dict_items
  0008f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00096	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0009d	4c 8b cb	 mov	 r9, rbx
  000a0	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000a6	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ae	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b3	48 8b cb	 mov	 rcx, rbx
  000b6	85 c0		 test	 eax, eax
  000b8	74 07		 je	 SHORT $LN35@dict_items
  000ba	e8 00 00 00 00	 call	 _Px_Dealloc
  000bf	eb 14		 jmp	 SHORT $LN36@dict_items
$LN35@dict_items:
  000c1	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000c5	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000cb	eb 08		 jmp	 SHORT $LN36@dict_items
$LN30@dict_items:
  000cd	48 8b cb	 mov	 rcx, rbx
  000d0	e8 00 00 00 00	 call	 Px_DecRef
$LN36@dict_items:

; 1695 :     v = PyList_New(n);

  000d5	48 8b 75 60	 mov	 rsi, QWORD PTR [rbp+96]
  000d9	48 8b ce	 mov	 rcx, rsi
  000dc	e8 00 00 00 00	 call	 PyList_New
  000e1	48 8b d8	 mov	 rbx, rax

; 1696 :     if (v == NULL)

  000e4	48 85 c0	 test	 rax, rax
  000e7	74 56		 je	 SHORT $LN49@dict_items
  000e9	33 c9		 xor	 ecx, ecx
  000eb	e9 40 ff ff ff	 jmp	 $again$21433
$LN48@dict_items:

; 1701 :             Py_DECREF(v);

  000f0	e8 00 00 00 00	 call	 _Py_PXCTX
  000f5	85 c0		 test	 eax, eax
  000f7	75 46		 jne	 SHORT $LN49@dict_items
  000f9	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000fd	a8 20		 test	 al, 32			; 00000020H
  000ff	75 5e		 jne	 SHORT $LN19@dict_items
  00101	84 c0		 test	 al, al
  00103	78 5a		 js	 SHORT $LN19@dict_items
  00105	a8 02		 test	 al, 2
  00107	75 36		 jne	 SHORT $LN49@dict_items
  00109	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0010d	75 30		 jne	 SHORT $LN49@dict_items
  0010f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00116	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0011d	4c 8b cb	 mov	 r9, rbx
  00120	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00126	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0012e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00133	48 8b cb	 mov	 rcx, rbx
  00136	85 c0		 test	 eax, eax
  00138	74 10		 je	 SHORT $LN24@dict_items
  0013a	e8 00 00 00 00	 call	 _Px_Dealloc
$LN49@dict_items:

; 1697 :         return NULL;

  0013f	33 c0		 xor	 eax, eax

; 1739 : }

  00141	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00145	5f		 pop	 rdi
  00146	5e		 pop	 rsi
  00147	5d		 pop	 rbp
  00148	5b		 pop	 rbx
  00149	c3		 ret	 0

; 1701 :             Py_DECREF(v);

$LN24@dict_items:
  0014a	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0014e	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00154	33 c0		 xor	 eax, eax

; 1739 : }

  00156	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0015a	5f		 pop	 rdi
  0015b	5e		 pop	 rsi
  0015c	5d		 pop	 rbp
  0015d	5b		 pop	 rbx
  0015e	c3		 ret	 0

; 1701 :             Py_DECREF(v);

$LN19@dict_items:
  0015f	48 8b cb	 mov	 rcx, rbx
  00162	e8 00 00 00 00	 call	 Px_DecRef
  00167	33 c0		 xor	 eax, eax

; 1739 : }

  00169	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0016d	5f		 pop	 rdi
  0016e	5e		 pop	 rsi
  0016f	5d		 pop	 rbp
  00170	5b		 pop	 rbx
  00171	c3		 ret	 0
$LN7@dict_items:

; 1711 :         goto again;
; 1712 :     }
; 1713 :     /* Nothing we do below makes any function calls. */
; 1714 :     ep = mp->ma_keys->dk_entries;

  00172	48 8b 45 68	 mov	 rax, QWORD PTR [rbp+104]

; 1715 :     size = DK_SIZE(mp->ma_keys);
; 1716 :     if (mp->ma_values) {

  00176	48 8b 6d 70	 mov	 rbp, QWORD PTR [rbp+112]
  0017a	4c 89 6c 24 70	 mov	 QWORD PTR [rsp+112], r13
  0017f	4c 8b 68 08	 mov	 r13, QWORD PTR [rax+8]
  00183	4c 89 7c 24 30	 mov	 QWORD PTR [rsp+48], r15
  00188	48 85 ed	 test	 rbp, rbp
  0018b	74 08		 je	 SHORT $LN6@dict_items

; 1717 :         value_ptr = mp->ma_values;
; 1718 :         offset = sizeof(PyObject *);

  0018d	41 bf 08 00 00
	00		 mov	 r15d, 8

; 1719 :     }
; 1720 :     else {

  00193	eb 0a		 jmp	 SHORT $LN5@dict_items
$LN6@dict_items:

; 1721 :         value_ptr = &ep[0].me_value;

  00195	48 8d 68 30	 lea	 rbp, QWORD PTR [rax+48]

; 1722 :         offset = sizeof(PyDictKeyEntry);

  00199	41 bf 18 00 00
	00		 mov	 r15d, 24
$LN5@dict_items:

; 1723 :     }
; 1724 :     for (i = 0, j = 0; i < size; i++) {

  0019f	4d 85 ed	 test	 r13, r13
  001a2	0f 8e d7 00 00
	00		 jle	 $LN2@dict_items
  001a8	4c 89 64 24 68	 mov	 QWORD PTR [rsp+104], r12
  001ad	4c 8d 60 28	 lea	 r12, QWORD PTR [rax+40]
  001b1	4c 89 74 24 78	 mov	 QWORD PTR [rsp+120], r14
  001b6	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL4@dict_items:

; 1725 :         PyObject *value = *value_ptr;

  001c0	48 8b 7d 00	 mov	 rdi, QWORD PTR [rbp]

; 1726 :         value_ptr = (PyObject **)(((char *)value_ptr) + offset);

  001c4	49 03 ef	 add	 rbp, r15

; 1727 :         if (value != NULL) {

  001c7	48 85 ff	 test	 rdi, rdi
  001ca	0f 84 98 00 00
	00		 je	 $LN3@dict_items

; 1728 :             key = ep[i].me_key;
; 1729 :             item = PyList_GET_ITEM(v, j);

  001d0	48 8b 43 70	 mov	 rax, QWORD PTR [rbx+112]
  001d4	49 8b 34 24	 mov	 rsi, QWORD PTR [r12]
  001d8	4c 8b 34 01	 mov	 r14, QWORD PTR [rcx+rax]

; 1730 :             Py_INCREF(key);

  001dc	e8 00 00 00 00	 call	 _Py_PXCTX
  001e1	85 c0		 test	 eax, eax
  001e3	75 32		 jne	 SHORT $LN38@dict_items
  001e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  001f3	4c 8b ce	 mov	 r9, rsi
  001f6	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  001fc	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00204	e8 00 00 00 00	 call	 _PyParallel_Guard
  00209	85 c0		 test	 eax, eax
  0020b	75 06		 jne	 SHORT $LN37@dict_items
  0020d	f6 46 20 20	 test	 BYTE PTR [rsi+32], 32	; 00000020H
  00211	74 04		 je	 SHORT $LN38@dict_items
$LN37@dict_items:
  00213	48 ff 46 50	 inc	 QWORD PTR [rsi+80]
$LN38@dict_items:

; 1731 :             PyTuple_SET_ITEM(item, 0, key);

  00217	49 89 76 70	 mov	 QWORD PTR [r14+112], rsi

; 1732 :             Py_INCREF(value);

  0021b	e8 00 00 00 00	 call	 _Py_PXCTX
  00220	85 c0		 test	 eax, eax
  00222	75 32		 jne	 SHORT $LN42@dict_items
  00224	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0022b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00232	4c 8b cf	 mov	 r9, rdi
  00235	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0023b	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00243	e8 00 00 00 00	 call	 _PyParallel_Guard
  00248	85 c0		 test	 eax, eax
  0024a	75 06		 jne	 SHORT $LN41@dict_items
  0024c	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  00250	74 04		 je	 SHORT $LN42@dict_items
$LN41@dict_items:
  00252	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN42@dict_items:

; 1733 :             PyTuple_SET_ITEM(item, 1, value);
; 1734 :             j++;

  00256	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv386[rsp]
  0025b	49 89 7e 78	 mov	 QWORD PTR [r14+120], rdi
  0025f	48 83 c1 08	 add	 rcx, 8
  00263	48 89 4c 24 60	 mov	 QWORD PTR tv386[rsp], rcx
$LN3@dict_items:

; 1723 :     }
; 1724 :     for (i = 0, j = 0; i < size; i++) {

  00268	49 83 c4 18	 add	 r12, 24
  0026c	49 ff cd	 dec	 r13
  0026f	0f 85 4b ff ff
	ff		 jne	 $LL4@dict_items
  00275	4c 8b 74 24 78	 mov	 r14, QWORD PTR [rsp+120]
  0027a	4c 8b 64 24 68	 mov	 r12, QWORD PTR [rsp+104]
$LN2@dict_items:
  0027f	4c 8b 7c 24 30	 mov	 r15, QWORD PTR [rsp+48]
  00284	4c 8b 6c 24 70	 mov	 r13, QWORD PTR [rsp+112]

; 1735 :         }
; 1736 :     }
; 1737 :     assert(j == n);
; 1738 :     return v;

  00289	48 8b c3	 mov	 rax, rbx

; 1739 : }

  0028c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00290	5f		 pop	 rdi
  00291	5e		 pop	 rsi
  00292	5d		 pop	 rbp
  00293	5b		 pop	 rbx
  00294	c3		 ret	 0
dict_items ENDP
_TEXT	ENDS
PUBLIC	PyDict_Size
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_Size DD imagerel $LN5
	DD	imagerel $LN5+60
	DD	imagerel $unwind$PyDict_Size
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_Size DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyDict_Size
_TEXT	SEGMENT
mp$ = 48
PyDict_Size PROC					; COMDAT

; 2119 : {

$LN5:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2120 :     if (mp == NULL || !PyDict_Check(mp)) {

  00004	48 85 c9	 test	 rcx, rcx
  00007	74 19		 je	 SHORT $LN1@PyDict_Siz
  00009	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0000d	f7 80 00 01 00
	00 00 00 00 20	 test	 DWORD PTR [rax+256], 536870912 ; 20000000H
  00017	74 09		 je	 SHORT $LN1@PyDict_Siz

; 2123 :     }
; 2124 : 
; 2125 :     return ((PyDictObject *)mp)->ma_used;

  00019	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]

; 2126 : }

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
$LN1@PyDict_Siz:

; 2121 :         PyErr_BadInternalCall();

  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00029	ba 49 08 00 00	 mov	 edx, 2121		; 00000849H
  0002e	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 2122 :         return -1;

  00033	48 83 c8 ff	 or	 rax, -1

; 2126 : }

  00037	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003b	c3		 ret	 0
PyDict_Size ENDP
_TEXT	ENDS
PUBLIC	PyDict_Keys
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_Keys DD imagerel $LN5
	DD	imagerel $LN5+58
	DD	imagerel $unwind$PyDict_Keys
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_Keys DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyDict_Keys
_TEXT	SEGMENT
mp$ = 48
PyDict_Keys PROC					; COMDAT

; 2130 : {

$LN5:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2131 :     if (mp == NULL || !PyDict_Check(mp)) {

  00004	48 85 c9	 test	 rcx, rcx
  00007	74 19		 je	 SHORT $LN1@PyDict_Key
  00009	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0000d	f7 80 00 01 00
	00 00 00 00 20	 test	 DWORD PTR [rax+256], 536870912 ; 20000000H
  00017	74 09		 je	 SHORT $LN1@PyDict_Key

; 2134 :     }
; 2135 : 
; 2136 :     return dict_keys((PyDictObject *)mp);
; 2137 : }

  00019	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001d	e9 00 00 00 00	 jmp	 dict_keys
$LN1@PyDict_Key:

; 2132 :         PyErr_BadInternalCall();

  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00029	ba 54 08 00 00	 mov	 edx, 2132		; 00000854H
  0002e	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 2133 :         return NULL;

  00033	33 c0		 xor	 eax, eax

; 2134 :     }
; 2135 : 
; 2136 :     return dict_keys((PyDictObject *)mp);
; 2137 : }

  00035	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00039	c3		 ret	 0
PyDict_Keys ENDP
_TEXT	ENDS
PUBLIC	PyDict_Values
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_Values DD imagerel $LN5
	DD	imagerel $LN5+58
	DD	imagerel $unwind$PyDict_Values
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_Values DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyDict_Values
_TEXT	SEGMENT
mp$ = 48
PyDict_Values PROC					; COMDAT

; 2141 : {

$LN5:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2142 :     if (mp == NULL || !PyDict_Check(mp)) {

  00004	48 85 c9	 test	 rcx, rcx
  00007	74 19		 je	 SHORT $LN1@PyDict_Val
  00009	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0000d	f7 80 00 01 00
	00 00 00 00 20	 test	 DWORD PTR [rax+256], 536870912 ; 20000000H
  00017	74 09		 je	 SHORT $LN1@PyDict_Val

; 2145 :     }
; 2146 : 
; 2147 :     return dict_values((PyDictObject *)mp);
; 2148 : }

  00019	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001d	e9 00 00 00 00	 jmp	 dict_values
$LN1@PyDict_Val:

; 2143 :         PyErr_BadInternalCall();

  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00029	ba 5f 08 00 00	 mov	 edx, 2143		; 0000085fH
  0002e	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 2144 :         return NULL;

  00033	33 c0		 xor	 eax, eax

; 2145 :     }
; 2146 : 
; 2147 :     return dict_values((PyDictObject *)mp);
; 2148 : }

  00035	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00039	c3		 ret	 0
PyDict_Values ENDP
_TEXT	ENDS
PUBLIC	PyDict_Items
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_Items DD imagerel $LN5
	DD	imagerel $LN5+58
	DD	imagerel $unwind$PyDict_Items
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_Items DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyDict_Items
_TEXT	SEGMENT
mp$ = 48
PyDict_Items PROC					; COMDAT

; 2152 : {

$LN5:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2153 :     if (mp == NULL || !PyDict_Check(mp)) {

  00004	48 85 c9	 test	 rcx, rcx
  00007	74 19		 je	 SHORT $LN1@PyDict_Ite
  00009	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0000d	f7 80 00 01 00
	00 00 00 00 20	 test	 DWORD PTR [rax+256], 536870912 ; 20000000H
  00017	74 09		 je	 SHORT $LN1@PyDict_Ite

; 2156 :     }
; 2157 : 
; 2158 :     return dict_items((PyDictObject *)mp);
; 2159 : }

  00019	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001d	e9 00 00 00 00	 jmp	 dict_items
$LN1@PyDict_Ite:

; 2154 :         PyErr_BadInternalCall();

  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00029	ba 6a 08 00 00	 mov	 edx, 2154		; 0000086aH
  0002e	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 2155 :         return NULL;

  00033	33 c0		 xor	 eax, eax

; 2156 :     }
; 2157 : 
; 2158 :     return dict_items((PyDictObject *)mp);
; 2159 : }

  00035	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00039	c3		 ret	 0
PyDict_Items ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$dict_equal DD imagerel dict_equal
	DD	imagerel dict_equal+39
	DD	imagerel $unwind$dict_equal
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$dict_equal DD imagerel dict_equal+39
	DD	imagerel dict_equal+350
	DD	imagerel $chain$4$dict_equal
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$dict_equal DD imagerel dict_equal+350
	DD	imagerel dict_equal+371
	DD	imagerel $chain$6$dict_equal
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$dict_equal DD 0a0021H
	DD	06c400H
	DD	0d7400H
	DD	0c6400H
	DD	0b5400H
	DD	0a3400H
	DD	imagerel dict_equal
	DD	imagerel dict_equal+39
	DD	imagerel $unwind$dict_equal
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$dict_equal DD 0a1b21H
	DD	06c41bH
	DD	0d7416H
	DD	0c640fH
	DD	0b540aH
	DD	0a3405H
	DD	imagerel dict_equal
	DD	imagerel dict_equal+39
	DD	imagerel $unwind$dict_equal
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_equal DD 030801H
	DD	0e0046208H
	DD	0d002H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\dictobject.c
xdata	ENDS
;	COMDAT dict_equal
_TEXT	SEGMENT
a$ = 80
b$ = 88
dict_equal PROC						; COMDAT

; 2167 : {

  00000	41 55		 push	 r13
  00002	41 56		 push	 r14
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2168 :     Py_ssize_t i;
; 2169 : 
; 2170 : 
; 2171 :     if (a->ma_used != b->ma_used)

  00008	48 8b 42 60	 mov	 rax, QWORD PTR [rdx+96]
  0000c	4c 8b f2	 mov	 r14, rdx
  0000f	4c 8b e9	 mov	 r13, rcx
  00012	48 39 41 60	 cmp	 QWORD PTR [rcx+96], rax
  00016	74 0b		 je	 SHORT $LN10@dict_equal

; 2172 :         /* can't be equal if # of entries differ */
; 2173 :         return 0;

  00018	33 c0		 xor	 eax, eax

; 2206 : }

  0001a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0001e	41 5e		 pop	 r14
  00020	41 5d		 pop	 r13
  00022	c3		 ret	 0
$LN10@dict_equal:

; 2174 :     /* Same # of entries -- check all of 'em.  Exit early on any diff. */
; 2175 :     for (i = 0; i < DK_SIZE(a->ma_keys); i++) {

  00023	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]
  00027	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  0002c	48 89 6c 24 58	 mov	 QWORD PTR [rsp+88], rbp
  00031	48 89 74 24 60	 mov	 QWORD PTR [rsp+96], rsi
  00036	33 f6		 xor	 esi, esi
  00038	48 89 7c 24 68	 mov	 QWORD PTR [rsp+104], rdi
  0003d	4c 89 64 24 30	 mov	 QWORD PTR [rsp+48], r12
  00042	48 39 70 08	 cmp	 QWORD PTR [rax+8], rsi
  00046	0f 8e eb 00 00
	00		 jle	 $LN25@dict_equal
  0004c	8b ee		 mov	 ebp, esi
  0004e	66 90		 npad	 2
$LL9@dict_equal:

; 2176 :         PyDictKeyEntry *ep = &a->ma_keys->dk_entries[i];
; 2177 :         PyObject *aval;
; 2178 :         if (a->ma_values)

  00050	49 8b 5d 70	 mov	 rbx, QWORD PTR [r13+112]
  00054	48 85 db	 test	 rbx, rbx
  00057	74 06		 je	 SHORT $LN6@dict_equal

; 2179 :             aval = a->ma_values[i];

  00059	48 8b 1c f3	 mov	 rbx, QWORD PTR [rbx+rsi*8]

; 2180 :         else

  0005d	eb 05		 jmp	 SHORT $LN5@dict_equal
$LN6@dict_equal:

; 2181 :             aval = ep->me_value;

  0005f	48 8b 5c 28 30	 mov	 rbx, QWORD PTR [rax+rbp+48]
$LN5@dict_equal:

; 2182 :         if (aval != NULL) {

  00064	48 85 db	 test	 rbx, rbx
  00067	0f 84 b5 00 00
	00		 je	 $LN8@dict_equal

; 2183 :             int cmp;
; 2184 :             PyObject *bval;
; 2185 :             PyObject *key = ep->me_key;

  0006d	48 8b 7c 28 28	 mov	 rdi, QWORD PTR [rax+rbp+40]

; 2186 :             /* temporarily bump aval's refcount to ensure it stays
; 2187 :                alive until we're done with it */
; 2188 :             Py_INCREF(aval);

  00072	e8 00 00 00 00	 call	 _Py_PXCTX
  00077	85 c0		 test	 eax, eax
  00079	75 32		 jne	 SHORT $LN14@dict_equal
  0007b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00082	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00089	4c 8b cb	 mov	 r9, rbx
  0008c	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00092	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0009a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009f	85 c0		 test	 eax, eax
  000a1	75 06		 jne	 SHORT $LN13@dict_equal
  000a3	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000a7	74 04		 je	 SHORT $LN14@dict_equal
$LN13@dict_equal:
  000a9	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN14@dict_equal:

; 2189 :             /* ditto for key */
; 2190 :             Py_INCREF(key);

  000ad	e8 00 00 00 00	 call	 _Py_PXCTX
  000b2	85 c0		 test	 eax, eax
  000b4	75 32		 jne	 SHORT $LN18@dict_equal
  000b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000c4	4c 8b cf	 mov	 r9, rdi
  000c7	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000cd	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000d5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000da	85 c0		 test	 eax, eax
  000dc	75 06		 jne	 SHORT $LN17@dict_equal
  000de	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  000e2	74 04		 je	 SHORT $LN18@dict_equal
$LN17@dict_equal:
  000e4	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN18@dict_equal:

; 2191 :             bval = PyDict_GetItemWithError((PyObject *)b, key);

  000e8	48 8b d7	 mov	 rdx, rdi
  000eb	49 8b ce	 mov	 rcx, r14
  000ee	e8 00 00 00 00	 call	 PyDict_GetItemWithError

; 2192 :             Py_DECREF(key);

  000f3	48 8b cf	 mov	 rcx, rdi
  000f6	4c 8b e0	 mov	 r12, rax
  000f9	e8 00 00 00 00	 call	 _Py_DecRef

; 2198 :             }
; 2199 :             cmp = PyObject_RichCompareBool(aval, bval, Py_EQ);

  000fe	48 8b cb	 mov	 rcx, rbx
  00101	4d 85 e4	 test	 r12, r12
  00104	74 5c		 je	 SHORT $LN22@dict_equal
  00106	41 b8 02 00 00
	00		 mov	 r8d, 2
  0010c	49 8b d4	 mov	 rdx, r12
  0010f	e8 00 00 00 00	 call	 PyObject_RichCompareBool

; 2200 :             Py_DECREF(aval);

  00114	48 8b cb	 mov	 rcx, rbx
  00117	8b f8		 mov	 edi, eax
  00119	e8 00 00 00 00	 call	 _Py_DecRef

; 2201 :             if (cmp <= 0)  /* error or not equal */

  0011e	85 ff		 test	 edi, edi
  00120	7e 3c		 jle	 SHORT $LN23@dict_equal
$LN8@dict_equal:

; 2174 :     /* Same # of entries -- check all of 'em.  Exit early on any diff. */
; 2175 :     for (i = 0; i < DK_SIZE(a->ma_keys); i++) {

  00122	49 8b 45 68	 mov	 rax, QWORD PTR [r13+104]
  00126	48 ff c6	 inc	 rsi
  00129	48 83 c5 18	 add	 rbp, 24
  0012d	48 3b 70 08	 cmp	 rsi, QWORD PTR [rax+8]
  00131	0f 8c 19 ff ff
	ff		 jl	 $LL9@dict_equal
$LN25@dict_equal:

; 2203 :         }
; 2204 :     }
; 2205 :     return 1;

  00137	b8 01 00 00 00	 mov	 eax, 1
$LN30@dict_equal:
  0013c	48 8b 7c 24 68	 mov	 rdi, QWORD PTR [rsp+104]
  00141	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  00146	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  0014b	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00150	4c 8b 64 24 30	 mov	 r12, QWORD PTR [rsp+48]

; 2206 : }

  00155	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00159	41 5e		 pop	 r14
  0015b	41 5d		 pop	 r13
  0015d	c3		 ret	 0
$LN23@dict_equal:

; 2202 :                 return cmp;

  0015e	8b c7		 mov	 eax, edi
  00160	eb da		 jmp	 SHORT $LN30@dict_equal
$LN22@dict_equal:

; 2193 :             if (bval == NULL) {
; 2194 :                 Py_DECREF(aval);

  00162	e8 00 00 00 00	 call	 _Py_DecRef

; 2195 :                 if (PyErr_Occurred())

  00167	e8 00 00 00 00	 call	 PyErr_Occurred
  0016c	48 f7 d8	 neg	 rax
  0016f	1b c0		 sbb	 eax, eax

; 2196 :                     return -1;
; 2197 :                 return 0;

  00171	eb c9		 jmp	 SHORT $LN30@dict_equal
dict_equal ENDP
_TEXT	ENDS
EXTRN	_Py_NotImplementedStruct:BYTE
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$dict_richcompare DD imagerel dict_richcompare
	DD	imagerel dict_richcompare+177
	DD	imagerel $unwind$dict_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_richcompare DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\dictobject.c
xdata	ENDS
;	COMDAT dict_richcompare
_TEXT	SEGMENT
v$ = 64
w$ = 72
op$ = 80
dict_richcompare PROC					; COMDAT

; 2210 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 2211 :     int cmp;
; 2212 :     PyObject *res;
; 2213 : 
; 2214 :     if (!PyDict_Check(v) || !PyDict_Check(w)) {

  00006	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0000a	41 8b d8	 mov	 ebx, r8d
  0000d	f7 80 00 01 00
	00 00 00 00 20	 test	 DWORD PTR [rax+256], 536870912 ; 20000000H
  00017	74 4d		 je	 SHORT $LN6@dict_richc
  00019	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  0001d	f7 80 00 01 00
	00 00 00 00 20	 test	 DWORD PTR [rax+256], 536870912 ; 20000000H
  00027	74 3d		 je	 SHORT $LN6@dict_richc

; 2216 :     }
; 2217 :     else if (op == Py_EQ || op == Py_NE) {

  00029	83 fb 02	 cmp	 ebx, 2
  0002c	74 05		 je	 SHORT $LN3@dict_richc
  0002e	83 fb 03	 cmp	 ebx, 3

; 2224 :         res = Py_NotImplemented;

  00031	75 33		 jne	 SHORT $LN6@dict_richc
$LN3@dict_richc:

; 2218 :         cmp = dict_equal((PyDictObject *)v, (PyDictObject *)w);

  00033	e8 00 00 00 00	 call	 dict_equal
  00038	44 8b d8	 mov	 r11d, eax

; 2219 :         if (cmp < 0)

  0003b	85 c0		 test	 eax, eax
  0003d	79 08		 jns	 SHORT $LN2@dict_richc

; 2220 :             return NULL;

  0003f	33 c0		 xor	 eax, eax

; 2227 : }

  00041	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00045	5b		 pop	 rbx
  00046	c3		 ret	 0
$LN2@dict_richc:

; 2221 :         res = (cmp == (op == Py_EQ)) ? Py_True : Py_False;

  00047	33 c0		 xor	 eax, eax
  00049	83 fb 02	 cmp	 ebx, 2
  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  00053	0f 94 c0	 sete	 al
  00056	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  0005d	44 3b d8	 cmp	 r11d, eax
  00060	48 0f 44 d9	 cmove	 rbx, rcx

; 2222 :     }
; 2223 :     else

  00064	eb 07		 jmp	 SHORT $LN1@dict_richc
$LN6@dict_richc:

; 2215 :         res = Py_NotImplemented;

  00066	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NotImplementedStruct
$LN1@dict_richc:

; 2225 :     Py_INCREF(res);

  0006d	e8 00 00 00 00	 call	 _Py_PXCTX
  00072	85 c0		 test	 eax, eax
  00074	75 32		 jne	 SHORT $LN11@dict_richc
  00076	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0007d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00084	4c 8b cb	 mov	 r9, rbx
  00087	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0008d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00095	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009a	85 c0		 test	 eax, eax
  0009c	75 06		 jne	 SHORT $LN10@dict_richc
  0009e	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000a2	74 04		 je	 SHORT $LN11@dict_richc
$LN10@dict_richc:
  000a4	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN11@dict_richc:

; 2226 :     return res;

  000a8	48 8b c3	 mov	 rax, rbx

; 2227 : }

  000ab	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000af	5b		 pop	 rbx
  000b0	c3		 ret	 0
dict_richcompare ENDP
_TEXT	ENDS
EXTRN	PyBool_FromLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_contains DD imagerel dict_contains
	DD	imagerel dict_contains+121
	DD	imagerel $unwind$dict_contains
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_contains DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT dict_contains
_TEXT	SEGMENT
mp$ = 48
value_addr$ = 56
key$ = 56
dict_contains PROC					; COMDAT

; 2231 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2232 :     Py_hash_t hash;
; 2233 :     PyDictKeyEntry *ep;
; 2234 :     PyObject **value_addr;
; 2235 : 
; 2236 :     if (!PyUnicode_CheckExact(key) ||
; 2237 :         (hash = ((PyASCIIObject *) key)->hash) == -1) {

  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  00011	48 8b da	 mov	 rbx, rdx
  00014	48 8b f9	 mov	 rdi, rcx
  00017	48 39 42 58	 cmp	 QWORD PTR [rdx+88], rax
  0001b	75 0a		 jne	 SHORT $LN3@dict_conta
  0001d	4c 8b 42 68	 mov	 r8, QWORD PTR [rdx+104]
  00021	49 83 f8 ff	 cmp	 r8, -1
  00025	75 1e		 jne	 SHORT $LN2@dict_conta
$LN3@dict_conta:

; 2238 :         hash = PyObject_Hash(key);

  00027	48 8b ca	 mov	 rcx, rdx
  0002a	e8 00 00 00 00	 call	 PyObject_Hash
  0002f	4c 8b c0	 mov	 r8, rax

; 2239 :         if (hash == -1)

  00032	48 83 f8 ff	 cmp	 rax, -1
  00036	75 0d		 jne	 SHORT $LN2@dict_conta
$LN7@dict_conta:

; 2240 :             return NULL;

  00038	33 c0		 xor	 eax, eax

; 2246 : }

  0003a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00043	5f		 pop	 rdi
  00044	c3		 ret	 0
$LN2@dict_conta:

; 2241 :     }
; 2242 :     ep = (mp->ma_keys->dk_lookup)(mp, key, hash, &value_addr);

  00045	48 8b 47 68	 mov	 rax, QWORD PTR [rdi+104]
  00049	4c 8d 4c 24 38	 lea	 r9, QWORD PTR value_addr$[rsp]
  0004e	48 8b d3	 mov	 rdx, rbx
  00051	48 8b cf	 mov	 rcx, rdi
  00054	ff 50 10	 call	 QWORD PTR [rax+16]

; 2243 :     if (ep == NULL)

  00057	48 85 c0	 test	 rax, rax

; 2244 :         return NULL;

  0005a	74 dc		 je	 SHORT $LN7@dict_conta

; 2245 :     return PyBool_FromLong(*value_addr != NULL);

  0005c	48 8b 44 24 38	 mov	 rax, QWORD PTR value_addr$[rsp]
  00061	33 c9		 xor	 ecx, ecx
  00063	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00066	0f 95 c1	 setne	 cl
  00069	e8 00 00 00 00	 call	 PyBool_FromLong

; 2246 : }

  0006e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00073	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00077	5f		 pop	 rdi
  00078	c3		 ret	 0
dict_contains ENDP
_TEXT	ENDS
EXTRN	PyArg_UnpackTuple:PROC
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_get DD imagerel dict_get
	DD	imagerel dict_get+185
	DD	imagerel $unwind$dict_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_get DD 020601H
	DD	030027206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT dict_get
_TEXT	SEGMENT
value_addr$ = 48
mp$ = 80
args$ = 88
key$ = 96
failobj$ = 104
dict_get PROC						; COMDAT

; 2250 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00006	48 8b d9	 mov	 rbx, rcx
  00009	48 8b c2	 mov	 rax, rdx

; 2251 :     PyObject *key;
; 2252 :     PyObject *failobj = Py_None;

  0000c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00013	48 89 4c 24 68	 mov	 QWORD PTR failobj$[rsp], rcx

; 2253 :     PyObject *val = NULL;
; 2254 :     Py_hash_t hash;
; 2255 :     PyDictKeyEntry *ep;
; 2256 :     PyObject **value_addr;
; 2257 : 
; 2258 :     if (!PyArg_UnpackTuple(args, "get", 1, 2, &key, &failobj))

  00018	48 8d 4c 24 68	 lea	 rcx, QWORD PTR failobj$[rsp]
  0001d	41 b9 02 00 00
	00		 mov	 r9d, 2
  00023	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00028	48 8d 4c 24 60	 lea	 rcx, QWORD PTR key$[rsp]
  0002d	45 8d 41 ff	 lea	 r8d, QWORD PTR [r9-1]
  00031	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03HNAFFKGA@get?$AA@
  0003d	48 8b c8	 mov	 rcx, rax
  00040	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00045	85 c0		 test	 eax, eax
  00047	75 08		 jne	 SHORT $LN6@dict_get
$LN10@dict_get:

; 2259 :         return NULL;

  00049	33 c0		 xor	 eax, eax

; 2275 : }

  0004b	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0004f	5b		 pop	 rbx
  00050	c3		 ret	 0
$LN6@dict_get:

; 2260 : 
; 2261 :     if (!PyUnicode_CheckExact(key) ||
; 2262 :         (hash = ((PyASCIIObject *) key)->hash) == -1) {

  00051	48 8b 54 24 60	 mov	 rdx, QWORD PTR key$[rsp]
  00056	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  0005d	48 39 42 58	 cmp	 QWORD PTR [rdx+88], rax
  00061	75 0a		 jne	 SHORT $LN4@dict_get
  00063	4c 8b 42 68	 mov	 r8, QWORD PTR [rdx+104]
  00067	49 83 f8 ff	 cmp	 r8, -1
  0006b	75 16		 jne	 SHORT $LN3@dict_get
$LN4@dict_get:

; 2263 :         hash = PyObject_Hash(key);

  0006d	48 8b ca	 mov	 rcx, rdx
  00070	e8 00 00 00 00	 call	 PyObject_Hash
  00075	4c 8b c0	 mov	 r8, rax

; 2264 :         if (hash == -1)

  00078	48 83 f8 ff	 cmp	 rax, -1

; 2265 :             return NULL;

  0007c	74 cb		 je	 SHORT $LN10@dict_get
  0007e	48 8b 54 24 60	 mov	 rdx, QWORD PTR key$[rsp]
$LN3@dict_get:

; 2266 :     }
; 2267 :     ep = (mp->ma_keys->dk_lookup)(mp, key, hash, &value_addr);

  00083	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  00087	4c 8d 4c 24 30	 lea	 r9, QWORD PTR value_addr$[rsp]
  0008c	48 8b cb	 mov	 rcx, rbx
  0008f	ff 50 10	 call	 QWORD PTR [rax+16]

; 2268 :     if (ep == NULL)

  00092	48 85 c0	 test	 rax, rax

; 2269 :         return NULL;

  00095	74 b2		 je	 SHORT $LN10@dict_get

; 2270 :     val = *value_addr;

  00097	48 8b 44 24 30	 mov	 rax, QWORD PTR value_addr$[rsp]
  0009c	48 8b 18	 mov	 rbx, QWORD PTR [rax]

; 2271 :     if (val == NULL)

  0009f	48 85 db	 test	 rbx, rbx
  000a2	48 0f 44 5c 24
	68		 cmove	 rbx, QWORD PTR failobj$[rsp]

; 2272 :         val = failobj;
; 2273 :     Py_INCREF(val);

  000a8	48 8b cb	 mov	 rcx, rbx
  000ab	e8 00 00 00 00	 call	 _Py_IncRef

; 2274 :     return val;

  000b0	48 8b c3	 mov	 rax, rbx

; 2275 : }

  000b3	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000b7	5b		 pop	 rbx
  000b8	c3		 ret	 0
dict_get ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@ELKIGFKM@dict_clear?$AA@		; `string'
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_AssignmentError:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$dict_clear DD imagerel dict_clear
	DD	imagerel dict_clear+175
	DD	imagerel $unwind$dict_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_clear DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@ELKIGFKM@dict_clear?$AA@
CONST	SEGMENT
??_C@_0L@ELKIGFKM@dict_clear?$AA@ DB 'dict_clear', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\dictobject.c
CONST	ENDS
;	COMDAT dict_clear
_TEXT	SEGMENT
mp$ = 64
dict_clear PROC						; COMDAT

; 2329 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 2330 : #ifdef WITH_PARALLEL
; 2331 :     if (Py_PXCTX && Py_ISPY(mp)) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 43		 je	 SHORT $LN1@dict_clear
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@ELKIGFKM@dict_clear?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 1b 09 00
	00		 mov	 r8d, 2331		; 0000091bH
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	74 1b		 je	 SHORT $LN1@dict_clear

; 2332 :         PyErr_SetString(PyExc_AssignmentError,
; 2333 :                         "parallel thread attempted to clear "
; 2334 :                         "a main thread dict");

  0003a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AssignmentError
  00041	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DG@NJAOCDNF@parallel?5thread?5attempted?5to?5cle@
  00048	e8 00 00 00 00	 call	 PyErr_SetString

; 2335 :         return NULL;

  0004d	33 c0		 xor	 eax, eax

; 2340 : }

  0004f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00053	5b		 pop	 rbx
  00054	c3		 ret	 0
$LN1@dict_clear:

; 2336 :     }
; 2337 : #endif
; 2338 :     PyDict_Clear((PyObject *)mp);

  00055	48 8b cb	 mov	 rcx, rbx
  00058	e8 00 00 00 00	 call	 PyDict_Clear

; 2339 :     Py_RETURN_NONE;

  0005d	e8 00 00 00 00	 call	 _Py_PXCTX
  00062	85 c0		 test	 eax, eax
  00064	75 3c		 jne	 SHORT $LN5@dict_clear
  00066	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  0006d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00074	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0007b	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00081	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00089	e8 00 00 00 00	 call	 _PyParallel_Guard
  0008e	85 c0		 test	 eax, eax
  00090	75 09		 jne	 SHORT $LN4@dict_clear
  00092	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00099	74 07		 je	 SHORT $LN5@dict_clear
$LN4@dict_clear:
  0009b	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN5@dict_clear:
  000a2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 2340 : }

  000a9	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ad	5b		 pop	 rbx
  000ae	c3		 ret	 0
dict_clear ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$dict_pop DD imagerel dict_pop
	DD	imagerel dict_pop+181
	DD	imagerel $unwind$dict_pop
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$dict_pop DD imagerel dict_pop+181
	DD	imagerel dict_pop+209
	DD	imagerel $chain$0$dict_pop
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$dict_pop DD imagerel dict_pop+209
	DD	imagerel dict_pop+264
	DD	imagerel $chain$3$dict_pop
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$dict_pop DD imagerel dict_pop+264
	DD	imagerel dict_pop+293
	DD	imagerel $chain$5$dict_pop
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$dict_pop DD imagerel dict_pop+293
	DD	imagerel dict_pop+442
	DD	imagerel $chain$7$dict_pop
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$dict_pop DD 040021H
	DD	087400H
	DD	0c6400H
	DD	imagerel dict_pop
	DD	imagerel dict_pop+181
	DD	imagerel $unwind$dict_pop
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$dict_pop DD 040021H
	DD	087400H
	DD	0c6400H
	DD	imagerel dict_pop
	DD	imagerel dict_pop+181
	DD	imagerel $unwind$dict_pop
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$dict_pop DD 040a21H
	DD	08740aH
	DD	0c6400H
	DD	imagerel dict_pop
	DD	imagerel dict_pop+181
	DD	imagerel $unwind$dict_pop
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$dict_pop DD 020521H
	DD	0c6405H
	DD	imagerel dict_pop
	DD	imagerel dict_pop+181
	DD	imagerel $unwind$dict_pop
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_pop DD 030701H
	DD	050038207H
	DD	03002H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\dictobject.c
xdata	ENDS
;	COMDAT dict_pop
_TEXT	SEGMENT
value_addr$ = 48
mp$ = 96
args$ = 104
deflt$ = 112
key$ = 120
dict_pop PROC						; COMDAT

; 2344 : {

  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00007	48 8b d9	 mov	 rbx, rcx

; 2345 :     Py_hash_t hash;
; 2346 :     PyObject *old_value, *old_key;
; 2347 :     PyObject *key, *deflt = NULL;

  0000a	33 ed		 xor	 ebp, ebp
  0000c	48 8b c2	 mov	 rax, rdx

; 2348 :     PyDictKeyEntry *ep;
; 2349 :     PyObject **value_addr;
; 2350 : 
; 2351 :     /*
; 2352 :     if (Px_CHECK_PROTECTION(mp, args, NULL))
; 2353 :         return NULL;
; 2354 :     */
; 2355 : 
; 2356 :     if(!PyArg_UnpackTuple(args, "pop", 1, 2, &key, &deflt))

  0000f	48 8d 4c 24 70	 lea	 rcx, QWORD PTR deflt$[rsp]
  00014	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03NJDAHFJE@pop?$AA@
  0001b	44 8d 4d 02	 lea	 r9d, QWORD PTR [rbp+2]
  0001f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00024	48 8d 4c 24 78	 lea	 rcx, QWORD PTR key$[rsp]
  00029	44 8d 45 01	 lea	 r8d, QWORD PTR [rbp+1]
  0002d	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00032	48 8b c8	 mov	 rcx, rax
  00035	48 89 6c 24 70	 mov	 QWORD PTR deflt$[rsp], rbp
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax

; 2357 :         return NULL;

  00041	74 2b		 je	 SHORT $LN21@dict_pop

; 2358 :     if (mp->ma_used == 0) {

  00043	48 39 6b 60	 cmp	 QWORD PTR [rbx+96], rbp
  00047	75 2e		 jne	 SHORT $LN10@dict_pop

; 2359 :         if (deflt) {

  00049	48 8b 4c 24 70	 mov	 rcx, QWORD PTR deflt$[rsp]
  0004e	48 85 c9	 test	 rcx, rcx
  00051	74 11		 je	 SHORT $LN9@dict_pop

; 2360 :             Py_INCREF(deflt);

  00053	e8 00 00 00 00	 call	 _Py_IncRef

; 2361 :             return deflt;

  00058	48 8b 44 24 70	 mov	 rax, QWORD PTR deflt$[rsp]

; 2394 : }

  0005d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00061	5d		 pop	 rbp
  00062	5b		 pop	 rbx
  00063	c3		 ret	 0
$LN9@dict_pop:

; 2362 :         }
; 2363 :         set_key_error(key);

  00064	48 8b 4c 24 78	 mov	 rcx, QWORD PTR key$[rsp]
  00069	e8 00 00 00 00	 call	 set_key_error
$LN21@dict_pop:

; 2364 :         return NULL;

  0006e	33 c0		 xor	 eax, eax

; 2394 : }

  00070	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00074	5d		 pop	 rbp
  00075	5b		 pop	 rbx
  00076	c3		 ret	 0
$LN10@dict_pop:

; 2365 :     }
; 2366 :     if (!PyUnicode_CheckExact(key) ||
; 2367 :         (hash = ((PyASCIIObject *) key)->hash) == -1) {

  00077	48 8b 54 24 78	 mov	 rdx, QWORD PTR key$[rsp]
  0007c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  00083	48 39 42 58	 cmp	 QWORD PTR [rdx+88], rax
  00087	75 0a		 jne	 SHORT $LN7@dict_pop
  00089	4c 8b 42 68	 mov	 r8, QWORD PTR [rdx+104]
  0008d	49 83 f8 ff	 cmp	 r8, -1
  00091	75 16		 jne	 SHORT $LN6@dict_pop
$LN7@dict_pop:

; 2368 :         hash = PyObject_Hash(key);

  00093	48 8b ca	 mov	 rcx, rdx
  00096	e8 00 00 00 00	 call	 PyObject_Hash
  0009b	4c 8b c0	 mov	 r8, rax

; 2369 :         if (hash == -1)

  0009e	48 83 f8 ff	 cmp	 rax, -1

; 2370 :             return NULL;

  000a2	74 ca		 je	 SHORT $LN21@dict_pop
  000a4	48 8b 54 24 78	 mov	 rdx, QWORD PTR key$[rsp]
$LN6@dict_pop:

; 2371 :     }
; 2372 :     ep = (mp->ma_keys->dk_lookup)(mp, key, hash, &value_addr);

  000a9	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  000ad	4c 8d 4c 24 30	 lea	 r9, QWORD PTR value_addr$[rsp]
  000b2	48 8b cb	 mov	 rcx, rbx
  000b5	48 89 74 24 60	 mov	 QWORD PTR [rsp+96], rsi
  000ba	ff 50 10	 call	 QWORD PTR [rax+16]
  000bd	48 8b f0	 mov	 rsi, rax

; 2373 :     if (ep == NULL)

  000c0	48 85 c0	 test	 rax, rax
  000c3	75 0c		 jne	 SHORT $LN5@dict_pop
  000c5	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]

; 2394 : }

  000ca	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000ce	5d		 pop	 rbp
  000cf	5b		 pop	 rbx
  000d0	c3		 ret	 0
$LN5@dict_pop:

; 2374 :         return NULL;
; 2375 :     old_value = *value_addr;

  000d1	48 8b 44 24 30	 mov	 rax, QWORD PTR value_addr$[rsp]
  000d6	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  000db	48 8b 38	 mov	 rdi, QWORD PTR [rax]

; 2376 :     if (old_value == NULL) {

  000de	48 85 ff	 test	 rdi, rdi
  000e1	75 42		 jne	 SHORT $LN4@dict_pop

; 2377 :         if (deflt) {

  000e3	48 8b 4c 24 70	 mov	 rcx, QWORD PTR deflt$[rsp]
  000e8	48 85 c9	 test	 rcx, rcx
  000eb	74 1b		 je	 SHORT $LN3@dict_pop

; 2378 :             Py_INCREF(deflt);

  000ed	e8 00 00 00 00	 call	 _Py_IncRef

; 2379 :             return deflt;

  000f2	48 8b 44 24 70	 mov	 rax, QWORD PTR deflt$[rsp]
  000f7	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  000fc	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]

; 2394 : }

  00101	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00105	5d		 pop	 rbp
  00106	5b		 pop	 rbx
  00107	c3		 ret	 0
$LN3@dict_pop:

; 2380 :         }
; 2381 :         set_key_error(key);

  00108	48 8b 4c 24 78	 mov	 rcx, QWORD PTR key$[rsp]
  0010d	e8 00 00 00 00	 call	 set_key_error
  00112	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  00117	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]

; 2382 :         return NULL;

  0011c	33 c0		 xor	 eax, eax

; 2394 : }

  0011e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00122	5d		 pop	 rbp
  00123	5b		 pop	 rbx
  00124	c3		 ret	 0
$LN4@dict_pop:

; 2383 :     }
; 2384 :     *value_addr = NULL;

  00125	48 89 28	 mov	 QWORD PTR [rax], rbp

; 2385 :     mp->ma_used--;

  00128	48 ff 4b 60	 dec	 QWORD PTR [rbx+96]

; 2386 :     if (!_PyDict_HasSplitTable(mp)) {

  0012c	48 39 6b 70	 cmp	 QWORD PTR [rbx+112], rbp
  00130	75 74		 jne	 SHORT $LN2@dict_pop

; 2387 :         ENSURE_ALLOWS_DELETIONS(mp);

  00132	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  00136	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict_unicode_nodummy
  0013d	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  00141	75 0b		 jne	 SHORT $LN1@dict_pop
  00143	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict_unicode
  0014a	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
$LN1@dict_pop:

; 2388 :         old_key = ep->me_key;

  0014e	48 8b 5e 08	 mov	 rbx, QWORD PTR [rsi+8]

; 2389 :         Py_INCREF(dummy);

  00152	e8 00 00 00 00	 call	 _Py_PXCTX
  00157	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_dummy_struct
  0015e	85 c0		 test	 eax, eax
  00160	75 38		 jne	 SHORT $LN15@dict_pop
  00162	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00169	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00170	4c 8b cd	 mov	 r9, rbp
  00173	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00179	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00181	e8 00 00 00 00	 call	 _PyParallel_Guard
  00186	85 c0		 test	 eax, eax
  00188	75 09		 jne	 SHORT $LN14@dict_pop
  0018a	f6 05 20 00 00
	00 20		 test	 BYTE PTR _dummy_struct+32, 32 ; 00000020H
  00191	74 07		 je	 SHORT $LN15@dict_pop
$LN14@dict_pop:
  00193	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _dummy_struct+80
$LN15@dict_pop:

; 2390 :         ep->me_key = dummy;
; 2391 :         Py_DECREF(old_key);

  0019a	48 8b cb	 mov	 rcx, rbx
  0019d	48 89 6e 08	 mov	 QWORD PTR [rsi+8], rbp
  001a1	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@dict_pop:

; 2392 :     }
; 2393 :     return old_value;

  001a6	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  001ab	48 8b c7	 mov	 rax, rdi
  001ae	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 2394 : }

  001b3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001b7	5d		 pop	 rbp
  001b8	5b		 pop	 rbx
  001b9	c3		 ret	 0
dict_pop ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@GCCGAII@dict_traverse?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_traverse DD imagerel dict_traverse
	DD	imagerel dict_traverse+457
	DD	imagerel $unwind$dict_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_traverse DD 0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0d0143218H
	DD	07010c012H
xdata	ENDS
;	COMDAT ??_C@_0O@GCCGAII@dict_traverse?$AA@
CONST	SEGMENT
??_C@_0O@GCCGAII@dict_traverse?$AA@ DB 'dict_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT dict_traverse
_TEXT	SEGMENT
op$ = 64
visit$ = 72
arg$ = 80
dict_traverse PROC					; COMDAT

; 2470 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2471 :     Py_ssize_t i, n;
; 2472 :     PyDictObject *mp = (PyDictObject *)op;
; 2473 :     if (mp->ma_keys->dk_lookup == lookdict) {

  00018	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]
  0001c	48 8b e9	 mov	 rbp, rcx
  0001f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict

; 2474 :         for (i = 0; i < DK_SIZE(mp->ma_keys); i++) {

  00026	33 db		 xor	 ebx, ebx
  00028	4d 8b e0	 mov	 r12, r8
  0002b	4c 8b ea	 mov	 r13, rdx
  0002e	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  00032	0f 85 be 00 00
	00		 jne	 $LN38@dict_trave
  00038	48 39 58 08	 cmp	 QWORD PTR [rax+8], rbx
  0003c	0f 8e 6c 01 00
	00		 jle	 $LN53@dict_trave
  00042	bf 30 00 00 00	 mov	 edi, 48			; 00000030H
  00047	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL37@dict_trave:

; 2475 :             if (mp->ma_keys->dk_entries[i].me_value != NULL) {

  00050	48 83 3c 07 00	 cmp	 QWORD PTR [rdi+rax], 0
  00055	0f 84 81 00 00
	00		 je	 $LN25@dict_trave

; 2476 :                 Py_VISIT(mp->ma_keys->dk_entries[i].me_value);

  0005b	e8 00 00 00 00	 call	 _Py_PXCTX
  00060	85 c0		 test	 eax, eax
  00062	74 1c		 je	 SHORT $LN30@dict_trave
  00064	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  0006b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@GCCGAII@dict_traverse?$AA@
  00072	45 33 c9	 xor	 r9d, r9d
  00075	41 b8 ac 09 00
	00		 mov	 r8d, 2476		; 000009acH
  0007b	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN30@dict_trave:
  00080	48 8b 45 68	 mov	 rax, QWORD PTR [rbp+104]
  00084	48 8b 0c 07	 mov	 rcx, QWORD PTR [rdi+rax]
  00088	48 85 c9	 test	 rcx, rcx
  0008b	74 0e		 je	 SHORT $LN32@dict_trave
  0008d	49 8b d4	 mov	 rdx, r12
  00090	41 ff d5	 call	 r13
  00093	85 c0		 test	 eax, eax
  00095	0f 85 15 01 00
	00		 jne	 $LN39@dict_trave
$LN32@dict_trave:

; 2477 :                 Py_VISIT(mp->ma_keys->dk_entries[i].me_key);

  0009b	e8 00 00 00 00	 call	 _Py_PXCTX
  000a0	85 c0		 test	 eax, eax
  000a2	74 1c		 je	 SHORT $LN24@dict_trave
  000a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  000ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@GCCGAII@dict_traverse?$AA@
  000b2	45 33 c9	 xor	 r9d, r9d
  000b5	41 b8 ad 09 00
	00		 mov	 r8d, 2477		; 000009adH
  000bb	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN24@dict_trave:
  000c0	48 8b 45 68	 mov	 rax, QWORD PTR [rbp+104]
  000c4	48 8b 4c 07 f8	 mov	 rcx, QWORD PTR [rdi+rax-8]
  000c9	48 85 c9	 test	 rcx, rcx
  000cc	74 0e		 je	 SHORT $LN25@dict_trave
  000ce	49 8b d4	 mov	 rdx, r12
  000d1	41 ff d5	 call	 r13
  000d4	85 c0		 test	 eax, eax
  000d6	0f 85 d4 00 00
	00		 jne	 $LN39@dict_trave
$LN25@dict_trave:

; 2474 :         for (i = 0; i < DK_SIZE(mp->ma_keys); i++) {

  000dc	48 8b 45 68	 mov	 rax, QWORD PTR [rbp+104]
  000e0	48 ff c3	 inc	 rbx
  000e3	48 83 c7 18	 add	 rdi, 24
  000e7	48 3b 58 08	 cmp	 rbx, QWORD PTR [rax+8]
  000eb	0f 8c 5f ff ff
	ff		 jl	 $LL37@dict_trave
  000f1	e9 b8 00 00 00	 jmp	 $LN53@dict_trave
$LN38@dict_trave:

; 2478 :             }
; 2479 :         }
; 2480 :     } else {
; 2481 :         if (mp->ma_values != NULL) {

  000f6	48 83 7d 70 00	 cmp	 QWORD PTR [rbp+112], 0
  000fb	74 5b		 je	 SHORT $LN20@dict_trave

; 2482 :             for (i = 0, n = DK_SIZE(mp->ma_keys); i < n; i++) {

  000fd	48 8b 78 08	 mov	 rdi, QWORD PTR [rax+8]
  00101	48 85 ff	 test	 rdi, rdi
  00104	0f 8e a4 00 00
	00		 jle	 $LN53@dict_trave
  0010a	66 0f 1f 44 00
	00		 npad	 6
$LL19@dict_trave:

; 2483 :                 Py_VISIT(mp->ma_values[i]);

  00110	e8 00 00 00 00	 call	 _Py_PXCTX
  00115	85 c0		 test	 eax, eax
  00117	74 1c		 je	 SHORT $LN13@dict_trave
  00119	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00120	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@GCCGAII@dict_traverse?$AA@
  00127	45 33 c9	 xor	 r9d, r9d
  0012a	41 b8 b3 09 00
	00		 mov	 r8d, 2483		; 000009b3H
  00130	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN13@dict_trave:
  00135	48 8b 4d 70	 mov	 rcx, QWORD PTR [rbp+112]
  00139	48 83 3c d9 00	 cmp	 QWORD PTR [rcx+rbx*8], 0
  0013e	74 0e		 je	 SHORT $LN15@dict_trave
  00140	48 8b 0c d9	 mov	 rcx, QWORD PTR [rcx+rbx*8]
  00144	49 8b d4	 mov	 rdx, r12
  00147	41 ff d5	 call	 r13
  0014a	85 c0		 test	 eax, eax
  0014c	75 62		 jne	 SHORT $LN39@dict_trave
$LN15@dict_trave:

; 2482 :             for (i = 0, n = DK_SIZE(mp->ma_keys); i < n; i++) {

  0014e	48 ff c3	 inc	 rbx
  00151	48 3b df	 cmp	 rbx, rdi
  00154	7c ba		 jl	 SHORT $LL19@dict_trave
  00156	eb 56		 jmp	 SHORT $LN53@dict_trave
$LN20@dict_trave:

; 2484 :             }
; 2485 :         }
; 2486 :         else {
; 2487 :             for (i = 0, n = DK_SIZE(mp->ma_keys); i < n; i++) {

  00158	48 8b 70 08	 mov	 rsi, QWORD PTR [rax+8]
  0015c	48 85 f6	 test	 rsi, rsi
  0015f	7e 4d		 jle	 SHORT $LN53@dict_trave
  00161	bf 30 00 00 00	 mov	 edi, 48			; 00000030H
$LL9@dict_trave:

; 2488 :                 Py_VISIT(mp->ma_keys->dk_entries[i].me_value);

  00166	e8 00 00 00 00	 call	 _Py_PXCTX
  0016b	85 c0		 test	 eax, eax
  0016d	74 1c		 je	 SHORT $LN3@dict_trave
  0016f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00176	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@GCCGAII@dict_traverse?$AA@
  0017d	45 33 c9	 xor	 r9d, r9d
  00180	41 b8 b8 09 00
	00		 mov	 r8d, 2488		; 000009b8H
  00186	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@dict_trave:
  0018b	48 8b 45 68	 mov	 rax, QWORD PTR [rbp+104]
  0018f	48 8b 0c 07	 mov	 rcx, QWORD PTR [rdi+rax]
  00193	48 85 c9	 test	 rcx, rcx
  00196	74 0a		 je	 SHORT $LN5@dict_trave
  00198	49 8b d4	 mov	 rdx, r12
  0019b	41 ff d5	 call	 r13
  0019e	85 c0		 test	 eax, eax
  001a0	75 0e		 jne	 SHORT $LN39@dict_trave
$LN5@dict_trave:

; 2484 :             }
; 2485 :         }
; 2486 :         else {
; 2487 :             for (i = 0, n = DK_SIZE(mp->ma_keys); i < n; i++) {

  001a2	48 ff c3	 inc	 rbx
  001a5	48 83 c7 18	 add	 rdi, 24
  001a9	48 3b de	 cmp	 rbx, rsi
  001ac	7c b8		 jl	 SHORT $LL9@dict_trave
$LN53@dict_trave:

; 2489 :             }
; 2490 :         }
; 2491 :     }
; 2492 :     return 0;

  001ae	33 c0		 xor	 eax, eax
$LN39@dict_trave:

; 2493 : }

  001b0	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  001b5	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  001ba	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  001bf	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001c3	41 5d		 pop	 r13
  001c5	41 5c		 pop	 r12
  001c7	5f		 pop	 rdi
  001c8	c3		 ret	 0
dict_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_tp_clear DD imagerel dict_tp_clear
	DD	imagerel dict_tp_clear+16
	DD	imagerel $unwind$dict_tp_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_tp_clear DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT dict_tp_clear
_TEXT	SEGMENT
op$ = 48
dict_tp_clear PROC					; COMDAT

; 2497 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2498 :     PyDict_Clear(op);

  00004	e8 00 00 00 00	 call	 PyDict_Clear

; 2499 :     return 0;

  00009	33 c0		 xor	 eax, eax

; 2500 : }

  0000b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0000f	c3		 ret	 0
dict_tp_clear ENDP
_TEXT	ENDS
EXTRN	PyLong_FromSsize_t:PROC
; Function compile flags: /Ogtpy
;	COMDAT dict_sizeof
_TEXT	SEGMENT
mp$ = 8
dict_sizeof PROC					; COMDAT

; 2507 :     Py_ssize_t size, res;
; 2508 : 
; 2509 :     size = DK_SIZE(mp->ma_keys);
; 2510 :     res = sizeof(PyDictObject);
; 2511 :     if (mp->ma_values)

  00000	48 83 79 70 00	 cmp	 QWORD PTR [rcx+112], 0
  00005	4c 8b 41 68	 mov	 r8, QWORD PTR [rcx+104]
  00009	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  0000e	49 8b 40 08	 mov	 rax, QWORD PTR [r8+8]
  00012	74 08		 je	 SHORT $LN2@dict_sizeo

; 2512 :         res += size * sizeof(PyObject*);

  00014	48 8d 14 c5 80
	00 00 00	 lea	 rdx, QWORD PTR [rax*8+128]
$LN2@dict_sizeo:

; 2513 :     /* If the dictionary is split, the keys portion is accounted-for
; 2514 :        in the type object. */
; 2515 :     if (mp->ma_keys->dk_refcnt == 1)

  0001c	49 83 38 01	 cmp	 QWORD PTR [r8], 1
  00020	75 09		 jne	 SHORT $LN1@dict_sizeo

; 2516 :         res += sizeof(PyDictKeysObject) + (size-1) * sizeof(PyDictKeyEntry);

  00022	48 8d 04 40	 lea	 rax, QWORD PTR [rax+rax*2]
  00026	48 8d 54 c2 20	 lea	 rdx, QWORD PTR [rdx+rax*8+32]
$LN1@dict_sizeo:

; 2517 :     return PyLong_FromSsize_t(res);

  0002b	48 8b ca	 mov	 rcx, rdx

; 2518 : }

  0002e	e9 00 00 00 00	 jmp	 PyLong_FromSsize_t
dict_sizeof ENDP
_TEXT	ENDS
PUBLIC	_PyDict_KeysSize
; Function compile flags: /Ogtpy
;	COMDAT _PyDict_KeysSize
_TEXT	SEGMENT
keys$ = 8
_PyDict_KeysSize PROC					; COMDAT

; 2523 :     return sizeof(PyDictKeysObject) + (DK_SIZE(keys)-1) * sizeof(PyDictKeyEntry);

  00000	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00004	48 8d 44 40 fd	 lea	 rax, QWORD PTR [rax+rax*2-3]
  00009	48 8d 04 c5 38
	00 00 00	 lea	 rax, QWORD PTR [rax*8+56]

; 2524 : }

  00011	c3		 ret	 0
_PyDict_KeysSize ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_Contains DD imagerel $LN9
	DD	imagerel $LN9+117
	DD	imagerel $unwind$PyDict_Contains
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_Contains DD 040a01H
	DD	07340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyDict_Contains
_TEXT	SEGMENT
value_addr$ = 48
op$ = 48
key$ = 56
PyDict_Contains PROC					; COMDAT

; 2611 : {

$LN9:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2612 :     Py_hash_t hash;
; 2613 :     PyDictObject *mp = (PyDictObject *)op;
; 2614 :     PyDictKeyEntry *ep;
; 2615 :     PyObject **value_addr;
; 2616 : 
; 2617 :     if (!PyUnicode_CheckExact(key) ||
; 2618 :         (hash = ((PyASCIIObject *) key)->hash) == -1) {

  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  00011	48 8b da	 mov	 rbx, rdx
  00014	48 8b f9	 mov	 rdi, rcx
  00017	48 39 42 58	 cmp	 QWORD PTR [rdx+88], rax
  0001b	75 0a		 jne	 SHORT $LN2@PyDict_Con
  0001d	4c 8b 42 68	 mov	 r8, QWORD PTR [rdx+104]
  00021	49 83 f8 ff	 cmp	 r8, -1
  00025	75 11		 jne	 SHORT $LN1@PyDict_Con
$LN2@PyDict_Con:

; 2619 :         hash = PyObject_Hash(key);

  00027	48 8b ca	 mov	 rcx, rdx
  0002a	e8 00 00 00 00	 call	 PyObject_Hash
  0002f	4c 8b c0	 mov	 r8, rax

; 2620 :         if (hash == -1)

  00032	48 83 f8 ff	 cmp	 rax, -1

; 2621 :             return -1;

  00036	74 17		 je	 SHORT $LN8@PyDict_Con
$LN1@PyDict_Con:

; 2622 :     }
; 2623 :     ep = (mp->ma_keys->dk_lookup)(mp, key, hash, &value_addr);

  00038	48 8b 47 68	 mov	 rax, QWORD PTR [rdi+104]
  0003c	4c 8d 4c 24 30	 lea	 r9, QWORD PTR value_addr$[rsp]
  00041	48 8b d3	 mov	 rdx, rbx
  00044	48 8b cf	 mov	 rcx, rdi
  00047	ff 50 10	 call	 QWORD PTR [rax+16]

; 2624 :     return (ep == NULL) ? -1 : (*value_addr != NULL);

  0004a	48 85 c0	 test	 rax, rax
  0004d	75 0e		 jne	 SHORT $LN6@PyDict_Con
$LN8@PyDict_Con:
  0004f	83 c8 ff	 or	 eax, -1

; 2625 : }

  00052	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00057	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005b	5f		 pop	 rdi
  0005c	c3		 ret	 0
$LN6@PyDict_Con:

; 2624 :     return (ep == NULL) ? -1 : (*value_addr != NULL);

  0005d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR value_addr$[rsp]

; 2625 : }

  00062	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00067	33 c0		 xor	 eax, eax
  00069	48 39 01	 cmp	 QWORD PTR [rcx], rax
  0006c	0f 95 c0	 setne	 al
  0006f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00073	5f		 pop	 rdi
  00074	c3		 ret	 0
PyDict_Contains ENDP
_TEXT	ENDS
PUBLIC	_PyDict_Contains
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyDict_Contains DD imagerel $LN5
	DD	imagerel $LN5+47
	DD	imagerel $unwind$_PyDict_Contains
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyDict_Contains DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyDict_Contains
_TEXT	SEGMENT
value_addr$ = 48
op$ = 48
key$ = 56
hash$ = 64
_PyDict_Contains PROC					; COMDAT

; 2630 : {

$LN5:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2631 :     PyDictObject *mp = (PyDictObject *)op;
; 2632 :     PyDictKeyEntry *ep;
; 2633 :     PyObject **value_addr;
; 2634 : 
; 2635 :     ep = (mp->ma_keys->dk_lookup)(mp, key, hash, &value_addr);

  00004	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]
  00008	4c 8d 4c 24 30	 lea	 r9, QWORD PTR value_addr$[rsp]
  0000d	ff 50 10	 call	 QWORD PTR [rax+16]

; 2636 :     return (ep == NULL) ? -1 : (*value_addr != NULL);

  00010	48 85 c0	 test	 rax, rax
  00013	75 08		 jne	 SHORT $LN3@PyDict_Con@2
  00015	83 c8 ff	 or	 eax, -1

; 2637 : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
$LN3@PyDict_Con@2:

; 2636 :     return (ep == NULL) ? -1 : (*value_addr != NULL);

  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR value_addr$[rsp]
  00022	33 c0		 xor	 eax, eax
  00024	48 39 01	 cmp	 QWORD PTR [rcx], rax
  00027	0f 95 c0	 setne	 al

; 2637 : }

  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	c3		 ret	 0
_PyDict_Contains ENDP
_TEXT	ENDS
PUBLIC	_PyDict_GetItemId
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyDict_GetItemId DD imagerel $LN4
	DD	imagerel $LN4+44
	DD	imagerel $unwind$_PyDict_GetItemId
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyDict_GetItemId DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyDict_GetItemId
_TEXT	SEGMENT
dp$ = 48
key$ = 56
_PyDict_GetItemId PROC					; COMDAT

; 2745 : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 2746 :     PyObject *kv;
; 2747 :     kv = _PyUnicode_FromId(key); /* borrowed */

  00009	48 8b ca	 mov	 rcx, rdx
  0000c	e8 00 00 00 00	 call	 _PyUnicode_FromId

; 2748 :     if (kv == NULL)

  00011	48 85 c0	 test	 rax, rax
  00014	75 06		 jne	 SHORT $LN1@PyDict_Get@4

; 2751 : }

  00016	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001a	5b		 pop	 rbx
  0001b	c3		 ret	 0
$LN1@PyDict_Get@4:

; 2749 :         return NULL;
; 2750 :     return PyDict_GetItem(dp, kv);

  0001c	48 8b d0	 mov	 rdx, rax
  0001f	48 8b cb	 mov	 rcx, rbx

; 2751 : }

  00022	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00026	5b		 pop	 rbx
  00027	e9 00 00 00 00	 jmp	 PyDict_GetItem
_PyDict_GetItemId ENDP
_TEXT	ENDS
PUBLIC	PyDict_GetItemString
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_GetItemString DD imagerel $LN4
	DD	imagerel $LN4+76
	DD	imagerel $unwind$PyDict_GetItemString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_GetItemString DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyDict_GetItemString
_TEXT	SEGMENT
v$ = 48
key$ = 56
PyDict_GetItemString PROC				; COMDAT

; 2757 : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b d9	 mov	 rbx, rcx

; 2758 :     PyObject *kv, *rv;
; 2759 :     kv = PyUnicode_FromString(key);

  0000d	48 8b ca	 mov	 rcx, rdx
  00010	e8 00 00 00 00	 call	 PyUnicode_FromString
  00015	48 8b f8	 mov	 rdi, rax

; 2760 :     if (kv == NULL)

  00018	48 85 c0	 test	 rax, rax
  0001b	75 0b		 jne	 SHORT $LN1@PyDict_Get@5

; 2765 : }

  0001d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00022	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00026	5f		 pop	 rdi
  00027	c3		 ret	 0
$LN1@PyDict_Get@5:

; 2761 :         return NULL;
; 2762 :     rv = PyDict_GetItem(v, kv);

  00028	48 8b d0	 mov	 rdx, rax
  0002b	48 8b cb	 mov	 rcx, rbx
  0002e	e8 00 00 00 00	 call	 PyDict_GetItem

; 2763 :     Py_DECREF(kv);

  00033	48 8b cf	 mov	 rcx, rdi
  00036	48 8b d8	 mov	 rbx, rax
  00039	e8 00 00 00 00	 call	 _Py_DecRef

; 2764 :     return rv;

  0003e	48 8b c3	 mov	 rax, rbx

; 2765 : }

  00041	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00046	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004a	5f		 pop	 rdi
  0004b	c3		 ret	 0
PyDict_GetItemString ENDP
_TEXT	ENDS
PUBLIC	PyDict_DelItemString
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_DelItemString DD imagerel $LN4
	DD	imagerel $LN4+77
	DD	imagerel $unwind$PyDict_DelItemString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_DelItemString DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyDict_DelItemString
_TEXT	SEGMENT
v$ = 48
key$ = 56
PyDict_DelItemString PROC				; COMDAT

; 2793 : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b d9	 mov	 rbx, rcx

; 2794 :     PyObject *kv;
; 2795 :     int err;
; 2796 :     kv = PyUnicode_FromString(key);

  0000d	48 8b ca	 mov	 rcx, rdx
  00010	e8 00 00 00 00	 call	 PyUnicode_FromString
  00015	48 8b f8	 mov	 rdi, rax

; 2797 :     if (kv == NULL)

  00018	48 85 c0	 test	 rax, rax
  0001b	75 0e		 jne	 SHORT $LN1@PyDict_Del@2

; 2798 :         return -1;

  0001d	83 c8 ff	 or	 eax, -1

; 2802 : }

  00020	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00025	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00029	5f		 pop	 rdi
  0002a	c3		 ret	 0
$LN1@PyDict_Del@2:

; 2799 :     err = PyDict_DelItem(v, kv);

  0002b	48 8b d0	 mov	 rdx, rax
  0002e	48 8b cb	 mov	 rcx, rbx
  00031	e8 00 00 00 00	 call	 PyDict_DelItem

; 2800 :     Py_DECREF(kv);

  00036	48 8b cf	 mov	 rcx, rdi
  00039	8b d8		 mov	 ebx, eax
  0003b	e8 00 00 00 00	 call	 _Py_DecRef

; 2801 :     return err;

  00040	8b c3		 mov	 eax, ebx

; 2802 : }

  00042	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00047	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004b	5f		 pop	 rdi
  0004c	c3		 ret	 0
PyDict_DelItemString ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ ; `string'
PUBLIC	??_C@_0N@LFMINDDK@dictiter_new?$AA@		; `string'
EXTRN	_PyGC_generation0:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$dictiter_new DD imagerel dictiter_new
	DD	imagerel dictiter_new+398
	DD	imagerel $unwind$dictiter_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictiter_new DD 084a01H
	DD	08744aH
	DD	0a540fH
	DD	09340fH
	DD	0600b520fH
xdata	ENDS
;	COMDAT ??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
CONST	SEGMENT
??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ DB 'GC object alread'
	DB	'y tracked', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LFMINDDK@dictiter_new?$AA@
CONST	SEGMENT
??_C@_0N@LFMINDDK@dictiter_new?$AA@ DB 'dictiter_new', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\dictobject.c
CONST	ENDS
;	COMDAT dictiter_new
_TEXT	SEGMENT
dict$ = 64
itertype$ = 72
dictiter_new PROC					; COMDAT

; 2817 : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	56		 push	 rsi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b ea	 mov	 rbp, rdx
  00012	48 8b f1	 mov	 rsi, rcx

; 2818 :     dictiterobject *di;
; 2819 :     di = PyObject_GC_New(dictiterobject, itertype);

  00015	e8 00 00 00 00	 call	 _Py_PXCTX
  0001a	48 8b cd	 mov	 rcx, rbp
  0001d	85 c0		 test	 eax, eax
  0001f	74 07		 je	 SHORT $LN12@dictiter_n
  00021	e8 00 00 00 00	 call	 _PxObject_New
  00026	eb 05		 jmp	 SHORT $LN21@dictiter_n
$LN12@dictiter_n:
  00028	e8 00 00 00 00	 call	 _PyObject_GC_New
$LN21@dictiter_n:
  0002d	48 8b d8	 mov	 rbx, rax

; 2820 :     if (di == NULL)

  00030	48 85 c0	 test	 rax, rax
  00033	75 10		 jne	 SHORT $LN9@dictiter_n

; 2838 : }

  00035	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  0003a	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  0003f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00043	5e		 pop	 rsi
  00044	c3		 ret	 0
$LN9@dictiter_n:
  00045	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi

; 2821 :         return NULL;
; 2822 :     Py_INCREF(dict);

  0004a	e8 00 00 00 00	 call	 _Py_PXCTX
  0004f	85 c0		 test	 eax, eax
  00051	75 32		 jne	 SHORT $LN17@dictiter_n
  00053	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0005a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00061	4c 8b ce	 mov	 r9, rsi
  00064	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0006a	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00072	e8 00 00 00 00	 call	 _PyParallel_Guard
  00077	85 c0		 test	 eax, eax
  00079	75 06		 jne	 SHORT $LN16@dictiter_n
  0007b	f6 46 20 20	 test	 BYTE PTR [rsi+32], 32	; 00000020H
  0007f	74 04		 je	 SHORT $LN17@dictiter_n
$LN16@dictiter_n:
  00081	48 ff 46 50	 inc	 QWORD PTR [rsi+80]
$LN17@dictiter_n:

; 2823 :     di->di_dict = dict;

  00085	48 89 73 60	 mov	 QWORD PTR [rbx+96], rsi

; 2824 :     di->di_used = dict->ma_used;

  00089	48 8b 46 60	 mov	 rax, QWORD PTR [rsi+96]

; 2825 :     di->di_pos = 0;

  0008d	33 ff		 xor	 edi, edi
  0008f	48 89 43 68	 mov	 QWORD PTR [rbx+104], rax
  00093	48 89 7b 70	 mov	 QWORD PTR [rbx+112], rdi

; 2826 :     di->len = dict->ma_used;

  00097	48 8b 46 60	 mov	 rax, QWORD PTR [rsi+96]
  0009b	48 89 83 80 00
	00 00		 mov	 QWORD PTR [rbx+128], rax

; 2827 :     if (itertype == &PyDictIterItem_Type) {

  000a2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDictIterItem_Type
  000a9	48 3b e8	 cmp	 rbp, rax
  000ac	75 2e		 jne	 SHORT $LN8@dictiter_n

; 2828 :         di->di_result = PyTuple_Pack(2, Py_None, Py_None);

  000ae	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  000b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_NoneStruct
  000bc	8d 4f 02	 lea	 ecx, QWORD PTR [rdi+2]
  000bf	e8 00 00 00 00	 call	 PyTuple_Pack
  000c4	48 89 43 78	 mov	 QWORD PTR [rbx+120], rax

; 2829 :         if (di->di_result == NULL) {

  000c8	48 85 c0	 test	 rax, rax
  000cb	75 13		 jne	 SHORT $LN6@dictiter_n

; 2830 :             Py_DECREF(di);

  000cd	48 8b cb	 mov	 rcx, rbx
  000d0	e8 00 00 00 00	 call	 _Py_DecRef

; 2831 :             return NULL;

  000d5	33 c0		 xor	 eax, eax
  000d7	e9 9d 00 00 00	 jmp	 $LN20@dictiter_n
$LN8@dictiter_n:

; 2832 :         }
; 2833 :     }
; 2834 :     else
; 2835 :         di->di_result = NULL;

  000dc	48 89 7b 78	 mov	 QWORD PTR [rbx+120], rdi
$LN6@dictiter_n:

; 2836 :     _PyObject_GC_TRACK(di);

  000e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  000e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@LFMINDDK@dictiter_new?$AA@
  000ee	4c 8b cb	 mov	 r9, rbx
  000f1	41 b8 14 0b 00
	00		 mov	 r8d, 2836		; 00000b14H
  000f7	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ff	e8 00 00 00 00	 call	 _PyParallel_Guard
  00104	85 c0		 test	 eax, eax
  00106	75 6e		 jne	 SHORT $LN2@dictiter_n
  00108	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  0010f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@LFMINDDK@dictiter_new?$AA@
  00116	4c 8b cb	 mov	 r9, rbx
  00119	41 b8 14 0b 00
	00		 mov	 r8d, 2836		; 00000b14H
  0011f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00127	e8 00 00 00 00	 call	 _PyParallel_Guard
  0012c	85 c0		 test	 eax, eax
  0012e	75 04		 jne	 SHORT $LN15@dictiter_n
  00130	48 8d 7b e8	 lea	 rdi, QWORD PTR [rbx-24]
$LN15@dictiter_n:
  00134	48 83 7f 10 fe	 cmp	 QWORD PTR [rdi+16], -2
  00139	74 0c		 je	 SHORT $LN1@dictiter_n
  0013b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  00142	e8 00 00 00 00	 call	 Py_FatalError
$LN1@dictiter_n:
  00147	48 c7 47 10 fd
	ff ff ff	 mov	 QWORD PTR [rdi+16], -3
  0014f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00156	48 89 07	 mov	 QWORD PTR [rdi], rax
  00159	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00160	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00164	48 89 4f 08	 mov	 QWORD PTR [rdi+8], rcx
  00168	48 89 39	 mov	 QWORD PTR [rcx], rdi
  0016b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00172	48 89 78 08	 mov	 QWORD PTR [rax+8], rdi
$LN2@dictiter_n:

; 2837 :     return (PyObject *)di;

  00176	48 8b c3	 mov	 rax, rbx
$LN20@dictiter_n:
  00179	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 2838 : }

  0017e	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00183	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  00188	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0018c	5e		 pop	 rsi
  0018d	c3		 ret	 0
dictiter_new ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$dictiter_dealloc DD imagerel dictiter_dealloc
	DD	imagerel dictiter_dealloc+287
	DD	imagerel $unwind$dictiter_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictiter_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\dictobject.c
xdata	ENDS
;	COMDAT dictiter_dealloc
_TEXT	SEGMENT
di$ = 64
dictiter_dealloc PROC					; COMDAT

; 2842 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 2843 :     Py_XDECREF(di->di_dict);

  0000a	48 8b 59 60	 mov	 rbx, QWORD PTR [rcx+96]
  0000e	48 8b f9	 mov	 rdi, rcx
  00011	48 85 db	 test	 rbx, rbx
  00014	74 65		 je	 SHORT $LN7@dictiter_d
  00016	e8 00 00 00 00	 call	 _Py_PXCTX
  0001b	85 c0		 test	 eax, eax
  0001d	75 5c		 jne	 SHORT $LN7@dictiter_d
  0001f	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00023	a8 20		 test	 al, 32			; 00000020H
  00025	75 4c		 jne	 SHORT $LN15@dictiter_d
  00027	84 c0		 test	 al, al
  00029	78 48		 js	 SHORT $LN15@dictiter_d
  0002b	a8 02		 test	 al, 2
  0002d	75 4c		 jne	 SHORT $LN7@dictiter_d
  0002f	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00033	75 46		 jne	 SHORT $LN7@dictiter_d
  00035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00043	4c 8b cb	 mov	 r9, rbx
  00046	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0004c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00054	e8 00 00 00 00	 call	 _PyParallel_Guard
  00059	48 8b cb	 mov	 rcx, rbx
  0005c	85 c0		 test	 eax, eax
  0005e	74 07		 je	 SHORT $LN20@dictiter_d
  00060	e8 00 00 00 00	 call	 _Px_Dealloc
  00065	eb 14		 jmp	 SHORT $LN7@dictiter_d
$LN20@dictiter_d:
  00067	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0006b	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00071	eb 08		 jmp	 SHORT $LN7@dictiter_d
$LN15@dictiter_d:
  00073	48 8b cb	 mov	 rcx, rbx
  00076	e8 00 00 00 00	 call	 Px_DecRef
$LN7@dictiter_d:

; 2844 :     Py_XDECREF(di->di_result);

  0007b	48 8b 5f 78	 mov	 rbx, QWORD PTR [rdi+120]
  0007f	48 85 db	 test	 rbx, rbx
  00082	0f 84 85 00 00
	00		 je	 $LN3@dictiter_d
  00088	e8 00 00 00 00	 call	 _Py_PXCTX
  0008d	85 c0		 test	 eax, eax
  0008f	75 7c		 jne	 SHORT $LN3@dictiter_d
  00091	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00095	a8 20		 test	 al, 32			; 00000020H
  00097	75 6c		 jne	 SHORT $LN26@dictiter_d
  00099	84 c0		 test	 al, al
  0009b	78 68		 js	 SHORT $LN26@dictiter_d
  0009d	a8 02		 test	 al, 2
  0009f	75 6c		 jne	 SHORT $LN3@dictiter_d
  000a1	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000a5	75 66		 jne	 SHORT $LN3@dictiter_d
  000a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000b5	4c 8b cb	 mov	 r9, rbx
  000b8	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000be	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c6	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cb	48 8b cb	 mov	 rcx, rbx
  000ce	85 c0		 test	 eax, eax
  000d0	74 17		 je	 SHORT $LN31@dictiter_d
  000d2	e8 00 00 00 00	 call	 _Px_Dealloc

; 2845 :     PyObject_GC_Del(di);

  000d7	48 8b cf	 mov	 rcx, rdi

; 2846 : }

  000da	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000df	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000e3	5f		 pop	 rdi
  000e4	e9 00 00 00 00	 jmp	 PyObject_GC_Del

; 2844 :     Py_XDECREF(di->di_result);

$LN31@dictiter_d:
  000e9	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000ed	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 2845 :     PyObject_GC_Del(di);

  000f3	48 8b cf	 mov	 rcx, rdi

; 2846 : }

  000f6	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000fb	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ff	5f		 pop	 rdi
  00100	e9 00 00 00 00	 jmp	 PyObject_GC_Del

; 2844 :     Py_XDECREF(di->di_result);

$LN26@dictiter_d:
  00105	48 8b cb	 mov	 rcx, rbx
  00108	e8 00 00 00 00	 call	 Px_DecRef
$LN3@dictiter_d:

; 2845 :     PyObject_GC_Del(di);

  0010d	48 8b cf	 mov	 rcx, rdi

; 2846 : }

  00110	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00115	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00119	5f		 pop	 rdi
  0011a	e9 00 00 00 00	 jmp	 PyObject_GC_Del
dictiter_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@JBECEFGB@dictiter_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictiter_traverse DD imagerel dictiter_traverse
	DD	imagerel dictiter_traverse+152
	DD	imagerel $unwind$dictiter_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictiter_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BC@JBECEFGB@dictiter_traverse?$AA@
CONST	SEGMENT
??_C@_0BC@JBECEFGB@dictiter_traverse?$AA@ DB 'dictiter_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT dictiter_traverse
_TEXT	SEGMENT
di$ = 48
visit$ = 56
arg$ = 64
dictiter_traverse PROC					; COMDAT

; 2850 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 2851 :     Py_VISIT(di->di_dict);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN9@dictiter_t
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@JBECEFGB@dictiter_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 23 0b 00
	00		 mov	 r8d, 2851		; 00000b23H
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@dictiter_t:
  0003d	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN11@dictiter_t
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 39		 jne	 SHORT $LN13@dictiter_t
$LN11@dictiter_t:

; 2852 :     Py_VISIT(di->di_result);

  0004f	e8 00 00 00 00	 call	 _Py_PXCTX
  00054	85 c0		 test	 eax, eax
  00056	74 1c		 je	 SHORT $LN3@dictiter_t
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@JBECEFGB@dictiter_traverse?$AA@
  00066	45 33 c9	 xor	 r9d, r9d
  00069	41 b8 24 0b 00
	00		 mov	 r8d, 2852		; 00000b24H
  0006f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@dictiter_t:
  00074	48 8b 4b 78	 mov	 rcx, QWORD PTR [rbx+120]
  00078	48 85 c9	 test	 rcx, rcx
  0007b	74 09		 je	 SHORT $LN5@dictiter_t
  0007d	48 8b d7	 mov	 rdx, rdi
  00080	ff d6		 call	 rsi
  00082	85 c0		 test	 eax, eax
  00084	75 02		 jne	 SHORT $LN13@dictiter_t
$LN5@dictiter_t:

; 2853 :     return 0;

  00086	33 c0		 xor	 eax, eax
$LN13@dictiter_t:

; 2854 : }

  00088	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00092	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00096	5f		 pop	 rdi
  00097	c3		 ret	 0
dictiter_traverse ENDP
_TEXT	ENDS
EXTRN	PyLong_FromSize_t:PROC
; Function compile flags: /Ogtpy
;	COMDAT dictiter_len
_TEXT	SEGMENT
di$ = 8
dictiter_len PROC					; COMDAT

; 2859 :     Py_ssize_t len = 0;
; 2860 :     if (di->di_dict != NULL && di->di_used == di->di_dict->ma_used)

  00000	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  00004	33 d2		 xor	 edx, edx
  00006	48 85 c0	 test	 rax, rax
  00009	74 11		 je	 SHORT $LN1@dictiter_l
  0000b	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0000f	48 39 41 68	 cmp	 QWORD PTR [rcx+104], rax
  00013	75 07		 jne	 SHORT $LN1@dictiter_l

; 2861 :         len = di->len;

  00015	48 8b 91 80 00
	00 00		 mov	 rdx, QWORD PTR [rcx+128]
$LN1@dictiter_l:

; 2862 :     return PyLong_FromSize_t(len);

  0001c	48 8b ca	 mov	 rcx, rdx

; 2863 : }

  0001f	e9 00 00 00 00	 jmp	 PyLong_FromSize_t
dictiter_len ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@KOANJCHL@dictionary?5changed?5size?5during?5i@ ; `string'
EXTRN	PyExc_RuntimeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictiter_iternextkey DD imagerel dictiter_iternextkey
	DD	imagerel dictiter_iternextkey+215
	DD	imagerel $unwind$dictiter_iternextkey
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictiter_iternextkey DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0CJ@KOANJCHL@dictionary?5changed?5size?5during?5i@
CONST	SEGMENT
??_C@_0CJ@KOANJCHL@dictionary?5changed?5size?5during?5i@ DB 'dictionary c'
	DB	'hanged size during iteration', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT dictiter_iternextkey
_TEXT	SEGMENT
di$ = 48
dictiter_iternextkey PROC				; COMDAT

; 2882 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2883 :     PyObject *key;
; 2884 :     register Py_ssize_t i, mask, offset;
; 2885 :     register PyDictKeysObject *k;
; 2886 :     PyDictObject *d = di->di_dict;

  00006	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  0000a	48 8b d9	 mov	 rbx, rcx

; 2887 :     PyObject **value_ptr;
; 2888 : 
; 2889 :     if (d == NULL)

  0000d	48 85 d2	 test	 rdx, rdx

; 2890 :         return NULL;

  00010	0f 84 b9 00 00
	00		 je	 $LN14@dictiter_i

; 2891 :     assert (PyDict_Check(d));
; 2892 : 
; 2893 :     if (di->di_used != d->ma_used) {

  00016	48 8b 42 60	 mov	 rax, QWORD PTR [rdx+96]
  0001a	48 39 41 68	 cmp	 QWORD PTR [rcx+104], rax
  0001e	74 23		 je	 SHORT $LN7@dictiter_i

; 2894 :         PyErr_SetString(PyExc_RuntimeError,
; 2895 :                         "dictionary changed size during iteration");

  00020	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@KOANJCHL@dictionary?5changed?5size?5during?5i@
  0002e	e8 00 00 00 00	 call	 PyErr_SetString

; 2896 :         di->di_used = -1; /* Make this state sticky */

  00033	48 c7 43 68 ff
	ff ff ff	 mov	 QWORD PTR [rbx+104], -1

; 2928 :     return NULL;

  0003b	33 c0		 xor	 eax, eax

; 2929 : }

  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5b		 pop	 rbx
  00042	c3		 ret	 0
$LN7@dictiter_i:

; 2897 :         return NULL;
; 2898 :     }
; 2899 : 
; 2900 :     i = di->di_pos;

  00043	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]

; 2901 :     if (i < 0)

  00047	48 85 c9	 test	 rcx, rcx
  0004a	78 73		 js	 SHORT $fail$22470

; 2902 :         goto fail;
; 2903 :     k = d->ma_keys;
; 2904 :     if (d->ma_values) {

  0004c	48 8b 42 70	 mov	 rax, QWORD PTR [rdx+112]
  00050	4c 8b 52 68	 mov	 r10, QWORD PTR [rdx+104]
  00054	48 85 c0	 test	 rax, rax
  00057	74 0c		 je	 SHORT $LN5@dictiter_i

; 2905 :         value_ptr = &d->ma_values[i];

  00059	48 8d 04 c8	 lea	 rax, QWORD PTR [rax+rcx*8]

; 2906 :         offset = sizeof(PyObject *);

  0005d	41 b9 08 00 00
	00		 mov	 r9d, 8

; 2907 :     }
; 2908 :     else {

  00063	eb 0f		 jmp	 SHORT $LN4@dictiter_i
$LN5@dictiter_i:

; 2909 :         value_ptr = &k->dk_entries[i].me_value;

  00065	48 8d 44 49 06	 lea	 rax, QWORD PTR [rcx+rcx*2+6]

; 2910 :         offset = sizeof(PyDictKeyEntry);

  0006a	41 b9 18 00 00
	00		 mov	 r9d, 24
  00070	49 8d 04 c2	 lea	 rax, QWORD PTR [r10+rax*8]
$LN4@dictiter_i:

; 2911 :     }
; 2912 :     mask = DK_SIZE(k)-1;

  00074	4d 8b 42 08	 mov	 r8, QWORD PTR [r10+8]
  00078	49 ff c8	 dec	 r8

; 2913 :     while (i <= mask && *value_ptr == NULL) {

  0007b	49 3b c8	 cmp	 rcx, r8
  0007e	7f 11		 jg	 SHORT $LN13@dictiter_i
$LL3@dictiter_i:
  00080	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00084	75 0b		 jne	 SHORT $LN13@dictiter_i

; 2914 :         value_ptr = (PyObject **)(((char *)value_ptr) + offset);
; 2915 :         i++;

  00086	48 ff c1	 inc	 rcx
  00089	49 03 c1	 add	 rax, r9
  0008c	49 3b c8	 cmp	 rcx, r8
  0008f	7e ef		 jle	 SHORT $LL3@dictiter_i
$LN13@dictiter_i:

; 2916 :     }
; 2917 :     di->di_pos = i+1;

  00091	48 8d 41 01	 lea	 rax, QWORD PTR [rcx+1]
  00095	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax

; 2918 :     if (i > mask)

  00099	49 3b c8	 cmp	 rcx, r8
  0009c	7f 21		 jg	 SHORT $fail$22470

; 2919 :         goto fail;
; 2920 :     di->len--;

  0009e	48 ff 8b 80 00
	00 00		 dec	 QWORD PTR [rbx+128]

; 2921 :     key = k->dk_entries[i].me_key;

  000a5	48 8d 04 49	 lea	 rax, QWORD PTR [rcx+rcx*2]
  000a9	49 8b 5c c2 28	 mov	 rbx, QWORD PTR [r10+rax*8+40]

; 2922 :     Py_INCREF(key);

  000ae	48 8b cb	 mov	 rcx, rbx
  000b1	e8 00 00 00 00	 call	 _Py_IncRef

; 2923 :     return key;

  000b6	48 8b c3	 mov	 rax, rbx

; 2929 : }

  000b9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000bd	5b		 pop	 rbx
  000be	c3		 ret	 0
$fail$22470:

; 2924 : 
; 2925 : fail:
; 2926 :     Py_DECREF(d);

  000bf	48 8b ca	 mov	 rcx, rdx
  000c2	e8 00 00 00 00	 call	 _Py_DecRef

; 2927 :     di->di_dict = NULL;

  000c7	48 c7 43 60 00
	00 00 00	 mov	 QWORD PTR [rbx+96], 0
$LN14@dictiter_i:

; 2928 :     return NULL;

  000cf	33 c0		 xor	 eax, eax

; 2929 : }

  000d1	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d5	5b		 pop	 rbx
  000d6	c3		 ret	 0
dictiter_iternextkey ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictiter_iternextvalue DD imagerel dictiter_iternextvalue
	DD	imagerel dictiter_iternextvalue+71
	DD	imagerel $unwind$dictiter_iternextvalue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$dictiter_iternextvalue DD imagerel dictiter_iternextvalue+71
	DD	imagerel dictiter_iternextvalue+174
	DD	imagerel $chain$0$dictiter_iternextvalue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$dictiter_iternextvalue DD imagerel dictiter_iternextvalue+174
	DD	imagerel dictiter_iternextvalue+214
	DD	imagerel $chain$2$dictiter_iternextvalue
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$dictiter_iternextvalue DD 020021H
	DD	063400H
	DD	imagerel dictiter_iternextvalue
	DD	imagerel dictiter_iternextvalue+71
	DD	imagerel $unwind$dictiter_iternextvalue
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$dictiter_iternextvalue DD 020521H
	DD	063405H
	DD	imagerel dictiter_iternextvalue
	DD	imagerel dictiter_iternextvalue+71
	DD	imagerel $unwind$dictiter_iternextvalue
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictiter_iternextvalue DD 020601H
	DD	070023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT dictiter_iternextvalue
_TEXT	SEGMENT
di$ = 48
dictiter_iternextvalue PROC				; COMDAT

; 2965 : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2966 :     PyObject *value;
; 2967 :     register Py_ssize_t i, mask, offset;
; 2968 :     PyDictObject *d = di->di_dict;

  00006	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  0000a	48 8b f9	 mov	 rdi, rcx

; 2969 :     PyObject **value_ptr;
; 2970 : 
; 2971 :     if (d == NULL)

  0000d	48 85 d2	 test	 rdx, rdx

; 2972 :         return NULL;

  00010	74 25		 je	 SHORT $LN19@dictiter_i@2

; 2973 :     assert (PyDict_Check(d));
; 2974 : 
; 2975 :     if (di->di_used != d->ma_used) {

  00012	48 8b 42 60	 mov	 rax, QWORD PTR [rdx+96]
  00016	48 39 41 68	 cmp	 QWORD PTR [rcx+104], rax
  0001a	74 23		 je	 SHORT $LN8@dictiter_i@2

; 2976 :         PyErr_SetString(PyExc_RuntimeError,
; 2977 :                         "dictionary changed size during iteration");

  0001c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00023	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@KOANJCHL@dictionary?5changed?5size?5during?5i@
  0002a	e8 00 00 00 00	 call	 PyErr_SetString

; 2978 :         di->di_used = -1; /* Make this state sticky */

  0002f	48 c7 47 68 ff
	ff ff ff	 mov	 QWORD PTR [rdi+104], -1
$LN19@dictiter_i@2:

; 2979 :         return NULL;

  00037	33 c0		 xor	 eax, eax

; 3010 : }

  00039	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003d	5f		 pop	 rdi
  0003e	c3		 ret	 0
$LN8@dictiter_i@2:

; 2980 :     }
; 2981 : 
; 2982 :     i = di->di_pos;
; 2983 :     mask = DK_SIZE(d->ma_keys)-1;

  0003f	4c 8b 4a 68	 mov	 r9, QWORD PTR [rdx+104]
  00043	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00047	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0004c	4d 8b 41 08	 mov	 r8, QWORD PTR [r9+8]
  00050	49 ff c8	 dec	 r8

; 2984 :     if (i < 0 || i > mask)

  00053	48 85 c9	 test	 rcx, rcx
  00056	78 39		 js	 SHORT $fail$22521
  00058	49 3b c8	 cmp	 rcx, r8
  0005b	7f 34		 jg	 SHORT $fail$22521

; 2985 :         goto fail;
; 2986 :     if (d->ma_values) {

  0005d	48 8b 42 70	 mov	 rax, QWORD PTR [rdx+112]
  00061	48 85 c0	 test	 rax, rax
  00064	74 0b		 je	 SHORT $LN5@dictiter_i@2

; 2987 :         value_ptr = &d->ma_values[i];

  00066	48 8d 1c c8	 lea	 rbx, QWORD PTR [rax+rcx*8]

; 2988 :         offset = sizeof(PyObject *);

  0006a	b8 08 00 00 00	 mov	 eax, 8

; 2989 :     }
; 2990 :     else {

  0006f	eb 0f		 jmp	 SHORT $LL3@dictiter_i@2
$LN5@dictiter_i@2:

; 2991 :         value_ptr = &d->ma_keys->dk_entries[i].me_value;

  00071	48 8d 44 49 06	 lea	 rax, QWORD PTR [rcx+rcx*2+6]
  00076	49 8d 1c c1	 lea	 rbx, QWORD PTR [r9+rax*8]

; 2992 :         offset = sizeof(PyDictKeyEntry);

  0007a	b8 18 00 00 00	 mov	 eax, 24
  0007f	90		 npad	 1
$LL3@dictiter_i@2:

; 2993 :     }
; 2994 :     while (i <= mask && *value_ptr == NULL) {

  00080	48 83 3b 00	 cmp	 QWORD PTR [rbx], 0
  00084	75 28		 jne	 SHORT $LN2@dictiter_i@2

; 2995 :         value_ptr = (PyObject **)(((char *)value_ptr) + offset);
; 2996 :         i++;

  00086	48 ff c1	 inc	 rcx
  00089	48 03 d8	 add	 rbx, rax

; 2997 :         if (i > mask)

  0008c	49 3b c8	 cmp	 rcx, r8
  0008f	7e ef		 jle	 SHORT $LL3@dictiter_i@2
$fail$22521:

; 3005 : 
; 3006 : fail:
; 3007 :     Py_DECREF(d);

  00091	48 8b ca	 mov	 rcx, rdx
  00094	e8 00 00 00 00	 call	 _Py_DecRef
  00099	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 3008 :     di->di_dict = NULL;

  0009e	48 c7 47 60 00
	00 00 00	 mov	 QWORD PTR [rdi+96], 0

; 3009 :     return NULL;

  000a6	33 c0		 xor	 eax, eax

; 3010 : }

  000a8	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ac	5f		 pop	 rdi
  000ad	c3		 ret	 0
$LN2@dictiter_i@2:

; 2998 :             goto fail;
; 2999 :     }
; 3000 :     di->di_pos = i+1;
; 3001 :     di->len--;

  000ae	48 ff 8f 80 00
	00 00		 dec	 QWORD PTR [rdi+128]
  000b5	48 8d 41 01	 lea	 rax, QWORD PTR [rcx+1]
  000b9	48 89 47 70	 mov	 QWORD PTR [rdi+112], rax

; 3002 :     value = *value_ptr;

  000bd	48 8b 1b	 mov	 rbx, QWORD PTR [rbx]

; 3003 :     Py_INCREF(value);

  000c0	48 8b cb	 mov	 rcx, rbx
  000c3	e8 00 00 00 00	 call	 _Py_IncRef

; 3004 :     return value;

  000c8	48 8b c3	 mov	 rax, rbx
  000cb	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 3010 : }

  000d0	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d4	5f		 pop	 rdi
  000d5	c3		 ret	 0
dictiter_iternextvalue ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictiter_iternextitem DD imagerel dictiter_iternextitem
	DD	imagerel dictiter_iternextitem+345
	DD	imagerel $unwind$dictiter_iternextitem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictiter_iternextitem DD 0a6701H
	DD	076467H
	DD	06345eH
	DD	097410H
	DD	085410H
	DD	0c00c3210H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT dictiter_iternextitem
_TEXT	SEGMENT
di$ = 48
dictiter_iternextitem PROC				; COMDAT

; 3046 : {

  00000	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  00005	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0000a	41 54		 push	 r12
  0000c	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 3047 :     PyObject *key, *value, *result = di->di_result;
; 3048 :     register Py_ssize_t i, mask, offset;
; 3049 :     PyDictObject *d = di->di_dict;

  00010	4c 8b 61 60	 mov	 r12, QWORD PTR [rcx+96]
  00014	48 8b 69 78	 mov	 rbp, QWORD PTR [rcx+120]
  00018	48 8b f9	 mov	 rdi, rcx

; 3050 :     PyObject **value_ptr;
; 3051 : 
; 3052 :     if (d == NULL)

  0001b	4d 85 e4	 test	 r12, r12

; 3053 :         return NULL;

  0001e	74 26		 je	 SHORT $LN20@dictiter_i@3

; 3054 :     assert (PyDict_Check(d));
; 3055 : 
; 3056 :     if (di->di_used != d->ma_used) {

  00020	49 8b 44 24 60	 mov	 rax, QWORD PTR [r12+96]
  00025	48 39 41 68	 cmp	 QWORD PTR [rcx+104], rax
  00029	74 2e		 je	 SHORT $LN10@dictiter_i@3

; 3057 :         PyErr_SetString(PyExc_RuntimeError,
; 3058 :                         "dictionary changed size during iteration");

  0002b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00032	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@KOANJCHL@dictionary?5changed?5size?5during?5i@
  00039	e8 00 00 00 00	 call	 PyErr_SetString

; 3059 :         di->di_used = -1; /* Make this state sticky */

  0003e	48 c7 47 68 ff
	ff ff ff	 mov	 QWORD PTR [rdi+104], -1
$LN20@dictiter_i@3:

; 3060 :         return NULL;

  00046	33 c0		 xor	 eax, eax

; 3105 : }

  00048	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  0004d	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00052	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00056	41 5c		 pop	 r12
  00058	c3		 ret	 0
$LN10@dictiter_i@3:
  00059	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx

; 3061 :     }
; 3062 : 
; 3063 :     i = di->di_pos;

  0005e	48 8b 59 70	 mov	 rbx, QWORD PTR [rcx+112]
  00062	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi

; 3064 :     if (i < 0)

  00067	48 85 db	 test	 rbx, rbx
  0006a	0f 88 bc 00 00
	00		 js	 $fail$22573

; 3065 :         goto fail;
; 3066 :     mask = DK_SIZE(d->ma_keys)-1;

  00070	49 8b 54 24 68	 mov	 rdx, QWORD PTR [r12+104]

; 3067 :     if (d->ma_values) {

  00075	49 8b 44 24 70	 mov	 rax, QWORD PTR [r12+112]
  0007a	48 8b 4a 08	 mov	 rcx, QWORD PTR [rdx+8]
  0007e	48 ff c9	 dec	 rcx
  00081	48 85 c0	 test	 rax, rax
  00084	74 0b		 je	 SHORT $LN8@dictiter_i@3

; 3068 :         value_ptr = &d->ma_values[i];

  00086	48 8d 34 d8	 lea	 rsi, QWORD PTR [rax+rbx*8]

; 3069 :         offset = sizeof(PyObject *);

  0008a	b8 08 00 00 00	 mov	 eax, 8

; 3070 :     }
; 3071 :     else {

  0008f	eb 0e		 jmp	 SHORT $LN14@dictiter_i@3
$LN8@dictiter_i@3:

; 3072 :         value_ptr = &d->ma_keys->dk_entries[i].me_value;

  00091	48 8d 44 5b 06	 lea	 rax, QWORD PTR [rbx+rbx*2+6]
  00096	48 8d 34 c2	 lea	 rsi, QWORD PTR [rdx+rax*8]

; 3073 :         offset = sizeof(PyDictKeyEntry);

  0009a	b8 18 00 00 00	 mov	 eax, 24
$LN14@dictiter_i@3:

; 3074 :     }
; 3075 :     while (i <= mask && *value_ptr == NULL) {

  0009f	48 3b d9	 cmp	 rbx, rcx
  000a2	7f 11		 jg	 SHORT $LN16@dictiter_i@3
$LL6@dictiter_i@3:
  000a4	48 83 3e 00	 cmp	 QWORD PTR [rsi], 0
  000a8	75 0b		 jne	 SHORT $LN16@dictiter_i@3

; 3076 :         value_ptr = (PyObject **)(((char *)value_ptr) + offset);
; 3077 :         i++;

  000aa	48 ff c3	 inc	 rbx
  000ad	48 03 f0	 add	 rsi, rax
  000b0	48 3b d9	 cmp	 rbx, rcx
  000b3	7e ef		 jle	 SHORT $LL6@dictiter_i@3
$LN16@dictiter_i@3:

; 3078 :     }
; 3079 :     di->di_pos = i+1;

  000b5	48 8d 43 01	 lea	 rax, QWORD PTR [rbx+1]
  000b9	48 89 47 70	 mov	 QWORD PTR [rdi+112], rax

; 3080 :     if (i > mask)

  000bd	48 3b d9	 cmp	 rbx, rcx
  000c0	7f 6a		 jg	 SHORT $fail$22573

; 3081 :         goto fail;
; 3082 : 
; 3083 :     if (result->ob_refcnt == 1) {

  000c2	48 83 7d 50 01	 cmp	 QWORD PTR [rbp+80], 1
  000c7	75 1c		 jne	 SHORT $LN3@dictiter_i@3

; 3084 :         Py_INCREF(result);

  000c9	48 8b cd	 mov	 rcx, rbp
  000cc	e8 00 00 00 00	 call	 _Py_IncRef

; 3085 :         Py_DECREF(PyTuple_GET_ITEM(result, 0));

  000d1	48 8b 4d 70	 mov	 rcx, QWORD PTR [rbp+112]
  000d5	e8 00 00 00 00	 call	 _Py_DecRef

; 3086 :         Py_DECREF(PyTuple_GET_ITEM(result, 1));

  000da	48 8b 4d 78	 mov	 rcx, QWORD PTR [rbp+120]
  000de	e8 00 00 00 00	 call	 _Py_DecRef

; 3087 :     } else {

  000e3	eb 12		 jmp	 SHORT $LN1@dictiter_i@3
$LN3@dictiter_i@3:

; 3088 :         result = PyTuple_New(2);

  000e5	b9 02 00 00 00	 mov	 ecx, 2
  000ea	e8 00 00 00 00	 call	 PyTuple_New
  000ef	48 8b e8	 mov	 rbp, rax

; 3089 :         if (result == NULL)

  000f2	48 85 c0	 test	 rax, rax

; 3090 :             return NULL;

  000f5	74 45		 je	 SHORT $LN19@dictiter_i@3
$LN1@dictiter_i@3:

; 3091 :     }
; 3092 :     di->len--;

  000f7	48 ff 8f 80 00
	00 00		 dec	 QWORD PTR [rdi+128]

; 3093 :     key = d->ma_keys->dk_entries[i].me_key;

  000fe	49 8b 44 24 68	 mov	 rax, QWORD PTR [r12+104]

; 3094 :     value = *value_ptr;

  00103	48 8b 3e	 mov	 rdi, QWORD PTR [rsi]
  00106	48 8d 0c 5b	 lea	 rcx, QWORD PTR [rbx+rbx*2]
  0010a	48 8b 5c c8 28	 mov	 rbx, QWORD PTR [rax+rcx*8+40]

; 3095 :     Py_INCREF(key);

  0010f	48 8b cb	 mov	 rcx, rbx
  00112	e8 00 00 00 00	 call	 _Py_IncRef

; 3096 :     Py_INCREF(value);

  00117	48 8b cf	 mov	 rcx, rdi
  0011a	e8 00 00 00 00	 call	 _Py_IncRef

; 3097 :     PyTuple_SET_ITEM(result, 0, key);

  0011f	48 89 5d 70	 mov	 QWORD PTR [rbp+112], rbx

; 3098 :     PyTuple_SET_ITEM(result, 1, value);

  00123	48 89 7d 78	 mov	 QWORD PTR [rbp+120], rdi

; 3099 :     return result;

  00127	48 8b c5	 mov	 rax, rbp
  0012a	eb 12		 jmp	 SHORT $LN18@dictiter_i@3
$fail$22573:

; 3100 : 
; 3101 : fail:
; 3102 :     Py_DECREF(d);

  0012c	49 8b cc	 mov	 rcx, r12
  0012f	e8 00 00 00 00	 call	 _Py_DecRef

; 3103 :     di->di_dict = NULL;

  00134	48 c7 47 60 00
	00 00 00	 mov	 QWORD PTR [rdi+96], 0
$LN19@dictiter_i@3:

; 3104 :     return NULL;

  0013c	33 c0		 xor	 eax, eax
$LN18@dictiter_i@3:
  0013e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00143	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]

; 3105 : }

  00148	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  0014d	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00152	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00156	41 5c		 pop	 r12
  00158	c3		 ret	 0
dictiter_iternextitem ENDP
_TEXT	ENDS
PUBLIC	??_C@_04IFNKFGDK@N?$CIN?$CJ?$AA@		; `string'
PUBLIC	??_C@_04BKLHDIKK@iter?$AA@			; `string'
EXTRN	Py_BuildValue:PROC
EXTRN	_PyObject_GetBuiltin:PROC
EXTRN	memcpy:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$dictiter_reduce DD imagerel dictiter_reduce
	DD	imagerel dictiter_reduce+518
	DD	imagerel $unwind$dictiter_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictiter_reduce DD 0c5401H
	DD	018d454H
	DD	01ec44cH
	DD	01d5436H
	DD	01c342eH
	DD	019010aH
	DD	060027003H
xdata	ENDS
;	COMDAT ??_C@_04IFNKFGDK@N?$CIN?$CJ?$AA@
CONST	SEGMENT
??_C@_04IFNKFGDK@N?$CIN?$CJ?$AA@ DB 'N(N)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BKLHDIKK@iter?$AA@
CONST	SEGMENT
??_C@_04BKLHDIKK@iter?$AA@ DB 'iter', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\dictobject.c
CONST	ENDS
;	COMDAT dictiter_reduce
_TEXT	SEGMENT
tmp$ = 48
di$ = 224
dictiter_reduce PROC					; COMDAT

; 3143 : {

  00000	40 56		 push	 rsi
  00002	57		 push	 rdi
  00003	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000a	48 8b f1	 mov	 rsi, rcx

; 3144 :     PyObject *list;
; 3145 :     dictiterobject tmp;
; 3146 : 
; 3147 :     list = PyList_New(0);

  0000d	33 c9		 xor	 ecx, ecx
  0000f	e8 00 00 00 00	 call	 PyList_New
  00014	48 8b f8	 mov	 rdi, rax

; 3148 :     if (!list)

  00017	48 85 c0	 test	 rax, rax
  0001a	75 0a		 jne	 SHORT $LN25@dictiter_r

; 3185 : }

  0001c	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  00023	5f		 pop	 rdi
  00024	5e		 pop	 rsi
  00025	c3		 ret	 0
$LN25@dictiter_r:
  00026	48 89 9c 24 e0
	00 00 00	 mov	 QWORD PTR [rsp+224], rbx
  0002e	48 89 ac 24 e8
	00 00 00	 mov	 QWORD PTR [rsp+232], rbp

; 3149 :         return NULL;
; 3150 : 
; 3151 :     /* copy the itertor state */
; 3152 :     tmp = *di;

  00036	48 8d 4c 24 30	 lea	 rcx, QWORD PTR tmp$[rsp]
  0003b	48 8b d6	 mov	 rdx, rsi
  0003e	41 b8 90 00 00
	00		 mov	 r8d, 144		; 00000090H
  00044	4c 89 a4 24 f0
	00 00 00	 mov	 QWORD PTR [rsp+240], r12
  0004c	4c 89 ac 24 c0
	00 00 00	 mov	 QWORD PTR [rsp+192], r13
  00054	e8 00 00 00 00	 call	 memcpy

; 3153 :     Py_XINCREF(tmp.di_dict);

  00059	48 8b 9c 24 90
	00 00 00	 mov	 rbx, QWORD PTR tmp$[rsp+96]
  00061	48 85 db	 test	 rbx, rbx
  00064	74 3b		 je	 SHORT $LN23@dictiter_r
  00066	e8 00 00 00 00	 call	 _Py_PXCTX
  0006b	85 c0		 test	 eax, eax
  0006d	75 32		 jne	 SHORT $LN23@dictiter_r
  0006f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00076	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0007d	4c 8b cb	 mov	 r9, rbx
  00080	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00086	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0008e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00093	85 c0		 test	 eax, eax
  00095	75 06		 jne	 SHORT $LN28@dictiter_r
  00097	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0009b	74 04		 je	 SHORT $LN23@dictiter_r
$LN28@dictiter_r:
  0009d	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN23@dictiter_r:
  000a1	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:PyDictIterItem_Type
  000a8	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:PyDictIterKey_Type
  000af	4c 8d 2d 00 00
	00 00		 lea	 r13, OFFSET FLAT:PyDictIterValue_Type
$LL20@dictiter_r:

; 3154 : 
; 3155 :     /* iterate the temporary into a list */
; 3156 :     for(;;) {
; 3157 :         PyObject *element = 0;
; 3158 :         if (Py_TYPE(di) == &PyDictIterItem_Type)

  000b6	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  000ba	48 3b c5	 cmp	 rax, rbp
  000bd	75 0c		 jne	 SHORT $LN18@dictiter_r

; 3159 :             element = dictiter_iternextitem(&tmp);

  000bf	48 8d 4c 24 30	 lea	 rcx, QWORD PTR tmp$[rsp]
  000c4	e8 00 00 00 00	 call	 dictiter_iternextitem
  000c9	eb 24		 jmp	 SHORT $LN49@dictiter_r
$LN18@dictiter_r:

; 3160 :         else if (Py_TYPE(di) == &PyDictIterKey_Type)

  000cb	49 3b c4	 cmp	 rax, r12
  000ce	75 0c		 jne	 SHORT $LN16@dictiter_r

; 3161 :             element = dictiter_iternextkey(&tmp);

  000d0	48 8d 4c 24 30	 lea	 rcx, QWORD PTR tmp$[rsp]
  000d5	e8 00 00 00 00	 call	 dictiter_iternextkey
  000da	eb 13		 jmp	 SHORT $LN49@dictiter_r
$LN16@dictiter_r:

; 3162 :         else if (Py_TYPE(di) == &PyDictIterValue_Type)

  000dc	49 3b c5	 cmp	 rax, r13
  000df	0f 85 bb 00 00
	00		 jne	 $LN5@dictiter_r

; 3163 :             element = dictiter_iternextvalue(&tmp);

  000e5	48 8d 4c 24 30	 lea	 rcx, QWORD PTR tmp$[rsp]
  000ea	e8 00 00 00 00	 call	 dictiter_iternextvalue
$LN49@dictiter_r:
  000ef	48 8b d8	 mov	 rbx, rax

; 3164 :         else
; 3165 :             assert(0);
; 3166 :         if (element) {

  000f2	48 85 c0	 test	 rax, rax
  000f5	0f 84 a5 00 00
	00		 je	 $LN5@dictiter_r

; 3167 :             if (PyList_Append(list, element)) {

  000fb	48 8b d0	 mov	 rdx, rax
  000fe	48 8b cf	 mov	 rcx, rdi
  00101	e8 00 00 00 00	 call	 PyList_Append
  00106	85 c0		 test	 eax, eax
  00108	75 70		 jne	 SHORT $LN44@dictiter_r

; 3172 :             }
; 3173 :             Py_DECREF(element);

  0010a	e8 00 00 00 00	 call	 _Py_PXCTX
  0010f	85 c0		 test	 eax, eax
  00111	75 a3		 jne	 SHORT $LL20@dictiter_r
  00113	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00117	a8 20		 test	 al, 32			; 00000020H
  00119	75 52		 jne	 SHORT $LN36@dictiter_r
  0011b	84 c0		 test	 al, al
  0011d	78 4e		 js	 SHORT $LN36@dictiter_r
  0011f	a8 02		 test	 al, 2
  00121	75 93		 jne	 SHORT $LL20@dictiter_r
  00123	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00127	75 8d		 jne	 SHORT $LL20@dictiter_r
  00129	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00130	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00137	4c 8b cb	 mov	 r9, rbx
  0013a	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00140	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00148	e8 00 00 00 00	 call	 _PyParallel_Guard
  0014d	48 8b cb	 mov	 rcx, rbx
  00150	85 c0		 test	 eax, eax
  00152	74 0a		 je	 SHORT $LN41@dictiter_r
  00154	e8 00 00 00 00	 call	 _Px_Dealloc
  00159	e9 58 ff ff ff	 jmp	 $LL20@dictiter_r
$LN41@dictiter_r:
  0015e	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00162	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00168	e9 49 ff ff ff	 jmp	 $LL20@dictiter_r
$LN36@dictiter_r:
  0016d	48 8b cb	 mov	 rcx, rbx
  00170	e8 00 00 00 00	 call	 Px_DecRef

; 3174 :         } else
; 3175 :             break;
; 3176 :     }

  00175	e9 3c ff ff ff	 jmp	 $LL20@dictiter_r
$LN44@dictiter_r:

; 3168 :                 Py_DECREF(element);

  0017a	48 8b cb	 mov	 rcx, rbx
  0017d	e8 00 00 00 00	 call	 _Py_DecRef

; 3169 :                 Py_DECREF(list);

  00182	48 8b cf	 mov	 rcx, rdi
  00185	e8 00 00 00 00	 call	 _Py_DecRef

; 3170 :                 Py_XDECREF(tmp.di_dict);

  0018a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tmp$[rsp+96]
  00192	48 85 c9	 test	 rcx, rcx
  00195	74 05		 je	 SHORT $LN9@dictiter_r
  00197	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@dictiter_r:

; 3171 :                 return NULL;

  0019c	33 c0		 xor	 eax, eax
  0019e	eb 3c		 jmp	 SHORT $LN48@dictiter_r
$LN5@dictiter_r:

; 3177 :     Py_XDECREF(tmp.di_dict);

  001a0	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tmp$[rsp+96]
  001a8	48 85 c9	 test	 rcx, rcx
  001ab	74 11		 je	 SHORT $LN1@dictiter_r
  001ad	e8 00 00 00 00	 call	 _Py_DecRef

; 3178 :     /* check for error */
; 3179 :     if (tmp.di_dict != NULL) {
; 3180 :         /* we have an error */
; 3181 :         Py_DECREF(list);

  001b2	48 8b cf	 mov	 rcx, rdi
  001b5	e8 00 00 00 00	 call	 _Py_DecRef

; 3182 :         return NULL;

  001ba	33 c0		 xor	 eax, eax
  001bc	eb 1e		 jmp	 SHORT $LN48@dictiter_r
$LN1@dictiter_r:

; 3183 :     }
; 3184 :     return Py_BuildValue("N(N)", _PyObject_GetBuiltin("iter"), list);

  001be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04BKLHDIKK@iter?$AA@
  001c5	e8 00 00 00 00	 call	 _PyObject_GetBuiltin
  001ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04IFNKFGDK@N?$CIN?$CJ?$AA@
  001d1	4c 8b c7	 mov	 r8, rdi
  001d4	48 8b d0	 mov	 rdx, rax
  001d7	e8 00 00 00 00	 call	 Py_BuildValue
$LN48@dictiter_r:
  001dc	4c 8b a4 24 f0
	00 00 00	 mov	 r12, QWORD PTR [rsp+240]
  001e4	48 8b ac 24 e8
	00 00 00	 mov	 rbp, QWORD PTR [rsp+232]
  001ec	48 8b 9c 24 e0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+224]
  001f4	4c 8b ac 24 c0
	00 00 00	 mov	 r13, QWORD PTR [rsp+192]

; 3185 : }

  001fc	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  00203	5f		 pop	 rdi
  00204	5e		 pop	 rsi
  00205	c3		 ret	 0
dictiter_reduce ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$dictview_dealloc DD imagerel dictview_dealloc
	DD	imagerel dictview_dealloc+177
	DD	imagerel $unwind$dictview_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictview_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\dictobject.c
xdata	ENDS
;	COMDAT dictview_dealloc
_TEXT	SEGMENT
dv$ = 64
dictview_dealloc PROC					; COMDAT

; 3201 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 3202 :     Py_XDECREF(dv->dv_dict);

  0000a	48 8b 59 60	 mov	 rbx, QWORD PTR [rcx+96]
  0000e	48 8b f9	 mov	 rdi, rcx
  00011	48 85 db	 test	 rbx, rbx
  00014	0f 84 85 00 00
	00		 je	 $LN3@dictview_d
  0001a	e8 00 00 00 00	 call	 _Py_PXCTX
  0001f	85 c0		 test	 eax, eax
  00021	75 7c		 jne	 SHORT $LN3@dictview_d
  00023	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00027	a8 20		 test	 al, 32			; 00000020H
  00029	75 6c		 jne	 SHORT $LN11@dictview_d
  0002b	84 c0		 test	 al, al
  0002d	78 68		 js	 SHORT $LN11@dictview_d
  0002f	a8 02		 test	 al, 2
  00031	75 6c		 jne	 SHORT $LN3@dictview_d
  00033	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00037	75 66		 jne	 SHORT $LN3@dictview_d
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00047	4c 8b cb	 mov	 r9, rbx
  0004a	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00050	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00058	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005d	48 8b cb	 mov	 rcx, rbx
  00060	85 c0		 test	 eax, eax
  00062	74 17		 je	 SHORT $LN16@dictview_d
  00064	e8 00 00 00 00	 call	 _Px_Dealloc

; 3203 :     PyObject_GC_Del(dv);

  00069	48 8b cf	 mov	 rcx, rdi

; 3204 : }

  0006c	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00071	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00075	5f		 pop	 rdi
  00076	e9 00 00 00 00	 jmp	 PyObject_GC_Del

; 3202 :     Py_XDECREF(dv->dv_dict);

$LN16@dictview_d:
  0007b	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0007f	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 3203 :     PyObject_GC_Del(dv);

  00085	48 8b cf	 mov	 rcx, rdi

; 3204 : }

  00088	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0008d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00091	5f		 pop	 rdi
  00092	e9 00 00 00 00	 jmp	 PyObject_GC_Del

; 3202 :     Py_XDECREF(dv->dv_dict);

$LN11@dictview_d:
  00097	48 8b cb	 mov	 rcx, rbx
  0009a	e8 00 00 00 00	 call	 Px_DecRef
$LN3@dictview_d:

; 3203 :     PyObject_GC_Del(dv);

  0009f	48 8b cf	 mov	 rcx, rdi

; 3204 : }

  000a2	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000a7	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ab	5f		 pop	 rdi
  000ac	e9 00 00 00 00	 jmp	 PyObject_GC_Del
dictview_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@CDBIKHBN@dictview_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictview_traverse DD imagerel dictview_traverse
	DD	imagerel dictview_traverse+97
	DD	imagerel $unwind$dictview_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictview_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BC@CDBIKHBN@dictview_traverse?$AA@
CONST	SEGMENT
??_C@_0BC@CDBIKHBN@dictview_traverse?$AA@ DB 'dictview_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT dictview_traverse
_TEXT	SEGMENT
dv$ = 48
visit$ = 56
arg$ = 64
dictview_traverse PROC					; COMDAT

; 3208 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 3209 :     Py_VISIT(dv->dv_dict);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN3@dictview_t
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@CDBIKHBN@dictview_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 89 0c 00
	00		 mov	 r8d, 3209		; 00000c89H
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@dictview_t:
  0003d	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN5@dictview_t
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 02		 jne	 SHORT $LN7@dictview_t
$LN5@dictview_t:

; 3210 :     return 0;

  0004f	33 c0		 xor	 eax, eax
$LN7@dictview_t:

; 3211 : }

  00051	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00056	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0005b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005f	5f		 pop	 rdi
  00060	c3		 ret	 0
dictview_traverse ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT dictview_len
_TEXT	SEGMENT
dv$ = 8
dictview_len PROC					; COMDAT

; 3216 :     Py_ssize_t len = 0;
; 3217 :     if (dv->dv_dict != NULL)

  00000	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  00004	48 85 c0	 test	 rax, rax
  00007	74 05		 je	 SHORT $LN4@dictview_l

; 3218 :         len = dv->dv_dict->ma_used;
; 3219 :     return len;

  00009	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 3220 : }

  0000d	c3		 ret	 0
$LN4@dictview_l:
  0000e	f3 c3		 fatret	 0
dictview_len ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@HBMCOLND@dictview_new?$AA@		; `string'
PUBLIC	??_C@_0CI@EBOFFAIK@?$CFs?$CI?$CJ?5requires?5a?5dict?5argument?0?5n@ ; `string'
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_TypeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictview_new DD imagerel dictview_new
	DD	imagerel dictview_new+108
	DD	imagerel $unwind$dictview_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$dictview_new DD imagerel dictview_new+108
	DD	imagerel dictview_new+161
	DD	imagerel $chain$0$dictview_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$dictview_new DD imagerel dictview_new+161
	DD	imagerel dictview_new+346
	DD	imagerel $chain$2$dictview_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$dictview_new DD 020021H
	DD	087400H
	DD	imagerel dictview_new
	DD	imagerel dictview_new+108
	DD	imagerel $unwind$dictview_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$dictview_new DD 020521H
	DD	087405H
	DD	imagerel dictview_new
	DD	imagerel dictview_new+108
	DD	imagerel $unwind$dictview_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictview_new DD 040a01H
	DD	09340aH
	DD	06006520aH
xdata	ENDS
;	COMDAT ??_C@_0N@HBMCOLND@dictview_new?$AA@
CONST	SEGMENT
??_C@_0N@HBMCOLND@dictview_new?$AA@ DB 'dictview_new', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@EBOFFAIK@?$CFs?$CI?$CJ?5requires?5a?5dict?5argument?0?5n@
CONST	SEGMENT
??_C@_0CI@EBOFFAIK@?$CFs?$CI?$CJ?5requires?5a?5dict?5argument?0?5n@ DB '%'
	DB	's() requires a dict argument, not ''%s''', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT dictview_new
_TEXT	SEGMENT
dict$ = 64
type$ = 72
dictview_new PROC					; COMDAT

; 3224 : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	48 8b f1	 mov	 rsi, rcx

; 3225 :     dictviewobject *dv;
; 3226 :     if (dict == NULL) {

  00010	48 85 c9	 test	 rcx, rcx
  00013	75 1e		 jne	 SHORT $LN8@dictview_n

; 3227 :         PyErr_BadInternalCall();

  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  0001c	ba 9b 0c 00 00	 mov	 edx, 3227		; 00000c9bH
  00021	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 3228 :         return NULL;

  00026	33 c0		 xor	 eax, eax

; 3243 :     return (PyObject *)dv;
; 3244 : }

  00028	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  0002d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00031	5e		 pop	 rsi
  00032	c3		 ret	 0
$LN8@dictview_n:

; 3229 :     }
; 3230 :     if (!PyDict_Check(dict)) {

  00033	4c 8b 49 58	 mov	 r9, QWORD PTR [rcx+88]
  00037	41 f7 81 00 01
	00 00 00 00 00
	20		 test	 DWORD PTR [r9+256], 536870912 ; 20000000H
  00042	75 28		 jne	 SHORT $LN7@dictview_n

; 3231 :         /* XXX Get rid of this restriction later */
; 3232 :         PyErr_Format(PyExc_TypeError,
; 3233 :                      "%s() requires a dict argument, not '%s'",
; 3234 :                      type->tp_name, dict->ob_type->tp_name);

  00044	4c 8b 42 70	 mov	 r8, QWORD PTR [rdx+112]
  00048	4d 8b 49 70	 mov	 r9, QWORD PTR [r9+112]
  0004c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00053	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@EBOFFAIK@?$CFs?$CI?$CJ?5requires?5a?5dict?5argument?0?5n@
  0005a	e8 00 00 00 00	 call	 PyErr_Format

; 3235 :         return NULL;

  0005f	33 c0		 xor	 eax, eax

; 3243 :     return (PyObject *)dv;
; 3244 : }

  00061	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00066	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0006a	5e		 pop	 rsi
  0006b	c3		 ret	 0
$LN7@dictview_n:
  0006c	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi

; 3236 :     }
; 3237 :     dv = PyObject_GC_New(dictviewobject, type);

  00071	e8 00 00 00 00	 call	 _Py_PXCTX
  00076	48 8b cb	 mov	 rcx, rbx
  00079	85 c0		 test	 eax, eax
  0007b	74 07		 je	 SHORT $LN11@dictview_n
  0007d	e8 00 00 00 00	 call	 _PxObject_New
  00082	eb 05		 jmp	 SHORT $LN16@dictview_n
$LN11@dictview_n:
  00084	e8 00 00 00 00	 call	 _PyObject_GC_New
$LN16@dictview_n:
  00089	48 8b f8	 mov	 rdi, rax

; 3238 :     if (dv == NULL)

  0008c	48 85 c0	 test	 rax, rax
  0008f	75 10		 jne	 SHORT $LN6@dictview_n
  00091	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 3243 :     return (PyObject *)dv;
; 3244 : }

  00096	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  0009b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0009f	5e		 pop	 rsi
  000a0	c3		 ret	 0
$LN6@dictview_n:

; 3239 :         return NULL;
; 3240 :     Py_INCREF(dict);

  000a1	48 8b ce	 mov	 rcx, rsi
  000a4	e8 00 00 00 00	 call	 _Py_IncRef

; 3241 :     dv->dv_dict = (PyDictObject *)dict;
; 3242 :     _PyObject_GC_TRACK(dv);

  000a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  000b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@HBMCOLND@dictview_new?$AA@
  000b7	4c 8b cf	 mov	 r9, rdi
  000ba	41 b8 aa 0c 00
	00		 mov	 r8d, 3242		; 00000caaH
  000c0	48 89 77 60	 mov	 QWORD PTR [rdi+96], rsi
  000c4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000cc	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d1	85 c0		 test	 eax, eax
  000d3	75 72		 jne	 SHORT $LN2@dictview_n
  000d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  000dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@HBMCOLND@dictview_new?$AA@
  000e3	4c 8b cf	 mov	 r9, rdi
  000e6	41 b8 aa 0c 00
	00		 mov	 r8d, 3242		; 00000caaH
  000ec	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000f4	e8 00 00 00 00	 call	 _PyParallel_Guard
  000f9	85 c0		 test	 eax, eax
  000fb	74 04		 je	 SHORT $LN13@dictview_n
  000fd	33 db		 xor	 ebx, ebx
  000ff	eb 04		 jmp	 SHORT $LN14@dictview_n
$LN13@dictview_n:
  00101	48 8d 5f e8	 lea	 rbx, QWORD PTR [rdi-24]
$LN14@dictview_n:
  00105	48 83 7b 10 fe	 cmp	 QWORD PTR [rbx+16], -2
  0010a	74 0c		 je	 SHORT $LN1@dictview_n
  0010c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  00113	e8 00 00 00 00	 call	 Py_FatalError
$LN1@dictview_n:
  00118	48 c7 43 10 fd
	ff ff ff	 mov	 QWORD PTR [rbx+16], -3
  00120	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00127	48 89 03	 mov	 QWORD PTR [rbx], rax
  0012a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00131	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00135	48 89 4b 08	 mov	 QWORD PTR [rbx+8], rcx
  00139	48 89 19	 mov	 QWORD PTR [rcx], rbx
  0013c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00143	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
$LN2@dictview_n:

; 3243 :     return (PyObject *)dv;
; 3244 : }

  00147	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  0014c	48 8b c7	 mov	 rax, rdi
  0014f	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  00154	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00158	5e		 pop	 rsi
  00159	c3		 ret	 0
dictview_new ENDP
_TEXT	ENDS
EXTRN	PySequence_Contains:PROC
EXTRN	PyIter_Next:PROC
EXTRN	PyObject_GetIter:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$all_contained_in DD imagerel all_contained_in
	DD	imagerel all_contained_in+265
	DD	imagerel $unwind$all_contained_in
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$all_contained_in DD 083f01H
	DD	08343fH
	DD	0a640fH
	DD	09540fH
	DD	0700b520fH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\dictobject.c
xdata	ENDS
;	COMDAT all_contained_in
_TEXT	SEGMENT
self$ = 64
other$ = 72
all_contained_in PROC					; COMDAT

; 3258 : {

  00000	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b ea	 mov	 rbp, rdx

; 3259 :     PyObject *iter = PyObject_GetIter(self);

  00012	e8 00 00 00 00	 call	 PyObject_GetIter

; 3260 :     int ok = 1;

  00017	bf 01 00 00 00	 mov	 edi, 1
  0001c	48 8b f0	 mov	 rsi, rax

; 3261 : 
; 3262 :     if (iter == NULL)

  0001f	48 85 c0	 test	 rax, rax
  00022	75 13		 jne	 SHORT $LN21@all_contai

; 3263 :         return -1;

  00024	83 c8 ff	 or	 eax, -1

; 3277 :     return ok;
; 3278 : }

  00027	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  0002c	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00031	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00035	5f		 pop	 rdi
  00036	c3		 ret	 0
$LN21@all_contai:

; 3264 :     for (;;) {
; 3265 :         PyObject *next = PyIter_Next(iter);

  00037	48 8b c8	 mov	 rcx, rax
  0003a	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0003f	e8 00 00 00 00	 call	 PyIter_Next
  00044	48 8b d8	 mov	 rbx, rax

; 3266 :         if (next == NULL) {

  00047	48 85 c0	 test	 rax, rax
  0004a	0f 84 8c 00 00
	00		 je	 $LN22@all_contai
$LL5@all_contai:

; 3268 :                 ok = -1;
; 3269 :             break;
; 3270 :         }
; 3271 :         ok = PySequence_Contains(other, next);

  00050	48 8b d3	 mov	 rdx, rbx
  00053	48 8b cd	 mov	 rcx, rbp
  00056	e8 00 00 00 00	 call	 PySequence_Contains
  0005b	8b f8		 mov	 edi, eax

; 3272 :         Py_DECREF(next);

  0005d	e8 00 00 00 00	 call	 _Py_PXCTX
  00062	85 c0		 test	 eax, eax
  00064	75 5e		 jne	 SHORT $LN19@all_contai
  00066	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  0006a	f6 c1 20	 test	 cl, 32			; 00000020H
  0006d	75 4d		 jne	 SHORT $LN13@all_contai
  0006f	84 c9		 test	 cl, cl
  00071	78 49		 js	 SHORT $LN13@all_contai
  00073	f6 c1 02	 test	 cl, 2
  00076	75 4c		 jne	 SHORT $LN19@all_contai
  00078	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0007c	75 46		 jne	 SHORT $LN19@all_contai
  0007e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00085	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0008c	4c 8b cb	 mov	 r9, rbx
  0008f	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00095	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0009d	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a2	48 8b cb	 mov	 rcx, rbx
  000a5	85 c0		 test	 eax, eax
  000a7	74 07		 je	 SHORT $LN18@all_contai
  000a9	e8 00 00 00 00	 call	 _Px_Dealloc
  000ae	eb 14		 jmp	 SHORT $LN19@all_contai
$LN18@all_contai:
  000b0	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000b4	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000ba	eb 08		 jmp	 SHORT $LN19@all_contai
$LN13@all_contai:
  000bc	48 8b cb	 mov	 rcx, rbx
  000bf	e8 00 00 00 00	 call	 Px_DecRef
$LN19@all_contai:

; 3273 :         if (ok <= 0)

  000c4	85 ff		 test	 edi, edi
  000c6	7e 22		 jle	 SHORT $LN2@all_contai

; 3264 :     for (;;) {
; 3265 :         PyObject *next = PyIter_Next(iter);

  000c8	48 8b ce	 mov	 rcx, rsi
  000cb	e8 00 00 00 00	 call	 PyIter_Next
  000d0	48 8b d8	 mov	 rbx, rax

; 3266 :         if (next == NULL) {

  000d3	48 85 c0	 test	 rax, rax
  000d6	0f 85 74 ff ff
	ff		 jne	 $LL5@all_contai
$LN22@all_contai:

; 3267 :             if (PyErr_Occurred())

  000dc	e8 00 00 00 00	 call	 PyErr_Occurred
  000e1	83 c9 ff	 or	 ecx, -1
  000e4	48 85 c0	 test	 rax, rax
  000e7	0f 45 f9	 cmovne	 edi, ecx
$LN2@all_contai:

; 3274 :             break;
; 3275 :     }
; 3276 :     Py_DECREF(iter);

  000ea	48 8b ce	 mov	 rcx, rsi
  000ed	e8 00 00 00 00	 call	 _Py_DecRef
  000f2	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 3277 :     return ok;
; 3278 : }

  000f7	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  000fc	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00101	8b c7		 mov	 eax, edi
  00103	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00107	5f		 pop	 rdi
  00108	c3		 ret	 0
all_contained_in ENDP
_TEXT	ENDS
EXTRN	__ImageBase:BYTE
EXTRN	PyObject_Size:PROC
EXTRN	PyType_IsSubtype:PROC
EXTRN	PyFrozenSet_Type:BYTE
EXTRN	PySet_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictview_richcompare DD imagerel dictview_richcompare
	DD	imagerel dictview_richcompare+171
	DD	imagerel $unwind$dictview_richcompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$dictview_richcompare DD imagerel dictview_richcompare+171
	DD	imagerel dictview_richcompare+309
	DD	imagerel $chain$0$dictview_richcompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$dictview_richcompare DD imagerel dictview_richcompare+309
	DD	imagerel dictview_richcompare+331
	DD	imagerel $chain$1$dictview_richcompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$dictview_richcompare DD imagerel dictview_richcompare+331
	DD	imagerel dictview_richcompare+384
	DD	imagerel $chain$2$dictview_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$dictview_richcompare DD 020021H
	DD	065400H
	DD	imagerel dictview_richcompare
	DD	imagerel dictview_richcompare+171
	DD	imagerel $unwind$dictview_richcompare
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$dictview_richcompare DD 021H
	DD	imagerel dictview_richcompare
	DD	imagerel dictview_richcompare+171
	DD	imagerel $unwind$dictview_richcompare
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$dictview_richcompare DD 020521H
	DD	065405H
	DD	imagerel dictview_richcompare
	DD	imagerel dictview_richcompare+171
	DD	imagerel $unwind$dictview_richcompare
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictview_richcompare DD 081501H
	DD	097415H
	DD	086415H
	DD	073415H
	DD	0c0113215H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT dictview_richcompare
_TEXT	SEGMENT
self$ = 48
other$ = 56
op$ = 64
dictview_richcompare PROC				; COMDAT

; 3282 : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0000f	41 54		 push	 r12
  00011	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00015	48 8b f1	 mov	 rsi, rcx

; 3283 :     Py_ssize_t len_self, len_other;
; 3284 :     int ok;
; 3285 :     PyObject *result;
; 3286 : 
; 3287 :     assert(self != NULL);
; 3288 :     assert(PyDictViewSet_Check(self));
; 3289 :     assert(other != NULL);
; 3290 : 
; 3291 :     if (!PyAnySet_Check(other) && !PyDictViewSet_Check(other))

  00018	48 8b 4a 58	 mov	 rcx, QWORD PTR [rdx+88]
  0001c	48 8b fa	 mov	 rdi, rdx
  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PySet_Type
  00026	4d 63 e0	 movsxd	 r12, r8d
  00029	48 3b ca	 cmp	 rcx, rdx
  0002c	74 59		 je	 SHORT $LN17@dictview_r
  0002e	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:PyFrozenSet_Type
  00035	48 3b cb	 cmp	 rcx, rbx
  00038	74 4d		 je	 SHORT $LN17@dictview_r
  0003a	e8 00 00 00 00	 call	 PyType_IsSubtype
  0003f	85 c0		 test	 eax, eax
  00041	75 44		 jne	 SHORT $LN17@dictview_r
  00043	48 8b 4f 58	 mov	 rcx, QWORD PTR [rdi+88]
  00047	48 8b d3	 mov	 rdx, rbx
  0004a	e8 00 00 00 00	 call	 PyType_IsSubtype
  0004f	85 c0		 test	 eax, eax
  00051	75 34		 jne	 SHORT $LN17@dictview_r
  00053	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00057	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyDictKeys_Type
  0005e	48 3b c1	 cmp	 rax, rcx
  00061	74 24		 je	 SHORT $LN17@dictview_r
  00063	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyDictItems_Type
  0006a	48 3b c1	 cmp	 rax, rcx
  0006d	74 18		 je	 SHORT $LN17@dictview_r

; 3292 :         Py_RETURN_NOTIMPLEMENTED;

  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NotImplementedStruct
  00076	e8 00 00 00 00	 call	 _Py_IncRef
  0007b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  00082	e9 ae 00 00 00	 jmp	 $LN18@dictview_r
$LN17@dictview_r:

; 3293 : 
; 3294 :     len_self = PyObject_Size(self);

  00087	48 8b ce	 mov	 rcx, rsi
  0008a	e8 00 00 00 00	 call	 PyObject_Size
  0008f	48 8b d8	 mov	 rbx, rax

; 3295 :     if (len_self < 0)

  00092	48 85 c0	 test	 rax, rax
  00095	79 07		 jns	 SHORT $LN16@dictview_r
$LN25@dictview_r:

; 3296 :         return NULL;

  00097	33 c0		 xor	 eax, eax
  00099	e9 97 00 00 00	 jmp	 $LN18@dictview_r
$LN16@dictview_r:

; 3297 :     len_other = PyObject_Size(other);

  0009e	48 8b cf	 mov	 rcx, rdi
  000a1	e8 00 00 00 00	 call	 PyObject_Size

; 3298 :     if (len_other < 0)

  000a6	48 85 c0	 test	 rax, rax

; 3299 :         return NULL;

  000a9	78 ec		 js	 SHORT $LN25@dictview_r

; 3300 : 
; 3301 :     ok = 0;

  000ab	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp
  000b0	33 ed		 xor	 ebp, ebp
  000b2	8b d5		 mov	 edx, ebp

; 3302 :     switch(op) {

  000b4	41 83 fc 05	 cmp	 r12d, 5
  000b8	77 57		 ja	 SHORT $LN1@dictview_r
  000ba	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:__ImageBase
  000c1	43 8b 8c a0 00
	00 00 00	 mov	 ecx, DWORD PTR $LN21@dictview_r[r8+r12*4]
  000c9	49 03 c8	 add	 rcx, r8
  000cc	ff e1		 jmp	 rcx
$LN12@dictview_r:

; 3303 : 
; 3304 :     case Py_NE:
; 3305 :     case Py_EQ:
; 3306 :         if (len_self == len_other)

  000ce	48 3b d8	 cmp	 rbx, rax
  000d1	75 0d		 jne	 SHORT $LN11@dictview_r

; 3307 :             ok = all_contained_in(self, other);

  000d3	48 8b d7	 mov	 rdx, rdi
  000d6	48 8b ce	 mov	 rcx, rsi
  000d9	e8 00 00 00 00	 call	 all_contained_in
  000de	8b d0		 mov	 edx, eax
$LN11@dictview_r:

; 3308 :         if (op == Py_NE && ok >= 0)

  000e0	41 83 fc 03	 cmp	 r12d, 3
  000e4	75 77		 jne	 SHORT $LN2@dictview_r
  000e6	85 d2		 test	 edx, edx
  000e8	78 77		 js	 SHORT $LN20@dictview_r

; 3309 :             ok = !ok;

  000ea	40 0f 94 c5	 sete	 bpl
  000ee	8b d5		 mov	 edx, ebp

; 3310 :         break;

  000f0	eb 6b		 jmp	 SHORT $LN2@dictview_r
$LN9@dictview_r:

; 3311 : 
; 3312 :     case Py_LT:
; 3313 :         if (len_self < len_other)

  000f2	48 3b d8	 cmp	 rbx, rax
  000f5	7d 1a		 jge	 SHORT $LN1@dictview_r

; 3314 :             ok = all_contained_in(self, other);

  000f7	48 8b d7	 mov	 rdx, rdi
  000fa	48 8b ce	 mov	 rcx, rsi

; 3315 :         break;

  000fd	eb 57		 jmp	 SHORT $LN23@dictview_r
$LN7@dictview_r:

; 3316 : 
; 3317 :       case Py_LE:
; 3318 :           if (len_self <= len_other)

  000ff	48 3b d8	 cmp	 rbx, rax
  00102	7f 0d		 jg	 SHORT $LN1@dictview_r

; 3319 :               ok = all_contained_in(self, other);

  00104	48 8b d7	 mov	 rdx, rdi
  00107	48 8b ce	 mov	 rcx, rsi

; 3320 :           break;

  0010a	eb 4a		 jmp	 SHORT $LN23@dictview_r
$LN5@dictview_r:

; 3321 : 
; 3322 :     case Py_GT:
; 3323 :         if (len_self > len_other)

  0010c	48 3b d8	 cmp	 rbx, rax
  0010f	7f 3f		 jg	 SHORT $LN24@dictview_r
$LN1@dictview_r:

; 3335 :     result = ok ? Py_True : Py_False;

  00111	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00118	85 d2		 test	 edx, edx
  0011a	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  00121	48 0f 45 d8	 cmovne	 rbx, rax

; 3336 :     Py_INCREF(result);

  00125	48 8b cb	 mov	 rcx, rbx
  00128	e8 00 00 00 00	 call	 _Py_IncRef

; 3337 :     return result;

  0012d	48 8b c3	 mov	 rax, rbx
$LN22@dictview_r:
  00130	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
$LN18@dictview_r:

; 3338 : }

  00135	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0013a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0013f	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00144	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00148	41 5c		 pop	 r12
  0014a	c3		 ret	 0
$LN3@dictview_r:

; 3324 :             ok = all_contained_in(other, self);
; 3325 :         break;
; 3326 : 
; 3327 :     case Py_GE:
; 3328 :         if (len_self >= len_other)

  0014b	48 3b d8	 cmp	 rbx, rax
  0014e	7c c1		 jl	 SHORT $LN1@dictview_r
$LN24@dictview_r:

; 3329 :             ok = all_contained_in(other, self);

  00150	48 8b cf	 mov	 rcx, rdi
  00153	48 8b d6	 mov	 rdx, rsi
$LN23@dictview_r:
  00156	e8 00 00 00 00	 call	 all_contained_in
  0015b	8b d0		 mov	 edx, eax
$LN2@dictview_r:

; 3330 :         break;
; 3331 : 
; 3332 :     }
; 3333 :     if (ok < 0)

  0015d	85 d2		 test	 edx, edx
  0015f	79 b0		 jns	 SHORT $LN1@dictview_r
$LN20@dictview_r:

; 3334 :         return NULL;

  00161	33 c0		 xor	 eax, eax
  00163	eb cb		 jmp	 SHORT $LN22@dictview_r
  00165	0f 1f 00	 npad	 3
$LN21@dictview_r:

; 3338 : }

  00168	00 00 00 00	 DD	 $LN9@dictview_r
  0016c	00 00 00 00	 DD	 $LN7@dictview_r
  00170	00 00 00 00	 DD	 $LN12@dictview_r
  00174	00 00 00 00	 DD	 $LN12@dictview_r
  00178	00 00 00 00	 DD	 $LN5@dictview_r
  0017c	00 00 00 00	 DD	 $LN3@dictview_r
dictview_richcompare ENDP
_TEXT	ENDS
PUBLIC	??_C@_06DPIDBHCJ@?$CFs?$CI?$CFR?$CJ?$AA@	; `string'
EXTRN	PyUnicode_FromFormat:PROC
EXTRN	PySequence_List:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictview_repr DD imagerel dictview_repr
	DD	imagerel dictview_repr+85
	DD	imagerel $unwind$dictview_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictview_repr DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_06DPIDBHCJ@?$CFs?$CI?$CFR?$CJ?$AA@
CONST	SEGMENT
??_C@_06DPIDBHCJ@?$CFs?$CI?$CFR?$CJ?$AA@ DB '%s(%R)', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT dictview_repr
_TEXT	SEGMENT
dv$ = 48
dictview_repr PROC					; COMDAT

; 3342 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b d9	 mov	 rbx, rcx

; 3343 :     PyObject *seq;
; 3344 :     PyObject *result;
; 3345 : 
; 3346 :     seq = PySequence_List((PyObject *)dv);

  0000d	e8 00 00 00 00	 call	 PySequence_List
  00012	48 8b f8	 mov	 rdi, rax

; 3347 :     if (seq == NULL)

  00015	48 85 c0	 test	 rax, rax
  00018	75 0b		 jne	 SHORT $LN1@dictview_r@2

; 3353 : }

  0001a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0001f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00023	5f		 pop	 rdi
  00024	c3		 ret	 0
$LN1@dictview_r@2:

; 3348 :         return NULL;
; 3349 : 
; 3350 :     result = PyUnicode_FromFormat("%s(%R)", Py_TYPE(dv)->tp_name, seq);

  00025	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06DPIDBHCJ@?$CFs?$CI?$CFR?$CJ?$AA@
  00030	4c 8b c0	 mov	 r8, rax
  00033	48 8b 52 70	 mov	 rdx, QWORD PTR [rdx+112]
  00037	e8 00 00 00 00	 call	 PyUnicode_FromFormat

; 3351 :     Py_DECREF(seq);

  0003c	48 8b cf	 mov	 rcx, rdi
  0003f	48 8b d8	 mov	 rbx, rax
  00042	e8 00 00 00 00	 call	 _Py_DecRef

; 3352 :     return result;

  00047	48 8b c3	 mov	 rax, rbx

; 3353 : }

  0004a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00053	5f		 pop	 rdi
  00054	c3		 ret	 0
dictview_repr ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$dictkeys_iter DD imagerel dictkeys_iter
	DD	imagerel dictkeys_iter+110
	DD	imagerel $unwind$dictkeys_iter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictkeys_iter DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\dictobject.c
xdata	ENDS
;	COMDAT dictkeys_iter
_TEXT	SEGMENT
dv$ = 64
dictkeys_iter PROC					; COMDAT

; 3359 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3360 :     if (dv->dv_dict == NULL) {

  00004	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00008	48 85 c9	 test	 rcx, rcx
  0000b	75 51		 jne	 SHORT $LN1@dictkeys_i

; 3361 :         Py_RETURN_NONE;

  0000d	e8 00 00 00 00	 call	 _Py_PXCTX
  00012	85 c0		 test	 eax, eax
  00014	75 3c		 jne	 SHORT $LN5@dictkeys_i
  00016	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00024	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0002b	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00031	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00039	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003e	85 c0		 test	 eax, eax
  00040	75 09		 jne	 SHORT $LN4@dictkeys_i
  00042	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00049	74 07		 je	 SHORT $LN5@dictkeys_i
$LN4@dictkeys_i:
  0004b	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN5@dictkeys_i:
  00052	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 3364 : }

  00059	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005d	c3		 ret	 0
$LN1@dictkeys_i:

; 3362 :     }
; 3363 :     return dictiter_new(dv->dv_dict, &PyDictIterKey_Type);

  0005e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyDictIterKey_Type

; 3364 : }

  00065	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00069	e9 00 00 00 00	 jmp	 dictiter_new
dictkeys_iter ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT dictkeys_contains
_TEXT	SEGMENT
dv$ = 8
obj$ = 16
dictkeys_contains PROC					; COMDAT

; 3369 :     if (dv->dv_dict == NULL)

  00000	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00004	48 85 c9	 test	 rcx, rcx
  00007	75 03		 jne	 SHORT $LN1@dictkeys_c

; 3370 :         return 0;

  00009	33 c0		 xor	 eax, eax

; 3371 :     return PyDict_Contains((PyObject *)dv->dv_dict, obj);
; 3372 : }

  0000b	c3		 ret	 0
$LN1@dictkeys_c:
  0000c	e9 00 00 00 00	 jmp	 PyDict_Contains
dictkeys_contains ENDP
_TEXT	ENDS
PUBLIC	??_C@_01MJMHLOMK@O?$AA@				; `string'
EXTRN	_PyObject_CallMethodId:PROC
EXTRN	PySet_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictviews_sub DD imagerel dictviews_sub
	DD	imagerel dictviews_sub+116
	DD	imagerel $unwind$dictviews_sub
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictviews_sub DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_01MJMHLOMK@O?$AA@
CONST	SEGMENT
??_C@_01MJMHLOMK@O?$AA@ DB 'O', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT dictviews_sub
_TEXT	SEGMENT
self$ = 48
other$ = 56
dictviews_sub PROC					; COMDAT

; 3387 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fa	 mov	 rdi, rdx

; 3388 :     PyObject *result = PySet_New(self);

  0000d	e8 00 00 00 00	 call	 PySet_New
  00012	48 8b d8	 mov	 rbx, rax

; 3389 :     PyObject *tmp;
; 3390 :     _Py_IDENTIFIER(difference_update);
; 3391 : 
; 3392 :     if (result == NULL)

  00015	48 85 c0	 test	 rax, rax

; 3393 :         return NULL;

  00018	74 37		 je	 SHORT $LN5@dictviews_

; 3394 : 
; 3395 :     tmp = _PyObject_CallMethodId(result, &PyId_difference_update, "O", other);

  0001a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00020	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00029	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_difference_update@?1??dictviews_sub@@9@9
  0002e	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  00032	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01MJMHLOMK@O?$AA@
  00039	4c 8b cf	 mov	 r9, rdi
  0003c	48 8b cb	 mov	 rcx, rbx
  0003f	e8 00 00 00 00	 call	 _PyObject_CallMethodId

; 3396 :     if (tmp == NULL) {

  00044	48 85 c0	 test	 rax, rax
  00047	75 15		 jne	 SHORT $LN1@dictviews_

; 3397 :         Py_DECREF(result);

  00049	48 8b cb	 mov	 rcx, rbx
  0004c	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@dictviews_:

; 3398 :         return NULL;

  00051	33 c0		 xor	 eax, eax

; 3403 : }

  00053	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00058	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005c	5f		 pop	 rdi
  0005d	c3		 ret	 0
$LN1@dictviews_:

; 3399 :     }
; 3400 : 
; 3401 :     Py_DECREF(tmp);

  0005e	48 8b c8	 mov	 rcx, rax
  00061	e8 00 00 00 00	 call	 _Py_DecRef

; 3402 :     return result;

  00066	48 8b c3	 mov	 rax, rbx

; 3403 : }

  00069	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0006e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00072	5f		 pop	 rdi
  00073	c3		 ret	 0
dictviews_sub ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictviews_and DD imagerel dictviews_and
	DD	imagerel dictviews_and+116
	DD	imagerel $unwind$dictviews_and
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictviews_and DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT dictviews_and
_TEXT	SEGMENT
self$ = 48
other$ = 56
dictviews_and PROC					; COMDAT

; 3407 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fa	 mov	 rdi, rdx

; 3408 :     PyObject *result = PySet_New(self);

  0000d	e8 00 00 00 00	 call	 PySet_New
  00012	48 8b d8	 mov	 rbx, rax

; 3409 :     PyObject *tmp;
; 3410 :     _Py_IDENTIFIER(intersection_update);
; 3411 : 
; 3412 :     if (result == NULL)

  00015	48 85 c0	 test	 rax, rax

; 3413 :         return NULL;

  00018	74 37		 je	 SHORT $LN5@dictviews_@2

; 3414 : 
; 3415 :     tmp = _PyObject_CallMethodId(result, &PyId_intersection_update, "O", other);

  0001a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00020	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00029	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_intersection_update@?1??dictviews_and@@9@9
  0002e	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  00032	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01MJMHLOMK@O?$AA@
  00039	4c 8b cf	 mov	 r9, rdi
  0003c	48 8b cb	 mov	 rcx, rbx
  0003f	e8 00 00 00 00	 call	 _PyObject_CallMethodId

; 3416 :     if (tmp == NULL) {

  00044	48 85 c0	 test	 rax, rax
  00047	75 15		 jne	 SHORT $LN1@dictviews_@2

; 3417 :         Py_DECREF(result);

  00049	48 8b cb	 mov	 rcx, rbx
  0004c	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@dictviews_@2:

; 3418 :         return NULL;

  00051	33 c0		 xor	 eax, eax

; 3423 : }

  00053	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00058	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005c	5f		 pop	 rdi
  0005d	c3		 ret	 0
$LN1@dictviews_@2:

; 3419 :     }
; 3420 : 
; 3421 :     Py_DECREF(tmp);

  0005e	48 8b c8	 mov	 rcx, rax
  00061	e8 00 00 00 00	 call	 _Py_DecRef

; 3422 :     return result;

  00066	48 8b c3	 mov	 rax, rbx

; 3423 : }

  00069	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0006e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00072	5f		 pop	 rdi
  00073	c3		 ret	 0
dictviews_and ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictviews_or DD imagerel dictviews_or
	DD	imagerel dictviews_or+116
	DD	imagerel $unwind$dictviews_or
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictviews_or DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT dictviews_or
_TEXT	SEGMENT
self$ = 48
other$ = 56
dictviews_or PROC					; COMDAT

; 3427 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fa	 mov	 rdi, rdx

; 3428 :     PyObject *result = PySet_New(self);

  0000d	e8 00 00 00 00	 call	 PySet_New
  00012	48 8b d8	 mov	 rbx, rax

; 3429 :     PyObject *tmp;
; 3430 :     _Py_IDENTIFIER(update);
; 3431 : 
; 3432 :     if (result == NULL)

  00015	48 85 c0	 test	 rax, rax

; 3433 :         return NULL;

  00018	74 37		 je	 SHORT $LN5@dictviews_@3

; 3434 : 
; 3435 :     tmp = _PyObject_CallMethodId(result, &PyId_update, "O", other);

  0001a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00020	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00029	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_update@?1??dictviews_or@@9@9
  0002e	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  00032	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01MJMHLOMK@O?$AA@
  00039	4c 8b cf	 mov	 r9, rdi
  0003c	48 8b cb	 mov	 rcx, rbx
  0003f	e8 00 00 00 00	 call	 _PyObject_CallMethodId

; 3436 :     if (tmp == NULL) {

  00044	48 85 c0	 test	 rax, rax
  00047	75 15		 jne	 SHORT $LN1@dictviews_@3

; 3437 :         Py_DECREF(result);

  00049	48 8b cb	 mov	 rcx, rbx
  0004c	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@dictviews_@3:

; 3438 :         return NULL;

  00051	33 c0		 xor	 eax, eax

; 3443 : }

  00053	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00058	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005c	5f		 pop	 rdi
  0005d	c3		 ret	 0
$LN1@dictviews_@3:

; 3439 :     }
; 3440 : 
; 3441 :     Py_DECREF(tmp);

  0005e	48 8b c8	 mov	 rcx, rax
  00061	e8 00 00 00 00	 call	 _Py_DecRef

; 3442 :     return result;

  00066	48 8b c3	 mov	 rax, rbx

; 3443 : }

  00069	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0006e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00072	5f		 pop	 rdi
  00073	c3		 ret	 0
dictviews_or ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictviews_xor DD imagerel dictviews_xor
	DD	imagerel dictviews_xor+116
	DD	imagerel $unwind$dictviews_xor
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictviews_xor DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT dictviews_xor
_TEXT	SEGMENT
self$ = 48
other$ = 56
dictviews_xor PROC					; COMDAT

; 3447 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fa	 mov	 rdi, rdx

; 3448 :     PyObject *result = PySet_New(self);

  0000d	e8 00 00 00 00	 call	 PySet_New
  00012	48 8b d8	 mov	 rbx, rax

; 3449 :     PyObject *tmp;
; 3450 :     _Py_IDENTIFIER(symmetric_difference_update);
; 3451 : 
; 3452 :     if (result == NULL)

  00015	48 85 c0	 test	 rax, rax

; 3453 :         return NULL;

  00018	74 37		 je	 SHORT $LN5@dictviews_@4

; 3454 : 
; 3455 :     tmp = _PyObject_CallMethodId(result, &PyId_symmetric_difference_update, "O",
; 3456 :                               other);

  0001a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00020	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00029	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_symmetric_difference_update@?1??dictviews_xor@@9@9
  0002e	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  00032	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01MJMHLOMK@O?$AA@
  00039	4c 8b cf	 mov	 r9, rdi
  0003c	48 8b cb	 mov	 rcx, rbx
  0003f	e8 00 00 00 00	 call	 _PyObject_CallMethodId

; 3457 :     if (tmp == NULL) {

  00044	48 85 c0	 test	 rax, rax
  00047	75 15		 jne	 SHORT $LN1@dictviews_@4

; 3458 :         Py_DECREF(result);

  00049	48 8b cb	 mov	 rcx, rbx
  0004c	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@dictviews_@4:

; 3459 :         return NULL;

  00051	33 c0		 xor	 eax, eax

; 3464 : }

  00053	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00058	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005c	5f		 pop	 rdi
  0005d	c3		 ret	 0
$LN1@dictviews_@4:

; 3460 :     }
; 3461 : 
; 3462 :     Py_DECREF(tmp);

  0005e	48 8b c8	 mov	 rcx, rax
  00061	e8 00 00 00 00	 call	 _Py_DecRef

; 3463 :     return result;

  00066	48 8b c3	 mov	 rax, rbx

; 3464 : }

  00069	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0006e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00072	5f		 pop	 rdi
  00073	c3		 ret	 0
dictviews_xor ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$dictviews_isdisjoint DD imagerel dictviews_isdisjoint
	DD	imagerel dictviews_isdisjoint+220
	DD	imagerel $unwind$dictviews_isdisjoint
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$dictviews_isdisjoint DD imagerel dictviews_isdisjoint+220
	DD	imagerel dictviews_isdisjoint+368
	DD	imagerel $chain$0$dictviews_isdisjoint
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$dictviews_isdisjoint DD imagerel dictviews_isdisjoint+368
	DD	imagerel dictviews_isdisjoint+493
	DD	imagerel $chain$3$dictviews_isdisjoint
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$dictviews_isdisjoint DD imagerel dictviews_isdisjoint+493
	DD	imagerel dictviews_isdisjoint+528
	DD	imagerel $chain$5$dictviews_isdisjoint
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$dictviews_isdisjoint DD 040021H
	DD	097400H
	DD	086400H
	DD	imagerel dictviews_isdisjoint
	DD	imagerel dictviews_isdisjoint+220
	DD	imagerel $unwind$dictviews_isdisjoint
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$dictviews_isdisjoint DD 040821H
	DD	086408H
	DD	097400H
	DD	imagerel dictviews_isdisjoint
	DD	imagerel dictviews_isdisjoint+220
	DD	imagerel $unwind$dictviews_isdisjoint
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$dictviews_isdisjoint DD 020521H
	DD	097405H
	DD	imagerel dictviews_isdisjoint
	DD	imagerel dictviews_isdisjoint+220
	DD	imagerel $unwind$dictviews_isdisjoint
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictviews_isdisjoint DD 040a01H
	DD	0a340aH
	DD	05006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\dictobject.c
xdata	ENDS
;	COMDAT dictviews_isdisjoint
_TEXT	SEGMENT
self$ = 64
other$ = 72
dictviews_isdisjoint PROC				; COMDAT

; 3487 : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	55		 push	 rbp
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	48 8b e9	 mov	 rbp, rcx

; 3488 :     PyObject *it;
; 3489 :     PyObject *item = NULL;
; 3490 : 
; 3491 :     if (self == other) {

  00010	48 3b ca	 cmp	 rcx, rdx
  00013	0f 85 b8 00 00
	00		 jne	 $LN12@dictviews_@5

; 3492 :         if (dictview_len((dictviewobject *)self) == 0)

  00019	e8 00 00 00 00	 call	 dictview_len
  0001e	48 85 c0	 test	 rax, rax
  00021	75 57		 jne	 SHORT $LN13@dictviews_@5

; 3493 :             Py_RETURN_TRUE;

  00023	e8 00 00 00 00	 call	 _Py_PXCTX
  00028	85 c0		 test	 eax, eax
  0002a	75 3c		 jne	 SHORT $LN18@dictviews_@5
  0002c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_TrueStruct
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00041	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00047	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0004f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00054	85 c0		 test	 eax, eax
  00056	75 09		 jne	 SHORT $LN17@dictviews_@5
  00058	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_TrueStruct+32, 32 ; 00000020H
  0005f	74 07		 je	 SHORT $LN18@dictviews_@5
$LN17@dictviews_@5:
  00061	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_TrueStruct+80
$LN18@dictviews_@5:
  00068	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct

; 3534 : }

  0006f	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00074	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00078	5d		 pop	 rbp
  00079	c3		 ret	 0
$LN13@dictviews_@5:

; 3494 :         else
; 3495 :             Py_RETURN_FALSE;

  0007a	e8 00 00 00 00	 call	 _Py_PXCTX
  0007f	85 c0		 test	 eax, eax
  00081	75 3c		 jne	 SHORT $LN22@dictviews_@5
  00083	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_FalseStruct
  0008a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00091	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00098	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0009e	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000a6	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ab	85 c0		 test	 eax, eax
  000ad	75 09		 jne	 SHORT $LN21@dictviews_@5
  000af	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  000b6	74 07		 je	 SHORT $LN22@dictviews_@5
$LN21@dictviews_@5:
  000b8	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN22@dictviews_@5:
  000bf	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 3534 : }

  000c6	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000cb	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000cf	5d		 pop	 rbp
  000d0	c3		 ret	 0
$LN12@dictviews_@5:

; 3496 :     }
; 3497 : 
; 3498 :     /* Iterate over the shorter object (only if other is a set,
; 3499 :      * because PySequence_Contains may be expensive otherwise): */
; 3500 :     if (PyAnySet_Check(other) || PyDictViewSet_Check(other)) {

  000d1	48 8b 4a 58	 mov	 rcx, QWORD PTR [rdx+88]
  000d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PySet_Type
  000dc	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  000e1	48 3b ca	 cmp	 rcx, rdx
  000e4	74 41		 je	 SHORT $LN9@dictviews_@5
  000e6	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:PyFrozenSet_Type
  000ed	48 3b cf	 cmp	 rcx, rdi
  000f0	74 35		 je	 SHORT $LN9@dictviews_@5
  000f2	e8 00 00 00 00	 call	 PyType_IsSubtype
  000f7	85 c0		 test	 eax, eax
  000f9	75 2c		 jne	 SHORT $LN9@dictviews_@5
  000fb	48 8b 4b 58	 mov	 rcx, QWORD PTR [rbx+88]
  000ff	48 8b d7	 mov	 rdx, rdi
  00102	e8 00 00 00 00	 call	 PyType_IsSubtype
  00107	85 c0		 test	 eax, eax
  00109	75 1c		 jne	 SHORT $LN9@dictviews_@5
  0010b	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0010f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyDictKeys_Type
  00116	48 3b c1	 cmp	 rax, rcx
  00119	74 0c		 je	 SHORT $LN9@dictviews_@5
  0011b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyDictItems_Type
  00122	48 3b c1	 cmp	 rax, rcx
  00125	75 27		 jne	 SHORT $LN7@dictviews_@5
$LN9@dictviews_@5:

; 3501 :         Py_ssize_t len_self = dictview_len((dictviewobject *)self);

  00127	48 8b cd	 mov	 rcx, rbp
  0012a	e8 00 00 00 00	 call	 dictview_len

; 3502 :         Py_ssize_t len_other = PyObject_Size(other);

  0012f	48 8b cb	 mov	 rcx, rbx
  00132	48 8b f8	 mov	 rdi, rax
  00135	e8 00 00 00 00	 call	 PyObject_Size

; 3503 :         if (len_other == -1)

  0013a	48 83 f8 ff	 cmp	 rax, -1

; 3504 :             return NULL;

  0013e	74 1e		 je	 SHORT $LN31@dictviews_@5

; 3505 : 
; 3506 :         if ((len_other > len_self)) {

  00140	48 3b c7	 cmp	 rax, rdi
  00143	7e 09		 jle	 SHORT $LN7@dictviews_@5

; 3507 :             PyObject *tmp = other;

  00145	48 8b c3	 mov	 rax, rbx

; 3508 :             other = self;

  00148	48 8b dd	 mov	 rbx, rbp

; 3509 :             self = tmp;

  0014b	48 8b e8	 mov	 rbp, rax
$LN7@dictviews_@5:

; 3510 :         }
; 3511 :     }
; 3512 : 
; 3513 :     it = PyObject_GetIter(other);

  0014e	48 8b cb	 mov	 rcx, rbx
  00151	e8 00 00 00 00	 call	 PyObject_GetIter
  00156	48 8b f8	 mov	 rdi, rax

; 3514 :     if (it == NULL)

  00159	48 85 c0	 test	 rax, rax
  0015c	75 12		 jne	 SHORT $LN25@dictviews_@5
$LN31@dictviews_@5:

; 3515 :         return NULL;

  0015e	33 c0		 xor	 eax, eax
  00160	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]

; 3534 : }

  00165	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0016a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0016e	5d		 pop	 rbp
  0016f	c3		 ret	 0
$LN25@dictviews_@5:

; 3516 : 
; 3517 :     while ((item = PyIter_Next(it)) != NULL) {

  00170	48 8b c8	 mov	 rcx, rax
  00173	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  00178	e8 00 00 00 00	 call	 PyIter_Next
  0017d	48 8b d8	 mov	 rbx, rax
  00180	48 85 c0	 test	 rax, rax
  00183	74 2e		 je	 SHORT $LN4@dictviews_@5
$LL5@dictviews_@5:

; 3518 :         int contains = PySequence_Contains(self, item);

  00185	48 8b d3	 mov	 rdx, rbx
  00188	48 8b cd	 mov	 rcx, rbp
  0018b	e8 00 00 00 00	 call	 PySequence_Contains

; 3519 :         Py_DECREF(item);

  00190	48 8b cb	 mov	 rcx, rbx
  00193	8b f0		 mov	 esi, eax
  00195	e8 00 00 00 00	 call	 _Py_DecRef
  0019a	48 8b cf	 mov	 rcx, rdi

; 3520 :         if (contains == -1) {

  0019d	83 fe ff	 cmp	 esi, -1
  001a0	74 65		 je	 SHORT $LN26@dictviews_@5

; 3523 :         }
; 3524 : 
; 3525 :         if (contains) {

  001a2	85 f6		 test	 esi, esi
  001a4	75 47		 jne	 SHORT $LN27@dictviews_@5

; 3516 : 
; 3517 :     while ((item = PyIter_Next(it)) != NULL) {

  001a6	e8 00 00 00 00	 call	 PyIter_Next
  001ab	48 8b d8	 mov	 rbx, rax
  001ae	48 85 c0	 test	 rax, rax
  001b1	75 d2		 jne	 SHORT $LL5@dictviews_@5
$LN4@dictviews_@5:

; 3528 :         }
; 3529 :     }
; 3530 :     Py_DECREF(it);

  001b3	48 8b cf	 mov	 rcx, rdi
  001b6	e8 00 00 00 00	 call	 _Py_DecRef

; 3531 :     if (PyErr_Occurred())

  001bb	e8 00 00 00 00	 call	 PyErr_Occurred
  001c0	48 85 c0	 test	 rax, rax

; 3532 :         return NULL; /* PyIter_Next raised an exception. */

  001c3	75 47		 jne	 SHORT $LN30@dictviews_@5

; 3533 :     Py_RETURN_TRUE;

  001c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  001cc	e8 00 00 00 00	 call	 _Py_IncRef
  001d1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
$LN29@dictviews_@5:

; 3534 : }

  001d8	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  001dd	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  001e2	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  001e7	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001eb	5d		 pop	 rbp
  001ec	c3		 ret	 0
$LN27@dictviews_@5:

; 3526 :             Py_DECREF(it);

  001ed	e8 00 00 00 00	 call	 _Py_DecRef

; 3527 :             Py_RETURN_FALSE;

  001f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  001f9	e8 00 00 00 00	 call	 _Py_IncRef
  001fe	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  00205	eb d1		 jmp	 SHORT $LN29@dictviews_@5
$LN26@dictviews_@5:

; 3521 :             Py_DECREF(it);

  00207	e8 00 00 00 00	 call	 _Py_DecRef
$LN30@dictviews_@5:

; 3522 :             return NULL;

  0020c	33 c0		 xor	 eax, eax
  0020e	eb c8		 jmp	 SHORT $LN29@dictviews_@5
dictviews_isdisjoint ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT dictkeys_new
_TEXT	SEGMENT
dict$ = 8
dictkeys_new PROC					; COMDAT

; 3581 :     return dictview_new(dict, &PyDictKeys_Type);

  00000	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyDictKeys_Type

; 3582 : }

  00007	e9 00 00 00 00	 jmp	 dictview_new
dictkeys_new ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$dictitems_iter DD imagerel dictitems_iter
	DD	imagerel dictitems_iter+110
	DD	imagerel $unwind$dictitems_iter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictitems_iter DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\dictobject.c
xdata	ENDS
;	COMDAT dictitems_iter
_TEXT	SEGMENT
dv$ = 64
dictitems_iter PROC					; COMDAT

; 3588 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3589 :     if (dv->dv_dict == NULL) {

  00004	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00008	48 85 c9	 test	 rcx, rcx
  0000b	75 51		 jne	 SHORT $LN1@dictitems_

; 3590 :         Py_RETURN_NONE;

  0000d	e8 00 00 00 00	 call	 _Py_PXCTX
  00012	85 c0		 test	 eax, eax
  00014	75 3c		 jne	 SHORT $LN5@dictitems_
  00016	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00024	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0002b	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00031	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00039	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003e	85 c0		 test	 eax, eax
  00040	75 09		 jne	 SHORT $LN4@dictitems_
  00042	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00049	74 07		 je	 SHORT $LN5@dictitems_
$LN4@dictitems_:
  0004b	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN5@dictitems_:
  00052	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 3593 : }

  00059	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005d	c3		 ret	 0
$LN1@dictitems_:

; 3591 :     }
; 3592 :     return dictiter_new(dv->dv_dict, &PyDictIterItem_Type);

  0005e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyDictIterItem_Type

; 3593 : }

  00065	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00069	e9 00 00 00 00	 jmp	 dictiter_new
dictitems_iter ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictitems_contains DD imagerel dictitems_contains
	DD	imagerel dictitems_contains+43
	DD	imagerel $unwind$dictitems_contains
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$dictitems_contains DD imagerel dictitems_contains+43
	DD	imagerel dictitems_contains+86
	DD	imagerel $chain$0$dictitems_contains
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$dictitems_contains DD imagerel dictitems_contains+86
	DD	imagerel dictitems_contains+112
	DD	imagerel $chain$2$dictitems_contains
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$dictitems_contains DD 020021H
	DD	043400H
	DD	imagerel dictitems_contains
	DD	imagerel dictitems_contains+43
	DD	imagerel $unwind$dictitems_contains
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$dictitems_contains DD 020521H
	DD	043405H
	DD	imagerel dictitems_contains
	DD	imagerel dictitems_contains+43
	DD	imagerel $unwind$dictitems_contains
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictitems_contains DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT dictitems_contains
_TEXT	SEGMENT
dv$ = 48
obj$ = 56
dictitems_contains PROC					; COMDAT

; 3597 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3598 :     PyObject *key, *value, *found;
; 3599 :     if (dv->dv_dict == NULL)

  00004	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00008	48 85 c9	 test	 rcx, rcx
  0000b	75 07		 jne	 SHORT $LN5@dictitems_@2
$LN3@dictitems_@2:

; 3600 :         return 0;

  0000d	33 c0		 xor	 eax, eax

; 3612 : }

  0000f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00013	c3		 ret	 0
$LN5@dictitems_@2:

; 3601 :     if (!PyTuple_Check(obj) || PyTuple_GET_SIZE(obj) != 2)

  00014	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  00018	f7 80 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rax+256], 67108864 ; 04000000H
  00022	74 e9		 je	 SHORT $LN3@dictitems_@2
  00024	48 83 7a 60 02	 cmp	 QWORD PTR [rdx+96], 2
  00029	75 e2		 jne	 SHORT $LN3@dictitems_@2

; 3602 :         return 0;
; 3603 :     key = PyTuple_GET_ITEM(obj, 0);
; 3604 :     value = PyTuple_GET_ITEM(obj, 1);

  0002b	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00030	48 8b 5a 78	 mov	 rbx, QWORD PTR [rdx+120]

; 3605 :     found = PyDict_GetItem((PyObject *)dv->dv_dict, key);

  00034	48 8b 52 70	 mov	 rdx, QWORD PTR [rdx+112]
  00038	e8 00 00 00 00	 call	 PyDict_GetItem

; 3606 :     if (found == NULL) {

  0003d	48 85 c0	 test	 rax, rax
  00040	75 14		 jne	 SHORT $LN2@dictitems_@2

; 3607 :         if (PyErr_Occurred())

  00042	e8 00 00 00 00	 call	 PyErr_Occurred
  00047	48 8b 5c 24 20	 mov	 rbx, QWORD PTR [rsp+32]
  0004c	48 f7 d8	 neg	 rax
  0004f	1b c0		 sbb	 eax, eax

; 3612 : }

  00051	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00055	c3		 ret	 0
$LN2@dictitems_@2:

; 3608 :             return -1;
; 3609 :         return 0;
; 3610 :     }
; 3611 :     return PyObject_RichCompareBool(value, found, Py_EQ);

  00056	41 b8 02 00 00
	00		 mov	 r8d, 2
  0005c	48 8b d0	 mov	 rdx, rax
  0005f	48 8b cb	 mov	 rcx, rbx
  00062	48 8b 5c 24 20	 mov	 rbx, QWORD PTR [rsp+32]

; 3612 : }

  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	e9 00 00 00 00	 jmp	 PyObject_RichCompareBool
dictitems_contains ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT dictitems_new
_TEXT	SEGMENT
dict$ = 8
dictitems_new PROC					; COMDAT

; 3667 :     return dictview_new(dict, &PyDictItems_Type);

  00000	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyDictItems_Type

; 3668 : }

  00007	e9 00 00 00 00	 jmp	 dictview_new
dictitems_new ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$dictvalues_iter DD imagerel dictvalues_iter
	DD	imagerel dictvalues_iter+110
	DD	imagerel $unwind$dictvalues_iter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictvalues_iter DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\dictobject.c
xdata	ENDS
;	COMDAT dictvalues_iter
_TEXT	SEGMENT
dv$ = 64
dictvalues_iter PROC					; COMDAT

; 3674 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3675 :     if (dv->dv_dict == NULL) {

  00004	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00008	48 85 c9	 test	 rcx, rcx
  0000b	75 51		 jne	 SHORT $LN1@dictvalues

; 3676 :         Py_RETURN_NONE;

  0000d	e8 00 00 00 00	 call	 _Py_PXCTX
  00012	85 c0		 test	 eax, eax
  00014	75 3c		 jne	 SHORT $LN5@dictvalues
  00016	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00024	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0002b	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00031	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00039	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003e	85 c0		 test	 eax, eax
  00040	75 09		 jne	 SHORT $LN4@dictvalues
  00042	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00049	74 07		 je	 SHORT $LN5@dictvalues
$LN4@dictvalues:
  0004b	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN5@dictvalues:
  00052	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 3679 : }

  00059	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005d	c3		 ret	 0
$LN1@dictvalues:

; 3677 :     }
; 3678 :     return dictiter_new(dv->dv_dict, &PyDictIterValue_Type);

  0005e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyDictIterValue_Type

; 3679 : }

  00065	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00069	e9 00 00 00 00	 jmp	 dictiter_new
dictvalues_iter ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT dictvalues_new
_TEXT	SEGMENT
dict$ = 8
dictvalues_new PROC					; COMDAT

; 3732 :     return dictview_new(dict, &PyDictValues_Type);

  00000	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyDictValues_Type

; 3733 : }

  00007	e9 00 00 00 00	 jmp	 dictview_new
dictvalues_new ENDP
_TEXT	ENDS
PUBLIC	_PyDictKeys_DecRef
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyDictKeys_DecRef DD imagerel $LN4
	DD	imagerel $LN4+19
	DD	imagerel $unwind$_PyDictKeys_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyDictKeys_DecRef DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyDictKeys_DecRef
_TEXT	SEGMENT
keys$ = 48
_PyDictKeys_DecRef PROC					; COMDAT

; 3832 : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3833 :     DK_DECREF(keys);

  00004	48 ff 09	 dec	 QWORD PTR [rcx]
  00007	75 05		 jne	 SHORT $LN1@PyDictKeys
  00009	e8 00 00 00 00	 call	 free_keys_object
$LN1@PyDictKeys:

; 3834 : }

  0000e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00012	c3		 ret	 0
_PyDictKeys_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@FAFKDOL@?$DMdummy?5key?$DO?$AA@	; `string'
;	COMDAT ??_C@_0M@FAFKDOL@?$DMdummy?5key?$DO?$AA@
CONST	SEGMENT
??_C@_0M@FAFKDOL@?$DMdummy?5key?$DO?$AA@ DB '<dummy key>', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT dummy_repr
_TEXT	SEGMENT
op$ = 8
dummy_repr PROC						; COMDAT

; 3841 :     return PyUnicode_FromString("<dummy key>");

  00000	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@FAFKDOL@?$DMdummy?5key?$DO?$AA@

; 3842 : }

  00007	e9 00 00 00 00	 jmp	 PyUnicode_FromString
dummy_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@KNLICOIJ@deallocating?5?$DMdummy?5key?$DO?$AA@ ; `string'
;	COMDAT ??_C@_0BJ@KNLICOIJ@deallocating?5?$DMdummy?5key?$DO?$AA@
CONST	SEGMENT
??_C@_0BJ@KNLICOIJ@deallocating?5?$DMdummy?5key?$DO?$AA@ DB 'deallocating'
	DB	' <dummy key>', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT dummy_dealloc
_TEXT	SEGMENT
ignore$ = 8
dummy_dealloc PROC					; COMDAT

; 3848 :     /* This should never get called, but we also don't want to SEGV if
; 3849 :      * we accidentally decref dummy-key out of existence.
; 3850 :      */
; 3851 :     Py_FatalError("deallocating <dummy key>");

  00000	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@KNLICOIJ@deallocating?5?$DMdummy?5key?$DO?$AA@

; 3852 : }

  00007	e9 00 00 00 00	 jmp	 Py_FatalError
dummy_dealloc ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$new_keys_object DD imagerel new_keys_object
	DD	imagerel new_keys_object+209
	DD	imagerel $unwind$new_keys_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$new_keys_object DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT new_keys_object
_TEXT	SEGMENT
size$ = 48
new_keys_object PROC					; COMDAT

; 347  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 348  :     PyDictKeysObject *dk;
; 349  :     Py_ssize_t i;
; 350  :     PyDictKeyEntry *ep0;
; 351  : 
; 352  :     assert(size >= PyDict_MINSIZE_SPLIT);
; 353  :     assert(IS_POWER_OF_2(size));
; 354  :     dk = PyMem_MALLOC(sizeof(PyDictKeysObject) +
; 355  :                       sizeof(PyDictKeyEntry) * (size-1));

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 14		 je	 SHORT $LN11@new_keys_o
  00012	48 8d 4c 5b fd	 lea	 rcx, QWORD PTR [rbx+rbx*2-3]
  00017	48 8d 0c cd 38
	00 00 00	 lea	 rcx, QWORD PTR [rcx*8+56]
  0001f	e8 00 00 00 00	 call	 _PxMem_Malloc
  00024	eb 32		 jmp	 SHORT $LN16@new_keys_o
$LN11@new_keys_o:
  00026	48 8d 44 5b fd	 lea	 rax, QWORD PTR [rbx+rbx*2-3]
  0002b	48 b9 ff ff ff
	ff ff ff ff 7f	 mov	 rcx, 9223372036854775807 ; 7fffffffffffffffH
  00035	48 8d 04 c5 38
	00 00 00	 lea	 rax, QWORD PTR [rax*8+56]
  0003d	48 3b c1	 cmp	 rax, rcx
  00040	0f 87 7e 00 00
	00		 ja	 $LN15@new_keys_o
  00046	48 85 c0	 test	 rax, rax
  00049	b9 01 00 00 00	 mov	 ecx, 1
  0004e	48 0f 45 c8	 cmovne	 rcx, rax
  00052	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
$LN16@new_keys_o:
  00058	4c 8b d8	 mov	 r11, rax

; 356  :     if (dk == NULL) {

  0005b	48 85 c0	 test	 rax, rax
  0005e	74 64		 je	 SHORT $LN15@new_keys_o

; 359  :     }
; 360  :     DK_DEBUG_INCREF dk->dk_refcnt = 1;

  00060	48 c7 00 01 00
	00 00		 mov	 QWORD PTR [rax], 1

; 361  :     dk->dk_size = size;

  00067	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx

; 362  :     dk->dk_usable = USABLE_FRACTION(size);

  0006b	48 8d 4c 1b 01	 lea	 rcx, QWORD PTR [rbx+rbx+1]
  00070	48 b8 56 55 55
	55 55 55 55 55	 mov	 rax, 6148914691236517206 ; 5555555555555556H
  0007a	48 f7 e9	 imul	 rcx

; 363  :     ep0 = &dk->dk_entries[0];
; 364  :     /* Hash value of slot 0 is used by popitem, so it must be initialized */
; 365  :     ep0->me_hash = 0;

  0007d	33 c9		 xor	 ecx, ecx
  0007f	48 8b c2	 mov	 rax, rdx
  00082	48 c1 e8 3f	 shr	 rax, 63			; 0000003fH
  00086	48 03 d0	 add	 rdx, rax
  00089	49 89 53 18	 mov	 QWORD PTR [r11+24], rdx
  0008d	49 89 4b 20	 mov	 QWORD PTR [r11+32], rcx

; 366  :     for (i = 0; i < size; i++) {

  00091	48 85 db	 test	 rbx, rbx
  00094	7e 1a		 jle	 SHORT $LN1@new_keys_o

; 359  :     }
; 360  :     DK_DEBUG_INCREF dk->dk_refcnt = 1;

  00096	49 8d 43 30	 lea	 rax, QWORD PTR [r11+48]
  0009a	66 0f 1f 44 00
	00		 npad	 6
$LL3@new_keys_o:

; 367  :         ep0[i].me_key = NULL;

  000a0	48 89 48 f8	 mov	 QWORD PTR [rax-8], rcx

; 368  :         ep0[i].me_value = NULL;

  000a4	48 89 08	 mov	 QWORD PTR [rax], rcx
  000a7	48 83 c0 18	 add	 rax, 24
  000ab	48 ff cb	 dec	 rbx
  000ae	75 f0		 jne	 SHORT $LL3@new_keys_o
$LN1@new_keys_o:

; 369  :     }
; 370  :     dk->dk_lookup = lookdict_unicode_nodummy;

  000b0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:lookdict_unicode_nodummy
  000b7	49 89 43 10	 mov	 QWORD PTR [r11+16], rax

; 371  :     return dk;

  000bb	49 8b c3	 mov	 rax, r11

; 372  : }

  000be	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c2	5b		 pop	 rbx
  000c3	c3		 ret	 0
$LN15@new_keys_o:

; 357  :         PyErr_NoMemory();

  000c4	e8 00 00 00 00	 call	 PyErr_NoMemory

; 358  :         return NULL;

  000c9	33 c0		 xor	 eax, eax

; 372  : }

  000cb	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000cf	5b		 pop	 rbx
  000d0	c3		 ret	 0
new_keys_object ENDP
_TEXT	ENDS
PUBLIC	PyDict_New
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_New DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$PyDict_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_New DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyDict_New
_TEXT	SEGMENT
PyDict_New PROC						; COMDAT

; 437  : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 438  :     return new_dict(new_keys_object(PyDict_MINSIZE_COMBINED), NULL);

  00004	b9 08 00 00 00	 mov	 ecx, 8
  00009	e8 00 00 00 00	 call	 new_keys_object
  0000e	33 d2		 xor	 edx, edx
  00010	48 8b c8	 mov	 rcx, rax

; 439  : }

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	e9 00 00 00 00	 jmp	 new_dict
PyDict_New ENDP
_TEXT	ENDS
PUBLIC	_PyDict_HasOnlyStringKeys
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyDict_HasOnlyStringKeys DD imagerel $LN9
	DD	imagerel $LN9+131
	DD	imagerel $unwind$_PyDict_HasOnlyStringKeys
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyDict_HasOnlyStringKeys DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyDict_HasOnlyStringKeys
_TEXT	SEGMENT
key$ = 48
dict$ = 48
pos$ = 56
value$ = 64
_PyDict_HasOnlyStringKeys PROC				; COMDAT

; 709  : {

$LN9:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 710  :     Py_ssize_t pos = 0;
; 711  :     PyObject *key, *value;
; 712  :     assert(PyDict_Check(dict));
; 713  :     /* Shortcut */
; 714  :     if (((PyDictObject *)dict)->ma_keys->dk_lookup != lookdict)

  00006	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict
  00014	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR pos$[rsp], 0
  0001d	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx

; 715  :         return 1;

  00021	75 4d		 jne	 SHORT $LN2@PyDict_Has

; 716  :     while (PyDict_Next(dict, &pos, &key, &value))

  00023	4c 8d 4c 24 40	 lea	 r9, QWORD PTR value$[rsp]
  00028	4c 8d 44 24 30	 lea	 r8, QWORD PTR key$[rsp]
  0002d	48 8d 54 24 38	 lea	 rdx, QWORD PTR pos$[rsp]
  00032	48 8b cb	 mov	 rcx, rbx
  00035	e8 00 00 00 00	 call	 PyDict_Next
  0003a	85 c0		 test	 eax, eax
  0003c	74 32		 je	 SHORT $LN2@PyDict_Has
  0003e	66 90		 npad	 2
$LL3@PyDict_Has:

; 717  :         if (!PyUnicode_Check(key))

  00040	48 8b 44 24 30	 mov	 rax, QWORD PTR key$[rsp]
  00045	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00049	f7 81 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rcx+256], 268435456 ; 10000000H
  00053	74 26		 je	 SHORT $LN8@PyDict_Has

; 716  :     while (PyDict_Next(dict, &pos, &key, &value))

  00055	4c 8d 4c 24 40	 lea	 r9, QWORD PTR value$[rsp]
  0005a	4c 8d 44 24 30	 lea	 r8, QWORD PTR key$[rsp]
  0005f	48 8d 54 24 38	 lea	 rdx, QWORD PTR pos$[rsp]
  00064	48 8b cb	 mov	 rcx, rbx
  00067	e8 00 00 00 00	 call	 PyDict_Next
  0006c	85 c0		 test	 eax, eax
  0006e	75 d0		 jne	 SHORT $LL3@PyDict_Has
$LN2@PyDict_Has:

; 719  :     return 1;

  00070	b8 01 00 00 00	 mov	 eax, 1

; 720  : }

  00075	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
$LN8@PyDict_Has:

; 718  :             return 0;

  0007b	33 c0		 xor	 eax, eax

; 720  : }

  0007d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00081	5b		 pop	 rbx
  00082	c3		 ret	 0
_PyDict_HasOnlyStringKeys ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DH@PECGNGIB@parallel?5thread?5attempted?5to?5res@ ; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$dictresize DD imagerel dictresize
	DD	imagerel dictresize+104
	DD	imagerel $unwind$dictresize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$dictresize DD imagerel dictresize+104
	DD	imagerel dictresize+161
	DD	imagerel $chain$1$dictresize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$dictresize DD imagerel dictresize+161
	DD	imagerel dictresize+222
	DD	imagerel $chain$4$dictresize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$dictresize DD imagerel dictresize+222
	DD	imagerel dictresize+249
	DD	imagerel $chain$6$dictresize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$dictresize DD imagerel dictresize+249
	DD	imagerel dictresize+353
	DD	imagerel $chain$7$dictresize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$dictresize DD imagerel dictresize+353
	DD	imagerel dictresize+687
	DD	imagerel $chain$8$dictresize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$dictresize DD imagerel dictresize+687
	DD	imagerel dictresize+712
	DD	imagerel $chain$9$dictresize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$dictresize DD 021H
	DD	imagerel dictresize+161
	DD	imagerel dictresize+222
	DD	imagerel $chain$4$dictresize
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$dictresize DD 021H
	DD	imagerel dictresize+222
	DD	imagerel dictresize+249
	DD	imagerel $chain$6$dictresize
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$dictresize DD 020521H
	DD	08c405H
	DD	imagerel dictresize+222
	DD	imagerel dictresize+249
	DD	imagerel $chain$6$dictresize
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$dictresize DD 040a21H
	DD	0e740aH
	DD	0c5405H
	DD	imagerel dictresize+161
	DD	imagerel dictresize+222
	DD	imagerel $chain$4$dictresize
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$dictresize DD 060c21H
	DD	06f40cH
	DD	07e400H
	DD	0d6400H
	DD	imagerel dictresize
	DD	imagerel dictresize+104
	DD	imagerel $unwind$dictresize
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$dictresize DD 040e21H
	DD	07e40eH
	DD	0d6405H
	DD	imagerel dictresize
	DD	imagerel dictresize+104
	DD	imagerel $unwind$dictresize
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictresize DD 030801H
	DD	0d0048208H
	DD	03002H
xdata	ENDS
;	COMDAT ??_C@_0DH@PECGNGIB@parallel?5thread?5attempted?5to?5res@
CONST	SEGMENT
??_C@_0DH@PECGNGIB@parallel?5thread?5attempted?5to?5res@ DB 'parallel thr'
	DB	'ead attempted to resize a main thread dict', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\dictobject.c
CONST	ENDS
;	COMDAT dictresize
_TEXT	SEGMENT
mp$ = 96
minused$ = 104
dictresize PROC						; COMDAT

; 923  : {

  00000	40 53		 push	 rbx
  00002	41 55		 push	 r13
  00004	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00008	48 8b da	 mov	 rbx, rdx
  0000b	4c 8b e9	 mov	 r13, rcx

; 924  :     Py_ssize_t newsize;
; 925  :     PyDictKeysObject *oldkeys;
; 926  :     PyObject **oldvalues;
; 927  :     Py_ssize_t i, oldsize;
; 928  : 
; 929  : #ifdef WITH_PARALLEL
; 930  :     if (Py_PXCTX && Px_ISPY(mp)) {

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 25		 je	 SHORT $LN29@dictresize
  00017	41 f6 45 20 01	 test	 BYTE PTR [r13+32], 1
  0001c	74 1e		 je	 SHORT $LN29@dictresize

; 931  :         PyErr_SetString(PyExc_RuntimeError,
; 932  :                         "parallel thread attempted to "
; 933  :                         "resize a main thread dict");

  0001e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DH@PECGNGIB@parallel?5thread?5attempted?5to?5res@
  0002c	e8 00 00 00 00	 call	 PyErr_SetString

; 934  :         return -1;

  00031	83 c8 ff	 or	 eax, -1

; 1007 : }

  00034	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00038	41 5d		 pop	 r13
  0003a	5b		 pop	 rbx
  0003b	c3		 ret	 0
$LN29@dictresize:

; 935  :     }
; 936  : #endif
; 937  : 
; 938  : /* Find the smallest table size > minused. */
; 939  :     for (newsize = PyDict_MINSIZE_COMBINED;
; 940  :          newsize <= minused && newsize > 0;
; 941  :          newsize <<= 1)

  0003c	b9 08 00 00 00	 mov	 ecx, 8
  00041	48 3b cb	 cmp	 rcx, rbx
  00044	7f 22		 jg	 SHORT $LN25@dictresize
$LL28@dictresize:
  00046	48 85 c9	 test	 rcx, rcx
  00049	7e 0d		 jle	 SHORT $LN61@dictresize
  0004b	48 03 c9	 add	 rcx, rcx
  0004e	48 3b cb	 cmp	 rcx, rbx
  00051	7e f3		 jle	 SHORT $LL28@dictresize

; 942  :         ;
; 943  :     if (newsize <= 0) {

  00053	48 85 c9	 test	 rcx, rcx
  00056	7f 10		 jg	 SHORT $LN25@dictresize
$LN61@dictresize:

; 944  :         PyErr_NoMemory();

  00058	e8 00 00 00 00	 call	 PyErr_NoMemory

; 945  :         return -1;

  0005d	83 c8 ff	 or	 eax, -1

; 1007 : }

  00060	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00064	41 5d		 pop	 r13
  00066	5b		 pop	 rbx
  00067	c3		 ret	 0
$LN25@dictresize:
  00068	48 89 74 24 68	 mov	 QWORD PTR [rsp+104], rsi

; 946  :     }
; 947  :     oldkeys = mp->ma_keys;

  0006d	49 8b 75 68	 mov	 rsi, QWORD PTR [r13+104]
  00071	4c 89 74 24 38	 mov	 QWORD PTR [rsp+56], r14

; 948  :     oldvalues = mp->ma_values;

  00076	4d 8b 75 70	 mov	 r14, QWORD PTR [r13+112]

; 949  :     /* Allocate a new table. */
; 950  :     mp->ma_keys = new_keys_object(newsize);

  0007a	e8 00 00 00 00	 call	 new_keys_object
  0007f	49 89 45 68	 mov	 QWORD PTR [r13+104], rax

; 951  :     if (mp->ma_keys == NULL) {

  00083	48 85 c0	 test	 rax, rax
  00086	75 19		 jne	 SHORT $LN24@dictresize

; 952  :         mp->ma_keys = oldkeys;

  00088	4c 8b 74 24 38	 mov	 r14, QWORD PTR [rsp+56]
  0008d	49 89 75 68	 mov	 QWORD PTR [r13+104], rsi
  00091	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]

; 953  :         return -1;

  00096	83 c8 ff	 or	 eax, -1

; 1007 : }

  00099	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0009d	41 5d		 pop	 r13
  0009f	5b		 pop	 rbx
  000a0	c3		 ret	 0
$LN24@dictresize:

; 954  :     }
; 955  :     if (oldkeys->dk_lookup == lookdict)

  000a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict
  000a8	4c 89 7c 24 30	 mov	 QWORD PTR [rsp+48], r15
  000ad	48 39 4e 10	 cmp	 QWORD PTR [rsi+16], rcx
  000b1	75 04		 jne	 SHORT $LN23@dictresize

; 956  :         mp->ma_keys->dk_lookup = lookdict;

  000b3	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
$LN23@dictresize:

; 957  :     oldsize = DK_SIZE(oldkeys);

  000b7	48 8b 5e 08	 mov	 rbx, QWORD PTR [rsi+8]

; 958  :     mp->ma_values = NULL;

  000bb	45 33 ff	 xor	 r15d, r15d
  000be	4d 89 7d 70	 mov	 QWORD PTR [r13+112], r15

; 959  :     /* If empty then nothing to copy so just return */
; 960  :     if (oldsize == 1) {

  000c2	48 83 fb 01	 cmp	 rbx, 1
  000c6	75 16		 jne	 SHORT $LN22@dictresize

; 961  :         assert(oldkeys == Py_EMPTY_KEYS);
; 962  :         DK_DECREF(oldkeys);

  000c8	48 ff 0e	 dec	 QWORD PTR [rsi]
  000cb	0f 85 de 01 00
	00		 jne	 $LN21@dictresize
  000d1	48 8b ce	 mov	 rcx, rsi
  000d4	e8 00 00 00 00	 call	 free_keys_object

; 963  :         return 0;

  000d9	e9 d1 01 00 00	 jmp	 $LN21@dictresize
$LN22@dictresize:
  000de	48 89 6c 24 60	 mov	 QWORD PTR [rsp+96], rbp
  000e3	48 89 7c 24 70	 mov	 QWORD PTR [rsp+112], rdi

; 964  :     }
; 965  :     /* Main loop below assumes we can transfer refcount to new keys
; 966  :      * and that value is stored in me_value.
; 967  :      * Increment ref-counts and copy values here to compensate
; 968  :      * This (resizing a split table) should be relatively rare */
; 969  :     if (oldvalues != NULL) {

  000e8	4d 85 f6	 test	 r14, r14
  000eb	74 74		 je	 SHORT $LN17@dictresize

; 970  :         for (i = 0; i < oldsize; i++) {

  000ed	49 8b ff	 mov	 rdi, r15
  000f0	48 85 db	 test	 rbx, rbx
  000f3	0f 8e 98 00 00
	00		 jle	 $LN13@dictresize
  000f9	4c 89 64 24 40	 mov	 QWORD PTR [rsp+64], r12
  000fe	4c 8d 66 30	 lea	 r12, QWORD PTR [rsi+48]
$LL19@dictresize:

; 971  :             if (oldvalues[i] != NULL) {

  00102	4d 39 3c fe	 cmp	 QWORD PTR [r14+rdi*8], r15
  00106	74 48		 je	 SHORT $LN18@dictresize

; 972  :                 Py_INCREF(oldkeys->dk_entries[i].me_key);

  00108	49 8b 6c 24 f8	 mov	 rbp, QWORD PTR [r12-8]
  0010d	e8 00 00 00 00	 call	 _Py_PXCTX
  00112	85 c0		 test	 eax, eax
  00114	75 32		 jne	 SHORT $LN37@dictresize
  00116	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0011d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00124	4c 8b cd	 mov	 r9, rbp
  00127	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0012d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00135	e8 00 00 00 00	 call	 _PyParallel_Guard
  0013a	85 c0		 test	 eax, eax
  0013c	75 06		 jne	 SHORT $LN36@dictresize
  0013e	f6 45 20 20	 test	 BYTE PTR [rbp+32], 32	; 00000020H
  00142	74 04		 je	 SHORT $LN37@dictresize
$LN36@dictresize:
  00144	48 ff 45 50	 inc	 QWORD PTR [rbp+80]
$LN37@dictresize:

; 973  :                 oldkeys->dk_entries[i].me_value = oldvalues[i];

  00148	49 8b 04 fe	 mov	 rax, QWORD PTR [r14+rdi*8]
  0014c	49 89 04 24	 mov	 QWORD PTR [r12], rax
$LN18@dictresize:

; 970  :         for (i = 0; i < oldsize; i++) {

  00150	48 ff c7	 inc	 rdi
  00153	49 83 c4 18	 add	 r12, 24
  00157	48 3b fb	 cmp	 rdi, rbx
  0015a	7c a6		 jl	 SHORT $LL19@dictresize
  0015c	4c 8b 64 24 40	 mov	 r12, QWORD PTR [rsp+64]
$LN17@dictresize:

; 974  :             }
; 975  :         }
; 976  :     }
; 977  :     /* Main loop */
; 978  :     for (i = 0; i < oldsize; i++) {

  00161	48 85 db	 test	 rbx, rbx
  00164	7e 2b		 jle	 SHORT $LN13@dictresize
  00166	48 8d 7e 30	 lea	 rdi, QWORD PTR [rsi+48]
  0016a	48 8b eb	 mov	 rbp, rbx
  0016d	0f 1f 00	 npad	 3
$LL15@dictresize:

; 979  :         PyDictKeyEntry *ep = &oldkeys->dk_entries[i];
; 980  :         if (ep->me_value != NULL) {

  00170	4c 8b 0f	 mov	 r9, QWORD PTR [rdi]
  00173	4d 85 c9	 test	 r9, r9
  00176	74 10		 je	 SHORT $LN14@dictresize

; 981  :             assert(ep->me_key != dummy);
; 982  :             insertdict_clean(mp, ep->me_key, ep->me_hash, ep->me_value);

  00178	4c 8b 47 f0	 mov	 r8, QWORD PTR [rdi-16]
  0017c	48 8b 57 f8	 mov	 rdx, QWORD PTR [rdi-8]
  00180	49 8b cd	 mov	 rcx, r13
  00183	e8 00 00 00 00	 call	 insertdict_clean
$LN14@dictresize:

; 974  :             }
; 975  :         }
; 976  :     }
; 977  :     /* Main loop */
; 978  :     for (i = 0; i < oldsize; i++) {

  00188	48 83 c7 18	 add	 rdi, 24
  0018c	48 ff cd	 dec	 rbp
  0018f	75 df		 jne	 SHORT $LL15@dictresize
$LN13@dictresize:

; 983  :         }
; 984  :     }
; 985  :     mp->ma_keys->dk_usable -= mp->ma_used;

  00191	49 8b 4d 68	 mov	 rcx, QWORD PTR [r13+104]
  00195	49 8b 45 60	 mov	 rax, QWORD PTR [r13+96]
  00199	48 29 41 18	 sub	 QWORD PTR [rcx+24], rax

; 986  :     if (oldvalues != NULL) {

  0019d	4d 85 f6	 test	 r14, r14
  001a0	74 49		 je	 SHORT $LN11@dictresize

; 987  :         /* NULL out me_value slot in oldkeys, in case it was shared */
; 988  :         for (i = 0; i < oldsize; i++)

  001a2	48 85 db	 test	 rbx, rbx
  001a5	7e 15		 jle	 SHORT $LN8@dictresize
  001a7	48 8d 46 30	 lea	 rax, QWORD PTR [rsi+48]
  001ab	0f 1f 44 00 00	 npad	 5
$LL10@dictresize:

; 989  :             oldkeys->dk_entries[i].me_value = NULL;

  001b0	4c 89 38	 mov	 QWORD PTR [rax], r15
  001b3	48 83 c0 18	 add	 rax, 24
  001b7	48 ff cb	 dec	 rbx
  001ba	75 f4		 jne	 SHORT $LL10@dictresize
$LN8@dictresize:

; 990  :         assert(oldvalues != empty_values);
; 991  :         free_values(oldvalues);

  001bc	e8 00 00 00 00	 call	 _Py_PXCTX
  001c1	49 8b ce	 mov	 rcx, r14
  001c4	85 c0		 test	 eax, eax
  001c6	74 07		 je	 SHORT $LN32@dictresize
  001c8	e8 00 00 00 00	 call	 _PxMem_Free
  001cd	eb 06		 jmp	 SHORT $LN33@dictresize
$LN32@dictresize:
  001cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN33@dictresize:

; 992  :         DK_DECREF(oldkeys);

  001d5	48 ff 0e	 dec	 QWORD PTR [rsi]
  001d8	0f 85 c7 00 00
	00		 jne	 $LN35@dictresize
  001de	48 8b ce	 mov	 rcx, rsi
  001e1	e8 00 00 00 00	 call	 free_keys_object

; 993  :     }
; 994  :     else {

  001e6	e9 ba 00 00 00	 jmp	 $LN35@dictresize
$LN11@dictresize:

; 995  :         assert(oldkeys->dk_lookup != lookdict_split);
; 996  :         if (oldkeys->dk_lookup != lookdict_unicode_nodummy) {

  001eb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:lookdict_unicode_nodummy
  001f2	48 39 46 10	 cmp	 QWORD PTR [rsi+16], rax
  001f6	0f 84 90 00 00
	00		 je	 $LN2@dictresize

; 998  :             for (i = 0; i < oldsize; i++) {

  001fc	48 85 db	 test	 rbx, rbx
  001ff	0f 8e 87 00 00
	00		 jle	 $LN2@dictresize

; 997  :             PyDictKeyEntry *ep0 = &oldkeys->dk_entries[0];

  00205	48 8d 7e 28	 lea	 rdi, QWORD PTR [rsi+40]
  00209	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_dummy_struct
$LL4@dictresize:

; 999  :                 if (ep0[i].me_key == dummy)

  00210	48 39 2f	 cmp	 QWORD PTR [rdi], rbp
  00213	75 6e		 jne	 SHORT $LN3@dictresize

; 1000 :                     Py_DECREF(dummy);

  00215	e8 00 00 00 00	 call	 _Py_PXCTX
  0021a	85 c0		 test	 eax, eax
  0021c	75 65		 jne	 SHORT $LN3@dictresize
  0021e	48 8b 05 20 00
	00 00		 mov	 rax, QWORD PTR _dummy_struct+32
  00225	a8 20		 test	 al, 32			; 00000020H
  00227	75 52		 jne	 SHORT $LN44@dictresize
  00229	84 c0		 test	 al, al
  0022b	78 4e		 js	 SHORT $LN44@dictresize
  0022d	a8 02		 test	 al, 2
  0022f	75 52		 jne	 SHORT $LN3@dictresize
  00231	48 ff 0d 50 00
	00 00		 dec	 QWORD PTR _dummy_struct+80
  00238	75 49		 jne	 SHORT $LN3@dictresize
  0023a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00241	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00248	4c 8b cd	 mov	 r9, rbp
  0024b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00251	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00259	e8 00 00 00 00	 call	 _PyParallel_Guard
  0025e	48 8b cd	 mov	 rcx, rbp
  00261	85 c0		 test	 eax, eax
  00263	74 07		 je	 SHORT $LN49@dictresize
  00265	e8 00 00 00 00	 call	 _Px_Dealloc
  0026a	eb 17		 jmp	 SHORT $LN3@dictresize
$LN49@dictresize:
  0026c	48 8b 05 58 00
	00 00		 mov	 rax, QWORD PTR _dummy_struct+88
  00273	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00279	eb 08		 jmp	 SHORT $LN3@dictresize
$LN44@dictresize:
  0027b	48 8b cd	 mov	 rcx, rbp
  0027e	e8 00 00 00 00	 call	 Px_DecRef
$LN3@dictresize:

; 998  :             for (i = 0; i < oldsize; i++) {

  00283	48 83 c7 18	 add	 rdi, 24
  00287	48 ff cb	 dec	 rbx
  0028a	75 84		 jne	 SHORT $LL4@dictresize
$LN2@dictresize:

; 1001 :             }
; 1002 :         }
; 1003 :         assert(oldkeys->dk_refcnt == 1);
; 1004 :         DK_DEBUG_DECREF PyMem_FREE(oldkeys);

  0028c	e8 00 00 00 00	 call	 _Py_PXCTX
  00291	48 8b ce	 mov	 rcx, rsi
  00294	85 c0		 test	 eax, eax
  00296	74 07		 je	 SHORT $LN34@dictresize
  00298	e8 00 00 00 00	 call	 _PxMem_Free
  0029d	eb 06		 jmp	 SHORT $LN35@dictresize
$LN34@dictresize:
  0029f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN35@dictresize:
  002a5	48 8b 7c 24 70	 mov	 rdi, QWORD PTR [rsp+112]
  002aa	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
$LN21@dictresize:
  002af	4c 8b 7c 24 30	 mov	 r15, QWORD PTR [rsp+48]
  002b4	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  002b9	4c 8b 74 24 38	 mov	 r14, QWORD PTR [rsp+56]

; 1005 :     }
; 1006 :     return 0;

  002be	33 c0		 xor	 eax, eax

; 1007 : }

  002c0	48 83 c4 48	 add	 rsp, 72			; 00000048H
  002c4	41 5d		 pop	 r13
  002c6	5b		 pop	 rbx
  002c7	c3		 ret	 0
dictresize ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CP@CANHAIEM@Not?5enough?5memory?5to?5allocate?5ne@ ; `string'
EXTRN	PyExc_MemoryError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$make_keys_shared DD imagerel make_keys_shared
	DD	imagerel make_keys_shared+41
	DD	imagerel $unwind$make_keys_shared
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$make_keys_shared DD imagerel make_keys_shared+41
	DD	imagerel make_keys_shared+310
	DD	imagerel $chain$1$make_keys_shared
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$make_keys_shared DD imagerel make_keys_shared+310
	DD	imagerel make_keys_shared+347
	DD	imagerel $chain$3$make_keys_shared
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$make_keys_shared DD 040021H
	DD	077400H
	DD	066400H
	DD	imagerel make_keys_shared
	DD	imagerel make_keys_shared+41
	DD	imagerel $unwind$make_keys_shared
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$make_keys_shared DD 040a21H
	DD	07740aH
	DD	066405H
	DD	imagerel make_keys_shared
	DD	imagerel make_keys_shared+41
	DD	imagerel $unwind$make_keys_shared
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$make_keys_shared DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0CP@CANHAIEM@Not?5enough?5memory?5to?5allocate?5ne@
CONST	SEGMENT
??_C@_0CP@CANHAIEM@Not?5enough?5memory?5to?5allocate?5ne@ DB 'Not enough '
	DB	'memory to allocate new values array', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT make_keys_shared
_TEXT	SEGMENT
op$ = 48
make_keys_shared PROC					; COMDAT

; 1013 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1014 :     Py_ssize_t i;
; 1015 :     Py_ssize_t size;
; 1016 :     PyDictObject *mp = (PyDictObject *)op;
; 1017 : 
; 1018 :     if (!PyDict_CheckExact(op))

  00006	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00014	74 0e		 je	 SHORT $LN10@make_keys_
  00016	48 39 41 38	 cmp	 QWORD PTR [rcx+56], rax
  0001a	74 08		 je	 SHORT $LN10@make_keys_

; 1019 :         return NULL;

  0001c	33 c0		 xor	 eax, eax

; 1051 : }

  0001e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00022	5b		 pop	 rbx
  00023	c3		 ret	 0
$LN10@make_keys_:

; 1020 :     if (!_PyDict_HasSplitTable(mp)) {

  00024	48 83 79 70 00	 cmp	 QWORD PTR [rcx+112], 0
  00029	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  0002e	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  00033	0f 85 e2 00 00
	00		 jne	 $LN9@make_keys_

; 1021 :         PyDictKeyEntry *ep0;
; 1022 :         PyObject **values;
; 1023 :         assert(mp->ma_keys->dk_refcnt == 1);
; 1024 :         if (mp->ma_keys->dk_lookup == lookdict) {

  00039	48 8b 51 68	 mov	 rdx, QWORD PTR [rcx+104]
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict
  00044	48 8b 42 10	 mov	 rax, QWORD PTR [rdx+16]
  00048	48 3b c1	 cmp	 rax, rcx

; 1025 :             return NULL;

  0004b	0f 84 f8 00 00
	00		 je	 $LN27@make_keys_

; 1026 :         }
; 1027 :         else if (mp->ma_keys->dk_lookup == lookdict_unicode) {

  00051	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict_unicode
  00058	48 3b c1	 cmp	 rax, rcx
  0005b	75 14		 jne	 SHORT $LN5@make_keys_

; 1028 :             /* Remove dummy keys */
; 1029 :             if (dictresize(mp, DK_SIZE(mp->ma_keys)))

  0005d	48 8b 52 08	 mov	 rdx, QWORD PTR [rdx+8]
  00061	48 8b cb	 mov	 rcx, rbx
  00064	e8 00 00 00 00	 call	 dictresize
  00069	85 c0		 test	 eax, eax

; 1030 :                 return NULL;

  0006b	0f 85 d8 00 00
	00		 jne	 $LN27@make_keys_
$LN5@make_keys_:

; 1031 :         }
; 1032 :         assert(mp->ma_keys->dk_lookup == lookdict_unicode_nodummy);
; 1033 :         /* Copy values into a new array */
; 1034 :         ep0 = &mp->ma_keys->dk_entries[0];

  00071	48 8b 73 68	 mov	 rsi, QWORD PTR [rbx+104]

; 1035 :         size = DK_SIZE(mp->ma_keys);
; 1036 :         values = new_values(size);

  00075	48 b8 ff ff ff
	ff ff ff ff 0f	 mov	 rax, 1152921504606846975 ; 0fffffffffffffffH
  0007f	48 8b 7e 08	 mov	 rdi, QWORD PTR [rsi+8]
  00083	48 3b f8	 cmp	 rdi, rax
  00086	0f 87 aa 00 00
	00		 ja	 $LN23@make_keys_
  0008c	e8 00 00 00 00	 call	 _Py_PXCTX
  00091	85 c0		 test	 eax, eax
  00093	74 0f		 je	 SHORT $LN17@make_keys_
  00095	48 8d 0c fd 00
	00 00 00	 lea	 rcx, QWORD PTR [rdi*8]
  0009d	e8 00 00 00 00	 call	 _PxMem_Malloc
  000a2	eb 29		 jmp	 SHORT $LN26@make_keys_
$LN17@make_keys_:
  000a4	48 8d 04 fd 00
	00 00 00	 lea	 rax, QWORD PTR [rdi*8]
  000ac	48 b9 ff ff ff
	ff ff ff ff 7f	 mov	 rcx, 9223372036854775807 ; 7fffffffffffffffH
  000b6	48 3b c1	 cmp	 rax, rcx
  000b9	77 7b		 ja	 SHORT $LN23@make_keys_
  000bb	48 85 c0	 test	 rax, rax
  000be	b9 01 00 00 00	 mov	 ecx, 1
  000c3	48 0f 45 c8	 cmovne	 rcx, rax
  000c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
$LN26@make_keys_:
  000cd	4c 8b d8	 mov	 r11, rax

; 1037 :         if (values == NULL) {

  000d0	48 85 c0	 test	 rax, rax
  000d3	74 61		 je	 SHORT $LN23@make_keys_

; 1041 :         }
; 1042 :         for (i = 0; i < size; i++) {

  000d5	45 33 c0	 xor	 r8d, r8d
  000d8	41 8b d0	 mov	 edx, r8d
  000db	48 85 ff	 test	 rdi, rdi
  000de	7e 28		 jle	 SHORT $LN1@make_keys_
  000e0	48 8d 4e 30	 lea	 rcx, QWORD PTR [rsi+48]
  000e4	66 66 66 66 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL3@make_keys_:

; 1043 :             values[i] = ep0[i].me_value;

  000f0	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  000f3	48 ff c2	 inc	 rdx
  000f6	48 83 c1 18	 add	 rcx, 24
  000fa	49 89 44 d3 f8	 mov	 QWORD PTR [r11+rdx*8-8], rax

; 1044 :             ep0[i].me_value = NULL;

  000ff	4c 89 41 e8	 mov	 QWORD PTR [rcx-24], r8
  00103	48 3b d7	 cmp	 rdx, rdi
  00106	7c e8		 jl	 SHORT $LL3@make_keys_
$LN1@make_keys_:

; 1045 :         }
; 1046 :         mp->ma_keys->dk_lookup = lookdict_split;

  00108	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  0010c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict_split
  00113	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 1047 :         mp->ma_values = values;

  00117	4c 89 5b 70	 mov	 QWORD PTR [rbx+112], r11
$LN9@make_keys_:

; 1048 :     }
; 1049 :     DK_INCREF(mp->ma_keys);

  0011b	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  0011f	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  00124	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]
  00129	48 ff 00	 inc	 QWORD PTR [rax]

; 1050 :     return mp->ma_keys;

  0012c	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]

; 1051 : }

  00130	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00134	5b		 pop	 rbx
  00135	c3		 ret	 0
$LN23@make_keys_:

; 1038 :             PyErr_SetString(PyExc_MemoryError,
; 1039 :                 "Not enough memory to allocate new values array");

  00136	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_MemoryError
  0013d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@CANHAIEM@Not?5enough?5memory?5to?5allocate?5ne@
  00144	e8 00 00 00 00	 call	 PyErr_SetString
$LN27@make_keys_:

; 1040 :             return NULL;

  00149	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  0014e	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]
  00153	33 c0		 xor	 eax, eax

; 1051 : }

  00155	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00159	5b		 pop	 rbx
  0015a	c3		 ret	 0
make_keys_shared ENDP
_TEXT	ENDS
PUBLIC	_PyDict_NewPresized
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyDict_NewPresized DD imagerel $LN10
	DD	imagerel $LN10+59
	DD	imagerel $unwind$_PyDict_NewPresized
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyDict_NewPresized DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyDict_NewPresized
_TEXT	SEGMENT
minused$ = 48
_PyDict_NewPresized PROC				; COMDAT

; 1055 : {

$LN10:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	48 8b c1	 mov	 rax, rcx

; 1056 :     Py_ssize_t newsize;
; 1057 :     PyDictKeysObject *new_keys;
; 1058 :     for (newsize = PyDict_MINSIZE_COMBINED;
; 1059 :          newsize <= minused && newsize > 0;
; 1060 :          newsize <<= 1)

  00007	b9 08 00 00 00	 mov	 ecx, 8
  0000c	48 3b c8	 cmp	 rcx, rax
  0000f	7f 0d		 jg	 SHORT $LN2@PyDict_New
$LL4@PyDict_New:
  00011	48 85 c9	 test	 rcx, rcx
  00014	7e 08		 jle	 SHORT $LN2@PyDict_New
  00016	48 03 c9	 add	 rcx, rcx
  00019	48 3b c8	 cmp	 rcx, rax
  0001c	7e f3		 jle	 SHORT $LL4@PyDict_New
$LN2@PyDict_New:

; 1061 :         ;
; 1062 :     new_keys = new_keys_object(newsize);

  0001e	e8 00 00 00 00	 call	 new_keys_object

; 1063 :     if (new_keys == NULL)

  00023	48 85 c0	 test	 rax, rax
  00026	75 05		 jne	 SHORT $LN1@PyDict_New

; 1066 : }

  00028	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002c	c3		 ret	 0
$LN1@PyDict_New:

; 1064 :         return NULL;
; 1065 :     return new_dict(new_keys, NULL);

  0002d	33 d2		 xor	 edx, edx
  0002f	48 8b c8	 mov	 rcx, rax

; 1066 : }

  00032	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00036	e9 00 00 00 00	 jmp	 new_dict
_PyDict_NewPresized ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@HHKKPFHK@popitem?$CI?$CJ?3?5dictionary?5is?5empty?$AA@ ; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$dict_popitem DD imagerel dict_popitem
	DD	imagerel dict_popitem+428
	DD	imagerel $unwind$dict_popitem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_popitem DD 0aa701H
	DD	09c4a7H
	DD	0874a2H
	DD	0b540fH
	DD	0a340fH
	DD	0600b520fH
xdata	ENDS
;	COMDAT ??_C@_0BP@HHKKPFHK@popitem?$CI?$CJ?3?5dictionary?5is?5empty?$AA@
CONST	SEGMENT
??_C@_0BP@HHKKPFHK@popitem?$CI?$CJ?3?5dictionary?5is?5empty?$AA@ DB 'popi'
	DB	'tem(): dictionary is empty', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\dictobject.c
CONST	ENDS
;	COMDAT dict_popitem
_TEXT	SEGMENT
mp$ = 64
dict_popitem PROC					; COMDAT

; 2398 : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  0000a	56		 push	 rsi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b f1	 mov	 rsi, rcx

; 2399 :     Py_hash_t i = 0;

  00012	33 db		 xor	 ebx, ebx

; 2400 :     PyDictKeyEntry *ep;
; 2401 :     PyObject *res;
; 2402 : 
; 2403 :     /*
; 2404 :     if (Px_CHECK_PROTECTION(mp, NULL, NULL))
; 2405 :         return NULL;
; 2406 :     */
; 2407 : 
; 2408 :     /* Allocate the result tuple before checking the size.  Believe it
; 2409 :      * or not, this allocation could trigger a garbage collection which
; 2410 :      * could empty the dict, so if we checked the size first and that
; 2411 :      * happened, the result would be an infinite loop (searching for an
; 2412 :      * entry that no longer exists).  Note that the usual popitem()
; 2413 :      * idiom is "while d: k, v = d.popitem()". so needing to throw the
; 2414 :      * tuple away if the dict *is* empty isn't a significant
; 2415 :      * inefficiency -- possible, but unlikely in practice.
; 2416 :      */
; 2417 :     res = PyTuple_New(2);

  00014	8d 4b 02	 lea	 ecx, QWORD PTR [rbx+2]
  00017	e8 00 00 00 00	 call	 PyTuple_New
  0001c	48 8b e8	 mov	 rbp, rax

; 2418 :     if (res == NULL)

  0001f	48 85 c0	 test	 rax, rax

; 2419 :         return NULL;

  00022	74 21		 je	 SHORT $LN19@dict_popit

; 2420 :     if (mp->ma_used == 0) {

  00024	48 39 5e 60	 cmp	 QWORD PTR [rsi+96], rbx
  00028	75 2d		 jne	 SHORT $LN10@dict_popit

; 2421 :         Py_DECREF(res);

  0002a	48 8b c8	 mov	 rcx, rax
  0002d	e8 00 00 00 00	 call	 _Py_DecRef

; 2422 :         PyErr_SetString(PyExc_KeyError,
; 2423 :                         "popitem(): dictionary is empty");

  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_KeyError
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@HHKKPFHK@popitem?$CI?$CJ?3?5dictionary?5is?5empty?$AA@
  00040	e8 00 00 00 00	 call	 PyErr_SetString
$LN19@dict_popit:

; 2424 :         return NULL;

  00045	33 c0		 xor	 eax, eax

; 2465 :     return res;
; 2466 : }

  00047	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0004c	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  00051	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00055	5e		 pop	 rsi
  00056	c3		 ret	 0
$LN10@dict_popit:

; 2425 :     }
; 2426 :     /* Convert split table to combined table */
; 2427 :     if (mp->ma_keys->dk_lookup == lookdict_split) {

  00057	48 8b 56 68	 mov	 rdx, QWORD PTR [rsi+104]
  0005b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:lookdict_split
  00062	48 39 42 10	 cmp	 QWORD PTR [rdx+16], rax
  00066	75 2a		 jne	 SHORT $LN8@dict_popit

; 2428 :         if (dictresize(mp, DK_SIZE(mp->ma_keys))) {

  00068	48 8b 52 08	 mov	 rdx, QWORD PTR [rdx+8]
  0006c	48 8b ce	 mov	 rcx, rsi
  0006f	e8 00 00 00 00	 call	 dictresize
  00074	85 c0		 test	 eax, eax
  00076	74 1a		 je	 SHORT $LN8@dict_popit

; 2429 :             Py_DECREF(res);

  00078	48 8b cd	 mov	 rcx, rbp
  0007b	e8 00 00 00 00	 call	 _Py_DecRef

; 2430 :             return NULL;

  00080	33 c0		 xor	 eax, eax

; 2465 :     return res;
; 2466 : }

  00082	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00087	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  0008c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00090	5e		 pop	 rsi
  00091	c3		 ret	 0
$LN8@dict_popit:

; 2431 :         }
; 2432 :     }
; 2433 :     ENSURE_ALLOWS_DELETIONS(mp);

  00092	48 8b 46 68	 mov	 rax, QWORD PTR [rsi+104]
  00096	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict_unicode_nodummy
  0009d	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  000a2	4c 89 64 24 48	 mov	 QWORD PTR [rsp+72], r12
  000a7	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  000ab	75 0b		 jne	 SHORT $LN7@dict_popit
  000ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict_unicode
  000b4	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
$LN7@dict_popit:

; 2434 :     /* Set ep to "the first" dict entry with a value.  We abuse the hash
; 2435 :      * field of slot 0 to hold a search finger:
; 2436 :      * If slot 0 has a value, use slot 0.
; 2437 :      * Else slot 0 is being used to hold a search finger,
; 2438 :      * and we use its hash value as the first index to look.
; 2439 :      */
; 2440 :     ep = &mp->ma_keys->dk_entries[0];

  000b8	48 8b 4e 68	 mov	 rcx, QWORD PTR [rsi+104]

; 2441 :     if (ep->me_value == NULL) {

  000bc	48 39 59 30	 cmp	 QWORD PTR [rcx+48], rbx
  000c0	48 8d 79 20	 lea	 rdi, QWORD PTR [rcx+32]
  000c4	75 55		 jne	 SHORT $LN2@dict_popit

; 2442 :         Py_ssize_t mask = DK_MASK(mp->ma_keys);

  000c6	48 8b 51 08	 mov	 rdx, QWORD PTR [rcx+8]

; 2443 :         i = ep->me_hash;

  000ca	48 8b 1f	 mov	 rbx, QWORD PTR [rdi]

; 2444 :         /* The hash field may be a real hash value, or it may be a
; 2445 :          * legit search finger, or it may be a once-legit search
; 2446 :          * finger that's out of bounds now because it wrapped around
; 2447 :          * or the table shrunk -- simply make sure it's in bounds now.
; 2448 :          */
; 2449 :         if (i > mask || i < 1)

  000cd	41 b8 01 00 00
	00		 mov	 r8d, 1
  000d3	48 ff ca	 dec	 rdx
  000d6	48 3b da	 cmp	 rbx, rdx
  000d9	7f 05		 jg	 SHORT $LN4@dict_popit
  000db	49 3b d8	 cmp	 rbx, r8
  000de	7d 03		 jge	 SHORT $LN18@dict_popit
$LN4@dict_popit:

; 2450 :             i = 1;              /* skip slot 0 */

  000e0	49 8b d8	 mov	 rbx, r8
$LN18@dict_popit:

; 2451 :         while ((ep = &mp->ma_keys->dk_entries[i])->me_value == NULL) {

  000e3	48 8d 04 5b	 lea	 rax, QWORD PTR [rbx+rbx*2]
  000e7	48 83 7c c1 30
	00		 cmp	 QWORD PTR [rcx+rax*8+48], 0
  000ed	48 8d 7c c1 20	 lea	 rdi, QWORD PTR [rcx+rax*8+32]
  000f2	75 27		 jne	 SHORT $LN2@dict_popit
  000f4	66 66 66 66 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL3@dict_popit:

; 2452 :             i++;

  00100	48 ff c3	 inc	 rbx

; 2453 :             if (i > mask)

  00103	48 3b da	 cmp	 rbx, rdx
  00106	49 0f 4f d8	 cmovg	 rbx, r8
  0010a	48 8d 04 5b	 lea	 rax, QWORD PTR [rbx+rbx*2]
  0010e	48 83 7c c1 30
	00		 cmp	 QWORD PTR [rcx+rax*8+48], 0
  00114	48 8d 7c c1 20	 lea	 rdi, QWORD PTR [rcx+rax*8+32]
  00119	74 e5		 je	 SHORT $LL3@dict_popit
$LN2@dict_popit:

; 2454 :                 i = 1;
; 2455 :         }
; 2456 :     }
; 2457 :     PyTuple_SET_ITEM(res, 0, ep->me_key);

  0011b	48 8b 47 08	 mov	 rax, QWORD PTR [rdi+8]
  0011f	48 89 45 70	 mov	 QWORD PTR [rbp+112], rax

; 2458 :     PyTuple_SET_ITEM(res, 1, ep->me_value);

  00123	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
  00127	48 89 45 78	 mov	 QWORD PTR [rbp+120], rax

; 2459 :     Py_INCREF(dummy);

  0012b	e8 00 00 00 00	 call	 _Py_PXCTX
  00130	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:_dummy_struct
  00137	85 c0		 test	 eax, eax
  00139	75 38		 jne	 SHORT $LN15@dict_popit
  0013b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00142	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00149	4d 8b cc	 mov	 r9, r12
  0014c	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00152	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0015a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0015f	85 c0		 test	 eax, eax
  00161	75 09		 jne	 SHORT $LN14@dict_popit
  00163	f6 05 20 00 00
	00 20		 test	 BYTE PTR _dummy_struct+32, 32 ; 00000020H
  0016a	74 07		 je	 SHORT $LN15@dict_popit
$LN14@dict_popit:
  0016c	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _dummy_struct+80
$LN15@dict_popit:

; 2460 :     ep->me_key = dummy;

  00173	4c 89 67 08	 mov	 QWORD PTR [rdi+8], r12
  00177	4c 8b 64 24 48	 mov	 r12, QWORD PTR [rsp+72]

; 2461 :     ep->me_value = NULL;

  0017c	48 c7 47 10 00
	00 00 00	 mov	 QWORD PTR [rdi+16], 0

; 2462 :     mp->ma_used--;
; 2463 :     assert(mp->ma_keys->dk_entries[0].me_value == NULL);
; 2464 :     mp->ma_keys->dk_entries[0].me_hash = i + 1;  /* next place to start */

  00184	48 8b 46 68	 mov	 rax, QWORD PTR [rsi+104]
  00188	48 ff 4e 60	 dec	 QWORD PTR [rsi+96]
  0018c	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  00191	48 8d 4b 01	 lea	 rcx, QWORD PTR [rbx+1]

; 2465 :     return res;
; 2466 : }

  00195	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0019a	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx
  0019e	48 8b c5	 mov	 rax, rbp
  001a1	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  001a6	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001aa	5e		 pop	 rsi
  001ab	c3		 ret	 0
dict_popitem ENDP
_TEXT	ENDS
PUBLIC	??_C@_08LCOIKHBG@dict_new?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_new DD imagerel dict_new
	DD	imagerel dict_new+239
	DD	imagerel $unwind$dict_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_new DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_08LCOIKHBG@dict_new?$AA@
CONST	SEGMENT
??_C@_08LCOIKHBG@dict_new?$AA@ DB 'dict_new', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT dict_new
_TEXT	SEGMENT
type$ = 64
args$ = 72
kwds$ = 80
dict_new PROC						; COMDAT

; 2655 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 2656 :     PyObject *self;
; 2657 : 
; 2658 :     assert(type != NULL && type->tp_alloc != NULL);
; 2659 :     self = type->tp_alloc(type, 0);

  0000d	33 d2		 xor	 edx, edx
  0000f	ff 97 88 01 00
	00		 call	 QWORD PTR [rdi+392]
  00015	48 8b d8	 mov	 rbx, rax

; 2660 :     if (self != NULL) {

  00018	48 85 c0	 test	 rax, rax
  0001b	0f 84 c3 00 00
	00		 je	 $LN1@dict_new

; 2661 :         PyDictObject *d = (PyDictObject *)self;
; 2662 :         d->ma_keys = new_keys_object(PyDict_MINSIZE_COMBINED);

  00021	b9 08 00 00 00	 mov	 ecx, 8
  00026	e8 00 00 00 00	 call	 new_keys_object
  0002b	48 89 43 68	 mov	 QWORD PTR [rbx+104], rax

; 2663 :         /* XXX - Should we raise a no-memory error? */
; 2664 :         if (d->ma_keys == NULL) {

  0002f	48 85 c0	 test	 rax, rax
  00032	75 1d		 jne	 SHORT $LN6@dict_new

; 2665 :             DK_INCREF(Py_EMPTY_KEYS);

  00034	48 ff 05 00 00
	00 00		 inc	 QWORD PTR empty_keys_struct

; 2666 :             d->ma_keys = Py_EMPTY_KEYS;

  0003b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:empty_keys_struct
  00042	48 89 43 68	 mov	 QWORD PTR [rbx+104], rax

; 2667 :             d->ma_values = empty_values;

  00046	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:empty_values
  0004d	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax
$LN6@dict_new:

; 2668 :         }
; 2669 :         d->ma_used = 0;
; 2670 :         /* The object has been implicitly tracked by tp_alloc */
; 2671 :         if (type == &PyDict_Type)

  00051	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  00058	48 c7 43 60 00
	00 00 00	 mov	 QWORD PTR [rbx+96], 0
  00060	48 3b f8	 cmp	 rdi, rax
  00063	75 7c		 jne	 SHORT $LN13@dict_new

; 2672 :             _PyObject_GC_UNTRACK(d);

  00065	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  0006c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08LCOIKHBG@dict_new?$AA@
  00073	4c 8b cb	 mov	 r9, rbx
  00076	41 b8 70 0a 00
	00		 mov	 r8d, 2672		; 00000a70H
  0007c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00084	e8 00 00 00 00	 call	 _PyParallel_Guard
  00089	85 c0		 test	 eax, eax
  0008b	75 54		 jne	 SHORT $LN13@dict_new
  0008d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00094	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08LCOIKHBG@dict_new?$AA@
  0009b	4c 8b cb	 mov	 r9, rbx
  0009e	41 b8 70 0a 00
	00		 mov	 r8d, 2672		; 00000a70H
  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b1	85 c0		 test	 eax, eax
  000b3	74 04		 je	 SHORT $LN10@dict_new
  000b5	33 d2		 xor	 edx, edx
  000b7	eb 04		 jmp	 SHORT $LN11@dict_new
$LN10@dict_new:
  000b9	48 8d 53 e8	 lea	 rdx, QWORD PTR [rbx-24]
$LN11@dict_new:
  000bd	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  000c0	48 8b 4a 08	 mov	 rcx, QWORD PTR [rdx+8]
  000c4	48 c7 42 10 fe
	ff ff ff	 mov	 QWORD PTR [rdx+16], -2
  000cc	48 89 01	 mov	 QWORD PTR [rcx], rax
  000cf	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  000d2	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  000d6	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  000da	48 c7 02 00 00
	00 00		 mov	 QWORD PTR [rdx], 0
$LN13@dict_new:

; 2673 :     }
; 2674 :     return self;

  000e1	48 8b c3	 mov	 rax, rbx
$LN1@dict_new:

; 2675 : }

  000e4	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000e9	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ed	5f		 pop	 rdi
  000ee	c3		 ret	 0
dict_new ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT dict_iter
_TEXT	SEGMENT
dict$ = 8
dict_iter PROC						; COMDAT

; 2686 :     return dictiter_new(dict, &PyDictIterKey_Type);

  00000	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyDictIterKey_Type

; 2687 : }

  00007	e9 00 00 00 00	 jmp	 dictiter_new
dict_iter ENDP
_TEXT	ENDS
PUBLIC	_PyDict_NewKeysForClass
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyDict_NewKeysForClass DD imagerel $LN6
	DD	imagerel $LN6+58
	DD	imagerel $unwind$_PyDict_NewKeysForClass
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyDict_NewKeysForClass DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyDict_NewKeysForClass
_TEXT	SEGMENT
_PyDict_NewKeysForClass PROC				; COMDAT

; 3739 : {

$LN6:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 3740 :     PyDictKeysObject *keys = new_keys_object(PyDict_MINSIZE_SPLIT);

  00006	b9 04 00 00 00	 mov	 ecx, 4
  0000b	e8 00 00 00 00	 call	 new_keys_object
  00010	48 8b d8	 mov	 rbx, rax

; 3741 :     if (keys == NULL)

  00013	48 85 c0	 test	 rax, rax
  00016	75 0e		 jne	 SHORT $LN2@PyDict_New@2

; 3742 :         PyErr_Clear();

  00018	e8 00 00 00 00	 call	 PyErr_Clear

; 3745 :     return keys;

  0001d	48 8b c3	 mov	 rax, rbx

; 3746 : }

  00020	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00024	5b		 pop	 rbx
  00025	c3		 ret	 0
$LN2@PyDict_New@2:

; 3743 :     else
; 3744 :         keys->dk_lookup = lookdict_split;

  00026	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:lookdict_split
  0002d	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax

; 3745 :     return keys;

  00031	48 8b c3	 mov	 rax, rbx

; 3746 : }

  00034	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00038	5b		 pop	 rbx
  00039	c3		 ret	 0
_PyDict_NewKeysForClass ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@OFDEHIMA@This?5object?5has?5no?5__dict__?$AA@ ; `string'
PUBLIC	PyObject_GenericGetDict
EXTRN	PyExc_AttributeError:QWORD
EXTRN	_PyObject_GetDictPtr:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyObject_GenericGetDict DD imagerel $LN17
	DD	imagerel $LN17+214
	DD	imagerel $unwind$PyObject_GenericGetDict
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_GenericGetDict DD 063f01H
	DD	08343fH
	DD	09640aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0BM@OFDEHIMA@This?5object?5has?5no?5__dict__?$AA@
CONST	SEGMENT
??_C@_0BM@OFDEHIMA@This?5object?5has?5no?5__dict__?$AA@ DB 'This object h'
	DB	'as no __dict__', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\dictobject.c
CONST	ENDS
;	COMDAT PyObject_GenericGetDict
_TEXT	SEGMENT
obj$ = 64
context$ = 72
PyObject_GenericGetDict PROC				; COMDAT

; 3752 : {

$LN17:
  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f1	 mov	 rsi, rcx

; 3753 :     PyObject *dict, **dictptr = _PyObject_GetDictPtr(obj);

  0000d	e8 00 00 00 00	 call	 _PyObject_GetDictPtr
  00012	48 8b f8	 mov	 rdi, rax

; 3754 :     if (dictptr == NULL) {

  00015	48 85 c0	 test	 rax, rax
  00018	75 20		 jne	 SHORT $LN8@PyObject_G

; 3755 :         PyErr_SetString(PyExc_AttributeError,
; 3756 :                         "This object has no __dict__");

  0001a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@OFDEHIMA@This?5object?5has?5no?5__dict__?$AA@
  00028	e8 00 00 00 00	 call	 PyErr_SetString

; 3757 :         return NULL;

  0002d	33 c0		 xor	 eax, eax

; 3771 :     return dict;
; 3772 : }

  0002f	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00034	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00038	5f		 pop	 rdi
  00039	c3		 ret	 0
$LN8@PyObject_G:
  0003a	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx

; 3758 :     }
; 3759 :     dict = *dictptr;

  0003f	48 8b 18	 mov	 rbx, QWORD PTR [rax]

; 3760 :     if (dict == NULL) {

  00042	48 85 db	 test	 rbx, rbx
  00045	75 41		 jne	 SHORT $LN15@PyObject_G

; 3761 :         PyTypeObject *tp = Py_TYPE(obj);

  00047	48 8b 4e 58	 mov	 rcx, QWORD PTR [rsi+88]

; 3762 :         if ((tp->tp_flags & Py_TPFLAGS_HEAPTYPE) && CACHED_KEYS(tp)) {

  0004b	f7 81 00 01 00
	00 00 02 00 00	 test	 DWORD PTR [rcx+256], 512 ; 00000200H
  00055	74 21		 je	 SHORT $LN6@PyObject_G
  00057	48 39 99 80 03
	00 00		 cmp	 QWORD PTR [rcx+896], rbx
  0005e	74 18		 je	 SHORT $LN6@PyObject_G

; 3763 :             DK_INCREF(CACHED_KEYS(tp));

  00060	48 8b 81 80 03
	00 00		 mov	 rax, QWORD PTR [rcx+896]
  00067	48 ff 00	 inc	 QWORD PTR [rax]

; 3764 :             *dictptr = dict = new_dict_with_shared_keys(CACHED_KEYS(tp));

  0006a	48 8b 89 80 03
	00 00		 mov	 rcx, QWORD PTR [rcx+896]
  00071	e8 00 00 00 00	 call	 new_dict_with_shared_keys

; 3765 :         }
; 3766 :         else {

  00076	eb 05		 jmp	 SHORT $LN16@PyObject_G
$LN6@PyObject_G:

; 3767 :             *dictptr = dict = PyDict_New();

  00078	e8 00 00 00 00	 call	 PyDict_New
$LN16@PyObject_G:
  0007d	48 89 07	 mov	 QWORD PTR [rdi], rax
  00080	48 8b d8	 mov	 rbx, rax

; 3768 :         }
; 3769 :     }
; 3770 :     Py_XINCREF(dict);

  00083	48 85 c0	 test	 rax, rax
  00086	74 3b		 je	 SHORT $LN3@PyObject_G
$LN15@PyObject_G:
  00088	e8 00 00 00 00	 call	 _Py_PXCTX
  0008d	85 c0		 test	 eax, eax
  0008f	75 32		 jne	 SHORT $LN3@PyObject_G
  00091	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0009f	4c 8b cb	 mov	 r9, rbx
  000a2	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000a8	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000b0	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b5	85 c0		 test	 eax, eax
  000b7	75 06		 jne	 SHORT $LN11@PyObject_G
  000b9	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000bd	74 04		 je	 SHORT $LN3@PyObject_G
$LN11@PyObject_G:
  000bf	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN3@PyObject_G:

; 3771 :     return dict;
; 3772 : }

  000c3	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000c8	48 8b c3	 mov	 rax, rbx
  000cb	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000d0	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d4	5f		 pop	 rdi
  000d5	c3		 ret	 0
PyObject_GenericGetDict ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT insertion_resize
_TEXT	SEGMENT
mp$ = 8
insertion_resize PROC					; COMDAT

; 801  :     return dictresize(mp, GROWTH_RATE(mp));

  00000	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]
  00004	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00008	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  0000c	48 d1 fa	 sar	 rdx, 1
  0000f	48 8d 14 42	 lea	 rdx, QWORD PTR [rdx+rax*2]

; 802  : }

  00013	e9 00 00 00 00	 jmp	 dictresize
insertion_resize ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@OBPAKNPI@insertdict?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$insertdict DD imagerel insertdict
	DD	imagerel insertdict+114
	DD	imagerel $unwind$insertdict
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$insertdict DD imagerel insertdict+114
	DD	imagerel insertdict+318
	DD	imagerel $chain$2$insertdict
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$insertdict DD imagerel insertdict+318
	DD	imagerel insertdict+985
	DD	imagerel $chain$3$insertdict
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$insertdict DD imagerel insertdict+985
	DD	imagerel insertdict+1178
	DD	imagerel $chain$4$insertdict
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$insertdict DD imagerel insertdict+1178
	DD	imagerel insertdict+1196
	DD	imagerel $chain$5$insertdict
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$insertdict DD 021H
	DD	imagerel insertdict
	DD	imagerel insertdict+114
	DD	imagerel $unwind$insertdict
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$insertdict DD 021H
	DD	imagerel insertdict+114
	DD	imagerel insertdict+318
	DD	imagerel $chain$2$insertdict
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$insertdict DD 020521H
	DD	08f405H
	DD	imagerel insertdict+114
	DD	imagerel insertdict+318
	DD	imagerel $chain$2$insertdict
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$insertdict DD 040d21H
	DD	011e40dH
	DD	0f5405H
	DD	imagerel insertdict
	DD	imagerel insertdict+114
	DD	imagerel $unwind$insertdict
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$insertdict DD 075a01H
	DD	010c45aH
	DD	0d006820aH
	DD	060037004H
	DD	03002H
xdata	ENDS
;	COMDAT ??_C@_0L@OBPAKNPI@insertdict?$AA@
CONST	SEGMENT
??_C@_0L@OBPAKNPI@insertdict?$AA@ DB 'insertdict', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\dictobject.c
CONST	ENDS
;	COMDAT insertdict
_TEXT	SEGMENT
value_addr$ = 48
tv212 = 112
tv152 = 112
mp$ = 112
key$ = 120
hash$ = 128
value$ = 136
insertdict PROC						; COMDAT

; 811  : {

  00000	40 53		 push	 rbx
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	41 55		 push	 r13
  00006	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 812  :     PyObject *old_value;
; 813  :     PyObject **value_addr;
; 814  :     PyDictKeyEntry *ep;
; 815  :     assert(key != dummy);
; 816  : 
; 817  :     if (mp->ma_values != NULL && !PyUnicode_CheckExact(key)) {

  0000a	48 83 79 70 00	 cmp	 QWORD PTR [rcx+112], 0
  0000f	49 8b f1	 mov	 rsi, r9
  00012	4d 8b e8	 mov	 r13, r8
  00015	48 8b fa	 mov	 rdi, rdx
  00018	48 8b d9	 mov	 rbx, rcx
  0001b	74 23		 je	 SHORT $LN21@insertdict@2
  0001d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  00024	48 39 42 58	 cmp	 QWORD PTR [rdx+88], rax
  00028	74 16		 je	 SHORT $LN21@insertdict@2

; 818  :         if (insertion_resize(mp) < 0)

  0002a	e8 00 00 00 00	 call	 insertion_resize
  0002f	85 c0		 test	 eax, eax
  00031	79 0d		 jns	 SHORT $LN21@insertdict@2

; 819  :             return -1;

  00033	83 c8 ff	 or	 eax, -1

; 871  : }

  00036	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0003a	41 5d		 pop	 r13
  0003c	5f		 pop	 rdi
  0003d	5e		 pop	 rsi
  0003e	5b		 pop	 rbx
  0003f	c3		 ret	 0
$LN21@insertdict@2:

; 820  :     }
; 821  : 
; 822  :     ep = mp->ma_keys->dk_lookup(mp, key, hash, &value_addr);

  00040	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  00044	4c 8d 4c 24 30	 lea	 r9, QWORD PTR value_addr$[rsp]
  00049	4d 8b c5	 mov	 r8, r13
  0004c	48 8b d7	 mov	 rdx, rdi
  0004f	48 8b cb	 mov	 rcx, rbx
  00052	4c 89 a4 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], r12
  0005a	ff 50 10	 call	 QWORD PTR [rax+16]
  0005d	4c 8b e0	 mov	 r12, rax

; 823  :     if (ep == NULL) {

  00060	48 85 c0	 test	 rax, rax
  00063	75 08		 jne	 SHORT $LN20@insertdict@2

; 824  :         return -1;

  00065	83 c8 ff	 or	 eax, -1
  00068	e9 2d 04 00 00	 jmp	 $LN71@insertdict@2
$LN20@insertdict@2:

; 825  :     }
; 826  :     old_value = *value_addr;

  0006d	48 8b 44 24 30	 mov	 rax, QWORD PTR value_addr$[rsp]
  00072	48 89 6c 24 78	 mov	 QWORD PTR [rsp+120], rbp
  00077	4c 89 b4 24 88
	00 00 00	 mov	 QWORD PTR [rsp+136], r14
  0007f	4c 8b 30	 mov	 r14, QWORD PTR [rax]

; 827  :     /*
; 828  :     if (Px_ASSIGNMENT_ERROR(mp, old_value))
; 829  :         return -1;
; 830  :     */
; 831  :     Py_INCREF(value);

  00082	e8 00 00 00 00	 call	 _Py_PXCTX
  00087	85 c0		 test	 eax, eax
  00089	75 32		 jne	 SHORT $LN19@insertdict@2
  0008b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00092	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00099	4c 8b ce	 mov	 r9, rsi
  0009c	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000a2	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000aa	e8 00 00 00 00	 call	 _PyParallel_Guard
  000af	85 c0		 test	 eax, eax
  000b1	75 06		 jne	 SHORT $LN63@insertdict@2
  000b3	f6 46 20 20	 test	 BYTE PTR [rsi+32], 32	; 00000020H
  000b7	74 04		 je	 SHORT $LN19@insertdict@2
$LN63@insertdict@2:
  000b9	48 ff 46 50	 inc	 QWORD PTR [rsi+80]
$LN19@insertdict@2:

; 832  :     MAINTAIN_TRACKING(mp, key, value);

  000bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  000c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OBPAKNPI@insertdict?$AA@
  000cb	4c 8b cb	 mov	 r9, rbx
  000ce	41 b8 40 03 00
	00		 mov	 r8d, 832		; 00000340H
  000d4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000dc	e8 00 00 00 00	 call	 _PyParallel_Guard
  000e1	33 ed		 xor	 ebp, ebp
  000e3	85 c0		 test	 eax, eax
  000e5	75 40		 jne	 SHORT $LN67@insertdict@2
  000e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  000ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OBPAKNPI@insertdict?$AA@
  000f5	4c 8b cb	 mov	 r9, rbx
  000f8	41 b8 40 03 00
	00		 mov	 r8d, 832		; 00000340H
  000fe	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00106	e8 00 00 00 00	 call	 _PyParallel_Guard
  0010b	8b cd		 mov	 ecx, ebp
  0010d	85 c0		 test	 eax, eax
  0010f	75 04		 jne	 SHORT $LN26@insertdict@2
  00111	48 8d 4b e8	 lea	 rcx, QWORD PTR [rbx-24]
$LN26@insertdict@2:
  00115	48 83 79 10 fe	 cmp	 QWORD PTR [rcx+16], -2
  0011a	8b c5		 mov	 eax, ebp
  0011c	0f 95 c0	 setne	 al
  0011f	85 c0		 test	 eax, eax
  00121	0f 85 b2 02 00
	00		 jne	 $LN10@insertdict@2
$LN67@insertdict@2:
  00127	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  0012e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OBPAKNPI@insertdict?$AA@
  00135	4c 8b cf	 mov	 r9, rdi
  00138	41 b8 40 03 00
	00		 mov	 r8d, 832		; 00000340H
  0013e	4c 89 7c 24 40	 mov	 QWORD PTR [rsp+64], r15
  00143	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0014b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00150	4c 8d 3d 00 00
	00 00		 lea	 r15, OFFSET FLAT:PyTuple_Type
  00157	85 c0		 test	 eax, eax
  00159	0f 85 d7 00 00
	00		 jne	 $LN41@insertdict@2
  0015f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00166	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OBPAKNPI@insertdict?$AA@
  0016d	4c 8b cf	 mov	 r9, rdi
  00170	41 b8 40 03 00
	00		 mov	 r8d, 832		; 00000340H
  00176	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0017e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00183	85 c0		 test	 eax, eax
  00185	0f 85 ab 00 00
	00		 jne	 $LN41@insertdict@2
  0018b	e8 00 00 00 00	 call	 _Py_PXCTX
  00190	85 c0		 test	 eax, eax
  00192	0f 85 9e 00 00
	00		 jne	 $LN41@insertdict@2
  00198	48 8b 4f 58	 mov	 rcx, QWORD PTR [rdi+88]
  0019c	8b 81 00 01 00
	00		 mov	 eax, DWORD PTR [rcx+256]
  001a2	c1 e8 0e	 shr	 eax, 14
  001a5	83 e0 01	 and	 eax, 1
  001a8	0f 84 88 00 00
	00		 je	 $LN41@insertdict@2
  001ae	48 8b 81 a0 01
	00 00		 mov	 rax, QWORD PTR [rcx+416]
  001b5	48 85 c0	 test	 rax, rax
  001b8	74 09		 je	 SHORT $LN69@insertdict@2
  001ba	48 8b cf	 mov	 rcx, rdi
  001bd	ff d0		 call	 rax
  001bf	85 c0		 test	 eax, eax
  001c1	74 73		 je	 SHORT $LN41@insertdict@2
$LN69@insertdict@2:
  001c3	4c 39 7f 58	 cmp	 QWORD PTR [rdi+88], r15
  001c7	0f 85 70 01 00
	00		 jne	 $LN14@insertdict@2
  001cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  001d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OBPAKNPI@insertdict?$AA@
  001db	4c 8b cf	 mov	 r9, rdi
  001de	41 b8 40 03 00
	00		 mov	 r8d, 832		; 00000340H
  001e4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001ec	e8 00 00 00 00	 call	 _PyParallel_Guard
  001f1	85 c0		 test	 eax, eax
  001f3	75 41		 jne	 SHORT $LN41@insertdict@2
  001f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  001fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OBPAKNPI@insertdict?$AA@
  00203	4c 8b cf	 mov	 r9, rdi
  00206	41 b8 40 03 00
	00		 mov	 r8d, 832		; 00000340H
  0020c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00214	e8 00 00 00 00	 call	 _PyParallel_Guard
  00219	48 8b cd	 mov	 rcx, rbp
  0021c	85 c0		 test	 eax, eax
  0021e	75 04		 jne	 SHORT $LN37@insertdict@2
  00220	48 8d 4f e8	 lea	 rcx, QWORD PTR [rdi-24]
$LN37@insertdict@2:
  00224	48 83 79 10 fe	 cmp	 QWORD PTR [rcx+16], -2
  00229	8b c5		 mov	 eax, ebp
  0022b	0f 95 c0	 setne	 al
  0022e	85 c0		 test	 eax, eax
  00230	0f 85 07 01 00
	00		 jne	 $LN14@insertdict@2
$LN41@insertdict@2:
  00236	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  0023d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OBPAKNPI@insertdict?$AA@
  00244	4c 8b ce	 mov	 r9, rsi
  00247	41 b8 40 03 00
	00		 mov	 r8d, 832		; 00000340H
  0024d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00255	e8 00 00 00 00	 call	 _PyParallel_Guard
  0025a	85 c0		 test	 eax, eax
  0025c	0f 85 72 01 00
	00		 jne	 $LN74@insertdict@2
  00262	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00269	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OBPAKNPI@insertdict?$AA@
  00270	4c 8b ce	 mov	 r9, rsi
  00273	41 b8 40 03 00
	00		 mov	 r8d, 832		; 00000340H
  00279	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00281	e8 00 00 00 00	 call	 _PyParallel_Guard
  00286	85 c0		 test	 eax, eax
  00288	0f 85 46 01 00
	00		 jne	 $LN74@insertdict@2
  0028e	e8 00 00 00 00	 call	 _Py_PXCTX
  00293	85 c0		 test	 eax, eax
  00295	0f 85 39 01 00
	00		 jne	 $LN74@insertdict@2
  0029b	48 8b 4e 58	 mov	 rcx, QWORD PTR [rsi+88]
  0029f	8b 81 00 01 00
	00		 mov	 eax, DWORD PTR [rcx+256]
  002a5	c1 e8 0e	 shr	 eax, 14
  002a8	83 e0 01	 and	 eax, 1
  002ab	0f 84 23 01 00
	00		 je	 $LN74@insertdict@2
  002b1	48 8b 81 a0 01
	00 00		 mov	 rax, QWORD PTR [rcx+416]
  002b8	48 85 c0	 test	 rax, rax
  002bb	74 0d		 je	 SHORT $LN70@insertdict@2
  002bd	48 8b ce	 mov	 rcx, rsi
  002c0	ff d0		 call	 rax
  002c2	85 c0		 test	 eax, eax
  002c4	0f 84 0a 01 00
	00		 je	 $LN74@insertdict@2
$LN70@insertdict@2:
  002ca	4c 39 7e 58	 cmp	 QWORD PTR [rsi+88], r15
  002ce	75 6d		 jne	 SHORT $LN14@insertdict@2
  002d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  002d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OBPAKNPI@insertdict?$AA@
  002de	4c 8b ce	 mov	 r9, rsi
  002e1	41 b8 40 03 00
	00		 mov	 r8d, 832		; 00000340H
  002e7	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002ef	e8 00 00 00 00	 call	 _PyParallel_Guard
  002f4	85 c0		 test	 eax, eax
  002f6	0f 85 d8 00 00
	00		 jne	 $LN74@insertdict@2
  002fc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00303	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OBPAKNPI@insertdict?$AA@
  0030a	4c 8b ce	 mov	 r9, rsi
  0030d	41 b8 40 03 00
	00		 mov	 r8d, 832		; 00000340H
  00313	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0031b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00320	48 8b cd	 mov	 rcx, rbp
  00323	85 c0		 test	 eax, eax
  00325	75 04		 jne	 SHORT $LN53@insertdict@2
  00327	48 8d 4e e8	 lea	 rcx, QWORD PTR [rsi-24]
$LN53@insertdict@2:
  0032b	48 83 79 10 fe	 cmp	 QWORD PTR [rcx+16], -2
  00330	8b c5		 mov	 eax, ebp
  00332	0f 95 c0	 setne	 al
  00335	85 c0		 test	 eax, eax
  00337	0f 84 97 00 00
	00		 je	 $LN74@insertdict@2
$LN14@insertdict@2:
  0033d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00344	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OBPAKNPI@insertdict?$AA@
  0034b	4c 8b cb	 mov	 r9, rbx
  0034e	41 b8 40 03 00
	00		 mov	 r8d, 832		; 00000340H
  00354	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0035c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00361	85 c0		 test	 eax, eax
  00363	75 6f		 jne	 SHORT $LN74@insertdict@2
  00365	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  0036c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OBPAKNPI@insertdict?$AA@
  00373	4c 8b cb	 mov	 r9, rbx
  00376	41 b8 40 03 00
	00		 mov	 r8d, 832		; 00000340H
  0037c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00384	e8 00 00 00 00	 call	 _PyParallel_Guard
  00389	85 c0		 test	 eax, eax
  0038b	75 04		 jne	 SHORT $LN62@insertdict@2
  0038d	48 8d 6b e8	 lea	 rbp, QWORD PTR [rbx-24]
$LN62@insertdict@2:
  00391	48 83 7d 10 fe	 cmp	 QWORD PTR [rbp+16], -2
  00396	74 0c		 je	 SHORT $LN9@insertdict@2
  00398	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  0039f	e8 00 00 00 00	 call	 Py_FatalError
$LN9@insertdict@2:
  003a4	48 c7 45 10 fd
	ff ff ff	 mov	 QWORD PTR [rbp+16], -3
  003ac	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  003b3	48 89 45 00	 mov	 QWORD PTR [rbp], rax
  003b7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  003be	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  003c2	48 89 55 08	 mov	 QWORD PTR [rbp+8], rdx
  003c6	48 89 2a	 mov	 QWORD PTR [rdx], rbp
  003c9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  003d0	48 89 68 08	 mov	 QWORD PTR [rax+8], rbp
$LN74@insertdict@2:
  003d4	4c 8b 7c 24 40	 mov	 r15, QWORD PTR [rsp+64]
$LN10@insertdict@2:

; 833  :     if (old_value != NULL) {

  003d9	4d 85 f6	 test	 r14, r14
  003dc	74 15		 je	 SHORT $LN8@insertdict@2

; 834  :         assert(ep->me_key != NULL && ep->me_key != dummy);
; 835  :         *value_addr = value;

  003de	48 8b 44 24 30	 mov	 rax, QWORD PTR value_addr$[rsp]

; 836  :         Py_DECREF(old_value); /* which **CAN** re-enter */

  003e3	49 8b ce	 mov	 rcx, r14
  003e6	48 89 30	 mov	 QWORD PTR [rax], rsi
  003e9	e8 00 00 00 00	 call	 _Py_DecRef

; 837  :     }
; 838  :     else {

  003ee	e9 98 00 00 00	 jmp	 $LN7@insertdict@2
$LN8@insertdict@2:

; 839  :         if (ep->me_key == NULL) {

  003f3	49 8b 44 24 08	 mov	 rax, QWORD PTR [r12+8]
  003f8	48 85 c0	 test	 rax, rax
  003fb	75 5d		 jne	 SHORT $LN6@insertdict@2

; 840  :             Py_INCREF(key);

  003fd	48 8b cf	 mov	 rcx, rdi
  00400	e8 00 00 00 00	 call	 _Py_IncRef

; 841  :             if (mp->ma_keys->dk_usable <= 0) {

  00405	4c 8b 5b 68	 mov	 r11, QWORD PTR [rbx+104]
  00409	49 83 7b 18 00	 cmp	 QWORD PTR [r11+24], 0
  0040e	7f 37		 jg	 SHORT $LN5@insertdict@2

; 842  :                 /* Need to resize. */
; 843  :                 if (insertion_resize(mp) < 0) {

  00410	48 8b cb	 mov	 rcx, rbx
  00413	e8 00 00 00 00	 call	 insertion_resize
  00418	85 c0		 test	 eax, eax
  0041a	79 15		 jns	 SHORT $LN4@insertdict@2

; 844  :                     Py_DECREF(key);

  0041c	48 8b cf	 mov	 rcx, rdi
  0041f	e8 00 00 00 00	 call	 _Py_DecRef

; 845  :                     Py_DECREF(value);

  00424	48 8b ce	 mov	 rcx, rsi
  00427	e8 00 00 00 00	 call	 _Py_DecRef

; 846  :                     return -1;

  0042c	83 c8 ff	 or	 eax, -1
  0042f	eb 5c		 jmp	 SHORT $LN73@insertdict@2
$LN4@insertdict@2:

; 847  :                 }
; 848  :                 ep = find_empty_slot(mp, key, hash, &value_addr);

  00431	4c 8d 4c 24 30	 lea	 r9, QWORD PTR value_addr$[rsp]
  00436	4d 8b c5	 mov	 r8, r13
  00439	48 8b d7	 mov	 rdx, rdi
  0043c	48 8b cb	 mov	 rcx, rbx
  0043f	e8 00 00 00 00	 call	 find_empty_slot
  00444	4c 8b e0	 mov	 r12, rax
$LN5@insertdict@2:

; 849  :             }
; 850  :             mp->ma_keys->dk_usable--;

  00447	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  0044b	48 ff 48 18	 dec	 QWORD PTR [rax+24]

; 851  :             assert(mp->ma_keys->dk_usable >= 0);
; 852  :             ep->me_key = key;

  0044f	49 89 7c 24 08	 mov	 QWORD PTR [r12+8], rdi

; 853  :             ep->me_hash = hash;

  00454	4d 89 2c 24	 mov	 QWORD PTR [r12], r13

; 854  :         }
; 855  :         else {

  00458	eb 25		 jmp	 SHORT $LN2@insertdict@2
$LN6@insertdict@2:

; 856  :             if (ep->me_key == dummy) {

  0045a	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_dummy_struct
  00461	48 3b c5	 cmp	 rax, rbp
  00464	75 19		 jne	 SHORT $LN2@insertdict@2

; 857  :                 Py_INCREF(key);

  00466	48 8b cf	 mov	 rcx, rdi
  00469	e8 00 00 00 00	 call	 _Py_IncRef

; 858  :                 ep->me_key = key;
; 859  :                 ep->me_hash = hash;
; 860  :                 Py_DECREF(dummy);

  0046e	48 8b cd	 mov	 rcx, rbp
  00471	49 89 7c 24 08	 mov	 QWORD PTR [r12+8], rdi
  00476	4d 89 2c 24	 mov	 QWORD PTR [r12], r13
  0047a	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@insertdict@2:

; 861  :             } else {
; 862  :                 assert(_PyDict_HasSplitTable(mp));
; 863  :             }
; 864  :         }
; 865  :         mp->ma_used++;
; 866  :         *value_addr = value;

  0047f	48 8b 44 24 30	 mov	 rax, QWORD PTR value_addr$[rsp]
  00484	48 ff 43 60	 inc	 QWORD PTR [rbx+96]
  00488	48 89 30	 mov	 QWORD PTR [rax], rsi
$LN7@insertdict@2:

; 867  :     }
; 868  :     assert(ep->me_key != NULL && ep->me_key != dummy);
; 869  :     assert(PyUnicode_CheckExact(key) || mp->ma_keys->dk_lookup == lookdict);
; 870  :     return 0;

  0048b	33 c0		 xor	 eax, eax
$LN73@insertdict@2:
  0048d	48 8b 6c 24 78	 mov	 rbp, QWORD PTR [rsp+120]
  00492	4c 8b b4 24 88
	00 00 00	 mov	 r14, QWORD PTR [rsp+136]
$LN71@insertdict@2:
  0049a	4c 8b a4 24 80
	00 00 00	 mov	 r12, QWORD PTR [rsp+128]

; 871  : }

  004a2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  004a6	41 5d		 pop	 r13
  004a8	5f		 pop	 rdi
  004a9	5e		 pop	 rsi
  004aa	5b		 pop	 rbx
  004ab	c3		 ret	 0
insertdict ENDP
_TEXT	ENDS
PUBLIC	PyDict_SetItem
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_SetItem DD imagerel $LN8
	DD	imagerel $LN8+145
	DD	imagerel $unwind$PyDict_SetItem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_SetItem DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyDict_SetItem
_TEXT	SEGMENT
op$ = 48
key$ = 56
value$ = 64
PyDict_SetItem PROC					; COMDAT

; 1212 : {

$LN8:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1213 :     PyDictObject *mp;
; 1214 :     Py_hash_t hash;
; 1215 :     if (!PyDict_Check(op)) {

  0000f	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00013	49 8b f0	 mov	 rsi, r8
  00016	48 8b da	 mov	 rbx, rdx
  00019	f7 80 00 01 00
	00 00 00 00 20	 test	 DWORD PTR [rax+256], 536870912 ; 20000000H
  00023	48 8b f9	 mov	 rdi, rcx
  00026	75 24		 jne	 SHORT $LN4@PyDict_Set

; 1216 :         PyErr_BadInternalCall();

  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  0002f	ba c0 04 00 00	 mov	 edx, 1216		; 000004c0H
  00034	e8 00 00 00 00	 call	 _PyErr_BadInternalCall
$LN7@PyDict_Set:

; 1217 :         return -1;

  00039	83 c8 ff	 or	 eax, -1

; 1240 : }

  0003c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00041	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00046	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004a	5f		 pop	 rdi
  0004b	c3		 ret	 0
$LN4@PyDict_Set:

; 1218 :     }
; 1219 :     assert(key);
; 1220 :     assert(value);
; 1221 : 
; 1222 :     /*
; 1223 :     if (Px_CHECK_PROTECTION(op, key, value))
; 1224 :         return -1;
; 1225 :     if (Px_PROTECTION_ERROR(op))
; 1226 :         return -1;
; 1227 :     */
; 1228 : 
; 1229 :     mp = (PyDictObject *)op;
; 1230 :     if (!PyUnicode_CheckExact(key) ||
; 1231 :         (hash = ((PyASCIIObject *) key)->hash) == -1)

  0004c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  00053	48 39 42 58	 cmp	 QWORD PTR [rdx+88], rax
  00057	75 0a		 jne	 SHORT $LN2@PyDict_Set
  00059	48 8b 42 68	 mov	 rax, QWORD PTR [rdx+104]
  0005d	48 83 f8 ff	 cmp	 rax, -1
  00061	75 0e		 jne	 SHORT $LN1@PyDict_Set
$LN2@PyDict_Set:

; 1232 :     {
; 1233 :         hash = PyObject_Hash(key);

  00063	48 8b ca	 mov	 rcx, rdx
  00066	e8 00 00 00 00	 call	 PyObject_Hash

; 1234 :         if (hash == -1)

  0006b	48 83 f8 ff	 cmp	 rax, -1

; 1235 :             return -1;

  0006f	74 c8		 je	 SHORT $LN7@PyDict_Set
$LN1@PyDict_Set:

; 1236 :     }
; 1237 : 
; 1238 :     /* insertdict() handles any resizing that might be necessary */
; 1239 :     return insertdict(mp, key, hash, value);

  00071	4c 8b ce	 mov	 r9, rsi
  00074	4c 8b c0	 mov	 r8, rax
  00077	48 8b d3	 mov	 rdx, rbx
  0007a	48 8b cf	 mov	 rcx, rdi

; 1240 : }

  0007d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00082	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00087	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008b	5f		 pop	 rdi
  0008c	e9 00 00 00 00	 jmp	 insertdict
PyDict_SetItem ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT dict_ass_sub
_TEXT	SEGMENT
mp$ = 8
v$ = 16
w$ = 24
dict_ass_sub PROC					; COMDAT

; 1581 :     if (w == NULL)

  00000	4d 85 c0	 test	 r8, r8
  00003	75 05		 jne	 SHORT $LN2@dict_ass_s

; 1582 :         return PyDict_DelItem((PyObject *)mp, v);
; 1583 :     else
; 1584 :         return PyDict_SetItem((PyObject *)mp, v, w);
; 1585 : }

  00005	e9 00 00 00 00	 jmp	 PyDict_DelItem
$LN2@dict_ass_s:
  0000a	e9 00 00 00 00	 jmp	 PyDict_SetItem
dict_ass_sub ENDP
_TEXT	ENDS
EXTRN	PyObject_SetItem:PROC
EXTRN	_PySet_NextEntry:PROC
EXTRN	PyObject_CallObject:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_fromkeys DD imagerel dict_fromkeys
	DD	imagerel dict_fromkeys+88
	DD	imagerel $unwind$dict_fromkeys
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$dict_fromkeys DD imagerel dict_fromkeys+88
	DD	imagerel dict_fromkeys+324
	DD	imagerel $chain$0$dict_fromkeys
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$dict_fromkeys DD imagerel dict_fromkeys+324
	DD	imagerel dict_fromkeys+457
	DD	imagerel $chain$2$dict_fromkeys
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$dict_fromkeys DD imagerel dict_fromkeys+457
	DD	imagerel dict_fromkeys+479
	DD	imagerel $chain$4$dict_fromkeys
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$dict_fromkeys DD imagerel dict_fromkeys+479
	DD	imagerel dict_fromkeys+524
	DD	imagerel $chain$7$dict_fromkeys
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$10$dict_fromkeys DD imagerel dict_fromkeys+524
	DD	imagerel dict_fromkeys+732
	DD	imagerel $chain$10$dict_fromkeys
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$10$dict_fromkeys DD 060521H
	DD	0e6405H
	DD	0ac400H
	DD	0f7400H
	DD	imagerel dict_fromkeys
	DD	imagerel dict_fromkeys+88
	DD	imagerel $unwind$dict_fromkeys
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$dict_fromkeys DD 040521H
	DD	0ac405H
	DD	0f7400H
	DD	imagerel dict_fromkeys
	DD	imagerel dict_fromkeys+88
	DD	imagerel $unwind$dict_fromkeys
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$dict_fromkeys DD 020021H
	DD	0f7400H
	DD	imagerel dict_fromkeys
	DD	imagerel dict_fromkeys+88
	DD	imagerel $unwind$dict_fromkeys
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$dict_fromkeys DD 020021H
	DD	0f7400H
	DD	imagerel dict_fromkeys
	DD	imagerel dict_fromkeys+88
	DD	imagerel $unwind$dict_fromkeys
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$dict_fromkeys DD 020521H
	DD	0f7405H
	DD	imagerel dict_fromkeys
	DD	imagerel dict_fromkeys+88
	DD	imagerel $unwind$dict_fromkeys
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_fromkeys DD 030a01H
	DD	03003a20aH
	DD	05002H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT dict_fromkeys
_TEXT	SEGMENT
hash$21517 = 48
pos$21496 = 48
key$21516 = 56
key$21497 = 56
pos$21515 = 64
hash$21498 = 64
oldvalue$21495 = 72
cls$ = 112
args$ = 120
seq$ = 128
value$ = 136
dict_fromkeys PROC					; COMDAT

; 1743 : {

  00000	40 55		 push	 rbp
  00002	53		 push	 rbx
  00003	48 8b ec	 mov	 rbp, rsp
  00006	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	48 8b c2	 mov	 rax, rdx

; 1744 :     PyObject *seq;
; 1745 :     PyObject *value = Py_None;

  00010	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00017	48 89 4d 30	 mov	 QWORD PTR value$[rbp-88], rcx

; 1746 :     PyObject *it;       /* iter(seq) */
; 1747 :     PyObject *key;
; 1748 :     PyObject *d;
; 1749 :     int status;
; 1750 : 
; 1751 :     /* PXX TODO: px protection here? */
; 1752 : 
; 1753 :     if (!PyArg_UnpackTuple(args, "fromkeys", 1, 2, &seq, &value))

  0001b	48 8d 4d 30	 lea	 rcx, QWORD PTR value$[rbp-88]
  0001f	41 b9 02 00 00
	00		 mov	 r9d, 2
  00025	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0002a	48 8d 4d 28	 lea	 rcx, QWORD PTR seq$[rbp-88]
  0002e	45 8d 41 ff	 lea	 r8d, QWORD PTR [r9-1]
  00032	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08KMEGJNJN@fromkeys?$AA@
  0003e	48 8b c8	 mov	 rcx, rax
  00041	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00046	85 c0		 test	 eax, eax
  00048	75 09		 jne	 SHORT $LN27@dict_fromk

; 1754 :         return NULL;

  0004a	33 c0		 xor	 eax, eax

; 1833 : }

  0004c	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00050	5b		 pop	 rbx
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
$LN27@dict_fromk:

; 1755 : 
; 1756 :     d = PyObject_CallObject(cls, NULL);

  00053	33 d2		 xor	 edx, edx
  00055	48 8b cb	 mov	 rcx, rbx
  00058	48 89 7c 24 78	 mov	 QWORD PTR [rsp+120], rdi
  0005d	e8 00 00 00 00	 call	 PyObject_CallObject
  00062	48 8b f8	 mov	 rdi, rax

; 1757 :     if (d == NULL)

  00065	48 85 c0	 test	 rax, rax

; 1758 :         return NULL;

  00068	0f 84 63 01 00
	00		 je	 $LN41@dict_fromk

; 1759 : 
; 1760 :     if (PyDict_CheckExact(d) && ((PyDictObject *)d)->ma_used == 0) {

  0006e	48 8b 4d 28	 mov	 rcx, QWORD PTR seq$[rbp-88]
  00072	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:PyDict_Type
  00079	48 39 58 58	 cmp	 QWORD PTR [rax+88], rbx
  0007d	74 0a		 je	 SHORT $LN24@dict_fromk
  0007f	48 39 58 38	 cmp	 QWORD PTR [rax+56], rbx
  00083	0f 85 56 01 00
	00		 jne	 $LN17@dict_fromk
$LN24@dict_fromk:
  00089	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0008e	0f 85 4b 01 00
	00		 jne	 $LN17@dict_fromk

; 1761 :         if (PyDict_CheckExact(seq)) {

  00094	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00098	48 3b c3	 cmp	 rax, rbx
  0009b	0f 84 a3 00 00
	00		 je	 $LN22@dict_fromk
  000a1	48 39 59 38	 cmp	 QWORD PTR [rcx+56], rbx
  000a5	0f 84 99 00 00
	00		 je	 $LN22@dict_fromk

; 1780 :         }
; 1781 :         if (PyAnySet_CheckExact(seq)) {

  000ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PySet_Type
  000b2	48 3b c2	 cmp	 rax, rdx
  000b5	74 10		 je	 SHORT $LN16@dict_fromk
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyFrozenSet_Type
  000be	48 3b c2	 cmp	 rax, rdx
  000c1	0f 85 18 01 00
	00		 jne	 $LN17@dict_fromk
$LN16@dict_fromk:

; 1782 :             PyDictObject *mp = (PyDictObject *)d;
; 1783 :             Py_ssize_t pos = 0;

  000c7	48 c7 45 e8 00
	00 00 00	 mov	 QWORD PTR pos$21515[rbp-88], 0

; 1784 :             PyObject *key;
; 1785 :             Py_hash_t hash;
; 1786 : 
; 1787 :             if (dictresize(mp, PySet_GET_SIZE(seq))) {

  000cf	48 8b 51 68	 mov	 rdx, QWORD PTR [rcx+104]
  000d3	48 8b cf	 mov	 rcx, rdi
  000d6	e8 00 00 00 00	 call	 dictresize
  000db	85 c0		 test	 eax, eax

; 1788 :                 Py_DECREF(d);
; 1789 :                 return NULL;

  000dd	0f 85 e6 00 00
	00		 jne	 $LN35@dict_fromk

; 1790 :             }
; 1791 : 
; 1792 :             while (_PySet_NextEntry(seq, &pos, &key, &hash)) {

  000e3	48 8b 4d 28	 mov	 rcx, QWORD PTR seq$[rbp-88]
  000e7	4c 8d 4d d8	 lea	 r9, QWORD PTR hash$21517[rbp-88]
  000eb	4c 8d 45 e0	 lea	 r8, QWORD PTR key$21516[rbp-88]
  000ef	48 8d 55 e8	 lea	 rdx, QWORD PTR pos$21515[rbp-88]
  000f3	e8 00 00 00 00	 call	 _PySet_NextEntry
  000f8	85 c0		 test	 eax, eax
  000fa	74 39		 je	 SHORT $LN19@dict_fromk
  000fc	0f 1f 40 00	 npad	 4
$LL14@dict_fromk:

; 1793 :                 if (insertdict(mp, key, hash, value)) {

  00100	4c 8b 4d 30	 mov	 r9, QWORD PTR value$[rbp-88]
  00104	4c 8b 45 d8	 mov	 r8, QWORD PTR hash$21517[rbp-88]
  00108	48 8b 55 e0	 mov	 rdx, QWORD PTR key$21516[rbp-88]
  0010c	48 8b cf	 mov	 rcx, rdi
  0010f	e8 00 00 00 00	 call	 insertdict
  00114	85 c0		 test	 eax, eax
  00116	0f 85 ad 00 00
	00		 jne	 $LN35@dict_fromk

; 1790 :             }
; 1791 : 
; 1792 :             while (_PySet_NextEntry(seq, &pos, &key, &hash)) {

  0011c	48 8b 4d 28	 mov	 rcx, QWORD PTR seq$[rbp-88]
  00120	4c 8d 4d d8	 lea	 r9, QWORD PTR hash$21517[rbp-88]
  00124	4c 8d 45 e0	 lea	 r8, QWORD PTR key$21516[rbp-88]
  00128	48 8d 55 e8	 lea	 rdx, QWORD PTR pos$21515[rbp-88]
  0012c	e8 00 00 00 00	 call	 _PySet_NextEntry
  00131	85 c0		 test	 eax, eax
  00133	75 cb		 jne	 SHORT $LL14@dict_fromk
$LN19@dict_fromk:

; 1777 :                 }
; 1778 :             }
; 1779 :             return d;

  00135	48 8b c7	 mov	 rax, rdi
  00138	48 8b 7c 24 78	 mov	 rdi, QWORD PTR [rsp+120]

; 1833 : }

  0013d	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00141	5b		 pop	 rbx
  00142	5d		 pop	 rbp
  00143	c3		 ret	 0
$LN22@dict_fromk:

; 1762 :             PyDictObject *mp = (PyDictObject *)d;
; 1763 :             PyObject *oldvalue;
; 1764 :             Py_ssize_t pos = 0;
; 1765 :             PyObject *key;
; 1766 :             Py_hash_t hash;
; 1767 : 
; 1768 :             if (dictresize(mp, Py_SIZE(seq))) {

  00144	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00148	48 8b cf	 mov	 rcx, rdi
  0014b	48 c7 45 d8 00
	00 00 00	 mov	 QWORD PTR pos$21496[rbp-88], 0
  00153	e8 00 00 00 00	 call	 dictresize
  00158	85 c0		 test	 eax, eax

; 1769 :                 Py_DECREF(d);
; 1770 :                 return NULL;

  0015a	75 6d		 jne	 SHORT $LN35@dict_fromk

; 1771 :             }
; 1772 : 
; 1773 :             while (_PyDict_Next(seq, &pos, &key, &oldvalue, &hash)) {

  0015c	48 8b 4d 28	 mov	 rcx, QWORD PTR seq$[rbp-88]
  00160	48 8d 45 e8	 lea	 rax, QWORD PTR hash$21498[rbp-88]
  00164	4c 8d 4d f0	 lea	 r9, QWORD PTR oldvalue$21495[rbp-88]
  00168	4c 8d 45 e0	 lea	 r8, QWORD PTR key$21497[rbp-88]
  0016c	48 8d 55 d8	 lea	 rdx, QWORD PTR pos$21496[rbp-88]
  00170	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00175	e8 00 00 00 00	 call	 _PyDict_Next
  0017a	85 c0		 test	 eax, eax
  0017c	74 b7		 je	 SHORT $LN19@dict_fromk
  0017e	66 90		 npad	 2
$LL20@dict_fromk:

; 1774 :                 if (insertdict(mp, key, hash, value)) {

  00180	4c 8b 4d 30	 mov	 r9, QWORD PTR value$[rbp-88]
  00184	4c 8b 45 e8	 mov	 r8, QWORD PTR hash$21498[rbp-88]
  00188	48 8b 55 e0	 mov	 rdx, QWORD PTR key$21497[rbp-88]
  0018c	48 8b cf	 mov	 rcx, rdi
  0018f	e8 00 00 00 00	 call	 insertdict
  00194	85 c0		 test	 eax, eax
  00196	75 31		 jne	 SHORT $LN35@dict_fromk

; 1771 :             }
; 1772 : 
; 1773 :             while (_PyDict_Next(seq, &pos, &key, &oldvalue, &hash)) {

  00198	48 8b 4d 28	 mov	 rcx, QWORD PTR seq$[rbp-88]
  0019c	48 8d 45 e8	 lea	 rax, QWORD PTR hash$21498[rbp-88]
  001a0	4c 8d 4d f0	 lea	 r9, QWORD PTR oldvalue$21495[rbp-88]
  001a4	4c 8d 45 e0	 lea	 r8, QWORD PTR key$21497[rbp-88]
  001a8	48 8d 55 d8	 lea	 rdx, QWORD PTR pos$21496[rbp-88]
  001ac	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001b1	e8 00 00 00 00	 call	 _PyDict_Next
  001b6	85 c0		 test	 eax, eax
  001b8	75 c6		 jne	 SHORT $LL20@dict_fromk

; 1777 :                 }
; 1778 :             }
; 1779 :             return d;

  001ba	48 8b c7	 mov	 rax, rdi
  001bd	48 8b 7c 24 78	 mov	 rdi, QWORD PTR [rsp+120]

; 1833 : }

  001c2	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001c6	5b		 pop	 rbx
  001c7	5d		 pop	 rbp
  001c8	c3		 ret	 0
$LN35@dict_fromk:

; 1775 :                     Py_DECREF(d);

  001c9	48 8b cf	 mov	 rcx, rdi
  001cc	e8 00 00 00 00	 call	 _Py_DecRef
$LN41@dict_fromk:

; 1776 :                     return NULL;

  001d1	33 c0		 xor	 eax, eax
  001d3	48 8b 7c 24 78	 mov	 rdi, QWORD PTR [rsp+120]

; 1833 : }

  001d8	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001dc	5b		 pop	 rbx
  001dd	5d		 pop	 rbp
  001de	c3		 ret	 0
$LN17@dict_fromk:
  001df	4c 89 64 24 50	 mov	 QWORD PTR [rsp+80], r12

; 1794 :                     Py_DECREF(d);
; 1795 :                     return NULL;
; 1796 :                 }
; 1797 :             }
; 1798 :             return d;
; 1799 :         }
; 1800 :     }
; 1801 : 
; 1802 :     it = PyObject_GetIter(seq);

  001e4	e8 00 00 00 00	 call	 PyObject_GetIter
  001e9	4c 8b e0	 mov	 r12, rax

; 1803 :     if (it == NULL){

  001ec	48 85 c0	 test	 rax, rax
  001ef	75 1b		 jne	 SHORT $LN11@dict_fromk

; 1804 :         Py_DECREF(d);

  001f1	48 8b cf	 mov	 rcx, rdi
  001f4	e8 00 00 00 00	 call	 _Py_DecRef
  001f9	4c 8b 64 24 50	 mov	 r12, QWORD PTR [rsp+80]
  001fe	48 8b 7c 24 78	 mov	 rdi, QWORD PTR [rsp+120]

; 1805 :         return NULL;

  00203	33 c0		 xor	 eax, eax

; 1833 : }

  00205	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00209	5b		 pop	 rbx
  0020a	5d		 pop	 rbp
  0020b	c3		 ret	 0
$LN11@dict_fromk:
  0020c	48 89 74 24 70	 mov	 QWORD PTR [rsp+112], rsi

; 1806 :     }
; 1807 : 
; 1808 :     if (PyDict_CheckExact(d)) {

  00211	48 39 5f 58	 cmp	 QWORD PTR [rdi+88], rbx
  00215	74 48		 je	 SHORT $LN33@dict_fromk
  00217	48 39 5f 38	 cmp	 QWORD PTR [rdi+56], rbx
  0021b	74 42		 je	 SHORT $LN33@dict_fromk

; 1813 :                 goto Fail;
; 1814 :         }
; 1815 :     } else {
; 1816 :         while ((key = PyIter_Next(it)) != NULL) {

  0021d	48 8b c8	 mov	 rcx, rax
  00220	e8 00 00 00 00	 call	 PyIter_Next
  00225	48 8b f0	 mov	 rsi, rax
  00228	48 85 c0	 test	 rax, rax
  0022b	74 70		 je	 SHORT $LN7@dict_fromk
  0022d	0f 1f 00	 npad	 3
$LL4@dict_fromk:

; 1817 :             status = PyObject_SetItem(d, key, value);

  00230	4c 8b 45 30	 mov	 r8, QWORD PTR value$[rbp-88]
  00234	48 8b d6	 mov	 rdx, rsi
  00237	48 8b cf	 mov	 rcx, rdi
  0023a	e8 00 00 00 00	 call	 PyObject_SetItem

; 1818 :             Py_DECREF(key);

  0023f	48 8b ce	 mov	 rcx, rsi
  00242	8b d8		 mov	 ebx, eax
  00244	e8 00 00 00 00	 call	 _Py_DecRef

; 1819 :             if (status < 0)

  00249	85 db		 test	 ebx, ebx
  0024b	78 5a		 js	 SHORT $Fail$21542

; 1813 :                 goto Fail;
; 1814 :         }
; 1815 :     } else {
; 1816 :         while ((key = PyIter_Next(it)) != NULL) {

  0024d	49 8b cc	 mov	 rcx, r12
  00250	e8 00 00 00 00	 call	 PyIter_Next
  00255	48 8b f0	 mov	 rsi, rax
  00258	48 85 c0	 test	 rax, rax
  0025b	75 d3		 jne	 SHORT $LL4@dict_fromk

; 1812 :             if (status < 0)

  0025d	eb 3e		 jmp	 SHORT $LN7@dict_fromk
$LN33@dict_fromk:

; 1809 :         while ((key = PyIter_Next(it)) != NULL) {

  0025f	48 8b c8	 mov	 rcx, rax
  00262	e8 00 00 00 00	 call	 PyIter_Next
  00267	48 8b f0	 mov	 rsi, rax
  0026a	48 85 c0	 test	 rax, rax
  0026d	74 2e		 je	 SHORT $LN7@dict_fromk
  0026f	90		 npad	 1
$LL8@dict_fromk:

; 1810 :             status = PyDict_SetItem(d, key, value);

  00270	4c 8b 45 30	 mov	 r8, QWORD PTR value$[rbp-88]
  00274	48 8b d6	 mov	 rdx, rsi
  00277	48 8b cf	 mov	 rcx, rdi
  0027a	e8 00 00 00 00	 call	 PyDict_SetItem

; 1811 :             Py_DECREF(key);

  0027f	48 8b ce	 mov	 rcx, rsi
  00282	8b d8		 mov	 ebx, eax
  00284	e8 00 00 00 00	 call	 _Py_DecRef

; 1812 :             if (status < 0)

  00289	85 db		 test	 ebx, ebx
  0028b	78 1a		 js	 SHORT $Fail$21542

; 1809 :         while ((key = PyIter_Next(it)) != NULL) {

  0028d	49 8b cc	 mov	 rcx, r12
  00290	e8 00 00 00 00	 call	 PyIter_Next
  00295	48 8b f0	 mov	 rsi, rax
  00298	48 85 c0	 test	 rax, rax
  0029b	75 d3		 jne	 SHORT $LL8@dict_fromk
$LN7@dict_fromk:

; 1820 :                 goto Fail;
; 1821 :         }
; 1822 :     }
; 1823 : 
; 1824 :     if (PyErr_Occurred())

  0029d	e8 00 00 00 00	 call	 PyErr_Occurred
  002a2	48 85 c0	 test	 rax, rax
  002a5	74 14		 je	 SHORT $LN1@dict_fromk
$Fail$21542:

; 1828 : 
; 1829 : Fail:
; 1830 :     Py_DECREF(it);

  002a7	49 8b cc	 mov	 rcx, r12
  002aa	e8 00 00 00 00	 call	 _Py_DecRef

; 1831 :     Py_DECREF(d);

  002af	48 8b cf	 mov	 rcx, rdi
  002b2	e8 00 00 00 00	 call	 _Py_DecRef

; 1832 :     return NULL;

  002b7	33 c0		 xor	 eax, eax
  002b9	eb 0b		 jmp	 SHORT $LN40@dict_fromk
$LN1@dict_fromk:

; 1825 :         goto Fail;
; 1826 :     Py_DECREF(it);

  002bb	49 8b cc	 mov	 rcx, r12
  002be	e8 00 00 00 00	 call	 _Py_DecRef

; 1827 :     return d;

  002c3	48 8b c7	 mov	 rax, rdi
$LN40@dict_fromk:
  002c6	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
  002cb	4c 8b 64 24 50	 mov	 r12, QWORD PTR [rsp+80]
  002d0	48 8b 7c 24 78	 mov	 rdi, QWORD PTR [rsp+120]

; 1833 : }

  002d5	48 83 c4 58	 add	 rsp, 88			; 00000058H
  002d9	5b		 pop	 rbx
  002da	5d		 pop	 rbp
  002db	c3		 ret	 0
dict_fromkeys ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EF@LNNPNMIA@cannot?5convert?5dictionary?5update@ ; `string'
PUBLIC	??_C@_0EG@BDIBGBNC@dictionary?5update?5sequence?5eleme@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	PyDict_MergeFromSeq2
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_ValueError:QWORD
EXTRN	PySequence_Fast:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyDict_MergeFromSeq2 DD imagerel $LN69
	DD	imagerel $LN69+48
	DD	imagerel $unwind$PyDict_MergeFromSeq2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyDict_MergeFromSeq2 DD imagerel $LN69+48
	DD	imagerel $LN69+646
	DD	imagerel $chain$4$PyDict_MergeFromSeq2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$PyDict_MergeFromSeq2 DD imagerel $LN69+646
	DD	imagerel $LN69+779
	DD	imagerel $chain$5$PyDict_MergeFromSeq2
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$PyDict_MergeFromSeq2 DD 021H
	DD	imagerel $LN69
	DD	imagerel $LN69+48
	DD	imagerel $unwind$PyDict_MergeFromSeq2
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyDict_MergeFromSeq2 DD 0a1f21H
	DD	06e41fH
	DD	07741aH
	DD	0f6412H
	DD	0e540aH
	DD	0d3405H
	DD	imagerel $LN69
	DD	imagerel $LN69+48
	DD	imagerel $unwind$PyDict_MergeFromSeq2
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_MergeFromSeq2 DD 040f01H
	DD	0f00b720fH
	DD	0c007d009H
xdata	ENDS
;	COMDAT ??_C@_0EF@LNNPNMIA@cannot?5convert?5dictionary?5update@
CONST	SEGMENT
??_C@_0EF@LNNPNMIA@cannot?5convert?5dictionary?5update@ DB 'cannot conver'
	DB	't dictionary update sequence element #%zd to a sequence', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@BDIBGBNC@dictionary?5update?5sequence?5eleme@
CONST	SEGMENT
??_C@_0EG@BDIBGBNC@dictionary?5update?5sequence?5eleme@ DB 'dictionary up'
	DB	'date sequence element #%zd has length %zd; 2 is required', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\dictobject.c
CONST	ENDS
;	COMDAT PyDict_MergeFromSeq2
_TEXT	SEGMENT
d$ = 96
seq2$ = 104
override$ = 112
PyDict_MergeFromSeq2 PROC				; COMDAT

; 1880 : {

$LN69:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	41 54		 push	 r12
  00007	41 55		 push	 r13
  00009	41 57		 push	 r15
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 1881 :     PyObject *it;       /* iter(seq2) */
; 1882 :     Py_ssize_t i;       /* index into seq2 of current element */
; 1883 :     PyObject *item;     /* seq2[i] */
; 1884 :     PyObject *fast;     /* item as a 2-tuple or 2-list */
; 1885 : 
; 1886 :     assert(d != NULL);
; 1887 :     assert(PyDict_Check(d));
; 1888 :     assert(seq2 != NULL);
; 1889 : 
; 1890 :     /*
; 1891 :     if (Px_CHECK_PROTECTION(d, seq2, NULL))
; 1892 :         return -1;
; 1893 :     */
; 1894 : 
; 1895 :     it = PyObject_GetIter(seq2);

  0000f	48 8b ca	 mov	 rcx, rdx
  00012	45 8b f8	 mov	 r15d, r8d
  00015	e8 00 00 00 00	 call	 PyObject_GetIter
  0001a	4c 8b e0	 mov	 r12, rax

; 1896 :     if (it == NULL)

  0001d	48 85 c0	 test	 rax, rax
  00020	75 0e		 jne	 SHORT $LN20@PyDict_Mer

; 1897 :         return -1;

  00022	83 c8 ff	 or	 eax, -1

; 1951 : }

  00025	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00029	41 5f		 pop	 r15
  0002b	41 5d		 pop	 r13
  0002d	41 5c		 pop	 r12
  0002f	c3		 ret	 0
$LN20@PyDict_Mer:
  00030	48 89 5c 24 68	 mov	 QWORD PTR [rsp+104], rbx
  00035	48 89 6c 24 70	 mov	 QWORD PTR [rsp+112], rbp

; 1898 : 
; 1899 :     for (i = 0; ; ++i) {

  0003a	45 33 ed	 xor	 r13d, r13d
  0003d	48 89 74 24 78	 mov	 QWORD PTR [rsp+120], rsi

; 1900 :         PyObject *key, *value;
; 1901 :         Py_ssize_t n;
; 1902 : 
; 1903 :         fast = NULL;
; 1904 :         item = PyIter_Next(it);

  00042	48 8b c8	 mov	 rcx, rax
  00045	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  0004a	4c 89 74 24 30	 mov	 QWORD PTR [rsp+48], r14
  0004f	41 8b dd	 mov	 ebx, r13d
  00052	45 8b f5	 mov	 r14d, r13d
  00055	e8 00 00 00 00	 call	 PyIter_Next
  0005a	48 8b f8	 mov	 rdi, rax

; 1905 :         if (item == NULL) {

  0005d	48 85 c0	 test	 rax, rax
  00060	0f 84 b6 00 00
	00		 je	 $LN64@PyDict_Mer
  00066	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL19@PyDict_Mer:

; 1907 :                 goto Fail;
; 1908 :             break;
; 1909 :         }
; 1910 : 
; 1911 :         /* Convert item to sequence, and verify length 2. */
; 1912 :         fast = PySequence_Fast(item, "");

  00070	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00077	48 8b cf	 mov	 rcx, rdi
  0007a	e8 00 00 00 00	 call	 PySequence_Fast
  0007f	48 8b d8	 mov	 rbx, rax

; 1913 :         if (fast == NULL) {

  00082	48 85 c0	 test	 rax, rax
  00085	0f 84 28 01 00
	00		 je	 $LN65@PyDict_Mer

; 1920 :         }
; 1921 :         n = PySequence_Fast_GET_SIZE(fast);

  0008b	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0008f	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  00093	8b 91 00 01 00
	00		 mov	 edx, DWORD PTR [rcx+256]
  00099	81 e2 00 00 00
	02		 and	 edx, 33554432		; 02000000H

; 1922 :         if (n != 2) {

  0009f	49 83 f9 02	 cmp	 r9, 2
  000a3	0f 85 ef 00 00
	00		 jne	 $LN66@PyDict_Mer

; 1927 :             goto Fail;
; 1928 :         }
; 1929 : 
; 1930 :         /* Update/merge with this (key, value) pair. */
; 1931 :         key = PySequence_Fast_GET_ITEM(fast, 0);

  000a9	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000ad	85 d2		 test	 edx, edx
  000af	74 05		 je	 SHORT $LN25@PyDict_Mer
  000b1	48 8b 28	 mov	 rbp, QWORD PTR [rax]
  000b4	eb 03		 jmp	 SHORT $LN26@PyDict_Mer
$LN25@PyDict_Mer:
  000b6	48 8b e8	 mov	 rbp, rax
$LN26@PyDict_Mer:

; 1932 :         value = PySequence_Fast_GET_ITEM(fast, 1);

  000b9	85 d2		 test	 edx, edx
  000bb	74 06		 je	 SHORT $LN27@PyDict_Mer
  000bd	48 8b 70 08	 mov	 rsi, QWORD PTR [rax+8]
  000c1	eb 04		 jmp	 SHORT $LN28@PyDict_Mer
$LN27@PyDict_Mer:
  000c3	48 8b 73 78	 mov	 rsi, QWORD PTR [rbx+120]
$LN28@PyDict_Mer:

; 1933 :         if (override || PyDict_GetItem(d, key) == NULL) {

  000c7	45 85 ff	 test	 r15d, r15d
  000ca	75 12		 jne	 SHORT $LN10@PyDict_Mer
  000cc	48 8b 4c 24 60	 mov	 rcx, QWORD PTR d$[rsp]
  000d1	48 8b d5	 mov	 rdx, rbp
  000d4	e8 00 00 00 00	 call	 PyDict_GetItem
  000d9	48 85 c0	 test	 rax, rax
  000dc	75 14		 jne	 SHORT $LN9@PyDict_Mer
$LN10@PyDict_Mer:

; 1934 :             int status = PyDict_SetItem(d, key, value);

  000de	48 8b 4c 24 60	 mov	 rcx, QWORD PTR d$[rsp]
  000e3	4c 8b c6	 mov	 r8, rsi
  000e6	48 8b d5	 mov	 rdx, rbp
  000e9	e8 00 00 00 00	 call	 PyDict_SetItem

; 1935 :             if (status < 0)

  000ee	85 c0		 test	 eax, eax
  000f0	78 38		 js	 SHORT $Fail$21619
$LN9@PyDict_Mer:

; 1936 :                 goto Fail;
; 1937 :         }
; 1938 :         Py_DECREF(fast);

  000f2	48 8b cb	 mov	 rcx, rbx
  000f5	e8 00 00 00 00	 call	 _Py_DecRef

; 1939 :         Py_DECREF(item);

  000fa	48 8b cf	 mov	 rcx, rdi
  000fd	e8 00 00 00 00	 call	 _Py_DecRef
  00102	49 8b cc	 mov	 rcx, r12
  00105	49 ff c6	 inc	 r14
  00108	49 8b dd	 mov	 rbx, r13
  0010b	e8 00 00 00 00	 call	 PyIter_Next
  00110	48 8b f8	 mov	 rdi, rax
  00113	48 85 c0	 test	 rax, rax
  00116	0f 85 54 ff ff
	ff		 jne	 $LL19@PyDict_Mer
$LN64@PyDict_Mer:

; 1906 :             if (PyErr_Occurred())

  0011c	e8 00 00 00 00	 call	 PyErr_Occurred
  00121	48 85 c0	 test	 rax, rax
  00124	0f 84 3a 01 00
	00		 je	 $Return$21643
$Fail$21619:

; 1940 :     }
; 1941 : 
; 1942 :     i = 0;
; 1943 :     goto Return;
; 1944 : Fail:
; 1945 :     Py_XDECREF(item);

  0012a	48 85 ff	 test	 rdi, rdi
  0012d	0f 84 c3 00 00
	00		 je	 $LN7@PyDict_Mer
  00133	e8 00 00 00 00	 call	 _Py_PXCTX
  00138	85 c0		 test	 eax, eax
  0013a	0f 85 b6 00 00
	00		 jne	 $LN7@PyDict_Mer
  00140	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00144	a8 20		 test	 al, 32			; 00000020H
  00146	0f 85 a2 00 00
	00		 jne	 $LN33@PyDict_Mer
  0014c	84 c0		 test	 al, al
  0014e	0f 88 9a 00 00
	00		 js	 $LN33@PyDict_Mer
  00154	a8 02		 test	 al, 2
  00156	0f 85 9a 00 00
	00		 jne	 $LN7@PyDict_Mer
  0015c	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00160	0f 85 90 00 00
	00		 jne	 $LN7@PyDict_Mer
  00166	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0016d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00174	4c 8b cf	 mov	 r9, rdi
  00177	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0017d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00185	e8 00 00 00 00	 call	 _PyParallel_Guard
  0018a	48 8b cf	 mov	 rcx, rdi
  0018d	85 c0		 test	 eax, eax
  0018f	74 51		 je	 SHORT $LN38@PyDict_Mer
  00191	e8 00 00 00 00	 call	 _Px_Dealloc
  00196	eb 5e		 jmp	 SHORT $LN7@PyDict_Mer
$LN66@PyDict_Mer:

; 1923 :             PyErr_Format(PyExc_ValueError,
; 1924 :                          "dictionary update sequence element #%zd "
; 1925 :                          "has length %zd; 2 is required",
; 1926 :                          i, n);

  00198	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0019f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EG@BDIBGBNC@dictionary?5update?5sequence?5eleme@
  001a6	4d 8b c6	 mov	 r8, r14
  001a9	e8 00 00 00 00	 call	 PyErr_Format
  001ae	e9 77 ff ff ff	 jmp	 $Fail$21619
$LN65@PyDict_Mer:

; 1914 :             if (PyErr_ExceptionMatches(PyExc_TypeError))

  001b3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  001ba	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 63 ff ff
	ff		 je	 $Fail$21619

; 1915 :                 PyErr_Format(PyExc_TypeError,
; 1916 :                     "cannot convert dictionary update "
; 1917 :                     "sequence element #%zd to a sequence",
; 1918 :                     i);

  001c7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  001ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EF@LNNPNMIA@cannot?5convert?5dictionary?5update@
  001d5	4d 8b c6	 mov	 r8, r14
  001d8	e8 00 00 00 00	 call	 PyErr_Format

; 1919 :             goto Fail;

  001dd	e9 48 ff ff ff	 jmp	 $Fail$21619

; 1940 :     }
; 1941 : 
; 1942 :     i = 0;
; 1943 :     goto Return;
; 1944 : Fail:
; 1945 :     Py_XDECREF(item);

$LN38@PyDict_Mer:
  001e2	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  001e6	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001ec	eb 08		 jmp	 SHORT $LN7@PyDict_Mer
$LN33@PyDict_Mer:
  001ee	48 8b cf	 mov	 rcx, rdi
  001f1	e8 00 00 00 00	 call	 Px_DecRef
$LN7@PyDict_Mer:

; 1946 :     Py_XDECREF(fast);

  001f6	48 85 db	 test	 rbx, rbx
  001f9	74 65		 je	 SHORT $LN3@PyDict_Mer
  001fb	e8 00 00 00 00	 call	 _Py_PXCTX
  00200	85 c0		 test	 eax, eax
  00202	75 5c		 jne	 SHORT $LN3@PyDict_Mer
  00204	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00208	a8 20		 test	 al, 32			; 00000020H
  0020a	75 4c		 jne	 SHORT $LN44@PyDict_Mer
  0020c	84 c0		 test	 al, al
  0020e	78 48		 js	 SHORT $LN44@PyDict_Mer
  00210	a8 02		 test	 al, 2
  00212	75 4c		 jne	 SHORT $LN3@PyDict_Mer
  00214	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00218	75 46		 jne	 SHORT $LN3@PyDict_Mer
  0021a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00221	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00228	4c 8b cb	 mov	 r9, rbx
  0022b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00231	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00239	e8 00 00 00 00	 call	 _PyParallel_Guard
  0023e	48 8b cb	 mov	 rcx, rbx
  00241	85 c0		 test	 eax, eax
  00243	74 07		 je	 SHORT $LN49@PyDict_Mer
  00245	e8 00 00 00 00	 call	 _Px_Dealloc
  0024a	eb 14		 jmp	 SHORT $LN3@PyDict_Mer
$LN49@PyDict_Mer:
  0024c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00250	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00256	eb 08		 jmp	 SHORT $LN3@PyDict_Mer
$LN44@PyDict_Mer:
  00258	48 8b cb	 mov	 rcx, rbx
  0025b	e8 00 00 00 00	 call	 Px_DecRef
$LN3@PyDict_Mer:

; 1947 :     i = -1;

  00260	49 83 cd ff	 or	 r13, -1
$Return$21643:

; 1948 : Return:
; 1949 :     Py_DECREF(it);

  00264	e8 00 00 00 00	 call	 _Py_PXCTX
  00269	4c 8b 74 24 30	 mov	 r14, QWORD PTR [rsp+48]
  0026e	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]
  00273	48 8b 74 24 78	 mov	 rsi, QWORD PTR [rsp+120]
  00278	48 8b 6c 24 70	 mov	 rbp, QWORD PTR [rsp+112]
  0027d	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  00282	85 c0		 test	 eax, eax
  00284	75 77		 jne	 SHORT $LN61@PyDict_Mer
  00286	49 8b 44 24 20	 mov	 rax, QWORD PTR [r12+32]
  0028b	a8 20		 test	 al, 32			; 00000020H
  0028d	75 66		 jne	 SHORT $LN55@PyDict_Mer
  0028f	84 c0		 test	 al, al
  00291	78 62		 js	 SHORT $LN55@PyDict_Mer
  00293	a8 02		 test	 al, 2
  00295	75 66		 jne	 SHORT $LN61@PyDict_Mer
  00297	49 ff 4c 24 50	 dec	 QWORD PTR [r12+80]
  0029c	75 5f		 jne	 SHORT $LN61@PyDict_Mer
  0029e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  002a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  002ac	4d 8b cc	 mov	 r9, r12
  002af	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  002b5	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002bd	e8 00 00 00 00	 call	 _PyParallel_Guard
  002c2	49 8b cc	 mov	 rcx, r12
  002c5	85 c0		 test	 eax, eax
  002c7	74 13		 je	 SHORT $LN60@PyDict_Mer
  002c9	e8 00 00 00 00	 call	 _Px_Dealloc

; 1950 :     return Py_SAFE_DOWNCAST(i, Py_ssize_t, int);

  002ce	41 8b c5	 mov	 eax, r13d

; 1951 : }

  002d1	48 83 c4 40	 add	 rsp, 64			; 00000040H
  002d5	41 5f		 pop	 r15
  002d7	41 5d		 pop	 r13
  002d9	41 5c		 pop	 r12
  002db	c3		 ret	 0

; 1948 : Return:
; 1949 :     Py_DECREF(it);

$LN60@PyDict_Mer:
  002dc	49 8b 44 24 58	 mov	 rax, QWORD PTR [r12+88]
  002e1	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 1950 :     return Py_SAFE_DOWNCAST(i, Py_ssize_t, int);

  002e7	41 8b c5	 mov	 eax, r13d

; 1951 : }

  002ea	48 83 c4 40	 add	 rsp, 64			; 00000040H
  002ee	41 5f		 pop	 r15
  002f0	41 5d		 pop	 r13
  002f2	41 5c		 pop	 r12
  002f4	c3		 ret	 0

; 1948 : Return:
; 1949 :     Py_DECREF(it);

$LN55@PyDict_Mer:
  002f5	49 8b cc	 mov	 rcx, r12
  002f8	e8 00 00 00 00	 call	 Px_DecRef
$LN61@PyDict_Mer:

; 1950 :     return Py_SAFE_DOWNCAST(i, Py_ssize_t, int);

  002fd	41 8b c5	 mov	 eax, r13d

; 1951 : }

  00300	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00304	41 5f		 pop	 r15
  00306	41 5d		 pop	 r13
  00308	41 5c		 pop	 r12
  0030a	c3		 ret	 0
PyDict_MergeFromSeq2 ENDP
_TEXT	ENDS
PUBLIC	PyDict_Merge
EXTRN	PyObject_GetItem:PROC
EXTRN	PyMapping_Keys:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_Merge DD imagerel $LN44
	DD	imagerel $LN44+61
	DD	imagerel $unwind$PyDict_Merge
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyDict_Merge DD imagerel $LN44+61
	DD	imagerel $LN44+543
	DD	imagerel $chain$4$PyDict_Merge
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$PyDict_Merge DD imagerel $LN44+543
	DD	imagerel $LN44+556
	DD	imagerel $chain$6$PyDict_Merge
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$PyDict_Merge DD imagerel $LN44+556
	DD	imagerel $LN44+586
	DD	imagerel $chain$7$PyDict_Merge
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$PyDict_Merge DD 021H
	DD	imagerel $LN44
	DD	imagerel $LN44+61
	DD	imagerel $unwind$PyDict_Merge
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$PyDict_Merge DD 0a0021H
	DD	04f400H
	DD	05c400H
	DD	0c7400H
	DD	0b5400H
	DD	0a3400H
	DD	imagerel $LN44
	DD	imagerel $LN44+61
	DD	imagerel $unwind$PyDict_Merge
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyDict_Merge DD 0a2321H
	DD	04f423H
	DD	05c41eH
	DD	0c7419H
	DD	0b540aH
	DD	0a3405H
	DD	imagerel $LN44
	DD	imagerel $LN44+61
	DD	imagerel $unwind$PyDict_Merge
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_Merge DD 040a01H
	DD	0e006520aH
	DD	06002d004H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyDict_Merge
_TEXT	SEGMENT
a$ = 80
b$ = 88
override$ = 96
PyDict_Merge PROC					; COMDAT

; 1961 : {

$LN44:
  00000	40 56		 push	 rsi
  00002	41 55		 push	 r13
  00004	41 56		 push	 r14
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	45 8b f0	 mov	 r14d, r8d
  0000d	48 8b f2	 mov	 rsi, rdx
  00010	4c 8b e9	 mov	 r13, rcx

; 1962 :     register PyDictObject *mp, *other;
; 1963 :     register Py_ssize_t i, n;
; 1964 :     PyDictKeyEntry *entry;
; 1965 : 
; 1966 :     /* We accept for the argument either a concrete dictionary object,
; 1967 :      * or an abstract "mapping" object.  For the former, we can do
; 1968 :      * things quite efficiently.  For the latter, we only require that
; 1969 :      * PyMapping_Keys() and PyObject_GetItem() be supported.
; 1970 :      */
; 1971 :     if (a == NULL || !PyDict_Check(a) || b == NULL) {

  00013	48 85 c9	 test	 rcx, rcx
  00016	0f 84 10 02 00
	00		 je	 $LN25@PyDict_Mer@2
  0001c	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00020	f7 80 00 01 00
	00 00 00 00 20	 test	 DWORD PTR [rax+256], 536870912 ; 20000000H
  0002a	0f 84 fc 01 00
	00		 je	 $LN25@PyDict_Mer@2
  00030	48 85 d2	 test	 rdx, rdx
  00033	0f 84 f3 01 00
	00		 je	 $LN25@PyDict_Mer@2

; 1974 :     }
; 1975 : 
; 1976 :     /*
; 1977 :     if (Px_CHECK_PROTECTION(a, b, NULL) ||
; 1978 :         Px_CHECK_PROTECTION(b, a, NULL))
; 1979 :         return -1;
; 1980 :     */
; 1981 : 
; 1982 :     mp = (PyDictObject*)a;
; 1983 :     if (PyDict_Check(b)) {

  00039	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  0003d	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  00042	48 89 6c 24 58	 mov	 QWORD PTR [rsp+88], rbp
  00047	f7 80 00 01 00
	00 00 00 00 20	 test	 DWORD PTR [rax+256], 536870912 ; 20000000H
  00051	48 89 7c 24 60	 mov	 QWORD PTR [rsp+96], rdi
  00056	4c 89 64 24 28	 mov	 QWORD PTR [rsp+40], r12
  0005b	4c 89 7c 24 20	 mov	 QWORD PTR [rsp+32], r15
  00060	0f 84 cf 00 00
	00		 je	 $LN24@PyDict_Mer@2

; 1984 :         other = (PyDictObject*)b;
; 1985 :         if (other == mp || other->ma_used == 0)

  00066	48 3b d1	 cmp	 rdx, rcx
  00069	0f 84 7e 01 00
	00		 je	 $LN1@PyDict_Mer@2
  0006f	4c 8b 42 60	 mov	 r8, QWORD PTR [rdx+96]
  00073	4d 85 c0	 test	 r8, r8
  00076	0f 84 71 01 00
	00		 je	 $LN1@PyDict_Mer@2

; 1986 :             /* a.update(a) or a.update({}); nothing to do */
; 1987 :             return 0;
; 1988 :         if (mp->ma_used == 0)

  0007c	4c 8b 49 60	 mov	 r9, QWORD PTR [rcx+96]
  00080	b8 01 00 00 00	 mov	 eax, 1
  00085	4d 85 c9	 test	 r9, r9
  00088	44 0f 44 f0	 cmove	 r14d, eax

; 1989 :             /* Since the target dict is empty, PyDict_GetItem()
; 1990 :              * always returns NULL.  Setting override to 1
; 1991 :              * skips the unnecessary test.
; 1992 :              */
; 1993 :             override = 1;
; 1994 :         /* Do one big resize at the start, rather than
; 1995 :          * incrementally resizing as we insert new items.  Expect
; 1996 :          * that there will be no (or few) overlapping keys.
; 1997 :          */
; 1998 :         if (mp->ma_keys->dk_usable * 3 < other->ma_used * 2)

  0008c	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]
  00090	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  00094	4b 8d 04 00	 lea	 rax, QWORD PTR [r8+r8]
  00098	48 8d 14 49	 lea	 rdx, QWORD PTR [rcx+rcx*2]
  0009c	48 3b d0	 cmp	 rdx, rax
  0009f	7d 17		 jge	 SHORT $LN19@PyDict_Mer@2

; 1999 :             if (dictresize(mp, (mp->ma_used + other->ma_used)*2) != 0)

  000a1	4b 8d 14 01	 lea	 rdx, QWORD PTR [r9+r8]
  000a5	49 8b cd	 mov	 rcx, r13
  000a8	48 03 d2	 add	 rdx, rdx
  000ab	e8 00 00 00 00	 call	 dictresize
  000b0	85 c0		 test	 eax, eax

; 2000 :                return -1;

  000b2	0f 85 41 01 00
	00		 jne	 $LN42@PyDict_Mer@2
$LN19@PyDict_Mer@2:

; 2001 :         for (i = 0, n = DK_SIZE(other->ma_keys); i < n; i++) {

  000b8	48 8b 46 68	 mov	 rax, QWORD PTR [rsi+104]
  000bc	33 db		 xor	 ebx, ebx

; 2008 : 
; 2009 :             if (value != NULL &&
; 2010 :                 (override ||
; 2011 :                  PyDict_GetItem(a, entry->me_key) == NULL)) {

  000be	4d 63 f6	 movsxd	 r14, r14d
  000c1	4c 8b 78 08	 mov	 r15, QWORD PTR [rax+8]
  000c5	4d 85 ff	 test	 r15, r15
  000c8	0f 8e 1f 01 00
	00		 jle	 $LN1@PyDict_Mer@2

; 2001 :         for (i = 0, n = DK_SIZE(other->ma_keys); i < n; i++) {

  000ce	8b fb		 mov	 edi, ebx
$LL18@PyDict_Mer@2:

; 2002 :             PyObject *value;
; 2003 :             entry = &other->ma_keys->dk_entries[i];
; 2004 :             if (other->ma_values)

  000d0	48 8b 6e 70	 mov	 rbp, QWORD PTR [rsi+112]
  000d4	4c 8b 66 68	 mov	 r12, QWORD PTR [rsi+104]
  000d8	48 85 ed	 test	 rbp, rbp
  000db	74 07		 je	 SHORT $LN15@PyDict_Mer@2

; 2005 :                 value = other->ma_values[i];

  000dd	48 8b 6c dd 00	 mov	 rbp, QWORD PTR [rbp+rbx*8]

; 2006 :             else

  000e2	eb 05		 jmp	 SHORT $LN14@PyDict_Mer@2
$LN15@PyDict_Mer@2:

; 2007 :                 value = entry->me_value;

  000e4	49 8b 6c 3c 30	 mov	 rbp, QWORD PTR [r12+rdi+48]
$LN14@PyDict_Mer@2:

; 2008 : 
; 2009 :             if (value != NULL &&
; 2010 :                 (override ||
; 2011 :                  PyDict_GetItem(a, entry->me_key) == NULL)) {

  000e9	48 85 ed	 test	 rbp, rbp
  000ec	74 34		 je	 SHORT $LN17@PyDict_Mer@2
  000ee	4d 85 f6	 test	 r14, r14
  000f1	75 12		 jne	 SHORT $LN12@PyDict_Mer@2
  000f3	49 8b 54 3c 28	 mov	 rdx, QWORD PTR [r12+rdi+40]
  000f8	49 8b cd	 mov	 rcx, r13
  000fb	e8 00 00 00 00	 call	 PyDict_GetItem
  00100	48 85 c0	 test	 rax, rax
  00103	75 1d		 jne	 SHORT $LN17@PyDict_Mer@2
$LN12@PyDict_Mer@2:

; 2012 :                 if (insertdict(mp, entry->me_key,
; 2013 :                                entry->me_hash,
; 2014 :                                value) != 0)

  00105	4d 8b 44 3c 20	 mov	 r8, QWORD PTR [r12+rdi+32]
  0010a	49 8b 54 3c 28	 mov	 rdx, QWORD PTR [r12+rdi+40]
  0010f	4c 8b cd	 mov	 r9, rbp
  00112	49 8b cd	 mov	 rcx, r13
  00115	e8 00 00 00 00	 call	 insertdict
  0011a	85 c0		 test	 eax, eax
  0011c	0f 85 d7 00 00
	00		 jne	 $LN42@PyDict_Mer@2
$LN17@PyDict_Mer@2:

; 2001 :         for (i = 0, n = DK_SIZE(other->ma_keys); i < n; i++) {

  00122	48 ff c3	 inc	 rbx
  00125	48 83 c7 18	 add	 rdi, 24
  00129	49 3b df	 cmp	 rbx, r15
  0012c	7c a2		 jl	 SHORT $LL18@PyDict_Mer@2

; 2062 :     }
; 2063 :     return 0;

  0012e	33 c0		 xor	 eax, eax
  00130	e9 c7 00 00 00	 jmp	 $LN41@PyDict_Mer@2
$LN24@PyDict_Mer@2:

; 2015 :                     return -1;
; 2016 :             }
; 2017 :         }
; 2018 :     }
; 2019 :     else {
; 2020 :         /* Do it the generic, slower way */
; 2021 :         PyObject *keys = PyMapping_Keys(b);

  00135	48 8b ca	 mov	 rcx, rdx
  00138	e8 00 00 00 00	 call	 PyMapping_Keys
  0013d	48 8b d8	 mov	 rbx, rax

; 2022 :         PyObject *iter;
; 2023 :         PyObject *key, *value;
; 2024 :         int status;
; 2025 : 
; 2026 :         if (keys == NULL)

  00140	48 85 c0	 test	 rax, rax

; 2027 :             /* Docstring says this is equivalent to E.keys() so
; 2028 :              * if E doesn't have a .keys() method we want
; 2029 :              * AttributeError to percolate up.  Might as well
; 2030 :              * do the same for any other error.
; 2031 :              */
; 2032 :             return -1;

  00143	0f 84 b0 00 00
	00		 je	 $LN42@PyDict_Mer@2

; 2033 : 
; 2034 :         iter = PyObject_GetIter(keys);

  00149	48 8b c8	 mov	 rcx, rax
  0014c	e8 00 00 00 00	 call	 PyObject_GetIter

; 2035 :         Py_DECREF(keys);

  00151	48 8b cb	 mov	 rcx, rbx
  00154	4c 8b e0	 mov	 r12, rax
  00157	e8 00 00 00 00	 call	 _Py_DecRef

; 2036 :         if (iter == NULL)

  0015c	4d 85 e4	 test	 r12, r12

; 2037 :             return -1;

  0015f	0f 84 94 00 00
	00		 je	 $LN42@PyDict_Mer@2

; 2038 : 
; 2039 :         for (key = PyIter_Next(iter); key; key = PyIter_Next(iter)) {

  00165	49 8b cc	 mov	 rcx, r12
  00168	e8 00 00 00 00	 call	 PyIter_Next
  0016d	48 8b f8	 mov	 rdi, rax
  00170	48 85 c0	 test	 rax, rax
  00173	74 66		 je	 SHORT $LN5@PyDict_Mer@2
$LL7@PyDict_Mer@2:

; 2040 :             if (!override && PyDict_GetItem(a, key) != NULL) {

  00175	45 85 f6	 test	 r14d, r14d
  00178	75 1a		 jne	 SHORT $LN4@PyDict_Mer@2
  0017a	48 8b d7	 mov	 rdx, rdi
  0017d	49 8b cd	 mov	 rcx, r13
  00180	e8 00 00 00 00	 call	 PyDict_GetItem
  00185	48 85 c0	 test	 rax, rax
  00188	74 0a		 je	 SHORT $LN4@PyDict_Mer@2

; 2041 :                 Py_DECREF(key);

  0018a	48 8b cf	 mov	 rcx, rdi
  0018d	e8 00 00 00 00	 call	 _Py_DecRef

; 2042 :                 continue;

  00192	eb 37		 jmp	 SHORT $LN6@PyDict_Mer@2
$LN4@PyDict_Mer@2:

; 2043 :             }
; 2044 :             value = PyObject_GetItem(b, key);

  00194	48 8b d7	 mov	 rdx, rdi
  00197	48 8b ce	 mov	 rcx, rsi
  0019a	e8 00 00 00 00	 call	 PyObject_GetItem
  0019f	48 8b e8	 mov	 rbp, rax

; 2045 :             if (value == NULL) {

  001a2	48 85 c0	 test	 rax, rax
  001a5	74 78		 je	 SHORT $LN32@PyDict_Mer@2

; 2049 :             }
; 2050 :             status = PyDict_SetItem(a, key, value);

  001a7	4c 8b c0	 mov	 r8, rax
  001aa	48 8b d7	 mov	 rdx, rdi
  001ad	49 8b cd	 mov	 rcx, r13
  001b0	e8 00 00 00 00	 call	 PyDict_SetItem

; 2051 :             Py_DECREF(key);

  001b5	48 8b cf	 mov	 rcx, rdi
  001b8	8b d8		 mov	 ebx, eax
  001ba	e8 00 00 00 00	 call	 _Py_DecRef

; 2052 :             Py_DECREF(value);

  001bf	48 8b cd	 mov	 rcx, rbp
  001c2	e8 00 00 00 00	 call	 _Py_DecRef

; 2053 :             if (status < 0) {

  001c7	85 db		 test	 ebx, ebx
  001c9	78 26		 js	 SHORT $LN33@PyDict_Mer@2
$LN6@PyDict_Mer@2:

; 2038 : 
; 2039 :         for (key = PyIter_Next(iter); key; key = PyIter_Next(iter)) {

  001cb	49 8b cc	 mov	 rcx, r12
  001ce	e8 00 00 00 00	 call	 PyIter_Next
  001d3	48 8b f8	 mov	 rdi, rax
  001d6	48 85 c0	 test	 rax, rax
  001d9	75 9a		 jne	 SHORT $LL7@PyDict_Mer@2
$LN5@PyDict_Mer@2:

; 2056 :             }
; 2057 :         }
; 2058 :         Py_DECREF(iter);

  001db	49 8b cc	 mov	 rcx, r12
  001de	e8 00 00 00 00	 call	 _Py_DecRef

; 2059 :         if (PyErr_Occurred())

  001e3	e8 00 00 00 00	 call	 PyErr_Occurred
  001e8	48 85 c0	 test	 rax, rax

; 2060 :             /* Iterator completed, via error */
; 2061 :             return -1;

  001eb	75 0c		 jne	 SHORT $LN42@PyDict_Mer@2
$LN1@PyDict_Mer@2:

; 2062 :     }
; 2063 :     return 0;

  001ed	33 c0		 xor	 eax, eax
  001ef	eb 0b		 jmp	 SHORT $LN41@PyDict_Mer@2
$LN33@PyDict_Mer@2:

; 2054 :                 Py_DECREF(iter);

  001f1	49 8b cc	 mov	 rcx, r12
$LN43@PyDict_Mer@2:
  001f4	e8 00 00 00 00	 call	 _Py_DecRef
$LN42@PyDict_Mer@2:

; 2055 :                 return -1;

  001f9	83 c8 ff	 or	 eax, -1
$LN41@PyDict_Mer@2:
  001fc	4c 8b 64 24 28	 mov	 r12, QWORD PTR [rsp+40]
  00201	48 8b 7c 24 60	 mov	 rdi, QWORD PTR [rsp+96]
  00206	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  0020b	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00210	4c 8b 7c 24 20	 mov	 r15, QWORD PTR [rsp+32]

; 2064 : }

  00215	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00219	41 5e		 pop	 r14
  0021b	41 5d		 pop	 r13
  0021d	5e		 pop	 rsi
  0021e	c3		 ret	 0
$LN32@PyDict_Mer@2:

; 2046 :                 Py_DECREF(iter);

  0021f	49 8b cc	 mov	 rcx, r12
  00222	e8 00 00 00 00	 call	 _Py_DecRef

; 2047 :                 Py_DECREF(key);

  00227	48 8b cf	 mov	 rcx, rdi

; 2048 :                 return -1;

  0022a	eb c8		 jmp	 SHORT $LN43@PyDict_Mer@2
$LN25@PyDict_Mer@2:

; 1972 :         PyErr_BadInternalCall();

  0022c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00233	ba b4 07 00 00	 mov	 edx, 1972		; 000007b4H
  00238	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 1973 :         return -1;

  0023d	83 c8 ff	 or	 eax, -1

; 2064 : }

  00240	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00244	41 5e		 pop	 r14
  00246	41 5d		 pop	 r13
  00248	5e		 pop	 rsi
  00249	c3		 ret	 0
PyDict_Merge ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@DHCOBJKO@PyDict_Copy?$AA@		; `string'
PUBLIC	PyDict_Copy
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyDict_Copy DD imagerel $LN53
	DD	imagerel $LN53+43
	DD	imagerel $unwind$PyDict_Copy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyDict_Copy DD imagerel $LN53+43
	DD	imagerel $LN53+239
	DD	imagerel $chain$1$PyDict_Copy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyDict_Copy DD imagerel $LN53+239
	DD	imagerel $LN53+263
	DD	imagerel $chain$3$PyDict_Copy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$PyDict_Copy DD imagerel $LN53+263
	DD	imagerel $LN53+271
	DD	imagerel $chain$5$PyDict_Copy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$PyDict_Copy DD imagerel $LN53+271
	DD	imagerel $LN53+479
	DD	imagerel $chain$8$PyDict_Copy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$PyDict_Copy DD imagerel $LN53+479
	DD	imagerel $LN53+725
	DD	imagerel $chain$9$PyDict_Copy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$11$PyDict_Copy DD imagerel $LN53+725
	DD	imagerel $LN53+740
	DD	imagerel $chain$11$PyDict_Copy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$13$PyDict_Copy DD imagerel $LN53+740
	DD	imagerel $LN53+788
	DD	imagerel $chain$13$PyDict_Copy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$15$PyDict_Copy DD imagerel $LN53+788
	DD	imagerel $LN53+809
	DD	imagerel $chain$15$PyDict_Copy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$16$PyDict_Copy DD imagerel $LN53+809
	DD	imagerel $LN53+834
	DD	imagerel $chain$16$PyDict_Copy
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$16$PyDict_Copy DD 021H
	DD	imagerel $LN53
	DD	imagerel $LN53+43
	DD	imagerel $unwind$PyDict_Copy
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$15$PyDict_Copy DD 020021H
	DD	0c7400H
	DD	imagerel $LN53
	DD	imagerel $LN53+43
	DD	imagerel $unwind$PyDict_Copy
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$13$PyDict_Copy DD 020021H
	DD	0c7400H
	DD	imagerel $LN53
	DD	imagerel $LN53+43
	DD	imagerel $unwind$PyDict_Copy
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$11$PyDict_Copy DD 020021H
	DD	0c7400H
	DD	imagerel $LN53
	DD	imagerel $LN53+43
	DD	imagerel $unwind$PyDict_Copy
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$PyDict_Copy DD 020021H
	DD	07c400H
	DD	imagerel $LN53+263
	DD	imagerel $LN53+271
	DD	imagerel $chain$5$PyDict_Copy
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$PyDict_Copy DD 062921H
	DD	06d429H
	DD	07c412H
	DD	0b6405H
	DD	imagerel $LN53+263
	DD	imagerel $LN53+271
	DD	imagerel $chain$5$PyDict_Copy
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$PyDict_Copy DD 040021H
	DD	0c7400H
	DD	0a5400H
	DD	imagerel $LN53
	DD	imagerel $LN53+43
	DD	imagerel $unwind$PyDict_Copy
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyDict_Copy DD 040021H
	DD	0c7400H
	DD	0a5400H
	DD	imagerel $LN53
	DD	imagerel $LN53+43
	DD	imagerel $unwind$PyDict_Copy
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyDict_Copy DD 047d21H
	DD	0a547dH
	DD	0c7405H
	DD	imagerel $LN53
	DD	imagerel $LN53+43
	DD	imagerel $unwind$PyDict_Copy
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_Copy DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT ??_C@_0M@DHCOBJKO@PyDict_Copy?$AA@
CONST	SEGMENT
??_C@_0M@DHCOBJKO@PyDict_Copy?$AA@ DB 'PyDict_Copy', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\dictobject.c
CONST	ENDS
;	COMDAT PyDict_Copy
_TEXT	SEGMENT
o$ = 80
PyDict_Copy PROC					; COMDAT

; 2074 : {

$LN53:
  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00006	48 8b d9	 mov	 rbx, rcx

; 2075 :     PyObject *copy;
; 2076 :     PyDictObject *mp;
; 2077 :     Py_ssize_t i, n;
; 2078 : 
; 2079 :     if (o == NULL || !PyDict_Check(o)) {

  00009	48 85 c9	 test	 rcx, rcx
  0000c	0f 84 17 03 00
	00		 je	 $LN19@PyDict_Cop
  00012	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00016	f7 80 00 01 00
	00 00 00 00 20	 test	 DWORD PTR [rax+256], 536870912 ; 20000000H
  00020	0f 84 03 03 00
	00		 je	 $LN19@PyDict_Cop

; 2082 :     }
; 2083 : 
; 2084 :     mp = (PyDictObject *)o;
; 2085 :     if (_PyDict_HasSplitTable(mp)) {

  00026	48 83 79 70 00	 cmp	 QWORD PTR [rcx+112], 0
  0002b	48 89 7c 24 60	 mov	 QWORD PTR [rsp+96], rdi
  00030	0f 84 ae 02 00
	00		 je	 $LN18@PyDict_Cop

; 2086 :         PyDictObject *split_copy;
; 2087 :         PyObject **newvalues = new_values(DK_SIZE(mp->ma_keys));

  00036	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]
  0003a	48 b9 ff ff ff
	ff ff ff ff 0f	 mov	 rcx, 1152921504606846975 ; 0fffffffffffffffH
  00044	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  00048	0f 87 87 02 00
	00		 ja	 $LN47@PyDict_Cop
  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  00059	74 0f		 je	 SHORT $LN27@PyDict_Cop
  0005b	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0005f	48 c1 e1 03	 shl	 rcx, 3
  00063	e8 00 00 00 00	 call	 _PxMem_Malloc
  00068	eb 2d		 jmp	 SHORT $LN50@PyDict_Cop
$LN27@PyDict_Cop:
  0006a	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0006e	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  00078	48 c1 e2 03	 shl	 rdx, 3
  0007c	48 3b d0	 cmp	 rdx, rax
  0007f	0f 87 50 02 00
	00		 ja	 $LN47@PyDict_Cop
  00085	48 85 d2	 test	 rdx, rdx
  00088	b9 01 00 00 00	 mov	 ecx, 1
  0008d	48 0f 45 ca	 cmovne	 rcx, rdx
  00091	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
$LN50@PyDict_Cop:
  00097	48 8b f8	 mov	 rdi, rax

; 2088 :         if (newvalues == NULL)

  0009a	48 85 c0	 test	 rax, rax
  0009d	0f 84 32 02 00
	00		 je	 $LN47@PyDict_Cop

; 2089 :             return PyErr_NoMemory();
; 2090 :         split_copy = PyObject_GC_New(PyDictObject, &PyDict_Type);

  000a3	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp
  000a8	e8 00 00 00 00	 call	 _Py_PXCTX
  000ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyDict_Type
  000b4	85 c0		 test	 eax, eax
  000b6	74 07		 je	 SHORT $LN31@PyDict_Cop
  000b8	e8 00 00 00 00	 call	 _PxObject_New
  000bd	eb 05		 jmp	 SHORT $LN51@PyDict_Cop
$LN31@PyDict_Cop:
  000bf	e8 00 00 00 00	 call	 _PyObject_GC_New
$LN51@PyDict_Cop:
  000c4	48 8b e8	 mov	 rbp, rax

; 2091 :         if (split_copy == NULL) {

  000c7	48 85 c0	 test	 rax, rax
  000ca	75 3b		 jne	 SHORT $LN16@PyDict_Cop

; 2092 :             free_values(newvalues);

  000cc	e8 00 00 00 00	 call	 _Py_PXCTX
  000d1	48 8b cf	 mov	 rcx, rdi
  000d4	85 c0		 test	 eax, eax
  000d6	74 17		 je	 SHORT $LN33@PyDict_Cop
  000d8	e8 00 00 00 00	 call	 _PxMem_Free
  000dd	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  000e2	48 8b 7c 24 60	 mov	 rdi, QWORD PTR [rsp+96]

; 2093 :             return NULL;

  000e7	33 c0		 xor	 eax, eax

; 2115 : }

  000e9	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000ed	5b		 pop	 rbx
  000ee	c3		 ret	 0
$LN33@PyDict_Cop:

; 2092 :             free_values(newvalues);

  000ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  000f5	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  000fa	48 8b 7c 24 60	 mov	 rdi, QWORD PTR [rsp+96]

; 2093 :             return NULL;

  000ff	33 c0		 xor	 eax, eax

; 2115 : }

  00101	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00105	5b		 pop	 rbx
  00106	c3		 ret	 0
$LN16@PyDict_Cop:

; 2094 :         }
; 2095 :         split_copy->ma_values = newvalues;

  00107	48 89 7d 70	 mov	 QWORD PTR [rbp+112], rdi

; 2096 :         split_copy->ma_keys = mp->ma_keys;

  0010b	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  0010f	48 89 74 24 58	 mov	 QWORD PTR [rsp+88], rsi
  00114	48 89 45 68	 mov	 QWORD PTR [rbp+104], rax

; 2097 :         split_copy->ma_used = mp->ma_used;

  00118	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  0011c	4c 89 64 24 38	 mov	 QWORD PTR [rsp+56], r12
  00121	48 89 45 60	 mov	 QWORD PTR [rbp+96], rax

; 2098 :         DK_INCREF(mp->ma_keys);

  00125	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]

; 2099 :         for (i = 0, n = DK_SIZE(mp->ma_keys); i < n; i++) {

  00129	45 33 e4	 xor	 r12d, r12d
  0012c	48 ff 00	 inc	 QWORD PTR [rax]
  0012f	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  00133	4c 89 6c 24 30	 mov	 QWORD PTR [rsp+48], r13
  00138	4c 8b 68 08	 mov	 r13, QWORD PTR [rax+8]
  0013c	41 8b f4	 mov	 esi, r12d
  0013f	4d 85 ed	 test	 r13, r13
  00142	7e 65		 jle	 SHORT $LN13@PyDict_Cop
  00144	66 66 66 66 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL15@PyDict_Cop:

; 2100 :             PyObject *value = mp->ma_values[i];

  00150	48 8b 43 70	 mov	 rax, QWORD PTR [rbx+112]
  00154	48 8b 3c f0	 mov	 rdi, QWORD PTR [rax+rsi*8]

; 2101 :             Py_XINCREF(value);

  00158	48 85 ff	 test	 rdi, rdi
  0015b	74 3b		 je	 SHORT $LN11@PyDict_Cop
  0015d	e8 00 00 00 00	 call	 _Py_PXCTX
  00162	85 c0		 test	 eax, eax
  00164	75 32		 jne	 SHORT $LN11@PyDict_Cop
  00166	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0016d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00174	4c 8b cf	 mov	 r9, rdi
  00177	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0017d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00185	e8 00 00 00 00	 call	 _PyParallel_Guard
  0018a	85 c0		 test	 eax, eax
  0018c	75 06		 jne	 SHORT $LN41@PyDict_Cop
  0018e	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  00192	74 04		 je	 SHORT $LN11@PyDict_Cop
$LN41@PyDict_Cop:
  00194	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN11@PyDict_Cop:

; 2102 :             split_copy->ma_values[i] = value;

  00198	48 8b 45 70	 mov	 rax, QWORD PTR [rbp+112]
  0019c	48 ff c6	 inc	 rsi
  0019f	48 89 7c f0 f8	 mov	 QWORD PTR [rax+rsi*8-8], rdi
  001a4	49 3b f5	 cmp	 rsi, r13
  001a7	7c a7		 jl	 SHORT $LL15@PyDict_Cop
$LN13@PyDict_Cop:

; 2103 :         }
; 2104 :         if (_PyObject_GC_IS_TRACKED(mp))

  001a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  001b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@DHCOBJKO@PyDict_Copy?$AA@
  001b7	4c 8b cb	 mov	 r9, rbx
  001ba	41 b8 38 08 00
	00		 mov	 r8d, 2104		; 00000838H
  001c0	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001c8	e8 00 00 00 00	 call	 _PyParallel_Guard
  001cd	4c 8b 6c 24 30	 mov	 r13, QWORD PTR [rsp+48]
  001d2	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  001d7	85 c0		 test	 eax, eax
  001d9	0f 85 de 00 00
	00		 jne	 $LN4@PyDict_Cop
  001df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  001e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@DHCOBJKO@PyDict_Copy?$AA@
  001ed	4c 8b cb	 mov	 r9, rbx
  001f0	41 b8 38 08 00
	00		 mov	 r8d, 2104		; 00000838H
  001f6	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001fe	e8 00 00 00 00	 call	 _PyParallel_Guard
  00203	85 c0		 test	 eax, eax
  00205	74 05		 je	 SHORT $LN35@PyDict_Cop
  00207	49 8b dc	 mov	 rbx, r12
  0020a	eb 04		 jmp	 SHORT $LN36@PyDict_Cop
$LN35@PyDict_Cop:
  0020c	48 83 c3 e8	 add	 rbx, -24
$LN36@PyDict_Cop:
  00210	48 83 7b 10 fe	 cmp	 QWORD PTR [rbx+16], -2
  00215	41 8b c4	 mov	 eax, r12d
  00218	0f 95 c0	 setne	 al
  0021b	85 c0		 test	 eax, eax
  0021d	0f 84 9a 00 00
	00		 je	 $LN4@PyDict_Cop

; 2105 :             _PyObject_GC_TRACK(split_copy);

  00223	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  0022a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@DHCOBJKO@PyDict_Copy?$AA@
  00231	4c 8b cd	 mov	 r9, rbp
  00234	41 b8 39 08 00
	00		 mov	 r8d, 2105		; 00000839H
  0023a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00242	e8 00 00 00 00	 call	 _PyParallel_Guard
  00247	85 c0		 test	 eax, eax
  00249	75 72		 jne	 SHORT $LN4@PyDict_Cop
  0024b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00252	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@DHCOBJKO@PyDict_Copy?$AA@
  00259	4c 8b cd	 mov	 r9, rbp
  0025c	41 b8 39 08 00
	00		 mov	 r8d, 2105		; 00000839H
  00262	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0026a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0026f	85 c0		 test	 eax, eax
  00271	75 04		 jne	 SHORT $LN40@PyDict_Cop
  00273	4c 8d 65 e8	 lea	 r12, QWORD PTR [rbp-24]
$LN40@PyDict_Cop:
  00277	49 83 7c 24 10
	fe		 cmp	 QWORD PTR [r12+16], -2
  0027d	74 0c		 je	 SHORT $LN3@PyDict_Cop
  0027f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  00286	e8 00 00 00 00	 call	 Py_FatalError
$LN3@PyDict_Cop:
  0028b	49 c7 44 24 10
	fd ff ff ff	 mov	 QWORD PTR [r12+16], -3
  00294	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  0029b	49 89 04 24	 mov	 QWORD PTR [r12], rax
  0029f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  002a6	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  002aa	49 89 4c 24 08	 mov	 QWORD PTR [r12+8], rcx
  002af	4c 89 21	 mov	 QWORD PTR [rcx], r12
  002b2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  002b9	4c 89 60 08	 mov	 QWORD PTR [rax+8], r12
$LN4@PyDict_Cop:

; 2106 :         return (PyObject *)split_copy;

  002bd	4c 8b 64 24 38	 mov	 r12, QWORD PTR [rsp+56]
  002c2	48 8b 7c 24 60	 mov	 rdi, QWORD PTR [rsp+96]
  002c7	48 8b c5	 mov	 rax, rbp
  002ca	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]

; 2115 : }

  002cf	48 83 c4 40	 add	 rsp, 64			; 00000040H
  002d3	5b		 pop	 rbx
  002d4	c3		 ret	 0
$LN47@PyDict_Cop:
  002d5	48 8b 7c 24 60	 mov	 rdi, QWORD PTR [rsp+96]
  002da	48 83 c4 40	 add	 rsp, 64			; 00000040H
  002de	5b		 pop	 rbx
  002df	e9 00 00 00 00	 jmp	 PyErr_NoMemory
$LN18@PyDict_Cop:

; 2107 :     }
; 2108 :     copy = PyDict_New();

  002e4	e8 00 00 00 00	 call	 PyDict_New
  002e9	48 8b f8	 mov	 rdi, rax

; 2109 :     if (copy == NULL)

  002ec	48 85 c0	 test	 rax, rax

; 2110 :         return NULL;

  002ef	74 2b		 je	 SHORT $LN52@PyDict_Cop

; 2111 :     if (PyDict_Merge(copy, o, 1) == 0)

  002f1	41 b8 01 00 00
	00		 mov	 r8d, 1
  002f7	48 8b d3	 mov	 rdx, rbx
  002fa	48 8b c8	 mov	 rcx, rax
  002fd	e8 00 00 00 00	 call	 PyDict_Merge
  00302	85 c0		 test	 eax, eax
  00304	75 0e		 jne	 SHORT $LN1@PyDict_Cop

; 2112 :         return copy;

  00306	48 8b c7	 mov	 rax, rdi
  00309	48 8b 7c 24 60	 mov	 rdi, QWORD PTR [rsp+96]

; 2115 : }

  0030e	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00312	5b		 pop	 rbx
  00313	c3		 ret	 0
$LN1@PyDict_Cop:

; 2113 :     Py_DECREF(copy);

  00314	48 8b cf	 mov	 rcx, rdi
  00317	e8 00 00 00 00	 call	 _Py_DecRef
$LN52@PyDict_Cop:

; 2114 :     return NULL;

  0031c	33 c0		 xor	 eax, eax
  0031e	48 8b 7c 24 60	 mov	 rdi, QWORD PTR [rsp+96]

; 2115 : }

  00323	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00327	5b		 pop	 rbx
  00328	c3		 ret	 0
$LN19@PyDict_Cop:

; 2080 :         PyErr_BadInternalCall();

  00329	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00330	ba 20 08 00 00	 mov	 edx, 2080		; 00000820H
  00335	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 2081 :         return NULL;

  0033a	33 c0		 xor	 eax, eax

; 2115 : }

  0033c	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00340	5b		 pop	 rbx
  00341	c3		 ret	 0
PyDict_Copy ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@FCIIJGAF@dict_setdefault?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_setdefault DD imagerel dict_setdefault
	DD	imagerel dict_setdefault+94
	DD	imagerel $unwind$dict_setdefault
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$dict_setdefault DD imagerel dict_setdefault+94
	DD	imagerel dict_setdefault+146
	DD	imagerel $chain$0$dict_setdefault
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$dict_setdefault DD imagerel dict_setdefault+146
	DD	imagerel dict_setdefault+197
	DD	imagerel $chain$3$dict_setdefault
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$dict_setdefault DD imagerel dict_setdefault+197
	DD	imagerel dict_setdefault+417
	DD	imagerel $chain$6$dict_setdefault
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$dict_setdefault DD imagerel dict_setdefault+417
	DD	imagerel dict_setdefault+1110
	DD	imagerel $chain$7$dict_setdefault
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$dict_setdefault DD imagerel dict_setdefault+1110
	DD	imagerel dict_setdefault+1183
	DD	imagerel $chain$8$dict_setdefault
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$dict_setdefault DD 021H
	DD	imagerel dict_setdefault+197
	DD	imagerel dict_setdefault+417
	DD	imagerel $chain$6$dict_setdefault
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$dict_setdefault DD 020521H
	DD	08d405H
	DD	imagerel dict_setdefault+197
	DD	imagerel dict_setdefault+417
	DD	imagerel $chain$6$dict_setdefault
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$dict_setdefault DD 060921H
	DD	0e3409H
	DD	09c400H
	DD	0a6400H
	DD	imagerel dict_setdefault
	DD	imagerel dict_setdefault+94
	DD	imagerel $unwind$dict_setdefault
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$dict_setdefault DD 041721H
	DD	09c417H
	DD	0a6400H
	DD	imagerel dict_setdefault
	DD	imagerel dict_setdefault+94
	DD	imagerel $unwind$dict_setdefault
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$dict_setdefault DD 020521H
	DD	0a6405H
	DD	imagerel dict_setdefault
	DD	imagerel dict_setdefault+94
	DD	imagerel $unwind$dict_setdefault
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_setdefault DD 030a01H
	DD	07003a20aH
	DD	05002H
xdata	ENDS
;	COMDAT ??_C@_0BA@FCIIJGAF@dict_setdefault?$AA@
CONST	SEGMENT
??_C@_0BA@FCIIJGAF@dict_setdefault?$AA@ DB 'dict_setdefault', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT dict_setdefault
_TEXT	SEGMENT
failobj$ = 48
value_addr$ = 56
mp$ = 112
args$ = 120
tv233 = 128
tv173 = 128
key$ = 136
dict_setdefault PROC					; COMDAT

; 2279 : {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 8b ec	 mov	 rbp, rsp
  00006	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  0000a	48 8b f9	 mov	 rdi, rcx
  0000d	48 8b c2	 mov	 rax, rdx

; 2280 :     PyObject *key;
; 2281 :     PyObject *failobj = Py_None;

  00010	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00017	48 89 4d d8	 mov	 QWORD PTR failobj$[rbp-88], rcx

; 2282 :     PyObject *val = NULL;
; 2283 :     Py_hash_t hash;
; 2284 :     PyDictKeyEntry *ep;
; 2285 :     PyObject **value_addr;
; 2286 : 
; 2287 :     if (!PyArg_UnpackTuple(args, "setdefault", 1, 2, &key, &failobj))

  0001b	48 8d 4d d8	 lea	 rcx, QWORD PTR failobj$[rbp-88]
  0001f	41 b9 02 00 00
	00		 mov	 r9d, 2
  00025	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0002a	48 8d 4d 30	 lea	 rcx, QWORD PTR key$[rbp-88]
  0002e	45 8d 41 ff	 lea	 r8d, QWORD PTR [r9-1]
  00032	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@MIJGIGKN@setdefault?$AA@
  0003e	48 8b c8	 mov	 rcx, rax
  00041	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00046	85 c0		 test	 eax, eax
  00048	75 09		 jne	 SHORT $LN19@dict_setde

; 2288 :         return NULL;

  0004a	33 c0		 xor	 eax, eax

; 2324 : }

  0004c	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00050	5f		 pop	 rdi
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
$LN19@dict_setde:

; 2289 : 
; 2290 :     /*
; 2291 :     if (Px_CHECK_PROTECTION(mp, args, NULL))
; 2292 :         return NULL;
; 2293 :     */
; 2294 : 
; 2295 :     if (!PyUnicode_CheckExact(key) ||
; 2296 :         (hash = ((PyASCIIObject *) key)->hash) == -1) {

  00053	48 8b 55 30	 mov	 rdx, QWORD PTR key$[rbp-88]
  00057	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  0005e	48 89 74 24 50	 mov	 QWORD PTR [rsp+80], rsi
  00063	48 39 42 58	 cmp	 QWORD PTR [rdx+88], rax
  00067	75 0a		 jne	 SHORT $LN17@dict_setde
  00069	48 8b 72 68	 mov	 rsi, QWORD PTR [rdx+104]
  0006d	48 83 fe ff	 cmp	 rsi, -1
  00071	75 23		 jne	 SHORT $LN16@dict_setde
$LN17@dict_setde:

; 2297 :         hash = PyObject_Hash(key);

  00073	48 8b ca	 mov	 rcx, rdx
  00076	e8 00 00 00 00	 call	 PyObject_Hash
  0007b	48 8b f0	 mov	 rsi, rax

; 2298 :         if (hash == -1)

  0007e	48 83 f8 ff	 cmp	 rax, -1
  00082	75 0e		 jne	 SHORT $LN64@dict_setde

; 2299 :             return NULL;

  00084	33 c0		 xor	 eax, eax
  00086	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]

; 2324 : }

  0008b	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0008f	5f		 pop	 rdi
  00090	5d		 pop	 rbp
  00091	c3		 ret	 0
$LN64@dict_setde:

; 2299 :             return NULL;

  00092	48 8b 55 30	 mov	 rdx, QWORD PTR key$[rbp-88]
$LN16@dict_setde:

; 2300 :     }
; 2301 :     ep = (mp->ma_keys->dk_lookup)(mp, key, hash, &value_addr);

  00096	48 8b 47 68	 mov	 rax, QWORD PTR [rdi+104]
  0009a	4c 8d 4d e0	 lea	 r9, QWORD PTR value_addr$[rbp-88]
  0009e	4c 8b c6	 mov	 r8, rsi
  000a1	48 8b cf	 mov	 rcx, rdi
  000a4	4c 89 64 24 48	 mov	 QWORD PTR [rsp+72], r12
  000a9	ff 50 10	 call	 QWORD PTR [rax+16]
  000ac	4c 8b e0	 mov	 r12, rax

; 2302 :     if (ep == NULL)

  000af	48 85 c0	 test	 rax, rax
  000b2	75 11		 jne	 SHORT $LN15@dict_setde
  000b4	4c 8b 64 24 48	 mov	 r12, QWORD PTR [rsp+72]
  000b9	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]

; 2324 : }

  000be	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000c2	5f		 pop	 rdi
  000c3	5d		 pop	 rbp
  000c4	c3		 ret	 0
$LN15@dict_setde:

; 2303 :         return NULL;
; 2304 :     val = *value_addr;

  000c5	48 8b 45 e0	 mov	 rax, QWORD PTR value_addr$[rbp-88]
  000c9	48 89 5c 24 70	 mov	 QWORD PTR [rsp+112], rbx
  000ce	48 8b 18	 mov	 rbx, QWORD PTR [rax]

; 2305 :     if (val == NULL) {

  000d1	48 85 db	 test	 rbx, rbx
  000d4	0f 85 a4 03 00
	00		 jne	 $LN14@dict_setde

; 2306 :         if (mp->ma_keys->dk_usable <= 0) {

  000da	48 8b 47 68	 mov	 rax, QWORD PTR [rdi+104]
  000de	48 39 58 18	 cmp	 QWORD PTR [rax+24], rbx
  000e2	7f 29		 jg	 SHORT $LN13@dict_setde

; 2307 :             /* Need to resize. */
; 2308 :             if (insertion_resize(mp) < 0)

  000e4	48 8b cf	 mov	 rcx, rdi
  000e7	e8 00 00 00 00	 call	 insertion_resize
  000ec	85 c0		 test	 eax, eax
  000ee	79 07		 jns	 SHORT $LN12@dict_setde

; 2309 :                 return NULL;

  000f0	33 c0		 xor	 eax, eax
  000f2	e9 92 03 00 00	 jmp	 $LN67@dict_setde
$LN12@dict_setde:

; 2310 :             ep = find_empty_slot(mp, key, hash, &value_addr);

  000f7	48 8b 55 30	 mov	 rdx, QWORD PTR key$[rbp-88]
  000fb	4c 8d 4d e0	 lea	 r9, QWORD PTR value_addr$[rbp-88]
  000ff	4c 8b c6	 mov	 r8, rsi
  00102	48 8b cf	 mov	 rcx, rdi
  00105	e8 00 00 00 00	 call	 find_empty_slot
  0010a	4c 8b e0	 mov	 r12, rax
$LN13@dict_setde:

; 2311 :         }
; 2312 :         Py_INCREF(failobj);

  0010d	48 8b 4d d8	 mov	 rcx, QWORD PTR failobj$[rbp-88]
  00111	e8 00 00 00 00	 call	 _Py_IncRef

; 2313 :         Py_INCREF(key);

  00116	48 8b 4d 30	 mov	 rcx, QWORD PTR key$[rbp-88]
  0011a	e8 00 00 00 00	 call	 _Py_IncRef

; 2314 :         MAINTAIN_TRACKING(mp, key, failobj);

  0011f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00126	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@FCIIJGAF@dict_setdefault?$AA@
  0012d	4c 8b cf	 mov	 r9, rdi
  00130	41 b8 0a 09 00
	00		 mov	 r8d, 2314		; 0000090aH
  00136	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0013e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00143	33 db		 xor	 ebx, ebx
  00145	85 c0		 test	 eax, eax
  00147	75 40		 jne	 SHORT $LN60@dict_setde
  00149	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00150	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@FCIIJGAF@dict_setdefault?$AA@
  00157	4c 8b cf	 mov	 r9, rdi
  0015a	41 b8 0a 09 00
	00		 mov	 r8d, 2314		; 0000090aH
  00160	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00168	e8 00 00 00 00	 call	 _PyParallel_Guard
  0016d	8b cb		 mov	 ecx, ebx
  0016f	85 c0		 test	 eax, eax
  00171	75 04		 jne	 SHORT $LN23@dict_setde
  00173	48 8d 4f e8	 lea	 rcx, QWORD PTR [rdi-24]
$LN23@dict_setde:
  00177	48 83 79 10 fe	 cmp	 QWORD PTR [rcx+16], -2
  0017c	8b c3		 mov	 eax, ebx
  0017e	0f 95 c0	 setne	 al
  00181	85 c0		 test	 eax, eax
  00183	0f 85 cd 02 00
	00		 jne	 $LN2@dict_setde
$LN60@dict_setde:
  00189	4c 8b 4d 30	 mov	 r9, QWORD PTR key$[rbp-88]
  0018d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00194	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@FCIIJGAF@dict_setdefault?$AA@
  0019b	41 b8 0a 09 00
	00		 mov	 r8d, 2314		; 0000090aH
  001a1	4c 89 6c 24 40	 mov	 QWORD PTR [rsp+64], r13
  001a6	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001ae	e8 00 00 00 00	 call	 _PyParallel_Guard
  001b3	4c 8d 2d 00 00
	00 00		 lea	 r13, OFFSET FLAT:PyTuple_Type
  001ba	85 c0		 test	 eax, eax
  001bc	0f 85 e4 00 00
	00		 jne	 $LN38@dict_setde
  001c2	4c 8b 4d 30	 mov	 r9, QWORD PTR key$[rbp-88]
  001c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  001cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@FCIIJGAF@dict_setdefault?$AA@
  001d4	41 b8 0a 09 00
	00		 mov	 r8d, 2314		; 0000090aH
  001da	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001e2	e8 00 00 00 00	 call	 _PyParallel_Guard
  001e7	85 c0		 test	 eax, eax
  001e9	0f 85 b7 00 00
	00		 jne	 $LN38@dict_setde
  001ef	e8 00 00 00 00	 call	 _Py_PXCTX
  001f4	85 c0		 test	 eax, eax
  001f6	0f 85 aa 00 00
	00		 jne	 $LN38@dict_setde
  001fc	4c 8b 4d 30	 mov	 r9, QWORD PTR key$[rbp-88]
  00200	49 8b 49 58	 mov	 rcx, QWORD PTR [r9+88]
  00204	8b 81 00 01 00
	00		 mov	 eax, DWORD PTR [rcx+256]
  0020a	c1 e8 0e	 shr	 eax, 14
  0020d	83 e0 01	 and	 eax, 1
  00210	0f 84 90 00 00
	00		 je	 $LN38@dict_setde
  00216	48 8b 81 a0 01
	00 00		 mov	 rax, QWORD PTR [rcx+416]
  0021d	48 85 c0	 test	 rax, rax
  00220	74 0d		 je	 SHORT $LN62@dict_setde
  00222	49 8b c9	 mov	 rcx, r9
  00225	ff d0		 call	 rax
  00227	85 c0		 test	 eax, eax
  00229	74 7b		 je	 SHORT $LN38@dict_setde
  0022b	4c 8b 4d 30	 mov	 r9, QWORD PTR key$[rbp-88]
$LN62@dict_setde:
  0022f	4d 39 69 58	 cmp	 QWORD PTR [r9+88], r13
  00233	0f 85 82 01 00
	00		 jne	 $LN6@dict_setde
  00239	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00240	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@FCIIJGAF@dict_setdefault?$AA@
  00247	41 b8 0a 09 00
	00		 mov	 r8d, 2314		; 0000090aH
  0024d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00255	e8 00 00 00 00	 call	 _PyParallel_Guard
  0025a	85 c0		 test	 eax, eax
  0025c	75 48		 jne	 SHORT $LN38@dict_setde
  0025e	4c 8b 4d 30	 mov	 r9, QWORD PTR key$[rbp-88]
  00262	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00269	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@FCIIJGAF@dict_setdefault?$AA@
  00270	41 b8 0a 09 00
	00		 mov	 r8d, 2314		; 0000090aH
  00276	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0027e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00283	85 c0		 test	 eax, eax
  00285	74 05		 je	 SHORT $LN33@dict_setde
  00287	48 8b cb	 mov	 rcx, rbx
  0028a	eb 08		 jmp	 SHORT $LN34@dict_setde
$LN33@dict_setde:
  0028c	48 8b 4d 30	 mov	 rcx, QWORD PTR key$[rbp-88]
  00290	48 83 c1 e8	 add	 rcx, -24
$LN34@dict_setde:
  00294	48 83 79 10 fe	 cmp	 QWORD PTR [rcx+16], -2
  00299	8b c3		 mov	 eax, ebx
  0029b	0f 95 c0	 setne	 al
  0029e	85 c0		 test	 eax, eax
  002a0	0f 85 15 01 00
	00		 jne	 $LN6@dict_setde
$LN38@dict_setde:
  002a6	4c 8b 4d d8	 mov	 r9, QWORD PTR failobj$[rbp-88]
  002aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  002b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@FCIIJGAF@dict_setdefault?$AA@
  002b8	41 b8 0a 09 00
	00		 mov	 r8d, 2314		; 0000090aH
  002be	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002c6	e8 00 00 00 00	 call	 _PyParallel_Guard
  002cb	85 c0		 test	 eax, eax
  002cd	0f 85 7e 01 00
	00		 jne	 $LN68@dict_setde
  002d3	4c 8b 4d d8	 mov	 r9, QWORD PTR failobj$[rbp-88]
  002d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  002de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@FCIIJGAF@dict_setdefault?$AA@
  002e5	41 b8 0a 09 00
	00		 mov	 r8d, 2314		; 0000090aH
  002eb	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002f3	e8 00 00 00 00	 call	 _PyParallel_Guard
  002f8	85 c0		 test	 eax, eax
  002fa	0f 85 51 01 00
	00		 jne	 $LN68@dict_setde
  00300	e8 00 00 00 00	 call	 _Py_PXCTX
  00305	85 c0		 test	 eax, eax
  00307	0f 85 44 01 00
	00		 jne	 $LN68@dict_setde
  0030d	4c 8b 4d d8	 mov	 r9, QWORD PTR failobj$[rbp-88]
  00311	49 8b 49 58	 mov	 rcx, QWORD PTR [r9+88]
  00315	8b 81 00 01 00
	00		 mov	 eax, DWORD PTR [rcx+256]
  0031b	c1 e8 0e	 shr	 eax, 14
  0031e	83 e0 01	 and	 eax, 1
  00321	0f 84 2a 01 00
	00		 je	 $LN68@dict_setde
  00327	48 8b 81 a0 01
	00 00		 mov	 rax, QWORD PTR [rcx+416]
  0032e	48 85 c0	 test	 rax, rax
  00331	74 11		 je	 SHORT $LN63@dict_setde
  00333	49 8b c9	 mov	 rcx, r9
  00336	ff d0		 call	 rax
  00338	85 c0		 test	 eax, eax
  0033a	0f 84 11 01 00
	00		 je	 $LN68@dict_setde
  00340	4c 8b 4d d8	 mov	 r9, QWORD PTR failobj$[rbp-88]
$LN63@dict_setde:
  00344	4d 39 69 58	 cmp	 QWORD PTR [r9+88], r13
  00348	75 71		 jne	 SHORT $LN6@dict_setde
  0034a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00351	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@FCIIJGAF@dict_setdefault?$AA@
  00358	41 b8 0a 09 00
	00		 mov	 r8d, 2314		; 0000090aH
  0035e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00366	e8 00 00 00 00	 call	 _PyParallel_Guard
  0036b	85 c0		 test	 eax, eax
  0036d	0f 85 de 00 00
	00		 jne	 $LN68@dict_setde
  00373	4c 8b 4d d8	 mov	 r9, QWORD PTR failobj$[rbp-88]
  00377	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  0037e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@FCIIJGAF@dict_setdefault?$AA@
  00385	41 b8 0a 09 00
	00		 mov	 r8d, 2314		; 0000090aH
  0038b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00393	e8 00 00 00 00	 call	 _PyParallel_Guard
  00398	85 c0		 test	 eax, eax
  0039a	74 05		 je	 SHORT $LN49@dict_setde
  0039c	48 8b cb	 mov	 rcx, rbx
  0039f	eb 08		 jmp	 SHORT $LN50@dict_setde
$LN49@dict_setde:
  003a1	48 8b 4d d8	 mov	 rcx, QWORD PTR failobj$[rbp-88]
  003a5	48 83 c1 e8	 add	 rcx, -24
$LN50@dict_setde:
  003a9	48 83 79 10 fe	 cmp	 QWORD PTR [rcx+16], -2
  003ae	8b c3		 mov	 eax, ebx
  003b0	0f 95 c0	 setne	 al
  003b3	85 c0		 test	 eax, eax
  003b5	0f 84 96 00 00
	00		 je	 $LN68@dict_setde
$LN6@dict_setde:
  003bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  003c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@FCIIJGAF@dict_setdefault?$AA@
  003c9	4c 8b cf	 mov	 r9, rdi
  003cc	41 b8 0a 09 00
	00		 mov	 r8d, 2314		; 0000090aH
  003d2	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003da	e8 00 00 00 00	 call	 _PyParallel_Guard
  003df	85 c0		 test	 eax, eax
  003e1	75 6e		 jne	 SHORT $LN68@dict_setde
  003e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  003ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@FCIIJGAF@dict_setdefault?$AA@
  003f1	4c 8b cf	 mov	 r9, rdi
  003f4	41 b8 0a 09 00
	00		 mov	 r8d, 2314		; 0000090aH
  003fa	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00402	e8 00 00 00 00	 call	 _PyParallel_Guard
  00407	85 c0		 test	 eax, eax
  00409	75 04		 jne	 SHORT $LN59@dict_setde
  0040b	48 8d 5f e8	 lea	 rbx, QWORD PTR [rdi-24]
$LN59@dict_setde:
  0040f	48 83 7b 10 fe	 cmp	 QWORD PTR [rbx+16], -2
  00414	74 0c		 je	 SHORT $LN1@dict_setde
  00416	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  0041d	e8 00 00 00 00	 call	 Py_FatalError
$LN1@dict_setde:
  00422	48 c7 43 10 fd
	ff ff ff	 mov	 QWORD PTR [rbx+16], -3
  0042a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00431	48 89 03	 mov	 QWORD PTR [rbx], rax
  00434	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  0043b	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0043f	48 89 4b 08	 mov	 QWORD PTR [rbx+8], rcx
  00443	48 89 19	 mov	 QWORD PTR [rcx], rbx
  00446	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  0044d	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
$LN68@dict_setde:
  00451	4c 8b 6c 24 40	 mov	 r13, QWORD PTR [rsp+64]
$LN2@dict_setde:

; 2315 :         ep->me_key = key;

  00456	48 8b 45 30	 mov	 rax, QWORD PTR key$[rbp-88]

; 2316 :         ep->me_hash = hash;

  0045a	49 89 34 24	 mov	 QWORD PTR [r12], rsi
  0045e	49 89 44 24 08	 mov	 QWORD PTR [r12+8], rax

; 2317 :         *value_addr = failobj;

  00463	48 8b 4d d8	 mov	 rcx, QWORD PTR failobj$[rbp-88]
  00467	48 8b 45 e0	 mov	 rax, QWORD PTR value_addr$[rbp-88]
  0046b	48 89 08	 mov	 QWORD PTR [rax], rcx

; 2318 :         val = failobj;
; 2319 :         mp->ma_keys->dk_usable--;

  0046e	48 8b 4f 68	 mov	 rcx, QWORD PTR [rdi+104]
  00472	48 8b 5d d8	 mov	 rbx, QWORD PTR failobj$[rbp-88]
  00476	48 ff 49 18	 dec	 QWORD PTR [rcx+24]

; 2320 :         mp->ma_used++;

  0047a	48 ff 47 60	 inc	 QWORD PTR [rdi+96]
$LN14@dict_setde:

; 2321 :     }
; 2322 :     Py_INCREF(val);

  0047e	48 8b cb	 mov	 rcx, rbx
  00481	e8 00 00 00 00	 call	 _Py_IncRef

; 2323 :     return val;

  00486	48 8b c3	 mov	 rax, rbx
$LN67@dict_setde:
  00489	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  0048e	4c 8b 64 24 48	 mov	 r12, QWORD PTR [rsp+72]
  00493	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]

; 2324 : }

  00498	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0049c	5f		 pop	 rdi
  0049d	5d		 pop	 rbp
  0049e	c3		 ret	 0
dict_setdefault ENDP
_TEXT	ENDS
PUBLIC	_PyDict_SetItemId
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyDict_SetItemId DD imagerel $LN4
	DD	imagerel $LN4+67
	DD	imagerel $unwind$_PyDict_SetItemId
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyDict_SetItemId DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyDict_SetItemId
_TEXT	SEGMENT
v$ = 48
key$ = 56
item$ = 64
_PyDict_SetItemId PROC					; COMDAT

; 2769 : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f9	 mov	 rdi, rcx

; 2770 :     PyObject *kv;
; 2771 :     kv = _PyUnicode_FromId(key); /* borrowed */

  0000d	48 8b ca	 mov	 rcx, rdx
  00010	49 8b d8	 mov	 rbx, r8
  00013	e8 00 00 00 00	 call	 _PyUnicode_FromId

; 2772 :     if (kv == NULL)

  00018	48 85 c0	 test	 rax, rax
  0001b	75 0e		 jne	 SHORT $LN1@PyDict_Set@2

; 2773 :         return -1;

  0001d	83 c8 ff	 or	 eax, -1

; 2775 : }

  00020	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00025	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00029	5f		 pop	 rdi
  0002a	c3		 ret	 0
$LN1@PyDict_Set@2:

; 2774 :     return PyDict_SetItem(v, kv, item);

  0002b	4c 8b c3	 mov	 r8, rbx
  0002e	48 8b d0	 mov	 rdx, rax
  00031	48 8b cf	 mov	 rcx, rdi

; 2775 : }

  00034	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00039	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003d	5f		 pop	 rdi
  0003e	e9 00 00 00 00	 jmp	 PyDict_SetItem
_PyDict_SetItemId ENDP
_TEXT	ENDS
PUBLIC	PyDict_SetItemString
EXTRN	PyUnicode_InternInPlace:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_SetItemString DD imagerel $LN4
	DD	imagerel $LN4+99
	DD	imagerel $unwind$PyDict_SetItemString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_SetItemString DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyDict_SetItemString
_TEXT	SEGMENT
v$ = 48
key$ = 56
item$ = 64
kv$ = 72
PyDict_SetItemString PROC				; COMDAT

; 2779 : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f9	 mov	 rdi, rcx

; 2780 :     PyObject *kv;
; 2781 :     int err;
; 2782 :     kv = PyUnicode_FromString(key);

  0000d	48 8b ca	 mov	 rcx, rdx
  00010	49 8b d8	 mov	 rbx, r8
  00013	e8 00 00 00 00	 call	 PyUnicode_FromString
  00018	48 89 44 24 48	 mov	 QWORD PTR kv$[rsp], rax

; 2783 :     if (kv == NULL)

  0001d	48 85 c0	 test	 rax, rax
  00020	75 0e		 jne	 SHORT $LN1@PyDict_Set@3

; 2784 :         return -1;

  00022	83 c8 ff	 or	 eax, -1

; 2789 : }

  00025	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5f		 pop	 rdi
  0002f	c3		 ret	 0
$LN1@PyDict_Set@3:

; 2785 :     PyUnicode_InternInPlace(&kv); /* XXX Should we really? */

  00030	48 8d 4c 24 48	 lea	 rcx, QWORD PTR kv$[rsp]
  00035	e8 00 00 00 00	 call	 PyUnicode_InternInPlace

; 2786 :     err = PyDict_SetItem(v, kv, item);

  0003a	48 8b 54 24 48	 mov	 rdx, QWORD PTR kv$[rsp]
  0003f	4c 8b c3	 mov	 r8, rbx
  00042	48 8b cf	 mov	 rcx, rdi
  00045	e8 00 00 00 00	 call	 PyDict_SetItem

; 2787 :     Py_DECREF(kv);

  0004a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR kv$[rsp]
  0004f	8b d8		 mov	 ebx, eax
  00051	e8 00 00 00 00	 call	 _Py_DecRef

; 2788 :     return err;

  00056	8b c3		 mov	 eax, ebx

; 2789 : }

  00058	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00061	5f		 pop	 rdi
  00062	c3		 ret	 0
PyDict_SetItemString ENDP
_TEXT	ENDS
PUBLIC	_PyObjectDict_SetItem
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObjectDict_SetItem DD imagerel $LN22
	DD	imagerel $LN22+325
	DD	imagerel $unwind$_PyObjectDict_SetItem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObjectDict_SetItem DD 0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0d0143218H
	DD	07010c012H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyObjectDict_SetItem
_TEXT	SEGMENT
tp$ = 64
dictptr$ = 72
key$ = 80
value$ = 88
_PyObjectDict_SetItem PROC				; COMDAT

; 3777 : {

$LN22:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 3778 :     PyObject *dict;
; 3779 :     int res;
; 3780 :     PyDictKeysObject *cached;
; 3781 : 
; 3782 :     assert(dictptr != NULL);
; 3783 :     if ((tp->tp_flags & Py_TPFLAGS_HEAPTYPE) && (cached = CACHED_KEYS(tp))) {

  00018	f7 81 00 01 00
	00 00 02 00 00	 test	 DWORD PTR [rcx+256], 512 ; 00000200H
  00022	4d 8b e1	 mov	 r12, r9
  00025	4d 8b e8	 mov	 r13, r8
  00028	48 8b ea	 mov	 rbp, rdx
  0002b	48 8b f1	 mov	 rsi, rcx
  0002e	0f 84 c4 00 00
	00		 je	 $LN17@PyObjectDi
  00034	48 8b 99 80 03
	00 00		 mov	 rbx, QWORD PTR [rcx+896]
  0003b	48 85 db	 test	 rbx, rbx
  0003e	0f 84 b4 00 00
	00		 je	 $LN17@PyObjectDi

; 3784 :         assert(dictptr != NULL);
; 3785 :         dict = *dictptr;

  00044	48 8b 3a	 mov	 rdi, QWORD PTR [rdx]

; 3786 :         if (dict == NULL) {

  00047	48 85 ff	 test	 rdi, rdi
  0004a	75 1b		 jne	 SHORT $LN16@PyObjectDi

; 3787 :             DK_INCREF(cached);

  0004c	48 ff 03	 inc	 QWORD PTR [rbx]

; 3788 :             dict = new_dict_with_shared_keys(cached);

  0004f	48 8b cb	 mov	 rcx, rbx
  00052	e8 00 00 00 00	 call	 new_dict_with_shared_keys
  00057	48 8b f8	 mov	 rdi, rax

; 3789 :             if (dict == NULL)

  0005a	48 85 c0	 test	 rax, rax

; 3790 :                 return -1;

  0005d	0f 84 90 00 00
	00		 je	 $LN21@PyObjectDi

; 3791 :             *dictptr = dict;

  00063	48 89 45 00	 mov	 QWORD PTR [rbp], rax
$LN16@PyObjectDi:

; 3792 :         }
; 3793 :         if (value == NULL) {
; 3794 :             res = PyDict_DelItem(dict, key);

  00067	49 8b d5	 mov	 rdx, r13
  0006a	48 8b cf	 mov	 rcx, rdi
  0006d	4d 85 e4	 test	 r12, r12
  00070	75 2e		 jne	 SHORT $LN14@PyObjectDi
  00072	e8 00 00 00 00	 call	 PyDict_DelItem
  00077	8b e8		 mov	 ebp, eax

; 3795 :             if (cached != ((PyDictObject *)dict)->ma_keys) {

  00079	48 3b 5f 68	 cmp	 rbx, QWORD PTR [rdi+104]
  0007d	0f 84 a7 00 00
	00		 je	 $LN1@PyObjectDi

; 3796 :                 CACHED_KEYS(tp) = NULL;

  00083	4c 89 a6 80 03
	00 00		 mov	 QWORD PTR [rsi+896], r12

; 3797 :                 DK_DECREF(cached);

  0008a	48 ff 0b	 dec	 QWORD PTR [rbx]
  0008d	0f 85 97 00 00
	00		 jne	 $LN1@PyObjectDi
  00093	48 8b cb	 mov	 rcx, rbx
  00096	e8 00 00 00 00	 call	 free_keys_object

; 3798 :             }
; 3799 :         } else {

  0009b	e9 8a 00 00 00	 jmp	 $LN1@PyObjectDi
$LN14@PyObjectDi:

; 3800 :             res = PyDict_SetItem(dict, key, value);

  000a0	4d 8b c4	 mov	 r8, r12
  000a3	e8 00 00 00 00	 call	 PyDict_SetItem
  000a8	8b e8		 mov	 ebp, eax

; 3801 :             if (cached != ((PyDictObject *)dict)->ma_keys) {

  000aa	48 3b 5f 68	 cmp	 rbx, QWORD PTR [rdi+104]
  000ae	74 7a		 je	 SHORT $LN1@PyObjectDi

; 3802 :                 /* Either update tp->ht_cached_keys or delete it */
; 3803 :                 if (cached->dk_refcnt == 1) {

  000b0	48 83 3b 01	 cmp	 QWORD PTR [rbx], 1
  000b4	75 11		 jne	 SHORT $LN9@PyObjectDi

; 3804 :                     CACHED_KEYS(tp) = make_keys_shared(dict);

  000b6	48 8b cf	 mov	 rcx, rdi
  000b9	e8 00 00 00 00	 call	 make_keys_shared
  000be	48 89 86 80 03
	00 00		 mov	 QWORD PTR [rsi+896], rax

; 3805 :                 } else {

  000c5	eb 0b		 jmp	 SHORT $LN8@PyObjectDi
$LN9@PyObjectDi:

; 3806 :                     CACHED_KEYS(tp) = NULL;

  000c7	48 c7 86 80 03
	00 00 00 00 00
	00		 mov	 QWORD PTR [rsi+896], 0
$LN8@PyObjectDi:

; 3807 :                 }
; 3808 :                 DK_DECREF(cached);

  000d2	48 ff 0b	 dec	 QWORD PTR [rbx]
  000d5	75 08		 jne	 SHORT $LN7@PyObjectDi
  000d7	48 8b cb	 mov	 rcx, rbx
  000da	e8 00 00 00 00	 call	 free_keys_object
$LN7@PyObjectDi:

; 3809 :                 if (CACHED_KEYS(tp) == NULL && PyErr_Occurred())

  000df	48 83 be 80 03
	00 00 00	 cmp	 QWORD PTR [rsi+896], 0
  000e7	75 41		 jne	 SHORT $LN1@PyObjectDi
  000e9	e8 00 00 00 00	 call	 PyErr_Occurred
  000ee	48 85 c0	 test	 rax, rax
  000f1	74 37		 je	 SHORT $LN1@PyObjectDi
$LN21@PyObjectDi:

; 3810 :                     return -1;

  000f3	83 c8 ff	 or	 eax, -1
  000f6	eb 34		 jmp	 SHORT $LN18@PyObjectDi
$LN17@PyObjectDi:

; 3811 :             }
; 3812 :         }
; 3813 :     } else {
; 3814 :         dict = *dictptr;

  000f8	48 8b 02	 mov	 rax, QWORD PTR [rdx]

; 3815 :         if (dict == NULL) {

  000fb	48 85 c0	 test	 rax, rax
  000fe	75 0e		 jne	 SHORT $LN4@PyObjectDi

; 3816 :             dict = PyDict_New();

  00100	e8 00 00 00 00	 call	 PyDict_New

; 3817 :             if (dict == NULL)

  00105	48 85 c0	 test	 rax, rax

; 3818 :                 return -1;

  00108	74 e9		 je	 SHORT $LN21@PyObjectDi

; 3819 :             *dictptr = dict;

  0010a	48 89 45 00	 mov	 QWORD PTR [rbp], rax
$LN4@PyObjectDi:

; 3820 :         }
; 3821 :         if (value == NULL) {
; 3822 :             res = PyDict_DelItem(dict, key);

  0010e	49 8b d5	 mov	 rdx, r13
  00111	48 8b c8	 mov	 rcx, rax
  00114	4d 85 e4	 test	 r12, r12
  00117	75 07		 jne	 SHORT $LN2@PyObjectDi
  00119	e8 00 00 00 00	 call	 PyDict_DelItem

; 3823 :         } else {

  0011e	eb 08		 jmp	 SHORT $LN20@PyObjectDi
$LN2@PyObjectDi:

; 3824 :             res = PyDict_SetItem(dict, key, value);

  00120	4d 8b c4	 mov	 r8, r12
  00123	e8 00 00 00 00	 call	 PyDict_SetItem
$LN20@PyObjectDi:
  00128	8b e8		 mov	 ebp, eax
$LN1@PyObjectDi:

; 3825 :         }
; 3826 :     }
; 3827 :     return res;

  0012a	8b c5		 mov	 eax, ebp
$LN18@PyObjectDi:

; 3828 : }

  0012c	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00131	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00136	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  0013b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0013f	41 5d		 pop	 r13
  00141	41 5c		 pop	 r12
  00143	5f		 pop	 rdi
  00144	c3		 ret	 0
_PyObjectDict_SetItem ENDP
_TEXT	ENDS
EXTRN	PyArg_ValidateKeywordArguments:PROC
EXTRN	_PyObject_HasAttrId:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_update_common DD imagerel dict_update_common
	DD	imagerel dict_update_common+229
	DD	imagerel $unwind$dict_update_common
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_update_common DD 060f01H
	DD	0b640fH
	DD	0a340fH
	DD	0700b720fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT dict_update_common
_TEXT	SEGMENT
arg$ = 48
self$ = 80
args$ = 88
kwds$ = 96
methname$ = 104
dict_update_common PROC					; COMDAT

; 1837 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000f	48 8b f1	 mov	 rsi, rcx
  00012	4d 8b d1	 mov	 r10, r9
  00015	48 8b c2	 mov	 rax, rdx

; 1838 :     PyObject *arg = NULL;
; 1839 :     int result = 0;
; 1840 : 
; 1841 :     if (!PyArg_UnpackTuple(args, methname, 0, 1, &arg))

  00018	48 8d 4c 24 30	 lea	 rcx, QWORD PTR arg$[rsp]
  0001d	33 db		 xor	 ebx, ebx
  0001f	49 8b f8	 mov	 rdi, r8
  00022	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00027	44 8d 4b 01	 lea	 r9d, QWORD PTR [rbx+1]
  0002b	48 8b c8	 mov	 rcx, rax
  0002e	45 33 c0	 xor	 r8d, r8d
  00031	49 8b d2	 mov	 rdx, r10
  00034	48 89 5c 24 30	 mov	 QWORD PTR arg$[rsp], rbx
  00039	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003e	85 c0		 test	 eax, eax
  00040	75 13		 jne	 SHORT $LN8@dict_updat
$LN2@dict_updat:

; 1854 :         else
; 1855 :             result = -1;
; 1856 :     }
; 1857 :     return result;

  00042	83 c8 ff	 or	 eax, -1

; 1858 : }

  00045	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0004a	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  0004f	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00053	5f		 pop	 rdi
  00054	c3		 ret	 0
$LN8@dict_updat:

; 1842 :         result = -1;
; 1843 : 
; 1844 :     else if (arg != NULL) {

  00055	48 8b 4c 24 30	 mov	 rcx, QWORD PTR arg$[rsp]
  0005a	48 85 c9	 test	 rcx, rcx
  0005d	74 42		 je	 SHORT $LN11@dict_updat

; 1845 :         _Py_IDENTIFIER(keys);
; 1846 :         if (_PyObject_HasAttrId(arg, &PyId_keys))

  0005f	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  00066	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0006f	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_keys@?2??dict_update_common@@9@9
  00074	4a 03 14 c0	 add	 rdx, QWORD PTR [rax+r8*8]
  00078	e8 00 00 00 00	 call	 _PyObject_HasAttrId

; 1847 :             result = PyDict_Merge(self, arg, 1);

  0007d	48 8b 54 24 30	 mov	 rdx, QWORD PTR arg$[rsp]
  00082	41 b8 01 00 00
	00		 mov	 r8d, 1
  00088	48 8b ce	 mov	 rcx, rsi
  0008b	85 c0		 test	 eax, eax
  0008d	74 07		 je	 SHORT $LN5@dict_updat
  0008f	e8 00 00 00 00	 call	 PyDict_Merge

; 1848 :         else

  00094	eb 05		 jmp	 SHORT $LN14@dict_updat
$LN5@dict_updat:

; 1849 :             result = PyDict_MergeFromSeq2(self, arg, 1);

  00096	e8 00 00 00 00	 call	 PyDict_MergeFromSeq2
$LN14@dict_updat:
  0009b	8b d8		 mov	 ebx, eax

; 1850 :     }
; 1851 :     if (result == 0 && kwds != NULL) {

  0009d	85 c0		 test	 eax, eax
  0009f	75 32		 jne	 SHORT $LN13@dict_updat
$LN11@dict_updat:
  000a1	48 85 ff	 test	 rdi, rdi
  000a4	74 2d		 je	 SHORT $LN13@dict_updat

; 1852 :         if (PyArg_ValidateKeywordArguments(kwds))

  000a6	48 8b cf	 mov	 rcx, rdi
  000a9	e8 00 00 00 00	 call	 PyArg_ValidateKeywordArguments
  000ae	85 c0		 test	 eax, eax
  000b0	74 90		 je	 SHORT $LN2@dict_updat

; 1853 :             result = PyDict_Merge(self, kwds, 1);

  000b2	41 b8 01 00 00
	00		 mov	 r8d, 1
  000b8	48 8b d7	 mov	 rdx, rdi
  000bb	48 8b ce	 mov	 rcx, rsi
  000be	e8 00 00 00 00	 call	 PyDict_Merge

; 1858 : }

  000c3	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000c8	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  000cd	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000d1	5f		 pop	 rdi
  000d2	c3		 ret	 0
$LN13@dict_updat:
  000d3	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  000d8	8b c3		 mov	 eax, ebx
  000da	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000df	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000e3	5f		 pop	 rdi
  000e4	c3		 ret	 0
dict_update_common ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$dict_update DD imagerel dict_update
	DD	imagerel dict_update+109
	DD	imagerel $unwind$dict_update
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_update DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\dictobject.c
xdata	ENDS
;	COMDAT dict_update
_TEXT	SEGMENT
self$ = 64
args$ = 72
kwds$ = 80
dict_update PROC					; COMDAT

; 1862 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1863 :     if (dict_update_common(self, args, kwds, "update") != -1)

  00004	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_06HDLLMMEJ@update?$AA@
  0000b	e8 00 00 00 00	 call	 dict_update_common
  00010	83 f8 ff	 cmp	 eax, -1
  00013	74 51		 je	 SHORT $LN1@dict_updat@2

; 1864 :         Py_RETURN_NONE;

  00015	e8 00 00 00 00	 call	 _Py_PXCTX
  0001a	85 c0		 test	 eax, eax
  0001c	75 3c		 jne	 SHORT $LN5@dict_updat@2
  0001e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00039	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00041	e8 00 00 00 00	 call	 _PyParallel_Guard
  00046	85 c0		 test	 eax, eax
  00048	75 09		 jne	 SHORT $LN4@dict_updat@2
  0004a	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00051	74 07		 je	 SHORT $LN5@dict_updat@2
$LN4@dict_updat@2:
  00053	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN5@dict_updat@2:
  0005a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1866 : }

  00061	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00065	c3		 ret	 0
$LN1@dict_updat@2:

; 1865 :     return NULL;

  00066	33 c0		 xor	 eax, eax

; 1866 : }

  00068	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006c	c3		 ret	 0
dict_update ENDP
_TEXT	ENDS
PUBLIC	PyDict_Update
; Function compile flags: /Ogtpy
;	COMDAT PyDict_Update
_TEXT	SEGMENT
a$ = 8
b$ = 16
PyDict_Update PROC					; COMDAT

; 1956 :     return PyDict_Merge(a, b, 1);

  00000	41 b8 01 00 00
	00		 mov	 r8d, 1

; 1957 : }

  00006	e9 00 00 00 00	 jmp	 PyDict_Merge
PyDict_Update ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT dict_copy
_TEXT	SEGMENT
mp$ = 8
dict_copy PROC						; COMDAT

; 2069 :     return PyDict_Copy((PyObject*)mp);
; 2070 : }

  00000	e9 00 00 00 00	 jmp	 PyDict_Copy
dict_copy ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT dict_init
_TEXT	SEGMENT
self$ = 8
args$ = 16
kwds$ = 24
dict_init PROC						; COMDAT

; 2680 :     return dict_update_common(self, args, kwds, "dict");

  00000	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_04BCIDKIGN@dict?$AA@

; 2681 : }

  00007	e9 00 00 00 00	 jmp	 dict_update_common
dict_init ENDP
_TEXT	ENDS
END
