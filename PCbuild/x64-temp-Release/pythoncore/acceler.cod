; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	PyGrammar_RemoveAccelerators
EXTRN	PyObject_Free:PROC
;	COMDAT pdata
; File c:\src\pyparallel\parser\acceler.c
pdata	SEGMENT
$pdata$PyGrammar_RemoveAccelerators DD imagerel $LN14
	DD	imagerel $LN14+33
	DD	imagerel $unwind$PyGrammar_RemoveAccelerators
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyGrammar_RemoveAccelerators DD imagerel $LN14+33
	DD	imagerel $LN14+108
	DD	imagerel $chain$1$PyGrammar_RemoveAccelerators
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyGrammar_RemoveAccelerators DD imagerel $LN14+108
	DD	imagerel $LN14+125
	DD	imagerel $chain$2$PyGrammar_RemoveAccelerators
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyGrammar_RemoveAccelerators DD 021H
	DD	imagerel $LN14
	DD	imagerel $LN14+33
	DD	imagerel $unwind$PyGrammar_RemoveAccelerators
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyGrammar_RemoveAccelerators DD 040e21H
	DD	07740eH
	DD	063405H
	DD	imagerel $LN14
	DD	imagerel $LN14+33
	DD	imagerel $unwind$PyGrammar_RemoveAccelerators
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyGrammar_RemoveAccelerators DD 061001H
	DD	096410H
	DD	085410H
	DD	0c00c3210H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyGrammar_RemoveAccelerators
_TEXT	SEGMENT
g$ = 48
PyGrammar_RemoveAccelerators PROC			; COMDAT

; 36   : {

$LN14:
  00000	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  00005	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000a	41 54		 push	 r12
  0000c	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 40   :     d = g->g_dfa;
; 41   :     for (i = g->g_ndfas; --i >= 0; d++) {

  00010	8b 29		 mov	 ebp, DWORD PTR [rcx]
  00012	48 8b 71 08	 mov	 rsi, QWORD PTR [rcx+8]
  00016	45 33 e4	 xor	 r12d, r12d
  00019	ff cd		 dec	 ebp
  0001b	44 89 61 24	 mov	 DWORD PTR [rcx+36], r12d
  0001f	78 4b		 js	 SHORT $LN5@PyGrammar_

; 37   :     dfa *d;
; 38   :     int i;
; 39   :     g->g_accel = 0;

  00021	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00026	48 83 c6 14	 add	 rsi, 20
  0002a	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  0002f	90		 npad	 1
$LL7@PyGrammar_:

; 42   :         state *s;
; 43   :         int j;
; 44   :         s = d->d_state;

  00030	48 8b 5e 04	 mov	 rbx, QWORD PTR [rsi+4]

; 45   :         for (j = 0; j < d->d_nstates; j++, s++) {

  00034	41 8b fc	 mov	 edi, r12d
  00037	44 39 26	 cmp	 DWORD PTR [rsi], r12d
  0003a	7e 1e		 jle	 SHORT $LN6@PyGrammar_

; 42   :         state *s;
; 43   :         int j;
; 44   :         s = d->d_state;

  0003c	48 83 c3 18	 add	 rbx, 24
$LL4@PyGrammar_:

; 46   :             if (s->s_accel)

  00040	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00043	48 85 c9	 test	 rcx, rcx
  00046	74 05		 je	 SHORT $LN1@PyGrammar_

; 47   :                 PyObject_FREE(s->s_accel);

  00048	e8 00 00 00 00	 call	 PyObject_Free
$LN1@PyGrammar_:

; 48   :             s->s_accel = NULL;

  0004d	4c 89 23	 mov	 QWORD PTR [rbx], r12
  00050	ff c7		 inc	 edi
  00052	48 83 c3 28	 add	 rbx, 40			; 00000028H
  00056	3b 3e		 cmp	 edi, DWORD PTR [rsi]
  00058	7c e6		 jl	 SHORT $LL4@PyGrammar_
$LN6@PyGrammar_:

; 40   :     d = g->g_dfa;
; 41   :     for (i = g->g_ndfas; --i >= 0; d++) {

  0005a	48 83 c6 28	 add	 rsi, 40			; 00000028H
  0005e	ff cd		 dec	 ebp
  00060	79 ce		 jns	 SHORT $LL7@PyGrammar_
  00062	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]
  00067	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
$LN5@PyGrammar_:

; 49   :         }
; 50   :     }
; 51   : }

  0006c	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00071	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00076	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007a	41 5c		 pop	 r12
  0007c	c3		 ret	 0
PyGrammar_RemoveAccelerators ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@JMEPLMEJ@no?5mem?5to?5add?5parser?5accelerator@ ; `string'
PUBLIC	??_C@_0BA@NBNHCIHI@XXX?5ambiguity?$CB?6?$AA@	; `string'
PUBLIC	??_C@_0CC@MJKIBOFA@XXX?5too?5high?5nonterminal?5number?$CB@ ; `string'
PUBLIC	??_C@_0BG@GFBOHICG@XXX?5too?5many?5states?$CB?6?$AA@ ; `string'
PUBLIC	??_C@_0CF@FLCIMHMA@no?5mem?5to?5build?5parser?5accelerat@ ; `string'
EXTRN	PyGrammar_FindDFA:PROC
EXTRN	__imp_printf:PROC
EXTRN	__imp_exit:PROC
EXTRN	__imp_fprintf:PROC
EXTRN	__imp___iob_func:PROC
EXTRN	PyObject_Malloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$fixstate DD imagerel fixstate
	DD	imagerel fixstate+103
	DD	imagerel $unwind$fixstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$fixstate DD imagerel fixstate+103
	DD	imagerel fixstate+429
	DD	imagerel $chain$1$fixstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$fixstate DD imagerel fixstate+429
	DD	imagerel fixstate+551
	DD	imagerel $chain$2$fixstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$fixstate DD imagerel fixstate+551
	DD	imagerel fixstate+592
	DD	imagerel $chain$3$fixstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$fixstate DD imagerel fixstate+592
	DD	imagerel fixstate+672
	DD	imagerel $chain$4$fixstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$fixstate DD 021H
	DD	imagerel fixstate
	DD	imagerel fixstate+103
	DD	imagerel $unwind$fixstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$fixstate DD 020021H
	DD	05f400H
	DD	imagerel fixstate
	DD	imagerel fixstate+103
	DD	imagerel $unwind$fixstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$fixstate DD 021H
	DD	imagerel fixstate
	DD	imagerel fixstate+103
	DD	imagerel $unwind$fixstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$fixstate DD 020521H
	DD	05f405H
	DD	imagerel fixstate
	DD	imagerel fixstate+103
	DD	imagerel $unwind$fixstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fixstate DD 096701H
	DD	067467H
	DD	0e00e6212H
	DD	0c00ad00cH
	DD	050076008H
	DD	03006H
xdata	ENDS
;	COMDAT ??_C@_0CD@JMEPLMEJ@no?5mem?5to?5add?5parser?5accelerator@
CONST	SEGMENT
??_C@_0CD@JMEPLMEJ@no?5mem?5to?5add?5parser?5accelerator@ DB 'no mem to a'
	DB	'dd parser accelerators', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NBNHCIHI@XXX?5ambiguity?$CB?6?$AA@
CONST	SEGMENT
??_C@_0BA@NBNHCIHI@XXX?5ambiguity?$CB?6?$AA@ DB 'XXX ambiguity!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@MJKIBOFA@XXX?5too?5high?5nonterminal?5number?$CB@
CONST	SEGMENT
??_C@_0CC@MJKIBOFA@XXX?5too?5high?5nonterminal?5number?$CB@ DB 'XXX too h'
	DB	'igh nonterminal number!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GFBOHICG@XXX?5too?5many?5states?$CB?6?$AA@
CONST	SEGMENT
??_C@_0BG@GFBOHICG@XXX?5too?5many?5states?$CB?6?$AA@ DB 'XXX too many sta'
	DB	'tes!', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@FLCIMHMA@no?5mem?5to?5build?5parser?5accelerat@
CONST	SEGMENT
??_C@_0CF@FLCIMHMA@no?5mem?5to?5build?5parser?5accelerat@ DB 'no mem to b'
	DB	'uild parser accelerators', 0aH, 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT fixstate
_TEXT	SEGMENT
d1$1$ = 112
g$ = 112
s$ = 120
accel$1$ = 128
fixstate PROC						; COMDAT

; 65   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	53		 push	 rbx
  00006	55		 push	 rbp
  00007	56		 push	 rsi
  00008	41 54		 push	 r12
  0000a	41 55		 push	 r13
  0000c	41 56		 push	 r14
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 66   :     arc *a;
; 67   :     int k;
; 68   :     int *accel;
; 69   :     int nl = g->g_ll.ll_nlabels;

  00012	4c 63 61 10	 movsxd	 r12, DWORD PTR [rcx+16]
  00016	4c 8b e9	 mov	 r13, rcx

; 70   :     s->s_accept = 0;

  00019	33 ed		 xor	 ebp, ebp

; 71   :     accel = (int *) PyObject_MALLOC(nl * sizeof(int));

  0001b	4a 8d 0c a5 00
	00 00 00	 lea	 rcx, QWORD PTR [r12*4]
  00023	4c 8b f2	 mov	 r14, rdx
  00026	89 6a 20	 mov	 DWORD PTR [rdx+32], ebp
  00029	49 8b f4	 mov	 rsi, r12
  0002c	e8 00 00 00 00	 call	 PyObject_Malloc
  00031	48 8b d8	 mov	 rbx, rax
  00034	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR accel$1$[rsp], rax

; 72   :     if (accel == NULL) {

  0003c	48 85 c0	 test	 rax, rax
  0003f	75 21		 jne	 SHORT $LN28@fixstate

; 73   :         fprintf(stderr, "no mem to build parser accelerators\n");

  00041	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00047	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@FLCIMHMA@no?5mem?5to?5build?5parser?5accelerat@
  0004e	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  00052	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 74   :         exit(1);

  00058	8d 4d 01	 lea	 ecx, QWORD PTR [rbp+1]
  0005b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
  00061	cc		 int	 3
$LN28@fixstate:
  00062	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  00067	4c 89 7c 24 28	 mov	 QWORD PTR [rsp+40], r15

; 75   :     }
; 76   :     for (k = 0; k < nl; k++)

  0006c	45 85 e4	 test	 r12d, r12d
  0006f	7e 0c		 jle	 SHORT $LN27@fixstate

; 77   :         accel[k] = -1;

  00071	48 8b f8	 mov	 rdi, rax
  00074	49 8b cc	 mov	 rcx, r12
  00077	48 83 c8 ff	 or	 rax, -1
  0007b	f3 ab		 rep stosd
$LN27@fixstate:

; 78   :     a = s->s_arc;
; 79   :     for (k = s->s_narcs; --k >= 0; a++) {

  0007d	41 8b 06	 mov	 eax, DWORD PTR [r14]
  00080	4d 8b 7e 08	 mov	 r15, QWORD PTR [r14+8]
  00084	ff c8		 dec	 eax
  00086	0f 88 17 01 00
	00		 js	 $LN34@fixstate
  0008c	41 b9 80 00 00
	00		 mov	 r9d, 128		; 00000080H
  00092	8b f0		 mov	 esi, eax
  00094	66 66 66 66 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL24@fixstate:

; 80   :         int lbl = a->a_lbl;
; 81   :         label *l = &g->g_ll.ll_label[lbl];
; 82   :         int type = l->lb_type;

  000a0	49 8b 45 18	 mov	 rax, QWORD PTR [r13+24]
  000a4	49 0f bf 17	 movsx	 rdx, WORD PTR [r15]
  000a8	48 8b ca	 mov	 rcx, rdx
  000ab	48 03 c9	 add	 rcx, rcx
  000ae	8b 3c c8	 mov	 edi, DWORD PTR [rax+rcx*8]

; 83   :         if (a->a_arrow >= (1 << 7)) {

  000b1	41 0f b7 47 02	 movzx	 eax, WORD PTR [r15+2]
  000b6	66 41 3b c1	 cmp	 ax, r9w
  000ba	7c 18		 jl	 SHORT $LN21@fixstate

; 84   :             printf("XXX too many states!\n");

  000bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@GFBOHICG@XXX?5too?5many?5states?$CB?6?$AA@
  000c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf

; 85   :             continue;

  000c9	41 b9 80 00 00
	00		 mov	 r9d, 128		; 00000080H
  000cf	e9 c0 00 00 00	 jmp	 $LN23@fixstate
$LN21@fixstate:

; 86   :         }
; 87   :         if (ISNONTERMINAL(type)) {

  000d4	81 ff 00 01 00
	00		 cmp	 edi, 256		; 00000100H
  000da	0f 8c 47 01 00
	00		 jl	 $LN20@fixstate

; 88   :             dfa *d1 = PyGrammar_FindDFA(g, type);

  000e0	8b d7		 mov	 edx, edi
  000e2	49 8b cd	 mov	 rcx, r13
  000e5	e8 00 00 00 00	 call	 PyGrammar_FindDFA

; 89   :             int ibit;
; 90   :             if (type - NT_OFFSET >= (1 << 7)) {

  000ea	44 8d b7 00 ff
	ff ff		 lea	 r14d, DWORD PTR [rdi-256]
  000f1	41 b9 80 00 00
	00		 mov	 r9d, 128		; 00000080H
  000f7	4c 8b c0	 mov	 r8, rax
  000fa	48 89 44 24 70	 mov	 QWORD PTR d1$1$[rsp], rax
  000ff	45 3b f1	 cmp	 r14d, r9d
  00102	7c 15		 jl	 SHORT $LN19@fixstate

; 91   :                 printf("XXX too high nonterminal number!\n");

  00104	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@MJKIBOFA@XXX?5too?5high?5nonterminal?5number?$CB@
  0010b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf

; 92   :                 continue;

  00111	41 b9 80 00 00
	00		 mov	 r9d, 128		; 00000080H
  00117	eb 76		 jmp	 SHORT $LN48@fixstate
$LN19@fixstate:

; 93   :             }
; 94   :             for (ibit = 0; ibit < g->g_ll.ll_nlabels; ibit++) {

  00119	8b dd		 mov	 ebx, ebp
  0011b	41 39 5d 10	 cmp	 DWORD PTR [r13+16], ebx
  0011f	7e 66		 jle	 SHORT $LN45@fixstate
  00121	48 8b bc 24 80
	00 00 00	 mov	 rdi, QWORD PTR accel$1$[rsp]
  00129	0f 1f 80 00 00
	00 00		 npad	 7
$LL18@fixstate:

; 95   :                 if (testbit(d1->d_first, ibit)) {

  00130	48 63 cb	 movsxd	 rcx, ebx
  00133	0f b6 c1	 movzx	 eax, cl
  00136	48 c1 e9 03	 shr	 rcx, 3
  0013a	24 07		 and	 al, 7
  0013c	0f b6 d0	 movzx	 edx, al
  0013f	49 8b 40 20	 mov	 rax, QWORD PTR [r8+32]
  00143	0f be 0c 01	 movsx	 ecx, BYTE PTR [rcx+rax]
  00147	0f a3 d1	 bt	 ecx, edx
  0014a	73 2f		 jae	 SHORT $LN17@fixstate

; 96   :                     if (accel[ibit] != -1)

  0014c	83 3f ff	 cmp	 DWORD PTR [rdi], -1
  0014f	74 18		 je	 SHORT $LN14@fixstate

; 97   :                         printf("XXX ambiguity!\n");

  00151	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@NBNHCIHI@XXX?5ambiguity?$CB?6?$AA@
  00158	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf
  0015e	4c 8b 44 24 70	 mov	 r8, QWORD PTR d1$1$[rsp]
  00163	41 b9 80 00 00
	00		 mov	 r9d, 128		; 00000080H
$LN14@fixstate:

; 98   :                     accel[ibit] = a->a_arrow | (1 << 7) |
; 99   :                         ((type - NT_OFFSET) << 8);

  00169	41 0f bf 47 02	 movsx	 eax, WORD PTR [r15+2]
  0016e	41 8b ce	 mov	 ecx, r14d
  00171	c1 e1 08	 shl	 ecx, 8
  00174	0b c8		 or	 ecx, eax
  00176	41 0b c9	 or	 ecx, r9d
  00179	89 0f		 mov	 DWORD PTR [rdi], ecx
$LN17@fixstate:

; 93   :             }
; 94   :             for (ibit = 0; ibit < g->g_ll.ll_nlabels; ibit++) {

  0017b	ff c3		 inc	 ebx
  0017d	48 83 c7 04	 add	 rdi, 4
  00181	41 3b 5d 10	 cmp	 ebx, DWORD PTR [r13+16]
  00185	7c a9		 jl	 SHORT $LL18@fixstate
$LN45@fixstate:

; 71   :     accel = (int *) PyObject_MALLOC(nl * sizeof(int));

  00187	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR accel$1$[rsp]
$LN48@fixstate:
  0018f	4c 8b 74 24 78	 mov	 r14, QWORD PTR s$[rsp]
$LN23@fixstate:

; 78   :     a = s->s_arc;
; 79   :     for (k = s->s_narcs; --k >= 0; a++) {

  00194	49 83 c7 04	 add	 r15, 4
  00198	ff ce		 dec	 esi
  0019a	0f 89 00 ff ff
	ff		 jns	 $LL24@fixstate
  001a0	49 8b f4	 mov	 rsi, r12
$LN34@fixstate:
  001a3	4c 8b 7c 24 28	 mov	 r15, QWORD PTR [rsp+40]

; 107  :     }
; 108  :     while (nl > 0 && accel[nl-1] == -1)

  001a8	48 85 f6	 test	 rsi, rsi
  001ab	7e 19		 jle	 SHORT $LN43@fixstate
  001ad	48 8d 44 b3 fc	 lea	 rax, QWORD PTR [rbx+rsi*4-4]
$LL9@fixstate:
  001b2	83 38 ff	 cmp	 DWORD PTR [rax], -1
  001b5	75 0f		 jne	 SHORT $LN43@fixstate

; 109  :         nl--;

  001b7	48 ff ce	 dec	 rsi
  001ba	41 ff cc	 dec	 r12d
  001bd	48 83 e8 04	 sub	 rax, 4
  001c1	48 85 f6	 test	 rsi, rsi
  001c4	7f ec		 jg	 SHORT $LL9@fixstate
$LN43@fixstate:

; 110  :     for (k = 0; k < nl && accel[k] == -1;)

  001c6	48 8b c5	 mov	 rax, rbp
  001c9	49 63 fc	 movsxd	 rdi, r12d
  001cc	45 85 e4	 test	 r12d, r12d
  001cf	7e 10		 jle	 SHORT $LN44@fixstate
$LL7@fixstate:
  001d1	83 3c 83 ff	 cmp	 DWORD PTR [rbx+rax*4], -1
  001d5	75 0a		 jne	 SHORT $LN44@fixstate

; 111  :         k++;

  001d7	48 ff c0	 inc	 rax
  001da	ff c5		 inc	 ebp
  001dc	48 3b c7	 cmp	 rax, rdi
  001df	7c f0		 jl	 SHORT $LL7@fixstate
$LN44@fixstate:

; 112  :     if (k < nl) {

  001e1	41 3b ec	 cmp	 ebp, r12d
  001e4	0f 8d 9c 00 00
	00		 jge	 $LN1@fixstate

; 113  :         int i;
; 114  :         s->s_accel = (int *) PyObject_MALLOC((nl-k) * sizeof(int));

  001ea	41 8b c4	 mov	 eax, r12d
  001ed	2b c5		 sub	 eax, ebp
  001ef	48 63 c8	 movsxd	 rcx, eax
  001f2	48 c1 e1 02	 shl	 rcx, 2
  001f6	e8 00 00 00 00	 call	 PyObject_Malloc
  001fb	49 89 46 18	 mov	 QWORD PTR [r14+24], rax

; 115  :         if (s->s_accel == NULL) {

  001ff	48 85 c0	 test	 rax, rax
  00202	75 4c		 jne	 SHORT $LN4@fixstate

; 116  :             fprintf(stderr, "no mem to add parser accelerators\n");

  00204	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0020a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@JMEPLMEJ@no?5mem?5to?5add?5parser?5accelerator@
  00211	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  00215	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 117  :             exit(1);

  0021b	b9 01 00 00 00	 mov	 ecx, 1
  00220	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
  00226	cc		 int	 3
$LN20@fixstate:

; 100  :                 }
; 101  :             }
; 102  :         }
; 103  :         else if (lbl == EMPTY)

  00227	85 d2		 test	 edx, edx
  00229	75 0d		 jne	 SHORT $LN49@fixstate

; 104  :             s->s_accept = 1;

  0022b	41 c7 46 20 01
	00 00 00	 mov	 DWORD PTR [r14+32], 1
  00233	e9 5c ff ff ff	 jmp	 $LN23@fixstate
$LN49@fixstate:

; 105  :         else if (lbl >= 0 && lbl < nl)

  00238	0f 88 56 ff ff
	ff		 js	 $LN23@fixstate
  0023e	41 3b d4	 cmp	 edx, r12d
  00241	0f 8d 4d ff ff
	ff		 jge	 $LN23@fixstate

; 106  :             accel[lbl] = a->a_arrow;

  00247	98		 cwde
  00248	89 04 93	 mov	 DWORD PTR [rbx+rdx*4], eax
  0024b	e9 44 ff ff ff	 jmp	 $LN23@fixstate
$LN4@fixstate:

; 118  :         }
; 119  :         s->s_lower = k;
; 120  :         s->s_upper = nl;
; 121  :         for (i = 0; k < nl; i++, k++)

  00250	48 63 c5	 movsxd	 rax, ebp
  00253	41 89 6e 10	 mov	 DWORD PTR [r14+16], ebp
  00257	45 89 66 14	 mov	 DWORD PTR [r14+20], r12d
  0025b	48 3b c7	 cmp	 rax, rdi
  0025e	7d 26		 jge	 SHORT $LN1@fixstate
  00260	48 8b d0	 mov	 rdx, rax
  00263	4c 8d 04 83	 lea	 r8, QWORD PTR [rbx+rax*4]
  00267	48 2b d0	 sub	 rdx, rax
  0026a	48 c1 e2 02	 shl	 rdx, 2
  0026e	48 2b f8	 sub	 rdi, rax
$LL3@fixstate:

; 122  :             s->s_accel[i] = accel[k];

  00271	41 8b 04 10	 mov	 eax, DWORD PTR [r8+rdx]
  00275	49 8b 4e 18	 mov	 rcx, QWORD PTR [r14+24]
  00279	48 83 c2 04	 add	 rdx, 4
  0027d	48 ff cf	 dec	 rdi
  00280	89 44 0a fc	 mov	 DWORD PTR [rdx+rcx-4], eax
  00284	75 eb		 jne	 SHORT $LL3@fixstate
$LN1@fixstate:

; 123  :     }
; 124  :     PyObject_FREE(accel);

  00286	48 8b cb	 mov	 rcx, rbx
  00289	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 125  : }

  0028e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00292	41 5e		 pop	 r14
  00294	41 5d		 pop	 r13
  00296	41 5c		 pop	 r12
  00298	5e		 pop	 rsi
  00299	5d		 pop	 rbp
  0029a	5b		 pop	 rbx
  0029b	e9 00 00 00 00	 jmp	 PyObject_Free
$LN47@fixstate:
fixstate ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fixdfa DD imagerel fixdfa
	DD	imagerel fixdfa+80
	DD	imagerel $unwind$fixdfa
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fixdfa DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT fixdfa
_TEXT	SEGMENT
g$ = 48
d$ = 56
fixdfa	PROC						; COMDAT

; 55   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 56   :     state *s;
; 57   :     int j;
; 58   :     s = d->d_state;

  00014	48 8b 5a 18	 mov	 rbx, QWORD PTR [rdx+24]

; 59   :     for (j = 0; j < d->d_nstates; j++, s++)

  00018	33 ff		 xor	 edi, edi
  0001a	48 8b f2	 mov	 rsi, rdx
  0001d	48 8b e9	 mov	 rbp, rcx
  00020	39 7a 14	 cmp	 DWORD PTR [rdx+20], edi
  00023	7e 16		 jle	 SHORT $LN1@fixdfa
$LL3@fixdfa:

; 60   :         fixstate(g, s);

  00025	48 8b d3	 mov	 rdx, rbx
  00028	48 8b cd	 mov	 rcx, rbp
  0002b	e8 00 00 00 00	 call	 fixstate
  00030	ff c7		 inc	 edi
  00032	48 83 c3 28	 add	 rbx, 40			; 00000028H
  00036	3b 7e 14	 cmp	 edi, DWORD PTR [rsi+20]
  00039	7c ea		 jl	 SHORT $LL3@fixdfa
$LN1@fixdfa:

; 61   : }

  0003b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00040	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00045	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0004a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004e	5f		 pop	 rdi
  0004f	c3		 ret	 0
fixdfa	ENDP
_TEXT	ENDS
PUBLIC	PyGrammar_AddAccelerators
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyGrammar_AddAccelerators DD imagerel $LN9
	DD	imagerel $LN9+97
	DD	imagerel $unwind$PyGrammar_AddAccelerators
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyGrammar_AddAccelerators DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyGrammar_AddAccelerators
_TEXT	SEGMENT
g$ = 48
PyGrammar_AddAccelerators PROC				; COMDAT

; 25   : {

$LN9:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 26   :     dfa *d;
; 27   :     int i;
; 28   :     d = g->g_dfa;
; 29   :     for (i = g->g_ndfas; --i >= 0; d++)

  0000f	8b 31		 mov	 esi, DWORD PTR [rcx]
  00011	48 8b 79 08	 mov	 rdi, QWORD PTR [rcx+8]
  00015	48 8b d9	 mov	 rbx, rcx
  00018	ff ce		 dec	 esi
  0001a	78 2e		 js	 SHORT $LN8@PyGrammar_@2
  0001c	0f 1f 40 00	 npad	 4
$LL3@PyGrammar_@2:

; 30   :         fixdfa(g, d);

  00020	48 8b d7	 mov	 rdx, rdi
  00023	48 8b cb	 mov	 rcx, rbx
  00026	e8 00 00 00 00	 call	 fixdfa
  0002b	48 83 c7 28	 add	 rdi, 40			; 00000028H
  0002f	ff ce		 dec	 esi
  00031	79 ed		 jns	 SHORT $LL3@PyGrammar_@2

; 31   :     g->g_accel = 1;

  00033	c7 43 24 01 00
	00 00		 mov	 DWORD PTR [rbx+36], 1

; 32   : }

  0003a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003f	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00044	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00048	5f		 pop	 rdi
  00049	c3		 ret	 0
$LN8@PyGrammar_@2:
  0004a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004f	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00054	c7 41 24 01 00
	00 00		 mov	 DWORD PTR [rcx+36], 1
  0005b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005f	5f		 pop	 rdi
  00060	c3		 ret	 0
PyGrammar_AddAccelerators ENDP
_TEXT	ENDS
END
