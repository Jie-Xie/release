; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0O@CKECCIPK@TextIOWrapper?$AA@		; `string'
PUBLIC	??_C@_05LBOHBHFK@close?$AA@			; `string'
PUBLIC	??_C@_04PMOCAHAA@open?$AA@			; `string'
PUBLIC	??_C@_09GPFEECNC@traceback?$AA@			; `string'
PUBLIC	??_C@_09PEHPNNHP@tb_lineno?$AA@			; `string'
PUBLIC	??_C@_08LGMDMJNM@tb_lasti?$AA@			; `string'
PUBLIC	??_C@_08HFEKEPAP@tb_frame?$AA@			; `string'
PUBLIC	??_C@_07GIHNBDBF@tb_next?$AA@			; `string'
PUBLIC	??_C@_07FPPEEAND@__dir__?$AA@			; `string'
PUBLIC	PyTraceBack_Type
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
;	COMDAT ??_C@_0O@CKECCIPK@TextIOWrapper?$AA@
CONST	SEGMENT
??_C@_0O@CKECCIPK@TextIOWrapper?$AA@ DB 'TextIOWrapper', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05LBOHBHFK@close?$AA@
CONST	SEGMENT
??_C@_05LBOHBHFK@close?$AA@ DB 'close', 00H		; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId_TextIOWrapper@?1??_Py_DisplaySourceLine@@9@9 DQ 0000000000000000H ; `_Py_DisplaySourceLine'::`2'::PyId_TextIOWrapper
	DQ	FLAT:??_C@_0O@CKECCIPK@TextIOWrapper?$AA@
	DQ	0000000000000000H
?PyId_open@?1??_Py_DisplaySourceLine@@9@9 DQ 0000000000000000H ; `_Py_DisplaySourceLine'::`2'::PyId_open
	DQ	FLAT:??_C@_04PMOCAHAA@open?$AA@
	DQ	0000000000000000H
?PyId_close@?1??_Py_DisplaySourceLine@@9@9 DQ 0000000000000000H ; `_Py_DisplaySourceLine'::`2'::PyId_close
	DQ	FLAT:??_C@_05LBOHBHFK@close?$AA@
	DQ	0000000000000000H
?PyId_open@?1??_Py_FindSourceFile@@9@9 DQ 0000000000000000H ; `_Py_FindSourceFile'::`2'::PyId_open
	DQ	FLAT:??_C@_04PMOCAHAA@open?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_04PMOCAHAA@open?$AA@
CONST	SEGMENT
??_C@_04PMOCAHAA@open?$AA@ DB 'open', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09GPFEECNC@traceback?$AA@
CONST	SEGMENT
??_C@_09GPFEECNC@traceback?$AA@ DB 'traceback', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PEHPNNHP@tb_lineno?$AA@
CONST	SEGMENT
??_C@_09PEHPNNHP@tb_lineno?$AA@ DB 'tb_lineno', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08LGMDMJNM@tb_lasti?$AA@
CONST	SEGMENT
??_C@_08LGMDMJNM@tb_lasti?$AA@ DB 'tb_lasti', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HFEKEPAP@tb_frame?$AA@
CONST	SEGMENT
??_C@_08HFEKEPAP@tb_frame?$AA@ DB 'tb_frame', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07GIHNBDBF@tb_next?$AA@
CONST	SEGMENT
??_C@_07GIHNBDBF@tb_next?$AA@ DB 'tb_next', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
tb_methods DQ	FLAT:??_C@_07FPPEEAND@__dir__?$AA@
	DQ	FLAT:tb_dir
	DD	04H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	0000000000000000H
tb_memberlist DQ FLAT:??_C@_07GIHNBDBF@tb_next?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08HFEKEPAP@tb_frame?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000068H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08LGMDMJNM@tb_lasti?$AA@
	DD	01H
	ORG $+4
	DQ	0000000000000070H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_09PEHPNNHP@tb_lineno?$AA@
	DD	01H
	ORG $+4
	DQ	0000000000000074H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
	ORG $+8
PyTraceBack_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_09GPFEECNC@traceback?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:tb_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:tb_traverse
	DQ	FLAT:tb_clear
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:tb_methods
	DQ	FLAT:tb_memberlist
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+120
_DATA	ENDS
;	COMDAT ??_C@_07FPPEEAND@__dir__?$AA@
CONST	SEGMENT
??_C@_07FPPEEAND@__dir__?$AA@ DB '__dir__', 00H		; `string'
CONST	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_06FAKNICNO@?$FLssss?$FN?$AA@		; `string'
EXTRN	Py_BuildValue:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\traceback.c
pdata	SEGMENT
$pdata$tb_dir DD imagerel tb_dir
	DD	imagerel tb_dir+54
	DD	imagerel $unwind$tb_dir
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tb_dir DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_06FAKNICNO@?$FLssss?$FN?$AA@
CONST	SEGMENT
??_C@_06FAKNICNO@?$FLssss?$FN?$AA@ DB '[ssss]', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT tb_dir
_TEXT	SEGMENT
self$ = 64
tb_dir	PROC						; COMDAT

; 26   : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 27   :     return Py_BuildValue("[ssss]", "tb_frame", "tb_next",
; 28   :                                    "tb_lasti", "tb_lineno");

  00004	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_09PEHPNNHP@tb_lineno?$AA@
  0000b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_08LGMDMJNM@tb_lasti?$AA@
  00012	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07GIHNBDBF@tb_next?$AA@
  00019	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08HFEKEPAP@tb_frame?$AA@
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FAKNICNO@?$FLssss?$FN?$AA@
  00027	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002c	e8 00 00 00 00	 call	 Py_BuildValue

; 29   : }

  00031	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00035	c3		 ret	 0
tb_dir	ENDP
_TEXT	ENDS
EXTRN	_PyTrash_thread_deposit_object:PROC
EXTRN	_PyTrash_thread_destroy_chain:PROC
EXTRN	PyObject_GC_Del:PROC
EXTRN	_PyThreadState_Current:QWORD
EXTRN	_PyParallel_GetThreadState:PROC
EXTRN	PyObject_GC_UnTrack:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$tb_dealloc DD imagerel tb_dealloc
	DD	imagerel tb_dealloc+61
	DD	imagerel $unwind$tb_dealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$tb_dealloc DD imagerel tb_dealloc+61
	DD	imagerel tb_dealloc+321
	DD	imagerel $chain$0$tb_dealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$tb_dealloc DD imagerel tb_dealloc+321
	DD	imagerel tb_dealloc+364
	DD	imagerel $chain$1$tb_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$tb_dealloc DD 021H
	DD	imagerel tb_dealloc
	DD	imagerel tb_dealloc+61
	DD	imagerel $unwind$tb_dealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$tb_dealloc DD 020521H
	DD	083405H
	DD	imagerel tb_dealloc
	DD	imagerel tb_dealloc+61
	DD	imagerel $unwind$tb_dealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tb_dealloc DD 040a01H
	DD	09640aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\traceback.c
xdata	ENDS
;	COMDAT tb_dealloc
_TEXT	SEGMENT
tb$ = 64
tb_dealloc PROC						; COMDAT

; 46   : {

  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f1	 mov	 rsi, rcx

; 47   :     PyObject_GC_UnTrack(tb);

  0000d	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 48   :     Py_TRASHCAN_SAFE_BEGIN(tb)

  00012	e8 00 00 00 00	 call	 _Py_PXCTX
  00017	85 c0		 test	 eax, eax
  00019	74 0a		 je	 SHORT $LN17@tb_dealloc
  0001b	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00020	48 8b f8	 mov	 rdi, rax
  00023	eb 07		 jmp	 SHORT $LN18@tb_dealloc
$LN17@tb_dealloc:
  00025	48 8b 3d 00 00
	00 00		 mov	 rdi, QWORD PTR _PyThreadState_Current
$LN18@tb_dealloc:
  0002c	8b 87 94 00 00
	00		 mov	 eax, DWORD PTR [rdi+148]
  00032	83 f8 32	 cmp	 eax, 50			; 00000032H
  00035	0f 8d 1e 01 00
	00		 jge	 $LN11@tb_dealloc
  0003b	ff c0		 inc	 eax
  0003d	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00042	89 87 94 00 00
	00		 mov	 DWORD PTR [rdi+148], eax

; 49   :     Py_XDECREF(tb->tb_next);

  00048	48 8b 5e 60	 mov	 rbx, QWORD PTR [rsi+96]
  0004c	48 85 db	 test	 rbx, rbx
  0004f	74 65		 je	 SHORT $LN9@tb_dealloc
  00051	e8 00 00 00 00	 call	 _Py_PXCTX
  00056	85 c0		 test	 eax, eax
  00058	75 5c		 jne	 SHORT $LN9@tb_dealloc
  0005a	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0005e	a8 20		 test	 al, 32			; 00000020H
  00060	75 4c		 jne	 SHORT $LN23@tb_dealloc
  00062	84 c0		 test	 al, al
  00064	78 48		 js	 SHORT $LN23@tb_dealloc
  00066	a8 02		 test	 al, 2
  00068	75 4c		 jne	 SHORT $LN9@tb_dealloc
  0006a	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0006e	75 46		 jne	 SHORT $LN9@tb_dealloc
  00070	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00077	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0007e	4c 8b cb	 mov	 r9, rbx
  00081	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00087	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0008f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00094	48 8b cb	 mov	 rcx, rbx
  00097	85 c0		 test	 eax, eax
  00099	74 07		 je	 SHORT $LN28@tb_dealloc
  0009b	e8 00 00 00 00	 call	 _Px_Dealloc
  000a0	eb 14		 jmp	 SHORT $LN9@tb_dealloc
$LN28@tb_dealloc:
  000a2	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000a6	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000ac	eb 08		 jmp	 SHORT $LN9@tb_dealloc
$LN23@tb_dealloc:
  000ae	48 8b cb	 mov	 rcx, rbx
  000b1	e8 00 00 00 00	 call	 Px_DecRef
$LN9@tb_dealloc:

; 50   :     Py_XDECREF(tb->tb_frame);

  000b6	48 8b 5e 68	 mov	 rbx, QWORD PTR [rsi+104]
  000ba	48 85 db	 test	 rbx, rbx
  000bd	74 65		 je	 SHORT $LN5@tb_dealloc
  000bf	e8 00 00 00 00	 call	 _Py_PXCTX
  000c4	85 c0		 test	 eax, eax
  000c6	75 5c		 jne	 SHORT $LN5@tb_dealloc
  000c8	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000cc	a8 20		 test	 al, 32			; 00000020H
  000ce	75 4c		 jne	 SHORT $LN34@tb_dealloc
  000d0	84 c0		 test	 al, al
  000d2	78 48		 js	 SHORT $LN34@tb_dealloc
  000d4	a8 02		 test	 al, 2
  000d6	75 4c		 jne	 SHORT $LN5@tb_dealloc
  000d8	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000dc	75 46		 jne	 SHORT $LN5@tb_dealloc
  000de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000ec	4c 8b cb	 mov	 r9, rbx
  000ef	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000f5	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000fd	e8 00 00 00 00	 call	 _PyParallel_Guard
  00102	48 8b cb	 mov	 rcx, rbx
  00105	85 c0		 test	 eax, eax
  00107	74 07		 je	 SHORT $LN39@tb_dealloc
  00109	e8 00 00 00 00	 call	 _Px_Dealloc
  0010e	eb 14		 jmp	 SHORT $LN5@tb_dealloc
$LN39@tb_dealloc:
  00110	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00114	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0011a	eb 08		 jmp	 SHORT $LN5@tb_dealloc
$LN34@tb_dealloc:
  0011c	48 8b cb	 mov	 rcx, rbx
  0011f	e8 00 00 00 00	 call	 Px_DecRef
$LN5@tb_dealloc:

; 51   :     PyObject_GC_Del(tb);

  00124	48 8b ce	 mov	 rcx, rsi
  00127	e8 00 00 00 00	 call	 PyObject_GC_Del

; 52   :     Py_TRASHCAN_SAFE_END(tb)

  0012c	ff 8f 94 00 00
	00		 dec	 DWORD PTR [rdi+148]
  00132	48 83 bf 98 00
	00 00 00	 cmp	 QWORD PTR [rdi+152], 0
  0013a	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0013f	74 20		 je	 SHORT $LN13@tb_dealloc
  00141	83 bf 94 00 00
	00 00		 cmp	 DWORD PTR [rdi+148], 0
  00148	7f 17		 jg	 SHORT $LN13@tb_dealloc

; 53   : }

  0014a	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0014f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00153	5f		 pop	 rdi
  00154	e9 00 00 00 00	 jmp	 _PyTrash_thread_destroy_chain
$LN11@tb_dealloc:

; 52   :     Py_TRASHCAN_SAFE_END(tb)

  00159	48 8b ce	 mov	 rcx, rsi
  0015c	e8 00 00 00 00	 call	 _PyTrash_thread_deposit_object
$LN13@tb_dealloc:

; 53   : }

  00161	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00166	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0016a	5f		 pop	 rdi
  0016b	c3		 ret	 0
tb_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@IOJIAFFP@tb_traverse?$AA@		; `string'
PUBLIC	??_C@_0BG@HFAOEPCJ@?4?4?2Python?2traceback?4c?$AA@ ; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$tb_traverse DD imagerel tb_traverse
	DD	imagerel tb_traverse+148
	DD	imagerel $unwind$tb_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tb_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0M@IOJIAFFP@tb_traverse?$AA@
CONST	SEGMENT
??_C@_0M@IOJIAFFP@tb_traverse?$AA@ DB 'tb_traverse', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HFAOEPCJ@?4?4?2Python?2traceback?4c?$AA@
CONST	SEGMENT
??_C@_0BG@HFAOEPCJ@?4?4?2Python?2traceback?4c?$AA@ DB '..\Python\tracebac'
	DB	'k.c', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT tb_traverse
_TEXT	SEGMENT
tb$ = 48
visit$ = 56
arg$ = 64
tb_traverse PROC					; COMDAT

; 57   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 58   :     Py_VISIT(tb->tb_next);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1a		 je	 SHORT $LN9@tb_travers
  00021	45 33 c9	 xor	 r9d, r9d
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@HFAOEPCJ@?4?4?2Python?2traceback?4c?$AA@
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@IOJIAFFP@tb_traverse?$AA@
  00032	45 8d 41 3a	 lea	 r8d, QWORD PTR [r9+58]
  00036	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@tb_travers:
  0003b	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  0003f	48 85 c9	 test	 rcx, rcx
  00042	74 09		 je	 SHORT $LN11@tb_travers
  00044	48 8b d7	 mov	 rdx, rdi
  00047	ff d6		 call	 rsi
  00049	85 c0		 test	 eax, eax
  0004b	75 37		 jne	 SHORT $LN13@tb_travers
$LN11@tb_travers:

; 59   :     Py_VISIT(tb->tb_frame);

  0004d	e8 00 00 00 00	 call	 _Py_PXCTX
  00052	85 c0		 test	 eax, eax
  00054	74 1a		 je	 SHORT $LN3@tb_travers
  00056	45 33 c9	 xor	 r9d, r9d
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@HFAOEPCJ@?4?4?2Python?2traceback?4c?$AA@
  00060	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@IOJIAFFP@tb_traverse?$AA@
  00067	45 8d 41 3b	 lea	 r8d, QWORD PTR [r9+59]
  0006b	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@tb_travers:
  00070	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00074	48 85 c9	 test	 rcx, rcx
  00077	74 09		 je	 SHORT $LN5@tb_travers
  00079	48 8b d7	 mov	 rdx, rdi
  0007c	ff d6		 call	 rsi
  0007e	85 c0		 test	 eax, eax
  00080	75 02		 jne	 SHORT $LN13@tb_travers
$LN5@tb_travers:

; 60   :     return 0;

  00082	33 c0		 xor	 eax, eax
$LN13@tb_travers:

; 61   : }

  00084	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00089	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0008e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00092	5f		 pop	 rdi
  00093	c3		 ret	 0
tb_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_08HJKMBNPK@tb_clear?$AA@			; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$tb_clear DD imagerel tb_clear
	DD	imagerel tb_clear+371
	DD	imagerel $unwind$tb_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tb_clear DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_08HJKMBNPK@tb_clear?$AA@
CONST	SEGMENT
??_C@_08HJKMBNPK@tb_clear?$AA@ DB 'tb_clear', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\traceback.c
CONST	ENDS
;	COMDAT tb_clear
_TEXT	SEGMENT
tb$ = 64
tb_clear PROC						; COMDAT

; 65   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 66   :     Py_CLEAR(tb->tb_next);

  0000a	4c 8b 49 60	 mov	 r9, QWORD PTR [rcx+96]
  0000e	48 8b f9	 mov	 rdi, rcx
  00011	4d 85 c9	 test	 r9, r9
  00014	0f 84 96 00 00
	00		 je	 $LN7@tb_clear
  0001a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@HFAOEPCJ@?4?4?2Python?2traceback?4c?$AA@
  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08HJKMBNPK@tb_clear?$AA@
  00028	41 b8 42 00 00
	00		 mov	 r8d, 66			; 00000042H
  0002e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00036	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003b	85 c0		 test	 eax, eax
  0003d	75 71		 jne	 SHORT $LN7@tb_clear
  0003f	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  00043	48 c7 47 60 00
	00 00 00	 mov	 QWORD PTR [rdi+96], 0
  0004b	e8 00 00 00 00	 call	 _Py_PXCTX
  00050	85 c0		 test	 eax, eax
  00052	75 5c		 jne	 SHORT $LN7@tb_clear
  00054	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00058	a8 20		 test	 al, 32			; 00000020H
  0005a	75 4c		 jne	 SHORT $LN15@tb_clear
  0005c	84 c0		 test	 al, al
  0005e	78 48		 js	 SHORT $LN15@tb_clear
  00060	a8 02		 test	 al, 2
  00062	75 4c		 jne	 SHORT $LN7@tb_clear
  00064	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00068	75 46		 jne	 SHORT $LN7@tb_clear
  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00078	4c 8b cb	 mov	 r9, rbx
  0007b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00081	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00089	e8 00 00 00 00	 call	 _PyParallel_Guard
  0008e	48 8b cb	 mov	 rcx, rbx
  00091	85 c0		 test	 eax, eax
  00093	74 07		 je	 SHORT $LN20@tb_clear
  00095	e8 00 00 00 00	 call	 _Px_Dealloc
  0009a	eb 14		 jmp	 SHORT $LN7@tb_clear
$LN20@tb_clear:
  0009c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000a0	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000a6	eb 08		 jmp	 SHORT $LN7@tb_clear
$LN15@tb_clear:
  000a8	48 8b cb	 mov	 rcx, rbx
  000ab	e8 00 00 00 00	 call	 Px_DecRef
$LN7@tb_clear:

; 67   :     Py_CLEAR(tb->tb_frame);

  000b0	4c 8b 4f 68	 mov	 r9, QWORD PTR [rdi+104]
  000b4	4d 85 c9	 test	 r9, r9
  000b7	0f 84 ab 00 00
	00		 je	 $LN3@tb_clear
  000bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@HFAOEPCJ@?4?4?2Python?2traceback?4c?$AA@
  000c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08HJKMBNPK@tb_clear?$AA@
  000cb	41 b8 43 00 00
	00		 mov	 r8d, 67			; 00000043H
  000d1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d9	e8 00 00 00 00	 call	 _PyParallel_Guard
  000de	85 c0		 test	 eax, eax
  000e0	0f 85 82 00 00
	00		 jne	 $LN3@tb_clear
  000e6	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  000ea	48 c7 47 68 00
	00 00 00	 mov	 QWORD PTR [rdi+104], 0
  000f2	e8 00 00 00 00	 call	 _Py_PXCTX
  000f7	85 c0		 test	 eax, eax
  000f9	75 6d		 jne	 SHORT $LN3@tb_clear
  000fb	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000ff	a8 20		 test	 al, 32			; 00000020H
  00101	75 5d		 jne	 SHORT $LN26@tb_clear
  00103	84 c0		 test	 al, al
  00105	78 59		 js	 SHORT $LN26@tb_clear
  00107	a8 02		 test	 al, 2
  00109	75 5d		 jne	 SHORT $LN3@tb_clear
  0010b	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0010f	75 57		 jne	 SHORT $LN3@tb_clear
  00111	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00118	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0011f	4c 8b cb	 mov	 r9, rbx
  00122	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00128	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00130	e8 00 00 00 00	 call	 _PyParallel_Guard
  00135	48 8b cb	 mov	 rcx, rbx
  00138	85 c0		 test	 eax, eax
  0013a	74 0f		 je	 SHORT $LN31@tb_clear

; 68   : }

  0013c	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00141	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00145	5f		 pop	 rdi
  00146	e9 00 00 00 00	 jmp	 _Px_Dealloc

; 67   :     Py_CLEAR(tb->tb_frame);

$LN31@tb_clear:
  0014b	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 68   : }

  0014f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00154	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00158	5f		 pop	 rdi
  00159	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]

; 67   :     Py_CLEAR(tb->tb_frame);

$LN26@tb_clear:
  00160	48 8b cb	 mov	 rcx, rbx
  00163	e8 00 00 00 00	 call	 Px_DecRef
$LN3@tb_clear:

; 68   : }

  00168	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0016d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00171	5f		 pop	 rdi
  00172	c3		 ret	 0
tb_clear ENDP
_TEXT	ENDS
EXTRN	_PyErr_BadInternalCall:PROC
EXTRN	PyObject_GC_Track:PROC
EXTRN	PyFrame_GetLineNumber:PROC
EXTRN	_PyObject_GC_New:PROC
EXTRN	_PxObject_New:PROC
EXTRN	PyFrame_Type:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$newtracebackobject DD imagerel newtracebackobject
	DD	imagerel newtracebackobject+318
	DD	imagerel $unwind$newtracebackobject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$newtracebackobject DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\traceback.c
xdata	ENDS
;	COMDAT newtracebackobject
_TEXT	SEGMENT
next$ = 64
frame$ = 72
newtracebackobject PROC					; COMDAT

; 107  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b da	 mov	 rbx, rdx
  00012	48 8b f1	 mov	 rsi, rcx

; 108  :     PyTracebackObject *tb;
; 109  :     if ((next != NULL && !PyTraceBack_Check(next)) ||
; 110  :                     frame == NULL || !PyFrame_Check(frame)) {

  00015	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:PyTraceBack_Type
  0001c	48 85 c9	 test	 rcx, rcx
  0001f	74 0a		 je	 SHORT $LN10@newtraceba
  00021	48 39 79 58	 cmp	 QWORD PTR [rcx+88], rdi
  00025	0f 85 f0 00 00
	00		 jne	 $LN11@newtraceba
$LN10@newtraceba:
  0002b	48 85 d2	 test	 rdx, rdx
  0002e	0f 84 e7 00 00
	00		 je	 $LN11@newtraceba
  00034	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFrame_Type
  0003b	48 39 42 58	 cmp	 QWORD PTR [rdx+88], rax
  0003f	0f 85 d6 00 00
	00		 jne	 $LN11@newtraceba

; 112  :         return NULL;
; 113  :     }
; 114  :     tb = PyObject_GC_New(PyTracebackObject, &PyTraceBack_Type);

  00045	e8 00 00 00 00	 call	 _Py_PXCTX
  0004a	48 8b cf	 mov	 rcx, rdi
  0004d	85 c0		 test	 eax, eax
  0004f	74 07		 je	 SHORT $LN15@newtraceba
  00051	e8 00 00 00 00	 call	 _PxObject_New
  00056	eb 05		 jmp	 SHORT $LN25@newtraceba
$LN15@newtraceba:
  00058	e8 00 00 00 00	 call	 _PyObject_GC_New
$LN25@newtraceba:
  0005d	48 8b f8	 mov	 rdi, rax

; 115  :     if (tb != NULL) {

  00060	48 85 c0	 test	 rax, rax
  00063	0f 84 9f 00 00
	00		 je	 $LN9@newtraceba

; 116  :         Py_XINCREF(next);

  00069	48 85 f6	 test	 rsi, rsi
  0006c	74 3b		 je	 SHORT $LN7@newtraceba
  0006e	e8 00 00 00 00	 call	 _Py_PXCTX
  00073	85 c0		 test	 eax, eax
  00075	75 32		 jne	 SHORT $LN7@newtraceba
  00077	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0007e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00085	4c 8b ce	 mov	 r9, rsi
  00088	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0008e	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00096	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009b	85 c0		 test	 eax, eax
  0009d	75 06		 jne	 SHORT $LN17@newtraceba
  0009f	f6 46 20 20	 test	 BYTE PTR [rsi+32], 32	; 00000020H
  000a3	74 04		 je	 SHORT $LN7@newtraceba
$LN17@newtraceba:
  000a5	48 ff 46 50	 inc	 QWORD PTR [rsi+80]
$LN7@newtraceba:

; 117  :         tb->tb_next = next;

  000a9	48 89 77 60	 mov	 QWORD PTR [rdi+96], rsi

; 118  :         Py_XINCREF(frame);

  000ad	e8 00 00 00 00	 call	 _Py_PXCTX
  000b2	85 c0		 test	 eax, eax
  000b4	75 32		 jne	 SHORT $LN3@newtraceba
  000b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000c4	4c 8b cb	 mov	 r9, rbx
  000c7	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000cd	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000d5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000da	85 c0		 test	 eax, eax
  000dc	75 06		 jne	 SHORT $LN21@newtraceba
  000de	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000e2	74 04		 je	 SHORT $LN3@newtraceba
$LN21@newtraceba:
  000e4	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN3@newtraceba:

; 119  :         tb->tb_frame = frame;

  000e8	48 89 5f 68	 mov	 QWORD PTR [rdi+104], rbx

; 120  :         tb->tb_lasti = frame->f_lasti;

  000ec	8b 83 d0 00 00
	00		 mov	 eax, DWORD PTR [rbx+208]

; 121  :         tb->tb_lineno = PyFrame_GetLineNumber(frame);

  000f2	48 8b cb	 mov	 rcx, rbx
  000f5	89 47 70	 mov	 DWORD PTR [rdi+112], eax
  000f8	e8 00 00 00 00	 call	 PyFrame_GetLineNumber

; 122  :         PyObject_GC_Track(tb);

  000fd	48 8b cf	 mov	 rcx, rdi
  00100	89 47 74	 mov	 DWORD PTR [rdi+116], eax
  00103	e8 00 00 00 00	 call	 PyObject_GC_Track
$LN9@newtraceba:

; 123  :     }
; 124  :     return tb;

  00108	48 8b c7	 mov	 rax, rdi

; 125  : }

  0010b	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00110	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00115	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00119	5f		 pop	 rdi
  0011a	c3		 ret	 0
$LN11@newtraceba:

; 111  :         PyErr_BadInternalCall();

  0011b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@HFAOEPCJ@?4?4?2Python?2traceback?4c?$AA@
  00122	ba 6f 00 00 00	 mov	 edx, 111		; 0000006fH
  00127	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 125  : }

  0012c	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00131	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00136	33 c0		 xor	 eax, eax
  00138	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0013c	5f		 pop	 rdi
  0013d	c3		 ret	 0
newtracebackobject ENDP
_TEXT	ENDS
PUBLIC	PyTraceBack_Here
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyTraceBack_Here DD imagerel $LN21
	DD	imagerel $LN21+247
	DD	imagerel $unwind$PyTraceBack_Here
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyTraceBack_Here DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\traceback.c
xdata	ENDS
;	COMDAT PyTraceBack_Here
_TEXT	SEGMENT
frame$ = 64
PyTraceBack_Here PROC					; COMDAT

; 129  : {

$LN21:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b f1	 mov	 rsi, rcx

; 130  :     PyThreadState *tstate = PyThreadState_GET();

  00012	e8 00 00 00 00	 call	 _Py_PXCTX
  00017	85 c0		 test	 eax, eax
  00019	74 0a		 je	 SHORT $LN8@PyTraceBac
  0001b	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00020	48 8b f8	 mov	 rdi, rax
  00023	eb 07		 jmp	 SHORT $LN9@PyTraceBac
$LN8@PyTraceBac:
  00025	48 8b 3d 00 00
	00 00		 mov	 rdi, QWORD PTR _PyThreadState_Current
$LN9@PyTraceBac:

; 131  :     PyTracebackObject *oldtb = (PyTracebackObject *) tstate->curexc_traceback;

  0002c	48 8b 5f 58	 mov	 rbx, QWORD PTR [rdi+88]

; 132  :     PyTracebackObject *tb = newtracebackobject(oldtb, frame);

  00030	48 8b d6	 mov	 rdx, rsi
  00033	48 8b cb	 mov	 rcx, rbx
  00036	e8 00 00 00 00	 call	 newtracebackobject

; 133  :     if (tb == NULL)

  0003b	48 85 c0	 test	 rax, rax
  0003e	75 13		 jne	 SHORT $LN5@PyTraceBac

; 134  :         return -1;

  00040	83 c8 ff	 or	 eax, -1

; 138  : }

  00043	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00048	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0004d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00051	5f		 pop	 rdi
  00052	c3		 ret	 0
$LN5@PyTraceBac:

; 135  :     tstate->curexc_traceback = (PyObject *)tb;

  00053	48 89 47 58	 mov	 QWORD PTR [rdi+88], rax

; 136  :     Py_XDECREF(oldtb);

  00057	48 85 db	 test	 rbx, rbx
  0005a	0f 84 85 00 00
	00		 je	 $LN3@PyTraceBac
  00060	e8 00 00 00 00	 call	 _Py_PXCTX
  00065	85 c0		 test	 eax, eax
  00067	75 7c		 jne	 SHORT $LN3@PyTraceBac
  00069	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0006d	a8 20		 test	 al, 32			; 00000020H
  0006f	75 6c		 jne	 SHORT $LN14@PyTraceBac
  00071	84 c0		 test	 al, al
  00073	78 68		 js	 SHORT $LN14@PyTraceBac
  00075	a8 02		 test	 al, 2
  00077	75 6c		 jne	 SHORT $LN3@PyTraceBac
  00079	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0007d	75 66		 jne	 SHORT $LN3@PyTraceBac
  0007f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00086	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0008d	4c 8b cb	 mov	 r9, rbx
  00090	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00096	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0009e	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a3	48 8b cb	 mov	 rcx, rbx
  000a6	85 c0		 test	 eax, eax
  000a8	74 17		 je	 SHORT $LN19@PyTraceBac
  000aa	e8 00 00 00 00	 call	 _Px_Dealloc

; 137  :     return 0;

  000af	33 c0		 xor	 eax, eax

; 138  : }

  000b1	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000b6	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000bb	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000bf	5f		 pop	 rdi
  000c0	c3		 ret	 0

; 136  :     Py_XDECREF(oldtb);

$LN19@PyTraceBac:
  000c1	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000c5	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 137  :     return 0;

  000cb	33 c0		 xor	 eax, eax

; 138  : }

  000cd	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000d2	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000d7	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000db	5f		 pop	 rdi
  000dc	c3		 ret	 0

; 136  :     Py_XDECREF(oldtb);

$LN14@PyTraceBac:
  000dd	48 8b cb	 mov	 rcx, rbx
  000e0	e8 00 00 00 00	 call	 Px_DecRef
$LN3@PyTraceBac:

; 138  : }

  000e5	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000ea	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000ef	33 c0		 xor	 eax, eax
  000f1	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000f5	5f		 pop	 rdi
  000f6	c3		 ret	 0
PyTraceBack_Here ENDP
_TEXT	ENDS
PUBLIC	??_C@_02FCBLNKNB@ss?$AA@			; `string'
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_04LNEJFJGI@path?$AA@			; `string'
EXTRN	_PyObject_CallMethodId:PROC
EXTRN	PyList_GetItem:PROC
EXTRN	PyList_Size:PROC
EXTRN	PySys_GetObject:PROC
EXTRN	__imp_strrchr:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	PyUnicode_EncodeFSDefault:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_FindSourceFile DD imagerel _Py_FindSourceFile
	DD	imagerel _Py_FindSourceFile+559
	DD	imagerel $unwind$_Py_FindSourceFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_FindSourceFile DD 0f7a01H
	DD	08e47aH
	DD	0c5475H
	DD	010346dH
	DD	09d448H
	DD	0ac443H
	DD	0b7435H
	DD	0f00dc211H
	DD	0600bH
xdata	ENDS
;	COMDAT ??_C@_02FCBLNKNB@ss?$AA@
CONST	SEGMENT
??_C@_02FCBLNKNB@ss?$AA@ DB 'ss', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LNEJFJGI@path?$AA@
CONST	SEGMENT
??_C@_04LNEJFJGI@path?$AA@ DB 'path', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_FindSourceFile
_TEXT	SEGMENT
taillen$1$ = 48
filename$ = 128
namebuf$ = 136
namelen$ = 144
io$ = 152
_Py_FindSourceFile PROC					; COMDAT

; 142  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	56		 push	 rsi
  0000b	41 57		 push	 r15
  0000d	48 83 ec 68	 sub	 rsp, 104		; 00000068H
  00011	48 8b f2	 mov	 rsi, rdx

; 143  :     Py_ssize_t i;
; 144  :     PyObject *binary;
; 145  :     PyObject *v;
; 146  :     Py_ssize_t npath;
; 147  :     size_t taillen;
; 148  :     PyObject *syspath;
; 149  :     PyObject *path;
; 150  :     const char* tail;
; 151  :     PyObject *filebytes;
; 152  :     const char* filepath;
; 153  :     Py_ssize_t len;
; 154  :     PyObject* result;
; 155  :     _Py_IDENTIFIER(open);
; 156  : 
; 157  :     filebytes = PyUnicode_EncodeFSDefault(filename);

  00014	e8 00 00 00 00	 call	 PyUnicode_EncodeFSDefault
  00019	4c 8b f8	 mov	 r15, rax

; 158  :     if (filebytes == NULL) {

  0001c	48 85 c0	 test	 rax, rax
  0001f	75 0f		 jne	 SHORT $LN15@Py_FindSou

; 159  :         PyErr_Clear();

  00021	e8 00 00 00 00	 call	 PyErr_Clear

; 160  :         return NULL;

  00026	33 c0		 xor	 eax, eax

; 217  : }

  00028	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0002c	41 5f		 pop	 r15
  0002e	5e		 pop	 rsi
  0002f	c3		 ret	 0
$LN15@Py_FindSou:
  00030	48 89 7c 24 58	 mov	 QWORD PTR [rsp+88], rdi

; 161  :     }
; 162  :     filepath = PyBytes_AS_STRING(filebytes);
; 163  : 
; 164  :     /* Search tail of filename in sys.path before giving up */
; 165  :     tail = strrchr(filepath, SEP);

  00035	48 8d 48 78	 lea	 rcx, QWORD PTR [rax+120]
  00039	ba 5c 00 00 00	 mov	 edx, 92			; 0000005cH
  0003e	4c 89 64 24 50	 mov	 QWORD PTR [rsp+80], r12
  00043	4c 89 6c 24 48	 mov	 QWORD PTR [rsp+72], r13
  00048	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strrchr
  0004e	4c 8b e0	 mov	 r12, rax

; 166  :     if (tail == NULL)

  00051	48 85 c0	 test	 rax, rax
  00054	75 06		 jne	 SHORT $LN14@Py_FindSou

; 167  :         tail = filepath;

  00056	4d 8d 67 78	 lea	 r12, QWORD PTR [r15+120]

; 168  :     else

  0005a	eb 03		 jmp	 SHORT $LN13@Py_FindSou
$LN14@Py_FindSou:

; 169  :         tail++;

  0005c	49 ff c4	 inc	 r12
$LN13@Py_FindSou:

; 170  :     taillen = strlen(tail);

  0005f	48 83 c9 ff	 or	 rcx, -1
  00063	33 c0		 xor	 eax, eax
  00065	48 89 9c 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rbx
  0006d	49 8b fc	 mov	 rdi, r12
  00070	48 89 6c 24 60	 mov	 QWORD PTR [rsp+96], rbp
  00075	4c 89 74 24 40	 mov	 QWORD PTR [rsp+64], r14
  0007a	f2 ae		 repne scasb
  0007c	48 f7 d1	 not	 rcx
  0007f	48 ff c9	 dec	 rcx
  00082	48 89 4c 24 30	 mov	 QWORD PTR taillen$1$[rsp], rcx

; 171  : 
; 172  :     syspath = PySys_GetObject("path");

  00087	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04LNEJFJGI@path?$AA@
  0008e	e8 00 00 00 00	 call	 PySys_GetObject
  00093	4c 8b e8	 mov	 r13, rax

; 173  :     if (syspath == NULL || !PyList_Check(syspath))

  00096	48 85 c0	 test	 rax, rax
  00099	0f 84 5a 01 00
	00		 je	 $error$20520
  0009f	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  000a3	f7 82 00 01 00
	00 00 00 00 02	 test	 DWORD PTR [rdx+256], 33554432 ; 02000000H
  000ad	0f 84 46 01 00
	00		 je	 $error$20520

; 174  :         goto error;
; 175  :     npath = PyList_Size(syspath);

  000b3	48 8b c8	 mov	 rcx, rax
  000b6	e8 00 00 00 00	 call	 PyList_Size

; 176  : 
; 177  :     for (i = 0; i < npath; i++) {

  000bb	33 ed		 xor	 ebp, ebp
  000bd	4c 8b f0	 mov	 r14, rax
  000c0	48 85 c0	 test	 rax, rax
  000c3	0f 8e 30 01 00
	00		 jle	 $error$20520
  000c9	0f 1f 80 00 00
	00 00		 npad	 7
$LL10@Py_FindSou:

; 178  :         v = PyList_GetItem(syspath, i);

  000d0	48 8b d5	 mov	 rdx, rbp
  000d3	49 8b cd	 mov	 rcx, r13
  000d6	e8 00 00 00 00	 call	 PyList_GetItem

; 179  :         if (v == NULL) {

  000db	48 85 c0	 test	 rax, rax
  000de	0f 84 10 01 00
	00		 je	 $LN23@Py_FindSou

; 181  :             break;
; 182  :         }
; 183  :         if (!PyUnicode_Check(v))

  000e4	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000e8	f7 81 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rcx+256], 268435456 ; 10000000H
  000f2	0f 84 ee 00 00
	00		 je	 $LN9@Py_FindSou

; 184  :             continue;
; 185  :         path = PyUnicode_EncodeFSDefault(v);

  000f8	48 8b c8	 mov	 rcx, rax
  000fb	e8 00 00 00 00	 call	 PyUnicode_EncodeFSDefault
  00100	48 8b f8	 mov	 rdi, rax

; 186  :         if (path == NULL) {

  00103	48 85 c0	 test	 rax, rax

; 187  :             PyErr_Clear();
; 188  :             continue;

  00106	0f 84 d5 00 00
	00		 je	 $LN27@Py_FindSou

; 189  :         }
; 190  :         len = PyBytes_GET_SIZE(path);

  0010c	48 8b 58 60	 mov	 rbx, QWORD PTR [rax+96]

; 191  :         if (len + 1 + (Py_ssize_t)taillen >= (Py_ssize_t)namelen - 1) {

  00110	48 8b 44 24 30	 mov	 rax, QWORD PTR taillen$1$[rsp]
  00115	48 8d 4c 03 01	 lea	 rcx, QWORD PTR [rbx+rax+1]
  0011a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR namelen$[rsp]
  00122	48 ff c8	 dec	 rax
  00125	48 3b c8	 cmp	 rcx, rax
  00128	7c 0d		 jl	 SHORT $LN4@Py_FindSou

; 192  :             Py_DECREF(path);

  0012a	48 8b cf	 mov	 rcx, rdi
  0012d	e8 00 00 00 00	 call	 _Py_DecRef

; 193  :             continue; /* Too long */

  00132	e9 af 00 00 00	 jmp	 $LN9@Py_FindSou
$LN4@Py_FindSou:

; 194  :         }
; 195  :         strcpy(namebuf, PyBytes_AS_STRING(path));

  00137	48 8d 4f 78	 lea	 rcx, QWORD PTR [rdi+120]
  0013b	48 8b d6	 mov	 rdx, rsi
  0013e	48 2b d1	 sub	 rdx, rcx
$LL18@Py_FindSou:
  00141	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  00144	48 ff c1	 inc	 rcx
  00147	88 44 0a ff	 mov	 BYTE PTR [rdx+rcx-1], al
  0014b	84 c0		 test	 al, al
  0014d	75 f2		 jne	 SHORT $LL18@Py_FindSou

; 196  :         Py_DECREF(path);

  0014f	48 8b cf	 mov	 rcx, rdi
  00152	e8 00 00 00 00	 call	 _Py_DecRef

; 197  :         if (strlen(namebuf) != len)

  00157	48 83 c9 ff	 or	 rcx, -1
  0015b	33 c0		 xor	 eax, eax
  0015d	48 8b fe	 mov	 rdi, rsi
  00160	f2 ae		 repne scasb
  00162	48 f7 d1	 not	 rcx
  00165	48 ff c9	 dec	 rcx
  00168	48 3b cb	 cmp	 rcx, rbx
  0016b	75 79		 jne	 SHORT $LN9@Py_FindSou

; 198  :             continue; /* v contains '\0' */
; 199  :         if (len > 0 && namebuf[len-1] != SEP)

  0016d	48 85 db	 test	 rbx, rbx
  00170	7e 0e		 jle	 SHORT $LN2@Py_FindSou
  00172	80 7c 33 ff 5c	 cmp	 BYTE PTR [rbx+rsi-1], 92 ; 0000005cH
  00177	74 07		 je	 SHORT $LN2@Py_FindSou

; 200  :             namebuf[len++] = SEP;

  00179	c6 04 33 5c	 mov	 BYTE PTR [rbx+rsi], 92	; 0000005cH
  0017d	48 ff c3	 inc	 rbx
$LN2@Py_FindSou:

; 201  :         strcpy(namebuf+len, tail);

  00180	49 2b dc	 sub	 rbx, r12
  00183	49 8b cc	 mov	 rcx, r12
  00186	48 8d 14 33	 lea	 rdx, QWORD PTR [rbx+rsi]
  0018a	66 0f 1f 44 00
	00		 npad	 6
$LL19@Py_FindSou:
  00190	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  00193	48 ff c1	 inc	 rcx
  00196	88 44 0a ff	 mov	 BYTE PTR [rdx+rcx-1], al
  0019a	84 c0		 test	 al, al
  0019c	75 f2		 jne	 SHORT $LL19@Py_FindSou

; 202  : 
; 203  :         binary = _PyObject_CallMethodId(io, &PyId_open, "ss", namebuf, "rb");

  0019e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  001a4	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  001ad	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_open@?1??_Py_FindSourceFile@@9@9
  001b2	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  001b6	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR io$[rsp]
  001be	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02JDPG@rb?$AA@
  001c5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02FCBLNKNB@ss?$AA@
  001cc	4c 8b ce	 mov	 r9, rsi
  001cf	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001d4	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  001d9	48 8b f8	 mov	 rdi, rax

; 204  :         if (binary != NULL) {

  001dc	48 85 c0	 test	 rax, rax
  001df	75 1a		 jne	 SHORT $finally$20545
$LN27@Py_FindSou:

; 205  :             result = binary;
; 206  :             goto finally;
; 207  :         }
; 208  :         PyErr_Clear();

  001e1	e8 00 00 00 00	 call	 PyErr_Clear
$LN9@Py_FindSou:

; 176  : 
; 177  :     for (i = 0; i < npath; i++) {

  001e6	48 ff c5	 inc	 rbp
  001e9	49 3b ee	 cmp	 rbp, r14
  001ec	0f 8c de fe ff
	ff		 jl	 $LL10@Py_FindSou

; 204  :         if (binary != NULL) {

  001f2	eb 05		 jmp	 SHORT $error$20520
$LN23@Py_FindSou:

; 180  :             PyErr_Clear();

  001f4	e8 00 00 00 00	 call	 PyErr_Clear
$error$20520:

; 209  :     }
; 210  :     goto error;
; 211  : 
; 212  : error:
; 213  :     result = NULL;

  001f9	33 ff		 xor	 edi, edi
$finally$20545:

; 214  : finally:
; 215  :     Py_DECREF(filebytes);

  001fb	49 8b cf	 mov	 rcx, r15
  001fe	e8 00 00 00 00	 call	 _Py_DecRef
  00203	4c 8b 74 24 40	 mov	 r14, QWORD PTR [rsp+64]
  00208	4c 8b 6c 24 48	 mov	 r13, QWORD PTR [rsp+72]
  0020d	4c 8b 64 24 50	 mov	 r12, QWORD PTR [rsp+80]
  00212	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
  00217	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR [rsp+128]

; 216  :     return result;

  0021f	48 8b c7	 mov	 rax, rdi
  00222	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]

; 217  : }

  00227	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0022b	41 5f		 pop	 r15
  0022d	5e		 pop	 rsi
  0022e	c3		 ret	 0
_Py_FindSourceFile ENDP
_TEXT	ENDS
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_0L@CCBFPMDD@?5?5?5?5?5?5?5?5?5?5?$AA@	; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_05CAMHEFLG@utf?98?$AA@			; `string'
PUBLIC	??_C@_02HPGKMGCF@Os?$AA@			; `string'
PUBLIC	??_C@_02KFNNKBCK@io?$AA@			; `string'
PUBLIC	_Py_DisplaySourceLine
EXTRN	PyFile_WriteObject:PROC
EXTRN	PyFile_WriteString:PROC
EXTRN	PyUnicode_Substring:PROC
EXTRN	PyFile_GetLine:PROC
EXTRN	__imp_free:PROC
EXTRN	_PxMem_Free:PROC
EXTRN	__imp_lseek:PROC
EXTRN	PyTokenizer_FindEncodingFilename:PROC
EXTRN	PyObject_AsFileDescriptor:PROC
EXTRN	PyImport_ImportModuleNoBlock:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DisplaySourceLine DD imagerel $LN65
	DD	imagerel $LN65+149
	DD	imagerel $unwind$_Py_DisplaySourceLine
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_Py_DisplaySourceLine DD imagerel $LN65+149
	DD	imagerel $LN65+267
	DD	imagerel $chain$1$_Py_DisplaySourceLine
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_Py_DisplaySourceLine DD imagerel $LN65+267
	DD	imagerel $LN65+947
	DD	imagerel $chain$2$_Py_DisplaySourceLine
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$_Py_DisplaySourceLine DD imagerel $LN65+947
	DD	imagerel $LN65+955
	DD	imagerel $chain$3$_Py_DisplaySourceLine
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$_Py_DisplaySourceLine DD imagerel $LN65+955
	DD	imagerel $LN65+978
	DD	imagerel $chain$4$_Py_DisplaySourceLine
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$_Py_DisplaySourceLine DD 021H
	DD	imagerel $LN65
	DD	imagerel $LN65+149
	DD	imagerel $unwind$_Py_DisplaySourceLine
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$_Py_DisplaySourceLine DD 021H
	DD	imagerel $LN65+149
	DD	imagerel $LN65+267
	DD	imagerel $chain$1$_Py_DisplaySourceLine
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_Py_DisplaySourceLine DD 020821H
	DD	02af408H
	DD	imagerel $LN65+149
	DD	imagerel $LN65+267
	DD	imagerel $chain$1$_Py_DisplaySourceLine
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_Py_DisplaySourceLine DD 020821H
	DD	02bd408H
	DD	imagerel $LN65
	DD	imagerel $LN65+149
	DD	imagerel $unwind$_Py_DisplaySourceLine
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DisplaySourceLine DD 094c01H
	DD	035744cH
	DD	02c0118H
	DD	0c00fe011H
	DD	0500c600dH
	DD	0300bH
xdata	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CCBFPMDD@?5?5?5?5?5?5?5?5?5?5?$AA@
CONST	SEGMENT
??_C@_0L@CCBFPMDD@?5?5?5?5?5?5?5?5?5?5?$AA@ DB '          ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05CAMHEFLG@utf?98?$AA@
CONST	SEGMENT
??_C@_05CAMHEFLG@utf?98?$AA@ DB 'utf-8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02HPGKMGCF@Os?$AA@
CONST	SEGMENT
??_C@_02HPGKMGCF@Os?$AA@ DB 'Os', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KFNNKBCK@io?$AA@
CONST	SEGMENT
??_C@_02KFNNKBCK@io?$AA@ DB 'io', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DisplaySourceLine
_TEXT	SEGMENT
tv443 = 48
buf$ = 64
f$ = 400
fd$1$ = 408
filename$ = 408
lineno$ = 416
indent$ = 424
_Py_DisplaySourceLine PROC				; COMDAT

; 221  : {

$LN65:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	53		 push	 rbx
  0000b	55		 push	 rbp
  0000c	56		 push	 rsi
  0000d	41 54		 push	 r12
  0000f	41 56		 push	 r14
  00011	48 81 ec 60 01
	00 00		 sub	 rsp, 352		; 00000160H

; 222  :     int err = 0;

  00018	45 33 e4	 xor	 r12d, r12d
  0001b	49 63 e9	 movsxd	 rbp, r9d
  0001e	4c 8b f2	 mov	 r14, rdx
  00021	41 8b f4	 mov	 esi, r12d

; 223  :     int fd;
; 224  :     int i;
; 225  :     char *found_encoding;
; 226  :     char *encoding;
; 227  :     PyObject *io;
; 228  :     PyObject *binary;
; 229  :     PyObject *fob = NULL;
; 230  :     PyObject *lineobj = NULL;

  00024	41 8b dc	 mov	 ebx, r12d

; 231  :     PyObject *res;
; 232  :     char buf[MAXPATHLEN+1];
; 233  :     int kind;
; 234  :     void *data;
; 235  :     _Py_IDENTIFIER(close);
; 236  :     _Py_IDENTIFIER(open);
; 237  :     _Py_IDENTIFIER(TextIOWrapper);
; 238  : 
; 239  :     /* open the file */
; 240  :     if (filename == NULL)

  00027	48 85 d2	 test	 rdx, rdx
  0002a	75 11		 jne	 SHORT $LN36@Py_Display

; 241  :         return 0;

  0002c	33 c0		 xor	 eax, eax

; 340  : }

  0002e	48 81 c4 60 01
	00 00		 add	 rsp, 352		; 00000160H
  00035	41 5e		 pop	 r14
  00037	41 5c		 pop	 r12
  00039	5e		 pop	 rsi
  0003a	5d		 pop	 rbp
  0003b	5b		 pop	 rbx
  0003c	c3		 ret	 0
$LN36@Py_Display:

; 242  : 
; 243  :     io = PyImport_ImportModuleNoBlock("io");

  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02KFNNKBCK@io?$AA@
  00044	48 89 bc 24 a8
	01 00 00	 mov	 QWORD PTR [rsp+424], rdi
  0004c	e8 00 00 00 00	 call	 PyImport_ImportModuleNoBlock
  00051	48 8b f8	 mov	 rdi, rax

; 244  :     if (io == NULL)

  00054	48 85 c0	 test	 rax, rax
  00057	75 08		 jne	 SHORT $LN35@Py_Display

; 245  :         return -1;

  00059	83 c8 ff	 or	 eax, -1
  0005c	e9 5a 03 00 00	 jmp	 $LN62@Py_Display
$LN35@Py_Display:

; 246  :     binary = _PyObject_CallMethodId(io, &PyId_open, "Os", filename, "rb");

  00061	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00067	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00070	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_open@?1??_Py_DisplaySourceLine@@9@9
  00075	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00079	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02HPGKMGCF@Os?$AA@
  00080	4d 8b ce	 mov	 r9, r14
  00083	48 89 44 24 30	 mov	 QWORD PTR tv443[rsp], rax
  00088	48 03 d0	 add	 rdx, rax
  0008b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02JDPG@rb?$AA@
  00092	48 8b cf	 mov	 rcx, rdi
  00095	4c 89 ac 24 58
	01 00 00	 mov	 QWORD PTR [rsp+344], r13
  0009d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000a2	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  000a7	4c 8b e8	 mov	 r13, rax

; 247  : 
; 248  :     if (binary == NULL) {

  000aa	48 85 c0	 test	 rax, rax
  000ad	75 2d		 jne	 SHORT $LN33@Py_Display

; 249  :         binary = _Py_FindSourceFile(filename, buf, sizeof(buf), io);

  000af	48 8d 54 24 40	 lea	 rdx, QWORD PTR buf$[rsp]
  000b4	4c 8b cf	 mov	 r9, rdi
  000b7	41 b8 01 01 00
	00		 mov	 r8d, 257		; 00000101H
  000bd	49 8b ce	 mov	 rcx, r14
  000c0	e8 00 00 00 00	 call	 _Py_FindSourceFile
  000c5	4c 8b e8	 mov	 r13, rax

; 250  :         if (binary == NULL) {

  000c8	48 85 c0	 test	 rax, rax
  000cb	75 0f		 jne	 SHORT $LN33@Py_Display

; 251  :             Py_DECREF(io);

  000cd	48 8b cf	 mov	 rcx, rdi
  000d0	e8 00 00 00 00	 call	 _Py_DecRef

; 252  :             return 0;

  000d5	33 c0		 xor	 eax, eax
  000d7	e9 d7 02 00 00	 jmp	 $LN63@Py_Display
$LN33@Py_Display:

; 253  :         }
; 254  :     }
; 255  : 
; 256  :     /* use the right encoding to decode the file as unicode */
; 257  :     fd = PyObject_AsFileDescriptor(binary);

  000dc	49 8b cd	 mov	 rcx, r13
  000df	e8 00 00 00 00	 call	 PyObject_AsFileDescriptor
  000e4	89 84 24 98 01
	00 00		 mov	 DWORD PTR fd$1$[rsp], eax

; 258  :     if (fd < 0) {

  000eb	85 c0		 test	 eax, eax
  000ed	79 17		 jns	 SHORT $LN32@Py_Display

; 259  :         Py_DECREF(io);

  000ef	48 8b cf	 mov	 rcx, rdi
  000f2	e8 00 00 00 00	 call	 _Py_DecRef

; 260  :         Py_DECREF(binary);

  000f7	49 8b cd	 mov	 rcx, r13
  000fa	e8 00 00 00 00	 call	 _Py_DecRef

; 261  :         return 0;

  000ff	33 c0		 xor	 eax, eax
  00101	e9 ad 02 00 00	 jmp	 $LN63@Py_Display
$LN32@Py_Display:

; 262  :     }
; 263  :     found_encoding = PyTokenizer_FindEncodingFilename(fd, filename);

  00106	49 8b d6	 mov	 rdx, r14
  00109	8b c8		 mov	 ecx, eax
  0010b	4c 89 bc 24 50
	01 00 00	 mov	 QWORD PTR [rsp+336], r15
  00113	e8 00 00 00 00	 call	 PyTokenizer_FindEncodingFilename

; 264  :     encoding = (found_encoding != NULL) ? found_encoding : "utf-8";
; 265  :     /* Reset position */
; 266  :     if (lseek(fd, 0, SEEK_SET) == (off_t)-1) {

  00118	8b 8c 24 98 01
	00 00		 mov	 ecx, DWORD PTR fd$1$[rsp]
  0011f	4c 8d 35 00 00
	00 00		 lea	 r14, OFFSET FLAT:??_C@_05CAMHEFLG@utf?98?$AA@
  00126	48 85 c0	 test	 rax, rax
  00129	4c 8b f8	 mov	 r15, rax
  0012c	4c 0f 45 f0	 cmovne	 r14, rax
  00130	45 33 c0	 xor	 r8d, r8d
  00133	33 d2		 xor	 edx, edx
  00135	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lseek

; 267  :         Py_DECREF(io);

  0013b	48 8b cf	 mov	 rcx, rdi
  0013e	83 f8 ff	 cmp	 eax, -1
  00141	75 32		 jne	 SHORT $LN31@Py_Display
  00143	e8 00 00 00 00	 call	 _Py_DecRef

; 268  :         Py_DECREF(binary);

  00148	49 8b cd	 mov	 rcx, r13
  0014b	e8 00 00 00 00	 call	 _Py_DecRef

; 269  :         PyMem_FREE(found_encoding);

  00150	e8 00 00 00 00	 call	 _Py_PXCTX
  00155	49 8b cf	 mov	 rcx, r15
  00158	85 c0		 test	 eax, eax
  0015a	74 0c		 je	 SHORT $LN39@Py_Display
  0015c	e8 00 00 00 00	 call	 _PxMem_Free

; 270  :         return 0;

  00161	33 c0		 xor	 eax, eax
  00163	e9 43 02 00 00	 jmp	 $LN64@Py_Display
$LN39@Py_Display:

; 269  :         PyMem_FREE(found_encoding);

  00168	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 270  :         return 0;

  0016e	33 c0		 xor	 eax, eax
  00170	e9 36 02 00 00	 jmp	 $LN64@Py_Display
$LN31@Py_Display:

; 271  :     }
; 272  :     fob = _PyObject_CallMethodId(io, &PyId_TextIOWrapper, "Os", binary, encoding);

  00175	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_TextIOWrapper@?1??_Py_DisplaySourceLine@@9@9
  0017a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02HPGKMGCF@Os?$AA@
  00181	4d 8b cd	 mov	 r9, r13
  00184	48 03 54 24 30	 add	 rdx, QWORD PTR tv443[rsp]
  00189	4c 89 74 24 20	 mov	 QWORD PTR [rsp+32], r14
  0018e	e8 00 00 00 00	 call	 _PyObject_CallMethodId

; 273  :     Py_DECREF(io);

  00193	48 8b cf	 mov	 rcx, rdi
  00196	4c 8b f0	 mov	 r14, rax
  00199	e8 00 00 00 00	 call	 _Py_DecRef

; 274  :     Py_DECREF(binary);

  0019e	49 8b cd	 mov	 rcx, r13
  001a1	e8 00 00 00 00	 call	 _Py_DecRef

; 275  :     PyMem_FREE(found_encoding);

  001a6	e8 00 00 00 00	 call	 _Py_PXCTX
  001ab	49 8b cf	 mov	 rcx, r15
  001ae	85 c0		 test	 eax, eax
  001b0	74 07		 je	 SHORT $LN41@Py_Display
  001b2	e8 00 00 00 00	 call	 _PxMem_Free
  001b7	eb 06		 jmp	 SHORT $LN42@Py_Display
$LN41@Py_Display:
  001b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN42@Py_Display:

; 276  : 
; 277  :     if (fob == NULL) {

  001bf	4d 85 f6	 test	 r14, r14
  001c2	75 0c		 jne	 SHORT $LN30@Py_Display

; 278  :         PyErr_Clear();

  001c4	e8 00 00 00 00	 call	 PyErr_Clear

; 279  :         return 0;

  001c9	33 c0		 xor	 eax, eax
  001cb	e9 db 01 00 00	 jmp	 $LN64@Py_Display
$LN30@Py_Display:

; 280  :     }
; 281  : 
; 282  :     /* get the line number lineno */
; 283  :     for (i = 0; i < lineno; i++) {

  001d0	44 8b ac 24 a0
	01 00 00	 mov	 r13d, DWORD PTR lineno$[rsp]
  001d8	41 8b fc	 mov	 edi, r12d
  001db	45 85 ed	 test	 r13d, r13d
  001de	7e 2c		 jle	 SHORT $LN27@Py_Display
$LL29@Py_Display:

; 284  :         Py_XDECREF(lineobj);

  001e0	48 85 db	 test	 rbx, rbx
  001e3	74 08		 je	 SHORT $LN25@Py_Display
  001e5	48 8b cb	 mov	 rcx, rbx
  001e8	e8 00 00 00 00	 call	 _Py_DecRef
$LN25@Py_Display:

; 285  :         lineobj = PyFile_GetLine(fob, -1);

  001ed	83 ca ff	 or	 edx, -1
  001f0	49 8b ce	 mov	 rcx, r14
  001f3	e8 00 00 00 00	 call	 PyFile_GetLine
  001f8	48 8b d8	 mov	 rbx, rax

; 286  :         if (!lineobj) {

  001fb	48 85 c0	 test	 rax, rax
  001fe	74 09		 je	 SHORT $LN54@Py_Display

; 280  :     }
; 281  : 
; 282  :     /* get the line number lineno */
; 283  :     for (i = 0; i < lineno; i++) {

  00200	ff c7		 inc	 edi
  00202	41 3b fd	 cmp	 edi, r13d
  00205	7c d9		 jl	 SHORT $LL29@Py_Display

; 328  :         if (err != 0)

  00207	eb 03		 jmp	 SHORT $LN27@Py_Display
$LN54@Py_Display:

; 287  :             err = -1;

  00209	83 ce ff	 or	 esi, -1
$LN27@Py_Display:

; 288  :             break;
; 289  :         }
; 290  :     }
; 291  :     res = _PyObject_CallMethodId(fob, &PyId_close, "");

  0020c	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_close@?1??_Py_DisplaySourceLine@@9@9
  00211	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00218	49 8b ce	 mov	 rcx, r14
  0021b	48 03 54 24 30	 add	 rdx, QWORD PTR tv443[rsp]
  00220	e8 00 00 00 00	 call	 _PyObject_CallMethodId

; 292  :     if (res)

  00225	48 85 c0	 test	 rax, rax
  00228	74 0a		 je	 SHORT $LN21@Py_Display

; 293  :         Py_DECREF(res);

  0022a	48 8b c8	 mov	 rcx, rax
  0022d	e8 00 00 00 00	 call	 _Py_DecRef

; 294  :     else

  00232	eb 05		 jmp	 SHORT $LN20@Py_Display
$LN21@Py_Display:

; 295  :         PyErr_Clear();

  00234	e8 00 00 00 00	 call	 PyErr_Clear
$LN20@Py_Display:

; 296  :     Py_DECREF(fob);

  00239	49 8b ce	 mov	 rcx, r14
  0023c	e8 00 00 00 00	 call	 _Py_DecRef

; 297  :     if (!lineobj || !PyUnicode_Check(lineobj)) {

  00241	48 85 db	 test	 rbx, rbx
  00244	0f 84 5f 01 00
	00		 je	 $LN16@Py_Display
  0024a	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0024e	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  00258	0f 84 43 01 00
	00		 je	 $LN17@Py_Display

; 300  :     }
; 301  : 
; 302  :     /* remove the indentation of the line */
; 303  :     kind = PyUnicode_KIND(lineobj);

  0025e	8b 43 70	 mov	 eax, DWORD PTR [rbx+112]
  00261	8b d0		 mov	 edx, eax
  00263	c1 ea 02	 shr	 edx, 2
  00266	83 e2 07	 and	 edx, 7

; 304  :     data = PyUnicode_DATA(lineobj);

  00269	a8 20		 test	 al, 32			; 00000020H
  0026b	74 16		 je	 SHORT $LN45@Py_Display
  0026d	a8 40		 test	 al, 64			; 00000040H
  0026f	74 09		 je	 SHORT $LN43@Py_Display
  00271	48 8d 8b 80 00
	00 00		 lea	 rcx, QWORD PTR [rbx+128]
  00278	eb 10		 jmp	 SHORT $LN46@Py_Display
$LN43@Py_Display:
  0027a	48 8d 8b a0 00
	00 00		 lea	 rcx, QWORD PTR [rbx+160]
  00281	eb 07		 jmp	 SHORT $LN46@Py_Display
$LN45@Py_Display:
  00283	48 8b 8b a0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+160]
$LN46@Py_Display:

; 305  :     for (i=0; i < PyUnicode_GET_LENGTH(lineobj); i++) {

  0028a	4c 8b 53 60	 mov	 r10, QWORD PTR [rbx+96]

; 306  :         Py_UCS4 ch = PyUnicode_READ(kind, data, i);

  0028e	4c 63 ca	 movsxd	 r9, edx
  00291	4d 85 d2	 test	 r10, r10
  00294	7e 75		 jle	 SHORT $LN7@Py_Display

; 305  :     for (i=0; i < PyUnicode_GET_LENGTH(lineobj); i++) {

  00296	48 8b d1	 mov	 rdx, rcx
  00299	4c 8b c1	 mov	 r8, rcx
  0029c	0f 1f 40 00	 npad	 4
$LL13@Py_Display:

; 306  :         Py_UCS4 ch = PyUnicode_READ(kind, data, i);

  002a0	49 83 f9 01	 cmp	 r9, 1
  002a4	75 05		 jne	 SHORT $LN49@Py_Display
  002a6	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  002a9	eb 0e		 jmp	 SHORT $LN48@Py_Display
$LN49@Py_Display:
  002ab	49 83 f9 02	 cmp	 r9, 2
  002af	75 06		 jne	 SHORT $LN47@Py_Display
  002b1	41 0f b7 00	 movzx	 eax, WORD PTR [r8]
  002b5	eb 02		 jmp	 SHORT $LN48@Py_Display
$LN47@Py_Display:
  002b7	8b 02		 mov	 eax, DWORD PTR [rdx]
$LN48@Py_Display:

; 307  :         if (ch != ' ' && ch != '\t' && ch != '\014')

  002b9	83 f8 20	 cmp	 eax, 32			; 00000020H
  002bc	74 0a		 je	 SHORT $LN12@Py_Display
  002be	83 f8 09	 cmp	 eax, 9
  002c1	74 05		 je	 SHORT $LN12@Py_Display
  002c3	83 f8 0c	 cmp	 eax, 12
  002c6	75 16		 jne	 SHORT $LN55@Py_Display
$LN12@Py_Display:

; 305  :     for (i=0; i < PyUnicode_GET_LENGTH(lineobj); i++) {

  002c8	41 ff c4	 inc	 r12d
  002cb	48 ff c1	 inc	 rcx
  002ce	49 83 c0 02	 add	 r8, 2
  002d2	49 63 c4	 movsxd	 rax, r12d
  002d5	48 83 c2 04	 add	 rdx, 4
  002d9	49 3b c2	 cmp	 rax, r10
  002dc	7c c2		 jl	 SHORT $LL13@Py_Display
$LN55@Py_Display:

; 308  :             break;
; 309  :     }
; 310  :     if (i) {

  002de	45 85 e4	 test	 r12d, r12d
  002e1	74 28		 je	 SHORT $LN7@Py_Display

; 311  :         PyObject *truncated;
; 312  :         truncated = PyUnicode_Substring(lineobj, i, PyUnicode_GET_LENGTH(lineobj));

  002e3	49 63 d4	 movsxd	 rdx, r12d
  002e6	4d 8b c2	 mov	 r8, r10
  002e9	48 8b cb	 mov	 rcx, rbx
  002ec	e8 00 00 00 00	 call	 PyUnicode_Substring
  002f1	48 8b f8	 mov	 rdi, rax

; 313  :         if (truncated) {

  002f4	48 85 c0	 test	 rax, rax
  002f7	74 0d		 je	 SHORT $LN8@Py_Display

; 314  :             Py_DECREF(lineobj);

  002f9	48 8b cb	 mov	 rcx, rbx
  002fc	e8 00 00 00 00	 call	 _Py_DecRef

; 315  :             lineobj = truncated;

  00301	48 8b df	 mov	 rbx, rdi

; 316  :         } else {

  00304	eb 05		 jmp	 SHORT $LN7@Py_Display
$LN8@Py_Display:

; 317  :             PyErr_Clear();

  00306	e8 00 00 00 00	 call	 PyErr_Clear
$LN7@Py_Display:

; 318  :         }
; 319  :     }
; 320  : 
; 321  :     /* Write some spaces before the line */
; 322  :     strcpy(buf, "          ");

  0030b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ??_C@_0L@CCBFPMDD@?5?5?5?5?5?5?5?5?5?5?$AA@
  00312	4c 8b a4 24 90
	01 00 00	 mov	 r12, QWORD PTR f$[rsp]
  0031a	48 8b fd	 mov	 rdi, rbp
  0031d	48 89 44 24 40	 mov	 QWORD PTR buf$[rsp], rax
  00322	0f b7 05 08 00
	00 00		 movzx	 eax, WORD PTR ??_C@_0L@CCBFPMDD@?5?5?5?5?5?5?5?5?5?5?$AA@+8
  00329	66 89 44 24 48	 mov	 WORD PTR buf$[rsp+8], ax
  0032e	0f b6 05 0a 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_0L@CCBFPMDD@?5?5?5?5?5?5?5?5?5?5?$AA@+10
  00335	88 44 24 4a	 mov	 BYTE PTR buf$[rsp+10], al

; 323  :     assert (strlen(buf) == 10);
; 324  :     while (indent > 0) {

  00339	85 ed		 test	 ebp, ebp
  0033b	7e 2e		 jle	 SHORT $LN56@Py_Display
  0033d	0f 1f 00	 npad	 3
$LL6@Py_Display:

; 325  :         if (indent < 10)

  00340	48 83 ff 0a	 cmp	 rdi, 10
  00344	7d 05		 jge	 SHORT $LN4@Py_Display

; 326  :             buf[indent] = '\0';

  00346	c6 44 3c 40 00	 mov	 BYTE PTR buf$[rsp+rdi], 0
$LN4@Py_Display:

; 327  :         err = PyFile_WriteString(buf, f);

  0034b	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buf$[rsp]
  00350	49 8b d4	 mov	 rdx, r12
  00353	e8 00 00 00 00	 call	 PyFile_WriteString
  00358	8b f0		 mov	 esi, eax

; 328  :         if (err != 0)

  0035a	85 c0		 test	 eax, eax
  0035c	75 24		 jne	 SHORT $LN2@Py_Display

; 329  :             break;
; 330  :         indent -= 10;

  0035e	83 ed 0a	 sub	 ebp, 10
  00361	48 83 ef 0a	 sub	 rdi, 10
  00365	85 ed		 test	 ebp, ebp
  00367	7f d7		 jg	 SHORT $LL6@Py_Display

; 331  :     }
; 332  : 
; 333  :     /* finally display the line */
; 334  :     if (err == 0)

  00369	eb 04		 jmp	 SHORT $LN60@Py_Display
$LN56@Py_Display:
  0036b	85 f6		 test	 esi, esi
  0036d	75 13		 jne	 SHORT $LN2@Py_Display
$LN60@Py_Display:

; 335  :         err = PyFile_WriteObject(lineobj, f, Py_PRINT_RAW);

  0036f	41 b8 01 00 00
	00		 mov	 r8d, 1
  00375	49 8b d4	 mov	 rdx, r12
  00378	48 8b cb	 mov	 rcx, rbx
  0037b	e8 00 00 00 00	 call	 PyFile_WriteObject
  00380	8b f0		 mov	 esi, eax
$LN2@Py_Display:

; 336  :     Py_DECREF(lineobj);

  00382	48 8b cb	 mov	 rcx, rbx
  00385	e8 00 00 00 00	 call	 _Py_DecRef

; 337  :     if  (err == 0)

  0038a	85 f6		 test	 esi, esi
  0038c	75 1b		 jne	 SHORT $LN16@Py_Display

; 338  :         err = PyFile_WriteString("\n", f);

  0038e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  00395	49 8b d4	 mov	 rdx, r12
  00398	e8 00 00 00 00	 call	 PyFile_WriteString
  0039d	8b f0		 mov	 esi, eax

; 339  :     return err;

  0039f	eb 08		 jmp	 SHORT $LN16@Py_Display
$LN17@Py_Display:

; 298  :         Py_XDECREF(lineobj);

  003a1	48 8b cb	 mov	 rcx, rbx
  003a4	e8 00 00 00 00	 call	 _Py_DecRef
$LN16@Py_Display:

; 299  :         return err;

  003a9	8b c6		 mov	 eax, esi
$LN64@Py_Display:
  003ab	4c 8b bc 24 50
	01 00 00	 mov	 r15, QWORD PTR [rsp+336]
$LN63@Py_Display:
  003b3	4c 8b ac 24 58
	01 00 00	 mov	 r13, QWORD PTR [rsp+344]
$LN62@Py_Display:
  003bb	48 8b bc 24 a8
	01 00 00	 mov	 rdi, QWORD PTR [rsp+424]

; 340  : }

  003c3	48 81 c4 60 01
	00 00		 add	 rsp, 352		; 00000160H
  003ca	41 5e		 pop	 r14
  003cc	41 5c		 pop	 r12
  003ce	5e		 pop	 rsi
  003cf	5d		 pop	 rbp
  003d0	5b		 pop	 rbx
  003d1	c3		 ret	 0
_Py_DisplaySourceLine ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@NMGFJCMM@?5?5File?5?$CC?$CFU?$CC?0?5line?5?$CFd?0?5in?5?$CFU?6?$AA@ ; `string'
EXTRN	PyUnicode_FromFormat:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$tb_displayline DD imagerel tb_displayline
	DD	imagerel tb_displayline+45
	DD	imagerel $unwind$tb_displayline
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$tb_displayline DD imagerel tb_displayline+45
	DD	imagerel tb_displayline+80
	DD	imagerel $chain$0$tb_displayline
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$tb_displayline DD imagerel tb_displayline+80
	DD	imagerel tb_displayline+111
	DD	imagerel $chain$1$tb_displayline
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$tb_displayline DD imagerel tb_displayline+111
	DD	imagerel tb_displayline+132
	DD	imagerel $chain$2$tb_displayline
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$tb_displayline DD imagerel tb_displayline+132
	DD	imagerel tb_displayline+165
	DD	imagerel $chain$4$tb_displayline
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$tb_displayline DD imagerel tb_displayline+165
	DD	imagerel tb_displayline+184
	DD	imagerel $chain$5$tb_displayline
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$tb_displayline DD 021H
	DD	imagerel tb_displayline
	DD	imagerel tb_displayline+45
	DD	imagerel $unwind$tb_displayline
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$tb_displayline DD 040021H
	DD	07c400H
	DD	063400H
	DD	imagerel tb_displayline
	DD	imagerel tb_displayline+45
	DD	imagerel $unwind$tb_displayline
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$tb_displayline DD 021H
	DD	imagerel tb_displayline+45
	DD	imagerel tb_displayline+80
	DD	imagerel $chain$0$tb_displayline
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$tb_displayline DD 020521H
	DD	063405H
	DD	imagerel tb_displayline+45
	DD	imagerel tb_displayline+80
	DD	imagerel $chain$0$tb_displayline
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$tb_displayline DD 020521H
	DD	07c405H
	DD	imagerel tb_displayline
	DD	imagerel tb_displayline+45
	DD	imagerel $unwind$tb_displayline
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tb_displayline DD 060f01H
	DD	09640fH
	DD	08540fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BN@NMGFJCMM@?5?5File?5?$CC?$CFU?$CC?0?5line?5?$CFd?0?5in?5?$CFU?6?$AA@
CONST	SEGMENT
??_C@_0BN@NMGFJCMM@?5?5File?5?$CC?$CFU?$CC?0?5line?5?$CFd?0?5in?5?$CFU?6?$AA@ DB ' '
	DB	' File "%U", line %d, in %U', 0aH, 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT tb_displayline
_TEXT	SEGMENT
f$ = 48
filename$ = 56
lineno$ = 64
name$ = 72
tb_displayline PROC					; COMDAT

; 344  : {

  00000	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  00005	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	41 8b f0	 mov	 esi, r8d
  00012	48 8b fa	 mov	 rdi, rdx
  00015	48 8b e9	 mov	 rbp, rcx

; 345  :     int err;
; 346  :     PyObject *line;
; 347  : 
; 348  :     if (filename == NULL || name == NULL)

  00018	48 85 d2	 test	 rdx, rdx
  0001b	0f 84 84 00 00
	00		 je	 $LN4@tb_display
  00021	4d 85 c9	 test	 r9, r9
  00024	74 7f		 je	 SHORT $LN4@tb_display

; 349  :         return -1;
; 350  :     line = PyUnicode_FromFormat("  File \"%U\", line %d, in %U\n",
; 351  :                                 filename, lineno, name);

  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@NMGFJCMM@?5?5File?5?$CC?$CFU?$CC?0?5line?5?$CFd?0?5in?5?$CFU?6?$AA@
  0002d	4c 89 64 24 38	 mov	 QWORD PTR [rsp+56], r12
  00032	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  00037	4c 8b e0	 mov	 r12, rax

; 352  :     if (line == NULL)

  0003a	48 85 c0	 test	 rax, rax
  0003d	75 05		 jne	 SHORT $LN3@tb_display

; 353  :         return -1;

  0003f	83 c8 ff	 or	 eax, -1
  00042	eb 2b		 jmp	 SHORT $LN8@tb_display
$LN3@tb_display:

; 354  :     err = PyFile_WriteObject(line, f, Py_PRINT_RAW);

  00044	41 b8 01 00 00
	00		 mov	 r8d, 1
  0004a	48 8b d5	 mov	 rdx, rbp
  0004d	48 8b c8	 mov	 rcx, rax
  00050	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00055	e8 00 00 00 00	 call	 PyFile_WriteObject

; 355  :     Py_DECREF(line);

  0005a	49 8b cc	 mov	 rcx, r12
  0005d	8b d8		 mov	 ebx, eax
  0005f	e8 00 00 00 00	 call	 _Py_DecRef

; 356  :     if (err != 0)

  00064	85 db		 test	 ebx, ebx
  00066	74 1c		 je	 SHORT $LN2@tb_display

; 357  :         return err;

  00068	8b c3		 mov	 eax, ebx
$LN9@tb_display:
  0006a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
$LN8@tb_display:
  0006f	4c 8b 64 24 38	 mov	 r12, QWORD PTR [rsp+56]

; 362  : }

  00074	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00079	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0007e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00082	5f		 pop	 rdi
  00083	c3		 ret	 0
$LN2@tb_display:

; 358  :     /* ignore errors since we can't report them, can we? */
; 359  :     if (_Py_DisplaySourceLine(f, filename, lineno, 4))

  00084	41 b9 04 00 00
	00		 mov	 r9d, 4
  0008a	44 8b c6	 mov	 r8d, esi
  0008d	48 8b d7	 mov	 rdx, rdi
  00090	48 8b cd	 mov	 rcx, rbp
  00093	e8 00 00 00 00	 call	 _Py_DisplaySourceLine
  00098	85 c0		 test	 eax, eax
  0009a	74 05		 je	 SHORT $LN1@tb_display

; 360  :         PyErr_Clear();

  0009c	e8 00 00 00 00	 call	 PyErr_Clear
$LN1@tb_display:

; 361  :     return err;

  000a1	33 c0		 xor	 eax, eax
  000a3	eb c5		 jmp	 SHORT $LN9@tb_display
$LN4@tb_display:

; 362  : }

  000a5	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  000aa	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000af	83 c8 ff	 or	 eax, -1
  000b2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b6	5f		 pop	 rdi
  000b7	c3		 ret	 0
tb_displayline ENDP
_TEXT	ENDS
EXTRN	PyErr_CheckSignals:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$tb_printinternal DD imagerel tb_printinternal
	DD	imagerel tb_printinternal+147
	DD	imagerel $unwind$tb_printinternal
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tb_printinternal DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT tb_printinternal
_TEXT	SEGMENT
tb$ = 48
f$ = 56
limit$ = 64
tb_printinternal PROC					; COMDAT

; 366  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 367  :     int err = 0;

  00014	33 c0		 xor	 eax, eax
  00016	41 8b f0	 mov	 esi, r8d
  00019	48 8b ea	 mov	 rbp, rdx
  0001c	48 8b f9	 mov	 rdi, rcx

; 368  :     long depth = 0;

  0001f	8b d8		 mov	 ebx, eax

; 369  :     PyTracebackObject *tb1 = tb;
; 370  :     while (tb1 != NULL) {

  00021	48 85 c9	 test	 rcx, rcx
  00024	74 58		 je	 SHORT $LN15@tb_printin
  00026	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL6@tb_printin:

; 371  :         depth++;
; 372  :         tb1 = tb1->tb_next;

  00030	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00034	ff c3		 inc	 ebx
  00036	48 85 c9	 test	 rcx, rcx
  00039	75 f5		 jne	 SHORT $LL6@tb_printin
  0003b	0f 1f 44 00 00	 npad	 5
$LL13@tb_printin:

; 375  :         if (depth <= limit) {

  00040	3b de		 cmp	 ebx, esi
  00042	7f 22		 jg	 SHORT $LN2@tb_printin

; 376  :             err = tb_displayline(f,
; 377  :                                  tb->tb_frame->f_code->co_filename,
; 378  :                                  tb->tb_lineno,
; 379  :                                  tb->tb_frame->f_code->co_name);

  00044	48 8b 47 68	 mov	 rax, QWORD PTR [rdi+104]
  00048	44 8b 47 74	 mov	 r8d, DWORD PTR [rdi+116]
  0004c	48 8b cd	 mov	 rcx, rbp
  0004f	48 8b 50 78	 mov	 rdx, QWORD PTR [rax+120]
  00053	4c 8b 8a b8 00
	00 00		 mov	 r9, QWORD PTR [rdx+184]
  0005a	48 8b 92 b0 00
	00 00		 mov	 rdx, QWORD PTR [rdx+176]
  00061	e8 00 00 00 00	 call	 tb_displayline
$LN2@tb_printin:

; 380  :         }
; 381  :         depth--;
; 382  :         tb = tb->tb_next;

  00066	48 8b 7f 60	 mov	 rdi, QWORD PTR [rdi+96]
  0006a	ff cb		 dec	 ebx

; 383  :         if (err == 0)

  0006c	85 c0		 test	 eax, eax
  0006e	75 05		 jne	 SHORT $LN1@tb_printin

; 384  :             err = PyErr_CheckSignals();

  00070	e8 00 00 00 00	 call	 PyErr_CheckSignals
$LN1@tb_printin:

; 373  :     }
; 374  :     while (tb != NULL && err == 0) {

  00075	48 85 ff	 test	 rdi, rdi
  00078	74 04		 je	 SHORT $LN15@tb_printin
  0007a	85 c0		 test	 eax, eax
  0007c	74 c2		 je	 SHORT $LL13@tb_printin
$LN15@tb_printin:

; 385  :     }
; 386  :     return err;
; 387  : }

  0007e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00083	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00088	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0008d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00091	5f		 pop	 rdi
  00092	c3		 ret	 0
tb_printinternal ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@JKALNFEK@Traceback?5?$CImost?5recent?5call?5last@ ; `string'
PUBLIC	??_C@_0P@GFPFPEBF@tracebacklimit?$AA@		; `string'
PUBLIC	PyTraceBack_Print
EXTRN	PyErr_Restore:PROC
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_OverflowError:QWORD
EXTRN	PyErr_Occurred:PROC
EXTRN	PyLong_AsLong:PROC
EXTRN	PyErr_Fetch:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyTraceBack_Print DD imagerel $LN26
	DD	imagerel $LN26+82
	DD	imagerel $unwind$PyTraceBack_Print
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyTraceBack_Print DD imagerel $LN26+82
	DD	imagerel $LN26+225
	DD	imagerel $chain$0$PyTraceBack_Print
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyTraceBack_Print DD imagerel $LN26+225
	DD	imagerel $LN26+300
	DD	imagerel $chain$2$PyTraceBack_Print
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyTraceBack_Print DD 020021H
	DD	096400H
	DD	imagerel $LN26
	DD	imagerel $LN26+82
	DD	imagerel $unwind$PyTraceBack_Print
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyTraceBack_Print DD 020521H
	DD	096405H
	DD	imagerel $LN26
	DD	imagerel $LN26+82
	DD	imagerel $unwind$PyTraceBack_Print
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyTraceBack_Print DD 040801H
	DD	070043208H
	DD	030025003H
xdata	ENDS
;	COMDAT ??_C@_0CE@JKALNFEK@Traceback?5?$CImost?5recent?5call?5last@
CONST	SEGMENT
??_C@_0CE@JKALNFEK@Traceback?5?$CImost?5recent?5call?5last@ DB 'Traceback'
	DB	' (most recent call last):', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GFPFPEBF@tracebacklimit?$AA@
CONST	SEGMENT
??_C@_0P@GFPFPEBF@tracebacklimit?$AA@ DB 'tracebacklimit', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyTraceBack_Print
_TEXT	SEGMENT
exc_tb$20731 = 64
v$ = 64
f$ = 72
exc_value$20730 = 80
exc_type$20729 = 88
PyTraceBack_Print PROC					; COMDAT

; 393  : {

$LN26:
  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	57		 push	 rdi
  00004	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00008	48 8b ea	 mov	 rbp, rdx
  0000b	48 8b f9	 mov	 rdi, rcx

; 394  :     int err;
; 395  :     PyObject *limitv;
; 396  :     long limit = PyTraceBack_LIMIT;

  0000e	bb e8 03 00 00	 mov	 ebx, 1000		; 000003e8H

; 397  : 
; 398  :     if (v == NULL)

  00013	48 85 c9	 test	 rcx, rcx
  00016	75 0a		 jne	 SHORT $LN21@PyTraceBac@2

; 399  :         return 0;

  00018	33 c0		 xor	 eax, eax

; 429  :     return err;
; 430  : }

  0001a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001e	5f		 pop	 rdi
  0001f	5d		 pop	 rbp
  00020	5b		 pop	 rbx
  00021	c3		 ret	 0
$LN21@PyTraceBac@2:

; 400  :     if (!PyTraceBack_Check(v)) {

  00022	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTraceBack_Type
  00029	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0002d	74 1c		 je	 SHORT $LN20@PyTraceBac@2

; 401  :         PyErr_BadInternalCall();

  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@HFAOEPCJ@?4?4?2Python?2traceback?4c?$AA@
  00036	ba 91 01 00 00	 mov	 edx, 401		; 00000191H
  0003b	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 402  :         return -1;

  00040	83 c8 ff	 or	 eax, -1

; 429  :     return err;
; 430  : }

  00043	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00047	5f		 pop	 rdi
  00048	5d		 pop	 rbp
  00049	5b		 pop	 rbx
  0004a	c3		 ret	 0
$LN20@PyTraceBac@2:

; 403  :     }
; 404  :     limitv = PySys_GetObject("tracebacklimit");

  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@GFPFPEBF@tracebacklimit?$AA@
  00052	48 89 74 24 48	 mov	 QWORD PTR [rsp+72], rsi
  00057	e8 00 00 00 00	 call	 PySys_GetObject
  0005c	48 8b f0	 mov	 rsi, rax

; 405  :     if (limitv) {

  0005f	48 85 c0	 test	 rax, rax
  00062	0f 84 96 00 00
	00		 je	 $LN19@PyTraceBac@2

; 406  :         PyObject *exc_type, *exc_value, *exc_tb;
; 407  : 
; 408  :         PyErr_Fetch(&exc_type, &exc_value, &exc_tb);

  00068	4c 8d 44 24 40	 lea	 r8, QWORD PTR exc_tb$20731[rsp]
  0006d	48 8d 54 24 50	 lea	 rdx, QWORD PTR exc_value$20730[rsp]
  00072	48 8d 4c 24 58	 lea	 rcx, QWORD PTR exc_type$20729[rsp]
  00077	e8 00 00 00 00	 call	 PyErr_Fetch

; 409  :         limit = PyLong_AsLong(limitv);

  0007c	48 8b ce	 mov	 rcx, rsi
  0007f	e8 00 00 00 00	 call	 PyLong_AsLong
  00084	8b d8		 mov	 ebx, eax

; 410  :         if (limit == -1 && PyErr_Occurred()) {

  00086	83 f8 ff	 cmp	 eax, -1
  00089	75 56		 jne	 SHORT $LN18@PyTraceBac@2
  0008b	e8 00 00 00 00	 call	 PyErr_Occurred
  00090	48 85 c0	 test	 rax, rax
  00093	74 50		 je	 SHORT $LN24@PyTraceBac@2

; 411  :             if (PyErr_ExceptionMatches(PyExc_OverflowError)) {

  00095	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  0009c	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  000a1	85 c0		 test	 eax, eax

; 419  :             }

  000a3	75 40		 jne	 SHORT $LN24@PyTraceBac@2

; 412  :                 limit = PyTraceBack_LIMIT;
; 413  :             }
; 414  :             else {
; 415  :                 Py_XDECREF(exc_type);

  000a5	48 8b 4c 24 58	 mov	 rcx, QWORD PTR exc_type$20729[rsp]
  000aa	48 85 c9	 test	 rcx, rcx
  000ad	74 05		 je	 SHORT $LN14@PyTraceBac@2
  000af	e8 00 00 00 00	 call	 _Py_DecRef
$LN14@PyTraceBac@2:

; 416  :                 Py_XDECREF(exc_value);

  000b4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR exc_value$20730[rsp]
  000b9	48 85 c9	 test	 rcx, rcx
  000bc	74 05		 je	 SHORT $LN10@PyTraceBac@2
  000be	e8 00 00 00 00	 call	 _Py_DecRef
$LN10@PyTraceBac@2:

; 417  :                 Py_XDECREF(exc_tb);

  000c3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR exc_tb$20731[rsp]
  000c8	48 85 c9	 test	 rcx, rcx
  000cb	74 05		 je	 SHORT $LN6@PyTraceBac@2
  000cd	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@PyTraceBac@2:

; 418  :                 return 0;

  000d2	33 c0		 xor	 eax, eax
  000d4	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]

; 429  :     return err;
; 430  : }

  000d9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000dd	5f		 pop	 rdi
  000de	5d		 pop	 rbp
  000df	5b		 pop	 rbx
  000e0	c3		 ret	 0
$LN18@PyTraceBac@2:

; 420  :         }
; 421  :         else if (limit <= 0) {

  000e1	85 c0		 test	 eax, eax
  000e3	7f 05		 jg	 SHORT $LN2@PyTraceBac@2
$LN24@PyTraceBac@2:

; 422  :             limit = PyTraceBack_LIMIT;

  000e5	bb e8 03 00 00	 mov	 ebx, 1000		; 000003e8H
$LN2@PyTraceBac@2:

; 423  :         }
; 424  :         PyErr_Restore(exc_type, exc_value, exc_tb);

  000ea	4c 8b 44 24 40	 mov	 r8, QWORD PTR exc_tb$20731[rsp]
  000ef	48 8b 54 24 50	 mov	 rdx, QWORD PTR exc_value$20730[rsp]
  000f4	48 8b 4c 24 58	 mov	 rcx, QWORD PTR exc_type$20729[rsp]
  000f9	e8 00 00 00 00	 call	 PyErr_Restore
$LN19@PyTraceBac@2:

; 425  :     }
; 426  :     err = PyFile_WriteString("Traceback (most recent call last):\n", f);

  000fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@JKALNFEK@Traceback?5?$CImost?5recent?5call?5last@
  00105	48 8b d5	 mov	 rdx, rbp
  00108	e8 00 00 00 00	 call	 PyFile_WriteString

; 427  :     if (!err)

  0010d	85 c0		 test	 eax, eax
  0010f	75 0e		 jne	 SHORT $LN1@PyTraceBac@2

; 428  :         err = tb_printinternal((PyTracebackObject *)v, f, limit);

  00111	44 8b c3	 mov	 r8d, ebx
  00114	48 8b d5	 mov	 rdx, rbp
  00117	48 8b cf	 mov	 rcx, rdi
  0011a	e8 00 00 00 00	 call	 tb_printinternal
$LN1@PyTraceBac@2:
  0011f	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]

; 429  :     return err;
; 430  : }

  00124	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00128	5f		 pop	 rdi
  00129	5d		 pop	 rbp
  0012a	5b		 pop	 rbx
  0012b	c3		 ret	 0
PyTraceBack_Print ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT reverse_string
_TEXT	SEGMENT
text$ = 8
len$ = 16
reverse_string PROC					; COMDAT

; 438  : {

  00000	4c 8b c9	 mov	 r9, rcx

; 439  :     char tmp;
; 440  :     size_t i, j;
; 441  :     if (len == 0)

  00003	48 85 d2	 test	 rdx, rdx
  00006	74 38		 je	 SHORT $LN1@reverse_st

; 442  :         return;
; 443  :     for (i=0, j=len-1; i < j; i++, j--) {

  00008	48 ff ca	 dec	 rdx
  0000b	74 33		 je	 SHORT $LN1@reverse_st
  0000d	4c 8b d1	 mov	 r10, rcx
  00010	4c 8b c1	 mov	 r8, rcx
  00013	49 f7 da	 neg	 r10
  00016	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL3@reverse_st:

; 444  :         tmp = text[i];
; 445  :         text[i] = text[j];

  00020	42 0f b6 04 0a	 movzx	 eax, BYTE PTR [rdx+r9]
  00025	41 0f b6 08	 movzx	 ecx, BYTE PTR [r8]
  00029	49 ff c0	 inc	 r8
  0002c	41 88 40 ff	 mov	 BYTE PTR [r8-1], al
  00030	4b 8d 04 02	 lea	 rax, QWORD PTR [r10+r8]

; 446  :         text[j] = tmp;

  00034	42 88 0c 0a	 mov	 BYTE PTR [rdx+r9], cl
  00038	48 ff ca	 dec	 rdx
  0003b	48 3b c2	 cmp	 rax, rdx
  0003e	72 e0		 jb	 SHORT $LL3@reverse_st
$LN1@reverse_st:

; 447  :     }
; 448  : }

  00040	f3 c3		 fatret	 0
reverse_string ENDP
_TEXT	ENDS
EXTRN	__imp_write:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$dump_decimal DD imagerel dump_decimal
	DD	imagerel dump_decimal+121
	DD	imagerel $unwind$dump_decimal
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dump_decimal DD 020d01H
	DD	03009320dH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT dump_decimal
_TEXT	SEGMENT
fd$ = 48
value$ = 56
buffer$ = 64
dump_decimal PROC					; COMDAT

; 458  :     char buffer[7];
; 459  :     int len;
; 460  :     if (value < 0 || 999999 < value)

  00000	81 fa 3f 42 0f
	00		 cmp	 edx, 999999		; 000f423fH
  00006	77 6f		 ja	 SHORT $LN9@dump_decim
  00008	53		 push	 rbx
  00009	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 457  : {

  0000d	44 8b ca	 mov	 r9d, edx
  00010	8b d9		 mov	 ebx, ecx

; 461  :         return;
; 462  :     len = 0;

  00012	45 33 db	 xor	 r11d, r11d
  00015	4c 8d 44 24 40	 lea	 r8, QWORD PTR buffer$[rsp]
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL3@dump_decim:

; 463  :     do {
; 464  :         buffer[len] = '0' + (value % 10);

  00020	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H

; 465  :         value /= 10;
; 466  :         len++;

  00025	49 ff c0	 inc	 r8
  00028	41 ff c3	 inc	 r11d
  0002b	41 f7 e9	 imul	 r9d
  0002e	c1 fa 02	 sar	 edx, 2
  00031	8b c2		 mov	 eax, edx
  00033	c1 e8 1f	 shr	 eax, 31
  00036	03 d0		 add	 edx, eax
  00038	0f b6 c2	 movzx	 eax, dl
  0003b	c0 e0 02	 shl	 al, 2
  0003e	8d 0c 10	 lea	 ecx, DWORD PTR [rax+rdx]
  00041	02 c9		 add	 cl, cl
  00043	44 2a c9	 sub	 r9b, cl
  00046	41 80 c1 30	 add	 r9b, 48			; 00000030H
  0004a	45 88 48 ff	 mov	 BYTE PTR [r8-1], r9b
  0004e	44 8b ca	 mov	 r9d, edx

; 467  :     } while (value);

  00051	85 d2		 test	 edx, edx
  00053	75 cb		 jne	 SHORT $LL3@dump_decim

; 468  :     reverse_string(buffer, len);

  00055	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buffer$[rsp]
  0005a	49 63 d3	 movsxd	 rdx, r11d
  0005d	e8 00 00 00 00	 call	 reverse_string

; 469  :     write(fd, buffer, len);

  00062	48 8d 54 24 40	 lea	 rdx, QWORD PTR buffer$[rsp]
  00067	45 8b c3	 mov	 r8d, r11d
  0006a	8b cb		 mov	 ecx, ebx
  0006c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write

; 470  : }

  00072	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00076	5b		 pop	 rbx
$LN9@dump_decim:
  00077	f3 c3		 fatret	 0
dump_decimal ENDP
_TEXT	ENDS
EXTRN	Py_hexdigits:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$dump_hexadecimal DD imagerel dump_hexadecimal
	DD	imagerel dump_hexadecimal+99
	DD	imagerel $unwind$dump_hexadecimal
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dump_hexadecimal DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT dump_hexadecimal
_TEXT	SEGMENT
buffer$ = 32
width$ = 64
value$ = 72
fd$ = 80
dump_hexadecimal PROC					; COMDAT

; 479  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 480  :     int len;
; 481  :     char buffer[sizeof(unsigned long) * 2 + 1];
; 482  :     len = 0;

  00006	45 33 db	 xor	 r11d, r11d

; 487  :     } while (len < width || value);

  00009	4c 63 d1	 movsxd	 r10, ecx
  0000c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Py_hexdigits
  00013	45 8b cb	 mov	 r9d, r11d
  00016	41 8b d8	 mov	 ebx, r8d
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL3@dump_hexad:

; 483  :     do {
; 484  :         buffer[len] = Py_hexdigits[value & 15];
; 485  :         value >>= 4;
; 486  :         len++;

  00020	8b c2		 mov	 eax, edx
  00022	49 ff c1	 inc	 r9
  00025	41 ff c3	 inc	 r11d
  00028	83 e0 0f	 and	 eax, 15
  0002b	c1 ea 04	 shr	 edx, 4
  0002e	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00032	42 88 44 0c 1f	 mov	 BYTE PTR buffer$[rsp+r9-1], al

; 487  :     } while (len < width || value);

  00037	4d 3b ca	 cmp	 r9, r10
  0003a	7c e4		 jl	 SHORT $LL3@dump_hexad
  0003c	85 d2		 test	 edx, edx
  0003e	75 e0		 jne	 SHORT $LL3@dump_hexad

; 488  :     reverse_string(buffer, len);

  00040	48 8d 4c 24 20	 lea	 rcx, QWORD PTR buffer$[rsp]
  00045	49 63 d3	 movsxd	 rdx, r11d
  00048	e8 00 00 00 00	 call	 reverse_string

; 489  :     write(fd, buffer, len);

  0004d	48 8d 54 24 20	 lea	 rdx, QWORD PTR buffer$[rsp]
  00052	45 8b c3	 mov	 r8d, r11d
  00055	8b cb		 mov	 ecx, ebx
  00057	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write

; 490  : }

  0005d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00061	5b		 pop	 rbx
  00062	c3		 ret	 0
dump_hexadecimal ENDP
_TEXT	ENDS
PUBLIC	??_C@_03KHICJKCI@?4?4?4?$AA@			; `string'
PUBLIC	??_C@_02KCNEFICI@?2U?$AA@			; `string'
PUBLIC	??_C@_02DHFAHMIK@?2u?$AA@			; `string'
PUBLIC	??_C@_02ICPOACMH@?2x?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$dump_ascii DD imagerel dump_ascii
	DD	imagerel dump_ascii+108
	DD	imagerel $unwind$dump_ascii
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$dump_ascii DD imagerel dump_ascii+108
	DD	imagerel dump_ascii+154
	DD	imagerel $chain$0$dump_ascii
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$dump_ascii DD imagerel dump_ascii+154
	DD	imagerel dump_ascii+365
	DD	imagerel $chain$2$dump_ascii
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$dump_ascii DD imagerel dump_ascii+365
	DD	imagerel dump_ascii+377
	DD	imagerel $chain$3$dump_ascii
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$dump_ascii DD imagerel dump_ascii+377
	DD	imagerel dump_ascii+411
	DD	imagerel $chain$4$dump_ascii
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$dump_ascii DD 021H
	DD	imagerel dump_ascii
	DD	imagerel dump_ascii+108
	DD	imagerel $unwind$dump_ascii
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$dump_ascii DD 021H
	DD	imagerel dump_ascii+108
	DD	imagerel dump_ascii+154
	DD	imagerel $chain$0$dump_ascii
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$dump_ascii DD 040a21H
	DD	04f40aH
	DD	0c3405H
	DD	imagerel dump_ascii+108
	DD	imagerel dump_ascii+154
	DD	imagerel $chain$0$dump_ascii
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$dump_ascii DD 020521H
	DD	05c405H
	DD	imagerel dump_ascii
	DD	imagerel dump_ascii+108
	DD	imagerel $unwind$dump_ascii
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dump_ascii DD 060c01H
	DD	0e008520cH
	DD	07004d006H
	DD	050026003H
xdata	ENDS
;	COMDAT ??_C@_03KHICJKCI@?4?4?4?$AA@
CONST	SEGMENT
??_C@_03KHICJKCI@?4?4?4?$AA@ DB '...', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02KCNEFICI@?2U?$AA@
CONST	SEGMENT
??_C@_02KCNEFICI@?2U?$AA@ DB '\U', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DHFAHMIK@?2u?$AA@
CONST	SEGMENT
??_C@_02DHFAHMIK@?2u?$AA@ DB '\u', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02ICPOACMH@?2x?$AA@
CONST	SEGMENT
??_C@_02ICPOACMH@?2x?$AA@ DB '\x', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT dump_ascii
_TEXT	SEGMENT
fd$ = 96
c$20839 = 104
text$ = 104
truncated$1$ = 112
dump_ascii PROC						; COMDAT

; 498  : {

  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	41 55		 push	 r13
  00006	41 56		 push	 r14
  00008	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 499  :     PyASCIIObject *ascii = (PyASCIIObject *)text;
; 500  :     Py_ssize_t i, size;
; 501  :     int truncated;
; 502  :     int kind;
; 503  :     void *data = NULL;
; 504  :     wchar_t *wstr = NULL;
; 505  :     Py_UCS4 ch;
; 506  : 
; 507  :     size = ascii->length;
; 508  :     kind = ascii->state.kind;

  0000c	8b 42 70	 mov	 eax, DWORD PTR [rdx+112]
  0000f	4c 8b 6a 60	 mov	 r13, QWORD PTR [rdx+96]
  00013	33 ff		 xor	 edi, edi
  00015	44 8b c0	 mov	 r8d, eax
  00018	44 8b f1	 mov	 r14d, ecx
  0001b	8b ef		 mov	 ebp, edi
  0001d	41 c1 e8 02	 shr	 r8d, 2
  00021	8b f7		 mov	 esi, edi
  00023	41 83 e0 07	 and	 r8d, 7

; 509  :     if (ascii->state.compact) {

  00027	a8 20		 test	 al, 32			; 00000020H
  00029	74 16		 je	 SHORT $LN22@dump_ascii

; 510  :         if (ascii->state.ascii)

  0002b	a8 40		 test	 al, 64			; 00000040H
  0002d	74 09		 je	 SHORT $LN21@dump_ascii

; 511  :             data = ((PyASCIIObject*)text) + 1;

  0002f	48 8d aa 80 00
	00 00		 lea	 rbp, QWORD PTR [rdx+128]

; 512  :         else

  00036	eb 34		 jmp	 SHORT $LN16@dump_ascii
$LN21@dump_ascii:

; 513  :             data = ((PyCompactUnicodeObject*)text) + 1;

  00038	48 8d aa a0 00
	00 00		 lea	 rbp, QWORD PTR [rdx+160]

; 514  :     }
; 515  :     else if (kind != PyUnicode_WCHAR_KIND) {

  0003f	eb 2b		 jmp	 SHORT $LN16@dump_ascii
$LN22@dump_ascii:
  00041	45 85 c0	 test	 r8d, r8d
  00044	74 12		 je	 SHORT $LN18@dump_ascii

; 516  :         data = ((PyUnicodeObject *)text)->data.any;

  00046	48 8b aa a0 00
	00 00		 mov	 rbp, QWORD PTR [rdx+160]

; 517  :         if (data == NULL)

  0004d	48 85 ed	 test	 rbp, rbp
  00050	0f 84 39 01 00
	00		 je	 $LN1@dump_ascii

; 518  :             return;
; 519  :     }
; 520  :     else {

  00056	eb 14		 jmp	 SHORT $LN16@dump_ascii
$LN18@dump_ascii:

; 521  :         wstr = ((PyASCIIObject *)text)->wstr;

  00058	48 8b 72 78	 mov	 rsi, QWORD PTR [rdx+120]

; 522  :         if (wstr == NULL)

  0005c	48 85 f6	 test	 rsi, rsi
  0005f	0f 84 2a 01 00
	00		 je	 $LN1@dump_ascii

; 523  :             return;
; 524  :         size = ((PyCompactUnicodeObject *)text)->wstr_length;

  00065	4c 8b aa 90 00
	00 00		 mov	 r13, QWORD PTR [rdx+144]
$LN16@dump_ascii:
  0006c	4c 89 64 24 28	 mov	 QWORD PTR [rsp+40], r12

; 525  :     }
; 526  : 
; 527  :     if (MAX_STRING_LENGTH < size) {

  00071	49 81 fd f4 01
	00 00		 cmp	 r13, 500		; 000001f4H
  00078	7e 10		 jle	 SHORT $LN14@dump_ascii

; 528  :         size = MAX_STRING_LENGTH;

  0007a	41 bd f4 01 00
	00		 mov	 r13d, 500		; 000001f4H

; 529  :         truncated = 1;

  00080	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR truncated$1$[rsp], 1

; 530  :     }
; 531  :     else

  00088	eb 04		 jmp	 SHORT $LN13@dump_ascii
$LN14@dump_ascii:

; 532  :         truncated = 0;

  0008a	89 7c 24 70	 mov	 DWORD PTR truncated$1$[rsp], edi
$LN13@dump_ascii:

; 535  :         if (kind != PyUnicode_WCHAR_KIND)

  0008e	4d 63 e0	 movsxd	 r12, r8d
  00091	4d 85 ed	 test	 r13, r13
  00094	0f 8e d3 00 00
	00		 jle	 $LN10@dump_ascii

; 533  : 
; 534  :     for (i=0; i < size; i++) {

  0009a	48 89 5c 24 60	 mov	 QWORD PTR [rsp+96], rbx
  0009f	4c 89 7c 24 20	 mov	 QWORD PTR [rsp+32], r15
  000a4	4c 8b fd	 mov	 r15, rbp
  000a7	4c 2b fe	 sub	 r15, rsi
  000aa	66 0f 1f 44 00
	00		 npad	 6
$LL12@dump_ascii:

; 535  :         if (kind != PyUnicode_WCHAR_KIND)

  000b0	4d 85 e4	 test	 r12, r12
  000b3	74 1f		 je	 SHORT $LN9@dump_ascii

; 536  :             ch = PyUnicode_READ(kind, data, i);

  000b5	49 83 fc 01	 cmp	 r12, 1
  000b9	75 06		 jne	 SHORT $LN27@dump_ascii
  000bb	0f b6 1c 2f	 movzx	 ebx, BYTE PTR [rdi+rbp]
  000bf	eb 16		 jmp	 SHORT $LN8@dump_ascii
$LN27@dump_ascii:
  000c1	49 83 fc 02	 cmp	 r12, 2
  000c5	75 07		 jne	 SHORT $LN25@dump_ascii
  000c7	41 0f b7 1c 37	 movzx	 ebx, WORD PTR [r15+rsi]
  000cc	eb 09		 jmp	 SHORT $LN8@dump_ascii
$LN25@dump_ascii:
  000ce	8b 5c bd 00	 mov	 ebx, DWORD PTR [rbp+rdi*4]

; 537  :         else

  000d2	eb 03		 jmp	 SHORT $LN8@dump_ascii
$LN9@dump_ascii:

; 538  :             ch = wstr[i];

  000d4	0f b7 1e	 movzx	 ebx, WORD PTR [rsi]
$LN8@dump_ascii:

; 539  :         if (ch < 128) {
; 540  :             char c = (char)ch;
; 541  :             write(fd, &c, 1);

  000d7	41 8b ce	 mov	 ecx, r14d
  000da	81 fb 80 00 00
	00		 cmp	 ebx, 128		; 00000080H
  000e0	73 17		 jae	 SHORT $LN7@dump_ascii
  000e2	48 8d 54 24 68	 lea	 rdx, QWORD PTR c$20839[rsp]
  000e7	41 b8 01 00 00
	00		 mov	 r8d, 1
  000ed	88 5c 24 68	 mov	 BYTE PTR c$20839[rsp], bl
  000f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  000f7	eb 5a		 jmp	 SHORT $LN11@dump_ascii
$LN7@dump_ascii:

; 542  :         }
; 543  :         else if (ch < 0xff) {
; 544  :             PUTS(fd, "\\x");

  000f9	41 b8 02 00 00
	00		 mov	 r8d, 2
  000ff	81 fb ff 00 00
	00		 cmp	 ebx, 255		; 000000ffH
  00105	73 14		 jae	 SHORT $LN5@dump_ascii
  00107	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02ICPOACMH@?2x?$AA@
  0010e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write

; 545  :             dump_hexadecimal(2, ch, fd);

  00114	b9 02 00 00 00	 mov	 ecx, 2
  00119	eb 2e		 jmp	 SHORT $LN31@dump_ascii
$LN5@dump_ascii:

; 546  :         }
; 547  :         else if (ch < 0xffff) {

  0011b	81 fb ff ff 00
	00		 cmp	 ebx, 65535		; 0000ffffH
  00121	73 14		 jae	 SHORT $LN3@dump_ascii

; 548  :             PUTS(fd, "\\u");

  00123	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02DHFAHMIK@?2u?$AA@
  0012a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write

; 549  :             dump_hexadecimal(4, ch, fd);

  00130	b9 04 00 00 00	 mov	 ecx, 4

; 550  :         }
; 551  :         else {

  00135	eb 12		 jmp	 SHORT $LN31@dump_ascii
$LN3@dump_ascii:

; 552  :             PUTS(fd, "\\U");

  00137	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02KCNEFICI@?2U?$AA@
  0013e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write

; 553  :             dump_hexadecimal(8, ch, fd);

  00144	b9 08 00 00 00	 mov	 ecx, 8
$LN31@dump_ascii:
  00149	45 8b c6	 mov	 r8d, r14d
  0014c	8b d3		 mov	 edx, ebx
  0014e	e8 00 00 00 00	 call	 dump_hexadecimal
$LN11@dump_ascii:

; 533  : 
; 534  :     for (i=0; i < size; i++) {

  00153	48 ff c7	 inc	 rdi
  00156	48 83 c6 02	 add	 rsi, 2
  0015a	49 3b fd	 cmp	 rdi, r13
  0015d	0f 8c 4d ff ff
	ff		 jl	 $LL12@dump_ascii
  00163	4c 8b 7c 24 20	 mov	 r15, QWORD PTR [rsp+32]
  00168	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
$LN10@dump_ascii:

; 554  :         }
; 555  :     }
; 556  :     if (truncated)

  0016d	83 7c 24 70 00	 cmp	 DWORD PTR truncated$1$[rsp], 0
  00172	4c 8b 64 24 28	 mov	 r12, QWORD PTR [rsp+40]
  00177	74 16		 je	 SHORT $LN1@dump_ascii

; 557  :         PUTS(fd, "...");

  00179	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03KHICJKCI@?4?4?4?$AA@
  00180	41 b8 03 00 00
	00		 mov	 r8d, 3
  00186	41 8b ce	 mov	 ecx, r14d
  00189	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
$LN1@dump_ascii:

; 558  : }

  0018f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00193	41 5e		 pop	 r14
  00195	41 5d		 pop	 r13
  00197	5f		 pop	 rdi
  00198	5e		 pop	 rsi
  00199	5d		 pop	 rbp
  0019a	c3		 ret	 0
dump_ascii ENDP
_TEXT	ENDS
PUBLIC	??_C@_04GJPPFNOH@?5in?5?$AA@			; `string'
PUBLIC	??_C@_07BAMMBJFH@?0?5line?5?$AA@		; `string'
PUBLIC	??_C@_03BBKEAIF@?$DP?$DP?$DP?$AA@		; `string'
PUBLIC	??_C@_01BJJEKLCA@?$CC?$AA@			; `string'
PUBLIC	??_C@_07ELFNOCMD@?5?5File?5?$AA@		; `string'
EXTRN	PyCode_Addr2Line:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$dump_frame DD imagerel dump_frame
	DD	imagerel dump_frame+314
	DD	imagerel $unwind$dump_frame
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dump_frame DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_04GJPPFNOH@?5in?5?$AA@
CONST	SEGMENT
??_C@_04GJPPFNOH@?5in?5?$AA@ DB ' in ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BAMMBJFH@?0?5line?5?$AA@
CONST	SEGMENT
??_C@_07BAMMBJFH@?0?5line?5?$AA@ DB ', line ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03BBKEAIF@?$DP?$DP?$DP?$AA@
CONST	SEGMENT
??_C@_03BBKEAIF@?$DP?$DP?$DP?$AA@ DB '???', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01BJJEKLCA@?$CC?$AA@
CONST	SEGMENT
??_C@_01BJJEKLCA@?$CC?$AA@ DB '"', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07ELFNOCMD@?5?5File?5?$AA@
CONST	SEGMENT
??_C@_07ELFNOCMD@?5?5File?5?$AA@ DB '  File ', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT dump_frame
_TEXT	SEGMENT
fd$ = 48
frame$ = 56
dump_frame PROC						; COMDAT

; 566  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 567  :     PyCodeObject *code;
; 568  :     int lineno;
; 569  : 
; 570  :     code = frame->f_code;

  0000f	48 8b 72 78	 mov	 rsi, QWORD PTR [rdx+120]
  00013	48 8b da	 mov	 rbx, rdx

; 571  :     PUTS(fd, "  File ");

  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07ELFNOCMD@?5?5File?5?$AA@
  0001d	41 b8 07 00 00
	00		 mov	 r8d, 7
  00023	8b f9		 mov	 edi, ecx
  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write

; 572  :     if (code != NULL && code->co_filename != NULL
; 573  :         && PyUnicode_Check(code->co_filename))

  0002b	48 85 f6	 test	 rsi, rsi
  0002e	74 4e		 je	 SHORT $LN4@dump_frame
  00030	48 8b 86 b0 00
	00 00		 mov	 rax, QWORD PTR [rsi+176]
  00037	48 85 c0	 test	 rax, rax
  0003a	74 42		 je	 SHORT $LN4@dump_frame
  0003c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00040	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  0004a	74 32		 je	 SHORT $LN4@dump_frame

; 574  :     {
; 575  :         write(fd, "\"", 1);

  0004c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01BJJEKLCA@?$CC?$AA@
  00053	41 b8 01 00 00
	00		 mov	 r8d, 1
  00059	8b cf		 mov	 ecx, edi
  0005b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write

; 576  :         dump_ascii(fd, code->co_filename);

  00061	48 8b 96 b0 00
	00 00		 mov	 rdx, QWORD PTR [rsi+176]
  00068	8b cf		 mov	 ecx, edi
  0006a	e8 00 00 00 00	 call	 dump_ascii

; 577  :         write(fd, "\"", 1);

  0006f	41 b8 01 00 00
	00		 mov	 r8d, 1
  00075	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01BJJEKLCA@?$CC?$AA@

; 578  :     } else {

  0007c	eb 0d		 jmp	 SHORT $LN7@dump_frame
$LN4@dump_frame:

; 579  :         PUTS(fd, "???");

  0007e	41 b8 03 00 00
	00		 mov	 r8d, 3
  00084	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03BBKEAIF@?$DP?$DP?$DP?$AA@
$LN7@dump_frame:
  0008b	8b cf		 mov	 ecx, edi
  0008d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write

; 580  :     }
; 581  : 
; 582  :     /* PyFrame_GetLineNumber() was introduced in Python 2.7.0 and 3.2.0 */
; 583  :     lineno = PyCode_Addr2Line(code, frame->f_lasti);

  00093	8b 93 d0 00 00
	00		 mov	 edx, DWORD PTR [rbx+208]
  00099	48 8b ce	 mov	 rcx, rsi
  0009c	e8 00 00 00 00	 call	 PyCode_Addr2Line

; 584  :     PUTS(fd, ", line ");

  000a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07BAMMBJFH@?0?5line?5?$AA@
  000a8	41 b8 07 00 00
	00		 mov	 r8d, 7
  000ae	8b cf		 mov	 ecx, edi
  000b0	8b d8		 mov	 ebx, eax
  000b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write

; 585  :     dump_decimal(fd, lineno);

  000b8	8b d3		 mov	 edx, ebx
  000ba	8b cf		 mov	 ecx, edi
  000bc	e8 00 00 00 00	 call	 dump_decimal

; 586  :     PUTS(fd, " in ");

  000c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04GJPPFNOH@?5in?5?$AA@
  000c8	41 b8 04 00 00
	00		 mov	 r8d, 4
  000ce	8b cf		 mov	 ecx, edi
  000d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write

; 587  : 
; 588  :     if (code != NULL && code->co_name != NULL
; 589  :         && PyUnicode_Check(code->co_name))

  000d6	48 85 f6	 test	 rsi, rsi
  000d9	74 25		 je	 SHORT $LN2@dump_frame
  000db	48 8b 96 b8 00
	00 00		 mov	 rdx, QWORD PTR [rsi+184]
  000e2	48 85 d2	 test	 rdx, rdx
  000e5	74 19		 je	 SHORT $LN2@dump_frame
  000e7	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  000eb	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  000f5	74 09		 je	 SHORT $LN2@dump_frame

; 590  :         dump_ascii(fd, code->co_name);

  000f7	8b cf		 mov	 ecx, edi
  000f9	e8 00 00 00 00	 call	 dump_ascii

; 591  :     else

  000fe	eb 15		 jmp	 SHORT $LN1@dump_frame
$LN2@dump_frame:

; 592  :         PUTS(fd, "???");

  00100	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03BBKEAIF@?$DP?$DP?$DP?$AA@
  00107	41 b8 03 00 00
	00		 mov	 r8d, 3
  0010d	8b cf		 mov	 ecx, edi
  0010f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
$LN1@dump_frame:

; 593  : 
; 594  :     write(fd, "\n", 1);

  00115	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  0011c	41 b8 01 00 00
	00		 mov	 r8d, 1
  00122	8b cf		 mov	 ecx, edi

; 595  : }

  00124	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00129	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0012e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00132	5f		 pop	 rdi
  00133	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_write
dump_frame ENDP
_TEXT	ENDS
PUBLIC	??_C@_06FMKCNGCD@?5?5?4?4?4?6?$AA@		; `string'
PUBLIC	??_C@_0CF@DHIBPHGN@Traceback?5?$CImost?5recent?5call?5firs@ ; `string'
EXTRN	_PyThreadState_GetFrame:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$dump_traceback DD imagerel dump_traceback
	DD	imagerel dump_traceback+56
	DD	imagerel $unwind$dump_traceback
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$dump_traceback DD imagerel dump_traceback+56
	DD	imagerel dump_traceback+145
	DD	imagerel $chain$1$dump_traceback
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$dump_traceback DD imagerel dump_traceback+145
	DD	imagerel dump_traceback+156
	DD	imagerel $chain$2$dump_traceback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$dump_traceback DD 021H
	DD	imagerel dump_traceback
	DD	imagerel dump_traceback+56
	DD	imagerel $unwind$dump_traceback
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$dump_traceback DD 040a21H
	DD	07740aH
	DD	065405H
	DD	imagerel dump_traceback
	DD	imagerel dump_traceback+56
	DD	imagerel $unwind$dump_traceback
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dump_traceback DD 040a01H
	DD	08340aH
	DD	06006320aH
xdata	ENDS
;	COMDAT ??_C@_06FMKCNGCD@?5?5?4?4?4?6?$AA@
CONST	SEGMENT
??_C@_06FMKCNGCD@?5?5?4?4?4?6?$AA@ DB '  ...', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DHIBPHGN@Traceback?5?$CImost?5recent?5call?5firs@
CONST	SEGMENT
??_C@_0CF@DHIBPHGN@Traceback?5?$CImost?5recent?5call?5firs@ DB 'Traceback'
	DB	' (most recent call first):', 0aH, 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT dump_traceback
_TEXT	SEGMENT
fd$ = 48
tstate$ = 56
write_header$ = 64
dump_traceback PROC					; COMDAT

; 599  : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	8b f1		 mov	 esi, ecx

; 600  :     PyFrameObject *frame;
; 601  :     unsigned int depth;
; 602  : 
; 603  :     if (write_header)

  0000f	45 85 c0	 test	 r8d, r8d
  00012	74 13		 je	 SHORT $LN6@dump_trace

; 604  :         PUTS(fd, "Traceback (most recent call first):\n");

  00014	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@DHIBPHGN@Traceback?5?$CImost?5recent?5call?5firs@
  0001b	41 b8 24 00 00
	00		 mov	 r8d, 36			; 00000024H
  00021	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
$LN6@dump_trace:

; 605  : 
; 606  :     frame = _PyThreadState_GetFrame(tstate);

  00027	48 8b cb	 mov	 rcx, rbx
  0002a	ff 15 00 00 00
	00		 call	 QWORD PTR _PyThreadState_GetFrame
  00030	48 8b d8	 mov	 rbx, rax

; 607  :     if (frame == NULL)

  00033	48 85 c0	 test	 rax, rax
  00036	74 59		 je	 SHORT $LN11@dump_trace

; 608  :         return;
; 609  : 
; 610  :     depth = 0;

  00038	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp
  0003d	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  00042	33 ff		 xor	 edi, edi
  00044	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:PyFrame_Type
  0004b	0f 1f 44 00 00	 npad	 5
$LL4@dump_trace:

; 611  :     while (frame != NULL) {
; 612  :         if (MAX_FRAME_DEPTH <= depth) {

  00050	83 ff 64	 cmp	 edi, 100		; 00000064H
  00053	73 1d		 jae	 SHORT $LN10@dump_trace

; 614  :             break;
; 615  :         }
; 616  :         if (!PyFrame_Check(frame))

  00055	48 39 6b 58	 cmp	 QWORD PTR [rbx+88], rbp
  00059	75 2c		 jne	 SHORT $LN14@dump_trace

; 617  :             break;
; 618  :         dump_frame(fd, frame);

  0005b	48 8b d3	 mov	 rdx, rbx
  0005e	8b ce		 mov	 ecx, esi
  00060	e8 00 00 00 00	 call	 dump_frame

; 619  :         frame = frame->f_back;

  00065	48 8b 5b 70	 mov	 rbx, QWORD PTR [rbx+112]

; 620  :         depth++;

  00069	ff c7		 inc	 edi
  0006b	48 85 db	 test	 rbx, rbx
  0006e	75 e0		 jne	 SHORT $LL4@dump_trace

; 614  :             break;
; 615  :         }
; 616  :         if (!PyFrame_Check(frame))

  00070	eb 15		 jmp	 SHORT $LN14@dump_trace
$LN10@dump_trace:

; 613  :             PUTS(fd, "  ...\n");

  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06FMKCNGCD@?5?5?4?4?4?6?$AA@
  00079	41 b8 06 00 00
	00		 mov	 r8d, 6
  0007f	8b ce		 mov	 ecx, esi
  00081	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
$LN14@dump_trace:
  00087	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
  0008c	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]
$LN11@dump_trace:

; 621  :     }
; 622  : }

  00091	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00096	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009a	5e		 pop	 rsi
  0009b	c3		 ret	 0
dump_traceback ENDP
_TEXT	ENDS
PUBLIC	_Py_DumpTraceback
; Function compile flags: /Ogtpy
;	COMDAT _Py_DumpTraceback
_TEXT	SEGMENT
fd$ = 8
tstate$ = 16
_Py_DumpTraceback PROC					; COMDAT

; 627  :     dump_traceback(fd, tstate, 1);

  00000	41 b8 01 00 00
	00		 mov	 r8d, 1

; 628  : }

  00006	e9 00 00 00 00	 jmp	 dump_traceback
_Py_DumpTraceback ENDP
_TEXT	ENDS
PUBLIC	??_C@_02NDKNKOCB@?3?6?$AA@			; `string'
PUBLIC	??_C@_09LAGPNDIK@Thread?50x?$AA@		; `string'
PUBLIC	??_C@_0BC@BABFAHCN@Current?5thread?50x?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$write_thread_id DD imagerel write_thread_id
	DD	imagerel write_thread_id+105
	DD	imagerel $unwind$write_thread_id
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$write_thread_id DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_02NDKNKOCB@?3?6?$AA@
CONST	SEGMENT
??_C@_02NDKNKOCB@?3?6?$AA@ DB ':', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09LAGPNDIK@Thread?50x?$AA@
CONST	SEGMENT
??_C@_09LAGPNDIK@Thread?50x?$AA@ DB 'Thread 0x', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BABFAHCN@Current?5thread?50x?$AA@
CONST	SEGMENT
??_C@_0BC@BABFAHCN@Current?5thread?50x?$AA@ DB 'Current thread 0x', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT write_thread_id
_TEXT	SEGMENT
fd$ = 48
tstate$ = 56
is_current$ = 64
write_thread_id PROC					; COMDAT

; 637  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fa	 mov	 rdi, rdx
  0000d	8b d9		 mov	 ebx, ecx

; 638  :     if (is_current)

  0000f	45 85 c0	 test	 r8d, r8d
  00012	74 0f		 je	 SHORT $LN2@write_thre

; 639  :         PUTS(fd, "Current thread 0x");

  00014	41 b8 11 00 00
	00		 mov	 r8d, 17
  0001a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@BABFAHCN@Current?5thread?50x?$AA@

; 640  :     else

  00021	eb 0d		 jmp	 SHORT $LN5@write_thre
$LN2@write_thre:

; 641  :         PUTS(fd, "Thread 0x");

  00023	41 b8 09 00 00
	00		 mov	 r8d, 9
  00029	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09LAGPNDIK@Thread?50x?$AA@
$LN5@write_thre:
  00030	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write

; 642  :     dump_hexadecimal(sizeof(long)*2, (unsigned long)tstate->thread_id, fd);

  00036	8b 97 90 00 00
	00		 mov	 edx, DWORD PTR [rdi+144]
  0003c	44 8b c3	 mov	 r8d, ebx
  0003f	b9 08 00 00 00	 mov	 ecx, 8
  00044	e8 00 00 00 00	 call	 dump_hexadecimal

; 643  :     PUTS(fd, ":\n");

  00049	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02NDKNKOCB@?3?6?$AA@
  00050	41 b8 02 00 00
	00		 mov	 r8d, 2
  00056	8b cb		 mov	 ecx, ebx

; 644  : }

  00058	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00061	5f		 pop	 rdi
  00062	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_write
write_thread_id ENDP
_TEXT	ENDS
PUBLIC	??_C@_04MPPNMCOK@?4?4?4?6?$AA@			; `string'
PUBLIC	??_C@_0CE@BJCCNHOB@unable?5to?5get?5the?5thread?5head?5st@ ; `string'
PUBLIC	_Py_DumpTracebackThreads
EXTRN	PyThreadState_Next:PROC
EXTRN	PyInterpreterState_ThreadHead:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DumpTracebackThreads DD imagerel $LN11
	DD	imagerel $LN11+205
	DD	imagerel $unwind$_Py_DumpTracebackThreads
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DumpTracebackThreads DD 084301H
	DD	066443H
	DD	08540fH
	DD	07340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_04MPPNMCOK@?4?4?4?6?$AA@
CONST	SEGMENT
??_C@_04MPPNMCOK@?4?4?4?6?$AA@ DB '...', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@BJCCNHOB@unable?5to?5get?5the?5thread?5head?5st@
CONST	SEGMENT
??_C@_0CE@BJCCNHOB@unable?5to?5get?5the?5thread?5head?5st@ DB 'unable to '
	DB	'get the thread head state', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DumpTracebackThreads
_TEXT	SEGMENT
fd$ = 48
interp$ = 56
current_thread$ = 64
_Py_DumpTracebackThreads PROC				; COMDAT

; 649  : {

$LN11:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	8b f9		 mov	 edi, ecx

; 650  :     PyThreadState *tstate;
; 651  :     unsigned int nthreads;
; 652  : 
; 653  :     /* Get the current interpreter from the current thread */
; 654  :     tstate = PyInterpreterState_ThreadHead(interp);

  00011	48 8b ca	 mov	 rcx, rdx
  00014	49 8b e8	 mov	 rbp, r8
  00017	48 8b da	 mov	 rbx, rdx
  0001a	e8 00 00 00 00	 call	 PyInterpreterState_ThreadHead

; 655  :     if (tstate == NULL)

  0001f	48 85 c0	 test	 rax, rax
  00022	75 17		 jne	 SHORT $LN6@Py_DumpTra

; 656  :         return "unable to get the thread head state";

  00024	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0CE@BJCCNHOB@unable?5to?5get?5the?5thread?5head?5st@

; 674  : 
; 675  :     return NULL;
; 676  : }

  0002b	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00030	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00035	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00039	5f		 pop	 rdi
  0003a	c3		 ret	 0
$LN6@Py_DumpTra:

; 657  : 
; 658  :     /* Dump the traceback of each thread */
; 659  :     tstate = PyInterpreterState_ThreadHead(interp);

  0003b	48 8b cb	 mov	 rcx, rbx
  0003e	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  00043	e8 00 00 00 00	 call	 PyInterpreterState_ThreadHead

; 660  :     nthreads = 0;

  00048	33 db		 xor	 ebx, ebx
  0004a	48 8b f0	 mov	 rsi, rax
  0004d	0f 1f 00	 npad	 3
$LL5@Py_DumpTra:

; 661  :     do
; 662  :     {
; 663  :         if (nthreads != 0)

  00050	85 db		 test	 ebx, ebx
  00052	74 15		 je	 SHORT $LN2@Py_DumpTra

; 664  :             write(fd, "\n", 1);

  00054	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  0005b	41 b8 01 00 00
	00		 mov	 r8d, 1
  00061	8b cf		 mov	 ecx, edi
  00063	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
$LN2@Py_DumpTra:

; 667  :             break;
; 668  :         }
; 669  :         write_thread_id(fd, tstate, tstate == current_thread);

  00069	8b cf		 mov	 ecx, edi
  0006b	83 fb 64	 cmp	 ebx, 100		; 00000064H
  0006e	73 33		 jae	 SHORT $LN10@Py_DumpTra
  00070	45 33 c0	 xor	 r8d, r8d
  00073	48 3b f5	 cmp	 rsi, rbp
  00076	48 8b d6	 mov	 rdx, rsi
  00079	41 0f 94 c0	 sete	 r8b
  0007d	e8 00 00 00 00	 call	 write_thread_id

; 670  :         dump_traceback(fd, tstate, 0);

  00082	45 33 c0	 xor	 r8d, r8d
  00085	48 8b d6	 mov	 rdx, rsi
  00088	8b cf		 mov	 ecx, edi
  0008a	e8 00 00 00 00	 call	 dump_traceback

; 671  :         tstate = PyThreadState_Next(tstate);

  0008f	48 8b ce	 mov	 rcx, rsi
  00092	e8 00 00 00 00	 call	 PyThreadState_Next

; 672  :         nthreads++;

  00097	ff c3		 inc	 ebx
  00099	48 8b f0	 mov	 rsi, rax

; 673  :     } while (tstate != NULL);

  0009c	48 85 c0	 test	 rax, rax
  0009f	75 af		 jne	 SHORT $LL5@Py_DumpTra
  000a1	eb 13		 jmp	 SHORT $LN3@Py_DumpTra
$LN10@Py_DumpTra:

; 665  :         if (nthreads >= MAX_NTHREADS) {
; 666  :             PUTS(fd, "...\n");

  000a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04MPPNMCOK@?4?4?4?6?$AA@
  000aa	41 b8 04 00 00
	00		 mov	 r8d, 4
  000b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
$LN3@Py_DumpTra:

; 674  : 
; 675  :     return NULL;
; 676  : }

  000b6	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  000bb	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000c0	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  000c5	33 c0		 xor	 eax, eax
  000c7	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000cb	5f		 pop	 rdi
  000cc	c3		 ret	 0
_Py_DumpTracebackThreads ENDP
_TEXT	ENDS
END
