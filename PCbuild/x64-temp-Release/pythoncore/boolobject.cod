; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_04DDKJGDCM@bool?$AA@			; `string'
PUBLIC	??_C@_01FJMABOPO@x?$AA@				; `string'
PUBLIC	PyBool_Type
PUBLIC	_Py_FalseStruct
PUBLIC	_Py_TrueStruct
EXTRN	PyLong_Type:BYTE
EXTRN	PyType_Type:BYTE
_BSS	SEGMENT
false_str DQ	01H DUP (?)
true_str DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_04DDKJGDCM@bool?$AA@
CONST	SEGMENT
??_C@_04DDKJGDCM@bool?$AA@ DB 'bool', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
?kwlist@?1??bool_new@@9@9 DQ FLAT:??_C@_01FJMABOPO@x?$AA@ ; `bool_new'::`2'::kwlist
	DQ	0000000000000000H
bool_doc DB	'bool(x) -> bool', 0aH, 0aH, 'Returns True when the argum'
	DB	'ent x is true, False otherwise.', 0aH, 'The builtins True and'
	DB	' False are the only two instances of the class bool.', 0aH, 'T'
	DB	'he class bool is a subclass of the class int, and cannot be s'
	DB	'ubclassed.', 00H
	ORG $+1
bool_as_number DQ 0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:bool_and
	DQ	FLAT:bool_xor
	DQ	FLAT:bool_or
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
PyBool_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_04DDKJGDCM@bool?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:bool_repr
	DQ	FLAT:bool_as_number
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:bool_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	FLAT:bool_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyLong_Type
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:bool_new
	ORG $+72
_Py_FalseStruct DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyBool_Type
	DQ	0000000000000000H
	ORG $+8
	DD	00H
	ORG $+12
_Py_TrueStruct DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyBool_Type
	DQ	0000000000000001H
	ORG $+8
	DD	01H
	ORG $+12
_DATA	ENDS
;	COMDAT ??_C@_01FJMABOPO@x?$AA@
CONST	SEGMENT
??_C@_01FJMABOPO@x?$AA@ DB 'x', 00H			; `string'
CONST	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_05MKDOIIA@False?$AA@			; `string'
PUBLIC	??_C@_04HPMIDMKH@True?$AA@			; `string'
EXTRN	PyUnicode_InternFromString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$bool_repr DD imagerel bool_repr
	DD	imagerel bool_repr+158
	DD	imagerel $unwind$bool_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bool_repr DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_05MKDOIIA@False?$AA@
CONST	SEGMENT
??_C@_05MKDOIIA@False?$AA@ DB 'False', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HPMIDMKH@True?$AA@
CONST	SEGMENT
??_C@_04HPMIDMKH@True?$AA@ DB 'True', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\boolobject.c
CONST	ENDS
;	COMDAT bool_repr
_TEXT	SEGMENT
self$ = 64
bool_repr PROC						; COMDAT

; 13   : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 14   :     PyObject *s;
; 15   : 
; 16   :     if (self == Py_True)

  00006	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0000d	48 3b c8	 cmp	 rcx, rax
  00010	75 21		 jne	 SHORT $LN6@bool_repr

; 17   :         s = true_str ? true_str :
; 18   :             (true_str = PyUnicode_InternFromString("True"));

  00012	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR true_str
  00019	48 85 db	 test	 rbx, rbx
  0001c	75 3c		 jne	 SHORT $LN21@bool_repr
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04HPMIDMKH@True?$AA@
  00025	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  0002a	48 89 05 00 00
	00 00		 mov	 QWORD PTR true_str, rax

; 19   :     else

  00031	eb 1f		 jmp	 SHORT $LN22@bool_repr
$LN6@bool_repr:

; 20   :         s = false_str ? false_str :
; 21   :             (false_str = PyUnicode_InternFromString("False"));

  00033	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR false_str
  0003a	48 85 db	 test	 rbx, rbx
  0003d	75 1b		 jne	 SHORT $LN21@bool_repr
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05MKDOIIA@False?$AA@
  00046	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  0004b	48 89 05 00 00
	00 00		 mov	 QWORD PTR false_str, rax
$LN22@bool_repr:
  00052	48 8b d8	 mov	 rbx, rax

; 22   :     Py_XINCREF(s);

  00055	48 85 c0	 test	 rax, rax
  00058	74 3b		 je	 SHORT $LN19@bool_repr
$LN21@bool_repr:
  0005a	e8 00 00 00 00	 call	 _Py_PXCTX
  0005f	85 c0		 test	 eax, eax
  00061	75 32		 jne	 SHORT $LN19@bool_repr
  00063	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0006a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00071	4c 8b cb	 mov	 r9, rbx
  00074	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0007a	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00082	e8 00 00 00 00	 call	 _PyParallel_Guard
  00087	85 c0		 test	 eax, eax
  00089	75 06		 jne	 SHORT $LN13@bool_repr
  0008b	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0008f	74 04		 je	 SHORT $LN19@bool_repr
$LN13@bool_repr:
  00091	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN19@bool_repr:

; 23   :     return s;

  00095	48 8b c3	 mov	 rax, rbx

; 24   : }

  00098	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0009c	5b		 pop	 rbx
  0009d	c3		 ret	 0
bool_repr ENDP
_TEXT	ENDS
PUBLIC	PyBool_FromLong
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyBool_FromLong DD imagerel $LN11
	DD	imagerel $LN11+94
	DD	imagerel $unwind$PyBool_FromLong
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyBool_FromLong DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\boolobject.c
xdata	ENDS
;	COMDAT PyBool_FromLong
_TEXT	SEGMENT
ok$ = 64
PyBool_FromLong PROC					; COMDAT

; 29   : {

$LN11:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 30   :     PyObject *result;
; 31   : 
; 32   :     if (ok)

  00006	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  0000d	85 c9		 test	 ecx, ecx
  0000f	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_TrueStruct
  00016	48 0f 44 d8	 cmove	 rbx, rax

; 33   :         result = Py_True;
; 34   :     else
; 35   :         result = Py_False;
; 36   :     Py_INCREF(result);

  0001a	e8 00 00 00 00	 call	 _Py_PXCTX
  0001f	85 c0		 test	 eax, eax
  00021	75 32		 jne	 SHORT $LN9@PyBool_Fro
  00023	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00031	4c 8b cb	 mov	 r9, rbx
  00034	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0003a	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00042	e8 00 00 00 00	 call	 _PyParallel_Guard
  00047	85 c0		 test	 eax, eax
  00049	75 06		 jne	 SHORT $LN5@PyBool_Fro
  0004b	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0004f	74 04		 je	 SHORT $LN9@PyBool_Fro
$LN5@PyBool_Fro:
  00051	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN9@PyBool_Fro:

; 37   :     return result;

  00055	48 8b c3	 mov	 rax, rbx

; 38   : }

  00058	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005c	5b		 pop	 rbx
  0005d	c3		 ret	 0
PyBool_FromLong ENDP
_TEXT	ENDS
PUBLIC	??_C@_07HMPEOONM@?$HMO?3bool?$AA@		; `string'
EXTRN	PyObject_IsTrue:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$bool_new DD imagerel bool_new
	DD	imagerel bool_new+94
	DD	imagerel $unwind$bool_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bool_new DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_07HMPEOONM@?$HMO?3bool?$AA@
CONST	SEGMENT
??_C@_07HMPEOONM@?$HMO?3bool?$AA@ DB '|O:bool', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT bool_new
_TEXT	SEGMENT
type$ = 64
args$ = 72
kwds$ = 80
x$ = 88
bool_new PROC						; COMDAT

; 44   : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	49 8b c0	 mov	 rax, r8
  00007	4c 8b d2	 mov	 r10, rdx

; 45   :     static char *kwlist[] = {"x", 0};
; 46   :     PyObject *x = Py_False;

  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  00011	48 89 4c 24 58	 mov	 QWORD PTR x$[rsp], rcx

; 47   :     long ok;
; 48   : 
; 49   :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "|O:bool", kwlist, &x))

  00016	48 8d 4c 24 58	 lea	 rcx, QWORD PTR x$[rsp]
  0001b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??bool_new@@9@9
  00022	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00027	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07HMPEOONM@?$HMO?3bool?$AA@
  0002e	48 8b d0	 mov	 rdx, rax
  00031	49 8b ca	 mov	 rcx, r10
  00034	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00039	85 c0		 test	 eax, eax
  0003b	75 07		 jne	 SHORT $LN2@bool_new
$LN5@bool_new:

; 50   :         return NULL;

  0003d	33 c0		 xor	 eax, eax

; 55   : }

  0003f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00043	c3		 ret	 0
$LN2@bool_new:

; 51   :     ok = PyObject_IsTrue(x);

  00044	48 8b 4c 24 58	 mov	 rcx, QWORD PTR x$[rsp]
  00049	e8 00 00 00 00	 call	 PyObject_IsTrue

; 52   :     if (ok < 0)

  0004e	85 c0		 test	 eax, eax

; 53   :         return NULL;

  00050	78 eb		 js	 SHORT $LN5@bool_new

; 54   :     return PyBool_FromLong(ok);

  00052	8b c8		 mov	 ecx, eax
  00054	e8 00 00 00 00	 call	 PyBool_FromLong

; 55   : }

  00059	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005d	c3		 ret	 0
bool_new ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT bool_and
_TEXT	SEGMENT
a$ = 8
b$ = 16
bool_and PROC						; COMDAT

; 62   :     if (!PyBool_Check(a) || !PyBool_Check(b))

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBool_Type
  00007	4c 8b c1	 mov	 r8, rcx
  0000a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0000e	75 24		 jne	 SHORT $LN1@bool_and
  00010	48 39 42 58	 cmp	 QWORD PTR [rdx+88], rax
  00014	75 1e		 jne	 SHORT $LN1@bool_and

; 64   :     return PyBool_FromLong((a == Py_True) & (b == Py_True));

  00016	33 c0		 xor	 eax, eax
  00018	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_TrueStruct
  0001f	8b c8		 mov	 ecx, eax
  00021	4d 3b c1	 cmp	 r8, r9
  00024	0f 94 c1	 sete	 cl
  00027	49 3b d1	 cmp	 rdx, r9
  0002a	0f 94 c0	 sete	 al
  0002d	23 c8		 and	 ecx, eax

; 65   : }

  0002f	e9 00 00 00 00	 jmp	 PyBool_FromLong
$LN1@bool_and:

; 63   :         return PyLong_Type.tp_as_number->nb_and(a, b);

  00034	48 8b 05 b8 00
	00 00		 mov	 rax, QWORD PTR PyLong_Type+184

; 65   : }

  0003b	48 ff 60 68	 rex_jmp QWORD PTR [rax+104]
bool_and ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT bool_or
_TEXT	SEGMENT
a$ = 8
b$ = 16
bool_or	PROC						; COMDAT

; 70   :     if (!PyBool_Check(a) || !PyBool_Check(b))

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBool_Type
  00007	4c 8b c1	 mov	 r8, rcx
  0000a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0000e	75 24		 jne	 SHORT $LN1@bool_or
  00010	48 39 42 58	 cmp	 QWORD PTR [rdx+88], rax
  00014	75 1e		 jne	 SHORT $LN1@bool_or

; 72   :     return PyBool_FromLong((a == Py_True) | (b == Py_True));

  00016	33 c0		 xor	 eax, eax
  00018	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_TrueStruct
  0001f	8b c8		 mov	 ecx, eax
  00021	4d 3b c1	 cmp	 r8, r9
  00024	0f 94 c1	 sete	 cl
  00027	49 3b d1	 cmp	 rdx, r9
  0002a	0f 94 c0	 sete	 al
  0002d	0b c8		 or	 ecx, eax

; 73   : }

  0002f	e9 00 00 00 00	 jmp	 PyBool_FromLong
$LN1@bool_or:

; 71   :         return PyLong_Type.tp_as_number->nb_or(a, b);

  00034	48 8b 05 b8 00
	00 00		 mov	 rax, QWORD PTR PyLong_Type+184

; 73   : }

  0003b	48 ff 60 78	 rex_jmp QWORD PTR [rax+120]
bool_or	ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT bool_xor
_TEXT	SEGMENT
a$ = 8
b$ = 16
bool_xor PROC						; COMDAT

; 78   :     if (!PyBool_Check(a) || !PyBool_Check(b))

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBool_Type
  00007	4c 8b c1	 mov	 r8, rcx
  0000a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0000e	75 24		 jne	 SHORT $LN1@bool_xor
  00010	48 39 42 58	 cmp	 QWORD PTR [rdx+88], rax
  00014	75 1e		 jne	 SHORT $LN1@bool_xor

; 80   :     return PyBool_FromLong((a == Py_True) ^ (b == Py_True));

  00016	33 c0		 xor	 eax, eax
  00018	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_TrueStruct
  0001f	8b c8		 mov	 ecx, eax
  00021	4d 3b c1	 cmp	 r8, r9
  00024	0f 94 c1	 sete	 cl
  00027	49 3b d1	 cmp	 rdx, r9
  0002a	0f 94 c0	 sete	 al
  0002d	33 c8		 xor	 ecx, eax

; 81   : }

  0002f	e9 00 00 00 00	 jmp	 PyBool_FromLong
$LN1@bool_xor:

; 79   :         return PyLong_Type.tp_as_number->nb_xor(a, b);

  00034	48 8b 05 b8 00
	00 00		 mov	 rax, QWORD PTR PyLong_Type+184

; 81   : }

  0003b	48 ff 60 70	 rex_jmp QWORD PTR [rax+112]
bool_xor ENDP
_TEXT	ENDS
END
