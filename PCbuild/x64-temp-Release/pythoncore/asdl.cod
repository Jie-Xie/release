; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	asdl_seq_new
EXTRN	PyArena_Malloc:PROC
EXTRN	PyErr_NoMemory:PROC
EXTRN	memset:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\asdl.c
pdata	SEGMENT
$pdata$asdl_seq_new DD imagerel $LN12
	DD	imagerel $LN12+92
	DD	imagerel $unwind$asdl_seq_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$asdl_seq_new DD imagerel $LN12+92
	DD	imagerel $LN12+133
	DD	imagerel $chain$0$asdl_seq_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$asdl_seq_new DD imagerel $LN12+133
	DD	imagerel $LN12+169
	DD	imagerel $chain$2$asdl_seq_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$asdl_seq_new DD 020021H
	DD	066400H
	DD	imagerel $LN12
	DD	imagerel $LN12+92
	DD	imagerel $unwind$asdl_seq_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$asdl_seq_new DD 020521H
	DD	066405H
	DD	imagerel $LN12
	DD	imagerel $LN12+92
	DD	imagerel $unwind$asdl_seq_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$asdl_seq_new DD 040a01H
	DD	07340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT asdl_seq_new
_TEXT	SEGMENT
size$ = 48
arena$ = 56
asdl_seq_new PROC					; COMDAT

; 6    : {

$LN12:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	4c 8b c2	 mov	 r8, rdx
  0000d	48 8b d9	 mov	 rbx, rcx

; 7    :     asdl_seq *seq = NULL;
; 8    :     size_t n = (size ? (sizeof(void *) * (size - 1)) : 0);

  00010	48 85 c9	 test	 rcx, rcx
  00013	74 3e		 je	 SHORT $LN7@asdl_seq_n
  00015	48 8d 41 ff	 lea	 rax, QWORD PTR [rcx-1]
  00019	48 8d 3c c5 00
	00 00 00	 lea	 rdi, QWORD PTR [rax*8]

; 9    : 
; 10   :     /* check size is sane */
; 11   :     if (size < 0 || size == INT_MIN ||
; 12   :         (size && ((size - 1) > (PY_SIZE_MAX / sizeof(void *))))) {

  00021	78 1e		 js	 SHORT $LN3@asdl_seq_n
  00023	48 81 f9 00 00
	00 80		 cmp	 rcx, -2147483648	; ffffffff80000000H
  0002a	74 15		 je	 SHORT $LN3@asdl_seq_n
  0002c	48 b9 ff ff ff
	ff ff ff ff 1f	 mov	 rcx, 2305843009213693951 ; 1fffffffffffffffH
  00036	48 3b c1	 cmp	 rax, rcx
  00039	77 06		 ja	 SHORT $LN3@asdl_seq_n

; 13   :         PyErr_NoMemory();
; 14   :         return NULL;
; 15   :     }
; 16   : 
; 17   :     /* check if size can be added safely */
; 18   :     if (n > PY_SIZE_MAX - sizeof(asdl_seq)) {

  0003b	48 83 ff ef	 cmp	 rdi, -17
  0003f	76 14		 jbe	 SHORT $LN2@asdl_seq_n
$LN3@asdl_seq_n:

; 19   :         PyErr_NoMemory();

  00041	e8 00 00 00 00	 call	 PyErr_NoMemory

; 20   :         return NULL;

  00046	33 c0		 xor	 eax, eax

; 32   :     return seq;
; 33   : }

  00048	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0004d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00051	5f		 pop	 rdi
  00052	c3		 ret	 0
$LN7@asdl_seq_n:

; 7    :     asdl_seq *seq = NULL;
; 8    :     size_t n = (size ? (sizeof(void *) * (size - 1)) : 0);

  00053	33 ff		 xor	 edi, edi
$LN2@asdl_seq_n:

; 21   :     }
; 22   : 
; 23   :     n += sizeof(asdl_seq);
; 24   : 
; 25   :     seq = (asdl_seq *)PyArena_Malloc(arena, n);

  00055	48 8d 57 10	 lea	 rdx, QWORD PTR [rdi+16]
  00059	49 8b c8	 mov	 rcx, r8
  0005c	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  00061	e8 00 00 00 00	 call	 PyArena_Malloc
  00066	48 8b f0	 mov	 rsi, rax

; 26   :     if (!seq) {

  00069	48 85 c0	 test	 rax, rax
  0006c	75 17		 jne	 SHORT $LN1@asdl_seq_n

; 27   :         PyErr_NoMemory();

  0006e	e8 00 00 00 00	 call	 PyErr_NoMemory
  00073	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]

; 28   :         return NULL;

  00078	33 c0		 xor	 eax, eax

; 32   :     return seq;
; 33   : }

  0007a	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0007f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00083	5f		 pop	 rdi
  00084	c3		 ret	 0
$LN1@asdl_seq_n:

; 29   :     }
; 30   :     memset(seq, 0, n);

  00085	4c 8d 47 10	 lea	 r8, QWORD PTR [rdi+16]
  00089	33 d2		 xor	 edx, edx
  0008b	48 8b c8	 mov	 rcx, rax
  0008e	e8 00 00 00 00	 call	 memset

; 31   :     seq->size = size;

  00093	48 89 1e	 mov	 QWORD PTR [rsi], rbx

; 32   :     return seq;
; 33   : }

  00096	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0009b	48 8b c6	 mov	 rax, rsi
  0009e	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  000a3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a7	5f		 pop	 rdi
  000a8	c3		 ret	 0
asdl_seq_new ENDP
_TEXT	ENDS
PUBLIC	asdl_int_seq_new
;	COMDAT pdata
pdata	SEGMENT
$pdata$asdl_int_seq_new DD imagerel $LN12
	DD	imagerel $LN12+92
	DD	imagerel $unwind$asdl_int_seq_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$asdl_int_seq_new DD imagerel $LN12+92
	DD	imagerel $LN12+133
	DD	imagerel $chain$0$asdl_int_seq_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$asdl_int_seq_new DD imagerel $LN12+133
	DD	imagerel $LN12+169
	DD	imagerel $chain$2$asdl_int_seq_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$asdl_int_seq_new DD 020021H
	DD	066400H
	DD	imagerel $LN12
	DD	imagerel $LN12+92
	DD	imagerel $unwind$asdl_int_seq_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$asdl_int_seq_new DD 020521H
	DD	066405H
	DD	imagerel $LN12
	DD	imagerel $LN12+92
	DD	imagerel $unwind$asdl_int_seq_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$asdl_int_seq_new DD 040a01H
	DD	07340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT asdl_int_seq_new
_TEXT	SEGMENT
size$ = 48
arena$ = 56
asdl_int_seq_new PROC					; COMDAT

; 37   : {

$LN12:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	4c 8b c2	 mov	 r8, rdx
  0000d	48 8b d9	 mov	 rbx, rcx

; 38   :     asdl_int_seq *seq = NULL;
; 39   :     size_t n = (size ? (sizeof(void *) * (size - 1)) : 0);

  00010	48 85 c9	 test	 rcx, rcx
  00013	74 3e		 je	 SHORT $LN7@asdl_int_s
  00015	48 8d 41 ff	 lea	 rax, QWORD PTR [rcx-1]
  00019	48 8d 3c c5 00
	00 00 00	 lea	 rdi, QWORD PTR [rax*8]

; 40   : 
; 41   :     /* check size is sane */
; 42   :     if (size < 0 || size == INT_MIN ||
; 43   :         (size && ((size - 1) > (PY_SIZE_MAX / sizeof(void *))))) {

  00021	78 1e		 js	 SHORT $LN3@asdl_int_s
  00023	48 81 f9 00 00
	00 80		 cmp	 rcx, -2147483648	; ffffffff80000000H
  0002a	74 15		 je	 SHORT $LN3@asdl_int_s
  0002c	48 b9 ff ff ff
	ff ff ff ff 1f	 mov	 rcx, 2305843009213693951 ; 1fffffffffffffffH
  00036	48 3b c1	 cmp	 rax, rcx
  00039	77 06		 ja	 SHORT $LN3@asdl_int_s

; 44   :             PyErr_NoMemory();
; 45   :             return NULL;
; 46   :     }
; 47   : 
; 48   :     /* check if size can be added safely */
; 49   :     if (n > PY_SIZE_MAX - sizeof(asdl_seq)) {

  0003b	48 83 ff ef	 cmp	 rdi, -17
  0003f	76 14		 jbe	 SHORT $LN2@asdl_int_s
$LN3@asdl_int_s:

; 50   :         PyErr_NoMemory();

  00041	e8 00 00 00 00	 call	 PyErr_NoMemory

; 51   :         return NULL;

  00046	33 c0		 xor	 eax, eax

; 63   :     return seq;
; 64   : }

  00048	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0004d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00051	5f		 pop	 rdi
  00052	c3		 ret	 0
$LN7@asdl_int_s:

; 38   :     asdl_int_seq *seq = NULL;
; 39   :     size_t n = (size ? (sizeof(void *) * (size - 1)) : 0);

  00053	33 ff		 xor	 edi, edi
$LN2@asdl_int_s:

; 52   :     }
; 53   : 
; 54   :     n += sizeof(asdl_seq);
; 55   : 
; 56   :     seq = (asdl_int_seq *)PyArena_Malloc(arena, n);

  00055	48 8d 57 10	 lea	 rdx, QWORD PTR [rdi+16]
  00059	49 8b c8	 mov	 rcx, r8
  0005c	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  00061	e8 00 00 00 00	 call	 PyArena_Malloc
  00066	48 8b f0	 mov	 rsi, rax

; 57   :     if (!seq) {

  00069	48 85 c0	 test	 rax, rax
  0006c	75 17		 jne	 SHORT $LN1@asdl_int_s

; 58   :         PyErr_NoMemory();

  0006e	e8 00 00 00 00	 call	 PyErr_NoMemory
  00073	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]

; 59   :         return NULL;

  00078	33 c0		 xor	 eax, eax

; 63   :     return seq;
; 64   : }

  0007a	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0007f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00083	5f		 pop	 rdi
  00084	c3		 ret	 0
$LN1@asdl_int_s:

; 60   :     }
; 61   :     memset(seq, 0, n);

  00085	4c 8d 47 10	 lea	 r8, QWORD PTR [rdi+16]
  00089	33 d2		 xor	 edx, edx
  0008b	48 8b c8	 mov	 rcx, rax
  0008e	e8 00 00 00 00	 call	 memset

; 62   :     seq->size = size;

  00093	48 89 1e	 mov	 QWORD PTR [rsi], rbx

; 63   :     return seq;
; 64   : }

  00096	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0009b	48 8b c6	 mov	 rax, rsi
  0009e	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  000a3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a7	5f		 pop	 rdi
  000a8	c3		 ret	 0
asdl_int_seq_new ENDP
_TEXT	ENDS
END
