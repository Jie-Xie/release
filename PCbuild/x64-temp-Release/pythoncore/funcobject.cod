; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0N@BCCHOHJA@staticmethod?$AA@		; `string'
PUBLIC	??_C@_0M@FGHOINCL@classmethod?$AA@		; `string'
PUBLIC	??_C@_0BF@LPKCECDC@__isabstractmethod__?$AA@	; `string'
PUBLIC	??_C@_08NOMANIOG@__func__?$AA@			; `string'
PUBLIC	??_C@_08HFFPPCHF@function?$AA@			; `string'
PUBLIC	??_C@_07NMGBPFLN@closure?$AA@			; `string'
PUBLIC	??_C@_07MAJIDFEI@argdefs?$AA@			; `string'
PUBLIC	??_C@_04MEMAJGDJ@name?$AA@			; `string'
PUBLIC	??_C@_07NAPALOBA@globals?$AA@			; `string'
PUBLIC	??_C@_04NDFOBODE@code?$AA@			; `string'
PUBLIC	??_C@_0N@FMLGAKCE@__qualname__?$AA@		; `string'
PUBLIC	??_C@_08BHKDPDAA@__name__?$AA@			; `string'
PUBLIC	??_C@_08IBFKALI@__dict__?$AA@			; `string'
PUBLIC	??_C@_0BA@BGAJCMJM@__annotations__?$AA@		; `string'
PUBLIC	??_C@_0P@DAMMIKBJ@__kwdefaults__?$AA@		; `string'
PUBLIC	??_C@_0N@JKBILNAH@__defaults__?$AA@		; `string'
PUBLIC	??_C@_08EBGOJBMB@__code__?$AA@			; `string'
PUBLIC	??_C@_0L@LNCJCPDP@__module__?$AA@		; `string'
PUBLIC	??_C@_0M@BCODGLK@__globals__?$AA@		; `string'
PUBLIC	??_C@_07DIBBIFIJ@__doc__?$AA@			; `string'
PUBLIC	??_C@_0M@PLIJGAJH@__closure__?$AA@		; `string'
PUBLIC	PyFunction_Type
PUBLIC	PyClassMethod_Type
PUBLIC	PyStaticMethod_Type
EXTRN	PyObject_GC_Del:PROC
EXTRN	PyType_GenericNew:PROC
EXTRN	PyType_GenericAlloc:PROC
EXTRN	PyType_Type:BYTE
EXTRN	PyObject_GenericSetDict:PROC
EXTRN	PyObject_GenericGetDict:PROC
_BSS	SEGMENT
?__name__@?1??PyFunction_NewWithQualName@@9@9 DQ 01H DUP (?) ; `PyFunction_NewWithQualName'::`2'::__name__
_BSS	ENDS
;	COMDAT ??_C@_0N@BCCHOHJA@staticmethod?$AA@
CONST	SEGMENT
??_C@_0N@BCCHOHJA@staticmethod?$AA@ DB 'staticmethod', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FGHOINCL@classmethod?$AA@
CONST	SEGMENT
??_C@_0M@FGHOINCL@classmethod?$AA@ DB 'classmethod', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LPKCECDC@__isabstractmethod__?$AA@
CONST	SEGMENT
??_C@_0BF@LPKCECDC@__isabstractmethod__?$AA@ DB '__isabstractmethod__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08NOMANIOG@__func__?$AA@
CONST	SEGMENT
??_C@_08NOMANIOG@__func__?$AA@ DB '__func__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HFFPPCHF@function?$AA@
CONST	SEGMENT
??_C@_08HFFPPCHF@function?$AA@ DB 'function', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07NMGBPFLN@closure?$AA@
CONST	SEGMENT
??_C@_07NMGBPFLN@closure?$AA@ DB 'closure', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MAJIDFEI@argdefs?$AA@
CONST	SEGMENT
??_C@_07MAJIDFEI@argdefs?$AA@ DB 'argdefs', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MEMAJGDJ@name?$AA@
CONST	SEGMENT
??_C@_04MEMAJGDJ@name?$AA@ DB 'name', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NAPALOBA@globals?$AA@
CONST	SEGMENT
??_C@_07NAPALOBA@globals?$AA@ DB 'globals', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NDFOBODE@code?$AA@
CONST	SEGMENT
??_C@_04NDFOBODE@code?$AA@ DB 'code', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FMLGAKCE@__qualname__?$AA@
CONST	SEGMENT
??_C@_0N@FMLGAKCE@__qualname__?$AA@ DB '__qualname__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08BHKDPDAA@__name__?$AA@
CONST	SEGMENT
??_C@_08BHKDPDAA@__name__?$AA@ DB '__name__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IBFKALI@__dict__?$AA@
CONST	SEGMENT
??_C@_08IBFKALI@__dict__?$AA@ DB '__dict__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BGAJCMJM@__annotations__?$AA@
CONST	SEGMENT
??_C@_0BA@BGAJCMJM@__annotations__?$AA@ DB '__annotations__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DAMMIKBJ@__kwdefaults__?$AA@
CONST	SEGMENT
??_C@_0P@DAMMIKBJ@__kwdefaults__?$AA@ DB '__kwdefaults__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JKBILNAH@__defaults__?$AA@
CONST	SEGMENT
??_C@_0N@JKBILNAH@__defaults__?$AA@ DB '__defaults__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EBGOJBMB@__code__?$AA@
CONST	SEGMENT
??_C@_08EBGOJBMB@__code__?$AA@ DB '__code__', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
func_memberlist DQ FLAT:??_C@_0M@PLIJGAJH@__closure__?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000080H
	DD	07H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000088H
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0M@BCODGLK@__globals__?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000068H
	DD	07H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0L@LNCJCPDP@__module__?$AA@
	DD	06H
	ORG $+4
	DQ	00000000000000a8H
	DD	04H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
	ORG $+8
func_getsetlist DQ FLAT:??_C@_08EBGOJBMB@__code__?$AA@
	DQ	FLAT:func_get_code
	DQ	FLAT:func_set_code
	ORG $+16
	DQ	FLAT:??_C@_0N@JKBILNAH@__defaults__?$AA@
	DQ	FLAT:func_get_defaults
	DQ	FLAT:func_set_defaults
	ORG $+16
	DQ	FLAT:??_C@_0P@DAMMIKBJ@__kwdefaults__?$AA@
	DQ	FLAT:func_get_kwdefaults
	DQ	FLAT:func_set_kwdefaults
	ORG $+16
	DQ	FLAT:??_C@_0BA@BGAJCMJM@__annotations__?$AA@
	DQ	FLAT:func_get_annotations
	DQ	FLAT:func_set_annotations
	ORG $+16
	DQ	FLAT:??_C@_08IBFKALI@__dict__?$AA@
	DQ	FLAT:PyObject_GenericGetDict
	DQ	FLAT:PyObject_GenericSetDict
	ORG $+16
	DQ	FLAT:??_C@_08BHKDPDAA@__name__?$AA@
	DQ	FLAT:func_get_name
	DQ	FLAT:func_set_name
	ORG $+16
	DQ	FLAT:??_C@_0N@FMLGAKCE@__qualname__?$AA@
	DQ	FLAT:func_get_qualname
	DQ	FLAT:func_set_qualname
	ORG $+16
	DQ	0000000000000000H
	ORG $+32
func_doc DB	'function(code, globals[, name[, argdefs[, closure]]])', 0aH
	DB	0aH, 'Create a function object from a code object and a dictio'
	DB	'nary.', 0aH, 'The optional name string overrides the name fro'
	DB	'm the code object.', 0aH, 'The optional argdefs tuple specifi'
	DB	'es the default argument values.', 0aH, 'The optional closure '
	DB	'tuple supplies the bindings for free variables.', 00H
	ORG $+2
?kwlist@?1??func_new@@9@9 DQ FLAT:??_C@_04NDFOBODE@code?$AA@ ; `func_new'::`2'::kwlist
	DQ	FLAT:??_C@_07NAPALOBA@globals?$AA@
	DQ	FLAT:??_C@_04MEMAJGDJ@name?$AA@
	DQ	FLAT:??_C@_07MAJIDFEI@argdefs?$AA@
	DQ	FLAT:??_C@_07NMGBPFLN@closure?$AA@
	DQ	0000000000000000H
PyFunction_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_08HFFPPCHF@function?$AA@
	DQ	00000000000000c0H
	DQ	0000000000000000H
	DQ	FLAT:func_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:func_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:function_call
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	FLAT:func_doc
	DQ	FLAT:func_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	00000000000000a0H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:func_memberlist
	DQ	FLAT:func_getsetlist
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:func_descr_get
	DQ	0000000000000000H
	DQ	0000000000000098H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:func_new
	ORG $+72
cm_memberlist DQ FLAT:??_C@_08NOMANIOG@__func__?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
cm_getsetlist DQ FLAT:??_C@_0BF@LPKCECDC@__isabstractmethod__?$AA@
	DQ	FLAT:cm_get___isabstractmethod__
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:??_C@_08IBFKALI@__dict__?$AA@
	DQ	FLAT:PyObject_GenericGetDict
	DQ	FLAT:PyObject_GenericSetDict
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+32
	ORG $+8
classmethod_doc DB 'classmethod(function) -> method', 0aH, 0aH, 'Convert '
	DB	'a function to be a class method.', 0aH, 0aH, 'A class method '
	DB	'receives the class as implicit first argument,', 0aH, 'just l'
	DB	'ike an instance method receives the instance.', 0aH, 'To decl'
	DB	'are a class method, use this idiom:', 0aH, 0aH, '  class C:', 0aH
	DB	'      def f(cls, arg1, arg2, ...): ...', 0aH, '      f = clas'
	DB	'smethod(f)', 0aH, 0aH, 'It can be called either on the class '
	DB	'(e.g. C.f()) or on an instance', 0aH, '(e.g. C().f()).  The i'
	DB	'nstance is ignored except for its class.', 0aH, 'If a class m'
	DB	'ethod is called for a derived class, the derived class', 0aH, 'o'
	DB	'bject is passed as the implied first argument.', 0aH, 0aH, 'C'
	DB	'lass methods are different than C++ or Java static methods.', 0aH
	DB	'If you want those, see the staticmethod builtin.', 00H
	ORG $+6
PyClassMethod_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0M@FGHOINCL@classmethod?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:cm_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:classmethod_doc
	DQ	FLAT:cm_traverse
	DQ	FLAT:cm_clear
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:cm_memberlist
	DQ	FLAT:cm_getsetlist
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:cm_descr_get
	DQ	0000000000000000H
	DQ	0000000000000068H
	DQ	FLAT:cm_init
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:PyType_GenericNew
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
sm_memberlist DQ FLAT:??_C@_08NOMANIOG@__func__?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
sm_getsetlist DQ FLAT:??_C@_0BF@LPKCECDC@__isabstractmethod__?$AA@
	DQ	FLAT:sm_get___isabstractmethod__
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:??_C@_08IBFKALI@__dict__?$AA@
	DQ	FLAT:PyObject_GenericGetDict
	DQ	FLAT:PyObject_GenericSetDict
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+32
	ORG $+8
staticmethod_doc DB 'staticmethod(function) -> method', 0aH, 0aH, 'Conver'
	DB	't a function to be a static method.', 0aH, 0aH, 'A static met'
	DB	'hod does not receive an implicit first argument.', 0aH, 'To d'
	DB	'eclare a static method, use this idiom:', 0aH, 0aH, '     cla'
	DB	'ss C:', 0aH, '     def f(arg1, arg2, ...): ...', 0aH, '     f'
	DB	' = staticmethod(f)', 0aH, 0aH, 'It can be called either on th'
	DB	'e class (e.g. C.f()) or on an instance', 0aH, '(e.g. C().f())'
	DB	'.  The instance is ignored except for its class.', 0aH, 0aH, 'S'
	DB	'tatic methods in Python are similar to those found in Java or'
	DB	' C++.', 0aH, 'For a more advanced concept, see the classmetho'
	DB	'd builtin.', 00H
	ORG $+14
PyStaticMethod_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0N@BCCHOHJA@staticmethod?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:sm_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:staticmethod_doc
	DQ	FLAT:sm_traverse
	DQ	FLAT:sm_clear
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:sm_memberlist
	DQ	FLAT:sm_getsetlist
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:sm_descr_get
	DQ	0000000000000000H
	DQ	0000000000000068H
	DQ	FLAT:sm_init
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:PyType_GenericNew
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
_DATA	ENDS
;	COMDAT ??_C@_0L@LNCJCPDP@__module__?$AA@
CONST	SEGMENT
??_C@_0L@LNCJCPDP@__module__?$AA@ DB '__module__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BCODGLK@__globals__?$AA@
CONST	SEGMENT
??_C@_0M@BCODGLK@__globals__?$AA@ DB '__globals__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DIBBIFIJ@__doc__?$AA@
CONST	SEGMENT
??_C@_07DIBBIFIJ@__doc__?$AA@ DB '__doc__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PLIJGAJH@__closure__?$AA@
CONST	SEGMENT
??_C@_0M@PLIJGAJH@__closure__?$AA@ DB '__closure__', 00H ; `string'
CONST	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ ; `string'
PUBLIC	??_C@_0BL@KBAKIMNP@PyFunction_NewWithQualName?$AA@ ; `string'
PUBLIC	??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@ ; `string'
PUBLIC	PyFunction_NewWithQualName
EXTRN	_PyGC_generation0:QWORD
EXTRN	Py_FatalError:PROC
EXTRN	PyDict_GetItem:PROC
EXTRN	PyUnicode_InternFromString:PROC
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyTuple_GetItem:PROC
EXTRN	PyTuple_Size:PROC
EXTRN	_PyObject_GC_New:PROC
EXTRN	_PxObject_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFunction_NewWithQualName DD imagerel $LN44
	DD	imagerel $LN44+63
	DD	imagerel $unwind$PyFunction_NewWithQualName
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyFunction_NewWithQualName DD imagerel $LN44+63
	DD	imagerel $LN44+325
	DD	imagerel $chain$1$PyFunction_NewWithQualName
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyFunction_NewWithQualName DD imagerel $LN44+325
	DD	imagerel $LN44+514
	DD	imagerel $chain$2$PyFunction_NewWithQualName
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyFunction_NewWithQualName DD imagerel $LN44+514
	DD	imagerel $LN44+798
	DD	imagerel $chain$4$PyFunction_NewWithQualName
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$PyFunction_NewWithQualName DD imagerel $LN44+798
	DD	imagerel $LN44+813
	DD	imagerel $chain$5$PyFunction_NewWithQualName
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$PyFunction_NewWithQualName DD 021H
	DD	imagerel $LN44
	DD	imagerel $LN44+63
	DD	imagerel $unwind$PyFunction_NewWithQualName
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyFunction_NewWithQualName DD 020021H
	DD	0b7400H
	DD	imagerel $LN44
	DD	imagerel $LN44+63
	DD	imagerel $unwind$PyFunction_NewWithQualName
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyFunction_NewWithQualName DD 020021H
	DD	0b7400H
	DD	imagerel $LN44
	DD	imagerel $LN44+63
	DD	imagerel $unwind$PyFunction_NewWithQualName
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyFunction_NewWithQualName DD 040a21H
	DD	0b740aH
	DD	0a5405H
	DD	imagerel $LN44
	DD	imagerel $LN44+63
	DD	imagerel $unwind$PyFunction_NewWithQualName
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFunction_NewWithQualName DD 060e01H
	DD	0c340eH
	DD	0d00a520eH
	DD	06006c008H
xdata	ENDS
;	COMDAT ??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
CONST	SEGMENT
??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ DB 'GC object alread'
	DB	'y tracked', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KBAKIMNP@PyFunction_NewWithQualName?$AA@
CONST	SEGMENT
??_C@_0BL@KBAKIMNP@PyFunction_NewWithQualName?$AA@ DB 'PyFunction_NewWith'
	DB	'QualName', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
CONST	SEGMENT
??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@ DB '..\Objects\funco'
	DB	'bject.c', 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\funcobject.c
CONST	ENDS
;	COMDAT PyFunction_NewWithQualName
_TEXT	SEGMENT
code$ = 80
globals$ = 88
qualname$ = 96
PyFunction_NewWithQualName PROC				; COMDAT

; 10   : {

$LN44:
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	56		 push	 rsi
  00006	41 54		 push	 r12
  00008	41 55		 push	 r13
  0000a	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000e	4d 8b e8	 mov	 r13, r8
  00011	4c 8b e2	 mov	 r12, rdx
  00014	48 8b f1	 mov	 rsi, rcx

; 11   :     PyFunctionObject *op = PyObject_GC_New(PyFunctionObject,
; 12   :                                         &PyFunction_Type);

  00017	e8 00 00 00 00	 call	 _Py_PXCTX
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyFunction_Type
  00023	85 c0		 test	 eax, eax
  00025	74 07		 je	 SHORT $LN18@PyFunction
  00027	e8 00 00 00 00	 call	 _PxObject_New
  0002c	eb 05		 jmp	 SHORT $LN43@PyFunction
$LN18@PyFunction:
  0002e	e8 00 00 00 00	 call	 _PyObject_GC_New
$LN43@PyFunction:
  00033	48 8b d8	 mov	 rbx, rax

; 13   :     static PyObject *__name__ = 0;
; 14   :     if (op != NULL) {

  00036	48 85 c0	 test	 rax, rax
  00039	0f 84 df 02 00
	00		 je	 $LN15@PyFunction

; 15   :         PyObject *doc;
; 16   :         PyObject *consts;
; 17   :         PyObject *module;
; 18   :         op->func_weakreflist = NULL;

  0003f	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp
  00044	48 89 7c 24 58	 mov	 QWORD PTR [rsp+88], rdi
  00049	33 ff		 xor	 edi, edi
  0004b	48 89 b8 a0 00
	00 00		 mov	 QWORD PTR [rax+160], rdi

; 19   :         Py_INCREF(code);

  00052	e8 00 00 00 00	 call	 _Py_PXCTX
  00057	85 c0		 test	 eax, eax
  00059	75 32		 jne	 SHORT $LN23@PyFunction
  0005b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00069	4c 8b ce	 mov	 r9, rsi
  0006c	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00072	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0007a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0007f	85 c0		 test	 eax, eax
  00081	75 06		 jne	 SHORT $LN22@PyFunction
  00083	f6 46 20 20	 test	 BYTE PTR [rsi+32], 32	; 00000020H
  00087	74 04		 je	 SHORT $LN23@PyFunction
$LN22@PyFunction:
  00089	48 ff 46 50	 inc	 QWORD PTR [rsi+80]
$LN23@PyFunction:

; 20   :         op->func_code = code;

  0008d	48 89 73 60	 mov	 QWORD PTR [rbx+96], rsi

; 21   :         Py_INCREF(globals);

  00091	e8 00 00 00 00	 call	 _Py_PXCTX
  00096	85 c0		 test	 eax, eax
  00098	75 35		 jne	 SHORT $LN27@PyFunction
  0009a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000a8	4d 8b cc	 mov	 r9, r12
  000ab	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000b1	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000b9	e8 00 00 00 00	 call	 _PyParallel_Guard
  000be	85 c0		 test	 eax, eax
  000c0	75 08		 jne	 SHORT $LN26@PyFunction
  000c2	41 f6 44 24 20
	20		 test	 BYTE PTR [r12+32], 32	; 00000020H
  000c8	74 05		 je	 SHORT $LN27@PyFunction
$LN26@PyFunction:
  000ca	49 ff 44 24 50	 inc	 QWORD PTR [r12+80]
$LN27@PyFunction:

; 22   :         op->func_globals = globals;

  000cf	4c 89 63 68	 mov	 QWORD PTR [rbx+104], r12

; 23   :         op->func_name = ((PyCodeObject *)code)->co_name;

  000d3	48 8b ae b8 00
	00 00		 mov	 rbp, QWORD PTR [rsi+184]
  000da	48 89 ab 90 00
	00 00		 mov	 QWORD PTR [rbx+144], rbp

; 24   :         Py_INCREF(op->func_name);

  000e1	e8 00 00 00 00	 call	 _Py_PXCTX
  000e6	85 c0		 test	 eax, eax
  000e8	75 32		 jne	 SHORT $LN31@PyFunction
  000ea	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000f8	4c 8b cd	 mov	 r9, rbp
  000fb	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00101	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00109	e8 00 00 00 00	 call	 _PyParallel_Guard
  0010e	85 c0		 test	 eax, eax
  00110	75 06		 jne	 SHORT $LN30@PyFunction
  00112	f6 45 20 20	 test	 BYTE PTR [rbp+32], 32	; 00000020H
  00116	74 04		 je	 SHORT $LN31@PyFunction
$LN30@PyFunction:
  00118	48 ff 45 50	 inc	 QWORD PTR [rbp+80]
$LN31@PyFunction:

; 25   :         op->func_defaults = NULL; /* No default arguments */

  0011c	48 89 7b 70	 mov	 QWORD PTR [rbx+112], rdi

; 26   :         op->func_kwdefaults = NULL; /* No keyword only defaults */

  00120	48 89 7b 78	 mov	 QWORD PTR [rbx+120], rdi

; 27   :         op->func_closure = NULL;

  00124	48 89 bb 80 00
	00 00		 mov	 QWORD PTR [rbx+128], rdi

; 28   :         consts = ((PyCodeObject *)code)->co_consts;

  0012b	48 8b b6 80 00
	00 00		 mov	 rsi, QWORD PTR [rsi+128]

; 29   :         if (PyTuple_Size(consts) >= 1) {

  00132	48 8b ce	 mov	 rcx, rsi
  00135	e8 00 00 00 00	 call	 PyTuple_Size
  0013a	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  0013f	48 83 f8 01	 cmp	 rax, 1
  00143	7c 1d		 jl	 SHORT $LN14@PyFunction

; 30   :             doc = PyTuple_GetItem(consts, 0);

  00145	33 d2		 xor	 edx, edx
  00147	48 8b ce	 mov	 rcx, rsi
  0014a	e8 00 00 00 00	 call	 PyTuple_GetItem
  0014f	48 8b f0	 mov	 rsi, rax

; 31   :             if (!PyUnicode_Check(doc))

  00152	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00156	f7 81 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rcx+256], 268435456 ; 10000000H
  00160	75 07		 jne	 SHORT $LN12@PyFunction
$LN14@PyFunction:

; 32   :                 doc = Py_None;
; 33   :         }
; 34   :         else
; 35   :             doc = Py_None;

  00162	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_Py_NoneStruct
$LN12@PyFunction:

; 36   :         Py_INCREF(doc);

  00169	e8 00 00 00 00	 call	 _Py_PXCTX
  0016e	85 c0		 test	 eax, eax
  00170	75 32		 jne	 SHORT $LN35@PyFunction
  00172	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00179	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00180	4c 8b ce	 mov	 r9, rsi
  00183	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00189	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00191	e8 00 00 00 00	 call	 _PyParallel_Guard
  00196	85 c0		 test	 eax, eax
  00198	75 06		 jne	 SHORT $LN34@PyFunction
  0019a	f6 46 20 20	 test	 BYTE PTR [rsi+32], 32	; 00000020H
  0019e	74 04		 je	 SHORT $LN35@PyFunction
$LN34@PyFunction:
  001a0	48 ff 46 50	 inc	 QWORD PTR [rsi+80]
$LN35@PyFunction:

; 37   :         op->func_doc = doc;
; 38   :         op->func_dict = NULL;
; 39   :         op->func_module = NULL;
; 40   :         op->func_annotations = NULL;
; 41   : 
; 42   :         /* __module__: If module name is in globals, use it.
; 43   :            Otherwise, use None.
; 44   :         */
; 45   :         if (!__name__) {

  001a4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?__name__@?1??PyFunction_NewWithQualName@@9@9
  001ab	48 89 b3 88 00
	00 00		 mov	 QWORD PTR [rbx+136], rsi
  001b2	48 89 bb 98 00
	00 00		 mov	 QWORD PTR [rbx+152], rdi
  001b9	48 89 bb a8 00
	00 00		 mov	 QWORD PTR [rbx+168], rdi
  001c0	48 89 bb b0 00
	00 00		 mov	 QWORD PTR [rbx+176], rdi
  001c7	48 85 c0	 test	 rax, rax
  001ca	75 36		 jne	 SHORT $LN10@PyFunction

; 46   :             __name__ = PyUnicode_InternFromString("__name__");

  001cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08BHKDPDAA@__name__?$AA@
  001d3	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  001d8	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?__name__@?1??PyFunction_NewWithQualName@@9@9, rax

; 47   :             if (!__name__) {

  001df	48 85 c0	 test	 rax, rax
  001e2	75 1e		 jne	 SHORT $LN10@PyFunction

; 48   :                 Py_DECREF(op);

  001e4	48 8b cb	 mov	 rcx, rbx
  001e7	e8 00 00 00 00	 call	 _Py_DecRef

; 49   :                 return NULL;

  001ec	33 c0		 xor	 eax, eax
$LN42@PyFunction:
  001ee	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]

; 67   : }

  001f3	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  001f8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001fc	41 5d		 pop	 r13
  001fe	41 5c		 pop	 r12
  00200	5e		 pop	 rsi
  00201	c3		 ret	 0
$LN10@PyFunction:

; 50   :             }
; 51   :         }
; 52   :         module = PyDict_GetItem(globals, __name__);

  00202	48 8b d0	 mov	 rdx, rax
  00205	49 8b cc	 mov	 rcx, r12
  00208	e8 00 00 00 00	 call	 PyDict_GetItem
  0020d	48 8b f0	 mov	 rsi, rax

; 53   :         if (module) {

  00210	48 85 c0	 test	 rax, rax
  00213	74 0f		 je	 SHORT $LN9@PyFunction

; 54   :             Py_INCREF(module);

  00215	48 8b c8	 mov	 rcx, rax
  00218	e8 00 00 00 00	 call	 _Py_IncRef

; 55   :             op->func_module = module;

  0021d	48 89 b3 a8 00
	00 00		 mov	 QWORD PTR [rbx+168], rsi
$LN9@PyFunction:

; 56   :         }
; 57   :         if (qualname)

  00224	4d 85 ed	 test	 r13, r13
  00227	74 09		 je	 SHORT $LN8@PyFunction

; 58   :             op->func_qualname = qualname;

  00229	4c 89 ab b8 00
	00 00		 mov	 QWORD PTR [rbx+184], r13

; 59   :         else

  00230	eb 0e		 jmp	 SHORT $LN7@PyFunction
$LN8@PyFunction:

; 60   :             op->func_qualname = op->func_name;

  00232	48 8b 83 90 00
	00 00		 mov	 rax, QWORD PTR [rbx+144]
  00239	48 89 83 b8 00
	00 00		 mov	 QWORD PTR [rbx+184], rax
$LN7@PyFunction:

; 61   :         Py_INCREF(op->func_qualname);

  00240	48 8b b3 b8 00
	00 00		 mov	 rsi, QWORD PTR [rbx+184]
  00247	e8 00 00 00 00	 call	 _Py_PXCTX
  0024c	85 c0		 test	 eax, eax
  0024e	75 32		 jne	 SHORT $LN39@PyFunction
  00250	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00257	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0025e	4c 8b ce	 mov	 r9, rsi
  00261	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00267	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0026f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00274	85 c0		 test	 eax, eax
  00276	75 06		 jne	 SHORT $LN38@PyFunction
  00278	f6 46 20 20	 test	 BYTE PTR [rsi+32], 32	; 00000020H
  0027c	74 04		 je	 SHORT $LN39@PyFunction
$LN38@PyFunction:
  0027e	48 ff 46 50	 inc	 QWORD PTR [rsi+80]
$LN39@PyFunction:

; 62   :     }
; 63   :     else
; 64   :         return NULL;
; 65   :     _PyObject_GC_TRACK(op);

  00282	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00289	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@KBAKIMNP@PyFunction_NewWithQualName?$AA@
  00290	4c 8b cb	 mov	 r9, rbx
  00293	41 b8 41 00 00
	00		 mov	 r8d, 65			; 00000041H
  00299	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002a1	e8 00 00 00 00	 call	 _PyParallel_Guard
  002a6	85 c0		 test	 eax, eax
  002a8	75 6c		 jne	 SHORT $LN2@PyFunction
  002aa	44 8d 40 41	 lea	 r8d, QWORD PTR [rax+65]
  002ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  002b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@KBAKIMNP@PyFunction_NewWithQualName?$AA@
  002bc	4c 8b cb	 mov	 r9, rbx
  002bf	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002c7	e8 00 00 00 00	 call	 _PyParallel_Guard
  002cc	85 c0		 test	 eax, eax
  002ce	75 04		 jne	 SHORT $LN21@PyFunction
  002d0	48 8d 7b e8	 lea	 rdi, QWORD PTR [rbx-24]
$LN21@PyFunction:
  002d4	48 83 7f 10 fe	 cmp	 QWORD PTR [rdi+16], -2
  002d9	74 0c		 je	 SHORT $LN1@PyFunction
  002db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  002e2	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyFunction:
  002e7	48 c7 47 10 fd
	ff ff ff	 mov	 QWORD PTR [rdi+16], -3
  002ef	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  002f6	48 89 07	 mov	 QWORD PTR [rdi], rax
  002f9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00300	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00304	48 89 4f 08	 mov	 QWORD PTR [rdi+8], rcx
  00308	48 89 39	 mov	 QWORD PTR [rcx], rdi
  0030b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00312	48 89 78 08	 mov	 QWORD PTR [rax+8], rdi
$LN2@PyFunction:

; 66   :     return (PyObject *)op;

  00316	48 8b c3	 mov	 rax, rbx
  00319	e9 d0 fe ff ff	 jmp	 $LN42@PyFunction
$LN15@PyFunction:

; 67   : }

  0031e	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00323	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00327	41 5d		 pop	 r13
  00329	41 5c		 pop	 r12
  0032b	5e		 pop	 rsi
  0032c	c3		 ret	 0
PyFunction_NewWithQualName ENDP
_TEXT	ENDS
PUBLIC	PyFunction_New
; Function compile flags: /Ogtpy
;	COMDAT PyFunction_New
_TEXT	SEGMENT
code$ = 8
globals$ = 16
PyFunction_New PROC					; COMDAT

; 72   :     return PyFunction_NewWithQualName(code, globals, NULL);

  00000	45 33 c0	 xor	 r8d, r8d

; 73   : }

  00003	e9 00 00 00 00	 jmp	 PyFunction_NewWithQualName
PyFunction_New ENDP
_TEXT	ENDS
PUBLIC	PyFunction_GetCode
EXTRN	_PyErr_BadInternalCall:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFunction_GetCode DD imagerel $LN4
	DD	imagerel $LN4+50
	DD	imagerel $unwind$PyFunction_GetCode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFunction_GetCode DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyFunction_GetCode
_TEXT	SEGMENT
op$ = 48
PyFunction_GetCode PROC					; COMDAT

; 77   : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 78   :     if (!PyFunction_Check(op)) {

  00004	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFunction_Type
  0000b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0000f	74 18		 je	 SHORT $LN1@PyFunction@2

; 79   :         PyErr_BadInternalCall();

  00011	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00018	ba 4f 00 00 00	 mov	 edx, 79			; 0000004fH
  0001d	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 80   :         return NULL;

  00022	33 c0		 xor	 eax, eax

; 83   : }

  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	c3		 ret	 0
$LN1@PyFunction@2:

; 81   :     }
; 82   :     return ((PyFunctionObject *) op) -> func_code;

  00029	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]

; 83   : }

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
PyFunction_GetCode ENDP
_TEXT	ENDS
PUBLIC	PyFunction_GetGlobals
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFunction_GetGlobals DD imagerel $LN4
	DD	imagerel $LN4+50
	DD	imagerel $unwind$PyFunction_GetGlobals
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFunction_GetGlobals DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyFunction_GetGlobals
_TEXT	SEGMENT
op$ = 48
PyFunction_GetGlobals PROC				; COMDAT

; 87   : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 88   :     if (!PyFunction_Check(op)) {

  00004	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFunction_Type
  0000b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0000f	74 18		 je	 SHORT $LN1@PyFunction@3

; 89   :         PyErr_BadInternalCall();

  00011	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00018	ba 59 00 00 00	 mov	 edx, 89			; 00000059H
  0001d	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 90   :         return NULL;

  00022	33 c0		 xor	 eax, eax

; 93   : }

  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	c3		 ret	 0
$LN1@PyFunction@3:

; 91   :     }
; 92   :     return ((PyFunctionObject *) op) -> func_globals;

  00029	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]

; 93   : }

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
PyFunction_GetGlobals ENDP
_TEXT	ENDS
PUBLIC	PyFunction_GetModule
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFunction_GetModule DD imagerel $LN4
	DD	imagerel $LN4+53
	DD	imagerel $unwind$PyFunction_GetModule
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFunction_GetModule DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyFunction_GetModule
_TEXT	SEGMENT
op$ = 48
PyFunction_GetModule PROC				; COMDAT

; 97   : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 98   :     if (!PyFunction_Check(op)) {

  00004	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFunction_Type
  0000b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0000f	74 18		 je	 SHORT $LN1@PyFunction@4

; 99   :         PyErr_BadInternalCall();

  00011	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00018	ba 63 00 00 00	 mov	 edx, 99			; 00000063H
  0001d	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 100  :         return NULL;

  00022	33 c0		 xor	 eax, eax

; 103  : }

  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	c3		 ret	 0
$LN1@PyFunction@4:

; 101  :     }
; 102  :     return ((PyFunctionObject *) op) -> func_module;

  00029	48 8b 81 a8 00
	00 00		 mov	 rax, QWORD PTR [rcx+168]

; 103  : }

  00030	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00034	c3		 ret	 0
PyFunction_GetModule ENDP
_TEXT	ENDS
PUBLIC	PyFunction_GetDefaults
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFunction_GetDefaults DD imagerel $LN4
	DD	imagerel $LN4+50
	DD	imagerel $unwind$PyFunction_GetDefaults
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFunction_GetDefaults DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyFunction_GetDefaults
_TEXT	SEGMENT
op$ = 48
PyFunction_GetDefaults PROC				; COMDAT

; 107  : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 108  :     if (!PyFunction_Check(op)) {

  00004	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFunction_Type
  0000b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0000f	74 18		 je	 SHORT $LN1@PyFunction@5

; 109  :         PyErr_BadInternalCall();

  00011	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00018	ba 6d 00 00 00	 mov	 edx, 109		; 0000006dH
  0001d	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 110  :         return NULL;

  00022	33 c0		 xor	 eax, eax

; 113  : }

  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	c3		 ret	 0
$LN1@PyFunction@5:

; 111  :     }
; 112  :     return ((PyFunctionObject *) op) -> func_defaults;

  00029	48 8b 41 70	 mov	 rax, QWORD PTR [rcx+112]

; 113  : }

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
PyFunction_GetDefaults ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@OJNHLFDM@non?9tuple?5default?5args?$AA@ ; `string'
PUBLIC	PyFunction_SetDefaults
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_SystemError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFunction_SetDefaults DD imagerel $LN13
	DD	imagerel $LN13+169
	DD	imagerel $unwind$PyFunction_SetDefaults
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFunction_SetDefaults DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0BH@OJNHLFDM@non?9tuple?5default?5args?$AA@
CONST	SEGMENT
??_C@_0BH@OJNHLFDM@non?9tuple?5default?5args?$AA@ DB 'non-tuple default a'
	DB	'rgs', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyFunction_SetDefaults
_TEXT	SEGMENT
op$ = 48
defaults$ = 56
PyFunction_SetDefaults PROC				; COMDAT

; 117  : {

$LN13:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 118  :     if (!PyFunction_Check(op)) {

  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFunction_Type
  00011	48 8b da	 mov	 rbx, rdx
  00014	48 8b f9	 mov	 rdi, rcx
  00017	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001b	74 1f		 je	 SHORT $LN9@PyFunction@6

; 119  :         PyErr_BadInternalCall();

  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00024	ba 77 00 00 00	 mov	 edx, 119		; 00000077H
  00029	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 129  :         return -1;

  0002e	83 c8 ff	 or	 eax, -1

; 134  : }

  00031	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00036	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003a	5f		 pop	 rdi
  0003b	c3		 ret	 0
$LN9@PyFunction@6:

; 120  :         return -1;
; 121  :     }
; 122  :     if (defaults == Py_None)

  0003c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00043	48 3b d0	 cmp	 rdx, rax
  00046	75 04		 jne	 SHORT $LN8@PyFunction@6

; 123  :         defaults = NULL;

  00048	33 db		 xor	 ebx, ebx
  0004a	eb 1d		 jmp	 SHORT $LN4@PyFunction@6
$LN8@PyFunction@6:

; 124  :     else if (defaults && PyTuple_Check(defaults)) {

  0004c	48 85 d2	 test	 rdx, rdx
  0004f	74 37		 je	 SHORT $LN6@PyFunction@6
  00051	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  00055	f7 80 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rax+256], 67108864 ; 04000000H
  0005f	74 27		 je	 SHORT $LN6@PyFunction@6

; 125  :         Py_INCREF(defaults);

  00061	48 8b ca	 mov	 rcx, rdx
  00064	e8 00 00 00 00	 call	 _Py_IncRef
$LN4@PyFunction@6:

; 130  :     }
; 131  :     Py_XDECREF(((PyFunctionObject *) op) -> func_defaults);

  00069	48 8b 4f 70	 mov	 rcx, QWORD PTR [rdi+112]
  0006d	48 85 c9	 test	 rcx, rcx
  00070	74 05		 je	 SHORT $LN3@PyFunction@6
  00072	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@PyFunction@6:

; 132  :     ((PyFunctionObject *) op) -> func_defaults = defaults;

  00077	48 89 5f 70	 mov	 QWORD PTR [rdi+112], rbx

; 133  :     return 0;

  0007b	33 c0		 xor	 eax, eax

; 134  : }

  0007d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00082	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00086	5f		 pop	 rdi
  00087	c3		 ret	 0
$LN6@PyFunction@6:

; 126  :     }
; 127  :     else {
; 128  :         PyErr_SetString(PyExc_SystemError, "non-tuple default args");

  00088	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  0008f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@OJNHLFDM@non?9tuple?5default?5args?$AA@
  00096	e8 00 00 00 00	 call	 PyErr_SetString

; 134  : }

  0009b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a0	83 c8 ff	 or	 eax, -1
  000a3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a7	5f		 pop	 rdi
  000a8	c3		 ret	 0
PyFunction_SetDefaults ENDP
_TEXT	ENDS
PUBLIC	PyFunction_GetKwDefaults
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFunction_GetKwDefaults DD imagerel $LN4
	DD	imagerel $LN4+50
	DD	imagerel $unwind$PyFunction_GetKwDefaults
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFunction_GetKwDefaults DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyFunction_GetKwDefaults
_TEXT	SEGMENT
op$ = 48
PyFunction_GetKwDefaults PROC				; COMDAT

; 138  : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 139  :     if (!PyFunction_Check(op)) {

  00004	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFunction_Type
  0000b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0000f	74 18		 je	 SHORT $LN1@PyFunction@7

; 140  :         PyErr_BadInternalCall();

  00011	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00018	ba 8c 00 00 00	 mov	 edx, 140		; 0000008cH
  0001d	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 141  :         return NULL;

  00022	33 c0		 xor	 eax, eax

; 144  : }

  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	c3		 ret	 0
$LN1@PyFunction@7:

; 142  :     }
; 143  :     return ((PyFunctionObject *) op) -> func_kwdefaults;

  00029	48 8b 41 78	 mov	 rax, QWORD PTR [rcx+120]

; 144  : }

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
PyFunction_GetKwDefaults ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@IDDIIAFL@non?9dict?5keyword?5only?5default?5ar@ ; `string'
PUBLIC	PyFunction_SetKwDefaults
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFunction_SetKwDefaults DD imagerel $LN13
	DD	imagerel $LN13+169
	DD	imagerel $unwind$PyFunction_SetKwDefaults
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFunction_SetKwDefaults DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CD@IDDIIAFL@non?9dict?5keyword?5only?5default?5ar@
CONST	SEGMENT
??_C@_0CD@IDDIIAFL@non?9dict?5keyword?5only?5default?5ar@ DB 'non-dict ke'
	DB	'yword only default args', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyFunction_SetKwDefaults
_TEXT	SEGMENT
op$ = 48
defaults$ = 56
PyFunction_SetKwDefaults PROC				; COMDAT

; 148  : {

$LN13:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 149  :     if (!PyFunction_Check(op)) {

  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFunction_Type
  00011	48 8b da	 mov	 rbx, rdx
  00014	48 8b f9	 mov	 rdi, rcx
  00017	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001b	74 1f		 je	 SHORT $LN9@PyFunction@8

; 150  :         PyErr_BadInternalCall();

  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00024	ba 96 00 00 00	 mov	 edx, 150		; 00000096H
  00029	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 161  :         return -1;

  0002e	83 c8 ff	 or	 eax, -1

; 166  : }

  00031	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00036	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003a	5f		 pop	 rdi
  0003b	c3		 ret	 0
$LN9@PyFunction@8:

; 151  :         return -1;
; 152  :     }
; 153  :     if (defaults == Py_None)

  0003c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00043	48 3b d0	 cmp	 rdx, rax
  00046	75 04		 jne	 SHORT $LN8@PyFunction@8

; 154  :         defaults = NULL;

  00048	33 db		 xor	 ebx, ebx
  0004a	eb 1d		 jmp	 SHORT $LN4@PyFunction@8
$LN8@PyFunction@8:

; 155  :     else if (defaults && PyDict_Check(defaults)) {

  0004c	48 85 d2	 test	 rdx, rdx
  0004f	74 37		 je	 SHORT $LN6@PyFunction@8
  00051	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  00055	f7 80 00 01 00
	00 00 00 00 20	 test	 DWORD PTR [rax+256], 536870912 ; 20000000H
  0005f	74 27		 je	 SHORT $LN6@PyFunction@8

; 156  :         Py_INCREF(defaults);

  00061	48 8b ca	 mov	 rcx, rdx
  00064	e8 00 00 00 00	 call	 _Py_IncRef
$LN4@PyFunction@8:

; 162  :     }
; 163  :     Py_XDECREF(((PyFunctionObject *)op) -> func_kwdefaults);

  00069	48 8b 4f 78	 mov	 rcx, QWORD PTR [rdi+120]
  0006d	48 85 c9	 test	 rcx, rcx
  00070	74 05		 je	 SHORT $LN3@PyFunction@8
  00072	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@PyFunction@8:

; 164  :     ((PyFunctionObject *) op) -> func_kwdefaults = defaults;

  00077	48 89 5f 78	 mov	 QWORD PTR [rdi+120], rbx

; 165  :     return 0;

  0007b	33 c0		 xor	 eax, eax

; 166  : }

  0007d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00082	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00086	5f		 pop	 rdi
  00087	c3		 ret	 0
$LN6@PyFunction@8:

; 157  :     }
; 158  :     else {
; 159  :         PyErr_SetString(PyExc_SystemError,
; 160  :                         "non-dict keyword only default args");

  00088	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  0008f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@IDDIIAFL@non?9dict?5keyword?5only?5default?5ar@
  00096	e8 00 00 00 00	 call	 PyErr_SetString

; 166  : }

  0009b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a0	83 c8 ff	 or	 eax, -1
  000a3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a7	5f		 pop	 rdi
  000a8	c3		 ret	 0
PyFunction_SetKwDefaults ENDP
_TEXT	ENDS
PUBLIC	PyFunction_GetClosure
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFunction_GetClosure DD imagerel $LN4
	DD	imagerel $LN4+53
	DD	imagerel $unwind$PyFunction_GetClosure
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFunction_GetClosure DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyFunction_GetClosure
_TEXT	SEGMENT
op$ = 48
PyFunction_GetClosure PROC				; COMDAT

; 170  : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 171  :     if (!PyFunction_Check(op)) {

  00004	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFunction_Type
  0000b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0000f	74 18		 je	 SHORT $LN1@PyFunction@9

; 172  :         PyErr_BadInternalCall();

  00011	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00018	ba ac 00 00 00	 mov	 edx, 172		; 000000acH
  0001d	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 173  :         return NULL;

  00022	33 c0		 xor	 eax, eax

; 176  : }

  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	c3		 ret	 0
$LN1@PyFunction@9:

; 174  :     }
; 175  :     return ((PyFunctionObject *) op) -> func_closure;

  00029	48 8b 81 80 00
	00 00		 mov	 rax, QWORD PTR [rcx+128]

; 176  : }

  00030	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00034	c3		 ret	 0
PyFunction_GetClosure ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@HLBJBIII@expected?5tuple?5for?5closure?0?5got?5@ ; `string'
PUBLIC	PyFunction_SetClosure
EXTRN	PyErr_Format:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFunction_SetClosure DD imagerel $LN13
	DD	imagerel $LN13+175
	DD	imagerel $unwind$PyFunction_SetClosure
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFunction_SetClosure DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CJ@HLBJBIII@expected?5tuple?5for?5closure?0?5got?5@
CONST	SEGMENT
??_C@_0CJ@HLBJBIII@expected?5tuple?5for?5closure?0?5got?5@ DB 'expected t'
	DB	'uple for closure, got ''%.100s''', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyFunction_SetClosure
_TEXT	SEGMENT
op$ = 48
closure$ = 56
PyFunction_SetClosure PROC				; COMDAT

; 180  : {

$LN13:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 181  :     if (!PyFunction_Check(op)) {

  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFunction_Type
  00011	48 8b da	 mov	 rbx, rdx
  00014	48 8b f9	 mov	 rdi, rcx
  00017	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001b	74 1f		 je	 SHORT $LN9@PyFunction@10

; 182  :         PyErr_BadInternalCall();

  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00024	ba b6 00 00 00	 mov	 edx, 182		; 000000b6H
  00029	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 194  :         return -1;

  0002e	83 c8 ff	 or	 eax, -1

; 199  : }

  00031	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00036	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003a	5f		 pop	 rdi
  0003b	c3		 ret	 0
$LN9@PyFunction@10:

; 183  :         return -1;
; 184  :     }
; 185  :     if (closure == Py_None)

  0003c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00043	48 3b d0	 cmp	 rdx, rax
  00046	75 04		 jne	 SHORT $LN8@PyFunction@10

; 186  :         closure = NULL;

  00048	33 db		 xor	 ebx, ebx
  0004a	eb 19		 jmp	 SHORT $LN4@PyFunction@10
$LN8@PyFunction@10:

; 187  :     else if (PyTuple_Check(closure)) {

  0004c	4c 8b 42 58	 mov	 r8, QWORD PTR [rdx+88]
  00050	41 f7 80 00 01
	00 00 00 00 00
	04		 test	 DWORD PTR [r8+256], 67108864 ; 04000000H
  0005b	74 2d		 je	 SHORT $LN6@PyFunction@10

; 188  :         Py_INCREF(closure);

  0005d	48 8b ca	 mov	 rcx, rdx
  00060	e8 00 00 00 00	 call	 _Py_IncRef
$LN4@PyFunction@10:

; 195  :     }
; 196  :     Py_XDECREF(((PyFunctionObject *) op) -> func_closure);

  00065	48 8b 8f 80 00
	00 00		 mov	 rcx, QWORD PTR [rdi+128]
  0006c	48 85 c9	 test	 rcx, rcx
  0006f	74 05		 je	 SHORT $LN3@PyFunction@10
  00071	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@PyFunction@10:

; 197  :     ((PyFunctionObject *) op) -> func_closure = closure;

  00076	48 89 9f 80 00
	00 00		 mov	 QWORD PTR [rdi+128], rbx

; 198  :     return 0;

  0007d	33 c0		 xor	 eax, eax

; 199  : }

  0007f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00084	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00088	5f		 pop	 rdi
  00089	c3		 ret	 0
$LN6@PyFunction@10:

; 189  :     }
; 190  :     else {
; 191  :         PyErr_Format(PyExc_SystemError,
; 192  :                      "expected tuple for closure, got '%.100s'",
; 193  :                      closure->ob_type->tp_name);

  0008a	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  0008e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00095	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@HLBJBIII@expected?5tuple?5for?5closure?0?5got?5@
  0009c	e8 00 00 00 00	 call	 PyErr_Format

; 199  : }

  000a1	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a6	83 c8 ff	 or	 eax, -1
  000a9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ad	5f		 pop	 rdi
  000ae	c3		 ret	 0
PyFunction_SetClosure ENDP
_TEXT	ENDS
PUBLIC	PyFunction_GetAnnotations
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFunction_GetAnnotations DD imagerel $LN4
	DD	imagerel $LN4+53
	DD	imagerel $unwind$PyFunction_GetAnnotations
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFunction_GetAnnotations DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyFunction_GetAnnotations
_TEXT	SEGMENT
op$ = 48
PyFunction_GetAnnotations PROC				; COMDAT

; 203  : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 204  :     if (!PyFunction_Check(op)) {

  00004	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFunction_Type
  0000b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0000f	74 18		 je	 SHORT $LN1@PyFunction@11

; 205  :         PyErr_BadInternalCall();

  00011	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00018	ba cd 00 00 00	 mov	 edx, 205		; 000000cdH
  0001d	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 206  :         return NULL;

  00022	33 c0		 xor	 eax, eax

; 209  : }

  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	c3		 ret	 0
$LN1@PyFunction@11:

; 207  :     }
; 208  :     return ((PyFunctionObject *) op) -> func_annotations;

  00029	48 8b 81 b0 00
	00 00		 mov	 rax, QWORD PTR [rcx+176]

; 209  : }

  00030	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00034	c3		 ret	 0
PyFunction_GetAnnotations ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@CCEGMAHM@non?9dict?5annotations?$AA@	; `string'
PUBLIC	PyFunction_SetAnnotations
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFunction_SetAnnotations DD imagerel $LN13
	DD	imagerel $LN13+175
	DD	imagerel $unwind$PyFunction_SetAnnotations
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFunction_SetAnnotations DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0BF@CCEGMAHM@non?9dict?5annotations?$AA@
CONST	SEGMENT
??_C@_0BF@CCEGMAHM@non?9dict?5annotations?$AA@ DB 'non-dict annotations', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyFunction_SetAnnotations
_TEXT	SEGMENT
op$ = 48
annotations$ = 56
PyFunction_SetAnnotations PROC				; COMDAT

; 213  : {

$LN13:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 214  :     if (!PyFunction_Check(op)) {

  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFunction_Type
  00011	48 8b da	 mov	 rbx, rdx
  00014	48 8b f9	 mov	 rdi, rcx
  00017	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001b	74 1f		 je	 SHORT $LN9@PyFunction@12

; 215  :         PyErr_BadInternalCall();

  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00024	ba d7 00 00 00	 mov	 edx, 215		; 000000d7H
  00029	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 226  :         return -1;

  0002e	83 c8 ff	 or	 eax, -1

; 231  : }

  00031	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00036	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003a	5f		 pop	 rdi
  0003b	c3		 ret	 0
$LN9@PyFunction@12:

; 216  :         return -1;
; 217  :     }
; 218  :     if (annotations == Py_None)

  0003c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00043	48 3b d0	 cmp	 rdx, rax
  00046	75 04		 jne	 SHORT $LN8@PyFunction@12

; 219  :         annotations = NULL;

  00048	33 db		 xor	 ebx, ebx
  0004a	eb 1d		 jmp	 SHORT $LN4@PyFunction@12
$LN8@PyFunction@12:

; 220  :     else if (annotations && PyDict_Check(annotations)) {

  0004c	48 85 d2	 test	 rdx, rdx
  0004f	74 3d		 je	 SHORT $LN6@PyFunction@12
  00051	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  00055	f7 80 00 01 00
	00 00 00 00 20	 test	 DWORD PTR [rax+256], 536870912 ; 20000000H
  0005f	74 2d		 je	 SHORT $LN6@PyFunction@12

; 221  :         Py_INCREF(annotations);

  00061	48 8b ca	 mov	 rcx, rdx
  00064	e8 00 00 00 00	 call	 _Py_IncRef
$LN4@PyFunction@12:

; 227  :     }
; 228  :     Py_XDECREF(((PyFunctionObject *)op) -> func_annotations);

  00069	48 8b 8f b0 00
	00 00		 mov	 rcx, QWORD PTR [rdi+176]
  00070	48 85 c9	 test	 rcx, rcx
  00073	74 05		 je	 SHORT $LN3@PyFunction@12
  00075	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@PyFunction@12:

; 229  :     ((PyFunctionObject *) op) -> func_annotations = annotations;

  0007a	48 89 9f b0 00
	00 00		 mov	 QWORD PTR [rdi+176], rbx

; 230  :     return 0;

  00081	33 c0		 xor	 eax, eax

; 231  : }

  00083	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00088	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008c	5f		 pop	 rdi
  0008d	c3		 ret	 0
$LN6@PyFunction@12:

; 222  :     }
; 223  :     else {
; 224  :         PyErr_SetString(PyExc_SystemError,
; 225  :                         "non-dict annotations");

  0008e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00095	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@CCEGMAHM@non?9dict?5annotations?$AA@
  0009c	e8 00 00 00 00	 call	 PyErr_SetString

; 231  : }

  000a1	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a6	83 c8 ff	 or	 eax, -1
  000a9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ad	5f		 pop	 rdi
  000ae	c3		 ret	 0
PyFunction_SetAnnotations ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$func_get_code DD imagerel func_get_code
	DD	imagerel func_get_code+91
	DD	imagerel $unwind$func_get_code
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$func_get_code DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\funcobject.c
xdata	ENDS
;	COMDAT func_get_code
_TEXT	SEGMENT
op$ = 64
func_get_code PROC					; COMDAT

; 249  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 250  :     Py_INCREF(op->func_code);

  0000a	48 8b 79 60	 mov	 rdi, QWORD PTR [rcx+96]
  0000e	48 8b d9	 mov	 rbx, rcx
  00011	e8 00 00 00 00	 call	 _Py_PXCTX
  00016	85 c0		 test	 eax, eax
  00018	75 32		 jne	 SHORT $LN7@func_get_c
  0001a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00028	4c 8b cf	 mov	 r9, rdi
  0002b	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00031	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00039	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003e	85 c0		 test	 eax, eax
  00040	75 06		 jne	 SHORT $LN3@func_get_c
  00042	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  00046	74 04		 je	 SHORT $LN7@func_get_c
$LN3@func_get_c:
  00048	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN7@func_get_c:

; 251  :     return op->func_code;

  0004c	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]

; 252  : }

  00050	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00055	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00059	5f		 pop	 rdi
  0005a	c3		 ret	 0
func_get_code ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@CGGDIFKC@__code__?5must?5be?5set?5to?5a?5code?5o@ ; `string'
PUBLIC	??_C@_0DI@HAGAGOD@?$CFU?$CI?$CJ?5requires?5a?5code?5object?5with@ ; `string'
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyExc_ValueError:QWORD
EXTRN	PyCode_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$func_set_code DD imagerel func_set_code
	DD	imagerel func_set_code+118
	DD	imagerel $unwind$func_set_code
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$func_set_code DD imagerel func_set_code+118
	DD	imagerel func_set_code+162
	DD	imagerel $chain$0$func_set_code
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$func_set_code DD imagerel func_set_code+162
	DD	imagerel func_set_code+195
	DD	imagerel $chain$1$func_set_code
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$func_set_code DD 021H
	DD	imagerel func_set_code
	DD	imagerel func_set_code+118
	DD	imagerel $unwind$func_set_code
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$func_set_code DD 020521H
	DD	083405H
	DD	imagerel func_set_code
	DD	imagerel func_set_code+118
	DD	imagerel $unwind$func_set_code
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$func_set_code DD 040a01H
	DD	09640aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0CG@CGGDIFKC@__code__?5must?5be?5set?5to?5a?5code?5o@
CONST	SEGMENT
??_C@_0CG@CGGDIFKC@__code__?5must?5be?5set?5to?5a?5code?5o@ DB '__code__ '
	DB	'must be set to a code object', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@HAGAGOD@?$CFU?$CI?$CJ?5requires?5a?5code?5object?5with@
CONST	SEGMENT
??_C@_0DI@HAGAGOD@?$CFU?$CI?$CJ?5requires?5a?5code?5object?5with@ DB '%U('
	DB	') requires a code object with %zd free vars, not %zd', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT func_set_code
_TEXT	SEGMENT
op$ = 64
value$ = 72
func_set_code PROC					; COMDAT

; 256  : {

  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fa	 mov	 rdi, rdx
  0000d	48 8b f1	 mov	 rsi, rcx

; 257  :     PyObject *tmp;
; 258  :     Py_ssize_t nfree, nclosure;
; 259  : 
; 260  :     /* Not legal to del f.func_code or to set it to anything
; 261  :      * other than a code object. */
; 262  :     if (value == NULL || !PyCode_Check(value)) {

  00010	48 85 d2	 test	 rdx, rdx
  00013	0f 84 89 00 00
	00		 je	 $LN2@func_set_c
  00019	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCode_Type
  00020	48 39 42 58	 cmp	 QWORD PTR [rdx+88], rax
  00024	75 7c		 jne	 SHORT $LN2@func_set_c

; 265  :         return -1;
; 266  :     }
; 267  :     nfree = PyCode_GetNumFree((PyCodeObject *)value);

  00026	48 8b 82 98 00
	00 00		 mov	 rax, QWORD PTR [rdx+152]

; 268  :     nclosure = (op->func_closure == NULL ? 0 :
; 269  :             PyTuple_GET_SIZE(op->func_closure));

  0002d	4c 8b 8e 80 00
	00 00		 mov	 r9, QWORD PTR [rsi+128]
  00034	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00038	4d 85 c9	 test	 r9, r9
  0003b	74 04		 je	 SHORT $LN7@func_set_c
$LN6@func_set_c:
  0003d	4d 8b 49 60	 mov	 r9, QWORD PTR [r9+96]
$LN7@func_set_c:

; 270  :     if (nclosure != nfree) {

  00041	4c 3b c9	 cmp	 r9, rcx
  00044	74 2d		 je	 SHORT $LN1@func_set_c

; 271  :         PyErr_Format(PyExc_ValueError,
; 272  :                      "%U() requires a code object with %zd free vars,"
; 273  :                      " not %zd",
; 274  :                      op->func_name,
; 275  :                      nclosure, nfree);

  00046	4c 8b 86 90 00
	00 00		 mov	 r8, QWORD PTR [rsi+144]
  0004d	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00052	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DI@HAGAGOD@?$CFU?$CI?$CJ?5requires?5a?5code?5object?5with@
  00060	e8 00 00 00 00	 call	 PyErr_Format
  00065	83 c8 ff	 or	 eax, -1

; 283  : }

  00068	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0006d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00071	5f		 pop	 rdi
  00072	c3		 ret	 0
$LN1@func_set_c:

; 276  :         return -1;
; 277  :     }
; 278  :     tmp = op->func_code;
; 279  :     Py_INCREF(value);

  00073	48 8b ca	 mov	 rcx, rdx
  00076	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0007b	48 8b 5e 60	 mov	 rbx, QWORD PTR [rsi+96]
  0007f	e8 00 00 00 00	 call	 _Py_IncRef

; 280  :     op->func_code = value;
; 281  :     Py_DECREF(tmp);

  00084	48 8b cb	 mov	 rcx, rbx
  00087	48 89 7e 60	 mov	 QWORD PTR [rsi+96], rdi
  0008b	e8 00 00 00 00	 call	 _Py_DecRef
  00090	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 282  :     return 0;

  00095	33 c0		 xor	 eax, eax

; 283  : }

  00097	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0009c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a0	5f		 pop	 rdi
  000a1	c3		 ret	 0
$LN2@func_set_c:

; 263  :         PyErr_SetString(PyExc_TypeError,
; 264  :                         "__code__ must be set to a code object");

  000a2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@CGGDIFKC@__code__?5must?5be?5set?5to?5a?5code?5o@
  000b0	e8 00 00 00 00	 call	 PyErr_SetString

; 283  : }

  000b5	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000ba	83 c8 ff	 or	 eax, -1
  000bd	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c1	5f		 pop	 rdi
  000c2	c3		 ret	 0
func_set_code ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$func_get_name DD imagerel func_get_name
	DD	imagerel func_get_name+97
	DD	imagerel $unwind$func_get_name
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$func_get_name DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\funcobject.c
xdata	ENDS
;	COMDAT func_get_name
_TEXT	SEGMENT
op$ = 64
func_get_name PROC					; COMDAT

; 287  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 288  :     Py_INCREF(op->func_name);

  0000a	48 8b b9 90 00
	00 00		 mov	 rdi, QWORD PTR [rcx+144]
  00011	48 8b d9	 mov	 rbx, rcx
  00014	e8 00 00 00 00	 call	 _Py_PXCTX
  00019	85 c0		 test	 eax, eax
  0001b	75 32		 jne	 SHORT $LN7@func_get_n
  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00024	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0002b	4c 8b cf	 mov	 r9, rdi
  0002e	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00034	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0003c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00041	85 c0		 test	 eax, eax
  00043	75 06		 jne	 SHORT $LN3@func_get_n
  00045	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  00049	74 04		 je	 SHORT $LN7@func_get_n
$LN3@func_get_n:
  0004b	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN7@func_get_n:

; 289  :     return op->func_name;

  0004f	48 8b 83 90 00
	00 00		 mov	 rax, QWORD PTR [rbx+144]

; 290  : }

  00056	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0005b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005f	5f		 pop	 rdi
  00060	c3		 ret	 0
func_get_name ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@MKBEOINH@__name__?5must?5be?5set?5to?5a?5string@ ; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$func_set_name DD imagerel func_set_name
	DD	imagerel func_set_name+37
	DD	imagerel $unwind$func_set_name
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$func_set_name DD imagerel func_set_name+37
	DD	imagerel func_set_name+141
	DD	imagerel $chain$0$func_set_name
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$func_set_name DD imagerel func_set_name+141
	DD	imagerel func_set_name+174
	DD	imagerel $chain$1$func_set_name
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$func_set_name DD 021H
	DD	imagerel func_set_name
	DD	imagerel func_set_name+37
	DD	imagerel $unwind$func_set_name
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$func_set_name DD 020521H
	DD	086405H
	DD	imagerel func_set_name
	DD	imagerel func_set_name+37
	DD	imagerel $unwind$func_set_name
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$func_set_name DD 040a01H
	DD	09340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0CI@MKBEOINH@__name__?5must?5be?5set?5to?5a?5string@
CONST	SEGMENT
??_C@_0CI@MKBEOINH@__name__?5must?5be?5set?5to?5a?5string@ DB '__name__ m'
	DB	'ust be set to a string object', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\funcobject.c
CONST	ENDS
;	COMDAT func_set_name
_TEXT	SEGMENT
op$ = 64
value$ = 72
func_set_name PROC					; COMDAT

; 294  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	48 8b f9	 mov	 rdi, rcx

; 295  :     PyObject *tmp;
; 296  : 
; 297  :     /* Not legal to del f.func_name or to set it to anything
; 298  :      * other than a string object. */
; 299  :     if (value == NULL || !PyUnicode_Check(value)) {

  00010	48 85 d2	 test	 rdx, rdx
  00013	74 78		 je	 SHORT $LN1@func_set_n
  00015	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  00019	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  00023	74 68		 je	 SHORT $LN1@func_set_n

; 302  :         return -1;
; 303  :     }
; 304  :     tmp = op->func_name;

  00025	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  0002a	48 8b b1 90 00
	00 00		 mov	 rsi, QWORD PTR [rcx+144]

; 305  :     Py_INCREF(value);

  00031	e8 00 00 00 00	 call	 _Py_PXCTX
  00036	85 c0		 test	 eax, eax
  00038	75 32		 jne	 SHORT $LN6@func_set_n
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00048	4c 8b cb	 mov	 r9, rbx
  0004b	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00051	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00059	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005e	85 c0		 test	 eax, eax
  00060	75 06		 jne	 SHORT $LN5@func_set_n
  00062	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00066	74 04		 je	 SHORT $LN6@func_set_n
$LN5@func_set_n:
  00068	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN6@func_set_n:

; 306  :     op->func_name = value;
; 307  :     Py_DECREF(tmp);

  0006c	48 8b ce	 mov	 rcx, rsi
  0006f	48 89 9f 90 00
	00 00		 mov	 QWORD PTR [rdi+144], rbx
  00076	e8 00 00 00 00	 call	 _Py_DecRef
  0007b	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]

; 308  :     return 0;

  00080	33 c0		 xor	 eax, eax

; 309  : }

  00082	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00087	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008b	5f		 pop	 rdi
  0008c	c3		 ret	 0
$LN1@func_set_n:

; 300  :         PyErr_SetString(PyExc_TypeError,
; 301  :                         "__name__ must be set to a string object");

  0008d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00094	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@MKBEOINH@__name__?5must?5be?5set?5to?5a?5string@
  0009b	e8 00 00 00 00	 call	 PyErr_SetString

; 309  : }

  000a0	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000a5	83 c8 ff	 or	 eax, -1
  000a8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ac	5f		 pop	 rdi
  000ad	c3		 ret	 0
func_set_name ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$func_get_qualname DD imagerel func_get_qualname
	DD	imagerel func_get_qualname+97
	DD	imagerel $unwind$func_get_qualname
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$func_get_qualname DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\funcobject.c
xdata	ENDS
;	COMDAT func_get_qualname
_TEXT	SEGMENT
op$ = 64
func_get_qualname PROC					; COMDAT

; 313  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 314  :     Py_INCREF(op->func_qualname);

  0000a	48 8b b9 b8 00
	00 00		 mov	 rdi, QWORD PTR [rcx+184]
  00011	48 8b d9	 mov	 rbx, rcx
  00014	e8 00 00 00 00	 call	 _Py_PXCTX
  00019	85 c0		 test	 eax, eax
  0001b	75 32		 jne	 SHORT $LN7@func_get_q
  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00024	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0002b	4c 8b cf	 mov	 r9, rdi
  0002e	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00034	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0003c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00041	85 c0		 test	 eax, eax
  00043	75 06		 jne	 SHORT $LN3@func_get_q
  00045	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  00049	74 04		 je	 SHORT $LN7@func_get_q
$LN3@func_get_q:
  0004b	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN7@func_get_q:

; 315  :     return op->func_qualname;

  0004f	48 8b 83 b8 00
	00 00		 mov	 rax, QWORD PTR [rbx+184]

; 316  : }

  00056	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0005b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005f	5f		 pop	 rdi
  00060	c3		 ret	 0
func_get_qualname ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CM@JKMIGKFJ@__qualname__?5must?5be?5set?5to?5a?5st@ ; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$func_set_qualname DD imagerel func_set_qualname
	DD	imagerel func_set_qualname+37
	DD	imagerel $unwind$func_set_qualname
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$func_set_qualname DD imagerel func_set_qualname+37
	DD	imagerel func_set_qualname+141
	DD	imagerel $chain$0$func_set_qualname
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$func_set_qualname DD imagerel func_set_qualname+141
	DD	imagerel func_set_qualname+174
	DD	imagerel $chain$1$func_set_qualname
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$func_set_qualname DD 021H
	DD	imagerel func_set_qualname
	DD	imagerel func_set_qualname+37
	DD	imagerel $unwind$func_set_qualname
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$func_set_qualname DD 020521H
	DD	086405H
	DD	imagerel func_set_qualname
	DD	imagerel func_set_qualname+37
	DD	imagerel $unwind$func_set_qualname
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$func_set_qualname DD 040a01H
	DD	09340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0CM@JKMIGKFJ@__qualname__?5must?5be?5set?5to?5a?5st@
CONST	SEGMENT
??_C@_0CM@JKMIGKFJ@__qualname__?5must?5be?5set?5to?5a?5st@ DB '__qualname'
	DB	'__ must be set to a string object', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\funcobject.c
CONST	ENDS
;	COMDAT func_set_qualname
_TEXT	SEGMENT
op$ = 64
value$ = 72
func_set_qualname PROC					; COMDAT

; 320  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	48 8b f9	 mov	 rdi, rcx

; 321  :     PyObject *tmp;
; 322  : 
; 323  :     /* Not legal to del f.__qualname__ or to set it to anything
; 324  :      * other than a string object. */
; 325  :     if (value == NULL || !PyUnicode_Check(value)) {

  00010	48 85 d2	 test	 rdx, rdx
  00013	74 78		 je	 SHORT $LN1@func_set_q
  00015	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  00019	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  00023	74 68		 je	 SHORT $LN1@func_set_q

; 328  :         return -1;
; 329  :     }
; 330  :     tmp = op->func_qualname;

  00025	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  0002a	48 8b b1 b8 00
	00 00		 mov	 rsi, QWORD PTR [rcx+184]

; 331  :     Py_INCREF(value);

  00031	e8 00 00 00 00	 call	 _Py_PXCTX
  00036	85 c0		 test	 eax, eax
  00038	75 32		 jne	 SHORT $LN6@func_set_q
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00048	4c 8b cb	 mov	 r9, rbx
  0004b	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00051	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00059	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005e	85 c0		 test	 eax, eax
  00060	75 06		 jne	 SHORT $LN5@func_set_q
  00062	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00066	74 04		 je	 SHORT $LN6@func_set_q
$LN5@func_set_q:
  00068	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN6@func_set_q:

; 332  :     op->func_qualname = value;
; 333  :     Py_DECREF(tmp);

  0006c	48 8b ce	 mov	 rcx, rsi
  0006f	48 89 9f b8 00
	00 00		 mov	 QWORD PTR [rdi+184], rbx
  00076	e8 00 00 00 00	 call	 _Py_DecRef
  0007b	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]

; 334  :     return 0;

  00080	33 c0		 xor	 eax, eax

; 335  : }

  00082	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00087	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008b	5f		 pop	 rdi
  0008c	c3		 ret	 0
$LN1@func_set_q:

; 326  :         PyErr_SetString(PyExc_TypeError,
; 327  :                         "__qualname__ must be set to a string object");

  0008d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00094	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@JKMIGKFJ@__qualname__?5must?5be?5set?5to?5a?5st@
  0009b	e8 00 00 00 00	 call	 PyErr_SetString

; 335  : }

  000a0	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000a5	83 c8 ff	 or	 eax, -1
  000a8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ac	5f		 pop	 rdi
  000ad	c3		 ret	 0
func_set_qualname ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$func_get_defaults DD imagerel func_get_defaults
	DD	imagerel func_get_defaults+178
	DD	imagerel $unwind$func_get_defaults
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$func_get_defaults DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\funcobject.c
xdata	ENDS
;	COMDAT func_get_defaults
_TEXT	SEGMENT
op$ = 64
func_get_defaults PROC					; COMDAT

; 339  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 340  :     if (op->func_defaults == NULL) {

  0000a	48 8b 59 70	 mov	 rbx, QWORD PTR [rcx+112]
  0000e	48 8b f9	 mov	 rdi, rcx

; 341  :         Py_INCREF(Py_None);

  00011	e8 00 00 00 00	 call	 _Py_PXCTX
  00016	48 85 db	 test	 rbx, rbx
  00019	75 52		 jne	 SHORT $LN1@func_get_d
  0001b	85 c0		 test	 eax, eax
  0001d	75 3c		 jne	 SHORT $LN5@func_get_d
  0001f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00034	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0003a	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00042	e8 00 00 00 00	 call	 _PyParallel_Guard
  00047	85 c0		 test	 eax, eax
  00049	75 09		 jne	 SHORT $LN4@func_get_d
  0004b	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00052	74 07		 je	 SHORT $LN5@func_get_d
$LN4@func_get_d:
  00054	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN5@func_get_d:

; 342  :         return Py_None;

  0005b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 346  : }

  00062	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00067	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0006b	5f		 pop	 rdi
  0006c	c3		 ret	 0
$LN1@func_get_d:

; 343  :     }
; 344  :     Py_INCREF(op->func_defaults);

  0006d	85 c0		 test	 eax, eax
  0006f	75 32		 jne	 SHORT $LN9@func_get_d
  00071	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00078	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0007f	4c 8b cb	 mov	 r9, rbx
  00082	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00088	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00090	e8 00 00 00 00	 call	 _PyParallel_Guard
  00095	85 c0		 test	 eax, eax
  00097	75 06		 jne	 SHORT $LN8@func_get_d
  00099	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0009d	74 04		 je	 SHORT $LN9@func_get_d
$LN8@func_get_d:
  0009f	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN9@func_get_d:

; 345  :     return op->func_defaults;

  000a3	48 8b 47 70	 mov	 rax, QWORD PTR [rdi+112]

; 346  : }

  000a7	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000ac	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b0	5f		 pop	 rdi
  000b1	c3		 ret	 0
func_get_defaults ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@DACEFHLM@__defaults__?5must?5be?5set?5to?5a?5tu@ ; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$func_set_defaults DD imagerel func_set_defaults
	DD	imagerel func_set_defaults+34
	DD	imagerel $unwind$func_set_defaults
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$func_set_defaults DD imagerel func_set_defaults+34
	DD	imagerel func_set_defaults+237
	DD	imagerel $chain$0$func_set_defaults
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$func_set_defaults DD imagerel func_set_defaults+237
	DD	imagerel func_set_defaults+299
	DD	imagerel $chain$1$func_set_defaults
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$func_set_defaults DD imagerel func_set_defaults+299
	DD	imagerel func_set_defaults+327
	DD	imagerel $chain$2$func_set_defaults
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$func_set_defaults DD imagerel func_set_defaults+327
	DD	imagerel func_set_defaults+353
	DD	imagerel $chain$4$func_set_defaults
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$func_set_defaults DD 020021H
	DD	087400H
	DD	imagerel func_set_defaults
	DD	imagerel func_set_defaults+34
	DD	imagerel $unwind$func_set_defaults
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$func_set_defaults DD 020021H
	DD	087400H
	DD	imagerel func_set_defaults
	DD	imagerel func_set_defaults+34
	DD	imagerel $unwind$func_set_defaults
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$func_set_defaults DD 021H
	DD	imagerel func_set_defaults
	DD	imagerel func_set_defaults+34
	DD	imagerel $unwind$func_set_defaults
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$func_set_defaults DD 020521H
	DD	087405H
	DD	imagerel func_set_defaults
	DD	imagerel func_set_defaults+34
	DD	imagerel $unwind$func_set_defaults
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$func_set_defaults DD 040a01H
	DD	09340aH
	DD	06006520aH
xdata	ENDS
;	COMDAT ??_C@_0CL@DACEFHLM@__defaults__?5must?5be?5set?5to?5a?5tu@
CONST	SEGMENT
??_C@_0CL@DACEFHLM@__defaults__?5must?5be?5set?5to?5a?5tu@ DB '__defaults'
	DB	'__ must be set to a tuple object', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\funcobject.c
CONST	ENDS
;	COMDAT func_set_defaults
_TEXT	SEGMENT
op$ = 64
value$ = 72
func_set_defaults PROC					; COMDAT

; 350  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 351  :     PyObject *tmp;
; 352  : 
; 353  :     /* Legal to del f.func_defaults.
; 354  :      * Can only set func_defaults to NULL or a tuple. */
; 355  :     if (value == Py_None)

  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00011	48 8b da	 mov	 rbx, rdx
  00014	48 8b f1	 mov	 rsi, rcx
  00017	48 3b d0	 cmp	 rdx, rax
  0001a	0f 85 cd 00 00
	00		 jne	 $LN10@func_set_d

; 356  :         value = NULL;

  00020	33 db		 xor	 ebx, ebx
$LN9@func_set_d:
  00022	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi

; 361  :     }
; 362  :     tmp = op->func_defaults;

  00027	48 8b 79 70	 mov	 rdi, QWORD PTR [rcx+112]

; 363  :     Py_XINCREF(value);

  0002b	48 85 db	 test	 rbx, rbx
  0002e	74 3b		 je	 SHORT $LN7@func_set_d
  00030	e8 00 00 00 00	 call	 _Py_PXCTX
  00035	85 c0		 test	 eax, eax
  00037	75 32		 jne	 SHORT $LN7@func_set_d
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00047	4c 8b cb	 mov	 r9, rbx
  0004a	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00050	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00058	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005d	85 c0		 test	 eax, eax
  0005f	75 06		 jne	 SHORT $LN13@func_set_d
  00061	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00065	74 04		 je	 SHORT $LN7@func_set_d
$LN13@func_set_d:
  00067	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN7@func_set_d:

; 364  :     op->func_defaults = value;

  0006b	48 89 5e 70	 mov	 QWORD PTR [rsi+112], rbx

; 365  :     Py_XDECREF(tmp);

  0006f	48 85 ff	 test	 rdi, rdi
  00072	0f 84 d7 00 00
	00		 je	 $LN3@func_set_d
  00078	e8 00 00 00 00	 call	 _Py_PXCTX
  0007d	85 c0		 test	 eax, eax
  0007f	0f 85 ca 00 00
	00		 jne	 $LN3@func_set_d
  00085	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00089	a8 20		 test	 al, 32			; 00000020H
  0008b	0f 85 b6 00 00
	00		 jne	 $LN21@func_set_d
  00091	84 c0		 test	 al, al
  00093	0f 88 ae 00 00
	00		 js	 $LN21@func_set_d
  00099	a8 02		 test	 al, 2
  0009b	0f 85 ae 00 00
	00		 jne	 $LN3@func_set_d
  000a1	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  000a5	0f 85 a4 00 00
	00		 jne	 $LN3@func_set_d
  000ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000b9	4c 8b cf	 mov	 r9, rdi
  000bc	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000c2	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ca	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cf	48 8b cf	 mov	 rcx, rdi
  000d2	85 c0		 test	 eax, eax
  000d4	74 55		 je	 SHORT $LN26@func_set_d
  000d6	e8 00 00 00 00	 call	 _Px_Dealloc
  000db	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 366  :     return 0;

  000e0	33 c0		 xor	 eax, eax

; 367  : }

  000e2	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000e7	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000eb	5e		 pop	 rsi
  000ec	c3		 ret	 0
$LN10@func_set_d:

; 357  :     if (value != NULL && !PyTuple_Check(value)) {

  000ed	48 85 d2	 test	 rdx, rdx
  000f0	0f 84 2c ff ff
	ff		 je	 $LN9@func_set_d
  000f6	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  000fa	f7 80 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rax+256], 67108864 ; 04000000H
  00104	0f 85 18 ff ff
	ff		 jne	 $LN9@func_set_d

; 358  :         PyErr_SetString(PyExc_TypeError,
; 359  :                         "__defaults__ must be set to a tuple object");

  0010a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00111	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@DACEFHLM@__defaults__?5must?5be?5set?5to?5a?5tu@
  00118	e8 00 00 00 00	 call	 PyErr_SetString

; 360  :         return -1;

  0011d	83 c8 ff	 or	 eax, -1

; 367  : }

  00120	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00125	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00129	5e		 pop	 rsi
  0012a	c3		 ret	 0

; 365  :     Py_XDECREF(tmp);

$LN26@func_set_d:
  0012b	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  0012f	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00135	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 366  :     return 0;

  0013a	33 c0		 xor	 eax, eax

; 367  : }

  0013c	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00141	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00145	5e		 pop	 rsi
  00146	c3		 ret	 0

; 365  :     Py_XDECREF(tmp);

$LN21@func_set_d:
  00147	48 8b cf	 mov	 rcx, rdi
  0014a	e8 00 00 00 00	 call	 Px_DecRef
$LN3@func_set_d:

; 367  : }

  0014f	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  00154	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00159	33 c0		 xor	 eax, eax
  0015b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0015f	5e		 pop	 rsi
  00160	c3		 ret	 0
func_set_defaults ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$func_get_kwdefaults DD imagerel func_get_kwdefaults
	DD	imagerel func_get_kwdefaults+178
	DD	imagerel $unwind$func_get_kwdefaults
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$func_get_kwdefaults DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\funcobject.c
xdata	ENDS
;	COMDAT func_get_kwdefaults
_TEXT	SEGMENT
op$ = 64
func_get_kwdefaults PROC				; COMDAT

; 371  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 372  :     if (op->func_kwdefaults == NULL) {

  0000a	48 8b 59 78	 mov	 rbx, QWORD PTR [rcx+120]
  0000e	48 8b f9	 mov	 rdi, rcx

; 373  :         Py_INCREF(Py_None);

  00011	e8 00 00 00 00	 call	 _Py_PXCTX
  00016	48 85 db	 test	 rbx, rbx
  00019	75 52		 jne	 SHORT $LN1@func_get_k@2
  0001b	85 c0		 test	 eax, eax
  0001d	75 3c		 jne	 SHORT $LN5@func_get_k@2
  0001f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00034	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0003a	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00042	e8 00 00 00 00	 call	 _PyParallel_Guard
  00047	85 c0		 test	 eax, eax
  00049	75 09		 jne	 SHORT $LN4@func_get_k@2
  0004b	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00052	74 07		 je	 SHORT $LN5@func_get_k@2
$LN4@func_get_k@2:
  00054	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN5@func_get_k@2:

; 374  :         return Py_None;

  0005b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 378  : }

  00062	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00067	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0006b	5f		 pop	 rdi
  0006c	c3		 ret	 0
$LN1@func_get_k@2:

; 375  :     }
; 376  :     Py_INCREF(op->func_kwdefaults);

  0006d	85 c0		 test	 eax, eax
  0006f	75 32		 jne	 SHORT $LN9@func_get_k@2
  00071	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00078	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0007f	4c 8b cb	 mov	 r9, rbx
  00082	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00088	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00090	e8 00 00 00 00	 call	 _PyParallel_Guard
  00095	85 c0		 test	 eax, eax
  00097	75 06		 jne	 SHORT $LN8@func_get_k@2
  00099	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0009d	74 04		 je	 SHORT $LN9@func_get_k@2
$LN8@func_get_k@2:
  0009f	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN9@func_get_k@2:

; 377  :     return op->func_kwdefaults;

  000a3	48 8b 47 78	 mov	 rax, QWORD PTR [rdi+120]

; 378  : }

  000a7	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000ac	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b0	5f		 pop	 rdi
  000b1	c3		 ret	 0
func_get_kwdefaults ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CM@LNEHMENK@__kwdefaults__?5must?5be?5set?5to?5a?5@ ; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$func_set_kwdefaults DD imagerel func_set_kwdefaults
	DD	imagerel func_set_kwdefaults+34
	DD	imagerel $unwind$func_set_kwdefaults
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$func_set_kwdefaults DD imagerel func_set_kwdefaults+34
	DD	imagerel func_set_kwdefaults+237
	DD	imagerel $chain$0$func_set_kwdefaults
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$func_set_kwdefaults DD imagerel func_set_kwdefaults+237
	DD	imagerel func_set_kwdefaults+299
	DD	imagerel $chain$1$func_set_kwdefaults
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$func_set_kwdefaults DD imagerel func_set_kwdefaults+299
	DD	imagerel func_set_kwdefaults+327
	DD	imagerel $chain$2$func_set_kwdefaults
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$func_set_kwdefaults DD imagerel func_set_kwdefaults+327
	DD	imagerel func_set_kwdefaults+353
	DD	imagerel $chain$4$func_set_kwdefaults
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$func_set_kwdefaults DD 020021H
	DD	087400H
	DD	imagerel func_set_kwdefaults
	DD	imagerel func_set_kwdefaults+34
	DD	imagerel $unwind$func_set_kwdefaults
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$func_set_kwdefaults DD 020021H
	DD	087400H
	DD	imagerel func_set_kwdefaults
	DD	imagerel func_set_kwdefaults+34
	DD	imagerel $unwind$func_set_kwdefaults
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$func_set_kwdefaults DD 021H
	DD	imagerel func_set_kwdefaults
	DD	imagerel func_set_kwdefaults+34
	DD	imagerel $unwind$func_set_kwdefaults
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$func_set_kwdefaults DD 020521H
	DD	087405H
	DD	imagerel func_set_kwdefaults
	DD	imagerel func_set_kwdefaults+34
	DD	imagerel $unwind$func_set_kwdefaults
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$func_set_kwdefaults DD 040a01H
	DD	09340aH
	DD	06006520aH
xdata	ENDS
;	COMDAT ??_C@_0CM@LNEHMENK@__kwdefaults__?5must?5be?5set?5to?5a?5@
CONST	SEGMENT
??_C@_0CM@LNEHMENK@__kwdefaults__?5must?5be?5set?5to?5a?5@ DB '__kwdefaul'
	DB	'ts__ must be set to a dict object', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\funcobject.c
CONST	ENDS
;	COMDAT func_set_kwdefaults
_TEXT	SEGMENT
op$ = 64
value$ = 72
func_set_kwdefaults PROC				; COMDAT

; 382  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 383  :     PyObject *tmp;
; 384  : 
; 385  :     if (value == Py_None)

  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00011	48 8b da	 mov	 rbx, rdx
  00014	48 8b f1	 mov	 rsi, rcx
  00017	48 3b d0	 cmp	 rdx, rax
  0001a	0f 85 cd 00 00
	00		 jne	 $LN10@func_set_k

; 386  :         value = NULL;

  00020	33 db		 xor	 ebx, ebx
$LN9@func_set_k:
  00022	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi

; 393  :     }
; 394  :     tmp = op->func_kwdefaults;

  00027	48 8b 79 78	 mov	 rdi, QWORD PTR [rcx+120]

; 395  :     Py_XINCREF(value);

  0002b	48 85 db	 test	 rbx, rbx
  0002e	74 3b		 je	 SHORT $LN7@func_set_k
  00030	e8 00 00 00 00	 call	 _Py_PXCTX
  00035	85 c0		 test	 eax, eax
  00037	75 32		 jne	 SHORT $LN7@func_set_k
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00047	4c 8b cb	 mov	 r9, rbx
  0004a	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00050	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00058	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005d	85 c0		 test	 eax, eax
  0005f	75 06		 jne	 SHORT $LN13@func_set_k
  00061	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00065	74 04		 je	 SHORT $LN7@func_set_k
$LN13@func_set_k:
  00067	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN7@func_set_k:

; 396  :     op->func_kwdefaults = value;

  0006b	48 89 5e 78	 mov	 QWORD PTR [rsi+120], rbx

; 397  :     Py_XDECREF(tmp);

  0006f	48 85 ff	 test	 rdi, rdi
  00072	0f 84 d7 00 00
	00		 je	 $LN3@func_set_k
  00078	e8 00 00 00 00	 call	 _Py_PXCTX
  0007d	85 c0		 test	 eax, eax
  0007f	0f 85 ca 00 00
	00		 jne	 $LN3@func_set_k
  00085	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00089	a8 20		 test	 al, 32			; 00000020H
  0008b	0f 85 b6 00 00
	00		 jne	 $LN21@func_set_k
  00091	84 c0		 test	 al, al
  00093	0f 88 ae 00 00
	00		 js	 $LN21@func_set_k
  00099	a8 02		 test	 al, 2
  0009b	0f 85 ae 00 00
	00		 jne	 $LN3@func_set_k
  000a1	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  000a5	0f 85 a4 00 00
	00		 jne	 $LN3@func_set_k
  000ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000b9	4c 8b cf	 mov	 r9, rdi
  000bc	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000c2	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ca	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cf	48 8b cf	 mov	 rcx, rdi
  000d2	85 c0		 test	 eax, eax
  000d4	74 55		 je	 SHORT $LN26@func_set_k
  000d6	e8 00 00 00 00	 call	 _Px_Dealloc
  000db	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 398  :     return 0;

  000e0	33 c0		 xor	 eax, eax

; 399  : }

  000e2	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000e7	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000eb	5e		 pop	 rsi
  000ec	c3		 ret	 0
$LN10@func_set_k:

; 387  :     /* Legal to del f.func_kwdefaults.
; 388  :      * Can only set func_kwdefaults to NULL or a dict. */
; 389  :     if (value != NULL && !PyDict_Check(value)) {

  000ed	48 85 d2	 test	 rdx, rdx
  000f0	0f 84 2c ff ff
	ff		 je	 $LN9@func_set_k
  000f6	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  000fa	f7 80 00 01 00
	00 00 00 00 20	 test	 DWORD PTR [rax+256], 536870912 ; 20000000H
  00104	0f 85 18 ff ff
	ff		 jne	 $LN9@func_set_k

; 390  :         PyErr_SetString(PyExc_TypeError,
; 391  :             "__kwdefaults__ must be set to a dict object");

  0010a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00111	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@LNEHMENK@__kwdefaults__?5must?5be?5set?5to?5a?5@
  00118	e8 00 00 00 00	 call	 PyErr_SetString

; 392  :         return -1;

  0011d	83 c8 ff	 or	 eax, -1

; 399  : }

  00120	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00125	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00129	5e		 pop	 rsi
  0012a	c3		 ret	 0

; 397  :     Py_XDECREF(tmp);

$LN26@func_set_k:
  0012b	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  0012f	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00135	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 398  :     return 0;

  0013a	33 c0		 xor	 eax, eax

; 399  : }

  0013c	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00141	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00145	5e		 pop	 rsi
  00146	c3		 ret	 0

; 397  :     Py_XDECREF(tmp);

$LN21@func_set_k:
  00147	48 8b cf	 mov	 rcx, rdi
  0014a	e8 00 00 00 00	 call	 Px_DecRef
$LN3@func_set_k:

; 399  : }

  0014f	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  00154	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00159	33 c0		 xor	 eax, eax
  0015b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0015f	5e		 pop	 rsi
  00160	c3		 ret	 0
func_set_kwdefaults ENDP
_TEXT	ENDS
EXTRN	PyDict_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$func_get_annotations DD imagerel func_get_annotations
	DD	imagerel func_get_annotations+131
	DD	imagerel $unwind$func_get_annotations
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$func_get_annotations DD 042f01H
	DD	08742fH
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\funcobject.c
xdata	ENDS
;	COMDAT func_get_annotations
_TEXT	SEGMENT
op$ = 64
func_get_annotations PROC				; COMDAT

; 403  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 404  :     if (op->func_annotations == NULL) {

  00006	48 83 b9 b0 00
	00 00 00	 cmp	 QWORD PTR [rcx+176], 0
  0000e	48 8b d9	 mov	 rbx, rcx
  00011	75 17		 jne	 SHORT $LN1@func_get_a

; 405  :         op->func_annotations = PyDict_New();

  00013	e8 00 00 00 00	 call	 PyDict_New
  00018	48 89 83 b0 00
	00 00		 mov	 QWORD PTR [rbx+176], rax

; 406  :         if (op->func_annotations == NULL)

  0001f	48 85 c0	 test	 rax, rax
  00022	75 06		 jne	 SHORT $LN1@func_get_a

; 411  : }

  00024	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00028	5b		 pop	 rbx
  00029	c3		 ret	 0
$LN1@func_get_a:
  0002a	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi

; 407  :             return NULL;
; 408  :     }
; 409  :     Py_INCREF(op->func_annotations);

  0002f	48 8b bb b0 00
	00 00		 mov	 rdi, QWORD PTR [rbx+176]
  00036	e8 00 00 00 00	 call	 _Py_PXCTX
  0003b	85 c0		 test	 eax, eax
  0003d	75 32		 jne	 SHORT $LN6@func_get_a
  0003f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0004d	4c 8b cf	 mov	 r9, rdi
  00050	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00056	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0005e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00063	85 c0		 test	 eax, eax
  00065	75 06		 jne	 SHORT $LN5@func_get_a
  00067	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  0006b	74 04		 je	 SHORT $LN6@func_get_a
$LN5@func_get_a:
  0006d	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN6@func_get_a:

; 410  :     return op->func_annotations;

  00071	48 8b 83 b0 00
	00 00		 mov	 rax, QWORD PTR [rbx+176]
  00078	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 411  : }

  0007d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00081	5b		 pop	 rbx
  00082	c3		 ret	 0
func_get_annotations ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CN@OOCMHJF@__annotations__?5must?5be?5set?5to?5a@ ; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$func_set_annotations DD imagerel func_set_annotations
	DD	imagerel func_set_annotations+34
	DD	imagerel $unwind$func_set_annotations
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$func_set_annotations DD imagerel func_set_annotations+34
	DD	imagerel func_set_annotations+243
	DD	imagerel $chain$0$func_set_annotations
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$func_set_annotations DD imagerel func_set_annotations+243
	DD	imagerel func_set_annotations+305
	DD	imagerel $chain$1$func_set_annotations
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$func_set_annotations DD imagerel func_set_annotations+305
	DD	imagerel func_set_annotations+333
	DD	imagerel $chain$2$func_set_annotations
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$func_set_annotations DD imagerel func_set_annotations+333
	DD	imagerel func_set_annotations+359
	DD	imagerel $chain$4$func_set_annotations
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$func_set_annotations DD 020021H
	DD	087400H
	DD	imagerel func_set_annotations
	DD	imagerel func_set_annotations+34
	DD	imagerel $unwind$func_set_annotations
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$func_set_annotations DD 020021H
	DD	087400H
	DD	imagerel func_set_annotations
	DD	imagerel func_set_annotations+34
	DD	imagerel $unwind$func_set_annotations
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$func_set_annotations DD 021H
	DD	imagerel func_set_annotations
	DD	imagerel func_set_annotations+34
	DD	imagerel $unwind$func_set_annotations
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$func_set_annotations DD 020521H
	DD	087405H
	DD	imagerel func_set_annotations
	DD	imagerel func_set_annotations+34
	DD	imagerel $unwind$func_set_annotations
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$func_set_annotations DD 040a01H
	DD	09340aH
	DD	06006520aH
xdata	ENDS
;	COMDAT ??_C@_0CN@OOCMHJF@__annotations__?5must?5be?5set?5to?5a@
CONST	SEGMENT
??_C@_0CN@OOCMHJF@__annotations__?5must?5be?5set?5to?5a@ DB '__annotation'
	DB	's__ must be set to a dict object', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\funcobject.c
CONST	ENDS
;	COMDAT func_set_annotations
_TEXT	SEGMENT
op$ = 64
value$ = 72
func_set_annotations PROC				; COMDAT

; 415  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 416  :     PyObject *tmp;
; 417  : 
; 418  :     if (value == Py_None)

  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00011	48 8b da	 mov	 rbx, rdx
  00014	48 8b f1	 mov	 rsi, rcx
  00017	48 3b d0	 cmp	 rdx, rax
  0001a	0f 85 d3 00 00
	00		 jne	 $LN10@func_set_a

; 419  :         value = NULL;

  00020	33 db		 xor	 ebx, ebx
$LN9@func_set_a:
  00022	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi

; 427  :     }
; 428  :     tmp = op->func_annotations;

  00027	48 8b b9 b0 00
	00 00		 mov	 rdi, QWORD PTR [rcx+176]

; 429  :     Py_XINCREF(value);

  0002e	48 85 db	 test	 rbx, rbx
  00031	74 3b		 je	 SHORT $LN7@func_set_a
  00033	e8 00 00 00 00	 call	 _Py_PXCTX
  00038	85 c0		 test	 eax, eax
  0003a	75 32		 jne	 SHORT $LN7@func_set_a
  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0004a	4c 8b cb	 mov	 r9, rbx
  0004d	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00053	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0005b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00060	85 c0		 test	 eax, eax
  00062	75 06		 jne	 SHORT $LN13@func_set_a
  00064	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00068	74 04		 je	 SHORT $LN7@func_set_a
$LN13@func_set_a:
  0006a	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN7@func_set_a:

; 430  :     op->func_annotations = value;

  0006e	48 89 9e b0 00
	00 00		 mov	 QWORD PTR [rsi+176], rbx

; 431  :     Py_XDECREF(tmp);

  00075	48 85 ff	 test	 rdi, rdi
  00078	0f 84 d7 00 00
	00		 je	 $LN3@func_set_a
  0007e	e8 00 00 00 00	 call	 _Py_PXCTX
  00083	85 c0		 test	 eax, eax
  00085	0f 85 ca 00 00
	00		 jne	 $LN3@func_set_a
  0008b	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  0008f	a8 20		 test	 al, 32			; 00000020H
  00091	0f 85 b6 00 00
	00		 jne	 $LN21@func_set_a
  00097	84 c0		 test	 al, al
  00099	0f 88 ae 00 00
	00		 js	 $LN21@func_set_a
  0009f	a8 02		 test	 al, 2
  000a1	0f 85 ae 00 00
	00		 jne	 $LN3@func_set_a
  000a7	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  000ab	0f 85 a4 00 00
	00		 jne	 $LN3@func_set_a
  000b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000bf	4c 8b cf	 mov	 r9, rdi
  000c2	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000c8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d0	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d5	48 8b cf	 mov	 rcx, rdi
  000d8	85 c0		 test	 eax, eax
  000da	74 55		 je	 SHORT $LN26@func_set_a
  000dc	e8 00 00 00 00	 call	 _Px_Dealloc
  000e1	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 432  :     return 0;

  000e6	33 c0		 xor	 eax, eax

; 433  : }

  000e8	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000ed	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000f1	5e		 pop	 rsi
  000f2	c3		 ret	 0
$LN10@func_set_a:

; 420  :     /* Legal to del f.func_annotations.
; 421  :      * Can only set func_annotations to NULL (through C api)
; 422  :      * or a dict. */
; 423  :     if (value != NULL && !PyDict_Check(value)) {

  000f3	48 85 d2	 test	 rdx, rdx
  000f6	0f 84 26 ff ff
	ff		 je	 $LN9@func_set_a
  000fc	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  00100	f7 80 00 01 00
	00 00 00 00 20	 test	 DWORD PTR [rax+256], 536870912 ; 20000000H
  0010a	0f 85 12 ff ff
	ff		 jne	 $LN9@func_set_a

; 424  :         PyErr_SetString(PyExc_TypeError,
; 425  :             "__annotations__ must be set to a dict object");

  00110	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00117	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@OOCMHJF@__annotations__?5must?5be?5set?5to?5a@
  0011e	e8 00 00 00 00	 call	 PyErr_SetString

; 426  :         return -1;

  00123	83 c8 ff	 or	 eax, -1

; 433  : }

  00126	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  0012b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0012f	5e		 pop	 rsi
  00130	c3		 ret	 0

; 431  :     Py_XDECREF(tmp);

$LN26@func_set_a:
  00131	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00135	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0013b	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 432  :     return 0;

  00140	33 c0		 xor	 eax, eax

; 433  : }

  00142	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00147	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0014b	5e		 pop	 rsi
  0014c	c3		 ret	 0

; 431  :     Py_XDECREF(tmp);

$LN21@func_set_a:
  0014d	48 8b cf	 mov	 rcx, rdi
  00150	e8 00 00 00 00	 call	 Px_DecRef
$LN3@func_set_a:

; 433  : }

  00155	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  0015a	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  0015f	33 c0		 xor	 eax, eax
  00161	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00165	5e		 pop	 rsi
  00166	c3		 ret	 0
func_set_annotations ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@GNAFNEHE@arg?55?5?$CIclosure?$CJ?5expected?5cell?0?5f@ ; `string'
PUBLIC	??_C@_0CL@BKMGEEEG@?$CFU?5requires?5closure?5of?5length?5?$CFz@ ; `string'
PUBLIC	??_C@_0CG@HCGKHFPP@arg?55?5?$CIclosure?$CJ?5must?5be?5None?5or?5@ ; `string'
PUBLIC	??_C@_0BO@ODAHAPLA@arg?55?5?$CIclosure?$CJ?5must?5be?5tuple?$AA@ ; `string'
PUBLIC	??_C@_0CH@OLAAPFPP@arg?54?5?$CIdefaults?$CJ?5must?5be?5None?5or@ ; `string'
PUBLIC	??_C@_0CE@BFBHDKMH@arg?53?5?$CIname?$CJ?5must?5be?5None?5or?5str@ ; `string'
PUBLIC	??_C@_0BC@KCOBMBDO@O?$CBO?$CB?$HMOOO?3function?$AA@ ; `string'
EXTRN	PyCell_Type:BYTE
EXTRN	PyArg_ParseTupleAndKeywords:PROC
EXTRN	PyDict_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$func_new DD imagerel func_new
	DD	imagerel func_new+461
	DD	imagerel $unwind$func_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$func_new DD imagerel func_new+461
	DD	imagerel func_new+499
	DD	imagerel $chain$0$func_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$func_new DD imagerel func_new+499
	DD	imagerel func_new+535
	DD	imagerel $chain$1$func_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$func_new DD imagerel func_new+535
	DD	imagerel func_new+651
	DD	imagerel $chain$2$func_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$func_new DD 020021H
	DD	0123400H
	DD	imagerel func_new
	DD	imagerel func_new+461
	DD	imagerel $unwind$func_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$func_new DD 021H
	DD	imagerel func_new
	DD	imagerel func_new+461
	DD	imagerel $unwind$func_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$func_new DD 020821H
	DD	0123408H
	DD	imagerel func_new
	DD	imagerel func_new+461
	DD	imagerel $unwind$func_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$func_new DD 020b01H
	DD	07004f20bH
xdata	ENDS
;	COMDAT ??_C@_0CI@GNAFNEHE@arg?55?5?$CIclosure?$CJ?5expected?5cell?0?5f@
CONST	SEGMENT
??_C@_0CI@GNAFNEHE@arg?55?5?$CIclosure?$CJ?5expected?5cell?0?5f@ DB 'arg '
	DB	'5 (closure) expected cell, found %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@BKMGEEEG@?$CFU?5requires?5closure?5of?5length?5?$CFz@
CONST	SEGMENT
??_C@_0CL@BKMGEEEG@?$CFU?5requires?5closure?5of?5length?5?$CFz@ DB '%U re'
	DB	'quires closure of length %zd, not %zd', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@HCGKHFPP@arg?55?5?$CIclosure?$CJ?5must?5be?5None?5or?5@
CONST	SEGMENT
??_C@_0CG@HCGKHFPP@arg?55?5?$CIclosure?$CJ?5must?5be?5None?5or?5@ DB 'arg'
	DB	' 5 (closure) must be None or tuple', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@ODAHAPLA@arg?55?5?$CIclosure?$CJ?5must?5be?5tuple?$AA@
CONST	SEGMENT
??_C@_0BO@ODAHAPLA@arg?55?5?$CIclosure?$CJ?5must?5be?5tuple?$AA@ DB 'arg '
	DB	'5 (closure) must be tuple', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@OLAAPFPP@arg?54?5?$CIdefaults?$CJ?5must?5be?5None?5or@
CONST	SEGMENT
??_C@_0CH@OLAAPFPP@arg?54?5?$CIdefaults?$CJ?5must?5be?5None?5or@ DB 'arg '
	DB	'4 (defaults) must be None or tuple', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@BFBHDKMH@arg?53?5?$CIname?$CJ?5must?5be?5None?5or?5str@
CONST	SEGMENT
??_C@_0CE@BFBHDKMH@arg?53?5?$CIname?$CJ?5must?5be?5None?5or?5str@ DB 'arg'
	DB	' 3 (name) must be None or string', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KCOBMBDO@O?$CBO?$CB?$HMOOO?3function?$AA@
CONST	SEGMENT
??_C@_0BC@KCOBMBDO@O?$CBO?$CB?$HMOOO?3function?$AA@ DB 'O!O!|OOO:function'
	DB	00H						; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT func_new
_TEXT	SEGMENT
defaults$ = 96
closure$ = 104
code$ = 112
globals$ = 120
type$ = 144
args$ = 152
kw$ = 160
name$ = 168
func_new PROC						; COMDAT

; 469  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	57		 push	 rdi
  00004	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H

; 470  :     PyCodeObject *code;
; 471  :     PyObject *globals;
; 472  :     PyObject *name = Py_None;
; 473  :     PyObject *defaults = Py_None;
; 474  :     PyObject *closure = Py_None;
; 475  :     PyFunctionObject *newfunc;
; 476  :     Py_ssize_t nfree, nclosure;
; 477  :     static char *kwlist[] = {"code", "globals", "name",
; 478  :                              "argdefs", "closure", 0};
; 479  : 
; 480  :     if (!PyArg_ParseTupleAndKeywords(args, kw, "O!O!|OOO:function",
; 481  :                           kwlist,
; 482  :                           &PyCode_Type, &code,
; 483  :                           &PyDict_Type, &globals,
; 484  :                           &name, &defaults, &closure))

  0000b	49 8d 4b e0	 lea	 rcx, QWORD PTR [r11-32]
  0000f	49 8b c0	 mov	 rax, r8
  00012	4c 8b d2	 mov	 r10, rdx
  00015	49 89 4b c8	 mov	 QWORD PTR [r11-56], rcx
  00019	49 8d 4b d8	 lea	 rcx, QWORD PTR [r11-40]
  0001d	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  00024	49 89 4b c0	 mov	 QWORD PTR [r11-64], rcx
  00028	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  0002c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??func_new@@9@9
  00033	49 89 4b b8	 mov	 QWORD PTR [r11-72], rcx
  00037	49 8d 4b f0	 lea	 rcx, QWORD PTR [r11-16]
  0003b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BC@KCOBMBDO@O?$CBO?$CB?$HMOOO?3function?$AA@
  00042	49 89 4b b0	 mov	 QWORD PTR [r11-80], rcx
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyDict_Type
  0004d	48 8b d0	 mov	 rdx, rax
  00050	49 89 4b a8	 mov	 QWORD PTR [r11-88], rcx
  00054	49 8d 4b e8	 lea	 rcx, QWORD PTR [r11-24]
  00058	49 89 7b 20	 mov	 QWORD PTR [r11+32], rdi
  0005c	49 89 4b a0	 mov	 QWORD PTR [r11-96], rcx
  00060	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyCode_Type
  00067	49 89 7b d8	 mov	 QWORD PTR [r11-40], rdi
  0006b	49 89 4b 98	 mov	 QWORD PTR [r11-104], rcx
  0006f	49 8b ca	 mov	 rcx, r10
  00072	49 89 7b e0	 mov	 QWORD PTR [r11-32], rdi
  00076	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  0007b	85 c0		 test	 eax, eax

; 485  :         return NULL;

  0007d	74 30		 je	 SHORT $LN28@func_new

; 486  :     if (name != Py_None && !PyUnicode_Check(name)) {

  0007f	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR name$[rsp]
  00087	48 3b c7	 cmp	 rax, rdi
  0008a	74 2e		 je	 SHORT $LN16@func_new
  0008c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00090	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  0009a	75 1e		 jne	 SHORT $LN16@func_new

; 487  :         PyErr_SetString(PyExc_TypeError,
; 488  :                         "arg 3 (name) must be None or string");

  0009c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@BFBHDKMH@arg?53?5?$CIname?$CJ?5must?5be?5None?5or?5str@
  000aa	e8 00 00 00 00	 call	 PyErr_SetString
$LN28@func_new:

; 489  :         return NULL;

  000af	33 c0		 xor	 eax, eax

; 548  : }

  000b1	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  000b8	5f		 pop	 rdi
  000b9	c3		 ret	 0
$LN16@func_new:

; 490  :     }
; 491  :     if (defaults != Py_None && !PyTuple_Check(defaults)) {

  000ba	48 8b 44 24 60	 mov	 rax, QWORD PTR defaults$[rsp]
  000bf	48 3b c7	 cmp	 rax, rdi
  000c2	74 2e		 je	 SHORT $LN15@func_new
  000c4	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000c8	f7 80 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rax+256], 67108864 ; 04000000H
  000d2	75 1e		 jne	 SHORT $LN15@func_new

; 492  :         PyErr_SetString(PyExc_TypeError,
; 493  :                         "arg 4 (defaults) must be None or tuple");

  000d4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@OLAAPFPP@arg?54?5?$CIdefaults?$CJ?5must?5be?5None?5or@
  000e2	e8 00 00 00 00	 call	 PyErr_SetString

; 494  :         return NULL;

  000e7	33 c0		 xor	 eax, eax

; 548  : }

  000e9	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  000f0	5f		 pop	 rdi
  000f1	c3		 ret	 0
$LN15@func_new:

; 495  :     }
; 496  :     nfree = PyTuple_GET_SIZE(code->co_freevars);

  000f2	4c 8b 54 24 70	 mov	 r10, QWORD PTR code$[rsp]

; 497  :     if (!PyTuple_Check(closure)) {

  000f7	4c 8b 44 24 68	 mov	 r8, QWORD PTR closure$[rsp]
  000fc	33 c9		 xor	 ecx, ecx
  000fe	49 8b 82 98 00
	00 00		 mov	 rax, QWORD PTR [r10+152]
  00105	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  00109	49 8b 40 58	 mov	 rax, QWORD PTR [r8+88]
  0010d	f7 80 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rax+256], 67108864 ; 04000000H
  00117	75 4b		 jne	 SHORT $LN11@func_new

; 498  :         if (nfree && closure == Py_None) {

  00119	4d 85 c9	 test	 r9, r9
  0011c	74 23		 je	 SHORT $LN13@func_new
  0011e	4c 3b c7	 cmp	 r8, rdi
  00121	75 23		 jne	 SHORT $LN26@func_new

; 499  :             PyErr_SetString(PyExc_TypeError,
; 500  :                             "arg 5 (closure) must be tuple");

  00123	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0012a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@ODAHAPLA@arg?55?5?$CIclosure?$CJ?5must?5be?5tuple?$AA@
  00131	e8 00 00 00 00	 call	 PyErr_SetString

; 501  :             return NULL;

  00136	33 c0		 xor	 eax, eax

; 548  : }

  00138	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  0013f	5f		 pop	 rdi
  00140	c3		 ret	 0
$LN13@func_new:

; 502  :         }
; 503  :         else if (closure != Py_None) {

  00141	4c 3b c7	 cmp	 r8, rdi
  00144	74 23		 je	 SHORT $LN25@func_new
$LN26@func_new:

; 504  :             PyErr_SetString(PyExc_TypeError,
; 505  :                 "arg 5 (closure) must be None or tuple");

  00146	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0014d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@HCGKHFPP@arg?55?5?$CIclosure?$CJ?5must?5be?5None?5or?5@
  00154	e8 00 00 00 00	 call	 PyErr_SetString

; 506  :             return NULL;

  00159	33 c0		 xor	 eax, eax

; 548  : }

  0015b	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  00162	5f		 pop	 rdi
  00163	c3		 ret	 0
$LN11@func_new:

; 507  :         }
; 508  :     }
; 509  : 
; 510  :     /* check that the closure is well-formed */
; 511  :     nclosure = closure == Py_None ? 0 : PyTuple_GET_SIZE(closure);

  00164	4c 3b c7	 cmp	 r8, rdi
  00167	75 05		 jne	 SHORT $LN20@func_new
$LN25@func_new:
  00169	48 8b d1	 mov	 rdx, rcx
  0016c	eb 04		 jmp	 SHORT $LN21@func_new
$LN20@func_new:
  0016e	49 8b 50 60	 mov	 rdx, QWORD PTR [r8+96]
$LN21@func_new:

; 512  :     if (nfree != nclosure)

  00172	4c 3b ca	 cmp	 r9, rdx
  00175	74 28		 je	 SHORT $LN10@func_new

; 513  :         return PyErr_Format(PyExc_ValueError,
; 514  :                             "%U requires closure of length %zd, not %zd",
; 515  :                             code->co_name, nfree, nclosure);

  00177	4d 8b 82 b8 00
	00 00		 mov	 r8, QWORD PTR [r10+184]
  0017e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00185	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0018a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@BKMGEEEG@?$CFU?5requires?5closure?5of?5length?5?$CFz@
  00191	e8 00 00 00 00	 call	 PyErr_Format

; 548  : }

  00196	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  0019d	5f		 pop	 rdi
  0019e	c3		 ret	 0
$LN10@func_new:

; 516  :     if (nclosure) {

  0019f	48 85 d2	 test	 rdx, rdx

; 517  :         Py_ssize_t i;
; 518  :         for (i = 0; i < nclosure; i++) {

  001a2	7e 21		 jle	 SHORT $LN6@func_new
  001a4	49 8d 40 70	 lea	 rax, QWORD PTR [r8+112]
  001a8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:PyCell_Type
  001af	90		 npad	 1
$LL8@func_new:

; 519  :             PyObject *o = PyTuple_GET_ITEM(closure, i);

  001b0	4c 8b 00	 mov	 r8, QWORD PTR [rax]

; 520  :             if (!PyCell_Check(o)) {

  001b3	4d 39 48 58	 cmp	 QWORD PTR [r8+88], r9
  001b7	75 3a		 jne	 SHORT $LN23@func_new

; 517  :         Py_ssize_t i;
; 518  :         for (i = 0; i < nclosure; i++) {

  001b9	48 ff c1	 inc	 rcx
  001bc	48 83 c0 08	 add	 rax, 8
  001c0	48 3b ca	 cmp	 rcx, rdx
  001c3	7c eb		 jl	 SHORT $LL8@func_new
$LN6@func_new:

; 524  :             }
; 525  :         }
; 526  :     }
; 527  : 
; 528  :     newfunc = (PyFunctionObject *)PyFunction_New((PyObject *)code,
; 529  :                                                  globals);

  001c5	48 8b 54 24 78	 mov	 rdx, QWORD PTR globals$[rsp]
  001ca	49 8b ca	 mov	 rcx, r10
  001cd	48 89 9c 24 90
	00 00 00	 mov	 QWORD PTR [rsp+144], rbx
  001d5	e8 00 00 00 00	 call	 PyFunction_New
  001da	48 8b d8	 mov	 rbx, rax

; 530  :     if (newfunc == NULL)

  001dd	48 85 c0	 test	 rax, rax
  001e0	75 35		 jne	 SHORT $LN4@func_new
  001e2	48 8b 9c 24 90
	00 00 00	 mov	 rbx, QWORD PTR [rsp+144]

; 548  : }

  001ea	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  001f1	5f		 pop	 rdi
  001f2	c3		 ret	 0
$LN23@func_new:

; 521  :                 return PyErr_Format(PyExc_TypeError,
; 522  :                     "arg 5 (closure) expected cell, found %s",
; 523  :                                     o->ob_type->tp_name);

  001f3	4d 8b 40 58	 mov	 r8, QWORD PTR [r8+88]
  001f7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  001fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@GNAFNEHE@arg?55?5?$CIclosure?$CJ?5expected?5cell?0?5f@
  00205	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00209	e8 00 00 00 00	 call	 PyErr_Format

; 548  : }

  0020e	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  00215	5f		 pop	 rdi
  00216	c3		 ret	 0
$LN4@func_new:

; 531  :         return NULL;
; 532  : 
; 533  :     if (name != Py_None) {

  00217	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR name$[rsp]
  0021f	48 3b cf	 cmp	 rcx, rdi
  00222	74 20		 je	 SHORT $LN3@func_new

; 534  :         Py_INCREF(name);

  00224	e8 00 00 00 00	 call	 _Py_IncRef

; 535  :         Py_DECREF(newfunc->func_name);

  00229	48 8b 8b 90 00
	00 00		 mov	 rcx, QWORD PTR [rbx+144]
  00230	e8 00 00 00 00	 call	 _Py_DecRef

; 536  :         newfunc->func_name = name;

  00235	4c 8b 9c 24 a8
	00 00 00	 mov	 r11, QWORD PTR name$[rsp]
  0023d	4c 89 9b 90 00
	00 00		 mov	 QWORD PTR [rbx+144], r11
$LN3@func_new:

; 537  :     }
; 538  :     if (defaults != Py_None) {

  00244	48 8b 4c 24 60	 mov	 rcx, QWORD PTR defaults$[rsp]
  00249	48 3b cf	 cmp	 rcx, rdi
  0024c	74 0e		 je	 SHORT $LN2@func_new

; 539  :         Py_INCREF(defaults);

  0024e	e8 00 00 00 00	 call	 _Py_IncRef

; 540  :         newfunc->func_defaults  = defaults;

  00253	4c 8b 5c 24 60	 mov	 r11, QWORD PTR defaults$[rsp]
  00258	4c 89 5b 70	 mov	 QWORD PTR [rbx+112], r11
$LN2@func_new:

; 541  :     }
; 542  :     if (closure != Py_None) {

  0025c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR closure$[rsp]
  00261	48 3b cf	 cmp	 rcx, rdi
  00264	74 11		 je	 SHORT $LN1@func_new

; 543  :         Py_INCREF(closure);

  00266	e8 00 00 00 00	 call	 _Py_IncRef

; 544  :         newfunc->func_closure = closure;

  0026b	4c 8b 5c 24 68	 mov	 r11, QWORD PTR closure$[rsp]
  00270	4c 89 9b 80 00
	00 00		 mov	 QWORD PTR [rbx+128], r11
$LN1@func_new:

; 545  :     }
; 546  : 
; 547  :     return (PyObject *)newfunc;

  00277	48 8b c3	 mov	 rax, rbx
  0027a	48 8b 9c 24 90
	00 00 00	 mov	 rbx, QWORD PTR [rsp+144]

; 548  : }

  00282	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  00289	5f		 pop	 rdi
  0028a	c3		 ret	 0
func_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@BJADLBIC@func_dealloc?$AA@		; `string'
EXTRN	PyObject_ClearWeakRefs:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$func_dealloc DD imagerel func_dealloc
	DD	imagerel func_dealloc+1137
	DD	imagerel $unwind$func_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$func_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0N@BJADLBIC@func_dealloc?$AA@
CONST	SEGMENT
??_C@_0N@BJADLBIC@func_dealloc?$AA@ DB 'func_dealloc', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\funcobject.c
CONST	ENDS
;	COMDAT func_dealloc
_TEXT	SEGMENT
op$ = 64
func_dealloc PROC					; COMDAT

; 552  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 553  :     _PyObject_GC_UNTRACK(op);

  0000d	4c 8b c9	 mov	 r9, rcx
  00010	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BJADLBIC@func_dealloc?$AA@
  0001e	41 b8 29 02 00
	00		 mov	 r8d, 553		; 00000229H
  00024	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0002c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00031	85 c0		 test	 eax, eax
  00033	75 54		 jne	 SHORT $LN34@func_deall
  00035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BJADLBIC@func_dealloc?$AA@
  00043	4c 8b cf	 mov	 r9, rdi
  00046	41 b8 29 02 00
	00		 mov	 r8d, 553		; 00000229H
  0004c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00054	e8 00 00 00 00	 call	 _PyParallel_Guard
  00059	85 c0		 test	 eax, eax
  0005b	74 04		 je	 SHORT $LN40@func_deall
  0005d	33 d2		 xor	 edx, edx
  0005f	eb 04		 jmp	 SHORT $LN41@func_deall
$LN40@func_deall:
  00061	48 8d 57 e8	 lea	 rdx, QWORD PTR [rdi-24]
$LN41@func_deall:
  00065	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00068	48 8b 4a 08	 mov	 rcx, QWORD PTR [rdx+8]
  0006c	48 c7 42 10 fe
	ff ff ff	 mov	 QWORD PTR [rdx+16], -2
  00074	48 89 01	 mov	 QWORD PTR [rcx], rax
  00077	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  0007a	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  0007e	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00082	48 c7 02 00 00
	00 00		 mov	 QWORD PTR [rdx], 0
$LN34@func_deall:

; 554  :     if (op->func_weakreflist != NULL)

  00089	48 83 bf a0 00
	00 00 00	 cmp	 QWORD PTR [rdi+160], 0
  00091	74 08		 je	 SHORT $LN33@func_deall

; 555  :         PyObject_ClearWeakRefs((PyObject *) op);

  00093	48 8b cf	 mov	 rcx, rdi
  00096	e8 00 00 00 00	 call	 PyObject_ClearWeakRefs
$LN33@func_deall:

; 556  :     Py_DECREF(op->func_code);

  0009b	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  0009f	e8 00 00 00 00	 call	 _Py_DecRef

; 557  :     Py_DECREF(op->func_globals);

  000a4	48 8b 4f 68	 mov	 rcx, QWORD PTR [rdi+104]
  000a8	e8 00 00 00 00	 call	 _Py_DecRef

; 558  :     Py_XDECREF(op->func_module);

  000ad	48 8b 9f a8 00
	00 00		 mov	 rbx, QWORD PTR [rdi+168]
  000b4	48 85 db	 test	 rbx, rbx
  000b7	74 65		 je	 SHORT $LN31@func_deall
  000b9	e8 00 00 00 00	 call	 _Py_PXCTX
  000be	85 c0		 test	 eax, eax
  000c0	75 5c		 jne	 SHORT $LN31@func_deall
  000c2	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000c6	a8 20		 test	 al, 32			; 00000020H
  000c8	75 4c		 jne	 SHORT $LN46@func_deall
  000ca	84 c0		 test	 al, al
  000cc	78 48		 js	 SHORT $LN46@func_deall
  000ce	a8 02		 test	 al, 2
  000d0	75 4c		 jne	 SHORT $LN31@func_deall
  000d2	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000d6	75 46		 jne	 SHORT $LN31@func_deall
  000d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000e6	4c 8b cb	 mov	 r9, rbx
  000e9	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000ef	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000f7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000fc	48 8b cb	 mov	 rcx, rbx
  000ff	85 c0		 test	 eax, eax
  00101	74 07		 je	 SHORT $LN51@func_deall
  00103	e8 00 00 00 00	 call	 _Px_Dealloc
  00108	eb 14		 jmp	 SHORT $LN31@func_deall
$LN51@func_deall:
  0010a	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0010e	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00114	eb 08		 jmp	 SHORT $LN31@func_deall
$LN46@func_deall:
  00116	48 8b cb	 mov	 rcx, rbx
  00119	e8 00 00 00 00	 call	 Px_DecRef
$LN31@func_deall:

; 559  :     Py_DECREF(op->func_name);

  0011e	48 8b 8f 90 00
	00 00		 mov	 rcx, QWORD PTR [rdi+144]
  00125	e8 00 00 00 00	 call	 _Py_DecRef

; 560  :     Py_XDECREF(op->func_defaults);

  0012a	48 8b 5f 70	 mov	 rbx, QWORD PTR [rdi+112]
  0012e	48 85 db	 test	 rbx, rbx
  00131	74 65		 je	 SHORT $LN27@func_deall
  00133	e8 00 00 00 00	 call	 _Py_PXCTX
  00138	85 c0		 test	 eax, eax
  0013a	75 5c		 jne	 SHORT $LN27@func_deall
  0013c	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00140	a8 20		 test	 al, 32			; 00000020H
  00142	75 4c		 jne	 SHORT $LN57@func_deall
  00144	84 c0		 test	 al, al
  00146	78 48		 js	 SHORT $LN57@func_deall
  00148	a8 02		 test	 al, 2
  0014a	75 4c		 jne	 SHORT $LN27@func_deall
  0014c	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00150	75 46		 jne	 SHORT $LN27@func_deall
  00152	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00159	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00160	4c 8b cb	 mov	 r9, rbx
  00163	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00169	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00171	e8 00 00 00 00	 call	 _PyParallel_Guard
  00176	48 8b cb	 mov	 rcx, rbx
  00179	85 c0		 test	 eax, eax
  0017b	74 07		 je	 SHORT $LN62@func_deall
  0017d	e8 00 00 00 00	 call	 _Px_Dealloc
  00182	eb 14		 jmp	 SHORT $LN27@func_deall
$LN62@func_deall:
  00184	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00188	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0018e	eb 08		 jmp	 SHORT $LN27@func_deall
$LN57@func_deall:
  00190	48 8b cb	 mov	 rcx, rbx
  00193	e8 00 00 00 00	 call	 Px_DecRef
$LN27@func_deall:

; 561  :     Py_XDECREF(op->func_kwdefaults);

  00198	48 8b 5f 78	 mov	 rbx, QWORD PTR [rdi+120]
  0019c	48 85 db	 test	 rbx, rbx
  0019f	74 65		 je	 SHORT $LN23@func_deall
  001a1	e8 00 00 00 00	 call	 _Py_PXCTX
  001a6	85 c0		 test	 eax, eax
  001a8	75 5c		 jne	 SHORT $LN23@func_deall
  001aa	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  001ae	a8 20		 test	 al, 32			; 00000020H
  001b0	75 4c		 jne	 SHORT $LN68@func_deall
  001b2	84 c0		 test	 al, al
  001b4	78 48		 js	 SHORT $LN68@func_deall
  001b6	a8 02		 test	 al, 2
  001b8	75 4c		 jne	 SHORT $LN23@func_deall
  001ba	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  001be	75 46		 jne	 SHORT $LN23@func_deall
  001c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  001ce	4c 8b cb	 mov	 r9, rbx
  001d1	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001d7	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001df	e8 00 00 00 00	 call	 _PyParallel_Guard
  001e4	48 8b cb	 mov	 rcx, rbx
  001e7	85 c0		 test	 eax, eax
  001e9	74 07		 je	 SHORT $LN73@func_deall
  001eb	e8 00 00 00 00	 call	 _Px_Dealloc
  001f0	eb 14		 jmp	 SHORT $LN23@func_deall
$LN73@func_deall:
  001f2	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001f6	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001fc	eb 08		 jmp	 SHORT $LN23@func_deall
$LN68@func_deall:
  001fe	48 8b cb	 mov	 rcx, rbx
  00201	e8 00 00 00 00	 call	 Px_DecRef
$LN23@func_deall:

; 562  :     Py_XDECREF(op->func_doc);

  00206	48 8b 9f 88 00
	00 00		 mov	 rbx, QWORD PTR [rdi+136]
  0020d	48 85 db	 test	 rbx, rbx
  00210	74 65		 je	 SHORT $LN19@func_deall
  00212	e8 00 00 00 00	 call	 _Py_PXCTX
  00217	85 c0		 test	 eax, eax
  00219	75 5c		 jne	 SHORT $LN19@func_deall
  0021b	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0021f	a8 20		 test	 al, 32			; 00000020H
  00221	75 4c		 jne	 SHORT $LN79@func_deall
  00223	84 c0		 test	 al, al
  00225	78 48		 js	 SHORT $LN79@func_deall
  00227	a8 02		 test	 al, 2
  00229	75 4c		 jne	 SHORT $LN19@func_deall
  0022b	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0022f	75 46		 jne	 SHORT $LN19@func_deall
  00231	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00238	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0023f	4c 8b cb	 mov	 r9, rbx
  00242	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00248	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00250	e8 00 00 00 00	 call	 _PyParallel_Guard
  00255	48 8b cb	 mov	 rcx, rbx
  00258	85 c0		 test	 eax, eax
  0025a	74 07		 je	 SHORT $LN84@func_deall
  0025c	e8 00 00 00 00	 call	 _Px_Dealloc
  00261	eb 14		 jmp	 SHORT $LN19@func_deall
$LN84@func_deall:
  00263	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00267	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0026d	eb 08		 jmp	 SHORT $LN19@func_deall
$LN79@func_deall:
  0026f	48 8b cb	 mov	 rcx, rbx
  00272	e8 00 00 00 00	 call	 Px_DecRef
$LN19@func_deall:

; 563  :     Py_XDECREF(op->func_dict);

  00277	48 8b 9f 98 00
	00 00		 mov	 rbx, QWORD PTR [rdi+152]
  0027e	48 85 db	 test	 rbx, rbx
  00281	74 65		 je	 SHORT $LN15@func_deall
  00283	e8 00 00 00 00	 call	 _Py_PXCTX
  00288	85 c0		 test	 eax, eax
  0028a	75 5c		 jne	 SHORT $LN15@func_deall
  0028c	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00290	a8 20		 test	 al, 32			; 00000020H
  00292	75 4c		 jne	 SHORT $LN90@func_deall
  00294	84 c0		 test	 al, al
  00296	78 48		 js	 SHORT $LN90@func_deall
  00298	a8 02		 test	 al, 2
  0029a	75 4c		 jne	 SHORT $LN15@func_deall
  0029c	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  002a0	75 46		 jne	 SHORT $LN15@func_deall
  002a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  002a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  002b0	4c 8b cb	 mov	 r9, rbx
  002b3	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  002b9	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002c1	e8 00 00 00 00	 call	 _PyParallel_Guard
  002c6	48 8b cb	 mov	 rcx, rbx
  002c9	85 c0		 test	 eax, eax
  002cb	74 07		 je	 SHORT $LN95@func_deall
  002cd	e8 00 00 00 00	 call	 _Px_Dealloc
  002d2	eb 14		 jmp	 SHORT $LN15@func_deall
$LN95@func_deall:
  002d4	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  002d8	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  002de	eb 08		 jmp	 SHORT $LN15@func_deall
$LN90@func_deall:
  002e0	48 8b cb	 mov	 rcx, rbx
  002e3	e8 00 00 00 00	 call	 Px_DecRef
$LN15@func_deall:

; 564  :     Py_XDECREF(op->func_closure);

  002e8	48 8b 9f 80 00
	00 00		 mov	 rbx, QWORD PTR [rdi+128]
  002ef	48 85 db	 test	 rbx, rbx
  002f2	74 65		 je	 SHORT $LN11@func_deall
  002f4	e8 00 00 00 00	 call	 _Py_PXCTX
  002f9	85 c0		 test	 eax, eax
  002fb	75 5c		 jne	 SHORT $LN11@func_deall
  002fd	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00301	a8 20		 test	 al, 32			; 00000020H
  00303	75 4c		 jne	 SHORT $LN101@func_deall
  00305	84 c0		 test	 al, al
  00307	78 48		 js	 SHORT $LN101@func_deall
  00309	a8 02		 test	 al, 2
  0030b	75 4c		 jne	 SHORT $LN11@func_deall
  0030d	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00311	75 46		 jne	 SHORT $LN11@func_deall
  00313	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0031a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00321	4c 8b cb	 mov	 r9, rbx
  00324	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0032a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00332	e8 00 00 00 00	 call	 _PyParallel_Guard
  00337	48 8b cb	 mov	 rcx, rbx
  0033a	85 c0		 test	 eax, eax
  0033c	74 07		 je	 SHORT $LN106@func_deall
  0033e	e8 00 00 00 00	 call	 _Px_Dealloc
  00343	eb 14		 jmp	 SHORT $LN11@func_deall
$LN106@func_deall:
  00345	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00349	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0034f	eb 08		 jmp	 SHORT $LN11@func_deall
$LN101@func_deall:
  00351	48 8b cb	 mov	 rcx, rbx
  00354	e8 00 00 00 00	 call	 Px_DecRef
$LN11@func_deall:

; 565  :     Py_XDECREF(op->func_annotations);

  00359	48 8b 9f b0 00
	00 00		 mov	 rbx, QWORD PTR [rdi+176]
  00360	48 85 db	 test	 rbx, rbx
  00363	74 65		 je	 SHORT $LN7@func_deall
  00365	e8 00 00 00 00	 call	 _Py_PXCTX
  0036a	85 c0		 test	 eax, eax
  0036c	75 5c		 jne	 SHORT $LN7@func_deall
  0036e	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00372	a8 20		 test	 al, 32			; 00000020H
  00374	75 4c		 jne	 SHORT $LN112@func_deall
  00376	84 c0		 test	 al, al
  00378	78 48		 js	 SHORT $LN112@func_deall
  0037a	a8 02		 test	 al, 2
  0037c	75 4c		 jne	 SHORT $LN7@func_deall
  0037e	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00382	75 46		 jne	 SHORT $LN7@func_deall
  00384	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0038b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00392	4c 8b cb	 mov	 r9, rbx
  00395	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0039b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003a3	e8 00 00 00 00	 call	 _PyParallel_Guard
  003a8	48 8b cb	 mov	 rcx, rbx
  003ab	85 c0		 test	 eax, eax
  003ad	74 07		 je	 SHORT $LN117@func_deall
  003af	e8 00 00 00 00	 call	 _Px_Dealloc
  003b4	eb 14		 jmp	 SHORT $LN7@func_deall
$LN117@func_deall:
  003b6	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  003ba	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  003c0	eb 08		 jmp	 SHORT $LN7@func_deall
$LN112@func_deall:
  003c2	48 8b cb	 mov	 rcx, rbx
  003c5	e8 00 00 00 00	 call	 Px_DecRef
$LN7@func_deall:

; 566  :     Py_XDECREF(op->func_qualname);

  003ca	48 8b 9f b8 00
	00 00		 mov	 rbx, QWORD PTR [rdi+184]
  003d1	48 85 db	 test	 rbx, rbx
  003d4	0f 84 85 00 00
	00		 je	 $LN3@func_deall
  003da	e8 00 00 00 00	 call	 _Py_PXCTX
  003df	85 c0		 test	 eax, eax
  003e1	75 7c		 jne	 SHORT $LN3@func_deall
  003e3	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  003e7	a8 20		 test	 al, 32			; 00000020H
  003e9	75 6c		 jne	 SHORT $LN123@func_deall
  003eb	84 c0		 test	 al, al
  003ed	78 68		 js	 SHORT $LN123@func_deall
  003ef	a8 02		 test	 al, 2
  003f1	75 6c		 jne	 SHORT $LN3@func_deall
  003f3	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  003f7	75 66		 jne	 SHORT $LN3@func_deall
  003f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00400	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00407	4c 8b cb	 mov	 r9, rbx
  0040a	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00410	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00418	e8 00 00 00 00	 call	 _PyParallel_Guard
  0041d	48 8b cb	 mov	 rcx, rbx
  00420	85 c0		 test	 eax, eax
  00422	74 17		 je	 SHORT $LN128@func_deall
  00424	e8 00 00 00 00	 call	 _Px_Dealloc

; 567  :     PyObject_GC_Del(op);

  00429	48 8b cf	 mov	 rcx, rdi

; 568  : }

  0042c	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00431	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00435	5f		 pop	 rdi
  00436	e9 00 00 00 00	 jmp	 PyObject_GC_Del

; 566  :     Py_XDECREF(op->func_qualname);

$LN128@func_deall:
  0043b	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0043f	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 567  :     PyObject_GC_Del(op);

  00445	48 8b cf	 mov	 rcx, rdi

; 568  : }

  00448	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0044d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00451	5f		 pop	 rdi
  00452	e9 00 00 00 00	 jmp	 PyObject_GC_Del

; 566  :     Py_XDECREF(op->func_qualname);

$LN123@func_deall:
  00457	48 8b cb	 mov	 rcx, rbx
  0045a	e8 00 00 00 00	 call	 Px_DecRef
$LN3@func_deall:

; 567  :     PyObject_GC_Del(op);

  0045f	48 8b cf	 mov	 rcx, rdi

; 568  : }

  00462	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00467	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0046b	5f		 pop	 rdi
  0046c	e9 00 00 00 00	 jmp	 PyObject_GC_Del
func_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@HGNHAFIO@?$DMfunction?5?$CFU?5at?5?$CFp?$DO?$AA@ ; `string'
EXTRN	PyUnicode_FromFormat:PROC
;	COMDAT ??_C@_0BE@HGNHAFIO@?$DMfunction?5?$CFU?5at?5?$CFp?$DO?$AA@
CONST	SEGMENT
??_C@_0BE@HGNHAFIO@?$DMfunction?5?$CFU?5at?5?$CFp?$DO?$AA@ DB '<function '
	DB	'%U at %p>', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT func_repr
_TEXT	SEGMENT
op$ = 8
func_repr PROC						; COMDAT

; 573  :     return PyUnicode_FromFormat("<function %U at %p>",
; 574  :                                op->func_qualname, op);

  00000	48 8b 91 b8 00
	00 00		 mov	 rdx, QWORD PTR [rcx+184]
  00007	4c 8b c1	 mov	 r8, rcx
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@HGNHAFIO@?$DMfunction?5?$CFU?5at?5?$CFp?$DO?$AA@

; 575  : }

  00011	e9 00 00 00 00	 jmp	 PyUnicode_FromFormat
func_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@NAJDGLKC@func_traverse?$AA@		; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$func_traverse DD imagerel func_traverse
	DD	imagerel func_traverse+700
	DD	imagerel $unwind$func_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$func_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0O@NAJDGLKC@func_traverse?$AA@
CONST	SEGMENT
??_C@_0O@NAJDGLKC@func_traverse?$AA@ DB 'func_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT func_traverse
_TEXT	SEGMENT
f$ = 48
visit$ = 56
arg$ = 64
func_traverse PROC					; COMDAT

; 579  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 580  :     Py_VISIT(f->func_code);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN63@func_trave
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NAJDGLKC@func_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 44 02 00
	00		 mov	 r8d, 580		; 00000244H
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN63@func_trave:
  0003d	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 0d		 je	 SHORT $LN65@func_trave
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	0f 85 59 02 00
	00		 jne	 $LN67@func_trave
$LN65@func_trave:

; 581  :     Py_VISIT(f->func_globals);

  00053	e8 00 00 00 00	 call	 _Py_PXCTX
  00058	85 c0		 test	 eax, eax
  0005a	74 1c		 je	 SHORT $LN57@func_trave
  0005c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00063	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NAJDGLKC@func_traverse?$AA@
  0006a	45 33 c9	 xor	 r9d, r9d
  0006d	41 b8 45 02 00
	00		 mov	 r8d, 581		; 00000245H
  00073	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN57@func_trave:
  00078	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  0007c	48 85 c9	 test	 rcx, rcx
  0007f	74 0d		 je	 SHORT $LN59@func_trave
  00081	48 8b d7	 mov	 rdx, rdi
  00084	ff d6		 call	 rsi
  00086	85 c0		 test	 eax, eax
  00088	0f 85 1e 02 00
	00		 jne	 $LN67@func_trave
$LN59@func_trave:

; 582  :     Py_VISIT(f->func_module);

  0008e	e8 00 00 00 00	 call	 _Py_PXCTX
  00093	85 c0		 test	 eax, eax
  00095	74 1c		 je	 SHORT $LN51@func_trave
  00097	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NAJDGLKC@func_traverse?$AA@
  000a5	45 33 c9	 xor	 r9d, r9d
  000a8	41 b8 46 02 00
	00		 mov	 r8d, 582		; 00000246H
  000ae	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN51@func_trave:
  000b3	48 8b 8b a8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+168]
  000ba	48 85 c9	 test	 rcx, rcx
  000bd	74 0d		 je	 SHORT $LN53@func_trave
  000bf	48 8b d7	 mov	 rdx, rdi
  000c2	ff d6		 call	 rsi
  000c4	85 c0		 test	 eax, eax
  000c6	0f 85 e0 01 00
	00		 jne	 $LN67@func_trave
$LN53@func_trave:

; 583  :     Py_VISIT(f->func_defaults);

  000cc	e8 00 00 00 00	 call	 _Py_PXCTX
  000d1	85 c0		 test	 eax, eax
  000d3	74 1c		 je	 SHORT $LN45@func_trave
  000d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  000dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NAJDGLKC@func_traverse?$AA@
  000e3	45 33 c9	 xor	 r9d, r9d
  000e6	41 b8 47 02 00
	00		 mov	 r8d, 583		; 00000247H
  000ec	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN45@func_trave:
  000f1	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  000f5	48 85 c9	 test	 rcx, rcx
  000f8	74 0d		 je	 SHORT $LN47@func_trave
  000fa	48 8b d7	 mov	 rdx, rdi
  000fd	ff d6		 call	 rsi
  000ff	85 c0		 test	 eax, eax
  00101	0f 85 a5 01 00
	00		 jne	 $LN67@func_trave
$LN47@func_trave:

; 584  :     Py_VISIT(f->func_kwdefaults);

  00107	e8 00 00 00 00	 call	 _Py_PXCTX
  0010c	85 c0		 test	 eax, eax
  0010e	74 1c		 je	 SHORT $LN39@func_trave
  00110	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00117	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NAJDGLKC@func_traverse?$AA@
  0011e	45 33 c9	 xor	 r9d, r9d
  00121	41 b8 48 02 00
	00		 mov	 r8d, 584		; 00000248H
  00127	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN39@func_trave:
  0012c	48 8b 4b 78	 mov	 rcx, QWORD PTR [rbx+120]
  00130	48 85 c9	 test	 rcx, rcx
  00133	74 0d		 je	 SHORT $LN41@func_trave
  00135	48 8b d7	 mov	 rdx, rdi
  00138	ff d6		 call	 rsi
  0013a	85 c0		 test	 eax, eax
  0013c	0f 85 6a 01 00
	00		 jne	 $LN67@func_trave
$LN41@func_trave:

; 585  :     Py_VISIT(f->func_doc);

  00142	e8 00 00 00 00	 call	 _Py_PXCTX
  00147	85 c0		 test	 eax, eax
  00149	74 1c		 je	 SHORT $LN33@func_trave
  0014b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00152	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NAJDGLKC@func_traverse?$AA@
  00159	45 33 c9	 xor	 r9d, r9d
  0015c	41 b8 49 02 00
	00		 mov	 r8d, 585		; 00000249H
  00162	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN33@func_trave:
  00167	48 8b 8b 88 00
	00 00		 mov	 rcx, QWORD PTR [rbx+136]
  0016e	48 85 c9	 test	 rcx, rcx
  00171	74 0d		 je	 SHORT $LN35@func_trave
  00173	48 8b d7	 mov	 rdx, rdi
  00176	ff d6		 call	 rsi
  00178	85 c0		 test	 eax, eax
  0017a	0f 85 2c 01 00
	00		 jne	 $LN67@func_trave
$LN35@func_trave:

; 586  :     Py_VISIT(f->func_name);

  00180	e8 00 00 00 00	 call	 _Py_PXCTX
  00185	85 c0		 test	 eax, eax
  00187	74 1c		 je	 SHORT $LN27@func_trave
  00189	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00190	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NAJDGLKC@func_traverse?$AA@
  00197	45 33 c9	 xor	 r9d, r9d
  0019a	41 b8 4a 02 00
	00		 mov	 r8d, 586		; 0000024aH
  001a0	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN27@func_trave:
  001a5	48 8b 8b 90 00
	00 00		 mov	 rcx, QWORD PTR [rbx+144]
  001ac	48 85 c9	 test	 rcx, rcx
  001af	74 0d		 je	 SHORT $LN29@func_trave
  001b1	48 8b d7	 mov	 rdx, rdi
  001b4	ff d6		 call	 rsi
  001b6	85 c0		 test	 eax, eax
  001b8	0f 85 ee 00 00
	00		 jne	 $LN67@func_trave
$LN29@func_trave:

; 587  :     Py_VISIT(f->func_dict);

  001be	e8 00 00 00 00	 call	 _Py_PXCTX
  001c3	85 c0		 test	 eax, eax
  001c5	74 1c		 je	 SHORT $LN21@func_trave
  001c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  001ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NAJDGLKC@func_traverse?$AA@
  001d5	45 33 c9	 xor	 r9d, r9d
  001d8	41 b8 4b 02 00
	00		 mov	 r8d, 587		; 0000024bH
  001de	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN21@func_trave:
  001e3	48 8b 8b 98 00
	00 00		 mov	 rcx, QWORD PTR [rbx+152]
  001ea	48 85 c9	 test	 rcx, rcx
  001ed	74 0d		 je	 SHORT $LN23@func_trave
  001ef	48 8b d7	 mov	 rdx, rdi
  001f2	ff d6		 call	 rsi
  001f4	85 c0		 test	 eax, eax
  001f6	0f 85 b0 00 00
	00		 jne	 $LN67@func_trave
$LN23@func_trave:

; 588  :     Py_VISIT(f->func_closure);

  001fc	e8 00 00 00 00	 call	 _Py_PXCTX
  00201	85 c0		 test	 eax, eax
  00203	74 1c		 je	 SHORT $LN15@func_trave
  00205	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  0020c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NAJDGLKC@func_traverse?$AA@
  00213	45 33 c9	 xor	 r9d, r9d
  00216	41 b8 4c 02 00
	00		 mov	 r8d, 588		; 0000024cH
  0021c	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN15@func_trave:
  00221	48 8b 8b 80 00
	00 00		 mov	 rcx, QWORD PTR [rbx+128]
  00228	48 85 c9	 test	 rcx, rcx
  0022b	74 09		 je	 SHORT $LN17@func_trave
  0022d	48 8b d7	 mov	 rdx, rdi
  00230	ff d6		 call	 rsi
  00232	85 c0		 test	 eax, eax
  00234	75 76		 jne	 SHORT $LN67@func_trave
$LN17@func_trave:

; 589  :     Py_VISIT(f->func_annotations);

  00236	e8 00 00 00 00	 call	 _Py_PXCTX
  0023b	85 c0		 test	 eax, eax
  0023d	74 1c		 je	 SHORT $LN9@func_trave
  0023f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00246	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NAJDGLKC@func_traverse?$AA@
  0024d	45 33 c9	 xor	 r9d, r9d
  00250	41 b8 4d 02 00
	00		 mov	 r8d, 589		; 0000024dH
  00256	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@func_trave:
  0025b	48 8b 8b b0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+176]
  00262	48 85 c9	 test	 rcx, rcx
  00265	74 09		 je	 SHORT $LN11@func_trave
  00267	48 8b d7	 mov	 rdx, rdi
  0026a	ff d6		 call	 rsi
  0026c	85 c0		 test	 eax, eax
  0026e	75 3c		 jne	 SHORT $LN67@func_trave
$LN11@func_trave:

; 590  :     Py_VISIT(f->func_qualname);

  00270	e8 00 00 00 00	 call	 _Py_PXCTX
  00275	85 c0		 test	 eax, eax
  00277	74 1c		 je	 SHORT $LN3@func_trave
  00279	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00280	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NAJDGLKC@func_traverse?$AA@
  00287	45 33 c9	 xor	 r9d, r9d
  0028a	41 b8 4e 02 00
	00		 mov	 r8d, 590		; 0000024eH
  00290	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@func_trave:
  00295	48 8b 8b b8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+184]
  0029c	48 85 c9	 test	 rcx, rcx
  0029f	74 09		 je	 SHORT $LN5@func_trave
  002a1	48 8b d7	 mov	 rdx, rdi
  002a4	ff d6		 call	 rsi
  002a6	85 c0		 test	 eax, eax
  002a8	75 02		 jne	 SHORT $LN67@func_trave
$LN5@func_trave:

; 591  :     return 0;

  002aa	33 c0		 xor	 eax, eax
$LN67@func_trave:

; 592  : }

  002ac	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  002b1	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  002b6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  002ba	5f		 pop	 rdi
  002bb	c3		 ret	 0
func_traverse ENDP
_TEXT	ENDS
EXTRN	PyEval_EvalCodeEx:PROC
EXTRN	PyDict_Next:PROC
EXTRN	PyTuple_New:PROC
EXTRN	PyDict_Size:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$function_call DD imagerel function_call
	DD	imagerel function_call+152
	DD	imagerel $unwind$function_call
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$function_call DD imagerel function_call+152
	DD	imagerel function_call+408
	DD	imagerel $chain$1$function_call
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$function_call DD imagerel function_call+408
	DD	imagerel function_call+618
	DD	imagerel $chain$2$function_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$function_call DD 021H
	DD	imagerel function_call
	DD	imagerel function_call+152
	DD	imagerel $unwind$function_call
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$function_call DD 020821H
	DD	0175408H
	DD	imagerel function_call
	DD	imagerel function_call+152
	DD	imagerel $unwind$function_call
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$function_call DD 095a01H
	DD	0cd45aH
	DD	0f00ec212H
	DD	0c00ae00cH
	DD	060077008H
	DD	03006H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\funcobject.c
xdata	ENDS
;	COMDAT function_call
_TEXT	SEGMENT
pos$20882 = 160
func$ = 160
arg$ = 168
nd$1$ = 176
kw$ = 176
function_call PROC					; COMDAT

; 596  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	53		 push	 rbx
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	41 54		 push	 r12
  0000a	41 56		 push	 r14
  0000c	41 57		 push	 r15
  0000e	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 597  :     PyObject *result;
; 598  :     PyObject *argdefs;
; 599  :     PyObject *kwtuple = NULL;
; 600  :     PyObject **d, **k;
; 601  :     Py_ssize_t nk, nd;
; 602  : 
; 603  :     argdefs = PyFunction_GET_DEFAULTS(func);

  00012	4c 8b 49 70	 mov	 r9, QWORD PTR [rcx+112]
  00016	33 f6		 xor	 esi, esi
  00018	4d 8b e0	 mov	 r12, r8
  0001b	48 8b da	 mov	 rbx, rdx
  0001e	4c 8b f1	 mov	 r14, rcx
  00021	8b fe		 mov	 edi, esi

; 604  :     if (argdefs != NULL && PyTuple_Check(argdefs)) {

  00023	4d 85 c9	 test	 r9, r9
  00026	74 22		 je	 SHORT $LN11@function_c
  00028	49 8b 41 58	 mov	 rax, QWORD PTR [r9+88]
  0002c	f7 80 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rax+256], 67108864 ; 04000000H
  00036	74 12		 je	 SHORT $LN11@function_c

; 605  :         d = &PyTuple_GET_ITEM((PyTupleObject *)argdefs, 0);
; 606  :         nd = PyTuple_GET_SIZE(argdefs);

  00038	49 8b 41 60	 mov	 rax, QWORD PTR [r9+96]
  0003c	4d 8d 79 70	 lea	 r15, QWORD PTR [r9+112]
  00040	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR nd$1$[rsp], rax

; 607  :     }
; 608  :     else {

  00048	eb 0b		 jmp	 SHORT $LN10@function_c
$LN11@function_c:

; 609  :         d = NULL;

  0004a	4c 8b fe	 mov	 r15, rsi

; 610  :         nd = 0;

  0004d	48 89 b4 24 b0
	00 00 00	 mov	 QWORD PTR nd$1$[rsp], rsi
$LN10@function_c:

; 611  :     }
; 612  : 
; 613  :     if (kw != NULL && PyDict_Check(kw)) {

  00055	4c 89 6c 24 60	 mov	 QWORD PTR [rsp+96], r13
  0005a	4d 85 c0	 test	 r8, r8
  0005d	0f 84 35 01 00
	00		 je	 $LN9@function_c
  00063	49 8b 40 58	 mov	 rax, QWORD PTR [r8+88]
  00067	f7 80 00 01 00
	00 00 00 00 20	 test	 DWORD PTR [rax+256], 536870912 ; 20000000H
  00071	0f 84 21 01 00
	00		 je	 $LN9@function_c

; 614  :         Py_ssize_t pos, i;
; 615  :         nk = PyDict_Size(kw);

  00077	49 8b c8	 mov	 rcx, r8
  0007a	e8 00 00 00 00	 call	 PyDict_Size

; 616  :         kwtuple = PyTuple_New(2*nk);

  0007f	48 8d 0c 00	 lea	 rcx, QWORD PTR [rax+rax]
  00083	e8 00 00 00 00	 call	 PyTuple_New
  00088	48 8b f8	 mov	 rdi, rax

; 617  :         if (kwtuple == NULL)

  0008b	48 85 c0	 test	 rax, rax
  0008e	0f 84 c3 01 00
	00		 je	 $LN12@function_c
$LN8@function_c:

; 618  :             return NULL;
; 619  :         k = &PyTuple_GET_ITEM(kwtuple, 0);

  00094	4c 8d 68 70	 lea	 r13, QWORD PTR [rax+112]
  00098	48 89 ac 24 b8
	00 00 00	 mov	 QWORD PTR [rsp+184], rbp

; 620  :         pos = i = 0;
; 621  :         while (PyDict_Next(kw, &pos, &k[i], &k[i+1])) {

  000a0	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR pos$20882[rsp]
  000a8	49 8d 6d 08	 lea	 rbp, QWORD PTR [r13+8]
  000ac	49 8b cc	 mov	 rcx, r12
  000af	4d 8b c5	 mov	 r8, r13
  000b2	4c 8b cd	 mov	 r9, rbp
  000b5	48 89 b4 24 a0
	00 00 00	 mov	 QWORD PTR pos$20882[rsp], rsi
  000bd	e8 00 00 00 00	 call	 PyDict_Next
  000c2	85 c0		 test	 eax, eax
  000c4	0f 84 b6 00 00
	00		 je	 $LN6@function_c
  000ca	49 8b dd	 mov	 rbx, r13
  000cd	0f 1f 00	 npad	 3
$LL7@function_c:

; 622  :             Py_INCREF(k[i]);

  000d0	48 8b 1b	 mov	 rbx, QWORD PTR [rbx]
  000d3	e8 00 00 00 00	 call	 _Py_PXCTX
  000d8	85 c0		 test	 eax, eax
  000da	75 32		 jne	 SHORT $LN15@function_c
  000dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000ea	4c 8b cb	 mov	 r9, rbx
  000ed	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000f3	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000fb	e8 00 00 00 00	 call	 _PyParallel_Guard
  00100	85 c0		 test	 eax, eax
  00102	75 06		 jne	 SHORT $LN14@function_c
  00104	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00108	74 04		 je	 SHORT $LN15@function_c
$LN14@function_c:
  0010a	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN15@function_c:

; 623  :             Py_INCREF(k[i+1]);

  0010e	48 8b 5d 00	 mov	 rbx, QWORD PTR [rbp]
  00112	e8 00 00 00 00	 call	 _Py_PXCTX
  00117	85 c0		 test	 eax, eax
  00119	75 32		 jne	 SHORT $LN19@function_c
  0011b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00122	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00129	4c 8b cb	 mov	 r9, rbx
  0012c	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00132	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0013a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0013f	85 c0		 test	 eax, eax
  00141	75 06		 jne	 SHORT $LN18@function_c
  00143	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00147	74 04		 je	 SHORT $LN19@function_c
$LN18@function_c:
  00149	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN19@function_c:

; 624  :             i += 2;

  0014d	48 83 c6 02	 add	 rsi, 2
  00151	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR pos$20882[rsp]
  00159	49 8b cc	 mov	 rcx, r12
  0015c	49 8d 5c f5 00	 lea	 rbx, QWORD PTR [r13+rsi*8]
  00161	4c 8b c3	 mov	 r8, rbx
  00164	48 8d 6b 08	 lea	 rbp, QWORD PTR [rbx+8]
  00168	4c 8b cd	 mov	 r9, rbp
  0016b	e8 00 00 00 00	 call	 PyDict_Next
  00170	85 c0		 test	 eax, eax
  00172	0f 85 58 ff ff
	ff		 jne	 $LL7@function_c
  00178	48 8b 9c 24 a8
	00 00 00	 mov	 rbx, QWORD PTR arg$[rsp]
$LN6@function_c:
  00180	48 8b ac 24 b8
	00 00 00	 mov	 rbp, QWORD PTR [rsp+184]

; 625  :         }
; 626  :         nk = i/2;

  00188	48 8b c6	 mov	 rax, rsi
  0018b	48 99		 cdq
  0018d	48 2b c2	 sub	 rax, rdx
  00190	48 d1 f8	 sar	 rax, 1
  00193	48 8b f0	 mov	 rsi, rax

; 627  :     }
; 628  :     else {

  00196	eb 03		 jmp	 SHORT $LN5@function_c
$LN9@function_c:

; 629  :         k = NULL;

  00198	4c 8b ee	 mov	 r13, rsi
$LN5@function_c:

; 630  :         nk = 0;
; 631  :     }
; 632  : 
; 633  :     result = PyEval_EvalCodeEx(
; 634  :         PyFunction_GET_CODE(func),
; 635  :         PyFunction_GET_GLOBALS(func), (PyObject *)NULL,
; 636  :         &PyTuple_GET_ITEM(arg, 0), PyTuple_GET_SIZE(arg),
; 637  :         k, nk, d, nd,
; 638  :         PyFunction_GET_KW_DEFAULTS(func),
; 639  :         PyFunction_GET_CLOSURE(func));

  0019b	49 8b 86 80 00
	00 00		 mov	 rax, QWORD PTR [r14+128]
  001a2	49 8b 56 68	 mov	 rdx, QWORD PTR [r14+104]
  001a6	49 8b 4e 60	 mov	 rcx, QWORD PTR [r14+96]
  001aa	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  001af	49 8b 46 78	 mov	 rax, QWORD PTR [r14+120]
  001b3	4c 8d 4b 70	 lea	 r9, QWORD PTR [rbx+112]
  001b7	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  001bc	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR nd$1$[rsp]
  001c4	45 33 c0	 xor	 r8d, r8d
  001c7	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  001cb	8b 43 60	 mov	 eax, DWORD PTR [rbx+96]
  001ce	4c 89 7c 24 38	 mov	 QWORD PTR [rsp+56], r15
  001d3	89 74 24 30	 mov	 DWORD PTR [rsp+48], esi
  001d7	4c 89 6c 24 28	 mov	 QWORD PTR [rsp+40], r13
  001dc	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  001e0	e8 00 00 00 00	 call	 PyEval_EvalCodeEx
  001e5	48 8b d8	 mov	 rbx, rax

; 640  : 
; 641  :     Py_XDECREF(kwtuple);

  001e8	48 85 ff	 test	 rdi, rdi
  001eb	74 67		 je	 SHORT $LN3@function_c
  001ed	e8 00 00 00 00	 call	 _Py_PXCTX
  001f2	85 c0		 test	 eax, eax
  001f4	75 5e		 jne	 SHORT $LN3@function_c
  001f6	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  001fa	f6 c1 20	 test	 cl, 32			; 00000020H
  001fd	75 4d		 jne	 SHORT $LN26@function_c
  001ff	84 c9		 test	 cl, cl
  00201	78 49		 js	 SHORT $LN26@function_c
  00203	f6 c1 02	 test	 cl, 2
  00206	75 4c		 jne	 SHORT $LN3@function_c
  00208	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  0020c	75 46		 jne	 SHORT $LN3@function_c
  0020e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00215	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0021c	4c 8b cf	 mov	 r9, rdi
  0021f	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00225	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0022d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00232	48 8b cf	 mov	 rcx, rdi
  00235	85 c0		 test	 eax, eax
  00237	74 07		 je	 SHORT $LN31@function_c
  00239	e8 00 00 00 00	 call	 _Px_Dealloc
  0023e	eb 14		 jmp	 SHORT $LN3@function_c
$LN31@function_c:
  00240	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00244	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0024a	eb 08		 jmp	 SHORT $LN3@function_c
$LN26@function_c:
  0024c	48 8b cf	 mov	 rcx, rdi
  0024f	e8 00 00 00 00	 call	 Px_DecRef
$LN3@function_c:

; 642  : 
; 643  :     return result;

  00254	48 8b c3	 mov	 rax, rbx
$LN12@function_c:
  00257	4c 8b 6c 24 60	 mov	 r13, QWORD PTR [rsp+96]

; 644  : }

  0025c	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00260	41 5f		 pop	 r15
  00262	41 5e		 pop	 r14
  00264	41 5c		 pop	 r12
  00266	5f		 pop	 rdi
  00267	5e		 pop	 rsi
  00268	5b		 pop	 rbx
  00269	c3		 ret	 0
function_call ENDP
_TEXT	ENDS
EXTRN	PyMethod_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$func_descr_get DD imagerel func_descr_get
	DD	imagerel func_descr_get+104
	DD	imagerel $unwind$func_descr_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$func_descr_get DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\funcobject.c
xdata	ENDS
;	COMDAT func_descr_get
_TEXT	SEGMENT
func$ = 64
obj$ = 72
type$ = 80
func_descr_get PROC					; COMDAT

; 649  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 650  :     if (obj == Py_None || obj == NULL) {

  00006	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	48 3b d0	 cmp	 rdx, rax
  00013	74 0f		 je	 SHORT $LN1@func_descr
  00015	48 85 d2	 test	 rdx, rdx
  00018	74 0a		 je	 SHORT $LN1@func_descr

; 653  :     }
; 654  :     return PyMethod_New(func, obj);
; 655  : }

  0001a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0001e	5b		 pop	 rbx
  0001f	e9 00 00 00 00	 jmp	 PyMethod_New
$LN1@func_descr:

; 651  :         Py_INCREF(func);

  00024	e8 00 00 00 00	 call	 _Py_PXCTX
  00029	85 c0		 test	 eax, eax
  0002b	75 32		 jne	 SHORT $LN6@func_descr
  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0003b	4c 8b cb	 mov	 r9, rbx
  0003e	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00044	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0004c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00051	85 c0		 test	 eax, eax
  00053	75 06		 jne	 SHORT $LN5@func_descr
  00055	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00059	74 04		 je	 SHORT $LN6@func_descr
$LN5@func_descr:
  0005b	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN6@func_descr:

; 652  :         return func;

  0005f	48 8b c3	 mov	 rax, rbx

; 653  :     }
; 654  :     return PyMethod_New(func, obj);
; 655  : }

  00062	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00066	5b		 pop	 rbx
  00067	c3		 ret	 0
func_descr_get ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@LKFCMIDP@cm_dealloc?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$cm_dealloc DD imagerel cm_dealloc
	DD	imagerel cm_dealloc+381
	DD	imagerel $unwind$cm_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cm_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0L@LKFCMIDP@cm_dealloc?$AA@
CONST	SEGMENT
??_C@_0L@LKFCMIDP@cm_dealloc?$AA@ DB 'cm_dealloc', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\funcobject.c
CONST	ENDS
;	COMDAT cm_dealloc
_TEXT	SEGMENT
cm$ = 64
cm_dealloc PROC						; COMDAT

; 726  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 727  :     _PyObject_GC_UNTRACK((PyObject *)cm);

  0000d	4c 8b c9	 mov	 r9, rcx
  00010	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@LKFCMIDP@cm_dealloc?$AA@
  0001e	41 b8 d7 02 00
	00		 mov	 r8d, 727		; 000002d7H
  00024	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0002c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00031	85 c0		 test	 eax, eax
  00033	75 54		 jne	 SHORT $LN9@cm_dealloc
  00035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@LKFCMIDP@cm_dealloc?$AA@
  00043	4c 8b cf	 mov	 r9, rdi
  00046	41 b8 d7 02 00
	00		 mov	 r8d, 727		; 000002d7H
  0004c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00054	e8 00 00 00 00	 call	 _PyParallel_Guard
  00059	85 c0		 test	 eax, eax
  0005b	74 04		 je	 SHORT $LN15@cm_dealloc
  0005d	33 d2		 xor	 edx, edx
  0005f	eb 04		 jmp	 SHORT $LN16@cm_dealloc
$LN15@cm_dealloc:
  00061	48 8d 57 e8	 lea	 rdx, QWORD PTR [rdi-24]
$LN16@cm_dealloc:
  00065	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00068	48 8b 4a 08	 mov	 rcx, QWORD PTR [rdx+8]
  0006c	48 c7 42 10 fe
	ff ff ff	 mov	 QWORD PTR [rdx+16], -2
  00074	48 89 01	 mov	 QWORD PTR [rcx], rax
  00077	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  0007a	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  0007e	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00082	48 c7 02 00 00
	00 00		 mov	 QWORD PTR [rdx], 0
$LN9@cm_dealloc:

; 728  :     Py_XDECREF(cm->cm_callable);

  00089	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  0008d	48 85 db	 test	 rbx, rbx
  00090	74 65		 je	 SHORT $LN7@cm_dealloc
  00092	e8 00 00 00 00	 call	 _Py_PXCTX
  00097	85 c0		 test	 eax, eax
  00099	75 5c		 jne	 SHORT $LN7@cm_dealloc
  0009b	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0009f	a8 20		 test	 al, 32			; 00000020H
  000a1	75 4c		 jne	 SHORT $LN21@cm_dealloc
  000a3	84 c0		 test	 al, al
  000a5	78 48		 js	 SHORT $LN21@cm_dealloc
  000a7	a8 02		 test	 al, 2
  000a9	75 4c		 jne	 SHORT $LN7@cm_dealloc
  000ab	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000af	75 46		 jne	 SHORT $LN7@cm_dealloc
  000b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000bf	4c 8b cb	 mov	 r9, rbx
  000c2	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000c8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d0	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d5	48 8b cb	 mov	 rcx, rbx
  000d8	85 c0		 test	 eax, eax
  000da	74 07		 je	 SHORT $LN26@cm_dealloc
  000dc	e8 00 00 00 00	 call	 _Px_Dealloc
  000e1	eb 14		 jmp	 SHORT $LN7@cm_dealloc
$LN26@cm_dealloc:
  000e3	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000e7	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000ed	eb 08		 jmp	 SHORT $LN7@cm_dealloc
$LN21@cm_dealloc:
  000ef	48 8b cb	 mov	 rcx, rbx
  000f2	e8 00 00 00 00	 call	 Px_DecRef
$LN7@cm_dealloc:

; 729  :     Py_XDECREF(cm->cm_dict);

  000f7	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  000fb	48 85 db	 test	 rbx, rbx
  000fe	74 65		 je	 SHORT $LN3@cm_dealloc
  00100	e8 00 00 00 00	 call	 _Py_PXCTX
  00105	85 c0		 test	 eax, eax
  00107	75 5c		 jne	 SHORT $LN3@cm_dealloc
  00109	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0010d	a8 20		 test	 al, 32			; 00000020H
  0010f	75 4c		 jne	 SHORT $LN32@cm_dealloc
  00111	84 c0		 test	 al, al
  00113	78 48		 js	 SHORT $LN32@cm_dealloc
  00115	a8 02		 test	 al, 2
  00117	75 4c		 jne	 SHORT $LN3@cm_dealloc
  00119	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0011d	75 46		 jne	 SHORT $LN3@cm_dealloc
  0011f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00126	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0012d	4c 8b cb	 mov	 r9, rbx
  00130	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00136	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0013e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00143	48 8b cb	 mov	 rcx, rbx
  00146	85 c0		 test	 eax, eax
  00148	74 07		 je	 SHORT $LN37@cm_dealloc
  0014a	e8 00 00 00 00	 call	 _Px_Dealloc
  0014f	eb 14		 jmp	 SHORT $LN3@cm_dealloc
$LN37@cm_dealloc:
  00151	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00155	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0015b	eb 08		 jmp	 SHORT $LN3@cm_dealloc
$LN32@cm_dealloc:
  0015d	48 8b cb	 mov	 rcx, rbx
  00160	e8 00 00 00 00	 call	 Px_DecRef
$LN3@cm_dealloc:

; 730  :     Py_TYPE(cm)->tp_free((PyObject *)cm);

  00165	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00169	48 8b cf	 mov	 rcx, rdi

; 731  : }

  0016c	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00171	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00175	5f		 pop	 rdi
  00176	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
cm_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@GFOAPFOK@cm_traverse?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$cm_traverse DD imagerel cm_traverse
	DD	imagerel cm_traverse+152
	DD	imagerel $unwind$cm_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cm_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0M@GFOAPFOK@cm_traverse?$AA@
CONST	SEGMENT
??_C@_0M@GFOAPFOK@cm_traverse?$AA@ DB 'cm_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT cm_traverse
_TEXT	SEGMENT
cm$ = 48
visit$ = 56
arg$ = 64
cm_traverse PROC					; COMDAT

; 735  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 736  :     Py_VISIT(cm->cm_callable);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN9@cm_travers
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@GFOAPFOK@cm_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 e0 02 00
	00		 mov	 r8d, 736		; 000002e0H
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@cm_travers:
  0003d	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN11@cm_travers
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 39		 jne	 SHORT $LN13@cm_travers
$LN11@cm_travers:

; 737  :     Py_VISIT(cm->cm_dict);

  0004f	e8 00 00 00 00	 call	 _Py_PXCTX
  00054	85 c0		 test	 eax, eax
  00056	74 1c		 je	 SHORT $LN3@cm_travers
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@GFOAPFOK@cm_traverse?$AA@
  00066	45 33 c9	 xor	 r9d, r9d
  00069	41 b8 e1 02 00
	00		 mov	 r8d, 737		; 000002e1H
  0006f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@cm_travers:
  00074	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00078	48 85 c9	 test	 rcx, rcx
  0007b	74 09		 je	 SHORT $LN5@cm_travers
  0007d	48 8b d7	 mov	 rdx, rdi
  00080	ff d6		 call	 rsi
  00082	85 c0		 test	 eax, eax
  00084	75 02		 jne	 SHORT $LN13@cm_travers
$LN5@cm_travers:

; 738  :     return 0;

  00086	33 c0		 xor	 eax, eax
$LN13@cm_travers:

; 739  : }

  00088	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00092	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00096	5f		 pop	 rdi
  00097	c3		 ret	 0
cm_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_08GICNCAOO@cm_clear?$AA@			; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$cm_clear DD imagerel cm_clear
	DD	imagerel cm_clear+378
	DD	imagerel $unwind$cm_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cm_clear DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_08GICNCAOO@cm_clear?$AA@
CONST	SEGMENT
??_C@_08GICNCAOO@cm_clear?$AA@ DB 'cm_clear', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\funcobject.c
CONST	ENDS
;	COMDAT cm_clear
_TEXT	SEGMENT
cm$ = 64
cm_clear PROC						; COMDAT

; 743  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 744  :     Py_CLEAR(cm->cm_callable);

  0000a	4c 8b 49 60	 mov	 r9, QWORD PTR [rcx+96]
  0000e	48 8b f9	 mov	 rdi, rcx
  00011	4d 85 c9	 test	 r9, r9
  00014	0f 84 96 00 00
	00		 je	 $LN7@cm_clear
  0001a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08GICNCAOO@cm_clear?$AA@
  00028	41 b8 e8 02 00
	00		 mov	 r8d, 744		; 000002e8H
  0002e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00036	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003b	85 c0		 test	 eax, eax
  0003d	75 71		 jne	 SHORT $LN7@cm_clear
  0003f	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  00043	48 c7 47 60 00
	00 00 00	 mov	 QWORD PTR [rdi+96], 0
  0004b	e8 00 00 00 00	 call	 _Py_PXCTX
  00050	85 c0		 test	 eax, eax
  00052	75 5c		 jne	 SHORT $LN7@cm_clear
  00054	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00058	a8 20		 test	 al, 32			; 00000020H
  0005a	75 4c		 jne	 SHORT $LN15@cm_clear
  0005c	84 c0		 test	 al, al
  0005e	78 48		 js	 SHORT $LN15@cm_clear
  00060	a8 02		 test	 al, 2
  00062	75 4c		 jne	 SHORT $LN7@cm_clear
  00064	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00068	75 46		 jne	 SHORT $LN7@cm_clear
  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00078	4c 8b cb	 mov	 r9, rbx
  0007b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00081	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00089	e8 00 00 00 00	 call	 _PyParallel_Guard
  0008e	48 8b cb	 mov	 rcx, rbx
  00091	85 c0		 test	 eax, eax
  00093	74 07		 je	 SHORT $LN20@cm_clear
  00095	e8 00 00 00 00	 call	 _Px_Dealloc
  0009a	eb 14		 jmp	 SHORT $LN7@cm_clear
$LN20@cm_clear:
  0009c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000a0	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000a6	eb 08		 jmp	 SHORT $LN7@cm_clear
$LN15@cm_clear:
  000a8	48 8b cb	 mov	 rcx, rbx
  000ab	e8 00 00 00 00	 call	 Px_DecRef
$LN7@cm_clear:

; 745  :     Py_CLEAR(cm->cm_dict);

  000b0	4c 8b 4f 68	 mov	 r9, QWORD PTR [rdi+104]
  000b4	4d 85 c9	 test	 r9, r9
  000b7	0f 84 b0 00 00
	00		 je	 $LN35@cm_clear
  000bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  000c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08GICNCAOO@cm_clear?$AA@
  000cb	41 b8 e9 02 00
	00		 mov	 r8d, 745		; 000002e9H
  000d1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d9	e8 00 00 00 00	 call	 _PyParallel_Guard
  000de	85 c0		 test	 eax, eax
  000e0	0f 85 87 00 00
	00		 jne	 $LN35@cm_clear
  000e6	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  000ea	48 c7 47 68 00
	00 00 00	 mov	 QWORD PTR [rdi+104], 0
  000f2	e8 00 00 00 00	 call	 _Py_PXCTX
  000f7	85 c0		 test	 eax, eax
  000f9	75 72		 jne	 SHORT $LN35@cm_clear
  000fb	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000ff	a8 20		 test	 al, 32			; 00000020H
  00101	75 62		 jne	 SHORT $LN26@cm_clear
  00103	84 c0		 test	 al, al
  00105	78 5e		 js	 SHORT $LN26@cm_clear
  00107	a8 02		 test	 al, 2
  00109	75 62		 jne	 SHORT $LN35@cm_clear
  0010b	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0010f	75 5c		 jne	 SHORT $LN35@cm_clear
  00111	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00118	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0011f	4c 8b cb	 mov	 r9, rbx
  00122	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00128	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00130	e8 00 00 00 00	 call	 _PyParallel_Guard
  00135	48 8b cb	 mov	 rcx, rbx
  00138	85 c0		 test	 eax, eax
  0013a	74 12		 je	 SHORT $LN31@cm_clear
  0013c	e8 00 00 00 00	 call	 _Px_Dealloc

; 746  :     return 0;

  00141	33 c0		 xor	 eax, eax

; 747  : }

  00143	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00148	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0014c	5f		 pop	 rdi
  0014d	c3		 ret	 0

; 745  :     Py_CLEAR(cm->cm_dict);

$LN31@cm_clear:
  0014e	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00152	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 746  :     return 0;

  00158	33 c0		 xor	 eax, eax

; 747  : }

  0015a	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0015f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00163	5f		 pop	 rdi
  00164	c3		 ret	 0

; 745  :     Py_CLEAR(cm->cm_dict);

$LN26@cm_clear:
  00165	48 8b cb	 mov	 rcx, rbx
  00168	e8 00 00 00 00	 call	 Px_DecRef
$LN35@cm_clear:

; 746  :     return 0;

  0016d	33 c0		 xor	 eax, eax

; 747  : }

  0016f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00174	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00178	5f		 pop	 rdi
  00179	c3		 ret	 0
cm_clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@MCFKJGBA@uninitialized?5classmethod?5object@ ; `string'
EXTRN	PyExc_RuntimeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$cm_descr_get DD imagerel cm_descr_get
	DD	imagerel cm_descr_get+60
	DD	imagerel $unwind$cm_descr_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cm_descr_get DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0CB@MCFKJGBA@uninitialized?5classmethod?5object@
CONST	SEGMENT
??_C@_0CB@MCFKJGBA@uninitialized?5classmethod?5object@ DB 'uninitialized '
	DB	'classmethod object', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT cm_descr_get
_TEXT	SEGMENT
self$ = 48
obj$ = 56
type$ = 64
cm_descr_get PROC					; COMDAT

; 752  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 753  :     classmethod *cm = (classmethod *)self;
; 754  : 
; 755  :     if (cm->cm_callable == NULL) {

  00004	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00008	48 85 c9	 test	 rcx, rcx
  0000b	75 1a		 jne	 SHORT $LN2@cm_descr_g

; 756  :         PyErr_SetString(PyExc_RuntimeError,
; 757  :                         "uninitialized classmethod object");

  0000d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00014	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@MCFKJGBA@uninitialized?5classmethod?5object@
  0001b	e8 00 00 00 00	 call	 PyErr_SetString

; 758  :         return NULL;

  00020	33 c0		 xor	 eax, eax

; 763  : }

  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
$LN2@cm_descr_g:

; 759  :     }
; 760  :     if (type == NULL)

  00027	4d 85 c0	 test	 r8, r8
  0002a	75 04		 jne	 SHORT $LN1@cm_descr_g

; 761  :         type = (PyObject *)(Py_TYPE(obj));

  0002c	4c 8b 42 58	 mov	 r8, QWORD PTR [rdx+88]
$LN1@cm_descr_g:

; 762  :     return PyMethod_New(cm->cm_callable, type);

  00030	49 8b d0	 mov	 rdx, r8

; 763  : }

  00033	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00037	e9 00 00 00 00	 jmp	 PyMethod_New
cm_descr_get ENDP
_TEXT	ENDS
EXTRN	_PyArg_NoKeywords:PROC
EXTRN	PyArg_UnpackTuple:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$cm_init DD imagerel cm_init
	DD	imagerel cm_init+176
	DD	imagerel $unwind$cm_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cm_init DD 040a01H
	DD	09340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\funcobject.c
xdata	ENDS
;	COMDAT cm_init
_TEXT	SEGMENT
callable$ = 64
self$ = 64
args$ = 72
kwds$ = 80
cm_init	PROC						; COMDAT

; 767  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx
  0000d	48 8b c2	 mov	 rax, rdx

; 768  :     classmethod *cm = (classmethod *)self;
; 769  :     PyObject *callable;
; 770  : 
; 771  :     if (!PyArg_UnpackTuple(args, "classmethod", 1, 1, &callable))

  00010	48 8d 4c 24 40	 lea	 rcx, QWORD PTR callable$[rsp]
  00015	41 b9 01 00 00
	00		 mov	 r9d, 1
  0001b	49 8b d8	 mov	 rbx, r8
  0001e	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00023	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@FGHOINCL@classmethod?$AA@
  0002a	48 8b c8	 mov	 rcx, rax
  0002d	45 8b c1	 mov	 r8d, r9d
  00030	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00035	85 c0		 test	 eax, eax
  00037	75 0e		 jne	 SHORT $LN2@cm_init
$LN9@cm_init:

; 772  :         return -1;

  00039	83 c8 ff	 or	 eax, -1

; 777  :     return 0;
; 778  : }

  0003c	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00041	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00045	5f		 pop	 rdi
  00046	c3		 ret	 0
$LN2@cm_init:

; 773  :     if (!_PyArg_NoKeywords("classmethod", kwds))

  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@FGHOINCL@classmethod?$AA@
  0004e	48 8b d3	 mov	 rdx, rbx
  00051	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  00056	85 c0		 test	 eax, eax

; 774  :         return -1;

  00058	74 df		 je	 SHORT $LN9@cm_init

; 775  :     Py_INCREF(callable);

  0005a	48 8b 5c 24 40	 mov	 rbx, QWORD PTR callable$[rsp]
  0005f	e8 00 00 00 00	 call	 _Py_PXCTX
  00064	85 c0		 test	 eax, eax
  00066	75 32		 jne	 SHORT $LN6@cm_init
  00068	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00076	4c 8b cb	 mov	 r9, rbx
  00079	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0007f	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00087	e8 00 00 00 00	 call	 _PyParallel_Guard
  0008c	85 c0		 test	 eax, eax
  0008e	75 06		 jne	 SHORT $LN5@cm_init
  00090	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00094	74 04		 je	 SHORT $LN6@cm_init
$LN5@cm_init:
  00096	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN6@cm_init:

; 776  :     cm->cm_callable = callable;

  0009a	48 8b 44 24 40	 mov	 rax, QWORD PTR callable$[rsp]

; 777  :     return 0;
; 778  : }

  0009f	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000a4	48 89 47 60	 mov	 QWORD PTR [rdi+96], rax
  000a8	33 c0		 xor	 eax, eax
  000aa	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ae	5f		 pop	 rdi
  000af	c3		 ret	 0
cm_init	ENDP
_TEXT	ENDS
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
EXTRN	_PyObject_IsAbstract:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$cm_get___isabstractmethod__ DD imagerel cm_get___isabstractmethod__
	DD	imagerel cm_get___isabstractmethod__+191
	DD	imagerel $unwind$cm_get___isabstractmethod__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cm_get___isabstractmethod__ DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\funcobject.c
xdata	ENDS
;	COMDAT cm_get___isabstractmethod__
_TEXT	SEGMENT
cm$ = 64
closure$ = 72
cm_get___isabstractmethod__ PROC			; COMDAT

; 787  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 788  :     int res = _PyObject_IsAbstract(cm->cm_callable);

  00004	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00008	e8 00 00 00 00	 call	 _PyObject_IsAbstract

; 789  :     if (res == -1) {

  0000d	83 f8 ff	 cmp	 eax, -1
  00010	75 07		 jne	 SHORT $LN3@cm_get___i

; 790  :         return NULL;

  00012	33 c0		 xor	 eax, eax

; 796  : }

  00014	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00018	c3		 ret	 0
$LN3@cm_get___i:

; 791  :     }
; 792  :     else if (res) {

  00019	85 c0		 test	 eax, eax
  0001b	74 51		 je	 SHORT $LN1@cm_get___i

; 793  :         Py_RETURN_TRUE;

  0001d	e8 00 00 00 00	 call	 _Py_PXCTX
  00022	85 c0		 test	 eax, eax
  00024	75 3c		 jne	 SHORT $LN7@cm_get___i
  00026	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_TrueStruct
  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0003b	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00041	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00049	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004e	85 c0		 test	 eax, eax
  00050	75 09		 jne	 SHORT $LN6@cm_get___i
  00052	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_TrueStruct+32, 32 ; 00000020H
  00059	74 07		 je	 SHORT $LN7@cm_get___i
$LN6@cm_get___i:
  0005b	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_TrueStruct+80
$LN7@cm_get___i:
  00062	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct

; 796  : }

  00069	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006d	c3		 ret	 0
$LN1@cm_get___i:

; 794  :     }
; 795  :     Py_RETURN_FALSE;

  0006e	e8 00 00 00 00	 call	 _Py_PXCTX
  00073	85 c0		 test	 eax, eax
  00075	75 3c		 jne	 SHORT $LN11@cm_get___i
  00077	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_FalseStruct
  0007e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00085	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0008c	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00092	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0009a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009f	85 c0		 test	 eax, eax
  000a1	75 09		 jne	 SHORT $LN10@cm_get___i
  000a3	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  000aa	74 07		 je	 SHORT $LN11@cm_get___i
$LN10@cm_get___i:
  000ac	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN11@cm_get___i:
  000b3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 796  : }

  000ba	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000be	c3		 ret	 0
cm_get___isabstractmethod__ ENDP
_TEXT	ENDS
PUBLIC	PyClassMethod_New
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyClassMethod_New DD imagerel $LN9
	DD	imagerel $LN9+112
	DD	imagerel $unwind$PyClassMethod_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyClassMethod_New DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\funcobject.c
xdata	ENDS
;	COMDAT PyClassMethod_New
_TEXT	SEGMENT
callable$ = 64
PyClassMethod_New PROC					; COMDAT

; 872  : {

$LN9:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b d9	 mov	 rbx, rcx

; 873  :     classmethod *cm = (classmethod *)
; 874  :         PyType_GenericAlloc(&PyClassMethod_Type, 0);

  0000d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyClassMethod_Type
  00014	33 d2		 xor	 edx, edx
  00016	e8 00 00 00 00	 call	 PyType_GenericAlloc
  0001b	48 8b f8	 mov	 rdi, rax

; 875  :     if (cm != NULL) {

  0001e	48 85 c0	 test	 rax, rax
  00021	74 42		 je	 SHORT $LN1@PyClassMet

; 876  :         Py_INCREF(callable);

  00023	e8 00 00 00 00	 call	 _Py_PXCTX
  00028	85 c0		 test	 eax, eax
  0002a	75 32		 jne	 SHORT $LN5@PyClassMet
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0003a	4c 8b cb	 mov	 r9, rbx
  0003d	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00043	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0004b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00050	85 c0		 test	 eax, eax
  00052	75 06		 jne	 SHORT $LN4@PyClassMet
  00054	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00058	74 04		 je	 SHORT $LN5@PyClassMet
$LN4@PyClassMet:
  0005a	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN5@PyClassMet:

; 877  :         cm->cm_callable = callable;

  0005e	48 89 5f 60	 mov	 QWORD PTR [rdi+96], rbx

; 878  :     }
; 879  :     return (PyObject *)cm;

  00062	48 8b c7	 mov	 rax, rdi
$LN1@PyClassMet:

; 880  : }

  00065	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0006a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0006e	5f		 pop	 rdi
  0006f	c3		 ret	 0
PyClassMethod_New ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@BEKEAMPE@sm_dealloc?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$sm_dealloc DD imagerel sm_dealloc
	DD	imagerel sm_dealloc+381
	DD	imagerel $unwind$sm_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sm_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0L@BEKEAMPE@sm_dealloc?$AA@
CONST	SEGMENT
??_C@_0L@BEKEAMPE@sm_dealloc?$AA@ DB 'sm_dealloc', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\funcobject.c
CONST	ENDS
;	COMDAT sm_dealloc
_TEXT	SEGMENT
sm$ = 64
sm_dealloc PROC						; COMDAT

; 907  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 908  :     _PyObject_GC_UNTRACK((PyObject *)sm);

  0000d	4c 8b c9	 mov	 r9, rcx
  00010	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@BEKEAMPE@sm_dealloc?$AA@
  0001e	41 b8 8c 03 00
	00		 mov	 r8d, 908		; 0000038cH
  00024	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0002c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00031	85 c0		 test	 eax, eax
  00033	75 54		 jne	 SHORT $LN9@sm_dealloc
  00035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@BEKEAMPE@sm_dealloc?$AA@
  00043	4c 8b cf	 mov	 r9, rdi
  00046	41 b8 8c 03 00
	00		 mov	 r8d, 908		; 0000038cH
  0004c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00054	e8 00 00 00 00	 call	 _PyParallel_Guard
  00059	85 c0		 test	 eax, eax
  0005b	74 04		 je	 SHORT $LN15@sm_dealloc
  0005d	33 d2		 xor	 edx, edx
  0005f	eb 04		 jmp	 SHORT $LN16@sm_dealloc
$LN15@sm_dealloc:
  00061	48 8d 57 e8	 lea	 rdx, QWORD PTR [rdi-24]
$LN16@sm_dealloc:
  00065	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00068	48 8b 4a 08	 mov	 rcx, QWORD PTR [rdx+8]
  0006c	48 c7 42 10 fe
	ff ff ff	 mov	 QWORD PTR [rdx+16], -2
  00074	48 89 01	 mov	 QWORD PTR [rcx], rax
  00077	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  0007a	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  0007e	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00082	48 c7 02 00 00
	00 00		 mov	 QWORD PTR [rdx], 0
$LN9@sm_dealloc:

; 909  :     Py_XDECREF(sm->sm_callable);

  00089	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  0008d	48 85 db	 test	 rbx, rbx
  00090	74 65		 je	 SHORT $LN7@sm_dealloc
  00092	e8 00 00 00 00	 call	 _Py_PXCTX
  00097	85 c0		 test	 eax, eax
  00099	75 5c		 jne	 SHORT $LN7@sm_dealloc
  0009b	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0009f	a8 20		 test	 al, 32			; 00000020H
  000a1	75 4c		 jne	 SHORT $LN21@sm_dealloc
  000a3	84 c0		 test	 al, al
  000a5	78 48		 js	 SHORT $LN21@sm_dealloc
  000a7	a8 02		 test	 al, 2
  000a9	75 4c		 jne	 SHORT $LN7@sm_dealloc
  000ab	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000af	75 46		 jne	 SHORT $LN7@sm_dealloc
  000b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000bf	4c 8b cb	 mov	 r9, rbx
  000c2	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000c8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d0	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d5	48 8b cb	 mov	 rcx, rbx
  000d8	85 c0		 test	 eax, eax
  000da	74 07		 je	 SHORT $LN26@sm_dealloc
  000dc	e8 00 00 00 00	 call	 _Px_Dealloc
  000e1	eb 14		 jmp	 SHORT $LN7@sm_dealloc
$LN26@sm_dealloc:
  000e3	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000e7	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000ed	eb 08		 jmp	 SHORT $LN7@sm_dealloc
$LN21@sm_dealloc:
  000ef	48 8b cb	 mov	 rcx, rbx
  000f2	e8 00 00 00 00	 call	 Px_DecRef
$LN7@sm_dealloc:

; 910  :     Py_XDECREF(sm->sm_dict);

  000f7	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  000fb	48 85 db	 test	 rbx, rbx
  000fe	74 65		 je	 SHORT $LN3@sm_dealloc
  00100	e8 00 00 00 00	 call	 _Py_PXCTX
  00105	85 c0		 test	 eax, eax
  00107	75 5c		 jne	 SHORT $LN3@sm_dealloc
  00109	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0010d	a8 20		 test	 al, 32			; 00000020H
  0010f	75 4c		 jne	 SHORT $LN32@sm_dealloc
  00111	84 c0		 test	 al, al
  00113	78 48		 js	 SHORT $LN32@sm_dealloc
  00115	a8 02		 test	 al, 2
  00117	75 4c		 jne	 SHORT $LN3@sm_dealloc
  00119	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0011d	75 46		 jne	 SHORT $LN3@sm_dealloc
  0011f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00126	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0012d	4c 8b cb	 mov	 r9, rbx
  00130	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00136	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0013e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00143	48 8b cb	 mov	 rcx, rbx
  00146	85 c0		 test	 eax, eax
  00148	74 07		 je	 SHORT $LN37@sm_dealloc
  0014a	e8 00 00 00 00	 call	 _Px_Dealloc
  0014f	eb 14		 jmp	 SHORT $LN3@sm_dealloc
$LN37@sm_dealloc:
  00151	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00155	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0015b	eb 08		 jmp	 SHORT $LN3@sm_dealloc
$LN32@sm_dealloc:
  0015d	48 8b cb	 mov	 rcx, rbx
  00160	e8 00 00 00 00	 call	 Px_DecRef
$LN3@sm_dealloc:

; 911  :     Py_TYPE(sm)->tp_free((PyObject *)sm);

  00165	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00169	48 8b cf	 mov	 rcx, rdi

; 912  : }

  0016c	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00171	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00175	5f		 pop	 rdi
  00176	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
sm_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@GJPIBIBG@sm_traverse?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$sm_traverse DD imagerel sm_traverse
	DD	imagerel sm_traverse+152
	DD	imagerel $unwind$sm_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sm_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0M@GJPIBIBG@sm_traverse?$AA@
CONST	SEGMENT
??_C@_0M@GJPIBIBG@sm_traverse?$AA@ DB 'sm_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT sm_traverse
_TEXT	SEGMENT
sm$ = 48
visit$ = 56
arg$ = 64
sm_traverse PROC					; COMDAT

; 916  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 917  :     Py_VISIT(sm->sm_callable);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN9@sm_travers
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@GJPIBIBG@sm_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 95 03 00
	00		 mov	 r8d, 917		; 00000395H
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@sm_travers:
  0003d	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN11@sm_travers
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 39		 jne	 SHORT $LN13@sm_travers
$LN11@sm_travers:

; 918  :     Py_VISIT(sm->sm_dict);

  0004f	e8 00 00 00 00	 call	 _Py_PXCTX
  00054	85 c0		 test	 eax, eax
  00056	74 1c		 je	 SHORT $LN3@sm_travers
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@GJPIBIBG@sm_traverse?$AA@
  00066	45 33 c9	 xor	 r9d, r9d
  00069	41 b8 96 03 00
	00		 mov	 r8d, 918		; 00000396H
  0006f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@sm_travers:
  00074	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00078	48 85 c9	 test	 rcx, rcx
  0007b	74 09		 je	 SHORT $LN5@sm_travers
  0007d	48 8b d7	 mov	 rdx, rdi
  00080	ff d6		 call	 rsi
  00082	85 c0		 test	 eax, eax
  00084	75 02		 jne	 SHORT $LN13@sm_travers
$LN5@sm_travers:

; 919  :     return 0;

  00086	33 c0		 xor	 eax, eax
$LN13@sm_travers:

; 920  : }

  00088	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00092	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00096	5f		 pop	 rdi
  00097	c3		 ret	 0
sm_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_08MEONGCJP@sm_clear?$AA@			; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$sm_clear DD imagerel sm_clear
	DD	imagerel sm_clear+378
	DD	imagerel $unwind$sm_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sm_clear DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_08MEONGCJP@sm_clear?$AA@
CONST	SEGMENT
??_C@_08MEONGCJP@sm_clear?$AA@ DB 'sm_clear', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\funcobject.c
CONST	ENDS
;	COMDAT sm_clear
_TEXT	SEGMENT
sm$ = 64
sm_clear PROC						; COMDAT

; 924  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 925  :     Py_CLEAR(sm->sm_callable);

  0000a	4c 8b 49 60	 mov	 r9, QWORD PTR [rcx+96]
  0000e	48 8b f9	 mov	 rdi, rcx
  00011	4d 85 c9	 test	 r9, r9
  00014	0f 84 96 00 00
	00		 je	 $LN7@sm_clear
  0001a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08MEONGCJP@sm_clear?$AA@
  00028	41 b8 9d 03 00
	00		 mov	 r8d, 925		; 0000039dH
  0002e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00036	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003b	85 c0		 test	 eax, eax
  0003d	75 71		 jne	 SHORT $LN7@sm_clear
  0003f	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  00043	48 c7 47 60 00
	00 00 00	 mov	 QWORD PTR [rdi+96], 0
  0004b	e8 00 00 00 00	 call	 _Py_PXCTX
  00050	85 c0		 test	 eax, eax
  00052	75 5c		 jne	 SHORT $LN7@sm_clear
  00054	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00058	a8 20		 test	 al, 32			; 00000020H
  0005a	75 4c		 jne	 SHORT $LN15@sm_clear
  0005c	84 c0		 test	 al, al
  0005e	78 48		 js	 SHORT $LN15@sm_clear
  00060	a8 02		 test	 al, 2
  00062	75 4c		 jne	 SHORT $LN7@sm_clear
  00064	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00068	75 46		 jne	 SHORT $LN7@sm_clear
  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00078	4c 8b cb	 mov	 r9, rbx
  0007b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00081	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00089	e8 00 00 00 00	 call	 _PyParallel_Guard
  0008e	48 8b cb	 mov	 rcx, rbx
  00091	85 c0		 test	 eax, eax
  00093	74 07		 je	 SHORT $LN20@sm_clear
  00095	e8 00 00 00 00	 call	 _Px_Dealloc
  0009a	eb 14		 jmp	 SHORT $LN7@sm_clear
$LN20@sm_clear:
  0009c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000a0	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000a6	eb 08		 jmp	 SHORT $LN7@sm_clear
$LN15@sm_clear:
  000a8	48 8b cb	 mov	 rcx, rbx
  000ab	e8 00 00 00 00	 call	 Px_DecRef
$LN7@sm_clear:

; 926  :     Py_CLEAR(sm->sm_dict);

  000b0	4c 8b 4f 68	 mov	 r9, QWORD PTR [rdi+104]
  000b4	4d 85 c9	 test	 r9, r9
  000b7	0f 84 b0 00 00
	00		 je	 $LN35@sm_clear
  000bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  000c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08MEONGCJP@sm_clear?$AA@
  000cb	41 b8 9e 03 00
	00		 mov	 r8d, 926		; 0000039eH
  000d1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d9	e8 00 00 00 00	 call	 _PyParallel_Guard
  000de	85 c0		 test	 eax, eax
  000e0	0f 85 87 00 00
	00		 jne	 $LN35@sm_clear
  000e6	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  000ea	48 c7 47 68 00
	00 00 00	 mov	 QWORD PTR [rdi+104], 0
  000f2	e8 00 00 00 00	 call	 _Py_PXCTX
  000f7	85 c0		 test	 eax, eax
  000f9	75 72		 jne	 SHORT $LN35@sm_clear
  000fb	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000ff	a8 20		 test	 al, 32			; 00000020H
  00101	75 62		 jne	 SHORT $LN26@sm_clear
  00103	84 c0		 test	 al, al
  00105	78 5e		 js	 SHORT $LN26@sm_clear
  00107	a8 02		 test	 al, 2
  00109	75 62		 jne	 SHORT $LN35@sm_clear
  0010b	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0010f	75 5c		 jne	 SHORT $LN35@sm_clear
  00111	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00118	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0011f	4c 8b cb	 mov	 r9, rbx
  00122	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00128	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00130	e8 00 00 00 00	 call	 _PyParallel_Guard
  00135	48 8b cb	 mov	 rcx, rbx
  00138	85 c0		 test	 eax, eax
  0013a	74 12		 je	 SHORT $LN31@sm_clear
  0013c	e8 00 00 00 00	 call	 _Px_Dealloc

; 927  :     return 0;

  00141	33 c0		 xor	 eax, eax

; 928  : }

  00143	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00148	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0014c	5f		 pop	 rdi
  0014d	c3		 ret	 0

; 926  :     Py_CLEAR(sm->sm_dict);

$LN31@sm_clear:
  0014e	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00152	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 927  :     return 0;

  00158	33 c0		 xor	 eax, eax

; 928  : }

  0015a	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0015f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00163	5f		 pop	 rdi
  00164	c3		 ret	 0

; 926  :     Py_CLEAR(sm->sm_dict);

$LN26@sm_clear:
  00165	48 8b cb	 mov	 rcx, rbx
  00168	e8 00 00 00 00	 call	 Px_DecRef
$LN35@sm_clear:

; 927  :     return 0;

  0016d	33 c0		 xor	 eax, eax

; 928  : }

  0016f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00174	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00178	5f		 pop	 rdi
  00179	c3		 ret	 0
sm_clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@LBGCKIFJ@uninitialized?5staticmethod?5objec@ ; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$sm_descr_get DD imagerel sm_descr_get
	DD	imagerel sm_descr_get+128
	DD	imagerel $unwind$sm_descr_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sm_descr_get DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0CC@LBGCKIFJ@uninitialized?5staticmethod?5objec@
CONST	SEGMENT
??_C@_0CC@LBGCKIFJ@uninitialized?5staticmethod?5objec@ DB 'uninitialized '
	DB	'staticmethod object', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\funcobject.c
CONST	ENDS
;	COMDAT sm_descr_get
_TEXT	SEGMENT
self$ = 64
obj$ = 72
type$ = 80
sm_descr_get PROC					; COMDAT

; 932  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 933  :     staticmethod *sm = (staticmethod *)self;
; 934  : 
; 935  :     if (sm->sm_callable == NULL) {

  0000a	48 8b 59 60	 mov	 rbx, QWORD PTR [rcx+96]
  0000e	48 8b f9	 mov	 rdi, rcx
  00011	48 85 db	 test	 rbx, rbx
  00014	75 20		 jne	 SHORT $LN1@sm_descr_g

; 936  :         PyErr_SetString(PyExc_RuntimeError,
; 937  :                         "uninitialized staticmethod object");

  00016	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@LBGCKIFJ@uninitialized?5staticmethod?5objec@
  00024	e8 00 00 00 00	 call	 PyErr_SetString

; 938  :         return NULL;

  00029	33 c0		 xor	 eax, eax

; 942  : }

  0002b	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00030	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00034	5f		 pop	 rdi
  00035	c3		 ret	 0
$LN1@sm_descr_g:

; 939  :     }
; 940  :     Py_INCREF(sm->sm_callable);

  00036	e8 00 00 00 00	 call	 _Py_PXCTX
  0003b	85 c0		 test	 eax, eax
  0003d	75 32		 jne	 SHORT $LN5@sm_descr_g
  0003f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0004d	4c 8b cb	 mov	 r9, rbx
  00050	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00056	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0005e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00063	85 c0		 test	 eax, eax
  00065	75 06		 jne	 SHORT $LN4@sm_descr_g
  00067	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0006b	74 04		 je	 SHORT $LN5@sm_descr_g
$LN4@sm_descr_g:
  0006d	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN5@sm_descr_g:

; 941  :     return sm->sm_callable;

  00071	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]

; 942  : }

  00075	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0007a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0007e	5f		 pop	 rdi
  0007f	c3		 ret	 0
sm_descr_get ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$sm_init DD imagerel sm_init
	DD	imagerel sm_init+176
	DD	imagerel $unwind$sm_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sm_init DD 040a01H
	DD	09340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\funcobject.c
xdata	ENDS
;	COMDAT sm_init
_TEXT	SEGMENT
callable$ = 64
self$ = 64
args$ = 72
kwds$ = 80
sm_init	PROC						; COMDAT

; 946  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx
  0000d	48 8b c2	 mov	 rax, rdx

; 947  :     staticmethod *sm = (staticmethod *)self;
; 948  :     PyObject *callable;
; 949  : 
; 950  :     if (!PyArg_UnpackTuple(args, "staticmethod", 1, 1, &callable))

  00010	48 8d 4c 24 40	 lea	 rcx, QWORD PTR callable$[rsp]
  00015	41 b9 01 00 00
	00		 mov	 r9d, 1
  0001b	49 8b d8	 mov	 rbx, r8
  0001e	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00023	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@BCCHOHJA@staticmethod?$AA@
  0002a	48 8b c8	 mov	 rcx, rax
  0002d	45 8b c1	 mov	 r8d, r9d
  00030	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00035	85 c0		 test	 eax, eax
  00037	75 0e		 jne	 SHORT $LN2@sm_init
$LN9@sm_init:

; 951  :         return -1;

  00039	83 c8 ff	 or	 eax, -1

; 956  :     return 0;
; 957  : }

  0003c	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00041	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00045	5f		 pop	 rdi
  00046	c3		 ret	 0
$LN2@sm_init:

; 952  :     if (!_PyArg_NoKeywords("staticmethod", kwds))

  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BCCHOHJA@staticmethod?$AA@
  0004e	48 8b d3	 mov	 rdx, rbx
  00051	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  00056	85 c0		 test	 eax, eax

; 953  :         return -1;

  00058	74 df		 je	 SHORT $LN9@sm_init

; 954  :     Py_INCREF(callable);

  0005a	48 8b 5c 24 40	 mov	 rbx, QWORD PTR callable$[rsp]
  0005f	e8 00 00 00 00	 call	 _Py_PXCTX
  00064	85 c0		 test	 eax, eax
  00066	75 32		 jne	 SHORT $LN6@sm_init
  00068	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00076	4c 8b cb	 mov	 r9, rbx
  00079	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0007f	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00087	e8 00 00 00 00	 call	 _PyParallel_Guard
  0008c	85 c0		 test	 eax, eax
  0008e	75 06		 jne	 SHORT $LN5@sm_init
  00090	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00094	74 04		 je	 SHORT $LN6@sm_init
$LN5@sm_init:
  00096	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN6@sm_init:

; 955  :     sm->sm_callable = callable;

  0009a	48 8b 44 24 40	 mov	 rax, QWORD PTR callable$[rsp]

; 956  :     return 0;
; 957  : }

  0009f	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000a4	48 89 47 60	 mov	 QWORD PTR [rdi+96], rax
  000a8	33 c0		 xor	 eax, eax
  000aa	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ae	5f		 pop	 rdi
  000af	c3		 ret	 0
sm_init	ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$sm_get___isabstractmethod__ DD imagerel sm_get___isabstractmethod__
	DD	imagerel sm_get___isabstractmethod__+191
	DD	imagerel $unwind$sm_get___isabstractmethod__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sm_get___isabstractmethod__ DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\funcobject.c
xdata	ENDS
;	COMDAT sm_get___isabstractmethod__
_TEXT	SEGMENT
sm$ = 64
closure$ = 72
sm_get___isabstractmethod__ PROC			; COMDAT

; 966  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 967  :     int res = _PyObject_IsAbstract(sm->sm_callable);

  00004	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00008	e8 00 00 00 00	 call	 _PyObject_IsAbstract

; 968  :     if (res == -1) {

  0000d	83 f8 ff	 cmp	 eax, -1
  00010	75 07		 jne	 SHORT $LN3@sm_get___i

; 969  :         return NULL;

  00012	33 c0		 xor	 eax, eax

; 975  : }

  00014	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00018	c3		 ret	 0
$LN3@sm_get___i:

; 970  :     }
; 971  :     else if (res) {

  00019	85 c0		 test	 eax, eax
  0001b	74 51		 je	 SHORT $LN1@sm_get___i

; 972  :         Py_RETURN_TRUE;

  0001d	e8 00 00 00 00	 call	 _Py_PXCTX
  00022	85 c0		 test	 eax, eax
  00024	75 3c		 jne	 SHORT $LN7@sm_get___i
  00026	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_TrueStruct
  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0003b	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00041	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00049	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004e	85 c0		 test	 eax, eax
  00050	75 09		 jne	 SHORT $LN6@sm_get___i
  00052	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_TrueStruct+32, 32 ; 00000020H
  00059	74 07		 je	 SHORT $LN7@sm_get___i
$LN6@sm_get___i:
  0005b	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_TrueStruct+80
$LN7@sm_get___i:
  00062	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct

; 975  : }

  00069	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006d	c3		 ret	 0
$LN1@sm_get___i:

; 973  :     }
; 974  :     Py_RETURN_FALSE;

  0006e	e8 00 00 00 00	 call	 _Py_PXCTX
  00073	85 c0		 test	 eax, eax
  00075	75 3c		 jne	 SHORT $LN11@sm_get___i
  00077	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_FalseStruct
  0007e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00085	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0008c	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00092	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0009a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009f	85 c0		 test	 eax, eax
  000a1	75 09		 jne	 SHORT $LN10@sm_get___i
  000a3	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  000aa	74 07		 je	 SHORT $LN11@sm_get___i
$LN10@sm_get___i:
  000ac	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN11@sm_get___i:
  000b3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 975  : }

  000ba	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000be	c3		 ret	 0
sm_get___isabstractmethod__ ENDP
_TEXT	ENDS
PUBLIC	PyStaticMethod_New
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyStaticMethod_New DD imagerel $LN9
	DD	imagerel $LN9+112
	DD	imagerel $unwind$PyStaticMethod_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyStaticMethod_New DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\funcobject.c
xdata	ENDS
;	COMDAT PyStaticMethod_New
_TEXT	SEGMENT
callable$ = 64
PyStaticMethod_New PROC					; COMDAT

; 1048 : {

$LN9:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b d9	 mov	 rbx, rcx

; 1049 :     staticmethod *sm = (staticmethod *)
; 1050 :         PyType_GenericAlloc(&PyStaticMethod_Type, 0);

  0000d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyStaticMethod_Type
  00014	33 d2		 xor	 edx, edx
  00016	e8 00 00 00 00	 call	 PyType_GenericAlloc
  0001b	48 8b f8	 mov	 rdi, rax

; 1051 :     if (sm != NULL) {

  0001e	48 85 c0	 test	 rax, rax
  00021	74 42		 je	 SHORT $LN1@PyStaticMe

; 1052 :         Py_INCREF(callable);

  00023	e8 00 00 00 00	 call	 _Py_PXCTX
  00028	85 c0		 test	 eax, eax
  0002a	75 32		 jne	 SHORT $LN5@PyStaticMe
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0003a	4c 8b cb	 mov	 r9, rbx
  0003d	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00043	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0004b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00050	85 c0		 test	 eax, eax
  00052	75 06		 jne	 SHORT $LN4@PyStaticMe
  00054	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00058	74 04		 je	 SHORT $LN5@PyStaticMe
$LN4@PyStaticMe:
  0005a	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN5@PyStaticMe:

; 1053 :         sm->sm_callable = callable;

  0005e	48 89 5f 60	 mov	 QWORD PTR [rdi+96], rbx

; 1054 :     }
; 1055 :     return (PyObject *)sm;

  00062	48 8b c7	 mov	 rax, rdi
$LN1@PyStaticMe:

; 1056 : }

  00065	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0006a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0006e	5f		 pop	 rdi
  0006f	c3		 ret	 0
PyStaticMethod_New ENDP
_TEXT	ENDS
END
