; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_07HKKFLOCI@marshal?$AA@			; `string'
PUBLIC	??_C@_05OCDPKIEO@loads?$AA@			; `string'
PUBLIC	??_C@_05HFMFBBBE@dumps?$AA@			; `string'
PUBLIC	??_C@_04EONOHKEP@load?$AA@			; `string'
PUBLIC	??_C@_04GGLOKIEE@dump?$AA@			; `string'
PUBLIC	??_C@_05NGFEDHGN@write?$AA@			; `string'
PUBLIC	??_C@_04POLDLDMI@read?$AA@			; `string'
;	COMDAT ??_C@_07HKKFLOCI@marshal?$AA@
CONST	SEGMENT
??_C@_07HKKFLOCI@marshal?$AA@ DB 'marshal', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05OCDPKIEO@loads?$AA@
CONST	SEGMENT
??_C@_05OCDPKIEO@loads?$AA@ DB 'loads', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HFMFBBBE@dumps?$AA@
CONST	SEGMENT
??_C@_05HFMFBBBE@dumps?$AA@ DB 'dumps', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EONOHKEP@load?$AA@
CONST	SEGMENT
??_C@_04EONOHKEP@load?$AA@ DB 'load', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GGLOKIEE@dump?$AA@
CONST	SEGMENT
??_C@_04GGLOKIEE@dump?$AA@ DB 'dump', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
dump_doc DB	'dump(value, file[, version])', 0aH, 0aH, 'Write the valu'
	DB	'e on the open file. The value must be a supported type.', 0aH
	DB	'The file must be an open file object such as sys.stdout or re'
	DB	'turned by', 0aH, 'open() or os.popen(). It must be opened in '
	DB	'binary mode (''wb'' or ''w+b'').', 0aH, 0aH, 'If the value ha'
	DB	's (or contains an object that has) an unsupported type, a', 0aH
	DB	'ValueError exception is raised ', 0e2H, 080H, 094H, ' but gar'
	DB	'bage data will also be written', 0aH, 'to the file. The objec'
	DB	't will not be properly read back by load()', 0aH, 0aH, 'The v'
	DB	'ersion argument indicates the data format that dump should us'
	DB	'e.', 00H
	ORG $+3
load_doc DB	'load(file)', 0aH, 0aH, 'Read one value from the open fil'
	DB	'e and return it. If no valid value is', 0aH, 'read (e.g. beca'
	DB	'use the data has a different Python version', 0e2H, 080H, 099H
	DB	's', 0aH, 'incompatible marshal format), raise EOFError, Value'
	DB	'Error or TypeError.', 0aH, 'The file must be an open file obj'
	DB	'ect opened in binary mode (''rb'' or', 0aH, '''r+b'').', 0aH, 0aH
	DB	'Note: If an object containing an unsupported type was marshal'
	DB	'led with', 0aH, 'dump(), load() will substitute None for the '
	DB	'unmarshallable type.', 00H
	ORG $+4
dumps_doc DB	'dumps(value[, version])', 0aH, 0aH, 'Return the string t'
	DB	'hat would be written to a file by dump(value, file).', 0aH, 'T'
	DB	'he value must be a supported type. Raise a ValueError excepti'
	DB	'on if', 0aH, 'value has (or contains an object that has) an u'
	DB	'nsupported type.', 0aH, 0aH, 'The version argument indicates '
	DB	'the data format that dumps should use.', 00H
	ORG $+4
loads_doc DB	'loads(bytes)', 0aH, 0aH, 'Convert the bytes object to a '
	DB	'value. If no valid value is found, raise', 0aH, 'EOFError, Va'
	DB	'lueError or TypeError. Extra characters in the input are', 0aH
	DB	'ignored.', 00H
	ORG $+13
marshal_methods DQ FLAT:??_C@_04GGLOKIEE@dump?$AA@
	DQ	FLAT:marshal_dump
	DD	01H
	ORG $+4
	DQ	FLAT:dump_doc
	DQ	FLAT:??_C@_04EONOHKEP@load?$AA@
	DQ	FLAT:marshal_load
	DD	08H
	ORG $+4
	DQ	FLAT:load_doc
	DQ	FLAT:??_C@_05HFMFBBBE@dumps?$AA@
	DQ	FLAT:marshal_dumps
	DD	01H
	ORG $+4
	DQ	FLAT:dumps_doc
	DQ	FLAT:??_C@_05OCDPKIEO@loads?$AA@
	DQ	FLAT:marshal_loads
	DD	01H
	ORG $+4
	DQ	FLAT:loads_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
module_doc DB	'This module contains functions that can read and write P'
	DB	'ython values in', 0aH, 'a binary format. The format is specif'
	DB	'ic to Python, but independent of', 0aH, 'machine architecture'
	DB	' issues.', 0aH, 0aH, 'Not all Python object types are support'
	DB	'ed; in general, only objects', 0aH, 'whose value is independe'
	DB	'nt from a particular invocation of Python can be', 0aH, 'writ'
	DB	'ten and read by this module. The following types are supporte'
	DB	'd:', 0aH, 'None, integers, floating point numbers, strings, b'
	DB	'ytes, bytearrays,', 0aH, 'tuples, lists, sets, dictionaries, '
	DB	'and code objects, where it', 0aH, 'should be understood that '
	DB	'tuples, lists and dictionaries are only', 0aH, 'supported as '
	DB	'long as the values contained therein are themselves', 0aH, 's'
	DB	'upported; and recursive lists and dictionaries should not be '
	DB	'written', 0aH, '(they will cause infinite loops).', 0aH, 0aH, 'V'
	DB	'ariables:', 0aH, 0aH, 'version -- indicates the format that t'
	DB	'he module uses. Version 0 is the', 0aH, '    historical forma'
	DB	't, version 1 shares interned strings and version 2', 0aH, '  '
	DB	'  uses a binary format for floating point numbers.', 0aH, 0aH
	DB	'Functions:', 0aH, 0aH, 'dump() -- write value to a file', 0aH
	DB	'load() -- read value from a file', 0aH, 'dumps() -- write val'
	DB	'ue to a string', 0aH, 'loads() -- read value from a string', 00H
	ORG $+1
marshalmodule DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_07HKKFLOCI@marshal?$AA@
	DQ	FLAT:module_doc
	DQ	0000000000000000H
	DQ	FLAT:marshal_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
;	COMDAT ??_C@_05NGFEDHGN@write?$AA@
CONST	SEGMENT
??_C@_05NGFEDHGN@write?$AA@ DB 'write', 00H		; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId_read@?1??marshal_load@@9@9 DQ 0000000000000000H	; `marshal_load'::`2'::PyId_read
	DQ	FLAT:??_C@_04POLDLDMI@read?$AA@
	DQ	0000000000000000H
?PyId_write@?1??marshal_dump@@9@9 DQ 0000000000000000H	; `marshal_dump'::`2'::PyId_write
	DQ	FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	0000000000000000H
?PyId_read@?4??r_string@@9@9 DQ 0000000000000000H	; `r_string'::`5'::PyId_read
	DQ	FLAT:??_C@_04POLDLDMI@read?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_04POLDLDMI@read?$AA@
CONST	SEGMENT
??_C@_04POLDLDMI@read?$AA@ DB 'read', 00H		; `string'
CONST	ENDS
EXTRN	__imp__fstat64i32:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\sys\stat.inl
;	COMDAT fstat
_TEXT	SEGMENT
_Desc$ = 8
_Stat$ = 16
fstat	PROC						; COMDAT

; 53   :     _STATIC_ASSERT( sizeof(struct stat) == sizeof(struct _stat64i32) );
; 54   :     return _fstat64i32(_Desc,(struct _stat64i32 *)_Stat);
; 55   : }

  00000	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp__fstat64i32
fstat	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
EXTRN	_PyBytes_Resize:PROC
EXTRN	PyBytes_Size:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\marshal.c
pdata	SEGMENT
$pdata$w_more DD imagerel w_more
	DD	imagerel w_more+31
	DD	imagerel $unwind$w_more
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$w_more DD imagerel w_more+31
	DD	imagerel w_more+143
	DD	imagerel $chain$1$w_more
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$w_more DD imagerel w_more+143
	DD	imagerel w_more+160
	DD	imagerel $chain$2$w_more
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$w_more DD 021H
	DD	imagerel w_more
	DD	imagerel w_more+31
	DD	imagerel $unwind$w_more
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$w_more DD 040a21H
	DD	07740aH
	DD	066405H
	DD	imagerel w_more
	DD	imagerel w_more+31
	DD	imagerel $unwind$w_more
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$w_more DD 061001H
	DD	095410H
	DD	083410H
	DD	0c00c3210H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT w_more
_TEXT	SEGMENT
c$ = 48
p$ = 56
w_more	PROC						; COMDAT

; 77   : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  0000a	41 54		 push	 r12
  0000c	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00010	44 8b e1	 mov	 r12d, ecx

; 78   :     Py_ssize_t size, newsize;
; 79   :     if (p->str == NULL)

  00013	48 8b 4a 18	 mov	 rcx, QWORD PTR [rdx+24]
  00017	48 8b da	 mov	 rbx, rdx
  0001a	48 85 c9	 test	 rcx, rcx
  0001d	74 70		 je	 SHORT $LN1@w_more

; 80   :         return; /* An error already occurred */
; 81   :     size = PyBytes_Size(p->str);

  0001f	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  00024	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  00029	e8 00 00 00 00	 call	 PyBytes_Size

; 82   :     newsize = size + size + 1024;

  0002e	48 8d bc 00 00
	04 00 00	 lea	 rdi, QWORD PTR [rax+rax+1024]
  00036	48 8b f0	 mov	 rsi, rax

; 83   :     if (newsize > 32*1024*1024) {

  00039	48 81 ff 00 00
	00 02		 cmp	 rdi, 33554432		; 02000000H
  00040	7e 0a		 jle	 SHORT $LN3@w_more

; 84   :         newsize = size + (size >> 3);           /* 12.5% overallocation */

  00042	48 8b f8	 mov	 rdi, rax
  00045	48 c1 ff 03	 sar	 rdi, 3
  00049	48 03 f8	 add	 rdi, rax
$LN3@w_more:

; 85   :     }
; 86   :     if (_PyBytes_Resize(&p->str, newsize) != 0) {

  0004c	48 8d 4b 18	 lea	 rcx, QWORD PTR [rbx+24]
  00050	48 8b d7	 mov	 rdx, rdi
  00053	e8 00 00 00 00	 call	 _PyBytes_Resize
  00058	85 c0		 test	 eax, eax
  0005a	74 0c		 je	 SHORT $LN2@w_more

; 87   :         p->ptr = p->end = NULL;

  0005c	33 c0		 xor	 eax, eax
  0005e	48 89 43 30	 mov	 QWORD PTR [rbx+48], rax
  00062	48 89 43 28	 mov	 QWORD PTR [rbx+40], rax

; 88   :     }
; 89   :     else {

  00066	eb 1d		 jmp	 SHORT $LN8@w_more
$LN2@w_more:

; 90   :         p->ptr = PyBytes_AS_STRING((PyBytesObject *)p->str) + size;

  00068	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  0006c	48 8d 4c 30 78	 lea	 rcx, QWORD PTR [rax+rsi+120]

; 91   :         p->end =
; 92   :             PyBytes_AS_STRING((PyBytesObject *)p->str) + newsize;

  00071	48 8d 44 38 78	 lea	 rax, QWORD PTR [rax+rdi+120]
  00076	48 89 4b 28	 mov	 QWORD PTR [rbx+40], rcx
  0007a	48 89 43 30	 mov	 QWORD PTR [rbx+48], rax

; 93   :         *p->ptr++ = Py_SAFE_DOWNCAST(c, int, char);

  0007e	44 88 21	 mov	 BYTE PTR [rcx], r12b
  00081	48 ff 43 28	 inc	 QWORD PTR [rbx+40]
$LN8@w_more:
  00085	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  0008a	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]
$LN1@w_more:

; 94   :     }
; 95   : }

  0008f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00094	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00099	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009d	41 5c		 pop	 r12
  0009f	c3		 ret	 0
w_more	ENDP
_TEXT	ENDS
EXTRN	__imp_putc:PROC
EXTRN	__imp_fwrite:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$w_string DD imagerel w_string
	DD	imagerel w_string+142
	DD	imagerel $unwind$w_string
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$w_string DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT w_string
_TEXT	SEGMENT
s$ = 48
n$ = 56
p$ = 64
w_string PROC						; COMDAT

; 99   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 100  :     if (p->fp != NULL) {

  0000f	4d 8b 08	 mov	 r9, QWORD PTR [r8]
  00012	49 8b d8	 mov	 rbx, r8
  00015	48 8b f2	 mov	 rsi, rdx
  00018	48 8b f9	 mov	 rdi, rcx
  0001b	4d 85 c9	 test	 r9, r9
  0001e	74 1e		 je	 SHORT $LN11@w_string

; 101  :         fwrite(s, 1, n, p->fp);

  00020	4c 8b c2	 mov	 r8, rdx
  00023	ba 01 00 00 00	 mov	 edx, 1

; 107  :         }
; 108  :     }
; 109  : }

  00028	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00032	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00036	5f		 pop	 rdi
  00037	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_fwrite
$LN11@w_string:

; 102  :     }
; 103  :     else {
; 104  :         while (--n >= 0) {

  0003e	48 ff ce	 dec	 rsi
  00041	78 3b		 js	 SHORT $LN5@w_string
$LL6@w_string:

; 105  :             w_byte(*s, p);

  00043	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  00046	48 85 d2	 test	 rdx, rdx
  00049	74 0b		 je	 SHORT $LN4@w_string
  0004b	0f be 0f	 movsx	 ecx, BYTE PTR [rdi]
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  00054	eb 20		 jmp	 SHORT $LN1@w_string
$LN4@w_string:
  00056	48 8b 4b 28	 mov	 rcx, QWORD PTR [rbx+40]
  0005a	48 3b 4b 30	 cmp	 rcx, QWORD PTR [rbx+48]
  0005e	74 0b		 je	 SHORT $LN2@w_string
  00060	0f b6 07	 movzx	 eax, BYTE PTR [rdi]
  00063	88 01		 mov	 BYTE PTR [rcx], al
  00065	48 ff 43 28	 inc	 QWORD PTR [rbx+40]
  00069	eb 0b		 jmp	 SHORT $LN1@w_string
$LN2@w_string:
  0006b	0f be 0f	 movsx	 ecx, BYTE PTR [rdi]
  0006e	48 8b d3	 mov	 rdx, rbx
  00071	e8 00 00 00 00	 call	 w_more
$LN1@w_string:

; 106  :             s++;

  00076	48 ff c7	 inc	 rdi
  00079	48 ff ce	 dec	 rsi
  0007c	79 c5		 jns	 SHORT $LL6@w_string
$LN5@w_string:

; 107  :         }
; 108  :     }
; 109  : }

  0007e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00083	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00088	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008c	5f		 pop	 rdi
  0008d	c3		 ret	 0
w_string ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$w_short DD imagerel w_short
	DD	imagerel w_short+145
	DD	imagerel $unwind$w_short
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$w_short DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT w_short
_TEXT	SEGMENT
x$ = 48
p$ = 56
w_short	PROC						; COMDAT

; 113  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx

; 114  :     w_byte((char)( x      & 0xff), p);

  0000d	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00010	8b f9		 mov	 edi, ecx
  00012	48 85 d2	 test	 rdx, rdx
  00015	74 0b		 je	 SHORT $LN8@w_short
  00017	0f be c9	 movsx	 ecx, cl
  0001a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  00020	eb 1d		 jmp	 SHORT $LN5@w_short
$LN8@w_short:
  00022	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  00026	48 3b 43 30	 cmp	 rax, QWORD PTR [rbx+48]
  0002a	74 08		 je	 SHORT $LN6@w_short
  0002c	88 08		 mov	 BYTE PTR [rax], cl
  0002e	48 ff 43 28	 inc	 QWORD PTR [rbx+40]
  00032	eb 0b		 jmp	 SHORT $LN5@w_short
$LN6@w_short:
  00034	0f be c9	 movsx	 ecx, cl
  00037	48 8b d3	 mov	 rdx, rbx
  0003a	e8 00 00 00 00	 call	 w_more
$LN5@w_short:

; 115  :     w_byte((char)((x>> 8) & 0xff), p);

  0003f	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  00042	c1 ff 08	 sar	 edi, 8
  00045	48 85 d2	 test	 rdx, rdx
  00048	74 15		 je	 SHORT $LN4@w_short
  0004a	40 0f be cf	 movsx	 ecx, dil

; 116  : }

  0004e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5f		 pop	 rdi
  00058	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_putc
$LN4@w_short:

; 115  :     w_byte((char)((x>> 8) & 0xff), p);

  0005f	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  00063	48 3b 43 30	 cmp	 rax, QWORD PTR [rbx+48]
  00067	74 12		 je	 SHORT $LN2@w_short
  00069	40 88 38	 mov	 BYTE PTR [rax], dil
  0006c	48 ff 43 28	 inc	 QWORD PTR [rbx+40]

; 116  : }

  00070	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00075	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00079	5f		 pop	 rdi
  0007a	c3		 ret	 0
$LN2@w_short:

; 115  :     w_byte((char)((x>> 8) & 0xff), p);

  0007b	40 0f be cf	 movsx	 ecx, dil
  0007f	48 8b d3	 mov	 rdx, rbx

; 116  : }

  00082	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00087	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008b	5f		 pop	 rdi
  0008c	e9 00 00 00 00	 jmp	 w_more
w_short	ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$w_long DD imagerel w_long
	DD	imagerel w_long+251
	DD	imagerel $unwind$w_long
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$w_long DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT w_long
_TEXT	SEGMENT
x$ = 48
p$ = 56
w_long	PROC						; COMDAT

; 120  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx

; 121  :     w_byte((char)( x      & 0xff), p);

  0000d	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00010	8b f9		 mov	 edi, ecx
  00012	48 85 d2	 test	 rdx, rdx
  00015	74 0b		 je	 SHORT $LN16@w_long
  00017	0f be c9	 movsx	 ecx, cl
  0001a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  00020	eb 1d		 jmp	 SHORT $LN13@w_long
$LN16@w_long:
  00022	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  00026	48 3b 43 30	 cmp	 rax, QWORD PTR [rbx+48]
  0002a	74 08		 je	 SHORT $LN14@w_long
  0002c	88 08		 mov	 BYTE PTR [rax], cl
  0002e	48 ff 43 28	 inc	 QWORD PTR [rbx+40]
  00032	eb 0b		 jmp	 SHORT $LN13@w_long
$LN14@w_long:
  00034	0f be c9	 movsx	 ecx, cl
  00037	48 8b d3	 mov	 rdx, rbx
  0003a	e8 00 00 00 00	 call	 w_more
$LN13@w_long:

; 122  :     w_byte((char)((x>> 8) & 0xff), p);

  0003f	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  00042	8b c7		 mov	 eax, edi
  00044	c1 f8 08	 sar	 eax, 8
  00047	48 85 d2	 test	 rdx, rdx
  0004a	74 0b		 je	 SHORT $LN12@w_long
  0004c	0f be c8	 movsx	 ecx, al
  0004f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  00055	eb 1d		 jmp	 SHORT $LN9@w_long
$LN12@w_long:
  00057	48 8b 4b 28	 mov	 rcx, QWORD PTR [rbx+40]
  0005b	48 3b 4b 30	 cmp	 rcx, QWORD PTR [rbx+48]
  0005f	74 08		 je	 SHORT $LN10@w_long
  00061	88 01		 mov	 BYTE PTR [rcx], al
  00063	48 ff 43 28	 inc	 QWORD PTR [rbx+40]
  00067	eb 0b		 jmp	 SHORT $LN9@w_long
$LN10@w_long:
  00069	0f be c8	 movsx	 ecx, al
  0006c	48 8b d3	 mov	 rdx, rbx
  0006f	e8 00 00 00 00	 call	 w_more
$LN9@w_long:

; 123  :     w_byte((char)((x>>16) & 0xff), p);

  00074	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  00077	8b c7		 mov	 eax, edi
  00079	c1 f8 10	 sar	 eax, 16
  0007c	48 85 d2	 test	 rdx, rdx
  0007f	74 0b		 je	 SHORT $LN8@w_long
  00081	0f be c8	 movsx	 ecx, al
  00084	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  0008a	eb 1d		 jmp	 SHORT $LN5@w_long
$LN8@w_long:
  0008c	48 8b 4b 28	 mov	 rcx, QWORD PTR [rbx+40]
  00090	48 3b 4b 30	 cmp	 rcx, QWORD PTR [rbx+48]
  00094	74 08		 je	 SHORT $LN6@w_long
  00096	88 01		 mov	 BYTE PTR [rcx], al
  00098	48 ff 43 28	 inc	 QWORD PTR [rbx+40]
  0009c	eb 0b		 jmp	 SHORT $LN5@w_long
$LN6@w_long:
  0009e	0f be c8	 movsx	 ecx, al
  000a1	48 8b d3	 mov	 rdx, rbx
  000a4	e8 00 00 00 00	 call	 w_more
$LN5@w_long:

; 124  :     w_byte((char)((x>>24) & 0xff), p);

  000a9	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  000ac	c1 ff 18	 sar	 edi, 24
  000af	48 85 d2	 test	 rdx, rdx
  000b2	74 15		 je	 SHORT $LN4@w_long
  000b4	40 0f be cf	 movsx	 ecx, dil

; 125  : }

  000b8	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000bd	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c1	5f		 pop	 rdi
  000c2	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_putc
$LN4@w_long:

; 124  :     w_byte((char)((x>>24) & 0xff), p);

  000c9	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  000cd	48 3b 43 30	 cmp	 rax, QWORD PTR [rbx+48]
  000d1	74 12		 je	 SHORT $LN2@w_long
  000d3	40 88 38	 mov	 BYTE PTR [rax], dil
  000d6	48 ff 43 28	 inc	 QWORD PTR [rbx+40]

; 125  : }

  000da	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000df	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000e3	5f		 pop	 rdi
  000e4	c3		 ret	 0
$LN2@w_long:

; 124  :     w_byte((char)((x>>24) & 0xff), p);

  000e5	40 0f be cf	 movsx	 ecx, dil
  000e9	48 8b d3	 mov	 rdx, rbx

; 125  : }

  000ec	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000f1	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000f5	5f		 pop	 rdi
  000f6	e9 00 00 00 00	 jmp	 w_more
w_long	ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$w_pstring DD imagerel w_pstring
	DD	imagerel w_pstring+100
	DD	imagerel $unwind$w_pstring
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$w_pstring DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT w_pstring
_TEXT	SEGMENT
s$ = 48
n$ = 56
p$ = 64
w_pstring PROC						; COMDAT

; 144  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b d8	 mov	 rbx, r8
  00012	48 8b fa	 mov	 rdi, rdx
  00015	48 8b f1	 mov	 rsi, rcx

; 145  :         W_SIZE(n, p);

  00018	48 81 fa ff ff
	ff 7f		 cmp	 rdx, 2147483647		; 7fffffffH
  0001f	7e 1c		 jle	 SHORT $LN1@w_pstring
  00021	41 ff 48 0c	 dec	 DWORD PTR [r8+12]
  00025	41 c7 40 08 01
	00 00 00	 mov	 DWORD PTR [r8+8], 1

; 147  : }

  0002d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00032	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00037	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003b	5f		 pop	 rdi
  0003c	c3		 ret	 0
$LN1@w_pstring:

; 145  :         W_SIZE(n, p);

  0003d	48 8b d3	 mov	 rdx, rbx
  00040	8b cf		 mov	 ecx, edi
  00042	e8 00 00 00 00	 call	 w_long

; 146  :         w_string(s, n, p);

  00047	4c 8b c3	 mov	 r8, rbx
  0004a	48 8b d7	 mov	 rdx, rdi
  0004d	48 8b ce	 mov	 rcx, rsi

; 147  : }

  00050	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00055	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0005a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005e	5f		 pop	 rdi
  0005f	e9 00 00 00 00	 jmp	 w_string
w_pstring ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$w_PyLong DD imagerel w_PyLong
	DD	imagerel w_PyLong+93
	DD	imagerel $unwind$w_PyLong
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$w_PyLong DD imagerel w_PyLong+93
	DD	imagerel w_PyLong+169
	DD	imagerel $chain$0$w_PyLong
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$w_PyLong DD imagerel w_PyLong+169
	DD	imagerel w_PyLong+174
	DD	imagerel $chain$3$w_PyLong
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$w_PyLong DD imagerel w_PyLong+174
	DD	imagerel w_PyLong+206
	DD	imagerel $chain$4$w_PyLong
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$w_PyLong DD imagerel w_PyLong+206
	DD	imagerel w_PyLong+283
	DD	imagerel $chain$6$w_PyLong
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$w_PyLong DD imagerel w_PyLong+283
	DD	imagerel w_PyLong+304
	DD	imagerel $chain$7$w_PyLong
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$w_PyLong DD imagerel w_PyLong+304
	DD	imagerel w_PyLong+345
	DD	imagerel $chain$8$w_PyLong
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$w_PyLong DD 021H
	DD	imagerel w_PyLong+169
	DD	imagerel w_PyLong+174
	DD	imagerel $chain$3$w_PyLong
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$w_PyLong DD 021H
	DD	imagerel w_PyLong+174
	DD	imagerel w_PyLong+206
	DD	imagerel $chain$4$w_PyLong
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$w_PyLong DD 040a21H
	DD	09640aH
	DD	085405H
	DD	imagerel w_PyLong+174
	DD	imagerel w_PyLong+206
	DD	imagerel $chain$4$w_PyLong
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$w_PyLong DD 020521H
	DD	0bc405H
	DD	imagerel w_PyLong+169
	DD	imagerel w_PyLong+174
	DD	imagerel $chain$3$w_PyLong
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$w_PyLong DD 040521H
	DD	0a7405H
	DD	04d400H
	DD	imagerel w_PyLong
	DD	imagerel w_PyLong+93
	DD	imagerel $unwind$w_PyLong
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$w_PyLong DD 020521H
	DD	04d405H
	DD	imagerel w_PyLong
	DD	imagerel w_PyLong+93
	DD	imagerel $unwind$w_PyLong
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$w_PyLong DD 030801H
	DD	0e0044208H
	DD	03002H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT w_PyLong
_TEXT	SEGMENT
ob$ = 64
p$ = 72
w_PyLong PROC						; COMDAT

; 163  : {

  00000	40 53		 push	 rbx
  00002	41 56		 push	 r14
  00004	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00008	48 8b da	 mov	 rbx, rdx

; 164  :     Py_ssize_t i, j, n, l;
; 165  :     digit d;
; 166  : 
; 167  :     w_byte(TYPE_LONG, p);

  0000b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0000e	4c 8b f1	 mov	 r14, rcx
  00011	48 85 d2	 test	 rdx, rdx
  00014	74 0d		 je	 SHORT $LN18@w_PyLong
  00016	b9 6c 00 00 00	 mov	 ecx, 108		; 0000006cH
  0001b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  00021	eb 20		 jmp	 SHORT $LN15@w_PyLong
$LN18@w_PyLong:
  00023	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  00027	48 3b 43 30	 cmp	 rax, QWORD PTR [rbx+48]
  0002b	74 09		 je	 SHORT $LN16@w_PyLong
  0002d	c6 00 6c	 mov	 BYTE PTR [rax], 108	; 0000006cH
  00030	48 ff 43 28	 inc	 QWORD PTR [rbx+40]
  00034	eb 0d		 jmp	 SHORT $LN15@w_PyLong
$LN16@w_PyLong:
  00036	48 8b d3	 mov	 rdx, rbx
  00039	b9 6c 00 00 00	 mov	 ecx, 108		; 0000006cH
  0003e	e8 00 00 00 00	 call	 w_more
$LN15@w_PyLong:

; 168  :     if (Py_SIZE(ob) == 0) {

  00043	49 8b 56 60	 mov	 rdx, QWORD PTR [r14+96]
  00047	48 85 d2	 test	 rdx, rdx
  0004a	75 11		 jne	 SHORT $LN14@w_PyLong

; 169  :         w_long((long)0, p);

  0004c	48 8b d3	 mov	 rdx, rbx
  0004f	33 c9		 xor	 ecx, ecx

; 202  : }

  00051	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00055	41 5e		 pop	 r14
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 w_long
$LN14@w_PyLong:
  0005d	4c 89 6c 24 20	 mov	 QWORD PTR [rsp+32], r13

; 170  :         return;
; 171  :     }
; 172  : 
; 173  :     /* set l to number of base PyLong_MARSHAL_BASE digits */
; 174  :     n = ABS(Py_SIZE(ob));

  00062	4c 8b ea	 mov	 r13, rdx
  00065	48 85 d2	 test	 rdx, rdx
  00068	79 03		 jns	 SHORT $LN22@w_PyLong
  0006a	49 f7 dd	 neg	 r13
$LN22@w_PyLong:

; 175  :     l = (n-1) * PyLong_MARSHAL_RATIO;
; 176  :     d = ob->ob_digit[n-1];

  0006d	43 8b 4c ae 6c	 mov	 ecx, DWORD PTR [r14+r13*4+108]
  00072	4b 8d 44 2d fe	 lea	 rax, QWORD PTR [r13+r13-2]
  00077	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL13@w_PyLong:

; 177  :     assert(d != 0); /* a PyLong is always normalized */
; 178  :     do {
; 179  :         d >>= PyLong_MARSHAL_SHIFT;

  00080	c1 e9 0f	 shr	 ecx, 15

; 180  :         l++;

  00083	48 ff c0	 inc	 rax

; 181  :     } while (d != 0);

  00086	85 c9		 test	 ecx, ecx
  00088	75 f6		 jne	 SHORT $LL13@w_PyLong

; 182  :     if (l > SIZE32_MAX) {

  0008a	48 3d ff ff ff
	7f		 cmp	 rax, 2147483647		; 7fffffffH
  00090	7e 17		 jle	 SHORT $LN10@w_PyLong

; 183  :         p->depth--;

  00092	ff 4b 0c	 dec	 DWORD PTR [rbx+12]
  00095	4c 8b 6c 24 20	 mov	 r13, QWORD PTR [rsp+32]

; 184  :         p->error = WFERR_UNMARSHALLABLE;

  0009a	c7 43 08 01 00
	00 00		 mov	 DWORD PTR [rbx+8], 1

; 202  : }

  000a1	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000a5	41 5e		 pop	 r14
  000a7	5b		 pop	 rbx
  000a8	c3		 ret	 0
$LN10@w_PyLong:
  000a9	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  000ae	4c 89 64 24 58	 mov	 QWORD PTR [rsp+88], r12

; 185  :         return;
; 186  :     }
; 187  :     w_long((long)(Py_SIZE(ob) > 0 ? l : -l), p);

  000b3	48 85 d2	 test	 rdx, rdx
  000b6	7f 03		 jg	 SHORT $LN24@w_PyLong
  000b8	48 f7 d8	 neg	 rax
$LN24@w_PyLong:
  000bb	48 8b d3	 mov	 rdx, rbx
  000be	8b c8		 mov	 ecx, eax
  000c0	e8 00 00 00 00	 call	 w_long

; 188  : 
; 189  :     for (i=0; i < n-1; i++) {

  000c5	4d 8d 65 ff	 lea	 r12, QWORD PTR [r13-1]
  000c9	4d 85 e4	 test	 r12, r12
  000cc	7e 4d		 jle	 SHORT $LN7@w_PyLong

; 185  :         return;
; 186  :     }
; 187  :     w_long((long)(Py_SIZE(ob) > 0 ? l : -l), p);

  000ce	48 89 6c 24 40	 mov	 QWORD PTR [rsp+64], rbp
  000d3	48 89 74 24 48	 mov	 QWORD PTR [rsp+72], rsi
  000d8	49 8d 6e 70	 lea	 rbp, QWORD PTR [r14+112]
  000dc	0f 1f 40 00	 npad	 4
$LL9@w_PyLong:

; 190  :         d = ob->ob_digit[i];

  000e0	8b 7d 00	 mov	 edi, DWORD PTR [rbp]
  000e3	be 02 00 00 00	 mov	 esi, 2
  000e8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL6@w_PyLong:

; 191  :         for (j=0; j < PyLong_MARSHAL_RATIO; j++) {
; 192  :             w_short(d & PyLong_MARSHAL_MASK, p);

  000f0	8b cf		 mov	 ecx, edi
  000f2	48 8b d3	 mov	 rdx, rbx
  000f5	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  000fb	e8 00 00 00 00	 call	 w_short

; 193  :             d >>= PyLong_MARSHAL_SHIFT;

  00100	c1 ef 0f	 shr	 edi, 15
  00103	48 ff ce	 dec	 rsi
  00106	75 e8		 jne	 SHORT $LL6@w_PyLong

; 188  : 
; 189  :     for (i=0; i < n-1; i++) {

  00108	48 83 c5 04	 add	 rbp, 4
  0010c	49 ff cc	 dec	 r12
  0010f	75 cf		 jne	 SHORT $LL9@w_PyLong
  00111	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00116	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
$LN7@w_PyLong:

; 194  :         }
; 195  :         assert (d == 0);
; 196  :     }
; 197  :     d = ob->ob_digit[n-1];

  0011b	43 8b 7c ae 6c	 mov	 edi, DWORD PTR [r14+r13*4+108]
  00120	4c 8b 64 24 58	 mov	 r12, QWORD PTR [rsp+88]
  00125	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL3@w_PyLong:

; 198  :     do {
; 199  :         w_short(d & PyLong_MARSHAL_MASK, p);

  00130	8b cf		 mov	 ecx, edi
  00132	48 8b d3	 mov	 rdx, rbx
  00135	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  0013b	e8 00 00 00 00	 call	 w_short

; 200  :         d >>= PyLong_MARSHAL_SHIFT;

  00140	c1 ef 0f	 shr	 edi, 15

; 201  :     } while (d != 0);

  00143	85 ff		 test	 edi, edi
  00145	75 e9		 jne	 SHORT $LL3@w_PyLong
  00147	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]
  0014c	4c 8b 6c 24 20	 mov	 r13, QWORD PTR [rsp+32]

; 202  : }

  00151	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00155	41 5e		 pop	 r14
  00157	5b		 pop	 rbx
  00158	c3		 ret	 0
w_PyLong ENDP
_TEXT	ENDS
PUBLIC	??_C@_04LHHHFLPP@utf8?$AA@			; `string'
PUBLIC	??_C@_0O@BNPCNOJJ@surrogatepass?$AA@		; `string'
EXTRN	PyDict_Next:PROC
EXTRN	PyIter_Next:PROC
EXTRN	PyObject_GetIter:PROC
EXTRN	PyObject_Size:PROC
EXTRN	PyType_IsSubtype:PROC
EXTRN	PyBuffer_Release:PROC
EXTRN	PyObject_GetBuffer:PROC
EXTRN	PyCode_Type:BYTE
EXTRN	PyFrozenSet_Type:BYTE
EXTRN	PySet_Type:BYTE
EXTRN	PyDict_Type:BYTE
EXTRN	PyList_Type:BYTE
EXTRN	PyTuple_Size:PROC
EXTRN	PyTuple_Type:BYTE
EXTRN	PyUnicode_AsEncodedString:PROC
EXTRN	PyUnicode_Type:BYTE
EXTRN	PyBytes_Type:BYTE
EXTRN	PyComplex_ImagAsDouble:PROC
EXTRN	PyComplex_RealAsDouble:PROC
EXTRN	PyComplex_Type:BYTE
EXTRN	PyMem_Free:PROC
EXTRN	PyOS_double_to_string:PROC
EXTRN	_PyFloat_Pack8:PROC
EXTRN	PyFloat_AsDouble:PROC
EXTRN	PyFloat_Type:BYTE
EXTRN	PyErr_Clear:PROC
EXTRN	PyErr_Occurred:PROC
EXTRN	PyLong_AsLong:PROC
EXTRN	PyLong_Type:BYTE
EXTRN	_Py_TrueStruct:BYTE
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_EllipsisObject:BYTE
EXTRN	PyExc_StopIteration:QWORD
EXTRN	_Py_NoneStruct:BYTE
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$w_object DD imagerel w_object
	DD	imagerel w_object+2932
	DD	imagerel $unwind$w_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$w_object DD 060f01H
	DD	014340fH
	DD	07008f20fH
	DD	050066007H
xdata	ENDS
;	COMDAT ??_C@_04LHHHFLPP@utf8?$AA@
CONST	SEGMENT
??_C@_04LHHHFLPP@utf8?$AA@ DB 'utf8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BNPCNOJJ@surrogatepass?$AA@
CONST	SEGMENT
??_C@_0O@BNPCNOJJ@surrogatepass?$AA@ DB 'surrogatepass', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT w_object
_TEXT	SEGMENT
view$20649 = 48
v$ = 160
buf$2$ = 168
value$20591 = 168
buf$20490 = 168
buf$20463 = 168
p$ = 168
key$20590 = 176
pos$20589 = 184
w_object PROC						; COMDAT

; 206  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H

; 207  :     Py_ssize_t i, n;
; 208  : 
; 209  :     p->depth++;

  0000f	ff 42 0c	 inc	 DWORD PTR [rdx+12]

; 210  : 
; 211  :     if (p->depth > MAX_MARSHAL_STACK_DEPTH) {

  00012	81 7a 0c d0 07
	00 00		 cmp	 DWORD PTR [rdx+12], 2000 ; 000007d0H
  00019	48 8b da	 mov	 rbx, rdx
  0001c	48 8b f1	 mov	 rsi, rcx
  0001f	7e 0c		 jle	 SHORT $LN180@w_object

; 212  :         p->error = WFERR_NESTEDTOODEEP;

  00021	c7 42 08 02 00
	00 00		 mov	 DWORD PTR [rdx+8], 2
  00028	e9 31 0b 00 00	 jmp	 $LN5@w_object
$LN180@w_object:

; 213  :     }
; 214  :     else if (v == NULL) {

  0002d	48 85 c9	 test	 rcx, rcx
  00030	75 40		 jne	 SHORT $LN178@w_object

; 215  :         w_byte(TYPE_NULL, p);

  00032	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00035	48 85 d2	 test	 rdx, rdx
  00038	74 10		 je	 SHORT $LN177@w_object
  0003a	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  0003f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  00045	e9 14 0b 00 00	 jmp	 $LN5@w_object
$LN177@w_object:
  0004a	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  0004e	48 3b 43 30	 cmp	 rax, QWORD PTR [rbx+48]
  00052	74 0c		 je	 SHORT $LN175@w_object
  00054	c6 00 30	 mov	 BYTE PTR [rax], 48	; 00000030H
  00057	48 ff 43 28	 inc	 QWORD PTR [rbx+40]
  0005b	e9 fe 0a 00 00	 jmp	 $LN5@w_object
$LN175@w_object:
  00060	48 8b d3	 mov	 rdx, rbx
  00063	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00068	e8 00 00 00 00	 call	 w_more

; 216  :     }
; 217  :     else if (v == Py_None) {

  0006d	e9 ec 0a 00 00	 jmp	 $LN5@w_object
$LN178@w_object:
  00072	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00079	48 3b c8	 cmp	 rcx, rax
  0007c	75 40		 jne	 SHORT $LN172@w_object

; 218  :         w_byte(TYPE_NONE, p);

  0007e	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00081	48 85 d2	 test	 rdx, rdx
  00084	74 10		 je	 SHORT $LN171@w_object
  00086	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH
  0008b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  00091	e9 c8 0a 00 00	 jmp	 $LN5@w_object
$LN171@w_object:
  00096	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  0009a	48 3b 43 30	 cmp	 rax, QWORD PTR [rbx+48]
  0009e	74 0c		 je	 SHORT $LN169@w_object
  000a0	c6 00 4e	 mov	 BYTE PTR [rax], 78	; 0000004eH
  000a3	48 ff 43 28	 inc	 QWORD PTR [rbx+40]
  000a7	e9 b2 0a 00 00	 jmp	 $LN5@w_object
$LN169@w_object:
  000ac	48 8b d3	 mov	 rdx, rbx
  000af	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH
  000b4	e8 00 00 00 00	 call	 w_more

; 219  :     }
; 220  :     else if (v == PyExc_StopIteration) {

  000b9	e9 a0 0a 00 00	 jmp	 $LN5@w_object
$LN172@w_object:
  000be	48 3b 0d 00 00
	00 00		 cmp	 rcx, QWORD PTR PyExc_StopIteration
  000c5	75 40		 jne	 SHORT $LN166@w_object

; 221  :         w_byte(TYPE_STOPITER, p);

  000c7	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  000ca	48 85 d2	 test	 rdx, rdx
  000cd	74 10		 je	 SHORT $LN165@w_object
  000cf	b9 53 00 00 00	 mov	 ecx, 83			; 00000053H
  000d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  000da	e9 7f 0a 00 00	 jmp	 $LN5@w_object
$LN165@w_object:
  000df	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  000e3	48 3b 43 30	 cmp	 rax, QWORD PTR [rbx+48]
  000e7	74 0c		 je	 SHORT $LN163@w_object
  000e9	c6 00 53	 mov	 BYTE PTR [rax], 83	; 00000053H
  000ec	48 ff 43 28	 inc	 QWORD PTR [rbx+40]
  000f0	e9 69 0a 00 00	 jmp	 $LN5@w_object
$LN163@w_object:
  000f5	48 8b d3	 mov	 rdx, rbx
  000f8	b9 53 00 00 00	 mov	 ecx, 83			; 00000053H
  000fd	e8 00 00 00 00	 call	 w_more

; 222  :     }
; 223  :     else if (v == Py_Ellipsis) {

  00102	e9 57 0a 00 00	 jmp	 $LN5@w_object
$LN166@w_object:
  00107	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_EllipsisObject
  0010e	48 3b c8	 cmp	 rcx, rax
  00111	75 40		 jne	 SHORT $LN160@w_object

; 224  :         w_byte(TYPE_ELLIPSIS, p);

  00113	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00116	48 85 d2	 test	 rdx, rdx
  00119	74 10		 je	 SHORT $LN159@w_object
  0011b	b9 2e 00 00 00	 mov	 ecx, 46			; 0000002eH
  00120	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  00126	e9 33 0a 00 00	 jmp	 $LN5@w_object
$LN159@w_object:
  0012b	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  0012f	48 3b 43 30	 cmp	 rax, QWORD PTR [rbx+48]
  00133	74 0c		 je	 SHORT $LN157@w_object
  00135	c6 00 2e	 mov	 BYTE PTR [rax], 46	; 0000002eH
  00138	48 ff 43 28	 inc	 QWORD PTR [rbx+40]
  0013c	e9 1d 0a 00 00	 jmp	 $LN5@w_object
$LN157@w_object:
  00141	48 8b d3	 mov	 rdx, rbx
  00144	b9 2e 00 00 00	 mov	 ecx, 46			; 0000002eH
  00149	e8 00 00 00 00	 call	 w_more

; 225  :     }
; 226  :     else if (v == Py_False) {

  0014e	e9 0b 0a 00 00	 jmp	 $LN5@w_object
$LN160@w_object:
  00153	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  0015a	48 3b c8	 cmp	 rcx, rax
  0015d	75 40		 jne	 SHORT $LN154@w_object

; 227  :         w_byte(TYPE_FALSE, p);

  0015f	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00162	48 85 d2	 test	 rdx, rdx
  00165	74 10		 je	 SHORT $LN153@w_object
  00167	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  0016c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  00172	e9 e7 09 00 00	 jmp	 $LN5@w_object
$LN153@w_object:
  00177	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  0017b	48 3b 43 30	 cmp	 rax, QWORD PTR [rbx+48]
  0017f	74 0c		 je	 SHORT $LN151@w_object
  00181	c6 00 46	 mov	 BYTE PTR [rax], 70	; 00000046H
  00184	48 ff 43 28	 inc	 QWORD PTR [rbx+40]
  00188	e9 d1 09 00 00	 jmp	 $LN5@w_object
$LN151@w_object:
  0018d	48 8b d3	 mov	 rdx, rbx
  00190	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00195	e8 00 00 00 00	 call	 w_more

; 228  :     }
; 229  :     else if (v == Py_True) {

  0019a	e9 bf 09 00 00	 jmp	 $LN5@w_object
$LN154@w_object:
  0019f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  001a6	48 3b c8	 cmp	 rcx, rax
  001a9	75 40		 jne	 SHORT $LN148@w_object

; 230  :         w_byte(TYPE_TRUE, p);

  001ab	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  001ae	48 85 d2	 test	 rdx, rdx
  001b1	74 10		 je	 SHORT $LN147@w_object
  001b3	b9 54 00 00 00	 mov	 ecx, 84			; 00000054H
  001b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  001be	e9 9b 09 00 00	 jmp	 $LN5@w_object
$LN147@w_object:
  001c3	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  001c7	48 3b 43 30	 cmp	 rax, QWORD PTR [rbx+48]
  001cb	74 0c		 je	 SHORT $LN145@w_object
  001cd	c6 00 54	 mov	 BYTE PTR [rax], 84	; 00000054H
  001d0	48 ff 43 28	 inc	 QWORD PTR [rbx+40]
  001d4	e9 85 09 00 00	 jmp	 $LN5@w_object
$LN145@w_object:
  001d9	48 8b d3	 mov	 rdx, rbx
  001dc	b9 54 00 00 00	 mov	 ecx, 84			; 00000054H
  001e1	e8 00 00 00 00	 call	 w_more

; 231  :     }
; 232  :     else if (PyLong_CheckExact(v)) {

  001e6	e9 73 09 00 00	 jmp	 $LN5@w_object
$LN148@w_object:
  001eb	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  001ef	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyLong_Type
  001f6	48 3b c8	 cmp	 rcx, rax
  001f9	0f 85 8c 00 00
	00		 jne	 $LN142@w_object

; 233  :         long x = PyLong_AsLong(v);

  001ff	48 8b ce	 mov	 rcx, rsi
  00202	e8 00 00 00 00	 call	 PyLong_AsLong
  00207	8b f8		 mov	 edi, eax

; 234  :         if ((x == -1)  && PyErr_Occurred()) {

  00209	83 f8 ff	 cmp	 eax, -1
  0020c	75 1f		 jne	 SHORT $LN141@w_object
  0020e	e8 00 00 00 00	 call	 PyErr_Occurred
  00213	48 85 c0	 test	 rax, rax
  00216	74 15		 je	 SHORT $LN141@w_object

; 235  :             PyLongObject *ob = (PyLongObject *)v;
; 236  :             PyErr_Clear();

  00218	e8 00 00 00 00	 call	 PyErr_Clear

; 237  :             w_PyLong(ob, p);

  0021d	48 8b d3	 mov	 rdx, rbx
  00220	48 8b ce	 mov	 rcx, rsi
  00223	e8 00 00 00 00	 call	 w_PyLong

; 238  :         }
; 239  :         else {

  00228	e9 31 09 00 00	 jmp	 $LN5@w_object
$LN141@w_object:

; 240  : #if SIZEOF_LONG > 4
; 241  :             long y = Py_ARITHMETIC_RIGHT_SHIFT(long, x, 31);
; 242  :             if (y && y != -1) {
; 243  :                 /* Too large for TYPE_INT */
; 244  :                 w_PyLong((PyLongObject*)v, p);
; 245  :             }
; 246  :             else
; 247  : #endif
; 248  :             {
; 249  :                 w_byte(TYPE_INT, p);

  0022d	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  00230	48 85 d2	 test	 rdx, rdx
  00233	74 1a		 je	 SHORT $LN139@w_object
  00235	b9 69 00 00 00	 mov	 ecx, 105		; 00000069H
  0023a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc

; 250  :                 w_long(x, p);

  00240	48 8b d3	 mov	 rdx, rbx
  00243	8b cf		 mov	 ecx, edi
  00245	e8 00 00 00 00	 call	 w_long

; 251  :             }
; 252  :         }

  0024a	e9 0f 09 00 00	 jmp	 $LN5@w_object
$LN139@w_object:

; 240  : #if SIZEOF_LONG > 4
; 241  :             long y = Py_ARITHMETIC_RIGHT_SHIFT(long, x, 31);
; 242  :             if (y && y != -1) {
; 243  :                 /* Too large for TYPE_INT */
; 244  :                 w_PyLong((PyLongObject*)v, p);
; 245  :             }
; 246  :             else
; 247  : #endif
; 248  :             {
; 249  :                 w_byte(TYPE_INT, p);

  0024f	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  00253	48 3b 43 30	 cmp	 rax, QWORD PTR [rbx+48]
  00257	74 16		 je	 SHORT $LN137@w_object
  00259	c6 00 69	 mov	 BYTE PTR [rax], 105	; 00000069H
  0025c	48 ff 43 28	 inc	 QWORD PTR [rbx+40]

; 250  :                 w_long(x, p);

  00260	48 8b d3	 mov	 rdx, rbx
  00263	8b cf		 mov	 ecx, edi
  00265	e8 00 00 00 00	 call	 w_long

; 251  :             }
; 252  :         }

  0026a	e9 ef 08 00 00	 jmp	 $LN5@w_object
$LN137@w_object:

; 240  : #if SIZEOF_LONG > 4
; 241  :             long y = Py_ARITHMETIC_RIGHT_SHIFT(long, x, 31);
; 242  :             if (y && y != -1) {
; 243  :                 /* Too large for TYPE_INT */
; 244  :                 w_PyLong((PyLongObject*)v, p);
; 245  :             }
; 246  :             else
; 247  : #endif
; 248  :             {
; 249  :                 w_byte(TYPE_INT, p);

  0026f	48 8b d3	 mov	 rdx, rbx
  00272	b9 69 00 00 00	 mov	 ecx, 105		; 00000069H
  00277	e8 00 00 00 00	 call	 w_more

; 250  :                 w_long(x, p);

  0027c	48 8b d3	 mov	 rdx, rbx
  0027f	8b cf		 mov	 ecx, edi
  00281	e8 00 00 00 00	 call	 w_long

; 251  :             }
; 252  :         }

  00286	e9 d3 08 00 00	 jmp	 $LN5@w_object
$LN142@w_object:

; 253  :     }
; 254  :     else if (PyFloat_CheckExact(v)) {

  0028b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFloat_Type
  00292	48 3b c8	 cmp	 rcx, rax
  00295	0f 85 35 01 00
	00		 jne	 $LN134@w_object

; 255  :         if (p->version > 1) {

  0029b	83 7a 38 01	 cmp	 DWORD PTR [rdx+56], 1
  0029f	7e 72		 jle	 SHORT $LN133@w_object

; 256  :             unsigned char buf[8];
; 257  :             if (_PyFloat_Pack8(PyFloat_AsDouble(v),
; 258  :                                buf, 1) < 0) {

  002a1	48 8b ce	 mov	 rcx, rsi
  002a4	e8 00 00 00 00	 call	 PyFloat_AsDouble
  002a9	48 8d 94 24 a8
	00 00 00	 lea	 rdx, QWORD PTR buf$20463[rsp]
  002b1	41 b8 01 00 00
	00		 mov	 r8d, 1
  002b7	e8 00 00 00 00	 call	 _PyFloat_Pack8
  002bc	85 c0		 test	 eax, eax

; 259  :                 p->error = WFERR_UNMARSHALLABLE;
; 260  :                 return;

  002be	0f 88 b2 01 00
	00		 js	 $LN195@w_object

; 261  :             }
; 262  :             w_byte(TYPE_BINARY_FLOAT, p);

  002c4	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  002c7	48 85 d2	 test	 rdx, rdx
  002ca	74 0d		 je	 SHORT $LN131@w_object
  002cc	b9 67 00 00 00	 mov	 ecx, 103		; 00000067H
  002d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  002d7	eb 20		 jmp	 SHORT $LN128@w_object
$LN131@w_object:
  002d9	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  002dd	48 3b 43 30	 cmp	 rax, QWORD PTR [rbx+48]
  002e1	74 09		 je	 SHORT $LN129@w_object
  002e3	c6 00 67	 mov	 BYTE PTR [rax], 103	; 00000067H
  002e6	48 ff 43 28	 inc	 QWORD PTR [rbx+40]
  002ea	eb 0d		 jmp	 SHORT $LN128@w_object
$LN129@w_object:
  002ec	48 8b d3	 mov	 rdx, rbx
  002ef	b9 67 00 00 00	 mov	 ecx, 103		; 00000067H
  002f4	e8 00 00 00 00	 call	 w_more
$LN128@w_object:

; 263  :             w_string((char*)buf, 8, p);

  002f9	48 8d 8c 24 a8
	00 00 00	 lea	 rcx, QWORD PTR buf$20463[rsp]
  00301	4c 8b c3	 mov	 r8, rbx
  00304	ba 08 00 00 00	 mov	 edx, 8
  00309	e8 00 00 00 00	 call	 w_string

; 264  :         }
; 265  :         else {

  0030e	e9 4b 08 00 00	 jmp	 $LN5@w_object
$LN133@w_object:

; 266  :             char *buf = PyOS_double_to_string(PyFloat_AS_DOUBLE(v),
; 267  :                                               'g', 17, 0, NULL);

  00313	f2 0f 10 46 60	 movsdx	 xmm0, QWORD PTR [rsi+96]
  00318	33 ed		 xor	 ebp, ebp
  0031a	45 33 c9	 xor	 r9d, r9d
  0031d	44 8d 45 11	 lea	 r8d, QWORD PTR [rbp+17]
  00321	b2 67		 mov	 dl, 103			; 00000067H
  00323	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  00328	e8 00 00 00 00	 call	 PyOS_double_to_string
  0032d	48 8b f0	 mov	 rsi, rax

; 268  :             if (!buf) {

  00330	48 85 c0	 test	 rax, rax
  00333	75 0c		 jne	 SHORT $LN126@w_object
$LN196@w_object:

; 269  :                 p->error = WFERR_NOMEMORY;

  00335	c7 43 08 03 00
	00 00		 mov	 DWORD PTR [rbx+8], 3

; 270  :                 return;

  0033c	e9 20 08 00 00	 jmp	 $LN181@w_object
$LN126@w_object:

; 271  :             }
; 272  :             n = strlen(buf);
; 273  :             w_byte(TYPE_FLOAT, p);

  00341	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  00344	48 83 c9 ff	 or	 rcx, -1
  00348	33 c0		 xor	 eax, eax
  0034a	48 8b fe	 mov	 rdi, rsi
  0034d	f2 ae		 repne scasb
  0034f	48 f7 d1	 not	 rcx
  00352	48 8d 79 ff	 lea	 rdi, QWORD PTR [rcx-1]
  00356	48 85 d2	 test	 rdx, rdx
  00359	74 0b		 je	 SHORT $LN125@w_object
  0035b	8d 48 66	 lea	 ecx, QWORD PTR [rax+102]
  0035e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  00364	eb 20		 jmp	 SHORT $LN122@w_object
$LN125@w_object:
  00366	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  0036a	48 3b 43 30	 cmp	 rax, QWORD PTR [rbx+48]
  0036e	74 09		 je	 SHORT $LN123@w_object
  00370	c6 00 66	 mov	 BYTE PTR [rax], 102	; 00000066H
  00373	48 ff 43 28	 inc	 QWORD PTR [rbx+40]
  00377	eb 0d		 jmp	 SHORT $LN122@w_object
$LN123@w_object:
  00379	48 8b d3	 mov	 rdx, rbx
  0037c	b9 66 00 00 00	 mov	 ecx, 102		; 00000066H
  00381	e8 00 00 00 00	 call	 w_more
$LN122@w_object:

; 274  :             w_byte((int)n, p);

  00386	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  00389	48 85 d2	 test	 rdx, rdx
  0038c	74 0a		 je	 SHORT $LN121@w_object
  0038e	8b cf		 mov	 ecx, edi
$LN197@w_object:
  00390	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  00396	eb 1d		 jmp	 SHORT $LN94@w_object
$LN121@w_object:
  00398	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  0039c	48 3b 43 30	 cmp	 rax, QWORD PTR [rbx+48]
  003a0	74 09		 je	 SHORT $LN119@w_object
  003a2	40 88 38	 mov	 BYTE PTR [rax], dil
  003a5	48 ff 43 28	 inc	 QWORD PTR [rbx+40]
  003a9	eb 0a		 jmp	 SHORT $LN94@w_object
$LN119@w_object:
  003ab	8b cf		 mov	 ecx, edi
$LN95@w_object:

; 314  :             }
; 315  :             n = strlen(buf);
; 316  :             w_byte((int)n, p);

  003ad	48 8b d3	 mov	 rdx, rbx
  003b0	e8 00 00 00 00	 call	 w_more
$LN94@w_object:

; 317  :             w_string(buf, n, p);

  003b5	4c 8b c3	 mov	 r8, rbx
  003b8	48 8b d7	 mov	 rdx, rdi
  003bb	48 8b ce	 mov	 rcx, rsi
  003be	e8 00 00 00 00	 call	 w_string

; 318  :             PyMem_Free(buf);

  003c3	48 8b ce	 mov	 rcx, rsi
  003c6	e8 00 00 00 00	 call	 PyMem_Free

; 319  :         }

  003cb	e9 8e 07 00 00	 jmp	 $LN5@w_object
$LN134@w_object:

; 275  :             w_string(buf, n, p);
; 276  :             PyMem_Free(buf);
; 277  :         }
; 278  :     }
; 279  :     else if (PyComplex_CheckExact(v)) {

  003d0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyComplex_Type
  003d7	48 3b c8	 cmp	 rcx, rax
  003da	0f 85 c4 01 00
	00		 jne	 $LN116@w_object

; 280  :         if (p->version > 1) {

  003e0	83 7a 38 01	 cmp	 DWORD PTR [rdx+56], 1
  003e4	0f 8e 98 00 00
	00		 jle	 $LN115@w_object

; 281  :             unsigned char buf[8];
; 282  :             if (_PyFloat_Pack8(PyComplex_RealAsDouble(v),
; 283  :                                buf, 1) < 0) {

  003ea	48 8b ce	 mov	 rcx, rsi
  003ed	e8 00 00 00 00	 call	 PyComplex_RealAsDouble
  003f2	48 8d 94 24 a8
	00 00 00	 lea	 rdx, QWORD PTR buf$20490[rsp]
  003fa	41 b8 01 00 00
	00		 mov	 r8d, 1
  00400	e8 00 00 00 00	 call	 _PyFloat_Pack8
  00405	85 c0		 test	 eax, eax

; 284  :                 p->error = WFERR_UNMARSHALLABLE;
; 285  :                 return;

  00407	78 6d		 js	 SHORT $LN195@w_object

; 286  :             }
; 287  :             w_byte(TYPE_BINARY_COMPLEX, p);

  00409	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  0040c	48 85 d2	 test	 rdx, rdx
  0040f	74 0d		 je	 SHORT $LN113@w_object
  00411	b9 79 00 00 00	 mov	 ecx, 121		; 00000079H
  00416	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  0041c	eb 20		 jmp	 SHORT $LN110@w_object
$LN113@w_object:
  0041e	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  00422	48 3b 43 30	 cmp	 rax, QWORD PTR [rbx+48]
  00426	74 09		 je	 SHORT $LN111@w_object
  00428	c6 00 79	 mov	 BYTE PTR [rax], 121	; 00000079H
  0042b	48 ff 43 28	 inc	 QWORD PTR [rbx+40]
  0042f	eb 0d		 jmp	 SHORT $LN110@w_object
$LN111@w_object:
  00431	48 8b d3	 mov	 rdx, rbx
  00434	b9 79 00 00 00	 mov	 ecx, 121		; 00000079H
  00439	e8 00 00 00 00	 call	 w_more
$LN110@w_object:

; 288  :             w_string((char*)buf, 8, p);

  0043e	48 8d 8c 24 a8
	00 00 00	 lea	 rcx, QWORD PTR buf$20490[rsp]
  00446	4c 8b c3	 mov	 r8, rbx
  00449	ba 08 00 00 00	 mov	 edx, 8
  0044e	e8 00 00 00 00	 call	 w_string

; 289  :             if (_PyFloat_Pack8(PyComplex_ImagAsDouble(v),
; 290  :                                buf, 1) < 0) {

  00453	48 8b ce	 mov	 rcx, rsi
  00456	e8 00 00 00 00	 call	 PyComplex_ImagAsDouble
  0045b	48 8d 94 24 a8
	00 00 00	 lea	 rdx, QWORD PTR buf$20490[rsp]
  00463	41 b8 01 00 00
	00		 mov	 r8d, 1
  00469	e8 00 00 00 00	 call	 _PyFloat_Pack8
  0046e	85 c0		 test	 eax, eax
  00470	0f 89 83 fe ff
	ff		 jns	 $LN128@w_object
$LN195@w_object:

; 291  :                 p->error = WFERR_UNMARSHALLABLE;

  00476	c7 43 08 01 00
	00 00		 mov	 DWORD PTR [rbx+8], 1

; 292  :                 return;

  0047d	e9 df 06 00 00	 jmp	 $LN181@w_object
$LN115@w_object:

; 293  :             }
; 294  :             w_string((char*)buf, 8, p);
; 295  :         }
; 296  :         else {
; 297  :             char *buf;
; 298  :             w_byte(TYPE_COMPLEX, p);

  00482	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00485	48 85 d2	 test	 rdx, rdx
  00488	74 0d		 je	 SHORT $LN107@w_object
  0048a	b9 78 00 00 00	 mov	 ecx, 120		; 00000078H
  0048f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  00495	eb 20		 jmp	 SHORT $LN104@w_object
$LN107@w_object:
  00497	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  0049b	48 3b 43 30	 cmp	 rax, QWORD PTR [rbx+48]
  0049f	74 09		 je	 SHORT $LN105@w_object
  004a1	c6 00 78	 mov	 BYTE PTR [rax], 120	; 00000078H
  004a4	48 ff 43 28	 inc	 QWORD PTR [rbx+40]
  004a8	eb 0d		 jmp	 SHORT $LN104@w_object
$LN105@w_object:
  004aa	48 8b d3	 mov	 rdx, rbx
  004ad	b9 78 00 00 00	 mov	 ecx, 120		; 00000078H
  004b2	e8 00 00 00 00	 call	 w_more
$LN104@w_object:

; 299  :             buf = PyOS_double_to_string(PyComplex_RealAsDouble(v),
; 300  :                                         'g', 17, 0, NULL);

  004b7	48 8b ce	 mov	 rcx, rsi
  004ba	e8 00 00 00 00	 call	 PyComplex_RealAsDouble
  004bf	33 ed		 xor	 ebp, ebp
  004c1	45 33 c9	 xor	 r9d, r9d
  004c4	44 8d 45 11	 lea	 r8d, QWORD PTR [rbp+17]
  004c8	b2 67		 mov	 dl, 103			; 00000067H
  004ca	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  004cf	e8 00 00 00 00	 call	 PyOS_double_to_string
  004d4	48 8b d0	 mov	 rdx, rax
  004d7	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR buf$2$[rsp], rax

; 301  :             if (!buf) {

  004df	48 85 c0	 test	 rax, rax

; 302  :                 p->error = WFERR_NOMEMORY;
; 303  :                 return;

  004e2	0f 84 4d fe ff
	ff		 je	 $LN196@w_object

; 304  :             }
; 305  :             n = strlen(buf);

  004e8	48 83 c9 ff	 or	 rcx, -1
  004ec	33 c0		 xor	 eax, eax
  004ee	48 8b fa	 mov	 rdi, rdx

; 306  :             w_byte((int)n, p);

  004f1	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  004f4	f2 ae		 repne scasb
  004f6	48 f7 d1	 not	 rcx
  004f9	48 ff c9	 dec	 rcx
  004fc	48 8b f9	 mov	 rdi, rcx
  004ff	48 85 d2	 test	 rdx, rdx
  00502	74 08		 je	 SHORT $LN102@w_object
  00504	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  0050a	eb 1a		 jmp	 SHORT $LN99@w_object
$LN102@w_object:
  0050c	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  00510	48 3b 43 30	 cmp	 rax, QWORD PTR [rbx+48]
  00514	74 08		 je	 SHORT $LN100@w_object
  00516	88 08		 mov	 BYTE PTR [rax], cl
  00518	48 ff 43 28	 inc	 QWORD PTR [rbx+40]
  0051c	eb 08		 jmp	 SHORT $LN99@w_object
$LN100@w_object:
  0051e	48 8b d3	 mov	 rdx, rbx
  00521	e8 00 00 00 00	 call	 w_more
$LN99@w_object:

; 307  :             w_string(buf, n, p);

  00526	48 8b d7	 mov	 rdx, rdi
  00529	48 8b bc 24 a8
	00 00 00	 mov	 rdi, QWORD PTR buf$2$[rsp]
  00531	4c 8b c3	 mov	 r8, rbx
  00534	48 8b cf	 mov	 rcx, rdi
  00537	e8 00 00 00 00	 call	 w_string

; 308  :             PyMem_Free(buf);

  0053c	48 8b cf	 mov	 rcx, rdi
  0053f	e8 00 00 00 00	 call	 PyMem_Free

; 309  :             buf = PyOS_double_to_string(PyComplex_ImagAsDouble(v),
; 310  :                                         'g', 17, 0, NULL);

  00544	48 8b ce	 mov	 rcx, rsi
  00547	e8 00 00 00 00	 call	 PyComplex_ImagAsDouble
  0054c	45 33 c9	 xor	 r9d, r9d
  0054f	b2 67		 mov	 dl, 103			; 00000067H
  00551	45 8d 41 11	 lea	 r8d, QWORD PTR [r9+17]
  00555	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  0055a	e8 00 00 00 00	 call	 PyOS_double_to_string
  0055f	48 8b f0	 mov	 rsi, rax

; 311  :             if (!buf) {

  00562	48 85 c0	 test	 rax, rax

; 312  :                 p->error = WFERR_NOMEMORY;
; 313  :                 return;

  00565	0f 84 ca fd ff
	ff		 je	 $LN196@w_object

; 314  :             }
; 315  :             n = strlen(buf);
; 316  :             w_byte((int)n, p);

  0056b	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  0056e	48 83 c9 ff	 or	 rcx, -1
  00572	33 c0		 xor	 eax, eax
  00574	48 8b fe	 mov	 rdi, rsi
  00577	f2 ae		 repne scasb
  00579	48 f7 d1	 not	 rcx
  0057c	48 ff c9	 dec	 rcx
  0057f	48 8b f9	 mov	 rdi, rcx
  00582	48 85 d2	 test	 rdx, rdx
  00585	0f 85 05 fe ff
	ff		 jne	 $LN197@w_object
  0058b	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  0058f	48 3b 43 30	 cmp	 rax, QWORD PTR [rbx+48]
  00593	0f 84 14 fe ff
	ff		 je	 $LN95@w_object
  00599	88 08		 mov	 BYTE PTR [rax], cl
  0059b	48 ff 43 28	 inc	 QWORD PTR [rbx+40]
  0059f	e9 11 fe ff ff	 jmp	 $LN94@w_object
$LN116@w_object:

; 320  :     }
; 321  :     else if (PyBytes_CheckExact(v)) {

  005a4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBytes_Type
  005ab	48 3b c8	 cmp	 rcx, rax
  005ae	75 4a		 jne	 SHORT $LN92@w_object

; 322  :         w_byte(TYPE_STRING, p);

  005b0	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  005b3	48 85 d2	 test	 rdx, rdx
  005b6	74 0d		 je	 SHORT $LN91@w_object
  005b8	b9 73 00 00 00	 mov	 ecx, 115		; 00000073H
  005bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  005c3	eb 20		 jmp	 SHORT $LN88@w_object
$LN91@w_object:
  005c5	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  005c9	48 3b 43 30	 cmp	 rax, QWORD PTR [rbx+48]
  005cd	74 09		 je	 SHORT $LN89@w_object
  005cf	c6 00 73	 mov	 BYTE PTR [rax], 115	; 00000073H
  005d2	48 ff 43 28	 inc	 QWORD PTR [rbx+40]
  005d6	eb 0d		 jmp	 SHORT $LN88@w_object
$LN89@w_object:
  005d8	48 8b d3	 mov	 rdx, rbx
  005db	b9 73 00 00 00	 mov	 ecx, 115		; 00000073H
  005e0	e8 00 00 00 00	 call	 w_more
$LN88@w_object:

; 323  :         w_pstring(PyBytes_AS_STRING(v), PyBytes_GET_SIZE(v), p);

  005e5	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  005e9	48 8d 4e 78	 lea	 rcx, QWORD PTR [rsi+120]
  005ed	4c 8b c3	 mov	 r8, rbx
  005f0	e8 00 00 00 00	 call	 w_pstring
  005f5	e9 64 05 00 00	 jmp	 $LN5@w_object
$LN92@w_object:

; 324  :     }
; 325  :     else if (PyUnicode_CheckExact(v)) {

  005fa	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  00601	48 3b c8	 cmp	 rcx, rax
  00604	75 74		 jne	 SHORT $LN86@w_object

; 326  :         PyObject *utf8;
; 327  :         utf8 = PyUnicode_AsEncodedString(v, "utf8", "surrogatepass");

  00606	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@BNPCNOJJ@surrogatepass?$AA@
  0060d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04LHHHFLPP@utf8?$AA@
  00614	48 8b ce	 mov	 rcx, rsi
  00617	e8 00 00 00 00	 call	 PyUnicode_AsEncodedString
  0061c	48 8b f8	 mov	 rdi, rax

; 328  :         if (utf8 == NULL) {

  0061f	48 85 c0	 test	 rax, rax

; 329  :             p->depth--;
; 330  :             p->error = WFERR_UNMARSHALLABLE;
; 331  :             return;

  00622	0f 84 6d 03 00
	00		 je	 $LN1@w_object

; 332  :         }
; 333  :         w_byte(TYPE_UNICODE, p);

  00628	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  0062b	48 85 d2	 test	 rdx, rdx
  0062e	74 0d		 je	 SHORT $LN84@w_object
  00630	b9 75 00 00 00	 mov	 ecx, 117		; 00000075H
  00635	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  0063b	eb 20		 jmp	 SHORT $LN81@w_object
$LN84@w_object:
  0063d	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  00641	48 3b 43 30	 cmp	 rax, QWORD PTR [rbx+48]
  00645	74 09		 je	 SHORT $LN82@w_object
  00647	c6 00 75	 mov	 BYTE PTR [rax], 117	; 00000075H
  0064a	48 ff 43 28	 inc	 QWORD PTR [rbx+40]
  0064e	eb 0d		 jmp	 SHORT $LN81@w_object
$LN82@w_object:
  00650	48 8b d3	 mov	 rdx, rbx
  00653	b9 75 00 00 00	 mov	 ecx, 117		; 00000075H
  00658	e8 00 00 00 00	 call	 w_more
$LN81@w_object:

; 334  :         w_pstring(PyBytes_AS_STRING(utf8), PyBytes_GET_SIZE(utf8), p);

  0065d	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  00661	48 8d 4f 78	 lea	 rcx, QWORD PTR [rdi+120]
  00665	4c 8b c3	 mov	 r8, rbx
  00668	e8 00 00 00 00	 call	 w_pstring

; 335  :         Py_DECREF(utf8);

  0066d	48 8b cf	 mov	 rcx, rdi
  00670	e8 00 00 00 00	 call	 _Py_DecRef
  00675	e9 e4 04 00 00	 jmp	 $LN5@w_object
$LN86@w_object:

; 336  :     }
; 337  :     else if (PyTuple_CheckExact(v)) {

  0067a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTuple_Type
  00681	48 3b c8	 cmp	 rcx, rax
  00684	0f 85 7f 00 00
	00		 jne	 $LN79@w_object

; 338  :         w_byte(TYPE_TUPLE, p);

  0068a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0068d	48 85 d2	 test	 rdx, rdx
  00690	74 0d		 je	 SHORT $LN78@w_object
  00692	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  00697	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  0069d	eb 20		 jmp	 SHORT $LN75@w_object
$LN78@w_object:
  0069f	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  006a3	48 3b 43 30	 cmp	 rax, QWORD PTR [rbx+48]
  006a7	74 09		 je	 SHORT $LN76@w_object
  006a9	c6 00 28	 mov	 BYTE PTR [rax], 40	; 00000028H
  006ac	48 ff 43 28	 inc	 QWORD PTR [rbx+40]
  006b0	eb 0d		 jmp	 SHORT $LN75@w_object
$LN76@w_object:
  006b2	48 8b d3	 mov	 rdx, rbx
  006b5	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  006ba	e8 00 00 00 00	 call	 w_more
$LN75@w_object:

; 339  :         n = PyTuple_Size(v);

  006bf	48 8b ce	 mov	 rcx, rsi
  006c2	e8 00 00 00 00	 call	 PyTuple_Size
  006c7	48 8b f8	 mov	 rdi, rax

; 340  :         W_SIZE(n, p);

  006ca	48 3d ff ff ff
	7f		 cmp	 rax, 2147483647		; 7fffffffH
  006d0	0f 8f bf 02 00
	00		 jg	 $LN1@w_object
  006d6	48 8b d3	 mov	 rdx, rbx
  006d9	8b c8		 mov	 ecx, eax
  006db	e8 00 00 00 00	 call	 w_long

; 341  :         for (i = 0; i < n; i++) {

  006e0	48 85 ff	 test	 rdi, rdi
  006e3	0f 8e 75 04 00
	00		 jle	 $LN5@w_object

; 340  :         W_SIZE(n, p);

  006e9	48 83 c6 70	 add	 rsi, 112		; 00000070H
  006ed	0f 1f 00	 npad	 3
$LL70@w_object:

; 342  :             w_object(PyTuple_GET_ITEM(v, i), p);

  006f0	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  006f3	48 8b d3	 mov	 rdx, rbx
  006f6	e8 00 00 00 00	 call	 w_object
  006fb	48 83 c6 08	 add	 rsi, 8
  006ff	48 ff cf	 dec	 rdi
  00702	75 ec		 jne	 SHORT $LL70@w_object

; 343  :         }
; 344  :     }
; 345  :     else if (PyList_CheckExact(v)) {

  00704	e9 55 04 00 00	 jmp	 $LN5@w_object
$LN79@w_object:
  00709	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyList_Type
  00710	48 3b c8	 cmp	 rcx, rax
  00713	75 78		 jne	 SHORT $LN66@w_object

; 346  :         w_byte(TYPE_LIST, p);

  00715	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00718	48 85 d2	 test	 rdx, rdx
  0071b	74 0d		 je	 SHORT $LN65@w_object
  0071d	b9 5b 00 00 00	 mov	 ecx, 91			; 0000005bH
  00722	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  00728	eb 20		 jmp	 SHORT $LN62@w_object
$LN65@w_object:
  0072a	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  0072e	48 3b 43 30	 cmp	 rax, QWORD PTR [rbx+48]
  00732	74 09		 je	 SHORT $LN63@w_object
  00734	c6 00 5b	 mov	 BYTE PTR [rax], 91	; 0000005bH
  00737	48 ff 43 28	 inc	 QWORD PTR [rbx+40]
  0073b	eb 0d		 jmp	 SHORT $LN62@w_object
$LN63@w_object:
  0073d	48 8b d3	 mov	 rdx, rbx
  00740	b9 5b 00 00 00	 mov	 ecx, 91			; 0000005bH
  00745	e8 00 00 00 00	 call	 w_more
$LN62@w_object:

; 347  :         n = PyList_GET_SIZE(v);

  0074a	48 8b 7e 60	 mov	 rdi, QWORD PTR [rsi+96]

; 348  :         W_SIZE(n, p);

  0074e	48 81 ff ff ff
	ff 7f		 cmp	 rdi, 2147483647		; 7fffffffH
  00755	0f 8f 3a 02 00
	00		 jg	 $LN1@w_object
  0075b	48 8b d3	 mov	 rdx, rbx
  0075e	8b cf		 mov	 ecx, edi
  00760	e8 00 00 00 00	 call	 w_long

; 349  :         for (i = 0; i < n; i++) {

  00765	33 ed		 xor	 ebp, ebp
  00767	48 85 ff	 test	 rdi, rdi
  0076a	0f 8e ee 03 00
	00		 jle	 $LN5@w_object
$LL57@w_object:

; 350  :             w_object(PyList_GET_ITEM(v, i), p);

  00770	48 8b 4e 70	 mov	 rcx, QWORD PTR [rsi+112]
  00774	48 8b d3	 mov	 rdx, rbx
  00777	48 8b 0c e9	 mov	 rcx, QWORD PTR [rcx+rbp*8]
  0077b	e8 00 00 00 00	 call	 w_object
  00780	48 ff c5	 inc	 rbp
  00783	48 3b ef	 cmp	 rbp, rdi
  00786	7c e8		 jl	 SHORT $LL57@w_object

; 351  :         }
; 352  :     }
; 353  :     else if (PyDict_CheckExact(v)) {

  00788	e9 d1 03 00 00	 jmp	 $LN5@w_object
$LN66@w_object:
  0078d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  00794	48 3b c8	 cmp	 rcx, rax
  00797	0f 84 08 03 00
	00		 je	 $LN52@w_object
  0079d	48 39 46 38	 cmp	 QWORD PTR [rsi+56], rax
  007a1	0f 84 fe 02 00
	00		 je	 $LN52@w_object

; 364  :     }
; 365  :     else if (PyAnySet_CheckExact(v)) {

  007a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PySet_Type
  007ae	48 3b ca	 cmp	 rcx, rdx
  007b1	0f 84 25 02 00
	00		 je	 $LN41@w_object
  007b7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFrozenSet_Type
  007be	48 3b c8	 cmp	 rcx, rax
  007c1	0f 84 da 01 00
	00		 je	 $LN43@w_object

; 394  :         }
; 395  :     }
; 396  :     else if (PyCode_Check(v)) {

  007c7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCode_Type
  007ce	48 3b c8	 cmp	 rcx, rax
  007d1	0f 85 fb 00 00
	00		 jne	 $LN21@w_object

; 397  :         PyCodeObject *co = (PyCodeObject *)v;
; 398  :         w_byte(TYPE_CODE, p);

  007d7	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  007da	48 85 d2	 test	 rdx, rdx
  007dd	74 0d		 je	 SHORT $LN20@w_object
  007df	b9 63 00 00 00	 mov	 ecx, 99			; 00000063H
  007e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  007ea	eb 20		 jmp	 SHORT $LN17@w_object
$LN20@w_object:
  007ec	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  007f0	48 3b 43 30	 cmp	 rax, QWORD PTR [rbx+48]
  007f4	74 09		 je	 SHORT $LN18@w_object
  007f6	c6 00 63	 mov	 BYTE PTR [rax], 99	; 00000063H
  007f9	48 ff 43 28	 inc	 QWORD PTR [rbx+40]
  007fd	eb 0d		 jmp	 SHORT $LN17@w_object
$LN18@w_object:
  007ff	48 8b d3	 mov	 rdx, rbx
  00802	b9 63 00 00 00	 mov	 ecx, 99			; 00000063H
  00807	e8 00 00 00 00	 call	 w_more
$LN17@w_object:

; 399  :         w_long(co->co_argcount, p);

  0080c	8b 4e 60	 mov	 ecx, DWORD PTR [rsi+96]
  0080f	48 8b d3	 mov	 rdx, rbx
  00812	e8 00 00 00 00	 call	 w_long

; 400  :         w_long(co->co_kwonlyargcount, p);

  00817	8b 4e 64	 mov	 ecx, DWORD PTR [rsi+100]
  0081a	48 8b d3	 mov	 rdx, rbx
  0081d	e8 00 00 00 00	 call	 w_long

; 401  :         w_long(co->co_nlocals, p);

  00822	8b 4e 68	 mov	 ecx, DWORD PTR [rsi+104]
  00825	48 8b d3	 mov	 rdx, rbx
  00828	e8 00 00 00 00	 call	 w_long

; 402  :         w_long(co->co_stacksize, p);

  0082d	8b 4e 6c	 mov	 ecx, DWORD PTR [rsi+108]
  00830	48 8b d3	 mov	 rdx, rbx
  00833	e8 00 00 00 00	 call	 w_long

; 403  :         w_long(co->co_flags, p);

  00838	8b 4e 70	 mov	 ecx, DWORD PTR [rsi+112]
  0083b	48 8b d3	 mov	 rdx, rbx
  0083e	e8 00 00 00 00	 call	 w_long

; 404  :         w_object(co->co_code, p);

  00843	48 8b 4e 78	 mov	 rcx, QWORD PTR [rsi+120]
  00847	48 8b d3	 mov	 rdx, rbx
  0084a	e8 00 00 00 00	 call	 w_object

; 405  :         w_object(co->co_consts, p);

  0084f	48 8b 8e 80 00
	00 00		 mov	 rcx, QWORD PTR [rsi+128]
  00856	48 8b d3	 mov	 rdx, rbx
  00859	e8 00 00 00 00	 call	 w_object

; 406  :         w_object(co->co_names, p);

  0085e	48 8b 8e 88 00
	00 00		 mov	 rcx, QWORD PTR [rsi+136]
  00865	48 8b d3	 mov	 rdx, rbx
  00868	e8 00 00 00 00	 call	 w_object

; 407  :         w_object(co->co_varnames, p);

  0086d	48 8b 8e 90 00
	00 00		 mov	 rcx, QWORD PTR [rsi+144]
  00874	48 8b d3	 mov	 rdx, rbx
  00877	e8 00 00 00 00	 call	 w_object

; 408  :         w_object(co->co_freevars, p);

  0087c	48 8b 8e 98 00
	00 00		 mov	 rcx, QWORD PTR [rsi+152]
  00883	48 8b d3	 mov	 rdx, rbx
  00886	e8 00 00 00 00	 call	 w_object

; 409  :         w_object(co->co_cellvars, p);

  0088b	48 8b 8e a0 00
	00 00		 mov	 rcx, QWORD PTR [rsi+160]
  00892	48 8b d3	 mov	 rdx, rbx
  00895	e8 00 00 00 00	 call	 w_object

; 410  :         w_object(co->co_filename, p);

  0089a	48 8b 8e b0 00
	00 00		 mov	 rcx, QWORD PTR [rsi+176]
  008a1	48 8b d3	 mov	 rdx, rbx
  008a4	e8 00 00 00 00	 call	 w_object

; 411  :         w_object(co->co_name, p);

  008a9	48 8b 8e b8 00
	00 00		 mov	 rcx, QWORD PTR [rsi+184]
  008b0	48 8b d3	 mov	 rdx, rbx
  008b3	e8 00 00 00 00	 call	 w_object

; 412  :         w_long(co->co_firstlineno, p);

  008b8	8b 8e c0 00 00
	00		 mov	 ecx, DWORD PTR [rsi+192]
  008be	48 8b d3	 mov	 rdx, rbx
  008c1	e8 00 00 00 00	 call	 w_long

; 413  :         w_object(co->co_lnotab, p);

  008c6	48 8b 8e c8 00
	00 00		 mov	 rcx, QWORD PTR [rsi+200]
  008cd	e9 84 02 00 00	 jmp	 $LN192@w_object
$LN21@w_object:

; 414  :     }
; 415  :     else if (PyObject_CheckBuffer(v)) {

  008d2	48 8b 81 f8 00
	00 00		 mov	 rax, QWORD PTR [rcx+248]
  008d9	48 85 c0	 test	 rax, rax
  008dc	74 6e		 je	 SHORT $LN15@w_object
  008de	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  008e2	74 68		 je	 SHORT $LN15@w_object

; 416  :         /* Write unknown buffer-style objects as a string */
; 417  :         Py_buffer view;
; 418  :         if (PyObject_GetBuffer(v, &view, PyBUF_SIMPLE) != 0) {

  008e4	48 8d 54 24 30	 lea	 rdx, QWORD PTR view$20649[rsp]
  008e9	45 33 c0	 xor	 r8d, r8d
  008ec	48 8b ce	 mov	 rcx, rsi
  008ef	e8 00 00 00 00	 call	 PyObject_GetBuffer

; 419  :             w_byte(TYPE_UNKNOWN, p);

  008f4	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  008f7	85 c0		 test	 eax, eax
  008f9	75 54		 jne	 SHORT $LN198@w_object

; 420  :             p->depth--;
; 421  :             p->error = WFERR_UNMARSHALLABLE;
; 422  :             return;
; 423  :         }
; 424  :         w_byte(TYPE_STRING, p);

  008fb	48 85 d2	 test	 rdx, rdx
  008fe	74 0b		 je	 SHORT $LN9@w_object
  00900	8d 48 73	 lea	 ecx, QWORD PTR [rax+115]
  00903	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  00909	eb 20		 jmp	 SHORT $LN6@w_object
$LN9@w_object:
  0090b	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  0090f	48 3b 43 30	 cmp	 rax, QWORD PTR [rbx+48]
  00913	74 09		 je	 SHORT $LN7@w_object
  00915	c6 00 73	 mov	 BYTE PTR [rax], 115	; 00000073H
  00918	48 ff 43 28	 inc	 QWORD PTR [rbx+40]
  0091c	eb 0d		 jmp	 SHORT $LN6@w_object
$LN7@w_object:
  0091e	48 8b d3	 mov	 rdx, rbx
  00921	b9 73 00 00 00	 mov	 ecx, 115		; 00000073H
  00926	e8 00 00 00 00	 call	 w_more
$LN6@w_object:

; 425  :         w_pstring(view.buf, view.len, p);

  0092b	48 8b 54 24 40	 mov	 rdx, QWORD PTR view$20649[rsp+16]
  00930	48 8b 4c 24 30	 mov	 rcx, QWORD PTR view$20649[rsp]
  00935	4c 8b c3	 mov	 r8, rbx
  00938	e8 00 00 00 00	 call	 w_pstring

; 426  :         PyBuffer_Release(&view);

  0093d	48 8d 4c 24 30	 lea	 rcx, QWORD PTR view$20649[rsp]
  00942	e8 00 00 00 00	 call	 PyBuffer_Release

; 427  :     }
; 428  :     else {

  00947	e9 12 02 00 00	 jmp	 $LN5@w_object
$LN15@w_object:

; 429  :         w_byte(TYPE_UNKNOWN, p);

  0094c	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
$LN198@w_object:
  0094f	48 85 d2	 test	 rdx, rdx
  00952	74 17		 je	 SHORT $LN4@w_object
  00954	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00959	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc

; 430  :         p->error = WFERR_UNMARSHALLABLE;

  0095f	c7 43 08 01 00
	00 00		 mov	 DWORD PTR [rbx+8], 1
  00966	e9 f3 01 00 00	 jmp	 $LN5@w_object
$LN4@w_object:

; 429  :         w_byte(TYPE_UNKNOWN, p);

  0096b	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  0096f	48 3b 43 30	 cmp	 rax, QWORD PTR [rbx+48]
  00973	74 13		 je	 SHORT $LN2@w_object
  00975	c6 00 3f	 mov	 BYTE PTR [rax], 63	; 0000003fH
  00978	48 ff 43 28	 inc	 QWORD PTR [rbx+40]

; 430  :         p->error = WFERR_UNMARSHALLABLE;

  0097c	c7 43 08 01 00
	00 00		 mov	 DWORD PTR [rbx+8], 1
  00983	e9 d6 01 00 00	 jmp	 $LN5@w_object
$LN2@w_object:

; 429  :         w_byte(TYPE_UNKNOWN, p);

  00988	48 8b d3	 mov	 rdx, rbx
  0098b	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00990	e8 00 00 00 00	 call	 w_more
$LN1@w_object:

; 430  :         p->error = WFERR_UNMARSHALLABLE;

  00995	c7 43 08 01 00
	00 00		 mov	 DWORD PTR [rbx+8], 1
  0099c	e9 bd 01 00 00	 jmp	 $LN5@w_object
$LN43@w_object:

; 366  :         PyObject *value, *it;
; 367  : 
; 368  :         if (PyObject_TypeCheck(v, &PySet_Type))

  009a1	48 3b ca	 cmp	 rcx, rdx
  009a4	74 36		 je	 SHORT $LN41@w_object
  009a6	e8 00 00 00 00	 call	 PyType_IsSubtype
  009ab	85 c0		 test	 eax, eax
  009ad	75 2d		 jne	 SHORT $LN41@w_object

; 370  :         else
; 371  :             w_byte(TYPE_FROZENSET, p);

  009af	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  009b2	48 85 d2	 test	 rdx, rdx
  009b5	74 0b		 je	 SHORT $LN35@w_object
  009b7	8d 48 3e	 lea	 ecx, QWORD PTR [rax+62]
  009ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  009c0	eb 4f		 jmp	 SHORT $LN37@w_object
$LN35@w_object:
  009c2	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  009c6	48 3b 43 30	 cmp	 rax, QWORD PTR [rbx+48]
  009ca	74 09		 je	 SHORT $LN33@w_object
  009cc	c6 00 3e	 mov	 BYTE PTR [rax], 62	; 0000003eH
  009cf	48 ff 43 28	 inc	 QWORD PTR [rbx+40]
  009d3	eb 3c		 jmp	 SHORT $LN37@w_object
$LN33@w_object:
  009d5	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  009da	eb 2d		 jmp	 SHORT $LN193@w_object
$LN41@w_object:

; 369  :             w_byte(TYPE_SET, p);

  009dc	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  009df	48 85 d2	 test	 rdx, rdx
  009e2	74 0d		 je	 SHORT $LN40@w_object
  009e4	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  009e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  009ef	eb 20		 jmp	 SHORT $LN37@w_object
$LN40@w_object:
  009f1	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  009f5	48 3b 43 30	 cmp	 rax, QWORD PTR [rbx+48]
  009f9	74 09		 je	 SHORT $LN38@w_object
  009fb	c6 00 3c	 mov	 BYTE PTR [rax], 60	; 0000003cH
  009fe	48 ff 43 28	 inc	 QWORD PTR [rbx+40]
  00a02	eb 0d		 jmp	 SHORT $LN37@w_object
$LN38@w_object:
  00a04	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
$LN193@w_object:
  00a09	48 8b d3	 mov	 rdx, rbx
  00a0c	e8 00 00 00 00	 call	 w_more
$LN37@w_object:

; 372  :         n = PyObject_Size(v);

  00a11	48 8b ce	 mov	 rcx, rsi
  00a14	e8 00 00 00 00	 call	 PyObject_Size

; 373  :         if (n == -1) {

  00a19	48 83 f8 ff	 cmp	 rax, -1

; 374  :             p->depth--;
; 375  :             p->error = WFERR_UNMARSHALLABLE;
; 376  :             return;

  00a1d	0f 84 72 ff ff
	ff		 je	 $LN1@w_object

; 377  :         }
; 378  :         W_SIZE(n, p);

  00a23	48 3d ff ff ff
	7f		 cmp	 rax, 2147483647		; 7fffffffH
  00a29	0f 8f 66 ff ff
	ff		 jg	 $LN1@w_object
  00a2f	48 8b d3	 mov	 rdx, rbx
  00a32	8b c8		 mov	 ecx, eax
  00a34	e8 00 00 00 00	 call	 w_long

; 379  :         it = PyObject_GetIter(v);

  00a39	48 8b ce	 mov	 rcx, rsi
  00a3c	e8 00 00 00 00	 call	 PyObject_GetIter
  00a41	48 8b f0	 mov	 rsi, rax

; 380  :         if (it == NULL) {

  00a44	48 85 c0	 test	 rax, rax

; 381  :             p->depth--;
; 382  :             p->error = WFERR_UNMARSHALLABLE;
; 383  :             return;

  00a47	0f 84 48 ff ff
	ff		 je	 $LN1@w_object

; 384  :         }
; 385  :         while ((value = PyIter_Next(it)) != NULL) {

  00a4d	48 8b c8	 mov	 rcx, rax
  00a50	e8 00 00 00 00	 call	 PyIter_Next
  00a55	48 8b f8	 mov	 rdi, rax
  00a58	48 85 c0	 test	 rax, rax
  00a5b	74 26		 je	 SHORT $LN24@w_object
  00a5d	0f 1f 00	 npad	 3
$LL25@w_object:

; 386  :             w_object(value, p);

  00a60	48 8b d3	 mov	 rdx, rbx
  00a63	48 8b cf	 mov	 rcx, rdi
  00a66	e8 00 00 00 00	 call	 w_object

; 387  :             Py_DECREF(value);

  00a6b	48 8b cf	 mov	 rcx, rdi
  00a6e	e8 00 00 00 00	 call	 _Py_DecRef
  00a73	48 8b ce	 mov	 rcx, rsi
  00a76	e8 00 00 00 00	 call	 PyIter_Next
  00a7b	48 8b f8	 mov	 rdi, rax
  00a7e	48 85 c0	 test	 rax, rax
  00a81	75 dd		 jne	 SHORT $LL25@w_object
$LN24@w_object:

; 388  :         }
; 389  :         Py_DECREF(it);

  00a83	48 8b ce	 mov	 rcx, rsi
  00a86	e8 00 00 00 00	 call	 _Py_DecRef

; 390  :         if (PyErr_Occurred()) {

  00a8b	e8 00 00 00 00	 call	 PyErr_Occurred
  00a90	48 85 c0	 test	 rax, rax
  00a93	0f 84 c5 00 00
	00		 je	 $LN5@w_object

; 391  :             p->depth--;
; 392  :             p->error = WFERR_UNMARSHALLABLE;

  00a99	c7 43 08 01 00
	00 00		 mov	 DWORD PTR [rbx+8], 1

; 393  :             return;

  00aa0	e9 b9 00 00 00	 jmp	 $LN5@w_object
$LN52@w_object:

; 354  :         Py_ssize_t pos;
; 355  :         PyObject *key, *value;
; 356  :         w_byte(TYPE_DICT, p);

  00aa5	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00aa8	48 85 d2	 test	 rdx, rdx
  00aab	74 0d		 je	 SHORT $LN51@w_object
  00aad	b9 7b 00 00 00	 mov	 ecx, 123		; 0000007bH
  00ab2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  00ab8	eb 20		 jmp	 SHORT $LN48@w_object
$LN51@w_object:
  00aba	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  00abe	48 3b 43 30	 cmp	 rax, QWORD PTR [rbx+48]
  00ac2	74 09		 je	 SHORT $LN49@w_object
  00ac4	c6 00 7b	 mov	 BYTE PTR [rax], 123	; 0000007bH
  00ac7	48 ff 43 28	 inc	 QWORD PTR [rbx+40]
  00acb	eb 0d		 jmp	 SHORT $LN48@w_object
$LN49@w_object:
  00acd	48 8b d3	 mov	 rdx, rbx
  00ad0	b9 7b 00 00 00	 mov	 ecx, 123		; 0000007bH
  00ad5	e8 00 00 00 00	 call	 w_more
$LN48@w_object:

; 357  :         /* This one is NULL object terminated! */
; 358  :         pos = 0;
; 359  :         while (PyDict_Next(v, &pos, &key, &value)) {

  00ada	4c 8d 8c 24 a8
	00 00 00	 lea	 r9, QWORD PTR value$20591[rsp]
  00ae2	4c 8d 84 24 b0
	00 00 00	 lea	 r8, QWORD PTR key$20590[rsp]
  00aea	48 8d 94 24 b8
	00 00 00	 lea	 rdx, QWORD PTR pos$20589[rsp]
  00af2	33 ed		 xor	 ebp, ebp
  00af4	48 8b ce	 mov	 rcx, rsi
  00af7	48 89 ac 24 b8
	00 00 00	 mov	 QWORD PTR pos$20589[rsp], rbp
  00aff	e8 00 00 00 00	 call	 PyDict_Next
  00b04	85 c0		 test	 eax, eax
  00b06	74 4c		 je	 SHORT $LN46@w_object
  00b08	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL47@w_object:

; 360  :             w_object(key, p);

  00b10	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR key$20590[rsp]
  00b18	48 8b d3	 mov	 rdx, rbx
  00b1b	e8 00 00 00 00	 call	 w_object

; 361  :             w_object(value, p);

  00b20	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR value$20591[rsp]
  00b28	48 8b d3	 mov	 rdx, rbx
  00b2b	e8 00 00 00 00	 call	 w_object
  00b30	4c 8d 8c 24 a8
	00 00 00	 lea	 r9, QWORD PTR value$20591[rsp]
  00b38	4c 8d 84 24 b0
	00 00 00	 lea	 r8, QWORD PTR key$20590[rsp]
  00b40	48 8d 94 24 b8
	00 00 00	 lea	 rdx, QWORD PTR pos$20589[rsp]
  00b48	48 8b ce	 mov	 rcx, rsi
  00b4b	e8 00 00 00 00	 call	 PyDict_Next
  00b50	85 c0		 test	 eax, eax
  00b52	75 bc		 jne	 SHORT $LL47@w_object
$LN46@w_object:

; 362  :         }
; 363  :         w_object((PyObject *)NULL, p);

  00b54	33 c9		 xor	 ecx, ecx
$LN192@w_object:
  00b56	48 8b d3	 mov	 rdx, rbx
  00b59	e8 00 00 00 00	 call	 w_object
$LN5@w_object:

; 431  :     }
; 432  :     p->depth--;

  00b5e	ff 4b 0c	 dec	 DWORD PTR [rbx+12]
$LN181@w_object:

; 433  : }

  00b61	48 8b 9c 24 a0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+160]
  00b69	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  00b70	5f		 pop	 rdi
  00b71	5e		 pop	 rsi
  00b72	5d		 pop	 rbp
  00b73	c3		 ret	 0
w_object ENDP
_TEXT	ENDS
PUBLIC	PyMarshal_WriteLongToFile
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyMarshal_WriteLongToFile DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$PyMarshal_WriteLongToFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMarshal_WriteLongToFile DD 010401H
	DD	0c204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyMarshal_WriteLongToFile
_TEXT	SEGMENT
wf$ = 32
x$ = 112
fp$ = 120
version$ = 128
PyMarshal_WriteLongToFile PROC				; COMDAT

; 438  : {

$LN3:
  00000	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 439  :     WFILE wf;
; 440  :     wf.fp = fp;

  00004	48 89 54 24 20	 mov	 QWORD PTR wf$[rsp], rdx

; 441  :     wf.error = WFERR_OK;

  00009	33 c0		 xor	 eax, eax

; 442  :     wf.depth = 0;
; 443  :     wf.version = version;
; 444  :     w_long(x, &wf);

  0000b	48 8d 54 24 20	 lea	 rdx, QWORD PTR wf$[rsp]
  00010	48 89 44 24 28	 mov	 QWORD PTR wf$[rsp+8], rax
  00015	44 89 44 24 58	 mov	 DWORD PTR wf$[rsp+56], r8d
  0001a	e8 00 00 00 00	 call	 w_long

; 445  : }

  0001f	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00023	c3		 ret	 0
PyMarshal_WriteLongToFile ENDP
_TEXT	ENDS
PUBLIC	PyMarshal_WriteObjectToFile
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyMarshal_WriteObjectToFile DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$PyMarshal_WriteObjectToFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMarshal_WriteObjectToFile DD 010401H
	DD	0c204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyMarshal_WriteObjectToFile
_TEXT	SEGMENT
wf$ = 32
x$ = 112
fp$ = 120
version$ = 128
PyMarshal_WriteObjectToFile PROC			; COMDAT

; 449  : {

$LN3:
  00000	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 450  :     WFILE wf;
; 451  :     wf.fp = fp;

  00004	48 89 54 24 20	 mov	 QWORD PTR wf$[rsp], rdx

; 452  :     wf.error = WFERR_OK;

  00009	33 c0		 xor	 eax, eax

; 453  :     wf.depth = 0;
; 454  :     wf.version = version;
; 455  :     w_object(x, &wf);

  0000b	48 8d 54 24 20	 lea	 rdx, QWORD PTR wf$[rsp]
  00010	48 89 44 24 28	 mov	 QWORD PTR wf$[rsp+8], rax
  00015	44 89 44 24 58	 mov	 DWORD PTR wf$[rsp+56], r8d
  0001a	e8 00 00 00 00	 call	 w_object

; 456  : }

  0001f	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00023	c3		 ret	 0
PyMarshal_WriteObjectToFile ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@JGNOHBEK@EOF?5read?5where?5not?5expected?$AA@ ; `string'
PUBLIC	??_C@_0EB@GMKHCBKL@read?$CI?$CJ?5returned?5too?5much?5data?3?5?$CF@ ; `string'
PUBLIC	??_C@_0CH@JEOLDDLK@f?4read?$CI?$CJ?5returned?5not?5bytes?5but?5@ ; `string'
PUBLIC	??_C@_01EFFIKLCJ@n?$AA@				; `string'
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_EOFError:QWORD
EXTRN	PyExc_ValueError:QWORD
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	_PyObject_CallMethodId_SizeT:PROC
EXTRN	__imp_fread:PROC
EXTRN	memcpy:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$r_string DD imagerel r_string
	DD	imagerel r_string+10
	DD	imagerel $unwind$r_string
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$r_string DD imagerel r_string+10
	DD	imagerel r_string+289
	DD	imagerel $chain$1$r_string
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$r_string DD imagerel r_string+289
	DD	imagerel r_string+327
	DD	imagerel $chain$2$r_string
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$r_string DD 021H
	DD	imagerel r_string
	DD	imagerel r_string+10
	DD	imagerel $unwind$r_string
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$r_string DD 041121H
	DD	076411H
	DD	065405H
	DD	imagerel r_string
	DD	imagerel r_string+10
	DD	imagerel $unwind$r_string
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$r_string DD 040a01H
	DD	08340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0BM@JGNOHBEK@EOF?5read?5where?5not?5expected?$AA@
CONST	SEGMENT
??_C@_0BM@JGNOHBEK@EOF?5read?5where?5not?5expected?$AA@ DB 'EOF read wher'
	DB	'e not expected', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@GMKHCBKL@read?$CI?$CJ?5returned?5too?5much?5data?3?5?$CF@
CONST	SEGMENT
??_C@_0EB@GMKHCBKL@read?$CI?$CJ?5returned?5too?5much?5data?3?5?$CF@ DB 'r'
	DB	'ead() returned too much data: %zd bytes requested, %zd return'
	DB	'ed', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@JEOLDDLK@f?4read?$CI?$CJ?5returned?5not?5bytes?5but?5@
CONST	SEGMENT
??_C@_0CH@JEOLDDLK@f?4read?$CI?$CJ?5returned?5not?5bytes?5but?5@ DB 'f.re'
	DB	'ad() returned not bytes but %.100s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01EFFIKLCJ@n?$AA@
CONST	SEGMENT
??_C@_01EFFIKLCJ@n?$AA@ DB 'n', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT r_string
_TEXT	SEGMENT
s$ = 48
n$ = 56
p$ = 64
r_string PROC						; COMDAT

; 464  : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp
  0000f	48 8b e9	 mov	 rbp, rcx

; 465  :     char *ptr;
; 466  :     Py_ssize_t read, left;
; 467  : 
; 468  :     if (!p->readable) {

  00012	49 8b 48 10	 mov	 rcx, QWORD PTR [r8+16]
  00016	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  0001b	48 8b fa	 mov	 rdi, rdx
  0001e	49 8b f0	 mov	 rsi, r8
  00021	48 85 c9	 test	 rcx, rcx
  00024	75 47		 jne	 SHORT $LN11@r_string

; 469  :         if (p->fp != NULL)

  00026	4d 8b 08	 mov	 r9, QWORD PTR [r8]

; 470  :             /* The result fits into int because it must be <=n. */
; 471  :             read = fread(s, 1, n, p->fp);

  00029	48 8b cd	 mov	 rcx, rbp
  0002c	4d 85 c9	 test	 r9, r9
  0002f	74 16		 je	 SHORT $LN10@r_string
  00031	4c 8b c2	 mov	 r8, rdx
  00034	ba 01 00 00 00	 mov	 edx, 1
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fread
  0003f	48 8b d8	 mov	 rbx, rax

; 472  :         else {

  00042	e9 c6 00 00 00	 jmp	 $LN7@r_string
$LN10@r_string:

; 473  :             left = p->end - p->ptr;

  00047	49 8b 50 28	 mov	 rdx, QWORD PTR [r8+40]
  0004b	49 8b 40 30	 mov	 rax, QWORD PTR [r8+48]

; 474  :             read = (left < n) ? left : n;

  0004f	48 8b df	 mov	 rbx, rdi
  00052	48 2b c2	 sub	 rax, rdx
  00055	48 3b c7	 cmp	 rax, rdi
  00058	48 0f 4c d8	 cmovl	 rbx, rax

; 475  :             memcpy(s, p->ptr, read);

  0005c	4c 8b c3	 mov	 r8, rbx
  0005f	e8 00 00 00 00	 call	 memcpy

; 476  :             p->ptr += read;

  00064	48 01 5e 28	 add	 QWORD PTR [rsi+40], rbx

; 477  :         }
; 478  :     }
; 479  :     else {

  00068	e9 a0 00 00 00	 jmp	 $LN7@r_string
$LN11@r_string:

; 480  :         _Py_IDENTIFIER(read);
; 481  : 
; 482  :         PyObject *data = _PyObject_CallMethodId(p->readable, &PyId_read, "n", n);

  0006d	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  00074	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0007d	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_read@?4??r_string@@9@9
  00082	4a 03 14 c0	 add	 rdx, QWORD PTR [rax+r8*8]
  00086	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01EFFIKLCJ@n?$AA@
  0008d	4c 8b cf	 mov	 r9, rdi
  00090	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT

; 483  :         read = 0;

  00095	33 db		 xor	 ebx, ebx
  00097	48 8b f0	 mov	 rsi, rax

; 484  :         if (data != NULL) {

  0009a	48 85 c0	 test	 rax, rax
  0009d	74 6e		 je	 SHORT $LN7@r_string

; 485  :             if (!PyBytes_Check(data)) {

  0009f	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  000a3	41 f7 80 00 01
	00 00 00 00 00
	08		 test	 DWORD PTR [r8+256], 134217728 ; 08000000H
  000ae	75 19		 jne	 SHORT $LN6@r_string

; 486  :                 PyErr_Format(PyExc_TypeError,
; 487  :                              "f.read() returned not bytes but %.100s",
; 488  :                              data->ob_type->tp_name);

  000b0	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  000b4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@JEOLDDLK@f?4read?$CI?$CJ?5returned?5not?5bytes?5but?5@
  000c2	e8 00 00 00 00	 call	 PyErr_Format

; 489  :             }
; 490  :             else {

  000c7	eb 3c		 jmp	 SHORT $LN2@r_string
$LN6@r_string:

; 491  :                 read = PyBytes_GET_SIZE(data);

  000c9	48 8b 58 60	 mov	 rbx, QWORD PTR [rax+96]

; 492  :                 if (read > 0) {

  000cd	48 85 db	 test	 rbx, rbx
  000d0	7e 33		 jle	 SHORT $LN2@r_string

; 493  :                     if (read > n) {

  000d2	48 3b df	 cmp	 rbx, rdi
  000d5	7e 1f		 jle	 SHORT $LN3@r_string

; 494  :                         PyErr_Format(PyExc_ValueError,
; 495  :                                     "read() returned too much data: "
; 496  :                                     "%zd bytes requested, %zd returned",
; 497  :                                     n, read);

  000d7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EB@GMKHCBKL@read?$CI?$CJ?5returned?5too?5much?5data?3?5?$CF@
  000e5	4c 8b cb	 mov	 r9, rbx
  000e8	4c 8b c7	 mov	 r8, rdi
  000eb	e8 00 00 00 00	 call	 PyErr_Format

; 498  :                         read = -1;

  000f0	48 83 cb ff	 or	 rbx, -1

; 499  :                     }
; 500  :                     else {

  000f4	eb 0f		 jmp	 SHORT $LN2@r_string
$LN3@r_string:

; 501  :                         ptr = PyBytes_AS_STRING(data);

  000f6	48 8d 50 78	 lea	 rdx, QWORD PTR [rax+120]

; 502  :                         memcpy(s, ptr, read);

  000fa	4c 8b c3	 mov	 r8, rbx
  000fd	48 8b cd	 mov	 rcx, rbp
  00100	e8 00 00 00 00	 call	 memcpy
$LN2@r_string:

; 503  :                     }
; 504  :                 }
; 505  :             }
; 506  :             Py_DECREF(data);

  00105	48 8b ce	 mov	 rcx, rsi
  00108	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@r_string:

; 507  :         }
; 508  :     }
; 509  :     if (!PyErr_Occurred() && (read < n)) {

  0010d	e8 00 00 00 00	 call	 PyErr_Occurred
  00112	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00117	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
  0011c	48 85 c0	 test	 rax, rax
  0011f	75 18		 jne	 SHORT $LN14@r_string
  00121	48 3b df	 cmp	 rbx, rdi
  00124	7d 13		 jge	 SHORT $LN14@r_string

; 510  :         PyErr_SetString(PyExc_EOFError, "EOF read where not expected");

  00126	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_EOFError
  0012d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@JGNOHBEK@EOF?5read?5where?5not?5expected?$AA@
  00134	e8 00 00 00 00	 call	 PyErr_SetString
$LN14@r_string:

; 511  :     }
; 512  :     return read;

  00139	48 8b c3	 mov	 rax, rbx

; 513  : }

  0013c	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00141	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00145	5f		 pop	 rdi
  00146	c3		 ret	 0
r_string ENDP
_TEXT	ENDS
EXTRN	__imp_getc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$r_byte DD imagerel r_byte
	DD	imagerel r_byte+96
	DD	imagerel $unwind$r_byte
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$r_byte DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT r_byte
_TEXT	SEGMENT
ch$ = 48
p$ = 48
r_byte	PROC						; COMDAT

; 518  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 519  :     int c = EOF;
; 520  :     unsigned char ch;
; 521  :     Py_ssize_t n;
; 522  : 
; 523  :     if (!p->readable)

  00004	48 83 79 10 00	 cmp	 QWORD PTR [rcx+16], 0
  00009	4c 8b c1	 mov	 r8, rcx
  0000c	75 2c		 jne	 SHORT $LN3@r_byte

; 524  :         c = p->fp ? getc(p->fp) : rs_byte(p);

  0000e	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00011	48 85 c9	 test	 rcx, rcx
  00014	74 0b		 je	 SHORT $LN8@r_byte
  00016	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc

; 531  : }

  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	c3		 ret	 0
$LN8@r_byte:

; 524  :         c = p->fp ? getc(p->fp) : rs_byte(p);

  00021	49 8b 48 28	 mov	 rcx, QWORD PTR [r8+40]
  00025	49 3b 48 30	 cmp	 rcx, QWORD PTR [r8+48]
  00029	73 2d		 jae	 SHORT $LN10@r_byte
  0002b	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  0002e	48 ff c1	 inc	 rcx
  00031	49 89 48 28	 mov	 QWORD PTR [r8+40], rcx

; 531  : }

  00035	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00039	c3		 ret	 0
$LN3@r_byte:

; 525  :     else {
; 526  :         n = r_string((char *) &ch, 1, p);

  0003a	48 8d 4c 24 30	 lea	 rcx, QWORD PTR ch$[rsp]
  0003f	ba 01 00 00 00	 mov	 edx, 1
  00044	e8 00 00 00 00	 call	 r_string

; 527  :         if (n > 0)

  00049	48 85 c0	 test	 rax, rax
  0004c	7e 0a		 jle	 SHORT $LN10@r_byte

; 528  :             c = ch;

  0004e	0f b6 44 24 30	 movzx	 eax, BYTE PTR ch$[rsp]

; 531  : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	c3		 ret	 0
$LN10@r_byte:

; 529  :     }
; 530  :     return c;

  00058	83 c8 ff	 or	 eax, -1

; 531  : }

  0005b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005f	c3		 ret	 0
r_byte	ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$r_short DD imagerel r_short
	DD	imagerel r_short+69
	DD	imagerel $unwind$r_short
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$r_short DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT r_short
_TEXT	SEGMENT
p$ = 48
buffer$ = 56
r_short	PROC						; COMDAT

; 535  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 536  :     register short x;
; 537  :     unsigned char buffer[2];
; 538  : 
; 539  :     r_string((char *) buffer, 2, p);

  00004	4c 8b c1	 mov	 r8, rcx
  00007	48 8d 4c 24 38	 lea	 rcx, QWORD PTR buffer$[rsp]
  0000c	ba 02 00 00 00	 mov	 edx, 2
  00011	e8 00 00 00 00	 call	 r_string

; 540  :     x = buffer[0];
; 541  :     x |= buffer[1] << 8;

  00016	0f b6 44 24 38	 movzx	 eax, BYTE PTR buffer$[rsp]
  0001b	44 0f b6 5c 24
	39		 movzx	 r11d, BYTE PTR buffer$[rsp+1]
  00021	66 41 c1 e3 08	 shl	 r11w, 8

; 542  :     /* Sign-extension, in case short greater than 16 bits */
; 543  :     x |= -(x & 0x8000);

  00026	b9 00 80 ff ff	 mov	 ecx, -32768		; ffffffffffff8000H
  0002b	66 44 0b d8	 or	 r11w, ax
  0002f	41 0f b7 c3	 movzx	 eax, r11w
  00033	66 23 c1	 and	 ax, cx

; 544  :     return x;

  00036	41 0f bf cb	 movsx	 ecx, r11w
  0003a	66 f7 d8	 neg	 ax
  0003d	98		 cwde
  0003e	0b c1		 or	 eax, ecx

; 545  : }

  00040	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00044	c3		 ret	 0
r_short	ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$r_long DD imagerel r_long
	DD	imagerel r_long+62
	DD	imagerel $unwind$r_long
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$r_long DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT r_long
_TEXT	SEGMENT
p$ = 48
buffer$ = 56
r_long	PROC						; COMDAT

; 549  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 550  :     register long x;
; 551  :     unsigned char buffer[4];
; 552  : 
; 553  :     r_string((char *) buffer, 4, p);

  00004	4c 8b c1	 mov	 r8, rcx
  00007	48 8d 4c 24 38	 lea	 rcx, QWORD PTR buffer$[rsp]
  0000c	ba 04 00 00 00	 mov	 edx, 4
  00011	e8 00 00 00 00	 call	 r_string

; 554  :     x = buffer[0];
; 555  :     x |= (long)buffer[1] << 8;
; 556  :     x |= (long)buffer[2] << 16;
; 557  :     x |= (long)buffer[3] << 24;
; 558  : #if SIZEOF_LONG > 4
; 559  :     /* Sign extension for 64-bit machines */
; 560  :     x |= -(x & 0x80000000L);
; 561  : #endif
; 562  :     return x;

  00016	0f b6 4c 24 3a	 movzx	 ecx, BYTE PTR buffer$[rsp+2]
  0001b	0f b6 44 24 3b	 movzx	 eax, BYTE PTR buffer$[rsp+3]
  00020	c1 e0 08	 shl	 eax, 8
  00023	0b c1		 or	 eax, ecx
  00025	0f b6 4c 24 39	 movzx	 ecx, BYTE PTR buffer$[rsp+1]
  0002a	c1 e0 08	 shl	 eax, 8
  0002d	0b c1		 or	 eax, ecx
  0002f	0f b6 4c 24 38	 movzx	 ecx, BYTE PTR buffer$[rsp]
  00034	c1 e0 08	 shl	 eax, 8
  00037	0b c1		 or	 eax, ecx

; 563  : }

  00039	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003d	c3		 ret	 0
r_long	ENDP
_TEXT	ENDS
EXTRN	_PyLong_FromByteArray:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$r_long64 DD imagerel r_long64
	DD	imagerel r_long64+94
	DD	imagerel $unwind$r_long64
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$r_long64 DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT r_long64
_TEXT	SEGMENT
p$ = 48
buf$20758 = 56
r_long64 PROC						; COMDAT

; 574  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b d9	 mov	 rbx, rcx

; 575  :     PyObject *result = NULL;
; 576  :     long lo4 = r_long(p);

  0000d	e8 00 00 00 00	 call	 r_long

; 577  :     long hi4 = r_long(p);

  00012	48 8b cb	 mov	 rcx, rbx
  00015	8b f8		 mov	 edi, eax
  00017	e8 00 00 00 00	 call	 r_long
  0001c	8b d8		 mov	 ebx, eax

; 578  : 
; 579  :     if (!PyErr_Occurred()) {

  0001e	e8 00 00 00 00	 call	 PyErr_Occurred
  00023	48 85 c0	 test	 rax, rax
  00026	75 29		 jne	 SHORT $LN6@r_long64

; 580  : #if SIZEOF_LONG > 4
; 581  :         long x = (hi4 << 32) | (lo4 & 0xFFFFFFFFL);
; 582  :         result = PyLong_FromLong(x);
; 583  : #else
; 584  :         unsigned char buf[8];
; 585  :         int one = 1;
; 586  :         int is_little_endian = (int)*(char*)&one;
; 587  :         if (is_little_endian) {
; 588  :             memcpy(buf, &lo4, 4);
; 589  :             memcpy(buf+4, &hi4, 4);
; 590  :         }
; 591  :         else {
; 592  :             memcpy(buf, &hi4, 4);
; 593  :             memcpy(buf+4, &lo4, 4);
; 594  :         }
; 595  :         result = _PyLong_FromByteArray(buf, 8, is_little_endian, 1);

  00028	41 b9 01 00 00
	00		 mov	 r9d, 1
  0002e	8d 50 08	 lea	 edx, QWORD PTR [rax+8]
  00031	48 8d 4c 24 38	 lea	 rcx, QWORD PTR buf$20758[rsp]
  00036	45 8b c1	 mov	 r8d, r9d
  00039	89 7c 24 38	 mov	 DWORD PTR buf$20758[rsp], edi
  0003d	89 5c 24 3c	 mov	 DWORD PTR buf$20758[rsp+4], ebx
  00041	e8 00 00 00 00	 call	 _PyLong_FromByteArray

; 599  : }

  00046	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5f		 pop	 rdi
  00050	c3		 ret	 0
$LN6@r_long64:

; 596  : #endif
; 597  :     }
; 598  :     return result;

  00051	33 c0		 xor	 eax, eax

; 599  : }

  00053	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00058	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005c	5f		 pop	 rdi
  0005d	c3		 ret	 0
r_long64 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@EOJBGKLJ@bad?5marshal?5data?5?$CIlong?5size?5out?5@ ; `string'
PUBLIC	??_C@_0CO@MHBIECJI@bad?5marshal?5data?5?$CIdigit?5out?5of?5r@ ; `string'
PUBLIC	??_C@_0CK@EOGHLNCL@bad?5marshal?5data?5?$CIunnormalized?5l@ ; `string'
EXTRN	_PyLong_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$r_PyLong DD imagerel r_PyLong
	DD	imagerel r_PyLong+69
	DD	imagerel $unwind$r_PyLong
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$r_PyLong DD imagerel r_PyLong+69
	DD	imagerel r_PyLong+149
	DD	imagerel $chain$2$r_PyLong
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$r_PyLong DD imagerel r_PyLong+149
	DD	imagerel r_PyLong+418
	DD	imagerel $chain$5$r_PyLong
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$r_PyLong DD imagerel r_PyLong+418
	DD	imagerel r_PyLong+441
	DD	imagerel $chain$6$r_PyLong
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$r_PyLong DD imagerel r_PyLong+441
	DD	imagerel r_PyLong+473
	DD	imagerel $chain$8$r_PyLong
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$r_PyLong DD imagerel r_PyLong+473
	DD	imagerel r_PyLong+502
	DD	imagerel $chain$9$r_PyLong
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$r_PyLong DD 021H
	DD	imagerel r_PyLong
	DD	imagerel r_PyLong+69
	DD	imagerel $unwind$r_PyLong
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$r_PyLong DD 0c0021H
	DD	04f400H
	DD	05e400H
	DD	06c400H
	DD	077400H
	DD	086400H
	DD	0f5400H
	DD	imagerel r_PyLong
	DD	imagerel r_PyLong+69
	DD	imagerel $unwind$r_PyLong
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$r_PyLong DD 021H
	DD	imagerel r_PyLong+69
	DD	imagerel r_PyLong+149
	DD	imagerel $chain$2$r_PyLong
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$r_PyLong DD 061c21H
	DD	08641cH
	DD	05e40cH
	DD	06c405H
	DD	imagerel r_PyLong+69
	DD	imagerel r_PyLong+149
	DD	imagerel $chain$2$r_PyLong
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$r_PyLong DD 061221H
	DD	04f412H
	DD	07740aH
	DD	0f5405H
	DD	imagerel r_PyLong
	DD	imagerel r_PyLong+69
	DD	imagerel $unwind$r_PyLong
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$r_PyLong DD 030c01H
	DD	0d008820cH
	DD	03006H
xdata	ENDS
;	COMDAT ??_C@_0CK@EOJBGKLJ@bad?5marshal?5data?5?$CIlong?5size?5out?5@
CONST	SEGMENT
??_C@_0CK@EOJBGKLJ@bad?5marshal?5data?5?$CIlong?5size?5out?5@ DB 'bad mar'
	DB	'shal data (long size out of range)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@MHBIECJI@bad?5marshal?5data?5?$CIdigit?5out?5of?5r@
CONST	SEGMENT
??_C@_0CO@MHBIECJI@bad?5marshal?5data?5?$CIdigit?5out?5of?5r@ DB 'bad mar'
	DB	'shal data (digit out of range in long)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@EOGHLNCL@bad?5marshal?5data?5?$CIunnormalized?5l@
CONST	SEGMENT
??_C@_0CK@EOGHLNCL@bad?5marshal?5data?5?$CIunnormalized?5l@ DB 'bad marsh'
	DB	'al data (unnormalized long data)', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT r_PyLong
_TEXT	SEGMENT
p$ = 96
$T21888 = 104
tv325 = 112
r_PyLong PROC						; COMDAT

; 603  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	53		 push	 rbx
  00006	41 55		 push	 r13
  00008	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000c	4c 8b e9	 mov	 r13, rcx

; 604  :     PyLongObject *ob;
; 605  :     long n, size, i;
; 606  :     int j, md, shorts_in_top_digit;
; 607  :     digit d;
; 608  : 
; 609  :     n = r_long(p);

  0000f	e8 00 00 00 00	 call	 r_long
  00014	8b d8		 mov	 ebx, eax

; 610  :     if (PyErr_Occurred())

  00016	e8 00 00 00 00	 call	 PyErr_Occurred
  0001b	48 85 c0	 test	 rax, rax

; 611  :         return NULL;

  0001e	0f 85 c8 01 00
	00		 jne	 $LN47@r_PyLong

; 612  :     if (n == 0)

  00024	85 db		 test	 ebx, ebx
  00026	75 0e		 jne	 SHORT $LN21@r_PyLong

; 613  :         return (PyObject *)_PyLong_New(0);

  00028	33 c9		 xor	 ecx, ecx

; 668  : }

  0002a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0002e	41 5d		 pop	 r13
  00030	5b		 pop	 rbx
  00031	e9 00 00 00 00	 jmp	 _PyLong_New
$LN21@r_PyLong:

; 614  :     if (n < -SIZE32_MAX || n > SIZE32_MAX) {

  00036	8d 83 ff ff ff
	7f		 lea	 eax, DWORD PTR [rbx+2147483647]
  0003c	83 f8 fe	 cmp	 eax, -2			; fffffffeH
  0003f	0f 87 94 01 00
	00		 ja	 $LN19@r_PyLong

; 618  :     }
; 619  : 
; 620  :     size = 1 + (ABS(n) - 1) / PyLong_MARSHAL_RATIO;

  00045	48 89 6c 24 78	 mov	 QWORD PTR [rsp+120], rbp
  0004a	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  0004f	8b c3		 mov	 eax, ebx
  00051	99		 cdq
  00052	4c 89 7c 24 20	 mov	 QWORD PTR [rsp+32], r15
  00057	33 c2		 xor	 eax, edx
  00059	2b c2		 sub	 eax, edx
  0005b	8d 68 ff	 lea	 ebp, DWORD PTR [rax-1]
  0005e	8b c5		 mov	 eax, ebp
  00060	99		 cdq
  00061	2b c2		 sub	 eax, edx
  00063	d1 f8		 sar	 eax, 1

; 621  :     shorts_in_top_digit = 1 + (ABS(n) - 1) % PyLong_MARSHAL_RATIO;

  00065	81 e5 01 00 00
	80		 and	 ebp, -2147483647	; ffffffff80000001H
  0006b	8d 78 01	 lea	 edi, DWORD PTR [rax+1]
  0006e	7d 07		 jge	 SHORT $LN38@r_PyLong
  00070	ff cd		 dec	 ebp
  00072	83 cd fe	 or	 ebp, -2
  00075	ff c5		 inc	 ebp
$LN38@r_PyLong:

; 622  :     ob = _PyLong_New(size);

  00077	48 63 c7	 movsxd	 rax, edi
  0007a	ff c5		 inc	 ebp
  0007c	48 8b c8	 mov	 rcx, rax
  0007f	48 89 44 24 70	 mov	 QWORD PTR tv325[rsp], rax
  00084	e8 00 00 00 00	 call	 _PyLong_New
  00089	4c 8b f8	 mov	 r15, rax

; 623  :     if (ob == NULL)

  0008c	48 85 c0	 test	 rax, rax
  0008f	0f 84 0d 01 00
	00		 je	 $LN42@r_PyLong
$LN18@r_PyLong:
  00095	4c 89 64 24 30	 mov	 QWORD PTR [rsp+48], r12

; 624  :         return NULL;
; 625  :     Py_SIZE(ob) = n > 0 ? size : -size;

  0009a	8b c7		 mov	 eax, edi
  0009c	4c 89 74 24 28	 mov	 QWORD PTR [rsp+40], r14
  000a1	85 db		 test	 ebx, ebx
  000a3	7f 02		 jg	 SHORT $LN26@r_PyLong
  000a5	f7 d8		 neg	 eax
$LN26@r_PyLong:
  000a7	48 98		 cdqe

; 626  : 
; 627  :     for (i = 0; i < size-1; i++) {

  000a9	45 33 e4	 xor	 r12d, r12d
  000ac	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  000b1	49 89 47 60	 mov	 QWORD PTR [r15+96], rax
  000b5	8d 47 ff	 lea	 eax, DWORD PTR [rdi-1]
  000b8	45 8b f4	 mov	 r14d, r12d
  000bb	89 44 24 68	 mov	 DWORD PTR $T21888[rsp], eax
  000bf	85 c0		 test	 eax, eax
  000c1	7e 5a		 jle	 SHORT $LN15@r_PyLong

; 624  :         return NULL;
; 625  :     Py_SIZE(ob) = n > 0 ? size : -size;

  000c3	4d 8d 6f 70	 lea	 r13, QWORD PTR [r15+112]
  000c7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL17@r_PyLong:

; 628  :         d = 0;

  000d0	41 8b f4	 mov	 esi, r12d
  000d3	41 8b fc	 mov	 edi, r12d
$LL14@r_PyLong:

; 629  :         for (j=0; j < PyLong_MARSHAL_RATIO; j++) {
; 630  :             md = r_short(p);

  000d6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR p$[rsp]
  000db	e8 00 00 00 00	 call	 r_short
  000e0	8b d8		 mov	 ebx, eax

; 631  :             if (PyErr_Occurred())

  000e2	e8 00 00 00 00	 call	 PyErr_Occurred
  000e7	48 85 c0	 test	 rax, rax
  000ea	75 1a		 jne	 SHORT $LN30@r_PyLong

; 632  :                 break;
; 633  :             if (md < 0 || md > PyLong_MARSHAL_BASE)

  000ec	81 fb 00 80 00
	00		 cmp	 ebx, 32768		; 00008000H
  000f2	0f 87 c1 00 00
	00		 ja	 $bad_digit$20799

; 634  :                 goto bad_digit;
; 635  :             d += (digit)md << j*PyLong_MARSHAL_SHIFT;

  000f8	8b cf		 mov	 ecx, edi
  000fa	83 c7 0f	 add	 edi, 15
  000fd	d3 e3		 shl	 ebx, cl
  000ff	03 f3		 add	 esi, ebx
  00101	83 ff 1e	 cmp	 edi, 30
  00104	7c d0		 jl	 SHORT $LL14@r_PyLong
$LN30@r_PyLong:

; 626  : 
; 627  :     for (i = 0; i < size-1; i++) {

  00106	41 ff c6	 inc	 r14d

; 636  :         }
; 637  :         ob->ob_digit[i] = d;

  00109	41 89 75 00	 mov	 DWORD PTR [r13], esi
  0010d	49 83 c5 04	 add	 r13, 4
  00111	44 3b 74 24 68	 cmp	 r14d, DWORD PTR $T21888[rsp]
  00116	7c b8		 jl	 SHORT $LL17@r_PyLong
  00118	4c 8b 6c 24 60	 mov	 r13, QWORD PTR p$[rsp]
$LN15@r_PyLong:

; 640  :     for (j=0; j < shorts_in_top_digit; j++) {

  0011d	41 8b fc	 mov	 edi, r12d
  00120	85 ed		 test	 ebp, ebp
  00122	7e 3e		 jle	 SHORT $LN6@r_PyLong

; 638  :     }
; 639  :     d = 0;

  00124	41 8b f4	 mov	 esi, r12d
$LL8@r_PyLong:

; 641  :         md = r_short(p);

  00127	49 8b cd	 mov	 rcx, r13
  0012a	e8 00 00 00 00	 call	 r_short
  0012f	8b d8		 mov	 ebx, eax

; 642  :         if (PyErr_Occurred())

  00131	e8 00 00 00 00	 call	 PyErr_Occurred
  00136	48 85 c0	 test	 rax, rax
  00139	75 27		 jne	 SHORT $LN6@r_PyLong

; 643  :             break;
; 644  :         if (md < 0 || md > PyLong_MARSHAL_BASE)

  0013b	85 db		 test	 ebx, ebx
  0013d	78 7a		 js	 SHORT $bad_digit$20799
  0013f	81 fb 00 80 00
	00		 cmp	 ebx, 32768		; 00008000H
  00145	7f 72		 jg	 SHORT $bad_digit$20799

; 645  :             goto bad_digit;
; 646  :         /* topmost marshal digit should be nonzero */
; 647  :         if (md == 0 && j == shorts_in_top_digit - 1) {

  00147	85 db		 test	 ebx, ebx
  00149	75 07		 jne	 SHORT $LN2@r_PyLong
  0014b	8d 45 ff	 lea	 eax, DWORD PTR [rbp-1]
  0014e	3b f8		 cmp	 edi, eax
  00150	74 24		 je	 SHORT $LN34@r_PyLong
$LN2@r_PyLong:

; 651  :             return NULL;
; 652  :         }
; 653  :         d += (digit)md << j*PyLong_MARSHAL_SHIFT;

  00152	8b ce		 mov	 ecx, esi
  00154	ff c7		 inc	 edi
  00156	83 c6 0f	 add	 esi, 15
  00159	d3 e3		 shl	 ebx, cl
  0015b	44 03 e3	 add	 r12d, ebx
  0015e	3b fd		 cmp	 edi, ebp
  00160	7c c5		 jl	 SHORT $LL8@r_PyLong
$LN6@r_PyLong:

; 654  :     }
; 655  :     if (PyErr_Occurred()) {

  00162	e8 00 00 00 00	 call	 PyErr_Occurred
  00167	48 85 c0	 test	 rax, rax
  0016a	74 5e		 je	 SHORT $LN1@r_PyLong

; 656  :         Py_DECREF(ob);

  0016c	49 8b cf	 mov	 rcx, r15
  0016f	e8 00 00 00 00	 call	 _Py_DecRef

; 657  :         return NULL;

  00174	eb 1b		 jmp	 SHORT $LN46@r_PyLong
$LN34@r_PyLong:

; 648  :             Py_DECREF(ob);

  00176	49 8b cf	 mov	 rcx, r15
  00179	e8 00 00 00 00	 call	 _Py_DecRef

; 649  :             PyErr_SetString(PyExc_ValueError,
; 650  :                 "bad marshal data (unnormalized long data)");

  0017e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@EOGHLNCL@bad?5marshal?5data?5?$CIunnormalized?5l@
$LN48@r_PyLong:
  00185	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0018c	e8 00 00 00 00	 call	 PyErr_SetString
$LN46@r_PyLong:

; 667  :     return NULL;

  00191	33 c0		 xor	 eax, eax
$LN45@r_PyLong:
  00193	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00198	4c 8b 64 24 30	 mov	 r12, QWORD PTR [rsp+48]
  0019d	4c 8b 74 24 28	 mov	 r14, QWORD PTR [rsp+40]
$LN42@r_PyLong:
  001a2	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]
  001a7	48 8b 6c 24 78	 mov	 rbp, QWORD PTR [rsp+120]
  001ac	4c 8b 7c 24 20	 mov	 r15, QWORD PTR [rsp+32]

; 668  : }

  001b1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001b5	41 5d		 pop	 r13
  001b7	5b		 pop	 rbx
  001b8	c3		 ret	 0
$bad_digit$20799:

; 663  :   bad_digit:
; 664  :     Py_DECREF(ob);

  001b9	49 8b cf	 mov	 rcx, r15
  001bc	e8 00 00 00 00	 call	 _Py_DecRef

; 665  :     PyErr_SetString(PyExc_ValueError,
; 666  :                     "bad marshal data (digit out of range in long)");

  001c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@MHBIECJI@bad?5marshal?5data?5?$CIdigit?5out?5of?5r@

; 667  :     return NULL;

  001c8	eb bb		 jmp	 SHORT $LN48@r_PyLong
$LN1@r_PyLong:

; 658  :     }
; 659  :     /* top digit should be nonzero, else the resulting PyLong won't be
; 660  :        normalized */
; 661  :     ob->ob_digit[size-1] = d;

  001ca	48 8b 44 24 70	 mov	 rax, QWORD PTR tv325[rsp]
  001cf	45 89 64 87 6c	 mov	 DWORD PTR [r15+rax*4+108], r12d

; 662  :     return (PyObject *)ob;

  001d4	49 8b c7	 mov	 rax, r15
  001d7	eb ba		 jmp	 SHORT $LN45@r_PyLong
$LN19@r_PyLong:

; 615  :         PyErr_SetString(PyExc_ValueError,
; 616  :                        "bad marshal data (long size out of range)");

  001d9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  001e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@EOJBGKLJ@bad?5marshal?5data?5?$CIlong?5size?5out?5@
  001e7	e8 00 00 00 00	 call	 PyErr_SetString
$LN47@r_PyLong:

; 617  :         return NULL;

  001ec	33 c0		 xor	 eax, eax

; 668  : }

  001ee	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001f2	41 5d		 pop	 r13
  001f4	5b		 pop	 rbx
  001f5	c3		 ret	 0
r_PyLong ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@HHIDIMHG@bad?5marshal?5data?5?$CIunknown?5type?5c@ ; `string'
PUBLIC	??_C@_0CJ@KFLIJKG@bad?5marshal?5data?5?$CIset?5size?5out?5o@ ; `string'
PUBLIC	??_C@_0CE@FAAPONDG@NULL?5object?5in?5marshal?5data?5for?5@ ; `string'
PUBLIC	??_C@_0CK@MIJMBDEN@bad?5marshal?5data?5?$CIlist?5size?5out?5@ ; `string'
PUBLIC	??_C@_0CF@CJJAIPOI@NULL?5object?5in?5marshal?5data?5for?5@ ; `string'
PUBLIC	??_C@_0CL@ENHOKCN@bad?5marshal?5data?5?$CItuple?5size?5out@ ; `string'
PUBLIC	??_C@_0CG@PMGHMCHE@NULL?5object?5in?5marshal?5data?5for?5@ ; `string'
PUBLIC	??_C@_0CN@LMDCKOGJ@bad?5marshal?5data?5?$CIunicode?5size?5o@ ; `string'
PUBLIC	??_C@_0CM@MECHBKKI@bad?5marshal?5data?5?$CIstring?5size?5ou@ ; `string'
PUBLIC	$T21943
PUBLIC	__real@bff0000000000000
PUBLIC	??_C@_0BP@OFPCODJP@EOF?5read?5where?5object?5expected?$AA@ ; `string'
PUBLIC	??_C@_0BJ@OABGMDJP@recursion?5limit?5exceeded?$AA@ ; `string'
EXTRN	PyCode_New:PROC
EXTRN	PyUnicode_Compare:PROC
EXTRN	PySet_Add:PROC
EXTRN	PyFrozenSet_New:PROC
EXTRN	PySet_New:PROC
EXTRN	PyDict_SetItem:PROC
EXTRN	PyDict_New:PROC
EXTRN	PyList_New:PROC
EXTRN	PyTuple_New:PROC
EXTRN	PyErr_NoMemory:PROC
EXTRN	PyUnicode_DecodeUTF8:PROC
EXTRN	__imp_free:PROC
EXTRN	_PxMem_Free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	_PxMem_Malloc:PROC
EXTRN	PyBytes_FromStringAndSize:PROC
EXTRN	PyComplex_FromCComplex:PROC
EXTRN	_PyFloat_Unpack8:PROC
EXTRN	PyFloat_FromDouble:PROC
EXTRN	PyOS_string_to_double:PROC
EXTRN	PyLong_FromLong:PROC
EXTRN	__ImageBase:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$r_object DD imagerel r_object
	DD	imagerel r_object+82
	DD	imagerel $unwind$r_object
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$r_object DD imagerel r_object+82
	DD	imagerel r_object+2868
	DD	imagerel $chain$1$r_object
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$r_object DD imagerel r_object+2868
	DD	imagerel r_object+3081
	DD	imagerel $chain$3$r_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$r_object DD 040021H
	DD	01e6800H
	DD	03f6400H
	DD	imagerel r_object
	DD	imagerel r_object+82
	DD	imagerel $unwind$r_object
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$r_object DD 041021H
	DD	01e6810H
	DD	03f6408H
	DD	imagerel r_object
	DD	imagerel r_object+82
	DD	imagerel $unwind$r_object
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$r_object DD 051301H
	DD	0400113H
	DD	030037004H
	DD	05002H
xdata	ENDS
;	COMDAT ??_C@_0CF@HHIDIMHG@bad?5marshal?5data?5?$CIunknown?5type?5c@
CONST	SEGMENT
??_C@_0CF@HHIDIMHG@bad?5marshal?5data?5?$CIunknown?5type?5c@ DB 'bad mars'
	DB	'hal data (unknown type code)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@KFLIJKG@bad?5marshal?5data?5?$CIset?5size?5out?5o@
CONST	SEGMENT
??_C@_0CJ@KFLIJKG@bad?5marshal?5data?5?$CIset?5size?5out?5o@ DB 'bad mars'
	DB	'hal data (set size out of range)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FAAPONDG@NULL?5object?5in?5marshal?5data?5for?5@
CONST	SEGMENT
??_C@_0CE@FAAPONDG@NULL?5object?5in?5marshal?5data?5for?5@ DB 'NULL objec'
	DB	't in marshal data for set', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@MIJMBDEN@bad?5marshal?5data?5?$CIlist?5size?5out?5@
CONST	SEGMENT
??_C@_0CK@MIJMBDEN@bad?5marshal?5data?5?$CIlist?5size?5out?5@ DB 'bad mar'
	DB	'shal data (list size out of range)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@CJJAIPOI@NULL?5object?5in?5marshal?5data?5for?5@
CONST	SEGMENT
??_C@_0CF@CJJAIPOI@NULL?5object?5in?5marshal?5data?5for?5@ DB 'NULL objec'
	DB	't in marshal data for list', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@ENHOKCN@bad?5marshal?5data?5?$CItuple?5size?5out@
CONST	SEGMENT
??_C@_0CL@ENHOKCN@bad?5marshal?5data?5?$CItuple?5size?5out@ DB 'bad marsh'
	DB	'al data (tuple size out of range)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@PMGHMCHE@NULL?5object?5in?5marshal?5data?5for?5@
CONST	SEGMENT
??_C@_0CG@PMGHMCHE@NULL?5object?5in?5marshal?5data?5for?5@ DB 'NULL objec'
	DB	't in marshal data for tuple', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@LMDCKOGJ@bad?5marshal?5data?5?$CIunicode?5size?5o@
CONST	SEGMENT
??_C@_0CN@LMDCKOGJ@bad?5marshal?5data?5?$CIunicode?5size?5o@ DB 'bad mars'
	DB	'hal data (unicode size out of range)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@MECHBKKI@bad?5marshal?5data?5?$CIstring?5size?5ou@
CONST	SEGMENT
??_C@_0CM@MECHBKKI@bad?5marshal?5data?5?$CIstring?5size?5ou@ DB 'bad mars'
	DB	'hal data (string size out of range)', 00H	; `string'
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT ??_C@_0BP@OFPCODJP@EOF?5read?5where?5object?5expected?$AA@
CONST	SEGMENT
??_C@_0BP@OFPCODJP@EOF?5read?5where?5object?5expected?$AA@ DB 'EOF read w'
	DB	'here object expected', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OABGMDJP@recursion?5limit?5exceeded?$AA@
CONST	SEGMENT
??_C@_0BJ@OABGMDJP@recursion?5limit?5exceeded?$AA@ DB 'recursion limit ex'
	DB	'ceeded', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT r_object
_TEXT	SEGMENT
lnotab$1$ = 128
$T21943 = 128
c$20893 = 128
c$20879 = 128
cellvars$1$ = 144
name$1$ = 152
names$1$ = 160
kwonlyargcount$1$ = 168
varnames$1$ = 176
argcount$1$ = 184
freevars$1$ = 192
code$1$ = 200
consts$1$ = 208
buf$20878 = 224
buf$20861 = 224
firstlineno$1$ = 544
key$1$ = 544
i$1$ = 544
tv928 = 544
n$4$ = 544
n$1$ = 544
buf$20892 = 544
buf$20870 = 544
p$ = 544
flags$1$ = 552
v$4$ = 552
tv837 = 552
n$2$ = 552
stacksize$1$ = 560
v$6$ = 560
v$3$ = 560
nlocals$1$ = 568
r_object PROC						; COMDAT

; 673  : {

  00000	40 55		 push	 rbp
  00002	53		 push	 rbx
  00003	57		 push	 rdi
  00004	48 8d ac 24 00
	ff ff ff	 lea	 rbp, QWORD PTR [rsp-256]
  0000c	48 81 ec 00 02
	00 00		 sub	 rsp, 512		; 00000200H
  00013	48 8b f9	 mov	 rdi, rcx

; 674  :     /* NULL is a valid return value, it does not necessarily means that
; 675  :        an exception is set. */
; 676  :     PyObject *v, *v2;
; 677  :     long i, n;
; 678  :     int type = r_byte(p);

  00016	e8 00 00 00 00	 call	 r_byte

; 679  :     PyObject *retval;
; 680  : 
; 681  :     p->depth++;

  0001b	ff 47 0c	 inc	 DWORD PTR [rdi+12]
  0001e	8b d8		 mov	 ebx, eax
  00020	8b 47 0c	 mov	 eax, DWORD PTR [rdi+12]

; 682  : 
; 683  :     if (p->depth > MAX_MARSHAL_STACK_DEPTH) {

  00023	3d d0 07 00 00	 cmp	 eax, 2000		; 000007d0H
  00028	7e 25		 jle	 SHORT $LN142@r_object

; 684  :         p->depth--;

  0002a	ff c8		 dec	 eax

; 685  :         PyErr_SetString(PyExc_ValueError, "recursion limit exceeded");

  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@OABGMDJP@recursion?5limit?5exceeded?$AA@
  00033	89 47 0c	 mov	 DWORD PTR [rdi+12], eax
  00036	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0003d	e8 00 00 00 00	 call	 PyErr_SetString

; 686  :         return NULL;

  00042	33 c0		 xor	 eax, eax

; 1122 : }

  00044	48 81 c4 00 02
	00 00		 add	 rsp, 512		; 00000200H
  0004b	5f		 pop	 rdi
  0004c	5b		 pop	 rbx
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
$LN142@r_object:

; 687  :     }
; 688  : 
; 689  :     switch (type) {

  0004f	8d 43 01	 lea	 eax, DWORD PTR [rbx+1]
  00052	48 89 b4 24 f8
	01 00 00	 mov	 QWORD PTR [rsp+504], rsi
  0005a	0f 29 b4 24 e0
	01 00 00	 movaps	 XMMWORD PTR [rsp+480], xmm6
  00062	83 f8 7c	 cmp	 eax, 124		; 0000007cH
  00065	0f 87 93 0a 00
	00		 ja	 $LN1@r_object
  0006b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:__ImageBase
  00072	48 98		 cdqe
  00074	0f b6 84 02 00
	00 00 00	 movzx	 eax, BYTE PTR $LN174@r_object[rdx+rax]
  0007c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR $LN175@r_object[rdx+rax*4]
  00083	48 03 ca	 add	 rcx, rdx
  00086	ff e1		 jmp	 rcx
$LN139@r_object:

; 690  : 
; 691  :     case EOF:
; 692  :         PyErr_SetString(PyExc_EOFError,
; 693  :                         "EOF read where object expected");

  00088	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_EOFError
  0008f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@OFPCODJP@EOF?5read?5where?5object?5expected?$AA@

; 694  :         retval = NULL;
; 695  :         break;

  00096	e9 71 0a 00 00	 jmp	 $LN176@r_object
$LN137@r_object:

; 696  : 
; 697  :     case TYPE_NULL:
; 698  :         retval = NULL;
; 699  :         break;
; 700  : 
; 701  :     case TYPE_NONE:
; 702  :         Py_INCREF(Py_None);

  0009b	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  000a2	48 8b cb	 mov	 rcx, rbx
  000a5	e8 00 00 00 00	 call	 _Py_IncRef

; 703  :         retval = Py_None;
; 704  :         break;

  000aa	e9 64 0a 00 00	 jmp	 $LN140@r_object
$LN136@r_object:

; 705  : 
; 706  :     case TYPE_STOPITER:
; 707  :         Py_INCREF(PyExc_StopIteration);

  000af	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_StopIteration
  000b6	e8 00 00 00 00	 call	 _Py_IncRef

; 708  :         retval = PyExc_StopIteration;

  000bb	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR PyExc_StopIteration

; 709  :         break;

  000c2	e9 4c 0a 00 00	 jmp	 $LN140@r_object
$LN135@r_object:

; 710  : 
; 711  :     case TYPE_ELLIPSIS:
; 712  :         Py_INCREF(Py_Ellipsis);

  000c7	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_EllipsisObject
  000ce	48 8b cb	 mov	 rcx, rbx
  000d1	e8 00 00 00 00	 call	 _Py_IncRef

; 713  :         retval = Py_Ellipsis;
; 714  :         break;

  000d6	e9 38 0a 00 00	 jmp	 $LN140@r_object
$LN134@r_object:

; 715  : 
; 716  :     case TYPE_FALSE:
; 717  :         Py_INCREF(Py_False);

  000db	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  000e2	48 8b cb	 mov	 rcx, rbx
  000e5	e8 00 00 00 00	 call	 _Py_IncRef

; 718  :         retval = Py_False;
; 719  :         break;

  000ea	e9 24 0a 00 00	 jmp	 $LN140@r_object
$LN133@r_object:

; 720  : 
; 721  :     case TYPE_TRUE:
; 722  :         Py_INCREF(Py_True);

  000ef	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_TrueStruct
  000f6	48 8b cb	 mov	 rcx, rbx
  000f9	e8 00 00 00 00	 call	 _Py_IncRef

; 723  :         retval = Py_True;
; 724  :         break;

  000fe	e9 10 0a 00 00	 jmp	 $LN140@r_object
$LN132@r_object:

; 725  : 
; 726  :     case TYPE_INT:
; 727  :         n = r_long(p);

  00103	48 8b cf	 mov	 rcx, rdi
  00106	e8 00 00 00 00	 call	 r_long
  0010b	8b d8		 mov	 ebx, eax

; 728  :         retval = PyErr_Occurred() ? NULL : PyLong_FromLong(n);

  0010d	e8 00 00 00 00	 call	 PyErr_Occurred
  00112	48 85 c0	 test	 rax, rax
  00115	0f 85 f6 09 00
	00		 jne	 $LN138@r_object
  0011b	8b cb		 mov	 ecx, ebx
  0011d	e8 00 00 00 00	 call	 PyLong_FromLong
  00122	48 8b d8	 mov	 rbx, rax

; 729  :         break;

  00125	e9 e9 09 00 00	 jmp	 $LN140@r_object
$LN131@r_object:

; 730  : 
; 731  :     case TYPE_INT64:
; 732  :         retval = r_long64(p);

  0012a	48 8b cf	 mov	 rcx, rdi
  0012d	e8 00 00 00 00	 call	 r_long64
  00132	48 8b d8	 mov	 rbx, rax

; 733  :         break;

  00135	e9 d9 09 00 00	 jmp	 $LN140@r_object
$LN130@r_object:

; 734  : 
; 735  :     case TYPE_LONG:
; 736  :         retval = r_PyLong(p);

  0013a	48 8b cf	 mov	 rcx, rdi
  0013d	e8 00 00 00 00	 call	 r_PyLong
  00142	48 8b d8	 mov	 rbx, rax

; 737  :         break;

  00145	e9 c9 09 00 00	 jmp	 $LN140@r_object
$LN129@r_object:

; 738  : 
; 739  :     case TYPE_FLOAT:
; 740  :         {
; 741  :             char buf[256];
; 742  :             double dx;
; 743  :             retval = NULL;
; 744  :             n = r_byte(p);

  0014a	48 8b cf	 mov	 rcx, rdi
  0014d	33 db		 xor	 ebx, ebx
  0014f	e8 00 00 00 00	 call	 r_byte

; 745  :             if (n == EOF) {

  00154	83 f8 ff	 cmp	 eax, -1
  00157	75 18		 jne	 SHORT $LN128@r_object
$LN181@r_object:

; 746  :                 PyErr_SetString(PyExc_EOFError,
; 747  :                     "EOF read where object expected");

  00159	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_EOFError
  00160	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@OFPCODJP@EOF?5read?5where?5object?5expected?$AA@
  00167	e8 00 00 00 00	 call	 PyErr_SetString

; 748  :                 break;

  0016c	e9 a2 09 00 00	 jmp	 $LN140@r_object
$LN128@r_object:

; 749  :             }
; 750  :             if (r_string(buf, n, p) != n)

  00171	48 63 f0	 movsxd	 rsi, eax
  00174	48 8d 4d e0	 lea	 rcx, QWORD PTR buf$20861[rbp-256]
  00178	4c 8b c7	 mov	 r8, rdi
  0017b	48 8b d6	 mov	 rdx, rsi
  0017e	e8 00 00 00 00	 call	 r_string
  00183	48 3b c6	 cmp	 rax, rsi
  00186	0f 85 87 09 00
	00		 jne	 $LN140@r_object

; 751  :                 break;
; 752  :             buf[n] = '\0';
; 753  :             dx = PyOS_string_to_double(buf, NULL, NULL);

  0018c	48 8d 4d e0	 lea	 rcx, QWORD PTR buf$20861[rbp-256]
  00190	45 33 c0	 xor	 r8d, r8d
  00193	33 d2		 xor	 edx, edx
  00195	88 5c 35 e0	 mov	 BYTE PTR buf$20861[rbp+rsi-256], bl
  00199	e8 00 00 00 00	 call	 PyOS_string_to_double

; 754  :             if (dx == -1.0 && PyErr_Occurred())

  0019e	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@bff0000000000000
  001a6	66 0f 28 f0	 movapd	 xmm6, xmm0
  001aa	7a 10		 jp	 SHORT $LN126@r_object
  001ac	75 0e		 jne	 SHORT $LN126@r_object
  001ae	e8 00 00 00 00	 call	 PyErr_Occurred
  001b3	48 85 c0	 test	 rax, rax
  001b6	0f 85 57 09 00
	00		 jne	 $LN140@r_object
$LN126@r_object:

; 755  :                 break;
; 756  :             retval = PyFloat_FromDouble(dx);

  001bc	66 0f 28 c6	 movapd	 xmm0, xmm6
  001c0	e8 00 00 00 00	 call	 PyFloat_FromDouble
  001c5	48 8b d8	 mov	 rbx, rax

; 757  :             break;

  001c8	e9 46 09 00 00	 jmp	 $LN140@r_object
$LN125@r_object:

; 758  :         }
; 759  : 
; 760  :     case TYPE_BINARY_FLOAT:
; 761  :         {
; 762  :             unsigned char buf[8];
; 763  :             double x;
; 764  :             if (r_string((char*)buf, 8, p) != 8) {

  001cd	48 8d 8d 20 01
	00 00		 lea	 rcx, QWORD PTR buf$20870[rbp-256]
  001d4	4c 8b c7	 mov	 r8, rdi
  001d7	ba 08 00 00 00	 mov	 edx, 8
  001dc	e8 00 00 00 00	 call	 r_string
  001e1	48 83 f8 08	 cmp	 rax, 8

; 765  :                 retval = NULL;
; 766  :                 break;

  001e5	0f 85 26 09 00
	00		 jne	 $LN138@r_object

; 767  :             }
; 768  :             x = _PyFloat_Unpack8(buf, 1);

  001eb	8d 50 f9	 lea	 edx, QWORD PTR [rax-7]
  001ee	48 8d 8d 20 01
	00 00		 lea	 rcx, QWORD PTR buf$20870[rbp-256]
  001f5	e8 00 00 00 00	 call	 _PyFloat_Unpack8

; 769  :             if (x == -1.0 && PyErr_Occurred()) {

  001fa	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@bff0000000000000
  00202	66 0f 28 f0	 movapd	 xmm6, xmm0
  00206	7a 10		 jp	 SHORT $LN123@r_object
  00208	75 0e		 jne	 SHORT $LN123@r_object
  0020a	e8 00 00 00 00	 call	 PyErr_Occurred
  0020f	48 85 c0	 test	 rax, rax

; 770  :                 retval = NULL;
; 771  :                 break;

  00212	0f 85 f9 08 00
	00		 jne	 $LN138@r_object
$LN123@r_object:

; 772  :             }
; 773  :             retval = PyFloat_FromDouble(x);

  00218	66 0f 28 c6	 movapd	 xmm0, xmm6
  0021c	e8 00 00 00 00	 call	 PyFloat_FromDouble
  00221	48 8b d8	 mov	 rbx, rax

; 774  :             break;

  00224	e9 ea 08 00 00	 jmp	 $LN140@r_object
$LN122@r_object:

; 775  :         }
; 776  : 
; 777  :     case TYPE_COMPLEX:
; 778  :         {
; 779  :             char buf[256];
; 780  :             Py_complex c;
; 781  :             retval = NULL;
; 782  :             n = r_byte(p);

  00229	48 8b cf	 mov	 rcx, rdi
  0022c	33 db		 xor	 ebx, ebx
  0022e	e8 00 00 00 00	 call	 r_byte

; 783  :             if (n == EOF) {

  00233	83 f8 ff	 cmp	 eax, -1

; 784  :                 PyErr_SetString(PyExc_EOFError,
; 785  :                     "EOF read where object expected");
; 786  :                 break;

  00236	0f 84 1d ff ff
	ff		 je	 $LN181@r_object

; 787  :             }
; 788  :             if (r_string(buf, n, p) != n)

  0023c	48 63 f0	 movsxd	 rsi, eax
  0023f	48 8d 4d e0	 lea	 rcx, QWORD PTR buf$20878[rbp-256]
  00243	4c 8b c7	 mov	 r8, rdi
  00246	48 8b d6	 mov	 rdx, rsi
  00249	e8 00 00 00 00	 call	 r_string
  0024e	48 3b c6	 cmp	 rax, rsi
  00251	0f 85 bc 08 00
	00		 jne	 $LN140@r_object

; 789  :                 break;
; 790  :             buf[n] = '\0';
; 791  :             c.real = PyOS_string_to_double(buf, NULL, NULL);

  00257	48 8d 4d e0	 lea	 rcx, QWORD PTR buf$20878[rbp-256]
  0025b	45 33 c0	 xor	 r8d, r8d
  0025e	33 d2		 xor	 edx, edx
  00260	88 5c 35 e0	 mov	 BYTE PTR buf$20878[rbp+rsi-256], bl
  00264	e8 00 00 00 00	 call	 PyOS_string_to_double

; 792  :             if (c.real == -1.0 && PyErr_Occurred())

  00269	f2 0f 10 35 00
	00 00 00	 movsdx	 xmm6, QWORD PTR __real@bff0000000000000
  00271	66 0f 2e c6	 ucomisd xmm0, xmm6
  00275	f2 0f 11 45 80	 movsdx	 QWORD PTR c$20879[rbp-256], xmm0
  0027a	7a 10		 jp	 SHORT $LN119@r_object
  0027c	75 0e		 jne	 SHORT $LN119@r_object
  0027e	e8 00 00 00 00	 call	 PyErr_Occurred
  00283	48 85 c0	 test	 rax, rax
  00286	0f 85 87 08 00
	00		 jne	 $LN140@r_object
$LN119@r_object:

; 793  :                 break;
; 794  :             n = r_byte(p);

  0028c	48 8b cf	 mov	 rcx, rdi
  0028f	e8 00 00 00 00	 call	 r_byte

; 795  :             if (n == EOF) {

  00294	83 f8 ff	 cmp	 eax, -1

; 796  :                 PyErr_SetString(PyExc_EOFError,
; 797  :                     "EOF read where object expected");
; 798  :                 break;

  00297	0f 84 bc fe ff
	ff		 je	 $LN181@r_object

; 799  :             }
; 800  :             if (r_string(buf, n, p) != n)

  0029d	48 63 f0	 movsxd	 rsi, eax
  002a0	48 8d 4d e0	 lea	 rcx, QWORD PTR buf$20878[rbp-256]
  002a4	4c 8b c7	 mov	 r8, rdi
  002a7	48 8b d6	 mov	 rdx, rsi
  002aa	e8 00 00 00 00	 call	 r_string
  002af	48 3b c6	 cmp	 rax, rsi
  002b2	0f 85 5b 08 00
	00		 jne	 $LN140@r_object

; 801  :                 break;
; 802  :             buf[n] = '\0';
; 803  :             c.imag = PyOS_string_to_double(buf, NULL, NULL);

  002b8	48 8d 4d e0	 lea	 rcx, QWORD PTR buf$20878[rbp-256]
  002bc	45 33 c0	 xor	 r8d, r8d
  002bf	33 d2		 xor	 edx, edx
  002c1	88 5c 35 e0	 mov	 BYTE PTR buf$20878[rbp+rsi-256], bl
  002c5	e8 00 00 00 00	 call	 PyOS_string_to_double

; 804  :             if (c.imag == -1.0 && PyErr_Occurred())

  002ca	66 0f 2e c6	 ucomisd xmm0, xmm6
  002ce	f2 0f 11 45 88	 movsdx	 QWORD PTR c$20879[rbp-248], xmm0
  002d3	7a 10		 jp	 SHORT $LN116@r_object
  002d5	75 0e		 jne	 SHORT $LN116@r_object
  002d7	e8 00 00 00 00	 call	 PyErr_Occurred
  002dc	48 85 c0	 test	 rax, rax
  002df	0f 85 2e 08 00
	00		 jne	 $LN140@r_object
$LN116@r_object:

; 805  :                 break;
; 806  :             retval = PyComplex_FromCComplex(c);

  002e5	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR c$20879[rbp-256]
  002e9	48 8d 4d 80	 lea	 rcx, QWORD PTR $T21943[rbp-256]
  002ed	66 0f 7f 45 80	 movdqa	 XMMWORD PTR $T21943[rbp-256], xmm0
  002f2	e8 00 00 00 00	 call	 PyComplex_FromCComplex
$LN182@r_object:
  002f7	48 8b d8	 mov	 rbx, rax

; 807  :             break;

  002fa	e9 14 08 00 00	 jmp	 $LN140@r_object
$LN115@r_object:

; 808  :         }
; 809  : 
; 810  :     case TYPE_BINARY_COMPLEX:
; 811  :         {
; 812  :             unsigned char buf[8];
; 813  :             Py_complex c;
; 814  :             if (r_string((char*)buf, 8, p) != 8) {

  002ff	48 8d 8d 20 01
	00 00		 lea	 rcx, QWORD PTR buf$20892[rbp-256]
  00306	4c 8b c7	 mov	 r8, rdi
  00309	ba 08 00 00 00	 mov	 edx, 8
  0030e	e8 00 00 00 00	 call	 r_string
  00313	48 83 f8 08	 cmp	 rax, 8

; 815  :                 retval = NULL;
; 816  :                 break;

  00317	0f 85 f4 07 00
	00		 jne	 $LN138@r_object

; 817  :             }
; 818  :             c.real = _PyFloat_Unpack8(buf, 1);

  0031d	bb 01 00 00 00	 mov	 ebx, 1
  00322	48 8d 8d 20 01
	00 00		 lea	 rcx, QWORD PTR buf$20892[rbp-256]
  00329	8b d3		 mov	 edx, ebx
  0032b	e8 00 00 00 00	 call	 _PyFloat_Unpack8

; 819  :             if (c.real == -1.0 && PyErr_Occurred()) {

  00330	f2 0f 10 35 00
	00 00 00	 movsdx	 xmm6, QWORD PTR __real@bff0000000000000
  00338	66 0f 2e c6	 ucomisd xmm0, xmm6
  0033c	f2 0f 11 45 80	 movsdx	 QWORD PTR c$20893[rbp-256], xmm0
  00341	7a 10		 jp	 SHORT $LN113@r_object
  00343	75 0e		 jne	 SHORT $LN113@r_object
  00345	e8 00 00 00 00	 call	 PyErr_Occurred
  0034a	48 85 c0	 test	 rax, rax

; 820  :                 retval = NULL;
; 821  :                 break;

  0034d	0f 85 be 07 00
	00		 jne	 $LN138@r_object
$LN113@r_object:

; 822  :             }
; 823  :             if (r_string((char*)buf, 8, p) != 8) {

  00353	48 8d 8d 20 01
	00 00		 lea	 rcx, QWORD PTR buf$20892[rbp-256]
  0035a	4c 8b c7	 mov	 r8, rdi
  0035d	ba 08 00 00 00	 mov	 edx, 8
  00362	e8 00 00 00 00	 call	 r_string
  00367	48 83 f8 08	 cmp	 rax, 8

; 824  :                 retval = NULL;
; 825  :                 break;

  0036b	0f 85 a0 07 00
	00		 jne	 $LN138@r_object

; 826  :             }
; 827  :             c.imag = _PyFloat_Unpack8(buf, 1);

  00371	48 8d 8d 20 01
	00 00		 lea	 rcx, QWORD PTR buf$20892[rbp-256]
  00378	8b d3		 mov	 edx, ebx
  0037a	e8 00 00 00 00	 call	 _PyFloat_Unpack8

; 828  :             if (c.imag == -1.0 && PyErr_Occurred()) {

  0037f	66 0f 2e c6	 ucomisd xmm0, xmm6
  00383	f2 0f 11 45 88	 movsdx	 QWORD PTR c$20893[rbp-248], xmm0
  00388	0f 8a 57 ff ff
	ff		 jp	 $LN116@r_object
  0038e	0f 85 51 ff ff
	ff		 jne	 $LN116@r_object
  00394	e8 00 00 00 00	 call	 PyErr_Occurred
  00399	48 85 c0	 test	 rax, rax

; 829  :                 retval = NULL;
; 830  :                 break;

  0039c	0f 85 6f 07 00
	00		 jne	 $LN138@r_object

; 831  :             }
; 832  :             retval = PyComplex_FromCComplex(c);
; 833  :             break;

  003a2	e9 3e ff ff ff	 jmp	 $LN116@r_object
$LN110@r_object:

; 834  :         }
; 835  : 
; 836  :     case TYPE_STRING:
; 837  :         n = r_long(p);

  003a7	48 8b cf	 mov	 rcx, rdi
  003aa	e8 00 00 00 00	 call	 r_long
  003af	48 63 d8	 movsxd	 rbx, eax

; 838  :         if (PyErr_Occurred()) {

  003b2	e8 00 00 00 00	 call	 PyErr_Occurred
  003b7	48 85 c0	 test	 rax, rax

; 839  :             retval = NULL;
; 840  :             break;

  003ba	0f 85 51 07 00
	00		 jne	 $LN138@r_object

; 841  :         }
; 842  :         if (n < 0 || n > SIZE32_MAX) {

  003c0	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  003c6	77 3e		 ja	 SHORT $LN107@r_object

; 846  :         }
; 847  :         v = PyBytes_FromStringAndSize((char *)NULL, n);

  003c8	48 8b d3	 mov	 rdx, rbx
  003cb	33 c9		 xor	 ecx, ecx
  003cd	48 8b f3	 mov	 rsi, rbx
  003d0	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  003d5	48 8b d8	 mov	 rbx, rax

; 848  :         if (v == NULL) {

  003d8	48 85 c0	 test	 rax, rax

; 849  :             retval = NULL;
; 850  :             break;

  003db	0f 84 30 07 00
	00		 je	 $LN138@r_object

; 851  :         }
; 852  :         if (r_string(PyBytes_AS_STRING(v), n, p) != n) {

  003e1	48 8d 48 78	 lea	 rcx, QWORD PTR [rax+120]
  003e5	4c 8b c7	 mov	 r8, rdi
  003e8	48 8b d6	 mov	 rdx, rsi
  003eb	e8 00 00 00 00	 call	 r_string
  003f0	48 3b c6	 cmp	 rax, rsi
  003f3	0f 84 1a 07 00
	00		 je	 $LN140@r_object

; 853  :             Py_DECREF(v);

  003f9	48 8b cb	 mov	 rcx, rbx
  003fc	e8 00 00 00 00	 call	 _Py_DecRef

; 854  :             retval = NULL;
; 855  :             break;

  00401	e9 0b 07 00 00	 jmp	 $LN138@r_object
$LN107@r_object:

; 843  :             PyErr_SetString(PyExc_ValueError, "bad marshal data (string size out of range)");

  00406	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@MECHBKKI@bad?5marshal?5data?5?$CIstring?5size?5ou@

; 844  :             retval = NULL;
; 845  :             break;

  0040d	e9 f3 06 00 00	 jmp	 $LN177@r_object
$LN104@r_object:

; 856  :         }
; 857  :         retval = v;
; 858  :         break;
; 859  : 
; 860  :     case TYPE_UNICODE:
; 861  :         {
; 862  :         char *buffer;
; 863  : 
; 864  :         n = r_long(p);

  00412	48 8b cf	 mov	 rcx, rdi
  00415	e8 00 00 00 00	 call	 r_long
  0041a	48 63 f0	 movsxd	 rsi, eax

; 865  :         if (PyErr_Occurred()) {

  0041d	e8 00 00 00 00	 call	 PyErr_Occurred
  00422	48 85 c0	 test	 rax, rax

; 866  :             retval = NULL;
; 867  :             break;

  00425	0f 85 e6 06 00
	00		 jne	 $LN138@r_object

; 868  :         }
; 869  :         if (n < 0 || n > SIZE32_MAX) {

  0042b	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00431	0f 87 b9 00 00
	00		 ja	 $LN101@r_object

; 873  :         }
; 874  :         buffer = PyMem_NEW(char, n);

  00437	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  00441	48 8b de	 mov	 rbx, rsi
  00444	48 3b f0	 cmp	 rsi, rax
  00447	0f 87 96 00 00
	00		 ja	 $LN173@r_object
  0044d	e8 00 00 00 00	 call	 _Py_PXCTX
  00452	85 c0		 test	 eax, eax
  00454	74 0a		 je	 SHORT $LN151@r_object
  00456	48 8b cb	 mov	 rcx, rbx
  00459	e8 00 00 00 00	 call	 _PxMem_Malloc
  0045e	eb 11		 jmp	 SHORT $LN178@r_object
$LN151@r_object:
  00460	85 f6		 test	 esi, esi
  00462	b9 01 00 00 00	 mov	 ecx, 1
  00467	48 0f 45 cb	 cmovne	 rcx, rbx
  0046b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
$LN178@r_object:
  00471	48 8b f0	 mov	 rsi, rax

; 875  :         if (buffer == NULL) {

  00474	48 85 c0	 test	 rax, rax
  00477	74 6a		 je	 SHORT $LN173@r_object

; 877  :             break;
; 878  :         }
; 879  :         if (r_string(buffer, n, p) != n) {

  00479	4c 8b c7	 mov	 r8, rdi
  0047c	48 8b d3	 mov	 rdx, rbx
  0047f	48 8b c8	 mov	 rcx, rax
  00482	e8 00 00 00 00	 call	 r_string
  00487	48 3b c3	 cmp	 rax, rbx
  0048a	74 21		 je	 SHORT $LN99@r_object

; 880  :             PyMem_DEL(buffer);

  0048c	e8 00 00 00 00	 call	 _Py_PXCTX
  00491	48 8b ce	 mov	 rcx, rsi
  00494	85 c0		 test	 eax, eax
  00496	74 0a		 je	 SHORT $LN155@r_object
  00498	e8 00 00 00 00	 call	 _PxMem_Free
  0049d	e9 6f 06 00 00	 jmp	 $LN138@r_object
$LN155@r_object:
  004a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 881  :             retval = NULL;
; 882  :             break;

  004a8	e9 64 06 00 00	 jmp	 $LN138@r_object
$LN99@r_object:

; 883  :         }
; 884  :         v = PyUnicode_DecodeUTF8(buffer, n, "surrogatepass");

  004ad	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@BNPCNOJJ@surrogatepass?$AA@
  004b4	48 8b d3	 mov	 rdx, rbx
  004b7	48 8b ce	 mov	 rcx, rsi
  004ba	e8 00 00 00 00	 call	 PyUnicode_DecodeUTF8
  004bf	48 8b d8	 mov	 rbx, rax

; 885  :         PyMem_DEL(buffer);

  004c2	e8 00 00 00 00	 call	 _Py_PXCTX
  004c7	48 8b ce	 mov	 rcx, rsi
  004ca	85 c0		 test	 eax, eax
  004cc	74 0a		 je	 SHORT $LN157@r_object
  004ce	e8 00 00 00 00	 call	 _PxMem_Free
  004d3	e9 3b 06 00 00	 jmp	 $LN140@r_object
$LN157@r_object:
  004d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 886  :         retval = v;
; 887  :         break;

  004de	e9 30 06 00 00	 jmp	 $LN140@r_object
$LN173@r_object:

; 876  :             retval = PyErr_NoMemory();

  004e3	e8 00 00 00 00	 call	 PyErr_NoMemory
  004e8	48 8b d8	 mov	 rbx, rax
  004eb	e9 23 06 00 00	 jmp	 $LN140@r_object
$LN101@r_object:

; 870  :             PyErr_SetString(PyExc_ValueError, "bad marshal data (unicode size out of range)");

  004f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@LMDCKOGJ@bad?5marshal?5data?5?$CIunicode?5size?5o@

; 871  :             retval = NULL;
; 872  :             break;

  004f7	e9 09 06 00 00	 jmp	 $LN177@r_object
$LN98@r_object:

; 888  :         }
; 889  : 
; 890  :     case TYPE_TUPLE:
; 891  :         n = r_long(p);

  004fc	48 8b cf	 mov	 rcx, rdi
  004ff	e8 00 00 00 00	 call	 r_long
  00504	48 63 d8	 movsxd	 rbx, eax
  00507	89 9d 20 01 00
	00		 mov	 DWORD PTR n$4$[rbp-256], ebx

; 892  :         if (PyErr_Occurred()) {

  0050d	e8 00 00 00 00	 call	 PyErr_Occurred
  00512	48 85 c0	 test	 rax, rax

; 893  :             retval = NULL;
; 894  :             break;

  00515	0f 85 f6 05 00
	00		 jne	 $LN138@r_object

; 895  :         }
; 896  :         if (n < 0 || n > SIZE32_MAX) {

  0051b	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00521	0f 87 b1 00 00
	00		 ja	 $LN95@r_object

; 900  :         }
; 901  :         v = PyTuple_New(n);

  00527	48 8b cb	 mov	 rcx, rbx
  0052a	e8 00 00 00 00	 call	 PyTuple_New

; 902  :         if (v == NULL) {
; 903  :             retval = NULL;

  0052f	33 db		 xor	 ebx, ebx
  00531	48 8b c8	 mov	 rcx, rax
  00534	48 89 85 30 01
	00 00		 mov	 QWORD PTR v$3$[rbp-256], rax
  0053b	48 85 c0	 test	 rax, rax

; 904  :             break;

  0053e	0f 84 cf 05 00
	00		 je	 $LN140@r_object

; 905  :         }
; 906  :         for (i = 0; i < n; i++) {

  00544	8b 95 20 01 00
	00		 mov	 edx, DWORD PTR n$4$[rbp-256]
  0054a	8b f3		 mov	 esi, ebx
  0054c	85 d2		 test	 edx, edx
  0054e	0f 8e 7c 00 00
	00		 jle	 $LN91@r_object
  00554	48 83 c0 70	 add	 rax, 112		; 00000070H
  00558	48 89 85 28 01
	00 00		 mov	 QWORD PTR tv837[rbp-256], rax
  0055f	90		 npad	 1
$LL93@r_object:

; 907  :             v2 = r_object(p);

  00560	48 8b cf	 mov	 rcx, rdi
  00563	e8 00 00 00 00	 call	 r_object
  00568	4c 8b d8	 mov	 r11, rax

; 908  :             if ( v2 == NULL ) {

  0056b	48 85 c0	 test	 rax, rax
  0056e	74 34		 je	 SHORT $LN165@r_object

; 914  :                 break;
; 915  :             }
; 916  :             PyTuple_SET_ITEM(v, i, v2);

  00570	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR tv837[rbp-256]
  00577	48 63 8d 20 01
	00 00		 movsxd	 rcx, DWORD PTR n$4$[rbp-256]
  0057e	48 ff c6	 inc	 rsi
  00581	48 83 c0 08	 add	 rax, 8
  00585	4c 89 58 f8	 mov	 QWORD PTR [rax-8], r11
  00589	48 89 85 28 01
	00 00		 mov	 QWORD PTR tv837[rbp-256], rax
  00590	48 3b f1	 cmp	 rsi, rcx
  00593	7c cb		 jl	 SHORT $LL93@r_object

; 1001 :                 break;
; 1002 :             }
; 1003 :             if (PySet_Add(v, v2) == -1) {

  00595	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR v$3$[rbp-256]
  0059c	48 8b d9	 mov	 rbx, rcx
  0059f	e9 6f 05 00 00	 jmp	 $LN140@r_object
$LN165@r_object:

; 909  :                 if (!PyErr_Occurred())

  005a4	e8 00 00 00 00	 call	 PyErr_Occurred
  005a9	48 85 c0	 test	 rax, rax
  005ac	75 13		 jne	 SHORT $LN89@r_object

; 910  :                     PyErr_SetString(PyExc_TypeError,
; 911  :                         "NULL object in marshal data for tuple");

  005ae	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  005b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@PMGHMCHE@NULL?5object?5in?5marshal?5data?5for?5@
  005bc	e8 00 00 00 00	 call	 PyErr_SetString
$LN89@r_object:

; 912  :                 Py_DECREF(v);

  005c1	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR v$3$[rbp-256]
  005c8	e8 00 00 00 00	 call	 _Py_DecRef

; 913  :                 v = NULL;

  005cd	48 8b cb	 mov	 rcx, rbx
$LN91@r_object:

; 917  :         }
; 918  :         retval = v;

  005d0	48 8b d9	 mov	 rbx, rcx

; 919  :         break;

  005d3	e9 3b 05 00 00	 jmp	 $LN140@r_object
$LN95@r_object:

; 897  :             PyErr_SetString(PyExc_ValueError, "bad marshal data (tuple size out of range)");

  005d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@ENHOKCN@bad?5marshal?5data?5?$CItuple?5size?5out@

; 898  :             retval = NULL;
; 899  :             break;

  005df	e9 21 05 00 00	 jmp	 $LN177@r_object
$LN88@r_object:

; 920  : 
; 921  :     case TYPE_LIST:
; 922  :         n = r_long(p);

  005e4	48 8b cf	 mov	 rcx, rdi
  005e7	e8 00 00 00 00	 call	 r_long
  005ec	48 63 d8	 movsxd	 rbx, eax
  005ef	89 9d 20 01 00
	00		 mov	 DWORD PTR n$1$[rbp-256], ebx

; 923  :         if (PyErr_Occurred()) {

  005f5	e8 00 00 00 00	 call	 PyErr_Occurred
  005fa	48 85 c0	 test	 rax, rax

; 924  :             retval = NULL;
; 925  :             break;

  005fd	0f 85 0e 05 00
	00		 jne	 $LN138@r_object

; 926  :         }
; 927  :         if (n < 0 || n > SIZE32_MAX) {

  00603	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00609	0f 87 9d 00 00
	00		 ja	 $LN85@r_object

; 931  :         }
; 932  :         v = PyList_New(n);

  0060f	48 8b cb	 mov	 rcx, rbx
  00612	e8 00 00 00 00	 call	 PyList_New

; 933  :         if (v == NULL) {
; 934  :             retval = NULL;

  00617	33 db		 xor	 ebx, ebx
  00619	48 89 85 28 01
	00 00		 mov	 QWORD PTR v$4$[rbp-256], rax
  00620	48 85 c0	 test	 rax, rax

; 935  :             break;

  00623	0f 84 ea 04 00
	00		 je	 $LN140@r_object

; 936  :         }
; 937  :         for (i = 0; i < n; i++) {

  00629	8b 95 20 01 00
	00		 mov	 edx, DWORD PTR n$1$[rbp-256]
  0062f	8b f3		 mov	 esi, ebx
  00631	85 d2		 test	 edx, edx
  00633	0f 8e be fc ff
	ff		 jle	 $LN182@r_object
  00639	0f 1f 80 00 00
	00 00		 npad	 7
$LL83@r_object:

; 938  :             v2 = r_object(p);

  00640	48 8b cf	 mov	 rcx, rdi
  00643	e8 00 00 00 00	 call	 r_object

; 939  :             if ( v2 == NULL ) {

  00648	48 85 c0	 test	 rax, rax
  0064b	74 2e		 je	 SHORT $LN166@r_object

; 945  :                 break;
; 946  :             }
; 947  :             PyList_SET_ITEM(v, i, v2);

  0064d	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR v$4$[rbp-256]
  00654	48 ff c6	 inc	 rsi
  00657	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  0065b	48 89 44 f1 f8	 mov	 QWORD PTR [rcx+rsi*8-8], rax
  00660	48 63 8d 20 01
	00 00		 movsxd	 rcx, DWORD PTR n$1$[rbp-256]
  00667	48 3b f1	 cmp	 rsi, rcx
  0066a	7c d4		 jl	 SHORT $LL83@r_object

; 1001 :                 break;
; 1002 :             }
; 1003 :             if (PySet_Add(v, v2) == -1) {

  0066c	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR v$4$[rbp-256]
  00673	48 8b d8	 mov	 rbx, rax
  00676	e9 98 04 00 00	 jmp	 $LN140@r_object
$LN166@r_object:

; 940  :                 if (!PyErr_Occurred())

  0067b	e8 00 00 00 00	 call	 PyErr_Occurred
  00680	48 85 c0	 test	 rax, rax
  00683	75 13		 jne	 SHORT $LN79@r_object

; 941  :                     PyErr_SetString(PyExc_TypeError,
; 942  :                         "NULL object in marshal data for list");

  00685	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0068c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@CJJAIPOI@NULL?5object?5in?5marshal?5data?5for?5@
  00693	e8 00 00 00 00	 call	 PyErr_SetString
$LN79@r_object:

; 943  :                 Py_DECREF(v);

  00698	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR v$4$[rbp-256]
  0069f	e8 00 00 00 00	 call	 _Py_DecRef

; 944  :                 v = NULL;

  006a4	48 8b c3	 mov	 rax, rbx
  006a7	e9 67 04 00 00	 jmp	 $LN140@r_object
$LN85@r_object:

; 928  :             PyErr_SetString(PyExc_ValueError, "bad marshal data (list size out of range)");

  006ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@MIJMBDEN@bad?5marshal?5data?5?$CIlist?5size?5out?5@

; 929  :             retval = NULL;
; 930  :             break;

  006b3	e9 4d 04 00 00	 jmp	 $LN177@r_object
$LN78@r_object:

; 948  :         }
; 949  :         retval = v;
; 950  :         break;
; 951  : 
; 952  :     case TYPE_DICT:
; 953  :         v = PyDict_New();

  006b8	e8 00 00 00 00	 call	 PyDict_New
  006bd	48 8b d8	 mov	 rbx, rax

; 954  :         if (v == NULL) {

  006c0	48 85 c0	 test	 rax, rax

; 955  :             retval = NULL;
; 956  :             break;

  006c3	0f 84 48 04 00
	00		 je	 $LN138@r_object

; 957  :         }
; 958  :         for (;;) {
; 959  :             PyObject *key, *val;
; 960  :             key = r_object(p);

  006c9	48 8b cf	 mov	 rcx, rdi
  006cc	e8 00 00 00 00	 call	 r_object
  006d1	48 89 85 20 01
	00 00		 mov	 QWORD PTR key$1$[rbp-256], rax

; 961  :             if (key == NULL)

  006d8	48 85 c0	 test	 rax, rax
  006db	74 52		 je	 SHORT $LN167@r_object
  006dd	0f 1f 00	 npad	 3
$LL76@r_object:

; 962  :                 break;
; 963  :             val = r_object(p);

  006e0	48 8b cf	 mov	 rcx, rdi
  006e3	e8 00 00 00 00	 call	 r_object
  006e8	48 8b f0	 mov	 rsi, rax

; 964  :             if (val != NULL)

  006eb	48 85 c0	 test	 rax, rax
  006ee	74 12		 je	 SHORT $LN73@r_object

; 965  :                 PyDict_SetItem(v, key, val);

  006f0	48 8b 95 20 01
	00 00		 mov	 rdx, QWORD PTR key$1$[rbp-256]
  006f7	4c 8b c0	 mov	 r8, rax
  006fa	48 8b cb	 mov	 rcx, rbx
  006fd	e8 00 00 00 00	 call	 PyDict_SetItem
$LN73@r_object:

; 966  :             Py_DECREF(key);

  00702	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR key$1$[rbp-256]
  00709	e8 00 00 00 00	 call	 _Py_DecRef

; 967  :             Py_XDECREF(val);

  0070e	48 85 f6	 test	 rsi, rsi
  00711	74 08		 je	 SHORT $LN71@r_object
  00713	48 8b ce	 mov	 rcx, rsi
  00716	e8 00 00 00 00	 call	 _Py_DecRef
$LN71@r_object:

; 957  :         }
; 958  :         for (;;) {
; 959  :             PyObject *key, *val;
; 960  :             key = r_object(p);

  0071b	48 8b cf	 mov	 rcx, rdi
  0071e	e8 00 00 00 00	 call	 r_object
  00723	48 89 85 20 01
	00 00		 mov	 QWORD PTR key$1$[rbp-256], rax

; 961  :             if (key == NULL)

  0072a	48 85 c0	 test	 rax, rax
  0072d	75 b1		 jne	 SHORT $LL76@r_object
$LN167@r_object:

; 968  :         }
; 969  :         if (PyErr_Occurred()) {

  0072f	e8 00 00 00 00	 call	 PyErr_Occurred
  00734	48 85 c0	 test	 rax, rax
  00737	0f 84 d6 03 00
	00		 je	 $LN140@r_object

; 970  :             Py_DECREF(v);

  0073d	48 8b cb	 mov	 rcx, rbx
  00740	e8 00 00 00 00	 call	 _Py_DecRef

; 971  :             v = NULL;
; 972  :         }
; 973  :         retval = v;
; 974  :         break;

  00745	e9 c7 03 00 00	 jmp	 $LN138@r_object
$LN67@r_object:

; 975  : 
; 976  :     case TYPE_SET:
; 977  :     case TYPE_FROZENSET:
; 978  :         n = r_long(p);

  0074a	48 8b cf	 mov	 rcx, rdi
  0074d	e8 00 00 00 00	 call	 r_long
  00752	8b f0		 mov	 esi, eax
  00754	89 85 28 01 00
	00		 mov	 DWORD PTR n$2$[rbp-256], eax

; 979  :         if (PyErr_Occurred()) {

  0075a	e8 00 00 00 00	 call	 PyErr_Occurred
  0075f	48 85 c0	 test	 rax, rax

; 980  :             retval = NULL;
; 981  :             break;

  00762	0f 85 a9 03 00
	00		 jne	 $LN138@r_object

; 982  :         }
; 983  :         if (n < 0 || n > SIZE32_MAX) {

  00768	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  0076e	0f 87 d1 00 00
	00		 ja	 $LN64@r_object

; 987  :         }
; 988  :         v = (type == TYPE_SET) ? PySet_New(NULL) : PyFrozenSet_New(NULL);

  00774	33 c9		 xor	 ecx, ecx
  00776	83 fb 3c	 cmp	 ebx, 60			; 0000003cH
  00779	75 07		 jne	 SHORT $LN159@r_object
  0077b	e8 00 00 00 00	 call	 PySet_New
  00780	eb 05		 jmp	 SHORT $LN179@r_object
$LN159@r_object:
  00782	e8 00 00 00 00	 call	 PyFrozenSet_New
$LN179@r_object:

; 989  :         if (v == NULL) {
; 990  :             retval = NULL;

  00787	33 db		 xor	 ebx, ebx
  00789	48 89 85 30 01
	00 00		 mov	 QWORD PTR v$6$[rbp-256], rax
  00790	48 85 c0	 test	 rax, rax

; 991  :             break;

  00793	0f 84 7a 03 00
	00		 je	 $LN140@r_object

; 992  :         }
; 993  :         for (i = 0; i < n; i++) {

  00799	89 9d 20 01 00
	00		 mov	 DWORD PTR i$1$[rbp-256], ebx
  0079f	85 f6		 test	 esi, esi
  007a1	0f 8e 50 fb ff
	ff		 jle	 $LN182@r_object
$LL62@r_object:

; 994  :             v2 = r_object(p);

  007a7	48 8b cf	 mov	 rcx, rdi
  007aa	e8 00 00 00 00	 call	 r_object
  007af	48 8b f0	 mov	 rsi, rax

; 995  :             if ( v2 == NULL ) {

  007b2	48 85 c0	 test	 rax, rax
  007b5	74 5d		 je	 SHORT $LN168@r_object

; 1001 :                 break;
; 1002 :             }
; 1003 :             if (PySet_Add(v, v2) == -1) {

  007b7	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR v$6$[rbp-256]
  007be	48 8b d0	 mov	 rdx, rax
  007c1	e8 00 00 00 00	 call	 PySet_Add
  007c6	83 f8 ff	 cmp	 eax, -1
  007c9	74 2d		 je	 SHORT $LN169@r_object

; 1006 :                 v = NULL;
; 1007 :                 break;
; 1008 :             }
; 1009 :             Py_DECREF(v2);

  007cb	48 8b ce	 mov	 rcx, rsi
  007ce	e8 00 00 00 00	 call	 _Py_DecRef
  007d3	8b 85 20 01 00
	00		 mov	 eax, DWORD PTR i$1$[rbp-256]
  007d9	ff c0		 inc	 eax
  007db	89 85 20 01 00
	00		 mov	 DWORD PTR i$1$[rbp-256], eax
  007e1	3b 85 28 01 00
	00		 cmp	 eax, DWORD PTR n$2$[rbp-256]
  007e7	7c be		 jl	 SHORT $LL62@r_object

; 805  :                 break;
; 806  :             retval = PyComplex_FromCComplex(c);

  007e9	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR v$6$[rbp-256]
  007f0	48 8b d8	 mov	 rbx, rax

; 807  :             break;

  007f3	e9 1b 03 00 00	 jmp	 $LN140@r_object
$LN169@r_object:

; 1004 :                 Py_DECREF(v);

  007f8	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR v$6$[rbp-256]
  007ff	e8 00 00 00 00	 call	 _Py_DecRef

; 1005 :                 Py_DECREF(v2);

  00804	48 8b ce	 mov	 rcx, rsi
  00807	e8 00 00 00 00	 call	 _Py_DecRef
  0080c	48 8b c3	 mov	 rax, rbx
  0080f	e9 ff 02 00 00	 jmp	 $LN140@r_object
$LN168@r_object:

; 996  :                 if (!PyErr_Occurred())

  00814	e8 00 00 00 00	 call	 PyErr_Occurred
  00819	48 85 c0	 test	 rax, rax
  0081c	75 13		 jne	 SHORT $LN58@r_object

; 997  :                     PyErr_SetString(PyExc_TypeError,
; 998  :                         "NULL object in marshal data for set");

  0081e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00825	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FAAPONDG@NULL?5object?5in?5marshal?5data?5for?5@
  0082c	e8 00 00 00 00	 call	 PyErr_SetString
$LN58@r_object:

; 999  :                 Py_DECREF(v);

  00831	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR v$6$[rbp-256]
  00838	e8 00 00 00 00	 call	 _Py_DecRef

; 1000 :                 v = NULL;

  0083d	48 8b c3	 mov	 rax, rbx
  00840	e9 ce 02 00 00	 jmp	 $LN140@r_object
$LN64@r_object:

; 984  :             PyErr_SetString(PyExc_ValueError, "bad marshal data (set size out of range)");

  00845	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@KFLIJKG@bad?5marshal?5data?5?$CIset?5size?5out?5o@

; 985  :             retval = NULL;
; 986  :             break;

  0084c	e9 b4 02 00 00	 jmp	 $LN177@r_object
$LN56@r_object:

; 1010 :         }
; 1011 :         retval = v;
; 1012 :         break;
; 1013 : 
; 1014 :     case TYPE_CODE:
; 1015 :         {
; 1016 :             int argcount;
; 1017 :             int kwonlyargcount;
; 1018 :             int nlocals;
; 1019 :             int stacksize;
; 1020 :             int flags;
; 1021 :             PyObject *code = NULL;
; 1022 :             PyObject *consts = NULL;
; 1023 :             PyObject *names = NULL;

  00851	33 db		 xor	 ebx, ebx

; 1024 :             PyObject *varnames = NULL;
; 1025 :             PyObject *freevars = NULL;
; 1026 :             PyObject *cellvars = NULL;
; 1027 :             PyObject *filename = NULL;
; 1028 :             PyObject *name = NULL;
; 1029 :             int firstlineno;
; 1030 :             PyObject *lnotab = NULL;
; 1031 : 
; 1032 :             v = NULL;
; 1033 : 
; 1034 :             /* XXX ignore long->int overflows for now */
; 1035 :             argcount = (int)r_long(p);

  00853	48 8b cf	 mov	 rcx, rdi
  00856	48 89 5d a0	 mov	 QWORD PTR names$1$[rbp-256], rbx
  0085a	48 89 5d b0	 mov	 QWORD PTR varnames$1$[rbp-256], rbx
  0085e	48 89 5d c0	 mov	 QWORD PTR freevars$1$[rbp-256], rbx
  00862	48 89 5d 90	 mov	 QWORD PTR cellvars$1$[rbp-256], rbx
  00866	8b f3		 mov	 esi, ebx
  00868	48 89 5d 98	 mov	 QWORD PTR name$1$[rbp-256], rbx
  0086c	48 89 5d 80	 mov	 QWORD PTR lnotab$1$[rbp-256], rbx
  00870	e8 00 00 00 00	 call	 r_long
  00875	89 45 b8	 mov	 DWORD PTR argcount$1$[rbp-256], eax

; 1036 :             if (PyErr_Occurred())

  00878	e8 00 00 00 00	 call	 PyErr_Occurred
  0087d	48 85 c0	 test	 rax, rax
  00880	0f 85 8d 02 00
	00		 jne	 $LN140@r_object

; 1037 :                 goto code_error;
; 1038 :             kwonlyargcount = (int)r_long(p);

  00886	48 8b cf	 mov	 rcx, rdi
  00889	e8 00 00 00 00	 call	 r_long
  0088e	89 45 a8	 mov	 DWORD PTR kwonlyargcount$1$[rbp-256], eax

; 1039 :             if (PyErr_Occurred())

  00891	e8 00 00 00 00	 call	 PyErr_Occurred
  00896	48 85 c0	 test	 rax, rax
  00899	0f 85 74 02 00
	00		 jne	 $LN140@r_object

; 1040 :                 goto code_error;
; 1041 :             nlocals = (int)r_long(p);

  0089f	48 8b cf	 mov	 rcx, rdi
  008a2	e8 00 00 00 00	 call	 r_long
  008a7	89 85 38 01 00
	00		 mov	 DWORD PTR nlocals$1$[rbp-256], eax

; 1042 :             if (PyErr_Occurred())

  008ad	e8 00 00 00 00	 call	 PyErr_Occurred
  008b2	48 85 c0	 test	 rax, rax
  008b5	0f 85 58 02 00
	00		 jne	 $LN140@r_object

; 1043 :                 goto code_error;
; 1044 :             stacksize = (int)r_long(p);

  008bb	48 8b cf	 mov	 rcx, rdi
  008be	e8 00 00 00 00	 call	 r_long
  008c3	89 85 30 01 00
	00		 mov	 DWORD PTR stacksize$1$[rbp-256], eax

; 1045 :             if (PyErr_Occurred())

  008c9	e8 00 00 00 00	 call	 PyErr_Occurred
  008ce	48 85 c0	 test	 rax, rax
  008d1	0f 85 3c 02 00
	00		 jne	 $LN140@r_object

; 1046 :                 goto code_error;
; 1047 :             flags = (int)r_long(p);

  008d7	48 8b cf	 mov	 rcx, rdi
  008da	e8 00 00 00 00	 call	 r_long
  008df	89 85 28 01 00
	00		 mov	 DWORD PTR flags$1$[rbp-256], eax

; 1048 :             if (PyErr_Occurred())

  008e5	e8 00 00 00 00	 call	 PyErr_Occurred
  008ea	48 85 c0	 test	 rax, rax
  008ed	0f 85 20 02 00
	00		 jne	 $LN140@r_object

; 1049 :                 goto code_error;
; 1050 :             code = r_object(p);

  008f3	48 8b cf	 mov	 rcx, rdi
  008f6	e8 00 00 00 00	 call	 r_object
  008fb	48 89 45 c8	 mov	 QWORD PTR code$1$[rbp-256], rax

; 1051 :             if (code == NULL)

  008ff	48 85 c0	 test	 rax, rax
  00902	0f 84 0b 02 00
	00		 je	 $LN140@r_object

; 1052 :                 goto code_error;
; 1053 :             consts = r_object(p);

  00908	48 8b cf	 mov	 rcx, rdi
  0090b	e8 00 00 00 00	 call	 r_object
  00910	48 89 45 d0	 mov	 QWORD PTR consts$1$[rbp-256], rax

; 1054 :             if (consts == NULL)

  00914	48 85 c0	 test	 rax, rax
  00917	0f 84 52 01 00
	00		 je	 $code_error$21068

; 1055 :                 goto code_error;
; 1056 :             names = r_object(p);

  0091d	48 8b cf	 mov	 rcx, rdi
  00920	e8 00 00 00 00	 call	 r_object
  00925	48 89 45 a0	 mov	 QWORD PTR names$1$[rbp-256], rax

; 1057 :             if (names == NULL)

  00929	48 85 c0	 test	 rax, rax
  0092c	0f 84 3d 01 00
	00		 je	 $code_error$21068

; 1058 :                 goto code_error;
; 1059 :             varnames = r_object(p);

  00932	48 8b cf	 mov	 rcx, rdi
  00935	e8 00 00 00 00	 call	 r_object
  0093a	48 89 45 b0	 mov	 QWORD PTR varnames$1$[rbp-256], rax

; 1060 :             if (varnames == NULL)

  0093e	48 85 c0	 test	 rax, rax
  00941	0f 84 28 01 00
	00		 je	 $code_error$21068

; 1061 :                 goto code_error;
; 1062 :             freevars = r_object(p);

  00947	48 8b cf	 mov	 rcx, rdi
  0094a	e8 00 00 00 00	 call	 r_object
  0094f	48 89 45 c0	 mov	 QWORD PTR freevars$1$[rbp-256], rax

; 1063 :             if (freevars == NULL)

  00953	48 85 c0	 test	 rax, rax
  00956	0f 84 13 01 00
	00		 je	 $code_error$21068

; 1064 :                 goto code_error;
; 1065 :             cellvars = r_object(p);

  0095c	48 8b cf	 mov	 rcx, rdi
  0095f	e8 00 00 00 00	 call	 r_object
  00964	48 89 45 90	 mov	 QWORD PTR cellvars$1$[rbp-256], rax

; 1066 :             if (cellvars == NULL)

  00968	48 85 c0	 test	 rax, rax
  0096b	0f 84 fe 00 00
	00		 je	 $code_error$21068

; 1067 :                 goto code_error;
; 1068 :             filename = r_object(p);

  00971	48 8b cf	 mov	 rcx, rdi
  00974	e8 00 00 00 00	 call	 r_object
  00979	48 8b f0	 mov	 rsi, rax

; 1069 :             if (filename == NULL)

  0097c	48 85 c0	 test	 rax, rax
  0097f	0f 84 ea 00 00
	00		 je	 $code_error$21068

; 1070 :                 goto code_error;
; 1071 :             if (PyUnicode_CheckExact(filename)) {

  00985	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  0098c	48 39 46 58	 cmp	 QWORD PTR [rsi+88], rax
  00990	75 30		 jne	 SHORT $LN40@r_object

; 1072 :                 if (p->current_filename != NULL) {

  00992	48 8b 57 20	 mov	 rdx, QWORD PTR [rdi+32]
  00996	48 85 d2	 test	 rdx, rdx
  00999	74 23		 je	 SHORT $LN42@r_object

; 1073 :                     if (!PyUnicode_Compare(filename, p->current_filename)) {

  0099b	48 8b ce	 mov	 rcx, rsi
  0099e	e8 00 00 00 00	 call	 PyUnicode_Compare
  009a3	85 c0		 test	 eax, eax
  009a5	75 1b		 jne	 SHORT $LN40@r_object

; 1074 :                         Py_DECREF(filename);

  009a7	48 8b ce	 mov	 rcx, rsi
  009aa	e8 00 00 00 00	 call	 _Py_DecRef

; 1075 :                         Py_INCREF(p->current_filename);

  009af	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  009b3	e8 00 00 00 00	 call	 _Py_IncRef

; 1076 :                         filename = p->current_filename;

  009b8	48 8b 77 20	 mov	 rsi, QWORD PTR [rdi+32]

; 1077 :                     }
; 1078 :                 }
; 1079 :                 else {

  009bc	eb 04		 jmp	 SHORT $LN40@r_object
$LN42@r_object:

; 1080 :                     p->current_filename = filename;

  009be	48 89 77 20	 mov	 QWORD PTR [rdi+32], rsi
$LN40@r_object:

; 1081 :                 }
; 1082 :             }
; 1083 :             name = r_object(p);

  009c2	48 8b cf	 mov	 rcx, rdi
  009c5	e8 00 00 00 00	 call	 r_object
  009ca	48 89 45 98	 mov	 QWORD PTR name$1$[rbp-256], rax

; 1084 :             if (name == NULL)

  009ce	48 85 c0	 test	 rax, rax
  009d1	0f 84 98 00 00
	00		 je	 $code_error$21068

; 1085 :                 goto code_error;
; 1086 :             firstlineno = (int)r_long(p);

  009d7	48 8b cf	 mov	 rcx, rdi
  009da	e8 00 00 00 00	 call	 r_long

; 1087 :             lnotab = r_object(p);

  009df	48 8b cf	 mov	 rcx, rdi
  009e2	89 85 20 01 00
	00		 mov	 DWORD PTR firstlineno$1$[rbp-256], eax
  009e8	e8 00 00 00 00	 call	 r_object
  009ed	48 89 45 80	 mov	 QWORD PTR lnotab$1$[rbp-256], rax

; 1088 :             if (lnotab == NULL)

  009f1	48 85 c0	 test	 rax, rax
  009f4	74 79		 je	 SHORT $code_error$21068

; 1089 :                 goto code_error;
; 1090 : 
; 1091 :             v = (PyObject *) PyCode_New(
; 1092 :                             argcount, kwonlyargcount,
; 1093 :                             nlocals, stacksize, flags,
; 1094 :                             code, consts, names, varnames,
; 1095 :                             freevars, cellvars, filename, name,
; 1096 :                             firstlineno, lnotab);

  009f6	48 8b 4d b0	 mov	 rcx, QWORD PTR varnames$1$[rbp-256]
  009fa	44 8b 8d 30 01
	00 00		 mov	 r9d, DWORD PTR stacksize$1$[rbp-256]
  00a01	44 8b 85 38 01
	00 00		 mov	 r8d, DWORD PTR nlocals$1$[rbp-256]
  00a08	8b 55 a8	 mov	 edx, DWORD PTR kwonlyargcount$1$[rbp-256]
  00a0b	48 89 44 24 70	 mov	 QWORD PTR [rsp+112], rax
  00a10	8b 85 20 01 00
	00		 mov	 eax, DWORD PTR firstlineno$1$[rbp-256]
  00a16	89 44 24 68	 mov	 DWORD PTR [rsp+104], eax
  00a1a	48 8b 45 98	 mov	 rax, QWORD PTR name$1$[rbp-256]
  00a1e	48 89 44 24 60	 mov	 QWORD PTR [rsp+96], rax
  00a23	48 8b 45 90	 mov	 rax, QWORD PTR cellvars$1$[rbp-256]
  00a27	48 89 74 24 58	 mov	 QWORD PTR [rsp+88], rsi
  00a2c	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  00a31	48 8b 45 c0	 mov	 rax, QWORD PTR freevars$1$[rbp-256]
  00a35	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00a3a	48 8b 45 a0	 mov	 rax, QWORD PTR names$1$[rbp-256]
  00a3e	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00a43	8b 4d b8	 mov	 ecx, DWORD PTR argcount$1$[rbp-256]
  00a46	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00a4b	48 8b 45 d0	 mov	 rax, QWORD PTR consts$1$[rbp-256]
  00a4f	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00a54	48 8b 45 c8	 mov	 rax, QWORD PTR code$1$[rbp-256]
  00a58	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00a5d	8b 85 28 01 00
	00		 mov	 eax, DWORD PTR flags$1$[rbp-256]
  00a63	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00a67	e8 00 00 00 00	 call	 PyCode_New
  00a6c	48 8b d8	 mov	 rbx, rax
$code_error$21068:

; 1097 : 
; 1098 :           code_error:
; 1099 :             Py_XDECREF(code);

  00a6f	48 8b 4d c8	 mov	 rcx, QWORD PTR code$1$[rbp-256]
  00a73	e8 00 00 00 00	 call	 _Py_DecRef

; 1100 :             Py_XDECREF(consts);

  00a78	48 8b 45 d0	 mov	 rax, QWORD PTR consts$1$[rbp-256]
  00a7c	48 85 c0	 test	 rax, rax
  00a7f	74 08		 je	 SHORT $LN32@r_object
  00a81	48 8b c8	 mov	 rcx, rax
  00a84	e8 00 00 00 00	 call	 _Py_DecRef
$LN32@r_object:

; 1101 :             Py_XDECREF(names);

  00a89	48 8b 45 a0	 mov	 rax, QWORD PTR names$1$[rbp-256]
  00a8d	48 85 c0	 test	 rax, rax
  00a90	74 08		 je	 SHORT $LN28@r_object
  00a92	48 8b c8	 mov	 rcx, rax
  00a95	e8 00 00 00 00	 call	 _Py_DecRef
$LN28@r_object:

; 1102 :             Py_XDECREF(varnames);

  00a9a	48 8b 45 b0	 mov	 rax, QWORD PTR varnames$1$[rbp-256]
  00a9e	48 85 c0	 test	 rax, rax
  00aa1	74 08		 je	 SHORT $LN24@r_object
  00aa3	48 8b c8	 mov	 rcx, rax
  00aa6	e8 00 00 00 00	 call	 _Py_DecRef
$LN24@r_object:

; 1103 :             Py_XDECREF(freevars);

  00aab	48 8b 45 c0	 mov	 rax, QWORD PTR freevars$1$[rbp-256]
  00aaf	48 85 c0	 test	 rax, rax
  00ab2	74 08		 je	 SHORT $LN20@r_object
  00ab4	48 8b c8	 mov	 rcx, rax
  00ab7	e8 00 00 00 00	 call	 _Py_DecRef
$LN20@r_object:

; 1104 :             Py_XDECREF(cellvars);

  00abc	48 8b 45 90	 mov	 rax, QWORD PTR cellvars$1$[rbp-256]
  00ac0	48 85 c0	 test	 rax, rax
  00ac3	74 08		 je	 SHORT $LN16@r_object
  00ac5	48 8b c8	 mov	 rcx, rax
  00ac8	e8 00 00 00 00	 call	 _Py_DecRef
$LN16@r_object:

; 1105 :             Py_XDECREF(filename);

  00acd	48 85 f6	 test	 rsi, rsi
  00ad0	74 08		 je	 SHORT $LN12@r_object
  00ad2	48 8b ce	 mov	 rcx, rsi
  00ad5	e8 00 00 00 00	 call	 _Py_DecRef
$LN12@r_object:

; 1106 :             Py_XDECREF(name);

  00ada	48 8b 45 98	 mov	 rax, QWORD PTR name$1$[rbp-256]
  00ade	48 85 c0	 test	 rax, rax
  00ae1	74 08		 je	 SHORT $LN8@r_object
  00ae3	48 8b c8	 mov	 rcx, rax
  00ae6	e8 00 00 00 00	 call	 _Py_DecRef
$LN8@r_object:

; 1107 :             Py_XDECREF(lnotab);

  00aeb	48 8b 45 80	 mov	 rax, QWORD PTR lnotab$1$[rbp-256]
  00aef	48 85 c0	 test	 rax, rax
  00af2	74 1f		 je	 SHORT $LN140@r_object
  00af4	48 8b c8	 mov	 rcx, rax
  00af7	e8 00 00 00 00	 call	 _Py_DecRef

; 1108 :         }
; 1109 :         retval = v;
; 1110 :         break;

  00afc	eb 15		 jmp	 SHORT $LN140@r_object
$LN1@r_object:

; 1111 : 
; 1112 :     default:
; 1113 :         /* Bogus data got written, which isn't ideal.
; 1114 :            This will let you keep working and recover. */
; 1115 :         PyErr_SetString(PyExc_ValueError, "bad marshal data (unknown type code)");

  00afe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@HHIDIMHG@bad?5marshal?5data?5?$CIunknown?5type?5c@
$LN177@r_object:
  00b05	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
$LN176@r_object:
  00b0c	e8 00 00 00 00	 call	 PyErr_SetString
$LN138@r_object:

; 1116 :         retval = NULL;

  00b11	33 db		 xor	 ebx, ebx
$LN140@r_object:

; 1117 :         break;
; 1118 : 
; 1119 :     }
; 1120 :     p->depth--;

  00b13	ff 4f 0c	 dec	 DWORD PTR [rdi+12]
  00b16	0f 28 b4 24 e0
	01 00 00	 movaps	 xmm6, XMMWORD PTR [rsp+480]
  00b1e	48 8b b4 24 f8
	01 00 00	 mov	 rsi, QWORD PTR [rsp+504]

; 1121 :     return retval;

  00b26	48 8b c3	 mov	 rax, rbx

; 1122 : }

  00b29	48 81 c4 00 02
	00 00		 add	 rsp, 512		; 00000200H
  00b30	5f		 pop	 rdi
  00b31	5b		 pop	 rbx
  00b32	5d		 pop	 rbp
  00b33	c3		 ret	 0
$LN175@r_object:
  00b34	00 00 00 00	 DD	 $LN139@r_object
  00b38	00 00 00 00	 DD	 $LN98@r_object
  00b3c	00 00 00 00	 DD	 $LN135@r_object
  00b40	00 00 00 00	 DD	 $LN138@r_object
  00b44	00 00 00 00	 DD	 $LN67@r_object
  00b48	00 00 00 00	 DD	 $LN134@r_object
  00b4c	00 00 00 00	 DD	 $LN131@r_object
  00b50	00 00 00 00	 DD	 $LN137@r_object
  00b54	00 00 00 00	 DD	 $LN136@r_object
  00b58	00 00 00 00	 DD	 $LN133@r_object
  00b5c	00 00 00 00	 DD	 $LN88@r_object
  00b60	00 00 00 00	 DD	 $LN56@r_object
  00b64	00 00 00 00	 DD	 $LN129@r_object
  00b68	00 00 00 00	 DD	 $LN125@r_object
  00b6c	00 00 00 00	 DD	 $LN132@r_object
  00b70	00 00 00 00	 DD	 $LN130@r_object
  00b74	00 00 00 00	 DD	 $LN110@r_object
  00b78	00 00 00 00	 DD	 $LN104@r_object
  00b7c	00 00 00 00	 DD	 $LN122@r_object
  00b80	00 00 00 00	 DD	 $LN115@r_object
  00b84	00 00 00 00	 DD	 $LN78@r_object
  00b88	00 00 00 00	 DD	 $LN1@r_object
$LN174@r_object:
  00b8c	00		 DB	 0
  00b8d	15		 DB	 21
  00b8e	15		 DB	 21
  00b8f	15		 DB	 21
  00b90	15		 DB	 21
  00b91	15		 DB	 21
  00b92	15		 DB	 21
  00b93	15		 DB	 21
  00b94	15		 DB	 21
  00b95	15		 DB	 21
  00b96	15		 DB	 21
  00b97	15		 DB	 21
  00b98	15		 DB	 21
  00b99	15		 DB	 21
  00b9a	15		 DB	 21
  00b9b	15		 DB	 21
  00b9c	15		 DB	 21
  00b9d	15		 DB	 21
  00b9e	15		 DB	 21
  00b9f	15		 DB	 21
  00ba0	15		 DB	 21
  00ba1	15		 DB	 21
  00ba2	15		 DB	 21
  00ba3	15		 DB	 21
  00ba4	15		 DB	 21
  00ba5	15		 DB	 21
  00ba6	15		 DB	 21
  00ba7	15		 DB	 21
  00ba8	15		 DB	 21
  00ba9	15		 DB	 21
  00baa	15		 DB	 21
  00bab	15		 DB	 21
  00bac	15		 DB	 21
  00bad	15		 DB	 21
  00bae	15		 DB	 21
  00baf	15		 DB	 21
  00bb0	15		 DB	 21
  00bb1	15		 DB	 21
  00bb2	15		 DB	 21
  00bb3	15		 DB	 21
  00bb4	15		 DB	 21
  00bb5	01		 DB	 1
  00bb6	15		 DB	 21
  00bb7	15		 DB	 21
  00bb8	15		 DB	 21
  00bb9	15		 DB	 21
  00bba	15		 DB	 21
  00bbb	02		 DB	 2
  00bbc	15		 DB	 21
  00bbd	03		 DB	 3
  00bbe	15		 DB	 21
  00bbf	15		 DB	 21
  00bc0	15		 DB	 21
  00bc1	15		 DB	 21
  00bc2	15		 DB	 21
  00bc3	15		 DB	 21
  00bc4	15		 DB	 21
  00bc5	15		 DB	 21
  00bc6	15		 DB	 21
  00bc7	15		 DB	 21
  00bc8	15		 DB	 21
  00bc9	04		 DB	 4
  00bca	15		 DB	 21
  00bcb	04		 DB	 4
  00bcc	15		 DB	 21
  00bcd	15		 DB	 21
  00bce	15		 DB	 21
  00bcf	15		 DB	 21
  00bd0	15		 DB	 21
  00bd1	15		 DB	 21
  00bd2	15		 DB	 21
  00bd3	05		 DB	 5
  00bd4	15		 DB	 21
  00bd5	15		 DB	 21
  00bd6	06		 DB	 6
  00bd7	15		 DB	 21
  00bd8	15		 DB	 21
  00bd9	15		 DB	 21
  00bda	15		 DB	 21
  00bdb	07		 DB	 7
  00bdc	15		 DB	 21
  00bdd	15		 DB	 21
  00bde	15		 DB	 21
  00bdf	15		 DB	 21
  00be0	08		 DB	 8
  00be1	09		 DB	 9
  00be2	15		 DB	 21
  00be3	15		 DB	 21
  00be4	15		 DB	 21
  00be5	15		 DB	 21
  00be6	15		 DB	 21
  00be7	15		 DB	 21
  00be8	0a		 DB	 10
  00be9	15		 DB	 21
  00bea	15		 DB	 21
  00beb	15		 DB	 21
  00bec	15		 DB	 21
  00bed	15		 DB	 21
  00bee	15		 DB	 21
  00bef	15		 DB	 21
  00bf0	0b		 DB	 11
  00bf1	15		 DB	 21
  00bf2	15		 DB	 21
  00bf3	0c		 DB	 12
  00bf4	0d		 DB	 13
  00bf5	15		 DB	 21
  00bf6	0e		 DB	 14
  00bf7	15		 DB	 21
  00bf8	15		 DB	 21
  00bf9	0f		 DB	 15
  00bfa	15		 DB	 21
  00bfb	15		 DB	 21
  00bfc	15		 DB	 21
  00bfd	15		 DB	 21
  00bfe	15		 DB	 21
  00bff	15		 DB	 21
  00c00	10		 DB	 16
  00c01	15		 DB	 21
  00c02	11		 DB	 17
  00c03	15		 DB	 21
  00c04	15		 DB	 21
  00c05	12		 DB	 18
  00c06	13		 DB	 19
  00c07	15		 DB	 21
  00c08	14		 DB	 20
r_object ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@DEBICIBJ@NULL?5object?5in?5marshal?5data?5for?5@ ; `string'
PUBLIC	??_C@_0CK@PDHBPEAP@XXX?5readobject?5called?5with?5excep@ ; `string'
EXTRN	__imp_fprintf:PROC
EXTRN	__imp___iob_func:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$read_object DD imagerel read_object
	DD	imagerel read_object+104
	DD	imagerel $unwind$read_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$read_object DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0CH@DEBICIBJ@NULL?5object?5in?5marshal?5data?5for?5@
CONST	SEGMENT
??_C@_0CH@DEBICIBJ@NULL?5object?5in?5marshal?5data?5for?5@ DB 'NULL objec'
	DB	't in marshal data for object', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@PDHBPEAP@XXX?5readobject?5called?5with?5excep@
CONST	SEGMENT
??_C@_0CK@PDHBPEAP@XXX?5readobject?5called?5with?5excep@ DB 'XXX readobje'
	DB	'ct called with exception set', 0aH, 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT read_object
_TEXT	SEGMENT
p$ = 48
read_object PROC					; COMDAT

; 1126 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 1127 :     PyObject *v;
; 1128 :     if (PyErr_Occurred()) {

  00009	e8 00 00 00 00	 call	 PyErr_Occurred
  0000e	48 85 c0	 test	 rax, rax
  00011	74 1f		 je	 SHORT $LN2@read_objec

; 1129 :         fprintf(stderr, "XXX readobject called with exception set\n");

  00013	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00019	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@PDHBPEAP@XXX?5readobject?5called?5with?5excep@
  00020	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  00024	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 1130 :         return NULL;

  0002a	33 c0		 xor	 eax, eax

; 1136 : }

  0002c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00030	5b		 pop	 rbx
  00031	c3		 ret	 0
$LN2@read_objec:

; 1131 :     }
; 1132 :     v = r_object(p);

  00032	48 8b cb	 mov	 rcx, rbx
  00035	e8 00 00 00 00	 call	 r_object
  0003a	48 8b d8	 mov	 rbx, rax

; 1133 :     if (v == NULL && !PyErr_Occurred())

  0003d	48 85 c0	 test	 rax, rax
  00040	75 1d		 jne	 SHORT $LN1@read_objec
  00042	e8 00 00 00 00	 call	 PyErr_Occurred
  00047	48 85 c0	 test	 rax, rax
  0004a	75 13		 jne	 SHORT $LN1@read_objec

; 1134 :         PyErr_SetString(PyExc_TypeError, "NULL object in marshal data for object");

  0004c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00053	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@DEBICIBJ@NULL?5object?5in?5marshal?5data?5for?5@
  0005a	e8 00 00 00 00	 call	 PyErr_SetString
$LN1@read_objec:

; 1135 :     return v;

  0005f	48 8b c3	 mov	 rax, rbx

; 1136 : }

  00062	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00066	5b		 pop	 rbx
  00067	c3		 ret	 0
read_object ENDP
_TEXT	ENDS
PUBLIC	PyMarshal_ReadShortFromFile
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyMarshal_ReadShortFromFile DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$PyMarshal_ReadShortFromFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMarshal_ReadShortFromFile DD 010401H
	DD	0c204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyMarshal_ReadShortFromFile
_TEXT	SEGMENT
rf$ = 32
fp$ = 112
PyMarshal_ReadShortFromFile PROC			; COMDAT

; 1140 : {

$LN3:
  00000	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1141 :     RFILE rf;
; 1142 :     assert(fp);
; 1143 :     rf.readable = NULL;

  00004	33 c0		 xor	 eax, eax

; 1144 :     rf.fp = fp;

  00006	48 89 4c 24 20	 mov	 QWORD PTR rf$[rsp], rcx

; 1145 :     rf.current_filename = NULL;
; 1146 :     rf.end = rf.ptr = NULL;
; 1147 :     return r_short(&rf);

  0000b	48 8d 4c 24 20	 lea	 rcx, QWORD PTR rf$[rsp]
  00010	48 89 44 24 30	 mov	 QWORD PTR rf$[rsp+16], rax
  00015	48 89 44 24 40	 mov	 QWORD PTR rf$[rsp+32], rax
  0001a	48 89 44 24 48	 mov	 QWORD PTR rf$[rsp+40], rax
  0001f	48 89 44 24 50	 mov	 QWORD PTR rf$[rsp+48], rax
  00024	e8 00 00 00 00	 call	 r_short

; 1148 : }

  00029	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0002d	c3		 ret	 0
PyMarshal_ReadShortFromFile ENDP
_TEXT	ENDS
PUBLIC	PyMarshal_ReadLongFromFile
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyMarshal_ReadLongFromFile DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$PyMarshal_ReadLongFromFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMarshal_ReadLongFromFile DD 010401H
	DD	0c204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyMarshal_ReadLongFromFile
_TEXT	SEGMENT
rf$ = 32
fp$ = 112
PyMarshal_ReadLongFromFile PROC				; COMDAT

; 1152 : {

$LN3:
  00000	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1153 :     RFILE rf;
; 1154 :     rf.fp = fp;
; 1155 :     rf.readable = NULL;

  00004	33 c0		 xor	 eax, eax
  00006	48 89 4c 24 20	 mov	 QWORD PTR rf$[rsp], rcx

; 1156 :     rf.current_filename = NULL;
; 1157 :     rf.ptr = rf.end = NULL;
; 1158 :     return r_long(&rf);

  0000b	48 8d 4c 24 20	 lea	 rcx, QWORD PTR rf$[rsp]
  00010	48 89 44 24 30	 mov	 QWORD PTR rf$[rsp+16], rax
  00015	48 89 44 24 40	 mov	 QWORD PTR rf$[rsp+32], rax
  0001a	48 89 44 24 50	 mov	 QWORD PTR rf$[rsp+48], rax
  0001f	48 89 44 24 48	 mov	 QWORD PTR rf$[rsp+40], rax
  00024	e8 00 00 00 00	 call	 r_long

; 1159 : }

  00029	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0002d	c3		 ret	 0
PyMarshal_ReadLongFromFile ENDP
_TEXT	ENDS
EXTRN	__imp_fileno:PROC
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\sys\stat.inl
pdata	SEGMENT
$pdata$getfilesize DD imagerel getfilesize
	DD	imagerel getfilesize+42
	DD	imagerel $unwind$getfilesize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getfilesize DD 010401H
	DD	0a204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\marshal.c
xdata	ENDS
;	COMDAT getfilesize
_TEXT	SEGMENT
st$ = 32
fp$ = 96
getfilesize PROC					; COMDAT

; 1165 : {

  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1166 :     struct stat st;
; 1167 :     if (fstat(fileno(fp), &st) != 0)

  00004	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno
  0000a	48 8d 54 24 20	 lea	 rdx, QWORD PTR st$[rsp]
  0000f	8b c8		 mov	 ecx, eax
  00011	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__fstat64i32
  00017	8b 4c 24 34	 mov	 ecx, DWORD PTR st$[rsp+20]
  0001b	83 ca ff	 or	 edx, -1
  0001e	85 c0		 test	 eax, eax
  00020	0f 45 ca	 cmovne	 ecx, edx
  00023	8b c1		 mov	 eax, ecx

; 1168 :         return -1;
; 1169 :     else
; 1170 :         return st.st_size;
; 1171 : }

  00025	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00029	c3		 ret	 0
getfilesize ENDP
_TEXT	ENDS
PUBLIC	PyMarshal_ReadObjectFromFile
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyMarshal_ReadObjectFromFile DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$PyMarshal_ReadObjectFromFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMarshal_ReadObjectFromFile DD 010401H
	DD	0c204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyMarshal_ReadObjectFromFile
_TEXT	SEGMENT
rf$ = 32
fp$ = 112
PyMarshal_ReadObjectFromFile PROC			; COMDAT

; 1209 : {

$LN3:
  00000	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1210 :     RFILE rf;
; 1211 :     PyObject *result;
; 1212 :     rf.fp = fp;
; 1213 :     rf.readable = NULL;

  00004	33 c0		 xor	 eax, eax
  00006	48 89 4c 24 20	 mov	 QWORD PTR rf$[rsp], rcx

; 1214 :     rf.current_filename = NULL;
; 1215 :     rf.depth = 0;
; 1216 :     rf.ptr = rf.end = NULL;
; 1217 :     result = r_object(&rf);

  0000b	48 8d 4c 24 20	 lea	 rcx, QWORD PTR rf$[rsp]
  00010	48 89 44 24 30	 mov	 QWORD PTR rf$[rsp+16], rax
  00015	48 89 44 24 40	 mov	 QWORD PTR rf$[rsp+32], rax
  0001a	89 44 24 2c	 mov	 DWORD PTR rf$[rsp+12], eax
  0001e	48 89 44 24 50	 mov	 QWORD PTR rf$[rsp+48], rax
  00023	48 89 44 24 48	 mov	 QWORD PTR rf$[rsp+40], rax
  00028	e8 00 00 00 00	 call	 r_object

; 1218 :     return result;
; 1219 : }

  0002d	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00031	c3		 ret	 0
PyMarshal_ReadObjectFromFile ENDP
_TEXT	ENDS
PUBLIC	PyMarshal_ReadObjectFromString
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyMarshal_ReadObjectFromString DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$PyMarshal_ReadObjectFromString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMarshal_ReadObjectFromString DD 010701H
	DD	0c207H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyMarshal_ReadObjectFromString
_TEXT	SEGMENT
str$ = 112
len$ = 120
PyMarshal_ReadObjectFromString PROC			; COMDAT

; 1223 : {

$LN3:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1224 :     RFILE rf;
; 1225 :     PyObject *result;
; 1226 :     rf.fp = NULL;

  00007	45 33 c0	 xor	 r8d, r8d

; 1227 :     rf.readable = NULL;
; 1228 :     rf.current_filename = NULL;
; 1229 :     rf.ptr = str;
; 1230 :     rf.end = str + len;

  0000a	48 8d 04 11	 lea	 rax, QWORD PTR [rcx+rdx]
  0000e	49 89 4b e0	 mov	 QWORD PTR [r11-32], rcx

; 1231 :     rf.depth = 0;
; 1232 :     result = r_object(&rf);

  00012	49 8d 4b b8	 lea	 rcx, QWORD PTR [r11-72]
  00016	49 89 43 e8	 mov	 QWORD PTR [r11-24], rax
  0001a	4d 89 43 b8	 mov	 QWORD PTR [r11-72], r8
  0001e	4d 89 43 c8	 mov	 QWORD PTR [r11-56], r8
  00022	4d 89 43 d8	 mov	 QWORD PTR [r11-40], r8
  00026	45 89 43 c4	 mov	 DWORD PTR [r11-60], r8d
  0002a	e8 00 00 00 00	 call	 r_object

; 1233 :     return result;
; 1234 : }

  0002f	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00033	c3		 ret	 0
PyMarshal_ReadObjectFromString ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@KIEDCEAF@object?5too?5deeply?5nested?5to?5mars@ ; `string'
PUBLIC	??_C@_0BG@GDKMCPFP@unmarshallable?5object?$AA@	; `string'
PUBLIC	??_C@_0CD@NNHJLEJO@too?5much?5marshal?5data?5for?5a?5stri@ ; `string'
PUBLIC	PyMarshal_WriteObjectToString
EXTRN	PyExc_OverflowError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyMarshal_WriteObjectToString DD imagerel $LN16
	DD	imagerel $LN16+325
	DD	imagerel $unwind$PyMarshal_WriteObjectToString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMarshal_WriteObjectToString DD 060f01H
	DD	0f640fH
	DD	0e340fH
	DD	0700bb20fH
xdata	ENDS
;	COMDAT ??_C@_0CE@KIEDCEAF@object?5too?5deeply?5nested?5to?5mars@
CONST	SEGMENT
??_C@_0CE@KIEDCEAF@object?5too?5deeply?5nested?5to?5mars@ DB 'object too '
	DB	'deeply nested to marshal', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GDKMCPFP@unmarshallable?5object?$AA@
CONST	SEGMENT
??_C@_0BG@GDKMCPFP@unmarshallable?5object?$AA@ DB 'unmarshallable object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@NNHJLEJO@too?5much?5marshal?5data?5for?5a?5stri@
CONST	SEGMENT
??_C@_0CD@NNHJLEJO@too?5much?5marshal?5data?5for?5a?5stri@ DB 'too much m'
	DB	'arshal data for a string', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyMarshal_WriteObjectToString
_TEXT	SEGMENT
wf$ = 32
x$ = 112
version$ = 120
PyMarshal_WriteObjectToString PROC			; COMDAT

; 1238 : {

$LN16:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 60	 sub	 rsp, 96			; 00000060H

; 1239 :     WFILE wf;
; 1240 : 
; 1241 :     wf.fp = NULL;

  0000f	33 f6		 xor	 esi, esi
  00011	8b da		 mov	 ebx, edx
  00013	48 8b f9	 mov	 rdi, rcx

; 1242 :     wf.readable = NULL;
; 1243 :     wf.str = PyBytes_FromStringAndSize((char *)NULL, 50);

  00016	8d 56 32	 lea	 edx, QWORD PTR [rsi+50]
  00019	33 c9		 xor	 ecx, ecx
  0001b	48 89 74 24 20	 mov	 QWORD PTR wf$[rsp], rsi
  00020	48 89 74 24 30	 mov	 QWORD PTR wf$[rsp+16], rsi
  00025	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  0002a	48 8b c8	 mov	 rcx, rax
  0002d	48 89 44 24 38	 mov	 QWORD PTR wf$[rsp+24], rax

; 1244 :     if (wf.str == NULL)

  00032	48 85 c0	 test	 rax, rax

; 1245 :         return NULL;

  00035	74 6e		 je	 SHORT $LN15@PyMarshal_

; 1246 :     wf.ptr = PyBytes_AS_STRING((PyBytesObject *)wf.str);

  00037	48 83 c0 78	 add	 rax, 120		; 00000078H
  0003b	48 89 44 24 48	 mov	 QWORD PTR wf$[rsp+40], rax

; 1247 :     wf.end = wf.ptr + PyBytes_Size(wf.str);

  00040	e8 00 00 00 00	 call	 PyBytes_Size

; 1248 :     wf.error = WFERR_OK;
; 1249 :     wf.depth = 0;
; 1250 :     wf.version = version;
; 1251 :     w_object(x, &wf);

  00045	48 8d 54 24 20	 lea	 rdx, QWORD PTR wf$[rsp]
  0004a	48 03 44 24 48	 add	 rax, QWORD PTR wf$[rsp+40]
  0004f	48 8b cf	 mov	 rcx, rdi
  00052	48 89 74 24 28	 mov	 QWORD PTR wf$[rsp+8], rsi
  00057	48 89 44 24 50	 mov	 QWORD PTR wf$[rsp+48], rax
  0005c	89 5c 24 58	 mov	 DWORD PTR wf$[rsp+56], ebx
  00060	e8 00 00 00 00	 call	 w_object

; 1252 :     if (wf.str != NULL) {

  00065	4c 8b 5c 24 38	 mov	 r11, QWORD PTR wf$[rsp+24]
  0006a	4d 85 db	 test	 r11, r11
  0006d	74 5b		 je	 SHORT $LN8@PyMarshal_

; 1253 :         char *base = PyBytes_AS_STRING((PyBytesObject *)wf.str);
; 1254 :         if (wf.ptr - base > PY_SSIZE_T_MAX) {

  0006f	48 8b 54 24 48	 mov	 rdx, QWORD PTR wf$[rsp+40]
  00074	49 8d 43 78	 lea	 rax, QWORD PTR [r11+120]
  00078	48 2b d0	 sub	 rdx, rax
  0007b	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  00085	48 3b d0	 cmp	 rdx, rax
  00088	7e 2d		 jle	 SHORT $LN9@PyMarshal_

; 1255 :             Py_DECREF(wf.str);

  0008a	49 8b cb	 mov	 rcx, r11
  0008d	e8 00 00 00 00	 call	 _Py_DecRef

; 1256 :             PyErr_SetString(PyExc_OverflowError,
; 1257 :                             "too much marshal data for a string");

  00092	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  00099	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@NNHJLEJO@too?5much?5marshal?5data?5for?5a?5stri@
  000a0	e8 00 00 00 00	 call	 PyErr_SetString
$LN15@PyMarshal_:

; 1258 :             return NULL;

  000a5	33 c0		 xor	 eax, eax

; 1272 :     }
; 1273 :     return wf.str;
; 1274 : }

  000a7	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  000ac	48 8b 74 24 78	 mov	 rsi, QWORD PTR [rsp+120]
  000b1	48 83 c4 60	 add	 rsp, 96			; 00000060H
  000b5	5f		 pop	 rdi
  000b6	c3		 ret	 0
$LN9@PyMarshal_:

; 1259 :         }
; 1260 :         if (_PyBytes_Resize(&wf.str, (Py_ssize_t)(wf.ptr - base)) < 0)

  000b7	48 8d 4c 24 38	 lea	 rcx, QWORD PTR wf$[rsp+24]
  000bc	e8 00 00 00 00	 call	 _PyBytes_Resize
  000c1	85 c0		 test	 eax, eax

; 1261 :             return NULL;

  000c3	78 e0		 js	 SHORT $LN15@PyMarshal_
  000c5	4c 8b 5c 24 38	 mov	 r11, QWORD PTR wf$[rsp+24]
$LN8@PyMarshal_:

; 1262 :     }
; 1263 :     if (wf.error != WFERR_OK) {

  000ca	8b 44 24 28	 mov	 eax, DWORD PTR wf$[rsp+8]
  000ce	85 c0		 test	 eax, eax
  000d0	74 60		 je	 SHORT $LN7@PyMarshal_

; 1264 :         Py_XDECREF(wf.str);

  000d2	4d 85 db	 test	 r11, r11
  000d5	74 0c		 je	 SHORT $LN5@PyMarshal_
  000d7	49 8b cb	 mov	 rcx, r11
  000da	e8 00 00 00 00	 call	 _Py_DecRef
  000df	8b 44 24 28	 mov	 eax, DWORD PTR wf$[rsp+8]
$LN5@PyMarshal_:

; 1265 :         if (wf.error == WFERR_NOMEMORY)

  000e3	83 f8 03	 cmp	 eax, 3
  000e6	75 17		 jne	 SHORT $LN2@PyMarshal_

; 1266 :             PyErr_NoMemory();

  000e8	e8 00 00 00 00	 call	 PyErr_NoMemory

; 1271 :         return NULL;

  000ed	33 c0		 xor	 eax, eax

; 1272 :     }
; 1273 :     return wf.str;
; 1274 : }

  000ef	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  000f4	48 8b 74 24 78	 mov	 rsi, QWORD PTR [rsp+120]
  000f9	48 83 c4 60	 add	 rsp, 96			; 00000060H
  000fd	5f		 pop	 rdi
  000fe	c3		 ret	 0
$LN2@PyMarshal_:

; 1267 :         else
; 1268 :             PyErr_SetString(PyExc_ValueError,
; 1269 :               (wf.error==WFERR_UNMARSHALLABLE)?"unmarshallable object"
; 1270 :                :"object too deeply nested to marshal");

  000ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@GDKMCPFP@unmarshallable?5object?$AA@
  00106	83 f8 01	 cmp	 eax, 1
  00109	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@KIEDCEAF@object?5too?5deeply?5nested?5to?5mars@
  00110	48 0f 44 d1	 cmove	 rdx, rcx
  00114	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0011b	e8 00 00 00 00	 call	 PyErr_SetString

; 1271 :         return NULL;

  00120	33 c0		 xor	 eax, eax

; 1272 :     }
; 1273 :     return wf.str;
; 1274 : }

  00122	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  00127	48 8b 74 24 78	 mov	 rsi, QWORD PTR [rsp+120]
  0012c	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00130	5f		 pop	 rdi
  00131	c3		 ret	 0
$LN7@PyMarshal_:
  00132	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  00137	48 8b 74 24 78	 mov	 rsi, QWORD PTR [rsp+120]
  0013c	49 8b c3	 mov	 rax, r11
  0013f	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00143	5f		 pop	 rdi
  00144	c3		 ret	 0
PyMarshal_WriteObjectToString ENDP
_TEXT	ENDS
PUBLIC	??_C@_01MJMHLOMK@O?$AA@				; `string'
PUBLIC	??_C@_09GNLMAOPG@OO?$HMi?3dump?$AA@		; `string'
EXTRN	_PyArg_ParseTuple_SizeT:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$marshal_dump DD imagerel marshal_dump
	DD	imagerel marshal_dump+70
	DD	imagerel $unwind$marshal_dump
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$marshal_dump DD imagerel marshal_dump+70
	DD	imagerel marshal_dump+98
	DD	imagerel $chain$0$marshal_dump
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$marshal_dump DD imagerel marshal_dump+98
	DD	imagerel marshal_dump+176
	DD	imagerel $chain$3$marshal_dump
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$marshal_dump DD 042c21H
	DD	0a342cH
	DD	087400H
	DD	imagerel marshal_dump
	DD	imagerel marshal_dump+70
	DD	imagerel $unwind$marshal_dump
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$marshal_dump DD 020521H
	DD	087405H
	DD	imagerel marshal_dump
	DD	imagerel marshal_dump+70
	DD	imagerel $unwind$marshal_dump
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$marshal_dump DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_01MJMHLOMK@O?$AA@
CONST	SEGMENT
??_C@_01MJMHLOMK@O?$AA@ DB 'O', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09GNLMAOPG@OO?$HMi?3dump?$AA@
CONST	SEGMENT
??_C@_09GNLMAOPG@OO?$HMi?3dump?$AA@ DB 'OO|i:dump', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT marshal_dump
_TEXT	SEGMENT
f$ = 48
self$ = 80
args$ = 88
version$ = 96
x$ = 104
marshal_dump PROC					; COMDAT

; 1280 : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00004	48 8b c2	 mov	 rax, rdx

; 1281 :     /* XXX Quick hack -- need to do this differently */
; 1282 :     PyObject *x;
; 1283 :     PyObject *f;
; 1284 :     int version = Py_MARSHAL_VERSION;
; 1285 :     PyObject *s;
; 1286 :     PyObject *res;
; 1287 :     _Py_IDENTIFIER(write);
; 1288 : 
; 1289 :     if (!PyArg_ParseTuple(args, "OO|i:dump", &x, &f, &version))

  00007	48 8d 4c 24 60	 lea	 rcx, QWORD PTR version$[rsp]
  0000c	4c 8d 4c 24 30	 lea	 r9, QWORD PTR f$[rsp]
  00011	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00016	4c 8d 44 24 68	 lea	 r8, QWORD PTR x$[rsp]
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09GNLMAOPG@OO?$HMi?3dump?$AA@
  00022	48 8b c8	 mov	 rcx, rax
  00025	c7 44 24 60 02
	00 00 00	 mov	 DWORD PTR version$[rsp], 2
  0002d	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00032	85 c0		 test	 eax, eax
  00034	75 07		 jne	 SHORT $LN2@marshal_du

; 1290 :         return NULL;

  00036	33 c0		 xor	 eax, eax

; 1297 : }

  00038	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0003c	c3		 ret	 0
$LN2@marshal_du:

; 1291 :     s = PyMarshal_WriteObjectToString(x, version);

  0003d	8b 54 24 60	 mov	 edx, DWORD PTR version$[rsp]
  00041	48 8b 4c 24 68	 mov	 rcx, QWORD PTR x$[rsp]
  00046	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  0004b	e8 00 00 00 00	 call	 PyMarshal_WriteObjectToString
  00050	48 8b f8	 mov	 rdi, rax

; 1292 :     if (s == NULL)

  00053	48 85 c0	 test	 rax, rax
  00056	75 0a		 jne	 SHORT $LN1@marshal_du
  00058	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 1297 : }

  0005d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00061	c3		 ret	 0
$LN1@marshal_du:

; 1293 :         return NULL;
; 1294 :     res = _PyObject_CallMethodId(f, &PyId_write, "O", s);

  00062	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00068	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00071	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_write@?1??marshal_dump@@9@9
  00076	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  0007a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR f$[rsp]
  0007f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01MJMHLOMK@O?$AA@
  00086	4c 8b cf	 mov	 r9, rdi
  00089	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  0008e	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT

; 1295 :     Py_DECREF(s);

  00093	48 8b cf	 mov	 rcx, rdi
  00096	48 8b d8	 mov	 rbx, rax
  00099	e8 00 00 00 00	 call	 _Py_DecRef
  0009e	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 1296 :     return res;

  000a3	48 8b c3	 mov	 rax, rbx
  000a6	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]

; 1297 : }

  000ab	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000af	c3		 ret	 0
marshal_dump ENDP
_TEXT	ENDS
PUBLIC	??_C@_01KBJDNOO@i?$AA@				; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$marshal_load DD imagerel marshal_load
	DD	imagerel marshal_load+184
	DD	imagerel $unwind$marshal_load
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$marshal_load DD 065301H
	DD	0e3453H
	DD	0f640aH
	DD	07006b20aH
xdata	ENDS
;	COMDAT ??_C@_01KBJDNOO@i?$AA@
CONST	SEGMENT
??_C@_01KBJDNOO@i?$AA@ DB 'i', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT marshal_load
_TEXT	SEGMENT
rf$ = 32
self$ = 112
f$ = 120
marshal_load PROC					; COMDAT

; 1314 : {

  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 60	 sub	 rsp, 96			; 00000060H

; 1315 :     PyObject *data, *result;
; 1316 :     _Py_IDENTIFIER(read);
; 1317 :     RFILE rf;
; 1318 : 
; 1319 :     /*
; 1320 :      * Make a call to the read method, but read zero bytes.
; 1321 :      * This is to ensure that the object passed in at least
; 1322 :      * has a read method which returns bytes.
; 1323 :      */
; 1324 :     data = _PyObject_CallMethodId(f, &PyId_read, "i", 0);

  0000a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00010	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00019	48 8b f2	 mov	 rsi, rdx
  0001c	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_read@?1??marshal_load@@9@9
  00021	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01KBJDNOO@i?$AA@
  00028	45 33 c9	 xor	 r9d, r9d
  0002b	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  0002f	48 8b ce	 mov	 rcx, rsi
  00032	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  00037	48 8b f8	 mov	 rdi, rax

; 1325 :     if (data == NULL)

  0003a	48 85 c0	 test	 rax, rax
  0003d	75 0b		 jne	 SHORT $LN3@marshal_lo

; 1341 :     return result;
; 1342 : }

  0003f	48 8b 74 24 78	 mov	 rsi, QWORD PTR [rsp+120]
  00044	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00048	5f		 pop	 rdi
  00049	c3		 ret	 0
$LN3@marshal_lo:

; 1326 :         return NULL;
; 1327 :     if (!PyBytes_Check(data)) {

  0004a	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  0004e	48 89 5c 24 70	 mov	 QWORD PTR [rsp+112], rbx
  00053	41 f7 80 00 01
	00 00 00 00 00
	08		 test	 DWORD PTR [r8+256], 134217728 ; 08000000H
  0005e	75 1b		 jne	 SHORT $LN2@marshal_lo

; 1328 :         PyErr_Format(PyExc_TypeError,
; 1329 :                      "f.read() returned not bytes but %.100s",
; 1330 :                      data->ob_type->tp_name);

  00060	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00064	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0006b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@JEOLDDLK@f?4read?$CI?$CJ?5returned?5not?5bytes?5but?5@
  00072	e8 00 00 00 00	 call	 PyErr_Format

; 1331 :         result = NULL;

  00077	33 db		 xor	 ebx, ebx

; 1332 :     }
; 1333 :     else {

  00079	eb 22		 jmp	 SHORT $LN1@marshal_lo
$LN2@marshal_lo:

; 1334 :         rf.depth = 0;

  0007b	33 db		 xor	 ebx, ebx

; 1335 :         rf.fp = NULL;
; 1336 :         rf.readable = f;
; 1337 :         rf.current_filename = NULL;
; 1338 :         result = read_object(&rf);

  0007d	48 8d 4c 24 20	 lea	 rcx, QWORD PTR rf$[rsp]
  00082	48 89 74 24 30	 mov	 QWORD PTR rf$[rsp+16], rsi
  00087	89 5c 24 2c	 mov	 DWORD PTR rf$[rsp+12], ebx
  0008b	48 89 5c 24 20	 mov	 QWORD PTR rf$[rsp], rbx
  00090	48 89 5c 24 40	 mov	 QWORD PTR rf$[rsp+32], rbx
  00095	e8 00 00 00 00	 call	 read_object
  0009a	48 8b d8	 mov	 rbx, rax
$LN1@marshal_lo:

; 1339 :     }
; 1340 :     Py_DECREF(data);

  0009d	48 8b cf	 mov	 rcx, rdi
  000a0	e8 00 00 00 00	 call	 _Py_DecRef

; 1341 :     return result;
; 1342 : }

  000a5	48 8b 74 24 78	 mov	 rsi, QWORD PTR [rsp+120]
  000aa	48 8b c3	 mov	 rax, rbx
  000ad	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  000b2	48 83 c4 60	 add	 rsp, 96			; 00000060H
  000b6	5f		 pop	 rdi
  000b7	c3		 ret	 0
marshal_load ENDP
_TEXT	ENDS
PUBLIC	??_C@_09JNBMPFKB@O?$HMi?3dumps?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$marshal_dumps DD imagerel marshal_dumps
	DD	imagerel marshal_dumps+67
	DD	imagerel $unwind$marshal_dumps
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$marshal_dumps DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_09JNBMPFKB@O?$HMi?3dumps?$AA@
CONST	SEGMENT
??_C@_09JNBMPFKB@O?$HMi?3dumps?$AA@ DB 'O|i:dumps', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT marshal_dumps
_TEXT	SEGMENT
self$ = 48
args$ = 56
version$ = 64
x$ = 72
marshal_dumps PROC					; COMDAT

; 1359 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1360 :     PyObject *x;
; 1361 :     int version = Py_MARSHAL_VERSION;
; 1362 :     if (!PyArg_ParseTuple(args, "O|i:dumps", &x, &version))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 4c 24 40	 lea	 r9, QWORD PTR version$[rsp]
  0000c	4c 8d 44 24 48	 lea	 r8, QWORD PTR x$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09JNBMPFKB@O?$HMi?3dumps?$AA@
  00018	c7 44 24 40 02
	00 00 00	 mov	 DWORD PTR version$[rsp], 2
  00020	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00025	85 c0		 test	 eax, eax
  00027	75 07		 jne	 SHORT $LN1@marshal_du@2

; 1363 :         return NULL;

  00029	33 c0		 xor	 eax, eax

; 1365 : }

  0002b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002f	c3		 ret	 0
$LN1@marshal_du@2:

; 1364 :     return PyMarshal_WriteObjectToString(x, version);

  00030	8b 54 24 40	 mov	 edx, DWORD PTR version$[rsp]
  00034	48 8b 4c 24 48	 mov	 rcx, QWORD PTR x$[rsp]
  00039	e8 00 00 00 00	 call	 PyMarshal_WriteObjectToString

; 1365 : }

  0003e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00042	c3		 ret	 0
marshal_dumps ENDP
_TEXT	ENDS
PUBLIC	??_C@_08INFBOMEP@y?$CK?3loads?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$marshal_loads DD imagerel marshal_loads
	DD	imagerel marshal_loads+132
	DD	imagerel $unwind$marshal_loads
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$marshal_loads DD 043801H
	DD	0163438H
	DD	0170107H
xdata	ENDS
;	COMDAT ??_C@_08INFBOMEP@y?$CK?3loads?$AA@
CONST	SEGMENT
??_C@_08INFBOMEP@y?$CK?3loads?$AA@ DB 'y*:loads', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT marshal_loads
_TEXT	SEGMENT
rf$ = 32
p$ = 96
self$ = 192
args$ = 200
marshal_loads PROC					; COMDAT

; 1379 : {

  00000	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 1380 :     RFILE rf;
; 1381 :     Py_buffer p;
; 1382 :     char *s;
; 1383 :     Py_ssize_t n;
; 1384 :     PyObject* result;
; 1385 :     if (!PyArg_ParseTuple(args, "y*:loads", &p))

  00007	48 8b ca	 mov	 rcx, rdx
  0000a	4c 8d 44 24 60	 lea	 r8, QWORD PTR p$[rsp]
  0000f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08INFBOMEP@y?$CK?3loads?$AA@
  00016	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0001b	85 c0		 test	 eax, eax
  0001d	75 0a		 jne	 SHORT $LN1@marshal_lo@2

; 1386 :         return NULL;

  0001f	33 c0		 xor	 eax, eax

; 1398 : }

  00021	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00028	c3		 ret	 0
$LN1@marshal_lo@2:

; 1387 :     s = p.buf;
; 1388 :     n = p.len;
; 1389 :     rf.fp = NULL;
; 1390 :     rf.readable = NULL;
; 1391 :     rf.current_filename = NULL;
; 1392 :     rf.ptr = s;

  00029	48 8b 4c 24 60	 mov	 rcx, QWORD PTR p$[rsp]
  0002e	33 d2		 xor	 edx, edx
  00030	48 89 9c 24 b0
	00 00 00	 mov	 QWORD PTR [rsp+176], rbx
  00038	48 89 4c 24 48	 mov	 QWORD PTR rf$[rsp+40], rcx

; 1393 :     rf.end = s + n;

  0003d	48 03 4c 24 70	 add	 rcx, QWORD PTR p$[rsp+16]
  00042	48 89 54 24 20	 mov	 QWORD PTR rf$[rsp], rdx
  00047	48 89 4c 24 50	 mov	 QWORD PTR rf$[rsp+48], rcx

; 1394 :     rf.depth = 0;
; 1395 :     result = read_object(&rf);

  0004c	48 8d 4c 24 20	 lea	 rcx, QWORD PTR rf$[rsp]
  00051	48 89 54 24 30	 mov	 QWORD PTR rf$[rsp+16], rdx
  00056	48 89 54 24 40	 mov	 QWORD PTR rf$[rsp+32], rdx
  0005b	89 54 24 2c	 mov	 DWORD PTR rf$[rsp+12], edx
  0005f	e8 00 00 00 00	 call	 read_object

; 1396 :     PyBuffer_Release(&p);

  00064	48 8d 4c 24 60	 lea	 rcx, QWORD PTR p$[rsp]
  00069	48 8b d8	 mov	 rbx, rax
  0006c	e8 00 00 00 00	 call	 PyBuffer_Release

; 1397 :     return result;

  00071	48 8b c3	 mov	 rax, rbx
  00074	48 8b 9c 24 b0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+176]

; 1398 : }

  0007c	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00083	c3		 ret	 0
marshal_loads ENDP
_TEXT	ENDS
PUBLIC	??_C@_07CPCPJPKL@version?$AA@			; `string'
PUBLIC	PyMarshal_Init
EXTRN	PyModule_AddIntConstant:PROC
EXTRN	PyModule_Create2:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyMarshal_Init DD imagerel $LN4
	DD	imagerel $LN4+67
	DD	imagerel $unwind$PyMarshal_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMarshal_Init DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_07CPCPJPKL@version?$AA@
CONST	SEGMENT
??_C@_07CPCPJPKL@version?$AA@ DB 'version', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyMarshal_Init
_TEXT	SEGMENT
PyMarshal_Init PROC					; COMDAT

; 1460 : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1461 :     PyObject *mod = PyModule_Create(&marshalmodule);

  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:marshalmodule
  0000d	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00012	e8 00 00 00 00	 call	 PyModule_Create2
  00017	48 8b d8	 mov	 rbx, rax

; 1462 :     if (mod == NULL)

  0001a	48 85 c0	 test	 rax, rax
  0001d	75 06		 jne	 SHORT $LN1@PyMarshal_@2

; 1466 : }

  0001f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00023	5b		 pop	 rbx
  00024	c3		 ret	 0
$LN1@PyMarshal_@2:

; 1463 :         return NULL;
; 1464 :     PyModule_AddIntConstant(mod, "version", Py_MARSHAL_VERSION);

  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07CPCPJPKL@version?$AA@
  0002c	41 b8 02 00 00
	00		 mov	 r8d, 2
  00032	48 8b c8	 mov	 rcx, rax
  00035	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 1465 :     return mod;

  0003a	48 8b c3	 mov	 rax, rbx

; 1466 : }

  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5b		 pop	 rbx
  00042	c3		 ret	 0
PyMarshal_Init ENDP
_TEXT	ENDS
PUBLIC	PyMarshal_ReadLastObjectFromFile
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyMarshal_ReadLastObjectFromFile DD imagerel $LN14
	DD	imagerel $LN14+213
	DD	imagerel $unwind$PyMarshal_ReadLastObjectFromFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMarshal_ReadLastObjectFromFile DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyMarshal_ReadLastObjectFromFile
_TEXT	SEGMENT
fp$ = 48
PyMarshal_ReadLastObjectFromFile PROC			; COMDAT

; 1182 : {

$LN14:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b f1	 mov	 rsi, rcx

; 1183 : /* REASONABLE_FILE_LIMIT is by defn something big enough for Tkinter.pyc. */
; 1184 : #define REASONABLE_FILE_LIMIT (1L << 18)
; 1185 : #ifdef HAVE_FSTAT
; 1186 :     off_t filesize;
; 1187 :     filesize = getfilesize(fp);

  00012	e8 00 00 00 00	 call	 getfilesize
  00017	48 63 d8	 movsxd	 rbx, eax

; 1188 :     if (filesize > 0 && filesize <= REASONABLE_FILE_LIMIT) {

  0001a	8d 53 ff	 lea	 edx, DWORD PTR [rbx-1]
  0001d	81 fa ff ff 03
	00		 cmp	 edx, 262143		; 0003ffffH
  00023	0f 87 95 00 00
	00		 ja	 $LN1@PyMarshal_@3

; 1189 :         char* pBuf = (char *)PyMem_MALLOC(filesize);

  00029	e8 00 00 00 00	 call	 _Py_PXCTX
  0002e	48 8b fb	 mov	 rdi, rbx
  00031	85 c0		 test	 eax, eax
  00033	74 0a		 je	 SHORT $LN9@PyMarshal_@3
  00035	48 8b cb	 mov	 rcx, rbx
  00038	e8 00 00 00 00	 call	 _PxMem_Malloc
  0003d	eb 18		 jmp	 SHORT $LN13@PyMarshal_@3
$LN9@PyMarshal_@3:
  0003f	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  00049	48 3b d8	 cmp	 rbx, rax
  0004c	77 70		 ja	 SHORT $LN1@PyMarshal_@3
  0004e	48 8b cb	 mov	 rcx, rbx
  00051	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
$LN13@PyMarshal_@3:
  00057	48 8b d8	 mov	 rbx, rax

; 1190 :         if (pBuf != NULL) {

  0005a	48 85 c0	 test	 rax, rax
  0005d	74 5f		 je	 SHORT $LN1@PyMarshal_@3

; 1191 :             size_t n = fread(pBuf, 1, (size_t)filesize, fp);

  0005f	4c 8b ce	 mov	 r9, rsi
  00062	4c 8b c7	 mov	 r8, rdi
  00065	ba 01 00 00 00	 mov	 edx, 1
  0006a	48 8b c8	 mov	 rcx, rax
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fread

; 1192 :             PyObject* v = PyMarshal_ReadObjectFromString(pBuf, n);

  00073	48 8b cb	 mov	 rcx, rbx
  00076	48 8b d0	 mov	 rdx, rax
  00079	e8 00 00 00 00	 call	 PyMarshal_ReadObjectFromString
  0007e	48 8b f8	 mov	 rdi, rax

; 1193 :             PyMem_FREE(pBuf);

  00081	e8 00 00 00 00	 call	 _Py_PXCTX
  00086	48 8b cb	 mov	 rcx, rbx
  00089	85 c0		 test	 eax, eax
  0008b	74 18		 je	 SHORT $LN11@PyMarshal_@3
  0008d	e8 00 00 00 00	 call	 _PxMem_Free

; 1194 :             return v;

  00092	48 8b c7	 mov	 rax, rdi

; 1203 : 
; 1204 : #undef REASONABLE_FILE_LIMIT
; 1205 : }

  00095	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0009a	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0009f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a3	5f		 pop	 rdi
  000a4	c3		 ret	 0
$LN11@PyMarshal_@3:

; 1193 :             PyMem_FREE(pBuf);

  000a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 1194 :             return v;

  000ab	48 8b c7	 mov	 rax, rdi

; 1203 : 
; 1204 : #undef REASONABLE_FILE_LIMIT
; 1205 : }

  000ae	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000b3	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000b8	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000bc	5f		 pop	 rdi
  000bd	c3		 ret	 0
$LN1@PyMarshal_@3:

; 1195 :         }
; 1196 : 
; 1197 :     }
; 1198 : #endif
; 1199 :     /* We don't have fstat, or we do but the file is larger than
; 1200 :      * REASONABLE_FILE_LIMIT or malloc failed -- read a byte at a time.
; 1201 :      */
; 1202 :     return PyMarshal_ReadObjectFromFile(fp);

  000be	48 8b ce	 mov	 rcx, rsi

; 1203 : 
; 1204 : #undef REASONABLE_FILE_LIMIT
; 1205 : }

  000c1	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000c6	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000cb	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000cf	5f		 pop	 rdi
  000d0	e9 00 00 00 00	 jmp	 PyMarshal_ReadObjectFromFile
PyMarshal_ReadLastObjectFromFile ENDP
_TEXT	ENDS
END
