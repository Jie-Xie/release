; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_08DNDMMOJA@reversed?$AA@			; `string'
PUBLIC	??_C@_0N@MOOGCAMH@__setstate__?$AA@		; `string'
PUBLIC	??_C@_0BA@BJLPBKGK@__length_hint__?$AA@		; `string'
PUBLIC	??_C@_0N@FDLIKANA@__reversed__?$AA@		; `string'
PUBLIC	??_C@_09KCAIFCBE@enumerate?$AA@			; `string'
PUBLIC	??_C@_0L@NNMACJIG@__reduce__?$AA@		; `string'
PUBLIC	??_C@_05FAGFPHJG@start?$AA@			; `string'
PUBLIC	??_C@_08DCHCEAJP@iterable?$AA@			; `string'
PUBLIC	PyEnum_Type
PUBLIC	PyReversed_Type
EXTRN	PyObject_GC_Del:PROC
EXTRN	PyType_GenericAlloc:PROC
EXTRN	PyObject_SelfIter:PROC
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
_BSS	SEGMENT
?one@?1??enum_next_long@@9@9 DQ 01H DUP (?)		; `enum_next_long'::`2'::one
_BSS	ENDS
;	COMDAT ??_C@_08DNDMMOJA@reversed?$AA@
CONST	SEGMENT
??_C@_08DNDMMOJA@reversed?$AA@ DB 'reversed', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MOOGCAMH@__setstate__?$AA@
CONST	SEGMENT
??_C@_0N@MOOGCAMH@__setstate__?$AA@ DB '__setstate__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BJLPBKGK@__length_hint__?$AA@
CONST	SEGMENT
??_C@_0BA@BJLPBKGK@__length_hint__?$AA@ DB '__length_hint__', 00H ; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId___reversed__@?1??reversed_new@@9@9 DQ 0000000000000000H ; `reversed_new'::`2'::PyId___reversed__
	DQ	FLAT:??_C@_0N@FDLIKANA@__reversed__?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_0N@FDLIKANA@__reversed__?$AA@
CONST	SEGMENT
??_C@_0N@FDLIKANA@__reversed__?$AA@ DB '__reversed__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09KCAIFCBE@enumerate?$AA@
CONST	SEGMENT
??_C@_09KCAIFCBE@enumerate?$AA@ DB 'enumerate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNMACJIG@__reduce__?$AA@
CONST	SEGMENT
??_C@_0L@NNMACJIG@__reduce__?$AA@ DB '__reduce__', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
?kwlist@?1??enum_new@@9@9 DQ FLAT:??_C@_08DCHCEAJP@iterable?$AA@ ; `enum_new'::`2'::kwlist
	DQ	FLAT:??_C@_05FAGFPHJG@start?$AA@
	DQ	0000000000000000H
reduce_doc DB	'Return state information for pickling.', 00H
	ORG $+1
enum_methods DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:enum_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
enum_doc DB	'enumerate(iterable[, start]) -> iterator for index, valu'
	DB	'e of iterable', 0aH, 0aH, 'Return an enumerate object.  itera'
	DB	'ble must be another object that supports', 0aH, 'iteration.  '
	DB	'The enumerate object yields pairs containing a count (from', 0aH
	DB	'start, which defaults to zero) and a value yielded by the ite'
	DB	'rable argument.', 0aH, 'enumerate is useful for obtaining an '
	DB	'indexed list:', 0aH, '    (0, seq[0]), (1, seq[1]), (2, seq[2'
	DB	']), ...', 00H
	ORG $+8
PyEnum_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_09KCAIFCBE@enumerate?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:enum_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:enum_doc
	DQ	FLAT:enum_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:enum_next
	DQ	FLAT:enum_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:enum_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
reversed_doc DB	'reversed(sequence) -> reverse iterator over values of th'
	DB	'e sequence', 0aH, 0aH, 'Return a reverse iterator', 00H
	ORG $+2
length_hint_doc DB 'Private method returning an estimate of len(list(it))'
	DB	'.', 00H
	ORG $+1
setstate_doc DB	'Set state information for unpickling.', 00H
	ORG $+2
reversediter_methods DQ FLAT:??_C@_0BA@BJLPBKGK@__length_hint__?$AA@
	DQ	FLAT:reversed_len
	DD	04H
	ORG $+4
	DQ	FLAT:length_hint_doc
	DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:reversed_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	FLAT:??_C@_0N@MOOGCAMH@__setstate__?$AA@
	DQ	FLAT:reversed_setstate
	DD	08H
	ORG $+4
	DQ	FLAT:setstate_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PyReversed_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_08DNDMMOJA@reversed?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:reversed_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:reversed_doc
	DQ	FLAT:reversed_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:reversed_next
	DQ	FLAT:reversediter_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:reversed_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
_DATA	ENDS
;	COMDAT ??_C@_05FAGFPHJG@start?$AA@
CONST	SEGMENT
??_C@_05FAGFPHJG@start?$AA@ DB 'start', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DCHCEAJP@iterable?$AA@
CONST	SEGMENT
??_C@_08DCHCEAJP@iterable?$AA@ DB 'iterable', 00H	; `string'
CONST	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@CPGIPOME@O?$HMO?3enumerate?$AA@	; `string'
EXTRN	PyTuple_Pack:PROC
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyObject_GetIter:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	PyErr_Occurred:PROC
EXTRN	PyLong_AsSsize_t:PROC
EXTRN	PyNumber_Index:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\enumobject.c
pdata	SEGMENT
$pdata$enum_new DD imagerel enum_new
	DD	imagerel enum_new+293
	DD	imagerel $unwind$enum_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$enum_new DD 040c01H
	DD	0a340cH
	DD	07008720cH
xdata	ENDS
;	COMDAT ??_C@_0O@CPGIPOME@O?$HMO?3enumerate?$AA@
CONST	SEGMENT
??_C@_0O@CPGIPOME@O?$HMO?3enumerate?$AA@ DB 'O|O:enumerate', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT enum_new
_TEXT	SEGMENT
seq$ = 48
type$ = 80
args$ = 88
kwds$ = 96
start$ = 104
enum_new PROC						; COMDAT

; 15   : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	49 89 5b 08	 mov	 QWORD PTR [r11+8], rbx
  00007	57		 push	 rdi
  00008	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000c	48 8b d9	 mov	 rbx, rcx

; 16   :     enumobject *en;
; 17   :     PyObject *seq = NULL;
; 18   :     PyObject *start = NULL;
; 19   :     static char *kwlist[] = {"iterable", "start", 0};
; 20   : 
; 21   :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|O:enumerate", kwlist,
; 22   :                                      &seq, &start))

  0000f	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  00013	49 8b c0	 mov	 rax, r8
  00016	49 89 4b e0	 mov	 QWORD PTR [r11-32], rcx
  0001a	49 8d 4b e8	 lea	 rcx, QWORD PTR [r11-24]
  0001e	4c 8b d2	 mov	 r10, rdx
  00021	33 ff		 xor	 edi, edi
  00023	49 89 4b d8	 mov	 QWORD PTR [r11-40], rcx
  00027	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??enum_new@@9@9
  0002e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@CPGIPOME@O?$HMO?3enumerate?$AA@
  00035	49 8b ca	 mov	 rcx, r10
  00038	48 8b d0	 mov	 rdx, rax
  0003b	49 89 7b e8	 mov	 QWORD PTR [r11-24], rdi
  0003f	49 89 7b 20	 mov	 QWORD PTR [r11+32], rdi
  00043	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00048	85 c0		 test	 eax, eax

; 23   :         return NULL;

  0004a	74 34		 je	 SHORT $LN12@enum_new

; 24   : 
; 25   :     en = (enumobject *)type->tp_alloc(type, 0);

  0004c	33 d2		 xor	 edx, edx
  0004e	48 8b cb	 mov	 rcx, rbx
  00051	ff 93 88 01 00
	00		 call	 QWORD PTR [rbx+392]
  00057	48 8b d8	 mov	 rbx, rax

; 26   :     if (en == NULL)

  0005a	48 85 c0	 test	 rax, rax

; 27   :         return NULL;

  0005d	74 21		 je	 SHORT $LN12@enum_new

; 28   :     if (start != NULL) {

  0005f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR start$[rsp]
  00064	48 85 c9	 test	 rcx, rcx
  00067	74 6e		 je	 SHORT $LN7@enum_new

; 29   :         start = PyNumber_Index(start);

  00069	e8 00 00 00 00	 call	 PyNumber_Index
  0006e	48 89 44 24 68	 mov	 QWORD PTR start$[rsp], rax

; 30   :         if (start == NULL) {

  00073	48 85 c0	 test	 rax, rax
  00076	75 15		 jne	 SHORT $LN6@enum_new
$LN13@enum_new:

; 31   :             Py_DECREF(en);

  00078	48 8b cb	 mov	 rcx, rbx
  0007b	e8 00 00 00 00	 call	 _Py_DecRef
$LN12@enum_new:

; 32   :             return NULL;

  00080	33 c0		 xor	 eax, eax

; 59   : }

  00082	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00087	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0008b	5f		 pop	 rdi
  0008c	c3		 ret	 0
$LN6@enum_new:

; 33   :         }
; 34   :         assert(PyLong_Check(start));
; 35   :         en->en_index = PyLong_AsSsize_t(start);

  0008d	48 8b c8	 mov	 rcx, rax
  00090	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  00095	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax

; 36   :         if (en->en_index == -1 && PyErr_Occurred()) {

  00099	48 83 f8 ff	 cmp	 rax, -1
  0009d	75 28		 jne	 SHORT $LN5@enum_new
  0009f	e8 00 00 00 00	 call	 PyErr_Occurred
  000a4	48 85 c0	 test	 rax, rax
  000a7	74 1e		 je	 SHORT $LN5@enum_new

; 37   :             PyErr_Clear();

  000a9	e8 00 00 00 00	 call	 PyErr_Clear

; 38   :             en->en_index = PY_SSIZE_T_MAX;

  000ae	49 bb ff ff ff
	ff ff ff ff 7f	 mov	 r11, 9223372036854775807 ; 7fffffffffffffffH
  000b8	4c 89 5b 60	 mov	 QWORD PTR [rbx+96], r11

; 39   :             en->en_longindex = start;

  000bc	48 8b 44 24 68	 mov	 rax, QWORD PTR start$[rsp]
  000c1	48 89 43 78	 mov	 QWORD PTR [rbx+120], rax

; 40   :         } else {

  000c5	eb 18		 jmp	 SHORT $LN3@enum_new
$LN5@enum_new:

; 41   :             en->en_longindex = NULL;

  000c7	48 89 7b 78	 mov	 QWORD PTR [rbx+120], rdi

; 42   :             Py_DECREF(start);

  000cb	48 8b 4c 24 68	 mov	 rcx, QWORD PTR start$[rsp]
  000d0	e8 00 00 00 00	 call	 _Py_DecRef

; 43   :         }
; 44   :     } else {

  000d5	eb 08		 jmp	 SHORT $LN3@enum_new
$LN7@enum_new:

; 45   :         en->en_index = 0;

  000d7	48 89 78 60	 mov	 QWORD PTR [rax+96], rdi

; 46   :         en->en_longindex = NULL;

  000db	48 89 78 78	 mov	 QWORD PTR [rax+120], rdi
$LN3@enum_new:

; 47   :     }
; 48   :     en->en_sit = PyObject_GetIter(seq);

  000df	48 8b 4c 24 30	 mov	 rcx, QWORD PTR seq$[rsp]
  000e4	e8 00 00 00 00	 call	 PyObject_GetIter
  000e9	48 89 43 68	 mov	 QWORD PTR [rbx+104], rax

; 49   :     if (en->en_sit == NULL) {

  000ed	48 85 c0	 test	 rax, rax

; 50   :         Py_DECREF(en);
; 51   :         return NULL;

  000f0	74 86		 je	 SHORT $LN13@enum_new

; 52   :     }
; 53   :     en->en_result = PyTuple_Pack(2, Py_None, Py_None);

  000f2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  000f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_NoneStruct
  00100	b9 02 00 00 00	 mov	 ecx, 2
  00105	e8 00 00 00 00	 call	 PyTuple_Pack
  0010a	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax

; 54   :     if (en->en_result == NULL) {

  0010e	48 85 c0	 test	 rax, rax

; 55   :         Py_DECREF(en);
; 56   :         return NULL;

  00111	0f 84 61 ff ff
	ff		 je	 $LN13@enum_new

; 57   :     }
; 58   :     return (PyObject *)en;

  00117	48 8b c3	 mov	 rax, rbx

; 59   : }

  0011a	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0011f	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00123	5f		 pop	 rdi
  00124	c3		 ret	 0
enum_new ENDP
_TEXT	ENDS
EXTRN	PyObject_GC_UnTrack:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$enum_dealloc DD imagerel enum_dealloc
	DD	imagerel enum_dealloc+372
	DD	imagerel $unwind$enum_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$enum_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\enumobject.c
xdata	ENDS
;	COMDAT enum_dealloc
_TEXT	SEGMENT
en$ = 64
enum_dealloc PROC					; COMDAT

; 63   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 64   :     PyObject_GC_UnTrack(en);

  0000d	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 65   :     Py_XDECREF(en->en_sit);

  00012	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  00016	48 85 db	 test	 rbx, rbx
  00019	74 65		 je	 SHORT $LN11@enum_deall
  0001b	e8 00 00 00 00	 call	 _Py_PXCTX
  00020	85 c0		 test	 eax, eax
  00022	75 5c		 jne	 SHORT $LN11@enum_deall
  00024	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00028	a8 20		 test	 al, 32			; 00000020H
  0002a	75 4c		 jne	 SHORT $LN19@enum_deall
  0002c	84 c0		 test	 al, al
  0002e	78 48		 js	 SHORT $LN19@enum_deall
  00030	a8 02		 test	 al, 2
  00032	75 4c		 jne	 SHORT $LN11@enum_deall
  00034	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00038	75 46		 jne	 SHORT $LN11@enum_deall
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00048	4c 8b cb	 mov	 r9, rbx
  0004b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00051	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00059	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005e	48 8b cb	 mov	 rcx, rbx
  00061	85 c0		 test	 eax, eax
  00063	74 07		 je	 SHORT $LN24@enum_deall
  00065	e8 00 00 00 00	 call	 _Px_Dealloc
  0006a	eb 14		 jmp	 SHORT $LN11@enum_deall
$LN24@enum_deall:
  0006c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00070	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00076	eb 08		 jmp	 SHORT $LN11@enum_deall
$LN19@enum_deall:
  00078	48 8b cb	 mov	 rcx, rbx
  0007b	e8 00 00 00 00	 call	 Px_DecRef
$LN11@enum_deall:

; 66   :     Py_XDECREF(en->en_result);

  00080	48 8b 5f 70	 mov	 rbx, QWORD PTR [rdi+112]
  00084	48 85 db	 test	 rbx, rbx
  00087	74 65		 je	 SHORT $LN7@enum_deall
  00089	e8 00 00 00 00	 call	 _Py_PXCTX
  0008e	85 c0		 test	 eax, eax
  00090	75 5c		 jne	 SHORT $LN7@enum_deall
  00092	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00096	a8 20		 test	 al, 32			; 00000020H
  00098	75 4c		 jne	 SHORT $LN30@enum_deall
  0009a	84 c0		 test	 al, al
  0009c	78 48		 js	 SHORT $LN30@enum_deall
  0009e	a8 02		 test	 al, 2
  000a0	75 4c		 jne	 SHORT $LN7@enum_deall
  000a2	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000a6	75 46		 jne	 SHORT $LN7@enum_deall
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000b6	4c 8b cb	 mov	 r9, rbx
  000b9	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000bf	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cc	48 8b cb	 mov	 rcx, rbx
  000cf	85 c0		 test	 eax, eax
  000d1	74 07		 je	 SHORT $LN35@enum_deall
  000d3	e8 00 00 00 00	 call	 _Px_Dealloc
  000d8	eb 14		 jmp	 SHORT $LN7@enum_deall
$LN35@enum_deall:
  000da	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000de	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000e4	eb 08		 jmp	 SHORT $LN7@enum_deall
$LN30@enum_deall:
  000e6	48 8b cb	 mov	 rcx, rbx
  000e9	e8 00 00 00 00	 call	 Px_DecRef
$LN7@enum_deall:

; 67   :     Py_XDECREF(en->en_longindex);

  000ee	48 8b 5f 78	 mov	 rbx, QWORD PTR [rdi+120]
  000f2	48 85 db	 test	 rbx, rbx
  000f5	74 65		 je	 SHORT $LN3@enum_deall
  000f7	e8 00 00 00 00	 call	 _Py_PXCTX
  000fc	85 c0		 test	 eax, eax
  000fe	75 5c		 jne	 SHORT $LN3@enum_deall
  00100	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00104	a8 20		 test	 al, 32			; 00000020H
  00106	75 4c		 jne	 SHORT $LN41@enum_deall
  00108	84 c0		 test	 al, al
  0010a	78 48		 js	 SHORT $LN41@enum_deall
  0010c	a8 02		 test	 al, 2
  0010e	75 4c		 jne	 SHORT $LN3@enum_deall
  00110	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00114	75 46		 jne	 SHORT $LN3@enum_deall
  00116	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0011d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00124	4c 8b cb	 mov	 r9, rbx
  00127	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0012d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00135	e8 00 00 00 00	 call	 _PyParallel_Guard
  0013a	48 8b cb	 mov	 rcx, rbx
  0013d	85 c0		 test	 eax, eax
  0013f	74 07		 je	 SHORT $LN46@enum_deall
  00141	e8 00 00 00 00	 call	 _Px_Dealloc
  00146	eb 14		 jmp	 SHORT $LN3@enum_deall
$LN46@enum_deall:
  00148	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0014c	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00152	eb 08		 jmp	 SHORT $LN3@enum_deall
$LN41@enum_deall:
  00154	48 8b cb	 mov	 rcx, rbx
  00157	e8 00 00 00 00	 call	 Px_DecRef
$LN3@enum_deall:

; 68   :     Py_TYPE(en)->tp_free(en);

  0015c	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00160	48 8b cf	 mov	 rcx, rdi

; 69   : }

  00163	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00168	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0016c	5f		 pop	 rdi
  0016d	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
enum_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@NAMADFPE@enum_traverse?$AA@		; `string'
PUBLIC	??_C@_0BI@IJIAJLMK@?4?4?2Objects?2enumobject?4c?$AA@ ; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$enum_traverse DD imagerel enum_traverse
	DD	imagerel enum_traverse+201
	DD	imagerel $unwind$enum_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$enum_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0O@NAMADFPE@enum_traverse?$AA@
CONST	SEGMENT
??_C@_0O@NAMADFPE@enum_traverse?$AA@ DB 'enum_traverse', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IJIAJLMK@?4?4?2Objects?2enumobject?4c?$AA@
CONST	SEGMENT
??_C@_0BI@IJIAJLMK@?4?4?2Objects?2enumobject?4c?$AA@ DB '..\Objects\enumo'
	DB	'bject.c', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT enum_traverse
_TEXT	SEGMENT
en$ = 48
visit$ = 56
arg$ = 64
enum_traverse PROC					; COMDAT

; 73   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 74   :     Py_VISIT(en->en_sit);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1a		 je	 SHORT $LN15@enum_trave
  00021	45 33 c9	 xor	 r9d, r9d
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@IJIAJLMK@?4?4?2Objects?2enumobject?4c?$AA@
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NAMADFPE@enum_traverse?$AA@
  00032	45 8d 41 4a	 lea	 r8d, QWORD PTR [r9+74]
  00036	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN15@enum_trave:
  0003b	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  0003f	48 85 c9	 test	 rcx, rcx
  00042	74 09		 je	 SHORT $LN17@enum_trave
  00044	48 8b d7	 mov	 rdx, rdi
  00047	ff d6		 call	 rsi
  00049	85 c0		 test	 eax, eax
  0004b	75 6c		 jne	 SHORT $LN19@enum_trave
$LN17@enum_trave:

; 75   :     Py_VISIT(en->en_result);

  0004d	e8 00 00 00 00	 call	 _Py_PXCTX
  00052	85 c0		 test	 eax, eax
  00054	74 1a		 je	 SHORT $LN9@enum_trave
  00056	45 33 c9	 xor	 r9d, r9d
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@IJIAJLMK@?4?4?2Objects?2enumobject?4c?$AA@
  00060	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NAMADFPE@enum_traverse?$AA@
  00067	45 8d 41 4b	 lea	 r8d, QWORD PTR [r9+75]
  0006b	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@enum_trave:
  00070	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00074	48 85 c9	 test	 rcx, rcx
  00077	74 09		 je	 SHORT $LN11@enum_trave
  00079	48 8b d7	 mov	 rdx, rdi
  0007c	ff d6		 call	 rsi
  0007e	85 c0		 test	 eax, eax
  00080	75 37		 jne	 SHORT $LN19@enum_trave
$LN11@enum_trave:

; 76   :     Py_VISIT(en->en_longindex);

  00082	e8 00 00 00 00	 call	 _Py_PXCTX
  00087	85 c0		 test	 eax, eax
  00089	74 1a		 je	 SHORT $LN3@enum_trave
  0008b	45 33 c9	 xor	 r9d, r9d
  0008e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@IJIAJLMK@?4?4?2Objects?2enumobject?4c?$AA@
  00095	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NAMADFPE@enum_traverse?$AA@
  0009c	45 8d 41 4c	 lea	 r8d, QWORD PTR [r9+76]
  000a0	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@enum_trave:
  000a5	48 8b 4b 78	 mov	 rcx, QWORD PTR [rbx+120]
  000a9	48 85 c9	 test	 rcx, rcx
  000ac	74 09		 je	 SHORT $LN5@enum_trave
  000ae	48 8b d7	 mov	 rdx, rdi
  000b1	ff d6		 call	 rsi
  000b3	85 c0		 test	 eax, eax
  000b5	75 02		 jne	 SHORT $LN19@enum_trave
$LN5@enum_trave:

; 77   :     return 0;

  000b7	33 c0		 xor	 eax, eax
$LN19@enum_trave:

; 78   : }

  000b9	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000be	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000c3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c7	5f		 pop	 rdi
  000c8	c3		 ret	 0
enum_traverse ENDP
_TEXT	ENDS
EXTRN	PyTuple_New:PROC
EXTRN	PyNumber_Add:PROC
EXTRN	PyLong_FromLong:PROC
EXTRN	PyLong_FromSsize_t:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$enum_next_long DD imagerel enum_next_long
	DD	imagerel enum_next_long+106
	DD	imagerel $unwind$enum_next_long
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$enum_next_long DD imagerel enum_next_long+106
	DD	imagerel enum_next_long+200
	DD	imagerel $chain$0$enum_next_long
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$enum_next_long DD imagerel enum_next_long+200
	DD	imagerel enum_next_long+238
	DD	imagerel $chain$2$enum_next_long
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$enum_next_long DD 020021H
	DD	066400H
	DD	imagerel enum_next_long
	DD	imagerel enum_next_long+106
	DD	imagerel $unwind$enum_next_long
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$enum_next_long DD 020521H
	DD	066405H
	DD	imagerel enum_next_long
	DD	imagerel enum_next_long+106
	DD	imagerel $unwind$enum_next_long
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$enum_next_long DD 060f01H
	DD	08540fH
	DD	07340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT enum_next_long
_TEXT	SEGMENT
en$ = 48
next_item$ = 56
enum_next_long PROC					; COMDAT

; 82   : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 83   :     static PyObject *one = NULL;
; 84   :     PyObject *result = en->en_result;
; 85   :     PyObject *next_index;
; 86   :     PyObject *stepped_up;
; 87   : 
; 88   :     if (en->en_longindex == NULL) {

  0000f	48 83 79 78 00	 cmp	 QWORD PTR [rcx+120], 0
  00014	48 8b 59 70	 mov	 rbx, QWORD PTR [rcx+112]
  00018	48 8b ea	 mov	 rbp, rdx
  0001b	48 8b f9	 mov	 rdi, rcx
  0001e	75 2a		 jne	 SHORT $LN7@enum_next_

; 89   :         en->en_longindex = PyLong_FromSsize_t(PY_SSIZE_T_MAX);

  00020	48 b9 ff ff ff
	ff ff ff ff 7f	 mov	 rcx, 9223372036854775807 ; 7fffffffffffffffH
  0002a	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  0002f	48 89 47 78	 mov	 QWORD PTR [rdi+120], rax

; 90   :         if (en->en_longindex == NULL)

  00033	48 85 c0	 test	 rax, rax
  00036	75 12		 jne	 SHORT $LN7@enum_next_
$LN13@enum_next_:

; 91   :             return NULL;

  00038	33 c0		 xor	 eax, eax

; 120  : }

  0003a	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0003f	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00044	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00048	5f		 pop	 rdi
  00049	c3		 ret	 0
$LN7@enum_next_:

; 92   :     }
; 93   :     if (one == NULL) {

  0004a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?one@?1??enum_next_long@@9@9
  00051	48 85 c0	 test	 rax, rax
  00054	75 14		 jne	 SHORT $LN5@enum_next_

; 94   :         one = PyLong_FromLong(1);

  00056	8d 48 01	 lea	 ecx, QWORD PTR [rax+1]
  00059	e8 00 00 00 00	 call	 PyLong_FromLong
  0005e	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?one@?1??enum_next_long@@9@9, rax

; 95   :         if (one == NULL)

  00065	48 85 c0	 test	 rax, rax

; 96   :             return NULL;

  00068	74 ce		 je	 SHORT $LN13@enum_next_
$LN5@enum_next_:
  0006a	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi

; 97   :     }
; 98   :     next_index = en->en_longindex;

  0006f	48 8b 77 78	 mov	 rsi, QWORD PTR [rdi+120]

; 99   :     assert(next_index != NULL);
; 100  :     stepped_up = PyNumber_Add(next_index, one);

  00073	48 8b d0	 mov	 rdx, rax
  00076	48 8b ce	 mov	 rcx, rsi
  00079	e8 00 00 00 00	 call	 PyNumber_Add

; 101  :     if (stepped_up == NULL)

  0007e	48 85 c0	 test	 rax, rax

; 102  :         return NULL;

  00081	74 67		 je	 SHORT $LN12@enum_next_

; 103  :     en->en_longindex = stepped_up;

  00083	48 89 47 78	 mov	 QWORD PTR [rdi+120], rax

; 104  : 
; 105  :     if (result->ob_refcnt == 1) {

  00087	48 83 7b 50 01	 cmp	 QWORD PTR [rbx+80], 1
  0008c	75 3a		 jne	 SHORT $LN3@enum_next_

; 106  :         Py_INCREF(result);

  0008e	48 8b cb	 mov	 rcx, rbx
  00091	e8 00 00 00 00	 call	 _Py_IncRef

; 107  :         Py_DECREF(PyTuple_GET_ITEM(result, 0));

  00096	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  0009a	e8 00 00 00 00	 call	 _Py_DecRef

; 108  :         Py_DECREF(PyTuple_GET_ITEM(result, 1));

  0009f	48 8b 4b 78	 mov	 rcx, QWORD PTR [rbx+120]
  000a3	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@enum_next_:

; 115  :         }
; 116  :     }
; 117  :     PyTuple_SET_ITEM(result, 0, next_index);

  000a8	48 89 73 70	 mov	 QWORD PTR [rbx+112], rsi

; 118  :     PyTuple_SET_ITEM(result, 1, next_item);

  000ac	48 89 6b 78	 mov	 QWORD PTR [rbx+120], rbp

; 119  :     return result;

  000b0	48 8b c3	 mov	 rax, rbx
$LN11@enum_next_:

; 120  : }

  000b3	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  000b8	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000bd	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  000c2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c6	5f		 pop	 rdi
  000c7	c3		 ret	 0
$LN3@enum_next_:

; 109  :     } else {
; 110  :         result = PyTuple_New(2);

  000c8	b9 02 00 00 00	 mov	 ecx, 2
  000cd	e8 00 00 00 00	 call	 PyTuple_New
  000d2	48 8b d8	 mov	 rbx, rax

; 111  :         if (result == NULL) {

  000d5	48 85 c0	 test	 rax, rax
  000d8	75 ce		 jne	 SHORT $LN1@enum_next_

; 112  :             Py_DECREF(next_index);

  000da	48 8b ce	 mov	 rcx, rsi
  000dd	e8 00 00 00 00	 call	 _Py_DecRef

; 113  :             Py_DECREF(next_item);

  000e2	48 8b cd	 mov	 rcx, rbp
  000e5	e8 00 00 00 00	 call	 _Py_DecRef
$LN12@enum_next_:

; 114  :             return NULL;

  000ea	33 c0		 xor	 eax, eax
  000ec	eb c5		 jmp	 SHORT $LN11@enum_next_
enum_next_long ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$enum_next DD imagerel enum_next
	DD	imagerel enum_next+105
	DD	imagerel $unwind$enum_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$enum_next DD imagerel enum_next+105
	DD	imagerel enum_next+192
	DD	imagerel $chain$0$enum_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$enum_next DD imagerel enum_next+192
	DD	imagerel enum_next+230
	DD	imagerel $chain$2$enum_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$enum_next DD 020021H
	DD	065400H
	DD	imagerel enum_next
	DD	imagerel enum_next+105
	DD	imagerel $unwind$enum_next
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$enum_next DD 020521H
	DD	065405H
	DD	imagerel enum_next
	DD	imagerel enum_next+105
	DD	imagerel $unwind$enum_next
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$enum_next DD 060f01H
	DD	08640fH
	DD	07340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT enum_next
_TEXT	SEGMENT
en$ = 48
enum_next PROC						; COMDAT

; 124  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 125  :     PyObject *next_index;
; 126  :     PyObject *next_item;
; 127  :     PyObject *result = en->en_result;

  0000f	48 8b 59 70	 mov	 rbx, QWORD PTR [rcx+112]
  00013	48 8b f1	 mov	 rsi, rcx

; 128  :     PyObject *it = en->en_sit;

  00016	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]

; 129  : 
; 130  :     next_item = (*Py_TYPE(it)->tp_iternext)(it);

  0001a	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0001e	ff 90 38 01 00
	00		 call	 QWORD PTR [rax+312]
  00024	48 8b f8	 mov	 rdi, rax

; 131  :     if (next_item == NULL)

  00027	48 85 c0	 test	 rax, rax
  0002a	75 10		 jne	 SHORT $LN6@enum_next

; 159  : }

  0002c	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00031	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00036	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003a	5f		 pop	 rdi
  0003b	c3		 ret	 0
$LN6@enum_next:

; 132  :         return NULL;
; 133  : 
; 134  :     if (en->en_index == PY_SSIZE_T_MAX)

  0003c	48 8b 4e 60	 mov	 rcx, QWORD PTR [rsi+96]
  00040	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  0004a	48 3b c8	 cmp	 rcx, rax
  0004d	75 1a		 jne	 SHORT $LN5@enum_next

; 135  :         return enum_next_long(en, next_item);

  0004f	48 8b d7	 mov	 rdx, rdi
  00052	48 8b ce	 mov	 rcx, rsi

; 159  : }

  00055	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0005a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0005f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00063	5f		 pop	 rdi
  00064	e9 00 00 00 00	 jmp	 enum_next_long
$LN5@enum_next:
  00069	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp

; 136  : 
; 137  :     next_index = PyLong_FromSsize_t(en->en_index);

  0006e	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  00073	48 8b e8	 mov	 rbp, rax

; 138  :     if (next_index == NULL) {

  00076	48 85 c0	 test	 rax, rax

; 139  :         Py_DECREF(next_item);
; 140  :         return NULL;

  00079	74 5f		 je	 SHORT $LN10@enum_next

; 141  :     }
; 142  :     en->en_index++;

  0007b	48 ff 46 60	 inc	 QWORD PTR [rsi+96]

; 143  : 
; 144  :     if (result->ob_refcnt == 1) {

  0007f	48 83 7b 50 01	 cmp	 QWORD PTR [rbx+80], 1
  00084	75 3a		 jne	 SHORT $LN3@enum_next

; 145  :         Py_INCREF(result);

  00086	48 8b cb	 mov	 rcx, rbx
  00089	e8 00 00 00 00	 call	 _Py_IncRef

; 146  :         Py_DECREF(PyTuple_GET_ITEM(result, 0));

  0008e	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00092	e8 00 00 00 00	 call	 _Py_DecRef

; 147  :         Py_DECREF(PyTuple_GET_ITEM(result, 1));

  00097	48 8b 4b 78	 mov	 rcx, QWORD PTR [rbx+120]
  0009b	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@enum_next:

; 154  :         }
; 155  :     }
; 156  :     PyTuple_SET_ITEM(result, 0, next_index);

  000a0	48 89 6b 70	 mov	 QWORD PTR [rbx+112], rbp

; 157  :     PyTuple_SET_ITEM(result, 1, next_item);

  000a4	48 89 7b 78	 mov	 QWORD PTR [rbx+120], rdi

; 158  :     return result;

  000a8	48 8b c3	 mov	 rax, rbx
$LN9@enum_next:

; 159  : }

  000ab	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
  000b0	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000b5	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000ba	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000be	5f		 pop	 rdi
  000bf	c3		 ret	 0
$LN3@enum_next:

; 148  :     } else {
; 149  :         result = PyTuple_New(2);

  000c0	b9 02 00 00 00	 mov	 ecx, 2
  000c5	e8 00 00 00 00	 call	 PyTuple_New
  000ca	48 8b d8	 mov	 rbx, rax

; 150  :         if (result == NULL) {

  000cd	48 85 c0	 test	 rax, rax
  000d0	75 ce		 jne	 SHORT $LN1@enum_next

; 151  :             Py_DECREF(next_index);

  000d2	48 8b cd	 mov	 rcx, rbp
  000d5	e8 00 00 00 00	 call	 _Py_DecRef
$LN10@enum_next:

; 152  :             Py_DECREF(next_item);

  000da	48 8b cf	 mov	 rcx, rdi
  000dd	e8 00 00 00 00	 call	 _Py_DecRef

; 153  :             return NULL;

  000e2	33 c0		 xor	 eax, eax
  000e4	eb c5		 jmp	 SHORT $LN9@enum_next
enum_next ENDP
_TEXT	ENDS
PUBLIC	??_C@_05IEPKLDIK@O?$CIOn?$CJ?$AA@		; `string'
PUBLIC	??_C@_05LNHFJPFN@O?$CIOO?$CJ?$AA@		; `string'
EXTRN	Py_BuildValue:PROC
;	COMDAT ??_C@_05IEPKLDIK@O?$CIOn?$CJ?$AA@
CONST	SEGMENT
??_C@_05IEPKLDIK@O?$CIOn?$CJ?$AA@ DB 'O(On)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05LNHFJPFN@O?$CIOO?$CJ?$AA@
CONST	SEGMENT
??_C@_05LNHFJPFN@O?$CIOO?$CJ?$AA@ DB 'O(OO)', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT enum_reduce
_TEXT	SEGMENT
en$ = 8
enum_reduce PROC					; COMDAT

; 164  :     if (en->en_longindex != NULL)

  00000	4c 8b 49 78	 mov	 r9, QWORD PTR [rcx+120]

; 165  :         return Py_BuildValue("O(OO)", Py_TYPE(en), en->en_sit, en->en_longindex);

  00004	4c 8b 41 68	 mov	 r8, QWORD PTR [rcx+104]
  00008	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0000c	4d 85 c9	 test	 r9, r9
  0000f	74 0c		 je	 SHORT $LN2@enum_reduc
  00011	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LNHFJPFN@O?$CIOO?$CJ?$AA@

; 168  : }

  00018	e9 00 00 00 00	 jmp	 Py_BuildValue
$LN2@enum_reduc:

; 166  :     else
; 167  :         return Py_BuildValue("O(On)", Py_TYPE(en), en->en_sit, en->en_index);

  0001d	4c 8b 49 60	 mov	 r9, QWORD PTR [rcx+96]
  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05IEPKLDIK@O?$CIOn?$CJ?$AA@

; 168  : }

  00028	e9 00 00 00 00	 jmp	 Py_BuildValue
enum_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@LEIEICCA@argument?5to?5reversed?$CI?$CJ?5must?5be?5a@ ; `string'
PUBLIC	??_C@_0L@HPIFNACC@reversed?$CI?$CJ?$AA@		; `string'
EXTRN	PySequence_Size:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PySequence_Check:PROC
EXTRN	PyObject_CallFunctionObjArgs:PROC
EXTRN	_PyObject_LookupSpecial:PROC
EXTRN	PyArg_UnpackTuple:PROC
EXTRN	_PyArg_NoKeywords:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$reversed_new DD imagerel reversed_new
	DD	imagerel reversed_new+301
	DD	imagerel $unwind$reversed_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$reversed_new DD 040a01H
	DD	09340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0CK@LEIEICCA@argument?5to?5reversed?$CI?$CJ?5must?5be?5a@
CONST	SEGMENT
??_C@_0CK@LEIEICCA@argument?5to?5reversed?$CI?$CJ?5must?5be?5a@ DB 'argum'
	DB	'ent to reversed() must be a sequence', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HPIFNACC@reversed?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_0L@HPIFNACC@reversed?$CI?$CJ?$AA@ DB 'reversed()', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT reversed_new
_TEXT	SEGMENT
seq$ = 64
type$ = 64
args$ = 72
kwds$ = 80
reversed_new PROC					; COMDAT

; 240  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 241  :     Py_ssize_t n;
; 242  :     PyObject *seq, *reversed_meth;
; 243  :     reversedobject *ro;
; 244  :     _Py_IDENTIFIER(__reversed__);
; 245  : 
; 246  :     if (type == &PyReversed_Type && !_PyArg_NoKeywords("reversed()", kwds))

  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyReversed_Type
  00011	48 8b fa	 mov	 rdi, rdx
  00014	48 8b d9	 mov	 rbx, rcx
  00017	48 3b c8	 cmp	 rcx, rax
  0001a	75 17		 jne	 SHORT $LN8@reversed_n
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@HPIFNACC@reversed?$CI?$CJ?$AA@
  00023	49 8b d0	 mov	 rdx, r8
  00026	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  0002b	85 c0		 test	 eax, eax

; 247  :         return NULL;

  0002d	0f 84 9e 00 00
	00		 je	 $LN12@reversed_n
$LN8@reversed_n:

; 248  : 
; 249  :     if (!PyArg_UnpackTuple(args, "reversed", 1, 1, &seq) )

  00033	48 8d 44 24 40	 lea	 rax, QWORD PTR seq$[rsp]
  00038	41 b9 01 00 00
	00		 mov	 r9d, 1
  0003e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08DNDMMOJA@reversed?$AA@
  00045	45 8b c1	 mov	 r8d, r9d
  00048	48 8b cf	 mov	 rcx, rdi
  0004b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00050	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00055	85 c0		 test	 eax, eax

; 250  :         return NULL;

  00057	74 78		 je	 SHORT $LN12@reversed_n

; 251  : 
; 252  :     reversed_meth = _PyObject_LookupSpecial(seq, &PyId___reversed__);

  00059	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0005f	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00068	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId___reversed__@?1??reversed_new@@9@9
  0006d	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  00071	48 8b 4c 24 40	 mov	 rcx, QWORD PTR seq$[rsp]
  00076	e8 00 00 00 00	 call	 _PyObject_LookupSpecial
  0007b	48 8b f8	 mov	 rdi, rax

; 253  :     if (reversed_meth != NULL) {

  0007e	48 85 c0	 test	 rax, rax
  00081	74 23		 je	 SHORT $LN6@reversed_n

; 254  :         PyObject *res = PyObject_CallFunctionObjArgs(reversed_meth, NULL);

  00083	33 d2		 xor	 edx, edx
  00085	48 8b c8	 mov	 rcx, rax
  00088	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs

; 255  :         Py_DECREF(reversed_meth);

  0008d	48 8b cf	 mov	 rcx, rdi
  00090	48 8b d8	 mov	 rbx, rax
  00093	e8 00 00 00 00	 call	 _Py_DecRef

; 278  :     return (PyObject *)ro;

  00098	48 8b c3	 mov	 rax, rbx

; 279  : }

  0009b	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000a0	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a4	5f		 pop	 rdi
  000a5	c3		 ret	 0
$LN6@reversed_n:

; 256  :         return res;
; 257  :     }
; 258  :     else if (PyErr_Occurred())

  000a6	e8 00 00 00 00	 call	 PyErr_Occurred
  000ab	48 85 c0	 test	 rax, rax

; 259  :         return NULL;

  000ae	75 21		 jne	 SHORT $LN12@reversed_n

; 260  : 
; 261  :     if (!PySequence_Check(seq)) {

  000b0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR seq$[rsp]
  000b5	e8 00 00 00 00	 call	 PySequence_Check
  000ba	85 c0		 test	 eax, eax
  000bc	75 20		 jne	 SHORT $LN3@reversed_n

; 262  :         PyErr_SetString(PyExc_TypeError,
; 263  :                         "argument to reversed() must be a sequence");

  000be	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000c5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@LEIEICCA@argument?5to?5reversed?$CI?$CJ?5must?5be?5a@
  000cc	e8 00 00 00 00	 call	 PyErr_SetString
$LN12@reversed_n:

; 264  :         return NULL;

  000d1	33 c0		 xor	 eax, eax

; 279  : }

  000d3	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000d8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000dc	5f		 pop	 rdi
  000dd	c3		 ret	 0
$LN3@reversed_n:

; 265  :     }
; 266  : 
; 267  :     n = PySequence_Size(seq);

  000de	48 8b 4c 24 40	 mov	 rcx, QWORD PTR seq$[rsp]
  000e3	e8 00 00 00 00	 call	 PySequence_Size
  000e8	48 8b f8	 mov	 rdi, rax

; 268  :     if (n == -1)

  000eb	48 83 f8 ff	 cmp	 rax, -1

; 269  :         return NULL;

  000ef	74 e0		 je	 SHORT $LN12@reversed_n

; 270  : 
; 271  :     ro = (reversedobject *)type->tp_alloc(type, 0);

  000f1	33 d2		 xor	 edx, edx
  000f3	48 8b cb	 mov	 rcx, rbx
  000f6	ff 93 88 01 00
	00		 call	 QWORD PTR [rbx+392]
  000fc	48 8b d8	 mov	 rbx, rax

; 272  :     if (ro == NULL)

  000ff	48 85 c0	 test	 rax, rax

; 273  :         return NULL;

  00102	74 cd		 je	 SHORT $LN12@reversed_n

; 274  : 
; 275  :     ro->index = n-1;

  00104	48 8d 47 ff	 lea	 rax, QWORD PTR [rdi-1]
  00108	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax

; 276  :     Py_INCREF(seq);

  0010c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR seq$[rsp]
  00111	e8 00 00 00 00	 call	 _Py_IncRef

; 277  :     ro->seq = seq;

  00116	4c 8b 5c 24 40	 mov	 r11, QWORD PTR seq$[rsp]

; 278  :     return (PyObject *)ro;

  0011b	48 8b c3	 mov	 rax, rbx
  0011e	4c 89 5b 68	 mov	 QWORD PTR [rbx+104], r11

; 279  : }

  00122	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00127	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0012b	5f		 pop	 rdi
  0012c	c3		 ret	 0
reversed_new ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$reversed_dealloc DD imagerel reversed_dealloc
	DD	imagerel reversed_dealloc+152
	DD	imagerel $unwind$reversed_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$reversed_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\enumobject.c
xdata	ENDS
;	COMDAT reversed_dealloc
_TEXT	SEGMENT
ro$ = 64
reversed_dealloc PROC					; COMDAT

; 283  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 284  :     PyObject_GC_UnTrack(ro);

  0000d	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 285  :     Py_XDECREF(ro->seq);

  00012	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  00016	48 85 db	 test	 rbx, rbx
  00019	74 65		 je	 SHORT $LN3@reversed_d
  0001b	e8 00 00 00 00	 call	 _Py_PXCTX
  00020	85 c0		 test	 eax, eax
  00022	75 5c		 jne	 SHORT $LN3@reversed_d
  00024	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00028	a8 20		 test	 al, 32			; 00000020H
  0002a	75 4c		 jne	 SHORT $LN11@reversed_d
  0002c	84 c0		 test	 al, al
  0002e	78 48		 js	 SHORT $LN11@reversed_d
  00030	a8 02		 test	 al, 2
  00032	75 4c		 jne	 SHORT $LN3@reversed_d
  00034	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00038	75 46		 jne	 SHORT $LN3@reversed_d
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00048	4c 8b cb	 mov	 r9, rbx
  0004b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00051	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00059	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005e	48 8b cb	 mov	 rcx, rbx
  00061	85 c0		 test	 eax, eax
  00063	74 07		 je	 SHORT $LN16@reversed_d
  00065	e8 00 00 00 00	 call	 _Px_Dealloc
  0006a	eb 14		 jmp	 SHORT $LN3@reversed_d
$LN16@reversed_d:
  0006c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00070	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00076	eb 08		 jmp	 SHORT $LN3@reversed_d
$LN11@reversed_d:
  00078	48 8b cb	 mov	 rcx, rbx
  0007b	e8 00 00 00 00	 call	 Px_DecRef
$LN3@reversed_d:

; 286  :     Py_TYPE(ro)->tp_free(ro);

  00080	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00084	48 8b cf	 mov	 rcx, rdi

; 287  : }

  00087	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0008c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00090	5f		 pop	 rdi
  00091	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
reversed_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@FHNIGFND@reversed_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$reversed_traverse DD imagerel reversed_traverse
	DD	imagerel reversed_traverse+97
	DD	imagerel $unwind$reversed_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$reversed_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BC@FHNIGFND@reversed_traverse?$AA@
CONST	SEGMENT
??_C@_0BC@FHNIGFND@reversed_traverse?$AA@ DB 'reversed_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT reversed_traverse
_TEXT	SEGMENT
ro$ = 48
visit$ = 56
arg$ = 64
reversed_traverse PROC					; COMDAT

; 291  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 292  :     Py_VISIT(ro->seq);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN3@reversed_t
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@IJIAJLMK@?4?4?2Objects?2enumobject?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@FHNIGFND@reversed_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 24 01 00
	00		 mov	 r8d, 292		; 00000124H
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@reversed_t:
  0003d	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN5@reversed_t
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 02		 jne	 SHORT $LN7@reversed_t
$LN5@reversed_t:

; 293  :     return 0;

  0004f	33 c0		 xor	 eax, eax
$LN7@reversed_t:

; 294  : }

  00051	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00056	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0005b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005f	5f		 pop	 rdi
  00060	c3		 ret	 0
reversed_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@MGJOBLEK@reversed_next?$AA@		; `string'
EXTRN	PyExc_StopIteration:QWORD
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_IndexError:QWORD
EXTRN	PySequence_GetItem:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$reversed_next DD imagerel reversed_next
	DD	imagerel reversed_next+141
	DD	imagerel $unwind$reversed_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$reversed_next DD imagerel reversed_next+141
	DD	imagerel reversed_next+250
	DD	imagerel $chain$0$reversed_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$reversed_next DD imagerel reversed_next+250
	DD	imagerel reversed_next+273
	DD	imagerel $chain$2$reversed_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$reversed_next DD imagerel reversed_next+273
	DD	imagerel reversed_next+286
	DD	imagerel $chain$4$reversed_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$reversed_next DD imagerel reversed_next+286
	DD	imagerel reversed_next+294
	DD	imagerel $chain$5$reversed_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$reversed_next DD 021H
	DD	imagerel reversed_next
	DD	imagerel reversed_next+141
	DD	imagerel $unwind$reversed_next
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$reversed_next DD 020021H
	DD	083400H
	DD	imagerel reversed_next
	DD	imagerel reversed_next+141
	DD	imagerel $unwind$reversed_next
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$reversed_next DD 020021H
	DD	083400H
	DD	imagerel reversed_next
	DD	imagerel reversed_next+141
	DD	imagerel $unwind$reversed_next
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$reversed_next DD 020521H
	DD	083405H
	DD	imagerel reversed_next
	DD	imagerel reversed_next+141
	DD	imagerel $unwind$reversed_next
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$reversed_next DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT ??_C@_0O@MGJOBLEK@reversed_next?$AA@
CONST	SEGMENT
??_C@_0O@MGJOBLEK@reversed_next?$AA@ DB 'reversed_next', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\enumobject.c
CONST	ENDS
;	COMDAT reversed_next
_TEXT	SEGMENT
ro$ = 64
reversed_next PROC					; COMDAT

; 298  : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 299  :     PyObject *item;
; 300  :     Py_ssize_t index = ro->index;

  00006	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  0000a	48 8b f9	 mov	 rdi, rcx

; 301  : 
; 302  :     if (index >= 0) {

  0000d	48 85 d2	 test	 rdx, rdx
  00010	78 3d		 js	 SHORT $LN6@reversed_n@2

; 303  :         item = PySequence_GetItem(ro->seq, index);

  00012	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00016	e8 00 00 00 00	 call	 PySequence_GetItem

; 304  :         if (item != NULL) {

  0001b	48 85 c0	 test	 rax, rax
  0001e	74 0a		 je	 SHORT $LN7@reversed_n@2

; 305  :             ro->index--;

  00020	48 ff 4f 60	 dec	 QWORD PTR [rdi+96]

; 315  : }

  00024	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00028	5f		 pop	 rdi
  00029	c3		 ret	 0
$LN7@reversed_n@2:

; 306  :             return item;
; 307  :         }
; 308  :         if (PyErr_ExceptionMatches(PyExc_IndexError) ||
; 309  :             PyErr_ExceptionMatches(PyExc_StopIteration))

  0002a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
  00031	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00036	85 c0		 test	 eax, eax
  00038	75 10		 jne	 SHORT $LN5@reversed_n@2
  0003a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_StopIteration
  00041	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00046	85 c0		 test	 eax, eax
  00048	74 05		 je	 SHORT $LN6@reversed_n@2
$LN5@reversed_n@2:

; 310  :             PyErr_Clear();

  0004a	e8 00 00 00 00	 call	 PyErr_Clear
$LN6@reversed_n@2:

; 311  :     }
; 312  :     ro->index = -1;
; 313  :     Py_CLEAR(ro->seq);

  0004f	4c 8b 4f 68	 mov	 r9, QWORD PTR [rdi+104]
  00053	48 c7 47 60 ff
	ff ff ff	 mov	 QWORD PTR [rdi+96], -1
  0005b	4d 85 c9	 test	 r9, r9
  0005e	0f 84 ba 00 00
	00		 je	 $LN3@reversed_n@2
  00064	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@IJIAJLMK@?4?4?2Objects?2enumobject?4c?$AA@
  0006b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@MGJOBLEK@reversed_next?$AA@
  00072	41 b8 39 01 00
	00		 mov	 r8d, 313		; 00000139H
  00078	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00080	e8 00 00 00 00	 call	 _PyParallel_Guard
  00085	85 c0		 test	 eax, eax
  00087	0f 85 91 00 00
	00		 jne	 $LN3@reversed_n@2
  0008d	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00092	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  00096	48 c7 47 68 00
	00 00 00	 mov	 QWORD PTR [rdi+104], 0
  0009e	e8 00 00 00 00	 call	 _Py_PXCTX
  000a3	85 c0		 test	 eax, eax
  000a5	75 72		 jne	 SHORT $LN22@reversed_n@2
  000a7	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000ab	a8 20		 test	 al, 32			; 00000020H
  000ad	75 62		 jne	 SHORT $LN15@reversed_n@2
  000af	84 c0		 test	 al, al
  000b1	78 5e		 js	 SHORT $LN15@reversed_n@2
  000b3	a8 02		 test	 al, 2
  000b5	75 62		 jne	 SHORT $LN22@reversed_n@2
  000b7	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000bb	75 5c		 jne	 SHORT $LN22@reversed_n@2
  000bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000cb	4c 8b cb	 mov	 r9, rbx
  000ce	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000d4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000dc	e8 00 00 00 00	 call	 _PyParallel_Guard
  000e1	48 8b cb	 mov	 rcx, rbx
  000e4	85 c0		 test	 eax, eax
  000e6	74 12		 je	 SHORT $LN20@reversed_n@2
  000e8	e8 00 00 00 00	 call	 _Px_Dealloc
  000ed	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 314  :     return NULL;

  000f2	33 c0		 xor	 eax, eax

; 315  : }

  000f4	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000f8	5f		 pop	 rdi
  000f9	c3		 ret	 0

; 311  :     }
; 312  :     ro->index = -1;
; 313  :     Py_CLEAR(ro->seq);

$LN20@reversed_n@2:
  000fa	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000fe	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00104	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 314  :     return NULL;

  00109	33 c0		 xor	 eax, eax

; 315  : }

  0010b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0010f	5f		 pop	 rdi
  00110	c3		 ret	 0

; 311  :     }
; 312  :     ro->index = -1;
; 313  :     Py_CLEAR(ro->seq);

$LN15@reversed_n@2:
  00111	48 8b cb	 mov	 rcx, rbx
  00114	e8 00 00 00 00	 call	 Px_DecRef
$LN22@reversed_n@2:
  00119	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN3@reversed_n@2:

; 314  :     return NULL;

  0011e	33 c0		 xor	 eax, eax

; 315  : }

  00120	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00124	5f		 pop	 rdi
  00125	c3		 ret	 0
reversed_next ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$reversed_len DD imagerel reversed_len
	DD	imagerel reversed_len+73
	DD	imagerel $unwind$reversed_len
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$reversed_len DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT reversed_len
_TEXT	SEGMENT
ro$ = 48
reversed_len PROC					; COMDAT

; 324  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 325  :     Py_ssize_t position, seqsize;
; 326  : 
; 327  :     if (ro->seq == NULL)

  00009	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  0000d	48 85 c9	 test	 rcx, rcx
  00010	75 0a		 jne	 SHORT $LN2@reversed_l

; 334  : }

  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5b		 pop	 rbx
  00017	e9 00 00 00 00	 jmp	 PyLong_FromLong
$LN2@reversed_l:

; 328  :         return PyLong_FromLong(0);
; 329  :     seqsize = PySequence_Size(ro->seq);

  0001c	e8 00 00 00 00	 call	 PySequence_Size

; 330  :     if (seqsize == -1)

  00021	48 83 f8 ff	 cmp	 rax, -1
  00025	75 08		 jne	 SHORT $LN1@reversed_l

; 331  :         return NULL;

  00027	33 c0		 xor	 eax, eax

; 334  : }

  00029	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002d	5b		 pop	 rbx
  0002e	c3		 ret	 0
$LN1@reversed_l:

; 332  :     position = ro->index + 1;

  0002f	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]

; 333  :     return PyLong_FromSsize_t((seqsize < position)  ?  0  :  position);

  00033	33 d2		 xor	 edx, edx
  00035	48 ff c1	 inc	 rcx
  00038	48 3b c1	 cmp	 rax, rcx
  0003b	48 0f 4c ca	 cmovl	 rcx, rdx

; 334  : }

  0003f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00043	5b		 pop	 rbx
  00044	e9 00 00 00 00	 jmp	 PyLong_FromSsize_t
reversed_len ENDP
_TEXT	ENDS
PUBLIC	??_C@_05FHNOOHHF@O?$CI?$CI?$CJ?$CJ?$AA@		; `string'
PUBLIC	??_C@_05EOBHPBAN@O?$CIO?$CJn?$AA@		; `string'
;	COMDAT ??_C@_05FHNOOHHF@O?$CI?$CI?$CJ?$CJ?$AA@
CONST	SEGMENT
??_C@_05FHNOOHHF@O?$CI?$CI?$CJ?$CJ?$AA@ DB 'O(())', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05EOBHPBAN@O?$CIO?$CJn?$AA@
CONST	SEGMENT
??_C@_05EOBHPBAN@O?$CIO?$CJn?$AA@ DB 'O(O)n', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT reversed_reduce
_TEXT	SEGMENT
ro$ = 8
reversed_reduce PROC					; COMDAT

; 341  :     if (ro->seq)

  00000	4c 8b 41 68	 mov	 r8, QWORD PTR [rcx+104]

; 342  :         return Py_BuildValue("O(O)n", Py_TYPE(ro), ro->seq, ro->index);

  00004	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00008	4d 85 c0	 test	 r8, r8
  0000b	74 10		 je	 SHORT $LN2@reversed_r
  0000d	4c 8b 49 60	 mov	 r9, QWORD PTR [rcx+96]
  00011	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05EOBHPBAN@O?$CIO?$CJn?$AA@

; 345  : }

  00018	e9 00 00 00 00	 jmp	 Py_BuildValue
$LN2@reversed_r:

; 343  :     else
; 344  :         return Py_BuildValue("O(())", Py_TYPE(ro));

  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05FHNOOHHF@O?$CI?$CI?$CJ?$CJ?$AA@

; 345  : }

  00024	e9 00 00 00 00	 jmp	 Py_BuildValue
reversed_reduce ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$reversed_setstate DD imagerel reversed_setstate
	DD	imagerel reversed_setstate+185
	DD	imagerel $unwind$reversed_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$reversed_setstate DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\enumobject.c
xdata	ENDS
;	COMDAT reversed_setstate
_TEXT	SEGMENT
ro$ = 64
state$ = 72
reversed_setstate PROC					; COMDAT

; 349  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 350  :     Py_ssize_t index = PyLong_AsSsize_t(state);

  0000d	48 8b ca	 mov	 rcx, rdx
  00010	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  00015	48 8b d8	 mov	 rbx, rax

; 351  :     if (index == -1 && PyErr_Occurred())

  00018	48 83 f8 ff	 cmp	 rax, -1
  0001c	75 17		 jne	 SHORT $LN6@reversed_s
  0001e	e8 00 00 00 00	 call	 PyErr_Occurred
  00023	48 85 c0	 test	 rax, rax
  00026	74 0d		 je	 SHORT $LN6@reversed_s
$LN13@reversed_s:

; 352  :         return NULL;

  00028	33 c0		 xor	 eax, eax

; 364  : }

  0002a	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0002f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00033	5f		 pop	 rdi
  00034	c3		 ret	 0
$LN6@reversed_s:

; 353  :     if (ro->seq != 0) {

  00035	48 8b 4f 68	 mov	 rcx, QWORD PTR [rdi+104]
  00039	48 85 c9	 test	 rcx, rcx
  0003c	74 24		 je	 SHORT $LN5@reversed_s

; 354  :         Py_ssize_t n = PySequence_Size(ro->seq);

  0003e	e8 00 00 00 00	 call	 PySequence_Size

; 355  :         if (n < 0)

  00043	48 85 c0	 test	 rax, rax

; 356  :             return NULL;

  00046	78 e0		 js	 SHORT $LN13@reversed_s

; 357  :         if (index < -1)

  00048	48 83 fb ff	 cmp	 rbx, -1
  0004c	7d 06		 jge	 SHORT $LN3@reversed_s

; 358  :             index = -1;

  0004e	48 83 cb ff	 or	 rbx, -1
  00052	eb 0a		 jmp	 SHORT $LN1@reversed_s
$LN3@reversed_s:

; 359  :         else if (index > n-1)

  00054	48 ff c8	 dec	 rax
  00057	48 3b d8	 cmp	 rbx, rax
  0005a	48 0f 4f d8	 cmovg	 rbx, rax
$LN1@reversed_s:

; 360  :             index = n-1;
; 361  :         ro->index = index;

  0005e	48 89 5f 60	 mov	 QWORD PTR [rdi+96], rbx
$LN5@reversed_s:

; 362  :     }
; 363  :     Py_RETURN_NONE;

  00062	e8 00 00 00 00	 call	 _Py_PXCTX
  00067	85 c0		 test	 eax, eax
  00069	75 3c		 jne	 SHORT $LN10@reversed_s
  0006b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00080	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00086	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0008e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00093	85 c0		 test	 eax, eax
  00095	75 09		 jne	 SHORT $LN9@reversed_s
  00097	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0009e	74 07		 je	 SHORT $LN10@reversed_s
$LN9@reversed_s:
  000a0	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN10@reversed_s:
  000a7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 364  : }

  000ae	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000b3	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b7	5f		 pop	 rdi
  000b8	c3		 ret	 0
reversed_setstate ENDP
_TEXT	ENDS
END
