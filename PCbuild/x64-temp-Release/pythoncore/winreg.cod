; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_06OHDDMFCG@winreg?$AA@			; `string'
PUBLIC	??_C@_0L@ICGGAOLB@SetValueEx?$AA@		; `string'
PUBLIC	??_C@_08JHMAAEPA@SetValue?$AA@			; `string'
PUBLIC	??_C@_07BMOIJBEL@SaveKey?$AA@			; `string'
PUBLIC	??_C@_0BD@CBDGFLPG@QueryReflectionKey?$AA@	; `string'
PUBLIC	??_C@_0N@MDCBENNB@QueryInfoKey?$AA@		; `string'
PUBLIC	??_C@_0N@HKICBNFG@QueryValueEx?$AA@		; `string'
PUBLIC	??_C@_0L@PJJMANCA@QueryValue?$AA@		; `string'
PUBLIC	??_C@_09HDCIMAEH@OpenKeyEx?$AA@			; `string'
PUBLIC	??_C@_07EMHGDHB@OpenKey?$AA@			; `string'
PUBLIC	??_C@_07MKPPNCAC@LoadKey?$AA@			; `string'
PUBLIC	??_C@_08FFGKIMAP@FlushKey?$AA@			; `string'
PUBLIC	??_C@_0BJ@FIJODGGF@ExpandEnvironmentStrings?$AA@ ; `string'
PUBLIC	??_C@_09LLFDHLHP@EnumValue?$AA@			; `string'
PUBLIC	??_C@_07OGJAOAGB@EnumKey?$AA@			; `string'
PUBLIC	??_C@_0BE@FOGLKLAG@EnableReflectionKey?$AA@	; `string'
PUBLIC	??_C@_0BF@BLABHKJP@DisableReflectionKey?$AA@	; `string'
PUBLIC	??_C@_0M@PPLCJLKN@DeleteValue?$AA@		; `string'
PUBLIC	??_C@_0M@JLKACAJ@DeleteKeyEx?$AA@		; `string'
PUBLIC	??_C@_09POIPIBKM@DeleteKey?$AA@			; `string'
PUBLIC	??_C@_0M@FLBGEAAI@CreateKeyEx?$AA@		; `string'
PUBLIC	??_C@_09DPPCIKFF@CreateKey?$AA@			; `string'
PUBLIC	??_C@_0BA@GBJAIKNL@ConnectRegistry?$AA@		; `string'
PUBLIC	??_C@_08CEMDMOHB@CloseKey?$AA@			; `string'
PUBLIC	??_C@_06FENFPALN@PyHKEY?$AA@			; `string'
PUBLIC	??_C@_06NCGDPKCC@handle?$AA@			; `string'
PUBLIC	??_C@_08CMFIGCJD@__exit__?$AA@			; `string'
PUBLIC	??_C@_09OAJHKKGH@__enter__?$AA@			; `string'
PUBLIC	??_C@_06OCJDKNLN@Detach?$AA@			; `string'
PUBLIC	??_C@_05LGELBCGM@Close?$AA@			; `string'
PUBLIC	??_C@_0BB@HNACHIIA@bad?5operand?5type?$AA@	; `string'
PUBLIC	PyHKEY_Type
;	COMDAT ??_C@_06OHDDMFCG@winreg?$AA@
CONST	SEGMENT
??_C@_06OHDDMFCG@winreg?$AA@ DB 'winreg', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ICGGAOLB@SetValueEx?$AA@
CONST	SEGMENT
??_C@_0L@ICGGAOLB@SetValueEx?$AA@ DB 'SetValueEx', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JHMAAEPA@SetValue?$AA@
CONST	SEGMENT
??_C@_08JHMAAEPA@SetValue?$AA@ DB 'SetValue', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BMOIJBEL@SaveKey?$AA@
CONST	SEGMENT
??_C@_07BMOIJBEL@SaveKey?$AA@ DB 'SaveKey', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CBDGFLPG@QueryReflectionKey?$AA@
CONST	SEGMENT
??_C@_0BD@CBDGFLPG@QueryReflectionKey?$AA@ DB 'QueryReflectionKey', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MDCBENNB@QueryInfoKey?$AA@
CONST	SEGMENT
??_C@_0N@MDCBENNB@QueryInfoKey?$AA@ DB 'QueryInfoKey', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HKICBNFG@QueryValueEx?$AA@
CONST	SEGMENT
??_C@_0N@HKICBNFG@QueryValueEx?$AA@ DB 'QueryValueEx', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PJJMANCA@QueryValue?$AA@
CONST	SEGMENT
??_C@_0L@PJJMANCA@QueryValue?$AA@ DB 'QueryValue', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09HDCIMAEH@OpenKeyEx?$AA@
CONST	SEGMENT
??_C@_09HDCIMAEH@OpenKeyEx?$AA@ DB 'OpenKeyEx', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07EMHGDHB@OpenKey?$AA@
CONST	SEGMENT
??_C@_07EMHGDHB@OpenKey?$AA@ DB 'OpenKey', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MKPPNCAC@LoadKey?$AA@
CONST	SEGMENT
??_C@_07MKPPNCAC@LoadKey?$AA@ DB 'LoadKey', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FFGKIMAP@FlushKey?$AA@
CONST	SEGMENT
??_C@_08FFGKIMAP@FlushKey?$AA@ DB 'FlushKey', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FIJODGGF@ExpandEnvironmentStrings?$AA@
CONST	SEGMENT
??_C@_0BJ@FIJODGGF@ExpandEnvironmentStrings?$AA@ DB 'ExpandEnvironmentStr'
	DB	'ings', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_09LLFDHLHP@EnumValue?$AA@
CONST	SEGMENT
??_C@_09LLFDHLHP@EnumValue?$AA@ DB 'EnumValue', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07OGJAOAGB@EnumKey?$AA@
CONST	SEGMENT
??_C@_07OGJAOAGB@EnumKey?$AA@ DB 'EnumKey', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FOGLKLAG@EnableReflectionKey?$AA@
CONST	SEGMENT
??_C@_0BE@FOGLKLAG@EnableReflectionKey?$AA@ DB 'EnableReflectionKey', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BLABHKJP@DisableReflectionKey?$AA@
CONST	SEGMENT
??_C@_0BF@BLABHKJP@DisableReflectionKey?$AA@ DB 'DisableReflectionKey', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PPLCJLKN@DeleteValue?$AA@
CONST	SEGMENT
??_C@_0M@PPLCJLKN@DeleteValue?$AA@ DB 'DeleteValue', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JLKACAJ@DeleteKeyEx?$AA@
CONST	SEGMENT
??_C@_0M@JLKACAJ@DeleteKeyEx?$AA@ DB 'DeleteKeyEx', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09POIPIBKM@DeleteKey?$AA@
CONST	SEGMENT
??_C@_09POIPIBKM@DeleteKey?$AA@ DB 'DeleteKey', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FLBGEAAI@CreateKeyEx?$AA@
CONST	SEGMENT
??_C@_0M@FLBGEAAI@CreateKeyEx?$AA@ DB 'CreateKeyEx', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09DPPCIKFF@CreateKey?$AA@
CONST	SEGMENT
??_C@_09DPPCIKFF@CreateKey?$AA@ DB 'CreateKey', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GBJAIKNL@ConnectRegistry?$AA@
CONST	SEGMENT
??_C@_0BA@GBJAIKNL@ConnectRegistry?$AA@ DB 'ConnectRegistry', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08CEMDMOHB@CloseKey?$AA@
CONST	SEGMENT
??_C@_08CEMDMOHB@CloseKey?$AA@ DB 'CloseKey', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FENFPALN@PyHKEY?$AA@
CONST	SEGMENT
??_C@_06FENFPALN@PyHKEY?$AA@ DB 'PyHKEY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NCGDPKCC@handle?$AA@
CONST	SEGMENT
??_C@_06NCGDPKCC@handle?$AA@ DB 'handle', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CMFIGCJD@__exit__?$AA@
CONST	SEGMENT
??_C@_08CMFIGCJD@__exit__?$AA@ DB '__exit__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OAJHKKGH@__enter__?$AA@
CONST	SEGMENT
??_C@_09OAJHKKGH@__enter__?$AA@ DB '__enter__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06OCJDKNLN@Detach?$AA@
CONST	SEGMENT
??_C@_06OCJDKNLN@Detach?$AA@ DB 'Detach', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LGELBCGM@Close?$AA@
CONST	SEGMENT
??_C@_05LGELBCGM@Close?$AA@ DB 'Close', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HNACHIIA@bad?5operand?5type?$AA@
CONST	SEGMENT
??_C@_0BB@HNACHIIA@bad?5operand?5type?$AA@ DB 'bad operand type', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
errNotAHandle DB 'Object is not a handle', 00H
	ORG $+9
module_doc DB	'This module provides access to the Windows registry API.'
	DB	0aH, 0aH, 'Functions:', 0aH, 0aH, 'CloseKey() - Closes a regis'
	DB	'try key.', 0aH, 'ConnectRegistry() - Establishes a connection'
	DB	' to a predefined registry handle', 0aH, '                    '
	DB	'on another computer.', 0aH, 'CreateKey() - Creates the specif'
	DB	'ied key, or opens it if it already exists.', 0aH, 'DeleteKey('
	DB	') - Deletes the specified key.', 0aH, 'DeleteValue() - Remove'
	DB	's a named value from the specified registry key.', 0aH, 'Enum'
	DB	'Key() - Enumerates subkeys of the specified open registry key'
	DB	'.', 0aH, 'EnumValue() - Enumerates values of the specified op'
	DB	'en registry key.', 0aH, 'ExpandEnvironmentStrings() - Expand '
	DB	'the env strings in a REG_EXPAND_SZ string.', 0aH, 'FlushKey()'
	DB	' - Writes all the attributes of the specified key to the regi'
	DB	'stry.', 0aH, 'LoadKey() - Creates a subkey under HKEY_USER or'
	DB	' HKEY_LOCAL_MACHINE and stores', 0aH, '            registrati'
	DB	'on information from a specified file into that subkey.', 0aH, 'O'
	DB	'penKey() - Opens the specified key.', 0aH, 'OpenKeyEx() - Ali'
	DB	'as of OpenKey().', 0aH, 'QueryValue() - Retrieves the value a'
	DB	'ssociated with the unnamed value for a', 0aH, '              '
	DB	' specified key in the registry.', 0aH, 'QueryValueEx() - Retr'
	DB	'ieves the type and data for a specified value name', 0aH, '  '
	DB	'               associated with an open registry key.', 0aH, 'Q'
	DB	'ueryInfoKey() - Returns information about the specified key.', 0aH
	DB	'SaveKey() - Saves the specified key, and all its subkeys a fi'
	DB	'le.', 0aH, 'SetValue() - Associates a value with a specified '
	DB	'key.', 0aH, 'SetValueEx() - Stores data in the value field of'
	DB	' an open registry key.', 0aH, 0aH, 'Special objects:', 0aH, 0aH
	DB	'HKEYType -- type object for HKEY objects', 0aH, 'error -- exc'
	DB	'eption raised for Win32 errors', 0aH, 0aH, 'Integer constants'
	DB	':', 0aH, 'Many constants are defined - see the documentation '
	DB	'for each function', 0aH, 'to see what constants are used, and'
	DB	' where.', 00H
	ORG $+1
CloseKey_doc DB	'CloseKey(hkey)', 0aH, 'Closes a previously opened regist'
	DB	'ry key.', 0aH, 0aH, 'The hkey argument specifies a previously'
	DB	' opened key.', 0aH, 0aH, 'Note that if the key is not closed '
	DB	'using this method, it will be', 0aH, 'closed when the hkey ob'
	DB	'ject is destroyed by Python.', 00H
	ORG $+4
OpenKeyEx_doc DB 'See OpenKey()', 00H
	ORG $+2
failMsg	DQ	FLAT:??_C@_0BB@HNACHIIA@bad?5operand?5type?$AA@
ConnectRegistry_doc DB 'ConnectRegistry(computer_name, key) -> key', 0aH, 'E'
	DB	'stablishes a connection to a predefined registry handle on an'
	DB	'other computer.', 0aH, 0aH, 'computer_name is the name of the'
	DB	' remote computer, of the form \\computername.', 0aH, '       '
	DB	'       If None, the local computer is used.', 0aH, 'key is th'
	DB	'e predefined handle to connect to.', 0aH, 0aH, 'The return va'
	DB	'lue is the handle of the opened key.', 0aH, 'If the function '
	DB	'fails, an OSError exception is raised.', 00H
	ORG $+15
CreateKey_doc DB 'CreateKey(key, sub_key) -> key', 0aH, 'Creates or opens'
	DB	' the specified key.', 0aH, 0aH, 'key is an already open key, '
	DB	'or one of the predefined HKEY_* constants.', 0aH, 'sub_key is'
	DB	' a string that names the key this method opens or creates.', 0aH
	DB	0aH, 'If key is one of the predefined keys, sub_key may be Non'
	DB	'e. In that case,', 0aH, 'the handle returned is the same key '
	DB	'handle passed in to the function.', 0aH, 0aH, 'If the key alr'
	DB	'eady exists, this function opens the existing key.', 0aH, 0aH
	DB	'The return value is the handle of the opened key.', 0aH, 'If '
	DB	'the function fails, an OSError exception is raised.', 00H
	ORG $+4
CreateKeyEx_doc DB 'CreateKeyEx(key, sub_key, reserved=0, access=KEY_WRIT'
	DB	'E) -> key', 0aH, 'Creates or opens the specified key.', 0aH, 0aH
	DB	'key is an already open key, or one of the predefined HKEY_* c'
	DB	'onstants', 0aH, 'sub_key is a string that names the key this '
	DB	'method opens or creates.', 0aH, 'reserved is a reserved integ'
	DB	'er, and must be zero.  Default is zero.', 0aH, 'access is an '
	DB	'integer that specifies an access mask that describes the ', 0aH
	DB	'       desired security access for the key. Default is KEY_WR'
	DB	'ITE.', 0aH, 0aH, 'If key is one of the predefined keys, sub_k'
	DB	'ey may be None. In that case,', 0aH, 'the handle returned is '
	DB	'the same key handle passed in to the function.', 0aH, 0aH, 'I'
	DB	'f the key already exists, this function opens the existing ke'
	DB	'y', 0aH, 0aH, 'The return value is the handle of the opened k'
	DB	'ey.', 0aH, 'If the function fails, an OSError exception is ra'
	DB	'ised.', 00H
	ORG $+9
DeleteKey_doc DB 'DeleteKey(key, sub_key)', 0aH, 'Deletes the specified k'
	DB	'ey.', 0aH, 0aH, 'key is an already open key, or any one of th'
	DB	'e predefined HKEY_* constants.', 0aH, 'sub_key is a string th'
	DB	'at must be a subkey of the key identified by the key', 0aH, ' '
	DB	'       parameter. This value must not be None, and the key ma'
	DB	'y not have', 0aH, '        subkeys.', 0aH, 0aH, 'This method '
	DB	'can not delete keys with subkeys.', 0aH, 0aH, 'If the functio'
	DB	'n succeeds, the entire key, including all of its values,', 0aH
	DB	'is removed.  If the function fails, an OSError exception is r'
	DB	'aised.', 00H
	ORG $+1
DeleteKeyEx_doc DB 'DeleteKeyEx(key, sub_key, access=KEY_WOW64_64KEY, res'
	DB	'erved=0)', 0aH, 'Deletes the specified key (64-bit OS only).', 0aH
	DB	0aH, 'key is an already open key, or any one of the predefined'
	DB	' HKEY_* constants.', 0aH, 'sub_key is a string that must be a'
	DB	' subkey of the key identified by the key', 0aH, '        para'
	DB	'meter. This value must not be None, and the key may not have', 0aH
	DB	'        subkeys.', 0aH, 'reserved is a reserved integer, and '
	DB	'must be zero.  Default is zero.', 0aH, 'access is an integer '
	DB	'that specifies an access mask that describes the ', 0aH, '   '
	DB	'    desired security access for the key. Default is KEY_WOW64'
	DB	'_64KEY.', 0aH, 0aH, 'This method can not delete keys with sub'
	DB	'keys.', 0aH, 0aH, 'If the function succeeds, the entire key, '
	DB	'including all of its values,', 0aH, 'is removed.  If the func'
	DB	'tion fails, an OSError exception is raised.', 0aH, 'On unsupp'
	DB	'orted Windows versions, NotImplementedError is raised.', 00H
	ORG $+7
DeleteValue_doc DB 'DeleteValue(key, value)', 0aH, 'Removes a named value'
	DB	' from a registry key.', 0aH, 0aH, 'key is an already open key'
	DB	', or any one of the predefined HKEY_* constants.', 0aH, 'valu'
	DB	'e is a string that identifies the value to remove.', 00H
	ORG $+10
EnumKey_doc DB	'EnumKey(key, index) -> string', 0aH, 'Enumerates subkeys'
	DB	' of an open registry key.', 0aH, 0aH, 'key is an already open'
	DB	' key, or any one of the predefined HKEY_* constants.', 0aH, 'i'
	DB	'ndex is an integer that identifies the index of the key to re'
	DB	'trieve.', 0aH, 0aH, 'The function retrieves the name of one s'
	DB	'ubkey each time it is called.', 0aH, 'It is typically called '
	DB	'repeatedly until an OSError exception is', 0aH, 'raised, indi'
	DB	'cating no more values are available.', 00H
	ORG $+12
EnumValue_doc DB 'EnumValue(key, index) -> tuple', 0aH, 'Enumerates value'
	DB	's of an open registry key.', 0aH, 'key is an already open key'
	DB	', or any one of the predefined HKEY_* constants.', 0aH, 'inde'
	DB	'x is an integer that identifies the index of the value to ret'
	DB	'rieve.', 0aH, 0aH, 'The function retrieves the name of one su'
	DB	'bkey each time it is called.', 0aH, 'It is typically called r'
	DB	'epeatedly, until an OSError exception', 0aH, 'is raised, indi'
	DB	'cating no more values.', 0aH, 0aH, 'The result is a tuple of '
	DB	'3 items:', 0aH, 'value_name is a string that identifies the v'
	DB	'alue.', 0aH, 'value_data is an object that holds the value da'
	DB	'ta, and whose type depends', 0aH, '           on the underlyi'
	DB	'ng registry type.', 0aH, 'data_type is an integer that identi'
	DB	'fies the type of the value data.', 00H
	ORG $+9
ExpandEnvironmentStrings_doc DB 'ExpandEnvironmentStrings(string) -> stri'
	DB	'ng', 0aH, 'Expand environment vars.', 0aH, 00H
	ORG $+11
FlushKey_doc DB	'FlushKey(key)', 0aH, 'Writes all the attributes of a key'
	DB	' to the registry.', 0aH, 0aH, 'key is an already open key, or'
	DB	' any one of the predefined HKEY_* constants.', 0aH, 0aH, 'It '
	DB	'is not necessary to call FlushKey to change a key.  Registry '
	DB	'changes are', 0aH, 'flushed to disk by the registry using its'
	DB	' lazy flusher.  Registry changes are', 0aH, 'also flushed to '
	DB	'disk at system shutdown.  Unlike CloseKey(), the FlushKey()', 0aH
	DB	'method returns only when all the data has been written to the'
	DB	' registry.', 0aH, 0aH, 'An application should only call Flush'
	DB	'Key() if it requires absolute certainty', 0aH, 'that registry'
	DB	' changes are on disk.  If you don''t know whether a FlushKey('
	DB	')', 0aH, 'call is required, it probably isn''t.', 00H
	ORG $+5
LoadKey_doc DB	'LoadKey(key, sub_key, file_name)', 0aH, 'Creates a subke'
	DB	'y under the specified key and stores registration information'
	DB	0aH, 'from a specified file into that subkey.', 0aH, 0aH, 'key'
	DB	' is an already open key, or any one of the predefined HKEY_* '
	DB	'constants.', 0aH, 'sub_key is a string that identifies the su'
	DB	'b_key to load.', 0aH, 'file_name is the name of the file to l'
	DB	'oad registry data from.  This file must', 0aH, '          hav'
	DB	'e been created with the SaveKey() function.  Under the file', 0aH
	DB	'          allocation table (FAT) file system, the filename ma'
	DB	'y not have an', 0aH, '          extension.', 0aH, 0aH, 'A cal'
	DB	'l to LoadKey() fails if the calling process does not have the'
	DB	0aH, 'SE_RESTORE_PRIVILEGE privilege.', 0aH, 0aH, 'If key is a'
	DB	' handle returned by ConnectRegistry(), then the path specifie'
	DB	'd', 0aH, 'in fileName is relative to the remote computer.', 0aH
	DB	0aH, 'The docs imply key must be in the HKEY_USER or HKEY_LOCA'
	DB	'L_MACHINE tree', 00H
	ORG $+7
OpenKey_doc DB	'OpenKey(key, sub_key, reserved=0, access=KEY_READ) -> ke'
	DB	'y', 0aH, 'Opens the specified key.', 0aH, 0aH, 'key is an alr'
	DB	'eady open key, or any one of the predefined HKEY_* constants.'
	DB	0aH, 'sub_key is a string that identifies the sub_key to open.'
	DB	0aH, 'reserved is a reserved integer, and must be zero.  Defau'
	DB	'lt is zero.', 0aH, 'access is an integer that specifies an ac'
	DB	'cess mask that describes the desired', 0aH, '       security '
	DB	'access for the key.  Default is KEY_READ', 0aH, 0aH, 'The res'
	DB	'ult is a new handle to the specified key', 0aH, 'If the funct'
	DB	'ion fails, an OSError exception is raised.', 00H
	ORG $+5
QueryInfoKey_doc DB 'QueryInfoKey(key) -> tuple', 0aH, 'Returns informati'
	DB	'on about a key.', 0aH, 0aH, 'key is an already open key, or a'
	DB	'ny one of the predefined HKEY_* constants.', 0aH, 0aH, 'The r'
	DB	'esult is a tuple of 3 items:An integer that identifies the nu'
	DB	'mber of sub keys this key has.', 0aH, 'An integer that identi'
	DB	'fies the number of values this key has.', 0aH, 'An integer th'
	DB	'at identifies when the key was last modified (if available)', 0aH
	DB	' as 100''s of nanoseconds since Jan 1, 1600.', 00H
	ORG $+3
QueryValue_doc DB 'QueryValue(key, sub_key) -> string', 0aH, 'Retrieves t'
	DB	'he unnamed value for a key.', 0aH, 0aH, 'key is an already op'
	DB	'en key, or any one of the predefined HKEY_* constants.', 0aH, 's'
	DB	'ub_key is a string that holds the name of the subkey with whi'
	DB	'ch the value', 0aH, '        is associated.  If this paramete'
	DB	'r is None or empty, the function', 0aH, '        retrieves th'
	DB	'e value set by the SetValue() method for the key', 0aH, '    '
	DB	'    identified by key.', 0aH, 'Values in the registry have na'
	DB	'me, type, and data components. This method', 0aH, 'retrieves '
	DB	'the data for a key''s first value that has a NULL name.', 0aH
	DB	'But the underlying API call doesn''t return the type, Lame La'
	DB	'me Lame, DONT USE THIS!!!', 00H
	ORG $+6
QueryValueEx_doc DB 'QueryValueEx(key, value_name) -> (value, type_id)', 0aH
	DB	'Retrieves the type and data for a specified value name associ'
	DB	'ated with an', 0aH, 'open registry key.', 0aH, 0aH, 'key is a'
	DB	'n already open key, or any one of the predefined HKEY_* const'
	DB	'ants.', 0aH, 'value_name is a string indicating the value to '
	DB	'query', 00H
SaveKey_doc DB	'SaveKey(key, file_name)', 0aH, 'Saves the specified key,'
	DB	' and all its subkeys to the specified file.', 0aH, 0aH, 'key '
	DB	'is an already open key, or any one of the predefined HKEY_* c'
	DB	'onstants.', 0aH, 'file_name is the name of the file to save r'
	DB	'egistry data to.  This file cannot', 0aH, '          already '
	DB	'exist. If this filename includes an extension, it cannot be', 0aH
	DB	'          used on file allocation table (FAT) file systems by'
	DB	' the LoadKey(),', 0aH, '          ReplaceKey() or RestoreKey('
	DB	') methods.', 0aH, 0aH, 'If key represents a key on a remote c'
	DB	'omputer, the path described by file_name', 0aH, 'is relative '
	DB	'to the remote computer.', 0aH, 0aH, 'The caller of this metho'
	DB	'd must possess the SeBackupPrivilege security', 0aH, 'privile'
	DB	'ge.  This function passes NULL for security_attributes to the'
	DB	' API.', 00H
	ORG $+11
SetValue_doc DB	'SetValue(key, sub_key, type, value)', 0aH, 'Associates a'
	DB	' value with a specified key.', 0aH, 0aH, 'key is an already o'
	DB	'pen key, or any one of the predefined HKEY_* constants.', 0aH
	DB	'sub_key is a string that names the subkey with which the valu'
	DB	'e is associated.', 0aH, 'type is an integer that specifies th'
	DB	'e type of the data.  Currently this must', 0aH, '     be REG_'
	DB	'SZ, meaning only strings are supported.', 0aH, 'value is a st'
	DB	'ring that specifies the new value.', 0aH, 0aH, 'If the key sp'
	DB	'ecified by the sub_key parameter does not exist, the SetValue'
	DB	0aH, 'function creates it.', 0aH, 0aH, 'Value lengths are limi'
	DB	'ted by available memory. Long values (more than', 0aH, '2048 '
	DB	'bytes) should be stored as files with the filenames stored in'
	DB	' ', 0aH, 'the configuration registry.  This helps the registr'
	DB	'y perform efficiently.', 0aH, 0aH, 'The key identified by the'
	DB	' key parameter must have been opened with', 0aH, 'KEY_SET_VAL'
	DB	'UE access.', 00H
	ORG $+8
SetValueEx_doc DB 'SetValueEx(key, value_name, reserved, type, value)', 0aH
	DB	'Stores data in the value field of an open registry key.', 0aH
	DB	0aH, 'key is an already open key, or any one of the predefined'
	DB	' HKEY_* constants.', 0aH, 'value_name is a string containing '
	DB	'the name of the value to set, or None.', 0aH, 'reserved can b'
	DB	'e anything - zero is always passed to the API.', 0aH, 'type i'
	DB	's an integer that specifies the type of the data.  This shoul'
	DB	'd be one of:', 0aH, '  REG_BINARY -- Binary data in any form.'
	DB	0aH, '  REG_DWORD -- A 32-bit number.', 0aH, '  REG_DWORD_LITT'
	DB	'LE_ENDIAN -- A 32-bit number in little-endian format.', 0aH, ' '
	DB	' REG_DWORD_BIG_ENDIAN -- A 32-bit number in big-endian format'
	DB	'.', 0aH, '  REG_EXPAND_SZ -- A null-terminated string that co'
	DB	'ntains unexpanded references', 0aH, '                   to en'
	DB	'vironment variables (for example, %PATH%).', 0aH, '  REG_LINK'
	DB	' -- A Unicode symbolic link.', 0aH, '  REG_MULTI_SZ -- An seq'
	DB	'uence of null-terminated strings, terminated by', 0aH, '     '
	DB	'             two null characters.  Note that Python handles t'
	DB	'his', 0aH, '                  termination automatically.', 0aH
	DB	'  REG_NONE -- No defined value type.', 0aH, '  REG_RESOURCE_L'
	DB	'IST -- A device-driver resource list.', 0aH, '  REG_SZ -- A n'
	DB	'ull-terminated string.', 0aH, 'value is a string that specifi'
	DB	'es the new value.', 0aH, 0aH, 'This method can also set addit'
	DB	'ional value and type information for the', 0aH, 'specified ke'
	DB	'y.  The key identified by the key parameter must have been', 0aH
	DB	'opened with KEY_SET_VALUE access.', 0aH, 0aH, 'To open the ke'
	DB	'y, use the CreateKeyEx() or OpenKeyEx() methods.', 0aH, 0aH, 'V'
	DB	'alue lengths are limited by available memory. Long values (mo'
	DB	're than', 0aH, '2048 bytes) should be stored as files with th'
	DB	'e filenames stored in ', 0aH, 'the configuration registry.  T'
	DB	'his helps the registry perform efficiently.', 00H
	ORG $+8
DisableReflectionKey_doc DB 'Disables registry reflection for 32-bit proc'
	DB	'esses running on a 64-bit', 0aH, 'Operating System.  Will gen'
	DB	'erally raise NotImplemented if executed on', 0aH, 'a 32-bit O'
	DB	'perating System.', 0aH, 0aH, 'If the key is not on the reflec'
	DB	'tion list, the function succeeds but has no effect.', 0aH, 'D'
	DB	'isabling reflection for a key does not affect reflection of a'
	DB	'ny subkeys.', 00H
	ORG $+11
EnableReflectionKey_doc DB 'Restores registry reflection for the specifie'
	DB	'd disabled key.', 0aH, 'Will generally raise NotImplemented i'
	DB	'f executed on a 32-bit Operating System.', 0aH, 'Restoring re'
	DB	'flection for a key does not affect reflection of any subkeys.'
	DB	00H
	ORG $+11
QueryReflectionKey_doc DB 'QueryReflectionKey(hkey) -> bool', 0aH, 'Deter'
	DB	'mines the reflection state for the specified key.', 0aH, 'Wil'
	DB	'l generally raise NotImplemented if executed on a 32-bit Oper'
	DB	'ating System.', 0aH, 00H
	ORG $+9
PyHKEY_doc DB	'PyHKEY Object - A Python object, representing a win32 re'
	DB	'gistry key.', 0aH, 0aH, 'This object wraps a Windows HKEY obj'
	DB	'ect, automatically closing it when', 0aH, 'the object is dest'
	DB	'royed.  To guarantee cleanup, you can call either', 0aH, 'the'
	DB	' Close() method on the PyHKEY, or the CloseKey() method.', 0aH
	DB	0aH, 'All functions which accept a handle object also accept a'
	DB	'n integer - ', 0aH, 'however, use of the handle object is enc'
	DB	'ouraged.', 0aH, 0aH, 'Functions:', 0aH, 'Close() - Closes the'
	DB	' underlying handle.', 0aH, 'Detach() - Returns the integer Wi'
	DB	'n32 handle, detaching it from the object', 0aH, 0aH, 'Propert'
	DB	'ies:', 0aH, 'handle - The integer Win32 handle.', 0aH, 0aH, 'O'
	DB	'perations:', 0aH, '__bool__ - Handles with an open object ret'
	DB	'urn true, otherwise false.', 0aH, '__int__ - Converting a han'
	DB	'dle to an integer returns the Win32 handle.', 0aH, 'rich comp'
	DB	'arison - Handle objects are compared using the handle value.', 00H
	ORG $+1
PyHKEY_Close_doc DB 'key.Close()', 0aH, 'Closes the underlying Windows ha'
	DB	'ndle.', 0aH, 0aH, 'If the handle is already closed, no error '
	DB	'is raised.', 00H
	ORG $+8
PyHKEY_Detach_doc DB 'key.Detach() -> int', 0aH, 'Detaches the Windows ha'
	DB	'ndle from the handle object.', 0aH, 0aH, 'The result is the v'
	DB	'alue of the handle before it is detached.  If the', 0aH, 'han'
	DB	'dle is already detached, this will return zero.', 0aH, 0aH, 'A'
	DB	'fter calling this function, the handle is effectively invalid'
	DB	'ated,', 0aH, 'but the handle is not closed.  You would call t'
	DB	'his function when you', 0aH, 'need the underlying win32 handl'
	DB	'e to exist beyond the lifetime of the', 0aH, 'handle object.', 00H
	ORG $+1
PyHKEY_NumberMethods DQ FLAT:PyHKEY_binaryFailureFunc
	DQ	FLAT:PyHKEY_binaryFailureFunc
	DQ	FLAT:PyHKEY_binaryFailureFunc
	DQ	FLAT:PyHKEY_binaryFailureFunc
	DQ	FLAT:PyHKEY_binaryFailureFunc
	DQ	FLAT:PyHKEY_ternaryFailureFunc
	DQ	FLAT:PyHKEY_unaryFailureFunc
	DQ	FLAT:PyHKEY_unaryFailureFunc
	DQ	FLAT:PyHKEY_unaryFailureFunc
	DQ	FLAT:PyHKEY_boolFunc
	DQ	FLAT:PyHKEY_unaryFailureFunc
	DQ	FLAT:PyHKEY_binaryFailureFunc
	DQ	FLAT:PyHKEY_binaryFailureFunc
	DQ	FLAT:PyHKEY_binaryFailureFunc
	DQ	FLAT:PyHKEY_binaryFailureFunc
	DQ	FLAT:PyHKEY_binaryFailureFunc
	DQ	FLAT:PyHKEY_intFunc
	DQ	0000000000000000H
	DQ	FLAT:PyHKEY_unaryFailureFunc
	ORG $+120
PyHKEY_methods DQ FLAT:??_C@_05LGELBCGM@Close?$AA@
	DQ	FLAT:PyHKEY_CloseMethod
	DD	01H
	ORG $+4
	DQ	FLAT:PyHKEY_Close_doc
	DQ	FLAT:??_C@_06OCJDKNLN@Detach?$AA@
	DQ	FLAT:PyHKEY_DetachMethod
	DD	01H
	ORG $+4
	DQ	FLAT:PyHKEY_Detach_doc
	DQ	FLAT:??_C@_09OAJHKKGH@__enter__?$AA@
	DQ	FLAT:PyHKEY_Enter
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:??_C@_08CMFIGCJD@__exit__?$AA@
	DQ	FLAT:PyHKEY_Exit
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+24
PyHKEY_memberlist DQ FLAT:??_C@_06NCGDPKCC@handle?$AA@
	DD	01H
	ORG $+4
	DQ	0000000000000070H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
PyHKEY_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_06FENFPALN@PyHKEY?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:PyHKEY_deallocFunc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyHKEY_NumberMethods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyHKEY_hashFunc
	DQ	0000000000000000H
	DQ	FLAT:PyHKEY_strFunc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:PyHKEY_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyHKEY_methods
	DQ	FLAT:PyHKEY_memberlist
	ORG $+144
winreg_methods DQ FLAT:??_C@_08CEMDMOHB@CloseKey?$AA@
	DQ	FLAT:PyCloseKey
	DD	01H
	ORG $+4
	DQ	FLAT:CloseKey_doc
	DQ	FLAT:??_C@_0BA@GBJAIKNL@ConnectRegistry?$AA@
	DQ	FLAT:PyConnectRegistry
	DD	01H
	ORG $+4
	DQ	FLAT:ConnectRegistry_doc
	DQ	FLAT:??_C@_09DPPCIKFF@CreateKey?$AA@
	DQ	FLAT:PyCreateKey
	DD	01H
	ORG $+4
	DQ	FLAT:CreateKey_doc
	DQ	FLAT:??_C@_0M@FLBGEAAI@CreateKeyEx?$AA@
	DQ	FLAT:PyCreateKeyEx
	DD	03H
	ORG $+4
	DQ	FLAT:CreateKeyEx_doc
	DQ	FLAT:??_C@_09POIPIBKM@DeleteKey?$AA@
	DQ	FLAT:PyDeleteKey
	DD	01H
	ORG $+4
	DQ	FLAT:DeleteKey_doc
	DQ	FLAT:??_C@_0M@JLKACAJ@DeleteKeyEx?$AA@
	DQ	FLAT:PyDeleteKeyEx
	DD	03H
	ORG $+4
	DQ	FLAT:DeleteKeyEx_doc
	DQ	FLAT:??_C@_0M@PPLCJLKN@DeleteValue?$AA@
	DQ	FLAT:PyDeleteValue
	DD	01H
	ORG $+4
	DQ	FLAT:DeleteValue_doc
	DQ	FLAT:??_C@_0BF@BLABHKJP@DisableReflectionKey?$AA@
	DQ	FLAT:PyDisableReflectionKey
	DD	01H
	ORG $+4
	DQ	FLAT:DisableReflectionKey_doc
	DQ	FLAT:??_C@_0BE@FOGLKLAG@EnableReflectionKey?$AA@
	DQ	FLAT:PyEnableReflectionKey
	DD	01H
	ORG $+4
	DQ	FLAT:EnableReflectionKey_doc
	DQ	FLAT:??_C@_07OGJAOAGB@EnumKey?$AA@
	DQ	FLAT:PyEnumKey
	DD	01H
	ORG $+4
	DQ	FLAT:EnumKey_doc
	DQ	FLAT:??_C@_09LLFDHLHP@EnumValue?$AA@
	DQ	FLAT:PyEnumValue
	DD	01H
	ORG $+4
	DQ	FLAT:EnumValue_doc
	DQ	FLAT:??_C@_0BJ@FIJODGGF@ExpandEnvironmentStrings?$AA@
	DQ	FLAT:PyExpandEnvironmentStrings
	DD	01H
	ORG $+4
	DQ	FLAT:ExpandEnvironmentStrings_doc
	DQ	FLAT:??_C@_08FFGKIMAP@FlushKey?$AA@
	DQ	FLAT:PyFlushKey
	DD	01H
	ORG $+4
	DQ	FLAT:FlushKey_doc
	DQ	FLAT:??_C@_07MKPPNCAC@LoadKey?$AA@
	DQ	FLAT:PyLoadKey
	DD	01H
	ORG $+4
	DQ	FLAT:LoadKey_doc
	DQ	FLAT:??_C@_07EMHGDHB@OpenKey?$AA@
	DQ	FLAT:PyOpenKey
	DD	03H
	ORG $+4
	DQ	FLAT:OpenKey_doc
	DQ	FLAT:??_C@_09HDCIMAEH@OpenKeyEx?$AA@
	DQ	FLAT:PyOpenKey
	DD	03H
	ORG $+4
	DQ	FLAT:OpenKeyEx_doc
	DQ	FLAT:??_C@_0L@PJJMANCA@QueryValue?$AA@
	DQ	FLAT:PyQueryValue
	DD	01H
	ORG $+4
	DQ	FLAT:QueryValue_doc
	DQ	FLAT:??_C@_0N@HKICBNFG@QueryValueEx?$AA@
	DQ	FLAT:PyQueryValueEx
	DD	01H
	ORG $+4
	DQ	FLAT:QueryValueEx_doc
	DQ	FLAT:??_C@_0N@MDCBENNB@QueryInfoKey?$AA@
	DQ	FLAT:PyQueryInfoKey
	DD	01H
	ORG $+4
	DQ	FLAT:QueryInfoKey_doc
	DQ	FLAT:??_C@_0BD@CBDGFLPG@QueryReflectionKey?$AA@
	DQ	FLAT:PyQueryReflectionKey
	DD	01H
	ORG $+4
	DQ	FLAT:QueryReflectionKey_doc
	DQ	FLAT:??_C@_07BMOIJBEL@SaveKey?$AA@
	DQ	FLAT:PySaveKey
	DD	01H
	ORG $+4
	DQ	FLAT:SaveKey_doc
	DQ	FLAT:??_C@_08JHMAAEPA@SetValue?$AA@
	DQ	FLAT:PySetValue
	DD	01H
	ORG $+4
	DQ	FLAT:SetValue_doc
	DQ	FLAT:??_C@_0L@ICGGAOLB@SetValueEx?$AA@
	DQ	FLAT:PySetValueEx
	DD	01H
	ORG $+4
	DQ	FLAT:SetValueEx_doc
	DQ	0000000000000000H
	ORG $+24
winregmodule DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_06OHDDMFCG@winreg?$AA@
	DQ	FLAT:module_doc
	DQ	ffffffffffffffffH
	DQ	FLAT:winreg_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\include\objimpl.h
_TEXT	ENDS
;	COMDAT _PyObject_InitHead
_TEXT	SEGMENT
op$ = 8
_PyObject_InitHead PROC					; COMDAT

; 216  :     assert(Py_TYPE(op));
; 217  :     op->is_px = _Py_NOT_PARALLEL;

  00000	48 ba 78 56 ef
	be 34 12 ad de	 mov	 rdx, -2401243008567650696 ; dead1234beef5678H

; 218  :     op->px    = _Py_NOT_PARALLEL;
; 219  :     op->slist_entry.Next = NULL;

  0000a	33 c0		 xor	 eax, eax

; 220  :     op->px_flags  = Py_PXFLAGS_ISPY;

  0000c	48 c7 41 20 01
	00 00 00	 mov	 QWORD PTR [rcx+32], 1
  00014	48 89 11	 mov	 QWORD PTR [rcx], rdx
  00017	48 89 51 08	 mov	 QWORD PTR [rcx+8], rdx
  0001b	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 221  :     op->srw_lock  = NULL;

  0001f	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 222  :     op->event     = NULL;

  00023	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 223  :     op->orig_type = NULL;

  00027	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 224  : #ifdef Py_TRACE_REFS
; 225  :     op->_ob_next = NULL;
; 226  :     op->_ob_prev = NULL;
; 227  : #else
; 228  :     op->_ob_next = _Py_NOT_PARALLEL;

  0002b	48 89 51 40	 mov	 QWORD PTR [rcx+64], rdx

; 229  :     op->_ob_prev = _Py_NOT_PARALLEL;

  0002f	48 89 51 48	 mov	 QWORD PTR [rcx+72], rdx

; 230  : #endif
; 231  : }

  00033	c3		 ret	 0
_PyObject_InitHead ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@JKHPLOII@PyObject_INIT?$AA@		; `string'
PUBLIC	??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@ ; `string'
EXTRN	_Px_NewReference:PROC
EXTRN	_PxObject_Init:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_INIT DD imagerel PyObject_INIT
	DD	imagerel PyObject_INIT+185
	DD	imagerel $unwind$PyObject_INIT
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_INIT DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0O@JKHPLOII@PyObject_INIT?$AA@
CONST	SEGMENT
??_C@_0O@JKHPLOII@PyObject_INIT?$AA@ DB 'PyObject_INIT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@
CONST	SEGMENT
??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@ DB 'c:\src\pypa'
	DB	'rallel\include\objimpl.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyObject_INIT
_TEXT	SEGMENT
op$ = 64
tp$ = 72
PyObject_INIT PROC					; COMDAT

; 236  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fa	 mov	 rdi, rdx
  0000d	48 8b d9	 mov	 rbx, rcx

; 237  :     Px_RETURN(_PxObject_Init(op, tp))

  00010	e8 00 00 00 00	 call	 _Py_PXCTX
  00015	85 c0		 test	 eax, eax
  00017	74 15		 je	 SHORT $LN1@PyObject_I
  00019	48 8b d7	 mov	 rdx, rdi
  0001c	48 8b cb	 mov	 rcx, rbx

; 242  : }

  0001f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00024	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00028	5f		 pop	 rdi
  00029	e9 00 00 00 00	 jmp	 _PxObject_Init
$LN1@PyObject_I:

; 238  :     Py_TYPE(op) = tp;
; 239  :     _PyObject_InitHead(op);

  0002e	48 b9 78 56 ef
	be 34 12 ad de	 mov	 rcx, -2401243008567650696 ; dead1234beef5678H
  00038	33 c0		 xor	 eax, eax

; 240  :     _Py_NewReference(op);

  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@
  00041	48 89 0b	 mov	 QWORD PTR [rbx], rcx
  00044	48 89 4b 08	 mov	 QWORD PTR [rbx+8], rcx
  00048	48 89 4b 40	 mov	 QWORD PTR [rbx+64], rcx
  0004c	48 89 4b 48	 mov	 QWORD PTR [rbx+72], rcx
  00050	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@JKHPLOII@PyObject_INIT?$AA@
  00057	4c 8b cb	 mov	 r9, rbx
  0005a	41 b8 f0 00 00
	00		 mov	 r8d, 240		; 000000f0H
  00060	48 89 7b 58	 mov	 QWORD PTR [rbx+88], rdi
  00064	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax
  00068	48 c7 43 20 01
	00 00 00	 mov	 QWORD PTR [rbx+32], 1
  00070	48 89 43 28	 mov	 QWORD PTR [rbx+40], rax
  00074	48 89 43 30	 mov	 QWORD PTR [rbx+48], rax
  00078	48 89 43 38	 mov	 QWORD PTR [rbx+56], rax
  0007c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00084	e8 00 00 00 00	 call	 _PyParallel_Guard
  00089	85 c0		 test	 eax, eax
  0008b	74 16		 je	 SHORT $LN4@PyObject_I
  0008d	48 8b cb	 mov	 rcx, rbx
  00090	e8 00 00 00 00	 call	 _Px_NewReference

; 241  :     return op;

  00095	48 8b c3	 mov	 rax, rbx

; 242  : }

  00098	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0009d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a1	5f		 pop	 rdi
  000a2	c3		 ret	 0
$LN4@PyObject_I:

; 240  :     _Py_NewReference(op);

  000a3	48 c7 43 50 01
	00 00 00	 mov	 QWORD PTR [rbx+80], 1

; 241  :     return op;

  000ab	48 8b c3	 mov	 rax, rbx

; 242  : }

  000ae	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000b3	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b7	5f		 pop	 rdi
  000b8	c3		 ret	 0
PyObject_INIT ENDP
_TEXT	ENDS
EXTRN	PyObject_Init:PROC
EXTRN	PyObject_Malloc:PROC
EXTRN	_PxObject_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_NEW DD imagerel _PyObject_NEW
	DD	imagerel _PyObject_NEW+56
	DD	imagerel $unwind$_PyObject_NEW
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_NEW DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyObject_NEW
_TEXT	SEGMENT
tp$ = 48
_PyObject_NEW PROC					; COMDAT

; 293  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 294  :     Px_RETURN(_PxObject_New(tp))

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 0d		 je	 SHORT $LN1@PyObject_N
  00012	48 8b cb	 mov	 rcx, rbx

; 296  : }

  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5b		 pop	 rbx
  0001a	e9 00 00 00 00	 jmp	 _PxObject_New
$LN1@PyObject_N:

; 295  :     return PyObject_Init((PyObject *)PyObject_MALLOC(_PyObject_SIZE(tp)), tp);

  0001f	48 8b 4b 78	 mov	 rcx, QWORD PTR [rbx+120]
  00023	e8 00 00 00 00	 call	 PyObject_Malloc
  00028	48 8b d3	 mov	 rdx, rbx
  0002b	48 8b c8	 mov	 rcx, rax

; 296  : }

  0002e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00032	5b		 pop	 rbx
  00033	e9 00 00 00 00	 jmp	 PyObject_Init
_PyObject_NEW ENDP
_TEXT	ENDS
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_TypeError:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\pc\winreg.c
pdata	SEGMENT
$pdata$PyHKEY_unaryFailureFunc DD imagerel PyHKEY_unaryFailureFunc
	DD	imagerel PyHKEY_unaryFailureFunc+30
	DD	imagerel $unwind$PyHKEY_unaryFailureFunc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyHKEY_unaryFailureFunc DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyHKEY_unaryFailureFunc
_TEXT	SEGMENT
ob$ = 48
PyHKEY_unaryFailureFunc PROC				; COMDAT

; 427  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 428  :     PyErr_SetString(PyExc_TypeError, failMsg);

  00004	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR failMsg
  0000b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00012	e8 00 00 00 00	 call	 PyErr_SetString

; 429  :     return NULL;

  00017	33 c0		 xor	 eax, eax

; 430  : }

  00019	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001d	c3		 ret	 0
PyHKEY_unaryFailureFunc ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyHKEY_binaryFailureFunc DD imagerel PyHKEY_binaryFailureFunc
	DD	imagerel PyHKEY_binaryFailureFunc+30
	DD	imagerel $unwind$PyHKEY_binaryFailureFunc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyHKEY_binaryFailureFunc DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyHKEY_binaryFailureFunc
_TEXT	SEGMENT
ob1$ = 48
ob2$ = 56
PyHKEY_binaryFailureFunc PROC				; COMDAT

; 433  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 434  :     PyErr_SetString(PyExc_TypeError, failMsg);

  00004	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR failMsg
  0000b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00012	e8 00 00 00 00	 call	 PyErr_SetString

; 435  :     return NULL;

  00017	33 c0		 xor	 eax, eax

; 436  : }

  00019	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001d	c3		 ret	 0
PyHKEY_binaryFailureFunc ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyHKEY_ternaryFailureFunc DD imagerel PyHKEY_ternaryFailureFunc
	DD	imagerel PyHKEY_ternaryFailureFunc+30
	DD	imagerel $unwind$PyHKEY_ternaryFailureFunc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyHKEY_ternaryFailureFunc DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyHKEY_ternaryFailureFunc
_TEXT	SEGMENT
ob1$ = 48
ob2$ = 56
ob3$ = 64
PyHKEY_ternaryFailureFunc PROC				; COMDAT

; 439  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 440  :     PyErr_SetString(PyExc_TypeError, failMsg);

  00004	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR failMsg
  0000b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00012	e8 00 00 00 00	 call	 PyErr_SetString

; 441  :     return NULL;

  00017	33 c0		 xor	 eax, eax

; 442  : }

  00019	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001d	c3		 ret	 0
PyHKEY_ternaryFailureFunc ENDP
_TEXT	ENDS
EXTRN	PyObject_Free:PROC
EXTRN	__imp_RegCloseKey:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyHKEY_deallocFunc DD imagerel PyHKEY_deallocFunc
	DD	imagerel PyHKEY_deallocFunc+37
	DD	imagerel $unwind$PyHKEY_deallocFunc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyHKEY_deallocFunc DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyHKEY_deallocFunc
_TEXT	SEGMENT
ob$ = 48
PyHKEY_deallocFunc PROC					; COMDAT

; 446  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 447  :     /* Can not call PyHKEY_Close, as the ob->tp_type
; 448  :        has already been cleared, thus causing the type
; 449  :        check to fail!
; 450  :     */
; 451  :     PyHKEYObject *obkey = (PyHKEYObject *)ob;
; 452  :     if (obkey->hkey)

  00009	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  0000d	48 85 c9	 test	 rcx, rcx
  00010	74 06		 je	 SHORT $LN1@PyHKEY_dea

; 453  :         RegCloseKey((HKEY)obkey->hkey);

  00012	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegCloseKey
$LN1@PyHKEY_dea:

; 454  :     PyObject_DEL(ob);

  00018	48 8b cb	 mov	 rcx, rbx

; 455  : }

  0001b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001f	5b		 pop	 rbx
  00020	e9 00 00 00 00	 jmp	 PyObject_Free
PyHKEY_deallocFunc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT PyHKEY_boolFunc
_TEXT	SEGMENT
ob$ = 8
PyHKEY_boolFunc PROC					; COMDAT

; 460  :     return ((PyHKEYObject *)ob)->hkey != 0;

  00000	33 c0		 xor	 eax, eax
  00002	48 39 41 70	 cmp	 QWORD PTR [rcx+112], rax
  00006	0f 95 c0	 setne	 al

; 461  : }

  00009	c3		 ret	 0
PyHKEY_boolFunc ENDP
_TEXT	ENDS
EXTRN	PyLong_FromVoidPtr:PROC
; Function compile flags: /Ogtpy
;	COMDAT PyHKEY_intFunc
_TEXT	SEGMENT
ob$ = 8
PyHKEY_intFunc PROC					; COMDAT

; 466  :     PyHKEYObject *pyhkey = (PyHKEYObject *)ob;
; 467  :     return PyLong_FromVoidPtr(pyhkey->hkey);

  00000	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]

; 468  : }

  00004	e9 00 00 00 00	 jmp	 PyLong_FromVoidPtr
PyHKEY_intFunc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@KCKNMBCA@?$DMPyHKEY?3?$CFp?$DO?$AA@	; `string'
EXTRN	PyUnicode_FromFormat:PROC
;	COMDAT ??_C@_0M@KCKNMBCA@?$DMPyHKEY?3?$CFp?$DO?$AA@
CONST	SEGMENT
??_C@_0M@KCKNMBCA@?$DMPyHKEY?3?$CFp?$DO?$AA@ DB '<PyHKEY:%p>', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyHKEY_strFunc
_TEXT	SEGMENT
ob$ = 8
PyHKEY_strFunc PROC					; COMDAT

; 473  :     PyHKEYObject *pyhkey = (PyHKEYObject *)ob;
; 474  :     return PyUnicode_FromFormat("<PyHKEY:%p>", pyhkey->hkey);

  00000	48 8b 51 70	 mov	 rdx, QWORD PTR [rcx+112]
  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@KCKNMBCA@?$DMPyHKEY?3?$CFp?$DO?$AA@

; 475  : }

  0000b	e9 00 00 00 00	 jmp	 PyUnicode_FromFormat
PyHKEY_strFunc ENDP
_TEXT	ENDS
EXTRN	_Py_HashPointer:PROC
; Function compile flags: /Ogtpy
;	COMDAT PyHKEY_hashFunc
_TEXT	SEGMENT
ob$ = 8
PyHKEY_hashFunc PROC					; COMDAT

; 489  :     /* Just use the address.
; 490  :        XXX - should we use the handle value?
; 491  :     */
; 492  :     return _Py_HashPointer(ob);
; 493  : }

  00000	e9 00 00 00 00	 jmp	 _Py_HashPointer
PyHKEY_hashFunc ENDP
_TEXT	ENDS
PUBLIC	??_C@_07ONAOCBP@?3Detach?$AA@			; `string'
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyHKEY_DetachMethod DD imagerel PyHKEY_DetachMethod
	DD	imagerel PyHKEY_DetachMethod+61
	DD	imagerel $unwind$PyHKEY_DetachMethod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyHKEY_DetachMethod DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_07ONAOCBP@?3Detach?$AA@
CONST	SEGMENT
??_C@_07ONAOCBP@?3Detach?$AA@ DB ':Detach', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyHKEY_DetachMethod
_TEXT	SEGMENT
self$ = 48
args$ = 56
PyHKEY_DetachMethod PROC				; COMDAT

; 590  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b c2	 mov	 rax, rdx
  00009	48 8b d9	 mov	 rbx, rcx

; 591  :     void* ret;
; 592  :     PyHKEYObject *pThis = (PyHKEYObject *)self;
; 593  :     if (!PyArg_ParseTuple(args, ":Detach"))

  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07ONAOCBP@?3Detach?$AA@
  00013	48 8b c8	 mov	 rcx, rax
  00016	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0001b	85 c0		 test	 eax, eax
  0001d	75 08		 jne	 SHORT $LN1@PyHKEY_Det

; 594  :         return NULL;

  0001f	33 c0		 xor	 eax, eax

; 597  :     return PyLong_FromVoidPtr(ret);
; 598  : }

  00021	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00025	5b		 pop	 rbx
  00026	c3		 ret	 0
$LN1@PyHKEY_Det:

; 595  :     ret = (void*)pThis->hkey;

  00027	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]

; 596  :     pThis->hkey = 0;

  0002b	48 c7 43 70 00
	00 00 00	 mov	 QWORD PTR [rbx+112], 0

; 597  :     return PyLong_FromVoidPtr(ret);
; 598  : }

  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5b		 pop	 rbx
  00038	e9 00 00 00 00	 jmp	 PyLong_FromVoidPtr
PyHKEY_DetachMethod ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyHKEY_Enter DD imagerel PyHKEY_Enter
	DD	imagerel PyHKEY_Enter+82
	DD	imagerel $unwind$PyHKEY_Enter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyHKEY_Enter DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\pc\winreg.c
xdata	ENDS
;	COMDAT PyHKEY_Enter
_TEXT	SEGMENT
self$ = 64
PyHKEY_Enter PROC					; COMDAT

; 602  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 603  :     Py_XINCREF(self);

  00009	48 85 c9	 test	 rcx, rcx
  0000c	74 3b		 je	 SHORT $LN13@PyHKEY_Ent
  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	75 32		 jne	 SHORT $LN13@PyHKEY_Ent
  00017	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00025	4c 8b cb	 mov	 r9, rbx
  00028	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0002e	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00036	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003b	85 c0		 test	 eax, eax
  0003d	75 06		 jne	 SHORT $LN7@PyHKEY_Ent
  0003f	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00043	74 04		 je	 SHORT $LN13@PyHKEY_Ent
$LN7@PyHKEY_Ent:
  00045	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN13@PyHKEY_Ent:

; 604  :     return self;

  00049	48 8b c3	 mov	 rax, rbx

; 605  : }

  0004c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00050	5b		 pop	 rbx
  00051	c3		 ret	 0
PyHKEY_Enter ENDP
_TEXT	ENDS
PUBLIC	PyHKEY_New
;	COMDAT pdata
; File c:\src\pyparallel\include\objimpl.h
pdata	SEGMENT
$pdata$PyHKEY_New DD imagerel $LN8
	DD	imagerel $LN8+74
	DD	imagerel $unwind$PyHKEY_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyHKEY_New DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\pc\winreg.c
xdata	ENDS
;	COMDAT PyHKEY_New
_TEXT	SEGMENT
hInit$ = 48
PyHKEY_New PROC						; COMDAT

; 621  : {

$LN8:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 622  :     PyHKEYObject *key = PyObject_NEW(PyHKEYObject, &PyHKEY_Type);

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 0e		 je	 SHORT $LN4@PyHKEY_New
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyHKEY_Type
  00019	e8 00 00 00 00	 call	 _PxObject_New
  0001e	eb 1b		 jmp	 SHORT $LN5@PyHKEY_New
$LN4@PyHKEY_New:
  00020	48 8b 0d 78 00
	00 00		 mov	 rcx, QWORD PTR PyHKEY_Type+120
  00027	e8 00 00 00 00	 call	 PyObject_Malloc
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyHKEY_Type
  00033	48 8b c8	 mov	 rcx, rax
  00036	e8 00 00 00 00	 call	 PyObject_Init
$LN5@PyHKEY_New:

; 623  :     if (key)

  0003b	48 85 c0	 test	 rax, rax
  0003e	74 04		 je	 SHORT $LN7@PyHKEY_New

; 624  :         key->hkey = hInit;

  00040	48 89 58 70	 mov	 QWORD PTR [rax+112], rbx
$LN7@PyHKEY_New:

; 625  :     return (PyObject *)key;
; 626  : }

  00044	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
PyHKEY_New ENDP
_TEXT	ENDS
EXTRN	PyErr_SetFromWindowsErr:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyHKEY_Close DD imagerel PyHKEY_Close
	DD	imagerel PyHKEY_Close+120
	DD	imagerel $unwind$PyHKEY_Close
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyHKEY_Close DD 064101H
	DD	077441H
	DD	06343aH
	DD	060023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyHKEY_Close
_TEXT	SEGMENT
ob_handle$ = 48
PyHKEY_Close PROC					; COMDAT

; 630  : {

  00000	40 56		 push	 rsi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 631  :     LONG rc;
; 632  :     PyHKEYObject *key;
; 633  : 
; 634  :     if (!PyHKEY_Check(ob_handle)) {

  00006	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyHKEY_Type
  0000d	48 8b f1	 mov	 rsi, rcx
  00010	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00014	74 1b		 je	 SHORT $LN2@PyHKEY_Clo

; 635  :         PyErr_SetString(PyExc_TypeError, "bad operand type");

  00016	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@HNACHIIA@bad?5operand?5type?$AA@
  00024	e8 00 00 00 00	 call	 PyErr_SetString

; 636  :         return FALSE;

  00029	33 c0		 xor	 eax, eax

; 644  : }

  0002b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002f	5e		 pop	 rsi
  00030	c3		 ret	 0
$LN2@PyHKEY_Clo:

; 637  :     }
; 638  :     key = (PyHKEYObject *)ob_handle;
; 639  :     rc = key->hkey ? RegCloseKey((HKEY)key->hkey) : ERROR_SUCCESS;

  00031	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00035	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0003a	33 db		 xor	 ebx, ebx
  0003c	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 0a		 je	 SHORT $LN5@PyHKEY_Clo
  00046	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegCloseKey
  0004c	8b f8		 mov	 edi, eax
  0004e	eb 02		 jmp	 SHORT $LN6@PyHKEY_Clo
$LN5@PyHKEY_Clo:
  00050	8b fb		 mov	 edi, ebx
$LN6@PyHKEY_Clo:

; 640  :     key->hkey = 0;

  00052	48 89 5e 70	 mov	 QWORD PTR [rsi+112], rbx

; 641  :     if (rc != ERROR_SUCCESS)

  00056	85 ff		 test	 edi, edi
  00058	74 09		 je	 SHORT $LN7@PyHKEY_Clo

; 642  :         PyErr_SetFromWindowsErrWithFunction(rc, "RegCloseKey");

  0005a	8b cf		 mov	 ecx, edi
  0005c	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 643  :     return rc == ERROR_SUCCESS;

  00061	85 ff		 test	 edi, edi
$LN7@PyHKEY_Clo:
  00063	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]
  00068	0f 94 c3	 sete	 bl
  0006b	8b c3		 mov	 eax, ebx
  0006d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 644  : }

  00072	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00076	5e		 pop	 rsi
  00077	c3		 ret	 0
PyHKEY_Close ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@GPIIECHJ@The?5object?5is?5not?5a?5PyHKEY?5objec@ ; `string'
PUBLIC	??_C@_0CJ@JPBLOMCN@None?5is?5not?5a?5valid?5HKEY?5in?5this@ ; `string'
EXTRN	PyErr_Occurred:PROC
EXTRN	PyLong_AsVoidPtr:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyHKEY_AsHKEY DD imagerel PyHKEY_AsHKEY
	DD	imagerel PyHKEY_AsHKEY+190
	DD	imagerel $unwind$PyHKEY_AsHKEY
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyHKEY_AsHKEY DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CC@GPIIECHJ@The?5object?5is?5not?5a?5PyHKEY?5objec@
CONST	SEGMENT
??_C@_0CC@GPIIECHJ@The?5object?5is?5not?5a?5PyHKEY?5objec@ DB 'The object'
	DB	' is not a PyHKEY object', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@JPBLOMCN@None?5is?5not?5a?5valid?5HKEY?5in?5this@
CONST	SEGMENT
??_C@_0CJ@JPBLOMCN@None?5is?5not?5a?5valid?5HKEY?5in?5this@ DB 'None is n'
	DB	'ot a valid HKEY in this context', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyHKEY_AsHKEY
_TEXT	SEGMENT
ob$ = 48
pHANDLE$ = 56
bNoneOK$ = 64
PyHKEY_AsHKEY PROC					; COMDAT

; 648  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 649  :     if (ob == Py_None) {

  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00011	48 8b da	 mov	 rbx, rdx
  00014	48 8b f9	 mov	 rdi, rcx
  00017	48 3b c8	 cmp	 rcx, rax
  0001a	75 25		 jne	 SHORT $LN8@PyHKEY_AsH

; 650  :         if (!bNoneOK) {

  0001c	45 85 c0	 test	 r8d, r8d
  0001f	75 09		 jne	 SHORT $LN7@PyHKEY_AsH

; 651  :             PyErr_SetString(
; 652  :                       PyExc_TypeError,
; 653  :                       "None is not a valid HKEY in this context");

  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@JPBLOMCN@None?5is?5not?5a?5valid?5HKEY?5in?5this@

; 654  :             return FALSE;

  00028	eb 7b		 jmp	 SHORT $LN11@PyHKEY_AsH
$LN7@PyHKEY_AsH:

; 655  :         }
; 656  :         *pHANDLE = (HKEY)0;

  0002a	48 c7 02 00 00
	00 00		 mov	 QWORD PTR [rdx], 0

; 674  :     }
; 675  :     return TRUE;

  00031	b8 01 00 00 00	 mov	 eax, 1

; 676  : }

  00036	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003f	5f		 pop	 rdi
  00040	c3		 ret	 0
$LN8@PyHKEY_AsH:

; 657  :     }
; 658  :     else if (PyHKEY_Check(ob)) {

  00041	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyHKEY_Type
  0004c	48 3b c1	 cmp	 rax, rcx
  0004f	75 17		 jne	 SHORT $LN5@PyHKEY_AsH

; 659  :         PyHKEYObject *pH = (PyHKEYObject *)ob;
; 660  :         *pHANDLE = pH->hkey;

  00051	48 8b 47 70	 mov	 rax, QWORD PTR [rdi+112]
  00055	48 89 02	 mov	 QWORD PTR [rdx], rax

; 674  :     }
; 675  :     return TRUE;

  00058	b8 01 00 00 00	 mov	 eax, 1

; 676  : }

  0005d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00062	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00066	5f		 pop	 rdi
  00067	c3		 ret	 0
$LN5@PyHKEY_AsH:

; 661  :     }
; 662  :     else if (PyLong_Check(ob)) {

  00068	f7 80 00 01 00
	00 00 00 00 01	 test	 DWORD PTR [rax+256], 16777216 ; 01000000H
  00072	74 2a		 je	 SHORT $LN3@PyHKEY_AsH

; 663  :         /* We also support integers */
; 664  :         PyErr_Clear();

  00074	e8 00 00 00 00	 call	 PyErr_Clear

; 665  :         *pHANDLE = (HKEY)PyLong_AsVoidPtr(ob);

  00079	48 8b cf	 mov	 rcx, rdi
  0007c	e8 00 00 00 00	 call	 PyLong_AsVoidPtr
  00081	48 89 03	 mov	 QWORD PTR [rbx], rax

; 666  :         if (PyErr_Occurred())

  00084	e8 00 00 00 00	 call	 PyErr_Occurred
  00089	48 85 c0	 test	 rax, rax

; 667  :             return FALSE;

  0008c	75 23		 jne	 SHORT $LN12@PyHKEY_AsH

; 674  :     }
; 675  :     return TRUE;

  0008e	b8 01 00 00 00	 mov	 eax, 1

; 676  : }

  00093	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00098	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009c	5f		 pop	 rdi
  0009d	c3		 ret	 0
$LN3@PyHKEY_AsH:

; 668  :     }
; 669  :     else {
; 670  :         PyErr_SetString(
; 671  :                         PyExc_TypeError,
; 672  :             "The object is not a PyHKEY object");

  0009e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@GPIIECHJ@The?5object?5is?5not?5a?5PyHKEY?5objec@
$LN11@PyHKEY_AsH:
  000a5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000ac	e8 00 00 00 00	 call	 PyErr_SetString
$LN12@PyHKEY_AsH:

; 673  :         return FALSE;

  000b1	33 c0		 xor	 eax, eax

; 676  : }

  000b3	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000b8	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000bc	5f		 pop	 rdi
  000bd	c3		 ret	 0
PyHKEY_AsHKEY ENDP
_TEXT	ENDS
EXTRN	PyErr_NoMemory:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyHKEY_FromHKEY DD imagerel PyHKEY_FromHKEY
	DD	imagerel PyHKEY_FromHKEY+79
	DD	imagerel $unwind$PyHKEY_FromHKEY
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyHKEY_FromHKEY DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyHKEY_FromHKEY
_TEXT	SEGMENT
h$ = 48
PyHKEY_FromHKEY PROC					; COMDAT

; 680  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f9	 mov	 rdi, rcx

; 681  :     PyHKEYObject *op;
; 682  : 
; 683  :     /* Inline PyObject_New */
; 684  :     op = (PyHKEYObject *) PyObject_MALLOC(sizeof(PyHKEYObject));

  0000d	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  00012	e8 00 00 00 00	 call	 PyObject_Malloc
  00017	48 8b d8	 mov	 rbx, rax

; 685  :     if (op == NULL)

  0001a	48 85 c0	 test	 rax, rax
  0001d	75 0f		 jne	 SHORT $LN1@PyHKEY_Fro

; 690  : }

  0001f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00024	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00028	5f		 pop	 rdi
  00029	e9 00 00 00 00	 jmp	 PyErr_NoMemory
$LN1@PyHKEY_Fro:

; 686  :         return PyErr_NoMemory();
; 687  :     PyObject_INIT(op, &PyHKEY_Type);

  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyHKEY_Type
  00035	48 8b c8	 mov	 rcx, rax
  00038	e8 00 00 00 00	 call	 PyObject_INIT

; 688  :     op->hkey = h;

  0003d	48 89 7b 70	 mov	 QWORD PTR [rbx+112], rdi

; 689  :     return (PyObject *)op;

  00041	48 8b c3	 mov	 rax, rbx

; 690  : }

  00044	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00049	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004d	5f		 pop	 rdi
  0004e	c3		 ret	 0
PyHKEY_FromHKEY ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CN@OFKHMLAJ@A?5handle?5must?5be?5a?5HKEY?5object?5o@ ; `string'
PUBLIC	PyWinObject_CloseHKEY
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyWinObject_CloseHKEY DD imagerel $LN8
	DD	imagerel $LN8+114
	DD	imagerel $unwind$PyWinObject_CloseHKEY
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyWinObject_CloseHKEY DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0CN@OFKHMLAJ@A?5handle?5must?5be?5a?5HKEY?5object?5o@
CONST	SEGMENT
??_C@_0CN@OFKHMLAJ@A?5handle?5must?5be?5a?5HKEY?5object?5o@ DB 'A handle '
	DB	'must be a HKEY object or an integer', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyWinObject_CloseHKEY
_TEXT	SEGMENT
obHandle$ = 48
PyWinObject_CloseHKEY PROC				; COMDAT

; 698  : {

$LN8:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 699  :     BOOL ok;
; 700  :     if (PyHKEY_Check(obHandle)) {

  00006	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0000a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyHKEY_Type
  00011	48 3b c2	 cmp	 rax, rdx
  00014	75 0d		 jne	 SHORT $LN5@PyWinObjec

; 701  :         ok = PyHKEY_Close(obHandle);

  00016	e8 00 00 00 00	 call	 PyHKEY_Close
  0001b	8b d8		 mov	 ebx, eax

; 725  : }

  0001d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00021	5b		 pop	 rbx
  00022	c3		 ret	 0
$LN5@PyWinObjec:

; 702  :     }
; 703  : #if SIZEOF_LONG >= SIZEOF_HKEY
; 704  :     else if (PyLong_Check(obHandle)) {
; 705  :         long rc = RegCloseKey((HKEY)PyLong_AsLong(obHandle));
; 706  :         ok = (rc == ERROR_SUCCESS);
; 707  :         if (!ok)
; 708  :             PyErr_SetFromWindowsErrWithFunction(rc, "RegCloseKey");
; 709  :     }
; 710  : #else
; 711  :     else if (PyLong_Check(obHandle)) {

  00023	f7 80 00 01 00
	00 00 00 00 01	 test	 DWORD PTR [rax+256], 16777216 ; 01000000H
  0002d	74 28		 je	 SHORT $LN3@PyWinObjec

; 712  :         long rc = RegCloseKey((HKEY)PyLong_AsVoidPtr(obHandle));

  0002f	e8 00 00 00 00	 call	 PyLong_AsVoidPtr
  00034	48 8b c8	 mov	 rcx, rax
  00037	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegCloseKey

; 713  :         ok = (rc == ERROR_SUCCESS);

  0003d	33 db		 xor	 ebx, ebx
  0003f	85 c0		 test	 eax, eax
  00041	0f 94 c3	 sete	 bl

; 714  :         if (!ok)

  00044	85 db		 test	 ebx, ebx
  00046	75 07		 jne	 SHORT $LN2@PyWinObjec

; 715  :             PyErr_SetFromWindowsErrWithFunction(rc, "RegCloseKey");

  00048	8b c8		 mov	 ecx, eax
  0004a	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
$LN2@PyWinObjec:

; 723  :     }
; 724  :     return ok;

  0004f	8b c3		 mov	 eax, ebx

; 725  : }

  00051	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00055	5b		 pop	 rbx
  00056	c3		 ret	 0
$LN3@PyWinObjec:

; 716  :     }
; 717  : #endif
; 718  :     else {
; 719  :         PyErr_SetString(
; 720  :             PyExc_TypeError,
; 721  :             "A handle must be a HKEY object or an integer");

  00057	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0005e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@OFKHMLAJ@A?5handle?5must?5be?5a?5HKEY?5object?5o@
  00065	e8 00 00 00 00	 call	 PyErr_SetString

; 722  :         return FALSE;

  0006a	33 c0		 xor	 eax, eax

; 725  : }

  0006c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00070	5b		 pop	 rbx
  00071	c3		 ret	 0
PyWinObject_CloseHKEY ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT fixupMultiSZ
_TEXT	SEGMENT
str$ = 8
data$ = 16
len$ = 24
fixupMultiSZ PROC					; COMDAT

; 741  :     wchar_t *P;
; 742  :     int i;
; 743  :     wchar_t *Q;
; 744  : 
; 745  :     Q = data + len;

  00000	49 63 c0	 movsxd	 rax, r8d
  00003	4c 8d 04 42	 lea	 r8, QWORD PTR [rdx+rax*2]

; 746  :     for (P = data, i = 0; P < Q && *P != '\0'; P++, i++) {

  00007	49 3b d0	 cmp	 rdx, r8
  0000a	73 2b		 jae	 SHORT $LN4@fixupMulti
  0000c	0f 1f 40 00	 npad	 4
$LL6@fixupMulti:
  00010	66 83 3a 00	 cmp	 WORD PTR [rdx], 0
  00014	74 21		 je	 SHORT $LN4@fixupMulti

; 747  :         str[i] = P;

  00016	48 89 11	 mov	 QWORD PTR [rcx], rdx

; 748  :         for(; *P != '\0'; P++)

  00019	66 83 3a 00	 cmp	 WORD PTR [rdx], 0
  0001d	74 0b		 je	 SHORT $LN5@fixupMulti
  0001f	90		 npad	 1
$LL3@fixupMulti:
  00020	48 83 c2 02	 add	 rdx, 2
  00024	66 83 3a 00	 cmp	 WORD PTR [rdx], 0
  00028	75 f6		 jne	 SHORT $LL3@fixupMulti
$LN5@fixupMulti:

; 746  :     for (P = data, i = 0; P < Q && *P != '\0'; P++, i++) {

  0002a	48 83 c2 02	 add	 rdx, 2
  0002e	48 83 c1 08	 add	 rcx, 8
  00032	49 3b d0	 cmp	 rdx, r8
  00035	72 d9		 jb	 SHORT $LL6@fixupMulti
$LN4@fixupMulti:

; 749  :             ;
; 750  :     }
; 751  : }

  00037	f3 c3		 fatret	 0
fixupMultiSZ ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT countStrings
_TEXT	SEGMENT
data$ = 8
len$ = 16
countStrings PROC					; COMDAT

; 756  :     int strings;
; 757  :     wchar_t *P;
; 758  :     wchar_t *Q = data + len;

  00000	48 63 c2	 movsxd	 rax, edx
  00003	48 8d 14 41	 lea	 rdx, QWORD PTR [rcx+rax*2]

; 759  : 
; 760  :     for (P = data, strings = 0; P < Q && *P != '\0'; P++, strings++)

  00007	33 c0		 xor	 eax, eax
  00009	48 3b ca	 cmp	 rcx, rdx
  0000c	73 2c		 jae	 SHORT $LN13@countStrin
  0000e	66 90		 npad	 2
$LL6@countStrin:
  00010	66 83 39 00	 cmp	 WORD PTR [rcx], 0
  00014	74 24		 je	 SHORT $LN13@countStrin

; 761  :         for (; P < Q && *P != '\0'; P++)

  00016	48 3b ca	 cmp	 rcx, rdx
  00019	73 14		 jae	 SHORT $LN5@countStrin
  0001b	0f 1f 44 00 00	 npad	 5
$LL3@countStrin:
  00020	66 83 39 00	 cmp	 WORD PTR [rcx], 0
  00024	74 09		 je	 SHORT $LN5@countStrin
  00026	48 83 c1 02	 add	 rcx, 2
  0002a	48 3b ca	 cmp	 rcx, rdx
  0002d	72 f1		 jb	 SHORT $LL3@countStrin
$LN5@countStrin:

; 759  : 
; 760  :     for (P = data, strings = 0; P < Q && *P != '\0'; P++, strings++)

  0002f	48 83 c1 02	 add	 rcx, 2
  00033	ff c0		 inc	 eax
  00035	48 3b ca	 cmp	 rcx, rdx
  00038	72 d6		 jb	 SHORT $LL6@countStrin
$LN13@countStrin:

; 762  :             ;
; 763  :     return strings;
; 764  : }

  0003a	f3 c3		 fatret	 0
countStrings ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DP@KGDGBJCB@Objects?5of?5type?5?8?$CFs?8?5can?5not?5be?5@ ; `string'
EXTRN	PyErr_Format:PROC
EXTRN	PyBuffer_Release:PROC
EXTRN	PyObject_GetBuffer:PROC
EXTRN	PyUnicode_AsWideCharString:PROC
EXTRN	PyLong_AsUnsignedLong:PROC
EXTRN	__imp_malloc:PROC
EXTRN	_PxMem_Malloc:PROC
EXTRN	PyUnicode_AsUnicodeAndSize:PROC
EXTRN	PyList_Size:PROC
EXTRN	memcpy:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$Py2Reg DD imagerel Py2Reg
	DD	imagerel Py2Reg+965
	DD	imagerel $unwind$Py2Reg
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py2Reg DD 0c2101H
	DD	0177421H
	DD	0166421H
	DD	0155421H
	DD	0143421H
	DD	0e01af221H
	DD	0c016d018H
xdata	ENDS
;	COMDAT ??_C@_0DP@KGDGBJCB@Objects?5of?5type?5?8?$CFs?8?5can?5not?5be?5@
CONST	SEGMENT
??_C@_0DP@KGDGBJCB@Objects?5of?5type?5?8?$CFs?8?5can?5not?5be?5@ DB 'Obje'
	DB	'cts of type ''%s'' can not be used as binary registry values', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT Py2Reg
_TEXT	SEGMENT
len$120751 = 32
len$120715 = 32
len$120670 = 32
view$120758 = 48
value$ = 160
typ$ = 168
retDataBuf$ = 176
retDataSize$ = 184
Py2Reg	PROC						; COMDAT

; 770  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	41 55		 push	 r13
  00018	41 56		 push	 r14
  0001a	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  00021	4d 8b f1	 mov	 r14, r9
  00024	4d 8b e0	 mov	 r12, r8
  00027	48 8b e9	 mov	 rbp, rcx

; 771  :     Py_ssize_t i,j;
; 772  :     switch (typ) {

  0002a	85 d2		 test	 edx, edx
  0002c	0f 84 78 02 00
	00		 je	 $LN7@Py2Reg
  00032	83 fa 02	 cmp	 edx, 2
  00035	0f 86 e7 01 00
	00		 jbe	 $LN27@Py2Reg
  0003b	83 fa 04	 cmp	 edx, 4
  0003e	0f 84 5e 01 00
	00		 je	 $LN32@Py2Reg
  00044	83 fa 07	 cmp	 edx, 7
  00047	0f 85 5d 02 00
	00		 jne	 $LN7@Py2Reg

; 813  :                 }
; 814  :                 break;
; 815  :             }
; 816  :         case REG_MULTI_SZ:
; 817  :             {
; 818  :                 DWORD size = 0;

  0004d	33 db		 xor	 ebx, ebx

; 819  :                 wchar_t *P;
; 820  : 
; 821  :                 if (value == Py_None)

  0004f	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  00056	8b f3		 mov	 esi, ebx
  00058	48 3b cf	 cmp	 rcx, rdi
  0005b	75 05		 jne	 SHORT $LN20@Py2Reg

; 822  :                     i = 0;

  0005d	44 8b eb	 mov	 r13d, ebx

; 823  :                 else {

  00060	eb 1c		 jmp	 SHORT $LN19@Py2Reg
$LN20@Py2Reg:

; 824  :                     if (!PyList_Check(value))

  00062	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00066	f7 80 00 01 00
	00 00 00 00 02	 test	 DWORD PTR [rax+256], 33554432 ; 02000000H

; 825  :                         return FALSE;

  00070	0f 84 2b 03 00
	00		 je	 $LN64@Py2Reg

; 826  :                     i = PyList_Size(value);

  00076	e8 00 00 00 00	 call	 PyList_Size
  0007b	4c 8b e8	 mov	 r13, rax
$LN19@Py2Reg:

; 827  :                 }
; 828  :                 for (j = 0; j < i; j++)

  0007e	48 8b fb	 mov	 rdi, rbx
  00081	4d 85 ed	 test	 r13, r13
  00084	7e 49		 jle	 SHORT $LN15@Py2Reg
  00086	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL17@Py2Reg:

; 829  :                 {
; 830  :                     PyObject *t;
; 831  :                     wchar_t *wstr;
; 832  :                     Py_ssize_t len;
; 833  : 
; 834  :                     t = PyList_GET_ITEM(value, j);

  00090	48 8b 45 70	 mov	 rax, QWORD PTR [rbp+112]
  00094	48 8b 0c f8	 mov	 rcx, QWORD PTR [rax+rdi*8]

; 835  :                     if (!PyUnicode_Check(t))

  00098	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0009c	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  000a6	0f 84 f5 02 00
	00		 je	 $LN64@Py2Reg

; 836  :                         return FALSE;
; 837  :                     wstr = PyUnicode_AsUnicodeAndSize(t, &len);

  000ac	48 8d 54 24 20	 lea	 rdx, QWORD PTR len$120715[rsp]
  000b1	e8 00 00 00 00	 call	 PyUnicode_AsUnicodeAndSize

; 838  :                     if (wstr == NULL)

  000b6	48 85 c0	 test	 rax, rax
  000b9	0f 84 e2 02 00
	00		 je	 $LN64@Py2Reg

; 839  :                         return FALSE;
; 840  :                     size += Py_SAFE_DOWNCAST((len + 1) * sizeof(wchar_t),
; 841  :                                              size_t, DWORD);

  000bf	8b 44 24 20	 mov	 eax, DWORD PTR len$120715[rsp]
  000c3	48 ff c7	 inc	 rdi
  000c6	8d 74 46 02	 lea	 esi, DWORD PTR [rsi+rax*2+2]
  000ca	49 3b fd	 cmp	 rdi, r13
  000cd	7c c1		 jl	 SHORT $LL17@Py2Reg
$LN15@Py2Reg:

; 842  :                 }
; 843  : 
; 844  :                 *retDataSize = size + 2;

  000cf	8d 46 02	 lea	 eax, DWORD PTR [rsi+2]

; 845  :                 *retDataBuf = (BYTE *)PyMem_NEW(char,
; 846  :                                                 *retDataSize);

  000d2	48 be ff ff ff
	ff ff ff ff 7f	 mov	 rsi, 9223372036854775807 ; 7fffffffffffffffH
  000dc	8b c8		 mov	 ecx, eax
  000de	41 89 06	 mov	 DWORD PTR [r14], eax
  000e1	48 3b ce	 cmp	 rcx, rsi
  000e4	76 05		 jbe	 SHORT $LN47@Py2Reg
  000e6	48 8b fb	 mov	 rdi, rbx
  000e9	eb 34		 jmp	 SHORT $LN44@Py2Reg
$LN47@Py2Reg:
  000eb	e8 00 00 00 00	 call	 _Py_PXCTX
  000f0	85 c0		 test	 eax, eax
  000f2	74 0a		 je	 SHORT $LN45@Py2Reg
  000f4	41 8b 0e	 mov	 ecx, DWORD PTR [r14]
  000f7	e8 00 00 00 00	 call	 _PxMem_Malloc
  000fc	eb 1e		 jmp	 SHORT $LN65@Py2Reg
$LN45@Py2Reg:
  000fe	41 8b 06	 mov	 eax, DWORD PTR [r14]
  00101	48 3b c6	 cmp	 rax, rsi
  00104	76 05		 jbe	 SHORT $LN43@Py2Reg
  00106	48 8b fb	 mov	 rdi, rbx
  00109	eb 14		 jmp	 SHORT $LN44@Py2Reg
$LN43@Py2Reg:
  0010b	85 c0		 test	 eax, eax
  0010d	b9 01 00 00 00	 mov	 ecx, 1
  00112	48 0f 45 c8	 cmovne	 rcx, rax
  00116	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
$LN65@Py2Reg:
  0011c	48 8b f8	 mov	 rdi, rax
$LN44@Py2Reg:
  0011f	49 89 3c 24	 mov	 QWORD PTR [r12], rdi

; 847  :                 if (*retDataBuf==NULL){

  00123	48 85 ff	 test	 rdi, rdi

; 848  :                     PyErr_NoMemory();
; 849  :                     return FALSE;

  00126	0f 84 32 02 00
	00		 je	 $LN67@Py2Reg

; 850  :                 }
; 851  :                 P = (wchar_t *)*retDataBuf;
; 852  : 
; 853  :                 for (j = 0; j < i; j++)

  0012c	48 8b f3	 mov	 rsi, rbx
  0012f	4d 85 ed	 test	 r13, r13
  00132	7e 61		 jle	 SHORT $LN9@Py2Reg
  00134	66 66 66 66 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL11@Py2Reg:

; 854  :                 {
; 855  :                     PyObject *t;
; 856  :                     wchar_t *wstr;
; 857  :                     Py_ssize_t len;
; 858  : 
; 859  :                     t = PyList_GET_ITEM(value, j);

  00140	48 8b 45 70	 mov	 rax, QWORD PTR [rbp+112]

; 860  :                     wstr = PyUnicode_AsUnicodeAndSize(t, &len);

  00144	48 8d 54 24 20	 lea	 rdx, QWORD PTR len$120751[rsp]
  00149	48 8b 0c f0	 mov	 rcx, QWORD PTR [rax+rsi*8]
  0014d	e8 00 00 00 00	 call	 PyUnicode_AsUnicodeAndSize
  00152	4c 8b d8	 mov	 r11, rax

; 861  :                     if (wstr == NULL)

  00155	48 85 c0	 test	 rax, rax
  00158	0f 84 43 02 00
	00		 je	 $LN64@Py2Reg

; 862  :                         return FALSE;
; 863  :                     wcscpy(P, wstr);

  0015e	48 8b cf	 mov	 rcx, rdi
  00161	48 2b c8	 sub	 rcx, rax
  00164	66 66 66 66 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL49@Py2Reg:
  00170	41 0f b7 03	 movzx	 eax, WORD PTR [r11]
  00174	49 83 c3 02	 add	 r11, 2
  00178	66 42 89 44 19
	fe		 mov	 WORD PTR [rcx+r11-2], ax
  0017e	66 85 c0	 test	 ax, ax
  00181	75 ed		 jne	 SHORT $LL49@Py2Reg

; 864  :                     P += (len + 1);

  00183	48 8b 44 24 20	 mov	 rax, QWORD PTR len$120751[rsp]
  00188	48 ff c6	 inc	 rsi
  0018b	48 8d 7c 47 02	 lea	 rdi, QWORD PTR [rdi+rax*2+2]
  00190	49 3b f5	 cmp	 rsi, r13
  00193	7c ab		 jl	 SHORT $LL11@Py2Reg
$LN9@Py2Reg:

; 865  :                 }
; 866  :                 /* And doubly-terminate the list... */
; 867  :                 *P = '\0';

  00195	66 89 1f	 mov	 WORD PTR [rdi], bx

; 899  :             }
; 900  :             break;
; 901  :     }
; 902  :     return TRUE;

  00198	b8 01 00 00 00	 mov	 eax, 1
  0019d	e9 01 02 00 00	 jmp	 $LN35@Py2Reg
$LN32@Py2Reg:

; 773  :         case REG_DWORD:
; 774  :             if (value != Py_None && !PyLong_Check(value))

  001a2	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  001a9	48 3b cf	 cmp	 rcx, rdi
  001ac	74 14		 je	 SHORT $LN31@Py2Reg
  001ae	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  001b2	f7 80 00 01 00
	00 00 00 00 01	 test	 DWORD PTR [rax+256], 16777216 ; 01000000H

; 775  :                 return FALSE;

  001bc	0f 84 df 01 00
	00		 je	 $LN64@Py2Reg
$LN31@Py2Reg:

; 776  :             *retDataBuf = (BYTE *)PyMem_NEW(DWORD, 1);

  001c2	e8 00 00 00 00	 call	 _Py_PXCTX
  001c7	b9 04 00 00 00	 mov	 ecx, 4
  001cc	85 c0		 test	 eax, eax
  001ce	74 07		 je	 SHORT $LN37@Py2Reg
  001d0	e8 00 00 00 00	 call	 _PxMem_Malloc
  001d5	eb 06		 jmp	 SHORT $LN38@Py2Reg
$LN37@Py2Reg:
  001d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
$LN38@Py2Reg:
  001dd	49 89 04 24	 mov	 QWORD PTR [r12], rax

; 777  :             if (*retDataBuf==NULL){

  001e1	48 85 c0	 test	 rax, rax

; 778  :                 PyErr_NoMemory();
; 779  :                 return FALSE;

  001e4	0f 84 74 01 00
	00		 je	 $LN67@Py2Reg

; 780  :             }
; 781  :             *retDataSize = sizeof(DWORD);

  001ea	41 c7 06 04 00
	00 00		 mov	 DWORD PTR [r14], 4

; 782  :             if (value == Py_None) {

  001f1	48 3b ef	 cmp	 rbp, rdi
  001f4	75 10		 jne	 SHORT $LN29@Py2Reg

; 783  :                 DWORD zero = 0;
; 784  :                 memcpy(*retDataBuf, &zero, sizeof(DWORD));

  001f6	49 8b 04 24	 mov	 rax, QWORD PTR [r12]
  001fa	33 db		 xor	 ebx, ebx
  001fc	89 18		 mov	 DWORD PTR [rax], ebx

; 899  :             }
; 900  :             break;
; 901  :     }
; 902  :     return TRUE;

  001fe	8d 43 01	 lea	 eax, QWORD PTR [rbx+1]
  00201	e9 9d 01 00 00	 jmp	 $LN35@Py2Reg
$LN29@Py2Reg:

; 785  :             }
; 786  :             else {
; 787  :                 DWORD d = PyLong_AsUnsignedLong(value);

  00206	48 8b cd	 mov	 rcx, rbp
  00209	e8 00 00 00 00	 call	 PyLong_AsUnsignedLong
  0020e	44 8b d8	 mov	 r11d, eax

; 788  :                 memcpy(*retDataBuf, &d, sizeof(DWORD));

  00211	49 8b 04 24	 mov	 rax, QWORD PTR [r12]
  00215	44 89 18	 mov	 DWORD PTR [rax], r11d

; 899  :             }
; 900  :             break;
; 901  :     }
; 902  :     return TRUE;

  00218	b8 01 00 00 00	 mov	 eax, 1
  0021d	e9 81 01 00 00	 jmp	 $LN35@Py2Reg
$LN27@Py2Reg:

; 789  :             }
; 790  :             break;
; 791  :         case REG_SZ:
; 792  :         case REG_EXPAND_SZ:
; 793  :             {
; 794  :                 if (value != Py_None) {

  00222	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  00229	48 3b cf	 cmp	 rcx, rdi
  0022c	74 40		 je	 SHORT $LN26@Py2Reg

; 795  :                     Py_ssize_t len;
; 796  :                     if (!PyUnicode_Check(value))

  0022e	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00232	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H

; 797  :                         return FALSE;

  0023c	0f 84 5f 01 00
	00		 je	 $LN64@Py2Reg

; 798  :                     *retDataBuf = (BYTE*)PyUnicode_AsWideCharString(value, &len);

  00242	48 8d 54 24 20	 lea	 rdx, QWORD PTR len$120670[rsp]
  00247	e8 00 00 00 00	 call	 PyUnicode_AsWideCharString
  0024c	49 89 04 24	 mov	 QWORD PTR [r12], rax

; 799  :                     if (*retDataBuf == NULL)

  00250	48 85 c0	 test	 rax, rax

; 800  :                         return FALSE;

  00253	0f 84 48 01 00
	00		 je	 $LN64@Py2Reg

; 801  :                     *retDataSize = Py_SAFE_DOWNCAST(
; 802  :                         (len + 1) * sizeof(wchar_t),
; 803  :                         Py_ssize_t, DWORD);

  00259	8b 44 24 20	 mov	 eax, DWORD PTR len$120670[rsp]
  0025d	8d 44 00 02	 lea	 eax, DWORD PTR [rax+rax+2]
  00261	41 89 06	 mov	 DWORD PTR [r14], eax

; 899  :             }
; 900  :             break;
; 901  :     }
; 902  :     return TRUE;

  00264	b8 01 00 00 00	 mov	 eax, 1
  00269	e9 35 01 00 00	 jmp	 $LN35@Py2Reg
$LN26@Py2Reg:

; 804  :                 }
; 805  :                 else {
; 806  :                     *retDataBuf = (BYTE *)PyMem_NEW(wchar_t, 1);

  0026e	e8 00 00 00 00	 call	 _Py_PXCTX
  00273	b9 02 00 00 00	 mov	 ecx, 2
  00278	85 c0		 test	 eax, eax
  0027a	74 07		 je	 SHORT $LN39@Py2Reg
  0027c	e8 00 00 00 00	 call	 _PxMem_Malloc
  00281	eb 06		 jmp	 SHORT $LN40@Py2Reg
$LN39@Py2Reg:
  00283	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
$LN40@Py2Reg:
  00289	49 89 04 24	 mov	 QWORD PTR [r12], rax

; 807  :                     if (*retDataBuf == NULL) {

  0028d	48 85 c0	 test	 rax, rax

; 808  :                         PyErr_NoMemory();
; 809  :                         return FALSE;

  00290	0f 84 c8 00 00
	00		 je	 $LN67@Py2Reg

; 810  :                     }
; 811  :                     ((wchar_t *)*retDataBuf)[0] = L'\0';

  00296	33 db		 xor	 ebx, ebx
  00298	66 89 18	 mov	 WORD PTR [rax], bx

; 812  :                     *retDataSize = 1 * sizeof(wchar_t);

  0029b	41 c7 06 02 00
	00 00		 mov	 DWORD PTR [r14], 2

; 899  :             }
; 900  :             break;
; 901  :     }
; 902  :     return TRUE;

  002a2	8d 43 01	 lea	 eax, QWORD PTR [rbx+1]
  002a5	e9 f9 00 00 00	 jmp	 $LN35@Py2Reg
$LN7@Py2Reg:

; 868  :                 break;
; 869  :             }
; 870  :         case REG_BINARY:
; 871  :         /* ALSO handle ALL unknown data types here.  Even if we can't
; 872  :            support it natively, we should handle the bits. */
; 873  :         default:
; 874  :             if (value == Py_None)

  002aa	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  002b1	48 3b cf	 cmp	 rcx, rdi
  002b4	75 0d		 jne	 SHORT $LN6@Py2Reg

; 875  :                 *retDataSize = 0;

  002b6	33 db		 xor	 ebx, ebx
  002b8	41 89 19	 mov	 DWORD PTR [r9], ebx

; 899  :             }
; 900  :             break;
; 901  :     }
; 902  :     return TRUE;

  002bb	8d 43 01	 lea	 eax, QWORD PTR [rbx+1]
  002be	e9 e0 00 00 00	 jmp	 $LN35@Py2Reg
$LN6@Py2Reg:

; 876  :             else {
; 877  :                 Py_buffer view;
; 878  : 
; 879  :                 if (!PyObject_CheckBuffer(value)) {

  002c3	4c 8b 41 58	 mov	 r8, QWORD PTR [rcx+88]
  002c7	49 8b 80 f8 00
	00 00		 mov	 rax, QWORD PTR [r8+248]
  002ce	48 85 c0	 test	 rax, rax
  002d1	0f 84 b3 00 00
	00		 je	 $LN3@Py2Reg
  002d7	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  002db	0f 84 a9 00 00
	00		 je	 $LN3@Py2Reg

; 885  :                 }
; 886  : 
; 887  :                 if (PyObject_GetBuffer(value, &view, PyBUF_SIMPLE) < 0)

  002e1	48 8d 54 24 30	 lea	 rdx, QWORD PTR view$120758[rsp]
  002e6	45 33 c0	 xor	 r8d, r8d
  002e9	e8 00 00 00 00	 call	 PyObject_GetBuffer
  002ee	85 c0		 test	 eax, eax

; 888  :                     return FALSE;

  002f0	0f 88 ab 00 00
	00		 js	 $LN64@Py2Reg

; 889  : 
; 890  :                 *retDataBuf = (BYTE *)PyMem_NEW(char, view.len);

  002f6	48 8b 7c 24 40	 mov	 rdi, QWORD PTR view$120758[rsp+16]
  002fb	48 be ff ff ff
	ff ff ff ff 7f	 mov	 rsi, 9223372036854775807 ; 7fffffffffffffffH
  00305	48 3b fe	 cmp	 rdi, rsi
  00308	76 04		 jbe	 SHORT $LN54@Py2Reg
  0030a	33 db		 xor	 ebx, ebx
  0030c	eb 3d		 jmp	 SHORT $LN51@Py2Reg
$LN54@Py2Reg:
  0030e	e8 00 00 00 00	 call	 _Py_PXCTX
  00313	85 c0		 test	 eax, eax
  00315	74 11		 je	 SHORT $LN52@Py2Reg
  00317	48 8b 4c 24 40	 mov	 rcx, QWORD PTR view$120758[rsp+16]
  0031c	e8 00 00 00 00	 call	 _PxMem_Malloc
  00321	48 8b 7c 24 40	 mov	 rdi, QWORD PTR view$120758[rsp+16]
  00326	eb 20		 jmp	 SHORT $LN66@Py2Reg
$LN52@Py2Reg:
  00328	48 8b 7c 24 40	 mov	 rdi, QWORD PTR view$120758[rsp+16]
  0032d	48 3b fe	 cmp	 rdi, rsi
  00330	76 04		 jbe	 SHORT $LN50@Py2Reg
  00332	33 db		 xor	 ebx, ebx
  00334	eb 15		 jmp	 SHORT $LN51@Py2Reg
$LN50@Py2Reg:
  00336	48 85 ff	 test	 rdi, rdi
  00339	b9 01 00 00 00	 mov	 ecx, 1
  0033e	48 0f 45 cf	 cmovne	 rcx, rdi
  00342	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
$LN66@Py2Reg:
  00348	48 8b d8	 mov	 rbx, rax
$LN51@Py2Reg:
  0034b	49 89 1c 24	 mov	 QWORD PTR [r12], rbx

; 891  :                 if (*retDataBuf==NULL){

  0034f	48 85 db	 test	 rbx, rbx
  00352	75 11		 jne	 SHORT $LN1@Py2Reg

; 892  :                     PyBuffer_Release(&view);

  00354	48 8d 4c 24 30	 lea	 rcx, QWORD PTR view$120758[rsp]
  00359	e8 00 00 00 00	 call	 PyBuffer_Release
$LN67@Py2Reg:

; 893  :                     PyErr_NoMemory();

  0035e	e8 00 00 00 00	 call	 PyErr_NoMemory

; 894  :                     return FALSE;

  00363	eb 3c		 jmp	 SHORT $LN64@Py2Reg
$LN1@Py2Reg:

; 895  :                 }
; 896  :                 *retDataSize = Py_SAFE_DOWNCAST(view.len, Py_ssize_t, DWORD);
; 897  :                 memcpy(*retDataBuf, view.buf, view.len);

  00365	48 8b 54 24 30	 mov	 rdx, QWORD PTR view$120758[rsp]
  0036a	41 89 3e	 mov	 DWORD PTR [r14], edi
  0036d	49 8b 0c 24	 mov	 rcx, QWORD PTR [r12]
  00371	4c 8b c7	 mov	 r8, rdi
  00374	e8 00 00 00 00	 call	 memcpy

; 898  :                 PyBuffer_Release(&view);

  00379	48 8d 4c 24 30	 lea	 rcx, QWORD PTR view$120758[rsp]
  0037e	e8 00 00 00 00	 call	 PyBuffer_Release

; 899  :             }
; 900  :             break;
; 901  :     }
; 902  :     return TRUE;

  00383	b8 01 00 00 00	 mov	 eax, 1
  00388	eb 19		 jmp	 SHORT $LN35@Py2Reg
$LN3@Py2Reg:

; 880  :                     PyErr_Format(PyExc_TypeError,
; 881  :                         "Objects of type '%s' can not "
; 882  :                         "be used as binary registry values",
; 883  :                         value->ob_type->tp_name);

  0038a	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  0038e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00395	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DP@KGDGBJCB@Objects?5of?5type?5?8?$CFs?8?5can?5not?5be?5@
  0039c	e8 00 00 00 00	 call	 PyErr_Format
$LN64@Py2Reg:

; 884  :                     return FALSE;

  003a1	33 c0		 xor	 eax, eax
$LN35@Py2Reg:

; 903  : }

  003a3	4c 8d 9c 24 80
	00 00 00	 lea	 r11, QWORD PTR [rsp+128]
  003ab	49 8b 5b 20	 mov	 rbx, QWORD PTR [r11+32]
  003af	49 8b 6b 28	 mov	 rbp, QWORD PTR [r11+40]
  003b3	49 8b 73 30	 mov	 rsi, QWORD PTR [r11+48]
  003b7	49 8b 7b 38	 mov	 rdi, QWORD PTR [r11+56]
  003bb	49 8b e3	 mov	 rsp, r11
  003be	41 5e		 pop	 r14
  003c0	41 5d		 pop	 r13
  003c2	41 5c		 pop	 r12
  003c4	c3		 ret	 0
Py2Reg	ENDP
_TEXT	ENDS
PUBLIC	??_C@_11LOCGONAA@?$AA?$AA@			; `string'
PUBLIC	??_C@_0DA@BLJKMNPB@registry?5string?5is?5too?5long?5for?5@ ; `string'
EXTRN	PyBytes_FromStringAndSize:PROC
EXTRN	PyLong_FromUnsignedLong:PROC
EXTRN	PyExc_OverflowError:QWORD
EXTRN	__imp_free:PROC
EXTRN	PyList_SetItem:PROC
EXTRN	PyUnicode_FromWideChar:PROC
EXTRN	PyList_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$Reg2Py DD imagerel Reg2Py
	DD	imagerel Reg2Py+481
	DD	imagerel $unwind$Reg2Py
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Reg2Py DD 0a1801H
	DD	0c6418H
	DD	0b5418H
	DD	0a3418H
	DD	0d0145218H
	DD	07010c012H
xdata	ENDS
;	COMDAT ??_C@_11LOCGONAA@?$AA?$AA@
CONST	SEGMENT
??_C@_11LOCGONAA@?$AA?$AA@ DB 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@BLJKMNPB@registry?5string?5is?5too?5long?5for?5@
CONST	SEGMENT
??_C@_0DA@BLJKMNPB@registry?5string?5is?5too?5long?5for?5@ DB 'registry s'
	DB	'tring is too long for a Python string', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\pc\winreg.c
CONST	ENDS
;	COMDAT Reg2Py
_TEXT	SEGMENT
retDataBuf$ = 80
retDataSize$ = 88
typ$ = 96
Reg2Py	PROC						; COMDAT

; 908  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00018	8b fa		 mov	 edi, edx
  0001a	48 8b d9	 mov	 rbx, rcx

; 909  :     PyObject *obData;
; 910  : 
; 911  :     switch (typ) {

  0001d	45 85 c0	 test	 r8d, r8d
  00020	0f 84 46 01 00
	00		 je	 $LN10@Reg2Py
  00026	41 83 f8 02	 cmp	 r8d, 2
  0002a	0f 86 10 01 00
	00		 jbe	 $LN15@Reg2Py
  00030	41 83 f8 04	 cmp	 r8d, 4
  00034	0f 84 ea 00 00
	00		 je	 $LN18@Reg2Py
  0003a	41 83 f8 07	 cmp	 r8d, 7
  0003e	0f 85 28 01 00
	00		 jne	 $LN10@Reg2Py

; 930  :             }
; 931  :         case REG_MULTI_SZ:
; 932  :             if (retDataSize == 0)

  00044	85 d2		 test	 edx, edx
  00046	75 0c		 jne	 SHORT $LN11@Reg2Py

; 933  :                 obData = PyList_New(0);

  00048	33 c9		 xor	 ecx, ecx
  0004a	e8 00 00 00 00	 call	 PyList_New

; 934  :             else

  0004f	e9 1c 01 00 00	 jmp	 $LN30@Reg2Py
$LN11@Reg2Py:

; 935  :             {
; 936  :                 int index = 0;
; 937  :                 wchar_t *data = (wchar_t *)retDataBuf;
; 938  :                 int len = retDataSize / 2;

  00054	d1 ef		 shr	 edi, 1

; 939  :                 int s = countStrings(data, len);

  00056	8b d7		 mov	 edx, edi
  00058	e8 00 00 00 00	 call	 countStrings

; 940  :                 wchar_t **str = (wchar_t **)malloc(sizeof(wchar_t *)*s);

  0005d	4c 63 e8	 movsxd	 r13, eax
  00060	4a 8d 0c ed 00
	00 00 00	 lea	 rcx, QWORD PTR [r13*8]
  00068	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0006e	48 8b e8	 mov	 rbp, rax

; 941  :                 if (str == NULL)

  00071	48 85 c0	 test	 rax, rax
  00074	75 0a		 jne	 SHORT $LN9@Reg2Py

; 942  :                     return PyErr_NoMemory();

  00076	e8 00 00 00 00	 call	 PyErr_NoMemory
  0007b	e9 48 01 00 00	 jmp	 $LN21@Reg2Py
$LN9@Reg2Py:

; 943  : 
; 944  :                 fixupMultiSZ(str, data, len);

  00080	44 8b c7	 mov	 r8d, edi
  00083	48 8b d3	 mov	 rdx, rbx
  00086	48 8b c8	 mov	 rcx, rax
  00089	e8 00 00 00 00	 call	 fixupMultiSZ

; 945  :                 obData = PyList_New(s);

  0008e	49 8b cd	 mov	 rcx, r13
  00091	e8 00 00 00 00	 call	 PyList_New
  00096	48 8b d8	 mov	 rbx, rax

; 946  :                 if (obData == NULL)

  00099	48 85 c0	 test	 rax, rax

; 947  :                     return NULL;

  0009c	0f 84 7b 00 00
	00		 je	 $LN32@Reg2Py

; 948  :                 for (index = 0; index < s; index++)

  000a2	45 33 e4	 xor	 r12d, r12d
  000a5	41 8b f4	 mov	 esi, r12d
  000a8	4d 85 ed	 test	 r13, r13
  000ab	7e 47		 jle	 SHORT $LN5@Reg2Py
  000ad	0f 1f 00	 npad	 3
$LL7@Reg2Py:
  000b0	4c 8b 44 f5 00	 mov	 r8, QWORD PTR [rbp+rsi*8]

; 949  :                 {
; 950  :                     size_t len = wcslen(str[index]);

  000b5	48 83 c9 ff	 or	 rcx, -1
  000b9	33 c0		 xor	 eax, eax
  000bb	49 8b f8	 mov	 rdi, r8
  000be	66 f2 af	 repne scasw
  000c1	48 f7 d1	 not	 rcx
  000c4	48 ff c9	 dec	 rcx

; 951  :                     if (len > INT_MAX) {

  000c7	48 81 f9 ff ff
	ff 7f		 cmp	 rcx, 2147483647		; 7fffffffH
  000ce	77 32		 ja	 SHORT $LN28@Reg2Py

; 956  :                     }
; 957  :                     PyList_SetItem(obData,
; 958  :                                    index,
; 959  :                                    PyUnicode_FromWideChar(str[index], len));

  000d0	48 8b d1	 mov	 rdx, rcx
  000d3	49 8b c8	 mov	 rcx, r8
  000d6	e8 00 00 00 00	 call	 PyUnicode_FromWideChar
  000db	49 63 d4	 movsxd	 rdx, r12d
  000de	48 8b cb	 mov	 rcx, rbx
  000e1	4c 8b c0	 mov	 r8, rax
  000e4	e8 00 00 00 00	 call	 PyList_SetItem
  000e9	48 ff c6	 inc	 rsi
  000ec	41 ff c4	 inc	 r12d
  000ef	49 3b f5	 cmp	 rsi, r13
  000f2	7c bc		 jl	 SHORT $LL7@Reg2Py
$LN5@Reg2Py:

; 960  :                 }
; 961  :                 free(str);

  000f4	48 8b cd	 mov	 rcx, rbp
  000f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 962  : 
; 963  :                 break;

  000fd	e9 c3 00 00 00	 jmp	 $LN1@Reg2Py
$LN28@Reg2Py:

; 952  :                         PyErr_SetString(PyExc_OverflowError,
; 953  :                             "registry string is too long for a Python string");

  00102	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  00109	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@BLJKMNPB@registry?5string?5is?5too?5long?5for?5@
  00110	e8 00 00 00 00	 call	 PyErr_SetString

; 954  :                         Py_DECREF(obData);

  00115	48 8b cb	 mov	 rcx, rbx
  00118	e8 00 00 00 00	 call	 _Py_DecRef
$LN32@Reg2Py:

; 955  :                         return NULL;

  0011d	33 c0		 xor	 eax, eax
  0011f	e9 a4 00 00 00	 jmp	 $LN21@Reg2Py
$LN18@Reg2Py:

; 912  :         case REG_DWORD:
; 913  :             if (retDataSize == 0)

  00124	85 d2		 test	 edx, edx
  00126	75 0c		 jne	 SHORT $LN17@Reg2Py

; 914  :                 obData = PyLong_FromUnsignedLong(0);

  00128	33 c9		 xor	 ecx, ecx
  0012a	e8 00 00 00 00	 call	 PyLong_FromUnsignedLong

; 915  :             else

  0012f	e9 8e 00 00 00	 jmp	 $LN31@Reg2Py
$LN17@Reg2Py:

; 916  :                 obData = PyLong_FromUnsignedLong(*(int *)retDataBuf);

  00134	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00136	e8 00 00 00 00	 call	 PyLong_FromUnsignedLong

; 917  :             break;

  0013b	e9 82 00 00 00	 jmp	 $LN31@Reg2Py
$LN15@Reg2Py:

; 924  :                 if (retDataSize && data[len-1] == '\0')

  00140	85 d2		 test	 edx, edx
  00142	74 0f		 je	 SHORT $LN14@Reg2Py

; 918  :         case REG_SZ:
; 919  :         case REG_EXPAND_SZ:
; 920  :             {
; 921  :                 /* the buffer may or may not have a trailing NULL */
; 922  :                 wchar_t *data = (wchar_t *)retDataBuf;
; 923  :                 int len = retDataSize / 2;

  00144	8b c7		 mov	 eax, edi
  00146	d1 e8		 shr	 eax, 1

; 924  :                 if (retDataSize && data[len-1] == '\0')

  00148	66 83 7c 41 fe
	00		 cmp	 WORD PTR [rcx+rax*2-2], 0
  0014e	75 03		 jne	 SHORT $LN14@Reg2Py

; 925  :                     retDataSize -= 2;

  00150	83 c7 fe	 add	 edi, -2			; fffffffeH
$LN14@Reg2Py:

; 926  :                 if (retDataSize <= 0)

  00153	85 ff		 test	 edi, edi
  00155	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_11LOCGONAA@?$AA?$AA@

; 927  :                     data = L"";
; 928  :                 obData = PyUnicode_FromWideChar(data, retDataSize/2);

  0015c	8b d7		 mov	 edx, edi
  0015e	48 0f 45 cb	 cmovne	 rcx, rbx
  00162	48 d1 ea	 shr	 rdx, 1
  00165	e8 00 00 00 00	 call	 PyUnicode_FromWideChar

; 929  :                 break;

  0016a	eb 56		 jmp	 SHORT $LN31@Reg2Py
$LN10@Reg2Py:

; 964  :             }
; 965  :         case REG_BINARY:
; 966  :         /* ALSO handle ALL unknown data types here.  Even if we can't
; 967  :            support it natively, we should handle the bits. */
; 968  :         default:
; 969  :             if (retDataSize == 0) {

  0016c	85 d2		 test	 edx, edx
  0016e	75 4a		 jne	 SHORT $LN2@Reg2Py
$LN30@Reg2Py:

; 970  :                 Py_INCREF(Py_None);

  00170	e8 00 00 00 00	 call	 _Py_PXCTX
  00175	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0017c	85 c0		 test	 eax, eax
  0017e	75 45		 jne	 SHORT $LN1@Reg2Py
  00180	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00187	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0018e	4c 8b cb	 mov	 r9, rbx
  00191	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00197	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0019f	e8 00 00 00 00	 call	 _PyParallel_Guard
  001a4	85 c0		 test	 eax, eax
  001a6	75 09		 jne	 SHORT $LN23@Reg2Py
  001a8	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  001af	74 14		 je	 SHORT $LN1@Reg2Py
$LN23@Reg2Py:
  001b1	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80

; 971  :                 obData = Py_None;
; 972  :             }
; 973  :             else

  001b8	eb 0b		 jmp	 SHORT $LN1@Reg2Py
$LN2@Reg2Py:

; 974  :                 obData = PyBytes_FromStringAndSize(
; 975  :                              (char *)retDataBuf, retDataSize);

  001ba	48 8b d7	 mov	 rdx, rdi
  001bd	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
$LN31@Reg2Py:
  001c2	48 8b d8	 mov	 rbx, rax
$LN1@Reg2Py:

; 976  :             break;
; 977  :     }
; 978  :     return obData;

  001c5	48 8b c3	 mov	 rax, rbx
$LN21@Reg2Py:

; 979  : }

  001c8	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  001cd	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  001d2	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  001d7	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001db	41 5d		 pop	 r13
  001dd	41 5c		 pop	 r12
  001df	5f		 pop	 rdi
  001e0	c3		 ret	 0
Reg2Py	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@JDCMJEOL@O?3CloseKey?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyCloseKey DD imagerel PyCloseKey
	DD	imagerel PyCloseKey+130
	DD	imagerel $unwind$PyCloseKey
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCloseKey DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0L@JDCMJEOL@O?3CloseKey?$AA@
CONST	SEGMENT
??_C@_0L@JDCMJEOL@O?3CloseKey?$AA@ DB 'O:CloseKey', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\pc\winreg.c
CONST	ENDS
;	COMDAT PyCloseKey
_TEXT	SEGMENT
self$ = 64
args$ = 72
obKey$ = 80
PyCloseKey PROC						; COMDAT

; 985  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 986  :     PyObject *obKey;
; 987  :     if (!PyArg_ParseTuple(args, "O:CloseKey", &obKey))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 44 24 50	 lea	 r8, QWORD PTR obKey$[rsp]
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@JDCMJEOL@O?3CloseKey?$AA@
  00013	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00018	85 c0		 test	 eax, eax
  0001a	75 07		 jne	 SHORT $LN2@PyCloseKey
$LN9@PyCloseKey:

; 988  :         return NULL;

  0001c	33 c0		 xor	 eax, eax

; 993  : }

  0001e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00022	c3		 ret	 0
$LN2@PyCloseKey:

; 989  :     if (!PyHKEY_Close(obKey))

  00023	48 8b 4c 24 50	 mov	 rcx, QWORD PTR obKey$[rsp]
  00028	e8 00 00 00 00	 call	 PyHKEY_Close
  0002d	85 c0		 test	 eax, eax

; 990  :         return NULL;

  0002f	74 eb		 je	 SHORT $LN9@PyCloseKey

; 991  :     Py_INCREF(Py_None);

  00031	e8 00 00 00 00	 call	 _Py_PXCTX
  00036	85 c0		 test	 eax, eax
  00038	75 3c		 jne	 SHORT $LN6@PyCloseKey
  0003a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00041	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0004f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00055	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0005d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00062	85 c0		 test	 eax, eax
  00064	75 09		 jne	 SHORT $LN5@PyCloseKey
  00066	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0006d	74 07		 je	 SHORT $LN6@PyCloseKey
$LN5@PyCloseKey:
  0006f	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN6@PyCloseKey:

; 992  :     return Py_None;

  00076	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 993  : }

  0007d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00081	c3		 ret	 0
PyCloseKey ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@DDFAGEGB@ZO?3ConnectRegistry?$AA@	; `string'
EXTRN	PyEval_RestoreThread:PROC
EXTRN	__imp_RegConnectRegistryW:PROC
EXTRN	PyEval_SaveThread:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyConnectRegistry DD imagerel PyConnectRegistry
	DD	imagerel PyConnectRegistry+71
	DD	imagerel $unwind$PyConnectRegistry
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyConnectRegistry DD imagerel PyConnectRegistry+71
	DD	imagerel PyConnectRegistry+129
	DD	imagerel $chain$1$PyConnectRegistry
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyConnectRegistry DD imagerel PyConnectRegistry+129
	DD	imagerel PyConnectRegistry+146
	DD	imagerel $chain$2$PyConnectRegistry
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyConnectRegistry DD imagerel PyConnectRegistry+146
	DD	imagerel PyConnectRegistry+166
	DD	imagerel $chain$4$PyConnectRegistry
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyConnectRegistry DD 020021H
	DD	067400H
	DD	imagerel PyConnectRegistry
	DD	imagerel PyConnectRegistry+71
	DD	imagerel $unwind$PyConnectRegistry
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyConnectRegistry DD 020021H
	DD	067400H
	DD	imagerel PyConnectRegistry
	DD	imagerel PyConnectRegistry+71
	DD	imagerel $unwind$PyConnectRegistry
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyConnectRegistry DD 040a21H
	DD	06740aH
	DD	083405H
	DD	imagerel PyConnectRegistry
	DD	imagerel PyConnectRegistry+71
	DD	imagerel $unwind$PyConnectRegistry
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyConnectRegistry DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0BD@DDFAGEGB@ZO?3ConnectRegistry?$AA@
CONST	SEGMENT
??_C@_0BD@DDFAGEGB@ZO?3ConnectRegistry?$AA@ DB 'ZO:ConnectRegistry', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyConnectRegistry
_TEXT	SEGMENT
hKey$ = 32
retKey$ = 40
self$ = 64
args$ = 72
szCompName$ = 80
obKey$ = 88
PyConnectRegistry PROC					; COMDAT

; 997  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 998  :     HKEY hKey;
; 999  :     PyObject *obKey;
; 1000 :     wchar_t *szCompName = NULL;
; 1001 :     HKEY retKey;
; 1002 :     long rc;
; 1003 :     if (!PyArg_ParseTuple(args, "ZO:ConnectRegistry", &szCompName, &obKey))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 4c 24 58	 lea	 r9, QWORD PTR obKey$[rsp]
  0000c	4c 8d 44 24 50	 lea	 r8, QWORD PTR szCompName$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@DDFAGEGB@ZO?3ConnectRegistry?$AA@
  00018	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR szCompName$[rsp], 0
  00021	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00026	85 c0		 test	 eax, eax
  00028	75 07		 jne	 SHORT $LN3@PyConnectR
$LN7@PyConnectR:

; 1004 :         return NULL;

  0002a	33 c0		 xor	 eax, eax

; 1014 : }

  0002c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00030	c3		 ret	 0
$LN3@PyConnectR:

; 1005 :     if (!PyHKEY_AsHKEY(obKey, &hKey, FALSE))

  00031	48 8b 4c 24 58	 mov	 rcx, QWORD PTR obKey$[rsp]
  00036	48 8d 54 24 20	 lea	 rdx, QWORD PTR hKey$[rsp]
  0003b	45 33 c0	 xor	 r8d, r8d
  0003e	e8 00 00 00 00	 call	 PyHKEY_AsHKEY
  00043	85 c0		 test	 eax, eax

; 1006 :         return NULL;

  00045	74 e3		 je	 SHORT $LN7@PyConnectR

; 1007 :     Py_BEGIN_ALLOW_THREADS

  00047	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0004c	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  00051	e8 00 00 00 00	 call	 PyEval_SaveThread

; 1008 :     rc = RegConnectRegistryW(szCompName, hKey, &retKey);

  00056	48 8b 54 24 20	 mov	 rdx, QWORD PTR hKey$[rsp]
  0005b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR szCompName$[rsp]
  00060	4c 8d 44 24 28	 lea	 r8, QWORD PTR retKey$[rsp]
  00065	48 8b d8	 mov	 rbx, rax
  00068	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegConnectRegistryW

; 1009 :     Py_END_ALLOW_THREADS

  0006e	48 8b cb	 mov	 rcx, rbx
  00071	8b f8		 mov	 edi, eax
  00073	e8 00 00 00 00	 call	 PyEval_RestoreThread
  00078	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 1010 :     if (rc != ERROR_SUCCESS)

  0007d	85 ff		 test	 edi, edi
  0007f	74 11		 je	 SHORT $LN1@PyConnectR

; 1011 :         return PyErr_SetFromWindowsErrWithFunction(rc,
; 1012 :                                                    "ConnectRegistry");

  00081	8b cf		 mov	 ecx, edi
  00083	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00088	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 1014 : }

  0008d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00091	c3		 ret	 0
$LN1@PyConnectR:

; 1013 :     return PyHKEY_FromHKEY(retKey);

  00092	48 8b 4c 24 28	 mov	 rcx, QWORD PTR retKey$[rsp]
  00097	e8 00 00 00 00	 call	 PyHKEY_FromHKEY
  0009c	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 1014 : }

  000a1	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a5	c3		 ret	 0
PyConnectRegistry ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@FFHIEBMK@OZ?3CreateKey?$AA@		; `string'
EXTRN	__imp_RegCreateKeyW:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCreateKey DD imagerel PyCreateKey
	DD	imagerel PyCreateKey+114
	DD	imagerel $unwind$PyCreateKey
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCreateKey DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0N@FFHIEBMK@OZ?3CreateKey?$AA@
CONST	SEGMENT
??_C@_0N@FFHIEBMK@OZ?3CreateKey?$AA@ DB 'OZ:CreateKey', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyCreateKey
_TEXT	SEGMENT
hKey$ = 32
retKey$ = 40
self$ = 64
args$ = 72
obKey$ = 80
subKey$ = 88
PyCreateKey PROC					; COMDAT

; 1018 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1019 :     HKEY hKey;
; 1020 :     PyObject *obKey;
; 1021 :     wchar_t *subKey;
; 1022 :     HKEY retKey;
; 1023 :     long rc;
; 1024 :     if (!PyArg_ParseTuple(args, "OZ:CreateKey", &obKey, &subKey))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 4c 24 58	 lea	 r9, QWORD PTR subKey$[rsp]
  0000c	4c 8d 44 24 50	 lea	 r8, QWORD PTR obKey$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@FFHIEBMK@OZ?3CreateKey?$AA@
  00018	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0001d	85 c0		 test	 eax, eax
  0001f	75 07		 jne	 SHORT $LN3@PyCreateKe
$LN6@PyCreateKe:

; 1025 :         return NULL;

  00021	33 c0		 xor	 eax, eax

; 1032 : }

  00023	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00027	c3		 ret	 0
$LN3@PyCreateKe:

; 1026 :     if (!PyHKEY_AsHKEY(obKey, &hKey, FALSE))

  00028	48 8b 4c 24 50	 mov	 rcx, QWORD PTR obKey$[rsp]
  0002d	48 8d 54 24 20	 lea	 rdx, QWORD PTR hKey$[rsp]
  00032	45 33 c0	 xor	 r8d, r8d
  00035	e8 00 00 00 00	 call	 PyHKEY_AsHKEY
  0003a	85 c0		 test	 eax, eax

; 1027 :         return NULL;

  0003c	74 e3		 je	 SHORT $LN6@PyCreateKe

; 1028 :     rc = RegCreateKeyW(hKey, subKey, &retKey);

  0003e	48 8b 54 24 58	 mov	 rdx, QWORD PTR subKey$[rsp]
  00043	48 8b 4c 24 20	 mov	 rcx, QWORD PTR hKey$[rsp]
  00048	4c 8d 44 24 28	 lea	 r8, QWORD PTR retKey$[rsp]
  0004d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegCreateKeyW

; 1029 :     if (rc != ERROR_SUCCESS)

  00053	85 c0		 test	 eax, eax
  00055	74 0c		 je	 SHORT $LN1@PyCreateKe

; 1030 :         return PyErr_SetFromWindowsErrWithFunction(rc, "CreateKey");

  00057	8b c8		 mov	 ecx, eax
  00059	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 1032 : }

  0005e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00062	c3		 ret	 0
$LN1@PyCreateKe:

; 1031 :     return PyHKEY_FromHKEY(retKey);

  00063	48 8b 4c 24 28	 mov	 rcx, QWORD PTR retKey$[rsp]
  00068	e8 00 00 00 00	 call	 PyHKEY_FromHKEY

; 1032 : }

  0006d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00071	c3		 ret	 0
PyCreateKey ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@CALEHHMP@OZ?$HMii?3CreateKeyEx?$AA@	; `string'
PUBLIC	??_C@_06EBPNOMLE@access?$AA@			; `string'
PUBLIC	??_C@_08FINKBBAF@reserved?$AA@			; `string'
PUBLIC	??_C@_07KFOLAEFE@sub_key?$AA@			; `string'
PUBLIC	??_C@_03ICHNJLJF@key?$AA@			; `string'
EXTRN	__imp_RegCreateKeyExW:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCreateKeyEx DD imagerel PyCreateKeyEx
	DD	imagerel PyCreateKeyEx+269
	DD	imagerel $unwind$PyCreateKeyEx
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCreateKeyEx DD 030b01H
	DD	014010bH
	DD	03004H
xdata	ENDS
;	COMDAT ??_C@_0BC@CALEHHMP@OZ?$HMii?3CreateKeyEx?$AA@
CONST	SEGMENT
??_C@_0BC@CALEHHMP@OZ?$HMii?3CreateKeyEx?$AA@ DB 'OZ|ii:CreateKeyEx', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06EBPNOMLE@access?$AA@
CONST	SEGMENT
??_C@_06EBPNOMLE@access?$AA@ DB 'access', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FINKBBAF@reserved?$AA@
CONST	SEGMENT
??_C@_08FINKBBAF@reserved?$AA@ DB 'reserved', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07KFOLAEFE@sub_key?$AA@
CONST	SEGMENT
??_C@_07KFOLAEFE@sub_key?$AA@ DB 'sub_key', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03ICHNJLJF@key?$AA@
CONST	SEGMENT
??_C@_03ICHNJLJF@key?$AA@ DB 'key', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyCreateKeyEx
_TEXT	SEGMENT
reserved$ = 80
key$ = 88
sub_key$ = 96
hKey$ = 104
retKey$ = 112
self$ = 176
args$ = 184
kwargs$ = 192
access$ = 200
PyCreateKeyEx PROC					; COMDAT

; 1036 : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	53		 push	 rbx
  00004	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H

; 1037 :     HKEY hKey;
; 1038 :     PyObject *key;
; 1039 :     wchar_t *sub_key;
; 1040 :     HKEY retKey;
; 1041 :     int reserved = 0;
; 1042 :     REGSAM access = KEY_WRITE;
; 1043 :     long rc;
; 1044 : 
; 1045 :     char *kwlist[] = {"key", "sub_key", "reserved", "access", NULL};

  0000b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03ICHNJLJF@key?$AA@
  00012	49 8b c0	 mov	 rax, r8
  00015	4c 8b d2	 mov	 r10, rdx
  00018	49 89 4b d0	 mov	 QWORD PTR [r11-48], rcx
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07KFOLAEFE@sub_key?$AA@
  00023	33 db		 xor	 ebx, ebx
  00025	49 89 4b d8	 mov	 QWORD PTR [r11-40], rcx
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08FINKBBAF@reserved?$AA@

; 1046 : 
; 1047 :     if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OZ|ii:CreateKeyEx", kwlist,
; 1048 :                                      &key, &sub_key, &reserved, &access))

  00030	4d 8d 4b d0	 lea	 r9, QWORD PTR [r11-48]
  00034	49 89 4b e0	 mov	 QWORD PTR [r11-32], rcx
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06EBPNOMLE@access?$AA@
  0003f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BC@CALEHHMP@OZ?$HMii?3CreateKeyEx?$AA@
  00046	49 89 4b e8	 mov	 QWORD PTR [r11-24], rcx
  0004a	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  0004e	48 8b d0	 mov	 rdx, rax
  00051	49 89 4b 90	 mov	 QWORD PTR [r11-112], rcx
  00055	49 8d 4b a8	 lea	 rcx, QWORD PTR [r11-88]
  00059	89 5c 24 50	 mov	 DWORD PTR reserved$[rsp], ebx
  0005d	49 89 4b 88	 mov	 QWORD PTR [r11-120], rcx
  00061	49 8d 4b b8	 lea	 rcx, QWORD PTR [r11-72]
  00065	41 c7 43 20 06
	00 02 00	 mov	 DWORD PTR [r11+32], 131078 ; 00020006H
  0006d	49 89 4b 80	 mov	 QWORD PTR [r11-128], rcx
  00071	49 8d 4b b0	 lea	 rcx, QWORD PTR [r11-80]
  00075	49 89 5b f0	 mov	 QWORD PTR [r11-16], rbx
  00079	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0007e	49 8b ca	 mov	 rcx, r10
  00081	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00086	85 c0		 test	 eax, eax
  00088	75 0b		 jne	 SHORT $LN3@PyCreateKe@2
$LN6@PyCreateKe@2:

; 1049 :         return NULL;

  0008a	33 c0		 xor	 eax, eax

; 1058 : }

  0008c	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  00093	5b		 pop	 rbx
  00094	c3		 ret	 0
$LN3@PyCreateKe@2:

; 1050 :     if (!PyHKEY_AsHKEY(key, &hKey, FALSE))

  00095	48 8b 4c 24 58	 mov	 rcx, QWORD PTR key$[rsp]
  0009a	48 8d 54 24 68	 lea	 rdx, QWORD PTR hKey$[rsp]
  0009f	45 33 c0	 xor	 r8d, r8d
  000a2	e8 00 00 00 00	 call	 PyHKEY_AsHKEY
  000a7	85 c0		 test	 eax, eax

; 1051 :         return NULL;

  000a9	74 df		 je	 SHORT $LN6@PyCreateKe@2

; 1052 : 
; 1053 :     rc = RegCreateKeyExW(hKey, sub_key, reserved, NULL, (DWORD)NULL,
; 1054 :                          access, NULL, &retKey, NULL);

  000ab	44 8b 44 24 50	 mov	 r8d, DWORD PTR reserved$[rsp]
  000b0	48 8b 54 24 60	 mov	 rdx, QWORD PTR sub_key$[rsp]
  000b5	48 8b 4c 24 68	 mov	 rcx, QWORD PTR hKey$[rsp]
  000ba	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  000bf	48 8d 44 24 70	 lea	 rax, QWORD PTR retKey$[rsp]
  000c4	45 33 c9	 xor	 r9d, r9d
  000c7	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  000cc	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR access$[rsp]
  000d3	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  000d8	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000dc	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  000e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegCreateKeyExW

; 1055 :     if (rc != ERROR_SUCCESS)

  000e6	85 c0		 test	 eax, eax
  000e8	74 10		 je	 SHORT $LN1@PyCreateKe@2

; 1056 :         return PyErr_SetFromWindowsErrWithFunction(rc, "CreateKeyEx");

  000ea	8b c8		 mov	 ecx, eax
  000ec	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 1058 : }

  000f1	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  000f8	5b		 pop	 rbx
  000f9	c3		 ret	 0
$LN1@PyCreateKe@2:

; 1057 :     return PyHKEY_FromHKEY(retKey);

  000fa	48 8b 4c 24 70	 mov	 rcx, QWORD PTR retKey$[rsp]
  000ff	e8 00 00 00 00	 call	 PyHKEY_FromHKEY

; 1058 : }

  00104	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  0010b	5b		 pop	 rbx
  0010c	c3		 ret	 0
PyCreateKeyEx ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@POKAAOLK@Ou?3DeleteKey?$AA@		; `string'
EXTRN	__imp_RegDeleteKeyW:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyDeleteKey DD imagerel PyDeleteKey
	DD	imagerel PyDeleteKey+175
	DD	imagerel $unwind$PyDeleteKey
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDeleteKey DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_0N@POKAAOLK@Ou?3DeleteKey?$AA@
CONST	SEGMENT
??_C@_0N@POKAAOLK@Ou?3DeleteKey?$AA@ DB 'Ou:DeleteKey', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\pc\winreg.c
CONST	ENDS
;	COMDAT PyDeleteKey
_TEXT	SEGMENT
hKey$ = 48
self$ = 80
args$ = 88
obKey$ = 96
subKey$ = 104
PyDeleteKey PROC					; COMDAT

; 1062 : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1063 :     HKEY hKey;
; 1064 :     PyObject *obKey;
; 1065 :     wchar_t *subKey;
; 1066 :     long rc;
; 1067 :     if (!PyArg_ParseTuple(args, "Ou:DeleteKey", &obKey, &subKey))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 4c 24 68	 lea	 r9, QWORD PTR subKey$[rsp]
  0000c	4c 8d 44 24 60	 lea	 r8, QWORD PTR obKey$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@POKAAOLK@Ou?3DeleteKey?$AA@
  00018	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0001d	85 c0		 test	 eax, eax
  0001f	75 07		 jne	 SHORT $LN3@PyDeleteKe
$LN10@PyDeleteKe:

; 1068 :         return NULL;

  00021	33 c0		 xor	 eax, eax

; 1076 : }

  00023	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00027	c3		 ret	 0
$LN3@PyDeleteKe:

; 1069 :     if (!PyHKEY_AsHKEY(obKey, &hKey, FALSE))

  00028	48 8b 4c 24 60	 mov	 rcx, QWORD PTR obKey$[rsp]
  0002d	48 8d 54 24 30	 lea	 rdx, QWORD PTR hKey$[rsp]
  00032	45 33 c0	 xor	 r8d, r8d
  00035	e8 00 00 00 00	 call	 PyHKEY_AsHKEY
  0003a	85 c0		 test	 eax, eax

; 1070 :         return NULL;

  0003c	74 e3		 je	 SHORT $LN10@PyDeleteKe

; 1071 :     rc = RegDeleteKeyW(hKey, subKey );

  0003e	48 8b 54 24 68	 mov	 rdx, QWORD PTR subKey$[rsp]
  00043	48 8b 4c 24 30	 mov	 rcx, QWORD PTR hKey$[rsp]
  00048	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegDeleteKeyW

; 1072 :     if (rc != ERROR_SUCCESS)

  0004e	85 c0		 test	 eax, eax
  00050	74 0c		 je	 SHORT $LN1@PyDeleteKe

; 1073 :         return PyErr_SetFromWindowsErrWithFunction(rc, "RegDeleteKey");

  00052	8b c8		 mov	 ecx, eax
  00054	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 1076 : }

  00059	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005d	c3		 ret	 0
$LN1@PyDeleteKe:

; 1074 :     Py_INCREF(Py_None);

  0005e	e8 00 00 00 00	 call	 _Py_PXCTX
  00063	85 c0		 test	 eax, eax
  00065	75 3c		 jne	 SHORT $LN7@PyDeleteKe
  00067	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  0006e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00075	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0007c	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00082	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0008a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0008f	85 c0		 test	 eax, eax
  00091	75 09		 jne	 SHORT $LN6@PyDeleteKe
  00093	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0009a	74 07		 je	 SHORT $LN7@PyDeleteKe
$LN6@PyDeleteKe:
  0009c	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN7@PyDeleteKe:

; 1075 :     return Py_None;

  000a3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1076 : }

  000aa	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000ae	c3		 ret	 0
PyDeleteKey ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@ODEKPPJP@not?5implemented?5on?5this?5platform@ ; `string'
PUBLIC	??_C@_0BA@LILAPHGE@RegDeleteKeyExW?$AA@		; `string'
PUBLIC	??_C@_1BK@JHLNAEJL@?$AAa?$AAd?$AAv?$AAa?$AAp?$AAi?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BC@JKDJDEOB@Ou?$HMii?3DeleteKeyEx?$AA@	; `string'
EXTRN	PyExc_NotImplementedError:QWORD
EXTRN	__imp_GetProcAddress:PROC
EXTRN	__imp_GetModuleHandleW:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDeleteKeyEx DD imagerel PyDeleteKeyEx
	DD	imagerel PyDeleteKeyEx+175
	DD	imagerel $unwind$PyDeleteKeyEx
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyDeleteKeyEx DD imagerel PyDeleteKeyEx+175
	DD	imagerel PyDeleteKeyEx+222
	DD	imagerel $chain$0$PyDeleteKeyEx
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyDeleteKeyEx DD imagerel PyDeleteKeyEx+222
	DD	imagerel PyDeleteKeyEx+285
	DD	imagerel $chain$1$PyDeleteKeyEx
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyDeleteKeyEx DD imagerel PyDeleteKeyEx+285
	DD	imagerel PyDeleteKeyEx+308
	DD	imagerel $chain$2$PyDeleteKeyEx
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyDeleteKeyEx DD imagerel PyDeleteKeyEx+308
	DD	imagerel PyDeleteKeyEx+343
	DD	imagerel $chain$4$PyDeleteKeyEx
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$PyDeleteKeyEx DD imagerel PyDeleteKeyEx+343
	DD	imagerel PyDeleteKeyEx+380
	DD	imagerel $chain$6$PyDeleteKeyEx
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$PyDeleteKeyEx DD 020021H
	DD	0127400H
	DD	imagerel PyDeleteKeyEx
	DD	imagerel PyDeleteKeyEx+175
	DD	imagerel $unwind$PyDeleteKeyEx
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyDeleteKeyEx DD 020021H
	DD	0127400H
	DD	imagerel PyDeleteKeyEx
	DD	imagerel PyDeleteKeyEx+175
	DD	imagerel $unwind$PyDeleteKeyEx
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyDeleteKeyEx DD 021H
	DD	imagerel PyDeleteKeyEx+175
	DD	imagerel PyDeleteKeyEx+222
	DD	imagerel $chain$0$PyDeleteKeyEx
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyDeleteKeyEx DD 020821H
	DD	0143408H
	DD	imagerel PyDeleteKeyEx+175
	DD	imagerel PyDeleteKeyEx+222
	DD	imagerel $chain$0$PyDeleteKeyEx
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyDeleteKeyEx DD 020821H
	DD	0127408H
	DD	imagerel PyDeleteKeyEx
	DD	imagerel PyDeleteKeyEx+175
	DD	imagerel $unwind$PyDeleteKeyEx
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDeleteKeyEx DD 020a01H
	DD	013010aH
xdata	ENDS
;	COMDAT ??_C@_0CB@ODEKPPJP@not?5implemented?5on?5this?5platform@
CONST	SEGMENT
??_C@_0CB@ODEKPPJP@not?5implemented?5on?5this?5platform@ DB 'not implemen'
	DB	'ted on this platform', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LILAPHGE@RegDeleteKeyExW?$AA@
CONST	SEGMENT
??_C@_0BA@LILAPHGE@RegDeleteKeyExW?$AA@ DB 'RegDeleteKeyExW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@JHLNAEJL@?$AAa?$AAd?$AAv?$AAa?$AAp?$AAi?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@JHLNAEJL@?$AAa?$AAd?$AAv?$AAa?$AAp?$AAi?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@ DB 'a'
	DB	00H, 'd', 00H, 'v', 00H, 'a', 00H, 'p', 00H, 'i', 00H, '3', 00H
	DB	'2', 00H, '.', 00H, 'd', 00H, 'l', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JKDJDEOB@Ou?$HMii?3DeleteKeyEx?$AA@
CONST	SEGMENT
??_C@_0BC@JKDJDEOB@Ou?$HMii?3DeleteKeyEx?$AA@ DB 'Ou|ii:DeleteKeyEx', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyDeleteKeyEx
_TEXT	SEGMENT
access$ = 64
key$ = 72
sub_key$ = 80
hKey$ = 88
self$ = 160
args$ = 168
kwargs$ = 176
reserved$ = 184
PyDeleteKeyEx PROC					; COMDAT

; 1080 : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H
  0000a	4c 8b d2	 mov	 r10, rdx

; 1081 :     HKEY hKey;
; 1082 :     PyObject *key;
; 1083 :     HMODULE hMod;
; 1084 :     typedef LONG (WINAPI *RDKEFunc)(HKEY, const wchar_t*, REGSAM, int);
; 1085 :     RDKEFunc pfn = NULL;
; 1086 :     wchar_t *sub_key;
; 1087 :     long rc;
; 1088 :     int reserved = 0;

  0000d	33 d2		 xor	 edx, edx

; 1089 :     REGSAM access = KEY_WOW64_64KEY;
; 1090 : 
; 1091 :     char *kwlist[] = {"key", "sub_key", "access", "reserved", NULL};

  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03ICHNJLJF@key?$AA@
  00016	49 89 4b c8	 mov	 QWORD PTR [r11-56], rcx
  0001a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07KFOLAEFE@sub_key?$AA@
  00021	49 8b c0	 mov	 rax, r8
  00024	49 89 4b d0	 mov	 QWORD PTR [r11-48], rcx
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06EBPNOMLE@access?$AA@
  0002f	41 89 53 20	 mov	 DWORD PTR [r11+32], edx
  00033	49 89 4b d8	 mov	 QWORD PTR [r11-40], rcx
  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08FINKBBAF@reserved?$AA@
  0003e	49 89 53 e8	 mov	 QWORD PTR [r11-24], rdx
  00042	49 89 4b e0	 mov	 QWORD PTR [r11-32], rcx

; 1092 :     if (!PyArg_ParseTupleAndKeywords(args, kwargs, "Ou|ii:DeleteKeyEx", kwlist,
; 1093 :                                      &key, &sub_key, &access, &reserved))

  00046	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  0004a	4d 8d 4b c8	 lea	 r9, QWORD PTR [r11-56]
  0004e	49 89 4b a0	 mov	 QWORD PTR [r11-96], rcx
  00052	49 8d 4b a8	 lea	 rcx, QWORD PTR [r11-88]
  00056	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BC@JKDJDEOB@Ou?$HMii?3DeleteKeyEx?$AA@
  0005d	49 89 4b 98	 mov	 QWORD PTR [r11-104], rcx
  00061	49 8d 4b b8	 lea	 rcx, QWORD PTR [r11-72]
  00065	48 8b d0	 mov	 rdx, rax
  00068	49 89 4b 90	 mov	 QWORD PTR [r11-112], rcx
  0006c	49 8d 4b b0	 lea	 rcx, QWORD PTR [r11-80]
  00070	c7 44 24 40 00
	01 00 00	 mov	 DWORD PTR access$[rsp], 256 ; 00000100H
  00078	49 89 4b 88	 mov	 QWORD PTR [r11-120], rcx
  0007c	49 8b ca	 mov	 rcx, r10
  0007f	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00084	85 c0		 test	 eax, eax
  00086	75 0a		 jne	 SHORT $LN5@PyDeleteKe@2
$LN10@PyDeleteKe@2:

; 1094 :         return NULL;

  00088	33 c0		 xor	 eax, eax

; 1117 : }

  0008a	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00091	c3		 ret	 0
$LN5@PyDeleteKe@2:

; 1095 :     if (!PyHKEY_AsHKEY(key, &hKey, FALSE))

  00092	48 8b 4c 24 48	 mov	 rcx, QWORD PTR key$[rsp]
  00097	48 8d 54 24 58	 lea	 rdx, QWORD PTR hKey$[rsp]
  0009c	45 33 c0	 xor	 r8d, r8d
  0009f	e8 00 00 00 00	 call	 PyHKEY_AsHKEY
  000a4	85 c0		 test	 eax, eax

; 1096 :         return NULL;

  000a6	74 e0		 je	 SHORT $LN10@PyDeleteKe@2

; 1097 : 
; 1098 :     /* Only available on 64bit platforms, so we must load it
; 1099 :        dynamically. */
; 1100 :     hMod = GetModuleHandleW(L"advapi32.dll");

  000a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@JHLNAEJL@?$AAa?$AAd?$AAv?$AAa?$AAp?$AAi?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
  000af	48 89 bc 24 90
	00 00 00	 mov	 QWORD PTR [rsp+144], rdi
  000b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetModuleHandleW

; 1101 :     if (hMod)

  000bd	48 85 c0	 test	 rax, rax
  000c0	0f 84 91 00 00
	00		 je	 $LN8@PyDeleteKe@2

; 1102 :         pfn = (RDKEFunc)GetProcAddress(hMod,
; 1103 :                                                                    "RegDeleteKeyExW");

  000c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@LILAPHGE@RegDeleteKeyExW?$AA@
  000cd	48 8b c8	 mov	 rcx, rax
  000d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  000d6	48 8b f8	 mov	 rdi, rax

; 1104 :     if (!pfn) {

  000d9	48 85 c0	 test	 rax, rax
  000dc	74 79		 je	 SHORT $LN8@PyDeleteKe@2

; 1108 :     }
; 1109 :     Py_BEGIN_ALLOW_THREADS

  000de	48 89 9c 24 a0
	00 00 00	 mov	 QWORD PTR [rsp+160], rbx
  000e6	e8 00 00 00 00	 call	 PyEval_SaveThread

; 1110 :     rc = (*pfn)(hKey, sub_key, access, reserved);

  000eb	44 8b 8c 24 b8
	00 00 00	 mov	 r9d, DWORD PTR reserved$[rsp]
  000f3	44 8b 44 24 40	 mov	 r8d, DWORD PTR access$[rsp]
  000f8	48 8b 54 24 50	 mov	 rdx, QWORD PTR sub_key$[rsp]
  000fd	48 8b 4c 24 58	 mov	 rcx, QWORD PTR hKey$[rsp]
  00102	48 8b d8	 mov	 rbx, rax
  00105	ff d7		 call	 rdi

; 1111 :     Py_END_ALLOW_THREADS

  00107	48 8b cb	 mov	 rcx, rbx
  0010a	8b f8		 mov	 edi, eax
  0010c	e8 00 00 00 00	 call	 PyEval_RestoreThread
  00111	48 8b 9c 24 a0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+160]

; 1112 : 
; 1113 :     if (rc != ERROR_SUCCESS)

  00119	85 ff		 test	 edi, edi
  0011b	74 17		 je	 SHORT $LN1@PyDeleteKe@2

; 1114 :         return PyErr_SetFromWindowsErrWithFunction(rc, "RegDeleteKeyEx");

  0011d	8b cf		 mov	 ecx, edi
  0011f	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00124	48 8b bc 24 90
	00 00 00	 mov	 rdi, QWORD PTR [rsp+144]

; 1117 : }

  0012c	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00133	c3		 ret	 0
$LN1@PyDeleteKe@2:

; 1115 :     Py_INCREF(Py_None);

  00134	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0013b	e8 00 00 00 00	 call	 _Py_IncRef
  00140	48 8b bc 24 90
	00 00 00	 mov	 rdi, QWORD PTR [rsp+144]

; 1116 :     return Py_None;

  00148	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1117 : }

  0014f	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00156	c3		 ret	 0
$LN8@PyDeleteKe@2:

; 1105 :         PyErr_SetString(PyExc_NotImplementedError,
; 1106 :                                         "not implemented on this platform");

  00157	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_NotImplementedError
  0015e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@ODEKPPJP@not?5implemented?5on?5this?5platform@
  00165	e8 00 00 00 00	 call	 PyErr_SetString
  0016a	48 8b bc 24 90
	00 00 00	 mov	 rdi, QWORD PTR [rsp+144]

; 1107 :         return NULL;

  00172	33 c0		 xor	 eax, eax

; 1117 : }

  00174	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0017b	c3		 ret	 0
PyDeleteKeyEx ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@FNNHMMK@OZ?3DeleteValue?$AA@		; `string'
EXTRN	__imp_RegDeleteValueW:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyDeleteValue DD imagerel PyDeleteValue
	DD	imagerel PyDeleteValue+62
	DD	imagerel $unwind$PyDeleteValue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyDeleteValue DD imagerel PyDeleteValue+62
	DD	imagerel PyDeleteValue+115
	DD	imagerel $chain$1$PyDeleteValue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyDeleteValue DD imagerel PyDeleteValue+115
	DD	imagerel PyDeleteValue+132
	DD	imagerel $chain$2$PyDeleteValue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyDeleteValue DD imagerel PyDeleteValue+132
	DD	imagerel PyDeleteValue+218
	DD	imagerel $chain$4$PyDeleteValue
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyDeleteValue DD 020021H
	DD	087400H
	DD	imagerel PyDeleteValue
	DD	imagerel PyDeleteValue+62
	DD	imagerel $unwind$PyDeleteValue
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyDeleteValue DD 020021H
	DD	087400H
	DD	imagerel PyDeleteValue
	DD	imagerel PyDeleteValue+62
	DD	imagerel $unwind$PyDeleteValue
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyDeleteValue DD 040a21H
	DD	08740aH
	DD	0a3405H
	DD	imagerel PyDeleteValue
	DD	imagerel PyDeleteValue+62
	DD	imagerel $unwind$PyDeleteValue
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDeleteValue DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_0P@FNNHMMK@OZ?3DeleteValue?$AA@
CONST	SEGMENT
??_C@_0P@FNNHMMK@OZ?3DeleteValue?$AA@ DB 'OZ:DeleteValue', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\pc\winreg.c
CONST	ENDS
;	COMDAT PyDeleteValue
_TEXT	SEGMENT
hKey$ = 48
self$ = 80
args$ = 88
obKey$ = 96
subKey$ = 104
PyDeleteValue PROC					; COMDAT

; 1121 : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1122 :     HKEY hKey;
; 1123 :     PyObject *obKey;
; 1124 :     wchar_t *subKey;
; 1125 :     long rc;
; 1126 :     if (!PyArg_ParseTuple(args, "OZ:DeleteValue", &obKey, &subKey))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 4c 24 68	 lea	 r9, QWORD PTR subKey$[rsp]
  0000c	4c 8d 44 24 60	 lea	 r8, QWORD PTR obKey$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@FNNHMMK@OZ?3DeleteValue?$AA@
  00018	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0001d	85 c0		 test	 eax, eax
  0001f	75 07		 jne	 SHORT $LN3@PyDeleteVa
$LN11@PyDeleteVa:

; 1127 :         return NULL;

  00021	33 c0		 xor	 eax, eax

; 1138 : }

  00023	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00027	c3		 ret	 0
$LN3@PyDeleteVa:

; 1128 :     if (!PyHKEY_AsHKEY(obKey, &hKey, FALSE))

  00028	48 8b 4c 24 60	 mov	 rcx, QWORD PTR obKey$[rsp]
  0002d	48 8d 54 24 30	 lea	 rdx, QWORD PTR hKey$[rsp]
  00032	45 33 c0	 xor	 r8d, r8d
  00035	e8 00 00 00 00	 call	 PyHKEY_AsHKEY
  0003a	85 c0		 test	 eax, eax

; 1129 :         return NULL;

  0003c	74 e3		 je	 SHORT $LN11@PyDeleteVa

; 1130 :     Py_BEGIN_ALLOW_THREADS

  0003e	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  00043	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  00048	e8 00 00 00 00	 call	 PyEval_SaveThread

; 1131 :     rc = RegDeleteValueW(hKey, subKey);

  0004d	48 8b 54 24 68	 mov	 rdx, QWORD PTR subKey$[rsp]
  00052	48 8b 4c 24 30	 mov	 rcx, QWORD PTR hKey$[rsp]
  00057	48 8b d8	 mov	 rbx, rax
  0005a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegDeleteValueW

; 1132 :     Py_END_ALLOW_THREADS

  00060	48 8b cb	 mov	 rcx, rbx
  00063	8b f8		 mov	 edi, eax
  00065	e8 00 00 00 00	 call	 PyEval_RestoreThread
  0006a	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]

; 1133 :     if (rc !=ERROR_SUCCESS)

  0006f	85 ff		 test	 edi, edi
  00071	74 11		 je	 SHORT $LN1@PyDeleteVa

; 1134 :         return PyErr_SetFromWindowsErrWithFunction(rc,
; 1135 :                                                    "RegDeleteValue");

  00073	8b cf		 mov	 ecx, edi
  00075	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  0007a	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 1138 : }

  0007f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00083	c3		 ret	 0
$LN1@PyDeleteVa:

; 1136 :     Py_INCREF(Py_None);

  00084	e8 00 00 00 00	 call	 _Py_PXCTX
  00089	85 c0		 test	 eax, eax
  0008b	75 3c		 jne	 SHORT $LN7@PyDeleteVa
  0008d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00094	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0009b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000a2	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000a8	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000b0	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b5	85 c0		 test	 eax, eax
  000b7	75 09		 jne	 SHORT $LN6@PyDeleteVa
  000b9	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  000c0	74 07		 je	 SHORT $LN7@PyDeleteVa
$LN6@PyDeleteVa:
  000c2	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN7@PyDeleteVa:

; 1137 :     return Py_None;

  000c9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000d0	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 1138 : }

  000d5	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000d9	c3		 ret	 0
PyDeleteValue ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DLGIAGDL@Oi?3EnumKey?$AA@		; `string'
EXTRN	__imp_RegEnumKeyExW:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyEnumKey DD imagerel PyEnumKey
	DD	imagerel PyEnumKey+77
	DD	imagerel $unwind$PyEnumKey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyEnumKey DD imagerel PyEnumKey+77
	DD	imagerel PyEnumKey+176
	DD	imagerel $chain$1$PyEnumKey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyEnumKey DD imagerel PyEnumKey+176
	DD	imagerel PyEnumKey+199
	DD	imagerel $chain$2$PyEnumKey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyEnumKey DD imagerel PyEnumKey+199
	DD	imagerel PyEnumKey+232
	DD	imagerel $chain$4$PyEnumKey
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyEnumKey DD 020021H
	DD	04c7400H
	DD	imagerel PyEnumKey
	DD	imagerel PyEnumKey+77
	DD	imagerel $unwind$PyEnumKey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyEnumKey DD 020021H
	DD	04c7400H
	DD	imagerel PyEnumKey
	DD	imagerel PyEnumKey+77
	DD	imagerel $unwind$PyEnumKey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyEnumKey DD 041021H
	DD	04c7410H
	DD	04e3408H
	DD	imagerel PyEnumKey
	DD	imagerel PyEnumKey+77
	DD	imagerel $unwind$PyEnumKey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyEnumKey DD 020a01H
	DD	04d010aH
xdata	ENDS
;	COMDAT ??_C@_0L@DLGIAGDL@Oi?3EnumKey?$AA@
CONST	SEGMENT
??_C@_0L@DLGIAGDL@Oi?3EnumKey?$AA@ DB 'Oi:EnumKey', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyEnumKey
_TEXT	SEGMENT
hKey$ = 64
obKey$ = 72
tmpbuf$ = 80
self$ = 624
args$ = 632
len$ = 640
index$ = 648
PyEnumKey PROC						; COMDAT

; 1142 : {

  00000	48 8b c4	 mov	 rax, rsp
  00003	48 81 ec 68 02
	00 00		 sub	 rsp, 616		; 00000268H

; 1143 :     HKEY hKey;
; 1144 :     PyObject *obKey;
; 1145 :     int index;
; 1146 :     long rc;
; 1147 :     PyObject *retStr;
; 1148 : 
; 1149 :     /* The Windows docs claim that the max key name length is 255
; 1150 :      * characters, plus a terminating nul character.  However,
; 1151 :      * empirical testing demonstrates that it is possible to
; 1152 :      * create a 256 character key that is missing the terminating
; 1153 :      * nul.  RegEnumKeyEx requires a 257 character buffer to
; 1154 :      * retrieve such a key name. */
; 1155 :     wchar_t tmpbuf[257];
; 1156 :     DWORD len = sizeof(tmpbuf)/sizeof(wchar_t); /* includes NULL terminator */
; 1157 : 
; 1158 :     if (!PyArg_ParseTuple(args, "Oi:EnumKey", &obKey, &index))

  0000a	48 8b ca	 mov	 rcx, rdx
  0000d	4c 8d 48 20	 lea	 r9, QWORD PTR [rax+32]
  00011	4c 8d 44 24 48	 lea	 r8, QWORD PTR obKey$[rsp]
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@DLGIAGDL@Oi?3EnumKey?$AA@
  0001d	c7 40 18 01 01
	00 00		 mov	 DWORD PTR [rax+24], 257	; 00000101H
  00024	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00029	85 c0		 test	 eax, eax
  0002b	75 0a		 jne	 SHORT $LN3@PyEnumKey
$LN7@PyEnumKey:

; 1159 :         return NULL;

  0002d	33 c0		 xor	 eax, eax

; 1171 : }

  0002f	48 81 c4 68 02
	00 00		 add	 rsp, 616		; 00000268H
  00036	c3		 ret	 0
$LN3@PyEnumKey:

; 1160 :     if (!PyHKEY_AsHKEY(obKey, &hKey, FALSE))

  00037	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obKey$[rsp]
  0003c	48 8d 54 24 40	 lea	 rdx, QWORD PTR hKey$[rsp]
  00041	45 33 c0	 xor	 r8d, r8d
  00044	e8 00 00 00 00	 call	 PyHKEY_AsHKEY
  00049	85 c0		 test	 eax, eax

; 1161 :         return NULL;

  0004b	74 e0		 je	 SHORT $LN7@PyEnumKey

; 1162 : 
; 1163 :     Py_BEGIN_ALLOW_THREADS

  0004d	48 89 9c 24 70
	02 00 00	 mov	 QWORD PTR [rsp+624], rbx
  00055	48 89 bc 24 60
	02 00 00	 mov	 QWORD PTR [rsp+608], rdi
  0005d	e8 00 00 00 00	 call	 PyEval_SaveThread

; 1164 :     rc = RegEnumKeyExW(hKey, index, tmpbuf, &len, NULL, NULL, NULL, NULL);

  00062	8b 94 24 88 02
	00 00		 mov	 edx, DWORD PTR index$[rsp]
  00069	48 8b 4c 24 40	 mov	 rcx, QWORD PTR hKey$[rsp]
  0006e	48 8b d8	 mov	 rbx, rax
  00071	33 c0		 xor	 eax, eax
  00073	4c 8d 8c 24 80
	02 00 00	 lea	 r9, QWORD PTR len$[rsp]
  0007b	4c 8d 44 24 50	 lea	 r8, QWORD PTR tmpbuf$[rsp]
  00080	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00085	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0008a	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0008f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00094	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegEnumKeyExW

; 1165 :     Py_END_ALLOW_THREADS

  0009a	48 8b cb	 mov	 rcx, rbx
  0009d	8b f8		 mov	 edi, eax
  0009f	e8 00 00 00 00	 call	 PyEval_RestoreThread
  000a4	48 8b 9c 24 70
	02 00 00	 mov	 rbx, QWORD PTR [rsp+624]

; 1166 :     if (rc != ERROR_SUCCESS)

  000ac	85 ff		 test	 edi, edi
  000ae	74 17		 je	 SHORT $LN1@PyEnumKey

; 1167 :         return PyErr_SetFromWindowsErrWithFunction(rc, "RegEnumKeyEx");

  000b0	8b cf		 mov	 ecx, edi
  000b2	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  000b7	48 8b bc 24 60
	02 00 00	 mov	 rdi, QWORD PTR [rsp+608]

; 1171 : }

  000bf	48 81 c4 68 02
	00 00		 add	 rsp, 616		; 00000268H
  000c6	c3		 ret	 0
$LN1@PyEnumKey:

; 1168 : 
; 1169 :     retStr = PyUnicode_FromWideChar(tmpbuf, len);
; 1170 :     return retStr;  /* can be NULL */

  000c7	8b 94 24 80 02
	00 00		 mov	 edx, DWORD PTR len$[rsp]
  000ce	48 8d 4c 24 50	 lea	 rcx, QWORD PTR tmpbuf$[rsp]
  000d3	e8 00 00 00 00	 call	 PyUnicode_FromWideChar
  000d8	48 8b bc 24 60
	02 00 00	 mov	 rdi, QWORD PTR [rsp+608]

; 1171 : }

  000e0	48 81 c4 68 02
	00 00		 add	 rsp, 616		; 00000268H
  000e7	c3		 ret	 0
PyEnumKey ENDP
_TEXT	ENDS
PUBLIC	??_C@_03ENKDGKFO@uOi?$AA@			; `string'
PUBLIC	??_C@_0N@LCGOFEBE@Oi?3EnumValue?$AA@		; `string'
EXTRN	Py_BuildValue:PROC
EXTRN	PyMem_Realloc:PROC
EXTRN	__imp_RegEnumValueW:PROC
EXTRN	PyMem_Free:PROC
EXTRN	PyMem_Malloc:PROC
EXTRN	__imp_RegQueryInfoKeyW:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyEnumValue DD imagerel PyEnumValue
	DD	imagerel PyEnumValue+175
	DD	imagerel $unwind$PyEnumValue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyEnumValue DD imagerel PyEnumValue+175
	DD	imagerel PyEnumValue+250
	DD	imagerel $chain$4$PyEnumValue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$PyEnumValue DD imagerel PyEnumValue+250
	DD	imagerel PyEnumValue+289
	DD	imagerel $chain$5$PyEnumValue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$PyEnumValue DD imagerel PyEnumValue+289
	DD	imagerel PyEnumValue+586
	DD	imagerel $chain$6$PyEnumValue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$PyEnumValue DD imagerel PyEnumValue+586
	DD	imagerel PyEnumValue+594
	DD	imagerel $chain$7$PyEnumValue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$PyEnumValue DD imagerel PyEnumValue+594
	DD	imagerel PyEnumValue+618
	DD	imagerel $chain$8$PyEnumValue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$PyEnumValue DD imagerel PyEnumValue+618
	DD	imagerel PyEnumValue+643
	DD	imagerel $chain$9$PyEnumValue
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$PyEnumValue DD 021H
	DD	imagerel PyEnumValue
	DD	imagerel PyEnumValue+175
	DD	imagerel $unwind$PyEnumValue
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$PyEnumValue DD 021H
	DD	imagerel PyEnumValue+175
	DD	imagerel PyEnumValue+250
	DD	imagerel $chain$4$PyEnumValue
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$PyEnumValue DD 021H
	DD	imagerel PyEnumValue+250
	DD	imagerel PyEnumValue+289
	DD	imagerel $chain$5$PyEnumValue
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$PyEnumValue DD 020821H
	DD	0183408H
	DD	imagerel PyEnumValue+250
	DD	imagerel PyEnumValue+289
	DD	imagerel $chain$5$PyEnumValue
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$PyEnumValue DD 020821H
	DD	013c408H
	DD	imagerel PyEnumValue+175
	DD	imagerel PyEnumValue+250
	DD	imagerel $chain$4$PyEnumValue
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyEnumValue DD 061b21H
	DD	010f41bH
	DD	011e413H
	DD	0156408H
	DD	imagerel PyEnumValue
	DD	imagerel PyEnumValue+175
	DD	imagerel $unwind$PyEnumValue
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyEnumValue DD 077101H
	DD	012d471H
	DD	0147450H
	DD	016010eH
	DD	05002H
xdata	ENDS
;	COMDAT ??_C@_03ENKDGKFO@uOi?$AA@
CONST	SEGMENT
??_C@_03ENKDGKFO@uOi?$AA@ DB 'uOi', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LCGOFEBE@Oi?3EnumValue?$AA@
CONST	SEGMENT
??_C@_0N@LCGOFEBE@Oi?3EnumValue?$AA@ DB 'Oi:EnumValue', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyEnumValue
_TEXT	SEGMENT
typ$ = 96
index$ = 100
hKey$ = 104
obKey$ = 112
tv239 = 120
self$ = 192
args$ = 200
retDataSize$ = 208
retValueSize$ = 216
PyEnumValue PROC					; COMDAT

; 1175 : {

  00000	40 55		 push	 rbp
  00002	48 8d 6c 24 a9	 lea	 rbp, QWORD PTR [rsp-87]
  00007	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H

; 1176 :     HKEY hKey;
; 1177 :     PyObject *obKey;
; 1178 :     int index;
; 1179 :     long rc;
; 1180 :     wchar_t *retValueBuf;
; 1181 :     BYTE *tmpBuf;
; 1182 :     BYTE *retDataBuf;
; 1183 :     DWORD retValueSize, bufValueSize;
; 1184 :     DWORD retDataSize, bufDataSize;
; 1185 :     DWORD typ;
; 1186 :     PyObject *obData;
; 1187 :     PyObject *retVal;
; 1188 : 
; 1189 :     if (!PyArg_ParseTuple(args, "Oi:EnumValue", &obKey, &index))

  0000e	48 8b ca	 mov	 rcx, rdx
  00011	4c 8d 4d 0b	 lea	 r9, QWORD PTR index$[rbp-89]
  00015	4c 8d 45 17	 lea	 r8, QWORD PTR obKey$[rbp-89]
  00019	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@LCGOFEBE@Oi?3EnumValue?$AA@
  00020	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00025	85 c0		 test	 eax, eax
  00027	75 0b		 jne	 SHORT $LN11@PyEnumValu
$LN25@PyEnumValu:

; 1190 :         return NULL;

  00029	33 c0		 xor	 eax, eax

; 1256 : }

  0002b	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  00032	5d		 pop	 rbp
  00033	c3		 ret	 0
$LN11@PyEnumValu:

; 1191 :     if (!PyHKEY_AsHKEY(obKey, &hKey, FALSE))

  00034	48 8b 4d 17	 mov	 rcx, QWORD PTR obKey$[rbp-89]
  00038	48 8d 55 0f	 lea	 rdx, QWORD PTR hKey$[rbp-89]
  0003c	45 33 c0	 xor	 r8d, r8d
  0003f	e8 00 00 00 00	 call	 PyHKEY_AsHKEY
  00044	85 c0		 test	 eax, eax

; 1192 :         return NULL;

  00046	74 e1		 je	 SHORT $LN25@PyEnumValu

; 1193 : 
; 1194 :     if ((rc = RegQueryInfoKeyW(hKey, NULL, NULL, NULL, NULL, NULL, NULL,
; 1195 :                               NULL,
; 1196 :                               &retValueSize, &retDataSize, NULL, NULL))
; 1197 :         != ERROR_SUCCESS)

  00048	48 89 bc 24 a0
	00 00 00	 mov	 QWORD PTR [rsp+160], rdi
  00050	33 ff		 xor	 edi, edi
  00052	48 8d 45 77	 lea	 rax, QWORD PTR retDataSize$[rbp-89]
  00056	48 89 7c 24 58	 mov	 QWORD PTR [rsp+88], rdi
  0005b	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  00060	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00065	48 8d 45 7f	 lea	 rax, QWORD PTR retValueSize$[rbp-89]
  00069	4c 89 ac 24 90
	00 00 00	 mov	 QWORD PTR [rsp+144], r13
  00071	4c 8b 6d 0f	 mov	 r13, QWORD PTR hKey$[rbp-89]
  00075	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  0007a	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  0007f	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  00084	45 33 c9	 xor	 r9d, r9d
  00087	45 33 c0	 xor	 r8d, r8d
  0008a	33 d2		 xor	 edx, edx
  0008c	49 8b cd	 mov	 rcx, r13
  0008f	48 89 7c 24 28	 mov	 QWORD PTR [rsp+40], rdi
  00094	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00099	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegQueryInfoKeyW
  0009f	85 c0		 test	 eax, eax
  000a1	74 0c		 je	 SHORT $LN9@PyEnumValu

; 1198 :         return PyErr_SetFromWindowsErrWithFunction(rc,
; 1199 :                                                    "RegQueryInfoKey");

  000a3	8b c8		 mov	 ecx, eax
  000a5	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  000aa	e9 bb 01 00 00	 jmp	 $LN20@PyEnumValu
$LN9@PyEnumValu:
  000af	48 89 b4 24 a8
	00 00 00	 mov	 QWORD PTR [rsp+168], rsi

; 1200 :     ++retValueSize;    /* include null terminators */
; 1201 :     ++retDataSize;

  000b7	8b 75 77	 mov	 esi, DWORD PTR retDataSize$[rbp-89]
  000ba	4c 89 b4 24 88
	00 00 00	 mov	 QWORD PTR [rsp+136], r14
  000c2	4c 89 bc 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], r15
  000ca	44 8b 7d 7f	 mov	 r15d, DWORD PTR retValueSize$[rbp-89]
  000ce	ff c6		 inc	 esi
  000d0	41 ff c7	 inc	 r15d
  000d3	89 75 77	 mov	 DWORD PTR retDataSize$[rbp-89], esi

; 1202 :     bufDataSize = retDataSize;
; 1203 :     bufValueSize = retValueSize;
; 1204 :     retValueBuf = (wchar_t *)PyMem_Malloc(sizeof(wchar_t) * retValueSize);

  000d6	41 8b cf	 mov	 ecx, r15d
  000d9	44 89 7d 7f	 mov	 DWORD PTR retValueSize$[rbp-89], r15d
  000dd	48 03 c9	 add	 rcx, rcx
  000e0	e8 00 00 00 00	 call	 PyMem_Malloc
  000e5	4c 8b f0	 mov	 r14, rax

; 1205 :     if (retValueBuf == NULL)

  000e8	48 85 c0	 test	 rax, rax
  000eb	75 0a		 jne	 SHORT $LN8@PyEnumValu

; 1206 :         return PyErr_NoMemory();

  000ed	e8 00 00 00 00	 call	 PyErr_NoMemory
  000f2	e9 5b 01 00 00	 jmp	 $LN23@PyEnumValu
$LN8@PyEnumValu:

; 1207 :     retDataBuf = (BYTE *)PyMem_Malloc(retDataSize);

  000f7	8b 4d 77	 mov	 ecx, DWORD PTR retDataSize$[rbp-89]
  000fa	4c 89 a4 24 98
	00 00 00	 mov	 QWORD PTR [rsp+152], r12
  00102	e8 00 00 00 00	 call	 PyMem_Malloc
  00107	4c 8b e0	 mov	 r12, rax

; 1208 :     if (retDataBuf == NULL) {

  0010a	48 85 c0	 test	 rax, rax
  0010d	75 12		 jne	 SHORT $LN15@PyEnumValu

; 1209 :         PyMem_Free(retValueBuf);

  0010f	49 8b ce	 mov	 rcx, r14
  00112	e8 00 00 00 00	 call	 PyMem_Free

; 1210 :         return PyErr_NoMemory();

  00117	e8 00 00 00 00	 call	 PyErr_NoMemory
  0011c	e9 29 01 00 00	 jmp	 $LN24@PyEnumValu
$LN15@PyEnumValu:
  00121	48 89 9c 24 c0
	00 00 00	 mov	 QWORD PTR [rsp+192], rbx

; 1211 :     }
; 1212 : 
; 1213 :     while (1) {
; 1214 :         Py_BEGIN_ALLOW_THREADS

  00129	e8 00 00 00 00	 call	 PyEval_SaveThread

; 1215 :         rc = RegEnumValueW(hKey,
; 1216 :                   index,
; 1217 :                   retValueBuf,
; 1218 :                   &retValueSize,
; 1219 :                   NULL,
; 1220 :                   &typ,
; 1221 :                   (BYTE *)retDataBuf,
; 1222 :                   &retDataSize);

  0012e	8b 55 0b	 mov	 edx, DWORD PTR index$[rbp-89]
  00131	48 8b d8	 mov	 rbx, rax
  00134	48 8d 45 77	 lea	 rax, QWORD PTR retDataSize$[rbp-89]
  00138	4c 8d 4d 7f	 lea	 r9, QWORD PTR retValueSize$[rbp-89]
  0013c	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00141	48 8d 45 07	 lea	 rax, QWORD PTR typ$[rbp-89]
  00145	4c 89 64 24 30	 mov	 QWORD PTR [rsp+48], r12
  0014a	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0014f	4d 8b c6	 mov	 r8, r14
  00152	49 8b cd	 mov	 rcx, r13
  00155	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0015a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegEnumValueW

; 1223 :         Py_END_ALLOW_THREADS

  00160	48 8b cb	 mov	 rcx, rbx
  00163	44 8b e8	 mov	 r13d, eax
  00166	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 1224 : 
; 1225 :         if (rc != ERROR_MORE_DATA)

  0016b	41 81 fd ea 00
	00 00		 cmp	 r13d, 234		; 000000eaH
  00172	75 6a		 jne	 SHORT $LN16@PyEnumValu
$LL6@PyEnumValu:

; 1226 :             break;
; 1227 : 
; 1228 :         bufDataSize *= 2;

  00174	03 f6		 add	 esi, esi

; 1229 :         tmpBuf = (BYTE *)PyMem_Realloc(retDataBuf, bufDataSize);

  00176	49 8b cc	 mov	 rcx, r12
  00179	8b d6		 mov	 edx, esi
  0017b	e8 00 00 00 00	 call	 PyMem_Realloc
  00180	4c 8b e8	 mov	 r13, rax

; 1230 :         if (tmpBuf == NULL) {

  00183	48 85 c0	 test	 rax, rax
  00186	74 68		 je	 SHORT $LN17@PyEnumValu

; 1233 :             goto fail;
; 1234 :         }
; 1235 :         retDataBuf = tmpBuf;

  00188	4c 8b e0	 mov	 r12, rax

; 1236 :         retDataSize = bufDataSize;

  0018b	89 75 77	 mov	 DWORD PTR retDataSize$[rbp-89], esi

; 1237 :         retValueSize = bufValueSize;

  0018e	44 89 7d 7f	 mov	 DWORD PTR retValueSize$[rbp-89], r15d
  00192	e8 00 00 00 00	 call	 PyEval_SaveThread
  00197	8b 55 0b	 mov	 edx, DWORD PTR index$[rbp-89]
  0019a	48 8b 4d 0f	 mov	 rcx, QWORD PTR hKey$[rbp-89]
  0019e	48 8b d8	 mov	 rbx, rax
  001a1	48 8d 45 77	 lea	 rax, QWORD PTR retDataSize$[rbp-89]
  001a5	4c 8d 4d 7f	 lea	 r9, QWORD PTR retValueSize$[rbp-89]
  001a9	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  001ae	48 8d 45 07	 lea	 rax, QWORD PTR typ$[rbp-89]
  001b2	4c 89 64 24 30	 mov	 QWORD PTR [rsp+48], r12
  001b7	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  001bc	4d 8b c6	 mov	 r8, r14
  001bf	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  001c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegEnumValueW
  001ca	48 8b cb	 mov	 rcx, rbx
  001cd	44 8b e8	 mov	 r13d, eax
  001d0	e8 00 00 00 00	 call	 PyEval_RestoreThread
  001d5	41 81 fd ea 00
	00 00		 cmp	 r13d, 234		; 000000eaH
  001dc	74 96		 je	 SHORT $LL6@PyEnumValu
$LN16@PyEnumValu:

; 1238 :     }
; 1239 : 
; 1240 :     if (rc != ERROR_SUCCESS) {

  001de	45 85 ed	 test	 r13d, r13d
  001e1	74 14		 je	 SHORT $LN2@PyEnumValu

; 1241 :         retVal = PyErr_SetFromWindowsErrWithFunction(rc,
; 1242 :                                                      "PyRegEnumValue");

  001e3	41 8b cd	 mov	 ecx, r13d
  001e6	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  001eb	48 8b f8	 mov	 rdi, rax

; 1243 :         goto fail;

  001ee	eb 3f		 jmp	 SHORT $fail$121074
$LN17@PyEnumValu:

; 1231 :             PyErr_NoMemory();

  001f0	e8 00 00 00 00	 call	 PyErr_NoMemory

; 1232 :             retVal = NULL;

  001f5	eb 38		 jmp	 SHORT $fail$121074
$LN2@PyEnumValu:

; 1244 :     }
; 1245 :     obData = Reg2Py(retDataBuf, retDataSize, typ);

  001f7	44 8b 45 07	 mov	 r8d, DWORD PTR typ$[rbp-89]
  001fb	8b 55 77	 mov	 edx, DWORD PTR retDataSize$[rbp-89]
  001fe	49 8b cc	 mov	 rcx, r12
  00201	e8 00 00 00 00	 call	 Reg2Py
  00206	48 8b d8	 mov	 rbx, rax

; 1246 :     if (obData == NULL) {

  00209	48 85 c0	 test	 rax, rax

; 1247 :         retVal = NULL;
; 1248 :         goto fail;

  0020c	74 21		 je	 SHORT $fail$121074

; 1249 :     }
; 1250 :     retVal = Py_BuildValue("uOi", retValueBuf, obData, typ);

  0020e	44 8b 4d 07	 mov	 r9d, DWORD PTR typ$[rbp-89]
  00212	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03ENKDGKFO@uOi?$AA@
  00219	4c 8b c0	 mov	 r8, rax
  0021c	49 8b d6	 mov	 rdx, r14
  0021f	e8 00 00 00 00	 call	 Py_BuildValue

; 1251 :     Py_DECREF(obData);

  00224	48 8b cb	 mov	 rcx, rbx
  00227	48 8b f8	 mov	 rdi, rax
  0022a	e8 00 00 00 00	 call	 _Py_DecRef
$fail$121074:

; 1252 :   fail:
; 1253 :     PyMem_Free(retValueBuf);

  0022f	49 8b ce	 mov	 rcx, r14
  00232	e8 00 00 00 00	 call	 PyMem_Free

; 1254 :     PyMem_Free(retDataBuf);

  00237	49 8b cc	 mov	 rcx, r12
  0023a	e8 00 00 00 00	 call	 PyMem_Free
  0023f	48 8b 9c 24 c0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+192]

; 1255 :     return retVal;

  00247	48 8b c7	 mov	 rax, rdi
$LN24@PyEnumValu:
  0024a	4c 8b a4 24 98
	00 00 00	 mov	 r12, QWORD PTR [rsp+152]
$LN23@PyEnumValu:
  00252	48 8b b4 24 a8
	00 00 00	 mov	 rsi, QWORD PTR [rsp+168]
  0025a	4c 8b b4 24 88
	00 00 00	 mov	 r14, QWORD PTR [rsp+136]
  00262	4c 8b bc 24 80
	00 00 00	 mov	 r15, QWORD PTR [rsp+128]
$LN20@PyEnumValu:
  0026a	48 8b bc 24 a0
	00 00 00	 mov	 rdi, QWORD PTR [rsp+160]
  00272	4c 8b ac 24 90
	00 00 00	 mov	 r13, QWORD PTR [rsp+144]

; 1256 : }

  0027a	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  00281	5d		 pop	 rbp
  00282	c3		 ret	 0
PyEnumValue ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@IBDMMBKN@u?3ExpandEnvironmentStrings?$AA@ ; `string'
EXTRN	__imp_ExpandEnvironmentStringsW:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyExpandEnvironmentStrings DD imagerel PyExpandEnvironmentStrings
	DD	imagerel PyExpandEnvironmentStrings+45
	DD	imagerel $unwind$PyExpandEnvironmentStrings
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyExpandEnvironmentStrings DD imagerel PyExpandEnvironmentStrings+45
	DD	imagerel PyExpandEnvironmentStrings+79
	DD	imagerel $chain$0$PyExpandEnvironmentStrings
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyExpandEnvironmentStrings DD imagerel PyExpandEnvironmentStrings+79
	DD	imagerel PyExpandEnvironmentStrings+123
	DD	imagerel $chain$3$PyExpandEnvironmentStrings
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$PyExpandEnvironmentStrings DD imagerel PyExpandEnvironmentStrings+123
	DD	imagerel PyExpandEnvironmentStrings+174
	DD	imagerel $chain$5$PyExpandEnvironmentStrings
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$PyExpandEnvironmentStrings DD imagerel PyExpandEnvironmentStrings+174
	DD	imagerel PyExpandEnvironmentStrings+230
	DD	imagerel $chain$7$PyExpandEnvironmentStrings
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$PyExpandEnvironmentStrings DD 040021H
	DD	047400H
	DD	063400H
	DD	imagerel PyExpandEnvironmentStrings
	DD	imagerel PyExpandEnvironmentStrings+45
	DD	imagerel $unwind$PyExpandEnvironmentStrings
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$PyExpandEnvironmentStrings DD 040021H
	DD	047400H
	DD	063400H
	DD	imagerel PyExpandEnvironmentStrings
	DD	imagerel PyExpandEnvironmentStrings+45
	DD	imagerel $unwind$PyExpandEnvironmentStrings
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyExpandEnvironmentStrings DD 040821H
	DD	063408H
	DD	047400H
	DD	imagerel PyExpandEnvironmentStrings
	DD	imagerel PyExpandEnvironmentStrings+45
	DD	imagerel $unwind$PyExpandEnvironmentStrings
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyExpandEnvironmentStrings DD 020521H
	DD	047405H
	DD	imagerel PyExpandEnvironmentStrings
	DD	imagerel PyExpandEnvironmentStrings+45
	DD	imagerel $unwind$PyExpandEnvironmentStrings
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyExpandEnvironmentStrings DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BL@IBDMMBKN@u?3ExpandEnvironmentStrings?$AA@
CONST	SEGMENT
??_C@_0BL@IBDMMBKN@u?3ExpandEnvironmentStrings?$AA@ DB 'u:ExpandEnvironme'
	DB	'ntStrings', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyExpandEnvironmentStrings
_TEXT	SEGMENT
self$ = 48
args$ = 56
src$ = 64
PyExpandEnvironmentStrings PROC				; COMDAT

; 1260 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1261 :     wchar_t *retValue = NULL;
; 1262 :     wchar_t *src;
; 1263 :     DWORD retValueSize;
; 1264 :     DWORD rc;
; 1265 :     PyObject *o;
; 1266 : 
; 1267 :     if (!PyArg_ParseTuple(args, "u:ExpandEnvironmentStrings", &src))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 44 24 40	 lea	 r8, QWORD PTR src$[rsp]
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@IBDMMBKN@u?3ExpandEnvironmentStrings?$AA@
  00013	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00018	85 c0		 test	 eax, eax
  0001a	75 07		 jne	 SHORT $LN4@PyExpandEn

; 1268 :         return NULL;

  0001c	33 c0		 xor	 eax, eax

; 1289 : }

  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	c3		 ret	 0
$LN4@PyExpandEn:

; 1269 : 
; 1270 :     retValueSize = ExpandEnvironmentStringsW(src, retValue, 0);

  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR src$[rsp]
  00028	45 33 c0	 xor	 r8d, r8d
  0002b	33 d2		 xor	 edx, edx
  0002d	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00032	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ExpandEnvironmentStringsW
  00038	8b f8		 mov	 edi, eax

; 1271 :     if (retValueSize == 0) {

  0003a	85 c0		 test	 eax, eax
  0003c	75 11		 jne	 SHORT $LN3@PyExpandEn

; 1272 :         return PyErr_SetFromWindowsErrWithFunction(retValueSize,
; 1273 :                                         "ExpandEnvironmentStrings");

  0003e	33 c9		 xor	 ecx, ecx
  00040	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00045	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]

; 1289 : }

  0004a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004e	c3		 ret	 0
$LN3@PyExpandEn:

; 1274 :     }
; 1275 :     retValue = (wchar_t *)PyMem_Malloc(retValueSize * sizeof(wchar_t));

  0004f	48 8b cf	 mov	 rcx, rdi
  00052	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00057	48 03 c9	 add	 rcx, rcx
  0005a	e8 00 00 00 00	 call	 PyMem_Malloc
  0005f	48 8b d8	 mov	 rbx, rax

; 1276 :     if (retValue == NULL) {

  00062	48 85 c0	 test	 rax, rax
  00065	75 14		 jne	 SHORT $LN2@PyExpandEn

; 1277 :         return PyErr_NoMemory();

  00067	e8 00 00 00 00	 call	 PyErr_NoMemory
  0006c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00071	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]

; 1289 : }

  00076	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0007a	c3		 ret	 0
$LN2@PyExpandEn:

; 1278 :     }
; 1279 : 
; 1280 :     rc = ExpandEnvironmentStringsW(src, retValue, retValueSize);

  0007b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR src$[rsp]
  00080	44 8b c7	 mov	 r8d, edi
  00083	48 8b d0	 mov	 rdx, rax
  00086	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ExpandEnvironmentStringsW

; 1281 :     if (rc == 0) {

  0008c	85 c0		 test	 eax, eax
  0008e	75 1e		 jne	 SHORT $LN1@PyExpandEn

; 1282 :         PyMem_Free(retValue);

  00090	48 8b cb	 mov	 rcx, rbx
  00093	e8 00 00 00 00	 call	 PyMem_Free

; 1283 :         return PyErr_SetFromWindowsErrWithFunction(retValueSize,
; 1284 :                                         "ExpandEnvironmentStrings");

  00098	8b cf		 mov	 ecx, edi
  0009a	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  0009f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a4	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]

; 1289 : }

  000a9	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000ad	c3		 ret	 0
$LN1@PyExpandEn:

; 1285 :     }
; 1286 :     o = PyUnicode_FromWideChar(retValue, wcslen(retValue));

  000ae	48 83 c9 ff	 or	 rcx, -1
  000b2	33 c0		 xor	 eax, eax
  000b4	48 8b fb	 mov	 rdi, rbx
  000b7	66 f2 af	 repne scasw
  000ba	48 f7 d1	 not	 rcx
  000bd	48 8d 51 ff	 lea	 rdx, QWORD PTR [rcx-1]
  000c1	48 8b cb	 mov	 rcx, rbx
  000c4	e8 00 00 00 00	 call	 PyUnicode_FromWideChar

; 1287 :     PyMem_Free(retValue);

  000c9	48 8b cb	 mov	 rcx, rbx
  000cc	48 8b f8	 mov	 rdi, rax
  000cf	e8 00 00 00 00	 call	 PyMem_Free
  000d4	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1288 :     return o;

  000d9	48 8b c7	 mov	 rax, rdi
  000dc	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]

; 1289 : }

  000e1	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000e5	c3		 ret	 0
PyExpandEnvironmentStrings ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@OCIFNGJF@O?3FlushKey?$AA@		; `string'
EXTRN	__imp_RegFlushKey:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyFlushKey DD imagerel PyFlushKey
	DD	imagerel PyFlushKey+57
	DD	imagerel $unwind$PyFlushKey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyFlushKey DD imagerel PyFlushKey+57
	DD	imagerel PyFlushKey+105
	DD	imagerel $chain$1$PyFlushKey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyFlushKey DD imagerel PyFlushKey+105
	DD	imagerel PyFlushKey+122
	DD	imagerel $chain$2$PyFlushKey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyFlushKey DD imagerel PyFlushKey+122
	DD	imagerel PyFlushKey+208
	DD	imagerel $chain$4$PyFlushKey
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyFlushKey DD 020021H
	DD	067400H
	DD	imagerel PyFlushKey
	DD	imagerel PyFlushKey+57
	DD	imagerel $unwind$PyFlushKey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyFlushKey DD 020021H
	DD	067400H
	DD	imagerel PyFlushKey
	DD	imagerel PyFlushKey+57
	DD	imagerel $unwind$PyFlushKey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyFlushKey DD 040a21H
	DD	06740aH
	DD	083405H
	DD	imagerel PyFlushKey
	DD	imagerel PyFlushKey+57
	DD	imagerel $unwind$PyFlushKey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFlushKey DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0L@OCIFNGJF@O?3FlushKey?$AA@
CONST	SEGMENT
??_C@_0L@OCIFNGJF@O?3FlushKey?$AA@ DB 'O:FlushKey', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\pc\winreg.c
CONST	ENDS
;	COMDAT PyFlushKey
_TEXT	SEGMENT
self$ = 64
args$ = 72
obKey$ = 80
hKey$ = 88
PyFlushKey PROC						; COMDAT

; 1293 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1294 :     HKEY hKey;
; 1295 :     PyObject *obKey;
; 1296 :     long rc;
; 1297 :     if (!PyArg_ParseTuple(args, "O:FlushKey", &obKey))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 44 24 50	 lea	 r8, QWORD PTR obKey$[rsp]
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@OCIFNGJF@O?3FlushKey?$AA@
  00013	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00018	85 c0		 test	 eax, eax
  0001a	75 07		 jne	 SHORT $LN3@PyFlushKey
$LN11@PyFlushKey:

; 1298 :         return NULL;

  0001c	33 c0		 xor	 eax, eax

; 1308 : }

  0001e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00022	c3		 ret	 0
$LN3@PyFlushKey:

; 1299 :     if (!PyHKEY_AsHKEY(obKey, &hKey, FALSE))

  00023	48 8b 4c 24 50	 mov	 rcx, QWORD PTR obKey$[rsp]
  00028	48 8d 54 24 58	 lea	 rdx, QWORD PTR hKey$[rsp]
  0002d	45 33 c0	 xor	 r8d, r8d
  00030	e8 00 00 00 00	 call	 PyHKEY_AsHKEY
  00035	85 c0		 test	 eax, eax

; 1300 :         return NULL;

  00037	74 e3		 je	 SHORT $LN11@PyFlushKey

; 1301 :     Py_BEGIN_ALLOW_THREADS

  00039	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0003e	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  00043	e8 00 00 00 00	 call	 PyEval_SaveThread

; 1302 :     rc = RegFlushKey(hKey);

  00048	48 8b 4c 24 58	 mov	 rcx, QWORD PTR hKey$[rsp]
  0004d	48 8b d8	 mov	 rbx, rax
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegFlushKey

; 1303 :     Py_END_ALLOW_THREADS

  00056	48 8b cb	 mov	 rcx, rbx
  00059	8b f8		 mov	 edi, eax
  0005b	e8 00 00 00 00	 call	 PyEval_RestoreThread
  00060	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 1304 :     if (rc != ERROR_SUCCESS)

  00065	85 ff		 test	 edi, edi
  00067	74 11		 je	 SHORT $LN1@PyFlushKey

; 1305 :         return PyErr_SetFromWindowsErrWithFunction(rc, "RegFlushKey");

  00069	8b cf		 mov	 ecx, edi
  0006b	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00070	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 1308 : }

  00075	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00079	c3		 ret	 0
$LN1@PyFlushKey:

; 1306 :     Py_INCREF(Py_None);

  0007a	e8 00 00 00 00	 call	 _Py_PXCTX
  0007f	85 c0		 test	 eax, eax
  00081	75 3c		 jne	 SHORT $LN7@PyFlushKey
  00083	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  0008a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00091	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00098	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0009e	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000a6	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ab	85 c0		 test	 eax, eax
  000ad	75 09		 jne	 SHORT $LN6@PyFlushKey
  000af	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  000b6	74 07		 je	 SHORT $LN7@PyFlushKey
$LN6@PyFlushKey:
  000b8	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN7@PyFlushKey:

; 1307 :     return Py_None;

  000bf	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000c6	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 1308 : }

  000cb	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000cf	c3		 ret	 0
PyFlushKey ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@LCPFBJKE@Ouu?3LoadKey?$AA@		; `string'
EXTRN	__imp_RegLoadKeyW:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyLoadKey DD imagerel PyLoadKey
	DD	imagerel PyLoadKey+75
	DD	imagerel $unwind$PyLoadKey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyLoadKey DD imagerel PyLoadKey+75
	DD	imagerel PyLoadKey+133
	DD	imagerel $chain$1$PyLoadKey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyLoadKey DD imagerel PyLoadKey+133
	DD	imagerel PyLoadKey+150
	DD	imagerel $chain$2$PyLoadKey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyLoadKey DD imagerel PyLoadKey+150
	DD	imagerel PyLoadKey+236
	DD	imagerel $chain$4$PyLoadKey
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyLoadKey DD 020021H
	DD	087400H
	DD	imagerel PyLoadKey
	DD	imagerel PyLoadKey+75
	DD	imagerel $unwind$PyLoadKey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyLoadKey DD 020021H
	DD	087400H
	DD	imagerel PyLoadKey
	DD	imagerel PyLoadKey+75
	DD	imagerel $unwind$PyLoadKey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyLoadKey DD 040a21H
	DD	08740aH
	DD	0a3405H
	DD	imagerel PyLoadKey
	DD	imagerel PyLoadKey+75
	DD	imagerel $unwind$PyLoadKey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyLoadKey DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_0M@LCPFBJKE@Ouu?3LoadKey?$AA@
CONST	SEGMENT
??_C@_0M@LCPFBJKE@Ouu?3LoadKey?$AA@ DB 'Ouu:LoadKey', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\pc\winreg.c
CONST	ENDS
;	COMDAT PyLoadKey
_TEXT	SEGMENT
subKey$ = 48
hKey$ = 56
self$ = 80
args$ = 88
obKey$ = 96
fileName$ = 104
PyLoadKey PROC						; COMDAT

; 1311 : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00004	48 8b c2	 mov	 rax, rdx

; 1312 :     HKEY hKey;
; 1313 :     PyObject *obKey;
; 1314 :     wchar_t *subKey;
; 1315 :     wchar_t *fileName;
; 1316 : 
; 1317 :     long rc;
; 1318 :     if (!PyArg_ParseTuple(args, "Ouu:LoadKey", &obKey, &subKey, &fileName))

  00007	48 8d 4c 24 68	 lea	 rcx, QWORD PTR fileName$[rsp]
  0000c	4c 8d 4c 24 30	 lea	 r9, QWORD PTR subKey$[rsp]
  00011	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00016	4c 8d 44 24 60	 lea	 r8, QWORD PTR obKey$[rsp]
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@LCPFBJKE@Ouu?3LoadKey?$AA@
  00022	48 8b c8	 mov	 rcx, rax
  00025	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0002a	85 c0		 test	 eax, eax
  0002c	75 07		 jne	 SHORT $LN3@PyLoadKey
$LN11@PyLoadKey:

; 1319 :         return NULL;

  0002e	33 c0		 xor	 eax, eax

; 1329 : }

  00030	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00034	c3		 ret	 0
$LN3@PyLoadKey:

; 1320 :     if (!PyHKEY_AsHKEY(obKey, &hKey, FALSE))

  00035	48 8b 4c 24 60	 mov	 rcx, QWORD PTR obKey$[rsp]
  0003a	48 8d 54 24 38	 lea	 rdx, QWORD PTR hKey$[rsp]
  0003f	45 33 c0	 xor	 r8d, r8d
  00042	e8 00 00 00 00	 call	 PyHKEY_AsHKEY
  00047	85 c0		 test	 eax, eax

; 1321 :         return NULL;

  00049	74 e3		 je	 SHORT $LN11@PyLoadKey

; 1322 :     Py_BEGIN_ALLOW_THREADS

  0004b	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  00050	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  00055	e8 00 00 00 00	 call	 PyEval_SaveThread

; 1323 :     rc = RegLoadKeyW(hKey, subKey, fileName );

  0005a	4c 8b 44 24 68	 mov	 r8, QWORD PTR fileName$[rsp]
  0005f	48 8b 54 24 30	 mov	 rdx, QWORD PTR subKey$[rsp]
  00064	48 8b 4c 24 38	 mov	 rcx, QWORD PTR hKey$[rsp]
  00069	48 8b d8	 mov	 rbx, rax
  0006c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegLoadKeyW

; 1324 :     Py_END_ALLOW_THREADS

  00072	48 8b cb	 mov	 rcx, rbx
  00075	8b f8		 mov	 edi, eax
  00077	e8 00 00 00 00	 call	 PyEval_RestoreThread
  0007c	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]

; 1325 :     if (rc != ERROR_SUCCESS)

  00081	85 ff		 test	 edi, edi
  00083	74 11		 je	 SHORT $LN1@PyLoadKey

; 1326 :         return PyErr_SetFromWindowsErrWithFunction(rc, "RegLoadKey");

  00085	8b cf		 mov	 ecx, edi
  00087	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  0008c	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 1329 : }

  00091	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00095	c3		 ret	 0
$LN1@PyLoadKey:

; 1327 :     Py_INCREF(Py_None);

  00096	e8 00 00 00 00	 call	 _Py_PXCTX
  0009b	85 c0		 test	 eax, eax
  0009d	75 3c		 jne	 SHORT $LN7@PyLoadKey
  0009f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  000a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000b4	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000ba	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000c2	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c7	85 c0		 test	 eax, eax
  000c9	75 09		 jne	 SHORT $LN6@PyLoadKey
  000cb	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  000d2	74 07		 je	 SHORT $LN7@PyLoadKey
$LN6@PyLoadKey:
  000d4	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN7@PyLoadKey:

; 1328 :     return Py_None;

  000db	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000e2	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 1329 : }

  000e7	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000eb	c3		 ret	 0
PyLoadKey ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@IJCNGLB@OZ?$HMii?3OpenKey?$AA@		; `string'
EXTRN	__imp_RegOpenKeyExW:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyOpenKey DD imagerel PyOpenKey
	DD	imagerel PyOpenKey+168
	DD	imagerel $unwind$PyOpenKey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyOpenKey DD imagerel PyOpenKey+168
	DD	imagerel PyOpenKey+253
	DD	imagerel $chain$1$PyOpenKey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyOpenKey DD imagerel PyOpenKey+253
	DD	imagerel PyOpenKey+276
	DD	imagerel $chain$2$PyOpenKey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyOpenKey DD imagerel PyOpenKey+276
	DD	imagerel PyOpenKey+302
	DD	imagerel $chain$4$PyOpenKey
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyOpenKey DD 020021H
	DD	0127400H
	DD	imagerel PyOpenKey
	DD	imagerel PyOpenKey+168
	DD	imagerel $unwind$PyOpenKey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyOpenKey DD 020021H
	DD	0127400H
	DD	imagerel PyOpenKey
	DD	imagerel PyOpenKey+168
	DD	imagerel $unwind$PyOpenKey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyOpenKey DD 041021H
	DD	0127410H
	DD	0143408H
	DD	imagerel PyOpenKey
	DD	imagerel PyOpenKey+168
	DD	imagerel $unwind$PyOpenKey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyOpenKey DD 020a01H
	DD	013010aH
xdata	ENDS
;	COMDAT ??_C@_0O@IJCNGLB@OZ?$HMii?3OpenKey?$AA@
CONST	SEGMENT
??_C@_0O@IJCNGLB@OZ?$HMii?3OpenKey?$AA@ DB 'OZ|ii:OpenKey', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyOpenKey
_TEXT	SEGMENT
reserved$ = 64
key$ = 72
sub_key$ = 80
hKey$ = 88
retKey$ = 96
self$ = 160
args$ = 168
kwargs$ = 176
access$ = 184
PyOpenKey PROC						; COMDAT

; 1333 : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H
  0000a	4c 8b d2	 mov	 r10, rdx

; 1334 :     HKEY hKey;
; 1335 :     PyObject *key;
; 1336 :     wchar_t *sub_key;
; 1337 :     int reserved = 0;

  0000d	33 d2		 xor	 edx, edx

; 1338 :     HKEY retKey;
; 1339 :     long rc;
; 1340 :     REGSAM access = KEY_READ;
; 1341 : 
; 1342 :     char *kwlist[] = {"key", "sub_key", "reserved", "access", NULL};

  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03ICHNJLJF@key?$AA@
  00016	49 89 4b d0	 mov	 QWORD PTR [r11-48], rcx
  0001a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07KFOLAEFE@sub_key?$AA@
  00021	49 8b c0	 mov	 rax, r8
  00024	49 89 4b d8	 mov	 QWORD PTR [r11-40], rcx
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08FINKBBAF@reserved?$AA@
  0002f	89 54 24 40	 mov	 DWORD PTR reserved$[rsp], edx
  00033	49 89 4b e0	 mov	 QWORD PTR [r11-32], rcx
  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06EBPNOMLE@access?$AA@
  0003e	49 89 53 f0	 mov	 QWORD PTR [r11-16], rdx
  00042	49 89 4b e8	 mov	 QWORD PTR [r11-24], rcx

; 1343 : 
; 1344 :     if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OZ|ii:OpenKey", kwlist,
; 1345 :                                      &key, &sub_key, &reserved, &access))

  00046	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  0004a	4d 8d 4b d0	 lea	 r9, QWORD PTR [r11-48]
  0004e	49 89 4b a0	 mov	 QWORD PTR [r11-96], rcx
  00052	49 8d 4b a8	 lea	 rcx, QWORD PTR [r11-88]
  00056	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@IJCNGLB@OZ?$HMii?3OpenKey?$AA@
  0005d	49 89 4b 98	 mov	 QWORD PTR [r11-104], rcx
  00061	49 8d 4b b8	 lea	 rcx, QWORD PTR [r11-72]
  00065	48 8b d0	 mov	 rdx, rax
  00068	49 89 4b 90	 mov	 QWORD PTR [r11-112], rcx
  0006c	49 8d 4b b0	 lea	 rcx, QWORD PTR [r11-80]
  00070	41 c7 43 20 19
	00 02 00	 mov	 DWORD PTR [r11+32], 131097 ; 00020019H
  00078	49 89 4b 88	 mov	 QWORD PTR [r11-120], rcx
  0007c	49 8b ca	 mov	 rcx, r10
  0007f	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00084	85 c0		 test	 eax, eax
  00086	75 0a		 jne	 SHORT $LN3@PyOpenKey
$LN7@PyOpenKey:

; 1346 :         return NULL;

  00088	33 c0		 xor	 eax, eax

; 1356 : }

  0008a	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00091	c3		 ret	 0
$LN3@PyOpenKey:

; 1347 :     if (!PyHKEY_AsHKEY(key, &hKey, FALSE))

  00092	48 8b 4c 24 48	 mov	 rcx, QWORD PTR key$[rsp]
  00097	48 8d 54 24 58	 lea	 rdx, QWORD PTR hKey$[rsp]
  0009c	45 33 c0	 xor	 r8d, r8d
  0009f	e8 00 00 00 00	 call	 PyHKEY_AsHKEY
  000a4	85 c0		 test	 eax, eax

; 1348 :         return NULL;

  000a6	74 e0		 je	 SHORT $LN7@PyOpenKey

; 1349 : 
; 1350 :     Py_BEGIN_ALLOW_THREADS

  000a8	48 89 9c 24 a0
	00 00 00	 mov	 QWORD PTR [rsp+160], rbx
  000b0	48 89 bc 24 90
	00 00 00	 mov	 QWORD PTR [rsp+144], rdi
  000b8	e8 00 00 00 00	 call	 PyEval_SaveThread

; 1351 :     rc = RegOpenKeyExW(hKey, sub_key, reserved, access, &retKey);

  000bd	44 8b 8c 24 b8
	00 00 00	 mov	 r9d, DWORD PTR access$[rsp]
  000c5	44 8b 44 24 40	 mov	 r8d, DWORD PTR reserved$[rsp]
  000ca	48 8b 54 24 50	 mov	 rdx, QWORD PTR sub_key$[rsp]
  000cf	48 8b 4c 24 58	 mov	 rcx, QWORD PTR hKey$[rsp]
  000d4	48 8b d8	 mov	 rbx, rax
  000d7	48 8d 44 24 60	 lea	 rax, QWORD PTR retKey$[rsp]
  000dc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegOpenKeyExW

; 1352 :     Py_END_ALLOW_THREADS

  000e7	48 8b cb	 mov	 rcx, rbx
  000ea	8b f8		 mov	 edi, eax
  000ec	e8 00 00 00 00	 call	 PyEval_RestoreThread
  000f1	48 8b 9c 24 a0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+160]

; 1353 :     if (rc != ERROR_SUCCESS)

  000f9	85 ff		 test	 edi, edi
  000fb	74 17		 je	 SHORT $LN1@PyOpenKey

; 1354 :         return PyErr_SetFromWindowsErrWithFunction(rc, "RegOpenKeyEx");

  000fd	8b cf		 mov	 ecx, edi
  000ff	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00104	48 8b bc 24 90
	00 00 00	 mov	 rdi, QWORD PTR [rsp+144]

; 1356 : }

  0010c	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00113	c3		 ret	 0
$LN1@PyOpenKey:

; 1355 :     return PyHKEY_FromHKEY(retKey);

  00114	48 8b 4c 24 60	 mov	 rcx, QWORD PTR retKey$[rsp]
  00119	e8 00 00 00 00	 call	 PyHKEY_FromHKEY
  0011e	48 8b bc 24 90
	00 00 00	 mov	 rdi, QWORD PTR [rsp+144]

; 1356 : }

  00126	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0012d	c3		 ret	 0
PyOpenKey ENDP
_TEXT	ENDS
PUBLIC	??_C@_03KIHCDLAP@iiO?$AA@			; `string'
PUBLIC	??_C@_0P@PMBECOHL@O?3QueryInfoKey?$AA@		; `string'
EXTRN	PyLong_FromLongLong:PROC
EXTRN	__imp_RegQueryInfoKeyA:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyQueryInfoKey DD imagerel PyQueryInfoKey
	DD	imagerel PyQueryInfoKey+168
	DD	imagerel $unwind$PyQueryInfoKey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyQueryInfoKey DD imagerel PyQueryInfoKey+168
	DD	imagerel PyQueryInfoKey+222
	DD	imagerel $chain$0$PyQueryInfoKey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyQueryInfoKey DD imagerel PyQueryInfoKey+222
	DD	imagerel PyQueryInfoKey+298
	DD	imagerel $chain$3$PyQueryInfoKey
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyQueryInfoKey DD 042121H
	DD	0123421H
	DD	0107400H
	DD	imagerel PyQueryInfoKey
	DD	imagerel PyQueryInfoKey+168
	DD	imagerel $unwind$PyQueryInfoKey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyQueryInfoKey DD 020821H
	DD	0107408H
	DD	imagerel PyQueryInfoKey
	DD	imagerel PyQueryInfoKey+168
	DD	imagerel $unwind$PyQueryInfoKey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyQueryInfoKey DD 020701H
	DD	0110107H
xdata	ENDS
;	COMDAT ??_C@_03KIHCDLAP@iiO?$AA@
CONST	SEGMENT
??_C@_03KIHCDLAP@iiO?$AA@ DB 'iiO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PMBECOHL@O?3QueryInfoKey?$AA@
CONST	SEGMENT
??_C@_0P@PMBECOHL@O?3QueryInfoKey?$AA@ DB 'O:QueryInfoKey', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyQueryInfoKey
_TEXT	SEGMENT
ft$ = 96
li$ = 104
hKey$ = 104
obKey$ = 112
self$ = 144
args$ = 152
nValues$ = 160
nSubKeys$ = 168
PyQueryInfoKey PROC					; COMDAT

; 1361 : {

  00000	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 1362 :   HKEY hKey;
; 1363 :   PyObject *obKey;
; 1364 :   long rc;
; 1365 :   DWORD nSubKeys, nValues;
; 1366 :   FILETIME ft;
; 1367 :   LARGE_INTEGER li;
; 1368 :   PyObject *l;
; 1369 :   PyObject *ret;
; 1370 :   if (!PyArg_ParseTuple(args, "O:QueryInfoKey", &obKey))

  00007	48 8b ca	 mov	 rcx, rdx
  0000a	4c 8d 44 24 70	 lea	 r8, QWORD PTR obKey$[rsp]
  0000f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@PMBECOHL@O?3QueryInfoKey?$AA@
  00016	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0001b	85 c0		 test	 eax, eax
  0001d	75 0a		 jne	 SHORT $LN4@PyQueryInf
$LN8@PyQueryInf:

; 1371 :     return NULL;

  0001f	33 c0		 xor	 eax, eax

; 1386 : }

  00021	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00028	c3		 ret	 0
$LN4@PyQueryInf:

; 1372 :   if (!PyHKEY_AsHKEY(obKey, &hKey, FALSE))

  00029	48 8b 4c 24 70	 mov	 rcx, QWORD PTR obKey$[rsp]
  0002e	48 8d 54 24 68	 lea	 rdx, QWORD PTR hKey$[rsp]
  00033	45 33 c0	 xor	 r8d, r8d
  00036	e8 00 00 00 00	 call	 PyHKEY_AsHKEY
  0003b	85 c0		 test	 eax, eax

; 1373 :     return NULL;

  0003d	74 e0		 je	 SHORT $LN8@PyQueryInf

; 1374 :   if ((rc = RegQueryInfoKey(hKey, NULL, NULL, 0, &nSubKeys, NULL, NULL,
; 1375 :                             &nValues,  NULL,  NULL, NULL, &ft))
; 1376 :       != ERROR_SUCCESS)

  0003f	33 c9		 xor	 ecx, ecx
  00041	48 8d 44 24 60	 lea	 rax, QWORD PTR ft$[rsp]
  00046	45 33 c9	 xor	 r9d, r9d
  00049	48 89 44 24 58	 mov	 QWORD PTR [rsp+88], rax
  0004e	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00053	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00058	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0005d	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR nValues$[rsp]
  00065	45 33 c0	 xor	 r8d, r8d
  00068	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0006d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00072	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00077	48 8b 4c 24 68	 mov	 rcx, QWORD PTR hKey$[rsp]
  0007c	48 8d 84 24 a8
	00 00 00	 lea	 rax, QWORD PTR nSubKeys$[rsp]
  00084	33 d2		 xor	 edx, edx
  00086	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0008b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegQueryInfoKeyA
  00091	85 c0		 test	 eax, eax
  00093	74 0f		 je	 SHORT $LN2@PyQueryInf

; 1377 :     return PyErr_SetFromWindowsErrWithFunction(rc, "RegQueryInfoKey");

  00095	8b c8		 mov	 ecx, eax
  00097	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 1386 : }

  0009c	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  000a3	c3		 ret	 0
$LN2@PyQueryInf:

; 1378 :   li.LowPart = ft.dwLowDateTime;

  000a4	8b 44 24 60	 mov	 eax, DWORD PTR ft$[rsp]
  000a8	48 89 bc 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rdi
  000b0	89 44 24 68	 mov	 DWORD PTR li$[rsp], eax

; 1379 :   li.HighPart = ft.dwHighDateTime;

  000b4	8b 44 24 64	 mov	 eax, DWORD PTR ft$[rsp+4]
  000b8	89 44 24 6c	 mov	 DWORD PTR li$[rsp+4], eax

; 1380 :   l = PyLong_FromLongLong(li.QuadPart);

  000bc	48 8b 4c 24 68	 mov	 rcx, QWORD PTR li$[rsp]
  000c1	e8 00 00 00 00	 call	 PyLong_FromLongLong
  000c6	48 8b f8	 mov	 rdi, rax

; 1381 :   if (l == NULL)

  000c9	48 85 c0	 test	 rax, rax
  000cc	75 10		 jne	 SHORT $LN1@PyQueryInf
  000ce	48 8b bc 24 80
	00 00 00	 mov	 rdi, QWORD PTR [rsp+128]

; 1386 : }

  000d6	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  000dd	c3		 ret	 0
$LN1@PyQueryInf:

; 1382 :     return NULL;
; 1383 :   ret = Py_BuildValue("iiO", nSubKeys, nValues, l);

  000de	44 8b 84 24 a0
	00 00 00	 mov	 r8d, DWORD PTR nValues$[rsp]
  000e6	8b 94 24 a8 00
	00 00		 mov	 edx, DWORD PTR nSubKeys$[rsp]
  000ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03KIHCDLAP@iiO?$AA@
  000f4	4c 8b c8	 mov	 r9, rax
  000f7	48 89 9c 24 90
	00 00 00	 mov	 QWORD PTR [rsp+144], rbx
  000ff	e8 00 00 00 00	 call	 Py_BuildValue

; 1384 :   Py_DECREF(l);

  00104	48 8b cf	 mov	 rcx, rdi
  00107	48 8b d8	 mov	 rbx, rax
  0010a	e8 00 00 00 00	 call	 _Py_DecRef
  0010f	48 8b bc 24 80
	00 00 00	 mov	 rdi, QWORD PTR [rsp+128]

; 1385 :   return ret;

  00117	48 8b c3	 mov	 rax, rbx
  0011a	48 8b 9c 24 90
	00 00 00	 mov	 rbx, QWORD PTR [rsp+144]

; 1386 : }

  00122	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00129	c3		 ret	 0
PyQueryInfoKey ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@JJEGAJDO@OZ?3QueryValue?$AA@		; `string'
EXTRN	__imp_RegQueryValueW:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyQueryValue DD imagerel PyQueryValue
	DD	imagerel PyQueryValue+75
	DD	imagerel $unwind$PyQueryValue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyQueryValue DD imagerel PyQueryValue+75
	DD	imagerel PyQueryValue+151
	DD	imagerel $chain$1$PyQueryValue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyQueryValue DD imagerel PyQueryValue+151
	DD	imagerel PyQueryValue+200
	DD	imagerel $chain$4$PyQueryValue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$PyQueryValue DD imagerel PyQueryValue+200
	DD	imagerel PyQueryValue+397
	DD	imagerel $chain$7$PyQueryValue
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$PyQueryValue DD 081521H
	DD	076415H
	DD	067400H
	DD	085400H
	DD	0a3400H
	DD	imagerel PyQueryValue
	DD	imagerel PyQueryValue+75
	DD	imagerel $unwind$PyQueryValue
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyQueryValue DD 060b21H
	DD	0a340bH
	DD	067400H
	DD	085400H
	DD	imagerel PyQueryValue
	DD	imagerel PyQueryValue+75
	DD	imagerel $unwind$PyQueryValue
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyQueryValue DD 041a21H
	DD	06741aH
	DD	085405H
	DD	imagerel PyQueryValue
	DD	imagerel PyQueryValue+75
	DD	imagerel $unwind$PyQueryValue
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyQueryValue DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_0O@JJEGAJDO@OZ?3QueryValue?$AA@
CONST	SEGMENT
??_C@_0O@JJEGAJDO@OZ?3QueryValue?$AA@ DB 'OZ:QueryValue', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyQueryValue
_TEXT	SEGMENT
obKey$ = 32
hKey$ = 40
self$ = 80
args$ = 88
retSize$ = 96
subKey$ = 104
PyQueryValue PROC					; COMDAT

; 1390 : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1391 :     HKEY hKey;
; 1392 :     PyObject *obKey;
; 1393 :     wchar_t *subKey;
; 1394 :     long rc;
; 1395 :     PyObject *retStr;
; 1396 :     wchar_t *retBuf;
; 1397 :     DWORD bufSize = 0;
; 1398 :     DWORD retSize = 0;
; 1399 :     wchar_t *tmp;
; 1400 : 
; 1401 :     if (!PyArg_ParseTuple(args, "OZ:QueryValue", &obKey, &subKey))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 4c 24 68	 lea	 r9, QWORD PTR subKey$[rsp]
  0000c	4c 8d 44 24 20	 lea	 r8, QWORD PTR obKey$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@JJEGAJDO@OZ?3QueryValue?$AA@
  00018	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR retSize$[rsp], 0
  00020	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00025	85 c0		 test	 eax, eax
  00027	75 07		 jne	 SHORT $LN11@PyQueryVal
$LN24@PyQueryVal:

; 1402 :         return NULL;

  00029	33 c0		 xor	 eax, eax

; 1443 : }

  0002b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0002f	c3		 ret	 0
$LN11@PyQueryVal:

; 1403 : 
; 1404 :     if (!PyHKEY_AsHKEY(obKey, &hKey, FALSE))

  00030	48 8b 4c 24 20	 mov	 rcx, QWORD PTR obKey$[rsp]
  00035	48 8d 54 24 28	 lea	 rdx, QWORD PTR hKey$[rsp]
  0003a	45 33 c0	 xor	 r8d, r8d
  0003d	e8 00 00 00 00	 call	 PyHKEY_AsHKEY
  00042	85 c0		 test	 eax, eax

; 1405 :         return NULL;

  00044	74 e3		 je	 SHORT $LN24@PyQueryVal

; 1406 : 
; 1407 :     rc = RegQueryValueW(hKey, subKey, NULL, &retSize);

  00046	48 8b 54 24 68	 mov	 rdx, QWORD PTR subKey$[rsp]
  0004b	48 89 6c 24 40	 mov	 QWORD PTR [rsp+64], rbp
  00050	48 8b 6c 24 28	 mov	 rbp, QWORD PTR hKey$[rsp]
  00055	4c 8d 4c 24 60	 lea	 r9, QWORD PTR retSize$[rsp]
  0005a	48 8b cd	 mov	 rcx, rbp
  0005d	45 33 c0	 xor	 r8d, r8d
  00060	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  00065	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegQueryValueW

; 1408 :     if (rc == ERROR_MORE_DATA)

  0006b	3d ea 00 00 00	 cmp	 eax, 234		; 000000eaH
  00070	75 0b		 jne	 SHORT $LN9@PyQueryVal

; 1409 :         retSize = 256;

  00072	bf 00 01 00 00	 mov	 edi, 256		; 00000100H
  00077	89 7c 24 60	 mov	 DWORD PTR retSize$[rsp], edi
  0007b	eb 1e		 jmp	 SHORT $LN7@PyQueryVal
$LN9@PyQueryVal:

; 1410 :     else if (rc != ERROR_SUCCESS)

  0007d	85 c0		 test	 eax, eax
  0007f	74 16		 je	 SHORT $LN19@PyQueryVal

; 1411 :         return PyErr_SetFromWindowsErrWithFunction(rc,
; 1412 :                                                    "RegQueryValue");

  00081	8b c8		 mov	 ecx, eax
  00083	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00088	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  0008d	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 1443 : }

  00092	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00096	c3		 ret	 0
$LN19@PyQueryVal:

; 1411 :         return PyErr_SetFromWindowsErrWithFunction(rc,
; 1412 :                                                    "RegQueryValue");

  00097	8b 7c 24 60	 mov	 edi, DWORD PTR retSize$[rsp]
$LN7@PyQueryVal:

; 1413 : 
; 1414 :     bufSize = retSize;
; 1415 :     retBuf = (wchar_t *) PyMem_Malloc(bufSize);

  0009b	8b cf		 mov	 ecx, edi
  0009d	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  000a2	e8 00 00 00 00	 call	 PyMem_Malloc
  000a7	48 8b d8	 mov	 rbx, rax

; 1416 :     if (retBuf == NULL)

  000aa	48 85 c0	 test	 rax, rax
  000ad	75 19		 jne	 SHORT $LN15@PyQueryVal

; 1417 :         return PyErr_NoMemory();

  000af	e8 00 00 00 00	 call	 PyErr_NoMemory
  000b4	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000b9	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  000be	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 1443 : }

  000c3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000c7	c3		 ret	 0
$LN15@PyQueryVal:

; 1418 : 
; 1419 :     while (1) {
; 1420 :         retSize = bufSize;
; 1421 :         rc = RegQueryValueW(hKey, subKey, retBuf, &retSize);

  000c8	48 8b 54 24 68	 mov	 rdx, QWORD PTR subKey$[rsp]
  000cd	4c 8d 4c 24 60	 lea	 r9, QWORD PTR retSize$[rsp]
  000d2	4c 8b c0	 mov	 r8, rax
  000d5	48 8b cd	 mov	 rcx, rbp
  000d8	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  000dd	89 7c 24 60	 mov	 DWORD PTR retSize$[rsp], edi
  000e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegQueryValueW
  000e7	8b f0		 mov	 esi, eax

; 1422 :         if (rc != ERROR_MORE_DATA)

  000e9	3d ea 00 00 00	 cmp	 eax, 234		; 000000eaH
  000ee	75 37		 jne	 SHORT $LN16@PyQueryVal
$LL5@PyQueryVal:

; 1423 :             break;
; 1424 : 
; 1425 :         bufSize *= 2;

  000f0	03 ff		 add	 edi, edi

; 1426 :         tmp = (wchar_t *) PyMem_Realloc(retBuf, bufSize);

  000f2	48 8b cb	 mov	 rcx, rbx
  000f5	8b d7		 mov	 edx, edi
  000f7	e8 00 00 00 00	 call	 PyMem_Realloc

; 1427 :         if (tmp == NULL) {

  000fc	48 85 c0	 test	 rax, rax
  000ff	74 3b		 je	 SHORT $LN17@PyQueryVal

; 1418 : 
; 1419 :     while (1) {
; 1420 :         retSize = bufSize;
; 1421 :         rc = RegQueryValueW(hKey, subKey, retBuf, &retSize);

  00101	48 8b 54 24 68	 mov	 rdx, QWORD PTR subKey$[rsp]
  00106	4c 8d 4c 24 60	 lea	 r9, QWORD PTR retSize$[rsp]
  0010b	4c 8b c0	 mov	 r8, rax
  0010e	48 8b cd	 mov	 rcx, rbp

; 1430 :         }
; 1431 :         retBuf = tmp;

  00111	48 8b d8	 mov	 rbx, rax
  00114	89 7c 24 60	 mov	 DWORD PTR retSize$[rsp], edi
  00118	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegQueryValueW
  0011e	8b f0		 mov	 esi, eax
  00120	3d ea 00 00 00	 cmp	 eax, 234		; 000000eaH
  00125	74 c9		 je	 SHORT $LL5@PyQueryVal
$LN16@PyQueryVal:

; 1432 :     }
; 1433 : 
; 1434 :     if (rc != ERROR_SUCCESS) {

  00127	85 f6		 test	 esi, esi
  00129	74 20		 je	 SHORT $LN1@PyQueryVal

; 1435 :         PyMem_Free(retBuf);

  0012b	48 8b cb	 mov	 rcx, rbx
  0012e	e8 00 00 00 00	 call	 PyMem_Free

; 1436 :         return PyErr_SetFromWindowsErrWithFunction(rc,
; 1437 :                                                    "RegQueryValue");

  00133	8b ce		 mov	 ecx, esi
  00135	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  0013a	eb 38		 jmp	 SHORT $LN23@PyQueryVal
$LN17@PyQueryVal:

; 1428 :             PyMem_Free(retBuf);

  0013c	48 8b cb	 mov	 rcx, rbx
  0013f	e8 00 00 00 00	 call	 PyMem_Free

; 1429 :             return PyErr_NoMemory();

  00144	e8 00 00 00 00	 call	 PyErr_NoMemory
  00149	eb 29		 jmp	 SHORT $LN23@PyQueryVal
$LN1@PyQueryVal:

; 1438 :     }
; 1439 : 
; 1440 :     retStr = PyUnicode_FromWideChar(retBuf, wcslen(retBuf));

  0014b	48 83 c9 ff	 or	 rcx, -1
  0014f	33 c0		 xor	 eax, eax
  00151	48 8b fb	 mov	 rdi, rbx
  00154	66 f2 af	 repne scasw
  00157	48 f7 d1	 not	 rcx
  0015a	48 8d 51 ff	 lea	 rdx, QWORD PTR [rcx-1]
  0015e	48 8b cb	 mov	 rcx, rbx
  00161	e8 00 00 00 00	 call	 PyUnicode_FromWideChar

; 1441 :     PyMem_Free(retBuf);

  00166	48 8b cb	 mov	 rcx, rbx
  00169	48 8b f8	 mov	 rdi, rax
  0016c	e8 00 00 00 00	 call	 PyMem_Free

; 1442 :     return retStr;

  00171	48 8b c7	 mov	 rax, rdi
$LN23@PyQueryVal:
  00174	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00179	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0017e	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00183	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 1443 : }

  00188	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0018c	c3		 ret	 0
PyQueryValue ENDP
_TEXT	ENDS
PUBLIC	??_C@_02MPEHDMPO@Oi?$AA@			; `string'
PUBLIC	??_C@_0BA@KJKOIGEK@OZ?3QueryValueEx?$AA@	; `string'
EXTRN	__imp_RegQueryValueExW:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyQueryValueEx DD imagerel PyQueryValueEx
	DD	imagerel PyQueryValueEx+79
	DD	imagerel $unwind$PyQueryValueEx
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyQueryValueEx DD imagerel PyQueryValueEx+79
	DD	imagerel PyQueryValueEx+153
	DD	imagerel $chain$0$PyQueryValueEx
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyQueryValueEx DD imagerel PyQueryValueEx+153
	DD	imagerel PyQueryValueEx+188
	DD	imagerel $chain$2$PyQueryValueEx
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$PyQueryValueEx DD imagerel PyQueryValueEx+188
	DD	imagerel PyQueryValueEx+353
	DD	imagerel $chain$5$PyQueryValueEx
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$PyQueryValueEx DD imagerel PyQueryValueEx+353
	DD	imagerel PyQueryValueEx+383
	DD	imagerel $chain$7$PyQueryValueEx
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$PyQueryValueEx DD imagerel PyQueryValueEx+383
	DD	imagerel PyQueryValueEx+430
	DD	imagerel $chain$9$PyQueryValueEx
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$11$PyQueryValueEx DD imagerel PyQueryValueEx+430
	DD	imagerel PyQueryValueEx+480
	DD	imagerel $chain$11$PyQueryValueEx
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$11$PyQueryValueEx DD 040021H
	DD	0a7400H
	DD	0e6400H
	DD	imagerel PyQueryValueEx
	DD	imagerel PyQueryValueEx+79
	DD	imagerel $unwind$PyQueryValueEx
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$PyQueryValueEx DD 040021H
	DD	0a7400H
	DD	0e6400H
	DD	imagerel PyQueryValueEx
	DD	imagerel PyQueryValueEx+79
	DD	imagerel $unwind$PyQueryValueEx
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$PyQueryValueEx DD 040021H
	DD	0a7400H
	DD	0e6400H
	DD	imagerel PyQueryValueEx
	DD	imagerel PyQueryValueEx+79
	DD	imagerel $unwind$PyQueryValueEx
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$PyQueryValueEx DD 042221H
	DD	0a7422H
	DD	0e6400H
	DD	imagerel PyQueryValueEx
	DD	imagerel PyQueryValueEx+79
	DD	imagerel $unwind$PyQueryValueEx
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyQueryValueEx DD 020021H
	DD	0e6400H
	DD	imagerel PyQueryValueEx
	DD	imagerel PyQueryValueEx+79
	DD	imagerel $unwind$PyQueryValueEx
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyQueryValueEx DD 020521H
	DD	0e6405H
	DD	imagerel PyQueryValueEx
	DD	imagerel PyQueryValueEx+79
	DD	imagerel $unwind$PyQueryValueEx
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyQueryValueEx DD 030a01H
	DD	03003a20aH
	DD	05002H
xdata	ENDS
;	COMDAT ??_C@_02MPEHDMPO@Oi?$AA@
CONST	SEGMENT
??_C@_02MPEHDMPO@Oi?$AA@ DB 'Oi', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KJKOIGEK@OZ?3QueryValueEx?$AA@
CONST	SEGMENT
??_C@_0BA@KJKOIGEK@OZ?3QueryValueEx?$AA@ DB 'OZ:QueryValueEx', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyQueryValueEx
_TEXT	SEGMENT
typ$ = 48
valueName$ = 56
obKey$ = 64
hKey$ = 72
self$ = 112
args$ = 120
bufSize$ = 128
retSize$ = 136
PyQueryValueEx PROC					; COMDAT

; 1447 : {

  00000	40 55		 push	 rbp
  00002	53		 push	 rbx
  00003	48 8b ec	 mov	 rbp, rsp
  00006	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1448 :     HKEY hKey;
; 1449 :     PyObject *obKey;
; 1450 :     wchar_t *valueName;
; 1451 : 
; 1452 :     long rc;
; 1453 :     BYTE *retBuf, *tmp;
; 1454 :     DWORD bufSize = 0, retSize;
; 1455 :     DWORD typ;
; 1456 :     PyObject *obData;
; 1457 :     PyObject *result;
; 1458 : 
; 1459 :     if (!PyArg_ParseTuple(args, "OZ:QueryValueEx", &obKey, &valueName))

  0000a	48 8b ca	 mov	 rcx, rdx
  0000d	4c 8d 4d e0	 lea	 r9, QWORD PTR valueName$[rbp-88]
  00011	4c 8d 45 e8	 lea	 r8, QWORD PTR obKey$[rbp-88]
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@KJKOIGEK@OZ?3QueryValueEx?$AA@
  0001c	33 db		 xor	 ebx, ebx
  0001e	89 5d 28	 mov	 DWORD PTR bufSize$[rbp-88], ebx
  00021	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00026	85 c0		 test	 eax, eax
  00028	75 09		 jne	 SHORT $LN12@PyQueryVal@2
$LN23@PyQueryVal@2:

; 1460 :         return NULL;

  0002a	33 c0		 xor	 eax, eax

; 1503 : }

  0002c	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00030	5b		 pop	 rbx
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
$LN12@PyQueryVal@2:

; 1461 : 
; 1462 :     if (!PyHKEY_AsHKEY(obKey, &hKey, FALSE))

  00033	48 8b 4d e8	 mov	 rcx, QWORD PTR obKey$[rbp-88]
  00037	48 8d 55 f0	 lea	 rdx, QWORD PTR hKey$[rbp-88]
  0003b	45 33 c0	 xor	 r8d, r8d
  0003e	e8 00 00 00 00	 call	 PyHKEY_AsHKEY
  00043	85 c0		 test	 eax, eax

; 1463 :         return NULL;

  00045	74 e3		 je	 SHORT $LN23@PyQueryVal@2

; 1464 : 
; 1465 :     rc = RegQueryValueExW(hKey, valueName, NULL, NULL, NULL, &bufSize);

  00047	48 8b 55 e0	 mov	 rdx, QWORD PTR valueName$[rbp-88]
  0004b	48 8d 45 28	 lea	 rax, QWORD PTR bufSize$[rbp-88]
  0004f	48 89 74 24 70	 mov	 QWORD PTR [rsp+112], rsi
  00054	48 8b 75 f0	 mov	 rsi, QWORD PTR hKey$[rbp-88]
  00058	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0005d	45 33 c9	 xor	 r9d, r9d
  00060	45 33 c0	 xor	 r8d, r8d
  00063	48 8b ce	 mov	 rcx, rsi
  00066	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  0006b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegQueryValueExW

; 1466 :     if (rc == ERROR_MORE_DATA)

  00071	3d ea 00 00 00	 cmp	 eax, 234		; 000000eaH
  00076	75 0a		 jne	 SHORT $LN10@PyQueryVal@2

; 1467 :         bufSize = 256;

  00078	b8 00 01 00 00	 mov	 eax, 256		; 00000100H
  0007d	89 45 28	 mov	 DWORD PTR bufSize$[rbp-88], eax
  00080	eb 1a		 jmp	 SHORT $LN8@PyQueryVal@2
$LN10@PyQueryVal@2:

; 1468 :     else if (rc != ERROR_SUCCESS)

  00082	85 c0		 test	 eax, eax
  00084	74 13		 je	 SHORT $LN20@PyQueryVal@2

; 1469 :         return PyErr_SetFromWindowsErrWithFunction(rc,
; 1470 :                                                    "RegQueryValueEx");

  00086	8b c8		 mov	 ecx, eax
  00088	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  0008d	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]

; 1503 : }

  00092	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00096	5b		 pop	 rbx
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
$LN20@PyQueryVal@2:

; 1469 :         return PyErr_SetFromWindowsErrWithFunction(rc,
; 1470 :                                                    "RegQueryValueEx");

  00099	8b 45 28	 mov	 eax, DWORD PTR bufSize$[rbp-88]
$LN8@PyQueryVal@2:

; 1471 :     retBuf = (BYTE *)PyMem_Malloc(bufSize);

  0009c	8b c8		 mov	 ecx, eax
  0009e	e8 00 00 00 00	 call	 PyMem_Malloc
  000a3	48 8b d8	 mov	 rbx, rax

; 1472 :     if (retBuf == NULL)

  000a6	48 85 c0	 test	 rax, rax
  000a9	75 11		 jne	 SHORT $LN16@PyQueryVal@2

; 1473 :         return PyErr_NoMemory();

  000ab	e8 00 00 00 00	 call	 PyErr_NoMemory
  000b0	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]

; 1503 : }

  000b5	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000b9	5b		 pop	 rbx
  000ba	5d		 pop	 rbp
  000bb	c3		 ret	 0
$LN16@PyQueryVal@2:

; 1474 : 
; 1475 :     while (1) {
; 1476 :         retSize = bufSize;

  000bc	8b 45 28	 mov	 eax, DWORD PTR bufSize$[rbp-88]

; 1477 :         rc = RegQueryValueExW(hKey, valueName, NULL, &typ,
; 1478 :                              (BYTE *)retBuf, &retSize);

  000bf	48 8b 55 e0	 mov	 rdx, QWORD PTR valueName$[rbp-88]
  000c3	4c 8d 4d d8	 lea	 r9, QWORD PTR typ$[rbp-88]
  000c7	89 45 30	 mov	 DWORD PTR retSize$[rbp-88], eax
  000ca	48 8d 45 30	 lea	 rax, QWORD PTR retSize$[rbp-88]
  000ce	45 33 c0	 xor	 r8d, r8d
  000d1	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000d6	48 8b ce	 mov	 rcx, rsi
  000d9	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  000de	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  000e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegQueryValueExW
  000e9	8b f8		 mov	 edi, eax

; 1479 :         if (rc != ERROR_MORE_DATA)

  000eb	3d ea 00 00 00	 cmp	 eax, 234		; 000000eaH
  000f0	75 4b		 jne	 SHORT $LN17@PyQueryVal@2
$LL6@PyQueryVal@2:

; 1480 :             break;
; 1481 : 
; 1482 :         bufSize *= 2;

  000f2	8b 45 28	 mov	 eax, DWORD PTR bufSize$[rbp-88]

; 1483 :         tmp = (char *) PyMem_Realloc(retBuf, bufSize);

  000f5	48 8b cb	 mov	 rcx, rbx
  000f8	03 c0		 add	 eax, eax
  000fa	8b d0		 mov	 edx, eax
  000fc	89 45 28	 mov	 DWORD PTR bufSize$[rbp-88], eax
  000ff	e8 00 00 00 00	 call	 PyMem_Realloc

; 1484 :         if (tmp == NULL) {

  00104	48 85 c0	 test	 rax, rax
  00107	74 58		 je	 SHORT $LN18@PyQueryVal@2

; 1477 :         rc = RegQueryValueExW(hKey, valueName, NULL, &typ,
; 1478 :                              (BYTE *)retBuf, &retSize);

  00109	8b 4d 28	 mov	 ecx, DWORD PTR bufSize$[rbp-88]
  0010c	48 8b 55 e0	 mov	 rdx, QWORD PTR valueName$[rbp-88]
  00110	4c 8d 4d d8	 lea	 r9, QWORD PTR typ$[rbp-88]
  00114	89 4d 30	 mov	 DWORD PTR retSize$[rbp-88], ecx
  00117	48 8d 4d 30	 lea	 rcx, QWORD PTR retSize$[rbp-88]
  0011b	45 33 c0	 xor	 r8d, r8d
  0011e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00123	48 8b ce	 mov	 rcx, rsi

; 1487 :         }
; 1488 :        retBuf = tmp;

  00126	48 8b d8	 mov	 rbx, rax
  00129	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0012e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegQueryValueExW
  00134	8b f8		 mov	 edi, eax
  00136	3d ea 00 00 00	 cmp	 eax, 234		; 000000eaH
  0013b	74 b5		 je	 SHORT $LL6@PyQueryVal@2
$LN17@PyQueryVal@2:

; 1489 :     }
; 1490 : 
; 1491 :     if (rc != ERROR_SUCCESS) {
; 1492 :         PyMem_Free(retBuf);

  0013d	48 8b cb	 mov	 rcx, rbx
  00140	85 ff		 test	 edi, edi
  00142	74 3b		 je	 SHORT $LN2@PyQueryVal@2
  00144	e8 00 00 00 00	 call	 PyMem_Free

; 1493 :         return PyErr_SetFromWindowsErrWithFunction(rc,
; 1494 :                                                    "RegQueryValueEx");

  00149	8b cf		 mov	 ecx, edi
  0014b	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00150	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]
  00155	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]

; 1503 : }

  0015a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0015e	5b		 pop	 rbx
  0015f	5d		 pop	 rbp
  00160	c3		 ret	 0
$LN18@PyQueryVal@2:

; 1485 :             PyMem_Free(retBuf);

  00161	48 8b cb	 mov	 rcx, rbx
  00164	e8 00 00 00 00	 call	 PyMem_Free

; 1486 :             return PyErr_NoMemory();

  00169	e8 00 00 00 00	 call	 PyErr_NoMemory
  0016e	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]
  00173	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]

; 1503 : }

  00178	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0017c	5b		 pop	 rbx
  0017d	5d		 pop	 rbp
  0017e	c3		 ret	 0
$LN2@PyQueryVal@2:

; 1495 :     }
; 1496 :     obData = Reg2Py(retBuf, bufSize, typ);

  0017f	44 8b 45 d8	 mov	 r8d, DWORD PTR typ$[rbp-88]
  00183	8b 55 28	 mov	 edx, DWORD PTR bufSize$[rbp-88]
  00186	e8 00 00 00 00	 call	 Reg2Py

; 1497 :     PyMem_Free(retBuf);

  0018b	48 8b cb	 mov	 rcx, rbx
  0018e	48 8b f8	 mov	 rdi, rax
  00191	e8 00 00 00 00	 call	 PyMem_Free

; 1498 :     if (obData == NULL)

  00196	48 85 ff	 test	 rdi, rdi
  00199	75 13		 jne	 SHORT $LN1@PyQueryVal@2

; 1499 :         return NULL;

  0019b	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]
  001a0	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
  001a5	33 c0		 xor	 eax, eax

; 1503 : }

  001a7	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001ab	5b		 pop	 rbx
  001ac	5d		 pop	 rbp
  001ad	c3		 ret	 0
$LN1@PyQueryVal@2:

; 1500 :     result = Py_BuildValue("Oi", obData, typ);

  001ae	44 8b 45 d8	 mov	 r8d, DWORD PTR typ$[rbp-88]
  001b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02MPEHDMPO@Oi?$AA@
  001b9	48 8b d7	 mov	 rdx, rdi
  001bc	e8 00 00 00 00	 call	 Py_BuildValue

; 1501 :     Py_DECREF(obData);

  001c1	48 8b cf	 mov	 rcx, rdi
  001c4	48 8b d8	 mov	 rbx, rax
  001c7	e8 00 00 00 00	 call	 _Py_DecRef
  001cc	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]
  001d1	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]

; 1502 :     return result;

  001d6	48 8b c3	 mov	 rax, rbx

; 1503 : }

  001d9	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001dd	5b		 pop	 rbx
  001de	5d		 pop	 rbp
  001df	c3		 ret	 0
PyQueryValueEx ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@PMICBGHH@Ou?3SaveKey?$AA@		; `string'
EXTRN	__imp_RegSaveKeyW:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PySaveKey DD imagerel PySaveKey
	DD	imagerel PySaveKey+62
	DD	imagerel $unwind$PySaveKey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PySaveKey DD imagerel PySaveKey+62
	DD	imagerel PySaveKey+118
	DD	imagerel $chain$1$PySaveKey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PySaveKey DD imagerel PySaveKey+118
	DD	imagerel PySaveKey+135
	DD	imagerel $chain$2$PySaveKey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PySaveKey DD imagerel PySaveKey+135
	DD	imagerel PySaveKey+221
	DD	imagerel $chain$4$PySaveKey
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PySaveKey DD 020021H
	DD	087400H
	DD	imagerel PySaveKey
	DD	imagerel PySaveKey+62
	DD	imagerel $unwind$PySaveKey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PySaveKey DD 020021H
	DD	087400H
	DD	imagerel PySaveKey
	DD	imagerel PySaveKey+62
	DD	imagerel $unwind$PySaveKey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PySaveKey DD 040a21H
	DD	08740aH
	DD	0a3405H
	DD	imagerel PySaveKey
	DD	imagerel PySaveKey+62
	DD	imagerel $unwind$PySaveKey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySaveKey DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_0L@PMICBGHH@Ou?3SaveKey?$AA@
CONST	SEGMENT
??_C@_0L@PMICBGHH@Ou?3SaveKey?$AA@ DB 'Ou:SaveKey', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\pc\winreg.c
CONST	ENDS
;	COMDAT PySaveKey
_TEXT	SEGMENT
hKey$ = 48
self$ = 80
args$ = 88
obKey$ = 96
fileName$ = 104
PySaveKey PROC						; COMDAT

; 1508 : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1509 :     HKEY hKey;
; 1510 :     PyObject *obKey;
; 1511 :     wchar_t *fileName;
; 1512 :     LPSECURITY_ATTRIBUTES pSA = NULL;
; 1513 : 
; 1514 :     long rc;
; 1515 :     if (!PyArg_ParseTuple(args, "Ou:SaveKey", &obKey, &fileName))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 4c 24 68	 lea	 r9, QWORD PTR fileName$[rsp]
  0000c	4c 8d 44 24 60	 lea	 r8, QWORD PTR obKey$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@PMICBGHH@Ou?3SaveKey?$AA@
  00018	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0001d	85 c0		 test	 eax, eax
  0001f	75 07		 jne	 SHORT $LN3@PySaveKey
$LN11@PySaveKey:

; 1516 :         return NULL;

  00021	33 c0		 xor	 eax, eax

; 1530 : }

  00023	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00027	c3		 ret	 0
$LN3@PySaveKey:

; 1517 :     if (!PyHKEY_AsHKEY(obKey, &hKey, FALSE))

  00028	48 8b 4c 24 60	 mov	 rcx, QWORD PTR obKey$[rsp]
  0002d	48 8d 54 24 30	 lea	 rdx, QWORD PTR hKey$[rsp]
  00032	45 33 c0	 xor	 r8d, r8d
  00035	e8 00 00 00 00	 call	 PyHKEY_AsHKEY
  0003a	85 c0		 test	 eax, eax

; 1518 :         return NULL;

  0003c	74 e3		 je	 SHORT $LN11@PySaveKey

; 1519 : /*  One day we may get security into the core?
; 1520 :     if (!PyWinObject_AsSECURITY_ATTRIBUTES(obSA, &pSA, TRUE))
; 1521 :         return NULL;
; 1522 : */
; 1523 :     Py_BEGIN_ALLOW_THREADS

  0003e	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  00043	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  00048	e8 00 00 00 00	 call	 PyEval_SaveThread

; 1524 :     rc = RegSaveKeyW(hKey, fileName, pSA );

  0004d	48 8b 54 24 68	 mov	 rdx, QWORD PTR fileName$[rsp]
  00052	48 8b 4c 24 30	 mov	 rcx, QWORD PTR hKey$[rsp]
  00057	45 33 c0	 xor	 r8d, r8d
  0005a	48 8b d8	 mov	 rbx, rax
  0005d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegSaveKeyW

; 1525 :     Py_END_ALLOW_THREADS

  00063	48 8b cb	 mov	 rcx, rbx
  00066	8b f8		 mov	 edi, eax
  00068	e8 00 00 00 00	 call	 PyEval_RestoreThread
  0006d	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]

; 1526 :     if (rc != ERROR_SUCCESS)

  00072	85 ff		 test	 edi, edi
  00074	74 11		 je	 SHORT $LN1@PySaveKey

; 1527 :         return PyErr_SetFromWindowsErrWithFunction(rc, "RegSaveKey");

  00076	8b cf		 mov	 ecx, edi
  00078	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  0007d	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 1530 : }

  00082	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00086	c3		 ret	 0
$LN1@PySaveKey:

; 1528 :     Py_INCREF(Py_None);

  00087	e8 00 00 00 00	 call	 _Py_PXCTX
  0008c	85 c0		 test	 eax, eax
  0008e	75 3c		 jne	 SHORT $LN7@PySaveKey
  00090	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00097	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000a5	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000ab	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000b3	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b8	85 c0		 test	 eax, eax
  000ba	75 09		 jne	 SHORT $LN6@PySaveKey
  000bc	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  000c3	74 07		 je	 SHORT $LN7@PySaveKey
$LN6@PySaveKey:
  000c5	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN7@PySaveKey:

; 1529 :     return Py_None;

  000cc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000d3	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 1530 : }

  000d8	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000dc	c3		 ret	 0
PySaveKey ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@KBMNOFOJ@Type?5must?5be?5winreg?4REG_SZ?$AA@ ; `string'
PUBLIC	??_C@_0P@JIHFGHCK@OZiu?$CD?3SetValue?$AA@	; `string'
EXTRN	__imp_RegSetValueW:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySetValue DD imagerel PySetValue
	DD	imagerel PySetValue+119
	DD	imagerel $unwind$PySetValue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PySetValue DD imagerel PySetValue+119
	DD	imagerel PySetValue+196
	DD	imagerel $chain$1$PySetValue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PySetValue DD imagerel PySetValue+196
	DD	imagerel PySetValue+213
	DD	imagerel $chain$2$PySetValue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PySetValue DD imagerel PySetValue+213
	DD	imagerel PySetValue+242
	DD	imagerel $chain$4$PySetValue
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PySetValue DD 020021H
	DD	0c7400H
	DD	imagerel PySetValue
	DD	imagerel PySetValue+119
	DD	imagerel $unwind$PySetValue
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PySetValue DD 020021H
	DD	0c7400H
	DD	imagerel PySetValue
	DD	imagerel PySetValue+119
	DD	imagerel $unwind$PySetValue
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PySetValue DD 040a21H
	DD	0c740aH
	DD	0e3405H
	DD	imagerel PySetValue
	DD	imagerel PySetValue+119
	DD	imagerel $unwind$PySetValue
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySetValue DD 010701H
	DD	0c207H
xdata	ENDS
;	COMDAT ??_C@_0BL@KBMNOFOJ@Type?5must?5be?5winreg?4REG_SZ?$AA@
CONST	SEGMENT
??_C@_0BL@KBMNOFOJ@Type?5must?5be?5winreg?4REG_SZ?$AA@ DB 'Type must be w'
	DB	'inreg.REG_SZ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JIHFGHCK@OZiu?$CD?3SetValue?$AA@
CONST	SEGMENT
??_C@_0P@JIHFGHCK@OZiu?$CD?3SetValue?$AA@ DB 'OZiu#:SetValue', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PySetValue
_TEXT	SEGMENT
obKey$ = 64
str$ = 72
subKey$ = 80
hKey$ = 88
self$ = 112
args$ = 120
typ$ = 128
len$ = 136
PySetValue PROC						; COMDAT

; 1534 : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1535 :     HKEY hKey;
; 1536 :     PyObject *obKey;
; 1537 :     wchar_t *subKey;
; 1538 :     wchar_t *str;
; 1539 :     DWORD typ;
; 1540 :     DWORD len;
; 1541 :     long rc;
; 1542 :     if (!PyArg_ParseTuple(args, "OZiu#:SetValue",
; 1543 :                           &obKey,
; 1544 :                           &subKey,
; 1545 :                           &typ,
; 1546 :                           &str,
; 1547 :                           &len))

  00007	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  0000b	48 8b c2	 mov	 rax, rdx
  0000e	4d 8d 4b e8	 lea	 r9, QWORD PTR [r11-24]
  00012	49 89 4b c8	 mov	 QWORD PTR [r11-56], rcx
  00016	49 8d 4b e0	 lea	 rcx, QWORD PTR [r11-32]
  0001a	4d 8d 43 d8	 lea	 r8, QWORD PTR [r11-40]
  0001e	49 89 4b c0	 mov	 QWORD PTR [r11-64], rcx
  00022	49 8d 4b 18	 lea	 rcx, QWORD PTR [r11+24]
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@JIHFGHCK@OZiu?$CD?3SetValue?$AA@
  0002d	49 89 4b b8	 mov	 QWORD PTR [r11-72], rcx
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00039	85 c0		 test	 eax, eax

; 1548 :         return NULL;

  0003b	74 33		 je	 SHORT $LN8@PySetValue

; 1549 :     if (!PyHKEY_AsHKEY(obKey, &hKey, FALSE))

  0003d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obKey$[rsp]
  00042	48 8d 54 24 58	 lea	 rdx, QWORD PTR hKey$[rsp]
  00047	45 33 c0	 xor	 r8d, r8d
  0004a	e8 00 00 00 00	 call	 PyHKEY_AsHKEY
  0004f	85 c0		 test	 eax, eax

; 1550 :         return NULL;

  00051	74 1d		 je	 SHORT $LN8@PySetValue

; 1551 :     if (typ != REG_SZ) {

  00053	83 bc 24 80 00
	00 00 01	 cmp	 DWORD PTR typ$[rsp], 1
  0005b	74 1a		 je	 SHORT $LN2@PySetValue

; 1552 :         PyErr_SetString(PyExc_TypeError,
; 1553 :                         "Type must be winreg.REG_SZ");

  0005d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00064	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@KBMNOFOJ@Type?5must?5be?5winreg?4REG_SZ?$AA@
  0006b	e8 00 00 00 00	 call	 PyErr_SetString
$LN8@PySetValue:

; 1554 :         return NULL;

  00070	33 c0		 xor	 eax, eax

; 1564 : }

  00072	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00076	c3		 ret	 0
$LN2@PySetValue:
  00077	48 89 5c 24 70	 mov	 QWORD PTR [rsp+112], rbx
  0007c	48 89 7c 24 60	 mov	 QWORD PTR [rsp+96], rdi

; 1555 :     }
; 1556 : 
; 1557 :     Py_BEGIN_ALLOW_THREADS

  00081	e8 00 00 00 00	 call	 PyEval_SaveThread

; 1558 :     rc = RegSetValueW(hKey, subKey, REG_SZ, str, len+1);

  00086	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR len$[rsp]
  0008d	4c 8b 4c 24 48	 mov	 r9, QWORD PTR str$[rsp]
  00092	48 8b 54 24 50	 mov	 rdx, QWORD PTR subKey$[rsp]
  00097	ff c1		 inc	 ecx
  00099	41 b8 01 00 00
	00		 mov	 r8d, 1
  0009f	48 8b d8	 mov	 rbx, rax
  000a2	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000a6	48 8b 4c 24 58	 mov	 rcx, QWORD PTR hKey$[rsp]
  000ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegSetValueW

; 1559 :     Py_END_ALLOW_THREADS

  000b1	48 8b cb	 mov	 rcx, rbx
  000b4	8b f8		 mov	 edi, eax
  000b6	e8 00 00 00 00	 call	 PyEval_RestoreThread
  000bb	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]

; 1560 :     if (rc != ERROR_SUCCESS)

  000c0	85 ff		 test	 edi, edi
  000c2	74 11		 je	 SHORT $LN1@PySetValue

; 1561 :         return PyErr_SetFromWindowsErrWithFunction(rc, "RegSetValue");

  000c4	8b cf		 mov	 ecx, edi
  000c6	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  000cb	48 8b 7c 24 60	 mov	 rdi, QWORD PTR [rsp+96]

; 1564 : }

  000d0	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000d4	c3		 ret	 0
$LN1@PySetValue:

; 1562 :     Py_INCREF(Py_None);

  000d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000dc	e8 00 00 00 00	 call	 _Py_IncRef
  000e1	48 8b 7c 24 60	 mov	 rdi, QWORD PTR [rsp+96]

; 1563 :     return Py_None;

  000e6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1564 : }

  000ed	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000f1	c3		 ret	 0
PySetValue ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DC@HEEHIAF@Could?5not?5convert?5the?5data?5to?5th@ ; `string'
PUBLIC	??_C@_0BB@FPDLDIPL@OZOiO?3SetValueEx?$AA@	; `string'
EXTRN	_PxMem_Free:PROC
EXTRN	__imp_RegSetValueExW:PROC
EXTRN	PyExc_ValueError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySetValueEx DD imagerel PySetValueEx
	DD	imagerel PySetValueEx+153
	DD	imagerel $unwind$PySetValueEx
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PySetValueEx DD imagerel PySetValueEx+153
	DD	imagerel PySetValueEx+260
	DD	imagerel $chain$2$PySetValueEx
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PySetValueEx DD imagerel PySetValueEx+260
	DD	imagerel PySetValueEx+282
	DD	imagerel $chain$3$PySetValueEx
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PySetValueEx DD imagerel PySetValueEx+282
	DD	imagerel PySetValueEx+302
	DD	imagerel $chain$4$PySetValueEx
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$PySetValueEx DD imagerel PySetValueEx+302
	DD	imagerel PySetValueEx+334
	DD	imagerel $chain$6$PySetValueEx
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$PySetValueEx DD 020021H
	DD	0116400H
	DD	imagerel PySetValueEx
	DD	imagerel PySetValueEx+153
	DD	imagerel $unwind$PySetValueEx
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PySetValueEx DD 020021H
	DD	0116400H
	DD	imagerel PySetValueEx
	DD	imagerel PySetValueEx+153
	DD	imagerel $unwind$PySetValueEx
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PySetValueEx DD 040021H
	DD	0e7400H
	DD	0116400H
	DD	imagerel PySetValueEx
	DD	imagerel PySetValueEx+153
	DD	imagerel $unwind$PySetValueEx
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PySetValueEx DD 061521H
	DD	0e7415H
	DD	0116410H
	DD	0103408H
	DD	imagerel PySetValueEx
	DD	imagerel PySetValueEx+153
	DD	imagerel $unwind$PySetValueEx
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySetValueEx DD 010701H
	DD	0e207H
xdata	ENDS
;	COMDAT ??_C@_0DC@HEEHIAF@Could?5not?5convert?5the?5data?5to?5th@
CONST	SEGMENT
??_C@_0DC@HEEHIAF@Could?5not?5convert?5the?5data?5to?5th@ DB 'Could not c'
	DB	'onvert the data to the specified type.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FPDLDIPL@OZOiO?3SetValueEx?$AA@
CONST	SEGMENT
??_C@_0BB@FPDLDIPL@OZOiO?3SetValueEx?$AA@ DB 'OZOiO:SetValueEx', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PySetValueEx
_TEXT	SEGMENT
obKey$ = 64
value$ = 72
data$ = 80
valueName$ = 88
hKey$ = 96
self$ = 128
args$ = 136
typ$ = 144
len$ = 152
PySetValueEx PROC					; COMDAT

; 1568 : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 1569 :     HKEY hKey;
; 1570 :     PyObject *obKey;
; 1571 :     wchar_t *valueName;
; 1572 :     PyObject *obRes;
; 1573 :     PyObject *value;
; 1574 :     BYTE *data;
; 1575 :     DWORD len;
; 1576 :     DWORD typ;
; 1577 : 
; 1578 :     LONG rc;
; 1579 : 
; 1580 :     if (!PyArg_ParseTuple(args, "OZOiO:SetValueEx",
; 1581 :                           &obKey,
; 1582 :                           &valueName,
; 1583 :                           &obRes,
; 1584 :                           &typ,
; 1585 :                           &value))

  00007	49 8d 4b d0	 lea	 rcx, QWORD PTR [r11-48]
  0000b	48 8b c2	 mov	 rax, rdx
  0000e	4d 8d 4b e0	 lea	 r9, QWORD PTR [r11-32]
  00012	49 89 4b b8	 mov	 QWORD PTR [r11-72], rcx
  00016	49 8d 4b 18	 lea	 rcx, QWORD PTR [r11+24]
  0001a	4d 8d 43 c8	 lea	 r8, QWORD PTR [r11-56]
  0001e	49 89 4b b0	 mov	 QWORD PTR [r11-80], rcx
  00022	49 8d 4b f0	 lea	 rcx, QWORD PTR [r11-16]
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@FPDLDIPL@OZOiO?3SetValueEx?$AA@
  0002d	49 89 4b a8	 mov	 QWORD PTR [r11-88], rcx
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00039	85 c0		 test	 eax, eax

; 1586 :         return NULL;

  0003b	74 55		 je	 SHORT $LN2@PySetValue@2

; 1587 :     if (!PyHKEY_AsHKEY(obKey, &hKey, FALSE))

  0003d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obKey$[rsp]
  00042	48 8d 54 24 60	 lea	 rdx, QWORD PTR hKey$[rsp]
  00047	45 33 c0	 xor	 r8d, r8d
  0004a	e8 00 00 00 00	 call	 PyHKEY_AsHKEY
  0004f	85 c0		 test	 eax, eax

; 1588 :         return NULL;

  00051	74 3f		 je	 SHORT $LN2@PySetValue@2

; 1589 :     if (!Py2Reg(value, typ, &data, &len))

  00053	8b 94 24 90 00
	00 00		 mov	 edx, DWORD PTR typ$[rsp]
  0005a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR value$[rsp]
  0005f	4c 8d 8c 24 98
	00 00 00	 lea	 r9, QWORD PTR len$[rsp]
  00067	4c 8d 44 24 50	 lea	 r8, QWORD PTR data$[rsp]
  0006c	e8 00 00 00 00	 call	 Py2Reg
  00071	85 c0		 test	 eax, eax
  00073	75 24		 jne	 SHORT $LN3@PySetValue@2

; 1590 :     {
; 1591 :         if (!PyErr_Occurred())

  00075	e8 00 00 00 00	 call	 PyErr_Occurred
  0007a	48 85 c0	 test	 rax, rax
  0007d	75 13		 jne	 SHORT $LN2@PySetValue@2

; 1592 :             PyErr_SetString(PyExc_ValueError,
; 1593 :                      "Could not convert the data to the specified type.");

  0007f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00086	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@HEEHIAF@Could?5not?5convert?5the?5data?5to?5th@
  0008d	e8 00 00 00 00	 call	 PyErr_SetString
$LN2@PySetValue@2:

; 1594 :         return NULL;

  00092	33 c0		 xor	 eax, eax

; 1605 : }

  00094	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00098	c3		 ret	 0
$LN3@PySetValue@2:
  00099	48 89 9c 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rbx
  000a1	48 89 b4 24 88
	00 00 00	 mov	 QWORD PTR [rsp+136], rsi
  000a9	48 89 7c 24 70	 mov	 QWORD PTR [rsp+112], rdi

; 1595 :     }
; 1596 :     Py_BEGIN_ALLOW_THREADS

  000ae	e8 00 00 00 00	 call	 PyEval_SaveThread

; 1597 :     rc = RegSetValueExW(hKey, valueName, 0, typ, data, len);

  000b3	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR len$[rsp]
  000ba	48 8b 7c 24 50	 mov	 rdi, QWORD PTR data$[rsp]
  000bf	44 8b 8c 24 90
	00 00 00	 mov	 r9d, DWORD PTR typ$[rsp]
  000c7	48 8b 54 24 58	 mov	 rdx, QWORD PTR valueName$[rsp]
  000cc	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  000d0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR hKey$[rsp]
  000d5	45 33 c0	 xor	 r8d, r8d
  000d8	48 8b d8	 mov	 rbx, rax
  000db	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  000e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegSetValueExW

; 1598 :     Py_END_ALLOW_THREADS

  000e6	48 8b cb	 mov	 rcx, rbx
  000e9	8b f0		 mov	 esi, eax
  000eb	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 1599 :     PyMem_DEL(data);

  000f0	e8 00 00 00 00	 call	 _Py_PXCTX
  000f5	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR [rsp+128]
  000fd	48 8b cf	 mov	 rcx, rdi
  00100	85 c0		 test	 eax, eax
  00102	74 07		 je	 SHORT $LN8@PySetValue@2
  00104	e8 00 00 00 00	 call	 _PxMem_Free
  00109	eb 06		 jmp	 SHORT $LN9@PySetValue@2
$LN8@PySetValue@2:
  0010b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN9@PySetValue@2:
  00111	48 8b 7c 24 70	 mov	 rdi, QWORD PTR [rsp+112]

; 1600 :     if (rc != ERROR_SUCCESS)

  00116	85 f6		 test	 esi, esi
  00118	74 14		 je	 SHORT $LN1@PySetValue@2

; 1601 :         return PyErr_SetFromWindowsErrWithFunction(rc,
; 1602 :                                                    "RegSetValueEx");

  0011a	8b ce		 mov	 ecx, esi
  0011c	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00121	48 8b b4 24 88
	00 00 00	 mov	 rsi, QWORD PTR [rsp+136]

; 1605 : }

  00129	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0012d	c3		 ret	 0
$LN1@PySetValue@2:

; 1603 :     Py_INCREF(Py_None);

  0012e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00135	e8 00 00 00 00	 call	 _Py_IncRef
  0013a	48 8b b4 24 88
	00 00 00	 mov	 rsi, QWORD PTR [rsp+136]

; 1604 :     return Py_None;

  00142	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1605 : }

  00149	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0014d	c3		 ret	 0
PySetValueEx ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@MCEAONBI@RegDisableReflectionKey?$AA@	; `string'
PUBLIC	??_C@_0BH@ONBEGOOK@O?3DisableReflectionKey?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDisableReflectionKey DD imagerel PyDisableReflectionKey
	DD	imagerel PyDisableReflectionKey+64
	DD	imagerel $unwind$PyDisableReflectionKey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyDisableReflectionKey DD imagerel PyDisableReflectionKey+64
	DD	imagerel PyDisableReflectionKey+104
	DD	imagerel $chain$0$PyDisableReflectionKey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyDisableReflectionKey DD imagerel PyDisableReflectionKey+104
	DD	imagerel PyDisableReflectionKey+143
	DD	imagerel $chain$1$PyDisableReflectionKey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyDisableReflectionKey DD imagerel PyDisableReflectionKey+143
	DD	imagerel PyDisableReflectionKey+160
	DD	imagerel $chain$2$PyDisableReflectionKey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyDisableReflectionKey DD imagerel PyDisableReflectionKey+160
	DD	imagerel PyDisableReflectionKey+189
	DD	imagerel $chain$4$PyDisableReflectionKey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$PyDisableReflectionKey DD imagerel PyDisableReflectionKey+189
	DD	imagerel PyDisableReflectionKey+220
	DD	imagerel $chain$6$PyDisableReflectionKey
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$PyDisableReflectionKey DD 020021H
	DD	047400H
	DD	imagerel PyDisableReflectionKey
	DD	imagerel PyDisableReflectionKey+64
	DD	imagerel $unwind$PyDisableReflectionKey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyDisableReflectionKey DD 020021H
	DD	047400H
	DD	imagerel PyDisableReflectionKey
	DD	imagerel PyDisableReflectionKey+64
	DD	imagerel $unwind$PyDisableReflectionKey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyDisableReflectionKey DD 021H
	DD	imagerel PyDisableReflectionKey+64
	DD	imagerel PyDisableReflectionKey+104
	DD	imagerel $chain$0$PyDisableReflectionKey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyDisableReflectionKey DD 020521H
	DD	063405H
	DD	imagerel PyDisableReflectionKey+64
	DD	imagerel PyDisableReflectionKey+104
	DD	imagerel $chain$0$PyDisableReflectionKey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyDisableReflectionKey DD 020521H
	DD	047405H
	DD	imagerel PyDisableReflectionKey
	DD	imagerel PyDisableReflectionKey+64
	DD	imagerel $unwind$PyDisableReflectionKey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDisableReflectionKey DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BI@MCEAONBI@RegDisableReflectionKey?$AA@
CONST	SEGMENT
??_C@_0BI@MCEAONBI@RegDisableReflectionKey?$AA@ DB 'RegDisableReflectionK'
	DB	'ey', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@ONBEGOOK@O?3DisableReflectionKey?$AA@
CONST	SEGMENT
??_C@_0BH@ONBEGOOK@O?3DisableReflectionKey?$AA@ DB 'O:DisableReflectionKe'
	DB	'y', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyDisableReflectionKey
_TEXT	SEGMENT
self$ = 48
args$ = 56
obKey$ = 64
hKey$ = 72
PyDisableReflectionKey PROC				; COMDAT

; 1609 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1610 :     HKEY hKey;
; 1611 :     PyObject *obKey;
; 1612 :     HMODULE hMod;
; 1613 :     typedef LONG (WINAPI *RDRKFunc)(HKEY);
; 1614 :     RDRKFunc pfn = NULL;
; 1615 :     LONG rc;
; 1616 : 
; 1617 :     if (!PyArg_ParseTuple(args, "O:DisableReflectionKey", &obKey))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 44 24 40	 lea	 r8, QWORD PTR obKey$[rsp]
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@ONBEGOOK@O?3DisableReflectionKey?$AA@
  00013	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00018	85 c0		 test	 eax, eax
  0001a	75 07		 jne	 SHORT $LN5@PyDisableR
$LN10@PyDisableR:

; 1618 :         return NULL;

  0001c	33 c0		 xor	 eax, eax

; 1641 : }

  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	c3		 ret	 0
$LN5@PyDisableR:

; 1619 :     if (!PyHKEY_AsHKEY(obKey, &hKey, FALSE))

  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obKey$[rsp]
  00028	48 8d 54 24 48	 lea	 rdx, QWORD PTR hKey$[rsp]
  0002d	45 33 c0	 xor	 r8d, r8d
  00030	e8 00 00 00 00	 call	 PyHKEY_AsHKEY
  00035	85 c0		 test	 eax, eax

; 1620 :         return NULL;

  00037	74 e3		 je	 SHORT $LN10@PyDisableR

; 1621 : 
; 1622 :     /* Only available on 64bit platforms, so we must load it
; 1623 :        dynamically.*/
; 1624 :     hMod = GetModuleHandleW(L"advapi32.dll");

  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@JHLNAEJL@?$AAa?$AAd?$AAv?$AAa?$AAp?$AAi?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
  00040	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetModuleHandleW

; 1625 :     if (hMod)

  0004b	48 85 c0	 test	 rax, rax
  0004e	74 6d		 je	 SHORT $LN8@PyDisableR

; 1626 :         pfn = (RDRKFunc)GetProcAddress(hMod,
; 1627 :                                        "RegDisableReflectionKey");

  00050	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@MCEAONBI@RegDisableReflectionKey?$AA@
  00057	48 8b c8	 mov	 rcx, rax
  0005a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00060	48 8b f8	 mov	 rdi, rax

; 1628 :     if (!pfn) {

  00063	48 85 c0	 test	 rax, rax
  00066	74 55		 je	 SHORT $LN8@PyDisableR

; 1632 :     }
; 1633 :     Py_BEGIN_ALLOW_THREADS

  00068	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0006d	e8 00 00 00 00	 call	 PyEval_SaveThread

; 1634 :     rc = (*pfn)(hKey);

  00072	48 8b 4c 24 48	 mov	 rcx, QWORD PTR hKey$[rsp]
  00077	48 8b d8	 mov	 rbx, rax
  0007a	ff d7		 call	 rdi

; 1635 :     Py_END_ALLOW_THREADS

  0007c	48 8b cb	 mov	 rcx, rbx
  0007f	8b f8		 mov	 edi, eax
  00081	e8 00 00 00 00	 call	 PyEval_RestoreThread
  00086	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1636 :     if (rc != ERROR_SUCCESS)

  0008b	85 ff		 test	 edi, edi
  0008d	74 11		 je	 SHORT $LN1@PyDisableR

; 1637 :         return PyErr_SetFromWindowsErrWithFunction(rc,
; 1638 :                                                    "RegDisableReflectionKey");

  0008f	8b cf		 mov	 ecx, edi
  00091	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00096	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]

; 1641 : }

  0009b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0009f	c3		 ret	 0
$LN1@PyDisableR:

; 1639 :     Py_INCREF(Py_None);

  000a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000a7	e8 00 00 00 00	 call	 _Py_IncRef
  000ac	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]

; 1640 :     return Py_None;

  000b1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1641 : }

  000b8	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000bc	c3		 ret	 0
$LN8@PyDisableR:

; 1629 :         PyErr_SetString(PyExc_NotImplementedError,
; 1630 :                         "not implemented on this platform");

  000bd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_NotImplementedError
  000c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@ODEKPPJP@not?5implemented?5on?5this?5platform@
  000cb	e8 00 00 00 00	 call	 PyErr_SetString
  000d0	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]

; 1631 :         return NULL;

  000d5	33 c0		 xor	 eax, eax

; 1641 : }

  000d7	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000db	c3		 ret	 0
PyDisableReflectionKey ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@MJKGPAOP@RegEnableReflectionKey?$AA@	; `string'
PUBLIC	??_C@_0BG@PCFJIFND@O?3EnableReflectionKey?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyEnableReflectionKey DD imagerel PyEnableReflectionKey
	DD	imagerel PyEnableReflectionKey+64
	DD	imagerel $unwind$PyEnableReflectionKey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyEnableReflectionKey DD imagerel PyEnableReflectionKey+64
	DD	imagerel PyEnableReflectionKey+104
	DD	imagerel $chain$0$PyEnableReflectionKey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyEnableReflectionKey DD imagerel PyEnableReflectionKey+104
	DD	imagerel PyEnableReflectionKey+143
	DD	imagerel $chain$1$PyEnableReflectionKey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyEnableReflectionKey DD imagerel PyEnableReflectionKey+143
	DD	imagerel PyEnableReflectionKey+160
	DD	imagerel $chain$2$PyEnableReflectionKey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyEnableReflectionKey DD imagerel PyEnableReflectionKey+160
	DD	imagerel PyEnableReflectionKey+189
	DD	imagerel $chain$4$PyEnableReflectionKey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$PyEnableReflectionKey DD imagerel PyEnableReflectionKey+189
	DD	imagerel PyEnableReflectionKey+220
	DD	imagerel $chain$6$PyEnableReflectionKey
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$PyEnableReflectionKey DD 020021H
	DD	047400H
	DD	imagerel PyEnableReflectionKey
	DD	imagerel PyEnableReflectionKey+64
	DD	imagerel $unwind$PyEnableReflectionKey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyEnableReflectionKey DD 020021H
	DD	047400H
	DD	imagerel PyEnableReflectionKey
	DD	imagerel PyEnableReflectionKey+64
	DD	imagerel $unwind$PyEnableReflectionKey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyEnableReflectionKey DD 021H
	DD	imagerel PyEnableReflectionKey+64
	DD	imagerel PyEnableReflectionKey+104
	DD	imagerel $chain$0$PyEnableReflectionKey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyEnableReflectionKey DD 020521H
	DD	063405H
	DD	imagerel PyEnableReflectionKey+64
	DD	imagerel PyEnableReflectionKey+104
	DD	imagerel $chain$0$PyEnableReflectionKey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyEnableReflectionKey DD 020521H
	DD	047405H
	DD	imagerel PyEnableReflectionKey
	DD	imagerel PyEnableReflectionKey+64
	DD	imagerel $unwind$PyEnableReflectionKey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyEnableReflectionKey DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BH@MJKGPAOP@RegEnableReflectionKey?$AA@
CONST	SEGMENT
??_C@_0BH@MJKGPAOP@RegEnableReflectionKey?$AA@ DB 'RegEnableReflectionKey'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PCFJIFND@O?3EnableReflectionKey?$AA@
CONST	SEGMENT
??_C@_0BG@PCFJIFND@O?3EnableReflectionKey?$AA@ DB 'O:EnableReflectionKey', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyEnableReflectionKey
_TEXT	SEGMENT
self$ = 48
args$ = 56
obKey$ = 64
hKey$ = 72
PyEnableReflectionKey PROC				; COMDAT

; 1645 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1646 :     HKEY hKey;
; 1647 :     PyObject *obKey;
; 1648 :     HMODULE hMod;
; 1649 :     typedef LONG (WINAPI *RERKFunc)(HKEY);
; 1650 :     RERKFunc pfn = NULL;
; 1651 :     LONG rc;
; 1652 : 
; 1653 :     if (!PyArg_ParseTuple(args, "O:EnableReflectionKey", &obKey))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 44 24 40	 lea	 r8, QWORD PTR obKey$[rsp]
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@PCFJIFND@O?3EnableReflectionKey?$AA@
  00013	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00018	85 c0		 test	 eax, eax
  0001a	75 07		 jne	 SHORT $LN5@PyEnableRe
$LN10@PyEnableRe:

; 1654 :         return NULL;

  0001c	33 c0		 xor	 eax, eax

; 1677 : }

  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	c3		 ret	 0
$LN5@PyEnableRe:

; 1655 :     if (!PyHKEY_AsHKEY(obKey, &hKey, FALSE))

  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obKey$[rsp]
  00028	48 8d 54 24 48	 lea	 rdx, QWORD PTR hKey$[rsp]
  0002d	45 33 c0	 xor	 r8d, r8d
  00030	e8 00 00 00 00	 call	 PyHKEY_AsHKEY
  00035	85 c0		 test	 eax, eax

; 1656 :         return NULL;

  00037	74 e3		 je	 SHORT $LN10@PyEnableRe

; 1657 : 
; 1658 :     /* Only available on 64bit platforms, so we must load it
; 1659 :        dynamically.*/
; 1660 :     hMod = GetModuleHandleW(L"advapi32.dll");

  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@JHLNAEJL@?$AAa?$AAd?$AAv?$AAa?$AAp?$AAi?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
  00040	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetModuleHandleW

; 1661 :     if (hMod)

  0004b	48 85 c0	 test	 rax, rax
  0004e	74 6d		 je	 SHORT $LN8@PyEnableRe

; 1662 :         pfn = (RERKFunc)GetProcAddress(hMod,
; 1663 :                                        "RegEnableReflectionKey");

  00050	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@MJKGPAOP@RegEnableReflectionKey?$AA@
  00057	48 8b c8	 mov	 rcx, rax
  0005a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00060	48 8b f8	 mov	 rdi, rax

; 1664 :     if (!pfn) {

  00063	48 85 c0	 test	 rax, rax
  00066	74 55		 je	 SHORT $LN8@PyEnableRe

; 1668 :     }
; 1669 :     Py_BEGIN_ALLOW_THREADS

  00068	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0006d	e8 00 00 00 00	 call	 PyEval_SaveThread

; 1670 :     rc = (*pfn)(hKey);

  00072	48 8b 4c 24 48	 mov	 rcx, QWORD PTR hKey$[rsp]
  00077	48 8b d8	 mov	 rbx, rax
  0007a	ff d7		 call	 rdi

; 1671 :     Py_END_ALLOW_THREADS

  0007c	48 8b cb	 mov	 rcx, rbx
  0007f	8b f8		 mov	 edi, eax
  00081	e8 00 00 00 00	 call	 PyEval_RestoreThread
  00086	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1672 :     if (rc != ERROR_SUCCESS)

  0008b	85 ff		 test	 edi, edi
  0008d	74 11		 je	 SHORT $LN1@PyEnableRe

; 1673 :         return PyErr_SetFromWindowsErrWithFunction(rc,
; 1674 :                                                    "RegEnableReflectionKey");

  0008f	8b cf		 mov	 ecx, edi
  00091	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00096	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]

; 1677 : }

  0009b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0009f	c3		 ret	 0
$LN1@PyEnableRe:

; 1675 :     Py_INCREF(Py_None);

  000a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000a7	e8 00 00 00 00	 call	 _Py_IncRef
  000ac	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]

; 1676 :     return Py_None;

  000b1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1677 : }

  000b8	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000bc	c3		 ret	 0
$LN8@PyEnableRe:

; 1665 :         PyErr_SetString(PyExc_NotImplementedError,
; 1666 :                         "not implemented on this platform");

  000bd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_NotImplementedError
  000c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@ODEKPPJP@not?5implemented?5on?5this?5platform@
  000cb	e8 00 00 00 00	 call	 PyErr_SetString
  000d0	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]

; 1667 :         return NULL;

  000d5	33 c0		 xor	 eax, eax

; 1677 : }

  000d7	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000db	c3		 ret	 0
PyEnableReflectionKey ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@DOLEDKPN@RegQueryReflectionKey?$AA@	; `string'
PUBLIC	??_C@_0BF@KPOBMONN@O?3QueryReflectionKey?$AA@	; `string'
EXTRN	PyBool_FromLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyQueryReflectionKey DD imagerel PyQueryReflectionKey
	DD	imagerel PyQueryReflectionKey+64
	DD	imagerel $unwind$PyQueryReflectionKey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyQueryReflectionKey DD imagerel PyQueryReflectionKey+64
	DD	imagerel PyQueryReflectionKey+104
	DD	imagerel $chain$0$PyQueryReflectionKey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyQueryReflectionKey DD imagerel PyQueryReflectionKey+104
	DD	imagerel PyQueryReflectionKey+148
	DD	imagerel $chain$1$PyQueryReflectionKey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyQueryReflectionKey DD imagerel PyQueryReflectionKey+148
	DD	imagerel PyQueryReflectionKey+165
	DD	imagerel $chain$2$PyQueryReflectionKey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyQueryReflectionKey DD imagerel PyQueryReflectionKey+165
	DD	imagerel PyQueryReflectionKey+184
	DD	imagerel $chain$4$PyQueryReflectionKey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$PyQueryReflectionKey DD imagerel PyQueryReflectionKey+184
	DD	imagerel PyQueryReflectionKey+215
	DD	imagerel $chain$6$PyQueryReflectionKey
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$PyQueryReflectionKey DD 020021H
	DD	067400H
	DD	imagerel PyQueryReflectionKey
	DD	imagerel PyQueryReflectionKey+64
	DD	imagerel $unwind$PyQueryReflectionKey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyQueryReflectionKey DD 020021H
	DD	067400H
	DD	imagerel PyQueryReflectionKey
	DD	imagerel PyQueryReflectionKey+64
	DD	imagerel $unwind$PyQueryReflectionKey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyQueryReflectionKey DD 021H
	DD	imagerel PyQueryReflectionKey+64
	DD	imagerel PyQueryReflectionKey+104
	DD	imagerel $chain$0$PyQueryReflectionKey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyQueryReflectionKey DD 020521H
	DD	083405H
	DD	imagerel PyQueryReflectionKey+64
	DD	imagerel PyQueryReflectionKey+104
	DD	imagerel $chain$0$PyQueryReflectionKey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyQueryReflectionKey DD 020521H
	DD	067405H
	DD	imagerel PyQueryReflectionKey
	DD	imagerel PyQueryReflectionKey+64
	DD	imagerel $unwind$PyQueryReflectionKey
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyQueryReflectionKey DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0BG@DOLEDKPN@RegQueryReflectionKey?$AA@
CONST	SEGMENT
??_C@_0BG@DOLEDKPN@RegQueryReflectionKey?$AA@ DB 'RegQueryReflectionKey', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KPOBMONN@O?3QueryReflectionKey?$AA@
CONST	SEGMENT
??_C@_0BF@KPOBMONN@O?3QueryReflectionKey?$AA@ DB 'O:QueryReflectionKey', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyQueryReflectionKey
_TEXT	SEGMENT
hKey$ = 32
self$ = 64
args$ = 72
result$ = 80
obKey$ = 88
PyQueryReflectionKey PROC				; COMDAT

; 1681 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1682 :     HKEY hKey;
; 1683 :     PyObject *obKey;
; 1684 :     HMODULE hMod;
; 1685 :     typedef LONG (WINAPI *RQRKFunc)(HKEY, BOOL *);
; 1686 :     RQRKFunc pfn = NULL;
; 1687 :     BOOL result;
; 1688 :     LONG rc;
; 1689 : 
; 1690 :     if (!PyArg_ParseTuple(args, "O:QueryReflectionKey", &obKey))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 44 24 58	 lea	 r8, QWORD PTR obKey$[rsp]
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@KPOBMONN@O?3QueryReflectionKey?$AA@
  00013	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00018	85 c0		 test	 eax, eax
  0001a	75 07		 jne	 SHORT $LN5@PyQueryRef
$LN10@PyQueryRef:

; 1691 :         return NULL;

  0001c	33 c0		 xor	 eax, eax

; 1713 : }

  0001e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00022	c3		 ret	 0
$LN5@PyQueryRef:

; 1692 :     if (!PyHKEY_AsHKEY(obKey, &hKey, FALSE))

  00023	48 8b 4c 24 58	 mov	 rcx, QWORD PTR obKey$[rsp]
  00028	48 8d 54 24 20	 lea	 rdx, QWORD PTR hKey$[rsp]
  0002d	45 33 c0	 xor	 r8d, r8d
  00030	e8 00 00 00 00	 call	 PyHKEY_AsHKEY
  00035	85 c0		 test	 eax, eax

; 1693 :         return NULL;

  00037	74 e3		 je	 SHORT $LN10@PyQueryRef

; 1694 : 
; 1695 :     /* Only available on 64bit platforms, so we must load it
; 1696 :        dynamically.*/
; 1697 :     hMod = GetModuleHandleW(L"advapi32.dll");

  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@JHLNAEJL@?$AAa?$AAd?$AAv?$AAa?$AAp?$AAi?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
  00040	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetModuleHandleW

; 1698 :     if (hMod)

  0004b	48 85 c0	 test	 rax, rax
  0004e	74 68		 je	 SHORT $LN8@PyQueryRef

; 1699 :         pfn = (RQRKFunc)GetProcAddress(hMod,
; 1700 :                                        "RegQueryReflectionKey");

  00050	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@DOLEDKPN@RegQueryReflectionKey?$AA@
  00057	48 8b c8	 mov	 rcx, rax
  0005a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00060	48 8b f8	 mov	 rdi, rax

; 1701 :     if (!pfn) {

  00063	48 85 c0	 test	 rax, rax
  00066	74 50		 je	 SHORT $LN8@PyQueryRef

; 1705 :     }
; 1706 :     Py_BEGIN_ALLOW_THREADS

  00068	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0006d	e8 00 00 00 00	 call	 PyEval_SaveThread

; 1707 :     rc = (*pfn)(hKey, &result);

  00072	48 8b 4c 24 20	 mov	 rcx, QWORD PTR hKey$[rsp]
  00077	48 8d 54 24 50	 lea	 rdx, QWORD PTR result$[rsp]
  0007c	48 8b d8	 mov	 rbx, rax
  0007f	ff d7		 call	 rdi

; 1708 :     Py_END_ALLOW_THREADS

  00081	48 8b cb	 mov	 rcx, rbx
  00084	8b f8		 mov	 edi, eax
  00086	e8 00 00 00 00	 call	 PyEval_RestoreThread
  0008b	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 1709 :     if (rc != ERROR_SUCCESS)

  00090	85 ff		 test	 edi, edi
  00092	74 11		 je	 SHORT $LN1@PyQueryRef

; 1710 :         return PyErr_SetFromWindowsErrWithFunction(rc,
; 1711 :                                                    "RegQueryReflectionKey");

  00094	8b cf		 mov	 ecx, edi
  00096	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  0009b	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 1713 : }

  000a0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a4	c3		 ret	 0
$LN1@PyQueryRef:

; 1712 :     return PyBool_FromLong(result);

  000a5	8b 4c 24 50	 mov	 ecx, DWORD PTR result$[rsp]
  000a9	e8 00 00 00 00	 call	 PyBool_FromLong
  000ae	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 1713 : }

  000b3	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b7	c3		 ret	 0
$LN8@PyQueryRef:

; 1702 :         PyErr_SetString(PyExc_NotImplementedError,
; 1703 :                         "not implemented on this platform");

  000b8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_NotImplementedError
  000bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@ODEKPPJP@not?5implemented?5on?5this?5platform@
  000c6	e8 00 00 00 00	 call	 PyErr_SetString
  000cb	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 1704 :         return NULL;

  000d0	33 c0		 xor	 eax, eax

; 1713 : }

  000d2	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d6	c3		 ret	 0
PyQueryReflectionKey ENDP
_TEXT	ENDS
EXTRN	PyDict_SetItemString:PROC
EXTRN	PyLong_FromLong:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$insint DD imagerel insint
	DD	imagerel insint+213
	DD	imagerel $unwind$insint
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$insint DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\pc\winreg.c
xdata	ENDS
;	COMDAT insint
_TEXT	SEGMENT
d$ = 64
name$ = 72
value$ = 80
insint	PROC						; COMDAT

; 1749 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b f1	 mov	 rsi, rcx

; 1750 :     PyObject *v = PyLong_FromLong(value);

  00012	41 8b c8	 mov	 ecx, r8d
  00015	48 8b fa	 mov	 rdi, rdx
  00018	e8 00 00 00 00	 call	 PyLong_FromLong
  0001d	48 8b d8	 mov	 rbx, rax

; 1751 :     if (!v || PyDict_SetItemString(d, name, v))

  00020	48 85 c0	 test	 rax, rax
  00023	74 12		 je	 SHORT $LN5@insint
  00025	4c 8b c0	 mov	 r8, rax
  00028	48 8b d7	 mov	 rdx, rdi
  0002b	48 8b ce	 mov	 rcx, rsi
  0002e	e8 00 00 00 00	 call	 PyDict_SetItemString
  00033	85 c0		 test	 eax, eax
  00035	74 05		 je	 SHORT $LN4@insint
$LN5@insint:

; 1752 :         PyErr_Clear();

  00037	e8 00 00 00 00	 call	 PyErr_Clear
$LN4@insint:

; 1753 :     Py_XDECREF(v);

  0003c	48 85 db	 test	 rbx, rbx
  0003f	0f 84 80 00 00
	00		 je	 $LN3@insint
  00045	e8 00 00 00 00	 call	 _Py_PXCTX
  0004a	85 c0		 test	 eax, eax
  0004c	75 77		 jne	 SHORT $LN3@insint
  0004e	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00052	a8 20		 test	 al, 32			; 00000020H
  00054	75 67		 jne	 SHORT $LN13@insint
  00056	84 c0		 test	 al, al
  00058	78 63		 js	 SHORT $LN13@insint
  0005a	a8 02		 test	 al, 2
  0005c	75 67		 jne	 SHORT $LN3@insint
  0005e	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00062	75 61		 jne	 SHORT $LN3@insint
  00064	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0006b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00072	4c 8b cb	 mov	 r9, rbx
  00075	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0007b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00083	e8 00 00 00 00	 call	 _PyParallel_Guard
  00088	48 8b cb	 mov	 rcx, rbx
  0008b	85 c0		 test	 eax, eax
  0008d	74 14		 je	 SHORT $LN18@insint

; 1754 : }

  0008f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00094	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00099	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0009d	5f		 pop	 rdi
  0009e	e9 00 00 00 00	 jmp	 _Px_Dealloc

; 1753 :     Py_XDECREF(v);

$LN18@insint:
  000a3	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 1754 : }

  000a7	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000ac	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000b1	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b5	5f		 pop	 rdi
  000b6	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]

; 1753 :     Py_XDECREF(v);

$LN13@insint:
  000bd	48 8b cb	 mov	 rcx, rbx
  000c0	e8 00 00 00 00	 call	 Px_DecRef
$LN3@insint:

; 1754 : }

  000c5	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000ca	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000cf	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d3	5f		 pop	 rdi
  000d4	c3		 ret	 0
insint	ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$inskey DD imagerel inskey
	DD	imagerel inskey+213
	DD	imagerel $unwind$inskey
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$inskey DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\pc\winreg.c
xdata	ENDS
;	COMDAT inskey
_TEXT	SEGMENT
d$ = 64
name$ = 72
key$ = 80
inskey	PROC						; COMDAT

; 1760 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b f1	 mov	 rsi, rcx

; 1761 :     PyObject *v = PyLong_FromVoidPtr(key);

  00012	49 8b c8	 mov	 rcx, r8
  00015	48 8b fa	 mov	 rdi, rdx
  00018	e8 00 00 00 00	 call	 PyLong_FromVoidPtr
  0001d	48 8b d8	 mov	 rbx, rax

; 1762 :     if (!v || PyDict_SetItemString(d, name, v))

  00020	48 85 c0	 test	 rax, rax
  00023	74 12		 je	 SHORT $LN5@inskey
  00025	4c 8b c0	 mov	 r8, rax
  00028	48 8b d7	 mov	 rdx, rdi
  0002b	48 8b ce	 mov	 rcx, rsi
  0002e	e8 00 00 00 00	 call	 PyDict_SetItemString
  00033	85 c0		 test	 eax, eax
  00035	74 05		 je	 SHORT $LN4@inskey
$LN5@inskey:

; 1763 :         PyErr_Clear();

  00037	e8 00 00 00 00	 call	 PyErr_Clear
$LN4@inskey:

; 1764 :     Py_XDECREF(v);

  0003c	48 85 db	 test	 rbx, rbx
  0003f	0f 84 80 00 00
	00		 je	 $LN3@inskey
  00045	e8 00 00 00 00	 call	 _Py_PXCTX
  0004a	85 c0		 test	 eax, eax
  0004c	75 77		 jne	 SHORT $LN3@inskey
  0004e	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00052	a8 20		 test	 al, 32			; 00000020H
  00054	75 67		 jne	 SHORT $LN13@inskey
  00056	84 c0		 test	 al, al
  00058	78 63		 js	 SHORT $LN13@inskey
  0005a	a8 02		 test	 al, 2
  0005c	75 67		 jne	 SHORT $LN3@inskey
  0005e	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00062	75 61		 jne	 SHORT $LN3@inskey
  00064	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0006b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00072	4c 8b cb	 mov	 r9, rbx
  00075	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0007b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00083	e8 00 00 00 00	 call	 _PyParallel_Guard
  00088	48 8b cb	 mov	 rcx, rbx
  0008b	85 c0		 test	 eax, eax
  0008d	74 14		 je	 SHORT $LN18@inskey

; 1765 : }

  0008f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00094	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00099	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0009d	5f		 pop	 rdi
  0009e	e9 00 00 00 00	 jmp	 _Px_Dealloc

; 1764 :     Py_XDECREF(v);

$LN18@inskey:
  000a3	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 1765 : }

  000a7	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000ac	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000b1	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b5	5f		 pop	 rdi
  000b6	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]

; 1764 :     Py_XDECREF(v);

$LN13@inskey:
  000bd	48 8b cb	 mov	 rcx, rbx
  000c0	e8 00 00 00 00	 call	 Px_DecRef
$LN3@inskey:

; 1765 : }

  000c5	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000ca	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000cf	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d3	5f		 pop	 rdi
  000d4	c3		 ret	 0
inskey	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@GKOINNIK@REG_RESOURCE_REQUIREMENTS_LIST?$AA@ ; `string'
PUBLIC	??_C@_0BN@KMFEBHNF@REG_FULL_RESOURCE_DESCRIPTOR?$AA@ ; `string'
PUBLIC	??_C@_0BC@EFKADEAE@REG_RESOURCE_LIST?$AA@	; `string'
PUBLIC	??_C@_0N@EIHNGGOL@REG_MULTI_SZ?$AA@		; `string'
PUBLIC	??_C@_08EKMNCLAG@REG_LINK?$AA@			; `string'
PUBLIC	??_C@_0BF@EDNOFOLE@REG_DWORD_BIG_ENDIAN?$AA@	; `string'
PUBLIC	??_C@_0BI@MOFBPOOP@REG_DWORD_LITTLE_ENDIAN?$AA@	; `string'
PUBLIC	??_C@_09OFPELGAL@REG_DWORD?$AA@			; `string'
PUBLIC	??_C@_0L@MBCFJDPB@REG_BINARY?$AA@		; `string'
PUBLIC	??_C@_0O@MEJMNBPK@REG_EXPAND_SZ?$AA@		; `string'
PUBLIC	??_C@_06NOFPPNFK@REG_SZ?$AA@			; `string'
PUBLIC	??_C@_08ILOFAKDE@REG_NONE?$AA@			; `string'
PUBLIC	??_C@_0BI@OAGFGNBM@REG_LEGAL_CHANGE_FILTER?$AA@	; `string'
PUBLIC	??_C@_0BL@DJJMNICH@REG_NOTIFY_CHANGE_SECURITY?$AA@ ; `string'
PUBLIC	??_C@_0BL@NFDNAFG@REG_NOTIFY_CHANGE_LAST_SET?$AA@ ; `string'
PUBLIC	??_C@_0BN@IJIMOIEE@REG_NOTIFY_CHANGE_ATTRIBUTES?$AA@ ; `string'
PUBLIC	??_C@_0BH@HEOAPJFK@REG_NOTIFY_CHANGE_NAME?$AA@	; `string'
PUBLIC	??_C@_0BC@MMHJFPCD@REG_NO_LAZY_FLUSH?$AA@	; `string'
PUBLIC	??_C@_0BB@DAEDFLMD@REG_REFRESH_HIVE?$AA@	; `string'
PUBLIC	??_C@_0BI@HJHMBAFJ@REG_WHOLE_HIVE_VOLATILE?$AA@	; `string'
PUBLIC	??_C@_0BI@LPFPOFMF@REG_OPENED_EXISTING_KEY?$AA@	; `string'
PUBLIC	??_C@_0BE@LNMPGKOD@REG_CREATED_NEW_KEY?$AA@	; `string'
PUBLIC	??_C@_0BB@OJFLAAHK@REG_LEGAL_OPTION?$AA@	; `string'
PUBLIC	??_C@_0BF@JLFBEHG@REG_OPTION_OPEN_LINK?$AA@	; `string'
PUBLIC	??_C@_0BK@JJEPBCEJ@REG_OPTION_BACKUP_RESTORE?$AA@ ; `string'
PUBLIC	??_C@_0BH@EFFNCNMF@REG_OPTION_CREATE_LINK?$AA@	; `string'
PUBLIC	??_C@_0BE@IGFBDPLM@REG_OPTION_VOLATILE?$AA@	; `string'
PUBLIC	??_C@_0BI@PMOOLGON@REG_OPTION_NON_VOLATILE?$AA@	; `string'
PUBLIC	??_C@_0BE@NBIKGEOO@REG_OPTION_RESERVED?$AA@	; `string'
PUBLIC	??_C@_0BA@OOKCCMHH@KEY_WOW64_32KEY?$AA@		; `string'
PUBLIC	??_C@_0BA@DBCPEIGE@KEY_WOW64_64KEY?$AA@		; `string'
PUBLIC	??_C@_0P@DJGMGCHM@KEY_ALL_ACCESS?$AA@		; `string'
PUBLIC	??_C@_0M@KBMHKMEF@KEY_EXECUTE?$AA@		; `string'
PUBLIC	??_C@_09CCCBNCFK@KEY_WRITE?$AA@			; `string'
PUBLIC	??_C@_08GEINPFBG@KEY_READ?$AA@			; `string'
PUBLIC	??_C@_0BA@MHHOCJPM@KEY_CREATE_LINK?$AA@		; `string'
PUBLIC	??_C@_0L@JFKONFFF@KEY_NOTIFY?$AA@		; `string'
PUBLIC	??_C@_0BH@BMBFGKMC@KEY_ENUMERATE_SUB_KEYS?$AA@	; `string'
PUBLIC	??_C@_0BD@PJFPBLKN@KEY_CREATE_SUB_KEY?$AA@	; `string'
PUBLIC	??_C@_0O@IBNLBEAP@KEY_SET_VALUE?$AA@		; `string'
PUBLIC	??_C@_0BA@KFDBODKN@KEY_QUERY_VALUE?$AA@		; `string'
PUBLIC	??_C@_0O@MJDLIIGK@HKEY_DYN_DATA?$AA@		; `string'
PUBLIC	??_C@_0BE@NLNNHLLF@HKEY_CURRENT_CONFIG?$AA@	; `string'
PUBLIC	??_C@_0BG@IDBEHNDO@HKEY_PERFORMANCE_DATA?$AA@	; `string'
PUBLIC	??_C@_0L@OEMMANAM@HKEY_USERS?$AA@		; `string'
PUBLIC	??_C@_0BD@GIIFIKDM@HKEY_LOCAL_MACHINE?$AA@	; `string'
PUBLIC	??_C@_0BC@GMMMKLBI@HKEY_CURRENT_USER?$AA@	; `string'
PUBLIC	??_C@_0BC@JBJOLKMF@HKEY_CLASSES_ROOT?$AA@	; `string'
PUBLIC	??_C@_05KKCIMGE@error?$AA@			; `string'
PUBLIC	??_C@_08KCCGOGLL@HKEYType?$AA@			; `string'
PUBLIC	PyInit_winreg
EXTRN	PyExc_WindowsError:QWORD
EXTRN	PyType_Ready:PROC
EXTRN	PyModule_GetDict:PROC
EXTRN	PyModule_Create2:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyInit_winreg DD imagerel $LN13
	DD	imagerel $LN13+40
	DD	imagerel $unwind$PyInit_winreg
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyInit_winreg DD imagerel $LN13+40
	DD	imagerel $LN13+233
	DD	imagerel $chain$0$PyInit_winreg
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyInit_winreg DD imagerel $LN13+233
	DD	imagerel $LN13+1253
	DD	imagerel $chain$2$PyInit_winreg
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyInit_winreg DD 020021H
	DD	083400H
	DD	imagerel $LN13
	DD	imagerel $LN13+40
	DD	imagerel $unwind$PyInit_winreg
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyInit_winreg DD 020521H
	DD	083405H
	DD	imagerel $LN13
	DD	imagerel $LN13+40
	DD	imagerel $unwind$PyInit_winreg
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit_winreg DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT ??_C@_0BP@GKOINNIK@REG_RESOURCE_REQUIREMENTS_LIST?$AA@
CONST	SEGMENT
??_C@_0BP@GKOINNIK@REG_RESOURCE_REQUIREMENTS_LIST?$AA@ DB 'REG_RESOURCE_R'
	DB	'EQUIREMENTS_LIST', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KMFEBHNF@REG_FULL_RESOURCE_DESCRIPTOR?$AA@
CONST	SEGMENT
??_C@_0BN@KMFEBHNF@REG_FULL_RESOURCE_DESCRIPTOR?$AA@ DB 'REG_FULL_RESOURC'
	DB	'E_DESCRIPTOR', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EFKADEAE@REG_RESOURCE_LIST?$AA@
CONST	SEGMENT
??_C@_0BC@EFKADEAE@REG_RESOURCE_LIST?$AA@ DB 'REG_RESOURCE_LIST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EIHNGGOL@REG_MULTI_SZ?$AA@
CONST	SEGMENT
??_C@_0N@EIHNGGOL@REG_MULTI_SZ?$AA@ DB 'REG_MULTI_SZ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EKMNCLAG@REG_LINK?$AA@
CONST	SEGMENT
??_C@_08EKMNCLAG@REG_LINK?$AA@ DB 'REG_LINK', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EDNOFOLE@REG_DWORD_BIG_ENDIAN?$AA@
CONST	SEGMENT
??_C@_0BF@EDNOFOLE@REG_DWORD_BIG_ENDIAN?$AA@ DB 'REG_DWORD_BIG_ENDIAN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MOFBPOOP@REG_DWORD_LITTLE_ENDIAN?$AA@
CONST	SEGMENT
??_C@_0BI@MOFBPOOP@REG_DWORD_LITTLE_ENDIAN?$AA@ DB 'REG_DWORD_LITTLE_ENDI'
	DB	'AN', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_09OFPELGAL@REG_DWORD?$AA@
CONST	SEGMENT
??_C@_09OFPELGAL@REG_DWORD?$AA@ DB 'REG_DWORD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MBCFJDPB@REG_BINARY?$AA@
CONST	SEGMENT
??_C@_0L@MBCFJDPB@REG_BINARY?$AA@ DB 'REG_BINARY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MEJMNBPK@REG_EXPAND_SZ?$AA@
CONST	SEGMENT
??_C@_0O@MEJMNBPK@REG_EXPAND_SZ?$AA@ DB 'REG_EXPAND_SZ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06NOFPPNFK@REG_SZ?$AA@
CONST	SEGMENT
??_C@_06NOFPPNFK@REG_SZ?$AA@ DB 'REG_SZ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08ILOFAKDE@REG_NONE?$AA@
CONST	SEGMENT
??_C@_08ILOFAKDE@REG_NONE?$AA@ DB 'REG_NONE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OAGFGNBM@REG_LEGAL_CHANGE_FILTER?$AA@
CONST	SEGMENT
??_C@_0BI@OAGFGNBM@REG_LEGAL_CHANGE_FILTER?$AA@ DB 'REG_LEGAL_CHANGE_FILT'
	DB	'ER', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DJJMNICH@REG_NOTIFY_CHANGE_SECURITY?$AA@
CONST	SEGMENT
??_C@_0BL@DJJMNICH@REG_NOTIFY_CHANGE_SECURITY?$AA@ DB 'REG_NOTIFY_CHANGE_'
	DB	'SECURITY', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NFDNAFG@REG_NOTIFY_CHANGE_LAST_SET?$AA@
CONST	SEGMENT
??_C@_0BL@NFDNAFG@REG_NOTIFY_CHANGE_LAST_SET?$AA@ DB 'REG_NOTIFY_CHANGE_L'
	DB	'AST_SET', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@IJIMOIEE@REG_NOTIFY_CHANGE_ATTRIBUTES?$AA@
CONST	SEGMENT
??_C@_0BN@IJIMOIEE@REG_NOTIFY_CHANGE_ATTRIBUTES?$AA@ DB 'REG_NOTIFY_CHANG'
	DB	'E_ATTRIBUTES', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@HEOAPJFK@REG_NOTIFY_CHANGE_NAME?$AA@
CONST	SEGMENT
??_C@_0BH@HEOAPJFK@REG_NOTIFY_CHANGE_NAME?$AA@ DB 'REG_NOTIFY_CHANGE_NAME'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MMHJFPCD@REG_NO_LAZY_FLUSH?$AA@
CONST	SEGMENT
??_C@_0BC@MMHJFPCD@REG_NO_LAZY_FLUSH?$AA@ DB 'REG_NO_LAZY_FLUSH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DAEDFLMD@REG_REFRESH_HIVE?$AA@
CONST	SEGMENT
??_C@_0BB@DAEDFLMD@REG_REFRESH_HIVE?$AA@ DB 'REG_REFRESH_HIVE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@HJHMBAFJ@REG_WHOLE_HIVE_VOLATILE?$AA@
CONST	SEGMENT
??_C@_0BI@HJHMBAFJ@REG_WHOLE_HIVE_VOLATILE?$AA@ DB 'REG_WHOLE_HIVE_VOLATI'
	DB	'LE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LPFPOFMF@REG_OPENED_EXISTING_KEY?$AA@
CONST	SEGMENT
??_C@_0BI@LPFPOFMF@REG_OPENED_EXISTING_KEY?$AA@ DB 'REG_OPENED_EXISTING_K'
	DB	'EY', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LNMPGKOD@REG_CREATED_NEW_KEY?$AA@
CONST	SEGMENT
??_C@_0BE@LNMPGKOD@REG_CREATED_NEW_KEY?$AA@ DB 'REG_CREATED_NEW_KEY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OJFLAAHK@REG_LEGAL_OPTION?$AA@
CONST	SEGMENT
??_C@_0BB@OJFLAAHK@REG_LEGAL_OPTION?$AA@ DB 'REG_LEGAL_OPTION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JLFBEHG@REG_OPTION_OPEN_LINK?$AA@
CONST	SEGMENT
??_C@_0BF@JLFBEHG@REG_OPTION_OPEN_LINK?$AA@ DB 'REG_OPTION_OPEN_LINK', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JJEPBCEJ@REG_OPTION_BACKUP_RESTORE?$AA@
CONST	SEGMENT
??_C@_0BK@JJEPBCEJ@REG_OPTION_BACKUP_RESTORE?$AA@ DB 'REG_OPTION_BACKUP_R'
	DB	'ESTORE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EFFNCNMF@REG_OPTION_CREATE_LINK?$AA@
CONST	SEGMENT
??_C@_0BH@EFFNCNMF@REG_OPTION_CREATE_LINK?$AA@ DB 'REG_OPTION_CREATE_LINK'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IGFBDPLM@REG_OPTION_VOLATILE?$AA@
CONST	SEGMENT
??_C@_0BE@IGFBDPLM@REG_OPTION_VOLATILE?$AA@ DB 'REG_OPTION_VOLATILE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PMOOLGON@REG_OPTION_NON_VOLATILE?$AA@
CONST	SEGMENT
??_C@_0BI@PMOOLGON@REG_OPTION_NON_VOLATILE?$AA@ DB 'REG_OPTION_NON_VOLATI'
	DB	'LE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NBIKGEOO@REG_OPTION_RESERVED?$AA@
CONST	SEGMENT
??_C@_0BE@NBIKGEOO@REG_OPTION_RESERVED?$AA@ DB 'REG_OPTION_RESERVED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OOKCCMHH@KEY_WOW64_32KEY?$AA@
CONST	SEGMENT
??_C@_0BA@OOKCCMHH@KEY_WOW64_32KEY?$AA@ DB 'KEY_WOW64_32KEY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DBCPEIGE@KEY_WOW64_64KEY?$AA@
CONST	SEGMENT
??_C@_0BA@DBCPEIGE@KEY_WOW64_64KEY?$AA@ DB 'KEY_WOW64_64KEY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DJGMGCHM@KEY_ALL_ACCESS?$AA@
CONST	SEGMENT
??_C@_0P@DJGMGCHM@KEY_ALL_ACCESS?$AA@ DB 'KEY_ALL_ACCESS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KBMHKMEF@KEY_EXECUTE?$AA@
CONST	SEGMENT
??_C@_0M@KBMHKMEF@KEY_EXECUTE?$AA@ DB 'KEY_EXECUTE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09CCCBNCFK@KEY_WRITE?$AA@
CONST	SEGMENT
??_C@_09CCCBNCFK@KEY_WRITE?$AA@ DB 'KEY_WRITE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GEINPFBG@KEY_READ?$AA@
CONST	SEGMENT
??_C@_08GEINPFBG@KEY_READ?$AA@ DB 'KEY_READ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MHHOCJPM@KEY_CREATE_LINK?$AA@
CONST	SEGMENT
??_C@_0BA@MHHOCJPM@KEY_CREATE_LINK?$AA@ DB 'KEY_CREATE_LINK', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JFKONFFF@KEY_NOTIFY?$AA@
CONST	SEGMENT
??_C@_0L@JFKONFFF@KEY_NOTIFY?$AA@ DB 'KEY_NOTIFY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BMBFGKMC@KEY_ENUMERATE_SUB_KEYS?$AA@
CONST	SEGMENT
??_C@_0BH@BMBFGKMC@KEY_ENUMERATE_SUB_KEYS?$AA@ DB 'KEY_ENUMERATE_SUB_KEYS'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PJFPBLKN@KEY_CREATE_SUB_KEY?$AA@
CONST	SEGMENT
??_C@_0BD@PJFPBLKN@KEY_CREATE_SUB_KEY?$AA@ DB 'KEY_CREATE_SUB_KEY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IBNLBEAP@KEY_SET_VALUE?$AA@
CONST	SEGMENT
??_C@_0O@IBNLBEAP@KEY_SET_VALUE?$AA@ DB 'KEY_SET_VALUE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KFDBODKN@KEY_QUERY_VALUE?$AA@
CONST	SEGMENT
??_C@_0BA@KFDBODKN@KEY_QUERY_VALUE?$AA@ DB 'KEY_QUERY_VALUE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MJDLIIGK@HKEY_DYN_DATA?$AA@
CONST	SEGMENT
??_C@_0O@MJDLIIGK@HKEY_DYN_DATA?$AA@ DB 'HKEY_DYN_DATA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NLNNHLLF@HKEY_CURRENT_CONFIG?$AA@
CONST	SEGMENT
??_C@_0BE@NLNNHLLF@HKEY_CURRENT_CONFIG?$AA@ DB 'HKEY_CURRENT_CONFIG', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IDBEHNDO@HKEY_PERFORMANCE_DATA?$AA@
CONST	SEGMENT
??_C@_0BG@IDBEHNDO@HKEY_PERFORMANCE_DATA?$AA@ DB 'HKEY_PERFORMANCE_DATA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OEMMANAM@HKEY_USERS?$AA@
CONST	SEGMENT
??_C@_0L@OEMMANAM@HKEY_USERS?$AA@ DB 'HKEY_USERS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GIIFIKDM@HKEY_LOCAL_MACHINE?$AA@
CONST	SEGMENT
??_C@_0BD@GIIFIKDM@HKEY_LOCAL_MACHINE?$AA@ DB 'HKEY_LOCAL_MACHINE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GMMMKLBI@HKEY_CURRENT_USER?$AA@
CONST	SEGMENT
??_C@_0BC@GMMMKLBI@HKEY_CURRENT_USER?$AA@ DB 'HKEY_CURRENT_USER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JBJOLKMF@HKEY_CLASSES_ROOT?$AA@
CONST	SEGMENT
??_C@_0BC@JBJOLKMF@HKEY_CLASSES_ROOT?$AA@ DB 'HKEY_CLASSES_ROOT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05KKCIMGE@error?$AA@
CONST	SEGMENT
??_C@_05KKCIMGE@error?$AA@ DB 'error', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KCCGOGLL@HKEYType?$AA@
CONST	SEGMENT
??_C@_08KCCGOGLL@HKEYType?$AA@ DB 'HKEYType', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\pc\winreg.c
CONST	ENDS
;	COMDAT PyInit_winreg
_TEXT	SEGMENT
PyInit_winreg PROC					; COMDAT

; 1783 : {

$LN13:
  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1784 :     PyObject *m, *d;
; 1785 :     m = PyModule_Create(&winregmodule);

  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:winregmodule
  0000d	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00012	e8 00 00 00 00	 call	 PyModule_Create2
  00017	48 8b f8	 mov	 rdi, rax

; 1786 :     if (m == NULL)

  0001a	48 85 c0	 test	 rax, rax
  0001d	75 06		 jne	 SHORT $LN4@PyInit_win

; 1859 : }

  0001f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00023	5f		 pop	 rdi
  00024	c3		 ret	 0
$LN4@PyInit_win:

; 1787 :         return NULL;
; 1788 :     d = PyModule_GetDict(m);

  00025	48 8b c8	 mov	 rcx, rax
  00028	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0002d	e8 00 00 00 00	 call	 PyModule_GetDict

; 1789 :     PyHKEY_Type.tp_doc = PyHKEY_doc;
; 1790 :     if (PyType_Ready(&PyHKEY_Type) < 0)

  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyHKEY_Type
  00039	48 8b d8	 mov	 rbx, rax
  0003c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyHKEY_doc
  00043	48 89 05 08 01
	00 00		 mov	 QWORD PTR PyHKEY_Type+264, rax
  0004a	e8 00 00 00 00	 call	 PyType_Ready
  0004f	85 c0		 test	 eax, eax

; 1791 :         return NULL;

  00051	0f 88 85 00 00
	00		 js	 $LN12@PyInit_win

; 1792 :     Py_INCREF(&PyHKEY_Type);

  00057	e8 00 00 00 00	 call	 _Py_PXCTX
  0005c	85 c0		 test	 eax, eax
  0005e	75 3c		 jne	 SHORT $LN8@PyInit_win
  00060	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:PyHKEY_Type
  00067	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0006e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00075	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0007b	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00083	e8 00 00 00 00	 call	 _PyParallel_Guard
  00088	85 c0		 test	 eax, eax
  0008a	75 09		 jne	 SHORT $LN7@PyInit_win
  0008c	f6 05 20 00 00
	00 20		 test	 BYTE PTR PyHKEY_Type+32, 32 ; 00000020H
  00093	74 07		 je	 SHORT $LN8@PyInit_win
$LN7@PyInit_win:
  00095	48 ff 05 50 00
	00 00		 inc	 QWORD PTR PyHKEY_Type+80
$LN8@PyInit_win:

; 1793 :     if (PyDict_SetItemString(d, "HKEYType",
; 1794 :                              (PyObject *)&PyHKEY_Type) != 0)

  0009c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyHKEY_Type
  000a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08KCCGOGLL@HKEYType?$AA@
  000aa	48 8b cb	 mov	 rcx, rbx
  000ad	e8 00 00 00 00	 call	 PyDict_SetItemString
  000b2	85 c0		 test	 eax, eax

; 1795 :         return NULL;

  000b4	75 26		 jne	 SHORT $LN12@PyInit_win

; 1796 :     Py_INCREF(PyExc_WindowsError);

  000b6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_WindowsError
  000bd	e8 00 00 00 00	 call	 _Py_IncRef

; 1797 :     if (PyDict_SetItemString(d, "error",
; 1798 :                              PyExc_WindowsError) != 0)

  000c2	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR PyExc_WindowsError
  000c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KKCIMGE@error?$AA@
  000d0	48 8b cb	 mov	 rcx, rbx
  000d3	e8 00 00 00 00	 call	 PyDict_SetItemString
  000d8	85 c0		 test	 eax, eax
  000da	74 0d		 je	 SHORT $LN1@PyInit_win
$LN12@PyInit_win:

; 1799 :         return NULL;

  000dc	33 c0		 xor	 eax, eax
  000de	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 1859 : }

  000e3	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000e7	5f		 pop	 rdi
  000e8	c3		 ret	 0
$LN1@PyInit_win:

; 1800 : 
; 1801 :     /* Add the relevant constants */
; 1802 :     ADD_KEY(HKEY_CLASSES_ROOT);

  000e9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@JBJOLKMF@HKEY_CLASSES_ROOT?$AA@
  000f0	49 c7 c0 00 00
	00 80		 mov	 r8, -2147483648		; ffffffff80000000H
  000f7	48 8b cb	 mov	 rcx, rbx
  000fa	e8 00 00 00 00	 call	 inskey

; 1803 :     ADD_KEY(HKEY_CURRENT_USER);

  000ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@GMMMKLBI@HKEY_CURRENT_USER?$AA@
  00106	49 c7 c0 01 00
	00 80		 mov	 r8, -2147483647		; ffffffff80000001H
  0010d	48 8b cb	 mov	 rcx, rbx
  00110	e8 00 00 00 00	 call	 inskey

; 1804 :     ADD_KEY(HKEY_LOCAL_MACHINE);

  00115	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@GIIFIKDM@HKEY_LOCAL_MACHINE?$AA@
  0011c	49 c7 c0 02 00
	00 80		 mov	 r8, -2147483646		; ffffffff80000002H
  00123	48 8b cb	 mov	 rcx, rbx
  00126	e8 00 00 00 00	 call	 inskey

; 1805 :     ADD_KEY(HKEY_USERS);

  0012b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@OEMMANAM@HKEY_USERS?$AA@
  00132	49 c7 c0 03 00
	00 80		 mov	 r8, -2147483645		; ffffffff80000003H
  00139	48 8b cb	 mov	 rcx, rbx
  0013c	e8 00 00 00 00	 call	 inskey

; 1806 :     ADD_KEY(HKEY_PERFORMANCE_DATA);

  00141	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@IDBEHNDO@HKEY_PERFORMANCE_DATA?$AA@
  00148	49 c7 c0 04 00
	00 80		 mov	 r8, -2147483644		; ffffffff80000004H
  0014f	48 8b cb	 mov	 rcx, rbx
  00152	e8 00 00 00 00	 call	 inskey

; 1807 : #ifdef HKEY_CURRENT_CONFIG
; 1808 :     ADD_KEY(HKEY_CURRENT_CONFIG);

  00157	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@NLNNHLLF@HKEY_CURRENT_CONFIG?$AA@
  0015e	49 c7 c0 05 00
	00 80		 mov	 r8, -2147483643		; ffffffff80000005H
  00165	48 8b cb	 mov	 rcx, rbx
  00168	e8 00 00 00 00	 call	 inskey

; 1809 : #endif
; 1810 : #ifdef HKEY_DYN_DATA
; 1811 :     ADD_KEY(HKEY_DYN_DATA);

  0016d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@MJDLIIGK@HKEY_DYN_DATA?$AA@
  00174	49 c7 c0 06 00
	00 80		 mov	 r8, -2147483642		; ffffffff80000006H
  0017b	48 8b cb	 mov	 rcx, rbx
  0017e	e8 00 00 00 00	 call	 inskey

; 1812 : #endif
; 1813 :     ADD_INT(KEY_QUERY_VALUE);

  00183	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@KFDBODKN@KEY_QUERY_VALUE?$AA@
  0018a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00190	48 8b cb	 mov	 rcx, rbx
  00193	e8 00 00 00 00	 call	 insint

; 1814 :     ADD_INT(KEY_SET_VALUE);

  00198	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@IBNLBEAP@KEY_SET_VALUE?$AA@
  0019f	41 b8 02 00 00
	00		 mov	 r8d, 2
  001a5	48 8b cb	 mov	 rcx, rbx
  001a8	e8 00 00 00 00	 call	 insint

; 1815 :     ADD_INT(KEY_CREATE_SUB_KEY);

  001ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@PJFPBLKN@KEY_CREATE_SUB_KEY?$AA@
  001b4	41 b8 04 00 00
	00		 mov	 r8d, 4
  001ba	48 8b cb	 mov	 rcx, rbx
  001bd	e8 00 00 00 00	 call	 insint

; 1816 :     ADD_INT(KEY_ENUMERATE_SUB_KEYS);

  001c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@BMBFGKMC@KEY_ENUMERATE_SUB_KEYS?$AA@
  001c9	41 b8 08 00 00
	00		 mov	 r8d, 8
  001cf	48 8b cb	 mov	 rcx, rbx
  001d2	e8 00 00 00 00	 call	 insint

; 1817 :     ADD_INT(KEY_NOTIFY);

  001d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@JFKONFFF@KEY_NOTIFY?$AA@
  001de	41 b8 10 00 00
	00		 mov	 r8d, 16
  001e4	48 8b cb	 mov	 rcx, rbx
  001e7	e8 00 00 00 00	 call	 insint

; 1818 :     ADD_INT(KEY_CREATE_LINK);

  001ec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@MHHOCJPM@KEY_CREATE_LINK?$AA@
  001f3	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  001f9	48 8b cb	 mov	 rcx, rbx
  001fc	e8 00 00 00 00	 call	 insint

; 1819 :     ADD_INT(KEY_READ);

  00201	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08GEINPFBG@KEY_READ?$AA@
  00208	41 b8 19 00 02
	00		 mov	 r8d, 131097		; 00020019H
  0020e	48 8b cb	 mov	 rcx, rbx
  00211	e8 00 00 00 00	 call	 insint

; 1820 :     ADD_INT(KEY_WRITE);

  00216	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09CCCBNCFK@KEY_WRITE?$AA@
  0021d	41 b8 06 00 02
	00		 mov	 r8d, 131078		; 00020006H
  00223	48 8b cb	 mov	 rcx, rbx
  00226	e8 00 00 00 00	 call	 insint

; 1821 :     ADD_INT(KEY_EXECUTE);

  0022b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@KBMHKMEF@KEY_EXECUTE?$AA@
  00232	41 b8 19 00 02
	00		 mov	 r8d, 131097		; 00020019H
  00238	48 8b cb	 mov	 rcx, rbx
  0023b	e8 00 00 00 00	 call	 insint

; 1822 :     ADD_INT(KEY_ALL_ACCESS);

  00240	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@DJGMGCHM@KEY_ALL_ACCESS?$AA@
  00247	41 b8 3f 00 0f
	00		 mov	 r8d, 983103		; 000f003fH
  0024d	48 8b cb	 mov	 rcx, rbx
  00250	e8 00 00 00 00	 call	 insint

; 1823 : #ifdef KEY_WOW64_64KEY
; 1824 :     ADD_INT(KEY_WOW64_64KEY);

  00255	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@DBCPEIGE@KEY_WOW64_64KEY?$AA@
  0025c	41 b8 00 01 00
	00		 mov	 r8d, 256		; 00000100H
  00262	48 8b cb	 mov	 rcx, rbx
  00265	e8 00 00 00 00	 call	 insint

; 1825 : #endif
; 1826 : #ifdef KEY_WOW64_32KEY
; 1827 :     ADD_INT(KEY_WOW64_32KEY);

  0026a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@OOKCCMHH@KEY_WOW64_32KEY?$AA@
  00271	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  00277	48 8b cb	 mov	 rcx, rbx
  0027a	e8 00 00 00 00	 call	 insint

; 1828 : #endif
; 1829 :     ADD_INT(REG_OPTION_RESERVED);

  0027f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@NBIKGEOO@REG_OPTION_RESERVED?$AA@
  00286	45 33 c0	 xor	 r8d, r8d
  00289	48 8b cb	 mov	 rcx, rbx
  0028c	e8 00 00 00 00	 call	 insint

; 1830 :     ADD_INT(REG_OPTION_NON_VOLATILE);

  00291	45 33 c0	 xor	 r8d, r8d
  00294	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@PMOOLGON@REG_OPTION_NON_VOLATILE?$AA@
  0029b	48 8b cb	 mov	 rcx, rbx
  0029e	e8 00 00 00 00	 call	 insint

; 1831 :     ADD_INT(REG_OPTION_VOLATILE);

  002a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@IGFBDPLM@REG_OPTION_VOLATILE?$AA@
  002aa	41 b8 01 00 00
	00		 mov	 r8d, 1
  002b0	48 8b cb	 mov	 rcx, rbx
  002b3	e8 00 00 00 00	 call	 insint

; 1832 :     ADD_INT(REG_OPTION_CREATE_LINK);

  002b8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@EFFNCNMF@REG_OPTION_CREATE_LINK?$AA@
  002bf	41 b8 02 00 00
	00		 mov	 r8d, 2
  002c5	48 8b cb	 mov	 rcx, rbx
  002c8	e8 00 00 00 00	 call	 insint

; 1833 :     ADD_INT(REG_OPTION_BACKUP_RESTORE);

  002cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@JJEPBCEJ@REG_OPTION_BACKUP_RESTORE?$AA@
  002d4	41 b8 04 00 00
	00		 mov	 r8d, 4
  002da	48 8b cb	 mov	 rcx, rbx
  002dd	e8 00 00 00 00	 call	 insint

; 1834 :     ADD_INT(REG_OPTION_OPEN_LINK);

  002e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@JLFBEHG@REG_OPTION_OPEN_LINK?$AA@
  002e9	41 b8 08 00 00
	00		 mov	 r8d, 8
  002ef	48 8b cb	 mov	 rcx, rbx
  002f2	e8 00 00 00 00	 call	 insint

; 1835 :     ADD_INT(REG_LEGAL_OPTION);

  002f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@OJFLAAHK@REG_LEGAL_OPTION?$AA@
  002fe	41 b8 0f 00 00
	00		 mov	 r8d, 15
  00304	48 8b cb	 mov	 rcx, rbx
  00307	e8 00 00 00 00	 call	 insint

; 1836 :     ADD_INT(REG_CREATED_NEW_KEY);

  0030c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LNMPGKOD@REG_CREATED_NEW_KEY?$AA@
  00313	41 b8 01 00 00
	00		 mov	 r8d, 1
  00319	48 8b cb	 mov	 rcx, rbx
  0031c	e8 00 00 00 00	 call	 insint

; 1837 :     ADD_INT(REG_OPENED_EXISTING_KEY);

  00321	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LPFPOFMF@REG_OPENED_EXISTING_KEY?$AA@
  00328	41 b8 02 00 00
	00		 mov	 r8d, 2
  0032e	48 8b cb	 mov	 rcx, rbx
  00331	e8 00 00 00 00	 call	 insint

; 1838 :     ADD_INT(REG_WHOLE_HIVE_VOLATILE);

  00336	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@HJHMBAFJ@REG_WHOLE_HIVE_VOLATILE?$AA@
  0033d	41 b8 01 00 00
	00		 mov	 r8d, 1
  00343	48 8b cb	 mov	 rcx, rbx
  00346	e8 00 00 00 00	 call	 insint

; 1839 :     ADD_INT(REG_REFRESH_HIVE);

  0034b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@DAEDFLMD@REG_REFRESH_HIVE?$AA@
  00352	41 b8 02 00 00
	00		 mov	 r8d, 2
  00358	48 8b cb	 mov	 rcx, rbx
  0035b	e8 00 00 00 00	 call	 insint

; 1840 :     ADD_INT(REG_NO_LAZY_FLUSH);

  00360	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@MMHJFPCD@REG_NO_LAZY_FLUSH?$AA@
  00367	41 b8 04 00 00
	00		 mov	 r8d, 4
  0036d	48 8b cb	 mov	 rcx, rbx
  00370	e8 00 00 00 00	 call	 insint

; 1841 :     ADD_INT(REG_NOTIFY_CHANGE_NAME);

  00375	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@HEOAPJFK@REG_NOTIFY_CHANGE_NAME?$AA@
  0037c	41 b8 01 00 00
	00		 mov	 r8d, 1
  00382	48 8b cb	 mov	 rcx, rbx
  00385	e8 00 00 00 00	 call	 insint

; 1842 :     ADD_INT(REG_NOTIFY_CHANGE_ATTRIBUTES);

  0038a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IJIMOIEE@REG_NOTIFY_CHANGE_ATTRIBUTES?$AA@
  00391	41 b8 02 00 00
	00		 mov	 r8d, 2
  00397	48 8b cb	 mov	 rcx, rbx
  0039a	e8 00 00 00 00	 call	 insint

; 1843 :     ADD_INT(REG_NOTIFY_CHANGE_LAST_SET);

  0039f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@NFDNAFG@REG_NOTIFY_CHANGE_LAST_SET?$AA@
  003a6	41 b8 04 00 00
	00		 mov	 r8d, 4
  003ac	48 8b cb	 mov	 rcx, rbx
  003af	e8 00 00 00 00	 call	 insint

; 1844 :     ADD_INT(REG_NOTIFY_CHANGE_SECURITY);

  003b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@DJJMNICH@REG_NOTIFY_CHANGE_SECURITY?$AA@
  003bb	41 b8 08 00 00
	00		 mov	 r8d, 8
  003c1	48 8b cb	 mov	 rcx, rbx
  003c4	e8 00 00 00 00	 call	 insint

; 1845 :     ADD_INT(REG_LEGAL_CHANGE_FILTER);

  003c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@OAGFGNBM@REG_LEGAL_CHANGE_FILTER?$AA@
  003d0	41 b8 0f 00 00
	00		 mov	 r8d, 15
  003d6	48 8b cb	 mov	 rcx, rbx
  003d9	e8 00 00 00 00	 call	 insint

; 1846 :     ADD_INT(REG_NONE);

  003de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08ILOFAKDE@REG_NONE?$AA@
  003e5	45 33 c0	 xor	 r8d, r8d
  003e8	48 8b cb	 mov	 rcx, rbx
  003eb	e8 00 00 00 00	 call	 insint

; 1847 :     ADD_INT(REG_SZ);

  003f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06NOFPPNFK@REG_SZ?$AA@
  003f7	41 b8 01 00 00
	00		 mov	 r8d, 1
  003fd	48 8b cb	 mov	 rcx, rbx
  00400	e8 00 00 00 00	 call	 insint

; 1848 :     ADD_INT(REG_EXPAND_SZ);

  00405	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@MEJMNBPK@REG_EXPAND_SZ?$AA@
  0040c	41 b8 02 00 00
	00		 mov	 r8d, 2
  00412	48 8b cb	 mov	 rcx, rbx
  00415	e8 00 00 00 00	 call	 insint

; 1849 :     ADD_INT(REG_BINARY);

  0041a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@MBCFJDPB@REG_BINARY?$AA@
  00421	41 b8 03 00 00
	00		 mov	 r8d, 3
  00427	48 8b cb	 mov	 rcx, rbx
  0042a	e8 00 00 00 00	 call	 insint

; 1850 :     ADD_INT(REG_DWORD);

  0042f	41 b8 04 00 00
	00		 mov	 r8d, 4
  00435	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09OFPELGAL@REG_DWORD?$AA@
  0043c	48 8b cb	 mov	 rcx, rbx
  0043f	e8 00 00 00 00	 call	 insint

; 1851 :     ADD_INT(REG_DWORD_LITTLE_ENDIAN);

  00444	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@MOFBPOOP@REG_DWORD_LITTLE_ENDIAN?$AA@
  0044b	41 b8 04 00 00
	00		 mov	 r8d, 4
  00451	48 8b cb	 mov	 rcx, rbx
  00454	e8 00 00 00 00	 call	 insint

; 1852 :     ADD_INT(REG_DWORD_BIG_ENDIAN);

  00459	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@EDNOFOLE@REG_DWORD_BIG_ENDIAN?$AA@
  00460	41 b8 05 00 00
	00		 mov	 r8d, 5
  00466	48 8b cb	 mov	 rcx, rbx
  00469	e8 00 00 00 00	 call	 insint

; 1853 :     ADD_INT(REG_LINK);

  0046e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08EKMNCLAG@REG_LINK?$AA@
  00475	41 b8 06 00 00
	00		 mov	 r8d, 6
  0047b	48 8b cb	 mov	 rcx, rbx
  0047e	e8 00 00 00 00	 call	 insint

; 1854 :     ADD_INT(REG_MULTI_SZ);

  00483	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@EIHNGGOL@REG_MULTI_SZ?$AA@
  0048a	41 b8 07 00 00
	00		 mov	 r8d, 7
  00490	48 8b cb	 mov	 rcx, rbx
  00493	e8 00 00 00 00	 call	 insint

; 1855 :     ADD_INT(REG_RESOURCE_LIST);

  00498	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@EFKADEAE@REG_RESOURCE_LIST?$AA@
  0049f	41 b8 08 00 00
	00		 mov	 r8d, 8
  004a5	48 8b cb	 mov	 rcx, rbx
  004a8	e8 00 00 00 00	 call	 insint

; 1856 :     ADD_INT(REG_FULL_RESOURCE_DESCRIPTOR);

  004ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@KMFEBHNF@REG_FULL_RESOURCE_DESCRIPTOR?$AA@
  004b4	41 b8 09 00 00
	00		 mov	 r8d, 9
  004ba	48 8b cb	 mov	 rcx, rbx
  004bd	e8 00 00 00 00	 call	 insint

; 1857 :     ADD_INT(REG_RESOURCE_REQUIREMENTS_LIST);

  004c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@GKOINNIK@REG_RESOURCE_REQUIREMENTS_LIST?$AA@
  004c9	41 b8 0a 00 00
	00		 mov	 r8d, 10
  004cf	48 8b cb	 mov	 rcx, rbx
  004d2	e8 00 00 00 00	 call	 insint
  004d7	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 1858 :     return m;

  004dc	48 8b c7	 mov	 rax, rdi

; 1859 : }

  004df	48 83 c4 30	 add	 rsp, 48			; 00000030H
  004e3	5f		 pop	 rdi
  004e4	c3		 ret	 0
PyInit_winreg ENDP
_TEXT	ENDS
PUBLIC	??_C@_06JGPGJGKN@?3Close?$AA@			; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyHKEY_CloseMethod DD imagerel PyHKEY_CloseMethod
	DD	imagerel PyHKEY_CloseMethod+133
	DD	imagerel $unwind$PyHKEY_CloseMethod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyHKEY_CloseMethod DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_06JGPGJGKN@?3Close?$AA@
CONST	SEGMENT
??_C@_06JGPGJGKN@?3Close?$AA@ DB ':Close', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\pc\winreg.c
CONST	ENDS
;	COMDAT PyHKEY_CloseMethod
_TEXT	SEGMENT
self$ = 64
args$ = 72
PyHKEY_CloseMethod PROC					; COMDAT

; 579  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b c2	 mov	 rax, rdx
  00009	48 8b d9	 mov	 rbx, rcx

; 580  :     if (!PyArg_ParseTuple(args, ":Close"))

  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06JGPGJGKN@?3Close?$AA@
  00013	48 8b c8	 mov	 rcx, rax
  00016	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0001b	85 c0		 test	 eax, eax
  0001d	75 08		 jne	 SHORT $LN2@PyHKEY_Clo@2
$LN9@PyHKEY_Clo@2:

; 581  :         return NULL;

  0001f	33 c0		 xor	 eax, eax

; 586  : }

  00021	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00025	5b		 pop	 rbx
  00026	c3		 ret	 0
$LN2@PyHKEY_Clo@2:

; 582  :     if (!PyHKEY_Close(self))

  00027	48 8b cb	 mov	 rcx, rbx
  0002a	e8 00 00 00 00	 call	 PyHKEY_Close
  0002f	85 c0		 test	 eax, eax

; 583  :         return NULL;

  00031	74 ec		 je	 SHORT $LN9@PyHKEY_Clo@2

; 584  :     Py_INCREF(Py_None);

  00033	e8 00 00 00 00	 call	 _Py_PXCTX
  00038	85 c0		 test	 eax, eax
  0003a	75 3c		 jne	 SHORT $LN6@PyHKEY_Clo@2
  0003c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00043	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00051	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00057	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0005f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00064	85 c0		 test	 eax, eax
  00066	75 09		 jne	 SHORT $LN5@PyHKEY_Clo@2
  00068	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0006f	74 07		 je	 SHORT $LN6@PyHKEY_Clo@2
$LN5@PyHKEY_Clo@2:
  00071	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN6@PyHKEY_Clo@2:

; 585  :     return Py_None;

  00078	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 586  : }

  0007f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00083	5b		 pop	 rbx
  00084	c3		 ret	 0
PyHKEY_CloseMethod ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyHKEY_Exit DD imagerel PyHKEY_Exit
	DD	imagerel PyHKEY_Exit+101
	DD	imagerel $unwind$PyHKEY_Exit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyHKEY_Exit DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\pc\winreg.c
xdata	ENDS
;	COMDAT PyHKEY_Exit
_TEXT	SEGMENT
self$ = 64
args$ = 72
PyHKEY_Exit PROC					; COMDAT

; 609  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 610  :     if (!PyHKEY_Close(self))

  00004	e8 00 00 00 00	 call	 PyHKEY_Close
  00009	85 c0		 test	 eax, eax
  0000b	75 07		 jne	 SHORT $LN1@PyHKEY_Exi

; 611  :         return NULL;

  0000d	33 c0		 xor	 eax, eax

; 613  : }

  0000f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00013	c3		 ret	 0
$LN1@PyHKEY_Exi:

; 612  :     Py_RETURN_NONE;

  00014	e8 00 00 00 00	 call	 _Py_PXCTX
  00019	85 c0		 test	 eax, eax
  0001b	75 3c		 jne	 SHORT $LN5@PyHKEY_Exi
  0001d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00032	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00038	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00040	e8 00 00 00 00	 call	 _PyParallel_Guard
  00045	85 c0		 test	 eax, eax
  00047	75 09		 jne	 SHORT $LN4@PyHKEY_Exi
  00049	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00050	74 07		 je	 SHORT $LN5@PyHKEY_Exi
$LN4@PyHKEY_Exi:
  00052	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN5@PyHKEY_Exi:
  00059	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 613  : }

  00060	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00064	c3		 ret	 0
PyHKEY_Exit ENDP
_TEXT	ENDS
END
