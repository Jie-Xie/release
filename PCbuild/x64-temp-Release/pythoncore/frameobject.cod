; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_05MIJNFGED@frame?$AA@			; `string'
PUBLIC	??_C@_0L@HOGGIPGN@__sizeof__?$AA@		; `string'
PUBLIC	??_C@_07JLOEJGHB@f_trace?$AA@			; `string'
PUBLIC	??_C@_08FDLCNFEJ@f_lineno?$AA@			; `string'
PUBLIC	??_C@_08BHOKOMIB@f_locals?$AA@			; `string'
PUBLIC	??_C@_07BMONJODI@f_lasti?$AA@			; `string'
PUBLIC	??_C@_09CHEKPDJP@f_globals?$AA@			; `string'
PUBLIC	??_C@_0L@JPBMANPF@f_builtins?$AA@		; `string'
PUBLIC	??_C@_06JNKOPFKK@f_code?$AA@			; `string'
PUBLIC	??_C@_06NLNNJACC@f_back?$AA@			; `string'
PUBLIC	PyFrame_Type
EXTRN	PyObject_GenericSetAttr:PROC
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
_BSS	SEGMENT
free_list DQ	01H DUP (?)
numfree	DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_05MIJNFGED@frame?$AA@
CONST	SEGMENT
??_C@_05MIJNFGED@frame?$AA@ DB 'frame', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HOGGIPGN@__sizeof__?$AA@
CONST	SEGMENT
??_C@_0L@HOGGIPGN@__sizeof__?$AA@ DB '__sizeof__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07JLOEJGHB@f_trace?$AA@
CONST	SEGMENT
??_C@_07JLOEJGHB@f_trace?$AA@ DB 'f_trace', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FDLCNFEJ@f_lineno?$AA@
CONST	SEGMENT
??_C@_08FDLCNFEJ@f_lineno?$AA@ DB 'f_lineno', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BHOKOMIB@f_locals?$AA@
CONST	SEGMENT
??_C@_08BHOKOMIB@f_locals?$AA@ DB 'f_locals', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
frame_memberlist DQ FLAT:??_C@_06NLNNJACC@f_back?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000070H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_06JNKOPFKK@f_code?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000078H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0L@JPBMANPF@f_builtins?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000080H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_09CHEKPDJP@f_globals?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000088H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_07BMONJODI@f_lasti?$AA@
	DD	01H
	ORG $+4
	DQ	00000000000000d0H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
frame_getsetlist DQ FLAT:??_C@_08BHOKOMIB@f_locals?$AA@
	DQ	FLAT:frame_getlocals
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_08FDLCNFEJ@f_lineno?$AA@
	DQ	FLAT:frame_getlineno
	DQ	FLAT:frame_setlineno
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_07JLOEJGHB@f_trace?$AA@
	DQ	FLAT:frame_gettrace
	DQ	FLAT:frame_settrace
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
sizeof__doc__ DB 'F.__sizeof__() -> size of F in memory, in bytes', 00H
frame_methods DQ FLAT:??_C@_0L@HOGGIPGN@__sizeof__?$AA@
	DQ	FLAT:frame_sizeof
	DD	04H
	ORG $+4
	DQ	FLAT:sizeof__doc__
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PyFrame_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_05MIJNFGED@frame?$AA@
	DQ	00000000000001e0H
	DQ	0000000000000008H
	DQ	FLAT:frame_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	FLAT:PyObject_GenericSetAttr
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:frame_traverse
	DQ	FLAT:frame_clear
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:frame_methods
	DQ	FLAT:frame_memberlist
	DQ	FLAT:frame_getsetlist
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+120
_DATA	ENDS
;	COMDAT ??_C@_07BMONJODI@f_lasti?$AA@
CONST	SEGMENT
??_C@_07BMONJODI@f_lasti?$AA@ DB 'f_lasti', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09CHEKPDJP@f_globals?$AA@
CONST	SEGMENT
??_C@_09CHEKPDJP@f_globals?$AA@ DB 'f_globals', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JPBMANPF@f_builtins?$AA@
CONST	SEGMENT
??_C@_0L@JPBMANPF@f_builtins?$AA@ DB 'f_builtins', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06JNKOPFKK@f_code?$AA@
CONST	SEGMENT
??_C@_06JNKOPFKK@f_code?$AA@ DB 'f_code', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NLNNJACC@f_back?$AA@
CONST	SEGMENT
??_C@_06NLNNJACC@f_back?$AA@ DB 'f_back', 00H		; `string'
CONST	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@HFBINLOF@__PyObject_GC_RESIZE?$AA@	; `string'
PUBLIC	??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@ ; `string'
EXTRN	_PyObject_GC_Resize:PROC
EXTRN	_PxObject_Resize:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\objimpl.h
pdata	SEGMENT
$pdata$__PyObject_GC_RESIZE DD imagerel __PyObject_GC_RESIZE
	DD	imagerel __PyObject_GC_RESIZE+92
	DD	imagerel $unwind$__PyObject_GC_RESIZE
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__PyObject_GC_RESIZE DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0BF@HFBINLOF@__PyObject_GC_RESIZE?$AA@
CONST	SEGMENT
??_C@_0BF@HFBINLOF@__PyObject_GC_RESIZE?$AA@ DB '__PyObject_GC_RESIZE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@
CONST	SEGMENT
??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@ DB 'c:\src\pypa'
	DB	'rallel\include\objimpl.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __PyObject_GC_RESIZE
_TEXT	SEGMENT
op$ = 64
nitems$ = 72
__PyObject_GC_RESIZE PROC				; COMDAT

; 372  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fa	 mov	 rdi, rdx
  0000d	48 8b d9	 mov	 rbx, rcx

; 373  :     if (Py_ISPX(op))

  00010	4c 8b c9	 mov	 r9, rcx
  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@
  0001a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@HFBINLOF@__PyObject_GC_RESIZE?$AA@
  00021	41 b8 75 01 00
	00		 mov	 r8d, 373		; 00000175H
  00027	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0002f	e8 00 00 00 00	 call	 _PyParallel_Guard

; 374  :         return _PxObject_Resize(op, nitems);

  00034	48 8b d7	 mov	 rdx, rdi
  00037	48 8b cb	 mov	 rcx, rbx
  0003a	85 c0		 test	 eax, eax
  0003c	74 0f		 je	 SHORT $LN2@PyObject_G

; 375  :     else
; 376  :         return _PyObject_GC_Resize(op, nitems);
; 377  : }

  0003e	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00043	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00047	5f		 pop	 rdi
  00048	e9 00 00 00 00	 jmp	 _PxObject_Resize
$LN2@PyObject_G:
  0004d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00052	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00056	5f		 pop	 rdi
  00057	e9 00 00 00 00	 jmp	 _PyObject_GC_Resize
__PyObject_GC_RESIZE ENDP
_TEXT	ENDS
PUBLIC	PyFrame_GetLineNumber
EXTRN	PyCode_Addr2Line:PROC
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\frameobject.c
;	COMDAT PyFrame_GetLineNumber
_TEXT	SEGMENT
f$ = 8
PyFrame_GetLineNumber PROC				; COMDAT

; 37   :     if (f->f_trace)

  00000	48 83 b9 a8 00
	00 00 00	 cmp	 QWORD PTR [rcx+168], 0
  00008	74 07		 je	 SHORT $LN2@PyFrame_Ge

; 38   :         return f->f_lineno;

  0000a	8b 81 d4 00 00
	00		 mov	 eax, DWORD PTR [rcx+212]

; 41   : }

  00010	c3		 ret	 0
$LN2@PyFrame_Ge:

; 39   :     else
; 40   :         return PyCode_Addr2Line(f->f_code, f->f_lasti);

  00011	8b 91 d0 00 00
	00		 mov	 edx, DWORD PTR [rcx+208]
  00017	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]

; 41   : }

  0001b	e9 00 00 00 00	 jmp	 PyCode_Addr2Line
PyFrame_GetLineNumber ENDP
_TEXT	ENDS
EXTRN	PyLong_FromLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$frame_getlineno DD imagerel frame_getlineno
	DD	imagerel frame_getlineno+20
	DD	imagerel $unwind$frame_getlineno
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$frame_getlineno DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT frame_getlineno
_TEXT	SEGMENT
f$ = 48
closure$ = 56
frame_getlineno PROC					; COMDAT

; 45   : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 46   :     return PyLong_FromLong(PyFrame_GetLineNumber(f));

  00004	e8 00 00 00 00	 call	 PyFrame_GetLineNumber
  00009	8b c8		 mov	 ecx, eax

; 47   : }

  0000b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0000f	e9 00 00 00 00	 jmp	 PyLong_FromLong
frame_getlineno ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DE@JIOCPKME@can?8t?5jump?5to?5?8except?8?5line?5as?5t@ ; `string'
PUBLIC	??_C@_0CG@MHDHEJCF@can?8t?5jump?5into?5the?5middle?5of?5a?5@ ; `string'
PUBLIC	??_C@_0CM@FFLIIPOI@can?8t?5jump?5into?5or?5out?5of?5a?5?8fin@ ; `string'
PUBLIC	??_C@_0CL@HBOPHCJE@line?5?$CFd?5comes?5after?5the?5current?5@ ; `string'
PUBLIC	??_C@_0CM@KMKPODEN@line?5?$CFd?5comes?5before?5the?5current@ ; `string'
PUBLIC	??_C@_0BE@KABHHPAP@lineno?5out?5of?5range?$AA@	; `string'
PUBLIC	??_C@_0DC@BMMFBOMD@f_lineno?5can?5only?5be?5set?5by?5a?5li@ ; `string'
PUBLIC	??_C@_0BK@CDEBPONC@lineno?5must?5be?5an?5integer?$AA@ ; `string'
EXTRN	PyBytes_AsStringAndSize:PROC
EXTRN	PyLong_AsLongAndOverflow:PROC
EXTRN	PyErr_Format:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_ValueError:QWORD
EXTRN	PyLong_Type:BYTE
EXTRN	memset:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$frame_setlineno DD imagerel frame_setlineno
	DD	imagerel frame_setlineno+130
	DD	imagerel $unwind$frame_setlineno
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$frame_setlineno DD imagerel frame_setlineno+130
	DD	imagerel frame_setlineno+195
	DD	imagerel $chain$0$frame_setlineno
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$frame_setlineno DD imagerel frame_setlineno+195
	DD	imagerel frame_setlineno+254
	DD	imagerel $chain$2$frame_setlineno
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$frame_setlineno DD imagerel frame_setlineno+254
	DD	imagerel frame_setlineno+450
	DD	imagerel $chain$5$frame_setlineno
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$frame_setlineno DD imagerel frame_setlineno+450
	DD	imagerel frame_setlineno+529
	DD	imagerel $chain$7$frame_setlineno
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$frame_setlineno DD imagerel frame_setlineno+529
	DD	imagerel frame_setlineno+882
	DD	imagerel $chain$9$frame_setlineno
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$10$frame_setlineno DD imagerel frame_setlineno+882
	DD	imagerel frame_setlineno+898
	DD	imagerel $chain$10$frame_setlineno
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$11$frame_setlineno DD imagerel frame_setlineno+898
	DD	imagerel frame_setlineno+924
	DD	imagerel $chain$11$frame_setlineno
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$13$frame_setlineno DD imagerel frame_setlineno+924
	DD	imagerel frame_setlineno+1329
	DD	imagerel $chain$13$frame_setlineno
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$14$frame_setlineno DD imagerel frame_setlineno+1329
	DD	imagerel frame_setlineno+1356
	DD	imagerel $chain$14$frame_setlineno
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$14$frame_setlineno DD 080021H
	DD	022d400H
	DD	023c400H
	DD	0246400H
	DD	0285400H
	DD	imagerel frame_setlineno
	DD	imagerel frame_setlineno+130
	DD	imagerel $unwind$frame_setlineno
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$13$frame_setlineno DD 0c0021H
	DD	020f400H
	DD	021e400H
	DD	022d400H
	DD	023c400H
	DD	0246400H
	DD	0285400H
	DD	imagerel frame_setlineno
	DD	imagerel frame_setlineno+130
	DD	imagerel $unwind$frame_setlineno
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$11$frame_setlineno DD 021H
	DD	imagerel frame_setlineno+254
	DD	imagerel frame_setlineno+450
	DD	imagerel $chain$5$frame_setlineno
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$10$frame_setlineno DD 021H
	DD	imagerel frame_setlineno+450
	DD	imagerel frame_setlineno+529
	DD	imagerel $chain$7$frame_setlineno
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$frame_setlineno DD 041f21H
	DD	020f41fH
	DD	021e408H
	DD	imagerel frame_setlineno+450
	DD	imagerel frame_setlineno+529
	DD	imagerel $chain$7$frame_setlineno
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$frame_setlineno DD 041021H
	DD	023c410H
	DD	0285408H
	DD	imagerel frame_setlineno+254
	DD	imagerel frame_setlineno+450
	DD	imagerel $chain$5$frame_setlineno
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$frame_setlineno DD 040821H
	DD	0246408H
	DD	022d400H
	DD	imagerel frame_setlineno
	DD	imagerel frame_setlineno+130
	DD	imagerel $unwind$frame_setlineno
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$frame_setlineno DD 020021H
	DD	022d400H
	DD	imagerel frame_setlineno
	DD	imagerel frame_setlineno+130
	DD	imagerel $unwind$frame_setlineno
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$frame_setlineno DD 020821H
	DD	022d408H
	DD	imagerel frame_setlineno
	DD	imagerel frame_setlineno+130
	DD	imagerel $unwind$frame_setlineno
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$frame_setlineno DD 040a01H
	DD	025010aH
	DD	030027003H
xdata	ENDS
;	COMDAT ??_C@_0DE@JIOCPKME@can?8t?5jump?5to?5?8except?8?5line?5as?5t@
CONST	SEGMENT
??_C@_0DE@JIOCPKME@can?8t?5jump?5to?5?8except?8?5line?5as?5t@ DB 'can''t '
	DB	'jump to ''except'' line as there''s no exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@MHDHEJCF@can?8t?5jump?5into?5the?5middle?5of?5a?5@
CONST	SEGMENT
??_C@_0CG@MHDHEJCF@can?8t?5jump?5into?5the?5middle?5of?5a?5@ DB 'can''t j'
	DB	'ump into the middle of a block', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@FFLIIPOI@can?8t?5jump?5into?5or?5out?5of?5a?5?8fin@
CONST	SEGMENT
??_C@_0CM@FFLIIPOI@can?8t?5jump?5into?5or?5out?5of?5a?5?8fin@ DB 'can''t '
	DB	'jump into or out of a ''finally'' block', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@HBOPHCJE@line?5?$CFd?5comes?5after?5the?5current?5@
CONST	SEGMENT
??_C@_0CL@HBOPHCJE@line?5?$CFd?5comes?5after?5the?5current?5@ DB 'line %d'
	DB	' comes after the current code block', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@KMKPODEN@line?5?$CFd?5comes?5before?5the?5current@
CONST	SEGMENT
??_C@_0CM@KMKPODEN@line?5?$CFd?5comes?5before?5the?5current@ DB 'line %d '
	DB	'comes before the current code block', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KABHHPAP@lineno?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0BE@KABHHPAP@lineno?5out?5of?5range?$AA@ DB 'lineno out of range', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@BMMFBOMD@f_lineno?5can?5only?5be?5set?5by?5a?5li@
CONST	SEGMENT
??_C@_0DC@BMMFBOMD@f_lineno?5can?5only?5be?5set?5by?5a?5li@ DB 'f_lineno '
	DB	'can only be set by a line trace function', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CDEBPONC@lineno?5must?5be?5an?5integer?$AA@
CONST	SEGMENT
??_C@_0BK@CDEBPONC@lineno?5must?5be?5an?5integer?$AA@ DB 'lineno must be '
	DB	'an integer', 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\frameobject.c
CONST	ENDS
;	COMDAT frame_setlineno
_TEXT	SEGMENT
min_addr$1$ = 48
max_addr$1$ = 52
code$ = 56
lnotab_len$ = 64
code_len$ = 72
tmp$20479 = 80
blockstack$ = 96
in_finally$ = 176
f$ = 320
new_lasti$1$ = 328
p_new_lineno$ = 328
new_lineno$1$ = 336
overflow$ = 344
frame_setlineno PROC					; COMDAT

; 66   : {

  00000	40 53		 push	 rbx
  00002	57		 push	 rdi
  00003	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H

; 67   :     int new_lineno = 0;                 /* The new value of f_lineno */
; 68   :     long l_new_lineno;
; 69   :     int overflow;
; 70   :     int new_lasti = 0;                  /* The new value of f_lasti */
; 71   :     int new_iblock = 0;                 /* The new value of f_iblock */
; 72   :     unsigned char *code = NULL;         /* The bytecode for the frame... */

  0000a	33 db		 xor	 ebx, ebx
  0000c	48 8b f9	 mov	 rdi, rcx

; 73   :     Py_ssize_t code_len = 0;            /* ...and its length */
; 74   :     unsigned char *lnotab = NULL;       /* Iterating over co_lnotab */
; 75   :     Py_ssize_t lnotab_len = 0;          /* (ditto) */
; 76   :     int offset = 0;                     /* (ditto) */
; 77   :     int line = 0;                       /* (ditto) */
; 78   :     int addr = 0;                       /* (ditto) */
; 79   :     int min_addr = 0;                   /* Scanning the SETUPs and POPs */
; 80   :     int max_addr = 0;                   /* (ditto) */
; 81   :     int delta_iblock = 0;               /* (ditto) */
; 82   :     int min_delta_iblock = 0;           /* (ditto) */
; 83   :     int min_iblock = 0;                 /* (ditto) */
; 84   :     int f_lasti_setup_addr = 0;         /* Policing no-jump-into-finally */
; 85   :     int new_lasti_setup_addr = 0;       /* (ditto) */
; 86   :     int blockstack[CO_MAXBLOCKS];       /* Walking the 'finally' blocks */
; 87   :     int in_finally[CO_MAXBLOCKS];       /* (ditto) */
; 88   :     int blockstack_top = 0;             /* (ditto) */
; 89   :     unsigned char setup_op = 0;         /* (ditto) */
; 90   : 
; 91   :     /* f_lineno must be an integer. */
; 92   :     if (!PyLong_CheckExact(p_new_lineno)) {

  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyLong_Type
  00016	48 8b c2	 mov	 rax, rdx
  00019	48 89 5c 24 38	 mov	 QWORD PTR code$[rsp], rbx
  0001e	48 89 5c 24 48	 mov	 QWORD PTR code_len$[rsp], rbx
  00023	48 89 5c 24 40	 mov	 QWORD PTR lnotab_len$[rsp], rbx
  00028	48 39 4a 58	 cmp	 QWORD PTR [rdx+88], rcx
  0002c	74 20		 je	 SHORT $LN54@frame_setl

; 93   :         PyErr_SetString(PyExc_ValueError,
; 94   :                         "lineno must be an integer");

  0002e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@CDEBPONC@lineno?5must?5be?5an?5integer?$AA@
  0003c	e8 00 00 00 00	 call	 PyErr_SetString

; 95   :         return -1;

  00041	83 c8 ff	 or	 eax, -1

; 334  : }

  00044	48 81 c4 28 01
	00 00		 add	 rsp, 296		; 00000128H
  0004b	5f		 pop	 rdi
  0004c	5b		 pop	 rbx
  0004d	c3		 ret	 0
$LN54@frame_setl:

; 96   :     }
; 97   : 
; 98   :     /* You can only do this from within a trace function, not via
; 99   :      * _getframe or similar hackery. */
; 100  :     if (!f->f_trace)

  0004e	48 39 9f a8 00
	00 00		 cmp	 QWORD PTR [rdi+168], rbx
  00055	75 20		 jne	 SHORT $LN53@frame_setl

; 101  :     {
; 102  :         PyErr_Format(PyExc_ValueError,
; 103  :                      "f_lineno can only be set by a"
; 104  :                      " line trace function");

  00057	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0005e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@BMMFBOMD@f_lineno?5can?5only?5be?5set?5by?5a?5li@
  00065	e8 00 00 00 00	 call	 PyErr_Format

; 105  :         return -1;

  0006a	83 c8 ff	 or	 eax, -1

; 334  : }

  0006d	48 81 c4 28 01
	00 00		 add	 rsp, 296		; 00000128H
  00074	5f		 pop	 rdi
  00075	5b		 pop	 rbx
  00076	c3		 ret	 0
$LN53@frame_setl:

; 106  :     }
; 107  : 
; 108  :     /* Fail if the line comes before the start of the code block. */
; 109  :     l_new_lineno = PyLong_AsLongAndOverflow(p_new_lineno, &overflow);

  00077	48 8d 94 24 58
	01 00 00	 lea	 rdx, QWORD PTR overflow$[rsp]
  0007f	48 8b c8	 mov	 rcx, rax
  00082	4c 89 ac 24 10
	01 00 00	 mov	 QWORD PTR [rsp+272], r13
  0008a	e8 00 00 00 00	 call	 PyLong_AsLongAndOverflow
  0008f	44 8b e8	 mov	 r13d, eax

; 110  :     if (overflow
; 111  : #if SIZEOF_LONG > SIZEOF_INT
; 112  :         || l_new_lineno > INT_MAX
; 113  :         || l_new_lineno < INT_MIN
; 114  : #endif
; 115  :        ) {

  00092	39 9c 24 58 01
	00 00		 cmp	 DWORD PTR overflow$[rsp], ebx
  00099	74 28		 je	 SHORT $LN52@frame_setl

; 116  :         PyErr_SetString(PyExc_ValueError,
; 117  :                         "lineno out of range");

  0009b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@KABHHPAP@lineno?5out?5of?5range?$AA@
  000a9	e8 00 00 00 00	 call	 PyErr_SetString
  000ae	4c 8b ac 24 10
	01 00 00	 mov	 r13, QWORD PTR [rsp+272]

; 118  :         return -1;

  000b6	83 c8 ff	 or	 eax, -1

; 334  : }

  000b9	48 81 c4 28 01
	00 00		 add	 rsp, 296		; 00000128H
  000c0	5f		 pop	 rdi
  000c1	5b		 pop	 rbx
  000c2	c3		 ret	 0
$LN52@frame_setl:

; 119  :     }
; 120  :     new_lineno = (int)l_new_lineno;
; 121  : 
; 122  :     if (new_lineno < f->f_code->co_firstlineno) {

  000c3	4c 8b 57 78	 mov	 r10, QWORD PTR [rdi+120]
  000c7	41 8b 82 c0 00
	00 00		 mov	 eax, DWORD PTR [r10+192]
  000ce	44 3b e8	 cmp	 r13d, eax
  000d1	7d 2b		 jge	 SHORT $LN51@frame_setl

; 123  :         PyErr_Format(PyExc_ValueError,
; 124  :                      "line %d comes before the current code block",
; 125  :                      new_lineno);

  000d3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@KMKPODEN@line?5?$CFd?5comes?5before?5the?5current@
  000e1	45 8b c5	 mov	 r8d, r13d
  000e4	e8 00 00 00 00	 call	 PyErr_Format
  000e9	4c 8b ac 24 10
	01 00 00	 mov	 r13, QWORD PTR [rsp+272]

; 126  :         return -1;

  000f1	83 c8 ff	 or	 eax, -1

; 334  : }

  000f4	48 81 c4 28 01
	00 00		 add	 rsp, 296		; 00000128H
  000fb	5f		 pop	 rdi
  000fc	5b		 pop	 rbx
  000fd	c3		 ret	 0
$LN51@frame_setl:
  000fe	48 89 b4 24 20
	01 00 00	 mov	 QWORD PTR [rsp+288], rsi

; 127  :     }
; 128  :     else if (new_lineno == f->f_code->co_firstlineno) {

  00106	44 3b e8	 cmp	 r13d, eax
  00109	75 15		 jne	 SHORT $LN49@frame_setl

; 129  :         new_lasti = 0;

  0010b	8b f3		 mov	 esi, ebx
  0010d	89 9c 24 48 01
	00 00		 mov	 DWORD PTR new_lasti$1$[rsp], ebx

; 130  :         new_lineno = f->f_code->co_firstlineno;

  00114	89 84 24 50 01
	00 00		 mov	 DWORD PTR new_lineno$1$[rsp], eax

; 131  :     }
; 132  :     else {

  0011b	e9 94 00 00 00	 jmp	 $LN43@frame_setl
$LN49@frame_setl:

; 133  :         /* Find the bytecode offset for the start of the given
; 134  :          * line, or the first code-owning line after it. */
; 135  :         char *tmp;
; 136  :         PyBytes_AsStringAndSize(f->f_code->co_lnotab,
; 137  :                                 &tmp, &lnotab_len);

  00120	49 8b 8a c8 00
	00 00		 mov	 rcx, QWORD PTR [r10+200]
  00127	4c 8d 44 24 40	 lea	 r8, QWORD PTR lnotab_len$[rsp]
  0012c	48 8d 54 24 50	 lea	 rdx, QWORD PTR tmp$20479[rsp]
  00131	e8 00 00 00 00	 call	 PyBytes_AsStringAndSize

; 138  :         lnotab = (unsigned char *) tmp;
; 139  :         addr = 0;
; 140  :         line = f->f_code->co_firstlineno;

  00136	4c 8b 57 78	 mov	 r10, QWORD PTR [rdi+120]

; 141  :         new_lasti = -1;
; 142  :         for (offset = 0; offset < lnotab_len; offset += 2) {

  0013a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR lnotab_len$[rsp]
  0013f	41 8b 92 c0 00
	00 00		 mov	 edx, DWORD PTR [r10+192]
  00146	8b f3		 mov	 esi, ebx
  00148	44 8b c3	 mov	 r8d, ebx
  0014b	4d 85 c9	 test	 r9, r9
  0014e	7e 37		 jle	 SHORT $LN84@frame_setl

; 133  :         /* Find the bytecode offset for the start of the given
; 134  :          * line, or the first code-owning line after it. */
; 135  :         char *tmp;
; 136  :         PyBytes_AsStringAndSize(f->f_code->co_lnotab,
; 137  :                                 &tmp, &lnotab_len);

  00150	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tmp$20479[rsp]
  00155	48 ff c1	 inc	 rcx
  00158	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL47@frame_setl:

; 143  :             addr += lnotab[offset];

  00160	0f b6 41 ff	 movzx	 eax, BYTE PTR [rcx-1]
  00164	03 f0		 add	 esi, eax

; 144  :             line += lnotab[offset+1];

  00166	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  00169	03 d0		 add	 edx, eax
  0016b	89 b4 24 48 01
	00 00		 mov	 DWORD PTR new_lasti$1$[rsp], esi

; 145  :             if (line >= new_lineno) {

  00172	41 3b d5	 cmp	 edx, r13d
  00175	7d 2e		 jge	 SHORT $LN78@frame_setl

; 141  :         new_lasti = -1;
; 142  :         for (offset = 0; offset < lnotab_len; offset += 2) {

  00177	41 83 c0 02	 add	 r8d, 2
  0017b	48 83 c1 02	 add	 rcx, 2
  0017f	49 63 c0	 movsxd	 rax, r8d
  00182	49 3b c1	 cmp	 rax, r9
  00185	7c d9		 jl	 SHORT $LL47@frame_setl
$LN84@frame_setl:

; 155  :         PyErr_Format(PyExc_ValueError,
; 156  :                      "line %d comes after the current code block",
; 157  :                      new_lineno);

  00187	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0018e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@HBOPHCJE@line?5?$CFd?5comes?5after?5the?5current?5@
  00195	45 8b c5	 mov	 r8d, r13d
  00198	e8 00 00 00 00	 call	 PyErr_Format

; 158  :         return -1;

  0019d	83 c8 ff	 or	 eax, -1
  001a0	e9 dd 01 00 00	 jmp	 $LN86@frame_setl
$LN78@frame_setl:

; 146  :                 new_lasti = addr;
; 147  :                 new_lineno = line;

  001a5	44 8b ea	 mov	 r13d, edx
  001a8	89 94 24 50 01
	00 00		 mov	 DWORD PTR new_lineno$1$[rsp], edx

; 148  :                 break;
; 149  :             }
; 150  :         }
; 151  :     }
; 152  : 
; 153  :     /* If we didn't reach the requested line, return an error. */
; 154  :     if (new_lasti == -1) {

  001af	83 fe ff	 cmp	 esi, -1
  001b2	74 d3		 je	 SHORT $LN84@frame_setl
$LN43@frame_setl:

; 159  :     }
; 160  : 
; 161  :     /* We're now ready to look at the bytecode. */
; 162  :     PyBytes_AsStringAndSize(f->f_code->co_code, (char **)&code, &code_len);

  001b4	49 8b 4a 78	 mov	 rcx, QWORD PTR [r10+120]
  001b8	4c 8d 44 24 48	 lea	 r8, QWORD PTR code_len$[rsp]
  001bd	48 8d 54 24 38	 lea	 rdx, QWORD PTR code$[rsp]
  001c2	48 89 ac 24 40
	01 00 00	 mov	 QWORD PTR [rsp+320], rbp
  001ca	4c 89 a4 24 18
	01 00 00	 mov	 QWORD PTR [rsp+280], r12
  001d2	e8 00 00 00 00	 call	 PyBytes_AsStringAndSize

; 163  :     min_addr = MIN(new_lasti, f->f_lasti);

  001d7	44 8b a7 d0 00
	00 00		 mov	 r12d, DWORD PTR [rdi+208]

; 164  :     max_addr = MAX(new_lasti, f->f_lasti);
; 165  : 
; 166  :     /* You can't jump onto a line with an 'except' statement on it -
; 167  :      * they expect to have an exception on the top of the stack, which
; 168  :      * won't be true if you jump to them.  They always start with code
; 169  :      * that either pops the exception using POP_TOP (plain 'except:'
; 170  :      * lines do this) or duplicates the exception on the stack using
; 171  :      * DUP_TOP (if there's an exception type specified).  See compile.c,
; 172  :      * 'com_try_except' for the full details.  There aren't any other
; 173  :      * cases (AFAIK) where a line's code can start with DUP_TOP or
; 174  :      * POP_TOP, but if any ever appear, they'll be subject to the same
; 175  :      * restriction (but with a different error message). */
; 176  :     if (code[new_lasti] == DUP_TOP || code[new_lasti] == POP_TOP) {

  001de	48 63 ee	 movsxd	 rbp, esi
  001e1	41 3b f4	 cmp	 esi, r12d
  001e4	41 8b c4	 mov	 eax, r12d
  001e7	0f 4c c6	 cmovl	 eax, esi
  001ea	89 44 24 30	 mov	 DWORD PTR min_addr$1$[rsp], eax
  001ee	41 8b c4	 mov	 eax, r12d
  001f1	0f 4f c6	 cmovg	 eax, esi
  001f4	48 8b 74 24 38	 mov	 rsi, QWORD PTR code$[rsp]
  001f9	89 44 24 34	 mov	 DWORD PTR max_addr$1$[rsp], eax
  001fd	0f b6 04 2e	 movzx	 eax, BYTE PTR [rsi+rbp]
  00201	3c 04		 cmp	 al, 4
  00203	0f 84 28 03 00
	00		 je	 $LN41@frame_setl
  00209	3c 01		 cmp	 al, 1
  0020b	0f 84 20 03 00
	00		 je	 $LN41@frame_setl

; 180  :     }
; 181  : 
; 182  :     /* You can't jump into or out of a 'finally' block because the 'try'
; 183  :      * block leaves something on the stack for the END_FINALLY to clean
; 184  :      * up.      So we walk the bytecode, maintaining a simulated blockstack.
; 185  :      * When we reach the old or new address and it's in a 'finally' block
; 186  :      * we note the address of the corresponding SETUP_FINALLY.  The jump
; 187  :      * is only legal if neither address is in a 'finally' block or
; 188  :      * they're both in the same one.  'blockstack' is a stack of the
; 189  :      * bytecode addresses of the SETUP_X opcodes, and 'in_finally' tracks
; 190  :      * whether we're in a 'finally' block at each blockstack level. */
; 191  :     f_lasti_setup_addr = -1;

  00211	4c 89 b4 24 08
	01 00 00	 mov	 QWORD PTR [rsp+264], r14
  00219	41 83 ce ff	 or	 r14d, -1

; 192  :     new_lasti_setup_addr = -1;
; 193  :     memset(blockstack, '\0', sizeof(blockstack));

  0021d	48 8d 4c 24 60	 lea	 rcx, QWORD PTR blockstack$[rsp]
  00222	45 8d 46 51	 lea	 r8d, QWORD PTR [r14+81]
  00226	33 d2		 xor	 edx, edx
  00228	4c 89 bc 24 00
	01 00 00	 mov	 QWORD PTR [rsp+256], r15
  00230	45 0b fe	 or	 r15d, r14d
  00233	e8 00 00 00 00	 call	 memset

; 194  :     memset(in_finally, '\0', sizeof(in_finally));

  00238	45 8d 46 51	 lea	 r8d, QWORD PTR [r14+81]
  0023c	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR in_finally$[rsp]
  00244	33 d2		 xor	 edx, edx
  00246	e8 00 00 00 00	 call	 memset

; 195  :     blockstack_top = 0;
; 196  :     for (addr = 0; addr < code_len; addr++) {

  0024b	4c 8b 6c 24 48	 mov	 r13, QWORD PTR code_len$[rsp]
  00250	44 8b db	 mov	 r11d, ebx
  00253	4c 8b d3	 mov	 r10, rbx
  00256	48 8b cb	 mov	 rcx, rbx
  00259	4d 85 ed	 test	 r13, r13
  0025c	0f 8e 3a 01 00
	00		 jle	 $LN16@frame_setl

; 180  :     }
; 181  : 
; 182  :     /* You can't jump into or out of a 'finally' block because the 'try'
; 183  :      * block leaves something on the stack for the END_FINALLY to clean
; 184  :      * up.      So we walk the bytecode, maintaining a simulated blockstack.
; 185  :      * When we reach the old or new address and it's in a 'finally' block
; 186  :      * we note the address of the corresponding SETUP_FINALLY.  The jump
; 187  :      * is only legal if neither address is in a 'finally' block or
; 188  :      * they're both in the same one.  'blockstack' is a stack of the
; 189  :      * bytecode addresses of the SETUP_X opcodes, and 'in_finally' tracks
; 190  :      * whether we're in a 'finally' block at each blockstack level. */
; 191  :     f_lasti_setup_addr = -1;

  00262	4c 8d 84 24 b0
	00 00 00	 lea	 r8, QWORD PTR in_finally$[rsp]
  0026a	49 83 e8 04	 sub	 r8, 4
  0026e	66 90		 npad	 2
$LL40@frame_setl:

; 197  :         unsigned char op = code[addr];

  00270	45 0f b6 0c 32	 movzx	 r9d, BYTE PTR [r10+rsi]

; 198  :         switch (op) {

  00275	41 80 f9 57	 cmp	 r9b, 87			; 00000057H
  00279	74 4a		 je	 SHORT $LN34@frame_setl
  0027b	41 80 f9 58	 cmp	 r9b, 88			; 00000058H
  0027f	74 23		 je	 SHORT $LN30@frame_setl
  00281	41 80 f9 77	 cmp	 r9b, 119		; 00000077H
  00285	76 61		 jbe	 SHORT $LN31@frame_setl
  00287	41 80 f9 7a	 cmp	 r9b, 122		; 0000007aH
  0028b	76 06		 jbe	 SHORT $LN35@frame_setl
  0028d	41 80 f9 8f	 cmp	 r9b, 143		; 0000008fH
  00291	75 55		 jne	 SHORT $LN31@frame_setl
$LN35@frame_setl:

; 199  :         case SETUP_LOOP:
; 200  :         case SETUP_EXCEPT:
; 201  :         case SETUP_FINALLY:
; 202  :         case SETUP_WITH:
; 203  :             blockstack[blockstack_top++] = addr;

  00293	44 89 5c 8c 60	 mov	 DWORD PTR blockstack$[rsp+rcx*4], r11d
  00298	48 ff c1	 inc	 rcx
  0029b	49 83 c0 04	 add	 r8, 4

; 204  :             in_finally[blockstack_top-1] = 0;

  0029f	41 89 18	 mov	 DWORD PTR [r8], ebx

; 205  :             break;

  002a2	eb 44		 jmp	 SHORT $LN31@frame_setl
$LN30@frame_setl:

; 215  :             }
; 216  :             break;
; 217  : 
; 218  :         case END_FINALLY:
; 219  :             /* Ignore END_FINALLYs for SETUP_EXCEPTs - they exist
; 220  :              * in the bytecode but don't correspond to an actual
; 221  :              * 'finally' block.  (If blockstack_top is 0, we must
; 222  :              * be seeing such an END_FINALLY.) */
; 223  :             if (blockstack_top > 0) {

  002a4	48 85 c9	 test	 rcx, rcx
  002a7	7e 3f		 jle	 SHORT $LN31@frame_setl

; 224  :                 setup_op = code[blockstack[blockstack_top-1]];

  002a9	48 63 44 8c 5c	 movsxd	 rax, DWORD PTR blockstack$[rsp+rcx*4-4]
  002ae	0f b6 14 30	 movzx	 edx, BYTE PTR [rax+rsi]

; 225  :                 if (setup_op == SETUP_FINALLY || setup_op == SETUP_WITH) {

  002b2	80 fa 7a	 cmp	 dl, 122			; 0000007aH
  002b5	74 05		 je	 SHORT $LN27@frame_setl
  002b7	80 fa 8f	 cmp	 dl, 143			; 0000008fH
  002ba	75 2c		 jne	 SHORT $LN31@frame_setl
$LN27@frame_setl:

; 226  :                     blockstack_top--;

  002bc	48 ff c9	 dec	 rcx
  002bf	49 83 e8 04	 sub	 r8, 4

; 227  :                 }
; 228  :             }
; 229  :             break;

  002c3	eb 23		 jmp	 SHORT $LN31@frame_setl
$LN34@frame_setl:

; 206  : 
; 207  :         case POP_BLOCK:
; 208  :             assert(blockstack_top > 0);
; 209  :             setup_op = code[blockstack[blockstack_top-1]];

  002c5	48 63 44 8c 5c	 movsxd	 rax, DWORD PTR blockstack$[rsp+rcx*4-4]
  002ca	0f b6 14 30	 movzx	 edx, BYTE PTR [rax+rsi]

; 210  :             if (setup_op == SETUP_FINALLY || setup_op == SETUP_WITH) {

  002ce	80 fa 7a	 cmp	 dl, 122			; 0000007aH
  002d1	74 0e		 je	 SHORT $LN32@frame_setl
  002d3	80 fa 8f	 cmp	 dl, 143			; 0000008fH
  002d6	74 09		 je	 SHORT $LN32@frame_setl

; 212  :             }
; 213  :             else {
; 214  :                 blockstack_top--;

  002d8	48 ff c9	 dec	 rcx
  002db	49 83 e8 04	 sub	 r8, 4
  002df	eb 07		 jmp	 SHORT $LN31@frame_setl
$LN32@frame_setl:

; 211  :                 in_finally[blockstack_top-1] = 1;

  002e1	41 c7 00 01 00
	00 00		 mov	 DWORD PTR [r8], 1
$LN31@frame_setl:

; 230  :         }
; 231  : 
; 232  :         /* For the addresses we're interested in, see whether they're
; 233  :          * within a 'finally' block and if so, remember the address
; 234  :          * of the SETUP_FINALLY. */
; 235  :         if (addr == new_lasti || addr == f->f_lasti) {

  002e8	4c 3b d5	 cmp	 r10, rbp
  002eb	74 05		 je	 SHORT $LN25@frame_setl
  002ed	45 3b dc	 cmp	 r11d, r12d
  002f0	75 35		 jne	 SHORT $LN18@frame_setl
$LN25@frame_setl:

; 195  :     blockstack_top = 0;
; 196  :     for (addr = 0; addr < code_len; addr++) {

  002f2	48 8d 41 ff	 lea	 rax, QWORD PTR [rcx-1]

; 236  :             int i = 0;
; 237  :             int setup_addr = -1;
; 238  :             for (i = blockstack_top-1; i >= 0; i--) {

  002f6	48 83 f9 01	 cmp	 rcx, 1
  002fa	7c 2b		 jl	 SHORT $LN18@frame_setl
  002fc	0f 1f 40 00	 npad	 4
$LL24@frame_setl:

; 239  :                 if (in_finally[i]) {

  00300	39 9c 84 b0 00
	00 00		 cmp	 DWORD PTR in_finally$[rsp+rax*4], ebx
  00307	75 07		 jne	 SHORT $LN79@frame_setl

; 236  :             int i = 0;
; 237  :             int setup_addr = -1;
; 238  :             for (i = blockstack_top-1; i >= 0; i--) {

  00309	48 ff c8	 dec	 rax
  0030c	79 f2		 jns	 SHORT $LL24@frame_setl

; 239  :                 if (in_finally[i]) {

  0030e	eb 17		 jmp	 SHORT $LN18@frame_setl
$LN79@frame_setl:

; 240  :                     setup_addr = blockstack[i];

  00310	8b 54 84 60	 mov	 edx, DWORD PTR blockstack$[rsp+rax*4]

; 241  :                     break;
; 242  :                 }
; 243  :             }
; 244  : 
; 245  :             if (setup_addr != -1) {

  00314	83 fa ff	 cmp	 edx, -1
  00317	74 0e		 je	 SHORT $LN18@frame_setl

; 246  :                 if (addr == new_lasti) {

  00319	4c 3b d5	 cmp	 r10, rbp
  0031c	44 0f 44 fa	 cmove	 r15d, edx

; 247  :                     new_lasti_setup_addr = setup_addr;
; 248  :                 }
; 249  : 
; 250  :                 if (addr == f->f_lasti) {

  00320	45 3b dc	 cmp	 r11d, r12d
  00323	44 0f 44 f2	 cmove	 r14d, edx
$LN18@frame_setl:

; 251  :                     f_lasti_setup_addr = setup_addr;
; 252  :                 }
; 253  :             }
; 254  :         }
; 255  : 
; 256  :         if (op >= HAVE_ARGUMENT) {

  00327	41 80 f9 5a	 cmp	 r9b, 90			; 0000005aH
  0032b	72 08		 jb	 SHORT $LN39@frame_setl

; 257  :             addr += 2;

  0032d	41 83 c3 02	 add	 r11d, 2
  00331	49 83 c2 02	 add	 r10, 2
$LN39@frame_setl:

; 195  :     blockstack_top = 0;
; 196  :     for (addr = 0; addr < code_len; addr++) {

  00335	41 ff c3	 inc	 r11d
  00338	49 ff c2	 inc	 r10
  0033b	49 63 c3	 movsxd	 rax, r11d
  0033e	49 3b c5	 cmp	 rax, r13
  00341	0f 8c 29 ff ff
	ff		 jl	 $LL40@frame_setl

; 258  :         }
; 259  :     }
; 260  : 
; 261  :     /* Verify that the blockstack tracking code didn't get lost. */
; 262  :     assert(blockstack_top == 0);
; 263  : 
; 264  :     /* After all that, are we jumping into / out of a 'finally' block? */
; 265  :     if (new_lasti_setup_addr != f_lasti_setup_addr) {

  00347	45 3b fe	 cmp	 r15d, r14d
  0034a	74 50		 je	 SHORT $LN16@frame_setl

; 266  :         PyErr_SetString(PyExc_ValueError,
; 267  :                     "can't jump into or out of a 'finally' block");

  0034c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@FFLIIPOI@can?8t?5jump?5into?5or?5out?5of?5a?5?8fin@
$LN91@frame_setl:
  00353	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0035a	e8 00 00 00 00	 call	 PyErr_SetString

; 268  :         return -1;

  0035f	83 c8 ff	 or	 eax, -1
$LN90@frame_setl:
  00362	4c 8b b4 24 08
	01 00 00	 mov	 r14, QWORD PTR [rsp+264]
  0036a	4c 8b bc 24 00
	01 00 00	 mov	 r15, QWORD PTR [rsp+256]
$LN88@frame_setl:
  00372	4c 8b a4 24 18
	01 00 00	 mov	 r12, QWORD PTR [rsp+280]
  0037a	48 8b ac 24 40
	01 00 00	 mov	 rbp, QWORD PTR [rsp+320]
$LN86@frame_setl:
  00382	48 8b b4 24 20
	01 00 00	 mov	 rsi, QWORD PTR [rsp+288]
  0038a	4c 8b ac 24 10
	01 00 00	 mov	 r13, QWORD PTR [rsp+272]

; 334  : }

  00392	48 81 c4 28 01
	00 00		 add	 rsp, 296		; 00000128H
  00399	5f		 pop	 rdi
  0039a	5b		 pop	 rbx
  0039b	c3		 ret	 0
$LN16@frame_setl:

; 269  :     }
; 270  : 
; 271  : 
; 272  :     /* Police block-jumping (you can't jump into the middle of a block)
; 273  :      * and ensure that the blockstack finishes up in a sensible state (by
; 274  :      * popping any blocks we're jumping out of).  We look at all the
; 275  :      * blockstack operations between the current position and the new
; 276  :      * one, and keep track of how many blocks we drop out of on the way.
; 277  :      * By also keeping track of the lowest blockstack position we see, we
; 278  :      * can tell whether the jump goes into any blocks without coming out
; 279  :      * again - in that case we raise an exception below. */
; 280  :     delta_iblock = 0;

  0039c	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR min_addr$1$[rsp]

; 281  :     for (addr = min_addr; addr < max_addr; addr++) {

  003a1	4c 63 4c 24 34	 movsxd	 r9, DWORD PTR max_addr$1$[rsp]
  003a6	8b d3		 mov	 edx, ebx
  003a8	49 3b c9	 cmp	 rcx, r9
  003ab	7d 41		 jge	 SHORT $LN13@frame_setl
  003ad	0f 1f 00	 npad	 3
$LL15@frame_setl:

; 282  :         unsigned char op = code[addr];

  003b0	44 0f b6 04 31	 movzx	 r8d, BYTE PTR [rcx+rsi]

; 283  :         switch (op) {

  003b5	41 80 f8 57	 cmp	 r8b, 87			; 00000057H
  003b9	74 16		 je	 SHORT $LN9@frame_setl
  003bb	41 80 f8 77	 cmp	 r8b, 119		; 00000077H
  003bf	76 12		 jbe	 SHORT $LN11@frame_setl
  003c1	41 80 f8 7a	 cmp	 r8b, 122		; 0000007aH
  003c5	76 06		 jbe	 SHORT $LN10@frame_setl
  003c7	41 80 f8 8f	 cmp	 r8b, 143		; 0000008fH
  003cb	75 06		 jne	 SHORT $LN11@frame_setl
$LN10@frame_setl:

; 284  :         case SETUP_LOOP:
; 285  :         case SETUP_EXCEPT:
; 286  :         case SETUP_FINALLY:
; 287  :         case SETUP_WITH:
; 288  :             delta_iblock++;

  003cd	ff c2		 inc	 edx

; 289  :             break;

  003cf	eb 02		 jmp	 SHORT $LN11@frame_setl
$LN9@frame_setl:

; 290  : 
; 291  :         case POP_BLOCK:
; 292  :             delta_iblock--;

  003d1	ff ca		 dec	 edx
$LN11@frame_setl:

; 293  :             break;
; 294  :         }
; 295  : 
; 296  :         min_delta_iblock = MIN(min_delta_iblock, delta_iblock);

  003d3	3b da		 cmp	 ebx, edx
  003d5	8b c2		 mov	 eax, edx
  003d7	0f 4c c3	 cmovl	 eax, ebx
  003da	8b d8		 mov	 ebx, eax

; 297  : 
; 298  :         if (op >= HAVE_ARGUMENT) {

  003dc	41 80 f8 5a	 cmp	 r8b, 90			; 0000005aH
  003e0	72 04		 jb	 SHORT $LN14@frame_setl

; 299  :             addr += 2;

  003e2	48 83 c1 02	 add	 rcx, 2
$LN14@frame_setl:

; 281  :     for (addr = min_addr; addr < max_addr; addr++) {

  003e6	48 ff c1	 inc	 rcx
  003e9	49 3b c9	 cmp	 rcx, r9
  003ec	7c c2		 jl	 SHORT $LL15@frame_setl
$LN13@frame_setl:

; 300  :         }
; 301  :     }
; 302  : 
; 303  :     /* Derive the absolute iblock values from the deltas. */
; 304  :     min_iblock = f->f_iblock + min_delta_iblock;

  003ee	8b 87 d8 00 00
	00		 mov	 eax, DWORD PTR [rdi+216]

; 305  :     if (new_lasti > f->f_lasti) {

  003f4	44 8b ac 24 48
	01 00 00	 mov	 r13d, DWORD PTR new_lasti$1$[rsp]
  003fc	8d 0c 18	 lea	 ecx, DWORD PTR [rax+rbx]
  003ff	45 3b ec	 cmp	 r13d, r12d
  00402	7e 05		 jle	 SHORT $LN7@frame_setl

; 306  :         /* Forwards jump. */
; 307  :         new_iblock = f->f_iblock + delta_iblock;

  00404	8d 2c 10	 lea	 ebp, DWORD PTR [rax+rdx]

; 308  :     }
; 309  :     else {

  00407	eb 04		 jmp	 SHORT $LN6@frame_setl
$LN7@frame_setl:

; 310  :         /* Backwards jump. */
; 311  :         new_iblock = f->f_iblock - delta_iblock;

  00409	8b e8		 mov	 ebp, eax
  0040b	2b ea		 sub	 ebp, edx
$LN6@frame_setl:

; 312  :     }
; 313  : 
; 314  :     /* Are we jumping into a block? */
; 315  :     if (new_iblock > min_iblock) {

  0040d	3b e9		 cmp	 ebp, ecx
  0040f	7e 0c		 jle	 SHORT $LN76@frame_setl

; 316  :         PyErr_SetString(PyExc_ValueError,
; 317  :                         "can't jump into the middle of a block");

  00411	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@MHDHEJCF@can?8t?5jump?5into?5the?5middle?5of?5a?5@

; 318  :         return -1;

  00418	e9 36 ff ff ff	 jmp	 $LN91@frame_setl
$LN76@frame_setl:

; 319  :     }
; 320  : 
; 321  :     /* Pop any blocks that we're jumping out of. */
; 322  :     while (f->f_iblock > new_iblock) {

  0041d	3b c5		 cmp	 eax, ebp
  0041f	0f 8e f1 00 00
	00		 jle	 $LN3@frame_setl
  00425	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@frame_setl:

; 323  :         PyTryBlock *b = &f->f_blockstack[--f->f_iblock];

  00430	ff 8f d8 00 00
	00		 dec	 DWORD PTR [rdi+216]
  00436	48 63 87 d8 00
	00 00		 movsxd	 rax, DWORD PTR [rdi+216]

; 324  :         while ((f->f_stacktop - f->f_valuestack) > b->b_level) {

  0043d	48 8b 8f a0 00
	00 00		 mov	 rcx, QWORD PTR [rdi+160]
  00444	48 2b 8f 98 00
	00 00		 sub	 rcx, QWORD PTR [rdi+152]
  0044b	48 8d 34 40	 lea	 rsi, QWORD PTR [rax+rax*2]
  0044f	48 63 84 b7 e4
	00 00 00	 movsxd	 rax, DWORD PTR [rdi+rsi*4+228]
  00457	48 c1 f9 03	 sar	 rcx, 3
  0045b	48 3b c8	 cmp	 rcx, rax
  0045e	0f 8e a6 00 00
	00		 jle	 $LN1@frame_setl
  00464	66 66 66 66 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL2@frame_setl:

; 325  :             PyObject *v = (*--f->f_stacktop);

  00470	48 83 87 a0 00
	00 00 f8	 add	 QWORD PTR [rdi+160], -8
  00478	48 8b 87 a0 00
	00 00		 mov	 rax, QWORD PTR [rdi+160]
  0047f	48 8b 18	 mov	 rbx, QWORD PTR [rax]

; 326  :             Py_DECREF(v);

  00482	e8 00 00 00 00	 call	 _Py_PXCTX
  00487	85 c0		 test	 eax, eax
  00489	75 5c		 jne	 SHORT $LN71@frame_setl
  0048b	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0048f	a8 20		 test	 al, 32			; 00000020H
  00491	75 4c		 jne	 SHORT $LN65@frame_setl
  00493	84 c0		 test	 al, al
  00495	78 48		 js	 SHORT $LN65@frame_setl
  00497	a8 02		 test	 al, 2
  00499	75 4c		 jne	 SHORT $LN71@frame_setl
  0049b	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0049f	75 46		 jne	 SHORT $LN71@frame_setl
  004a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  004a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  004af	4c 8b cb	 mov	 r9, rbx
  004b2	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  004b8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  004c0	e8 00 00 00 00	 call	 _PyParallel_Guard
  004c5	48 8b cb	 mov	 rcx, rbx
  004c8	85 c0		 test	 eax, eax
  004ca	74 07		 je	 SHORT $LN70@frame_setl
  004cc	e8 00 00 00 00	 call	 _Px_Dealloc
  004d1	eb 14		 jmp	 SHORT $LN71@frame_setl
$LN70@frame_setl:
  004d3	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  004d7	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  004dd	eb 08		 jmp	 SHORT $LN71@frame_setl
$LN65@frame_setl:
  004df	48 8b cb	 mov	 rcx, rbx
  004e2	e8 00 00 00 00	 call	 Px_DecRef
$LN71@frame_setl:

; 324  :         while ((f->f_stacktop - f->f_valuestack) > b->b_level) {

  004e7	48 8b 8f a0 00
	00 00		 mov	 rcx, QWORD PTR [rdi+160]
  004ee	48 63 84 b7 e4
	00 00 00	 movsxd	 rax, DWORD PTR [rdi+rsi*4+228]
  004f6	48 2b 8f 98 00
	00 00		 sub	 rcx, QWORD PTR [rdi+152]
  004fd	48 c1 f9 03	 sar	 rcx, 3
  00501	48 3b c8	 cmp	 rcx, rax
  00504	0f 8f 66 ff ff
	ff		 jg	 $LL2@frame_setl
$LN1@frame_setl:

; 319  :     }
; 320  : 
; 321  :     /* Pop any blocks that we're jumping out of. */
; 322  :     while (f->f_iblock > new_iblock) {

  0050a	39 af d8 00 00
	00		 cmp	 DWORD PTR [rdi+216], ebp
  00510	0f 8f 1a ff ff
	ff		 jg	 $LL4@frame_setl
$LN3@frame_setl:

; 327  :         }
; 328  :     }
; 329  : 
; 330  :     /* Finally set the new f_lineno and f_lasti and return OK. */
; 331  :     f->f_lineno = new_lineno;

  00516	8b 84 24 50 01
	00 00		 mov	 eax, DWORD PTR new_lineno$1$[rsp]

; 332  :     f->f_lasti = new_lasti;

  0051d	44 89 af d0 00
	00 00		 mov	 DWORD PTR [rdi+208], r13d
  00524	89 87 d4 00 00
	00		 mov	 DWORD PTR [rdi+212], eax

; 333  :     return 0;

  0052a	33 c0		 xor	 eax, eax
  0052c	e9 31 fe ff ff	 jmp	 $LN90@frame_setl
$LN41@frame_setl:

; 177  :         PyErr_SetString(PyExc_ValueError,
; 178  :             "can't jump to 'except' line as there's no exception");

  00531	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00538	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@JIOCPKME@can?8t?5jump?5to?5?8except?8?5line?5as?5t@
  0053f	e8 00 00 00 00	 call	 PyErr_SetString

; 179  :         return -1;

  00544	83 c8 ff	 or	 eax, -1
  00547	e9 26 fe ff ff	 jmp	 $LN88@frame_setl
frame_setlineno ENDP
_TEXT	ENDS
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$frame_gettrace DD imagerel frame_gettrace
	DD	imagerel frame_gettrace+95
	DD	imagerel $unwind$frame_gettrace
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$frame_gettrace DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\frameobject.c
xdata	ENDS
;	COMDAT frame_gettrace
_TEXT	SEGMENT
f$ = 64
closure$ = 72
frame_gettrace PROC					; COMDAT

; 338  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 339  :     PyObject* trace = f->f_trace;

  00006	48 8b 81 a8 00
	00 00		 mov	 rax, QWORD PTR [rcx+168]

; 340  : 
; 341  :     if (trace == NULL)

  0000d	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  00014	48 85 c0	 test	 rax, rax
  00017	48 0f 45 d8	 cmovne	 rbx, rax

; 342  :         trace = Py_None;
; 343  : 
; 344  :     Py_INCREF(trace);

  0001b	e8 00 00 00 00	 call	 _Py_PXCTX
  00020	85 c0		 test	 eax, eax
  00022	75 32		 jne	 SHORT $LN8@frame_gett
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00032	4c 8b cb	 mov	 r9, rbx
  00035	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0003b	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00043	e8 00 00 00 00	 call	 _PyParallel_Guard
  00048	85 c0		 test	 eax, eax
  0004a	75 06		 jne	 SHORT $LN4@frame_gett
  0004c	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00050	74 04		 je	 SHORT $LN8@frame_gett
$LN4@frame_gett:
  00052	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN8@frame_gett:

; 345  : 
; 346  :     return trace;

  00056	48 8b c3	 mov	 rax, rbx

; 347  : }

  00059	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005d	5b		 pop	 rbx
  0005e	c3		 ret	 0
frame_gettrace ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$frame_settrace DD imagerel frame_settrace
	DD	imagerel frame_settrace+270
	DD	imagerel $unwind$frame_settrace
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$frame_settrace DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\frameobject.c
xdata	ENDS
;	COMDAT frame_settrace
_TEXT	SEGMENT
f$ = 64
v$ = 72
closure$ = 80
frame_settrace PROC					; COMDAT

; 351  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fa	 mov	 rdi, rdx
  00012	48 8b f1	 mov	 rsi, rcx

; 352  :     PyObject* old_value;
; 353  : 
; 354  :     /* We rely on f_lineno being accurate when f_trace is set. */
; 355  :     f->f_lineno = PyFrame_GetLineNumber(f);

  00015	e8 00 00 00 00	 call	 PyFrame_GetLineNumber

; 356  : 
; 357  :     old_value = f->f_trace;

  0001a	48 8b 9e a8 00
	00 00		 mov	 rbx, QWORD PTR [rsi+168]
  00021	89 86 d4 00 00
	00		 mov	 DWORD PTR [rsi+212], eax

; 358  :     Py_XINCREF(v);

  00027	48 85 ff	 test	 rdi, rdi
  0002a	74 3b		 je	 SHORT $LN7@frame_sett
  0002c	e8 00 00 00 00	 call	 _Py_PXCTX
  00031	85 c0		 test	 eax, eax
  00033	75 32		 jne	 SHORT $LN7@frame_sett
  00035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00043	4c 8b cf	 mov	 r9, rdi
  00046	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0004c	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00054	e8 00 00 00 00	 call	 _PyParallel_Guard
  00059	85 c0		 test	 eax, eax
  0005b	75 06		 jne	 SHORT $LN11@frame_sett
  0005d	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  00061	74 04		 je	 SHORT $LN7@frame_sett
$LN11@frame_sett:
  00063	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN7@frame_sett:

; 359  :     f->f_trace = v;

  00067	48 89 be a8 00
	00 00		 mov	 QWORD PTR [rsi+168], rdi

; 360  :     Py_XDECREF(old_value);

  0006e	48 85 db	 test	 rbx, rbx
  00071	0f 84 85 00 00
	00		 je	 $LN28@frame_sett
  00077	e8 00 00 00 00	 call	 _Py_PXCTX
  0007c	85 c0		 test	 eax, eax
  0007e	75 7c		 jne	 SHORT $LN28@frame_sett
  00080	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00084	a8 20		 test	 al, 32			; 00000020H
  00086	75 6c		 jne	 SHORT $LN19@frame_sett
  00088	84 c0		 test	 al, al
  0008a	78 68		 js	 SHORT $LN19@frame_sett
  0008c	a8 02		 test	 al, 2
  0008e	75 6c		 jne	 SHORT $LN28@frame_sett
  00090	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00094	75 66		 jne	 SHORT $LN28@frame_sett
  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0009d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000a4	4c 8b cb	 mov	 r9, rbx
  000a7	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000ad	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000b5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ba	48 8b cb	 mov	 rcx, rbx
  000bd	85 c0		 test	 eax, eax
  000bf	74 17		 je	 SHORT $LN24@frame_sett
  000c1	e8 00 00 00 00	 call	 _Px_Dealloc

; 361  : 
; 362  :     return 0;

  000c6	33 c0		 xor	 eax, eax

; 363  : }

  000c8	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000cd	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000d2	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d6	5f		 pop	 rdi
  000d7	c3		 ret	 0

; 360  :     Py_XDECREF(old_value);

$LN24@frame_sett:
  000d8	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000dc	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 361  : 
; 362  :     return 0;

  000e2	33 c0		 xor	 eax, eax

; 363  : }

  000e4	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000e9	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000ee	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000f2	5f		 pop	 rdi
  000f3	c3		 ret	 0

; 360  :     Py_XDECREF(old_value);

$LN19@frame_sett:
  000f4	48 8b cb	 mov	 rcx, rbx
  000f7	e8 00 00 00 00	 call	 Px_DecRef
$LN28@frame_sett:

; 363  : }

  000fc	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00101	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00106	33 c0		 xor	 eax, eax
  00108	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0010c	5f		 pop	 rdi
  0010d	c3		 ret	 0
frame_settrace ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@FMIPEGNB@frame_dealloc?$AA@		; `string'
PUBLIC	??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@ ; `string'
EXTRN	_PyTrash_thread_deposit_object:PROC
EXTRN	_PyTrash_thread_destroy_chain:PROC
EXTRN	PyObject_GC_Del:PROC
EXTRN	_PyThreadState_Current:QWORD
EXTRN	_PyParallel_GetThreadState:PROC
EXTRN	PyObject_GC_UnTrack:PROC
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$frame_dealloc DD imagerel frame_dealloc
	DD	imagerel frame_dealloc+99
	DD	imagerel $unwind$frame_dealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$frame_dealloc DD imagerel frame_dealloc+99
	DD	imagerel frame_dealloc+104
	DD	imagerel $chain$0$frame_dealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$frame_dealloc DD imagerel frame_dealloc+104
	DD	imagerel frame_dealloc+111
	DD	imagerel $chain$1$frame_dealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$frame_dealloc DD imagerel frame_dealloc+111
	DD	imagerel frame_dealloc+350
	DD	imagerel $chain$3$frame_dealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$frame_dealloc DD imagerel frame_dealloc+350
	DD	imagerel frame_dealloc+491
	DD	imagerel $chain$4$frame_dealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$frame_dealloc DD imagerel frame_dealloc+491
	DD	imagerel frame_dealloc+1667
	DD	imagerel $chain$5$frame_dealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$frame_dealloc DD imagerel frame_dealloc+1667
	DD	imagerel frame_dealloc+1850
	DD	imagerel $chain$6$frame_dealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$frame_dealloc DD imagerel frame_dealloc+1850
	DD	imagerel frame_dealloc+1889
	DD	imagerel $chain$7$frame_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$frame_dealloc DD 021H
	DD	imagerel frame_dealloc
	DD	imagerel frame_dealloc+99
	DD	imagerel $unwind$frame_dealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$frame_dealloc DD 021H
	DD	imagerel frame_dealloc+99
	DD	imagerel frame_dealloc+104
	DD	imagerel $chain$0$frame_dealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$frame_dealloc DD 020021H
	DD	06d400H
	DD	imagerel frame_dealloc+99
	DD	imagerel frame_dealloc+104
	DD	imagerel $chain$0$frame_dealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$frame_dealloc DD 020021H
	DD	06d400H
	DD	imagerel frame_dealloc+104
	DD	imagerel frame_dealloc+111
	DD	imagerel $chain$1$frame_dealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$frame_dealloc DD 042021H
	DD	06d420H
	DD	0c7405H
	DD	imagerel frame_dealloc+104
	DD	imagerel frame_dealloc+111
	DD	imagerel $chain$1$frame_dealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$frame_dealloc DD 020521H
	DD	0b6405H
	DD	imagerel frame_dealloc+99
	DD	imagerel frame_dealloc+104
	DD	imagerel $chain$0$frame_dealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$frame_dealloc DD 020521H
	DD	0a3405H
	DD	imagerel frame_dealloc
	DD	imagerel frame_dealloc+99
	DD	imagerel $unwind$frame_dealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$frame_dealloc DD 030801H
	DD	0c0046208H
	DD	05002H
xdata	ENDS
;	COMDAT ??_C@_0O@FMIPEGNB@frame_dealloc?$AA@
CONST	SEGMENT
??_C@_0O@FMIPEGNB@frame_dealloc?$AA@ DB 'frame_dealloc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
CONST	SEGMENT
??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@ DB '..\Objects\fram'
	DB	'eobject.c', 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\frameobject.c
CONST	ENDS
;	COMDAT frame_dealloc
_TEXT	SEGMENT
f$ = 80
frame_dealloc PROC					; COMDAT

; 424  : {

  00000	40 55		 push	 rbp
  00002	41 54		 push	 r12
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00008	48 8b e9	 mov	 rbp, rcx

; 425  :     PyObject **p, **valuestack;
; 426  :     PyCodeObject *co;
; 427  :     Py_GUARD

  0000b	e8 00 00 00 00	 call	 _Py_PXCTX
  00010	85 c0		 test	 eax, eax
  00012	74 1c		 je	 SHORT $LN50@frame_deal
  00014	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@FMIPEGNB@frame_dealloc?$AA@
  00022	45 33 c9	 xor	 r9d, r9d
  00025	41 b8 ab 01 00
	00		 mov	 r8d, 427		; 000001abH
  0002b	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN50@frame_deal:

; 428  : 
; 429  :     PyObject_GC_UnTrack(f);

  00030	48 8b cd	 mov	 rcx, rbp
  00033	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 430  :     Py_TRASHCAN_SAFE_BEGIN(f)

  00038	e8 00 00 00 00	 call	 _Py_PXCTX
  0003d	85 c0		 test	 eax, eax
  0003f	74 0a		 je	 SHORT $LN53@frame_deal
  00041	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00046	4c 8b e0	 mov	 r12, rax
  00049	eb 07		 jmp	 SHORT $LN54@frame_deal
$LN53@frame_deal:
  0004b	4c 8b 25 00 00
	00 00		 mov	 r12, QWORD PTR _PyThreadState_Current
$LN54@frame_deal:
  00052	41 8b 84 24 94
	00 00 00	 mov	 eax, DWORD PTR [r12+148]
  0005a	83 f8 32	 cmp	 eax, 50			; 00000032H
  0005d	0f 8d ee 06 00
	00		 jge	 $LN46@frame_deal
  00063	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  00068	48 89 74 24 58	 mov	 QWORD PTR [rsp+88], rsi
  0006d	ff c0		 inc	 eax
  0006f	48 89 7c 24 60	 mov	 QWORD PTR [rsp+96], rdi
  00074	41 89 84 24 94
	00 00 00	 mov	 DWORD PTR [r12+148], eax

; 431  :     /* Kill all local variables */
; 432  :     valuestack = f->f_valuestack;

  0007c	48 8b b5 98 00
	00 00		 mov	 rsi, QWORD PTR [rbp+152]

; 433  :     for (p = f->f_localsplus; p < valuestack; p++)

  00083	48 8d bd d0 01
	00 00		 lea	 rdi, QWORD PTR [rbp+464]
  0008a	4c 89 6c 24 30	 mov	 QWORD PTR [rsp+48], r13
  0008f	45 33 ed	 xor	 r13d, r13d
  00092	48 3b fe	 cmp	 rdi, rsi
  00095	0f 83 ae 00 00
	00		 jae	 $LN43@frame_deal
  0009b	0f 1f 44 00 00	 npad	 5
$LL45@frame_deal:

; 434  :         Py_CLEAR(*p);

  000a0	4c 8b 0f	 mov	 r9, QWORD PTR [rdi]
  000a3	4d 85 c9	 test	 r9, r9
  000a6	0f 84 90 00 00
	00		 je	 $LN41@frame_deal
  000ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@FMIPEGNB@frame_dealloc?$AA@
  000ba	41 b8 b2 01 00
	00		 mov	 r8d, 434		; 000001b2H
  000c0	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c8	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cd	85 c0		 test	 eax, eax
  000cf	75 6b		 jne	 SHORT $LN41@frame_deal
  000d1	48 8b 1f	 mov	 rbx, QWORD PTR [rdi]
  000d4	4c 89 2f	 mov	 QWORD PTR [rdi], r13
  000d7	e8 00 00 00 00	 call	 _Py_PXCTX
  000dc	85 c0		 test	 eax, eax
  000de	75 5c		 jne	 SHORT $LN41@frame_deal
  000e0	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000e4	a8 20		 test	 al, 32			; 00000020H
  000e6	75 4c		 jne	 SHORT $LN59@frame_deal
  000e8	84 c0		 test	 al, al
  000ea	78 48		 js	 SHORT $LN59@frame_deal
  000ec	a8 02		 test	 al, 2
  000ee	75 4c		 jne	 SHORT $LN41@frame_deal
  000f0	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000f4	75 46		 jne	 SHORT $LN41@frame_deal
  000f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00104	4c 8b cb	 mov	 r9, rbx
  00107	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0010d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00115	e8 00 00 00 00	 call	 _PyParallel_Guard
  0011a	48 8b cb	 mov	 rcx, rbx
  0011d	85 c0		 test	 eax, eax
  0011f	74 07		 je	 SHORT $LN64@frame_deal
  00121	e8 00 00 00 00	 call	 _Px_Dealloc
  00126	eb 14		 jmp	 SHORT $LN41@frame_deal
$LN64@frame_deal:
  00128	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0012c	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00132	eb 08		 jmp	 SHORT $LN41@frame_deal
$LN59@frame_deal:
  00134	48 8b cb	 mov	 rcx, rbx
  00137	e8 00 00 00 00	 call	 Px_DecRef
$LN41@frame_deal:

; 433  :     for (p = f->f_localsplus; p < valuestack; p++)

  0013c	48 83 c7 08	 add	 rdi, 8
  00140	48 3b fe	 cmp	 rdi, rsi
  00143	0f 82 57 ff ff
	ff		 jb	 $LL45@frame_deal
$LN43@frame_deal:

; 435  : 
; 436  :     /* Free stack */
; 437  :     if (f->f_stacktop != NULL) {

  00149	48 8b 85 a0 00
	00 00		 mov	 rax, QWORD PTR [rbp+160]
  00150	48 8b 7c 24 60	 mov	 rdi, QWORD PTR [rsp+96]
  00155	48 85 c0	 test	 rax, rax
  00158	0f 84 7f 00 00
	00		 je	 $LN30@frame_deal

; 438  :         for (p = valuestack; p < f->f_stacktop; p++)

  0015e	48 3b f0	 cmp	 rsi, rax
  00161	73 7a		 jae	 SHORT $LN30@frame_deal
$LL37@frame_deal:

; 439  :             Py_XDECREF(*p);

  00163	48 8b 1e	 mov	 rbx, QWORD PTR [rsi]
  00166	48 85 db	 test	 rbx, rbx
  00169	74 65		 je	 SHORT $LN33@frame_deal
  0016b	e8 00 00 00 00	 call	 _Py_PXCTX
  00170	85 c0		 test	 eax, eax
  00172	75 5c		 jne	 SHORT $LN33@frame_deal
  00174	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00178	a8 20		 test	 al, 32			; 00000020H
  0017a	75 4c		 jne	 SHORT $LN70@frame_deal
  0017c	84 c0		 test	 al, al
  0017e	78 48		 js	 SHORT $LN70@frame_deal
  00180	a8 02		 test	 al, 2
  00182	75 4c		 jne	 SHORT $LN33@frame_deal
  00184	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00188	75 46		 jne	 SHORT $LN33@frame_deal
  0018a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00191	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00198	4c 8b cb	 mov	 r9, rbx
  0019b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001a1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001a9	e8 00 00 00 00	 call	 _PyParallel_Guard
  001ae	48 8b cb	 mov	 rcx, rbx
  001b1	85 c0		 test	 eax, eax
  001b3	74 07		 je	 SHORT $LN75@frame_deal
  001b5	e8 00 00 00 00	 call	 _Px_Dealloc
  001ba	eb 14		 jmp	 SHORT $LN33@frame_deal
$LN75@frame_deal:
  001bc	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001c0	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001c6	eb 08		 jmp	 SHORT $LN33@frame_deal
$LN70@frame_deal:
  001c8	48 8b cb	 mov	 rcx, rbx
  001cb	e8 00 00 00 00	 call	 Px_DecRef
$LN33@frame_deal:

; 438  :         for (p = valuestack; p < f->f_stacktop; p++)

  001d0	48 83 c6 08	 add	 rsi, 8
  001d4	48 3b b5 a0 00
	00 00		 cmp	 rsi, QWORD PTR [rbp+160]
  001db	72 86		 jb	 SHORT $LL37@frame_deal
$LN30@frame_deal:

; 440  :     }
; 441  : 
; 442  :     Py_XDECREF(f->f_back);

  001dd	48 8b 5d 70	 mov	 rbx, QWORD PTR [rbp+112]
  001e1	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  001e6	48 85 db	 test	 rbx, rbx
  001e9	74 65		 je	 SHORT $LN29@frame_deal
  001eb	e8 00 00 00 00	 call	 _Py_PXCTX
  001f0	85 c0		 test	 eax, eax
  001f2	75 5c		 jne	 SHORT $LN29@frame_deal
  001f4	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  001f8	a8 20		 test	 al, 32			; 00000020H
  001fa	75 4c		 jne	 SHORT $LN81@frame_deal
  001fc	84 c0		 test	 al, al
  001fe	78 48		 js	 SHORT $LN81@frame_deal
  00200	a8 02		 test	 al, 2
  00202	75 4c		 jne	 SHORT $LN29@frame_deal
  00204	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00208	75 46		 jne	 SHORT $LN29@frame_deal
  0020a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00211	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00218	4c 8b cb	 mov	 r9, rbx
  0021b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00221	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00229	e8 00 00 00 00	 call	 _PyParallel_Guard
  0022e	48 8b cb	 mov	 rcx, rbx
  00231	85 c0		 test	 eax, eax
  00233	74 07		 je	 SHORT $LN86@frame_deal
  00235	e8 00 00 00 00	 call	 _Px_Dealloc
  0023a	eb 14		 jmp	 SHORT $LN29@frame_deal
$LN86@frame_deal:
  0023c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00240	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00246	eb 08		 jmp	 SHORT $LN29@frame_deal
$LN81@frame_deal:
  00248	48 8b cb	 mov	 rcx, rbx
  0024b	e8 00 00 00 00	 call	 Px_DecRef
$LN29@frame_deal:

; 443  :     Py_DECREF(f->f_builtins);

  00250	48 8b 9d 80 00
	00 00		 mov	 rbx, QWORD PTR [rbp+128]
  00257	e8 00 00 00 00	 call	 _Py_PXCTX
  0025c	85 c0		 test	 eax, eax
  0025e	75 5c		 jne	 SHORT $LN98@frame_deal
  00260	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00264	a8 20		 test	 al, 32			; 00000020H
  00266	75 4c		 jne	 SHORT $LN92@frame_deal
  00268	84 c0		 test	 al, al
  0026a	78 48		 js	 SHORT $LN92@frame_deal
  0026c	a8 02		 test	 al, 2
  0026e	75 4c		 jne	 SHORT $LN98@frame_deal
  00270	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00274	75 46		 jne	 SHORT $LN98@frame_deal
  00276	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0027d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00284	4c 8b cb	 mov	 r9, rbx
  00287	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0028d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00295	e8 00 00 00 00	 call	 _PyParallel_Guard
  0029a	48 8b cb	 mov	 rcx, rbx
  0029d	85 c0		 test	 eax, eax
  0029f	74 07		 je	 SHORT $LN97@frame_deal
  002a1	e8 00 00 00 00	 call	 _Px_Dealloc
  002a6	eb 14		 jmp	 SHORT $LN98@frame_deal
$LN97@frame_deal:
  002a8	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  002ac	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  002b2	eb 08		 jmp	 SHORT $LN98@frame_deal
$LN92@frame_deal:
  002b4	48 8b cb	 mov	 rcx, rbx
  002b7	e8 00 00 00 00	 call	 Px_DecRef
$LN98@frame_deal:

; 444  :     Py_DECREF(f->f_globals);

  002bc	48 8b 9d 88 00
	00 00		 mov	 rbx, QWORD PTR [rbp+136]
  002c3	e8 00 00 00 00	 call	 _Py_PXCTX
  002c8	85 c0		 test	 eax, eax
  002ca	75 5c		 jne	 SHORT $LN26@frame_deal
  002cc	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  002d0	a8 20		 test	 al, 32			; 00000020H
  002d2	75 4c		 jne	 SHORT $LN103@frame_deal
  002d4	84 c0		 test	 al, al
  002d6	78 48		 js	 SHORT $LN103@frame_deal
  002d8	a8 02		 test	 al, 2
  002da	75 4c		 jne	 SHORT $LN26@frame_deal
  002dc	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  002e0	75 46		 jne	 SHORT $LN26@frame_deal
  002e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  002e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  002f0	4c 8b cb	 mov	 r9, rbx
  002f3	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  002f9	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00301	e8 00 00 00 00	 call	 _PyParallel_Guard
  00306	48 8b cb	 mov	 rcx, rbx
  00309	85 c0		 test	 eax, eax
  0030b	74 07		 je	 SHORT $LN108@frame_deal
  0030d	e8 00 00 00 00	 call	 _Px_Dealloc
  00312	eb 14		 jmp	 SHORT $LN26@frame_deal
$LN108@frame_deal:
  00314	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00318	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0031e	eb 08		 jmp	 SHORT $LN26@frame_deal
$LN103@frame_deal:
  00320	48 8b cb	 mov	 rcx, rbx
  00323	e8 00 00 00 00	 call	 Px_DecRef
$LN26@frame_deal:

; 445  :     Py_CLEAR(f->f_locals);

  00328	4c 8b 8d 90 00
	00 00		 mov	 r9, QWORD PTR [rbp+144]
  0032f	4d 85 c9	 test	 r9, r9
  00332	0f 84 98 00 00
	00		 je	 $LN25@frame_deal
  00338	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  0033f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@FMIPEGNB@frame_dealloc?$AA@
  00346	41 b8 bd 01 00
	00		 mov	 r8d, 445		; 000001bdH
  0034c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00354	e8 00 00 00 00	 call	 _PyParallel_Guard
  00359	85 c0		 test	 eax, eax
  0035b	75 73		 jne	 SHORT $LN25@frame_deal
  0035d	48 8b 9d 90 00
	00 00		 mov	 rbx, QWORD PTR [rbp+144]
  00364	4c 89 ad 90 00
	00 00		 mov	 QWORD PTR [rbp+144], r13
  0036b	e8 00 00 00 00	 call	 _Py_PXCTX
  00370	85 c0		 test	 eax, eax
  00372	75 5c		 jne	 SHORT $LN25@frame_deal
  00374	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00378	a8 20		 test	 al, 32			; 00000020H
  0037a	75 4c		 jne	 SHORT $LN114@frame_deal
  0037c	84 c0		 test	 al, al
  0037e	78 48		 js	 SHORT $LN114@frame_deal
  00380	a8 02		 test	 al, 2
  00382	75 4c		 jne	 SHORT $LN25@frame_deal
  00384	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00388	75 46		 jne	 SHORT $LN25@frame_deal
  0038a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00391	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00398	4c 8b cb	 mov	 r9, rbx
  0039b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  003a1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003a9	e8 00 00 00 00	 call	 _PyParallel_Guard
  003ae	48 8b cb	 mov	 rcx, rbx
  003b1	85 c0		 test	 eax, eax
  003b3	74 07		 je	 SHORT $LN119@frame_deal
  003b5	e8 00 00 00 00	 call	 _Px_Dealloc
  003ba	eb 14		 jmp	 SHORT $LN25@frame_deal
$LN119@frame_deal:
  003bc	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  003c0	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  003c6	eb 08		 jmp	 SHORT $LN25@frame_deal
$LN114@frame_deal:
  003c8	48 8b cb	 mov	 rcx, rbx
  003cb	e8 00 00 00 00	 call	 Px_DecRef
$LN25@frame_deal:

; 446  :     Py_CLEAR(f->f_trace);

  003d0	4c 8b 8d a8 00
	00 00		 mov	 r9, QWORD PTR [rbp+168]
  003d7	4d 85 c9	 test	 r9, r9
  003da	0f 84 98 00 00
	00		 je	 $LN21@frame_deal
  003e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  003e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@FMIPEGNB@frame_dealloc?$AA@
  003ee	41 b8 be 01 00
	00		 mov	 r8d, 446		; 000001beH
  003f4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003fc	e8 00 00 00 00	 call	 _PyParallel_Guard
  00401	85 c0		 test	 eax, eax
  00403	75 73		 jne	 SHORT $LN21@frame_deal
  00405	48 8b 9d a8 00
	00 00		 mov	 rbx, QWORD PTR [rbp+168]
  0040c	4c 89 ad a8 00
	00 00		 mov	 QWORD PTR [rbp+168], r13
  00413	e8 00 00 00 00	 call	 _Py_PXCTX
  00418	85 c0		 test	 eax, eax
  0041a	75 5c		 jne	 SHORT $LN21@frame_deal
  0041c	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00420	a8 20		 test	 al, 32			; 00000020H
  00422	75 4c		 jne	 SHORT $LN125@frame_deal
  00424	84 c0		 test	 al, al
  00426	78 48		 js	 SHORT $LN125@frame_deal
  00428	a8 02		 test	 al, 2
  0042a	75 4c		 jne	 SHORT $LN21@frame_deal
  0042c	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00430	75 46		 jne	 SHORT $LN21@frame_deal
  00432	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00439	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00440	4c 8b cb	 mov	 r9, rbx
  00443	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00449	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00451	e8 00 00 00 00	 call	 _PyParallel_Guard
  00456	48 8b cb	 mov	 rcx, rbx
  00459	85 c0		 test	 eax, eax
  0045b	74 07		 je	 SHORT $LN130@frame_deal
  0045d	e8 00 00 00 00	 call	 _Px_Dealloc
  00462	eb 14		 jmp	 SHORT $LN21@frame_deal
$LN130@frame_deal:
  00464	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00468	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0046e	eb 08		 jmp	 SHORT $LN21@frame_deal
$LN125@frame_deal:
  00470	48 8b cb	 mov	 rcx, rbx
  00473	e8 00 00 00 00	 call	 Px_DecRef
$LN21@frame_deal:

; 447  :     Py_CLEAR(f->f_exc_type);

  00478	4c 8b 8d b0 00
	00 00		 mov	 r9, QWORD PTR [rbp+176]
  0047f	4d 85 c9	 test	 r9, r9
  00482	0f 84 98 00 00
	00		 je	 $LN17@frame_deal
  00488	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  0048f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@FMIPEGNB@frame_dealloc?$AA@
  00496	41 b8 bf 01 00
	00		 mov	 r8d, 447		; 000001bfH
  0049c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  004a4	e8 00 00 00 00	 call	 _PyParallel_Guard
  004a9	85 c0		 test	 eax, eax
  004ab	75 73		 jne	 SHORT $LN17@frame_deal
  004ad	48 8b 9d b0 00
	00 00		 mov	 rbx, QWORD PTR [rbp+176]
  004b4	4c 89 ad b0 00
	00 00		 mov	 QWORD PTR [rbp+176], r13
  004bb	e8 00 00 00 00	 call	 _Py_PXCTX
  004c0	85 c0		 test	 eax, eax
  004c2	75 5c		 jne	 SHORT $LN17@frame_deal
  004c4	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  004c8	a8 20		 test	 al, 32			; 00000020H
  004ca	75 4c		 jne	 SHORT $LN136@frame_deal
  004cc	84 c0		 test	 al, al
  004ce	78 48		 js	 SHORT $LN136@frame_deal
  004d0	a8 02		 test	 al, 2
  004d2	75 4c		 jne	 SHORT $LN17@frame_deal
  004d4	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  004d8	75 46		 jne	 SHORT $LN17@frame_deal
  004da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  004e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  004e8	4c 8b cb	 mov	 r9, rbx
  004eb	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  004f1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  004f9	e8 00 00 00 00	 call	 _PyParallel_Guard
  004fe	48 8b cb	 mov	 rcx, rbx
  00501	85 c0		 test	 eax, eax
  00503	74 07		 je	 SHORT $LN141@frame_deal
  00505	e8 00 00 00 00	 call	 _Px_Dealloc
  0050a	eb 14		 jmp	 SHORT $LN17@frame_deal
$LN141@frame_deal:
  0050c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00510	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00516	eb 08		 jmp	 SHORT $LN17@frame_deal
$LN136@frame_deal:
  00518	48 8b cb	 mov	 rcx, rbx
  0051b	e8 00 00 00 00	 call	 Px_DecRef
$LN17@frame_deal:

; 448  :     Py_CLEAR(f->f_exc_value);

  00520	4c 8b 8d b8 00
	00 00		 mov	 r9, QWORD PTR [rbp+184]
  00527	4d 85 c9	 test	 r9, r9
  0052a	0f 84 98 00 00
	00		 je	 $LN13@frame_deal
  00530	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  00537	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@FMIPEGNB@frame_dealloc?$AA@
  0053e	41 b8 c0 01 00
	00		 mov	 r8d, 448		; 000001c0H
  00544	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0054c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00551	85 c0		 test	 eax, eax
  00553	75 73		 jne	 SHORT $LN13@frame_deal
  00555	48 8b 9d b8 00
	00 00		 mov	 rbx, QWORD PTR [rbp+184]
  0055c	4c 89 ad b8 00
	00 00		 mov	 QWORD PTR [rbp+184], r13
  00563	e8 00 00 00 00	 call	 _Py_PXCTX
  00568	85 c0		 test	 eax, eax
  0056a	75 5c		 jne	 SHORT $LN13@frame_deal
  0056c	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00570	a8 20		 test	 al, 32			; 00000020H
  00572	75 4c		 jne	 SHORT $LN147@frame_deal
  00574	84 c0		 test	 al, al
  00576	78 48		 js	 SHORT $LN147@frame_deal
  00578	a8 02		 test	 al, 2
  0057a	75 4c		 jne	 SHORT $LN13@frame_deal
  0057c	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00580	75 46		 jne	 SHORT $LN13@frame_deal
  00582	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00589	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00590	4c 8b cb	 mov	 r9, rbx
  00593	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00599	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  005a1	e8 00 00 00 00	 call	 _PyParallel_Guard
  005a6	48 8b cb	 mov	 rcx, rbx
  005a9	85 c0		 test	 eax, eax
  005ab	74 07		 je	 SHORT $LN152@frame_deal
  005ad	e8 00 00 00 00	 call	 _Px_Dealloc
  005b2	eb 14		 jmp	 SHORT $LN13@frame_deal
$LN152@frame_deal:
  005b4	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  005b8	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  005be	eb 08		 jmp	 SHORT $LN13@frame_deal
$LN147@frame_deal:
  005c0	48 8b cb	 mov	 rcx, rbx
  005c3	e8 00 00 00 00	 call	 Px_DecRef
$LN13@frame_deal:

; 449  :     Py_CLEAR(f->f_exc_traceback);

  005c8	4c 8b 8d c0 00
	00 00		 mov	 r9, QWORD PTR [rbp+192]
  005cf	4d 85 c9	 test	 r9, r9
  005d2	0f 84 98 00 00
	00		 je	 $LN9@frame_deal
  005d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  005df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@FMIPEGNB@frame_dealloc?$AA@
  005e6	41 b8 c1 01 00
	00		 mov	 r8d, 449		; 000001c1H
  005ec	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  005f4	e8 00 00 00 00	 call	 _PyParallel_Guard
  005f9	85 c0		 test	 eax, eax
  005fb	75 73		 jne	 SHORT $LN9@frame_deal
  005fd	48 8b 9d c0 00
	00 00		 mov	 rbx, QWORD PTR [rbp+192]
  00604	4c 89 ad c0 00
	00 00		 mov	 QWORD PTR [rbp+192], r13
  0060b	e8 00 00 00 00	 call	 _Py_PXCTX
  00610	85 c0		 test	 eax, eax
  00612	75 5c		 jne	 SHORT $LN9@frame_deal
  00614	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00618	a8 20		 test	 al, 32			; 00000020H
  0061a	75 4c		 jne	 SHORT $LN158@frame_deal
  0061c	84 c0		 test	 al, al
  0061e	78 48		 js	 SHORT $LN158@frame_deal
  00620	a8 02		 test	 al, 2
  00622	75 4c		 jne	 SHORT $LN9@frame_deal
  00624	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00628	75 46		 jne	 SHORT $LN9@frame_deal
  0062a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00631	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00638	4c 8b cb	 mov	 r9, rbx
  0063b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00641	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00649	e8 00 00 00 00	 call	 _PyParallel_Guard
  0064e	48 8b cb	 mov	 rcx, rbx
  00651	85 c0		 test	 eax, eax
  00653	74 07		 je	 SHORT $LN163@frame_deal
  00655	e8 00 00 00 00	 call	 _Px_Dealloc
  0065a	eb 14		 jmp	 SHORT $LN9@frame_deal
$LN163@frame_deal:
  0065c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00660	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00666	eb 08		 jmp	 SHORT $LN9@frame_deal
$LN158@frame_deal:
  00668	48 8b cb	 mov	 rcx, rbx
  0066b	e8 00 00 00 00	 call	 Px_DecRef
$LN9@frame_deal:

; 450  : 
; 451  :     co = f->f_code;

  00670	48 8b 5d 78	 mov	 rbx, QWORD PTR [rbp+120]
  00674	4c 8b 6c 24 30	 mov	 r13, QWORD PTR [rsp+48]

; 452  :     if (co->co_zombieframe == NULL)

  00679	48 83 bb d0 00
	00 00 00	 cmp	 QWORD PTR [rbx+208], 0
  00681	75 09		 jne	 SHORT $LN6@frame_deal

; 453  :         co->co_zombieframe = f;

  00683	48 89 ab d0 00
	00 00		 mov	 QWORD PTR [rbx+208], rbp
  0068a	eb 31		 jmp	 SHORT $LN3@frame_deal
$LN6@frame_deal:

; 454  :     else if (numfree < PyFrame_MAXFREELIST) {

  0068c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR numfree
  00692	3d c8 00 00 00	 cmp	 eax, 200		; 000000c8H
  00697	7d 1c		 jge	 SHORT $LN4@frame_deal

; 455  :         ++numfree;

  00699	ff c0		 inc	 eax
  0069b	89 05 00 00 00
	00		 mov	 DWORD PTR numfree, eax

; 456  :         f->f_back = free_list;

  006a1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR free_list

; 457  :         free_list = f;

  006a8	48 89 2d 00 00
	00 00		 mov	 QWORD PTR free_list, rbp
  006af	48 89 45 70	 mov	 QWORD PTR [rbp+112], rax

; 458  :     }
; 459  :     else

  006b3	eb 08		 jmp	 SHORT $LN3@frame_deal
$LN4@frame_deal:

; 460  :         PyObject_GC_Del(f);

  006b5	48 8b cd	 mov	 rcx, rbp
  006b8	e8 00 00 00 00	 call	 PyObject_GC_Del
$LN3@frame_deal:

; 461  : 
; 462  :     Py_DECREF(co);

  006bd	e8 00 00 00 00	 call	 _Py_PXCTX
  006c2	85 c0		 test	 eax, eax
  006c4	75 5c		 jne	 SHORT $LN175@frame_deal
  006c6	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  006ca	a8 20		 test	 al, 32			; 00000020H
  006cc	75 4c		 jne	 SHORT $LN169@frame_deal
  006ce	84 c0		 test	 al, al
  006d0	78 48		 js	 SHORT $LN169@frame_deal
  006d2	a8 02		 test	 al, 2
  006d4	75 4c		 jne	 SHORT $LN175@frame_deal
  006d6	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  006da	75 46		 jne	 SHORT $LN175@frame_deal
  006dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  006e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  006ea	4c 8b cb	 mov	 r9, rbx
  006ed	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  006f3	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  006fb	e8 00 00 00 00	 call	 _PyParallel_Guard
  00700	48 8b cb	 mov	 rcx, rbx
  00703	85 c0		 test	 eax, eax
  00705	74 07		 je	 SHORT $LN174@frame_deal
  00707	e8 00 00 00 00	 call	 _Px_Dealloc
  0070c	eb 14		 jmp	 SHORT $LN175@frame_deal
$LN174@frame_deal:
  0070e	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00712	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00718	eb 08		 jmp	 SHORT $LN175@frame_deal
$LN169@frame_deal:
  0071a	48 8b cb	 mov	 rcx, rbx
  0071d	e8 00 00 00 00	 call	 Px_DecRef
$LN175@frame_deal:

; 463  :     Py_TRASHCAN_SAFE_END(f)

  00722	41 ff 8c 24 94
	00 00 00	 dec	 DWORD PTR [r12+148]
  0072a	49 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR [r12+152], 0
  00733	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00738	74 1f		 je	 SHORT $LN48@frame_deal
  0073a	41 83 bc 24 94
	00 00 00 00	 cmp	 DWORD PTR [r12+148], 0
  00743	7f 14		 jg	 SHORT $LN48@frame_deal

; 464  : }

  00745	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00749	41 5c		 pop	 r12
  0074b	5d		 pop	 rbp
  0074c	e9 00 00 00 00	 jmp	 _PyTrash_thread_destroy_chain
$LN46@frame_deal:

; 463  :     Py_TRASHCAN_SAFE_END(f)

  00751	48 8b cd	 mov	 rcx, rbp
  00754	e8 00 00 00 00	 call	 _PyTrash_thread_deposit_object
$LN48@frame_deal:

; 464  : }

  00759	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0075d	41 5c		 pop	 r12
  0075f	5d		 pop	 rbp
  00760	c3		 ret	 0
frame_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@CCLEOHBL@frame_traverse?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$frame_traverse DD imagerel frame_traverse
	DD	imagerel frame_traverse+590
	DD	imagerel $unwind$frame_traverse
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$frame_traverse DD imagerel frame_traverse+590
	DD	imagerel frame_traverse+807
	DD	imagerel $chain$1$frame_traverse
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$frame_traverse DD imagerel frame_traverse+807
	DD	imagerel frame_traverse+824
	DD	imagerel $chain$2$frame_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$frame_traverse DD 021H
	DD	imagerel frame_traverse
	DD	imagerel frame_traverse+590
	DD	imagerel $unwind$frame_traverse
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$frame_traverse DD 040a21H
	DD	07640aH
	DD	063405H
	DD	imagerel frame_traverse
	DD	imagerel frame_traverse+590
	DD	imagerel $unwind$frame_traverse
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$frame_traverse DD 061001H
	DD	097410H
	DD	085410H
	DD	0c00c3210H
xdata	ENDS
;	COMDAT ??_C@_0P@CCLEOHBL@frame_traverse?$AA@
CONST	SEGMENT
??_C@_0P@CCLEOHBL@frame_traverse?$AA@ DB 'frame_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT frame_traverse
_TEXT	SEGMENT
f$ = 48
visit$ = 56
arg$ = 64
frame_traverse PROC					; COMDAT

; 468  : {

  00000	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  00005	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0000a	41 54		 push	 r12
  0000c	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00010	49 8b e8	 mov	 rbp, r8
  00013	4c 8b e2	 mov	 r12, rdx
  00016	48 8b f9	 mov	 rdi, rcx

; 469  :     PyObject **fastlocals, **p;
; 470  :     int i, slots;
; 471  : 
; 472  :     Py_VISIT(f->f_back);

  00019	e8 00 00 00 00	 call	 _Py_PXCTX
  0001e	85 c0		 test	 eax, eax
  00020	74 1c		 je	 SHORT $LN70@frame_trav
  00022	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@CCLEOHBL@frame_traverse?$AA@
  00030	45 33 c9	 xor	 r9d, r9d
  00033	41 b8 d8 01 00
	00		 mov	 r8d, 472		; 000001d8H
  00039	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN70@frame_trav:
  0003e	48 8b 4f 70	 mov	 rcx, QWORD PTR [rdi+112]
  00042	48 85 c9	 test	 rcx, rcx
  00045	74 0e		 je	 SHORT $LN72@frame_trav
  00047	48 8b d5	 mov	 rdx, rbp
  0004a	41 ff d4	 call	 r12
  0004d	85 c0		 test	 eax, eax
  0004f	0f 85 d2 02 00
	00		 jne	 $LN74@frame_trav
$LN72@frame_trav:

; 473  :     Py_VISIT(f->f_code);

  00055	e8 00 00 00 00	 call	 _Py_PXCTX
  0005a	85 c0		 test	 eax, eax
  0005c	74 1c		 je	 SHORT $LN64@frame_trav
  0005e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  00065	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@CCLEOHBL@frame_traverse?$AA@
  0006c	45 33 c9	 xor	 r9d, r9d
  0006f	41 b8 d9 01 00
	00		 mov	 r8d, 473		; 000001d9H
  00075	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN64@frame_trav:
  0007a	48 8b 4f 78	 mov	 rcx, QWORD PTR [rdi+120]
  0007e	48 85 c9	 test	 rcx, rcx
  00081	74 0e		 je	 SHORT $LN66@frame_trav
  00083	48 8b d5	 mov	 rdx, rbp
  00086	41 ff d4	 call	 r12
  00089	85 c0		 test	 eax, eax
  0008b	0f 85 96 02 00
	00		 jne	 $LN74@frame_trav
$LN66@frame_trav:

; 474  :     Py_VISIT(f->f_builtins);

  00091	e8 00 00 00 00	 call	 _Py_PXCTX
  00096	85 c0		 test	 eax, eax
  00098	74 1c		 je	 SHORT $LN58@frame_trav
  0009a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  000a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@CCLEOHBL@frame_traverse?$AA@
  000a8	45 33 c9	 xor	 r9d, r9d
  000ab	41 b8 da 01 00
	00		 mov	 r8d, 474		; 000001daH
  000b1	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN58@frame_trav:
  000b6	48 8b 8f 80 00
	00 00		 mov	 rcx, QWORD PTR [rdi+128]
  000bd	48 85 c9	 test	 rcx, rcx
  000c0	74 0e		 je	 SHORT $LN60@frame_trav
  000c2	48 8b d5	 mov	 rdx, rbp
  000c5	41 ff d4	 call	 r12
  000c8	85 c0		 test	 eax, eax
  000ca	0f 85 57 02 00
	00		 jne	 $LN74@frame_trav
$LN60@frame_trav:

; 475  :     Py_VISIT(f->f_globals);

  000d0	e8 00 00 00 00	 call	 _Py_PXCTX
  000d5	85 c0		 test	 eax, eax
  000d7	74 1c		 je	 SHORT $LN52@frame_trav
  000d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  000e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@CCLEOHBL@frame_traverse?$AA@
  000e7	45 33 c9	 xor	 r9d, r9d
  000ea	41 b8 db 01 00
	00		 mov	 r8d, 475		; 000001dbH
  000f0	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN52@frame_trav:
  000f5	48 8b 8f 88 00
	00 00		 mov	 rcx, QWORD PTR [rdi+136]
  000fc	48 85 c9	 test	 rcx, rcx
  000ff	74 0e		 je	 SHORT $LN54@frame_trav
  00101	48 8b d5	 mov	 rdx, rbp
  00104	41 ff d4	 call	 r12
  00107	85 c0		 test	 eax, eax
  00109	0f 85 18 02 00
	00		 jne	 $LN74@frame_trav
$LN54@frame_trav:

; 476  :     Py_VISIT(f->f_locals);

  0010f	e8 00 00 00 00	 call	 _Py_PXCTX
  00114	85 c0		 test	 eax, eax
  00116	74 1c		 je	 SHORT $LN46@frame_trav
  00118	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  0011f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@CCLEOHBL@frame_traverse?$AA@
  00126	45 33 c9	 xor	 r9d, r9d
  00129	41 b8 dc 01 00
	00		 mov	 r8d, 476		; 000001dcH
  0012f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN46@frame_trav:
  00134	48 8b 8f 90 00
	00 00		 mov	 rcx, QWORD PTR [rdi+144]
  0013b	48 85 c9	 test	 rcx, rcx
  0013e	74 0e		 je	 SHORT $LN48@frame_trav
  00140	48 8b d5	 mov	 rdx, rbp
  00143	41 ff d4	 call	 r12
  00146	85 c0		 test	 eax, eax
  00148	0f 85 d9 01 00
	00		 jne	 $LN74@frame_trav
$LN48@frame_trav:

; 477  :     Py_VISIT(f->f_trace);

  0014e	e8 00 00 00 00	 call	 _Py_PXCTX
  00153	85 c0		 test	 eax, eax
  00155	74 1c		 je	 SHORT $LN40@frame_trav
  00157	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  0015e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@CCLEOHBL@frame_traverse?$AA@
  00165	45 33 c9	 xor	 r9d, r9d
  00168	41 b8 dd 01 00
	00		 mov	 r8d, 477		; 000001ddH
  0016e	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN40@frame_trav:
  00173	48 8b 8f a8 00
	00 00		 mov	 rcx, QWORD PTR [rdi+168]
  0017a	48 85 c9	 test	 rcx, rcx
  0017d	74 0e		 je	 SHORT $LN42@frame_trav
  0017f	48 8b d5	 mov	 rdx, rbp
  00182	41 ff d4	 call	 r12
  00185	85 c0		 test	 eax, eax
  00187	0f 85 9a 01 00
	00		 jne	 $LN74@frame_trav
$LN42@frame_trav:

; 478  :     Py_VISIT(f->f_exc_type);

  0018d	e8 00 00 00 00	 call	 _Py_PXCTX
  00192	85 c0		 test	 eax, eax
  00194	74 1c		 je	 SHORT $LN34@frame_trav
  00196	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  0019d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@CCLEOHBL@frame_traverse?$AA@
  001a4	45 33 c9	 xor	 r9d, r9d
  001a7	41 b8 de 01 00
	00		 mov	 r8d, 478		; 000001deH
  001ad	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN34@frame_trav:
  001b2	48 8b 8f b0 00
	00 00		 mov	 rcx, QWORD PTR [rdi+176]
  001b9	48 85 c9	 test	 rcx, rcx
  001bc	74 0e		 je	 SHORT $LN36@frame_trav
  001be	48 8b d5	 mov	 rdx, rbp
  001c1	41 ff d4	 call	 r12
  001c4	85 c0		 test	 eax, eax
  001c6	0f 85 5b 01 00
	00		 jne	 $LN74@frame_trav
$LN36@frame_trav:

; 479  :     Py_VISIT(f->f_exc_value);

  001cc	e8 00 00 00 00	 call	 _Py_PXCTX
  001d1	85 c0		 test	 eax, eax
  001d3	74 1c		 je	 SHORT $LN28@frame_trav
  001d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  001dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@CCLEOHBL@frame_traverse?$AA@
  001e3	45 33 c9	 xor	 r9d, r9d
  001e6	41 b8 df 01 00
	00		 mov	 r8d, 479		; 000001dfH
  001ec	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN28@frame_trav:
  001f1	48 8b 8f b8 00
	00 00		 mov	 rcx, QWORD PTR [rdi+184]
  001f8	48 85 c9	 test	 rcx, rcx
  001fb	74 0e		 je	 SHORT $LN30@frame_trav
  001fd	48 8b d5	 mov	 rdx, rbp
  00200	41 ff d4	 call	 r12
  00203	85 c0		 test	 eax, eax
  00205	0f 85 1c 01 00
	00		 jne	 $LN74@frame_trav
$LN30@frame_trav:

; 480  :     Py_VISIT(f->f_exc_traceback);

  0020b	e8 00 00 00 00	 call	 _Py_PXCTX
  00210	85 c0		 test	 eax, eax
  00212	74 1c		 je	 SHORT $LN22@frame_trav
  00214	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  0021b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@CCLEOHBL@frame_traverse?$AA@
  00222	45 33 c9	 xor	 r9d, r9d
  00225	41 b8 e0 01 00
	00		 mov	 r8d, 480		; 000001e0H
  0022b	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN22@frame_trav:
  00230	48 8b 8f c0 00
	00 00		 mov	 rcx, QWORD PTR [rdi+192]
  00237	48 85 c9	 test	 rcx, rcx
  0023a	74 0e		 je	 SHORT $LN24@frame_trav
  0023c	48 8b d5	 mov	 rdx, rbp
  0023f	41 ff d4	 call	 r12
  00242	85 c0		 test	 eax, eax
  00244	0f 85 dd 00 00
	00		 jne	 $LN74@frame_trav
$LN24@frame_trav:

; 481  : 
; 482  :     /* locals */
; 483  :     slots = f->f_code->co_nlocals + PyTuple_GET_SIZE(f->f_code->co_cellvars) + PyTuple_GET_SIZE(f->f_code->co_freevars);

  0024a	4c 8b 47 78	 mov	 r8, QWORD PTR [rdi+120]
  0024e	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00253	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi

; 484  :     fastlocals = f->f_localsplus;
; 485  :     for (i = slots; --i >= 0; ++fastlocals)

  00258	49 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [r8+160]
  0025f	49 8b 88 98 00
	00 00		 mov	 rcx, QWORD PTR [r8+152]
  00266	48 8d 9f d0 01
	00 00		 lea	 rbx, QWORD PTR [rdi+464]
  0026d	8b 50 60	 mov	 edx, DWORD PTR [rax+96]
  00270	41 8b 40 68	 mov	 eax, DWORD PTR [r8+104]
  00274	03 51 60	 add	 edx, DWORD PTR [rcx+96]
  00277	8d 74 02 ff	 lea	 esi, DWORD PTR [rdx+rax-1]
  0027b	85 f6		 test	 esi, esi
  0027d	78 40		 js	 SHORT $LN82@frame_trav
  0027f	90		 npad	 1
$LL19@frame_trav:

; 486  :         Py_VISIT(*fastlocals);

  00280	e8 00 00 00 00	 call	 _Py_PXCTX
  00285	85 c0		 test	 eax, eax
  00287	74 1c		 je	 SHORT $LN13@frame_trav
  00289	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  00290	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@CCLEOHBL@frame_traverse?$AA@
  00297	45 33 c9	 xor	 r9d, r9d
  0029a	41 b8 e6 01 00
	00		 mov	 r8d, 486		; 000001e6H
  002a0	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN13@frame_trav:
  002a5	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  002a8	48 85 c9	 test	 rcx, rcx
  002ab	74 0a		 je	 SHORT $LN15@frame_trav
  002ad	48 8b d5	 mov	 rdx, rbp
  002b0	41 ff d4	 call	 r12
  002b3	85 c0		 test	 eax, eax
  002b5	75 66		 jne	 SHORT $LN85@frame_trav
$LN15@frame_trav:

; 484  :     fastlocals = f->f_localsplus;
; 485  :     for (i = slots; --i >= 0; ++fastlocals)

  002b7	48 83 c3 08	 add	 rbx, 8
  002bb	ff ce		 dec	 esi
  002bd	79 c1		 jns	 SHORT $LL19@frame_trav
$LN82@frame_trav:

; 487  : 
; 488  :     /* stack */
; 489  :     if (f->f_stacktop != NULL) {

  002bf	48 8b 87 a0 00
	00 00		 mov	 rax, QWORD PTR [rdi+160]
  002c6	48 85 c0	 test	 rax, rax
  002c9	74 50		 je	 SHORT $LN83@frame_trav

; 490  :         for (p = f->f_valuestack; p < f->f_stacktop; p++)

  002cb	48 8b 9f 98 00
	00 00		 mov	 rbx, QWORD PTR [rdi+152]
  002d2	48 3b d8	 cmp	 rbx, rax
  002d5	73 44		 jae	 SHORT $LN83@frame_trav
$LL9@frame_trav:

; 491  :             Py_VISIT(*p);

  002d7	e8 00 00 00 00	 call	 _Py_PXCTX
  002dc	85 c0		 test	 eax, eax
  002de	74 1c		 je	 SHORT $LN3@frame_trav
  002e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  002e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@CCLEOHBL@frame_traverse?$AA@
  002ee	45 33 c9	 xor	 r9d, r9d
  002f1	41 b8 eb 01 00
	00		 mov	 r8d, 491		; 000001ebH
  002f7	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@frame_trav:
  002fc	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  002ff	48 85 c9	 test	 rcx, rcx
  00302	74 0a		 je	 SHORT $LN5@frame_trav
  00304	48 8b d5	 mov	 rdx, rbp
  00307	41 ff d4	 call	 r12
  0030a	85 c0		 test	 eax, eax
  0030c	75 0f		 jne	 SHORT $LN85@frame_trav
$LN5@frame_trav:

; 490  :         for (p = f->f_valuestack; p < f->f_stacktop; p++)

  0030e	48 83 c3 08	 add	 rbx, 8
  00312	48 3b 9f a0 00
	00 00		 cmp	 rbx, QWORD PTR [rdi+160]
  00319	72 bc		 jb	 SHORT $LL9@frame_trav
$LN83@frame_trav:

; 492  :     }
; 493  :     return 0;

  0031b	33 c0		 xor	 eax, eax
$LN85@frame_trav:
  0031d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00322	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
$LN74@frame_trav:

; 494  : }

  00327	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  0032c	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00331	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00335	41 5c		 pop	 r12
  00337	c3		 ret	 0
frame_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@LBNCHPJM@frame_clear?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$frame_clear DD imagerel frame_clear
	DD	imagerel frame_clear+36
	DD	imagerel $unwind$frame_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$frame_clear DD imagerel frame_clear+36
	DD	imagerel frame_clear+950
	DD	imagerel $chain$0$frame_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$frame_clear DD imagerel frame_clear+950
	DD	imagerel frame_clear+1165
	DD	imagerel $chain$1$frame_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$frame_clear DD 021H
	DD	imagerel frame_clear
	DD	imagerel frame_clear+36
	DD	imagerel $unwind$frame_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$frame_clear DD 020521H
	DD	0a6405H
	DD	imagerel frame_clear
	DD	imagerel frame_clear+36
	DD	imagerel $unwind$frame_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$frame_clear DD 081301H
	DD	0c5413H
	DD	0b3413H
	DD	0d00f5213H
	DD	0700bc00dH
xdata	ENDS
;	COMDAT ??_C@_0M@LBNCHPJM@frame_clear?$AA@
CONST	SEGMENT
??_C@_0M@LBNCHPJM@frame_clear?$AA@ DB 'frame_clear', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\frameobject.c
CONST	ENDS
;	COMDAT frame_clear
_TEXT	SEGMENT
f$ = 80
frame_clear PROC					; COMDAT

; 498  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	57		 push	 rdi
  0000b	41 54		 push	 r12
  0000d	41 55		 push	 r13
  0000f	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 499  :     PyObject **fastlocals, **p, **oldtop;
; 500  :     int i, slots;
; 501  : 
; 502  :     /* Before anything else, make sure that this frame is clearly marked
; 503  :      * as being defunct!  Else, e.g., a generator reachable from this
; 504  :      * frame may also point to this frame, believe itself to still be
; 505  :      * active, and try cleaning up this frame again.
; 506  :      */
; 507  :     oldtop = f->f_stacktop;
; 508  :     f->f_stacktop = NULL;
; 509  : 
; 510  :     Py_CLEAR(f->f_exc_type);

  00013	4c 8b 89 b0 00
	00 00		 mov	 r9, QWORD PTR [rcx+176]
  0001a	4c 8b a1 a0 00
	00 00		 mov	 r12, QWORD PTR [rcx+160]
  00021	45 33 ed	 xor	 r13d, r13d
  00024	48 89 74 24 50	 mov	 QWORD PTR [rsp+80], rsi
  00029	48 8b e9	 mov	 rbp, rcx
  0002c	4c 89 a9 a0 00
	00 00		 mov	 QWORD PTR [rcx+160], r13
  00033	4d 85 c9	 test	 r9, r9
  00036	0f 84 98 00 00
	00		 je	 $LN30@frame_clea
  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@LBNCHPJM@frame_clear?$AA@
  0004a	41 b8 fe 01 00
	00		 mov	 r8d, 510		; 000001feH
  00050	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00058	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005d	85 c0		 test	 eax, eax
  0005f	75 73		 jne	 SHORT $LN30@frame_clea
  00061	48 8b 9d b0 00
	00 00		 mov	 rbx, QWORD PTR [rbp+176]
  00068	4c 89 ad b0 00
	00 00		 mov	 QWORD PTR [rbp+176], r13
  0006f	e8 00 00 00 00	 call	 _Py_PXCTX
  00074	85 c0		 test	 eax, eax
  00076	75 5c		 jne	 SHORT $LN30@frame_clea
  00078	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0007c	a8 20		 test	 al, 32			; 00000020H
  0007e	75 4c		 jne	 SHORT $LN38@frame_clea
  00080	84 c0		 test	 al, al
  00082	78 48		 js	 SHORT $LN38@frame_clea
  00084	a8 02		 test	 al, 2
  00086	75 4c		 jne	 SHORT $LN30@frame_clea
  00088	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0008c	75 46		 jne	 SHORT $LN30@frame_clea
  0008e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00095	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0009c	4c 8b cb	 mov	 r9, rbx
  0009f	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000a5	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ad	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b2	48 8b cb	 mov	 rcx, rbx
  000b5	85 c0		 test	 eax, eax
  000b7	74 07		 je	 SHORT $LN43@frame_clea
  000b9	e8 00 00 00 00	 call	 _Px_Dealloc
  000be	eb 14		 jmp	 SHORT $LN30@frame_clea
$LN43@frame_clea:
  000c0	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000c4	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000ca	eb 08		 jmp	 SHORT $LN30@frame_clea
$LN38@frame_clea:
  000cc	48 8b cb	 mov	 rcx, rbx
  000cf	e8 00 00 00 00	 call	 Px_DecRef
$LN30@frame_clea:

; 511  :     Py_CLEAR(f->f_exc_value);

  000d4	4c 8b 8d b8 00
	00 00		 mov	 r9, QWORD PTR [rbp+184]
  000db	4d 85 c9	 test	 r9, r9
  000de	0f 84 98 00 00
	00		 je	 $LN26@frame_clea
  000e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  000eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@LBNCHPJM@frame_clear?$AA@
  000f2	41 b8 ff 01 00
	00		 mov	 r8d, 511		; 000001ffH
  000f8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00100	e8 00 00 00 00	 call	 _PyParallel_Guard
  00105	85 c0		 test	 eax, eax
  00107	75 73		 jne	 SHORT $LN26@frame_clea
  00109	48 8b 9d b8 00
	00 00		 mov	 rbx, QWORD PTR [rbp+184]
  00110	4c 89 ad b8 00
	00 00		 mov	 QWORD PTR [rbp+184], r13
  00117	e8 00 00 00 00	 call	 _Py_PXCTX
  0011c	85 c0		 test	 eax, eax
  0011e	75 5c		 jne	 SHORT $LN26@frame_clea
  00120	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00124	a8 20		 test	 al, 32			; 00000020H
  00126	75 4c		 jne	 SHORT $LN49@frame_clea
  00128	84 c0		 test	 al, al
  0012a	78 48		 js	 SHORT $LN49@frame_clea
  0012c	a8 02		 test	 al, 2
  0012e	75 4c		 jne	 SHORT $LN26@frame_clea
  00130	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00134	75 46		 jne	 SHORT $LN26@frame_clea
  00136	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0013d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00144	4c 8b cb	 mov	 r9, rbx
  00147	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0014d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00155	e8 00 00 00 00	 call	 _PyParallel_Guard
  0015a	48 8b cb	 mov	 rcx, rbx
  0015d	85 c0		 test	 eax, eax
  0015f	74 07		 je	 SHORT $LN54@frame_clea
  00161	e8 00 00 00 00	 call	 _Px_Dealloc
  00166	eb 14		 jmp	 SHORT $LN26@frame_clea
$LN54@frame_clea:
  00168	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0016c	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00172	eb 08		 jmp	 SHORT $LN26@frame_clea
$LN49@frame_clea:
  00174	48 8b cb	 mov	 rcx, rbx
  00177	e8 00 00 00 00	 call	 Px_DecRef
$LN26@frame_clea:

; 512  :     Py_CLEAR(f->f_exc_traceback);

  0017c	4c 8b 8d c0 00
	00 00		 mov	 r9, QWORD PTR [rbp+192]
  00183	4d 85 c9	 test	 r9, r9
  00186	0f 84 98 00 00
	00		 je	 $LN22@frame_clea
  0018c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  00193	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@LBNCHPJM@frame_clear?$AA@
  0019a	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  001a0	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001a8	e8 00 00 00 00	 call	 _PyParallel_Guard
  001ad	85 c0		 test	 eax, eax
  001af	75 73		 jne	 SHORT $LN22@frame_clea
  001b1	48 8b 9d c0 00
	00 00		 mov	 rbx, QWORD PTR [rbp+192]
  001b8	4c 89 ad c0 00
	00 00		 mov	 QWORD PTR [rbp+192], r13
  001bf	e8 00 00 00 00	 call	 _Py_PXCTX
  001c4	85 c0		 test	 eax, eax
  001c6	75 5c		 jne	 SHORT $LN22@frame_clea
  001c8	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  001cc	a8 20		 test	 al, 32			; 00000020H
  001ce	75 4c		 jne	 SHORT $LN60@frame_clea
  001d0	84 c0		 test	 al, al
  001d2	78 48		 js	 SHORT $LN60@frame_clea
  001d4	a8 02		 test	 al, 2
  001d6	75 4c		 jne	 SHORT $LN22@frame_clea
  001d8	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  001dc	75 46		 jne	 SHORT $LN22@frame_clea
  001de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  001ec	4c 8b cb	 mov	 r9, rbx
  001ef	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001f5	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001fd	e8 00 00 00 00	 call	 _PyParallel_Guard
  00202	48 8b cb	 mov	 rcx, rbx
  00205	85 c0		 test	 eax, eax
  00207	74 07		 je	 SHORT $LN65@frame_clea
  00209	e8 00 00 00 00	 call	 _Px_Dealloc
  0020e	eb 14		 jmp	 SHORT $LN22@frame_clea
$LN65@frame_clea:
  00210	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00214	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0021a	eb 08		 jmp	 SHORT $LN22@frame_clea
$LN60@frame_clea:
  0021c	48 8b cb	 mov	 rcx, rbx
  0021f	e8 00 00 00 00	 call	 Px_DecRef
$LN22@frame_clea:

; 513  :     Py_CLEAR(f->f_trace);

  00224	4c 8b 8d a8 00
	00 00		 mov	 r9, QWORD PTR [rbp+168]
  0022b	4d 85 c9	 test	 r9, r9
  0022e	0f 84 98 00 00
	00		 je	 $LN18@frame_clea
  00234	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  0023b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@LBNCHPJM@frame_clear?$AA@
  00242	41 b8 01 02 00
	00		 mov	 r8d, 513		; 00000201H
  00248	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00250	e8 00 00 00 00	 call	 _PyParallel_Guard
  00255	85 c0		 test	 eax, eax
  00257	75 73		 jne	 SHORT $LN18@frame_clea
  00259	48 8b 9d a8 00
	00 00		 mov	 rbx, QWORD PTR [rbp+168]
  00260	4c 89 ad a8 00
	00 00		 mov	 QWORD PTR [rbp+168], r13
  00267	e8 00 00 00 00	 call	 _Py_PXCTX
  0026c	85 c0		 test	 eax, eax
  0026e	75 5c		 jne	 SHORT $LN18@frame_clea
  00270	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00274	a8 20		 test	 al, 32			; 00000020H
  00276	75 4c		 jne	 SHORT $LN71@frame_clea
  00278	84 c0		 test	 al, al
  0027a	78 48		 js	 SHORT $LN71@frame_clea
  0027c	a8 02		 test	 al, 2
  0027e	75 4c		 jne	 SHORT $LN18@frame_clea
  00280	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00284	75 46		 jne	 SHORT $LN18@frame_clea
  00286	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0028d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00294	4c 8b cb	 mov	 r9, rbx
  00297	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0029d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002a5	e8 00 00 00 00	 call	 _PyParallel_Guard
  002aa	48 8b cb	 mov	 rcx, rbx
  002ad	85 c0		 test	 eax, eax
  002af	74 07		 je	 SHORT $LN76@frame_clea
  002b1	e8 00 00 00 00	 call	 _Px_Dealloc
  002b6	eb 14		 jmp	 SHORT $LN18@frame_clea
$LN76@frame_clea:
  002b8	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  002bc	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  002c2	eb 08		 jmp	 SHORT $LN18@frame_clea
$LN71@frame_clea:
  002c4	48 8b cb	 mov	 rcx, rbx
  002c7	e8 00 00 00 00	 call	 Px_DecRef
$LN18@frame_clea:

; 514  : 
; 515  :     /* locals */
; 516  :     slots = f->f_code->co_nlocals + PyTuple_GET_SIZE(f->f_code->co_cellvars) + PyTuple_GET_SIZE(f->f_code->co_freevars);

  002cc	4c 8b 45 78	 mov	 r8, QWORD PTR [rbp+120]

; 517  :     fastlocals = f->f_localsplus;

  002d0	48 8d bd d0 01
	00 00		 lea	 rdi, QWORD PTR [rbp+464]

; 518  :     for (i = slots; --i >= 0; ++fastlocals)

  002d7	49 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [r8+160]
  002de	49 8b 88 98 00
	00 00		 mov	 rcx, QWORD PTR [r8+152]
  002e5	8b 50 60	 mov	 edx, DWORD PTR [rax+96]
  002e8	41 8b 40 68	 mov	 eax, DWORD PTR [r8+104]
  002ec	03 51 60	 add	 edx, DWORD PTR [rcx+96]
  002ef	8d 74 02 ff	 lea	 esi, DWORD PTR [rdx+rax-1]
  002f3	85 f6		 test	 esi, esi
  002f5	0f 88 ad 00 00
	00		 js	 $LN13@frame_clea
  002fb	0f 1f 44 00 00	 npad	 5
$LL15@frame_clea:

; 519  :         Py_CLEAR(*fastlocals);

  00300	4c 8b 0f	 mov	 r9, QWORD PTR [rdi]
  00303	4d 85 c9	 test	 r9, r9
  00306	0f 84 90 00 00
	00		 je	 $LN11@frame_clea
  0030c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  00313	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@LBNCHPJM@frame_clear?$AA@
  0031a	41 b8 07 02 00
	00		 mov	 r8d, 519		; 00000207H
  00320	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00328	e8 00 00 00 00	 call	 _PyParallel_Guard
  0032d	85 c0		 test	 eax, eax
  0032f	75 6b		 jne	 SHORT $LN11@frame_clea
  00331	48 8b 1f	 mov	 rbx, QWORD PTR [rdi]
  00334	4c 89 2f	 mov	 QWORD PTR [rdi], r13
  00337	e8 00 00 00 00	 call	 _Py_PXCTX
  0033c	85 c0		 test	 eax, eax
  0033e	75 5c		 jne	 SHORT $LN11@frame_clea
  00340	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00344	a8 20		 test	 al, 32			; 00000020H
  00346	75 4c		 jne	 SHORT $LN82@frame_clea
  00348	84 c0		 test	 al, al
  0034a	78 48		 js	 SHORT $LN82@frame_clea
  0034c	a8 02		 test	 al, 2
  0034e	75 4c		 jne	 SHORT $LN11@frame_clea
  00350	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00354	75 46		 jne	 SHORT $LN11@frame_clea
  00356	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0035d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00364	4c 8b cb	 mov	 r9, rbx
  00367	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0036d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00375	e8 00 00 00 00	 call	 _PyParallel_Guard
  0037a	48 8b cb	 mov	 rcx, rbx
  0037d	85 c0		 test	 eax, eax
  0037f	74 07		 je	 SHORT $LN87@frame_clea
  00381	e8 00 00 00 00	 call	 _Px_Dealloc
  00386	eb 14		 jmp	 SHORT $LN11@frame_clea
$LN87@frame_clea:
  00388	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0038c	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00392	eb 08		 jmp	 SHORT $LN11@frame_clea
$LN82@frame_clea:
  00394	48 8b cb	 mov	 rcx, rbx
  00397	e8 00 00 00 00	 call	 Px_DecRef
$LN11@frame_clea:

; 518  :     for (i = slots; --i >= 0; ++fastlocals)

  0039c	48 83 c7 08	 add	 rdi, 8
  003a0	ff ce		 dec	 esi
  003a2	0f 89 58 ff ff
	ff		 jns	 $LL15@frame_clea
$LN13@frame_clea:
  003a8	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]

; 520  : 
; 521  :     /* stack */
; 522  :     if (oldtop != NULL) {

  003ad	4d 85 e4	 test	 r12, r12
  003b0	0f 84 c3 00 00
	00		 je	 $LN5@frame_clea

; 523  :         for (p = f->f_valuestack; p < oldtop; p++)

  003b6	48 8b bd 98 00
	00 00		 mov	 rdi, QWORD PTR [rbp+152]
  003bd	49 3b fc	 cmp	 rdi, r12
  003c0	0f 83 b3 00 00
	00		 jae	 $LN5@frame_clea
  003c6	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL7@frame_clea:

; 524  :             Py_CLEAR(*p);

  003d0	4c 8b 0f	 mov	 r9, QWORD PTR [rdi]
  003d3	4d 85 c9	 test	 r9, r9
  003d6	0f 84 90 00 00
	00		 je	 $LN3@frame_clea
  003dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  003e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@LBNCHPJM@frame_clear?$AA@
  003ea	41 b8 0c 02 00
	00		 mov	 r8d, 524		; 0000020cH
  003f0	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003f8	e8 00 00 00 00	 call	 _PyParallel_Guard
  003fd	85 c0		 test	 eax, eax
  003ff	75 6b		 jne	 SHORT $LN3@frame_clea
  00401	48 8b 1f	 mov	 rbx, QWORD PTR [rdi]
  00404	4c 89 2f	 mov	 QWORD PTR [rdi], r13
  00407	e8 00 00 00 00	 call	 _Py_PXCTX
  0040c	85 c0		 test	 eax, eax
  0040e	75 5c		 jne	 SHORT $LN3@frame_clea
  00410	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00414	a8 20		 test	 al, 32			; 00000020H
  00416	75 4c		 jne	 SHORT $LN93@frame_clea
  00418	84 c0		 test	 al, al
  0041a	78 48		 js	 SHORT $LN93@frame_clea
  0041c	a8 02		 test	 al, 2
  0041e	75 4c		 jne	 SHORT $LN3@frame_clea
  00420	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00424	75 46		 jne	 SHORT $LN3@frame_clea
  00426	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0042d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00434	4c 8b cb	 mov	 r9, rbx
  00437	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0043d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00445	e8 00 00 00 00	 call	 _PyParallel_Guard
  0044a	48 8b cb	 mov	 rcx, rbx
  0044d	85 c0		 test	 eax, eax
  0044f	74 07		 je	 SHORT $LN98@frame_clea
  00451	e8 00 00 00 00	 call	 _Px_Dealloc
  00456	eb 14		 jmp	 SHORT $LN3@frame_clea
$LN98@frame_clea:
  00458	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0045c	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00462	eb 08		 jmp	 SHORT $LN3@frame_clea
$LN93@frame_clea:
  00464	48 8b cb	 mov	 rcx, rbx
  00467	e8 00 00 00 00	 call	 Px_DecRef
$LN3@frame_clea:

; 523  :         for (p = f->f_valuestack; p < oldtop; p++)

  0046c	48 83 c7 08	 add	 rdi, 8
  00470	49 3b fc	 cmp	 rdi, r12
  00473	0f 82 57 ff ff
	ff		 jb	 $LL7@frame_clea
$LN5@frame_clea:

; 525  :     }
; 526  : }

  00479	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  0047e	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
  00483	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00487	41 5d		 pop	 r13
  00489	41 5c		 pop	 r12
  0048b	5f		 pop	 rdi
  0048c	c3		 ret	 0
frame_clear ENDP
_TEXT	ENDS
EXTRN	PyLong_FromSsize_t:PROC
; Function compile flags: /Ogtpy
;	COMDAT frame_sizeof
_TEXT	SEGMENT
f$ = 8
frame_sizeof PROC					; COMDAT

; 531  :     Py_ssize_t res, extras, ncells, nfrees;
; 532  : 
; 533  :     ncells = PyTuple_GET_SIZE(f->f_code->co_cellvars);
; 534  :     nfrees = PyTuple_GET_SIZE(f->f_code->co_freevars);
; 535  :     extras = f->f_code->co_stacksize + f->f_code->co_nlocals +
; 536  :              ncells + nfrees;

  00000	48 8b 51 78	 mov	 rdx, QWORD PTR [rcx+120]
  00004	8b 42 6c	 mov	 eax, DWORD PTR [rdx+108]
  00007	03 42 68	 add	 eax, DWORD PTR [rdx+104]

; 537  :     /* subtract one as it is already included in PyFrameObject */
; 538  :     res = sizeof(PyFrameObject) + (extras-1) * sizeof(PyObject *);

  0000a	48 63 c8	 movsxd	 rcx, eax
  0000d	48 8b 82 a0 00
	00 00		 mov	 rax, QWORD PTR [rdx+160]
  00014	48 03 48 60	 add	 rcx, QWORD PTR [rax+96]
  00018	48 8b 82 98 00
	00 00		 mov	 rax, QWORD PTR [rdx+152]
  0001f	48 03 48 60	 add	 rcx, QWORD PTR [rax+96]
  00023	48 8d 0c cd d8
	01 00 00	 lea	 rcx, QWORD PTR [rcx*8+472]

; 539  : 
; 540  :     return PyLong_FromSsize_t(res);
; 541  : }

  0002b	e9 00 00 00 00	 jmp	 PyLong_FromSsize_t
frame_sizeof ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@MNFFDJII@__builtins__?$AA@		; `string'
PUBLIC	_PyFrame_Init
EXTRN	PyUnicode_InternFromString:PROC
_BSS	SEGMENT
	ALIGN	8

builtin_object DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyFrame_Init DD imagerel $LN4
	DD	imagerel $LN4+38
	DD	imagerel $unwind$_PyFrame_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyFrame_Init DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0N@MNFFDJII@__builtins__?$AA@
CONST	SEGMENT
??_C@_0N@MNFFDJII@__builtins__?$AA@ DB '__builtins__', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyFrame_Init
_TEXT	SEGMENT
_PyFrame_Init PROC					; COMDAT

; 590  : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 591  :     builtin_object = PyUnicode_InternFromString("__builtins__");

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@MNFFDJII@__builtins__?$AA@
  0000b	e8 00 00 00 00	 call	 PyUnicode_InternFromString

; 592  :     if (builtin_object == NULL)

  00010	33 c9		 xor	 ecx, ecx
  00012	48 85 c0	 test	 rax, rax
  00015	48 89 05 00 00
	00 00		 mov	 QWORD PTR builtin_object, rax
  0001c	0f 95 c1	 setne	 cl
  0001f	8b c1		 mov	 eax, ecx

; 593  :         return 0;
; 594  :     return 1;
; 595  : }

  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	c3		 ret	 0
_PyFrame_Init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ ; `string'
PUBLIC	??_C@_0M@DBDMBBFJ@PyFrame_New?$AA@		; `string'
PUBLIC	??_C@_04OHJIHAFH@None?$AA@			; `string'
PUBLIC	PyFrame_New
EXTRN	_PyGC_generation0:QWORD
EXTRN	Py_FatalError:PROC
EXTRN	_PyObject_GC_NewVar:PROC
EXTRN	_PxObject_NewVar:PROC
EXTRN	_Px_NewReference:PROC
EXTRN	_PyParallel_ExecutingCallbackFromMainThread:PROC
EXTRN	PyDict_SetItemString:PROC
EXTRN	PyDict_New:PROC
EXTRN	PyModule_GetDict:PROC
EXTRN	PyType_IsSubtype:PROC
EXTRN	PyModule_Type:BYTE
EXTRN	PyDict_GetItem:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyFrame_New DD imagerel $LN85
	DD	imagerel $LN85+240
	DD	imagerel $unwind$PyFrame_New
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyFrame_New DD imagerel $LN85+240
	DD	imagerel $LN85+602
	DD	imagerel $chain$1$PyFrame_New
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyFrame_New DD imagerel $LN85+602
	DD	imagerel $LN85+624
	DD	imagerel $chain$2$PyFrame_New
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyFrame_New DD imagerel $LN85+624
	DD	imagerel $LN85+1360
	DD	imagerel $chain$3$PyFrame_New
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyFrame_New DD imagerel $LN85+1360
	DD	imagerel $LN85+1367
	DD	imagerel $chain$4$PyFrame_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyFrame_New DD 021H
	DD	imagerel $LN85
	DD	imagerel $LN85+240
	DD	imagerel $unwind$PyFrame_New
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyFrame_New DD 040021H
	DD	0106400H
	DD	0f3400H
	DD	imagerel $LN85
	DD	imagerel $LN85+240
	DD	imagerel $unwind$PyFrame_New
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyFrame_New DD 021H
	DD	imagerel $LN85
	DD	imagerel $LN85+240
	DD	imagerel $unwind$PyFrame_New
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyFrame_New DD 040d21H
	DD	010640dH
	DD	0f3405H
	DD	imagerel $LN85
	DD	imagerel $LN85+240
	DD	imagerel $unwind$PyFrame_New
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFrame_New DD 081701H
	DD	0115417H
	DD	0f0137217H
	DD	0d00fe011H
	DD	0700bc00dH
xdata	ENDS
;	COMDAT ??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
CONST	SEGMENT
??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ DB 'GC object alread'
	DB	'y tracked', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DBDMBBFJ@PyFrame_New?$AA@
CONST	SEGMENT
??_C@_0M@DBDMBBFJ@PyFrame_New?$AA@ DB 'PyFrame_New', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04OHJIHAFH@None?$AA@
CONST	SEGMENT
??_C@_04OHJIHAFH@None?$AA@ DB 'None', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\frameobject.c
CONST	ENDS
;	COMDAT PyFrame_New
_TEXT	SEGMENT
nfrees$1$ = 48
tstate$ = 112
code$ = 120
globals$ = 128
locals$ = 136
PyFrame_New PROC					; COMDAT

; 600  : {

$LN85:
  00000	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	41 54		 push	 r12
  0000d	41 55		 push	 r13
  0000f	41 56		 push	 r14
  00011	41 57		 push	 r15
  00013	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 601  :     PyFrameObject *back = tstate->frame;

  00017	48 8b 69 10	 mov	 rbp, QWORD PTR [rcx+16]
  0001b	4d 8b f1	 mov	 r14, r9
  0001e	4d 8b e8	 mov	 r13, r8
  00021	4c 8b e2	 mov	 r12, rdx
  00024	4c 8b f9	 mov	 r15, rcx

; 602  :     PyFrameObject *f;
; 603  :     PyObject *builtins;
; 604  :     Py_ssize_t i;
; 605  : 
; 606  : #ifdef Py_DEBUG
; 607  :     if (code == NULL || globals == NULL || !PyDict_Check(globals) ||
; 608  :         (locals != NULL && !PyMapping_Check(locals))) {
; 609  :         PyErr_BadInternalCall();
; 610  :         return NULL;
; 611  :     }
; 612  : #endif
; 613  :     if (back == NULL || back->f_globals != globals) {

  00027	48 85 ed	 test	 rbp, rbp
  0002a	74 51		 je	 SHORT $LN36@PyFrame_Ne
  0002c	4c 39 85 88 00
	00 00		 cmp	 QWORD PTR [rbp+136], r8
  00033	75 48		 jne	 SHORT $LN36@PyFrame_Ne

; 632  : 
; 633  :     }
; 634  :     else {
; 635  :         /* If we share the globals, we share the builtins.
; 636  :            Save a lookup and a call. */
; 637  :         builtins = back->f_builtins;

  00035	48 8b bd 80 00
	00 00		 mov	 rdi, QWORD PTR [rbp+128]
$LN81@PyFrame_Ne:

; 638  :         assert(builtins != NULL);
; 639  :         Py_INCREF(builtins);

  0003c	e8 00 00 00 00	 call	 _Py_PXCTX
  00041	85 c0		 test	 eax, eax
  00043	0f 85 a7 00 00
	00		 jne	 $LN49@PyFrame_Ne
  00049	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00050	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00057	4c 8b cf	 mov	 r9, rdi
  0005a	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00060	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00068	e8 00 00 00 00	 call	 _PyParallel_Guard
  0006d	85 c0		 test	 eax, eax
  0006f	75 06		 jne	 SHORT $LN52@PyFrame_Ne
  00071	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  00075	74 79		 je	 SHORT $LN49@PyFrame_Ne
$LN52@PyFrame_Ne:
  00077	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
  0007b	eb 73		 jmp	 SHORT $LN49@PyFrame_Ne
$LN36@PyFrame_Ne:

; 614  :         builtins = PyDict_GetItem(globals, builtin_object);

  0007d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR builtin_object
  00084	49 8b c8	 mov	 rcx, r8
  00087	e8 00 00 00 00	 call	 PyDict_GetItem
  0008c	48 8b f8	 mov	 rdi, rax

; 615  :         if (builtins) {

  0008f	48 85 c0	 test	 rax, rax
  00092	74 2d		 je	 SHORT $LN78@PyFrame_Ne

; 616  :             if (PyModule_Check(builtins)) {

  00094	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00098	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  0009f	48 3b ca	 cmp	 rcx, rdx
  000a2	74 09		 je	 SHORT $LN33@PyFrame_Ne
  000a4	e8 00 00 00 00	 call	 PyType_IsSubtype
  000a9	85 c0		 test	 eax, eax
  000ab	74 0b		 je	 SHORT $LN34@PyFrame_Ne
$LN33@PyFrame_Ne:

; 617  :                 builtins = PyModule_GetDict(builtins);

  000ad	48 8b cf	 mov	 rcx, rdi
  000b0	e8 00 00 00 00	 call	 PyModule_GetDict
  000b5	48 8b f8	 mov	 rdi, rax
$LN34@PyFrame_Ne:

; 618  :                 assert(builtins != NULL);
; 619  :             }
; 620  :         }
; 621  :         if (builtins == NULL) {

  000b8	48 85 ff	 test	 rdi, rdi

; 629  :         }
; 630  :         else
; 631  :             Py_INCREF(builtins);

  000bb	0f 85 7b ff ff
	ff		 jne	 $LN81@PyFrame_Ne
$LN78@PyFrame_Ne:

; 622  :             /* No builtins!              Make up a minimal one
; 623  :                Give them 'None', at least. */
; 624  :             builtins = PyDict_New();

  000c1	e8 00 00 00 00	 call	 PyDict_New
  000c6	48 8b f8	 mov	 rdi, rax

; 625  :             if (builtins == NULL ||
; 626  :                 PyDict_SetItemString(
; 627  :                     builtins, "None", Py_None) < 0)

  000c9	48 85 c0	 test	 rax, rax
  000cc	0f 84 7e 04 00
	00		 je	 $LN30@PyFrame_Ne
  000d2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  000d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04OHJIHAFH@None?$AA@
  000e0	48 8b c8	 mov	 rcx, rax
  000e3	e8 00 00 00 00	 call	 PyDict_SetItemString
  000e8	85 c0		 test	 eax, eax
  000ea	0f 88 60 04 00
	00		 js	 $LN30@PyFrame_Ne

; 629  :         }
; 630  :         else
; 631  :             Py_INCREF(builtins);

$LN49@PyFrame_Ne:

; 640  :     }
; 641  : #ifndef WITH_PARALLEL
; 642  :     if (code->co_zombieframe != NULL) {
; 643  : #else
; 644  :     if (!Py_PXCTX && code->co_zombieframe != NULL &&
; 645  :         !_PyParallel_ExecutingCallbackFromMainThread()) {

  000f0	48 89 5c 24 78	 mov	 QWORD PTR [rsp+120], rbx
  000f5	48 89 b4 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rsi
  000fd	e8 00 00 00 00	 call	 _Py_PXCTX
  00102	85 c0		 test	 eax, eax
  00104	75 68		 jne	 SHORT $LN27@PyFrame_Ne
  00106	49 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR [r12+208], 0
  0010f	74 5d		 je	 SHORT $LN27@PyFrame_Ne
  00111	e8 00 00 00 00	 call	 _PyParallel_ExecutingCallbackFromMainThread
  00116	85 c0		 test	 eax, eax
  00118	75 54		 jne	 SHORT $LN27@PyFrame_Ne

; 646  :         assert(!_Px_TEST(code->co_zombieframe));
; 647  : #endif
; 648  :         f = code->co_zombieframe;

  0011a	49 8b 9c 24 d0
	00 00 00	 mov	 rbx, QWORD PTR [r12+208]

; 649  :         code->co_zombieframe = NULL;
; 650  :         _Py_NewReference((PyObject *)f);

  00122	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  00129	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@DBDMBBFJ@PyFrame_New?$AA@
  00130	33 f6		 xor	 esi, esi
  00132	41 b8 8a 02 00
	00		 mov	 r8d, 650		; 0000028aH
  00138	4c 8b cb	 mov	 r9, rbx
  0013b	49 89 b4 24 d0
	00 00 00	 mov	 QWORD PTR [r12+208], rsi
  00143	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0014b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00150	85 c0		 test	 eax, eax
  00152	74 0d		 je	 SHORT $LN40@PyFrame_Ne
  00154	48 8b cb	 mov	 rcx, rbx
  00157	e8 00 00 00 00	 call	 _Px_NewReference
  0015c	e9 da 01 00 00	 jmp	 $LN26@PyFrame_Ne
$LN40@PyFrame_Ne:
  00161	48 c7 43 50 01
	00 00 00	 mov	 QWORD PTR [rbx+80], 1

; 651  :         assert(f->f_code == code);
; 652  :     }
; 653  :     else {

  00169	e9 cd 01 00 00	 jmp	 $LN26@PyFrame_Ne
$LN27@PyFrame_Ne:

; 654  :         Py_ssize_t extras, ncells, nfrees;
; 655  :         ncells = PyTuple_GET_SIZE(code->co_cellvars);

  0016e	49 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR [r12+160]
  00176	4c 8b 78 60	 mov	 r15, QWORD PTR [rax+96]

; 656  :         nfrees = PyTuple_GET_SIZE(code->co_freevars);

  0017a	49 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR [r12+152]
  00182	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]

; 657  :         extras = code->co_stacksize + code->co_nlocals + ncells + nfrees;

  00186	41 8b 44 24 6c	 mov	 eax, DWORD PTR [r12+108]
  0018b	41 03 44 24 68	 add	 eax, DWORD PTR [r12+104]
  00190	48 89 4c 24 30	 mov	 QWORD PTR nfrees$1$[rsp], rcx
  00195	48 63 f0	 movsxd	 rsi, eax
  00198	48 03 f1	 add	 rsi, rcx
  0019b	49 03 f7	 add	 rsi, r15

; 658  :         if (Py_PXCTX || free_list == NULL) {

  0019e	e8 00 00 00 00	 call	 _Py_PXCTX
  001a3	85 c0		 test	 eax, eax
  001a5	0f 85 04 01 00
	00		 jne	 $LN24@PyFrame_Ne
  001ab	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR free_list, 0
  001b3	0f 84 f6 00 00
	00		 je	 $LN24@PyFrame_Ne

; 663  :             }
; 664  :         }
; 665  :         else {
; 666  :             Py_GUARD

  001b9	e8 00 00 00 00	 call	 _Py_PXCTX
  001be	85 c0		 test	 eax, eax
  001c0	74 1c		 je	 SHORT $LN21@PyFrame_Ne
  001c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  001c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@DBDMBBFJ@PyFrame_New?$AA@
  001d0	45 33 c9	 xor	 r9d, r9d
  001d3	41 b8 9a 02 00
	00		 mov	 r8d, 666		; 0000029aH
  001d9	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN21@PyFrame_Ne:

; 667  :             assert(numfree > 0);
; 668  :             --numfree;
; 669  :             f = free_list;

  001de	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR free_list
  001e5	ff 0d 00 00 00
	00		 dec	 DWORD PTR numfree

; 670  :             free_list = free_list->f_back;

  001eb	48 8b 43 70	 mov	 rax, QWORD PTR [rbx+112]
  001ef	48 89 05 00 00
	00 00		 mov	 QWORD PTR free_list, rax

; 671  :             if (Py_SIZE(f) < extras) {

  001f6	48 39 73 60	 cmp	 QWORD PTR [rbx+96], rsi
  001fa	7d 77		 jge	 SHORT $LN20@PyFrame_Ne

; 672  :                 PyFrameObject *new_f = PyObject_GC_Resize(PyFrameObject, f, extras);

  001fc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@
  00203	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@HFBINLOF@__PyObject_GC_RESIZE?$AA@
  0020a	4c 8b cb	 mov	 r9, rbx
  0020d	41 b8 75 01 00
	00		 mov	 r8d, 373		; 00000175H
  00213	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0021b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00220	48 8b d6	 mov	 rdx, rsi
  00223	48 8b cb	 mov	 rcx, rbx
  00226	85 c0		 test	 eax, eax
  00228	74 07		 je	 SHORT $LN57@PyFrame_Ne
  0022a	e8 00 00 00 00	 call	 _PxObject_Resize
  0022f	eb 05		 jmp	 SHORT $LN56@PyFrame_Ne
$LN57@PyFrame_Ne:
  00231	e8 00 00 00 00	 call	 _PyObject_GC_Resize
$LN56@PyFrame_Ne:

; 673  :                 if (new_f == NULL) {

  00236	48 85 c0	 test	 rax, rax
  00239	75 35		 jne	 SHORT $LN19@PyFrame_Ne

; 674  :                     PyObject_GC_Del(f);

  0023b	48 8b cb	 mov	 rcx, rbx
  0023e	e8 00 00 00 00	 call	 PyObject_GC_Del
$LN83@PyFrame_Ne:

; 675  :                     Py_DECREF(builtins);

  00243	48 8b cf	 mov	 rcx, rdi
$LN84@PyFrame_Ne:
  00246	e8 00 00 00 00	 call	 _Py_DecRef

; 676  :                     return NULL;

  0024b	33 c0		 xor	 eax, eax
$LN80@PyFrame_Ne:
  0024d	48 8b 5c 24 78	 mov	 rbx, QWORD PTR [rsp+120]
  00252	48 8b b4 24 80
	00 00 00	 mov	 rsi, QWORD PTR [rsp+128]
$LN38@PyFrame_Ne:

; 725  : }

  0025a	48 8b ac 24 88
	00 00 00	 mov	 rbp, QWORD PTR [rsp+136]
  00262	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00266	41 5f		 pop	 r15
  00268	41 5e		 pop	 r14
  0026a	41 5d		 pop	 r13
  0026c	41 5c		 pop	 r12
  0026e	5f		 pop	 rdi
  0026f	c3		 ret	 0
$LN19@PyFrame_Ne:

; 677  :                 }
; 678  :                 f = new_f;

  00270	48 8b d8	 mov	 rbx, rax
$LN20@PyFrame_Ne:

; 679  :             }
; 680  :             _Py_NewReference((PyObject *)f);

  00273	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  0027a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@DBDMBBFJ@PyFrame_New?$AA@
  00281	4c 8b cb	 mov	 r9, rbx
  00284	41 b8 a8 02 00
	00		 mov	 r8d, 680		; 000002a8H
  0028a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00292	e8 00 00 00 00	 call	 _PyParallel_Guard
  00297	85 c0		 test	 eax, eax
  00299	74 0a		 je	 SHORT $LN44@PyFrame_Ne
  0029b	48 8b cb	 mov	 rcx, rbx
  0029e	e8 00 00 00 00	 call	 _Px_NewReference
  002a3	eb 35		 jmp	 SHORT $LN23@PyFrame_Ne
$LN44@PyFrame_Ne:
  002a5	48 c7 43 50 01
	00 00 00	 mov	 QWORD PTR [rbx+80], 1
  002ad	eb 2b		 jmp	 SHORT $LN23@PyFrame_Ne
$LN24@PyFrame_Ne:

; 659  :             f = PyObject_GC_NewVar(PyFrameObject, &PyFrame_Type, extras);

  002af	e8 00 00 00 00	 call	 _Py_PXCTX
  002b4	48 8b d6	 mov	 rdx, rsi
  002b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyFrame_Type
  002be	85 c0		 test	 eax, eax
  002c0	74 07		 je	 SHORT $LN42@PyFrame_Ne
  002c2	e8 00 00 00 00	 call	 _PxObject_NewVar
  002c7	eb 05		 jmp	 SHORT $LN82@PyFrame_Ne
$LN42@PyFrame_Ne:
  002c9	e8 00 00 00 00	 call	 _PyObject_GC_NewVar
$LN82@PyFrame_Ne:
  002ce	48 8b d8	 mov	 rbx, rax

; 660  :             if (f == NULL) {

  002d1	48 85 c0	 test	 rax, rax

; 661  :                 Py_DECREF(builtins);
; 662  :                 return NULL;

  002d4	0f 84 69 ff ff
	ff		 je	 $LN83@PyFrame_Ne
$LN23@PyFrame_Ne:

; 681  :         }
; 682  : 
; 683  :         f->f_code = code;

  002da	4c 89 63 78	 mov	 QWORD PTR [rbx+120], r12

; 684  :         extras = code->co_nlocals + ncells + nfrees;

  002de	4d 63 44 24 68	 movsxd	 r8, DWORD PTR [r12+104]
  002e3	4c 03 44 24 30	 add	 r8, QWORD PTR nfrees$1$[rsp]
  002e8	4d 03 c7	 add	 r8, r15

; 685  :         f->f_valuestack = f->f_localsplus + extras;

  002eb	4a 8d 84 c3 d0
	01 00 00	 lea	 rax, QWORD PTR [rbx+r8*8+464]
  002f3	48 89 83 98 00
	00 00		 mov	 QWORD PTR [rbx+152], rax

; 686  :         for (i=0; i<extras; i++)

  002fa	4d 85 c0	 test	 r8, r8
  002fd	7e 12		 jle	 SHORT $LN18@PyFrame_Ne

; 681  :         }
; 682  : 
; 683  :         f->f_code = code;

  002ff	48 8d 8b d0 01
	00 00		 lea	 rcx, QWORD PTR [rbx+464]
  00306	49 c1 e0 03	 shl	 r8, 3
  0030a	33 d2		 xor	 edx, edx
  0030c	e8 00 00 00 00	 call	 memset
$LN18@PyFrame_Ne:

; 687  :             f->f_localsplus[i] = NULL;
; 688  :         f->f_locals = NULL;

  00311	4c 8b 7c 24 70	 mov	 r15, QWORD PTR tstate$[rsp]
  00316	33 f6		 xor	 esi, esi
  00318	48 89 b3 90 00
	00 00		 mov	 QWORD PTR [rbx+144], rsi

; 689  :         f->f_trace = NULL;

  0031f	48 89 b3 a8 00
	00 00		 mov	 QWORD PTR [rbx+168], rsi

; 690  :         f->f_exc_type = f->f_exc_value = f->f_exc_traceback = NULL;

  00326	48 89 b3 c0 00
	00 00		 mov	 QWORD PTR [rbx+192], rsi
  0032d	48 89 b3 b8 00
	00 00		 mov	 QWORD PTR [rbx+184], rsi
  00334	48 89 b3 b0 00
	00 00		 mov	 QWORD PTR [rbx+176], rsi
$LN26@PyFrame_Ne:

; 691  :     }
; 692  :     f->f_stacktop = f->f_valuestack;

  0033b	48 8b 83 98 00
	00 00		 mov	 rax, QWORD PTR [rbx+152]

; 693  :     f->f_builtins = builtins;

  00342	48 89 bb 80 00
	00 00		 mov	 QWORD PTR [rbx+128], rdi
  00349	48 89 83 a0 00
	00 00		 mov	 QWORD PTR [rbx+160], rax

; 694  :     Py_XINCREF(back);

  00350	48 85 ed	 test	 rbp, rbp
  00353	74 3b		 je	 SHORT $LN14@PyFrame_Ne
  00355	e8 00 00 00 00	 call	 _Py_PXCTX
  0035a	85 c0		 test	 eax, eax
  0035c	75 32		 jne	 SHORT $LN14@PyFrame_Ne
  0035e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00365	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0036c	4c 8b cd	 mov	 r9, rbp
  0036f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00375	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0037d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00382	85 c0		 test	 eax, eax
  00384	75 06		 jne	 SHORT $LN60@PyFrame_Ne
  00386	f6 45 20 20	 test	 BYTE PTR [rbp+32], 32	; 00000020H
  0038a	74 04		 je	 SHORT $LN14@PyFrame_Ne
$LN60@PyFrame_Ne:
  0038c	48 ff 45 50	 inc	 QWORD PTR [rbp+80]
$LN14@PyFrame_Ne:

; 695  :     f->f_back = back;

  00390	48 89 6b 70	 mov	 QWORD PTR [rbx+112], rbp

; 696  :     Py_INCREF(code);

  00394	e8 00 00 00 00	 call	 _Py_PXCTX
  00399	85 c0		 test	 eax, eax
  0039b	75 35		 jne	 SHORT $LN65@PyFrame_Ne
  0039d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  003a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  003ab	4d 8b cc	 mov	 r9, r12
  003ae	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  003b4	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  003bc	e8 00 00 00 00	 call	 _PyParallel_Guard
  003c1	85 c0		 test	 eax, eax
  003c3	75 08		 jne	 SHORT $LN64@PyFrame_Ne
  003c5	41 f6 44 24 20
	20		 test	 BYTE PTR [r12+32], 32	; 00000020H
  003cb	74 05		 je	 SHORT $LN65@PyFrame_Ne
$LN64@PyFrame_Ne:
  003cd	49 ff 44 24 50	 inc	 QWORD PTR [r12+80]
$LN65@PyFrame_Ne:

; 697  :     Py_INCREF(globals);

  003d2	e8 00 00 00 00	 call	 _Py_PXCTX
  003d7	85 c0		 test	 eax, eax
  003d9	75 33		 jne	 SHORT $LN69@PyFrame_Ne
  003db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  003e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  003e9	4d 8b cd	 mov	 r9, r13
  003ec	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  003f2	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  003fa	e8 00 00 00 00	 call	 _PyParallel_Guard
  003ff	85 c0		 test	 eax, eax
  00401	75 07		 jne	 SHORT $LN68@PyFrame_Ne
  00403	41 f6 45 20 20	 test	 BYTE PTR [r13+32], 32	; 00000020H
  00408	74 04		 je	 SHORT $LN69@PyFrame_Ne
$LN68@PyFrame_Ne:
  0040a	49 ff 45 50	 inc	 QWORD PTR [r13+80]
$LN69@PyFrame_Ne:

; 698  :     f->f_globals = globals;

  0040e	4c 89 ab 88 00
	00 00		 mov	 QWORD PTR [rbx+136], r13

; 699  :     /* Most functions have CO_NEWLOCALS and CO_OPTIMIZED set. */
; 700  :     if ((code->co_flags & (CO_NEWLOCALS | CO_OPTIMIZED)) ==
; 701  :         (CO_NEWLOCALS | CO_OPTIMIZED))

  00415	41 8b 4c 24 70	 mov	 ecx, DWORD PTR [r12+112]
  0041a	8b c1		 mov	 eax, ecx
  0041c	83 e0 03	 and	 eax, 3
  0041f	3c 03		 cmp	 al, 3
  00421	74 6a		 je	 SHORT $LN7@PyFrame_Ne

; 702  :         ; /* f_locals = NULL; will be set by PyFrame_FastToLocals() */
; 703  :     else if (code->co_flags & CO_NEWLOCALS) {

  00423	f6 c1 02	 test	 cl, 2
  00426	74 1b		 je	 SHORT $LN9@PyFrame_Ne

; 704  :         locals = PyDict_New();

  00428	e8 00 00 00 00	 call	 PyDict_New

; 705  :         if (locals == NULL) {

  0042d	48 85 c0	 test	 rax, rax
  00430	75 08		 jne	 SHORT $LN8@PyFrame_Ne

; 706  :             Py_DECREF(f);

  00432	48 8b cb	 mov	 rcx, rbx

; 707  :             return NULL;

  00435	e9 0c fe ff ff	 jmp	 $LN84@PyFrame_Ne
$LN8@PyFrame_Ne:

; 708  :         }
; 709  :         f->f_locals = locals;

  0043a	48 89 83 90 00
	00 00		 mov	 QWORD PTR [rbx+144], rax

; 710  :     }
; 711  :     else {

  00441	eb 4a		 jmp	 SHORT $LN7@PyFrame_Ne
$LN9@PyFrame_Ne:

; 712  :         if (locals == NULL)

  00443	4d 85 f6	 test	 r14, r14
  00446	4d 0f 44 f5	 cmove	 r14, r13

; 713  :             locals = globals;
; 714  :         Py_INCREF(locals);

  0044a	e8 00 00 00 00	 call	 _Py_PXCTX
  0044f	85 c0		 test	 eax, eax
  00451	75 33		 jne	 SHORT $LN73@PyFrame_Ne
  00453	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0045a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00461	4d 8b ce	 mov	 r9, r14
  00464	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0046a	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00472	e8 00 00 00 00	 call	 _PyParallel_Guard
  00477	85 c0		 test	 eax, eax
  00479	75 07		 jne	 SHORT $LN72@PyFrame_Ne
  0047b	41 f6 46 20 20	 test	 BYTE PTR [r14+32], 32	; 00000020H
  00480	74 04		 je	 SHORT $LN73@PyFrame_Ne
$LN72@PyFrame_Ne:
  00482	49 ff 46 50	 inc	 QWORD PTR [r14+80]
$LN73@PyFrame_Ne:

; 715  :         f->f_locals = locals;

  00486	4c 89 b3 90 00
	00 00		 mov	 QWORD PTR [rbx+144], r14
$LN7@PyFrame_Ne:

; 716  :     }
; 717  :     f->f_tstate = tstate;

  0048d	4c 89 bb c8 00
	00 00		 mov	 QWORD PTR [rbx+200], r15

; 718  : 
; 719  :     f->f_lasti = -1;

  00494	c7 83 d0 00 00
	00 ff ff ff ff	 mov	 DWORD PTR [rbx+208], -1

; 720  :     f->f_lineno = code->co_firstlineno;

  0049e	41 8b 84 24 c0
	00 00 00	 mov	 eax, DWORD PTR [r12+192]

; 721  :     f->f_iblock = 0;
; 722  : 
; 723  :     _PyObject_GC_TRACK(f);

  004a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  004ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@DBDMBBFJ@PyFrame_New?$AA@
  004b4	4c 8b cb	 mov	 r9, rbx
  004b7	41 b8 d3 02 00
	00		 mov	 r8d, 723		; 000002d3H
  004bd	89 83 d4 00 00
	00		 mov	 DWORD PTR [rbx+212], eax
  004c3	89 b3 d8 00 00
	00		 mov	 DWORD PTR [rbx+216], esi
  004c9	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  004d1	e8 00 00 00 00	 call	 _PyParallel_Guard
  004d6	85 c0		 test	 eax, eax
  004d8	75 6e		 jne	 SHORT $LN2@PyFrame_Ne
  004da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  004e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@DBDMBBFJ@PyFrame_New?$AA@
  004e8	4c 8b cb	 mov	 r9, rbx
  004eb	41 b8 d3 02 00
	00		 mov	 r8d, 723		; 000002d3H
  004f1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  004f9	e8 00 00 00 00	 call	 _PyParallel_Guard
  004fe	85 c0		 test	 eax, eax
  00500	75 04		 jne	 SHORT $LN47@PyFrame_Ne
  00502	48 8d 73 e8	 lea	 rsi, QWORD PTR [rbx-24]
$LN47@PyFrame_Ne:
  00506	48 83 7e 10 fe	 cmp	 QWORD PTR [rsi+16], -2
  0050b	74 0c		 je	 SHORT $LN1@PyFrame_Ne
  0050d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  00514	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyFrame_Ne:
  00519	48 c7 46 10 fd
	ff ff ff	 mov	 QWORD PTR [rsi+16], -3
  00521	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00528	48 89 06	 mov	 QWORD PTR [rsi], rax
  0052b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00532	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00536	48 89 4e 08	 mov	 QWORD PTR [rsi+8], rcx
  0053a	48 89 31	 mov	 QWORD PTR [rcx], rsi
  0053d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00544	48 89 70 08	 mov	 QWORD PTR [rax+8], rsi
$LN2@PyFrame_Ne:

; 724  :     return f;

  00548	48 8b c3	 mov	 rax, rbx
  0054b	e9 fd fc ff ff	 jmp	 $LN80@PyFrame_Ne
$LN30@PyFrame_Ne:

; 628  :                 return NULL;

  00550	33 c0		 xor	 eax, eax
  00552	e9 03 fd ff ff	 jmp	 $LN38@PyFrame_Ne
PyFrame_New ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@DHOBDPGA@XXX?5block?5stack?5overflow?$AA@ ; `string'
PUBLIC	PyFrame_BlockSetup
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFrame_BlockSetup DD imagerel $LN4
	DD	imagerel $LN4+118
	DD	imagerel $unwind$PyFrame_BlockSetup
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFrame_BlockSetup DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0BJ@DHOBDPGA@XXX?5block?5stack?5overflow?$AA@
CONST	SEGMENT
??_C@_0BJ@DHOBDPGA@XXX?5block?5stack?5overflow?$AA@ DB 'XXX block stack o'
	DB	'verflow', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyFrame_BlockSetup
_TEXT	SEGMENT
f$ = 48
type$ = 56
handler$ = 64
level$ = 72
PyFrame_BlockSetup PROC					; COMDAT

; 731  : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 732  :     PyTryBlock *b;
; 733  :     if (f->f_iblock >= CO_MAXBLOCKS)

  00014	83 b9 d8 00 00
	00 14		 cmp	 DWORD PTR [rcx+216], 20
  0001b	41 8b f9	 mov	 edi, r9d
  0001e	41 8b f0	 mov	 esi, r8d
  00021	8b ea		 mov	 ebp, edx
  00023	48 8b d9	 mov	 rbx, rcx
  00026	7c 0c		 jl	 SHORT $LN1@PyFrame_Bl

; 734  :         Py_FatalError("XXX block stack overflow");

  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@DHOBDPGA@XXX?5block?5stack?5overflow?$AA@
  0002f	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyFrame_Bl:

; 735  :     b = &f->f_blockstack[f->f_iblock++];

  00034	4c 63 93 d8 00
	00 00		 movsxd	 r10, DWORD PTR [rbx+216]
  0003b	4f 8d 0c 52	 lea	 r9, QWORD PTR [r10+r10*2]
  0003f	41 8d 42 01	 lea	 eax, DWORD PTR [r10+1]
  00043	89 83 d8 00 00
	00		 mov	 DWORD PTR [rbx+216], eax

; 736  :     b->b_type = type;

  00049	42 89 ac 8b dc
	00 00 00	 mov	 DWORD PTR [rbx+r9*4+220], ebp

; 737  :     b->b_level = level;
; 738  :     b->b_handler = handler;
; 739  : }

  00051	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00056	42 89 b4 8b e0
	00 00 00	 mov	 DWORD PTR [rbx+r9*4+224], esi
  0005e	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00063	42 89 bc 8b e4
	00 00 00	 mov	 DWORD PTR [rbx+r9*4+228], edi
  0006b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00070	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00074	5f		 pop	 rdi
  00075	c3		 ret	 0
PyFrame_BlockSetup ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@LGMLDJMK@XXX?5block?5stack?5underflow?$AA@ ; `string'
PUBLIC	PyFrame_BlockPop
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFrame_BlockPop DD imagerel $LN4
	DD	imagerel $LN4+64
	DD	imagerel $unwind$PyFrame_BlockPop
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFrame_BlockPop DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0BK@LGMLDJMK@XXX?5block?5stack?5underflow?$AA@
CONST	SEGMENT
??_C@_0BK@LGMLDJMK@XXX?5block?5stack?5underflow?$AA@ DB 'XXX block stack '
	DB	'underflow', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyFrame_BlockPop
_TEXT	SEGMENT
f$ = 48
PyFrame_BlockPop PROC					; COMDAT

; 743  : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 744  :     PyTryBlock *b;
; 745  :     if (f->f_iblock <= 0)

  00006	83 b9 d8 00 00
	00 00		 cmp	 DWORD PTR [rcx+216], 0
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	7f 0c		 jg	 SHORT $LN1@PyFrame_Bl@2

; 746  :         Py_FatalError("XXX block stack underflow");

  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@LGMLDJMK@XXX?5block?5stack?5underflow?$AA@
  00019	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyFrame_Bl@2:

; 747  :     b = &f->f_blockstack[--f->f_iblock];

  0001e	8b 83 d8 00 00
	00		 mov	 eax, DWORD PTR [rbx+216]
  00024	ff c8		 dec	 eax
  00026	89 83 d8 00 00
	00		 mov	 DWORD PTR [rbx+216], eax

; 748  :     return b;

  0002c	48 98		 cdqe
  0002e	48 8d 0c 40	 lea	 rcx, QWORD PTR [rax+rax*2]
  00032	48 8d 84 8b dc
	00 00 00	 lea	 rax, QWORD PTR [rbx+rcx*4+220]

; 749  : }

  0003a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003e	5b		 pop	 rbx
  0003f	c3		 ret	 0
PyFrame_BlockPop ENDP
_TEXT	ENDS
EXTRN	PyErr_Clear:PROC
EXTRN	PyObject_SetItem:PROC
EXTRN	PyObject_DelItem:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$map_to_dict DD imagerel map_to_dict
	DD	imagerel map_to_dict+31
	DD	imagerel $unwind$map_to_dict
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$map_to_dict DD imagerel map_to_dict+31
	DD	imagerel map_to_dict+116
	DD	imagerel $chain$1$map_to_dict
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$map_to_dict DD imagerel map_to_dict+116
	DD	imagerel map_to_dict+133
	DD	imagerel $chain$2$map_to_dict
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$map_to_dict DD 021H
	DD	imagerel map_to_dict
	DD	imagerel map_to_dict+31
	DD	imagerel $unwind$map_to_dict
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$map_to_dict DD 040a21H
	DD	07540aH
	DD	063405H
	DD	imagerel map_to_dict
	DD	imagerel map_to_dict+31
	DD	imagerel $unwind$map_to_dict
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$map_to_dict DD 061001H
	DD	097410H
	DD	086410H
	DD	0c00c3210H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT map_to_dict
_TEXT	SEGMENT
map$ = 48
nmap$ = 56
dict$ = 64
values$ = 72
deref$ = 80
map_to_dict PROC					; COMDAT

; 770  : {

  00000	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  00005	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0000a	41 54		 push	 r12
  0000c	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 771  :     Py_ssize_t j;
; 772  :     assert(PyTuple_Check(map));
; 773  :     assert(PyDict_Check(dict));
; 774  :     assert(PyTuple_Size(map) >= nmap);
; 775  :     for (j = nmap; --j >= 0; ) {

  00010	48 8d 7a ff	 lea	 rdi, QWORD PTR [rdx-1]
  00014	4d 8b e0	 mov	 r12, r8
  00017	48 8b f1	 mov	 rsi, rcx
  0001a	48 85 ff	 test	 rdi, rdi
  0001d	78 55		 js	 SHORT $LN6@map_to_dic
  0001f	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00024	48 89 6c 24 38	 mov	 QWORD PTR [rsp+56], rbp
  00029	8b 6c 24 50	 mov	 ebp, DWORD PTR deref$[rsp]
  0002d	49 8d 1c f9	 lea	 rbx, QWORD PTR [r9+rdi*8]
  00031	49 2b f1	 sub	 rsi, r9
$LL7@map_to_dic:

; 776  :         PyObject *key = PyTuple_GET_ITEM(map, j);

  00034	48 8b 54 1e 70	 mov	 rdx, QWORD PTR [rsi+rbx+112]

; 777  :         PyObject *value = values[j];

  00039	4c 8b 03	 mov	 r8, QWORD PTR [rbx]

; 778  :         assert(PyUnicode_Check(key));
; 779  :         if (deref) {

  0003c	85 ed		 test	 ebp, ebp
  0003e	74 04		 je	 SHORT $LN5@map_to_dic

; 780  :             assert(PyCell_Check(value));
; 781  :             value = PyCell_GET(value);

  00040	4d 8b 40 60	 mov	 r8, QWORD PTR [r8+96]
$LN5@map_to_dic:

; 782  :         }
; 783  :         if (value == NULL) {
; 784  :             if (PyObject_DelItem(dict, key) != 0)

  00044	49 8b cc	 mov	 rcx, r12
  00047	4d 85 c0	 test	 r8, r8
  0004a	75 07		 jne	 SHORT $LN4@map_to_dic
  0004c	e8 00 00 00 00	 call	 PyObject_DelItem

; 785  :                 PyErr_Clear();
; 786  :         }
; 787  :         else {

  00051	eb 05		 jmp	 SHORT $LN12@map_to_dic
$LN4@map_to_dic:

; 788  :             if (PyObject_SetItem(dict, key, value) != 0)

  00053	e8 00 00 00 00	 call	 PyObject_SetItem
$LN12@map_to_dic:
  00058	85 c0		 test	 eax, eax
  0005a	74 05		 je	 SHORT $LN1@map_to_dic

; 789  :                 PyErr_Clear();

  0005c	e8 00 00 00 00	 call	 PyErr_Clear
$LN1@map_to_dic:

; 771  :     Py_ssize_t j;
; 772  :     assert(PyTuple_Check(map));
; 773  :     assert(PyDict_Check(dict));
; 774  :     assert(PyTuple_Size(map) >= nmap);
; 775  :     for (j = nmap; --j >= 0; ) {

  00061	48 83 eb 08	 sub	 rbx, 8
  00065	48 ff cf	 dec	 rdi
  00068	79 ca		 jns	 SHORT $LL7@map_to_dic
  0006a	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0006f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
$LN6@map_to_dic:

; 790  :         }
; 791  :     }
; 792  : }

  00074	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00079	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  0007e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00082	41 5c		 pop	 r12
  00084	c3		 ret	 0
map_to_dict ENDP
_TEXT	ENDS
EXTRN	PyCell_Set:PROC
EXTRN	PyObject_GetItem:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$dict_to_map DD imagerel dict_to_map
	DD	imagerel dict_to_map+29
	DD	imagerel $unwind$dict_to_map
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$dict_to_map DD imagerel dict_to_map+29
	DD	imagerel dict_to_map+488
	DD	imagerel $chain$4$dict_to_map
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$dict_to_map DD imagerel dict_to_map+488
	DD	imagerel dict_to_map+498
	DD	imagerel $chain$5$dict_to_map
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$dict_to_map DD 021H
	DD	imagerel dict_to_map
	DD	imagerel dict_to_map+29
	DD	imagerel $unwind$dict_to_map
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$dict_to_map DD 0a2921H
	DD	0e7429H
	DD	06e41cH
	DD	07d40fH
	DD	0d640aH
	DD	0c3405H
	DD	imagerel dict_to_map
	DD	imagerel dict_to_map+29
	DD	imagerel $unwind$dict_to_map
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_to_map DD 040a01H
	DD	0f006720aH
	DD	05002c004H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\frameobject.c
xdata	ENDS
;	COMDAT dict_to_map
_TEXT	SEGMENT
map$ = 96
nmap$ = 104
dict$ = 112
values$ = 120
deref$ = 128
clear$ = 136
dict_to_map PROC					; COMDAT

; 818  : {

  00000	40 55		 push	 rbp
  00002	41 54		 push	 r12
  00004	41 57		 push	 r15
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 819  :     Py_ssize_t j;
; 820  :     assert(PyTuple_Check(map));
; 821  :     assert(PyDict_Check(dict));
; 822  :     assert(PyTuple_Size(map) >= nmap);
; 823  :     for (j = nmap; --j >= 0; ) {

  0000a	48 8d 6a ff	 lea	 rbp, QWORD PTR [rdx-1]
  0000e	4d 8b f8	 mov	 r15, r8
  00011	4c 8b e1	 mov	 r12, rcx
  00014	48 85 ed	 test	 rbp, rbp
  00017	0f 88 cb 01 00
	00		 js	 $LN20@dict_to_ma
  0001d	48 89 5c 24 60	 mov	 QWORD PTR [rsp+96], rbx
  00022	48 89 74 24 68	 mov	 QWORD PTR [rsp+104], rsi
  00027	4c 89 6c 24 38	 mov	 QWORD PTR [rsp+56], r13
  0002c	44 8b ac 24 88
	00 00 00	 mov	 r13d, DWORD PTR clear$[rsp]
  00034	4c 89 74 24 30	 mov	 QWORD PTR [rsp+48], r14
  00039	44 8b b4 24 80
	00 00 00	 mov	 r14d, DWORD PTR deref$[rsp]
  00041	48 89 7c 24 70	 mov	 QWORD PTR [rsp+112], rdi
  00046	49 8d 34 e9	 lea	 rsi, QWORD PTR [r9+rbp*8]
  0004a	4d 2b e1	 sub	 r12, r9
  0004d	0f 1f 00	 npad	 3
$LL21@dict_to_ma:

; 824  :         PyObject *key = PyTuple_GET_ITEM(map, j);
; 825  :         PyObject *value = PyObject_GetItem(dict, key);

  00050	49 8b 54 34 70	 mov	 rdx, QWORD PTR [r12+rsi+112]
  00055	49 8b cf	 mov	 rcx, r15
  00058	e8 00 00 00 00	 call	 PyObject_GetItem
  0005d	48 8b d8	 mov	 rbx, rax

; 826  :         assert(PyUnicode_Check(key));
; 827  :         /* We only care about NULLs if clear is true. */
; 828  :         if (value == NULL) {

  00060	48 85 c0	 test	 rax, rax
  00063	75 0e		 jne	 SHORT $LN18@dict_to_ma

; 829  :             PyErr_Clear();

  00065	e8 00 00 00 00	 call	 PyErr_Clear

; 830  :             if (!clear)

  0006a	45 85 ed	 test	 r13d, r13d
  0006d	0f 84 4f 01 00
	00		 je	 $LN3@dict_to_ma
$LN18@dict_to_ma:

; 831  :                 continue;
; 832  :         }
; 833  :         if (deref) {

  00073	45 85 f6	 test	 r14d, r14d
  00076	74 27		 je	 SHORT $LN17@dict_to_ma

; 834  :             assert(PyCell_Check(values[j]));
; 835  :             if (PyCell_GET(values[j]) != value) {

  00078	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  0007b	48 39 59 60	 cmp	 QWORD PTR [rcx+96], rbx
  0007f	0f 84 d3 00 00
	00		 je	 $LN4@dict_to_ma

; 836  :                 if (PyCell_Set(values[j], value) < 0)

  00085	48 8b d3	 mov	 rdx, rbx
  00088	e8 00 00 00 00	 call	 PyCell_Set
  0008d	85 c0		 test	 eax, eax
  0008f	0f 89 c3 00 00
	00		 jns	 $LN4@dict_to_ma

; 837  :                     PyErr_Clear();

  00095	e8 00 00 00 00	 call	 PyErr_Clear

; 838  :             }

  0009a	e9 b9 00 00 00	 jmp	 $LN4@dict_to_ma
$LN17@dict_to_ma:

; 839  :         } else if (values[j] != value) {

  0009f	48 39 1e	 cmp	 QWORD PTR [rsi], rbx
  000a2	0f 84 b0 00 00
	00		 je	 $LN4@dict_to_ma

; 840  :             Py_XINCREF(value);

  000a8	48 85 db	 test	 rbx, rbx
  000ab	74 3b		 je	 SHORT $LN11@dict_to_ma
  000ad	e8 00 00 00 00	 call	 _Py_PXCTX
  000b2	85 c0		 test	 eax, eax
  000b4	75 32		 jne	 SHORT $LN11@dict_to_ma
  000b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000c4	4c 8b cb	 mov	 r9, rbx
  000c7	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000cd	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000d5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000da	85 c0		 test	 eax, eax
  000dc	75 06		 jne	 SHORT $LN24@dict_to_ma
  000de	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000e2	74 04		 je	 SHORT $LN11@dict_to_ma
$LN24@dict_to_ma:
  000e4	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN11@dict_to_ma:

; 841  :             Py_XDECREF(values[j]);

  000e8	48 8b 3e	 mov	 rdi, QWORD PTR [rsi]
  000eb	48 85 ff	 test	 rdi, rdi
  000ee	74 65		 je	 SHORT $LN7@dict_to_ma
  000f0	e8 00 00 00 00	 call	 _Py_PXCTX
  000f5	85 c0		 test	 eax, eax
  000f7	75 5c		 jne	 SHORT $LN7@dict_to_ma
  000f9	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  000fd	a8 20		 test	 al, 32			; 00000020H
  000ff	75 4c		 jne	 SHORT $LN32@dict_to_ma
  00101	84 c0		 test	 al, al
  00103	78 48		 js	 SHORT $LN32@dict_to_ma
  00105	a8 02		 test	 al, 2
  00107	75 4c		 jne	 SHORT $LN7@dict_to_ma
  00109	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  0010d	75 46		 jne	 SHORT $LN7@dict_to_ma
  0010f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00116	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0011d	4c 8b cf	 mov	 r9, rdi
  00120	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00126	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0012e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00133	48 8b cf	 mov	 rcx, rdi
  00136	85 c0		 test	 eax, eax
  00138	74 07		 je	 SHORT $LN37@dict_to_ma
  0013a	e8 00 00 00 00	 call	 _Px_Dealloc
  0013f	eb 14		 jmp	 SHORT $LN7@dict_to_ma
$LN37@dict_to_ma:
  00141	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00145	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0014b	eb 08		 jmp	 SHORT $LN7@dict_to_ma
$LN32@dict_to_ma:
  0014d	48 8b cf	 mov	 rcx, rdi
  00150	e8 00 00 00 00	 call	 Px_DecRef
$LN7@dict_to_ma:

; 842  :             values[j] = value;

  00155	48 89 1e	 mov	 QWORD PTR [rsi], rbx
$LN4@dict_to_ma:

; 843  :         }
; 844  :         Py_XDECREF(value);

  00158	48 85 db	 test	 rbx, rbx
  0015b	74 65		 je	 SHORT $LN3@dict_to_ma
  0015d	e8 00 00 00 00	 call	 _Py_PXCTX
  00162	85 c0		 test	 eax, eax
  00164	75 5c		 jne	 SHORT $LN3@dict_to_ma
  00166	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0016a	a8 20		 test	 al, 32			; 00000020H
  0016c	75 4c		 jne	 SHORT $LN43@dict_to_ma
  0016e	84 c0		 test	 al, al
  00170	78 48		 js	 SHORT $LN43@dict_to_ma
  00172	a8 02		 test	 al, 2
  00174	75 4c		 jne	 SHORT $LN3@dict_to_ma
  00176	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0017a	75 46		 jne	 SHORT $LN3@dict_to_ma
  0017c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00183	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0018a	4c 8b cb	 mov	 r9, rbx
  0018d	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00193	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0019b	e8 00 00 00 00	 call	 _PyParallel_Guard
  001a0	48 8b cb	 mov	 rcx, rbx
  001a3	85 c0		 test	 eax, eax
  001a5	74 07		 je	 SHORT $LN48@dict_to_ma
  001a7	e8 00 00 00 00	 call	 _Px_Dealloc
  001ac	eb 14		 jmp	 SHORT $LN3@dict_to_ma
$LN48@dict_to_ma:
  001ae	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001b2	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001b8	eb 08		 jmp	 SHORT $LN3@dict_to_ma
$LN43@dict_to_ma:
  001ba	48 8b cb	 mov	 rcx, rbx
  001bd	e8 00 00 00 00	 call	 Px_DecRef
$LN3@dict_to_ma:

; 819  :     Py_ssize_t j;
; 820  :     assert(PyTuple_Check(map));
; 821  :     assert(PyDict_Check(dict));
; 822  :     assert(PyTuple_Size(map) >= nmap);
; 823  :     for (j = nmap; --j >= 0; ) {

  001c2	48 83 ee 08	 sub	 rsi, 8
  001c6	48 ff cd	 dec	 rbp
  001c9	0f 89 81 fe ff
	ff		 jns	 $LL21@dict_to_ma
  001cf	4c 8b 74 24 30	 mov	 r14, QWORD PTR [rsp+48]
  001d4	4c 8b 6c 24 38	 mov	 r13, QWORD PTR [rsp+56]
  001d9	48 8b 7c 24 70	 mov	 rdi, QWORD PTR [rsp+112]
  001de	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  001e3	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
$LN20@dict_to_ma:

; 845  :     }
; 846  : }

  001e8	48 83 c4 40	 add	 rsp, 64			; 00000040H
  001ec	41 5f		 pop	 r15
  001ee	41 5c		 pop	 r12
  001f0	5d		 pop	 rbp
  001f1	c3		 ret	 0
dict_to_map ENDP
_TEXT	ENDS
PUBLIC	PyFrame_FastToLocals
EXTRN	PyErr_Restore:PROC
EXTRN	PyErr_Fetch:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFrame_FastToLocals DD imagerel $LN16
	DD	imagerel $LN16+14
	DD	imagerel $unwind$PyFrame_FastToLocals
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyFrame_FastToLocals DD imagerel $LN16+14
	DD	imagerel $LN16+70
	DD	imagerel $chain$0$PyFrame_FastToLocals
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyFrame_FastToLocals DD imagerel $LN16+70
	DD	imagerel $LN16+126
	DD	imagerel $chain$4$PyFrame_FastToLocals
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$PyFrame_FastToLocals DD imagerel $LN16+126
	DD	imagerel $LN16+310
	DD	imagerel $chain$5$PyFrame_FastToLocals
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$PyFrame_FastToLocals DD imagerel $LN16+310
	DD	imagerel $LN16+330
	DD	imagerel $chain$6$PyFrame_FastToLocals
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$PyFrame_FastToLocals DD imagerel $LN16+330
	DD	imagerel $LN16+332
	DD	imagerel $chain$7$PyFrame_FastToLocals
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$PyFrame_FastToLocals DD 021H
	DD	imagerel $LN16
	DD	imagerel $LN16+14
	DD	imagerel $unwind$PyFrame_FastToLocals
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$PyFrame_FastToLocals DD 021H
	DD	imagerel $LN16+70
	DD	imagerel $LN16+126
	DD	imagerel $chain$4$PyFrame_FastToLocals
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$PyFrame_FastToLocals DD 020521H
	DD	06c405H
	DD	imagerel $LN16+70
	DD	imagerel $LN16+126
	DD	imagerel $chain$4$PyFrame_FastToLocals
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyFrame_FastToLocals DD 060a21H
	DD	07640aH
	DD	085405H
	DD	093400H
	DD	imagerel $LN16
	DD	imagerel $LN16+14
	DD	imagerel $unwind$PyFrame_FastToLocals
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyFrame_FastToLocals DD 020521H
	DD	093405H
	DD	imagerel $LN16
	DD	imagerel $LN16+14
	DD	imagerel $unwind$PyFrame_FastToLocals
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFrame_FastToLocals DD 020e01H
	DD	0700a920eH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyFrame_FastToLocals
_TEXT	SEGMENT
error_traceback$ = 96
f$ = 96
error_value$ = 104
error_type$ = 112
PyFrame_FastToLocals PROC				; COMDAT

; 850  : {

$LN16:

; 851  :     /* Merge fast locals into f->f_locals */
; 852  :     PyObject *locals, *map;
; 853  :     PyObject **fast;
; 854  :     PyObject *error_type, *error_value, *error_traceback;
; 855  :     PyCodeObject *co;
; 856  :     Py_ssize_t j;
; 857  :     int ncells, nfreevars;
; 858  :     if (f == NULL)

  00000	48 85 c9	 test	 rcx, rcx
  00003	0f 84 41 01 00
	00		 je	 $LN15@PyFrame_Fa
  00009	57		 push	 rdi
  0000a	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000e	48 89 5c 24 48	 mov	 QWORD PTR [rsp+72], rbx

; 859  :         return;
; 860  :     locals = f->f_locals;

  00013	48 8b 99 90 00
	00 00		 mov	 rbx, QWORD PTR [rcx+144]
  0001a	48 8b f9	 mov	 rdi, rcx

; 861  :     if (locals == NULL) {

  0001d	48 85 db	 test	 rbx, rbx
  00020	75 24		 jne	 SHORT $LN7@PyFrame_Fa

; 862  :         locals = f->f_locals = PyDict_New();

  00022	e8 00 00 00 00	 call	 PyDict_New
  00027	48 8b d8	 mov	 rbx, rax
  0002a	48 89 87 90 00
	00 00		 mov	 QWORD PTR [rdi+144], rax

; 863  :         if (locals == NULL) {

  00031	48 85 c0	 test	 rax, rax
  00034	75 10		 jne	 SHORT $LN7@PyFrame_Fa

; 864  :             PyErr_Clear(); /* Can't report it :-( */

  00036	e8 00 00 00 00	 call	 PyErr_Clear
  0003b	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]

; 898  : }

  00040	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00044	5f		 pop	 rdi
  00045	c3		 ret	 0
$LN7@PyFrame_Fa:
  00046	48 89 6c 24 40	 mov	 QWORD PTR [rsp+64], rbp
  0004b	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi

; 865  :             return;
; 866  :         }
; 867  :     }
; 868  :     co = f->f_code;

  00050	48 8b 77 78	 mov	 rsi, QWORD PTR [rdi+120]

; 869  :     map = co->co_varnames;

  00054	48 8b ae 90 00
	00 00		 mov	 rbp, QWORD PTR [rsi+144]

; 870  :     if (!PyTuple_Check(map))

  0005b	48 8b 45 58	 mov	 rax, QWORD PTR [rbp+88]
  0005f	f7 80 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rax+256], 67108864 ; 04000000H
  00069	0f 84 c7 00 00
	00		 je	 $LN14@PyFrame_Fa

; 871  :         return;
; 872  :     PyErr_Fetch(&error_type, &error_value, &error_traceback);

  0006f	4c 8d 44 24 60	 lea	 r8, QWORD PTR error_traceback$[rsp]
  00074	48 8d 54 24 68	 lea	 rdx, QWORD PTR error_value$[rsp]
  00079	48 8d 4c 24 70	 lea	 rcx, QWORD PTR error_type$[rsp]
  0007e	4c 89 64 24 30	 mov	 QWORD PTR [rsp+48], r12
  00083	e8 00 00 00 00	 call	 PyErr_Fetch

; 873  :     fast = f->f_localsplus;
; 874  :     j = PyTuple_GET_SIZE(map);
; 875  :     if (j > co->co_nlocals)

  00088	4c 63 46 68	 movsxd	 r8, DWORD PTR [rsi+104]
  0008c	48 8b 55 60	 mov	 rdx, QWORD PTR [rbp+96]
  00090	4c 8d a7 d0 01
	00 00		 lea	 r12, QWORD PTR [rdi+464]
  00097	49 3b d0	 cmp	 rdx, r8
  0009a	49 0f 4f d0	 cmovg	 rdx, r8

; 876  :         j = co->co_nlocals;
; 877  :     if (co->co_nlocals)

  0009e	45 85 c0	 test	 r8d, r8d
  000a1	74 16		 je	 SHORT $LN4@PyFrame_Fa

; 878  :         map_to_dict(map, j, locals, fast, 0);

  000a3	4d 8b cc	 mov	 r9, r12
  000a6	4c 8b c3	 mov	 r8, rbx
  000a9	48 8b cd	 mov	 rcx, rbp
  000ac	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  000b4	e8 00 00 00 00	 call	 map_to_dict
$LN4@PyFrame_Fa:

; 879  :     ncells = PyTuple_GET_SIZE(co->co_cellvars);

  000b9	48 8b 8e a0 00
	00 00		 mov	 rcx, QWORD PTR [rsi+160]

; 880  :     nfreevars = PyTuple_GET_SIZE(co->co_freevars);

  000c0	48 8b 86 98 00
	00 00		 mov	 rax, QWORD PTR [rsi+152]
  000c7	48 63 51 60	 movsxd	 rdx, DWORD PTR [rcx+96]
  000cb	48 63 78 60	 movsxd	 rdi, DWORD PTR [rax+96]

; 881  :     if (ncells || nfreevars) {

  000cf	85 d2		 test	 edx, edx
  000d1	75 04		 jne	 SHORT $LN2@PyFrame_Fa
  000d3	85 ff		 test	 edi, edi
  000d5	74 46		 je	 SHORT $LN1@PyFrame_Fa
$LN2@PyFrame_Fa:

; 882  :         map_to_dict(co->co_cellvars, ncells,
; 883  :                     locals, fast + co->co_nlocals, 1);

  000d7	48 63 46 68	 movsxd	 rax, DWORD PTR [rsi+104]
  000db	4c 8b c3	 mov	 r8, rbx
  000de	48 8b ea	 mov	 rbp, rdx
  000e1	4d 8d 0c c4	 lea	 r9, QWORD PTR [r12+rax*8]
  000e5	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  000ed	e8 00 00 00 00	 call	 map_to_dict

; 884  :         /* If the namespace is unoptimized, then one of the
; 885  :            following cases applies:
; 886  :            1. It does not contain free variables, because it
; 887  :               uses import * or is a top-level namespace.
; 888  :            2. It is a class namespace.
; 889  :            We don't want to accidentally copy free variables
; 890  :            into the locals dict used by the class.
; 891  :         */
; 892  :         if (co->co_flags & CO_OPTIMIZED) {

  000f2	f6 46 70 01	 test	 BYTE PTR [rsi+112], 1
  000f6	74 25		 je	 SHORT $LN1@PyFrame_Fa

; 893  :             map_to_dict(co->co_freevars, nfreevars,
; 894  :                         locals, fast + co->co_nlocals + ncells, 1);

  000f8	48 63 46 68	 movsxd	 rax, DWORD PTR [rsi+104]
  000fc	48 8b 8e 98 00
	00 00		 mov	 rcx, QWORD PTR [rsi+152]
  00103	48 8b d7	 mov	 rdx, rdi
  00106	48 03 c5	 add	 rax, rbp
  00109	4c 8b c3	 mov	 r8, rbx
  0010c	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  00114	4d 8d 0c c4	 lea	 r9, QWORD PTR [r12+rax*8]
  00118	e8 00 00 00 00	 call	 map_to_dict
$LN1@PyFrame_Fa:

; 895  :         }
; 896  :     }
; 897  :     PyErr_Restore(error_type, error_value, error_traceback);

  0011d	4c 8b 44 24 60	 mov	 r8, QWORD PTR error_traceback$[rsp]
  00122	48 8b 54 24 68	 mov	 rdx, QWORD PTR error_value$[rsp]
  00127	48 8b 4c 24 70	 mov	 rcx, QWORD PTR error_type$[rsp]
  0012c	e8 00 00 00 00	 call	 PyErr_Restore
  00131	4c 8b 64 24 30	 mov	 r12, QWORD PTR [rsp+48]
$LN14@PyFrame_Fa:
  00136	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  0013b	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00140	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]

; 898  : }

  00145	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00149	5f		 pop	 rdi
$LN15@PyFrame_Fa:
  0014a	f3 c3		 fatret	 0
PyFrame_FastToLocals ENDP
_TEXT	ENDS
PUBLIC	PyFrame_LocalsToFast
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFrame_LocalsToFast DD imagerel $LN15
	DD	imagerel $LN15+19
	DD	imagerel $unwind$PyFrame_LocalsToFast
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyFrame_LocalsToFast DD imagerel $LN15+19
	DD	imagerel $LN15+96
	DD	imagerel $chain$2$PyFrame_LocalsToFast
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyFrame_LocalsToFast DD imagerel $LN15+96
	DD	imagerel $LN15+299
	DD	imagerel $chain$3$PyFrame_LocalsToFast
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyFrame_LocalsToFast DD imagerel $LN15+299
	DD	imagerel $LN15+321
	DD	imagerel $chain$4$PyFrame_LocalsToFast
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$PyFrame_LocalsToFast DD imagerel $LN15+321
	DD	imagerel $LN15+323
	DD	imagerel $chain$5$PyFrame_LocalsToFast
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$PyFrame_LocalsToFast DD 021H
	DD	imagerel $LN15
	DD	imagerel $LN15+19
	DD	imagerel $unwind$PyFrame_LocalsToFast
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyFrame_LocalsToFast DD 021H
	DD	imagerel $LN15+19
	DD	imagerel $LN15+96
	DD	imagerel $chain$2$PyFrame_LocalsToFast
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyFrame_LocalsToFast DD 020421H
	DD	06d404H
	DD	imagerel $LN15+19
	DD	imagerel $LN15+96
	DD	imagerel $chain$2$PyFrame_LocalsToFast
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyFrame_LocalsToFast DD 061721H
	DD	076417H
	DD	08540cH
	DD	0d3404H
	DD	imagerel $LN15
	DD	imagerel $LN15+19
	DD	imagerel $unwind$PyFrame_LocalsToFast
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFrame_LocalsToFast DD 031301H
	DD	0c00f8213H
	DD	0700dH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyFrame_LocalsToFast
_TEXT	SEGMENT
error_traceback$ = 96
f$ = 96
clear$ = 104
error_value$ = 112
error_type$ = 120
PyFrame_LocalsToFast PROC				; COMDAT

; 902  : {

$LN15:

; 903  :     /* Merge f->f_locals into fast locals */
; 904  :     PyObject *locals, *map;
; 905  :     PyObject **fast;
; 906  :     PyObject *error_type, *error_value, *error_traceback;
; 907  :     PyCodeObject *co;
; 908  :     Py_ssize_t j;
; 909  :     int ncells, nfreevars;
; 910  :     if (f == NULL)

  00000	48 85 c9	 test	 rcx, rcx
  00003	0f 84 38 01 00
	00		 je	 $LN14@PyFrame_Lo
  00009	4c 8b dc	 mov	 r11, rsp
  0000c	57		 push	 rdi
  0000d	41 54		 push	 r12
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00013	49 89 5b 10	 mov	 QWORD PTR [r11+16], rbx

; 911  :         return;
; 912  :     locals = f->f_locals;
; 913  :     co = f->f_code;

  00017	48 8b 59 78	 mov	 rbx, QWORD PTR [rcx+120]
  0001b	49 89 6b e8	 mov	 QWORD PTR [r11-24], rbp

; 914  :     map = co->co_varnames;

  0001f	48 8b ab 90 00
	00 00		 mov	 rbp, QWORD PTR [rbx+144]
  00026	49 89 73 e0	 mov	 QWORD PTR [r11-32], rsi
  0002a	48 8b b1 90 00
	00 00		 mov	 rsi, QWORD PTR [rcx+144]
  00031	44 8b e2	 mov	 r12d, edx
  00034	48 8b f9	 mov	 rdi, rcx

; 915  :     if (locals == NULL)

  00037	48 85 f6	 test	 rsi, rsi
  0003a	0f 84 eb 00 00
	00		 je	 $LN13@PyFrame_Lo

; 916  :         return;
; 917  :     if (!PyTuple_Check(map))

  00040	48 8b 45 58	 mov	 rax, QWORD PTR [rbp+88]
  00044	f7 80 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rax+256], 67108864 ; 04000000H
  0004e	0f 84 d7 00 00
	00		 je	 $LN13@PyFrame_Lo

; 918  :         return;
; 919  :     PyErr_Fetch(&error_type, &error_value, &error_traceback);

  00054	4d 8d 43 08	 lea	 r8, QWORD PTR [r11+8]
  00058	49 8d 53 18	 lea	 rdx, QWORD PTR [r11+24]
  0005c	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  00060	4d 89 6b d8	 mov	 QWORD PTR [r11-40], r13
  00064	e8 00 00 00 00	 call	 PyErr_Fetch

; 920  :     fast = f->f_localsplus;
; 921  :     j = PyTuple_GET_SIZE(map);
; 922  :     if (j > co->co_nlocals)

  00069	48 63 4b 68	 movsxd	 rcx, DWORD PTR [rbx+104]
  0006d	48 8b 55 60	 mov	 rdx, QWORD PTR [rbp+96]
  00071	4c 8d af d0 01
	00 00		 lea	 r13, QWORD PTR [rdi+464]
  00078	48 3b d1	 cmp	 rdx, rcx
  0007b	48 0f 4f d1	 cmovg	 rdx, rcx

; 923  :         j = co->co_nlocals;
; 924  :     if (co->co_nlocals)

  0007f	85 c9		 test	 ecx, ecx
  00081	74 1f		 je	 SHORT $LN4@PyFrame_Lo

; 925  :         dict_to_map(co->co_varnames, j, locals, fast, 0, clear);

  00083	48 8b 8b 90 00
	00 00		 mov	 rcx, QWORD PTR [rbx+144]
  0008a	4d 8b cd	 mov	 r9, r13
  0008d	4c 8b c6	 mov	 r8, rsi
  00090	44 89 64 24 28	 mov	 DWORD PTR [rsp+40], r12d
  00095	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  0009d	e8 00 00 00 00	 call	 dict_to_map
$LN4@PyFrame_Lo:

; 926  :     ncells = PyTuple_GET_SIZE(co->co_cellvars);

  000a2	48 8b 8b a0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+160]

; 927  :     nfreevars = PyTuple_GET_SIZE(co->co_freevars);

  000a9	48 8b 83 98 00
	00 00		 mov	 rax, QWORD PTR [rbx+152]
  000b0	48 63 51 60	 movsxd	 rdx, DWORD PTR [rcx+96]
  000b4	48 63 78 60	 movsxd	 rdi, DWORD PTR [rax+96]

; 928  :     if (ncells || nfreevars) {

  000b8	85 d2		 test	 edx, edx
  000ba	75 04		 jne	 SHORT $LN2@PyFrame_Lo
  000bc	85 ff		 test	 edi, edi
  000be	74 52		 je	 SHORT $LN1@PyFrame_Lo
$LN2@PyFrame_Lo:

; 929  :         dict_to_map(co->co_cellvars, ncells,
; 930  :                     locals, fast + co->co_nlocals, 1, clear);

  000c0	48 63 43 68	 movsxd	 rax, DWORD PTR [rbx+104]
  000c4	4c 8b c6	 mov	 r8, rsi
  000c7	44 89 64 24 28	 mov	 DWORD PTR [rsp+40], r12d
  000cc	4d 8d 4c c5 00	 lea	 r9, QWORD PTR [r13+rax*8]
  000d1	48 8b ea	 mov	 rbp, rdx
  000d4	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  000dc	e8 00 00 00 00	 call	 dict_to_map

; 931  :         /* Same test as in PyFrame_FastToLocals() above. */
; 932  :         if (co->co_flags & CO_OPTIMIZED) {

  000e1	f6 43 70 01	 test	 BYTE PTR [rbx+112], 1
  000e5	74 2b		 je	 SHORT $LN1@PyFrame_Lo

; 933  :             dict_to_map(co->co_freevars, nfreevars,
; 934  :                 locals, fast + co->co_nlocals + ncells, 1,
; 935  :                 clear);

  000e7	48 63 43 68	 movsxd	 rax, DWORD PTR [rbx+104]
  000eb	48 8b 8b 98 00
	00 00		 mov	 rcx, QWORD PTR [rbx+152]
  000f2	48 8b d7	 mov	 rdx, rdi
  000f5	48 03 c5	 add	 rax, rbp
  000f8	4c 8b c6	 mov	 r8, rsi
  000fb	44 89 64 24 28	 mov	 DWORD PTR [rsp+40], r12d
  00100	4d 8d 4c c5 00	 lea	 r9, QWORD PTR [r13+rax*8]
  00105	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  0010d	e8 00 00 00 00	 call	 dict_to_map
$LN1@PyFrame_Lo:

; 936  :         }
; 937  :     }
; 938  :     PyErr_Restore(error_type, error_value, error_traceback);

  00112	4c 8b 44 24 60	 mov	 r8, QWORD PTR error_traceback$[rsp]
  00117	48 8b 54 24 70	 mov	 rdx, QWORD PTR error_value$[rsp]
  0011c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR error_type$[rsp]
  00121	e8 00 00 00 00	 call	 PyErr_Restore
  00126	4c 8b 6c 24 30	 mov	 r13, QWORD PTR [rsp+48]
$LN13@PyFrame_Lo:
  0012b	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00130	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  00135	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]

; 939  : }

  0013a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0013e	41 5c		 pop	 r12
  00140	5f		 pop	 rdi
$LN14@PyFrame_Lo:
  00141	f3 c3		 fatret	 0
PyFrame_LocalsToFast ENDP
_TEXT	ENDS
PUBLIC	PyFrame_ClearFreeList
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFrame_ClearFreeList DD imagerel $LN8
	DD	imagerel $LN8+90
	DD	imagerel $unwind$PyFrame_ClearFreeList
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFrame_ClearFreeList DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyFrame_ClearFreeList
_TEXT	SEGMENT
PyFrame_ClearFreeList PROC				; COMDAT

; 944  : {

$LN8:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 945  :     int freelist_size = numfree;

  00006	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR numfree

; 946  :     if (Py_PXCTX)

  0000c	e8 00 00 00 00	 call	 _Py_PXCTX
  00011	85 c0		 test	 eax, eax
  00013	74 08		 je	 SHORT $LN6@PyFrame_Cl

; 947  :         return 0;

  00015	33 c0		 xor	 eax, eax

; 956  : }

  00017	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001b	5b		 pop	 rbx
  0001c	c3		 ret	 0
$LN6@PyFrame_Cl:

; 948  :     while (free_list != NULL) {

  0001d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR free_list
  00024	48 85 c9	 test	 rcx, rcx
  00027	74 29		 je	 SHORT $LN1@PyFrame_Cl
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@PyFrame_Cl:

; 949  :         PyFrameObject *f = free_list;
; 950  :         free_list = free_list->f_back;

  00030	48 8b 51 70	 mov	 rdx, QWORD PTR [rcx+112]
  00034	48 89 15 00 00
	00 00		 mov	 QWORD PTR free_list, rdx

; 951  :         PyObject_GC_Del(f);

  0003b	e8 00 00 00 00	 call	 PyObject_GC_Del
  00040	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR free_list

; 952  :         --numfree;

  00047	ff 0d 00 00 00
	00		 dec	 DWORD PTR numfree
  0004d	48 85 c9	 test	 rcx, rcx
  00050	75 de		 jne	 SHORT $LL2@PyFrame_Cl
$LN1@PyFrame_Cl:

; 953  :     }
; 954  :     assert(numfree == 0);
; 955  :     return freelist_size;

  00052	8b c3		 mov	 eax, ebx

; 956  : }

  00054	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00058	5b		 pop	 rbx
  00059	c3		 ret	 0
PyFrame_ClearFreeList ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@MPOIGJCJ@PyFrame_Fini?$AA@		; `string'
PUBLIC	PyFrame_Fini
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyFrame_Fini DD imagerel $LN19
	DD	imagerel $LN19+66
	DD	imagerel $unwind$PyFrame_Fini
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyFrame_Fini DD imagerel $LN19+66
	DD	imagerel $LN19+177
	DD	imagerel $chain$0$PyFrame_Fini
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyFrame_Fini DD imagerel $LN19+177
	DD	imagerel $LN19+197
	DD	imagerel $chain$2$PyFrame_Fini
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyFrame_Fini DD imagerel $LN19+197
	DD	imagerel $LN19+210
	DD	imagerel $chain$4$PyFrame_Fini
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$PyFrame_Fini DD imagerel $LN19+210
	DD	imagerel $LN19+215
	DD	imagerel $chain$5$PyFrame_Fini
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$PyFrame_Fini DD 021H
	DD	imagerel $LN19
	DD	imagerel $LN19+66
	DD	imagerel $unwind$PyFrame_Fini
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyFrame_Fini DD 020021H
	DD	063400H
	DD	imagerel $LN19
	DD	imagerel $LN19+66
	DD	imagerel $unwind$PyFrame_Fini
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyFrame_Fini DD 020021H
	DD	063400H
	DD	imagerel $LN19
	DD	imagerel $LN19+66
	DD	imagerel $unwind$PyFrame_Fini
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyFrame_Fini DD 020521H
	DD	063405H
	DD	imagerel $LN19
	DD	imagerel $LN19+66
	DD	imagerel $unwind$PyFrame_Fini
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFrame_Fini DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0N@MPOIGJCJ@PyFrame_Fini?$AA@
CONST	SEGMENT
??_C@_0N@MPOIGJCJ@PyFrame_Fini?$AA@ DB 'PyFrame_Fini', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\frameobject.c
CONST	ENDS
;	COMDAT PyFrame_Fini
_TEXT	SEGMENT
PyFrame_Fini PROC					; COMDAT

; 960  : {

$LN19:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 961  :     (void)PyFrame_ClearFreeList();

  00004	e8 00 00 00 00	 call	 PyFrame_ClearFreeList

; 962  :     Py_CLEAR(builtin_object);

  00009	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR builtin_object
  00010	4d 85 c9	 test	 r9, r9
  00013	0f 84 b9 00 00
	00		 je	 $LN3@PyFrame_Fi
  00019	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@MPOIGJCJ@PyFrame_Fini?$AA@
  00027	41 b8 c2 03 00
	00		 mov	 r8d, 962		; 000003c2H
  0002d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00035	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003a	85 c0		 test	 eax, eax
  0003c	0f 85 90 00 00
	00		 jne	 $LN3@PyFrame_Fi
  00042	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00047	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR builtin_object
  0004e	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR builtin_object, 0
  00059	e8 00 00 00 00	 call	 _Py_PXCTX
  0005e	85 c0		 test	 eax, eax
  00060	75 6b		 jne	 SHORT $LN18@PyFrame_Fi
  00062	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00066	a8 20		 test	 al, 32			; 00000020H
  00068	75 5b		 jne	 SHORT $LN11@PyFrame_Fi
  0006a	84 c0		 test	 al, al
  0006c	78 57		 js	 SHORT $LN11@PyFrame_Fi
  0006e	a8 02		 test	 al, 2
  00070	75 5b		 jne	 SHORT $LN18@PyFrame_Fi
  00072	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00076	75 55		 jne	 SHORT $LN18@PyFrame_Fi
  00078	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0007f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00086	4c 8b cb	 mov	 r9, rbx
  00089	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0008f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00097	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009c	48 8b cb	 mov	 rcx, rbx
  0009f	85 c0		 test	 eax, eax
  000a1	74 0e		 je	 SHORT $LN16@PyFrame_Fi
  000a3	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 963  : }

  000a8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ac	e9 00 00 00 00	 jmp	 _Px_Dealloc

; 962  :     Py_CLEAR(builtin_object);

$LN16@PyFrame_Fi:
  000b1	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000b5	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 963  : }

  000ba	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000be	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]

; 962  :     Py_CLEAR(builtin_object);

$LN11@PyFrame_Fi:
  000c5	48 8b cb	 mov	 rcx, rbx
  000c8	e8 00 00 00 00	 call	 Px_DecRef
$LN18@PyFrame_Fi:
  000cd	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
$LN3@PyFrame_Fi:

; 963  : }

  000d2	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d6	c3		 ret	 0
PyFrame_Fini ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@BCDCGENP@free?5PyFrameObject?$AA@	; `string'
PUBLIC	_PyFrame_DebugMallocStats
EXTRN	_PyDebugAllocatorStats:PROC
;	COMDAT ??_C@_0BD@BCDCGENP@free?5PyFrameObject?$AA@
CONST	SEGMENT
??_C@_0BD@BCDCGENP@free?5PyFrameObject?$AA@ DB 'free PyFrameObject', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyFrame_DebugMallocStats
_TEXT	SEGMENT
out$ = 8
_PyFrame_DebugMallocStats PROC				; COMDAT

; 969  :     _PyDebugAllocatorStats(out,
; 970  :                            "free PyFrameObject",
; 971  :                            numfree, sizeof(PyFrameObject));

  00000	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR numfree
  00007	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BCDCGENP@free?5PyFrameObject?$AA@
  0000e	41 b9 e0 01 00
	00		 mov	 r9d, 480		; 000001e0H

; 972  : }

  00014	e9 00 00 00 00	 jmp	 _PyDebugAllocatorStats
_PyFrame_DebugMallocStats ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$frame_getlocals DD imagerel frame_getlocals
	DD	imagerel frame_getlocals+102
	DD	imagerel $unwind$frame_getlocals
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$frame_getlocals DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\frameobject.c
xdata	ENDS
;	COMDAT frame_getlocals
_TEXT	SEGMENT
f$ = 64
closure$ = 72
frame_getlocals PROC					; COMDAT

; 28   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b d9	 mov	 rbx, rcx

; 29   :     PyFrame_FastToLocals(f);

  0000d	e8 00 00 00 00	 call	 PyFrame_FastToLocals

; 30   :     Py_INCREF(f->f_locals);

  00012	48 8b bb 90 00
	00 00		 mov	 rdi, QWORD PTR [rbx+144]
  00019	e8 00 00 00 00	 call	 _Py_PXCTX
  0001e	85 c0		 test	 eax, eax
  00020	75 32		 jne	 SHORT $LN7@frame_getl
  00022	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00030	4c 8b cf	 mov	 r9, rdi
  00033	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00039	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00041	e8 00 00 00 00	 call	 _PyParallel_Guard
  00046	85 c0		 test	 eax, eax
  00048	75 06		 jne	 SHORT $LN3@frame_getl
  0004a	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  0004e	74 04		 je	 SHORT $LN7@frame_getl
$LN3@frame_getl:
  00050	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN7@frame_getl:

; 31   :     return f->f_locals;

  00054	48 8b 83 90 00
	00 00		 mov	 rax, QWORD PTR [rbx+144]

; 32   : }

  0005b	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00060	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00064	5f		 pop	 rdi
  00065	c3		 ret	 0
frame_getlocals ENDP
_TEXT	ENDS
END
