; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@GNMDLNAP@tuple_iterator?$AA@		; `string'
PUBLIC	??_C@_0N@MOOGCAMH@__setstate__?$AA@		; `string'
PUBLIC	??_C@_0L@NNMACJIG@__reduce__?$AA@		; `string'
PUBLIC	??_C@_0BA@BJLPBKGK@__length_hint__?$AA@		; `string'
PUBLIC	??_C@_05NNMEHDAO@tuple?$AA@			; `string'
PUBLIC	??_C@_05IOMEMJEC@count?$AA@			; `string'
PUBLIC	??_C@_05FKHKFDID@index?$AA@			; `string'
PUBLIC	??_C@_0L@HOGGIPGN@__sizeof__?$AA@		; `string'
PUBLIC	??_C@_0P@BCBHENLA@__getnewargs__?$AA@		; `string'
PUBLIC	??_C@_08IBBDGPOF@sequence?$AA@			; `string'
PUBLIC	PyTuple_Type
PUBLIC	PyTupleIter_Type
EXTRN	PyObject_SelfIter:PROC
EXTRN	PyObject_GC_Del:PROC
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
_BSS	SEGMENT
?sep@?1??tuplerepr@@9@9 DQ 01H DUP (?)			; `tuplerepr'::`2'::sep
_BSS	ENDS
;	COMDAT ??_C@_0P@GNMDLNAP@tuple_iterator?$AA@
CONST	SEGMENT
??_C@_0P@GNMDLNAP@tuple_iterator?$AA@ DB 'tuple_iterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MOOGCAMH@__setstate__?$AA@
CONST	SEGMENT
??_C@_0N@MOOGCAMH@__setstate__?$AA@ DB '__setstate__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNMACJIG@__reduce__?$AA@
CONST	SEGMENT
??_C@_0L@NNMACJIG@__reduce__?$AA@ DB '__reduce__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BJLPBKGK@__length_hint__?$AA@
CONST	SEGMENT
??_C@_0BA@BJLPBKGK@__length_hint__?$AA@ DB '__length_hint__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05NNMEHDAO@tuple?$AA@
CONST	SEGMENT
??_C@_05NNMEHDAO@tuple?$AA@ DB 'tuple', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IOMEMJEC@count?$AA@
CONST	SEGMENT
??_C@_05IOMEMJEC@count?$AA@ DB 'count', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FKHKFDID@index?$AA@
CONST	SEGMENT
??_C@_05FKHKFDID@index?$AA@ DB 'index', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HOGGIPGN@__sizeof__?$AA@
CONST	SEGMENT
??_C@_0L@HOGGIPGN@__sizeof__?$AA@ DB '__sizeof__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BCBHENLA@__getnewargs__?$AA@
CONST	SEGMENT
??_C@_0P@BCBHENLA@__getnewargs__?$AA@ DB '__getnewargs__', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
?kwlist@?1??tuple_new@@9@9 DQ FLAT:??_C@_08IBBDGPOF@sequence?$AA@ ; `tuple_new'::`2'::kwlist
	DQ	0000000000000000H
tuple_doc DB	'tuple() -> empty tuple', 0aH, 'tuple(iterable) -> tuple '
	DB	'initialized from iterable''s items', 0aH, 0aH, 'If the argume'
	DB	'nt is a tuple, the return value is the same object.', 00H
	ORG $+12
tuple_as_sequence DQ FLAT:tuplelength
	DQ	FLAT:tupleconcat
	DQ	FLAT:tuplerepeat
	DQ	FLAT:tupleitem
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:tuplecontains
	ORG $+16
index_doc DB	'T.index(value, [start, [stop]]) -> integer -- return fir'
	DB	'st index of value.', 0aH, 'Raises ValueError if the value is '
	DB	'not present.', 00H
	ORG $+6
count_doc DB	'T.count(value) -> integer -- return number of occurrence'
	DB	's of value', 00H
	ORG $+5
sizeof_doc DB	'T.__sizeof__() -- size of T in memory, in bytes', 00H
	ORG $+8
tuple_methods DQ FLAT:??_C@_0P@BCBHENLA@__getnewargs__?$AA@
	DQ	FLAT:tuple_getnewargs
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0L@HOGGIPGN@__sizeof__?$AA@
	DQ	FLAT:tuple_sizeof
	DD	04H
	ORG $+4
	DQ	FLAT:sizeof_doc
	DQ	FLAT:??_C@_05FKHKFDID@index?$AA@
	DQ	FLAT:tupleindex
	DD	01H
	ORG $+4
	DQ	FLAT:index_doc
	DQ	FLAT:??_C@_05IOMEMJEC@count?$AA@
	DQ	FLAT:tuplecount
	DD	08H
	ORG $+4
	DQ	FLAT:count_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
tuple_as_mapping DQ FLAT:tuplelength
	DQ	FLAT:tuplesubscript
	DQ	0000000000000000H
	ORG $+8
PyTuple_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_05NNMEHDAO@tuple?$AA@
	DQ	0000000000000078H
	DQ	0000000000000008H
	DQ	FLAT:tupledealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:tuplerepr
	DQ	0000000000000000H
	DQ	FLAT:tuple_as_sequence
	DQ	FLAT:tuple_as_mapping
	DQ	FLAT:tuplehash
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	04044400H
	ORG $+4
	DQ	FLAT:tuple_doc
	DQ	FLAT:tupletraverse
	DQ	0000000000000000H
	DQ	FLAT:tuplerichcompare
	DQ	0000000000000000H
	DQ	FLAT:tuple_iter
	DQ	0000000000000000H
	DQ	FLAT:tuple_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:tuple_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
length_hint_doc DB 'Private method returning an estimate of len(list(it))'
	DB	'.', 00H
	ORG $+1
reduce_doc DB	'Return state information for pickling.', 00H
	ORG $+1
setstate_doc DB	'Set state information for unpickling.', 00H
	ORG $+10
tupleiter_methods DQ FLAT:??_C@_0BA@BJLPBKGK@__length_hint__?$AA@
	DQ	FLAT:tupleiter_len
	DD	04H
	ORG $+4
	DQ	FLAT:length_hint_doc
	DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:tupleiter_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	FLAT:??_C@_0N@MOOGCAMH@__setstate__?$AA@
	DQ	FLAT:tupleiter_setstate
	DD	08H
	ORG $+4
	DQ	FLAT:setstate_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PyTupleIter_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0P@GNMDLNAP@tuple_iterator?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:tupleiter_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:tupleiter_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:tupleiter_next
	DQ	FLAT:tupleiter_methods
	DQ	0000000000000000H
	ORG $+144
_DATA	ENDS
;	COMDAT ??_C@_08IBBDGPOF@sequence?$AA@
CONST	SEGMENT
??_C@_08IBBDGPOF@sequence?$AA@ DB 'sequence', 00H	; `string'
CONST	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@HFBINLOF@__PyObject_GC_RESIZE?$AA@	; `string'
PUBLIC	??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@ ; `string'
EXTRN	_PyObject_GC_Resize:PROC
EXTRN	_PxObject_Resize:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\objimpl.h
pdata	SEGMENT
$pdata$__PyObject_GC_RESIZE DD imagerel __PyObject_GC_RESIZE
	DD	imagerel __PyObject_GC_RESIZE+92
	DD	imagerel $unwind$__PyObject_GC_RESIZE
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__PyObject_GC_RESIZE DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0BF@HFBINLOF@__PyObject_GC_RESIZE?$AA@
CONST	SEGMENT
??_C@_0BF@HFBINLOF@__PyObject_GC_RESIZE?$AA@ DB '__PyObject_GC_RESIZE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@
CONST	SEGMENT
??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@ DB 'c:\src\pypa'
	DB	'rallel\include\objimpl.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __PyObject_GC_RESIZE
_TEXT	SEGMENT
op$ = 64
nitems$ = 72
__PyObject_GC_RESIZE PROC				; COMDAT

; 372  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fa	 mov	 rdi, rdx
  0000d	48 8b d9	 mov	 rbx, rcx

; 373  :     if (Py_ISPX(op))

  00010	4c 8b c9	 mov	 r9, rcx
  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@
  0001a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@HFBINLOF@__PyObject_GC_RESIZE?$AA@
  00021	41 b8 75 01 00
	00		 mov	 r8d, 373		; 00000175H
  00027	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0002f	e8 00 00 00 00	 call	 _PyParallel_Guard

; 374  :         return _PxObject_Resize(op, nitems);

  00034	48 8b d7	 mov	 rdx, rdi
  00037	48 8b cb	 mov	 rcx, rbx
  0003a	85 c0		 test	 eax, eax
  0003c	74 0f		 je	 SHORT $LN2@PyObject_G

; 375  :     else
; 376  :         return _PyObject_GC_Resize(op, nitems);
; 377  : }

  0003e	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00043	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00047	5f		 pop	 rdi
  00048	e9 00 00 00 00	 jmp	 _PxObject_Resize
$LN2@PyObject_G:
  0004d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00052	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00056	5f		 pop	 rdi
  00057	e9 00 00 00 00	 jmp	 _PyObject_GC_Resize
__PyObject_GC_RESIZE ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@JCBEKPGK@free?5?$CFd?9sized?5PyTupleObject?$AA@ ; `string'
PUBLIC	_PyTuple_DebugMallocStats
EXTRN	_PyDebugAllocatorStats:PROC
EXTRN	PyOS_snprintf:PROC
_BSS	SEGMENT
numfree	DD	014H DUP (?)
_BSS	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\objects\tupleobject.c
pdata	SEGMENT
$pdata$_PyTuple_DebugMallocStats DD imagerel $LN8
	DD	imagerel $LN8+155
	DD	imagerel $unwind$_PyTuple_DebugMallocStats
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyTuple_DebugMallocStats DD 091701H
	DD	0186417H
	DD	0175417H
	DD	0163417H
	DD	0140117H
	DD	07010H
xdata	ENDS
;	COMDAT ??_C@_0BM@JCBEKPGK@free?5?$CFd?9sized?5PyTupleObject?$AA@
CONST	SEGMENT
??_C@_0BM@JCBEKPGK@free?5?$CFd?9sized?5PyTupleObject?$AA@ DB 'free %d-siz'
	DB	'ed PyTupleObject', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyTuple_DebugMallocStats
_TEXT	SEGMENT
buf$ = 32
out$ = 176
_PyTuple_DebugMallocStats PROC				; COMDAT

; 51   : {

$LN8:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H

; 52   : #if PyTuple_MAXSAVESIZE > 0
; 53   :     int i;
; 54   :     char buf[128];
; 55   :     for (i = 1; i < PyTuple_MAXSAVESIZE; i++) {

  00017	bb 01 00 00 00	 mov	 ebx, 1
  0001c	48 8b e9	 mov	 rbp, rcx
  0001f	48 8d 35 04 00
	00 00		 lea	 rsi, OFFSET FLAT:numfree+4
  00026	8b fb		 mov	 edi, ebx
  00028	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL3@PyTuple_De:

; 56   :         PyOS_snprintf(buf, sizeof(buf),
; 57   :                       "free %d-sized PyTupleObject", i);

  00030	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BM@JCBEKPGK@free?5?$CFd?9sized?5PyTupleObject?$AA@
  00037	48 8d 4c 24 20	 lea	 rcx, QWORD PTR buf$[rsp]
  0003c	44 8b cb	 mov	 r9d, ebx
  0003f	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00044	e8 00 00 00 00	 call	 PyOS_snprintf

; 58   :         _PyDebugAllocatorStats(out,
; 59   :                                buf,
; 60   :                                numfree[i], _PyObject_VAR_SIZE(&PyTuple_Type, i));

  00049	48 8b 05 78 00
	00 00		 mov	 rax, QWORD PTR PyTuple_Type+120
  00050	44 8b 06	 mov	 r8d, DWORD PTR [rsi]
  00053	4c 8b df	 mov	 r11, rdi
  00056	48 8d 54 24 20	 lea	 rdx, QWORD PTR buf$[rsp]
  0005b	48 8b cd	 mov	 rcx, rbp
  0005e	4c 0f af 1d 80
	00 00 00	 imul	 r11, QWORD PTR PyTuple_Type+128
  00066	4d 8d 4c 03 07	 lea	 r9, QWORD PTR [r11+rax+7]
  0006b	49 83 e1 f8	 and	 r9, -8
  0006f	e8 00 00 00 00	 call	 _PyDebugAllocatorStats
  00074	ff c3		 inc	 ebx
  00076	48 ff c7	 inc	 rdi
  00079	48 83 c6 04	 add	 rsi, 4
  0007d	83 fb 14	 cmp	 ebx, 20
  00080	7c ae		 jl	 SHORT $LL3@PyTuple_De

; 61   :     }
; 62   : #endif
; 63   : }

  00082	4c 8d 9c 24 a0
	00 00 00	 lea	 r11, QWORD PTR [rsp+160]
  0008a	49 8b 5b 10	 mov	 rbx, QWORD PTR [r11+16]
  0008e	49 8b 6b 18	 mov	 rbp, QWORD PTR [r11+24]
  00092	49 8b 73 20	 mov	 rsi, QWORD PTR [r11+32]
  00096	49 8b e3	 mov	 rsp, r11
  00099	5f		 pop	 rdi
  0009a	c3		 ret	 0
_PyTuple_DebugMallocStats ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ ; `string'
PUBLIC	??_C@_0M@GAGABHEE@PyTuple_New?$AA@		; `string'
PUBLIC	??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@ ; `string'
PUBLIC	PyTuple_New
EXTRN	_PyGC_generation0:QWORD
EXTRN	Py_FatalError:PROC
EXTRN	_PyObject_GC_NewVar:PROC
EXTRN	_PxObject_NewVar:PROC
EXTRN	PyErr_NoMemory:PROC
EXTRN	_Px_NewReference:PROC
EXTRN	__ImageBase:BYTE
EXTRN	_PyErr_BadInternalCall:PROC
EXTRN	memset:PROC
_BSS	SEGMENT
free_list DQ	014H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyTuple_New DD imagerel $LN31
	DD	imagerel $LN31+39
	DD	imagerel $unwind$PyTuple_New
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyTuple_New DD imagerel $LN31+39
	DD	imagerel $LN31+96
	DD	imagerel $chain$0$PyTuple_New
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyTuple_New DD imagerel $LN31+96
	DD	imagerel $LN31+392
	DD	imagerel $chain$2$PyTuple_New
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyTuple_New DD imagerel $LN31+392
	DD	imagerel $LN31+446
	DD	imagerel $chain$4$PyTuple_New
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$PyTuple_New DD imagerel $LN31+446
	DD	imagerel $LN31+530
	DD	imagerel $chain$6$PyTuple_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$PyTuple_New DD 020021H
	DD	083400H
	DD	imagerel $LN31
	DD	imagerel $LN31+39
	DD	imagerel $unwind$PyTuple_New
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyTuple_New DD 020021H
	DD	083400H
	DD	imagerel $LN31
	DD	imagerel $LN31+39
	DD	imagerel $unwind$PyTuple_New
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyTuple_New DD 020021H
	DD	083400H
	DD	imagerel $LN31
	DD	imagerel $LN31+39
	DD	imagerel $unwind$PyTuple_New
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyTuple_New DD 020521H
	DD	083405H
	DD	imagerel $LN31
	DD	imagerel $LN31+39
	DD	imagerel $unwind$PyTuple_New
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyTuple_New DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT ??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
CONST	SEGMENT
??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ DB 'GC object alread'
	DB	'y tracked', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GAGABHEE@PyTuple_New?$AA@
CONST	SEGMENT
??_C@_0M@GAGABHEE@PyTuple_New?$AA@ DB 'PyTuple_New', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
CONST	SEGMENT
??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@ DB '..\Objects\tupl'
	DB	'eobject.c', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyTuple_New
_TEXT	SEGMENT
size$ = 64
PyTuple_New PROC					; COMDAT

; 67   : {

$LN31:
  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b f9	 mov	 rdi, rcx

; 68   :     register PyTupleObject *op;
; 69   :     Py_ssize_t i;
; 70   :     if (size < 0) {

  00009	48 85 c9	 test	 rcx, rcx
  0000c	79 19		 jns	 SHORT $LN17@PyTuple_Ne

; 71   :         PyErr_BadInternalCall();

  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00015	ba 47 00 00 00	 mov	 edx, 71			; 00000047H
  0001a	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 72   :         return NULL;

  0001f	33 c0		 xor	 eax, eax

; 130  : }

  00021	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00025	5f		 pop	 rdi
  00026	c3		 ret	 0
$LN17@PyTuple_Ne:
  00027	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx

; 73   :     }
; 74   :     if (Py_PXCTX)

  0002c	e8 00 00 00 00	 call	 _Py_PXCTX
  00031	85 c0		 test	 eax, eax
  00033	0f 85 31 01 00
	00		 jne	 $newvar$20226

; 75   :         goto newvar;
; 76   : #if PyTuple_MAXSAVESIZE > 0
; 77   :     if (size == 0 && free_list[0]) {

  00039	48 85 ff	 test	 rdi, rdi
  0003c	75 22		 jne	 SHORT $LN15@PyTuple_Ne
  0003e	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR free_list
  00045	48 85 db	 test	 rbx, rbx
  00048	74 20		 je	 SHORT $LN28@PyTuple_Ne

; 78   :         op = free_list[0];
; 79   :         Py_INCREF(op);

  0004a	48 8b cb	 mov	 rcx, rbx
  0004d	e8 00 00 00 00	 call	 _Py_IncRef

; 128  : end:
; 129  :     return (PyObject *) op;

  00052	48 8b c3	 mov	 rax, rbx
  00055	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 130  : }

  0005a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005e	5f		 pop	 rdi
  0005f	c3		 ret	 0
$LN15@PyTuple_Ne:

; 80   : #ifdef COUNT_ALLOCS
; 81   :         tuple_zero_allocs++;
; 82   : #endif
; 83   :         return (PyObject *) op;
; 84   :     }
; 85   :     if (size < PyTuple_MAXSAVESIZE && (op = free_list[size]) != NULL) {

  00060	48 83 ff 14	 cmp	 rdi, 20
  00064	0f 8d 00 01 00
	00		 jge	 $newvar$20226
$LN28@PyTuple_Ne:
  0006a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00071	48 8b 9c f9 00
	00 00 00	 mov	 rbx, QWORD PTR free_list[rcx+rdi*8]
  00079	48 85 db	 test	 rbx, rbx
  0007c	0f 84 e8 00 00
	00		 je	 $newvar$20226

; 86   :         free_list[size] = (PyTupleObject *) op->ob_item[0];

  00082	48 8b 43 70	 mov	 rax, QWORD PTR [rbx+112]

; 87   :         numfree[size]--;

  00086	ff 8c b9 00 00
	00 00		 dec	 DWORD PTR numfree[rcx+rdi*4]

; 88   : #ifdef COUNT_ALLOCS
; 89   :         fast_tuple_allocs++;
; 90   : #endif
; 91   :         /* Inline PyObject_InitVar */
; 92   : #ifdef Py_TRACE_REFS
; 93   :         Py_SIZE(op) = size;
; 94   :         Py_TYPE(op) = &PyTuple_Type;
; 95   : #endif
; 96   :         _Py_NewReference((PyObject *)op);

  0008d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00094	48 89 84 f9 00
	00 00 00	 mov	 QWORD PTR free_list[rcx+rdi*8], rax
  0009c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@GAGABHEE@PyTuple_New?$AA@
  000a3	4c 8b cb	 mov	 r9, rbx
  000a6	41 b8 60 00 00
	00		 mov	 r8d, 96			; 00000060H
  000ac	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000b4	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b9	85 c0		 test	 eax, eax
  000bb	0f 84 9c 00 00
	00		 je	 $LN20@PyTuple_Ne
  000c1	48 8b cb	 mov	 rcx, rbx
  000c4	e8 00 00 00 00	 call	 _Px_NewReference
$LN11@PyTuple_Ne:

; 109  :             return NULL;
; 110  :     }
; 111  :     for (i=0; i < size; i++)

  000c9	48 85 ff	 test	 rdi, rdi
  000cc	7e 12		 jle	 SHORT $LN10@PyTuple_Ne
  000ce	4c 8b c7	 mov	 r8, rdi
  000d1	48 8d 4b 70	 lea	 rcx, QWORD PTR [rbx+112]
  000d5	33 d2		 xor	 edx, edx
  000d7	49 c1 e0 03	 shl	 r8, 3
  000db	e8 00 00 00 00	 call	 memset
$LN10@PyTuple_Ne:

; 112  :         op->ob_item[i] = NULL;
; 113  : 
; 114  :     if (Py_PXCTX)

  000e0	e8 00 00 00 00	 call	 _Py_PXCTX
  000e5	85 c0		 test	 eax, eax
  000e7	0f 85 17 01 00
	00		 jne	 $end$20255

; 115  :         goto end;
; 116  : 
; 117  : #if PyTuple_MAXSAVESIZE > 0
; 118  :     if (size == 0) {

  000ed	48 85 ff	 test	 rdi, rdi
  000f0	75 15		 jne	 SHORT $LN6@PyTuple_Ne

; 119  :         free_list[0] = op;
; 120  :         ++numfree[0];

  000f2	ff 05 00 00 00
	00		 inc	 DWORD PTR numfree

; 121  :         Py_INCREF(op);          /* extra INCREF so that this is never freed */

  000f8	48 8b cb	 mov	 rcx, rbx
  000fb	48 89 1d 00 00
	00 00		 mov	 QWORD PTR free_list, rbx
  00102	e8 00 00 00 00	 call	 _Py_IncRef
$LN6@PyTuple_Ne:

; 122  :     }
; 123  : #endif
; 124  : #ifdef SHOW_TRACK_COUNT
; 125  :     count_tracked++;
; 126  : #endif
; 127  :     _PyObject_GC_TRACK(op);

  00107	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  0010e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@GAGABHEE@PyTuple_New?$AA@
  00115	4c 8b cb	 mov	 r9, rbx
  00118	41 b8 7f 00 00
	00		 mov	 r8d, 127		; 0000007fH
  0011e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00126	e8 00 00 00 00	 call	 _PyParallel_Guard
  0012b	85 c0		 test	 eax, eax
  0012d	0f 85 d1 00 00
	00		 jne	 $end$20255
  00133	44 8d 40 7f	 lea	 r8d, QWORD PTR [rax+127]
  00137	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  0013e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@GAGABHEE@PyTuple_New?$AA@
  00145	4c 8b cb	 mov	 r9, rbx
  00148	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00150	e8 00 00 00 00	 call	 _PyParallel_Guard
  00155	85 c0		 test	 eax, eax
  00157	74 65		 je	 SHORT $LN24@PyTuple_Ne
  00159	33 ff		 xor	 edi, edi
  0015b	eb 65		 jmp	 SHORT $LN25@PyTuple_Ne
$LN20@PyTuple_Ne:

; 88   : #ifdef COUNT_ALLOCS
; 89   :         fast_tuple_allocs++;
; 90   : #endif
; 91   :         /* Inline PyObject_InitVar */
; 92   : #ifdef Py_TRACE_REFS
; 93   :         Py_SIZE(op) = size;
; 94   :         Py_TYPE(op) = &PyTuple_Type;
; 95   : #endif
; 96   :         _Py_NewReference((PyObject *)op);

  0015d	48 c7 43 50 01
	00 00 00	 mov	 QWORD PTR [rbx+80], 1

; 97   :     }
; 98   :     else

  00165	e9 5f ff ff ff	 jmp	 $LN11@PyTuple_Ne
$newvar$20226:

; 99   : #endif
; 100  :     {
; 101  : newvar:
; 102  :         /* Check for overflow */
; 103  :         if (size > (PY_SSIZE_T_MAX - sizeof(PyTupleObject) -
; 104  :                     sizeof(PyObject *)) / sizeof(PyObject *)) {

  0016a	48 b8 ee ff ff
	ff ff ff ff 0f	 mov	 rax, 1152921504606846958 ; 0fffffffffffffeeH
  00174	48 3b f8	 cmp	 rdi, rax
  00177	76 0f		 jbe	 SHORT $LN12@PyTuple_Ne
  00179	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 130  : }

  0017e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00182	5f		 pop	 rdi
  00183	e9 00 00 00 00	 jmp	 PyErr_NoMemory
$LN12@PyTuple_Ne:

; 105  :             return PyErr_NoMemory();
; 106  :         }
; 107  :         op = PyObject_GC_NewVar(PyTupleObject, &PyTuple_Type, size);

  00188	e8 00 00 00 00	 call	 _Py_PXCTX
  0018d	48 8b d7	 mov	 rdx, rdi
  00190	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyTuple_Type
  00197	85 c0		 test	 eax, eax
  00199	74 07		 je	 SHORT $LN22@PyTuple_Ne
  0019b	e8 00 00 00 00	 call	 _PxObject_NewVar
  001a0	eb 05		 jmp	 SHORT $LN30@PyTuple_Ne
$LN22@PyTuple_Ne:
  001a2	e8 00 00 00 00	 call	 _PyObject_GC_NewVar
$LN30@PyTuple_Ne:
  001a7	48 8b d8	 mov	 rbx, rax

; 108  :         if (op == NULL)

  001aa	48 85 c0	 test	 rax, rax
  001ad	0f 85 16 ff ff
	ff		 jne	 $LN11@PyTuple_Ne
  001b3	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 130  : }

  001b8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001bc	5f		 pop	 rdi
  001bd	c3		 ret	 0
$LN24@PyTuple_Ne:

; 122  :     }
; 123  : #endif
; 124  : #ifdef SHOW_TRACK_COUNT
; 125  :     count_tracked++;
; 126  : #endif
; 127  :     _PyObject_GC_TRACK(op);

  001be	48 8d 7b e8	 lea	 rdi, QWORD PTR [rbx-24]
$LN25@PyTuple_Ne:
  001c2	48 83 7f 10 fe	 cmp	 QWORD PTR [rdi+16], -2
  001c7	74 0c		 je	 SHORT $LN1@PyTuple_Ne
  001c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  001d0	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyTuple_Ne:
  001d5	48 c7 47 10 fd
	ff ff ff	 mov	 QWORD PTR [rdi+16], -3
  001dd	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  001e4	48 89 07	 mov	 QWORD PTR [rdi], rax
  001e7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  001ee	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  001f2	48 89 4f 08	 mov	 QWORD PTR [rdi+8], rcx
  001f6	48 89 39	 mov	 QWORD PTR [rcx], rdi
  001f9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00200	48 89 78 08	 mov	 QWORD PTR [rax+8], rdi
$end$20255:

; 128  : end:
; 129  :     return (PyObject *) op;

  00204	48 8b c3	 mov	 rax, rbx
  00207	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 130  : }

  0020c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00210	5f		 pop	 rdi
  00211	c3		 ret	 0
PyTuple_New ENDP
_TEXT	ENDS
PUBLIC	PyTuple_Size
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyTuple_Size DD imagerel $LN5
	DD	imagerel $LN5+55
	DD	imagerel $unwind$PyTuple_Size
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyTuple_Size DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyTuple_Size
_TEXT	SEGMENT
op$ = 48
PyTuple_Size PROC					; COMDAT

; 134  : {

$LN5:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 135  :     if (!PyTuple_Check(op)) {

  00004	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00008	f7 80 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rax+256], 67108864 ; 04000000H
  00012	75 1a		 jne	 SHORT $LN2@PyTuple_Si

; 136  :         PyErr_BadInternalCall();

  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  0001b	ba 88 00 00 00	 mov	 edx, 136		; 00000088H
  00020	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 137  :         return -1;

  00025	48 83 c8 ff	 or	 rax, -1

; 141  : }

  00029	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002d	c3		 ret	 0
$LN2@PyTuple_Si:

; 138  :     }
; 139  :     else
; 140  :         return Py_SIZE(op);

  0002e	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]

; 141  : }

  00032	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00036	c3		 ret	 0
PyTuple_Size ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@KFCEHIN@tuple?5index?5out?5of?5range?$AA@ ; `string'
PUBLIC	PyTuple_GetItem
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_IndexError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyTuple_GetItem DD imagerel $LN7
	DD	imagerel $LN7+91
	DD	imagerel $unwind$PyTuple_GetItem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyTuple_GetItem DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BJ@KFCEHIN@tuple?5index?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0BJ@KFCEHIN@tuple?5index?5out?5of?5range?$AA@ DB 'tuple index out o'
	DB	'f range', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyTuple_GetItem
_TEXT	SEGMENT
op$ = 48
i$ = 56
PyTuple_GetItem PROC					; COMDAT

; 145  : {

$LN7:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 146  :     if (!PyTuple_Check(op)) {

  00004	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00008	f7 80 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rax+256], 67108864 ; 04000000H
  00012	75 18		 jne	 SHORT $LN3@PyTuple_Ge

; 147  :         PyErr_BadInternalCall();

  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  0001b	ba 93 00 00 00	 mov	 edx, 147		; 00000093H
  00020	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 152  :         return NULL;

  00025	33 c0		 xor	 eax, eax

; 155  : }

  00027	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002b	c3		 ret	 0
$LN3@PyTuple_Ge:

; 148  :         return NULL;
; 149  :     }
; 150  :     if (i < 0 || i >= Py_SIZE(op)) {

  0002c	48 85 d2	 test	 rdx, rdx
  0002f	78 10		 js	 SHORT $LN1@PyTuple_Ge
  00031	48 3b 51 60	 cmp	 rdx, QWORD PTR [rcx+96]
  00035	7d 0a		 jge	 SHORT $LN1@PyTuple_Ge

; 153  :     }
; 154  :     return ((PyTupleObject *)op) -> ob_item[i];

  00037	48 8b 44 d1 70	 mov	 rax, QWORD PTR [rcx+rdx*8+112]

; 155  : }

  0003c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00040	c3		 ret	 0
$LN1@PyTuple_Ge:

; 151  :         PyErr_SetString(PyExc_IndexError, "tuple index out of range");

  00041	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@KFCEHIN@tuple?5index?5out?5of?5range?$AA@
  0004f	e8 00 00 00 00	 call	 PyErr_SetString

; 152  :         return NULL;

  00054	33 c0		 xor	 eax, eax

; 155  : }

  00056	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005a	c3		 ret	 0
PyTuple_GetItem ENDP
_TEXT	ENDS
PUBLIC	PyTuple_GetItemAddr
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyTuple_GetItemAddr DD imagerel $LN7
	DD	imagerel $LN7+91
	DD	imagerel $unwind$PyTuple_GetItemAddr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyTuple_GetItemAddr DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyTuple_GetItemAddr
_TEXT	SEGMENT
op$ = 48
i$ = 56
PyTuple_GetItemAddr PROC				; COMDAT

; 159  : {

$LN7:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 160  :     if (!PyTuple_Check(op)) {

  00004	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00008	f7 80 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rax+256], 67108864 ; 04000000H
  00012	75 18		 jne	 SHORT $LN3@PyTuple_Ge@2

; 161  :         PyErr_BadInternalCall();

  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  0001b	ba a1 00 00 00	 mov	 edx, 161		; 000000a1H
  00020	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 166  :         return NULL;

  00025	33 c0		 xor	 eax, eax

; 169  : }

  00027	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002b	c3		 ret	 0
$LN3@PyTuple_Ge@2:

; 162  :         return NULL;
; 163  :     }
; 164  :     if (i < 0 || i >= Py_SIZE(op)) {

  0002c	48 85 d2	 test	 rdx, rdx
  0002f	78 10		 js	 SHORT $LN1@PyTuple_Ge@2
  00031	48 3b 51 60	 cmp	 rdx, QWORD PTR [rcx+96]
  00035	7d 0a		 jge	 SHORT $LN1@PyTuple_Ge@2

; 167  :     }
; 168  :     return &(((PyTupleObject *)op)->ob_item[i]);

  00037	48 8d 44 d1 70	 lea	 rax, QWORD PTR [rcx+rdx*8+112]

; 169  : }

  0003c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00040	c3		 ret	 0
$LN1@PyTuple_Ge@2:

; 165  :         PyErr_SetString(PyExc_IndexError, "tuple index out of range");

  00041	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@KFCEHIN@tuple?5index?5out?5of?5range?$AA@
  0004f	e8 00 00 00 00	 call	 PyErr_SetString

; 166  :         return NULL;

  00054	33 c0		 xor	 eax, eax

; 169  : }

  00056	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005a	c3		 ret	 0
PyTuple_GetItemAddr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@DLLNLCNA@tuple?5assignment?5index?5out?5of?5ra@ ; `string'
PUBLIC	PyTuple_SetItem
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyTuple_SetItem DD imagerel $LN31
	DD	imagerel $LN31+247
	DD	imagerel $unwind$PyTuple_SetItem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyTuple_SetItem DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0CE@DLLNLCNA@tuple?5assignment?5index?5out?5of?5ra@
CONST	SEGMENT
??_C@_0CE@DLLNLCNA@tuple?5assignment?5index?5out?5of?5ra@ DB 'tuple assig'
	DB	'nment index out of range', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\tupleobject.c
CONST	ENDS
;	COMDAT PyTuple_SetItem
_TEXT	SEGMENT
op$ = 64
i$ = 72
newitem$ = 80
PyTuple_SetItem PROC					; COMDAT

; 173  : {

$LN31:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 174  :     register PyObject *olditem;
; 175  :     register PyObject **p;
; 176  :     if (!PyTuple_Check(op) || op->ob_refcnt != 1) {

  00006	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0000a	49 8b d8	 mov	 rbx, r8
  0000d	f7 80 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rax+256], 67108864 ; 04000000H
  00017	74 5a		 je	 SHORT $LN14@PyTuple_Se
  00019	48 83 79 50 01	 cmp	 QWORD PTR [rcx+80], 1
  0001e	75 53		 jne	 SHORT $LN14@PyTuple_Se

; 180  :     }
; 181  :     if (i < 0 || i >= Py_SIZE(op)) {

  00020	48 85 d2	 test	 rdx, rdx
  00023	78 25		 js	 SHORT $LN8@PyTuple_Se
  00025	48 3b 51 60	 cmp	 rdx, QWORD PTR [rcx+96]
  00029	7d 1f		 jge	 SHORT $LN8@PyTuple_Se

; 185  :         return -1;
; 186  :     }
; 187  :     p = ((PyTupleObject *)op) -> ob_item + i;
; 188  :     olditem = *p;

  0002b	48 8b 44 d1 70	 mov	 rax, QWORD PTR [rcx+rdx*8+112]

; 189  :     *p = newitem;

  00030	48 89 5c d1 70	 mov	 QWORD PTR [rcx+rdx*8+112], rbx

; 190  :     Py_XDECREF(olditem);

  00035	48 85 c0	 test	 rax, rax
  00038	74 08		 je	 SHORT $LN3@PyTuple_Se
  0003a	48 8b c8	 mov	 rcx, rax
  0003d	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@PyTuple_Se:

; 191  :     return 0;

  00042	33 c0		 xor	 eax, eax

; 192  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
$LN8@PyTuple_Se:

; 182  :         Py_XDECREF(newitem);

  0004a	48 85 db	 test	 rbx, rbx
  0004d	74 08		 je	 SHORT $LN7@PyTuple_Se
  0004f	48 8b cb	 mov	 rcx, rbx
  00052	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@PyTuple_Se:

; 183  :         PyErr_SetString(PyExc_IndexError,
; 184  :                         "tuple assignment index out of range");

  00057	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
  0005e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@DLLNLCNA@tuple?5assignment?5index?5out?5of?5ra@
  00065	e8 00 00 00 00	 call	 PyErr_SetString
  0006a	83 c8 ff	 or	 eax, -1

; 192  : }

  0006d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00071	5b		 pop	 rbx
  00072	c3		 ret	 0
$LN14@PyTuple_Se:

; 177  :         Py_XDECREF(newitem);

  00073	48 85 db	 test	 rbx, rbx
  00076	74 65		 je	 SHORT $LN13@PyTuple_Se
  00078	e8 00 00 00 00	 call	 _Py_PXCTX
  0007d	85 c0		 test	 eax, eax
  0007f	75 5c		 jne	 SHORT $LN13@PyTuple_Se
  00081	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00085	a8 20		 test	 al, 32			; 00000020H
  00087	75 4c		 jne	 SHORT $LN23@PyTuple_Se
  00089	84 c0		 test	 al, al
  0008b	78 48		 js	 SHORT $LN23@PyTuple_Se
  0008d	a8 02		 test	 al, 2
  0008f	75 4c		 jne	 SHORT $LN13@PyTuple_Se
  00091	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00095	75 46		 jne	 SHORT $LN13@PyTuple_Se
  00097	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000a5	4c 8b cb	 mov	 r9, rbx
  000a8	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000ae	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000b6	e8 00 00 00 00	 call	 _PyParallel_Guard
  000bb	48 8b cb	 mov	 rcx, rbx
  000be	85 c0		 test	 eax, eax
  000c0	74 07		 je	 SHORT $LN28@PyTuple_Se
  000c2	e8 00 00 00 00	 call	 _Px_Dealloc
  000c7	eb 14		 jmp	 SHORT $LN13@PyTuple_Se
$LN28@PyTuple_Se:
  000c9	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000cd	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000d3	eb 08		 jmp	 SHORT $LN13@PyTuple_Se
$LN23@PyTuple_Se:
  000d5	48 8b cb	 mov	 rcx, rbx
  000d8	e8 00 00 00 00	 call	 Px_DecRef
$LN13@PyTuple_Se:

; 178  :         PyErr_BadInternalCall();

  000dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  000e4	ba b2 00 00 00	 mov	 edx, 178		; 000000b2H
  000e9	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 179  :         return -1;

  000ee	83 c8 ff	 or	 eax, -1

; 192  : }

  000f1	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000f5	5b		 pop	 rbx
  000f6	c3		 ret	 0
PyTuple_SetItem ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@JFPMCBCL@_PyTuple_MaybeUntrack?$AA@	; `string'
PUBLIC	_PyTuple_MaybeUntrack
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyTuple_MaybeUntrack DD imagerel $LN46
	DD	imagerel $LN46+138
	DD	imagerel $unwind$_PyTuple_MaybeUntrack
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$_PyTuple_MaybeUntrack DD imagerel $LN46+138
	DD	imagerel $LN46+609
	DD	imagerel $chain$3$_PyTuple_MaybeUntrack
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$_PyTuple_MaybeUntrack DD imagerel $LN46+609
	DD	imagerel $LN46+617
	DD	imagerel $chain$4$_PyTuple_MaybeUntrack
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$_PyTuple_MaybeUntrack DD 021H
	DD	imagerel $LN46
	DD	imagerel $LN46+138
	DD	imagerel $unwind$_PyTuple_MaybeUntrack
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$_PyTuple_MaybeUntrack DD 081421H
	DD	06c414H
	DD	0d740fH
	DD	0c640aH
	DD	0b3405H
	DD	imagerel $LN46
	DD	imagerel $LN46+138
	DD	imagerel $unwind$_PyTuple_MaybeUntrack
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyTuple_MaybeUntrack DD 030801H
	DD	0d0046208H
	DD	05002H
xdata	ENDS
;	COMDAT ??_C@_0BG@JFPMCBCL@_PyTuple_MaybeUntrack?$AA@
CONST	SEGMENT
??_C@_0BG@JFPMCBCL@_PyTuple_MaybeUntrack?$AA@ DB '_PyTuple_MaybeUntrack', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyTuple_MaybeUntrack
_TEXT	SEGMENT
tv145 = 80
op$ = 80
_PyTuple_MaybeUntrack PROC				; COMDAT

; 196  : {

$LN46:
  00000	40 55		 push	 rbp
  00002	41 55		 push	 r13
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 197  :     PyTupleObject *t;
; 198  :     Py_ssize_t i, n;
; 199  : 
; 200  :     if (!PyTuple_CheckExact(op) || !_PyObject_GC_IS_TRACKED(op))

  00008	4c 8d 2d 00 00
	00 00		 lea	 r13, OFFSET FLAT:PyTuple_Type
  0000f	48 8b e9	 mov	 rbp, rcx
  00012	4c 39 69 58	 cmp	 QWORD PTR [rcx+88], r13
  00016	0f 85 45 02 00
	00		 jne	 $LN1@PyTuple_Ma
  0001c	4c 8b c9	 mov	 r9, rcx
  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@JFPMCBCL@_PyTuple_MaybeUntrack?$AA@
  0002d	41 b8 c8 00 00
	00		 mov	 r8d, 200		; 000000c8H
  00033	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0003b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00040	85 c0		 test	 eax, eax
  00042	0f 85 19 02 00
	00		 jne	 $LN1@PyTuple_Ma
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  0004f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@JFPMCBCL@_PyTuple_MaybeUntrack?$AA@
  00056	4c 8b cd	 mov	 r9, rbp
  00059	41 b8 c8 00 00
	00		 mov	 r8d, 200		; 000000c8H
  0005f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00067	e8 00 00 00 00	 call	 _PyParallel_Guard
  0006c	85 c0		 test	 eax, eax
  0006e	74 04		 je	 SHORT $LN14@PyTuple_Ma
  00070	33 c9		 xor	 ecx, ecx
  00072	eb 04		 jmp	 SHORT $LN15@PyTuple_Ma
$LN14@PyTuple_Ma:
  00074	48 8d 4d e8	 lea	 rcx, QWORD PTR [rbp-24]
$LN15@PyTuple_Ma:
  00078	33 c0		 xor	 eax, eax
  0007a	48 83 79 10 fe	 cmp	 QWORD PTR [rcx+16], -2
  0007f	0f 95 c0	 setne	 al
  00082	85 c0		 test	 eax, eax
  00084	0f 84 d7 01 00
	00		 je	 $LN1@PyTuple_Ma

; 201  :         return;
; 202  :     t = (PyTupleObject *) op;
; 203  :     n = Py_SIZE(t);

  0008a	48 89 5c 24 58	 mov	 QWORD PTR [rsp+88], rbx
  0008f	48 89 74 24 60	 mov	 QWORD PTR [rsp+96], rsi
  00094	48 89 7c 24 68	 mov	 QWORD PTR [rsp+104], rdi
  00099	4c 89 64 24 30	 mov	 QWORD PTR [rsp+48], r12
  0009e	4c 8b 65 60	 mov	 r12, QWORD PTR [rbp+96]

; 204  :     for (i = 0; i < n; i++) {

  000a2	33 f6		 xor	 esi, esi
  000a4	4d 85 e4	 test	 r12, r12
  000a7	0f 8e 24 01 00
	00		 jle	 $LN7@PyTuple_Ma

; 201  :         return;
; 202  :     t = (PyTupleObject *) op;
; 203  :     n = Py_SIZE(t);

  000ad	48 8d 7d 70	 lea	 rdi, QWORD PTR [rbp+112]
$LL9@PyTuple_Ma:

; 205  :         PyObject *elt = PyTuple_GET_ITEM(t, i);

  000b1	48 8b 1f	 mov	 rbx, QWORD PTR [rdi]

; 206  :         /* Tuple with NULL elements aren't
; 207  :            fully constructed, don't untrack
; 208  :            them yet. */
; 209  :         if (!elt ||
; 210  :             _PyObject_GC_MAY_BE_TRACKED(elt))

  000b4	48 85 db	 test	 rbx, rbx
  000b7	0f 84 90 01 00
	00		 je	 $LN45@PyTuple_Ma
  000bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  000c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@JFPMCBCL@_PyTuple_MaybeUntrack?$AA@
  000cb	4c 8b cb	 mov	 r9, rbx
  000ce	41 b8 d2 00 00
	00		 mov	 r8d, 210		; 000000d2H
  000d4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000dc	e8 00 00 00 00	 call	 _PyParallel_Guard
  000e1	85 c0		 test	 eax, eax
  000e3	0f 85 d8 00 00
	00		 jne	 $LN30@PyTuple_Ma
  000e9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  000f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@JFPMCBCL@_PyTuple_MaybeUntrack?$AA@
  000f7	4c 8b cb	 mov	 r9, rbx
  000fa	41 b8 d2 00 00
	00		 mov	 r8d, 210		; 000000d2H
  00100	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00108	e8 00 00 00 00	 call	 _PyParallel_Guard
  0010d	85 c0		 test	 eax, eax
  0010f	0f 85 ac 00 00
	00		 jne	 $LN30@PyTuple_Ma
  00115	e8 00 00 00 00	 call	 _Py_PXCTX
  0011a	85 c0		 test	 eax, eax
  0011c	0f 85 9f 00 00
	00		 jne	 $LN30@PyTuple_Ma
  00122	48 8b 4b 58	 mov	 rcx, QWORD PTR [rbx+88]
  00126	8b 81 00 01 00
	00		 mov	 eax, DWORD PTR [rcx+256]
  0012c	c1 e8 0e	 shr	 eax, 14
  0012f	83 e0 01	 and	 eax, 1
  00132	0f 84 89 00 00
	00		 je	 $LN30@PyTuple_Ma
  00138	48 8b 81 a0 01
	00 00		 mov	 rax, QWORD PTR [rcx+416]
  0013f	48 85 c0	 test	 rax, rax
  00142	74 09		 je	 SHORT $LN40@PyTuple_Ma
  00144	48 8b cb	 mov	 rcx, rbx
  00147	ff d0		 call	 rax
  00149	85 c0		 test	 eax, eax
  0014b	74 74		 je	 SHORT $LN30@PyTuple_Ma
$LN40@PyTuple_Ma:
  0014d	4c 39 6b 58	 cmp	 QWORD PTR [rbx+88], r13
  00151	0f 85 f6 00 00
	00		 jne	 $LN45@PyTuple_Ma
  00157	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  0015e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@JFPMCBCL@_PyTuple_MaybeUntrack?$AA@
  00165	4c 8b cb	 mov	 r9, rbx
  00168	41 b8 d2 00 00
	00		 mov	 r8d, 210		; 000000d2H
  0016e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00176	e8 00 00 00 00	 call	 _PyParallel_Guard
  0017b	85 c0		 test	 eax, eax
  0017d	75 42		 jne	 SHORT $LN30@PyTuple_Ma
  0017f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00186	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@JFPMCBCL@_PyTuple_MaybeUntrack?$AA@
  0018d	4c 8b cb	 mov	 r9, rbx
  00190	41 b8 d2 00 00
	00		 mov	 r8d, 210		; 000000d2H
  00196	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0019e	e8 00 00 00 00	 call	 _PyParallel_Guard
  001a3	85 c0		 test	 eax, eax
  001a5	74 04		 je	 SHORT $LN25@PyTuple_Ma
  001a7	33 db		 xor	 ebx, ebx
  001a9	eb 04		 jmp	 SHORT $LN26@PyTuple_Ma
$LN25@PyTuple_Ma:
  001ab	48 83 c3 e8	 add	 rbx, -24
$LN26@PyTuple_Ma:
  001af	33 c0		 xor	 eax, eax
  001b1	48 83 7b 10 fe	 cmp	 QWORD PTR [rbx+16], -2
  001b6	0f 95 c0	 setne	 al
  001b9	85 c0		 test	 eax, eax
  001bb	0f 85 8c 00 00
	00		 jne	 $LN45@PyTuple_Ma
$LN30@PyTuple_Ma:

; 204  :     for (i = 0; i < n; i++) {

  001c1	48 ff c6	 inc	 rsi
  001c4	48 83 c7 08	 add	 rdi, 8
  001c8	49 3b f4	 cmp	 rsi, r12
  001cb	0f 8c e0 fe ff
	ff		 jl	 $LL9@PyTuple_Ma
$LN7@PyTuple_Ma:

; 211  :             return;
; 212  :     }
; 213  : #ifdef SHOW_TRACK_COUNT
; 214  :     count_tracked--;
; 215  :     count_untracked++;
; 216  : #endif
; 217  :     _PyObject_GC_UNTRACK(op);

  001d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  001d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@JFPMCBCL@_PyTuple_MaybeUntrack?$AA@
  001df	4c 8b cd	 mov	 r9, rbp
  001e2	41 b8 d9 00 00
	00		 mov	 r8d, 217		; 000000d9H
  001e8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001f0	e8 00 00 00 00	 call	 _PyParallel_Guard
  001f5	85 c0		 test	 eax, eax
  001f7	75 54		 jne	 SHORT $LN45@PyTuple_Ma
  001f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00200	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@JFPMCBCL@_PyTuple_MaybeUntrack?$AA@
  00207	4c 8b cd	 mov	 r9, rbp
  0020a	41 b8 d9 00 00
	00		 mov	 r8d, 217		; 000000d9H
  00210	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00218	e8 00 00 00 00	 call	 _PyParallel_Guard
  0021d	85 c0		 test	 eax, eax
  0021f	74 04		 je	 SHORT $LN34@PyTuple_Ma
  00221	33 d2		 xor	 edx, edx
  00223	eb 04		 jmp	 SHORT $LN35@PyTuple_Ma
$LN34@PyTuple_Ma:
  00225	48 8d 55 e8	 lea	 rdx, QWORD PTR [rbp-24]
$LN35@PyTuple_Ma:
  00229	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  0022c	48 8b 4a 08	 mov	 rcx, QWORD PTR [rdx+8]
  00230	48 c7 42 10 fe
	ff ff ff	 mov	 QWORD PTR [rdx+16], -2
  00238	48 89 01	 mov	 QWORD PTR [rcx], rax
  0023b	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  0023e	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  00242	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00246	48 c7 02 00 00
	00 00		 mov	 QWORD PTR [rdx], 0
$LN45@PyTuple_Ma:
  0024d	48 8b 7c 24 68	 mov	 rdi, QWORD PTR [rsp+104]
  00252	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  00257	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  0025c	4c 8b 64 24 30	 mov	 r12, QWORD PTR [rsp+48]
$LN1@PyTuple_Ma:

; 218  : }

  00261	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00265	41 5d		 pop	 r13
  00267	5d		 pop	 rbp
  00268	c3		 ret	 0
_PyTuple_MaybeUntrack ENDP
_TEXT	ENDS
PUBLIC	PyTuple_Pack
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyTuple_Pack DD imagerel $LN13
	DD	imagerel $LN13+65
	DD	imagerel $unwind$PyTuple_Pack
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyTuple_Pack DD imagerel $LN13+65
	DD	imagerel $LN13+167
	DD	imagerel $chain$1$PyTuple_Pack
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyTuple_Pack DD imagerel $LN13+167
	DD	imagerel $LN13+182
	DD	imagerel $chain$2$PyTuple_Pack
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyTuple_Pack DD 021H
	DD	imagerel $LN13
	DD	imagerel $LN13+65
	DD	imagerel $unwind$PyTuple_Pack
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyTuple_Pack DD 020521H
	DD	083405H
	DD	imagerel $LN13
	DD	imagerel $LN13+65
	DD	imagerel $unwind$PyTuple_Pack
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyTuple_Pack DD 053801H
	DD	077438H
	DD	06016821aH
	DD	05015H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\tupleobject.c
xdata	ENDS
;	COMDAT PyTuple_Pack
_TEXT	SEGMENT
n$ = 96
PyTuple_Pack PROC					; COMDAT

; 222  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 223  :     Py_ssize_t i;
; 224  :     PyObject *o;
; 225  :     PyObject *result;
; 226  :     PyObject **items;
; 227  :     va_list vargs;
; 228  : 
; 229  :     va_start(vargs, n);

  0001a	48 8d 74 24 68	 lea	 rsi, QWORD PTR n$[rsp+8]

; 230  :     result = PyTuple_New(n);

  0001f	e8 00 00 00 00	 call	 PyTuple_New
  00024	48 8b e8	 mov	 rbp, rax

; 231  :     if (result == NULL) {

  00027	48 85 c0	 test	 rax, rax
  0002a	75 07		 jne	 SHORT $LN4@PyTuple_Pa

; 243  : }

  0002c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00030	5e		 pop	 rsi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
$LN4@PyTuple_Pa:
  00033	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi

; 236  :     for (i = 0; i < n; i++) {

  00038	33 ff		 xor	 edi, edi
  0003a	48 39 7c 24 60	 cmp	 QWORD PTR n$[rsp], rdi
  0003f	7e 66		 jle	 SHORT $LN1@PyTuple_Pa

; 232  :         va_end(vargs);
; 233  :         return NULL;
; 234  :     }
; 235  :     items = ((PyTupleObject *)result)->ob_item;

  00041	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00046	48 83 c6 f8	 add	 rsi, -8
  0004a	66 0f 1f 44 00
	00		 npad	 6
$LL3@PyTuple_Pa:

; 237  :         o = va_arg(vargs, PyObject *);

  00050	48 8b 5e 08	 mov	 rbx, QWORD PTR [rsi+8]
  00054	48 83 c6 08	 add	 rsi, 8

; 238  :         Py_INCREF(o);

  00058	e8 00 00 00 00	 call	 _Py_PXCTX
  0005d	85 c0		 test	 eax, eax
  0005f	75 32		 jne	 SHORT $LN8@PyTuple_Pa
  00061	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00068	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0006f	4c 8b cb	 mov	 r9, rbx
  00072	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00078	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00080	e8 00 00 00 00	 call	 _PyParallel_Guard
  00085	85 c0		 test	 eax, eax
  00087	75 06		 jne	 SHORT $LN7@PyTuple_Pa
  00089	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0008d	74 04		 je	 SHORT $LN8@PyTuple_Pa
$LN7@PyTuple_Pa:
  0008f	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN8@PyTuple_Pa:

; 239  :         items[i] = o;

  00093	48 89 5c fd 70	 mov	 QWORD PTR [rbp+rdi*8+112], rbx
  00098	48 ff c7	 inc	 rdi
  0009b	48 3b 7c 24 60	 cmp	 rdi, QWORD PTR n$[rsp]
  000a0	7c ae		 jl	 SHORT $LL3@PyTuple_Pa
  000a2	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN1@PyTuple_Pa:

; 240  :     }
; 241  :     va_end(vargs);
; 242  :     return result;

  000a7	48 8b c5	 mov	 rax, rbp
  000aa	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]

; 243  : }

  000af	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000b3	5e		 pop	 rsi
  000b4	5d		 pop	 rbp
  000b5	c3		 ret	 0
PyTuple_Pack ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@HLMMFMBP@tupledealloc?$AA@		; `string'
EXTRN	_PyTrash_thread_deposit_object:PROC
EXTRN	_PyTrash_thread_destroy_chain:PROC
EXTRN	_PyThreadState_Current:QWORD
EXTRN	_PyParallel_GetThreadState:PROC
EXTRN	PyObject_GC_UnTrack:PROC
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$tupledealloc DD imagerel tupledealloc
	DD	imagerel tupledealloc+124
	DD	imagerel $unwind$tupledealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$tupledealloc DD imagerel tupledealloc+124
	DD	imagerel tupledealloc+142
	DD	imagerel $chain$0$tupledealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$tupledealloc DD imagerel tupledealloc+142
	DD	imagerel tupledealloc+288
	DD	imagerel $chain$2$tupledealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$tupledealloc DD imagerel tupledealloc+288
	DD	imagerel tupledealloc+299
	DD	imagerel $chain$3$tupledealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$tupledealloc DD imagerel tupledealloc+299
	DD	imagerel tupledealloc+438
	DD	imagerel $chain$4$tupledealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$tupledealloc DD 021H
	DD	imagerel tupledealloc
	DD	imagerel tupledealloc+124
	DD	imagerel $unwind$tupledealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$tupledealloc DD 021H
	DD	imagerel tupledealloc+124
	DD	imagerel tupledealloc+142
	DD	imagerel $chain$0$tupledealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$tupledealloc DD 040a21H
	DD	0b640aH
	DD	0a3405H
	DD	imagerel tupledealloc+124
	DD	imagerel tupledealloc+142
	DD	imagerel $chain$0$tupledealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$tupledealloc DD 020521H
	DD	0c7405H
	DD	imagerel tupledealloc
	DD	imagerel tupledealloc+124
	DD	imagerel $unwind$tupledealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tupledealloc DD 040a01H
	DD	0d006520aH
	DD	05002c004H
xdata	ENDS
;	COMDAT ??_C@_0N@HLMMFMBP@tupledealloc?$AA@
CONST	SEGMENT
??_C@_0N@HLMMFMBP@tupledealloc?$AA@ DB 'tupledealloc', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\tupleobject.c
CONST	ENDS
;	COMDAT tupledealloc
_TEXT	SEGMENT
op$ = 80
tupledealloc PROC					; COMDAT

; 250  : {

  00000	40 55		 push	 rbp
  00002	41 54		 push	 r12
  00004	41 55		 push	 r13
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 251  :     register Py_ssize_t i;
; 252  :     register Py_ssize_t len =  Py_SIZE(op);

  0000a	4c 8b 69 60	 mov	 r13, QWORD PTR [rcx+96]
  0000e	48 8b e9	 mov	 rbp, rcx

; 253  :     Py_GUARD

  00011	e8 00 00 00 00	 call	 _Py_PXCTX
  00016	85 c0		 test	 eax, eax
  00018	74 1c		 je	 SHORT $LN15@tupledeall
  0001a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@HLMMFMBP@tupledealloc?$AA@
  00028	45 33 c9	 xor	 r9d, r9d
  0002b	41 b8 fd 00 00
	00		 mov	 r8d, 253		; 000000fdH
  00031	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN15@tupledeall:

; 254  :     PyObject_GC_UnTrack(op);

  00036	48 8b cd	 mov	 rcx, rbp
  00039	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 255  :     Py_TRASHCAN_SAFE_BEGIN(op)

  0003e	e8 00 00 00 00	 call	 _Py_PXCTX
  00043	85 c0		 test	 eax, eax
  00045	74 0a		 je	 SHORT $LN18@tupledeall
  00047	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  0004c	4c 8b e0	 mov	 r12, rax
  0004f	eb 07		 jmp	 SHORT $LN19@tupledeall
$LN18@tupledeall:
  00051	4c 8b 25 00 00
	00 00		 mov	 r12, QWORD PTR _PyThreadState_Current
$LN19@tupledeall:
  00058	41 8b 84 24 94
	00 00 00	 mov	 eax, DWORD PTR [r12+148]
  00060	83 f8 32	 cmp	 eax, 50			; 00000032H
  00063	0f 8d 3b 01 00
	00		 jge	 $LN11@tupledeall
  00069	ff c0		 inc	 eax
  0006b	41 89 84 24 94
	00 00 00	 mov	 DWORD PTR [r12+148], eax

; 256  :     if (len > 0) {

  00073	4d 85 ed	 test	 r13, r13
  00076	0f 8e ef 00 00
	00		 jle	 $LN3@tupledeall

; 257  :         i = len;
; 258  :         while (--i >= 0)

  0007c	48 89 7c 24 60	 mov	 QWORD PTR [rsp+96], rdi
  00081	49 8d 7d ff	 lea	 rdi, QWORD PTR [r13-1]
  00085	48 85 ff	 test	 rdi, rdi
  00088	0f 88 92 00 00
	00		 js	 $LN8@tupledeall
  0008e	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  00093	48 89 74 24 58	 mov	 QWORD PTR [rsp+88], rsi
  00098	48 8d 74 fd 70	 lea	 rsi, QWORD PTR [rbp+rdi*8+112]
  0009d	0f 1f 00	 npad	 3
$LL9@tupledeall:

; 259  :             Py_XDECREF(op->ob_item[i]);

  000a0	48 8b 1e	 mov	 rbx, QWORD PTR [rsi]
  000a3	48 85 db	 test	 rbx, rbx
  000a6	74 65		 je	 SHORT $LN6@tupledeall
  000a8	e8 00 00 00 00	 call	 _Py_PXCTX
  000ad	85 c0		 test	 eax, eax
  000af	75 5c		 jne	 SHORT $LN6@tupledeall
  000b1	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000b5	a8 20		 test	 al, 32			; 00000020H
  000b7	75 4c		 jne	 SHORT $LN24@tupledeall
  000b9	84 c0		 test	 al, al
  000bb	78 48		 js	 SHORT $LN24@tupledeall
  000bd	a8 02		 test	 al, 2
  000bf	75 4c		 jne	 SHORT $LN6@tupledeall
  000c1	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000c5	75 46		 jne	 SHORT $LN6@tupledeall
  000c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000d5	4c 8b cb	 mov	 r9, rbx
  000d8	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000de	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000e6	e8 00 00 00 00	 call	 _PyParallel_Guard
  000eb	48 8b cb	 mov	 rcx, rbx
  000ee	85 c0		 test	 eax, eax
  000f0	74 07		 je	 SHORT $LN29@tupledeall
  000f2	e8 00 00 00 00	 call	 _Px_Dealloc
  000f7	eb 14		 jmp	 SHORT $LN6@tupledeall
$LN29@tupledeall:
  000f9	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000fd	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00103	eb 08		 jmp	 SHORT $LN6@tupledeall
$LN24@tupledeall:
  00105	48 8b cb	 mov	 rcx, rbx
  00108	e8 00 00 00 00	 call	 Px_DecRef
$LN6@tupledeall:

; 257  :         i = len;
; 258  :         while (--i >= 0)

  0010d	48 83 ee 08	 sub	 rsi, 8
  00111	48 ff cf	 dec	 rdi
  00114	79 8a		 jns	 SHORT $LL9@tupledeall
  00116	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  0011b	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
$LN8@tupledeall:
  00120	48 8b 7c 24 60	 mov	 rdi, QWORD PTR [rsp+96]

; 260  : #if PyTuple_MAXSAVESIZE > 0
; 261  :         if (len < PyTuple_MAXSAVESIZE &&
; 262  :             numfree[len] < PyTuple_MAXFREELIST &&
; 263  :             Py_TYPE(op) == &PyTuple_Type)

  00125	49 83 fd 14	 cmp	 r13, 20
  00129	7d 40		 jge	 SHORT $LN3@tupledeall
  0012b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00132	42 81 bc a9 00
	00 00 00 d0 07
	00 00		 cmp	 DWORD PTR numfree[rcx+r13*4], 2000 ; 000007d0H
  0013e	7d 2b		 jge	 SHORT $LN3@tupledeall
  00140	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTuple_Type
  00147	48 39 45 58	 cmp	 QWORD PTR [rbp+88], rax
  0014b	75 1e		 jne	 SHORT $LN3@tupledeall

; 264  :         {
; 265  :             op->ob_item[0] = (PyObject *) free_list[len];

  0014d	4a 8b 84 e9 00
	00 00 00	 mov	 rax, QWORD PTR free_list[rcx+r13*8]
  00155	48 89 45 70	 mov	 QWORD PTR [rbp+112], rax

; 266  :             numfree[len]++;

  00159	42 ff 84 a9 00
	00 00 00	 inc	 DWORD PTR numfree[rcx+r13*4]

; 267  :             free_list[len] = op;

  00161	4a 89 ac e9 00
	00 00 00	 mov	 QWORD PTR free_list[rcx+r13*8], rbp

; 268  :             goto done; /* return */

  00169	eb 0d		 jmp	 SHORT $done$20428
$LN3@tupledeall:

; 269  :         }
; 270  : #endif
; 271  :     }
; 272  :     Py_TYPE(op)->tp_free((PyObject *)op);

  0016b	48 8b 45 58	 mov	 rax, QWORD PTR [rbp+88]
  0016f	48 8b cd	 mov	 rcx, rbp
  00172	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]
$done$20428:

; 273  : done:
; 274  :     Py_TRASHCAN_SAFE_END(op)

  00178	41 ff 8c 24 94
	00 00 00	 dec	 DWORD PTR [r12+148]
  00180	49 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR [r12+152], 0
  00189	74 21		 je	 SHORT $LN13@tupledeall
  0018b	41 83 bc 24 94
	00 00 00 00	 cmp	 DWORD PTR [r12+148], 0
  00194	7f 16		 jg	 SHORT $LN13@tupledeall

; 275  : }

  00196	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0019a	41 5d		 pop	 r13
  0019c	41 5c		 pop	 r12
  0019e	5d		 pop	 rbp
  0019f	e9 00 00 00 00	 jmp	 _PyTrash_thread_destroy_chain
$LN11@tupledeall:

; 273  : done:
; 274  :     Py_TRASHCAN_SAFE_END(op)

  001a4	48 8b cd	 mov	 rcx, rbp
  001a7	e8 00 00 00 00	 call	 _PyTrash_thread_deposit_object
$LN13@tupledeall:

; 275  : }

  001ac	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001b0	41 5d		 pop	 r13
  001b2	41 5c		 pop	 r12
  001b4	5d		 pop	 rbp
  001b5	c3		 ret	 0
tupledealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_02HFKPAGIC@?0?$CJ?$AA@			; `string'
PUBLIC	??_C@_01PKGAHCOL@?$CJ?$AA@			; `string'
PUBLIC	??_C@_0CD@KOCNJJAM@?5while?5getting?5the?5repr?5of?5a?5tup@ ; `string'
PUBLIC	??_C@_09CHIONKKD@tuplerepr?$AA@			; `string'
PUBLIC	??_C@_01ODHLEDKK@?$CI?$AA@			; `string'
PUBLIC	??_C@_05ONELGEGO@?$CI?4?4?4?$CJ?$AA@		; `string'
PUBLIC	??_C@_02KEGNLNML@?0?5?$AA@			; `string'
PUBLIC	??_C@_02HCKGKOFO@?$CI?$CJ?$AA@			; `string'
EXTRN	_PyAccu_Destroy:PROC
EXTRN	_PyAccu_Finish:PROC
EXTRN	Py_ReprLeave:PROC
EXTRN	PyObject_Repr:PROC
EXTRN	_Py_CheckRecursiveCall:PROC
EXTRN	_Py_CheckRecursionLimit:DWORD
EXTRN	_PyAccu_Accumulate:PROC
EXTRN	_PyAccu_Init:PROC
EXTRN	Py_ReprEnter:PROC
EXTRN	PyUnicode_FromString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$tuplerepr DD imagerel tuplerepr
	DD	imagerel tuplerepr+749
	DD	imagerel $unwind$tuplerepr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tuplerepr DD 0aa701H
	DD	0d74a7H
	DD	0c54a2H
	DD	0e340eH
	DD	0d00a720eH
	DD	06006c008H
xdata	ENDS
;	COMDAT ??_C@_02HFKPAGIC@?0?$CJ?$AA@
CONST	SEGMENT
??_C@_02HFKPAGIC@?0?$CJ?$AA@ DB ',)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01PKGAHCOL@?$CJ?$AA@
CONST	SEGMENT
??_C@_01PKGAHCOL@?$CJ?$AA@ DB ')', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@KOCNJJAM@?5while?5getting?5the?5repr?5of?5a?5tup@
CONST	SEGMENT
??_C@_0CD@KOCNJJAM@?5while?5getting?5the?5repr?5of?5a?5tup@ DB ' while ge'
	DB	'tting the repr of a tuple', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09CHIONKKD@tuplerepr?$AA@
CONST	SEGMENT
??_C@_09CHIONKKD@tuplerepr?$AA@ DB 'tuplerepr', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01ODHLEDKK@?$CI?$AA@
CONST	SEGMENT
??_C@_01ODHLEDKK@?$CI?$AA@ DB '(', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05ONELGEGO@?$CI?4?4?4?$CJ?$AA@
CONST	SEGMENT
??_C@_05ONELGEGO@?$CI?4?4?4?$CJ?$AA@ DB '(...)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02KEGNLNML@?0?5?$AA@
CONST	SEGMENT
??_C@_02KEGNLNML@?0?5?$AA@ DB ', ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HCKGKOFO@?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_02HCKGKOFO@?$CI?$CJ?$AA@ DB '()', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT tuplerepr
_TEXT	SEGMENT
acc$ = 48
v$ = 96
tuplerepr PROC						; COMDAT

; 279  : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	56		 push	 rsi
  00006	41 54		 push	 r12
  00008	41 55		 push	 r13
  0000a	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 280  :     Py_ssize_t i, n;
; 281  :     PyObject *s = NULL;
; 282  :     _PyAccu acc;
; 283  :     static PyObject *sep = NULL;
; 284  : 
; 285  :     n = Py_SIZE(v);

  0000e	4c 8b 61 60	 mov	 r12, QWORD PTR [rcx+96]
  00012	33 f6		 xor	 esi, esi
  00014	4c 8b e9	 mov	 r13, rcx
  00017	8b de		 mov	 ebx, esi

; 286  :     if (n == 0)

  00019	4d 85 e4	 test	 r12, r12
  0001c	75 1b		 jne	 SHORT $LN38@tuplerepr

; 287  :         return PyUnicode_FromString("()");

  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02HCKGKOFO@?$CI?$CJ?$AA@
  00025	e8 00 00 00 00	 call	 PyUnicode_FromString

; 340  : }

  0002a	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  0002f	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00033	41 5d		 pop	 r13
  00035	41 5c		 pop	 r12
  00037	5e		 pop	 rsi
  00038	c3		 ret	 0
$LN38@tuplerepr:

; 288  : 
; 289  :     if (sep == NULL) {

  00039	48 39 1d 00 00
	00 00		 cmp	 QWORD PTR ?sep@?1??tuplerepr@@9@9, rbx
  00040	75 27		 jne	 SHORT $LN36@tuplerepr

; 290  :         sep = PyUnicode_FromString(", ");

  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02KEGNLNML@?0?5?$AA@
  00049	e8 00 00 00 00	 call	 PyUnicode_FromString
  0004e	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?sep@?1??tuplerepr@@9@9, rax

; 291  :         if (sep == NULL)

  00055	48 85 c0	 test	 rax, rax
  00058	75 0f		 jne	 SHORT $LN36@tuplerepr

; 340  : }

  0005a	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  0005f	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00063	41 5d		 pop	 r13
  00065	41 5c		 pop	 r12
  00067	5e		 pop	 rsi
  00068	c3		 ret	 0
$LN36@tuplerepr:

; 292  :             return NULL;
; 293  :     }
; 294  : 
; 295  :     /* While not mutable, it is still possible to end up with a cycle in a
; 296  :        tuple through an object that stores itself within a tuple (and thus
; 297  :        infinitely asks for the repr of itself). This should only be
; 298  :        possible within a type. */
; 299  :     i = Py_ReprEnter((PyObject *)v);

  00069	49 8b cd	 mov	 rcx, r13
  0006c	e8 00 00 00 00	 call	 Py_ReprEnter

; 300  :     if (i != 0) {

  00071	85 c0		 test	 eax, eax
  00073	74 23		 je	 SHORT $LN35@tuplerepr

; 301  :         return i > 0 ? PyUnicode_FromString("(...)") : NULL;

  00075	7e 0f		 jle	 SHORT $LN41@tuplerepr
  00077	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05ONELGEGO@?$CI?4?4?4?$CJ?$AA@
  0007e	e8 00 00 00 00	 call	 PyUnicode_FromString
  00083	48 8b f0	 mov	 rsi, rax
$LN41@tuplerepr:
  00086	48 8b c6	 mov	 rax, rsi

; 340  : }

  00089	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  0008e	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00092	41 5d		 pop	 r13
  00094	41 5c		 pop	 r12
  00096	5e		 pop	 rsi
  00097	c3		 ret	 0
$LN35@tuplerepr:

; 302  :     }
; 303  : 
; 304  :     if (_PyAccu_Init(&acc))

  00098	48 8d 4c 24 30	 lea	 rcx, QWORD PTR acc$[rsp]
  0009d	48 89 6c 24 60	 mov	 QWORD PTR [rsp+96], rbp
  000a2	48 89 7c 24 68	 mov	 QWORD PTR [rsp+104], rdi
  000a7	e8 00 00 00 00	 call	 _PyAccu_Init
  000ac	85 c0		 test	 eax, eax
  000ae	0f 85 ff 01 00
	00		 jne	 $error$20460

; 305  :         goto error;
; 306  : 
; 307  :     s = PyUnicode_FromString("(");

  000b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01ODHLEDKK@?$CI?$AA@
  000bb	e8 00 00 00 00	 call	 PyUnicode_FromString
  000c0	48 8b d8	 mov	 rbx, rax

; 308  :     if (s == NULL || _PyAccu_Accumulate(&acc, s))

  000c3	48 85 c0	 test	 rax, rax
  000c6	0f 84 e7 01 00
	00		 je	 $error$20460
  000cc	48 8d 4c 24 30	 lea	 rcx, QWORD PTR acc$[rsp]
  000d1	48 8b d0	 mov	 rdx, rax
  000d4	e8 00 00 00 00	 call	 _PyAccu_Accumulate
  000d9	85 c0		 test	 eax, eax
  000db	0f 85 d2 01 00
	00		 jne	 $error$20460

; 309  :         goto error;
; 310  :     Py_CLEAR(s);

  000e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  000e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09CHIONKKD@tuplerepr?$AA@
  000ef	4c 8b cb	 mov	 r9, rbx
  000f2	41 b8 36 01 00
	00		 mov	 r8d, 310		; 00000136H
  000f8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00100	e8 00 00 00 00	 call	 _PyParallel_Guard
  00105	85 c0		 test	 eax, eax
  00107	75 0b		 jne	 SHORT $LN30@tuplerepr
  00109	48 8b cb	 mov	 rcx, rbx
  0010c	48 8b de	 mov	 rbx, rsi
  0010f	e8 00 00 00 00	 call	 _Py_DecRef
$LN30@tuplerepr:

; 311  : 
; 312  :     /* Do repr() on each element. */
; 313  :     for (i = 0; i < n; ++i) {

  00114	48 8b fe	 mov	 rdi, rsi
  00117	4d 85 e4	 test	 r12, r12
  0011a	0f 8e 1d 01 00
	00		 jle	 $LN25@tuplerepr
  00120	49 8d 6d 70	 lea	 rbp, QWORD PTR [r13+112]
$LL27@tuplerepr:

; 314  :         if (Py_EnterRecursiveCall(" while getting the repr of a tuple"))

  00124	e8 00 00 00 00	 call	 _Py_PXCTX
  00129	85 c0		 test	 eax, eax
  0012b	74 07		 je	 SHORT $LN43@tuplerepr
  0012d	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00132	eb 07		 jmp	 SHORT $LN44@tuplerepr
$LN43@tuplerepr:
  00134	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
$LN44@tuplerepr:
  0013b	ff 40 18	 inc	 DWORD PTR [rax+24]
  0013e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00141	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _Py_CheckRecursionLimit
  00147	7e 14		 jle	 SHORT $LN24@tuplerepr
  00149	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@KOCNJJAM@?5while?5getting?5the?5repr?5of?5a?5tup@
  00150	e8 00 00 00 00	 call	 _Py_CheckRecursiveCall
  00155	85 c0		 test	 eax, eax
  00157	0f 85 56 01 00
	00		 jne	 $error$20460
$LN24@tuplerepr:

; 315  :             goto error;
; 316  :         s = PyObject_Repr(v->ob_item[i]);

  0015d	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
  00161	e8 00 00 00 00	 call	 PyObject_Repr
  00166	48 8b d8	 mov	 rbx, rax

; 317  :         Py_LeaveRecursiveCall();

  00169	e8 00 00 00 00	 call	 _Py_PXCTX
  0016e	85 c0		 test	 eax, eax
  00170	74 0a		 je	 SHORT $LN45@tuplerepr
  00172	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00177	4c 8b d8	 mov	 r11, rax
  0017a	eb 07		 jmp	 SHORT $LN46@tuplerepr
$LN45@tuplerepr:
  0017c	4c 8b 1d 00 00
	00 00		 mov	 r11, QWORD PTR _PyThreadState_Current
$LN46@tuplerepr:
  00183	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _Py_CheckRecursionLimit
  00189	83 f8 64	 cmp	 eax, 100		; 00000064H
  0018c	7e 05		 jle	 SHORT $LN47@tuplerepr
  0018e	83 c0 ce	 add	 eax, -50		; ffffffffffffffceH
  00191	eb 06		 jmp	 SHORT $LN48@tuplerepr
$LN47@tuplerepr:
  00193	c1 f8 02	 sar	 eax, 2
  00196	8d 04 40	 lea	 eax, DWORD PTR [rax+rax*2]
$LN48@tuplerepr:
  00199	41 ff 4b 18	 dec	 DWORD PTR [r11+24]
  0019d	41 39 43 18	 cmp	 DWORD PTR [r11+24], eax
  001a1	7d 1b		 jge	 SHORT $LN22@tuplerepr
  001a3	e8 00 00 00 00	 call	 _Py_PXCTX
  001a8	85 c0		 test	 eax, eax
  001aa	74 07		 je	 SHORT $LN49@tuplerepr
  001ac	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  001b1	eb 07		 jmp	 SHORT $LN50@tuplerepr
$LN49@tuplerepr:
  001b3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
$LN50@tuplerepr:
  001ba	40 88 70 1c	 mov	 BYTE PTR [rax+28], sil
$LN22@tuplerepr:

; 318  :         if (i > 0 && _PyAccu_Accumulate(&acc, sep))

  001be	48 85 ff	 test	 rdi, rdi
  001c1	7e 19		 jle	 SHORT $LN19@tuplerepr
  001c3	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?sep@?1??tuplerepr@@9@9
  001ca	48 8d 4c 24 30	 lea	 rcx, QWORD PTR acc$[rsp]
  001cf	e8 00 00 00 00	 call	 _PyAccu_Accumulate
  001d4	85 c0		 test	 eax, eax
  001d6	0f 85 d7 00 00
	00		 jne	 $error$20460
$LN19@tuplerepr:

; 319  :             goto error;
; 320  :         if (s == NULL || _PyAccu_Accumulate(&acc, s))

  001dc	48 85 db	 test	 rbx, rbx
  001df	0f 84 ce 00 00
	00		 je	 $error$20460
  001e5	48 8d 4c 24 30	 lea	 rcx, QWORD PTR acc$[rsp]
  001ea	48 8b d3	 mov	 rdx, rbx
  001ed	e8 00 00 00 00	 call	 _PyAccu_Accumulate
  001f2	85 c0		 test	 eax, eax
  001f4	0f 85 b9 00 00
	00		 jne	 $error$20460

; 321  :             goto error;
; 322  :         Py_CLEAR(s);

  001fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00201	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09CHIONKKD@tuplerepr?$AA@
  00208	4c 8b cb	 mov	 r9, rbx
  0020b	41 b8 42 01 00
	00		 mov	 r8d, 322		; 00000142H
  00211	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00219	e8 00 00 00 00	 call	 _PyParallel_Guard
  0021e	85 c0		 test	 eax, eax
  00220	75 0b		 jne	 SHORT $LN15@tuplerepr
  00222	48 8b cb	 mov	 rcx, rbx
  00225	48 8b de	 mov	 rbx, rsi
  00228	e8 00 00 00 00	 call	 _Py_DecRef
$LN15@tuplerepr:

; 311  : 
; 312  :     /* Do repr() on each element. */
; 313  :     for (i = 0; i < n; ++i) {

  0022d	48 ff c7	 inc	 rdi
  00230	48 83 c5 08	 add	 rbp, 8
  00234	49 3b fc	 cmp	 rdi, r12
  00237	0f 8c e7 fe ff
	ff		 jl	 $LL27@tuplerepr
$LN25@tuplerepr:

; 323  :     }
; 324  :     if (n > 1)
; 325  :         s = PyUnicode_FromString(")");

  0023d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01PKGAHCOL@?$CJ?$AA@
  00244	49 83 fc 01	 cmp	 r12, 1
  00248	7f 07		 jg	 SHORT $LN58@tuplerepr

; 326  :     else
; 327  :         s = PyUnicode_FromString(",)");

  0024a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02HFKPAGIC@?0?$CJ?$AA@
$LN58@tuplerepr:
  00251	e8 00 00 00 00	 call	 PyUnicode_FromString
  00256	48 8b d8	 mov	 rbx, rax

; 328  :     if (s == NULL || _PyAccu_Accumulate(&acc, s))

  00259	48 85 c0	 test	 rax, rax
  0025c	74 55		 je	 SHORT $error$20460
  0025e	48 8d 4c 24 30	 lea	 rcx, QWORD PTR acc$[rsp]
  00263	48 8b d0	 mov	 rdx, rax
  00266	e8 00 00 00 00	 call	 _PyAccu_Accumulate
  0026b	85 c0		 test	 eax, eax
  0026d	75 44		 jne	 SHORT $error$20460

; 329  :         goto error;
; 330  :     Py_CLEAR(s);

  0026f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00276	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09CHIONKKD@tuplerepr?$AA@
  0027d	4c 8b cb	 mov	 r9, rbx
  00280	41 b8 4a 01 00
	00		 mov	 r8d, 330		; 0000014aH
  00286	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0028e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00293	85 c0		 test	 eax, eax
  00295	75 08		 jne	 SHORT $LN7@tuplerepr
  00297	48 8b cb	 mov	 rcx, rbx
  0029a	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@tuplerepr:

; 331  : 
; 332  :     Py_ReprLeave((PyObject *)v);

  0029f	49 8b cd	 mov	 rcx, r13
  002a2	e8 00 00 00 00	 call	 Py_ReprLeave

; 333  :     return _PyAccu_Finish(&acc);

  002a7	48 8d 4c 24 30	 lea	 rcx, QWORD PTR acc$[rsp]
  002ac	e8 00 00 00 00	 call	 _PyAccu_Finish
  002b1	eb 21		 jmp	 SHORT $LN57@tuplerepr
$error$20460:

; 334  : 
; 335  : error:
; 336  :     _PyAccu_Destroy(&acc);

  002b3	48 8d 4c 24 30	 lea	 rcx, QWORD PTR acc$[rsp]
  002b8	e8 00 00 00 00	 call	 _PyAccu_Destroy

; 337  :     Py_XDECREF(s);

  002bd	48 85 db	 test	 rbx, rbx
  002c0	74 08		 je	 SHORT $LN3@tuplerepr
  002c2	48 8b cb	 mov	 rcx, rbx
  002c5	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@tuplerepr:

; 338  :     Py_ReprLeave((PyObject *)v);

  002ca	49 8b cd	 mov	 rcx, r13
  002cd	e8 00 00 00 00	 call	 Py_ReprLeave

; 339  :     return NULL;

  002d2	33 c0		 xor	 eax, eax
$LN57@tuplerepr:

; 340  : }

  002d4	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
  002d9	48 8b 7c 24 68	 mov	 rdi, QWORD PTR [rsp+104]
  002de	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  002e3	48 83 c4 40	 add	 rsp, 64			; 00000040H
  002e7	41 5d		 pop	 r13
  002e9	41 5c		 pop	 r12
  002eb	5e		 pop	 rsi
  002ec	c3		 ret	 0
tuplerepr ENDP
_TEXT	ENDS
EXTRN	PyObject_Hash:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$tuplehash DD imagerel tuplehash
	DD	imagerel tuplehash+160
	DD	imagerel $unwind$tuplehash
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tuplehash DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0c016321aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT tuplehash
_TEXT	SEGMENT
v$ = 48
tuplehash PROC						; COMDAT

; 352  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 358  :     x = 0x345678UL;
; 359  :     p = v->ob_item;
; 360  :     while (--len >= 0) {

  0001a	48 8b 79 60	 mov	 rdi, QWORD PTR [rcx+96]
  0001e	bd 43 42 0f 00	 mov	 ebp, 1000003		; 000f4243H
  00023	bb 78 56 34 00	 mov	 ebx, 3430008		; 00345678H
  00028	48 ff cf	 dec	 rdi
  0002b	4c 8d 61 70	 lea	 r12, QWORD PTR [rcx+112]
  0002f	78 35		 js	 SHORT $LN3@tuplehash

; 353  :     register Py_uhash_t x;  /* Unsigned for defined overflow behavior. */
; 354  :     register Py_hash_t y;
; 355  :     register Py_ssize_t len = Py_SIZE(v);
; 356  :     register PyObject **p;
; 357  :     Py_uhash_t mult = _PyHASH_MULTIPLIER;

  00031	48 8d b4 3f 58
	42 01 00	 lea	 rsi, QWORD PTR [rdi+rdi+82520]
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@tuplehash:

; 361  :         y = PyObject_Hash(*p++);

  00040	49 8b 0c 24	 mov	 rcx, QWORD PTR [r12]
  00044	e8 00 00 00 00	 call	 PyObject_Hash
  00049	49 83 c4 08	 add	 r12, 8

; 362  :         if (y == -1)

  0004d	48 83 f8 ff	 cmp	 rax, -1
  00051	74 47		 je	 SHORT $LN8@tuplehash

; 364  :         x = (x ^ y) * mult;

  00053	48 33 d8	 xor	 rbx, rax
  00056	48 0f af dd	 imul	 rbx, rbp

; 365  :         /* the cast might truncate len; that doesn't change hash stability */
; 366  :         mult += (Py_hash_t)(82520UL + len + len);

  0005a	48 03 ee	 add	 rbp, rsi
  0005d	48 83 ee 02	 sub	 rsi, 2
  00061	48 ff cf	 dec	 rdi
  00064	79 da		 jns	 SHORT $LL4@tuplehash
$LN3@tuplehash:

; 367  :     }
; 368  :     x += 97531UL;

  00066	48 81 c3 fb 7c
	01 00		 add	 rbx, 97531		; 00017cfbH

; 369  :     if (x == (Py_uhash_t)-1)

  0006d	48 c7 c0 fe ff
	ff ff		 mov	 rax, -2
  00074	48 83 fb ff	 cmp	 rbx, -1
  00078	48 0f 44 d8	 cmove	 rbx, rax

; 370  :         x = -2;
; 371  :     return x;

  0007c	48 8b c3	 mov	 rax, rbx
$LN5@tuplehash:

; 372  : }

  0007f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00084	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00089	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0008e	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00093	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00097	41 5c		 pop	 r12
  00099	c3		 ret	 0
$LN8@tuplehash:

; 363  :             return -1;

  0009a	48 83 c8 ff	 or	 rax, -1
  0009e	eb df		 jmp	 SHORT $LN5@tuplehash
tuplehash ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT tuplelength
_TEXT	SEGMENT
a$ = 8
tuplelength PROC					; COMDAT

; 377  :     return Py_SIZE(a);

  00000	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]

; 378  : }

  00004	c3		 ret	 0
tuplelength ENDP
_TEXT	ENDS
EXTRN	PyObject_RichCompareBool:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$tuplecontains DD imagerel tuplecontains
	DD	imagerel tuplecontains+89
	DD	imagerel $unwind$tuplecontains
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tuplecontains DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT tuplecontains
_TEXT	SEGMENT
a$ = 48
el$ = 56
tuplecontains PROC					; COMDAT

; 382  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 383  :     Py_ssize_t i;
; 384  :     int cmp;
; 385  : 
; 386  :     for (i = 0, cmp = 0 ; cmp == 0 && i < Py_SIZE(a); ++i)

  00014	33 db		 xor	 ebx, ebx
  00016	48 8b ea	 mov	 rbp, rdx
  00019	48 8b f9	 mov	 rdi, rcx
  0001c	8b c3		 mov	 eax, ebx
  0001e	48 8d 71 70	 lea	 rsi, QWORD PTR [rcx+112]
$LL3@tupleconta:
  00022	48 3b 5f 60	 cmp	 rbx, QWORD PTR [rdi+96]
  00026	7d 1c		 jge	 SHORT $LN8@tupleconta

; 387  :         cmp = PyObject_RichCompareBool(el, PyTuple_GET_ITEM(a, i),
; 388  :                                            Py_EQ);

  00028	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  0002b	41 b8 02 00 00
	00		 mov	 r8d, 2
  00031	48 8b cd	 mov	 rcx, rbp
  00034	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  00039	48 ff c3	 inc	 rbx
  0003c	48 83 c6 08	 add	 rsi, 8
  00040	85 c0		 test	 eax, eax
  00042	74 de		 je	 SHORT $LL3@tupleconta
$LN8@tupleconta:

; 389  :     return cmp;
; 390  : }

  00044	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00049	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0004e	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5f		 pop	 rdi
  00058	c3		 ret	 0
tuplecontains ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$tupleitem DD imagerel tupleitem
	DD	imagerel tupleitem+27
	DD	imagerel $unwind$tupleitem
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$tupleitem DD imagerel tupleitem+27
	DD	imagerel tupleitem+117
	DD	imagerel $chain$0$tupleitem
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$tupleitem DD imagerel tupleitem+117
	DD	imagerel tupleitem+149
	DD	imagerel $chain$1$tupleitem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$tupleitem DD 021H
	DD	imagerel tupleitem
	DD	imagerel tupleitem+27
	DD	imagerel $unwind$tupleitem
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$tupleitem DD 020521H
	DD	087405H
	DD	imagerel tupleitem
	DD	imagerel tupleitem+27
	DD	imagerel $unwind$tupleitem
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tupleitem DD 040a01H
	DD	09340aH
	DD	06006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\tupleobject.c
xdata	ENDS
;	COMDAT tupleitem
_TEXT	SEGMENT
a$ = 64
i$ = 72
tupleitem PROC						; COMDAT

; 394  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	48 8b f1	 mov	 rsi, rcx

; 395  :     if (i < 0 || i >= Py_SIZE(a)) {

  00010	48 85 d2	 test	 rdx, rdx
  00013	78 60		 js	 SHORT $LN1@tupleitem
  00015	48 3b 51 60	 cmp	 rdx, QWORD PTR [rcx+96]
  00019	7d 5a		 jge	 SHORT $LN1@tupleitem

; 397  :         return NULL;
; 398  :     }
; 399  :     Py_INCREF(a->ob_item[i]);

  0001b	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  00020	48 8b 7c d1 70	 mov	 rdi, QWORD PTR [rcx+rdx*8+112]
  00025	e8 00 00 00 00	 call	 _Py_PXCTX
  0002a	85 c0		 test	 eax, eax
  0002c	75 32		 jne	 SHORT $LN6@tupleitem
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0003c	4c 8b cf	 mov	 r9, rdi
  0003f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00045	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0004d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00052	85 c0		 test	 eax, eax
  00054	75 06		 jne	 SHORT $LN5@tupleitem
  00056	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  0005a	74 04		 je	 SHORT $LN6@tupleitem
$LN5@tupleitem:
  0005c	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN6@tupleitem:

; 400  :     return a->ob_item[i];

  00060	48 8b 44 de 70	 mov	 rax, QWORD PTR [rsi+rbx*8+112]
  00065	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 401  : }

  0006a	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  0006f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00073	5e		 pop	 rsi
  00074	c3		 ret	 0
$LN1@tupleitem:

; 396  :         PyErr_SetString(PyExc_IndexError, "tuple index out of range");

  00075	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
  0007c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@KFCEHIN@tuple?5index?5out?5of?5range?$AA@
  00083	e8 00 00 00 00	 call	 PyErr_SetString

; 401  : }

  00088	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  0008d	33 c0		 xor	 eax, eax
  0008f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00093	5e		 pop	 rsi
  00094	c3		 ret	 0
tupleitem ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$tupleslice DD imagerel tupleslice
	DD	imagerel tupleslice+122
	DD	imagerel $unwind$tupleslice
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$tupleslice DD imagerel tupleslice+122
	DD	imagerel tupleslice+227
	DD	imagerel $chain$1$tupleslice
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$tupleslice DD imagerel tupleslice+227
	DD	imagerel tupleslice+248
	DD	imagerel $chain$2$tupleslice
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$tupleslice DD 021H
	DD	imagerel tupleslice
	DD	imagerel tupleslice+122
	DD	imagerel $unwind$tupleslice
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$tupleslice DD 020521H
	DD	085405H
	DD	imagerel tupleslice
	DD	imagerel tupleslice+122
	DD	imagerel $unwind$tupleslice
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tupleslice DD 086a01H
	DD	09c46aH
	DD	0b640fH
	DD	0a340fH
	DD	0700b520fH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\tupleobject.c
xdata	ENDS
;	COMDAT tupleslice
_TEXT	SEGMENT
a$ = 64
ilow$ = 72
ihigh$ = 80
tupleslice PROC						; COMDAT

; 406  : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 407  :     register PyTupleObject *np;
; 408  :     PyObject **src, **dest;
; 409  :     register Py_ssize_t i;
; 410  :     Py_ssize_t len;
; 411  :     if (ilow < 0)

  0000f	33 c0		 xor	 eax, eax
  00011	48 85 d2	 test	 rdx, rdx
  00014	48 8b fa	 mov	 rdi, rdx
  00017	48 0f 48 f8	 cmovs	 rdi, rax

; 412  :         ilow = 0;
; 413  :     if (ihigh > Py_SIZE(a))

  0001b	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  0001f	49 8b f0	 mov	 rsi, r8
  00022	4c 3b c0	 cmp	 r8, rax
  00025	48 8b d9	 mov	 rbx, rcx
  00028	48 0f 4f f0	 cmovg	 rsi, rax

; 414  :         ihigh = Py_SIZE(a);
; 415  :     if (ihigh < ilow)

  0002c	48 3b f7	 cmp	 rsi, rdi
  0002f	48 0f 4c f7	 cmovl	 rsi, rdi

; 416  :         ihigh = ilow;
; 417  :     if (ilow == 0 && ihigh == Py_SIZE(a) && PyTuple_CheckExact(a)) {

  00033	48 85 ff	 test	 rdi, rdi
  00036	75 2a		 jne	 SHORT $LN5@tupleslice
  00038	48 3b f0	 cmp	 rsi, rax
  0003b	75 25		 jne	 SHORT $LN5@tupleslice
  0003d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTuple_Type
  00044	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00048	75 18		 jne	 SHORT $LN5@tupleslice

; 418  :         Py_INCREF(a);

  0004a	e8 00 00 00 00	 call	 _Py_IncRef

; 419  :         return (PyObject *)a;

  0004f	48 8b c3	 mov	 rax, rbx

; 433  : }

  00052	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00057	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  0005c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00060	5f		 pop	 rdi
  00061	c3		 ret	 0
$LN5@tupleslice:

; 420  :     }
; 421  :     len = ihigh - ilow;

  00062	48 2b f7	 sub	 rsi, rdi
  00065	4c 89 64 24 48	 mov	 QWORD PTR [rsp+72], r12

; 422  :     np = (PyTupleObject *)PyTuple_New(len);

  0006a	48 8b ce	 mov	 rcx, rsi
  0006d	e8 00 00 00 00	 call	 PyTuple_New
  00072	4c 8b e0	 mov	 r12, rax

; 423  :     if (np == NULL)

  00075	48 85 c0	 test	 rax, rax
  00078	74 69		 je	 SHORT $LN17@tupleslice
$LN4@tupleslice:
  0007a	48 89 6c 24 40	 mov	 QWORD PTR [rsp+64], rbp

; 424  :         return NULL;
; 425  :     src = a->ob_item + ilow;

  0007f	48 8d 6c fb 70	 lea	 rbp, QWORD PTR [rbx+rdi*8+112]

; 426  :     dest = np->ob_item;

  00084	48 8d 78 70	 lea	 rdi, QWORD PTR [rax+112]

; 427  :     for (i = 0; i < len; i++) {

  00088	48 85 f6	 test	 rsi, rsi
  0008b	7e 4e		 jle	 SHORT $LN1@tupleslice
  0008d	48 2b ef	 sub	 rbp, rdi
$LL3@tupleslice:

; 428  :         PyObject *v = src[i];

  00090	48 8b 1c 2f	 mov	 rbx, QWORD PTR [rdi+rbp]

; 429  :         Py_INCREF(v);

  00094	e8 00 00 00 00	 call	 _Py_PXCTX
  00099	85 c0		 test	 eax, eax
  0009b	75 32		 jne	 SHORT $LN12@tupleslice
  0009d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000ab	4c 8b cb	 mov	 r9, rbx
  000ae	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000b4	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000bc	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c1	85 c0		 test	 eax, eax
  000c3	75 06		 jne	 SHORT $LN11@tupleslice
  000c5	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000c9	74 04		 je	 SHORT $LN12@tupleslice
$LN11@tupleslice:
  000cb	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN12@tupleslice:

; 430  :         dest[i] = v;

  000cf	48 89 1f	 mov	 QWORD PTR [rdi], rbx
  000d2	48 83 c7 08	 add	 rdi, 8
  000d6	48 ff ce	 dec	 rsi
  000d9	75 b5		 jne	 SHORT $LL3@tupleslice
$LN1@tupleslice:
  000db	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]

; 431  :     }
; 432  :     return (PyObject *)np;

  000e0	49 8b c4	 mov	 rax, r12
$LN17@tupleslice:

; 433  : }

  000e3	4c 8b 64 24 48	 mov	 r12, QWORD PTR [rsp+72]
  000e8	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000ed	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  000f2	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000f6	5f		 pop	 rdi
  000f7	c3		 ret	 0
tupleslice ENDP
_TEXT	ENDS
PUBLIC	PyTuple_GetSlice
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyTuple_GetSlice DD imagerel $LN5
	DD	imagerel $LN5+58
	DD	imagerel $unwind$PyTuple_GetSlice
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyTuple_GetSlice DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyTuple_GetSlice
_TEXT	SEGMENT
op$ = 48
i$ = 56
j$ = 64
PyTuple_GetSlice PROC					; COMDAT

; 437  : {

$LN5:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 438  :     if (op == NULL || !PyTuple_Check(op)) {

  00004	48 85 c9	 test	 rcx, rcx
  00007	74 19		 je	 SHORT $LN1@PyTuple_Ge@3
  00009	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0000d	f7 80 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rax+256], 67108864 ; 04000000H
  00017	74 09		 je	 SHORT $LN1@PyTuple_Ge@3

; 441  :     }
; 442  :     return tupleslice((PyTupleObject *)op, i, j);
; 443  : }

  00019	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001d	e9 00 00 00 00	 jmp	 tupleslice
$LN1@PyTuple_Ge@3:

; 439  :         PyErr_BadInternalCall();

  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00029	ba b7 01 00 00	 mov	 edx, 439		; 000001b7H
  0002e	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 440  :         return NULL;

  00033	33 c0		 xor	 eax, eax

; 441  :     }
; 442  :     return tupleslice((PyTupleObject *)op, i, j);
; 443  : }

  00035	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00039	c3		 ret	 0
PyTuple_GetSlice ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DD@KJFLILAG@can?5only?5concatenate?5tuple?5?$CInot?5@ ; `string'
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_TypeError:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$tupleconcat DD imagerel tupleconcat
	DD	imagerel tupleconcat+88
	DD	imagerel $unwind$tupleconcat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$tupleconcat DD imagerel tupleconcat+88
	DD	imagerel tupleconcat+120
	DD	imagerel $chain$0$tupleconcat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$tupleconcat DD imagerel tupleconcat+120
	DD	imagerel tupleconcat+142
	DD	imagerel $chain$6$tupleconcat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$tupleconcat DD imagerel tupleconcat+142
	DD	imagerel tupleconcat+281
	DD	imagerel $chain$7$tupleconcat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$tupleconcat DD imagerel tupleconcat+281
	DD	imagerel tupleconcat+404
	DD	imagerel $chain$8$tupleconcat
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$tupleconcat DD 021H
	DD	imagerel tupleconcat+120
	DD	imagerel tupleconcat+142
	DD	imagerel $chain$6$tupleconcat
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$tupleconcat DD 020521H
	DD	07e405H
	DD	imagerel tupleconcat+120
	DD	imagerel tupleconcat+142
	DD	imagerel $chain$6$tupleconcat
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$tupleconcat DD 0a1621H
	DD	087416H
	DD	0e640fH
	DD	0d540aH
	DD	0c3405H
	DD	06f400H
	DD	imagerel tupleconcat
	DD	imagerel tupleconcat+88
	DD	imagerel $unwind$tupleconcat
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$tupleconcat DD 020521H
	DD	06f405H
	DD	imagerel tupleconcat
	DD	imagerel tupleconcat+88
	DD	imagerel $unwind$tupleconcat
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tupleconcat DD 030801H
	DD	0d0048208H
	DD	0c002H
xdata	ENDS
;	COMDAT ??_C@_0DD@KJFLILAG@can?5only?5concatenate?5tuple?5?$CInot?5@
CONST	SEGMENT
??_C@_0DD@KJFLILAG@can?5only?5concatenate?5tuple?5?$CInot?5@ DB 'can only'
	DB	' concatenate tuple (not "%.200s") to tuple', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\tupleobject.c
CONST	ENDS
;	COMDAT tupleconcat
_TEXT	SEGMENT
a$ = 96
bb$ = 104
tupleconcat PROC					; COMDAT

; 447  : {

  00000	41 54		 push	 r12
  00002	41 55		 push	 r13
  00004	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 448  :     register Py_ssize_t size;
; 449  :     register Py_ssize_t i;
; 450  :     PyObject **src, **dest;
; 451  :     PyTupleObject *np;
; 452  :     if (!PyTuple_Check(bb)) {

  00008	4c 8b 42 58	 mov	 r8, QWORD PTR [rdx+88]
  0000c	4c 8b ea	 mov	 r13, rdx
  0000f	4c 8b e1	 mov	 r12, rcx
  00012	41 f7 80 00 01
	00 00 00 00 00
	04		 test	 DWORD PTR [r8+256], 67108864 ; 04000000H
  0001d	75 22		 jne	 SHORT $LN9@tupleconca

; 453  :         PyErr_Format(PyExc_TypeError,
; 454  :              "can only concatenate tuple (not \"%.200s\") to tuple",
; 455  :                  Py_TYPE(bb)->tp_name);

  0001f	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00023	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@KJFLILAG@can?5only?5concatenate?5tuple?5?$CInot?5@
  00031	e8 00 00 00 00	 call	 PyErr_Format

; 456  :         return NULL;

  00036	33 c0		 xor	 eax, eax

; 481  : #undef b
; 482  : }

  00038	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0003c	41 5d		 pop	 r13
  0003e	41 5c		 pop	 r12
  00040	c3		 ret	 0
$LN9@tupleconca:

; 457  :     }
; 458  : #define b ((PyTupleObject *)bb)
; 459  :     size = Py_SIZE(a) + Py_SIZE(b);

  00041	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00045	48 03 4a 60	 add	 rcx, QWORD PTR [rdx+96]

; 460  :     if (size < 0)

  00049	79 0d		 jns	 SHORT $LN8@tupleconca

; 481  : #undef b
; 482  : }

  0004b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0004f	41 5d		 pop	 r13
  00051	41 5c		 pop	 r12
  00053	e9 00 00 00 00	 jmp	 PyErr_NoMemory
$LN8@tupleconca:
  00058	4c 89 7c 24 30	 mov	 QWORD PTR [rsp+48], r15

; 461  :         return PyErr_NoMemory();
; 462  :     np = (PyTupleObject *) PyTuple_New(size);

  0005d	e8 00 00 00 00	 call	 PyTuple_New
  00062	4c 8b f8	 mov	 r15, rax

; 463  :     if (np == NULL) {

  00065	48 85 c0	 test	 rax, rax
  00068	75 0e		 jne	 SHORT $LN7@tupleconca
  0006a	4c 8b 7c 24 30	 mov	 r15, QWORD PTR [rsp+48]

; 481  : #undef b
; 482  : }

  0006f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00073	41 5d		 pop	 r13
  00075	41 5c		 pop	 r12
  00077	c3		 ret	 0
$LN7@tupleconca:
  00078	48 89 5c 24 60	 mov	 QWORD PTR [rsp+96], rbx
  0007d	48 89 6c 24 68	 mov	 QWORD PTR [rsp+104], rbp
  00082	48 89 74 24 70	 mov	 QWORD PTR [rsp+112], rsi

; 464  :         return NULL;
; 465  :     }
; 466  :     src = a->ob_item;
; 467  :     dest = np->ob_item;
; 468  :     for (i = 0; i < Py_SIZE(a); i++) {

  00087	33 f6		 xor	 esi, esi
  00089	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  0008e	4c 89 74 24 38	 mov	 QWORD PTR [rsp+56], r14
  00093	4d 8d 74 24 70	 lea	 r14, QWORD PTR [r12+112]
  00098	48 8d 78 70	 lea	 rdi, QWORD PTR [rax+112]
  0009c	8b ee		 mov	 ebp, esi
  0009e	49 39 74 24 60	 cmp	 QWORD PTR [r12+96], rsi
  000a3	7e 5b		 jle	 SHORT $LN4@tupleconca
  000a5	4c 2b f7	 sub	 r14, rdi
  000a8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL6@tupleconca:

; 469  :         PyObject *v = src[i];

  000b0	49 8b 1c 3e	 mov	 rbx, QWORD PTR [r14+rdi]

; 470  :         Py_INCREF(v);

  000b4	e8 00 00 00 00	 call	 _Py_PXCTX
  000b9	85 c0		 test	 eax, eax
  000bb	75 32		 jne	 SHORT $LN13@tupleconca
  000bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000cb	4c 8b cb	 mov	 r9, rbx
  000ce	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000d4	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000dc	e8 00 00 00 00	 call	 _PyParallel_Guard
  000e1	85 c0		 test	 eax, eax
  000e3	75 06		 jne	 SHORT $LN12@tupleconca
  000e5	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000e9	74 04		 je	 SHORT $LN13@tupleconca
$LN12@tupleconca:
  000eb	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN13@tupleconca:

; 471  :         dest[i] = v;

  000ef	48 89 1f	 mov	 QWORD PTR [rdi], rbx
  000f2	48 ff c5	 inc	 rbp
  000f5	48 83 c7 08	 add	 rdi, 8
  000f9	49 3b 6c 24 60	 cmp	 rbp, QWORD PTR [r12+96]
  000fe	7c b0		 jl	 SHORT $LL6@tupleconca
$LN4@tupleconca:

; 472  :     }
; 473  :     src = b->ob_item;
; 474  :     dest = np->ob_item + Py_SIZE(a);

  00100	49 8b 44 24 60	 mov	 rax, QWORD PTR [r12+96]
  00105	4c 8b 74 24 38	 mov	 r14, QWORD PTR [rsp+56]
  0010a	49 8d 6d 70	 lea	 rbp, QWORD PTR [r13+112]
  0010e	49 8d 7c c7 70	 lea	 rdi, QWORD PTR [r15+rax*8+112]

; 475  :     for (i = 0; i < Py_SIZE(b); i++) {

  00113	49 39 75 60	 cmp	 QWORD PTR [r13+96], rsi
  00117	7e 56		 jle	 SHORT $LN1@tupleconca
  00119	48 2b ef	 sub	 rbp, rdi
  0011c	0f 1f 40 00	 npad	 4
$LL3@tupleconca:

; 476  :         PyObject *v = src[i];

  00120	48 8b 1c 2f	 mov	 rbx, QWORD PTR [rdi+rbp]

; 477  :         Py_INCREF(v);

  00124	e8 00 00 00 00	 call	 _Py_PXCTX
  00129	85 c0		 test	 eax, eax
  0012b	75 32		 jne	 SHORT $LN17@tupleconca
  0012d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00134	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0013b	4c 8b cb	 mov	 r9, rbx
  0013e	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00144	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0014c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00151	85 c0		 test	 eax, eax
  00153	75 06		 jne	 SHORT $LN16@tupleconca
  00155	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00159	74 04		 je	 SHORT $LN17@tupleconca
$LN16@tupleconca:
  0015b	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN17@tupleconca:

; 478  :         dest[i] = v;

  0015f	48 89 1f	 mov	 QWORD PTR [rdi], rbx
  00162	48 ff c6	 inc	 rsi
  00165	48 83 c7 08	 add	 rdi, 8
  00169	49 3b 75 60	 cmp	 rsi, QWORD PTR [r13+96]
  0016d	7c b1		 jl	 SHORT $LL3@tupleconca
$LN1@tupleconca:
  0016f	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  00174	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
  00179	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  0017e	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]

; 479  :     }
; 480  :     return (PyObject *)np;

  00183	49 8b c7	 mov	 rax, r15
  00186	4c 8b 7c 24 30	 mov	 r15, QWORD PTR [rsp+48]

; 481  : #undef b
; 482  : }

  0018b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0018f	41 5d		 pop	 r13
  00191	41 5c		 pop	 r12
  00193	c3		 ret	 0
tupleconcat ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$tuplerepeat DD imagerel tuplerepeat
	DD	imagerel tuplerepeat+183
	DD	imagerel $unwind$tuplerepeat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$tuplerepeat DD imagerel tuplerepeat+183
	DD	imagerel tuplerepeat+216
	DD	imagerel $chain$0$tuplerepeat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$tuplerepeat DD imagerel tuplerepeat+216
	DD	imagerel tuplerepeat+230
	DD	imagerel $chain$3$tuplerepeat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$tuplerepeat DD imagerel tuplerepeat+230
	DD	imagerel tuplerepeat+352
	DD	imagerel $chain$5$tuplerepeat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$tuplerepeat DD imagerel tuplerepeat+352
	DD	imagerel tuplerepeat+375
	DD	imagerel $chain$6$tuplerepeat
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$tuplerepeat DD 021H
	DD	imagerel tuplerepeat+216
	DD	imagerel tuplerepeat+230
	DD	imagerel $chain$3$tuplerepeat
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$tuplerepeat DD 040a21H
	DD	0c740aH
	DD	0a3405H
	DD	imagerel tuplerepeat+216
	DD	imagerel tuplerepeat+230
	DD	imagerel $chain$3$tuplerepeat
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$tuplerepeat DD 040521H
	DD	0b5405H
	DD	0dd400H
	DD	imagerel tuplerepeat
	DD	imagerel tuplerepeat+183
	DD	imagerel $unwind$tuplerepeat
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$tuplerepeat DD 020521H
	DD	0dd405H
	DD	imagerel tuplerepeat
	DD	imagerel tuplerepeat+183
	DD	imagerel $unwind$tuplerepeat
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tuplerepeat DD 040a01H
	DD	0e006520aH
	DD	06002c004H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\tupleobject.c
xdata	ENDS
;	COMDAT tuplerepeat
_TEXT	SEGMENT
a$ = 80
n$ = 88
tuplerepeat PROC					; COMDAT

; 486  : {

  00000	40 56		 push	 rsi
  00002	41 54		 push	 r12
  00004	41 56		 push	 r14
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 487  :     Py_ssize_t i, j;
; 488  :     Py_ssize_t size;
; 489  :     PyTupleObject *np;
; 490  :     PyObject **p, **items;
; 491  :     if (n < 0)

  0000a	45 33 f6	 xor	 r14d, r14d
  0000d	48 85 d2	 test	 rdx, rdx
  00010	48 8b f1	 mov	 rsi, rcx

; 492  :         n = 0;
; 493  :     if (Py_SIZE(a) == 0 || n == 1) {

  00013	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00017	4c 8b e2	 mov	 r12, rdx
  0001a	4d 0f 48 e6	 cmovs	 r12, r14
  0001e	48 85 c9	 test	 rcx, rcx
  00021	74 06		 je	 SHORT $LN11@tuplerepea
  00023	49 83 fc 01	 cmp	 r12, 1
  00027	75 68		 jne	 SHORT $LN9@tuplerepea
$LN11@tuplerepea:

; 494  :         if (PyTuple_CheckExact(a)) {

  00029	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTuple_Type
  00030	48 39 46 58	 cmp	 QWORD PTR [rsi+88], rax
  00034	75 48		 jne	 SHORT $LN10@tuplerepea

; 495  :             /* Since tuples are immutable, we can return a shared
; 496  :                copy in this case */
; 497  :             Py_INCREF(a);

  00036	e8 00 00 00 00	 call	 _Py_PXCTX
  0003b	85 c0		 test	 eax, eax
  0003d	75 32		 jne	 SHORT $LN17@tuplerepea
  0003f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0004d	4c 8b ce	 mov	 r9, rsi
  00050	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00056	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0005e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00063	85 c0		 test	 eax, eax
  00065	75 06		 jne	 SHORT $LN16@tuplerepea
  00067	f6 46 20 20	 test	 BYTE PTR [rsi+32], 32	; 00000020H
  0006b	74 04		 je	 SHORT $LN17@tuplerepea
$LN16@tuplerepea:
  0006d	48 ff 46 50	 inc	 QWORD PTR [rsi+80]
$LN17@tuplerepea:

; 498  :             return (PyObject *)a;

  00071	48 8b c6	 mov	 rax, rsi

; 519  : }

  00074	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00078	41 5e		 pop	 r14
  0007a	41 5c		 pop	 r12
  0007c	5e		 pop	 rsi
  0007d	c3		 ret	 0
$LN10@tuplerepea:

; 499  :         }
; 500  :         if (Py_SIZE(a) == 0)

  0007e	48 85 c9	 test	 rcx, rcx
  00081	75 0e		 jne	 SHORT $LN9@tuplerepea

; 519  : }

  00083	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00087	41 5e		 pop	 r14
  00089	41 5c		 pop	 r12
  0008b	5e		 pop	 rsi
  0008c	e9 00 00 00 00	 jmp	 PyTuple_New
$LN9@tuplerepea:

; 501  :             return PyTuple_New(0);
; 502  :     }
; 503  :     if (n > PY_SSIZE_T_MAX / Py_SIZE(a))

  00091	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  0009b	48 99		 cdq
  0009d	48 f7 f9	 idiv	 rcx
  000a0	4c 3b e0	 cmp	 r12, rax
  000a3	7e 0e		 jle	 SHORT $LN8@tuplerepea

; 519  : }

  000a5	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a9	41 5e		 pop	 r14
  000ab	41 5c		 pop	 r12
  000ad	5e		 pop	 rsi
  000ae	e9 00 00 00 00	 jmp	 PyErr_NoMemory
$LN8@tuplerepea:

; 504  :         return PyErr_NoMemory();
; 505  :     size = Py_SIZE(a) * n;

  000b3	49 0f af cc	 imul	 rcx, r12
  000b7	4c 89 6c 24 68	 mov	 QWORD PTR [rsp+104], r13

; 506  :     np = (PyTupleObject *) PyTuple_New(size);

  000bc	e8 00 00 00 00	 call	 PyTuple_New
  000c1	4c 8b e8	 mov	 r13, rax

; 507  :     if (np == NULL)

  000c4	48 85 c0	 test	 rax, rax
  000c7	75 0f		 jne	 SHORT $LN7@tuplerepea
  000c9	4c 8b 6c 24 68	 mov	 r13, QWORD PTR [rsp+104]

; 519  : }

  000ce	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d2	41 5e		 pop	 r14
  000d4	41 5c		 pop	 r12
  000d6	5e		 pop	 rsi
  000d7	c3		 ret	 0
$LN7@tuplerepea:
  000d8	48 89 6c 24 58	 mov	 QWORD PTR [rsp+88], rbp

; 508  :         return NULL;
; 509  :     p = np->ob_item;

  000dd	48 8d 68 70	 lea	 rbp, QWORD PTR [rax+112]

; 510  :     items = a->ob_item;
; 511  :     for (i = 0; i < n; i++) {

  000e1	4d 85 e4	 test	 r12, r12
  000e4	7e 7a		 jle	 SHORT $LN4@tuplerepea
  000e6	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  000eb	48 89 7c 24 60	 mov	 QWORD PTR [rsp+96], rdi
$LL6@tuplerepea:

; 512  :         for (j = 0; j < Py_SIZE(a); j++) {

  000f0	49 8b fe	 mov	 rdi, r14
  000f3	4c 39 76 60	 cmp	 QWORD PTR [rsi+96], r14
  000f7	7e 58		 jle	 SHORT $LN5@tuplerepea
  000f9	0f 1f 80 00 00
	00 00		 npad	 7
$LL3@tuplerepea:

; 513  :             *p = items[j];

  00100	48 8b 5c fe 70	 mov	 rbx, QWORD PTR [rsi+rdi*8+112]
  00105	48 89 5d 00	 mov	 QWORD PTR [rbp], rbx

; 514  :             Py_INCREF(*p);

  00109	e8 00 00 00 00	 call	 _Py_PXCTX
  0010e	85 c0		 test	 eax, eax
  00110	75 32		 jne	 SHORT $LN21@tuplerepea
  00112	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00119	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00120	4c 8b cb	 mov	 r9, rbx
  00123	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00129	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00131	e8 00 00 00 00	 call	 _PyParallel_Guard
  00136	85 c0		 test	 eax, eax
  00138	75 06		 jne	 SHORT $LN20@tuplerepea
  0013a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0013e	74 04		 je	 SHORT $LN21@tuplerepea
$LN20@tuplerepea:
  00140	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN21@tuplerepea:

; 515  :             p++;

  00144	48 ff c7	 inc	 rdi
  00147	48 83 c5 08	 add	 rbp, 8
  0014b	48 3b 7e 60	 cmp	 rdi, QWORD PTR [rsi+96]
  0014f	7c af		 jl	 SHORT $LL3@tuplerepea
$LN5@tuplerepea:

; 510  :     items = a->ob_item;
; 511  :     for (i = 0; i < n; i++) {

  00151	49 ff cc	 dec	 r12
  00154	75 9a		 jne	 SHORT $LL6@tuplerepea
  00156	48 8b 7c 24 60	 mov	 rdi, QWORD PTR [rsp+96]
  0015b	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
$LN4@tuplerepea:
  00160	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]

; 516  :         }
; 517  :     }
; 518  :     return (PyObject *) np;

  00165	49 8b c5	 mov	 rax, r13
  00168	4c 8b 6c 24 68	 mov	 r13, QWORD PTR [rsp+104]

; 519  : }

  0016d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00171	41 5e		 pop	 r14
  00173	41 5c		 pop	 r12
  00175	5e		 pop	 rsi
  00176	c3		 ret	 0
tuplerepeat ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@DLHBEOMF@tuple?4index?$CIx?$CJ?3?5x?5not?5in?5tuple?$AA@ ; `string'
PUBLIC	??_C@_0N@GKKDPPOM@O?$HMO?$CGO?$CG?3index?$AA@	; `string'
EXTRN	PyLong_FromSsize_t:PROC
EXTRN	PyExc_ValueError:QWORD
EXTRN	PyArg_ParseTuple:PROC
EXTRN	_PyEval_SliceIndex:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$tupleindex DD imagerel tupleindex
	DD	imagerel tupleindex+88
	DD	imagerel $unwind$tupleindex
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$tupleindex DD imagerel tupleindex+88
	DD	imagerel tupleindex+227
	DD	imagerel $chain$0$tupleindex
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$tupleindex DD imagerel tupleindex+227
	DD	imagerel tupleindex+247
	DD	imagerel $chain$2$tupleindex
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$tupleindex DD 020021H
	DD	083400H
	DD	imagerel tupleindex
	DD	imagerel tupleindex+88
	DD	imagerel $unwind$tupleindex
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$tupleindex DD 020521H
	DD	083405H
	DD	imagerel tupleindex
	DD	imagerel tupleindex+88
	DD	imagerel $unwind$tupleindex
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tupleindex DD 030901H
	DD	070058209H
	DD	06004H
xdata	ENDS
;	COMDAT ??_C@_0BP@DLHBEOMF@tuple?4index?$CIx?$CJ?3?5x?5not?5in?5tuple?$AA@
CONST	SEGMENT
??_C@_0BP@DLHBEOMF@tuple?4index?$CIx?$CJ?3?5x?5not?5in?5tuple?$AA@ DB 'tu'
	DB	'ple.index(x): x not in tuple', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GKKDPPOM@O?$HMO?$CGO?$CG?3index?$AA@
CONST	SEGMENT
??_C@_0N@GKKDPPOM@O?$HMO?$CGO?$CG?3index?$AA@ DB 'O|O&O&:index', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT tupleindex
_TEXT	SEGMENT
stop$ = 96
self$ = 96
args$ = 104
start$ = 112
v$ = 120
tupleindex PROC						; COMDAT

; 523  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	56		 push	 rsi
  00004	57		 push	 rdi
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 524  :     Py_ssize_t i, start=0, stop=Py_SIZE(self);

  00009	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  0000d	4c 8b d2	 mov	 r10, rdx

; 525  :     PyObject *v;
; 526  : 
; 527  :     if (!PyArg_ParseTuple(args, "O|O&O&:index", &v,
; 528  :                                 _PyEval_SliceIndex, &start,
; 529  :                                 _PyEval_SliceIndex, &stop))

  00010	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_PyEval_SliceIndex
  00017	49 89 43 08	 mov	 QWORD PTR [r11+8], rax
  0001b	49 8d 43 08	 lea	 rax, QWORD PTR [r11+8]
  0001f	48 8b f1	 mov	 rsi, rcx
  00022	49 89 43 d8	 mov	 QWORD PTR [r11-40], rax
  00026	49 8d 43 18	 lea	 rax, QWORD PTR [r11+24]
  0002a	4d 89 4b d0	 mov	 QWORD PTR [r11-48], r9
  0002e	4d 8d 43 20	 lea	 r8, QWORD PTR [r11+32]
  00032	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@GKKDPPOM@O?$HMO?$CGO?$CG?3index?$AA@
  00039	33 ff		 xor	 edi, edi
  0003b	49 8b ca	 mov	 rcx, r10
  0003e	49 89 43 c8	 mov	 QWORD PTR [r11-56], rax
  00042	49 89 7b 18	 mov	 QWORD PTR [r11+24], rdi
  00046	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0004b	85 c0		 test	 eax, eax
  0004d	75 09		 jne	 SHORT $LN11@tupleindex

; 530  :         return NULL;

  0004f	33 c0		 xor	 eax, eax

; 550  : }

  00051	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00055	5f		 pop	 rdi
  00056	5e		 pop	 rsi
  00057	c3		 ret	 0
$LN11@tupleindex:
  00058	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx

; 531  :     if (start < 0) {

  0005d	48 8b 5c 24 70	 mov	 rbx, QWORD PTR start$[rsp]
  00062	48 85 db	 test	 rbx, rbx
  00065	79 0d		 jns	 SHORT $LN9@tupleindex

; 532  :         start += Py_SIZE(self);

  00067	48 03 5e 60	 add	 rbx, QWORD PTR [rsi+96]

; 533  :         if (start < 0)

  0006b	48 0f 48 df	 cmovs	 rbx, rdi
  0006f	48 89 5c 24 70	 mov	 QWORD PTR start$[rsp], rbx
$LN9@tupleindex:

; 534  :             start = 0;
; 535  :     }
; 536  :     if (stop < 0) {

  00074	48 8b 44 24 60	 mov	 rax, QWORD PTR stop$[rsp]
  00079	48 85 c0	 test	 rax, rax
  0007c	79 0d		 jns	 SHORT $LN7@tupleindex

; 537  :         stop += Py_SIZE(self);

  0007e	48 03 46 60	 add	 rax, QWORD PTR [rsi+96]

; 538  :         if (stop < 0)

  00082	48 0f 48 c7	 cmovs	 rax, rdi
  00086	48 89 44 24 60	 mov	 QWORD PTR stop$[rsp], rax
$LN7@tupleindex:

; 539  :             stop = 0;
; 540  :     }
; 541  :     for (i = start; i < stop && i < Py_SIZE(self); i++) {

  0008b	48 3b d8	 cmp	 rbx, rax
  0008e	7d 32		 jge	 SHORT $LN4@tupleindex
  00090	48 8d 7c de 70	 lea	 rdi, QWORD PTR [rsi+rbx*8+112]
$LL6@tupleindex:
  00095	48 3b 5e 60	 cmp	 rbx, QWORD PTR [rsi+96]
  00099	7d 27		 jge	 SHORT $LN4@tupleindex

; 542  :         int cmp = PyObject_RichCompareBool(self->ob_item[i], v, Py_EQ);

  0009b	48 8b 54 24 78	 mov	 rdx, QWORD PTR v$[rsp]
  000a0	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  000a3	41 b8 02 00 00
	00		 mov	 r8d, 2
  000a9	e8 00 00 00 00	 call	 PyObject_RichCompareBool

; 543  :         if (cmp > 0)

  000ae	85 c0		 test	 eax, eax
  000b0	7f 31		 jg	 SHORT $LN15@tupleindex

; 545  :         else if (cmp < 0)

  000b2	78 21		 js	 SHORT $LN16@tupleindex

; 539  :             stop = 0;
; 540  :     }
; 541  :     for (i = start; i < stop && i < Py_SIZE(self); i++) {

  000b4	48 ff c3	 inc	 rbx
  000b7	48 83 c7 08	 add	 rdi, 8
  000bb	48 3b 5c 24 60	 cmp	 rbx, QWORD PTR stop$[rsp]
  000c0	7c d3		 jl	 SHORT $LL6@tupleindex
$LN4@tupleindex:

; 546  :             return NULL;
; 547  :     }
; 548  :     PyErr_SetString(PyExc_ValueError, "tuple.index(x): x not in tuple");

  000c2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@DLHBEOMF@tuple?4index?$CIx?$CJ?3?5x?5not?5in?5tuple?$AA@
  000d0	e8 00 00 00 00	 call	 PyErr_SetString
$LN16@tupleindex:

; 549  :     return NULL;

  000d5	33 c0		 xor	 eax, eax
  000d7	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 550  : }

  000dc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e0	5f		 pop	 rdi
  000e1	5e		 pop	 rsi
  000e2	c3		 ret	 0
$LN15@tupleindex:

; 544  :             return PyLong_FromSsize_t(i);

  000e3	48 8b cb	 mov	 rcx, rbx
  000e6	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  000eb	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 550  : }

  000f0	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000f4	5f		 pop	 rdi
  000f5	5e		 pop	 rsi
  000f6	c3		 ret	 0
tupleindex ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$tuplecount DD imagerel tuplecount
	DD	imagerel tuplecount+128
	DD	imagerel $unwind$tuplecount
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tuplecount DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0c016321aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT tuplecount
_TEXT	SEGMENT
self$ = 48
v$ = 56
tuplecount PROC						; COMDAT

; 554  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 555  :     Py_ssize_t count = 0;

  0001a	33 ff		 xor	 edi, edi
  0001c	4c 8b e2	 mov	 r12, rdx
  0001f	48 8b e9	 mov	 rbp, rcx

; 556  :     Py_ssize_t i;
; 557  : 
; 558  :     for (i = 0; i < Py_SIZE(self); i++) {

  00022	8b df		 mov	 ebx, edi
  00024	48 39 59 60	 cmp	 QWORD PTR [rcx+96], rbx
  00028	7e 2f		 jle	 SHORT $LN4@tuplecount

; 555  :     Py_ssize_t count = 0;

  0002a	48 8d 71 70	 lea	 rsi, QWORD PTR [rcx+112]
  0002e	66 90		 npad	 2
$LL6@tuplecount:

; 559  :         int cmp = PyObject_RichCompareBool(self->ob_item[i], v, Py_EQ);

  00030	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  00033	41 b8 02 00 00
	00		 mov	 r8d, 2
  00039	49 8b d4	 mov	 rdx, r12
  0003c	e8 00 00 00 00	 call	 PyObject_RichCompareBool

; 560  :         if (cmp > 0)

  00041	85 c0		 test	 eax, eax
  00043	7e 05		 jle	 SHORT $LN12@tuplecount

; 561  :             count++;

  00045	48 ff c7	 inc	 rdi
  00048	eb 02		 jmp	 SHORT $LN5@tuplecount
$LN12@tuplecount:

; 562  :         else if (cmp < 0)

  0004a	78 30		 js	 SHORT $LN10@tuplecount
$LN5@tuplecount:

; 556  :     Py_ssize_t i;
; 557  : 
; 558  :     for (i = 0; i < Py_SIZE(self); i++) {

  0004c	48 ff c3	 inc	 rbx
  0004f	48 83 c6 08	 add	 rsi, 8
  00053	48 3b 5d 60	 cmp	 rbx, QWORD PTR [rbp+96]
  00057	7c d7		 jl	 SHORT $LL6@tuplecount
$LN4@tuplecount:

; 564  :     }
; 565  :     return PyLong_FromSsize_t(count);

  00059	48 8b cf	 mov	 rcx, rdi
  0005c	e8 00 00 00 00	 call	 PyLong_FromSsize_t
$LN7@tuplecount:

; 566  : }

  00061	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00066	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0006b	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00070	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00075	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00079	41 5c		 pop	 r12
  0007b	c3		 ret	 0
$LN10@tuplecount:

; 563  :             return NULL;

  0007c	33 c0		 xor	 eax, eax
  0007e	eb e1		 jmp	 SHORT $LN7@tuplecount
tuplecount ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@FOEPELLG@tupletraverse?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$tupletraverse DD imagerel tupletraverse
	DD	imagerel tupletraverse+126
	DD	imagerel $unwind$tupletraverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tupletraverse DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0O@FOEPELLG@tupletraverse?$AA@
CONST	SEGMENT
??_C@_0O@FOEPELLG@tupletraverse?$AA@ DB 'tupletraverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT tupletraverse
_TEXT	SEGMENT
o$ = 48
visit$ = 56
arg$ = 64
tupletraverse PROC					; COMDAT

; 570  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 571  :     Py_ssize_t i;
; 572  : 
; 573  :     for (i = Py_SIZE(o); --i >= 0; )

  00014	48 8b 59 60	 mov	 rbx, QWORD PTR [rcx+96]
  00018	49 8b f0	 mov	 rsi, r8
  0001b	48 8b ea	 mov	 rbp, rdx
  0001e	48 ff cb	 dec	 rbx
  00021	78 44		 js	 SHORT $LN13@tupletrave
  00023	48 8d 7c d9 70	 lea	 rdi, QWORD PTR [rcx+rbx*8+112]
$LL8@tupletrave:

; 574  :         Py_VISIT(o->ob_item[i]);

  00028	e8 00 00 00 00	 call	 _Py_PXCTX
  0002d	85 c0		 test	 eax, eax
  0002f	74 1c		 je	 SHORT $LN3@tupletrave
  00031	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@FOEPELLG@tupletraverse?$AA@
  0003f	45 33 c9	 xor	 r9d, r9d
  00042	41 b8 3e 02 00
	00		 mov	 r8d, 574		; 0000023eH
  00048	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@tupletrave:
  0004d	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  00050	48 85 c9	 test	 rcx, rcx
  00053	74 09		 je	 SHORT $LN5@tupletrave
  00055	48 8b d6	 mov	 rdx, rsi
  00058	ff d5		 call	 rbp
  0005a	85 c0		 test	 eax, eax
  0005c	75 0b		 jne	 SHORT $LN9@tupletrave
$LN5@tupletrave:

; 571  :     Py_ssize_t i;
; 572  : 
; 573  :     for (i = Py_SIZE(o); --i >= 0; )

  0005e	48 83 ef 08	 sub	 rdi, 8
  00062	48 ff cb	 dec	 rbx
  00065	79 c1		 jns	 SHORT $LL8@tupletrave
$LN13@tupletrave:

; 575  :     return 0;

  00067	33 c0		 xor	 eax, eax
$LN9@tupletrave:

; 576  : }

  00069	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0006e	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00073	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00078	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007c	5f		 pop	 rdi
  0007d	c3		 ret	 0
tupletraverse ENDP
_TEXT	ENDS
EXTRN	_Py_NotImplementedStruct:BYTE
EXTRN	PyObject_RichCompare:PROC
EXTRN	_Py_TrueStruct:BYTE
EXTRN	_Py_FalseStruct:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$tuplerichcompare DD imagerel tuplerichcompare
	DD	imagerel tuplerichcompare+59
	DD	imagerel $unwind$tuplerichcompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$tuplerichcompare DD imagerel tuplerichcompare+59
	DD	imagerel tuplerichcompare+404
	DD	imagerel $chain$4$tuplerichcompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$tuplerichcompare DD imagerel tuplerichcompare+404
	DD	imagerel tuplerichcompare+569
	DD	imagerel $chain$6$tuplerichcompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$tuplerichcompare DD imagerel tuplerichcompare+569
	DD	imagerel tuplerichcompare+656
	DD	imagerel $chain$7$tuplerichcompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$tuplerichcompare DD imagerel tuplerichcompare+656
	DD	imagerel tuplerichcompare+680
	DD	imagerel $chain$8$tuplerichcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$tuplerichcompare DD 0a0021H
	DD	06c400H
	DD	077400H
	DD	0f6400H
	DD	0e5400H
	DD	0d3400H
	DD	imagerel tuplerichcompare
	DD	imagerel tuplerichcompare+59
	DD	imagerel $unwind$tuplerichcompare
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$tuplerichcompare DD 021H
	DD	imagerel tuplerichcompare
	DD	imagerel tuplerichcompare+59
	DD	imagerel $unwind$tuplerichcompare
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$tuplerichcompare DD 0a0021H
	DD	06c400H
	DD	077400H
	DD	0f6400H
	DD	0e5400H
	DD	0d3400H
	DD	imagerel tuplerichcompare
	DD	imagerel tuplerichcompare+59
	DD	imagerel $unwind$tuplerichcompare
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$tuplerichcompare DD 0a2321H
	DD	06c423H
	DD	07741eH
	DD	0f6413H
	DD	0e540aH
	DD	0d3405H
	DD	imagerel tuplerichcompare
	DD	imagerel tuplerichcompare+59
	DD	imagerel $unwind$tuplerichcompare
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tuplerichcompare DD 040a01H
	DD	0f006720aH
	DD	0d002e004H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\tupleobject.c
xdata	ENDS
;	COMDAT tuplerichcompare
_TEXT	SEGMENT
tv347 = 96
v$ = 96
w$ = 104
op$ = 112
tuplerichcompare PROC					; COMDAT

; 580  : {

  00000	41 55		 push	 r13
  00002	41 56		 push	 r14
  00004	41 57		 push	 r15
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 581  :     PyTupleObject *vt, *wt;
; 582  :     Py_ssize_t i;
; 583  :     Py_ssize_t vlen, wlen;
; 584  : 
; 585  :     if (!PyTuple_Check(v) || !PyTuple_Check(w))

  0000a	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0000e	4d 63 e8	 movsxd	 r13, r8d
  00011	4c 8b fa	 mov	 r15, rdx
  00014	f7 80 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rax+256], 67108864 ; 04000000H
  0001e	4c 8b f1	 mov	 r14, rcx
  00021	0f 84 12 02 00
	00		 je	 $LN21@tuplerichc
  00027	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  0002b	f7 80 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rax+256], 67108864 ; 04000000H
  00035	0f 84 fe 01 00
	00		 je	 $LN21@tuplerichc

; 587  : 
; 588  :     vt = (PyTupleObject *)v;
; 589  :     wt = (PyTupleObject *)w;
; 590  : 
; 591  :     vlen = Py_SIZE(vt);
; 592  :     wlen = Py_SIZE(wt);

  0003b	48 89 5c 24 68	 mov	 QWORD PTR [rsp+104], rbx
  00040	48 89 6c 24 70	 mov	 QWORD PTR [rsp+112], rbp
  00045	48 8b 6a 60	 mov	 rbp, QWORD PTR [rdx+96]
  00049	48 89 74 24 78	 mov	 QWORD PTR [rsp+120], rsi
  0004e	48 8b 71 60	 mov	 rsi, QWORD PTR [rcx+96]

; 593  : 
; 594  :     /* Note:  the corresponding code for lists has an "early out" test
; 595  :      * here when op is EQ or NE and the lengths differ.  That pays there,
; 596  :      * but Tim was unable to find any real code where EQ/NE tuple
; 597  :      * compares don't have the same length, so testing for it here would
; 598  :      * have cost without benefit.
; 599  :      */
; 600  : 
; 601  :     /* Search for the first index where items are different.
; 602  :      * Note that because tuples are immutable, it's safe to reuse
; 603  :      * vlen and wlen across the comparison calls.
; 604  :      */
; 605  :     for (i = 0; i < vlen && i < wlen; i++) {

  00052	33 db		 xor	 ebx, ebx
  00054	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  00059	4c 89 64 24 30	 mov	 QWORD PTR [rsp+48], r12
  0005e	8b fb		 mov	 edi, ebx
  00060	48 85 f6	 test	 rsi, rsi
  00063	7e 42		 jle	 SHORT $LN14@tuplerichc
  00065	48 8b c2	 mov	 rax, rdx
  00068	4c 8d 61 70	 lea	 r12, QWORD PTR [rcx+112]
  0006c	48 2b c1	 sub	 rax, rcx
  0006f	48 89 44 24 60	 mov	 QWORD PTR tv347[rsp], rax
$LL20@tuplerichc:
  00074	48 3b fd	 cmp	 rdi, rbp
  00077	7d 4c		 jge	 SHORT $LN43@tuplerichc

; 606  :         int k = PyObject_RichCompareBool(vt->ob_item[i],
; 607  :                                          wt->ob_item[i], Py_EQ);

  00079	4a 8b 14 20	 mov	 rdx, QWORD PTR [rax+r12]
  0007d	49 8b 0c 24	 mov	 rcx, QWORD PTR [r12]
  00081	41 b8 02 00 00
	00		 mov	 r8d, 2
  00087	e8 00 00 00 00	 call	 PyObject_RichCompareBool

; 608  :         if (k < 0)

  0008c	85 c0		 test	 eax, eax
  0008e	0f 88 9e 01 00
	00		 js	 $LN5@tuplerichc

; 609  :             return NULL;
; 610  :         if (!k)

  00094	74 2f		 je	 SHORT $LN43@tuplerichc

; 593  : 
; 594  :     /* Note:  the corresponding code for lists has an "early out" test
; 595  :      * here when op is EQ or NE and the lengths differ.  That pays there,
; 596  :      * but Tim was unable to find any real code where EQ/NE tuple
; 597  :      * compares don't have the same length, so testing for it here would
; 598  :      * have cost without benefit.
; 599  :      */
; 600  : 
; 601  :     /* Search for the first index where items are different.
; 602  :      * Note that because tuples are immutable, it's safe to reuse
; 603  :      * vlen and wlen across the comparison calls.
; 604  :      */
; 605  :     for (i = 0; i < vlen && i < wlen; i++) {

  00096	48 8b 44 24 60	 mov	 rax, QWORD PTR tv347[rsp]
  0009b	48 ff c7	 inc	 rdi
  0009e	49 83 c4 08	 add	 r12, 8
  000a2	48 3b fe	 cmp	 rdi, rsi
  000a5	7c cd		 jl	 SHORT $LL20@tuplerichc
$LN14@tuplerichc:

; 615  :         /* No more items to compare -- compare sizes */
; 616  :         int cmp;
; 617  :         PyObject *res;
; 618  :         switch (op) {

  000a7	41 83 fd 05	 cmp	 r13d, 5
  000ab	0f 87 81 01 00
	00		 ja	 $LN5@tuplerichc
  000b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:__ImageBase
  000b8	42 8b 8c aa 00
	00 00 00	 mov	 ecx, DWORD PTR $LN45@tuplerichc[rdx+r13*4]
  000c0	48 03 ca	 add	 rcx, rdx
  000c3	ff e1		 jmp	 rcx
$LN43@tuplerichc:

; 611  :             break;
; 612  :     }
; 613  : 
; 614  :     if (i >= vlen || i >= wlen) {

  000c5	48 3b fe	 cmp	 rdi, rsi
  000c8	7d dd		 jge	 SHORT $LN14@tuplerichc
  000ca	48 3b fd	 cmp	 rdi, rbp
  000cd	7d d8		 jge	 SHORT $LN14@tuplerichc

; 633  :     }
; 634  : 
; 635  :     /* We have an item that differs -- shortcuts for EQ/NE */
; 636  :     if (op == Py_EQ) {

  000cf	41 83 fd 02	 cmp	 r13d, 2
  000d3	75 4a		 jne	 SHORT $LN2@tuplerichc

; 637  :         Py_INCREF(Py_False);

  000d5	e8 00 00 00 00	 call	 _Py_PXCTX
  000da	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_Py_FalseStruct
  000e1	85 c0		 test	 eax, eax
  000e3	75 35		 jne	 SHORT $LN34@tuplerichc
  000e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000f3	4c 8b ce	 mov	 r9, rsi
  000f6	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000fc	44 89 6c 24 20	 mov	 DWORD PTR [rsp+32], r13d
  00101	e8 00 00 00 00	 call	 _PyParallel_Guard
  00106	85 c0		 test	 eax, eax
  00108	75 09		 jne	 SHORT $LN33@tuplerichc
  0010a	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  00111	74 07		 je	 SHORT $LN34@tuplerichc
$LN33@tuplerichc:
  00113	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN34@tuplerichc:

; 638  :         return Py_False;

  0011a	48 8b c6	 mov	 rax, rsi
  0011d	eb 51		 jmp	 SHORT $LN50@tuplerichc
$LN2@tuplerichc:

; 639  :     }
; 640  :     if (op == Py_NE) {

  0011f	41 83 fd 03	 cmp	 r13d, 3
  00123	75 6f		 jne	 SHORT $LN1@tuplerichc

; 641  :         Py_INCREF(Py_True);

  00125	e8 00 00 00 00	 call	 _Py_PXCTX
  0012a	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_TrueStruct
  00131	85 c0		 test	 eax, eax
  00133	75 38		 jne	 SHORT $LN38@tuplerichc
  00135	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0013c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00143	4c 8b cf	 mov	 r9, rdi
  00146	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0014c	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00154	e8 00 00 00 00	 call	 _PyParallel_Guard
  00159	85 c0		 test	 eax, eax
  0015b	75 09		 jne	 SHORT $LN37@tuplerichc
  0015d	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_TrueStruct+32, 32 ; 00000020H
  00164	74 07		 je	 SHORT $LN38@tuplerichc
$LN37@tuplerichc:
  00166	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_TrueStruct+80
$LN38@tuplerichc:

; 642  :         return Py_True;

  0016d	48 8b c7	 mov	 rax, rdi
$LN50@tuplerichc:
  00170	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]
  00175	48 8b 74 24 78	 mov	 rsi, QWORD PTR [rsp+120]
  0017a	48 8b 6c 24 70	 mov	 rbp, QWORD PTR [rsp+112]
  0017f	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  00184	4c 8b 64 24 30	 mov	 r12, QWORD PTR [rsp+48]

; 647  : }

  00189	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0018d	41 5f		 pop	 r15
  0018f	41 5e		 pop	 r14
  00191	41 5d		 pop	 r13
  00193	c3		 ret	 0
$LN1@tuplerichc:

; 643  :     }
; 644  : 
; 645  :     /* Compare the final item again using the proper operator */
; 646  :     return PyObject_RichCompare(vt->ob_item[i], wt->ob_item[i], op);

  00194	49 8b 54 ff 70	 mov	 rdx, QWORD PTR [r15+rdi*8+112]
  00199	49 8b 4c fe 70	 mov	 rcx, QWORD PTR [r14+rdi*8+112]
  0019e	45 8b c5	 mov	 r8d, r13d
  001a1	e8 00 00 00 00	 call	 PyObject_RichCompare
  001a6	eb c8		 jmp	 SHORT $LN50@tuplerichc
$LN11@tuplerichc:

; 619  :         case Py_LT: cmp = vlen <  wlen; break;

  001a8	48 3b f5	 cmp	 rsi, rbp
  001ab	0f 9c c3	 setl	 bl
  001ae	eb 26		 jmp	 SHORT $LN12@tuplerichc
$LN10@tuplerichc:

; 620  :         case Py_LE: cmp = vlen <= wlen; break;

  001b0	48 3b f5	 cmp	 rsi, rbp
  001b3	0f 9e c3	 setle	 bl
  001b6	eb 1e		 jmp	 SHORT $LN12@tuplerichc
$LN9@tuplerichc:

; 621  :         case Py_EQ: cmp = vlen == wlen; break;

  001b8	48 3b f5	 cmp	 rsi, rbp
  001bb	0f 94 c3	 sete	 bl
  001be	eb 16		 jmp	 SHORT $LN12@tuplerichc
$LN8@tuplerichc:

; 622  :         case Py_NE: cmp = vlen != wlen; break;

  001c0	48 3b f5	 cmp	 rsi, rbp
  001c3	0f 95 c3	 setne	 bl
  001c6	eb 0e		 jmp	 SHORT $LN12@tuplerichc
$LN7@tuplerichc:

; 623  :         case Py_GT: cmp = vlen >  wlen; break;

  001c8	48 3b f5	 cmp	 rsi, rbp
  001cb	0f 9f c3	 setg	 bl
  001ce	eb 06		 jmp	 SHORT $LN12@tuplerichc
$LN6@tuplerichc:

; 624  :         case Py_GE: cmp = vlen >= wlen; break;

  001d0	48 3b f5	 cmp	 rsi, rbp
  001d3	0f 9d c3	 setge	 bl
$LN12@tuplerichc:

; 626  :         }
; 627  :         if (cmp)

  001d6	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_TrueStruct
  001dd	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_Py_FalseStruct
  001e4	85 db		 test	 ebx, ebx
  001e6	48 0f 44 fe	 cmove	 rdi, rsi

; 628  :             res = Py_True;
; 629  :         else
; 630  :             res = Py_False;
; 631  :         Py_INCREF(res);

  001ea	e8 00 00 00 00	 call	 _Py_PXCTX
  001ef	85 c0		 test	 eax, eax
  001f1	0f 85 76 ff ff
	ff		 jne	 $LN38@tuplerichc
  001f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00205	4c 8b cf	 mov	 r9, rdi
  00208	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0020e	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00216	e8 00 00 00 00	 call	 _PyParallel_Guard
  0021b	85 c0		 test	 eax, eax
  0021d	75 0a		 jne	 SHORT $LN29@tuplerichc
  0021f	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  00223	0f 84 44 ff ff
	ff		 je	 $LN38@tuplerichc
$LN29@tuplerichc:
  00229	48 ff 47 50	 inc	 QWORD PTR [rdi+80]

; 632  :         return res;

  0022d	e9 3b ff ff ff	 jmp	 $LN38@tuplerichc
$LN5@tuplerichc:

; 625  :         default: return NULL; /* cannot happen */

  00232	33 c0		 xor	 eax, eax
  00234	e9 37 ff ff ff	 jmp	 $LN50@tuplerichc
$LN21@tuplerichc:

; 586  :         Py_RETURN_NOTIMPLEMENTED;

  00239	e8 00 00 00 00	 call	 _Py_PXCTX
  0023e	85 c0		 test	 eax, eax
  00240	75 3c		 jne	 SHORT $LN26@tuplerichc
  00242	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NotImplementedStruct
  00249	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00250	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00257	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0025d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00265	e8 00 00 00 00	 call	 _PyParallel_Guard
  0026a	85 c0		 test	 eax, eax
  0026c	75 09		 jne	 SHORT $LN25@tuplerichc
  0026e	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NotImplementedStruct+32, 32 ; 00000020H
  00275	74 07		 je	 SHORT $LN26@tuplerichc
$LN25@tuplerichc:
  00277	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NotImplementedStruct+80
$LN26@tuplerichc:
  0027e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct

; 647  : }

  00285	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00289	41 5f		 pop	 r15
  0028b	41 5e		 pop	 r14
  0028d	41 5d		 pop	 r13
  0028f	c3		 ret	 0
$LN45@tuplerichc:
  00290	00 00 00 00	 DD	 $LN11@tuplerichc
  00294	00 00 00 00	 DD	 $LN10@tuplerichc
  00298	00 00 00 00	 DD	 $LN9@tuplerichc
  0029c	00 00 00 00	 DD	 $LN8@tuplerichc
  002a0	00 00 00 00	 DD	 $LN7@tuplerichc
  002a4	00 00 00 00	 DD	 $LN6@tuplerichc
tuplerichcompare ENDP
_TEXT	ENDS
PUBLIC	??_C@_08GADGNMJP@?$HMO?3tuple?$AA@		; `string'
EXTRN	PySequence_Tuple:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$tuple_new DD imagerel tuple_new
	DD	imagerel tuple_new+120
	DD	imagerel $unwind$tuple_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tuple_new DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_08GADGNMJP@?$HMO?3tuple?$AA@
CONST	SEGMENT
??_C@_08GADGNMJP@?$HMO?3tuple?$AA@ DB '|O:tuple', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT tuple_new
_TEXT	SEGMENT
arg$ = 64
type$ = 64
args$ = 72
kwds$ = 80
tuple_new PROC						; COMDAT

; 654  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	4c 8b d2	 mov	 r10, rdx

; 655  :     PyObject *arg = NULL;
; 656  :     static char *kwlist[] = {"sequence", 0};
; 657  : 
; 658  :     if (type != &PyTuple_Type)

  00007	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyTuple_Type
  0000e	49 8b c0	 mov	 rax, r8
  00011	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR arg$[rsp], 0
  0001a	48 3b ca	 cmp	 rcx, rdx
  0001d	74 0d		 je	 SHORT $LN4@tuple_new

; 659  :         return tuple_subtype_new(type, args, kwds);

  0001f	49 8b d2	 mov	 rdx, r10
  00022	e8 00 00 00 00	 call	 tuple_subtype_new

; 667  : }

  00027	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0002b	c3		 ret	 0
$LN4@tuple_new:

; 660  :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "|O:tuple", kwlist, &arg))

  0002c	48 8d 4c 24 40	 lea	 rcx, QWORD PTR arg$[rsp]
  00031	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??tuple_new@@9@9
  00038	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08GADGNMJP@?$HMO?3tuple?$AA@
  0003f	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00044	49 8b ca	 mov	 rcx, r10
  00047	48 8b d0	 mov	 rdx, rax
  0004a	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  0004f	85 c0		 test	 eax, eax
  00051	75 07		 jne	 SHORT $LN3@tuple_new

; 661  :         return NULL;

  00053	33 c0		 xor	 eax, eax

; 667  : }

  00055	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00059	c3		 ret	 0
$LN3@tuple_new:

; 662  : 
; 663  :     if (arg == NULL)

  0005a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR arg$[rsp]
  0005f	48 85 c9	 test	 rcx, rcx
  00062	75 0a		 jne	 SHORT $LN2@tuple_new

; 664  :         return PyTuple_New(0);

  00064	e8 00 00 00 00	 call	 PyTuple_New

; 667  : }

  00069	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006d	c3		 ret	 0
$LN2@tuple_new:

; 665  :     else
; 666  :         return PySequence_Tuple(arg);

  0006e	e8 00 00 00 00	 call	 PySequence_Tuple

; 667  : }

  00073	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00077	c3		 ret	 0
tuple_new ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$tuple_subtype_new DD imagerel tuple_subtype_new
	DD	imagerel tuple_subtype_new+39
	DD	imagerel $unwind$tuple_subtype_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$tuple_subtype_new DD imagerel tuple_subtype_new+39
	DD	imagerel tuple_subtype_new+91
	DD	imagerel $chain$1$tuple_subtype_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$tuple_subtype_new DD imagerel tuple_subtype_new+91
	DD	imagerel tuple_subtype_new+96
	DD	imagerel $chain$3$tuple_subtype_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$tuple_subtype_new DD imagerel tuple_subtype_new+96
	DD	imagerel tuple_subtype_new+201
	DD	imagerel $chain$5$tuple_subtype_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$tuple_subtype_new DD imagerel tuple_subtype_new+201
	DD	imagerel tuple_subtype_new+230
	DD	imagerel $chain$6$tuple_subtype_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$tuple_subtype_new DD 021H
	DD	imagerel tuple_subtype_new+91
	DD	imagerel tuple_subtype_new+96
	DD	imagerel $chain$3$tuple_subtype_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$tuple_subtype_new DD 040a21H
	DD	06c40aH
	DD	0c7405H
	DD	imagerel tuple_subtype_new+91
	DD	imagerel tuple_subtype_new+96
	DD	imagerel $chain$3$tuple_subtype_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$tuple_subtype_new DD 040021H
	DD	0b6400H
	DD	0a5400H
	DD	imagerel tuple_subtype_new
	DD	imagerel tuple_subtype_new+39
	DD	imagerel $unwind$tuple_subtype_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$tuple_subtype_new DD 040a21H
	DD	0b640aH
	DD	0a5405H
	DD	imagerel tuple_subtype_new
	DD	imagerel tuple_subtype_new+39
	DD	imagerel $unwind$tuple_subtype_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tuple_subtype_new DD 030801H
	DD	0d0046208H
	DD	03002H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\tupleobject.c
xdata	ENDS
;	COMDAT tuple_subtype_new
_TEXT	SEGMENT
type$ = 80
args$ = 88
kwds$ = 96
tuple_subtype_new PROC					; COMDAT

; 671  : {

  00000	40 53		 push	 rbx
  00002	41 55		 push	 r13
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00008	48 8b d9	 mov	 rbx, rcx

; 672  :     PyObject *tmp, *newobj, *item;
; 673  :     Py_ssize_t i, n;
; 674  : 
; 675  :     assert(PyType_IsSubtype(type, &PyTuple_Type));
; 676  :     tmp = tuple_new(&PyTuple_Type, args, kwds);

  0000b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyTuple_Type
  00012	e8 00 00 00 00	 call	 tuple_new
  00017	4c 8b e8	 mov	 r13, rax

; 677  :     if (tmp == NULL)

  0001a	48 85 c0	 test	 rax, rax
  0001d	75 08		 jne	 SHORT $LN5@tuple_subt

; 690  : }

  0001f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00023	41 5d		 pop	 r13
  00025	5b		 pop	 rbx
  00026	c3		 ret	 0
$LN5@tuple_subt:
  00027	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp
  0002c	48 89 74 24 58	 mov	 QWORD PTR [rsp+88], rsi

; 678  :         return NULL;
; 679  :     assert(PyTuple_Check(tmp));
; 680  :     newobj = type->tp_alloc(type, n = PyTuple_GET_SIZE(tmp));

  00031	48 8b 70 60	 mov	 rsi, QWORD PTR [rax+96]
  00035	48 8b d6	 mov	 rdx, rsi
  00038	48 8b cb	 mov	 rcx, rbx
  0003b	ff 93 88 01 00
	00		 call	 QWORD PTR [rbx+392]
  00041	48 8b e8	 mov	 rbp, rax

; 681  :     if (newobj == NULL)

  00044	48 85 c0	 test	 rax, rax
  00047	75 12		 jne	 SHORT $LN4@tuple_subt
  00049	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  0004e	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]

; 690  : }

  00053	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00057	41 5d		 pop	 r13
  00059	5b		 pop	 rbx
  0005a	c3		 ret	 0
$LN4@tuple_subt:

; 682  :         return NULL;
; 683  :     for (i = 0; i < n; i++) {

  0005b	48 85 f6	 test	 rsi, rsi
  0005e	7e 69		 jle	 SHORT $LN1@tuple_subt
  00060	48 89 7c 24 60	 mov	 QWORD PTR [rsp+96], rdi
  00065	4c 89 64 24 30	 mov	 QWORD PTR [rsp+48], r12
  0006a	4d 8b e5	 mov	 r12, r13
  0006d	4c 2b e0	 sub	 r12, rax
  00070	48 8d 78 70	 lea	 rdi, QWORD PTR [rax+112]
$LL3@tuple_subt:

; 684  :         item = PyTuple_GET_ITEM(tmp, i);

  00074	49 8b 1c 3c	 mov	 rbx, QWORD PTR [r12+rdi]

; 685  :         Py_INCREF(item);

  00078	e8 00 00 00 00	 call	 _Py_PXCTX
  0007d	85 c0		 test	 eax, eax
  0007f	75 32		 jne	 SHORT $LN9@tuple_subt
  00081	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00088	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0008f	4c 8b cb	 mov	 r9, rbx
  00092	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00098	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000a0	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a5	85 c0		 test	 eax, eax
  000a7	75 06		 jne	 SHORT $LN8@tuple_subt
  000a9	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000ad	74 04		 je	 SHORT $LN9@tuple_subt
$LN8@tuple_subt:
  000af	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN9@tuple_subt:

; 686  :         PyTuple_SET_ITEM(newobj, i, item);

  000b3	48 89 1f	 mov	 QWORD PTR [rdi], rbx
  000b6	48 83 c7 08	 add	 rdi, 8
  000ba	48 ff ce	 dec	 rsi
  000bd	75 b5		 jne	 SHORT $LL3@tuple_subt
  000bf	4c 8b 64 24 30	 mov	 r12, QWORD PTR [rsp+48]
  000c4	48 8b 7c 24 60	 mov	 rdi, QWORD PTR [rsp+96]
$LN1@tuple_subt:

; 687  :     }
; 688  :     Py_DECREF(tmp);

  000c9	49 8b cd	 mov	 rcx, r13
  000cc	e8 00 00 00 00	 call	 _Py_DecRef
  000d1	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]

; 689  :     return newobj;

  000d6	48 8b c5	 mov	 rax, rbp
  000d9	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]

; 690  : }

  000de	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000e2	41 5d		 pop	 r13
  000e4	5b		 pop	 rbx
  000e5	c3		 ret	 0
tuple_subtype_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@MICCDJOP@tuple?5indices?5must?5be?5integers?0?5@ ; `string'
EXTRN	PySlice_GetIndicesEx:PROC
EXTRN	PySlice_Type:BYTE
EXTRN	PyErr_Occurred:PROC
EXTRN	PyNumber_AsSsize_t:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$tuplesubscript DD imagerel tuplesubscript
	DD	imagerel tuplesubscript+259
	DD	imagerel $unwind$tuplesubscript
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$tuplesubscript DD imagerel tuplesubscript+259
	DD	imagerel tuplesubscript+289
	DD	imagerel $chain$0$tuplesubscript
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$tuplesubscript DD imagerel tuplesubscript+289
	DD	imagerel tuplesubscript+432
	DD	imagerel $chain$4$tuplesubscript
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$tuplesubscript DD imagerel tuplesubscript+432
	DD	imagerel tuplesubscript+464
	DD	imagerel $chain$5$tuplesubscript
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$tuplesubscript DD 021H
	DD	imagerel tuplesubscript
	DD	imagerel tuplesubscript+259
	DD	imagerel $unwind$tuplesubscript
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$tuplesubscript DD 061221H
	DD	097412H
	DD	0a5405H
	DD	08c400H
	DD	imagerel tuplesubscript
	DD	imagerel tuplesubscript+259
	DD	imagerel $unwind$tuplesubscript
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$tuplesubscript DD 020521H
	DD	08c405H
	DD	imagerel tuplesubscript
	DD	imagerel tuplesubscript+259
	DD	imagerel $unwind$tuplesubscript
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tuplesubscript DD 030701H
	DD	06003a207H
	DD	03002H
xdata	ENDS
;	COMDAT ??_C@_0CL@MICCDJOP@tuple?5indices?5must?5be?5integers?0?5@
CONST	SEGMENT
??_C@_0CL@MICCDJOP@tuple?5indices?5must?5be?5integers?0?5@ DB 'tuple indi'
	DB	'ces must be integers, not %.200s', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\tupleobject.c
CONST	ENDS
;	COMDAT tuplesubscript
_TEXT	SEGMENT
stop$20902 = 48
self$ = 112
slicelength$20904 = 120
item$ = 120
start$20901 = 128
step$20903 = 136
tuplesubscript PROC					; COMDAT

; 711  : {

  00000	40 53		 push	 rbx
  00002	56		 push	 rsi
  00003	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 712  :     if (PyIndex_Check(item)) {

  00007	4c 8b 42 58	 mov	 r8, QWORD PTR [rdx+88]
  0000b	48 8b f1	 mov	 rsi, rcx
  0000e	48 8b c2	 mov	 rax, rdx
  00011	49 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [r8+184]
  00018	48 85 c9	 test	 rcx, rcx
  0001b	74 4f		 je	 SHORT $LN15@tuplesubsc
  0001d	48 83 b9 08 01
	00 00 00	 cmp	 QWORD PTR [rcx+264], 0
  00025	74 45		 je	 SHORT $LN15@tuplesubsc

; 713  :         Py_ssize_t i = PyNumber_AsSsize_t(item, PyExc_IndexError);

  00027	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_IndexError
  0002e	48 8b c8	 mov	 rcx, rax
  00031	e8 00 00 00 00	 call	 PyNumber_AsSsize_t
  00036	48 8b d8	 mov	 rbx, rax

; 714  :         if (i == -1 && PyErr_Occurred())

  00039	48 83 f8 ff	 cmp	 rax, -1
  0003d	75 13		 jne	 SHORT $LN14@tuplesubsc
  0003f	e8 00 00 00 00	 call	 PyErr_Occurred
  00044	48 85 c0	 test	 rax, rax
  00047	74 0e		 je	 SHORT $LN24@tuplesubsc
$LN26@tuplesubsc:

; 715  :             return NULL;

  00049	33 c0		 xor	 eax, eax

; 762  :     }
; 763  : }

  0004b	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0004f	5e		 pop	 rsi
  00050	5b		 pop	 rbx
  00051	c3		 ret	 0
$LN14@tuplesubsc:

; 716  :         if (i < 0)

  00052	48 85 c0	 test	 rax, rax
  00055	79 04		 jns	 SHORT $LN13@tuplesubsc
$LN24@tuplesubsc:

; 717  :             i += PyTuple_GET_SIZE(self);

  00057	48 03 5e 60	 add	 rbx, QWORD PTR [rsi+96]
$LN13@tuplesubsc:

; 718  :         return tupleitem(self, i);

  0005b	48 8b d3	 mov	 rdx, rbx
  0005e	48 8b ce	 mov	 rcx, rsi

; 762  :     }
; 763  : }

  00061	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00065	5e		 pop	 rsi
  00066	5b		 pop	 rbx
  00067	e9 00 00 00 00	 jmp	 tupleitem
$LN15@tuplesubsc:

; 719  :     }
; 720  :     else if (PySlice_Check(item)) {

  0006c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PySlice_Type
  00073	4c 3b c1	 cmp	 r8, rcx
  00076	0f 85 34 01 00
	00		 jne	 $LN11@tuplesubsc

; 721  :         Py_ssize_t start, stop, step, slicelength, cur, i;
; 722  :         PyObject* result;
; 723  :         PyObject* it;
; 724  :         PyObject **src, **dest;
; 725  : 
; 726  :         if (PySlice_GetIndicesEx(item,
; 727  :                          PyTuple_GET_SIZE(self),
; 728  :                          &start, &stop, &step, &slicelength) < 0) {

  0007c	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  00080	48 8d 4c 24 78	 lea	 rcx, QWORD PTR slicelength$20904[rsp]
  00085	4c 8d 4c 24 30	 lea	 r9, QWORD PTR stop$20902[rsp]
  0008a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0008f	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR step$20903[rsp]
  00097	4c 8d 84 24 80
	00 00 00	 lea	 r8, QWORD PTR start$20901[rsp]
  0009f	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  000a4	48 8b c8	 mov	 rcx, rax
  000a7	e8 00 00 00 00	 call	 PySlice_GetIndicesEx
  000ac	85 c0		 test	 eax, eax

; 729  :             return NULL;

  000ae	78 99		 js	 SHORT $LN26@tuplesubsc

; 730  :         }
; 731  : 
; 732  :         if (slicelength <= 0) {

  000b0	48 8b 4c 24 78	 mov	 rcx, QWORD PTR slicelength$20904[rsp]
  000b5	48 85 c9	 test	 rcx, rcx
  000b8	7f 0e		 jg	 SHORT $LN9@tuplesubsc

; 733  :             return PyTuple_New(0);

  000ba	33 c9		 xor	 ecx, ecx
  000bc	e8 00 00 00 00	 call	 PyTuple_New

; 762  :     }
; 763  : }

  000c1	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000c5	5e		 pop	 rsi
  000c6	5b		 pop	 rbx
  000c7	c3		 ret	 0
$LN9@tuplesubsc:

; 734  :         }
; 735  :         else if (start == 0 && step == 1 &&
; 736  :                  slicelength == PyTuple_GET_SIZE(self) &&
; 737  :                  PyTuple_CheckExact(self)) {

  000c8	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR start$20901[rsp], 0
  000d1	75 30		 jne	 SHORT $LN7@tuplesubsc
  000d3	48 83 bc 24 88
	00 00 00 01	 cmp	 QWORD PTR step$20903[rsp], 1
  000dc	75 25		 jne	 SHORT $LN7@tuplesubsc
  000de	48 3b 4e 60	 cmp	 rcx, QWORD PTR [rsi+96]
  000e2	75 1f		 jne	 SHORT $LN7@tuplesubsc
  000e4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTuple_Type
  000eb	48 39 46 58	 cmp	 QWORD PTR [rsi+88], rax
  000ef	75 12		 jne	 SHORT $LN7@tuplesubsc

; 738  :             Py_INCREF(self);

  000f1	48 8b ce	 mov	 rcx, rsi
  000f4	e8 00 00 00 00	 call	 _Py_IncRef

; 739  :             return (PyObject *)self;

  000f9	48 8b c6	 mov	 rax, rsi

; 762  :     }
; 763  : }

  000fc	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00100	5e		 pop	 rsi
  00101	5b		 pop	 rbx
  00102	c3		 ret	 0
$LN7@tuplesubsc:
  00103	4c 89 64 24 40	 mov	 QWORD PTR [rsp+64], r12

; 740  :         }
; 741  :         else {
; 742  :             result = PyTuple_New(slicelength);

  00108	e8 00 00 00 00	 call	 PyTuple_New
  0010d	4c 8b e0	 mov	 r12, rax

; 743  :             if (!result) return NULL;

  00110	48 85 c0	 test	 rax, rax
  00113	75 0c		 jne	 SHORT $LN5@tuplesubsc
  00115	4c 8b 64 24 40	 mov	 r12, QWORD PTR [rsp+64]

; 762  :     }
; 763  : }

  0011a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0011e	5e		 pop	 rsi
  0011f	5b		 pop	 rbx
  00120	c3		 ret	 0
$LN5@tuplesubsc:
  00121	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp

; 744  : 
; 745  :             src = self->ob_item;
; 746  :             dest = ((PyTupleObject *)result)->ob_item;
; 747  :             for (cur = start, i = 0; i < slicelength;
; 748  :                  cur += step, i++) {

  00126	48 8b ac 24 80
	00 00 00	 mov	 rbp, QWORD PTR start$20901[rsp]
  0012e	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  00133	33 ff		 xor	 edi, edi
  00135	48 39 7c 24 78	 cmp	 QWORD PTR slicelength$20904[rsp], rdi
  0013a	7e 5b		 jle	 SHORT $LN2@tuplesubsc
  0013c	0f 1f 40 00	 npad	 4
$LL4@tuplesubsc:

; 749  :                 it = src[cur];

  00140	48 8b 5c ee 70	 mov	 rbx, QWORD PTR [rsi+rbp*8+112]

; 750  :                 Py_INCREF(it);

  00145	e8 00 00 00 00	 call	 _Py_PXCTX
  0014a	85 c0		 test	 eax, eax
  0014c	75 32		 jne	 SHORT $LN19@tuplesubsc
  0014e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00155	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0015c	4c 8b cb	 mov	 r9, rbx
  0015f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00165	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0016d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00172	85 c0		 test	 eax, eax
  00174	75 06		 jne	 SHORT $LN18@tuplesubsc
  00176	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0017a	74 04		 je	 SHORT $LN19@tuplesubsc
$LN18@tuplesubsc:
  0017c	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN19@tuplesubsc:

; 751  :                 dest[i] = it;

  00180	49 89 5c fc 70	 mov	 QWORD PTR [r12+rdi*8+112], rbx
  00185	48 03 ac 24 88
	00 00 00	 add	 rbp, QWORD PTR step$20903[rsp]
  0018d	48 ff c7	 inc	 rdi
  00190	48 3b 7c 24 78	 cmp	 rdi, QWORD PTR slicelength$20904[rsp]
  00195	7c a9		 jl	 SHORT $LL4@tuplesubsc
$LN2@tuplesubsc:
  00197	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  0019c	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]

; 752  :             }
; 753  : 
; 754  :             return result;

  001a1	49 8b c4	 mov	 rax, r12
  001a4	4c 8b 64 24 40	 mov	 r12, QWORD PTR [rsp+64]

; 762  :     }
; 763  : }

  001a9	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001ad	5e		 pop	 rsi
  001ae	5b		 pop	 rbx
  001af	c3		 ret	 0
$LN11@tuplesubsc:

; 755  :         }
; 756  :     }
; 757  :     else {
; 758  :         PyErr_Format(PyExc_TypeError,
; 759  :                      "tuple indices must be integers, not %.200s",
; 760  :                      Py_TYPE(item)->tp_name);

  001b0	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  001b4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  001bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@MICCDJOP@tuple?5indices?5must?5be?5integers?0?5@
  001c2	e8 00 00 00 00	 call	 PyErr_Format

; 761  :         return NULL;

  001c7	33 c0		 xor	 eax, eax

; 762  :     }
; 763  : }

  001c9	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001cd	5e		 pop	 rsi
  001ce	5b		 pop	 rbx
  001cf	c3		 ret	 0
tuplesubscript ENDP
_TEXT	ENDS
PUBLIC	??_C@_03IFHPJIBD@?$CIN?$CJ?$AA@			; `string'
EXTRN	Py_BuildValue:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$tuple_getnewargs DD imagerel tuple_getnewargs
	DD	imagerel tuple_getnewargs+34
	DD	imagerel $unwind$tuple_getnewargs
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tuple_getnewargs DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_03IFHPJIBD@?$CIN?$CJ?$AA@
CONST	SEGMENT
??_C@_03IFHPJIBD@?$CIN?$CJ?$AA@ DB '(N)', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT tuple_getnewargs
_TEXT	SEGMENT
v$ = 48
tuple_getnewargs PROC					; COMDAT

; 767  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 768  :     return Py_BuildValue("(N)", tupleslice(v, 0, Py_SIZE(v)));

  00004	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]
  00008	33 d2		 xor	 edx, edx
  0000a	e8 00 00 00 00	 call	 tupleslice
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03IFHPJIBD@?$CIN?$CJ?$AA@
  00016	48 8b d0	 mov	 rdx, rax

; 769  : 
; 770  : }

  00019	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001d	e9 00 00 00 00	 jmp	 Py_BuildValue
tuple_getnewargs ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT tuple_sizeof
_TEXT	SEGMENT
self$ = 8
tuple_sizeof PROC					; COMDAT

; 775  :     Py_ssize_t res;
; 776  : 
; 777  :     res = PyTuple_Type.tp_basicsize + Py_SIZE(self) * sizeof(PyObject *);

  00000	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00004	48 8b 05 78 00
	00 00		 mov	 rax, QWORD PTR PyTuple_Type+120
  0000b	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]

; 778  :     return PyLong_FromSsize_t(res);
; 779  : }

  0000f	e9 00 00 00 00	 jmp	 PyLong_FromSsize_t
tuple_sizeof ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@BAEFLNMJ@_PyTuple_Resize?$AA@		; `string'
PUBLIC	_PyTuple_Resize
EXTRN	_Px_ForgetReference:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\objimpl.h
pdata	SEGMENT
$pdata$_PyTuple_Resize DD imagerel $LN64
	DD	imagerel $LN64+147
	DD	imagerel $unwind$_PyTuple_Resize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_PyTuple_Resize DD imagerel $LN64+147
	DD	imagerel $LN64+376
	DD	imagerel $chain$0$_PyTuple_Resize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_PyTuple_Resize DD imagerel $LN64+376
	DD	imagerel $LN64+462
	DD	imagerel $chain$1$_PyTuple_Resize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_PyTuple_Resize DD imagerel $LN64+462
	DD	imagerel $LN64+547
	DD	imagerel $chain$2$_PyTuple_Resize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$_PyTuple_Resize DD imagerel $LN64+547
	DD	imagerel $LN64+567
	DD	imagerel $chain$3$_PyTuple_Resize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$_PyTuple_Resize DD imagerel $LN64+567
	DD	imagerel $LN64+812
	DD	imagerel $chain$4$_PyTuple_Resize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$_PyTuple_Resize DD imagerel $LN64+812
	DD	imagerel $LN64+948
	DD	imagerel $chain$5$_PyTuple_Resize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$_PyTuple_Resize DD 021H
	DD	imagerel $LN64
	DD	imagerel $LN64+147
	DD	imagerel $unwind$_PyTuple_Resize
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$_PyTuple_Resize DD 020021H
	DD	0a6400H
	DD	imagerel $LN64
	DD	imagerel $LN64+147
	DD	imagerel $unwind$_PyTuple_Resize
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$_PyTuple_Resize DD 021H
	DD	imagerel $LN64
	DD	imagerel $LN64+147
	DD	imagerel $unwind$_PyTuple_Resize
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_PyTuple_Resize DD 021H
	DD	imagerel $LN64+147
	DD	imagerel $LN64+376
	DD	imagerel $chain$0$_PyTuple_Resize
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_PyTuple_Resize DD 020521H
	DD	0bc405H
	DD	imagerel $LN64+147
	DD	imagerel $LN64+376
	DD	imagerel $chain$0$_PyTuple_Resize
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_PyTuple_Resize DD 020521H
	DD	0a6405H
	DD	imagerel $LN64
	DD	imagerel $LN64+147
	DD	imagerel $unwind$_PyTuple_Resize
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyTuple_Resize DD 081301H
	DD	0d5413H
	DD	0c3413H
	DD	0e00f5213H
	DD	0700bd00dH
xdata	ENDS
;	COMDAT ??_C@_0BA@BAEFLNMJ@_PyTuple_Resize?$AA@
CONST	SEGMENT
??_C@_0BA@BAEFLNMJ@_PyTuple_Resize?$AA@ DB '_PyTuple_Resize', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\tupleobject.c
CONST	ENDS
;	COMDAT _PyTuple_Resize
_TEXT	SEGMENT
pv$ = 80
newsize$ = 88
_PyTuple_Resize PROC					; COMDAT

; 858  : {

$LN64:
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  0000a	57		 push	 rdi
  0000b	41 55		 push	 r13
  0000d	41 56		 push	 r14
  0000f	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 859  :     register PyTupleObject *v;
; 860  :     register PyTupleObject *sv;
; 861  :     Py_ssize_t i;
; 862  :     Py_ssize_t oldsize;
; 863  : 
; 864  :     v = (PyTupleObject *) *pv;

  00013	48 8b 19	 mov	 rbx, QWORD PTR [rcx]
  00016	48 8b ea	 mov	 rbp, rdx
  00019	4c 8b f1	 mov	 r14, rcx

; 865  :     if (v == NULL || Py_TYPE(v) != &PyTuple_Type ||
; 866  :         (Py_SIZE(v) != 0 && Py_REFCNT(v) != 1)) {

  0001c	48 85 db	 test	 rbx, rbx
  0001f	0f 84 07 03 00
	00		 je	 $LN31@PyTuple_Re
  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTuple_Type
  0002c	48 39 43 58	 cmp	 QWORD PTR [rbx+88], rax
  00030	0f 85 f6 02 00
	00		 jne	 $LN31@PyTuple_Re
  00036	4c 8b 6b 60	 mov	 r13, QWORD PTR [rbx+96]
  0003a	4d 85 ed	 test	 r13, r13
  0003d	74 0b		 je	 SHORT $LN32@PyTuple_Re
  0003f	48 83 7b 50 01	 cmp	 QWORD PTR [rbx+80], 1
  00044	0f 85 e2 02 00
	00		 jne	 $LN31@PyTuple_Re
$LN32@PyTuple_Re:

; 871  :     }
; 872  :     oldsize = Py_SIZE(v);
; 873  :     if (oldsize == newsize)

  0004a	4c 3b ea	 cmp	 r13, rdx
  0004d	75 07		 jne	 SHORT $LN26@PyTuple_Re

; 874  :         return 0;

  0004f	33 c0		 xor	 eax, eax
  00051	e9 cd 01 00 00	 jmp	 $LN33@PyTuple_Re
$LN26@PyTuple_Re:

; 875  : 
; 876  :     if (oldsize == 0) {

  00056	4d 85 ed	 test	 r13, r13
  00059	75 21		 jne	 SHORT $LN25@PyTuple_Re

; 877  :         /* Empty tuples are often shared, so we should never
; 878  :            resize them in-place even if we do own the only
; 879  :            (current) reference */
; 880  :         Py_DECREF(v);

  0005b	48 8b cb	 mov	 rcx, rbx
  0005e	e8 00 00 00 00	 call	 _Py_DecRef

; 881  :         *pv = PyTuple_New(newsize);

  00063	48 8b cd	 mov	 rcx, rbp
  00066	e8 00 00 00 00	 call	 PyTuple_New
  0006b	49 89 06	 mov	 QWORD PTR [r14], rax

; 882  :         return *pv == NULL ? -1 : 0;

  0006e	48 f7 d8	 neg	 rax
  00071	1b c0		 sbb	 eax, eax
  00073	f7 d8		 neg	 eax
  00075	ff c8		 dec	 eax
  00077	e9 a7 01 00 00	 jmp	 $LN33@PyTuple_Re
$LN25@PyTuple_Re:

; 883  :     }
; 884  : 
; 885  :     /* XXX UNREF/NEWREF interface should be more symmetrical */
; 886  :     _Py_DEC_REFTOTAL;
; 887  :     if (_PyObject_GC_IS_TRACKED(v))

  0007c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00083	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@BAEFLNMJ@_PyTuple_Resize?$AA@
  0008a	4c 8b cb	 mov	 r9, rbx
  0008d	41 b8 77 03 00
	00		 mov	 r8d, 887		; 00000377H
  00093	48 89 74 24 50	 mov	 QWORD PTR [rsp+80], rsi
  00098	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000a0	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a5	33 ff		 xor	 edi, edi
  000a7	85 c0		 test	 eax, eax
  000a9	0f 85 b3 00 00
	00		 jne	 $LN20@PyTuple_Re
  000af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  000b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@BAEFLNMJ@_PyTuple_Resize?$AA@
  000bd	4c 8b cb	 mov	 r9, rbx
  000c0	41 b8 77 03 00
	00		 mov	 r8d, 887		; 00000377H
  000c6	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ce	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d3	8b cf		 mov	 ecx, edi
  000d5	85 c0		 test	 eax, eax
  000d7	75 04		 jne	 SHORT $LN36@PyTuple_Re
  000d9	48 8d 4b e8	 lea	 rcx, QWORD PTR [rbx-24]
$LN36@PyTuple_Re:
  000dd	48 83 79 10 fe	 cmp	 QWORD PTR [rcx+16], -2
  000e2	8b c7		 mov	 eax, edi
  000e4	0f 95 c0	 setne	 al
  000e7	85 c0		 test	 eax, eax
  000e9	74 77		 je	 SHORT $LN20@PyTuple_Re

; 888  :         _PyObject_GC_UNTRACK(v);

  000eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  000f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@BAEFLNMJ@_PyTuple_Resize?$AA@
  000f9	4c 8b cb	 mov	 r9, rbx
  000fc	41 b8 78 03 00
	00		 mov	 r8d, 888		; 00000378H
  00102	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0010a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0010f	85 c0		 test	 eax, eax
  00111	75 4f		 jne	 SHORT $LN20@PyTuple_Re
  00113	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  0011a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@BAEFLNMJ@_PyTuple_Resize?$AA@
  00121	4c 8b cb	 mov	 r9, rbx
  00124	41 b8 78 03 00
	00		 mov	 r8d, 888		; 00000378H
  0012a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00132	e8 00 00 00 00	 call	 _PyParallel_Guard
  00137	48 8b d7	 mov	 rdx, rdi
  0013a	85 c0		 test	 eax, eax
  0013c	75 04		 jne	 SHORT $LN40@PyTuple_Re
  0013e	48 8d 53 e8	 lea	 rdx, QWORD PTR [rbx-24]
$LN40@PyTuple_Re:
  00142	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00145	48 8b 4a 08	 mov	 rcx, QWORD PTR [rdx+8]
  00149	48 c7 42 10 fe
	ff ff ff	 mov	 QWORD PTR [rdx+16], -2
  00151	48 89 01	 mov	 QWORD PTR [rcx], rax
  00154	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  00157	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  0015b	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  0015f	48 89 3a	 mov	 QWORD PTR [rdx], rdi
$LN20@PyTuple_Re:

; 889  :     _Py_ForgetReference((PyObject *) v);

  00162	e8 00 00 00 00	 call	 _Py_PXCTX
  00167	85 c0		 test	 eax, eax
  00169	74 08		 je	 SHORT $LN17@PyTuple_Re
  0016b	48 8b cb	 mov	 rcx, rbx
  0016e	e8 00 00 00 00	 call	 _Px_ForgetReference
$LN17@PyTuple_Re:

; 890  :     /* DECREF items deleted by shrinkage */
; 891  :     for (i = newsize; i < oldsize; i++) {

  00173	49 3b ed	 cmp	 rbp, r13
  00176	7d 56		 jge	 SHORT $LN12@PyTuple_Re
  00178	4c 89 64 24 58	 mov	 QWORD PTR [rsp+88], r12
  0017d	4d 8b e5	 mov	 r12, r13
  00180	48 8d 74 eb 70	 lea	 rsi, QWORD PTR [rbx+rbp*8+112]
  00185	4c 2b e5	 sub	 r12, rbp
$LL14@PyTuple_Re:

; 892  :         Py_CLEAR(v->ob_item[i]);

  00188	4c 8b 0e	 mov	 r9, QWORD PTR [rsi]
  0018b	4d 85 c9	 test	 r9, r9
  0018e	74 30		 je	 SHORT $LN10@PyTuple_Re
  00190	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00197	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@BAEFLNMJ@_PyTuple_Resize?$AA@
  0019e	41 b8 7c 03 00
	00		 mov	 r8d, 892		; 0000037cH
  001a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001ac	e8 00 00 00 00	 call	 _PyParallel_Guard
  001b1	85 c0		 test	 eax, eax
  001b3	75 0b		 jne	 SHORT $LN10@PyTuple_Re
  001b5	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  001b8	48 89 3e	 mov	 QWORD PTR [rsi], rdi
  001bb	e8 00 00 00 00	 call	 _Py_DecRef
$LN10@PyTuple_Re:

; 890  :     /* DECREF items deleted by shrinkage */
; 891  :     for (i = newsize; i < oldsize; i++) {

  001c0	48 83 c6 08	 add	 rsi, 8
  001c4	49 ff cc	 dec	 r12
  001c7	75 bf		 jne	 SHORT $LL14@PyTuple_Re
  001c9	4c 8b 64 24 58	 mov	 r12, QWORD PTR [rsp+88]
$LN12@PyTuple_Re:

; 893  :     }
; 894  :     sv = PyObject_GC_Resize(PyTupleObject, v, newsize);

  001ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@
  001d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@HFBINLOF@__PyObject_GC_RESIZE?$AA@
  001dc	4c 8b cb	 mov	 r9, rbx
  001df	41 b8 75 01 00
	00		 mov	 r8d, 373		; 00000175H
  001e5	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001ed	e8 00 00 00 00	 call	 _PyParallel_Guard
  001f2	48 8b d5	 mov	 rdx, rbp
  001f5	48 8b cb	 mov	 rcx, rbx
  001f8	85 c0		 test	 eax, eax
  001fa	74 07		 je	 SHORT $LN57@PyTuple_Re
  001fc	e8 00 00 00 00	 call	 _PxObject_Resize
  00201	eb 05		 jmp	 SHORT $LN63@PyTuple_Re
$LN57@PyTuple_Re:
  00203	e8 00 00 00 00	 call	 _PyObject_GC_Resize
$LN63@PyTuple_Re:
  00208	48 8b f0	 mov	 rsi, rax

; 895  :     if (sv == NULL) {

  0020b	48 85 c0	 test	 rax, rax
  0020e	75 27		 jne	 SHORT $LN7@PyTuple_Re

; 896  :         *pv = NULL;
; 897  :         PyObject_GC_Del(v);

  00210	48 8b cb	 mov	 rcx, rbx
  00213	49 89 3e	 mov	 QWORD PTR [r14], rdi
  00216	e8 00 00 00 00	 call	 PyObject_GC_Del

; 898  :         return -1;

  0021b	83 c8 ff	 or	 eax, -1
$LN62@PyTuple_Re:
  0021e	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
$LN33@PyTuple_Re:

; 908  : }

  00223	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00228	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  0022d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00231	41 5e		 pop	 r14
  00233	41 5d		 pop	 r13
  00235	5f		 pop	 rdi
  00236	c3		 ret	 0
$LN7@PyTuple_Re:

; 899  :     }
; 900  :     _Py_NewReference((PyObject *) sv);

  00237	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  0023e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@BAEFLNMJ@_PyTuple_Resize?$AA@
  00245	4c 8b ce	 mov	 r9, rsi
  00248	41 b8 84 03 00
	00		 mov	 r8d, 900		; 00000384H
  0024e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00256	e8 00 00 00 00	 call	 _PyParallel_Guard
  0025b	85 c0		 test	 eax, eax
  0025d	74 0a		 je	 SHORT $LN41@PyTuple_Re
  0025f	48 8b ce	 mov	 rcx, rsi
  00262	e8 00 00 00 00	 call	 _Px_NewReference
  00267	eb 08		 jmp	 SHORT $LN42@PyTuple_Re
$LN41@PyTuple_Re:
  00269	48 c7 46 50 01
	00 00 00	 mov	 QWORD PTR [rsi+80], 1
$LN42@PyTuple_Re:

; 901  :     /* Zero out items added by growing */
; 902  :     if (newsize > oldsize)

  00271	49 3b ed	 cmp	 rbp, r13
  00274	7e 16		 jle	 SHORT $LN6@PyTuple_Re

; 903  :         memset(&sv->ob_item[oldsize], 0,
; 904  :                sizeof(*sv->ob_item) * (newsize - oldsize));

  00276	49 2b ed	 sub	 rbp, r13
  00279	4a 8d 4c ee 70	 lea	 rcx, QWORD PTR [rsi+r13*8+112]
  0027e	33 d2		 xor	 edx, edx
  00280	48 c1 e5 03	 shl	 rbp, 3
  00284	4c 8b c5	 mov	 r8, rbp
  00287	e8 00 00 00 00	 call	 memset
$LN6@PyTuple_Re:

; 905  :     *pv = (PyObject *) sv;
; 906  :     _PyObject_GC_TRACK(sv);

  0028c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00293	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@BAEFLNMJ@_PyTuple_Resize?$AA@
  0029a	4c 8b ce	 mov	 r9, rsi
  0029d	41 b8 8a 03 00
	00		 mov	 r8d, 906		; 0000038aH
  002a3	49 89 36	 mov	 QWORD PTR [r14], rsi
  002a6	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002ae	e8 00 00 00 00	 call	 _PyParallel_Guard
  002b3	85 c0		 test	 eax, eax
  002b5	75 6e		 jne	 SHORT $LN2@PyTuple_Re
  002b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  002be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@BAEFLNMJ@_PyTuple_Resize?$AA@
  002c5	4c 8b ce	 mov	 r9, rsi
  002c8	41 b8 8a 03 00
	00		 mov	 r8d, 906		; 0000038aH
  002ce	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002d6	e8 00 00 00 00	 call	 _PyParallel_Guard
  002db	85 c0		 test	 eax, eax
  002dd	75 04		 jne	 SHORT $LN44@PyTuple_Re
  002df	48 8d 7e e8	 lea	 rdi, QWORD PTR [rsi-24]
$LN44@PyTuple_Re:
  002e3	48 83 7f 10 fe	 cmp	 QWORD PTR [rdi+16], -2
  002e8	74 0c		 je	 SHORT $LN1@PyTuple_Re
  002ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  002f1	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyTuple_Re:
  002f6	48 c7 47 10 fd
	ff ff ff	 mov	 QWORD PTR [rdi+16], -3
  002fe	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00305	48 89 07	 mov	 QWORD PTR [rdi], rax
  00308	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  0030f	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00313	48 89 4f 08	 mov	 QWORD PTR [rdi+8], rcx
  00317	48 89 39	 mov	 QWORD PTR [rcx], rdi
  0031a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00321	48 89 78 08	 mov	 QWORD PTR [rax+8], rdi
$LN2@PyTuple_Re:

; 907  :     return 0;

  00325	33 c0		 xor	 eax, eax
  00327	e9 f2 fe ff ff	 jmp	 $LN62@PyTuple_Re
$LN31@PyTuple_Re:

; 867  :         *pv = 0;

  0032c	33 ff		 xor	 edi, edi
  0032e	48 89 39	 mov	 QWORD PTR [rcx], rdi

; 868  :         Py_XDECREF(v);

  00331	48 85 db	 test	 rbx, rbx
  00334	74 65		 je	 SHORT $LN29@PyTuple_Re
  00336	e8 00 00 00 00	 call	 _Py_PXCTX
  0033b	85 c0		 test	 eax, eax
  0033d	75 5c		 jne	 SHORT $LN29@PyTuple_Re
  0033f	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00343	a8 20		 test	 al, 32			; 00000020H
  00345	75 4c		 jne	 SHORT $LN49@PyTuple_Re
  00347	84 c0		 test	 al, al
  00349	78 48		 js	 SHORT $LN49@PyTuple_Re
  0034b	a8 02		 test	 al, 2
  0034d	75 4c		 jne	 SHORT $LN29@PyTuple_Re
  0034f	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00353	75 46		 jne	 SHORT $LN29@PyTuple_Re
  00355	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0035c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00363	4c 8b cb	 mov	 r9, rbx
  00366	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0036c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00374	e8 00 00 00 00	 call	 _PyParallel_Guard
  00379	48 8b cb	 mov	 rcx, rbx
  0037c	85 c0		 test	 eax, eax
  0037e	74 07		 je	 SHORT $LN54@PyTuple_Re
  00380	e8 00 00 00 00	 call	 _Px_Dealloc
  00385	eb 14		 jmp	 SHORT $LN29@PyTuple_Re
$LN54@PyTuple_Re:
  00387	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0038b	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00391	eb 08		 jmp	 SHORT $LN29@PyTuple_Re
$LN49@PyTuple_Re:
  00393	48 8b cb	 mov	 rcx, rbx
  00396	e8 00 00 00 00	 call	 Px_DecRef
$LN29@PyTuple_Re:

; 869  :         PyErr_BadInternalCall();

  0039b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  003a2	ba 65 03 00 00	 mov	 edx, 869		; 00000365H
  003a7	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 870  :         return -1;

  003ac	83 c8 ff	 or	 eax, -1
  003af	e9 6f fe ff ff	 jmp	 $LN33@PyTuple_Re
_PyTuple_Resize ENDP
_TEXT	ENDS
PUBLIC	PyTuple_ClearFreeList
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyTuple_ClearFreeList DD imagerel $LN13
	DD	imagerel $LN13+156
	DD	imagerel $unwind$PyTuple_ClearFreeList
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyTuple_ClearFreeList DD 0b3501H
	DD	04d435H
	DD	0a7430H
	DD	09642bH
	DD	083426H
	DD	0c0044208H
	DD	05002H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyTuple_ClearFreeList
_TEXT	SEGMENT
PyTuple_ClearFreeList PROC				; COMDAT

; 912  : {

$LN13:
  00000	40 55		 push	 rbp
  00002	41 54		 push	 r12
  00004	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 913  :     int freelist_size = 0;

  00008	45 33 e4	 xor	 r12d, r12d
  0000b	41 8b ec	 mov	 ebp, r12d

; 914  : #if PyTuple_MAXSAVESIZE > 0
; 915  :     int i;
; 916  :     if (Py_PXCTX)

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 0a		 je	 SHORT $LN6@PyTuple_Cl

; 917  :         return 0;

  00017	33 c0		 xor	 eax, eax

; 932  : }

  00019	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001d	41 5c		 pop	 r12
  0001f	5d		 pop	 rbp
  00020	c3		 ret	 0
$LN6@PyTuple_Cl:
  00021	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00026	48 89 74 24 48	 mov	 QWORD PTR [rsp+72], rsi
  0002b	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  00030	4c 89 6c 24 20	 mov	 QWORD PTR [rsp+32], r13

; 918  :     for (i = 1; i < PyTuple_MAXSAVESIZE; i++) {

  00035	48 8d 35 04 00
	00 00		 lea	 rsi, OFFSET FLAT:numfree+4
  0003c	48 8d 3d 08 00
	00 00		 lea	 rdi, OFFSET FLAT:free_list+8
  00043	4c 8d 2d a0 00
	00 00		 lea	 r13, OFFSET FLAT:free_list+160
  0004a	66 0f 1f 44 00
	00		 npad	 6
$LL5@PyTuple_Cl:

; 919  :         PyTupleObject *p, *q;
; 920  :         p = free_list[i];

  00050	48 8b 1f	 mov	 rbx, QWORD PTR [rdi]

; 921  :         freelist_size += numfree[i];

  00053	03 2e		 add	 ebp, DWORD PTR [rsi]

; 922  :         free_list[i] = NULL;

  00055	4c 89 27	 mov	 QWORD PTR [rdi], r12

; 923  :         numfree[i] = 0;

  00058	44 89 26	 mov	 DWORD PTR [rsi], r12d

; 924  :         while (p) {

  0005b	48 85 db	 test	 rbx, rbx
  0005e	74 11		 je	 SHORT $LN4@PyTuple_Cl
$LL2@PyTuple_Cl:

; 925  :             q = p;

  00060	48 8b cb	 mov	 rcx, rbx

; 926  :             p = (PyTupleObject *)(p->ob_item[0]);

  00063	48 8b 5b 70	 mov	 rbx, QWORD PTR [rbx+112]

; 927  :             PyObject_GC_Del(q);

  00067	e8 00 00 00 00	 call	 PyObject_GC_Del
  0006c	48 85 db	 test	 rbx, rbx
  0006f	75 ef		 jne	 SHORT $LL2@PyTuple_Cl
$LN4@PyTuple_Cl:

; 918  :     for (i = 1; i < PyTuple_MAXSAVESIZE; i++) {

  00071	48 83 c7 08	 add	 rdi, 8
  00075	48 83 c6 04	 add	 rsi, 4
  00079	49 3b fd	 cmp	 rdi, r13
  0007c	7c d2		 jl	 SHORT $LL5@PyTuple_Cl

; 928  :         }
; 929  :     }
; 930  : #endif
; 931  :     return freelist_size;

  0007e	4c 8b 6c 24 20	 mov	 r13, QWORD PTR [rsp+32]
  00083	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]
  00088	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0008d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00092	8b c5		 mov	 eax, ebp

; 932  : }

  00094	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00098	41 5c		 pop	 r12
  0009a	5d		 pop	 rbp
  0009b	c3		 ret	 0
PyTuple_ClearFreeList ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@KMLPFJPG@PyTuple_Fini?$AA@		; `string'
PUBLIC	PyTuple_Fini
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyTuple_Fini DD imagerel $LN20
	DD	imagerel $LN20+98
	DD	imagerel $unwind$PyTuple_Fini
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyTuple_Fini DD imagerel $LN20+98
	DD	imagerel $LN20+214
	DD	imagerel $chain$0$PyTuple_Fini
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyTuple_Fini DD imagerel $LN20+214
	DD	imagerel $LN20+238
	DD	imagerel $chain$2$PyTuple_Fini
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyTuple_Fini DD imagerel $LN20+238
	DD	imagerel $LN20+251
	DD	imagerel $chain$4$PyTuple_Fini
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$PyTuple_Fini DD imagerel $LN20+251
	DD	imagerel $LN20+260
	DD	imagerel $chain$5$PyTuple_Fini
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$PyTuple_Fini DD 021H
	DD	imagerel $LN20
	DD	imagerel $LN20+98
	DD	imagerel $unwind$PyTuple_Fini
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyTuple_Fini DD 020021H
	DD	063400H
	DD	imagerel $LN20
	DD	imagerel $LN20+98
	DD	imagerel $unwind$PyTuple_Fini
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyTuple_Fini DD 020021H
	DD	063400H
	DD	imagerel $LN20
	DD	imagerel $LN20+98
	DD	imagerel $unwind$PyTuple_Fini
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyTuple_Fini DD 020521H
	DD	063405H
	DD	imagerel $LN20
	DD	imagerel $LN20+98
	DD	imagerel $unwind$PyTuple_Fini
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyTuple_Fini DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0N@KMLPFJPG@PyTuple_Fini?$AA@
CONST	SEGMENT
??_C@_0N@KMLPFJPG@PyTuple_Fini?$AA@ DB 'PyTuple_Fini', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\tupleobject.c
CONST	ENDS
;	COMDAT PyTuple_Fini
_TEXT	SEGMENT
PyTuple_Fini PROC					; COMDAT

; 936  : {

$LN20:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 937  : #if PyTuple_MAXSAVESIZE > 0
; 938  :     /* empty tuples are used all over the place and applications may
; 939  :      * rely on the fact that an empty tuple is a singleton. */
; 940  :     Py_GUARD

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	74 1c		 je	 SHORT $LN4@PyTuple_Fi
  0000d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@KMLPFJPG@PyTuple_Fini?$AA@
  0001b	45 33 c9	 xor	 r9d, r9d
  0001e	41 b8 ac 03 00
	00		 mov	 r8d, 940		; 000003acH
  00024	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN4@PyTuple_Fi:

; 941  :     Py_CLEAR(free_list[0]);

  00029	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR free_list
  00030	4d 85 c9	 test	 r9, r9
  00033	0f 84 c2 00 00
	00		 je	 $LN3@PyTuple_Fi
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@KMLPFJPG@PyTuple_Fini?$AA@
  00047	41 b8 ad 03 00
	00		 mov	 r8d, 941		; 000003adH
  0004d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00055	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005a	85 c0		 test	 eax, eax
  0005c	0f 85 99 00 00
	00		 jne	 $LN3@PyTuple_Fi
  00062	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00067	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR free_list
  0006e	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR free_list, 0
  00079	e8 00 00 00 00	 call	 _Py_PXCTX
  0007e	85 c0		 test	 eax, eax
  00080	75 74		 jne	 SHORT $LN19@PyTuple_Fi
  00082	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00086	a8 20		 test	 al, 32			; 00000020H
  00088	75 64		 jne	 SHORT $LN12@PyTuple_Fi
  0008a	84 c0		 test	 al, al
  0008c	78 60		 js	 SHORT $LN12@PyTuple_Fi
  0008e	a8 02		 test	 al, 2
  00090	75 64		 jne	 SHORT $LN19@PyTuple_Fi
  00092	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00096	75 5e		 jne	 SHORT $LN19@PyTuple_Fi
  00098	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0009f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000a6	4c 8b cb	 mov	 r9, rbx
  000a9	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000af	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000b7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000bc	48 8b cb	 mov	 rcx, rbx
  000bf	85 c0		 test	 eax, eax
  000c1	74 13		 je	 SHORT $LN17@PyTuple_Fi
  000c3	e8 00 00 00 00	 call	 _Px_Dealloc
  000c8	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 942  : 
; 943  :     (void)PyTuple_ClearFreeList();
; 944  : #endif
; 945  : #ifdef SHOW_TRACK_COUNT
; 946  :     show_track();
; 947  : #endif
; 948  : }

  000cd	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d1	e9 00 00 00 00	 jmp	 PyTuple_ClearFreeList

; 941  :     Py_CLEAR(free_list[0]);

$LN17@PyTuple_Fi:
  000d6	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000da	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000e0	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 942  : 
; 943  :     (void)PyTuple_ClearFreeList();
; 944  : #endif
; 945  : #ifdef SHOW_TRACK_COUNT
; 946  :     show_track();
; 947  : #endif
; 948  : }

  000e5	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000e9	e9 00 00 00 00	 jmp	 PyTuple_ClearFreeList

; 941  :     Py_CLEAR(free_list[0]);

$LN12@PyTuple_Fi:
  000ee	48 8b cb	 mov	 rcx, rbx
  000f1	e8 00 00 00 00	 call	 Px_DecRef
$LN19@PyTuple_Fi:
  000f6	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
$LN3@PyTuple_Fi:

; 942  : 
; 943  :     (void)PyTuple_ClearFreeList();
; 944  : #endif
; 945  : #ifdef SHOW_TRACK_COUNT
; 946  :     show_track();
; 947  : #endif
; 948  : }

  000fb	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ff	e9 00 00 00 00	 jmp	 PyTuple_ClearFreeList
PyTuple_Fini ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@KEPNBDGO@tupleiter_dealloc?$AA@	; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$tupleiter_dealloc DD imagerel tupleiter_dealloc
	DD	imagerel tupleiter_dealloc+301
	DD	imagerel $unwind$tupleiter_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tupleiter_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0BC@KEPNBDGO@tupleiter_dealloc?$AA@
CONST	SEGMENT
??_C@_0BC@KEPNBDGO@tupleiter_dealloc?$AA@ DB 'tupleiter_dealloc', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\tupleobject.c
CONST	ENDS
;	COMDAT tupleiter_dealloc
_TEXT	SEGMENT
it$ = 64
tupleiter_dealloc PROC					; COMDAT

; 960  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 961  :     _PyObject_GC_UNTRACK(it);

  0000d	4c 8b c9	 mov	 r9, rcx
  00010	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@KEPNBDGO@tupleiter_dealloc?$AA@
  0001e	41 b8 c1 03 00
	00		 mov	 r8d, 961		; 000003c1H
  00024	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0002c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00031	85 c0		 test	 eax, eax
  00033	75 54		 jne	 SHORT $LN5@tupleiter_
  00035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@KEPNBDGO@tupleiter_dealloc?$AA@
  00043	4c 8b cf	 mov	 r9, rdi
  00046	41 b8 c1 03 00
	00		 mov	 r8d, 961		; 000003c1H
  0004c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00054	e8 00 00 00 00	 call	 _PyParallel_Guard
  00059	85 c0		 test	 eax, eax
  0005b	74 04		 je	 SHORT $LN11@tupleiter_
  0005d	33 d2		 xor	 edx, edx
  0005f	eb 04		 jmp	 SHORT $LN12@tupleiter_
$LN11@tupleiter_:
  00061	48 8d 57 e8	 lea	 rdx, QWORD PTR [rdi-24]
$LN12@tupleiter_:
  00065	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00068	48 8b 4a 08	 mov	 rcx, QWORD PTR [rdx+8]
  0006c	48 c7 42 10 fe
	ff ff ff	 mov	 QWORD PTR [rdx+16], -2
  00074	48 89 01	 mov	 QWORD PTR [rcx], rax
  00077	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  0007a	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  0007e	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00082	48 c7 02 00 00
	00 00		 mov	 QWORD PTR [rdx], 0
$LN5@tupleiter_:

; 962  :     Py_XDECREF(it->it_seq);

  00089	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  0008d	48 85 db	 test	 rbx, rbx
  00090	0f 84 85 00 00
	00		 je	 $LN3@tupleiter_
  00096	e8 00 00 00 00	 call	 _Py_PXCTX
  0009b	85 c0		 test	 eax, eax
  0009d	75 7c		 jne	 SHORT $LN3@tupleiter_
  0009f	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000a3	a8 20		 test	 al, 32			; 00000020H
  000a5	75 6c		 jne	 SHORT $LN17@tupleiter_
  000a7	84 c0		 test	 al, al
  000a9	78 68		 js	 SHORT $LN17@tupleiter_
  000ab	a8 02		 test	 al, 2
  000ad	75 6c		 jne	 SHORT $LN3@tupleiter_
  000af	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000b3	75 66		 jne	 SHORT $LN3@tupleiter_
  000b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c3	4c 8b cb	 mov	 r9, rbx
  000c6	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000cc	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d4	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d9	48 8b cb	 mov	 rcx, rbx
  000dc	85 c0		 test	 eax, eax
  000de	74 17		 je	 SHORT $LN22@tupleiter_
  000e0	e8 00 00 00 00	 call	 _Px_Dealloc

; 963  :     PyObject_GC_Del(it);

  000e5	48 8b cf	 mov	 rcx, rdi

; 964  : }

  000e8	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000ed	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000f1	5f		 pop	 rdi
  000f2	e9 00 00 00 00	 jmp	 PyObject_GC_Del

; 962  :     Py_XDECREF(it->it_seq);

$LN22@tupleiter_:
  000f7	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000fb	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 963  :     PyObject_GC_Del(it);

  00101	48 8b cf	 mov	 rcx, rdi

; 964  : }

  00104	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00109	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0010d	5f		 pop	 rdi
  0010e	e9 00 00 00 00	 jmp	 PyObject_GC_Del

; 962  :     Py_XDECREF(it->it_seq);

$LN17@tupleiter_:
  00113	48 8b cb	 mov	 rcx, rbx
  00116	e8 00 00 00 00	 call	 Px_DecRef
$LN3@tupleiter_:

; 963  :     PyObject_GC_Del(it);

  0011b	48 8b cf	 mov	 rcx, rdi

; 964  : }

  0011e	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00123	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00127	5f		 pop	 rdi
  00128	e9 00 00 00 00	 jmp	 PyObject_GC_Del
tupleiter_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@HJJCDLFD@tupleiter_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$tupleiter_traverse DD imagerel tupleiter_traverse
	DD	imagerel tupleiter_traverse+97
	DD	imagerel $unwind$tupleiter_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tupleiter_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BD@HJJCDLFD@tupleiter_traverse?$AA@
CONST	SEGMENT
??_C@_0BD@HJJCDLFD@tupleiter_traverse?$AA@ DB 'tupleiter_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT tupleiter_traverse
_TEXT	SEGMENT
it$ = 48
visit$ = 56
arg$ = 64
tupleiter_traverse PROC					; COMDAT

; 968  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 969  :     Py_VISIT(it->it_seq);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN3@tupleiter_@2
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@HJJCDLFD@tupleiter_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 c9 03 00
	00		 mov	 r8d, 969		; 000003c9H
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@tupleiter_@2:
  0003d	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN5@tupleiter_@2
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 02		 jne	 SHORT $LN7@tupleiter_@2
$LN5@tupleiter_@2:

; 970  :     return 0;

  0004f	33 c0		 xor	 eax, eax
$LN7@tupleiter_@2:

; 971  : }

  00051	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00056	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0005b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005f	5f		 pop	 rdi
  00060	c3		 ret	 0
tupleiter_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$tupleiter_next DD imagerel tupleiter_next
	DD	imagerel tupleiter_next+30
	DD	imagerel $unwind$tupleiter_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$tupleiter_next DD imagerel tupleiter_next+30
	DD	imagerel tupleiter_next+124
	DD	imagerel $chain$0$tupleiter_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$tupleiter_next DD imagerel tupleiter_next+124
	DD	imagerel tupleiter_next+150
	DD	imagerel $chain$2$tupleiter_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$tupleiter_next DD 020021H
	DD	083400H
	DD	imagerel tupleiter_next
	DD	imagerel tupleiter_next+30
	DD	imagerel $unwind$tupleiter_next
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$tupleiter_next DD 020521H
	DD	083405H
	DD	imagerel tupleiter_next
	DD	imagerel tupleiter_next+30
	DD	imagerel $unwind$tupleiter_next
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tupleiter_next DD 020601H
	DD	070025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\tupleobject.c
xdata	ENDS
;	COMDAT tupleiter_next
_TEXT	SEGMENT
it$ = 64
tupleiter_next PROC					; COMDAT

; 975  : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b f9	 mov	 rdi, rcx

; 976  :     PyTupleObject *seq;
; 977  :     PyObject *item;
; 978  : 
; 979  :     assert(it != NULL);
; 980  :     seq = it->it_seq;

  00009	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]

; 981  :     if (seq == NULL)

  0000d	48 85 c9	 test	 rcx, rcx
  00010	75 08		 jne	 SHORT $LN2@tupleiter_@3

; 982  :         return NULL;

  00012	33 c0		 xor	 eax, eax

; 995  : }

  00014	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00018	5f		 pop	 rdi
  00019	c3		 ret	 0
$LN2@tupleiter_@3:

; 983  :     assert(PyTuple_Check(seq));
; 984  : 
; 985  :     if (it->it_index < PyTuple_GET_SIZE(seq)) {

  0001a	48 63 47 60	 movsxd	 rax, DWORD PTR [rdi+96]
  0001e	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00023	48 3b 41 60	 cmp	 rax, QWORD PTR [rcx+96]
  00027	7d 53		 jge	 SHORT $LN1@tupleiter_@3

; 986  :         item = PyTuple_GET_ITEM(seq, it->it_index);

  00029	48 8b 5c c1 70	 mov	 rbx, QWORD PTR [rcx+rax*8+112]

; 987  :         ++it->it_index;

  0002e	ff c0		 inc	 eax
  00030	89 47 60	 mov	 DWORD PTR [rdi+96], eax

; 988  :         Py_INCREF(item);

  00033	e8 00 00 00 00	 call	 _Py_PXCTX
  00038	85 c0		 test	 eax, eax
  0003a	75 32		 jne	 SHORT $LN6@tupleiter_@3
  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0004a	4c 8b cb	 mov	 r9, rbx
  0004d	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00053	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0005b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00060	85 c0		 test	 eax, eax
  00062	75 06		 jne	 SHORT $LN5@tupleiter_@3
  00064	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00068	74 04		 je	 SHORT $LN6@tupleiter_@3
$LN5@tupleiter_@3:
  0006a	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN6@tupleiter_@3:

; 989  :         return item;

  0006e	48 8b c3	 mov	 rax, rbx
  00071	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 995  : }

  00076	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0007a	5f		 pop	 rdi
  0007b	c3		 ret	 0
$LN1@tupleiter_@3:

; 990  :     }
; 991  : 
; 992  :     Py_DECREF(seq);

  0007c	e8 00 00 00 00	 call	 _Py_DecRef
  00081	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 993  :     it->it_seq = NULL;

  00086	48 c7 47 68 00
	00 00 00	 mov	 QWORD PTR [rdi+104], 0

; 994  :     return NULL;

  0008e	33 c0		 xor	 eax, eax

; 995  : }

  00090	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00094	5f		 pop	 rdi
  00095	c3		 ret	 0
tupleiter_next ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT tupleiter_len
_TEXT	SEGMENT
it$ = 8
tupleiter_len PROC					; COMDAT

; 999  : {

  00000	48 8b c1	 mov	 rax, rcx

; 1000 :     Py_ssize_t len = 0;

  00003	33 c9		 xor	 ecx, ecx

; 1001 :     if (it->it_seq)

  00005	48 8b 50 68	 mov	 rdx, QWORD PTR [rax+104]
  00009	48 85 d2	 test	 rdx, rdx
  0000c	74 0b		 je	 SHORT $LN1@tupleiter_@4

; 1002 :         len = PyTuple_GET_SIZE(it->it_seq) - it->it_index;

  0000e	48 63 40 60	 movsxd	 rax, DWORD PTR [rax+96]
  00012	48 8b 4a 60	 mov	 rcx, QWORD PTR [rdx+96]
  00016	48 2b c8	 sub	 rcx, rax
$LN1@tupleiter_@4:

; 1003 :     return PyLong_FromSsize_t(len);
; 1004 : }

  00019	e9 00 00 00 00	 jmp	 PyLong_FromSsize_t
tupleiter_len ENDP
_TEXT	ENDS
PUBLIC	??_C@_05JMICDENA@N?$CI?$CI?$CJ?$CJ?$AA@		; `string'
PUBLIC	??_C@_05LHHNEACK@N?$CIO?$CJl?$AA@		; `string'
PUBLIC	??_C@_04BKLHDIKK@iter?$AA@			; `string'
EXTRN	_PyObject_GetBuiltin:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$tupleiter_reduce DD imagerel tupleiter_reduce
	DD	imagerel tupleiter_reduce+88
	DD	imagerel $unwind$tupleiter_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tupleiter_reduce DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_05JMICDENA@N?$CI?$CI?$CJ?$CJ?$AA@
CONST	SEGMENT
??_C@_05JMICDENA@N?$CI?$CI?$CJ?$CJ?$AA@ DB 'N(())', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05LHHNEACK@N?$CIO?$CJl?$AA@
CONST	SEGMENT
??_C@_05LHHNEACK@N?$CIO?$CJl?$AA@ DB 'N(O)l', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04BKLHDIKK@iter?$AA@
CONST	SEGMENT
??_C@_04BKLHDIKK@iter?$AA@ DB 'iter', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT tupleiter_reduce
_TEXT	SEGMENT
it$ = 48
tupleiter_reduce PROC					; COMDAT

; 1010 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1011 :     if (it->it_seq)

  0000a	48 8b 79 68	 mov	 rdi, QWORD PTR [rcx+104]
  0000e	48 8b d9	 mov	 rbx, rcx

; 1012 :         return Py_BuildValue("N(O)l", _PyObject_GetBuiltin("iter"),
; 1013 :                              it->it_seq, it->it_index);

  00011	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04BKLHDIKK@iter?$AA@
  00018	e8 00 00 00 00	 call	 _PyObject_GetBuiltin
  0001d	48 8b d0	 mov	 rdx, rax
  00020	48 85 ff	 test	 rdi, rdi
  00023	74 1d		 je	 SHORT $LN2@tupleiter_@5
  00025	44 8b 4b 60	 mov	 r9d, DWORD PTR [rbx+96]
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LHHNEACK@N?$CIO?$CJl?$AA@
  00030	4c 8b c7	 mov	 r8, rdi

; 1016 : }

  00033	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00038	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003c	5f		 pop	 rdi
  0003d	e9 00 00 00 00	 jmp	 Py_BuildValue
$LN2@tupleiter_@5:

; 1014 :     else
; 1015 :         return Py_BuildValue("N(())", _PyObject_GetBuiltin("iter"));

  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05JMICDENA@N?$CI?$CI?$CJ?$CJ?$AA@

; 1016 : }

  00049	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00052	5f		 pop	 rdi
  00053	e9 00 00 00 00	 jmp	 Py_BuildValue
tupleiter_reduce ENDP
_TEXT	ENDS
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyLong_AsLong:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$tupleiter_setstate DD imagerel tupleiter_setstate
	DD	imagerel tupleiter_setstate+168
	DD	imagerel $unwind$tupleiter_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tupleiter_setstate DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\tupleobject.c
xdata	ENDS
;	COMDAT tupleiter_setstate
_TEXT	SEGMENT
it$ = 64
state$ = 72
tupleiter_setstate PROC					; COMDAT

; 1020 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 1021 :     long index = PyLong_AsLong(state);

  0000d	48 8b ca	 mov	 rcx, rdx
  00010	e8 00 00 00 00	 call	 PyLong_AsLong
  00015	48 63 d8	 movsxd	 rbx, eax

; 1022 :     if (index == -1 && PyErr_Occurred())

  00018	83 fb ff	 cmp	 ebx, -1
  0001b	75 17		 jne	 SHORT $LN5@tupleiter_@6
  0001d	e8 00 00 00 00	 call	 PyErr_Occurred
  00022	48 85 c0	 test	 rax, rax
  00025	74 0d		 je	 SHORT $LN5@tupleiter_@6

; 1023 :         return NULL;

  00027	33 c0		 xor	 eax, eax

; 1032 : }

  00029	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0002e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00032	5f		 pop	 rdi
  00033	c3		 ret	 0
$LN5@tupleiter_@6:

; 1024 :     if (it->it_seq != NULL) {

  00034	48 8b 4f 68	 mov	 rcx, QWORD PTR [rdi+104]
  00038	48 85 c9	 test	 rcx, rcx
  0003b	74 14		 je	 SHORT $LN4@tupleiter_@6

; 1025 :         if (index < 0)

  0003d	85 db		 test	 ebx, ebx
  0003f	79 04		 jns	 SHORT $LN3@tupleiter_@6

; 1026 :             index = 0;

  00041	33 db		 xor	 ebx, ebx
  00043	eb 09		 jmp	 SHORT $LN1@tupleiter_@6
$LN3@tupleiter_@6:

; 1027 :         else if (it->it_seq != NULL && index > PyTuple_GET_SIZE(it->it_seq))

  00045	48 3b 59 60	 cmp	 rbx, QWORD PTR [rcx+96]
  00049	7e 03		 jle	 SHORT $LN1@tupleiter_@6

; 1028 :             index = PyTuple_GET_SIZE(it->it_seq);

  0004b	8b 59 60	 mov	 ebx, DWORD PTR [rcx+96]
$LN1@tupleiter_@6:

; 1029 :         it->it_index = index;

  0004e	89 5f 60	 mov	 DWORD PTR [rdi+96], ebx
$LN4@tupleiter_@6:

; 1030 :     }
; 1031 :     Py_RETURN_NONE;

  00051	e8 00 00 00 00	 call	 _Py_PXCTX
  00056	85 c0		 test	 eax, eax
  00058	75 3c		 jne	 SHORT $LN9@tupleiter_@6
  0005a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00061	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00068	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0006f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00075	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0007d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00082	85 c0		 test	 eax, eax
  00084	75 09		 jne	 SHORT $LN8@tupleiter_@6
  00086	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0008d	74 07		 je	 SHORT $LN9@tupleiter_@6
$LN8@tupleiter_@6:
  0008f	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN9@tupleiter_@6:
  00096	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1032 : }

  0009d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000a2	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a6	5f		 pop	 rdi
  000a7	c3		 ret	 0
tupleiter_setstate ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@LKDILOLH@tuple_iter?$AA@		; `string'
EXTRN	_PyObject_GC_New:PROC
EXTRN	_PxObject_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$tuple_iter DD imagerel tuple_iter
	DD	imagerel tuple_iter+50
	DD	imagerel $unwind$tuple_iter
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$tuple_iter DD imagerel tuple_iter+50
	DD	imagerel tuple_iter+102
	DD	imagerel $chain$0$tuple_iter
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$tuple_iter DD imagerel tuple_iter+102
	DD	imagerel tuple_iter+344
	DD	imagerel $chain$3$tuple_iter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$tuple_iter DD 040521H
	DD	083405H
	DD	097400H
	DD	imagerel tuple_iter
	DD	imagerel tuple_iter+50
	DD	imagerel $unwind$tuple_iter
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$tuple_iter DD 020521H
	DD	097405H
	DD	imagerel tuple_iter
	DD	imagerel tuple_iter+50
	DD	imagerel $unwind$tuple_iter
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tuple_iter DD 020601H
	DD	060025206H
xdata	ENDS
;	COMDAT ??_C@_0L@LKDILOLH@tuple_iter?$AA@
CONST	SEGMENT
??_C@_0L@LKDILOLH@tuple_iter?$AA@ DB 'tuple_iter', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\tupleobject.c
CONST	ENDS
;	COMDAT tuple_iter
_TEXT	SEGMENT
seq$ = 64
tuple_iter PROC						; COMDAT

; 1079 : {

  00000	40 56		 push	 rsi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1080 :     tupleiterobject *it;
; 1081 : 
; 1082 :     if (!PyTuple_Check(seq)) {

  00006	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0000a	48 8b f1	 mov	 rsi, rcx
  0000d	f7 80 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rax+256], 67108864 ; 04000000H
  00017	75 19		 jne	 SHORT $LN7@tuple_iter

; 1083 :         PyErr_BadInternalCall();

  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00020	ba 3b 04 00 00	 mov	 edx, 1083		; 0000043bH
  00025	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 1084 :         return NULL;

  0002a	33 c0		 xor	 eax, eax

; 1094 : }

  0002c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00030	5e		 pop	 rsi
  00031	c3		 ret	 0
$LN7@tuple_iter:
  00032	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi

; 1085 :     }
; 1086 :     it = PyObject_GC_New(tupleiterobject, &PyTupleIter_Type);

  00037	e8 00 00 00 00	 call	 _Py_PXCTX
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyTupleIter_Type
  00043	85 c0		 test	 eax, eax
  00045	74 07		 je	 SHORT $LN10@tuple_iter
  00047	e8 00 00 00 00	 call	 _PxObject_New
  0004c	eb 05		 jmp	 SHORT $LN19@tuple_iter
$LN10@tuple_iter:
  0004e	e8 00 00 00 00	 call	 _PyObject_GC_New
$LN19@tuple_iter:
  00053	48 8b f8	 mov	 rdi, rax

; 1087 :     if (it == NULL)

  00056	48 85 c0	 test	 rax, rax
  00059	75 0b		 jne	 SHORT $LN6@tuple_iter
  0005b	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]

; 1094 : }

  00060	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00064	5e		 pop	 rsi
  00065	c3		 ret	 0
$LN6@tuple_iter:
  00066	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx

; 1088 :         return NULL;
; 1089 :     it->it_index = 0;

  0006b	33 db		 xor	 ebx, ebx
  0006d	89 5f 60	 mov	 DWORD PTR [rdi+96], ebx

; 1090 :     Py_INCREF(seq);

  00070	e8 00 00 00 00	 call	 _Py_PXCTX
  00075	85 c0		 test	 eax, eax
  00077	75 32		 jne	 SHORT $LN15@tuple_iter
  00079	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00080	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00087	4c 8b ce	 mov	 r9, rsi
  0008a	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00090	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00098	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009d	85 c0		 test	 eax, eax
  0009f	75 06		 jne	 SHORT $LN14@tuple_iter
  000a1	f6 46 20 20	 test	 BYTE PTR [rsi+32], 32	; 00000020H
  000a5	74 04		 je	 SHORT $LN15@tuple_iter
$LN14@tuple_iter:
  000a7	48 ff 46 50	 inc	 QWORD PTR [rsi+80]
$LN15@tuple_iter:

; 1091 :     it->it_seq = (PyTupleObject *)seq;
; 1092 :     _PyObject_GC_TRACK(it);

  000ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@LKDILOLH@tuple_iter?$AA@
  000b9	4c 8b cf	 mov	 r9, rdi
  000bc	41 b8 44 04 00
	00		 mov	 r8d, 1092		; 00000444H
  000c2	48 89 77 68	 mov	 QWORD PTR [rdi+104], rsi
  000c6	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ce	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d3	85 c0		 test	 eax, eax
  000d5	75 6e		 jne	 SHORT $LN2@tuple_iter
  000d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  000de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@LKDILOLH@tuple_iter?$AA@
  000e5	4c 8b cf	 mov	 r9, rdi
  000e8	41 b8 44 04 00
	00		 mov	 r8d, 1092		; 00000444H
  000ee	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000f6	e8 00 00 00 00	 call	 _PyParallel_Guard
  000fb	85 c0		 test	 eax, eax
  000fd	75 04		 jne	 SHORT $LN13@tuple_iter
  000ff	48 8d 5f e8	 lea	 rbx, QWORD PTR [rdi-24]
$LN13@tuple_iter:
  00103	48 83 7b 10 fe	 cmp	 QWORD PTR [rbx+16], -2
  00108	74 0c		 je	 SHORT $LN1@tuple_iter
  0010a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  00111	e8 00 00 00 00	 call	 Py_FatalError
$LN1@tuple_iter:
  00116	48 c7 43 10 fd
	ff ff ff	 mov	 QWORD PTR [rbx+16], -3
  0011e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00125	48 89 03	 mov	 QWORD PTR [rbx], rax
  00128	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  0012f	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00133	48 89 4b 08	 mov	 QWORD PTR [rbx+8], rcx
  00137	48 89 19	 mov	 QWORD PTR [rcx], rbx
  0013a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00141	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
$LN2@tuple_iter:

; 1093 :     return (PyObject *)it;

  00145	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0014a	48 8b c7	 mov	 rax, rdi
  0014d	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]

; 1094 : }

  00152	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00156	5e		 pop	 rsi
  00157	c3		 ret	 0
tuple_iter ENDP
_TEXT	ENDS
END
