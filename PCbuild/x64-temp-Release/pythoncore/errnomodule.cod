; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_05PEAMIKEP@errno?$AA@			; `string'
_BSS	SEGMENT
errno_methods DB 020H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_05PEAMIKEP@errno?$AA@
CONST	SEGMENT
??_C@_05PEAMIKEP@errno?$AA@ DB 'errno', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
errno__doc__ DB	'This module makes available standard errno system symbol'
	DB	's.', 0aH, 0aH, 'The value of each symbol is the corresponding'
	DB	' integer value,', 0aH, 'e.g., on most systems, errno.ENOENT e'
	DB	'quals the integer 2.', 0aH, 0aH, 'The dictionary errno.errorc'
	DB	'ode maps numeric codes to symbol names,', 0aH, 'e.g., errno.e'
	DB	'rrorcode[2] could be the string ''ENOENT''.', 0aH, 0aH, 'Symb'
	DB	'ols that are not relevant to the underlying system are not de'
	DB	'fined.', 0aH, 0aH, 'To map error codes to error messages, use'
	DB	' the function os.strerror(),', 0aH, 'e.g. os.strerror(2) coul'
	DB	'd return ''No such file or directory''.', 00H
	ORG $+4
errnomodule DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_05PEAMIKEP@errno?$AA@
	DQ	FLAT:errno__doc__
	DQ	ffffffffffffffffH
	DQ	FLAT:errno_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
EXTRN	PyDict_SetItem:PROC
EXTRN	PyLong_FromLong:PROC
EXTRN	PyUnicode_FromString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_inscode DD imagerel _inscode
	DD	imagerel _inscode+320
	DD	imagerel $unwind$_inscode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_inscode DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\errnomodule.c
xdata	ENDS
;	COMDAT _inscode
_TEXT	SEGMENT
d$ = 64
de$ = 72
name$ = 80
code$ = 88
_inscode PROC						; COMDAT

; 51   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00014	48 8b e9	 mov	 rbp, rcx

; 52   :     PyObject *u = PyUnicode_FromString(name);

  00017	49 8b c8	 mov	 rcx, r8
  0001a	41 8b d9	 mov	 ebx, r9d
  0001d	48 8b f2	 mov	 rsi, rdx
  00020	e8 00 00 00 00	 call	 PyUnicode_FromString

; 53   :     PyObject *v = PyLong_FromLong((long) code);

  00025	8b cb		 mov	 ecx, ebx
  00027	48 8b f8	 mov	 rdi, rax
  0002a	e8 00 00 00 00	 call	 PyLong_FromLong
  0002f	48 8b d8	 mov	 rbx, rax

; 54   : 
; 55   :     /* Don't bother checking for errors; they'll be caught at the end
; 56   :      * of the module initialization function by the caller of
; 57   :      * initerrno().
; 58   :      */
; 59   :     if (u && v) {

  00032	48 85 ff	 test	 rdi, rdi
  00035	0f 84 86 00 00
	00		 je	 $LN7@inscode
  0003b	48 85 c0	 test	 rax, rax
  0003e	74 1c		 je	 SHORT $LN8@inscode

; 60   :         /* insert in modules dict */
; 61   :         PyDict_SetItem(d, u, v);

  00040	4c 8b c0	 mov	 r8, rax
  00043	48 8b d7	 mov	 rdx, rdi
  00046	48 8b cd	 mov	 rcx, rbp
  00049	e8 00 00 00 00	 call	 PyDict_SetItem

; 62   :         /* insert in errorcode dict */
; 63   :         PyDict_SetItem(de, v, u);

  0004e	4c 8b c7	 mov	 r8, rdi
  00051	48 8b d3	 mov	 rdx, rbx
  00054	48 8b ce	 mov	 rcx, rsi
  00057	e8 00 00 00 00	 call	 PyDict_SetItem
$LN8@inscode:

; 64   :     }
; 65   :     Py_XDECREF(u);

  0005c	e8 00 00 00 00	 call	 _Py_PXCTX
  00061	85 c0		 test	 eax, eax
  00063	75 5c		 jne	 SHORT $LN7@inscode
  00065	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00069	a8 20		 test	 al, 32			; 00000020H
  0006b	75 4c		 jne	 SHORT $LN16@inscode
  0006d	84 c0		 test	 al, al
  0006f	78 48		 js	 SHORT $LN16@inscode
  00071	a8 02		 test	 al, 2
  00073	75 4c		 jne	 SHORT $LN7@inscode
  00075	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00079	75 46		 jne	 SHORT $LN7@inscode
  0007b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00082	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00089	4c 8b cf	 mov	 r9, rdi
  0008c	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00092	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0009a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009f	48 8b cf	 mov	 rcx, rdi
  000a2	85 c0		 test	 eax, eax
  000a4	74 07		 je	 SHORT $LN21@inscode
  000a6	e8 00 00 00 00	 call	 _Px_Dealloc
  000ab	eb 14		 jmp	 SHORT $LN7@inscode
$LN21@inscode:
  000ad	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000b1	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000b7	eb 08		 jmp	 SHORT $LN7@inscode
$LN16@inscode:
  000b9	48 8b cf	 mov	 rcx, rdi
  000bc	e8 00 00 00 00	 call	 Px_DecRef
$LN7@inscode:

; 66   :     Py_XDECREF(v);

  000c1	48 85 db	 test	 rbx, rbx
  000c4	74 65		 je	 SHORT $LN3@inscode
  000c6	e8 00 00 00 00	 call	 _Py_PXCTX
  000cb	85 c0		 test	 eax, eax
  000cd	75 5c		 jne	 SHORT $LN3@inscode
  000cf	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000d3	a8 20		 test	 al, 32			; 00000020H
  000d5	75 4c		 jne	 SHORT $LN27@inscode
  000d7	84 c0		 test	 al, al
  000d9	78 48		 js	 SHORT $LN27@inscode
  000db	a8 02		 test	 al, 2
  000dd	75 4c		 jne	 SHORT $LN3@inscode
  000df	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000e3	75 46		 jne	 SHORT $LN3@inscode
  000e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000f3	4c 8b cb	 mov	 r9, rbx
  000f6	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000fc	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00104	e8 00 00 00 00	 call	 _PyParallel_Guard
  00109	48 8b cb	 mov	 rcx, rbx
  0010c	85 c0		 test	 eax, eax
  0010e	74 07		 je	 SHORT $LN32@inscode
  00110	e8 00 00 00 00	 call	 _Px_Dealloc
  00115	eb 14		 jmp	 SHORT $LN3@inscode
$LN32@inscode:
  00117	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0011b	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00121	eb 08		 jmp	 SHORT $LN3@inscode
$LN27@inscode:
  00123	48 8b cb	 mov	 rcx, rbx
  00126	e8 00 00 00 00	 call	 Px_DecRef
$LN3@inscode:

; 67   : }

  0012b	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00130	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00135	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  0013a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0013e	5f		 pop	 rdi
  0013f	c3		 ret	 0
_inscode ENDP
_TEXT	ENDS
PUBLIC	??_C@_07NFHNCCMK@ENOTSUP?$AA@			; `string'
PUBLIC	??_C@_0BA@NJDAMECN@ENOTRECOVERABLE?$AA@		; `string'
PUBLIC	??_C@_0L@MFHDJDKB@EOWNERDEAD?$AA@		; `string'
PUBLIC	??_C@_09FIKDCFKM@ECANCELED?$AA@			; `string'
PUBLIC	??_C@_0N@KABONKCJ@WSAENETRESET?$AA@		; `string'
PUBLIC	??_C@_0BA@ECEEDLKJ@WSAECONNREFUSED?$AA@		; `string'
PUBLIC	??_C@_0BA@BLGPIJAD@WSAEDESTADDRREQ?$AA@		; `string'
PUBLIC	??_C@_0BD@KNONLHOA@WSAESOCKTNOSUPPORT?$AA@	; `string'
PUBLIC	??_C@_0P@FHEJEBJC@WSAEINPROGRESS?$AA@		; `string'
PUBLIC	??_C@_09PDAAOFKK@WSAEINVAL?$AA@			; `string'
PUBLIC	??_C@_0L@FBDKOKMM@WSAEREMOTE?$AA@		; `string'
PUBLIC	??_C@_0M@BJHJCMPN@WSAENOTCONN?$AA@		; `string'
PUBLIC	??_C@_09DHBOOMJK@WSAEDQUOT?$AA@			; `string'
PUBLIC	??_C@_0L@KMBJICHC@WSAEISCONN?$AA@		; `string'
PUBLIC	??_C@_0O@IFNEEJHC@WSAEOPNOTSUPP?$AA@		; `string'
PUBLIC	??_C@_0BA@KKILJDEG@WSAEPFNOSUPPORT?$AA@		; `string'
PUBLIC	??_C@_0P@BLDHJENA@WSAEWOULDBLOCK?$AA@		; `string'
PUBLIC	??_C@_0P@MDJAKAKC@WSASYSNOTREADY?$AA@		; `string'
PUBLIC	??_C@_0BD@EDJBJFH@WSAEPROTONOSUPPORT?$AA@	; `string'
PUBLIC	??_C@_0M@EAGDEEAC@WSAEALREADY?$AA@		; `string'
PUBLIC	??_C@_0BB@MBBPJMGK@WSAEADDRNOTAVAIL?$AA@	; `string'
PUBLIC	??_C@_0O@OPDDJBEB@WSAEADDRINUSE?$AA@		; `string'
PUBLIC	??_C@_0O@HCKGAENP@WSAEPROTOTYPE?$AA@		; `string'
PUBLIC	??_C@_08KEJFHKFF@WSAEINTR?$AA@			; `string'
PUBLIC	??_C@_0L@EEHHIAEC@WSAEDISCON?$AA@		; `string'
PUBLIC	??_C@_0L@OOBBNNPD@WSAENOBUFS?$AA@		; `string'
PUBLIC	??_C@_0N@BJEDIOFA@WSAETIMEDOUT?$AA@		; `string'
PUBLIC	??_C@_0O@CIPFFFJE@WSAECONNRESET?$AA@		; `string'
PUBLIC	??_C@_08LJKOCPDH@WSAEBADF?$AA@			; `string'
PUBLIC	??_C@_0M@PJKLHKI@WSAEMSGSIZE?$AA@		; `string'
PUBLIC	??_C@_0L@IGIFNHIB@WSABASEERR?$AA@		; `string'
PUBLIC	??_C@_09EKFHKCJJ@WSAEACCES?$AA@			; `string'
PUBLIC	??_C@_0BA@COKPFEMB@WSAETOOMANYREFS?$AA@		; `string'
PUBLIC	??_C@_0BA@DNDGDCNF@WSAEAFNOSUPPORT?$AA@		; `string'
PUBLIC	??_C@_0N@JOJKMOCF@WSAESHUTDOWN?$AA@		; `string'
PUBLIC	??_C@_0N@KFICKHOH@WSAENOTEMPTY?$AA@		; `string'
PUBLIC	??_C@_0BA@PCKIJCGI@WSAENAMETOOLONG?$AA@		; `string'
PUBLIC	??_C@_0BA@HNCPIGIO@WSAECONNABORTED?$AA@		; `string'
PUBLIC	??_C@_0P@KODINEND@WSAENOPROTOOPT?$AA@		; `string'
PUBLIC	??_C@_09IOPCJPLP@WSAEUSERS?$AA@			; `string'
PUBLIC	??_C@_0BC@CLCHBKPK@WSANOTINITIALISED?$AA@	; `string'
PUBLIC	??_C@_09BIHAGEEK@WSAEFAULT?$AA@			; `string'
PUBLIC	??_C@_0M@CDIHOKBK@WSAEPROCLIM?$AA@		; `string'
PUBLIC	??_C@_0P@MMGFNLEA@WSAENETUNREACH?$AA@		; `string'
PUBLIC	??_C@_0BD@PKACBPOA@WSAVERNOTSUPPORTED?$AA@	; `string'
PUBLIC	??_C@_09GPMJAMEI@WSAESTALE?$AA@			; `string'
PUBLIC	??_C@_09IJIBIDKO@WSAEMFILE?$AA@			; `string'
PUBLIC	??_C@_08PGIMLMFD@WSAELOOP?$AA@			; `string'
PUBLIC	??_C@_0BA@HKCFHLFG@WSAEHOSTUNREACH?$AA@		; `string'
PUBLIC	??_C@_0M@MDGNMGJ@WSAENOTSOCK?$AA@		; `string'
PUBLIC	??_C@_0M@BMNODHFM@WSAENETDOWN?$AA@		; `string'
PUBLIC	??_C@_0N@NJBKCOKK@WSAEHOSTDOWN?$AA@		; `string'
PUBLIC	??_C@_05PAHIOBGD@ENXIO?$AA@			; `string'
PUBLIC	??_C@_0M@NFKGMJFK@EINPROGRESS?$AA@		; `string'
PUBLIC	??_C@_07DFOKCEGI@ETXTBSY?$AA@			; `string'
PUBLIC	??_C@_06CEHBGFH@EMFILE?$AA@			; `string'
PUBLIC	??_C@_0N@LLJCPBML@ETOOMANYREFS?$AA@		; `string'
PUBLIC	??_C@_09MPHFKLCM@EDEADLOCK?$AA@			; `string'
PUBLIC	??_C@_05MPGLBOOM@ETIME?$AA@			; `string'
PUBLIC	??_C@_0BA@CLGCDGBO@ESOCKTNOSUPPORT?$AA@		; `string'
PUBLIC	??_C@_06NPPCCGFP@ENOTTY?$AA@			; `string'
PUBLIC	??_C@_0N@GHJFDHGC@ENAMETOOLONG?$AA@		; `string'
PUBLIC	??_C@_06GIGOMMFD@EAGAIN?$AA@			; `string'
PUBLIC	??_C@_0L@GCKIEACE@EOPNOTSUPP?$AA@		; `string'
PUBLIC	??_C@_0L@IEPJIBH@EADDRINUSE?$AA@		; `string'
PUBLIC	??_C@_0L@MPIJFMMC@ECONNRESET?$AA@		; `string'
PUBLIC	??_C@_06NDGFKNFB@ERANGE?$AA@			; `string'
PUBLIC	??_C@_06NFPAPHBG@EMLINK?$AA@			; `string'
PUBLIC	??_C@_08EJCNGKJA@ENOTSOCK?$AA@			; `string'
PUBLIC	??_C@_06MBKJCAFI@ENOMEM?$AA@			; `string'
PUBLIC	??_C@_05NDGLMEPP@ENOSR?$AA@			; `string'
PUBLIC	??_C@_06OEAPJJLB@ESTALE?$AA@			; `string'
PUBLIC	??_C@_0M@EOIKFDII@ENETUNREACH?$AA@		; `string'
PUBLIC	??_C@_0N@OIBCCDIE@ECONNABORTED?$AA@		; `string'
PUBLIC	??_C@_06CLMCJMAJ@ENOLCK?$AA@			; `string'
PUBLIC	??_C@_0N@IOFCCMAJ@EDESTADDRREQ?$AA@		; `string'
PUBLIC	??_C@_08FMGCJKAE@ENOTCONN?$AA@			; `string'
PUBLIC	??_C@_07PJJHKFD@EDEADLK?$AA@			; `string'
PUBLIC	??_C@_05DHHFJHFB@EFBIG?$AA@			; `string'
PUBLIC	??_C@_06JDLGPBLD@EFAULT?$AA@			; `string'
PUBLIC	??_C@_06KBNBMHCN@ENOSTR?$AA@			; `string'
PUBLIC	??_C@_06LMNIHJGD@EDQUOT?$AA@			; `string'
PUBLIC	??_C@_06HFGHHKIE@EEXIST?$AA@			; `string'
PUBLIC	??_C@_06JDEIEOEO@ENOENT?$AA@			; `string'
PUBLIC	??_C@_09NNGHNPFO@ETIMEDOUT?$AA@			; `string'
PUBLIC	??_C@_09GEDKILCH@ENETRESET?$AA@			; `string'
PUBLIC	??_C@_07DAMMOHJ@ENOLINK?$AA@			; `string'
PUBLIC	??_C@_06MBAHENIK@ESPIPE?$AA@			; `string'
PUBLIC	??_C@_06IENDGEPJ@ENFILE?$AA@			; `string'
PUBLIC	??_C@_07PJPPGGME@EBADMSG?$AA@			; `string'
PUBLIC	??_C@_05HKNCPLEH@EIDRM?$AA@			; `string'
PUBLIC	??_C@_0O@CBFPEINB@EADDRNOTAVAIL?$AA@		; `string'
PUBLIC	??_C@_05HFINOOKG@EROFS?$AA@			; `string'
PUBLIC	??_C@_0BA@ICLGJIKJ@EPROTONOSUPPORT?$AA@		; `string'
PUBLIC	??_C@_06MAPENCBD@EISDIR?$AA@			; `string'
PUBLIC	??_C@_0N@NHHJJOKD@ECONNREFUSED?$AA@		; `string'
PUBLIC	??_C@_04IDKJOLAE@EDOM?$AA@			; `string'
PUBLIC	??_C@_05KPJOGJNB@EPERM?$AA@			; `string'
PUBLIC	??_C@_07DPLJHFHK@ENOTDIR?$AA@			; `string'
PUBLIC	??_C@_06MNLNBHMB@EILSEQ?$AA@			; `string'
PUBLIC	??_C@_06MBJBDHGA@EACCES?$AA@			; `string'
PUBLIC	??_C@_08FJMFIBKF@ENETDOWN?$AA@			; `string'
PUBLIC	??_C@_08FHIPCPL@EALREADY?$AA@			; `string'
PUBLIC	??_C@_07CCDFPJBL@ENOEXEC?$AA@			; `string'
PUBLIC	??_C@_06PFABEMOB@ENOSPC?$AA@			; `string'
PUBLIC	??_C@_0L@JFNKANIJ@EPROTOTYPE?$AA@		; `string'
PUBLIC	??_C@_03HKNLGNGJ@EIO?$AA@			; `string'
PUBLIC	??_C@_05MBIDDMGN@EBADF?$AA@			; `string'
PUBLIC	??_C@_09FKLOJPCL@ESHUTDOWN?$AA@			; `string'
PUBLIC	??_C@_07GIPDAOFP@EISCONN?$AA@			; `string'
PUBLIC	??_C@_0M@JJNIBMBI@EWOULDBLOCK?$AA@		; `string'
PUBLIC	??_C@_05MKMLEHMO@EBUSY?$AA@			; `string'
PUBLIC	??_C@_0M@CMNHFMBL@ENOPROTOOPT?$AA@		; `string'
PUBLIC	??_C@_0N@DPLGDGEM@EPFNOSUPPORT?$AA@		; `string'
PUBLIC	??_C@_09BNDOHPKE@EHOSTDOWN?$AA@			; `string'
PUBLIC	??_C@_0N@KIALJHNP@EAFNOSUPPORT?$AA@		; `string'
PUBLIC	??_C@_08EKIBABFB@EMSGSIZE?$AA@			; `string'
PUBLIC	??_C@_05EFGDEBCF@ESRCH?$AA@			; `string'
PUBLIC	??_C@_05DLCHNBFO@E2BIG?$AA@			; `string'
PUBLIC	??_C@_05JHANDLBK@EXDEV?$AA@			; `string'
PUBLIC	??_C@_05IOKBKPAJ@ELOOP?$AA@			; `string'
PUBLIC	??_C@_06JOGGPIAH@ECHILD?$AA@			; `string'
PUBLIC	??_C@_07JFNAGGOB@EREMOTE?$AA@			; `string'
PUBLIC	??_C@_06OFNOHDMO@EPROTO?$AA@			; `string'
PUBLIC	??_C@_07CKPLFBNO@ENOBUFS?$AA@			; `string'
PUBLIC	??_C@_09GBKGPGOJ@ENOTEMPTY?$AA@			; `string'
PUBLIC	??_C@_06FDEAKEG@EUSERS?$AA@			; `string'
PUBLIC	??_C@_05NMLIGJAP@EINTR?$AA@			; `string'
PUBLIC	??_C@_09CJLMNFNK@EOVERFLOW?$AA@			; `string'
PUBLIC	??_C@_06HIMGHAFD@EINVAL?$AA@			; `string'
PUBLIC	??_C@_05COBFIIAP@EPIPE?$AA@			; `string'
PUBLIC	??_C@_06LABCGFDP@ENOSYS?$AA@			; `string'
PUBLIC	??_C@_07BNJGGDHL@ENODATA?$AA@			; `string'
PUBLIC	??_C@_06CDONBHBA@ENOMSG?$AA@			; `string'
PUBLIC	??_C@_0N@OPBINOFM@EHOSTUNREACH?$AA@		; `string'
PUBLIC	??_C@_06BFJHKEEI@ENODEV?$AA@			; `string'
PUBLIC	??_C@_09MKAMKDBD@errorcode?$AA@			; `string'
PUBLIC	PyInit_errno
EXTRN	PyDict_SetItemString:PROC
EXTRN	PyDict_New:PROC
EXTRN	PyModule_GetDict:PROC
EXTRN	PyModule_Create2:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyInit_errno DD imagerel $LN8
	DD	imagerel $LN8+40
	DD	imagerel $unwind$PyInit_errno
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyInit_errno DD imagerel $LN8+40
	DD	imagerel $LN8+3473
	DD	imagerel $chain$1$PyInit_errno
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyInit_errno DD imagerel $LN8+3473
	DD	imagerel $LN8+3491
	DD	imagerel $chain$3$PyInit_errno
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyInit_errno DD 040021H
	DD	077400H
	DD	063400H
	DD	imagerel $LN8
	DD	imagerel $LN8+40
	DD	imagerel $unwind$PyInit_errno
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyInit_errno DD 040a21H
	DD	07740aH
	DD	063405H
	DD	imagerel $LN8
	DD	imagerel $LN8+40
	DD	imagerel $unwind$PyInit_errno
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit_errno DD 020601H
	DD	060023206H
xdata	ENDS
;	COMDAT ??_C@_07NFHNCCMK@ENOTSUP?$AA@
CONST	SEGMENT
??_C@_07NFHNCCMK@ENOTSUP?$AA@ DB 'ENOTSUP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NJDAMECN@ENOTRECOVERABLE?$AA@
CONST	SEGMENT
??_C@_0BA@NJDAMECN@ENOTRECOVERABLE?$AA@ DB 'ENOTRECOVERABLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MFHDJDKB@EOWNERDEAD?$AA@
CONST	SEGMENT
??_C@_0L@MFHDJDKB@EOWNERDEAD?$AA@ DB 'EOWNERDEAD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FIKDCFKM@ECANCELED?$AA@
CONST	SEGMENT
??_C@_09FIKDCFKM@ECANCELED?$AA@ DB 'ECANCELED', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KABONKCJ@WSAENETRESET?$AA@
CONST	SEGMENT
??_C@_0N@KABONKCJ@WSAENETRESET?$AA@ DB 'WSAENETRESET', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ECEEDLKJ@WSAECONNREFUSED?$AA@
CONST	SEGMENT
??_C@_0BA@ECEEDLKJ@WSAECONNREFUSED?$AA@ DB 'WSAECONNREFUSED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BLGPIJAD@WSAEDESTADDRREQ?$AA@
CONST	SEGMENT
??_C@_0BA@BLGPIJAD@WSAEDESTADDRREQ?$AA@ DB 'WSAEDESTADDRREQ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KNONLHOA@WSAESOCKTNOSUPPORT?$AA@
CONST	SEGMENT
??_C@_0BD@KNONLHOA@WSAESOCKTNOSUPPORT?$AA@ DB 'WSAESOCKTNOSUPPORT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FHEJEBJC@WSAEINPROGRESS?$AA@
CONST	SEGMENT
??_C@_0P@FHEJEBJC@WSAEINPROGRESS?$AA@ DB 'WSAEINPROGRESS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09PDAAOFKK@WSAEINVAL?$AA@
CONST	SEGMENT
??_C@_09PDAAOFKK@WSAEINVAL?$AA@ DB 'WSAEINVAL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FBDKOKMM@WSAEREMOTE?$AA@
CONST	SEGMENT
??_C@_0L@FBDKOKMM@WSAEREMOTE?$AA@ DB 'WSAEREMOTE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BJHJCMPN@WSAENOTCONN?$AA@
CONST	SEGMENT
??_C@_0M@BJHJCMPN@WSAENOTCONN?$AA@ DB 'WSAENOTCONN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09DHBOOMJK@WSAEDQUOT?$AA@
CONST	SEGMENT
??_C@_09DHBOOMJK@WSAEDQUOT?$AA@ DB 'WSAEDQUOT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KMBJICHC@WSAEISCONN?$AA@
CONST	SEGMENT
??_C@_0L@KMBJICHC@WSAEISCONN?$AA@ DB 'WSAEISCONN', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IFNEEJHC@WSAEOPNOTSUPP?$AA@
CONST	SEGMENT
??_C@_0O@IFNEEJHC@WSAEOPNOTSUPP?$AA@ DB 'WSAEOPNOTSUPP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KKILJDEG@WSAEPFNOSUPPORT?$AA@
CONST	SEGMENT
??_C@_0BA@KKILJDEG@WSAEPFNOSUPPORT?$AA@ DB 'WSAEPFNOSUPPORT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BLDHJENA@WSAEWOULDBLOCK?$AA@
CONST	SEGMENT
??_C@_0P@BLDHJENA@WSAEWOULDBLOCK?$AA@ DB 'WSAEWOULDBLOCK', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MDJAKAKC@WSASYSNOTREADY?$AA@
CONST	SEGMENT
??_C@_0P@MDJAKAKC@WSASYSNOTREADY?$AA@ DB 'WSASYSNOTREADY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EDJBJFH@WSAEPROTONOSUPPORT?$AA@
CONST	SEGMENT
??_C@_0BD@EDJBJFH@WSAEPROTONOSUPPORT?$AA@ DB 'WSAEPROTONOSUPPORT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EAGDEEAC@WSAEALREADY?$AA@
CONST	SEGMENT
??_C@_0M@EAGDEEAC@WSAEALREADY?$AA@ DB 'WSAEALREADY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MBBPJMGK@WSAEADDRNOTAVAIL?$AA@
CONST	SEGMENT
??_C@_0BB@MBBPJMGK@WSAEADDRNOTAVAIL?$AA@ DB 'WSAEADDRNOTAVAIL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OPDDJBEB@WSAEADDRINUSE?$AA@
CONST	SEGMENT
??_C@_0O@OPDDJBEB@WSAEADDRINUSE?$AA@ DB 'WSAEADDRINUSE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HCKGAENP@WSAEPROTOTYPE?$AA@
CONST	SEGMENT
??_C@_0O@HCKGAENP@WSAEPROTOTYPE?$AA@ DB 'WSAEPROTOTYPE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08KEJFHKFF@WSAEINTR?$AA@
CONST	SEGMENT
??_C@_08KEJFHKFF@WSAEINTR?$AA@ DB 'WSAEINTR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EEHHIAEC@WSAEDISCON?$AA@
CONST	SEGMENT
??_C@_0L@EEHHIAEC@WSAEDISCON?$AA@ DB 'WSAEDISCON', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OOBBNNPD@WSAENOBUFS?$AA@
CONST	SEGMENT
??_C@_0L@OOBBNNPD@WSAENOBUFS?$AA@ DB 'WSAENOBUFS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BJEDIOFA@WSAETIMEDOUT?$AA@
CONST	SEGMENT
??_C@_0N@BJEDIOFA@WSAETIMEDOUT?$AA@ DB 'WSAETIMEDOUT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CIPFFFJE@WSAECONNRESET?$AA@
CONST	SEGMENT
??_C@_0O@CIPFFFJE@WSAECONNRESET?$AA@ DB 'WSAECONNRESET', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08LJKOCPDH@WSAEBADF?$AA@
CONST	SEGMENT
??_C@_08LJKOCPDH@WSAEBADF?$AA@ DB 'WSAEBADF', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PJKLHKI@WSAEMSGSIZE?$AA@
CONST	SEGMENT
??_C@_0M@PJKLHKI@WSAEMSGSIZE?$AA@ DB 'WSAEMSGSIZE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IGIFNHIB@WSABASEERR?$AA@
CONST	SEGMENT
??_C@_0L@IGIFNHIB@WSABASEERR?$AA@ DB 'WSABASEERR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EKFHKCJJ@WSAEACCES?$AA@
CONST	SEGMENT
??_C@_09EKFHKCJJ@WSAEACCES?$AA@ DB 'WSAEACCES', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@COKPFEMB@WSAETOOMANYREFS?$AA@
CONST	SEGMENT
??_C@_0BA@COKPFEMB@WSAETOOMANYREFS?$AA@ DB 'WSAETOOMANYREFS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DNDGDCNF@WSAEAFNOSUPPORT?$AA@
CONST	SEGMENT
??_C@_0BA@DNDGDCNF@WSAEAFNOSUPPORT?$AA@ DB 'WSAEAFNOSUPPORT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JOJKMOCF@WSAESHUTDOWN?$AA@
CONST	SEGMENT
??_C@_0N@JOJKMOCF@WSAESHUTDOWN?$AA@ DB 'WSAESHUTDOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KFICKHOH@WSAENOTEMPTY?$AA@
CONST	SEGMENT
??_C@_0N@KFICKHOH@WSAENOTEMPTY?$AA@ DB 'WSAENOTEMPTY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PCKIJCGI@WSAENAMETOOLONG?$AA@
CONST	SEGMENT
??_C@_0BA@PCKIJCGI@WSAENAMETOOLONG?$AA@ DB 'WSAENAMETOOLONG', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HNCPIGIO@WSAECONNABORTED?$AA@
CONST	SEGMENT
??_C@_0BA@HNCPIGIO@WSAECONNABORTED?$AA@ DB 'WSAECONNABORTED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KODINEND@WSAENOPROTOOPT?$AA@
CONST	SEGMENT
??_C@_0P@KODINEND@WSAENOPROTOOPT?$AA@ DB 'WSAENOPROTOOPT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09IOPCJPLP@WSAEUSERS?$AA@
CONST	SEGMENT
??_C@_09IOPCJPLP@WSAEUSERS?$AA@ DB 'WSAEUSERS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CLCHBKPK@WSANOTINITIALISED?$AA@
CONST	SEGMENT
??_C@_0BC@CLCHBKPK@WSANOTINITIALISED?$AA@ DB 'WSANOTINITIALISED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09BIHAGEEK@WSAEFAULT?$AA@
CONST	SEGMENT
??_C@_09BIHAGEEK@WSAEFAULT?$AA@ DB 'WSAEFAULT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CDIHOKBK@WSAEPROCLIM?$AA@
CONST	SEGMENT
??_C@_0M@CDIHOKBK@WSAEPROCLIM?$AA@ DB 'WSAEPROCLIM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MMGFNLEA@WSAENETUNREACH?$AA@
CONST	SEGMENT
??_C@_0P@MMGFNLEA@WSAENETUNREACH?$AA@ DB 'WSAENETUNREACH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PKACBPOA@WSAVERNOTSUPPORTED?$AA@
CONST	SEGMENT
??_C@_0BD@PKACBPOA@WSAVERNOTSUPPORTED?$AA@ DB 'WSAVERNOTSUPPORTED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GPMJAMEI@WSAESTALE?$AA@
CONST	SEGMENT
??_C@_09GPMJAMEI@WSAESTALE?$AA@ DB 'WSAESTALE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09IJIBIDKO@WSAEMFILE?$AA@
CONST	SEGMENT
??_C@_09IJIBIDKO@WSAEMFILE?$AA@ DB 'WSAEMFILE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PGIMLMFD@WSAELOOP?$AA@
CONST	SEGMENT
??_C@_08PGIMLMFD@WSAELOOP?$AA@ DB 'WSAELOOP', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HKCFHLFG@WSAEHOSTUNREACH?$AA@
CONST	SEGMENT
??_C@_0BA@HKCFHLFG@WSAEHOSTUNREACH?$AA@ DB 'WSAEHOSTUNREACH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MDGNMGJ@WSAENOTSOCK?$AA@
CONST	SEGMENT
??_C@_0M@MDGNMGJ@WSAENOTSOCK?$AA@ DB 'WSAENOTSOCK', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BMNODHFM@WSAENETDOWN?$AA@
CONST	SEGMENT
??_C@_0M@BMNODHFM@WSAENETDOWN?$AA@ DB 'WSAENETDOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NJBKCOKK@WSAEHOSTDOWN?$AA@
CONST	SEGMENT
??_C@_0N@NJBKCOKK@WSAEHOSTDOWN?$AA@ DB 'WSAEHOSTDOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05PAHIOBGD@ENXIO?$AA@
CONST	SEGMENT
??_C@_05PAHIOBGD@ENXIO?$AA@ DB 'ENXIO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NFKGMJFK@EINPROGRESS?$AA@
CONST	SEGMENT
??_C@_0M@NFKGMJFK@EINPROGRESS?$AA@ DB 'EINPROGRESS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DFOKCEGI@ETXTBSY?$AA@
CONST	SEGMENT
??_C@_07DFOKCEGI@ETXTBSY?$AA@ DB 'ETXTBSY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CEHBGFH@EMFILE?$AA@
CONST	SEGMENT
??_C@_06CEHBGFH@EMFILE?$AA@ DB 'EMFILE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LLJCPBML@ETOOMANYREFS?$AA@
CONST	SEGMENT
??_C@_0N@LLJCPBML@ETOOMANYREFS?$AA@ DB 'ETOOMANYREFS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09MPHFKLCM@EDEADLOCK?$AA@
CONST	SEGMENT
??_C@_09MPHFKLCM@EDEADLOCK?$AA@ DB 'EDEADLOCK', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MPGLBOOM@ETIME?$AA@
CONST	SEGMENT
??_C@_05MPGLBOOM@ETIME?$AA@ DB 'ETIME', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CLGCDGBO@ESOCKTNOSUPPORT?$AA@
CONST	SEGMENT
??_C@_0BA@CLGCDGBO@ESOCKTNOSUPPORT?$AA@ DB 'ESOCKTNOSUPPORT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06NPPCCGFP@ENOTTY?$AA@
CONST	SEGMENT
??_C@_06NPPCCGFP@ENOTTY?$AA@ DB 'ENOTTY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GHJFDHGC@ENAMETOOLONG?$AA@
CONST	SEGMENT
??_C@_0N@GHJFDHGC@ENAMETOOLONG?$AA@ DB 'ENAMETOOLONG', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06GIGOMMFD@EAGAIN?$AA@
CONST	SEGMENT
??_C@_06GIGOMMFD@EAGAIN?$AA@ DB 'EAGAIN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GCKIEACE@EOPNOTSUPP?$AA@
CONST	SEGMENT
??_C@_0L@GCKIEACE@EOPNOTSUPP?$AA@ DB 'EOPNOTSUPP', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IEPJIBH@EADDRINUSE?$AA@
CONST	SEGMENT
??_C@_0L@IEPJIBH@EADDRINUSE?$AA@ DB 'EADDRINUSE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MPIJFMMC@ECONNRESET?$AA@
CONST	SEGMENT
??_C@_0L@MPIJFMMC@ECONNRESET?$AA@ DB 'ECONNRESET', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06NDGFKNFB@ERANGE?$AA@
CONST	SEGMENT
??_C@_06NDGFKNFB@ERANGE?$AA@ DB 'ERANGE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NFPAPHBG@EMLINK?$AA@
CONST	SEGMENT
??_C@_06NFPAPHBG@EMLINK?$AA@ DB 'EMLINK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EJCNGKJA@ENOTSOCK?$AA@
CONST	SEGMENT
??_C@_08EJCNGKJA@ENOTSOCK?$AA@ DB 'ENOTSOCK', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06MBKJCAFI@ENOMEM?$AA@
CONST	SEGMENT
??_C@_06MBKJCAFI@ENOMEM?$AA@ DB 'ENOMEM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NDGLMEPP@ENOSR?$AA@
CONST	SEGMENT
??_C@_05NDGLMEPP@ENOSR?$AA@ DB 'ENOSR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OEAPJJLB@ESTALE?$AA@
CONST	SEGMENT
??_C@_06OEAPJJLB@ESTALE?$AA@ DB 'ESTALE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EOIKFDII@ENETUNREACH?$AA@
CONST	SEGMENT
??_C@_0M@EOIKFDII@ENETUNREACH?$AA@ DB 'ENETUNREACH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OIBCCDIE@ECONNABORTED?$AA@
CONST	SEGMENT
??_C@_0N@OIBCCDIE@ECONNABORTED?$AA@ DB 'ECONNABORTED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06CLMCJMAJ@ENOLCK?$AA@
CONST	SEGMENT
??_C@_06CLMCJMAJ@ENOLCK?$AA@ DB 'ENOLCK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IOFCCMAJ@EDESTADDRREQ?$AA@
CONST	SEGMENT
??_C@_0N@IOFCCMAJ@EDESTADDRREQ?$AA@ DB 'EDESTADDRREQ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08FMGCJKAE@ENOTCONN?$AA@
CONST	SEGMENT
??_C@_08FMGCJKAE@ENOTCONN?$AA@ DB 'ENOTCONN', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07PJJHKFD@EDEADLK?$AA@
CONST	SEGMENT
??_C@_07PJJHKFD@EDEADLK?$AA@ DB 'EDEADLK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DHHFJHFB@EFBIG?$AA@
CONST	SEGMENT
??_C@_05DHHFJHFB@EFBIG?$AA@ DB 'EFBIG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JDLGPBLD@EFAULT?$AA@
CONST	SEGMENT
??_C@_06JDLGPBLD@EFAULT?$AA@ DB 'EFAULT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KBNBMHCN@ENOSTR?$AA@
CONST	SEGMENT
??_C@_06KBNBMHCN@ENOSTR?$AA@ DB 'ENOSTR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LMNIHJGD@EDQUOT?$AA@
CONST	SEGMENT
??_C@_06LMNIHJGD@EDQUOT?$AA@ DB 'EDQUOT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HFGHHKIE@EEXIST?$AA@
CONST	SEGMENT
??_C@_06HFGHHKIE@EEXIST?$AA@ DB 'EEXIST', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JDEIEOEO@ENOENT?$AA@
CONST	SEGMENT
??_C@_06JDEIEOEO@ENOENT?$AA@ DB 'ENOENT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09NNGHNPFO@ETIMEDOUT?$AA@
CONST	SEGMENT
??_C@_09NNGHNPFO@ETIMEDOUT?$AA@ DB 'ETIMEDOUT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09GEDKILCH@ENETRESET?$AA@
CONST	SEGMENT
??_C@_09GEDKILCH@ENETRESET?$AA@ DB 'ENETRESET', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DAMMOHJ@ENOLINK?$AA@
CONST	SEGMENT
??_C@_07DAMMOHJ@ENOLINK?$AA@ DB 'ENOLINK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MBAHENIK@ESPIPE?$AA@
CONST	SEGMENT
??_C@_06MBAHENIK@ESPIPE?$AA@ DB 'ESPIPE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IENDGEPJ@ENFILE?$AA@
CONST	SEGMENT
??_C@_06IENDGEPJ@ENFILE?$AA@ DB 'ENFILE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07PJPPGGME@EBADMSG?$AA@
CONST	SEGMENT
??_C@_07PJPPGGME@EBADMSG?$AA@ DB 'EBADMSG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HKNCPLEH@EIDRM?$AA@
CONST	SEGMENT
??_C@_05HKNCPLEH@EIDRM?$AA@ DB 'EIDRM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CBFPEINB@EADDRNOTAVAIL?$AA@
CONST	SEGMENT
??_C@_0O@CBFPEINB@EADDRNOTAVAIL?$AA@ DB 'EADDRNOTAVAIL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05HFINOOKG@EROFS?$AA@
CONST	SEGMENT
??_C@_05HFINOOKG@EROFS?$AA@ DB 'EROFS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ICLGJIKJ@EPROTONOSUPPORT?$AA@
CONST	SEGMENT
??_C@_0BA@ICLGJIKJ@EPROTONOSUPPORT?$AA@ DB 'EPROTONOSUPPORT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06MAPENCBD@EISDIR?$AA@
CONST	SEGMENT
??_C@_06MAPENCBD@EISDIR?$AA@ DB 'EISDIR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NHHJJOKD@ECONNREFUSED?$AA@
CONST	SEGMENT
??_C@_0N@NHHJJOKD@ECONNREFUSED?$AA@ DB 'ECONNREFUSED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04IDKJOLAE@EDOM?$AA@
CONST	SEGMENT
??_C@_04IDKJOLAE@EDOM?$AA@ DB 'EDOM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KPJOGJNB@EPERM?$AA@
CONST	SEGMENT
??_C@_05KPJOGJNB@EPERM?$AA@ DB 'EPERM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DPLJHFHK@ENOTDIR?$AA@
CONST	SEGMENT
??_C@_07DPLJHFHK@ENOTDIR?$AA@ DB 'ENOTDIR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MNLNBHMB@EILSEQ?$AA@
CONST	SEGMENT
??_C@_06MNLNBHMB@EILSEQ?$AA@ DB 'EILSEQ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MBJBDHGA@EACCES?$AA@
CONST	SEGMENT
??_C@_06MBJBDHGA@EACCES?$AA@ DB 'EACCES', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FJMFIBKF@ENETDOWN?$AA@
CONST	SEGMENT
??_C@_08FJMFIBKF@ENETDOWN?$AA@ DB 'ENETDOWN', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FHIPCPL@EALREADY?$AA@
CONST	SEGMENT
??_C@_08FHIPCPL@EALREADY?$AA@ DB 'EALREADY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07CCDFPJBL@ENOEXEC?$AA@
CONST	SEGMENT
??_C@_07CCDFPJBL@ENOEXEC?$AA@ DB 'ENOEXEC', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PFABEMOB@ENOSPC?$AA@
CONST	SEGMENT
??_C@_06PFABEMOB@ENOSPC?$AA@ DB 'ENOSPC', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JFNKANIJ@EPROTOTYPE?$AA@
CONST	SEGMENT
??_C@_0L@JFNKANIJ@EPROTOTYPE?$AA@ DB 'EPROTOTYPE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03HKNLGNGJ@EIO?$AA@
CONST	SEGMENT
??_C@_03HKNLGNGJ@EIO?$AA@ DB 'EIO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MBIDDMGN@EBADF?$AA@
CONST	SEGMENT
??_C@_05MBIDDMGN@EBADF?$AA@ DB 'EBADF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09FKLOJPCL@ESHUTDOWN?$AA@
CONST	SEGMENT
??_C@_09FKLOJPCL@ESHUTDOWN?$AA@ DB 'ESHUTDOWN', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07GIPDAOFP@EISCONN?$AA@
CONST	SEGMENT
??_C@_07GIPDAOFP@EISCONN?$AA@ DB 'EISCONN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JJNIBMBI@EWOULDBLOCK?$AA@
CONST	SEGMENT
??_C@_0M@JJNIBMBI@EWOULDBLOCK?$AA@ DB 'EWOULDBLOCK', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05MKMLEHMO@EBUSY?$AA@
CONST	SEGMENT
??_C@_05MKMLEHMO@EBUSY?$AA@ DB 'EBUSY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CMNHFMBL@ENOPROTOOPT?$AA@
CONST	SEGMENT
??_C@_0M@CMNHFMBL@ENOPROTOOPT?$AA@ DB 'ENOPROTOOPT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DPLGDGEM@EPFNOSUPPORT?$AA@
CONST	SEGMENT
??_C@_0N@DPLGDGEM@EPFNOSUPPORT?$AA@ DB 'EPFNOSUPPORT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09BNDOHPKE@EHOSTDOWN?$AA@
CONST	SEGMENT
??_C@_09BNDOHPKE@EHOSTDOWN?$AA@ DB 'EHOSTDOWN', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KIALJHNP@EAFNOSUPPORT?$AA@
CONST	SEGMENT
??_C@_0N@KIALJHNP@EAFNOSUPPORT?$AA@ DB 'EAFNOSUPPORT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EKIBABFB@EMSGSIZE?$AA@
CONST	SEGMENT
??_C@_08EKIBABFB@EMSGSIZE?$AA@ DB 'EMSGSIZE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05EFGDEBCF@ESRCH?$AA@
CONST	SEGMENT
??_C@_05EFGDEBCF@ESRCH?$AA@ DB 'ESRCH', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DLCHNBFO@E2BIG?$AA@
CONST	SEGMENT
??_C@_05DLCHNBFO@E2BIG?$AA@ DB 'E2BIG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JHANDLBK@EXDEV?$AA@
CONST	SEGMENT
??_C@_05JHANDLBK@EXDEV?$AA@ DB 'EXDEV', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IOKBKPAJ@ELOOP?$AA@
CONST	SEGMENT
??_C@_05IOKBKPAJ@ELOOP?$AA@ DB 'ELOOP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JOGGPIAH@ECHILD?$AA@
CONST	SEGMENT
??_C@_06JOGGPIAH@ECHILD?$AA@ DB 'ECHILD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JFNAGGOB@EREMOTE?$AA@
CONST	SEGMENT
??_C@_07JFNAGGOB@EREMOTE?$AA@ DB 'EREMOTE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OFNOHDMO@EPROTO?$AA@
CONST	SEGMENT
??_C@_06OFNOHDMO@EPROTO?$AA@ DB 'EPROTO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CKPLFBNO@ENOBUFS?$AA@
CONST	SEGMENT
??_C@_07CKPLFBNO@ENOBUFS?$AA@ DB 'ENOBUFS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09GBKGPGOJ@ENOTEMPTY?$AA@
CONST	SEGMENT
??_C@_09GBKGPGOJ@ENOTEMPTY?$AA@ DB 'ENOTEMPTY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDEAKEG@EUSERS?$AA@
CONST	SEGMENT
??_C@_06FDEAKEG@EUSERS?$AA@ DB 'EUSERS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NMLIGJAP@EINTR?$AA@
CONST	SEGMENT
??_C@_05NMLIGJAP@EINTR?$AA@ DB 'EINTR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09CJLMNFNK@EOVERFLOW?$AA@
CONST	SEGMENT
??_C@_09CJLMNFNK@EOVERFLOW?$AA@ DB 'EOVERFLOW', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HIMGHAFD@EINVAL?$AA@
CONST	SEGMENT
??_C@_06HIMGHAFD@EINVAL?$AA@ DB 'EINVAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05COBFIIAP@EPIPE?$AA@
CONST	SEGMENT
??_C@_05COBFIIAP@EPIPE?$AA@ DB 'EPIPE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LABCGFDP@ENOSYS?$AA@
CONST	SEGMENT
??_C@_06LABCGFDP@ENOSYS?$AA@ DB 'ENOSYS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BNJGGDHL@ENODATA?$AA@
CONST	SEGMENT
??_C@_07BNJGGDHL@ENODATA?$AA@ DB 'ENODATA', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CDONBHBA@ENOMSG?$AA@
CONST	SEGMENT
??_C@_06CDONBHBA@ENOMSG?$AA@ DB 'ENOMSG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OPBINOFM@EHOSTUNREACH?$AA@
CONST	SEGMENT
??_C@_0N@OPBINOFM@EHOSTUNREACH?$AA@ DB 'EHOSTUNREACH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06BFJHKEEI@ENODEV?$AA@
CONST	SEGMENT
??_C@_06BFJHKEEI@ENODEV?$AA@ DB 'ENODEV', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09MKAMKDBD@errorcode?$AA@
CONST	SEGMENT
??_C@_09MKAMKDBD@errorcode?$AA@ DB 'errorcode', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyInit_errno
_TEXT	SEGMENT
PyInit_errno PROC					; COMDAT

; 97   : {

$LN8:
  00000	40 56		 push	 rsi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 98   :     PyObject *m, *d, *de;
; 99   :     m = PyModule_Create(&errnomodule);

  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:errnomodule
  0000d	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00012	e8 00 00 00 00	 call	 PyModule_Create2
  00017	48 8b f0	 mov	 rsi, rax

; 100  :     if (m == NULL)

  0001a	48 85 c0	 test	 rax, rax
  0001d	75 06		 jne	 SHORT $LN3@PyInit_err

; 935  : }

  0001f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00023	5e		 pop	 rsi
  00024	c3		 ret	 0
$LN3@PyInit_err:

; 101  :         return NULL;
; 102  :     d = PyModule_GetDict(m);

  00025	48 8b c8	 mov	 rcx, rax
  00028	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0002d	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  00032	e8 00 00 00 00	 call	 PyModule_GetDict
  00037	48 8b f8	 mov	 rdi, rax

; 103  :     de = PyDict_New();

  0003a	e8 00 00 00 00	 call	 PyDict_New
  0003f	48 8b d8	 mov	 rbx, rax

; 104  :     if (!d || !de || PyDict_SetItemString(d, "errorcode", de) < 0)

  00042	48 85 ff	 test	 rdi, rdi
  00045	0f 84 46 0d 00
	00		 je	 $LN1@PyInit_err
  0004b	48 85 c0	 test	 rax, rax
  0004e	0f 84 3d 0d 00
	00		 je	 $LN1@PyInit_err
  00054	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09MKAMKDBD@errorcode?$AA@
  0005b	4c 8b c0	 mov	 r8, rax
  0005e	48 8b cf	 mov	 rcx, rdi
  00061	e8 00 00 00 00	 call	 PyDict_SetItemString
  00066	85 c0		 test	 eax, eax
  00068	0f 88 23 0d 00
	00		 js	 $LN1@PyInit_err

; 106  : 
; 107  : /* Macro so I don't have to edit each and every line below... */
; 108  : #define inscode(d, ds, de, name, code, comment) _inscode(d, de, name, code)
; 109  : 
; 110  :     /*
; 111  :      * The names and comments are borrowed from linux/include/errno.h,
; 112  :      * which should be pretty all-inclusive.  However, the Solaris specific
; 113  :      * names and comments are borrowed from sys/errno.h in Solaris.
; 114  :      * MacOSX specific names and comments are borrowed from sys/errno.h in
; 115  :      * MacOSX.
; 116  :      */
; 117  : 
; 118  : #ifdef ENODEV
; 119  :     inscode(d, ds, de, "ENODEV", ENODEV, "No such device");

  0006e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06BFJHKEEI@ENODEV?$AA@
  00075	41 b9 13 00 00
	00		 mov	 r9d, 19
  0007b	48 8b d3	 mov	 rdx, rbx
  0007e	48 8b cf	 mov	 rcx, rdi
  00081	e8 00 00 00 00	 call	 _inscode

; 120  : #endif
; 121  : #ifdef ENOCSI
; 122  :     inscode(d, ds, de, "ENOCSI", ENOCSI, "No CSI structure available");
; 123  : #endif
; 124  : #ifdef EHOSTUNREACH
; 125  :     inscode(d, ds, de, "EHOSTUNREACH", EHOSTUNREACH, "No route to host");
; 126  : #else
; 127  : #ifdef WSAEHOSTUNREACH
; 128  :     inscode(d, ds, de, "EHOSTUNREACH", WSAEHOSTUNREACH, "No route to host");

  00086	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@OPBINOFM@EHOSTUNREACH?$AA@
  0008d	41 b9 51 27 00
	00		 mov	 r9d, 10065		; 00002751H
  00093	48 8b d3	 mov	 rdx, rbx
  00096	48 8b cf	 mov	 rcx, rdi
  00099	e8 00 00 00 00	 call	 _inscode

; 129  : #endif
; 130  : #endif
; 131  : #ifdef ENOMSG
; 132  :     inscode(d, ds, de, "ENOMSG", ENOMSG, "No message of desired type");

  0009e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06CDONBHBA@ENOMSG?$AA@
  000a5	41 b9 7a 00 00
	00		 mov	 r9d, 122		; 0000007aH
  000ab	48 8b d3	 mov	 rdx, rbx
  000ae	48 8b cf	 mov	 rcx, rdi
  000b1	e8 00 00 00 00	 call	 _inscode

; 133  : #endif
; 134  : #ifdef EUCLEAN
; 135  :     inscode(d, ds, de, "EUCLEAN", EUCLEAN, "Structure needs cleaning");
; 136  : #endif
; 137  : #ifdef EL2NSYNC
; 138  :     inscode(d, ds, de, "EL2NSYNC", EL2NSYNC, "Level 2 not synchronized");
; 139  : #endif
; 140  : #ifdef EL2HLT
; 141  :     inscode(d, ds, de, "EL2HLT", EL2HLT, "Level 2 halted");
; 142  : #endif
; 143  : #ifdef ENODATA
; 144  :     inscode(d, ds, de, "ENODATA", ENODATA, "No data available");

  000b6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07BNJGGDHL@ENODATA?$AA@
  000bd	41 b9 78 00 00
	00		 mov	 r9d, 120		; 00000078H
  000c3	48 8b d3	 mov	 rdx, rbx
  000c6	48 8b cf	 mov	 rcx, rdi
  000c9	e8 00 00 00 00	 call	 _inscode

; 145  : #endif
; 146  : #ifdef ENOTBLK
; 147  :     inscode(d, ds, de, "ENOTBLK", ENOTBLK, "Block device required");
; 148  : #endif
; 149  : #ifdef ENOSYS
; 150  :     inscode(d, ds, de, "ENOSYS", ENOSYS, "Function not implemented");

  000ce	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06LABCGFDP@ENOSYS?$AA@
  000d5	41 b9 28 00 00
	00		 mov	 r9d, 40			; 00000028H
  000db	48 8b d3	 mov	 rdx, rbx
  000de	48 8b cf	 mov	 rcx, rdi
  000e1	e8 00 00 00 00	 call	 _inscode

; 151  : #endif
; 152  : #ifdef EPIPE
; 153  :     inscode(d, ds, de, "EPIPE", EPIPE, "Broken pipe");

  000e6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05COBFIIAP@EPIPE?$AA@
  000ed	41 b9 20 00 00
	00		 mov	 r9d, 32			; 00000020H
  000f3	48 8b d3	 mov	 rdx, rbx
  000f6	48 8b cf	 mov	 rcx, rdi
  000f9	e8 00 00 00 00	 call	 _inscode

; 154  : #endif
; 155  : #ifdef EINVAL
; 156  :     inscode(d, ds, de, "EINVAL", EINVAL, "Invalid argument");

  000fe	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06HIMGHAFD@EINVAL?$AA@
  00105	41 b9 16 00 00
	00		 mov	 r9d, 22
  0010b	48 8b d3	 mov	 rdx, rbx
  0010e	48 8b cf	 mov	 rcx, rdi
  00111	e8 00 00 00 00	 call	 _inscode

; 157  : #else
; 158  : #ifdef WSAEINVAL
; 159  :     inscode(d, ds, de, "EINVAL", WSAEINVAL, "Invalid argument");
; 160  : #endif
; 161  : #endif
; 162  : #ifdef EOVERFLOW
; 163  :     inscode(d, ds, de, "EOVERFLOW", EOVERFLOW, "Value too large for defined data type");

  00116	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09CJLMNFNK@EOVERFLOW?$AA@
  0011d	41 b9 84 00 00
	00		 mov	 r9d, 132		; 00000084H
  00123	48 8b d3	 mov	 rdx, rbx
  00126	48 8b cf	 mov	 rcx, rdi
  00129	e8 00 00 00 00	 call	 _inscode

; 164  : #endif
; 165  : #ifdef EADV
; 166  :     inscode(d, ds, de, "EADV", EADV, "Advertise error");
; 167  : #endif
; 168  : #ifdef EINTR
; 169  :     inscode(d, ds, de, "EINTR", EINTR, "Interrupted system call");

  0012e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05NMLIGJAP@EINTR?$AA@
  00135	41 b9 04 00 00
	00		 mov	 r9d, 4
  0013b	48 8b d3	 mov	 rdx, rbx
  0013e	48 8b cf	 mov	 rcx, rdi
  00141	e8 00 00 00 00	 call	 _inscode

; 170  : #else
; 171  : #ifdef WSAEINTR
; 172  :     inscode(d, ds, de, "EINTR", WSAEINTR, "Interrupted system call");
; 173  : #endif
; 174  : #endif
; 175  : #ifdef EUSERS
; 176  :     inscode(d, ds, de, "EUSERS", EUSERS, "Too many users");
; 177  : #else
; 178  : #ifdef WSAEUSERS
; 179  :     inscode(d, ds, de, "EUSERS", WSAEUSERS, "Too many users");

  00146	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06FDEAKEG@EUSERS?$AA@
  0014d	41 b9 54 27 00
	00		 mov	 r9d, 10068		; 00002754H
  00153	48 8b d3	 mov	 rdx, rbx
  00156	48 8b cf	 mov	 rcx, rdi
  00159	e8 00 00 00 00	 call	 _inscode

; 180  : #endif
; 181  : #endif
; 182  : #ifdef ENOTEMPTY
; 183  :     inscode(d, ds, de, "ENOTEMPTY", ENOTEMPTY, "Directory not empty");

  0015e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09GBKGPGOJ@ENOTEMPTY?$AA@
  00165	41 b9 29 00 00
	00		 mov	 r9d, 41			; 00000029H
  0016b	48 8b d3	 mov	 rdx, rbx
  0016e	48 8b cf	 mov	 rcx, rdi
  00171	e8 00 00 00 00	 call	 _inscode

; 184  : #else
; 185  : #ifdef WSAENOTEMPTY
; 186  :     inscode(d, ds, de, "ENOTEMPTY", WSAENOTEMPTY, "Directory not empty");
; 187  : #endif
; 188  : #endif
; 189  : #ifdef ENOBUFS
; 190  :     inscode(d, ds, de, "ENOBUFS", ENOBUFS, "No buffer space available");
; 191  : #else
; 192  : #ifdef WSAENOBUFS
; 193  :     inscode(d, ds, de, "ENOBUFS", WSAENOBUFS, "No buffer space available");

  00176	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07CKPLFBNO@ENOBUFS?$AA@
  0017d	41 b9 47 27 00
	00		 mov	 r9d, 10055		; 00002747H
  00183	48 8b d3	 mov	 rdx, rbx
  00186	48 8b cf	 mov	 rcx, rdi
  00189	e8 00 00 00 00	 call	 _inscode

; 194  : #endif
; 195  : #endif
; 196  : #ifdef EPROTO
; 197  :     inscode(d, ds, de, "EPROTO", EPROTO, "Protocol error");

  0018e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06OFNOHDMO@EPROTO?$AA@
  00195	41 b9 86 00 00
	00		 mov	 r9d, 134		; 00000086H
  0019b	48 8b d3	 mov	 rdx, rbx
  0019e	48 8b cf	 mov	 rcx, rdi
  001a1	e8 00 00 00 00	 call	 _inscode

; 198  : #endif
; 199  : #ifdef EREMOTE
; 200  :     inscode(d, ds, de, "EREMOTE", EREMOTE, "Object is remote");
; 201  : #else
; 202  : #ifdef WSAEREMOTE
; 203  :     inscode(d, ds, de, "EREMOTE", WSAEREMOTE, "Object is remote");

  001a6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07JFNAGGOB@EREMOTE?$AA@
  001ad	41 b9 57 27 00
	00		 mov	 r9d, 10071		; 00002757H
  001b3	48 8b d3	 mov	 rdx, rbx
  001b6	48 8b cf	 mov	 rcx, rdi
  001b9	e8 00 00 00 00	 call	 _inscode

; 204  : #endif
; 205  : #endif
; 206  : #ifdef ENAVAIL
; 207  :     inscode(d, ds, de, "ENAVAIL", ENAVAIL, "No XENIX semaphores available");
; 208  : #endif
; 209  : #ifdef ECHILD
; 210  :     inscode(d, ds, de, "ECHILD", ECHILD, "No child processes");

  001be	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06JOGGPIAH@ECHILD?$AA@
  001c5	41 b9 0a 00 00
	00		 mov	 r9d, 10
  001cb	48 8b d3	 mov	 rdx, rbx
  001ce	48 8b cf	 mov	 rcx, rdi
  001d1	e8 00 00 00 00	 call	 _inscode

; 211  : #endif
; 212  : #ifdef ELOOP
; 213  :     inscode(d, ds, de, "ELOOP", ELOOP, "Too many symbolic links encountered");
; 214  : #else
; 215  : #ifdef WSAELOOP
; 216  :     inscode(d, ds, de, "ELOOP", WSAELOOP, "Too many symbolic links encountered");

  001d6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05IOKBKPAJ@ELOOP?$AA@
  001dd	41 b9 4e 27 00
	00		 mov	 r9d, 10062		; 0000274eH
  001e3	48 8b d3	 mov	 rdx, rbx
  001e6	48 8b cf	 mov	 rcx, rdi
  001e9	e8 00 00 00 00	 call	 _inscode

; 217  : #endif
; 218  : #endif
; 219  : #ifdef EXDEV
; 220  :     inscode(d, ds, de, "EXDEV", EXDEV, "Cross-device link");

  001ee	41 b9 12 00 00
	00		 mov	 r9d, 18
  001f4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05JHANDLBK@EXDEV?$AA@
  001fb	48 8b d3	 mov	 rdx, rbx
  001fe	48 8b cf	 mov	 rcx, rdi
  00201	e8 00 00 00 00	 call	 _inscode

; 221  : #endif
; 222  : #ifdef E2BIG
; 223  :     inscode(d, ds, de, "E2BIG", E2BIG, "Arg list too long");

  00206	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05DLCHNBFO@E2BIG?$AA@
  0020d	41 b9 07 00 00
	00		 mov	 r9d, 7
  00213	48 8b d3	 mov	 rdx, rbx
  00216	48 8b cf	 mov	 rcx, rdi
  00219	e8 00 00 00 00	 call	 _inscode

; 224  : #endif
; 225  : #ifdef ESRCH
; 226  :     inscode(d, ds, de, "ESRCH", ESRCH, "No such process");

  0021e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05EFGDEBCF@ESRCH?$AA@
  00225	41 b9 03 00 00
	00		 mov	 r9d, 3
  0022b	48 8b d3	 mov	 rdx, rbx
  0022e	48 8b cf	 mov	 rcx, rdi
  00231	e8 00 00 00 00	 call	 _inscode

; 227  : #endif
; 228  : #ifdef EMSGSIZE
; 229  :     inscode(d, ds, de, "EMSGSIZE", EMSGSIZE, "Message too long");
; 230  : #else
; 231  : #ifdef WSAEMSGSIZE
; 232  :     inscode(d, ds, de, "EMSGSIZE", WSAEMSGSIZE, "Message too long");

  00236	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08EKIBABFB@EMSGSIZE?$AA@
  0023d	41 b9 38 27 00
	00		 mov	 r9d, 10040		; 00002738H
  00243	48 8b d3	 mov	 rdx, rbx
  00246	48 8b cf	 mov	 rcx, rdi
  00249	e8 00 00 00 00	 call	 _inscode

; 233  : #endif
; 234  : #endif
; 235  : #ifdef EAFNOSUPPORT
; 236  :     inscode(d, ds, de, "EAFNOSUPPORT", EAFNOSUPPORT, "Address family not supported by protocol");
; 237  : #else
; 238  : #ifdef WSAEAFNOSUPPORT
; 239  :     inscode(d, ds, de, "EAFNOSUPPORT", WSAEAFNOSUPPORT, "Address family not supported by protocol");

  0024e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@KIALJHNP@EAFNOSUPPORT?$AA@
  00255	41 b9 3f 27 00
	00		 mov	 r9d, 10047		; 0000273fH
  0025b	48 8b d3	 mov	 rdx, rbx
  0025e	48 8b cf	 mov	 rcx, rdi
  00261	e8 00 00 00 00	 call	 _inscode

; 240  : #endif
; 241  : #endif
; 242  : #ifdef EBADR
; 243  :     inscode(d, ds, de, "EBADR", EBADR, "Invalid request descriptor");
; 244  : #endif
; 245  : #ifdef EHOSTDOWN
; 246  :     inscode(d, ds, de, "EHOSTDOWN", EHOSTDOWN, "Host is down");
; 247  : #else
; 248  : #ifdef WSAEHOSTDOWN
; 249  :     inscode(d, ds, de, "EHOSTDOWN", WSAEHOSTDOWN, "Host is down");

  00266	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09BNDOHPKE@EHOSTDOWN?$AA@
  0026d	41 b9 50 27 00
	00		 mov	 r9d, 10064		; 00002750H
  00273	48 8b d3	 mov	 rdx, rbx
  00276	48 8b cf	 mov	 rcx, rdi
  00279	e8 00 00 00 00	 call	 _inscode

; 250  : #endif
; 251  : #endif
; 252  : #ifdef EPFNOSUPPORT
; 253  :     inscode(d, ds, de, "EPFNOSUPPORT", EPFNOSUPPORT, "Protocol family not supported");
; 254  : #else
; 255  : #ifdef WSAEPFNOSUPPORT
; 256  :     inscode(d, ds, de, "EPFNOSUPPORT", WSAEPFNOSUPPORT, "Protocol family not supported");

  0027e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@DPLGDGEM@EPFNOSUPPORT?$AA@
  00285	41 b9 3e 27 00
	00		 mov	 r9d, 10046		; 0000273eH
  0028b	48 8b d3	 mov	 rdx, rbx
  0028e	48 8b cf	 mov	 rcx, rdi
  00291	e8 00 00 00 00	 call	 _inscode

; 257  : #endif
; 258  : #endif
; 259  : #ifdef ENOPROTOOPT
; 260  :     inscode(d, ds, de, "ENOPROTOOPT", ENOPROTOOPT, "Protocol not available");
; 261  : #else
; 262  : #ifdef WSAENOPROTOOPT
; 263  :     inscode(d, ds, de, "ENOPROTOOPT", WSAENOPROTOOPT, "Protocol not available");

  00296	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@CMNHFMBL@ENOPROTOOPT?$AA@
  0029d	41 b9 3a 27 00
	00		 mov	 r9d, 10042		; 0000273aH
  002a3	48 8b d3	 mov	 rdx, rbx
  002a6	48 8b cf	 mov	 rcx, rdi
  002a9	e8 00 00 00 00	 call	 _inscode

; 264  : #endif
; 265  : #endif
; 266  : #ifdef EBUSY
; 267  :     inscode(d, ds, de, "EBUSY", EBUSY, "Device or resource busy");

  002ae	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05MKMLEHMO@EBUSY?$AA@
  002b5	41 b9 10 00 00
	00		 mov	 r9d, 16
  002bb	48 8b d3	 mov	 rdx, rbx
  002be	48 8b cf	 mov	 rcx, rdi
  002c1	e8 00 00 00 00	 call	 _inscode

; 268  : #endif
; 269  : #ifdef EWOULDBLOCK
; 270  :     inscode(d, ds, de, "EWOULDBLOCK", EWOULDBLOCK, "Operation would block");
; 271  : #else
; 272  : #ifdef WSAEWOULDBLOCK
; 273  :     inscode(d, ds, de, "EWOULDBLOCK", WSAEWOULDBLOCK, "Operation would block");

  002c6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@JJNIBMBI@EWOULDBLOCK?$AA@
  002cd	41 b9 33 27 00
	00		 mov	 r9d, 10035		; 00002733H
  002d3	48 8b d3	 mov	 rdx, rbx
  002d6	48 8b cf	 mov	 rcx, rdi
  002d9	e8 00 00 00 00	 call	 _inscode

; 274  : #endif
; 275  : #endif
; 276  : #ifdef EBADFD
; 277  :     inscode(d, ds, de, "EBADFD", EBADFD, "File descriptor in bad state");
; 278  : #endif
; 279  : #ifdef EDOTDOT
; 280  :     inscode(d, ds, de, "EDOTDOT", EDOTDOT, "RFS specific error");
; 281  : #endif
; 282  : #ifdef EISCONN
; 283  :     inscode(d, ds, de, "EISCONN", EISCONN, "Transport endpoint is already connected");
; 284  : #else
; 285  : #ifdef WSAEISCONN
; 286  :     inscode(d, ds, de, "EISCONN", WSAEISCONN, "Transport endpoint is already connected");

  002de	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07GIPDAOFP@EISCONN?$AA@
  002e5	41 b9 48 27 00
	00		 mov	 r9d, 10056		; 00002748H
  002eb	48 8b d3	 mov	 rdx, rbx
  002ee	48 8b cf	 mov	 rcx, rdi
  002f1	e8 00 00 00 00	 call	 _inscode

; 287  : #endif
; 288  : #endif
; 289  : #ifdef ENOANO
; 290  :     inscode(d, ds, de, "ENOANO", ENOANO, "No anode");
; 291  : #endif
; 292  : #ifdef ESHUTDOWN
; 293  :     inscode(d, ds, de, "ESHUTDOWN", ESHUTDOWN, "Cannot send after transport endpoint shutdown");
; 294  : #else
; 295  : #ifdef WSAESHUTDOWN
; 296  :     inscode(d, ds, de, "ESHUTDOWN", WSAESHUTDOWN, "Cannot send after transport endpoint shutdown");

  002f6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09FKLOJPCL@ESHUTDOWN?$AA@
  002fd	41 b9 4a 27 00
	00		 mov	 r9d, 10058		; 0000274aH
  00303	48 8b d3	 mov	 rdx, rbx
  00306	48 8b cf	 mov	 rcx, rdi
  00309	e8 00 00 00 00	 call	 _inscode

; 297  : #endif
; 298  : #endif
; 299  : #ifdef ECHRNG
; 300  :     inscode(d, ds, de, "ECHRNG", ECHRNG, "Channel number out of range");
; 301  : #endif
; 302  : #ifdef ELIBBAD
; 303  :     inscode(d, ds, de, "ELIBBAD", ELIBBAD, "Accessing a corrupted shared library");
; 304  : #endif
; 305  : #ifdef ENONET
; 306  :     inscode(d, ds, de, "ENONET", ENONET, "Machine is not on the network");
; 307  : #endif
; 308  : #ifdef EBADE
; 309  :     inscode(d, ds, de, "EBADE", EBADE, "Invalid exchange");
; 310  : #endif
; 311  : #ifdef EBADF
; 312  :     inscode(d, ds, de, "EBADF", EBADF, "Bad file number");

  0030e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05MBIDDMGN@EBADF?$AA@
  00315	41 b9 09 00 00
	00		 mov	 r9d, 9
  0031b	48 8b d3	 mov	 rdx, rbx
  0031e	48 8b cf	 mov	 rcx, rdi
  00321	e8 00 00 00 00	 call	 _inscode

; 313  : #else
; 314  : #ifdef WSAEBADF
; 315  :     inscode(d, ds, de, "EBADF", WSAEBADF, "Bad file number");
; 316  : #endif
; 317  : #endif
; 318  : #ifdef EMULTIHOP
; 319  :     inscode(d, ds, de, "EMULTIHOP", EMULTIHOP, "Multihop attempted");
; 320  : #endif
; 321  : #ifdef EIO
; 322  :     inscode(d, ds, de, "EIO", EIO, "I/O error");

  00326	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03HKNLGNGJ@EIO?$AA@
  0032d	41 b9 05 00 00
	00		 mov	 r9d, 5
  00333	48 8b d3	 mov	 rdx, rbx
  00336	48 8b cf	 mov	 rcx, rdi
  00339	e8 00 00 00 00	 call	 _inscode

; 323  : #endif
; 324  : #ifdef EUNATCH
; 325  :     inscode(d, ds, de, "EUNATCH", EUNATCH, "Protocol driver not attached");
; 326  : #endif
; 327  : #ifdef EPROTOTYPE
; 328  :     inscode(d, ds, de, "EPROTOTYPE", EPROTOTYPE, "Protocol wrong type for socket");
; 329  : #else
; 330  : #ifdef WSAEPROTOTYPE
; 331  :     inscode(d, ds, de, "EPROTOTYPE", WSAEPROTOTYPE, "Protocol wrong type for socket");

  0033e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@JFNKANIJ@EPROTOTYPE?$AA@
  00345	41 b9 39 27 00
	00		 mov	 r9d, 10041		; 00002739H
  0034b	48 8b d3	 mov	 rdx, rbx
  0034e	48 8b cf	 mov	 rcx, rdi
  00351	e8 00 00 00 00	 call	 _inscode

; 332  : #endif
; 333  : #endif
; 334  : #ifdef ENOSPC
; 335  :     inscode(d, ds, de, "ENOSPC", ENOSPC, "No space left on device");

  00356	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06PFABEMOB@ENOSPC?$AA@
  0035d	41 b9 1c 00 00
	00		 mov	 r9d, 28
  00363	48 8b d3	 mov	 rdx, rbx
  00366	48 8b cf	 mov	 rcx, rdi
  00369	e8 00 00 00 00	 call	 _inscode

; 336  : #endif
; 337  : #ifdef ENOEXEC
; 338  :     inscode(d, ds, de, "ENOEXEC", ENOEXEC, "Exec format error");

  0036e	41 b9 08 00 00
	00		 mov	 r9d, 8
  00374	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07CCDFPJBL@ENOEXEC?$AA@
  0037b	48 8b d3	 mov	 rdx, rbx
  0037e	48 8b cf	 mov	 rcx, rdi
  00381	e8 00 00 00 00	 call	 _inscode

; 339  : #endif
; 340  : #ifdef EALREADY
; 341  :     inscode(d, ds, de, "EALREADY", EALREADY, "Operation already in progress");
; 342  : #else
; 343  : #ifdef WSAEALREADY
; 344  :     inscode(d, ds, de, "EALREADY", WSAEALREADY, "Operation already in progress");

  00386	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08FHIPCPL@EALREADY?$AA@
  0038d	41 b9 35 27 00
	00		 mov	 r9d, 10037		; 00002735H
  00393	48 8b d3	 mov	 rdx, rbx
  00396	48 8b cf	 mov	 rcx, rdi
  00399	e8 00 00 00 00	 call	 _inscode

; 345  : #endif
; 346  : #endif
; 347  : #ifdef ENETDOWN
; 348  :     inscode(d, ds, de, "ENETDOWN", ENETDOWN, "Network is down");
; 349  : #else
; 350  : #ifdef WSAENETDOWN
; 351  :     inscode(d, ds, de, "ENETDOWN", WSAENETDOWN, "Network is down");

  0039e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08FJMFIBKF@ENETDOWN?$AA@
  003a5	41 b9 42 27 00
	00		 mov	 r9d, 10050		; 00002742H
  003ab	48 8b d3	 mov	 rdx, rbx
  003ae	48 8b cf	 mov	 rcx, rdi
  003b1	e8 00 00 00 00	 call	 _inscode

; 352  : #endif
; 353  : #endif
; 354  : #ifdef ENOTNAM
; 355  :     inscode(d, ds, de, "ENOTNAM", ENOTNAM, "Not a XENIX named type file");
; 356  : #endif
; 357  : #ifdef EACCES
; 358  :     inscode(d, ds, de, "EACCES", EACCES, "Permission denied");

  003b6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06MBJBDHGA@EACCES?$AA@
  003bd	41 b9 0d 00 00
	00		 mov	 r9d, 13
  003c3	48 8b d3	 mov	 rdx, rbx
  003c6	48 8b cf	 mov	 rcx, rdi
  003c9	e8 00 00 00 00	 call	 _inscode

; 359  : #else
; 360  : #ifdef WSAEACCES
; 361  :     inscode(d, ds, de, "EACCES", WSAEACCES, "Permission denied");
; 362  : #endif
; 363  : #endif
; 364  : #ifdef ELNRNG
; 365  :     inscode(d, ds, de, "ELNRNG", ELNRNG, "Link number out of range");
; 366  : #endif
; 367  : #ifdef EILSEQ
; 368  :     inscode(d, ds, de, "EILSEQ", EILSEQ, "Illegal byte sequence");

  003ce	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06MNLNBHMB@EILSEQ?$AA@
  003d5	41 b9 2a 00 00
	00		 mov	 r9d, 42			; 0000002aH
  003db	48 8b d3	 mov	 rdx, rbx
  003de	48 8b cf	 mov	 rcx, rdi
  003e1	e8 00 00 00 00	 call	 _inscode

; 369  : #endif
; 370  : #ifdef ENOTDIR
; 371  :     inscode(d, ds, de, "ENOTDIR", ENOTDIR, "Not a directory");

  003e6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07DPLJHFHK@ENOTDIR?$AA@
  003ed	41 b9 14 00 00
	00		 mov	 r9d, 20
  003f3	48 8b d3	 mov	 rdx, rbx
  003f6	48 8b cf	 mov	 rcx, rdi
  003f9	e8 00 00 00 00	 call	 _inscode

; 372  : #endif
; 373  : #ifdef ENOTUNIQ
; 374  :     inscode(d, ds, de, "ENOTUNIQ", ENOTUNIQ, "Name not unique on network");
; 375  : #endif
; 376  : #ifdef EPERM
; 377  :     inscode(d, ds, de, "EPERM", EPERM, "Operation not permitted");

  003fe	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05KPJOGJNB@EPERM?$AA@
  00405	41 b9 01 00 00
	00		 mov	 r9d, 1
  0040b	48 8b d3	 mov	 rdx, rbx
  0040e	48 8b cf	 mov	 rcx, rdi
  00411	e8 00 00 00 00	 call	 _inscode

; 378  : #endif
; 379  : #ifdef EDOM
; 380  :     inscode(d, ds, de, "EDOM", EDOM, "Math argument out of domain of func");

  00416	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04IDKJOLAE@EDOM?$AA@
  0041d	41 b9 21 00 00
	00		 mov	 r9d, 33			; 00000021H
  00423	48 8b d3	 mov	 rdx, rbx
  00426	48 8b cf	 mov	 rcx, rdi
  00429	e8 00 00 00 00	 call	 _inscode

; 381  : #endif
; 382  : #ifdef EXFULL
; 383  :     inscode(d, ds, de, "EXFULL", EXFULL, "Exchange full");
; 384  : #endif
; 385  : #ifdef ECONNREFUSED
; 386  :     inscode(d, ds, de, "ECONNREFUSED", ECONNREFUSED, "Connection refused");
; 387  : #else
; 388  : #ifdef WSAECONNREFUSED
; 389  :     inscode(d, ds, de, "ECONNREFUSED", WSAECONNREFUSED, "Connection refused");

  0042e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@NHHJJOKD@ECONNREFUSED?$AA@
  00435	41 b9 4d 27 00
	00		 mov	 r9d, 10061		; 0000274dH
  0043b	48 8b d3	 mov	 rdx, rbx
  0043e	48 8b cf	 mov	 rcx, rdi
  00441	e8 00 00 00 00	 call	 _inscode

; 390  : #endif
; 391  : #endif
; 392  : #ifdef EISDIR
; 393  :     inscode(d, ds, de, "EISDIR", EISDIR, "Is a directory");

  00446	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06MAPENCBD@EISDIR?$AA@
  0044d	41 b9 15 00 00
	00		 mov	 r9d, 21
  00453	48 8b d3	 mov	 rdx, rbx
  00456	48 8b cf	 mov	 rcx, rdi
  00459	e8 00 00 00 00	 call	 _inscode

; 394  : #endif
; 395  : #ifdef EPROTONOSUPPORT
; 396  :     inscode(d, ds, de, "EPROTONOSUPPORT", EPROTONOSUPPORT, "Protocol not supported");
; 397  : #else
; 398  : #ifdef WSAEPROTONOSUPPORT
; 399  :     inscode(d, ds, de, "EPROTONOSUPPORT", WSAEPROTONOSUPPORT, "Protocol not supported");

  0045e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@ICLGJIKJ@EPROTONOSUPPORT?$AA@
  00465	41 b9 3b 27 00
	00		 mov	 r9d, 10043		; 0000273bH
  0046b	48 8b d3	 mov	 rdx, rbx
  0046e	48 8b cf	 mov	 rcx, rdi
  00471	e8 00 00 00 00	 call	 _inscode

; 400  : #endif
; 401  : #endif
; 402  : #ifdef EROFS
; 403  :     inscode(d, ds, de, "EROFS", EROFS, "Read-only file system");

  00476	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05HFINOOKG@EROFS?$AA@
  0047d	41 b9 1e 00 00
	00		 mov	 r9d, 30
  00483	48 8b d3	 mov	 rdx, rbx
  00486	48 8b cf	 mov	 rcx, rdi
  00489	e8 00 00 00 00	 call	 _inscode

; 404  : #endif
; 405  : #ifdef EADDRNOTAVAIL
; 406  :     inscode(d, ds, de, "EADDRNOTAVAIL", EADDRNOTAVAIL, "Cannot assign requested address");
; 407  : #else
; 408  : #ifdef WSAEADDRNOTAVAIL
; 409  :     inscode(d, ds, de, "EADDRNOTAVAIL", WSAEADDRNOTAVAIL, "Cannot assign requested address");

  0048e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@CBFPEINB@EADDRNOTAVAIL?$AA@
  00495	41 b9 41 27 00
	00		 mov	 r9d, 10049		; 00002741H
  0049b	48 8b d3	 mov	 rdx, rbx
  0049e	48 8b cf	 mov	 rcx, rdi
  004a1	e8 00 00 00 00	 call	 _inscode

; 410  : #endif
; 411  : #endif
; 412  : #ifdef EIDRM
; 413  :     inscode(d, ds, de, "EIDRM", EIDRM, "Identifier removed");

  004a6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05HKNCPLEH@EIDRM?$AA@
  004ad	41 b9 6f 00 00
	00		 mov	 r9d, 111		; 0000006fH
  004b3	48 8b d3	 mov	 rdx, rbx
  004b6	48 8b cf	 mov	 rcx, rdi
  004b9	e8 00 00 00 00	 call	 _inscode

; 414  : #endif
; 415  : #ifdef ECOMM
; 416  :     inscode(d, ds, de, "ECOMM", ECOMM, "Communication error on send");
; 417  : #endif
; 418  : #ifdef ESRMNT
; 419  :     inscode(d, ds, de, "ESRMNT", ESRMNT, "Srmount error");
; 420  : #endif
; 421  : #ifdef EREMOTEIO
; 422  :     inscode(d, ds, de, "EREMOTEIO", EREMOTEIO, "Remote I/O error");
; 423  : #endif
; 424  : #ifdef EL3RST
; 425  :     inscode(d, ds, de, "EL3RST", EL3RST, "Level 3 reset");
; 426  : #endif
; 427  : #ifdef EBADMSG
; 428  :     inscode(d, ds, de, "EBADMSG", EBADMSG, "Not a data message");

  004be	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07PJPPGGME@EBADMSG?$AA@
  004c5	41 b9 68 00 00
	00		 mov	 r9d, 104		; 00000068H
  004cb	48 8b d3	 mov	 rdx, rbx
  004ce	48 8b cf	 mov	 rcx, rdi
  004d1	e8 00 00 00 00	 call	 _inscode

; 429  : #endif
; 430  : #ifdef ENFILE
; 431  :     inscode(d, ds, de, "ENFILE", ENFILE, "File table overflow");

  004d6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06IENDGEPJ@ENFILE?$AA@
  004dd	41 b9 17 00 00
	00		 mov	 r9d, 23
  004e3	48 8b d3	 mov	 rdx, rbx
  004e6	48 8b cf	 mov	 rcx, rdi
  004e9	e8 00 00 00 00	 call	 _inscode

; 432  : #endif
; 433  : #ifdef ELIBMAX
; 434  :     inscode(d, ds, de, "ELIBMAX", ELIBMAX, "Attempting to link in too many shared libraries");
; 435  : #endif
; 436  : #ifdef ESPIPE
; 437  :     inscode(d, ds, de, "ESPIPE", ESPIPE, "Illegal seek");

  004ee	41 b9 1d 00 00
	00		 mov	 r9d, 29
  004f4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06MBAHENIK@ESPIPE?$AA@
  004fb	48 8b d3	 mov	 rdx, rbx
  004fe	48 8b cf	 mov	 rcx, rdi
  00501	e8 00 00 00 00	 call	 _inscode

; 438  : #endif
; 439  : #ifdef ENOLINK
; 440  :     inscode(d, ds, de, "ENOLINK", ENOLINK, "Link has been severed");

  00506	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07DAMMOHJ@ENOLINK?$AA@
  0050d	41 b9 79 00 00
	00		 mov	 r9d, 121		; 00000079H
  00513	48 8b d3	 mov	 rdx, rbx
  00516	48 8b cf	 mov	 rcx, rdi
  00519	e8 00 00 00 00	 call	 _inscode

; 441  : #endif
; 442  : #ifdef ENETRESET
; 443  :     inscode(d, ds, de, "ENETRESET", ENETRESET, "Network dropped connection because of reset");
; 444  : #else
; 445  : #ifdef WSAENETRESET
; 446  :     inscode(d, ds, de, "ENETRESET", WSAENETRESET, "Network dropped connection because of reset");

  0051e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09GEDKILCH@ENETRESET?$AA@
  00525	41 b9 44 27 00
	00		 mov	 r9d, 10052		; 00002744H
  0052b	48 8b d3	 mov	 rdx, rbx
  0052e	48 8b cf	 mov	 rcx, rdi
  00531	e8 00 00 00 00	 call	 _inscode

; 447  : #endif
; 448  : #endif
; 449  : #ifdef ETIMEDOUT
; 450  :     inscode(d, ds, de, "ETIMEDOUT", ETIMEDOUT, "Connection timed out");
; 451  : #else
; 452  : #ifdef WSAETIMEDOUT
; 453  :     inscode(d, ds, de, "ETIMEDOUT", WSAETIMEDOUT, "Connection timed out");

  00536	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09NNGHNPFO@ETIMEDOUT?$AA@
  0053d	41 b9 4c 27 00
	00		 mov	 r9d, 10060		; 0000274cH
  00543	48 8b d3	 mov	 rdx, rbx
  00546	48 8b cf	 mov	 rcx, rdi
  00549	e8 00 00 00 00	 call	 _inscode

; 454  : #endif
; 455  : #endif
; 456  : #ifdef ENOENT
; 457  :     inscode(d, ds, de, "ENOENT", ENOENT, "No such file or directory");

  0054e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06JDEIEOEO@ENOENT?$AA@
  00555	41 b9 02 00 00
	00		 mov	 r9d, 2
  0055b	48 8b d3	 mov	 rdx, rbx
  0055e	48 8b cf	 mov	 rcx, rdi
  00561	e8 00 00 00 00	 call	 _inscode

; 458  : #endif
; 459  : #ifdef EEXIST
; 460  :     inscode(d, ds, de, "EEXIST", EEXIST, "File exists");

  00566	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06HFGHHKIE@EEXIST?$AA@
  0056d	41 b9 11 00 00
	00		 mov	 r9d, 17
  00573	48 8b d3	 mov	 rdx, rbx
  00576	48 8b cf	 mov	 rcx, rdi
  00579	e8 00 00 00 00	 call	 _inscode

; 461  : #endif
; 462  : #ifdef EDQUOT
; 463  :     inscode(d, ds, de, "EDQUOT", EDQUOT, "Quota exceeded");
; 464  : #else
; 465  : #ifdef WSAEDQUOT
; 466  :     inscode(d, ds, de, "EDQUOT", WSAEDQUOT, "Quota exceeded");

  0057e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06LMNIHJGD@EDQUOT?$AA@
  00585	41 b9 55 27 00
	00		 mov	 r9d, 10069		; 00002755H
  0058b	48 8b d3	 mov	 rdx, rbx
  0058e	48 8b cf	 mov	 rcx, rdi
  00591	e8 00 00 00 00	 call	 _inscode

; 467  : #endif
; 468  : #endif
; 469  : #ifdef ENOSTR
; 470  :     inscode(d, ds, de, "ENOSTR", ENOSTR, "Device not a stream");

  00596	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06KBNBMHCN@ENOSTR?$AA@
  0059d	41 b9 7d 00 00
	00		 mov	 r9d, 125		; 0000007dH
  005a3	48 8b d3	 mov	 rdx, rbx
  005a6	48 8b cf	 mov	 rcx, rdi
  005a9	e8 00 00 00 00	 call	 _inscode

; 471  : #endif
; 472  : #ifdef EBADSLT
; 473  :     inscode(d, ds, de, "EBADSLT", EBADSLT, "Invalid slot");
; 474  : #endif
; 475  : #ifdef EBADRQC
; 476  :     inscode(d, ds, de, "EBADRQC", EBADRQC, "Invalid request code");
; 477  : #endif
; 478  : #ifdef ELIBACC
; 479  :     inscode(d, ds, de, "ELIBACC", ELIBACC, "Can not access a needed shared library");
; 480  : #endif
; 481  : #ifdef EFAULT
; 482  :     inscode(d, ds, de, "EFAULT", EFAULT, "Bad address");

  005ae	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06JDLGPBLD@EFAULT?$AA@
  005b5	41 b9 0e 00 00
	00		 mov	 r9d, 14
  005bb	48 8b d3	 mov	 rdx, rbx
  005be	48 8b cf	 mov	 rcx, rdi
  005c1	e8 00 00 00 00	 call	 _inscode

; 483  : #else
; 484  : #ifdef WSAEFAULT
; 485  :     inscode(d, ds, de, "EFAULT", WSAEFAULT, "Bad address");
; 486  : #endif
; 487  : #endif
; 488  : #ifdef EFBIG
; 489  :     inscode(d, ds, de, "EFBIG", EFBIG, "File too large");

  005c6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05DHHFJHFB@EFBIG?$AA@
  005cd	41 b9 1b 00 00
	00		 mov	 r9d, 27
  005d3	48 8b d3	 mov	 rdx, rbx
  005d6	48 8b cf	 mov	 rcx, rdi
  005d9	e8 00 00 00 00	 call	 _inscode

; 490  : #endif
; 491  : #ifdef EDEADLK
; 492  :     inscode(d, ds, de, "EDEADLK", EDEADLK, "Resource deadlock would occur");

  005de	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07PJJHKFD@EDEADLK?$AA@
  005e5	41 b9 24 00 00
	00		 mov	 r9d, 36			; 00000024H
  005eb	48 8b d3	 mov	 rdx, rbx
  005ee	48 8b cf	 mov	 rcx, rdi
  005f1	e8 00 00 00 00	 call	 _inscode

; 493  : #endif
; 494  : #ifdef ENOTCONN
; 495  :     inscode(d, ds, de, "ENOTCONN", ENOTCONN, "Transport endpoint is not connected");
; 496  : #else
; 497  : #ifdef WSAENOTCONN
; 498  :     inscode(d, ds, de, "ENOTCONN", WSAENOTCONN, "Transport endpoint is not connected");

  005f6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08FMGCJKAE@ENOTCONN?$AA@
  005fd	41 b9 49 27 00
	00		 mov	 r9d, 10057		; 00002749H
  00603	48 8b d3	 mov	 rdx, rbx
  00606	48 8b cf	 mov	 rcx, rdi
  00609	e8 00 00 00 00	 call	 _inscode

; 499  : #endif
; 500  : #endif
; 501  : #ifdef EDESTADDRREQ
; 502  :     inscode(d, ds, de, "EDESTADDRREQ", EDESTADDRREQ, "Destination address required");
; 503  : #else
; 504  : #ifdef WSAEDESTADDRREQ
; 505  :     inscode(d, ds, de, "EDESTADDRREQ", WSAEDESTADDRREQ, "Destination address required");

  0060e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@IOFCCMAJ@EDESTADDRREQ?$AA@
  00615	41 b9 37 27 00
	00		 mov	 r9d, 10039		; 00002737H
  0061b	48 8b d3	 mov	 rdx, rbx
  0061e	48 8b cf	 mov	 rcx, rdi
  00621	e8 00 00 00 00	 call	 _inscode

; 506  : #endif
; 507  : #endif
; 508  : #ifdef ELIBSCN
; 509  :     inscode(d, ds, de, "ELIBSCN", ELIBSCN, ".lib section in a.out corrupted");
; 510  : #endif
; 511  : #ifdef ENOLCK
; 512  :     inscode(d, ds, de, "ENOLCK", ENOLCK, "No record locks available");

  00626	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06CLMCJMAJ@ENOLCK?$AA@
  0062d	41 b9 27 00 00
	00		 mov	 r9d, 39			; 00000027H
  00633	48 8b d3	 mov	 rdx, rbx
  00636	48 8b cf	 mov	 rcx, rdi
  00639	e8 00 00 00 00	 call	 _inscode

; 513  : #endif
; 514  : #ifdef EISNAM
; 515  :     inscode(d, ds, de, "EISNAM", EISNAM, "Is a named type file");
; 516  : #endif
; 517  : #ifdef ECONNABORTED
; 518  :     inscode(d, ds, de, "ECONNABORTED", ECONNABORTED, "Software caused connection abort");
; 519  : #else
; 520  : #ifdef WSAECONNABORTED
; 521  :     inscode(d, ds, de, "ECONNABORTED", WSAECONNABORTED, "Software caused connection abort");

  0063e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@OIBCCDIE@ECONNABORTED?$AA@
  00645	41 b9 45 27 00
	00		 mov	 r9d, 10053		; 00002745H
  0064b	48 8b d3	 mov	 rdx, rbx
  0064e	48 8b cf	 mov	 rcx, rdi
  00651	e8 00 00 00 00	 call	 _inscode

; 522  : #endif
; 523  : #endif
; 524  : #ifdef ENETUNREACH
; 525  :     inscode(d, ds, de, "ENETUNREACH", ENETUNREACH, "Network is unreachable");
; 526  : #else
; 527  : #ifdef WSAENETUNREACH
; 528  :     inscode(d, ds, de, "ENETUNREACH", WSAENETUNREACH, "Network is unreachable");

  00656	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@EOIKFDII@ENETUNREACH?$AA@
  0065d	41 b9 43 27 00
	00		 mov	 r9d, 10051		; 00002743H
  00663	48 8b d3	 mov	 rdx, rbx
  00666	48 8b cf	 mov	 rcx, rdi
  00669	e8 00 00 00 00	 call	 _inscode

; 529  : #endif
; 530  : #endif
; 531  : #ifdef ESTALE
; 532  :     inscode(d, ds, de, "ESTALE", ESTALE, "Stale NFS file handle");
; 533  : #else
; 534  : #ifdef WSAESTALE
; 535  :     inscode(d, ds, de, "ESTALE", WSAESTALE, "Stale NFS file handle");

  0066e	41 b9 56 27 00
	00		 mov	 r9d, 10070		; 00002756H
  00674	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06OEAPJJLB@ESTALE?$AA@
  0067b	48 8b d3	 mov	 rdx, rbx
  0067e	48 8b cf	 mov	 rcx, rdi
  00681	e8 00 00 00 00	 call	 _inscode

; 536  : #endif
; 537  : #endif
; 538  : #ifdef ENOSR
; 539  :     inscode(d, ds, de, "ENOSR", ENOSR, "Out of streams resources");

  00686	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05NDGLMEPP@ENOSR?$AA@
  0068d	41 b9 7c 00 00
	00		 mov	 r9d, 124		; 0000007cH
  00693	48 8b d3	 mov	 rdx, rbx
  00696	48 8b cf	 mov	 rcx, rdi
  00699	e8 00 00 00 00	 call	 _inscode

; 540  : #endif
; 541  : #ifdef ENOMEM
; 542  :     inscode(d, ds, de, "ENOMEM", ENOMEM, "Out of memory");

  0069e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06MBKJCAFI@ENOMEM?$AA@
  006a5	41 b9 0c 00 00
	00		 mov	 r9d, 12
  006ab	48 8b d3	 mov	 rdx, rbx
  006ae	48 8b cf	 mov	 rcx, rdi
  006b1	e8 00 00 00 00	 call	 _inscode

; 543  : #endif
; 544  : #ifdef ENOTSOCK
; 545  :     inscode(d, ds, de, "ENOTSOCK", ENOTSOCK, "Socket operation on non-socket");
; 546  : #else
; 547  : #ifdef WSAENOTSOCK
; 548  :     inscode(d, ds, de, "ENOTSOCK", WSAENOTSOCK, "Socket operation on non-socket");

  006b6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08EJCNGKJA@ENOTSOCK?$AA@
  006bd	41 b9 36 27 00
	00		 mov	 r9d, 10038		; 00002736H
  006c3	48 8b d3	 mov	 rdx, rbx
  006c6	48 8b cf	 mov	 rcx, rdi
  006c9	e8 00 00 00 00	 call	 _inscode

; 549  : #endif
; 550  : #endif
; 551  : #ifdef ESTRPIPE
; 552  :     inscode(d, ds, de, "ESTRPIPE", ESTRPIPE, "Streams pipe error");
; 553  : #endif
; 554  : #ifdef EMLINK
; 555  :     inscode(d, ds, de, "EMLINK", EMLINK, "Too many links");

  006ce	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06NFPAPHBG@EMLINK?$AA@
  006d5	41 b9 1f 00 00
	00		 mov	 r9d, 31
  006db	48 8b d3	 mov	 rdx, rbx
  006de	48 8b cf	 mov	 rcx, rdi
  006e1	e8 00 00 00 00	 call	 _inscode

; 556  : #endif
; 557  : #ifdef ERANGE
; 558  :     inscode(d, ds, de, "ERANGE", ERANGE, "Math result not representable");

  006e6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06NDGFKNFB@ERANGE?$AA@
  006ed	41 b9 22 00 00
	00		 mov	 r9d, 34			; 00000022H
  006f3	48 8b d3	 mov	 rdx, rbx
  006f6	48 8b cf	 mov	 rcx, rdi
  006f9	e8 00 00 00 00	 call	 _inscode

; 559  : #endif
; 560  : #ifdef ELIBEXEC
; 561  :     inscode(d, ds, de, "ELIBEXEC", ELIBEXEC, "Cannot exec a shared library directly");
; 562  : #endif
; 563  : #ifdef EL3HLT
; 564  :     inscode(d, ds, de, "EL3HLT", EL3HLT, "Level 3 halted");
; 565  : #endif
; 566  : #ifdef ECONNRESET
; 567  :     inscode(d, ds, de, "ECONNRESET", ECONNRESET, "Connection reset by peer");
; 568  : #else
; 569  : #ifdef WSAECONNRESET
; 570  :     inscode(d, ds, de, "ECONNRESET", WSAECONNRESET, "Connection reset by peer");

  006fe	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@MPIJFMMC@ECONNRESET?$AA@
  00705	41 b9 46 27 00
	00		 mov	 r9d, 10054		; 00002746H
  0070b	48 8b d3	 mov	 rdx, rbx
  0070e	48 8b cf	 mov	 rcx, rdi
  00711	e8 00 00 00 00	 call	 _inscode

; 571  : #endif
; 572  : #endif
; 573  : #ifdef EADDRINUSE
; 574  :     inscode(d, ds, de, "EADDRINUSE", EADDRINUSE, "Address already in use");
; 575  : #else
; 576  : #ifdef WSAEADDRINUSE
; 577  :     inscode(d, ds, de, "EADDRINUSE", WSAEADDRINUSE, "Address already in use");

  00716	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@IEPJIBH@EADDRINUSE?$AA@
  0071d	41 b9 40 27 00
	00		 mov	 r9d, 10048		; 00002740H
  00723	48 8b d3	 mov	 rdx, rbx
  00726	48 8b cf	 mov	 rcx, rdi
  00729	e8 00 00 00 00	 call	 _inscode

; 578  : #endif
; 579  : #endif
; 580  : #ifdef EOPNOTSUPP
; 581  :     inscode(d, ds, de, "EOPNOTSUPP", EOPNOTSUPP, "Operation not supported on transport endpoint");
; 582  : #else
; 583  : #ifdef WSAEOPNOTSUPP
; 584  :     inscode(d, ds, de, "EOPNOTSUPP", WSAEOPNOTSUPP, "Operation not supported on transport endpoint");

  0072e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@GCKIEACE@EOPNOTSUPP?$AA@
  00735	41 b9 3d 27 00
	00		 mov	 r9d, 10045		; 0000273dH
  0073b	48 8b d3	 mov	 rdx, rbx
  0073e	48 8b cf	 mov	 rcx, rdi
  00741	e8 00 00 00 00	 call	 _inscode

; 585  : #endif
; 586  : #endif
; 587  : #ifdef EREMCHG
; 588  :     inscode(d, ds, de, "EREMCHG", EREMCHG, "Remote address changed");
; 589  : #endif
; 590  : #ifdef EAGAIN
; 591  :     inscode(d, ds, de, "EAGAIN", EAGAIN, "Try again");

  00746	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06GIGOMMFD@EAGAIN?$AA@
  0074d	41 b9 0b 00 00
	00		 mov	 r9d, 11
  00753	48 8b d3	 mov	 rdx, rbx
  00756	48 8b cf	 mov	 rcx, rdi
  00759	e8 00 00 00 00	 call	 _inscode

; 592  : #endif
; 593  : #ifdef ENAMETOOLONG
; 594  :     inscode(d, ds, de, "ENAMETOOLONG", ENAMETOOLONG, "File name too long");

  0075e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@GHJFDHGC@ENAMETOOLONG?$AA@
  00765	41 b9 26 00 00
	00		 mov	 r9d, 38			; 00000026H
  0076b	48 8b d3	 mov	 rdx, rbx
  0076e	48 8b cf	 mov	 rcx, rdi
  00771	e8 00 00 00 00	 call	 _inscode

; 595  : #else
; 596  : #ifdef WSAENAMETOOLONG
; 597  :     inscode(d, ds, de, "ENAMETOOLONG", WSAENAMETOOLONG, "File name too long");
; 598  : #endif
; 599  : #endif
; 600  : #ifdef ENOTTY
; 601  :     inscode(d, ds, de, "ENOTTY", ENOTTY, "Not a typewriter");

  00776	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06NPPCCGFP@ENOTTY?$AA@
  0077d	41 b9 19 00 00
	00		 mov	 r9d, 25
  00783	48 8b d3	 mov	 rdx, rbx
  00786	48 8b cf	 mov	 rcx, rdi
  00789	e8 00 00 00 00	 call	 _inscode

; 602  : #endif
; 603  : #ifdef ERESTART
; 604  :     inscode(d, ds, de, "ERESTART", ERESTART, "Interrupted system call should be restarted");
; 605  : #endif
; 606  : #ifdef ESOCKTNOSUPPORT
; 607  :     inscode(d, ds, de, "ESOCKTNOSUPPORT", ESOCKTNOSUPPORT, "Socket type not supported");
; 608  : #else
; 609  : #ifdef WSAESOCKTNOSUPPORT
; 610  :     inscode(d, ds, de, "ESOCKTNOSUPPORT", WSAESOCKTNOSUPPORT, "Socket type not supported");

  0078e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@CLGCDGBO@ESOCKTNOSUPPORT?$AA@
  00795	41 b9 3c 27 00
	00		 mov	 r9d, 10044		; 0000273cH
  0079b	48 8b d3	 mov	 rdx, rbx
  0079e	48 8b cf	 mov	 rcx, rdi
  007a1	e8 00 00 00 00	 call	 _inscode

; 611  : #endif
; 612  : #endif
; 613  : #ifdef ETIME
; 614  :     inscode(d, ds, de, "ETIME", ETIME, "Timer expired");

  007a6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05MPGLBOOM@ETIME?$AA@
  007ad	41 b9 89 00 00
	00		 mov	 r9d, 137		; 00000089H
  007b3	48 8b d3	 mov	 rdx, rbx
  007b6	48 8b cf	 mov	 rcx, rdi
  007b9	e8 00 00 00 00	 call	 _inscode

; 615  : #endif
; 616  : #ifdef EBFONT
; 617  :     inscode(d, ds, de, "EBFONT", EBFONT, "Bad font file format");
; 618  : #endif
; 619  : #ifdef EDEADLOCK
; 620  :     inscode(d, ds, de, "EDEADLOCK", EDEADLOCK, "Error EDEADLOCK");

  007be	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09MPHFKLCM@EDEADLOCK?$AA@
  007c5	41 b9 24 00 00
	00		 mov	 r9d, 36			; 00000024H
  007cb	48 8b d3	 mov	 rdx, rbx
  007ce	48 8b cf	 mov	 rcx, rdi
  007d1	e8 00 00 00 00	 call	 _inscode

; 621  : #endif
; 622  : #ifdef ETOOMANYREFS
; 623  :     inscode(d, ds, de, "ETOOMANYREFS", ETOOMANYREFS, "Too many references: cannot splice");
; 624  : #else
; 625  : #ifdef WSAETOOMANYREFS
; 626  :     inscode(d, ds, de, "ETOOMANYREFS", WSAETOOMANYREFS, "Too many references: cannot splice");

  007d6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@LLJCPBML@ETOOMANYREFS?$AA@
  007dd	41 b9 4b 27 00
	00		 mov	 r9d, 10059		; 0000274bH
  007e3	48 8b d3	 mov	 rdx, rbx
  007e6	48 8b cf	 mov	 rcx, rdi
  007e9	e8 00 00 00 00	 call	 _inscode

; 627  : #endif
; 628  : #endif
; 629  : #ifdef EMFILE
; 630  :     inscode(d, ds, de, "EMFILE", EMFILE, "Too many open files");

  007ee	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06CEHBGFH@EMFILE?$AA@
  007f5	41 b9 18 00 00
	00		 mov	 r9d, 24
  007fb	48 8b d3	 mov	 rdx, rbx
  007fe	48 8b cf	 mov	 rcx, rdi
  00801	e8 00 00 00 00	 call	 _inscode

; 631  : #else
; 632  : #ifdef WSAEMFILE
; 633  :     inscode(d, ds, de, "EMFILE", WSAEMFILE, "Too many open files");
; 634  : #endif
; 635  : #endif
; 636  : #ifdef ETXTBSY
; 637  :     inscode(d, ds, de, "ETXTBSY", ETXTBSY, "Text file busy");

  00806	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07DFOKCEGI@ETXTBSY?$AA@
  0080d	41 b9 8b 00 00
	00		 mov	 r9d, 139		; 0000008bH
  00813	48 8b d3	 mov	 rdx, rbx
  00816	48 8b cf	 mov	 rcx, rdi
  00819	e8 00 00 00 00	 call	 _inscode

; 638  : #endif
; 639  : #ifdef EINPROGRESS
; 640  :     inscode(d, ds, de, "EINPROGRESS", EINPROGRESS, "Operation now in progress");
; 641  : #else
; 642  : #ifdef WSAEINPROGRESS
; 643  :     inscode(d, ds, de, "EINPROGRESS", WSAEINPROGRESS, "Operation now in progress");

  0081e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@NFKGMJFK@EINPROGRESS?$AA@
  00825	41 b9 34 27 00
	00		 mov	 r9d, 10036		; 00002734H
  0082b	48 8b d3	 mov	 rdx, rbx
  0082e	48 8b cf	 mov	 rcx, rdi
  00831	e8 00 00 00 00	 call	 _inscode

; 644  : #endif
; 645  : #endif
; 646  : #ifdef ENXIO
; 647  :     inscode(d, ds, de, "ENXIO", ENXIO, "No such device or address");

  00836	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05PAHIOBGD@ENXIO?$AA@
  0083d	41 b9 06 00 00
	00		 mov	 r9d, 6
  00843	48 8b d3	 mov	 rdx, rbx
  00846	48 8b cf	 mov	 rcx, rdi
  00849	e8 00 00 00 00	 call	 _inscode

; 648  : #endif
; 649  : #ifdef ENOPKG
; 650  :     inscode(d, ds, de, "ENOPKG", ENOPKG, "Package not installed");
; 651  : #endif
; 652  : #ifdef WSASY
; 653  :     inscode(d, ds, de, "WSASY", WSASY, "Error WSASY");
; 654  : #endif
; 655  : #ifdef WSAEHOSTDOWN
; 656  :     inscode(d, ds, de, "WSAEHOSTDOWN", WSAEHOSTDOWN, "Host is down");

  0084e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@NJBKCOKK@WSAEHOSTDOWN?$AA@
  00855	41 b9 50 27 00
	00		 mov	 r9d, 10064		; 00002750H
  0085b	48 8b d3	 mov	 rdx, rbx
  0085e	48 8b cf	 mov	 rcx, rdi
  00861	e8 00 00 00 00	 call	 _inscode

; 657  : #endif
; 658  : #ifdef WSAENETDOWN
; 659  :     inscode(d, ds, de, "WSAENETDOWN", WSAENETDOWN, "Network is down");

  00866	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@BMNODHFM@WSAENETDOWN?$AA@
  0086d	41 b9 42 27 00
	00		 mov	 r9d, 10050		; 00002742H
  00873	48 8b d3	 mov	 rdx, rbx
  00876	48 8b cf	 mov	 rcx, rdi
  00879	e8 00 00 00 00	 call	 _inscode

; 660  : #endif
; 661  : #ifdef WSAENOTSOCK
; 662  :     inscode(d, ds, de, "WSAENOTSOCK", WSAENOTSOCK, "Socket operation on non-socket");

  0087e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@MDGNMGJ@WSAENOTSOCK?$AA@
  00885	41 b9 36 27 00
	00		 mov	 r9d, 10038		; 00002736H
  0088b	48 8b d3	 mov	 rdx, rbx
  0088e	48 8b cf	 mov	 rcx, rdi
  00891	e8 00 00 00 00	 call	 _inscode

; 663  : #endif
; 664  : #ifdef WSAEHOSTUNREACH
; 665  :     inscode(d, ds, de, "WSAEHOSTUNREACH", WSAEHOSTUNREACH, "No route to host");

  00896	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@HKCFHLFG@WSAEHOSTUNREACH?$AA@
  0089d	41 b9 51 27 00
	00		 mov	 r9d, 10065		; 00002751H
  008a3	48 8b d3	 mov	 rdx, rbx
  008a6	48 8b cf	 mov	 rcx, rdi
  008a9	e8 00 00 00 00	 call	 _inscode

; 666  : #endif
; 667  : #ifdef WSAELOOP
; 668  :     inscode(d, ds, de, "WSAELOOP", WSAELOOP, "Too many symbolic links encountered");

  008ae	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08PGIMLMFD@WSAELOOP?$AA@
  008b5	41 b9 4e 27 00
	00		 mov	 r9d, 10062		; 0000274eH
  008bb	48 8b d3	 mov	 rdx, rbx
  008be	48 8b cf	 mov	 rcx, rdi
  008c1	e8 00 00 00 00	 call	 _inscode

; 669  : #endif
; 670  : #ifdef WSAEMFILE
; 671  :     inscode(d, ds, de, "WSAEMFILE", WSAEMFILE, "Too many open files");

  008c6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09IJIBIDKO@WSAEMFILE?$AA@
  008cd	41 b9 28 27 00
	00		 mov	 r9d, 10024		; 00002728H
  008d3	48 8b d3	 mov	 rdx, rbx
  008d6	48 8b cf	 mov	 rcx, rdi
  008d9	e8 00 00 00 00	 call	 _inscode

; 672  : #endif
; 673  : #ifdef WSAESTALE
; 674  :     inscode(d, ds, de, "WSAESTALE", WSAESTALE, "Stale NFS file handle");

  008de	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09GPMJAMEI@WSAESTALE?$AA@
  008e5	41 b9 56 27 00
	00		 mov	 r9d, 10070		; 00002756H
  008eb	48 8b d3	 mov	 rdx, rbx
  008ee	48 8b cf	 mov	 rcx, rdi
  008f1	e8 00 00 00 00	 call	 _inscode

; 675  : #endif
; 676  : #ifdef WSAVERNOTSUPPORTED
; 677  :     inscode(d, ds, de, "WSAVERNOTSUPPORTED", WSAVERNOTSUPPORTED, "Error WSAVERNOTSUPPORTED");

  008f6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@PKACBPOA@WSAVERNOTSUPPORTED?$AA@
  008fd	41 b9 6c 27 00
	00		 mov	 r9d, 10092		; 0000276cH
  00903	48 8b d3	 mov	 rdx, rbx
  00906	48 8b cf	 mov	 rcx, rdi
  00909	e8 00 00 00 00	 call	 _inscode

; 678  : #endif
; 679  : #ifdef WSAENETUNREACH
; 680  :     inscode(d, ds, de, "WSAENETUNREACH", WSAENETUNREACH, "Network is unreachable");

  0090e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@MMGFNLEA@WSAENETUNREACH?$AA@
  00915	41 b9 43 27 00
	00		 mov	 r9d, 10051		; 00002743H
  0091b	48 8b d3	 mov	 rdx, rbx
  0091e	48 8b cf	 mov	 rcx, rdi
  00921	e8 00 00 00 00	 call	 _inscode

; 681  : #endif
; 682  : #ifdef WSAEPROCLIM
; 683  :     inscode(d, ds, de, "WSAEPROCLIM", WSAEPROCLIM, "Error WSAEPROCLIM");

  00926	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@CDIHOKBK@WSAEPROCLIM?$AA@
  0092d	41 b9 53 27 00
	00		 mov	 r9d, 10067		; 00002753H
  00933	48 8b d3	 mov	 rdx, rbx
  00936	48 8b cf	 mov	 rcx, rdi
  00939	e8 00 00 00 00	 call	 _inscode

; 684  : #endif
; 685  : #ifdef WSAEFAULT
; 686  :     inscode(d, ds, de, "WSAEFAULT", WSAEFAULT, "Bad address");

  0093e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09BIHAGEEK@WSAEFAULT?$AA@
  00945	41 b9 1e 27 00
	00		 mov	 r9d, 10014		; 0000271eH
  0094b	48 8b d3	 mov	 rdx, rbx
  0094e	48 8b cf	 mov	 rcx, rdi
  00951	e8 00 00 00 00	 call	 _inscode

; 687  : #endif
; 688  : #ifdef WSANOTINITIALISED
; 689  :     inscode(d, ds, de, "WSANOTINITIALISED", WSANOTINITIALISED, "Error WSANOTINITIALISED");

  00956	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BC@CLCHBKPK@WSANOTINITIALISED?$AA@
  0095d	41 b9 6d 27 00
	00		 mov	 r9d, 10093		; 0000276dH
  00963	48 8b d3	 mov	 rdx, rbx
  00966	48 8b cf	 mov	 rcx, rdi
  00969	e8 00 00 00 00	 call	 _inscode

; 690  : #endif
; 691  : #ifdef WSAEUSERS
; 692  :     inscode(d, ds, de, "WSAEUSERS", WSAEUSERS, "Too many users");

  0096e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09IOPCJPLP@WSAEUSERS?$AA@
  00975	41 b9 54 27 00
	00		 mov	 r9d, 10068		; 00002754H
  0097b	48 8b d3	 mov	 rdx, rbx
  0097e	48 8b cf	 mov	 rcx, rdi
  00981	e8 00 00 00 00	 call	 _inscode

; 693  : #endif
; 694  : #ifdef WSAMAKEASYNCREPL
; 695  :     inscode(d, ds, de, "WSAMAKEASYNCREPL", WSAMAKEASYNCREPL, "Error WSAMAKEASYNCREPL");
; 696  : #endif
; 697  : #ifdef WSAENOPROTOOPT
; 698  :     inscode(d, ds, de, "WSAENOPROTOOPT", WSAENOPROTOOPT, "Protocol not available");

  00986	41 b9 3a 27 00
	00		 mov	 r9d, 10042		; 0000273aH
  0098c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@KODINEND@WSAENOPROTOOPT?$AA@
  00993	48 8b d3	 mov	 rdx, rbx
  00996	48 8b cf	 mov	 rcx, rdi
  00999	e8 00 00 00 00	 call	 _inscode

; 699  : #endif
; 700  : #ifdef WSAECONNABORTED
; 701  :     inscode(d, ds, de, "WSAECONNABORTED", WSAECONNABORTED, "Software caused connection abort");

  0099e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@HNCPIGIO@WSAECONNABORTED?$AA@
  009a5	41 b9 45 27 00
	00		 mov	 r9d, 10053		; 00002745H
  009ab	48 8b d3	 mov	 rdx, rbx
  009ae	48 8b cf	 mov	 rcx, rdi
  009b1	e8 00 00 00 00	 call	 _inscode

; 702  : #endif
; 703  : #ifdef WSAENAMETOOLONG
; 704  :     inscode(d, ds, de, "WSAENAMETOOLONG", WSAENAMETOOLONG, "File name too long");

  009b6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@PCKIJCGI@WSAENAMETOOLONG?$AA@
  009bd	41 b9 4f 27 00
	00		 mov	 r9d, 10063		; 0000274fH
  009c3	48 8b d3	 mov	 rdx, rbx
  009c6	48 8b cf	 mov	 rcx, rdi
  009c9	e8 00 00 00 00	 call	 _inscode

; 705  : #endif
; 706  : #ifdef WSAENOTEMPTY
; 707  :     inscode(d, ds, de, "WSAENOTEMPTY", WSAENOTEMPTY, "Directory not empty");

  009ce	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@KFICKHOH@WSAENOTEMPTY?$AA@
  009d5	41 b9 52 27 00
	00		 mov	 r9d, 10066		; 00002752H
  009db	48 8b d3	 mov	 rdx, rbx
  009de	48 8b cf	 mov	 rcx, rdi
  009e1	e8 00 00 00 00	 call	 _inscode

; 708  : #endif
; 709  : #ifdef WSAESHUTDOWN
; 710  :     inscode(d, ds, de, "WSAESHUTDOWN", WSAESHUTDOWN, "Cannot send after transport endpoint shutdown");

  009e6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@JOJKMOCF@WSAESHUTDOWN?$AA@
  009ed	41 b9 4a 27 00
	00		 mov	 r9d, 10058		; 0000274aH
  009f3	48 8b d3	 mov	 rdx, rbx
  009f6	48 8b cf	 mov	 rcx, rdi
  009f9	e8 00 00 00 00	 call	 _inscode

; 711  : #endif
; 712  : #ifdef WSAEAFNOSUPPORT
; 713  :     inscode(d, ds, de, "WSAEAFNOSUPPORT", WSAEAFNOSUPPORT, "Address family not supported by protocol");

  009fe	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@DNDGDCNF@WSAEAFNOSUPPORT?$AA@
  00a05	41 b9 3f 27 00
	00		 mov	 r9d, 10047		; 0000273fH
  00a0b	48 8b d3	 mov	 rdx, rbx
  00a0e	48 8b cf	 mov	 rcx, rdi
  00a11	e8 00 00 00 00	 call	 _inscode

; 714  : #endif
; 715  : #ifdef WSAETOOMANYREFS
; 716  :     inscode(d, ds, de, "WSAETOOMANYREFS", WSAETOOMANYREFS, "Too many references: cannot splice");

  00a16	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@COKPFEMB@WSAETOOMANYREFS?$AA@
  00a1d	41 b9 4b 27 00
	00		 mov	 r9d, 10059		; 0000274bH
  00a23	48 8b d3	 mov	 rdx, rbx
  00a26	48 8b cf	 mov	 rcx, rdi
  00a29	e8 00 00 00 00	 call	 _inscode

; 717  : #endif
; 718  : #ifdef WSAEACCES
; 719  :     inscode(d, ds, de, "WSAEACCES", WSAEACCES, "Permission denied");

  00a2e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09EKFHKCJJ@WSAEACCES?$AA@
  00a35	41 b9 1d 27 00
	00		 mov	 r9d, 10013		; 0000271dH
  00a3b	48 8b d3	 mov	 rdx, rbx
  00a3e	48 8b cf	 mov	 rcx, rdi
  00a41	e8 00 00 00 00	 call	 _inscode

; 720  : #endif
; 721  : #ifdef WSATR
; 722  :     inscode(d, ds, de, "WSATR", WSATR, "Error WSATR");
; 723  : #endif
; 724  : #ifdef WSABASEERR
; 725  :     inscode(d, ds, de, "WSABASEERR", WSABASEERR, "Error WSABASEERR");

  00a46	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@IGIFNHIB@WSABASEERR?$AA@
  00a4d	41 b9 10 27 00
	00		 mov	 r9d, 10000		; 00002710H
  00a53	48 8b d3	 mov	 rdx, rbx
  00a56	48 8b cf	 mov	 rcx, rdi
  00a59	e8 00 00 00 00	 call	 _inscode

; 726  : #endif
; 727  : #ifdef WSADESCRIPTIO
; 728  :     inscode(d, ds, de, "WSADESCRIPTIO", WSADESCRIPTIO, "Error WSADESCRIPTIO");
; 729  : #endif
; 730  : #ifdef WSAEMSGSIZE
; 731  :     inscode(d, ds, de, "WSAEMSGSIZE", WSAEMSGSIZE, "Message too long");

  00a5e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@PJKLHKI@WSAEMSGSIZE?$AA@
  00a65	41 b9 38 27 00
	00		 mov	 r9d, 10040		; 00002738H
  00a6b	48 8b d3	 mov	 rdx, rbx
  00a6e	48 8b cf	 mov	 rcx, rdi
  00a71	e8 00 00 00 00	 call	 _inscode

; 732  : #endif
; 733  : #ifdef WSAEBADF
; 734  :     inscode(d, ds, de, "WSAEBADF", WSAEBADF, "Bad file number");

  00a76	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08LJKOCPDH@WSAEBADF?$AA@
  00a7d	41 b9 19 27 00
	00		 mov	 r9d, 10009		; 00002719H
  00a83	48 8b d3	 mov	 rdx, rbx
  00a86	48 8b cf	 mov	 rcx, rdi
  00a89	e8 00 00 00 00	 call	 _inscode

; 735  : #endif
; 736  : #ifdef WSAECONNRESET
; 737  :     inscode(d, ds, de, "WSAECONNRESET", WSAECONNRESET, "Connection reset by peer");

  00a8e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@CIPFFFJE@WSAECONNRESET?$AA@
  00a95	41 b9 46 27 00
	00		 mov	 r9d, 10054		; 00002746H
  00a9b	48 8b d3	 mov	 rdx, rbx
  00a9e	48 8b cf	 mov	 rcx, rdi
  00aa1	e8 00 00 00 00	 call	 _inscode

; 738  : #endif
; 739  : #ifdef WSAGETSELECTERRO
; 740  :     inscode(d, ds, de, "WSAGETSELECTERRO", WSAGETSELECTERRO, "Error WSAGETSELECTERRO");
; 741  : #endif
; 742  : #ifdef WSAETIMEDOUT
; 743  :     inscode(d, ds, de, "WSAETIMEDOUT", WSAETIMEDOUT, "Connection timed out");

  00aa6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@BJEDIOFA@WSAETIMEDOUT?$AA@
  00aad	41 b9 4c 27 00
	00		 mov	 r9d, 10060		; 0000274cH
  00ab3	48 8b d3	 mov	 rdx, rbx
  00ab6	48 8b cf	 mov	 rcx, rdi
  00ab9	e8 00 00 00 00	 call	 _inscode

; 744  : #endif
; 745  : #ifdef WSAENOBUFS
; 746  :     inscode(d, ds, de, "WSAENOBUFS", WSAENOBUFS, "No buffer space available");

  00abe	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@OOBBNNPD@WSAENOBUFS?$AA@
  00ac5	41 b9 47 27 00
	00		 mov	 r9d, 10055		; 00002747H
  00acb	48 8b d3	 mov	 rdx, rbx
  00ace	48 8b cf	 mov	 rcx, rdi
  00ad1	e8 00 00 00 00	 call	 _inscode

; 747  : #endif
; 748  : #ifdef WSAEDISCON
; 749  :     inscode(d, ds, de, "WSAEDISCON", WSAEDISCON, "Error WSAEDISCON");

  00ad6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@EEHHIAEC@WSAEDISCON?$AA@
  00add	41 b9 75 27 00
	00		 mov	 r9d, 10101		; 00002775H
  00ae3	48 8b d3	 mov	 rdx, rbx
  00ae6	48 8b cf	 mov	 rcx, rdi
  00ae9	e8 00 00 00 00	 call	 _inscode

; 750  : #endif
; 751  : #ifdef WSAEINTR
; 752  :     inscode(d, ds, de, "WSAEINTR", WSAEINTR, "Interrupted system call");

  00aee	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08KEJFHKFF@WSAEINTR?$AA@
  00af5	41 b9 14 27 00
	00		 mov	 r9d, 10004		; 00002714H
  00afb	48 8b d3	 mov	 rdx, rbx
  00afe	48 8b cf	 mov	 rcx, rdi
  00b01	e8 00 00 00 00	 call	 _inscode

; 753  : #endif
; 754  : #ifdef WSAEPROTOTYPE
; 755  :     inscode(d, ds, de, "WSAEPROTOTYPE", WSAEPROTOTYPE, "Protocol wrong type for socket");

  00b06	41 b9 39 27 00
	00		 mov	 r9d, 10041		; 00002739H
  00b0c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@HCKGAENP@WSAEPROTOTYPE?$AA@
  00b13	48 8b d3	 mov	 rdx, rbx
  00b16	48 8b cf	 mov	 rcx, rdi
  00b19	e8 00 00 00 00	 call	 _inscode

; 756  : #endif
; 757  : #ifdef WSAHOS
; 758  :     inscode(d, ds, de, "WSAHOS", WSAHOS, "Error WSAHOS");
; 759  : #endif
; 760  : #ifdef WSAEADDRINUSE
; 761  :     inscode(d, ds, de, "WSAEADDRINUSE", WSAEADDRINUSE, "Address already in use");

  00b1e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@OPDDJBEB@WSAEADDRINUSE?$AA@
  00b25	41 b9 40 27 00
	00		 mov	 r9d, 10048		; 00002740H
  00b2b	48 8b d3	 mov	 rdx, rbx
  00b2e	48 8b cf	 mov	 rcx, rdi
  00b31	e8 00 00 00 00	 call	 _inscode

; 762  : #endif
; 763  : #ifdef WSAEADDRNOTAVAIL
; 764  :     inscode(d, ds, de, "WSAEADDRNOTAVAIL", WSAEADDRNOTAVAIL, "Cannot assign requested address");

  00b36	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BB@MBBPJMGK@WSAEADDRNOTAVAIL?$AA@
  00b3d	41 b9 41 27 00
	00		 mov	 r9d, 10049		; 00002741H
  00b43	48 8b d3	 mov	 rdx, rbx
  00b46	48 8b cf	 mov	 rcx, rdi
  00b49	e8 00 00 00 00	 call	 _inscode

; 765  : #endif
; 766  : #ifdef WSAEALREADY
; 767  :     inscode(d, ds, de, "WSAEALREADY", WSAEALREADY, "Operation already in progress");

  00b4e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@EAGDEEAC@WSAEALREADY?$AA@
  00b55	41 b9 35 27 00
	00		 mov	 r9d, 10037		; 00002735H
  00b5b	48 8b d3	 mov	 rdx, rbx
  00b5e	48 8b cf	 mov	 rcx, rdi
  00b61	e8 00 00 00 00	 call	 _inscode

; 768  : #endif
; 769  : #ifdef WSAEPROTONOSUPPORT
; 770  :     inscode(d, ds, de, "WSAEPROTONOSUPPORT", WSAEPROTONOSUPPORT, "Protocol not supported");

  00b66	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@EDJBJFH@WSAEPROTONOSUPPORT?$AA@
  00b6d	41 b9 3b 27 00
	00		 mov	 r9d, 10043		; 0000273bH
  00b73	48 8b d3	 mov	 rdx, rbx
  00b76	48 8b cf	 mov	 rcx, rdi
  00b79	e8 00 00 00 00	 call	 _inscode

; 771  : #endif
; 772  : #ifdef WSASYSNOTREADY
; 773  :     inscode(d, ds, de, "WSASYSNOTREADY", WSASYSNOTREADY, "Error WSASYSNOTREADY");

  00b7e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@MDJAKAKC@WSASYSNOTREADY?$AA@
  00b85	41 b9 6b 27 00
	00		 mov	 r9d, 10091		; 0000276bH
  00b8b	48 8b d3	 mov	 rdx, rbx
  00b8e	48 8b cf	 mov	 rcx, rdi
  00b91	e8 00 00 00 00	 call	 _inscode

; 774  : #endif
; 775  : #ifdef WSAEWOULDBLOCK
; 776  :     inscode(d, ds, de, "WSAEWOULDBLOCK", WSAEWOULDBLOCK, "Operation would block");

  00b96	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@BLDHJENA@WSAEWOULDBLOCK?$AA@
  00b9d	41 b9 33 27 00
	00		 mov	 r9d, 10035		; 00002733H
  00ba3	48 8b d3	 mov	 rdx, rbx
  00ba6	48 8b cf	 mov	 rcx, rdi
  00ba9	e8 00 00 00 00	 call	 _inscode

; 777  : #endif
; 778  : #ifdef WSAEPFNOSUPPORT
; 779  :     inscode(d, ds, de, "WSAEPFNOSUPPORT", WSAEPFNOSUPPORT, "Protocol family not supported");

  00bae	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@KKILJDEG@WSAEPFNOSUPPORT?$AA@
  00bb5	41 b9 3e 27 00
	00		 mov	 r9d, 10046		; 0000273eH
  00bbb	48 8b d3	 mov	 rdx, rbx
  00bbe	48 8b cf	 mov	 rcx, rdi
  00bc1	e8 00 00 00 00	 call	 _inscode

; 780  : #endif
; 781  : #ifdef WSAEOPNOTSUPP
; 782  :     inscode(d, ds, de, "WSAEOPNOTSUPP", WSAEOPNOTSUPP, "Operation not supported on transport endpoint");

  00bc6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@IFNEEJHC@WSAEOPNOTSUPP?$AA@
  00bcd	41 b9 3d 27 00
	00		 mov	 r9d, 10045		; 0000273dH
  00bd3	48 8b d3	 mov	 rdx, rbx
  00bd6	48 8b cf	 mov	 rcx, rdi
  00bd9	e8 00 00 00 00	 call	 _inscode

; 783  : #endif
; 784  : #ifdef WSAEISCONN
; 785  :     inscode(d, ds, de, "WSAEISCONN", WSAEISCONN, "Transport endpoint is already connected");

  00bde	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@KMBJICHC@WSAEISCONN?$AA@
  00be5	41 b9 48 27 00
	00		 mov	 r9d, 10056		; 00002748H
  00beb	48 8b d3	 mov	 rdx, rbx
  00bee	48 8b cf	 mov	 rcx, rdi
  00bf1	e8 00 00 00 00	 call	 _inscode

; 786  : #endif
; 787  : #ifdef WSAEDQUOT
; 788  :     inscode(d, ds, de, "WSAEDQUOT", WSAEDQUOT, "Quota exceeded");

  00bf6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09DHBOOMJK@WSAEDQUOT?$AA@
  00bfd	41 b9 55 27 00
	00		 mov	 r9d, 10069		; 00002755H
  00c03	48 8b d3	 mov	 rdx, rbx
  00c06	48 8b cf	 mov	 rcx, rdi
  00c09	e8 00 00 00 00	 call	 _inscode

; 789  : #endif
; 790  : #ifdef WSAENOTCONN
; 791  :     inscode(d, ds, de, "WSAENOTCONN", WSAENOTCONN, "Transport endpoint is not connected");

  00c0e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@BJHJCMPN@WSAENOTCONN?$AA@
  00c15	41 b9 49 27 00
	00		 mov	 r9d, 10057		; 00002749H
  00c1b	48 8b d3	 mov	 rdx, rbx
  00c1e	48 8b cf	 mov	 rcx, rdi
  00c21	e8 00 00 00 00	 call	 _inscode

; 792  : #endif
; 793  : #ifdef WSAEREMOTE
; 794  :     inscode(d, ds, de, "WSAEREMOTE", WSAEREMOTE, "Object is remote");

  00c26	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@FBDKOKMM@WSAEREMOTE?$AA@
  00c2d	41 b9 57 27 00
	00		 mov	 r9d, 10071		; 00002757H
  00c33	48 8b d3	 mov	 rdx, rbx
  00c36	48 8b cf	 mov	 rcx, rdi
  00c39	e8 00 00 00 00	 call	 _inscode

; 795  : #endif
; 796  : #ifdef WSAEINVAL
; 797  :     inscode(d, ds, de, "WSAEINVAL", WSAEINVAL, "Invalid argument");

  00c3e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09PDAAOFKK@WSAEINVAL?$AA@
  00c45	41 b9 26 27 00
	00		 mov	 r9d, 10022		; 00002726H
  00c4b	48 8b d3	 mov	 rdx, rbx
  00c4e	48 8b cf	 mov	 rcx, rdi
  00c51	e8 00 00 00 00	 call	 _inscode

; 798  : #endif
; 799  : #ifdef WSAEINPROGRESS
; 800  :     inscode(d, ds, de, "WSAEINPROGRESS", WSAEINPROGRESS, "Operation now in progress");

  00c56	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@FHEJEBJC@WSAEINPROGRESS?$AA@
  00c5d	41 b9 34 27 00
	00		 mov	 r9d, 10036		; 00002734H
  00c63	48 8b d3	 mov	 rdx, rbx
  00c66	48 8b cf	 mov	 rcx, rdi
  00c69	e8 00 00 00 00	 call	 _inscode

; 801  : #endif
; 802  : #ifdef WSAGETSELECTEVEN
; 803  :     inscode(d, ds, de, "WSAGETSELECTEVEN", WSAGETSELECTEVEN, "Error WSAGETSELECTEVEN");
; 804  : #endif
; 805  : #ifdef WSAESOCKTNOSUPPORT
; 806  :     inscode(d, ds, de, "WSAESOCKTNOSUPPORT", WSAESOCKTNOSUPPORT, "Socket type not supported");

  00c6e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@KNONLHOA@WSAESOCKTNOSUPPORT?$AA@
  00c75	41 b9 3c 27 00
	00		 mov	 r9d, 10044		; 0000273cH
  00c7b	48 8b d3	 mov	 rdx, rbx
  00c7e	48 8b cf	 mov	 rcx, rdi
  00c81	e8 00 00 00 00	 call	 _inscode

; 807  : #endif
; 808  : #ifdef WSAGETASYNCERRO
; 809  :     inscode(d, ds, de, "WSAGETASYNCERRO", WSAGETASYNCERRO, "Error WSAGETASYNCERRO");
; 810  : #endif
; 811  : #ifdef WSAMAKESELECTREPL
; 812  :     inscode(d, ds, de, "WSAMAKESELECTREPL", WSAMAKESELECTREPL, "Error WSAMAKESELECTREPL");
; 813  : #endif
; 814  : #ifdef WSAGETASYNCBUFLE
; 815  :     inscode(d, ds, de, "WSAGETASYNCBUFLE", WSAGETASYNCBUFLE, "Error WSAGETASYNCBUFLE");
; 816  : #endif
; 817  : #ifdef WSAEDESTADDRREQ
; 818  :     inscode(d, ds, de, "WSAEDESTADDRREQ", WSAEDESTADDRREQ, "Destination address required");

  00c86	41 b9 37 27 00
	00		 mov	 r9d, 10039		; 00002737H
  00c8c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@BLGPIJAD@WSAEDESTADDRREQ?$AA@
  00c93	48 8b d3	 mov	 rdx, rbx
  00c96	48 8b cf	 mov	 rcx, rdi
  00c99	e8 00 00 00 00	 call	 _inscode

; 819  : #endif
; 820  : #ifdef WSAECONNREFUSED
; 821  :     inscode(d, ds, de, "WSAECONNREFUSED", WSAECONNREFUSED, "Connection refused");

  00c9e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@ECEEDLKJ@WSAECONNREFUSED?$AA@
  00ca5	41 b9 4d 27 00
	00		 mov	 r9d, 10061		; 0000274dH
  00cab	48 8b d3	 mov	 rdx, rbx
  00cae	48 8b cf	 mov	 rcx, rdi
  00cb1	e8 00 00 00 00	 call	 _inscode

; 822  : #endif
; 823  : #ifdef WSAENETRESET
; 824  :     inscode(d, ds, de, "WSAENETRESET", WSAENETRESET, "Network dropped connection because of reset");

  00cb6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@KABONKCJ@WSAENETRESET?$AA@
  00cbd	41 b9 44 27 00
	00		 mov	 r9d, 10052		; 00002744H
  00cc3	48 8b d3	 mov	 rdx, rbx
  00cc6	48 8b cf	 mov	 rcx, rdi
  00cc9	e8 00 00 00 00	 call	 _inscode

; 825  : #endif
; 826  : #ifdef WSAN
; 827  :     inscode(d, ds, de, "WSAN", WSAN, "Error WSAN");
; 828  : #endif
; 829  : #ifdef ENOMEDIUM
; 830  :     inscode(d, ds, de, "ENOMEDIUM", ENOMEDIUM, "No medium found");
; 831  : #endif
; 832  : #ifdef EMEDIUMTYPE
; 833  :     inscode(d, ds, de, "EMEDIUMTYPE", EMEDIUMTYPE, "Wrong medium type");
; 834  : #endif
; 835  : #ifdef ECANCELED
; 836  :     inscode(d, ds, de, "ECANCELED", ECANCELED, "Operation Canceled");

  00cce	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09FIKDCFKM@ECANCELED?$AA@
  00cd5	41 b9 69 00 00
	00		 mov	 r9d, 105		; 00000069H
  00cdb	48 8b d3	 mov	 rdx, rbx
  00cde	48 8b cf	 mov	 rcx, rdi
  00ce1	e8 00 00 00 00	 call	 _inscode

; 837  : #endif
; 838  : #ifdef ENOKEY
; 839  :     inscode(d, ds, de, "ENOKEY", ENOKEY, "Required key not available");
; 840  : #endif
; 841  : #ifdef EKEYEXPIRED
; 842  :     inscode(d, ds, de, "EKEYEXPIRED", EKEYEXPIRED, "Key has expired");
; 843  : #endif
; 844  : #ifdef EKEYREVOKED
; 845  :     inscode(d, ds, de, "EKEYREVOKED", EKEYREVOKED, "Key has been revoked");
; 846  : #endif
; 847  : #ifdef EKEYREJECTED
; 848  :     inscode(d, ds, de, "EKEYREJECTED", EKEYREJECTED, "Key was rejected by service");
; 849  : #endif
; 850  : #ifdef EOWNERDEAD
; 851  :     inscode(d, ds, de, "EOWNERDEAD", EOWNERDEAD, "Owner died");

  00ce6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@MFHDJDKB@EOWNERDEAD?$AA@
  00ced	41 b9 85 00 00
	00		 mov	 r9d, 133		; 00000085H
  00cf3	48 8b d3	 mov	 rdx, rbx
  00cf6	48 8b cf	 mov	 rcx, rdi
  00cf9	e8 00 00 00 00	 call	 _inscode

; 852  : #endif
; 853  : #ifdef ENOTRECOVERABLE
; 854  :     inscode(d, ds, de, "ENOTRECOVERABLE", ENOTRECOVERABLE, "State not recoverable");

  00cfe	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@NJDAMECN@ENOTRECOVERABLE?$AA@
  00d05	41 b9 7f 00 00
	00		 mov	 r9d, 127		; 0000007fH
  00d0b	48 8b d3	 mov	 rdx, rbx
  00d0e	48 8b cf	 mov	 rcx, rdi
  00d11	e8 00 00 00 00	 call	 _inscode

; 855  : #endif
; 856  : #ifdef ERFKILL
; 857  :     inscode(d, ds, de, "ERFKILL", ERFKILL, "Operation not possible due to RF-kill");
; 858  : #endif
; 859  : 
; 860  :     /* Solaris-specific errnos */
; 861  : #ifdef ECANCELED
; 862  :     inscode(d, ds, de, "ECANCELED", ECANCELED, "Operation canceled");

  00d16	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09FIKDCFKM@ECANCELED?$AA@
  00d1d	41 b9 69 00 00
	00		 mov	 r9d, 105		; 00000069H
  00d23	48 8b d3	 mov	 rdx, rbx
  00d26	48 8b cf	 mov	 rcx, rdi
  00d29	e8 00 00 00 00	 call	 _inscode

; 863  : #endif
; 864  : #ifdef ENOTSUP
; 865  :     inscode(d, ds, de, "ENOTSUP", ENOTSUP, "Operation not supported");

  00d2e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07NFHNCCMK@ENOTSUP?$AA@
  00d35	41 b9 81 00 00
	00		 mov	 r9d, 129		; 00000081H
  00d3b	48 8b d3	 mov	 rdx, rbx
  00d3e	48 8b cf	 mov	 rcx, rdi
  00d41	e8 00 00 00 00	 call	 _inscode

; 866  : #endif
; 867  : #ifdef EOWNERDEAD
; 868  :     inscode(d, ds, de, "EOWNERDEAD", EOWNERDEAD, "Process died with the lock");

  00d46	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@MFHDJDKB@EOWNERDEAD?$AA@
  00d4d	41 b9 85 00 00
	00		 mov	 r9d, 133		; 00000085H
  00d53	48 8b d3	 mov	 rdx, rbx
  00d56	48 8b cf	 mov	 rcx, rdi
  00d59	e8 00 00 00 00	 call	 _inscode

; 869  : #endif
; 870  : #ifdef ENOTRECOVERABLE
; 871  :     inscode(d, ds, de, "ENOTRECOVERABLE", ENOTRECOVERABLE, "Lock is not recoverable");

  00d5e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@NJDAMECN@ENOTRECOVERABLE?$AA@
  00d65	41 b9 7f 00 00
	00		 mov	 r9d, 127		; 0000007fH
  00d6b	48 8b d3	 mov	 rdx, rbx
  00d6e	48 8b cf	 mov	 rcx, rdi
  00d71	e8 00 00 00 00	 call	 _inscode

; 872  : #endif
; 873  : #ifdef ELOCKUNMAPPED
; 874  :     inscode(d, ds, de, "ELOCKUNMAPPED", ELOCKUNMAPPED, "Locked lock was unmapped");
; 875  : #endif
; 876  : #ifdef ENOTACTIVE
; 877  :     inscode(d, ds, de, "ENOTACTIVE", ENOTACTIVE, "Facility is not active");
; 878  : #endif
; 879  : 
; 880  :     /* MacOSX specific errnos */
; 881  : #ifdef EAUTH
; 882  :     inscode(d, ds, de, "EAUTH", EAUTH, "Authentication error");
; 883  : #endif
; 884  : #ifdef EBADARCH
; 885  :     inscode(d, ds, de, "EBADARCH", EBADARCH, "Bad CPU type in executable");
; 886  : #endif
; 887  : #ifdef EBADEXEC
; 888  :     inscode(d, ds, de, "EBADEXEC", EBADEXEC, "Bad executable (or shared library)");
; 889  : #endif
; 890  : #ifdef EBADMACHO
; 891  :     inscode(d, ds, de, "EBADMACHO", EBADMACHO, "Malformed Mach-o file");
; 892  : #endif
; 893  : #ifdef EBADRPC
; 894  :     inscode(d, ds, de, "EBADRPC", EBADRPC, "RPC struct is bad");
; 895  : #endif
; 896  : #ifdef EDEVERR
; 897  :     inscode(d, ds, de, "EDEVERR", EDEVERR, "Device error");
; 898  : #endif
; 899  : #ifdef EFTYPE
; 900  :     inscode(d, ds, de, "EFTYPE", EFTYPE, "Inappropriate file type or format");
; 901  : #endif
; 902  : #ifdef ENEEDAUTH
; 903  :     inscode(d, ds, de, "ENEEDAUTH", ENEEDAUTH, "Need authenticator");
; 904  : #endif
; 905  : #ifdef ENOATTR
; 906  :     inscode(d, ds, de, "ENOATTR", ENOATTR, "Attribute not found");
; 907  : #endif
; 908  : #ifdef ENOPOLICY
; 909  :     inscode(d, ds, de, "ENOPOLICY", ENOPOLICY, "Policy not found");
; 910  : #endif
; 911  : #ifdef EPROCLIM
; 912  :     inscode(d, ds, de, "EPROCLIM", EPROCLIM, "Too many processes");
; 913  : #endif
; 914  : #ifdef EPROCUNAVAIL
; 915  :     inscode(d, ds, de, "EPROCUNAVAIL", EPROCUNAVAIL, "Bad procedure for program");
; 916  : #endif
; 917  : #ifdef EPROGMISMATCH
; 918  :     inscode(d, ds, de, "EPROGMISMATCH", EPROGMISMATCH, "Program version wrong");
; 919  : #endif
; 920  : #ifdef EPROGUNAVAIL
; 921  :     inscode(d, ds, de, "EPROGUNAVAIL", EPROGUNAVAIL, "RPC prog. not avail");
; 922  : #endif
; 923  : #ifdef EPWROFF
; 924  :     inscode(d, ds, de, "EPWROFF", EPWROFF, "Device power is off");
; 925  : #endif
; 926  : #ifdef ERPCMISMATCH
; 927  :     inscode(d, ds, de, "ERPCMISMATCH", ERPCMISMATCH, "RPC version wrong");
; 928  : #endif
; 929  : #ifdef ESHLIBVERS
; 930  :     inscode(d, ds, de, "ESHLIBVERS", ESHLIBVERS, "Shared library version mismatch");
; 931  : #endif
; 932  : 
; 933  :     Py_DECREF(de);

  00d76	48 8b cb	 mov	 rcx, rbx
  00d79	e8 00 00 00 00	 call	 _Py_DecRef
  00d7e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00d83	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]

; 934  :     return m;

  00d88	48 8b c6	 mov	 rax, rsi

; 935  : }

  00d8b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00d8f	5e		 pop	 rsi
  00d90	c3		 ret	 0
$LN1@PyInit_err:
  00d91	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00d96	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]

; 105  :         return NULL;

  00d9b	33 c0		 xor	 eax, eax

; 935  : }

  00d9d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00da1	5e		 pop	 rsi
  00da2	c3		 ret	 0
PyInit_errno ENDP
_TEXT	ENDS
END
