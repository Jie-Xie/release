; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_07JGEBJGAH@_bisect?$AA@			; `string'
PUBLIC	??_C@_0M@PBGOOMDD@insort_left?$AA@		; `string'
PUBLIC	??_C@_0M@IMPIOGJF@bisect_left?$AA@		; `string'
PUBLIC	??_C@_06IPFCDKBL@insort?$AA@			; `string'
PUBLIC	??_C@_0N@KFNOAAJD@insort_right?$AA@		; `string'
PUBLIC	??_C@_06OCAJHHHK@bisect?$AA@			; `string'
PUBLIC	??_C@_0N@JKBGJAEE@bisect_right?$AA@		; `string'
PUBLIC	??_C@_06OAOPNKHP@insert?$AA@			; `string'
PUBLIC	??_C@_02PCEFGMJL@hi?$AA@			; `string'
PUBLIC	??_C@_02KDBGGDMB@lo?$AA@			; `string'
PUBLIC	??_C@_01FJMABOPO@x?$AA@				; `string'
PUBLIC	??_C@_01MCMALHOG@a?$AA@				; `string'
;	COMDAT ??_C@_07JGEBJGAH@_bisect?$AA@
CONST	SEGMENT
??_C@_07JGEBJGAH@_bisect?$AA@ DB '_bisect', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PBGOOMDD@insort_left?$AA@
CONST	SEGMENT
??_C@_0M@PBGOOMDD@insort_left?$AA@ DB 'insort_left', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IMPIOGJF@bisect_left?$AA@
CONST	SEGMENT
??_C@_0M@IMPIOGJF@bisect_left?$AA@ DB 'bisect_left', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06IPFCDKBL@insort?$AA@
CONST	SEGMENT
??_C@_06IPFCDKBL@insort?$AA@ DB 'insort', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KFNOAAJD@insort_right?$AA@
CONST	SEGMENT
??_C@_0N@KFNOAAJD@insort_right?$AA@ DB 'insort_right', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06OCAJHHHK@bisect?$AA@
CONST	SEGMENT
??_C@_06OCAJHHHK@bisect?$AA@ DB 'bisect', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JKBGJAEE@bisect_right?$AA@
CONST	SEGMENT
??_C@_0N@JKBGJAEE@bisect_right?$AA@ DB 'bisect_right', 00H ; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId_insert@?3??insort_left@@9@9 DQ 0000000000000000H	; `insort_left'::`4'::PyId_insert
	DQ	FLAT:??_C@_06OAOPNKHP@insert?$AA@
	DQ	0000000000000000H
?PyId_insert@?3??insort_right@@9@9 DQ 0000000000000000H	; `insort_right'::`4'::PyId_insert
	DQ	FLAT:??_C@_06OAOPNKHP@insert?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_06OAOPNKHP@insert?$AA@
CONST	SEGMENT
??_C@_06OAOPNKHP@insert?$AA@ DB 'insert', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
?keywords@?1??bisect_right@@9@9 DQ FLAT:??_C@_01MCMALHOG@a?$AA@ ; `bisect_right'::`2'::keywords
	DQ	FLAT:??_C@_01FJMABOPO@x?$AA@
	DQ	FLAT:??_C@_02KDBGGDMB@lo?$AA@
	DQ	FLAT:??_C@_02PCEFGMJL@hi?$AA@
	DQ	0000000000000000H
?keywords@?1??insort_right@@9@9 DQ FLAT:??_C@_01MCMALHOG@a?$AA@ ; `insort_right'::`2'::keywords
	DQ	FLAT:??_C@_01FJMABOPO@x?$AA@
	DQ	FLAT:??_C@_02KDBGGDMB@lo?$AA@
	DQ	FLAT:??_C@_02PCEFGMJL@hi?$AA@
	DQ	0000000000000000H
bisect_right_doc DB 'bisect_right(a, x[, lo[, hi]]) -> index', 0aH, 0aH, 'R'
	DB	'eturn the index where to insert item x in list a, assuming a '
	DB	'is sorted.', 0aH, 0aH, 'The return value i is such that all e'
	DB	' in a[:i] have e <= x, and all e in', 0aH, 'a[i:] have e > x.'
	DB	'  So if x already appears in the list, i points just', 0aH, 'b'
	DB	'eyond the rightmost x already there', 0aH, 0aH, 'Optional arg'
	DB	's lo (default 0) and hi (default len(a)) bound the', 0aH, 'sl'
	DB	'ice of a to be searched.', 0aH, 00H
	ORG $+13
insort_right_doc DB 'insort_right(a, x[, lo[, hi]])', 0aH, 0aH, 'Insert i'
	DB	'tem x in list a, and keep it sorted assuming a is sorted.', 0aH
	DB	0aH, 'If x is already in a, insert it to the right of the righ'
	DB	'tmost x.', 0aH, 0aH, 'Optional args lo (default 0) and hi (de'
	DB	'fault len(a)) bound the', 0aH, 'slice of a to be searched.', 0aH
	DB	00H
?keywords@?1??bisect_left@@9@9 DQ FLAT:??_C@_01MCMALHOG@a?$AA@ ; `bisect_left'::`2'::keywords
	DQ	FLAT:??_C@_01FJMABOPO@x?$AA@
	DQ	FLAT:??_C@_02KDBGGDMB@lo?$AA@
	DQ	FLAT:??_C@_02PCEFGMJL@hi?$AA@
	DQ	0000000000000000H
	ORG $+8
bisect_left_doc DB 'bisect_left(a, x[, lo[, hi]]) -> index', 0aH, 0aH, 'R'
	DB	'eturn the index where to insert item x in list a, assuming a '
	DB	'is sorted.', 0aH, 0aH, 'The return value i is such that all e'
	DB	' in a[:i] have e < x, and all e in', 0aH, 'a[i:] have e >= x.'
	DB	'  So if x already appears in the list, i points just', 0aH, 'b'
	DB	'efore the leftmost x already there.', 0aH, 0aH, 'Optional arg'
	DB	's lo (default 0) and hi (default len(a)) bound the', 0aH, 'sl'
	DB	'ice of a to be searched.', 0aH, 00H
	ORG $+6
?keywords@?1??insort_left@@9@9 DQ FLAT:??_C@_01MCMALHOG@a?$AA@ ; `insort_left'::`2'::keywords
	DQ	FLAT:??_C@_01FJMABOPO@x?$AA@
	DQ	FLAT:??_C@_02KDBGGDMB@lo?$AA@
	DQ	FLAT:??_C@_02PCEFGMJL@hi?$AA@
	DQ	0000000000000000H
insort_left_doc DB 'insort_left(a, x[, lo[, hi]])', 0aH, 0aH, 'Insert ite'
	DB	'm x in list a, and keep it sorted assuming a is sorted.', 0aH
	DB	0aH, 'If x is already in a, insert it to the left of the leftm'
	DB	'ost x.', 0aH, 0aH, 'Optional args lo (default 0) and hi (defa'
	DB	'ult len(a)) bound the', 0aH, 'slice of a to be searched.', 0aH
	DB	00H
	ORG $+3
bisect_doc DB	'Alias for bisect_right().', 0aH, 00H
	ORG $+5
insort_doc DB	'Alias for insort_right().', 0aH, 00H
	ORG $+5
bisect_methods DQ FLAT:??_C@_0N@JKBGJAEE@bisect_right?$AA@
	DQ	FLAT:bisect_right
	DD	03H
	ORG $+4
	DQ	FLAT:bisect_right_doc
	DQ	FLAT:??_C@_06OCAJHHHK@bisect?$AA@
	DQ	FLAT:bisect_right
	DD	03H
	ORG $+4
	DQ	FLAT:bisect_doc
	DQ	FLAT:??_C@_0N@KFNOAAJD@insort_right?$AA@
	DQ	FLAT:insort_right
	DD	03H
	ORG $+4
	DQ	FLAT:insort_right_doc
	DQ	FLAT:??_C@_06IPFCDKBL@insort?$AA@
	DQ	FLAT:insort_right
	DD	03H
	ORG $+4
	DQ	FLAT:insort_doc
	DQ	FLAT:??_C@_0M@IMPIOGJF@bisect_left?$AA@
	DQ	FLAT:bisect_left
	DD	03H
	ORG $+4
	DQ	FLAT:bisect_left_doc
	DQ	FLAT:??_C@_0M@PBGOOMDD@insort_left?$AA@
	DQ	FLAT:insort_left
	DD	03H
	ORG $+4
	DQ	FLAT:insort_left_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
module_doc DB	'Bisection algorithms.', 0aH, 0aH, 'This module provides '
	DB	'support for maintaining a list in sorted order without', 0aH, 'h'
	DB	'aving to sort the list after each insertion. For long lists o'
	DB	'f items with', 0aH, 'expensive comparison operations, this ca'
	DB	'n be an improvement over the more', 0aH, 'common approach.', 0aH
	DB	00H
	ORG $+6
_bisectmodule DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_07JGEBJGAH@_bisect?$AA@
	DQ	FLAT:module_doc
	DQ	ffffffffffffffffH
	DQ	FLAT:bisect_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
;	COMDAT ??_C@_02PCEFGMJL@hi?$AA@
CONST	SEGMENT
??_C@_02PCEFGMJL@hi?$AA@ DB 'hi', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KDBGGDMB@lo?$AA@
CONST	SEGMENT
??_C@_02KDBGGDMB@lo?$AA@ DB 'lo', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01FJMABOPO@x?$AA@
CONST	SEGMENT
??_C@_01FJMABOPO@x?$AA@ DB 'x', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01MCMALHOG@a?$AA@
CONST	SEGMENT
??_C@_01MCMALHOG@a?$AA@ DB 'a', 00H			; `string'
CONST	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@EJLDOAAC@lo?5must?5be?5non?9negative?$AA@ ; `string'
EXTRN	PyObject_RichCompareBool:PROC
EXTRN	PySequence_GetItem:PROC
EXTRN	PySequence_Size:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_ValueError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$internal_bisect_right DD imagerel internal_bisect_right
	DD	imagerel internal_bisect_right+88
	DD	imagerel $unwind$internal_bisect_right
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$internal_bisect_right DD imagerel internal_bisect_right+88
	DD	imagerel internal_bisect_right+318
	DD	imagerel $chain$2$internal_bisect_right
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$internal_bisect_right DD imagerel internal_bisect_right+318
	DD	imagerel internal_bisect_right+324
	DD	imagerel $chain$4$internal_bisect_right
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$internal_bisect_right DD 060021H
	DD	0cc400H
	DD	0b6400H
	DD	0a3400H
	DD	imagerel internal_bisect_right
	DD	imagerel internal_bisect_right+88
	DD	imagerel $unwind$internal_bisect_right
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$internal_bisect_right DD 060f21H
	DD	0cc40fH
	DD	0b640aH
	DD	0a3405H
	DD	imagerel internal_bisect_right
	DD	imagerel internal_bisect_right+88
	DD	imagerel $unwind$internal_bisect_right
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$internal_bisect_right DD 060e01H
	DD	0d540eH
	DD	0e00a520eH
	DD	07006d008H
xdata	ENDS
;	COMDAT ??_C@_0BI@EJLDOAAC@lo?5must?5be?5non?9negative?$AA@
CONST	SEGMENT
??_C@_0BI@EJLDOAAC@lo?5must?5be?5non?9negative?$AA@ DB 'lo must be non-ne'
	DB	'gative', 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_bisectmodule.c
CONST	ENDS
;	COMDAT internal_bisect_right
_TEXT	SEGMENT
list$ = 80
item$ = 88
lo$ = 96
hi$ = 104
internal_bisect_right PROC				; COMDAT

; 11   : {

  00000	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  00005	57		 push	 rdi
  00006	41 55		 push	 r13
  00008	41 56		 push	 r14
  0000a	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000e	49 8b f9	 mov	 rdi, r9
  00011	49 8b e8	 mov	 rbp, r8
  00014	4c 8b f2	 mov	 r14, rdx
  00017	4c 8b e9	 mov	 r13, rcx

; 12   :     PyObject *litem;
; 13   :     Py_ssize_t mid, res;
; 14   : 
; 15   :     if (lo < 0) {

  0001a	4d 85 c0	 test	 r8, r8
  0001d	79 26		 jns	 SHORT $LN9@internal_b

; 16   :         PyErr_SetString(PyExc_ValueError, "lo must be non-negative");

  0001f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@EJLDOAAC@lo?5must?5be?5non?9negative?$AA@
  0002d	e8 00 00 00 00	 call	 PyErr_SetString
$LN29@internal_b:

; 17   :         return -1;

  00032	48 83 c8 ff	 or	 rax, -1

; 42   : }

  00036	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  0003b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0003f	41 5e		 pop	 r14
  00041	41 5d		 pop	 r13
  00043	5f		 pop	 rdi
  00044	c3		 ret	 0
$LN9@internal_b:

; 18   :     }
; 19   :     if (hi == -1) {

  00045	49 83 f9 ff	 cmp	 r9, -1
  00049	75 0d		 jne	 SHORT $LN23@internal_b

; 20   :         hi = PySequence_Size(list);

  0004b	e8 00 00 00 00	 call	 PySequence_Size
  00050	48 8b f8	 mov	 rdi, rax

; 21   :         if (hi < 0)

  00053	48 85 c0	 test	 rax, rax

; 22   :             return -1;

  00056	78 da		 js	 SHORT $LN29@internal_b
$LN23@internal_b:
  00058	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  0005d	48 89 74 24 58	 mov	 QWORD PTR [rsp+88], rsi
  00062	4c 89 64 24 60	 mov	 QWORD PTR [rsp+96], r12

; 23   :     }
; 24   :     while (lo < hi) {

  00067	48 3b ef	 cmp	 rbp, rdi
  0006a	0f 8d ad 00 00
	00		 jge	 $LN5@internal_b
$LL6@internal_b:

; 25   :         /* The (size_t)cast ensures that the addition and subsequent division
; 26   :            are performed as unsigned operations, avoiding difficulties from
; 27   :            signed overflow.  (See issue 13496.) */
; 28   :         mid = ((size_t)lo + hi) / 2;

  00070	48 8d 34 2f	 lea	 rsi, QWORD PTR [rdi+rbp]

; 29   :         litem = PySequence_GetItem(list, mid);

  00074	49 8b cd	 mov	 rcx, r13
  00077	48 d1 ee	 shr	 rsi, 1
  0007a	48 8b d6	 mov	 rdx, rsi
  0007d	e8 00 00 00 00	 call	 PySequence_GetItem
  00082	48 8b d8	 mov	 rbx, rax

; 30   :         if (litem == NULL)

  00085	48 85 c0	 test	 rax, rax
  00088	0f 84 b0 00 00
	00		 je	 $LN24@internal_b

; 32   :         res = PyObject_RichCompareBool(item, litem, Py_LT);

  0008e	45 33 c0	 xor	 r8d, r8d
  00091	48 8b d0	 mov	 rdx, rax
  00094	49 8b ce	 mov	 rcx, r14
  00097	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  0009c	4c 63 e0	 movsxd	 r12, eax

; 33   :         Py_DECREF(litem);

  0009f	e8 00 00 00 00	 call	 _Py_PXCTX
  000a4	85 c0		 test	 eax, eax
  000a6	75 5c		 jne	 SHORT $LN22@internal_b
  000a8	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000ac	a8 20		 test	 al, 32			; 00000020H
  000ae	75 4c		 jne	 SHORT $LN16@internal_b
  000b0	84 c0		 test	 al, al
  000b2	78 48		 js	 SHORT $LN16@internal_b
  000b4	a8 02		 test	 al, 2
  000b6	75 4c		 jne	 SHORT $LN22@internal_b
  000b8	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000bc	75 46		 jne	 SHORT $LN22@internal_b
  000be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000cc	4c 8b cb	 mov	 r9, rbx
  000cf	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000d5	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000dd	e8 00 00 00 00	 call	 _PyParallel_Guard
  000e2	48 8b cb	 mov	 rcx, rbx
  000e5	85 c0		 test	 eax, eax
  000e7	74 07		 je	 SHORT $LN21@internal_b
  000e9	e8 00 00 00 00	 call	 _Px_Dealloc
  000ee	eb 14		 jmp	 SHORT $LN22@internal_b
$LN21@internal_b:
  000f0	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000f4	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000fa	eb 08		 jmp	 SHORT $LN22@internal_b
$LN16@internal_b:
  000fc	48 8b cb	 mov	 rcx, rbx
  000ff	e8 00 00 00 00	 call	 Px_DecRef
$LN22@internal_b:

; 34   :         if (res < 0)

  00104	4d 85 e4	 test	 r12, r12
  00107	78 35		 js	 SHORT $LN24@internal_b

; 35   :             return -1;
; 36   :         if (res)

  00109	74 05		 je	 SHORT $LN2@internal_b

; 37   :             hi = mid;

  0010b	48 8b fe	 mov	 rdi, rsi

; 38   :         else

  0010e	eb 04		 jmp	 SHORT $LN1@internal_b
$LN2@internal_b:

; 39   :             lo = mid + 1;

  00110	48 8d 6e 01	 lea	 rbp, QWORD PTR [rsi+1]
$LN1@internal_b:

; 23   :     }
; 24   :     while (lo < hi) {

  00114	48 3b ef	 cmp	 rbp, rdi
  00117	0f 8c 53 ff ff
	ff		 jl	 $LL6@internal_b
$LN5@internal_b:

; 40   :     }
; 41   :     return lo;

  0011d	48 8b c5	 mov	 rax, rbp
$LN28@internal_b:
  00120	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  00125	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0012a	4c 8b 64 24 60	 mov	 r12, QWORD PTR [rsp+96]

; 42   : }

  0012f	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  00134	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00138	41 5e		 pop	 r14
  0013a	41 5d		 pop	 r13
  0013c	5f		 pop	 rdi
  0013d	c3		 ret	 0
$LN24@internal_b:

; 31   :             return -1;

  0013e	48 83 c8 ff	 or	 rax, -1
  00142	eb dc		 jmp	 SHORT $LN28@internal_b
internal_bisect_right ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@DDMMKPPA@OO?$HMnn?3bisect_right?$AA@	; `string'
EXTRN	PyLong_FromSsize_t:PROC
EXTRN	_PyArg_ParseTupleAndKeywords_SizeT:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$bisect_right DD imagerel bisect_right
	DD	imagerel bisect_right+143
	DD	imagerel $unwind$bisect_right
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bisect_right DD 010701H
	DD	0c207H
xdata	ENDS
;	COMDAT ??_C@_0BD@DDMMKPPA@OO?$HMnn?3bisect_right?$AA@
CONST	SEGMENT
??_C@_0BD@DDMMKPPA@OO?$HMnn?3bisect_right?$AA@ DB 'OO|nn:bisect_right', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT bisect_right
_TEXT	SEGMENT
lo$ = 64
item$ = 72
list$ = 80
self$ = 112
args$ = 120
kw$ = 128
hi$ = 136
bisect_right PROC					; COMDAT

; 46   : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 47   :     PyObject *list, *item;
; 48   :     Py_ssize_t lo = 0;
; 49   :     Py_ssize_t hi = -1;
; 50   :     Py_ssize_t index;
; 51   :     static char *keywords[] = {"a", "x", "lo", "hi", NULL};
; 52   : 
; 53   :     if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|nn:bisect_right",
; 54   :         keywords, &list, &item, &lo, &hi))

  00007	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  0000b	49 8b c0	 mov	 rax, r8
  0000e	4c 8b d2	 mov	 r10, rdx
  00011	49 89 4b d0	 mov	 QWORD PTR [r11-48], rcx
  00015	49 8d 4b d8	 lea	 rcx, QWORD PTR [r11-40]
  00019	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?keywords@?1??bisect_right@@9@9
  00020	49 89 4b c8	 mov	 QWORD PTR [r11-56], rcx
  00024	49 8d 4b e0	 lea	 rcx, QWORD PTR [r11-32]
  00028	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@DDMMKPPA@OO?$HMnn?3bisect_right?$AA@
  0002f	49 89 4b c0	 mov	 QWORD PTR [r11-64], rcx
  00033	49 8d 4b e8	 lea	 rcx, QWORD PTR [r11-24]
  00037	48 8b d0	 mov	 rdx, rax
  0003a	49 89 4b b8	 mov	 QWORD PTR [r11-72], rcx
  0003e	49 8b ca	 mov	 rcx, r10
  00041	49 c7 43 d8 00
	00 00 00	 mov	 QWORD PTR [r11-40], 0
  00049	49 c7 43 20 ff
	ff ff ff	 mov	 QWORD PTR [r11+32], -1
  00051	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  00056	85 c0		 test	 eax, eax
  00058	75 07		 jne	 SHORT $LN2@bisect_rig
$LN5@bisect_rig:

; 55   :         return NULL;

  0005a	33 c0		 xor	 eax, eax

; 60   : }

  0005c	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00060	c3		 ret	 0
$LN2@bisect_rig:

; 56   :     index = internal_bisect_right(list, item, lo, hi);

  00061	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR hi$[rsp]
  00069	4c 8b 44 24 40	 mov	 r8, QWORD PTR lo$[rsp]
  0006e	48 8b 54 24 48	 mov	 rdx, QWORD PTR item$[rsp]
  00073	48 8b 4c 24 50	 mov	 rcx, QWORD PTR list$[rsp]
  00078	e8 00 00 00 00	 call	 internal_bisect_right

; 57   :     if (index < 0)

  0007d	48 85 c0	 test	 rax, rax

; 58   :         return NULL;

  00080	78 d8		 js	 SHORT $LN5@bisect_rig

; 59   :     return PyLong_FromSsize_t(index);

  00082	48 8b c8	 mov	 rcx, rax
  00085	e8 00 00 00 00	 call	 PyLong_FromSsize_t

; 60   : }

  0008a	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0008e	c3		 ret	 0
bisect_right ENDP
_TEXT	ENDS
PUBLIC	??_C@_02DFBGJDAN@nO?$AA@			; `string'
PUBLIC	??_C@_0BD@MAEDPCH@OO?$HMnn?3insort_right?$AA@	; `string'
EXTRN	_Py_NoneStruct:BYTE
EXTRN	_PyObject_CallMethodId_SizeT:PROC
EXTRN	PyList_Insert:PROC
EXTRN	PyList_Type:BYTE
EXTRN	_tls_index:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$insort_right DD imagerel insort_right
	DD	imagerel insort_right+320
	DD	imagerel $unwind$insort_right
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$insort_right DD 010701H
	DD	0c207H
xdata	ENDS
;	COMDAT ??_C@_02DFBGJDAN@nO?$AA@
CONST	SEGMENT
??_C@_02DFBGJDAN@nO?$AA@ DB 'nO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MAEDPCH@OO?$HMnn?3insort_right?$AA@
CONST	SEGMENT
??_C@_0BD@MAEDPCH@OO?$HMnn?3insort_right?$AA@ DB 'OO|nn:insort_right', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_bisectmodule.c
CONST	ENDS
;	COMDAT insort_right
_TEXT	SEGMENT
hi$ = 64
lo$ = 72
list$ = 80
self$ = 112
args$ = 120
kw$ = 128
item$ = 136
insort_right PROC					; COMDAT

; 76   : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 77   :     PyObject *list, *item, *result;
; 78   :     Py_ssize_t lo = 0;
; 79   :     Py_ssize_t hi = -1;
; 80   :     Py_ssize_t index;
; 81   :     static char *keywords[] = {"a", "x", "lo", "hi", NULL};
; 82   : 
; 83   :     if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|nn:insort_right",
; 84   :         keywords, &list, &item, &lo, &hi))

  00007	49 8d 4b d8	 lea	 rcx, QWORD PTR [r11-40]
  0000b	49 8b c0	 mov	 rax, r8
  0000e	4c 8b d2	 mov	 r10, rdx
  00011	49 89 4b d0	 mov	 QWORD PTR [r11-48], rcx
  00015	49 8d 4b e0	 lea	 rcx, QWORD PTR [r11-32]
  00019	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?keywords@?1??insort_right@@9@9
  00020	49 89 4b c8	 mov	 QWORD PTR [r11-56], rcx
  00024	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  00028	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@MAEDPCH@OO?$HMnn?3insort_right?$AA@
  0002f	49 89 4b c0	 mov	 QWORD PTR [r11-64], rcx
  00033	49 8d 4b e8	 lea	 rcx, QWORD PTR [r11-24]
  00037	48 8b d0	 mov	 rdx, rax
  0003a	49 89 4b b8	 mov	 QWORD PTR [r11-72], rcx
  0003e	49 8b ca	 mov	 rcx, r10
  00041	49 c7 43 e0 00
	00 00 00	 mov	 QWORD PTR [r11-32], 0
  00049	49 c7 43 d8 ff
	ff ff ff	 mov	 QWORD PTR [r11-40], -1
  00051	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  00056	85 c0		 test	 eax, eax

; 85   :         return NULL;

  00058	74 4d		 je	 SHORT $LN13@insort_rig

; 86   :     index = internal_bisect_right(list, item, lo, hi);

  0005a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR hi$[rsp]
  0005f	4c 8b 44 24 48	 mov	 r8, QWORD PTR lo$[rsp]
  00064	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR item$[rsp]
  0006c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR list$[rsp]
  00071	e8 00 00 00 00	 call	 internal_bisect_right
  00076	4c 8b c8	 mov	 r9, rax

; 87   :     if (index < 0)

  00079	48 85 c0	 test	 rax, rax

; 88   :         return NULL;

  0007c	78 29		 js	 SHORT $LN13@insort_rig

; 89   :     if (PyList_CheckExact(list)) {

  0007e	4c 8b 54 24 50	 mov	 r10, QWORD PTR list$[rsp]
  00083	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyList_Type
  0008a	49 39 42 58	 cmp	 QWORD PTR [r10+88], rax
  0008e	75 1e		 jne	 SHORT $LN4@insort_rig

; 90   :         if (PyList_Insert(list, index, item) < 0)

  00090	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR item$[rsp]
  00098	49 8b d1	 mov	 rdx, r9
  0009b	49 8b ca	 mov	 rcx, r10
  0009e	e8 00 00 00 00	 call	 PyList_Insert
  000a3	85 c0		 test	 eax, eax
  000a5	79 48		 jns	 SHORT $LN2@insort_rig
$LN13@insort_rig:

; 91   :             return NULL;

  000a7	33 c0		 xor	 eax, eax

; 102  : }

  000a9	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000ad	c3		 ret	 0
$LN4@insort_rig:

; 92   :     } else {
; 93   :         _Py_IDENTIFIER(insert);
; 94   : 
; 95   :         result = _PyObject_CallMethodId(list, &PyId_insert, "nO", index, item);

  000ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000b4	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  000bd	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_insert@?3??insort_right@@9@9
  000c2	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  000c6	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR item$[rsp]
  000ce	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02DFBGJDAN@nO?$AA@
  000d5	49 8b ca	 mov	 rcx, r10
  000d8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000dd	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT

; 96   :         if (result == NULL)

  000e2	48 85 c0	 test	 rax, rax

; 97   :             return NULL;

  000e5	74 c0		 je	 SHORT $LN13@insort_rig

; 98   :         Py_DECREF(result);

  000e7	48 8b c8	 mov	 rcx, rax
  000ea	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@insort_rig:

; 99   :     }
; 100  : 
; 101  :     Py_RETURN_NONE;

  000ef	e8 00 00 00 00	 call	 _Py_PXCTX
  000f4	85 c0		 test	 eax, eax
  000f6	75 3c		 jne	 SHORT $LN10@insort_rig
  000f8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  000ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00106	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0010d	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00113	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0011b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00120	85 c0		 test	 eax, eax
  00122	75 09		 jne	 SHORT $LN9@insort_rig
  00124	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0012b	74 07		 je	 SHORT $LN10@insort_rig
$LN9@insort_rig:
  0012d	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN10@insort_rig:
  00134	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 102  : }

  0013b	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0013f	c3		 ret	 0
insort_right ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$internal_bisect_left DD imagerel internal_bisect_left
	DD	imagerel internal_bisect_left+88
	DD	imagerel $unwind$internal_bisect_left
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$internal_bisect_left DD imagerel internal_bisect_left+88
	DD	imagerel internal_bisect_left+318
	DD	imagerel $chain$2$internal_bisect_left
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$internal_bisect_left DD imagerel internal_bisect_left+318
	DD	imagerel internal_bisect_left+324
	DD	imagerel $chain$4$internal_bisect_left
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$internal_bisect_left DD 060021H
	DD	0cc400H
	DD	0b6400H
	DD	0a3400H
	DD	imagerel internal_bisect_left
	DD	imagerel internal_bisect_left+88
	DD	imagerel $unwind$internal_bisect_left
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$internal_bisect_left DD 060f21H
	DD	0cc40fH
	DD	0b640aH
	DD	0a3405H
	DD	imagerel internal_bisect_left
	DD	imagerel internal_bisect_left+88
	DD	imagerel $unwind$internal_bisect_left
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$internal_bisect_left DD 060e01H
	DD	0d540eH
	DD	0e00a520eH
	DD	07006d008H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_bisectmodule.c
xdata	ENDS
;	COMDAT internal_bisect_left
_TEXT	SEGMENT
list$ = 80
item$ = 88
lo$ = 96
hi$ = 104
internal_bisect_left PROC				; COMDAT

; 116  : {

  00000	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  00005	57		 push	 rdi
  00006	41 55		 push	 r13
  00008	41 56		 push	 r14
  0000a	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000e	49 8b f9	 mov	 rdi, r9
  00011	49 8b e8	 mov	 rbp, r8
  00014	4c 8b f2	 mov	 r14, rdx
  00017	4c 8b e9	 mov	 r13, rcx

; 117  :     PyObject *litem;
; 118  :     Py_ssize_t mid, res;
; 119  : 
; 120  :     if (lo < 0) {

  0001a	4d 85 c0	 test	 r8, r8
  0001d	79 26		 jns	 SHORT $LN9@internal_b@2

; 121  :         PyErr_SetString(PyExc_ValueError, "lo must be non-negative");

  0001f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@EJLDOAAC@lo?5must?5be?5non?9negative?$AA@
  0002d	e8 00 00 00 00	 call	 PyErr_SetString
$LN29@internal_b@2:

; 122  :         return -1;

  00032	48 83 c8 ff	 or	 rax, -1

; 147  : }

  00036	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  0003b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0003f	41 5e		 pop	 r14
  00041	41 5d		 pop	 r13
  00043	5f		 pop	 rdi
  00044	c3		 ret	 0
$LN9@internal_b@2:

; 123  :     }
; 124  :     if (hi == -1) {

  00045	49 83 f9 ff	 cmp	 r9, -1
  00049	75 0d		 jne	 SHORT $LN23@internal_b@2

; 125  :         hi = PySequence_Size(list);

  0004b	e8 00 00 00 00	 call	 PySequence_Size
  00050	48 8b f8	 mov	 rdi, rax

; 126  :         if (hi < 0)

  00053	48 85 c0	 test	 rax, rax

; 127  :             return -1;

  00056	78 da		 js	 SHORT $LN29@internal_b@2
$LN23@internal_b@2:
  00058	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  0005d	48 89 74 24 58	 mov	 QWORD PTR [rsp+88], rsi
  00062	4c 89 64 24 60	 mov	 QWORD PTR [rsp+96], r12

; 128  :     }
; 129  :     while (lo < hi) {

  00067	48 3b ef	 cmp	 rbp, rdi
  0006a	0f 8d ad 00 00
	00		 jge	 $LN5@internal_b@2
$LL6@internal_b@2:

; 130  :         /* The (size_t)cast ensures that the addition and subsequent division
; 131  :            are performed as unsigned operations, avoiding difficulties from
; 132  :            signed overflow.  (See issue 13496.) */
; 133  :         mid = ((size_t)lo + hi) / 2;

  00070	48 8d 34 2f	 lea	 rsi, QWORD PTR [rdi+rbp]

; 134  :         litem = PySequence_GetItem(list, mid);

  00074	49 8b cd	 mov	 rcx, r13
  00077	48 d1 ee	 shr	 rsi, 1
  0007a	48 8b d6	 mov	 rdx, rsi
  0007d	e8 00 00 00 00	 call	 PySequence_GetItem
  00082	48 8b d8	 mov	 rbx, rax

; 135  :         if (litem == NULL)

  00085	48 85 c0	 test	 rax, rax
  00088	0f 84 b0 00 00
	00		 je	 $LN24@internal_b@2

; 137  :         res = PyObject_RichCompareBool(litem, item, Py_LT);

  0008e	45 33 c0	 xor	 r8d, r8d
  00091	49 8b d6	 mov	 rdx, r14
  00094	48 8b c8	 mov	 rcx, rax
  00097	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  0009c	4c 63 e0	 movsxd	 r12, eax

; 138  :         Py_DECREF(litem);

  0009f	e8 00 00 00 00	 call	 _Py_PXCTX
  000a4	85 c0		 test	 eax, eax
  000a6	75 5c		 jne	 SHORT $LN22@internal_b@2
  000a8	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000ac	a8 20		 test	 al, 32			; 00000020H
  000ae	75 4c		 jne	 SHORT $LN16@internal_b@2
  000b0	84 c0		 test	 al, al
  000b2	78 48		 js	 SHORT $LN16@internal_b@2
  000b4	a8 02		 test	 al, 2
  000b6	75 4c		 jne	 SHORT $LN22@internal_b@2
  000b8	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000bc	75 46		 jne	 SHORT $LN22@internal_b@2
  000be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000cc	4c 8b cb	 mov	 r9, rbx
  000cf	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000d5	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000dd	e8 00 00 00 00	 call	 _PyParallel_Guard
  000e2	48 8b cb	 mov	 rcx, rbx
  000e5	85 c0		 test	 eax, eax
  000e7	74 07		 je	 SHORT $LN21@internal_b@2
  000e9	e8 00 00 00 00	 call	 _Px_Dealloc
  000ee	eb 14		 jmp	 SHORT $LN22@internal_b@2
$LN21@internal_b@2:
  000f0	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000f4	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000fa	eb 08		 jmp	 SHORT $LN22@internal_b@2
$LN16@internal_b@2:
  000fc	48 8b cb	 mov	 rcx, rbx
  000ff	e8 00 00 00 00	 call	 Px_DecRef
$LN22@internal_b@2:

; 139  :         if (res < 0)

  00104	4d 85 e4	 test	 r12, r12
  00107	78 35		 js	 SHORT $LN24@internal_b@2

; 140  :             return -1;
; 141  :         if (res)

  00109	74 06		 je	 SHORT $LN2@internal_b@2

; 142  :             lo = mid + 1;

  0010b	48 8d 6e 01	 lea	 rbp, QWORD PTR [rsi+1]

; 143  :         else

  0010f	eb 03		 jmp	 SHORT $LN1@internal_b@2
$LN2@internal_b@2:

; 144  :             hi = mid;

  00111	48 8b fe	 mov	 rdi, rsi
$LN1@internal_b@2:

; 128  :     }
; 129  :     while (lo < hi) {

  00114	48 3b ef	 cmp	 rbp, rdi
  00117	0f 8c 53 ff ff
	ff		 jl	 $LL6@internal_b@2
$LN5@internal_b@2:

; 145  :     }
; 146  :     return lo;

  0011d	48 8b c5	 mov	 rax, rbp
$LN28@internal_b@2:
  00120	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  00125	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0012a	4c 8b 64 24 60	 mov	 r12, QWORD PTR [rsp+96]

; 147  : }

  0012f	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  00134	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00138	41 5e		 pop	 r14
  0013a	41 5d		 pop	 r13
  0013c	5f		 pop	 rdi
  0013d	c3		 ret	 0
$LN24@internal_b@2:

; 136  :             return -1;

  0013e	48 83 c8 ff	 or	 rax, -1
  00142	eb dc		 jmp	 SHORT $LN28@internal_b@2
internal_bisect_left ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@OKGJABHJ@OO?$HMnn?3bisect_left?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$bisect_left DD imagerel bisect_left
	DD	imagerel bisect_left+143
	DD	imagerel $unwind$bisect_left
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bisect_left DD 010701H
	DD	0c207H
xdata	ENDS
;	COMDAT ??_C@_0BC@OKGJABHJ@OO?$HMnn?3bisect_left?$AA@
CONST	SEGMENT
??_C@_0BC@OKGJABHJ@OO?$HMnn?3bisect_left?$AA@ DB 'OO|nn:bisect_left', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT bisect_left
_TEXT	SEGMENT
lo$ = 64
item$ = 72
list$ = 80
self$ = 112
args$ = 120
kw$ = 128
hi$ = 136
bisect_left PROC					; COMDAT

; 151  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 152  :     PyObject *list, *item;
; 153  :     Py_ssize_t lo = 0;
; 154  :     Py_ssize_t hi = -1;
; 155  :     Py_ssize_t index;
; 156  :     static char *keywords[] = {"a", "x", "lo", "hi", NULL};
; 157  : 
; 158  :     if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|nn:bisect_left",
; 159  :         keywords, &list, &item, &lo, &hi))

  00007	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  0000b	49 8b c0	 mov	 rax, r8
  0000e	4c 8b d2	 mov	 r10, rdx
  00011	49 89 4b d0	 mov	 QWORD PTR [r11-48], rcx
  00015	49 8d 4b d8	 lea	 rcx, QWORD PTR [r11-40]
  00019	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?keywords@?1??bisect_left@@9@9
  00020	49 89 4b c8	 mov	 QWORD PTR [r11-56], rcx
  00024	49 8d 4b e0	 lea	 rcx, QWORD PTR [r11-32]
  00028	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BC@OKGJABHJ@OO?$HMnn?3bisect_left?$AA@
  0002f	49 89 4b c0	 mov	 QWORD PTR [r11-64], rcx
  00033	49 8d 4b e8	 lea	 rcx, QWORD PTR [r11-24]
  00037	48 8b d0	 mov	 rdx, rax
  0003a	49 89 4b b8	 mov	 QWORD PTR [r11-72], rcx
  0003e	49 8b ca	 mov	 rcx, r10
  00041	49 c7 43 d8 00
	00 00 00	 mov	 QWORD PTR [r11-40], 0
  00049	49 c7 43 20 ff
	ff ff ff	 mov	 QWORD PTR [r11+32], -1
  00051	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  00056	85 c0		 test	 eax, eax
  00058	75 07		 jne	 SHORT $LN2@bisect_lef
$LN5@bisect_lef:

; 160  :         return NULL;

  0005a	33 c0		 xor	 eax, eax

; 165  : }

  0005c	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00060	c3		 ret	 0
$LN2@bisect_lef:

; 161  :     index = internal_bisect_left(list, item, lo, hi);

  00061	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR hi$[rsp]
  00069	4c 8b 44 24 40	 mov	 r8, QWORD PTR lo$[rsp]
  0006e	48 8b 54 24 48	 mov	 rdx, QWORD PTR item$[rsp]
  00073	48 8b 4c 24 50	 mov	 rcx, QWORD PTR list$[rsp]
  00078	e8 00 00 00 00	 call	 internal_bisect_left

; 162  :     if (index < 0)

  0007d	48 85 c0	 test	 rax, rax

; 163  :         return NULL;

  00080	78 d8		 js	 SHORT $LN5@bisect_lef

; 164  :     return PyLong_FromSsize_t(index);

  00082	48 8b c8	 mov	 rcx, rax
  00085	e8 00 00 00 00	 call	 PyLong_FromSsize_t

; 165  : }

  0008a	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0008e	c3		 ret	 0
bisect_left ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@JHPPALNP@OO?$HMnn?3insort_left?$AA@	; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$insort_left DD imagerel insort_left
	DD	imagerel insort_left+320
	DD	imagerel $unwind$insort_left
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$insort_left DD 010701H
	DD	0c207H
xdata	ENDS
;	COMDAT ??_C@_0BC@JHPPALNP@OO?$HMnn?3insort_left?$AA@
CONST	SEGMENT
??_C@_0BC@JHPPALNP@OO?$HMnn?3insort_left?$AA@ DB 'OO|nn:insort_left', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_bisectmodule.c
CONST	ENDS
;	COMDAT insort_left
_TEXT	SEGMENT
hi$ = 64
lo$ = 72
list$ = 80
self$ = 112
args$ = 120
kw$ = 128
item$ = 136
insort_left PROC					; COMDAT

; 181  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 182  :     PyObject *list, *item, *result;
; 183  :     Py_ssize_t lo = 0;
; 184  :     Py_ssize_t hi = -1;
; 185  :     Py_ssize_t index;
; 186  :     static char *keywords[] = {"a", "x", "lo", "hi", NULL};
; 187  : 
; 188  :     if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|nn:insort_left",
; 189  :         keywords, &list, &item, &lo, &hi))

  00007	49 8d 4b d8	 lea	 rcx, QWORD PTR [r11-40]
  0000b	49 8b c0	 mov	 rax, r8
  0000e	4c 8b d2	 mov	 r10, rdx
  00011	49 89 4b d0	 mov	 QWORD PTR [r11-48], rcx
  00015	49 8d 4b e0	 lea	 rcx, QWORD PTR [r11-32]
  00019	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?keywords@?1??insort_left@@9@9
  00020	49 89 4b c8	 mov	 QWORD PTR [r11-56], rcx
  00024	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  00028	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BC@JHPPALNP@OO?$HMnn?3insort_left?$AA@
  0002f	49 89 4b c0	 mov	 QWORD PTR [r11-64], rcx
  00033	49 8d 4b e8	 lea	 rcx, QWORD PTR [r11-24]
  00037	48 8b d0	 mov	 rdx, rax
  0003a	49 89 4b b8	 mov	 QWORD PTR [r11-72], rcx
  0003e	49 8b ca	 mov	 rcx, r10
  00041	49 c7 43 e0 00
	00 00 00	 mov	 QWORD PTR [r11-32], 0
  00049	49 c7 43 d8 ff
	ff ff ff	 mov	 QWORD PTR [r11-40], -1
  00051	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  00056	85 c0		 test	 eax, eax

; 190  :         return NULL;

  00058	74 4d		 je	 SHORT $LN13@insort_lef

; 191  :     index = internal_bisect_left(list, item, lo, hi);

  0005a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR hi$[rsp]
  0005f	4c 8b 44 24 48	 mov	 r8, QWORD PTR lo$[rsp]
  00064	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR item$[rsp]
  0006c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR list$[rsp]
  00071	e8 00 00 00 00	 call	 internal_bisect_left
  00076	4c 8b c8	 mov	 r9, rax

; 192  :     if (index < 0)

  00079	48 85 c0	 test	 rax, rax

; 193  :         return NULL;

  0007c	78 29		 js	 SHORT $LN13@insort_lef

; 194  :     if (PyList_CheckExact(list)) {

  0007e	4c 8b 54 24 50	 mov	 r10, QWORD PTR list$[rsp]
  00083	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyList_Type
  0008a	49 39 42 58	 cmp	 QWORD PTR [r10+88], rax
  0008e	75 1e		 jne	 SHORT $LN4@insort_lef

; 195  :         if (PyList_Insert(list, index, item) < 0)

  00090	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR item$[rsp]
  00098	49 8b d1	 mov	 rdx, r9
  0009b	49 8b ca	 mov	 rcx, r10
  0009e	e8 00 00 00 00	 call	 PyList_Insert
  000a3	85 c0		 test	 eax, eax
  000a5	79 48		 jns	 SHORT $LN2@insort_lef
$LN13@insort_lef:

; 196  :             return NULL;

  000a7	33 c0		 xor	 eax, eax

; 206  : }

  000a9	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000ad	c3		 ret	 0
$LN4@insort_lef:

; 197  :     } else {
; 198  :         _Py_IDENTIFIER(insert);
; 199  :         result = _PyObject_CallMethodId(list, &PyId_insert, "nO", index, item);

  000ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000b4	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  000bd	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_insert@?3??insort_left@@9@9
  000c2	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  000c6	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR item$[rsp]
  000ce	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02DFBGJDAN@nO?$AA@
  000d5	49 8b ca	 mov	 rcx, r10
  000d8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000dd	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT

; 200  :         if (result == NULL)

  000e2	48 85 c0	 test	 rax, rax

; 201  :             return NULL;

  000e5	74 c0		 je	 SHORT $LN13@insort_lef

; 202  :         Py_DECREF(result);

  000e7	48 8b c8	 mov	 rcx, rax
  000ea	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@insort_lef:

; 203  :     }
; 204  : 
; 205  :     Py_RETURN_NONE;

  000ef	e8 00 00 00 00	 call	 _Py_PXCTX
  000f4	85 c0		 test	 eax, eax
  000f6	75 3c		 jne	 SHORT $LN10@insort_lef
  000f8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  000ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00106	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0010d	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00113	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0011b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00120	85 c0		 test	 eax, eax
  00122	75 09		 jne	 SHORT $LN9@insort_lef
  00124	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0012b	74 07		 je	 SHORT $LN10@insort_lef
$LN9@insort_lef:
  0012d	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN10@insort_lef:
  00134	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 206  : }

  0013b	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0013f	c3		 ret	 0
insort_left ENDP
_TEXT	ENDS
PUBLIC	PyInit__bisect
EXTRN	PyModule_Create2:PROC
; Function compile flags: /Ogtpy
;	COMDAT PyInit__bisect
_TEXT	SEGMENT
PyInit__bisect PROC					; COMDAT

; 261  :     return PyModule_Create(&_bisectmodule);

  00000	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_bisectmodule
  00007	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H

; 262  : }

  0000c	e9 00 00 00 00	 jmp	 PyModule_Create2
PyInit__bisect ENDP
_TEXT	ENDS
END
