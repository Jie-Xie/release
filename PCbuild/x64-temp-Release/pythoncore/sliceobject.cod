; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_05ILHMOJGN@slice?$AA@			; `string'
PUBLIC	??_C@_0L@NNMACJIG@__reduce__?$AA@		; `string'
PUBLIC	??_C@_07OKCKIPNN@indices?$AA@			; `string'
PUBLIC	??_C@_04CNBNFAL@step?$AA@			; `string'
PUBLIC	??_C@_04PEGFANN@stop?$AA@			; `string'
PUBLIC	??_C@_05FAGFPHJG@start?$AA@			; `string'
PUBLIC	??_C@_08CIOHNHGK@ellipsis?$AA@			; `string'
PUBLIC	PyEllipsis_Type
PUBLIC	_Py_EllipsisObject
PUBLIC	PySlice_Type
EXTRN	PyObject_HashNotImplemented:PROC
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
_BSS	SEGMENT
slice_cache DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_05ILHMOJGN@slice?$AA@
CONST	SEGMENT
??_C@_05ILHMOJGN@slice?$AA@ DB 'slice', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNMACJIG@__reduce__?$AA@
CONST	SEGMENT
??_C@_0L@NNMACJIG@__reduce__?$AA@ DB '__reduce__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07OKCKIPNN@indices?$AA@
CONST	SEGMENT
??_C@_07OKCKIPNN@indices?$AA@ DB 'indices', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CNBNFAL@step?$AA@
CONST	SEGMENT
??_C@_04CNBNFAL@step?$AA@ DB 'step', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PEGFANN@stop?$AA@
CONST	SEGMENT
??_C@_04PEGFANN@stop?$AA@ DB 'stop', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FAGFPHJG@start?$AA@
CONST	SEGMENT
??_C@_05FAGFPHJG@start?$AA@ DB 'start', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
PyEllipsis_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_08CIOHNHGK@ellipsis?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:ellipsis_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:ellipsis_new
	ORG $+72
_Py_EllipsisObject DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyEllipsis_Type
slice_doc DB	'slice(stop)', 0aH, 'slice(start, stop[, step])', 0aH, 0aH
	DB	'Create a slice object.  This is used for extended slicing (e.'
	DB	'g. a[0:10:2]).', 00H
	ORG $+12
slice_members DQ FLAT:??_C@_05FAGFPHJG@start?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04PEGFANN@stop?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000068H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04CNBNFAL@step?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000070H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
slice_indices_doc DB 'S.indices(len) -> (start, stop, stride)', 0aH, 0aH, 'A'
	DB	'ssuming a sequence of length len, calculate the start and sto'
	DB	'p', 0aH, 'indices, and the stride length of the extended slic'
	DB	'e described by', 0aH, 'S. Out of bounds indices are clipped i'
	DB	'n a manner consistent with the', 0aH, 'handling of normal sli'
	DB	'ces.', 00H
	ORG $+5
reduce_doc DB	'Return state information for pickling.', 00H
	ORG $+9
slice_methods DQ FLAT:??_C@_07OKCKIPNN@indices?$AA@
	DQ	FLAT:slice_indices
	DD	08H
	ORG $+4
	DQ	FLAT:slice_indices_doc
	DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:slice_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PySlice_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_05ILHMOJGN@slice?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:slice_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:slice_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_HashNotImplemented
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	FLAT:slice_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:slice_richcompare
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:slice_methods
	DQ	FLAT:slice_members
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:slice_new
	ORG $+72
_DATA	ENDS
;	COMDAT ??_C@_08CIOHNHGK@ellipsis?$AA@
CONST	SEGMENT
??_C@_08CIOHNHGK@ellipsis?$AA@ DB 'ellipsis', 00H	; `string'
CONST	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@JHHECBPK@EllipsisType?5takes?5no?5arguments?$AA@ ; `string'
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyDict_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$ellipsis_new DD imagerel ellipsis_new
	DD	imagerel ellipsis_new+136
	DD	imagerel $unwind$ellipsis_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ellipsis_new DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0CA@JHHECBPK@EllipsisType?5takes?5no?5arguments?$AA@
CONST	SEGMENT
??_C@_0CA@JHHECBPK@EllipsisType?5takes?5no?5arguments?$AA@ DB 'EllipsisTy'
	DB	'pe takes no arguments', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\sliceobject.c
CONST	ENDS
;	COMDAT ellipsis_new
_TEXT	SEGMENT
type$ = 64
args$ = 72
kwargs$ = 80
ellipsis_new PROC					; COMDAT

; 21   : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 22   :     if (PyTuple_GET_SIZE(args) || (kwargs && PyDict_Size(kwargs))) {

  00004	48 83 7a 60 00	 cmp	 QWORD PTR [rdx+96], 0
  00009	75 63		 jne	 SHORT $LN1@ellipsis_n
  0000b	4d 85 c0	 test	 r8, r8
  0000e	74 0d		 je	 SHORT $LN2@ellipsis_n
  00010	49 8b c8	 mov	 rcx, r8
  00013	e8 00 00 00 00	 call	 PyDict_Size
  00018	48 85 c0	 test	 rax, rax
  0001b	75 51		 jne	 SHORT $LN1@ellipsis_n
$LN2@ellipsis_n:

; 25   :     }
; 26   :     Py_INCREF(Py_Ellipsis);

  0001d	e8 00 00 00 00	 call	 _Py_PXCTX
  00022	85 c0		 test	 eax, eax
  00024	75 3c		 jne	 SHORT $LN6@ellipsis_n
  00026	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_EllipsisObject
  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0003b	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00041	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00049	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004e	85 c0		 test	 eax, eax
  00050	75 09		 jne	 SHORT $LN5@ellipsis_n
  00052	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_EllipsisObject+32, 32 ; 00000020H
  00059	74 07		 je	 SHORT $LN6@ellipsis_n
$LN5@ellipsis_n:
  0005b	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_EllipsisObject+80
$LN6@ellipsis_n:

; 27   :     return Py_Ellipsis;

  00062	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_EllipsisObject

; 28   : }

  00069	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006d	c3		 ret	 0
$LN1@ellipsis_n:

; 23   :         PyErr_SetString(PyExc_TypeError, "EllipsisType takes no arguments");

  0006e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00075	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@JHHECBPK@EllipsisType?5takes?5no?5arguments?$AA@
  0007c	e8 00 00 00 00	 call	 PyErr_SetString

; 24   :         return NULL;

  00081	33 c0		 xor	 eax, eax

; 28   : }

  00083	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00087	c3		 ret	 0
ellipsis_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_08KKBGFFMJ@Ellipsis?$AA@			; `string'
EXTRN	PyUnicode_FromString:PROC
;	COMDAT ??_C@_08KKBGFFMJ@Ellipsis?$AA@
CONST	SEGMENT
??_C@_08KKBGFFMJ@Ellipsis?$AA@ DB 'Ellipsis', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ellipsis_repr
_TEXT	SEGMENT
op$ = 8
ellipsis_repr PROC					; COMDAT

; 33   :     return PyUnicode_FromString("Ellipsis");

  00000	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08KKBGFFMJ@Ellipsis?$AA@

; 34   : }

  00007	e9 00 00 00 00	 jmp	 PyUnicode_FromString
ellipsis_repr ENDP
_TEXT	ENDS
PUBLIC	PySlice_Fini
EXTRN	PyObject_Free:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySlice_Fini DD imagerel $LN5
	DD	imagerel $LN5+52
	DD	imagerel $unwind$PySlice_Fini
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySlice_Fini DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PySlice_Fini
_TEXT	SEGMENT
PySlice_Fini PROC					; COMDAT

; 90   : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 91   :     PySliceObject *obj = slice_cache;

  00006	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR slice_cache

; 92   :     if (Py_PXCTX)

  0000d	e8 00 00 00 00	 call	 _Py_PXCTX
  00012	85 c0		 test	 eax, eax
  00014	75 18		 jne	 SHORT $LN1@PySlice_Fi

; 93   :         return;
; 94   :     if (obj != NULL) {

  00016	48 85 db	 test	 rbx, rbx
  00019	74 13		 je	 SHORT $LN1@PySlice_Fi

; 95   :         slice_cache = NULL;
; 96   :         PyObject_Del(obj);

  0001b	48 8b cb	 mov	 rcx, rbx
  0001e	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR slice_cache, 0
  00029	e8 00 00 00 00	 call	 PyObject_Free
$LN1@PySlice_Fi:

; 97   :     }
; 98   : }

  0002e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00032	5b		 pop	 rbx
  00033	c3		 ret	 0
PySlice_Fini ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@BHGDKCPO@PySlice_New?$AA@		; `string'
PUBLIC	??_C@_0BJ@ILALJPKD@?4?4?2Objects?2sliceobject?4c?$AA@ ; `string'
PUBLIC	PySlice_New
EXTRN	_PyObject_New:PROC
EXTRN	_PxObject_New:PROC
EXTRN	_Py_NoneStruct:BYTE
EXTRN	_Px_NewReference:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PySlice_New DD imagerel $LN26
	DD	imagerel $LN26+113
	DD	imagerel $unwind$PySlice_New
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PySlice_New DD imagerel $LN26+113
	DD	imagerel $LN26+374
	DD	imagerel $chain$1$PySlice_New
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PySlice_New DD imagerel $LN26+374
	DD	imagerel $LN26+442
	DD	imagerel $chain$2$PySlice_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PySlice_New DD 021H
	DD	imagerel $LN26
	DD	imagerel $LN26+113
	DD	imagerel $unwind$PySlice_New
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PySlice_New DD 040a21H
	DD	0b740aH
	DD	0a5405H
	DD	imagerel $LN26
	DD	imagerel $LN26+113
	DD	imagerel $unwind$PySlice_New
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySlice_New DD 060e01H
	DD	0c340eH
	DD	0d00a520eH
	DD	06006c008H
xdata	ENDS
;	COMDAT ??_C@_0M@BHGDKCPO@PySlice_New?$AA@
CONST	SEGMENT
??_C@_0M@BHGDKCPO@PySlice_New?$AA@ DB 'PySlice_New', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@ILALJPKD@?4?4?2Objects?2sliceobject?4c?$AA@
CONST	SEGMENT
??_C@_0BJ@ILALJPKD@?4?4?2Objects?2sliceobject?4c?$AA@ DB '..\Objects\slic'
	DB	'eobject.c', 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\sliceobject.c
CONST	ENDS
;	COMDAT PySlice_New
_TEXT	SEGMENT
start$ = 80
stop$ = 88
step$ = 96
PySlice_New PROC					; COMDAT

; 106  : {

$LN26:
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	56		 push	 rsi
  00006	41 54		 push	 r12
  00008	41 55		 push	 r13
  0000a	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000e	49 8b f0	 mov	 rsi, r8
  00011	4c 8b ea	 mov	 r13, rdx
  00014	4c 8b e1	 mov	 r12, rcx

; 107  :     PySliceObject *obj;
; 108  : 
; 109  :     if (!Py_PXCTX && slice_cache != NULL) {

  00017	e8 00 00 00 00	 call	 _Py_PXCTX
  0001c	85 c0		 test	 eax, eax
  0001e	0f 85 5f 01 00
	00		 jne	 $LN6@PySlice_Ne
  00024	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR slice_cache
  0002b	48 85 db	 test	 rbx, rbx
  0002e	0f 84 4f 01 00
	00		 je	 $LN6@PySlice_Ne

; 110  :         obj = slice_cache;
; 111  :         slice_cache = NULL;
; 112  :         _Py_NewReference((PyObject *)obj);

  00034	44 8d 40 70	 lea	 r8d, QWORD PTR [rax+112]
  00038	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@ILALJPKD@?4?4?2Objects?2sliceobject?4c?$AA@
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@BHGDKCPO@PySlice_New?$AA@
  00046	4c 8b cb	 mov	 r9, rbx
  00049	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR slice_cache, 0
  00054	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0005c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00061	85 c0		 test	 eax, eax
  00063	0f 84 0d 01 00
	00		 je	 $LN9@PySlice_Ne
  00069	48 8b cb	 mov	 rcx, rbx
  0006c	e8 00 00 00 00	 call	 _Px_NewReference
$LN4@PySlice_Ne:

; 116  :             return NULL;
; 117  :     }
; 118  : 
; 119  :     if (step == NULL) step = Py_None;

  00071	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp
  00076	48 89 7c 24 58	 mov	 QWORD PTR [rsp+88], rdi
  0007b	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  00082	48 8b ef	 mov	 rbp, rdi
  00085	48 85 f6	 test	 rsi, rsi
  00088	48 0f 45 ee	 cmovne	 rbp, rsi

; 120  :     Py_INCREF(step);

  0008c	e8 00 00 00 00	 call	 _Py_PXCTX
  00091	85 c0		 test	 eax, eax
  00093	75 32		 jne	 SHORT $LN14@PySlice_Ne
  00095	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0009c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000a3	4c 8b cd	 mov	 r9, rbp
  000a6	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000ac	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000b4	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b9	85 c0		 test	 eax, eax
  000bb	75 06		 jne	 SHORT $LN13@PySlice_Ne
  000bd	f6 45 20 20	 test	 BYTE PTR [rbp+32], 32	; 00000020H
  000c1	74 04		 je	 SHORT $LN14@PySlice_Ne
$LN13@PySlice_Ne:
  000c3	48 ff 45 50	 inc	 QWORD PTR [rbp+80]
$LN14@PySlice_Ne:

; 121  :     if (start == NULL) start = Py_None;

  000c7	48 8b f7	 mov	 rsi, rdi
  000ca	4d 85 e4	 test	 r12, r12
  000cd	49 0f 45 f4	 cmovne	 rsi, r12

; 122  :     Py_INCREF(start);

  000d1	e8 00 00 00 00	 call	 _Py_PXCTX
  000d6	85 c0		 test	 eax, eax
  000d8	75 32		 jne	 SHORT $LN18@PySlice_Ne
  000da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000e8	4c 8b ce	 mov	 r9, rsi
  000eb	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000f1	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000f9	e8 00 00 00 00	 call	 _PyParallel_Guard
  000fe	85 c0		 test	 eax, eax
  00100	75 06		 jne	 SHORT $LN17@PySlice_Ne
  00102	f6 46 20 20	 test	 BYTE PTR [rsi+32], 32	; 00000020H
  00106	74 04		 je	 SHORT $LN18@PySlice_Ne
$LN17@PySlice_Ne:
  00108	48 ff 46 50	 inc	 QWORD PTR [rsi+80]
$LN18@PySlice_Ne:

; 123  :     if (stop == NULL) stop = Py_None;

  0010c	4d 85 ed	 test	 r13, r13
  0010f	49 0f 45 fd	 cmovne	 rdi, r13

; 124  :     Py_INCREF(stop);

  00113	e8 00 00 00 00	 call	 _Py_PXCTX
  00118	85 c0		 test	 eax, eax
  0011a	75 32		 jne	 SHORT $LN22@PySlice_Ne
  0011c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00123	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0012a	4c 8b cf	 mov	 r9, rdi
  0012d	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00133	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0013b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00140	85 c0		 test	 eax, eax
  00142	75 06		 jne	 SHORT $LN21@PySlice_Ne
  00144	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  00148	74 04		 je	 SHORT $LN22@PySlice_Ne
$LN21@PySlice_Ne:
  0014a	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN22@PySlice_Ne:

; 125  : 
; 126  :     obj->step = step;

  0014e	48 89 6b 70	 mov	 QWORD PTR [rbx+112], rbp
  00152	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]

; 127  :     obj->start = start;
; 128  :     obj->stop = stop;

  00157	48 89 7b 68	 mov	 QWORD PTR [rbx+104], rdi
  0015b	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  00160	48 89 73 60	 mov	 QWORD PTR [rbx+96], rsi

; 129  : 
; 130  :     return (PyObject *) obj;

  00164	48 8b c3	 mov	 rax, rbx

; 131  : }

  00167	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  0016c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00170	41 5d		 pop	 r13
  00172	41 5c		 pop	 r12
  00174	5e		 pop	 rsi
  00175	c3		 ret	 0
$LN9@PySlice_Ne:

; 110  :         obj = slice_cache;
; 111  :         slice_cache = NULL;
; 112  :         _Py_NewReference((PyObject *)obj);

  00176	48 c7 43 50 01
	00 00 00	 mov	 QWORD PTR [rbx+80], 1

; 113  :     } else {

  0017e	e9 ee fe ff ff	 jmp	 $LN4@PySlice_Ne
$LN6@PySlice_Ne:

; 114  :         obj = PyObject_New(PySliceObject, &PySlice_Type);

  00183	e8 00 00 00 00	 call	 _Py_PXCTX
  00188	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PySlice_Type
  0018f	85 c0		 test	 eax, eax
  00191	74 07		 je	 SHORT $LN11@PySlice_Ne
  00193	e8 00 00 00 00	 call	 _PxObject_New
  00198	eb 05		 jmp	 SHORT $LN25@PySlice_Ne
$LN11@PySlice_Ne:
  0019a	e8 00 00 00 00	 call	 _PyObject_New
$LN25@PySlice_Ne:
  0019f	48 8b d8	 mov	 rbx, rax

; 115  :         if (obj == NULL)

  001a2	48 85 c0	 test	 rax, rax
  001a5	0f 85 c6 fe ff
	ff		 jne	 $LN4@PySlice_Ne

; 131  : }

  001ab	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  001b0	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001b4	41 5d		 pop	 r13
  001b6	41 5c		 pop	 r12
  001b8	5e		 pop	 rsi
  001b9	c3		 ret	 0
PySlice_New ENDP
_TEXT	ENDS
PUBLIC	_PySlice_FromIndices
EXTRN	PyLong_FromSsize_t:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PySlice_FromIndices DD imagerel $LN6
	DD	imagerel $LN6+40
	DD	imagerel $unwind$_PySlice_FromIndices
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_PySlice_FromIndices DD imagerel $LN6+40
	DD	imagerel $LN6+84
	DD	imagerel $chain$0$_PySlice_FromIndices
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_PySlice_FromIndices DD imagerel $LN6+84
	DD	imagerel $LN6+133
	DD	imagerel $chain$2$_PySlice_FromIndices
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_PySlice_FromIndices DD 020021H
	DD	066400H
	DD	imagerel $LN6
	DD	imagerel $LN6+40
	DD	imagerel $unwind$_PySlice_FromIndices
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_PySlice_FromIndices DD 020521H
	DD	066405H
	DD	imagerel $LN6
	DD	imagerel $LN6+40
	DD	imagerel $unwind$_PySlice_FromIndices
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PySlice_FromIndices DD 040a01H
	DD	07340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PySlice_FromIndices
_TEXT	SEGMENT
istart$ = 48
istop$ = 56
_PySlice_FromIndices PROC				; COMDAT

; 135  : {

$LN6:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx

; 136  :     PyObject *start, *end, *slice;
; 137  :     start = PyLong_FromSsize_t(istart);

  0000d	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  00012	48 8b f8	 mov	 rdi, rax

; 138  :     if (!start)

  00015	48 85 c0	 test	 rax, rax
  00018	75 0b		 jne	 SHORT $LN2@PySlice_Fr

; 150  : }

  0001a	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0001f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00023	5f		 pop	 rdi
  00024	c3		 ret	 0
$LN2@PySlice_Fr:

; 139  :         return NULL;
; 140  :     end = PyLong_FromSsize_t(istop);

  00025	48 8b cb	 mov	 rcx, rbx
  00028	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  0002d	e8 00 00 00 00	 call	 PyLong_FromSsize_t

; 141  :     if (!end) {
; 142  :         Py_DECREF(start);

  00032	48 8b cf	 mov	 rcx, rdi
  00035	48 8b f0	 mov	 rsi, rax
  00038	48 85 c0	 test	 rax, rax
  0003b	75 17		 jne	 SHORT $LN1@PySlice_Fr
  0003d	e8 00 00 00 00	 call	 _Py_DecRef
  00042	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]

; 143  :         return NULL;

  00047	33 c0		 xor	 eax, eax

; 150  : }

  00049	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0004e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00052	5f		 pop	 rdi
  00053	c3		 ret	 0
$LN1@PySlice_Fr:

; 144  :     }
; 145  : 
; 146  :     slice = PySlice_New(start, end, NULL);

  00054	45 33 c0	 xor	 r8d, r8d
  00057	48 8b d0	 mov	 rdx, rax
  0005a	e8 00 00 00 00	 call	 PySlice_New

; 147  :     Py_DECREF(start);

  0005f	48 8b cf	 mov	 rcx, rdi
  00062	48 8b d8	 mov	 rbx, rax
  00065	e8 00 00 00 00	 call	 _Py_DecRef

; 148  :     Py_DECREF(end);

  0006a	48 8b ce	 mov	 rcx, rsi
  0006d	e8 00 00 00 00	 call	 _Py_DecRef
  00072	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]

; 149  :     return slice;

  00077	48 8b c3	 mov	 rax, rbx

; 150  : }

  0007a	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0007f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00083	5f		 pop	 rdi
  00084	c3		 ret	 0
_PySlice_FromIndices ENDP
_TEXT	ENDS
PUBLIC	PySlice_GetIndices
EXTRN	PyLong_AsSsize_t:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySlice_GetIndices DD imagerel $LN22
	DD	imagerel $LN22+281
	DD	imagerel $unwind$PySlice_GetIndices
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySlice_GetIndices DD 0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0d0143218H
	DD	07010c012H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PySlice_GetIndices
_TEXT	SEGMENT
_r$ = 64
length$ = 72
start$ = 80
stop$ = 88
step$ = 96
PySlice_GetIndices PROC					; COMDAT

; 155  : {

$LN22:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00018	48 8b d9	 mov	 rbx, rcx

; 156  :     PySliceObject *r = (PySliceObject*)_r;
; 157  :     /* XXX support long ints */
; 158  :     if (r->step == Py_None) {

  0001b	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  0001f	4c 8d 2d 00 00
	00 00		 lea	 r13, OFFSET FLAT:_Py_NoneStruct
  00026	49 8b e9	 mov	 rbp, r9
  00029	4d 8b e0	 mov	 r12, r8
  0002c	48 8b f2	 mov	 rsi, rdx
  0002f	49 3b cd	 cmp	 rcx, r13
  00032	75 0e		 jne	 SHORT $LN14@PySlice_Ge

; 159  :         *step = 1;

  00034	48 8b 7c 24 60	 mov	 rdi, QWORD PTR step$[rsp]
  00039	48 c7 07 01 00
	00 00		 mov	 QWORD PTR [rdi], 1

; 160  :     } else {

  00040	eb 25		 jmp	 SHORT $LN13@PySlice_Ge
$LN14@PySlice_Ge:

; 161  :         if (!PyLong_Check(r->step)) return -1;

  00042	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00046	f7 80 00 01 00
	00 00 00 00 01	 test	 DWORD PTR [rax+256], 16777216 ; 01000000H
  00050	75 08		 jne	 SHORT $LN12@PySlice_Ge
$LN20@PySlice_Ge:
  00052	83 c8 ff	 or	 eax, -1
  00055	e9 a6 00 00 00	 jmp	 $LN1@PySlice_Ge
$LN12@PySlice_Ge:

; 162  :         *step = PyLong_AsSsize_t(r->step);

  0005a	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  0005f	48 8b 7c 24 60	 mov	 rdi, QWORD PTR step$[rsp]
  00064	48 89 07	 mov	 QWORD PTR [rdi], rax
$LN13@PySlice_Ge:

; 163  :     }
; 164  :     if (r->start == Py_None) {

  00067	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  0006b	49 3b cd	 cmp	 rcx, r13
  0006e	75 10		 jne	 SHORT $LN11@PySlice_Ge

; 165  :         *start = *step < 0 ? length-1 : 0;

  00070	48 83 3f 00	 cmp	 QWORD PTR [rdi], 0
  00074	7d 06		 jge	 SHORT $LN17@PySlice_Ge
  00076	48 8d 46 ff	 lea	 rax, QWORD PTR [rsi-1]
  0007a	eb 25		 jmp	 SHORT $LN18@PySlice_Ge
$LN17@PySlice_Ge:
  0007c	33 c0		 xor	 eax, eax

; 166  :     } else {

  0007e	eb 21		 jmp	 SHORT $LN18@PySlice_Ge
$LN11@PySlice_Ge:

; 167  :         if (!PyLong_Check(r->start)) return -1;

  00080	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00084	f7 80 00 01 00
	00 00 00 00 01	 test	 DWORD PTR [rax+256], 16777216 ; 01000000H
  0008e	74 c2		 je	 SHORT $LN20@PySlice_Ge

; 168  :         *start = PyLong_AsSsize_t(r->start);

  00090	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  00095	49 89 04 24	 mov	 QWORD PTR [r12], rax

; 169  :         if (*start < 0) *start += length;

  00099	48 85 c0	 test	 rax, rax
  0009c	79 07		 jns	 SHORT $LN8@PySlice_Ge
  0009e	48 03 c6	 add	 rax, rsi
$LN18@PySlice_Ge:
  000a1	49 89 04 24	 mov	 QWORD PTR [r12], rax
$LN8@PySlice_Ge:

; 170  :     }
; 171  :     if (r->stop == Py_None) {

  000a5	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  000a9	48 83 cb ff	 or	 rbx, -1
  000ad	49 3b cd	 cmp	 rcx, r13
  000b0	75 0d		 jne	 SHORT $LN7@PySlice_Ge

; 172  :         *stop = *step < 0 ? -1 : length;

  000b2	48 83 3f 00	 cmp	 QWORD PTR [rdi], 0
  000b6	48 8b c6	 mov	 rax, rsi
  000b9	48 0f 4c c3	 cmovl	 rax, rbx

; 173  :     } else {

  000bd	eb 21		 jmp	 SHORT $LN19@PySlice_Ge
$LN7@PySlice_Ge:

; 174  :         if (!PyLong_Check(r->stop)) return -1;

  000bf	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  000c3	f7 80 00 01 00
	00 00 00 00 01	 test	 DWORD PTR [rax+256], 16777216 ; 01000000H
  000cd	74 83		 je	 SHORT $LN20@PySlice_Ge

; 175  :         *stop = PyLong_AsSsize_t(r->stop);

  000cf	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  000d4	48 89 45 00	 mov	 QWORD PTR [rbp], rax

; 176  :         if (*stop < 0) *stop += length;

  000d8	48 85 c0	 test	 rax, rax
  000db	79 07		 jns	 SHORT $LN4@PySlice_Ge
  000dd	48 03 c6	 add	 rax, rsi
$LN19@PySlice_Ge:
  000e0	48 89 45 00	 mov	 QWORD PTR [rbp], rax
$LN4@PySlice_Ge:

; 177  :     }
; 178  :     if (*stop > length) return -1;

  000e4	48 39 75 00	 cmp	 QWORD PTR [rbp], rsi
  000e8	7e 04		 jle	 SHORT $LN3@PySlice_Ge
$LN21@PySlice_Ge:
  000ea	8b c3		 mov	 eax, ebx
  000ec	eb 12		 jmp	 SHORT $LN1@PySlice_Ge
$LN3@PySlice_Ge:

; 179  :     if (*start >= length) return -1;

  000ee	49 39 34 24	 cmp	 QWORD PTR [r12], rsi
  000f2	7d f6		 jge	 SHORT $LN21@PySlice_Ge

; 180  :     if (*step == 0) return -1;

  000f4	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  000f7	48 f7 d8	 neg	 rax
  000fa	1b c0		 sbb	 eax, eax
  000fc	f7 d8		 neg	 eax
  000fe	ff c8		 dec	 eax
$LN1@PySlice_Ge:

; 181  :     return 0;
; 182  : }

  00100	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00105	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  0010a	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  0010f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00113	41 5d		 pop	 r13
  00115	41 5c		 pop	 r12
  00117	5f		 pop	 rdi
  00118	c3		 ret	 0
PySlice_GetIndices ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@PFFNIAMP@slice?5step?5cannot?5be?5zero?$AA@ ; `string'
PUBLIC	PySlice_GetIndicesEx
EXTRN	PyExc_ValueError:QWORD
EXTRN	_PyEval_SliceIndex:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySlice_GetIndicesEx DD imagerel $LN38
	DD	imagerel $LN38+82
	DD	imagerel $unwind$PySlice_GetIndicesEx
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PySlice_GetIndicesEx DD imagerel $LN38+82
	DD	imagerel $LN38+190
	DD	imagerel $chain$0$PySlice_GetIndicesEx
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PySlice_GetIndicesEx DD imagerel $LN38+190
	DD	imagerel $LN38+284
	DD	imagerel $chain$1$PySlice_GetIndicesEx
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PySlice_GetIndicesEx DD imagerel $LN38+284
	DD	imagerel $LN38+441
	DD	imagerel $chain$2$PySlice_GetIndicesEx
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PySlice_GetIndicesEx DD imagerel $LN38+441
	DD	imagerel $LN38+464
	DD	imagerel $chain$3$PySlice_GetIndicesEx
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PySlice_GetIndicesEx DD 021H
	DD	imagerel $LN38
	DD	imagerel $LN38+82
	DD	imagerel $unwind$PySlice_GetIndicesEx
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PySlice_GetIndicesEx DD 020021H
	DD	0ad400H
	DD	imagerel $LN38
	DD	imagerel $LN38+82
	DD	imagerel $unwind$PySlice_GetIndicesEx
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PySlice_GetIndicesEx DD 021H
	DD	imagerel $LN38
	DD	imagerel $LN38+82
	DD	imagerel $unwind$PySlice_GetIndicesEx
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PySlice_GetIndicesEx DD 020521H
	DD	0ad405H
	DD	imagerel $LN38
	DD	imagerel $LN38+82
	DD	imagerel $unwind$PySlice_GetIndicesEx
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySlice_GetIndicesEx DD 0a1601H
	DD	0c5416H
	DD	0b3416H
	DD	0f0123216H
	DD	0c00ee010H
	DD	0600b700cH
xdata	ENDS
;	COMDAT ??_C@_0BK@PFFNIAMP@slice?5step?5cannot?5be?5zero?$AA@
CONST	SEGMENT
??_C@_0BK@PFFNIAMP@slice?5step?5cannot?5be?5zero?$AA@ DB 'slice step cann'
	DB	'ot be zero', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PySlice_GetIndicesEx
_TEXT	SEGMENT
_r$ = 80
length$ = 88
start$ = 96
stop$ = 104
step$ = 112
slicelength$ = 120
PySlice_GetIndicesEx PROC				; COMDAT

; 188  : {

$LN38:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	41 54		 push	 r12
  0000e	41 56		 push	 r14
  00010	41 57		 push	 r15
  00012	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 189  :     PySliceObject *r = (PySliceObject*)_r;
; 190  :     /* this is harder to get right than you might think */
; 191  : 
; 192  :     Py_ssize_t defstart, defstop;
; 193  : 
; 194  :     if (r->step == Py_None) {
; 195  :         *step = 1;

  00016	48 8b 6c 24 70	 mov	 rbp, QWORD PTR step$[rsp]
  0001b	4c 8b f1	 mov	 r14, rcx
  0001e	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00022	4c 8d 3d 00 00
	00 00		 lea	 r15, OFFSET FLAT:_Py_NoneStruct
  00029	49 8b f9	 mov	 rdi, r9
  0002c	4d 8b e0	 mov	 r12, r8
  0002f	48 8b f2	 mov	 rsi, rdx
  00032	49 3b cf	 cmp	 rcx, r15
  00035	0f 85 83 00 00
	00		 jne	 $LN23@PySlice_Ge@2
  0003b	48 c7 45 00 01
	00 00 00	 mov	 QWORD PTR [rbp], 1
$LN26@PySlice_Ge@2:

; 211  :     }
; 212  : 
; 213  :     defstart = *step < 0 ? length-1 : 0;

  00043	33 c0		 xor	 eax, eax
$LN27@PySlice_Ge@2:

; 214  :     defstop = *step < 0 ? -1 : length;
; 215  : 
; 216  :     if (r->start == Py_None) {

  00045	49 8b 4e 60	 mov	 rcx, QWORD PTR [r14+96]
  00049	48 83 cb ff	 or	 rbx, -1
  0004d	48 83 7d 00 00	 cmp	 QWORD PTR [rbp], 0
  00052	4c 89 6c 24 50	 mov	 QWORD PTR [rsp+80], r13
  00057	4c 8b ee	 mov	 r13, rsi
  0005a	4c 0f 4c eb	 cmovl	 r13, rbx
  0005e	49 3b cf	 cmp	 rcx, r15

; 217  :         *start = defstart;
; 218  :     }
; 219  :     else {

  00061	74 46		 je	 SHORT $LN29@PySlice_Ge@2

; 220  :         if (!_PyEval_SliceIndex(r->start, start)) return -1;

  00063	49 8b d4	 mov	 rdx, r12
  00066	e8 00 00 00 00	 call	 _PyEval_SliceIndex
  0006b	85 c0		 test	 eax, eax
  0006d	0f 84 b5 00 00
	00		 je	 $LN36@PySlice_Ge@2

; 221  :         if (*start < 0) *start += length;

  00073	49 8b 04 24	 mov	 rax, QWORD PTR [r12]
  00077	48 85 c0	 test	 rax, rax
  0007a	79 19		 jns	 SHORT $LN14@PySlice_Ge@2
  0007c	48 03 c6	 add	 rax, rsi
  0007f	49 89 04 24	 mov	 QWORD PTR [r12], rax

; 222  :         if (*start < 0) *start = (*step < 0) ? -1 : 0;

  00083	79 10		 jns	 SHORT $LN14@PySlice_Ge@2
  00085	33 c0		 xor	 eax, eax
  00087	48 39 45 00	 cmp	 QWORD PTR [rbp], rax
  0008b	0f 9d c0	 setge	 al
  0008e	48 ff c8	 dec	 rax
  00091	49 89 04 24	 mov	 QWORD PTR [r12], rax
$LN14@PySlice_Ge@2:

; 223  :         if (*start >= length)

  00095	49 39 34 24	 cmp	 QWORD PTR [r12], rsi
  00099	7c 12		 jl	 SHORT $LN13@PySlice_Ge@2

; 224  :             *start = (*step < 0) ? length - 1 : length;

  0009b	48 83 7d 00 00	 cmp	 QWORD PTR [rbp], 0
  000a0	48 8d 46 ff	 lea	 rax, QWORD PTR [rsi-1]
  000a4	7c 03		 jl	 SHORT $LN29@PySlice_Ge@2
  000a6	48 8b c6	 mov	 rax, rsi
$LN29@PySlice_Ge@2:
  000a9	49 89 04 24	 mov	 QWORD PTR [r12], rax
$LN13@PySlice_Ge@2:

; 225  :     }
; 226  : 
; 227  :     if (r->stop == Py_None) {

  000ad	49 8b 4e 68	 mov	 rcx, QWORD PTR [r14+104]
  000b1	49 3b cf	 cmp	 rcx, r15
  000b4	75 66		 jne	 SHORT $LN12@PySlice_Ge@2

; 228  :         *stop = defstop;

  000b6	4c 89 2f	 mov	 QWORD PTR [rdi], r13

; 229  :     }
; 230  :     else {

  000b9	e9 a2 00 00 00	 jmp	 $LN7@PySlice_Ge@2
$LN23@PySlice_Ge@2:

; 196  :     }
; 197  :     else {
; 198  :         if (!_PyEval_SliceIndex(r->step, step)) return -1;

  000be	48 8b d5	 mov	 rdx, rbp
  000c1	e8 00 00 00 00	 call	 _PyEval_SliceIndex
  000c6	85 c0		 test	 eax, eax
  000c8	74 1c		 je	 SHORT $LN37@PySlice_Ge@2

; 199  :         if (*step == 0) {

  000ca	48 8b 45 00	 mov	 rax, QWORD PTR [rbp]
  000ce	48 85 c0	 test	 rax, rax
  000d1	75 1b		 jne	 SHORT $LN20@PySlice_Ge@2

; 200  :             PyErr_SetString(PyExc_ValueError,
; 201  :                             "slice step cannot be zero");

  000d3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@PFFNIAMP@slice?5step?5cannot?5be?5zero?$AA@
  000e1	e8 00 00 00 00	 call	 PyErr_SetString
$LN37@PySlice_Ge@2:

; 202  :             return -1;

  000e6	83 c8 ff	 or	 eax, -1
  000e9	e9 cb 00 00 00	 jmp	 $LN24@PySlice_Ge@2
$LN20@PySlice_Ge@2:

; 203  :         }
; 204  :         /* Here *step might be -PY_SSIZE_T_MAX-1; in this case we replace it
; 205  :          * with -PY_SSIZE_T_MAX.  This doesn't affect the semantics, and it
; 206  :          * guards against later undefined behaviour resulting from code that
; 207  :          * does "step = -step" as part of a slice reversal.
; 208  :          */
; 209  :         if (*step < -PY_SSIZE_T_MAX)

  000ee	48 b9 01 00 00
	00 00 00 00 80	 mov	 rcx, -9223372036854775807 ; 8000000000000001H
  000f8	48 3b c1	 cmp	 rax, rcx
  000fb	7d 0d		 jge	 SHORT $LN19@PySlice_Ge@2

; 210  :             *step = -PY_SSIZE_T_MAX;

  000fd	48 89 4d 00	 mov	 QWORD PTR [rbp], rcx

; 211  :     }
; 212  : 
; 213  :     defstart = *step < 0 ? length-1 : 0;

  00101	48 8d 46 ff	 lea	 rax, QWORD PTR [rsi-1]
  00105	e9 3b ff ff ff	 jmp	 $LN27@PySlice_Ge@2
$LN19@PySlice_Ge@2:
  0010a	48 85 c0	 test	 rax, rax
  0010d	0f 89 30 ff ff
	ff		 jns	 $LN26@PySlice_Ge@2
  00113	48 8d 46 ff	 lea	 rax, QWORD PTR [rsi-1]
  00117	e9 29 ff ff ff	 jmp	 $LN27@PySlice_Ge@2
$LN12@PySlice_Ge@2:

; 231  :         if (!_PyEval_SliceIndex(r->stop, stop)) return -1;

  0011c	48 8b d7	 mov	 rdx, rdi
  0011f	e8 00 00 00 00	 call	 _PyEval_SliceIndex
  00124	85 c0		 test	 eax, eax
  00126	75 07		 jne	 SHORT $LN10@PySlice_Ge@2
$LN36@PySlice_Ge@2:
  00128	8b c3		 mov	 eax, ebx
  0012a	e9 85 00 00 00	 jmp	 $LN33@PySlice_Ge@2
$LN10@PySlice_Ge@2:

; 232  :         if (*stop < 0) *stop += length;

  0012f	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00132	48 85 c0	 test	 rax, rax
  00135	79 17		 jns	 SHORT $LN8@PySlice_Ge@2
  00137	48 03 c6	 add	 rax, rsi
  0013a	48 89 07	 mov	 QWORD PTR [rdi], rax

; 233  :         if (*stop < 0) *stop = (*step < 0) ? -1 : 0;

  0013d	79 0f		 jns	 SHORT $LN8@PySlice_Ge@2
  0013f	33 c0		 xor	 eax, eax
  00141	48 39 45 00	 cmp	 QWORD PTR [rbp], rax
  00145	0f 9d c0	 setge	 al
  00148	48 ff c8	 dec	 rax
  0014b	48 89 07	 mov	 QWORD PTR [rdi], rax
$LN8@PySlice_Ge@2:

; 234  :         if (*stop >= length)

  0014e	48 39 37	 cmp	 QWORD PTR [rdi], rsi
  00151	7c 0d		 jl	 SHORT $LN7@PySlice_Ge@2

; 235  :             *stop = (*step < 0) ? length - 1 : length;

  00153	48 83 7d 00 00	 cmp	 QWORD PTR [rbp], 0
  00158	7d 03		 jge	 SHORT $LN30@PySlice_Ge@2
  0015a	48 ff ce	 dec	 rsi
$LN30@PySlice_Ge@2:
  0015d	48 89 37	 mov	 QWORD PTR [rdi], rsi
$LN7@PySlice_Ge@2:

; 236  :     }
; 237  : 
; 238  :     if ((*step < 0 && *stop >= *start)
; 239  :         || (*step > 0 && *start >= *stop)) {

  00160	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
  00164	48 85 c9	 test	 rcx, rcx
  00167	79 0c		 jns	 SHORT $LN34@PySlice_Ge@2
  00169	49 8b 04 24	 mov	 rax, QWORD PTR [r12]
  0016d	48 39 07	 cmp	 QWORD PTR [rdi], rax
  00170	7d 0e		 jge	 SHORT $LN5@PySlice_Ge@2
  00172	48 85 c9	 test	 rcx, rcx
$LN34@PySlice_Ge@2:
  00175	7e 17		 jle	 SHORT $LN6@PySlice_Ge@2
  00177	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  0017a	49 39 04 24	 cmp	 QWORD PTR [r12], rax
  0017e	7c 0e		 jl	 SHORT $LN6@PySlice_Ge@2
$LN5@PySlice_Ge@2:

; 240  :         *slicelength = 0;

  00180	48 8b 44 24 78	 mov	 rax, QWORD PTR slicelength$[rsp]
  00185	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  0018c	eb 24		 jmp	 SHORT $LN1@PySlice_Ge@2
$LN6@PySlice_Ge@2:

; 241  :     }
; 242  :     else if (*step < 0) {
; 243  :         *slicelength = (*stop-*start+1)/(*step)+1;

  0018e	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00191	49 2b 04 24	 sub	 rax, QWORD PTR [r12]
  00195	48 85 c9	 test	 rcx, rcx
  00198	79 05		 jns	 SHORT $LN2@PySlice_Ge@2
  0019a	48 ff c0	 inc	 rax

; 244  :     }
; 245  :     else {

  0019d	eb 03		 jmp	 SHORT $LN35@PySlice_Ge@2
$LN2@PySlice_Ge@2:

; 246  :         *slicelength = (*stop-*start-1)/(*step)+1;

  0019f	48 ff c8	 dec	 rax
$LN35@PySlice_Ge@2:
  001a2	48 99		 cdq
  001a4	48 f7 f9	 idiv	 rcx
  001a7	48 8b 4c 24 78	 mov	 rcx, QWORD PTR slicelength$[rsp]
  001ac	48 ff c0	 inc	 rax
  001af	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN1@PySlice_Ge@2:

; 247  :     }
; 248  : 
; 249  :     return 0;

  001b2	33 c0		 xor	 eax, eax
$LN33@PySlice_Ge@2:
  001b4	4c 8b 6c 24 50	 mov	 r13, QWORD PTR [rsp+80]
$LN24@PySlice_Ge@2:

; 250  : }

  001b9	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  001be	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
  001c3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001c7	41 5f		 pop	 r15
  001c9	41 5e		 pop	 r14
  001cb	41 5c		 pop	 r12
  001cd	5f		 pop	 rdi
  001ce	5e		 pop	 rsi
  001cf	c3		 ret	 0
PySlice_GetIndicesEx ENDP
_TEXT	ENDS
PUBLIC	??_C@_07HLJNEMPJ@slice?$CI?$CJ?$AA@		; `string'
EXTRN	PyArg_UnpackTuple:PROC
EXTRN	_PyArg_NoKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$slice_new DD imagerel slice_new
	DD	imagerel slice_new+177
	DD	imagerel $unwind$slice_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slice_new DD 040a01H
	DD	0c340aH
	DD	07006920aH
xdata	ENDS
;	COMDAT ??_C@_07HLJNEMPJ@slice?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_07HLJNEMPJ@slice?$CI?$CJ?$AA@ DB 'slice()', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT slice_new
_TEXT	SEGMENT
stop$ = 64
step$ = 72
type$ = 96
args$ = 104
kw$ = 112
start$ = 120
slice_new PROC						; COMDAT

; 254  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 255  :     PyObject *start, *stop, *step;
; 256  : 
; 257  :     start = stop = step = NULL;

  0000a	33 db		 xor	 ebx, ebx
  0000c	48 8b fa	 mov	 rdi, rdx

; 258  : 
; 259  :     if (!_PyArg_NoKeywords("slice()", kw))

  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07HLJNEMPJ@slice?$CI?$CJ?$AA@
  00016	49 8b d0	 mov	 rdx, r8
  00019	48 89 5c 24 48	 mov	 QWORD PTR step$[rsp], rbx
  0001e	48 89 5c 24 40	 mov	 QWORD PTR stop$[rsp], rbx
  00023	48 89 5c 24 78	 mov	 QWORD PTR start$[rsp], rbx
  00028	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  0002d	85 c0		 test	 eax, eax
  0002f	75 0d		 jne	 SHORT $LN3@slice_new
$LN7@slice_new:

; 260  :         return NULL;

  00031	33 c0		 xor	 eax, eax

; 272  : }

  00033	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00038	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0003c	5f		 pop	 rdi
  0003d	c3		 ret	 0
$LN3@slice_new:

; 261  : 
; 262  :     if (!PyArg_UnpackTuple(args, "slice", 1, 3, &start, &stop, &step))

  0003e	48 8d 44 24 48	 lea	 rax, QWORD PTR step$[rsp]
  00043	41 b9 03 00 00
	00		 mov	 r9d, 3
  00049	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05ILHMOJGN@slice?$AA@
  00050	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00055	48 8d 44 24 40	 lea	 rax, QWORD PTR stop$[rsp]
  0005a	45 8d 41 fe	 lea	 r8d, QWORD PTR [r9-2]
  0005e	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00063	48 8d 44 24 78	 lea	 rax, QWORD PTR start$[rsp]
  00068	48 8b cf	 mov	 rcx, rdi
  0006b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00070	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00075	85 c0		 test	 eax, eax

; 263  :         return NULL;

  00077	74 b8		 je	 SHORT $LN7@slice_new

; 264  : 
; 265  :     /* This swapping of stop and start is to maintain similarity with
; 266  :        range(). */
; 267  :     if (stop == NULL) {

  00079	48 8b 54 24 40	 mov	 rdx, QWORD PTR stop$[rsp]
  0007e	48 85 d2	 test	 rdx, rdx
  00081	75 11		 jne	 SHORT $LN6@slice_new

; 268  :         stop = start;

  00083	48 8b 54 24 78	 mov	 rdx, QWORD PTR start$[rsp]

; 269  :         start = NULL;

  00088	48 89 5c 24 78	 mov	 QWORD PTR start$[rsp], rbx
  0008d	48 89 54 24 40	 mov	 QWORD PTR stop$[rsp], rdx
  00092	eb 05		 jmp	 SHORT $LN1@slice_new
$LN6@slice_new:
  00094	48 8b 5c 24 78	 mov	 rbx, QWORD PTR start$[rsp]
$LN1@slice_new:

; 270  :     }
; 271  :     return PySlice_New(start, stop, step);

  00099	4c 8b 44 24 48	 mov	 r8, QWORD PTR step$[rsp]
  0009e	48 8b cb	 mov	 rcx, rbx
  000a1	e8 00 00 00 00	 call	 PySlice_New

; 272  : }

  000a6	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  000ab	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000af	5f		 pop	 rdi
  000b0	c3		 ret	 0
slice_new ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slice_dealloc DD imagerel slice_dealloc
	DD	imagerel slice_dealloc+82
	DD	imagerel $unwind$slice_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slice_dealloc DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT slice_dealloc
_TEXT	SEGMENT
r$ = 48
slice_dealloc PROC					; COMDAT

; 282  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 283  :     if (Py_PXCTX)

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 3a		 jne	 SHORT $LN1@slice_deal

; 284  :         return;
; 285  : 
; 286  :     Py_DECREF(r->step);

  00012	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00016	e8 00 00 00 00	 call	 _Py_DecRef

; 287  :     Py_DECREF(r->start);

  0001b	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  0001f	e8 00 00 00 00	 call	 _Py_DecRef

; 288  :     Py_DECREF(r->stop);

  00024	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00028	e8 00 00 00 00	 call	 _Py_DecRef

; 289  :     if (slice_cache == NULL)

  0002d	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR slice_cache, 0
  00035	75 0d		 jne	 SHORT $LN2@slice_deal

; 290  :         slice_cache = r;

  00037	48 89 1d 00 00
	00 00		 mov	 QWORD PTR slice_cache, rbx

; 293  : }

  0003e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00042	5b		 pop	 rbx
  00043	c3		 ret	 0
$LN2@slice_deal:

; 291  :     else
; 292  :         PyObject_Del(r);

  00044	48 8b cb	 mov	 rcx, rbx
  00047	e8 00 00 00 00	 call	 PyObject_Free
$LN1@slice_deal:

; 293  : }

  0004c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00050	5b		 pop	 rbx
  00051	c3		 ret	 0
slice_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@HELMHOPE@slice?$CI?$CFR?0?5?$CFR?0?5?$CFR?$CJ?$AA@ ; `string'
EXTRN	PyUnicode_FromFormat:PROC
;	COMDAT ??_C@_0BC@HELMHOPE@slice?$CI?$CFR?0?5?$CFR?0?5?$CFR?$CJ?$AA@
CONST	SEGMENT
??_C@_0BC@HELMHOPE@slice?$CI?$CFR?0?5?$CFR?0?5?$CFR?$CJ?$AA@ DB 'slice(%R'
	DB	', %R, %R)', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT slice_repr
_TEXT	SEGMENT
r$ = 8
slice_repr PROC						; COMDAT

; 298  :     return PyUnicode_FromFormat("slice(%R, %R, %R)", r->start, r->stop, r->step);

  00000	4c 8b 49 70	 mov	 r9, QWORD PTR [rcx+112]
  00004	4c 8b 41 68	 mov	 r8, QWORD PTR [rcx+104]
  00008	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  0000c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@HELMHOPE@slice?$CI?$CFR?0?5?$CFR?0?5?$CFR?$CJ?$AA@

; 299  : }

  00013	e9 00 00 00 00	 jmp	 PyUnicode_FromFormat
slice_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_05FODGOJNK@?$CInnn?$CJ?$AA@		; `string'
EXTRN	Py_BuildValue:PROC
EXTRN	PyErr_Occurred:PROC
EXTRN	PyNumber_AsSsize_t:PROC
EXTRN	PyExc_OverflowError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$slice_indices DD imagerel slice_indices
	DD	imagerel slice_indices+146
	DD	imagerel $unwind$slice_indices
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slice_indices DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT ??_C@_05FODGOJNK@?$CInnn?$CJ?$AA@
CONST	SEGMENT
??_C@_05FODGOJNK@?$CInnn?$CJ?$AA@ DB '(nnn)', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT slice_indices
_TEXT	SEGMENT
start$ = 48
slicelength$ = 56
self$ = 80
len$ = 88
step$ = 96
stop$ = 104
slice_indices PROC					; COMDAT

; 310  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8b c2	 mov	 rax, rdx

; 311  :     Py_ssize_t ilen, start, stop, step, slicelength;
; 312  : 
; 313  :     ilen = PyNumber_AsSsize_t(len, PyExc_OverflowError);

  0000d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_OverflowError
  00014	48 8b f9	 mov	 rdi, rcx
  00017	48 8b c8	 mov	 rcx, rax
  0001a	e8 00 00 00 00	 call	 PyNumber_AsSsize_t
  0001f	48 8b d8	 mov	 rbx, rax

; 314  : 
; 315  :     if (ilen == -1 && PyErr_Occurred()) {

  00022	48 83 f8 ff	 cmp	 rax, -1
  00026	75 17		 jne	 SHORT $LN2@slice_indi
  00028	e8 00 00 00 00	 call	 PyErr_Occurred
  0002d	48 85 c0	 test	 rax, rax
  00030	74 0d		 je	 SHORT $LN2@slice_indi
$LN5@slice_indi:

; 316  :         return NULL;

  00032	33 c0		 xor	 eax, eax

; 325  : }

  00034	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00039	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0003d	5f		 pop	 rdi
  0003e	c3		 ret	 0
$LN2@slice_indi:

; 317  :     }
; 318  : 
; 319  :     if (PySlice_GetIndicesEx((PyObject*)self, ilen, &start, &stop,
; 320  :                              &step, &slicelength) < 0) {

  0003f	48 8d 44 24 38	 lea	 rax, QWORD PTR slicelength$[rsp]
  00044	4c 8d 4c 24 68	 lea	 r9, QWORD PTR stop$[rsp]
  00049	4c 8d 44 24 30	 lea	 r8, QWORD PTR start$[rsp]
  0004e	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00053	48 8d 44 24 60	 lea	 rax, QWORD PTR step$[rsp]
  00058	48 8b d3	 mov	 rdx, rbx
  0005b	48 8b cf	 mov	 rcx, rdi
  0005e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00063	e8 00 00 00 00	 call	 PySlice_GetIndicesEx
  00068	85 c0		 test	 eax, eax

; 321  :         return NULL;

  0006a	78 c6		 js	 SHORT $LN5@slice_indi

; 322  :     }
; 323  : 
; 324  :     return Py_BuildValue("(nnn)", start, stop, step);

  0006c	4c 8b 4c 24 60	 mov	 r9, QWORD PTR step$[rsp]
  00071	4c 8b 44 24 68	 mov	 r8, QWORD PTR stop$[rsp]
  00076	48 8b 54 24 30	 mov	 rdx, QWORD PTR start$[rsp]
  0007b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05FODGOJNK@?$CInnn?$CJ?$AA@
  00082	e8 00 00 00 00	 call	 Py_BuildValue

; 325  : }

  00087	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0008c	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00090	5f		 pop	 rdi
  00091	c3		 ret	 0
slice_indices ENDP
_TEXT	ENDS
PUBLIC	??_C@_06BNHLHAKP@O?$CIOOO?$CJ?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$slice_reduce DD imagerel slice_reduce
	DD	imagerel slice_reduce+42
	DD	imagerel $unwind$slice_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slice_reduce DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_06BNHLHAKP@O?$CIOOO?$CJ?$AA@
CONST	SEGMENT
??_C@_06BNHLHAKP@O?$CIOOO?$CJ?$AA@ DB 'O(OOO)', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT slice_reduce
_TEXT	SEGMENT
self$ = 64
slice_reduce PROC					; COMDAT

; 337  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 338  :     return Py_BuildValue("O(OOO)", Py_TYPE(self), self->start, self->stop, self->step);

  00004	48 8b 41 70	 mov	 rax, QWORD PTR [rcx+112]
  00008	4c 8b 49 68	 mov	 r9, QWORD PTR [rcx+104]
  0000c	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]
  00010	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06BNHLHAKP@O?$CIOOO?$CJ?$AA@
  0001b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00020	e8 00 00 00 00	 call	 Py_BuildValue

; 339  : }

  00025	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00029	c3		 ret	 0
slice_reduce ENDP
_TEXT	ENDS
EXTRN	_Py_NotImplementedStruct:BYTE
EXTRN	PyObject_RichCompare:PROC
EXTRN	PyTuple_New:PROC
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$slice_richcompare DD imagerel slice_richcompare
	DD	imagerel slice_richcompare+143
	DD	imagerel $unwind$slice_richcompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$slice_richcompare DD imagerel slice_richcompare+143
	DD	imagerel slice_richcompare+166
	DD	imagerel $chain$0$slice_richcompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$slice_richcompare DD imagerel slice_richcompare+166
	DD	imagerel slice_richcompare+199
	DD	imagerel $chain$1$slice_richcompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$slice_richcompare DD imagerel slice_richcompare+199
	DD	imagerel slice_richcompare+220
	DD	imagerel $chain$2$slice_richcompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$slice_richcompare DD imagerel slice_richcompare+220
	DD	imagerel slice_richcompare+350
	DD	imagerel $chain$4$slice_richcompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$slice_richcompare DD imagerel slice_richcompare+350
	DD	imagerel slice_richcompare+442
	DD	imagerel $chain$5$slice_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$slice_richcompare DD 021H
	DD	imagerel slice_richcompare
	DD	imagerel slice_richcompare+143
	DD	imagerel $unwind$slice_richcompare
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$slice_richcompare DD 040021H
	DD	09c400H
	DD	087400H
	DD	imagerel slice_richcompare
	DD	imagerel slice_richcompare+143
	DD	imagerel $unwind$slice_richcompare
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$slice_richcompare DD 021H
	DD	imagerel slice_richcompare+143
	DD	imagerel slice_richcompare+166
	DD	imagerel $chain$0$slice_richcompare
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$slice_richcompare DD 020521H
	DD	09c405H
	DD	imagerel slice_richcompare+143
	DD	imagerel slice_richcompare+166
	DD	imagerel $chain$0$slice_richcompare
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$slice_richcompare DD 020521H
	DD	087405H
	DD	imagerel slice_richcompare
	DD	imagerel slice_richcompare+143
	DD	imagerel $unwind$slice_richcompare
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slice_richcompare DD 060f01H
	DD	0b540fH
	DD	0a340fH
	DD	0600b520fH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\sliceobject.c
xdata	ENDS
;	COMDAT slice_richcompare
_TEXT	SEGMENT
v$ = 64
w$ = 72
op$ = 80
slice_richcompare PROC					; COMDAT

; 353  : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  0000a	56		 push	 rsi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 354  :     PyObject *t1;
; 355  :     PyObject *t2;
; 356  :     PyObject *res;
; 357  : 
; 358  :     if (!PySlice_Check(v) || !PySlice_Check(w))

  0000f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PySlice_Type
  00016	41 8b d8	 mov	 ebx, r8d
  00019	48 8b f2	 mov	 rsi, rdx
  0001c	48 8b e9	 mov	 rbp, rcx
  0001f	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00023	0f 85 35 01 00
	00		 jne	 $LN8@slice_rich
  00029	48 39 42 58	 cmp	 QWORD PTR [rdx+88], rax
  0002d	0f 85 2b 01 00
	00		 jne	 $LN8@slice_rich

; 360  : 
; 361  :     if (v == w) {

  00033	48 3b ca	 cmp	 rcx, rdx
  00036	75 52		 jne	 SHORT $LN7@slice_rich

; 362  :         /* XXX Do we really need this shortcut?
; 363  :            There's a unit test for it, but is that fair? */
; 364  :         switch (op) {

  00038	85 db		 test	 ebx, ebx
  0003a	7e 2c		 jle	 SHORT $LN3@slice_rich
  0003c	83 fb 02	 cmp	 ebx, 2
  0003f	7e 05		 jle	 SHORT $LN4@slice_rich
  00041	83 fb 05	 cmp	 ebx, 5
  00044	75 22		 jne	 SHORT $LN3@slice_rich
$LN4@slice_rich:

; 365  :         case Py_EQ:
; 366  :         case Py_LE:
; 367  :         case Py_GE:
; 368  :             res = Py_True;

  00046	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_TrueStruct

; 372  :             break;
; 373  :         }
; 374  :         Py_INCREF(res);

  0004d	48 8b cb	 mov	 rcx, rbx
  00050	e8 00 00 00 00	 call	 _Py_IncRef

; 375  :         return res;

  00055	48 8b c3	 mov	 rax, rbx

; 407  : }

  00058	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0005d	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  00062	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00066	5e		 pop	 rsi
  00067	c3		 ret	 0
$LN3@slice_rich:

; 369  :             break;
; 370  :         default:
; 371  :             res = Py_False;

  00068	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct

; 372  :             break;
; 373  :         }
; 374  :         Py_INCREF(res);

  0006f	48 8b cb	 mov	 rcx, rbx
  00072	e8 00 00 00 00	 call	 _Py_IncRef

; 375  :         return res;

  00077	48 8b c3	 mov	 rax, rbx

; 407  : }

  0007a	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0007f	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  00084	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00088	5e		 pop	 rsi
  00089	c3		 ret	 0
$LN7@slice_rich:

; 376  :     }
; 377  : 
; 378  :     t1 = PyTuple_New(3);

  0008a	b9 03 00 00 00	 mov	 ecx, 3
  0008f	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  00094	e8 00 00 00 00	 call	 PyTuple_New
  00099	48 8b f8	 mov	 rdi, rax

; 379  :     if (t1 == NULL)

  0009c	48 85 c0	 test	 rax, rax
  0009f	74 26		 je	 SHORT $LN16@slice_rich
$LN2@slice_rich:

; 380  :         return NULL;
; 381  :     t2 = PyTuple_New(3);

  000a1	b9 03 00 00 00	 mov	 ecx, 3
  000a6	4c 89 64 24 48	 mov	 QWORD PTR [rsp+72], r12
  000ab	e8 00 00 00 00	 call	 PyTuple_New

; 382  :     if (t2 == NULL) {
; 383  :         Py_DECREF(t1);

  000b0	48 8b cf	 mov	 rcx, rdi
  000b3	4c 8b e0	 mov	 r12, rax
  000b6	48 85 c0	 test	 rax, rax
  000b9	75 21		 jne	 SHORT $LN1@slice_rich
  000bb	e8 00 00 00 00	 call	 _Py_DecRef

; 384  :         return NULL;

  000c0	33 c0		 xor	 eax, eax
$LN17@slice_rich:
  000c2	4c 8b 64 24 48	 mov	 r12, QWORD PTR [rsp+72]
$LN16@slice_rich:
  000c7	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 407  : }

  000cc	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000d1	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  000d6	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000da	5e		 pop	 rsi
  000db	c3		 ret	 0
$LN1@slice_rich:

; 385  :     }
; 386  : 
; 387  :     PyTuple_SET_ITEM(t1, 0, ((PySliceObject *)v)->start);

  000dc	48 8b 45 60	 mov	 rax, QWORD PTR [rbp+96]

; 388  :     PyTuple_SET_ITEM(t1, 1, ((PySliceObject *)v)->stop);
; 389  :     PyTuple_SET_ITEM(t1, 2, ((PySliceObject *)v)->step);
; 390  :     PyTuple_SET_ITEM(t2, 0, ((PySliceObject *)w)->start);
; 391  :     PyTuple_SET_ITEM(t2, 1, ((PySliceObject *)w)->stop);
; 392  :     PyTuple_SET_ITEM(t2, 2, ((PySliceObject *)w)->step);
; 393  : 
; 394  :     res = PyObject_RichCompare(t1, t2, op);

  000e0	44 8b c3	 mov	 r8d, ebx
  000e3	49 8b d4	 mov	 rdx, r12
  000e6	48 89 47 70	 mov	 QWORD PTR [rdi+112], rax
  000ea	48 8b 45 68	 mov	 rax, QWORD PTR [rbp+104]
  000ee	48 89 47 78	 mov	 QWORD PTR [rdi+120], rax
  000f2	48 8b 45 70	 mov	 rax, QWORD PTR [rbp+112]
  000f6	48 89 87 80 00
	00 00		 mov	 QWORD PTR [rdi+128], rax
  000fd	48 8b 46 60	 mov	 rax, QWORD PTR [rsi+96]
  00101	49 89 44 24 70	 mov	 QWORD PTR [r12+112], rax
  00106	48 8b 46 68	 mov	 rax, QWORD PTR [rsi+104]
  0010a	49 89 44 24 78	 mov	 QWORD PTR [r12+120], rax
  0010f	48 8b 46 70	 mov	 rax, QWORD PTR [rsi+112]
  00113	49 89 84 24 80
	00 00 00	 mov	 QWORD PTR [r12+128], rax
  0011b	e8 00 00 00 00	 call	 PyObject_RichCompare

; 395  : 
; 396  :     PyTuple_SET_ITEM(t1, 0, NULL);
; 397  :     PyTuple_SET_ITEM(t1, 1, NULL);
; 398  :     PyTuple_SET_ITEM(t1, 2, NULL);
; 399  :     PyTuple_SET_ITEM(t2, 0, NULL);
; 400  :     PyTuple_SET_ITEM(t2, 1, NULL);
; 401  :     PyTuple_SET_ITEM(t2, 2, NULL);
; 402  : 
; 403  :     Py_DECREF(t1);

  00120	48 8b cf	 mov	 rcx, rdi
  00123	48 8b d8	 mov	 rbx, rax
  00126	33 c0		 xor	 eax, eax
  00128	48 89 47 70	 mov	 QWORD PTR [rdi+112], rax
  0012c	48 89 47 78	 mov	 QWORD PTR [rdi+120], rax
  00130	48 89 87 80 00
	00 00		 mov	 QWORD PTR [rdi+128], rax
  00137	49 89 44 24 70	 mov	 QWORD PTR [r12+112], rax
  0013c	49 89 44 24 78	 mov	 QWORD PTR [r12+120], rax
  00141	49 89 84 24 80
	00 00 00	 mov	 QWORD PTR [r12+128], rax
  00149	e8 00 00 00 00	 call	 _Py_DecRef

; 404  :     Py_DECREF(t2);

  0014e	49 8b cc	 mov	 rcx, r12
  00151	e8 00 00 00 00	 call	 _Py_DecRef

; 405  : 
; 406  :     return res;

  00156	48 8b c3	 mov	 rax, rbx
  00159	e9 64 ff ff ff	 jmp	 $LN17@slice_rich
$LN8@slice_rich:

; 359  :         Py_RETURN_NOTIMPLEMENTED;

  0015e	e8 00 00 00 00	 call	 _Py_PXCTX
  00163	85 c0		 test	 eax, eax
  00165	75 3c		 jne	 SHORT $LN13@slice_rich
  00167	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NotImplementedStruct
  0016e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00175	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0017c	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00182	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0018a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0018f	85 c0		 test	 eax, eax
  00191	75 09		 jne	 SHORT $LN12@slice_rich
  00193	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NotImplementedStruct+32, 32 ; 00000020H
  0019a	74 07		 je	 SHORT $LN13@slice_rich
$LN12@slice_rich:
  0019c	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NotImplementedStruct+80
$LN13@slice_rich:

; 407  : }

  001a3	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  001a8	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  001ad	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  001b4	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001b8	5e		 pop	 rsi
  001b9	c3		 ret	 0
slice_richcompare ENDP
_TEXT	ENDS
END
