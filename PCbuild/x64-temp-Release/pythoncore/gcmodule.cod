; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_02DPGMDCM@gc?$AA@				; `string'
PUBLIC	??_C@_0O@KIOLDMLL@get_referents?$AA@		; `string'
PUBLIC	??_C@_0O@KJKHIMJK@get_referrers?$AA@		; `string'
PUBLIC	??_C@_0L@OCAJAOPC@is_tracked?$AA@		; `string'
PUBLIC	??_C@_0M@DIAMKEKG@get_objects?$AA@		; `string'
PUBLIC	??_C@_07JHIJCABF@collect?$AA@			; `string'
PUBLIC	??_C@_0O@DAINJCFF@get_threshold?$AA@		; `string'
PUBLIC	??_C@_0O@EPJDCBCC@set_threshold?$AA@		; `string'
PUBLIC	??_C@_09EMENNEB@get_count?$AA@			; `string'
PUBLIC	??_C@_09OPCDJHHN@get_debug?$AA@			; `string'
PUBLIC	??_C@_09MBGGLGOP@set_debug?$AA@			; `string'
PUBLIC	??_C@_09KFAMMJEF@isenabled?$AA@			; `string'
PUBLIC	??_C@_07DBNODEFN@disable?$AA@			; `string'
PUBLIC	??_C@_06OFNJOBDK@enable?$AA@			; `string'
PUBLIC	??_C@_0L@JMCFNPDK@generation?$AA@		; `string'
PUBLIC	??_C@_04CLCEDBPF@time?$AA@			; `string'
PUBLIC	_PyGC_generation0
_BSS	SEGMENT
collecting DD	01H DUP (?)
	ALIGN	8

garbage	DQ	01H DUP (?)
gc_str	DQ	01H DUP (?)
callbacks DQ	01H DUP (?)
long_lived_total DQ 01H DUP (?)
long_lived_pending DQ 01H DUP (?)
tmod	DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_02DPGMDCM@gc?$AA@
CONST	SEGMENT
??_C@_02DPGMDCM@gc?$AA@ DB 'gc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KIOLDMLL@get_referents?$AA@
CONST	SEGMENT
??_C@_0O@KIOLDMLL@get_referents?$AA@ DB 'get_referents', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KJKHIMJK@get_referrers?$AA@
CONST	SEGMENT
??_C@_0O@KJKHIMJK@get_referrers?$AA@ DB 'get_referrers', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OCAJAOPC@is_tracked?$AA@
CONST	SEGMENT
??_C@_0L@OCAJAOPC@is_tracked?$AA@ DB 'is_tracked', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DIAMKEKG@get_objects?$AA@
CONST	SEGMENT
??_C@_0M@DIAMKEKG@get_objects?$AA@ DB 'get_objects', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07JHIJCABF@collect?$AA@
CONST	SEGMENT
??_C@_07JHIJCABF@collect?$AA@ DB 'collect', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DAINJCFF@get_threshold?$AA@
CONST	SEGMENT
??_C@_0O@DAINJCFF@get_threshold?$AA@ DB 'get_threshold', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EPJDCBCC@set_threshold?$AA@
CONST	SEGMENT
??_C@_0O@EPJDCBCC@set_threshold?$AA@ DB 'set_threshold', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09EMENNEB@get_count?$AA@
CONST	SEGMENT
??_C@_09EMENNEB@get_count?$AA@ DB 'get_count', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OPCDJHHN@get_debug?$AA@
CONST	SEGMENT
??_C@_09OPCDJHHN@get_debug?$AA@ DB 'get_debug', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MBGGLGOP@set_debug?$AA@
CONST	SEGMENT
??_C@_09MBGGLGOP@set_debug?$AA@ DB 'set_debug', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09KFAMMJEF@isenabled?$AA@
CONST	SEGMENT
??_C@_09KFAMMJEF@isenabled?$AA@ DB 'isenabled', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DBNODEFN@disable?$AA@
CONST	SEGMENT
??_C@_07DBNODEFN@disable?$AA@ DB 'disable', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OFNJOBDK@enable?$AA@
CONST	SEGMENT
??_C@_06OFNJOBDK@enable?$AA@ DB 'enable', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JMCFNPDK@generation?$AA@
CONST	SEGMENT
??_C@_0L@JMCFNPDK@generation?$AA@ DB 'generation', 00H	; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId_time@?2??get_time@@9@9 DQ 0000000000000000H	; `get_time'::`3'::PyId_time
	DQ	FLAT:??_C@_04CLCEDBPF@time?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_04CLCEDBPF@time?$AA@
CONST	SEGMENT
??_C@_04CLCEDBPF@time?$AA@ DB 'time', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
generations DQ	FLAT:generations
	DQ	FLAT:generations
	DQ	0000000000000000H
	DD	02bcH
	DD	00H
	DQ	FLAT:generations+32
	DQ	FLAT:generations+32
	DQ	0000000000000000H
	DD	0aH
	DD	00H
	DQ	FLAT:generations+64
	DQ	FLAT:generations+64
	DQ	0000000000000000H
	DD	0aH
	DD	00H
_PyGC_generation0 DQ FLAT:generations
enabled	DD	01H
	ORG $+4
gc_enable__doc__ DB 'enable() -> None', 0aH, 0aH, 'Enable automatic garba'
	DB	'ge collection.', 0aH, 00H
gc_disable__doc__ DB 'disable() -> None', 0aH, 0aH, 'Disable automatic ga'
	DB	'rbage collection.', 0aH, 00H
	ORG $+14
gc_isenabled__doc__ DB 'isenabled() -> status', 0aH, 0aH, 'Returns true i'
	DB	'f automatic garbage collection is enabled.', 0aH, 00H
	ORG $+15
gc_collect__doc__ DB 'collect([generation]) -> n', 0aH, 0aH, 'With no arg'
	DB	'uments, run a full collection.  The optional argument', 0aH, 'm'
	DB	'ay be an integer specifying which generation to collect.  A V'
	DB	'alueError', 0aH, 'is raised if the generation number is inval'
	DB	'id.', 0aH, 0aH, 'The number of unreachable objects is returne'
	DB	'd.', 0aH, 00H
	ORG $+3
?keywords@?1??gc_collect@@9@9 DQ FLAT:??_C@_0L@JMCFNPDK@generation?$AA@ ; `gc_collect'::`2'::keywords
	DQ	0000000000000000H
	ORG $+8
gc_set_debug__doc__ DB 'set_debug(flags) -> None', 0aH, 0aH, 'Set the gar'
	DB	'bage collection debugging flags. Debugging information is', 0aH
	DB	'written to sys.stderr.', 0aH, 0aH, 'flags is an integer and c'
	DB	'an have the following bits turned on:', 0aH, 0aH, '  DEBUG_ST'
	DB	'ATS - Print statistics during collection.', 0aH, '  DEBUG_COL'
	DB	'LECTABLE - Print collectable objects found.', 0aH, '  DEBUG_U'
	DB	'NCOLLECTABLE - Print unreachable but uncollectable objects fo'
	DB	'und.', 0aH, '  DEBUG_SAVEALL - Save objects to gc.garbage rat'
	DB	'her than freeing them.', 0aH, '  DEBUG_LEAK - Debug leaking p'
	DB	'rograms (everything but STATS).', 0aH, 00H
	ORG $+13
gc_get_debug__doc__ DB 'get_debug() -> flags', 0aH, 0aH, 'Get the garbage'
	DB	' collection debugging flags.', 0aH, 00H
	ORG $+13
gc_set_thresh__doc__ DB 'set_threshold(threshold0, [threshold1, threshold'
	DB	'2]) -> None', 0aH, 0aH, 'Sets the collection thresholds.  Set'
	DB	'ting threshold0 to zero disables', 0aH, 'collection.', 0aH, 00H
	ORG $+1
gc_get_thresh__doc__ DB 'get_threshold() -> (threshold0, threshold1, thre'
	DB	'shold2)', 0aH, 0aH, 'Return the current collection thresholds'
	DB	0aH, 00H
	ORG $+13
gc_get_count__doc__ DB 'get_count() -> (count0, count1, count2)', 0aH, 0aH
	DB	'Return the current collection counts', 0aH, 00H
	ORG $+1
gc_get_referrers__doc__ DB 'get_referrers(*objs) -> list', 0aH, 'Return t'
	DB	'he list of objects that directly refer to any of objs.', 00H
	ORG $+4
gc_get_referents__doc__ DB 'get_referents(*objs) -> list', 0aH, 'Return t'
	DB	'he list of objects that are directly referred to by objs.', 00H
	ORG $+1
gc_get_objects__doc__ DB 'get_objects() -> [...]', 0aH, 0aH, 'Return a li'
	DB	'st of objects tracked by the collector (excluding the list', 0aH
	DB	'returned).', 0aH, 00H
	ORG $+6
gc_is_tracked__doc__ DB 'is_tracked(obj) -> bool', 0aH, 0aH, 'Returns tru'
	DB	'e if the object is tracked by the garbage collector.', 0aH, 'S'
	DB	'imple atomic objects will return false.', 0aH, 00H
	ORG $+13
gc__doc__ DB	'This module provides access to the garbage collector for'
	DB	' reference cycles.', 0aH, 0aH, 'enable() -- Enable automatic '
	DB	'garbage collection.', 0aH, 'disable() -- Disable automatic ga'
	DB	'rbage collection.', 0aH, 'isenabled() -- Returns true if auto'
	DB	'matic collection is enabled.', 0aH, 'collect() -- Do a full c'
	DB	'ollection right now.', 0aH, 'get_count() -- Return the curren'
	DB	't collection counts.', 0aH, 'set_debug() -- Set debugging fla'
	DB	'gs.', 0aH, 'get_debug() -- Get debugging flags.', 0aH, 'set_t'
	DB	'hreshold() -- Set the collection thresholds.', 0aH, 'get_thre'
	DB	'shold() -- Return the current the collection thresholds.', 0aH
	DB	'get_objects() -- Return a list of all objects tracked by the '
	DB	'collector.', 0aH, 'is_tracked() -- Returns true if a given ob'
	DB	'ject is tracked.', 0aH, 'get_referrers() -- Return the list o'
	DB	'f objects that refer to an object.', 0aH, 'get_referents() --'
	DB	' Return the list of objects that an object refers to.', 0aH, 00H
GcMethods DQ	FLAT:??_C@_06OFNJOBDK@enable?$AA@
	DQ	FLAT:gc_enable
	DD	04H
	ORG $+4
	DQ	FLAT:gc_enable__doc__
	DQ	FLAT:??_C@_07DBNODEFN@disable?$AA@
	DQ	FLAT:gc_disable
	DD	04H
	ORG $+4
	DQ	FLAT:gc_disable__doc__
	DQ	FLAT:??_C@_09KFAMMJEF@isenabled?$AA@
	DQ	FLAT:gc_isenabled
	DD	04H
	ORG $+4
	DQ	FLAT:gc_isenabled__doc__
	DQ	FLAT:??_C@_09MBGGLGOP@set_debug?$AA@
	DQ	FLAT:gc_set_debug
	DD	01H
	ORG $+4
	DQ	FLAT:gc_set_debug__doc__
	DQ	FLAT:??_C@_09OPCDJHHN@get_debug?$AA@
	DQ	FLAT:gc_get_debug
	DD	04H
	ORG $+4
	DQ	FLAT:gc_get_debug__doc__
	DQ	FLAT:??_C@_09EMENNEB@get_count?$AA@
	DQ	FLAT:gc_get_count
	DD	04H
	ORG $+4
	DQ	FLAT:gc_get_count__doc__
	DQ	FLAT:??_C@_0O@EPJDCBCC@set_threshold?$AA@
	DQ	FLAT:gc_set_thresh
	DD	01H
	ORG $+4
	DQ	FLAT:gc_set_thresh__doc__
	DQ	FLAT:??_C@_0O@DAINJCFF@get_threshold?$AA@
	DQ	FLAT:gc_get_thresh
	DD	04H
	ORG $+4
	DQ	FLAT:gc_get_thresh__doc__
	DQ	FLAT:??_C@_07JHIJCABF@collect?$AA@
	DQ	FLAT:gc_collect
	DD	03H
	ORG $+4
	DQ	FLAT:gc_collect__doc__
	DQ	FLAT:??_C@_0M@DIAMKEKG@get_objects?$AA@
	DQ	FLAT:gc_get_objects
	DD	04H
	ORG $+4
	DQ	FLAT:gc_get_objects__doc__
	DQ	FLAT:??_C@_0L@OCAJAOPC@is_tracked?$AA@
	DQ	FLAT:gc_is_tracked
	DD	08H
	ORG $+4
	DQ	FLAT:gc_is_tracked__doc__
	DQ	FLAT:??_C@_0O@KJKHIMJK@get_referrers?$AA@
	DQ	FLAT:gc_get_referrers
	DD	01H
	ORG $+4
	DQ	FLAT:gc_get_referrers__doc__
	DQ	FLAT:??_C@_0O@KIOLDMLL@get_referents?$AA@
	DQ	FLAT:gc_get_referents
	DD	01H
	ORG $+4
	DQ	FLAT:gc_get_referents__doc__
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
gcmodule DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_02DPGMDCM@gc?$AA@
	DQ	FLAT:gc__doc__
	DQ	ffffffffffffffffH
	DQ	FLAT:GcMethods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\include\objimpl.h
_TEXT	ENDS
;	COMDAT _PyObject_InitHead
_TEXT	SEGMENT
op$ = 8
_PyObject_InitHead PROC					; COMDAT

; 216  :     assert(Py_TYPE(op));
; 217  :     op->is_px = _Py_NOT_PARALLEL;

  00000	48 ba 78 56 ef
	be 34 12 ad de	 mov	 rdx, -2401243008567650696 ; dead1234beef5678H

; 218  :     op->px    = _Py_NOT_PARALLEL;
; 219  :     op->slist_entry.Next = NULL;

  0000a	33 c0		 xor	 eax, eax

; 220  :     op->px_flags  = Py_PXFLAGS_ISPY;

  0000c	48 c7 41 20 01
	00 00 00	 mov	 QWORD PTR [rcx+32], 1
  00014	48 89 11	 mov	 QWORD PTR [rcx], rdx
  00017	48 89 51 08	 mov	 QWORD PTR [rcx+8], rdx
  0001b	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 221  :     op->srw_lock  = NULL;

  0001f	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 222  :     op->event     = NULL;

  00023	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 223  :     op->orig_type = NULL;

  00027	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 224  : #ifdef Py_TRACE_REFS
; 225  :     op->_ob_next = NULL;
; 226  :     op->_ob_prev = NULL;
; 227  : #else
; 228  :     op->_ob_next = _Py_NOT_PARALLEL;

  0002b	48 89 51 40	 mov	 QWORD PTR [rcx+64], rdx

; 229  :     op->_ob_prev = _Py_NOT_PARALLEL;

  0002f	48 89 51 48	 mov	 QWORD PTR [rcx+72], rdx

; 230  : #endif
; 231  : }

  00033	c3		 ret	 0
_PyObject_InitHead ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@JKHPLOII@PyObject_INIT?$AA@		; `string'
PUBLIC	??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@ ; `string'
EXTRN	_Px_NewReference:PROC
EXTRN	_PxObject_Init:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_INIT DD imagerel PyObject_INIT
	DD	imagerel PyObject_INIT+185
	DD	imagerel $unwind$PyObject_INIT
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_INIT DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0O@JKHPLOII@PyObject_INIT?$AA@
CONST	SEGMENT
??_C@_0O@JKHPLOII@PyObject_INIT?$AA@ DB 'PyObject_INIT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@
CONST	SEGMENT
??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@ DB 'c:\src\pypa'
	DB	'rallel\include\objimpl.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyObject_INIT
_TEXT	SEGMENT
op$ = 64
tp$ = 72
PyObject_INIT PROC					; COMDAT

; 236  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fa	 mov	 rdi, rdx
  0000d	48 8b d9	 mov	 rbx, rcx

; 237  :     Px_RETURN(_PxObject_Init(op, tp))

  00010	e8 00 00 00 00	 call	 _Py_PXCTX
  00015	85 c0		 test	 eax, eax
  00017	74 15		 je	 SHORT $LN1@PyObject_I
  00019	48 8b d7	 mov	 rdx, rdi
  0001c	48 8b cb	 mov	 rcx, rbx

; 242  : }

  0001f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00024	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00028	5f		 pop	 rdi
  00029	e9 00 00 00 00	 jmp	 _PxObject_Init
$LN1@PyObject_I:

; 238  :     Py_TYPE(op) = tp;
; 239  :     _PyObject_InitHead(op);

  0002e	48 b9 78 56 ef
	be 34 12 ad de	 mov	 rcx, -2401243008567650696 ; dead1234beef5678H
  00038	33 c0		 xor	 eax, eax

; 240  :     _Py_NewReference(op);

  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@
  00041	48 89 0b	 mov	 QWORD PTR [rbx], rcx
  00044	48 89 4b 08	 mov	 QWORD PTR [rbx+8], rcx
  00048	48 89 4b 40	 mov	 QWORD PTR [rbx+64], rcx
  0004c	48 89 4b 48	 mov	 QWORD PTR [rbx+72], rcx
  00050	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@JKHPLOII@PyObject_INIT?$AA@
  00057	4c 8b cb	 mov	 r9, rbx
  0005a	41 b8 f0 00 00
	00		 mov	 r8d, 240		; 000000f0H
  00060	48 89 7b 58	 mov	 QWORD PTR [rbx+88], rdi
  00064	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax
  00068	48 c7 43 20 01
	00 00 00	 mov	 QWORD PTR [rbx+32], 1
  00070	48 89 43 28	 mov	 QWORD PTR [rbx+40], rax
  00074	48 89 43 30	 mov	 QWORD PTR [rbx+48], rax
  00078	48 89 43 38	 mov	 QWORD PTR [rbx+56], rax
  0007c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00084	e8 00 00 00 00	 call	 _PyParallel_Guard
  00089	85 c0		 test	 eax, eax
  0008b	74 16		 je	 SHORT $LN4@PyObject_I
  0008d	48 8b cb	 mov	 rcx, rbx
  00090	e8 00 00 00 00	 call	 _Px_NewReference

; 241  :     return op;

  00095	48 8b c3	 mov	 rax, rbx

; 242  : }

  00098	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0009d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a1	5f		 pop	 rdi
  000a2	c3		 ret	 0
$LN4@PyObject_I:

; 240  :     _Py_NewReference(op);

  000a3	48 c7 43 50 01
	00 00 00	 mov	 QWORD PTR [rbx+80], 1

; 241  :     return op;

  000ab	48 8b c3	 mov	 rax, rbx

; 242  : }

  000ae	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000b3	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b7	5f		 pop	 rdi
  000b8	c3		 ret	 0
PyObject_INIT ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@PCKAICOI@PyObject_INIT_VAR?$AA@	; `string'
EXTRN	_PxObject_InitVar:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_INIT_VAR DD imagerel PyObject_INIT_VAR
	DD	imagerel PyObject_INIT_VAR+215
	DD	imagerel $unwind$PyObject_INIT_VAR
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_INIT_VAR DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT ??_C@_0BC@PCKAICOI@PyObject_INIT_VAR?$AA@
CONST	SEGMENT
??_C@_0BC@PCKAICOI@PyObject_INIT_VAR?$AA@ DB 'PyObject_INIT_VAR', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyObject_INIT_VAR
_TEXT	SEGMENT
op$ = 64
tp$ = 72
n$ = 80
PyObject_INIT_VAR PROC					; COMDAT

; 247  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 248  :     Px_RETURN(_PxObject_InitVar(op, tp, n))

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1d		 je	 SHORT $LN1@PyObject_I@2
  00021	4c 8b c7	 mov	 r8, rdi
  00024	48 8b d6	 mov	 rdx, rsi
  00027	48 8b cb	 mov	 rcx, rbx

; 254  : }

  0002a	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0002f	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00034	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00038	5f		 pop	 rdi
  00039	e9 00 00 00 00	 jmp	 _PxObject_InitVar
$LN1@PyObject_I@2:

; 249  :     Py_SIZE(op) = n;
; 250  :     Py_TYPE(op) = tp;
; 251  :     _PyObject_InitHead((PyObject *)op);

  0003e	48 b9 78 56 ef
	be 34 12 ad de	 mov	 rcx, -2401243008567650696 ; dead1234beef5678H
  00048	33 c0		 xor	 eax, eax

; 252  :     _Py_NewReference((PyObject *)op);

  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@
  00051	48 89 0b	 mov	 QWORD PTR [rbx], rcx
  00054	48 89 4b 08	 mov	 QWORD PTR [rbx+8], rcx
  00058	48 89 4b 40	 mov	 QWORD PTR [rbx+64], rcx
  0005c	48 89 4b 48	 mov	 QWORD PTR [rbx+72], rcx
  00060	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@PCKAICOI@PyObject_INIT_VAR?$AA@
  00067	4c 8b cb	 mov	 r9, rbx
  0006a	41 b8 fc 00 00
	00		 mov	 r8d, 252		; 000000fcH
  00070	48 89 7b 60	 mov	 QWORD PTR [rbx+96], rdi
  00074	48 89 73 58	 mov	 QWORD PTR [rbx+88], rsi
  00078	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax
  0007c	48 c7 43 20 01
	00 00 00	 mov	 QWORD PTR [rbx+32], 1
  00084	48 89 43 28	 mov	 QWORD PTR [rbx+40], rax
  00088	48 89 43 30	 mov	 QWORD PTR [rbx+48], rax
  0008c	48 89 43 38	 mov	 QWORD PTR [rbx+56], rax
  00090	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00098	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009d	85 c0		 test	 eax, eax
  0009f	74 1b		 je	 SHORT $LN4@PyObject_I@2
  000a1	48 8b cb	 mov	 rcx, rbx
  000a4	e8 00 00 00 00	 call	 _Px_NewReference

; 253  :     return op;

  000a9	48 8b c3	 mov	 rax, rbx

; 254  : }

  000ac	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000b1	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000b6	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ba	5f		 pop	 rdi
  000bb	c3		 ret	 0
$LN4@PyObject_I@2:
  000bc	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000c1	48 c7 43 50 01
	00 00 00	 mov	 QWORD PTR [rbx+80], 1
  000c9	48 8b c3	 mov	 rax, rbx
  000cc	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000d1	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d5	5f		 pop	 rdi
  000d6	c3		 ret	 0
PyObject_INIT_VAR ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@IIDECAFI@gc_list_init?$AA@		; `string'
PUBLIC	??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@ ; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\gcmodule.c
pdata	SEGMENT
$pdata$gc_list_init DD imagerel gc_list_init
	DD	imagerel gc_list_init+59
	DD	imagerel $unwind$gc_list_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_list_init DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0N@IIDECAFI@gc_list_init?$AA@
CONST	SEGMENT
??_C@_0N@IIDECAFI@gc_list_init?$AA@ DB 'gc_list_init', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
CONST	SEGMENT
??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@ DB '..\Modules\gcmodul'
	DB	'e.c', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT gc_list_init
_TEXT	SEGMENT
list$ = 48
gc_list_init PROC					; COMDAT

; 237  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 238  :     Py_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN4@gc_list_in
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@IIDECAFI@gc_list_init?$AA@
  00020	45 33 c9	 xor	 r9d, r9d
  00023	41 b8 ee 00 00
	00		 mov	 r8d, 238		; 000000eeH
  00029	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN4@gc_list_in:

; 240  :     list->gc.gc_next = list;

  0002e	48 89 1b	 mov	 QWORD PTR [rbx], rbx

; 239  :     list->gc.gc_prev = list;

  00031	48 89 5b 08	 mov	 QWORD PTR [rbx+8], rbx

; 241  : }

  00035	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00039	5b		 pop	 rbx
  0003a	c3		 ret	 0
gc_list_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@CNKCONLH@gc_list_is_empty?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$gc_list_is_empty DD imagerel gc_list_is_empty
	DD	imagerel gc_list_is_empty+60
	DD	imagerel $unwind$gc_list_is_empty
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_list_is_empty DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0BB@CNKCONLH@gc_list_is_empty?$AA@
CONST	SEGMENT
??_C@_0BB@CNKCONLH@gc_list_is_empty?$AA@ DB 'gc_list_is_empty', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT gc_list_is_empty
_TEXT	SEGMENT
list$ = 48
gc_list_is_empty PROC					; COMDAT

; 245  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 246  :     Py_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN1@gc_list_is
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@CNKCONLH@gc_list_is_empty?$AA@
  00020	45 33 c9	 xor	 r9d, r9d
  00023	41 b8 f6 00 00
	00		 mov	 r8d, 246		; 000000f6H
  00029	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@gc_list_is:

; 247  :     return (list->gc.gc_next == list);

  0002e	33 c0		 xor	 eax, eax
  00030	48 39 1b	 cmp	 QWORD PTR [rbx], rbx
  00033	0f 94 c0	 sete	 al

; 248  : }

  00036	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003a	5b		 pop	 rbx
  0003b	c3		 ret	 0
gc_list_is_empty ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@HMHMLKAJ@gc_list_remove?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$gc_list_remove DD imagerel gc_list_remove
	DD	imagerel gc_list_remove+80
	DD	imagerel $unwind$gc_list_remove
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_list_remove DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0P@HMHMLKAJ@gc_list_remove?$AA@
CONST	SEGMENT
??_C@_0P@HMHMLKAJ@gc_list_remove?$AA@ DB 'gc_list_remove', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT gc_list_remove
_TEXT	SEGMENT
node$ = 48
gc_list_remove PROC					; COMDAT

; 266  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 267  :     Py_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN1@gc_list_re
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@HMHMLKAJ@gc_list_remove?$AA@
  00020	45 33 c9	 xor	 r9d, r9d
  00023	41 b8 0b 01 00
	00		 mov	 r8d, 267		; 0000010bH
  00029	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@gc_list_re:

; 268  :     node->gc.gc_prev->gc.gc_next = node->gc.gc_next;

  0002e	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00031	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  00035	48 89 01	 mov	 QWORD PTR [rcx], rax

; 269  :     node->gc.gc_next->gc.gc_prev = node->gc.gc_prev;

  00038	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0003b	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  0003f	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 270  :     node->gc.gc_next = NULL; /* object is not currently tracked */

  00043	48 c7 03 00 00
	00 00		 mov	 QWORD PTR [rbx], 0

; 271  : }

  0004a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004e	5b		 pop	 rbx
  0004f	c3		 ret	 0
gc_list_remove ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@IBKLCGKA@gc_list_move?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$gc_list_move DD imagerel gc_list_move
	DD	imagerel gc_list_move+96
	DD	imagerel $unwind$gc_list_move
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_list_move DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0N@IBKLCGKA@gc_list_move?$AA@
CONST	SEGMENT
??_C@_0N@IBKLCGKA@gc_list_move?$AA@ DB 'gc_list_move', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT gc_list_move
_TEXT	SEGMENT
node$ = 48
list$ = 56
gc_list_move PROC					; COMDAT

; 279  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fa	 mov	 rdi, rdx
  0000d	48 8b d9	 mov	 rbx, rcx

; 280  :     PyGC_Head *new_prev;
; 281  :     PyGC_Head *current_prev;
; 282  :     PyGC_Head *current_next;
; 283  :     Py_GUARD

  00010	e8 00 00 00 00	 call	 _Py_PXCTX
  00015	85 c0		 test	 eax, eax
  00017	74 1c		 je	 SHORT $LN1@gc_list_mo
  00019	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@IBKLCGKA@gc_list_move?$AA@
  00027	45 33 c9	 xor	 r9d, r9d
  0002a	41 b8 1b 01 00
	00		 mov	 r8d, 283		; 0000011bH
  00030	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@gc_list_mo:

; 284  :     current_prev = node->gc.gc_prev;
; 285  :     current_next = node->gc.gc_next;

  00035	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00038	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]

; 286  :     /* Unlink from current list. */
; 287  :     current_prev->gc.gc_next = current_next;

  0003c	48 89 01	 mov	 QWORD PTR [rcx], rax

; 288  :     current_next->gc.gc_prev = current_prev;

  0003f	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 289  :     /* Relink at end of new list. */
; 290  :     new_prev = node->gc.gc_prev = list->gc.gc_prev;

  00043	48 8b 47 08	 mov	 rax, QWORD PTR [rdi+8]
  00047	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax

; 291  :     new_prev->gc.gc_next = list->gc.gc_prev = node;

  0004b	48 89 5f 08	 mov	 QWORD PTR [rdi+8], rbx
  0004f	48 89 18	 mov	 QWORD PTR [rax], rbx

; 292  :     node->gc.gc_next = list;

  00052	48 89 3b	 mov	 QWORD PTR [rbx], rdi

; 293  : }

  00055	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005e	5f		 pop	 rdi
  0005f	c3		 ret	 0
gc_list_move ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@IILMMLE@gc_list_merge?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$gc_list_merge DD imagerel gc_list_merge
	DD	imagerel gc_list_merge+108
	DD	imagerel $unwind$gc_list_merge
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_list_merge DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0O@IILMMLE@gc_list_merge?$AA@
CONST	SEGMENT
??_C@_0O@IILMMLE@gc_list_merge?$AA@ DB 'gc_list_merge', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT gc_list_merge
_TEXT	SEGMENT
from$ = 48
to$ = 56
gc_list_merge PROC					; COMDAT

; 298  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fa	 mov	 rdi, rdx
  0000d	48 8b d9	 mov	 rbx, rcx

; 299  :     PyGC_Head *tail;
; 300  :     Py_GUARD

  00010	e8 00 00 00 00	 call	 _Py_PXCTX
  00015	85 c0		 test	 eax, eax
  00017	74 1c		 je	 SHORT $LN2@gc_list_me
  00019	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@IILMMLE@gc_list_merge?$AA@
  00027	45 33 c9	 xor	 r9d, r9d
  0002a	41 b8 2c 01 00
	00		 mov	 r8d, 300		; 0000012cH
  00030	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN2@gc_list_me:

; 301  :     assert(from != to);
; 302  :     if (!gc_list_is_empty(from)) {

  00035	48 8b cb	 mov	 rcx, rbx
  00038	e8 00 00 00 00	 call	 gc_list_is_empty
  0003d	85 c0		 test	 eax, eax
  0003f	75 19		 jne	 SHORT $LN1@gc_list_me

; 303  :         tail = to->gc.gc_prev;
; 304  :         tail->gc.gc_next = from->gc.gc_next;

  00041	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00044	48 8b 4f 08	 mov	 rcx, QWORD PTR [rdi+8]
  00048	48 89 01	 mov	 QWORD PTR [rcx], rax

; 305  :         tail->gc.gc_next->gc.gc_prev = tail;

  0004b	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 306  :         to->gc.gc_prev = from->gc.gc_prev;

  0004f	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  00053	48 89 47 08	 mov	 QWORD PTR [rdi+8], rax

; 307  :         to->gc.gc_prev->gc.gc_next = to;

  00057	48 89 38	 mov	 QWORD PTR [rax], rdi
$LN1@gc_list_me:

; 308  :     }
; 309  :     gc_list_init(from);

  0005a	48 8b cb	 mov	 rcx, rbx

; 310  : }

  0005d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00062	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00066	5f		 pop	 rdi
  00067	e9 00 00 00 00	 jmp	 gc_list_init
gc_list_merge ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@HCAKKJPL@gc_list_size?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$gc_list_size DD imagerel gc_list_size
	DD	imagerel gc_list_size+89
	DD	imagerel $unwind$gc_list_size
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_list_size DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0N@HCAKKJPL@gc_list_size?$AA@
CONST	SEGMENT
??_C@_0N@HCAKKJPL@gc_list_size?$AA@ DB 'gc_list_size', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT gc_list_size
_TEXT	SEGMENT
list$ = 48
gc_list_size PROC					; COMDAT

; 314  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f9	 mov	 rdi, rcx

; 315  :     PyGC_Head *gc;
; 316  :     Py_ssize_t n = 0;

  0000d	33 db		 xor	 ebx, ebx

; 317  :     Py_GUARD

  0000f	e8 00 00 00 00	 call	 _Py_PXCTX
  00014	85 c0		 test	 eax, eax
  00016	74 1c		 je	 SHORT $LN4@gc_list_si
  00018	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  0001f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@HCAKKJPL@gc_list_size?$AA@
  00026	45 33 c9	 xor	 r9d, r9d
  00029	41 b8 3d 01 00
	00		 mov	 r8d, 317		; 0000013dH
  0002f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN4@gc_list_si:

; 318  :     for (gc = list->gc.gc_next; gc != list; gc = gc->gc.gc_next) {

  00034	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  00037	48 3b cf	 cmp	 rcx, rdi
  0003a	74 0f		 je	 SHORT $LN9@gc_list_si
  0003c	0f 1f 40 00	 npad	 4
$LL3@gc_list_si:
  00040	48 8b 09	 mov	 rcx, QWORD PTR [rcx]

; 319  :         n++;

  00043	48 ff c3	 inc	 rbx
  00046	48 3b cf	 cmp	 rcx, rdi
  00049	75 f5		 jne	 SHORT $LL3@gc_list_si
$LN9@gc_list_si:

; 320  :     }
; 321  :     return n;

  0004b	48 8b c3	 mov	 rax, rbx

; 322  : }

  0004e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5f		 pop	 rdi
  00058	c3		 ret	 0
gc_list_size ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@NHOAKINH@append_objects?$AA@		; `string'
EXTRN	PyList_Append:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$append_objects DD imagerel append_objects
	DD	imagerel append_objects+145
	DD	imagerel $unwind$append_objects
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$append_objects DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0P@NHOAKINH@append_objects?$AA@
CONST	SEGMENT
??_C@_0P@NHOAKINH@append_objects?$AA@ DB 'append_objects', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT append_objects
_TEXT	SEGMENT
py_list$ = 48
gc_list$ = 56
append_objects PROC					; COMDAT

; 329  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fa	 mov	 rdi, rdx
  00012	48 8b f1	 mov	 rsi, rcx

; 330  :     PyGC_Head *gc;
; 331  :     Py_GUARD

  00015	e8 00 00 00 00	 call	 _Py_PXCTX
  0001a	85 c0		 test	 eax, eax
  0001c	74 1c		 je	 SHORT $LN6@append_obj
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@NHOAKINH@append_objects?$AA@
  0002c	45 33 c9	 xor	 r9d, r9d
  0002f	41 b8 4b 01 00
	00		 mov	 r8d, 331		; 0000014bH
  00035	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN6@append_obj:

; 332  :     for (gc = gc_list->gc.gc_next; gc != gc_list; gc = gc->gc.gc_next) {

  0003a	48 8b 1f	 mov	 rbx, QWORD PTR [rdi]
  0003d	48 3b df	 cmp	 rbx, rdi
  00040	74 2a		 je	 SHORT $LN14@append_obj
$LL5@append_obj:

; 333  :         PyObject *op = FROM_GC(gc);

  00042	e8 00 00 00 00	 call	 _Py_PXCTX
  00047	85 c0		 test	 eax, eax
  00049	74 04		 je	 SHORT $LN9@append_obj
  0004b	33 d2		 xor	 edx, edx
  0004d	eb 04		 jmp	 SHORT $LN10@append_obj
$LN9@append_obj:
  0004f	48 8d 53 18	 lea	 rdx, QWORD PTR [rbx+24]
$LN10@append_obj:

; 334  :         if (op != py_list) {

  00053	48 3b d6	 cmp	 rdx, rsi
  00056	74 0c		 je	 SHORT $LN4@append_obj

; 335  :             if (PyList_Append(py_list, op)) {

  00058	48 8b ce	 mov	 rcx, rsi
  0005b	e8 00 00 00 00	 call	 PyList_Append
  00060	85 c0		 test	 eax, eax
  00062	75 1a		 jne	 SHORT $LN12@append_obj
$LN4@append_obj:

; 332  :     for (gc = gc_list->gc.gc_next; gc != gc_list; gc = gc->gc.gc_next) {

  00064	48 8b 1b	 mov	 rbx, QWORD PTR [rbx]
  00067	48 3b df	 cmp	 rbx, rdi
  0006a	75 d6		 jne	 SHORT $LL5@append_obj
$LN14@append_obj:

; 336  :                 return -1; /* exception */
; 337  :             }
; 338  :         }
; 339  :     }
; 340  :     return 0;

  0006c	33 c0		 xor	 eax, eax

; 341  : }

  0006e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00073	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00078	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007c	5f		 pop	 rdi
  0007d	c3		 ret	 0
$LN12@append_obj:
  0007e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00083	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00088	83 c8 ff	 or	 eax, -1
  0008b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008f	5f		 pop	 rdi
  00090	c3		 ret	 0
append_objects ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@JOBLMDFJ@update_refs?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$update_refs DD imagerel update_refs
	DD	imagerel update_refs+108
	DD	imagerel $unwind$update_refs
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$update_refs DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0M@JOBLMDFJ@update_refs?$AA@
CONST	SEGMENT
??_C@_0M@JOBLMDFJ@update_refs?$AA@ DB 'update_refs', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT update_refs
_TEXT	SEGMENT
containers$ = 48
update_refs PROC					; COMDAT

; 352  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f9	 mov	 rdi, rcx

; 353  :     PyGC_Head *gc;
; 354  :     Py_GUARD

  0000d	e8 00 00 00 00	 call	 _Py_PXCTX
  00012	85 c0		 test	 eax, eax
  00014	74 1c		 je	 SHORT $LN4@update_ref
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@JOBLMDFJ@update_refs?$AA@
  00024	45 33 c9	 xor	 r9d, r9d
  00027	41 b8 62 01 00
	00		 mov	 r8d, 354		; 00000162H
  0002d	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN4@update_ref:

; 355  :     gc = containers->gc.gc_next;

  00032	48 8b 1f	 mov	 rbx, QWORD PTR [rdi]

; 356  :     for (; gc != containers; gc = gc->gc.gc_next) {

  00035	48 3b df	 cmp	 rbx, rdi
  00038	74 27		 je	 SHORT $LN1@update_ref
  0003a	66 0f 1f 44 00
	00		 npad	 6
$LL3@update_ref:

; 357  :         assert(gc->gc.gc_refs == GC_REACHABLE);
; 358  :         gc->gc.gc_refs = Py_REFCNT(FROM_GC(gc));

  00040	e8 00 00 00 00	 call	 _Py_PXCTX
  00045	85 c0		 test	 eax, eax
  00047	74 04		 je	 SHORT $LN7@update_ref
  00049	33 c0		 xor	 eax, eax
  0004b	eb 04		 jmp	 SHORT $LN8@update_ref
$LN7@update_ref:
  0004d	48 8d 43 18	 lea	 rax, QWORD PTR [rbx+24]
$LN8@update_ref:
  00051	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00055	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax
  00059	48 8b 1b	 mov	 rbx, QWORD PTR [rbx]
  0005c	48 3b df	 cmp	 rbx, rdi
  0005f	75 df		 jne	 SHORT $LL3@update_ref
$LN1@update_ref:

; 359  :         /* Python's cyclic gc should never see an incoming refcount
; 360  :          * of 0:  if something decref'ed to 0, it should have been
; 361  :          * deallocated immediately at that time.
; 362  :          * Possible cause (if the assert triggers):  a tp_dealloc
; 363  :          * routine left a gc-aware object tracked during its teardown
; 364  :          * phase, and did something-- or allowed something to happen --
; 365  :          * that called back into Python.  gc can trigger then, and may
; 366  :          * see the still-tracked dying object.  Before this assert
; 367  :          * was added, such mistakes went on to allow gc to try to
; 368  :          * delete the object again.  In a debug build, that caused
; 369  :          * a mysterious segfault, when _Py_ForgetReference tried
; 370  :          * to remove the object from the doubly-linked list of all
; 371  :          * objects a second time.  In a release build, an actual
; 372  :          * double deallocation occurred, which leads to corruption
; 373  :          * of the allocator's internal bookkeeping pointers.  That's
; 374  :          * so serious that maybe this should be a release-build
; 375  :          * check instead of an assert?
; 376  :          */
; 377  :         assert(gc->gc.gc_refs != 0);
; 378  :     }
; 379  : }

  00061	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00066	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006a	5f		 pop	 rdi
  0006b	c3		 ret	 0
update_refs ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@HBMFHCDJ@visit_decref?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$visit_decref DD imagerel visit_decref
	DD	imagerel visit_decref+206
	DD	imagerel $unwind$visit_decref
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$visit_decref DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0N@HBMFHCDJ@visit_decref?$AA@
CONST	SEGMENT
??_C@_0N@HBMFHCDJ@visit_decref?$AA@ DB 'visit_decref', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT visit_decref
_TEXT	SEGMENT
op$ = 64
data$ = 72
tv83 = 80
visit_decref PROC					; COMDAT

; 384  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 385  :     Py_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN3@visit_decr
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@HBMFHCDJ@visit_decref?$AA@
  00020	45 33 c9	 xor	 r9d, r9d
  00023	41 b8 81 01 00
	00		 mov	 r8d, 385		; 00000181H
  00029	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@visit_decr:

; 386  :     assert(op != NULL);
; 387  :     if (PyObject_IS_GC(op)) {

  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@HBMFHCDJ@visit_decref?$AA@
  0003c	4c 8b cb	 mov	 r9, rbx
  0003f	41 b8 83 01 00
	00		 mov	 r8d, 387		; 00000183H
  00045	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0004d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00052	85 c0		 test	 eax, eax
  00054	75 70		 jne	 SHORT $LN17@visit_decr
  00056	e8 00 00 00 00	 call	 _Py_PXCTX
  0005b	85 c0		 test	 eax, eax
  0005d	75 67		 jne	 SHORT $LN17@visit_decr
  0005f	48 8b 4b 58	 mov	 rcx, QWORD PTR [rbx+88]
  00063	8b 81 00 01 00
	00		 mov	 eax, DWORD PTR [rcx+256]
  00069	c1 e8 0e	 shr	 eax, 14
  0006c	83 e0 01	 and	 eax, 1
  0006f	74 55		 je	 SHORT $LN17@visit_decr
  00071	48 8b 81 a0 01
	00 00		 mov	 rax, QWORD PTR [rcx+416]
  00078	48 85 c0	 test	 rax, rax
  0007b	74 09		 je	 SHORT $LN15@visit_decr
  0007d	48 8b cb	 mov	 rcx, rbx
  00080	ff d0		 call	 rax
  00082	85 c0		 test	 eax, eax

; 395  :             gc->gc.gc_refs--;

  00084	74 40		 je	 SHORT $LN17@visit_decr
$LN15@visit_decr:

; 388  :         PyGC_Head *gc = AS_GC(op);

  00086	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  0008d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@HBMFHCDJ@visit_decref?$AA@
  00094	4c 8b cb	 mov	 r9, rbx
  00097	41 b8 84 01 00
	00		 mov	 r8d, 388		; 00000184H
  0009d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000a5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000aa	85 c0		 test	 eax, eax
  000ac	74 04		 je	 SHORT $LN13@visit_decr
  000ae	33 c9		 xor	 ecx, ecx
  000b0	eb 04		 jmp	 SHORT $LN14@visit_decr
$LN13@visit_decr:
  000b2	48 8d 4b e8	 lea	 rcx, QWORD PTR [rbx-24]
$LN14@visit_decr:

; 389  :         /* We're only interested in gc_refs for objects in the
; 390  :          * generation being collected, which can be recognized
; 391  :          * because only they have positive gc_refs.
; 392  :          */
; 393  :         assert(gc->gc.gc_refs != 0); /* else refcount was too small */
; 394  :         if (gc->gc.gc_refs > 0)

  000b6	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  000ba	48 85 c0	 test	 rax, rax
  000bd	7e 07		 jle	 SHORT $LN17@visit_decr

; 395  :             gc->gc.gc_refs--;

  000bf	48 ff c8	 dec	 rax
  000c2	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
$LN17@visit_decr:

; 396  :     }
; 397  :     return 0;

  000c6	33 c0		 xor	 eax, eax

; 398  : }

  000c8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000cc	5b		 pop	 rbx
  000cd	c3		 ret	 0
visit_decref ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@FAJOAMOO@subtract_refs?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$subtract_refs DD imagerel subtract_refs
	DD	imagerel subtract_refs+58
	DD	imagerel $unwind$subtract_refs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$subtract_refs DD imagerel subtract_refs+58
	DD	imagerel subtract_refs+134
	DD	imagerel $chain$0$subtract_refs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$subtract_refs DD imagerel subtract_refs+134
	DD	imagerel subtract_refs+145
	DD	imagerel $chain$1$subtract_refs
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$subtract_refs DD 021H
	DD	imagerel subtract_refs
	DD	imagerel subtract_refs+58
	DD	imagerel $unwind$subtract_refs
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$subtract_refs DD 020521H
	DD	066405H
	DD	imagerel subtract_refs
	DD	imagerel subtract_refs+58
	DD	imagerel $unwind$subtract_refs
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$subtract_refs DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0O@FAJOAMOO@subtract_refs?$AA@
CONST	SEGMENT
??_C@_0O@FAJOAMOO@subtract_refs?$AA@ DB 'subtract_refs', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT subtract_refs
_TEXT	SEGMENT
containers$ = 48
subtract_refs PROC					; COMDAT

; 407  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f9	 mov	 rdi, rcx

; 408  :     traverseproc traverse;
; 409  :     PyGC_Head *gc;
; 410  :     Py_GUARD

  0000d	e8 00 00 00 00	 call	 _Py_PXCTX
  00012	85 c0		 test	 eax, eax
  00014	74 1c		 je	 SHORT $LN4@subtract_r
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@FAJOAMOO@subtract_refs?$AA@
  00024	45 33 c9	 xor	 r9d, r9d
  00027	41 b8 9a 01 00
	00		 mov	 r8d, 410		; 0000019aH
  0002d	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN4@subtract_r:

; 411  :     gc = containers->gc.gc_next;

  00032	48 8b 1f	 mov	 rbx, QWORD PTR [rdi]

; 412  :     for (; gc != containers; gc=gc->gc.gc_next) {

  00035	48 3b df	 cmp	 rbx, rdi
  00038	74 4c		 je	 SHORT $LN1@subtract_r
  0003a	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  0003f	90		 npad	 1
$LL3@subtract_r:

; 413  :         traverse = Py_TYPE(FROM_GC(gc))->tp_traverse;

  00040	e8 00 00 00 00	 call	 _Py_PXCTX
  00045	85 c0		 test	 eax, eax
  00047	74 04		 je	 SHORT $LN7@subtract_r
  00049	33 c0		 xor	 eax, eax
  0004b	eb 04		 jmp	 SHORT $LN8@subtract_r
$LN7@subtract_r:
  0004d	48 8d 43 18	 lea	 rax, QWORD PTR [rbx+24]
$LN8@subtract_r:
  00051	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00055	48 8b b0 10 01
	00 00		 mov	 rsi, QWORD PTR [rax+272]

; 414  :         (void) traverse(FROM_GC(gc),
; 415  :                        (visitproc)visit_decref,
; 416  :                        NULL);

  0005c	e8 00 00 00 00	 call	 _Py_PXCTX
  00061	85 c0		 test	 eax, eax
  00063	74 04		 je	 SHORT $LN9@subtract_r
  00065	33 c9		 xor	 ecx, ecx
  00067	eb 04		 jmp	 SHORT $LN10@subtract_r
$LN9@subtract_r:
  00069	48 8d 4b 18	 lea	 rcx, QWORD PTR [rbx+24]
$LN10@subtract_r:
  0006d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:visit_decref
  00074	45 33 c0	 xor	 r8d, r8d
  00077	ff d6		 call	 rsi
  00079	48 8b 1b	 mov	 rbx, QWORD PTR [rbx]
  0007c	48 3b df	 cmp	 rbx, rdi
  0007f	75 bf		 jne	 SHORT $LL3@subtract_r
  00081	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
$LN1@subtract_r:

; 417  :     }
; 418  : }

  00086	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0008b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008f	5f		 pop	 rdi
  00090	c3		 ret	 0
subtract_refs ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@LCFHMPGN@visit_reachable?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$visit_reachable DD imagerel visit_reachable
	DD	imagerel visit_reachable+240
	DD	imagerel $unwind$visit_reachable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$visit_reachable DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0BA@LCFHMPGN@visit_reachable?$AA@
CONST	SEGMENT
??_C@_0BA@LCFHMPGN@visit_reachable?$AA@ DB 'visit_reachable', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT visit_reachable
_TEXT	SEGMENT
op$ = 64
reachable$ = 72
tv83 = 80
visit_reachable PROC					; COMDAT

; 423  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fa	 mov	 rdi, rdx
  0000d	48 8b d9	 mov	 rbx, rcx

; 424  :     Py_GUARD

  00010	e8 00 00 00 00	 call	 _Py_PXCTX
  00015	85 c0		 test	 eax, eax
  00017	74 1c		 je	 SHORT $LN6@visit_reac
  00019	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@LCFHMPGN@visit_reachable?$AA@
  00027	45 33 c9	 xor	 r9d, r9d
  0002a	41 b8 a8 01 00
	00		 mov	 r8d, 424		; 000001a8H
  00030	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN6@visit_reac:

; 425  :     if (PyObject_IS_GC(op)) {

  00035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@LCFHMPGN@visit_reachable?$AA@
  00043	4c 8b cb	 mov	 r9, rbx
  00046	41 b8 a9 01 00
	00		 mov	 r8d, 425		; 000001a9H
  0004c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00054	e8 00 00 00 00	 call	 _PyParallel_Guard
  00059	85 c0		 test	 eax, eax
  0005b	0f 85 82 00 00
	00		 jne	 $LN20@visit_reac
  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	75 79		 jne	 SHORT $LN20@visit_reac
  0006a	48 8b 4b 58	 mov	 rcx, QWORD PTR [rbx+88]
  0006e	8b 81 00 01 00
	00		 mov	 eax, DWORD PTR [rcx+256]
  00074	c1 e8 0e	 shr	 eax, 14
  00077	83 e0 01	 and	 eax, 1
  0007a	74 67		 je	 SHORT $LN20@visit_reac
  0007c	48 8b 81 a0 01
	00 00		 mov	 rax, QWORD PTR [rcx+416]
  00083	48 85 c0	 test	 rax, rax
  00086	74 09		 je	 SHORT $LN18@visit_reac
  00088	48 8b cb	 mov	 rcx, rbx
  0008b	ff d0		 call	 rax
  0008d	85 c0		 test	 eax, eax

; 445  :             gc->gc.gc_refs = 1;

  0008f	74 52		 je	 SHORT $LN20@visit_reac
$LN18@visit_reac:

; 426  :         PyGC_Head *gc = AS_GC(op);

  00091	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@LCFHMPGN@visit_reachable?$AA@
  0009f	4c 8b cb	 mov	 r9, rbx
  000a2	41 b8 aa 01 00
	00		 mov	 r8d, 426		; 000001aaH
  000a8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000b0	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b5	85 c0		 test	 eax, eax
  000b7	74 04		 je	 SHORT $LN16@visit_reac
  000b9	33 db		 xor	 ebx, ebx
  000bb	eb 04		 jmp	 SHORT $LN17@visit_reac
$LN16@visit_reac:
  000bd	48 83 c3 e8	 add	 rbx, -24
$LN17@visit_reac:

; 427  :         const Py_ssize_t gc_refs = gc->gc.gc_refs;

  000c1	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]

; 428  : 
; 429  :         if (gc_refs == 0) {

  000c5	48 85 c0	 test	 rax, rax

; 430  :             /* This is in move_unreachable's 'young' list, but
; 431  :              * the traversal hasn't yet gotten to it.  All
; 432  :              * we need to do is tell move_unreachable that it's
; 433  :              * reachable.
; 434  :              */
; 435  :             gc->gc.gc_refs = 1;

  000c8	74 11		 je	 SHORT $LN24@visit_reac

; 436  :         }
; 437  :         else if (gc_refs == GC_TENTATIVELY_UNREACHABLE) {

  000ca	48 83 f8 fc	 cmp	 rax, -4
  000ce	75 13		 jne	 SHORT $LN20@visit_reac

; 438  :             /* This had gc_refs = 0 when move_unreachable got
; 439  :              * to it, but turns out it's reachable after all.
; 440  :              * Move it back to move_unreachable's 'young' list,
; 441  :              * and move_unreachable will eventually get to it
; 442  :              * again.
; 443  :              */
; 444  :             gc_list_move(gc, reachable);

  000d0	48 8b d7	 mov	 rdx, rdi
  000d3	48 8b cb	 mov	 rcx, rbx
  000d6	e8 00 00 00 00	 call	 gc_list_move
$LN24@visit_reac:

; 445  :             gc->gc.gc_refs = 1;

  000db	48 c7 43 10 01
	00 00 00	 mov	 QWORD PTR [rbx+16], 1
$LN20@visit_reac:

; 446  :         }
; 447  :         /* Else there's nothing to do.
; 448  :          * If gc_refs > 0, it must be in move_unreachable's 'young'
; 449  :          * list, and move_unreachable will eventually get to it.
; 450  :          * If gc_refs == GC_REACHABLE, it's either in some other
; 451  :          * generation so we don't care about it, or move_unreachable
; 452  :          * already dealt with it.
; 453  :          * If gc_refs == GC_UNTRACKED, it must be ignored.
; 454  :          */
; 455  :          else {
; 456  :             assert(gc_refs > 0
; 457  :                    || gc_refs == GC_REACHABLE
; 458  :                    || gc_refs == GC_UNTRACKED);
; 459  :          }
; 460  :     }
; 461  :     return 0;

  000e3	33 c0		 xor	 eax, eax

; 462  : }

  000e5	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000ea	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ee	5f		 pop	 rdi
  000ef	c3		 ret	 0
visit_reachable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@JGEDHAJA@move_unreachable?$AA@	; `string'
EXTRN	_PyTuple_MaybeUntrack:PROC
EXTRN	PyTuple_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$move_unreachable DD imagerel move_unreachable
	DD	imagerel move_unreachable+65
	DD	imagerel $unwind$move_unreachable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$move_unreachable DD imagerel move_unreachable+65
	DD	imagerel move_unreachable+210
	DD	imagerel $chain$2$move_unreachable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$move_unreachable DD imagerel move_unreachable+210
	DD	imagerel move_unreachable+219
	DD	imagerel $chain$3$move_unreachable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$move_unreachable DD 021H
	DD	imagerel move_unreachable
	DD	imagerel move_unreachable+65
	DD	imagerel $unwind$move_unreachable
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$move_unreachable DD 061621H
	DD	097416H
	DD	0ad40aH
	DD	086405H
	DD	imagerel move_unreachable
	DD	imagerel move_unreachable+65
	DD	imagerel $unwind$move_unreachable
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$move_unreachable DD 040901H
	DD	0c0053209H
	DD	030025003H
xdata	ENDS
;	COMDAT ??_C@_0BB@JGEDHAJA@move_unreachable?$AA@
CONST	SEGMENT
??_C@_0BB@JGEDHAJA@move_unreachable?$AA@ DB 'move_unreachable', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT move_unreachable
_TEXT	SEGMENT
young$ = 64
unreachable$ = 72
move_unreachable PROC					; COMDAT

; 474  : {

  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	41 54		 push	 r12
  00005	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00009	4c 8b e2	 mov	 r12, rdx
  0000c	48 8b e9	 mov	 rbp, rcx

; 475  :     PyGC_Head *gc;
; 476  :     Py_GUARD

  0000f	e8 00 00 00 00	 call	 _Py_PXCTX
  00014	85 c0		 test	 eax, eax
  00016	74 1c		 je	 SHORT $LN6@move_unrea
  00018	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  0001f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@JGEDHAJA@move_unreachable?$AA@
  00026	45 33 c9	 xor	 r9d, r9d
  00029	41 b8 dc 01 00
	00		 mov	 r8d, 476		; 000001dcH
  0002f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN6@move_unrea:

; 477  :     gc = young->gc.gc_next;

  00034	48 8b 5d 00	 mov	 rbx, QWORD PTR [rbp]

; 478  : 
; 479  :     /* Invariants:  all objects "to the left" of us in young have gc_refs
; 480  :      * = GC_REACHABLE, and are indeed reachable (directly or indirectly)
; 481  :      * from outside the young list as it was at entry.  All other objects
; 482  :      * from the original young "to the left" of us are in unreachable now,
; 483  :      * and have gc_refs = GC_TENTATIVELY_UNREACHABLE.  All objects to the
; 484  :      * left of us in 'young' now have been scanned, and no objects here
; 485  :      * or to the right have been scanned yet.
; 486  :      */
; 487  : 
; 488  :     while (gc != young) {

  00038	48 3b dd	 cmp	 rbx, rbp
  0003b	0f 84 91 00 00
	00		 je	 $LN4@move_unrea
  00041	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  00046	4c 89 6c 24 50	 mov	 QWORD PTR [rsp+80], r13
  0004b	4c 8d 2d 00 00
	00 00		 lea	 r13, OFFSET FLAT:PyTuple_Type
  00052	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
$LL5@move_unrea:

; 489  :         PyGC_Head *next;
; 490  : 
; 491  :         if (gc->gc.gc_refs) {

  00057	48 83 7b 10 00	 cmp	 QWORD PTR [rbx+16], 0
  0005c	74 47		 je	 SHORT $LN3@move_unrea

; 492  :             /* gc is definitely reachable from outside the
; 493  :              * original 'young'.  Mark it as such, and traverse
; 494  :              * its pointers to find any other objects that may
; 495  :              * be directly reachable from it.  Note that the
; 496  :              * call to tp_traverse may append objects to young,
; 497  :              * so we have to wait until it returns to determine
; 498  :              * the next object to visit.
; 499  :              */
; 500  :             PyObject *op = FROM_GC(gc);

  0005e	e8 00 00 00 00	 call	 _Py_PXCTX
  00063	85 c0		 test	 eax, eax
  00065	74 04		 je	 SHORT $LN9@move_unrea
  00067	33 ff		 xor	 edi, edi
  00069	eb 04		 jmp	 SHORT $LN10@move_unrea
$LN9@move_unrea:
  0006b	48 8d 7b 18	 lea	 rdi, QWORD PTR [rbx+24]
$LN10@move_unrea:

; 501  :             traverseproc traverse = Py_TYPE(op)->tp_traverse;

  0006f	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]

; 502  :             assert(gc->gc.gc_refs > 0);
; 503  :             gc->gc.gc_refs = GC_REACHABLE;
; 504  :             (void) traverse(op,
; 505  :                             (visitproc)visit_reachable,
; 506  :                             (void *)young);

  00073	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:visit_reachable
  0007a	4c 8b c5	 mov	 r8, rbp
  0007d	4c 8b 88 10 01
	00 00		 mov	 r9, QWORD PTR [rax+272]
  00084	48 8b cf	 mov	 rcx, rdi
  00087	48 c7 43 10 fd
	ff ff ff	 mov	 QWORD PTR [rbx+16], -3
  0008f	41 ff d1	 call	 r9

; 507  :             next = gc->gc.gc_next;

  00092	48 8b 33	 mov	 rsi, QWORD PTR [rbx]

; 508  :             if (PyTuple_CheckExact(op)) {

  00095	4c 39 6f 58	 cmp	 QWORD PTR [rdi+88], r13
  00099	75 20		 jne	 SHORT $LN1@move_unrea

; 509  :                 _PyTuple_MaybeUntrack(op);

  0009b	48 8b cf	 mov	 rcx, rdi
  0009e	e8 00 00 00 00	 call	 _PyTuple_MaybeUntrack

; 510  :             }
; 511  :         }
; 512  :         else {

  000a3	eb 16		 jmp	 SHORT $LN1@move_unrea
$LN3@move_unrea:

; 513  :             /* This *may* be unreachable.  To make progress,
; 514  :              * assume it is.  gc isn't directly reachable from
; 515  :              * any object we've already traversed, but may be
; 516  :              * reachable from an object we haven't gotten to yet.
; 517  :              * visit_reachable will eventually move gc back into
; 518  :              * young if that's so, and we'll see it again.
; 519  :              */
; 520  :             next = gc->gc.gc_next;

  000a5	48 8b 33	 mov	 rsi, QWORD PTR [rbx]

; 521  :             gc_list_move(gc, unreachable);

  000a8	49 8b d4	 mov	 rdx, r12
  000ab	48 8b cb	 mov	 rcx, rbx
  000ae	e8 00 00 00 00	 call	 gc_list_move

; 522  :             gc->gc.gc_refs = GC_TENTATIVELY_UNREACHABLE;

  000b3	48 c7 43 10 fc
	ff ff ff	 mov	 QWORD PTR [rbx+16], -4
$LN1@move_unrea:

; 523  :         }
; 524  :         gc = next;

  000bb	48 8b de	 mov	 rbx, rsi
  000be	48 3b f5	 cmp	 rsi, rbp
  000c1	75 94		 jne	 SHORT $LL5@move_unrea
  000c3	4c 8b 6c 24 50	 mov	 r13, QWORD PTR [rsp+80]
  000c8	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  000cd	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
$LN4@move_unrea:

; 525  :     }
; 526  : }

  000d2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d6	41 5c		 pop	 r12
  000d8	5d		 pop	 rbp
  000d9	5b		 pop	 rbx
  000da	c3		 ret	 0
move_unreachable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@EPHGMBPP@untrack_dicts?$AA@		; `string'
EXTRN	_PyDict_MaybeUntrack:PROC
EXTRN	PyDict_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$untrack_dicts DD imagerel untrack_dicts
	DD	imagerel untrack_dicts+58
	DD	imagerel $unwind$untrack_dicts
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$untrack_dicts DD imagerel untrack_dicts+58
	DD	imagerel untrack_dicts+117
	DD	imagerel $chain$0$untrack_dicts
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$untrack_dicts DD imagerel untrack_dicts+117
	DD	imagerel untrack_dicts+128
	DD	imagerel $chain$1$untrack_dicts
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$untrack_dicts DD 021H
	DD	imagerel untrack_dicts
	DD	imagerel untrack_dicts+58
	DD	imagerel $unwind$untrack_dicts
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$untrack_dicts DD 020521H
	DD	066405H
	DD	imagerel untrack_dicts
	DD	imagerel untrack_dicts+58
	DD	imagerel $unwind$untrack_dicts
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$untrack_dicts DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0O@EPHGMBPP@untrack_dicts?$AA@
CONST	SEGMENT
??_C@_0O@EPHGMBPP@untrack_dicts?$AA@ DB 'untrack_dicts', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT untrack_dicts
_TEXT	SEGMENT
head$ = 48
untrack_dicts PROC					; COMDAT

; 531  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f9	 mov	 rdi, rcx

; 532  :     PyGC_Head *next, *gc;
; 533  :     Py_GUARD

  0000d	e8 00 00 00 00	 call	 _Py_PXCTX
  00012	85 c0		 test	 eax, eax
  00014	74 1c		 je	 SHORT $LN5@untrack_di
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@EPHGMBPP@untrack_dicts?$AA@
  00024	45 33 c9	 xor	 r9d, r9d
  00027	41 b8 15 02 00
	00		 mov	 r8d, 533		; 00000215H
  0002d	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN5@untrack_di:

; 534  :     gc = head->gc.gc_next;

  00032	48 8b 1f	 mov	 rbx, QWORD PTR [rdi]

; 535  :     while (gc != head) {

  00035	48 3b df	 cmp	 rbx, rdi
  00038	74 3b		 je	 SHORT $LN3@untrack_di
  0003a	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  0003f	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:PyDict_Type
$LL4@untrack_di:

; 536  :         PyObject *op = FROM_GC(gc);

  00046	e8 00 00 00 00	 call	 _Py_PXCTX
  0004b	85 c0		 test	 eax, eax
  0004d	74 04		 je	 SHORT $LN8@untrack_di
  0004f	33 c9		 xor	 ecx, ecx
  00051	eb 04		 jmp	 SHORT $LN9@untrack_di
$LN8@untrack_di:
  00053	48 8d 4b 18	 lea	 rcx, QWORD PTR [rbx+24]
$LN9@untrack_di:

; 537  :         next = gc->gc.gc_next;

  00057	48 8b 1b	 mov	 rbx, QWORD PTR [rbx]

; 538  :         if (PyDict_CheckExact(op))

  0005a	48 39 71 58	 cmp	 QWORD PTR [rcx+88], rsi
  0005e	74 06		 je	 SHORT $LN1@untrack_di
  00060	48 39 71 38	 cmp	 QWORD PTR [rcx+56], rsi
  00064	75 05		 jne	 SHORT $LN2@untrack_di
$LN1@untrack_di:

; 539  :             _PyDict_MaybeUntrack(op);

  00066	e8 00 00 00 00	 call	 _PyDict_MaybeUntrack
$LN2@untrack_di:

; 535  :     while (gc != head) {

  0006b	48 3b df	 cmp	 rbx, rdi
  0006e	75 d6		 jne	 SHORT $LL4@untrack_di
  00070	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
$LN3@untrack_di:

; 540  :         gc = next;
; 541  :     }
; 542  : }

  00075	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0007a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007e	5f		 pop	 rdi
  0007f	c3		 ret	 0
untrack_dicts ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@ICCNFAFA@has_finalizer?$AA@		; `string'
EXTRN	PyGen_NeedsFinalizing:PROC
EXTRN	PyGen_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$has_finalizer DD imagerel has_finalizer
	DD	imagerel has_finalizer+93
	DD	imagerel $unwind$has_finalizer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$has_finalizer DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0O@ICCNFAFA@has_finalizer?$AA@
CONST	SEGMENT
??_C@_0O@ICCNFAFA@has_finalizer?$AA@ DB 'has_finalizer', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT has_finalizer
_TEXT	SEGMENT
op$ = 48
has_finalizer PROC					; COMDAT

; 547  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 548  :     Py_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN3@has_finali
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@ICCNFAFA@has_finalizer?$AA@
  00020	45 33 c9	 xor	 r9d, r9d
  00023	41 b8 24 02 00
	00		 mov	 r8d, 548		; 00000224H
  00029	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@has_finali:

; 549  :     if (PyGen_CheckExact(op))

  0002e	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00032	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyGen_Type
  00039	48 3b d0	 cmp	 rdx, rax
  0003c	75 0d		 jne	 SHORT $LN2@has_finali

; 550  :         return PyGen_NeedsFinalizing((PyGenObject *)op);

  0003e	48 8b cb	 mov	 rcx, rbx

; 553  : }

  00041	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00045	5b		 pop	 rbx
  00046	e9 00 00 00 00	 jmp	 PyGen_NeedsFinalizing
$LN2@has_finali:

; 551  :     else
; 552  :         return op->ob_type->tp_del != NULL;

  0004b	33 c0		 xor	 eax, eax
  0004d	48 39 82 d0 01
	00 00		 cmp	 QWORD PTR [rdx+464], rax
  00054	0f 95 c0	 setne	 al

; 553  : }

  00057	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005b	5b		 pop	 rbx
  0005c	c3		 ret	 0
has_finalizer ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@OIAEDBEM@move_finalizers?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$move_finalizers DD imagerel move_finalizers
	DD	imagerel move_finalizers+66
	DD	imagerel $unwind$move_finalizers
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$move_finalizers DD imagerel move_finalizers+66
	DD	imagerel move_finalizers+132
	DD	imagerel $chain$0$move_finalizers
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$move_finalizers DD imagerel move_finalizers+132
	DD	imagerel move_finalizers+148
	DD	imagerel $chain$1$move_finalizers
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$move_finalizers DD 021H
	DD	imagerel move_finalizers
	DD	imagerel move_finalizers+66
	DD	imagerel $unwind$move_finalizers
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$move_finalizers DD 020521H
	DD	067405H
	DD	imagerel move_finalizers
	DD	imagerel move_finalizers+66
	DD	imagerel $unwind$move_finalizers
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$move_finalizers DD 060f01H
	DD	08540fH
	DD	07340fH
	DD	0600b320fH
xdata	ENDS
;	COMDAT ??_C@_0BA@OIAEDBEM@move_finalizers?$AA@
CONST	SEGMENT
??_C@_0BA@OIAEDBEM@move_finalizers?$AA@ DB 'move_finalizers', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT move_finalizers
_TEXT	SEGMENT
unreachable$ = 48
finalizers$ = 56
move_finalizers PROC					; COMDAT

; 561  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	56		 push	 rsi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b ea	 mov	 rbp, rdx
  00012	48 8b f1	 mov	 rsi, rcx

; 562  :     PyGC_Head *gc;
; 563  :     PyGC_Head *next;
; 564  :     Py_GUARD

  00015	e8 00 00 00 00	 call	 _Py_PXCTX
  0001a	85 c0		 test	 eax, eax
  0001c	74 1c		 je	 SHORT $LN5@move_final
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@OIAEDBEM@move_finalizers?$AA@
  0002c	45 33 c9	 xor	 r9d, r9d
  0002f	41 b8 34 02 00
	00		 mov	 r8d, 564		; 00000234H
  00035	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN5@move_final:

; 565  : 
; 566  :     /* March over unreachable.  Move objects with finalizers into
; 567  :      * `finalizers`.
; 568  :      */
; 569  :     for (gc = unreachable->gc.gc_next; gc != unreachable; gc = next) {

  0003a	48 8b 1e	 mov	 rbx, QWORD PTR [rsi]
  0003d	48 3b de	 cmp	 rbx, rsi
  00040	74 42		 je	 SHORT $LN2@move_final
  00042	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
$LL4@move_final:

; 570  :         PyObject *op = FROM_GC(gc);

  00047	e8 00 00 00 00	 call	 _Py_PXCTX
  0004c	85 c0		 test	 eax, eax
  0004e	74 04		 je	 SHORT $LN8@move_final
  00050	33 c9		 xor	 ecx, ecx
  00052	eb 04		 jmp	 SHORT $LN9@move_final
$LN8@move_final:
  00054	48 8d 4b 18	 lea	 rcx, QWORD PTR [rbx+24]
$LN9@move_final:

; 571  : 
; 572  :         assert(IS_TENTATIVELY_UNREACHABLE(op));
; 573  :         next = gc->gc.gc_next;

  00058	48 8b 3b	 mov	 rdi, QWORD PTR [rbx]

; 574  : 
; 575  :         if (has_finalizer(op)) {

  0005b	e8 00 00 00 00	 call	 has_finalizer
  00060	85 c0		 test	 eax, eax
  00062	74 13		 je	 SHORT $LN3@move_final

; 576  :             gc_list_move(gc, finalizers);

  00064	48 8b d5	 mov	 rdx, rbp
  00067	48 8b cb	 mov	 rcx, rbx
  0006a	e8 00 00 00 00	 call	 gc_list_move

; 577  :             gc->gc.gc_refs = GC_REACHABLE;

  0006f	48 c7 43 10 fd
	ff ff ff	 mov	 QWORD PTR [rbx+16], -3
$LN3@move_final:

; 565  : 
; 566  :     /* March over unreachable.  Move objects with finalizers into
; 567  :      * `finalizers`.
; 568  :      */
; 569  :     for (gc = unreachable->gc.gc_next; gc != unreachable; gc = next) {

  00077	48 8b df	 mov	 rbx, rdi
  0007a	48 3b fe	 cmp	 rdi, rsi
  0007d	75 c8		 jne	 SHORT $LL4@move_final
  0007f	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
$LN2@move_final:

; 578  :         }
; 579  :     }
; 580  : }

  00084	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00089	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  0008e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00092	5e		 pop	 rsi
  00093	c3		 ret	 0
move_finalizers ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@GHJCMCK@visit_move?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$visit_move DD imagerel visit_move
	DD	imagerel visit_move+180
	DD	imagerel $unwind$visit_move
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$visit_move DD imagerel visit_move+180
	DD	imagerel visit_move+298
	DD	imagerel $chain$0$visit_move
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$visit_move DD imagerel visit_move+298
	DD	imagerel visit_move+311
	DD	imagerel $chain$1$visit_move
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$visit_move DD 021H
	DD	imagerel visit_move
	DD	imagerel visit_move+180
	DD	imagerel $unwind$visit_move
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$visit_move DD 020521H
	DD	083405H
	DD	imagerel visit_move
	DD	imagerel visit_move+180
	DD	imagerel $unwind$visit_move
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$visit_move DD 040a01H
	DD	09640aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0L@GHJCMCK@visit_move?$AA@
CONST	SEGMENT
??_C@_0L@GHJCMCK@visit_move?$AA@ DB 'visit_move', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT visit_move
_TEXT	SEGMENT
op$ = 64
tolist$ = 72
tv83 = 80
visit_move PROC						; COMDAT

; 585  : {

  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f2	 mov	 rsi, rdx
  0000d	48 8b f9	 mov	 rdi, rcx

; 586  :     Py_GUARD

  00010	e8 00 00 00 00	 call	 _Py_PXCTX
  00015	85 c0		 test	 eax, eax
  00017	74 1c		 je	 SHORT $LN3@visit_move
  00019	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@GHJCMCK@visit_move?$AA@
  00027	45 33 c9	 xor	 r9d, r9d
  0002a	41 b8 4a 02 00
	00		 mov	 r8d, 586		; 0000024aH
  00030	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@visit_move:

; 587  :     if (PyObject_IS_GC(op)) {

  00035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@GHJCMCK@visit_move?$AA@
  00043	4c 8b cf	 mov	 r9, rdi
  00046	41 b8 4b 02 00
	00		 mov	 r8d, 587		; 0000024bH
  0004c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00054	e8 00 00 00 00	 call	 _PyParallel_Guard
  00059	85 c0		 test	 eax, eax
  0005b	0f 85 c9 00 00
	00		 jne	 $LN20@visit_move
  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	0f 85 bc 00 00
	00		 jne	 $LN20@visit_move
  0006e	48 8b 4f 58	 mov	 rcx, QWORD PTR [rdi+88]
  00072	8b 81 00 01 00
	00		 mov	 eax, DWORD PTR [rcx+256]
  00078	c1 e8 0e	 shr	 eax, 14
  0007b	83 e0 01	 and	 eax, 1
  0007e	0f 84 a6 00 00
	00		 je	 $LN20@visit_move
  00084	48 8b 81 a0 01
	00 00		 mov	 rax, QWORD PTR [rcx+416]
  0008b	48 85 c0	 test	 rax, rax
  0008e	74 0d		 je	 SHORT $LN17@visit_move
  00090	48 8b cf	 mov	 rcx, rdi
  00093	ff d0		 call	 rax
  00095	85 c0		 test	 eax, eax

; 591  :             gc->gc.gc_refs = GC_REACHABLE;

  00097	0f 84 8d 00 00
	00		 je	 $LN20@visit_move
$LN17@visit_move:

; 588  :         if (IS_TENTATIVELY_UNREACHABLE(op)) {

  0009d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  000a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@GHJCMCK@visit_move?$AA@
  000ab	4c 8b cf	 mov	 r9, rdi
  000ae	41 b8 4c 02 00
	00		 mov	 r8d, 588		; 0000024cH
  000b4	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  000b9	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c1	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c6	33 db		 xor	 ebx, ebx
  000c8	85 c0		 test	 eax, eax
  000ca	8b c3		 mov	 eax, ebx
  000cc	75 04		 jne	 SHORT $LN14@visit_move
  000ce	48 8d 47 e8	 lea	 rax, QWORD PTR [rdi-24]
$LN14@visit_move:
  000d2	48 83 78 10 fc	 cmp	 QWORD PTR [rax+16], -4
  000d7	75 3f		 jne	 SHORT $LN18@visit_move

; 589  :             PyGC_Head *gc = AS_GC(op);

  000d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  000e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@GHJCMCK@visit_move?$AA@
  000e7	4c 8b cf	 mov	 r9, rdi
  000ea	41 b8 4d 02 00
	00		 mov	 r8d, 589		; 0000024dH
  000f0	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000f8	e8 00 00 00 00	 call	 _PyParallel_Guard
  000fd	85 c0		 test	 eax, eax
  000ff	75 04		 jne	 SHORT $LN16@visit_move
  00101	48 8d 5f e8	 lea	 rbx, QWORD PTR [rdi-24]
$LN16@visit_move:

; 590  :             gc_list_move(gc, tolist);

  00105	48 8b d6	 mov	 rdx, rsi
  00108	48 8b cb	 mov	 rcx, rbx
  0010b	e8 00 00 00 00	 call	 gc_list_move

; 591  :             gc->gc.gc_refs = GC_REACHABLE;

  00110	48 c7 43 10 fd
	ff ff ff	 mov	 QWORD PTR [rbx+16], -3
$LN18@visit_move:

; 592  :         }
; 593  :     }
; 594  :     return 0;

  00118	33 c0		 xor	 eax, eax
  0011a	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 595  : }

  0011f	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00124	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00128	5f		 pop	 rdi
  00129	c3		 ret	 0
$LN20@visit_move:

; 592  :         }
; 593  :     }
; 594  :     return 0;

  0012a	33 c0		 xor	 eax, eax

; 595  : }

  0012c	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00131	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00135	5f		 pop	 rdi
  00136	c3		 ret	 0
visit_move ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@DJNFCFOL@move_finalizer_reachable?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$move_finalizer_reachable DD imagerel move_finalizer_reachable
	DD	imagerel move_finalizer_reachable+58
	DD	imagerel $unwind$move_finalizer_reachable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$move_finalizer_reachable DD imagerel move_finalizer_reachable+58
	DD	imagerel move_finalizer_reachable+134
	DD	imagerel $chain$0$move_finalizer_reachable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$move_finalizer_reachable DD imagerel move_finalizer_reachable+134
	DD	imagerel move_finalizer_reachable+145
	DD	imagerel $chain$1$move_finalizer_reachable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$move_finalizer_reachable DD 021H
	DD	imagerel move_finalizer_reachable
	DD	imagerel move_finalizer_reachable+58
	DD	imagerel $unwind$move_finalizer_reachable
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$move_finalizer_reachable DD 020521H
	DD	066405H
	DD	imagerel move_finalizer_reachable
	DD	imagerel move_finalizer_reachable+58
	DD	imagerel $unwind$move_finalizer_reachable
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$move_finalizer_reachable DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0BJ@DJNFCFOL@move_finalizer_reachable?$AA@
CONST	SEGMENT
??_C@_0BJ@DJNFCFOL@move_finalizer_reachable?$AA@ DB 'move_finalizer_reach'
	DB	'able', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT move_finalizer_reachable
_TEXT	SEGMENT
finalizers$ = 48
move_finalizer_reachable PROC				; COMDAT

; 602  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f9	 mov	 rdi, rcx

; 603  :     traverseproc traverse;
; 604  :     PyGC_Head *gc;
; 605  :     Py_GUARD

  0000d	e8 00 00 00 00	 call	 _Py_PXCTX
  00012	85 c0		 test	 eax, eax
  00014	74 1c		 je	 SHORT $LN4@move_final@2
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@DJNFCFOL@move_finalizer_reachable?$AA@
  00024	45 33 c9	 xor	 r9d, r9d
  00027	41 b8 5d 02 00
	00		 mov	 r8d, 605		; 0000025dH
  0002d	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN4@move_final@2:

; 606  :     gc = finalizers->gc.gc_next;

  00032	48 8b 1f	 mov	 rbx, QWORD PTR [rdi]

; 607  :     for (; gc != finalizers; gc = gc->gc.gc_next) {

  00035	48 3b df	 cmp	 rbx, rdi
  00038	74 4c		 je	 SHORT $LN1@move_final@2
  0003a	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  0003f	90		 npad	 1
$LL3@move_final@2:

; 608  :         /* Note that the finalizers list may grow during this. */
; 609  :         traverse = Py_TYPE(FROM_GC(gc))->tp_traverse;

  00040	e8 00 00 00 00	 call	 _Py_PXCTX
  00045	85 c0		 test	 eax, eax
  00047	74 04		 je	 SHORT $LN7@move_final@2
  00049	33 c0		 xor	 eax, eax
  0004b	eb 04		 jmp	 SHORT $LN8@move_final@2
$LN7@move_final@2:
  0004d	48 8d 43 18	 lea	 rax, QWORD PTR [rbx+24]
$LN8@move_final@2:
  00051	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00055	48 8b b0 10 01
	00 00		 mov	 rsi, QWORD PTR [rax+272]

; 610  :         (void) traverse(FROM_GC(gc),
; 611  :                         (visitproc)visit_move,
; 612  :                         (void *)finalizers);

  0005c	e8 00 00 00 00	 call	 _Py_PXCTX
  00061	85 c0		 test	 eax, eax
  00063	74 04		 je	 SHORT $LN9@move_final@2
  00065	33 c9		 xor	 ecx, ecx
  00067	eb 04		 jmp	 SHORT $LN10@move_final@2
$LN9@move_final@2:
  00069	48 8d 4b 18	 lea	 rcx, QWORD PTR [rbx+24]
$LN10@move_final@2:
  0006d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:visit_move
  00074	4c 8b c7	 mov	 r8, rdi
  00077	ff d6		 call	 rsi
  00079	48 8b 1b	 mov	 rbx, QWORD PTR [rbx]
  0007c	48 3b df	 cmp	 rbx, rdi
  0007f	75 bf		 jne	 SHORT $LL3@move_final@2
  00081	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
$LN1@move_final@2:

; 613  :     }
; 614  : }

  00086	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0008b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008f	5f		 pop	 rdi
  00090	c3		 ret	 0
move_finalizer_reachable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@OLICAFAM@handle_weakrefs?$AA@		; `string'
EXTRN	PyErr_WriteUnraisable:PROC
EXTRN	PyObject_CallFunctionObjArgs:PROC
EXTRN	_PyWeakref_ClearRef:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$handle_weakrefs DD imagerel handle_weakrefs
	DD	imagerel handle_weakrefs+10
	DD	imagerel $unwind$handle_weakrefs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$handle_weakrefs DD imagerel handle_weakrefs+10
	DD	imagerel handle_weakrefs+404
	DD	imagerel $chain$3$handle_weakrefs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$handle_weakrefs DD imagerel handle_weakrefs+404
	DD	imagerel handle_weakrefs+736
	DD	imagerel $chain$4$handle_weakrefs
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$handle_weakrefs DD 060021H
	DD	0107400H
	DD	0f6400H
	DD	0e3400H
	DD	imagerel handle_weakrefs
	DD	imagerel handle_weakrefs+10
	DD	imagerel $unwind$handle_weakrefs
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$handle_weakrefs DD 084d21H
	DD	010744dH
	DD	0f6445H
	DD	0e343bH
	DD	011c408H
	DD	imagerel handle_weakrefs
	DD	imagerel handle_weakrefs+10
	DD	imagerel $unwind$handle_weakrefs
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$handle_weakrefs DD 040a01H
	DD	0e006920aH
	DD	05002d004H
xdata	ENDS
;	COMDAT ??_C@_0BA@OLICAFAM@handle_weakrefs?$AA@
CONST	SEGMENT
??_C@_0BA@OLICAFAM@handle_weakrefs?$AA@ DB 'handle_weakrefs', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\gcmodule.c
CONST	ENDS
;	COMDAT handle_weakrefs
_TEXT	SEGMENT
wrcb_to_call$ = 48
unreachable$ = 112
old$ = 120
handle_weakrefs PROC					; COMDAT

; 629  : {

  00000	40 55		 push	 rbp
  00002	41 55		 push	 r13
  00004	41 56		 push	 r14
  00006	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000a	4c 89 a4 24 88
	00 00 00	 mov	 QWORD PTR [rsp+136], r12
  00012	4c 8b f2	 mov	 r14, rdx

; 630  :     PyGC_Head *gc;
; 631  :     PyObject *op;               /* generally FROM_GC(gc) */
; 632  :     PyWeakReference *wr;        /* generally a cast of op */
; 633  :     PyGC_Head wrcb_to_call;     /* weakrefs with callbacks to call */
; 634  :     PyGC_Head *next;
; 635  :     int num_freed = 0;

  00015	45 33 ed	 xor	 r13d, r13d
  00018	4c 8b e1	 mov	 r12, rcx

; 636  :     Py_GUARD

  0001b	e8 00 00 00 00	 call	 _Py_PXCTX
  00020	85 c0		 test	 eax, eax
  00022	74 1c		 je	 SHORT $LN16@handle_wea
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@OLICAFAM@handle_weakrefs?$AA@
  00032	45 33 c9	 xor	 r9d, r9d
  00035	41 b8 7c 02 00
	00		 mov	 r8d, 636		; 0000027cH
  0003b	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN16@handle_wea:

; 637  : 
; 638  :     gc_list_init(&wrcb_to_call);

  00040	48 89 5c 24 70	 mov	 QWORD PTR [rsp+112], rbx
  00045	48 8d 4c 24 30	 lea	 rcx, QWORD PTR wrcb_to_call$[rsp]
  0004a	48 89 74 24 78	 mov	 QWORD PTR [rsp+120], rsi
  0004f	48 89 bc 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rdi
  00057	e8 00 00 00 00	 call	 gc_list_init

; 639  : 
; 640  :     /* Clear all weakrefs to the objects in unreachable.  If such a weakref
; 641  :      * also has a callback, move it into `wrcb_to_call` if the callback
; 642  :      * needs to be invoked.  Note that we cannot invoke any callbacks until
; 643  :      * all weakrefs to unreachable objects are cleared, lest the callback
; 644  :      * resurrect an unreachable object via a still-active weakref.  We
; 645  :      * make another pass over wrcb_to_call, invoking callbacks, after this
; 646  :      * pass completes.
; 647  :      */
; 648  :     for (gc = unreachable->gc.gc_next; gc != unreachable; gc = next) {

  0005c	49 8b 2c 24	 mov	 rbp, QWORD PTR [r12]
  00060	49 3b ec	 cmp	 rbp, r12
  00063	0f 84 11 01 00
	00		 je	 $LN55@handle_wea
  00069	0f 1f 80 00 00
	00 00		 npad	 7
$LL15@handle_wea:

; 649  :         PyWeakReference **wrlist;
; 650  : 
; 651  :         op = FROM_GC(gc);

  00070	e8 00 00 00 00	 call	 _Py_PXCTX
  00075	85 c0		 test	 eax, eax
  00077	74 04		 je	 SHORT $LN19@handle_wea
  00079	33 ff		 xor	 edi, edi
  0007b	eb 04		 jmp	 SHORT $LN20@handle_wea
$LN19@handle_wea:
  0007d	48 8d 7d 18	 lea	 rdi, QWORD PTR [rbp+24]
$LN20@handle_wea:

; 652  :         assert(IS_TENTATIVELY_UNREACHABLE(op));
; 653  :         next = gc->gc.gc_next;
; 654  : 
; 655  :         if (! PyType_SUPPORTS_WEAKREFS(Py_TYPE(op)))

  00081	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00085	48 8b 6d 00	 mov	 rbp, QWORD PTR [rbp]
  00089	48 8b b0 28 01
	00 00		 mov	 rsi, QWORD PTR [rax+296]
  00090	48 85 f6	 test	 rsi, rsi
  00093	0f 8e d8 00 00
	00		 jle	 $LN14@handle_wea

; 656  :             continue;
; 657  : 
; 658  :         /* It supports weakrefs.  Does it have any? */
; 659  :         wrlist = (PyWeakReference **)
; 660  :                                 PyObject_GET_WEAKREFS_LISTPTR(op);
; 661  : 
; 662  :         /* `op` may have some weakrefs.  March over the list, clear
; 663  :          * all the weakrefs, and move the weakrefs with callbacks
; 664  :          * that must be called into wrcb_to_call.
; 665  :          */
; 666  :         for (wr = *wrlist; wr != NULL; wr = *wrlist) {

  00099	48 8b 1c 3e	 mov	 rbx, QWORD PTR [rsi+rdi]
  0009d	48 85 db	 test	 rbx, rbx
  000a0	0f 84 cb 00 00
	00		 je	 $LN14@handle_wea
$LL11@handle_wea:

; 667  :             PyGC_Head *wrasgc;                  /* AS_GC(wr) */
; 668  : 
; 669  :             /* _PyWeakref_ClearRef clears the weakref but leaves
; 670  :              * the callback pointer intact.  Obscure:  it also
; 671  :              * changes *wrlist.
; 672  :              */
; 673  :             assert(wr->wr_object == op);
; 674  :             _PyWeakref_ClearRef(wr);

  000a6	48 8b cb	 mov	 rcx, rbx
  000a9	e8 00 00 00 00	 call	 _PyWeakref_ClearRef

; 675  :             assert(wr->wr_object == Py_None);
; 676  :             if (wr->wr_callback == NULL)

  000ae	4c 39 6b 68	 cmp	 QWORD PTR [rbx+104], r13
  000b2	0f 84 ac 00 00
	00		 je	 $LN10@handle_wea

; 677  :                 continue;                       /* no callback */
; 678  : 
; 679  :     /* Headache time.  `op` is going away, and is weakly referenced by
; 680  :      * `wr`, which has a callback.  Should the callback be invoked?  If wr
; 681  :      * is also trash, no:
; 682  :      *
; 683  :      * 1. There's no need to call it.  The object and the weakref are
; 684  :      *    both going away, so it's legitimate to pretend the weakref is
; 685  :      *    going away first.  The user has to ensure a weakref outlives its
; 686  :      *    referent if they want a guarantee that the wr callback will get
; 687  :      *    invoked.
; 688  :      *
; 689  :      * 2. It may be catastrophic to call it.  If the callback is also in
; 690  :      *    cyclic trash (CT), then although the CT is unreachable from
; 691  :      *    outside the current generation, CT may be reachable from the
; 692  :      *    callback.  Then the callback could resurrect insane objects.
; 693  :      *
; 694  :      * Since the callback is never needed and may be unsafe in this case,
; 695  :      * wr is simply left in the unreachable set.  Note that because we
; 696  :      * already called _PyWeakref_ClearRef(wr), its callback will never
; 697  :      * trigger.
; 698  :      *
; 699  :      * OTOH, if wr isn't part of CT, we should invoke the callback:  the
; 700  :      * weakref outlived the trash.  Note that since wr isn't CT in this
; 701  :      * case, its callback can't be CT either -- wr acted as an external
; 702  :      * root to this generation, and therefore its callback did too.  So
; 703  :      * nothing in CT is reachable from the callback either, so it's hard
; 704  :      * to imagine how calling it later could create a problem for us.  wr
; 705  :      * is moved to wrcb_to_call in this case.
; 706  :      */
; 707  :             if (IS_TENTATIVELY_UNREACHABLE(wr))

  000b8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  000bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@OLICAFAM@handle_weakrefs?$AA@
  000c6	4c 8b cb	 mov	 r9, rbx
  000c9	41 b8 c3 02 00
	00		 mov	 r8d, 707		; 000002c3H
  000cf	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000dc	85 c0		 test	 eax, eax
  000de	74 04		 je	 SHORT $LN21@handle_wea
  000e0	33 c0		 xor	 eax, eax
  000e2	eb 04		 jmp	 SHORT $LN22@handle_wea
$LN21@handle_wea:
  000e4	48 8d 43 e8	 lea	 rax, QWORD PTR [rbx-24]
$LN22@handle_wea:
  000e8	48 83 78 10 fc	 cmp	 QWORD PTR [rax+16], -4
  000ed	74 75		 je	 SHORT $LN10@handle_wea

; 708  :                 continue;
; 709  :             assert(IS_REACHABLE(wr));
; 710  : 
; 711  :             /* Create a new reference so that wr can't go away
; 712  :              * before we can process it again.
; 713  :              */
; 714  :             Py_INCREF(wr);

  000ef	e8 00 00 00 00	 call	 _Py_PXCTX
  000f4	85 c0		 test	 eax, eax
  000f6	75 32		 jne	 SHORT $LN28@handle_wea
  000f8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00106	4c 8b cb	 mov	 r9, rbx
  00109	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0010f	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00117	e8 00 00 00 00	 call	 _PyParallel_Guard
  0011c	85 c0		 test	 eax, eax
  0011e	75 06		 jne	 SHORT $LN27@handle_wea
  00120	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00124	74 04		 je	 SHORT $LN28@handle_wea
$LN27@handle_wea:
  00126	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN28@handle_wea:

; 715  : 
; 716  :             /* Move wr to wrcb_to_call, for the next pass. */
; 717  :             wrasgc = AS_GC(wr);

  0012a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00131	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@OLICAFAM@handle_weakrefs?$AA@
  00138	4c 8b cb	 mov	 r9, rbx
  0013b	41 b8 cd 02 00
	00		 mov	 r8d, 717		; 000002cdH
  00141	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00149	e8 00 00 00 00	 call	 _PyParallel_Guard
  0014e	85 c0		 test	 eax, eax
  00150	74 04		 je	 SHORT $LN23@handle_wea
  00152	33 c9		 xor	 ecx, ecx
  00154	eb 04		 jmp	 SHORT $LN24@handle_wea
$LN23@handle_wea:
  00156	48 8d 4b e8	 lea	 rcx, QWORD PTR [rbx-24]
$LN24@handle_wea:

; 718  :             assert(wrasgc != next); /* wrasgc is reachable, but
; 719  :                                        next isn't, so they can't
; 720  :                                        be the same */
; 721  :             gc_list_move(wrasgc, &wrcb_to_call);

  0015a	48 8d 54 24 30	 lea	 rdx, QWORD PTR wrcb_to_call$[rsp]
  0015f	e8 00 00 00 00	 call	 gc_list_move
$LN10@handle_wea:

; 656  :             continue;
; 657  : 
; 658  :         /* It supports weakrefs.  Does it have any? */
; 659  :         wrlist = (PyWeakReference **)
; 660  :                                 PyObject_GET_WEAKREFS_LISTPTR(op);
; 661  : 
; 662  :         /* `op` may have some weakrefs.  March over the list, clear
; 663  :          * all the weakrefs, and move the weakrefs with callbacks
; 664  :          * that must be called into wrcb_to_call.
; 665  :          */
; 666  :         for (wr = *wrlist; wr != NULL; wr = *wrlist) {

  00164	48 8b 1c 3e	 mov	 rbx, QWORD PTR [rsi+rdi]
  00168	48 85 db	 test	 rbx, rbx
  0016b	0f 85 35 ff ff
	ff		 jne	 $LL11@handle_wea
$LN14@handle_wea:

; 639  : 
; 640  :     /* Clear all weakrefs to the objects in unreachable.  If such a weakref
; 641  :      * also has a callback, move it into `wrcb_to_call` if the callback
; 642  :      * needs to be invoked.  Note that we cannot invoke any callbacks until
; 643  :      * all weakrefs to unreachable objects are cleared, lest the callback
; 644  :      * resurrect an unreachable object via a still-active weakref.  We
; 645  :      * make another pass over wrcb_to_call, invoking callbacks, after this
; 646  :      * pass completes.
; 647  :      */
; 648  :     for (gc = unreachable->gc.gc_next; gc != unreachable; gc = next) {

  00171	49 3b ec	 cmp	 rbp, r12
  00174	0f 85 f6 fe ff
	ff		 jne	 $LL15@handle_wea
$LN55@handle_wea:

; 722  :         }
; 723  :     }
; 724  : 
; 725  :     /* Invoke the callbacks we decided to honor.  It's safe to invoke them
; 726  :      * because they can't reference unreachable objects.
; 727  :      */
; 728  :     while (! gc_list_is_empty(&wrcb_to_call)) {

  0017a	48 8d 4c 24 30	 lea	 rcx, QWORD PTR wrcb_to_call$[rsp]
  0017f	e8 00 00 00 00	 call	 gc_list_is_empty
  00184	4c 8b a4 24 88
	00 00 00	 mov	 r12, QWORD PTR [rsp+136]
  0018c	85 c0		 test	 eax, eax
  0018e	0f 85 2d 01 00
	00		 jne	 $LN58@handle_wea
$LL6@handle_wea:

; 729  :         PyObject *temp;
; 730  :         PyObject *callback;
; 731  : 
; 732  :         gc = wrcb_to_call.gc.gc_next;

  00194	48 8b 6c 24 30	 mov	 rbp, QWORD PTR wrcb_to_call$[rsp]

; 733  :         op = FROM_GC(gc);

  00199	e8 00 00 00 00	 call	 _Py_PXCTX
  0019e	85 c0		 test	 eax, eax
  001a0	74 04		 je	 SHORT $LN25@handle_wea
  001a2	33 db		 xor	 ebx, ebx
  001a4	eb 04		 jmp	 SHORT $LN26@handle_wea
$LN25@handle_wea:
  001a6	48 8d 5d 18	 lea	 rbx, QWORD PTR [rbp+24]
$LN26@handle_wea:

; 734  :         assert(IS_REACHABLE(op));
; 735  :         assert(PyWeakref_Check(op));
; 736  :         wr = (PyWeakReference *)op;
; 737  :         callback = wr->wr_callback;

  001aa	48 8b 73 68	 mov	 rsi, QWORD PTR [rbx+104]

; 738  :         assert(callback != NULL);
; 739  : 
; 740  :         /* copy-paste of weakrefobject.c's handle_callback() */
; 741  :         temp = PyObject_CallFunctionObjArgs(callback, wr, NULL);

  001ae	45 33 c0	 xor	 r8d, r8d
  001b1	48 8b d3	 mov	 rdx, rbx
  001b4	48 8b ce	 mov	 rcx, rsi
  001b7	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  001bc	48 8b f8	 mov	 rdi, rax

; 742  :         if (temp == NULL)

  001bf	48 85 c0	 test	 rax, rax
  001c2	75 0a		 jne	 SHORT $LN4@handle_wea

; 743  :             PyErr_WriteUnraisable(callback);

  001c4	48 8b ce	 mov	 rcx, rsi
  001c7	e8 00 00 00 00	 call	 PyErr_WriteUnraisable

; 744  :         else

  001cc	eb 65		 jmp	 SHORT $LN41@handle_wea
$LN4@handle_wea:

; 745  :             Py_DECREF(temp);

  001ce	e8 00 00 00 00	 call	 _Py_PXCTX
  001d3	85 c0		 test	 eax, eax
  001d5	75 5c		 jne	 SHORT $LN41@handle_wea
  001d7	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  001db	a8 20		 test	 al, 32			; 00000020H
  001dd	75 4c		 jne	 SHORT $LN35@handle_wea
  001df	84 c0		 test	 al, al
  001e1	78 48		 js	 SHORT $LN35@handle_wea
  001e3	a8 02		 test	 al, 2
  001e5	75 4c		 jne	 SHORT $LN41@handle_wea
  001e7	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  001eb	75 46		 jne	 SHORT $LN41@handle_wea
  001ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  001fb	4c 8b cf	 mov	 r9, rdi
  001fe	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00204	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0020c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00211	48 8b cf	 mov	 rcx, rdi
  00214	85 c0		 test	 eax, eax
  00216	74 07		 je	 SHORT $LN40@handle_wea
  00218	e8 00 00 00 00	 call	 _Px_Dealloc
  0021d	eb 14		 jmp	 SHORT $LN41@handle_wea
$LN40@handle_wea:
  0021f	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00223	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00229	eb 08		 jmp	 SHORT $LN41@handle_wea
$LN35@handle_wea:
  0022b	48 8b cf	 mov	 rcx, rdi
  0022e	e8 00 00 00 00	 call	 Px_DecRef
$LN41@handle_wea:

; 746  : 
; 747  :         /* Give up the reference we created in the first pass.  When
; 748  :          * op's refcount hits 0 (which it may or may not do right now),
; 749  :          * op's tp_dealloc will decref op->wr_callback too.  Note
; 750  :          * that the refcount probably will hit 0 now, and because this
; 751  :          * weakref was reachable to begin with, gc didn't already
; 752  :          * add it to its count of freed objects.  Example:  a reachable
; 753  :          * weak value dict maps some key to this reachable weakref.
; 754  :          * The callback removes this key->weakref mapping from the
; 755  :          * dict, leaving no other references to the weakref (excepting
; 756  :          * ours).
; 757  :          */
; 758  :         Py_DECREF(op);

  00233	e8 00 00 00 00	 call	 _Py_PXCTX
  00238	85 c0		 test	 eax, eax
  0023a	75 5c		 jne	 SHORT $LN52@handle_wea
  0023c	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00240	a8 20		 test	 al, 32			; 00000020H
  00242	75 4c		 jne	 SHORT $LN46@handle_wea
  00244	84 c0		 test	 al, al
  00246	78 48		 js	 SHORT $LN46@handle_wea
  00248	a8 02		 test	 al, 2
  0024a	75 4c		 jne	 SHORT $LN52@handle_wea
  0024c	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00250	75 46		 jne	 SHORT $LN52@handle_wea
  00252	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00259	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00260	4c 8b cb	 mov	 r9, rbx
  00263	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00269	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00271	e8 00 00 00 00	 call	 _PyParallel_Guard
  00276	48 8b cb	 mov	 rcx, rbx
  00279	85 c0		 test	 eax, eax
  0027b	74 07		 je	 SHORT $LN51@handle_wea
  0027d	e8 00 00 00 00	 call	 _Px_Dealloc
  00282	eb 14		 jmp	 SHORT $LN52@handle_wea
$LN51@handle_wea:
  00284	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00288	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0028e	eb 08		 jmp	 SHORT $LN52@handle_wea
$LN46@handle_wea:
  00290	48 8b cb	 mov	 rcx, rbx
  00293	e8 00 00 00 00	 call	 Px_DecRef
$LN52@handle_wea:

; 759  :         if (wrcb_to_call.gc.gc_next == gc) {

  00298	48 39 6c 24 30	 cmp	 QWORD PTR wrcb_to_call$[rsp], rbp
  0029d	75 0d		 jne	 SHORT $LN2@handle_wea

; 760  :             /* object is still alive -- move it */
; 761  :             gc_list_move(gc, old);

  0029f	49 8b d6	 mov	 rdx, r14
  002a2	48 8b cd	 mov	 rcx, rbp
  002a5	e8 00 00 00 00	 call	 gc_list_move

; 762  :         }
; 763  :         else

  002aa	eb 03		 jmp	 SHORT $LN1@handle_wea
$LN2@handle_wea:

; 764  :             ++num_freed;

  002ac	41 ff c5	 inc	 r13d
$LN1@handle_wea:

; 722  :         }
; 723  :     }
; 724  : 
; 725  :     /* Invoke the callbacks we decided to honor.  It's safe to invoke them
; 726  :      * because they can't reference unreachable objects.
; 727  :      */
; 728  :     while (! gc_list_is_empty(&wrcb_to_call)) {

  002af	48 8d 4c 24 30	 lea	 rcx, QWORD PTR wrcb_to_call$[rsp]
  002b4	e8 00 00 00 00	 call	 gc_list_is_empty
  002b9	85 c0		 test	 eax, eax
  002bb	0f 84 d3 fe ff
	ff		 je	 $LL6@handle_wea
$LN58@handle_wea:
  002c1	48 8b bc 24 80
	00 00 00	 mov	 rdi, QWORD PTR [rsp+128]
  002c9	48 8b 74 24 78	 mov	 rsi, QWORD PTR [rsp+120]
  002ce	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]

; 765  :     }
; 766  : 
; 767  :     return num_freed;

  002d3	41 8b c5	 mov	 eax, r13d

; 768  : }

  002d6	48 83 c4 50	 add	 rsp, 80			; 00000050H
  002da	41 5e		 pop	 r14
  002dc	41 5d		 pop	 r13
  002de	5d		 pop	 rbp
  002df	c3		 ret	 0
handle_weakrefs ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@PDJEBAFO@gc?3?5?$CFs?5?$DM?$CFs?5?$CFp?$DO?6?$AA@ ; `string'
PUBLIC	??_C@_0M@OEBODMLH@debug_cycle?$AA@		; `string'
EXTRN	PySys_FormatStderr:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$debug_cycle DD imagerel debug_cycle
	DD	imagerel debug_cycle+89
	DD	imagerel $unwind$debug_cycle
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$debug_cycle DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0BA@PDJEBAFO@gc?3?5?$CFs?5?$DM?$CFs?5?$CFp?$DO?6?$AA@
CONST	SEGMENT
??_C@_0BA@PDJEBAFO@gc?3?5?$CFs?5?$DM?$CFs?5?$CFp?$DO?6?$AA@ DB 'gc: %s <%'
	DB	's %p>', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OEBODMLH@debug_cycle?$AA@
CONST	SEGMENT
??_C@_0M@OEBODMLH@debug_cycle?$AA@ DB 'debug_cycle', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT debug_cycle
_TEXT	SEGMENT
msg$ = 48
op$ = 56
debug_cycle PROC					; COMDAT

; 772  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	48 8b f9	 mov	 rdi, rcx

; 773  :     Py_GUARD

  00010	e8 00 00 00 00	 call	 _Py_PXCTX
  00015	85 c0		 test	 eax, eax
  00017	74 1c		 je	 SHORT $LN1@debug_cycl
  00019	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@OEBODMLH@debug_cycle?$AA@
  00027	45 33 c9	 xor	 r9d, r9d
  0002a	41 b8 05 03 00
	00		 mov	 r8d, 773		; 00000305H
  00030	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@debug_cycl:

; 774  :     PySys_FormatStderr("gc: %s <%s %p>\n",
; 775  :                        msg, Py_TYPE(op)->tp_name, op);

  00035	4c 8b 43 58	 mov	 r8, QWORD PTR [rbx+88]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@PDJEBAFO@gc?3?5?$CFs?5?$DM?$CFs?5?$CFp?$DO?6?$AA@
  00040	4c 8b cb	 mov	 r9, rbx
  00043	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00047	48 8b d7	 mov	 rdx, rdi

; 776  : }

  0004a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00053	5f		 pop	 rdi
  00054	e9 00 00 00 00	 jmp	 PySys_FormatStderr
debug_cycle ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@GAOLHDOE@gc?5couldn?8t?5create?5gc?4garbage?5li@ ; `string'
PUBLIC	??_C@_0BC@CEMELLLO@handle_finalizers?$AA@	; `string'
EXTRN	Py_FatalError:PROC
EXTRN	PyList_New:PROC
_BSS	SEGMENT
debug	DD	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$handle_finalizers DD imagerel handle_finalizers
	DD	imagerel handle_finalizers+216
	DD	imagerel $unwind$handle_finalizers
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$handle_finalizers DD 086b01H
	DD	06746bH
	DD	08540fH
	DD	07340fH
	DD	0600b320fH
xdata	ENDS
;	COMDAT ??_C@_0CD@GAOLHDOE@gc?5couldn?8t?5create?5gc?4garbage?5li@
CONST	SEGMENT
??_C@_0CD@GAOLHDOE@gc?5couldn?8t?5create?5gc?4garbage?5li@ DB 'gc couldn'''
	DB	't create gc.garbage list', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CEMELLLO@handle_finalizers?$AA@
CONST	SEGMENT
??_C@_0BC@CEMELLLO@handle_finalizers?$AA@ DB 'handle_finalizers', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT handle_finalizers
_TEXT	SEGMENT
finalizers$ = 48
old$ = 56
handle_finalizers PROC					; COMDAT

; 789  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	56		 push	 rsi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b ea	 mov	 rbp, rdx
  00012	48 8b f1	 mov	 rsi, rcx

; 790  :     PyGC_Head *gc;
; 791  :     Py_GUARD

  00015	e8 00 00 00 00	 call	 _Py_PXCTX
  0001a	85 c0		 test	 eax, eax
  0001c	74 1c		 je	 SHORT $LN9@handle_fin
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@CEMELLLO@handle_finalizers?$AA@
  0002c	45 33 c9	 xor	 r9d, r9d
  0002f	41 b8 17 03 00
	00		 mov	 r8d, 791		; 00000317H
  00035	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@handle_fin:

; 792  :     gc = finalizers->gc.gc_next;
; 793  : 
; 794  :     if (garbage == NULL) {

  0003a	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR garbage, 0
  00042	48 8b 1e	 mov	 rbx, QWORD PTR [rsi]
  00045	75 1f		 jne	 SHORT $LN7@handle_fin

; 795  :         garbage = PyList_New(0);

  00047	33 c9		 xor	 ecx, ecx
  00049	e8 00 00 00 00	 call	 PyList_New
  0004e	48 89 05 00 00
	00 00		 mov	 QWORD PTR garbage, rax

; 796  :         if (garbage == NULL)

  00055	48 85 c0	 test	 rax, rax
  00058	75 0c		 jne	 SHORT $LN7@handle_fin

; 797  :             Py_FatalError("gc couldn't create gc.garbage list");

  0005a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@GAOLHDOE@gc?5couldn?8t?5create?5gc?4garbage?5li@
  00061	e8 00 00 00 00	 call	 Py_FatalError
$LN7@handle_fin:

; 798  :     }
; 799  :     for (; gc != finalizers; gc = gc->gc.gc_next) {

  00066	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  0006b	48 3b de	 cmp	 rbx, rsi
  0006e	74 41		 je	 SHORT $LN4@handle_fin
$LL6@handle_fin:

; 800  :         PyObject *op = FROM_GC(gc);

  00070	e8 00 00 00 00	 call	 _Py_PXCTX
  00075	85 c0		 test	 eax, eax
  00077	74 04		 je	 SHORT $LN12@handle_fin
  00079	33 ff		 xor	 edi, edi
  0007b	eb 04		 jmp	 SHORT $LN13@handle_fin
$LN12@handle_fin:
  0007d	48 8d 7b 18	 lea	 rdi, QWORD PTR [rbx+24]
$LN13@handle_fin:

; 801  : 
; 802  :         if ((debug & DEBUG_SAVEALL) || has_finalizer(op)) {

  00081	f6 05 00 00 00
	00 20		 test	 BYTE PTR debug, 32	; 00000020H
  00088	75 0c		 jne	 SHORT $LN2@handle_fin
  0008a	48 8b cf	 mov	 rcx, rdi
  0008d	e8 00 00 00 00	 call	 has_finalizer
  00092	85 c0		 test	 eax, eax
  00094	74 13		 je	 SHORT $LN5@handle_fin
$LN2@handle_fin:

; 803  :             if (PyList_Append(garbage, op) < 0)

  00096	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR garbage
  0009d	48 8b d7	 mov	 rdx, rdi
  000a0	e8 00 00 00 00	 call	 PyList_Append
  000a5	85 c0		 test	 eax, eax
  000a7	78 2a		 js	 SHORT $LN15@handle_fin
$LN5@handle_fin:

; 798  :     }
; 799  :     for (; gc != finalizers; gc = gc->gc.gc_next) {

  000a9	48 8b 1b	 mov	 rbx, QWORD PTR [rbx]
  000ac	48 3b de	 cmp	 rbx, rsi
  000af	75 bf		 jne	 SHORT $LL6@handle_fin
$LN4@handle_fin:

; 805  :         }
; 806  :     }
; 807  : 
; 808  :     gc_list_merge(finalizers, old);

  000b1	48 8b d5	 mov	 rdx, rbp
  000b4	48 8b ce	 mov	 rcx, rsi
  000b7	e8 00 00 00 00	 call	 gc_list_merge

; 809  :     return 0;

  000bc	33 c0		 xor	 eax, eax
$LN10@handle_fin:

; 810  : }

  000be	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
  000c3	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000c8	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  000cd	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d1	5e		 pop	 rsi
  000d2	c3		 ret	 0
$LN15@handle_fin:

; 804  :                 return -1;

  000d3	83 c8 ff	 or	 eax, -1
  000d6	eb e6		 jmp	 SHORT $LN10@handle_fin
handle_finalizers ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@JMAJJBLG@delete_garbage?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$delete_garbage DD imagerel delete_garbage
	DD	imagerel delete_garbage+70
	DD	imagerel $unwind$delete_garbage
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$delete_garbage DD imagerel delete_garbage+70
	DD	imagerel delete_garbage+376
	DD	imagerel $chain$2$delete_garbage
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$delete_garbage DD imagerel delete_garbage+376
	DD	imagerel delete_garbage+388
	DD	imagerel $chain$3$delete_garbage
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$delete_garbage DD 021H
	DD	imagerel delete_garbage
	DD	imagerel delete_garbage+70
	DD	imagerel $unwind$delete_garbage
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$delete_garbage DD 060f21H
	DD	0a740fH
	DD	09640aH
	DD	083405H
	DD	imagerel delete_garbage
	DD	imagerel delete_garbage+70
	DD	imagerel $unwind$delete_garbage
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$delete_garbage DD 040b01H
	DD	0b540bH
	DD	0c007520bH
xdata	ENDS
;	COMDAT ??_C@_0P@JMAJJBLG@delete_garbage?$AA@
CONST	SEGMENT
??_C@_0P@JMAJJBLG@delete_garbage?$AA@ DB 'delete_garbage', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\gcmodule.c
CONST	ENDS
;	COMDAT delete_garbage
_TEXT	SEGMENT
collectable$ = 64
old$ = 72
delete_garbage PROC					; COMDAT

; 818  : {

  00000	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  00005	41 54		 push	 r12
  00007	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000b	4c 8b e2	 mov	 r12, rdx
  0000e	48 8b e9	 mov	 rbp, rcx

; 819  :     inquiry clear;
; 820  :     Py_GUARD

  00011	e8 00 00 00 00	 call	 _Py_PXCTX
  00016	85 c0		 test	 eax, eax
  00018	74 1c		 je	 SHORT $LN27@delete_gar
  0001a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@JMAJJBLG@delete_garbage?$AA@
  00028	45 33 c9	 xor	 r9d, r9d
  0002b	41 b8 34 03 00
	00		 mov	 r8d, 820		; 00000334H
  00031	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN27@delete_gar:

; 821  : 
; 822  :     while (!gc_list_is_empty(collectable)) {

  00036	48 8b cd	 mov	 rcx, rbp
  00039	e8 00 00 00 00	 call	 gc_list_is_empty
  0003e	85 c0		 test	 eax, eax
  00040	0f 85 32 01 00
	00		 jne	 $LN5@delete_gar
  00046	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0004b	48 89 74 24 48	 mov	 QWORD PTR [rsp+72], rsi
  00050	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
$LL6@delete_gar:

; 823  :         PyGC_Head *gc = collectable->gc.gc_next;

  00055	48 8b 7d 00	 mov	 rdi, QWORD PTR [rbp]

; 824  :         PyObject *op = FROM_GC(gc);

  00059	e8 00 00 00 00	 call	 _Py_PXCTX
  0005e	85 c0		 test	 eax, eax
  00060	74 04		 je	 SHORT $LN10@delete_gar
  00062	33 db		 xor	 ebx, ebx
  00064	eb 04		 jmp	 SHORT $LN11@delete_gar
$LN10@delete_gar:
  00066	48 8d 5f 18	 lea	 rbx, QWORD PTR [rdi+24]
$LN11@delete_gar:

; 825  : 
; 826  :         assert(IS_TENTATIVELY_UNREACHABLE(op));
; 827  :         if (debug & DEBUG_SAVEALL) {

  0006a	f6 05 00 00 00
	00 20		 test	 BYTE PTR debug, 32	; 00000020H
  00071	74 14		 je	 SHORT $LN4@delete_gar

; 828  :             PyList_Append(garbage, op);

  00073	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR garbage
  0007a	48 8b d3	 mov	 rdx, rbx
  0007d	e8 00 00 00 00	 call	 PyList_Append

; 829  :         }
; 830  :         else {

  00082	e9 b9 00 00 00	 jmp	 $LN26@delete_gar
$LN4@delete_gar:

; 831  :             if ((clear = Py_TYPE(op)->tp_clear) != NULL) {

  00087	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0008b	48 8b b0 18 01
	00 00		 mov	 rsi, QWORD PTR [rax+280]
  00092	48 85 f6	 test	 rsi, rsi
  00095	0f 84 a5 00 00
	00		 je	 $LN26@delete_gar

; 832  :                 Py_INCREF(op);

  0009b	e8 00 00 00 00	 call	 _Py_PXCTX
  000a0	85 c0		 test	 eax, eax
  000a2	75 32		 jne	 SHORT $LN13@delete_gar
  000a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000b2	4c 8b cb	 mov	 r9, rbx
  000b5	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000bb	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000c3	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c8	85 c0		 test	 eax, eax
  000ca	75 06		 jne	 SHORT $LN12@delete_gar
  000cc	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000d0	74 04		 je	 SHORT $LN13@delete_gar
$LN12@delete_gar:
  000d2	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN13@delete_gar:

; 833  :                 clear(op);

  000d6	48 8b cb	 mov	 rcx, rbx
  000d9	ff d6		 call	 rsi

; 834  :                 Py_DECREF(op);

  000db	e8 00 00 00 00	 call	 _Py_PXCTX
  000e0	85 c0		 test	 eax, eax
  000e2	75 5c		 jne	 SHORT $LN26@delete_gar
  000e4	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000e8	a8 20		 test	 al, 32			; 00000020H
  000ea	75 4c		 jne	 SHORT $LN20@delete_gar
  000ec	84 c0		 test	 al, al
  000ee	78 48		 js	 SHORT $LN20@delete_gar
  000f0	a8 02		 test	 al, 2
  000f2	75 4c		 jne	 SHORT $LN26@delete_gar
  000f4	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000f8	75 46		 jne	 SHORT $LN26@delete_gar
  000fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00101	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00108	4c 8b cb	 mov	 r9, rbx
  0010b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00111	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00119	e8 00 00 00 00	 call	 _PyParallel_Guard
  0011e	48 8b cb	 mov	 rcx, rbx
  00121	85 c0		 test	 eax, eax
  00123	74 07		 je	 SHORT $LN25@delete_gar
  00125	e8 00 00 00 00	 call	 _Px_Dealloc
  0012a	eb 14		 jmp	 SHORT $LN26@delete_gar
$LN25@delete_gar:
  0012c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00130	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00136	eb 08		 jmp	 SHORT $LN26@delete_gar
$LN20@delete_gar:
  00138	48 8b cb	 mov	 rcx, rbx
  0013b	e8 00 00 00 00	 call	 Px_DecRef
$LN26@delete_gar:

; 835  :             }
; 836  :         }
; 837  :         if (collectable->gc.gc_next == gc) {

  00140	48 39 7d 00	 cmp	 QWORD PTR [rbp], rdi
  00144	75 13		 jne	 SHORT $LN1@delete_gar

; 838  :             /* object is still alive, move it, it may die later */
; 839  :             gc_list_move(gc, old);

  00146	49 8b d4	 mov	 rdx, r12
  00149	48 8b cf	 mov	 rcx, rdi
  0014c	e8 00 00 00 00	 call	 gc_list_move

; 840  :             gc->gc.gc_refs = GC_REACHABLE;

  00151	48 c7 47 10 fd
	ff ff ff	 mov	 QWORD PTR [rdi+16], -3
$LN1@delete_gar:

; 821  : 
; 822  :     while (!gc_list_is_empty(collectable)) {

  00159	48 8b cd	 mov	 rcx, rbp
  0015c	e8 00 00 00 00	 call	 gc_list_is_empty
  00161	85 c0		 test	 eax, eax
  00163	0f 84 ec fe ff
	ff		 je	 $LL6@delete_gar
  00169	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]
  0016e	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00173	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN5@delete_gar:

; 841  :         }
; 842  :     }
; 843  : }

  00178	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  0017d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00181	41 5c		 pop	 r12
  00183	c3		 ret	 0
delete_garbage ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@HKHHNIOB@clear_freelists?$AA@		; `string'
EXTRN	PySet_ClearFreeList:PROC
EXTRN	PyDict_ClearFreeList:PROC
EXTRN	PyList_ClearFreeList:PROC
EXTRN	PyFloat_ClearFreeList:PROC
EXTRN	PyUnicode_ClearFreeList:PROC
EXTRN	PyTuple_ClearFreeList:PROC
EXTRN	PyCFunction_ClearFreeList:PROC
EXTRN	PyFrame_ClearFreeList:PROC
EXTRN	PyMethod_ClearFreeList:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$clear_freelists DD imagerel clear_freelists
	DD	imagerel clear_freelists+90
	DD	imagerel $unwind$clear_freelists
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$clear_freelists DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BA@HKHHNIOB@clear_freelists?$AA@
CONST	SEGMENT
??_C@_0BA@HKHHNIOB@clear_freelists?$AA@ DB 'clear_freelists', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT clear_freelists
_TEXT	SEGMENT
clear_freelists PROC					; COMDAT

; 852  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 853  :     Py_GUARD

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	74 1c		 je	 SHORT $LN1@clear_free
  0000d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@HKHHNIOB@clear_freelists?$AA@
  0001b	45 33 c9	 xor	 r9d, r9d
  0001e	41 b8 55 03 00
	00		 mov	 r8d, 853		; 00000355H
  00024	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@clear_free:

; 854  :     (void)PyMethod_ClearFreeList();

  00029	e8 00 00 00 00	 call	 PyMethod_ClearFreeList

; 855  :     (void)PyFrame_ClearFreeList();

  0002e	e8 00 00 00 00	 call	 PyFrame_ClearFreeList

; 856  :     (void)PyCFunction_ClearFreeList();

  00033	e8 00 00 00 00	 call	 PyCFunction_ClearFreeList

; 857  :     (void)PyTuple_ClearFreeList();

  00038	e8 00 00 00 00	 call	 PyTuple_ClearFreeList

; 858  :     (void)PyUnicode_ClearFreeList();

  0003d	e8 00 00 00 00	 call	 PyUnicode_ClearFreeList

; 859  :     (void)PyFloat_ClearFreeList();

  00042	e8 00 00 00 00	 call	 PyFloat_ClearFreeList

; 860  :     (void)PyList_ClearFreeList();

  00047	e8 00 00 00 00	 call	 PyList_ClearFreeList

; 861  :     (void)PyDict_ClearFreeList();

  0004c	e8 00 00 00 00	 call	 PyDict_ClearFreeList

; 862  :     (void)PySet_ClearFreeList();
; 863  : }

  00051	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00055	e9 00 00 00 00	 jmp	 PySet_ClearFreeList
clear_freelists ENDP
_TEXT	ENDS
EXTRN	PyFloat_AsDouble:PROC
EXTRN	PyType_IsSubtype:PROC
EXTRN	PyFloat_Type:BYTE
EXTRN	PyErr_Clear:PROC
EXTRN	_PyObject_CallMethodId:PROC
EXTRN	_fltused:DWORD
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_time DD imagerel get_time
	DD	imagerel get_time+53
	DD	imagerel $unwind$get_time
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$get_time DD imagerel get_time+53
	DD	imagerel get_time+95
	DD	imagerel $chain$0$get_time
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$get_time DD imagerel get_time+95
	DD	imagerel get_time+145
	DD	imagerel $chain$2$get_time
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$get_time DD imagerel get_time+145
	DD	imagerel get_time+159
	DD	imagerel $chain$3$get_time
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$get_time DD 021H
	DD	imagerel get_time
	DD	imagerel get_time+53
	DD	imagerel $unwind$get_time
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$get_time DD 020021H
	DD	063400H
	DD	imagerel get_time
	DD	imagerel get_time+53
	DD	imagerel $unwind$get_time
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$get_time DD 020521H
	DD	063405H
	DD	imagerel get_time
	DD	imagerel get_time+53
	DD	imagerel $unwind$get_time
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_time DD 031001H
	DD	026810H
	DD	06204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT get_time
_TEXT	SEGMENT
get_time PROC						; COMDAT

; 867  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 868  :     double result = 0;
; 869  :     if (tmod != NULL) {

  00004	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR tmod
  0000b	0f 29 74 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm6
  00010	66 0f 57 f6	 xorpd	 xmm6, xmm6
  00014	48 85 c9	 test	 rcx, rcx
  00017	74 78		 je	 SHORT $LN8@get_time

; 870  :         _Py_IDENTIFIER(time);
; 871  : 
; 872  :         PyObject *f = _PyObject_CallMethodId(tmod, &PyId_time, NULL);

  00019	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  00020	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00029	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_time@?2??get_time@@9@9
  0002e	4a 03 14 c0	 add	 rdx, QWORD PTR [rax+r8*8]
  00032	45 33 c0	 xor	 r8d, r8d
  00035	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0003a	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  0003f	48 8b d8	 mov	 rbx, rax

; 873  :         if (f == NULL) {

  00042	48 85 c0	 test	 rax, rax
  00045	75 18		 jne	 SHORT $LN4@get_time

; 874  :             PyErr_Clear();

  00047	e8 00 00 00 00	 call	 PyErr_Clear
  0004c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 880  :         }
; 881  :     }
; 882  :     return result;

  00051	66 0f 28 c6	 movapd	 xmm0, xmm6

; 883  : }

  00055	0f 28 74 24 20	 movaps	 xmm6, XMMWORD PTR [rsp+32]
  0005a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005e	c3		 ret	 0
$LN4@get_time:

; 875  :         }
; 876  :         else {
; 877  :             if (PyFloat_Check(f))

  0005f	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00063	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyFloat_Type
  0006a	48 3b ca	 cmp	 rcx, rdx
  0006d	74 09		 je	 SHORT $LN1@get_time
  0006f	e8 00 00 00 00	 call	 PyType_IsSubtype
  00074	85 c0		 test	 eax, eax
  00076	74 0c		 je	 SHORT $LN2@get_time
$LN1@get_time:

; 878  :                 result = PyFloat_AsDouble(f);

  00078	48 8b cb	 mov	 rcx, rbx
  0007b	e8 00 00 00 00	 call	 PyFloat_AsDouble
  00080	66 0f 28 f0	 movapd	 xmm6, xmm0
$LN2@get_time:

; 879  :             Py_DECREF(f);

  00084	48 8b cb	 mov	 rcx, rbx
  00087	e8 00 00 00 00	 call	 _Py_DecRef
  0008c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
$LN8@get_time:

; 880  :         }
; 881  :     }
; 882  :     return result;

  00091	66 0f 28 c6	 movapd	 xmm0, xmm6

; 883  : }

  00095	0f 28 74 24 20	 movaps	 xmm6, XMMWORD PTR [rsp+32]
  0009a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009e	c3		 ret	 0
get_time ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CP@JHDAMHOK@unexpected?5exception?5during?5garb@ ; `string'
PUBLIC	??_C@_0BD@GKCDOENF@garbage?5collection?$AA@	; `string'
PUBLIC	??_C@_02MIICKFIN@?4?6?$AA@			; `string'
PUBLIC	??_C@_0BA@MDGCICCN@?0?5?$CF?44fs?5elapsed?$AA@	; `string'
PUBLIC	__real@0000000000000000
PUBLIC	??_C@_0CN@PKPAIAHB@gc?3?5done?0?5?$CFId?5unreachable?0?5?$CFId?5u@ ; `string'
PUBLIC	??_C@_08CBBLBAFO@gc?3?5done?$AA@		; `string'
PUBLIC	??_C@_0O@IHCNLMBF@uncollectable?$AA@		; `string'
PUBLIC	??_C@_0M@LHJKAIHL@collectable?$AA@		; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_04BBCKGAAG@?5?$CFId?$AA@			; `string'
PUBLIC	??_C@_0CA@FMEBEFJE@gc?3?5objects?5in?5each?5generation?3?$AA@ ; `string'
PUBLIC	??_C@_0CB@GJEHPAOL@gc?3?5collecting?5generation?5?$CFd?4?4?4?6@ ; `string'
EXTRN	PyUnicode_FromString:PROC
EXTRN	PyErr_Occurred:PROC
EXTRN	PySys_WriteStderr:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$collect DD imagerel collect
	DD	imagerel collect+23
	DD	imagerel $unwind$collect
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$collect DD imagerel collect+23
	DD	imagerel collect+35
	DD	imagerel $chain$2$collect
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$collect DD imagerel collect+35
	DD	imagerel collect+424
	DD	imagerel $chain$5$collect
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$collect DD imagerel collect+424
	DD	imagerel collect+727
	DD	imagerel $chain$6$collect
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$collect DD imagerel collect+727
	DD	imagerel collect+851
	DD	imagerel $chain$8$collect
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$collect DD imagerel collect+851
	DD	imagerel collect+888
	DD	imagerel $chain$7$collect
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$collect DD imagerel collect+888
	DD	imagerel collect+981
	DD	imagerel $chain$9$collect
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$10$collect DD imagerel collect+981
	DD	imagerel collect+997
	DD	imagerel $chain$10$collect
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$10$collect DD 021H
	DD	imagerel collect
	DD	imagerel collect+23
	DD	imagerel $unwind$collect
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$collect DD 020021H
	DD	0115400H
	DD	imagerel collect
	DD	imagerel collect+23
	DD	imagerel $unwind$collect
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$collect DD 080021H
	DD	057800H
	DD	0ef400H
	DD	0107400H
	DD	0115400H
	DD	imagerel collect
	DD	imagerel collect+23
	DD	imagerel $unwind$collect
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$collect DD 020521H
	DD	066805H
	DD	imagerel collect+851
	DD	imagerel collect+888
	DD	imagerel $chain$7$collect
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$collect DD 040021H
	DD	057800H
	DD	0ef400H
	DD	imagerel collect+23
	DD	imagerel collect+35
	DD	imagerel $chain$2$collect
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$collect DD 060f21H
	DD	05780fH
	DD	0ef408H
	DD	0fc404H
	DD	imagerel collect+23
	DD	imagerel collect+35
	DD	imagerel $chain$2$collect
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$collect DD 060c21H
	DD	010740cH
	DD	0115408H
	DD	0163404H
	DD	imagerel collect
	DD	imagerel collect+23
	DD	imagerel $unwind$collect
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$collect DD 051701H
	DD	0120117H
	DD	0d00ee010H
	DD	0600cH
xdata	ENDS
;	COMDAT ??_C@_0CP@JHDAMHOK@unexpected?5exception?5during?5garb@
CONST	SEGMENT
??_C@_0CP@JHDAMHOK@unexpected?5exception?5during?5garb@ DB 'unexpected ex'
	DB	'ception during garbage collection', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GKCDOENF@garbage?5collection?$AA@
CONST	SEGMENT
??_C@_0BD@GKCDOENF@garbage?5collection?$AA@ DB 'garbage collection', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02MIICKFIN@?4?6?$AA@
CONST	SEGMENT
??_C@_02MIICKFIN@?4?6?$AA@ DB '.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MDGCICCN@?0?5?$CF?44fs?5elapsed?$AA@
CONST	SEGMENT
??_C@_0BA@MDGCICCN@?0?5?$CF?44fs?5elapsed?$AA@ DB ', %.4fs elapsed', 00H ; `string'
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_C@_0CN@PKPAIAHB@gc?3?5done?0?5?$CFId?5unreachable?0?5?$CFId?5u@
CONST	SEGMENT
??_C@_0CN@PKPAIAHB@gc?3?5done?0?5?$CFId?5unreachable?0?5?$CFId?5u@ DB 'gc'
	DB	': done, %Id unreachable, %Id uncollectable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08CBBLBAFO@gc?3?5done?$AA@
CONST	SEGMENT
??_C@_08CBBLBAFO@gc?3?5done?$AA@ DB 'gc: done', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IHCNLMBF@uncollectable?$AA@
CONST	SEGMENT
??_C@_0O@IHCNLMBF@uncollectable?$AA@ DB 'uncollectable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LHJKAIHL@collectable?$AA@
CONST	SEGMENT
??_C@_0M@LHJKAIHL@collectable?$AA@ DB 'collectable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04BBCKGAAG@?5?$CFId?$AA@
CONST	SEGMENT
??_C@_04BBCKGAAG@?5?$CFId?$AA@ DB ' %Id', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FMEBEFJE@gc?3?5objects?5in?5each?5generation?3?$AA@
CONST	SEGMENT
??_C@_0CA@FMEBEFJE@gc?3?5objects?5in?5each?5generation?3?$AA@ DB 'gc: obj'
	DB	'ects in each generation:', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@GJEHPAOL@gc?3?5collecting?5generation?5?$CFd?4?4?4?6@
CONST	SEGMENT
??_C@_0CB@GJEHPAOL@gc?3?5collecting?5generation?5?$CFd?4?4?4?6@ DB 'gc: c'
	DB	'ollecting generation %d...', 0aH, 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT collect
_TEXT	SEGMENT
unreachable$ = 32
finalizers$ = 56
generation$ = 176
n_collected$ = 184
n_uncollectable$ = 192
collect	PROC						; COMDAT

; 889  : {

  00000	48 8b c4	 mov	 rax, rsp
  00003	4c 89 40 18	 mov	 QWORD PTR [rax+24], r8
  00007	48 89 50 10	 mov	 QWORD PTR [rax+16], rdx
  0000b	56		 push	 rsi
  0000c	41 55		 push	 r13
  0000e	41 56		 push	 r14
  00010	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H
  00017	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  0001b	48 89 68 e0	 mov	 QWORD PTR [rax-32], rbp
  0001f	48 89 78 d8	 mov	 QWORD PTR [rax-40], rdi
  00023	4c 89 60 d0	 mov	 QWORD PTR [rax-48], r12
  00027	4c 89 78 c8	 mov	 QWORD PTR [rax-56], r15
  0002b	49 8b f0	 mov	 rsi, r8
  0002e	0f 29 78 a8	 movaps	 XMMWORD PTR [rax-88], xmm7

; 890  :     int i;
; 891  :     Py_ssize_t m = 0; /* # objects collected */
; 892  :     Py_ssize_t n = 0; /* # unreachable objects that couldn't be collected */
; 893  :     PyGC_Head *young; /* the generation we are examining */
; 894  :     PyGC_Head *old; /* next older generation */
; 895  :     PyGC_Head unreachable; /* non-problematic unreachable trash */
; 896  :     PyGC_Head finalizers;  /* objects with, & reachable from, __del__ */
; 897  :     PyGC_Head *gc;
; 898  :     double t1 = 0.0;

  00032	66 0f 57 ff	 xorpd	 xmm7, xmm7
  00036	48 8b ea	 mov	 rbp, rdx
  00039	44 8b f9	 mov	 r15d, ecx
  0003c	45 33 f6	 xor	 r14d, r14d
  0003f	45 33 ed	 xor	 r13d, r13d

; 899  :     Py_GUARD

  00042	e8 00 00 00 00	 call	 _Py_PXCTX
  00047	85 c0		 test	 eax, eax
  00049	74 1c		 je	 SHORT $LN34@collect
  0004b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00052	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07JHIJCABF@collect?$AA@
  00059	45 33 c9	 xor	 r9d, r9d
  0005c	41 b8 83 03 00
	00		 mov	 r8d, 899		; 00000383H
  00062	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN34@collect:

; 900  : 
; 901  :     if (debug & DEBUG_STATS) {

  00067	f6 05 00 00 00
	00 01		 test	 BYTE PTR debug, 1
  0006e	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:generations
  00075	74 65		 je	 SHORT $LN33@collect

; 902  :         PySys_WriteStderr("gc: collecting generation %d...\n",
; 903  :                           generation);

  00077	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CB@GJEHPAOL@gc?3?5collecting?5generation?5?$CFd?4?4?4?6@
  0007e	41 8b d7	 mov	 edx, r15d
  00081	e8 00 00 00 00	 call	 PySys_WriteStderr

; 904  :         PySys_WriteStderr("gc: objects in each generation:");

  00086	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@FMEBEFJE@gc?3?5objects?5in?5each?5generation?3?$AA@
  0008d	e8 00 00 00 00	 call	 PySys_WriteStderr
  00092	48 8b df	 mov	 rbx, rdi
  00095	bf 03 00 00 00	 mov	 edi, 3
  0009a	66 0f 1f 44 00
	00		 npad	 6
$LL32@collect:

; 905  :         for (i = 0; i < NUM_GENERATIONS; i++)
; 906  :             PySys_WriteStderr(" %" PY_FORMAT_SIZE_T "d",
; 907  :                               gc_list_size(GEN_HEAD(i)));

  000a0	48 8b cb	 mov	 rcx, rbx
  000a3	e8 00 00 00 00	 call	 gc_list_size
  000a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04BBCKGAAG@?5?$CFId?$AA@
  000af	48 8b d0	 mov	 rdx, rax
  000b2	e8 00 00 00 00	 call	 PySys_WriteStderr
  000b7	48 83 c3 20	 add	 rbx, 32			; 00000020H
  000bb	48 ff cf	 dec	 rdi
  000be	75 e0		 jne	 SHORT $LL32@collect

; 908  :         t1 = get_time();

  000c0	e8 00 00 00 00	 call	 get_time

; 909  :         PySys_WriteStderr("\n");

  000c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  000cc	66 0f 28 f8	 movapd	 xmm7, xmm0
  000d0	e8 00 00 00 00	 call	 PySys_WriteStderr
  000d5	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:generations
$LN33@collect:

; 910  :     }
; 911  : 
; 912  :     /* update collection and allocation counters */
; 913  :     if (generation+1 < NUM_GENERATIONS)

  000dc	45 8d 67 01	 lea	 r12d, DWORD PTR [r15+1]
  000e0	41 83 fc 03	 cmp	 r12d, 3
  000e4	7d 0b		 jge	 SHORT $LN29@collect

; 914  :         generations[generation+1].count += 1;

  000e6	49 63 c7	 movsxd	 rax, r15d
  000e9	48 c1 e0 05	 shl	 rax, 5
  000ed	ff 44 38 3c	 inc	 DWORD PTR [rax+rdi+60]
$LN29@collect:

; 915  :     for (i = 0; i <= generation; i++)

  000f1	49 63 df	 movsxd	 rbx, r15d
  000f4	45 85 ff	 test	 r15d, r15d
  000f7	78 25		 js	 SHORT $LN55@collect
  000f9	48 8d 05 1c 00
	00 00		 lea	 rax, OFFSET FLAT:generations+28
  00100	48 8d 4b 01	 lea	 rcx, QWORD PTR [rbx+1]
  00104	33 d2		 xor	 edx, edx
  00106	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL28@collect:

; 916  :         generations[i].count = 0;

  00110	89 10		 mov	 DWORD PTR [rax], edx
  00112	48 83 c0 20	 add	 rax, 32			; 00000020H
  00116	48 ff c9	 dec	 rcx
  00119	75 f5		 jne	 SHORT $LL28@collect

; 917  : 
; 918  :     /* merge younger generations with one we are currently collecting */
; 919  :     for (i = 0; i < generation; i++) {

  0011b	45 85 ff	 test	 r15d, r15d
$LN55@collect:
  0011e	7e 34		 jle	 SHORT $LN23@collect
  00120	48 8b eb	 mov	 rbp, rbx
  00123	49 8b f7	 mov	 rsi, r15
  00126	48 c1 e5 05	 shl	 rbp, 5
  0012a	48 03 ef	 add	 rbp, rdi
  0012d	0f 1f 00	 npad	 3
$LL25@collect:

; 920  :         gc_list_merge(GEN_HEAD(i), GEN_HEAD(generation));

  00130	48 8b d5	 mov	 rdx, rbp
  00133	48 8b cf	 mov	 rcx, rdi
  00136	e8 00 00 00 00	 call	 gc_list_merge
  0013b	48 83 c7 20	 add	 rdi, 32			; 00000020H
  0013f	48 ff ce	 dec	 rsi
  00142	75 ec		 jne	 SHORT $LL25@collect
  00144	48 8b b4 24 c0
	00 00 00	 mov	 rsi, QWORD PTR n_uncollectable$[rsp]
  0014c	48 8b ac 24 b8
	00 00 00	 mov	 rbp, QWORD PTR n_collected$[rsp]
$LN23@collect:

; 921  :     }
; 922  : 
; 923  :     /* handy references */
; 924  :     young = GEN_HEAD(generation);

  00154	48 c1 e3 05	 shl	 rbx, 5
  00158	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:generations
  0015f	48 03 d8	 add	 rbx, rax

; 925  :     if (generation < NUM_GENERATIONS-1)

  00162	41 83 ff 02	 cmp	 r15d, 2
  00166	7d 0c		 jge	 SHORT $LN22@collect

; 926  :         old = GEN_HEAD(generation+1);

  00168	49 63 fc	 movsxd	 rdi, r12d
  0016b	48 c1 e7 05	 shl	 rdi, 5
  0016f	48 03 f8	 add	 rdi, rax

; 927  :     else

  00172	eb 03		 jmp	 SHORT $LN21@collect
$LN22@collect:

; 928  :         old = young;

  00174	48 8b fb	 mov	 rdi, rbx
$LN21@collect:

; 929  : 
; 930  :     /* Using ob_refcnt and gc_refs, calculate which objects in the
; 931  :      * container set are reachable from outside the set (i.e., have a
; 932  :      * refcount greater than 0 when all the references within the
; 933  :      * set are taken into account).
; 934  :      */
; 935  :     update_refs(young);

  00177	48 8b cb	 mov	 rcx, rbx
  0017a	e8 00 00 00 00	 call	 update_refs

; 936  :     subtract_refs(young);

  0017f	48 8b cb	 mov	 rcx, rbx
  00182	e8 00 00 00 00	 call	 subtract_refs

; 937  : 
; 938  :     /* Leave everything reachable from outside young in young, and move
; 939  :      * everything else (in young) to unreachable.
; 940  :      * NOTE:  This used to move the reachable objects into a reachable
; 941  :      * set instead.  But most things usually turn out to be reachable,
; 942  :      * so it's more efficient to move the unreachable things.
; 943  :      */
; 944  :     gc_list_init(&unreachable);

  00187	48 8d 4c 24 20	 lea	 rcx, QWORD PTR unreachable$[rsp]
  0018c	e8 00 00 00 00	 call	 gc_list_init

; 945  :     move_unreachable(young, &unreachable);

  00191	48 8d 54 24 20	 lea	 rdx, QWORD PTR unreachable$[rsp]
  00196	48 8b cb	 mov	 rcx, rbx
  00199	e8 00 00 00 00	 call	 move_unreachable
  0019e	4c 8b 64 24 78	 mov	 r12, QWORD PTR [rsp+120]

; 946  : 
; 947  :     /* Move reachable objects to next generation. */
; 948  :     if (young != old) {

  001a3	48 3b df	 cmp	 rbx, rdi
  001a6	74 22		 je	 SHORT $LN20@collect

; 949  :         if (generation == NUM_GENERATIONS - 2) {

  001a8	41 83 ff 01	 cmp	 r15d, 1
  001ac	75 0f		 jne	 SHORT $LN19@collect

; 950  :             long_lived_pending += gc_list_size(young);

  001ae	48 8b cb	 mov	 rcx, rbx
  001b1	e8 00 00 00 00	 call	 gc_list_size
  001b6	48 01 05 00 00
	00 00		 add	 QWORD PTR long_lived_pending, rax
$LN19@collect:

; 951  :         }
; 952  :         gc_list_merge(young, old);

  001bd	48 8b d7	 mov	 rdx, rdi
  001c0	48 8b cb	 mov	 rcx, rbx
  001c3	e8 00 00 00 00	 call	 gc_list_merge

; 953  :     }
; 954  :     else {

  001c8	eb 1e		 jmp	 SHORT $LN18@collect
$LN20@collect:

; 955  :         /* We only untrack dicts in full collections, to avoid quadratic
; 956  :            dict build-up. See issue #14775. */
; 957  :         untrack_dicts(young);

  001ca	48 8b cb	 mov	 rcx, rbx
  001cd	e8 00 00 00 00	 call	 untrack_dicts

; 958  :         long_lived_pending = 0;
; 959  :         long_lived_total = gc_list_size(young);

  001d2	48 8b cb	 mov	 rcx, rbx
  001d5	4c 89 2d 00 00
	00 00		 mov	 QWORD PTR long_lived_pending, r13
  001dc	e8 00 00 00 00	 call	 gc_list_size
  001e1	48 89 05 00 00
	00 00		 mov	 QWORD PTR long_lived_total, rax
$LN18@collect:

; 960  :     }
; 961  : 
; 962  :     /* All objects in unreachable are trash, but objects reachable from
; 963  :      * finalizers can't safely be deleted.  Python programmers should take
; 964  :      * care not to create such things.  For Python, finalizers means
; 965  :      * instance objects with __del__ methods.  Weakrefs with callbacks
; 966  :      * can also call arbitrary Python code but they will be dealt with by
; 967  :      * handle_weakrefs().
; 968  :      */
; 969  :     gc_list_init(&finalizers);

  001e8	48 8d 4c 24 38	 lea	 rcx, QWORD PTR finalizers$[rsp]
  001ed	e8 00 00 00 00	 call	 gc_list_init

; 970  :     move_finalizers(&unreachable, &finalizers);

  001f2	48 8d 54 24 38	 lea	 rdx, QWORD PTR finalizers$[rsp]
  001f7	48 8d 4c 24 20	 lea	 rcx, QWORD PTR unreachable$[rsp]
  001fc	e8 00 00 00 00	 call	 move_finalizers

; 971  :     /* finalizers contains the unreachable objects with a finalizer;
; 972  :      * unreachable objects reachable *from* those are also uncollectable,
; 973  :      * and we move those into the finalizers list too.
; 974  :      */
; 975  :     move_finalizer_reachable(&finalizers);

  00201	48 8d 4c 24 38	 lea	 rcx, QWORD PTR finalizers$[rsp]
  00206	e8 00 00 00 00	 call	 move_finalizer_reachable

; 976  : 
; 977  :     /* Collect statistics on collectable objects found and print
; 978  :      * debugging information.
; 979  :      */
; 980  :     for (gc = unreachable.gc.gc_next; gc != &unreachable;
; 981  :                     gc = gc->gc.gc_next) {

  0020b	48 8b 5c 24 20	 mov	 rbx, QWORD PTR unreachable$[rsp]
  00210	48 8d 44 24 20	 lea	 rax, QWORD PTR unreachable$[rsp]
  00215	48 3b d8	 cmp	 rbx, rax
  00218	74 3c		 je	 SHORT $LN15@collect
  0021a	66 0f 1f 44 00
	00		 npad	 6
$LL17@collect:

; 982  :         m++;

  00220	49 ff c6	 inc	 r14

; 983  :         if (debug & DEBUG_COLLECTABLE) {

  00223	f6 05 00 00 00
	00 02		 test	 BYTE PTR debug, 2
  0022a	74 1d		 je	 SHORT $LN16@collect

; 984  :             debug_cycle("collectable", FROM_GC(gc));

  0022c	e8 00 00 00 00	 call	 _Py_PXCTX
  00231	85 c0		 test	 eax, eax
  00233	74 04		 je	 SHORT $LN37@collect
  00235	33 d2		 xor	 edx, edx
  00237	eb 04		 jmp	 SHORT $LN38@collect
$LN37@collect:
  00239	48 8d 53 18	 lea	 rdx, QWORD PTR [rbx+24]
$LN38@collect:
  0023d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@LHJKAIHL@collectable?$AA@
  00244	e8 00 00 00 00	 call	 debug_cycle
$LN16@collect:

; 976  : 
; 977  :     /* Collect statistics on collectable objects found and print
; 978  :      * debugging information.
; 979  :      */
; 980  :     for (gc = unreachable.gc.gc_next; gc != &unreachable;
; 981  :                     gc = gc->gc.gc_next) {

  00249	48 8b 1b	 mov	 rbx, QWORD PTR [rbx]
  0024c	48 8d 44 24 20	 lea	 rax, QWORD PTR unreachable$[rsp]
  00251	48 3b d8	 cmp	 rbx, rax
  00254	75 ca		 jne	 SHORT $LL17@collect
$LN15@collect:

; 985  :         }
; 986  :     }
; 987  : 
; 988  :     /* Clear weakrefs and invoke callbacks as necessary. */
; 989  :     m += handle_weakrefs(&unreachable, old);

  00256	48 8d 4c 24 20	 lea	 rcx, QWORD PTR unreachable$[rsp]
  0025b	48 8b d7	 mov	 rdx, rdi
  0025e	e8 00 00 00 00	 call	 handle_weakrefs

; 990  : 
; 991  :     /* Call tp_clear on objects in the unreachable set.  This will cause
; 992  :      * the reference cycles to be broken.  It may also cause some objects
; 993  :      * in finalizers to be freed.
; 994  :      */
; 995  :     delete_garbage(&unreachable, old);

  00263	48 8b d7	 mov	 rdx, rdi
  00266	48 63 c8	 movsxd	 rcx, eax
  00269	4c 03 f1	 add	 r14, rcx
  0026c	48 8d 4c 24 20	 lea	 rcx, QWORD PTR unreachable$[rsp]
  00271	e8 00 00 00 00	 call	 delete_garbage

; 996  : 
; 997  :     /* Collect statistics on uncollectable objects found and print
; 998  :      * debugging information. */
; 999  :     for (gc = finalizers.gc.gc_next;
; 1000 :          gc != &finalizers;
; 1001 :          gc = gc->gc.gc_next) {

  00276	48 8b 5c 24 38	 mov	 rbx, QWORD PTR finalizers$[rsp]
  0027b	48 8d 44 24 38	 lea	 rax, QWORD PTR finalizers$[rsp]
  00280	48 3b d8	 cmp	 rbx, rax
  00283	74 41		 je	 SHORT $LN54@collect
  00285	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL13@collect:

; 1002 :         n++;

  00290	49 ff c5	 inc	 r13

; 1003 :         if (debug & DEBUG_UNCOLLECTABLE)

  00293	f6 05 00 00 00
	00 04		 test	 BYTE PTR debug, 4
  0029a	74 1d		 je	 SHORT $LN12@collect

; 1004 :             debug_cycle("uncollectable", FROM_GC(gc));

  0029c	e8 00 00 00 00	 call	 _Py_PXCTX
  002a1	85 c0		 test	 eax, eax
  002a3	74 04		 je	 SHORT $LN39@collect
  002a5	33 d2		 xor	 edx, edx
  002a7	eb 04		 jmp	 SHORT $LN40@collect
$LN39@collect:
  002a9	48 8d 53 18	 lea	 rdx, QWORD PTR [rbx+24]
$LN40@collect:
  002ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@IHCNLMBF@uncollectable?$AA@
  002b4	e8 00 00 00 00	 call	 debug_cycle
$LN12@collect:

; 996  : 
; 997  :     /* Collect statistics on uncollectable objects found and print
; 998  :      * debugging information. */
; 999  :     for (gc = finalizers.gc.gc_next;
; 1000 :          gc != &finalizers;
; 1001 :          gc = gc->gc.gc_next) {

  002b9	48 8b 1b	 mov	 rbx, QWORD PTR [rbx]
  002bc	48 8d 44 24 38	 lea	 rax, QWORD PTR finalizers$[rsp]
  002c1	48 3b d8	 cmp	 rbx, rax
  002c4	75 ca		 jne	 SHORT $LL13@collect
$LN54@collect:

; 1005 :     }
; 1006 :     if (debug & DEBUG_STATS) {

  002c6	f6 05 00 00 00
	00 01		 test	 BYTE PTR debug, 1
  002cd	48 8b 9c 24 b0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+176]
  002d5	74 7c		 je	 SHORT $LN9@collect

; 1007 :         double t2 = get_time();

  002d7	0f 29 74 24 60	 movaps	 XMMWORD PTR [rsp+96], xmm6
  002dc	e8 00 00 00 00	 call	 get_time
  002e1	66 0f 28 f0	 movapd	 xmm6, xmm0

; 1008 :         if (m == 0 && n == 0)

  002e5	4d 85 f6	 test	 r14, r14
  002e8	75 13		 jne	 SHORT $LN8@collect
  002ea	4d 85 ed	 test	 r13, r13
  002ed	75 0e		 jne	 SHORT $LN8@collect

; 1009 :             PySys_WriteStderr("gc: done");

  002ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08CBBLBAFO@gc?3?5done?$AA@
  002f6	e8 00 00 00 00	 call	 PySys_WriteStderr

; 1010 :         else

  002fb	eb 14		 jmp	 SHORT $LN7@collect
$LN8@collect:

; 1011 :             PySys_WriteStderr(
; 1012 :                 "gc: done, "
; 1013 :                 "%" PY_FORMAT_SIZE_T "d unreachable, "
; 1014 :                 "%" PY_FORMAT_SIZE_T "d uncollectable",
; 1015 :                 n+m, n);

  002fd	4b 8d 54 35 00	 lea	 rdx, QWORD PTR [r13+r14]
  00302	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CN@PKPAIAHB@gc?3?5done?0?5?$CFId?5unreachable?0?5?$CFId?5u@
  00309	4d 8b c5	 mov	 r8, r13
  0030c	e8 00 00 00 00	 call	 PySys_WriteStderr
$LN7@collect:

; 1016 :         if (t1 && t2) {

  00311	66 0f 2e 3d 00
	00 00 00	 ucomisd xmm7, QWORD PTR __real@0000000000000000
  00319	7a 02		 jp	 SHORT $LN52@collect
  0031b	74 25		 je	 SHORT $LN6@collect
$LN52@collect:
  0031d	66 0f 2e 35 00
	00 00 00	 ucomisd xmm6, QWORD PTR __real@0000000000000000
  00325	7a 02		 jp	 SHORT $LN51@collect
  00327	74 19		 je	 SHORT $LN6@collect
$LN51@collect:

; 1017 :             PySys_WriteStderr(", %.4fs elapsed", t2-t1);

  00329	f2 0f 5c f7	 subsd	 xmm6, xmm7
  0032d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@MDGCICCN@?0?5?$CF?44fs?5elapsed?$AA@
  00334	66 0f 28 ce	 movapd	 xmm1, xmm6
  00338	66 48 0f 7e ca	 movd	 rdx, xmm1
  0033d	e8 00 00 00 00	 call	 PySys_WriteStderr
$LN6@collect:

; 1018 :         }
; 1019 :         PySys_WriteStderr(".\n");

  00342	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02MIICKFIN@?4?6?$AA@
  00349	e8 00 00 00 00	 call	 PySys_WriteStderr
  0034e	0f 28 74 24 60	 movaps	 xmm6, XMMWORD PTR [rsp+96]
$LN9@collect:

; 1020 :     }
; 1021 : 
; 1022 :     /* Append instances in the uncollectable set to a Python
; 1023 :      * reachable list of garbage.  The programmer has to deal with
; 1024 :      * this if they insist on creating this type of structure.
; 1025 :      */
; 1026 :     (void)handle_finalizers(&finalizers, old);

  00353	48 8d 4c 24 38	 lea	 rcx, QWORD PTR finalizers$[rsp]
  00358	48 8b d7	 mov	 rdx, rdi
  0035b	e8 00 00 00 00	 call	 handle_finalizers
  00360	48 8b bc 24 80
	00 00 00	 mov	 rdi, QWORD PTR [rsp+128]

; 1027 : 
; 1028 :     /* Clear free list only during the collection of the highest
; 1029 :      * generation */
; 1030 :     if (generation == NUM_GENERATIONS-1) {

  00368	41 83 ff 02	 cmp	 r15d, 2
  0036c	0f 28 7c 24 50	 movaps	 xmm7, XMMWORD PTR [rsp+80]
  00371	4c 8b 7c 24 70	 mov	 r15, QWORD PTR [rsp+112]
  00376	75 05		 jne	 SHORT $LN5@collect

; 1031 :         clear_freelists();

  00378	e8 00 00 00 00	 call	 clear_freelists
$LN5@collect:

; 1032 :     }
; 1033 : 
; 1034 :     if (PyErr_Occurred()) {

  0037d	e8 00 00 00 00	 call	 PyErr_Occurred
  00382	48 85 c0	 test	 rax, rax
  00385	74 33		 je	 SHORT $LN4@collect

; 1035 :         if (gc_str == NULL)

  00387	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR gc_str
  0038e	48 85 c0	 test	 rax, rax
  00391	75 13		 jne	 SHORT $LN3@collect

; 1036 :             gc_str = PyUnicode_FromString("garbage collection");

  00393	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@GKCDOENF@garbage?5collection?$AA@
  0039a	e8 00 00 00 00	 call	 PyUnicode_FromString
  0039f	48 89 05 00 00
	00 00		 mov	 QWORD PTR gc_str, rax
$LN3@collect:

; 1037 :         PyErr_WriteUnraisable(gc_str);

  003a6	48 8b c8	 mov	 rcx, rax
  003a9	e8 00 00 00 00	 call	 PyErr_WriteUnraisable

; 1038 :         Py_FatalError("unexpected exception during garbage collection");

  003ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CP@JHDAMHOK@unexpected?5exception?5during?5garb@
  003b5	e8 00 00 00 00	 call	 Py_FatalError
$LN4@collect:

; 1039 :     }
; 1040 : 
; 1041 :     if (n_collected)

  003ba	48 85 ed	 test	 rbp, rbp
  003bd	74 04		 je	 SHORT $LN2@collect

; 1042 :         *n_collected = m;

  003bf	4c 89 75 00	 mov	 QWORD PTR [rbp], r14
$LN2@collect:
  003c3	48 8b ac 24 88
	00 00 00	 mov	 rbp, QWORD PTR [rsp+136]

; 1045 :     return n+m;

  003cb	4b 8d 44 35 00	 lea	 rax, QWORD PTR [r13+r14]
  003d0	48 85 f6	 test	 rsi, rsi
  003d3	74 03		 je	 SHORT $LN1@collect

; 1043 :     if (n_uncollectable)
; 1044 :         *n_uncollectable = n;

  003d5	4c 89 2e	 mov	 QWORD PTR [rsi], r13
$LN1@collect:

; 1046 : }

  003d8	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  003df	41 5e		 pop	 r14
  003e1	41 5d		 pop	 r13
  003e3	5e		 pop	 rsi
  003e4	c3		 ret	 0
collect	ENDP
_TEXT	ENDS
PUBLIC	??_C@_02CBOIKDCO@sO?$AA@			; `string'
PUBLIC	??_C@_08FNBHHBLM@?$HLsisnsn?$HN?$AA@		; `string'
PUBLIC	??_C@_09EDFGPGDN@collected?$AA@			; `string'
PUBLIC	??_C@_0BD@JLCHLHKC@invoke_gc_callback?$AA@	; `string'
EXTRN	PyObject_CallFunction:PROC
EXTRN	Py_BuildValue:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$invoke_gc_callback DD imagerel invoke_gc_callback
	DD	imagerel invoke_gc_callback+558
	DD	imagerel $unwind$invoke_gc_callback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$invoke_gc_callback DD 0a1801H
	DD	0e6418H
	DD	0d5418H
	DD	0c3418H
	DD	0d0147218H
	DD	07010c012H
xdata	ENDS
;	COMDAT ??_C@_02CBOIKDCO@sO?$AA@
CONST	SEGMENT
??_C@_02CBOIKDCO@sO?$AA@ DB 'sO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08FNBHHBLM@?$HLsisnsn?$HN?$AA@
CONST	SEGMENT
??_C@_08FNBHHBLM@?$HLsisnsn?$HN?$AA@ DB '{sisnsn}', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EDFGPGDN@collected?$AA@
CONST	SEGMENT
??_C@_09EDFGPGDN@collected?$AA@ DB 'collected', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JLCHLHKC@invoke_gc_callback?$AA@
CONST	SEGMENT
??_C@_0BD@JLCHLHKC@invoke_gc_callback?$AA@ DB 'invoke_gc_callback', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\gcmodule.c
CONST	ENDS
;	COMDAT invoke_gc_callback
_TEXT	SEGMENT
phase$ = 96
generation$ = 104
collected$ = 112
uncollectable$ = 120
invoke_gc_callback PROC					; COMDAT

; 1054 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 1055 :     Py_ssize_t i;
; 1056 :     PyObject *info = NULL;

  00018	45 33 e4	 xor	 r12d, r12d
  0001b	49 8b d9	 mov	 rbx, r9
  0001e	49 8b f8	 mov	 rdi, r8
  00021	8b ea		 mov	 ebp, edx
  00023	4c 8b e9	 mov	 r13, rcx
  00026	41 8b f4	 mov	 esi, r12d

; 1057 :     Py_GUARD

  00029	e8 00 00 00 00	 call	 _Py_PXCTX
  0002e	85 c0		 test	 eax, eax
  00030	74 1c		 je	 SHORT $LN16@invoke_gc_
  00032	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@JLCHLHKC@invoke_gc_callback?$AA@
  00040	45 33 c9	 xor	 r9d, r9d
  00043	41 b8 21 04 00
	00		 mov	 r8d, 1057		; 00000421H
  00049	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN16@invoke_gc_:

; 1058 : 
; 1059 :     /* we may get called very early */
; 1060 :     if (callbacks == NULL)

  0004e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR callbacks
  00055	48 85 c0	 test	 rax, rax
  00058	0f 84 b7 01 00
	00		 je	 $LN2@invoke_gc_

; 1061 :         return;
; 1062 :     /* The local variable cannot be rebound, check it for sanity */
; 1063 :     assert(callbacks != NULL && PyList_CheckExact(callbacks));
; 1064 :     if (PyList_GET_SIZE(callbacks) != 0) {

  0005e	48 39 70 60	 cmp	 QWORD PTR [rax+96], rsi
  00062	74 4e		 je	 SHORT $LN13@invoke_gc_

; 1065 :         info = Py_BuildValue("{sisnsn}",
; 1066 :             "generation", generation,
; 1067 :             "collected", collected,
; 1068 :             "uncollectable", uncollectable);

  00064	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@IHCNLMBF@uncollectable?$AA@
  0006b	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00070	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_09EDFGPGDN@collected?$AA@
  00077	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0007c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@JMCFNPDK@generation?$AA@
  00083	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08FNBHHBLM@?$HLsisnsn?$HN?$AA@
  0008a	44 8b c5	 mov	 r8d, ebp
  0008d	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00092	e8 00 00 00 00	 call	 Py_BuildValue
  00097	48 8b f0	 mov	 rsi, rax

; 1069 :         if (info == NULL) {

  0009a	48 85 c0	 test	 rax, rax
  0009d	75 0c		 jne	 SHORT $LN48@invoke_gc_

; 1070 :             PyErr_WriteUnraisable(NULL);

  0009f	33 c9		 xor	 ecx, ecx
  000a1	e8 00 00 00 00	 call	 PyErr_WriteUnraisable

; 1071 :             return;

  000a6	e9 6a 01 00 00	 jmp	 $LN2@invoke_gc_
$LN48@invoke_gc_:
  000ab	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR callbacks
$LN13@invoke_gc_:

; 1072 :         }
; 1073 :     }
; 1074 :     for (i=0; i<PyList_GET_SIZE(callbacks); i++) {

  000b2	4c 39 60 60	 cmp	 QWORD PTR [rax+96], r12
  000b6	0f 8e ef 00 00
	00		 jle	 $LN4@invoke_gc_
  000bc	0f 1f 40 00	 npad	 4
$LL12@invoke_gc_:

; 1075 :         PyObject *r, *cb = PyList_GET_ITEM(callbacks, i);

  000c0	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000c4	4a 8b 3c e0	 mov	 rdi, QWORD PTR [rax+r12*8]

; 1076 :         Py_INCREF(cb); /* make sure cb doesn't go away */

  000c8	e8 00 00 00 00	 call	 _Py_PXCTX
  000cd	85 c0		 test	 eax, eax
  000cf	75 32		 jne	 SHORT $LN20@invoke_gc_
  000d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000df	4c 8b cf	 mov	 r9, rdi
  000e2	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000e8	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000f0	e8 00 00 00 00	 call	 _PyParallel_Guard
  000f5	85 c0		 test	 eax, eax
  000f7	75 06		 jne	 SHORT $LN19@invoke_gc_
  000f9	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  000fd	74 04		 je	 SHORT $LN20@invoke_gc_
$LN19@invoke_gc_:
  000ff	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN20@invoke_gc_:

; 1077 :         r = PyObject_CallFunction(cb, "sO", phase, info);

  00103	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02CBOIKDCO@sO?$AA@
  0010a	4c 8b ce	 mov	 r9, rsi
  0010d	4d 8b c5	 mov	 r8, r13
  00110	48 8b cf	 mov	 rcx, rdi
  00113	e8 00 00 00 00	 call	 PyObject_CallFunction
  00118	48 8b d8	 mov	 rbx, rax

; 1078 :         Py_XDECREF(r);

  0011b	48 85 c0	 test	 rax, rax
  0011e	74 67		 je	 SHORT $LN47@invoke_gc_
  00120	e8 00 00 00 00	 call	 _Py_PXCTX
  00125	85 c0		 test	 eax, eax
  00127	75 66		 jne	 SHORT $LN5@invoke_gc_
  00129	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0012d	a8 20		 test	 al, 32			; 00000020H
  0012f	75 4c		 jne	 SHORT $LN27@invoke_gc_
  00131	84 c0		 test	 al, al
  00133	78 48		 js	 SHORT $LN27@invoke_gc_
  00135	a8 02		 test	 al, 2
  00137	75 56		 jne	 SHORT $LN5@invoke_gc_
  00139	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0013d	75 50		 jne	 SHORT $LN5@invoke_gc_
  0013f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00146	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0014d	4c 8b cb	 mov	 r9, rbx
  00150	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00156	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0015e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00163	48 8b cb	 mov	 rcx, rbx
  00166	85 c0		 test	 eax, eax
  00168	74 07		 je	 SHORT $LN32@invoke_gc_
  0016a	e8 00 00 00 00	 call	 _Px_Dealloc
  0016f	eb 1e		 jmp	 SHORT $LN5@invoke_gc_
$LN32@invoke_gc_:
  00171	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00175	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0017b	eb 12		 jmp	 SHORT $LN5@invoke_gc_
$LN27@invoke_gc_:
  0017d	48 8b cb	 mov	 rcx, rbx
  00180	e8 00 00 00 00	 call	 Px_DecRef

; 1079 :         if (r == NULL)

  00185	eb 08		 jmp	 SHORT $LN5@invoke_gc_
$LN47@invoke_gc_:

; 1080 :             PyErr_WriteUnraisable(cb);

  00187	48 8b cf	 mov	 rcx, rdi
  0018a	e8 00 00 00 00	 call	 PyErr_WriteUnraisable
$LN5@invoke_gc_:

; 1081 :         Py_DECREF(cb);

  0018f	48 8b cf	 mov	 rcx, rdi
  00192	e8 00 00 00 00	 call	 _Py_DecRef
  00197	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR callbacks
  0019e	49 ff c4	 inc	 r12
  001a1	4c 3b 60 60	 cmp	 r12, QWORD PTR [rax+96]
  001a5	0f 8c 15 ff ff
	ff		 jl	 $LL12@invoke_gc_
$LN4@invoke_gc_:

; 1082 :     }
; 1083 :     Py_XDECREF(info);

  001ab	48 85 f6	 test	 rsi, rsi
  001ae	74 65		 je	 SHORT $LN2@invoke_gc_
  001b0	e8 00 00 00 00	 call	 _Py_PXCTX
  001b5	85 c0		 test	 eax, eax
  001b7	75 5c		 jne	 SHORT $LN2@invoke_gc_
  001b9	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  001bd	a8 20		 test	 al, 32			; 00000020H
  001bf	75 4c		 jne	 SHORT $LN38@invoke_gc_
  001c1	84 c0		 test	 al, al
  001c3	78 48		 js	 SHORT $LN38@invoke_gc_
  001c5	a8 02		 test	 al, 2
  001c7	75 4c		 jne	 SHORT $LN2@invoke_gc_
  001c9	48 ff 4e 50	 dec	 QWORD PTR [rsi+80]
  001cd	75 46		 jne	 SHORT $LN2@invoke_gc_
  001cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  001dd	4c 8b ce	 mov	 r9, rsi
  001e0	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001e6	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001ee	e8 00 00 00 00	 call	 _PyParallel_Guard
  001f3	48 8b ce	 mov	 rcx, rsi
  001f6	85 c0		 test	 eax, eax
  001f8	74 07		 je	 SHORT $LN43@invoke_gc_
  001fa	e8 00 00 00 00	 call	 _Px_Dealloc
  001ff	eb 14		 jmp	 SHORT $LN2@invoke_gc_
$LN43@invoke_gc_:
  00201	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  00205	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0020b	eb 08		 jmp	 SHORT $LN2@invoke_gc_
$LN38@invoke_gc_:
  0020d	48 8b ce	 mov	 rcx, rsi
  00210	e8 00 00 00 00	 call	 Px_DecRef
$LN2@invoke_gc_:

; 1084 : }

  00215	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  0021a	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  0021f	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
  00224	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00228	41 5d		 pop	 r13
  0022a	41 5c		 pop	 r12
  0022c	5f		 pop	 rdi
  0022d	c3		 ret	 0
invoke_gc_callback ENDP
_TEXT	ENDS
PUBLIC	??_C@_04PEGFANN@stop?$AA@			; `string'
PUBLIC	??_C@_05FAGFPHJG@start?$AA@			; `string'
PUBLIC	??_C@_0BG@ODMDNBFH@collect_with_callback?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$collect_with_callback DD imagerel collect_with_callback
	DD	imagerel collect_with_callback+127
	DD	imagerel $unwind$collect_with_callback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$collect_with_callback DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_04PEGFANN@stop?$AA@
CONST	SEGMENT
??_C@_04PEGFANN@stop?$AA@ DB 'stop', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FAGFPHJG@start?$AA@
CONST	SEGMENT
??_C@_05FAGFPHJG@start?$AA@ DB 'start', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@ODMDNBFH@collect_with_callback?$AA@
CONST	SEGMENT
??_C@_0BG@ODMDNBFH@collect_with_callback?$AA@ DB 'collect_with_callback', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT collect_with_callback
_TEXT	SEGMENT
generation$ = 48
uncollectable$ = 56
collected$ = 64
collect_with_callback PROC				; COMDAT

; 1091 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	8b f9		 mov	 edi, ecx

; 1092 :     Py_ssize_t result, collected, uncollectable;
; 1093 :     Py_GUARD

  0000c	e8 00 00 00 00	 call	 _Py_PXCTX
  00011	85 c0		 test	 eax, eax
  00013	74 1c		 je	 SHORT $LN1@collect_wi
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@ODMDNBFH@collect_with_callback?$AA@
  00023	45 33 c9	 xor	 r9d, r9d
  00026	41 b8 45 04 00
	00		 mov	 r8d, 1093		; 00000445H
  0002c	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@collect_wi:

; 1094 :     invoke_gc_callback("start", generation, 0, 0);

  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05FAGFPHJG@start?$AA@
  00038	45 33 c9	 xor	 r9d, r9d
  0003b	45 33 c0	 xor	 r8d, r8d
  0003e	8b d7		 mov	 edx, edi
  00040	e8 00 00 00 00	 call	 invoke_gc_callback

; 1095 :     result = collect(generation, &collected, &uncollectable);

  00045	4c 8d 44 24 38	 lea	 r8, QWORD PTR uncollectable$[rsp]
  0004a	48 8d 54 24 40	 lea	 rdx, QWORD PTR collected$[rsp]
  0004f	8b cf		 mov	 ecx, edi
  00051	e8 00 00 00 00	 call	 collect

; 1096 :     invoke_gc_callback("stop", generation, collected, uncollectable);

  00056	4c 8b 4c 24 38	 mov	 r9, QWORD PTR uncollectable$[rsp]
  0005b	4c 8b 44 24 40	 mov	 r8, QWORD PTR collected$[rsp]
  00060	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04PEGFANN@stop?$AA@
  00067	8b d7		 mov	 edx, edi
  00069	48 8b d8	 mov	 rbx, rax
  0006c	e8 00 00 00 00	 call	 invoke_gc_callback

; 1097 :     return result;

  00071	48 8b c3	 mov	 rax, rbx

; 1098 : }

  00074	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00079	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007d	5f		 pop	 rdi
  0007e	c3		 ret	 0
collect_with_callback ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@MOJBBFIL@collect_generations?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$collect_generations DD imagerel collect_generations
	DD	imagerel collect_generations+152
	DD	imagerel $unwind$collect_generations
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$collect_generations DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0BE@MOJBBFIL@collect_generations?$AA@
CONST	SEGMENT
??_C@_0BE@MOJBBFIL@collect_generations?$AA@ DB 'collect_generations', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT collect_generations
_TEXT	SEGMENT
collect_generations PROC				; COMDAT

; 1102 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1103 :     int i;
; 1104 :     Py_ssize_t n = 0;
; 1105 :     Py_GUARD

  00006	e8 00 00 00 00	 call	 _Py_PXCTX
  0000b	85 c0		 test	 eax, eax
  0000d	74 1c		 je	 SHORT $LN6@collect_ge
  0000f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00016	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@MOJBBFIL@collect_generations?$AA@
  0001d	45 33 c9	 xor	 r9d, r9d
  00020	41 b8 51 04 00
	00		 mov	 r8d, 1105		; 00000451H
  00026	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN6@collect_ge:

; 1106 : 
; 1107 :     /* Find the oldest generation (highest numbered) where the count
; 1108 :      * exceeds the threshold.  Objects in the that generation and
; 1109 :      * generations younger than it will be collected. */
; 1110 :     for (i = NUM_GENERATIONS-1; i >= 0; i--) {

  0002b	4c 8b 15 00 00
	00 00		 mov	 r10, QWORD PTR long_lived_pending
  00032	4c 8b 1d 00 00
	00 00		 mov	 r11, QWORD PTR long_lived_total
  00039	41 b9 02 00 00
	00		 mov	 r9d, 2
  0003f	45 8b c1	 mov	 r8d, r9d
  00042	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:generations
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL5@collect_ge:

; 1111 :         if (generations[i].count > generations[i].threshold) {

  00050	49 8b c8	 mov	 rcx, r8
  00053	48 c1 e1 05	 shl	 rcx, 5
  00057	8b 44 19 18	 mov	 eax, DWORD PTR [rcx+rbx+24]
  0005b	39 44 19 1c	 cmp	 DWORD PTR [rcx+rbx+28], eax
  0005f	7e 1a		 jle	 SHORT $LN4@collect_ge

; 1112 :             /* Avoid quadratic performance degradation in number
; 1113 :                of tracked objects. See comments at the beginning
; 1114 :                of this file, and issue #4074.
; 1115 :             */
; 1116 :             if (i == NUM_GENERATIONS - 1
; 1117 :                 && long_lived_pending < long_lived_total / 4)

  00061	49 83 f8 02	 cmp	 r8, 2
  00065	75 24		 jne	 SHORT $LN1@collect_ge
  00067	49 8b c3	 mov	 rax, r11
  0006a	48 99		 cdq
  0006c	83 e2 03	 and	 edx, 3
  0006f	48 03 c2	 add	 rax, rdx
  00072	48 c1 f8 02	 sar	 rax, 2
  00076	4c 3b d0	 cmp	 r10, rax
  00079	7d 10		 jge	 SHORT $LN1@collect_ge
$LN4@collect_ge:

; 1106 : 
; 1107 :     /* Find the oldest generation (highest numbered) where the count
; 1108 :      * exceeds the threshold.  Objects in the that generation and
; 1109 :      * generations younger than it will be collected. */
; 1110 :     for (i = NUM_GENERATIONS-1; i >= 0; i--) {

  0007b	41 ff c9	 dec	 r9d
  0007e	49 ff c8	 dec	 r8
  00081	79 cd		 jns	 SHORT $LL5@collect_ge

; 1120 :             break;
; 1121 :         }
; 1122 :     }
; 1123 :     return n;

  00083	33 c0		 xor	 eax, eax

; 1124 : }

  00085	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00089	5b		 pop	 rbx
  0008a	c3		 ret	 0
$LN1@collect_ge:

; 1118 :                 continue;
; 1119 :             n = collect_with_callback(i);

  0008b	41 8b c9	 mov	 ecx, r9d

; 1124 : }

  0008e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00092	5b		 pop	 rbx
  00093	e9 00 00 00 00	 jmp	 collect_with_callback
collect_generations ENDP
_TEXT	ENDS
PUBLIC	??_C@_09EBOMBFDA@gc_enable?$AA@			; `string'
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$gc_enable DD imagerel gc_enable
	DD	imagerel gc_enable+158
	DD	imagerel $unwind$gc_enable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_enable DD 032e01H
	DD	06342eH
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_09EBOMBFDA@gc_enable?$AA@
CONST	SEGMENT
??_C@_09EBOMBFDA@gc_enable?$AA@ DB 'gc_enable', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\gcmodule.c
CONST	ENDS
;	COMDAT gc_enable
_TEXT	SEGMENT
self$ = 64
noargs$ = 72
gc_enable PROC						; COMDAT

; 1133 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1134 :     Py_GUARD

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	74 1c		 je	 SHORT $LN1@gc_enable
  0000d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09EBOMBFDA@gc_enable?$AA@
  0001b	45 33 c9	 xor	 r9d, r9d
  0001e	41 b8 6e 04 00
	00		 mov	 r8d, 1134		; 0000046eH
  00024	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@gc_enable:

; 1135 :     enabled = 1;

  00029	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0002e	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR enabled, 1

; 1136 :     Py_INCREF(Py_None);

  00038	e8 00 00 00 00	 call	 _Py_PXCTX
  0003d	85 c0		 test	 eax, eax
  0003f	75 4c		 jne	 SHORT $LN8@gc_enable
  00041	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00056	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0005c	4c 8b cb	 mov	 r9, rbx
  0005f	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00067	e8 00 00 00 00	 call	 _PyParallel_Guard
  0006c	85 c0		 test	 eax, eax
  0006e	75 09		 jne	 SHORT $LN4@gc_enable
  00070	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00077	74 07		 je	 SHORT $LN10@gc_enable
$LN4@gc_enable:
  00079	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN10@gc_enable:

; 1137 :     return Py_None;

  00080	48 8b c3	 mov	 rax, rbx
  00083	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1138 : }

  00088	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008c	c3		 ret	 0
$LN8@gc_enable:

; 1137 :     return Py_None;

  0008d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00094	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1138 : }

  00099	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009d	c3		 ret	 0
gc_enable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@NBKPOILH@gc_disable?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$gc_disable DD imagerel gc_disable
	DD	imagerel gc_disable+158
	DD	imagerel $unwind$gc_disable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_disable DD 032e01H
	DD	06342eH
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0L@NBKPOILH@gc_disable?$AA@
CONST	SEGMENT
??_C@_0L@NBKPOILH@gc_disable?$AA@ DB 'gc_disable', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\gcmodule.c
CONST	ENDS
;	COMDAT gc_disable
_TEXT	SEGMENT
self$ = 64
noargs$ = 72
gc_disable PROC						; COMDAT

; 1147 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1148 :     Py_GUARD

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	74 1c		 je	 SHORT $LN1@gc_disable
  0000d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@NBKPOILH@gc_disable?$AA@
  0001b	45 33 c9	 xor	 r9d, r9d
  0001e	41 b8 7c 04 00
	00		 mov	 r8d, 1148		; 0000047cH
  00024	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@gc_disable:

; 1149 :     enabled = 0;

  00029	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0002e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR enabled, 0

; 1150 :     Py_INCREF(Py_None);

  00038	e8 00 00 00 00	 call	 _Py_PXCTX
  0003d	85 c0		 test	 eax, eax
  0003f	75 4c		 jne	 SHORT $LN8@gc_disable
  00041	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00056	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0005c	4c 8b cb	 mov	 r9, rbx
  0005f	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00067	e8 00 00 00 00	 call	 _PyParallel_Guard
  0006c	85 c0		 test	 eax, eax
  0006e	75 09		 jne	 SHORT $LN4@gc_disable
  00070	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00077	74 07		 je	 SHORT $LN10@gc_disable
$LN4@gc_disable:
  00079	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN10@gc_disable:

; 1151 :     return Py_None;

  00080	48 8b c3	 mov	 rax, rbx
  00083	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1152 : }

  00088	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008c	c3		 ret	 0
$LN8@gc_disable:

; 1151 :     return Py_None;

  0008d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00094	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1152 : }

  00099	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009d	c3		 ret	 0
gc_disable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@IOPIKMKN@gc_isenabled?$AA@		; `string'
EXTRN	PyBool_FromLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$gc_isenabled DD imagerel gc_isenabled
	DD	imagerel gc_isenabled+56
	DD	imagerel $unwind$gc_isenabled
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_isenabled DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0N@IOPIKMKN@gc_isenabled?$AA@
CONST	SEGMENT
??_C@_0N@IOPIKMKN@gc_isenabled?$AA@ DB 'gc_isenabled', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT gc_isenabled
_TEXT	SEGMENT
self$ = 48
noargs$ = 56
gc_isenabled PROC					; COMDAT

; 1161 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1162 :     Py_GUARD

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	74 1c		 je	 SHORT $LN1@gc_isenabl
  0000d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@IOPIKMKN@gc_isenabled?$AA@
  0001b	45 33 c9	 xor	 r9d, r9d
  0001e	41 b8 8a 04 00
	00		 mov	 r8d, 1162		; 0000048aH
  00024	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@gc_isenabl:

; 1163 :     return PyBool_FromLong((long)enabled);

  00029	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR enabled

; 1164 : }

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	e9 00 00 00 00	 jmp	 PyBool_FromLong
gc_isenabled ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@MBBBOILC@invalid?5generation?$AA@	; `string'
PUBLIC	??_C@_02OJGKGHDH@?$HMi?$AA@			; `string'
PUBLIC	??_C@_0L@HHPIPMPP@gc_collect?$AA@		; `string'
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_ValueError:QWORD
EXTRN	PyLong_FromSsize_t:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$gc_collect DD imagerel gc_collect
	DD	imagerel gc_collect+214
	DD	imagerel $unwind$gc_collect
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_collect DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0BD@MBBBOILC@invalid?5generation?$AA@
CONST	SEGMENT
??_C@_0BD@MBBBOILC@invalid?5generation?$AA@ DB 'invalid generation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02OJGKGHDH@?$HMi?$AA@
CONST	SEGMENT
??_C@_02OJGKGHDH@?$HMi?$AA@ DB '|i', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HHPIPMPP@gc_collect?$AA@
CONST	SEGMENT
??_C@_0L@HHPIPMPP@gc_collect?$AA@ DB 'gc_collect', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT gc_collect
_TEXT	SEGMENT
self$ = 64
args$ = 72
kws$ = 80
genarg$ = 88
gc_collect PROC						; COMDAT

; 1176 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	49 8b d8	 mov	 rbx, r8
  0000d	48 8b fa	 mov	 rdi, rdx

; 1177 :     static char *keywords[] = {"generation", NULL};
; 1178 :     int genarg = NUM_GENERATIONS - 1;

  00010	c7 44 24 58 02
	00 00 00	 mov	 DWORD PTR genarg$[rsp], 2

; 1179 :     Py_ssize_t n;
; 1180 :     Py_GUARD

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN7@gc_collect
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@HHPIPMPP@gc_collect?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 9c 04 00
	00		 mov	 r8d, 1180		; 0000049cH
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN7@gc_collect:

; 1181 : 
; 1182 :     if (!PyArg_ParseTupleAndKeywords(args, kws, "|i", keywords, &genarg))

  0003d	48 8d 44 24 58	 lea	 rax, QWORD PTR genarg$[rsp]
  00042	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?keywords@?1??gc_collect@@9@9
  00049	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02OJGKGHDH@?$HMi?$AA@
  00050	48 8b d3	 mov	 rdx, rbx
  00053	48 8b cf	 mov	 rcx, rdi
  00056	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0005b	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00060	85 c0		 test	 eax, eax

; 1183 :         return NULL;

  00062	74 65		 je	 SHORT $LN10@gc_collect

; 1184 : 
; 1185 :     else if (genarg < 0 || genarg >= NUM_GENERATIONS) {

  00064	8b 4c 24 58	 mov	 ecx, DWORD PTR genarg$[rsp]
  00068	83 f9 02	 cmp	 ecx, 2
  0006b	77 49		 ja	 SHORT $LN3@gc_collect

; 1188 :     }
; 1189 : 
; 1190 :     if (collecting)

  0006d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR collecting, 0
  00074	74 14		 je	 SHORT $LN2@gc_collect

; 1191 :         n = 0; /* already collecting, don't do anything */

  00076	33 c0		 xor	 eax, eax

; 1196 :     }
; 1197 : 
; 1198 :     return PyLong_FromSsize_t(n);

  00078	8b c8		 mov	 ecx, eax
  0007a	e8 00 00 00 00	 call	 PyLong_FromSsize_t

; 1199 : }

  0007f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00084	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00088	5f		 pop	 rdi
  00089	c3		 ret	 0
$LN2@gc_collect:

; 1192 :     else {
; 1193 :         collecting = 1;

  0008a	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR collecting, 1

; 1194 :         n = collect_with_callback(genarg);

  00094	e8 00 00 00 00	 call	 collect_with_callback

; 1195 :         collecting = 0;

  00099	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR collecting, 0

; 1196 :     }
; 1197 : 
; 1198 :     return PyLong_FromSsize_t(n);

  000a3	48 8b c8	 mov	 rcx, rax
  000a6	e8 00 00 00 00	 call	 PyLong_FromSsize_t

; 1199 : }

  000ab	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000b0	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b4	5f		 pop	 rdi
  000b5	c3		 ret	 0
$LN3@gc_collect:

; 1186 :         PyErr_SetString(PyExc_ValueError, "invalid generation");

  000b6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@MBBBOILC@invalid?5generation?$AA@
  000c4	e8 00 00 00 00	 call	 PyErr_SetString
$LN10@gc_collect:

; 1187 :         return NULL;

  000c9	33 c0		 xor	 eax, eax

; 1199 : }

  000cb	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000d0	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d4	5f		 pop	 rdi
  000d5	c3		 ret	 0
gc_collect ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@CGAHFNPH@i?3set_debug?$AA@		; `string'
PUBLIC	??_C@_0N@OKJCNDAH@gc_set_debug?$AA@		; `string'
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$gc_set_debug DD imagerel gc_set_debug
	DD	imagerel gc_set_debug+162
	DD	imagerel $unwind$gc_set_debug
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_set_debug DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0M@CGAHFNPH@i?3set_debug?$AA@
CONST	SEGMENT
??_C@_0M@CGAHFNPH@i?3set_debug?$AA@ DB 'i:set_debug', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OKJCNDAH@gc_set_debug?$AA@
CONST	SEGMENT
??_C@_0N@OKJCNDAH@gc_set_debug?$AA@ DB 'gc_set_debug', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\gcmodule.c
CONST	ENDS
;	COMDAT gc_set_debug
_TEXT	SEGMENT
self$ = 64
args$ = 72
gc_set_debug PROC					; COMDAT

; 1217 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b da	 mov	 rbx, rdx

; 1218 :     Py_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN2@gc_set_deb
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@OKJCNDAH@gc_set_debug?$AA@
  00020	45 33 c9	 xor	 r9d, r9d
  00023	41 b8 c2 04 00
	00		 mov	 r8d, 1218		; 000004c2H
  00029	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN2@gc_set_deb:

; 1219 :     if (!PyArg_ParseTuple(args, "i:set_debug", &debug))

  0002e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:debug
  00035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@CGAHFNPH@i?3set_debug?$AA@
  0003c	48 8b cb	 mov	 rcx, rbx
  0003f	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00044	85 c0		 test	 eax, eax
  00046	75 08		 jne	 SHORT $LN1@gc_set_deb

; 1220 :         return NULL;

  00048	33 c0		 xor	 eax, eax

; 1224 : }

  0004a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0004e	5b		 pop	 rbx
  0004f	c3		 ret	 0
$LN1@gc_set_deb:

; 1221 : 
; 1222 :     Py_INCREF(Py_None);

  00050	e8 00 00 00 00	 call	 _Py_PXCTX
  00055	85 c0		 test	 eax, eax
  00057	75 3c		 jne	 SHORT $LN6@gc_set_deb
  00059	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00060	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00067	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0006e	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00074	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0007c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00081	85 c0		 test	 eax, eax
  00083	75 09		 jne	 SHORT $LN5@gc_set_deb
  00085	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0008c	74 07		 je	 SHORT $LN6@gc_set_deb
$LN5@gc_set_deb:
  0008e	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN6@gc_set_deb:

; 1223 :     return Py_None;

  00095	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1224 : }

  0009c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a0	5b		 pop	 rbx
  000a1	c3		 ret	 0
gc_set_debug ENDP
_TEXT	ENDS
PUBLIC	??_C@_01KBJDNOO@i?$AA@				; `string'
;	COMDAT ??_C@_01KBJDNOO@i?$AA@
CONST	SEGMENT
??_C@_01KBJDNOO@i?$AA@ DB 'i', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT gc_get_debug
_TEXT	SEGMENT
self$ = 8
noargs$ = 16
gc_get_debug PROC					; COMDAT

; 1234 :     return Py_BuildValue("i", debug);

  00000	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR debug
  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01KBJDNOO@i?$AA@

; 1235 : }

  0000d	e9 00 00 00 00	 jmp	 Py_BuildValue
gc_get_debug ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@HJLPPHGE@i?$HMii?3set_threshold?$AA@	; `string'
PUBLIC	??_C@_0O@MDDMKCHO@gc_set_thresh?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$gc_set_thresh DD imagerel gc_set_thresh
	DD	imagerel gc_set_thresh+181
	DD	imagerel $unwind$gc_set_thresh
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_set_thresh DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0BD@HJLPPHGE@i?$HMii?3set_threshold?$AA@
CONST	SEGMENT
??_C@_0BD@HJLPPHGE@i?$HMii?3set_threshold?$AA@ DB 'i|ii:set_threshold', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MDDMKCHO@gc_set_thresh?$AA@
CONST	SEGMENT
??_C@_0O@MDDMKCHO@gc_set_thresh?$AA@ DB 'gc_set_thresh', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\gcmodule.c
CONST	ENDS
;	COMDAT gc_set_thresh
_TEXT	SEGMENT
self$ = 64
args$ = 72
gc_set_thresh PROC					; COMDAT

; 1245 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b da	 mov	 rbx, rdx

; 1246 :     int i;
; 1247 :     Py_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN5@gc_set_thr
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@MDDMKCHO@gc_set_thresh?$AA@
  00020	45 33 c9	 xor	 r9d, r9d
  00023	41 b8 df 04 00
	00		 mov	 r8d, 1247		; 000004dfH
  00029	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN5@gc_set_thr:

; 1248 :     if (!PyArg_ParseTuple(args, "i|ii:set_threshold",
; 1249 :                           &generations[0].threshold,
; 1250 :                           &generations[1].threshold,
; 1251 :                           &generations[2].threshold))

  0002e	48 8d 05 58 00
	00 00		 lea	 rax, OFFSET FLAT:generations+88
  00035	4c 8d 0d 38 00
	00 00		 lea	 r9, OFFSET FLAT:generations+56
  0003c	4c 8d 05 18 00
	00 00		 lea	 r8, OFFSET FLAT:generations+24
  00043	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@HJLPPHGE@i?$HMii?3set_threshold?$AA@
  0004a	48 8b cb	 mov	 rcx, rbx
  0004d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00052	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00057	85 c0		 test	 eax, eax
  00059	75 08		 jne	 SHORT $LN4@gc_set_thr

; 1252 :         return NULL;

  0005b	33 c0		 xor	 eax, eax

; 1260 : }

  0005d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00061	5b		 pop	 rbx
  00062	c3		 ret	 0
$LN4@gc_set_thr:

; 1253 :     for (i = 2; i < NUM_GENERATIONS; i++) {
; 1254 :         /* generations higher than 2 get the same threshold */
; 1255 :         generations[i].threshold = generations[2].threshold;
; 1256 :     }
; 1257 : 
; 1258 :     Py_INCREF(Py_None);

  00063	e8 00 00 00 00	 call	 _Py_PXCTX
  00068	85 c0		 test	 eax, eax
  0006a	75 3c		 jne	 SHORT $LN9@gc_set_thr
  0006c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00073	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0007a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00081	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00087	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0008f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00094	85 c0		 test	 eax, eax
  00096	75 09		 jne	 SHORT $LN8@gc_set_thr
  00098	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0009f	74 07		 je	 SHORT $LN9@gc_set_thr
$LN8@gc_set_thr:
  000a1	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN9@gc_set_thr:

; 1259 :     return Py_None;

  000a8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1260 : }

  000af	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b3	5b		 pop	 rbx
  000b4	c3		 ret	 0
gc_set_thresh ENDP
_TEXT	ENDS
PUBLIC	??_C@_05HEIOBLPG@?$CIiii?$CJ?$AA@		; `string'
PUBLIC	??_C@_0O@NNBDBFDH@gc_get_thresh?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$gc_get_thresh DD imagerel gc_get_thresh
	DD	imagerel gc_get_thresh+77
	DD	imagerel $unwind$gc_get_thresh
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_get_thresh DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_05HEIOBLPG@?$CIiii?$CJ?$AA@
CONST	SEGMENT
??_C@_05HEIOBLPG@?$CIiii?$CJ?$AA@ DB '(iii)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NNBDBFDH@gc_get_thresh?$AA@
CONST	SEGMENT
??_C@_0O@NNBDBFDH@gc_get_thresh?$AA@ DB 'gc_get_thresh', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT gc_get_thresh
_TEXT	SEGMENT
self$ = 48
noargs$ = 56
gc_get_thresh PROC					; COMDAT

; 1269 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1270 :     Py_GUARD

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	74 1c		 je	 SHORT $LN1@gc_get_thr
  0000d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NNBDBFDH@gc_get_thresh?$AA@
  0001b	45 33 c9	 xor	 r9d, r9d
  0001e	41 b8 f6 04 00
	00		 mov	 r8d, 1270		; 000004f6H
  00024	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@gc_get_thr:

; 1271 :     return Py_BuildValue("(iii)",
; 1272 :                          generations[0].threshold,
; 1273 :                          generations[1].threshold,
; 1274 :                          generations[2].threshold);

  00029	44 8b 0d 58 00
	00 00		 mov	 r9d, DWORD PTR generations+88
  00030	44 8b 05 38 00
	00 00		 mov	 r8d, DWORD PTR generations+56
  00037	8b 15 18 00 00
	00		 mov	 edx, DWORD PTR generations+24
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05HEIOBLPG@?$CIiii?$CJ?$AA@

; 1275 : }

  00044	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00048	e9 00 00 00 00	 jmp	 Py_BuildValue
gc_get_thresh ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@CPDALIKJ@gc_get_count?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$gc_get_count DD imagerel gc_get_count
	DD	imagerel gc_get_count+77
	DD	imagerel $unwind$gc_get_count
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_get_count DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0N@CPDALIKJ@gc_get_count?$AA@
CONST	SEGMENT
??_C@_0N@CPDALIKJ@gc_get_count?$AA@ DB 'gc_get_count', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT gc_get_count
_TEXT	SEGMENT
self$ = 48
noargs$ = 56
gc_get_count PROC					; COMDAT

; 1284 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1285 :     Py_GUARD

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	74 1c		 je	 SHORT $LN1@gc_get_cou
  0000d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@CPDALIKJ@gc_get_count?$AA@
  0001b	45 33 c9	 xor	 r9d, r9d
  0001e	41 b8 05 05 00
	00		 mov	 r8d, 1285		; 00000505H
  00024	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@gc_get_cou:

; 1286 :     return Py_BuildValue("(iii)",
; 1287 :                          generations[0].count,
; 1288 :                          generations[1].count,
; 1289 :                          generations[2].count);

  00029	44 8b 0d 5c 00
	00 00		 mov	 r9d, DWORD PTR generations+92
  00030	44 8b 05 3c 00
	00 00		 mov	 r8d, DWORD PTR generations+60
  00037	8b 15 1c 00 00
	00		 mov	 edx, DWORD PTR generations+28
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05HEIOBLPG@?$CIiii?$CJ?$AA@

; 1290 : }

  00044	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00048	e9 00 00 00 00	 jmp	 Py_BuildValue
gc_get_count ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@NNBKPGBC@referrersvisit?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$referrersvisit DD imagerel referrersvisit
	DD	imagerel referrersvisit+114
	DD	imagerel $unwind$referrersvisit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$referrersvisit DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0P@NNBKPGBC@referrersvisit?$AA@
CONST	SEGMENT
??_C@_0P@NNBKPGBC@referrersvisit?$AA@ DB 'referrersvisit', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT referrersvisit
_TEXT	SEGMENT
obj$ = 48
objs$ = 56
referrersvisit PROC					; COMDAT

; 1294 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fa	 mov	 rdi, rdx
  0000d	48 8b d9	 mov	 rbx, rcx

; 1295 :     Py_ssize_t i;
; 1296 :     Py_GUARD

  00010	e8 00 00 00 00	 call	 _Py_PXCTX
  00015	85 c0		 test	 eax, eax
  00017	74 1c		 je	 SHORT $LN5@referrersv
  00019	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@NNBKPGBC@referrersvisit?$AA@
  00027	45 33 c9	 xor	 r9d, r9d
  0002a	41 b8 10 05 00
	00		 mov	 r8d, 1296		; 00000510H
  00030	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN5@referrersv:

; 1297 :     for (i = 0; i < PyTuple_GET_SIZE(objs); i++)

  00035	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  00039	33 d2		 xor	 edx, edx
  0003b	48 85 c9	 test	 rcx, rcx
  0003e	7e 15		 jle	 SHORT $LN2@referrersv
  00040	48 8d 47 70	 lea	 rax, QWORD PTR [rdi+112]
$LL4@referrersv:

; 1298 :         if (PyTuple_GET_ITEM(objs, i) == obj)

  00044	48 39 18	 cmp	 QWORD PTR [rax], rbx
  00047	74 19		 je	 SHORT $LN9@referrersv

; 1297 :     for (i = 0; i < PyTuple_GET_SIZE(objs); i++)

  00049	48 ff c2	 inc	 rdx
  0004c	48 83 c0 08	 add	 rax, 8
  00050	48 3b d1	 cmp	 rdx, rcx
  00053	7c ef		 jl	 SHORT $LL4@referrersv
$LN2@referrersv:

; 1300 :     return 0;

  00055	33 c0		 xor	 eax, eax

; 1301 : }

  00057	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00060	5f		 pop	 rdi
  00061	c3		 ret	 0
$LN9@referrersv:

; 1299 :             return 1;

  00062	b8 01 00 00 00	 mov	 eax, 1

; 1301 : }

  00067	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0006c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00070	5f		 pop	 rdi
  00071	c3		 ret	 0
referrersvisit ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@OJOBBPAC@gc_referrers_for?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$gc_referrers_for DD imagerel gc_referrers_for
	DD	imagerel gc_referrers_for+197
	DD	imagerel $unwind$gc_referrers_for
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_referrers_for DD 0a4b01H
	DD	06344bH
	DD	097415H
	DD	086415H
	DD	075415H
	DD	0c0113215H
xdata	ENDS
;	COMDAT ??_C@_0BB@OJOBBPAC@gc_referrers_for?$AA@
CONST	SEGMENT
??_C@_0BB@OJOBBPAC@gc_referrers_for?$AA@ DB 'gc_referrers_for', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT gc_referrers_for
_TEXT	SEGMENT
objs$ = 48
list$ = 56
resultlist$ = 64
gc_referrers_for PROC					; COMDAT

; 1305 : {

  00000	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0000f	41 54		 push	 r12
  00011	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00015	49 8b e8	 mov	 rbp, r8
  00018	48 8b f2	 mov	 rsi, rdx
  0001b	4c 8b e1	 mov	 r12, rcx

; 1306 :     PyGC_Head *gc;
; 1307 :     PyObject *obj;
; 1308 :     traverseproc traverse;
; 1309 :     Py_GUARD

  0001e	e8 00 00 00 00	 call	 _Py_PXCTX
  00023	85 c0		 test	 eax, eax
  00025	74 1c		 je	 SHORT $LN8@gc_referre
  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@OJOBBPAC@gc_referrers_for?$AA@
  00035	45 33 c9	 xor	 r9d, r9d
  00038	41 b8 1d 05 00
	00		 mov	 r8d, 1309		; 0000051dH
  0003e	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN8@gc_referre:

; 1310 :     for (gc = list->gc.gc_next; gc != list; gc = gc->gc.gc_next) {

  00043	48 8b 3e	 mov	 rdi, QWORD PTR [rsi]
  00046	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0004b	48 3b fe	 cmp	 rdi, rsi
  0004e	74 51		 je	 SHORT $LN16@gc_referre
$LL7@gc_referre:

; 1311 :         obj = FROM_GC(gc);

  00050	e8 00 00 00 00	 call	 _Py_PXCTX
  00055	85 c0		 test	 eax, eax
  00057	74 04		 je	 SHORT $LN11@gc_referre
  00059	33 db		 xor	 ebx, ebx
  0005b	eb 04		 jmp	 SHORT $LN12@gc_referre
$LN11@gc_referre:
  0005d	48 8d 5f 18	 lea	 rbx, QWORD PTR [rdi+24]
$LN12@gc_referre:

; 1312 :         traverse = Py_TYPE(obj)->tp_traverse;

  00061	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00065	4c 8b 88 10 01
	00 00		 mov	 r9, QWORD PTR [rax+272]

; 1313 :         if (obj == objs || obj == resultlist)

  0006c	49 3b dc	 cmp	 rbx, r12
  0006f	74 28		 je	 SHORT $LN6@gc_referre
  00071	48 3b dd	 cmp	 rbx, rbp
  00074	74 23		 je	 SHORT $LN6@gc_referre

; 1314 :             continue;
; 1315 :         if (traverse(obj, (visitproc)referrersvisit, objs)) {

  00076	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:referrersvisit
  0007d	4d 8b c4	 mov	 r8, r12
  00080	48 8b cb	 mov	 rcx, rbx
  00083	41 ff d1	 call	 r9
  00086	85 c0		 test	 eax, eax
  00088	74 0f		 je	 SHORT $LN6@gc_referre

; 1316 :             if (PyList_Append(resultlist, obj) < 0)

  0008a	48 8b d3	 mov	 rdx, rbx
  0008d	48 8b cd	 mov	 rcx, rbp
  00090	e8 00 00 00 00	 call	 PyList_Append
  00095	85 c0		 test	 eax, eax
  00097	78 28		 js	 SHORT $LN14@gc_referre
$LN6@gc_referre:

; 1310 :     for (gc = list->gc.gc_next; gc != list; gc = gc->gc.gc_next) {

  00099	48 8b 3f	 mov	 rdi, QWORD PTR [rdi]
  0009c	48 3b fe	 cmp	 rdi, rsi
  0009f	75 af		 jne	 SHORT $LL7@gc_referre
$LN16@gc_referre:

; 1318 :         }
; 1319 :     }
; 1320 :     return 1; /* no error */

  000a1	b8 01 00 00 00	 mov	 eax, 1
$LN9@gc_referre:
  000a6	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1321 : }

  000ab	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000b0	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000b5	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  000ba	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000be	41 5c		 pop	 r12
  000c0	c3		 ret	 0
$LN14@gc_referre:

; 1317 :                 return 0; /* error */

  000c1	33 c0		 xor	 eax, eax
  000c3	eb e1		 jmp	 SHORT $LN9@gc_referre
gc_referrers_for ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@CIBMDBHP@gc_get_referrers?$AA@	; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$gc_get_referrers DD imagerel gc_get_referrers
	DD	imagerel gc_get_referrers+257
	DD	imagerel $unwind$gc_get_referrers
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_get_referrers DD 085601H
	DD	095456H
	DD	083451H
	DD	0a640aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0BB@CIBMDBHP@gc_get_referrers?$AA@
CONST	SEGMENT
??_C@_0BB@CIBMDBHP@gc_get_referrers?$AA@ DB 'gc_get_referrers', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\gcmodule.c
CONST	ENDS
;	COMDAT gc_get_referrers
_TEXT	SEGMENT
self$ = 64
args$ = 72
gc_get_referrers PROC					; COMDAT

; 1329 : {

  00000	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f2	 mov	 rsi, rdx

; 1330 :     int i;
; 1331 :     PyObject *result;
; 1332 :     Py_GUARD

  0000d	e8 00 00 00 00	 call	 _Py_PXCTX
  00012	85 c0		 test	 eax, eax
  00014	74 1c		 je	 SHORT $LN6@gc_get_ref
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@CIBMDBHP@gc_get_referrers?$AA@
  00024	45 33 c9	 xor	 r9d, r9d
  00027	41 b8 34 05 00
	00		 mov	 r8d, 1332		; 00000534H
  0002d	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN6@gc_get_ref:

; 1333 :     result = PyList_New(0);

  00032	33 c9		 xor	 ecx, ecx
  00034	e8 00 00 00 00	 call	 PyList_New
  00039	48 8b f8	 mov	 rdi, rax

; 1334 :     if (!result) return NULL;

  0003c	48 85 c0	 test	 rax, rax
  0003f	75 0b		 jne	 SHORT $LN5@gc_get_ref

; 1343 : }

  00041	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00046	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0004a	5f		 pop	 rdi
  0004b	c3		 ret	 0
$LN5@gc_get_ref:
  0004c	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00051	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp

; 1335 : 
; 1336 :     for (i = 0; i < NUM_GENERATIONS; i++) {

  00056	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:generations
  0005d	33 db		 xor	 ebx, ebx
  0005f	90		 npad	 1
$LL4@gc_get_ref:

; 1337 :         if (!(gc_referrers_for(args, GEN_HEAD(i), result))) {

  00060	48 63 d3	 movsxd	 rdx, ebx
  00063	4c 8b c7	 mov	 r8, rdi
  00066	48 8b ce	 mov	 rcx, rsi
  00069	48 c1 e2 05	 shl	 rdx, 5
  0006d	48 03 d5	 add	 rdx, rbp
  00070	e8 00 00 00 00	 call	 gc_referrers_for
  00075	85 c0		 test	 eax, eax
  00077	74 0c		 je	 SHORT $LN21@gc_get_ref

; 1335 : 
; 1336 :     for (i = 0; i < NUM_GENERATIONS; i++) {

  00079	ff c3		 inc	 ebx
  0007b	83 fb 03	 cmp	 ebx, 3
  0007e	7c e0		 jl	 SHORT $LL4@gc_get_ref

; 1340 :         }
; 1341 :     }
; 1342 :     return result;

  00080	48 8b c7	 mov	 rax, rdi
  00083	eb 67		 jmp	 SHORT $LN24@gc_get_ref
$LN21@gc_get_ref:

; 1338 :             Py_DECREF(result);

  00085	e8 00 00 00 00	 call	 _Py_PXCTX
  0008a	85 c0		 test	 eax, eax
  0008c	75 5c		 jne	 SHORT $LN19@gc_get_ref
  0008e	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00092	a8 20		 test	 al, 32			; 00000020H
  00094	75 4c		 jne	 SHORT $LN13@gc_get_ref
  00096	84 c0		 test	 al, al
  00098	78 48		 js	 SHORT $LN13@gc_get_ref
  0009a	a8 02		 test	 al, 2
  0009c	75 4c		 jne	 SHORT $LN19@gc_get_ref
  0009e	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  000a2	75 46		 jne	 SHORT $LN19@gc_get_ref
  000a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000b2	4c 8b cf	 mov	 r9, rdi
  000b5	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000bb	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c3	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c8	48 8b cf	 mov	 rcx, rdi
  000cb	85 c0		 test	 eax, eax
  000cd	74 07		 je	 SHORT $LN18@gc_get_ref
  000cf	e8 00 00 00 00	 call	 _Px_Dealloc
  000d4	eb 14		 jmp	 SHORT $LN19@gc_get_ref
$LN18@gc_get_ref:
  000d6	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000da	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000e0	eb 08		 jmp	 SHORT $LN19@gc_get_ref
$LN13@gc_get_ref:
  000e2	48 8b cf	 mov	 rcx, rdi
  000e5	e8 00 00 00 00	 call	 Px_DecRef
$LN19@gc_get_ref:

; 1339 :             return NULL;

  000ea	33 c0		 xor	 eax, eax
$LN24@gc_get_ref:
  000ec	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000f1	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]

; 1343 : }

  000f6	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  000fb	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ff	5f		 pop	 rdi
  00100	c3		 ret	 0
gc_get_referrers ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$referentsvisit DD imagerel referentsvisit
	DD	imagerel referentsvisit+32
	DD	imagerel $unwind$referentsvisit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$referentsvisit DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT referentsvisit
_TEXT	SEGMENT
obj$ = 48
list$ = 56
referentsvisit PROC					; COMDAT

; 1348 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	48 8b c2	 mov	 rax, rdx

; 1349 :     return PyList_Append(list, obj) < 0;

  00007	48 8b d1	 mov	 rdx, rcx
  0000a	48 8b c8	 mov	 rcx, rax
  0000d	e8 00 00 00 00	 call	 PyList_Append
  00012	33 c9		 xor	 ecx, ecx
  00014	85 c0		 test	 eax, eax
  00016	0f 98 c1	 sets	 cl
  00019	8b c1		 mov	 eax, ecx

; 1350 : }

  0001b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001f	c3		 ret	 0
referentsvisit ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@CJFAIBFO@gc_get_referents?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$gc_get_referents DD imagerel gc_get_referents
	DD	imagerel gc_get_referents+71
	DD	imagerel $unwind$gc_get_referents
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$gc_get_referents DD imagerel gc_get_referents+71
	DD	imagerel gc_get_referents+283
	DD	imagerel $chain$2$gc_get_referents
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$gc_get_referents DD imagerel gc_get_referents+283
	DD	imagerel gc_get_referents+295
	DD	imagerel $chain$4$gc_get_referents
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$gc_get_referents DD 060021H
	DD	067400H
	DD	0b6400H
	DD	0a3400H
	DD	imagerel gc_get_referents
	DD	imagerel gc_get_referents+71
	DD	imagerel $unwind$gc_get_referents
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$gc_get_referents DD 061121H
	DD	067411H
	DD	0b640cH
	DD	0a3405H
	DD	imagerel gc_get_referents
	DD	imagerel gc_get_referents+71
	DD	imagerel $unwind$gc_get_referents
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_get_referents DD 030801H
	DD	0c0046208H
	DD	05002H
xdata	ENDS
;	COMDAT ??_C@_0BB@CJFAIBFO@gc_get_referents?$AA@
CONST	SEGMENT
??_C@_0BB@CJFAIBFO@gc_get_referents?$AA@ DB 'gc_get_referents', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT gc_get_referents
_TEXT	SEGMENT
self$ = 80
args$ = 88
tv92 = 96
gc_get_referents PROC					; COMDAT

; 1358 : {

  00000	40 55		 push	 rbp
  00002	41 54		 push	 r12
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00008	4c 8b e2	 mov	 r12, rdx

; 1359 :     Py_ssize_t i;
; 1360 :     PyObject *result;
; 1361 :     Py_GUARD

  0000b	e8 00 00 00 00	 call	 _Py_PXCTX
  00010	85 c0		 test	 eax, eax
  00012	74 1c		 je	 SHORT $LN8@gc_get_ref@2
  00014	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@CJFAIBFO@gc_get_referents?$AA@
  00022	45 33 c9	 xor	 r9d, r9d
  00025	41 b8 51 05 00
	00		 mov	 r8d, 1361		; 00000551H
  0002b	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN8@gc_get_ref@2:

; 1362 :     result = PyList_New(0);

  00030	33 c9		 xor	 ecx, ecx
  00032	e8 00 00 00 00	 call	 PyList_New
  00037	48 8b e8	 mov	 rbp, rax

; 1363 : 
; 1364 :     if (result == NULL)

  0003a	48 85 c0	 test	 rax, rax
  0003d	75 08		 jne	 SHORT $LN7@gc_get_ref@2

; 1382 : }

  0003f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00043	41 5c		 pop	 r12
  00045	5d		 pop	 rbp
  00046	c3		 ret	 0
$LN7@gc_get_ref@2:
  00047	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx

; 1365 :         return NULL;
; 1366 : 
; 1367 :     for (i = 0; i < PyTuple_GET_SIZE(args); i++) {

  0004c	33 db		 xor	 ebx, ebx
  0004e	48 89 74 24 58	 mov	 QWORD PTR [rsp+88], rsi
  00053	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  00058	49 39 5c 24 60	 cmp	 QWORD PTR [r12+96], rbx
  0005d	0f 8e 9e 00 00
	00		 jle	 $LN22@gc_get_ref@2
  00063	49 8d 74 24 70	 lea	 rsi, QWORD PTR [r12+112]
  00068	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL6@gc_get_ref@2:

; 1368 :         traverseproc traverse;
; 1369 :         PyObject *obj = PyTuple_GET_ITEM(args, i);

  00070	48 8b 3e	 mov	 rdi, QWORD PTR [rsi]

; 1370 : 
; 1371 :         if (! PyObject_IS_GC(obj))

  00073	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  0007a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@CJFAIBFO@gc_get_referents?$AA@
  00081	41 b8 5b 05 00
	00		 mov	 r8d, 1371		; 0000055bH
  00087	4c 8b cf	 mov	 r9, rdi
  0008a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00092	e8 00 00 00 00	 call	 _PyParallel_Guard
  00097	85 c0		 test	 eax, eax
  00099	75 54		 jne	 SHORT $LN5@gc_get_ref@2
  0009b	e8 00 00 00 00	 call	 _Py_PXCTX
  000a0	85 c0		 test	 eax, eax
  000a2	75 4b		 jne	 SHORT $LN5@gc_get_ref@2
  000a4	48 8b 4f 58	 mov	 rcx, QWORD PTR [rdi+88]
  000a8	8b 81 00 01 00
	00		 mov	 eax, DWORD PTR [rcx+256]
  000ae	c1 e8 0e	 shr	 eax, 14
  000b1	83 e0 01	 and	 eax, 1
  000b4	74 39		 je	 SHORT $LN5@gc_get_ref@2
  000b6	48 8b 81 a0 01
	00 00		 mov	 rax, QWORD PTR [rcx+416]
  000bd	48 85 c0	 test	 rax, rax
  000c0	74 09		 je	 SHORT $LN21@gc_get_ref@2
  000c2	48 8b cf	 mov	 rcx, rdi
  000c5	ff d0		 call	 rax
  000c7	85 c0		 test	 eax, eax
  000c9	74 24		 je	 SHORT $LN5@gc_get_ref@2
$LN21@gc_get_ref@2:

; 1372 :             continue;
; 1373 :         traverse = Py_TYPE(obj)->tp_traverse;

  000cb	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000cf	4c 8b 88 10 01
	00 00		 mov	 r9, QWORD PTR [rax+272]

; 1374 :         if (! traverse)

  000d6	4d 85 c9	 test	 r9, r9
  000d9	74 14		 je	 SHORT $LN5@gc_get_ref@2

; 1375 :             continue;
; 1376 :         if (traverse(obj, (visitproc)referentsvisit, result)) {

  000db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:referentsvisit
  000e2	4c 8b c5	 mov	 r8, rbp
  000e5	48 8b cf	 mov	 rcx, rdi
  000e8	41 ff d1	 call	 r9
  000eb	85 c0		 test	 eax, eax
  000ed	75 2c		 jne	 SHORT $LN19@gc_get_ref@2
$LN5@gc_get_ref@2:

; 1365 :         return NULL;
; 1366 : 
; 1367 :     for (i = 0; i < PyTuple_GET_SIZE(args); i++) {

  000ef	48 ff c3	 inc	 rbx
  000f2	48 83 c6 08	 add	 rsi, 8
  000f6	49 3b 5c 24 60	 cmp	 rbx, QWORD PTR [r12+96]
  000fb	0f 8c 6f ff ff
	ff		 jl	 $LL6@gc_get_ref@2
$LN22@gc_get_ref@2:

; 1379 :         }
; 1380 :     }
; 1381 :     return result;

  00101	48 8b c5	 mov	 rax, rbp
$LN25@gc_get_ref@2:
  00104	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  00109	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0010e	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 1382 : }

  00113	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00117	41 5c		 pop	 r12
  00119	5d		 pop	 rbp
  0011a	c3		 ret	 0
$LN19@gc_get_ref@2:

; 1377 :             Py_DECREF(result);

  0011b	48 8b cd	 mov	 rcx, rbp
  0011e	e8 00 00 00 00	 call	 _Py_DecRef

; 1378 :             return NULL;

  00123	33 c0		 xor	 eax, eax
  00125	eb dd		 jmp	 SHORT $LN25@gc_get_ref@2
gc_get_referents ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@JDHDGDGB@gc_get_objects?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$gc_get_objects DD imagerel gc_get_objects
	DD	imagerel gc_get_objects+64
	DD	imagerel $unwind$gc_get_objects
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$gc_get_objects DD imagerel gc_get_objects+64
	DD	imagerel gc_get_objects+131
	DD	imagerel $chain$1$gc_get_objects
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$gc_get_objects DD imagerel gc_get_objects+131
	DD	imagerel gc_get_objects+228
	DD	imagerel $chain$3$gc_get_objects
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$gc_get_objects DD imagerel gc_get_objects+228
	DD	imagerel gc_get_objects+256
	DD	imagerel $chain$5$gc_get_objects
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$gc_get_objects DD imagerel gc_get_objects+256
	DD	imagerel gc_get_objects+282
	DD	imagerel $chain$7$gc_get_objects
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$gc_get_objects DD 040021H
	DD	096400H
	DD	083400H
	DD	imagerel gc_get_objects
	DD	imagerel gc_get_objects+64
	DD	imagerel $unwind$gc_get_objects
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$gc_get_objects DD 040021H
	DD	096400H
	DD	083400H
	DD	imagerel gc_get_objects
	DD	imagerel gc_get_objects+64
	DD	imagerel $unwind$gc_get_objects
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$gc_get_objects DD 040021H
	DD	096400H
	DD	083400H
	DD	imagerel gc_get_objects
	DD	imagerel gc_get_objects+64
	DD	imagerel $unwind$gc_get_objects
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$gc_get_objects DD 040a21H
	DD	09640aH
	DD	083405H
	DD	imagerel gc_get_objects
	DD	imagerel gc_get_objects+64
	DD	imagerel $unwind$gc_get_objects
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_get_objects DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT ??_C@_0P@JDHDGDGB@gc_get_objects?$AA@
CONST	SEGMENT
??_C@_0P@JDHDGDGB@gc_get_objects?$AA@ DB 'gc_get_objects', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\gcmodule.c
CONST	ENDS
;	COMDAT gc_get_objects
_TEXT	SEGMENT
self$ = 64
noargs$ = 72
gc_get_objects PROC					; COMDAT

; 1392 : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1393 :     int i;
; 1394 :     PyObject* result;
; 1395 :     Py_GUARD

  00006	e8 00 00 00 00	 call	 _Py_PXCTX
  0000b	85 c0		 test	 eax, eax
  0000d	74 1c		 je	 SHORT $LN6@gc_get_obj
  0000f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00016	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@JDHDGDGB@gc_get_objects?$AA@
  0001d	45 33 c9	 xor	 r9d, r9d
  00020	41 b8 73 05 00
	00		 mov	 r8d, 1395		; 00000573H
  00026	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN6@gc_get_obj:

; 1396 : 
; 1397 :     result = PyList_New(0);

  0002b	33 c9		 xor	 ecx, ecx
  0002d	e8 00 00 00 00	 call	 PyList_New
  00032	48 8b f8	 mov	 rdi, rax

; 1398 :     if (result == NULL)

  00035	48 85 c0	 test	 rax, rax
  00038	75 06		 jne	 SHORT $LN5@gc_get_obj

; 1407 : }

  0003a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0003e	5f		 pop	 rdi
  0003f	c3		 ret	 0
$LN5@gc_get_obj:
  00040	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00045	48 89 74 24 48	 mov	 QWORD PTR [rsp+72], rsi

; 1399 :         return NULL;
; 1400 :     for (i = 0; i < NUM_GENERATIONS; i++) {

  0004a	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:generations
  00051	33 db		 xor	 ebx, ebx
$LL4@gc_get_obj:

; 1401 :         if (append_objects(result, GEN_HEAD(i))) {

  00053	48 63 d3	 movsxd	 rdx, ebx
  00056	48 8b cf	 mov	 rcx, rdi
  00059	48 c1 e2 05	 shl	 rdx, 5
  0005d	48 03 d6	 add	 rdx, rsi
  00060	e8 00 00 00 00	 call	 append_objects
  00065	85 c0		 test	 eax, eax
  00067	75 1a		 jne	 SHORT $LN21@gc_get_obj

; 1399 :         return NULL;
; 1400 :     for (i = 0; i < NUM_GENERATIONS; i++) {

  00069	ff c3		 inc	 ebx
  0006b	83 fb 03	 cmp	 ebx, 3
  0006e	7c e3		 jl	 SHORT $LL4@gc_get_obj

; 1404 :         }
; 1405 :     }
; 1406 :     return result;

  00070	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00075	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0007a	48 8b c7	 mov	 rax, rdi

; 1407 : }

  0007d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00081	5f		 pop	 rdi
  00082	c3		 ret	 0
$LN21@gc_get_obj:

; 1402 :             Py_DECREF(result);

  00083	e8 00 00 00 00	 call	 _Py_PXCTX
  00088	85 c0		 test	 eax, eax
  0008a	75 7c		 jne	 SHORT $LN19@gc_get_obj
  0008c	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00090	a8 20		 test	 al, 32			; 00000020H
  00092	75 6c		 jne	 SHORT $LN13@gc_get_obj
  00094	84 c0		 test	 al, al
  00096	78 68		 js	 SHORT $LN13@gc_get_obj
  00098	a8 02		 test	 al, 2
  0009a	75 6c		 jne	 SHORT $LN19@gc_get_obj
  0009c	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  000a0	75 66		 jne	 SHORT $LN19@gc_get_obj
  000a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000b0	4c 8b cf	 mov	 r9, rdi
  000b3	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000b9	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c1	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c6	48 8b cf	 mov	 rcx, rdi
  000c9	85 c0		 test	 eax, eax
  000cb	74 17		 je	 SHORT $LN18@gc_get_obj
  000cd	e8 00 00 00 00	 call	 _Px_Dealloc
  000d2	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000d7	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]

; 1403 :             return NULL;

  000dc	33 c0		 xor	 eax, eax

; 1407 : }

  000de	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000e2	5f		 pop	 rdi
  000e3	c3		 ret	 0

; 1402 :             Py_DECREF(result);

$LN18@gc_get_obj:
  000e4	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000e8	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000ee	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000f3	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]

; 1403 :             return NULL;

  000f8	33 c0		 xor	 eax, eax

; 1407 : }

  000fa	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000fe	5f		 pop	 rdi
  000ff	c3		 ret	 0

; 1402 :             Py_DECREF(result);

$LN13@gc_get_obj:
  00100	48 8b cf	 mov	 rcx, rdi
  00103	e8 00 00 00 00	 call	 Px_DecRef
$LN19@gc_get_obj:

; 1403 :             return NULL;

  00108	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0010d	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00112	33 c0		 xor	 eax, eax

; 1407 : }

  00114	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00118	5f		 pop	 rdi
  00119	c3		 ret	 0
gc_get_objects ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@EMPDJANN@gc_is_tracked?$AA@		; `string'
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$gc_is_tracked DD imagerel gc_is_tracked
	DD	imagerel gc_is_tracked+328
	DD	imagerel $unwind$gc_is_tracked
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_is_tracked DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0O@EMPDJANN@gc_is_tracked?$AA@
CONST	SEGMENT
??_C@_0O@EMPDJANN@gc_is_tracked?$AA@ DB 'gc_is_tracked', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\gcmodule.c
CONST	ENDS
;	COMDAT gc_is_tracked
_TEXT	SEGMENT
self$ = 64
obj$ = 72
tv83 = 80
gc_is_tracked PROC					; COMDAT

; 1418 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b da	 mov	 rbx, rdx

; 1419 :     PyObject *result;
; 1420 :     Py_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN3@gc_is_trac
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@EMPDJANN@gc_is_tracked?$AA@
  00020	45 33 c9	 xor	 r9d, r9d
  00023	41 b8 8c 05 00
	00		 mov	 r8d, 1420		; 0000058cH
  00029	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@gc_is_trac:

; 1421 : 
; 1422 :     if (PyObject_IS_GC(obj) && IS_TRACKED(obj))

  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@EMPDJANN@gc_is_tracked?$AA@
  0003c	4c 8b cb	 mov	 r9, rbx
  0003f	41 b8 8e 05 00
	00		 mov	 r8d, 1422		; 0000058eH
  00045	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0004d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00052	85 c0		 test	 eax, eax
  00054	0f 85 a3 00 00
	00		 jne	 $LN2@gc_is_trac
  0005a	e8 00 00 00 00	 call	 _Py_PXCTX
  0005f	85 c0		 test	 eax, eax
  00061	0f 85 96 00 00
	00		 jne	 $LN2@gc_is_trac
  00067	48 8b 4b 58	 mov	 rcx, QWORD PTR [rbx+88]
  0006b	8b 81 00 01 00
	00		 mov	 eax, DWORD PTR [rcx+256]
  00071	c1 e8 0e	 shr	 eax, 14
  00074	83 e0 01	 and	 eax, 1
  00077	0f 84 80 00 00
	00		 je	 $LN2@gc_is_trac
  0007d	48 8b 81 a0 01
	00 00		 mov	 rax, QWORD PTR [rcx+416]
  00084	48 85 c0	 test	 rax, rax
  00087	74 09		 je	 SHORT $LN21@gc_is_trac
  00089	48 8b cb	 mov	 rcx, rbx
  0008c	ff d0		 call	 rax
  0008e	85 c0		 test	 eax, eax
  00090	74 6b		 je	 SHORT $LN2@gc_is_trac
$LN21@gc_is_trac:
  00092	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00099	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@EMPDJANN@gc_is_tracked?$AA@
  000a0	4c 8b cb	 mov	 r9, rbx
  000a3	41 b8 8e 05 00
	00		 mov	 r8d, 1422		; 0000058eH
  000a9	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000b1	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b6	85 c0		 test	 eax, eax
  000b8	75 43		 jne	 SHORT $LN2@gc_is_trac
  000ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@EMPDJANN@gc_is_tracked?$AA@
  000c8	4c 8b cb	 mov	 r9, rbx
  000cb	41 b8 8e 05 00
	00		 mov	 r8d, 1422		; 0000058eH
  000d1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d9	e8 00 00 00 00	 call	 _PyParallel_Guard
  000de	33 c9		 xor	 ecx, ecx
  000e0	85 c0		 test	 eax, eax
  000e2	8b c1		 mov	 eax, ecx
  000e4	75 04		 jne	 SHORT $LN14@gc_is_trac
  000e6	48 8d 43 e8	 lea	 rax, QWORD PTR [rbx-24]
$LN14@gc_is_trac:
  000ea	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2

; 1423 :         result = Py_True;

  000ef	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_TrueStruct
  000f6	0f 95 c1	 setne	 cl
  000f9	85 c9		 test	 ecx, ecx
  000fb	75 07		 jne	 SHORT $LN1@gc_is_trac
$LN2@gc_is_trac:

; 1424 :     else
; 1425 :         result = Py_False;

  000fd	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
$LN1@gc_is_trac:

; 1426 :     Py_INCREF(result);

  00104	e8 00 00 00 00	 call	 _Py_PXCTX
  00109	85 c0		 test	 eax, eax
  0010b	75 32		 jne	 SHORT $LN22@gc_is_trac
  0010d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00114	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0011b	4c 8b cb	 mov	 r9, rbx
  0011e	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00124	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0012c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00131	85 c0		 test	 eax, eax
  00133	75 06		 jne	 SHORT $LN17@gc_is_trac
  00135	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00139	74 04		 je	 SHORT $LN22@gc_is_trac
$LN17@gc_is_trac:
  0013b	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN22@gc_is_trac:

; 1427 :     return result;

  0013f	48 8b c3	 mov	 rax, rbx

; 1428 : }

  00142	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00146	5b		 pop	 rbx
  00147	c3		 ret	 0
gc_is_tracked ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@EILAKDBC@DEBUG_LEAK?$AA@		; `string'
PUBLIC	??_C@_0O@KHDKOLND@DEBUG_SAVEALL?$AA@		; `string'
PUBLIC	??_C@_0BE@IJOEAMLB@DEBUG_UNCOLLECTABLE?$AA@	; `string'
PUBLIC	??_C@_0BC@DILHAMK@DEBUG_COLLECTABLE?$AA@	; `string'
PUBLIC	??_C@_0M@NKBNCFEN@DEBUG_STATS?$AA@		; `string'
PUBLIC	??_C@_09COICIIMN@callbacks?$AA@			; `string'
PUBLIC	??_C@_07BOKCJEKD@garbage?$AA@			; `string'
PUBLIC	??_C@_09KHLFGIJJ@PyInit_gc?$AA@			; `string'
PUBLIC	PyInit_gc
EXTRN	PyModule_AddIntConstant:PROC
EXTRN	PyImport_ImportModuleNoBlock:PROC
EXTRN	PyModule_AddObject:PROC
EXTRN	PyModule_Create2:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyInit_gc DD imagerel $LN24
	DD	imagerel $LN24+74
	DD	imagerel $unwind$PyInit_gc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyInit_gc DD imagerel $LN24+74
	DD	imagerel $LN24+431
	DD	imagerel $chain$0$PyInit_gc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyInit_gc DD imagerel $LN24+431
	DD	imagerel $LN24+474
	DD	imagerel $chain$2$PyInit_gc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyInit_gc DD 020021H
	DD	083400H
	DD	imagerel $LN24
	DD	imagerel $LN24+74
	DD	imagerel $unwind$PyInit_gc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyInit_gc DD 020521H
	DD	083405H
	DD	imagerel $LN24
	DD	imagerel $LN24+74
	DD	imagerel $unwind$PyInit_gc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit_gc DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT ??_C@_0L@EILAKDBC@DEBUG_LEAK?$AA@
CONST	SEGMENT
??_C@_0L@EILAKDBC@DEBUG_LEAK?$AA@ DB 'DEBUG_LEAK', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KHDKOLND@DEBUG_SAVEALL?$AA@
CONST	SEGMENT
??_C@_0O@KHDKOLND@DEBUG_SAVEALL?$AA@ DB 'DEBUG_SAVEALL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IJOEAMLB@DEBUG_UNCOLLECTABLE?$AA@
CONST	SEGMENT
??_C@_0BE@IJOEAMLB@DEBUG_UNCOLLECTABLE?$AA@ DB 'DEBUG_UNCOLLECTABLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DILHAMK@DEBUG_COLLECTABLE?$AA@
CONST	SEGMENT
??_C@_0BC@DILHAMK@DEBUG_COLLECTABLE?$AA@ DB 'DEBUG_COLLECTABLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NKBNCFEN@DEBUG_STATS?$AA@
CONST	SEGMENT
??_C@_0M@NKBNCFEN@DEBUG_STATS?$AA@ DB 'DEBUG_STATS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09COICIIMN@callbacks?$AA@
CONST	SEGMENT
??_C@_09COICIIMN@callbacks?$AA@ DB 'callbacks', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BOKCJEKD@garbage?$AA@
CONST	SEGMENT
??_C@_07BOKCJEKD@garbage?$AA@ DB 'garbage', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09KHLFGIJJ@PyInit_gc?$AA@
CONST	SEGMENT
??_C@_09KHLFGIJJ@PyInit_gc?$AA@ DB 'PyInit_gc', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\gcmodule.c
CONST	ENDS
;	COMDAT PyInit_gc
_TEXT	SEGMENT
PyInit_gc PROC						; COMDAT

; 1482 : {

$LN24:
  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1483 :     PyObject *m;
; 1484 :     Py_GUARD

  00006	e8 00 00 00 00	 call	 _Py_PXCTX
  0000b	85 c0		 test	 eax, eax
  0000d	74 1c		 je	 SHORT $LN15@PyInit_gc
  0000f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00016	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09KHLFGIJJ@PyInit_gc?$AA@
  0001d	45 33 c9	 xor	 r9d, r9d
  00020	41 b8 cc 05 00
	00		 mov	 r8d, 1484		; 000005ccH
  00026	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN15@PyInit_gc:

; 1485 : 
; 1486 :     m = PyModule_Create(&gcmodule);

  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gcmodule
  00032	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00037	e8 00 00 00 00	 call	 PyModule_Create2
  0003c	48 8b f8	 mov	 rdi, rax

; 1487 : 
; 1488 :     if (m == NULL)

  0003f	48 85 c0	 test	 rax, rax
  00042	75 06		 jne	 SHORT $LN14@PyInit_gc

; 1527 : #undef ADD_INT
; 1528 :     return m;
; 1529 : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5f		 pop	 rdi
  00049	c3		 ret	 0
$LN14@PyInit_gc:
  0004a	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx

; 1489 :         return NULL;
; 1490 : 
; 1491 :     if (garbage == NULL) {

  0004f	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR garbage
  00056	48 85 db	 test	 rbx, rbx
  00059	75 1a		 jne	 SHORT $LN12@PyInit_gc

; 1492 :         garbage = PyList_New(0);

  0005b	33 c9		 xor	 ecx, ecx
  0005d	e8 00 00 00 00	 call	 PyList_New
  00062	48 8b d8	 mov	 rbx, rax
  00065	48 89 05 00 00
	00 00		 mov	 QWORD PTR garbage, rax

; 1493 :         if (garbage == NULL)

  0006c	48 85 c0	 test	 rax, rax

; 1494 :             return NULL;

  0006f	0f 84 2d 01 00
	00		 je	 $LN23@PyInit_gc
$LN12@PyInit_gc:

; 1495 :     }
; 1496 :     Py_INCREF(garbage);

  00075	e8 00 00 00 00	 call	 _Py_PXCTX
  0007a	85 c0		 test	 eax, eax
  0007c	75 32		 jne	 SHORT $LN19@PyInit_gc
  0007e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00085	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0008c	4c 8b cb	 mov	 r9, rbx
  0008f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00095	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0009d	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a2	85 c0		 test	 eax, eax
  000a4	75 06		 jne	 SHORT $LN18@PyInit_gc
  000a6	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000aa	74 04		 je	 SHORT $LN19@PyInit_gc
$LN18@PyInit_gc:
  000ac	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN19@PyInit_gc:

; 1497 :     if (PyModule_AddObject(m, "garbage", garbage) < 0)

  000b0	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR garbage
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07BOKCJEKD@garbage?$AA@
  000be	48 8b cf	 mov	 rcx, rdi
  000c1	e8 00 00 00 00	 call	 PyModule_AddObject
  000c6	85 c0		 test	 eax, eax

; 1498 :         return NULL;

  000c8	0f 88 d4 00 00
	00		 js	 $LN23@PyInit_gc

; 1499 : 
; 1500 :     if (callbacks == NULL) {

  000ce	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR callbacks
  000d5	48 85 c0	 test	 rax, rax
  000d8	75 17		 jne	 SHORT $LN9@PyInit_gc

; 1501 :         callbacks = PyList_New(0);

  000da	33 c9		 xor	 ecx, ecx
  000dc	e8 00 00 00 00	 call	 PyList_New
  000e1	48 89 05 00 00
	00 00		 mov	 QWORD PTR callbacks, rax

; 1502 :         if (callbacks == NULL)

  000e8	48 85 c0	 test	 rax, rax

; 1503 :             return NULL;

  000eb	0f 84 b1 00 00
	00		 je	 $LN23@PyInit_gc
$LN9@PyInit_gc:

; 1504 :     }
; 1505 :     Py_INCREF(callbacks);

  000f1	48 8b c8	 mov	 rcx, rax
  000f4	e8 00 00 00 00	 call	 _Py_IncRef

; 1506 :     if (PyModule_AddObject(m, "callbacks", callbacks) < 0)

  000f9	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR callbacks
  00100	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09COICIIMN@callbacks?$AA@
  00107	48 8b cf	 mov	 rcx, rdi
  0010a	e8 00 00 00 00	 call	 PyModule_AddObject
  0010f	85 c0		 test	 eax, eax

; 1507 :         return NULL;

  00111	0f 88 8b 00 00
	00		 js	 $LN23@PyInit_gc

; 1508 : 
; 1509 :     /* Importing can't be done in collect() because collect()
; 1510 :      * can be called via PyGC_Collect() in Py_Finalize().
; 1511 :      * This wouldn't be a problem, except that <initialized> is
; 1512 :      * reset to 0 before calling collect which trips up
; 1513 :      * the import and triggers an assertion.
; 1514 :      */
; 1515 :     if (tmod == NULL) {

  00117	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR tmod, 0
  0011f	75 1d		 jne	 SHORT $LN6@PyInit_gc

; 1516 :         tmod = PyImport_ImportModuleNoBlock("time");

  00121	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04CLCEDBPF@time?$AA@
  00128	e8 00 00 00 00	 call	 PyImport_ImportModuleNoBlock
  0012d	48 89 05 00 00
	00 00		 mov	 QWORD PTR tmod, rax

; 1517 :         if (tmod == NULL)

  00134	48 85 c0	 test	 rax, rax
  00137	75 05		 jne	 SHORT $LN6@PyInit_gc

; 1518 :             PyErr_Clear();

  00139	e8 00 00 00 00	 call	 PyErr_Clear
$LN6@PyInit_gc:

; 1519 :     }
; 1520 : 
; 1521 : #define ADD_INT(NAME) if (PyModule_AddIntConstant(m, #NAME, NAME) < 0) return NULL
; 1522 :     ADD_INT(DEBUG_STATS);

  0013e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@NKBNCFEN@DEBUG_STATS?$AA@
  00145	41 b8 01 00 00
	00		 mov	 r8d, 1
  0014b	48 8b cf	 mov	 rcx, rdi
  0014e	e8 00 00 00 00	 call	 PyModule_AddIntConstant
  00153	85 c0		 test	 eax, eax
  00155	78 4b		 js	 SHORT $LN23@PyInit_gc

; 1523 :     ADD_INT(DEBUG_COLLECTABLE);

  00157	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@DILHAMK@DEBUG_COLLECTABLE?$AA@
  0015e	41 b8 02 00 00
	00		 mov	 r8d, 2
  00164	48 8b cf	 mov	 rcx, rdi
  00167	e8 00 00 00 00	 call	 PyModule_AddIntConstant
  0016c	85 c0		 test	 eax, eax
  0016e	78 32		 js	 SHORT $LN23@PyInit_gc

; 1524 :     ADD_INT(DEBUG_UNCOLLECTABLE);

  00170	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@IJOEAMLB@DEBUG_UNCOLLECTABLE?$AA@
  00177	41 b8 04 00 00
	00		 mov	 r8d, 4
  0017d	48 8b cf	 mov	 rcx, rdi
  00180	e8 00 00 00 00	 call	 PyModule_AddIntConstant
  00185	85 c0		 test	 eax, eax
  00187	78 19		 js	 SHORT $LN23@PyInit_gc

; 1525 :     ADD_INT(DEBUG_SAVEALL);

  00189	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@KHDKOLND@DEBUG_SAVEALL?$AA@
  00190	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  00196	48 8b cf	 mov	 rcx, rdi
  00199	e8 00 00 00 00	 call	 PyModule_AddIntConstant
  0019e	85 c0		 test	 eax, eax
  001a0	79 0d		 jns	 SHORT $LN2@PyInit_gc
$LN23@PyInit_gc:
  001a2	33 c0		 xor	 eax, eax
  001a4	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 1527 : #undef ADD_INT
; 1528 :     return m;
; 1529 : }

  001a9	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001ad	5f		 pop	 rdi
  001ae	c3		 ret	 0
$LN2@PyInit_gc:

; 1526 :     ADD_INT(DEBUG_LEAK);

  001af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@EILAKDBC@DEBUG_LEAK?$AA@
  001b6	41 b8 26 00 00
	00		 mov	 r8d, 38			; 00000026H
  001bc	48 8b cf	 mov	 rcx, rdi
  001bf	e8 00 00 00 00	 call	 PyModule_AddIntConstant
  001c4	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  001c9	33 c9		 xor	 ecx, ecx
  001cb	85 c0		 test	 eax, eax
  001cd	48 0f 48 f9	 cmovs	 rdi, rcx
  001d1	48 8b c7	 mov	 rax, rdi

; 1527 : #undef ADD_INT
; 1528 :     return m;
; 1529 : }

  001d4	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001d8	5f		 pop	 rdi
  001d9	c3		 ret	 0
PyInit_gc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@JDNFGJNE@PyGC_Collect?$AA@		; `string'
PUBLIC	PyGC_Collect
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyGC_Collect DD imagerel $LN6
	DD	imagerel $LN6+92
	DD	imagerel $unwind$PyGC_Collect
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyGC_Collect DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0N@JDNFGJNE@PyGC_Collect?$AA@
CONST	SEGMENT
??_C@_0N@JDNFGJNE@PyGC_Collect?$AA@ DB 'PyGC_Collect', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyGC_Collect
_TEXT	SEGMENT
PyGC_Collect PROC					; COMDAT

; 1534 : {

$LN6:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1535 :     Py_ssize_t n;
; 1536 :     Py_GUARD

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	74 1c		 je	 SHORT $LN3@PyGC_Colle
  0000d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@JDNFGJNE@PyGC_Collect?$AA@
  0001b	45 33 c9	 xor	 r9d, r9d
  0001e	41 b8 00 06 00
	00		 mov	 r8d, 1536		; 00000600H
  00024	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@PyGC_Colle:

; 1537 : 
; 1538 :     if (collecting)

  00029	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR collecting, 0
  00030	74 07		 je	 SHORT $LN2@PyGC_Colle

; 1544 :     }
; 1545 : 
; 1546 :     return n;

  00032	33 c0		 xor	 eax, eax

; 1547 : }

  00034	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00038	c3		 ret	 0
$LN2@PyGC_Colle:

; 1539 :         n = 0; /* already collecting, don't do anything */
; 1540 :     else {
; 1541 :         collecting = 1;
; 1542 :         n = collect_with_callback(NUM_GENERATIONS - 1);

  00039	b9 02 00 00 00	 mov	 ecx, 2
  0003e	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR collecting, 1
  00048	e8 00 00 00 00	 call	 collect_with_callback

; 1543 :         collecting = 0;

  0004d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR collecting, 0

; 1547 : }

  00057	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005b	c3		 ret	 0
PyGC_Collect ENDP
_TEXT	ENDS
PUBLIC	??_C@_07FBMPDAOB@?5?5?5?5?$CFs?6?$AA@		; `string'
PUBLIC	??_C@_0CK@ONJJAOHD@gc?3?5?$CFzd?5uncollectable?5objects?5at@ ; `string'
PUBLIC	??_C@_0GB@PGJHHMDB@gc?3?5?$CFzd?5uncollectable?5objects?5at@ ; `string'
PUBLIC	??_C@_0L@FGKCKJKB@_PyGC_Fini?$AA@		; `string'
PUBLIC	_PyGC_Fini
EXTRN	PyUnicode_EncodeFSDefault:PROC
EXTRN	PyObject_Repr:PROC
EXTRN	PyErr_WarnFormat:PROC
EXTRN	PyExc_ResourceWarning:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_PyGC_Fini DD imagerel $LN35
	DD	imagerel $LN35+152
	DD	imagerel $unwind$_PyGC_Fini
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_PyGC_Fini DD imagerel $LN35+152
	DD	imagerel $LN35+241
	DD	imagerel $chain$1$_PyGC_Fini
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_PyGC_Fini DD imagerel $LN35+241
	DD	imagerel $LN35+450
	DD	imagerel $chain$2$_PyGC_Fini
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_PyGC_Fini DD 021H
	DD	imagerel $LN35
	DD	imagerel $LN35+152
	DD	imagerel $unwind$_PyGC_Fini
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_PyGC_Fini DD 020521H
	DD	067405H
	DD	imagerel $LN35
	DD	imagerel $LN35+152
	DD	imagerel $unwind$_PyGC_Fini
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyGC_Fini DD 033401H
	DD	083434H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_07FBMPDAOB@?5?5?5?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_07FBMPDAOB@?5?5?5?5?$CFs?6?$AA@ DB '    %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@ONJJAOHD@gc?3?5?$CFzd?5uncollectable?5objects?5at@
CONST	SEGMENT
??_C@_0CK@ONJJAOHD@gc?3?5?$CFzd?5uncollectable?5objects?5at@ DB 'gc: %zd '
	DB	'uncollectable objects at shutdown', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GB@PGJHHMDB@gc?3?5?$CFzd?5uncollectable?5objects?5at@
CONST	SEGMENT
??_C@_0GB@PGJHHMDB@gc?3?5?$CFzd?5uncollectable?5objects?5at@ DB 'gc: %zd '
	DB	'uncollectable objects at shutdown; use gc.set_debug(gc.DEBUG_'
	DB	'UNCOLLECTABLE) to list them', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FGKCKJKB@_PyGC_Fini?$AA@
CONST	SEGMENT
??_C@_0L@FGKCKJKB@_PyGC_Fini?$AA@ DB '_PyGC_Fini', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\gcmodule.c
CONST	ENDS
;	COMDAT _PyGC_Fini
_TEXT	SEGMENT
_PyGC_Fini PROC						; COMDAT

; 1551 : {

$LN35:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1552 :     Py_GUARD

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	74 1c		 je	 SHORT $LN21@PyGC_Fini
  0000d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@FGKCKJKB@_PyGC_Fini?$AA@
  0001b	45 33 c9	 xor	 r9d, r9d
  0001e	41 b8 10 06 00
	00		 mov	 r8d, 1552		; 00000610H
  00024	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN21@PyGC_Fini:

; 1553 :     if (!(debug & DEBUG_SAVEALL)
; 1554 :         && garbage != NULL && PyList_GET_SIZE(garbage) > 0) {

  00029	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR debug
  0002f	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00034	f6 c1 20	 test	 cl, 32			; 00000020H
  00037	0f 85 bc 00 00
	00		 jne	 $LN6@PyGC_Fini
  0003d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR garbage
  00044	48 85 c0	 test	 rax, rax
  00047	0f 84 ac 00 00
	00		 je	 $LN6@PyGC_Fini
  0004d	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  00051	4d 85 c9	 test	 r9, r9
  00054	0f 8e 9f 00 00
	00		 jle	 $LN6@PyGC_Fini

; 1555 :         char *message;
; 1556 :         if (debug & DEBUG_UNCOLLECTABLE)

  0005a	f6 c1 04	 test	 cl, 4

; 1557 :             message = "gc: %zd uncollectable objects at " \
; 1558 :                 "shutdown";
; 1559 :         else
; 1560 :             message = "gc: %zd uncollectable objects at " \
; 1561 :                 "shutdown; use gc.set_debug(gc.DEBUG_UNCOLLECTABLE) to list them";
; 1562 :         if (PyErr_WarnFormat(PyExc_ResourceWarning, 0, message,
; 1563 :                              PyList_GET_SIZE(garbage)) < 0)

  0005d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ResourceWarning
  00064	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0GB@PGJHHMDB@gc?3?5?$CFzd?5uncollectable?5objects?5at@
  0006b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CK@ONJJAOHD@gc?3?5?$CFzd?5uncollectable?5objects?5at@
  00072	4c 0f 44 c0	 cmove	 r8, rax
  00076	33 d2		 xor	 edx, edx
  00078	e8 00 00 00 00	 call	 PyErr_WarnFormat
  0007d	85 c0		 test	 eax, eax
  0007f	79 07		 jns	 SHORT $LN17@PyGC_Fini

; 1564 :             PyErr_WriteUnraisable(NULL);

  00081	33 c9		 xor	 ecx, ecx
  00083	e8 00 00 00 00	 call	 PyErr_WriteUnraisable
$LN17@PyGC_Fini:

; 1565 :         if (debug & DEBUG_UNCOLLECTABLE) {

  00088	f6 05 00 00 00
	00 04		 test	 BYTE PTR debug, 4
  0008f	74 68		 je	 SHORT $LN6@PyGC_Fini

; 1566 :             PyObject *repr = NULL, *bytes = NULL;
; 1567 :             repr = PyObject_Repr(garbage);

  00091	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR garbage
  00098	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  0009d	33 db		 xor	 ebx, ebx
  0009f	e8 00 00 00 00	 call	 PyObject_Repr
  000a4	48 8b f8	 mov	 rdi, rax

; 1568 :             if (!repr || !(bytes = PyUnicode_EncodeFSDefault(repr)))

  000a7	48 85 c0	 test	 rax, rax
  000aa	74 22		 je	 SHORT $LN14@PyGC_Fini
  000ac	48 8b c8	 mov	 rcx, rax
  000af	e8 00 00 00 00	 call	 PyUnicode_EncodeFSDefault
  000b4	48 8b d8	 mov	 rbx, rax
  000b7	48 85 c0	 test	 rax, rax
  000ba	74 12		 je	 SHORT $LN14@PyGC_Fini

; 1570 :             else {
; 1571 :                 PySys_WriteStderr(
; 1572 :                     "    %s\n",
; 1573 :                     PyBytes_AS_STRING(bytes)
; 1574 :                     );

  000bc	48 8d 50 78	 lea	 rdx, QWORD PTR [rax+120]
  000c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07FBMPDAOB@?5?5?5?5?$CFs?6?$AA@
  000c7	e8 00 00 00 00	 call	 PySys_WriteStderr
  000cc	eb 0c		 jmp	 SHORT $LN12@PyGC_Fini
$LN14@PyGC_Fini:

; 1569 :                 PyErr_WriteUnraisable(garbage);

  000ce	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR garbage
  000d5	e8 00 00 00 00	 call	 PyErr_WriteUnraisable
$LN12@PyGC_Fini:

; 1575 :             }
; 1576 :             Py_XDECREF(repr);

  000da	48 85 ff	 test	 rdi, rdi
  000dd	74 08		 je	 SHORT $LN11@PyGC_Fini
  000df	48 8b cf	 mov	 rcx, rdi
  000e2	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@PyGC_Fini:

; 1577 :             Py_XDECREF(bytes);

  000e7	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
  000ec	48 85 db	 test	 rbx, rbx
  000ef	74 08		 je	 SHORT $LN6@PyGC_Fini
  000f1	48 8b cb	 mov	 rcx, rbx
  000f4	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@PyGC_Fini:

; 1578 :         }
; 1579 :     }
; 1580 :     Py_CLEAR(callbacks);

  000f9	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR callbacks
  00100	4d 85 c9	 test	 r9, r9
  00103	0f 84 af 00 00
	00		 je	 $LN3@PyGC_Fini
  00109	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00110	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@FGKCKJKB@_PyGC_Fini?$AA@
  00117	41 b8 2c 06 00
	00		 mov	 r8d, 1580		; 0000062cH
  0011d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00125	e8 00 00 00 00	 call	 _PyParallel_Guard
  0012a	85 c0		 test	 eax, eax
  0012c	0f 85 86 00 00
	00		 jne	 $LN3@PyGC_Fini
  00132	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR callbacks
  00139	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR callbacks, 0
  00144	e8 00 00 00 00	 call	 _Py_PXCTX
  00149	85 c0		 test	 eax, eax
  0014b	75 6b		 jne	 SHORT $LN3@PyGC_Fini
  0014d	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00151	a8 20		 test	 al, 32			; 00000020H
  00153	75 5b		 jne	 SHORT $LN28@PyGC_Fini
  00155	84 c0		 test	 al, al
  00157	78 57		 js	 SHORT $LN28@PyGC_Fini
  00159	a8 02		 test	 al, 2
  0015b	75 5b		 jne	 SHORT $LN3@PyGC_Fini
  0015d	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00161	75 55		 jne	 SHORT $LN3@PyGC_Fini
  00163	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0016a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00171	4c 8b cb	 mov	 r9, rbx
  00174	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0017a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00182	e8 00 00 00 00	 call	 _PyParallel_Guard
  00187	48 8b cb	 mov	 rcx, rbx
  0018a	85 c0		 test	 eax, eax
  0018c	74 0e		 je	 SHORT $LN33@PyGC_Fini
  0018e	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 1581 : }

  00193	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00197	e9 00 00 00 00	 jmp	 _Px_Dealloc

; 1578 :         }
; 1579 :     }
; 1580 :     Py_CLEAR(callbacks);

$LN33@PyGC_Fini:
  0019c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001a0	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 1581 : }

  001a5	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001a9	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]

; 1578 :         }
; 1579 :     }
; 1580 :     Py_CLEAR(callbacks);

$LN28@PyGC_Fini:
  001b0	48 8b cb	 mov	 rcx, rbx
  001b3	e8 00 00 00 00	 call	 Px_DecRef
$LN3@PyGC_Fini:
  001b8	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 1581 : }

  001bd	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001c1	c3		 ret	 0
_PyGC_Fini ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@KPOLAFKH@_PyGC_Dump?$AA@		; `string'
PUBLIC	_PyGC_Dump
EXTRN	_PyObject_Dump:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyGC_Dump DD imagerel $LN6
	DD	imagerel $LN6+81
	DD	imagerel $unwind$_PyGC_Dump
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyGC_Dump DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0L@KPOLAFKH@_PyGC_Dump?$AA@
CONST	SEGMENT
??_C@_0L@KPOLAFKH@_PyGC_Dump?$AA@ DB '_PyGC_Dump', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyGC_Dump
_TEXT	SEGMENT
g$ = 48
_PyGC_Dump PROC						; COMDAT

; 1586 : {

$LN6:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 1587 :     Py_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN1@PyGC_Dump
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@KPOLAFKH@_PyGC_Dump?$AA@
  00020	45 33 c9	 xor	 r9d, r9d
  00023	41 b8 33 06 00
	00		 mov	 r8d, 1587		; 00000633H
  00029	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@PyGC_Dump:

; 1588 :     _PyObject_Dump(FROM_GC(g));

  0002e	e8 00 00 00 00	 call	 _Py_PXCTX
  00033	85 c0		 test	 eax, eax
  00035	74 0c		 je	 SHORT $LN4@PyGC_Dump
  00037	33 c9		 xor	 ecx, ecx

; 1589 : }

  00039	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003d	5b		 pop	 rbx
  0003e	e9 00 00 00 00	 jmp	 _PyObject_Dump
$LN4@PyGC_Dump:

; 1588 :     _PyObject_Dump(FROM_GC(g));

  00043	48 8d 4b 18	 lea	 rcx, QWORD PTR [rbx+24]

; 1589 : }

  00047	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004b	5b		 pop	 rbx
  0004c	e9 00 00 00 00	 jmp	 _PyObject_Dump
_PyGC_Dump ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ ; `string'
PUBLIC	??_C@_0BC@MEIJNBMG@PyObject_GC_Track?$AA@	; `string'
PUBLIC	PyObject_GC_Track
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_GC_Track DD imagerel $LN11
	DD	imagerel $LN11+182
	DD	imagerel $unwind$PyObject_GC_Track
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_GC_Track DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
CONST	SEGMENT
??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ DB 'GC object alread'
	DB	'y tracked', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MEIJNBMG@PyObject_GC_Track?$AA@
CONST	SEGMENT
??_C@_0BC@MEIJNBMG@PyObject_GC_Track?$AA@ DB 'PyObject_GC_Track', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyObject_GC_Track
_TEXT	SEGMENT
op$ = 64
PyObject_GC_Track PROC					; COMDAT

; 1601 : {

$LN11:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 1602 :     Px_VOID

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 9a 00 00
	00		 jne	 $LN2@PyObject_G

; 1603 :     _PyObject_GC_TRACK(op);

  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@MEIJNBMG@PyObject_GC_Track?$AA@
  00024	4c 8b cb	 mov	 r9, rbx
  00027	41 b8 43 06 00
	00		 mov	 r8d, 1603		; 00000643H
  0002d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00035	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003a	85 c0		 test	 eax, eax
  0003c	75 72		 jne	 SHORT $LN2@PyObject_G
  0003e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@MEIJNBMG@PyObject_GC_Track?$AA@
  0004c	4c 8b cb	 mov	 r9, rbx
  0004f	41 b8 43 06 00
	00		 mov	 r8d, 1603		; 00000643H
  00055	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0005d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00062	85 c0		 test	 eax, eax
  00064	74 04		 je	 SHORT $LN9@PyObject_G
  00066	33 db		 xor	 ebx, ebx
  00068	eb 04		 jmp	 SHORT $LN10@PyObject_G
$LN9@PyObject_G:
  0006a	48 83 c3 e8	 add	 rbx, -24
$LN10@PyObject_G:
  0006e	48 83 7b 10 fe	 cmp	 QWORD PTR [rbx+16], -2
  00073	74 0c		 je	 SHORT $LN1@PyObject_G
  00075	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  0007c	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyObject_G:
  00081	48 c7 43 10 fd
	ff ff ff	 mov	 QWORD PTR [rbx+16], -3
  00089	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00090	48 89 03	 mov	 QWORD PTR [rbx], rax
  00093	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  0009a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0009e	48 89 4b 08	 mov	 QWORD PTR [rbx+8], rcx
  000a2	48 89 19	 mov	 QWORD PTR [rcx], rbx
  000a5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  000ac	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
$LN2@PyObject_G:

; 1604 : }

  000b0	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b4	5b		 pop	 rbx
  000b5	c3		 ret	 0
PyObject_GC_Track ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@KKLCKPHK@PyObject_GC_UnTrack?$AA@	; `string'
PUBLIC	PyObject_GC_UnTrack
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_GC_UnTrack DD imagerel $LN15
	DD	imagerel $LN15+258
	DD	imagerel $unwind$PyObject_GC_UnTrack
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_GC_UnTrack DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0BE@KKLCKPHK@PyObject_GC_UnTrack?$AA@
CONST	SEGMENT
??_C@_0BE@KKLCKPHK@PyObject_GC_UnTrack?$AA@ DB 'PyObject_GC_UnTrack', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyObject_GC_UnTrack
_TEXT	SEGMENT
op$ = 64
PyObject_GC_UnTrack PROC				; COMDAT

; 1608 : {

$LN15:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 1609 :     Px_VOID

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN1@PyObject_G@2

; 1610 :     /* Obscure:  the Py_TRASHCAN mechanism requires that we be able to
; 1611 :      * call PyObject_GC_UnTrack twice on an object.
; 1612 :      */
; 1613 :     if (IS_TRACKED(op))

  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@KKLCKPHK@PyObject_GC_UnTrack?$AA@
  00024	4c 8b cb	 mov	 r9, rbx
  00027	41 b8 4d 06 00
	00		 mov	 r8d, 1613		; 0000064dH
  0002d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00035	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003a	85 c0		 test	 eax, eax
  0003c	0f 85 ba 00 00
	00		 jne	 $LN1@PyObject_G@2
  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@KKLCKPHK@PyObject_GC_UnTrack?$AA@
  00050	4c 8b cb	 mov	 r9, rbx
  00053	41 b8 4d 06 00
	00		 mov	 r8d, 1613		; 0000064dH
  00059	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00061	e8 00 00 00 00	 call	 _PyParallel_Guard
  00066	85 c0		 test	 eax, eax
  00068	74 04		 je	 SHORT $LN9@PyObject_G@2
  0006a	33 c9		 xor	 ecx, ecx
  0006c	eb 04		 jmp	 SHORT $LN10@PyObject_G@2
$LN9@PyObject_G@2:
  0006e	48 8d 4b e8	 lea	 rcx, QWORD PTR [rbx-24]
$LN10@PyObject_G@2:
  00072	33 c0		 xor	 eax, eax
  00074	48 83 79 10 fe	 cmp	 QWORD PTR [rcx+16], -2
  00079	0f 95 c0	 setne	 al
  0007c	85 c0		 test	 eax, eax
  0007e	74 7c		 je	 SHORT $LN1@PyObject_G@2

; 1614 :         _PyObject_GC_UNTRACK(op);

  00080	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00087	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@KKLCKPHK@PyObject_GC_UnTrack?$AA@
  0008e	4c 8b cb	 mov	 r9, rbx
  00091	41 b8 4e 06 00
	00		 mov	 r8d, 1614		; 0000064eH
  00097	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0009f	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a4	85 c0		 test	 eax, eax
  000a6	75 54		 jne	 SHORT $LN1@PyObject_G@2
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@KKLCKPHK@PyObject_GC_UnTrack?$AA@
  000b6	4c 8b cb	 mov	 r9, rbx
  000b9	41 b8 4e 06 00
	00		 mov	 r8d, 1614		; 0000064eH
  000bf	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cc	85 c0		 test	 eax, eax
  000ce	74 04		 je	 SHORT $LN13@PyObject_G@2
  000d0	33 d2		 xor	 edx, edx
  000d2	eb 04		 jmp	 SHORT $LN14@PyObject_G@2
$LN13@PyObject_G@2:
  000d4	48 8d 53 e8	 lea	 rdx, QWORD PTR [rbx-24]
$LN14@PyObject_G@2:
  000d8	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  000db	48 8b 4a 08	 mov	 rcx, QWORD PTR [rdx+8]
  000df	48 c7 42 10 fe
	ff ff ff	 mov	 QWORD PTR [rdx+16], -2
  000e7	48 89 01	 mov	 QWORD PTR [rcx], rax
  000ea	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  000ed	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  000f1	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  000f5	48 c7 02 00 00
	00 00		 mov	 QWORD PTR [rdx], 0
$LN1@PyObject_G@2:

; 1615 : }

  000fc	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00100	5b		 pop	 rbx
  00101	c3		 ret	 0
PyObject_GC_UnTrack ENDP
_TEXT	ENDS
PUBLIC	_PyObject_GC_Malloc
EXTRN	PyObject_Malloc:PROC
EXTRN	PyErr_NoMemory:PROC
EXTRN	_PxMem_Malloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_GC_Malloc DD imagerel $LN10
	DD	imagerel $LN10+60
	DD	imagerel $unwind$_PyObject_GC_Malloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_PyObject_GC_Malloc DD imagerel $LN10+60
	DD	imagerel $LN10+93
	DD	imagerel $chain$0$_PyObject_GC_Malloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_PyObject_GC_Malloc DD imagerel $LN10+93
	DD	imagerel $LN10+205
	DD	imagerel $chain$2$_PyObject_GC_Malloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_PyObject_GC_Malloc DD 020021H
	DD	067400H
	DD	imagerel $LN10
	DD	imagerel $LN10+60
	DD	imagerel $unwind$_PyObject_GC_Malloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_PyObject_GC_Malloc DD 020521H
	DD	067405H
	DD	imagerel $LN10
	DD	imagerel $LN10+60
	DD	imagerel $unwind$_PyObject_GC_Malloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_GC_Malloc DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyObject_GC_Malloc
_TEXT	SEGMENT
basicsize$ = 48
_PyObject_GC_Malloc PROC				; COMDAT

; 1619 : {

$LN10:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 1620 :     PyObject *op;
; 1621 :     PyGC_Head *g;
; 1622 :     Px_RETURN((PyObject *)_PxMem_Malloc(basicsize))

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 0d		 je	 SHORT $LN4@PyObject_G@3
  00012	48 8b cb	 mov	 rcx, rbx

; 1642 : }

  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5b		 pop	 rbx
  0001a	e9 00 00 00 00	 jmp	 _PxMem_Malloc
$LN4@PyObject_G@3:

; 1623 :     if (basicsize > PY_SSIZE_T_MAX - sizeof(PyGC_Head))

  0001f	48 b8 e7 ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775783 ; 7fffffffffffffe7H
  00029	48 3b d8	 cmp	 rbx, rax
  0002c	76 0a		 jbe	 SHORT $LN3@PyObject_G@3

; 1642 : }

  0002e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00032	5b		 pop	 rbx
  00033	e9 00 00 00 00	 jmp	 PyErr_NoMemory
$LN3@PyObject_G@3:

; 1624 :         return PyErr_NoMemory();
; 1625 :     g = (PyGC_Head *)PyObject_MALLOC(
; 1626 :         sizeof(PyGC_Head) + basicsize);

  00038	48 8d 4b 18	 lea	 rcx, QWORD PTR [rbx+24]
  0003c	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  00041	e8 00 00 00 00	 call	 PyObject_Malloc
  00046	48 8b f8	 mov	 rdi, rax

; 1627 :     if (g == NULL)

  00049	48 85 c0	 test	 rax, rax
  0004c	75 0f		 jne	 SHORT $LN2@PyObject_G@3
  0004e	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 1642 : }

  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 PyErr_NoMemory
$LN2@PyObject_G@3:

; 1628 :         return PyErr_NoMemory();
; 1629 :     g->gc.gc_refs = GC_UNTRACKED;

  0005d	48 c7 40 10 fe
	ff ff ff	 mov	 QWORD PTR [rax+16], -2

; 1630 :     generations[0].count++; /* number of allocated GC objects */

  00065	8b 05 1c 00 00
	00		 mov	 eax, DWORD PTR generations+28

; 1631 :     if (generations[0].count > generations[0].threshold &&
; 1632 :         enabled &&
; 1633 :         generations[0].threshold &&
; 1634 :         !collecting &&
; 1635 :         !PyErr_Occurred()) {

  0006b	8b 0d 18 00 00
	00		 mov	 ecx, DWORD PTR generations+24
  00071	ff c0		 inc	 eax
  00073	33 db		 xor	 ebx, ebx
  00075	89 05 1c 00 00
	00		 mov	 DWORD PTR generations+28, eax
  0007b	3b c1		 cmp	 eax, ecx
  0007d	7e 33		 jle	 SHORT $LN1@PyObject_G@3
  0007f	39 1d 00 00 00
	00		 cmp	 DWORD PTR enabled, ebx
  00085	74 2b		 je	 SHORT $LN1@PyObject_G@3
  00087	85 c9		 test	 ecx, ecx
  00089	74 27		 je	 SHORT $LN1@PyObject_G@3
  0008b	39 1d 00 00 00
	00		 cmp	 DWORD PTR collecting, ebx
  00091	75 1f		 jne	 SHORT $LN1@PyObject_G@3
  00093	e8 00 00 00 00	 call	 PyErr_Occurred
  00098	48 85 c0	 test	 rax, rax
  0009b	75 15		 jne	 SHORT $LN1@PyObject_G@3

; 1636 :         collecting = 1;

  0009d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR collecting, 1

; 1637 :         collect_generations();

  000a7	e8 00 00 00 00	 call	 collect_generations

; 1638 :         collecting = 0;

  000ac	89 1d 00 00 00
	00		 mov	 DWORD PTR collecting, ebx
$LN1@PyObject_G@3:

; 1639 :     }
; 1640 :     op = FROM_GC(g);

  000b2	e8 00 00 00 00	 call	 _Py_PXCTX
  000b7	85 c0		 test	 eax, eax
  000b9	75 04		 jne	 SHORT $LN8@PyObject_G@3
  000bb	48 8d 5f 18	 lea	 rbx, QWORD PTR [rdi+24]
$LN8@PyObject_G@3:

; 1641 :     return op;

  000bf	48 8b c3	 mov	 rax, rbx
  000c2	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 1642 : }

  000c7	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000cb	5b		 pop	 rbx
  000cc	c3		 ret	 0
_PyObject_GC_Malloc ENDP
_TEXT	ENDS
PUBLIC	_PyObject_GC_New
EXTRN	_PxObject_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_GC_New DD imagerel $LN5
	DD	imagerel $LN5+62
	DD	imagerel $unwind$_PyObject_GC_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_GC_New DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyObject_GC_New
_TEXT	SEGMENT
tp$ = 48
_PyObject_GC_New PROC					; COMDAT

; 1646 : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 1647 :     PyObject *op;
; 1648 :     Px_RETURN(_PxObject_New(tp))

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 0d		 je	 SHORT $LN2@PyObject_G@4
  00012	48 8b cb	 mov	 rcx, rbx

; 1652 :     return op;
; 1653 : }

  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5b		 pop	 rbx
  0001a	e9 00 00 00 00	 jmp	 _PxObject_New
$LN2@PyObject_G@4:

; 1649 :     op = _PyObject_GC_Malloc(_PyObject_SIZE(tp));

  0001f	48 8b 4b 78	 mov	 rcx, QWORD PTR [rbx+120]
  00023	e8 00 00 00 00	 call	 _PyObject_GC_Malloc

; 1650 :     if (op != NULL)

  00028	48 85 c0	 test	 rax, rax
  0002b	74 0b		 je	 SHORT $LN1@PyObject_G@4

; 1651 :         op = PyObject_INIT(op, tp);

  0002d	48 8b d3	 mov	 rdx, rbx
  00030	48 8b c8	 mov	 rcx, rax
  00033	e8 00 00 00 00	 call	 PyObject_INIT
$LN1@PyObject_G@4:

; 1652 :     return op;
; 1653 : }

  00038	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003c	5b		 pop	 rbx
  0003d	c3		 ret	 0
_PyObject_GC_New ENDP
_TEXT	ENDS
PUBLIC	_PyObject_GC_NewVar
EXTRN	_PxObject_NewVar:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_GC_NewVar DD imagerel $LN5
	DD	imagerel $LN5+105
	DD	imagerel $unwind$_PyObject_GC_NewVar
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_GC_NewVar DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyObject_GC_NewVar
_TEXT	SEGMENT
tp$ = 48
nitems$ = 56
_PyObject_GC_NewVar PROC				; COMDAT

; 1657 : {

$LN5:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fa	 mov	 rdi, rdx
  0000d	48 8b d9	 mov	 rbx, rcx

; 1658 :     PyVarObject *op;
; 1659 :     size_t size;
; 1660 :     Px_RETURN(_PxObject_NewVar(tp, nitems))

  00010	e8 00 00 00 00	 call	 _Py_PXCTX
  00015	85 c0		 test	 eax, eax
  00017	74 15		 je	 SHORT $LN2@PyObject_G@5
  00019	48 8b d7	 mov	 rdx, rdi
  0001c	48 8b cb	 mov	 rcx, rbx

; 1665 :     return op;
; 1666 : }

  0001f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00024	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00028	5f		 pop	 rdi
  00029	e9 00 00 00 00	 jmp	 _PxObject_NewVar
$LN2@PyObject_G@5:

; 1661 :     size = _PyObject_VAR_SIZE(tp, nitems);

  0002e	48 8b 8b 80 00
	00 00		 mov	 rcx, QWORD PTR [rbx+128]
  00035	48 8b 43 78	 mov	 rax, QWORD PTR [rbx+120]
  00039	48 0f af cf	 imul	 rcx, rdi
  0003d	48 8d 4c 01 07	 lea	 rcx, QWORD PTR [rcx+rax+7]
  00042	48 83 e1 f8	 and	 rcx, -8

; 1662 :     op = (PyVarObject *) _PyObject_GC_Malloc(size);

  00046	e8 00 00 00 00	 call	 _PyObject_GC_Malloc

; 1663 :     if (op != NULL)

  0004b	48 85 c0	 test	 rax, rax
  0004e	74 0e		 je	 SHORT $LN1@PyObject_G@5

; 1664 :         op = PyObject_INIT_VAR(op, tp, nitems);

  00050	4c 8b c7	 mov	 r8, rdi
  00053	48 8b d3	 mov	 rdx, rbx
  00056	48 8b c8	 mov	 rcx, rax
  00059	e8 00 00 00 00	 call	 PyObject_INIT_VAR
$LN1@PyObject_G@5:

; 1665 :     return op;
; 1666 : }

  0005e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00063	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00067	5f		 pop	 rdi
  00068	c3		 ret	 0
_PyObject_GC_NewVar ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@DEPLCJO@_PyObject_GC_Resize?$AA@	; `string'
PUBLIC	_PyObject_GC_Resize
EXTRN	PyObject_Realloc:PROC
EXTRN	_PxObject_Resize:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_GC_Resize DD imagerel $LN19
	DD	imagerel $LN19+298
	DD	imagerel $unwind$_PyObject_GC_Resize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_GC_Resize DD 08bd01H
	DD	0974bdH
	DD	08548dH
	DD	0a340aH
	DD	06006520aH
xdata	ENDS
;	COMDAT ??_C@_0BE@DEPLCJO@_PyObject_GC_Resize?$AA@
CONST	SEGMENT
??_C@_0BE@DEPLCJO@_PyObject_GC_Resize?$AA@ DB '_PyObject_GC_Resize', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyObject_GC_Resize
_TEXT	SEGMENT
op$ = 64
nitems$ = 72
_PyObject_GC_Resize PROC				; COMDAT

; 1670 : {

$LN19:
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f2	 mov	 rsi, rdx
  0000d	48 8b d9	 mov	 rbx, rcx

; 1671 :     PyGC_Head *g;
; 1672 :     size_t basicsize;
; 1673 :     PyPx_GUARD_OBJ(op);

  00010	e8 00 00 00 00	 call	 _Py_PXCTX
  00015	4c 8b cb	 mov	 r9, rbx
  00018	41 b8 89 06 00
	00		 mov	 r8d, 1673		; 00000689H
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@DEPLCJO@_PyObject_GC_Resize?$AA@
  0002c	85 c0		 test	 eax, eax
  0002e	74 0a		 je	 SHORT $LN5@PyObject_G@6
  00030	c7 44 24 20 40
	00 00 00	 mov	 DWORD PTR [rsp+32], 64	; 00000040H
  00038	eb 08		 jmp	 SHORT $LN17@PyObject_G@6
$LN5@PyObject_G@6:
  0003a	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR [rsp+32], 32	; 00000020H
$LN17@PyObject_G@6:
  00042	e8 00 00 00 00	 call	 _PyParallel_Guard

; 1674 :     Px_RETURN_OP(op, _PxObject_Resize(op, nitems))

  00047	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@DEPLCJO@_PyObject_GC_Resize?$AA@
  00055	4c 8b cb	 mov	 r9, rbx
  00058	41 b8 8a 06 00
	00		 mov	 r8d, 1674		; 0000068aH
  0005e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00066	e8 00 00 00 00	 call	 _PyParallel_Guard
  0006b	85 c0		 test	 eax, eax
  0006d	74 15		 je	 SHORT $LN3@PyObject_G@6
  0006f	48 8b d6	 mov	 rdx, rsi
  00072	48 8b cb	 mov	 rcx, rbx

; 1686 : }

  00075	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0007a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0007e	5e		 pop	 rsi
  0007f	e9 00 00 00 00	 jmp	 _PxObject_Resize
$LN3@PyObject_G@6:

; 1675 : 
; 1676 :     basicsize = _PyObject_VAR_SIZE(Py_TYPE(op), nitems);

  00084	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00088	48 89 6c 24 40	 mov	 QWORD PTR [rsp+64], rbp

; 1677 :     g = AS_GC(op);

  0008d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00094	4c 8b 80 80 00
	00 00		 mov	 r8, QWORD PTR [rax+128]
  0009b	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  0009f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@DEPLCJO@_PyObject_GC_Resize?$AA@
  000a6	4c 0f af c6	 imul	 r8, rsi
  000aa	49 8d 6c 00 07	 lea	 rbp, QWORD PTR [r8+rax+7]
  000af	4c 8b cb	 mov	 r9, rbx
  000b2	41 b8 8d 06 00
	00		 mov	 r8d, 1677		; 0000068dH
  000b8	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  000bd	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c5	48 83 e5 f8	 and	 rbp, -8
  000c9	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ce	33 ff		 xor	 edi, edi
  000d0	8b cf		 mov	 ecx, edi
  000d2	85 c0		 test	 eax, eax
  000d4	75 04		 jne	 SHORT $LN12@PyObject_G@6
  000d6	48 8d 4b e8	 lea	 rcx, QWORD PTR [rbx-24]
$LN12@PyObject_G@6:

; 1678 :     if (basicsize > PY_SSIZE_T_MAX - sizeof(PyGC_Head))

  000da	48 b8 e7 ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775783 ; 7fffffffffffffe7H
  000e4	48 3b e8	 cmp	 rbp, rax

; 1679 :         return (PyVarObject *)PyErr_NoMemory();

  000e7	77 11		 ja	 SHORT $LN18@PyObject_G@6

; 1680 :     g = (PyGC_Head *)PyObject_REALLOC(g,  sizeof(PyGC_Head) + basicsize);

  000e9	48 8d 55 18	 lea	 rdx, QWORD PTR [rbp+24]
  000ed	e8 00 00 00 00	 call	 PyObject_Realloc
  000f2	48 8b d8	 mov	 rbx, rax

; 1681 :     if (g == NULL)

  000f5	48 85 c0	 test	 rax, rax
  000f8	75 07		 jne	 SHORT $LN1@PyObject_G@6
$LN18@PyObject_G@6:

; 1682 :         return (PyVarObject *)PyErr_NoMemory();

  000fa	e8 00 00 00 00	 call	 PyErr_NoMemory
  000ff	eb 14		 jmp	 SHORT $LN16@PyObject_G@6
$LN1@PyObject_G@6:

; 1683 :     op = (PyVarObject *) FROM_GC(g);

  00101	e8 00 00 00 00	 call	 _Py_PXCTX
  00106	85 c0		 test	 eax, eax
  00108	75 04		 jne	 SHORT $LN14@PyObject_G@6
  0010a	48 8d 7b 18	 lea	 rdi, QWORD PTR [rbx+24]
$LN14@PyObject_G@6:

; 1684 :     Py_SIZE(op) = nitems;

  0010e	48 89 77 60	 mov	 QWORD PTR [rdi+96], rsi

; 1685 :     return op;

  00112	48 8b c7	 mov	 rax, rdi
$LN16@PyObject_G@6:

; 1686 : }

  00115	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  0011a	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  0011f	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00124	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00128	5e		 pop	 rsi
  00129	c3		 ret	 0
_PyObject_GC_Resize ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@LMPGGOJ@PyObject_GC_Del?$AA@		; `string'
PUBLIC	PyObject_GC_Del
EXTRN	PyObject_Free:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_GC_Del DD imagerel $LN12
	DD	imagerel $LN12+287
	DD	imagerel $unwind$PyObject_GC_Del
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_GC_Del DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT ??_C@_0BA@LMPGGOJ@PyObject_GC_Del?$AA@
CONST	SEGMENT
??_C@_0BA@LMPGGOJ@PyObject_GC_Del?$AA@ DB 'PyObject_GC_Del', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyObject_GC_Del
_TEXT	SEGMENT
op$ = 64
PyObject_GC_Del PROC					; COMDAT

; 1690 : {

$LN12:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b f1	 mov	 rsi, rcx

; 1691 :     PyGC_Head *g;
; 1692 :     Py_GUARD_OBJ(op);

  00012	4c 8b c9	 mov	 r9, rcx
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@LMPGGOJ@PyObject_GC_Del?$AA@
  00023	41 b8 9c 06 00
	00		 mov	 r8d, 1692		; 0000069cH
  00029	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR [rsp+32], 32	; 00000020H
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard

; 1693 :     Py_GUARD

  00036	e8 00 00 00 00	 call	 _Py_PXCTX
  0003b	85 c0		 test	 eax, eax
  0003d	74 1c		 je	 SHORT $LN3@PyObject_G@7
  0003f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@LMPGGOJ@PyObject_GC_Del?$AA@
  0004d	45 33 c9	 xor	 r9d, r9d
  00050	41 b8 9d 06 00
	00		 mov	 r8d, 1693		; 0000069dH
  00056	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@PyObject_G@7:

; 1694 :     g = AS_GC(op);

  0005b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@LMPGGOJ@PyObject_GC_Del?$AA@
  00069	4c 8b ce	 mov	 r9, rsi
  0006c	41 b8 9e 06 00
	00		 mov	 r8d, 1694		; 0000069eH
  00072	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0007a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0007f	33 db		 xor	 ebx, ebx
  00081	8b fb		 mov	 edi, ebx
  00083	85 c0		 test	 eax, eax
  00085	75 04		 jne	 SHORT $LN7@PyObject_G@7
  00087	48 8d 7e e8	 lea	 rdi, QWORD PTR [rsi-24]
$LN7@PyObject_G@7:

; 1695 :     if (IS_TRACKED(op))

  0008b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00092	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@LMPGGOJ@PyObject_GC_Del?$AA@
  00099	4c 8b ce	 mov	 r9, rsi
  0009c	41 b8 9f 06 00
	00		 mov	 r8d, 1695		; 0000069fH
  000a2	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000aa	e8 00 00 00 00	 call	 _PyParallel_Guard
  000af	85 c0		 test	 eax, eax
  000b1	75 43		 jne	 SHORT $LN2@PyObject_G@7
  000b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  000ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@LMPGGOJ@PyObject_GC_Del?$AA@
  000c1	4c 8b ce	 mov	 r9, rsi
  000c4	41 b8 9f 06 00
	00		 mov	 r8d, 1695		; 0000069fH
  000ca	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d2	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d7	85 c0		 test	 eax, eax
  000d9	48 8b c3	 mov	 rax, rbx
  000dc	75 04		 jne	 SHORT $LN9@PyObject_G@7
  000de	48 8d 46 e8	 lea	 rax, QWORD PTR [rsi-24]
$LN9@PyObject_G@7:
  000e2	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  000e7	0f 95 c3	 setne	 bl
  000ea	85 db		 test	 ebx, ebx
  000ec	74 08		 je	 SHORT $LN2@PyObject_G@7

; 1696 :         gc_list_remove(g);

  000ee	48 8b cf	 mov	 rcx, rdi
  000f1	e8 00 00 00 00	 call	 gc_list_remove
$LN2@PyObject_G@7:

; 1697 :     if (generations[0].count > 0) {

  000f6	8b 05 1c 00 00
	00		 mov	 eax, DWORD PTR generations+28
  000fc	85 c0		 test	 eax, eax
  000fe	7e 08		 jle	 SHORT $LN1@PyObject_G@7

; 1698 :         generations[0].count--;

  00100	ff c8		 dec	 eax
  00102	89 05 1c 00 00
	00		 mov	 DWORD PTR generations+28, eax
$LN1@PyObject_G@7:

; 1699 :     }
; 1700 :     PyObject_FREE(g);

  00108	48 8b cf	 mov	 rcx, rdi

; 1701 : }

  0010b	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00110	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00115	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00119	5f		 pop	 rdi
  0011a	e9 00 00 00 00	 jmp	 PyObject_Free
PyObject_GC_Del ENDP
_TEXT	ENDS
END
