; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BD@LEGJMDGP@NotImplementedType?$AA@	; `string'
PUBLIC	??_C@_08BCACFJCN@NoneType?$AA@			; `string'
PUBLIC	??_C@_07FPPEEAND@__dir__?$AA@			; `string'
PUBLIC	??_C@_0BF@LPKCECDC@__isabstractmethod__?$AA@	; `string'
PUBLIC	??_C@_02EEKDKGMJ@?$DO?$DN?$AA@			; `string'
PUBLIC	??_C@_01PPODPGHN@?$DO?$AA@			; `string'
PUBLIC	??_C@_02FDNJECIE@?$CB?$DN?$AA@			; `string'
PUBLIC	??_C@_02EGOFBIJA@?$DN?$DN?$AA@			; `string'
PUBLIC	??_C@_02EHCHHCKH@?$DM?$DN?$AA@			; `string'
PUBLIC	??_C@_01MNNFJEPP@?$DM?$AA@			; `string'
PUBLIC	??_C@_09PAJHGGFL@__bytes__?$AA@			; `string'
PUBLIC	_Py_SwappedOp
PUBLIC	_PyNone_Type
PUBLIC	_Py_NoneStruct
PUBLIC	_PyNotImplemented_Type
PUBLIC	_Py_NotImplementedStruct
PUBLIC	_PyCapsule_hack
PUBLIC	_Py_abstract_hack
PUBLIC	_PyTrash_delete_nesting
PUBLIC	_PyTrash_delete_later
EXTRN	PyObject_Size:PROC
EXTRN	PyCapsule_Type:BYTE
EXTRN	PyType_Type:BYTE
_DATA	SEGMENT
COMM	_Py_HashSecret:BYTE:010H
_DATA	ENDS
_BSS	SEGMENT
_PyTrash_delete_nesting DD 01H DUP (?)
	ALIGN	8

_PyTrash_delete_later DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0BD@LEGJMDGP@NotImplementedType?$AA@
CONST	SEGMENT
??_C@_0BD@LEGJMDGP@NotImplementedType?$AA@ DB 'NotImplementedType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08BCACFJCN@NoneType?$AA@
CONST	SEGMENT
??_C@_08BCACFJCN@NoneType?$AA@ DB 'NoneType', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07FPPEEAND@__dir__?$AA@
CONST	SEGMENT
??_C@_07FPPEEAND@__dir__?$AA@ DB '__dir__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LPKCECDC@__isabstractmethod__?$AA@
CONST	SEGMENT
??_C@_0BF@LPKCECDC@__isabstractmethod__?$AA@ DB '__isabstractmethod__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02EEKDKGMJ@?$DO?$DN?$AA@
CONST	SEGMENT
??_C@_02EEKDKGMJ@?$DO?$DN?$AA@ DB '>=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01PPODPGHN@?$DO?$AA@
CONST	SEGMENT
??_C@_01PPODPGHN@?$DO?$AA@ DB '>', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FDNJECIE@?$CB?$DN?$AA@
CONST	SEGMENT
??_C@_02FDNJECIE@?$CB?$DN?$AA@ DB '!=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EGOFBIJA@?$DN?$DN?$AA@
CONST	SEGMENT
??_C@_02EGOFBIJA@?$DN?$DN?$AA@ DB '==', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EHCHHCKH@?$DM?$DN?$AA@
CONST	SEGMENT
??_C@_02EHCHHCKH@?$DM?$DN?$AA@ DB '<=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01MNNFJEPP@?$DM?$AA@
CONST	SEGMENT
??_C@_01MNNFJEPP@?$DM?$AA@ DB '<', 00H			; `string'
CONST	ENDS
_DATA	SEGMENT
_Py_SwappedOp DD 04H
	DD	05H
	DD	02H
	DD	03H
	DD	00H
	DD	01H
opstrings DQ	FLAT:??_C@_01MNNFJEPP@?$DM?$AA@
	DQ	FLAT:??_C@_02EHCHHCKH@?$DM?$DN?$AA@
	DQ	FLAT:??_C@_02EGOFBIJA@?$DN?$DN?$AA@
	DQ	FLAT:??_C@_02FDNJECIE@?$CB?$DN?$AA@
	DQ	FLAT:??_C@_01PPODPGHN@?$DO?$AA@
	DQ	FLAT:??_C@_02EEKDKGMJ@?$DO?$DN?$AA@
_PyCapsule_hack DQ FLAT:PyCapsule_Type
none_as_number DQ 0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:none_bool
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_PyNone_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_08BCACFJCN@NoneType?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:none_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:none_repr
	DQ	FLAT:none_as_number
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:none_new
	ORG $+72
_Py_NoneStruct DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:_PyNone_Type
_PyNotImplemented_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BD@LEGJMDGP@NotImplementedType?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:none_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:NotImplemented_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:notimplemented_new
	ORG $+72
_Py_NotImplementedStruct DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:_PyNotImplemented_Type
_Py_abstract_hack DQ FLAT:PyObject_Size
_DATA	ENDS
_TLS	SEGMENT
?PyId___dir__@?1??_dir_object@@9@9 DQ 0000000000000000H	; `_dir_object'::`2'::PyId___dir__
	DQ	FLAT:??_C@_07FPPEEAND@__dir__?$AA@
	DQ	0000000000000000H
?PyId___isabstractmethod__@?1??_PyObject_IsAbstract@@9@9 DQ 0000000000000000H ; `_PyObject_IsAbstract'::`2'::PyId___isabstractmethod__
	DQ	FLAT:??_C@_0BF@LPKCECDC@__isabstractmethod__?$AA@
	DQ	0000000000000000H
?PyId___bytes__@?1??PyObject_Bytes@@9@9 DQ 0000000000000000H ; `PyObject_Bytes'::`2'::PyId___bytes__
	DQ	FLAT:??_C@_09PAJHGGFL@__bytes__?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_09PAJHGGFL@__bytes__?$AA@
CONST	SEGMENT
??_C@_09PAJHGGFL@__bytes__?$AA@ DB '__bytes__', 00H	; `string'
CONST	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\include\objimpl.h
_TEXT	ENDS
;	COMDAT _PyObject_InitHead
_TEXT	SEGMENT
op$ = 8
_PyObject_InitHead PROC					; COMDAT

; 216  :     assert(Py_TYPE(op));
; 217  :     op->is_px = _Py_NOT_PARALLEL;

  00000	48 ba 78 56 ef
	be 34 12 ad de	 mov	 rdx, -2401243008567650696 ; dead1234beef5678H

; 218  :     op->px    = _Py_NOT_PARALLEL;
; 219  :     op->slist_entry.Next = NULL;

  0000a	33 c0		 xor	 eax, eax

; 220  :     op->px_flags  = Py_PXFLAGS_ISPY;

  0000c	48 c7 41 20 01
	00 00 00	 mov	 QWORD PTR [rcx+32], 1
  00014	48 89 11	 mov	 QWORD PTR [rcx], rdx
  00017	48 89 51 08	 mov	 QWORD PTR [rcx+8], rdx
  0001b	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 221  :     op->srw_lock  = NULL;

  0001f	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 222  :     op->event     = NULL;

  00023	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 223  :     op->orig_type = NULL;

  00027	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 224  : #ifdef Py_TRACE_REFS
; 225  :     op->_ob_next = NULL;
; 226  :     op->_ob_prev = NULL;
; 227  : #else
; 228  :     op->_ob_next = _Py_NOT_PARALLEL;

  0002b	48 89 51 40	 mov	 QWORD PTR [rcx+64], rdx

; 229  :     op->_ob_prev = _Py_NOT_PARALLEL;

  0002f	48 89 51 48	 mov	 QWORD PTR [rcx+72], rdx

; 230  : #endif
; 231  : }

  00033	c3		 ret	 0
_PyObject_InitHead ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@JKHPLOII@PyObject_INIT?$AA@		; `string'
PUBLIC	??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@ ; `string'
EXTRN	_Px_NewReference:PROC
EXTRN	_PxObject_Init:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_INIT DD imagerel PyObject_INIT
	DD	imagerel PyObject_INIT+185
	DD	imagerel $unwind$PyObject_INIT
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_INIT DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0O@JKHPLOII@PyObject_INIT?$AA@
CONST	SEGMENT
??_C@_0O@JKHPLOII@PyObject_INIT?$AA@ DB 'PyObject_INIT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@
CONST	SEGMENT
??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@ DB 'c:\src\pypa'
	DB	'rallel\include\objimpl.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyObject_INIT
_TEXT	SEGMENT
op$ = 64
tp$ = 72
PyObject_INIT PROC					; COMDAT

; 236  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fa	 mov	 rdi, rdx
  0000d	48 8b d9	 mov	 rbx, rcx

; 237  :     Px_RETURN(_PxObject_Init(op, tp))

  00010	e8 00 00 00 00	 call	 _Py_PXCTX
  00015	85 c0		 test	 eax, eax
  00017	74 15		 je	 SHORT $LN1@PyObject_I
  00019	48 8b d7	 mov	 rdx, rdi
  0001c	48 8b cb	 mov	 rcx, rbx

; 242  : }

  0001f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00024	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00028	5f		 pop	 rdi
  00029	e9 00 00 00 00	 jmp	 _PxObject_Init
$LN1@PyObject_I:

; 238  :     Py_TYPE(op) = tp;
; 239  :     _PyObject_InitHead(op);

  0002e	48 b9 78 56 ef
	be 34 12 ad de	 mov	 rcx, -2401243008567650696 ; dead1234beef5678H
  00038	33 c0		 xor	 eax, eax

; 240  :     _Py_NewReference(op);

  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@
  00041	48 89 0b	 mov	 QWORD PTR [rbx], rcx
  00044	48 89 4b 08	 mov	 QWORD PTR [rbx+8], rcx
  00048	48 89 4b 40	 mov	 QWORD PTR [rbx+64], rcx
  0004c	48 89 4b 48	 mov	 QWORD PTR [rbx+72], rcx
  00050	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@JKHPLOII@PyObject_INIT?$AA@
  00057	4c 8b cb	 mov	 r9, rbx
  0005a	41 b8 f0 00 00
	00		 mov	 r8d, 240		; 000000f0H
  00060	48 89 7b 58	 mov	 QWORD PTR [rbx+88], rdi
  00064	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax
  00068	48 c7 43 20 01
	00 00 00	 mov	 QWORD PTR [rbx+32], 1
  00070	48 89 43 28	 mov	 QWORD PTR [rbx+40], rax
  00074	48 89 43 30	 mov	 QWORD PTR [rbx+48], rax
  00078	48 89 43 38	 mov	 QWORD PTR [rbx+56], rax
  0007c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00084	e8 00 00 00 00	 call	 _PyParallel_Guard
  00089	85 c0		 test	 eax, eax
  0008b	74 16		 je	 SHORT $LN4@PyObject_I
  0008d	48 8b cb	 mov	 rcx, rbx
  00090	e8 00 00 00 00	 call	 _Px_NewReference

; 241  :     return op;

  00095	48 8b c3	 mov	 rax, rbx

; 242  : }

  00098	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0009d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a1	5f		 pop	 rdi
  000a2	c3		 ret	 0
$LN4@PyObject_I:

; 240  :     _Py_NewReference(op);

  000a3	48 c7 43 50 01
	00 00 00	 mov	 QWORD PTR [rbx+80], 1

; 241  :     return op;

  000ab	48 8b c3	 mov	 rax, rbx

; 242  : }

  000ae	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000b3	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b7	5f		 pop	 rdi
  000b8	c3		 ret	 0
PyObject_INIT ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@PCKAICOI@PyObject_INIT_VAR?$AA@	; `string'
EXTRN	_PxObject_InitVar:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_INIT_VAR DD imagerel PyObject_INIT_VAR
	DD	imagerel PyObject_INIT_VAR+215
	DD	imagerel $unwind$PyObject_INIT_VAR
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_INIT_VAR DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT ??_C@_0BC@PCKAICOI@PyObject_INIT_VAR?$AA@
CONST	SEGMENT
??_C@_0BC@PCKAICOI@PyObject_INIT_VAR?$AA@ DB 'PyObject_INIT_VAR', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyObject_INIT_VAR
_TEXT	SEGMENT
op$ = 64
tp$ = 72
n$ = 80
PyObject_INIT_VAR PROC					; COMDAT

; 247  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 248  :     Px_RETURN(_PxObject_InitVar(op, tp, n))

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1d		 je	 SHORT $LN1@PyObject_I@2
  00021	4c 8b c7	 mov	 r8, rdi
  00024	48 8b d6	 mov	 rdx, rsi
  00027	48 8b cb	 mov	 rcx, rbx

; 254  : }

  0002a	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0002f	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00034	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00038	5f		 pop	 rdi
  00039	e9 00 00 00 00	 jmp	 _PxObject_InitVar
$LN1@PyObject_I@2:

; 249  :     Py_SIZE(op) = n;
; 250  :     Py_TYPE(op) = tp;
; 251  :     _PyObject_InitHead((PyObject *)op);

  0003e	48 b9 78 56 ef
	be 34 12 ad de	 mov	 rcx, -2401243008567650696 ; dead1234beef5678H
  00048	33 c0		 xor	 eax, eax

; 252  :     _Py_NewReference((PyObject *)op);

  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@
  00051	48 89 0b	 mov	 QWORD PTR [rbx], rcx
  00054	48 89 4b 08	 mov	 QWORD PTR [rbx+8], rcx
  00058	48 89 4b 40	 mov	 QWORD PTR [rbx+64], rcx
  0005c	48 89 4b 48	 mov	 QWORD PTR [rbx+72], rcx
  00060	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@PCKAICOI@PyObject_INIT_VAR?$AA@
  00067	4c 8b cb	 mov	 r9, rbx
  0006a	41 b8 fc 00 00
	00		 mov	 r8d, 252		; 000000fcH
  00070	48 89 7b 60	 mov	 QWORD PTR [rbx+96], rdi
  00074	48 89 73 58	 mov	 QWORD PTR [rbx+88], rsi
  00078	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax
  0007c	48 c7 43 20 01
	00 00 00	 mov	 QWORD PTR [rbx+32], 1
  00084	48 89 43 28	 mov	 QWORD PTR [rbx+40], rax
  00088	48 89 43 30	 mov	 QWORD PTR [rbx+48], rax
  0008c	48 89 43 38	 mov	 QWORD PTR [rbx+56], rax
  00090	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00098	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009d	85 c0		 test	 eax, eax
  0009f	74 1b		 je	 SHORT $LN4@PyObject_I@2
  000a1	48 8b cb	 mov	 rcx, rbx
  000a4	e8 00 00 00 00	 call	 _Px_NewReference

; 253  :     return op;

  000a9	48 8b c3	 mov	 rax, rbx

; 254  : }

  000ac	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000b1	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000b6	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ba	5f		 pop	 rdi
  000bb	c3		 ret	 0
$LN4@PyObject_I@2:
  000bc	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000c1	48 c7 43 50 01
	00 00 00	 mov	 QWORD PTR [rbx+80], 1
  000c9	48 8b c3	 mov	 rax, rbx
  000cc	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000d1	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d5	5f		 pop	 rdi
  000d6	c3		 ret	 0
PyObject_INIT_VAR ENDP
_TEXT	ENDS
PUBLIC	??_C@_09FECHNEPL@Py_IncRef?$AA@			; `string'
PUBLIC	??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@ ; `string'
PUBLIC	Py_IncRef
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$Py_IncRef DD imagerel $LN12
	DD	imagerel $LN12+155
	DD	imagerel $unwind$Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_09FECHNEPL@Py_IncRef?$AA@
CONST	SEGMENT
??_C@_09FECHNEPL@Py_IncRef?$AA@ DB 'Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
CONST	SEGMENT
??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@ DB '..\Objects\object.c', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\object.c
CONST	ENDS
;	COMDAT Py_IncRef
_TEXT	SEGMENT
o$ = 64
Py_IncRef PROC						; COMDAT

; 232  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 233  :     Py_GUARD_OBJ(o);

  00009	4c 8b c9	 mov	 r9, rcx
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09FECHNEPL@Py_IncRef?$AA@
  0001a	41 b8 e9 00 00
	00		 mov	 r8d, 233		; 000000e9H
  00020	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR [rsp+32], 32	; 00000020H
  00028	e8 00 00 00 00	 call	 _PyParallel_Guard

; 234  :     Px_VOID_OP(o)

  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09FECHNEPL@Py_IncRef?$AA@
  0003b	4c 8b cb	 mov	 r9, rbx
  0003e	41 b8 ea 00 00
	00		 mov	 r8d, 234		; 000000eaH
  00044	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0004c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00051	85 c0		 test	 eax, eax
  00053	75 40		 jne	 SHORT $LN2@Py_IncRef@2

; 235  :     Py_XINCREF(o);

  00055	48 85 db	 test	 rbx, rbx
  00058	74 3b		 je	 SHORT $LN2@Py_IncRef@2
  0005a	e8 00 00 00 00	 call	 _Py_PXCTX
  0005f	85 c0		 test	 eax, eax
  00061	75 32		 jne	 SHORT $LN2@Py_IncRef@2
  00063	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0006a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00071	4c 8b cb	 mov	 r9, rbx
  00074	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0007a	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00082	e8 00 00 00 00	 call	 _PyParallel_Guard
  00087	85 c0		 test	 eax, eax
  00089	75 06		 jne	 SHORT $LN8@Py_IncRef@2
  0008b	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0008f	74 04		 je	 SHORT $LN2@Py_IncRef@2
$LN8@Py_IncRef@2:
  00091	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef@2:

; 236  : }

  00095	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00099	5b		 pop	 rbx
  0009a	c3		 ret	 0
Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_09FPDHEFPI@Py_DecRef?$AA@			; `string'
PUBLIC	Py_DecRef
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$Py_DecRef DD imagerel $LN19
	DD	imagerel $LN19+204
	DD	imagerel $unwind$Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_09FPDHEFPI@Py_DecRef?$AA@
CONST	SEGMENT
??_C@_09FPDHEFPI@Py_DecRef?$AA@ DB 'Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\object.c
CONST	ENDS
;	COMDAT Py_DecRef
_TEXT	SEGMENT
o$ = 64
Py_DecRef PROC						; COMDAT

; 240  : {

$LN19:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 241  :     Py_GUARD_OBJ(o);

  00009	4c 8b c9	 mov	 r9, rcx
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09FPDHEFPI@Py_DecRef?$AA@
  0001a	41 b8 f1 00 00
	00		 mov	 r8d, 241		; 000000f1H
  00020	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR [rsp+32], 32	; 00000020H
  00028	e8 00 00 00 00	 call	 _PyParallel_Guard

; 242  :     Px_VOID_OP(o)

  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09FPDHEFPI@Py_DecRef?$AA@
  0003b	4c 8b cb	 mov	 r9, rbx
  0003e	41 b8 f2 00 00
	00		 mov	 r8d, 242		; 000000f2H
  00044	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0004c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00051	85 c0		 test	 eax, eax
  00053	75 71		 jne	 SHORT $LN2@Py_DecRef@2

; 243  :     Py_XDECREF(o);

  00055	48 85 db	 test	 rbx, rbx
  00058	74 6c		 je	 SHORT $LN2@Py_DecRef@2
  0005a	e8 00 00 00 00	 call	 _Py_PXCTX
  0005f	85 c0		 test	 eax, eax
  00061	75 63		 jne	 SHORT $LN2@Py_DecRef@2
  00063	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00067	a8 20		 test	 al, 32			; 00000020H
  00069	75 53		 jne	 SHORT $LN12@Py_DecRef@2
  0006b	84 c0		 test	 al, al
  0006d	78 4f		 js	 SHORT $LN12@Py_DecRef@2
  0006f	a8 02		 test	 al, 2
  00071	75 53		 jne	 SHORT $LN2@Py_DecRef@2
  00073	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00077	75 4d		 jne	 SHORT $LN2@Py_DecRef@2
  00079	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00080	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00087	4c 8b cb	 mov	 r9, rbx
  0008a	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00090	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00098	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009d	48 8b cb	 mov	 rcx, rbx
  000a0	85 c0		 test	 eax, eax
  000a2	74 0a		 je	 SHORT $LN17@Py_DecRef@2

; 244  : }

  000a4	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a8	5b		 pop	 rbx
  000a9	e9 00 00 00 00	 jmp	 _Px_Dealloc

; 243  :     Py_XDECREF(o);

$LN17@Py_DecRef@2:
  000ae	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 244  : }

  000b2	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b6	5b		 pop	 rbx
  000b7	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]

; 243  :     Py_XDECREF(o);

$LN12@Py_DecRef@2:
  000be	48 8b cb	 mov	 rcx, rbx
  000c1	e8 00 00 00 00	 call	 Px_DecRef
$LN2@Py_DecRef@2:

; 244  : }

  000c6	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ca	5b		 pop	 rbx
  000cb	c3		 ret	 0
Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@JHIEHDPE@PyObject_Init?$AA@		; `string'
PUBLIC	PyObject_Init
EXTRN	PyErr_NoMemory:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\objimpl.h
pdata	SEGMENT
$pdata$PyObject_Init DD imagerel $LN9
	DD	imagerel $LN9+241
	DD	imagerel $unwind$PyObject_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_Init DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0O@JHIEHDPE@PyObject_Init?$AA@
CONST	SEGMENT
??_C@_0O@JHIEHDPE@PyObject_Init?$AA@ DB 'PyObject_Init', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\object.c
CONST	ENDS
;	COMDAT PyObject_Init
_TEXT	SEGMENT
op$ = 64
tp$ = 72
PyObject_Init PROC					; COMDAT

; 248  : {

$LN9:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fa	 mov	 rdi, rdx
  0000d	48 8b d9	 mov	 rbx, rcx

; 249  :     if (op == NULL)

  00010	48 85 c9	 test	 rcx, rcx
  00013	75 0f		 jne	 SHORT $LN2@PyObject_I@3

; 258  : }

  00015	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0001a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0001e	5f		 pop	 rdi
  0001f	e9 00 00 00 00	 jmp	 PyErr_NoMemory
$LN2@PyObject_I@3:

; 250  :         return PyErr_NoMemory();
; 251  :     Px_RETURN(_PxObject_Init(op, tp))

  00024	e8 00 00 00 00	 call	 _Py_PXCTX
  00029	85 c0		 test	 eax, eax
  0002b	74 15		 je	 SHORT $LN1@PyObject_I@3
  0002d	48 8b d7	 mov	 rdx, rdi
  00030	48 8b cb	 mov	 rcx, rbx

; 258  : }

  00033	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00038	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0003c	5f		 pop	 rdi
  0003d	e9 00 00 00 00	 jmp	 _PxObject_Init
$LN1@PyObject_I@3:

; 252  :     Py_GUARD_MEM(op);

  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@JHIEHDPE@PyObject_Init?$AA@
  00050	4c 8b cb	 mov	 r9, rbx
  00053	41 b8 fc 00 00
	00		 mov	 r8d, 252		; 000000fcH
  00059	c7 44 24 20 00
	02 00 00	 mov	 DWORD PTR [rsp+32], 512	; 00000200H
  00061	e8 00 00 00 00	 call	 _PyParallel_Guard

; 253  :     /* Any changes should be reflected in PyObject_INIT (objimpl.h) */
; 254  :     Py_TYPE(op) = tp;
; 255  :     _PyObject_InitHead(op);

  00066	49 b8 78 56 ef
	be 34 12 ad de	 mov	 r8, -2401243008567650696 ; dead1234beef5678H
  00070	33 c0		 xor	 eax, eax
  00072	4c 89 03	 mov	 QWORD PTR [rbx], r8
  00075	4c 89 43 08	 mov	 QWORD PTR [rbx+8], r8
  00079	4c 89 43 40	 mov	 QWORD PTR [rbx+64], r8
  0007d	4c 89 43 48	 mov	 QWORD PTR [rbx+72], r8

; 256  :     _Py_NewReference(op);

  00081	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00088	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@JHIEHDPE@PyObject_Init?$AA@
  0008f	41 b8 00 01 00
	00		 mov	 r8d, 256		; 00000100H
  00095	4c 8b cb	 mov	 r9, rbx
  00098	48 89 7b 58	 mov	 QWORD PTR [rbx+88], rdi
  0009c	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax
  000a0	48 c7 43 20 01
	00 00 00	 mov	 QWORD PTR [rbx+32], 1
  000a8	48 89 43 28	 mov	 QWORD PTR [rbx+40], rax
  000ac	48 89 43 30	 mov	 QWORD PTR [rbx+48], rax
  000b0	48 89 43 38	 mov	 QWORD PTR [rbx+56], rax
  000b4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000bc	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c1	85 c0		 test	 eax, eax
  000c3	74 16		 je	 SHORT $LN5@PyObject_I@3
  000c5	48 8b cb	 mov	 rcx, rbx
  000c8	e8 00 00 00 00	 call	 _Px_NewReference

; 257  :     return op;

  000cd	48 8b c3	 mov	 rax, rbx

; 258  : }

  000d0	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000d5	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d9	5f		 pop	 rdi
  000da	c3		 ret	 0
$LN5@PyObject_I@3:

; 256  :     _Py_NewReference(op);

  000db	48 c7 43 50 01
	00 00 00	 mov	 QWORD PTR [rbx+80], 1

; 257  :     return op;

  000e3	48 8b c3	 mov	 rax, rbx

; 258  : }

  000e6	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000eb	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ef	5f		 pop	 rdi
  000f0	c3		 ret	 0
PyObject_Init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@OGHAFMIK@PyObject_InitVar?$AA@	; `string'
PUBLIC	PyObject_InitVar
;	COMDAT pdata
; File c:\src\pyparallel\include\objimpl.h
pdata	SEGMENT
$pdata$PyObject_InitVar DD imagerel $LN9
	DD	imagerel $LN9+276
	DD	imagerel $unwind$PyObject_InitVar
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_InitVar DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT ??_C@_0BB@OGHAFMIK@PyObject_InitVar?$AA@
CONST	SEGMENT
??_C@_0BB@OGHAFMIK@PyObject_InitVar?$AA@ DB 'PyObject_InitVar', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\object.c
CONST	ENDS
;	COMDAT PyObject_InitVar
_TEXT	SEGMENT
op$ = 64
tp$ = 72
size$ = 80
PyObject_InitVar PROC					; COMDAT

; 262  : {

$LN9:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 263  :     if (op == NULL)

  00018	48 85 c9	 test	 rcx, rcx
  0001b	75 14		 jne	 SHORT $LN2@PyObject_I@4

; 273  : }

  0001d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00022	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00027	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0002b	5f		 pop	 rdi
  0002c	e9 00 00 00 00	 jmp	 PyErr_NoMemory
$LN2@PyObject_I@4:

; 264  :         return (PyVarObject *) PyErr_NoMemory();
; 265  :     Px_RETURN(_PxObject_InitVar(op, tp, size))

  00031	e8 00 00 00 00	 call	 _Py_PXCTX
  00036	85 c0		 test	 eax, eax
  00038	74 1d		 je	 SHORT $LN1@PyObject_I@4
  0003a	4c 8b c7	 mov	 r8, rdi
  0003d	48 8b d6	 mov	 rdx, rsi
  00040	48 8b cb	 mov	 rcx, rbx

; 273  : }

  00043	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00048	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0004d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00051	5f		 pop	 rdi
  00052	e9 00 00 00 00	 jmp	 _PxObject_InitVar
$LN1@PyObject_I@4:

; 266  :     Py_GUARD_MEM(op);

  00057	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  0005e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@OGHAFMIK@PyObject_InitVar?$AA@
  00065	4c 8b cb	 mov	 r9, rbx
  00068	41 b8 0a 01 00
	00		 mov	 r8d, 266		; 0000010aH
  0006e	c7 44 24 20 00
	02 00 00	 mov	 DWORD PTR [rsp+32], 512	; 00000200H
  00076	e8 00 00 00 00	 call	 _PyParallel_Guard

; 267  :     /* Any changes should be reflected in PyObject_INIT_VAR */
; 268  :     op->ob_size = size;
; 269  :     Py_TYPE(op) = tp;
; 270  :     _PyObject_InitHead((PyObject *)op);

  0007b	49 b8 78 56 ef
	be 34 12 ad de	 mov	 r8, -2401243008567650696 ; dead1234beef5678H
  00085	33 c0		 xor	 eax, eax
  00087	4c 89 03	 mov	 QWORD PTR [rbx], r8
  0008a	4c 89 43 08	 mov	 QWORD PTR [rbx+8], r8
  0008e	4c 89 43 40	 mov	 QWORD PTR [rbx+64], r8
  00092	4c 89 43 48	 mov	 QWORD PTR [rbx+72], r8

; 271  :     _Py_NewReference((PyObject *)op);

  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  0009d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@OGHAFMIK@PyObject_InitVar?$AA@
  000a4	41 b8 0f 01 00
	00		 mov	 r8d, 271		; 0000010fH
  000aa	4c 8b cb	 mov	 r9, rbx
  000ad	48 89 7b 60	 mov	 QWORD PTR [rbx+96], rdi
  000b1	48 89 73 58	 mov	 QWORD PTR [rbx+88], rsi
  000b5	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax
  000b9	48 c7 43 20 01
	00 00 00	 mov	 QWORD PTR [rbx+32], 1
  000c1	48 89 43 28	 mov	 QWORD PTR [rbx+40], rax
  000c5	48 89 43 30	 mov	 QWORD PTR [rbx+48], rax
  000c9	48 89 43 38	 mov	 QWORD PTR [rbx+56], rax
  000cd	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000da	85 c0		 test	 eax, eax
  000dc	74 1b		 je	 SHORT $LN5@PyObject_I@4
  000de	48 8b cb	 mov	 rcx, rbx
  000e1	e8 00 00 00 00	 call	 _Px_NewReference

; 272  :     return op;

  000e6	48 8b c3	 mov	 rax, rbx

; 273  : }

  000e9	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000ee	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000f3	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000f7	5f		 pop	 rdi
  000f8	c3		 ret	 0
$LN5@PyObject_I@4:
  000f9	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000fe	48 c7 43 50 01
	00 00 00	 mov	 QWORD PTR [rbx+80], 1
  00106	48 8b c3	 mov	 rax, rbx
  00109	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0010e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00112	5f		 pop	 rdi
  00113	c3		 ret	 0
PyObject_InitVar ENDP
_TEXT	ENDS
PUBLIC	_PyObject_New
EXTRN	PyObject_Malloc:PROC
EXTRN	_PxObject_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_New DD imagerel $LN5
	DD	imagerel $LN5+71
	DD	imagerel $unwind$_PyObject_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_New DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyObject_New
_TEXT	SEGMENT
tp$ = 48
_PyObject_New PROC					; COMDAT

; 277  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 278  :     PyObject *op;
; 279  :     Px_RETURN(_PxObject_New(tp))

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 0d		 je	 SHORT $LN2@PyObject_N
  00012	48 8b cb	 mov	 rcx, rbx

; 284  : }

  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5b		 pop	 rbx
  0001a	e9 00 00 00 00	 jmp	 _PxObject_New
$LN2@PyObject_N:

; 280  :     op = (PyObject *) PyObject_MALLOC(_PyObject_SIZE(tp));

  0001f	48 8b 4b 78	 mov	 rcx, QWORD PTR [rbx+120]
  00023	e8 00 00 00 00	 call	 PyObject_Malloc

; 281  :     if (op == NULL)

  00028	48 85 c0	 test	 rax, rax
  0002b	75 0a		 jne	 SHORT $LN1@PyObject_N

; 284  : }

  0002d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00031	5b		 pop	 rbx
  00032	e9 00 00 00 00	 jmp	 PyErr_NoMemory
$LN1@PyObject_N:

; 282  :         return PyErr_NoMemory();
; 283  :     return PyObject_INIT(op, tp);

  00037	48 8b d3	 mov	 rdx, rbx
  0003a	48 8b c8	 mov	 rcx, rax

; 284  : }

  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5b		 pop	 rbx
  00042	e9 00 00 00 00	 jmp	 PyObject_INIT
_PyObject_New ENDP
_TEXT	ENDS
PUBLIC	_PyObject_NewVar
EXTRN	_PxObject_NewVar:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_NewVar DD imagerel $LN5
	DD	imagerel $LN5+119
	DD	imagerel $unwind$_PyObject_NewVar
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_NewVar DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyObject_NewVar
_TEXT	SEGMENT
tp$ = 48
nitems$ = 56
_PyObject_NewVar PROC					; COMDAT

; 288  : {

$LN5:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fa	 mov	 rdi, rdx
  0000d	48 8b d9	 mov	 rbx, rcx

; 289  :     PyVarObject *op;
; 290  :     size_t size;
; 291  :     Px_RETURN(_PxObject_NewVar(tp, nitems))

  00010	e8 00 00 00 00	 call	 _Py_PXCTX
  00015	85 c0		 test	 eax, eax
  00017	74 15		 je	 SHORT $LN2@PyObject_N@2
  00019	48 8b d7	 mov	 rdx, rdi
  0001c	48 8b cb	 mov	 rcx, rbx

; 298  : }

  0001f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00024	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00028	5f		 pop	 rdi
  00029	e9 00 00 00 00	 jmp	 _PxObject_NewVar
$LN2@PyObject_N@2:

; 292  : 
; 293  :     size = _PyObject_VAR_SIZE(tp, nitems);

  0002e	48 8b 8b 80 00
	00 00		 mov	 rcx, QWORD PTR [rbx+128]
  00035	48 8b 43 78	 mov	 rax, QWORD PTR [rbx+120]
  00039	48 0f af cf	 imul	 rcx, rdi
  0003d	48 8d 4c 01 07	 lea	 rcx, QWORD PTR [rcx+rax+7]
  00042	48 83 e1 f8	 and	 rcx, -8

; 294  :     op = (PyVarObject *) PyObject_MALLOC(size);

  00046	e8 00 00 00 00	 call	 PyObject_Malloc

; 295  :     if (op == NULL)

  0004b	48 85 c0	 test	 rax, rax
  0004e	75 0f		 jne	 SHORT $LN1@PyObject_N@2

; 298  : }

  00050	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00055	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00059	5f		 pop	 rdi
  0005a	e9 00 00 00 00	 jmp	 PyErr_NoMemory
$LN1@PyObject_N@2:

; 296  :         return (PyVarObject *)PyErr_NoMemory();
; 297  :     return PyObject_INIT_VAR(op, tp, nitems);

  0005f	4c 8b c7	 mov	 r8, rdi
  00062	48 8b d3	 mov	 rdx, rbx
  00065	48 8b c8	 mov	 rcx, rax

; 298  : }

  00068	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0006d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00071	5f		 pop	 rdi
  00072	e9 00 00 00 00	 jmp	 PyObject_INIT_VAR
_PyObject_NewVar ENDP
_TEXT	ENDS
PUBLIC	_Py_BreakPoint
; Function compile flags: /Ogtpy
;	COMDAT _Py_BreakPoint
_TEXT	SEGMENT
_Py_BreakPoint PROC					; COMDAT

; 390  : }

  00000	c2 00 00	 ret	 0
_Py_BreakPoint ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@EJGNHIEJ@__repr__?5returned?5non?9string?5?$CIty@ ; `string'
PUBLIC	??_C@_0BC@JEBMOEBF@?$DM?$CFs?5object?5at?5?$CFp?$DO?$AA@ ; `string'
PUBLIC	??_C@_06CBHGEMFM@?$DMNULL?$DO?$AA@		; `string'
PUBLIC	PyObject_Repr
EXTRN	_PyUnicode_Ready:PROC
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyUnicode_FromFormat:PROC
EXTRN	PyUnicode_FromString:PROC
EXTRN	PyErr_CheckSignals:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_Repr DD imagerel $LN12
	DD	imagerel $LN12+176
	DD	imagerel $unwind$PyObject_Repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_Repr DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0CL@EJGNHIEJ@__repr__?5returned?5non?9string?5?$CIty@
CONST	SEGMENT
??_C@_0CL@EJGNHIEJ@__repr__?5returned?5non?9string?5?$CIty@ DB '__repr__ '
	DB	'returned non-string (type %.200s)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JEBMOEBF@?$DM?$CFs?5object?5at?5?$CFp?$DO?$AA@
CONST	SEGMENT
??_C@_0BC@JEBMOEBF@?$DM?$CFs?5object?5at?5?$CFp?$DO?$AA@ DB '<%s object a'
	DB	't %p>', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06CBHGEMFM@?$DMNULL?$DO?$AA@
CONST	SEGMENT
??_C@_06CBHGEMFM@?$DMNULL?$DO?$AA@ DB '<NULL>', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyObject_Repr
_TEXT	SEGMENT
v$ = 48
PyObject_Repr PROC					; COMDAT

; 426  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 427  :     PyObject *res;
; 428  :     if (PyErr_CheckSignals())

  00009	e8 00 00 00 00	 call	 PyErr_CheckSignals
  0000e	85 c0		 test	 eax, eax

; 429  :         return NULL;

  00010	75 7b		 jne	 SHORT $LN11@PyObject_R

; 430  : #ifdef USE_STACKCHECK
; 431  :     if (PyOS_CheckStack()) {
; 432  :         PyErr_SetString(PyExc_MemoryError, "stack overflow");
; 433  :         return NULL;
; 434  :     }
; 435  : #endif
; 436  :     if (v == NULL)

  00012	48 85 db	 test	 rbx, rbx
  00015	75 11		 jne	 SHORT $LN5@PyObject_R

; 437  :         return PyUnicode_FromString("<NULL>");

  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06CBHGEMFM@?$DMNULL?$DO?$AA@

; 456  : }

  0001e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00022	5b		 pop	 rbx
  00023	e9 00 00 00 00	 jmp	 PyUnicode_FromString
$LN5@PyObject_R:

; 438  :     if (Py_TYPE(v)->tp_repr == NULL)

  00028	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0002c	48 8b 82 b0 00
	00 00		 mov	 rax, QWORD PTR [rdx+176]
  00033	48 85 c0	 test	 rax, rax
  00036	75 18		 jne	 SHORT $LN4@PyObject_R

; 439  :         return PyUnicode_FromFormat("<%s object at %p>",
; 440  :                                     v->ob_type->tp_name, v);

  00038	48 8b 52 70	 mov	 rdx, QWORD PTR [rdx+112]
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@JEBMOEBF@?$DM?$CFs?5object?5at?5?$CFp?$DO?$AA@
  00043	4c 8b c3	 mov	 r8, rbx

; 456  : }

  00046	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004a	5b		 pop	 rbx
  0004b	e9 00 00 00 00	 jmp	 PyUnicode_FromFormat
$LN4@PyObject_R:

; 441  :     res = (*v->ob_type->tp_repr)(v);

  00050	48 8b cb	 mov	 rcx, rbx
  00053	ff d0		 call	 rax
  00055	48 8b d8	 mov	 rbx, rax

; 442  :     if (res == NULL)

  00058	48 85 c0	 test	 rax, rax

; 443  :         return NULL;

  0005b	74 30		 je	 SHORT $LN11@PyObject_R

; 444  :     if (!PyUnicode_Check(res)) {

  0005d	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  00061	41 f7 80 00 01
	00 00 00 00 00
	10		 test	 DWORD PTR [r8+256], 268435456 ; 10000000H
  0006c	75 27		 jne	 SHORT $LN2@PyObject_R

; 445  :         PyErr_Format(PyExc_TypeError,
; 446  :                      "__repr__ returned non-string (type %.200s)",
; 447  :                      res->ob_type->tp_name);

  0006e	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00072	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00079	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@EJGNHIEJ@__repr__?5returned?5non?9string?5?$CIty@
  00080	e8 00 00 00 00	 call	 PyErr_Format

; 448  :         Py_DECREF(res);

  00085	48 8b cb	 mov	 rcx, rbx
  00088	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@PyObject_R:

; 449  :         return NULL;

  0008d	33 c0		 xor	 eax, eax

; 456  : }

  0008f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00093	5b		 pop	 rbx
  00094	c3		 ret	 0
$LN2@PyObject_R:

; 450  :     }
; 451  : #ifndef Py_DEBUG
; 452  :     if (PyUnicode_READY(res) < 0)

  00095	f6 40 70 80	 test	 BYTE PTR [rax+112], 128	; 00000080H
  00099	75 0c		 jne	 SHORT $LN1@PyObject_R
  0009b	48 8b c8	 mov	 rcx, rax
  0009e	e8 00 00 00 00	 call	 _PyUnicode_Ready
  000a3	85 c0		 test	 eax, eax

; 453  :         return NULL;

  000a5	78 e6		 js	 SHORT $LN11@PyObject_R
$LN1@PyObject_R:

; 454  : #endif
; 455  :     return res;

  000a7	48 8b c3	 mov	 rax, rbx

; 456  : }

  000aa	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ae	5b		 pop	 rbx
  000af	c3		 ret	 0
PyObject_Repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@EHJIGAIF@__str__?5returned?5non?9string?5?$CItyp@ ; `string'
PUBLIC	??_C@_0CE@FMPGEPEN@?5while?5getting?5the?5str?5of?5an?5obj@ ; `string'
PUBLIC	PyObject_Str
EXTRN	_Py_CheckRecursiveCall:PROC
EXTRN	_Py_CheckRecursionLimit:DWORD
EXTRN	_PyThreadState_Current:QWORD
EXTRN	_PyParallel_GetThreadState:PROC
EXTRN	PyUnicode_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_Str DD imagerel $LN29
	DD	imagerel $LN29+368
	DD	imagerel $unwind$PyObject_Str
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_Str DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0CK@EHJIGAIF@__str__?5returned?5non?9string?5?$CItyp@
CONST	SEGMENT
??_C@_0CK@EHJIGAIF@__str__?5returned?5non?9string?5?$CItyp@ DB '__str__ r'
	DB	'eturned non-string (type %.200s)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FMPGEPEN@?5while?5getting?5the?5str?5of?5an?5obj@
CONST	SEGMENT
??_C@_0CE@FMPGEPEN@?5while?5getting?5the?5str?5of?5an?5obj@ DB ' while ge'
	DB	'tting the str of an object', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyObject_Str
_TEXT	SEGMENT
v$ = 48
PyObject_Str PROC					; COMDAT

; 460  : {

$LN29:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 461  :     PyObject *res;
; 462  :     if (PyErr_CheckSignals())

  00009	e8 00 00 00 00	 call	 PyErr_CheckSignals
  0000e	85 c0		 test	 eax, eax

; 463  :         return NULL;

  00010	0f 85 37 01 00
	00		 jne	 $LN28@PyObject_S

; 464  : #ifdef USE_STACKCHECK
; 465  :     if (PyOS_CheckStack()) {
; 466  :         PyErr_SetString(PyExc_MemoryError, "stack overflow");
; 467  :         return NULL;
; 468  :     }
; 469  : #endif
; 470  :     if (v == NULL)

  00016	48 85 db	 test	 rbx, rbx
  00019	75 11		 jne	 SHORT $LN12@PyObject_S

; 471  :         return PyUnicode_FromString("<NULL>");

  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06CBHGEMFM@?$DMNULL?$DO?$AA@

; 504  : }

  00022	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00026	5b		 pop	 rbx
  00027	e9 00 00 00 00	 jmp	 PyUnicode_FromString
$LN12@PyObject_S:

; 472  :     if (PyUnicode_CheckExact(v)) {

  0002c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00030	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyUnicode_Type
  00037	48 3b c1	 cmp	 rax, rcx
  0003a	75 27		 jne	 SHORT $LN11@PyObject_S

; 473  : #ifndef Py_DEBUG
; 474  :         if (PyUnicode_READY(v) < 0)

  0003c	f6 43 70 80	 test	 BYTE PTR [rbx+112], 128	; 00000080H
  00040	75 10		 jne	 SHORT $LN10@PyObject_S
  00042	48 8b cb	 mov	 rcx, rbx
  00045	e8 00 00 00 00	 call	 _PyUnicode_Ready
  0004a	85 c0		 test	 eax, eax

; 475  :             return NULL;

  0004c	0f 88 fb 00 00
	00		 js	 $LN28@PyObject_S
$LN10@PyObject_S:

; 476  : #endif
; 477  :         Py_INCREF(v);

  00052	48 8b cb	 mov	 rcx, rbx
  00055	e8 00 00 00 00	 call	 _Py_IncRef

; 501  : #endif
; 502  :     assert(_PyUnicode_CheckConsistency(res, 1));
; 503  :     return res;

  0005a	48 8b c3	 mov	 rax, rbx

; 504  : }

  0005d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00061	5b		 pop	 rbx
  00062	c3		 ret	 0
$LN11@PyObject_S:

; 478  :         return v;
; 479  :     }
; 480  :     if (Py_TYPE(v)->tp_str == NULL)

  00063	48 83 b8 e0 00
	00 00 00	 cmp	 QWORD PTR [rax+224], 0
  0006b	75 0d		 jne	 SHORT $LN9@PyObject_S

; 481  :         return PyObject_Repr(v);

  0006d	48 8b cb	 mov	 rcx, rbx

; 504  : }

  00070	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00074	5b		 pop	 rbx
  00075	e9 00 00 00 00	 jmp	 PyObject_Repr
$LN9@PyObject_S:

; 482  : 
; 483  :     /* It is possible for a type to have a tp_str representation that loops
; 484  :        infinitely. */
; 485  :     if (Py_EnterRecursiveCall(" while getting the str of an object"))

  0007a	e8 00 00 00 00	 call	 _Py_PXCTX
  0007f	85 c0		 test	 eax, eax
  00081	74 07		 je	 SHORT $LN18@PyObject_S
  00083	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00088	eb 07		 jmp	 SHORT $LN19@PyObject_S
$LN18@PyObject_S:
  0008a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
$LN19@PyObject_S:
  00091	ff 40 18	 inc	 DWORD PTR [rax+24]
  00094	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00097	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _Py_CheckRecursionLimit
  0009d	7e 14		 jle	 SHORT $LN8@PyObject_S
  0009f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@FMPGEPEN@?5while?5getting?5the?5str?5of?5an?5obj@
  000a6	e8 00 00 00 00	 call	 _Py_CheckRecursiveCall
  000ab	85 c0		 test	 eax, eax

; 486  :         return NULL;

  000ad	0f 85 9a 00 00
	00		 jne	 $LN28@PyObject_S
$LN8@PyObject_S:

; 487  :     res = (*Py_TYPE(v)->tp_str)(v);

  000b3	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000b7	48 8b cb	 mov	 rcx, rbx
  000ba	ff 90 e0 00 00
	00		 call	 QWORD PTR [rax+224]
  000c0	48 8b d8	 mov	 rbx, rax

; 488  :     Py_LeaveRecursiveCall();

  000c3	e8 00 00 00 00	 call	 _Py_PXCTX
  000c8	85 c0		 test	 eax, eax
  000ca	74 0a		 je	 SHORT $LN20@PyObject_S
  000cc	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  000d1	4c 8b d8	 mov	 r11, rax
  000d4	eb 07		 jmp	 SHORT $LN21@PyObject_S
$LN20@PyObject_S:
  000d6	4c 8b 1d 00 00
	00 00		 mov	 r11, QWORD PTR _PyThreadState_Current
$LN21@PyObject_S:
  000dd	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _Py_CheckRecursionLimit
  000e3	83 f8 64	 cmp	 eax, 100		; 00000064H
  000e6	7e 05		 jle	 SHORT $LN22@PyObject_S
  000e8	83 c0 ce	 add	 eax, -50		; ffffffffffffffceH
  000eb	eb 06		 jmp	 SHORT $LN23@PyObject_S
$LN22@PyObject_S:
  000ed	c1 f8 02	 sar	 eax, 2
  000f0	8d 04 40	 lea	 eax, DWORD PTR [rax+rax*2]
$LN23@PyObject_S:
  000f3	41 ff 4b 18	 dec	 DWORD PTR [r11+24]
  000f7	41 39 43 18	 cmp	 DWORD PTR [r11+24], eax
  000fb	7d 1b		 jge	 SHORT $LN6@PyObject_S
  000fd	e8 00 00 00 00	 call	 _Py_PXCTX
  00102	85 c0		 test	 eax, eax
  00104	74 07		 je	 SHORT $LN24@PyObject_S
  00106	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  0010b	eb 07		 jmp	 SHORT $LN25@PyObject_S
$LN24@PyObject_S:
  0010d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
$LN25@PyObject_S:
  00114	c6 40 1c 00	 mov	 BYTE PTR [rax+28], 0
$LN6@PyObject_S:

; 489  :     if (res == NULL)

  00118	48 85 db	 test	 rbx, rbx

; 490  :         return NULL;

  0011b	74 30		 je	 SHORT $LN28@PyObject_S

; 491  :     if (!PyUnicode_Check(res)) {

  0011d	4c 8b 43 58	 mov	 r8, QWORD PTR [rbx+88]
  00121	41 f7 80 00 01
	00 00 00 00 00
	10		 test	 DWORD PTR [r8+256], 268435456 ; 10000000H
  0012c	75 27		 jne	 SHORT $LN2@PyObject_S

; 492  :         PyErr_Format(PyExc_TypeError,
; 493  :                      "__str__ returned non-string (type %.200s)",
; 494  :                      Py_TYPE(res)->tp_name);

  0012e	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00132	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00139	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@EHJIGAIF@__str__?5returned?5non?9string?5?$CItyp@
  00140	e8 00 00 00 00	 call	 PyErr_Format

; 495  :         Py_DECREF(res);

  00145	48 8b cb	 mov	 rcx, rbx
  00148	e8 00 00 00 00	 call	 _Py_DecRef
$LN28@PyObject_S:

; 496  :         return NULL;

  0014d	33 c0		 xor	 eax, eax

; 504  : }

  0014f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00153	5b		 pop	 rbx
  00154	c3		 ret	 0
$LN2@PyObject_S:

; 497  :     }
; 498  : #ifndef Py_DEBUG
; 499  :     if (PyUnicode_READY(res) < 0)

  00155	f6 43 70 80	 test	 BYTE PTR [rbx+112], 128	; 00000080H
  00159	75 0c		 jne	 SHORT $LN1@PyObject_S
  0015b	48 8b cb	 mov	 rcx, rbx
  0015e	e8 00 00 00 00	 call	 _PyUnicode_Ready
  00163	85 c0		 test	 eax, eax

; 500  :         return NULL;

  00165	78 e6		 js	 SHORT $LN28@PyObject_S
$LN1@PyObject_S:

; 501  : #endif
; 502  :     assert(_PyUnicode_CheckConsistency(res, 1));
; 503  :     return res;

  00167	48 8b c3	 mov	 rax, rbx

; 504  : }

  0016a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0016e	5b		 pop	 rbx
  0016f	c3		 ret	 0
PyObject_Str ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@GGCFDDAA@backslashreplace?$AA@	; `string'
PUBLIC	PyObject_ASCII
EXTRN	PyUnicode_DecodeASCII:PROC
EXTRN	_PyUnicode_AsASCIIString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_ASCII DD imagerel $LN6
	DD	imagerel $LN6+35
	DD	imagerel $unwind$PyObject_ASCII
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyObject_ASCII DD imagerel $LN6+35
	DD	imagerel $LN6+74
	DD	imagerel $chain$0$PyObject_ASCII
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyObject_ASCII DD imagerel $LN6+74
	DD	imagerel $LN6+115
	DD	imagerel $chain$2$PyObject_ASCII
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyObject_ASCII DD 020021H
	DD	067400H
	DD	imagerel $LN6
	DD	imagerel $LN6+35
	DD	imagerel $unwind$PyObject_ASCII
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyObject_ASCII DD 020521H
	DD	067405H
	DD	imagerel $LN6
	DD	imagerel $LN6+35
	DD	imagerel $unwind$PyObject_ASCII
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_ASCII DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0BB@GGCFDDAA@backslashreplace?$AA@
CONST	SEGMENT
??_C@_0BB@GGCFDDAA@backslashreplace?$AA@ DB 'backslashreplace', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyObject_ASCII
_TEXT	SEGMENT
v$ = 48
PyObject_ASCII PROC					; COMDAT

; 508  : {

$LN6:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 509  :     PyObject *repr, *ascii, *res;
; 510  : 
; 511  :     repr = PyObject_Repr(v);

  00006	e8 00 00 00 00	 call	 PyObject_Repr
  0000b	48 8b d8	 mov	 rbx, rax

; 512  :     if (repr == NULL)

  0000e	48 85 c0	 test	 rax, rax
  00011	75 06		 jne	 SHORT $LN2@PyObject_A

; 528  : }

  00013	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00017	5b		 pop	 rbx
  00018	c3		 ret	 0
$LN2@PyObject_A:

; 513  :         return NULL;
; 514  : 
; 515  :     /* repr is guaranteed to be a PyUnicode object by PyObject_Repr */
; 516  :     ascii = _PyUnicode_AsASCIIString(repr, "backslashreplace");

  00019	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@GGCFDDAA@backslashreplace?$AA@
  00020	48 8b c8	 mov	 rcx, rax
  00023	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  00028	e8 00 00 00 00	 call	 _PyUnicode_AsASCIIString

; 517  :     Py_DECREF(repr);

  0002d	48 8b cb	 mov	 rcx, rbx
  00030	48 8b f8	 mov	 rdi, rax
  00033	e8 00 00 00 00	 call	 _Py_DecRef

; 518  :     if (ascii == NULL)

  00038	48 85 ff	 test	 rdi, rdi
  0003b	75 0d		 jne	 SHORT $LN1@PyObject_A

; 519  :         return NULL;

  0003d	33 c0		 xor	 eax, eax
  0003f	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 528  : }

  00044	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
$LN1@PyObject_A:

; 520  : 
; 521  :     res = PyUnicode_DecodeASCII(
; 522  :         PyBytes_AS_STRING(ascii),
; 523  :         PyBytes_GET_SIZE(ascii),
; 524  :         NULL);

  0004a	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  0004e	48 8d 4f 78	 lea	 rcx, QWORD PTR [rdi+120]
  00052	45 33 c0	 xor	 r8d, r8d
  00055	e8 00 00 00 00	 call	 PyUnicode_DecodeASCII

; 525  : 
; 526  :     Py_DECREF(ascii);

  0005a	48 8b cf	 mov	 rcx, rdi
  0005d	48 8b d8	 mov	 rbx, rax
  00060	e8 00 00 00 00	 call	 _Py_DecRef
  00065	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 527  :     return res;

  0006a	48 8b c3	 mov	 rax, rbx

; 528  : }

  0006d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00071	5b		 pop	 rbx
  00072	c3		 ret	 0
PyObject_ASCII ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@GNADLFAE@__bytes__?5returned?5non?9bytes?5?$CIty@ ; `string'
PUBLIC	PyObject_Bytes
EXTRN	PyBytes_FromObject:PROC
EXTRN	PyErr_Occurred:PROC
EXTRN	PyObject_CallFunctionObjArgs:PROC
EXTRN	_PyObject_LookupSpecial:PROC
EXTRN	PyBytes_Type:BYTE
EXTRN	PyBytes_FromString:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyObject_Bytes DD imagerel $LN16
	DD	imagerel $LN16+139
	DD	imagerel $unwind$PyObject_Bytes
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyObject_Bytes DD imagerel $LN16+139
	DD	imagerel $LN16+244
	DD	imagerel $chain$0$PyObject_Bytes
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyObject_Bytes DD imagerel $LN16+244
	DD	imagerel $LN16+258
	DD	imagerel $chain$2$PyObject_Bytes
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyObject_Bytes DD imagerel $LN16+258
	DD	imagerel $LN16+286
	DD	imagerel $chain$4$PyObject_Bytes
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyObject_Bytes DD 020021H
	DD	087400H
	DD	imagerel $LN16
	DD	imagerel $LN16+139
	DD	imagerel $unwind$PyObject_Bytes
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyObject_Bytes DD 020021H
	DD	087400H
	DD	imagerel $LN16
	DD	imagerel $LN16+139
	DD	imagerel $unwind$PyObject_Bytes
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyObject_Bytes DD 020521H
	DD	087405H
	DD	imagerel $LN16
	DD	imagerel $LN16+139
	DD	imagerel $unwind$PyObject_Bytes
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_Bytes DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0CL@GNADLFAE@__bytes__?5returned?5non?9bytes?5?$CIty@
CONST	SEGMENT
??_C@_0CL@GNADLFAE@__bytes__?5returned?5non?9bytes?5?$CIty@ DB '__bytes__'
	DB	' returned non-bytes (type %.200s)', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\object.c
CONST	ENDS
;	COMDAT PyObject_Bytes
_TEXT	SEGMENT
v$ = 64
PyObject_Bytes PROC					; COMDAT

; 532  : {

$LN16:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 533  :     PyObject *result, *func;
; 534  :     _Py_IDENTIFIER(__bytes__);
; 535  : 
; 536  :     if (v == NULL)

  00009	48 85 c9	 test	 rcx, rcx
  0000c	75 11		 jne	 SHORT $LN7@PyObject_B

; 537  :         return PyBytes_FromString("<NULL>");

  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06CBHGEMFM@?$DMNULL?$DO?$AA@

; 562  : }

  00015	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00019	5b		 pop	 rbx
  0001a	e9 00 00 00 00	 jmp	 PyBytes_FromString
$LN7@PyObject_B:

; 538  : 
; 539  :     if (PyBytes_CheckExact(v)) {

  0001f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBytes_Type
  00026	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0002a	75 44		 jne	 SHORT $LN6@PyObject_B

; 540  :         Py_INCREF(v);

  0002c	e8 00 00 00 00	 call	 _Py_PXCTX
  00031	85 c0		 test	 eax, eax
  00033	75 32		 jne	 SHORT $LN11@PyObject_B
  00035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00043	4c 8b cb	 mov	 r9, rbx
  00046	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0004c	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00054	e8 00 00 00 00	 call	 _PyParallel_Guard
  00059	85 c0		 test	 eax, eax
  0005b	75 06		 jne	 SHORT $LN10@PyObject_B
  0005d	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00061	74 04		 je	 SHORT $LN11@PyObject_B
$LN10@PyObject_B:
  00063	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN11@PyObject_B:

; 541  :         return v;

  00067	48 8b c3	 mov	 rax, rbx

; 562  : }

  0006a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0006e	5b		 pop	 rbx
  0006f	c3		 ret	 0
$LN6@PyObject_B:

; 542  :     }
; 543  : 
; 544  :     func = _PyObject_LookupSpecial(v, &PyId___bytes__);

  00070	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00076	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0007f	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId___bytes__@?1??PyObject_Bytes@@9@9
  00084	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  00088	48 8b cb	 mov	 rcx, rbx
  0008b	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  00090	e8 00 00 00 00	 call	 _PyObject_LookupSpecial
  00095	48 8b f8	 mov	 rdi, rax

; 545  :     if (func != NULL) {

  00098	48 85 c0	 test	 rax, rax
  0009b	74 65		 je	 SHORT $LN5@PyObject_B

; 546  :         result = PyObject_CallFunctionObjArgs(func, NULL);

  0009d	33 d2		 xor	 edx, edx
  0009f	48 8b c8	 mov	 rcx, rax
  000a2	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs

; 547  :         Py_DECREF(func);

  000a7	48 8b cf	 mov	 rcx, rdi
  000aa	48 8b d8	 mov	 rbx, rax
  000ad	e8 00 00 00 00	 call	 _Py_DecRef

; 548  :         if (result == NULL)

  000b2	48 85 db	 test	 rbx, rbx

; 549  :             return NULL;

  000b5	74 30		 je	 SHORT $LN15@PyObject_B

; 550  :         if (!PyBytes_Check(result)) {

  000b7	4c 8b 43 58	 mov	 r8, QWORD PTR [rbx+88]
  000bb	41 f7 80 00 01
	00 00 00 00 00
	08		 test	 DWORD PTR [r8+256], 134217728 ; 08000000H
  000c6	75 2c		 jne	 SHORT $LN3@PyObject_B

; 551  :             PyErr_Format(PyExc_TypeError,
; 552  :                          "__bytes__ returned non-bytes (type %.200s)",
; 553  :                          Py_TYPE(result)->tp_name);

  000c8	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  000cc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@GNADLFAE@__bytes__?5returned?5non?9bytes?5?$CIty@
  000da	e8 00 00 00 00	 call	 PyErr_Format

; 554  :             Py_DECREF(result);

  000df	48 8b cb	 mov	 rcx, rbx
  000e2	e8 00 00 00 00	 call	 _Py_DecRef
$LN15@PyObject_B:

; 555  :             return NULL;

  000e7	33 c0		 xor	 eax, eax
  000e9	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 562  : }

  000ee	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000f2	5b		 pop	 rbx
  000f3	c3		 ret	 0
$LN3@PyObject_B:

; 556  :         }
; 557  :         return result;

  000f4	48 8b c3	 mov	 rax, rbx
  000f7	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 562  : }

  000fc	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00100	5b		 pop	 rbx
  00101	c3		 ret	 0
$LN5@PyObject_B:

; 558  :     }
; 559  :     else if (PyErr_Occurred())

  00102	e8 00 00 00 00	 call	 PyErr_Occurred
  00107	48 85 c0	 test	 rax, rax

; 560  :         return NULL;

  0010a	75 db		 jne	 SHORT $LN15@PyObject_B

; 561  :     return PyBytes_FromObject(v);

  0010c	48 8b cb	 mov	 rcx, rbx
  0010f	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 562  : }

  00114	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00118	5b		 pop	 rbx
  00119	e9 00 00 00 00	 jmp	 PyBytes_FromObject
PyObject_Bytes ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@DJEENELO@unorderable?5types?3?5?$CF?4100s?$CI?$CJ?5?$CFs?5?$CF@ ; `string'
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
EXTRN	PyType_IsSubtype:PROC
EXTRN	__ImageBase:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$do_richcompare DD imagerel do_richcompare
	DD	imagerel do_richcompare+419
	DD	imagerel $unwind$do_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$do_richcompare DD 0a1801H
	DD	0c6418H
	DD	0b5418H
	DD	0a3418H
	DD	0d0145218H
	DD	07010c012H
xdata	ENDS
;	COMDAT ??_C@_0CI@DJEENELO@unorderable?5types?3?5?$CF?4100s?$CI?$CJ?5?$CFs?5?$CF@
CONST	SEGMENT
??_C@_0CI@DJEENELO@unorderable?5types?3?5?$CF?4100s?$CI?$CJ?5?$CFs?5?$CF@ DB 'u'
	DB	'norderable types: %.100s() %s %.100s()', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\object.c
CONST	ENDS
;	COMDAT do_richcompare
_TEXT	SEGMENT
v$ = 80
w$ = 88
op$ = 96
do_richcompare PROC					; COMDAT

; 603  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00018	48 8b fa	 mov	 rdi, rdx

; 604  :     richcmpfunc f;
; 605  :     PyObject *res;
; 606  :     int checked_reverse_op = 0;
; 607  : 
; 608  :     if (v->ob_type != w->ob_type &&
; 609  :         PyType_IsSubtype(w->ob_type, v->ob_type) &&
; 610  :         (f = w->ob_type->tp_richcompare) != NULL) {

  0001b	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0001f	48 8b f1	 mov	 rsi, rcx
  00022	48 8b 4f 58	 mov	 rcx, QWORD PTR [rdi+88]
  00026	33 ed		 xor	 ebp, ebp
  00028	49 63 d8	 movsxd	 rbx, r8d
  0002b	4c 8d 2d 00 00
	00 00		 lea	 r13, OFFSET FLAT:__ImageBase
  00032	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:_Py_NotImplementedStruct
  00039	48 3b d1	 cmp	 rdx, rcx
  0003c	74 40		 je	 SHORT $LN11@do_richcom
  0003e	e8 00 00 00 00	 call	 PyType_IsSubtype
  00043	85 c0		 test	 eax, eax
  00045	74 37		 je	 SHORT $LN11@do_richcom
  00047	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  0004b	4c 8b 88 20 01
	00 00		 mov	 r9, QWORD PTR [rax+288]
  00052	4d 85 c9	 test	 r9, r9
  00055	74 27		 je	 SHORT $LN11@do_richcom

; 611  :         checked_reverse_op = 1;
; 612  :         res = (*f)(w, v, _Py_SwappedOp[op]);

  00057	45 8b 84 9d 00
	00 00 00	 mov	 r8d, DWORD PTR _Py_SwappedOp[r13+rbx*4]
  0005f	48 8b d6	 mov	 rdx, rsi
  00062	48 8b cf	 mov	 rcx, rdi
  00065	bd 01 00 00 00	 mov	 ebp, 1
  0006a	41 ff d1	 call	 r9

; 613  :         if (res != Py_NotImplemented)

  0006d	49 3b c4	 cmp	 rax, r12

; 614  :             return res;

  00070	0f 85 14 01 00
	00		 jne	 $LN12@do_richcom

; 615  :         Py_DECREF(res);

  00076	48 8b c8	 mov	 rcx, rax
  00079	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@do_richcom:

; 616  :     }
; 617  :     if ((f = v->ob_type->tp_richcompare) != NULL) {

  0007e	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  00082	4c 8b 88 20 01
	00 00		 mov	 r9, QWORD PTR [rax+288]
  00089	4d 85 c9	 test	 r9, r9
  0008c	74 1d		 je	 SHORT $LN9@do_richcom

; 618  :         res = (*f)(v, w, op);

  0008e	44 8b c3	 mov	 r8d, ebx
  00091	48 8b d7	 mov	 rdx, rdi
  00094	48 8b ce	 mov	 rcx, rsi
  00097	41 ff d1	 call	 r9

; 619  :         if (res != Py_NotImplemented)

  0009a	49 3b c4	 cmp	 rax, r12

; 620  :             return res;

  0009d	0f 85 e7 00 00
	00		 jne	 $LN12@do_richcom

; 621  :         Py_DECREF(res);

  000a3	48 8b c8	 mov	 rcx, rax
  000a6	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@do_richcom:

; 622  :     }
; 623  :     if (!checked_reverse_op && (f = w->ob_type->tp_richcompare) != NULL) {

  000ab	85 ed		 test	 ebp, ebp
  000ad	75 32		 jne	 SHORT $LN7@do_richcom
  000af	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000b3	4c 8b 88 20 01
	00 00		 mov	 r9, QWORD PTR [rax+288]
  000ba	4d 85 c9	 test	 r9, r9
  000bd	74 22		 je	 SHORT $LN7@do_richcom

; 624  :         res = (*f)(w, v, _Py_SwappedOp[op]);

  000bf	45 8b 84 9d 00
	00 00 00	 mov	 r8d, DWORD PTR _Py_SwappedOp[r13+rbx*4]
  000c7	48 8b d6	 mov	 rdx, rsi
  000ca	48 8b cf	 mov	 rcx, rdi
  000cd	41 ff d1	 call	 r9

; 625  :         if (res != Py_NotImplemented)

  000d0	49 3b c4	 cmp	 rax, r12

; 626  :             return res;

  000d3	0f 85 b1 00 00
	00		 jne	 $LN12@do_richcom

; 627  :         Py_DECREF(res);

  000d9	48 8b c8	 mov	 rcx, rax
  000dc	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@do_richcom:

; 628  :     }
; 629  :     /* If neither object implements it, provide a sensible default
; 630  :        for == and !=, but raise an exception for ordering. */
; 631  :     switch (op) {

  000e1	8b cb		 mov	 ecx, ebx
  000e3	83 e9 02	 sub	 ecx, 2
  000e6	74 4f		 je	 SHORT $LN3@do_richcom
  000e8	ff c9		 dec	 ecx
  000ea	74 34		 je	 SHORT $LN2@do_richcom

; 638  :     default:
; 639  :         /* XXX Special-case None so it doesn't show as NoneType() */
; 640  :         PyErr_Format(PyExc_TypeError,
; 641  :                      "unorderable types: %.100s() %s %.100s()",
; 642  :                      v->ob_type->tp_name,
; 643  :                      opstrings[op],
; 644  :                      w->ob_type->tp_name);

  000ec	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000f0	4c 8b 46 58	 mov	 r8, QWORD PTR [rsi+88]
  000f4	4d 8b 8c dd 00
	00 00 00	 mov	 r9, QWORD PTR opstrings[r13+rbx*8]
  000fc	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00100	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00104	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0010b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@DJEENELO@unorderable?5types?3?5?$CF?4100s?$CI?$CJ?5?$CFs?5?$CF@
  00112	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00117	e8 00 00 00 00	 call	 PyErr_Format

; 645  :         return NULL;

  0011c	33 c0		 xor	 eax, eax
  0011e	eb 6a		 jmp	 SHORT $LN12@do_richcom
$LN2@do_richcom:

; 634  :         break;
; 635  :     case Py_NE:
; 636  :         res = (v != w) ? Py_True : Py_False;

  00120	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00127	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  0012e	48 3b f7	 cmp	 rsi, rdi
  00131	48 0f 45 d8	 cmovne	 rbx, rax

; 637  :         break;

  00135	eb 15		 jmp	 SHORT $LN4@do_richcom
$LN3@do_richcom:

; 632  :     case Py_EQ:
; 633  :         res = (v == w) ? Py_True : Py_False;

  00137	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0013e	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  00145	48 3b f7	 cmp	 rsi, rdi
  00148	48 0f 44 d8	 cmove	 rbx, rax
$LN4@do_richcom:

; 646  :     }
; 647  :     Py_INCREF(res);

  0014c	e8 00 00 00 00	 call	 _Py_PXCTX
  00151	85 c0		 test	 eax, eax
  00153	75 32		 jne	 SHORT $LN15@do_richcom
  00155	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0015c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00163	4c 8b cb	 mov	 r9, rbx
  00166	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0016c	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00174	e8 00 00 00 00	 call	 _PyParallel_Guard
  00179	85 c0		 test	 eax, eax
  0017b	75 06		 jne	 SHORT $LN14@do_richcom
  0017d	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00181	74 04		 je	 SHORT $LN15@do_richcom
$LN14@do_richcom:
  00183	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN15@do_richcom:

; 648  :     return res;

  00187	48 8b c3	 mov	 rax, rbx
$LN12@do_richcom:

; 649  : }

  0018a	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0018f	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  00194	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  00199	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0019d	41 5d		 pop	 r13
  0019f	41 5c		 pop	 r12
  001a1	5f		 pop	 rdi
  001a2	c3		 ret	 0
do_richcompare ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@LIJGNMLP@?5in?5comparison?$AA@		; `string'
PUBLIC	PyObject_RichCompare
EXTRN	_PyErr_BadInternalCall:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_RichCompare DD imagerel $LN19
	DD	imagerel $LN19+286
	DD	imagerel $unwind$PyObject_RichCompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_RichCompare DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0P@LIJGNMLP@?5in?5comparison?$AA@
CONST	SEGMENT
??_C@_0P@LIJGNMLP@?5in?5comparison?$AA@ DB ' in comparison', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyObject_RichCompare
_TEXT	SEGMENT
v$ = 48
w$ = 56
op$ = 64
PyObject_RichCompare PROC				; COMDAT

; 656  : {

$LN19:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	41 8b f0	 mov	 esi, r8d
  00012	48 8b da	 mov	 rbx, rdx
  00015	48 8b f9	 mov	 rdi, rcx

; 657  :     PyObject *res;
; 658  : 
; 659  :     assert(Py_LT <= op && op <= Py_GE);
; 660  :     if (v == NULL || w == NULL) {

  00018	48 85 c9	 test	 rcx, rcx
  0001b	0f 84 d0 00 00
	00		 je	 $LN7@PyObject_R@2
  00021	48 85 d2	 test	 rdx, rdx
  00024	0f 84 c7 00 00
	00		 je	 $LN7@PyObject_R@2

; 663  :         return NULL;
; 664  :     }
; 665  :     if (Py_EnterRecursiveCall(" in comparison"))

  0002a	e8 00 00 00 00	 call	 _Py_PXCTX
  0002f	85 c0		 test	 eax, eax
  00031	74 07		 je	 SHORT $LN11@PyObject_R@2
  00033	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00038	eb 07		 jmp	 SHORT $LN12@PyObject_R@2
$LN11@PyObject_R@2:
  0003a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
$LN12@PyObject_R@2:
  00041	ff 40 18	 inc	 DWORD PTR [rax+24]
  00044	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00047	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _Py_CheckRecursionLimit
  0004d	7e 14		 jle	 SHORT $LN5@PyObject_R@2
  0004f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@LIJGNMLP@?5in?5comparison?$AA@
  00056	e8 00 00 00 00	 call	 _Py_CheckRecursiveCall
  0005b	85 c0		 test	 eax, eax

; 666  :         return NULL;

  0005d	0f 85 a9 00 00
	00		 jne	 $LN6@PyObject_R@2
$LN5@PyObject_R@2:

; 667  :     res = do_richcompare(v, w, op);

  00063	44 8b c6	 mov	 r8d, esi
  00066	48 8b d3	 mov	 rdx, rbx
  00069	48 8b cf	 mov	 rcx, rdi
  0006c	e8 00 00 00 00	 call	 do_richcompare
  00071	48 8b d8	 mov	 rbx, rax

; 668  :     Py_LeaveRecursiveCall();

  00074	e8 00 00 00 00	 call	 _Py_PXCTX
  00079	85 c0		 test	 eax, eax
  0007b	74 0a		 je	 SHORT $LN13@PyObject_R@2
  0007d	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00082	4c 8b d8	 mov	 r11, rax
  00085	eb 07		 jmp	 SHORT $LN14@PyObject_R@2
$LN13@PyObject_R@2:
  00087	4c 8b 1d 00 00
	00 00		 mov	 r11, QWORD PTR _PyThreadState_Current
$LN14@PyObject_R@2:
  0008e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _Py_CheckRecursionLimit
  00094	83 f8 64	 cmp	 eax, 100		; 00000064H
  00097	7e 05		 jle	 SHORT $LN15@PyObject_R@2
  00099	83 c0 ce	 add	 eax, -50		; ffffffffffffffceH
  0009c	eb 06		 jmp	 SHORT $LN16@PyObject_R@2
$LN15@PyObject_R@2:
  0009e	c1 f8 02	 sar	 eax, 2
  000a1	8d 04 40	 lea	 eax, DWORD PTR [rax+rax*2]
$LN16@PyObject_R@2:
  000a4	41 ff 4b 18	 dec	 DWORD PTR [r11+24]
  000a8	41 39 43 18	 cmp	 DWORD PTR [r11+24], eax
  000ac	7d 30		 jge	 SHORT $LN3@PyObject_R@2
  000ae	e8 00 00 00 00	 call	 _Py_PXCTX
  000b3	85 c0		 test	 eax, eax
  000b5	74 1c		 je	 SHORT $LN17@PyObject_R@2
  000b7	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  000bc	c6 40 1c 00	 mov	 BYTE PTR [rax+28], 0

; 669  :     return res;

  000c0	48 8b c3	 mov	 rax, rbx

; 670  : }

  000c3	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000c8	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000cd	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d1	5f		 pop	 rdi
  000d2	c3		 ret	 0
$LN17@PyObject_R@2:

; 668  :     Py_LeaveRecursiveCall();

  000d3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
  000da	c6 40 1c 00	 mov	 BYTE PTR [rax+28], 0
$LN3@PyObject_R@2:

; 669  :     return res;

  000de	48 8b c3	 mov	 rax, rbx

; 670  : }

  000e1	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000e6	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000eb	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ef	5f		 pop	 rdi
  000f0	c3		 ret	 0
$LN7@PyObject_R@2:

; 661  :         if (!PyErr_Occurred())

  000f1	e8 00 00 00 00	 call	 PyErr_Occurred
  000f6	48 85 c0	 test	 rax, rax
  000f9	75 11		 jne	 SHORT $LN6@PyObject_R@2

; 662  :             PyErr_BadInternalCall();

  000fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00102	ba 96 02 00 00	 mov	 edx, 662		; 00000296H
  00107	e8 00 00 00 00	 call	 _PyErr_BadInternalCall
$LN6@PyObject_R@2:

; 670  : }

  0010c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00111	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00116	33 c0		 xor	 eax, eax
  00118	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0011c	5f		 pop	 rdi
  0011d	c3		 ret	 0
PyObject_RichCompare ENDP
_TEXT	ENDS
PUBLIC	__real@43e0000000000000
PUBLIC	__real@41b0000000000000
PUBLIC	__real@43f0000000000000
PUBLIC	__mask@@NegDouble@
PUBLIC	__real@0000000000000000
PUBLIC	_Py_HashDouble
EXTRN	__imp_frexp:PROC
EXTRN	__imp__isnan:PROC
EXTRN	__imp__finite:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_HashDouble DD imagerel $LN21
	DD	imagerel $LN21+202
	DD	imagerel $unwind$_Py_HashDouble
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_Py_HashDouble DD imagerel $LN21+202
	DD	imagerel $LN21+352
	DD	imagerel $chain$2$_Py_HashDouble
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$_Py_HashDouble DD imagerel $LN21+352
	DD	imagerel $LN21+485
	DD	imagerel $chain$3$_Py_HashDouble
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$_Py_HashDouble DD 021H
	DD	imagerel $LN21
	DD	imagerel $LN21+202
	DD	imagerel $unwind$_Py_HashDouble
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_Py_HashDouble DD 040a21H
	DD	06740aH
	DD	0a6405H
	DD	imagerel $LN21
	DD	imagerel $LN21+202
	DD	imagerel $unwind$_Py_HashDouble
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_HashDouble DD 056901H
	DD	083469H
	DD	026809H
	DD	06204H
xdata	ENDS
;	COMDAT __real@43e0000000000000
CONST	SEGMENT
__real@43e0000000000000 DQ 043e0000000000000r	; 9.22337e+018
CONST	ENDS
;	COMDAT __real@41b0000000000000
CONST	SEGMENT
__real@41b0000000000000 DQ 041b0000000000000r	; 2.68435e+008
CONST	ENDS
;	COMDAT __real@43f0000000000000
CONST	SEGMENT
__real@43f0000000000000 DQ 043f0000000000000r	; 1.84467e+019
CONST	ENDS
;	COMDAT __mask@@NegDouble@
CONST	SEGMENT
__mask@@NegDouble@ DB 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_HashDouble
_TEXT	SEGMENT
v$ = 64
e$ = 72
_Py_HashDouble PROC					; COMDAT

; 759  : {

$LN21:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	0f 29 74 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm6
  00009	66 0f 28 f0	 movapd	 xmm6, xmm0

; 760  :     int e, sign;
; 761  :     double m;
; 762  :     Py_uhash_t x, y;
; 763  : 
; 764  :     if (!Py_IS_FINITE(v)) {

  0000d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite

; 765  :         if (Py_IS_INFINITY(v))

  00013	66 0f 28 c6	 movapd	 xmm0, xmm6
  00017	85 c0		 test	 eax, eax
  00019	75 44		 jne	 SHORT $LN6@Py_HashDou
  0001b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  00021	85 c0		 test	 eax, eax
  00023	75 2e		 jne	 SHORT $LN7@Py_HashDou
  00025	66 0f 28 c6	 movapd	 xmm0, xmm6
  00029	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  0002f	85 c0		 test	 eax, eax
  00031	75 20		 jne	 SHORT $LN7@Py_HashDou

; 766  :             return v > 0 ? _PyHASH_INF : -_PyHASH_INF;

  00033	66 0f 2f 35 00
	00 00 00	 comisd	 xmm6, QWORD PTR __real@0000000000000000
  0003b	b8 2f cb 04 00	 mov	 eax, 314159		; 0004cb2fH
  00040	77 05		 ja	 SHORT $LN12@Py_HashDou
  00042	b8 d1 34 fb ff	 mov	 eax, -314159		; fffffffffffb34d1H
$LN12@Py_HashDou:
  00047	48 98		 cdqe

; 795  :     x = ((x << e) & _PyHASH_MODULUS) | x >> (_PyHASH_BITS - e);
; 796  : 
; 797  :     x = x * sign;
; 798  :     if (x == (Py_uhash_t)-1)
; 799  :         x = (Py_uhash_t)-2;
; 800  :     return (Py_hash_t)x;
; 801  : }

  00049	0f 28 74 24 20	 movaps	 xmm6, XMMWORD PTR [rsp+32]
  0004e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00052	c3		 ret	 0
$LN7@Py_HashDou:

; 767  :         else
; 768  :             return _PyHASH_NAN;

  00053	33 c0		 xor	 eax, eax

; 795  :     x = ((x << e) & _PyHASH_MODULUS) | x >> (_PyHASH_BITS - e);
; 796  : 
; 797  :     x = x * sign;
; 798  :     if (x == (Py_uhash_t)-1)
; 799  :         x = (Py_uhash_t)-2;
; 800  :     return (Py_hash_t)x;
; 801  : }

  00055	0f 28 74 24 20	 movaps	 xmm6, XMMWORD PTR [rsp+32]
  0005a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005e	c3		 ret	 0
$LN6@Py_HashDou:

; 769  :     }
; 770  : 
; 771  :     m = frexp(v, &e);

  0005f	48 8d 54 24 48	 lea	 rdx, QWORD PTR e$[rsp]
  00064	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00069	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_frexp

; 772  : 
; 773  :     sign = 1;
; 774  :     if (m < 0) {

  0006f	41 83 ca ff	 or	 r10d, -1
  00073	41 bb 01 00 00
	00		 mov	 r11d, 1
  00079	66 0f 57 db	 xorpd	 xmm3, xmm3
  0007d	66 0f 2f d8	 comisd	 xmm3, xmm0
  00081	76 0b		 jbe	 SHORT $LN5@Py_HashDou

; 775  :         sign = -1;
; 776  :         m = -m;

  00083	66 0f 57 05 00
	00 00 00	 xorpd	 xmm0, QWORD PTR __mask@@NegDouble@
  0008b	45 8b da	 mov	 r11d, r10d
$LN5@Py_HashDou:

; 777  :     }
; 778  : 
; 779  :     /* process 28 bits at a time;  this should work well both for binary
; 780  :        and hexadecimal floating point. */
; 781  :     x = 0;

  0008e	45 33 c9	 xor	 r9d, r9d

; 782  :     while (m) {

  00091	66 0f 2e c3	 ucomisd xmm0, xmm3
  00095	48 bb ff ff ff
	ff ff ff ff 1f	 mov	 rbx, 2305843009213693951 ; 1fffffffffffffffH
  0009f	7a 0c		 jp	 SHORT $LN19@Py_HashDou
  000a1	75 0a		 jne	 SHORT $LN19@Py_HashDou
  000a3	44 8b 44 24 48	 mov	 r8d, DWORD PTR e$[rsp]
  000a8	e9 b3 00 00 00	 jmp	 $LN3@Py_HashDou
$LN19@Py_HashDou:
  000ad	f2 0f 10 25 00
	00 00 00	 movsdx	 xmm4, QWORD PTR __real@43f0000000000000
  000b5	f2 0f 10 2d 00
	00 00 00	 movsdx	 xmm5, QWORD PTR __real@41b0000000000000
  000bd	f2 0f 10 15 00
	00 00 00	 movsdx	 xmm2, QWORD PTR __real@43e0000000000000
  000c5	44 8b 44 24 48	 mov	 r8d, DWORD PTR e$[rsp]
  000ca	48 89 74 24 50	 mov	 QWORD PTR [rsp+80], rsi
  000cf	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  000d4	48 bf 00 00 00
	00 00 00 00 80	 mov	 rdi, -9223372036854775808 ; 8000000000000000H
  000de	48 be ff ff ff
	ff 01 00 00 00	 mov	 rsi, 8589934591		; 00000001ffffffffH
  000e8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@Py_HashDou:

; 783  :         x = ((x << 28) & _PyHASH_MODULUS) | x >> (_PyHASH_BITS - 28);
; 784  :         m *= 268435456.0;  /* 2**28 */

  000f0	f2 0f 59 c5	 mulsd	 xmm0, xmm5

; 785  :         e -= 28;

  000f4	41 83 e8 1c	 sub	 r8d, 28

; 786  :         y = (Py_uhash_t)m;  /* pull out integer part */

  000f8	33 c0		 xor	 eax, eax
  000fa	66 0f 2f c2	 comisd	 xmm0, xmm2
  000fe	66 0f 28 c8	 movapd	 xmm1, xmm0
  00102	76 0d		 jbe	 SHORT $LN17@Py_HashDou
  00104	f2 0f 5c ca	 subsd	 xmm1, xmm2
  00108	66 0f 2f ca	 comisd	 xmm1, xmm2
  0010c	73 03		 jae	 SHORT $LN17@Py_HashDou
  0010e	48 8b c7	 mov	 rax, rdi
$LN17@Py_HashDou:
  00111	f2 48 0f 2c d1	 cvttsd2si rdx, xmm1

; 787  :         m -= y;

  00116	66 0f ef c9	 pxor	 xmm1, xmm1
  0011a	48 03 d0	 add	 rdx, rax
  0011d	f2 48 0f 2a ca	 cvtsi2sd xmm1, rdx
  00122	79 04		 jns	 SHORT $LN16@Py_HashDou
  00124	f2 0f 58 cc	 addsd	 xmm1, xmm4
$LN16@Py_HashDou:

; 788  :         x += y;

  00128	49 8b c9	 mov	 rcx, r9
  0012b	49 8b c1	 mov	 rax, r9
  0012e	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00132	48 23 ce	 and	 rcx, rsi
  00135	48 c1 e8 21	 shr	 rax, 33			; 00000021H
  00139	48 c1 e1 1c	 shl	 rcx, 28
  0013d	4c 8b c9	 mov	 r9, rcx
  00140	4c 0b c8	 or	 r9, rax
  00143	4c 03 ca	 add	 r9, rdx

; 789  :         if (x >= _PyHASH_MODULUS)

  00146	4c 3b cb	 cmp	 r9, rbx
  00149	72 03		 jb	 SHORT $LN2@Py_HashDou

; 790  :             x -= _PyHASH_MODULUS;

  0014b	4c 2b cb	 sub	 r9, rbx
$LN2@Py_HashDou:

; 782  :     while (m) {

  0014e	66 0f 2e c3	 ucomisd xmm0, xmm3
  00152	7a 9c		 jp	 SHORT $LL4@Py_HashDou
  00154	75 9a		 jne	 SHORT $LL4@Py_HashDou
  00156	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
  0015b	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
$LN3@Py_HashDou:

; 791  :     }
; 792  : 
; 793  :     /* adjust for the exponent;  first reduce it modulo _PyHASH_BITS */
; 794  :     e = e >= 0 ? e % _PyHASH_BITS : _PyHASH_BITS-1-((-1-e) % _PyHASH_BITS);

  00160	45 85 c0	 test	 r8d, r8d
  00163	78 1a		 js	 SHORT $LN13@Py_HashDou
  00165	b8 c1 3a da bc	 mov	 eax, -1126548799	; ffffffffbcda3ac1H
  0016a	41 f7 e8	 imul	 r8d
  0016d	c1 fa 04	 sar	 edx, 4
  00170	8b c2		 mov	 eax, edx
  00172	c1 e8 1f	 shr	 eax, 31
  00175	03 d0		 add	 edx, eax
  00177	6b d2 3d	 imul	 edx, 61			; 0000003dH
  0017a	44 03 c2	 add	 r8d, edx
  0017d	eb 24		 jmp	 SHORT $LN14@Py_HashDou
$LN13@Py_HashDou:
  0017f	45 2b d0	 sub	 r10d, r8d
  00182	b8 3f c5 25 43	 mov	 eax, 1126548799		; 4325c53fH
  00187	41 b8 3c 00 00
	00		 mov	 r8d, 60			; 0000003cH
  0018d	41 f7 ea	 imul	 r10d
  00190	c1 fa 04	 sar	 edx, 4
  00193	8b c2		 mov	 eax, edx
  00195	c1 e8 1f	 shr	 eax, 31
  00198	03 d0		 add	 edx, eax
  0019a	6b d2 3d	 imul	 edx, 61			; 0000003dH
  0019d	44 2b d2	 sub	 r10d, edx
  001a0	45 2b c2	 sub	 r8d, r10d
$LN14@Py_HashDou:

; 795  :     x = ((x << e) & _PyHASH_MODULUS) | x >> (_PyHASH_BITS - e);
; 796  : 
; 797  :     x = x * sign;
; 798  :     if (x == (Py_uhash_t)-1)
; 799  :         x = (Py_uhash_t)-2;
; 800  :     return (Py_hash_t)x;
; 801  : }

  001a3	0f 28 74 24 20	 movaps	 xmm6, XMMWORD PTR [rsp+32]
  001a8	49 8b d1	 mov	 rdx, r9
  001ab	b9 3d 00 00 00	 mov	 ecx, 61			; 0000003dH
  001b0	41 2b c8	 sub	 ecx, r8d
  001b3	48 c7 c0 fe ff
	ff ff		 mov	 rax, -2
  001ba	48 d3 ea	 shr	 rdx, cl
  001bd	41 8b c8	 mov	 ecx, r8d
  001c0	49 d3 e1	 shl	 r9, cl
  001c3	49 63 cb	 movsxd	 rcx, r11d
  001c6	4c 23 cb	 and	 r9, rbx
  001c9	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  001ce	49 0b d1	 or	 rdx, r9
  001d1	48 0f af d1	 imul	 rdx, rcx
  001d5	48 83 fa ff	 cmp	 rdx, -1
  001d9	48 0f 44 d0	 cmove	 rdx, rax
  001dd	48 8b c2	 mov	 rax, rdx
  001e0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001e4	c3		 ret	 0
_Py_HashDouble ENDP
_TEXT	ENDS
PUBLIC	_Py_HashPointer
; Function compile flags: /Ogtpy
;	COMDAT _Py_HashPointer
_TEXT	SEGMENT
p$ = 8
_Py_HashPointer PROC					; COMDAT

; 806  :     Py_hash_t x;
; 807  :     size_t y = (size_t)p;
; 808  :     /* bottom 3 or 4 bits are likely to be 0; rotate y by 4 to avoid
; 809  :        excessive hash collisions for dicts and sets */
; 810  :     y = (y >> 4) | (y << (8 * SIZEOF_VOID_P - 4));

  00000	48 c1 c9 04	 ror	 rcx, 4

; 811  :     x = (Py_hash_t)y;
; 812  :     if (x == -1)

  00004	48 c7 c0 fe ff
	ff ff		 mov	 rax, -2
  0000b	48 83 f9 ff	 cmp	 rcx, -1
  0000f	48 0f 44 c8	 cmove	 rcx, rax

; 813  :         x = -2;
; 814  :     return x;

  00013	48 8b c1	 mov	 rax, rcx

; 815  : }

  00016	c3		 ret	 0
_Py_HashPointer ENDP
_TEXT	ENDS
PUBLIC	_Py_HashBytes
; Function compile flags: /Ogtpy
;	COMDAT _Py_HashBytes
_TEXT	SEGMENT
p$ = 8
len$ = 16
_Py_HashBytes PROC					; COMDAT

; 819  : {

  00000	4c 8b c1	 mov	 r8, rcx

; 820  :     Py_uhash_t x;
; 821  :     Py_ssize_t i;
; 822  : 
; 823  :     /*
; 824  :       We make the hash of the empty string be 0, rather than using
; 825  :       (prefix ^ suffix), since this slightly obfuscates the hash secret
; 826  :     */
; 827  : #ifdef Py_DEBUG
; 828  :     assert(_Py_HashSecret_Initialized);
; 829  : #endif
; 830  :     if (len == 0) {

  00003	48 85 d2	 test	 rdx, rdx
  00006	75 03		 jne	 SHORT $LN5@Py_HashByt

; 831  :         return 0;

  00008	33 c0		 xor	 eax, eax

; 840  :         x = -2;
; 841  :     return x;
; 842  : }

  0000a	c3		 ret	 0
$LN5@Py_HashByt:

; 832  :     }
; 833  :     x = (Py_uhash_t) _Py_HashSecret.prefix;
; 834  :     x ^= (Py_uhash_t) *p << 7;

  0000b	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0000e	48 c1 e1 07	 shl	 rcx, 7
  00012	48 33 0d 00 00
	00 00		 xor	 rcx, QWORD PTR _Py_HashSecret

; 835  :     for (i = 0; i < len; i++)

  00019	48 85 d2	 test	 rdx, rdx
  0001c	7e 19		 jle	 SHORT $LN2@Py_HashByt

; 832  :     }
; 833  :     x = (Py_uhash_t) _Py_HashSecret.prefix;
; 834  :     x ^= (Py_uhash_t) *p << 7;

  0001e	4c 8b ca	 mov	 r9, rdx
$LL4@Py_HashByt:

; 836  :         x = (_PyHASH_MULTIPLIER * x) ^ (Py_uhash_t) *p++;

  00021	41 0f b6 00	 movzx	 eax, BYTE PTR [r8]
  00025	48 69 c9 43 42
	0f 00		 imul	 rcx, 1000003		; 000f4243H
  0002c	49 ff c0	 inc	 r8
  0002f	48 33 c8	 xor	 rcx, rax
  00032	49 ff c9	 dec	 r9
  00035	75 ea		 jne	 SHORT $LL4@Py_HashByt
$LN2@Py_HashByt:

; 837  :     x ^= (Py_uhash_t) len;
; 838  :     x ^= (Py_uhash_t) _Py_HashSecret.suffix;

  00037	48 8b 05 08 00
	00 00		 mov	 rax, QWORD PTR _Py_HashSecret+8
  0003e	48 33 c1	 xor	 rax, rcx

; 839  :     if (x == -1)

  00041	48 c7 c1 fe ff
	ff ff		 mov	 rcx, -2
  00048	48 33 c2	 xor	 rax, rdx
  0004b	48 83 f8 ff	 cmp	 rax, -1
  0004f	48 0f 44 c1	 cmove	 rax, rcx

; 840  :         x = -2;
; 841  :     return x;
; 842  : }

  00053	c3		 ret	 0
_Py_HashBytes ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@BHBNMGFE@unhashable?5type?3?5?8?$CF?4200s?8?$AA@ ; `string'
PUBLIC	PyObject_HashNotImplemented
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_HashNotImplemented DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$PyObject_HashNotImplemented
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_HashNotImplemented DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BK@BHBNMGFE@unhashable?5type?3?5?8?$CF?4200s?8?$AA@
CONST	SEGMENT
??_C@_0BK@BHBNMGFE@unhashable?5type?3?5?8?$CF?4200s?8?$AA@ DB 'unhashable'
	DB	' type: ''%.200s''', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyObject_HashNotImplemented
_TEXT	SEGMENT
v$ = 48
PyObject_HashNotImplemented PROC			; COMDAT

; 846  : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 847  :     PyErr_Format(PyExc_TypeError, "unhashable type: '%.200s'",
; 848  :                  Py_TYPE(v)->tp_name);

  00004	4c 8b 41 58	 mov	 r8, QWORD PTR [rcx+88]
  00008	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0000f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@BHBNMGFE@unhashable?5type?3?5?8?$CF?4200s?8?$AA@
  00016	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  0001a	e8 00 00 00 00	 call	 PyErr_Format

; 849  :     return -1;

  0001f	48 83 c8 ff	 or	 rax, -1

; 850  : }

  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	c3		 ret	 0
PyObject_HashNotImplemented ENDP
_TEXT	ENDS
PUBLIC	PyObject_Hash
EXTRN	PyType_Ready:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_Hash DD imagerel $LN8
	DD	imagerel $LN8+111
	DD	imagerel $unwind$PyObject_Hash
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_Hash DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyObject_Hash
_TEXT	SEGMENT
v$ = 48
PyObject_Hash PROC					; COMDAT

; 856  : {

$LN8:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 857  :     PyTypeObject *tp = Py_TYPE(v);

  0000a	48 8b 59 58	 mov	 rbx, QWORD PTR [rcx+88]
  0000e	48 8b f9	 mov	 rdi, rcx

; 858  :     if (tp->tp_hash != NULL)

  00011	48 8b 83 d0 00
	00 00		 mov	 rax, QWORD PTR [rbx+208]
  00018	48 85 c0	 test	 rax, rax

; 859  :         return (*tp->tp_hash)(v);

  0001b	75 33		 jne	 SHORT $LN7@PyObject_H

; 860  :     /* To keep to the general practice that inheriting
; 861  :      * solely from object in C code should work without
; 862  :      * an explicit call to PyType_Ready, we implicitly call
; 863  :      * PyType_Ready here and then check the tp_hash slot again
; 864  :      */
; 865  :     if (tp->tp_dict == NULL) {

  0001d	48 39 83 60 01
	00 00		 cmp	 QWORD PTR [rbx+352], rax
  00024	75 37		 jne	 SHORT $LN1@PyObject_H

; 866  :         if (PyType_Ready(tp) < 0)

  00026	48 8b cb	 mov	 rcx, rbx
  00029	e8 00 00 00 00	 call	 PyType_Ready
  0002e	85 c0		 test	 eax, eax
  00030	79 0f		 jns	 SHORT $LN2@PyObject_H

; 867  :             return -1;

  00032	48 83 c8 ff	 or	 rax, -1

; 873  : }

  00036	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003f	5f		 pop	 rdi
  00040	c3		 ret	 0
$LN2@PyObject_H:

; 868  :         if (tp->tp_hash != NULL)

  00041	48 8b 83 d0 00
	00 00		 mov	 rax, QWORD PTR [rbx+208]
  00048	48 85 c0	 test	 rax, rax
  0004b	74 10		 je	 SHORT $LN1@PyObject_H

; 869  :             return (*tp->tp_hash)(v);

  0004d	48 8b cf	 mov	 rcx, rdi
$LN7@PyObject_H:

; 873  : }

  00050	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00055	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00059	5f		 pop	 rdi
  0005a	48 ff e0	 rex_jmp rax
$LN1@PyObject_H:

; 870  :     }
; 871  :     /* Otherwise, the object can't be hashed */
; 872  :     return PyObject_HashNotImplemented(v);

  0005d	48 8b cf	 mov	 rcx, rdi

; 873  : }

  00060	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00065	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00069	5f		 pop	 rdi
  0006a	e9 00 00 00 00	 jmp	 PyObject_HashNotImplemented
PyObject_Hash ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@KKJGINOJ@?8?$CF?450s?8?5object?5has?5no?5attribute?5@ ; `string'
PUBLIC	??_C@_0CM@IFFJPMHG@attribute?5name?5must?5be?5string?0?5n@ ; `string'
PUBLIC	PyObject_GetAttr
EXTRN	PyExc_AttributeError:QWORD
EXTRN	PyUnicode_AsUTF8:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_GetAttr DD imagerel $LN8
	DD	imagerel $LN8+183
	DD	imagerel $unwind$PyObject_GetAttr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_GetAttr DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CF@KKJGINOJ@?8?$CF?450s?8?5object?5has?5no?5attribute?5@
CONST	SEGMENT
??_C@_0CF@KKJGINOJ@?8?$CF?450s?8?5object?5has?5no?5attribute?5@ DB '''%.5'
	DB	'0s'' object has no attribute ''%U''', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@IFFJPMHG@attribute?5name?5must?5be?5string?0?5n@
CONST	SEGMENT
??_C@_0CM@IFFJPMHG@attribute?5name?5must?5be?5string?0?5n@ DB 'attribute '
	DB	'name must be string, not ''%.200s''', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyObject_GetAttr
_TEXT	SEGMENT
v$ = 48
name$ = 56
PyObject_GetAttr PROC					; COMDAT

; 976  : {

$LN8:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 977  :     PyTypeObject *tp = Py_TYPE(v);
; 978  : 
; 979  :     if (!PyUnicode_Check(name)) {

  0000a	4c 8b 42 58	 mov	 r8, QWORD PTR [rdx+88]
  0000e	48 8b 59 58	 mov	 rbx, QWORD PTR [rcx+88]
  00012	48 8b f9	 mov	 rdi, rcx
  00015	41 f7 80 00 01
	00 00 00 00 00
	10		 test	 DWORD PTR [r8+256], 268435456 ; 10000000H
  00020	75 24		 jne	 SHORT $LN4@PyObject_G

; 980  :         PyErr_Format(PyExc_TypeError,
; 981  :                      "attribute name must be string, not '%.200s'",
; 982  :                      name->ob_type->tp_name);

  00022	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00026	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@IFFJPMHG@attribute?5name?5must?5be?5string?0?5n@
  00034	e8 00 00 00 00	 call	 PyErr_Format

; 996  :     return NULL;

  00039	33 c0		 xor	 eax, eax

; 997  : }

  0003b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00040	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00044	5f		 pop	 rdi
  00045	c3		 ret	 0
$LN4@PyObject_G:

; 983  :         return NULL;
; 984  :     }
; 985  :     if (tp->tp_getattro != NULL)

  00046	48 8b 83 e8 00
	00 00		 mov	 rax, QWORD PTR [rbx+232]
  0004d	48 85 c0	 test	 rax, rax
  00050	74 0d		 je	 SHORT $LN3@PyObject_G

; 997  : }

  00052	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00057	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005b	5f		 pop	 rdi
  0005c	48 ff e0	 rex_jmp rax
$LN3@PyObject_G:

; 986  :         return (*tp->tp_getattro)(v, name);
; 987  :     if (tp->tp_getattr != NULL) {

  0005f	48 83 bb 98 00
	00 00 00	 cmp	 QWORD PTR [rbx+152], 0
  00067	74 27		 je	 SHORT $LN2@PyObject_G

; 988  :         char *name_str = _PyUnicode_AsString(name);

  00069	48 8b ca	 mov	 rcx, rdx
  0006c	e8 00 00 00 00	 call	 PyUnicode_AsUTF8

; 989  :         if (name_str == NULL)

  00071	48 85 c0	 test	 rax, rax

; 990  :             return NULL;

  00074	74 34		 je	 SHORT $LN7@PyObject_G

; 991  :         return (*tp->tp_getattr)(v, name_str);

  00076	48 8b d0	 mov	 rdx, rax
  00079	48 8b cf	 mov	 rcx, rdi

; 997  : }

  0007c	48 8b 83 98 00
	00 00		 mov	 rax, QWORD PTR [rbx+152]
  00083	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00088	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008c	5f		 pop	 rdi
  0008d	48 ff e0	 rex_jmp rax
$LN2@PyObject_G:

; 992  :     }
; 993  :     PyErr_Format(PyExc_AttributeError,
; 994  :                  "'%.50s' object has no attribute '%U'",
; 995  :                  tp->tp_name, name);

  00090	4c 8b 43 70	 mov	 r8, QWORD PTR [rbx+112]
  00094	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  0009b	4c 8b ca	 mov	 r9, rdx
  0009e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@KKJGINOJ@?8?$CF?450s?8?5object?5has?5no?5attribute?5@
  000a5	e8 00 00 00 00	 call	 PyErr_Format
$LN7@PyObject_G:

; 996  :     return NULL;

  000aa	33 c0		 xor	 eax, eax

; 997  : }

  000ac	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000b1	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b5	5f		 pop	 rdi
  000b6	c3		 ret	 0
PyObject_GetAttr ENDP
_TEXT	ENDS
PUBLIC	PyObject_HasAttr
EXTRN	PyErr_Clear:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_HasAttr DD imagerel $LN4
	DD	imagerel $LN4+44
	DD	imagerel $unwind$PyObject_HasAttr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_HasAttr DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyObject_HasAttr
_TEXT	SEGMENT
v$ = 48
name$ = 56
PyObject_HasAttr PROC					; COMDAT

; 1001 : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1002 :     PyObject *res = PyObject_GetAttr(v, name);

  00004	e8 00 00 00 00	 call	 PyObject_GetAttr

; 1003 :     if (res != NULL) {

  00009	48 85 c0	 test	 rax, rax
  0000c	74 12		 je	 SHORT $LN1@PyObject_H@2

; 1004 :         Py_DECREF(res);

  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 _Py_DecRef

; 1005 :         return 1;

  00016	b8 01 00 00 00	 mov	 eax, 1

; 1009 : }

  0001b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001f	c3		 ret	 0
$LN1@PyObject_H@2:

; 1006 :     }
; 1007 :     PyErr_Clear();

  00020	e8 00 00 00 00	 call	 PyErr_Clear

; 1008 :     return 0;

  00025	33 c0		 xor	 eax, eax

; 1009 : }

  00027	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002b	c3		 ret	 0
PyObject_HasAttr ENDP
_TEXT	ENDS
PUBLIC	??_C@_09PFNDHGIG@assign?5to?$AA@		; `string'
PUBLIC	??_C@_03ONKLGNNH@del?$AA@			; `string'
PUBLIC	??_C@_0DH@IBBLNBJD@?8?$CF?4100s?8?5object?5has?5only?5read?9on@ ; `string'
PUBLIC	??_C@_0CL@MPONDJNH@?8?$CF?4100s?8?5object?5has?5no?5attribute@ ; `string'
PUBLIC	PyObject_SetAttr
EXTRN	PyUnicode_InternInPlace:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyObject_SetAttr DD imagerel $LN14
	DD	imagerel $LN14+363
	DD	imagerel $unwind$PyObject_SetAttr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_SetAttr DD 081901H
	DD	0b6419H
	DD	0a5419H
	DD	083419H
	DD	070155219H
xdata	ENDS
;	COMDAT ??_C@_09PFNDHGIG@assign?5to?$AA@
CONST	SEGMENT
??_C@_09PFNDHGIG@assign?5to?$AA@ DB 'assign to', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03ONKLGNNH@del?$AA@
CONST	SEGMENT
??_C@_03ONKLGNNH@del?$AA@ DB 'del', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@IBBLNBJD@?8?$CF?4100s?8?5object?5has?5only?5read?9on@
CONST	SEGMENT
??_C@_0DH@IBBLNBJD@?8?$CF?4100s?8?5object?5has?5only?5read?9on@ DB '''%.1'
	DB	'00s'' object has only read-only attributes (%s .%U)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@MPONDJNH@?8?$CF?4100s?8?5object?5has?5no?5attribute@
CONST	SEGMENT
??_C@_0CL@MPONDJNH@?8?$CF?4100s?8?5object?5has?5no?5attribute@ DB '''%.10'
	DB	'0s'' object has no attributes (%s .%U)', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\object.c
CONST	ENDS
;	COMDAT PyObject_SetAttr
_TEXT	SEGMENT
v$ = 64
name$ = 72
value$ = 80
PyObject_SetAttr PROC					; COMDAT

; 1013 : {

$LN14:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00014	57		 push	 rdi
  00015	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1014 :     PyTypeObject *tp = Py_TYPE(v);

  00019	48 8b 59 58	 mov	 rbx, QWORD PTR [rcx+88]
  0001d	49 8b e8	 mov	 rbp, r8

; 1015 :     int err;
; 1016 : 
; 1017 :     if (!PyUnicode_Check(name)) {

  00020	4c 8b 42 58	 mov	 r8, QWORD PTR [rdx+88]
  00024	41 f7 80 00 01
	00 00 00 00 00
	10		 test	 DWORD PTR [r8+256], 268435456 ; 10000000H
  0002f	48 8b fa	 mov	 rdi, rdx
  00032	48 8b f1	 mov	 rsi, rcx
  00035	75 1c		 jne	 SHORT $LN6@PyObject_S@2

; 1018 :         PyErr_Format(PyExc_TypeError,
; 1019 :                      "attribute name must be string, not '%.200s'",
; 1020 :                      name->ob_type->tp_name);

  00037	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  0003b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@IFFJPMHG@attribute?5name?5must?5be?5string?0?5n@
  00049	e8 00 00 00 00	 call	 PyErr_Format

; 1021 :         return -1;

  0004e	e9 00 01 00 00	 jmp	 $LN1@PyObject_S@2
$LN6@PyObject_S@2:

; 1022 :     }
; 1023 :     Py_INCREF(name);

  00053	e8 00 00 00 00	 call	 _Py_PXCTX
  00058	85 c0		 test	 eax, eax
  0005a	75 32		 jne	 SHORT $LN10@PyObject_S@2
  0005c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00063	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0006a	4c 8b cf	 mov	 r9, rdi
  0006d	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00073	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0007b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00080	85 c0		 test	 eax, eax
  00082	75 06		 jne	 SHORT $LN9@PyObject_S@2
  00084	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  00088	74 04		 je	 SHORT $LN10@PyObject_S@2
$LN9@PyObject_S@2:
  0008a	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN10@PyObject_S@2:

; 1024 : 
; 1025 :     PyUnicode_InternInPlace(&name);

  0008e	48 8d 4c 24 48	 lea	 rcx, QWORD PTR name$[rsp]
  00093	e8 00 00 00 00	 call	 PyUnicode_InternInPlace

; 1026 :     if (tp->tp_setattro != NULL) {

  00098	4c 8b 9b f0 00
	00 00		 mov	 r11, QWORD PTR [rbx+240]
  0009f	4d 85 db	 test	 r11, r11
  000a2	74 21		 je	 SHORT $LN5@PyObject_S@2

; 1027 :         err = (*tp->tp_setattro)(v, name, value);

  000a4	48 8b 54 24 48	 mov	 rdx, QWORD PTR name$[rsp]
  000a9	4c 8b c5	 mov	 r8, rbp
  000ac	48 8b ce	 mov	 rcx, rsi
  000af	41 ff d3	 call	 r11

; 1028 :         Py_DECREF(name);

  000b2	48 8b 4c 24 48	 mov	 rcx, QWORD PTR name$[rsp]
  000b7	8b d8		 mov	 ebx, eax
  000b9	e8 00 00 00 00	 call	 _Py_DecRef

; 1029 :         return err;

  000be	8b c3		 mov	 eax, ebx
  000c0	e9 91 00 00 00	 jmp	 $LN7@PyObject_S@2
$LN5@PyObject_S@2:

; 1030 :     }
; 1031 :     if (tp->tp_setattr != NULL) {

  000c5	48 83 bb a0 00
	00 00 00	 cmp	 QWORD PTR [rbx+160], 0

; 1032 :         char *name_str = _PyUnicode_AsString(name);

  000cd	48 8b 4c 24 48	 mov	 rcx, QWORD PTR name$[rsp]
  000d2	74 29		 je	 SHORT $LN4@PyObject_S@2
  000d4	e8 00 00 00 00	 call	 PyUnicode_AsUTF8

; 1033 :         if (name_str == NULL)

  000d9	48 85 c0	 test	 rax, rax

; 1034 :             return -1;

  000dc	74 75		 je	 SHORT $LN1@PyObject_S@2

; 1035 :         err = (*tp->tp_setattr)(v, name_str, value);

  000de	4c 8b c5	 mov	 r8, rbp
  000e1	48 8b d0	 mov	 rdx, rax
  000e4	48 8b ce	 mov	 rcx, rsi
  000e7	ff 93 a0 00 00
	00		 call	 QWORD PTR [rbx+160]

; 1036 :         Py_DECREF(name);

  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR name$[rsp]
  000f2	8b d8		 mov	 ebx, eax
  000f4	e8 00 00 00 00	 call	 _Py_DecRef

; 1037 :         return err;

  000f9	8b c3		 mov	 eax, ebx
  000fb	eb 59		 jmp	 SHORT $LN7@PyObject_S@2
$LN4@PyObject_S@2:

; 1038 :     }
; 1039 :     Py_DECREF(name);

  000fd	e8 00 00 00 00	 call	 _Py_DecRef

; 1040 :     assert(name->ob_refcnt >= 1);
; 1041 :     if (tp->tp_getattr == NULL && tp->tp_getattro == NULL)

  00102	48 83 bb 98 00
	00 00 00	 cmp	 QWORD PTR [rbx+152], 0
  0010a	75 11		 jne	 SHORT $LN2@PyObject_S@2
  0010c	48 83 bb e8 00
	00 00 00	 cmp	 QWORD PTR [rbx+232], 0

; 1042 :         PyErr_Format(PyExc_TypeError,
; 1043 :                      "'%.100s' object has no attributes "
; 1044 :                      "(%s .%U)",
; 1045 :                      tp->tp_name,
; 1046 :                      value==NULL ? "del" : "assign to",
; 1047 :                      name);

  00114	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@MPONDJNH@?8?$CF?4100s?8?5object?5has?5no?5attribute@
  0011b	74 07		 je	 SHORT $LN13@PyObject_S@2
$LN2@PyObject_S@2:

; 1048 :     else
; 1049 :         PyErr_Format(PyExc_TypeError,
; 1050 :                      "'%.100s' object has only read-only attributes "
; 1051 :                      "(%s .%U)",
; 1052 :                      tp->tp_name,
; 1053 :                      value==NULL ? "del" : "assign to",
; 1054 :                      name);

  0011d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DH@IBBLNBJD@?8?$CF?4100s?8?5object?5has?5only?5read?9on@
$LN13@PyObject_S@2:
  00124	4c 8b 43 70	 mov	 r8, QWORD PTR [rbx+112]
  00128	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0012f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_03ONKLGNNH@del?$AA@
  00136	48 85 ed	 test	 rbp, rbp
  00139	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_09PFNDHGIG@assign?5to?$AA@
  00140	4c 0f 44 c8	 cmove	 r9, rax
  00144	48 8b 44 24 48	 mov	 rax, QWORD PTR name$[rsp]
  00149	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0014e	e8 00 00 00 00	 call	 PyErr_Format
$LN1@PyObject_S@2:

; 1055 :     return -1;

  00153	83 c8 ff	 or	 eax, -1
$LN7@PyObject_S@2:

; 1056 : }

  00156	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0015b	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  00160	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  00165	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00169	5f		 pop	 rdi
  0016a	c3		 ret	 0
PyObject_SetAttr ENDP
_TEXT	ENDS
PUBLIC	_PyObject_GetDictPtr
; Function compile flags: /Ogtpy
;	COMDAT _PyObject_GetDictPtr
_TEXT	SEGMENT
obj$ = 8
_PyObject_GetDictPtr PROC				; COMDAT

; 1063 :     Py_ssize_t dictoffset;
; 1064 :     PyTypeObject *tp = Py_TYPE(obj);

  00000	4c 8b 49 58	 mov	 r9, QWORD PTR [rcx+88]
  00004	4c 8b c1	 mov	 r8, rcx

; 1065 : 
; 1066 :     dictoffset = tp->tp_dictoffset;

  00007	49 8b 91 78 01
	00 00		 mov	 rdx, QWORD PTR [r9+376]

; 1067 :     if (dictoffset == 0)

  0000e	48 85 d2	 test	 rdx, rdx
  00011	75 03		 jne	 SHORT $LN6@PyObject_G@2

; 1068 :         return NULL;

  00013	33 c0		 xor	 eax, eax

; 1083 : }

  00015	c3		 ret	 0
$LN6@PyObject_G@2:

; 1069 :     if (dictoffset < 0) {

  00016	79 27		 jns	 SHORT $LN2@PyObject_G@2

; 1070 :         Py_ssize_t tsize;
; 1071 :         size_t size;
; 1072 : 
; 1073 :         tsize = ((PyVarObject *)obj)->ob_size;

  00018	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]

; 1074 :         if (tsize < 0)

  0001c	48 85 c0	 test	 rax, rax
  0001f	79 03		 jns	 SHORT $LN1@PyObject_G@2

; 1075 :             tsize = -tsize;

  00021	48 f7 d8	 neg	 rax
$LN1@PyObject_G@2:

; 1076 :         size = _PyObject_VAR_SIZE(tp, tsize);

  00024	41 8b 89 80 00
	00 00		 mov	 ecx, DWORD PTR [r9+128]
  0002b	0f af c8	 imul	 ecx, eax
  0002e	41 8b 41 78	 mov	 eax, DWORD PTR [r9+120]
  00032	8d 44 01 07	 lea	 eax, DWORD PTR [rcx+rax+7]

; 1077 : 
; 1078 :         dictoffset += (long)size;

  00036	48 98		 cdqe
  00038	48 83 e0 f8	 and	 rax, -8
  0003c	48 03 d0	 add	 rdx, rax
$LN2@PyObject_G@2:

; 1079 :         assert(dictoffset > 0);
; 1080 :         assert(dictoffset % SIZEOF_VOID_P == 0);
; 1081 :     }
; 1082 :     return (PyObject **) ((char *)obj + dictoffset);

  0003f	4a 8d 04 02	 lea	 rax, QWORD PTR [rdx+r8]

; 1083 : }

  00043	c3		 ret	 0
_PyObject_GetDictPtr ENDP
_TEXT	ENDS
PUBLIC	PyObject_SelfIter
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyObject_SelfIter DD imagerel $LN9
	DD	imagerel $LN9+77
	DD	imagerel $unwind$PyObject_SelfIter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_SelfIter DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\object.c
xdata	ENDS
;	COMDAT PyObject_SelfIter
_TEXT	SEGMENT
obj$ = 64
PyObject_SelfIter PROC					; COMDAT

; 1087 : {

$LN9:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 1088 :     Py_INCREF(obj);

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN7@PyObject_S@3
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN3@PyObject_S@3
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN7@PyObject_S@3
$LN3@PyObject_S@3:
  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN7@PyObject_S@3:

; 1089 :     return obj;

  00044	48 8b c3	 mov	 rax, rbx

; 1090 : }

  00047	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0004b	5b		 pop	 rbx
  0004c	c3		 ret	 0
PyObject_SelfIter ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@OJDKODEI@?8?$CF?4200s?8?5object?5is?5not?5iterable?$AA@ ; `string'
PUBLIC	_PyObject_NextNotImplemented
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_NextNotImplemented DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$_PyObject_NextNotImplemented
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_NextNotImplemented DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0CA@OJDKODEI@?8?$CF?4200s?8?5object?5is?5not?5iterable?$AA@
CONST	SEGMENT
??_C@_0CA@OJDKODEI@?8?$CF?4200s?8?5object?5is?5not?5iterable?$AA@ DB '''%'
	DB	'.200s'' object is not iterable', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyObject_NextNotImplemented
_TEXT	SEGMENT
self$ = 48
_PyObject_NextNotImplemented PROC			; COMDAT

; 1112 : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1113 :     PyErr_Format(PyExc_TypeError,
; 1114 :                  "'%.200s' object is not iterable",
; 1115 :                  Py_TYPE(self)->tp_name);

  00004	4c 8b 41 58	 mov	 r8, QWORD PTR [rcx+88]
  00008	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0000f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@OJDKODEI@?8?$CF?4200s?8?5object?5is?5not?5iterable?$AA@
  00016	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  0001a	e8 00 00 00 00	 call	 PyErr_Format

; 1116 :     return NULL;

  0001f	33 c0		 xor	 eax, eax

; 1117 : }

  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	c3		 ret	 0
_PyObject_NextNotImplemented ENDP
_TEXT	ENDS
PUBLIC	_PyObject_GenericGetAttrWithDict
EXTRN	PyDict_GetItem:PROC
EXTRN	_PyType_Lookup:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_PyObject_GenericGetAttrWithDict DD imagerel $LN48
	DD	imagerel $LN48+175
	DD	imagerel $unwind$_PyObject_GenericGetAttrWithDict
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_PyObject_GenericGetAttrWithDict DD imagerel $LN48+175
	DD	imagerel $LN48+600
	DD	imagerel $chain$1$_PyObject_GenericGetAttrWithDict
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_PyObject_GenericGetAttrWithDict DD imagerel $LN48+600
	DD	imagerel $LN48+632
	DD	imagerel $chain$2$_PyObject_GenericGetAttrWithDict
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_PyObject_GenericGetAttrWithDict DD 021H
	DD	imagerel $LN48
	DD	imagerel $LN48+175
	DD	imagerel $unwind$_PyObject_GenericGetAttrWithDict
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_PyObject_GenericGetAttrWithDict DD 040a21H
	DD	0b540aH
	DD	0a3405H
	DD	imagerel $LN48
	DD	imagerel $LN48+175
	DD	imagerel $unwind$_PyObject_GenericGetAttrWithDict
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_GenericGetAttrWithDict DD 081401H
	DD	0d7414H
	DD	0c6414H
	DD	0e0105214H
	DD	0c00cd00eH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\object.c
xdata	ENDS
;	COMDAT _PyObject_GenericGetAttrWithDict
_TEXT	SEGMENT
obj$ = 80
name$ = 88
dict$ = 96
_PyObject_GenericGetAttrWithDict PROC			; COMDAT

; 1123 : {

$LN48:
  00000	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  00005	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0000a	41 54		 push	 r12
  0000c	41 55		 push	 r13
  0000e	41 56		 push	 r14
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1124 :     PyTypeObject *tp = Py_TYPE(obj);

  00014	4c 8b 71 58	 mov	 r14, QWORD PTR [rcx+88]
  00018	49 8b f0	 mov	 rsi, r8

; 1125 :     PyObject *descr = NULL;
; 1126 :     PyObject *res = NULL;
; 1127 :     descrgetfunc f;
; 1128 :     Py_ssize_t dictoffset;
; 1129 :     PyObject **dictptr;
; 1130 : 
; 1131 :     if (!PyUnicode_Check(name)){

  0001b	4c 8b 42 58	 mov	 r8, QWORD PTR [rdx+88]
  0001f	33 ff		 xor	 edi, edi
  00021	41 f7 80 00 01
	00 00 00 00 00
	10		 test	 DWORD PTR [r8+256], 268435456 ; 10000000H
  0002c	4c 8b e2	 mov	 r12, rdx
  0002f	4c 8b e9	 mov	 r13, rcx
  00032	75 1e		 jne	 SHORT $LN22@PyObject_G@3

; 1132 :         PyErr_Format(PyExc_TypeError,
; 1133 :                      "attribute name must be string, not '%.200s'",
; 1134 :                      name->ob_type->tp_name);

  00034	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00038	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0003f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@IFFJPMHG@attribute?5name?5must?5be?5string?0?5n@
  00046	e8 00 00 00 00	 call	 PyErr_Format

; 1135 :         return NULL;

  0004b	33 c0		 xor	 eax, eax
  0004d	e9 11 02 00 00	 jmp	 $LN23@PyObject_G@3
$LN22@PyObject_G@3:

; 1136 :     }
; 1137 :     else
; 1138 :         Py_INCREF(name);

  00052	e8 00 00 00 00	 call	 _Py_PXCTX
  00057	85 c0		 test	 eax, eax
  00059	75 35		 jne	 SHORT $LN26@PyObject_G@3
  0005b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00069	4d 8b cc	 mov	 r9, r12
  0006c	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00072	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0007a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0007f	85 c0		 test	 eax, eax
  00081	75 08		 jne	 SHORT $LN25@PyObject_G@3
  00083	41 f6 44 24 20
	20		 test	 BYTE PTR [r12+32], 32	; 00000020H
  00089	74 05		 je	 SHORT $LN26@PyObject_G@3
$LN25@PyObject_G@3:
  0008b	49 ff 44 24 50	 inc	 QWORD PTR [r12+80]
$LN26@PyObject_G@3:

; 1139 : 
; 1140 :     if (tp->tp_dict == NULL) {

  00090	49 39 be 60 01
	00 00		 cmp	 QWORD PTR [r14+352], rdi
  00097	75 10		 jne	 SHORT $LN19@PyObject_G@3

; 1141 :         if (PyType_Ready(tp) < 0)

  00099	49 8b ce	 mov	 rcx, r14
  0009c	e8 00 00 00 00	 call	 PyType_Ready
  000a1	85 c0		 test	 eax, eax
  000a3	0f 88 af 01 00
	00		 js	 $LN3@PyObject_G@3
$LN19@PyObject_G@3:

; 1142 :             goto done;
; 1143 :     }
; 1144 : 
; 1145 :     descr = _PyType_Lookup(tp, name);

  000a9	49 8b d4	 mov	 rdx, r12
  000ac	49 8b ce	 mov	 rcx, r14
  000af	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  000b4	48 89 6c 24 58	 mov	 QWORD PTR [rsp+88], rbp
  000b9	e8 00 00 00 00	 call	 _PyType_Lookup
  000be	48 8b d8	 mov	 rbx, rax

; 1146 :     Py_XINCREF(descr);

  000c1	48 85 c0	 test	 rax, rax
  000c4	74 3b		 je	 SHORT $LN17@PyObject_G@3
  000c6	e8 00 00 00 00	 call	 _Py_PXCTX
  000cb	85 c0		 test	 eax, eax
  000cd	75 32		 jne	 SHORT $LN17@PyObject_G@3
  000cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000dd	4c 8b cb	 mov	 r9, rbx
  000e0	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000e6	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000ee	e8 00 00 00 00	 call	 _PyParallel_Guard
  000f3	85 c0		 test	 eax, eax
  000f5	75 06		 jne	 SHORT $LN29@PyObject_G@3
  000f7	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000fb	74 04		 je	 SHORT $LN17@PyObject_G@3
$LN29@PyObject_G@3:
  000fd	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN17@PyObject_G@3:

; 1147 : 
; 1148 :     f = NULL;

  00101	48 8b ef	 mov	 rbp, rdi

; 1149 :     if (descr != NULL) {

  00104	48 85 db	 test	 rbx, rbx
  00107	74 1d		 je	 SHORT $LN13@PyObject_G@3

; 1150 :         f = descr->ob_type->tp_descr_get;

  00109	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0010d	48 8b a8 68 01
	00 00		 mov	 rbp, QWORD PTR [rax+360]

; 1151 :         if (f != NULL && PyDescr_IsData(descr)) {

  00114	48 85 ed	 test	 rbp, rbp
  00117	74 0d		 je	 SHORT $LN13@PyObject_G@3
  00119	48 39 b8 70 01
	00 00		 cmp	 QWORD PTR [rax+368], rdi

; 1152 :             res = f(descr, obj, (PyObject *)obj->ob_type);
; 1153 :             goto done;

  00120	0f 85 81 00 00
	00		 jne	 $LN47@PyObject_G@3
$LN13@PyObject_G@3:

; 1154 :         }
; 1155 :     }
; 1156 : 
; 1157 :     if (dict == NULL) {

  00126	48 85 f6	 test	 rsi, rsi
  00129	75 3e		 jne	 SHORT $LN44@PyObject_G@3

; 1158 :         /* Inline _PyObject_GetDictPtr */
; 1159 :         dictoffset = tp->tp_dictoffset;

  0012b	49 8b 96 78 01
	00 00		 mov	 rdx, QWORD PTR [r14+376]

; 1160 :         if (dictoffset != 0) {

  00132	48 85 d2	 test	 rdx, rdx
  00135	74 67		 je	 SHORT $LN8@PyObject_G@3

; 1161 :             if (dictoffset < 0) {

  00137	79 27		 jns	 SHORT $LN10@PyObject_G@3

; 1162 :                 Py_ssize_t tsize;
; 1163 :                 size_t size;
; 1164 : 
; 1165 :                 tsize = ((PyVarObject *)obj)->ob_size;

  00139	49 8b 45 60	 mov	 rax, QWORD PTR [r13+96]

; 1166 :                 if (tsize < 0)

  0013d	48 85 c0	 test	 rax, rax
  00140	79 03		 jns	 SHORT $LN9@PyObject_G@3

; 1167 :                     tsize = -tsize;

  00142	48 f7 d8	 neg	 rax
$LN9@PyObject_G@3:

; 1168 :                 size = _PyObject_VAR_SIZE(tp, tsize);

  00145	41 8b 8e 80 00
	00 00		 mov	 ecx, DWORD PTR [r14+128]
  0014c	0f af c8	 imul	 ecx, eax
  0014f	41 8b 46 78	 mov	 eax, DWORD PTR [r14+120]
  00153	8d 44 01 07	 lea	 eax, DWORD PTR [rcx+rax+7]

; 1169 : 
; 1170 :                 dictoffset += (long)size;

  00157	48 98		 cdqe
  00159	48 83 e0 f8	 and	 rax, -8
  0015d	48 03 d0	 add	 rdx, rax
$LN10@PyObject_G@3:

; 1171 :                 assert(dictoffset > 0);
; 1172 :                 assert(dictoffset % SIZEOF_VOID_P == 0);
; 1173 :             }
; 1174 :             dictptr = (PyObject **) ((char *)obj + dictoffset);
; 1175 :             dict = *dictptr;

  00160	4a 8b 34 2a	 mov	 rsi, QWORD PTR [rdx+r13]

; 1176 :         }
; 1177 :     }
; 1178 :     if (dict != NULL) {

  00164	48 85 f6	 test	 rsi, rsi
  00167	74 35		 je	 SHORT $LN8@PyObject_G@3
$LN44@PyObject_G@3:

; 1179 :         Py_INCREF(dict);

  00169	48 8b ce	 mov	 rcx, rsi
  0016c	e8 00 00 00 00	 call	 _Py_IncRef

; 1180 :         res = PyDict_GetItem(dict, name);

  00171	49 8b d4	 mov	 rdx, r12
  00174	48 8b ce	 mov	 rcx, rsi
  00177	e8 00 00 00 00	 call	 PyDict_GetItem
  0017c	48 8b f8	 mov	 rdi, rax

; 1181 :         if (res != NULL) {

  0017f	48 85 c0	 test	 rax, rax
  00182	74 12		 je	 SHORT $LN7@PyObject_G@3

; 1182 :             Py_INCREF(res);

  00184	48 8b c8	 mov	 rcx, rax
  00187	e8 00 00 00 00	 call	 _Py_IncRef

; 1183 :             Py_DECREF(dict);

  0018c	48 8b ce	 mov	 rcx, rsi
  0018f	e8 00 00 00 00	 call	 _Py_DecRef

; 1184 :             goto done;

  00194	eb 20		 jmp	 SHORT $done$120994
$LN7@PyObject_G@3:

; 1185 :         }
; 1186 :         Py_DECREF(dict);

  00196	48 8b ce	 mov	 rcx, rsi
  00199	e8 00 00 00 00	 call	 _Py_DecRef
$LN8@PyObject_G@3:

; 1187 :     }
; 1188 : 
; 1189 :     if (f != NULL) {

  0019e	48 85 ed	 test	 rbp, rbp
  001a1	0f 84 83 00 00
	00		 je	 $LN6@PyObject_G@3
$LN47@PyObject_G@3:

; 1190 :         res = f(descr, obj, (PyObject *)Py_TYPE(obj));

  001a7	4d 8b 45 58	 mov	 r8, QWORD PTR [r13+88]
  001ab	49 8b d5	 mov	 rdx, r13
  001ae	48 8b cb	 mov	 rcx, rbx
  001b1	ff d5		 call	 rbp
  001b3	48 8b f8	 mov	 rdi, rax
$done$120994:

; 1203 :   done:
; 1204 :     Py_XDECREF(descr);

  001b6	48 85 db	 test	 rbx, rbx
  001b9	0f 84 8f 00 00
	00		 je	 $LN46@PyObject_G@3
  001bf	e8 00 00 00 00	 call	 _Py_PXCTX
  001c4	85 c0		 test	 eax, eax
  001c6	0f 85 82 00 00
	00		 jne	 $LN46@PyObject_G@3
  001cc	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  001d0	a8 20		 test	 al, 32			; 00000020H
  001d2	75 4c		 jne	 SHORT $LN37@PyObject_G@3
  001d4	84 c0		 test	 al, al
  001d6	78 48		 js	 SHORT $LN37@PyObject_G@3
  001d8	a8 02		 test	 al, 2
  001da	75 72		 jne	 SHORT $LN46@PyObject_G@3
  001dc	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  001e0	75 6c		 jne	 SHORT $LN46@PyObject_G@3
  001e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  001f0	4c 8b cb	 mov	 r9, rbx
  001f3	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001f9	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00201	e8 00 00 00 00	 call	 _PyParallel_Guard
  00206	48 8b cb	 mov	 rcx, rbx
  00209	85 c0		 test	 eax, eax
  0020b	74 07		 je	 SHORT $LN42@PyObject_G@3
  0020d	e8 00 00 00 00	 call	 _Px_Dealloc
  00212	eb 3a		 jmp	 SHORT $LN46@PyObject_G@3
$LN42@PyObject_G@3:
  00214	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00218	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0021e	eb 2e		 jmp	 SHORT $LN46@PyObject_G@3
$LN37@PyObject_G@3:
  00220	48 8b cb	 mov	 rcx, rbx
  00223	e8 00 00 00 00	 call	 Px_DecRef
  00228	eb 24		 jmp	 SHORT $LN46@PyObject_G@3
$LN6@PyObject_G@3:

; 1191 :         goto done;
; 1192 :     }
; 1193 : 
; 1194 :     if (descr != NULL) {

  0022a	48 85 db	 test	 rbx, rbx
  0022d	74 05		 je	 SHORT $LN5@PyObject_G@3

; 1195 :         res = descr;

  0022f	48 8b fb	 mov	 rdi, rbx

; 1196 :         descr = NULL;
; 1197 :         goto done;

  00232	eb 1a		 jmp	 SHORT $LN46@PyObject_G@3
$LN5@PyObject_G@3:

; 1198 :     }
; 1199 : 
; 1200 :     PyErr_Format(PyExc_AttributeError,
; 1201 :                  "'%.50s' object has no attribute '%U'",
; 1202 :                  tp->tp_name, name);

  00234	4d 8b 46 70	 mov	 r8, QWORD PTR [r14+112]
  00238	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  0023f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@KKJGINOJ@?8?$CF?450s?8?5object?5has?5no?5attribute?5@
  00246	4d 8b cc	 mov	 r9, r12
  00249	e8 00 00 00 00	 call	 PyErr_Format
$LN46@PyObject_G@3:
  0024e	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00253	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
$LN3@PyObject_G@3:

; 1205 :     Py_DECREF(name);

  00258	49 8b cc	 mov	 rcx, r12
  0025b	e8 00 00 00 00	 call	 _Py_DecRef

; 1206 :     return res;

  00260	48 8b c7	 mov	 rax, rdi
$LN23@PyObject_G@3:

; 1207 : }

  00263	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  00268	48 8b 7c 24 68	 mov	 rdi, QWORD PTR [rsp+104]
  0026d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00271	41 5e		 pop	 r14
  00273	41 5d		 pop	 r13
  00275	41 5c		 pop	 r12
  00277	c3		 ret	 0
_PyObject_GenericGetAttrWithDict ENDP
_TEXT	ENDS
PUBLIC	PyObject_GenericGetAttr
; Function compile flags: /Ogtpy
;	COMDAT PyObject_GenericGetAttr
_TEXT	SEGMENT
obj$ = 8
name$ = 16
PyObject_GenericGetAttr PROC				; COMDAT

; 1212 :     return _PyObject_GenericGetAttrWithDict(obj, name, NULL);

  00000	45 33 c0	 xor	 r8d, r8d

; 1213 : }

  00003	e9 00 00 00 00	 jmp	 _PyObject_GenericGetAttrWithDict
PyObject_GenericGetAttr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@MBODLJBI@?8?$CF?450s?8?5object?5attribute?5?8?$CFU?8?5is@ ; `string'
PUBLIC	??_C@_0CG@EOFOALDN@?8?$CF?4100s?8?5object?5has?5no?5attribute@ ; `string'
PUBLIC	_PyObject_GenericSetAttrWithDict
EXTRN	PyErr_SetObject:PROC
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_KeyError:QWORD
EXTRN	PyDict_SetItem:PROC
EXTRN	PyDict_DelItem:PROC
EXTRN	_PyObjectDict_SetItem:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_PyObject_GenericSetAttrWithDict DD imagerel $LN37
	DD	imagerel $LN37+115
	DD	imagerel $unwind$_PyObject_GenericSetAttrWithDict
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_PyObject_GenericSetAttrWithDict DD imagerel $LN37+115
	DD	imagerel $LN37+515
	DD	imagerel $chain$0$_PyObject_GenericSetAttrWithDict
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_PyObject_GenericSetAttrWithDict DD imagerel $LN37+515
	DD	imagerel $LN37+543
	DD	imagerel $chain$1$_PyObject_GenericSetAttrWithDict
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_PyObject_GenericSetAttrWithDict DD 021H
	DD	imagerel $LN37
	DD	imagerel $LN37+115
	DD	imagerel $unwind$_PyObject_GenericSetAttrWithDict
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_PyObject_GenericSetAttrWithDict DD 020521H
	DD	0a7405H
	DD	imagerel $LN37
	DD	imagerel $LN37+115
	DD	imagerel $unwind$_PyObject_GenericSetAttrWithDict
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_GenericSetAttrWithDict DD 0a1901H
	DD	0d6419H
	DD	0c5419H
	DD	0b3419H
	DD	0e0155219H
	DD	0c011d013H
xdata	ENDS
;	COMDAT ??_C@_0CL@MBODLJBI@?8?$CF?450s?8?5object?5attribute?5?8?$CFU?8?5is@
CONST	SEGMENT
??_C@_0CL@MBODLJBI@?8?$CF?450s?8?5object?5attribute?5?8?$CFU?8?5is@ DB ''''
	DB	'%.50s'' object attribute ''%U'' is read-only', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@EOFOALDN@?8?$CF?4100s?8?5object?5has?5no?5attribute@
CONST	SEGMENT
??_C@_0CG@EOFOALDN@?8?$CF?4100s?8?5object?5has?5no?5attribute@ DB '''%.10'
	DB	'0s'' object has no attribute ''%U''', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\object.c
CONST	ENDS
;	COMDAT _PyObject_GenericSetAttrWithDict
_TEXT	SEGMENT
obj$ = 80
name$ = 88
value$ = 96
dict$ = 104
_PyObject_GenericSetAttrWithDict PROC			; COMDAT

; 1218 : {

$LN37:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	41 54		 push	 r12
  00011	41 55		 push	 r13
  00013	41 56		 push	 r14
  00015	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1219 :     PyTypeObject *tp = Py_TYPE(obj);

  00019	4c 8b 69 58	 mov	 r13, QWORD PTR [rcx+88]
  0001d	4d 8b e0	 mov	 r12, r8

; 1220 :     PyObject *descr;
; 1221 :     descrsetfunc f;
; 1222 :     PyObject **dictptr;
; 1223 :     int res = -1;
; 1224 : 
; 1225 :     if (!PyUnicode_Check(name)){

  00020	4c 8b 42 58	 mov	 r8, QWORD PTR [rdx+88]
  00024	83 ce ff	 or	 esi, -1
  00027	41 f7 80 00 01
	00 00 00 00 00
	10		 test	 DWORD PTR [r8+256], 268435456 ; 10000000H
  00032	49 8b e9	 mov	 rbp, r9
  00035	48 8b da	 mov	 rbx, rdx
  00038	4c 8b f1	 mov	 r14, rcx
  0003b	75 1c		 jne	 SHORT $LN21@PyObject_G@4

; 1226 :         PyErr_Format(PyExc_TypeError,
; 1227 :                      "attribute name must be string, not '%.200s'",
; 1228 :                      name->ob_type->tp_name);

  0003d	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00041	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@IFFJPMHG@attribute?5name?5must?5be?5string?0?5n@
  0004f	e8 00 00 00 00	 call	 PyErr_Format

; 1229 :         return -1;

  00054	e9 aa 01 00 00	 jmp	 $LN33@PyObject_G@4
$LN21@PyObject_G@4:

; 1230 :     }
; 1231 : 
; 1232 :     if (tp->tp_dict == NULL && PyType_Ready(tp) < 0)

  00059	49 83 bd 60 01
	00 00 00	 cmp	 QWORD PTR [r13+352], 0
  00061	75 10		 jne	 SHORT $LN20@PyObject_G@4
  00063	49 8b cd	 mov	 rcx, r13
  00066	e8 00 00 00 00	 call	 PyType_Ready
  0006b	85 c0		 test	 eax, eax

; 1233 :         return -1;

  0006d	0f 88 90 01 00
	00		 js	 $LN33@PyObject_G@4
$LN20@PyObject_G@4:
  00073	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi

; 1234 : 
; 1235 :     Py_INCREF(name);

  00078	e8 00 00 00 00	 call	 _Py_PXCTX
  0007d	85 c0		 test	 eax, eax
  0007f	75 32		 jne	 SHORT $LN25@PyObject_G@4
  00081	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00088	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0008f	4c 8b cb	 mov	 r9, rbx
  00092	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00098	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000a0	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a5	85 c0		 test	 eax, eax
  000a7	75 06		 jne	 SHORT $LN24@PyObject_G@4
  000a9	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000ad	74 04		 je	 SHORT $LN25@PyObject_G@4
$LN24@PyObject_G@4:
  000af	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN25@PyObject_G@4:

; 1236 : 
; 1237 :     descr = _PyType_Lookup(tp, name);

  000b3	48 8b d3	 mov	 rdx, rbx
  000b6	49 8b cd	 mov	 rcx, r13
  000b9	e8 00 00 00 00	 call	 _PyType_Lookup
  000be	48 8b f8	 mov	 rdi, rax

; 1238 :     Py_XINCREF(descr);

  000c1	48 85 c0	 test	 rax, rax
  000c4	74 3b		 je	 SHORT $LN18@PyObject_G@4
  000c6	e8 00 00 00 00	 call	 _Py_PXCTX
  000cb	85 c0		 test	 eax, eax
  000cd	75 32		 jne	 SHORT $LN18@PyObject_G@4
  000cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000dd	4c 8b cf	 mov	 r9, rdi
  000e0	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000e6	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000ee	e8 00 00 00 00	 call	 _PyParallel_Guard
  000f3	85 c0		 test	 eax, eax
  000f5	75 06		 jne	 SHORT $LN28@PyObject_G@4
  000f7	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  000fb	74 04		 je	 SHORT $LN18@PyObject_G@4
$LN28@PyObject_G@4:
  000fd	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN18@PyObject_G@4:

; 1239 : 
; 1240 :     f = NULL;

  00101	45 33 d2	 xor	 r10d, r10d

; 1241 :     if (descr != NULL) {

  00104	48 85 ff	 test	 rdi, rdi
  00107	74 23		 je	 SHORT $LN14@PyObject_G@4

; 1242 :         f = descr->ob_type->tp_descr_set;

  00109	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  0010d	4c 8b 90 70 01
	00 00		 mov	 r10, QWORD PTR [rax+368]

; 1243 :         if (f != NULL && PyDescr_IsData(descr)) {

  00114	4d 85 d2	 test	 r10, r10
  00117	74 13		 je	 SHORT $LN14@PyObject_G@4

; 1244 :             res = f(descr, obj, value);

  00119	4d 8b c4	 mov	 r8, r12
  0011c	49 8b d6	 mov	 rdx, r14
  0011f	48 8b cf	 mov	 rcx, rdi
  00122	41 ff d2	 call	 r10
  00125	8b f0		 mov	 esi, eax

; 1245 :             goto done;

  00127	e9 bd 00 00 00	 jmp	 $done$121083
$LN14@PyObject_G@4:

; 1246 :         }
; 1247 :     }
; 1248 : 
; 1249 :     if (dict == NULL) {

  0012c	48 85 ed	 test	 rbp, rbp
  0012f	75 69		 jne	 SHORT $LN32@PyObject_G@4

; 1250 :         dictptr = _PyObject_GetDictPtr(obj);

  00131	49 8b ce	 mov	 rcx, r14
  00134	e8 00 00 00 00	 call	 _PyObject_GetDictPtr

; 1251 :         if (dictptr != NULL) {

  00139	48 85 c0	 test	 rax, rax
  0013c	74 18		 je	 SHORT $LN10@PyObject_G@4

; 1252 :             res = _PyObjectDict_SetItem(Py_TYPE(obj), dictptr, name, value);

  0013e	49 8b 4e 58	 mov	 rcx, QWORD PTR [r14+88]
  00142	4d 8b cc	 mov	 r9, r12
  00145	4c 8b c3	 mov	 r8, rbx
  00148	48 8b d0	 mov	 rdx, rax
  0014b	e8 00 00 00 00	 call	 _PyObjectDict_SetItem
  00150	8b f0		 mov	 esi, eax

; 1253 :             if (res < 0 && PyErr_ExceptionMatches(PyExc_KeyError))

  00152	85 c0		 test	 eax, eax

; 1254 :                 PyErr_SetObject(PyExc_AttributeError, name);
; 1255 :             goto done;

  00154	eb 72		 jmp	 SHORT $LN35@PyObject_G@4
$LN10@PyObject_G@4:

; 1267 :         goto done;
; 1268 :     }
; 1269 : 
; 1270 :     if (f != NULL) {

  00156	4d 85 d2	 test	 r10, r10
  00159	74 10		 je	 SHORT $LN6@PyObject_G@4

; 1271 :         res = f(descr, obj, value);

  0015b	4d 8b c4	 mov	 r8, r12
  0015e	49 8b d6	 mov	 rdx, r14
  00161	48 8b cf	 mov	 rcx, rdi
  00164	41 ff d2	 call	 r10
  00167	8b f0		 mov	 esi, eax

; 1272 :         goto done;

  00169	eb 7e		 jmp	 SHORT $done$121083
$LN6@PyObject_G@4:

; 1273 :     }
; 1274 : 
; 1275 :     if (descr == NULL) {
; 1276 :         PyErr_Format(PyExc_AttributeError,
; 1277 :                      "'%.100s' object has no attribute '%U'",
; 1278 :                      tp->tp_name, name);

  0016b	4d 8b 45 70	 mov	 r8, QWORD PTR [r13+112]
  0016f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  00176	4c 8b cb	 mov	 r9, rbx
  00179	48 85 ff	 test	 rdi, rdi
  0017c	75 0e		 jne	 SHORT $LN5@PyObject_G@4
  0017e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@EOFOALDN@?8?$CF?4100s?8?5object?5has?5no?5attribute@
  00185	e8 00 00 00 00	 call	 PyErr_Format

; 1279 :         goto done;

  0018a	eb 6a		 jmp	 SHORT $LN3@PyObject_G@4
$LN5@PyObject_G@4:

; 1280 :     }
; 1281 : 
; 1282 :     PyErr_Format(PyExc_AttributeError,
; 1283 :                  "'%.50s' object attribute '%U' is read-only",
; 1284 :                  tp->tp_name, name);

  0018c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@MBODLJBI@?8?$CF?450s?8?5object?5attribute?5?8?$CFU?8?5is@
  00193	e8 00 00 00 00	 call	 PyErr_Format
  00198	eb 4f		 jmp	 SHORT $done$121083
$LN32@PyObject_G@4:

; 1256 :         }
; 1257 :     }
; 1258 :     if (dict != NULL) {
; 1259 :         Py_INCREF(dict);

  0019a	48 8b cd	 mov	 rcx, rbp
  0019d	e8 00 00 00 00	 call	 _Py_IncRef

; 1260 :         if (value == NULL)
; 1261 :             res = PyDict_DelItem(dict, name);

  001a2	48 8b d3	 mov	 rdx, rbx
  001a5	48 8b cd	 mov	 rcx, rbp
  001a8	4d 85 e4	 test	 r12, r12
  001ab	75 07		 jne	 SHORT $LN9@PyObject_G@4
  001ad	e8 00 00 00 00	 call	 PyDict_DelItem

; 1262 :         else

  001b2	eb 08		 jmp	 SHORT $LN36@PyObject_G@4
$LN9@PyObject_G@4:

; 1263 :             res = PyDict_SetItem(dict, name, value);

  001b4	4d 8b c4	 mov	 r8, r12
  001b7	e8 00 00 00 00	 call	 PyDict_SetItem
$LN36@PyObject_G@4:

; 1264 :         Py_DECREF(dict);

  001bc	48 8b cd	 mov	 rcx, rbp
  001bf	8b f0		 mov	 esi, eax
  001c1	e8 00 00 00 00	 call	 _Py_DecRef

; 1265 :         if (res < 0 && PyErr_ExceptionMatches(PyExc_KeyError))

  001c6	85 f6		 test	 esi, esi
$LN35@PyObject_G@4:
  001c8	79 1f		 jns	 SHORT $done$121083
  001ca	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_KeyError
  001d1	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  001d6	85 c0		 test	 eax, eax
  001d8	74 0f		 je	 SHORT $done$121083

; 1266 :             PyErr_SetObject(PyExc_AttributeError, name);

  001da	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  001e1	48 8b d3	 mov	 rdx, rbx
  001e4	e8 00 00 00 00	 call	 PyErr_SetObject
$done$121083:

; 1285 :   done:
; 1286 :     Py_XDECREF(descr);

  001e9	48 85 ff	 test	 rdi, rdi
  001ec	74 08		 je	 SHORT $LN3@PyObject_G@4
  001ee	48 8b cf	 mov	 rcx, rdi
  001f1	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@PyObject_G@4:

; 1287 :     Py_DECREF(name);

  001f6	48 8b cb	 mov	 rcx, rbx
  001f9	e8 00 00 00 00	 call	 _Py_DecRef
  001fe	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]
$LN33@PyObject_G@4:

; 1288 :     return res;
; 1289 : }

  00203	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  00208	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
  0020d	8b c6		 mov	 eax, esi
  0020f	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  00214	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00218	41 5e		 pop	 r14
  0021a	41 5d		 pop	 r13
  0021c	41 5c		 pop	 r12
  0021e	c3		 ret	 0
_PyObject_GenericSetAttrWithDict ENDP
_TEXT	ENDS
PUBLIC	PyObject_GenericSetAttr
; Function compile flags: /Ogtpy
;	COMDAT PyObject_GenericSetAttr
_TEXT	SEGMENT
obj$ = 8
name$ = 16
value$ = 24
PyObject_GenericSetAttr PROC				; COMDAT

; 1294 :     return _PyObject_GenericSetAttrWithDict(obj, name, value, NULL);

  00000	45 33 c9	 xor	 r9d, r9d

; 1295 : }

  00003	e9 00 00 00 00	 jmp	 _PyObject_GenericSetAttrWithDict
PyObject_GenericSetAttr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DF@NPFGEKPJ@__dict__?5must?5be?5set?5to?5a?5dictio@ ; `string'
PUBLIC	??_C@_0BH@JKEKAFKG@cannot?5delete?5__dict__?$AA@ ; `string'
PUBLIC	??_C@_0BM@OFDEHIMA@This?5object?5has?5no?5__dict__?$AA@ ; `string'
PUBLIC	PyObject_GenericSetDict
EXTRN	PyErr_SetString:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyObject_GenericSetDict DD imagerel $LN18
	DD	imagerel $LN18+252
	DD	imagerel $unwind$PyObject_GenericSetDict
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_GenericSetDict DD 069c01H
	DD	08749cH
	DD	09340aH
	DD	06006520aH
xdata	ENDS
;	COMDAT ??_C@_0DF@NPFGEKPJ@__dict__?5must?5be?5set?5to?5a?5dictio@
CONST	SEGMENT
??_C@_0DF@NPFGEKPJ@__dict__?5must?5be?5set?5to?5a?5dictio@ DB '__dict__ m'
	DB	'ust be set to a dictionary, not a ''%.200s''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JKEKAFKG@cannot?5delete?5__dict__?$AA@
CONST	SEGMENT
??_C@_0BH@JKEKAFKG@cannot?5delete?5__dict__?$AA@ DB 'cannot delete __dict'
	DB	'__', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@OFDEHIMA@This?5object?5has?5no?5__dict__?$AA@
CONST	SEGMENT
??_C@_0BM@OFDEHIMA@This?5object?5has?5no?5__dict__?$AA@ DB 'This object h'
	DB	'as no __dict__', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\object.c
CONST	ENDS
;	COMDAT PyObject_GenericSetDict
_TEXT	SEGMENT
obj$ = 64
value$ = 72
context$ = 80
PyObject_GenericSetDict PROC				; COMDAT

; 1299 : {

$LN18:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b da	 mov	 rbx, rdx

; 1300 :     PyObject *dict, **dictptr = _PyObject_GetDictPtr(obj);

  0000d	e8 00 00 00 00	 call	 _PyObject_GetDictPtr
  00012	48 8b f0	 mov	 rsi, rax

; 1301 :     if (dictptr == NULL) {

  00015	48 85 c0	 test	 rax, rax
  00018	75 21		 jne	 SHORT $LN11@PyObject_G@5

; 1302 :         PyErr_SetString(PyExc_AttributeError,
; 1303 :                         "This object has no __dict__");

  0001a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@OFDEHIMA@This?5object?5has?5no?5__dict__?$AA@
  00028	e8 00 00 00 00	 call	 PyErr_SetString

; 1304 :         return -1;

  0002d	83 c8 ff	 or	 eax, -1

; 1320 :     return 0;
; 1321 : }

  00030	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00035	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00039	5e		 pop	 rsi
  0003a	c3		 ret	 0
$LN11@PyObject_G@5:

; 1305 :     }
; 1306 :     if (value == NULL) {

  0003b	48 85 db	 test	 rbx, rbx
  0003e	75 21		 jne	 SHORT $LN10@PyObject_G@5

; 1307 :         PyErr_SetString(PyExc_TypeError, "cannot delete __dict__");

  00040	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00047	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@JKEKAFKG@cannot?5delete?5__dict__?$AA@
  0004e	e8 00 00 00 00	 call	 PyErr_SetString

; 1308 :         return -1;

  00053	83 c8 ff	 or	 eax, -1

; 1320 :     return 0;
; 1321 : }

  00056	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  0005b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005f	5e		 pop	 rsi
  00060	c3		 ret	 0
$LN10@PyObject_G@5:

; 1309 :     }
; 1310 :     if (!PyDict_Check(value)) {

  00061	4c 8b 43 58	 mov	 r8, QWORD PTR [rbx+88]
  00065	41 f7 80 00 01
	00 00 00 00 00
	20		 test	 DWORD PTR [r8+256], 536870912 ; 20000000H
  00070	75 25		 jne	 SHORT $LN9@PyObject_G@5

; 1311 :         PyErr_Format(PyExc_TypeError,
; 1312 :                      "__dict__ must be set to a dictionary, "
; 1313 :                      "not a '%.200s'", Py_TYPE(value)->tp_name);

  00072	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00076	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0007d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DF@NPFGEKPJ@__dict__?5must?5be?5set?5to?5a?5dictio@
  00084	e8 00 00 00 00	 call	 PyErr_Format

; 1314 :         return -1;

  00089	83 c8 ff	 or	 eax, -1

; 1320 :     return 0;
; 1321 : }

  0008c	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00091	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00095	5e		 pop	 rsi
  00096	c3		 ret	 0
$LN9@PyObject_G@5:
  00097	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi

; 1315 :     }
; 1316 :     dict = *dictptr;

  0009c	48 8b 38	 mov	 rdi, QWORD PTR [rax]

; 1317 :     Py_XINCREF(value);

  0009f	e8 00 00 00 00	 call	 _Py_PXCTX
  000a4	85 c0		 test	 eax, eax
  000a6	75 32		 jne	 SHORT $LN7@PyObject_G@5
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000b6	4c 8b cb	 mov	 r9, rbx
  000b9	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000bf	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000c7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cc	85 c0		 test	 eax, eax
  000ce	75 06		 jne	 SHORT $LN14@PyObject_G@5
  000d0	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000d4	74 04		 je	 SHORT $LN7@PyObject_G@5
$LN14@PyObject_G@5:
  000d6	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN7@PyObject_G@5:

; 1318 :     *dictptr = value;

  000da	48 89 1e	 mov	 QWORD PTR [rsi], rbx

; 1319 :     Py_XDECREF(dict);

  000dd	48 85 ff	 test	 rdi, rdi
  000e0	74 08		 je	 SHORT $LN3@PyObject_G@5
  000e2	48 8b cf	 mov	 rcx, rdi
  000e5	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@PyObject_G@5:

; 1320 :     return 0;
; 1321 : }

  000ea	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  000ef	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000f4	33 c0		 xor	 eax, eax
  000f6	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000fa	5e		 pop	 rsi
  000fb	c3		 ret	 0
PyObject_GenericSetDict ENDP
_TEXT	ENDS
PUBLIC	PyObject_IsTrue
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_IsTrue DD imagerel $LN15
	DD	imagerel $LN15+169
	DD	imagerel $unwind$PyObject_IsTrue
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_IsTrue DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyObject_IsTrue
_TEXT	SEGMENT
v$ = 48
PyObject_IsTrue PROC					; COMDAT

; 1329 : {

$LN15:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1330 :     Py_ssize_t res;
; 1331 :     if (v == Py_True)

  00004	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0000b	48 3b c8	 cmp	 rcx, rax

; 1332 :         return 1;

  0000e	0f 84 8b 00 00
	00		 je	 $LN2@PyObject_I@5

; 1333 :     if (v == Py_False)

  00014	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  0001b	48 3b c8	 cmp	 rcx, rax
  0001e	75 07		 jne	 SHORT $LN9@PyObject_I@5
$LN14@PyObject_I@5:

; 1334 :         return 0;

  00020	33 c0		 xor	 eax, eax

; 1350 : }

  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
$LN9@PyObject_I@5:

; 1335 :     if (v == Py_None)

  00027	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0002e	48 3b c8	 cmp	 rcx, rax

; 1336 :         return 0;

  00031	74 ed		 je	 SHORT $LN14@PyObject_I@5

; 1337 :     else if (v->ob_type->tp_as_number != NULL &&
; 1338 :              v->ob_type->tp_as_number->nb_bool != NULL)

  00033	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00037	48 8b 90 b8 00
	00 00		 mov	 rdx, QWORD PTR [rax+184]
  0003e	48 85 d2	 test	 rdx, rdx
  00041	74 21		 je	 SHORT $LN6@PyObject_I@5
  00043	4c 8b 42 48	 mov	 r8, QWORD PTR [rdx+72]
  00047	4d 85 c0	 test	 r8, r8
  0004a	74 18		 je	 SHORT $LN6@PyObject_I@5

; 1339 :         res = (*v->ob_type->tp_as_number->nb_bool)(v);

  0004c	41 ff d0	 call	 r8
  0004f	48 63 c8	 movsxd	 rcx, eax

; 1348 :     /* if it is negative, it should be either -1 or -2 */
; 1349 :     return (res > 0) ? 1 : Py_SAFE_DOWNCAST(res, Py_ssize_t, int);

  00052	b8 01 00 00 00	 mov	 eax, 1
  00057	48 85 c9	 test	 rcx, rcx
  0005a	0f 4f c8	 cmovg	 ecx, eax
  0005d	8b c1		 mov	 eax, ecx

; 1350 : }

  0005f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00063	c3		 ret	 0
$LN6@PyObject_I@5:

; 1340 :     else if (v->ob_type->tp_as_mapping != NULL &&
; 1341 :              v->ob_type->tp_as_mapping->mp_length != NULL)

  00064	48 8b 90 c8 00
	00 00		 mov	 rdx, QWORD PTR [rax+200]
  0006b	48 85 d2	 test	 rdx, rdx
  0006e	74 06		 je	 SHORT $LN4@PyObject_I@5
  00070	48 83 3a 00	 cmp	 QWORD PTR [rdx], 0

; 1342 :         res = (*v->ob_type->tp_as_mapping->mp_length)(v);
; 1343 :     else if (v->ob_type->tp_as_sequence != NULL &&

  00074	75 12		 jne	 SHORT $LN13@PyObject_I@5
$LN4@PyObject_I@5:

; 1344 :              v->ob_type->tp_as_sequence->sq_length != NULL)

  00076	48 8b 90 c0 00
	00 00		 mov	 rdx, QWORD PTR [rax+192]
  0007d	48 85 d2	 test	 rdx, rdx
  00080	74 1d		 je	 SHORT $LN2@PyObject_I@5
  00082	48 83 3a 00	 cmp	 QWORD PTR [rdx], 0
  00086	74 17		 je	 SHORT $LN2@PyObject_I@5
$LN13@PyObject_I@5:

; 1345 :         res = (*v->ob_type->tp_as_sequence->sq_length)(v);

  00088	ff 12		 call	 QWORD PTR [rdx]
  0008a	48 8b c8	 mov	 rcx, rax

; 1348 :     /* if it is negative, it should be either -1 or -2 */
; 1349 :     return (res > 0) ? 1 : Py_SAFE_DOWNCAST(res, Py_ssize_t, int);

  0008d	b8 01 00 00 00	 mov	 eax, 1
  00092	48 85 c9	 test	 rcx, rcx
  00095	0f 4f c8	 cmovg	 ecx, eax
  00098	8b c1		 mov	 eax, ecx

; 1350 : }

  0009a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0009e	c3		 ret	 0
$LN2@PyObject_I@5:

; 1346 :     else
; 1347 :         return 1;

  0009f	b8 01 00 00 00	 mov	 eax, 1

; 1350 : }

  000a4	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000a8	c3		 ret	 0
PyObject_IsTrue ENDP
_TEXT	ENDS
PUBLIC	PyObject_Not
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_Not DD imagerel $LN4
	DD	imagerel $LN4+29
	DD	imagerel $unwind$PyObject_Not
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_Not DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyObject_Not
_TEXT	SEGMENT
v$ = 48
PyObject_Not PROC					; COMDAT

; 1357 : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1358 :     int res;
; 1359 :     res = PyObject_IsTrue(v);

  00004	e8 00 00 00 00	 call	 PyObject_IsTrue
  00009	44 8b d8	 mov	 r11d, eax

; 1360 :     if (res < 0)

  0000c	85 c0		 test	 eax, eax

; 1361 :         return res;

  0000e	78 08		 js	 SHORT $LN2@PyObject_N@3

; 1362 :     return res == 0;

  00010	33 c0		 xor	 eax, eax
  00012	45 85 db	 test	 r11d, r11d
  00015	0f 94 c0	 sete	 al
$LN2@PyObject_N@3:

; 1363 : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
PyObject_Not ENDP
_TEXT	ENDS
PUBLIC	PyCallable_Check
; Function compile flags: /Ogtpy
;	COMDAT PyCallable_Check
_TEXT	SEGMENT
x$ = 8
PyCallable_Check PROC					; COMDAT

; 1370 :     if (x == NULL)
; 1371 :         return 0;

  00000	33 c0		 xor	 eax, eax
  00002	48 85 c9	 test	 rcx, rcx
  00005	74 0e		 je	 SHORT $LN2@PyCallable

; 1372 :     return x->ob_type->tp_call != NULL;

  00007	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  0000b	48 39 81 d8 00
	00 00		 cmp	 QWORD PTR [rcx+216], rax
  00012	0f 95 c0	 setne	 al
$LN2@PyCallable:

; 1373 : }

  00015	f3 c3		 fatret	 0
PyCallable_Check ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DM@LOKPMOMI@dir?$CI?$CJ?3?5expected?5keys?$CI?$CJ?5of?5locals@ ; `string'
PUBLIC	??_C@_0BF@KDAEDCBL@frame?5does?5not?5exist?$AA@	; `string'
EXTRN	PyList_Sort:PROC
EXTRN	PyMapping_Keys:PROC
EXTRN	PyExc_SystemError:QWORD
EXTRN	PyEval_GetLocals:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_dir_locals DD imagerel _dir_locals
	DD	imagerel _dir_locals+43
	DD	imagerel $unwind$_dir_locals
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_dir_locals DD imagerel _dir_locals+43
	DD	imagerel _dir_locals+121
	DD	imagerel $chain$0$_dir_locals
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_dir_locals DD imagerel _dir_locals+121
	DD	imagerel _dir_locals+146
	DD	imagerel $chain$2$_dir_locals
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_dir_locals DD 020021H
	DD	043400H
	DD	imagerel _dir_locals
	DD	imagerel _dir_locals+43
	DD	imagerel $unwind$_dir_locals
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_dir_locals DD 020521H
	DD	043405H
	DD	imagerel _dir_locals
	DD	imagerel _dir_locals+43
	DD	imagerel $unwind$_dir_locals
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_dir_locals DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0DM@LOKPMOMI@dir?$CI?$CJ?3?5expected?5keys?$CI?$CJ?5of?5locals@
CONST	SEGMENT
??_C@_0DM@LOKPMOMI@dir?$CI?$CJ?3?5expected?5keys?$CI?$CJ?5of?5locals@ DB 'd'
	DB	'ir(): expected keys() of locals to be a list, not ''%.200s''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KDAEDCBL@frame?5does?5not?5exist?$AA@
CONST	SEGMENT
??_C@_0BF@KDAEDCBL@frame?5does?5not?5exist?$AA@ DB 'frame does not exist', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _dir_locals
_TEXT	SEGMENT
_dir_locals PROC					; COMDAT

; 1379 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1380 :     PyObject *names;
; 1381 :     PyObject *locals = PyEval_GetLocals();

  00004	e8 00 00 00 00	 call	 PyEval_GetLocals

; 1382 : 
; 1383 :     if (locals == NULL) {

  00009	48 85 c0	 test	 rax, rax
  0000c	75 1a		 jne	 SHORT $LN4@dir_locals

; 1384 :         PyErr_SetString(PyExc_SystemError, "frame does not exist");

  0000e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@KDAEDCBL@frame?5does?5not?5exist?$AA@
  0001c	e8 00 00 00 00	 call	 PyErr_SetString

; 1385 :         return NULL;

  00021	33 c0		 xor	 eax, eax

; 1404 : }

  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	c3		 ret	 0
$LN4@dir_locals:

; 1386 :     }
; 1387 : 
; 1388 :     names = PyMapping_Keys(locals);

  00028	48 8b c8	 mov	 rcx, rax
  0002b	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00030	e8 00 00 00 00	 call	 PyMapping_Keys
  00035	48 8b d8	 mov	 rbx, rax

; 1389 :     if (!names)

  00038	48 85 c0	 test	 rax, rax

; 1390 :         return NULL;

  0003b	74 30		 je	 SHORT $LN9@dir_locals

; 1391 :     if (!PyList_Check(names)) {

  0003d	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  00041	41 f7 80 00 01
	00 00 00 00 00
	02		 test	 DWORD PTR [r8+256], 33554432 ; 02000000H
  0004c	75 2b		 jne	 SHORT $LN2@dir_locals

; 1392 :         PyErr_Format(PyExc_TypeError,
; 1393 :             "dir(): expected keys() of locals to be a list, "
; 1394 :             "not '%.200s'", Py_TYPE(names)->tp_name);

  0004e	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00052	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DM@LOKPMOMI@dir?$CI?$CJ?3?5expected?5keys?$CI?$CJ?5of?5locals@
  00060	e8 00 00 00 00	 call	 PyErr_Format
$LN8@dir_locals:

; 1395 :         Py_DECREF(names);

  00065	48 8b cb	 mov	 rcx, rbx
  00068	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@dir_locals:

; 1396 :         return NULL;

  0006d	33 c0		 xor	 eax, eax
  0006f	48 8b 5c 24 20	 mov	 rbx, QWORD PTR [rsp+32]

; 1404 : }

  00074	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00078	c3		 ret	 0
$LN2@dir_locals:

; 1397 :     }
; 1398 :     if (PyList_Sort(names)) {

  00079	48 8b c8	 mov	 rcx, rax
  0007c	e8 00 00 00 00	 call	 PyList_Sort
  00081	85 c0		 test	 eax, eax

; 1399 :         Py_DECREF(names);
; 1400 :         return NULL;

  00083	75 e0		 jne	 SHORT $LN8@dir_locals

; 1401 :     }
; 1402 :     /* the locals don't need to be DECREF'd */
; 1403 :     return names;

  00085	48 8b c3	 mov	 rax, rbx
  00088	48 8b 5c 24 20	 mov	 rbx, QWORD PTR [rsp+32]

; 1404 : }

  0008d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00091	c3		 ret	 0
_dir_locals ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@EJGFBLIN@object?5does?5not?5provide?5__dir__?$AA@ ; `string'
EXTRN	PySequence_List:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_dir_object DD imagerel _dir_object
	DD	imagerel _dir_object+86
	DD	imagerel $unwind$_dir_object
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_dir_object DD imagerel _dir_object+86
	DD	imagerel _dir_object+169
	DD	imagerel $chain$0$_dir_object
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_dir_object DD imagerel _dir_object+169
	DD	imagerel _dir_object+183
	DD	imagerel $chain$2$_dir_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_dir_object DD 020021H
	DD	067400H
	DD	imagerel _dir_object
	DD	imagerel _dir_object+86
	DD	imagerel $unwind$_dir_object
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_dir_object DD 020521H
	DD	067405H
	DD	imagerel _dir_object
	DD	imagerel _dir_object+86
	DD	imagerel $unwind$_dir_object
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_dir_object DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0CA@EJGFBLIN@object?5does?5not?5provide?5__dir__?$AA@
CONST	SEGMENT
??_C@_0CA@EJGFBLIN@object?5does?5not?5provide?5__dir__?$AA@ DB 'object do'
	DB	'es not provide __dir__', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _dir_object
_TEXT	SEGMENT
obj$ = 48
_dir_object PROC					; COMDAT

; 1409 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1410 :     PyObject *result, *sorted;
; 1411 :     _Py_IDENTIFIER(__dir__);
; 1412 :     PyObject *dirfunc = _PyObject_LookupSpecial(obj, &PyId___dir__);

  00006	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  0000d	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00016	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId___dir__@?1??_dir_object@@9@9
  0001b	4a 03 14 c0	 add	 rdx, QWORD PTR [rax+r8*8]
  0001f	e8 00 00 00 00	 call	 _PyObject_LookupSpecial
  00024	48 8b d8	 mov	 rbx, rax

; 1413 : 
; 1414 :     assert(obj);
; 1415 :     if (dirfunc == NULL) {

  00027	48 85 c0	 test	 rax, rax
  0002a	75 25		 jne	 SHORT $LN5@dir_object

; 1416 :         if (!PyErr_Occurred())

  0002c	e8 00 00 00 00	 call	 PyErr_Occurred
  00031	48 85 c0	 test	 rax, rax
  00034	75 13		 jne	 SHORT $LN4@dir_object

; 1417 :             PyErr_SetString(PyExc_TypeError, "object does not provide __dir__");

  00036	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0003d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@EJGFBLIN@object?5does?5not?5provide?5__dir__?$AA@
  00044	e8 00 00 00 00	 call	 PyErr_SetString
$LN4@dir_object:

; 1418 :         return NULL;

  00049	33 c0		 xor	 eax, eax

; 1435 : }

  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5b		 pop	 rbx
  00050	c3		 ret	 0
$LN5@dir_object:

; 1419 :     }
; 1420 :     /* use __dir__ */
; 1421 :     result = PyObject_CallFunctionObjArgs(dirfunc, NULL);

  00051	33 d2		 xor	 edx, edx
  00053	48 8b c8	 mov	 rcx, rax
  00056	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  0005b	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs

; 1422 :     Py_DECREF(dirfunc);

  00060	48 8b cb	 mov	 rcx, rbx
  00063	48 8b f8	 mov	 rdi, rax
  00066	e8 00 00 00 00	 call	 _Py_DecRef

; 1423 :     if (result == NULL)

  0006b	48 85 ff	 test	 rdi, rdi

; 1424 :         return NULL;

  0006e	74 2c		 je	 SHORT $LN9@dir_object

; 1425 :     /* return sorted(result) */
; 1426 :     sorted = PySequence_List(result);

  00070	48 8b cf	 mov	 rcx, rdi
  00073	e8 00 00 00 00	 call	 PySequence_List

; 1427 :     Py_DECREF(result);

  00078	48 8b cf	 mov	 rcx, rdi
  0007b	48 8b d8	 mov	 rbx, rax
  0007e	e8 00 00 00 00	 call	 _Py_DecRef

; 1428 :     if (sorted == NULL)

  00083	48 85 db	 test	 rbx, rbx

; 1429 :         return NULL;

  00086	74 14		 je	 SHORT $LN9@dir_object

; 1430 :     if (PyList_Sort(sorted)) {

  00088	48 8b cb	 mov	 rcx, rbx
  0008b	e8 00 00 00 00	 call	 PyList_Sort
  00090	85 c0		 test	 eax, eax
  00092	74 15		 je	 SHORT $LN1@dir_object

; 1431 :         Py_DECREF(sorted);

  00094	48 8b cb	 mov	 rcx, rbx
  00097	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@dir_object:

; 1432 :         return NULL;

  0009c	33 c0		 xor	 eax, eax
  0009e	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 1435 : }

  000a3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a7	5b		 pop	 rbx
  000a8	c3		 ret	 0
$LN1@dir_object:

; 1433 :     }
; 1434 :     return sorted;

  000a9	48 8b c3	 mov	 rax, rbx
  000ac	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 1435 : }

  000b1	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b5	5b		 pop	 rbx
  000b6	c3		 ret	 0
_dir_object ENDP
_TEXT	ENDS
PUBLIC	PyObject_Dir
; Function compile flags: /Ogtpy
;	COMDAT PyObject_Dir
_TEXT	SEGMENT
obj$ = 8
PyObject_Dir PROC					; COMDAT

; 1444 :     return (obj == NULL) ? _dir_locals() : _dir_object(obj);

  00000	48 85 c9	 test	 rcx, rcx
  00003	75 05		 jne	 SHORT $LN3@PyObject_D

; 1445 : }

  00005	e9 00 00 00 00	 jmp	 _dir_locals
$LN3@PyObject_D:
  0000a	e9 00 00 00 00	 jmp	 _dir_object
PyObject_Dir ENDP
_TEXT	ENDS
PUBLIC	??_C@_04OHJIHAFH@None?$AA@			; `string'
;	COMDAT ??_C@_04OHJIHAFH@None?$AA@
CONST	SEGMENT
??_C@_04OHJIHAFH@None?$AA@ DB 'None', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT none_repr
_TEXT	SEGMENT
op$ = 8
none_repr PROC						; COMDAT

; 1457 :     return PyUnicode_FromString("None");

  00000	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04OHJIHAFH@None?$AA@

; 1458 : }

  00007	e9 00 00 00 00	 jmp	 PyUnicode_FromString
none_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@HPOICNGE@deallocating?5None?$AA@	; `string'
EXTRN	Py_FatalError:PROC
;	COMDAT ??_C@_0BC@HPOICNGE@deallocating?5None?$AA@
CONST	SEGMENT
??_C@_0BC@HPOICNGE@deallocating?5None?$AA@ DB 'deallocating None', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT none_dealloc
_TEXT	SEGMENT
ignore$ = 8
none_dealloc PROC					; COMDAT

; 1464 :     /* This should never get called, but we also don't want to SEGV if
; 1465 :      * we accidentally decref None out of existence.
; 1466 :      */
; 1467 :     Py_FatalError("deallocating None");

  00000	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@HPOICNGE@deallocating?5None?$AA@

; 1468 : }

  00007	e9 00 00 00 00	 jmp	 Py_FatalError
none_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@NBCCPGCB@NoneType?5takes?5no?5arguments?$AA@ ; `string'
EXTRN	PyDict_Size:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$none_new DD imagerel none_new
	DD	imagerel none_new+136
	DD	imagerel $unwind$none_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$none_new DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0BM@NBCCPGCB@NoneType?5takes?5no?5arguments?$AA@
CONST	SEGMENT
??_C@_0BM@NBCCPGCB@NoneType?5takes?5no?5arguments?$AA@ DB 'NoneType takes'
	DB	' no arguments', 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\object.c
CONST	ENDS
;	COMDAT none_new
_TEXT	SEGMENT
type$ = 64
args$ = 72
kwargs$ = 80
none_new PROC						; COMDAT

; 1472 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1473 :     if (PyTuple_GET_SIZE(args) || (kwargs && PyDict_Size(kwargs))) {

  00004	48 83 7a 60 00	 cmp	 QWORD PTR [rdx+96], 0
  00009	75 63		 jne	 SHORT $LN1@none_new
  0000b	4d 85 c0	 test	 r8, r8
  0000e	74 0d		 je	 SHORT $LN2@none_new
  00010	49 8b c8	 mov	 rcx, r8
  00013	e8 00 00 00 00	 call	 PyDict_Size
  00018	48 85 c0	 test	 rax, rax
  0001b	75 51		 jne	 SHORT $LN1@none_new
$LN2@none_new:

; 1476 :     }
; 1477 :     Py_RETURN_NONE;

  0001d	e8 00 00 00 00	 call	 _Py_PXCTX
  00022	85 c0		 test	 eax, eax
  00024	75 3c		 jne	 SHORT $LN6@none_new
  00026	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0003b	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00041	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00049	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004e	85 c0		 test	 eax, eax
  00050	75 09		 jne	 SHORT $LN5@none_new
  00052	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00059	74 07		 je	 SHORT $LN6@none_new
$LN5@none_new:
  0005b	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN6@none_new:
  00062	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1478 : }

  00069	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006d	c3		 ret	 0
$LN1@none_new:

; 1474 :         PyErr_SetString(PyExc_TypeError, "NoneType takes no arguments");

  0006e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00075	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@NBCCPGCB@NoneType?5takes?5no?5arguments?$AA@
  0007c	e8 00 00 00 00	 call	 PyErr_SetString

; 1475 :         return NULL;

  00081	33 c0		 xor	 eax, eax

; 1478 : }

  00083	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00087	c3		 ret	 0
none_new ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT none_bool
_TEXT	SEGMENT
v$ = 8
none_bool PROC						; COMDAT

; 1483 :     return 0;

  00000	33 c0		 xor	 eax, eax

; 1484 : }

  00002	c3		 ret	 0
none_bool ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@HCLFFHDH@NotImplemented?$AA@		; `string'
;	COMDAT ??_C@_0P@HCLFFHDH@NotImplemented?$AA@
CONST	SEGMENT
??_C@_0P@HCLFFHDH@NotImplemented?$AA@ DB 'NotImplemented', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT NotImplemented_repr
_TEXT	SEGMENT
op$ = 8
NotImplemented_repr PROC				; COMDAT

; 1575 :     return PyUnicode_FromString("NotImplemented");

  00000	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@HCLFFHDH@NotImplemented?$AA@

; 1576 : }

  00007	e9 00 00 00 00	 jmp	 PyUnicode_FromString
NotImplemented_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@KEOPNPJH@NotImplementedType?5takes?5no?5argu@ ; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$notimplemented_new DD imagerel notimplemented_new
	DD	imagerel notimplemented_new+136
	DD	imagerel $unwind$notimplemented_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$notimplemented_new DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0CG@KEOPNPJH@NotImplementedType?5takes?5no?5argu@
CONST	SEGMENT
??_C@_0CG@KEOPNPJH@NotImplementedType?5takes?5no?5argu@ DB 'NotImplemente'
	DB	'dType takes no arguments', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\object.c
CONST	ENDS
;	COMDAT notimplemented_new
_TEXT	SEGMENT
type$ = 64
args$ = 72
kwargs$ = 80
notimplemented_new PROC					; COMDAT

; 1580 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1581 :     if (PyTuple_GET_SIZE(args) || (kwargs && PyDict_Size(kwargs))) {

  00004	48 83 7a 60 00	 cmp	 QWORD PTR [rdx+96], 0
  00009	75 63		 jne	 SHORT $LN1@notimpleme
  0000b	4d 85 c0	 test	 r8, r8
  0000e	74 0d		 je	 SHORT $LN2@notimpleme
  00010	49 8b c8	 mov	 rcx, r8
  00013	e8 00 00 00 00	 call	 PyDict_Size
  00018	48 85 c0	 test	 rax, rax
  0001b	75 51		 jne	 SHORT $LN1@notimpleme
$LN2@notimpleme:

; 1584 :     }
; 1585 :     Py_RETURN_NOTIMPLEMENTED;

  0001d	e8 00 00 00 00	 call	 _Py_PXCTX
  00022	85 c0		 test	 eax, eax
  00024	75 3c		 jne	 SHORT $LN6@notimpleme
  00026	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NotImplementedStruct
  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0003b	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00041	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00049	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004e	85 c0		 test	 eax, eax
  00050	75 09		 jne	 SHORT $LN5@notimpleme
  00052	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NotImplementedStruct+32, 32 ; 00000020H
  00059	74 07		 je	 SHORT $LN6@notimpleme
$LN5@notimpleme:
  0005b	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NotImplementedStruct+80
$LN6@notimpleme:
  00062	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct

; 1586 : }

  00069	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006d	c3		 ret	 0
$LN1@notimpleme:

; 1582 :         PyErr_SetString(PyExc_TypeError, "NotImplementedType takes no arguments");

  0006e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00075	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@KEOPNPJH@NotImplementedType?5takes?5no?5argu@
  0007c	e8 00 00 00 00	 call	 PyErr_SetString

; 1583 :         return NULL;

  00081	33 c0		 xor	 eax, eax

; 1586 : }

  00083	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00087	c3		 ret	 0
notimplemented_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@KCGLHPFK@Can?8t?5initialize?5sequence?5iterat@ ; `string'
PUBLIC	??_C@_0CA@KPPPNCLC@Can?8t?5initialize?5call?5iter?5type?$AA@ ; `string'
PUBLIC	??_C@_0CD@HCNPCLHE@Can?8t?5initialize?5method?5descr?5ty@ ; `string'
PUBLIC	??_C@_0CJ@PCHBNAPP@Can?8t?5initialize?5class?5method?5de@ ; `string'
PUBLIC	??_C@_0CG@HBOFAIND@Can?8t?5initialize?5instance?5method@ ; `string'
PUBLIC	??_C@_0BL@GNOJGKKA@Can?8t?5initialize?5cell?5type?$AA@ ; `string'
PUBLIC	??_C@_0CK@MLKLIMJK@Can?8t?5initialize?5long?5range?5iter@ ; `string'
PUBLIC	??_C@_0BO@NCFEEFJG@Can?8t?5initialize?5capsule?5type?$AA@ ; `string'
PUBLIC	??_C@_0CA@KLGIPOFE@Can?8t?5initialize?5namespace?5type?$AA@ ; `string'
PUBLIC	??_C@_0BK@IBODGPEH@Can?8t?5initialize?5zip?5type?$AA@ ; `string'
PUBLIC	??_C@_0BK@JKKHFLEK@Can?8t?5initialize?5map?5type?$AA@ ; `string'
PUBLIC	??_C@_0BN@MNJEFCB@Can?8t?5initialize?5filter?5type?$AA@ ; `string'
PUBLIC	??_C@_0CI@BIFPHOIH@Can?8t?5initialize?5member?5descript@ ; `string'
PUBLIC	??_C@_0BP@CDDJOKOM@Can?8t?5initialize?5ellipsis?5type?$AA@ ; `string'
PUBLIC	??_C@_0CF@IEPIPLE@Can?8t?5initialize?5method?5wrapper?5@ ; `string'
PUBLIC	??_C@_0BO@KOICOKPK@Can?8t?5initialize?5wrapper?5type?$AA@ ; `string'
PUBLIC	??_C@_0CJ@EAEDPJFE@Can?8t?5initialize?5get?9set?5descrip@ ; `string'
PUBLIC	??_C@_0CA@GDBPIPMJ@Can?8t?5initialize?5generator?5type?$AA@ ; `string'
PUBLIC	??_C@_0CB@NFMGFHFJ@Can?8t?5initialize?5dict?5proxy?5type@ ; `string'
PUBLIC	??_C@_0BP@JCDNDJAC@Can?8t?5initialize?5function?5type?$AA@ ; `string'
PUBLIC	??_C@_0BN@JMBCLGKN@Can?8t?5initialize?5method?5type?$AA@ ; `string'
PUBLIC	??_C@_0CH@ILEDBGFL@Can?8t?5initialize?5builtin?5functio@ ; `string'
PUBLIC	??_C@_0BM@FJKIPOOF@Can?8t?5initialize?5frame?5type?$AA@ ; `string'
PUBLIC	??_C@_0BL@LOLKLOFI@Can?8t?5initialize?5code?5type?$AA@ ; `string'
PUBLIC	??_C@_0BM@BEKOCBAI@Can?8t?5initialize?5StdPrinter?$AA@ ; `string'
PUBLIC	??_C@_0BP@LKMFIGMA@Can?8t?5initialize?5reversed?5type?$AA@ ; `string'
PUBLIC	??_C@_0CA@PPMIAJJC@Can?8t?5initialize?5enumerate?5type?$AA@ ; `string'
PUBLIC	??_C@_0BM@DKPPMODK@Can?8t?5initialize?5tuple?5type?$AA@ ; `string'
PUBLIC	??_C@_0CB@LDGAMANL@Can?8t?5initialize?5memoryview?5type@ ; `string'
PUBLIC	??_C@_0CF@LNOOACJJ@Can?8t?5initialize?5managed?5buffer?5@ ; `string'
PUBLIC	??_C@_0BP@LINOBPGC@Can?8t?5initialize?5property?5type?$AA@ ; `string'
PUBLIC	??_C@_0CA@JKDGKHHL@Can?8t?5initialize?5frozenset?5type?$AA@ ; `string'
PUBLIC	??_C@_0BK@OKCEDMPJ@Can?8t?5initialize?5int?5type?$AA@ ; `string'
PUBLIC	??_C@_0BM@DOALBGBJ@Can?8t?5initialize?5float?5type?$AA@ ; `string'
PUBLIC	??_C@_0BO@KMBFLGEI@Can?8t?5initialize?5complex?5type?$AA@ ; `string'
PUBLIC	??_C@_0CE@EOCDLOPI@Can?8t?5initialize?5static?5method?5t@ ; `string'
PUBLIC	??_C@_0BM@BBDMJHBN@Can?8t?5initialize?5slice?5type?$AA@ ; `string'
PUBLIC	??_C@_0BK@FNGBOMMP@Can?8t?5initialize?5str?5type?$AA@ ; `string'
PUBLIC	??_C@_0BK@IOKAOIEA@Can?8t?5initialize?5set?5type?$AA@ ; `string'
PUBLIC	??_C@_0BL@OEBAECMI@Can?8t?5initialize?5dict?5type?$AA@ ; `string'
PUBLIC	??_C@_0BM@MFGHKAFO@Can?8t?5initialize?5range?5type?$AA@ ; `string'
PUBLIC	??_C@_0BN@KBELOCDM@Can?8t?5initialize?5object?5type?$AA@ ; `string'
PUBLIC	??_C@_0BM@KOPCGCNC@Can?8t?5initialize?5super?5type?$AA@ ; `string'
PUBLIC	??_C@_0CA@NCHGDNKB@Can?8t?5initialize?5traceback?5type?$AA@ ; `string'
PUBLIC	??_C@_0CF@DBHDJCBG@Can?8t?5initialize?5NotImplemented?5@ ; `string'
PUBLIC	??_C@_0BL@JFNJCKPA@Can?8t?5initialize?5None?5type?$AA@ ; `string'
PUBLIC	??_C@_0BL@ILHMDDBH@Can?8t?5initialize?5list?5type?$AA@ ; `string'
PUBLIC	??_C@_0BH@FCIIPNCH@Can?8t?5initialize?5?8str?8?$AA@ ; `string'
PUBLIC	??_C@_0CA@NJNPLJM@Can?8t?5initialize?5bytearray?5type?$AA@ ; `string'
PUBLIC	??_C@_0BL@JJIKIMOD@Can?8t?5initialize?5bool?5type?$AA@ ; `string'
PUBLIC	??_C@_0CE@BJCODKBD@Can?8t?5initialize?5weakref?5proxy?5t@ ; `string'
PUBLIC	??_C@_0CN@MKPADHNI@Can?8t?5initialize?5callable?5weakre@ ; `string'
PUBLIC	??_C@_0BO@LECLAEMN@Can?8t?5initialize?5weakref?5type?$AA@ ; `string'
PUBLIC	??_C@_0BL@FMODCAOD@Can?8t?5initialize?5type?5type?$AA@ ; `string'
PUBLIC	??_C@_0P@JFABONIJ@_Py_ReadyTypes?$AA@		; `string'
PUBLIC	_Py_ReadyTypes
EXTRN	__imp_InitializeCriticalSectionAndSpinCount:PROC
EXTRN	PySeqIter_Type:BYTE
EXTRN	PyCallIter_Type:BYTE
EXTRN	PyMethodDescr_Type:BYTE
EXTRN	PyClassMethodDescr_Type:BYTE
EXTRN	PyInstanceMethod_Type:BYTE
EXTRN	PyCell_Type:BYTE
EXTRN	PyLongRangeIter_Type:BYTE
EXTRN	_PyNamespace_Type:BYTE
EXTRN	PyZip_Type:BYTE
EXTRN	PyMap_Type:BYTE
EXTRN	PyFilter_Type:BYTE
EXTRN	PyMemberDescr_Type:BYTE
EXTRN	PyEllipsis_Type:BYTE
EXTRN	_PyMethodWrapper_Type:BYTE
EXTRN	PyWrapperDescr_Type:BYTE
EXTRN	PyGetSetDescr_Type:BYTE
EXTRN	PyGen_Type:BYTE
EXTRN	PyDictProxy_Type:BYTE
EXTRN	PyFunction_Type:BYTE
EXTRN	PyMethod_Type:BYTE
EXTRN	PyCFunction_Type:BYTE
EXTRN	PyFrame_Type:BYTE
EXTRN	PyCode_Type:BYTE
EXTRN	PyStdPrinter_Type:BYTE
EXTRN	PyReversed_Type:BYTE
EXTRN	PyEnum_Type:BYTE
EXTRN	PyTuple_Type:BYTE
EXTRN	PyMemoryView_Type:BYTE
EXTRN	_PyManagedBuffer_Type:BYTE
EXTRN	PyProperty_Type:BYTE
EXTRN	PyFrozenSet_Type:BYTE
EXTRN	PyLong_Type:BYTE
EXTRN	PyFloat_Type:BYTE
EXTRN	PyComplex_Type:BYTE
EXTRN	PyStaticMethod_Type:BYTE
EXTRN	PySlice_Type:BYTE
EXTRN	PySet_Type:BYTE
EXTRN	PyDict_Type:BYTE
EXTRN	PyRange_Type:BYTE
EXTRN	PyBaseObject_Type:BYTE
EXTRN	PySuper_Type:BYTE
EXTRN	PyTraceBack_Type:BYTE
EXTRN	PyList_Type:BYTE
EXTRN	PyByteArray_Type:BYTE
EXTRN	PyBool_Type:BYTE
EXTRN	_PyWeakref_ProxyType:BYTE
EXTRN	_PyWeakref_CallableProxyType:BYTE
EXTRN	_PyWeakref_RefType:BYTE
EXTRN	_PyParallel_ContextGuardFailure:PROC
_BSS	SEGMENT
stderr_cs DB	028H DUP (?)
stdout_cs DB	028H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_ReadyTypes DD imagerel $LN58
	DD	imagerel $LN58+1594
	DD	imagerel $unwind$_Py_ReadyTypes
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_ReadyTypes DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0CI@KCGLHPFK@Can?8t?5initialize?5sequence?5iterat@
CONST	SEGMENT
??_C@_0CI@KCGLHPFK@Can?8t?5initialize?5sequence?5iterat@ DB 'Can''t initi'
	DB	'alize sequence iterator type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KPPPNCLC@Can?8t?5initialize?5call?5iter?5type?$AA@
CONST	SEGMENT
??_C@_0CA@KPPPNCLC@Can?8t?5initialize?5call?5iter?5type?$AA@ DB 'Can''t i'
	DB	'nitialize call iter type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HCNPCLHE@Can?8t?5initialize?5method?5descr?5ty@
CONST	SEGMENT
??_C@_0CD@HCNPCLHE@Can?8t?5initialize?5method?5descr?5ty@ DB 'Can''t init'
	DB	'ialize method descr type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@PCHBNAPP@Can?8t?5initialize?5class?5method?5de@
CONST	SEGMENT
??_C@_0CJ@PCHBNAPP@Can?8t?5initialize?5class?5method?5de@ DB 'Can''t init'
	DB	'ialize class method descr type', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@HBOFAIND@Can?8t?5initialize?5instance?5method@
CONST	SEGMENT
??_C@_0CG@HBOFAIND@Can?8t?5initialize?5instance?5method@ DB 'Can''t initi'
	DB	'alize instance method type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@GNOJGKKA@Can?8t?5initialize?5cell?5type?$AA@
CONST	SEGMENT
??_C@_0BL@GNOJGKKA@Can?8t?5initialize?5cell?5type?$AA@ DB 'Can''t initial'
	DB	'ize cell type', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@MLKLIMJK@Can?8t?5initialize?5long?5range?5iter@
CONST	SEGMENT
??_C@_0CK@MLKLIMJK@Can?8t?5initialize?5long?5range?5iter@ DB 'Can''t init'
	DB	'ialize long range iterator type', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@NCFEEFJG@Can?8t?5initialize?5capsule?5type?$AA@
CONST	SEGMENT
??_C@_0BO@NCFEEFJG@Can?8t?5initialize?5capsule?5type?$AA@ DB 'Can''t init'
	DB	'ialize capsule type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KLGIPOFE@Can?8t?5initialize?5namespace?5type?$AA@
CONST	SEGMENT
??_C@_0CA@KLGIPOFE@Can?8t?5initialize?5namespace?5type?$AA@ DB 'Can''t in'
	DB	'itialize namespace type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@IBODGPEH@Can?8t?5initialize?5zip?5type?$AA@
CONST	SEGMENT
??_C@_0BK@IBODGPEH@Can?8t?5initialize?5zip?5type?$AA@ DB 'Can''t initiali'
	DB	'ze zip type', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JKKHFLEK@Can?8t?5initialize?5map?5type?$AA@
CONST	SEGMENT
??_C@_0BK@JKKHFLEK@Can?8t?5initialize?5map?5type?$AA@ DB 'Can''t initiali'
	DB	'ze map type', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@MNJEFCB@Can?8t?5initialize?5filter?5type?$AA@
CONST	SEGMENT
??_C@_0BN@MNJEFCB@Can?8t?5initialize?5filter?5type?$AA@ DB 'Can''t initia'
	DB	'lize filter type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@BIFPHOIH@Can?8t?5initialize?5member?5descript@
CONST	SEGMENT
??_C@_0CI@BIFPHOIH@Can?8t?5initialize?5member?5descript@ DB 'Can''t initi'
	DB	'alize member descriptor type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@CDDJOKOM@Can?8t?5initialize?5ellipsis?5type?$AA@
CONST	SEGMENT
??_C@_0BP@CDDJOKOM@Can?8t?5initialize?5ellipsis?5type?$AA@ DB 'Can''t ini'
	DB	'tialize ellipsis type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@IEPIPLE@Can?8t?5initialize?5method?5wrapper?5@
CONST	SEGMENT
??_C@_0CF@IEPIPLE@Can?8t?5initialize?5method?5wrapper?5@ DB 'Can''t initi'
	DB	'alize method wrapper type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@KOICOKPK@Can?8t?5initialize?5wrapper?5type?$AA@
CONST	SEGMENT
??_C@_0BO@KOICOKPK@Can?8t?5initialize?5wrapper?5type?$AA@ DB 'Can''t init'
	DB	'ialize wrapper type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@EAEDPJFE@Can?8t?5initialize?5get?9set?5descrip@
CONST	SEGMENT
??_C@_0CJ@EAEDPJFE@Can?8t?5initialize?5get?9set?5descrip@ DB 'Can''t init'
	DB	'ialize get-set descriptor type', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GDBPIPMJ@Can?8t?5initialize?5generator?5type?$AA@
CONST	SEGMENT
??_C@_0CA@GDBPIPMJ@Can?8t?5initialize?5generator?5type?$AA@ DB 'Can''t in'
	DB	'itialize generator type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NFMGFHFJ@Can?8t?5initialize?5dict?5proxy?5type@
CONST	SEGMENT
??_C@_0CB@NFMGFHFJ@Can?8t?5initialize?5dict?5proxy?5type@ DB 'Can''t init'
	DB	'ialize dict proxy type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@JCDNDJAC@Can?8t?5initialize?5function?5type?$AA@
CONST	SEGMENT
??_C@_0BP@JCDNDJAC@Can?8t?5initialize?5function?5type?$AA@ DB 'Can''t ini'
	DB	'tialize function type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JMBCLGKN@Can?8t?5initialize?5method?5type?$AA@
CONST	SEGMENT
??_C@_0BN@JMBCLGKN@Can?8t?5initialize?5method?5type?$AA@ DB 'Can''t initi'
	DB	'alize method type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@ILEDBGFL@Can?8t?5initialize?5builtin?5functio@
CONST	SEGMENT
??_C@_0CH@ILEDBGFL@Can?8t?5initialize?5builtin?5functio@ DB 'Can''t initi'
	DB	'alize builtin function type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FJKIPOOF@Can?8t?5initialize?5frame?5type?$AA@
CONST	SEGMENT
??_C@_0BM@FJKIPOOF@Can?8t?5initialize?5frame?5type?$AA@ DB 'Can''t initia'
	DB	'lize frame type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LOLKLOFI@Can?8t?5initialize?5code?5type?$AA@
CONST	SEGMENT
??_C@_0BL@LOLKLOFI@Can?8t?5initialize?5code?5type?$AA@ DB 'Can''t initial'
	DB	'ize code type', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BEKOCBAI@Can?8t?5initialize?5StdPrinter?$AA@
CONST	SEGMENT
??_C@_0BM@BEKOCBAI@Can?8t?5initialize?5StdPrinter?$AA@ DB 'Can''t initial'
	DB	'ize StdPrinter', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@LKMFIGMA@Can?8t?5initialize?5reversed?5type?$AA@
CONST	SEGMENT
??_C@_0BP@LKMFIGMA@Can?8t?5initialize?5reversed?5type?$AA@ DB 'Can''t ini'
	DB	'tialize reversed type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@PPMIAJJC@Can?8t?5initialize?5enumerate?5type?$AA@
CONST	SEGMENT
??_C@_0CA@PPMIAJJC@Can?8t?5initialize?5enumerate?5type?$AA@ DB 'Can''t in'
	DB	'itialize enumerate type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DKPPMODK@Can?8t?5initialize?5tuple?5type?$AA@
CONST	SEGMENT
??_C@_0BM@DKPPMODK@Can?8t?5initialize?5tuple?5type?$AA@ DB 'Can''t initia'
	DB	'lize tuple type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@LDGAMANL@Can?8t?5initialize?5memoryview?5type@
CONST	SEGMENT
??_C@_0CB@LDGAMANL@Can?8t?5initialize?5memoryview?5type@ DB 'Can''t initi'
	DB	'alize memoryview type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@LNOOACJJ@Can?8t?5initialize?5managed?5buffer?5@
CONST	SEGMENT
??_C@_0CF@LNOOACJJ@Can?8t?5initialize?5managed?5buffer?5@ DB 'Can''t init'
	DB	'ialize managed buffer type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@LINOBPGC@Can?8t?5initialize?5property?5type?$AA@
CONST	SEGMENT
??_C@_0BP@LINOBPGC@Can?8t?5initialize?5property?5type?$AA@ DB 'Can''t ini'
	DB	'tialize property type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@JKDGKHHL@Can?8t?5initialize?5frozenset?5type?$AA@
CONST	SEGMENT
??_C@_0CA@JKDGKHHL@Can?8t?5initialize?5frozenset?5type?$AA@ DB 'Can''t in'
	DB	'itialize frozenset type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@OKCEDMPJ@Can?8t?5initialize?5int?5type?$AA@
CONST	SEGMENT
??_C@_0BK@OKCEDMPJ@Can?8t?5initialize?5int?5type?$AA@ DB 'Can''t initiali'
	DB	'ze int type', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DOALBGBJ@Can?8t?5initialize?5float?5type?$AA@
CONST	SEGMENT
??_C@_0BM@DOALBGBJ@Can?8t?5initialize?5float?5type?$AA@ DB 'Can''t initia'
	DB	'lize float type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@KMBFLGEI@Can?8t?5initialize?5complex?5type?$AA@
CONST	SEGMENT
??_C@_0BO@KMBFLGEI@Can?8t?5initialize?5complex?5type?$AA@ DB 'Can''t init'
	DB	'ialize complex type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@EOCDLOPI@Can?8t?5initialize?5static?5method?5t@
CONST	SEGMENT
??_C@_0CE@EOCDLOPI@Can?8t?5initialize?5static?5method?5t@ DB 'Can''t init'
	DB	'ialize static method type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BBDMJHBN@Can?8t?5initialize?5slice?5type?$AA@
CONST	SEGMENT
??_C@_0BM@BBDMJHBN@Can?8t?5initialize?5slice?5type?$AA@ DB 'Can''t initia'
	DB	'lize slice type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FNGBOMMP@Can?8t?5initialize?5str?5type?$AA@
CONST	SEGMENT
??_C@_0BK@FNGBOMMP@Can?8t?5initialize?5str?5type?$AA@ DB 'Can''t initiali'
	DB	'ze str type', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@IOKAOIEA@Can?8t?5initialize?5set?5type?$AA@
CONST	SEGMENT
??_C@_0BK@IOKAOIEA@Can?8t?5initialize?5set?5type?$AA@ DB 'Can''t initiali'
	DB	'ze set type', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OEBAECMI@Can?8t?5initialize?5dict?5type?$AA@
CONST	SEGMENT
??_C@_0BL@OEBAECMI@Can?8t?5initialize?5dict?5type?$AA@ DB 'Can''t initial'
	DB	'ize dict type', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@MFGHKAFO@Can?8t?5initialize?5range?5type?$AA@
CONST	SEGMENT
??_C@_0BM@MFGHKAFO@Can?8t?5initialize?5range?5type?$AA@ DB 'Can''t initia'
	DB	'lize range type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KBELOCDM@Can?8t?5initialize?5object?5type?$AA@
CONST	SEGMENT
??_C@_0BN@KBELOCDM@Can?8t?5initialize?5object?5type?$AA@ DB 'Can''t initi'
	DB	'alize object type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@KOPCGCNC@Can?8t?5initialize?5super?5type?$AA@
CONST	SEGMENT
??_C@_0BM@KOPCGCNC@Can?8t?5initialize?5super?5type?$AA@ DB 'Can''t initia'
	DB	'lize super type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@NCHGDNKB@Can?8t?5initialize?5traceback?5type?$AA@
CONST	SEGMENT
??_C@_0CA@NCHGDNKB@Can?8t?5initialize?5traceback?5type?$AA@ DB 'Can''t in'
	DB	'itialize traceback type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DBHDJCBG@Can?8t?5initialize?5NotImplemented?5@
CONST	SEGMENT
??_C@_0CF@DBHDJCBG@Can?8t?5initialize?5NotImplemented?5@ DB 'Can''t initi'
	DB	'alize NotImplemented type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JFNJCKPA@Can?8t?5initialize?5None?5type?$AA@
CONST	SEGMENT
??_C@_0BL@JFNJCKPA@Can?8t?5initialize?5None?5type?$AA@ DB 'Can''t initial'
	DB	'ize None type', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@ILHMDDBH@Can?8t?5initialize?5list?5type?$AA@
CONST	SEGMENT
??_C@_0BL@ILHMDDBH@Can?8t?5initialize?5list?5type?$AA@ DB 'Can''t initial'
	DB	'ize list type', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FCIIPNCH@Can?8t?5initialize?5?8str?8?$AA@
CONST	SEGMENT
??_C@_0BH@FCIIPNCH@Can?8t?5initialize?5?8str?8?$AA@ DB 'Can''t initialize'
	DB	' ''str''', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@NJNPLJM@Can?8t?5initialize?5bytearray?5type?$AA@
CONST	SEGMENT
??_C@_0CA@NJNPLJM@Can?8t?5initialize?5bytearray?5type?$AA@ DB 'Can''t ini'
	DB	'tialize bytearray type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JJIKIMOD@Can?8t?5initialize?5bool?5type?$AA@
CONST	SEGMENT
??_C@_0BL@JJIKIMOD@Can?8t?5initialize?5bool?5type?$AA@ DB 'Can''t initial'
	DB	'ize bool type', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@BJCODKBD@Can?8t?5initialize?5weakref?5proxy?5t@
CONST	SEGMENT
??_C@_0CE@BJCODKBD@Can?8t?5initialize?5weakref?5proxy?5t@ DB 'Can''t init'
	DB	'ialize weakref proxy type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@MKPADHNI@Can?8t?5initialize?5callable?5weakre@
CONST	SEGMENT
??_C@_0CN@MKPADHNI@Can?8t?5initialize?5callable?5weakre@ DB 'Can''t initi'
	DB	'alize callable weakref proxy type', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LECLAEMN@Can?8t?5initialize?5weakref?5type?$AA@
CONST	SEGMENT
??_C@_0BO@LECLAEMN@Can?8t?5initialize?5weakref?5type?$AA@ DB 'Can''t init'
	DB	'ialize weakref type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@FMODCAOD@Can?8t?5initialize?5type?5type?$AA@
CONST	SEGMENT
??_C@_0BL@FMODCAOD@Can?8t?5initialize?5type?5type?$AA@ DB 'Can''t initial'
	DB	'ize type type', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JFABONIJ@_Py_ReadyTypes?$AA@
CONST	SEGMENT
??_C@_0P@JFABONIJ@_Py_ReadyTypes?$AA@ DB '_Py_ReadyTypes', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_ReadyTypes
_TEXT	SEGMENT
_Py_ReadyTypes PROC					; COMDAT

; 1636 : {

$LN58:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1637 :     Py_GUARD

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	74 1c		 je	 SHORT $LN55@Py_ReadyTy
  0000d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@JFABONIJ@_Py_ReadyTypes?$AA@
  0001b	45 33 c9	 xor	 r9d, r9d
  0001e	41 b8 65 06 00
	00		 mov	 r8d, 1637		; 00000665H
  00024	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN55@Py_ReadyTy:

; 1638 : 
; 1639 :     if (PyType_Ready(&PyType_Type) < 0)

  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyType_Type
  00030	e8 00 00 00 00	 call	 PyType_Ready
  00035	85 c0		 test	 eax, eax
  00037	79 0c		 jns	 SHORT $LN54@Py_ReadyTy

; 1640 :         Py_FatalError("Can't initialize type type");

  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@FMODCAOD@Can?8t?5initialize?5type?5type?$AA@
  00040	e8 00 00 00 00	 call	 Py_FatalError
$LN54@Py_ReadyTy:

; 1641 : 
; 1642 :     if (PyType_Ready(&_PyWeakref_RefType) < 0)

  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyWeakref_RefType
  0004c	e8 00 00 00 00	 call	 PyType_Ready
  00051	85 c0		 test	 eax, eax
  00053	79 0c		 jns	 SHORT $LN53@Py_ReadyTy

; 1643 :         Py_FatalError("Can't initialize weakref type");

  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@LECLAEMN@Can?8t?5initialize?5weakref?5type?$AA@
  0005c	e8 00 00 00 00	 call	 Py_FatalError
$LN53@Py_ReadyTy:

; 1644 : 
; 1645 :     if (PyType_Ready(&_PyWeakref_CallableProxyType) < 0)

  00061	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyWeakref_CallableProxyType
  00068	e8 00 00 00 00	 call	 PyType_Ready
  0006d	85 c0		 test	 eax, eax
  0006f	79 0c		 jns	 SHORT $LN52@Py_ReadyTy

; 1646 :         Py_FatalError("Can't initialize callable weakref proxy type");

  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CN@MKPADHNI@Can?8t?5initialize?5callable?5weakre@
  00078	e8 00 00 00 00	 call	 Py_FatalError
$LN52@Py_ReadyTy:

; 1647 : 
; 1648 :     if (PyType_Ready(&_PyWeakref_ProxyType) < 0)

  0007d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyWeakref_ProxyType
  00084	e8 00 00 00 00	 call	 PyType_Ready
  00089	85 c0		 test	 eax, eax
  0008b	79 0c		 jns	 SHORT $LN51@Py_ReadyTy

; 1649 :         Py_FatalError("Can't initialize weakref proxy type");

  0008d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@BJCODKBD@Can?8t?5initialize?5weakref?5proxy?5t@
  00094	e8 00 00 00 00	 call	 Py_FatalError
$LN51@Py_ReadyTy:

; 1650 : 
; 1651 :     if (PyType_Ready(&PyBool_Type) < 0)

  00099	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBool_Type
  000a0	e8 00 00 00 00	 call	 PyType_Ready
  000a5	85 c0		 test	 eax, eax
  000a7	79 0c		 jns	 SHORT $LN50@Py_ReadyTy

; 1652 :         Py_FatalError("Can't initialize bool type");

  000a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@JJIKIMOD@Can?8t?5initialize?5bool?5type?$AA@
  000b0	e8 00 00 00 00	 call	 Py_FatalError
$LN50@Py_ReadyTy:

; 1653 : 
; 1654 :     if (PyType_Ready(&PyByteArray_Type) < 0)

  000b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyByteArray_Type
  000bc	e8 00 00 00 00	 call	 PyType_Ready
  000c1	85 c0		 test	 eax, eax
  000c3	79 0c		 jns	 SHORT $LN49@Py_ReadyTy

; 1655 :         Py_FatalError("Can't initialize bytearray type");

  000c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@NJNPLJM@Can?8t?5initialize?5bytearray?5type?$AA@
  000cc	e8 00 00 00 00	 call	 Py_FatalError
$LN49@Py_ReadyTy:

; 1656 : 
; 1657 :     if (PyType_Ready(&PyBytes_Type) < 0)

  000d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBytes_Type
  000d8	e8 00 00 00 00	 call	 PyType_Ready
  000dd	85 c0		 test	 eax, eax
  000df	79 0c		 jns	 SHORT $LN48@Py_ReadyTy

; 1658 :         Py_FatalError("Can't initialize 'str'");

  000e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@FCIIPNCH@Can?8t?5initialize?5?8str?8?$AA@
  000e8	e8 00 00 00 00	 call	 Py_FatalError
$LN48@Py_ReadyTy:

; 1659 : 
; 1660 :     if (PyType_Ready(&PyList_Type) < 0)

  000ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyList_Type
  000f4	e8 00 00 00 00	 call	 PyType_Ready
  000f9	85 c0		 test	 eax, eax
  000fb	79 0c		 jns	 SHORT $LN47@Py_ReadyTy

; 1661 :         Py_FatalError("Can't initialize list type");

  000fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@ILHMDDBH@Can?8t?5initialize?5list?5type?$AA@
  00104	e8 00 00 00 00	 call	 Py_FatalError
$LN47@Py_ReadyTy:

; 1662 : 
; 1663 :     if (PyType_Ready(&_PyNone_Type) < 0)

  00109	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyNone_Type
  00110	e8 00 00 00 00	 call	 PyType_Ready
  00115	85 c0		 test	 eax, eax
  00117	79 0c		 jns	 SHORT $LN46@Py_ReadyTy

; 1664 :         Py_FatalError("Can't initialize None type");

  00119	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@JFNJCKPA@Can?8t?5initialize?5None?5type?$AA@
  00120	e8 00 00 00 00	 call	 Py_FatalError
$LN46@Py_ReadyTy:

; 1665 : 
; 1666 :     if (PyType_Ready(&_PyNotImplemented_Type) < 0)

  00125	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyNotImplemented_Type
  0012c	e8 00 00 00 00	 call	 PyType_Ready
  00131	85 c0		 test	 eax, eax
  00133	79 0c		 jns	 SHORT $LN45@Py_ReadyTy

; 1667 :         Py_FatalError("Can't initialize NotImplemented type");

  00135	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CF@DBHDJCBG@Can?8t?5initialize?5NotImplemented?5@
  0013c	e8 00 00 00 00	 call	 Py_FatalError
$LN45@Py_ReadyTy:

; 1668 : 
; 1669 :     if (PyType_Ready(&PyTraceBack_Type) < 0)

  00141	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyTraceBack_Type
  00148	e8 00 00 00 00	 call	 PyType_Ready
  0014d	85 c0		 test	 eax, eax
  0014f	79 0c		 jns	 SHORT $LN44@Py_ReadyTy

; 1670 :         Py_FatalError("Can't initialize traceback type");

  00151	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@NCHGDNKB@Can?8t?5initialize?5traceback?5type?$AA@
  00158	e8 00 00 00 00	 call	 Py_FatalError
$LN44@Py_ReadyTy:

; 1671 : 
; 1672 :     if (PyType_Ready(&PySuper_Type) < 0)

  0015d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PySuper_Type
  00164	e8 00 00 00 00	 call	 PyType_Ready
  00169	85 c0		 test	 eax, eax
  0016b	79 0c		 jns	 SHORT $LN43@Py_ReadyTy

; 1673 :         Py_FatalError("Can't initialize super type");

  0016d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@KOPCGCNC@Can?8t?5initialize?5super?5type?$AA@
  00174	e8 00 00 00 00	 call	 Py_FatalError
$LN43@Py_ReadyTy:

; 1674 : 
; 1675 :     if (PyType_Ready(&PyBaseObject_Type) < 0)

  00179	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBaseObject_Type
  00180	e8 00 00 00 00	 call	 PyType_Ready
  00185	85 c0		 test	 eax, eax
  00187	79 0c		 jns	 SHORT $LN42@Py_ReadyTy

; 1676 :         Py_FatalError("Can't initialize object type");

  00189	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@KBELOCDM@Can?8t?5initialize?5object?5type?$AA@
  00190	e8 00 00 00 00	 call	 Py_FatalError
$LN42@Py_ReadyTy:

; 1677 : 
; 1678 :     if (PyType_Ready(&PyRange_Type) < 0)

  00195	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyRange_Type
  0019c	e8 00 00 00 00	 call	 PyType_Ready
  001a1	85 c0		 test	 eax, eax
  001a3	79 0c		 jns	 SHORT $LN41@Py_ReadyTy

; 1679 :         Py_FatalError("Can't initialize range type");

  001a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@MFGHKAFO@Can?8t?5initialize?5range?5type?$AA@
  001ac	e8 00 00 00 00	 call	 Py_FatalError
$LN41@Py_ReadyTy:

; 1680 : 
; 1681 :     if (PyType_Ready(&PyDict_Type) < 0)

  001b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyDict_Type
  001b8	e8 00 00 00 00	 call	 PyType_Ready
  001bd	85 c0		 test	 eax, eax
  001bf	79 0c		 jns	 SHORT $LN40@Py_ReadyTy

; 1682 :         Py_FatalError("Can't initialize dict type");

  001c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@OEBAECMI@Can?8t?5initialize?5dict?5type?$AA@
  001c8	e8 00 00 00 00	 call	 Py_FatalError
$LN40@Py_ReadyTy:

; 1683 : 
; 1684 :     if (PyType_Ready(&PySet_Type) < 0)

  001cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PySet_Type
  001d4	e8 00 00 00 00	 call	 PyType_Ready
  001d9	85 c0		 test	 eax, eax
  001db	79 0c		 jns	 SHORT $LN39@Py_ReadyTy

; 1685 :         Py_FatalError("Can't initialize set type");

  001dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@IOKAOIEA@Can?8t?5initialize?5set?5type?$AA@
  001e4	e8 00 00 00 00	 call	 Py_FatalError
$LN39@Py_ReadyTy:

; 1686 : 
; 1687 :     if (PyType_Ready(&PyUnicode_Type) < 0)

  001e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyUnicode_Type
  001f0	e8 00 00 00 00	 call	 PyType_Ready
  001f5	85 c0		 test	 eax, eax
  001f7	79 0c		 jns	 SHORT $LN38@Py_ReadyTy

; 1688 :         Py_FatalError("Can't initialize str type");

  001f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@FNGBOMMP@Can?8t?5initialize?5str?5type?$AA@
  00200	e8 00 00 00 00	 call	 Py_FatalError
$LN38@Py_ReadyTy:

; 1689 : 
; 1690 :     if (PyType_Ready(&PySlice_Type) < 0)

  00205	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PySlice_Type
  0020c	e8 00 00 00 00	 call	 PyType_Ready
  00211	85 c0		 test	 eax, eax
  00213	79 0c		 jns	 SHORT $LN37@Py_ReadyTy

; 1691 :         Py_FatalError("Can't initialize slice type");

  00215	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@BBDMJHBN@Can?8t?5initialize?5slice?5type?$AA@
  0021c	e8 00 00 00 00	 call	 Py_FatalError
$LN37@Py_ReadyTy:

; 1692 : 
; 1693 :     if (PyType_Ready(&PyStaticMethod_Type) < 0)

  00221	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyStaticMethod_Type
  00228	e8 00 00 00 00	 call	 PyType_Ready
  0022d	85 c0		 test	 eax, eax
  0022f	79 0c		 jns	 SHORT $LN36@Py_ReadyTy

; 1694 :         Py_FatalError("Can't initialize static method type");

  00231	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@EOCDLOPI@Can?8t?5initialize?5static?5method?5t@
  00238	e8 00 00 00 00	 call	 Py_FatalError
$LN36@Py_ReadyTy:

; 1695 : 
; 1696 :     if (PyType_Ready(&PyComplex_Type) < 0)

  0023d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyComplex_Type
  00244	e8 00 00 00 00	 call	 PyType_Ready
  00249	85 c0		 test	 eax, eax
  0024b	79 0c		 jns	 SHORT $LN35@Py_ReadyTy

; 1697 :         Py_FatalError("Can't initialize complex type");

  0024d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@KMBFLGEI@Can?8t?5initialize?5complex?5type?$AA@
  00254	e8 00 00 00 00	 call	 Py_FatalError
$LN35@Py_ReadyTy:

; 1698 : 
; 1699 :     if (PyType_Ready(&PyFloat_Type) < 0)

  00259	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyFloat_Type
  00260	e8 00 00 00 00	 call	 PyType_Ready
  00265	85 c0		 test	 eax, eax
  00267	79 0c		 jns	 SHORT $LN34@Py_ReadyTy

; 1700 :         Py_FatalError("Can't initialize float type");

  00269	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@DOALBGBJ@Can?8t?5initialize?5float?5type?$AA@
  00270	e8 00 00 00 00	 call	 Py_FatalError
$LN34@Py_ReadyTy:

; 1701 : 
; 1702 :     if (PyType_Ready(&PyLong_Type) < 0)

  00275	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyLong_Type
  0027c	e8 00 00 00 00	 call	 PyType_Ready
  00281	85 c0		 test	 eax, eax
  00283	79 0c		 jns	 SHORT $LN33@Py_ReadyTy

; 1703 :         Py_FatalError("Can't initialize int type");

  00285	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@OKCEDMPJ@Can?8t?5initialize?5int?5type?$AA@
  0028c	e8 00 00 00 00	 call	 Py_FatalError
$LN33@Py_ReadyTy:

; 1704 : 
; 1705 :     if (PyType_Ready(&PyFrozenSet_Type) < 0)

  00291	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyFrozenSet_Type
  00298	e8 00 00 00 00	 call	 PyType_Ready
  0029d	85 c0		 test	 eax, eax
  0029f	79 0c		 jns	 SHORT $LN32@Py_ReadyTy

; 1706 :         Py_FatalError("Can't initialize frozenset type");

  002a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@JKDGKHHL@Can?8t?5initialize?5frozenset?5type?$AA@
  002a8	e8 00 00 00 00	 call	 Py_FatalError
$LN32@Py_ReadyTy:

; 1707 : 
; 1708 :     if (PyType_Ready(&PyProperty_Type) < 0)

  002ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyProperty_Type
  002b4	e8 00 00 00 00	 call	 PyType_Ready
  002b9	85 c0		 test	 eax, eax
  002bb	79 0c		 jns	 SHORT $LN31@Py_ReadyTy

; 1709 :         Py_FatalError("Can't initialize property type");

  002bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@LINOBPGC@Can?8t?5initialize?5property?5type?$AA@
  002c4	e8 00 00 00 00	 call	 Py_FatalError
$LN31@Py_ReadyTy:

; 1710 : 
; 1711 :     if (PyType_Ready(&_PyManagedBuffer_Type) < 0)

  002c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyManagedBuffer_Type
  002d0	e8 00 00 00 00	 call	 PyType_Ready
  002d5	85 c0		 test	 eax, eax
  002d7	79 0c		 jns	 SHORT $LN30@Py_ReadyTy

; 1712 :         Py_FatalError("Can't initialize managed buffer type");

  002d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CF@LNOOACJJ@Can?8t?5initialize?5managed?5buffer?5@
  002e0	e8 00 00 00 00	 call	 Py_FatalError
$LN30@Py_ReadyTy:

; 1713 : 
; 1714 :     if (PyType_Ready(&PyMemoryView_Type) < 0)

  002e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyMemoryView_Type
  002ec	e8 00 00 00 00	 call	 PyType_Ready
  002f1	85 c0		 test	 eax, eax
  002f3	79 0c		 jns	 SHORT $LN29@Py_ReadyTy

; 1715 :         Py_FatalError("Can't initialize memoryview type");

  002f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CB@LDGAMANL@Can?8t?5initialize?5memoryview?5type@
  002fc	e8 00 00 00 00	 call	 Py_FatalError
$LN29@Py_ReadyTy:

; 1716 : 
; 1717 :     if (PyType_Ready(&PyTuple_Type) < 0)

  00301	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyTuple_Type
  00308	e8 00 00 00 00	 call	 PyType_Ready
  0030d	85 c0		 test	 eax, eax
  0030f	79 0c		 jns	 SHORT $LN28@Py_ReadyTy

; 1718 :         Py_FatalError("Can't initialize tuple type");

  00311	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@DKPPMODK@Can?8t?5initialize?5tuple?5type?$AA@
  00318	e8 00 00 00 00	 call	 Py_FatalError
$LN28@Py_ReadyTy:

; 1719 : 
; 1720 :     if (PyType_Ready(&PyEnum_Type) < 0)

  0031d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyEnum_Type
  00324	e8 00 00 00 00	 call	 PyType_Ready
  00329	85 c0		 test	 eax, eax
  0032b	79 0c		 jns	 SHORT $LN27@Py_ReadyTy

; 1721 :         Py_FatalError("Can't initialize enumerate type");

  0032d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@PPMIAJJC@Can?8t?5initialize?5enumerate?5type?$AA@
  00334	e8 00 00 00 00	 call	 Py_FatalError
$LN27@Py_ReadyTy:

; 1722 : 
; 1723 :     if (PyType_Ready(&PyReversed_Type) < 0)

  00339	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyReversed_Type
  00340	e8 00 00 00 00	 call	 PyType_Ready
  00345	85 c0		 test	 eax, eax
  00347	79 0c		 jns	 SHORT $LN26@Py_ReadyTy

; 1724 :         Py_FatalError("Can't initialize reversed type");

  00349	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@LKMFIGMA@Can?8t?5initialize?5reversed?5type?$AA@
  00350	e8 00 00 00 00	 call	 Py_FatalError
$LN26@Py_ReadyTy:

; 1725 : 
; 1726 :     if (PyType_Ready(&PyStdPrinter_Type) < 0)

  00355	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyStdPrinter_Type
  0035c	e8 00 00 00 00	 call	 PyType_Ready
  00361	85 c0		 test	 eax, eax
  00363	79 0c		 jns	 SHORT $LN25@Py_ReadyTy

; 1727 :         Py_FatalError("Can't initialize StdPrinter");

  00365	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@BEKOCBAI@Can?8t?5initialize?5StdPrinter?$AA@
  0036c	e8 00 00 00 00	 call	 Py_FatalError
$LN25@Py_ReadyTy:

; 1728 : 
; 1729 :     if (PyType_Ready(&PyCode_Type) < 0)

  00371	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyCode_Type
  00378	e8 00 00 00 00	 call	 PyType_Ready
  0037d	85 c0		 test	 eax, eax
  0037f	79 0c		 jns	 SHORT $LN24@Py_ReadyTy

; 1730 :         Py_FatalError("Can't initialize code type");

  00381	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@LOLKLOFI@Can?8t?5initialize?5code?5type?$AA@
  00388	e8 00 00 00 00	 call	 Py_FatalError
$LN24@Py_ReadyTy:

; 1731 : 
; 1732 :     if (PyType_Ready(&PyFrame_Type) < 0)

  0038d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyFrame_Type
  00394	e8 00 00 00 00	 call	 PyType_Ready
  00399	85 c0		 test	 eax, eax
  0039b	79 0c		 jns	 SHORT $LN23@Py_ReadyTy

; 1733 :         Py_FatalError("Can't initialize frame type");

  0039d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@FJKIPOOF@Can?8t?5initialize?5frame?5type?$AA@
  003a4	e8 00 00 00 00	 call	 Py_FatalError
$LN23@Py_ReadyTy:

; 1734 : 
; 1735 :     if (PyType_Ready(&PyCFunction_Type) < 0)

  003a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyCFunction_Type
  003b0	e8 00 00 00 00	 call	 PyType_Ready
  003b5	85 c0		 test	 eax, eax
  003b7	79 0c		 jns	 SHORT $LN22@Py_ReadyTy

; 1736 :         Py_FatalError("Can't initialize builtin function type");

  003b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CH@ILEDBGFL@Can?8t?5initialize?5builtin?5functio@
  003c0	e8 00 00 00 00	 call	 Py_FatalError
$LN22@Py_ReadyTy:

; 1737 : 
; 1738 :     if (PyType_Ready(&PyMethod_Type) < 0)

  003c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyMethod_Type
  003cc	e8 00 00 00 00	 call	 PyType_Ready
  003d1	85 c0		 test	 eax, eax
  003d3	79 0c		 jns	 SHORT $LN21@Py_ReadyTy

; 1739 :         Py_FatalError("Can't initialize method type");

  003d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@JMBCLGKN@Can?8t?5initialize?5method?5type?$AA@
  003dc	e8 00 00 00 00	 call	 Py_FatalError
$LN21@Py_ReadyTy:

; 1740 : 
; 1741 :     if (PyType_Ready(&PyFunction_Type) < 0)

  003e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyFunction_Type
  003e8	e8 00 00 00 00	 call	 PyType_Ready
  003ed	85 c0		 test	 eax, eax
  003ef	79 0c		 jns	 SHORT $LN20@Py_ReadyTy

; 1742 :         Py_FatalError("Can't initialize function type");

  003f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@JCDNDJAC@Can?8t?5initialize?5function?5type?$AA@
  003f8	e8 00 00 00 00	 call	 Py_FatalError
$LN20@Py_ReadyTy:

; 1743 : 
; 1744 :     if (PyType_Ready(&PyDictProxy_Type) < 0)

  003fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyDictProxy_Type
  00404	e8 00 00 00 00	 call	 PyType_Ready
  00409	85 c0		 test	 eax, eax
  0040b	79 0c		 jns	 SHORT $LN19@Py_ReadyTy

; 1745 :         Py_FatalError("Can't initialize dict proxy type");

  0040d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CB@NFMGFHFJ@Can?8t?5initialize?5dict?5proxy?5type@
  00414	e8 00 00 00 00	 call	 Py_FatalError
$LN19@Py_ReadyTy:

; 1746 : 
; 1747 :     if (PyType_Ready(&PyGen_Type) < 0)

  00419	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyGen_Type
  00420	e8 00 00 00 00	 call	 PyType_Ready
  00425	85 c0		 test	 eax, eax
  00427	79 0c		 jns	 SHORT $LN18@Py_ReadyTy

; 1748 :         Py_FatalError("Can't initialize generator type");

  00429	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@GDBPIPMJ@Can?8t?5initialize?5generator?5type?$AA@
  00430	e8 00 00 00 00	 call	 Py_FatalError
$LN18@Py_ReadyTy:

; 1749 : 
; 1750 :     if (PyType_Ready(&PyGetSetDescr_Type) < 0)

  00435	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyGetSetDescr_Type
  0043c	e8 00 00 00 00	 call	 PyType_Ready
  00441	85 c0		 test	 eax, eax
  00443	79 0c		 jns	 SHORT $LN17@Py_ReadyTy

; 1751 :         Py_FatalError("Can't initialize get-set descriptor type");

  00445	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CJ@EAEDPJFE@Can?8t?5initialize?5get?9set?5descrip@
  0044c	e8 00 00 00 00	 call	 Py_FatalError
$LN17@Py_ReadyTy:

; 1752 : 
; 1753 :     if (PyType_Ready(&PyWrapperDescr_Type) < 0)

  00451	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyWrapperDescr_Type
  00458	e8 00 00 00 00	 call	 PyType_Ready
  0045d	85 c0		 test	 eax, eax
  0045f	79 0c		 jns	 SHORT $LN16@Py_ReadyTy

; 1754 :         Py_FatalError("Can't initialize wrapper type");

  00461	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@KOICOKPK@Can?8t?5initialize?5wrapper?5type?$AA@
  00468	e8 00 00 00 00	 call	 Py_FatalError
$LN16@Py_ReadyTy:

; 1755 : 
; 1756 :     if (PyType_Ready(&_PyMethodWrapper_Type) < 0)

  0046d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyMethodWrapper_Type
  00474	e8 00 00 00 00	 call	 PyType_Ready
  00479	85 c0		 test	 eax, eax
  0047b	79 0c		 jns	 SHORT $LN15@Py_ReadyTy

; 1757 :         Py_FatalError("Can't initialize method wrapper type");

  0047d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CF@IEPIPLE@Can?8t?5initialize?5method?5wrapper?5@
  00484	e8 00 00 00 00	 call	 Py_FatalError
$LN15@Py_ReadyTy:

; 1758 : 
; 1759 :     if (PyType_Ready(&PyEllipsis_Type) < 0)

  00489	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyEllipsis_Type
  00490	e8 00 00 00 00	 call	 PyType_Ready
  00495	85 c0		 test	 eax, eax
  00497	79 0c		 jns	 SHORT $LN14@Py_ReadyTy

; 1760 :         Py_FatalError("Can't initialize ellipsis type");

  00499	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@CDDJOKOM@Can?8t?5initialize?5ellipsis?5type?$AA@
  004a0	e8 00 00 00 00	 call	 Py_FatalError
$LN14@Py_ReadyTy:

; 1761 : 
; 1762 :     if (PyType_Ready(&PyMemberDescr_Type) < 0)

  004a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyMemberDescr_Type
  004ac	e8 00 00 00 00	 call	 PyType_Ready
  004b1	85 c0		 test	 eax, eax
  004b3	79 0c		 jns	 SHORT $LN13@Py_ReadyTy

; 1763 :         Py_FatalError("Can't initialize member descriptor type");

  004b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CI@BIFPHOIH@Can?8t?5initialize?5member?5descript@
  004bc	e8 00 00 00 00	 call	 Py_FatalError
$LN13@Py_ReadyTy:

; 1764 : 
; 1765 :     if (PyType_Ready(&PyFilter_Type) < 0)

  004c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyFilter_Type
  004c8	e8 00 00 00 00	 call	 PyType_Ready
  004cd	85 c0		 test	 eax, eax
  004cf	79 0c		 jns	 SHORT $LN12@Py_ReadyTy

; 1766 :         Py_FatalError("Can't initialize filter type");

  004d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@MNJEFCB@Can?8t?5initialize?5filter?5type?$AA@
  004d8	e8 00 00 00 00	 call	 Py_FatalError
$LN12@Py_ReadyTy:

; 1767 : 
; 1768 :     if (PyType_Ready(&PyMap_Type) < 0)

  004dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyMap_Type
  004e4	e8 00 00 00 00	 call	 PyType_Ready
  004e9	85 c0		 test	 eax, eax
  004eb	79 0c		 jns	 SHORT $LN11@Py_ReadyTy

; 1769 :         Py_FatalError("Can't initialize map type");

  004ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@JKKHFLEK@Can?8t?5initialize?5map?5type?$AA@
  004f4	e8 00 00 00 00	 call	 Py_FatalError
$LN11@Py_ReadyTy:

; 1770 : 
; 1771 :     if (PyType_Ready(&PyZip_Type) < 0)

  004f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyZip_Type
  00500	e8 00 00 00 00	 call	 PyType_Ready
  00505	85 c0		 test	 eax, eax
  00507	79 0c		 jns	 SHORT $LN10@Py_ReadyTy

; 1772 :         Py_FatalError("Can't initialize zip type");

  00509	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@IBODGPEH@Can?8t?5initialize?5zip?5type?$AA@
  00510	e8 00 00 00 00	 call	 Py_FatalError
$LN10@Py_ReadyTy:

; 1773 : 
; 1774 :     if (PyType_Ready(&_PyNamespace_Type) < 0)

  00515	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyNamespace_Type
  0051c	e8 00 00 00 00	 call	 PyType_Ready
  00521	85 c0		 test	 eax, eax
  00523	79 0c		 jns	 SHORT $LN9@Py_ReadyTy

; 1775 :         Py_FatalError("Can't initialize namespace type");

  00525	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@KLGIPOFE@Can?8t?5initialize?5namespace?5type?$AA@
  0052c	e8 00 00 00 00	 call	 Py_FatalError
$LN9@Py_ReadyTy:

; 1776 : 
; 1777 :     if (PyType_Ready(&PyCapsule_Type) < 0)

  00531	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyCapsule_Type
  00538	e8 00 00 00 00	 call	 PyType_Ready
  0053d	85 c0		 test	 eax, eax
  0053f	79 0c		 jns	 SHORT $LN8@Py_ReadyTy

; 1778 :         Py_FatalError("Can't initialize capsule type");

  00541	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@NCFEEFJG@Can?8t?5initialize?5capsule?5type?$AA@
  00548	e8 00 00 00 00	 call	 Py_FatalError
$LN8@Py_ReadyTy:

; 1779 : 
; 1780 :     if (PyType_Ready(&PyLongRangeIter_Type) < 0)

  0054d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyLongRangeIter_Type
  00554	e8 00 00 00 00	 call	 PyType_Ready
  00559	85 c0		 test	 eax, eax
  0055b	79 0c		 jns	 SHORT $LN7@Py_ReadyTy

; 1781 :         Py_FatalError("Can't initialize long range iterator type");

  0055d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CK@MLKLIMJK@Can?8t?5initialize?5long?5range?5iter@
  00564	e8 00 00 00 00	 call	 Py_FatalError
$LN7@Py_ReadyTy:

; 1782 : 
; 1783 :     if (PyType_Ready(&PyCell_Type) < 0)

  00569	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyCell_Type
  00570	e8 00 00 00 00	 call	 PyType_Ready
  00575	85 c0		 test	 eax, eax
  00577	79 0c		 jns	 SHORT $LN6@Py_ReadyTy

; 1784 :         Py_FatalError("Can't initialize cell type");

  00579	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@GNOJGKKA@Can?8t?5initialize?5cell?5type?$AA@
  00580	e8 00 00 00 00	 call	 Py_FatalError
$LN6@Py_ReadyTy:

; 1785 : 
; 1786 :     if (PyType_Ready(&PyInstanceMethod_Type) < 0)

  00585	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyInstanceMethod_Type
  0058c	e8 00 00 00 00	 call	 PyType_Ready
  00591	85 c0		 test	 eax, eax
  00593	79 0c		 jns	 SHORT $LN5@Py_ReadyTy

; 1787 :         Py_FatalError("Can't initialize instance method type");

  00595	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@HBOFAIND@Can?8t?5initialize?5instance?5method@
  0059c	e8 00 00 00 00	 call	 Py_FatalError
$LN5@Py_ReadyTy:

; 1788 : 
; 1789 :     if (PyType_Ready(&PyClassMethodDescr_Type) < 0)

  005a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyClassMethodDescr_Type
  005a8	e8 00 00 00 00	 call	 PyType_Ready
  005ad	85 c0		 test	 eax, eax
  005af	79 0c		 jns	 SHORT $LN4@Py_ReadyTy

; 1790 :         Py_FatalError("Can't initialize class method descr type");

  005b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CJ@PCHBNAPP@Can?8t?5initialize?5class?5method?5de@
  005b8	e8 00 00 00 00	 call	 Py_FatalError
$LN4@Py_ReadyTy:

; 1791 : 
; 1792 :     if (PyType_Ready(&PyMethodDescr_Type) < 0)

  005bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyMethodDescr_Type
  005c4	e8 00 00 00 00	 call	 PyType_Ready
  005c9	85 c0		 test	 eax, eax
  005cb	79 0c		 jns	 SHORT $LN3@Py_ReadyTy

; 1793 :         Py_FatalError("Can't initialize method descr type");

  005cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HCNPCLHE@Can?8t?5initialize?5method?5descr?5ty@
  005d4	e8 00 00 00 00	 call	 Py_FatalError
$LN3@Py_ReadyTy:

; 1794 : 
; 1795 :     if (PyType_Ready(&PyCallIter_Type) < 0)

  005d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyCallIter_Type
  005e0	e8 00 00 00 00	 call	 PyType_Ready
  005e5	85 c0		 test	 eax, eax
  005e7	79 0c		 jns	 SHORT $LN2@Py_ReadyTy

; 1796 :         Py_FatalError("Can't initialize call iter type");

  005e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@KPPPNCLC@Can?8t?5initialize?5call?5iter?5type?$AA@
  005f0	e8 00 00 00 00	 call	 Py_FatalError
$LN2@Py_ReadyTy:

; 1797 : 
; 1798 :     if (PyType_Ready(&PySeqIter_Type) < 0)

  005f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PySeqIter_Type
  005fc	e8 00 00 00 00	 call	 PyType_Ready
  00601	85 c0		 test	 eax, eax
  00603	79 0c		 jns	 SHORT $LN1@Py_ReadyTy

; 1799 :         Py_FatalError("Can't initialize sequence iterator type");

  00605	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CI@KCGLHPFK@Can?8t?5initialize?5sequence?5iterat@
  0060c	e8 00 00 00 00	 call	 Py_FatalError
$LN1@Py_ReadyTy:

; 1800 : 
; 1801 : #ifdef WITH_PARALLEL
; 1802 :     InitializeCriticalSectionAndSpinCount(&stdout_cs, CS_SPINCOUNT);

  00611	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:stdout_cs
  00618	ba 04 00 00 00	 mov	 edx, 4
  0061d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeCriticalSectionAndSpinCount

; 1803 :     InitializeCriticalSectionAndSpinCount(&stderr_cs, CS_SPINCOUNT);

  00623	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:stderr_cs
  0062a	ba 04 00 00 00	 mov	 edx, 4

; 1804 : #endif
; 1805 : }

  0062f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00633	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_InitializeCriticalSectionAndSpinCount
_Py_ReadyTypes ENDP
_TEXT	ENDS
PUBLIC	PyMem_Malloc
EXTRN	__imp_malloc:PROC
EXTRN	_PxMem_Malloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyMem_Malloc DD imagerel $LN9
	DD	imagerel $LN9+87
	DD	imagerel $unwind$PyMem_Malloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMem_Malloc DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyMem_Malloc
_TEXT	SEGMENT
nbytes$ = 48
PyMem_Malloc PROC					; COMDAT

; 1966 : {

$LN9:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 1967 :     Px_RETURN(_PxMem_Malloc(nbytes))

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 09		 jne	 SHORT $LN8@PyMem_Mall

; 1968 :     return PyMem_MALLOC(nbytes);

  00012	e8 00 00 00 00	 call	 _Py_PXCTX
  00017	85 c0		 test	 eax, eax
  00019	74 0d		 je	 SHORT $LN6@PyMem_Mall
$LN8@PyMem_Mall:
  0001b	48 8b cb	 mov	 rcx, rbx

; 1969 : }

  0001e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00022	5b		 pop	 rbx
  00023	e9 00 00 00 00	 jmp	 _PxMem_Malloc
$LN6@PyMem_Mall:

; 1968 :     return PyMem_MALLOC(nbytes);

  00028	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  00032	48 3b d8	 cmp	 rbx, rax
  00035	76 08		 jbe	 SHORT $LN4@PyMem_Mall
  00037	33 c0		 xor	 eax, eax

; 1969 : }

  00039	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003d	5b		 pop	 rbx
  0003e	c3		 ret	 0
$LN4@PyMem_Mall:

; 1968 :     return PyMem_MALLOC(nbytes);

  0003f	48 85 db	 test	 rbx, rbx
  00042	b9 01 00 00 00	 mov	 ecx, 1
  00047	48 0f 45 cb	 cmovne	 rcx, rbx

; 1969 : }

  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5b		 pop	 rbx
  00050	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_malloc
PyMem_Malloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@BPNPJLEC@PyMem_Realloc?$AA@		; `string'
PUBLIC	PyMem_Realloc
EXTRN	__imp_realloc:PROC
EXTRN	_PxMem_Realloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyMem_Realloc DD imagerel $LN9
	DD	imagerel $LN9+151
	DD	imagerel $unwind$PyMem_Realloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMem_Realloc DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0O@BPNPJLEC@PyMem_Realloc?$AA@
CONST	SEGMENT
??_C@_0O@BPNPJLEC@PyMem_Realloc?$AA@ DB 'PyMem_Realloc', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyMem_Realloc
_TEXT	SEGMENT
p$ = 64
nbytes$ = 72
PyMem_Realloc PROC					; COMDAT

; 1973 : {

$LN9:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	48 8b f9	 mov	 rdi, rcx

; 1974 :     Px_RETURN(_PxMem_Realloc(p, nbytes))

  00010	e8 00 00 00 00	 call	 _Py_PXCTX
  00015	85 c0		 test	 eax, eax
  00017	75 2d		 jne	 SHORT $LN8@PyMem_Real

; 1975 :     Py_GUARD_MEM(p);

  00019	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@BPNPJLEC@PyMem_Realloc?$AA@
  00027	4c 8b cf	 mov	 r9, rdi
  0002a	41 b8 b7 07 00
	00		 mov	 r8d, 1975		; 000007b7H
  00030	c7 44 24 20 00
	02 00 00	 mov	 DWORD PTR [rsp+32], 512	; 00000200H
  00038	e8 00 00 00 00	 call	 _PyParallel_Guard

; 1976 :     return PyMem_REALLOC(p, nbytes);

  0003d	e8 00 00 00 00	 call	 _Py_PXCTX
  00042	85 c0		 test	 eax, eax
  00044	74 15		 je	 SHORT $LN6@PyMem_Real
$LN8@PyMem_Real:
  00046	48 8b d3	 mov	 rdx, rbx
  00049	48 8b cf	 mov	 rcx, rdi

; 1977 : }

  0004c	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00051	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00055	5f		 pop	 rdi
  00056	e9 00 00 00 00	 jmp	 _PxMem_Realloc
$LN6@PyMem_Real:

; 1976 :     return PyMem_REALLOC(p, nbytes);

  0005b	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  00065	48 3b d8	 cmp	 rbx, rax
  00068	76 0d		 jbe	 SHORT $LN4@PyMem_Real
  0006a	33 c0		 xor	 eax, eax

; 1977 : }

  0006c	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00071	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00075	5f		 pop	 rdi
  00076	c3		 ret	 0
$LN4@PyMem_Real:

; 1976 :     return PyMem_REALLOC(p, nbytes);

  00077	48 85 db	 test	 rbx, rbx
  0007a	ba 01 00 00 00	 mov	 edx, 1
  0007f	48 8b cf	 mov	 rcx, rdi
  00082	48 0f 45 d3	 cmovne	 rdx, rbx

; 1977 : }

  00086	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0008b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008f	5f		 pop	 rdi
  00090	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_realloc
PyMem_Realloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@GOGLDDK@PyMem_Free?$AA@		; `string'
PUBLIC	PyMem_Free
EXTRN	__imp_free:PROC
EXTRN	_PxMem_Free:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyMem_Free DD imagerel $LN8
	DD	imagerel $LN8+96
	DD	imagerel $unwind$PyMem_Free
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMem_Free DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@GOGLDDK@PyMem_Free?$AA@
CONST	SEGMENT
??_C@_0L@GOGLDDK@PyMem_Free?$AA@ DB 'PyMem_Free', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyMem_Free
_TEXT	SEGMENT
p$ = 64
PyMem_Free PROC						; COMDAT

; 1981 : {

$LN8:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 1982 :     Px_RETURN_VOID(_PxMem_Free(p))

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 0d		 je	 SHORT $LN2@PyMem_Free
  00012	48 8b cb	 mov	 rcx, rbx
$LN7@PyMem_Free:

; 1986 : }

  00015	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00019	5b		 pop	 rbx
  0001a	e9 00 00 00 00	 jmp	 _PxMem_Free
$LN2@PyMem_Free:

; 1983 :     if (p)

  0001f	48 85 db	 test	 rbx, rbx
  00022	74 24		 je	 SHORT $LN1@PyMem_Free

; 1984 :         Py_GUARD_MEM(p);

  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@GOGLDDK@PyMem_Free?$AA@
  00032	4c 8b cb	 mov	 r9, rbx
  00035	41 b8 c0 07 00
	00		 mov	 r8d, 1984		; 000007c0H
  0003b	c7 44 24 20 00
	02 00 00	 mov	 DWORD PTR [rsp+32], 512	; 00000200H
  00043	e8 00 00 00 00	 call	 _PyParallel_Guard
$LN1@PyMem_Free:

; 1985 :     PyMem_FREE(p);

  00048	e8 00 00 00 00	 call	 _Py_PXCTX
  0004d	48 8b cb	 mov	 rcx, rbx
  00050	85 c0		 test	 eax, eax
  00052	75 c1		 jne	 SHORT $LN7@PyMem_Free

; 1986 : }

  00054	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00058	5b		 pop	 rbx
  00059	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_free
PyMem_Free ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@BLFENJDH@_PyObject_DebugTypeStats?$AA@ ; `string'
PUBLIC	_PyObject_DebugTypeStats
EXTRN	_PyTuple_DebugMallocStats:PROC
EXTRN	_PySet_DebugMallocStats:PROC
EXTRN	_PyMethod_DebugMallocStats:PROC
EXTRN	_PyList_DebugMallocStats:PROC
EXTRN	_PyFrame_DebugMallocStats:PROC
EXTRN	_PyFloat_DebugMallocStats:PROC
EXTRN	_PyDict_DebugMallocStats:PROC
EXTRN	_PyCFunction_DebugMallocStats:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_DebugTypeStats DD imagerel $LN4
	DD	imagerel $LN4+115
	DD	imagerel $unwind$_PyObject_DebugTypeStats
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_DebugTypeStats DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0BJ@BLFENJDH@_PyObject_DebugTypeStats?$AA@
CONST	SEGMENT
??_C@_0BJ@BLFENJDH@_PyObject_DebugTypeStats?$AA@ DB '_PyObject_DebugTypeS'
	DB	'tats', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyObject_DebugTypeStats
_TEXT	SEGMENT
out$ = 48
_PyObject_DebugTypeStats PROC				; COMDAT

; 1990 : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 1991 :     Py_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN1@PyObject_D@2
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@BLFENJDH@_PyObject_DebugTypeStats?$AA@
  00020	45 33 c9	 xor	 r9d, r9d
  00023	41 b8 c7 07 00
	00		 mov	 r8d, 1991		; 000007c7H
  00029	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@PyObject_D@2:

; 1992 :     _PyCFunction_DebugMallocStats(out);

  0002e	48 8b cb	 mov	 rcx, rbx
  00031	e8 00 00 00 00	 call	 _PyCFunction_DebugMallocStats

; 1993 :     _PyDict_DebugMallocStats(out);

  00036	48 8b cb	 mov	 rcx, rbx
  00039	e8 00 00 00 00	 call	 _PyDict_DebugMallocStats

; 1994 :     _PyFloat_DebugMallocStats(out);

  0003e	48 8b cb	 mov	 rcx, rbx
  00041	e8 00 00 00 00	 call	 _PyFloat_DebugMallocStats

; 1995 :     _PyFrame_DebugMallocStats(out);

  00046	48 8b cb	 mov	 rcx, rbx
  00049	e8 00 00 00 00	 call	 _PyFrame_DebugMallocStats

; 1996 :     _PyList_DebugMallocStats(out);

  0004e	48 8b cb	 mov	 rcx, rbx
  00051	e8 00 00 00 00	 call	 _PyList_DebugMallocStats

; 1997 :     _PyMethod_DebugMallocStats(out);

  00056	48 8b cb	 mov	 rcx, rbx
  00059	e8 00 00 00 00	 call	 _PyMethod_DebugMallocStats

; 1998 :     _PySet_DebugMallocStats(out);

  0005e	48 8b cb	 mov	 rcx, rbx
  00061	e8 00 00 00 00	 call	 _PySet_DebugMallocStats

; 1999 :     _PyTuple_DebugMallocStats(out);

  00066	48 8b cb	 mov	 rcx, rbx

; 2000 : }

  00069	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006d	5b		 pop	 rbx
  0006e	e9 00 00 00 00	 jmp	 _PyTuple_DebugMallocStats
_PyObject_DebugTypeStats ENDP
_TEXT	ENDS
PUBLIC	??_C@_07EMAABEDE@Py_Repr?$AA@			; `string'
PUBLIC	??_C@_0N@BJMJKJAA@Py_ReprEnter?$AA@		; `string'
PUBLIC	Py_ReprEnter
EXTRN	PyList_Append:PROC
EXTRN	PyDict_SetItemString:PROC
EXTRN	PyList_New:PROC
EXTRN	PyDict_GetItemString:PROC
EXTRN	PyThreadState_GetDict:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$Py_ReprEnter DD imagerel $LN20
	DD	imagerel $LN20+102
	DD	imagerel $unwind$Py_ReprEnter
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$Py_ReprEnter DD imagerel $LN20+102
	DD	imagerel $LN20+176
	DD	imagerel $chain$0$Py_ReprEnter
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$Py_ReprEnter DD imagerel $LN20+176
	DD	imagerel $LN20+251
	DD	imagerel $chain$2$Py_ReprEnter
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$Py_ReprEnter DD imagerel $LN20+251
	DD	imagerel $LN20+272
	DD	imagerel $chain$4$Py_ReprEnter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$Py_ReprEnter DD 020021H
	DD	083400H
	DD	imagerel $LN20
	DD	imagerel $LN20+102
	DD	imagerel $unwind$Py_ReprEnter
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$Py_ReprEnter DD 020021H
	DD	083400H
	DD	imagerel $LN20
	DD	imagerel $LN20+102
	DD	imagerel $unwind$Py_ReprEnter
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$Py_ReprEnter DD 020521H
	DD	083405H
	DD	imagerel $LN20
	DD	imagerel $LN20+102
	DD	imagerel $unwind$Py_ReprEnter
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_ReprEnter DD 040a01H
	DD	09640aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_07EMAABEDE@Py_Repr?$AA@
CONST	SEGMENT
??_C@_07EMAABEDE@Py_Repr?$AA@ DB 'Py_Repr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BJMJKJAA@Py_ReprEnter?$AA@
CONST	SEGMENT
??_C@_0N@BJMJKJAA@Py_ReprEnter?$AA@ DB 'Py_ReprEnter', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT Py_ReprEnter
_TEXT	SEGMENT
obj$ = 64
Py_ReprEnter PROC					; COMDAT

; 2018 : {

$LN20:
  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 2019 :     PyObject *dict;
; 2020 :     PyObject *list;
; 2021 :     Py_ssize_t i;
; 2022 : 
; 2023 :     PyPx_GUARD_OBJ(obj);

  0000d	e8 00 00 00 00	 call	 _Py_PXCTX
  00012	4c 8b cf	 mov	 r9, rdi
  00015	41 b8 e7 07 00
	00		 mov	 r8d, 2023		; 000007e7H
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BJMJKJAA@Py_ReprEnter?$AA@
  00029	85 c0		 test	 eax, eax
  0002b	74 0a		 je	 SHORT $LN9@Py_ReprEnt
  0002d	c7 44 24 20 40
	00 00 00	 mov	 DWORD PTR [rsp+32], 64	; 00000040H
  00035	eb 08		 jmp	 SHORT $LN18@Py_ReprEnt
$LN9@Py_ReprEnt:
  00037	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR [rsp+32], 32	; 00000020H
$LN18@Py_ReprEnt:
  0003f	e8 00 00 00 00	 call	 _PyParallel_Guard

; 2024 : 
; 2025 :     dict = PyThreadState_GetDict();

  00044	e8 00 00 00 00	 call	 PyThreadState_GetDict
  00049	48 8b f0	 mov	 rsi, rax

; 2026 :     if (dict == NULL)

  0004c	48 85 c0	 test	 rax, rax
  0004f	75 0b		 jne	 SHORT $LN7@Py_ReprEnt

; 2044 : }

  00051	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00056	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005a	5f		 pop	 rdi
  0005b	c3		 ret	 0
$LN7@Py_ReprEnt:

; 2027 :         return 0;
; 2028 :     list = PyDict_GetItemString(dict, KEY);

  0005c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07EMAABEDE@Py_Repr?$AA@
  00063	48 8b c8	 mov	 rcx, rax
  00066	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0006b	e8 00 00 00 00	 call	 PyDict_GetItemString
  00070	48 8b d8	 mov	 rbx, rax

; 2029 :     if (list == NULL) {

  00073	48 85 c0	 test	 rax, rax
  00076	75 40		 jne	 SHORT $LN6@Py_ReprEnt

; 2030 :         list = PyList_New(0);

  00078	33 c9		 xor	 ecx, ecx
  0007a	e8 00 00 00 00	 call	 PyList_New
  0007f	48 8b d8	 mov	 rbx, rax

; 2031 :         if (list == NULL)

  00082	48 85 c0	 test	 rax, rax

; 2032 :             return -1;

  00085	74 16		 je	 SHORT $LN19@Py_ReprEnt

; 2033 :         if (PyDict_SetItemString(dict, KEY, list) < 0)

  00087	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07EMAABEDE@Py_Repr?$AA@
  0008e	4c 8b c0	 mov	 r8, rax
  00091	48 8b ce	 mov	 rcx, rsi
  00094	e8 00 00 00 00	 call	 PyDict_SetItemString
  00099	85 c0		 test	 eax, eax
  0009b	79 13		 jns	 SHORT $LN4@Py_ReprEnt
$LN19@Py_ReprEnt:

; 2034 :             return -1;

  0009d	83 c8 ff	 or	 eax, -1
  000a0	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 2044 : }

  000a5	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000aa	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ae	5f		 pop	 rdi
  000af	c3		 ret	 0
$LN4@Py_ReprEnt:

; 2035 :         Py_DECREF(list);

  000b0	48 8b cb	 mov	 rcx, rbx
  000b3	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@Py_ReprEnt:

; 2038 :     while (--i >= 0) {

  000b8	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  000bc	48 ff c9	 dec	 rcx
  000bf	78 1d		 js	 SHORT $LN2@Py_ReprEnt

; 2036 :     }
; 2037 :     i = PyList_GET_SIZE(list);

  000c1	48 8b 43 70	 mov	 rax, QWORD PTR [rbx+112]
  000c5	48 8d 14 c8	 lea	 rdx, QWORD PTR [rax+rcx*8]
  000c9	0f 1f 80 00 00
	00 00		 npad	 7
$LL3@Py_ReprEnt:

; 2039 :         if (PyList_GET_ITEM(list, i) == obj)

  000d0	48 39 3a	 cmp	 QWORD PTR [rdx], rdi
  000d3	74 26		 je	 SHORT $LN16@Py_ReprEnt

; 2038 :     while (--i >= 0) {

  000d5	48 83 ea 08	 sub	 rdx, 8
  000d9	48 ff c9	 dec	 rcx
  000dc	79 f2		 jns	 SHORT $LL3@Py_ReprEnt
$LN2@Py_ReprEnt:

; 2040 :             return 1;
; 2041 :     }
; 2042 :     PyList_Append(list, obj);

  000de	48 8b d7	 mov	 rdx, rdi
  000e1	48 8b cb	 mov	 rcx, rbx
  000e4	e8 00 00 00 00	 call	 PyList_Append
  000e9	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 2043 :     return 0;

  000ee	33 c0		 xor	 eax, eax

; 2044 : }

  000f0	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000f5	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000f9	5f		 pop	 rdi
  000fa	c3		 ret	 0
$LN16@Py_ReprEnt:
  000fb	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00100	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00105	b8 01 00 00 00	 mov	 eax, 1
  0010a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0010e	5f		 pop	 rdi
  0010f	c3		 ret	 0
Py_ReprEnter ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@DFDCPHML@Py_ReprLeave?$AA@		; `string'
PUBLIC	Py_ReprLeave
EXTRN	PyList_SetSlice:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$Py_ReprLeave DD imagerel $LN17
	DD	imagerel $LN17+171
	DD	imagerel $unwind$Py_ReprLeave
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_ReprLeave DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0N@DFDCPHML@Py_ReprLeave?$AA@
CONST	SEGMENT
??_C@_0N@DFDCPHML@Py_ReprLeave?$AA@ DB 'Py_ReprLeave', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT Py_ReprLeave
_TEXT	SEGMENT
obj$ = 64
Py_ReprLeave PROC					; COMDAT

; 2048 : {

$LN17:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 2049 :     PyObject *dict;
; 2050 :     PyObject *list;
; 2051 :     Py_ssize_t i;
; 2052 : 
; 2053 :     PyPx_GUARD_OBJ(obj);

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	4c 8b cb	 mov	 r9, rbx
  00011	41 b8 05 08 00
	00		 mov	 r8d, 2053		; 00000805H
  00017	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@DFDCPHML@Py_ReprLeave?$AA@
  00025	85 c0		 test	 eax, eax
  00027	74 0a		 je	 SHORT $LN8@Py_ReprLea
  00029	c7 44 24 20 40
	00 00 00	 mov	 DWORD PTR [rsp+32], 64	; 00000040H
  00031	eb 08		 jmp	 SHORT $LN16@Py_ReprLea
$LN8@Py_ReprLea:
  00033	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR [rsp+32], 32	; 00000020H
$LN16@Py_ReprLea:
  0003b	e8 00 00 00 00	 call	 _PyParallel_Guard

; 2054 : 
; 2055 :     dict = PyThreadState_GetDict();

  00040	e8 00 00 00 00	 call	 PyThreadState_GetDict

; 2056 :     if (dict == NULL)

  00045	48 85 c0	 test	 rax, rax
  00048	74 5b		 je	 SHORT $LN4@Py_ReprLea

; 2057 :         return;
; 2058 :     list = PyDict_GetItemString(dict, KEY);

  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07EMAABEDE@Py_Repr?$AA@
  00051	48 8b c8	 mov	 rcx, rax
  00054	e8 00 00 00 00	 call	 PyDict_GetItemString
  00059	4c 8b d8	 mov	 r11, rax

; 2059 :     if (list == NULL || !PyList_Check(list))

  0005c	48 85 c0	 test	 rax, rax
  0005f	74 44		 je	 SHORT $LN4@Py_ReprLea
  00061	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00065	f7 81 00 01 00
	00 00 00 00 02	 test	 DWORD PTR [rcx+256], 33554432 ; 02000000H
  0006f	74 34		 je	 SHORT $LN4@Py_ReprLea

; 2062 :     /* Count backwards because we always expect obj to be list[-1] */
; 2063 :     while (--i >= 0) {

  00071	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  00075	48 ff ca	 dec	 rdx
  00078	78 2b		 js	 SHORT $LN4@Py_ReprLea

; 2060 :         return;
; 2061 :     i = PyList_GET_SIZE(list);

  0007a	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0007e	48 8d 04 d1	 lea	 rax, QWORD PTR [rcx+rdx*8]
$LL3@Py_ReprLea:

; 2064 :         if (PyList_GET_ITEM(list, i) == obj) {

  00082	48 39 18	 cmp	 QWORD PTR [rax], rbx
  00085	74 0f		 je	 SHORT $LN15@Py_ReprLea

; 2062 :     /* Count backwards because we always expect obj to be list[-1] */
; 2063 :     while (--i >= 0) {

  00087	48 83 e8 08	 sub	 rax, 8
  0008b	48 ff ca	 dec	 rdx
  0008e	79 f2		 jns	 SHORT $LL3@Py_ReprLea

; 2066 :             break;
; 2067 :         }
; 2068 :     }
; 2069 : }

  00090	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00094	5b		 pop	 rbx
  00095	c3		 ret	 0
$LN15@Py_ReprLea:

; 2065 :             PyList_SetSlice(list, i, i + 1, NULL);

  00096	4c 8d 42 01	 lea	 r8, QWORD PTR [rdx+1]
  0009a	45 33 c9	 xor	 r9d, r9d
  0009d	49 8b cb	 mov	 rcx, r11
  000a0	e8 00 00 00 00	 call	 PyList_SetSlice
$LN4@Py_ReprLea:

; 2066 :             break;
; 2067 :         }
; 2068 :     }
; 2069 : }

  000a5	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a9	5b		 pop	 rbx
  000aa	c3		 ret	 0
Py_ReprLeave ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@OOFABKDM@_PyTrash_deposit_object?$AA@	; `string'
PUBLIC	_PyTrash_deposit_object
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyTrash_deposit_object DD imagerel $LN7
	DD	imagerel $LN7+165
	DD	imagerel $unwind$_PyTrash_deposit_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyTrash_deposit_object DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0BI@OOFABKDM@_PyTrash_deposit_object?$AA@
CONST	SEGMENT
??_C@_0BI@OOFABKDM@_PyTrash_deposit_object?$AA@ DB '_PyTrash_deposit_obje'
	DB	'ct', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyTrash_deposit_object
_TEXT	SEGMENT
op$ = 64
_PyTrash_deposit_object PROC				; COMDAT

; 2087 : {

$LN7:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 2088 :     Py_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN1@PyTrash_de
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@OOFABKDM@_PyTrash_deposit_object?$AA@
  00020	45 33 c9	 xor	 r9d, r9d
  00023	41 b8 28 08 00
	00		 mov	 r8d, 2088		; 00000828H
  00029	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@PyTrash_de:

; 2089 :     Py_GUARD_OBJ(op);

  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@OOFABKDM@_PyTrash_deposit_object?$AA@
  0003c	4c 8b cb	 mov	 r9, rbx
  0003f	41 b8 29 08 00
	00		 mov	 r8d, 2089		; 00000829H
  00045	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR [rsp+32], 32	; 00000020H
  0004d	e8 00 00 00 00	 call	 _PyParallel_Guard

; 2090 :     assert(PyObject_IS_GC(op));
; 2091 :     assert(_Py_AS_GC(op)->gc.gc_refs == _PyGC_REFS_UNTRACKED);
; 2092 :     assert(op->ob_refcnt == 0);
; 2093 :     _Py_AS_GC(op)->gc.gc_prev = (PyGC_Head *)_PyTrash_delete_later;

  00052	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00059	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@OOFABKDM@_PyTrash_deposit_object?$AA@
  00060	4c 8b cb	 mov	 r9, rbx
  00063	41 b8 2d 08 00
	00		 mov	 r8d, 2093		; 0000082dH
  00069	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00071	e8 00 00 00 00	 call	 _PyParallel_Guard
  00076	85 c0		 test	 eax, eax
  00078	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyTrash_delete_later
  0007f	74 13		 je	 SHORT $LN4@PyTrash_de
  00081	33 c9		 xor	 ecx, ecx
  00083	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 2094 :     _PyTrash_delete_later = op;

  00087	48 89 1d 00 00
	00 00		 mov	 QWORD PTR _PyTrash_delete_later, rbx

; 2095 : }

  0008e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00092	5b		 pop	 rbx
  00093	c3		 ret	 0
$LN4@PyTrash_de:

; 2090 :     assert(PyObject_IS_GC(op));
; 2091 :     assert(_Py_AS_GC(op)->gc.gc_refs == _PyGC_REFS_UNTRACKED);
; 2092 :     assert(op->ob_refcnt == 0);
; 2093 :     _Py_AS_GC(op)->gc.gc_prev = (PyGC_Head *)_PyTrash_delete_later;

  00094	48 89 43 f0	 mov	 QWORD PTR [rbx-16], rax

; 2094 :     _PyTrash_delete_later = op;

  00098	48 89 1d 00 00
	00 00		 mov	 QWORD PTR _PyTrash_delete_later, rbx

; 2095 : }

  0009f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a3	5b		 pop	 rbx
  000a4	c3		 ret	 0
_PyTrash_deposit_object ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@LGGMIPKN@_PyTrash_thread_deposit_object?$AA@ ; `string'
PUBLIC	_PyTrash_thread_deposit_object
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyTrash_thread_deposit_object DD imagerel $LN8
	DD	imagerel $LN8+189
	DD	imagerel $unwind$_PyTrash_thread_deposit_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyTrash_thread_deposit_object DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0BP@LGGMIPKN@_PyTrash_thread_deposit_object?$AA@
CONST	SEGMENT
??_C@_0BP@LGGMIPKN@_PyTrash_thread_deposit_object?$AA@ DB '_PyTrash_threa'
	DB	'd_deposit_object', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyTrash_thread_deposit_object
_TEXT	SEGMENT
op$ = 64
_PyTrash_thread_deposit_object PROC			; COMDAT

; 2100 : {

$LN8:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 2101 :     PyThreadState *tstate;
; 2102 :     Py_GUARD

  0000d	e8 00 00 00 00	 call	 _Py_PXCTX
  00012	85 c0		 test	 eax, eax
  00014	74 1c		 je	 SHORT $LN1@PyTrash_th
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@LGGMIPKN@_PyTrash_thread_deposit_object?$AA@
  00024	45 33 c9	 xor	 r9d, r9d
  00027	41 b8 36 08 00
	00		 mov	 r8d, 2102		; 00000836H
  0002d	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@PyTrash_th:

; 2103 :     Py_GUARD_OBJ(op);

  00032	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@LGGMIPKN@_PyTrash_thread_deposit_object?$AA@
  00040	4c 8b cf	 mov	 r9, rdi
  00043	41 b8 37 08 00
	00		 mov	 r8d, 2103		; 00000837H
  00049	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR [rsp+32], 32	; 00000020H
  00051	e8 00 00 00 00	 call	 _PyParallel_Guard

; 2104 :     tstate = PyThreadState_GET();

  00056	e8 00 00 00 00	 call	 _Py_PXCTX
  0005b	85 c0		 test	 eax, eax
  0005d	74 0a		 je	 SHORT $LN4@PyTrash_th
  0005f	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00064	48 8b d8	 mov	 rbx, rax
  00067	eb 07		 jmp	 SHORT $LN5@PyTrash_th
$LN4@PyTrash_th:
  00069	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR _PyThreadState_Current
$LN5@PyTrash_th:

; 2105 :     assert(PyObject_IS_GC(op));
; 2106 :     assert(_Py_AS_GC(op)->gc.gc_refs == _PyGC_REFS_UNTRACKED);
; 2107 :     assert(op->ob_refcnt == 0);
; 2108 :     _Py_AS_GC(op)->gc.gc_prev = (PyGC_Head *) tstate->trash_delete_later;

  00070	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00077	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@LGGMIPKN@_PyTrash_thread_deposit_object?$AA@
  0007e	4c 8b cf	 mov	 r9, rdi
  00081	41 b8 3c 08 00
	00		 mov	 r8d, 2108		; 0000083cH
  00087	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0008f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00094	85 c0		 test	 eax, eax
  00096	74 04		 je	 SHORT $LN6@PyTrash_th
  00098	33 c9		 xor	 ecx, ecx
  0009a	eb 04		 jmp	 SHORT $LN7@PyTrash_th
$LN6@PyTrash_th:
  0009c	48 8d 4f e8	 lea	 rcx, QWORD PTR [rdi-24]
$LN7@PyTrash_th:
  000a0	48 8b 83 98 00
	00 00		 mov	 rax, QWORD PTR [rbx+152]
  000a7	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 2109 :     tstate->trash_delete_later = op;

  000ab	48 89 bb 98 00
	00 00		 mov	 QWORD PTR [rbx+152], rdi

; 2110 : }

  000b2	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000b7	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000bb	5f		 pop	 rdi
  000bc	c3		 ret	 0
_PyTrash_thread_deposit_object ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@KCEAOLMP@_PyTrash_destroy_chain?$AA@	; `string'
PUBLIC	_PyTrash_destroy_chain
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyTrash_destroy_chain DD imagerel $LN10
	DD	imagerel $LN10+55
	DD	imagerel $unwind$_PyTrash_destroy_chain
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_PyTrash_destroy_chain DD imagerel $LN10+55
	DD	imagerel $LN10+168
	DD	imagerel $chain$0$_PyTrash_destroy_chain
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_PyTrash_destroy_chain DD imagerel $LN10+168
	DD	imagerel $LN10+174
	DD	imagerel $chain$1$_PyTrash_destroy_chain
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_PyTrash_destroy_chain DD 021H
	DD	imagerel $LN10
	DD	imagerel $LN10+55
	DD	imagerel $unwind$_PyTrash_destroy_chain
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_PyTrash_destroy_chain DD 020521H
	DD	087405H
	DD	imagerel $LN10
	DD	imagerel $LN10+55
	DD	imagerel $unwind$_PyTrash_destroy_chain
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyTrash_destroy_chain DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0BH@KCEAOLMP@_PyTrash_destroy_chain?$AA@
CONST	SEGMENT
??_C@_0BH@KCEAOLMP@_PyTrash_destroy_chain?$AA@ DB '_PyTrash_destroy_chain'
	DB	00H						; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyTrash_destroy_chain
_TEXT	SEGMENT
_PyTrash_destroy_chain PROC				; COMDAT

; 2117 : {

$LN10:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 2118 :     Py_GUARD

  00006	e8 00 00 00 00	 call	 _Py_PXCTX
  0000b	85 c0		 test	 eax, eax
  0000d	74 1c		 je	 SHORT $LN8@PyTrash_de@2
  0000f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00016	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@KCEAOLMP@_PyTrash_destroy_chain?$AA@
  0001d	45 33 c9	 xor	 r9d, r9d
  00020	41 b8 46 08 00
	00		 mov	 r8d, 2118		; 00000846H
  00026	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN8@PyTrash_de@2:

; 2119 :     while (_PyTrash_delete_later) {

  0002b	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR _PyTrash_delete_later
  00032	48 85 db	 test	 rbx, rbx
  00035	74 71		 je	 SHORT $LN1@PyTrash_de@2
  00037	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  0003c	0f 1f 40 00	 npad	 4
$LL2@PyTrash_de@2:

; 2120 :         PyObject *op = _PyTrash_delete_later;
; 2121 :         destructor dealloc = Py_TYPE(op)->tp_dealloc;

  00040	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 2122 : 
; 2123 :         _PyTrash_delete_later =
; 2124 :             (PyObject*) _Py_AS_GC(op)->gc.gc_prev;

  00044	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@KCEAOLMP@_PyTrash_destroy_chain?$AA@
  00052	48 8b b8 88 00
	00 00		 mov	 rdi, QWORD PTR [rax+136]
  00059	4c 8b cb	 mov	 r9, rbx
  0005c	41 b8 4c 08 00
	00		 mov	 r8d, 2124		; 0000084cH
  00062	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0006a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0006f	85 c0		 test	 eax, eax
  00071	74 04		 je	 SHORT $LN6@PyTrash_de@2
  00073	33 c0		 xor	 eax, eax
  00075	eb 04		 jmp	 SHORT $LN7@PyTrash_de@2
$LN6@PyTrash_de@2:
  00077	48 8d 43 e8	 lea	 rax, QWORD PTR [rbx-24]
$LN7@PyTrash_de@2:
  0007b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]

; 2125 : 
; 2126 :         /* Call the deallocator directly.  This used to try to
; 2127 :          * fool Py_DECREF into calling it indirectly, but
; 2128 :          * Py_DECREF was already called on this object, and in
; 2129 :          * assorted non-release builds calling Py_DECREF again ends
; 2130 :          * up distorting allocation statistics.
; 2131 :          */
; 2132 :         assert(op->ob_refcnt == 0);
; 2133 :         ++_PyTrash_delete_nesting;

  0007f	ff 05 00 00 00
	00		 inc	 DWORD PTR _PyTrash_delete_nesting

; 2134 :         (*dealloc)(op);

  00085	48 8b cb	 mov	 rcx, rbx
  00088	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PyTrash_delete_later, rax
  0008f	ff d7		 call	 rdi
  00091	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR _PyTrash_delete_later

; 2135 :         --_PyTrash_delete_nesting;

  00098	ff 0d 00 00 00
	00		 dec	 DWORD PTR _PyTrash_delete_nesting
  0009e	48 85 db	 test	 rbx, rbx
  000a1	75 9d		 jne	 SHORT $LL2@PyTrash_de@2
  000a3	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
$LN1@PyTrash_de@2:

; 2136 :     }
; 2137 : }

  000a8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ac	5b		 pop	 rbx
  000ad	c3		 ret	 0
_PyTrash_destroy_chain ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@PGJJGLPC@_PyTrash_thread_destroy_chain?$AA@ ; `string'
PUBLIC	_PyTrash_thread_destroy_chain
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyTrash_thread_destroy_chain DD imagerel $LN12
	DD	imagerel $LN12+83
	DD	imagerel $unwind$_PyTrash_thread_destroy_chain
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_PyTrash_thread_destroy_chain DD imagerel $LN12+83
	DD	imagerel $LN12+210
	DD	imagerel $chain$1$_PyTrash_thread_destroy_chain
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_PyTrash_thread_destroy_chain DD imagerel $LN12+210
	DD	imagerel $LN12+216
	DD	imagerel $chain$2$_PyTrash_thread_destroy_chain
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_PyTrash_thread_destroy_chain DD 021H
	DD	imagerel $LN12
	DD	imagerel $LN12+83
	DD	imagerel $unwind$_PyTrash_thread_destroy_chain
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_PyTrash_thread_destroy_chain DD 040a21H
	DD	09740aH
	DD	086405H
	DD	imagerel $LN12
	DD	imagerel $LN12+83
	DD	imagerel $unwind$_PyTrash_thread_destroy_chain
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyTrash_thread_destroy_chain DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0BO@PGJJGLPC@_PyTrash_thread_destroy_chain?$AA@
CONST	SEGMENT
??_C@_0BO@PGJJGLPC@_PyTrash_thread_destroy_chain?$AA@ DB '_PyTrash_thread'
	DB	'_destroy_chain', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyTrash_thread_destroy_chain
_TEXT	SEGMENT
_PyTrash_thread_destroy_chain PROC			; COMDAT

; 2142 : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 2143 :     PyThreadState *tstate;
; 2144 :     Py_GUARD

  00006	e8 00 00 00 00	 call	 _Py_PXCTX
  0000b	85 c0		 test	 eax, eax
  0000d	74 1c		 je	 SHORT $LN3@PyTrash_th@2
  0000f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00016	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@PGJJGLPC@_PyTrash_thread_destroy_chain?$AA@
  0001d	45 33 c9	 xor	 r9d, r9d
  00020	41 b8 60 08 00
	00		 mov	 r8d, 2144		; 00000860H
  00026	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@PyTrash_th@2:

; 2145 :     tstate = PyThreadState_GET();

  0002b	e8 00 00 00 00	 call	 _Py_PXCTX
  00030	85 c0		 test	 eax, eax
  00032	74 0a		 je	 SHORT $LN6@PyTrash_th@2
  00034	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00039	48 8b d8	 mov	 rbx, rax
  0003c	eb 07		 jmp	 SHORT $LN7@PyTrash_th@2
$LN6@PyTrash_th@2:
  0003e	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR _PyThreadState_Current
$LN7@PyTrash_th@2:

; 2146 :     while (tstate->trash_delete_later) {

  00045	48 83 bb 98 00
	00 00 00	 cmp	 QWORD PTR [rbx+152], 0
  0004d	0f 84 7f 00 00
	00		 je	 $LN1@PyTrash_th@2
  00053	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  00058	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  0005d	0f 1f 00	 npad	 3
$LL2@PyTrash_th@2:

; 2147 :         PyObject *op = tstate->trash_delete_later;

  00060	48 8b bb 98 00
	00 00		 mov	 rdi, QWORD PTR [rbx+152]

; 2148 :         destructor dealloc = Py_TYPE(op)->tp_dealloc;
; 2149 : 
; 2150 :         tstate->trash_delete_later =
; 2151 :             (PyObject*) _Py_AS_GC(op)->gc.gc_prev;

  00067	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  0006e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@PGJJGLPC@_PyTrash_thread_destroy_chain?$AA@
  00075	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00079	41 b8 67 08 00
	00		 mov	 r8d, 2151		; 00000867H
  0007f	4c 8b cf	 mov	 r9, rdi
  00082	48 8b b0 88 00
	00 00		 mov	 rsi, QWORD PTR [rax+136]
  00089	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00091	e8 00 00 00 00	 call	 _PyParallel_Guard
  00096	85 c0		 test	 eax, eax
  00098	74 04		 je	 SHORT $LN8@PyTrash_th@2
  0009a	33 c0		 xor	 eax, eax
  0009c	eb 04		 jmp	 SHORT $LN9@PyTrash_th@2
$LN8@PyTrash_th@2:
  0009e	48 8d 47 e8	 lea	 rax, QWORD PTR [rdi-24]
$LN9@PyTrash_th@2:
  000a2	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]

; 2152 : 
; 2153 :         /* Call the deallocator directly.  This used to try to
; 2154 :          * fool Py_DECREF into calling it indirectly, but
; 2155 :          * Py_DECREF was already called on this object, and in
; 2156 :          * assorted non-release builds calling Py_DECREF again ends
; 2157 :          * up distorting allocation statistics.
; 2158 :          */
; 2159 :         assert(op->ob_refcnt == 0);
; 2160 :         ++tstate->trash_delete_nesting;

  000a6	ff 83 94 00 00
	00		 inc	 DWORD PTR [rbx+148]

; 2161 :         (*dealloc)(op);

  000ac	48 8b cf	 mov	 rcx, rdi
  000af	48 89 83 98 00
	00 00		 mov	 QWORD PTR [rbx+152], rax
  000b6	ff d6		 call	 rsi

; 2162 :         --tstate->trash_delete_nesting;

  000b8	ff 8b 94 00 00
	00		 dec	 DWORD PTR [rbx+148]
  000be	48 83 bb 98 00
	00 00 00	 cmp	 QWORD PTR [rbx+152], 0
  000c6	75 98		 jne	 SHORT $LL2@PyTrash_th@2
  000c8	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  000cd	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
$LN1@PyTrash_th@2:

; 2163 :     }
; 2164 : }

  000d2	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d6	5b		 pop	 rbx
  000d7	c3		 ret	 0
_PyTrash_thread_destroy_chain ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@ICFEBEBI@_Py_Dealloc?$AA@		; `string'
PUBLIC	_Py_Dealloc
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Dealloc DD imagerel $LN4
	DD	imagerel $LN4+117
	DD	imagerel $unwind$_Py_Dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Dealloc DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0M@ICFEBEBI@_Py_Dealloc?$AA@
CONST	SEGMENT
??_C@_0M@ICFEBEBI@_Py_Dealloc?$AA@ DB '_Py_Dealloc', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_Dealloc
_TEXT	SEGMENT
op$ = 64
_Py_Dealloc PROC					; COMDAT

; 2173 : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 2174 :     Px_RETURN_VOID_OP(op, _Px_Dealloc(op))

  00009	4c 8b c9	 mov	 r9, rcx
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@ICFEBEBI@_Py_Dealloc?$AA@
  0001a	41 b8 7e 08 00
	00		 mov	 r8d, 2174		; 0000087eH
  00020	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00028	e8 00 00 00 00	 call	 _PyParallel_Guard
  0002d	85 c0		 test	 eax, eax
  0002f	74 0d		 je	 SHORT $LN1@Py_Dealloc
  00031	48 8b cb	 mov	 rcx, rbx

; 2178 : }

  00034	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00038	5b		 pop	 rbx
  00039	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN1@Py_Dealloc:

; 2175 :     Py_GUARD_OBJ(op);

  0003e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@ICFEBEBI@_Py_Dealloc?$AA@
  0004c	4c 8b cb	 mov	 r9, rbx
  0004f	41 b8 7f 08 00
	00		 mov	 r8d, 2175		; 0000087fH
  00055	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR [rsp+32], 32	; 00000020H
  0005d	e8 00 00 00 00	 call	 _PyParallel_Guard

; 2176 :     _Py_INC_TPFREES(op) _Py_COUNT_ALLOCS_COMMA
; 2177 :     (*Py_TYPE(op)->tp_dealloc)(op);

  00062	4c 8b 5b 58	 mov	 r11, QWORD PTR [rbx+88]
  00066	48 8b cb	 mov	 rcx, rbx

; 2178 : }

  00069	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0006d	5b		 pop	 rbx
  0006e	49 ff a3 88 00
	00 00		 rex_jmp QWORD PTR [r11+136]
_Py_Dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@PAPLFJML@str?$CI?$CJ?5or?5repr?$CI?$CJ?5returned?5?8?$CF?4100s@ ; `string'
PUBLIC	??_C@_05CAMHEFLG@utf?98?$AA@			; `string'
PUBLIC	??_C@_0BD@JNCEINCM@?$DMrefcnt?5?$CFld?5at?5?$CFp?$DO?$AA@ ; `string'
PUBLIC	??_C@_0P@GBGMABPC@PyObject_Print?$AA@		; `string'
PUBLIC	??_C@_05FNKBMBBG@?$DMnil?$DO?$AA@		; `string'
PUBLIC	PyObject_Print
EXTRN	__imp_LeaveCriticalSection:PROC
EXTRN	PyErr_SetFromErrno:PROC
EXTRN	PyExc_IOError:QWORD
EXTRN	__imp_ferror:PROC
EXTRN	PyUnicode_AsEncodedString:PROC
EXTRN	__imp_fwrite:PROC
EXTRN	PyEval_RestoreThread:PROC
EXTRN	__imp_fprintf:PROC
EXTRN	PyEval_SaveThread:PROC
EXTRN	__imp_clearerr:PROC
EXTRN	__imp_EnterCriticalSection:PROC
EXTRN	__imp___iob_func:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_Print DD imagerel $LN34
	DD	imagerel $LN34+512
	DD	imagerel $unwind$PyObject_Print
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_Print DD 0a1a01H
	DD	0b741aH
	DD	0a641aH
	DD	09541aH
	DD	08341aH
	DD	0c016521aH
xdata	ENDS
;	COMDAT ??_C@_0CC@PAPLFJML@str?$CI?$CJ?5or?5repr?$CI?$CJ?5returned?5?8?$CF?4100s@
CONST	SEGMENT
??_C@_0CC@PAPLFJML@str?$CI?$CJ?5or?5repr?$CI?$CJ?5returned?5?8?$CF?4100s@ DB 's'
	DB	'tr() or repr() returned ''%.100s''', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05CAMHEFLG@utf?98?$AA@
CONST	SEGMENT
??_C@_05CAMHEFLG@utf?98?$AA@ DB 'utf-8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JNCEINCM@?$DMrefcnt?5?$CFld?5at?5?$CFp?$DO?$AA@
CONST	SEGMENT
??_C@_0BD@JNCEINCM@?$DMrefcnt?5?$CFld?5at?5?$CFp?$DO?$AA@ DB '<refcnt %ld'
	DB	' at %p>', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GBGMABPC@PyObject_Print?$AA@
CONST	SEGMENT
??_C@_0P@GBGMABPC@PyObject_Print?$AA@ DB 'PyObject_Print', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05FNKBMBBG@?$DMnil?$DO?$AA@
CONST	SEGMENT
??_C@_05FNKBMBBG@?$DMnil?$DO?$AA@ DB '<nil>', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyObject_Print
_TEXT	SEGMENT
op$ = 64
fp$ = 72
flags$ = 80
PyObject_Print PROC					; COMDAT

; 302  : {

$LN34:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0001a	41 8b d8	 mov	 ebx, r8d
  0001d	48 8b f2	 mov	 rsi, rdx
  00020	4c 8b e1	 mov	 r12, rcx

; 303  :     int ret = 0;
; 304  : #ifdef WITH_PARALLEL
; 305  :     CRITICAL_SECTION *cs = NULL;

  00023	33 ed		 xor	 ebp, ebp

; 306  : 
; 307  :     if (fp == stdout)

  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0002b	48 83 c0 30	 add	 rax, 48			; 00000030H
  0002f	48 3b f0	 cmp	 rsi, rax
  00032	75 09		 jne	 SHORT $LN26@PyObject_P

; 308  :         cs = &stdout_cs;

  00034	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:stdout_cs
  0003b	eb 16		 jmp	 SHORT $LN29@PyObject_P
$LN26@PyObject_P:

; 309  :     else if (fp == stderr)

  0003d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00043	48 83 c0 60	 add	 rax, 96			; 00000060H
  00047	48 3b f0	 cmp	 rsi, rax
  0004a	75 10		 jne	 SHORT $LN23@PyObject_P

; 310  :         cs = &stderr_cs;

  0004c	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:stderr_cs
$LN29@PyObject_P:

; 311  : 
; 312  :     if (cs)
; 313  :         EnterCriticalSection(cs);

  00053	48 8b cd	 mov	 rcx, rbp
  00056	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EnterCriticalSection
$LN23@PyObject_P:

; 314  : #endif
; 315  :     ret = -1;

  0005c	83 cf ff	 or	 edi, -1

; 316  :     if (PyErr_CheckSignals())

  0005f	e8 00 00 00 00	 call	 PyErr_CheckSignals
  00064	85 c0		 test	 eax, eax
  00066	0f 85 69 01 00
	00		 jne	 $end$120435

; 317  :         goto end;
; 318  : #ifdef USE_STACKCHECK
; 319  :     if (PyOS_CheckStack()) {
; 320  :         PyErr_SetString(PyExc_MemoryError, "stack overflow");
; 321  :         goto end;
; 322  :     }
; 323  : #endif
; 324  :     ret = 0;
; 325  :     clearerr(fp); /* Clear any previous error condition */

  0006c	48 8b ce	 mov	 rcx, rsi
  0006f	33 ff		 xor	 edi, edi
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_clearerr

; 326  :     if (op == NULL) {

  00077	4d 85 e4	 test	 r12, r12
  0007a	75 25		 jne	 SHORT $LN21@PyObject_P

; 327  :         Py_BEGIN_ALLOW_THREADS

  0007c	e8 00 00 00 00	 call	 PyEval_SaveThread

; 328  :         fprintf(fp, "<nil>");

  00081	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05FNKBMBBG@?$DMnil?$DO?$AA@
  00088	48 8b ce	 mov	 rcx, rsi
  0008b	48 8b d8	 mov	 rbx, rax
  0008e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 329  :         Py_END_ALLOW_THREADS

  00094	48 8b cb	 mov	 rcx, rbx
  00097	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 330  :     }
; 331  :     else {

  0009c	e9 0f 01 00 00	 jmp	 $LN30@PyObject_P
$LN21@PyObject_P:

; 332  :         if (!Py_ISPX(op) && op->ob_refcnt <= 0)

  000a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  000a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@GBGMABPC@PyObject_Print?$AA@
  000af	4d 8b cc	 mov	 r9, r12
  000b2	41 b8 4c 01 00
	00		 mov	 r8d, 332		; 0000014cH
  000b8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c0	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c5	85 c0		 test	 eax, eax
  000c7	75 34		 jne	 SHORT $LN19@PyObject_P
  000c9	49 39 7c 24 50	 cmp	 QWORD PTR [r12+80], rdi
  000ce	7f 2d		 jg	 SHORT $LN19@PyObject_P

; 333  :             /* XXX(twouters) cast refcount to long until %zd is
; 334  :                universally available */
; 335  :             Py_BEGIN_ALLOW_THREADS

  000d0	e8 00 00 00 00	 call	 PyEval_SaveThread

; 336  :             fprintf(fp, "<refcnt %ld at %p>",
; 337  :                 (long)op->ob_refcnt, op);

  000d5	45 8b 44 24 50	 mov	 r8d, DWORD PTR [r12+80]
  000da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@JNCEINCM@?$DMrefcnt?5?$CFld?5at?5?$CFp?$DO?$AA@
  000e1	4d 8b cc	 mov	 r9, r12
  000e4	48 8b ce	 mov	 rcx, rsi
  000e7	48 8b d8	 mov	 rbx, rax
  000ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 338  :             Py_END_ALLOW_THREADS

  000f0	48 8b cb	 mov	 rcx, rbx
  000f3	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 339  :         else {

  000f8	e9 b3 00 00 00	 jmp	 $LN30@PyObject_P
$LN19@PyObject_P:

; 340  :             PyObject *s;
; 341  :             if (flags & Py_PRINT_RAW)
; 342  :                 s = PyObject_Str(op);

  000fd	49 8b cc	 mov	 rcx, r12
  00100	f6 c3 01	 test	 bl, 1
  00103	74 07		 je	 SHORT $LN17@PyObject_P
  00105	e8 00 00 00 00	 call	 PyObject_Str

; 343  :             else

  0010a	eb 05		 jmp	 SHORT $LN32@PyObject_P
$LN17@PyObject_P:

; 344  :                 s = PyObject_Repr(op);

  0010c	e8 00 00 00 00	 call	 PyObject_Repr
$LN32@PyObject_P:
  00111	48 8b d8	 mov	 rbx, rax

; 345  :             if (s == NULL)

  00114	48 85 c0	 test	 rax, rax

; 346  :                 ret = -1;

  00117	0f 84 b5 00 00
	00		 je	 $LN33@PyObject_P

; 347  :             else if (PyBytes_Check(s)) {

  0011d	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  00121	41 8b 80 00 01
	00 00		 mov	 eax, DWORD PTR [r8+256]
  00128	0f ba e0 1b	 bt	 eax, 27
  0012c	73 18		 jae	 SHORT $LN13@PyObject_P

; 348  :                 fwrite(PyBytes_AS_STRING(s), 1,
; 349  :                        PyBytes_GET_SIZE(s), fp);

  0012e	4c 8b 43 60	 mov	 r8, QWORD PTR [rbx+96]
  00132	48 8d 4b 78	 lea	 rcx, QWORD PTR [rbx+120]
  00136	4c 8b ce	 mov	 r9, rsi
  00139	ba 01 00 00 00	 mov	 edx, 1
  0013e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwrite
  00144	eb 5e		 jmp	 SHORT $LN7@PyObject_P
$LN13@PyObject_P:

; 350  :             }
; 351  :             else if (PyUnicode_Check(s)) {

  00146	0f ba e0 1c	 bt	 eax, 28
  0014a	73 3e		 jae	 SHORT $LN11@PyObject_P

; 352  :                 PyObject *t;
; 353  :                 t = PyUnicode_AsEncodedString(s, "utf-8", "backslashreplace");

  0014c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BB@GGCFDDAA@backslashreplace?$AA@
  00153	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05CAMHEFLG@utf?98?$AA@
  0015a	48 8b cb	 mov	 rcx, rbx
  0015d	e8 00 00 00 00	 call	 PyUnicode_AsEncodedString
  00162	4c 8b e0	 mov	 r12, rax

; 354  :                 if (t == NULL)

  00165	48 85 c0	 test	 rax, rax

; 355  :                     ret = 0;
; 356  :                 else {

  00168	74 3a		 je	 SHORT $LN7@PyObject_P

; 357  :                     fwrite(PyBytes_AS_STRING(t), 1,
; 358  :                            PyBytes_GET_SIZE(t), fp);

  0016a	4c 8b 40 60	 mov	 r8, QWORD PTR [rax+96]
  0016e	48 8d 48 78	 lea	 rcx, QWORD PTR [rax+120]
  00172	4c 8b ce	 mov	 r9, rsi
  00175	ba 01 00 00 00	 mov	 edx, 1
  0017a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwrite

; 359  :                     Py_DECREF(t);

  00180	49 8b cc	 mov	 rcx, r12
  00183	e8 00 00 00 00	 call	 _Py_DecRef

; 360  :                 }
; 361  :             }
; 362  :             else {

  00188	eb 1a		 jmp	 SHORT $LN7@PyObject_P
$LN11@PyObject_P:

; 363  :                 PyErr_Format(PyExc_TypeError,
; 364  :                              "str() or repr() returned '%.100s'",
; 365  :                              s->ob_type->tp_name);

  0018a	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  0018e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00195	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@PAPLFJML@str?$CI?$CJ?5or?5repr?$CI?$CJ?5returned?5?8?$CF?4100s@
  0019c	e8 00 00 00 00	 call	 PyErr_Format

; 366  :                 ret = -1;

  001a1	83 cf ff	 or	 edi, -1
$LN7@PyObject_P:

; 367  :             }
; 368  :             Py_XDECREF(s);

  001a4	48 8b cb	 mov	 rcx, rbx
  001a7	e8 00 00 00 00	 call	 _Py_DecRef

; 369  :         }
; 370  :     }
; 371  :     if (ret == 0) {

  001ac	85 ff		 test	 edi, edi
  001ae	75 25		 jne	 SHORT $end$120435
$LN30@PyObject_P:

; 372  :         if (ferror(fp)) {

  001b0	48 8b ce	 mov	 rcx, rsi
  001b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ferror
  001b9	85 c0		 test	 eax, eax
  001bb	74 18		 je	 SHORT $end$120435

; 373  :             PyErr_SetFromErrno(PyExc_IOError);

  001bd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  001c4	e8 00 00 00 00	 call	 PyErr_SetFromErrno

; 374  :             clearerr(fp);

  001c9	48 8b ce	 mov	 rcx, rsi
  001cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_clearerr
$LN33@PyObject_P:

; 375  :             ret = -1;

  001d2	83 cf ff	 or	 edi, -1
$end$120435:

; 376  :         }
; 377  :     }
; 378  : end:
; 379  : #ifdef WITH_PARALLEL
; 380  :     if (cs)

  001d5	48 85 ed	 test	 rbp, rbp
  001d8	74 09		 je	 SHORT $LN31@PyObject_P

; 381  :         LeaveCriticalSection(cs);

  001da	48 8b cd	 mov	 rcx, rbp
  001dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection
$LN31@PyObject_P:

; 382  : #endif
; 383  :     return ret;
; 384  : }

  001e3	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  001e8	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  001ed	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  001f2	8b c7		 mov	 eax, edi
  001f4	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  001f9	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001fd	41 5c		 pop	 r12
  001ff	c3		 ret	 0
PyObject_Print ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@KILIGNMG@?6type?5?5?5?5?3?5?$CFs?6refcount?3?5?$CFld?6addr@ ; `string'
PUBLIC	??_C@_04HIBGFPH@NULL?$AA@			; `string'
PUBLIC	??_C@_0L@CEGGIADE@object?5?5?3?5?$AA@		; `string'
PUBLIC	??_C@_05NJDBAOFA@NULL?6?$AA@			; `string'
PUBLIC	??_C@_0P@FHBAFHIM@_PyObject_Dump?$AA@		; `string'
PUBLIC	_PyObject_Dump
EXTRN	PyGILState_Release:PROC
EXTRN	PyGILState_Ensure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_Dump DD imagerel $LN8
	DD	imagerel $LN8+211
	DD	imagerel $unwind$_PyObject_Dump
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_Dump DD 045501H
	DD	083455H
	DD	070025206H
xdata	ENDS
;	COMDAT ??_C@_0CK@KILIGNMG@?6type?5?5?5?5?3?5?$CFs?6refcount?3?5?$CFld?6addr@
CONST	SEGMENT
??_C@_0CK@KILIGNMG@?6type?5?5?5?5?3?5?$CFs?6refcount?3?5?$CFld?6addr@ DB 0aH
	DB	'type    : %s', 0aH, 'refcount: %ld', 0aH, 'address : %p', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_04HIBGFPH@NULL?$AA@
CONST	SEGMENT
??_C@_04HIBGFPH@NULL?$AA@ DB 'NULL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CEGGIADE@object?5?5?3?5?$AA@
CONST	SEGMENT
??_C@_0L@CEGGIADE@object?5?5?3?5?$AA@ DB 'object  : ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05NJDBAOFA@NULL?6?$AA@
CONST	SEGMENT
??_C@_05NJDBAOFA@NULL?6?$AA@ DB 'NULL', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FHBAFHIM@_PyObject_Dump?$AA@
CONST	SEGMENT
??_C@_0P@FHBAFHIM@_PyObject_Dump?$AA@ DB '_PyObject_Dump', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyObject_Dump
_TEXT	SEGMENT
op$ = 64
_PyObject_Dump PROC					; COMDAT

; 396  : {

$LN8:
  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b f9	 mov	 rdi, rcx

; 397  :     Py_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN3@PyObject_D@3
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@FHBAFHIM@_PyObject_Dump?$AA@
  00020	45 33 c9	 xor	 r9d, r9d
  00023	41 b8 8d 01 00
	00		 mov	 r8d, 397		; 0000018dH
  00029	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@PyObject_D@3:

; 398  :     if (op == NULL)

  0002e	48 85 ff	 test	 rdi, rdi
  00031	75 1d		 jne	 SHORT $LN2@PyObject_D@3

; 399  :         fprintf(stderr, "NULL\n");

  00033	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05NJDBAOFA@NULL?6?$AA@
  00040	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]

; 421  :     }
; 422  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5f		 pop	 rdi
  00049	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_fprintf
$LN2@PyObject_D@3:
  00050	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx

; 400  :     else {
; 401  : #ifdef WITH_THREAD
; 402  :         PyGILState_STATE gil;
; 403  : #endif
; 404  :         fprintf(stderr, "object  : ");

  00055	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0005b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@CEGGIADE@object?5?5?3?5?$AA@
  00062	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  00066	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 405  : #ifdef WITH_THREAD
; 406  :         gil = PyGILState_Ensure();

  0006c	e8 00 00 00 00	 call	 PyGILState_Ensure
  00071	8b d8		 mov	 ebx, eax

; 407  : #endif
; 408  :         (void)PyObject_Print(op, stderr, 0);

  00073	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00079	45 33 c0	 xor	 r8d, r8d
  0007c	48 8d 50 60	 lea	 rdx, QWORD PTR [rax+96]
  00080	48 8b cf	 mov	 rcx, rdi
  00083	e8 00 00 00 00	 call	 PyObject_Print

; 409  : #ifdef WITH_THREAD
; 410  :         PyGILState_Release(gil);

  00088	8b cb		 mov	 ecx, ebx
  0008a	e8 00 00 00 00	 call	 PyGILState_Release

; 411  : #endif
; 412  :         /* XXX(twouters) cast refcount to long until %zd is
; 413  :            universally available */
; 414  :         fprintf(stderr, "\n"
; 415  :             "type    : %s\n"
; 416  :             "refcount: %ld\n"
; 417  :             "address : %p\n",
; 418  :             Py_TYPE(op)==NULL ? "NULL" : Py_TYPE(op)->tp_name,
; 419  :             (long)op->ob_refcnt,
; 420  :             op);

  0008f	48 8b 5f 58	 mov	 rbx, QWORD PTR [rdi+88]
  00093	48 85 db	 test	 rbx, rbx
  00096	75 09		 jne	 SHORT $LN6@PyObject_D@3
  00098	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:??_C@_04HIBGFPH@NULL?$AA@
  0009f	eb 04		 jmp	 SHORT $LN7@PyObject_D@3
$LN6@PyObject_D@3:
  000a1	48 8b 5b 70	 mov	 rbx, QWORD PTR [rbx+112]
$LN7@PyObject_D@3:
  000a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  000ab	44 8b 4f 50	 mov	 r9d, DWORD PTR [rdi+80]
  000af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@KILIGNMG@?6type?5?5?5?5?3?5?$CFs?6refcount?3?5?$CFld?6addr@
  000b6	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  000ba	4c 8b c3	 mov	 r8, rbx
  000bd	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  000c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
  000c8	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 421  :     }
; 422  : }

  000cd	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d1	5f		 pop	 rdi
  000d2	c3		 ret	 0
_PyObject_Dump ENDP
_TEXT	ENDS
PUBLIC	PyObject_RichCompareBool
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_RichCompareBool DD imagerel $LN11
	DD	imagerel $LN11+37
	DD	imagerel $unwind$PyObject_RichCompareBool
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyObject_RichCompareBool DD imagerel $LN11+37
	DD	imagerel $LN11+68
	DD	imagerel $chain$0$PyObject_RichCompareBool
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyObject_RichCompareBool DD imagerel $LN11+68
	DD	imagerel $LN11+139
	DD	imagerel $chain$3$PyObject_RichCompareBool
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyObject_RichCompareBool DD 040c21H
	DD	04740cH
	DD	063400H
	DD	imagerel $LN11
	DD	imagerel $LN11+37
	DD	imagerel $unwind$PyObject_RichCompareBool
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyObject_RichCompareBool DD 020521H
	DD	063405H
	DD	imagerel $LN11
	DD	imagerel $LN11+37
	DD	imagerel $unwind$PyObject_RichCompareBool
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_RichCompareBool DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyObject_RichCompareBool
_TEXT	SEGMENT
v$ = 48
w$ = 56
op$ = 64
PyObject_RichCompareBool PROC				; COMDAT

; 676  : {

$LN11:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 677  :     PyObject *res;
; 678  :     int ok;
; 679  : 
; 680  :     /* Quick result when objects are the same.
; 681  :        Guarantees that identity implies equality. */
; 682  :     if (v == w) {

  00004	48 3b ca	 cmp	 rcx, rdx
  00007	75 1c		 jne	 SHORT $LN4@PyObject_R@3

; 683  :         if (op == Py_EQ)

  00009	41 83 f8 02	 cmp	 r8d, 2
  0000d	75 09		 jne	 SHORT $LN6@PyObject_R@3

; 684  :             return 1;

  0000f	41 8d 40 ff	 lea	 eax, QWORD PTR [r8-1]

; 698  : }

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
$LN6@PyObject_R@3:

; 685  :         else if (op == Py_NE)

  00018	41 83 f8 03	 cmp	 r8d, 3
  0001c	75 07		 jne	 SHORT $LN4@PyObject_R@3

; 686  :             return 0;

  0001e	33 c0		 xor	 eax, eax

; 698  : }

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
$LN4@PyObject_R@3:
  00025	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx

; 687  :     }
; 688  : 
; 689  :     res = PyObject_RichCompare(v, w, op);

  0002a	e8 00 00 00 00	 call	 PyObject_RichCompare
  0002f	48 8b d8	 mov	 rbx, rax

; 690  :     if (res == NULL)

  00032	48 85 c0	 test	 rax, rax
  00035	75 0d		 jne	 SHORT $LN3@PyObject_R@3

; 691  :         return -1;

  00037	83 c8 ff	 or	 eax, -1
  0003a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 698  : }

  0003f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00043	c3		 ret	 0
$LN3@PyObject_R@3:

; 692  :     if (PyBool_Check(res))

  00044	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBool_Type
  0004b	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00050	48 39 43 58	 cmp	 QWORD PTR [rbx+88], rax
  00054	75 12		 jne	 SHORT $LN2@PyObject_R@3

; 693  :         ok = (res == Py_True);

  00056	33 ff		 xor	 edi, edi
  00058	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0005f	48 3b d8	 cmp	 rbx, rax
  00062	40 0f 94 c7	 sete	 dil

; 694  :     else

  00066	eb 0a		 jmp	 SHORT $LN1@PyObject_R@3
$LN2@PyObject_R@3:

; 695  :         ok = PyObject_IsTrue(res);

  00068	48 8b cb	 mov	 rcx, rbx
  0006b	e8 00 00 00 00	 call	 PyObject_IsTrue
  00070	8b f8		 mov	 edi, eax
$LN1@PyObject_R@3:

; 696  :     Py_DECREF(res);

  00072	48 8b cb	 mov	 rcx, rbx
  00075	e8 00 00 00 00	 call	 _Py_DecRef
  0007a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 697  :     return ok;

  0007f	8b c7		 mov	 eax, edi
  00081	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]

; 698  : }

  00086	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0008a	c3		 ret	 0
PyObject_RichCompareBool ENDP
_TEXT	ENDS
PUBLIC	PyObject_GetAttrString
EXTRN	PyUnicode_InternFromString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_GetAttrString DD imagerel $LN6
	DD	imagerel $LN6+36
	DD	imagerel $unwind$PyObject_GetAttrString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyObject_GetAttrString DD imagerel $LN6+36
	DD	imagerel $LN6+65
	DD	imagerel $chain$0$PyObject_GetAttrString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyObject_GetAttrString DD imagerel $LN6+65
	DD	imagerel $LN6+101
	DD	imagerel $chain$2$PyObject_GetAttrString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyObject_GetAttrString DD 020021H
	DD	067400H
	DD	imagerel $LN6
	DD	imagerel $LN6+36
	DD	imagerel $unwind$PyObject_GetAttrString
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyObject_GetAttrString DD 020521H
	DD	067405H
	DD	imagerel $LN6
	DD	imagerel $LN6+36
	DD	imagerel $unwind$PyObject_GetAttrString
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_GetAttrString DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyObject_GetAttrString
_TEXT	SEGMENT
v$ = 48
name$ = 56
PyObject_GetAttrString PROC				; COMDAT

; 877  : {

$LN6:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 878  :     PyObject *w, *res;
; 879  : 
; 880  :     if (Py_TYPE(v)->tp_getattr != NULL)

  00006	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	4c 8b 80 98 00
	00 00		 mov	 r8, QWORD PTR [rax+152]
  00014	4d 85 c0	 test	 r8, r8
  00017	74 08		 je	 SHORT $LN2@PyObject_G@6

; 888  : }

  00019	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001d	5b		 pop	 rbx
  0001e	49 ff e0	 rex_jmp r8
$LN2@PyObject_G@6:

; 881  :         return (*Py_TYPE(v)->tp_getattr)(v, (char*)name);
; 882  :     w = PyUnicode_InternFromString(name);

  00021	48 8b ca	 mov	 rcx, rdx
  00024	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  00029	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  0002e	48 8b f8	 mov	 rdi, rax

; 883  :     if (w == NULL)

  00031	48 85 c0	 test	 rax, rax
  00034	75 0b		 jne	 SHORT $LN1@PyObject_G@6
  00036	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 888  : }

  0003b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003f	5b		 pop	 rbx
  00040	c3		 ret	 0
$LN1@PyObject_G@6:

; 884  :         return NULL;
; 885  :     res = PyObject_GetAttr(v, w);

  00041	48 8b d0	 mov	 rdx, rax
  00044	48 8b cb	 mov	 rcx, rbx
  00047	e8 00 00 00 00	 call	 PyObject_GetAttr

; 886  :     Py_DECREF(w);

  0004c	48 8b cf	 mov	 rcx, rdi
  0004f	48 8b d8	 mov	 rbx, rax
  00052	e8 00 00 00 00	 call	 _Py_DecRef
  00057	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 887  :     return res;

  0005c	48 8b c3	 mov	 rax, rbx

; 888  : }

  0005f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00063	5b		 pop	 rbx
  00064	c3		 ret	 0
PyObject_GetAttrString ENDP
_TEXT	ENDS
PUBLIC	PyObject_HasAttrString
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_HasAttrString DD imagerel $LN4
	DD	imagerel $LN4+44
	DD	imagerel $unwind$PyObject_HasAttrString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_HasAttrString DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyObject_HasAttrString
_TEXT	SEGMENT
v$ = 48
name$ = 56
PyObject_HasAttrString PROC				; COMDAT

; 892  : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 893  :     PyObject *res = PyObject_GetAttrString(v, name);

  00004	e8 00 00 00 00	 call	 PyObject_GetAttrString

; 894  :     if (res != NULL) {

  00009	48 85 c0	 test	 rax, rax
  0000c	74 12		 je	 SHORT $LN1@PyObject_H@3

; 895  :         Py_DECREF(res);

  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 _Py_DecRef

; 896  :         return 1;

  00016	b8 01 00 00 00	 mov	 eax, 1

; 900  : }

  0001b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001f	c3		 ret	 0
$LN1@PyObject_H@3:

; 897  :     }
; 898  :     PyErr_Clear();

  00020	e8 00 00 00 00	 call	 PyErr_Clear

; 899  :     return 0;

  00025	33 c0		 xor	 eax, eax

; 900  : }

  00027	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002b	c3		 ret	 0
PyObject_HasAttrString ENDP
_TEXT	ENDS
PUBLIC	PyObject_SetAttrString
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyObject_SetAttrString DD imagerel $LN21
	DD	imagerel $LN21+48
	DD	imagerel $unwind$PyObject_SetAttrString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyObject_SetAttrString DD imagerel $LN21+48
	DD	imagerel $LN21+85
	DD	imagerel $chain$0$PyObject_SetAttrString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyObject_SetAttrString DD imagerel $LN21+85
	DD	imagerel $LN21+200
	DD	imagerel $chain$2$PyObject_SetAttrString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyObject_SetAttrString DD imagerel $LN21+200
	DD	imagerel $LN21+228
	DD	imagerel $chain$4$PyObject_SetAttrString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$PyObject_SetAttrString DD imagerel $LN21+228
	DD	imagerel $LN21+254
	DD	imagerel $chain$6$PyObject_SetAttrString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$PyObject_SetAttrString DD 020021H
	DD	083400H
	DD	imagerel $LN21
	DD	imagerel $LN21+48
	DD	imagerel $unwind$PyObject_SetAttrString
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyObject_SetAttrString DD 020021H
	DD	083400H
	DD	imagerel $LN21
	DD	imagerel $LN21+48
	DD	imagerel $unwind$PyObject_SetAttrString
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyObject_SetAttrString DD 020021H
	DD	083400H
	DD	imagerel $LN21
	DD	imagerel $LN21+48
	DD	imagerel $unwind$PyObject_SetAttrString
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyObject_SetAttrString DD 020521H
	DD	083405H
	DD	imagerel $LN21
	DD	imagerel $LN21+48
	DD	imagerel $unwind$PyObject_SetAttrString
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_SetAttrString DD 040a01H
	DD	09640aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\object.c
xdata	ENDS
;	COMDAT PyObject_SetAttrString
_TEXT	SEGMENT
v$ = 64
name$ = 72
w$ = 80
PyObject_SetAttrString PROC				; COMDAT

; 904  : {

$LN21:
  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 905  :     PyObject *s;
; 906  :     int res;
; 907  : 
; 908  :     if (Py_TYPE(v)->tp_setattr != NULL)

  0000a	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0000e	49 8b f0	 mov	 rsi, r8
  00011	48 8b f9	 mov	 rdi, rcx
  00014	4c 8b 88 a0 00
	00 00		 mov	 r9, QWORD PTR [rax+160]
  0001b	4d 85 c9	 test	 r9, r9
  0001e	74 0d		 je	 SHORT $LN6@PyObject_S@4

; 916  : }

  00020	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00025	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00029	5f		 pop	 rdi
  0002a	49 ff e1	 rex_jmp r9
$LN6@PyObject_S@4:

; 909  :         return (*Py_TYPE(v)->tp_setattr)(v, (char*)name, w);
; 910  :     s = PyUnicode_InternFromString(name);

  0002d	48 8b ca	 mov	 rcx, rdx
  00030	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00035	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  0003a	48 8b d8	 mov	 rbx, rax

; 911  :     if (s == NULL)

  0003d	48 85 c0	 test	 rax, rax
  00040	75 13		 jne	 SHORT $LN5@PyObject_S@4

; 912  :         return -1;

  00042	83 c8 ff	 or	 eax, -1
  00045	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 916  : }

  0004a	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0004f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00053	5f		 pop	 rdi
  00054	c3		 ret	 0
$LN5@PyObject_S@4:

; 913  :     res = PyObject_SetAttr(v, s, w);

  00055	4c 8b c6	 mov	 r8, rsi
  00058	48 8b d0	 mov	 rdx, rax
  0005b	48 8b cf	 mov	 rcx, rdi
  0005e	e8 00 00 00 00	 call	 PyObject_SetAttr
  00063	8b f8		 mov	 edi, eax

; 914  :     Py_XDECREF(s);

  00065	e8 00 00 00 00	 call	 _Py_PXCTX
  0006a	85 c0		 test	 eax, eax
  0006c	75 7e		 jne	 SHORT $LN3@PyObject_S@4
  0006e	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00072	f6 c1 20	 test	 cl, 32			; 00000020H
  00075	75 6d		 jne	 SHORT $LN13@PyObject_S@4
  00077	84 c9		 test	 cl, cl
  00079	78 69		 js	 SHORT $LN13@PyObject_S@4
  0007b	f6 c1 02	 test	 cl, 2
  0007e	75 6c		 jne	 SHORT $LN3@PyObject_S@4
  00080	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00084	75 66		 jne	 SHORT $LN3@PyObject_S@4
  00086	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0008d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00094	4c 8b cb	 mov	 r9, rbx
  00097	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0009d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000a5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000aa	48 8b cb	 mov	 rcx, rbx
  000ad	85 c0		 test	 eax, eax
  000af	74 17		 je	 SHORT $LN18@PyObject_S@4
  000b1	e8 00 00 00 00	 call	 _Px_Dealloc
  000b6	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 915  :     return res;

  000bb	8b c7		 mov	 eax, edi

; 916  : }

  000bd	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000c2	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c6	5f		 pop	 rdi
  000c7	c3		 ret	 0

; 914  :     Py_XDECREF(s);

$LN18@PyObject_S@4:
  000c8	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000cc	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000d2	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 915  :     return res;

  000d7	8b c7		 mov	 eax, edi

; 916  : }

  000d9	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000de	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000e2	5f		 pop	 rdi
  000e3	c3		 ret	 0

; 914  :     Py_XDECREF(s);

$LN13@PyObject_S@4:
  000e4	48 8b cb	 mov	 rcx, rbx
  000e7	e8 00 00 00 00	 call	 Px_DecRef
$LN3@PyObject_S@4:

; 916  : }

  000ec	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000f1	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000f6	8b c7		 mov	 eax, edi
  000f8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000fc	5f		 pop	 rdi
  000fd	c3		 ret	 0
PyObject_SetAttrString ENDP
_TEXT	ENDS
PUBLIC	_PyObject_GetAttrId
EXTRN	_PyUnicode_FromId:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_GetAttrId DD imagerel $LN4
	DD	imagerel $LN4+44
	DD	imagerel $unwind$_PyObject_GetAttrId
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_GetAttrId DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyObject_GetAttrId
_TEXT	SEGMENT
v$ = 48
name$ = 56
_PyObject_GetAttrId PROC				; COMDAT

; 943  : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 944  :     PyObject *result;
; 945  :     PyObject *oname = _PyUnicode_FromId(name); /* borrowed */

  00009	48 8b ca	 mov	 rcx, rdx
  0000c	e8 00 00 00 00	 call	 _PyUnicode_FromId

; 946  :     if (!oname)

  00011	48 85 c0	 test	 rax, rax
  00014	75 06		 jne	 SHORT $LN1@PyObject_G@7

; 949  :     return result;
; 950  : }

  00016	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001a	5b		 pop	 rbx
  0001b	c3		 ret	 0
$LN1@PyObject_G@7:

; 947  :         return NULL;
; 948  :     result = PyObject_GetAttr(v, oname);

  0001c	48 8b d0	 mov	 rdx, rax
  0001f	48 8b cb	 mov	 rcx, rbx

; 949  :     return result;
; 950  : }

  00022	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00026	5b		 pop	 rbx
  00027	e9 00 00 00 00	 jmp	 PyObject_GetAttr
_PyObject_GetAttrId ENDP
_TEXT	ENDS
PUBLIC	_PyObject_HasAttrId
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_HasAttrId DD imagerel $LN4
	DD	imagerel $LN4+47
	DD	imagerel $unwind$_PyObject_HasAttrId
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_HasAttrId DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyObject_HasAttrId
_TEXT	SEGMENT
v$ = 48
name$ = 56
_PyObject_HasAttrId PROC				; COMDAT

; 954  : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 955  :     int result;
; 956  :     PyObject *oname = _PyUnicode_FromId(name); /* borrowed */

  00009	48 8b ca	 mov	 rcx, rdx
  0000c	e8 00 00 00 00	 call	 _PyUnicode_FromId

; 957  :     if (!oname)

  00011	48 85 c0	 test	 rax, rax
  00014	75 09		 jne	 SHORT $LN1@PyObject_H@4

; 958  :         return -1;

  00016	83 c8 ff	 or	 eax, -1

; 960  :     return result;
; 961  : }

  00019	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001d	5b		 pop	 rbx
  0001e	c3		 ret	 0
$LN1@PyObject_H@4:

; 959  :     result = PyObject_HasAttr(v, oname);

  0001f	48 8b d0	 mov	 rdx, rax
  00022	48 8b cb	 mov	 rcx, rbx

; 960  :     return result;
; 961  : }

  00025	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00029	5b		 pop	 rbx
  0002a	e9 00 00 00 00	 jmp	 PyObject_HasAttr
_PyObject_HasAttrId ENDP
_TEXT	ENDS
PUBLIC	_PyObject_SetAttrId
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_SetAttrId DD imagerel $LN4
	DD	imagerel $LN4+67
	DD	imagerel $unwind$_PyObject_SetAttrId
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_SetAttrId DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyObject_SetAttrId
_TEXT	SEGMENT
v$ = 48
name$ = 56
w$ = 64
_PyObject_SetAttrId PROC				; COMDAT

; 965  : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f9	 mov	 rdi, rcx

; 966  :     int result;
; 967  :     PyObject *oname = _PyUnicode_FromId(name); /* borrowed */

  0000d	48 8b ca	 mov	 rcx, rdx
  00010	49 8b d8	 mov	 rbx, r8
  00013	e8 00 00 00 00	 call	 _PyUnicode_FromId

; 968  :     if (!oname)

  00018	48 85 c0	 test	 rax, rax
  0001b	75 0e		 jne	 SHORT $LN1@PyObject_S@5

; 969  :         return -1;

  0001d	83 c8 ff	 or	 eax, -1

; 971  :     return result;
; 972  : }

  00020	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00025	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00029	5f		 pop	 rdi
  0002a	c3		 ret	 0
$LN1@PyObject_S@5:

; 970  :     result = PyObject_SetAttr(v, oname, w);

  0002b	4c 8b c3	 mov	 r8, rbx
  0002e	48 8b d0	 mov	 rdx, rax
  00031	48 8b cf	 mov	 rcx, rdi

; 971  :     return result;
; 972  : }

  00034	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00039	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003d	5f		 pop	 rdi
  0003e	e9 00 00 00 00	 jmp	 PyObject_SetAttr
_PyObject_SetAttrId ENDP
_TEXT	ENDS
PUBLIC	??_C@_08OCOMCJAJ@builtins?$AA@			; `string'
PUBLIC	_PyObject_GetBuiltin
EXTRN	PyImport_ImportModule:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_GetBuiltin DD imagerel $LN4
	DD	imagerel $LN4+80
	DD	imagerel $unwind$_PyObject_GetBuiltin
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_GetBuiltin DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_08OCOMCJAJ@builtins?$AA@
CONST	SEGMENT
??_C@_08OCOMCJAJ@builtins?$AA@ DB 'builtins', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyObject_GetBuiltin
_TEXT	SEGMENT
name$ = 48
_PyObject_GetBuiltin PROC				; COMDAT

; 1095 : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b d9	 mov	 rbx, rcx

; 1096 :     PyObject *mod, *attr;
; 1097 :     mod = PyImport_ImportModule("builtins");

  0000d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
  00014	e8 00 00 00 00	 call	 PyImport_ImportModule
  00019	48 8b f8	 mov	 rdi, rax

; 1098 :     if (mod == NULL)

  0001c	48 85 c0	 test	 rax, rax
  0001f	75 0b		 jne	 SHORT $LN1@PyObject_G@8

; 1103 : }

  00021	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00026	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002a	5f		 pop	 rdi
  0002b	c3		 ret	 0
$LN1@PyObject_G@8:

; 1099 :         return NULL;
; 1100 :     attr = PyObject_GetAttrString(mod, name);

  0002c	48 8b d3	 mov	 rdx, rbx
  0002f	48 8b c8	 mov	 rcx, rax
  00032	e8 00 00 00 00	 call	 PyObject_GetAttrString

; 1101 :     Py_DECREF(mod);

  00037	48 8b cf	 mov	 rcx, rdi
  0003a	48 8b d8	 mov	 rbx, rax
  0003d	e8 00 00 00 00	 call	 _Py_DecRef

; 1102 :     return attr;

  00042	48 8b c3	 mov	 rax, rbx

; 1103 : }

  00045	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004e	5f		 pop	 rdi
  0004f	c3		 ret	 0
_PyObject_GetBuiltin ENDP
_TEXT	ENDS
PUBLIC	_PyObject_IsAbstract
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_IsAbstract DD imagerel $LN7
	DD	imagerel $LN7+46
	DD	imagerel $unwind$_PyObject_IsAbstract
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_PyObject_IsAbstract DD imagerel $LN7+46
	DD	imagerel $LN7+97
	DD	imagerel $chain$0$_PyObject_IsAbstract
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_PyObject_IsAbstract DD imagerel $LN7+97
	DD	imagerel $LN7+110
	DD	imagerel $chain$2$_PyObject_IsAbstract
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$_PyObject_IsAbstract DD imagerel $LN7+110
	DD	imagerel $LN7+150
	DD	imagerel $chain$5$_PyObject_IsAbstract
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$_PyObject_IsAbstract DD 040821H
	DD	063408H
	DD	047400H
	DD	imagerel $LN7
	DD	imagerel $LN7+46
	DD	imagerel $unwind$_PyObject_IsAbstract
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_PyObject_IsAbstract DD 020021H
	DD	047400H
	DD	imagerel $LN7
	DD	imagerel $LN7+46
	DD	imagerel $unwind$_PyObject_IsAbstract
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_PyObject_IsAbstract DD 020521H
	DD	047405H
	DD	imagerel $LN7
	DD	imagerel $LN7+46
	DD	imagerel $unwind$_PyObject_IsAbstract
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_IsAbstract DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyObject_IsAbstract
_TEXT	SEGMENT
obj$ = 48
_PyObject_IsAbstract PROC				; COMDAT

; 920  : {

$LN7:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	4c 8b c1	 mov	 r8, rcx

; 921  :     int res;
; 922  :     PyObject* isabstract;
; 923  :     _Py_IDENTIFIER(__isabstractmethod__);
; 924  : 
; 925  :     if (obj == NULL)

  00007	48 85 c9	 test	 rcx, rcx
  0000a	75 07		 jne	 SHORT $LN3@PyObject_I@6

; 926  :         return 0;

  0000c	33 c0		 xor	 eax, eax

; 939  : }

  0000e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00012	c3		 ret	 0
$LN3@PyObject_I@6:

; 927  : 
; 928  :     isabstract = _PyObject_GetAttrId(obj, &PyId___isabstractmethod__);

  00013	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00019	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00022	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId___isabstractmethod__@?1??_PyObject_IsAbstract@@9@9
  00027	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  0002b	49 8b c8	 mov	 rcx, r8
  0002e	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00033	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00038	48 8b f8	 mov	 rdi, rax

; 929  :     if (isabstract == NULL) {

  0003b	48 85 c0	 test	 rax, rax
  0003e	75 2e		 jne	 SHORT $LN2@PyObject_I@6

; 930  :         if (PyErr_ExceptionMatches(PyExc_AttributeError)) {

  00040	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  00047	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  0004c	85 c0		 test	 eax, eax
  0004e	74 11		 je	 SHORT $LN1@PyObject_I@6

; 931  :             PyErr_Clear();

  00050	e8 00 00 00 00	 call	 PyErr_Clear
  00055	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]

; 932  :             return 0;

  0005a	33 c0		 xor	 eax, eax

; 939  : }

  0005c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00060	c3		 ret	 0
$LN1@PyObject_I@6:

; 933  :         }
; 934  :         return -1;

  00061	83 c8 ff	 or	 eax, -1
  00064	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]

; 939  : }

  00069	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006d	c3		 ret	 0
$LN2@PyObject_I@6:

; 935  :     }
; 936  :     res = PyObject_IsTrue(isabstract);

  0006e	48 8b c8	 mov	 rcx, rax
  00071	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00076	e8 00 00 00 00	 call	 PyObject_IsTrue

; 937  :     Py_DECREF(isabstract);

  0007b	48 8b cf	 mov	 rcx, rdi
  0007e	8b d8		 mov	 ebx, eax
  00080	e8 00 00 00 00	 call	 _Py_DecRef
  00085	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]

; 938  :     return res;

  0008a	8b c3		 mov	 eax, ebx
  0008c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 939  : }

  00091	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00095	c3		 ret	 0
_PyObject_IsAbstract ENDP
_TEXT	ENDS
END
