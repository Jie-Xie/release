; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_08PFHPBGLK@__file__?$AA@			; `string'
PUBLIC	??_C@_0DI@FKDNMCHP@initialization?5of?5?$CFs?5did?5not?5ret@ ; `string'
PUBLIC	??_C@_0DB@EMJADMNK@initialization?5of?5?$CFs?5raised?5unre@ ; `string'
PUBLIC	??_C@_0DJ@KFOAKLBA@dynamic?5module?5does?5not?5define?5i@ ; `string'
PUBLIC	??_C@_05OJENGABA@ascii?$AA@			; `string'
PUBLIC	_PyImport_LoadDynamicModule
EXTRN	_PyImport_FixupExtensionObject:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	PyModule_AddObject:PROC
EXTRN	PyModule_GetDef:PROC
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_SystemError:QWORD
EXTRN	_Py_PackageContext:QWORD
EXTRN	PyErr_SetImportError:PROC
EXTRN	PyUnicode_FromFormat:PROC
EXTRN	PyErr_Occurred:PROC
EXTRN	_PyImport_GetDynLoadWindows:PROC
EXTRN	__imp_strrchr:PROC
EXTRN	PyUnicode_AsEncodedString:PROC
EXTRN	_PyImport_FindExtensionObject:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyImport_LoadDynamicModule DD imagerel $LN29
	DD	imagerel $LN29+119
	DD	imagerel $unwind$_PyImport_LoadDynamicModule
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_PyImport_LoadDynamicModule DD imagerel $LN29+119
	DD	imagerel $LN29+153
	DD	imagerel $chain$0$_PyImport_LoadDynamicModule
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$_PyImport_LoadDynamicModule DD imagerel $LN29+153
	DD	imagerel $LN29+404
	DD	imagerel $chain$5$_PyImport_LoadDynamicModule
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$_PyImport_LoadDynamicModule DD imagerel $LN29+404
	DD	imagerel $LN29+508
	DD	imagerel $chain$7$_PyImport_LoadDynamicModule
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$_PyImport_LoadDynamicModule DD 080021H
	DD	06e400H
	DD	0ed400H
	DD	0d6400H
	DD	0c5400H
	DD	imagerel $LN29
	DD	imagerel $LN29+119
	DD	imagerel $unwind$_PyImport_LoadDynamicModule
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$_PyImport_LoadDynamicModule DD 081321H
	DD	06e413H
	DD	0ed40eH
	DD	0d6405H
	DD	0c5400H
	DD	imagerel $LN29
	DD	imagerel $LN29+119
	DD	imagerel $unwind$_PyImport_LoadDynamicModule
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_PyImport_LoadDynamicModule DD 020521H
	DD	0c5405H
	DD	imagerel $LN29
	DD	imagerel $LN29+119
	DD	imagerel $unwind$_PyImport_LoadDynamicModule
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyImport_LoadDynamicModule DD 050b01H
	DD	0f007620bH
	DD	07003c005H
	DD	03002H
xdata	ENDS
;	COMDAT ??_C@_08PFHPBGLK@__file__?$AA@
CONST	SEGMENT
??_C@_08PFHPBGLK@__file__?$AA@ DB '__file__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@FKDNMCHP@initialization?5of?5?$CFs?5did?5not?5ret@
CONST	SEGMENT
??_C@_0DI@FKDNMCHP@initialization?5of?5?$CFs?5did?5not?5ret@ DB 'initiali'
	DB	'zation of %s did not return an extension module', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@EMJADMNK@initialization?5of?5?$CFs?5raised?5unre@
CONST	SEGMENT
??_C@_0DB@EMJADMNK@initialization?5of?5?$CFs?5raised?5unre@ DB 'initializ'
	DB	'ation of %s raised unreported exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@KFOAKLBA@dynamic?5module?5does?5not?5define?5i@
CONST	SEGMENT
??_C@_0DJ@KFOAKLBA@dynamic?5module?5does?5not?5define?5i@ DB 'dynamic mod'
	DB	'ule does not define init function (PyInit_%s)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05OJENGABA@ascii?$AA@
CONST	SEGMENT
??_C@_05OJENGABA@ascii?$AA@ DB 'ascii', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\importdl.c
CONST	ENDS
;	COMDAT _PyImport_LoadDynamicModule
_TEXT	SEGMENT
name$ = 96
path$ = 104
fp$ = 112
_PyImport_LoadDynamicModule PROC			; COMDAT

; 25   : {

$LN29:
  00000	40 53		 push	 rbx
  00002	57		 push	 rdi
  00003	41 54		 push	 r12
  00005	41 57		 push	 r15
  00007	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000b	49 8b d8	 mov	 rbx, r8
  0000e	4c 8b e2	 mov	 r12, rdx
  00011	4c 8b f9	 mov	 r15, rcx

; 26   :     PyObject *m = NULL;
; 27   : #ifndef MS_WINDOWS
; 28   :     PyObject *pathbytes;
; 29   : #endif
; 30   :     PyObject *nameascii;
; 31   :     char *namestr, *lastdot, *shortname, *packagecontext, *oldcontext;
; 32   :     dl_funcptr p0;
; 33   :     PyObject* (*p)(void);
; 34   :     struct PyModuleDef *def;
; 35   : 
; 36   :     m = _PyImport_FindExtensionObject(name, path);

  00014	e8 00 00 00 00	 call	 _PyImport_FindExtensionObject
  00019	48 8b f8	 mov	 rdi, rax

; 37   :     if (m != NULL) {

  0001c	48 85 c0	 test	 rax, rax
  0001f	74 49		 je	 SHORT $LN17@PyImport_L

; 38   :         Py_INCREF(m);

  00021	e8 00 00 00 00	 call	 _Py_PXCTX
  00026	85 c0		 test	 eax, eax
  00028	75 32		 jne	 SHORT $LN21@PyImport_L
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00038	4c 8b cf	 mov	 r9, rdi
  0003b	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00041	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00049	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004e	85 c0		 test	 eax, eax
  00050	75 06		 jne	 SHORT $LN20@PyImport_L
  00052	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  00056	74 04		 je	 SHORT $LN21@PyImport_L
$LN20@PyImport_L:
  00058	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN21@PyImport_L:

; 39   :         return m;

  0005c	48 8b c7	 mov	 rax, rdi

; 123  : }

  0005f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00063	41 5f		 pop	 r15
  00065	41 5c		 pop	 r12
  00067	5f		 pop	 rdi
  00068	5b		 pop	 rbx
  00069	c3		 ret	 0
$LN17@PyImport_L:

; 40   :     }
; 41   : 
; 42   :     /* name must be encodable to ASCII because dynamic module must have a
; 43   :        function called "PyInit_NAME", they are written in C, and the C language
; 44   :        doesn't accept non-ASCII identifiers. */
; 45   :     nameascii = PyUnicode_AsEncodedString(name, "ascii", NULL);

  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05OJENGABA@ascii?$AA@
  00071	45 33 c0	 xor	 r8d, r8d
  00074	49 8b cf	 mov	 rcx, r15
  00077	48 89 6c 24 60	 mov	 QWORD PTR [rsp+96], rbp
  0007c	e8 00 00 00 00	 call	 PyUnicode_AsEncodedString
  00081	48 8b e8	 mov	 rbp, rax

; 46   :     if (nameascii == NULL)

  00084	48 85 c0	 test	 rax, rax
  00087	75 10		 jne	 SHORT $LN16@PyImport_L
  00089	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]

; 123  : }

  0008e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00092	41 5f		 pop	 r15
  00094	41 5c		 pop	 r12
  00096	5f		 pop	 rdi
  00097	5b		 pop	 rbx
  00098	c3		 ret	 0
$LN16@PyImport_L:
  00099	48 89 74 24 68	 mov	 QWORD PTR [rsp+104], rsi

; 47   :         return NULL;
; 48   : 
; 49   :     namestr = PyBytes_AS_STRING(nameascii);

  0009e	48 8d 70 78	 lea	 rsi, QWORD PTR [rax+120]
  000a2	4c 89 6c 24 70	 mov	 QWORD PTR [rsp+112], r13
  000a7	4c 89 74 24 30	 mov	 QWORD PTR [rsp+48], r14

; 50   :     if (namestr == NULL)

  000ac	48 85 f6	 test	 rsi, rsi
  000af	0f 84 a9 00 00
	00		 je	 $error$120337

; 51   :         goto error;
; 52   : 
; 53   :     lastdot = strrchr(namestr, '.');

  000b5	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  000ba	48 8b ce	 mov	 rcx, rsi
  000bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strrchr

; 54   :     if (lastdot == NULL) {

  000c3	48 85 c0	 test	 rax, rax
  000c6	75 05		 jne	 SHORT $LN14@PyImport_L

; 55   :         packagecontext = NULL;

  000c8	45 33 f6	 xor	 r14d, r14d

; 56   :         shortname = namestr;
; 57   :     }
; 58   :     else {

  000cb	eb 07		 jmp	 SHORT $LN13@PyImport_L
$LN14@PyImport_L:

; 59   :         packagecontext = namestr;

  000cd	4c 8b f6	 mov	 r14, rsi

; 60   :         shortname = lastdot+1;

  000d0	48 8d 70 01	 lea	 rsi, QWORD PTR [rax+1]
$LN13@PyImport_L:

; 61   :     }
; 62   : 
; 63   : #ifdef MS_WINDOWS
; 64   :     p0 = _PyImport_GetDynLoadWindows(shortname, path, fp);

  000d4	4c 8b c3	 mov	 r8, rbx
  000d7	49 8b d4	 mov	 rdx, r12
  000da	48 8b ce	 mov	 rcx, rsi
  000dd	e8 00 00 00 00	 call	 _PyImport_GetDynLoadWindows
  000e2	4c 8b e8	 mov	 r13, rax

; 65   : #else
; 66   :     pathbytes = PyUnicode_EncodeFSDefault(path);
; 67   :     if (pathbytes == NULL)
; 68   :         goto error;
; 69   :     p0 = _PyImport_GetDynLoadFunc(shortname,
; 70   :                                   PyBytes_AS_STRING(pathbytes), fp);
; 71   :     Py_DECREF(pathbytes);
; 72   : #endif
; 73   :     p = (PyObject*(*)(void))p0;
; 74   :     if (PyErr_Occurred())

  000e5	e8 00 00 00 00	 call	 PyErr_Occurred
  000ea	48 85 c0	 test	 rax, rax
  000ed	75 6f		 jne	 SHORT $error$120337

; 75   :         goto error;
; 76   :     if (p == NULL) {

  000ef	4d 85 ed	 test	 r13, r13
  000f2	75 2a		 jne	 SHORT $LN11@PyImport_L

; 77   :         PyObject *msg = PyUnicode_FromFormat("dynamic module does not define "
; 78   :                                              "init function (PyInit_%s)",
; 79   :                                              shortname);

  000f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DJ@KFOAKLBA@dynamic?5module?5does?5not?5define?5i@
  000fb	48 8b d6	 mov	 rdx, rsi
  000fe	e8 00 00 00 00	 call	 PyUnicode_FromFormat

; 80   :         PyErr_SetImportError(msg, name, path);

  00103	4d 8b c4	 mov	 r8, r12
  00106	49 8b d7	 mov	 rdx, r15
  00109	48 8b c8	 mov	 rcx, rax
  0010c	48 8b d8	 mov	 rbx, rax
  0010f	e8 00 00 00 00	 call	 PyErr_SetImportError

; 81   :         Py_DECREF(msg);

  00114	48 8b cb	 mov	 rcx, rbx
  00117	e8 00 00 00 00	 call	 _Py_DecRef

; 82   :         goto error;

  0011c	eb 40		 jmp	 SHORT $error$120337
$LN11@PyImport_L:

; 83   :     }
; 84   :     oldcontext = _Py_PackageContext;

  0011e	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR _Py_PackageContext

; 85   :     _Py_PackageContext = packagecontext;

  00125	4c 89 35 00 00
	00 00		 mov	 QWORD PTR _Py_PackageContext, r14

; 86   :     m = (*p)();

  0012c	41 ff d5	 call	 r13
  0012f	48 8b f8	 mov	 rdi, rax

; 87   :     _Py_PackageContext = oldcontext;

  00132	48 89 1d 00 00
	00 00		 mov	 QWORD PTR _Py_PackageContext, rbx

; 88   :     if (m == NULL)

  00139	48 85 c0	 test	 rax, rax
  0013c	74 20		 je	 SHORT $error$120337

; 89   :         goto error;
; 90   : 
; 91   :     if (PyErr_Occurred()) {

  0013e	e8 00 00 00 00	 call	 PyErr_Occurred
  00143	48 85 c0	 test	 rax, rax
  00146	74 4c		 je	 SHORT $LN9@PyImport_L

; 92   :         PyErr_Format(PyExc_SystemError,
; 93   :                      "initialization of %s raised unreported exception",
; 94   :                      shortname);

  00148	4c 8b c6	 mov	 r8, rsi
  0014b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@EMJADMNK@initialization?5of?5?$CFs?5raised?5unre@
$LN28@PyImport_L:

; 101  :         PyErr_Format(PyExc_SystemError,
; 102  :                      "initialization of %s did not return an extension "
; 103  :                      "module", shortname);

  00152	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00159	e8 00 00 00 00	 call	 PyErr_Format
$error$120337:

; 118  : 
; 119  : error:
; 120  :     Py_DECREF(nameascii);

  0015e	48 8b cd	 mov	 rcx, rbp
  00161	e8 00 00 00 00	 call	 _Py_DecRef

; 121  :     Py_XDECREF(m);

  00166	48 85 ff	 test	 rdi, rdi
  00169	74 08		 je	 SHORT $LN3@PyImport_L
  0016b	48 8b cf	 mov	 rcx, rdi
  0016e	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@PyImport_L:

; 122  :     return NULL;

  00173	33 c0		 xor	 eax, eax
$LN27@PyImport_L:
  00175	4c 8b 6c 24 70	 mov	 r13, QWORD PTR [rsp+112]
  0017a	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  0017f	4c 8b 74 24 30	 mov	 r14, QWORD PTR [rsp+48]
  00184	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]

; 123  : }

  00189	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0018d	41 5f		 pop	 r15
  0018f	41 5c		 pop	 r12
  00191	5f		 pop	 rdi
  00192	5b		 pop	 rbx
  00193	c3		 ret	 0
$LN9@PyImport_L:

; 95   :         goto error;
; 96   :     }
; 97   : 
; 98   :     /* Remember pointer to module init function. */
; 99   :     def = PyModule_GetDef(m);

  00194	48 8b cf	 mov	 rcx, rdi
  00197	e8 00 00 00 00	 call	 PyModule_GetDef

; 100  :     if (def == NULL) {

  0019c	48 85 c0	 test	 rax, rax
  0019f	75 0c		 jne	 SHORT $LN8@PyImport_L

; 101  :         PyErr_Format(PyExc_SystemError,
; 102  :                      "initialization of %s did not return an extension "
; 103  :                      "module", shortname);

  001a1	4c 8b c6	 mov	 r8, rsi
  001a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DI@FKDNMCHP@initialization?5of?5?$CFs?5did?5not?5ret@

; 104  :         goto error;

  001ab	eb a5		 jmp	 SHORT $LN28@PyImport_L
$LN8@PyImport_L:

; 105  :     }
; 106  :     def->m_base.m_init = p;
; 107  : 
; 108  :     /* Remember the filename as the __file__ attribute */
; 109  :     if (PyModule_AddObject(m, "__file__", path) < 0)

  001ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08PFHPBGLK@__file__?$AA@
  001b4	4d 8b c4	 mov	 r8, r12
  001b7	48 8b cf	 mov	 rcx, rdi
  001ba	4c 89 68 60	 mov	 QWORD PTR [rax+96], r13
  001be	e8 00 00 00 00	 call	 PyModule_AddObject
  001c3	85 c0		 test	 eax, eax
  001c5	79 07		 jns	 SHORT $LN7@PyImport_L

; 110  :         PyErr_Clear(); /* Not important enough to report */

  001c7	e8 00 00 00 00	 call	 PyErr_Clear

; 111  :     else

  001cc	eb 08		 jmp	 SHORT $LN6@PyImport_L
$LN7@PyImport_L:

; 112  :         Py_INCREF(path);

  001ce	49 8b cc	 mov	 rcx, r12
  001d1	e8 00 00 00 00	 call	 _Py_IncRef
$LN6@PyImport_L:

; 113  : 
; 114  :     if (_PyImport_FixupExtensionObject(m, name, path) < 0)

  001d6	4d 8b c4	 mov	 r8, r12
  001d9	49 8b d7	 mov	 rdx, r15
  001dc	48 8b cf	 mov	 rcx, rdi
  001df	e8 00 00 00 00	 call	 _PyImport_FixupExtensionObject
  001e4	85 c0		 test	 eax, eax
  001e6	0f 88 72 ff ff
	ff		 js	 $error$120337

; 115  :         goto error;
; 116  :     Py_DECREF(nameascii);

  001ec	48 8b cd	 mov	 rcx, rbp
  001ef	e8 00 00 00 00	 call	 _Py_DecRef

; 117  :     return m;

  001f4	48 8b c7	 mov	 rax, rdi
  001f7	e9 79 ff ff ff	 jmp	 $LN27@PyImport_L
_PyImport_LoadDynamicModule ENDP
_TEXT	ENDS
END
