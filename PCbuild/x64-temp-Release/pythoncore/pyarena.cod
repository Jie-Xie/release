; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
EXTRN	__imp_malloc:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\pyarena.c
pdata	SEGMENT
$pdata$block_new DD imagerel block_new
	DD	imagerel block_new+76
	DD	imagerel $unwind$block_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$block_new DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT block_new
_TEXT	SEGMENT
size$ = 48
block_new PROC						; COMDAT

; 77   : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 78   :     /* Allocate header and block as one unit.
; 79   :        ab_mem points just past header. */
; 80   :     block *b = (block *)malloc(sizeof(block) + size);

  00009	48 83 c1 20	 add	 rcx, 32			; 00000020H
  0000d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00013	4c 8b d8	 mov	 r11, rax

; 81   :     if (!b)

  00016	48 85 c0	 test	 rax, rax
  00019	75 06		 jne	 SHORT $LN1@block_new

; 89   : }

  0001b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001f	5b		 pop	 rbx
  00020	c3		 ret	 0
$LN1@block_new:

; 82   :         return NULL;
; 83   :     b->ab_size = size;
; 84   :     b->ab_mem = (void *)(b + 1);

  00021	48 8d 48 20	 lea	 rcx, QWORD PTR [rax+32]
  00025	48 89 18	 mov	 QWORD PTR [rax], rbx

; 85   :     b->ab_next = NULL;

  00028	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0
  00030	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 86   :     b->ab_offset = (char *)_Py_ALIGN_UP(b->ab_mem, ALIGNMENT) -
; 87   :             (char *)(b->ab_mem);

  00034	48 8d 41 07	 lea	 rax, QWORD PTR [rcx+7]
  00038	48 83 e0 f8	 and	 rax, -8
  0003c	48 2b c1	 sub	 rax, rcx
  0003f	49 89 43 08	 mov	 QWORD PTR [r11+8], rax

; 88   :     return b;

  00043	49 8b c3	 mov	 rax, r11

; 89   : }

  00046	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004a	5b		 pop	 rbx
  0004b	c3		 ret	 0
block_new ENDP
_TEXT	ENDS
EXTRN	__imp_free:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$block_free DD imagerel block_free
	DD	imagerel block_free+9
	DD	imagerel $unwind$block_free
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$block_free DD imagerel block_free+9
	DD	imagerel block_free+39
	DD	imagerel $chain$0$block_free
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$block_free DD imagerel block_free+39
	DD	imagerel block_free+44
	DD	imagerel $chain$1$block_free
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$block_free DD 021H
	DD	imagerel block_free
	DD	imagerel block_free+9
	DD	imagerel $unwind$block_free
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$block_free DD 020521H
	DD	043405H
	DD	imagerel block_free
	DD	imagerel block_free+9
	DD	imagerel $unwind$block_free
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$block_free DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT block_free
_TEXT	SEGMENT
b$ = 48
block_free PROC						; COMDAT

; 92   : block_free(block *b) {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 93   :     while (b) {

  00004	48 85 c9	 test	 rcx, rcx
  00007	74 1e		 je	 SHORT $LN1@block_free
  00009	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  0000e	66 90		 npad	 2
$LL2@block_free:

; 94   :         block *next = b->ab_next;

  00010	48 8b 59 10	 mov	 rbx, QWORD PTR [rcx+16]

; 95   :         free(b);

  00014	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 96   :         b = next;

  0001a	48 8b cb	 mov	 rcx, rbx
  0001d	48 85 db	 test	 rbx, rbx
  00020	75 ee		 jne	 SHORT $LL2@block_free
  00022	48 8b 5c 24 20	 mov	 rbx, QWORD PTR [rsp+32]
$LN1@block_free:

; 97   :     }
; 98   : }

  00027	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002b	c3		 ret	 0
block_free ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$block_alloc DD imagerel block_alloc
	DD	imagerel block_alloc+106
	DD	imagerel $unwind$block_alloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$block_alloc DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT block_alloc
_TEXT	SEGMENT
b$ = 48
size$ = 56
block_alloc PROC					; COMDAT

; 102  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 103  :     void *p;
; 104  :     assert(b);
; 105  :     size = _Py_SIZE_ROUND_UP(size, ALIGNMENT);
; 106  :     if (b->ab_offset + size > b->ab_size) {

  0000a	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  0000e	48 8d 7a 07	 lea	 rdi, QWORD PTR [rdx+7]
  00012	48 8b d9	 mov	 rbx, rcx
  00015	48 83 e7 f8	 and	 rdi, -8
  00019	48 8d 14 07	 lea	 rdx, QWORD PTR [rdi+rax]
  0001d	48 3b 11	 cmp	 rdx, QWORD PTR [rcx]
  00020	76 2b		 jbe	 SHORT $LN2@block_allo

; 107  :         /* If we need to allocate more memory than will fit in
; 108  :            the default block, allocate a one-off block that is
; 109  :            exactly the right size. */
; 110  :         /* TODO(jhylton): Think about space waste at end of block */
; 111  :         block *newbl = block_new(
; 112  :                         size < DEFAULT_BLOCK_SIZE ?
; 113  :                         DEFAULT_BLOCK_SIZE : size);

  00022	b8 00 20 00 00	 mov	 eax, 8192		; 00002000H
  00027	48 8b cf	 mov	 rcx, rdi
  0002a	48 3b f8	 cmp	 rdi, rax
  0002d	48 0f 42 c8	 cmovb	 rcx, rax
  00031	e8 00 00 00 00	 call	 block_new

; 114  :         if (!newbl)

  00036	48 85 c0	 test	 rax, rax
  00039	75 0b		 jne	 SHORT $LN1@block_allo

; 124  :     return p;
; 125  : }

  0003b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00040	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00044	5f		 pop	 rdi
  00045	c3		 ret	 0
$LN1@block_allo:

; 115  :             return NULL;
; 116  :         assert(!b->ab_next);
; 117  :         b->ab_next = newbl;

  00046	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax

; 118  :         b = newbl;

  0004a	48 8b d8	 mov	 rbx, rax
$LN2@block_allo:

; 119  :     }
; 120  : 
; 121  :     assert(b->ab_offset + size <= b->ab_size);
; 122  :     p = (void *)(((char *)b->ab_mem) + b->ab_offset);

  0004d	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  00051	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00055	48 03 c1	 add	 rax, rcx

; 123  :     b->ab_offset += size;

  00058	48 03 cf	 add	 rcx, rdi
  0005b	48 89 4b 08	 mov	 QWORD PTR [rbx+8], rcx

; 124  :     return p;
; 125  : }

  0005f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00064	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00068	5f		 pop	 rdi
  00069	c3		 ret	 0
block_alloc ENDP
_TEXT	ENDS
PUBLIC	PyArena_New
EXTRN	PyList_New:PROC
EXTRN	PyErr_NoMemory:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyArena_New DD imagerel $LN8
	DD	imagerel $LN8+40
	DD	imagerel $unwind$PyArena_New
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyArena_New DD imagerel $LN8+40
	DD	imagerel $LN8+113
	DD	imagerel $chain$0$PyArena_New
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyArena_New DD imagerel $LN8+113
	DD	imagerel $LN8+127
	DD	imagerel $chain$2$PyArena_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyArena_New DD 020021H
	DD	067400H
	DD	imagerel $LN8
	DD	imagerel $LN8+40
	DD	imagerel $unwind$PyArena_New
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyArena_New DD 020521H
	DD	067405H
	DD	imagerel $LN8
	DD	imagerel $LN8+40
	DD	imagerel $unwind$PyArena_New
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyArena_New DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyArena_New
_TEXT	SEGMENT
PyArena_New PROC					; COMDAT

; 129  : {

$LN8:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 130  :     PyArena* arena = (PyArena *)malloc(sizeof(PyArena));

  00006	b9 18 00 00 00	 mov	 ecx, 24
  0000b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00011	48 8b d8	 mov	 rbx, rax

; 131  :     if (!arena)

  00014	48 85 c0	 test	 rax, rax
  00017	75 0a		 jne	 SHORT $LN3@PyArena_Ne

; 154  : }

  00019	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001d	5b		 pop	 rbx
  0001e	e9 00 00 00 00	 jmp	 PyErr_NoMemory
$LN3@PyArena_Ne:

; 132  :         return (PyArena*)PyErr_NoMemory();
; 133  : 
; 134  :     arena->a_head = block_new(DEFAULT_BLOCK_SIZE);

  00023	b9 00 20 00 00	 mov	 ecx, 8192		; 00002000H
  00028	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  0002d	e8 00 00 00 00	 call	 block_new
  00032	48 8b f8	 mov	 rdi, rax
  00035	48 89 03	 mov	 QWORD PTR [rbx], rax

; 135  :     arena->a_cur = arena->a_head;

  00038	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax

; 136  :     if (!arena->a_head) {

  0003c	48 85 c0	 test	 rax, rax

; 137  :         free((void *)arena);
; 138  :         return (PyArena*)PyErr_NoMemory();

  0003f	74 18		 je	 SHORT $LN7@PyArena_Ne

; 139  :     }
; 140  :     arena->a_objects = PyList_New(0);

  00041	33 c9		 xor	 ecx, ecx
  00043	e8 00 00 00 00	 call	 PyList_New
  00048	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax

; 141  :     if (!arena->a_objects) {

  0004c	48 85 c0	 test	 rax, rax
  0004f	75 20		 jne	 SHORT $LN1@PyArena_Ne

; 142  :         block_free(arena->a_head);

  00051	48 8b cf	 mov	 rcx, rdi
  00054	e8 00 00 00 00	 call	 block_free
$LN7@PyArena_Ne:

; 143  :         free((void *)arena);

  00059	48 8b cb	 mov	 rcx, rbx
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 144  :         return (PyArena*)PyErr_NoMemory();

  00062	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 154  : }

  00067	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006b	5b		 pop	 rbx
  0006c	e9 00 00 00 00	 jmp	 PyErr_NoMemory
$LN1@PyArena_Ne:

; 145  :     }
; 146  : #if defined(Py_DEBUG)
; 147  :     arena->total_allocs = 0;
; 148  :     arena->total_size = 0;
; 149  :     arena->total_blocks = 1;
; 150  :     arena->total_block_size = DEFAULT_BLOCK_SIZE;
; 151  :     arena->total_big_blocks = 0;
; 152  : #endif
; 153  :     return arena;

  00071	48 8b c3	 mov	 rax, rbx
  00074	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 154  : }

  00079	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007d	5b		 pop	 rbx
  0007e	c3		 ret	 0
PyArena_New ENDP
_TEXT	ENDS
PUBLIC	PyArena_Free
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyArena_Free DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$PyArena_Free
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyArena_Free DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyArena_Free
_TEXT	SEGMENT
arena$ = 48
PyArena_Free PROC					; COMDAT

; 158  : {

$LN3:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 159  :     assert(arena);
; 160  : #if defined(Py_DEBUG)
; 161  :     /*
; 162  :     fprintf(stderr,
; 163  :         "alloc=%d size=%d blocks=%d block_size=%d big=%d objects=%d\n",
; 164  :         arena->total_allocs, arena->total_size, arena->total_blocks,
; 165  :         arena->total_block_size, arena->total_big_blocks,
; 166  :         PyList_Size(arena->a_objects));
; 167  :     */
; 168  : #endif
; 169  :     block_free(arena->a_head);

  00009	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0000c	e8 00 00 00 00	 call	 block_free

; 170  :     /* This property normally holds, except when the code being compiled
; 171  :        is sys.getobjects(0), in which case there will be two references.
; 172  :     assert(arena->a_objects->ob_refcnt == 1);
; 173  :     */
; 174  : 
; 175  :     Py_DECREF(arena->a_objects);

  00011	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00015	e8 00 00 00 00	 call	 _Py_DecRef

; 176  :     free(arena);

  0001a	48 8b cb	 mov	 rcx, rbx

; 177  : }

  0001d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00021	5b		 pop	 rbx
  00022	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_free
PyArena_Free ENDP
_TEXT	ENDS
PUBLIC	PyArena_Malloc
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyArena_Malloc DD imagerel $LN5
	DD	imagerel $LN5+62
	DD	imagerel $unwind$PyArena_Malloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyArena_Malloc DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyArena_Malloc
_TEXT	SEGMENT
arena$ = 48
size$ = 56
PyArena_Malloc PROC					; COMDAT

; 181  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 182  :     void *p = block_alloc(arena->a_cur, size);

  00009	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0000d	e8 00 00 00 00	 call	 block_alloc
  00012	4c 8b d8	 mov	 r11, rax

; 183  :     if (!p)

  00015	48 85 c0	 test	 rax, rax
  00018	75 0a		 jne	 SHORT $LN2@PyArena_Ma

; 200  : }

  0001a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001e	5b		 pop	 rbx
  0001f	e9 00 00 00 00	 jmp	 PyErr_NoMemory
$LN2@PyArena_Ma:

; 184  :         return PyErr_NoMemory();
; 185  : #if defined(Py_DEBUG)
; 186  :     arena->total_allocs++;
; 187  :     arena->total_size += size;
; 188  : #endif
; 189  :     /* Reset cur if we allocated a new block. */
; 190  :     if (arena->a_cur->ab_next) {

  00024	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  00028	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  0002c	48 85 c9	 test	 rcx, rcx
  0002f	74 04		 je	 SHORT $LN1@PyArena_Ma

; 191  :         arena->a_cur = arena->a_cur->ab_next;

  00031	48 89 4b 08	 mov	 QWORD PTR [rbx+8], rcx
$LN1@PyArena_Ma:

; 192  : #if defined(Py_DEBUG)
; 193  :         arena->total_blocks++;
; 194  :         arena->total_block_size += arena->a_cur->ab_size;
; 195  :         if (arena->a_cur->ab_size > DEFAULT_BLOCK_SIZE)
; 196  :             ++arena->total_big_blocks;
; 197  : #endif
; 198  :     }
; 199  :     return p;

  00035	49 8b c3	 mov	 rax, r11

; 200  : }

  00038	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003c	5b		 pop	 rbx
  0003d	c3		 ret	 0
PyArena_Malloc ENDP
_TEXT	ENDS
PUBLIC	PyArena_AddPyObject
EXTRN	PyList_Append:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyArena_AddPyObject DD imagerel $LN5
	DD	imagerel $LN5+49
	DD	imagerel $unwind$PyArena_AddPyObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyArena_AddPyObject DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyArena_AddPyObject
_TEXT	SEGMENT
arena$ = 48
obj$ = 56
PyArena_AddPyObject PROC				; COMDAT

; 204  : {

$LN5:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 205  :     int r = PyList_Append(arena->a_objects, obj);

  0000a	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0000e	48 8b fa	 mov	 rdi, rdx
  00011	e8 00 00 00 00	 call	 PyList_Append
  00016	8b d8		 mov	 ebx, eax

; 206  :     if (r >= 0) {

  00018	85 c0		 test	 eax, eax
  0001a	78 0a		 js	 SHORT $LN1@PyArena_Ad

; 207  :         Py_DECREF(obj);

  0001c	48 8b cf	 mov	 rcx, rdi
  0001f	e8 00 00 00 00	 call	 _Py_DecRef

; 208  :     }
; 209  :     return r;

  00024	8b c3		 mov	 eax, ebx
$LN1@PyArena_Ad:

; 210  : }

  00026	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002f	5f		 pop	 rdi
  00030	c3		 ret	 0
PyArena_AddPyObject ENDP
_TEXT	ENDS
END
