; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0O@BNGKICEK@Fast?5profiler?$AA@		; `string'
PUBLIC	??_C@_07JPLDFAOG@_lsprof?$AA@			; `string'
PUBLIC	??_C@_0BB@DJIAIBIH@_lsprof?4Profiler?$AA@	; `string'
PUBLIC	??_C@_05MEHLAELG@clear?$AA@			; `string'
PUBLIC	??_C@_07DBNODEFN@disable?$AA@			; `string'
PUBLIC	??_C@_06OFNJOBDK@enable?$AA@			; `string'
PUBLIC	??_C@_08PEEMBOGE@getstats?$AA@			; `string'
PUBLIC	??_C@_08CPNLNCAG@timeunit?$AA@			; `string'
PUBLIC	??_C@_05NAPFDJNG@timer?$AA@			; `string'
PUBLIC	??_C@_08OCOMCJAJ@builtins?$AA@			; `string'
PUBLIC	??_C@_08DGFMKFLK@subcalls?$AA@			; `string'
PUBLIC	??_C@_0BK@CBMGBCAH@_lsprof?4profiler_subentry?$AA@ ; `string'
PUBLIC	??_C@_0BH@CHGGGMCJ@_lsprof?4profiler_entry?$AA@	; `string'
PUBLIC	??_C@_0CG@OFIFMHH@inline?5time?5?$CInot?5in?5further?5subc@ ; `string'
PUBLIC	??_C@_0BO@EKCDPEH@total?5time?5spent?5in?5this?5call?$AA@ ; `string'
PUBLIC	??_C@_0CK@JIJAPDGD@how?5many?5times?5this?5is?5called?5re@ ; `string'
PUBLIC	??_C@_0BO@BDHHCDAM@how?5many?5times?5this?5is?5called?$AA@ ; `string'
PUBLIC	??_C@_0CN@DNFNLNPK@called?5code?5object?5or?5built?9in?5f@ ; `string'
PUBLIC	??_C@_0BF@DNCNEKJK@details?5of?5the?5calls?$AA@	; `string'
PUBLIC	??_C@_05FACACNJP@calls?$AA@			; `string'
PUBLIC	??_C@_0CM@DADAJHKJ@inline?5time?5in?5this?5entry?5?$CInot?5i@ ; `string'
PUBLIC	??_C@_0L@JEHFILAL@inlinetime?$AA@		; `string'
PUBLIC	??_C@_0BJ@NAGAOMPF@total?5time?5in?5this?5entry?$AA@ ; `string'
PUBLIC	??_C@_09IBJNCBD@totaltime?$AA@			; `string'
PUBLIC	??_C@_0CC@HLFPELCJ@how?5many?5times?5called?5recursivel@ ; `string'
PUBLIC	??_C@_0N@CJIHLFHM@reccallcount?$AA@		; `string'
PUBLIC	??_C@_0BP@GMOJLEEE@how?5many?5times?5this?5was?5called?$AA@ ; `string'
PUBLIC	??_C@_09GGBGLJGG@callcount?$AA@			; `string'
PUBLIC	??_C@_0CG@GEJBGBJN@code?5object?5or?5built?9in?5function@ ; `string'
PUBLIC	??_C@_04NDFOBODE@code?$AA@			; `string'
EXTRN	PyObject_Free:PROC
EXTRN	PyType_GenericNew:PROC
EXTRN	PyType_GenericAlloc:PROC
_BSS	SEGMENT
moduleMethods DB 020H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0O@BNGKICEK@Fast?5profiler?$AA@
CONST	SEGMENT
??_C@_0O@BNGKICEK@Fast?5profiler?$AA@ DB 'Fast profiler', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07JPLDFAOG@_lsprof?$AA@
CONST	SEGMENT
??_C@_07JPLDFAOG@_lsprof?$AA@ DB '_lsprof', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DJIAIBIH@_lsprof?4Profiler?$AA@
CONST	SEGMENT
??_C@_0BB@DJIAIBIH@_lsprof?4Profiler?$AA@ DB '_lsprof.Profiler', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05MEHLAELG@clear?$AA@
CONST	SEGMENT
??_C@_05MEHLAELG@clear?$AA@ DB 'clear', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DBNODEFN@disable?$AA@
CONST	SEGMENT
??_C@_07DBNODEFN@disable?$AA@ DB 'disable', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OFNJOBDK@enable?$AA@
CONST	SEGMENT
??_C@_06OFNJOBDK@enable?$AA@ DB 'enable', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PEEMBOGE@getstats?$AA@
CONST	SEGMENT
??_C@_08PEEMBOGE@getstats?$AA@ DB 'getstats', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CPNLNCAG@timeunit?$AA@
CONST	SEGMENT
??_C@_08CPNLNCAG@timeunit?$AA@ DB 'timeunit', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05NAPFDJNG@timer?$AA@
CONST	SEGMENT
??_C@_05NAPFDJNG@timer?$AA@ DB 'timer', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OCOMCJAJ@builtins?$AA@
CONST	SEGMENT
??_C@_08OCOMCJAJ@builtins?$AA@ DB 'builtins', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08DGFMKFLK@subcalls?$AA@
CONST	SEGMENT
??_C@_08DGFMKFLK@subcalls?$AA@ DB 'subcalls', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CBMGBCAH@_lsprof?4profiler_subentry?$AA@
CONST	SEGMENT
??_C@_0BK@CBMGBCAH@_lsprof?4profiler_subentry?$AA@ DB '_lsprof.profiler_s'
	DB	'ubentry', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CHGGGMCJ@_lsprof?4profiler_entry?$AA@
CONST	SEGMENT
??_C@_0BH@CHGGGMCJ@_lsprof?4profiler_entry?$AA@ DB '_lsprof.profiler_entr'
	DB	'y', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@OFIFMHH@inline?5time?5?$CInot?5in?5further?5subc@
CONST	SEGMENT
??_C@_0CG@OFIFMHH@inline?5time?5?$CInot?5in?5further?5subc@ DB 'inline ti'
	DB	'me (not in further subcalls)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EKCDPEH@total?5time?5spent?5in?5this?5call?$AA@
CONST	SEGMENT
??_C@_0BO@EKCDPEH@total?5time?5spent?5in?5this?5call?$AA@ DB 'total time '
	DB	'spent in this call', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@JIJAPDGD@how?5many?5times?5this?5is?5called?5re@
CONST	SEGMENT
??_C@_0CK@JIJAPDGD@how?5many?5times?5this?5is?5called?5re@ DB 'how many t'
	DB	'imes this is called recursively', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BDHHCDAM@how?5many?5times?5this?5is?5called?$AA@
CONST	SEGMENT
??_C@_0BO@BDHHCDAM@how?5many?5times?5this?5is?5called?$AA@ DB 'how many t'
	DB	'imes this is called', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@DNFNLNPK@called?5code?5object?5or?5built?9in?5f@
CONST	SEGMENT
??_C@_0CN@DNFNLNPK@called?5code?5object?5or?5built?9in?5f@ DB 'called cod'
	DB	'e object or built-in function name', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
profiler_entry_fields DQ FLAT:??_C@_04NDFOBODE@code?$AA@
	DQ	FLAT:??_C@_0CG@GEJBGBJN@code?5object?5or?5built?9in?5function@
	DQ	FLAT:??_C@_09GGBGLJGG@callcount?$AA@
	DQ	FLAT:??_C@_0BP@GMOJLEEE@how?5many?5times?5this?5was?5called?$AA@
	DQ	FLAT:??_C@_0N@CJIHLFHM@reccallcount?$AA@
	DQ	FLAT:??_C@_0CC@HLFPELCJ@how?5many?5times?5called?5recursivel@
	DQ	FLAT:??_C@_09IBJNCBD@totaltime?$AA@
	DQ	FLAT:??_C@_0BJ@NAGAOMPF@total?5time?5in?5this?5entry?$AA@
	DQ	FLAT:??_C@_0L@JEHFILAL@inlinetime?$AA@
	DQ	FLAT:??_C@_0CM@DADAJHKJ@inline?5time?5in?5this?5entry?5?$CInot?5i@
	DQ	FLAT:??_C@_05FACACNJP@calls?$AA@
	DQ	FLAT:??_C@_0BF@DNCNEKJK@details?5of?5the?5calls?$AA@
	DQ	0000000000000000H
	ORG $+8
profiler_subentry_fields DQ FLAT:??_C@_04NDFOBODE@code?$AA@
	DQ	FLAT:??_C@_0CN@DNFNLNPK@called?5code?5object?5or?5built?9in?5f@
	DQ	FLAT:??_C@_09GGBGLJGG@callcount?$AA@
	DQ	FLAT:??_C@_0BO@BDHHCDAM@how?5many?5times?5this?5is?5called?$AA@
	DQ	FLAT:??_C@_0N@CJIHLFHM@reccallcount?$AA@
	DQ	FLAT:??_C@_0CK@JIJAPDGD@how?5many?5times?5this?5is?5called?5re@
	DQ	FLAT:??_C@_09IBJNCBD@totaltime?$AA@
	DQ	FLAT:??_C@_0BO@EKCDPEH@total?5time?5spent?5in?5this?5call?$AA@
	DQ	FLAT:??_C@_0L@JEHFILAL@inlinetime?$AA@
	DQ	FLAT:??_C@_0CG@OFIFMHH@inline?5time?5?$CInot?5in?5further?5subc@
	DQ	0000000000000000H
	ORG $+8
profiler_entry_desc DQ FLAT:??_C@_0BH@CHGGGMCJ@_lsprof?4profiler_entry?$AA@
	DQ	0000000000000000H
	DQ	FLAT:profiler_entry_fields
	DD	06H
	ORG $+4
profiler_subentry_desc DQ FLAT:??_C@_0BK@CBMGBCAH@_lsprof?4profiler_subentry?$AA@
	DQ	0000000000000000H
	DQ	FLAT:profiler_subentry_fields
	DD	05H
	ORG $+4
getstats_doc DB	'getstats() -> list of profiler_entry objects', 0aH, 0aH, 'R'
	DB	'eturn all information collected by the profiler.', 0aH, 'Each'
	DB	' profiler_entry is a tuple-like object with the', 0aH, 'follo'
	DB	'wing attributes:', 0aH, 0aH, '    code          code object', 0aH
	DB	'    callcount     how many times this was called', 0aH, '    '
	DB	'reccallcount  how many times called recursively', 0aH, '    t'
	DB	'otaltime     total time in this entry', 0aH, '    inlinetime '
	DB	'   inline time in this entry (not in subcalls)', 0aH, '    ca'
	DB	'lls         details of the calls', 0aH, 0aH, 'The calls attri'
	DB	'bute is either None or a list of', 0aH, 'profiler_subentry ob'
	DB	'jects:', 0aH, 0aH, '    code          called code object', 0aH
	DB	'    callcount     how many times this is called', 0aH, '    r'
	DB	'eccallcount  how many times this is called recursively', 0aH, ' '
	DB	'   totaltime     total time spent in this call', 0aH, '    in'
	DB	'linetime    inline time (not in further subcalls)', 0aH, 00H
	ORG $+11
enable_doc DB	'enable(subcalls=True, builtins=True)', 0aH, 0aH, 'Start '
	DB	'collecting profiling information.', 0aH, 'If ''subcalls'' is '
	DB	'True, also records for each function', 0aH, 'statistics separ'
	DB	'ated according to its current caller.', 0aH, 'If ''builtins'''
	DB	' is True, records the time spent in', 0aH, 'built-in function'
	DB	's separately from their caller.', 0aH, 00H
	ORG $+3
?kwlist@?1??profiler_enable@@9@9 DQ FLAT:??_C@_08DGFMKFLK@subcalls?$AA@ ; `profiler_enable'::`2'::kwlist
	DQ	FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
	DQ	0000000000000000H
disable_doc DB	'disable()', 0aH, 0aH, 'Stop collecting profiling informa'
	DB	'tion.', 0aH, 00H
	ORG $+5
clear_doc DB	'clear()', 0aH, 0aH, 'Clear all profiling information col'
	DB	'lected so far.', 0aH, 00H
	ORG $+4
?kwlist@?1??profiler_init@@9@9 DQ FLAT:??_C@_05NAPFDJNG@timer?$AA@ ; `profiler_init'::`2'::kwlist
	DQ	FLAT:??_C@_08CPNLNCAG@timeunit?$AA@
	DQ	FLAT:??_C@_08DGFMKFLK@subcalls?$AA@
	DQ	FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
	DQ	0000000000000000H
	ORG $+8
profiler_methods DQ FLAT:??_C@_08PEEMBOGE@getstats?$AA@
	DQ	FLAT:profiler_getstats
	DD	04H
	ORG $+4
	DQ	FLAT:getstats_doc
	DQ	FLAT:??_C@_06OFNJOBDK@enable?$AA@
	DQ	FLAT:profiler_enable
	DD	03H
	ORG $+4
	DQ	FLAT:enable_doc
	DQ	FLAT:??_C@_07DBNODEFN@disable?$AA@
	DQ	FLAT:profiler_disable
	DD	04H
	ORG $+4
	DQ	FLAT:disable_doc
	DQ	FLAT:??_C@_05MEHLAELG@clear?$AA@
	DQ	FLAT:profiler_clear
	DD	04H
	ORG $+4
	DQ	FLAT:clear_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
profiler_doc DB	'Profiler(custom_timer=None, time_unit=None, subcalls=Tru'
	DB	'e, builtins=True)', 0aH, 0aH, '    Builds a profiler object u'
	DB	'sing the specified timer function.', 0aH, '    The default ti'
	DB	'mer is a fast built-in one based on real time.', 0aH, '    Fo'
	DB	'r custom timer functions returning integers, time_unit can', 0aH
	DB	'    be a float specifying a scale (i.e. how long each integer'
	DB	' unit', 0aH, '    is, in seconds).', 0aH, 00H
	ORG $+9
PyProfiler_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BB@DJIAIBIH@_lsprof?4Profiler?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:profiler_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040400H
	ORG $+4
	DQ	FLAT:profiler_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:profiler_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:profiler_init
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:PyType_GenericNew
	DQ	FLAT:PyObject_Free
	ORG $+64
_lsprofmodule DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_07JPLDFAOG@_lsprof?$AA@
	DQ	FLAT:??_C@_0O@BNGKICEK@Fast?5profiler?$AA@
	DQ	ffffffffffffffffH
	DQ	FLAT:moduleMethods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
;	COMDAT ??_C@_0BF@DNCNEKJK@details?5of?5the?5calls?$AA@
CONST	SEGMENT
??_C@_0BF@DNCNEKJK@details?5of?5the?5calls?$AA@ DB 'details of the calls', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05FACACNJP@calls?$AA@
CONST	SEGMENT
??_C@_05FACACNJP@calls?$AA@ DB 'calls', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@DADAJHKJ@inline?5time?5in?5this?5entry?5?$CInot?5i@
CONST	SEGMENT
??_C@_0CM@DADAJHKJ@inline?5time?5in?5this?5entry?5?$CInot?5i@ DB 'inline '
	DB	'time in this entry (not in subcalls)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JEHFILAL@inlinetime?$AA@
CONST	SEGMENT
??_C@_0L@JEHFILAL@inlinetime?$AA@ DB 'inlinetime', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NAGAOMPF@total?5time?5in?5this?5entry?$AA@
CONST	SEGMENT
??_C@_0BJ@NAGAOMPF@total?5time?5in?5this?5entry?$AA@ DB 'total time in th'
	DB	'is entry', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09IBJNCBD@totaltime?$AA@
CONST	SEGMENT
??_C@_09IBJNCBD@totaltime?$AA@ DB 'totaltime', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@HLFPELCJ@how?5many?5times?5called?5recursivel@
CONST	SEGMENT
??_C@_0CC@HLFPELCJ@how?5many?5times?5called?5recursivel@ DB 'how many tim'
	DB	'es called recursively', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CJIHLFHM@reccallcount?$AA@
CONST	SEGMENT
??_C@_0N@CJIHLFHM@reccallcount?$AA@ DB 'reccallcount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@GMOJLEEE@how?5many?5times?5this?5was?5called?$AA@
CONST	SEGMENT
??_C@_0BP@GMOJLEEE@how?5many?5times?5this?5was?5called?$AA@ DB 'how many '
	DB	'times this was called', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09GGBGLJGG@callcount?$AA@
CONST	SEGMENT
??_C@_09GGBGLJGG@callcount?$AA@ DB 'callcount', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@GEJBGBJN@code?5object?5or?5built?9in?5function@
CONST	SEGMENT
??_C@_0CG@GEJBGBJN@code?5object?5or?5built?9in?5function@ DB 'code object'
	DB	' or built-in function name', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NDFOBODE@code?$AA@
CONST	SEGMENT
??_C@_04NDFOBODE@code?$AA@ DB 'code', 00H		; `string'
CONST	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
EXTRN	__imp_QueryPerformanceCounter:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\_lsprof.c
pdata	SEGMENT
$pdata$hpTimer DD imagerel hpTimer
	DD	imagerel hpTimer+25
	DD	imagerel $unwind$hpTimer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$hpTimer DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT hpTimer
_TEXT	SEGMENT
li$ = 48
hpTimer	PROC						; COMDAT

; 17   : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 18   :     LARGE_INTEGER li;
; 19   :     QueryPerformanceCounter(&li);

  00004	48 8d 4c 24 30	 lea	 rcx, QWORD PTR li$[rsp]
  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 20   :     return li.QuadPart;

  0000f	48 8b 44 24 30	 mov	 rax, QWORD PTR li$[rsp]

; 21   : }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	c3		 ret	 0
hpTimer	ENDP
_TEXT	ENDS
PUBLIC	__real@3eb0c6f7a0b5ed8d
PUBLIC	__real@3ff0000000000000
EXTRN	__imp_QueryPerformanceFrequency:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$hpTimerUnit DD imagerel hpTimerUnit
	DD	imagerel hpTimerUnit+60
	DD	imagerel $unwind$hpTimerUnit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$hpTimerUnit DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT __real@3eb0c6f7a0b5ed8d
CONST	SEGMENT
__real@3eb0c6f7a0b5ed8d DQ 03eb0c6f7a0b5ed8dr	; 1e-006
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT hpTimerUnit
_TEXT	SEGMENT
li$ = 48
hpTimerUnit PROC					; COMDAT

; 25   : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 26   :     LARGE_INTEGER li;
; 27   :     if (QueryPerformanceFrequency(&li))

  00004	48 8d 4c 24 30	 lea	 rcx, QWORD PTR li$[rsp]
  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceFrequency
  0000f	85 c0		 test	 eax, eax
  00011	74 1c		 je	 SHORT $LN2@hpTimerUni

; 28   :         return 1.0 / li.QuadPart;

  00013	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@3ff0000000000000
  0001b	66 0f ef c9	 pxor	 xmm1, xmm1
  0001f	f2 48 0f 2a 4c
	24 30		 cvtsi2sd xmm1, QWORD PTR li$[rsp]
  00026	f2 0f 5e c1	 divsd	 xmm0, xmm1

; 31   : }

  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	c3		 ret	 0
$LN2@hpTimerUni:

; 29   :     else
; 30   :         return 0.000001;  /* unlikely */

  0002f	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@3eb0c6f7a0b5ed8d

; 31   : }

  00037	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003b	c3		 ret	 0
hpTimerUnit ENDP
_TEXT	ENDS
PUBLIC	__real@41f0000000000000
PUBLIC	__real@0000000000000000
EXTRN	PyErr_Occurred:PROC
EXTRN	PyFloat_AsDouble:PROC
EXTRN	PyLong_AsLongLong:PROC
EXTRN	PyErr_WriteUnraisable:PROC
EXTRN	PyObject_Call:PROC
_BSS	SEGMENT
empty_tuple DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CallExternalTimer DD imagerel CallExternalTimer
	DD	imagerel CallExternalTimer+76
	DD	imagerel $unwind$CallExternalTimer
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$CallExternalTimer DD imagerel CallExternalTimer+76
	DD	imagerel CallExternalTimer+170
	DD	imagerel $chain$0$CallExternalTimer
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$CallExternalTimer DD imagerel CallExternalTimer+170
	DD	imagerel CallExternalTimer+189
	DD	imagerel $chain$2$CallExternalTimer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$CallExternalTimer DD 020021H
	DD	067400H
	DD	imagerel CallExternalTimer
	DD	imagerel CallExternalTimer+76
	DD	imagerel $unwind$CallExternalTimer
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$CallExternalTimer DD 020521H
	DD	067405H
	DD	imagerel CallExternalTimer
	DD	imagerel CallExternalTimer+76
	DD	imagerel $unwind$CallExternalTimer
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CallExternalTimer DD 040a01H
	DD	07340aH
	DD	06006320aH
xdata	ENDS
;	COMDAT __real@41f0000000000000
CONST	SEGMENT
__real@41f0000000000000 DQ 041f0000000000000r	; 4.29497e+009
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT CallExternalTimer
_TEXT	SEGMENT
pObj$ = 48
CallExternalTimer PROC					; COMDAT

; 129  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 130  :     PY_LONG_LONG result;
; 131  :     PyObject *o = PyObject_Call(pObj->externalTimer, empty_tuple, NULL);

  0000a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR empty_tuple
  00011	48 8b d9	 mov	 rbx, rcx
  00014	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  0001b	45 33 c0	 xor	 r8d, r8d
  0001e	e8 00 00 00 00	 call	 PyObject_Call
  00023	48 8b f0	 mov	 rsi, rax

; 132  :     if (o == NULL) {

  00026	48 85 c0	 test	 rax, rax
  00029	75 19		 jne	 SHORT $LN4@CallExtern

; 133  :         PyErr_WriteUnraisable(pObj->externalTimer);

  0002b	48 8b 8b 80 00
	00 00		 mov	 rcx, QWORD PTR [rbx+128]
  00032	e8 00 00 00 00	 call	 PyErr_WriteUnraisable

; 134  :         return 0;

  00037	33 c0		 xor	 eax, eax

; 153  :     }
; 154  :     return result;
; 155  : }

  00039	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0003e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00042	5e		 pop	 rsi
  00043	c3		 ret	 0
$LN4@CallExtern:

; 135  :     }
; 136  :     if (pObj->externalTimerUnit > 0.0) {

  00044	f2 0f 10 83 88
	00 00 00	 movsdx	 xmm0, QWORD PTR [rbx+136]
  0004c	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi

; 137  :         /* interpret the result as an integer that will be scaled
; 138  :            in profiler_getstats() */
; 139  :         result = PyLong_AsLongLong(o);

  00051	48 8b c8	 mov	 rcx, rax
  00054	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  0005c	76 0a		 jbe	 SHORT $LN3@CallExtern
  0005e	e8 00 00 00 00	 call	 PyLong_AsLongLong
  00063	48 8b f8	 mov	 rdi, rax

; 140  :     }
; 141  :     else {

  00066	eb 12		 jmp	 SHORT $LN2@CallExtern
$LN3@CallExtern:

; 142  :         /* interpret the result as a double measured in seconds.
; 143  :            As the profiler works with PY_LONG_LONG internally
; 144  :            we convert it to a large integer */
; 145  :         double val = PyFloat_AsDouble(o);

  00068	e8 00 00 00 00	 call	 PyFloat_AsDouble

; 146  :         /* error handling delayed to the code below */
; 147  :         result = (PY_LONG_LONG) (val * DOUBLE_TIMER_PRECISION);

  0006d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@41f0000000000000
  00075	f2 48 0f 2c f8	 cvttsd2si rdi, xmm0
$LN2@CallExtern:

; 148  :     }
; 149  :     Py_DECREF(o);

  0007a	48 8b ce	 mov	 rcx, rsi
  0007d	e8 00 00 00 00	 call	 _Py_DecRef

; 150  :     if (PyErr_Occurred()) {

  00082	e8 00 00 00 00	 call	 PyErr_Occurred
  00087	48 85 c0	 test	 rax, rax
  0008a	74 1e		 je	 SHORT $LN1@CallExtern

; 151  :         PyErr_WriteUnraisable(pObj->externalTimer);

  0008c	48 8b 8b 80 00
	00 00		 mov	 rcx, QWORD PTR [rbx+128]
  00093	e8 00 00 00 00	 call	 PyErr_WriteUnraisable
  00098	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 152  :         return 0;

  0009d	33 c0		 xor	 eax, eax

; 153  :     }
; 154  :     return result;
; 155  : }

  0009f	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000a4	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a8	5e		 pop	 rsi
  000a9	c3		 ret	 0
$LN1@CallExtern:
  000aa	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000af	48 8b c7	 mov	 rax, rdi
  000b2	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
  000b7	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000bb	5e		 pop	 rsi
  000bc	c3		 ret	 0
CallExternalTimer ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@BDFPHKOB@?$DMbuilt?9in?5method?5?$CFs?$DO?$AA@ ; `string'
PUBLIC	??_C@_04NNJCMPBN@?$DM?$CFs?$DO?$AA@		; `string'
PUBLIC	??_C@_07HHBGOKMG@?$DM?$CFU?4?$CFs?$DO?$AA@	; `string'
EXTRN	PyObject_Repr:PROC
EXTRN	_PyType_Lookup:PROC
EXTRN	PyUnicode_FromString:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	PyModule_GetNameObject:PROC
EXTRN	PyType_IsSubtype:PROC
EXTRN	PyModule_Type:BYTE
EXTRN	PyUnicode_FromFormat:PROC
EXTRN	PyUnicode_CompareWithASCIIString:PROC
EXTRN	PyCFunction_Type:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$normalizeUserObj DD imagerel normalizeUserObj
	DD	imagerel normalizeUserObj+90
	DD	imagerel $unwind$normalizeUserObj
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$normalizeUserObj DD imagerel normalizeUserObj+90
	DD	imagerel normalizeUserObj+211
	DD	imagerel $chain$0$normalizeUserObj
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$normalizeUserObj DD imagerel normalizeUserObj+211
	DD	imagerel normalizeUserObj+292
	DD	imagerel $chain$2$normalizeUserObj
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$normalizeUserObj DD imagerel normalizeUserObj+292
	DD	imagerel normalizeUserObj+456
	DD	imagerel $chain$5$normalizeUserObj
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$normalizeUserObj DD imagerel normalizeUserObj+456
	DD	imagerel normalizeUserObj+495
	DD	imagerel $chain$7$normalizeUserObj
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$normalizeUserObj DD 040021H
	DD	097400H
	DD	086400H
	DD	imagerel normalizeUserObj
	DD	imagerel normalizeUserObj+90
	DD	imagerel $unwind$normalizeUserObj
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$normalizeUserObj DD 040921H
	DD	086409H
	DD	097400H
	DD	imagerel normalizeUserObj
	DD	imagerel normalizeUserObj+90
	DD	imagerel $unwind$normalizeUserObj
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$normalizeUserObj DD 020021H
	DD	097400H
	DD	imagerel normalizeUserObj
	DD	imagerel normalizeUserObj+90
	DD	imagerel $unwind$normalizeUserObj
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$normalizeUserObj DD 020521H
	DD	097405H
	DD	imagerel normalizeUserObj
	DD	imagerel normalizeUserObj+90
	DD	imagerel $unwind$normalizeUserObj
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$normalizeUserObj DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0BF@BDFPHKOB@?$DMbuilt?9in?5method?5?$CFs?$DO?$AA@
CONST	SEGMENT
??_C@_0BF@BDFPHKOB@?$DMbuilt?9in?5method?5?$CFs?$DO?$AA@ DB '<built-in me'
	DB	'thod %s>', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04NNJCMPBN@?$DM?$CFs?$DO?$AA@
CONST	SEGMENT
??_C@_04NNJCMPBN@?$DM?$CFs?$DO?$AA@ DB '<%s>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07HHBGOKMG@?$DM?$CFU?4?$CFs?$DO?$AA@
CONST	SEGMENT
??_C@_07HHBGOKMG@?$DM?$CFU?4?$CFs?$DO?$AA@ DB '<%U.%s>', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_lsprof.c
CONST	ENDS
;	COMDAT normalizeUserObj
_TEXT	SEGMENT
obj$ = 64
normalizeUserObj PROC					; COMDAT

; 165  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 166  :     PyCFunctionObject *fn;
; 167  :     if (!PyCFunction_Check(obj)) {

  00006	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCFunction_Type
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00014	74 44		 je	 SHORT $LN18@normalizeU

; 168  :         Py_INCREF(obj);

  00016	e8 00 00 00 00	 call	 _Py_PXCTX
  0001b	85 c0		 test	 eax, eax
  0001d	75 32		 jne	 SHORT $LN22@normalizeU
  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0002d	4c 8b cb	 mov	 r9, rbx
  00030	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00036	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0003e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00043	85 c0		 test	 eax, eax
  00045	75 06		 jne	 SHORT $LN21@normalizeU
  00047	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0004b	74 04		 je	 SHORT $LN22@normalizeU
$LN21@normalizeU:
  0004d	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN22@normalizeU:

; 169  :         return obj;

  00051	48 8b c3	 mov	 rax, rbx

; 223  :     }
; 224  : }

  00054	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00058	5b		 pop	 rbx
  00059	c3		 ret	 0
$LN18@normalizeU:
  0005a	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi

; 170  :     }
; 171  :     /* Replace built-in function objects with a descriptive string
; 172  :        because of built-in methods -- keeping a reference to
; 173  :        __self__ is probably not a good idea. */
; 174  :     fn = (PyCFunctionObject *)obj;
; 175  : 
; 176  :     if (fn->m_self == NULL) {

  0005f	48 8b 79 68	 mov	 rdi, QWORD PTR [rcx+104]
  00063	48 85 ff	 test	 rdi, rdi
  00066	0f 85 b8 00 00
	00		 jne	 $LN17@normalizeU

; 177  :         /* built-in function: look up the module name */
; 178  :         PyObject *mod = fn->m_module;

  0006c	48 8b 79 70	 mov	 rdi, QWORD PTR [rcx+112]

; 179  :         PyObject *modname = NULL;
; 180  :         if (mod != NULL) {

  00070	48 85 ff	 test	 rdi, rdi
  00073	0f 84 8e 00 00
	00		 je	 $LN10@normalizeU

; 181  :             if (PyUnicode_Check(mod)) {

  00079	48 8b 4f 58	 mov	 rcx, QWORD PTR [rdi+88]
  0007d	f7 81 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rcx+256], 268435456 ; 10000000H
  00087	74 4a		 je	 SHORT $LN15@normalizeU

; 182  :                 modname = mod;
; 183  :                 Py_INCREF(modname);

  00089	48 8b cf	 mov	 rcx, rdi
  0008c	e8 00 00 00 00	 call	 _Py_IncRef
$LN11@normalizeU:

; 192  :             if (PyUnicode_CompareWithASCIIString(modname, "builtins") != 0) {

  00091	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
  00098	48 8b cf	 mov	 rcx, rdi
  0009b	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  000a0	85 c0		 test	 eax, eax
  000a2	74 5b		 je	 SHORT $LN9@normalizeU

; 193  :                 PyObject *result;
; 194  :                 result = PyUnicode_FromFormat("<%U.%s>", modname,
; 195  :                                               fn->m_ml->ml_name);

  000a4	4c 8b 43 60	 mov	 r8, QWORD PTR [rbx+96]
  000a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07HHBGOKMG@?$DM?$CFU?4?$CFs?$DO?$AA@
  000af	48 8b d7	 mov	 rdx, rdi
  000b2	4d 8b 00	 mov	 r8, QWORD PTR [r8]
  000b5	e8 00 00 00 00	 call	 PyUnicode_FromFormat

; 196  :                 Py_DECREF(modname);

  000ba	48 8b cf	 mov	 rcx, rdi
  000bd	48 8b d8	 mov	 rbx, rax
  000c0	e8 00 00 00 00	 call	 _Py_DecRef
  000c5	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]

; 197  :                 return result;

  000ca	48 8b c3	 mov	 rax, rbx

; 223  :     }
; 224  : }

  000cd	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d1	5b		 pop	 rbx
  000d2	c3		 ret	 0
$LN15@normalizeU:

; 184  :             }
; 185  :             else if (PyModule_Check(mod)) {

  000d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  000da	48 3b ca	 cmp	 rcx, rdx
  000dd	74 09		 je	 SHORT $LN12@normalizeU
  000df	e8 00 00 00 00	 call	 PyType_IsSubtype
  000e4	85 c0		 test	 eax, eax
  000e6	74 1f		 je	 SHORT $LN10@normalizeU
$LN12@normalizeU:

; 186  :                 modname = PyModule_GetNameObject(mod);

  000e8	48 8b cf	 mov	 rcx, rdi
  000eb	e8 00 00 00 00	 call	 PyModule_GetNameObject
  000f0	48 8b f8	 mov	 rdi, rax

; 187  :                 if (modname == NULL)

  000f3	48 85 c0	 test	 rax, rax
  000f6	75 99		 jne	 SHORT $LN11@normalizeU

; 188  :                     PyErr_Clear();

  000f8	e8 00 00 00 00	 call	 PyErr_Clear

; 189  :             }
; 190  :         }
; 191  :         if (modname != NULL) {

  000fd	eb 08		 jmp	 SHORT $LN10@normalizeU
$LN9@normalizeU:

; 198  :             }
; 199  :             Py_DECREF(modname);

  000ff	48 8b cf	 mov	 rcx, rdi
  00102	e8 00 00 00 00	 call	 _Py_DecRef
$LN10@normalizeU:

; 200  :         }
; 201  :         return PyUnicode_FromFormat("<%s>", fn->m_ml->ml_name);

  00107	48 8b 53 60	 mov	 rdx, QWORD PTR [rbx+96]
  0010b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04NNJCMPBN@?$DM?$CFs?$DO?$AA@
  00112	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00115	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]

; 223  :     }
; 224  : }

  0011a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0011e	5b		 pop	 rbx
  0011f	e9 00 00 00 00	 jmp	 PyUnicode_FromFormat
$LN17@normalizeU:

; 202  :     }
; 203  :     else {
; 204  :         /* built-in method: try to return
; 205  :             repr(getattr(type(__self__), __name__))
; 206  :         */
; 207  :         PyObject *self = fn->m_self;
; 208  :         PyObject *name = PyUnicode_FromString(fn->m_ml->ml_name);

  00124	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00128	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  0012d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00130	e8 00 00 00 00	 call	 PyUnicode_FromString
  00135	48 8b f0	 mov	 rsi, rax

; 209  :         if (name != NULL) {

  00138	48 85 c0	 test	 rax, rax
  0013b	0f 84 87 00 00
	00		 je	 $LN1@normalizeU

; 210  :             PyObject *mo = _PyType_Lookup(Py_TYPE(self), name);

  00141	48 8b 4f 58	 mov	 rcx, QWORD PTR [rdi+88]
  00145	48 8b d0	 mov	 rdx, rax
  00148	e8 00 00 00 00	 call	 _PyType_Lookup
  0014d	48 8b f8	 mov	 rdi, rax

; 211  :             Py_XINCREF(mo);

  00150	48 85 c0	 test	 rax, rax
  00153	74 3b		 je	 SHORT $LN5@normalizeU
  00155	e8 00 00 00 00	 call	 _Py_PXCTX
  0015a	85 c0		 test	 eax, eax
  0015c	75 32		 jne	 SHORT $LN5@normalizeU
  0015e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00165	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0016c	4c 8b cf	 mov	 r9, rdi
  0016f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00175	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0017d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00182	85 c0		 test	 eax, eax
  00184	75 06		 jne	 SHORT $LN25@normalizeU
  00186	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  0018a	74 04		 je	 SHORT $LN5@normalizeU
$LN25@normalizeU:
  0018c	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN5@normalizeU:

; 212  :             Py_DECREF(name);

  00190	48 8b ce	 mov	 rcx, rsi
  00193	e8 00 00 00 00	 call	 _Py_DecRef

; 213  :             if (mo != NULL) {

  00198	48 85 ff	 test	 rdi, rdi
  0019b	74 2b		 je	 SHORT $LN1@normalizeU

; 214  :                 PyObject *res = PyObject_Repr(mo);

  0019d	48 8b cf	 mov	 rcx, rdi
  001a0	e8 00 00 00 00	 call	 PyObject_Repr

; 215  :                 Py_DECREF(mo);

  001a5	48 8b cf	 mov	 rcx, rdi
  001a8	48 8b f0	 mov	 rsi, rax
  001ab	e8 00 00 00 00	 call	 _Py_DecRef

; 216  :                 if (res != NULL)

  001b0	48 85 f6	 test	 rsi, rsi
  001b3	74 13		 je	 SHORT $LN1@normalizeU

; 217  :                     return res;

  001b5	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  001ba	48 8b c6	 mov	 rax, rsi
  001bd	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]

; 223  :     }
; 224  : }

  001c2	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001c6	5b		 pop	 rbx
  001c7	c3		 ret	 0
$LN1@normalizeU:

; 218  :             }
; 219  :         }
; 220  :         PyErr_Clear();

  001c8	e8 00 00 00 00	 call	 PyErr_Clear

; 221  :         return PyUnicode_FromFormat("<built-in method %s>",
; 222  :                                     fn->m_ml->ml_name);

  001cd	48 8b 53 60	 mov	 rdx, QWORD PTR [rbx+96]
  001d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@BDFPHKOB@?$DMbuilt?9in?5method?5?$CFs?$DO?$AA@
  001d8	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  001db	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  001e0	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]

; 223  :     }
; 224  : }

  001e5	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001e9	5b		 pop	 rbx
  001ea	e9 00 00 00 00	 jmp	 PyUnicode_FromFormat
normalizeUserObj ENDP
_TEXT	ENDS
EXTRN	RotatingTree_Add:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$newProfilerEntry DD imagerel newProfilerEntry
	DD	imagerel newProfilerEntry+150
	DD	imagerel $unwind$newProfilerEntry
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$newProfilerEntry DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT newProfilerEntry
_TEXT	SEGMENT
pObj$ = 48
key$ = 56
userObj$ = 64
newProfilerEntry PROC					; COMDAT

; 228  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b f9	 mov	 rdi, rcx

; 229  :     ProfilerEntry *self;
; 230  :     self = (ProfilerEntry*) malloc(sizeof(ProfilerEntry));

  00017	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  0001c	49 8b f0	 mov	 rsi, r8
  0001f	48 8b ea	 mov	 rbp, rdx
  00022	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00028	48 8b d8	 mov	 rbx, rax

; 231  :     if (self == NULL) {

  0002b	48 85 c0	 test	 rax, rax

; 232  :         pObj->flags |= POF_NOMEMORY;
; 233  :         return NULL;

  0002e	74 1b		 je	 SHORT $LN5@newProfile

; 234  :     }
; 235  :     userObj = normalizeUserObj(userObj);

  00030	48 8b ce	 mov	 rcx, rsi
  00033	e8 00 00 00 00	 call	 normalizeUserObj

; 236  :     if (userObj == NULL) {

  00038	48 85 c0	 test	 rax, rax
  0003b	75 19		 jne	 SHORT $LN1@newProfile

; 237  :         PyErr_Clear();

  0003d	e8 00 00 00 00	 call	 PyErr_Clear

; 238  :         free(self);

  00042	48 8b cb	 mov	 rcx, rbx
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN5@newProfile:

; 239  :         pObj->flags |= POF_NOMEMORY;

  0004b	81 4f 78 00 01
	00 00		 or	 DWORD PTR [rdi+120], 256 ; 00000100H

; 240  :         return NULL;

  00052	33 c0		 xor	 eax, eax
  00054	eb 2b		 jmp	 SHORT $LN3@newProfile
$LN1@newProfile:

; 241  :     }
; 242  :     self->header.key = key;
; 243  :     self->userObj = userObj;

  00056	48 89 43 18	 mov	 QWORD PTR [rbx+24], rax

; 244  :     self->tt = 0;

  0005a	33 c0		 xor	 eax, eax

; 245  :     self->it = 0;
; 246  :     self->callcount = 0;
; 247  :     self->recursivecallcount = 0;
; 248  :     self->recursionLevel = 0;
; 249  :     self->calls = EMPTY_ROTATING_TREE;
; 250  :     RotatingTree_Add(&pObj->profilerEntries, &self->header);

  0005c	48 8d 4f 60	 lea	 rcx, QWORD PTR [rdi+96]
  00060	48 8b d3	 mov	 rdx, rbx
  00063	48 89 2b	 mov	 QWORD PTR [rbx], rbp
  00066	48 89 43 20	 mov	 QWORD PTR [rbx+32], rax
  0006a	48 89 43 28	 mov	 QWORD PTR [rbx+40], rax
  0006e	48 89 43 30	 mov	 QWORD PTR [rbx+48], rax
  00072	89 43 38	 mov	 DWORD PTR [rbx+56], eax
  00075	48 89 43 40	 mov	 QWORD PTR [rbx+64], rax
  00079	e8 00 00 00 00	 call	 RotatingTree_Add

; 251  :     return self;

  0007e	48 8b c3	 mov	 rax, rbx
$LN3@newProfile:

; 252  : }

  00081	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00086	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0008b	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00090	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00094	5f		 pop	 rdi
  00095	c3		 ret	 0
newProfilerEntry ENDP
_TEXT	ENDS
EXTRN	RotatingTree_Get:PROC
; Function compile flags: /Ogtpy
;	COMDAT getEntry
_TEXT	SEGMENT
pObj$ = 8
key$ = 16
getEntry PROC						; COMDAT

; 257  :     return (ProfilerEntry*) RotatingTree_Get(&pObj->profilerEntries, key);

  00000	48 83 c1 60	 add	 rcx, 96			; 00000060H

; 258  : }

  00004	e9 00 00 00 00	 jmp	 RotatingTree_Get
getEntry ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT getSubEntry
_TEXT	SEGMENT
caller$ = 8
entry$ = 16
getSubEntry PROC					; COMDAT

; 263  :     return (ProfilerSubEntry*) RotatingTree_Get(&caller->calls,
; 264  :                                                 (void *)entry);

  00000	48 83 c1 40	 add	 rcx, 64			; 00000040H

; 265  : }

  00004	e9 00 00 00 00	 jmp	 RotatingTree_Get
getSubEntry ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$newSubEntry DD imagerel newSubEntry
	DD	imagerel newSubEntry+113
	DD	imagerel $unwind$newSubEntry
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$newSubEntry DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT newSubEntry
_TEXT	SEGMENT
pObj$ = 48
caller$ = 56
entry$ = 64
newSubEntry PROC					; COMDAT

; 269  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b f9	 mov	 rdi, rcx

; 270  :     ProfilerSubEntry *self;
; 271  :     self = (ProfilerSubEntry*) malloc(sizeof(ProfilerSubEntry));

  00017	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  0001c	49 8b f0	 mov	 rsi, r8
  0001f	48 8b ea	 mov	 rbp, rdx
  00022	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00028	48 8b d8	 mov	 rbx, rax

; 272  :     if (self == NULL) {

  0002b	48 85 c0	 test	 rax, rax
  0002e	75 09		 jne	 SHORT $LN1@newSubEntr

; 273  :         pObj->flags |= POF_NOMEMORY;

  00030	81 4f 78 00 01
	00 00		 or	 DWORD PTR [rdi+120], 256 ; 00000100H

; 274  :         return NULL;

  00037	eb 23		 jmp	 SHORT $LN2@newSubEntr
$LN1@newSubEntr:

; 275  :     }
; 276  :     self->header.key = (void *)entry;

  00039	48 89 30	 mov	 QWORD PTR [rax], rsi

; 277  :     self->tt = 0;

  0003c	33 c0		 xor	 eax, eax

; 278  :     self->it = 0;
; 279  :     self->callcount = 0;
; 280  :     self->recursivecallcount = 0;
; 281  :     self->recursionLevel = 0;
; 282  :     RotatingTree_Add(&caller->calls, &self->header);

  0003e	48 8d 4d 40	 lea	 rcx, QWORD PTR [rbp+64]
  00042	48 8b d3	 mov	 rdx, rbx
  00045	48 89 43 18	 mov	 QWORD PTR [rbx+24], rax
  00049	48 89 43 20	 mov	 QWORD PTR [rbx+32], rax
  0004d	48 89 43 28	 mov	 QWORD PTR [rbx+40], rax
  00051	89 43 30	 mov	 DWORD PTR [rbx+48], eax
  00054	e8 00 00 00 00	 call	 RotatingTree_Add

; 283  :     return self;

  00059	48 8b c3	 mov	 rax, rbx
$LN2@newSubEntr:

; 284  : }

  0005c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00061	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00066	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0006b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006f	5f		 pop	 rdi
  00070	c3		 ret	 0
newSubEntry ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$freeSubEntry DD imagerel freeSubEntry
	DD	imagerel freeSubEntry+17
	DD	imagerel $unwind$freeSubEntry
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$freeSubEntry DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT freeSubEntry
_TEXT	SEGMENT
header$ = 48
arg$ = 56
freeSubEntry PROC					; COMDAT

; 287  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 288  :     ProfilerSubEntry *subentry = (ProfilerSubEntry*) header;
; 289  :     free(subentry);

  00004	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 290  :     return 0;

  0000a	33 c0		 xor	 eax, eax

; 291  : }

  0000c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00010	c3		 ret	 0
freeSubEntry ENDP
_TEXT	ENDS
EXTRN	RotatingTree_Enum:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$freeEntry DD imagerel freeEntry
	DD	imagerel freeEntry+54
	DD	imagerel $unwind$freeEntry
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$freeEntry DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT freeEntry
_TEXT	SEGMENT
header$ = 48
arg$ = 56
freeEntry PROC						; COMDAT

; 294  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 295  :     ProfilerEntry *entry = (ProfilerEntry*) header;
; 296  :     RotatingTree_Enum(entry->calls, freeSubEntry, NULL);

  00009	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  0000d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:freeSubEntry
  00014	45 33 c0	 xor	 r8d, r8d
  00017	e8 00 00 00 00	 call	 RotatingTree_Enum

; 297  :     Py_DECREF(entry->userObj);

  0001c	48 8b 4b 18	 mov	 rcx, QWORD PTR [rbx+24]
  00020	e8 00 00 00 00	 call	 _Py_DecRef

; 298  :     free(entry);

  00025	48 8b cb	 mov	 rcx, rbx
  00028	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 299  :     return 0;

  0002e	33 c0		 xor	 eax, eax

; 300  : }

  00030	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00034	5b		 pop	 rbx
  00035	c3		 ret	 0
freeEntry ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$clearEntries DD imagerel clearEntries
	DD	imagerel clearEntries+103
	DD	imagerel $unwind$clearEntries
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$clearEntries DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT clearEntries
_TEXT	SEGMENT
pObj$ = 48
clearEntries PROC					; COMDAT

; 303  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b d9	 mov	 rbx, rcx

; 304  :     RotatingTree_Enum(pObj->profilerEntries, freeEntry, NULL);

  0000d	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:freeEntry
  00018	45 33 c0	 xor	 r8d, r8d
  0001b	e8 00 00 00 00	 call	 RotatingTree_Enum

; 305  :     pObj->profilerEntries = EMPTY_ROTATING_TREE;
; 306  :     /* release the memory hold by the ProfilerContexts */
; 307  :     if (pObj->currentProfilerContext) {

  00020	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00024	33 ff		 xor	 edi, edi
  00026	48 89 7b 60	 mov	 QWORD PTR [rbx+96], rdi
  0002a	48 85 c9	 test	 rcx, rcx
  0002d	74 0a		 je	 SHORT $LN6@clearEntri

; 308  :         free(pObj->currentProfilerContext);

  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 309  :         pObj->currentProfilerContext = NULL;

  00035	48 89 7b 68	 mov	 QWORD PTR [rbx+104], rdi
$LN6@clearEntri:

; 310  :     }
; 311  :     while (pObj->freelistProfilerContext) {

  00039	48 39 7b 70	 cmp	 QWORD PTR [rbx+112], rdi
  0003d	74 19		 je	 SHORT $LN8@clearEntri
  0003f	90		 npad	 1
$LL2@clearEntri:

; 312  :         ProfilerContext *c = pObj->freelistProfilerContext;

  00040	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]

; 313  :         pObj->freelistProfilerContext = c->previous;

  00044	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  00048	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax

; 314  :         free(c);

  0004c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  00052	48 39 7b 70	 cmp	 QWORD PTR [rbx+112], rdi
  00056	75 e8		 jne	 SHORT $LL2@clearEntri
$LN8@clearEntri:

; 315  :     }
; 316  :     pObj->freelistProfilerContext = NULL;

  00058	48 89 7b 70	 mov	 QWORD PTR [rbx+112], rdi

; 317  : }

  0005c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00061	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00065	5f		 pop	 rdi
  00066	c3		 ret	 0
clearEntries ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$initContext DD imagerel initContext
	DD	imagerel initContext+42
	DD	imagerel $unwind$initContext
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$initContext DD imagerel initContext+42
	DD	imagerel initContext+67
	DD	imagerel $chain$0$initContext
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$initContext DD imagerel initContext+67
	DD	imagerel initContext+119
	DD	imagerel $chain$1$initContext
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$initContext DD imagerel initContext+119
	DD	imagerel initContext+134
	DD	imagerel $chain$2$initContext
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$initContext DD imagerel initContext+134
	DD	imagerel initContext+175
	DD	imagerel $chain$3$initContext
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$initContext DD 021H
	DD	imagerel initContext
	DD	imagerel initContext+42
	DD	imagerel $unwind$initContext
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$initContext DD 021H
	DD	imagerel initContext+42
	DD	imagerel initContext+67
	DD	imagerel $chain$0$initContext
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$initContext DD 020521H
	DD	065405H
	DD	imagerel initContext+42
	DD	imagerel initContext+67
	DD	imagerel $chain$0$initContext
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$initContext DD 020521H
	DD	076405H
	DD	imagerel initContext
	DD	imagerel initContext+42
	DD	imagerel $unwind$initContext
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$initContext DD 040a01H
	DD	08340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT initContext
_TEXT	SEGMENT
pObj$ = 48
self$ = 56
entry$ = 64
initContext PROC					; COMDAT

; 321  : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 322  :     self->ctxEntry = entry;

  0000a	4c 89 42 18	 mov	 QWORD PTR [rdx+24], r8

; 323  :     self->subt = 0;

  0000e	48 c7 42 08 00
	00 00 00	 mov	 QWORD PTR [rdx+8], 0

; 324  :     self->previous = pObj->currentProfilerContext;

  00016	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]
  0001a	48 89 42 10	 mov	 QWORD PTR [rdx+16], rax

; 325  :     pObj->currentProfilerContext = self;

  0001e	48 89 51 68	 mov	 QWORD PTR [rcx+104], rdx

; 326  :     ++entry->recursionLevel;

  00022	41 ff 40 38	 inc	 DWORD PTR [r8+56]

; 327  :     if ((pObj->flags & POF_SUBCALLS) && self->previous) {

  00026	f6 41 78 02	 test	 BYTE PTR [rcx+120], 2
  0002a	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  0002f	48 8b da	 mov	 rbx, rdx
  00032	49 8b f0	 mov	 rsi, r8
  00035	48 8b f9	 mov	 rdi, rcx
  00038	74 3d		 je	 SHORT $LN1@initContex
  0003a	48 8b 42 10	 mov	 rax, QWORD PTR [rdx+16]
  0003e	48 85 c0	 test	 rax, rax
  00041	74 34		 je	 SHORT $LN1@initContex

; 328  :         /* find or create an entry for me in my caller's entry */
; 329  :         ProfilerEntry *caller = self->previous->ctxEntry;

  00043	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp
  00048	48 8b 68 18	 mov	 rbp, QWORD PTR [rax+24]

; 330  :         ProfilerSubEntry *subentry = getSubEntry(pObj, caller, entry);

  0004c	49 8b d0	 mov	 rdx, r8
  0004f	48 8b cd	 mov	 rcx, rbp
  00052	e8 00 00 00 00	 call	 getSubEntry

; 331  :         if (subentry == NULL)

  00057	48 85 c0	 test	 rax, rax
  0005a	75 13		 jne	 SHORT $LN8@initContex

; 332  :             subentry = newSubEntry(pObj, caller, entry);

  0005c	4c 8b c6	 mov	 r8, rsi
  0005f	48 8b d5	 mov	 rdx, rbp
  00062	48 8b cf	 mov	 rcx, rdi
  00065	e8 00 00 00 00	 call	 newSubEntry

; 333  :         if (subentry)

  0006a	48 85 c0	 test	 rax, rax
  0006d	74 03		 je	 SHORT $LN9@initContex
$LN8@initContex:

; 334  :             ++subentry->recursionLevel;

  0006f	ff 40 30	 inc	 DWORD PTR [rax+48]
$LN9@initContex:
  00072	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
$LN1@initContex:

; 335  :     }
; 336  :     self->t0 = CALL_TIMER(pObj);

  00077	48 83 bf 80 00
	00 00 00	 cmp	 QWORD PTR [rdi+128], 0
  0007f	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00084	74 16		 je	 SHORT $LN6@initContex
  00086	48 8b cf	 mov	 rcx, rdi
  00089	e8 00 00 00 00	 call	 CallExternalTimer
  0008e	48 89 03	 mov	 QWORD PTR [rbx], rax

; 337  : }

  00091	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00096	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009a	5f		 pop	 rdi
  0009b	c3		 ret	 0
$LN6@initContex:

; 335  :     }
; 336  :     self->t0 = CALL_TIMER(pObj);

  0009c	e8 00 00 00 00	 call	 hpTimer
  000a1	48 89 03	 mov	 QWORD PTR [rbx], rax

; 337  : }

  000a4	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000a9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ad	5f		 pop	 rdi
  000ae	c3		 ret	 0
initContext ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Stop DD	imagerel Stop
	DD	imagerel Stop+194
	DD	imagerel $unwind$Stop
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Stop DD	0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0c016321aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT Stop
_TEXT	SEGMENT
pObj$ = 48
self$ = 56
entry$ = 64
Stop	PROC						; COMDAT

; 341  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 342  :     PY_LONG_LONG tt = CALL_TIMER(pObj) - self->t0;

  0001a	48 83 b9 80 00
	00 00 00	 cmp	 QWORD PTR [rcx+128], 0
  00022	49 8b d8	 mov	 rbx, r8
  00025	48 8b f2	 mov	 rsi, rdx
  00028	48 8b e9	 mov	 rbp, rcx
  0002b	74 07		 je	 SHORT $LN10@Stop
  0002d	e8 00 00 00 00	 call	 CallExternalTimer
  00032	eb 05		 jmp	 SHORT $LN12@Stop
$LN10@Stop:
  00034	e8 00 00 00 00	 call	 hpTimer
$LN12@Stop:
  00039	48 8b f8	 mov	 rdi, rax
  0003c	48 2b 3e	 sub	 rdi, QWORD PTR [rsi]

; 343  :     PY_LONG_LONG it = tt - self->subt;

  0003f	4c 8b e7	 mov	 r12, rdi
  00042	4c 2b 66 08	 sub	 r12, QWORD PTR [rsi+8]

; 344  :     if (self->previous)

  00046	48 83 7e 10 00	 cmp	 QWORD PTR [rsi+16], 0
  0004b	74 08		 je	 SHORT $LN7@Stop

; 345  :         self->previous->subt += tt;

  0004d	48 8b 46 10	 mov	 rax, QWORD PTR [rsi+16]
  00051	48 01 78 08	 add	 QWORD PTR [rax+8], rdi
$LN7@Stop:

; 346  :     pObj->currentProfilerContext = self->previous;

  00055	48 8b 46 10	 mov	 rax, QWORD PTR [rsi+16]
  00059	48 89 45 68	 mov	 QWORD PTR [rbp+104], rax

; 347  :     if (--entry->recursionLevel == 0)

  0005d	ff 4b 38	 dec	 DWORD PTR [rbx+56]
  00060	75 06		 jne	 SHORT $LN6@Stop

; 348  :         entry->tt += tt;

  00062	48 01 7b 20	 add	 QWORD PTR [rbx+32], rdi

; 349  :     else

  00066	eb 03		 jmp	 SHORT $LN5@Stop
$LN6@Stop:

; 350  :         ++entry->recursivecallcount;

  00068	ff 43 34	 inc	 DWORD PTR [rbx+52]
$LN5@Stop:

; 351  :     entry->it += it;

  0006b	4c 01 63 28	 add	 QWORD PTR [rbx+40], r12

; 352  :     entry->callcount++;

  0006f	ff 43 30	 inc	 DWORD PTR [rbx+48]

; 353  :     if ((pObj->flags & POF_SUBCALLS) && self->previous) {

  00072	f6 45 78 02	 test	 BYTE PTR [rbp+120], 2
  00076	74 2f		 je	 SHORT $LN3@Stop
  00078	48 8b 4e 10	 mov	 rcx, QWORD PTR [rsi+16]
  0007c	48 85 c9	 test	 rcx, rcx
  0007f	74 26		 je	 SHORT $LN3@Stop

; 354  :         /* find or create an entry for me in my caller's entry */
; 355  :         ProfilerEntry *caller = self->previous->ctxEntry;
; 356  :         ProfilerSubEntry *subentry = getSubEntry(pObj, caller, entry);

  00081	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00085	48 8b d3	 mov	 rdx, rbx
  00088	e8 00 00 00 00	 call	 getSubEntry

; 357  :         if (subentry) {

  0008d	48 85 c0	 test	 rax, rax
  00090	74 15		 je	 SHORT $LN3@Stop

; 358  :             if (--subentry->recursionLevel == 0)

  00092	ff 48 30	 dec	 DWORD PTR [rax+48]
  00095	75 06		 jne	 SHORT $LN2@Stop

; 359  :                 subentry->tt += tt;

  00097	48 01 78 18	 add	 QWORD PTR [rax+24], rdi

; 360  :             else

  0009b	eb 03		 jmp	 SHORT $LN1@Stop
$LN2@Stop:

; 361  :                 ++subentry->recursivecallcount;

  0009d	ff 40 2c	 inc	 DWORD PTR [rax+44]
$LN1@Stop:

; 362  :             subentry->it += it;

  000a0	4c 01 60 20	 add	 QWORD PTR [rax+32], r12

; 363  :             ++subentry->callcount;

  000a4	ff 40 28	 inc	 DWORD PTR [rax+40]
$LN3@Stop:

; 364  :         }
; 365  :     }
; 366  : }

  000a7	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000ac	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000b1	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000b6	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  000bb	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000bf	41 5c		 pop	 r12
  000c1	c3		 ret	 0
Stop	ENDP
_TEXT	ENDS
EXTRN	PyErr_Restore:PROC
EXTRN	PyErr_Fetch:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$ptrace_enter_call DD imagerel ptrace_enter_call
	DD	imagerel ptrace_enter_call+171
	DD	imagerel $unwind$ptrace_enter_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ptrace_enter_call DD 060c01H
	DD	0b340cH
	DD	07008520cH
	DD	050066007H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ptrace_enter_call
_TEXT	SEGMENT
last_type$ = 32
last_tb$ = 80
self$ = 80
key$ = 88
userObj$ = 96
last_value$ = 104
ptrace_enter_call PROC					; COMDAT

; 370  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000c	49 8b e8	 mov	 rbp, r8
  0000f	48 8b f2	 mov	 rsi, rdx
  00012	48 8b d9	 mov	 rbx, rcx

; 371  :     /* entering a call to the function identified by 'key'
; 372  :        (which can be a PyCodeObject or a PyMethodDef pointer) */
; 373  :     ProfilerObject *pObj = (ProfilerObject*)self;
; 374  :     ProfilerEntry *profEntry;
; 375  :     ProfilerContext *pContext;
; 376  : 
; 377  :     /* In the case of entering a generator expression frame via a
; 378  :      * throw (gen_send_ex(.., 1)), we may already have an
; 379  :      * Exception set here. We must not mess around with this
; 380  :      * exception, and some of the code under here assumes that
; 381  :      * PyErr_* is its own to mess around with, so we have to
; 382  :      * save and restore any current exception. */
; 383  :     PyObject *last_type, *last_value, *last_tb;
; 384  :     PyErr_Fetch(&last_type, &last_value, &last_tb);

  00015	4c 8d 44 24 50	 lea	 r8, QWORD PTR last_tb$[rsp]
  0001a	48 8d 54 24 68	 lea	 rdx, QWORD PTR last_value$[rsp]
  0001f	48 8d 4c 24 20	 lea	 rcx, QWORD PTR last_type$[rsp]
  00024	e8 00 00 00 00	 call	 PyErr_Fetch

; 385  : 
; 386  :     profEntry = getEntry(pObj, key);

  00029	48 8b d6	 mov	 rdx, rsi
  0002c	48 8b cb	 mov	 rcx, rbx
  0002f	e8 00 00 00 00	 call	 getEntry
  00034	48 8b f8	 mov	 rdi, rax

; 387  :     if (profEntry == NULL) {

  00037	48 85 c0	 test	 rax, rax
  0003a	75 16		 jne	 SHORT $LN4@ptrace_ent

; 388  :         profEntry = newProfilerEntry(pObj, key, userObj);

  0003c	4c 8b c5	 mov	 r8, rbp
  0003f	48 8b d6	 mov	 rdx, rsi
  00042	48 8b cb	 mov	 rcx, rbx
  00045	e8 00 00 00 00	 call	 newProfilerEntry
  0004a	48 8b f8	 mov	 rdi, rax

; 389  :         if (profEntry == NULL)

  0004d	48 85 c0	 test	 rax, rax
  00050	74 1c		 je	 SHORT $restorePyerr$120631
$LN4@ptrace_ent:

; 390  :             goto restorePyerr;
; 391  :     }
; 392  :     /* grab a ProfilerContext out of the free list */
; 393  :     pContext = pObj->freelistProfilerContext;

  00052	48 8b 53 70	 mov	 rdx, QWORD PTR [rbx+112]

; 394  :     if (pContext) {

  00056	48 85 d2	 test	 rdx, rdx
  00059	74 34		 je	 SHORT $LN3@ptrace_ent

; 395  :         pObj->freelistProfilerContext = pContext->previous;

  0005b	48 8b 42 10	 mov	 rax, QWORD PTR [rdx+16]
  0005f	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax
$LN1@ptrace_ent:

; 404  :         }
; 405  :     }
; 406  :     initContext(pObj, pContext, profEntry);

  00063	4c 8b c7	 mov	 r8, rdi
  00066	48 8b cb	 mov	 rcx, rbx
  00069	e8 00 00 00 00	 call	 initContext
$restorePyerr$120631:

; 407  : 
; 408  : restorePyerr:
; 409  :     PyErr_Restore(last_type, last_value, last_tb);

  0006e	4c 8b 44 24 50	 mov	 r8, QWORD PTR last_tb$[rsp]
  00073	48 8b 54 24 68	 mov	 rdx, QWORD PTR last_value$[rsp]
  00078	48 8b 4c 24 20	 mov	 rcx, QWORD PTR last_type$[rsp]
  0007d	e8 00 00 00 00	 call	 PyErr_Restore

; 410  : }

  00082	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  00087	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008b	5f		 pop	 rdi
  0008c	5e		 pop	 rsi
  0008d	5d		 pop	 rbp
  0008e	c3		 ret	 0
$LN3@ptrace_ent:

; 396  :     }
; 397  :     else {
; 398  :         /* free list exhausted, allocate a new one */
; 399  :         pContext = (ProfilerContext*)
; 400  :             malloc(sizeof(ProfilerContext));

  0008f	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00094	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0009a	48 8b d0	 mov	 rdx, rax

; 401  :         if (pContext == NULL) {

  0009d	48 85 c0	 test	 rax, rax
  000a0	75 c1		 jne	 SHORT $LN1@ptrace_ent

; 402  :             pObj->flags |= POF_NOMEMORY;

  000a2	81 4b 78 00 01
	00 00		 or	 DWORD PTR [rbx+120], 256 ; 00000100H

; 403  :             goto restorePyerr;

  000a9	eb c3		 jmp	 SHORT $restorePyerr$120631
ptrace_enter_call ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ptrace_leave_call DD imagerel ptrace_leave_call
	DD	imagerel ptrace_leave_call+79
	DD	imagerel $unwind$ptrace_leave_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ptrace_leave_call DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ptrace_leave_call
_TEXT	SEGMENT
self$ = 48
key$ = 56
ptrace_leave_call PROC					; COMDAT

; 414  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 415  :     /* leaving a call to the function identified by 'key' */
; 416  :     ProfilerObject *pObj = (ProfilerObject*)self;
; 417  :     ProfilerEntry *profEntry;
; 418  :     ProfilerContext *pContext;
; 419  : 
; 420  :     pContext = pObj->currentProfilerContext;

  0000a	48 8b 79 68	 mov	 rdi, QWORD PTR [rcx+104]
  0000e	48 8b d9	 mov	 rbx, rcx

; 421  :     if (pContext == NULL)

  00011	48 85 ff	 test	 rdi, rdi
  00014	74 2e		 je	 SHORT $LN4@ptrace_lea

; 422  :         return;
; 423  :     profEntry = getEntry(pObj, key);

  00016	e8 00 00 00 00	 call	 getEntry

; 424  :     if (profEntry) {

  0001b	48 85 c0	 test	 rax, rax
  0001e	74 10		 je	 SHORT $LN2@ptrace_lea

; 425  :         Stop(pObj, pContext, profEntry);

  00020	4c 8b c0	 mov	 r8, rax
  00023	48 8b d7	 mov	 rdx, rdi
  00026	48 8b cb	 mov	 rcx, rbx
  00029	e8 00 00 00 00	 call	 Stop

; 426  :     }
; 427  :     else {

  0002e	eb 08		 jmp	 SHORT $LN1@ptrace_lea
$LN2@ptrace_lea:

; 428  :         pObj->currentProfilerContext = pContext->previous;

  00030	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
  00034	48 89 43 68	 mov	 QWORD PTR [rbx+104], rax
$LN1@ptrace_lea:

; 429  :     }
; 430  :     /* put pContext into the free list */
; 431  :     pContext->previous = pObj->freelistProfilerContext;

  00038	48 8b 43 70	 mov	 rax, QWORD PTR [rbx+112]
  0003c	48 89 47 10	 mov	 QWORD PTR [rdi+16], rax

; 432  :     pObj->freelistProfilerContext = pContext;

  00040	48 89 7b 70	 mov	 QWORD PTR [rbx+112], rdi
$LN4@ptrace_lea:

; 433  : }

  00044	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00049	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004d	5f		 pop	 rdi
  0004e	c3		 ret	 0
ptrace_leave_call ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$profiler_callback DD imagerel profiler_callback
	DD	imagerel profiler_callback+137
	DD	imagerel $unwind$profiler_callback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$profiler_callback DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT profiler_callback
_TEXT	SEGMENT
self$ = 48
frame$ = 56
what$ = 64
arg$ = 72
profiler_callback PROC					; COMDAT

; 438  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 439  :     switch (what) {

  00004	45 85 c0	 test	 r8d, r8d
  00007	74 6d		 je	 SHORT $LN7@profiler_c
  00009	41 83 f8 03	 cmp	 r8d, 3
  0000d	74 57		 je	 SHORT $LN6@profiler_c
  0000f	41 83 f8 04	 cmp	 r8d, 4
  00013	74 2b		 je	 SHORT $LN5@profiler_c
  00015	7e 6b		 jle	 SHORT $LN8@profiler_c
  00017	41 83 f8 06	 cmp	 r8d, 6
  0001b	7f 65		 jg	 SHORT $LN8@profiler_c

; 466  :         }
; 467  :         break;
; 468  : 
; 469  :     /* the call to the built-in function 'arg' is returning into its
; 470  :        caller 'frame' */
; 471  :     case PyTrace_C_RETURN:              /* ...normally */
; 472  :     case PyTrace_C_EXCEPTION:           /* ...with an exception set */
; 473  :         if ((((ProfilerObject *)self)->flags & POF_BUILTINS)
; 474  :             && PyCFunction_Check(arg)) {

  0001d	f6 41 78 04	 test	 BYTE PTR [rcx+120], 4
  00021	74 5f		 je	 SHORT $LN8@profiler_c
  00023	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCFunction_Type
  0002a	49 39 41 58	 cmp	 QWORD PTR [r9+88], rax
  0002e	75 52		 jne	 SHORT $LN8@profiler_c

; 475  :             ptrace_leave_call(self,
; 476  :                               ((PyCFunctionObject *)arg)->m_ml);

  00030	49 8b 51 60	 mov	 rdx, QWORD PTR [r9+96]
  00034	e8 00 00 00 00	 call	 ptrace_leave_call

; 477  :         }
; 478  :         break;
; 479  : 
; 480  :     default:
; 481  :         break;
; 482  :     }
; 483  :     return 0;

  00039	33 c0		 xor	 eax, eax

; 484  : }

  0003b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003f	c3		 ret	 0
$LN5@profiler_c:

; 451  :         break;
; 452  : 
; 453  :     /* case PyTrace_EXCEPTION:
; 454  :         If the exception results in the function exiting, a
; 455  :         PyTrace_RETURN event will be generated, so we don't need to
; 456  :         handle it. */
; 457  : 
; 458  :     /* the Python function 'frame' is issuing a call to the built-in
; 459  :        function 'arg' */
; 460  :     case PyTrace_C_CALL:
; 461  :         if ((((ProfilerObject *)self)->flags & POF_BUILTINS)
; 462  :             && PyCFunction_Check(arg)) {

  00040	f6 41 78 04	 test	 BYTE PTR [rcx+120], 4
  00044	74 3c		 je	 SHORT $LN8@profiler_c
  00046	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCFunction_Type
  0004d	49 39 41 58	 cmp	 QWORD PTR [r9+88], rax
  00051	75 2f		 jne	 SHORT $LN8@profiler_c

; 463  :             ptrace_enter_call(self,
; 464  :                               ((PyCFunctionObject *)arg)->m_ml,
; 465  :                               arg);

  00053	49 8b 51 60	 mov	 rdx, QWORD PTR [r9+96]
  00057	4d 8b c1	 mov	 r8, r9
  0005a	e8 00 00 00 00	 call	 ptrace_enter_call

; 477  :         }
; 478  :         break;
; 479  : 
; 480  :     default:
; 481  :         break;
; 482  :     }
; 483  :     return 0;

  0005f	33 c0		 xor	 eax, eax

; 484  : }

  00061	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00065	c3		 ret	 0
$LN6@profiler_c:

; 445  :         break;
; 446  : 
; 447  :     /* the 'frame' of a called function is about to finish
; 448  :        (either normally or with an exception) */
; 449  :     case PyTrace_RETURN:
; 450  :         ptrace_leave_call(self, (void *)frame->f_code);

  00066	48 8b 52 78	 mov	 rdx, QWORD PTR [rdx+120]
  0006a	e8 00 00 00 00	 call	 ptrace_leave_call

; 477  :         }
; 478  :         break;
; 479  : 
; 480  :     default:
; 481  :         break;
; 482  :     }
; 483  :     return 0;

  0006f	33 c0		 xor	 eax, eax

; 484  : }

  00071	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00075	c3		 ret	 0
$LN7@profiler_c:

; 440  : 
; 441  :     /* the 'frame' of a called function is about to start its execution */
; 442  :     case PyTrace_CALL:
; 443  :         ptrace_enter_call(self, (void *)frame->f_code,
; 444  :                                 (PyObject *)frame->f_code);

  00076	48 8b 52 78	 mov	 rdx, QWORD PTR [rdx+120]
  0007a	4c 8b c2	 mov	 r8, rdx
  0007d	e8 00 00 00 00	 call	 ptrace_enter_call
$LN8@profiler_c:

; 477  :         }
; 478  :         break;
; 479  : 
; 480  :     default:
; 481  :         break;
; 482  :     }
; 483  :     return 0;

  00082	33 c0		 xor	 eax, eax

; 484  : }

  00084	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00088	c3		 ret	 0
profiler_callback ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@KIPDEFDA@memory?5was?5exhausted?5while?5profi@ ; `string'
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_MemoryError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$pending_exception DD imagerel pending_exception
	DD	imagerel pending_exception+55
	DD	imagerel $unwind$pending_exception
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$pending_exception DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0CF@KIPDEFDA@memory?5was?5exhausted?5while?5profi@
CONST	SEGMENT
??_C@_0CF@KIPDEFDA@memory?5was?5exhausted?5while?5profi@ DB 'memory was e'
	DB	'xhausted while profiling', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT pending_exception
_TEXT	SEGMENT
pObj$ = 48
pending_exception PROC					; COMDAT

; 488  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 489  :     if (pObj->flags & POF_NOMEMORY) {

  00004	8b 41 78	 mov	 eax, DWORD PTR [rcx+120]
  00007	0f ba e0 08	 bt	 eax, 8
  0000b	73 23		 jae	 SHORT $LN1@pending_ex

; 490  :         pObj->flags -= POF_NOMEMORY;

  0000d	05 00 ff ff ff	 add	 eax, -256		; ffffffffffffff00H

; 491  :         PyErr_SetString(PyExc_MemoryError,
; 492  :                         "memory was exhausted while profiling");

  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@KIPDEFDA@memory?5was?5exhausted?5while?5profi@
  00019	89 41 78	 mov	 DWORD PTR [rcx+120], eax
  0001c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_MemoryError
  00023	e8 00 00 00 00	 call	 PyErr_SetString

; 493  :         return -1;

  00028	83 c8 ff	 or	 eax, -1

; 496  : }

  0002b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002f	c3		 ret	 0
$LN1@pending_ex:

; 494  :     }
; 495  :     return 0;

  00030	33 c0		 xor	 eax, eax

; 496  : }

  00032	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00036	c3		 ret	 0
pending_exception ENDP
_TEXT	ENDS
PUBLIC	??_C@_09BBGHJOLK@?$CI?$CIOlldd?$CJ?$CJ?$AA@	; `string'
EXTRN	PyList_Append:PROC
EXTRN	PyObject_CallFunction:PROC
_BSS	SEGMENT
StatsSubEntryType DB 01e0H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$statsForSubEntry DD imagerel statsForSubEntry
	DD	imagerel statsForSubEntry+149
	DD	imagerel $unwind$statsForSubEntry
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$statsForSubEntry DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT ??_C@_09BBGHJOLK@?$CI?$CIOlldd?$CJ?$CJ?$AA@
CONST	SEGMENT
??_C@_09BBGHJOLK@?$CI?$CIOlldd?$CJ?$CJ?$AA@ DB '((Olldd))', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT statsForSubEntry
_TEXT	SEGMENT
node$ = 80
arg$ = 88
statsForSubEntry PROC					; COMDAT

; 545  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 546  :     ProfilerSubEntry *sentry = (ProfilerSubEntry*) node;
; 547  :     statscollector_t *collect = (statscollector_t*) arg;
; 548  :     ProfilerEntry *entry = (ProfilerEntry*) sentry->header.key;

  0000a	4c 8b 01	 mov	 r8, QWORD PTR [rcx]

; 549  :     int err;
; 550  :     PyObject *sinfo;
; 551  :     sinfo = PyObject_CallFunction((PyObject*) &StatsSubEntryType,
; 552  :                                   "((Olldd))",
; 553  :                                   entry->userObj,
; 554  :                                   sentry->callcount,
; 555  :                                   sentry->recursivecallcount,
; 556  :                                   collect->factor * sentry->tt,
; 557  :                                   collect->factor * sentry->it);

  0000d	8b 41 2c	 mov	 eax, DWORD PTR [rcx+44]
  00010	44 8b 49 28	 mov	 r9d, DWORD PTR [rcx+40]
  00014	66 0f ef d2	 pxor	 xmm2, xmm2
  00018	66 0f ef c0	 pxor	 xmm0, xmm0
  0001c	f2 48 0f 2a 51
	20		 cvtsi2sd xmm2, QWORD PTR [rcx+32]
  00022	f2 48 0f 2a 41
	18		 cvtsi2sd xmm0, QWORD PTR [rcx+24]
  00028	4d 8b 40 18	 mov	 r8, QWORD PTR [r8+24]
  0002c	48 8b da	 mov	 rbx, rdx
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:StatsSubEntryType
  00036	f2 0f 59 52 10	 mulsd	 xmm2, QWORD PTR [rdx+16]
  0003b	f2 0f 59 42 10	 mulsd	 xmm0, QWORD PTR [rdx+16]
  00040	f2 0f 11 54 24
	30		 movsdx	 QWORD PTR [rsp+48], xmm2
  00046	f2 0f 11 44 24
	28		 movsdx	 QWORD PTR [rsp+40], xmm0
  0004c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09BBGHJOLK@?$CI?$CIOlldd?$CJ?$CJ?$AA@
  00053	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00057	e8 00 00 00 00	 call	 PyObject_CallFunction
  0005c	48 8b f8	 mov	 rdi, rax

; 558  :     if (sinfo == NULL)

  0005f	48 85 c0	 test	 rax, rax
  00062	75 0e		 jne	 SHORT $LN1@statsForSu

; 559  :         return -1;

  00064	83 c8 ff	 or	 eax, -1

; 563  : }

  00067	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0006c	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00070	5f		 pop	 rdi
  00071	c3		 ret	 0
$LN1@statsForSu:

; 560  :     err = PyList_Append(collect->sublist, sinfo);

  00072	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  00076	48 8b d0	 mov	 rdx, rax
  00079	e8 00 00 00 00	 call	 PyList_Append

; 561  :     Py_DECREF(sinfo);

  0007e	48 8b cf	 mov	 rcx, rdi
  00081	8b d8		 mov	 ebx, eax
  00083	e8 00 00 00 00	 call	 _Py_DecRef

; 562  :     return err;

  00088	8b c3		 mov	 eax, ebx

; 563  : }

  0008a	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0008f	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00093	5f		 pop	 rdi
  00094	c3		 ret	 0
statsForSubEntry ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@HBKOAKDI@?$CI?$CIOllddO?$CJ?$CJ?$AA@	; `string'
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyList_New:PROC
_BSS	SEGMENT
StatsEntryType DB 01e0H DUP (?)
_BSS	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$statsForEntry DD imagerel statsForEntry
	DD	imagerel statsForEntry+104
	DD	imagerel $unwind$statsForEntry
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$statsForEntry DD imagerel statsForEntry+104
	DD	imagerel statsForEntry+190
	DD	imagerel $chain$0$statsForEntry
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$statsForEntry DD imagerel statsForEntry+190
	DD	imagerel statsForEntry+330
	DD	imagerel $chain$1$statsForEntry
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$statsForEntry DD 021H
	DD	imagerel statsForEntry
	DD	imagerel statsForEntry+104
	DD	imagerel $unwind$statsForEntry
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$statsForEntry DD 020521H
	DD	0a6405H
	DD	imagerel statsForEntry
	DD	imagerel statsForEntry+104
	DD	imagerel $unwind$statsForEntry
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$statsForEntry DD 040a01H
	DD	0b340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT ??_C@_0L@HBKOAKDI@?$CI?$CIOllddO?$CJ?$CJ?$AA@
CONST	SEGMENT
??_C@_0L@HBKOAKDI@?$CI?$CIOllddO?$CJ?$CJ?$AA@ DB '((OllddO))', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_lsprof.c
CONST	ENDS
;	COMDAT statsForEntry
_TEXT	SEGMENT
node$ = 80
arg$ = 88
statsForEntry PROC					; COMDAT

; 566  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 567  :     ProfilerEntry *entry = (ProfilerEntry*) node;
; 568  :     statscollector_t *collect = (statscollector_t*) arg;
; 569  :     PyObject *info;
; 570  :     int err;
; 571  :     if (entry->callcount == 0)

  0000a	83 79 30 00	 cmp	 DWORD PTR [rcx+48], 0
  0000e	48 8b da	 mov	 rbx, rdx
  00011	48 8b f9	 mov	 rdi, rcx
  00014	75 0d		 jne	 SHORT $LN6@statsForEn

; 572  :         return 0;   /* skip */

  00016	33 c0		 xor	 eax, eax

; 603  : }

  00018	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  0001d	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00021	5f		 pop	 rdi
  00022	c3		 ret	 0
$LN6@statsForEn:

; 573  : 
; 574  :     if (entry->calls != EMPTY_ROTATING_TREE) {

  00023	48 83 79 40 00	 cmp	 QWORD PTR [rcx+64], 0
  00028	74 3e		 je	 SHORT $LN5@statsForEn

; 575  :         collect->sublist = PyList_New(0);

  0002a	33 c9		 xor	 ecx, ecx
  0002c	e8 00 00 00 00	 call	 PyList_New
  00031	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax

; 576  :         if (collect->sublist == NULL)

  00035	48 85 c0	 test	 rax, rax

; 577  :             return -1;

  00038	74 20		 je	 SHORT $LN13@statsForEn

; 578  :         if (RotatingTree_Enum(entry->calls,
; 579  :                               statsForSubEntry, collect) != 0) {

  0003a	48 8b 4f 40	 mov	 rcx, QWORD PTR [rdi+64]
  0003e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:statsForSubEntry
  00045	4c 8b c3	 mov	 r8, rbx
  00048	e8 00 00 00 00	 call	 RotatingTree_Enum
  0004d	85 c0		 test	 eax, eax
  0004f	74 6d		 je	 SHORT $LN2@statsForEn

; 580  :             Py_DECREF(collect->sublist);

  00051	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  00055	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@statsForEn:

; 581  :             return -1;

  0005a	83 c8 ff	 or	 eax, -1

; 603  : }

  0005d	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  00062	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00066	5f		 pop	 rdi
  00067	c3		 ret	 0
$LN5@statsForEn:
  00068	48 89 74 24 50	 mov	 QWORD PTR [rsp+80], rsi

; 582  :         }
; 583  :     }
; 584  :     else {
; 585  :         Py_INCREF(Py_None);

  0006d	e8 00 00 00 00	 call	 _Py_PXCTX
  00072	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_Py_NoneStruct
  00079	85 c0		 test	 eax, eax
  0007b	75 38		 jne	 SHORT $LN10@statsForEn
  0007d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00084	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0008b	4c 8b ce	 mov	 r9, rsi
  0008e	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00094	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0009c	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a1	85 c0		 test	 eax, eax
  000a3	75 09		 jne	 SHORT $LN9@statsForEn
  000a5	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  000ac	74 07		 je	 SHORT $LN10@statsForEn
$LN9@statsForEn:
  000ae	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN10@statsForEn:

; 586  :         collect->sublist = Py_None;

  000b5	48 89 73 08	 mov	 QWORD PTR [rbx+8], rsi
  000b9	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
$LN2@statsForEn:

; 587  :     }
; 588  : 
; 589  :     info = PyObject_CallFunction((PyObject*) &StatsEntryType,
; 590  :                                  "((OllddO))",
; 591  :                                  entry->userObj,
; 592  :                                  entry->callcount,
; 593  :                                  entry->recursivecallcount,
; 594  :                                  collect->factor * entry->tt,
; 595  :                                  collect->factor * entry->it,
; 596  :                                  collect->sublist);

  000be	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  000c2	44 8b 4f 30	 mov	 r9d, DWORD PTR [rdi+48]
  000c6	4c 8b 47 18	 mov	 r8, QWORD PTR [rdi+24]
  000ca	66 0f ef d2	 pxor	 xmm2, xmm2
  000ce	66 0f ef c9	 pxor	 xmm1, xmm1
  000d2	f2 48 0f 2a 57
	28		 cvtsi2sd xmm2, QWORD PTR [rdi+40]
  000d8	f2 48 0f 2a 4f
	20		 cvtsi2sd xmm1, QWORD PTR [rdi+32]
  000de	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  000e3	8b 47 34	 mov	 eax, DWORD PTR [rdi+52]
  000e6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@HBKOAKDI@?$CI?$CIOllddO?$CJ?$CJ?$AA@
  000ed	f2 0f 59 53 10	 mulsd	 xmm2, QWORD PTR [rbx+16]
  000f2	f2 0f 59 4b 10	 mulsd	 xmm1, QWORD PTR [rbx+16]
  000f7	f2 0f 11 54 24
	30		 movsdx	 QWORD PTR [rsp+48], xmm2
  000fd	f2 0f 11 4c 24
	28		 movsdx	 QWORD PTR [rsp+40], xmm1
  00103	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:StatsEntryType
  0010a	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0010e	e8 00 00 00 00	 call	 PyObject_CallFunction

; 597  :     Py_DECREF(collect->sublist);

  00113	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  00117	48 8b f8	 mov	 rdi, rax
  0011a	e8 00 00 00 00	 call	 _Py_DecRef

; 598  :     if (info == NULL)

  0011f	48 85 ff	 test	 rdi, rdi

; 599  :         return -1;

  00122	0f 84 32 ff ff
	ff		 je	 $LN13@statsForEn

; 600  :     err = PyList_Append(collect->list, info);

  00128	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0012b	48 8b d7	 mov	 rdx, rdi
  0012e	e8 00 00 00 00	 call	 PyList_Append

; 601  :     Py_DECREF(info);

  00133	48 8b cf	 mov	 rcx, rdi
  00136	8b d8		 mov	 ebx, eax
  00138	e8 00 00 00 00	 call	 _Py_DecRef

; 602  :     return err;

  0013d	8b c3		 mov	 eax, ebx

; 603  : }

  0013f	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  00144	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00148	5f		 pop	 rdi
  00149	c3		 ret	 0
statsForEntry ENDP
_TEXT	ENDS
PUBLIC	__real@3df0000000000000
;	COMDAT pdata
pdata	SEGMENT
$pdata$profiler_getstats DD imagerel profiler_getstats
	DD	imagerel profiler_getstats+138
	DD	imagerel $unwind$profiler_getstats
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$profiler_getstats DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT __real@3df0000000000000
CONST	SEGMENT
__real@3df0000000000000 DQ 03df0000000000000r	; 2.32831e-010
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT profiler_getstats
_TEXT	SEGMENT
collect$ = 32
pObj$ = 80
noarg$ = 88
profiler_getstats PROC					; COMDAT

; 631  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00006	48 8b d9	 mov	 rbx, rcx

; 632  :     statscollector_t collect;
; 633  :     if (pending_exception(pObj))

  00009	e8 00 00 00 00	 call	 pending_exception
  0000e	85 c0		 test	 eax, eax

; 634  :         return NULL;

  00010	75 65		 jne	 SHORT $LN11@profiler_g

; 635  :     if (!pObj->externalTimer)

  00012	48 83 bb 80 00
	00 00 00	 cmp	 QWORD PTR [rbx+128], 0
  0001a	75 07		 jne	 SHORT $LN6@profiler_g

; 636  :         collect.factor = hpTimerUnit();

  0001c	e8 00 00 00 00	 call	 hpTimerUnit
  00021	eb 1a		 jmp	 SHORT $LN10@profiler_g
$LN6@profiler_g:

; 637  :     else if (pObj->externalTimerUnit > 0.0)

  00023	f2 0f 10 83 88
	00 00 00	 movsdx	 xmm0, QWORD PTR [rbx+136]
  0002b	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000

; 638  :         collect.factor = pObj->externalTimerUnit;
; 639  :     else

  00033	77 08		 ja	 SHORT $LN10@profiler_g

; 640  :         collect.factor = 1.0 / DOUBLE_TIMER_PRECISION;

  00035	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@3df0000000000000
$LN10@profiler_g:

; 641  :     collect.list = PyList_New(0);

  0003d	33 c9		 xor	 ecx, ecx
  0003f	f2 0f 11 44 24
	30		 movsdx	 QWORD PTR collect$[rsp+16], xmm0
  00045	e8 00 00 00 00	 call	 PyList_New
  0004a	48 89 44 24 20	 mov	 QWORD PTR collect$[rsp], rax

; 642  :     if (collect.list == NULL)

  0004f	48 85 c0	 test	 rax, rax

; 643  :         return NULL;

  00052	74 23		 je	 SHORT $LN11@profiler_g

; 644  :     if (RotatingTree_Enum(pObj->profilerEntries, statsForEntry, &collect)
; 645  :         != 0) {

  00054	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00058	4c 8d 44 24 20	 lea	 r8, QWORD PTR collect$[rsp]
  0005d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:statsForEntry
  00064	e8 00 00 00 00	 call	 RotatingTree_Enum
  00069	85 c0		 test	 eax, eax
  0006b	74 12		 je	 SHORT $LN1@profiler_g

; 646  :         Py_DECREF(collect.list);

  0006d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR collect$[rsp]
  00072	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@profiler_g:

; 647  :         return NULL;

  00077	33 c0		 xor	 eax, eax

; 650  : }

  00079	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0007d	5b		 pop	 rbx
  0007e	c3		 ret	 0
$LN1@profiler_g:

; 648  :     }
; 649  :     return collect.list;

  0007f	48 8b 44 24 20	 mov	 rax, QWORD PTR collect$[rsp]

; 650  : }

  00084	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00088	5b		 pop	 rbx
  00089	c3		 ret	 0
profiler_getstats ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT setSubcalls
_TEXT	SEGMENT
pObj$ = 8
nvalue$ = 16
setSubcalls PROC					; COMDAT

; 655  :     if (nvalue == 0)

  00000	85 d2		 test	 edx, edx
  00002	75 07		 jne	 SHORT $LN7@setSubcall

; 656  :         pObj->flags &= ~POF_SUBCALLS;

  00004	83 61 78 fd	 and	 DWORD PTR [rcx+120], -3

; 659  :     return 0;

  00008	33 c0		 xor	 eax, eax

; 660  : }

  0000a	c3		 ret	 0
$LN7@setSubcall:

; 657  :     else if (nvalue > 0)

  0000b	7e 04		 jle	 SHORT $LN6@setSubcall

; 658  :         pObj->flags |=  POF_SUBCALLS;

  0000d	83 49 78 02	 or	 DWORD PTR [rcx+120], 2
$LN6@setSubcall:

; 659  :     return 0;

  00011	33 c0		 xor	 eax, eax

; 660  : }

  00013	c3		 ret	 0
setSubcalls ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT setBuiltins
_TEXT	SEGMENT
pObj$ = 8
nvalue$ = 16
setBuiltins PROC					; COMDAT

; 665  :     if (nvalue == 0)

  00000	85 d2		 test	 edx, edx
  00002	75 07		 jne	 SHORT $LN7@setBuiltin

; 666  :         pObj->flags &= ~POF_BUILTINS;

  00004	83 61 78 fb	 and	 DWORD PTR [rcx+120], -5

; 669  :     }
; 670  :     return 0;

  00008	33 c0		 xor	 eax, eax

; 671  : }

  0000a	c3		 ret	 0
$LN7@setBuiltin:

; 667  :     else if (nvalue > 0) {

  0000b	7e 04		 jle	 SHORT $LN6@setBuiltin

; 668  :         pObj->flags |=  POF_BUILTINS;

  0000d	83 49 78 04	 or	 DWORD PTR [rcx+120], 4
$LN6@setBuiltin:

; 669  :     }
; 670  :     return 0;

  00011	33 c0		 xor	 eax, eax

; 671  : }

  00013	c3		 ret	 0
setBuiltins ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@CODFBIGM@?$HMii?3enable?$AA@		; `string'
EXTRN	PyEval_SetProfile:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$profiler_enable DD imagerel profiler_enable
	DD	imagerel profiler_enable+222
	DD	imagerel $unwind$profiler_enable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$profiler_enable DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT ??_C@_0L@CODFBIGM@?$HMii?3enable?$AA@
CONST	SEGMENT
??_C@_0L@CODFBIGM@?$HMii?3enable?$AA@ DB '|ii:enable', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_lsprof.c
CONST	ENDS
;	COMDAT profiler_enable
_TEXT	SEGMENT
builtins$ = 48
self$ = 80
args$ = 88
kwds$ = 96
subcalls$ = 104
profiler_enable PROC					; COMDAT

; 685  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00006	48 8b d9	 mov	 rbx, rcx
  00009	49 8b c0	 mov	 rax, r8
  0000c	4c 8b d2	 mov	 r10, rdx

; 686  :     int subcalls = -1;
; 687  :     int builtins = -1;
; 688  :     static char *kwlist[] = {"subcalls", "builtins", 0};
; 689  :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "|ii:enable",
; 690  :                                      kwlist, &subcalls, &builtins))

  0000f	48 8d 4c 24 30	 lea	 rcx, QWORD PTR builtins$[rsp]
  00014	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??profiler_enable@@9@9
  0001b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@CODFBIGM@?$HMii?3enable?$AA@
  00022	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00027	48 8d 4c 24 68	 lea	 rcx, QWORD PTR subcalls$[rsp]
  0002c	48 8b d0	 mov	 rdx, rax
  0002f	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00034	49 8b ca	 mov	 rcx, r10
  00037	c7 44 24 68 ff
	ff ff ff	 mov	 DWORD PTR subcalls$[rsp], -1
  0003f	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR builtins$[rsp], -1
  00047	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  0004c	85 c0		 test	 eax, eax

; 691  :         return NULL;

  0004e	0f 84 82 00 00
	00		 je	 $LN1@profiler_e

; 692  :     if (setSubcalls(self, subcalls) < 0 || setBuiltins(self, builtins) < 0)

  00054	8b 54 24 68	 mov	 edx, DWORD PTR subcalls$[rsp]
  00058	48 8b cb	 mov	 rcx, rbx
  0005b	e8 00 00 00 00	 call	 setSubcalls
  00060	85 c0		 test	 eax, eax
  00062	78 72		 js	 SHORT $LN1@profiler_e
  00064	8b 54 24 30	 mov	 edx, DWORD PTR builtins$[rsp]
  00068	e8 00 00 00 00	 call	 setBuiltins
  0006d	85 c0		 test	 eax, eax
  0006f	78 65		 js	 SHORT $LN1@profiler_e

; 694  :     PyEval_SetProfile(profiler_callback, (PyObject*)self);

  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:profiler_callback
  00078	48 8b d3	 mov	 rdx, rbx
  0007b	e8 00 00 00 00	 call	 PyEval_SetProfile

; 695  :     self->flags |= POF_ENABLED;

  00080	83 4b 78 01	 or	 DWORD PTR [rbx+120], 1

; 696  :     Py_INCREF(Py_None);

  00084	e8 00 00 00 00	 call	 _Py_PXCTX
  00089	85 c0		 test	 eax, eax
  0008b	75 3c		 jne	 SHORT $LN7@profiler_e
  0008d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00094	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0009b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000a2	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000a8	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000b0	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b5	85 c0		 test	 eax, eax
  000b7	75 09		 jne	 SHORT $LN6@profiler_e
  000b9	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  000c0	74 07		 je	 SHORT $LN7@profiler_e
$LN6@profiler_e:
  000c2	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN7@profiler_e:

; 697  :     return Py_None;

  000c9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 698  : }

  000d0	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000d4	5b		 pop	 rbx
  000d5	c3		 ret	 0
$LN1@profiler_e:

; 693  :         return NULL;

  000d6	33 c0		 xor	 eax, eax

; 698  : }

  000d8	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000dc	5b		 pop	 rbx
  000dd	c3		 ret	 0
profiler_enable ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$flush_unmatched DD imagerel flush_unmatched
	DD	imagerel flush_unmatched+16
	DD	imagerel $unwind$flush_unmatched
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$flush_unmatched DD imagerel flush_unmatched+16
	DD	imagerel flush_unmatched+87
	DD	imagerel $chain$0$flush_unmatched
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$flush_unmatched DD imagerel flush_unmatched+87
	DD	imagerel flush_unmatched+93
	DD	imagerel $chain$1$flush_unmatched
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$flush_unmatched DD 021H
	DD	imagerel flush_unmatched
	DD	imagerel flush_unmatched+16
	DD	imagerel $unwind$flush_unmatched
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$flush_unmatched DD 020521H
	DD	063405H
	DD	imagerel flush_unmatched
	DD	imagerel flush_unmatched+16
	DD	imagerel $unwind$flush_unmatched
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$flush_unmatched DD 020601H
	DD	070023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT flush_unmatched
_TEXT	SEGMENT
pObj$ = 48
flush_unmatched PROC					; COMDAT

; 702  : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 703  :     while (pObj->currentProfilerContext) {

  00006	48 83 79 68 00	 cmp	 QWORD PTR [rcx+104], 0
  0000b	48 8b f9	 mov	 rdi, rcx
  0000e	74 47		 je	 SHORT $LN4@flush_unma
  00010	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00015	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL5@flush_unma:

; 704  :         ProfilerContext *pContext = pObj->currentProfilerContext;

  00020	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]

; 705  :         ProfilerEntry *profEntry= pContext->ctxEntry;

  00024	4c 8b 43 18	 mov	 r8, QWORD PTR [rbx+24]

; 706  :         if (profEntry)

  00028	4d 85 c0	 test	 r8, r8
  0002b	74 0d		 je	 SHORT $LN3@flush_unma

; 707  :             Stop(pObj, pContext, profEntry);

  0002d	48 8b d3	 mov	 rdx, rbx
  00030	48 8b cf	 mov	 rcx, rdi
  00033	e8 00 00 00 00	 call	 Stop

; 708  :         else

  00038	eb 08		 jmp	 SHORT $LN2@flush_unma
$LN3@flush_unma:

; 709  :             pObj->currentProfilerContext = pContext->previous;

  0003a	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  0003e	48 89 47 68	 mov	 QWORD PTR [rdi+104], rax
$LN2@flush_unma:

; 710  :         if (pContext)
; 711  :             free(pContext);

  00042	48 8b cb	 mov	 rcx, rbx
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  0004b	48 83 7f 68 00	 cmp	 QWORD PTR [rdi+104], 0
  00050	75 ce		 jne	 SHORT $LL5@flush_unma
  00052	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
$LN4@flush_unma:

; 712  :     }
; 713  : 
; 714  : }

  00057	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005b	5f		 pop	 rdi
  0005c	c3		 ret	 0
flush_unmatched ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$profiler_disable DD imagerel profiler_disable
	DD	imagerel profiler_disable+132
	DD	imagerel $unwind$profiler_disable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$profiler_disable DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_lsprof.c
xdata	ENDS
;	COMDAT profiler_disable
_TEXT	SEGMENT
self$ = 64
noarg$ = 72
profiler_disable PROC					; COMDAT

; 724  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 725  :     self->flags &= ~POF_ENABLED;

  00006	83 61 78 fe	 and	 DWORD PTR [rcx+120], -2
  0000a	48 8b d9	 mov	 rbx, rcx

; 726  :     PyEval_SetProfile(NULL, NULL);

  0000d	33 d2		 xor	 edx, edx
  0000f	33 c9		 xor	 ecx, ecx
  00011	e8 00 00 00 00	 call	 PyEval_SetProfile

; 727  :     flush_unmatched(self);

  00016	48 8b cb	 mov	 rcx, rbx
  00019	e8 00 00 00 00	 call	 flush_unmatched

; 728  :     if (pending_exception(self))

  0001e	48 8b cb	 mov	 rcx, rbx
  00021	e8 00 00 00 00	 call	 pending_exception
  00026	85 c0		 test	 eax, eax
  00028	74 08		 je	 SHORT $LN1@profiler_d

; 729  :         return NULL;

  0002a	33 c0		 xor	 eax, eax

; 732  : }

  0002c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00030	5b		 pop	 rbx
  00031	c3		 ret	 0
$LN1@profiler_d:

; 730  :     Py_INCREF(Py_None);

  00032	e8 00 00 00 00	 call	 _Py_PXCTX
  00037	85 c0		 test	 eax, eax
  00039	75 3c		 jne	 SHORT $LN5@profiler_d
  0003b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00050	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00056	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0005e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00063	85 c0		 test	 eax, eax
  00065	75 09		 jne	 SHORT $LN4@profiler_d
  00067	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0006e	74 07		 je	 SHORT $LN5@profiler_d
$LN4@profiler_d:
  00070	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN5@profiler_d:

; 731  :     return Py_None;

  00077	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 732  : }

  0007e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00082	5b		 pop	 rbx
  00083	c3		 ret	 0
profiler_disable ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$profiler_clear DD imagerel profiler_clear
	DD	imagerel profiler_clear+105
	DD	imagerel $unwind$profiler_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$profiler_clear DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_lsprof.c
xdata	ENDS
;	COMDAT profiler_clear
_TEXT	SEGMENT
pObj$ = 64
noarg$ = 72
profiler_clear PROC					; COMDAT

; 742  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 743  :     clearEntries(pObj);

  00006	e8 00 00 00 00	 call	 clearEntries

; 744  :     Py_INCREF(Py_None);

  0000b	e8 00 00 00 00	 call	 _Py_PXCTX
  00010	85 c0		 test	 eax, eax
  00012	75 48		 jne	 SHORT $LN7@profiler_c@2
  00014	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00029	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0002f	4c 8b cb	 mov	 r9, rbx
  00032	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0003a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003f	85 c0		 test	 eax, eax
  00041	75 09		 jne	 SHORT $LN3@profiler_c@2
  00043	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0004a	74 07		 je	 SHORT $LN9@profiler_c@2
$LN3@profiler_c@2:
  0004c	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN9@profiler_c@2:

; 745  :     return Py_None;

  00053	48 8b c3	 mov	 rax, rbx

; 746  : }

  00056	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005a	5b		 pop	 rbx
  0005b	c3		 ret	 0
$LN7@profiler_c@2:

; 745  :     return Py_None;

  0005c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 746  : }

  00063	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00067	5b		 pop	 rbx
  00068	c3		 ret	 0
profiler_clear ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$profiler_dealloc DD imagerel profiler_dealloc
	DD	imagerel profiler_dealloc+181
	DD	imagerel $unwind$profiler_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$profiler_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_lsprof.c
xdata	ENDS
;	COMDAT profiler_dealloc
_TEXT	SEGMENT
op$ = 64
profiler_dealloc PROC					; COMDAT

; 750  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 751  :     if (op->flags & POF_ENABLED)

  0000a	f6 41 78 01	 test	 BYTE PTR [rcx+120], 1
  0000e	48 8b f9	 mov	 rdi, rcx
  00011	74 09		 je	 SHORT $LN5@profiler_d@2

; 752  :         PyEval_SetProfile(NULL, NULL);

  00013	33 d2		 xor	 edx, edx
  00015	33 c9		 xor	 ecx, ecx
  00017	e8 00 00 00 00	 call	 PyEval_SetProfile
$LN5@profiler_d@2:

; 753  :     flush_unmatched(op);

  0001c	48 8b cf	 mov	 rcx, rdi
  0001f	e8 00 00 00 00	 call	 flush_unmatched

; 754  :     clearEntries(op);

  00024	48 8b cf	 mov	 rcx, rdi
  00027	e8 00 00 00 00	 call	 clearEntries

; 755  :     Py_XDECREF(op->externalTimer);

  0002c	48 8b 9f 80 00
	00 00		 mov	 rbx, QWORD PTR [rdi+128]
  00033	48 85 db	 test	 rbx, rbx
  00036	74 65		 je	 SHORT $LN3@profiler_d@2
  00038	e8 00 00 00 00	 call	 _Py_PXCTX
  0003d	85 c0		 test	 eax, eax
  0003f	75 5c		 jne	 SHORT $LN3@profiler_d@2
  00041	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00045	a8 20		 test	 al, 32			; 00000020H
  00047	75 4c		 jne	 SHORT $LN12@profiler_d@2
  00049	84 c0		 test	 al, al
  0004b	78 48		 js	 SHORT $LN12@profiler_d@2
  0004d	a8 02		 test	 al, 2
  0004f	75 4c		 jne	 SHORT $LN3@profiler_d@2
  00051	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00055	75 46		 jne	 SHORT $LN3@profiler_d@2
  00057	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0005e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00065	4c 8b cb	 mov	 r9, rbx
  00068	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0006e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00076	e8 00 00 00 00	 call	 _PyParallel_Guard
  0007b	48 8b cb	 mov	 rcx, rbx
  0007e	85 c0		 test	 eax, eax
  00080	74 07		 je	 SHORT $LN17@profiler_d@2
  00082	e8 00 00 00 00	 call	 _Px_Dealloc
  00087	eb 14		 jmp	 SHORT $LN3@profiler_d@2
$LN17@profiler_d@2:
  00089	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0008d	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00093	eb 08		 jmp	 SHORT $LN3@profiler_d@2
$LN12@profiler_d@2:
  00095	48 8b cb	 mov	 rcx, rbx
  00098	e8 00 00 00 00	 call	 Px_DecRef
$LN3@profiler_d@2:

; 756  :     Py_TYPE(op)->tp_free(op);

  0009d	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000a1	48 8b cf	 mov	 rcx, rdi

; 757  : }

  000a4	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000a9	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ad	5f		 pop	 rdi
  000ae	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
profiler_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@NKOCNIKC@?$HMOdii?3Profiler?$AA@	; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$profiler_init DD imagerel profiler_init
	DD	imagerel profiler_init+156
	DD	imagerel $unwind$profiler_init
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$profiler_init DD imagerel profiler_init+156
	DD	imagerel profiler_init+259
	DD	imagerel $chain$1$profiler_init
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$profiler_init DD imagerel profiler_init+259
	DD	imagerel profiler_init+294
	DD	imagerel $chain$2$profiler_init
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$profiler_init DD imagerel profiler_init+294
	DD	imagerel profiler_init+303
	DD	imagerel $chain$3$profiler_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$profiler_init DD 021H
	DD	imagerel profiler_init
	DD	imagerel profiler_init+156
	DD	imagerel $unwind$profiler_init
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$profiler_init DD 020021H
	DD	0f6400H
	DD	imagerel profiler_init
	DD	imagerel profiler_init+156
	DD	imagerel $unwind$profiler_init
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$profiler_init DD 040f21H
	DD	0f640fH
	DD	0e3405H
	DD	imagerel profiler_init
	DD	imagerel profiler_init+156
	DD	imagerel $unwind$profiler_init
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$profiler_init DD 020801H
	DD	07004b208H
xdata	ENDS
;	COMDAT ??_C@_0P@NKOCNIKC@?$HMOdii?3Profiler?$AA@
CONST	SEGMENT
??_C@_0P@NKOCNIKC@?$HMOdii?3Profiler?$AA@ DB '|Odii:Profiler', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_lsprof.c
CONST	ENDS
;	COMDAT profiler_init
_TEXT	SEGMENT
builtins$ = 64
timer$ = 72
timeunit$ = 80
pObj$ = 112
args$ = 120
kw$ = 128
subcalls$ = 136
profiler_init PROC					; COMDAT

; 761  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	57		 push	 rdi
  00004	48 83 ec 60	 sub	 rsp, 96			; 00000060H

; 762  :     PyObject *o;
; 763  :     PyObject *timer = NULL;
; 764  :     double timeunit = 0.0;

  00008	66 0f 57 c0	 xorpd	 xmm0, xmm0
  0000c	48 8b f9	 mov	 rdi, rcx

; 765  :     int subcalls = 1;
; 766  :     int builtins = 1;
; 767  :     static char *kwlist[] = {"timer", "timeunit",
; 768  :                                    "subcalls", "builtins", 0};
; 769  : 
; 770  :     if (!PyArg_ParseTupleAndKeywords(args, kw, "|Odii:Profiler", kwlist,
; 771  :                                      &timer, &timeunit,
; 772  :                                      &subcalls, &builtins))

  0000f	49 8d 4b d8	 lea	 rcx, QWORD PTR [r11-40]
  00013	49 89 4b d0	 mov	 QWORD PTR [r11-48], rcx
  00017	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  0001b	49 8b c0	 mov	 rax, r8
  0001e	f2 0f 11 44 24
	50		 movsdx	 QWORD PTR timeunit$[rsp], xmm0
  00024	49 89 4b c8	 mov	 QWORD PTR [r11-56], rcx
  00028	49 8d 4b e8	 lea	 rcx, QWORD PTR [r11-24]
  0002c	4c 8b d2	 mov	 r10, rdx
  0002f	49 89 4b c0	 mov	 QWORD PTR [r11-64], rcx
  00033	49 8d 4b e0	 lea	 rcx, QWORD PTR [r11-32]
  00037	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??profiler_init@@9@9
  0003e	49 89 4b b8	 mov	 QWORD PTR [r11-72], rcx
  00042	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@NKOCNIKC@?$HMOdii?3Profiler?$AA@
  00049	48 8b d0	 mov	 rdx, rax
  0004c	49 8b ca	 mov	 rcx, r10
  0004f	49 c7 43 e0 00
	00 00 00	 mov	 QWORD PTR [r11-32], 0
  00057	41 c7 43 20 01
	00 00 00	 mov	 DWORD PTR [r11+32], 1
  0005f	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR builtins$[rsp], 1
  00067	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  0006c	85 c0		 test	 eax, eax

; 773  :         return -1;

  0006e	0f 84 b2 00 00
	00		 je	 $LN9@profiler_i

; 774  : 
; 775  :     if (setSubcalls(pObj, subcalls) < 0 || setBuiltins(pObj, builtins) < 0)

  00074	8b 94 24 88 00
	00 00		 mov	 edx, DWORD PTR subcalls$[rsp]
  0007b	48 8b cf	 mov	 rcx, rdi
  0007e	e8 00 00 00 00	 call	 setSubcalls
  00083	85 c0		 test	 eax, eax
  00085	0f 88 9b 00 00
	00		 js	 $LN9@profiler_i
  0008b	8b 54 24 40	 mov	 edx, DWORD PTR builtins$[rsp]
  0008f	e8 00 00 00 00	 call	 setBuiltins
  00094	85 c0		 test	 eax, eax
  00096	0f 88 8a 00 00
	00		 js	 $LN9@profiler_i

; 777  :     o = pObj->externalTimer;
; 778  :     pObj->externalTimer = timer;

  0009c	48 89 5c 24 70	 mov	 QWORD PTR [rsp+112], rbx
  000a1	48 8b 5c 24 48	 mov	 rbx, QWORD PTR timer$[rsp]
  000a6	48 89 74 24 78	 mov	 QWORD PTR [rsp+120], rsi
  000ab	48 8b b7 80 00
	00 00		 mov	 rsi, QWORD PTR [rdi+128]
  000b2	48 89 9f 80 00
	00 00		 mov	 QWORD PTR [rdi+128], rbx

; 779  :     Py_XINCREF(timer);

  000b9	48 85 db	 test	 rbx, rbx
  000bc	74 3b		 je	 SHORT $LN7@profiler_i
  000be	e8 00 00 00 00	 call	 _Py_PXCTX
  000c3	85 c0		 test	 eax, eax
  000c5	75 32		 jne	 SHORT $LN7@profiler_i
  000c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000d5	4c 8b cb	 mov	 r9, rbx
  000d8	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000de	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000e6	e8 00 00 00 00	 call	 _PyParallel_Guard
  000eb	85 c0		 test	 eax, eax
  000ed	75 06		 jne	 SHORT $LN14@profiler_i
  000ef	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000f3	74 04		 je	 SHORT $LN7@profiler_i
$LN14@profiler_i:
  000f5	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN7@profiler_i:
  000f9	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]

; 780  :     Py_XDECREF(o);

  000fe	48 85 f6	 test	 rsi, rsi
  00101	74 08		 je	 SHORT $LN3@profiler_i
  00103	48 8b ce	 mov	 rcx, rsi
  00106	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@profiler_i:

; 781  :     pObj->externalTimerUnit = timeunit;

  0010b	f2 0f 10 44 24
	50		 movsdx	 xmm0, QWORD PTR timeunit$[rsp]
  00111	48 8b 74 24 78	 mov	 rsi, QWORD PTR [rsp+120]

; 782  :     return 0;

  00116	33 c0		 xor	 eax, eax
  00118	f2 0f 11 87 88
	00 00 00	 movsdx	 QWORD PTR [rdi+136], xmm0

; 783  : }

  00120	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00124	5f		 pop	 rdi
  00125	c3		 ret	 0
$LN9@profiler_i:

; 776  :         return -1;

  00126	83 c8 ff	 or	 eax, -1

; 783  : }

  00129	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0012d	5f		 pop	 rdi
  0012e	c3		 ret	 0
profiler_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@NMFAJMGG@profiler_subentry?$AA@	; `string'
PUBLIC	??_C@_0P@DFCNAOEL@profiler_entry?$AA@		; `string'
PUBLIC	??_C@_08JAEFKDLJ@Profiler?$AA@			; `string'
PUBLIC	PyInit__lsprof
EXTRN	PyTuple_New:PROC
EXTRN	PyModule_AddObject:PROC
EXTRN	PyStructSequence_InitType:PROC
EXTRN	PyDict_SetItemString:PROC
EXTRN	PyType_Ready:PROC
EXTRN	PyModule_GetDict:PROC
EXTRN	PyModule_Create2:PROC
_BSS	SEGMENT
initialized DD	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyInit__lsprof DD imagerel $LN15
	DD	imagerel $LN15+40
	DD	imagerel $unwind$PyInit__lsprof
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyInit__lsprof DD imagerel $LN15+40
	DD	imagerel $LN15+82
	DD	imagerel $chain$0$PyInit__lsprof
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyInit__lsprof DD imagerel $LN15+82
	DD	imagerel $LN15+371
	DD	imagerel $chain$2$PyInit__lsprof
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyInit__lsprof DD 020021H
	DD	087400H
	DD	imagerel $LN15
	DD	imagerel $LN15+40
	DD	imagerel $unwind$PyInit__lsprof
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyInit__lsprof DD 020521H
	DD	087405H
	DD	imagerel $LN15
	DD	imagerel $LN15+40
	DD	imagerel $unwind$PyInit__lsprof
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit__lsprof DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0BC@NMFAJMGG@profiler_subentry?$AA@
CONST	SEGMENT
??_C@_0BC@NMFAJMGG@profiler_subentry?$AA@ DB 'profiler_subentry', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DFCNAOEL@profiler_entry?$AA@
CONST	SEGMENT
??_C@_0P@DFCNAOEL@profiler_entry?$AA@ DB 'profiler_entry', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08JAEFKDLJ@Profiler?$AA@
CONST	SEGMENT
??_C@_08JAEFKDLJ@Profiler?$AA@ DB 'Profiler', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_lsprof.c
CONST	ENDS
;	COMDAT PyInit__lsprof
_TEXT	SEGMENT
PyInit__lsprof PROC					; COMDAT

; 868  : {

$LN15:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 869  :     PyObject *module, *d;
; 870  :     module = PyModule_Create(&_lsprofmodule);

  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_lsprofmodule
  0000d	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00012	e8 00 00 00 00	 call	 PyModule_Create2
  00017	48 8b d8	 mov	 rbx, rax

; 871  :     if (module == NULL)

  0001a	48 85 c0	 test	 rax, rax
  0001d	75 06		 jne	 SHORT $LN3@PyInit__ls

; 893  : }

  0001f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00023	5b		 pop	 rbx
  00024	c3		 ret	 0
$LN3@PyInit__ls:

; 872  :         return NULL;
; 873  :     d = PyModule_GetDict(module);

  00025	48 8b c8	 mov	 rcx, rax
  00028	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  0002d	e8 00 00 00 00	 call	 PyModule_GetDict

; 874  :     if (PyType_Ready(&PyProfiler_Type) < 0)

  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyProfiler_Type
  00039	48 8b f8	 mov	 rdi, rax
  0003c	e8 00 00 00 00	 call	 PyType_Ready
  00041	85 c0		 test	 eax, eax
  00043	79 0d		 jns	 SHORT $LN2@PyInit__ls

; 875  :         return NULL;

  00045	33 c0		 xor	 eax, eax
  00047	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 893  : }

  0004c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00050	5b		 pop	 rbx
  00051	c3		 ret	 0
$LN2@PyInit__ls:

; 876  :     PyDict_SetItemString(d, "Profiler", (PyObject *)&PyProfiler_Type);

  00052	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyProfiler_Type
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08JAEFKDLJ@Profiler?$AA@
  00060	48 8b cf	 mov	 rcx, rdi
  00063	e8 00 00 00 00	 call	 PyDict_SetItemString

; 877  : 
; 878  :     if (!initialized) {

  00068	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR initialized, 0
  0006f	75 26		 jne	 SHORT $LN1@PyInit__ls

; 879  :         PyStructSequence_InitType(&StatsEntryType,
; 880  :                                   &profiler_entry_desc);

  00071	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:profiler_entry_desc
  00078	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:StatsEntryType
  0007f	e8 00 00 00 00	 call	 PyStructSequence_InitType

; 881  :         PyStructSequence_InitType(&StatsSubEntryType,
; 882  :                                   &profiler_subentry_desc);

  00084	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:profiler_subentry_desc
  0008b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:StatsSubEntryType
  00092	e8 00 00 00 00	 call	 PyStructSequence_InitType
$LN1@PyInit__ls:

; 883  :     }
; 884  :     Py_INCREF((PyObject*) &StatsEntryType);

  00097	e8 00 00 00 00	 call	 _Py_PXCTX
  0009c	85 c0		 test	 eax, eax
  0009e	75 3c		 jne	 SHORT $LN7@PyInit__ls
  000a0	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:StatsEntryType
  000a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000b5	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000bb	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000c3	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c8	85 c0		 test	 eax, eax
  000ca	75 09		 jne	 SHORT $LN6@PyInit__ls
  000cc	f6 05 20 00 00
	00 20		 test	 BYTE PTR StatsEntryType+32, 32 ; 00000020H
  000d3	74 07		 je	 SHORT $LN7@PyInit__ls
$LN6@PyInit__ls:
  000d5	48 ff 05 50 00
	00 00		 inc	 QWORD PTR StatsEntryType+80
$LN7@PyInit__ls:

; 885  :     Py_INCREF((PyObject*) &StatsSubEntryType);

  000dc	e8 00 00 00 00	 call	 _Py_PXCTX
  000e1	85 c0		 test	 eax, eax
  000e3	75 3c		 jne	 SHORT $LN11@PyInit__ls
  000e5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:StatsSubEntryType
  000ec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000fa	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00100	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00108	e8 00 00 00 00	 call	 _PyParallel_Guard
  0010d	85 c0		 test	 eax, eax
  0010f	75 09		 jne	 SHORT $LN10@PyInit__ls
  00111	f6 05 20 00 00
	00 20		 test	 BYTE PTR StatsSubEntryType+32, 32 ; 00000020H
  00118	74 07		 je	 SHORT $LN11@PyInit__ls
$LN10@PyInit__ls:
  0011a	48 ff 05 50 00
	00 00		 inc	 QWORD PTR StatsSubEntryType+80
$LN11@PyInit__ls:

; 886  :     PyModule_AddObject(module, "profiler_entry",
; 887  :                        (PyObject*) &StatsEntryType);

  00121	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:StatsEntryType
  00128	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@DFCNAOEL@profiler_entry?$AA@
  0012f	48 8b cb	 mov	 rcx, rbx
  00132	e8 00 00 00 00	 call	 PyModule_AddObject

; 888  :     PyModule_AddObject(module, "profiler_subentry",
; 889  :                        (PyObject*) &StatsSubEntryType);

  00137	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:StatsSubEntryType
  0013e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@NMFAJMGG@profiler_subentry?$AA@
  00145	48 8b cb	 mov	 rcx, rbx
  00148	e8 00 00 00 00	 call	 PyModule_AddObject

; 890  :     empty_tuple = PyTuple_New(0);

  0014d	33 c9		 xor	 ecx, ecx
  0014f	e8 00 00 00 00	 call	 PyTuple_New
  00154	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 891  :     initialized = 1;

  00159	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR initialized, 1
  00163	48 89 05 00 00
	00 00		 mov	 QWORD PTR empty_tuple, rax

; 892  :     return module;

  0016a	48 8b c3	 mov	 rax, rbx

; 893  : }

  0016d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00171	5b		 pop	 rbx
  00172	c3		 ret	 0
PyInit__lsprof ENDP
_TEXT	ENDS
END
