; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_08EMBNBNLN@property?$AA@			; `string'
PUBLIC	??_C@_0BF@LPKCECDC@__isabstractmethod__?$AA@	; `string'
PUBLIC	??_C@_03GHKEPEMO@doc?$AA@			; `string'
PUBLIC	??_C@_07IOFOPPPN@deleter?$AA@			; `string'
PUBLIC	??_C@_06FMDABHKF@setter?$AA@			; `string'
PUBLIC	??_C@_06MPKBKPHI@getter?$AA@			; `string'
PUBLIC	??_C@_04BMLPMHDL@fdel?$AA@			; `string'
PUBLIC	??_C@_04FDGKDAEE@fset?$AA@			; `string'
PUBLIC	??_C@_04IMBBPAIM@fget?$AA@			; `string'
PUBLIC	??_C@_0P@HNNNFCMP@method?9wrapper?$AA@		; `string'
PUBLIC	??_C@_08KFOOMKEG@__self__?$AA@			; `string'
PUBLIC	??_C@_0N@DGBCKBCA@mappingproxy?$AA@		; `string'
PUBLIC	??_C@_07CANJJMGA@mapping?$AA@			; `string'
PUBLIC	??_C@_0CA@HBGKPNPI@D?4copy?$CI?$CJ?5?9?$DO?5a?5shallow?5copy?5of?5D?$AA@ ; `string'
PUBLIC	??_C@_0DJ@ECJIPPMK@D?4items?$CI?$CJ?5?9?$DO?5list?5of?5D?8s?5?$CIkey?0?5v@ ; `string'
PUBLIC	??_C@_0CB@OLGABDBL@D?4values?$CI?$CJ?5?9?$DO?5list?5of?5D?8s?5values@ ; `string'
PUBLIC	??_C@_0BN@CLLBPHEO@D?4keys?$CI?$CJ?5?9?$DO?5list?5of?5D?8s?5keys?$AA@ ; `string'
PUBLIC	??_C@_0DN@OBDGOCKE@D?4get?$CIk?$FL?0d?$FN?$CJ?5?9?$DO?5D?$FLk?$FN?5if?5k?5in?5D?0?5@ ; `string'
PUBLIC	??_C@_04COAGEIMF@copy?$AA@			; `string'
PUBLIC	??_C@_05CFHBDDLG@items?$AA@			; `string'
PUBLIC	??_C@_06GEKOPAHD@values?$AA@			; `string'
PUBLIC	??_C@_04IEPFDAGF@keys?$AA@			; `string'
PUBLIC	??_C@_03HNAFFKGA@get?$AA@			; `string'
PUBLIC	??_C@_0BD@DNHDFGBD@wrapper_descriptor?$AA@	; `string'
PUBLIC	??_C@_0BC@GOGIJJFP@getset_descriptor?$AA@	; `string'
PUBLIC	??_C@_0BC@BKMNPHOK@member_descriptor?$AA@	; `string'
PUBLIC	??_C@_0BH@EAJAAGC@classmethod_descriptor?$AA@	; `string'
PUBLIC	??_C@_0BC@IAELBJCA@method_descriptor?$AA@	; `string'
PUBLIC	??_C@_07DIBBIFIJ@__doc__?$AA@			; `string'
PUBLIC	??_C@_08BHKDPDAA@__name__?$AA@			; `string'
PUBLIC	??_C@_0N@DAMMDIA@__objclass__?$AA@		; `string'
PUBLIC	??_C@_0N@FMLGAKCE@__qualname__?$AA@		; `string'
PUBLIC	PyMethodDescr_Type
PUBLIC	PyClassMethodDescr_Type
PUBLIC	PyMemberDescr_Type
PUBLIC	PyGetSetDescr_Type
PUBLIC	PyWrapperDescr_Type
PUBLIC	PyDictProxy_Type
PUBLIC	_PyMethodWrapper_Type
PUBLIC	PyProperty_Type
EXTRN	PyObject_GC_Del:PROC
EXTRN	PyType_GenericNew:PROC
EXTRN	PyType_GenericAlloc:PROC
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
;	COMDAT ??_C@_08EMBNBNLN@property?$AA@
CONST	SEGMENT
??_C@_08EMBNBNLN@property?$AA@ DB 'property', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LPKCECDC@__isabstractmethod__?$AA@
CONST	SEGMENT
??_C@_0BF@LPKCECDC@__isabstractmethod__?$AA@ DB '__isabstractmethod__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03GHKEPEMO@doc?$AA@
CONST	SEGMENT
??_C@_03GHKEPEMO@doc?$AA@ DB 'doc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07IOFOPPPN@deleter?$AA@
CONST	SEGMENT
??_C@_07IOFOPPPN@deleter?$AA@ DB 'deleter', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FMDABHKF@setter?$AA@
CONST	SEGMENT
??_C@_06FMDABHKF@setter?$AA@ DB 'setter', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MPKBKPHI@getter?$AA@
CONST	SEGMENT
??_C@_06MPKBKPHI@getter?$AA@ DB 'getter', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BMLPMHDL@fdel?$AA@
CONST	SEGMENT
??_C@_04BMLPMHDL@fdel?$AA@ DB 'fdel', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FDGKDAEE@fset?$AA@
CONST	SEGMENT
??_C@_04FDGKDAEE@fset?$AA@ DB 'fset', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IMBBPAIM@fget?$AA@
CONST	SEGMENT
??_C@_04IMBBPAIM@fget?$AA@ DB 'fget', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HNNNFCMP@method?9wrapper?$AA@
CONST	SEGMENT
??_C@_0P@HNNNFCMP@method?9wrapper?$AA@ DB 'method-wrapper', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08KFOOMKEG@__self__?$AA@
CONST	SEGMENT
??_C@_08KFOOMKEG@__self__?$AA@ DB '__self__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DGBCKBCA@mappingproxy?$AA@
CONST	SEGMENT
??_C@_0N@DGBCKBCA@mappingproxy?$AA@ DB 'mappingproxy', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07CANJJMGA@mapping?$AA@
CONST	SEGMENT
??_C@_07CANJJMGA@mapping?$AA@ DB 'mapping', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HBGKPNPI@D?4copy?$CI?$CJ?5?9?$DO?5a?5shallow?5copy?5of?5D?$AA@
CONST	SEGMENT
??_C@_0CA@HBGKPNPI@D?4copy?$CI?$CJ?5?9?$DO?5a?5shallow?5copy?5of?5D?$AA@ DB 'D'
	DB	'.copy() -> a shallow copy of D', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@ECJIPPMK@D?4items?$CI?$CJ?5?9?$DO?5list?5of?5D?8s?5?$CIkey?0?5v@
CONST	SEGMENT
??_C@_0DJ@ECJIPPMK@D?4items?$CI?$CJ?5?9?$DO?5list?5of?5D?8s?5?$CIkey?0?5v@ DB 'D'
	DB	'.items() -> list of D''s (key, value) pairs, as 2-tuples', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@OLGABDBL@D?4values?$CI?$CJ?5?9?$DO?5list?5of?5D?8s?5values@
CONST	SEGMENT
??_C@_0CB@OLGABDBL@D?4values?$CI?$CJ?5?9?$DO?5list?5of?5D?8s?5values@ DB 'D'
	DB	'.values() -> list of D''s values', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CLLBPHEO@D?4keys?$CI?$CJ?5?9?$DO?5list?5of?5D?8s?5keys?$AA@
CONST	SEGMENT
??_C@_0BN@CLLBPHEO@D?4keys?$CI?$CJ?5?9?$DO?5list?5of?5D?8s?5keys?$AA@ DB 'D'
	DB	'.keys() -> list of D''s keys', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@OBDGOCKE@D?4get?$CIk?$FL?0d?$FN?$CJ?5?9?$DO?5D?$FLk?$FN?5if?5k?5in?5D?0?5@
CONST	SEGMENT
??_C@_0DN@OBDGOCKE@D?4get?$CIk?$FL?0d?$FN?$CJ?5?9?$DO?5D?$FLk?$FN?5if?5k?5in?5D?0?5@ DB 'D'
	DB	'.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04COAGEIMF@copy?$AA@
CONST	SEGMENT
??_C@_04COAGEIMF@copy?$AA@ DB 'copy', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CFHBDDLG@items?$AA@
CONST	SEGMENT
??_C@_05CFHBDDLG@items?$AA@ DB 'items', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GEKOPAHD@values?$AA@
CONST	SEGMENT
??_C@_06GEKOPAHD@values?$AA@ DB 'values', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IEPFDAGF@keys?$AA@
CONST	SEGMENT
??_C@_04IEPFDAGF@keys?$AA@ DB 'keys', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03HNAFFKGA@get?$AA@
CONST	SEGMENT
??_C@_03HNAFFKGA@get?$AA@ DB 'get', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DNHDFGBD@wrapper_descriptor?$AA@
CONST	SEGMENT
??_C@_0BD@DNHDFGBD@wrapper_descriptor?$AA@ DB 'wrapper_descriptor', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GOGIJJFP@getset_descriptor?$AA@
CONST	SEGMENT
??_C@_0BC@GOGIJJFP@getset_descriptor?$AA@ DB 'getset_descriptor', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BKMNPHOK@member_descriptor?$AA@
CONST	SEGMENT
??_C@_0BC@BKMNPHOK@member_descriptor?$AA@ DB 'member_descriptor', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EAJAAGC@classmethod_descriptor?$AA@
CONST	SEGMENT
??_C@_0BH@EAJAAGC@classmethod_descriptor?$AA@ DB 'classmethod_descriptor', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IAELBJCA@method_descriptor?$AA@
CONST	SEGMENT
??_C@_0BC@IAELBJCA@method_descriptor?$AA@ DB 'method_descriptor', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DIBBIFIJ@__doc__?$AA@
CONST	SEGMENT
??_C@_07DIBBIFIJ@__doc__?$AA@ DB '__doc__', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
descr_members DQ FLAT:??_C@_0N@DAMMDIA@__objclass__?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08BHKDPDAA@__name__?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000068H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
mappingproxy_as_mapping DQ FLAT:mappingproxy_len
	DQ	FLAT:mappingproxy_getitem
	DQ	0000000000000000H
method_getset DQ FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
	DQ	FLAT:method_get_doc
	ORG $+24
	DQ	FLAT:??_C@_0N@FMLGAKCE@__qualname__?$AA@
	DQ	FLAT:descr_get_qualname
	ORG $+24
	DQ	0000000000000000H
	ORG $+32
?kwlist@?1??property_init@@9@9 DQ FLAT:??_C@_04IMBBPAIM@fget?$AA@ ; `property_init'::`2'::kwlist
	DQ	FLAT:??_C@_04FDGKDAEE@fset?$AA@
	DQ	FLAT:??_C@_04BMLPMHDL@fdel?$AA@
	DQ	FLAT:??_C@_03GHKEPEMO@doc?$AA@
	DQ	0000000000000000H
member_getset DQ FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
	DQ	FLAT:member_get_doc
	ORG $+24
	DQ	FLAT:??_C@_0N@FMLGAKCE@__qualname__?$AA@
	DQ	FLAT:descr_get_qualname
	ORG $+24
	DQ	0000000000000000H
	ORG $+32
	ORG $+8
getset_getset DQ FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
	DQ	FLAT:getset_get_doc
	ORG $+24
	DQ	FLAT:??_C@_0N@FMLGAKCE@__qualname__?$AA@
	DQ	FLAT:descr_get_qualname
	ORG $+24
	DQ	0000000000000000H
	ORG $+32
	ORG $+8
wrapperdescr_getset DQ FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
	DQ	FLAT:wrapperdescr_get_doc
	ORG $+24
	DQ	FLAT:??_C@_0N@FMLGAKCE@__qualname__?$AA@
	DQ	FLAT:descr_get_qualname
	ORG $+24
	DQ	0000000000000000H
	ORG $+32
	ORG $+8
PyMethodDescr_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BC@IAELBJCA@method_descriptor?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:descr_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:method_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:methoddescr_call
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:descr_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:descr_members
	DQ	FLAT:method_getset
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:method_get
	DQ	0000000000000000H
	ORG $+104
PyClassMethodDescr_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BH@EAJAAGC@classmethod_descriptor?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:descr_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:method_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:classmethoddescr_call
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:descr_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:descr_members
	DQ	FLAT:method_getset
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:classmethod_get
	DQ	0000000000000000H
	ORG $+104
PyMemberDescr_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BC@BKMNPHOK@member_descriptor?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:descr_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:member_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:descr_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:descr_members
	DQ	FLAT:member_getset
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:member_get
	DQ	FLAT:member_set
	ORG $+104
PyGetSetDescr_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BC@GOGIJJFP@getset_descriptor?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:descr_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:getset_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:descr_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:descr_members
	DQ	FLAT:getset_getset
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:getset_get
	DQ	FLAT:getset_set
	ORG $+104
PyWrapperDescr_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BD@DNHDFGBD@wrapper_descriptor?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:descr_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:wrapperdescr_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:wrapperdescr_call
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:descr_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:descr_members
	DQ	FLAT:wrapperdescr_getset
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:wrapperdescr_get
	DQ	0000000000000000H
	ORG $+104
mappingproxy_as_sequence DQ 0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:mappingproxy_contains
	DQ	0000000000000000H
	DQ	0000000000000000H
mappingproxy_methods DQ FLAT:??_C@_03HNAFFKGA@get?$AA@
	DQ	FLAT:mappingproxy_get
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0DN@OBDGOCKE@D?4get?$CIk?$FL?0d?$FN?$CJ?5?9?$DO?5D?$FLk?$FN?5if?5k?5in?5D?0?5@
	DQ	FLAT:??_C@_04IEPFDAGF@keys?$AA@
	DQ	FLAT:mappingproxy_keys
	DD	04H
	ORG $+4
	DQ	FLAT:??_C@_0BN@CLLBPHEO@D?4keys?$CI?$CJ?5?9?$DO?5list?5of?5D?8s?5keys?$AA@
	DQ	FLAT:??_C@_06GEKOPAHD@values?$AA@
	DQ	FLAT:mappingproxy_values
	DD	04H
	ORG $+4
	DQ	FLAT:??_C@_0CB@OLGABDBL@D?4values?$CI?$CJ?5?9?$DO?5list?5of?5D?8s?5values@
	DQ	FLAT:??_C@_05CFHBDDLG@items?$AA@
	DQ	FLAT:mappingproxy_items
	DD	04H
	ORG $+4
	DQ	FLAT:??_C@_0DJ@ECJIPPMK@D?4items?$CI?$CJ?5?9?$DO?5list?5of?5D?8s?5?$CIkey?0?5v@
	DQ	FLAT:??_C@_04COAGEIMF@copy?$AA@
	DQ	FLAT:mappingproxy_copy
	DD	04H
	ORG $+4
	DQ	FLAT:??_C@_0CA@HBGKPNPI@D?4copy?$CI?$CJ?5?9?$DO?5a?5shallow?5copy?5of?5D?$AA@
	DQ	0000000000000000H
	ORG $+24
?kwlist@?1??mappingproxy_new@@9@9 DQ FLAT:??_C@_07CANJJMGA@mapping?$AA@ ; `mappingproxy_new'::`2'::kwlist
	DQ	0000000000000000H
PyDictProxy_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0N@DGBCKBCA@mappingproxy?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:mappingproxy_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:mappingproxy_repr
	DQ	0000000000000000H
	DQ	FLAT:mappingproxy_as_sequence
	DQ	FLAT:mappingproxy_as_mapping
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:mappingproxy_str
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:mappingproxy_traverse
	DQ	0000000000000000H
	DQ	FLAT:mappingproxy_richcompare
	DQ	0000000000000000H
	DQ	FLAT:mappingproxy_getiter
	DQ	0000000000000000H
	DQ	FLAT:mappingproxy_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:mappingproxy_new
	ORG $+72
wrapper_members DQ FLAT:??_C@_08KFOOMKEG@__self__?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000068H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
wrapper_getsets DQ FLAT:??_C@_0N@DAMMDIA@__objclass__?$AA@
	DQ	FLAT:wrapper_objclass
	ORG $+24
	DQ	FLAT:??_C@_08BHKDPDAA@__name__?$AA@
	DQ	FLAT:wrapper_name
	ORG $+24
	DQ	FLAT:??_C@_0N@FMLGAKCE@__qualname__?$AA@
	DQ	FLAT:wrapper_qualname
	ORG $+24
	DQ	FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
	DQ	FLAT:wrapper_doc
	ORG $+24
	DQ	0000000000000000H
	ORG $+32
	ORG $+8
_PyMethodWrapper_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0P@HNNNFCMP@method?9wrapper?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:wrapper_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:wrapper_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:wrapper_hash
	DQ	FLAT:wrapper_call
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:wrapper_traverse
	DQ	0000000000000000H
	DQ	FLAT:wrapper_richcompare
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:wrapper_members
	DQ	FLAT:wrapper_getsets
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+104
property_members DQ FLAT:??_C@_04IMBBPAIM@fget?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04FDGKDAEE@fset?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000068H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04BMLPMHDL@fdel?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000070H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000078H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
getter_doc DB	'Descriptor to change the getter on a property.', 00H
	ORG $+1
setter_doc DB	'Descriptor to change the setter on a property.', 00H
	ORG $+1
deleter_doc DB	'Descriptor to change the deleter on a property.', 00H
	ORG $+8
property_methods DQ FLAT:??_C@_06MPKBKPHI@getter?$AA@
	DQ	FLAT:property_getter
	DD	08H
	ORG $+4
	DQ	FLAT:getter_doc
	DQ	FLAT:??_C@_06FMDABHKF@setter?$AA@
	DQ	FLAT:property_setter
	DD	08H
	ORG $+4
	DQ	FLAT:setter_doc
	DQ	FLAT:??_C@_07IOFOPPPN@deleter?$AA@
	DQ	FLAT:property_deleter
	DD	08H
	ORG $+4
	DQ	FLAT:deleter_doc
	DQ	0000000000000000H
	ORG $+24
property_getsetlist DQ FLAT:??_C@_0BF@LPKCECDC@__isabstractmethod__?$AA@
	DQ	FLAT:property_get___isabstractmethod__
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+32
property_doc DB	'property(fget=None, fset=None, fdel=None, doc=None) -> p'
	DB	'roperty attribute', 0aH, 0aH, 'fget is a function to be used '
	DB	'for getting an attribute value, and likewise', 0aH, 'fset is '
	DB	'a function for setting, and fdel a function for del''ing, an', 0aH
	DB	'attribute.  Typical use is to define a managed attribute x:', 0aH
	DB	0aH, 'class C(object):', 0aH, '    def getx(self): return self'
	DB	'._x', 0aH, '    def setx(self, value): self._x = value', 0aH, ' '
	DB	'   def delx(self): del self._x', 0aH, '    x = property(getx,'
	DB	' setx, delx, "I''m the ''x'' property.")', 0aH, 0aH, 'Decorat'
	DB	'ors make defining new properties or modifying existing ones e'
	DB	'asy:', 0aH, 0aH, 'class C(object):', 0aH, '    @property', 0aH
	DB	'    def x(self):', 0aH, '        "I am the ''x'' property."', 0aH
	DB	'        return self._x', 0aH, '    @x.setter', 0aH, '    def '
	DB	'x(self, value):', 0aH, '        self._x = value', 0aH, '    @'
	DB	'x.deleter', 0aH, '    def x(self):', 0aH, '        del self._'
	DB	'x', 0aH, 00H
	ORG $+8
PyProperty_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_08EMBNBNLN@property?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:property_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:property_doc
	DQ	FLAT:property_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:property_methods
	DQ	FLAT:property_members
	DQ	FLAT:property_getsetlist
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:property_descr_get
	DQ	FLAT:property_descr_set
	DQ	0000000000000000H
	DQ	FLAT:property_init
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:PyType_GenericNew
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
_DATA	ENDS
;	COMDAT ??_C@_08BHKDPDAA@__name__?$AA@
CONST	SEGMENT
??_C@_08BHKDPDAA@__name__?$AA@ DB '__name__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DAMMDIA@__objclass__?$AA@
CONST	SEGMENT
??_C@_0N@DAMMDIA@__objclass__?$AA@ DB '__objclass__', 00H ; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId___doc__@?6??property_init@@9@9 DQ 0000000000000000H ; `property_init'::`7'::PyId___doc__
	DQ	FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
	DQ	0000000000000000H
?PyId_copy@?1??mappingproxy_copy@@9@9 DQ 0000000000000000H ; `mappingproxy_copy'::`2'::PyId_copy
	DQ	FLAT:??_C@_04COAGEIMF@copy?$AA@
	DQ	0000000000000000H
?PyId_items@?1??mappingproxy_items@@9@9 DQ 0000000000000000H ; `mappingproxy_items'::`2'::PyId_items
	DQ	FLAT:??_C@_05CFHBDDLG@items?$AA@
	DQ	0000000000000000H
?PyId_values@?1??mappingproxy_values@@9@9 DQ 0000000000000000H ; `mappingproxy_values'::`2'::PyId_values
	DQ	FLAT:??_C@_06GEKOPAHD@values?$AA@
	DQ	0000000000000000H
?PyId_keys@?1??mappingproxy_keys@@9@9 DQ 0000000000000000H ; `mappingproxy_keys'::`2'::PyId_keys
	DQ	FLAT:??_C@_04IEPFDAGF@keys?$AA@
	DQ	0000000000000000H
?PyId_get@?1??mappingproxy_get@@9@9 DQ 0000000000000000H ; `mappingproxy_get'::`2'::PyId_get
	DQ	FLAT:??_C@_03HNAFFKGA@get?$AA@
	DQ	0000000000000000H
?PyId___qualname__@?1??calculate_qualname@@9@9 DQ 0000000000000000H ; `calculate_qualname'::`2'::PyId___qualname__
	DQ	FLAT:??_C@_0N@FMLGAKCE@__qualname__?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_0N@FMLGAKCE@__qualname__?$AA@
CONST	SEGMENT
??_C@_0N@FMLGAKCE@__qualname__?$AA@ DB '__qualname__', 00H ; `string'
CONST	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@DLCOAAK@descr_dealloc?$AA@		; `string'
PUBLIC	??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$descr_dealloc DD imagerel descr_dealloc
	DD	imagerel descr_dealloc+519
	DD	imagerel $unwind$descr_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$descr_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0O@DLCOAAK@descr_dealloc?$AA@
CONST	SEGMENT
??_C@_0O@DLCOAAK@descr_dealloc?$AA@ DB 'descr_dealloc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
CONST	SEGMENT
??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@ DB '..\Objects\desc'
	DB	'robject.c', 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\descrobject.c
CONST	ENDS
;	COMDAT descr_dealloc
_TEXT	SEGMENT
descr$ = 64
descr_dealloc PROC					; COMDAT

; 8    : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 9    :     _PyObject_GC_UNTRACK(descr);

  0000d	4c 8b c9	 mov	 r9, rcx
  00010	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@DLCOAAK@descr_dealloc?$AA@
  0001e	41 b8 09 00 00
	00		 mov	 r8d, 9
  00024	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0002c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00031	85 c0		 test	 eax, eax
  00033	75 52		 jne	 SHORT $LN13@descr_deal
  00035	44 8d 40 09	 lea	 r8d, QWORD PTR [rax+9]
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@DLCOAAK@descr_dealloc?$AA@
  00047	4c 8b cf	 mov	 r9, rdi
  0004a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00052	e8 00 00 00 00	 call	 _PyParallel_Guard
  00057	85 c0		 test	 eax, eax
  00059	74 04		 je	 SHORT $LN19@descr_deal
  0005b	33 d2		 xor	 edx, edx
  0005d	eb 04		 jmp	 SHORT $LN20@descr_deal
$LN19@descr_deal:
  0005f	48 8d 57 e8	 lea	 rdx, QWORD PTR [rdi-24]
$LN20@descr_deal:
  00063	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00066	48 8b 4a 08	 mov	 rcx, QWORD PTR [rdx+8]
  0006a	48 c7 42 10 fe
	ff ff ff	 mov	 QWORD PTR [rdx+16], -2
  00072	48 89 01	 mov	 QWORD PTR [rcx], rax
  00075	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  00078	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  0007c	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00080	48 c7 02 00 00
	00 00		 mov	 QWORD PTR [rdx], 0
$LN13@descr_deal:

; 10   :     Py_XDECREF(descr->d_type);

  00087	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  0008b	48 85 db	 test	 rbx, rbx
  0008e	74 65		 je	 SHORT $LN11@descr_deal
  00090	e8 00 00 00 00	 call	 _Py_PXCTX
  00095	85 c0		 test	 eax, eax
  00097	75 5c		 jne	 SHORT $LN11@descr_deal
  00099	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0009d	a8 20		 test	 al, 32			; 00000020H
  0009f	75 4c		 jne	 SHORT $LN25@descr_deal
  000a1	84 c0		 test	 al, al
  000a3	78 48		 js	 SHORT $LN25@descr_deal
  000a5	a8 02		 test	 al, 2
  000a7	75 4c		 jne	 SHORT $LN11@descr_deal
  000a9	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000ad	75 46		 jne	 SHORT $LN11@descr_deal
  000af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000bd	4c 8b cb	 mov	 r9, rbx
  000c0	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000c6	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ce	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d3	48 8b cb	 mov	 rcx, rbx
  000d6	85 c0		 test	 eax, eax
  000d8	74 07		 je	 SHORT $LN30@descr_deal
  000da	e8 00 00 00 00	 call	 _Px_Dealloc
  000df	eb 14		 jmp	 SHORT $LN11@descr_deal
$LN30@descr_deal:
  000e1	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000e5	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000eb	eb 08		 jmp	 SHORT $LN11@descr_deal
$LN25@descr_deal:
  000ed	48 8b cb	 mov	 rcx, rbx
  000f0	e8 00 00 00 00	 call	 Px_DecRef
$LN11@descr_deal:

; 11   :     Py_XDECREF(descr->d_name);

  000f5	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  000f9	48 85 db	 test	 rbx, rbx
  000fc	74 65		 je	 SHORT $LN7@descr_deal
  000fe	e8 00 00 00 00	 call	 _Py_PXCTX
  00103	85 c0		 test	 eax, eax
  00105	75 5c		 jne	 SHORT $LN7@descr_deal
  00107	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0010b	a8 20		 test	 al, 32			; 00000020H
  0010d	75 4c		 jne	 SHORT $LN36@descr_deal
  0010f	84 c0		 test	 al, al
  00111	78 48		 js	 SHORT $LN36@descr_deal
  00113	a8 02		 test	 al, 2
  00115	75 4c		 jne	 SHORT $LN7@descr_deal
  00117	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0011b	75 46		 jne	 SHORT $LN7@descr_deal
  0011d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00124	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0012b	4c 8b cb	 mov	 r9, rbx
  0012e	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00134	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0013c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00141	48 8b cb	 mov	 rcx, rbx
  00144	85 c0		 test	 eax, eax
  00146	74 07		 je	 SHORT $LN41@descr_deal
  00148	e8 00 00 00 00	 call	 _Px_Dealloc
  0014d	eb 14		 jmp	 SHORT $LN7@descr_deal
$LN41@descr_deal:
  0014f	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00153	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00159	eb 08		 jmp	 SHORT $LN7@descr_deal
$LN36@descr_deal:
  0015b	48 8b cb	 mov	 rcx, rbx
  0015e	e8 00 00 00 00	 call	 Px_DecRef
$LN7@descr_deal:

; 12   :     Py_XDECREF(descr->d_qualname);

  00163	48 8b 5f 70	 mov	 rbx, QWORD PTR [rdi+112]
  00167	48 85 db	 test	 rbx, rbx
  0016a	0f 84 85 00 00
	00		 je	 $LN3@descr_deal
  00170	e8 00 00 00 00	 call	 _Py_PXCTX
  00175	85 c0		 test	 eax, eax
  00177	75 7c		 jne	 SHORT $LN3@descr_deal
  00179	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0017d	a8 20		 test	 al, 32			; 00000020H
  0017f	75 6c		 jne	 SHORT $LN47@descr_deal
  00181	84 c0		 test	 al, al
  00183	78 68		 js	 SHORT $LN47@descr_deal
  00185	a8 02		 test	 al, 2
  00187	75 6c		 jne	 SHORT $LN3@descr_deal
  00189	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0018d	75 66		 jne	 SHORT $LN3@descr_deal
  0018f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00196	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0019d	4c 8b cb	 mov	 r9, rbx
  001a0	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001a6	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001ae	e8 00 00 00 00	 call	 _PyParallel_Guard
  001b3	48 8b cb	 mov	 rcx, rbx
  001b6	85 c0		 test	 eax, eax
  001b8	74 17		 je	 SHORT $LN52@descr_deal
  001ba	e8 00 00 00 00	 call	 _Px_Dealloc

; 13   :     PyObject_GC_Del(descr);

  001bf	48 8b cf	 mov	 rcx, rdi

; 14   : }

  001c2	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  001c7	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001cb	5f		 pop	 rdi
  001cc	e9 00 00 00 00	 jmp	 PyObject_GC_Del

; 12   :     Py_XDECREF(descr->d_qualname);

$LN52@descr_deal:
  001d1	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001d5	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 13   :     PyObject_GC_Del(descr);

  001db	48 8b cf	 mov	 rcx, rdi

; 14   : }

  001de	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  001e3	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001e7	5f		 pop	 rdi
  001e8	e9 00 00 00 00	 jmp	 PyObject_GC_Del

; 12   :     Py_XDECREF(descr->d_qualname);

$LN47@descr_deal:
  001ed	48 8b cb	 mov	 rcx, rbx
  001f0	e8 00 00 00 00	 call	 Px_DecRef
$LN3@descr_deal:

; 13   :     PyObject_GC_Del(descr);

  001f5	48 8b cf	 mov	 rcx, rdi

; 14   : }

  001f8	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  001fd	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00201	5f		 pop	 rdi
  00202	e9 00 00 00 00	 jmp	 PyObject_GC_Del
descr_dealloc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT descr_name
_TEXT	SEGMENT
descr$ = 8
descr_name PROC						; COMDAT

; 19   :     if (descr->d_name != NULL && PyUnicode_Check(descr->d_name))

  00000	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]
  00004	48 85 c0	 test	 rax, rax
  00007	74 10		 je	 SHORT $LN1@descr_name
  00009	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0000d	f7 81 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rcx+256], 268435456 ; 10000000H

; 20   :         return descr->d_name;

  00017	75 02		 jne	 SHORT $LN2@descr_name
$LN1@descr_name:

; 21   :     return NULL;

  00019	33 c0		 xor	 eax, eax
$LN2@descr_name:

; 22   : }

  0001b	f3 c3		 fatret	 0
descr_name ENDP
_TEXT	ENDS
PUBLIC	??_C@_01OGPIMHDM@?$DP?$AA@			; `string'
EXTRN	PyUnicode_FromFormat:PROC
;	COMDAT ??_C@_01OGPIMHDM@?$DP?$AA@
CONST	SEGMENT
??_C@_01OGPIMHDM@?$DP?$AA@ DB '?', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT descr_repr
_TEXT	SEGMENT
descr$ = 8
format$ = 16
descr_repr PROC						; COMDAT

; 27   :     PyObject *name = NULL;
; 28   :     if (descr->d_name != NULL && PyUnicode_Check(descr->d_name))

  00000	4c 8b 41 68	 mov	 r8, QWORD PTR [rcx+104]
  00004	4c 8b d2	 mov	 r10, rdx
  00007	33 d2		 xor	 edx, edx
  00009	4d 85 c0	 test	 r8, r8
  0000c	74 12		 je	 SHORT $LN1@descr_repr
  0000e	49 8b 40 58	 mov	 rax, QWORD PTR [r8+88]
  00012	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  0001c	49 0f 45 d0	 cmovne	 rdx, r8
$LN1@descr_repr:

; 29   :         name = descr->d_name;
; 30   : 
; 31   :     return PyUnicode_FromFormat(format, name, "?", descr->d_type->tp_name);

  00020	4c 8b 49 60	 mov	 r9, QWORD PTR [rcx+96]
  00024	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  0002b	49 8b ca	 mov	 rcx, r10
  0002e	4d 8b 49 70	 mov	 r9, QWORD PTR [r9+112]

; 32   : }

  00032	e9 00 00 00 00	 jmp	 PyUnicode_FromFormat
descr_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@JKCKFNOA@?$DMmethod?5?8?$CFV?8?5of?5?8?$CFs?8?5objects?$DO?$AA@ ; `string'
;	COMDAT ??_C@_0BO@JKCKFNOA@?$DMmethod?5?8?$CFV?8?5of?5?8?$CFs?8?5objects?$DO?$AA@
CONST	SEGMENT
??_C@_0BO@JKCKFNOA@?$DMmethod?5?8?$CFV?8?5of?5?8?$CFs?8?5objects?$DO?$AA@ DB '<'
	DB	'method ''%V'' of ''%s'' objects>', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT method_repr
_TEXT	SEGMENT
descr$ = 8
method_repr PROC					; COMDAT

; 37   :     return descr_repr((PyDescrObject *)descr,
; 38   :                       "<method '%V' of '%s' objects>");

  00000	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@JKCKFNOA@?$DMmethod?5?8?$CFV?8?5of?5?8?$CFs?8?5objects?$DO?$AA@

; 39   : }

  00007	e9 00 00 00 00	 jmp	 descr_repr
method_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@FLAIMFCK@?$DMmember?5?8?$CFV?8?5of?5?8?$CFs?8?5objects?$DO?$AA@ ; `string'
;	COMDAT ??_C@_0BO@FLAIMFCK@?$DMmember?5?8?$CFV?8?5of?5?8?$CFs?8?5objects?$DO?$AA@
CONST	SEGMENT
??_C@_0BO@FLAIMFCK@?$DMmember?5?8?$CFV?8?5of?5?8?$CFs?8?5objects?$DO?$AA@ DB '<'
	DB	'member ''%V'' of ''%s'' objects>', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT member_repr
_TEXT	SEGMENT
descr$ = 8
member_repr PROC					; COMDAT

; 44   :     return descr_repr((PyDescrObject *)descr,
; 45   :                       "<member '%V' of '%s' objects>");

  00000	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@FLAIMFCK@?$DMmember?5?8?$CFV?8?5of?5?8?$CFs?8?5objects?$DO?$AA@

; 46   : }

  00007	e9 00 00 00 00	 jmp	 descr_repr
member_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@GEJPJCAN@?$DMattribute?5?8?$CFV?8?5of?5?8?$CFs?8?5objects?$DO@ ; `string'
;	COMDAT ??_C@_0CB@GEJPJCAN@?$DMattribute?5?8?$CFV?8?5of?5?8?$CFs?8?5objects?$DO@
CONST	SEGMENT
??_C@_0CB@GEJPJCAN@?$DMattribute?5?8?$CFV?8?5of?5?8?$CFs?8?5objects?$DO@ DB '<'
	DB	'attribute ''%V'' of ''%s'' objects>', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT getset_repr
_TEXT	SEGMENT
descr$ = 8
getset_repr PROC					; COMDAT

; 51   :     return descr_repr((PyDescrObject *)descr,
; 52   :                       "<attribute '%V' of '%s' objects>");

  00000	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@GEJPJCAN@?$DMattribute?5?8?$CFV?8?5of?5?8?$CFs?8?5objects?$DO@

; 53   : }

  00007	e9 00 00 00 00	 jmp	 descr_repr
getset_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@GLGKGAFF@?$DMslot?5wrapper?5?8?$CFV?8?5of?5?8?$CFs?8?5objec@ ; `string'
;	COMDAT ??_C@_0CE@GLGKGAFF@?$DMslot?5wrapper?5?8?$CFV?8?5of?5?8?$CFs?8?5objec@
CONST	SEGMENT
??_C@_0CE@GLGKGAFF@?$DMslot?5wrapper?5?8?$CFV?8?5of?5?8?$CFs?8?5objec@ DB '<'
	DB	'slot wrapper ''%V'' of ''%s'' objects>', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT wrapperdescr_repr
_TEXT	SEGMENT
descr$ = 8
wrapperdescr_repr PROC					; COMDAT

; 58   :     return descr_repr((PyDescrObject *)descr,
; 59   :                       "<slot wrapper '%V' of '%s' objects>");

  00000	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@GLGKGAFF@?$DMslot?5wrapper?5?8?$CFV?8?5of?5?8?$CFs?8?5objec@

; 60   : }

  00007	e9 00 00 00 00	 jmp	 descr_repr
wrapperdescr_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DO@IHNJCPIH@descriptor?5?8?$CFV?8?5for?5?8?$CFs?8?5objects@ ; `string'
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyType_IsSubtype:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$descr_check DD imagerel descr_check
	DD	imagerel descr_check+243
	DD	imagerel $unwind$descr_check
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$descr_check DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT ??_C@_0DO@IHNJCPIH@descriptor?5?8?$CFV?8?5for?5?8?$CFs?8?5objects@
CONST	SEGMENT
??_C@_0DO@IHNJCPIH@descriptor?5?8?$CFV?8?5for?5?8?$CFs?8?5objects@ DB 'de'
	DB	'scriptor ''%V'' for ''%s'' objects doesn''t apply to ''%s'' o'
	DB	'bject', 00H					; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\descrobject.c
CONST	ENDS
;	COMDAT descr_check
_TEXT	SEGMENT
descr$ = 64
obj$ = 72
pres$ = 80
descr_check PROC					; COMDAT

; 64   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	49 8b f0	 mov	 rsi, r8
  00012	48 8b fa	 mov	 rdi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 65   :     if (obj == NULL) {

  00018	48 85 d2	 test	 rdx, rdx
  0001b	75 53		 jne	 SHORT $LN2@descr_chec

; 66   :         Py_INCREF(descr);

  0001d	e8 00 00 00 00	 call	 _Py_PXCTX
  00022	85 c0		 test	 eax, eax
  00024	75 32		 jne	 SHORT $LN6@descr_chec
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00034	4c 8b cb	 mov	 r9, rbx
  00037	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0003d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00045	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004a	85 c0		 test	 eax, eax
  0004c	75 06		 jne	 SHORT $LN5@descr_chec
  0004e	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00052	74 04		 je	 SHORT $LN6@descr_chec
$LN5@descr_chec:
  00054	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN6@descr_chec:

; 67   :         *pres = (PyObject *)descr;

  00058	48 89 1e	 mov	 QWORD PTR [rsi], rbx

; 68   :         return 1;

  0005b	b8 01 00 00 00	 mov	 eax, 1

; 79   :     }
; 80   :     return 0;
; 81   : }

  00060	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00065	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0006a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0006e	5f		 pop	 rdi
  0006f	c3		 ret	 0
$LN2@descr_chec:

; 69   :     }
; 70   :     if (!PyObject_TypeCheck(obj, descr->d_type)) {

  00070	48 8b 4a 58	 mov	 rcx, QWORD PTR [rdx+88]
  00074	48 8b 53 60	 mov	 rdx, QWORD PTR [rbx+96]
  00078	48 3b ca	 cmp	 rcx, rdx
  0007b	74 64		 je	 SHORT $LN1@descr_chec
  0007d	e8 00 00 00 00	 call	 PyType_IsSubtype
  00082	85 c0		 test	 eax, eax
  00084	75 5b		 jne	 SHORT $LN1@descr_chec

; 71   :         PyErr_Format(PyExc_TypeError,
; 72   :                      "descriptor '%V' for '%s' objects "
; 73   :                      "doesn't apply to '%s' object",
; 74   :                      descr_name((PyDescrObject *)descr), "?",
; 75   :                      descr->d_type->tp_name,
; 76   :                      obj->ob_type->tp_name);

  00086	48 8b 57 58	 mov	 rdx, QWORD PTR [rdi+88]
  0008a	4c 8b 4b 60	 mov	 r9, QWORD PTR [rbx+96]
  0008e	48 8b cb	 mov	 rcx, rbx
  00091	e8 00 00 00 00	 call	 descr_name
  00096	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0009d	4c 8b c0	 mov	 r8, rax
  000a0	48 8b 42 70	 mov	 rax, QWORD PTR [rdx+112]
  000a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DO@IHNJCPIH@descriptor?5?8?$CFV?8?5for?5?8?$CFs?8?5objects@
  000ab	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000b0	49 8b 41 70	 mov	 rax, QWORD PTR [r9+112]
  000b4	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  000bb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c0	e8 00 00 00 00	 call	 PyErr_Format

; 77   :         *pres = NULL;

  000c5	48 c7 06 00 00
	00 00		 mov	 QWORD PTR [rsi], 0

; 78   :         return 1;

  000cc	b8 01 00 00 00	 mov	 eax, 1

; 79   :     }
; 80   :     return 0;
; 81   : }

  000d1	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000d6	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000db	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000df	5f		 pop	 rdi
  000e0	c3		 ret	 0
$LN1@descr_chec:
  000e1	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000e6	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000eb	33 c0		 xor	 eax, eax
  000ed	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000f1	5f		 pop	 rdi
  000f2	c3		 ret	 0
descr_check ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DJ@CDDIFCEO@descriptor?5?8?$CFV?8?5for?5type?5?8?$CFs?8?5do@ ; `string'
PUBLIC	??_C@_0DP@NKKKOLKG@descriptor?5?8?$CFV?8?5for?5type?5?8?$CFs?8?5ne@ ; `string'
PUBLIC	??_C@_0EA@MADIGBLG@descriptor?5?8?$CFV?8?5for?5type?5?8?$CFs?8?5ne@ ; `string'
EXTRN	PyCFunction_NewEx:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$classmethod_get DD imagerel classmethod_get
	DD	imagerel classmethod_get+288
	DD	imagerel $unwind$classmethod_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$classmethod_get DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0DJ@CDDIFCEO@descriptor?5?8?$CFV?8?5for?5type?5?8?$CFs?8?5do@
CONST	SEGMENT
??_C@_0DJ@CDDIFCEO@descriptor?5?8?$CFV?8?5for?5type?5?8?$CFs?8?5do@ DB 'd'
	DB	'escriptor ''%V'' for type ''%s'' doesn''t apply to type ''%s'''
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@NKKKOLKG@descriptor?5?8?$CFV?8?5for?5type?5?8?$CFs?8?5ne@
CONST	SEGMENT
??_C@_0DP@NKKKOLKG@descriptor?5?8?$CFV?8?5for?5type?5?8?$CFs?8?5ne@ DB 'd'
	DB	'escriptor ''%V'' for type ''%s'' needs either an object or a '
	DB	'type', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@MADIGBLG@descriptor?5?8?$CFV?8?5for?5type?5?8?$CFs?8?5ne@
CONST	SEGMENT
??_C@_0EA@MADIGBLG@descriptor?5?8?$CFV?8?5for?5type?5?8?$CFs?8?5ne@ DB 'd'
	DB	'escriptor ''%V'' for type ''%s'' needs a type, not a ''%s'' a'
	DB	's arg 2', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT classmethod_get
_TEXT	SEGMENT
descr$ = 64
obj$ = 72
type$ = 80
classmethod_get PROC					; COMDAT

; 85   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	49 8b d8	 mov	 rbx, r8
  0000d	48 8b f9	 mov	 rdi, rcx

; 86   :     /* Ensure a valid type.  Class methods ignore obj. */
; 87   :     if (type == NULL) {

  00010	4d 85 c0	 test	 r8, r8
  00013	75 09		 jne	 SHORT $LN3@classmetho

; 88   :         if (obj != NULL)

  00015	48 85 d2	 test	 rdx, rdx
  00018	74 5a		 je	 SHORT $LN4@classmetho

; 89   :             type = (PyObject *)obj->ob_type;

  0001a	48 8b 5a 58	 mov	 rbx, QWORD PTR [rdx+88]
$LN3@classmetho:

; 98   :         }
; 99   :     }
; 100  :     if (!PyType_Check(type)) {

  0001e	4c 8b 4b 58	 mov	 r9, QWORD PTR [rbx+88]

; 101  :         PyErr_Format(PyExc_TypeError,
; 102  :                      "descriptor '%V' for type '%s' "
; 103  :                      "needs a type, not a '%s' as arg 2",
; 104  :                      descr_name((PyDescrObject *)descr), "?",
; 105  :                      PyDescr_TYPE(descr)->tp_name,
; 106  :                      type->ob_type->tp_name);

  00022	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00026	41 f7 81 00 01
	00 00 00 00 00
	80		 test	 DWORD PTR [r9+256], -2147483648 ; ffffffff80000000H
  00031	75 7d		 jne	 SHORT $LN2@classmetho
  00033	e8 00 00 00 00	 call	 descr_name
  00038	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0003f	4c 8b c0	 mov	 r8, rax
  00042	49 8b 41 70	 mov	 rax, QWORD PTR [r9+112]
  00046	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  0004d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00052	48 8b 42 70	 mov	 rax, QWORD PTR [rdx+112]
  00056	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EA@MADIGBLG@descriptor?5?8?$CFV?8?5for?5type?5?8?$CFs?8?5ne@
  0005d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00062	e8 00 00 00 00	 call	 PyErr_Format

; 107  :         return NULL;

  00067	33 c0		 xor	 eax, eax

; 119  : }

  00069	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0006e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00072	5f		 pop	 rdi
  00073	c3		 ret	 0
$LN4@classmetho:

; 90   :         else {
; 91   :             /* Wot - no type?! */
; 92   :             PyErr_Format(PyExc_TypeError,
; 93   :                          "descriptor '%V' for type '%s' "
; 94   :                          "needs either an object or a type",
; 95   :                          descr_name((PyDescrObject *)descr), "?",
; 96   :                          PyDescr_TYPE(descr)->tp_name);

  00074	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00078	e8 00 00 00 00	 call	 descr_name
  0007d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00084	4c 8b c0	 mov	 r8, rax
  00087	48 8b 42 70	 mov	 rax, QWORD PTR [rdx+112]
  0008b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  00092	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DP@NKKKOLKG@descriptor?5?8?$CFV?8?5for?5type?5?8?$CFs?8?5ne@
  00099	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0009e	e8 00 00 00 00	 call	 PyErr_Format

; 97   :             return NULL;

  000a3	33 c0		 xor	 eax, eax

; 119  : }

  000a5	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000aa	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ae	5f		 pop	 rdi
  000af	c3		 ret	 0
$LN2@classmetho:

; 108  :     }
; 109  :     if (!PyType_IsSubtype((PyTypeObject *)type, PyDescr_TYPE(descr))) {

  000b0	48 8b cb	 mov	 rcx, rbx
  000b3	e8 00 00 00 00	 call	 PyType_IsSubtype
  000b8	85 c0		 test	 eax, eax
  000ba	75 48		 jne	 SHORT $LN1@classmetho

; 110  :         PyErr_Format(PyExc_TypeError,
; 111  :                      "descriptor '%V' for type '%s' "
; 112  :                      "doesn't apply to type '%s'",
; 113  :                      descr_name((PyDescrObject *)descr), "?",
; 114  :                      PyDescr_TYPE(descr)->tp_name,
; 115  :                      ((PyTypeObject *)type)->tp_name);

  000bc	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  000c0	48 8b cf	 mov	 rcx, rdi
  000c3	e8 00 00 00 00	 call	 descr_name
  000c8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000cf	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  000d6	4c 8b c0	 mov	 r8, rax
  000d9	48 8b 43 70	 mov	 rax, QWORD PTR [rbx+112]
  000dd	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000e2	48 8b 42 70	 mov	 rax, QWORD PTR [rdx+112]
  000e6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DJ@CDDIFCEO@descriptor?5?8?$CFV?8?5for?5type?5?8?$CFs?8?5do@
  000ed	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000f2	e8 00 00 00 00	 call	 PyErr_Format

; 116  :         return NULL;

  000f7	33 c0		 xor	 eax, eax

; 119  : }

  000f9	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000fe	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00102	5f		 pop	 rdi
  00103	c3		 ret	 0
$LN1@classmetho:

; 117  :     }
; 118  :     return PyCFunction_New(descr->d_method, type);

  00104	48 8b 8f 80 00
	00 00		 mov	 rcx, QWORD PTR [rdi+128]
  0010b	45 33 c0	 xor	 r8d, r8d
  0010e	48 8b d3	 mov	 rdx, rbx

; 119  : }

  00111	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00116	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0011a	5f		 pop	 rdi
  0011b	e9 00 00 00 00	 jmp	 PyCFunction_NewEx
classmethod_get ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$method_get DD imagerel method_get
	DD	imagerel method_get+74
	DD	imagerel $unwind$method_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$method_get DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT method_get
_TEXT	SEGMENT
descr$ = 48
obj$ = 56
type$ = 64
res$ = 72
method_get PROC						; COMDAT

; 123  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 124  :     PyObject *res;
; 125  : 
; 126  :     if (descr_check((PyDescrObject *)descr, obj, &res))

  0000a	4c 8d 44 24 48	 lea	 r8, QWORD PTR res$[rsp]
  0000f	48 8b da	 mov	 rbx, rdx
  00012	48 8b f9	 mov	 rdi, rcx
  00015	e8 00 00 00 00	 call	 descr_check
  0001a	85 c0		 test	 eax, eax
  0001c	74 10		 je	 SHORT $LN1@method_get

; 127  :         return res;

  0001e	48 8b 44 24 48	 mov	 rax, QWORD PTR res$[rsp]

; 129  : }

  00023	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5f		 pop	 rdi
  0002d	c3		 ret	 0
$LN1@method_get:

; 128  :     return PyCFunction_New(descr->d_method, obj);

  0002e	48 8b 8f 80 00
	00 00		 mov	 rcx, QWORD PTR [rdi+128]
  00035	45 33 c0	 xor	 r8d, r8d
  00038	48 8b d3	 mov	 rdx, rbx

; 129  : }

  0003b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00040	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00044	5f		 pop	 rdi
  00045	e9 00 00 00 00	 jmp	 PyCFunction_NewEx
method_get ENDP
_TEXT	ENDS
EXTRN	PyMember_GetOne:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$member_get DD imagerel member_get
	DD	imagerel member_get+71
	DD	imagerel $unwind$member_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$member_get DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT member_get
_TEXT	SEGMENT
descr$ = 48
obj$ = 56
type$ = 64
res$ = 72
member_get PROC						; COMDAT

; 133  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 134  :     PyObject *res;
; 135  : 
; 136  :     if (descr_check((PyDescrObject *)descr, obj, &res))

  0000a	4c 8d 44 24 48	 lea	 r8, QWORD PTR res$[rsp]
  0000f	48 8b da	 mov	 rbx, rdx
  00012	48 8b f9	 mov	 rdi, rcx
  00015	e8 00 00 00 00	 call	 descr_check
  0001a	85 c0		 test	 eax, eax
  0001c	74 10		 je	 SHORT $LN1@member_get

; 137  :         return res;

  0001e	48 8b 44 24 48	 mov	 rax, QWORD PTR res$[rsp]

; 139  : }

  00023	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5f		 pop	 rdi
  0002d	c3		 ret	 0
$LN1@member_get:

; 138  :     return PyMember_GetOne((char *)obj, descr->d_member);

  0002e	48 8b 97 80 00
	00 00		 mov	 rdx, QWORD PTR [rdi+128]
  00035	48 8b cb	 mov	 rcx, rbx

; 139  : }

  00038	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5f		 pop	 rdi
  00042	e9 00 00 00 00	 jmp	 PyMember_GetOne
member_get ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DD@KIHLKLFH@attribute?5?8?$CFV?8?5of?5?8?$CF?4100s?8?5objec@ ; `string'
EXTRN	PyExc_AttributeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$getset_get DD imagerel getset_get
	DD	imagerel getset_get+144
	DD	imagerel $unwind$getset_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getset_get DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0DD@KIHLKLFH@attribute?5?8?$CFV?8?5of?5?8?$CF?4100s?8?5objec@
CONST	SEGMENT
??_C@_0DD@KIHLKLFH@attribute?5?8?$CFV?8?5of?5?8?$CF?4100s?8?5objec@ DB 'a'
	DB	'ttribute ''%V'' of ''%.100s'' objects is not readable', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT getset_get
_TEXT	SEGMENT
descr$ = 64
obj$ = 72
type$ = 80
res$ = 88
getset_get PROC						; COMDAT

; 143  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 144  :     PyObject *res;
; 145  : 
; 146  :     if (descr_check((PyDescrObject *)descr, obj, &res))

  0000a	4c 8d 44 24 58	 lea	 r8, QWORD PTR res$[rsp]
  0000f	48 8b fa	 mov	 rdi, rdx
  00012	48 8b d9	 mov	 rbx, rcx
  00015	e8 00 00 00 00	 call	 descr_check
  0001a	85 c0		 test	 eax, eax
  0001c	74 10		 je	 SHORT $LN2@getset_get

; 147  :         return res;

  0001e	48 8b 44 24 58	 mov	 rax, QWORD PTR res$[rsp]

; 154  :     return NULL;
; 155  : }

  00023	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00028	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0002c	5f		 pop	 rdi
  0002d	c3		 ret	 0
$LN2@getset_get:

; 148  :     if (descr->d_getset->get != NULL)

  0002e	48 8b 83 80 00
	00 00		 mov	 rax, QWORD PTR [rbx+128]
  00035	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0003a	74 15		 je	 SHORT $LN1@getset_get

; 149  :         return descr->d_getset->get(obj, descr->d_getset->closure);

  0003c	48 8b 50 20	 mov	 rdx, QWORD PTR [rax+32]
  00040	48 8b cf	 mov	 rcx, rdi

; 154  :     return NULL;
; 155  : }

  00043	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00048	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0004c	5f		 pop	 rdi
  0004d	48 ff 60 08	 rex_jmp QWORD PTR [rax+8]
$LN1@getset_get:

; 150  :     PyErr_Format(PyExc_AttributeError,
; 151  :                  "attribute '%V' of '%.100s' objects is not readable",
; 152  :                  descr_name((PyDescrObject *)descr), "?",
; 153  :                  PyDescr_TYPE(descr)->tp_name);

  00051	48 8b 53 60	 mov	 rdx, QWORD PTR [rbx+96]
  00055	48 8b cb	 mov	 rcx, rbx
  00058	e8 00 00 00 00	 call	 descr_name
  0005d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  00064	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  0006b	4c 8b c0	 mov	 r8, rax
  0006e	48 8b 42 70	 mov	 rax, QWORD PTR [rdx+112]
  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@KIHLKLFH@attribute?5?8?$CFV?8?5of?5?8?$CF?4100s?8?5objec@
  00079	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0007e	e8 00 00 00 00	 call	 PyErr_Format

; 154  :     return NULL;
; 155  : }

  00083	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00088	33 c0		 xor	 eax, eax
  0008a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008e	5f		 pop	 rdi
  0008f	c3		 ret	 0
getset_get ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EG@BJMOFAJD@descriptor?5?8?$CFV?8?5for?5?8?$CF?4100s?8?5obj@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$descr_setcheck DD imagerel descr_setcheck
	DD	imagerel descr_setcheck+154
	DD	imagerel $unwind$descr_setcheck
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$descr_setcheck DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT ??_C@_0EG@BJMOFAJD@descriptor?5?8?$CFV?8?5for?5?8?$CF?4100s?8?5obj@
CONST	SEGMENT
??_C@_0EG@BJMOFAJD@descriptor?5?8?$CFV?8?5for?5?8?$CF?4100s?8?5obj@ DB 'd'
	DB	'escriptor ''%V'' for ''%.100s'' objects doesn''t apply to ''%'
	DB	'.100s'' object', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT descr_setcheck
_TEXT	SEGMENT
descr$ = 64
obj$ = 72
pres$ = 80
descr_setcheck PROC					; COMDAT

; 170  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b d9	 mov	 rbx, rcx

; 171  :     assert(obj != NULL);
; 172  :     if (!PyObject_TypeCheck(obj, descr->d_type)) {

  00012	48 8b 4a 58	 mov	 rcx, QWORD PTR [rdx+88]
  00016	48 8b fa	 mov	 rdi, rdx
  00019	48 8b 53 60	 mov	 rdx, QWORD PTR [rbx+96]
  0001d	49 8b f0	 mov	 rsi, r8
  00020	48 3b ca	 cmp	 rcx, rdx
  00023	74 63		 je	 SHORT $LN1@descr_setc
  00025	e8 00 00 00 00	 call	 PyType_IsSubtype
  0002a	85 c0		 test	 eax, eax
  0002c	75 5a		 jne	 SHORT $LN1@descr_setc

; 173  :         PyErr_Format(PyExc_TypeError,
; 174  :                      "descriptor '%V' for '%.100s' objects "
; 175  :                      "doesn't apply to '%.100s' object",
; 176  :                      descr_name(descr), "?",
; 177  :                      descr->d_type->tp_name,
; 178  :                      obj->ob_type->tp_name);

  0002e	48 8b 57 58	 mov	 rdx, QWORD PTR [rdi+88]
  00032	4c 8b 4b 60	 mov	 r9, QWORD PTR [rbx+96]
  00036	48 8b cb	 mov	 rcx, rbx
  00039	e8 00 00 00 00	 call	 descr_name
  0003e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00045	4c 8b c0	 mov	 r8, rax
  00048	48 8b 42 70	 mov	 rax, QWORD PTR [rdx+112]
  0004c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EG@BJMOFAJD@descriptor?5?8?$CFV?8?5for?5?8?$CF?4100s?8?5obj@
  00053	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00058	49 8b 41 70	 mov	 rax, QWORD PTR [r9+112]
  0005c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  00063	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00068	e8 00 00 00 00	 call	 PyErr_Format

; 179  :         *pres = -1;

  0006d	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [rsi], -1

; 180  :         return 1;

  00073	b8 01 00 00 00	 mov	 eax, 1

; 181  :     }
; 182  :     return 0;
; 183  : }

  00078	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0007d	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00082	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00086	5f		 pop	 rdi
  00087	c3		 ret	 0
$LN1@descr_setc:
  00088	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0008d	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00092	33 c0		 xor	 eax, eax
  00094	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00098	5f		 pop	 rdi
  00099	c3		 ret	 0
descr_setcheck ENDP
_TEXT	ENDS
EXTRN	PyMember_SetOne:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$member_set DD imagerel member_set
	DD	imagerel member_set+91
	DD	imagerel $unwind$member_set
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$member_set DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT member_set
_TEXT	SEGMENT
descr$ = 48
obj$ = 56
value$ = 64
res$ = 72
member_set PROC						; COMDAT

; 187  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f0	 mov	 rsi, r8

; 188  :     int res;
; 189  : 
; 190  :     if (descr_setcheck((PyDescrObject *)descr, obj, value, &res))

  00012	4c 8d 44 24 48	 lea	 r8, QWORD PTR res$[rsp]
  00017	48 8b da	 mov	 rbx, rdx
  0001a	48 8b f9	 mov	 rdi, rcx
  0001d	e8 00 00 00 00	 call	 descr_setcheck
  00022	85 c0		 test	 eax, eax
  00024	74 14		 je	 SHORT $LN1@member_set

; 191  :         return res;

  00026	8b 44 24 48	 mov	 eax, DWORD PTR res$[rsp]

; 193  : }

  0002a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002f	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00034	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00038	5f		 pop	 rdi
  00039	c3		 ret	 0
$LN1@member_set:

; 192  :     return PyMember_SetOne((char *)obj, descr->d_member, value);

  0003a	48 8b 97 80 00
	00 00		 mov	 rdx, QWORD PTR [rdi+128]
  00041	4c 8b c6	 mov	 r8, rsi
  00044	48 8b cb	 mov	 rcx, rbx

; 193  : }

  00047	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004c	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00051	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00055	5f		 pop	 rdi
  00056	e9 00 00 00 00	 jmp	 PyMember_SetOne
member_set ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DD@KEKLJKNG@attribute?5?8?$CFV?8?5of?5?8?$CF?4100s?8?5objec@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$getset_set DD imagerel getset_set
	DD	imagerel getset_set+170
	DD	imagerel $unwind$getset_set
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getset_set DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT ??_C@_0DD@KEKLJKNG@attribute?5?8?$CFV?8?5of?5?8?$CF?4100s?8?5objec@
CONST	SEGMENT
??_C@_0DD@KEKLJKNG@attribute?5?8?$CFV?8?5of?5?8?$CF?4100s?8?5objec@ DB 'a'
	DB	'ttribute ''%V'' of ''%.100s'' objects is not writable', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT getset_set
_TEXT	SEGMENT
descr$ = 64
obj$ = 72
value$ = 80
res$ = 88
getset_set PROC						; COMDAT

; 197  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	49 8b f0	 mov	 rsi, r8

; 198  :     int res;
; 199  : 
; 200  :     if (descr_setcheck((PyDescrObject *)descr, obj, value, &res))

  00012	4c 8d 44 24 58	 lea	 r8, QWORD PTR res$[rsp]
  00017	48 8b fa	 mov	 rdi, rdx
  0001a	48 8b d9	 mov	 rbx, rcx
  0001d	e8 00 00 00 00	 call	 descr_setcheck
  00022	85 c0		 test	 eax, eax
  00024	74 14		 je	 SHORT $LN2@getset_set

; 201  :         return res;

  00026	8b 44 24 58	 mov	 eax, DWORD PTR res$[rsp]

; 209  :     return -1;
; 210  : }

  0002a	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0002f	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00034	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00038	5f		 pop	 rdi
  00039	c3		 ret	 0
$LN2@getset_set:

; 202  :     if (descr->d_getset->set != NULL)

  0003a	48 8b 83 80 00
	00 00		 mov	 rax, QWORD PTR [rbx+128]
  00041	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  00046	74 1d		 je	 SHORT $LN1@getset_set

; 203  :         return descr->d_getset->set(obj, value,
; 204  :                                     descr->d_getset->closure);

  00048	4c 8b 40 20	 mov	 r8, QWORD PTR [rax+32]
  0004c	48 8b d6	 mov	 rdx, rsi
  0004f	48 8b cf	 mov	 rcx, rdi

; 209  :     return -1;
; 210  : }

  00052	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00057	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0005c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00060	5f		 pop	 rdi
  00061	48 ff 60 10	 rex_jmp QWORD PTR [rax+16]
$LN1@getset_set:

; 205  :     PyErr_Format(PyExc_AttributeError,
; 206  :                  "attribute '%V' of '%.100s' objects is not writable",
; 207  :                  descr_name((PyDescrObject *)descr), "?",
; 208  :                  PyDescr_TYPE(descr)->tp_name);

  00065	48 8b 53 60	 mov	 rdx, QWORD PTR [rbx+96]
  00069	48 8b cb	 mov	 rcx, rbx
  0006c	e8 00 00 00 00	 call	 descr_name
  00071	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  00078	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  0007f	4c 8b c0	 mov	 r8, rax
  00082	48 8b 42 70	 mov	 rax, QWORD PTR [rdx+112]
  00086	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@KEKLJKNG@attribute?5?8?$CFV?8?5of?5?8?$CF?4100s?8?5objec@
  0008d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00092	e8 00 00 00 00	 call	 PyErr_Format

; 209  :     return -1;
; 210  : }

  00097	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0009c	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000a1	83 c8 ff	 or	 eax, -1
  000a4	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a8	5f		 pop	 rdi
  000a9	c3		 ret	 0
getset_set ENDP
_TEXT	ENDS
PUBLIC	??_C@_0ED@JEKLHGCL@descriptor?5?8?$CFV?8?5requires?5a?5?8?$CF?410@ ; `string'
PUBLIC	??_C@_0DF@DNBKEIFF@descriptor?5?8?$CFV?8?5of?5?8?$CF?4100s?8?5obje@ ; `string'
EXTRN	PyEval_CallObjectWithKeywords:PROC
EXTRN	PyTuple_GetSlice:PROC
EXTRN	_PyObject_RealIsSubclass:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$methoddescr_call DD imagerel methoddescr_call
	DD	imagerel methoddescr_call+94
	DD	imagerel $unwind$methoddescr_call
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$methoddescr_call DD imagerel methoddescr_call+94
	DD	imagerel methoddescr_call+287
	DD	imagerel $chain$0$methoddescr_call
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$methoddescr_call DD imagerel methoddescr_call+287
	DD	imagerel methoddescr_call+309
	DD	imagerel $chain$1$methoddescr_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$methoddescr_call DD 021H
	DD	imagerel methoddescr_call
	DD	imagerel methoddescr_call+94
	DD	imagerel $unwind$methoddescr_call
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$methoddescr_call DD 020521H
	DD	087405H
	DD	imagerel methoddescr_call
	DD	imagerel methoddescr_call+94
	DD	imagerel $unwind$methoddescr_call
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$methoddescr_call DD 081501H
	DD	0b6415H
	DD	0a5415H
	DD	093415H
	DD	0c0115215H
xdata	ENDS
;	COMDAT ??_C@_0ED@JEKLHGCL@descriptor?5?8?$CFV?8?5requires?5a?5?8?$CF?410@
CONST	SEGMENT
??_C@_0ED@JEKLHGCL@descriptor?5?8?$CFV?8?5requires?5a?5?8?$CF?410@ DB 'de'
	DB	'scriptor ''%V'' requires a ''%.100s'' object but received a '''
	DB	'%.100s''', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@DNBKEIFF@descriptor?5?8?$CFV?8?5of?5?8?$CF?4100s?8?5obje@
CONST	SEGMENT
??_C@_0DF@DNBKEIFF@descriptor?5?8?$CFV?8?5of?5?8?$CF?4100s?8?5obje@ DB 'd'
	DB	'escriptor ''%V'' of ''%.100s'' object needs an argument', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT methoddescr_call
_TEXT	SEGMENT
descr$ = 64
args$ = 72
kwds$ = 80
methoddescr_call PROC					; COMDAT

; 214  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	41 54		 push	 r12
  00011	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 215  :     Py_ssize_t argc;
; 216  :     PyObject *self, *func, *result;
; 217  : 
; 218  :     /* Make sure that the first argument is acceptable as 'self' */
; 219  :     assert(PyTuple_Check(args));
; 220  :     argc = PyTuple_GET_SIZE(args);

  00015	48 8b 6a 60	 mov	 rbp, QWORD PTR [rdx+96]
  00019	4d 8b e0	 mov	 r12, r8
  0001c	48 8b f2	 mov	 rsi, rdx
  0001f	48 8b d9	 mov	 rbx, rcx

; 221  :     if (argc < 1) {

  00022	48 83 fd 01	 cmp	 rbp, 1
  00026	7d 36		 jge	 SHORT $LN4@methoddesc

; 222  :         PyErr_Format(PyExc_TypeError,
; 223  :                      "descriptor '%V' of '%.100s' "
; 224  :                      "object needs an argument",
; 225  :                      descr_name((PyDescrObject *)descr), "?",
; 226  :                      PyDescr_TYPE(descr)->tp_name);

  00028	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  0002c	e8 00 00 00 00	 call	 descr_name
  00031	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00038	4c 8b c0	 mov	 r8, rax
  0003b	48 8b 42 70	 mov	 rax, QWORD PTR [rdx+112]
  0003f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DF@DNBKEIFF@descriptor?5?8?$CFV?8?5of?5?8?$CF?4100s?8?5obje@
  0004d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00052	e8 00 00 00 00	 call	 PyErr_Format

; 227  :         return NULL;

  00057	33 c0		 xor	 eax, eax
  00059	e9 c1 00 00 00	 jmp	 $LN5@methoddesc
$LN4@methoddesc:
  0005e	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi

; 228  :     }
; 229  :     self = PyTuple_GET_ITEM(args, 0);

  00063	48 8b 7a 70	 mov	 rdi, QWORD PTR [rdx+112]

; 230  :     if (!_PyObject_RealIsSubclass((PyObject *)Py_TYPE(self),
; 231  :                                   (PyObject *)PyDescr_TYPE(descr))) {

  00067	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  0006b	48 8b 4f 58	 mov	 rcx, QWORD PTR [rdi+88]
  0006f	e8 00 00 00 00	 call	 _PyObject_RealIsSubclass
  00074	85 c0		 test	 eax, eax
  00076	75 43		 jne	 SHORT $LN3@methoddesc

; 232  :         PyErr_Format(PyExc_TypeError,
; 233  :                      "descriptor '%V' "
; 234  :                      "requires a '%.100s' object "
; 235  :                      "but received a '%.100s'",
; 236  :                      descr_name((PyDescrObject *)descr), "?",
; 237  :                      PyDescr_TYPE(descr)->tp_name,
; 238  :                      self->ob_type->tp_name);

  00078	48 8b 57 58	 mov	 rdx, QWORD PTR [rdi+88]
  0007c	4c 8b 4b 60	 mov	 r9, QWORD PTR [rbx+96]
  00080	48 8b cb	 mov	 rcx, rbx
  00083	e8 00 00 00 00	 call	 descr_name
  00088	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0008f	4c 8b c0	 mov	 r8, rax
  00092	48 8b 42 70	 mov	 rax, QWORD PTR [rdx+112]
  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0ED@JEKLHGCL@descriptor?5?8?$CFV?8?5requires?5a?5?8?$CF?410@
  0009d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a2	49 8b 41 70	 mov	 rax, QWORD PTR [r9+112]
  000a6	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  000ad	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000b2	e8 00 00 00 00	 call	 PyErr_Format

; 239  :         return NULL;

  000b7	33 c0		 xor	 eax, eax
  000b9	eb 5f		 jmp	 SHORT $LN7@methoddesc
$LN3@methoddesc:

; 240  :     }
; 241  : 
; 242  :     func = PyCFunction_New(descr->d_method, self);

  000bb	48 8b 8b 80 00
	00 00		 mov	 rcx, QWORD PTR [rbx+128]
  000c2	45 33 c0	 xor	 r8d, r8d
  000c5	48 8b d7	 mov	 rdx, rdi
  000c8	e8 00 00 00 00	 call	 PyCFunction_NewEx
  000cd	48 8b f8	 mov	 rdi, rax

; 243  :     if (func == NULL)

  000d0	48 85 c0	 test	 rax, rax

; 244  :         return NULL;

  000d3	74 20		 je	 SHORT $LN8@methoddesc

; 245  :     args = PyTuple_GetSlice(args, 1, argc);

  000d5	4c 8b c5	 mov	 r8, rbp
  000d8	ba 01 00 00 00	 mov	 edx, 1
  000dd	48 8b ce	 mov	 rcx, rsi
  000e0	e8 00 00 00 00	 call	 PyTuple_GetSlice

; 246  :     if (args == NULL) {
; 247  :         Py_DECREF(func);

  000e5	48 8b cf	 mov	 rcx, rdi
  000e8	48 8b f0	 mov	 rsi, rax
  000eb	48 85 c0	 test	 rax, rax
  000ee	75 09		 jne	 SHORT $LN1@methoddesc
  000f0	e8 00 00 00 00	 call	 _Py_DecRef
$LN8@methoddesc:

; 248  :         return NULL;

  000f5	33 c0		 xor	 eax, eax
  000f7	eb 21		 jmp	 SHORT $LN7@methoddesc
$LN1@methoddesc:

; 249  :     }
; 250  :     result = PyEval_CallObjectWithKeywords(func, args, kwds);

  000f9	4d 8b c4	 mov	 r8, r12
  000fc	48 8b d0	 mov	 rdx, rax
  000ff	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords

; 251  :     Py_DECREF(args);

  00104	48 8b ce	 mov	 rcx, rsi
  00107	48 8b d8	 mov	 rbx, rax
  0010a	e8 00 00 00 00	 call	 _Py_DecRef

; 252  :     Py_DECREF(func);

  0010f	48 8b cf	 mov	 rcx, rdi
  00112	e8 00 00 00 00	 call	 _Py_DecRef

; 253  :     return result;

  00117	48 8b c3	 mov	 rax, rbx
$LN7@methoddesc:
  0011a	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
$LN5@methoddesc:

; 254  : }

  0011f	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00124	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  00129	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  0012e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00132	41 5c		 pop	 r12
  00134	c3		 ret	 0
methoddescr_call ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EE@BFJLCEKG@descriptor?5?8?$CFV?8?5requires?5a?5subty@ ; `string'
PUBLIC	??_C@_0DI@LFNCLFNC@descriptor?5?8?$CFV?8?5requires?5a?5type?5@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$classmethoddescr_call DD imagerel classmethoddescr_call
	DD	imagerel classmethoddescr_call+94
	DD	imagerel $unwind$classmethoddescr_call
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$classmethoddescr_call DD imagerel classmethoddescr_call+94
	DD	imagerel classmethoddescr_call+362
	DD	imagerel $chain$0$classmethoddescr_call
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$classmethoddescr_call DD imagerel classmethoddescr_call+362
	DD	imagerel classmethoddescr_call+384
	DD	imagerel $chain$1$classmethoddescr_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$classmethoddescr_call DD 021H
	DD	imagerel classmethoddescr_call
	DD	imagerel classmethoddescr_call+94
	DD	imagerel $unwind$classmethoddescr_call
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$classmethoddescr_call DD 020521H
	DD	087405H
	DD	imagerel classmethoddescr_call
	DD	imagerel classmethoddescr_call+94
	DD	imagerel $unwind$classmethoddescr_call
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$classmethoddescr_call DD 081501H
	DD	0b6415H
	DD	0a5415H
	DD	093415H
	DD	0c0115215H
xdata	ENDS
;	COMDAT ??_C@_0EE@BFJLCEKG@descriptor?5?8?$CFV?8?5requires?5a?5subty@
CONST	SEGMENT
??_C@_0EE@BFJLCEKG@descriptor?5?8?$CFV?8?5requires?5a?5subty@ DB 'descrip'
	DB	'tor ''%V'' requires a subtype of ''%.100s'' but received ''%.'
	DB	'100s', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@LFNCLFNC@descriptor?5?8?$CFV?8?5requires?5a?5type?5@
CONST	SEGMENT
??_C@_0DI@LFNCLFNC@descriptor?5?8?$CFV?8?5requires?5a?5type?5@ DB 'descri'
	DB	'ptor ''%V'' requires a type but received a ''%.100s''', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT classmethoddescr_call
_TEXT	SEGMENT
descr$ = 64
args$ = 72
kwds$ = 80
classmethoddescr_call PROC				; COMDAT

; 259  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	41 54		 push	 r12
  00011	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 260  :     Py_ssize_t argc;
; 261  :     PyObject *self, *func, *result;
; 262  : 
; 263  :     /* Make sure that the first argument is acceptable as 'self' */
; 264  :     assert(PyTuple_Check(args));
; 265  :     argc = PyTuple_GET_SIZE(args);

  00015	48 8b 6a 60	 mov	 rbp, QWORD PTR [rdx+96]
  00019	4d 8b e0	 mov	 r12, r8
  0001c	48 8b f2	 mov	 rsi, rdx
  0001f	48 8b d9	 mov	 rbx, rcx

; 266  :     if (argc < 1) {

  00022	48 83 fd 01	 cmp	 rbp, 1
  00026	7d 36		 jge	 SHORT $LN5@classmetho@2

; 267  :         PyErr_Format(PyExc_TypeError,
; 268  :                      "descriptor '%V' of '%.100s' "
; 269  :                      "object needs an argument",
; 270  :                      descr_name((PyDescrObject *)descr), "?",
; 271  :                      PyDescr_TYPE(descr)->tp_name);

  00028	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  0002c	e8 00 00 00 00	 call	 descr_name
  00031	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00038	4c 8b c0	 mov	 r8, rax
  0003b	48 8b 42 70	 mov	 rax, QWORD PTR [rdx+112]
  0003f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DF@DNBKEIFF@descriptor?5?8?$CFV?8?5of?5?8?$CF?4100s?8?5obje@
  0004d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00052	e8 00 00 00 00	 call	 PyErr_Format

; 272  :         return NULL;

  00057	33 c0		 xor	 eax, eax
  00059	e9 0c 01 00 00	 jmp	 $LN6@classmetho@2
$LN5@classmetho@2:
  0005e	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi

; 273  :     }
; 274  :     self = PyTuple_GET_ITEM(args, 0);

  00063	48 8b 7a 70	 mov	 rdi, QWORD PTR [rdx+112]

; 275  :     if (!PyType_Check(self)) {
; 276  :         PyErr_Format(PyExc_TypeError,
; 277  :                      "descriptor '%V' requires a type "
; 278  :                      "but received a '%.100s'",
; 279  :                      descr_name((PyDescrObject *)descr), "?",
; 280  :                      PyDescr_TYPE(descr)->tp_name,
; 281  :                      self->ob_type->tp_name);

  00067	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  0006b	4c 8b 4f 58	 mov	 r9, QWORD PTR [rdi+88]
  0006f	41 f7 81 00 01
	00 00 00 00 00
	80		 test	 DWORD PTR [r9+256], -2147483648 ; ffffffff80000000H
  0007a	75 3b		 jne	 SHORT $LN4@classmetho@2
  0007c	e8 00 00 00 00	 call	 descr_name
  00081	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00088	4c 8b c0	 mov	 r8, rax
  0008b	49 8b 41 70	 mov	 rax, QWORD PTR [r9+112]
  0008f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  00096	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0009b	48 8b 42 70	 mov	 rax, QWORD PTR [rdx+112]
  0009f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DI@LFNCLFNC@descriptor?5?8?$CFV?8?5requires?5a?5type?5@
  000a6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ab	e8 00 00 00 00	 call	 PyErr_Format

; 282  :         return NULL;

  000b0	33 c0		 xor	 eax, eax
  000b2	e9 ae 00 00 00	 jmp	 $LN8@classmetho@2
$LN4@classmetho@2:

; 283  :     }
; 284  :     if (!PyType_IsSubtype((PyTypeObject *)self, PyDescr_TYPE(descr))) {

  000b7	48 8b cf	 mov	 rcx, rdi
  000ba	e8 00 00 00 00	 call	 PyType_IsSubtype
  000bf	85 c0		 test	 eax, eax
  000c1	75 43		 jne	 SHORT $LN3@classmetho@2

; 285  :         PyErr_Format(PyExc_TypeError,
; 286  :                      "descriptor '%V' "
; 287  :                      "requires a subtype of '%.100s' "
; 288  :                      "but received '%.100s",
; 289  :                      descr_name((PyDescrObject *)descr), "?",
; 290  :                      PyDescr_TYPE(descr)->tp_name,
; 291  :                      self->ob_type->tp_name);

  000c3	48 8b 57 58	 mov	 rdx, QWORD PTR [rdi+88]
  000c7	4c 8b 4b 60	 mov	 r9, QWORD PTR [rbx+96]
  000cb	48 8b cb	 mov	 rcx, rbx
  000ce	e8 00 00 00 00	 call	 descr_name
  000d3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000da	4c 8b c0	 mov	 r8, rax
  000dd	48 8b 42 70	 mov	 rax, QWORD PTR [rdx+112]
  000e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EE@BFJLCEKG@descriptor?5?8?$CFV?8?5requires?5a?5subty@
  000e8	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000ed	49 8b 41 70	 mov	 rax, QWORD PTR [r9+112]
  000f1	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  000f8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000fd	e8 00 00 00 00	 call	 PyErr_Format

; 292  :         return NULL;

  00102	33 c0		 xor	 eax, eax
  00104	eb 5f		 jmp	 SHORT $LN8@classmetho@2
$LN3@classmetho@2:

; 293  :     }
; 294  : 
; 295  :     func = PyCFunction_New(descr->d_method, self);

  00106	48 8b 8b 80 00
	00 00		 mov	 rcx, QWORD PTR [rbx+128]
  0010d	45 33 c0	 xor	 r8d, r8d
  00110	48 8b d7	 mov	 rdx, rdi
  00113	e8 00 00 00 00	 call	 PyCFunction_NewEx
  00118	48 8b f8	 mov	 rdi, rax

; 296  :     if (func == NULL)

  0011b	48 85 c0	 test	 rax, rax

; 297  :         return NULL;

  0011e	74 20		 je	 SHORT $LN9@classmetho@2

; 298  :     args = PyTuple_GetSlice(args, 1, argc);

  00120	4c 8b c5	 mov	 r8, rbp
  00123	ba 01 00 00 00	 mov	 edx, 1
  00128	48 8b ce	 mov	 rcx, rsi
  0012b	e8 00 00 00 00	 call	 PyTuple_GetSlice

; 299  :     if (args == NULL) {
; 300  :         Py_DECREF(func);

  00130	48 8b cf	 mov	 rcx, rdi
  00133	48 8b f0	 mov	 rsi, rax
  00136	48 85 c0	 test	 rax, rax
  00139	75 09		 jne	 SHORT $LN1@classmetho@2
  0013b	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@classmetho@2:

; 301  :         return NULL;

  00140	33 c0		 xor	 eax, eax
  00142	eb 21		 jmp	 SHORT $LN8@classmetho@2
$LN1@classmetho@2:

; 302  :     }
; 303  :     result = PyEval_CallObjectWithKeywords(func, args, kwds);

  00144	4d 8b c4	 mov	 r8, r12
  00147	48 8b d0	 mov	 rdx, rax
  0014a	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords

; 304  :     Py_DECREF(func);

  0014f	48 8b cf	 mov	 rcx, rdi
  00152	48 8b d8	 mov	 rbx, rax
  00155	e8 00 00 00 00	 call	 _Py_DecRef

; 305  :     Py_DECREF(args);

  0015a	48 8b ce	 mov	 rcx, rsi
  0015d	e8 00 00 00 00	 call	 _Py_DecRef

; 306  :     return result;

  00162	48 8b c3	 mov	 rax, rbx
$LN8@classmetho@2:
  00165	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
$LN6@classmetho@2:

; 307  : }

  0016a	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  0016f	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  00174	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  00179	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0017d	41 5c		 pop	 r12
  0017f	c3		 ret	 0
classmethoddescr_call ENDP
_TEXT	ENDS
EXTRN	PyUnicode_FromString:PROC
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$method_get_doc DD imagerel method_get_doc
	DD	imagerel method_get_doc+110
	DD	imagerel $unwind$method_get_doc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$method_get_doc DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\descrobject.c
xdata	ENDS
;	COMDAT method_get_doc
_TEXT	SEGMENT
descr$ = 64
closure$ = 72
method_get_doc PROC					; COMDAT

; 355  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 356  :     if (descr->d_method->ml_doc == NULL) {

  00004	48 8b 81 80 00
	00 00		 mov	 rax, QWORD PTR [rcx+128]
  0000b	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  0000f	48 85 c9	 test	 rcx, rcx
  00012	75 51		 jne	 SHORT $LN1@method_get@2

; 357  :         Py_INCREF(Py_None);

  00014	e8 00 00 00 00	 call	 _Py_PXCTX
  00019	85 c0		 test	 eax, eax
  0001b	75 3c		 jne	 SHORT $LN5@method_get@2
  0001d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00032	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00038	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00040	e8 00 00 00 00	 call	 _PyParallel_Guard
  00045	85 c0		 test	 eax, eax
  00047	75 09		 jne	 SHORT $LN4@method_get@2
  00049	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00050	74 07		 je	 SHORT $LN5@method_get@2
$LN4@method_get@2:
  00052	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN5@method_get@2:

; 358  :         return Py_None;

  00059	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 359  :     }
; 360  :     return PyUnicode_FromString(descr->d_method->ml_doc);
; 361  : }

  00060	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00064	c3		 ret	 0
$LN1@method_get@2:
  00065	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00069	e9 00 00 00 00	 jmp	 PyUnicode_FromString
method_get_doc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CO@HHBFIHEH@?$DMdescriptor?$DO?4__name__?5is?5not?5a?5u@ ; `string'
PUBLIC	??_C@_05IJBCCNFD@?$CFS?4?$CFS?$AA@		; `string'
PUBLIC	??_C@_0DP@KAFCPPEK@?$DMdescriptor?$DO?4__objclass__?4__qual@ ; `string'
EXTRN	PyErr_SetString:PROC
EXTRN	_PyObject_GetAttrId:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$calculate_qualname DD imagerel calculate_qualname
	DD	imagerel calculate_qualname+67
	DD	imagerel $unwind$calculate_qualname
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$calculate_qualname DD imagerel calculate_qualname+67
	DD	imagerel calculate_qualname+145
	DD	imagerel $chain$0$calculate_qualname
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$calculate_qualname DD imagerel calculate_qualname+145
	DD	imagerel calculate_qualname+189
	DD	imagerel $chain$2$calculate_qualname
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$calculate_qualname DD imagerel calculate_qualname+189
	DD	imagerel calculate_qualname+216
	DD	imagerel $chain$3$calculate_qualname
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$calculate_qualname DD 021H
	DD	imagerel calculate_qualname
	DD	imagerel calculate_qualname+67
	DD	imagerel $unwind$calculate_qualname
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$calculate_qualname DD 020021H
	DD	067400H
	DD	imagerel calculate_qualname
	DD	imagerel calculate_qualname+67
	DD	imagerel $unwind$calculate_qualname
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$calculate_qualname DD 020521H
	DD	067405H
	DD	imagerel calculate_qualname
	DD	imagerel calculate_qualname+67
	DD	imagerel $unwind$calculate_qualname
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$calculate_qualname DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0CO@HHBFIHEH@?$DMdescriptor?$DO?4__name__?5is?5not?5a?5u@
CONST	SEGMENT
??_C@_0CO@HHBFIHEH@?$DMdescriptor?$DO?4__name__?5is?5not?5a?5u@ DB '<desc'
	DB	'riptor>.__name__ is not a unicode object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05IJBCCNFD@?$CFS?4?$CFS?$AA@
CONST	SEGMENT
??_C@_05IJBCCNFD@?$CFS?4?$CFS?$AA@ DB '%S.%S', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@KAFCPPEK@?$DMdescriptor?$DO?4__objclass__?4__qual@
CONST	SEGMENT
??_C@_0DP@KAFCPPEK@?$DMdescriptor?$DO?4__objclass__?4__qual@ DB '<descrip'
	DB	'tor>.__objclass__.__qualname__ is not a unicode object', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT calculate_qualname
_TEXT	SEGMENT
descr$ = 48
calculate_qualname PROC					; COMDAT

; 365  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 366  :     PyObject *type_qualname, *res;
; 367  :     _Py_IDENTIFIER(__qualname__);
; 368  : 
; 369  :     if (descr->d_name == NULL || !PyUnicode_Check(descr->d_name)) {

  00006	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	48 85 c0	 test	 rax, rax
  00010	0f 84 a7 00 00
	00		 je	 $LN7@calculate_
  00016	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001a	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  00024	0f 84 93 00 00
	00		 je	 $LN7@calculate_

; 373  :     }
; 374  : 
; 375  :     type_qualname = _PyObject_GetAttrId((PyObject *)descr->d_type,
; 376  :                                         &PyId___qualname__);

  0002a	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  00031	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0003a	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  0003e	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId___qualname__@?1??calculate_qualname@@9@9
  00043	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  00048	4a 03 14 c0	 add	 rdx, QWORD PTR [rax+r8*8]
  0004c	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00051	48 8b f8	 mov	 rdi, rax

; 377  :     if (type_qualname == NULL)

  00054	48 85 c0	 test	 rax, rax

; 378  :         return NULL;

  00057	74 2b		 je	 SHORT $LN12@calculate_

; 379  : 
; 380  :     if (!PyUnicode_Check(type_qualname)) {

  00059	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0005d	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  00067	75 28		 jne	 SHORT $LN5@calculate_

; 381  :         PyErr_SetString(PyExc_TypeError, "<descriptor>.__objclass__."
; 382  :                         "__qualname__ is not a unicode object");

  00069	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00070	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DP@KAFCPPEK@?$DMdescriptor?$DO?4__objclass__?4__qual@
  00077	e8 00 00 00 00	 call	 PyErr_SetString

; 383  :         Py_XDECREF(type_qualname);

  0007c	48 8b cf	 mov	 rcx, rdi
  0007f	e8 00 00 00 00	 call	 _Py_DecRef
$LN12@calculate_:

; 384  :         return NULL;

  00084	33 c0		 xor	 eax, eax
  00086	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 390  : }

  0008b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008f	5b		 pop	 rbx
  00090	c3		 ret	 0
$LN5@calculate_:

; 385  :     }
; 386  : 
; 387  :     res = PyUnicode_FromFormat("%S.%S", type_qualname, descr->d_name);

  00091	4c 8b 43 68	 mov	 r8, QWORD PTR [rbx+104]
  00095	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05IJBCCNFD@?$CFS?4?$CFS?$AA@
  0009c	48 8b d7	 mov	 rdx, rdi
  0009f	e8 00 00 00 00	 call	 PyUnicode_FromFormat

; 388  :     Py_DECREF(type_qualname);

  000a4	48 8b cf	 mov	 rcx, rdi
  000a7	48 8b d8	 mov	 rbx, rax
  000aa	e8 00 00 00 00	 call	 _Py_DecRef
  000af	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 389  :     return res;

  000b4	48 8b c3	 mov	 rax, rbx

; 390  : }

  000b7	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000bb	5b		 pop	 rbx
  000bc	c3		 ret	 0
$LN7@calculate_:

; 370  :         PyErr_SetString(PyExc_TypeError,
; 371  :                         "<descriptor>.__name__ is not a unicode object");

  000bd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@HHBFIHEH@?$DMdescriptor?$DO?4__name__?5is?5not?5a?5u@
  000cb	e8 00 00 00 00	 call	 PyErr_SetString

; 372  :         return NULL;

  000d0	33 c0		 xor	 eax, eax

; 390  : }

  000d2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d6	5b		 pop	 rbx
  000d7	c3		 ret	 0
calculate_qualname ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$descr_get_qualname DD imagerel descr_get_qualname
	DD	imagerel descr_get_qualname+126
	DD	imagerel $unwind$descr_get_qualname
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$descr_get_qualname DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\descrobject.c
xdata	ENDS
;	COMDAT descr_get_qualname
_TEXT	SEGMENT
descr$ = 64
descr_get_qualname PROC					; COMDAT

; 394  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 395  :     if (descr->d_qualname == NULL)

  0000a	48 83 79 70 00	 cmp	 QWORD PTR [rcx+112], 0
  0000f	48 8b d9	 mov	 rbx, rcx
  00012	75 09		 jne	 SHORT $LN4@descr_get_

; 396  :         descr->d_qualname = calculate_qualname(descr);

  00014	e8 00 00 00 00	 call	 calculate_qualname
  00019	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax
$LN4@descr_get_:

; 397  :     Py_XINCREF(descr->d_qualname);

  0001d	48 8b 7b 70	 mov	 rdi, QWORD PTR [rbx+112]
  00021	48 85 ff	 test	 rdi, rdi
  00024	74 4a		 je	 SHORT $LN14@descr_get_
  00026	e8 00 00 00 00	 call	 _Py_PXCTX
  0002b	85 c0		 test	 eax, eax
  0002d	75 32		 jne	 SHORT $LN12@descr_get_
  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0003d	4c 8b cf	 mov	 r9, rdi
  00040	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00046	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0004e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00053	85 c0		 test	 eax, eax
  00055	75 06		 jne	 SHORT $LN8@descr_get_
  00057	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  0005b	74 04		 je	 SHORT $LN12@descr_get_
$LN8@descr_get_:
  0005d	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN12@descr_get_:

; 398  :     return descr->d_qualname;

  00061	48 8b 43 70	 mov	 rax, QWORD PTR [rbx+112]

; 399  : }

  00065	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0006a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0006e	5f		 pop	 rdi
  0006f	c3		 ret	 0
$LN14@descr_get_:

; 398  :     return descr->d_qualname;

  00070	48 8b c7	 mov	 rax, rdi

; 399  : }

  00073	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00078	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0007c	5f		 pop	 rdi
  0007d	c3		 ret	 0
descr_get_qualname ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$member_get_doc DD imagerel member_get_doc
	DD	imagerel member_get_doc+110
	DD	imagerel $unwind$member_get_doc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$member_get_doc DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\descrobject.c
xdata	ENDS
;	COMDAT member_get_doc
_TEXT	SEGMENT
descr$ = 64
closure$ = 72
member_get_doc PROC					; COMDAT

; 415  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 416  :     if (descr->d_member->doc == NULL) {

  00004	48 8b 81 80 00
	00 00		 mov	 rax, QWORD PTR [rcx+128]
  0000b	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0000f	48 85 c9	 test	 rcx, rcx
  00012	75 51		 jne	 SHORT $LN1@member_get@2

; 417  :         Py_INCREF(Py_None);

  00014	e8 00 00 00 00	 call	 _Py_PXCTX
  00019	85 c0		 test	 eax, eax
  0001b	75 3c		 jne	 SHORT $LN5@member_get@2
  0001d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00032	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00038	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00040	e8 00 00 00 00	 call	 _PyParallel_Guard
  00045	85 c0		 test	 eax, eax
  00047	75 09		 jne	 SHORT $LN4@member_get@2
  00049	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00050	74 07		 je	 SHORT $LN5@member_get@2
$LN4@member_get@2:
  00052	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN5@member_get@2:

; 418  :         return Py_None;

  00059	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 419  :     }
; 420  :     return PyUnicode_FromString(descr->d_member->doc);
; 421  : }

  00060	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00064	c3		 ret	 0
$LN1@member_get@2:
  00065	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00069	e9 00 00 00 00	 jmp	 PyUnicode_FromString
member_get_doc ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$getset_get_doc DD imagerel getset_get_doc
	DD	imagerel getset_get_doc+110
	DD	imagerel $unwind$getset_get_doc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getset_get_doc DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\descrobject.c
xdata	ENDS
;	COMDAT getset_get_doc
_TEXT	SEGMENT
descr$ = 64
closure$ = 72
getset_get_doc PROC					; COMDAT

; 431  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 432  :     if (descr->d_getset->doc == NULL) {

  00004	48 8b 81 80 00
	00 00		 mov	 rax, QWORD PTR [rcx+128]
  0000b	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  0000f	48 85 c9	 test	 rcx, rcx
  00012	75 51		 jne	 SHORT $LN1@getset_get@2

; 433  :         Py_INCREF(Py_None);

  00014	e8 00 00 00 00	 call	 _Py_PXCTX
  00019	85 c0		 test	 eax, eax
  0001b	75 3c		 jne	 SHORT $LN5@getset_get@2
  0001d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00032	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00038	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00040	e8 00 00 00 00	 call	 _PyParallel_Guard
  00045	85 c0		 test	 eax, eax
  00047	75 09		 jne	 SHORT $LN4@getset_get@2
  00049	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00050	74 07		 je	 SHORT $LN5@getset_get@2
$LN4@getset_get@2:
  00052	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN5@getset_get@2:

; 434  :         return Py_None;

  00059	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 435  :     }
; 436  :     return PyUnicode_FromString(descr->d_getset->doc);
; 437  : }

  00060	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00064	c3		 ret	 0
$LN1@getset_get@2:
  00065	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00069	e9 00 00 00 00	 jmp	 PyUnicode_FromString
getset_get_doc ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$wrapperdescr_get_doc DD imagerel wrapperdescr_get_doc
	DD	imagerel wrapperdescr_get_doc+110
	DD	imagerel $unwind$wrapperdescr_get_doc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrapperdescr_get_doc DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\descrobject.c
xdata	ENDS
;	COMDAT wrapperdescr_get_doc
_TEXT	SEGMENT
descr$ = 64
closure$ = 72
wrapperdescr_get_doc PROC				; COMDAT

; 447  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 448  :     if (descr->d_base->doc == NULL) {

  00004	48 8b 81 80 00
	00 00		 mov	 rax, QWORD PTR [rcx+128]
  0000b	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0000f	48 85 c9	 test	 rcx, rcx
  00012	75 51		 jne	 SHORT $LN1@wrapperdes

; 449  :         Py_INCREF(Py_None);

  00014	e8 00 00 00 00	 call	 _Py_PXCTX
  00019	85 c0		 test	 eax, eax
  0001b	75 3c		 jne	 SHORT $LN5@wrapperdes
  0001d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00032	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00038	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00040	e8 00 00 00 00	 call	 _PyParallel_Guard
  00045	85 c0		 test	 eax, eax
  00047	75 09		 jne	 SHORT $LN4@wrapperdes
  00049	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00050	74 07		 je	 SHORT $LN5@wrapperdes
$LN4@wrapperdes:
  00052	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN5@wrapperdes:

; 450  :         return Py_None;

  00059	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 451  :     }
; 452  :     return PyUnicode_FromString(descr->d_base->doc);
; 453  : }

  00060	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00064	c3		 ret	 0
$LN1@wrapperdes:
  00065	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00069	e9 00 00 00 00	 jmp	 PyUnicode_FromString
wrapperdescr_get_doc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@DDOKNBOB@descr_traverse?$AA@		; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$descr_traverse DD imagerel descr_traverse
	DD	imagerel descr_traverse+97
	DD	imagerel $unwind$descr_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$descr_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0P@DDOKNBOB@descr_traverse?$AA@
CONST	SEGMENT
??_C@_0P@DDOKNBOB@descr_traverse?$AA@ DB 'descr_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT descr_traverse
_TEXT	SEGMENT
self$ = 48
visit$ = 56
arg$ = 64
descr_traverse PROC					; COMDAT

; 463  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 464  :     PyDescrObject *descr = (PyDescrObject *)self;
; 465  :     Py_VISIT(descr->d_type);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN3@descr_trav
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@DDOKNBOB@descr_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 d1 01 00
	00		 mov	 r8d, 465		; 000001d1H
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@descr_trav:
  0003d	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN5@descr_trav
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 02		 jne	 SHORT $LN7@descr_trav
$LN5@descr_trav:

; 466  :     return 0;

  0004f	33 c0		 xor	 eax, eax
$LN7@descr_trav:

; 467  : }

  00051	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00056	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0005b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005f	5f		 pop	 rdi
  00060	c3		 ret	 0
descr_traverse ENDP
_TEXT	ENDS
EXTRN	PyUnicode_InternFromString:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$descr_new DD imagerel descr_new
	DD	imagerel descr_new+174
	DD	imagerel $unwind$descr_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$descr_new DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\descrobject.c
xdata	ENDS
;	COMDAT descr_new
_TEXT	SEGMENT
descrtype$ = 64
type$ = 72
name$ = 80
descr_new PROC						; COMDAT

; 657  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fa	 mov	 rdi, rdx

; 658  :     PyDescrObject *descr;
; 659  : 
; 660  :     descr = (PyDescrObject *)PyType_GenericAlloc(descrtype, 0);

  00012	33 d2		 xor	 edx, edx
  00014	49 8b f0	 mov	 rsi, r8
  00017	e8 00 00 00 00	 call	 PyType_GenericAlloc
  0001c	48 8b d8	 mov	 rbx, rax

; 661  :     if (descr != NULL) {

  0001f	48 85 c0	 test	 rax, rax
  00022	74 7a		 je	 SHORT $LN1@descr_new

; 662  :         Py_XINCREF(type);

  00024	48 85 ff	 test	 rdi, rdi
  00027	74 3b		 je	 SHORT $LN5@descr_new
  00029	e8 00 00 00 00	 call	 _Py_PXCTX
  0002e	85 c0		 test	 eax, eax
  00030	75 32		 jne	 SHORT $LN5@descr_new
  00032	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00040	4c 8b cf	 mov	 r9, rdi
  00043	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00049	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00051	e8 00 00 00 00	 call	 _PyParallel_Guard
  00056	85 c0		 test	 eax, eax
  00058	75 06		 jne	 SHORT $LN10@descr_new
  0005a	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  0005e	74 04		 je	 SHORT $LN5@descr_new
$LN10@descr_new:
  00060	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN5@descr_new:

; 663  :         descr->d_type = type;
; 664  :         descr->d_name = PyUnicode_InternFromString(name);

  00064	48 8b ce	 mov	 rcx, rsi
  00067	48 89 7b 60	 mov	 QWORD PTR [rbx+96], rdi
  0006b	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00070	48 89 43 68	 mov	 QWORD PTR [rbx+104], rax

; 665  :         if (descr->d_name == NULL) {

  00074	48 85 c0	 test	 rax, rax
  00077	75 1a		 jne	 SHORT $LN2@descr_new

; 666  :             Py_DECREF(descr);

  00079	48 8b cb	 mov	 rcx, rbx
  0007c	e8 00 00 00 00	 call	 _Py_DecRef

; 671  :         }
; 672  :     }
; 673  :     return descr;

  00081	33 c0		 xor	 eax, eax

; 674  : }

  00083	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00088	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0008d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00091	5f		 pop	 rdi
  00092	c3		 ret	 0
$LN2@descr_new:

; 667  :             descr = NULL;
; 668  :         }
; 669  :         else {
; 670  :             descr->d_qualname = NULL;

  00093	48 c7 43 70 00
	00 00 00	 mov	 QWORD PTR [rbx+112], 0

; 671  :         }
; 672  :     }
; 673  :     return descr;

  0009b	48 8b c3	 mov	 rax, rbx
$LN1@descr_new:

; 674  : }

  0009e	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000a3	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000a8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ac	5f		 pop	 rdi
  000ad	c3		 ret	 0
descr_new ENDP
_TEXT	ENDS
PUBLIC	PyDescr_NewMethod
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDescr_NewMethod DD imagerel $LN5
	DD	imagerel $LN5+45
	DD	imagerel $unwind$PyDescr_NewMethod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDescr_NewMethod DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyDescr_NewMethod
_TEXT	SEGMENT
type$ = 48
method$ = 56
PyDescr_NewMethod PROC					; COMDAT

; 678  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 679  :     PyMethodDescrObject *descr;
; 680  : 
; 681  :     descr = (PyMethodDescrObject *)descr_new(&PyMethodDescr_Type,
; 682  :                                              type, method->ml_name);

  00006	4c 8b 02	 mov	 r8, QWORD PTR [rdx]
  00009	48 8b da	 mov	 rbx, rdx
  0000c	48 8b d1	 mov	 rdx, rcx
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyMethodDescr_Type
  00016	e8 00 00 00 00	 call	 descr_new

; 683  :     if (descr != NULL)

  0001b	48 85 c0	 test	 rax, rax
  0001e	74 07		 je	 SHORT $LN4@PyDescr_Ne

; 684  :         descr->d_method = method;

  00020	48 89 98 80 00
	00 00		 mov	 QWORD PTR [rax+128], rbx
$LN4@PyDescr_Ne:

; 685  :     return (PyObject *)descr;
; 686  : }

  00027	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002b	5b		 pop	 rbx
  0002c	c3		 ret	 0
PyDescr_NewMethod ENDP
_TEXT	ENDS
PUBLIC	PyDescr_NewClassMethod
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDescr_NewClassMethod DD imagerel $LN5
	DD	imagerel $LN5+45
	DD	imagerel $unwind$PyDescr_NewClassMethod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDescr_NewClassMethod DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyDescr_NewClassMethod
_TEXT	SEGMENT
type$ = 48
method$ = 56
PyDescr_NewClassMethod PROC				; COMDAT

; 690  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 691  :     PyMethodDescrObject *descr;
; 692  : 
; 693  :     descr = (PyMethodDescrObject *)descr_new(&PyClassMethodDescr_Type,
; 694  :                                              type, method->ml_name);

  00006	4c 8b 02	 mov	 r8, QWORD PTR [rdx]
  00009	48 8b da	 mov	 rbx, rdx
  0000c	48 8b d1	 mov	 rdx, rcx
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyClassMethodDescr_Type
  00016	e8 00 00 00 00	 call	 descr_new

; 695  :     if (descr != NULL)

  0001b	48 85 c0	 test	 rax, rax
  0001e	74 07		 je	 SHORT $LN4@PyDescr_Ne@2

; 696  :         descr->d_method = method;

  00020	48 89 98 80 00
	00 00		 mov	 QWORD PTR [rax+128], rbx
$LN4@PyDescr_Ne@2:

; 697  :     return (PyObject *)descr;
; 698  : }

  00027	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002b	5b		 pop	 rbx
  0002c	c3		 ret	 0
PyDescr_NewClassMethod ENDP
_TEXT	ENDS
PUBLIC	PyDescr_NewMember
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDescr_NewMember DD imagerel $LN5
	DD	imagerel $LN5+45
	DD	imagerel $unwind$PyDescr_NewMember
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDescr_NewMember DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyDescr_NewMember
_TEXT	SEGMENT
type$ = 48
member$ = 56
PyDescr_NewMember PROC					; COMDAT

; 702  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 703  :     PyMemberDescrObject *descr;
; 704  : 
; 705  :     descr = (PyMemberDescrObject *)descr_new(&PyMemberDescr_Type,
; 706  :                                              type, member->name);

  00006	4c 8b 02	 mov	 r8, QWORD PTR [rdx]
  00009	48 8b da	 mov	 rbx, rdx
  0000c	48 8b d1	 mov	 rdx, rcx
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyMemberDescr_Type
  00016	e8 00 00 00 00	 call	 descr_new

; 707  :     if (descr != NULL)

  0001b	48 85 c0	 test	 rax, rax
  0001e	74 07		 je	 SHORT $LN4@PyDescr_Ne@3

; 708  :         descr->d_member = member;

  00020	48 89 98 80 00
	00 00		 mov	 QWORD PTR [rax+128], rbx
$LN4@PyDescr_Ne@3:

; 709  :     return (PyObject *)descr;
; 710  : }

  00027	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002b	5b		 pop	 rbx
  0002c	c3		 ret	 0
PyDescr_NewMember ENDP
_TEXT	ENDS
PUBLIC	PyDescr_NewGetSet
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDescr_NewGetSet DD imagerel $LN5
	DD	imagerel $LN5+45
	DD	imagerel $unwind$PyDescr_NewGetSet
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDescr_NewGetSet DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyDescr_NewGetSet
_TEXT	SEGMENT
type$ = 48
getset$ = 56
PyDescr_NewGetSet PROC					; COMDAT

; 714  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 715  :     PyGetSetDescrObject *descr;
; 716  : 
; 717  :     descr = (PyGetSetDescrObject *)descr_new(&PyGetSetDescr_Type,
; 718  :                                              type, getset->name);

  00006	4c 8b 02	 mov	 r8, QWORD PTR [rdx]
  00009	48 8b da	 mov	 rbx, rdx
  0000c	48 8b d1	 mov	 rdx, rcx
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyGetSetDescr_Type
  00016	e8 00 00 00 00	 call	 descr_new

; 719  :     if (descr != NULL)

  0001b	48 85 c0	 test	 rax, rax
  0001e	74 07		 je	 SHORT $LN4@PyDescr_Ne@4

; 720  :         descr->d_getset = getset;

  00020	48 89 98 80 00
	00 00		 mov	 QWORD PTR [rax+128], rbx
$LN4@PyDescr_Ne@4:

; 721  :     return (PyObject *)descr;
; 722  : }

  00027	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002b	5b		 pop	 rbx
  0002c	c3		 ret	 0
PyDescr_NewGetSet ENDP
_TEXT	ENDS
PUBLIC	PyDescr_NewWrapper
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDescr_NewWrapper DD imagerel $LN5
	DD	imagerel $LN5+64
	DD	imagerel $unwind$PyDescr_NewWrapper
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDescr_NewWrapper DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyDescr_NewWrapper
_TEXT	SEGMENT
type$ = 48
base$ = 56
wrapped$ = 64
PyDescr_NewWrapper PROC					; COMDAT

; 726  : {

$LN5:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	49 8b f8	 mov	 rdi, r8

; 727  :     PyWrapperDescrObject *descr;
; 728  : 
; 729  :     descr = (PyWrapperDescrObject *)descr_new(&PyWrapperDescr_Type,
; 730  :                                              type, base->name);

  0000d	4c 8b 02	 mov	 r8, QWORD PTR [rdx]
  00010	48 8b da	 mov	 rbx, rdx
  00013	48 8b d1	 mov	 rdx, rcx
  00016	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyWrapperDescr_Type
  0001d	e8 00 00 00 00	 call	 descr_new

; 731  :     if (descr != NULL) {

  00022	48 85 c0	 test	 rax, rax
  00025	74 0e		 je	 SHORT $LN4@PyDescr_Ne@5

; 732  :         descr->d_base = base;

  00027	48 89 98 80 00
	00 00		 mov	 QWORD PTR [rax+128], rbx

; 733  :         descr->d_wrapped = wrapped;

  0002e	48 89 b8 88 00
	00 00		 mov	 QWORD PTR [rax+136], rdi
$LN4@PyDescr_Ne@5:

; 734  :     }
; 735  :     return (PyObject *)descr;
; 736  : }

  00035	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003e	5f		 pop	 rdi
  0003f	c3		 ret	 0
PyDescr_NewWrapper ENDP
_TEXT	ENDS
EXTRN	PyObject_Size:PROC
; Function compile flags: /Ogtpy
;	COMDAT mappingproxy_len
_TEXT	SEGMENT
pp$ = 8
mappingproxy_len PROC					; COMDAT

; 752  :     return PyObject_Size(pp->mapping);

  00000	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]

; 753  : }

  00004	e9 00 00 00 00	 jmp	 PyObject_Size
mappingproxy_len ENDP
_TEXT	ENDS
EXTRN	PyObject_GetItem:PROC
; Function compile flags: /Ogtpy
;	COMDAT mappingproxy_getitem
_TEXT	SEGMENT
pp$ = 8
key$ = 16
mappingproxy_getitem PROC				; COMDAT

; 758  :     return PyObject_GetItem(pp->mapping, key);

  00000	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]

; 759  : }

  00004	e9 00 00 00 00	 jmp	 PyObject_GetItem
mappingproxy_getitem ENDP
_TEXT	ENDS
EXTRN	PyDict_Contains:PROC
EXTRN	PySequence_Contains:PROC
EXTRN	PyDict_Type:BYTE
; Function compile flags: /Ogtpy
;	COMDAT mappingproxy_contains
_TEXT	SEGMENT
pp$ = 8
key$ = 16
mappingproxy_contains PROC				; COMDAT

; 770  :     if (PyDict_CheckExact(pp->mapping))

  00000	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00004	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  0000b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0000f	74 0b		 je	 SHORT $LN2@mappingpro
  00011	48 39 41 38	 cmp	 QWORD PTR [rcx+56], rax
  00015	74 05		 je	 SHORT $LN2@mappingpro

; 771  :         return PyDict_Contains(pp->mapping, key);
; 772  :     else
; 773  :         return PySequence_Contains(pp->mapping, key);
; 774  : }

  00017	e9 00 00 00 00	 jmp	 PySequence_Contains
$LN2@mappingpro:
  0001c	e9 00 00 00 00	 jmp	 PyDict_Contains
mappingproxy_contains ENDP
_TEXT	ENDS
PUBLIC	??_C@_04DEJLHBFK@?$CIOO?$CJ?$AA@		; `string'
EXTRN	_PyObject_CallMethodId:PROC
EXTRN	PyArg_UnpackTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mappingproxy_get DD imagerel mappingproxy_get
	DD	imagerel mappingproxy_get+142
	DD	imagerel $unwind$mappingproxy_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mappingproxy_get DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_04DEJLHBFK@?$CIOO?$CJ?$AA@
CONST	SEGMENT
??_C@_04DEJLHBFK@?$CIOO?$CJ?$AA@ DB '(OO)', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mappingproxy_get
_TEXT	SEGMENT
pp$ = 64
args$ = 72
def$ = 80
key$ = 88
mappingproxy_get PROC					; COMDAT

; 791  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx
  00009	48 8b c2	 mov	 rax, rdx

; 792  :     PyObject *key, *def = Py_None;

  0000c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00013	48 89 4c 24 50	 mov	 QWORD PTR def$[rsp], rcx

; 793  :     _Py_IDENTIFIER(get);
; 794  : 
; 795  :     if (!PyArg_UnpackTuple(args, "get", 1, 2, &key, &def))

  00018	48 8d 4c 24 50	 lea	 rcx, QWORD PTR def$[rsp]
  0001d	41 b9 02 00 00
	00		 mov	 r9d, 2
  00023	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00028	48 8d 4c 24 58	 lea	 rcx, QWORD PTR key$[rsp]
  0002d	45 8d 41 ff	 lea	 r8d, QWORD PTR [r9-1]
  00031	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03HNAFFKGA@get?$AA@
  0003d	48 8b c8	 mov	 rcx, rax
  00040	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00045	85 c0		 test	 eax, eax
  00047	75 08		 jne	 SHORT $LN1@mappingpro@2

; 796  :         return NULL;

  00049	33 c0		 xor	 eax, eax

; 798  : }

  0004b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0004f	5b		 pop	 rbx
  00050	c3		 ret	 0
$LN1@mappingpro@2:

; 797  :     return _PyObject_CallMethodId(pp->mapping, &PyId_get, "(OO)", key, def);

  00051	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00057	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00060	4c 8b 4c 24 58	 mov	 r9, QWORD PTR key$[rsp]
  00065	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_get@?1??mappingproxy_get@@9@9
  0006a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04DEJLHBFK@?$CIOO?$CJ?$AA@
  00071	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  00075	48 8b 44 24 50	 mov	 rax, QWORD PTR def$[rsp]
  0007a	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  0007e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00083	e8 00 00 00 00	 call	 _PyObject_CallMethodId

; 798  : }

  00088	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008c	5b		 pop	 rbx
  0008d	c3		 ret	 0
mappingproxy_get ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT mappingproxy_keys
_TEXT	SEGMENT
pp$ = 8
mappingproxy_keys PROC					; COMDAT

; 803  :     _Py_IDENTIFIER(keys);
; 804  :     return _PyObject_CallMethodId(pp->mapping, &PyId_keys, NULL);

  00000	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  00007	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00010	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00014	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_keys@?1??mappingproxy_keys@@9@9
  00019	4a 03 14 c0	 add	 rdx, QWORD PTR [rax+r8*8]
  0001d	45 33 c0	 xor	 r8d, r8d

; 805  : }

  00020	e9 00 00 00 00	 jmp	 _PyObject_CallMethodId
mappingproxy_keys ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT mappingproxy_values
_TEXT	SEGMENT
pp$ = 8
mappingproxy_values PROC				; COMDAT

; 810  :     _Py_IDENTIFIER(values);
; 811  :     return _PyObject_CallMethodId(pp->mapping, &PyId_values, NULL);

  00000	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  00007	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00010	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00014	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_values@?1??mappingproxy_values@@9@9
  00019	4a 03 14 c0	 add	 rdx, QWORD PTR [rax+r8*8]
  0001d	45 33 c0	 xor	 r8d, r8d

; 812  : }

  00020	e9 00 00 00 00	 jmp	 _PyObject_CallMethodId
mappingproxy_values ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT mappingproxy_items
_TEXT	SEGMENT
pp$ = 8
mappingproxy_items PROC					; COMDAT

; 817  :     _Py_IDENTIFIER(items);
; 818  :     return _PyObject_CallMethodId(pp->mapping, &PyId_items, NULL);

  00000	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  00007	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00010	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00014	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_items@?1??mappingproxy_items@@9@9
  00019	4a 03 14 c0	 add	 rdx, QWORD PTR [rax+r8*8]
  0001d	45 33 c0	 xor	 r8d, r8d

; 819  : }

  00020	e9 00 00 00 00	 jmp	 _PyObject_CallMethodId
mappingproxy_items ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT mappingproxy_copy
_TEXT	SEGMENT
pp$ = 8
mappingproxy_copy PROC					; COMDAT

; 824  :     _Py_IDENTIFIER(copy);
; 825  :     return _PyObject_CallMethodId(pp->mapping, &PyId_copy, NULL);

  00000	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  00007	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00010	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00014	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_copy@?1??mappingproxy_copy@@9@9
  00019	4a 03 14 c0	 add	 rdx, QWORD PTR [rax+r8*8]
  0001d	45 33 c0	 xor	 r8d, r8d

; 826  : }

  00020	e9 00 00 00 00	 jmp	 _PyObject_CallMethodId
mappingproxy_copy ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@LLNAKNOP@mappingproxy_dealloc?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$mappingproxy_dealloc DD imagerel mappingproxy_dealloc
	DD	imagerel mappingproxy_dealloc+155
	DD	imagerel $unwind$mappingproxy_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mappingproxy_dealloc DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0BF@LLNAKNOP@mappingproxy_dealloc?$AA@
CONST	SEGMENT
??_C@_0BF@LLNAKNOP@mappingproxy_dealloc?$AA@ DB 'mappingproxy_dealloc', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mappingproxy_dealloc
_TEXT	SEGMENT
pp$ = 64
mappingproxy_dealloc PROC				; COMDAT

; 848  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 849  :     _PyObject_GC_UNTRACK(pp);

  00009	4c 8b c9	 mov	 r9, rcx
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@LLNAKNOP@mappingproxy_dealloc?$AA@
  0001a	41 b8 51 03 00
	00		 mov	 r8d, 849		; 00000351H
  00020	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00028	e8 00 00 00 00	 call	 _PyParallel_Guard
  0002d	85 c0		 test	 eax, eax
  0002f	75 54		 jne	 SHORT $LN1@mappingpro@3
  00031	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@LLNAKNOP@mappingproxy_dealloc?$AA@
  0003f	4c 8b cb	 mov	 r9, rbx
  00042	41 b8 51 03 00
	00		 mov	 r8d, 849		; 00000351H
  00048	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00050	e8 00 00 00 00	 call	 _PyParallel_Guard
  00055	85 c0		 test	 eax, eax
  00057	74 04		 je	 SHORT $LN7@mappingpro@3
  00059	33 d2		 xor	 edx, edx
  0005b	eb 04		 jmp	 SHORT $LN8@mappingpro@3
$LN7@mappingpro@3:
  0005d	48 8d 53 e8	 lea	 rdx, QWORD PTR [rbx-24]
$LN8@mappingpro@3:
  00061	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00064	48 8b 4a 08	 mov	 rcx, QWORD PTR [rdx+8]
  00068	48 c7 42 10 fe
	ff ff ff	 mov	 QWORD PTR [rdx+16], -2
  00070	48 89 01	 mov	 QWORD PTR [rcx], rax
  00073	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  00076	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  0007a	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  0007e	48 c7 02 00 00
	00 00		 mov	 QWORD PTR [rdx], 0
$LN1@mappingpro@3:

; 850  :     Py_DECREF(pp->mapping);

  00085	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00089	e8 00 00 00 00	 call	 _Py_DecRef

; 851  :     PyObject_GC_Del(pp);

  0008e	48 8b cb	 mov	 rcx, rbx

; 852  : }

  00091	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00095	5b		 pop	 rbx
  00096	e9 00 00 00 00	 jmp	 PyObject_GC_Del
mappingproxy_dealloc ENDP
_TEXT	ENDS
EXTRN	PyObject_GetIter:PROC
; Function compile flags: /Ogtpy
;	COMDAT mappingproxy_getiter
_TEXT	SEGMENT
pp$ = 8
mappingproxy_getiter PROC				; COMDAT

; 857  :     return PyObject_GetIter(pp->mapping);

  00000	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]

; 858  : }

  00004	e9 00 00 00 00	 jmp	 PyObject_GetIter
mappingproxy_getiter ENDP
_TEXT	ENDS
EXTRN	PyObject_Str:PROC
; Function compile flags: /Ogtpy
;	COMDAT mappingproxy_str
_TEXT	SEGMENT
pp$ = 8
mappingproxy_str PROC					; COMDAT

; 863  :     return PyObject_Str(pp->mapping);

  00000	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]

; 864  : }

  00004	e9 00 00 00 00	 jmp	 PyObject_Str
mappingproxy_str ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@ICOFCDNP@mappingproxy?$CI?$CFR?$CJ?$AA@ ; `string'
;	COMDAT ??_C@_0BB@ICOFCDNP@mappingproxy?$CI?$CFR?$CJ?$AA@
CONST	SEGMENT
??_C@_0BB@ICOFCDNP@mappingproxy?$CI?$CFR?$CJ?$AA@ DB 'mappingproxy(%R)', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mappingproxy_repr
_TEXT	SEGMENT
pp$ = 8
mappingproxy_repr PROC					; COMDAT

; 869  :     return PyUnicode_FromFormat("mappingproxy(%R)", pp->mapping);

  00000	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@ICOFCDNP@mappingproxy?$CI?$CFR?$CJ?$AA@

; 870  : }

  0000b	e9 00 00 00 00	 jmp	 PyUnicode_FromFormat
mappingproxy_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@ODDCKFFL@mappingproxy_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$mappingproxy_traverse DD imagerel mappingproxy_traverse
	DD	imagerel mappingproxy_traverse+97
	DD	imagerel $unwind$mappingproxy_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mappingproxy_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BG@ODDCKFFL@mappingproxy_traverse?$AA@
CONST	SEGMENT
??_C@_0BG@ODDCKFFL@mappingproxy_traverse?$AA@ DB 'mappingproxy_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mappingproxy_traverse
_TEXT	SEGMENT
self$ = 48
visit$ = 56
arg$ = 64
mappingproxy_traverse PROC				; COMDAT

; 874  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 875  :     mappingproxyobject *pp = (mappingproxyobject *)self;
; 876  :     Py_VISIT(pp->mapping);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN3@mappingpro@4
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@ODDCKFFL@mappingproxy_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 6c 03 00
	00		 mov	 r8d, 876		; 0000036cH
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@mappingpro@4:
  0003d	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN5@mappingpro@4
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 02		 jne	 SHORT $LN7@mappingpro@4
$LN5@mappingpro@4:

; 877  :     return 0;

  0004f	33 c0		 xor	 eax, eax
$LN7@mappingpro@4:

; 878  : }

  00051	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00056	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0005b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005f	5f		 pop	 rdi
  00060	c3		 ret	 0
mappingproxy_traverse ENDP
_TEXT	ENDS
EXTRN	PyObject_RichCompare:PROC
; Function compile flags: /Ogtpy
;	COMDAT mappingproxy_richcompare
_TEXT	SEGMENT
v$ = 8
w$ = 16
op$ = 24
mappingproxy_richcompare PROC				; COMDAT

; 883  :     return PyObject_RichCompare(v->mapping, w, op);

  00000	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]

; 884  : }

  00004	e9 00 00 00 00	 jmp	 PyObject_RichCompare
mappingproxy_richcompare ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DC@PIKMGBAG@mappingproxy?$CI?$CJ?5argument?5must?5be?5@ ; `string'
EXTRN	PyMapping_Check:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mappingproxy_check_mapping DD imagerel mappingproxy_check_mapping
	DD	imagerel mappingproxy_check_mapping+84
	DD	imagerel $unwind$mappingproxy_check_mapping
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mappingproxy_check_mapping DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0DC@PIKMGBAG@mappingproxy?$CI?$CJ?5argument?5must?5be?5@
CONST	SEGMENT
??_C@_0DC@PIKMGBAG@mappingproxy?$CI?$CJ?5argument?5must?5be?5@ DB 'mappin'
	DB	'gproxy() argument must be a mapping, not %s', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mappingproxy_check_mapping
_TEXT	SEGMENT
mapping$ = 48
mappingproxy_check_mapping PROC				; COMDAT

; 888  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 889  :     if (!PyMapping_Check(mapping)
; 890  :         || PyList_Check(mapping)
; 891  :         || PyTuple_Check(mapping)) {

  00009	e8 00 00 00 00	 call	 PyMapping_Check
  0000e	85 c0		 test	 eax, eax
  00010	74 1e		 je	 SHORT $LN1@mappingpro@5
  00012	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00016	8b 90 00 01 00
	00		 mov	 edx, DWORD PTR [rax+256]
  0001c	0f ba e2 19	 bt	 edx, 25
  00020	72 0e		 jb	 SHORT $LN1@mappingpro@5
  00022	0f ba e2 1a	 bt	 edx, 26
  00026	72 08		 jb	 SHORT $LN1@mappingpro@5

; 896  :     }
; 897  :     return 0;

  00028	33 c0		 xor	 eax, eax

; 898  : }

  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5b		 pop	 rbx
  0002f	c3		 ret	 0
$LN1@mappingpro@5:

; 892  :         PyErr_Format(PyExc_TypeError,
; 893  :                     "mappingproxy() argument must be a mapping, not %s",
; 894  :                     Py_TYPE(mapping)->tp_name);

  00030	4c 8b 43 58	 mov	 r8, QWORD PTR [rbx+88]
  00034	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0003b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@PIKMGBAG@mappingproxy?$CI?$CJ?5argument?5must?5be?5@
  00042	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00046	e8 00 00 00 00	 call	 PyErr_Format

; 895  :         return -1;

  0004b	83 c8 ff	 or	 eax, -1

; 898  : }

  0004e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00052	5b		 pop	 rbx
  00053	c3		 ret	 0
mappingproxy_check_mapping ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ ; `string'
PUBLIC	??_C@_0BB@IABOEDPD@mappingproxy_new?$AA@	; `string'
PUBLIC	??_C@_0P@JCHMCIK@O?3mappingproxy?$AA@		; `string'
EXTRN	_PyGC_generation0:QWORD
EXTRN	Py_FatalError:PROC
EXTRN	_PyObject_GC_New:PROC
EXTRN	_PxObject_New:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mappingproxy_new DD imagerel mappingproxy_new
	DD	imagerel mappingproxy_new+71
	DD	imagerel $unwind$mappingproxy_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$mappingproxy_new DD imagerel mappingproxy_new+71
	DD	imagerel mappingproxy_new+122
	DD	imagerel $chain$0$mappingproxy_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$mappingproxy_new DD imagerel mappingproxy_new+122
	DD	imagerel mappingproxy_new+204
	DD	imagerel $chain$2$mappingproxy_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$mappingproxy_new DD imagerel mappingproxy_new+204
	DD	imagerel mappingproxy_new+305
	DD	imagerel $chain$3$mappingproxy_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$mappingproxy_new DD imagerel mappingproxy_new+305
	DD	imagerel mappingproxy_new+318
	DD	imagerel $chain$4$mappingproxy_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$mappingproxy_new DD 021H
	DD	imagerel mappingproxy_new+122
	DD	imagerel mappingproxy_new+204
	DD	imagerel $chain$2$mappingproxy_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$mappingproxy_new DD 020521H
	DD	083405H
	DD	imagerel mappingproxy_new+122
	DD	imagerel mappingproxy_new+204
	DD	imagerel $chain$2$mappingproxy_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$mappingproxy_new DD 020021H
	DD	067400H
	DD	imagerel mappingproxy_new
	DD	imagerel mappingproxy_new+71
	DD	imagerel $unwind$mappingproxy_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$mappingproxy_new DD 020521H
	DD	067405H
	DD	imagerel mappingproxy_new
	DD	imagerel mappingproxy_new+71
	DD	imagerel $unwind$mappingproxy_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mappingproxy_new DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
CONST	SEGMENT
??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ DB 'GC object alread'
	DB	'y tracked', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IABOEDPD@mappingproxy_new?$AA@
CONST	SEGMENT
??_C@_0BB@IABOEDPD@mappingproxy_new?$AA@ DB 'mappingproxy_new', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JCHMCIK@O?3mappingproxy?$AA@
CONST	SEGMENT
??_C@_0P@JCHMCIK@O?3mappingproxy?$AA@ DB 'O:mappingproxy', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mappingproxy_new
_TEXT	SEGMENT
type$ = 64
args$ = 72
kwds$ = 80
mapping$ = 88
mappingproxy_new PROC					; COMDAT

; 902  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	49 8b c0	 mov	 rax, r8
  00007	4c 8b d2	 mov	 r10, rdx

; 903  :     static char *kwlist[] = {"mapping", NULL};
; 904  :     PyObject *mapping;
; 905  :     mappingproxyobject *mappingproxy;
; 906  : 
; 907  :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O:mappingproxy",
; 908  :                                      kwlist, &mapping))

  0000a	48 8d 4c 24 58	 lea	 rcx, QWORD PTR mapping$[rsp]
  0000f	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00014	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??mappingproxy_new@@9@9
  0001b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@JCHMCIK@O?3mappingproxy?$AA@
  00022	49 8b ca	 mov	 rcx, r10
  00025	48 8b d0	 mov	 rdx, rax
  00028	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  0002d	85 c0		 test	 eax, eax
  0002f	75 07		 jne	 SHORT $LN8@mappingpro@6
$LN17@mappingpro@6:

; 909  :         return NULL;

  00031	33 c0		 xor	 eax, eax

; 921  : }

  00033	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00037	c3		 ret	 0
$LN8@mappingpro@6:

; 910  : 
; 911  :     if (mappingproxy_check_mapping(mapping) == -1)

  00038	48 8b 4c 24 58	 mov	 rcx, QWORD PTR mapping$[rsp]
  0003d	e8 00 00 00 00	 call	 mappingproxy_check_mapping
  00042	83 f8 ff	 cmp	 eax, -1

; 912  :         return NULL;

  00045	74 ea		 je	 SHORT $LN17@mappingpro@6

; 913  : 
; 914  :     mappingproxy = PyObject_GC_New(mappingproxyobject, &PyDictProxy_Type);

  00047	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  0004c	e8 00 00 00 00	 call	 _Py_PXCTX
  00051	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyDictProxy_Type
  00058	85 c0		 test	 eax, eax
  0005a	74 07		 je	 SHORT $LN11@mappingpro@6
  0005c	e8 00 00 00 00	 call	 _PxObject_New
  00061	eb 05		 jmp	 SHORT $LN16@mappingpro@6
$LN11@mappingpro@6:
  00063	e8 00 00 00 00	 call	 _PyObject_GC_New
$LN16@mappingpro@6:
  00068	48 8b f8	 mov	 rdi, rax

; 915  :     if (mappingproxy == NULL)

  0006b	48 85 c0	 test	 rax, rax
  0006e	75 0a		 jne	 SHORT $LN6@mappingpro@6
  00070	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 921  : }

  00075	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00079	c3		 ret	 0
$LN6@mappingpro@6:

; 916  :         return NULL;
; 917  :     Py_INCREF(mapping);

  0007a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR mapping$[rsp]
  0007f	e8 00 00 00 00	 call	 _Py_IncRef

; 918  :     mappingproxy->mapping = mapping;

  00084	4c 8b 5c 24 58	 mov	 r11, QWORD PTR mapping$[rsp]

; 919  :     _PyObject_GC_TRACK(mappingproxy);

  00089	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  00090	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@IABOEDPD@mappingproxy_new?$AA@
  00097	4c 8b cf	 mov	 r9, rdi
  0009a	41 b8 97 03 00
	00		 mov	 r8d, 919		; 00000397H
  000a0	4c 89 5f 60	 mov	 QWORD PTR [rdi+96], r11
  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b1	85 c0		 test	 eax, eax
  000b3	75 7c		 jne	 SHORT $LN2@mappingpro@6
  000b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  000bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@IABOEDPD@mappingproxy_new?$AA@
  000c3	4c 8b cf	 mov	 r9, rdi
  000c6	41 b8 97 03 00
	00		 mov	 r8d, 919		; 00000397H
  000cc	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  000d1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d9	e8 00 00 00 00	 call	 _PyParallel_Guard
  000de	85 c0		 test	 eax, eax
  000e0	74 04		 je	 SHORT $LN13@mappingpro@6
  000e2	33 db		 xor	 ebx, ebx
  000e4	eb 04		 jmp	 SHORT $LN14@mappingpro@6
$LN13@mappingpro@6:
  000e6	48 8d 5f e8	 lea	 rbx, QWORD PTR [rdi-24]
$LN14@mappingpro@6:
  000ea	48 83 7b 10 fe	 cmp	 QWORD PTR [rbx+16], -2
  000ef	74 0c		 je	 SHORT $LN1@mappingpro@6
  000f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  000f8	e8 00 00 00 00	 call	 Py_FatalError
$LN1@mappingpro@6:
  000fd	48 c7 43 10 fd
	ff ff ff	 mov	 QWORD PTR [rbx+16], -3
  00105	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  0010c	48 89 03	 mov	 QWORD PTR [rbx], rax
  0010f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00116	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0011a	48 89 4b 08	 mov	 QWORD PTR [rbx+8], rcx
  0011e	48 89 19	 mov	 QWORD PTR [rcx], rbx
  00121	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00128	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  0012c	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN2@mappingpro@6:

; 920  :     return (PyObject *)mappingproxy;

  00131	48 8b c7	 mov	 rax, rdi
  00134	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 921  : }

  00139	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0013d	c3		 ret	 0
mappingproxy_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@BJLNAKHP@PyDictProxy_New?$AA@		; `string'
PUBLIC	PyDictProxy_New
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyDictProxy_New DD imagerel $LN19
	DD	imagerel $LN19+303
	DD	imagerel $unwind$PyDictProxy_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDictProxy_New DD 042001H
	DD	087420H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0BA@BJLNAKHP@PyDictProxy_New?$AA@
CONST	SEGMENT
??_C@_0BA@BJLNAKHP@PyDictProxy_New?$AA@ DB 'PyDictProxy_New', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\descrobject.c
CONST	ENDS
;	COMDAT PyDictProxy_New
_TEXT	SEGMENT
mapping$ = 64
PyDictProxy_New PROC					; COMDAT

; 967  : {

$LN19:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 968  :     mappingproxyobject *pp;
; 969  : 
; 970  :     if (mappingproxy_check_mapping(mapping) == -1)

  00009	e8 00 00 00 00	 call	 mappingproxy_check_mapping
  0000e	83 f8 ff	 cmp	 eax, -1
  00011	75 08		 jne	 SHORT $LN7@PyDictProx

; 971  :         return NULL;

  00013	33 c0		 xor	 eax, eax

; 980  : }

  00015	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00019	5b		 pop	 rbx
  0001a	c3		 ret	 0
$LN7@PyDictProx:
  0001b	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi

; 972  : 
; 973  :     pp = PyObject_GC_New(mappingproxyobject, &PyDictProxy_Type);

  00020	e8 00 00 00 00	 call	 _Py_PXCTX
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyDictProxy_Type
  0002c	85 c0		 test	 eax, eax
  0002e	74 07		 je	 SHORT $LN10@PyDictProx
  00030	e8 00 00 00 00	 call	 _PxObject_New
  00035	eb 05		 jmp	 SHORT $LN18@PyDictProx
$LN10@PyDictProx:
  00037	e8 00 00 00 00	 call	 _PyObject_GC_New
$LN18@PyDictProx:
  0003c	48 8b f8	 mov	 rdi, rax

; 974  :     if (pp != NULL) {

  0003f	48 85 c0	 test	 rax, rax
  00042	0f 84 d9 00 00
	00		 je	 $LN2@PyDictProx

; 975  :         Py_INCREF(mapping);

  00048	e8 00 00 00 00	 call	 _Py_PXCTX
  0004d	85 c0		 test	 eax, eax
  0004f	75 32		 jne	 SHORT $LN15@PyDictProx
  00051	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00058	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0005f	4c 8b cb	 mov	 r9, rbx
  00062	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00068	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00070	e8 00 00 00 00	 call	 _PyParallel_Guard
  00075	85 c0		 test	 eax, eax
  00077	75 06		 jne	 SHORT $LN14@PyDictProx
  00079	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0007d	74 04		 je	 SHORT $LN15@PyDictProx
$LN14@PyDictProx:
  0007f	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN15@PyDictProx:

; 976  :         pp->mapping = mapping;
; 977  :         _PyObject_GC_TRACK(pp);

  00083	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  0008a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@BJLNAKHP@PyDictProxy_New?$AA@
  00091	4c 8b cf	 mov	 r9, rdi
  00094	41 b8 d1 03 00
	00		 mov	 r8d, 977		; 000003d1H
  0009a	48 89 5f 60	 mov	 QWORD PTR [rdi+96], rbx
  0009e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000a6	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ab	85 c0		 test	 eax, eax
  000ad	75 72		 jne	 SHORT $LN2@PyDictProx
  000af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  000b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@BJLNAKHP@PyDictProxy_New?$AA@
  000bd	4c 8b cf	 mov	 r9, rdi
  000c0	41 b8 d1 03 00
	00		 mov	 r8d, 977		; 000003d1H
  000c6	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ce	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d3	85 c0		 test	 eax, eax
  000d5	74 04		 je	 SHORT $LN12@PyDictProx
  000d7	33 db		 xor	 ebx, ebx
  000d9	eb 04		 jmp	 SHORT $LN13@PyDictProx
$LN12@PyDictProx:
  000db	48 8d 5f e8	 lea	 rbx, QWORD PTR [rdi-24]
$LN13@PyDictProx:
  000df	48 83 7b 10 fe	 cmp	 QWORD PTR [rbx+16], -2
  000e4	74 0c		 je	 SHORT $LN1@PyDictProx
  000e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  000ed	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyDictProx:
  000f2	48 c7 43 10 fd
	ff ff ff	 mov	 QWORD PTR [rbx+16], -3
  000fa	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00101	48 89 03	 mov	 QWORD PTR [rbx], rax
  00104	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  0010b	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0010f	48 89 4b 08	 mov	 QWORD PTR [rbx+8], rcx
  00113	48 89 19	 mov	 QWORD PTR [rcx], rbx
  00116	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  0011d	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
$LN2@PyDictProx:

; 978  :     }
; 979  :     return (PyObject *)pp;

  00121	48 8b c7	 mov	 rax, rdi
  00124	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 980  : }

  00129	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0012d	5b		 pop	 rbx
  0012e	c3		 ret	 0
PyDictProxy_New ENDP
_TEXT	ENDS
EXTRN	_PyTrash_thread_deposit_object:PROC
EXTRN	_PyTrash_thread_destroy_chain:PROC
EXTRN	_PyThreadState_Current:QWORD
EXTRN	_PyParallel_GetThreadState:PROC
EXTRN	PyObject_GC_UnTrack:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$wrapper_dealloc DD imagerel wrapper_dealloc
	DD	imagerel wrapper_dealloc+61
	DD	imagerel $unwind$wrapper_dealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$wrapper_dealloc DD imagerel wrapper_dealloc+61
	DD	imagerel wrapper_dealloc+321
	DD	imagerel $chain$0$wrapper_dealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$wrapper_dealloc DD imagerel wrapper_dealloc+321
	DD	imagerel wrapper_dealloc+364
	DD	imagerel $chain$1$wrapper_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$wrapper_dealloc DD 021H
	DD	imagerel wrapper_dealloc
	DD	imagerel wrapper_dealloc+61
	DD	imagerel $unwind$wrapper_dealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$wrapper_dealloc DD 020521H
	DD	083405H
	DD	imagerel wrapper_dealloc
	DD	imagerel wrapper_dealloc+61
	DD	imagerel $unwind$wrapper_dealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrapper_dealloc DD 040a01H
	DD	09640aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\descrobject.c
xdata	ENDS
;	COMDAT wrapper_dealloc
_TEXT	SEGMENT
wp$ = 64
wrapper_dealloc PROC					; COMDAT

; 998  : {

  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f1	 mov	 rsi, rcx

; 999  :     PyObject_GC_UnTrack(wp);

  0000d	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 1000 :     Py_TRASHCAN_SAFE_BEGIN(wp)

  00012	e8 00 00 00 00	 call	 _Py_PXCTX
  00017	85 c0		 test	 eax, eax
  00019	74 0a		 je	 SHORT $LN17@wrapper_de
  0001b	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00020	48 8b f8	 mov	 rdi, rax
  00023	eb 07		 jmp	 SHORT $LN18@wrapper_de
$LN17@wrapper_de:
  00025	48 8b 3d 00 00
	00 00		 mov	 rdi, QWORD PTR _PyThreadState_Current
$LN18@wrapper_de:
  0002c	8b 87 94 00 00
	00		 mov	 eax, DWORD PTR [rdi+148]
  00032	83 f8 32	 cmp	 eax, 50			; 00000032H
  00035	0f 8d 1e 01 00
	00		 jge	 $LN11@wrapper_de
  0003b	ff c0		 inc	 eax
  0003d	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00042	89 87 94 00 00
	00		 mov	 DWORD PTR [rdi+148], eax

; 1001 :     Py_XDECREF(wp->descr);

  00048	48 8b 5e 60	 mov	 rbx, QWORD PTR [rsi+96]
  0004c	48 85 db	 test	 rbx, rbx
  0004f	74 65		 je	 SHORT $LN9@wrapper_de
  00051	e8 00 00 00 00	 call	 _Py_PXCTX
  00056	85 c0		 test	 eax, eax
  00058	75 5c		 jne	 SHORT $LN9@wrapper_de
  0005a	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0005e	a8 20		 test	 al, 32			; 00000020H
  00060	75 4c		 jne	 SHORT $LN23@wrapper_de
  00062	84 c0		 test	 al, al
  00064	78 48		 js	 SHORT $LN23@wrapper_de
  00066	a8 02		 test	 al, 2
  00068	75 4c		 jne	 SHORT $LN9@wrapper_de
  0006a	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0006e	75 46		 jne	 SHORT $LN9@wrapper_de
  00070	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00077	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0007e	4c 8b cb	 mov	 r9, rbx
  00081	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00087	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0008f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00094	48 8b cb	 mov	 rcx, rbx
  00097	85 c0		 test	 eax, eax
  00099	74 07		 je	 SHORT $LN28@wrapper_de
  0009b	e8 00 00 00 00	 call	 _Px_Dealloc
  000a0	eb 14		 jmp	 SHORT $LN9@wrapper_de
$LN28@wrapper_de:
  000a2	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000a6	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000ac	eb 08		 jmp	 SHORT $LN9@wrapper_de
$LN23@wrapper_de:
  000ae	48 8b cb	 mov	 rcx, rbx
  000b1	e8 00 00 00 00	 call	 Px_DecRef
$LN9@wrapper_de:

; 1002 :     Py_XDECREF(wp->self);

  000b6	48 8b 5e 68	 mov	 rbx, QWORD PTR [rsi+104]
  000ba	48 85 db	 test	 rbx, rbx
  000bd	74 65		 je	 SHORT $LN5@wrapper_de
  000bf	e8 00 00 00 00	 call	 _Py_PXCTX
  000c4	85 c0		 test	 eax, eax
  000c6	75 5c		 jne	 SHORT $LN5@wrapper_de
  000c8	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000cc	a8 20		 test	 al, 32			; 00000020H
  000ce	75 4c		 jne	 SHORT $LN34@wrapper_de
  000d0	84 c0		 test	 al, al
  000d2	78 48		 js	 SHORT $LN34@wrapper_de
  000d4	a8 02		 test	 al, 2
  000d6	75 4c		 jne	 SHORT $LN5@wrapper_de
  000d8	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000dc	75 46		 jne	 SHORT $LN5@wrapper_de
  000de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000ec	4c 8b cb	 mov	 r9, rbx
  000ef	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000f5	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000fd	e8 00 00 00 00	 call	 _PyParallel_Guard
  00102	48 8b cb	 mov	 rcx, rbx
  00105	85 c0		 test	 eax, eax
  00107	74 07		 je	 SHORT $LN39@wrapper_de
  00109	e8 00 00 00 00	 call	 _Px_Dealloc
  0010e	eb 14		 jmp	 SHORT $LN5@wrapper_de
$LN39@wrapper_de:
  00110	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00114	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0011a	eb 08		 jmp	 SHORT $LN5@wrapper_de
$LN34@wrapper_de:
  0011c	48 8b cb	 mov	 rcx, rbx
  0011f	e8 00 00 00 00	 call	 Px_DecRef
$LN5@wrapper_de:

; 1003 :     PyObject_GC_Del(wp);

  00124	48 8b ce	 mov	 rcx, rsi
  00127	e8 00 00 00 00	 call	 PyObject_GC_Del

; 1004 :     Py_TRASHCAN_SAFE_END(wp)

  0012c	ff 8f 94 00 00
	00		 dec	 DWORD PTR [rdi+148]
  00132	48 83 bf 98 00
	00 00 00	 cmp	 QWORD PTR [rdi+152], 0
  0013a	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0013f	74 20		 je	 SHORT $LN13@wrapper_de
  00141	83 bf 94 00 00
	00 00		 cmp	 DWORD PTR [rdi+148], 0
  00148	7f 17		 jg	 SHORT $LN13@wrapper_de

; 1005 : }

  0014a	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0014f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00153	5f		 pop	 rdi
  00154	e9 00 00 00 00	 jmp	 _PyTrash_thread_destroy_chain
$LN11@wrapper_de:

; 1004 :     Py_TRASHCAN_SAFE_END(wp)

  00159	48 8b ce	 mov	 rcx, rsi
  0015c	e8 00 00 00 00	 call	 _PyTrash_thread_deposit_object
$LN13@wrapper_de:

; 1005 : }

  00161	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00166	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0016a	5f		 pop	 rdi
  0016b	c3		 ret	 0
wrapper_dealloc ENDP
_TEXT	ENDS
EXTRN	_Py_NotImplementedStruct:BYTE
EXTRN	PyErr_BadArgument:PROC
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
EXTRN	__ImageBase:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$wrapper_richcompare DD imagerel wrapper_richcompare
	DD	imagerel wrapper_richcompare+74
	DD	imagerel $unwind$wrapper_richcompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$wrapper_richcompare DD imagerel wrapper_richcompare+74
	DD	imagerel wrapper_richcompare+280
	DD	imagerel $chain$0$wrapper_richcompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$wrapper_richcompare DD imagerel wrapper_richcompare+280
	DD	imagerel wrapper_richcompare+297
	DD	imagerel $chain$2$wrapper_richcompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$wrapper_richcompare DD imagerel wrapper_richcompare+297
	DD	imagerel wrapper_richcompare+380
	DD	imagerel $chain$3$wrapper_richcompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$wrapper_richcompare DD imagerel wrapper_richcompare+380
	DD	imagerel wrapper_richcompare+404
	DD	imagerel $chain$4$wrapper_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$wrapper_richcompare DD 020021H
	DD	063400H
	DD	imagerel wrapper_richcompare
	DD	imagerel wrapper_richcompare+74
	DD	imagerel $unwind$wrapper_richcompare
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$wrapper_richcompare DD 021H
	DD	imagerel wrapper_richcompare
	DD	imagerel wrapper_richcompare+74
	DD	imagerel $unwind$wrapper_richcompare
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$wrapper_richcompare DD 020021H
	DD	063400H
	DD	imagerel wrapper_richcompare
	DD	imagerel wrapper_richcompare+74
	DD	imagerel $unwind$wrapper_richcompare
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$wrapper_richcompare DD 020521H
	DD	063405H
	DD	imagerel wrapper_richcompare
	DD	imagerel wrapper_richcompare+74
	DD	imagerel $unwind$wrapper_richcompare
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrapper_richcompare DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\descrobject.c
xdata	ENDS
;	COMDAT wrapper_richcompare
_TEXT	SEGMENT
a$ = 64
b$ = 72
op$ = 80
wrapper_richcompare PROC				; COMDAT

; 1011 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1012 :     int result;
; 1013 :     PyObject *v;
; 1014 :     PyWrapperDescrObject *a_descr, *b_descr;
; 1015 : 
; 1016 :     assert(a != NULL && b != NULL);
; 1017 : 
; 1018 :     /* both arguments should be wrapperobjects */
; 1019 :     if (!Wrapper_Check(a) || !Wrapper_Check(b)) {

  00004	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyMethodWrapper_Type
  0000b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0000f	0f 85 14 01 00
	00		 jne	 $LN11@wrapper_ri
  00015	48 39 42 58	 cmp	 QWORD PTR [rdx+88], rax
  00019	0f 85 0a 01 00
	00		 jne	 $LN11@wrapper_ri

; 1023 :     }
; 1024 : 
; 1025 :     /* compare by descriptor address; if the descriptors are the same,
; 1026 :        compare by the objects they're bound to */
; 1027 :     a_descr = ((wrapperobject *)a)->descr;

  0001f	4c 8b 49 60	 mov	 r9, QWORD PTR [rcx+96]

; 1028 :     b_descr = ((wrapperobject *)b)->descr;

  00023	48 8b 42 60	 mov	 rax, QWORD PTR [rdx+96]

; 1029 :     if (a_descr == b_descr) {

  00027	4c 3b c8	 cmp	 r9, rax
  0002a	75 11		 jne	 SHORT $LN10@wrapper_ri

; 1030 :         a = ((wrapperobject *)a)->self;
; 1031 :         b = ((wrapperobject *)b)->self;
; 1032 :         return PyObject_RichCompare(a, b, op);

  0002c	48 8b 52 68	 mov	 rdx, QWORD PTR [rdx+104]
  00030	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]

; 1061 : }

  00034	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00038	e9 00 00 00 00	 jmp	 PyObject_RichCompare
$LN10@wrapper_ri:

; 1033 :     }
; 1034 : 
; 1035 :     result = a_descr - b_descr;

  0003d	4c 2b c8	 sub	 r9, rax
  00040	48 b8 39 8e e3
	38 8e e3 38 0e	 mov	 rax, 1024819115206086201 ; 0e38e38e38e38e39H
  0004a	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0004f	49 f7 e9	 imul	 r9
  00052	48 c1 fa 03	 sar	 rdx, 3
  00056	48 8b c2	 mov	 rax, rdx
  00059	48 c1 e8 3f	 shr	 rax, 63			; 0000003fH
  0005d	48 03 d0	 add	 rdx, rax

; 1036 :     switch (op) {

  00060	41 83 f8 05	 cmp	 r8d, 5
  00064	0f 87 ae 00 00
	00		 ja	 $LN1@wrapper_ri
  0006a	49 63 c0	 movsxd	 rax, r8d
  0006d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:__ImageBase
  00074	41 8b 8c 80 00
	00 00 00	 mov	 ecx, DWORD PTR $LN19@wrapper_ri[r8+rax*4]
  0007c	49 03 c8	 add	 rcx, r8
  0007f	ff e1		 jmp	 rcx
$LN7@wrapper_ri:

; 1037 :     case Py_EQ:
; 1038 :         v = TEST_COND(result == 0);

  00081	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00088	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  0008f	85 d2		 test	 edx, edx
  00091	48 0f 44 d8	 cmove	 rbx, rax

; 1039 :         break;

  00095	eb 6c		 jmp	 SHORT $LN8@wrapper_ri
$LN6@wrapper_ri:

; 1040 :     case Py_NE:
; 1041 :         v = TEST_COND(result != 0);

  00097	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0009e	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  000a5	85 d2		 test	 edx, edx
  000a7	48 0f 45 d8	 cmovne	 rbx, rax

; 1042 :         break;

  000ab	eb 56		 jmp	 SHORT $LN8@wrapper_ri
$LN5@wrapper_ri:

; 1043 :     case Py_LE:
; 1044 :         v = TEST_COND(result <= 0);

  000ad	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  000b4	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  000bb	85 d2		 test	 edx, edx
  000bd	48 0f 4e d8	 cmovle	 rbx, rax

; 1045 :         break;

  000c1	eb 40		 jmp	 SHORT $LN8@wrapper_ri
$LN4@wrapper_ri:

; 1046 :     case Py_GE:
; 1047 :         v = TEST_COND(result >= 0);

  000c3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  000ca	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  000d1	85 d2		 test	 edx, edx
  000d3	48 0f 49 d8	 cmovns	 rbx, rax

; 1048 :         break;

  000d7	eb 2a		 jmp	 SHORT $LN8@wrapper_ri
$LN3@wrapper_ri:

; 1049 :     case Py_LT:
; 1050 :         v = TEST_COND(result < 0);

  000d9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  000e0	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  000e7	85 d2		 test	 edx, edx
  000e9	48 0f 48 d8	 cmovs	 rbx, rax

; 1051 :         break;

  000ed	eb 14		 jmp	 SHORT $LN8@wrapper_ri
$LN2@wrapper_ri:

; 1052 :     case Py_GT:
; 1053 :         v = TEST_COND(result > 0);

  000ef	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  000f6	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  000fd	85 d2		 test	 edx, edx
  000ff	48 0f 4f d8	 cmovg	 rbx, rax
$LN8@wrapper_ri:

; 1058 :     }
; 1059 :     Py_INCREF(v);

  00103	48 8b cb	 mov	 rcx, rbx
  00106	e8 00 00 00 00	 call	 _Py_IncRef

; 1060 :     return v;

  0010b	48 8b c3	 mov	 rax, rbx
  0010e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1061 : }

  00113	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00117	c3		 ret	 0
$LN1@wrapper_ri:

; 1054 :         break;
; 1055 :     default:
; 1056 :         PyErr_BadArgument();

  00118	e8 00 00 00 00	 call	 PyErr_BadArgument
  0011d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1057 :         return NULL;

  00122	33 c0		 xor	 eax, eax

; 1061 : }

  00124	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00128	c3		 ret	 0
$LN11@wrapper_ri:

; 1020 :         v = Py_NotImplemented;
; 1021 :         Py_INCREF(v);

  00129	e8 00 00 00 00	 call	 _Py_PXCTX
  0012e	85 c0		 test	 eax, eax
  00130	75 3c		 jne	 SHORT $LN16@wrapper_ri
  00132	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NotImplementedStruct
  00139	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00140	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00147	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0014d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00155	e8 00 00 00 00	 call	 _PyParallel_Guard
  0015a	85 c0		 test	 eax, eax
  0015c	75 09		 jne	 SHORT $LN15@wrapper_ri
  0015e	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NotImplementedStruct+32, 32 ; 00000020H
  00165	74 07		 je	 SHORT $LN16@wrapper_ri
$LN15@wrapper_ri:
  00167	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NotImplementedStruct+80
$LN16@wrapper_ri:

; 1022 :         return v;

  0016e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct

; 1061 : }

  00175	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00179	c3		 ret	 0
  0017a	66 90		 npad	 2
$LN19@wrapper_ri:
  0017c	00 00 00 00	 DD	 $LN3@wrapper_ri
  00180	00 00 00 00	 DD	 $LN5@wrapper_ri
  00184	00 00 00 00	 DD	 $LN7@wrapper_ri
  00188	00 00 00 00	 DD	 $LN6@wrapper_ri
  0018c	00 00 00 00	 DD	 $LN2@wrapper_ri
  00190	00 00 00 00	 DD	 $LN4@wrapper_ri
wrapper_richcompare ENDP
_TEXT	ENDS
EXTRN	PyObject_Hash:PROC
EXTRN	_Py_HashPointer:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrapper_hash DD imagerel wrapper_hash
	DD	imagerel wrapper_hash+93
	DD	imagerel $unwind$wrapper_hash
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrapper_hash DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT wrapper_hash
_TEXT	SEGMENT
wp$ = 48
wrapper_hash PROC					; COMDAT

; 1065 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f9	 mov	 rdi, rcx

; 1066 :     Py_hash_t x, y;
; 1067 :     x = _Py_HashPointer(wp->descr);

  0000d	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00011	e8 00 00 00 00	 call	 _Py_HashPointer
  00016	48 8b d8	 mov	 rbx, rax

; 1068 :     if (x == -1)

  00019	48 83 f8 ff	 cmp	 rax, -1
  0001d	75 0f		 jne	 SHORT $LN3@wrapper_ha
$LN6@wrapper_ha:

; 1069 :         return -1;

  0001f	48 83 c8 ff	 or	 rax, -1

; 1077 : }

  00023	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5f		 pop	 rdi
  0002d	c3		 ret	 0
$LN3@wrapper_ha:

; 1070 :     y = PyObject_Hash(wp->self);

  0002e	48 8b 4f 68	 mov	 rcx, QWORD PTR [rdi+104]
  00032	e8 00 00 00 00	 call	 PyObject_Hash

; 1071 :     if (y == -1)

  00037	48 83 f8 ff	 cmp	 rax, -1

; 1072 :         return -1;

  0003b	74 e2		 je	 SHORT $LN6@wrapper_ha

; 1073 :     x = x ^ y;

  0003d	48 33 d8	 xor	 rbx, rax

; 1074 :     if (x == -1)

  00040	48 c7 c0 fe ff
	ff ff		 mov	 rax, -2
  00047	48 83 fb ff	 cmp	 rbx, -1
  0004b	48 0f 44 d8	 cmove	 rbx, rax

; 1075 :         x = -2;
; 1076 :     return x;

  0004f	48 8b c3	 mov	 rax, rbx

; 1077 : }

  00052	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00057	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005b	5f		 pop	 rdi
  0005c	c3		 ret	 0
wrapper_hash ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@NMDBOAPA@?$DMmethod?9wrapper?5?8?$CFs?8?5of?5?$CFs?5objec@ ; `string'
;	COMDAT ??_C@_0CJ@NMDBOAPA@?$DMmethod?9wrapper?5?8?$CFs?8?5of?5?$CFs?5objec@
CONST	SEGMENT
??_C@_0CJ@NMDBOAPA@?$DMmethod?9wrapper?5?8?$CFs?8?5of?5?$CFs?5objec@ DB '<'
	DB	'method-wrapper ''%s'' of %s object at %p>', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT wrapper_repr
_TEXT	SEGMENT
wp$ = 8
wrapper_repr PROC					; COMDAT

; 1082 :     return PyUnicode_FromFormat("<method-wrapper '%s' of %s object at %p>",
; 1083 :                                wp->descr->d_base->name,
; 1084 :                                wp->self->ob_type->tp_name,
; 1085 :                                wp->self);

  00000	4c 8b 49 68	 mov	 r9, QWORD PTR [rcx+104]
  00004	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  00008	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CJ@NMDBOAPA@?$DMmethod?9wrapper?5?8?$CFs?8?5of?5?$CFs?5objec@
  0000f	4d 8b 41 58	 mov	 r8, QWORD PTR [r9+88]
  00013	48 8b 90 80 00
	00 00		 mov	 rdx, QWORD PTR [rax+128]
  0001a	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  0001e	48 8b 12	 mov	 rdx, QWORD PTR [rdx]

; 1086 : }

  00021	e9 00 00 00 00	 jmp	 PyUnicode_FromFormat
wrapper_repr ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$wrapper_objclass DD imagerel wrapper_objclass
	DD	imagerel wrapper_objclass+82
	DD	imagerel $unwind$wrapper_objclass
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrapper_objclass DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\descrobject.c
xdata	ENDS
;	COMDAT wrapper_objclass
_TEXT	SEGMENT
wp$ = 64
wrapper_objclass PROC					; COMDAT

; 1095 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1096 :     PyObject *c = (PyObject *)PyDescr_TYPE(wp->descr);

  00006	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  0000a	48 8b 58 60	 mov	 rbx, QWORD PTR [rax+96]

; 1097 : 
; 1098 :     Py_INCREF(c);

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	75 32		 jne	 SHORT $LN7@wrapper_ob
  00017	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00025	4c 8b cb	 mov	 r9, rbx
  00028	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0002e	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00036	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003b	85 c0		 test	 eax, eax
  0003d	75 06		 jne	 SHORT $LN3@wrapper_ob
  0003f	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00043	74 04		 je	 SHORT $LN7@wrapper_ob
$LN3@wrapper_ob:
  00045	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN7@wrapper_ob:

; 1099 :     return c;

  00049	48 8b c3	 mov	 rax, rbx

; 1100 : }

  0004c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00050	5b		 pop	 rbx
  00051	c3		 ret	 0
wrapper_objclass ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT wrapper_name
_TEXT	SEGMENT
wp$ = 8
wrapper_name PROC					; COMDAT

; 1105 :     const char *s = wp->descr->d_base->name;

  00000	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  00004	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]

; 1106 : 
; 1107 :     return PyUnicode_FromString(s);

  0000b	48 8b 09	 mov	 rcx, QWORD PTR [rcx]

; 1108 : }

  0000e	e9 00 00 00 00	 jmp	 PyUnicode_FromString
wrapper_name ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$wrapper_doc DD imagerel wrapper_doc
	DD	imagerel wrapper_doc+114
	DD	imagerel $unwind$wrapper_doc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrapper_doc DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\descrobject.c
xdata	ENDS
;	COMDAT wrapper_doc
_TEXT	SEGMENT
wp$ = 64
wrapper_doc PROC					; COMDAT

; 1112 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1113 :     const char *s = wp->descr->d_base->doc;

  00004	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  00008	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  0000f	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]

; 1114 : 
; 1115 :     if (s == NULL) {

  00013	48 85 c9	 test	 rcx, rcx
  00016	75 51		 jne	 SHORT $LN2@wrapper_do

; 1116 :         Py_INCREF(Py_None);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	75 3c		 jne	 SHORT $LN6@wrapper_do
  00021	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00036	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0003c	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00044	e8 00 00 00 00	 call	 _PyParallel_Guard
  00049	85 c0		 test	 eax, eax
  0004b	75 09		 jne	 SHORT $LN5@wrapper_do
  0004d	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00054	74 07		 je	 SHORT $LN6@wrapper_do
$LN5@wrapper_do:
  00056	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN6@wrapper_do:

; 1117 :         return Py_None;

  0005d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1118 :     }
; 1119 :     else {
; 1120 :         return PyUnicode_FromString(s);
; 1121 :     }
; 1122 : }

  00064	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00068	c3		 ret	 0
$LN2@wrapper_do:
  00069	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006d	e9 00 00 00 00	 jmp	 PyUnicode_FromString
wrapper_doc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT wrapper_qualname
_TEXT	SEGMENT
wp$ = 8
wrapper_qualname PROC					; COMDAT

; 1127 :     return descr_get_qualname((PyDescrObject *)wp->descr);

  00000	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]

; 1128 : }

  00004	e9 00 00 00 00	 jmp	 descr_get_qualname
wrapper_qualname ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@OFHOLNDN@wrapper?5?$CFs?5doesn?8t?5take?5keyword?5@ ; `string'
EXTRN	PyDict_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrapper_call DD imagerel wrapper_call
	DD	imagerel wrapper_call+180
	DD	imagerel $unwind$wrapper_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrapper_call DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0CK@OFHOLNDN@wrapper?5?$CFs?5doesn?8t?5take?5keyword?5@
CONST	SEGMENT
??_C@_0CK@OFHOLNDN@wrapper?5?$CFs?5doesn?8t?5take?5keyword?5@ DB 'wrapper'
	DB	' %s doesn''t take keyword arguments', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT wrapper_call
_TEXT	SEGMENT
wp$ = 48
args$ = 56
kwds$ = 64
wrapper_call PROC					; COMDAT

; 1140 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1141 :     wrapperfunc wrapper = wp->descr->d_base->wrapper;

  00014	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]

; 1142 :     PyObject *self = wp->self;

  00018	48 8b 69 68	 mov	 rbp, QWORD PTR [rcx+104]
  0001c	48 8b fa	 mov	 rdi, rdx
  0001f	4c 8b 88 80 00
	00 00		 mov	 r9, QWORD PTR [rax+128]
  00026	48 8b d9	 mov	 rbx, rcx

; 1143 : 
; 1144 :     if (wp->descr->d_base->flags & PyWrapperFlag_KEYWORDS) {

  00029	41 f6 41 28 01	 test	 BYTE PTR [r9+40], 1
  0002e	49 8b 71 18	 mov	 rsi, QWORD PTR [r9+24]
  00032	74 11		 je	 SHORT $LN3@wrapper_ca

; 1145 :         wrapperfunc_kwds wk = (wrapperfunc_kwds)wrapper;
; 1146 :         return (*wk)(self, args, wp->descr->d_wrapped, kwds);

  00034	4d 8b c8	 mov	 r9, r8
  00037	4c 8b 80 88 00
	00 00		 mov	 r8, QWORD PTR [rax+136]
  0003e	48 8b cd	 mov	 rcx, rbp
  00041	ff d6		 call	 rsi
  00043	eb 5a		 jmp	 SHORT $LN4@wrapper_ca
$LN3@wrapper_ca:

; 1147 :     }
; 1148 : 
; 1149 :     if (kwds != NULL && (!PyDict_Check(kwds) || PyDict_Size(kwds) != 0)) {

  00045	4d 85 c0	 test	 r8, r8
  00048	74 42		 je	 SHORT $LN2@wrapper_ca
  0004a	49 8b 40 58	 mov	 rax, QWORD PTR [r8+88]
  0004e	f7 80 00 01 00
	00 00 00 00 20	 test	 DWORD PTR [rax+256], 536870912 ; 20000000H
  00058	74 0d		 je	 SHORT $LN1@wrapper_ca
  0005a	49 8b c8	 mov	 rcx, r8
  0005d	e8 00 00 00 00	 call	 PyDict_Size
  00062	48 85 c0	 test	 rax, rax
  00065	74 25		 je	 SHORT $LN2@wrapper_ca
$LN1@wrapper_ca:

; 1150 :         PyErr_Format(PyExc_TypeError,
; 1151 :                      "wrapper %s doesn't take keyword arguments",
; 1152 :                      wp->descr->d_base->name);

  00067	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  0006b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@OFHOLNDN@wrapper?5?$CFs?5doesn?8t?5take?5keyword?5@
  00079	4c 8b 80 80 00
	00 00		 mov	 r8, QWORD PTR [rax+128]
  00080	4d 8b 00	 mov	 r8, QWORD PTR [r8]
  00083	e8 00 00 00 00	 call	 PyErr_Format

; 1153 :         return NULL;

  00088	33 c0		 xor	 eax, eax
  0008a	eb 13		 jmp	 SHORT $LN4@wrapper_ca
$LN2@wrapper_ca:

; 1154 :     }
; 1155 :     return (*wrapper)(self, args, wp->descr->d_wrapped);

  0008c	4c 8b 43 60	 mov	 r8, QWORD PTR [rbx+96]
  00090	48 8b d7	 mov	 rdx, rdi
  00093	48 8b cd	 mov	 rcx, rbp
  00096	4d 8b 80 88 00
	00 00		 mov	 r8, QWORD PTR [r8+136]
  0009d	ff d6		 call	 rsi
$LN4@wrapper_ca:

; 1156 : }

  0009f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a4	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000a9	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000ae	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b2	5f		 pop	 rdi
  000b3	c3		 ret	 0
wrapper_call ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@LCFHCCFN@wrapper_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrapper_traverse DD imagerel wrapper_traverse
	DD	imagerel wrapper_traverse+152
	DD	imagerel $unwind$wrapper_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrapper_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BB@LCFHCCFN@wrapper_traverse?$AA@
CONST	SEGMENT
??_C@_0BB@LCFHCCFN@wrapper_traverse?$AA@ DB 'wrapper_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT wrapper_traverse
_TEXT	SEGMENT
self$ = 48
visit$ = 56
arg$ = 64
wrapper_traverse PROC					; COMDAT

; 1160 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 1161 :     wrapperobject *wp = (wrapperobject *)self;
; 1162 :     Py_VISIT(wp->descr);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN9@wrapper_tr
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@LCFHCCFN@wrapper_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 8a 04 00
	00		 mov	 r8d, 1162		; 0000048aH
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@wrapper_tr:
  0003d	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN11@wrapper_tr
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 39		 jne	 SHORT $LN13@wrapper_tr
$LN11@wrapper_tr:

; 1163 :     Py_VISIT(wp->self);

  0004f	e8 00 00 00 00	 call	 _Py_PXCTX
  00054	85 c0		 test	 eax, eax
  00056	74 1c		 je	 SHORT $LN3@wrapper_tr
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@LCFHCCFN@wrapper_traverse?$AA@
  00066	45 33 c9	 xor	 r9d, r9d
  00069	41 b8 8b 04 00
	00		 mov	 r8d, 1163		; 0000048bH
  0006f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@wrapper_tr:
  00074	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00078	48 85 c9	 test	 rcx, rcx
  0007b	74 09		 je	 SHORT $LN5@wrapper_tr
  0007d	48 8b d7	 mov	 rdx, rdi
  00080	ff d6		 call	 rsi
  00082	85 c0		 test	 eax, eax
  00084	75 02		 jne	 SHORT $LN13@wrapper_tr
$LN5@wrapper_tr:

; 1164 :     return 0;

  00086	33 c0		 xor	 eax, eax
$LN13@wrapper_tr:

; 1165 : }

  00088	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00092	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00096	5f		 pop	 rdi
  00097	c3		 ret	 0
wrapper_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@MINLAABF@PyWrapper_New?$AA@		; `string'
PUBLIC	PyWrapper_New
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyWrapper_New DD imagerel $LN24
	DD	imagerel $LN24+360
	DD	imagerel $unwind$PyWrapper_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyWrapper_New DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT ??_C@_0O@MINLAABF@PyWrapper_New?$AA@
CONST	SEGMENT
??_C@_0O@MINLAABF@PyWrapper_New?$AA@ DB 'PyWrapper_New', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\descrobject.c
CONST	ENDS
;	COMDAT PyWrapper_New
_TEXT	SEGMENT
d$ = 64
self$ = 72
PyWrapper_New PROC					; COMDAT

; 1207 : {

$LN24:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fa	 mov	 rdi, rdx
  00012	48 8b f1	 mov	 rsi, rcx

; 1208 :     wrapperobject *wp;
; 1209 :     PyWrapperDescrObject *descr;
; 1210 : 
; 1211 :     assert(PyObject_TypeCheck(d, &PyWrapperDescr_Type));
; 1212 :     descr = (PyWrapperDescrObject *)d;
; 1213 :     assert(_PyObject_RealIsSubclass((PyObject *)Py_TYPE(self),
; 1214 :                                     (PyObject *)PyDescr_TYPE(descr)));
; 1215 : 
; 1216 :     wp = PyObject_GC_New(wrapperobject, &_PyMethodWrapper_Type);

  00015	e8 00 00 00 00	 call	 _Py_PXCTX
  0001a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyMethodWrapper_Type
  00021	85 c0		 test	 eax, eax
  00023	74 07		 je	 SHORT $LN9@PyWrapper_
  00025	e8 00 00 00 00	 call	 _PxObject_New
  0002a	eb 05		 jmp	 SHORT $LN23@PyWrapper_
$LN9@PyWrapper_:
  0002c	e8 00 00 00 00	 call	 _PyObject_GC_New
$LN23@PyWrapper_:
  00031	48 8b d8	 mov	 rbx, rax

; 1217 :     if (wp != NULL) {

  00034	48 85 c0	 test	 rax, rax
  00037	0f 84 18 01 00
	00		 je	 $LN22@PyWrapper_

; 1218 :         Py_INCREF(descr);

  0003d	e8 00 00 00 00	 call	 _Py_PXCTX
  00042	85 c0		 test	 eax, eax
  00044	75 32		 jne	 SHORT $LN14@PyWrapper_
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00054	4c 8b ce	 mov	 r9, rsi
  00057	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0005d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00065	e8 00 00 00 00	 call	 _PyParallel_Guard
  0006a	85 c0		 test	 eax, eax
  0006c	75 06		 jne	 SHORT $LN13@PyWrapper_
  0006e	f6 46 20 20	 test	 BYTE PTR [rsi+32], 32	; 00000020H
  00072	74 04		 je	 SHORT $LN14@PyWrapper_
$LN13@PyWrapper_:
  00074	48 ff 46 50	 inc	 QWORD PTR [rsi+80]
$LN14@PyWrapper_:

; 1219 :         wp->descr = descr;

  00078	48 89 73 60	 mov	 QWORD PTR [rbx+96], rsi

; 1220 :         Py_INCREF(self);

  0007c	e8 00 00 00 00	 call	 _Py_PXCTX
  00081	85 c0		 test	 eax, eax
  00083	75 32		 jne	 SHORT $LN18@PyWrapper_
  00085	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0008c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00093	4c 8b cf	 mov	 r9, rdi
  00096	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0009c	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000a4	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a9	85 c0		 test	 eax, eax
  000ab	75 06		 jne	 SHORT $LN17@PyWrapper_
  000ad	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  000b1	74 04		 je	 SHORT $LN18@PyWrapper_
$LN17@PyWrapper_:
  000b3	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN18@PyWrapper_:

; 1221 :         wp->self = self;
; 1222 :         _PyObject_GC_TRACK(wp);

  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@MINLAABF@PyWrapper_New?$AA@
  000c5	4c 8b cb	 mov	 r9, rbx
  000c8	41 b8 c6 04 00
	00		 mov	 r8d, 1222		; 000004c6H
  000ce	48 89 7b 68	 mov	 QWORD PTR [rbx+104], rdi
  000d2	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000da	e8 00 00 00 00	 call	 _PyParallel_Guard
  000df	85 c0		 test	 eax, eax
  000e1	75 72		 jne	 SHORT $LN22@PyWrapper_
  000e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@MINLAABF@PyWrapper_New?$AA@
  000f1	4c 8b cb	 mov	 r9, rbx
  000f4	41 b8 c6 04 00
	00		 mov	 r8d, 1222		; 000004c6H
  000fa	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00102	e8 00 00 00 00	 call	 _PyParallel_Guard
  00107	85 c0		 test	 eax, eax
  00109	74 04		 je	 SHORT $LN11@PyWrapper_
  0010b	33 ff		 xor	 edi, edi
  0010d	eb 04		 jmp	 SHORT $LN12@PyWrapper_
$LN11@PyWrapper_:
  0010f	48 8d 7b e8	 lea	 rdi, QWORD PTR [rbx-24]
$LN12@PyWrapper_:
  00113	48 83 7f 10 fe	 cmp	 QWORD PTR [rdi+16], -2
  00118	74 0c		 je	 SHORT $LN1@PyWrapper_
  0011a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  00121	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyWrapper_:
  00126	48 c7 47 10 fd
	ff ff ff	 mov	 QWORD PTR [rdi+16], -3
  0012e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00135	48 89 07	 mov	 QWORD PTR [rdi], rax
  00138	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  0013f	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00143	48 89 4f 08	 mov	 QWORD PTR [rdi+8], rcx
  00147	48 89 39	 mov	 QWORD PTR [rcx], rdi
  0014a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00151	48 89 78 08	 mov	 QWORD PTR [rax+8], rdi
$LN22@PyWrapper_:

; 1223 :     }
; 1224 :     return (PyObject *)wp;
; 1225 : }

  00155	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0015a	48 8b c3	 mov	 rax, rbx
  0015d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00162	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00166	5f		 pop	 rdi
  00167	c3		 ret	 0
PyWrapper_New ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@KKLEGDKA@property_dealloc?$AA@	; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$property_dealloc DD imagerel property_dealloc
	DD	imagerel property_dealloc+601
	DD	imagerel $unwind$property_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$property_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0BB@KKLEGDKA@property_dealloc?$AA@
CONST	SEGMENT
??_C@_0BB@KKLEGDKA@property_dealloc?$AA@ DB 'property_dealloc', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\descrobject.c
CONST	ENDS
;	COMDAT property_dealloc
_TEXT	SEGMENT
self$ = 64
property_dealloc PROC					; COMDAT

; 1321 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 1322 :     propertyobject *gs = (propertyobject *)self;
; 1323 : 
; 1324 :     _PyObject_GC_UNTRACK(self);

  0000d	4c 8b c9	 mov	 r9, rcx
  00010	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@KKLEGDKA@property_dealloc?$AA@
  0001e	41 b8 2c 05 00
	00		 mov	 r8d, 1324		; 0000052cH
  00024	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0002c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00031	85 c0		 test	 eax, eax
  00033	75 54		 jne	 SHORT $LN17@property_d
  00035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@KKLEGDKA@property_dealloc?$AA@
  00043	4c 8b cf	 mov	 r9, rdi
  00046	41 b8 2c 05 00
	00		 mov	 r8d, 1324		; 0000052cH
  0004c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00054	e8 00 00 00 00	 call	 _PyParallel_Guard
  00059	85 c0		 test	 eax, eax
  0005b	74 04		 je	 SHORT $LN23@property_d
  0005d	33 d2		 xor	 edx, edx
  0005f	eb 04		 jmp	 SHORT $LN24@property_d
$LN23@property_d:
  00061	48 8d 57 e8	 lea	 rdx, QWORD PTR [rdi-24]
$LN24@property_d:
  00065	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00068	48 8b 4a 08	 mov	 rcx, QWORD PTR [rdx+8]
  0006c	48 c7 42 10 fe
	ff ff ff	 mov	 QWORD PTR [rdx+16], -2
  00074	48 89 01	 mov	 QWORD PTR [rcx], rax
  00077	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  0007a	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  0007e	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00082	48 c7 02 00 00
	00 00		 mov	 QWORD PTR [rdx], 0
$LN17@property_d:

; 1325 :     Py_XDECREF(gs->prop_get);

  00089	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  0008d	48 85 db	 test	 rbx, rbx
  00090	74 65		 je	 SHORT $LN15@property_d
  00092	e8 00 00 00 00	 call	 _Py_PXCTX
  00097	85 c0		 test	 eax, eax
  00099	75 5c		 jne	 SHORT $LN15@property_d
  0009b	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0009f	a8 20		 test	 al, 32			; 00000020H
  000a1	75 4c		 jne	 SHORT $LN29@property_d
  000a3	84 c0		 test	 al, al
  000a5	78 48		 js	 SHORT $LN29@property_d
  000a7	a8 02		 test	 al, 2
  000a9	75 4c		 jne	 SHORT $LN15@property_d
  000ab	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000af	75 46		 jne	 SHORT $LN15@property_d
  000b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000bf	4c 8b cb	 mov	 r9, rbx
  000c2	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000c8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d0	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d5	48 8b cb	 mov	 rcx, rbx
  000d8	85 c0		 test	 eax, eax
  000da	74 07		 je	 SHORT $LN34@property_d
  000dc	e8 00 00 00 00	 call	 _Px_Dealloc
  000e1	eb 14		 jmp	 SHORT $LN15@property_d
$LN34@property_d:
  000e3	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000e7	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000ed	eb 08		 jmp	 SHORT $LN15@property_d
$LN29@property_d:
  000ef	48 8b cb	 mov	 rcx, rbx
  000f2	e8 00 00 00 00	 call	 Px_DecRef
$LN15@property_d:

; 1326 :     Py_XDECREF(gs->prop_set);

  000f7	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  000fb	48 85 db	 test	 rbx, rbx
  000fe	74 65		 je	 SHORT $LN11@property_d
  00100	e8 00 00 00 00	 call	 _Py_PXCTX
  00105	85 c0		 test	 eax, eax
  00107	75 5c		 jne	 SHORT $LN11@property_d
  00109	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0010d	a8 20		 test	 al, 32			; 00000020H
  0010f	75 4c		 jne	 SHORT $LN40@property_d
  00111	84 c0		 test	 al, al
  00113	78 48		 js	 SHORT $LN40@property_d
  00115	a8 02		 test	 al, 2
  00117	75 4c		 jne	 SHORT $LN11@property_d
  00119	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0011d	75 46		 jne	 SHORT $LN11@property_d
  0011f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00126	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0012d	4c 8b cb	 mov	 r9, rbx
  00130	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00136	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0013e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00143	48 8b cb	 mov	 rcx, rbx
  00146	85 c0		 test	 eax, eax
  00148	74 07		 je	 SHORT $LN45@property_d
  0014a	e8 00 00 00 00	 call	 _Px_Dealloc
  0014f	eb 14		 jmp	 SHORT $LN11@property_d
$LN45@property_d:
  00151	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00155	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0015b	eb 08		 jmp	 SHORT $LN11@property_d
$LN40@property_d:
  0015d	48 8b cb	 mov	 rcx, rbx
  00160	e8 00 00 00 00	 call	 Px_DecRef
$LN11@property_d:

; 1327 :     Py_XDECREF(gs->prop_del);

  00165	48 8b 5f 70	 mov	 rbx, QWORD PTR [rdi+112]
  00169	48 85 db	 test	 rbx, rbx
  0016c	74 65		 je	 SHORT $LN7@property_d
  0016e	e8 00 00 00 00	 call	 _Py_PXCTX
  00173	85 c0		 test	 eax, eax
  00175	75 5c		 jne	 SHORT $LN7@property_d
  00177	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0017b	a8 20		 test	 al, 32			; 00000020H
  0017d	75 4c		 jne	 SHORT $LN51@property_d
  0017f	84 c0		 test	 al, al
  00181	78 48		 js	 SHORT $LN51@property_d
  00183	a8 02		 test	 al, 2
  00185	75 4c		 jne	 SHORT $LN7@property_d
  00187	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0018b	75 46		 jne	 SHORT $LN7@property_d
  0018d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00194	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0019b	4c 8b cb	 mov	 r9, rbx
  0019e	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001ac	e8 00 00 00 00	 call	 _PyParallel_Guard
  001b1	48 8b cb	 mov	 rcx, rbx
  001b4	85 c0		 test	 eax, eax
  001b6	74 07		 je	 SHORT $LN56@property_d
  001b8	e8 00 00 00 00	 call	 _Px_Dealloc
  001bd	eb 14		 jmp	 SHORT $LN7@property_d
$LN56@property_d:
  001bf	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001c3	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001c9	eb 08		 jmp	 SHORT $LN7@property_d
$LN51@property_d:
  001cb	48 8b cb	 mov	 rcx, rbx
  001ce	e8 00 00 00 00	 call	 Px_DecRef
$LN7@property_d:

; 1328 :     Py_XDECREF(gs->prop_doc);

  001d3	48 8b 5f 78	 mov	 rbx, QWORD PTR [rdi+120]
  001d7	48 85 db	 test	 rbx, rbx
  001da	74 65		 je	 SHORT $LN3@property_d
  001dc	e8 00 00 00 00	 call	 _Py_PXCTX
  001e1	85 c0		 test	 eax, eax
  001e3	75 5c		 jne	 SHORT $LN3@property_d
  001e5	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  001e9	a8 20		 test	 al, 32			; 00000020H
  001eb	75 4c		 jne	 SHORT $LN62@property_d
  001ed	84 c0		 test	 al, al
  001ef	78 48		 js	 SHORT $LN62@property_d
  001f1	a8 02		 test	 al, 2
  001f3	75 4c		 jne	 SHORT $LN3@property_d
  001f5	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  001f9	75 46		 jne	 SHORT $LN3@property_d
  001fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00202	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00209	4c 8b cb	 mov	 r9, rbx
  0020c	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00212	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0021a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0021f	48 8b cb	 mov	 rcx, rbx
  00222	85 c0		 test	 eax, eax
  00224	74 07		 je	 SHORT $LN67@property_d
  00226	e8 00 00 00 00	 call	 _Px_Dealloc
  0022b	eb 14		 jmp	 SHORT $LN3@property_d
$LN67@property_d:
  0022d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00231	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00237	eb 08		 jmp	 SHORT $LN3@property_d
$LN62@property_d:
  00239	48 8b cb	 mov	 rcx, rbx
  0023c	e8 00 00 00 00	 call	 Px_DecRef
$LN3@property_d:

; 1329 :     self->ob_type->tp_free(self);

  00241	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00245	48 8b cf	 mov	 rcx, rdi

; 1330 : }

  00248	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0024d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00251	5f		 pop	 rdi
  00252	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
property_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@BENONLLG@unreadable?5attribute?$AA@	; `string'
EXTRN	PyObject_CallFunctionObjArgs:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$property_descr_get DD imagerel property_descr_get
	DD	imagerel property_descr_get+143
	DD	imagerel $unwind$property_descr_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$property_descr_get DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0BF@BENONLLG@unreadable?5attribute?$AA@
CONST	SEGMENT
??_C@_0BF@BENONLLG@unreadable?5attribute?$AA@ DB 'unreadable attribute', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\descrobject.c
CONST	ENDS
;	COMDAT property_descr_get
_TEXT	SEGMENT
self$ = 64
obj$ = 72
type$ = 80
property_descr_get PROC					; COMDAT

; 1334 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 1335 :     propertyobject *gs = (propertyobject *)self;
; 1336 : 
; 1337 :     if (obj == NULL || obj == Py_None) {

  00009	48 85 d2	 test	 rdx, rdx
  0000c	74 3d		 je	 SHORT $LN2@property_d@2
  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00015	48 3b d0	 cmp	 rdx, rax
  00018	74 31		 je	 SHORT $LN2@property_d@2

; 1340 :     }
; 1341 :     if (gs->prop_get == NULL) {

  0001a	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  0001e	48 85 c9	 test	 rcx, rcx
  00021	75 1b		 jne	 SHORT $LN1@property_d@2

; 1342 :         PyErr_SetString(PyExc_AttributeError, "unreadable attribute");

  00023	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@BENONLLG@unreadable?5attribute?$AA@
  00031	e8 00 00 00 00	 call	 PyErr_SetString

; 1343 :         return NULL;

  00036	33 c0		 xor	 eax, eax

; 1346 : }

  00038	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0003c	5b		 pop	 rbx
  0003d	c3		 ret	 0
$LN1@property_d@2:

; 1344 :     }
; 1345 :     return PyObject_CallFunctionObjArgs(gs->prop_get, obj, NULL);

  0003e	45 33 c0	 xor	 r8d, r8d

; 1346 : }

  00041	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00045	5b		 pop	 rbx
  00046	e9 00 00 00 00	 jmp	 PyObject_CallFunctionObjArgs
$LN2@property_d@2:

; 1338 :         Py_INCREF(self);

  0004b	e8 00 00 00 00	 call	 _Py_PXCTX
  00050	85 c0		 test	 eax, eax
  00052	75 32		 jne	 SHORT $LN7@property_d@2
  00054	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0005b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00062	4c 8b cb	 mov	 r9, rbx
  00065	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0006b	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00073	e8 00 00 00 00	 call	 _PyParallel_Guard
  00078	85 c0		 test	 eax, eax
  0007a	75 06		 jne	 SHORT $LN6@property_d@2
  0007c	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00080	74 04		 je	 SHORT $LN7@property_d@2
$LN6@property_d@2:
  00082	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN7@property_d@2:

; 1339 :         return self;

  00086	48 8b c3	 mov	 rax, rbx

; 1346 : }

  00089	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008d	5b		 pop	 rbx
  0008e	c3		 ret	 0
property_descr_get ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@IALDIKKG@can?8t?5set?5attribute?$AA@	; `string'
PUBLIC	??_C@_0BH@DFKPNNEB@can?8t?5delete?5attribute?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$property_descr_set DD imagerel property_descr_set
	DD	imagerel property_descr_set+105
	DD	imagerel $unwind$property_descr_set
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$property_descr_set DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BE@IALDIKKG@can?8t?5set?5attribute?$AA@
CONST	SEGMENT
??_C@_0BE@IALDIKKG@can?8t?5set?5attribute?$AA@ DB 'can''t set attribute', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DFKPNNEB@can?8t?5delete?5attribute?$AA@
CONST	SEGMENT
??_C@_0BH@DFKPNNEB@can?8t?5delete?5attribute?$AA@ DB 'can''t delete attri'
	DB	'bute', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT property_descr_set
_TEXT	SEGMENT
self$ = 48
obj$ = 56
value$ = 64
property_descr_set PROC					; COMDAT

; 1350 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1351 :     propertyobject *gs = (propertyobject *)self;
; 1352 :     PyObject *func, *res;
; 1353 : 
; 1354 :     if (value == NULL)

  00004	4d 85 c0	 test	 r8, r8
  00007	75 06		 jne	 SHORT $LN6@property_d@3

; 1355 :         func = gs->prop_del;

  00009	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]

; 1356 :     else

  0000d	eb 04		 jmp	 SHORT $LN5@property_d@3
$LN6@property_d@3:

; 1357 :         func = gs->prop_set;

  0000f	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
$LN5@property_d@3:

; 1358 :     if (func == NULL) {

  00013	48 85 c9	 test	 rcx, rcx
  00016	75 29		 jne	 SHORT $LN4@property_d@3

; 1359 :         PyErr_SetString(PyExc_AttributeError,
; 1360 :                         value == NULL ?
; 1361 :                         "can't delete attribute" :
; 1362 :                 "can't set attribute");

  00018	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  0001f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BH@DFKPNNEB@can?8t?5delete?5attribute?$AA@
  00026	4d 85 c0	 test	 r8, r8
  00029	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@IALDIKKG@can?8t?5set?5attribute?$AA@
  00030	48 0f 44 d0	 cmove	 rdx, rax
  00034	e8 00 00 00 00	 call	 PyErr_SetString
$LN9@property_d@3:

; 1363 :         return -1;

  00039	83 c8 ff	 or	 eax, -1

; 1373 : }

  0003c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00040	c3		 ret	 0
$LN4@property_d@3:

; 1364 :     }
; 1365 :     if (value == NULL)

  00041	4d 85 c0	 test	 r8, r8
  00044	75 07		 jne	 SHORT $LN3@property_d@3

; 1366 :         res = PyObject_CallFunctionObjArgs(func, obj, NULL);

  00046	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs

; 1367 :     else

  0004b	eb 08		 jmp	 SHORT $LN2@property_d@3
$LN3@property_d@3:

; 1368 :         res = PyObject_CallFunctionObjArgs(func, obj, value, NULL);

  0004d	45 33 c9	 xor	 r9d, r9d
  00050	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
$LN2@property_d@3:

; 1369 :     if (res == NULL)

  00055	48 85 c0	 test	 rax, rax

; 1370 :         return -1;

  00058	74 df		 je	 SHORT $LN9@property_d@3

; 1371 :     Py_DECREF(res);

  0005a	48 8b c8	 mov	 rcx, rax
  0005d	e8 00 00 00 00	 call	 _Py_DecRef

; 1372 :     return 0;

  00062	33 c0		 xor	 eax, eax

; 1373 : }

  00064	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00068	c3		 ret	 0
property_descr_set ENDP
_TEXT	ENDS
PUBLIC	??_C@_04CMCOBGCG@OOOO?$AA@			; `string'
EXTRN	PyObject_CallFunction:PROC
EXTRN	PyObject_Type:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$property_copy DD imagerel property_copy
	DD	imagerel property_copy+48
	DD	imagerel $unwind$property_copy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$property_copy DD imagerel property_copy+48
	DD	imagerel property_copy+237
	DD	imagerel $chain$0$property_copy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$property_copy DD imagerel property_copy+237
	DD	imagerel property_copy+257
	DD	imagerel $chain$1$property_copy
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$property_copy DD 021H
	DD	imagerel property_copy
	DD	imagerel property_copy+48
	DD	imagerel $unwind$property_copy
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$property_copy DD 020521H
	DD	0a3405H
	DD	imagerel property_copy
	DD	imagerel property_copy+48
	DD	imagerel $unwind$property_copy
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$property_copy DD 081301H
	DD	0c6413H
	DD	0b5413H
	DD	0d00f5213H
	DD	0700bc00dH
xdata	ENDS
;	COMDAT ??_C@_04CMCOBGCG@OOOO?$AA@
CONST	SEGMENT
??_C@_04CMCOBGCG@OOOO?$AA@ DB 'OOOO', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT property_copy
_TEXT	SEGMENT
old$ = 80
get$ = 88
set$ = 96
del$ = 104
property_copy PROC					; COMDAT

; 1377 : {

  00000	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	41 54		 push	 r12
  0000d	41 55		 push	 r13
  0000f	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00013	49 8b f1	 mov	 rsi, r9
  00016	49 8b e8	 mov	 rbp, r8
  00019	48 8b fa	 mov	 rdi, rdx
  0001c	4c 8b e1	 mov	 r12, rcx

; 1378 :     propertyobject *pold = (propertyobject *)old;
; 1379 :     PyObject *new, *type, *doc;
; 1380 : 
; 1381 :     type = PyObject_Type(old);

  0001f	e8 00 00 00 00	 call	 PyObject_Type
  00024	4c 8b e8	 mov	 r13, rax

; 1382 :     if (type == NULL)

  00027	48 85 c0	 test	 rax, rax
  0002a	0f 84 bd 00 00
	00		 je	 $LN1@property_c
$LN22@property_c:
  00030	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx

; 1383 :         return NULL;
; 1384 : 
; 1385 :     if (get == NULL || get == Py_None) {

  00035	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0003c	48 85 ff	 test	 rdi, rdi
  0003f	74 0d		 je	 SHORT $LN18@property_c
  00041	48 3b fb	 cmp	 rdi, rbx
  00044	75 17		 jne	 SHORT $LN25@property_c

; 1386 :         Py_XDECREF(get);

  00046	48 8b cf	 mov	 rcx, rdi
  00049	e8 00 00 00 00	 call	 _Py_DecRef
$LN18@property_c:

; 1387 :         get = pold->prop_get ? pold->prop_get : Py_None;

  0004e	49 8b 44 24 60	 mov	 rax, QWORD PTR [r12+96]
  00053	48 8b fb	 mov	 rdi, rbx
  00056	48 85 c0	 test	 rax, rax
  00059	48 0f 45 f8	 cmovne	 rdi, rax
$LN25@property_c:

; 1388 :     }
; 1389 :     if (set == NULL || set == Py_None) {

  0005d	48 85 ed	 test	 rbp, rbp
  00060	74 0d		 je	 SHORT $LN12@property_c
  00062	48 3b eb	 cmp	 rbp, rbx
  00065	75 17		 jne	 SHORT $LN27@property_c

; 1390 :         Py_XDECREF(set);

  00067	48 8b cd	 mov	 rcx, rbp
  0006a	e8 00 00 00 00	 call	 _Py_DecRef
$LN12@property_c:

; 1391 :         set = pold->prop_set ? pold->prop_set : Py_None;

  0006f	49 8b 44 24 68	 mov	 rax, QWORD PTR [r12+104]
  00074	48 8b eb	 mov	 rbp, rbx
  00077	48 85 c0	 test	 rax, rax
  0007a	48 0f 45 e8	 cmovne	 rbp, rax
$LN27@property_c:

; 1392 :     }
; 1393 :     if (del == NULL || del == Py_None) {

  0007e	48 85 f6	 test	 rsi, rsi
  00081	74 0d		 je	 SHORT $LN6@property_c
  00083	48 3b f3	 cmp	 rsi, rbx
  00086	75 17		 jne	 SHORT $LN29@property_c

; 1394 :         Py_XDECREF(del);

  00088	48 8b ce	 mov	 rcx, rsi
  0008b	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@property_c:

; 1395 :         del = pold->prop_del ? pold->prop_del : Py_None;

  00090	49 8b 44 24 70	 mov	 rax, QWORD PTR [r12+112]
  00095	48 8b f3	 mov	 rsi, rbx
  00098	48 85 c0	 test	 rax, rax
  0009b	48 0f 45 f0	 cmovne	 rsi, rax
$LN29@property_c:

; 1396 :     }
; 1397 :     if (pold->getter_doc && get != Py_None) {

  0009f	41 83 bc 24 80
	00 00 00 00	 cmp	 DWORD PTR [r12+128], 0
  000a8	74 05		 je	 SHORT $LN3@property_c
  000aa	48 3b fb	 cmp	 rdi, rbx
  000ad	75 0c		 jne	 SHORT $LN31@property_c
$LN3@property_c:

; 1398 :         /* make _init use __doc__ from getter */
; 1399 :         doc = Py_None;
; 1400 :     }
; 1401 :     else {
; 1402 :         doc = pold->prop_doc ? pold->prop_doc : Py_None;

  000af	49 8b 44 24 78	 mov	 rax, QWORD PTR [r12+120]
  000b4	48 85 c0	 test	 rax, rax
  000b7	48 0f 45 d8	 cmovne	 rbx, rax
$LN31@property_c:

; 1403 :     }
; 1404 : 
; 1405 :     new =  PyObject_CallFunction(type, "OOOO", get, set, del, doc);

  000bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04CMCOBGCG@OOOO?$AA@
  000c2	4c 8b cd	 mov	 r9, rbp
  000c5	4c 8b c7	 mov	 r8, rdi
  000c8	49 8b cd	 mov	 rcx, r13
  000cb	48 89 5c 24 28	 mov	 QWORD PTR [rsp+40], rbx
  000d0	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  000d5	e8 00 00 00 00	 call	 PyObject_CallFunction

; 1406 :     Py_DECREF(type);

  000da	49 8b cd	 mov	 rcx, r13
  000dd	48 8b d8	 mov	 rbx, rax
  000e0	e8 00 00 00 00	 call	 _Py_DecRef

; 1407 :     if (new == NULL)

  000e5	48 8b c3	 mov	 rax, rbx
  000e8	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
$LN1@property_c:

; 1408 :         return NULL;
; 1409 :     return new;
; 1410 : }

  000ed	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  000f2	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  000f7	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000fb	41 5d		 pop	 r13
  000fd	41 5c		 pop	 r12
  000ff	5f		 pop	 rdi
  00100	c3		 ret	 0
property_copy ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@MLCIKJHM@?$HMOOOO?3property?$AA@	; `string'
EXTRN	PyErr_Clear:PROC
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_Exception:QWORD
EXTRN	_PyObject_SetAttrId:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$property_init DD imagerel property_init
	DD	imagerel property_init+112
	DD	imagerel $unwind$property_init
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$property_init DD imagerel property_init+112
	DD	imagerel property_init+656
	DD	imagerel $chain$1$property_init
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$property_init DD imagerel property_init+656
	DD	imagerel property_init+699
	DD	imagerel $chain$3$property_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$property_init DD 040021H
	DD	0a5400H
	DD	0f3400H
	DD	imagerel property_init
	DD	imagerel property_init+112
	DD	imagerel $unwind$property_init
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$property_init DD 040f21H
	DD	0a540fH
	DD	0f3405H
	DD	imagerel property_init
	DD	imagerel property_init+112
	DD	imagerel $unwind$property_init
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$property_init DD 030901H
	DD	07005a209H
	DD	06004H
xdata	ENDS
;	COMDAT ??_C@_0P@MLCIKJHM@?$HMOOOO?3property?$AA@
CONST	SEGMENT
??_C@_0P@MLCIKJHM@?$HMOOOO?3property?$AA@ DB '|OOOO:property', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\descrobject.c
CONST	ENDS
;	COMDAT property_init
_TEXT	SEGMENT
get$ = 64
doc$ = 72
set$ = 112
self$ = 112
args$ = 120
kwds$ = 128
del$ = 136
property_init PROC					; COMDAT

; 1414 : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	56		 push	 rsi
  00004	57		 push	 rdi
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  00009	48 8b f9	 mov	 rdi, rcx

; 1415 :     PyObject *get = NULL, *set = NULL, *del = NULL, *doc = NULL;

  0000c	33 f6		 xor	 esi, esi

; 1416 :     static char *kwlist[] = {"fget", "fset", "fdel", "doc", 0};
; 1417 :     propertyobject *prop = (propertyobject *)self;
; 1418 : 
; 1419 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "|OOOO:property",
; 1420 :                                      kwlist, &get, &set, &del, &doc))

  0000e	49 8d 4b e0	 lea	 rcx, QWORD PTR [r11-32]
  00012	49 89 4b d0	 mov	 QWORD PTR [r11-48], rcx
  00016	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  0001a	49 8b c0	 mov	 rax, r8
  0001d	49 89 4b c8	 mov	 QWORD PTR [r11-56], rcx
  00021	49 8d 4b 08	 lea	 rcx, QWORD PTR [r11+8]
  00025	4c 8b d2	 mov	 r10, rdx
  00028	49 89 4b c0	 mov	 QWORD PTR [r11-64], rcx
  0002c	49 8d 4b d8	 lea	 rcx, QWORD PTR [r11-40]
  00030	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??property_init@@9@9
  00037	49 89 4b b8	 mov	 QWORD PTR [r11-72], rcx
  0003b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@MLCIKJHM@?$HMOOOO?3property?$AA@
  00042	48 8b d0	 mov	 rdx, rax
  00045	49 8b ca	 mov	 rcx, r10
  00048	49 89 73 d8	 mov	 QWORD PTR [r11-40], rsi
  0004c	49 89 73 08	 mov	 QWORD PTR [r11+8], rsi
  00050	49 89 73 20	 mov	 QWORD PTR [r11+32], rsi
  00054	49 89 73 e0	 mov	 QWORD PTR [r11-32], rsi
  00058	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  0005d	85 c0		 test	 eax, eax
  0005f	75 0a		 jne	 SHORT $LN33@property_i

; 1421 :         return -1;

  00061	83 c8 ff	 or	 eax, -1

; 1471 : }

  00064	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00068	5f		 pop	 rdi
  00069	5e		 pop	 rsi
  0006a	c3		 ret	 0
$LN33@property_i:

; 1422 : 
; 1423 :     if (get == Py_None)
; 1424 :         get = NULL;
; 1425 :     if (set == Py_None)

  0006b	48 8b 44 24 70	 mov	 rax, QWORD PTR set$[rsp]
  00070	48 89 5c 24 78	 mov	 QWORD PTR [rsp+120], rbx
  00075	48 8b 5c 24 40	 mov	 rbx, QWORD PTR get$[rsp]
  0007a	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp
  0007f	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_Py_NoneStruct
  00086	48 3b dd	 cmp	 rbx, rbp
  00089	48 0f 44 de	 cmove	 rbx, rsi
  0008d	48 3b c5	 cmp	 rax, rbp
  00090	48 0f 44 c6	 cmove	 rax, rsi
  00094	48 89 5c 24 40	 mov	 QWORD PTR get$[rsp], rbx
  00099	48 89 44 24 70	 mov	 QWORD PTR set$[rsp], rax

; 1426 :         set = NULL;
; 1427 :     if (del == Py_None)

  0009e	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR del$[rsp]
  000a6	48 3b c5	 cmp	 rax, rbp
  000a9	48 0f 44 c6	 cmove	 rax, rsi
  000ad	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR del$[rsp], rax

; 1428 :         del = NULL;
; 1429 : 
; 1430 :     Py_XINCREF(get);

  000b5	48 85 db	 test	 rbx, rbx
  000b8	74 3b		 je	 SHORT $LN28@property_i
  000ba	e8 00 00 00 00	 call	 _Py_PXCTX
  000bf	85 c0		 test	 eax, eax
  000c1	75 32		 jne	 SHORT $LN28@property_i
  000c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000d1	4c 8b cb	 mov	 r9, rbx
  000d4	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000da	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000e2	e8 00 00 00 00	 call	 _PyParallel_Guard
  000e7	85 c0		 test	 eax, eax
  000e9	75 06		 jne	 SHORT $LN36@property_i
  000eb	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000ef	74 04		 je	 SHORT $LN28@property_i
$LN36@property_i:
  000f1	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN28@property_i:

; 1431 :     Py_XINCREF(set);

  000f5	48 8b 5c 24 70	 mov	 rbx, QWORD PTR set$[rsp]
  000fa	48 85 db	 test	 rbx, rbx
  000fd	74 3b		 je	 SHORT $LN24@property_i
  000ff	e8 00 00 00 00	 call	 _Py_PXCTX
  00104	85 c0		 test	 eax, eax
  00106	75 32		 jne	 SHORT $LN24@property_i
  00108	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0010f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00116	4c 8b cb	 mov	 r9, rbx
  00119	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0011f	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00127	e8 00 00 00 00	 call	 _PyParallel_Guard
  0012c	85 c0		 test	 eax, eax
  0012e	75 06		 jne	 SHORT $LN40@property_i
  00130	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00134	74 04		 je	 SHORT $LN24@property_i
$LN40@property_i:
  00136	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN24@property_i:

; 1432 :     Py_XINCREF(del);

  0013a	48 8b 9c 24 88
	00 00 00	 mov	 rbx, QWORD PTR del$[rsp]
  00142	48 85 db	 test	 rbx, rbx
  00145	74 3b		 je	 SHORT $LN20@property_i
  00147	e8 00 00 00 00	 call	 _Py_PXCTX
  0014c	85 c0		 test	 eax, eax
  0014e	75 32		 jne	 SHORT $LN20@property_i
  00150	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00157	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0015e	4c 8b cb	 mov	 r9, rbx
  00161	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00167	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0016f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00174	85 c0		 test	 eax, eax
  00176	75 06		 jne	 SHORT $LN44@property_i
  00178	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0017c	74 04		 je	 SHORT $LN20@property_i
$LN44@property_i:
  0017e	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN20@property_i:

; 1433 :     Py_XINCREF(doc);

  00182	48 8b 5c 24 48	 mov	 rbx, QWORD PTR doc$[rsp]
  00187	48 85 db	 test	 rbx, rbx
  0018a	74 40		 je	 SHORT $LN16@property_i
  0018c	e8 00 00 00 00	 call	 _Py_PXCTX
  00191	85 c0		 test	 eax, eax
  00193	75 32		 jne	 SHORT $LN55@property_i
  00195	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0019c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  001a3	4c 8b cb	 mov	 r9, rbx
  001a6	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  001ac	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  001b4	e8 00 00 00 00	 call	 _PyParallel_Guard
  001b9	85 c0		 test	 eax, eax
  001bb	75 06		 jne	 SHORT $LN48@property_i
  001bd	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  001c1	74 04		 je	 SHORT $LN55@property_i
$LN48@property_i:
  001c3	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN55@property_i:
  001c7	48 8b 5c 24 48	 mov	 rbx, QWORD PTR doc$[rsp]
$LN16@property_i:

; 1434 : 
; 1435 :     prop->prop_get = get;

  001cc	48 8b 44 24 40	 mov	 rax, QWORD PTR get$[rsp]

; 1436 :     prop->prop_set = set;
; 1437 :     prop->prop_del = del;
; 1438 :     prop->prop_doc = doc;

  001d1	48 89 5f 78	 mov	 QWORD PTR [rdi+120], rbx

; 1439 :     prop->getter_doc = 0;

  001d5	89 b7 80 00 00
	00		 mov	 DWORD PTR [rdi+128], esi
  001db	48 89 47 60	 mov	 QWORD PTR [rdi+96], rax
  001df	48 8b 44 24 70	 mov	 rax, QWORD PTR set$[rsp]
  001e4	48 89 47 68	 mov	 QWORD PTR [rdi+104], rax
  001e8	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR del$[rsp]
  001f0	48 89 47 70	 mov	 QWORD PTR [rdi+112], rax

; 1440 : 
; 1441 :     /* if no docstring given and the getter has one, use that one */
; 1442 :     if ((doc == NULL || doc == Py_None) && get != NULL) {

  001f4	48 85 db	 test	 rbx, rbx
  001f7	74 05		 je	 SHORT $LN12@property_i
  001f9	48 3b dd	 cmp	 rbx, rbp
  001fc	75 7f		 jne	 SHORT $LN1@property_i
$LN12@property_i:
  001fe	48 8b 5c 24 40	 mov	 rbx, QWORD PTR get$[rsp]
  00203	48 85 db	 test	 rbx, rbx
  00206	74 75		 je	 SHORT $LN1@property_i

; 1443 :         _Py_IDENTIFIER(__doc__);
; 1444 :         PyObject *get_doc = _PyObject_GetAttrId(get, &PyId___doc__);

  00208	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  0020e	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00217	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?PyId___doc__@?6??property_init@@9@9
  0021c	48 8b 2c d0	 mov	 rbp, QWORD PTR [rax+rdx*8]
  00220	48 03 e9	 add	 rbp, rcx
  00223	48 8b cb	 mov	 rcx, rbx
  00226	48 8b d5	 mov	 rdx, rbp
  00229	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0022e	48 8b f0	 mov	 rsi, rax

; 1445 :         if (get_doc) {

  00231	48 85 c0	 test	 rax, rax
  00234	74 5a		 je	 SHORT $LN11@property_i

; 1446 :             if (Py_TYPE(self) == &PyProperty_Type) {

  00236	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyProperty_Type
  0023d	48 39 47 58	 cmp	 QWORD PTR [rdi+88], rax
  00241	75 14		 jne	 SHORT $LN10@property_i

; 1447 :                 Py_XDECREF(prop->prop_doc);

  00243	48 8b 4f 78	 mov	 rcx, QWORD PTR [rdi+120]
  00247	48 85 c9	 test	 rcx, rcx
  0024a	74 05		 je	 SHORT $LN8@property_i
  0024c	e8 00 00 00 00	 call	 _Py_DecRef
$LN8@property_i:

; 1448 :                 prop->prop_doc = get_doc;

  00251	48 89 77 78	 mov	 QWORD PTR [rdi+120], rsi

; 1449 :             }
; 1450 :             else {

  00255	eb 1c		 jmp	 SHORT $LN4@property_i
$LN10@property_i:

; 1451 :                 /* If this is a property subclass, put __doc__
; 1452 :                 in dict of the subclass instance instead,
; 1453 :                 otherwise it gets shadowed by __doc__ in the
; 1454 :                 class's dict. */
; 1455 :                 int err = _PyObject_SetAttrId(self, &PyId___doc__, get_doc);

  00257	4c 8b c6	 mov	 r8, rsi
  0025a	48 8b d5	 mov	 rdx, rbp
  0025d	48 8b cf	 mov	 rcx, rdi
  00260	e8 00 00 00 00	 call	 _PyObject_SetAttrId

; 1456 :                 Py_DECREF(get_doc);

  00265	48 8b ce	 mov	 rcx, rsi
  00268	8b d8		 mov	 ebx, eax
  0026a	e8 00 00 00 00	 call	 _Py_DecRef

; 1457 :                 if (err < 0)

  0026f	85 db		 test	 ebx, ebx

; 1458 :                     return -1;

  00271	78 34		 js	 SHORT $LN2@property_i
$LN4@property_i:

; 1459 :             }
; 1460 :             prop->getter_doc = 1;

  00273	c7 87 80 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rdi+128], 1
$LN1@property_i:
  0027d	48 8b 5c 24 78	 mov	 rbx, QWORD PTR [rsp+120]
  00282	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]

; 1467 :         }
; 1468 :     }
; 1469 : 
; 1470 :     return 0;

  00287	33 c0		 xor	 eax, eax

; 1471 : }

  00289	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0028d	5f		 pop	 rdi
  0028e	5e		 pop	 rsi
  0028f	c3		 ret	 0
$LN11@property_i:

; 1461 :         }
; 1462 :         else if (PyErr_ExceptionMatches(PyExc_Exception)) {

  00290	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_Exception
  00297	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  0029c	85 c0		 test	 eax, eax
  0029e	74 07		 je	 SHORT $LN2@property_i

; 1463 :             PyErr_Clear();

  002a0	e8 00 00 00 00	 call	 PyErr_Clear

; 1464 :         }
; 1465 :         else {

  002a5	eb d6		 jmp	 SHORT $LN1@property_i
$LN2@property_i:
  002a7	48 8b 5c 24 78	 mov	 rbx, QWORD PTR [rsp+120]
  002ac	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]

; 1466 :             return -1;

  002b1	83 c8 ff	 or	 eax, -1

; 1471 : }

  002b4	48 83 c4 58	 add	 rsp, 88			; 00000058H
  002b8	5f		 pop	 rdi
  002b9	5e		 pop	 rsi
  002ba	c3		 ret	 0
property_init ENDP
_TEXT	ENDS
EXTRN	_PyObject_IsAbstract:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$property_get___isabstractmethod__ DD imagerel property_get___isabstractmethod__
	DD	imagerel property_get___isabstractmethod__+207
	DD	imagerel $unwind$property_get___isabstractmethod__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$property_get___isabstractmethod__ DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\descrobject.c
xdata	ENDS
;	COMDAT property_get___isabstractmethod__
_TEXT	SEGMENT
prop$ = 64
closure$ = 72
property_get___isabstractmethod__ PROC			; COMDAT

; 1475 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 1476 :     int res = _PyObject_IsAbstract(prop->prop_get);

  00009	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  0000d	e8 00 00 00 00	 call	 _PyObject_IsAbstract

; 1477 :     if (res == -1) {

  00012	83 f8 ff	 cmp	 eax, -1
  00015	75 08		 jne	 SHORT $LN9@property_g
$LN16@property_g:

; 1478 :         return NULL;

  00017	33 c0		 xor	 eax, eax

; 1500 : }

  00019	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0001d	5b		 pop	 rbx
  0001e	c3		 ret	 0
$LN9@property_g:

; 1479 :     }
; 1480 :     else if (res) {

  0001f	85 c0		 test	 eax, eax
  00021	74 52		 je	 SHORT $LN7@property_g

; 1481 :         Py_RETURN_TRUE;

  00023	e8 00 00 00 00	 call	 _Py_PXCTX
  00028	85 c0		 test	 eax, eax
  0002a	75 3c		 jne	 SHORT $LN13@property_g
  0002c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_TrueStruct
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00041	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00047	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0004f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00054	85 c0		 test	 eax, eax
  00056	75 09		 jne	 SHORT $LN12@property_g
  00058	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_TrueStruct+32, 32 ; 00000020H
  0005f	74 07		 je	 SHORT $LN13@property_g
$LN12@property_g:
  00061	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_TrueStruct+80
$LN13@property_g:
  00068	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct

; 1500 : }

  0006f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00073	5b		 pop	 rbx
  00074	c3		 ret	 0
$LN7@property_g:

; 1482 :     }
; 1483 : 
; 1484 :     res = _PyObject_IsAbstract(prop->prop_set);

  00075	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00079	e8 00 00 00 00	 call	 _PyObject_IsAbstract

; 1485 :     if (res == -1) {

  0007e	83 f8 ff	 cmp	 eax, -1

; 1486 :         return NULL;

  00081	74 94		 je	 SHORT $LN16@property_g

; 1487 :     }
; 1488 :     else if (res) {

  00083	85 c0		 test	 eax, eax
  00085	74 19		 je	 SHORT $LN4@property_g
$LN17@property_g:

; 1489 :         Py_RETURN_TRUE;

  00087	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  0008e	e8 00 00 00 00	 call	 _Py_IncRef
  00093	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct

; 1500 : }

  0009a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0009e	5b		 pop	 rbx
  0009f	c3		 ret	 0
$LN4@property_g:

; 1490 :     }
; 1491 : 
; 1492 :     res = _PyObject_IsAbstract(prop->prop_del);

  000a0	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  000a4	e8 00 00 00 00	 call	 _PyObject_IsAbstract

; 1493 :     if (res == -1) {

  000a9	83 f8 ff	 cmp	 eax, -1

; 1494 :         return NULL;

  000ac	0f 84 65 ff ff
	ff		 je	 $LN16@property_g

; 1495 :     }
; 1496 :     else if (res) {

  000b2	85 c0		 test	 eax, eax

; 1497 :         Py_RETURN_TRUE;

  000b4	75 d1		 jne	 SHORT $LN17@property_g

; 1498 :     }
; 1499 :     Py_RETURN_FALSE;

  000b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  000bd	e8 00 00 00 00	 call	 _Py_IncRef
  000c2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 1500 : }

  000c9	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000cd	5b		 pop	 rbx
  000ce	c3		 ret	 0
property_get___isabstractmethod__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@FEAJNJE@property_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$property_traverse DD imagerel property_traverse
	DD	imagerel property_traverse+266
	DD	imagerel $unwind$property_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$property_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BC@FEAJNJE@property_traverse?$AA@
CONST	SEGMENT
??_C@_0BC@FEAJNJE@property_traverse?$AA@ DB 'property_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT property_traverse
_TEXT	SEGMENT
self$ = 48
visit$ = 56
arg$ = 64
property_traverse PROC					; COMDAT

; 1538 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 1539 :     propertyobject *pp = (propertyobject *)self;
; 1540 :     Py_VISIT(pp->prop_get);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN21@property_t
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@FEAJNJE@property_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 04 06 00
	00		 mov	 r8d, 1540		; 00000604H
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN21@property_t:
  0003d	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 0d		 je	 SHORT $LN23@property_t
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	0f 85 a7 00 00
	00		 jne	 $LN25@property_t
$LN23@property_t:

; 1541 :     Py_VISIT(pp->prop_set);

  00053	e8 00 00 00 00	 call	 _Py_PXCTX
  00058	85 c0		 test	 eax, eax
  0005a	74 1c		 je	 SHORT $LN15@property_t
  0005c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  00063	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@FEAJNJE@property_traverse?$AA@
  0006a	45 33 c9	 xor	 r9d, r9d
  0006d	41 b8 05 06 00
	00		 mov	 r8d, 1541		; 00000605H
  00073	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN15@property_t:
  00078	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  0007c	48 85 c9	 test	 rcx, rcx
  0007f	74 09		 je	 SHORT $LN17@property_t
  00081	48 8b d7	 mov	 rdx, rdi
  00084	ff d6		 call	 rsi
  00086	85 c0		 test	 eax, eax
  00088	75 70		 jne	 SHORT $LN25@property_t
$LN17@property_t:

; 1542 :     Py_VISIT(pp->prop_del);

  0008a	e8 00 00 00 00	 call	 _Py_PXCTX
  0008f	85 c0		 test	 eax, eax
  00091	74 1c		 je	 SHORT $LN9@property_t
  00093	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  0009a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@FEAJNJE@property_traverse?$AA@
  000a1	45 33 c9	 xor	 r9d, r9d
  000a4	41 b8 06 06 00
	00		 mov	 r8d, 1542		; 00000606H
  000aa	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@property_t:
  000af	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  000b3	48 85 c9	 test	 rcx, rcx
  000b6	74 09		 je	 SHORT $LN11@property_t
  000b8	48 8b d7	 mov	 rdx, rdi
  000bb	ff d6		 call	 rsi
  000bd	85 c0		 test	 eax, eax
  000bf	75 39		 jne	 SHORT $LN25@property_t
$LN11@property_t:

; 1543 :     Py_VISIT(pp->prop_doc);

  000c1	e8 00 00 00 00	 call	 _Py_PXCTX
  000c6	85 c0		 test	 eax, eax
  000c8	74 1c		 je	 SHORT $LN3@property_t
  000ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  000d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@FEAJNJE@property_traverse?$AA@
  000d8	45 33 c9	 xor	 r9d, r9d
  000db	41 b8 07 06 00
	00		 mov	 r8d, 1543		; 00000607H
  000e1	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@property_t:
  000e6	48 8b 4b 78	 mov	 rcx, QWORD PTR [rbx+120]
  000ea	48 85 c9	 test	 rcx, rcx
  000ed	74 09		 je	 SHORT $LN5@property_t
  000ef	48 8b d7	 mov	 rdx, rdi
  000f2	ff d6		 call	 rsi
  000f4	85 c0		 test	 eax, eax
  000f6	75 02		 jne	 SHORT $LN25@property_t
$LN5@property_t:

; 1544 :     return 0;

  000f8	33 c0		 xor	 eax, eax
$LN25@property_t:

; 1545 : }

  000fa	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000ff	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00104	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00108	5f		 pop	 rdi
  00109	c3		 ret	 0
property_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrapperdescr_get DD imagerel wrapperdescr_get
	DD	imagerel wrapperdescr_get+67
	DD	imagerel $unwind$wrapperdescr_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrapperdescr_get DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT wrapperdescr_get
_TEXT	SEGMENT
descr$ = 48
obj$ = 56
type$ = 64
res$ = 72
wrapperdescr_get PROC					; COMDAT

; 159  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 160  :     PyObject *res;
; 161  : 
; 162  :     if (descr_check((PyDescrObject *)descr, obj, &res))

  0000a	4c 8d 44 24 48	 lea	 r8, QWORD PTR res$[rsp]
  0000f	48 8b da	 mov	 rbx, rdx
  00012	48 8b f9	 mov	 rdi, rcx
  00015	e8 00 00 00 00	 call	 descr_check
  0001a	85 c0		 test	 eax, eax
  0001c	74 10		 je	 SHORT $LN1@wrapperdes@2

; 163  :         return res;

  0001e	48 8b 44 24 48	 mov	 rax, QWORD PTR res$[rsp]

; 165  : }

  00023	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5f		 pop	 rdi
  0002d	c3		 ret	 0
$LN1@wrapperdes@2:

; 164  :     return PyWrapper_New((PyObject *)descr, obj);

  0002e	48 8b d3	 mov	 rdx, rbx
  00031	48 8b cf	 mov	 rcx, rdi

; 165  : }

  00034	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00039	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003d	5f		 pop	 rdi
  0003e	e9 00 00 00 00	 jmp	 PyWrapper_New
wrapperdescr_get ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrapperdescr_call DD imagerel wrapperdescr_call
	DD	imagerel wrapperdescr_call+94
	DD	imagerel $unwind$wrapperdescr_call
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$wrapperdescr_call DD imagerel wrapperdescr_call+94
	DD	imagerel wrapperdescr_call+277
	DD	imagerel $chain$0$wrapperdescr_call
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$wrapperdescr_call DD imagerel wrapperdescr_call+277
	DD	imagerel wrapperdescr_call+299
	DD	imagerel $chain$1$wrapperdescr_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$wrapperdescr_call DD 021H
	DD	imagerel wrapperdescr_call
	DD	imagerel wrapperdescr_call+94
	DD	imagerel $unwind$wrapperdescr_call
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$wrapperdescr_call DD 020521H
	DD	087405H
	DD	imagerel wrapperdescr_call
	DD	imagerel wrapperdescr_call+94
	DD	imagerel $unwind$wrapperdescr_call
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrapperdescr_call DD 081501H
	DD	0b6415H
	DD	0a5415H
	DD	093415H
	DD	0c0115215H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT wrapperdescr_call
_TEXT	SEGMENT
descr$ = 64
args$ = 72
kwds$ = 80
wrapperdescr_call PROC					; COMDAT

; 311  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	41 54		 push	 r12
  00011	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 312  :     Py_ssize_t argc;
; 313  :     PyObject *self, *func, *result;
; 314  : 
; 315  :     /* Make sure that the first argument is acceptable as 'self' */
; 316  :     assert(PyTuple_Check(args));
; 317  :     argc = PyTuple_GET_SIZE(args);

  00015	48 8b 6a 60	 mov	 rbp, QWORD PTR [rdx+96]
  00019	4d 8b e0	 mov	 r12, r8
  0001c	48 8b f2	 mov	 rsi, rdx
  0001f	48 8b d9	 mov	 rbx, rcx

; 318  :     if (argc < 1) {

  00022	48 83 fd 01	 cmp	 rbp, 1
  00026	7d 36		 jge	 SHORT $LN4@wrapperdes@3

; 319  :         PyErr_Format(PyExc_TypeError,
; 320  :                      "descriptor '%V' of '%.100s' "
; 321  :                      "object needs an argument",
; 322  :                      descr_name((PyDescrObject *)descr), "?",
; 323  :                      PyDescr_TYPE(descr)->tp_name);

  00028	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  0002c	e8 00 00 00 00	 call	 descr_name
  00031	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00038	4c 8b c0	 mov	 r8, rax
  0003b	48 8b 42 70	 mov	 rax, QWORD PTR [rdx+112]
  0003f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DF@DNBKEIFF@descriptor?5?8?$CFV?8?5of?5?8?$CF?4100s?8?5obje@
  0004d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00052	e8 00 00 00 00	 call	 PyErr_Format

; 324  :         return NULL;

  00057	33 c0		 xor	 eax, eax
  00059	e9 b7 00 00 00	 jmp	 $LN5@wrapperdes@3
$LN4@wrapperdes@3:
  0005e	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi

; 325  :     }
; 326  :     self = PyTuple_GET_ITEM(args, 0);

  00063	48 8b 7a 70	 mov	 rdi, QWORD PTR [rdx+112]

; 327  :     if (!_PyObject_RealIsSubclass((PyObject *)Py_TYPE(self),
; 328  :                                   (PyObject *)PyDescr_TYPE(descr))) {

  00067	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  0006b	48 8b 4f 58	 mov	 rcx, QWORD PTR [rdi+88]
  0006f	e8 00 00 00 00	 call	 _PyObject_RealIsSubclass

; 329  :         PyErr_Format(PyExc_TypeError,
; 330  :                      "descriptor '%V' "
; 331  :                      "requires a '%.100s' object "
; 332  :                      "but received a '%.100s'",
; 333  :                      descr_name((PyDescrObject *)descr), "?",
; 334  :                      PyDescr_TYPE(descr)->tp_name,
; 335  :                      self->ob_type->tp_name);

  00074	48 8b cb	 mov	 rcx, rbx
  00077	85 c0		 test	 eax, eax
  00079	75 40		 jne	 SHORT $LN3@wrapperdes@3
  0007b	48 8b 57 58	 mov	 rdx, QWORD PTR [rdi+88]
  0007f	4c 8b 4b 60	 mov	 r9, QWORD PTR [rbx+96]
  00083	e8 00 00 00 00	 call	 descr_name
  00088	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0008f	4c 8b c0	 mov	 r8, rax
  00092	48 8b 42 70	 mov	 rax, QWORD PTR [rdx+112]
  00096	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0009b	49 8b 41 70	 mov	 rax, QWORD PTR [r9+112]
  0009f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  000a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0ED@JEKLHGCL@descriptor?5?8?$CFV?8?5requires?5a?5?8?$CF?410@
  000ad	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000b2	e8 00 00 00 00	 call	 PyErr_Format

; 336  :         return NULL;

  000b7	33 c0		 xor	 eax, eax
  000b9	eb 55		 jmp	 SHORT $LN7@wrapperdes@3
$LN3@wrapperdes@3:

; 337  :     }
; 338  : 
; 339  :     func = PyWrapper_New((PyObject *)descr, self);

  000bb	48 8b d7	 mov	 rdx, rdi
  000be	e8 00 00 00 00	 call	 PyWrapper_New
  000c3	48 8b f8	 mov	 rdi, rax

; 340  :     if (func == NULL)

  000c6	48 85 c0	 test	 rax, rax

; 341  :         return NULL;

  000c9	74 20		 je	 SHORT $LN8@wrapperdes@3

; 342  :     args = PyTuple_GetSlice(args, 1, argc);

  000cb	4c 8b c5	 mov	 r8, rbp
  000ce	ba 01 00 00 00	 mov	 edx, 1
  000d3	48 8b ce	 mov	 rcx, rsi
  000d6	e8 00 00 00 00	 call	 PyTuple_GetSlice

; 343  :     if (args == NULL) {
; 344  :         Py_DECREF(func);

  000db	48 8b cf	 mov	 rcx, rdi
  000de	48 8b f0	 mov	 rsi, rax
  000e1	48 85 c0	 test	 rax, rax
  000e4	75 09		 jne	 SHORT $LN1@wrapperdes@3
  000e6	e8 00 00 00 00	 call	 _Py_DecRef
$LN8@wrapperdes@3:

; 345  :         return NULL;

  000eb	33 c0		 xor	 eax, eax
  000ed	eb 21		 jmp	 SHORT $LN7@wrapperdes@3
$LN1@wrapperdes@3:

; 346  :     }
; 347  :     result = PyEval_CallObjectWithKeywords(func, args, kwds);

  000ef	4d 8b c4	 mov	 r8, r12
  000f2	48 8b d0	 mov	 rdx, rax
  000f5	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords

; 348  :     Py_DECREF(args);

  000fa	48 8b ce	 mov	 rcx, rsi
  000fd	48 8b d8	 mov	 rbx, rax
  00100	e8 00 00 00 00	 call	 _Py_DecRef

; 349  :     Py_DECREF(func);

  00105	48 8b cf	 mov	 rcx, rdi
  00108	e8 00 00 00 00	 call	 _Py_DecRef

; 350  :     return result;

  0010d	48 8b c3	 mov	 rax, rbx
$LN7@wrapperdes@3:
  00110	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
$LN5@wrapperdes@3:

; 351  : }

  00115	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  0011a	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  0011f	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  00124	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00128	41 5c		 pop	 r12
  0012a	c3		 ret	 0
wrapperdescr_call ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT property_getter
_TEXT	SEGMENT
self$ = 8
getter$ = 16
property_getter PROC					; COMDAT

; 1287 :     return property_copy(self, getter, NULL, NULL);

  00000	45 33 c9	 xor	 r9d, r9d
  00003	45 33 c0	 xor	 r8d, r8d

; 1288 : }

  00006	e9 00 00 00 00	 jmp	 property_copy
property_getter ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT property_setter
_TEXT	SEGMENT
self$ = 8
setter$ = 16
property_setter PROC					; COMDAT

; 1297 :     return property_copy(self, NULL, setter, NULL);

  00000	4c 8b c2	 mov	 r8, rdx
  00003	45 33 c9	 xor	 r9d, r9d
  00006	33 d2		 xor	 edx, edx

; 1298 : }

  00008	e9 00 00 00 00	 jmp	 property_copy
property_setter ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT property_deleter
_TEXT	SEGMENT
self$ = 8
deleter$ = 16
property_deleter PROC					; COMDAT

; 1307 :     return property_copy(self, NULL, NULL, deleter);

  00000	4c 8b ca	 mov	 r9, rdx
  00003	45 33 c0	 xor	 r8d, r8d
  00006	33 d2		 xor	 edx, edx

; 1308 : }

  00008	e9 00 00 00 00	 jmp	 property_copy
property_deleter ENDP
_TEXT	ENDS
END
