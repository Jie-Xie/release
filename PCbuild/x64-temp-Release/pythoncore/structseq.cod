; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0L@NNMACJIG@__reduce__?$AA@		; `string'
PUBLIC	??_C@_04BCIDKIGN@dict?$AA@			; `string'
PUBLIC	??_C@_08IBBDGPOF@sequence?$AA@			; `string'
PUBLIC	??_C@_0O@ELHOMFEL@unnamed?5field?$AA@		; `string'
PUBLIC	PyStructSequence_UnnamedField
EXTRN	PyType_Type:BYTE
;	COMDAT ??_C@_0L@NNMACJIG@__reduce__?$AA@
CONST	SEGMENT
??_C@_0L@NNMACJIG@__reduce__?$AA@ DB '__reduce__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04BCIDKIGN@dict?$AA@
CONST	SEGMENT
??_C@_04BCIDKIGN@dict?$AA@ DB 'dict', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08IBBDGPOF@sequence?$AA@
CONST	SEGMENT
??_C@_08IBBDGPOF@sequence?$AA@ DB 'sequence', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ELHOMFEL@unnamed?5field?$AA@
CONST	SEGMENT
??_C@_0O@ELHOMFEL@unnamed?5field?$AA@ DB 'unnamed field', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
visible_length_key DB 'n_sequence_fields', 00H
	ORG $+6
real_length_key DB 'n_fields', 00H
	ORG $+7
unnamed_fields_key DB 'n_unnamed_fields', 00H
	ORG $+7
PyStructSequence_UnnamedField DQ FLAT:??_C@_0O@ELHOMFEL@unnamed?5field?$AA@
?kwlist@?1??structseq_new@@9@9 DQ FLAT:??_C@_08IBBDGPOF@sequence?$AA@ ; `structseq_new'::`2'::kwlist
	DQ	FLAT:??_C@_04BCIDKIGN@dict?$AA@
	DQ	0000000000000000H
structseq_methods DQ FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:structseq_reduce
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
_struct_sequence_template DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000000H
	DQ	0000000000000078H
	DQ	0000000000000008H
	DQ	FLAT:structseq_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:structseq_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:structseq_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:structseq_new
	ORG $+72
_DATA	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	PyStructSequence_New
EXTRN	_PyObject_GC_NewVar:PROC
EXTRN	_PxObject_NewVar:PROC
EXTRN	PyLong_AsLong:PROC
EXTRN	PyDict_GetItemString:PROC
EXTRN	memset:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\structseq.c
pdata	SEGMENT
$pdata$PyStructSequence_New DD imagerel $LN12
	DD	imagerel $LN12+175
	DD	imagerel $unwind$PyStructSequence_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyStructSequence_New DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyStructSequence_New
_TEXT	SEGMENT
type$ = 48
PyStructSequence_New PROC				; COMDAT

; 30   : {

$LN12:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b f1	 mov	 rsi, rcx

; 31   :     PyStructSequence *obj;
; 32   :     Py_ssize_t size = REAL_SIZE_TP(type), i;

  00012	48 8b 89 60 01
	00 00		 mov	 rcx, QWORD PTR [rcx+352]
  00019	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:real_length_key
  00020	e8 00 00 00 00	 call	 PyDict_GetItemString
  00025	48 8b c8	 mov	 rcx, rax
  00028	e8 00 00 00 00	 call	 PyLong_AsLong
  0002d	48 63 f8	 movsxd	 rdi, eax

; 33   : 
; 34   :     obj = PyObject_GC_NewVar(PyStructSequence, type, size);

  00030	e8 00 00 00 00	 call	 _Py_PXCTX
  00035	48 8b d7	 mov	 rdx, rdi
  00038	48 8b ce	 mov	 rcx, rsi
  0003b	85 c0		 test	 eax, eax
  0003d	74 07		 je	 SHORT $LN7@PyStructSe
  0003f	e8 00 00 00 00	 call	 _PxObject_NewVar
  00044	eb 05		 jmp	 SHORT $LN11@PyStructSe
$LN7@PyStructSe:
  00046	e8 00 00 00 00	 call	 _PyObject_GC_NewVar
$LN11@PyStructSe:
  0004b	48 8b d8	 mov	 rbx, rax

; 35   :     if (obj == NULL)

  0004e	48 85 c0	 test	 rax, rax
  00051	75 10		 jne	 SHORT $LN4@PyStructSe

; 41   :         obj->ob_item[i] = NULL;
; 42   : 
; 43   :     return (PyObject*)obj;
; 44   : }

  00053	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00058	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0005d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00061	5f		 pop	 rdi
  00062	c3		 ret	 0
$LN4@PyStructSe:

; 36   :         return NULL;
; 37   :     /* Hack the size of the variable object, so invisible fields don't appear
; 38   :      to Python code. */
; 39   :     Py_SIZE(obj) = VISIBLE_SIZE_TP(type);

  00063	48 8b 8e 60 01
	00 00		 mov	 rcx, QWORD PTR [rsi+352]
  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:visible_length_key
  00071	e8 00 00 00 00	 call	 PyDict_GetItemString
  00076	48 8b c8	 mov	 rcx, rax
  00079	e8 00 00 00 00	 call	 PyLong_AsLong
  0007e	48 63 c8	 movsxd	 rcx, eax
  00081	48 89 4b 60	 mov	 QWORD PTR [rbx+96], rcx

; 40   :     for (i = 0; i < size; i++)

  00085	48 85 ff	 test	 rdi, rdi
  00088	7e 12		 jle	 SHORT $LN3@PyStructSe

; 36   :         return NULL;
; 37   :     /* Hack the size of the variable object, so invisible fields don't appear
; 38   :      to Python code. */
; 39   :     Py_SIZE(obj) = VISIBLE_SIZE_TP(type);

  0008a	48 c1 e7 03	 shl	 rdi, 3
  0008e	48 8d 4b 70	 lea	 rcx, QWORD PTR [rbx+112]
  00092	33 d2		 xor	 edx, edx
  00094	4c 8b c7	 mov	 r8, rdi
  00097	e8 00 00 00 00	 call	 memset
$LN3@PyStructSe:

; 41   :         obj->ob_item[i] = NULL;
; 42   : 
; 43   :     return (PyObject*)obj;
; 44   : }

  0009c	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000a1	48 8b c3	 mov	 rax, rbx
  000a4	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ad	5f		 pop	 rdi
  000ae	c3		 ret	 0
PyStructSequence_New ENDP
_TEXT	ENDS
PUBLIC	PyStructSequence_SetItem
; Function compile flags: /Ogtpy
;	COMDAT PyStructSequence_SetItem
_TEXT	SEGMENT
op$ = 8
i$ = 16
v$ = 24
PyStructSequence_SetItem PROC				; COMDAT

; 49   :     PyStructSequence_SET_ITEM(op, i, v);

  00000	4c 89 44 d1 70	 mov	 QWORD PTR [rcx+rdx*8+112], r8

; 50   : }

  00005	c3		 ret	 0
PyStructSequence_SetItem ENDP
_TEXT	ENDS
PUBLIC	PyStructSequence_GetItem
; Function compile flags: /Ogtpy
;	COMDAT PyStructSequence_GetItem
_TEXT	SEGMENT
op$ = 8
i$ = 16
PyStructSequence_GetItem PROC				; COMDAT

; 55   :     return PyStructSequence_GET_ITEM(op, i);

  00000	48 8b 44 d1 70	 mov	 rax, QWORD PTR [rcx+rdx*8+112]

; 56   : }

  00005	c3		 ret	 0
PyStructSequence_GetItem ENDP
_TEXT	ENDS
EXTRN	PyObject_GC_Del:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$structseq_dealloc DD imagerel structseq_dealloc
	DD	imagerel structseq_dealloc+55
	DD	imagerel $unwind$structseq_dealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$structseq_dealloc DD imagerel structseq_dealloc+55
	DD	imagerel structseq_dealloc+197
	DD	imagerel $chain$1$structseq_dealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$structseq_dealloc DD imagerel structseq_dealloc+197
	DD	imagerel structseq_dealloc+215
	DD	imagerel $chain$2$structseq_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$structseq_dealloc DD 021H
	DD	imagerel structseq_dealloc
	DD	imagerel structseq_dealloc+55
	DD	imagerel $unwind$structseq_dealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$structseq_dealloc DD 040a21H
	DD	09740aH
	DD	083405H
	DD	imagerel structseq_dealloc
	DD	imagerel structseq_dealloc+55
	DD	imagerel $unwind$structseq_dealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$structseq_dealloc DD 040a01H
	DD	0a540aH
	DD	06006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\structseq.c
xdata	ENDS
;	COMDAT structseq_dealloc
_TEXT	SEGMENT
obj$ = 64
structseq_dealloc PROC					; COMDAT

; 60   : {

  00000	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  00005	56		 push	 rsi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b e9	 mov	 rbp, rcx

; 61   :     Py_ssize_t i, size;
; 62   :     
; 63   :     size = REAL_SIZE(obj);

  0000d	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:real_length_key
  00018	48 8b 89 60 01
	00 00		 mov	 rcx, QWORD PTR [rcx+352]
  0001f	e8 00 00 00 00	 call	 PyDict_GetItemString
  00024	48 8b c8	 mov	 rcx, rax
  00027	e8 00 00 00 00	 call	 PyLong_AsLong
  0002c	48 63 f0	 movsxd	 rsi, eax

; 64   :     for (i = 0; i < size; ++i) {

  0002f	85 c0		 test	 eax, eax
  00031	0f 8e 8e 00 00
	00		 jle	 $LN5@structseq_

; 61   :     Py_ssize_t i, size;
; 62   :     
; 63   :     size = REAL_SIZE(obj);

  00037	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0003c	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  00041	48 8d 7d 70	 lea	 rdi, QWORD PTR [rbp+112]
$LL7@structseq_:

; 65   :         Py_XDECREF(obj->ob_item[i]);

  00045	48 8b 1f	 mov	 rbx, QWORD PTR [rdi]
  00048	48 85 db	 test	 rbx, rbx
  0004b	74 65		 je	 SHORT $LN3@structseq_
  0004d	e8 00 00 00 00	 call	 _Py_PXCTX
  00052	85 c0		 test	 eax, eax
  00054	75 5c		 jne	 SHORT $LN3@structseq_
  00056	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0005a	a8 20		 test	 al, 32			; 00000020H
  0005c	75 4c		 jne	 SHORT $LN14@structseq_
  0005e	84 c0		 test	 al, al
  00060	78 48		 js	 SHORT $LN14@structseq_
  00062	a8 02		 test	 al, 2
  00064	75 4c		 jne	 SHORT $LN3@structseq_
  00066	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0006a	75 46		 jne	 SHORT $LN3@structseq_
  0006c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00073	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0007a	4c 8b cb	 mov	 r9, rbx
  0007d	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00083	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0008b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00090	48 8b cb	 mov	 rcx, rbx
  00093	85 c0		 test	 eax, eax
  00095	74 07		 je	 SHORT $LN19@structseq_
  00097	e8 00 00 00 00	 call	 _Px_Dealloc
  0009c	eb 14		 jmp	 SHORT $LN3@structseq_
$LN19@structseq_:
  0009e	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000a2	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000a8	eb 08		 jmp	 SHORT $LN3@structseq_
$LN14@structseq_:
  000aa	48 8b cb	 mov	 rcx, rbx
  000ad	e8 00 00 00 00	 call	 Px_DecRef
$LN3@structseq_:

; 64   :     for (i = 0; i < size; ++i) {

  000b2	48 83 c7 08	 add	 rdi, 8
  000b6	48 ff ce	 dec	 rsi
  000b9	75 8a		 jne	 SHORT $LL7@structseq_
  000bb	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  000c0	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN5@structseq_:

; 66   :     }
; 67   :     PyObject_GC_Del(obj);

  000c5	48 8b cd	 mov	 rcx, rbp

; 68   : }

  000c8	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  000cd	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d1	5e		 pop	 rsi
  000d2	e9 00 00 00 00	 jmp	 PyObject_GC_Del
structseq_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DD@ODKCNJON@?$CF?4500s?$CI?$CJ?5takes?5a?5?$CFzd?9sequence?5?$CI?$CF@ ; `string'
PUBLIC	??_C@_0DM@JOADAEEN@?$CF?4500s?$CI?$CJ?5takes?5an?5at?5most?5?$CFzd?9se@ ; `string'
PUBLIC	??_C@_0DN@OAOHDEAK@?$CF?4500s?$CI?$CJ?5takes?5an?5at?5least?5?$CFzd?9s@ ; `string'
PUBLIC	??_C@_0CM@HNEHEKCC@?$CF?4500s?$CI?$CJ?5takes?5a?5dict?5as?5second?5@ ; `string'
PUBLIC	??_C@_0CA@CFGGFGAN@constructor?5requires?5a?5sequence?$AA@ ; `string'
PUBLIC	??_C@_0O@PCIBILIP@O?$HMO?3structseq?$AA@	; `string'
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PySequence_Fast:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$structseq_new DD imagerel structseq_new
	DD	imagerel structseq_new+102
	DD	imagerel $unwind$structseq_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$structseq_new DD imagerel structseq_new+102
	DD	imagerel structseq_new+207
	DD	imagerel $chain$0$structseq_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$structseq_new DD imagerel structseq_new+207
	DD	imagerel structseq_new+419
	DD	imagerel $chain$5$structseq_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$structseq_new DD imagerel structseq_new+419
	DD	imagerel structseq_new+457
	DD	imagerel $chain$6$structseq_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$structseq_new DD imagerel structseq_new+457
	DD	imagerel structseq_new+715
	DD	imagerel $chain$7$structseq_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$structseq_new DD imagerel structseq_new+715
	DD	imagerel structseq_new+720
	DD	imagerel $chain$8$structseq_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$structseq_new DD imagerel structseq_new+720
	DD	imagerel structseq_new+749
	DD	imagerel $chain$9$structseq_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$structseq_new DD 021H
	DD	imagerel structseq_new+207
	DD	imagerel structseq_new+419
	DD	imagerel $chain$5$structseq_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$structseq_new DD 021H
	DD	imagerel structseq_new+419
	DD	imagerel structseq_new+457
	DD	imagerel $chain$6$structseq_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$structseq_new DD 020821H
	DD	0106408H
	DD	imagerel structseq_new+419
	DD	imagerel structseq_new+457
	DD	imagerel $chain$6$structseq_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$structseq_new DD 020521H
	DD	09e405H
	DD	imagerel structseq_new+207
	DD	imagerel structseq_new+419
	DD	imagerel $chain$5$structseq_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$structseq_new DD 082621H
	DD	08f426H
	DD	0f5421H
	DD	0e3415H
	DD	0a7400H
	DD	imagerel structseq_new
	DD	imagerel structseq_new+102
	DD	imagerel $unwind$structseq_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$structseq_new DD 020521H
	DD	0a7405H
	DD	imagerel structseq_new
	DD	imagerel structseq_new+102
	DD	imagerel $unwind$structseq_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$structseq_new DD 030b01H
	DD	0d007a20bH
	DD	0c005H
xdata	ENDS
;	COMDAT ??_C@_0DD@ODKCNJON@?$CF?4500s?$CI?$CJ?5takes?5a?5?$CFzd?9sequence?5?$CI?$CF@
CONST	SEGMENT
??_C@_0DD@ODKCNJON@?$CF?4500s?$CI?$CJ?5takes?5a?5?$CFzd?9sequence?5?$CI?$CF@ DB '%'
	DB	'.500s() takes a %zd-sequence (%zd-sequence given)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@JOADAEEN@?$CF?4500s?$CI?$CJ?5takes?5an?5at?5most?5?$CFzd?9se@
CONST	SEGMENT
??_C@_0DM@JOADAEEN@?$CF?4500s?$CI?$CJ?5takes?5an?5at?5most?5?$CFzd?9se@ DB '%'
	DB	'.500s() takes an at most %zd-sequence (%zd-sequence given)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@OAOHDEAK@?$CF?4500s?$CI?$CJ?5takes?5an?5at?5least?5?$CFzd?9s@
CONST	SEGMENT
??_C@_0DN@OAOHDEAK@?$CF?4500s?$CI?$CJ?5takes?5an?5at?5least?5?$CFzd?9s@ DB '%'
	DB	'.500s() takes an at least %zd-sequence (%zd-sequence given)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@HNEHEKCC@?$CF?4500s?$CI?$CJ?5takes?5a?5dict?5as?5second?5@
CONST	SEGMENT
??_C@_0CM@HNEHEKCC@?$CF?4500s?$CI?$CJ?5takes?5a?5dict?5as?5second?5@ DB '%'
	DB	'.500s() takes a dict as second arg, if any', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@CFGGFGAN@constructor?5requires?5a?5sequence?$AA@
CONST	SEGMENT
??_C@_0CA@CFGGFGAN@constructor?5requires?5a?5sequence?$AA@ DB 'constructo'
	DB	'r requires a sequence', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PCIBILIP@O?$HMO?3structseq?$AA@
CONST	SEGMENT
??_C@_0O@PCIBILIP@O?$HMO?3structseq?$AA@ DB 'O|O:structseq', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\structseq.c
CONST	ENDS
;	COMDAT structseq_new
_TEXT	SEGMENT
dict$ = 48
type$ = 112
args$ = 120
kwds$ = 128
arg$ = 136
structseq_new PROC					; COMDAT

; 72   : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	41 54		 push	 r12
  00005	41 55		 push	 r13
  00007	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  0000b	4c 8b e1	 mov	 r12, rcx

; 73   :     PyObject *arg = NULL;
; 74   :     PyObject *dict = NULL;
; 75   :     PyObject *ob;
; 76   :     PyStructSequence *res = NULL;
; 77   :     Py_ssize_t len, min_len, max_len, i, n_unnamed_fields;
; 78   :     static char *kwlist[] = {"sequence", "dict", 0};
; 79   : 
; 80   :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|O:structseq",
; 81   :                                      kwlist, &arg, &dict))

  0000e	49 8d 4b c8	 lea	 rcx, QWORD PTR [r11-56]
  00012	49 8b c0	 mov	 rax, r8
  00015	49 89 4b c0	 mov	 QWORD PTR [r11-64], rcx
  00019	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  0001d	4c 8b d2	 mov	 r10, rdx
  00020	45 33 ed	 xor	 r13d, r13d
  00023	49 89 4b b8	 mov	 QWORD PTR [r11-72], rcx
  00027	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??structseq_new@@9@9
  0002e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@PCIBILIP@O?$HMO?3structseq?$AA@
  00035	49 8b ca	 mov	 rcx, r10
  00038	48 8b d0	 mov	 rdx, rax
  0003b	4d 89 6b 20	 mov	 QWORD PTR [r11+32], r13
  0003f	4d 89 6b c8	 mov	 QWORD PTR [r11-56], r13
  00043	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00048	85 c0		 test	 eax, eax
  0004a	75 0b		 jne	 SHORT $LN17@structseq_@2

; 82   :         return NULL;

  0004c	33 c0		 xor	 eax, eax

; 153  : }

  0004e	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00052	41 5d		 pop	 r13
  00054	41 5c		 pop	 r12
  00056	c3		 ret	 0
$LN17@structseq_@2:

; 83   : 
; 84   :     arg = PySequence_Fast(arg, "constructor requires a sequence");

  00057	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR arg$[rsp]
  0005f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@CFGGFGAN@constructor?5requires?5a?5sequence?$AA@
  00066	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  0006b	e8 00 00 00 00	 call	 PySequence_Fast
  00070	48 8b f8	 mov	 rdi, rax
  00073	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR arg$[rsp], rax

; 85   : 
; 86   :     if (!arg) {

  0007b	48 85 c0	 test	 rax, rax

; 87   :         return NULL;

  0007e	74 3f		 je	 SHORT $LN38@structseq_@2

; 88   :     }
; 89   : 
; 90   :     if (dict && !PyDict_Check(dict)) {

  00080	48 8b 44 24 30	 mov	 rax, QWORD PTR dict$[rsp]
  00085	48 85 c0	 test	 rax, rax
  00088	74 45		 je	 SHORT $LN15@structseq_@2
  0008a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0008e	f7 80 00 01 00
	00 00 00 00 20	 test	 DWORD PTR [rax+256], 536870912 ; 20000000H
  00098	75 35		 jne	 SHORT $LN15@structseq_@2

; 91   :         PyErr_Format(PyExc_TypeError,
; 92   :                      "%.500s() takes a dict as second arg, if any",
; 93   :                      type->tp_name);

  0009a	4d 8b 44 24 70	 mov	 r8, QWORD PTR [r12+112]
  0009f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@HNEHEKCC@?$CF?4500s?$CI?$CJ?5takes?5a?5dict?5as?5second?5@
  000ad	e8 00 00 00 00	 call	 PyErr_Format

; 94   :         Py_DECREF(arg);

  000b2	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR arg$[rsp]
  000ba	e8 00 00 00 00	 call	 _Py_DecRef
$LN38@structseq_@2:

; 95   :         return NULL;

  000bf	33 c0		 xor	 eax, eax
  000c1	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 153  : }

  000c6	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000ca	41 5d		 pop	 r13
  000cc	41 5c		 pop	 r12
  000ce	c3		 ret	 0
$LN15@structseq_@2:

; 96   :     }
; 97   : 
; 98   :     len = PySequence_Fast_GET_SIZE(arg);

  000cf	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]

; 99   :     min_len = VISIBLE_SIZE_TP(type);

  000d3	49 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR [r12+352]
  000db	48 8b 7f 60	 mov	 rdi, QWORD PTR [rdi+96]
  000df	48 89 5c 24 70	 mov	 QWORD PTR [rsp+112], rbx
  000e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:visible_length_key
  000eb	48 89 6c 24 78	 mov	 QWORD PTR [rsp+120], rbp
  000f0	4c 89 7c 24 40	 mov	 QWORD PTR [rsp+64], r15
  000f5	e8 00 00 00 00	 call	 PyDict_GetItemString
  000fa	48 8b c8	 mov	 rcx, rax
  000fd	e8 00 00 00 00	 call	 PyLong_AsLong

; 100  :     max_len = REAL_SIZE_TP(type);

  00102	49 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR [r12+352]
  0010a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:real_length_key
  00111	48 63 d8	 movsxd	 rbx, eax
  00114	e8 00 00 00 00	 call	 PyDict_GetItemString
  00119	48 8b c8	 mov	 rcx, rax
  0011c	e8 00 00 00 00	 call	 PyLong_AsLong

; 101  :     n_unnamed_fields = UNNAMED_FIELDS_TP(type);

  00121	49 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR [r12+352]
  00129	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:unnamed_fields_key
  00130	48 63 e8	 movsxd	 rbp, eax
  00133	e8 00 00 00 00	 call	 PyDict_GetItemString
  00138	48 8b c8	 mov	 rcx, rax
  0013b	e8 00 00 00 00	 call	 PyLong_AsLong
  00140	4c 63 f8	 movsxd	 r15, eax

; 102  : 
; 103  :     if (min_len != max_len) {

  00143	48 3b dd	 cmp	 rbx, rbp
  00146	74 1f		 je	 SHORT $LN14@structseq_@2

; 104  :         if (len < min_len) {

  00148	48 3b fb	 cmp	 rdi, rbx
  0014b	7d 09		 jge	 SHORT $LN13@structseq_@2

; 105  :             PyErr_Format(PyExc_TypeError,
; 106  :                 "%.500s() takes an at least %zd-sequence (%zd-sequence given)",
; 107  :                 type->tp_name, min_len, len);

  0014d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DN@OAOHDEAK@?$CF?4500s?$CI?$CJ?5takes?5an?5at?5least?5?$CFzd?9s@

; 108  :             Py_DECREF(arg);
; 109  :             return NULL;

  00154	eb 1d		 jmp	 SHORT $LN39@structseq_@2
$LN13@structseq_@2:

; 110  :         }
; 111  : 
; 112  :         if (len > max_len) {

  00156	48 3b fd	 cmp	 rdi, rbp
  00159	7e 45		 jle	 SHORT $LN10@structseq_@2

; 113  :             PyErr_Format(PyExc_TypeError,
; 114  :                 "%.500s() takes an at most %zd-sequence (%zd-sequence given)",
; 115  :                 type->tp_name, max_len, len);

  0015b	4c 8b cd	 mov	 r9, rbp
  0015e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DM@JOADAEEN@?$CF?4500s?$CI?$CJ?5takes?5an?5at?5most?5?$CFzd?9se@

; 116  :             Py_DECREF(arg);
; 117  :             return NULL;

  00165	eb 0f		 jmp	 SHORT $LN40@structseq_@2
$LN14@structseq_@2:

; 118  :         }
; 119  :     }
; 120  :     else {
; 121  :         if (len != min_len) {

  00167	48 3b fb	 cmp	 rdi, rbx
  0016a	74 34		 je	 SHORT $LN10@structseq_@2

; 122  :             PyErr_Format(PyExc_TypeError,
; 123  :                          "%.500s() takes a %zd-sequence (%zd-sequence given)",
; 124  :                          type->tp_name, min_len, len);

  0016c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@ODKCNJON@?$CF?4500s?$CI?$CJ?5takes?5a?5?$CFzd?9sequence?5?$CI?$CF@
$LN39@structseq_@2:
  00173	4c 8b cb	 mov	 r9, rbx
$LN40@structseq_@2:
  00176	4d 8b 44 24 70	 mov	 r8, QWORD PTR [r12+112]
  0017b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00182	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00187	e8 00 00 00 00	 call	 PyErr_Format

; 125  :             Py_DECREF(arg);

  0018c	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR arg$[rsp]
  00194	e8 00 00 00 00	 call	 _Py_DecRef

; 126  :             return NULL;

  00199	33 c0		 xor	 eax, eax
  0019b	e9 30 01 00 00	 jmp	 $LN35@structseq_@2
$LN10@structseq_@2:

; 127  :         }
; 128  :     }
; 129  : 
; 130  :     res = (PyStructSequence*) PyStructSequence_New(type);

  001a0	49 8b cc	 mov	 rcx, r12
  001a3	4c 89 74 24 48	 mov	 QWORD PTR [rsp+72], r14
  001a8	e8 00 00 00 00	 call	 PyStructSequence_New
  001ad	4c 8b f0	 mov	 r14, rax

; 131  :     if (res == NULL) {

  001b0	48 85 c0	 test	 rax, rax
  001b3	75 14		 jne	 SHORT $LN9@structseq_@2

; 132  :         Py_DECREF(arg);

  001b5	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR arg$[rsp]
  001bd	e8 00 00 00 00	 call	 _Py_DecRef

; 133  :         return NULL;

  001c2	33 c0		 xor	 eax, eax
  001c4	e9 02 01 00 00	 jmp	 $LN36@structseq_@2
$LN9@structseq_@2:
  001c9	48 89 b4 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rsi

; 134  :     }
; 135  :     for (i = 0; i < len; ++i) {

  001d1	48 85 ff	 test	 rdi, rdi
  001d4	7e 46		 jle	 SHORT $LN6@structseq_@2
  001d6	bb 70 00 00 00	 mov	 ebx, 112		; 00000070H
  001db	4c 8b ef	 mov	 r13, rdi
  001de	66 90		 npad	 2
$LL8@structseq_@2:

; 136  :         PyObject *v = PySequence_Fast_GET_ITEM(arg, i);

  001e0	48 8b b4 24 88
	00 00 00	 mov	 rsi, QWORD PTR arg$[rsp]
  001e8	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  001ec	f7 80 00 01 00
	00 00 00 00 02	 test	 DWORD PTR [rax+256], 33554432 ; 02000000H
  001f6	74 0b		 je	 SHORT $LN22@structseq_@2
  001f8	48 8b 46 70	 mov	 rax, QWORD PTR [rsi+112]
  001fc	48 8b 74 18 90	 mov	 rsi, QWORD PTR [rax+rbx-112]
  00201	eb 04		 jmp	 SHORT $LN23@structseq_@2
$LN22@structseq_@2:
  00203	48 8b 34 33	 mov	 rsi, QWORD PTR [rbx+rsi]
$LN23@structseq_@2:

; 137  :         Py_INCREF(v);

  00207	48 8b ce	 mov	 rcx, rsi
  0020a	e8 00 00 00 00	 call	 _Py_IncRef

; 138  :         res->ob_item[i] = v;

  0020f	4a 89 34 33	 mov	 QWORD PTR [rbx+r14], rsi
  00213	48 83 c3 08	 add	 rbx, 8
  00217	48 ff cf	 dec	 rdi
  0021a	75 c4		 jne	 SHORT $LL8@structseq_@2
$LN6@structseq_@2:

; 139  :     }
; 140  :     for (; i < max_len; ++i) {

  0021c	4c 3b ed	 cmp	 r13, rbp
  0021f	0f 8d 8e 00 00
	00		 jge	 $LN3@structseq_@2
  00225	49 8b c5	 mov	 rax, r13
  00228	4b 8d 74 ee 70	 lea	 rsi, QWORD PTR [r14+r13*8+112]
  0022d	49 2b c7	 sub	 rax, r15
  00230	48 8d 3c 80	 lea	 rdi, QWORD PTR [rax+rax*4]
  00234	48 c1 e7 03	 shl	 rdi, 3
  00238	49 2b ed	 sub	 rbp, r13
  0023b	4c 8d 2d 00 00
	00 00		 lea	 r13, OFFSET FLAT:_Py_NoneStruct
$LL5@structseq_@2:

; 141  :         if (dict && (ob = PyDict_GetItemString(
; 142  :             dict, type->tp_members[i-n_unnamed_fields].name))) {

  00242	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dict$[rsp]
  00247	48 85 c9	 test	 rcx, rcx
  0024a	74 19		 je	 SHORT $LN2@structseq_@2
  0024c	49 8b 94 24 48
	01 00 00	 mov	 rdx, QWORD PTR [r12+328]
  00254	48 8b 14 3a	 mov	 rdx, QWORD PTR [rdx+rdi]
  00258	e8 00 00 00 00	 call	 PyDict_GetItemString
  0025d	48 8b d8	 mov	 rbx, rax
  00260	48 85 c0	 test	 rax, rax
  00263	75 03		 jne	 SHORT $LN1@structseq_@2
$LN2@structseq_@2:

; 143  :         }
; 144  :         else {
; 145  :             ob = Py_None;

  00265	49 8b dd	 mov	 rbx, r13
$LN1@structseq_@2:

; 146  :         }
; 147  :         Py_INCREF(ob);

  00268	e8 00 00 00 00	 call	 _Py_PXCTX
  0026d	85 c0		 test	 eax, eax
  0026f	75 32		 jne	 SHORT $LN25@structseq_@2
  00271	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00278	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0027f	4c 8b cb	 mov	 r9, rbx
  00282	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00288	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00290	e8 00 00 00 00	 call	 _PyParallel_Guard
  00295	85 c0		 test	 eax, eax
  00297	75 06		 jne	 SHORT $LN24@structseq_@2
  00299	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0029d	74 04		 je	 SHORT $LN25@structseq_@2
$LN24@structseq_@2:
  0029f	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN25@structseq_@2:

; 148  :         res->ob_item[i] = ob;

  002a3	48 89 1e	 mov	 QWORD PTR [rsi], rbx
  002a6	48 83 c6 08	 add	 rsi, 8
  002aa	48 83 c7 28	 add	 rdi, 40			; 00000028H
  002ae	48 ff cd	 dec	 rbp
  002b1	75 8f		 jne	 SHORT $LL5@structseq_@2
$LN3@structseq_@2:

; 149  :     }
; 150  : 
; 151  :     Py_DECREF(arg);

  002b3	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR arg$[rsp]
  002bb	e8 00 00 00 00	 call	 _Py_DecRef
  002c0	48 8b b4 24 80
	00 00 00	 mov	 rsi, QWORD PTR [rsp+128]

; 152  :     return (PyObject*) res;

  002c8	49 8b c6	 mov	 rax, r14
$LN36@structseq_@2:
  002cb	4c 8b 74 24 48	 mov	 r14, QWORD PTR [rsp+72]
$LN35@structseq_@2:
  002d0	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  002d5	48 8b 6c 24 78	 mov	 rbp, QWORD PTR [rsp+120]
  002da	4c 8b 7c 24 40	 mov	 r15, QWORD PTR [rsp+64]
  002df	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 153  : }

  002e4	48 83 c4 58	 add	 rsp, 88			; 00000058H
  002e8	41 5d		 pop	 r13
  002ea	41 5c		 pop	 r12
  002ec	c3		 ret	 0
structseq_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DM@IDAGGGPA@In?5structseq_repr?$CI?$CJ?0?5member?5?$CFd?5n@ ; `string'
EXTRN	PyExc_SystemError:QWORD
EXTRN	PyUnicode_FromString:PROC
EXTRN	PyUnicode_AsUTF8:PROC
EXTRN	PyObject_Repr:PROC
EXTRN	__imp_strncpy:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$structseq_repr DD imagerel structseq_repr
	DD	imagerel structseq_repr+525
	DD	imagerel $unwind$structseq_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$structseq_repr DD 0d6a01H
	DD	04de46aH
	DD	04cc462H
	DD	04b5452H
	DD	0440113H
	DD	0d00af00cH
	DD	060077008H
	DD	03006H
xdata	ENDS
;	COMDAT ??_C@_0DM@IDAGGGPA@In?5structseq_repr?$CI?$CJ?0?5member?5?$CFd?5n@
CONST	SEGMENT
??_C@_0DM@IDAGGGPA@In?5structseq_repr?$CI?$CJ?0?5member?5?$CFd?5n@ DB 'In'
	DB	' structseq_repr(), member %d name is NULL for type %.500s', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT structseq_repr
_TEXT	SEGMENT
buf$ = 32
obj$ = 592
structseq_repr PROC					; COMDAT

; 158  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	53		 push	 rbx
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	41 55		 push	 r13
  0000a	41 57		 push	 r15
  0000c	48 81 ec 20 02
	00 00		 sub	 rsp, 544		; 00000220H

; 159  :     /* buffer and type size were chosen well considered. */
; 160  : #define REPR_BUFFER_SIZE 512
; 161  : #define TYPE_MAXSIZE 100
; 162  : 
; 163  :     PyTypeObject *typ = Py_TYPE(obj);

  00013	4c 8b 79 58	 mov	 r15, QWORD PTR [rcx+88]
  00017	48 8b f1	 mov	 rsi, rcx

; 164  :     int i, removelast = 0;
; 165  :     Py_ssize_t len;
; 166  :     char buf[REPR_BUFFER_SIZE];
; 167  :     char *endofbuf, *pbuf = buf;
; 168  : 
; 169  :     /* pointer to end of writeable buffer; safes space for "...)\0" */
; 170  :     endofbuf= &buf[REPR_BUFFER_SIZE-5];
; 171  : 
; 172  :     /* "typename(", limited to  TYPE_MAXSIZE */
; 173  :     len = strlen(typ->tp_name) > TYPE_MAXSIZE ? TYPE_MAXSIZE :
; 174  :                             strlen(typ->tp_name);

  0001a	48 83 c9 ff	 or	 rcx, -1
  0001e	49 8b 57 70	 mov	 rdx, QWORD PTR [r15+112]
  00022	33 c0		 xor	 eax, eax
  00024	48 8b fa	 mov	 rdi, rdx
  00027	f2 ae		 repne scasb
  00029	48 f7 d1	 not	 rcx
  0002c	48 ff c9	 dec	 rcx
  0002f	48 83 f9 64	 cmp	 rcx, 100		; 00000064H
  00033	76 05		 jbe	 SHORT $LN12@structseq_@3
  00035	8d 78 64	 lea	 edi, QWORD PTR [rax+100]
  00038	eb 10		 jmp	 SHORT $LN13@structseq_@3
$LN12@structseq_@3:
  0003a	48 83 c9 ff	 or	 rcx, -1
  0003e	48 8b fa	 mov	 rdi, rdx
  00041	f2 ae		 repne scasb
  00043	48 f7 d1	 not	 rcx
  00046	48 8d 79 ff	 lea	 rdi, QWORD PTR [rcx-1]
$LN13@structseq_@3:

; 175  :     strncpy(pbuf, typ->tp_name, len);

  0004a	48 89 ac 24 58
	02 00 00	 mov	 QWORD PTR [rsp+600], rbp
  00052	48 8d 4c 24 20	 lea	 rcx, QWORD PTR buf$[rsp]
  00057	4c 8b c7	 mov	 r8, rdi
  0005a	4c 89 a4 24 60
	02 00 00	 mov	 QWORD PTR [rsp+608], r12
  00062	4c 89 b4 24 68
	02 00 00	 mov	 QWORD PTR [rsp+616], r14
  0006a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strncpy

; 176  :     pbuf += len;

  00070	48 8d 5c 3c 20	 lea	 rbx, QWORD PTR buf$[rsp+rdi]

; 177  :     *pbuf++ = '(';
; 178  : 
; 179  :     for (i=0; i < VISIBLE_SIZE(obj); i++) {

  00075	45 33 ed	 xor	 r13d, r13d
  00078	c6 03 28	 mov	 BYTE PTR [rbx], 40	; 00000028H
  0007b	48 ff c3	 inc	 rbx
  0007e	4c 39 6e 60	 cmp	 QWORD PTR [rsi+96], r13
  00082	0f 8e 11 01 00
	00		 jle	 $LN1@structseq_@3

; 175  :     strncpy(pbuf, typ->tp_name, len);

  00088	45 8b e5	 mov	 r12d, r13d
  0008b	4c 8d 76 70	 lea	 r14, QWORD PTR [rsi+112]
  0008f	90		 npad	 1
$LL9@structseq_@3:

; 180  :         PyObject *val, *repr;
; 181  :         char *cname, *crepr;
; 182  : 
; 183  :         cname = typ->tp_members[i].name;

  00090	49 8b 87 48 01
	00 00		 mov	 rax, QWORD PTR [r15+328]
  00097	49 8b 34 04	 mov	 rsi, QWORD PTR [r12+rax]

; 184  :         if (cname == NULL) {

  0009b	48 85 f6	 test	 rsi, rsi
  0009e	0f 84 4b 01 00
	00		 je	 $LN19@structseq_@3

; 188  :         }
; 189  :         val = PyStructSequence_GET_ITEM(obj, i);
; 190  :         repr = PyObject_Repr(val);

  000a4	49 8b 0e	 mov	 rcx, QWORD PTR [r14]
  000a7	e8 00 00 00 00	 call	 PyObject_Repr
  000ac	48 8b e8	 mov	 rbp, rax

; 191  :         if (repr == NULL)

  000af	48 85 c0	 test	 rax, rax
  000b2	0f 84 51 01 00
	00		 je	 $LN20@structseq_@3

; 192  :             return NULL;
; 193  :         crepr = _PyUnicode_AsString(repr);

  000b8	48 8b c8	 mov	 rcx, rax
  000bb	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  000c0	4c 8b d8	 mov	 r11, rax

; 194  :         if (crepr == NULL) {

  000c3	48 85 c0	 test	 rax, rax
  000c6	0f 84 17 01 00
	00		 je	 $LN21@structseq_@3

; 197  :         }
; 198  : 
; 199  :         /* + 3: keep space for "=" and ", " */
; 200  :         len = strlen(cname) + strlen(crepr) + 3;

  000cc	48 83 c9 ff	 or	 rcx, -1
  000d0	33 c0		 xor	 eax, eax
  000d2	49 8b fb	 mov	 rdi, r11
  000d5	f2 ae		 repne scasb
  000d7	48 8b fe	 mov	 rdi, rsi
  000da	48 f7 d1	 not	 rcx
  000dd	48 8d 51 ff	 lea	 rdx, QWORD PTR [rcx-1]
  000e1	48 83 c9 ff	 or	 rcx, -1
  000e5	f2 ae		 repne scasb

; 201  :         if ((pbuf+len) <= endofbuf) {

  000e7	48 8d 04 13	 lea	 rax, QWORD PTR [rbx+rdx]
  000eb	48 f7 d1	 not	 rcx
  000ee	48 8d 54 01 02	 lea	 rdx, QWORD PTR [rcx+rax+2]
  000f3	48 8d 84 24 1b
	02 00 00	 lea	 rax, QWORD PTR buf$[rsp+507]
  000fb	48 3b d0	 cmp	 rdx, rax
  000fe	0f 87 cb 00 00
	00		 ja	 $LN3@structseq_@3

; 202  :             strcpy(pbuf, cname);

  00104	48 8b d3	 mov	 rdx, rbx
  00107	48 8b ce	 mov	 rcx, rsi
  0010a	48 2b d6	 sub	 rdx, rsi
  0010d	0f 1f 00	 npad	 3
$LL14@structseq_@3:
  00110	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  00113	48 ff c1	 inc	 rcx
  00116	88 44 0a ff	 mov	 BYTE PTR [rdx+rcx-1], al
  0011a	84 c0		 test	 al, al
  0011c	75 f2		 jne	 SHORT $LL14@structseq_@3

; 203  :             pbuf += strlen(cname);

  0011e	48 83 c9 ff	 or	 rcx, -1
  00122	33 c0		 xor	 eax, eax
  00124	48 8b fe	 mov	 rdi, rsi
  00127	f2 ae		 repne scasb
  00129	48 f7 d1	 not	 rcx
  0012c	48 ff c9	 dec	 rcx
  0012f	48 03 d9	 add	 rbx, rcx

; 204  :             *pbuf++ = '=';
; 205  :             strcpy(pbuf, crepr);

  00132	49 8b cb	 mov	 rcx, r11
  00135	48 ff c3	 inc	 rbx
  00138	c6 43 ff 3d	 mov	 BYTE PTR [rbx-1], 61	; 0000003dH
  0013c	48 8b d3	 mov	 rdx, rbx
  0013f	49 2b d3	 sub	 rdx, r11
$LL15@structseq_@3:
  00142	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  00145	48 ff c1	 inc	 rcx
  00148	88 44 0a ff	 mov	 BYTE PTR [rdx+rcx-1], al
  0014c	84 c0		 test	 al, al
  0014e	75 f2		 jne	 SHORT $LL15@structseq_@3

; 206  :             pbuf += strlen(crepr);

  00150	48 83 c9 ff	 or	 rcx, -1
  00154	33 c0		 xor	 eax, eax
  00156	49 8b fb	 mov	 rdi, r11
  00159	f2 ae		 repne scasb
  0015b	48 f7 d1	 not	 rcx
  0015e	48 ff c9	 dec	 rcx
  00161	48 03 d9	 add	 rbx, rcx

; 207  :             *pbuf++ = ',';
; 208  :             *pbuf++ = ' ';
; 209  :             removelast = 1;
; 210  :             Py_DECREF(repr);

  00164	48 8b cd	 mov	 rcx, rbp
  00167	66 c7 03 2c 20	 mov	 WORD PTR [rbx], 8236	; 0000202cH
  0016c	48 83 c3 02	 add	 rbx, 2
  00170	e8 00 00 00 00	 call	 _Py_DecRef
  00175	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0017d	41 ff c5	 inc	 r13d
  00180	49 83 c6 08	 add	 r14, 8
  00184	49 63 c5	 movsxd	 rax, r13d
  00187	49 83 c4 28	 add	 r12, 40			; 00000028H
  0018b	48 3b 41 60	 cmp	 rax, QWORD PTR [rcx+96]
  0018f	0f 8c fb fe ff
	ff		 jl	 $LL9@structseq_@3

; 221  :         /* overwrite last ", " */
; 222  :         pbuf-=2;

  00195	48 83 eb 02	 sub	 rbx, 2
$LN1@structseq_@3:

; 223  :     }
; 224  :     *pbuf++ = ')';
; 225  :     *pbuf = '\0';
; 226  : 
; 227  :     return PyUnicode_FromString(buf);

  00199	48 8d 4c 24 20	 lea	 rcx, QWORD PTR buf$[rsp]
  0019e	66 c7 03 29 00	 mov	 WORD PTR [rbx], 41	; 00000029H
  001a3	e8 00 00 00 00	 call	 PyUnicode_FromString
$LN10@structseq_@3:
  001a8	4c 8b b4 24 68
	02 00 00	 mov	 r14, QWORD PTR [rsp+616]
  001b0	4c 8b a4 24 60
	02 00 00	 mov	 r12, QWORD PTR [rsp+608]
  001b8	48 8b ac 24 58
	02 00 00	 mov	 rbp, QWORD PTR [rsp+600]

; 228  : }

  001c0	48 81 c4 20 02
	00 00		 add	 rsp, 544		; 00000220H
  001c7	41 5f		 pop	 r15
  001c9	41 5d		 pop	 r13
  001cb	5f		 pop	 rdi
  001cc	5e		 pop	 rsi
  001cd	5b		 pop	 rbx
  001ce	c3		 ret	 0
$LN3@structseq_@3:

; 211  :         }
; 212  :         else {
; 213  :             strcpy(pbuf, "...");

  001cf	c7 03 2e 2e 2e
	00		 mov	 DWORD PTR [rbx], 3026478 ; 002e2e2eH

; 214  :             pbuf += 3;
; 215  :             removelast = 0;
; 216  :             Py_DECREF(repr);

  001d5	48 8b cd	 mov	 rcx, rbp
  001d8	48 83 c3 03	 add	 rbx, 3
  001dc	e8 00 00 00 00	 call	 _Py_DecRef

; 217  :             break;
; 218  :         }
; 219  :     }
; 220  :     if (removelast) {

  001e1	eb b6		 jmp	 SHORT $LN1@structseq_@3
$LN21@structseq_@3:

; 195  :             Py_DECREF(repr);

  001e3	48 8b cd	 mov	 rcx, rbp
  001e6	e8 00 00 00 00	 call	 _Py_DecRef

; 196  :             return NULL;

  001eb	33 c0		 xor	 eax, eax
  001ed	eb b9		 jmp	 SHORT $LN10@structseq_@3
$LN19@structseq_@3:

; 185  :             PyErr_Format(PyExc_SystemError, "In structseq_repr(), member %d name is NULL"
; 186  :                          " for type %.500s", i, typ->tp_name);

  001ef	4d 8b 4f 70	 mov	 r9, QWORD PTR [r15+112]
  001f3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  001fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DM@IDAGGGPA@In?5structseq_repr?$CI?$CJ?0?5member?5?$CFd?5n@
  00201	45 8b c5	 mov	 r8d, r13d
  00204	e8 00 00 00 00	 call	 PyErr_Format
$LN20@structseq_@3:

; 187  :             return NULL;

  00209	33 c0		 xor	 eax, eax
  0020b	eb 9b		 jmp	 SHORT $LN10@structseq_@3
structseq_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_07IDPMLOMJ@?$CIO?$CIOO?$CJ?$CJ?$AA@	; `string'
EXTRN	Py_BuildValue:PROC
EXTRN	PyDict_SetItemString:PROC
EXTRN	PyDict_New:PROC
EXTRN	PyTuple_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$structseq_reduce DD imagerel structseq_reduce
	DD	imagerel structseq_reduce+129
	DD	imagerel $unwind$structseq_reduce
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$structseq_reduce DD imagerel structseq_reduce+129
	DD	imagerel structseq_reduce+176
	DD	imagerel $chain$0$structseq_reduce
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$structseq_reduce DD imagerel structseq_reduce+176
	DD	imagerel structseq_reduce+186
	DD	imagerel $chain$3$structseq_reduce
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$structseq_reduce DD imagerel structseq_reduce+186
	DD	imagerel structseq_reduce+420
	DD	imagerel $chain$4$structseq_reduce
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$structseq_reduce DD imagerel structseq_reduce+420
	DD	imagerel structseq_reduce+648
	DD	imagerel $chain$5$structseq_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$structseq_reduce DD 021H
	DD	imagerel structseq_reduce+176
	DD	imagerel structseq_reduce+186
	DD	imagerel $chain$3$structseq_reduce
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$structseq_reduce DD 020521H
	DD	075405H
	DD	imagerel structseq_reduce+176
	DD	imagerel structseq_reduce+186
	DD	imagerel $chain$3$structseq_reduce
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$structseq_reduce DD 040821H
	DD	0103408H
	DD	067400H
	DD	imagerel structseq_reduce
	DD	imagerel structseq_reduce+129
	DD	imagerel $unwind$structseq_reduce
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$structseq_reduce DD 020521H
	DD	067405H
	DD	imagerel structseq_reduce
	DD	imagerel structseq_reduce+129
	DD	imagerel $unwind$structseq_reduce
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$structseq_reduce DD 060e01H
	DD	0f00a720eH
	DD	0d006e008H
	DD	06002c004H
xdata	ENDS
;	COMDAT ??_C@_07IDPMLOMJ@?$CIO?$CIOO?$CJ?$CJ?$AA@
CONST	SEGMENT
??_C@_07IDPMLOMJ@?$CIO?$CIOO?$CJ?$CJ?$AA@ DB '(O(OO))', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\structseq.c
CONST	ENDS
;	COMDAT structseq_reduce
_TEXT	SEGMENT
n_fields$1$ = 112
self$ = 112
n_unnamed_fields$1$ = 120
structseq_reduce PROC					; COMDAT

; 232  : {

  00000	40 56		 push	 rsi
  00002	41 54		 push	 r12
  00004	41 55		 push	 r13
  00006	41 56		 push	 r14
  00008	41 57		 push	 r15
  0000a	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000e	4c 8b e9	 mov	 r13, rcx

; 233  :     PyObject* tup;
; 234  :     PyObject* dict;
; 235  :     PyObject* result;
; 236  :     Py_ssize_t n_fields, n_visible_fields, n_unnamed_fields;
; 237  :     int i;
; 238  : 
; 239  :     n_fields = REAL_SIZE(self);

  00011	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:real_length_key
  0001c	48 8b 89 60 01
	00 00		 mov	 rcx, QWORD PTR [rcx+352]
  00023	e8 00 00 00 00	 call	 PyDict_GetItemString
  00028	48 8b c8	 mov	 rcx, rax
  0002b	e8 00 00 00 00	 call	 PyLong_AsLong

; 240  :     n_visible_fields = VISIBLE_SIZE(self);
; 241  :     n_unnamed_fields = UNNAMED_FIELDS(self);

  00030	49 8b 4d 58	 mov	 rcx, QWORD PTR [r13+88]
  00034	4d 8b 7d 60	 mov	 r15, QWORD PTR [r13+96]
  00038	48 8b 89 60 01
	00 00		 mov	 rcx, QWORD PTR [rcx+352]
  0003f	4c 63 f0	 movsxd	 r14, eax
  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:unnamed_fields_key
  00049	4c 89 74 24 70	 mov	 QWORD PTR n_fields$1$[rsp], r14
  0004e	e8 00 00 00 00	 call	 PyDict_GetItemString
  00053	48 8b c8	 mov	 rcx, rax
  00056	e8 00 00 00 00	 call	 PyLong_AsLong

; 242  :     tup = PyTuple_New(n_visible_fields);

  0005b	49 8b cf	 mov	 rcx, r15
  0005e	48 63 f0	 movsxd	 rsi, eax
  00061	48 89 74 24 78	 mov	 QWORD PTR n_unnamed_fields$1$[rsp], rsi
  00066	e8 00 00 00 00	 call	 PyTuple_New
  0006b	4c 8b e0	 mov	 r12, rax

; 243  :     if (!tup) {

  0006e	48 85 c0	 test	 rax, rax
  00071	75 0e		 jne	 SHORT $LN8@structseq_@4

; 270  : }

  00073	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00077	41 5f		 pop	 r15
  00079	41 5e		 pop	 r14
  0007b	41 5d		 pop	 r13
  0007d	41 5c		 pop	 r12
  0007f	5e		 pop	 rsi
  00080	c3		 ret	 0
$LN8@structseq_@4:
  00081	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi

; 244  :         return NULL;
; 245  :     }
; 246  : 
; 247  :     dict = PyDict_New();

  00086	e8 00 00 00 00	 call	 PyDict_New
  0008b	48 8b f8	 mov	 rdi, rax

; 248  :     if (!dict) {

  0008e	48 85 c0	 test	 rax, rax
  00091	75 1d		 jne	 SHORT $LN7@structseq_@4

; 249  :         Py_DECREF(tup);

  00093	49 8b cc	 mov	 rcx, r12
  00096	e8 00 00 00 00	 call	 _Py_DecRef
  0009b	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 250  :         return NULL;

  000a0	33 c0		 xor	 eax, eax

; 270  : }

  000a2	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000a6	41 5f		 pop	 r15
  000a8	41 5e		 pop	 r14
  000aa	41 5d		 pop	 r13
  000ac	41 5c		 pop	 r12
  000ae	5e		 pop	 rsi
  000af	c3		 ret	 0
$LN7@structseq_@4:
  000b0	48 89 9c 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rbx

; 251  :     }
; 252  : 
; 253  :     for (i = 0; i < n_visible_fields; i++) {

  000b8	33 db		 xor	 ebx, ebx
  000ba	48 89 6c 24 38	 mov	 QWORD PTR [rsp+56], rbp
  000bf	4d 85 ff	 test	 r15, r15
  000c2	7e 6a		 jle	 SHORT $LN4@structseq_@4
  000c4	4d 8b f4	 mov	 r14, r12
  000c7	49 8d 75 70	 lea	 rsi, QWORD PTR [r13+112]
  000cb	4d 2b f5	 sub	 r14, r13
  000ce	66 90		 npad	 2
$LL6@structseq_@4:

; 254  :         Py_INCREF(self->ob_item[i]);

  000d0	48 8b 2e	 mov	 rbp, QWORD PTR [rsi]
  000d3	e8 00 00 00 00	 call	 _Py_PXCTX
  000d8	85 c0		 test	 eax, eax
  000da	75 32		 jne	 SHORT $LN12@structseq_@4
  000dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000ea	4c 8b cd	 mov	 r9, rbp
  000ed	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000f3	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000fb	e8 00 00 00 00	 call	 _PyParallel_Guard
  00100	85 c0		 test	 eax, eax
  00102	75 06		 jne	 SHORT $LN11@structseq_@4
  00104	f6 45 20 20	 test	 BYTE PTR [rbp+32], 32	; 00000020H
  00108	74 04		 je	 SHORT $LN12@structseq_@4
$LN11@structseq_@4:
  0010a	48 ff 45 50	 inc	 QWORD PTR [rbp+80]
$LN12@structseq_@4:

; 255  :         PyTuple_SET_ITEM(tup, i, self->ob_item[i]);

  0010e	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  00111	ff c3		 inc	 ebx
  00113	48 83 c6 08	 add	 rsi, 8
  00117	49 89 44 36 f8	 mov	 QWORD PTR [r14+rsi-8], rax
  0011c	48 63 c3	 movsxd	 rax, ebx
  0011f	49 3b c7	 cmp	 rax, r15
  00122	7c ac		 jl	 SHORT $LL6@structseq_@4
  00124	4c 8b 74 24 70	 mov	 r14, QWORD PTR n_fields$1$[rsp]
  00129	48 8b 74 24 78	 mov	 rsi, QWORD PTR n_unnamed_fields$1$[rsp]
$LN4@structseq_@4:

; 251  :     }
; 252  : 
; 253  :     for (i = 0; i < n_visible_fields; i++) {

  0012e	48 63 cb	 movsxd	 rcx, ebx

; 256  :     }
; 257  : 
; 258  :     for (; i < n_fields; i++) {

  00131	49 3b ce	 cmp	 rcx, r14
  00134	7d 47		 jge	 SHORT $LN1@structseq_@4
  00136	48 8b c1	 mov	 rax, rcx

; 259  :         char *n = Py_TYPE(self)->tp_members[i-n_unnamed_fields].name;
; 260  :         PyDict_SetItemString(dict, n,
; 261  :                              self->ob_item[i]);

  00139	49 8d 6c cd 70	 lea	 rbp, QWORD PTR [r13+rcx*8+112]
  0013e	48 2b c6	 sub	 rax, rsi
  00141	48 8d 34 80	 lea	 rsi, QWORD PTR [rax+rax*4]
  00145	48 c1 e6 03	 shl	 rsi, 3
  00149	0f 1f 80 00 00
	00 00		 npad	 7
$LL3@structseq_@4:
  00150	49 8b 45 58	 mov	 rax, QWORD PTR [r13+88]
  00154	4c 8b 45 00	 mov	 r8, QWORD PTR [rbp]
  00158	48 8b cf	 mov	 rcx, rdi
  0015b	48 8b 90 48 01
	00 00		 mov	 rdx, QWORD PTR [rax+328]
  00162	48 8b 14 32	 mov	 rdx, QWORD PTR [rdx+rsi]
  00166	e8 00 00 00 00	 call	 PyDict_SetItemString
  0016b	ff c3		 inc	 ebx
  0016d	48 83 c5 08	 add	 rbp, 8
  00171	48 63 c3	 movsxd	 rax, ebx
  00174	48 83 c6 28	 add	 rsi, 40			; 00000028H
  00178	49 3b c6	 cmp	 rax, r14
  0017b	7c d3		 jl	 SHORT $LL3@structseq_@4
$LN1@structseq_@4:

; 262  :     }
; 263  : 
; 264  :     result = Py_BuildValue("(O(OO))", Py_TYPE(self), tup, dict);

  0017d	49 8b 55 58	 mov	 rdx, QWORD PTR [r13+88]
  00181	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07IDPMLOMJ@?$CIO?$CIOO?$CJ?$CJ?$AA@
  00188	4c 8b cf	 mov	 r9, rdi
  0018b	4d 8b c4	 mov	 r8, r12
  0018e	e8 00 00 00 00	 call	 Py_BuildValue
  00193	48 8b d8	 mov	 rbx, rax

; 265  : 
; 266  :     Py_DECREF(tup);

  00196	e8 00 00 00 00	 call	 _Py_PXCTX
  0019b	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  001a0	85 c0		 test	 eax, eax
  001a2	75 61		 jne	 SHORT $LN25@structseq_@4
  001a4	49 8b 4c 24 20	 mov	 rcx, QWORD PTR [r12+32]
  001a9	f6 c1 20	 test	 cl, 32			; 00000020H
  001ac	75 4f		 jne	 SHORT $LN19@structseq_@4
  001ae	84 c9		 test	 cl, cl
  001b0	78 4b		 js	 SHORT $LN19@structseq_@4
  001b2	f6 c1 02	 test	 cl, 2
  001b5	75 4e		 jne	 SHORT $LN25@structseq_@4
  001b7	49 ff 4c 24 50	 dec	 QWORD PTR [r12+80]
  001bc	75 47		 jne	 SHORT $LN25@structseq_@4
  001be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  001cc	4d 8b cc	 mov	 r9, r12
  001cf	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001d5	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001dd	e8 00 00 00 00	 call	 _PyParallel_Guard
  001e2	49 8b cc	 mov	 rcx, r12
  001e5	85 c0		 test	 eax, eax
  001e7	74 07		 je	 SHORT $LN24@structseq_@4
  001e9	e8 00 00 00 00	 call	 _Px_Dealloc
  001ee	eb 15		 jmp	 SHORT $LN25@structseq_@4
$LN24@structseq_@4:
  001f0	49 8b 44 24 58	 mov	 rax, QWORD PTR [r12+88]
  001f5	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001fb	eb 08		 jmp	 SHORT $LN25@structseq_@4
$LN19@structseq_@4:
  001fd	49 8b cc	 mov	 rcx, r12
  00200	e8 00 00 00 00	 call	 Px_DecRef
$LN25@structseq_@4:

; 267  :     Py_DECREF(dict);

  00205	e8 00 00 00 00	 call	 _Py_PXCTX
  0020a	85 c0		 test	 eax, eax
  0020c	75 5c		 jne	 SHORT $LN36@structseq_@4
  0020e	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00212	a8 20		 test	 al, 32			; 00000020H
  00214	75 4c		 jne	 SHORT $LN30@structseq_@4
  00216	84 c0		 test	 al, al
  00218	78 48		 js	 SHORT $LN30@structseq_@4
  0021a	a8 02		 test	 al, 2
  0021c	75 4c		 jne	 SHORT $LN36@structseq_@4
  0021e	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00222	75 46		 jne	 SHORT $LN36@structseq_@4
  00224	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0022b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00232	4c 8b cf	 mov	 r9, rdi
  00235	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0023b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00243	e8 00 00 00 00	 call	 _PyParallel_Guard
  00248	48 8b cf	 mov	 rcx, rdi
  0024b	85 c0		 test	 eax, eax
  0024d	74 07		 je	 SHORT $LN35@structseq_@4
  0024f	e8 00 00 00 00	 call	 _Px_Dealloc
  00254	eb 14		 jmp	 SHORT $LN36@structseq_@4
$LN35@structseq_@4:
  00256	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  0025a	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00260	eb 08		 jmp	 SHORT $LN36@structseq_@4
$LN30@structseq_@4:
  00262	48 8b cf	 mov	 rcx, rdi
  00265	e8 00 00 00 00	 call	 Px_DecRef
$LN36@structseq_@4:

; 268  : 
; 269  :     return result;

  0026a	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
  0026f	48 8b c3	 mov	 rax, rbx
  00272	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR [rsp+128]

; 270  : }

  0027a	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0027e	41 5f		 pop	 r15
  00280	41 5e		 pop	 r14
  00282	41 5d		 pop	 r13
  00284	41 5c		 pop	 r12
  00286	5e		 pop	 rsi
  00287	c3		 ret	 0
structseq_reduce ENDP
_TEXT	ENDS
PUBLIC	PyStructSequence_InitType
EXTRN	PyLong_FromLong:PROC
EXTRN	PyType_Ready:PROC
EXTRN	__imp_malloc:PROC
EXTRN	_PxMem_Malloc:PROC
EXTRN	PyTuple_Type:BYTE
EXTRN	memcpy:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyStructSequence_InitType DD imagerel $LN75
	DD	imagerel $LN75+913
	DD	imagerel $unwind$PyStructSequence_InitType
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyStructSequence_InitType DD 0a1a01H
	DD	0b741aH
	DD	0a641aH
	DD	09541aH
	DD	08341aH
	DD	0c016521aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\structseq.c
xdata	ENDS
;	COMDAT PyStructSequence_InitType
_TEXT	SEGMENT
type$ = 64
desc$ = 72
PyStructSequence_InitType PROC				; COMDAT

; 320  : {

$LN75:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0001a	48 8b d9	 mov	 rbx, rcx

; 321  :     PyObject *dict;
; 322  :     PyMemberDef* members;
; 323  :     int n_members, n_unnamed_members, i, k;
; 324  : 
; 325  : #ifdef Py_TRACE_REFS
; 326  :     /* if the type object was chained, unchain it first
; 327  :        before overwriting its storage */
; 328  :     if (type->ob_base.ob_base._ob_next) {
; 329  :         _Py_ForgetReference((PyObject*)type);
; 330  :     }
; 331  : #endif
; 332  : 
; 333  :     n_unnamed_members = 0;
; 334  :     for (i = 0; desc->fields[i].name != NULL; ++i)

  0001d	48 8b 4a 10	 mov	 rcx, QWORD PTR [rdx+16]
  00021	33 ed		 xor	 ebp, ebp
  00023	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00026	33 ff		 xor	 edi, edi
  00028	45 33 c0	 xor	 r8d, r8d
  0002b	4c 8b e2	 mov	 r12, rdx
  0002e	48 85 c0	 test	 rax, rax
  00031	74 28		 je	 SHORT $LN20@PyStructSe@2
  00033	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR PyStructSequence_UnnamedField
  0003a	66 0f 1f 44 00
	00		 npad	 6
$LL22@PyStructSe@2:

; 335  :         if (desc->fields[i].name == PyStructSequence_UnnamedField)

  00040	49 3b c1	 cmp	 rax, r9
  00043	75 02		 jne	 SHORT $LN21@PyStructSe@2

; 336  :             n_unnamed_members++;

  00045	ff c5		 inc	 ebp
$LN21@PyStructSe@2:

; 321  :     PyObject *dict;
; 322  :     PyMemberDef* members;
; 323  :     int n_members, n_unnamed_members, i, k;
; 324  : 
; 325  : #ifdef Py_TRACE_REFS
; 326  :     /* if the type object was chained, unchain it first
; 327  :        before overwriting its storage */
; 328  :     if (type->ob_base.ob_base._ob_next) {
; 329  :         _Py_ForgetReference((PyObject*)type);
; 330  :     }
; 331  : #endif
; 332  : 
; 333  :     n_unnamed_members = 0;
; 334  :     for (i = 0; desc->fields[i].name != NULL; ++i)

  00047	49 ff c0	 inc	 r8
  0004a	ff c7		 inc	 edi
  0004c	49 8b c0	 mov	 rax, r8
  0004f	48 03 c0	 add	 rax, rax
  00052	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00056	48 85 c0	 test	 rax, rax
  00059	75 e5		 jne	 SHORT $LL22@PyStructSe@2
$LN20@PyStructSe@2:

; 337  :     n_members = i;
; 338  : 
; 339  :     memcpy(type, &_struct_sequence_template, sizeof(PyTypeObject));

  0005b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_struct_sequence_template
  00062	48 8b cb	 mov	 rcx, rbx
  00065	41 b8 e0 01 00
	00		 mov	 r8d, 480		; 000001e0H
  0006b	e8 00 00 00 00	 call	 memcpy

; 340  :     type->tp_base = &PyTuple_Type;

  00070	4c 8d 1d 00 00
	00 00		 lea	 r11, OFFSET FLAT:PyTuple_Type
  00077	4c 89 9b 58 01
	00 00		 mov	 QWORD PTR [rbx+344], r11

; 341  :     type->tp_name = desc->name;

  0007e	49 8b 04 24	 mov	 rax, QWORD PTR [r12]
  00082	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax

; 342  :     type->tp_doc = desc->doc;

  00086	49 8b 44 24 08	 mov	 rax, QWORD PTR [r12+8]
  0008b	48 89 83 08 01
	00 00		 mov	 QWORD PTR [rbx+264], rax

; 343  : 
; 344  :     members = PyMem_NEW(PyMemberDef, n_members-n_unnamed_members+1);

  00092	8b c7		 mov	 eax, edi
  00094	2b c5		 sub	 eax, ebp
  00096	ff c0		 inc	 eax
  00098	48 63 f0	 movsxd	 rsi, eax
  0009b	48 b8 33 33 33
	33 33 33 33 03	 mov	 rax, 230584300921369395	; 0333333333333333H
  000a5	48 3b f0	 cmp	 rsi, rax
  000a8	0f 87 c8 02 00
	00		 ja	 $LN2@PyStructSe@2
  000ae	e8 00 00 00 00	 call	 _Py_PXCTX
  000b3	85 c0		 test	 eax, eax
  000b5	74 0f		 je	 SHORT $LN29@PyStructSe@2
  000b7	48 8d 0c b6	 lea	 rcx, QWORD PTR [rsi+rsi*4]
  000bb	48 c1 e1 03	 shl	 rcx, 3
  000bf	e8 00 00 00 00	 call	 _PxMem_Malloc
  000c4	eb 2d		 jmp	 SHORT $LN74@PyStructSe@2
$LN29@PyStructSe@2:
  000c6	48 8d 04 b6	 lea	 rax, QWORD PTR [rsi+rsi*4]
  000ca	48 b9 ff ff ff
	ff ff ff ff 7f	 mov	 rcx, 9223372036854775807 ; 7fffffffffffffffH
  000d4	48 c1 e0 03	 shl	 rax, 3
  000d8	48 3b c1	 cmp	 rax, rcx
  000db	0f 87 95 02 00
	00		 ja	 $LN2@PyStructSe@2
  000e1	48 85 c0	 test	 rax, rax
  000e4	b9 01 00 00 00	 mov	 ecx, 1
  000e9	48 0f 45 c8	 cmovne	 rcx, rax
  000ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
$LN74@PyStructSe@2:
  000f3	4c 8b d8	 mov	 r11, rax

; 345  :     if (members == NULL)

  000f6	48 85 c0	 test	 rax, rax
  000f9	0f 84 77 02 00
	00		 je	 $LN2@PyStructSe@2

; 346  :         return;
; 347  : 
; 348  :     for (i = k = 0; i < n_members; ++i) {

  000ff	33 f6		 xor	 esi, esi
  00101	45 33 c0	 xor	 r8d, r8d
  00104	4c 63 cf	 movsxd	 r9, edi
  00107	85 ff		 test	 edi, edi
  00109	7e 6e		 jle	 SHORT $LN15@PyStructSe@2
  0010b	33 d2		 xor	 edx, edx
  0010d	4c 8d 50 10	 lea	 r10, QWORD PTR [rax+16]
  00111	66 66 66 66 66
	66 66 0f 1f 84
	00 00 00 00 00	 npad	 15
$LL17@PyStructSe@2:

; 349  :         if (desc->fields[i].name == PyStructSequence_UnnamedField)

  00120	49 8b 4c 24 10	 mov	 rcx, QWORD PTR [r12+16]
  00125	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR PyStructSequence_UnnamedField
  0012c	48 39 04 0a	 cmp	 QWORD PTR [rdx+rcx], rax
  00130	74 3b		 je	 SHORT $LN16@PyStructSe@2

; 350  :             continue;
; 351  :         members[k].name = desc->fields[i].name;

  00132	48 8b 0c 0a	 mov	 rcx, QWORD PTR [rdx+rcx]

; 352  :         members[k].type = T_OBJECT;

  00136	41 c7 42 f8 06
	00 00 00	 mov	 DWORD PTR [r10-8], 6

; 353  :         members[k].offset = offsetof(PyStructSequence, ob_item)
; 354  :           + i * sizeof(PyObject*);
; 355  :         members[k].flags = READONLY;

  0013e	41 c7 42 08 01
	00 00 00	 mov	 DWORD PTR [r10+8], 1
  00146	49 89 4a f0	 mov	 QWORD PTR [r10-16], rcx
  0014a	49 63 c0	 movsxd	 rax, r8d

; 356  :         members[k].doc = desc->fields[i].doc;
; 357  :         k++;

  0014d	ff c6		 inc	 esi
  0014f	48 8d 04 c5 70
	00 00 00	 lea	 rax, QWORD PTR [rax*8+112]
  00157	49 83 c2 28	 add	 r10, 40			; 00000028H
  0015b	49 89 42 d8	 mov	 QWORD PTR [r10-40], rax
  0015f	49 8b 44 24 10	 mov	 rax, QWORD PTR [r12+16]
  00164	48 8b 4c 02 08	 mov	 rcx, QWORD PTR [rdx+rax+8]
  00169	49 89 4a e8	 mov	 QWORD PTR [r10-24], rcx
$LN16@PyStructSe@2:

; 346  :         return;
; 347  : 
; 348  :     for (i = k = 0; i < n_members; ++i) {

  0016d	41 ff c0	 inc	 r8d
  00170	48 83 c2 10	 add	 rdx, 16
  00174	49 ff c9	 dec	 r9
  00177	75 a7		 jne	 SHORT $LL17@PyStructSe@2
$LN15@PyStructSe@2:

; 358  :     }
; 359  :     members[k].name = NULL;

  00179	48 63 c6	 movsxd	 rax, esi
  0017c	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  00180	49 c7 04 cb 00
	00 00 00	 mov	 QWORD PTR [r11+rcx*8], 0

; 360  : 
; 361  :     type->tp_members = members;
; 362  : 
; 363  :     if (PyType_Ready(type) < 0)

  00188	48 8b cb	 mov	 rcx, rbx
  0018b	4c 89 9b 48 01
	00 00		 mov	 QWORD PTR [rbx+328], r11
  00192	e8 00 00 00 00	 call	 PyType_Ready
  00197	85 c0		 test	 eax, eax
  00199	0f 88 d7 01 00
	00		 js	 $LN2@PyStructSe@2

; 364  :         return;
; 365  :     Py_INCREF(type);

  0019f	e8 00 00 00 00	 call	 _Py_PXCTX
  001a4	85 c0		 test	 eax, eax
  001a6	75 32		 jne	 SHORT $LN34@PyStructSe@2
  001a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  001b6	4c 8b cb	 mov	 r9, rbx
  001b9	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  001bf	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  001c7	e8 00 00 00 00	 call	 _PyParallel_Guard
  001cc	85 c0		 test	 eax, eax
  001ce	75 06		 jne	 SHORT $LN33@PyStructSe@2
  001d0	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  001d4	74 04		 je	 SHORT $LN34@PyStructSe@2
$LN33@PyStructSe@2:
  001d6	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN34@PyStructSe@2:

; 366  : 
; 367  :     dict = type->tp_dict;
; 368  : #define SET_DICT_FROM_INT(key, value)                           \
; 369  :     do {                                                        \
; 370  :         PyObject *v = PyLong_FromLong((long) value);            \
; 371  :         if (v != NULL) {                                        \
; 372  :             PyDict_SetItemString(dict, key, v);                 \
; 373  :             Py_DECREF(v);                                       \
; 374  :         }                                                       \
; 375  :     } while (0)
; 376  : 
; 377  :     SET_DICT_FROM_INT(visible_length_key, desc->n_in_sequence);

  001da	41 8b 4c 24 18	 mov	 ecx, DWORD PTR [r12+24]
  001df	48 8b b3 60 01
	00 00		 mov	 rsi, QWORD PTR [rbx+352]
  001e6	e8 00 00 00 00	 call	 PyLong_FromLong
  001eb	48 8b d8	 mov	 rbx, rax
  001ee	48 85 c0	 test	 rax, rax
  001f1	74 77		 je	 SHORT $LN11@PyStructSe@2
  001f3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:visible_length_key
  001fa	4c 8b c0	 mov	 r8, rax
  001fd	48 8b ce	 mov	 rcx, rsi
  00200	e8 00 00 00 00	 call	 PyDict_SetItemString
  00205	e8 00 00 00 00	 call	 _Py_PXCTX
  0020a	85 c0		 test	 eax, eax
  0020c	75 5c		 jne	 SHORT $LN11@PyStructSe@2
  0020e	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00212	a8 20		 test	 al, 32			; 00000020H
  00214	75 4c		 jne	 SHORT $LN41@PyStructSe@2
  00216	84 c0		 test	 al, al
  00218	78 48		 js	 SHORT $LN41@PyStructSe@2
  0021a	a8 02		 test	 al, 2
  0021c	75 4c		 jne	 SHORT $LN11@PyStructSe@2
  0021e	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00222	75 46		 jne	 SHORT $LN11@PyStructSe@2
  00224	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0022b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00232	4c 8b cb	 mov	 r9, rbx
  00235	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0023b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00243	e8 00 00 00 00	 call	 _PyParallel_Guard
  00248	48 8b cb	 mov	 rcx, rbx
  0024b	85 c0		 test	 eax, eax
  0024d	74 07		 je	 SHORT $LN46@PyStructSe@2
  0024f	e8 00 00 00 00	 call	 _Px_Dealloc
  00254	eb 14		 jmp	 SHORT $LN11@PyStructSe@2
$LN46@PyStructSe@2:
  00256	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0025a	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00260	eb 08		 jmp	 SHORT $LN11@PyStructSe@2
$LN41@PyStructSe@2:
  00262	48 8b cb	 mov	 rcx, rbx
  00265	e8 00 00 00 00	 call	 Px_DecRef
$LN11@PyStructSe@2:

; 378  :     SET_DICT_FROM_INT(real_length_key, n_members);

  0026a	8b cf		 mov	 ecx, edi
  0026c	e8 00 00 00 00	 call	 PyLong_FromLong
  00271	48 8b d8	 mov	 rbx, rax
  00274	48 85 c0	 test	 rax, rax
  00277	74 77		 je	 SHORT $LN7@PyStructSe@2
  00279	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:real_length_key
  00280	4c 8b c0	 mov	 r8, rax
  00283	48 8b ce	 mov	 rcx, rsi
  00286	e8 00 00 00 00	 call	 PyDict_SetItemString
  0028b	e8 00 00 00 00	 call	 _Py_PXCTX
  00290	85 c0		 test	 eax, eax
  00292	75 5c		 jne	 SHORT $LN7@PyStructSe@2
  00294	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00298	a8 20		 test	 al, 32			; 00000020H
  0029a	75 4c		 jne	 SHORT $LN52@PyStructSe@2
  0029c	84 c0		 test	 al, al
  0029e	78 48		 js	 SHORT $LN52@PyStructSe@2
  002a0	a8 02		 test	 al, 2
  002a2	75 4c		 jne	 SHORT $LN7@PyStructSe@2
  002a4	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  002a8	75 46		 jne	 SHORT $LN7@PyStructSe@2
  002aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  002b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  002b8	4c 8b cb	 mov	 r9, rbx
  002bb	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  002c1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002c9	e8 00 00 00 00	 call	 _PyParallel_Guard
  002ce	48 8b cb	 mov	 rcx, rbx
  002d1	85 c0		 test	 eax, eax
  002d3	74 07		 je	 SHORT $LN57@PyStructSe@2
  002d5	e8 00 00 00 00	 call	 _Px_Dealloc
  002da	eb 14		 jmp	 SHORT $LN7@PyStructSe@2
$LN57@PyStructSe@2:
  002dc	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  002e0	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  002e6	eb 08		 jmp	 SHORT $LN7@PyStructSe@2
$LN52@PyStructSe@2:
  002e8	48 8b cb	 mov	 rcx, rbx
  002eb	e8 00 00 00 00	 call	 Px_DecRef
$LN7@PyStructSe@2:

; 379  :     SET_DICT_FROM_INT(unnamed_fields_key, n_unnamed_members);

  002f0	8b cd		 mov	 ecx, ebp
  002f2	e8 00 00 00 00	 call	 PyLong_FromLong
  002f7	48 8b d8	 mov	 rbx, rax
  002fa	48 85 c0	 test	 rax, rax
  002fd	74 77		 je	 SHORT $LN2@PyStructSe@2
  002ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:unnamed_fields_key
  00306	4c 8b c0	 mov	 r8, rax
  00309	48 8b ce	 mov	 rcx, rsi
  0030c	e8 00 00 00 00	 call	 PyDict_SetItemString
  00311	e8 00 00 00 00	 call	 _Py_PXCTX
  00316	85 c0		 test	 eax, eax
  00318	75 5c		 jne	 SHORT $LN2@PyStructSe@2
  0031a	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0031e	a8 20		 test	 al, 32			; 00000020H
  00320	75 4c		 jne	 SHORT $LN63@PyStructSe@2
  00322	84 c0		 test	 al, al
  00324	78 48		 js	 SHORT $LN63@PyStructSe@2
  00326	a8 02		 test	 al, 2
  00328	75 4c		 jne	 SHORT $LN2@PyStructSe@2
  0032a	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0032e	75 46		 jne	 SHORT $LN2@PyStructSe@2
  00330	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00337	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0033e	4c 8b cb	 mov	 r9, rbx
  00341	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00347	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0034f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00354	48 8b cb	 mov	 rcx, rbx
  00357	85 c0		 test	 eax, eax
  00359	74 07		 je	 SHORT $LN68@PyStructSe@2
  0035b	e8 00 00 00 00	 call	 _Px_Dealloc
  00360	eb 14		 jmp	 SHORT $LN2@PyStructSe@2
$LN68@PyStructSe@2:
  00362	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00366	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0036c	eb 08		 jmp	 SHORT $LN2@PyStructSe@2
$LN63@PyStructSe@2:
  0036e	48 8b cb	 mov	 rcx, rbx
  00371	e8 00 00 00 00	 call	 Px_DecRef
$LN2@PyStructSe@2:

; 380  : }

  00376	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0037b	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00380	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00385	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  0038a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0038e	41 5c		 pop	 r12
  00390	c3		 ret	 0
PyStructSequence_InitType ENDP
_TEXT	ENDS
PUBLIC	PyStructSequence_NewType
EXTRN	PyType_GenericAlloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyStructSequence_NewType DD imagerel $LN5
	DD	imagerel $LN5+60
	DD	imagerel $unwind$PyStructSequence_NewType
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyStructSequence_NewType DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyStructSequence_NewType
_TEXT	SEGMENT
desc$ = 48
PyStructSequence_NewType PROC				; COMDAT

; 384  : {

$LN5:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f9	 mov	 rdi, rcx

; 385  :     PyTypeObject *result = (PyTypeObject*)PyType_GenericAlloc(&PyType_Type, 0);

  0000d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyType_Type
  00014	33 d2		 xor	 edx, edx
  00016	e8 00 00 00 00	 call	 PyType_GenericAlloc
  0001b	48 8b d8	 mov	 rbx, rax

; 386  :     if (result != NULL) {

  0001e	48 85 c0	 test	 rax, rax
  00021	74 0e		 je	 SHORT $LN1@PyStructSe@3

; 387  :         PyStructSequence_InitType(result, desc);

  00023	48 8b d7	 mov	 rdx, rdi
  00026	48 8b c8	 mov	 rcx, rax
  00029	e8 00 00 00 00	 call	 PyStructSequence_InitType

; 388  :     }
; 389  :     return result;

  0002e	48 8b c3	 mov	 rax, rbx
$LN1@PyStructSe@3:

; 390  : }

  00031	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00036	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003a	5f		 pop	 rdi
  0003b	c3		 ret	 0
PyStructSequence_NewType ENDP
_TEXT	ENDS
END
