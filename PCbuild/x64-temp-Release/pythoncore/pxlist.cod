; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	PxList_Next
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pxlist.c
;	COMDAT PxList_Next
_TEXT	SEGMENT
item$ = 8
PxList_Next PROC					; COMDAT

; 35   :     return E2I(item->slist_entry.Next);

  00000	48 8b 01	 mov	 rax, QWORD PTR [rcx]

; 36   : }

  00003	c3		 ret	 0
PxList_Next ENDP
_TEXT	ENDS
PUBLIC	PxList_Malloc
EXTRN	__imp__aligned_malloc:PROC
EXTRN	memset:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxList_Malloc DD imagerel $LN5
	DD	imagerel $LN5+59
	DD	imagerel $unwind$PxList_Malloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxList_Malloc DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PxList_Malloc
_TEXT	SEGMENT
size$ = 48
PxList_Malloc PROC					; COMDAT

; 40   : {

$LN5:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 41   :     register void *p;
; 42   :     p = _aligned_malloc(size, MEMORY_ALLOCATION_ALIGNMENT);

  0000a	ba 10 00 00 00	 mov	 edx, 16
  0000f	48 8b f9	 mov	 rdi, rcx
  00012	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__aligned_malloc
  00018	48 8b d8	 mov	 rbx, rax

; 43   :     if (p)

  0001b	48 85 c0	 test	 rax, rax
  0001e	74 10		 je	 SHORT $LN1@PxList_Mal

; 44   :         memset(p, 0, size);

  00020	4c 8b c7	 mov	 r8, rdi
  00023	33 d2		 xor	 edx, edx
  00025	48 8b c8	 mov	 rcx, rax
  00028	e8 00 00 00 00	 call	 memset

; 45   :     return p;

  0002d	48 8b c3	 mov	 rax, rbx
$LN1@PxList_Mal:

; 46   : }

  00030	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00035	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00039	5f		 pop	 rdi
  0003a	c3		 ret	 0
PxList_Malloc ENDP
_TEXT	ENDS
PUBLIC	PxList_MallocFromHeap
EXTRN	PyErr_SetFromWindowsErr:PROC
EXTRN	__imp_HeapAlloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxList_MallocFromHeap DD imagerel $LN5
	DD	imagerel $LN5+49
	DD	imagerel $unwind$PxList_MallocFromHeap
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxList_MallocFromHeap DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PxList_MallocFromHeap
_TEXT	SEGMENT
heap_handle$ = 48
size$ = 56
PxList_MallocFromHeap PROC				; COMDAT

; 50   : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 51   :     register void *p;
; 52   :     Py_ssize_t aligned = _Py_SIZE_ROUND_UP(size, MEMORY_ALLOCATION_ALIGNMENT);

  00006	4c 8d 42 0f	 lea	 r8, QWORD PTR [rdx+15]

; 53   :     p = HeapAlloc(heap_handle, HEAP_ZERO_MEMORY, aligned);

  0000a	ba 08 00 00 00	 mov	 edx, 8
  0000f	49 83 e0 f0	 and	 r8, -16
  00013	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_HeapAlloc
  00019	48 8b d8	 mov	 rbx, rax

; 54   :     if (!p)

  0001c	48 85 c0	 test	 rax, rax
  0001f	75 0a		 jne	 SHORT $LN1@PxList_Mal@2

; 55   :         PyErr_SetFromWindowsErr(0);

  00021	33 c9		 xor	 ecx, ecx
  00023	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 56   :     return p;

  00028	48 8b c3	 mov	 rax, rbx
$LN1@PxList_Mal@2:

; 57   : }

  0002b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002f	5b		 pop	 rbx
  00030	c3		 ret	 0
PxList_MallocFromHeap ENDP
_TEXT	ENDS
PUBLIC	PxList_Free
EXTRN	__imp__aligned_free:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxList_Free DD imagerel $LN4
	DD	imagerel $LN4+20
	DD	imagerel $unwind$PxList_Free
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxList_Free DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PxList_Free
_TEXT	SEGMENT
p$ = 48
PxList_Free PROC					; COMDAT

; 61   : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 62   :     if (!p)

  00004	48 85 c9	 test	 rcx, rcx
  00007	74 06		 je	 SHORT $LN2@PxList_Fre

; 63   :         return;
; 64   :     _aligned_free(p);

  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__aligned_free
$LN2@PxList_Fre:

; 65   : }

  0000f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00013	c3		 ret	 0
PxList_Free ENDP
_TEXT	ENDS
PUBLIC	PxList_New
EXTRN	__imp_InitializeSListHead:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxList_New DD imagerel $LN4
	DD	imagerel $LN4+48
	DD	imagerel $unwind$PxList_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxList_New DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PxList_New
_TEXT	SEGMENT
PxList_New PROC						; COMDAT

; 69   : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 70   :     PxListHead *l = (PxListHead *)PxList_Malloc(sizeof(PxListHead));

  00006	b9 10 00 00 00	 mov	 ecx, 16
  0000b	e8 00 00 00 00	 call	 PxList_Malloc
  00010	48 8b d8	 mov	 rbx, rax

; 71   :     if (!l)

  00013	48 85 c0	 test	 rax, rax
  00016	75 06		 jne	 SHORT $LN1@PxList_New

; 76   : }

  00018	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001c	5b		 pop	 rbx
  0001d	c3		 ret	 0
$LN1@PxList_New:

; 72   :         return NULL;
; 73   : 
; 74   :     InitializeSListHead(l);

  0001e	48 8b c8	 mov	 rcx, rax
  00021	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeSListHead

; 75   :     return l;

  00027	48 8b c3	 mov	 rax, rbx

; 76   : }

  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5b		 pop	 rbx
  0002f	c3		 ret	 0
PxList_New ENDP
_TEXT	ENDS
PUBLIC	PxList_NewFromHeap
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxList_NewFromHeap DD imagerel $LN4
	DD	imagerel $LN4+48
	DD	imagerel $unwind$PxList_NewFromHeap
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxList_NewFromHeap DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PxList_NewFromHeap
_TEXT	SEGMENT
heap_handle$ = 48
PxList_NewFromHeap PROC					; COMDAT

; 80   : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 81   :     PxListHead *l = (PxListHead *)PxList_MallocFromHeap(heap_handle,
; 82   :                                                         sizeof(PxListHead));

  00006	ba 10 00 00 00	 mov	 edx, 16
  0000b	e8 00 00 00 00	 call	 PxList_MallocFromHeap
  00010	48 8b d8	 mov	 rbx, rax

; 83   :     if (!l)

  00013	48 85 c0	 test	 rax, rax
  00016	75 06		 jne	 SHORT $LN1@PxList_New@2

; 88   : }

  00018	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001c	5b		 pop	 rbx
  0001d	c3		 ret	 0
$LN1@PxList_New@2:

; 84   :         return NULL;
; 85   : 
; 86   :     InitializeSListHead(l);

  0001e	48 8b c8	 mov	 rcx, rax
  00021	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeSListHead

; 87   :     return l;

  00027	48 8b c3	 mov	 rax, rbx

; 88   : }

  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5b		 pop	 rbx
  0002f	c3		 ret	 0
PxList_NewFromHeap ENDP
_TEXT	ENDS
PUBLIC	PxList_TimestampItem
; Function compile flags: /Ogtpy
;	COMDAT PxList_TimestampItem
_TEXT	SEGMENT
item$ = 8
PxList_TimestampItem PROC				; COMDAT

; 93   :     item->when = _Py_rdtsc();

  00000	0f 31		 rdtsc
  00002	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  00006	48 0b c2	 or	 rax, rdx
  00009	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 94   : }

  0000d	c3		 ret	 0
PxList_TimestampItem ENDP
_TEXT	ENDS
PUBLIC	PxList_NewItem
; Function compile flags: /Ogtpy
;	COMDAT PxList_NewItem
_TEXT	SEGMENT
PxList_NewItem PROC					; COMDAT

; 99   :     return E2I(PxList_Malloc(sizeof(PxListItem)));

  00000	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H

; 100  : }

  00005	e9 00 00 00 00	 jmp	 PxList_Malloc
PxList_NewItem ENDP
_TEXT	ENDS
PUBLIC	PxList_FreeListHead
; Function compile flags: /Ogtpy
;	COMDAT PxList_FreeListHead
_TEXT	SEGMENT
head$ = 8
PxList_FreeListHead PROC				; COMDAT

; 105  :     /* xxx todo: manage a list of free item lists */
; 106  :     PxList_Free(head);
; 107  : }

  00000	e9 00 00 00 00	 jmp	 PxList_Free
PxList_FreeListHead ENDP
_TEXT	ENDS
PUBLIC	PxList_FreeListItem
; Function compile flags: /Ogtpy
;	COMDAT PxList_FreeListItem
_TEXT	SEGMENT
item$ = 8
PxList_FreeListItem PROC				; COMDAT

; 112  :     /* xxx todo: manage a list of free item lists */
; 113  :     assert(PxList_Next(item) == NULL);
; 114  :     PxList_Free(item);
; 115  : }

  00000	e9 00 00 00 00	 jmp	 PxList_Free
PxList_FreeListItem ENDP
_TEXT	ENDS
PUBLIC	PxList_FreeListItemAfterNext
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxList_FreeListItemAfterNext DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$PxList_FreeListItemAfterNext
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxList_FreeListItemAfterNext DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PxList_FreeListItemAfterNext
_TEXT	SEGMENT
item$ = 48
PxList_FreeListItemAfterNext PROC			; COMDAT

; 119  : {

$LN3:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 120  :     PxListItem *next = PxList_Next(item);

  00006	e8 00 00 00 00	 call	 PxList_Next
  0000b	48 8b d8	 mov	 rbx, rax

; 121  :     PxList_FreeListItem(item);

  0000e	e8 00 00 00 00	 call	 PxList_FreeListItem

; 122  :     return next;

  00013	48 8b c3	 mov	 rax, rbx

; 123  : }

  00016	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001a	5b		 pop	 rbx
  0001b	c3		 ret	 0
PxList_FreeListItemAfterNext ENDP
_TEXT	ENDS
PUBLIC	PxList_SeverFromNext
; Function compile flags: /Ogtpy
;	COMDAT PxList_SeverFromNext
_TEXT	SEGMENT
item$ = 8
PxList_SeverFromNext PROC				; COMDAT

; 128  :     PxListItem *next = E2I(item->slist_entry.Next);

  00000	48 8b 01	 mov	 rax, QWORD PTR [rcx]

; 129  :     item->slist_entry.Next = NULL;

  00003	48 c7 01 00 00
	00 00		 mov	 QWORD PTR [rcx], 0

; 130  :     return next;
; 131  : }

  0000a	c3		 ret	 0
PxList_SeverFromNext ENDP
_TEXT	ENDS
PUBLIC	PxList_QueryDepth
EXTRN	__imp_QueryDepthSList:PROC
; Function compile flags: /Ogtpy
;	COMDAT PxList_QueryDepth
_TEXT	SEGMENT
head$ = 8
PxList_QueryDepth PROC					; COMDAT

; 136  :     return QueryDepthSList(head);
; 137  : }

  00000	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_QueryDepthSList
PxList_QueryDepth ENDP
_TEXT	ENDS
PUBLIC	PxList_FlushWithDepthHint
EXTRN	__imp_InterlockedFlushSList:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxList_FlushWithDepthHint DD imagerel $LN4
	DD	imagerel $LN4+50
	DD	imagerel $unwind$PxList_FlushWithDepthHint
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxList_FlushWithDepthHint DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PxList_FlushWithDepthHint
_TEXT	SEGMENT
head$ = 48
depth_hint$ = 56
PxList_FlushWithDepthHint PROC				; COMDAT

; 142  : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	48 8b f9	 mov	 rdi, rcx

; 143  :     if (depth_hint)

  00010	48 85 d2	 test	 rdx, rdx
  00013	74 09		 je	 SHORT $LN1@PxList_Flu

; 144  :         *depth_hint = QueryDepthSList(head);

  00015	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryDepthSList
  0001b	66 89 03	 mov	 WORD PTR [rbx], ax
$LN1@PxList_Flu:

; 145  :     return E2I(InterlockedFlushSList(head));

  0001e	48 8b cf	 mov	 rcx, rdi

; 146  : }

  00021	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00026	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002a	5f		 pop	 rdi
  0002b	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_InterlockedFlushSList
PxList_FlushWithDepthHint ENDP
_TEXT	ENDS
PUBLIC	PxList_Flush
; Function compile flags: /Ogtpy
;	COMDAT PxList_Flush
_TEXT	SEGMENT
head$ = 8
PxList_Flush PROC					; COMDAT

; 151  :     return E2I(InterlockedFlushSList(head));
; 152  : }

  00000	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_InterlockedFlushSList
PxList_Flush ENDP
_TEXT	ENDS
PUBLIC	PxList_Clear
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxList_Clear DD imagerel $LN10
	DD	imagerel $LN10+67
	DD	imagerel $unwind$PxList_Clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxList_Clear DD 020a01H
	DD	03006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PxList_Clear
_TEXT	SEGMENT
head$ = 48
PxList_Clear PROC					; COMDAT

; 156  : {

$LN10:

; 157  :     register PxListItem *item;
; 158  : 
; 159  :     if (!head)

  00000	48 85 c9	 test	 rcx, rcx
  00003	74 3c		 je	 SHORT $LN9@PxList_Cle
  00005	53		 push	 rbx
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 156  : {

  0000a	48 8b d9	 mov	 rbx, rcx

; 160  :         return;
; 161  : 
; 162  :     if (QueryDepthSList(head) == 0)

  0000d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryDepthSList
  00013	66 85 c0	 test	 ax, ax
  00016	74 24		 je	 SHORT $LN1@PxList_Cle

; 163  :         return;
; 164  : 
; 165  :     item = E2I(InterlockedFlushSList(head));

  00018	48 8b cb	 mov	 rcx, rbx
  0001b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InterlockedFlushSList
  00021	48 8b d8	 mov	 rbx, rax
$LL3@PxList_Cle:

; 166  : 
; 167  :     do {
; 168  :         PxList_FreeListItem(item);

  00024	48 8b cb	 mov	 rcx, rbx
  00027	e8 00 00 00 00	 call	 PxList_FreeListItem

; 169  :     } while (item = PxList_Next(item));

  0002c	48 8b cb	 mov	 rcx, rbx
  0002f	e8 00 00 00 00	 call	 PxList_Next
  00034	48 8b d8	 mov	 rbx, rax
  00037	48 85 c0	 test	 rax, rax
  0003a	75 e8		 jne	 SHORT $LL3@PxList_Cle
$LN1@PxList_Cle:

; 170  : 
; 171  :     return;
; 172  : }

  0003c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00040	5b		 pop	 rbx
$LN9@PxList_Cle:
  00041	f3 c3		 fatret	 0
PxList_Clear ENDP
_TEXT	ENDS
PUBLIC	PxList_FreeAllListItems
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxList_FreeAllListItems DD imagerel $LN7
	DD	imagerel $LN7+46
	DD	imagerel $unwind$PxList_FreeAllListItems
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxList_FreeAllListItems DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PxList_FreeAllListItems
_TEXT	SEGMENT
start$ = 48
PxList_FreeAllListItems PROC				; COMDAT

; 176  : {

$LN7:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
  00009	0f 1f 80 00 00
	00 00		 npad	 7
$LL3@PxList_Fre@2:

; 177  :     register PxListItem *item = start;
; 178  :     do {
; 179  :         PxList_FreeListItem(item);

  00010	48 8b cb	 mov	 rcx, rbx
  00013	e8 00 00 00 00	 call	 PxList_FreeListItem

; 180  :     } while (item = PxList_Next(item));

  00018	48 8b cb	 mov	 rcx, rbx
  0001b	e8 00 00 00 00	 call	 PxList_Next
  00020	48 8b d8	 mov	 rbx, rax
  00023	48 85 c0	 test	 rax, rax
  00026	75 e8		 jne	 SHORT $LL3@PxList_Fre@2

; 181  : }

  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5b		 pop	 rbx
  0002d	c3		 ret	 0
PxList_FreeAllListItems ENDP
_TEXT	ENDS
PUBLIC	PxList_Delete
; Function compile flags: /Ogtpy
;	COMDAT PxList_Delete
_TEXT	SEGMENT
head$ = 8
PxList_Delete PROC					; COMDAT

; 203  :     PxList_Free(head);
; 204  : }

  00000	e9 00 00 00 00	 jmp	 PxList_Free
PxList_Delete ENDP
_TEXT	ENDS
PUBLIC	PxList_FreeList
; Function compile flags: /Ogtpy
;	COMDAT PxList_FreeList
_TEXT	SEGMENT
head$ = 8
PxList_FreeList PROC					; COMDAT

; 209  :     PxList_Free(head);
; 210  : }

  00000	e9 00 00 00 00	 jmp	 PxList_Free
PxList_FreeList ENDP
_TEXT	ENDS
PUBLIC	PxList_Push
EXTRN	__imp_InterlockedPushEntrySList:PROC
; Function compile flags: /Ogtpy
;	COMDAT PxList_Push
_TEXT	SEGMENT
head$ = 8
item$ = 16
PxList_Push PROC					; COMDAT

; 215  :     return E2I(InterlockedPushEntrySList(head, I2E(&item->slist_entry)));
; 216  : }

  00000	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_InterlockedPushEntrySList
PxList_Push ENDP
_TEXT	ENDS
PUBLIC	PxList_PushObject
; Function compile flags: /Ogtpy
;	COMDAT PxList_PushObject
_TEXT	SEGMENT
head$ = 8
op$ = 16
PxList_PushObject PROC					; COMDAT

; 221  :     InterlockedPushEntrySList(head, O2E(op));

  00000	48 83 c2 10	 add	 rdx, 16

; 222  : }

  00004	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_InterlockedPushEntrySList
PxList_PushObject ENDP
_TEXT	ENDS
PUBLIC	PxList_Transfer
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxList_Transfer DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$PxList_Transfer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxList_Transfer DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PxList_Transfer
_TEXT	SEGMENT
head$ = 48
item$ = 56
PxList_Transfer PROC					; COMDAT

; 226  : {

$LN3:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 227  :     PxListItem *next = E2I(item->slist_entry.Next);

  00006	48 8b 1a	 mov	 rbx, QWORD PTR [rdx]

; 228  :     item->slist_entry.Next = NULL;

  00009	48 c7 02 00 00
	00 00		 mov	 QWORD PTR [rdx], 0

; 229  :     PxList_Push(head, item);

  00010	e8 00 00 00 00	 call	 PxList_Push

; 230  :     return next;

  00015	48 8b c3	 mov	 rax, rbx

; 231  : }

  00018	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001c	5b		 pop	 rbx
  0001d	c3		 ret	 0
PxList_Transfer ENDP
_TEXT	ENDS
PUBLIC	PxList_Pop
EXTRN	__imp_InterlockedPopEntrySList:PROC
; Function compile flags: /Ogtpy
;	COMDAT PxList_Pop
_TEXT	SEGMENT
head$ = 8
PxList_Pop PROC						; COMDAT

; 247  :     return E2I(InterlockedPopEntrySList(head));
; 248  : }

  00000	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_InterlockedPopEntrySList
PxList_Pop ENDP
_TEXT	ENDS
END
