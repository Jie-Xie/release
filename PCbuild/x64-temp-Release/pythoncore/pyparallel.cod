; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_06NAHKMOGH@_async?$AA@			; `string'
PUBLIC	_async_call_from_main_thread_and_wait
PUBLIC	??_C@_0BP@JFECJGF@call_from_main_thread_and_wait?$AA@ ; `string'
PUBLIC	_async_call_from_main_thread
PUBLIC	??_C@_0BG@GDMKOJLI@call_from_main_thread?$AA@	; `string'
PUBLIC	_async_persisted_contexts
PUBLIC	??_C@_0BD@FHGOHLMH@persisted_contexts?$AA@	; `string'
PUBLIC	_async_is_parallel_thread
PUBLIC	??_C@_0BD@IOGDFFJL@is_parallel_thread?$AA@	; `string'
PUBLIC	_async_active_contexts
PUBLIC	??_C@_0BA@IAMMEFIL@active_contexts?$AA@		; `string'
PUBLIC	_async_signal_and_wait
PUBLIC	??_C@_0BA@KFOAPOMJ@signal_and_wait?$AA@		; `string'
PUBLIC	_async_submit_write_io
PUBLIC	??_C@_0BA@NELHJCPB@submit_write_io?$AA@		; `string'
PUBLIC	_async_try_write_lock
PUBLIC	??_C@_0P@PGLFFOAC@try_write_lock?$AA@		; `string'
PUBLIC	_async_try_read_lock
PUBLIC	??_C@_0O@NMLNLIJN@try_read_lock?$AA@		; `string'
PUBLIC	_async_submit_server
PUBLIC	??_C@_0O@FHOJKAJP@submit_server?$AA@		; `string'
PUBLIC	_async_submit_client
PUBLIC	??_C@_0O@BIKLHLBM@submit_client?$AA@		; `string'
PUBLIC	_async_submit_class
PUBLIC	??_C@_0N@GJCHEFMD@submit_class?$AA@		; `string'
PUBLIC	_async_submit_timer
PUBLIC	??_C@_0N@PEHCKJKL@submit_timer?$AA@		; `string'
PUBLIC	_async__dbg_address
PUBLIC	??_C@_0N@EONPHPCE@_dbg_address?$AA@		; `string'
PUBLIC	_async_active_count
PUBLIC	??_C@_0N@BBPNBAFF@active_count?$AA@		; `string'
PUBLIC	_async_is_active_ex
PUBLIC	??_C@_0N@BKLNKEHO@is_active_ex?$AA@		; `string'
PUBLIC	_async_write_unlock
PUBLIC	??_C@_0N@MOAFFPLO@write_unlock?$AA@		; `string'
PUBLIC	_async_read_unlock
PUBLIC	??_C@_0M@KBMFGJKH@read_unlock?$AA@		; `string'
PUBLIC	_async_submit_wait
PUBLIC	??_C@_0M@MONDDDPF@submit_wait?$AA@		; `string'
PUBLIC	_async_submit_work
PUBLIC	??_C@_0M@PDCFAGMJ@submit_work?$AA@		; `string'
PUBLIC	_async_write_lock
PUBLIC	??_C@_0L@LOEOJHDP@write_lock?$AA@		; `string'
PUBLIC	_async_filecloser
PUBLIC	??_C@_0L@NHCCIFLF@filecloser?$AA@		; `string'
PUBLIC	_async_fileopener
PUBLIC	??_C@_0L@IMFFLKMC@fileopener?$AA@		; `string'
PUBLIC	_async__post_open
PUBLIC	??_C@_0L@ILCHLJH@_post_open?$AA@		; `string'
PUBLIC	_async_read_lock
PUBLIC	??_C@_09JFECMODK@read_lock?$AA@			; `string'
PUBLIC	_async_submit_io
PUBLIC	??_C@_09NGDECFMF@submit_io?$AA@			; `string'
PUBLIC	_async_is_active
PUBLIC	??_C@_09NFIEOJGK@is_active?$AA@			; `string'
PUBLIC	_async_protected
PUBLIC	??_C@_09IPOLMLK@protected?$AA@			; `string'
PUBLIC	_async_unprotect
PUBLIC	??_C@_09LHNJOGML@unprotect?$AA@			; `string'
PUBLIC	_async_cpu_count
PUBLIC	??_C@_09CHNCHKJL@cpu_count?$AA@			; `string'
PUBLIC	_async_run_once
PUBLIC	??_C@_08JHMCJIFL@run_once?$AA@			; `string'
PUBLIC	_async_register
PUBLIC	??_C@_08DHHIDNEP@register?$AA@			; `string'
PUBLIC	_async__rawfile
PUBLIC	??_C@_08GIJFBOPB@_rawfile?$AA@			; `string'
PUBLIC	_async__address
PUBLIC	??_C@_08JJIPKIML@_address?$AA@			; `string'
PUBLIC	_async_prewait
PUBLIC	??_C@_07NBHOAOAJ@prewait?$AA@			; `string'
PUBLIC	_async_protect
PUBLIC	??_C@_07LFLAEFDO@protect?$AA@			; `string'
PUBLIC	_async_server
PUBLIC	??_C@_06HJHJCKIO@server?$AA@			; `string'
PUBLIC	_async_client
PUBLIC	??_C@_06DGDLPBAN@client?$AA@			; `string'
PUBLIC	_async_signal
PUBLIC	??_C@_06OAFOBKHE@signal?$AA@			; `string'
PUBLIC	_async__close
PUBLIC	??_C@_06EINEPANJ@_close?$AA@			; `string'
PUBLIC	_async_stderr
PUBLIC	??_C@_06FJGNEBG@stderr?$AA@			; `string'
PUBLIC	_async_stdout
PUBLIC	??_C@_06DJDOIFHB@stdout?$AA@			; `string'
PUBLIC	_async_rdtsc
PUBLIC	??_C@_05JIFPPKLN@rdtsc?$AA@			; `string'
PUBLIC	_async_write
PUBLIC	??_C@_05NGFEDHGN@write?$AA@			; `string'
PUBLIC	_async_print
PUBLIC	??_C@_05IJDJACGD@print?$AA@			; `string'
PUBLIC	_async_list
PUBLIC	??_C@_04DONFEANM@list?$AA@			; `string'
PUBLIC	_async_dict
PUBLIC	??_C@_04BCIDKIGN@dict?$AA@			; `string'
PUBLIC	_async_read
PUBLIC	??_C@_04POLDLDMI@read?$AA@			; `string'
PUBLIC	_async_wait
PUBLIC	??_C@_04PNOAOIAG@wait?$AA@			; `string'
PUBLIC	_async_run
PUBLIC	??_C@_03LGMJKEGG@run?$AA@			; `string'
PUBLIC	_async_map
PUBLIC	??_C@_0M@NCDCDINH@OO?3register?$AA@		; `string'
PUBLIC	??_C@_08FCFPNNHF@protocol?$AA@			; `string'
PUBLIC	??_C@_09PBENLGJM@transport?$AA@			; `string'
PUBLIC	??_C@_0BM@BICFFLHA@Asynchronous?5Socket?5Objects?$AA@ ; `string'
PUBLIC	pxsocket_dealloc
PUBLIC	??_C@_0O@POBIDKD@_async?4socket?$AA@		; `string'
PUBLIC	??_C@_0BH@CNEGKLNK@sock_timeout?5attribute?$AA@	; `string'
PUBLIC	??_C@_0N@EJAJFIKO@sock_timeout?$AA@		; `string'
PUBLIC	??_C@_0BF@PGBPHFFO@sock_proto?5attribute?$AA@	; `string'
PUBLIC	??_C@_0L@LEEOFDBB@sock_proto?$AA@		; `string'
PUBLIC	??_C@_0BE@GKFOEKAL@sock_type?5attribute?$AA@	; `string'
PUBLIC	??_C@_09POMCLMKJ@sock_type?$AA@			; `string'
PUBLIC	??_C@_0BG@OGFLPBML@sock_family?5attribute?$AA@	; `string'
PUBLIC	??_C@_0M@MPEABHKE@sock_family?$AA@		; `string'
PUBLIC	??_C@_0P@JEFMDHHI@port?5attribute?$AA@		; `string'
PUBLIC	??_C@_0P@MCCBLNDF@host?5attribute?$AA@		; `string'
PUBLIC	??_C@_0N@MACGLBGI@ip?5attribute?$AA@		; `string'
PUBLIC	??_C@_02GIIHKPLE@ip?$AA@			; `string'
PUBLIC	pxsocket_next_send_id
PUBLIC	??_C@_0N@NCCDGHBG@next_send_id?$AA@		; `string'
PUBLIC	pxsocket_sendfile
PUBLIC	??_C@_08JCEFHKI@sendfile?$AA@			; `string'
PUBLIC	pxsocket_close
PUBLIC	??_C@_05LBOHBHFK@close?$AA@			; `string'
PUBLIC	??_C@_0BH@JFNJHNMC@max_sync_recv_attempts?$AA@	; `string'
PUBLIC	??_C@_0BH@GAODOAFA@max_sync_send_attempts?$AA@	; `string'
PUBLIC	??_C@_0O@DEOIOEML@shutdown_send?$AA@		; `string'
PUBLIC	??_C@_0M@FFOAFBMD@concurrency?$AA@		; `string'
PUBLIC	??_C@_0L@LPJIDIJF@throughput?$AA@		; `string'
PUBLIC	??_C@_0L@JKAFEJJM@lines_mode?$AA@		; `string'
PUBLIC	??_C@_0O@FEMJBDAD@send_complete?$AA@		; `string'
PUBLIC	??_C@_0O@HGCJJJHB@recv_shutdown?$AA@		; `string'
PUBLIC	??_C@_0O@IDBDAEOD@send_shutdown?$AA@		; `string'
PUBLIC	??_C@_0M@NJCGKHAI@recv_failed?$AA@		; `string'
PUBLIC	??_C@_0M@DFELAKCA@send_failed?$AA@		; `string'
PUBLIC	_Py_HandleCtrlC
PUBLIC	xlist_new
PUBLIC	xlist_alloc
PUBLIC	??_C@_0BI@GPMFHCMJ@Interlocked?5List?5Object?$AA@ ; `string'
PUBLIC	xlist_dealloc
PUBLIC	??_C@_05KOEEJJMO@xlist?$AA@			; `string'
PUBLIC	PyXList_Length
PUBLIC	xlist_flush
PUBLIC	??_C@_05GLCAEPFP@flush?$AA@			; `string'
PUBLIC	xlist_push
PUBLIC	??_C@_04GHHNIPCF@push?$AA@			; `string'
PUBLIC	xlist_pop
PUBLIC	??_C@_03NJDAHFJE@pop?$AA@			; `string'
PUBLIC	??_C@_09KKLBMLNG@_parallel?$AA@			; `string'
PUBLIC	_parallel_map
PUBLIC	??_C@_03HBNNNHNM@map?$AA@			; `string'
PUBLIC	??_C@_0P@LHLKCILO@?$HMs?$CDiiii?3socket?$AA@	; `string'
PUBLIC	??_C@_0BA@BGFLKNPD@max_line_length?$AA@		; `string'
PUBLIC	??_C@_0P@KIPMBABE@auto_reconnect?$AA@		; `string'
PUBLIC	??_C@_0N@OMMDCOFJ@wait_for_eol?$AA@		; `string'
PUBLIC	??_C@_09JDOKIHNG@line_mode?$AA@			; `string'
PUBLIC	??_C@_0BI@NHGFAPHE@initial_regex_to_expect?$AA@	; `string'
PUBLIC	??_C@_0BI@IECGIAPO@initial_words_to_expect?$AA@	; `string'
PUBLIC	??_C@_0BG@FNILJMKJ@initial_bytes_to_send?$AA@	; `string'
PUBLIC	??_C@_0BJ@PIOCLNOP@initial_connection_error?$AA@ ; `string'
PUBLIC	??_C@_0BC@KOBHOIFN@exception_handler?$AA@	; `string'
PUBLIC	??_C@_0BA@KKCDIOEH@connection_done?$AA@		; `string'
PUBLIC	??_C@_0BD@JBGBNIPL@connection_timeout?$AA@	; `string'
PUBLIC	??_C@_0BC@PBJEBHHN@connection_closed?$AA@	; `string'
PUBLIC	??_C@_0BA@NNHENGLF@connection_lost?$AA@		; `string'
PUBLIC	??_C@_0N@HICNGCPO@eof_received?$AA@		; `string'
PUBLIC	??_C@_0P@FHJFIELO@lines_received?$AA@		; `string'
PUBLIC	??_C@_0O@KHJLGLGO@data_received?$AA@		; `string'
PUBLIC	??_C@_0BA@EKHLBOND@connection_made?$AA@		; `string'
PUBLIC	??_C@_05BENFLAID@proto?$AA@			; `string'
PUBLIC	??_C@_04GPMDFGEJ@type?$AA@			; `string'
PUBLIC	??_C@_06NBOBHOCP@family?$AA@			; `string'
PUBLIC	??_C@_04LPGMAPLE@port?$AA@			; `string'
PUBLIC	??_C@_04OODOLJMA@host?$AA@			; `string'
PUBLIC	last_context_heap_malloc_addr
PUBLIC	heap_override
PUBLIC	TSTATE
PUBLIC	tls
PUBLIC	last_heap_override_malloc_addr
PUBLIC	ctx
PUBLIC	Py_MainThreadId
PUBLIC	Py_MainProcessId
PUBLIC	Py_ParallelContextsEnabled
PUBLIC	_PxObjectSignature
PUBLIC	_PxSocketSignature
PUBLIC	_PxSocketBufSignature
PUBLIC	_PxBlockingCallsThreshold
PUBLIC	_Py_CtrlCPressed
PUBLIC	_Py_InstalledCtrlCHandler
PUBLIC	_PyParallel_Finalized
PUBLIC	_PxSocketServer_PreallocatedSockets
PUBLIC	_PxSocket_MaxSyncSendAttempts
PUBLIC	_PxSocket_MaxSyncRecvAttempts
PUBLIC	_PxSocket_MaxRecvBufSize
PUBLIC	_PyTLSHeap_DefaultSize
PUBLIC	_PxSocket_SendListSize
PUBLIC	_PxSocket_ActiveHogs
PUBLIC	_PxSocket_ActiveIOLoops
PUBLIC	_PyParallel_NumCPUs
PUBLIC	_Px_ObjectSignature_CallDepth
PUBLIC	_Px_SafeObjectSignatureTest_CallDepth
PUBLIC	PyXList_Type
PUBLIC	_Py_CtrlCHandlerRoutine
PUBLIC	_async_methods
PUBLIC	_asyncmodule
EXTRN	PyType_GenericAlloc:PROC
EXTRN	PyObject_GenericSetAttr:PROC
EXTRN	PyObject_GenericGetAttr:PROC
_TLS	SEGMENT
last_context_heap_malloc_addr DQ 01H DUP (?)
heap_override DQ 01H DUP (?)
TSTATE	DQ	01H DUP (?)
tls	DB	05e40H DUP (?)
_TLS	ENDS
_DATA	SEGMENT
COMM	PyExc_AssignmentError:QWORD
COMM	PyExc_AsyncError:QWORD
_DATA	ENDS
_TLS	SEGMENT
last_heap_override_malloc_addr DQ 01H DUP (?)
_TLS	ENDS
_BSS	SEGMENT
_Py_CtrlCPressed DD 01H DUP (?)
_Py_InstalledCtrlCHandler DD 01H DUP (?)
_PyParallel_Finalized DD 01H DUP (?)
_PxSocket_ActiveHogs DD 01H DUP (?)
_PxSocket_ActiveIOLoops DD 01H DUP (?)
_PyParallel_NumCPUs DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_06NAHKMOGH@_async?$AA@
CONST	SEGMENT
??_C@_06NAHKMOGH@_async?$AA@ DB '_async', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@JFECJGF@call_from_main_thread_and_wait?$AA@
CONST	SEGMENT
??_C@_0BP@JFECJGF@call_from_main_thread_and_wait?$AA@ DB 'call_from_main_'
	DB	'thread_and_wait', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GDMKOJLI@call_from_main_thread?$AA@
CONST	SEGMENT
??_C@_0BG@GDMKOJLI@call_from_main_thread?$AA@ DB 'call_from_main_thread', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FHGOHLMH@persisted_contexts?$AA@
CONST	SEGMENT
??_C@_0BD@FHGOHLMH@persisted_contexts?$AA@ DB 'persisted_contexts', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@IOGDFFJL@is_parallel_thread?$AA@
CONST	SEGMENT
??_C@_0BD@IOGDFFJL@is_parallel_thread?$AA@ DB 'is_parallel_thread', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IAMMEFIL@active_contexts?$AA@
CONST	SEGMENT
??_C@_0BA@IAMMEFIL@active_contexts?$AA@ DB 'active_contexts', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KFOAPOMJ@signal_and_wait?$AA@
CONST	SEGMENT
??_C@_0BA@KFOAPOMJ@signal_and_wait?$AA@ DB 'signal_and_wait', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NELHJCPB@submit_write_io?$AA@
CONST	SEGMENT
??_C@_0BA@NELHJCPB@submit_write_io?$AA@ DB 'submit_write_io', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PGLFFOAC@try_write_lock?$AA@
CONST	SEGMENT
??_C@_0P@PGLFFOAC@try_write_lock?$AA@ DB 'try_write_lock', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NMLNLIJN@try_read_lock?$AA@
CONST	SEGMENT
??_C@_0O@NMLNLIJN@try_read_lock?$AA@ DB 'try_read_lock', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FHOJKAJP@submit_server?$AA@
CONST	SEGMENT
??_C@_0O@FHOJKAJP@submit_server?$AA@ DB 'submit_server', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BIKLHLBM@submit_client?$AA@
CONST	SEGMENT
??_C@_0O@BIKLHLBM@submit_client?$AA@ DB 'submit_client', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GJCHEFMD@submit_class?$AA@
CONST	SEGMENT
??_C@_0N@GJCHEFMD@submit_class?$AA@ DB 'submit_class', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PEHCKJKL@submit_timer?$AA@
CONST	SEGMENT
??_C@_0N@PEHCKJKL@submit_timer?$AA@ DB 'submit_timer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EONPHPCE@_dbg_address?$AA@
CONST	SEGMENT
??_C@_0N@EONPHPCE@_dbg_address?$AA@ DB '_dbg_address', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BBPNBAFF@active_count?$AA@
CONST	SEGMENT
??_C@_0N@BBPNBAFF@active_count?$AA@ DB 'active_count', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BKLNKEHO@is_active_ex?$AA@
CONST	SEGMENT
??_C@_0N@BKLNKEHO@is_active_ex?$AA@ DB 'is_active_ex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MOAFFPLO@write_unlock?$AA@
CONST	SEGMENT
??_C@_0N@MOAFFPLO@write_unlock?$AA@ DB 'write_unlock', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KBMFGJKH@read_unlock?$AA@
CONST	SEGMENT
??_C@_0M@KBMFGJKH@read_unlock?$AA@ DB 'read_unlock', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MONDDDPF@submit_wait?$AA@
CONST	SEGMENT
??_C@_0M@MONDDDPF@submit_wait?$AA@ DB 'submit_wait', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PDCFAGMJ@submit_work?$AA@
CONST	SEGMENT
??_C@_0M@PDCFAGMJ@submit_work?$AA@ DB 'submit_work', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LOEOJHDP@write_lock?$AA@
CONST	SEGMENT
??_C@_0L@LOEOJHDP@write_lock?$AA@ DB 'write_lock', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NHCCIFLF@filecloser?$AA@
CONST	SEGMENT
??_C@_0L@NHCCIFLF@filecloser?$AA@ DB 'filecloser', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IMFFLKMC@fileopener?$AA@
CONST	SEGMENT
??_C@_0L@IMFFLKMC@fileopener?$AA@ DB 'fileopener', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ILCHLJH@_post_open?$AA@
CONST	SEGMENT
??_C@_0L@ILCHLJH@_post_open?$AA@ DB '_post_open', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JFECMODK@read_lock?$AA@
CONST	SEGMENT
??_C@_09JFECMODK@read_lock?$AA@ DB 'read_lock', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NGDECFMF@submit_io?$AA@
CONST	SEGMENT
??_C@_09NGDECFMF@submit_io?$AA@ DB 'submit_io', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NFIEOJGK@is_active?$AA@
CONST	SEGMENT
??_C@_09NFIEOJGK@is_active?$AA@ DB 'is_active', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09IPOLMLK@protected?$AA@
CONST	SEGMENT
??_C@_09IPOLMLK@protected?$AA@ DB 'protected', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LHNJOGML@unprotect?$AA@
CONST	SEGMENT
??_C@_09LHNJOGML@unprotect?$AA@ DB 'unprotect', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09CHNCHKJL@cpu_count?$AA@
CONST	SEGMENT
??_C@_09CHNCHKJL@cpu_count?$AA@ DB 'cpu_count', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JHMCJIFL@run_once?$AA@
CONST	SEGMENT
??_C@_08JHMCJIFL@run_once?$AA@ DB 'run_once', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08DHHIDNEP@register?$AA@
CONST	SEGMENT
??_C@_08DHHIDNEP@register?$AA@ DB 'register', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GIJFBOPB@_rawfile?$AA@
CONST	SEGMENT
??_C@_08GIJFBOPB@_rawfile?$AA@ DB '_rawfile', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JJIPKIML@_address?$AA@
CONST	SEGMENT
??_C@_08JJIPKIML@_address?$AA@ DB '_address', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07NBHOAOAJ@prewait?$AA@
CONST	SEGMENT
??_C@_07NBHOAOAJ@prewait?$AA@ DB 'prewait', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LFLAEFDO@protect?$AA@
CONST	SEGMENT
??_C@_07LFLAEFDO@protect?$AA@ DB 'protect', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HJHJCKIO@server?$AA@
CONST	SEGMENT
??_C@_06HJHJCKIO@server?$AA@ DB 'server', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DGDLPBAN@client?$AA@
CONST	SEGMENT
??_C@_06DGDLPBAN@client?$AA@ DB 'client', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OAFOBKHE@signal?$AA@
CONST	SEGMENT
??_C@_06OAFOBKHE@signal?$AA@ DB 'signal', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EINEPANJ@_close?$AA@
CONST	SEGMENT
??_C@_06EINEPANJ@_close?$AA@ DB '_close', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FJGNEBG@stderr?$AA@
CONST	SEGMENT
??_C@_06FJGNEBG@stderr?$AA@ DB 'stderr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DJDOIFHB@stdout?$AA@
CONST	SEGMENT
??_C@_06DJDOIFHB@stdout?$AA@ DB 'stdout', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JIFPPKLN@rdtsc?$AA@
CONST	SEGMENT
??_C@_05JIFPPKLN@rdtsc?$AA@ DB 'rdtsc', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NGFEDHGN@write?$AA@
CONST	SEGMENT
??_C@_05NGFEDHGN@write?$AA@ DB 'write', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IJDJACGD@print?$AA@
CONST	SEGMENT
??_C@_05IJDJACGD@print?$AA@ DB 'print', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DONFEANM@list?$AA@
CONST	SEGMENT
??_C@_04DONFEANM@list?$AA@ DB 'list', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BCIDKIGN@dict?$AA@
CONST	SEGMENT
??_C@_04BCIDKIGN@dict?$AA@ DB 'dict', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04POLDLDMI@read?$AA@
CONST	SEGMENT
??_C@_04POLDLDMI@read?$AA@ DB 'read', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PNOAOIAG@wait?$AA@
CONST	SEGMENT
??_C@_04PNOAOIAG@wait?$AA@ DB 'wait', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03LGMJKEGG@run?$AA@
CONST	SEGMENT
??_C@_03LGMJKEGG@run?$AA@ DB 'run', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NCDCDINH@OO?3register?$AA@
CONST	SEGMENT
??_C@_0M@NCDCDINH@OO?3register?$AA@ DB 'OO:register', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08FCFPNNHF@protocol?$AA@
CONST	SEGMENT
??_C@_08FCFPNNHF@protocol?$AA@ DB 'protocol', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PBENLGJM@transport?$AA@
CONST	SEGMENT
??_C@_09PBENLGJM@transport?$AA@ DB 'transport', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BICFFLHA@Asynchronous?5Socket?5Objects?$AA@
CONST	SEGMENT
??_C@_0BM@BICFFLHA@Asynchronous?5Socket?5Objects?$AA@ DB 'Asynchronous So'
	DB	'cket Objects', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@POBIDKD@_async?4socket?$AA@
CONST	SEGMENT
??_C@_0O@POBIDKD@_async?4socket?$AA@ DB '_async.socket', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CNEGKLNK@sock_timeout?5attribute?$AA@
CONST	SEGMENT
??_C@_0BH@CNEGKLNK@sock_timeout?5attribute?$AA@ DB 'sock_timeout attribut'
	DB	'e', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EJAJFIKO@sock_timeout?$AA@
CONST	SEGMENT
??_C@_0N@EJAJFIKO@sock_timeout?$AA@ DB 'sock_timeout', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PGBPHFFO@sock_proto?5attribute?$AA@
CONST	SEGMENT
??_C@_0BF@PGBPHFFO@sock_proto?5attribute?$AA@ DB 'sock_proto attribute', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LEEOFDBB@sock_proto?$AA@
CONST	SEGMENT
??_C@_0L@LEEOFDBB@sock_proto?$AA@ DB 'sock_proto', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GKFOEKAL@sock_type?5attribute?$AA@
CONST	SEGMENT
??_C@_0BE@GKFOEKAL@sock_type?5attribute?$AA@ DB 'sock_type attribute', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09POMCLMKJ@sock_type?$AA@
CONST	SEGMENT
??_C@_09POMCLMKJ@sock_type?$AA@ DB 'sock_type', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OGFLPBML@sock_family?5attribute?$AA@
CONST	SEGMENT
??_C@_0BG@OGFLPBML@sock_family?5attribute?$AA@ DB 'sock_family attribute', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MPEABHKE@sock_family?$AA@
CONST	SEGMENT
??_C@_0M@MPEABHKE@sock_family?$AA@ DB 'sock_family', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JEFMDHHI@port?5attribute?$AA@
CONST	SEGMENT
??_C@_0P@JEFMDHHI@port?5attribute?$AA@ DB 'port attribute', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MCCBLNDF@host?5attribute?$AA@
CONST	SEGMENT
??_C@_0P@MCCBLNDF@host?5attribute?$AA@ DB 'host attribute', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MACGLBGI@ip?5attribute?$AA@
CONST	SEGMENT
??_C@_0N@MACGLBGI@ip?5attribute?$AA@ DB 'ip attribute', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02GIIHKPLE@ip?$AA@
CONST	SEGMENT
??_C@_02GIIHKPLE@ip?$AA@ DB 'ip', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NCCDGHBG@next_send_id?$AA@
CONST	SEGMENT
??_C@_0N@NCCDGHBG@next_send_id?$AA@ DB 'next_send_id', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08JCEFHKI@sendfile?$AA@
CONST	SEGMENT
??_C@_08JCEFHKI@sendfile?$AA@ DB 'sendfile', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05LBOHBHFK@close?$AA@
CONST	SEGMENT
??_C@_05LBOHBHFK@close?$AA@ DB 'close', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JFNJHNMC@max_sync_recv_attempts?$AA@
CONST	SEGMENT
??_C@_0BH@JFNJHNMC@max_sync_recv_attempts?$AA@ DB 'max_sync_recv_attempts'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GAODOAFA@max_sync_send_attempts?$AA@
CONST	SEGMENT
??_C@_0BH@GAODOAFA@max_sync_send_attempts?$AA@ DB 'max_sync_send_attempts'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DEOIOEML@shutdown_send?$AA@
CONST	SEGMENT
??_C@_0O@DEOIOEML@shutdown_send?$AA@ DB 'shutdown_send', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FFOAFBMD@concurrency?$AA@
CONST	SEGMENT
??_C@_0M@FFOAFBMD@concurrency?$AA@ DB 'concurrency', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LPJIDIJF@throughput?$AA@
CONST	SEGMENT
??_C@_0L@LPJIDIJF@throughput?$AA@ DB 'throughput', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JKAFEJJM@lines_mode?$AA@
CONST	SEGMENT
??_C@_0L@JKAFEJJM@lines_mode?$AA@ DB 'lines_mode', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FEMJBDAD@send_complete?$AA@
CONST	SEGMENT
??_C@_0O@FEMJBDAD@send_complete?$AA@ DB 'send_complete', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HGCJJJHB@recv_shutdown?$AA@
CONST	SEGMENT
??_C@_0O@HGCJJJHB@recv_shutdown?$AA@ DB 'recv_shutdown', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IDBDAEOD@send_shutdown?$AA@
CONST	SEGMENT
??_C@_0O@IDBDAEOD@send_shutdown?$AA@ DB 'send_shutdown', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NJCGKHAI@recv_failed?$AA@
CONST	SEGMENT
??_C@_0M@NJCGKHAI@recv_failed?$AA@ DB 'recv_failed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DFELAKCA@send_failed?$AA@
CONST	SEGMENT
??_C@_0M@DFELAKCA@send_failed?$AA@ DB 'send_failed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GPMFHCMJ@Interlocked?5List?5Object?$AA@
CONST	SEGMENT
??_C@_0BI@GPMFHCMJ@Interlocked?5List?5Object?$AA@ DB 'Interlocked List Ob'
	DB	'ject', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_05KOEEJJMO@xlist?$AA@
CONST	SEGMENT
??_C@_05KOEEJJMO@xlist?$AA@ DB 'xlist', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GLCAEPFP@flush?$AA@
CONST	SEGMENT
??_C@_05GLCAEPFP@flush?$AA@ DB 'flush', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GHHNIPCF@push?$AA@
CONST	SEGMENT
??_C@_04GHHNIPCF@push?$AA@ DB 'push', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NJDAHFJE@pop?$AA@
CONST	SEGMENT
??_C@_03NJDAHFJE@pop?$AA@ DB 'pop', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09KKLBMLNG@_parallel?$AA@
CONST	SEGMENT
??_C@_09KKLBMLNG@_parallel?$AA@ DB '_parallel', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03HBNNNHNM@map?$AA@
CONST	SEGMENT
??_C@_03HBNNNHNM@map?$AA@ DB 'map', 00H			; `string'
CONST	ENDS
_TLS	SEGMENT
_Px_SafeObjectSignatureTest_CallDepth DD 00H
_Px_ObjectSignature_CallDepth DD 00H
_PxNewThread DD	01H
	ORG $+20
ctx	DQ	0000000000000000H
PyId_max_sync_recv_attempts DQ 0000000000000000H
	DQ	FLAT:??_C@_0BH@JFNJHNMC@max_sync_recv_attempts?$AA@
	DQ	0000000000000000H
PyId_max_sync_send_attempts DQ 0000000000000000H
	DQ	FLAT:??_C@_0BH@GAODOAFA@max_sync_send_attempts?$AA@
	DQ	0000000000000000H
PyId_shutdown_send DQ 0000000000000000H
	DQ	FLAT:??_C@_0O@DEOIOEML@shutdown_send?$AA@
	DQ	0000000000000000H
PyId_concurrency DQ 0000000000000000H
	DQ	FLAT:??_C@_0M@FFOAFBMD@concurrency?$AA@
	DQ	0000000000000000H
PyId_throughput DQ 0000000000000000H
	DQ	FLAT:??_C@_0L@LPJIDIJF@throughput?$AA@
	DQ	0000000000000000H
PyId_lines_mode DQ 0000000000000000H
	DQ	FLAT:??_C@_0L@JKAFEJJM@lines_mode?$AA@
	DQ	0000000000000000H
PyId_initial_bytes_to_send DQ 0000000000000000H
	DQ	FLAT:??_C@_0BG@FNILJMKJ@initial_bytes_to_send?$AA@
	DQ	0000000000000000H
PyId_exception_handler DQ 0000000000000000H
	DQ	FLAT:??_C@_0BC@KOBHOIFN@exception_handler?$AA@
	DQ	0000000000000000H
PyId_connection_closed DQ 0000000000000000H
	DQ	FLAT:??_C@_0BC@PBJEBHHN@connection_closed?$AA@
	DQ	0000000000000000H
PyId_connection_made DQ 0000000000000000H
	DQ	FLAT:??_C@_0BA@EKHLBOND@connection_made?$AA@
	DQ	0000000000000000H
PyId_lines_received DQ 0000000000000000H
	DQ	FLAT:??_C@_0P@FHJFIELO@lines_received?$AA@
	DQ	0000000000000000H
PyId_data_received DQ 0000000000000000H
	DQ	FLAT:??_C@_0O@KHJLGLGO@data_received?$AA@
	DQ	0000000000000000H
PyId_send_complete DQ 0000000000000000H
	DQ	FLAT:??_C@_0O@FEMJBDAD@send_complete?$AA@
	DQ	0000000000000000H
PyId_recv_shutdown DQ 0000000000000000H
	DQ	FLAT:??_C@_0O@HGCJJJHB@recv_shutdown?$AA@
	DQ	0000000000000000H
PyId_send_shutdown DQ 0000000000000000H
	DQ	FLAT:??_C@_0O@IDBDAEOD@send_shutdown?$AA@
	DQ	0000000000000000H
PyId_recv_failed DQ 0000000000000000H
	DQ	FLAT:??_C@_0M@NJCGKHAI@recv_failed?$AA@
	DQ	0000000000000000H
PyId_send_failed DQ 0000000000000000H
	DQ	FLAT:??_C@_0M@DFELAKCA@send_failed?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_0P@LHLKCILO@?$HMs?$CDiiii?3socket?$AA@
CONST	SEGMENT
??_C@_0P@LHLKCILO@?$HMs?$CDiiii?3socket?$AA@ DB '|s#iiii:socket', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BGFLKNPD@max_line_length?$AA@
CONST	SEGMENT
??_C@_0BA@BGFLKNPD@max_line_length?$AA@ DB 'max_line_length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KIPMBABE@auto_reconnect?$AA@
CONST	SEGMENT
??_C@_0P@KIPMBABE@auto_reconnect?$AA@ DB 'auto_reconnect', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OMMDCOFJ@wait_for_eol?$AA@
CONST	SEGMENT
??_C@_0N@OMMDCOFJ@wait_for_eol?$AA@ DB 'wait_for_eol', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09JDOKIHNG@line_mode?$AA@
CONST	SEGMENT
??_C@_09JDOKIHNG@line_mode?$AA@ DB 'line_mode', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NHGFAPHE@initial_regex_to_expect?$AA@
CONST	SEGMENT
??_C@_0BI@NHGFAPHE@initial_regex_to_expect?$AA@ DB 'initial_regex_to_expe'
	DB	'ct', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IECGIAPO@initial_words_to_expect?$AA@
CONST	SEGMENT
??_C@_0BI@IECGIAPO@initial_words_to_expect?$AA@ DB 'initial_words_to_expe'
	DB	'ct', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FNILJMKJ@initial_bytes_to_send?$AA@
CONST	SEGMENT
??_C@_0BG@FNILJMKJ@initial_bytes_to_send?$AA@ DB 'initial_bytes_to_send', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PIOCLNOP@initial_connection_error?$AA@
CONST	SEGMENT
??_C@_0BJ@PIOCLNOP@initial_connection_error?$AA@ DB 'initial_connection_e'
	DB	'rror', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KOBHOIFN@exception_handler?$AA@
CONST	SEGMENT
??_C@_0BC@KOBHOIFN@exception_handler?$AA@ DB 'exception_handler', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KKCDIOEH@connection_done?$AA@
CONST	SEGMENT
??_C@_0BA@KKCDIOEH@connection_done?$AA@ DB 'connection_done', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JBGBNIPL@connection_timeout?$AA@
CONST	SEGMENT
??_C@_0BD@JBGBNIPL@connection_timeout?$AA@ DB 'connection_timeout', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PBJEBHHN@connection_closed?$AA@
CONST	SEGMENT
??_C@_0BC@PBJEBHHN@connection_closed?$AA@ DB 'connection_closed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NNHENGLF@connection_lost?$AA@
CONST	SEGMENT
??_C@_0BA@NNHENGLF@connection_lost?$AA@ DB 'connection_lost', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HICNGCPO@eof_received?$AA@
CONST	SEGMENT
??_C@_0N@HICNGCPO@eof_received?$AA@ DB 'eof_received', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FHJFIELO@lines_received?$AA@
CONST	SEGMENT
??_C@_0P@FHJFIELO@lines_received?$AA@ DB 'lines_received', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KHJLGLGO@data_received?$AA@
CONST	SEGMENT
??_C@_0O@KHJLGLGO@data_received?$AA@ DB 'data_received', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EKHLBOND@connection_made?$AA@
CONST	SEGMENT
??_C@_0BA@EKHLBOND@connection_made?$AA@ DB 'connection_made', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
pxsocket_kwlist DQ FLAT:??_C@_04OODOLJMA@host?$AA@
	DQ	FLAT:??_C@_04LPGMAPLE@port?$AA@
	DQ	FLAT:??_C@_06NBOBHOCP@family?$AA@
	DQ	FLAT:??_C@_04GPMDFGEJ@type?$AA@
	DQ	FLAT:??_C@_05BENFLAID@proto?$AA@
	DQ	0000000000000000H
pxsocket_protocol_attrs DQ FLAT:??_C@_0BA@EKHLBOND@connection_made?$AA@
	DQ	FLAT:??_C@_0O@KHJLGLGO@data_received?$AA@
	DQ	FLAT:??_C@_0P@FHJFIELO@lines_received?$AA@
	DQ	FLAT:??_C@_0N@HICNGCPO@eof_received?$AA@
	DQ	FLAT:??_C@_0BA@NNHENGLF@connection_lost?$AA@
	DQ	FLAT:??_C@_0BC@PBJEBHHN@connection_closed?$AA@
	DQ	FLAT:??_C@_0BD@JBGBNIPL@connection_timeout?$AA@
	DQ	FLAT:??_C@_0BA@KKCDIOEH@connection_done?$AA@
	DQ	FLAT:??_C@_0BC@KOBHOIFN@exception_handler?$AA@
	DQ	FLAT:??_C@_0BJ@PIOCLNOP@initial_connection_error?$AA@
	DQ	FLAT:??_C@_0BG@FNILJMKJ@initial_bytes_to_send?$AA@
	DQ	FLAT:??_C@_0BI@IECGIAPO@initial_words_to_expect?$AA@
	DQ	FLAT:??_C@_0BI@NHGFAPHE@initial_regex_to_expect?$AA@
	DQ	FLAT:??_C@_09JDOKIHNG@line_mode?$AA@
	DQ	FLAT:??_C@_0N@OMMDCOFJ@wait_for_eol?$AA@
	DQ	FLAT:??_C@_0P@KIPMBABE@auto_reconnect?$AA@
	DQ	FLAT:??_C@_0BA@BGFLKNPD@max_line_length?$AA@
	DQ	0000000000000000H
pxsocket_kwlist_formatstring DQ FLAT:??_C@_0P@LHLKCILO@?$HMs?$CDiiii?3socket?$AA@
Py_MainProcessId DD 0ffffffffH
Py_ParallelContextsEnabled DD 0ffffffffH
_PxObjectSignature DQ ffffffffffffffffH
_PxSocketSignature DQ ffffffffffffffffH
_PxSocketBufSignature DQ ffffffffffffffffH
_PxBlockingCallsThreshold DD 014H
_PxSocketServer_PreallocatedSockets DD 040H
_PxSocket_MaxSyncSendAttempts DD 03H
_PxSocket_MaxSyncRecvAttempts DD 03H
_PxSocket_MaxRecvBufSize DD 010000H
_PyTLSHeap_DefaultSize DD 0200000H
Py_MainThreadId DD 0ffffffffH
_PxSocket_SendListSize DD 01eH
_parallel_doc DB '_parallel module.', 0aH, 0aH, 'Functions:', 0aH, 0aH, 'm'
	DB	'ap()', 0aH, 00H
	ORG $+2
_async_cpu_count_doc DB 'cpu_count() -> integer', 0aH, 0aH, 'Return an in'
	DB	'teger representing the number of online logical CPUs,', 0aH, 'o'
	DB	'r -1 if this value cannot be established.', 00H
	ORG $+3
_Py_CtrlCHandlerRoutine DQ FLAT:_Py_HandleCtrlC
_parallel_map_doc DB 'map(callable, iterable) -> list', 0aH, 0aH, 'Calls '
	DB	'``callable`` with each item in ``iterable``.', 0aH, 'Returns '
	DB	'a list of results.', 00H
	ORG $+1
_parallel_methods DQ FLAT:??_C@_03HBNNNHNM@map?$AA@
	DQ	FLAT:_parallel_map
	DD	01H
	ORG $+4
	DQ	FLAT:_parallel_map_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
_parallelmodule DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_09KKLBMLNG@_parallel?$AA@
	DQ	FLAT:_parallel_doc
	DQ	ffffffffffffffffH
	DQ	FLAT:_parallel_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
xlist_pop_doc DB 'XXX TODO', 0aH, 00H
	ORG $+2
pxsocket_accept_doc DB 'x', 0aH, 00H
	ORG $+1
xlist_push_doc DB 'XXX TODO', 0aH, 00H
	ORG $+2
pxsocket_bind_doc DB 'x', 0aH, 00H
	ORG $+1
xlist_size_doc DB 'XXX TODO', 0aH, 00H
	ORG $+2
pxsocket_connect_doc DB 'x', 0aH, 00H
	ORG $+1
xlist_flush_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
xlist_methods DQ FLAT:??_C@_03NJDAHFJE@pop?$AA@
	DQ	FLAT:xlist_pop
	DD	04H
	ORG $+4
	DQ	FLAT:xlist_pop_doc
	DQ	FLAT:??_C@_04GHHNIPCF@push?$AA@
	DQ	FLAT:xlist_push
	DD	08H
	ORG $+4
	DQ	FLAT:xlist_push_doc
	DQ	FLAT:??_C@_05GLCAEPFP@flush?$AA@
	DQ	FLAT:xlist_flush
	DD	04H
	ORG $+4
	DQ	FLAT:xlist_flush_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
xlist_as_sequence DQ FLAT:PyXList_Length
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
PyXList_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	ORG $+16
	DQ	FLAT:??_C@_05KOEEJJMO@xlist?$AA@
	DQ	00000000000000a0H
	DQ	0000000000000000H
	DQ	FLAT:xlist_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:xlist_as_sequence
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	FLAT:??_C@_0BI@GPMFHCMJ@Interlocked?5List?5Object?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:xlist_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:xlist_alloc
	DQ	FLAT:xlist_new
	DQ	0000000000000000H
	ORG $+64
_async_list_doc DB 'Helper function for creating an async-protected insta'
	DB	'nce of type ''##name''', 0aH, 00H
	ORG $+5
_async_dict_doc DB 'Helper function for creating an async-protected insta'
	DB	'nce of type ''##name''', 0aH, 00H
	ORG $+5
_async_doc DB	'_async module.', 0aH, 0aH, 'Functions:', 0aH, 0aH, 'run('
	DB	')', 0aH, 'map(callable, iterable[, chunksize[, callback[, err'
	DB	'back]]])', 0aH, 'submit_work(func[, args[, kwds[, callback[, '
	DB	'errback]]]])', 0aH, 'submit_wait(wait, func[, args[, kwds[, c'
	DB	'allback[, errback]]]])', 0aH, 'submit_timer(timer, func[, arg'
	DB	's[, kwds[, callback[, errback]]]])', 0aH, 'submit_io(func[, a'
	DB	'rgs[, kwds[, callback[, errback]]]])', 0aH, 'submit_server(ob'
	DB	'j)', 0aH, 'submit_client(obj)', 0aH, 0aH, 'Socket IO function'
	DB	's:', 0aH, 'connect(sock, (host, port)[, buf[, callback[, errb'
	DB	'ack]]])', 0aH, 00H
	ORG $+3
_async_run_doc DB 'run() -> None', 0aH, 0aH, 'Runs the _async event loop.'
	DB	00H
	ORG $+1
pxsocket_close_doc DB 'x', 0aH, 00H
	ORG $+1
?kwlist@?1??_async_register@@9@9 DQ FLAT:??_C@_09PBENLGJM@transport?$AA@ ; `_async_register'::`2'::kwlist
	DQ	FLAT:??_C@_08FCFPNNHF@protocol?$AA@
	DQ	0000000000000000H
_async_unregister_doc DB 'unregister(object) -> None', 0aH, 0aH, 'Unregis'
	DB	'ters an asynchronous object.', 00H
_async_read_doc DB 'XXX TODO', 0aH, 00H
	ORG $+2
pxsocket_listen_doc DB 'x', 0aH, 00H
	ORG $+1
_async_open_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_pipe_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_write_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_fileopener_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_filecloser_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async__address_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async__dbg_address_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async__close_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async__rawfile_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async__post_open_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_submit_write_io_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_map_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_wait_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_rdtsc_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_client_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_server_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_signal_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_prewait_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_protect_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_run_once_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_unprotect_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_protected_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_is_active_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_read_lock_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_read_unlock_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_try_read_lock_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_write_lock_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_write_unlock_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_try_write_lock_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_submit_io_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_submit_work_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_submit_wait_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_is_active_ex_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_active_count_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_submit_timer_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_submit_class_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_submit_client_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_submit_server_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_active_contexts_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_persisted_contexts_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_signal_and_wait_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_is_parallel_thread_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_call_from_main_thread_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_call_from_main_thread_and_wait_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
pxsocket_write_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
pxsocket_next_send_id_doc DB 'xxx todo', 0aH, 00H
	ORG $+6
pxsocket_sendfile_doc DB 'xxx todo', 0aH, 00H
	ORG $+6
PxSocketMethods DQ FLAT:??_C@_05LBOHBHFK@close?$AA@
	DQ	FLAT:pxsocket_close
	DD	04H
	ORG $+4
	DQ	FLAT:pxsocket_close_doc
	DQ	FLAT:??_C@_08JCEFHKI@sendfile?$AA@
	DQ	FLAT:pxsocket_sendfile
	DD	01H
	ORG $+4
	DQ	FLAT:pxsocket_sendfile_doc
	DQ	FLAT:??_C@_0N@NCCDGHBG@next_send_id?$AA@
	DQ	FLAT:pxsocket_next_send_id
	DD	04H
	ORG $+4
	DQ	FLAT:pxsocket_next_send_id_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PxSocketMembers DQ FLAT:??_C@_02GIIHKPLE@ip?$AA@
	DD	05H
	ORG $+4
	DQ	0000000000000214H
	DD	00H
	ORG $+4
	DQ	FLAT:??_C@_0N@MACGLBGI@ip?5attribute?$AA@
	DQ	FLAT:??_C@_04OODOLJMA@host?$AA@
	DD	05H
	ORG $+4
	DQ	0000000000000228H
	DD	00H
	ORG $+4
	DQ	FLAT:??_C@_0P@MCCBLNDF@host?5attribute?$AA@
	DQ	FLAT:??_C@_04LPGMAPLE@port?$AA@
	DD	01H
	ORG $+4
	DQ	0000000000000230H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0P@JEFMDHHI@port?5attribute?$AA@
	DQ	FLAT:??_C@_0M@MPEABHKE@sock_family?$AA@
	DD	01H
	ORG $+4
	DQ	0000000000000068H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BG@OGFLPBML@sock_family?5attribute?$AA@
	DQ	FLAT:??_C@_09POMCLMKJ@sock_type?$AA@
	DD	01H
	ORG $+4
	DQ	000000000000006cH
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BE@GKFOEKAL@sock_type?5attribute?$AA@
	DQ	FLAT:??_C@_0L@LEEOFDBB@sock_proto?$AA@
	DD	01H
	ORG $+4
	DQ	0000000000000070H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BF@PGBPHFFO@sock_proto?5attribute?$AA@
	DQ	FLAT:??_C@_0N@EJAJFIKO@sock_timeout?$AA@
	DD	04H
	ORG $+4
	DQ	0000000000000080H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BH@CNEGKLNK@sock_timeout?5attribute?$AA@
	DQ	0000000000000000H
	ORG $+32
PxSocket_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0O@POBIDKD@_async?4socket?$AA@
	DQ	0000000000000450H
	DQ	0000000000000000H
	DQ	FLAT:pxsocket_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	FLAT:PyObject_GenericSetAttr
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	FLAT:??_C@_0BM@BICFFLHA@Asynchronous?5Socket?5Objects?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PxSocketMethods
	DQ	FLAT:PxSocketMembers
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyType_GenericAlloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+64
_async_print_doc DB 'xxx todo', 0aH, 00H
	ORG $+6
_async_stdout_doc DB 'xxx todo', 0aH, 00H
	ORG $+6
_async_stderr_doc DB 'xxx todo', 0aH, 00H
	ORG $+6
_async_register_doc DB 'register(transport=object, protocol=object) -> No'
	DB	'ne', 0aH, 0aH, 'Register an asynchronous transport object wit'
	DB	'h the given protocol.', 00H
?fmt@?1??_async_register@@9@9 DQ FLAT:??_C@_0M@NCDCDINH@OO?3register?$AA@ ; `_async_register'::`2'::fmt
_async_methods DQ FLAT:??_C@_03HBNNNHNM@map?$AA@
	DQ	FLAT:_async_map
	DD	01H
	ORG $+4
	DQ	FLAT:_async_map_doc
	DQ	FLAT:??_C@_03LGMJKEGG@run?$AA@
	DQ	FLAT:_async_run
	DD	04H
	ORG $+4
	DQ	FLAT:_async_run_doc
	DQ	FLAT:??_C@_04PNOAOIAG@wait?$AA@
	DQ	FLAT:_async_wait
	DD	08H
	ORG $+4
	DQ	FLAT:_async_wait_doc
	DQ	FLAT:??_C@_04POLDLDMI@read?$AA@
	DQ	FLAT:_async_read
	DD	01H
	ORG $+4
	DQ	FLAT:_async_read_doc
	DQ	FLAT:??_C@_04BCIDKIGN@dict?$AA@
	DQ	FLAT:_async_dict
	DD	03H
	ORG $+4
	DQ	FLAT:_async_dict_doc
	DQ	FLAT:??_C@_04DONFEANM@list?$AA@
	DQ	FLAT:_async_list
	DD	03H
	ORG $+4
	DQ	FLAT:_async_list_doc
	DQ	FLAT:??_C@_05IJDJACGD@print?$AA@
	DQ	FLAT:_async_print
	DD	01H
	ORG $+4
	DQ	FLAT:_async_print_doc
	DQ	FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	FLAT:_async_write
	DD	01H
	ORG $+4
	DQ	FLAT:_async_write_doc
	DQ	FLAT:??_C@_05JIFPPKLN@rdtsc?$AA@
	DQ	FLAT:_async_rdtsc
	DD	04H
	ORG $+4
	DQ	FLAT:_async_rdtsc_doc
	DQ	FLAT:??_C@_06DJDOIFHB@stdout?$AA@
	DQ	FLAT:_async_stdout
	DD	08H
	ORG $+4
	DQ	FLAT:_async_stdout_doc
	DQ	FLAT:??_C@_06FJGNEBG@stderr?$AA@
	DQ	FLAT:_async_stderr
	DD	08H
	ORG $+4
	DQ	FLAT:_async_stderr_doc
	DQ	FLAT:??_C@_06EINEPANJ@_close?$AA@
	DQ	FLAT:_async__close
	DD	08H
	ORG $+4
	DQ	FLAT:_async__close_doc
	DQ	FLAT:??_C@_06OAFOBKHE@signal?$AA@
	DQ	FLAT:_async_signal
	DD	08H
	ORG $+4
	DQ	FLAT:_async_signal_doc
	DQ	FLAT:??_C@_06DGDLPBAN@client?$AA@
	DQ	FLAT:_async_client
	DD	03H
	ORG $+4
	DQ	FLAT:_async_client_doc
	DQ	FLAT:??_C@_06HJHJCKIO@server?$AA@
	DQ	FLAT:_async_server
	DD	03H
	ORG $+4
	DQ	FLAT:_async_server_doc
	DQ	FLAT:??_C@_07LFLAEFDO@protect?$AA@
	DQ	FLAT:_async_protect
	DD	08H
	ORG $+4
	DQ	FLAT:_async_protect_doc
	DQ	FLAT:??_C@_07NBHOAOAJ@prewait?$AA@
	DQ	FLAT:_async_prewait
	DD	08H
	ORG $+4
	DQ	FLAT:_async_prewait_doc
	DQ	FLAT:??_C@_08JJIPKIML@_address?$AA@
	DQ	FLAT:_async__address
	DD	08H
	ORG $+4
	DQ	FLAT:_async__address_doc
	DQ	FLAT:??_C@_08GIJFBOPB@_rawfile?$AA@
	DQ	FLAT:_async__rawfile
	DD	08H
	ORG $+4
	DQ	FLAT:_async__rawfile_doc
	DQ	FLAT:??_C@_08DHHIDNEP@register?$AA@
	DQ	FLAT:_async_register
	DD	03H
	ORG $+4
	DQ	FLAT:_async_register_doc
	DQ	FLAT:??_C@_08JHMCJIFL@run_once?$AA@
	DQ	FLAT:_async_run_once
	DD	04H
	ORG $+4
	DQ	FLAT:_async_run_once_doc
	DQ	FLAT:??_C@_09CHNCHKJL@cpu_count?$AA@
	DQ	FLAT:_async_cpu_count
	DD	04H
	ORG $+4
	DQ	FLAT:_async_cpu_count_doc
	DQ	FLAT:??_C@_09LHNJOGML@unprotect?$AA@
	DQ	FLAT:_async_unprotect
	DD	08H
	ORG $+4
	DQ	FLAT:_async_unprotect_doc
	DQ	FLAT:??_C@_09IPOLMLK@protected?$AA@
	DQ	FLAT:_async_protected
	DD	08H
	ORG $+4
	DQ	FLAT:_async_protected_doc
	DQ	FLAT:??_C@_09NFIEOJGK@is_active?$AA@
	DQ	FLAT:_async_is_active
	DD	04H
	ORG $+4
	DQ	FLAT:_async_is_active_doc
	DQ	FLAT:??_C@_09NGDECFMF@submit_io?$AA@
	DQ	FLAT:_async_submit_io
	DD	01H
	ORG $+4
	DQ	FLAT:_async_submit_io_doc
	DQ	FLAT:??_C@_09JFECMODK@read_lock?$AA@
	DQ	FLAT:_async_read_lock
	DD	08H
	ORG $+4
	DQ	FLAT:_async_read_lock_doc
	DQ	FLAT:??_C@_0L@ILCHLJH@_post_open?$AA@
	DQ	FLAT:_async__post_open
	DD	01H
	ORG $+4
	DQ	FLAT:_async__post_open_doc
	DQ	FLAT:??_C@_0L@IMFFLKMC@fileopener?$AA@
	DQ	FLAT:_async_fileopener
	DD	01H
	ORG $+4
	DQ	FLAT:_async_fileopener_doc
	DQ	FLAT:??_C@_0L@NHCCIFLF@filecloser?$AA@
	DQ	FLAT:_async_filecloser
	DD	01H
	ORG $+4
	DQ	FLAT:_async_filecloser_doc
	DQ	FLAT:??_C@_0L@LOEOJHDP@write_lock?$AA@
	DQ	FLAT:_async_write_lock
	DD	08H
	ORG $+4
	DQ	FLAT:_async_write_lock_doc
	DQ	FLAT:??_C@_0M@PDCFAGMJ@submit_work?$AA@
	DQ	FLAT:_async_submit_work
	DD	01H
	ORG $+4
	DQ	FLAT:_async_submit_work_doc
	DQ	FLAT:??_C@_0M@MONDDDPF@submit_wait?$AA@
	DQ	FLAT:_async_submit_wait
	DD	01H
	ORG $+4
	DQ	FLAT:_async_submit_wait_doc
	DQ	FLAT:??_C@_0M@KBMFGJKH@read_unlock?$AA@
	DQ	FLAT:_async_read_unlock
	DD	08H
	ORG $+4
	DQ	FLAT:_async_read_unlock_doc
	DQ	FLAT:??_C@_0N@MOAFFPLO@write_unlock?$AA@
	DQ	FLAT:_async_write_unlock
	DD	08H
	ORG $+4
	DQ	FLAT:_async_write_unlock_doc
	DQ	FLAT:??_C@_0N@BKLNKEHO@is_active_ex?$AA@
	DQ	FLAT:_async_is_active_ex
	DD	04H
	ORG $+4
	DQ	FLAT:_async_is_active_ex_doc
	DQ	FLAT:??_C@_0N@BBPNBAFF@active_count?$AA@
	DQ	FLAT:_async_active_count
	DD	04H
	ORG $+4
	DQ	FLAT:_async_active_count_doc
	DQ	FLAT:??_C@_0N@EONPHPCE@_dbg_address?$AA@
	DQ	FLAT:_async__dbg_address
	DD	08H
	ORG $+4
	DQ	FLAT:_async__dbg_address_doc
	DQ	FLAT:??_C@_0N@PEHCKJKL@submit_timer?$AA@
	DQ	FLAT:_async_submit_timer
	DD	01H
	ORG $+4
	DQ	FLAT:_async_submit_timer_doc
	DQ	FLAT:??_C@_0N@GJCHEFMD@submit_class?$AA@
	DQ	FLAT:_async_submit_class
	DD	08H
	ORG $+4
	DQ	FLAT:_async_submit_class_doc
	DQ	FLAT:??_C@_0O@BIKLHLBM@submit_client?$AA@
	DQ	FLAT:_async_submit_client
	DD	08H
	ORG $+4
	DQ	FLAT:_async_submit_client_doc
	DQ	FLAT:??_C@_0O@FHOJKAJP@submit_server?$AA@
	DQ	FLAT:_async_submit_server
	DD	08H
	ORG $+4
	DQ	FLAT:_async_submit_server_doc
	DQ	FLAT:??_C@_0O@NMLNLIJN@try_read_lock?$AA@
	DQ	FLAT:_async_try_read_lock
	DD	08H
	ORG $+4
	DQ	FLAT:_async_try_read_lock_doc
	DQ	FLAT:??_C@_0P@PGLFFOAC@try_write_lock?$AA@
	DQ	FLAT:_async_try_write_lock
	DD	08H
	ORG $+4
	DQ	FLAT:_async_try_write_lock_doc
	DQ	FLAT:??_C@_0BA@NELHJCPB@submit_write_io?$AA@
	DQ	FLAT:_async_submit_write_io
	DD	01H
	ORG $+4
	DQ	FLAT:_async_submit_write_io_doc
	DQ	FLAT:??_C@_0BA@KFOAPOMJ@signal_and_wait?$AA@
	DQ	FLAT:_async_signal_and_wait
	DD	01H
	ORG $+4
	DQ	FLAT:_async_signal_and_wait_doc
	DQ	FLAT:??_C@_0BA@IAMMEFIL@active_contexts?$AA@
	DQ	FLAT:_async_active_contexts
	DD	04H
	ORG $+4
	DQ	FLAT:_async_active_contexts_doc
	DQ	FLAT:??_C@_0BD@IOGDFFJL@is_parallel_thread?$AA@
	DQ	FLAT:_async_is_parallel_thread
	DD	04H
	ORG $+4
	DQ	FLAT:_async_is_parallel_thread_doc
	DQ	FLAT:??_C@_0BD@FHGOHLMH@persisted_contexts?$AA@
	DQ	FLAT:_async_persisted_contexts
	DD	04H
	ORG $+4
	DQ	FLAT:_async_persisted_contexts_doc
	DQ	FLAT:??_C@_0BG@GDMKOJLI@call_from_main_thread?$AA@
	DQ	FLAT:_async_call_from_main_thread
	DD	01H
	ORG $+4
	DQ	FLAT:_async_call_from_main_thread_doc
	DQ	FLAT:??_C@_0BP@JFECJGF@call_from_main_thread_and_wait?$AA@
	DQ	FLAT:_async_call_from_main_thread_and_wait
	DD	01H
	ORG $+4
	DQ	FLAT:_async_call_from_main_thread_and_wait_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
_asyncmodule DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_06NAHKMOGH@_async?$AA@
	DQ	FLAT:_async_doc
	DQ	ffffffffffffffffH
	DQ	FLAT:_async_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
;	COMDAT ??_C@_05BENFLAID@proto?$AA@
CONST	SEGMENT
??_C@_05BENFLAID@proto?$AA@ DB 'proto', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GPMDFGEJ@type?$AA@
CONST	SEGMENT
??_C@_04GPMDFGEJ@type?$AA@ DB 'type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NBOBHOCP@family?$AA@
CONST	SEGMENT
??_C@_06NBOBHOCP@family?$AA@ DB 'family', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LPGMAPLE@port?$AA@
CONST	SEGMENT
??_C@_04LPGMAPLE@port?$AA@ DB 'port', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OODOLJMA@host?$AA@
CONST	SEGMENT
??_C@_04OODOLJMA@host?$AA@ DB 'host', 00H		; `string'
CONST	ENDS
CONST	SEGMENT
_AcceptEx_GUID DD 0b5367df1H
	DW	0cbacH
	DW	011cfH
	DB	095H
	DB	0caH
	DB	00H
	DB	080H
	DB	05fH
	DB	048H
	DB	0a1H
	DB	092H
_ConnectEx_GUID DD 025a207b9H
	DW	0ddf3H
	DW	04660H
	DB	08eH
	DB	0e9H
	DB	076H
	DB	0e5H
	DB	08cH
	DB	074H
	DB	06H
	DB	03eH
_WSARecvMsg_GUID DD 0f689d7c8H
	DW	06f1fH
	DW	0436bH
	DB	08aH
	DB	053H
	DB	0e5H
	DB	04fH
	DB	0e3H
	DB	051H
	DB	0c3H
	DB	022H
_WSASendMsg_GUID DD 0a441e712H
	DW	0754fH
	DW	043caH
	DB	084H
	DB	0a7H
	DB	0dH
	DB	0eeH
	DB	044H
	DB	0cfH
	DB	060H
	DB	06dH
_DisconnectEx_GUID DD 07fda2e11H
	DW	08630H
	DW	0436fH
	DB	0a0H
	DB	031H
	DB	0f5H
	DB	036H
	DB	0a6H
	DB	0eeH
	DB	0c1H
	DB	057H
_TransmitFile_GUID DD 0b5367df0H
	DW	0cbacH
	DW	011cfH
	DB	095H
	DB	0caH
	DB	00H
	DB	080H
	DB	05fH
	DB	048H
	DB	0a1H
	DB	092H
_TransmitPackets_GUID DD 0d9689da0H
	DW	01f90H
	DW	011d3H
	DB	099H
	DB	071H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	068H
	DB	0c8H
	DB	076H
_GetAcceptExSockaddrs_GUID DD 0b5367df2H
	DW	0cbacH
	DW	011cfH
	DB	095H
	DB	0caH
	DB	00H
	DB	080H
	DB	05fH
	DB	048H
	DB	0a1H
	DB	092H
CONST	ENDS
PUBLIC	Py_popcnt_u32
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\include\pyintrinsics.h
;	COMDAT Py_popcnt_u32
_TEXT	SEGMENT
i$ = 8
Py_popcnt_u32 PROC					; COMDAT

; 50   :     i = i - ((i >> 1 & 0x55555555));

  00000	8b c1		 mov	 eax, ecx
  00002	d1 e8		 shr	 eax, 1
  00004	25 55 55 55 55	 and	 eax, 1431655765		; 55555555H
  00009	2b c8		 sub	 ecx, eax

; 51   :     i = (i & 0x33333333) + ((i >> 2) & 0x33333333);

  0000b	8b c1		 mov	 eax, ecx
  0000d	81 e1 33 33 33
	33		 and	 ecx, 858993459		; 33333333H
  00013	c1 e8 02	 shr	 eax, 2
  00016	25 33 33 33 33	 and	 eax, 858993459		; 33333333H
  0001b	03 c1		 add	 eax, ecx

; 52   :     i = (i + (i >> 4)) & 0x0f0f0f0f;

  0001d	8b c8		 mov	 ecx, eax
  0001f	c1 e9 04	 shr	 ecx, 4
  00022	03 c8		 add	 ecx, eax
  00024	81 e1 0f 0f 0f
	0f		 and	 ecx, 252645135		; 0f0f0f0fH

; 53   :     i = i + (i >> 8);

  0002a	8b c1		 mov	 eax, ecx
  0002c	c1 e8 08	 shr	 eax, 8
  0002f	03 c8		 add	 ecx, eax

; 54   :     i = i + (i >> 16);

  00031	8b c1		 mov	 eax, ecx
  00033	c1 e8 10	 shr	 eax, 16
  00036	03 c1		 add	 eax, ecx

; 55   :     return i & 0x0000003f;

  00038	83 e0 3f	 and	 eax, 63			; 0000003fH

; 56   : }

  0003b	c3		 ret	 0
Py_popcnt_u32 ENDP
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\include\pyparallel.h
_TEXT	ENDS
;	COMDAT _px_bitpos_uint32
_TEXT	SEGMENT
i$ = 8
f$ = 8
_px_bitpos_uint32 PROC					; COMDAT

; 149  :     unsigned long i = 0;
; 150  :     _px_bitscan_fwd(&i, f);

  00000	8b c1		 mov	 eax, ecx
  00002	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0000a	48 0f bc c0	 bsf	 rax, rax

; 151  :     return i;
; 152  : }

  0000e	c3		 ret	 0
_px_bitpos_uint32 ENDP
_TEXT	ENDS
PUBLIC	_InterlockedAdd
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\winnt.h
;	COMDAT _InterlockedAdd
_TEXT	SEGMENT
Addend$ = 8
Value$ = 16
_InterlockedAdd PROC					; COMDAT

; 2540 :     return InterlockedExchangeAdd(Addend, Value) + Value;

  00000	8b c2		 mov	 eax, edx
  00002	f0 0f c1 01	 lock xadd DWORD PTR [rcx], eax
  00006	03 c2		 add	 eax, edx

; 2541 : }

  00008	c3		 ret	 0
_InterlockedAdd ENDP
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel_private.h
_TEXT	ENDS
;	COMDAT Px_GET_ALIGNMENT
_TEXT	SEGMENT
p$ = 8
Px_GET_ALIGNMENT PROC					; COMDAT

; 101  : {

  00000	48 8b d1	 mov	 rdx, rcx

; 102  :     register Px_UINTPTR c = Px_PTR(p);
; 103  :     register unsigned int i = 0;

  00003	33 c9		 xor	 ecx, ecx

; 104  :     if (!p)

  00005	48 85 d2	 test	 rdx, rdx
  00008	75 03		 jne	 SHORT $LN6@Px_GET_ALI

; 105  :         return 0;

  0000a	33 c0		 xor	 eax, eax

; 109  : }

  0000c	c3		 ret	 0
$LN6@Px_GET_ALI:

; 106  :     while (!((c >> i) & 1))

  0000d	f6 c2 01	 test	 dl, 1
  00010	75 0c		 jne	 SHORT $LN1@Px_GET_ALI
$LL2@Px_GET_ALI:

; 107  :         i++;

  00012	ff c1		 inc	 ecx
  00014	48 8b c2	 mov	 rax, rdx
  00017	48 d3 e8	 shr	 rax, cl
  0001a	a8 01		 test	 al, 1
  0001c	74 f4		 je	 SHORT $LL2@Px_GET_ALI
$LN1@Px_GET_ALI:

; 108  :     return (1ULL << i);

  0001e	b8 01 00 00 00	 mov	 eax, 1
  00023	48 d3 e0	 shl	 rax, cl

; 109  : }

  00026	c3		 ret	 0
Px_GET_ALIGNMENT ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT append_object
_TEXT	SEGMENT
list$ = 8
o$ = 16
append_object PROC					; COMDAT

; 271  :     register Object *n;
; 272  :     if (!list->first) {

  00000	48 83 39 00	 cmp	 QWORD PTR [rcx], 0
  00004	75 11		 jne	 SHORT $LN2@append_obj

; 273  :         list->first = o;
; 274  :         list->last = o;
; 275  :         o->prev = NULL;

  00006	33 c0		 xor	 eax, eax
  00008	48 89 11	 mov	 QWORD PTR [rcx], rdx
  0000b	48 89 51 08	 mov	 QWORD PTR [rcx+8], rdx
  0000f	48 89 02	 mov	 QWORD PTR [rdx], rax

; 280  :         list->last = o;
; 281  :     }
; 282  :     o->next = NULL;

  00012	48 89 42 08	 mov	 QWORD PTR [rdx+8], rax

; 283  : }

  00016	c3		 ret	 0
$LN2@append_obj:

; 276  :     } else {
; 277  :         n = list->last;

  00017	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]

; 278  :         n->next = o;

  0001b	48 89 50 08	 mov	 QWORD PTR [rax+8], rdx

; 279  :         o->prev = n;

  0001f	48 89 02	 mov	 QWORD PTR [rdx], rax

; 280  :         list->last = o;
; 281  :     }
; 282  :     o->next = NULL;

  00022	33 c0		 xor	 eax, eax
  00024	48 89 51 08	 mov	 QWORD PTR [rcx+8], rdx
  00028	48 89 42 08	 mov	 QWORD PTR [rdx+8], rax

; 283  : }

  0002c	c3		 ret	 0
append_object ENDP
_TEXT	ENDS
PUBLIC	_read_lock
EXTRN	__imp_AcquireSRWLockShared:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_read_lock DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$_read_lock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_read_lock DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _read_lock
_TEXT	SEGMENT
obj$ = 48
_read_lock PROC						; COMDAT

; 1182 : {

$LN3:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 1183 :     AcquireSRWLockShared((PSRWLOCK)&(obj->srw_lock));

  00009	48 83 c1 28	 add	 rcx, 40			; 00000028H
  0000d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AcquireSRWLockShared

; 1184 :     return obj;

  00013	48 8b c3	 mov	 rax, rbx

; 1185 : }

  00016	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001a	5b		 pop	 rbx
  0001b	c3		 ret	 0
_read_lock ENDP
_TEXT	ENDS
PUBLIC	_read_unlock
EXTRN	__imp_ReleaseSRWLockShared:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_read_unlock DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$_read_unlock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_read_unlock DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _read_unlock
_TEXT	SEGMENT
obj$ = 48
_read_unlock PROC					; COMDAT

; 1191 : {

$LN3:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 1192 :     ReleaseSRWLockShared((PSRWLOCK)&(obj->srw_lock));

  00009	48 83 c1 28	 add	 rcx, 40			; 00000028H
  0000d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseSRWLockShared

; 1193 :     return obj;

  00013	48 8b c3	 mov	 rax, rbx

; 1194 : }

  00016	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001a	5b		 pop	 rbx
  0001b	c3		 ret	 0
_read_unlock ENDP
_TEXT	ENDS
PUBLIC	_try_read_lock
EXTRN	__imp_TryAcquireSRWLockShared:PROC
; Function compile flags: /Ogtpy
;	COMDAT _try_read_lock
_TEXT	SEGMENT
obj$ = 8
_try_read_lock PROC					; COMDAT

; 1201 :     return TryAcquireSRWLockShared((PSRWLOCK)&(obj->srw_lock));

  00000	48 83 c1 28	 add	 rcx, 40			; 00000028H

; 1202 : }

  00004	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_TryAcquireSRWLockShared
_try_read_lock ENDP
_TEXT	ENDS
PUBLIC	_write_lock
EXTRN	__imp_AcquireSRWLockExclusive:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_write_lock DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$_write_lock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_write_lock DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _write_lock
_TEXT	SEGMENT
obj$ = 48
_write_lock PROC					; COMDAT

; 1208 : {

$LN3:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 1209 :     AcquireSRWLockExclusive((PSRWLOCK)&(obj->srw_lock));

  00009	48 83 c1 28	 add	 rcx, 40			; 00000028H
  0000d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AcquireSRWLockExclusive

; 1210 :     return obj;

  00013	48 8b c3	 mov	 rax, rbx

; 1211 : }

  00016	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001a	5b		 pop	 rbx
  0001b	c3		 ret	 0
_write_lock ENDP
_TEXT	ENDS
PUBLIC	_write_unlock
EXTRN	__imp_ReleaseSRWLockExclusive:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_write_unlock DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$_write_unlock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_write_unlock DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _write_unlock
_TEXT	SEGMENT
obj$ = 48
_write_unlock PROC					; COMDAT

; 1217 : {

$LN3:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 1218 :     ReleaseSRWLockExclusive((PSRWLOCK)&(obj->srw_lock));

  00009	48 83 c1 28	 add	 rcx, 40			; 00000028H
  0000d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseSRWLockExclusive

; 1219 :     return obj;

  00013	48 8b c3	 mov	 rax, rbx

; 1220 : }

  00016	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001a	5b		 pop	 rbx
  0001b	c3		 ret	 0
_write_unlock ENDP
_TEXT	ENDS
PUBLIC	_try_write_lock
EXTRN	__imp_TryAcquireSRWLockExclusive:PROC
; Function compile flags: /Ogtpy
;	COMDAT _try_write_lock
_TEXT	SEGMENT
obj$ = 8
_try_write_lock PROC					; COMDAT

; 1227 :     return TryAcquireSRWLockExclusive((PSRWLOCK)&(obj->srw_lock));

  00000	48 83 c1 28	 add	 rcx, 40			; 00000028H

; 1228 : }

  00004	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_TryAcquireSRWLockExclusive
_try_write_lock ENDP
_TEXT	ENDS
EXTRN	_tls_index:DWORD
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
;	COMDAT _PyParallel_IsHeapOverrideActive
_TEXT	SEGMENT
_PyParallel_IsHeapOverrideActive PROC			; COMDAT

; 80   :     return (heap_override != NULL);

  00000	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00009	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0000f	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:heap_override
  00014	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  00018	33 c0		 xor	 eax, eax
  0001a	48 39 04 0a	 cmp	 QWORD PTR [rdx+rcx], rax
  0001e	0f 95 c0	 setne	 al

; 81   : }

  00021	c3		 ret	 0
_PyParallel_IsHeapOverrideActive ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _PyParallel_SetHeapOverride
_TEXT	SEGMENT
heap_handle$ = 8
_PyParallel_SetHeapOverride PROC			; COMDAT

; 87   :     assert(!_PyParallel_IsHeapOverrideActive());
; 88   :     heap_override = heap_handle;

  00000	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  00006	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0000f	41 b8 00 00 00
	00		 mov	 r8d, OFFSET FLAT:heap_override
  00015	48 8b 04 d0	 mov	 rax, QWORD PTR [rax+rdx*8]
  00019	49 89 0c 00	 mov	 QWORD PTR [r8+rax], rcx

; 89   : }

  0001d	c3		 ret	 0
_PyParallel_SetHeapOverride ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _PyParallel_GetHeapOverride
_TEXT	SEGMENT
_PyParallel_GetHeapOverride PROC			; COMDAT

; 95   :     return heap_override;

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00006	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0000f	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:heap_override
  00014	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00018	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]

; 96   : }

  0001c	c3		 ret	 0
_PyParallel_GetHeapOverride ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _PyParallel_RemoveHeapOverride
_TEXT	SEGMENT
_PyParallel_RemoveHeapOverride PROC			; COMDAT

; 103  :     assert(_PyParallel_IsHeapOverrideActive());
; 104  :     heap_override = NULL;

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00006	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0000f	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:heap_override
  00014	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00018	48 c7 04 02 00
	00 00 00	 mov	 QWORD PTR [rdx+rax], 0

; 105  : }

  00020	c3		 ret	 0
_PyParallel_RemoveHeapOverride ENDP
_TEXT	ENDS
EXTRN	_PyThreadState_Current:QWORD
; Function compile flags: /Ogtpy
;	COMDAT get_main_thread_state
_TEXT	SEGMENT
get_main_thread_state PROC				; COMDAT

; 196  :     PyThreadState *tstate;
; 197  : 
; 198  :     tstate = (PyThreadState *)_Py_atomic_load_relaxed(&_PyThreadState_Current);

  00000	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current

; 199  :     if (!tstate)

  00007	48 85 c0	 test	 rax, rax
  0000a	75 1c		 jne	 SHORT $LN4@get_main_t

; 200  :         tstate = TSTATE;

  0000c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00012	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0001b	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:TSTATE
  00020	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]

; 201  :     //assert(tstate);
; 202  :     return tstate;

  00024	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
$LN4@get_main_t:

; 203  : }

  00028	f3 c3		 fatret	 0
get_main_thread_state ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_GetCurrentThreadState
; Function compile flags: /Ogtpy
;	COMDAT _PyParallel_GetCurrentThreadState
_TEXT	SEGMENT
_PyParallel_GetCurrentThreadState PROC			; COMDAT

; 208  :     return get_main_thread_state();
; 209  : }

  00000	e9 00 00 00 00	 jmp	 get_main_thread_state
_PyParallel_GetCurrentThreadState ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@KKBNEAJH@Context?5heap?5snapshots?5exhausted@ ; `string'
PUBLIC	PxContext_HeapSnapshot
EXTRN	Py_FatalError:PROC
EXTRN	__imp_LeaveCriticalSection:PROC
EXTRN	__imp_EnterCriticalSection:PROC
EXTRN	memcpy:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxContext_HeapSnapshot DD imagerel $LN7
	DD	imagerel $LN7+256
	DD	imagerel $unwind$PxContext_HeapSnapshot
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxContext_HeapSnapshot DD 0a1801H
	DD	0b6418H
	DD	0a5418H
	DD	093418H
	DD	0d0143218H
	DD	07010c012H
xdata	ENDS
;	COMDAT ??_C@_0CC@KKBNEAJH@Context?5heap?5snapshots?5exhausted@
CONST	SEGMENT
??_C@_0CC@KKBNEAJH@Context?5heap?5snapshots?5exhausted@ DB 'Context heap '
	DB	'snapshots exhausted!', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PxContext_HeapSnapshot
_TEXT	SEGMENT
i$ = 64
c$ = 64
prev$ = 72
PxContext_HeapSnapshot PROC				; COMDAT

; 281  : {

$LN7:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 282  :     Heap *h = NULL;
; 283  :     Px_UINTPTR bitmap = Px_PTR(c->snapshots_bitmap);

  00018	48 8b 99 20 02
	00 00		 mov	 rbx, QWORD PTR [rcx+544]
  0001f	48 8b f1	 mov	 rsi, rcx
  00022	33 ff		 xor	 edi, edi

; 284  :     unsigned long i = 0;
; 285  : 
; 286  :     assert(!prev || (prev->ctx == c));
; 287  : 
; 288  :     EnterCriticalSection(&c->heap_cs);

  00024	48 81 c1 c8 01
	00 00		 add	 rcx, 456		; 000001c8H
  0002b	48 8b ea	 mov	 rbp, rdx
  0002e	89 7c 24 40	 mov	 DWORD PTR i$[rsp], edi
  00032	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EnterCriticalSection

; 289  :     EnterCriticalSection(&c->snapshots_cs);

  00038	48 8d 8e f8 01
	00 00		 lea	 rcx, QWORD PTR [rsi+504]
  0003f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EnterCriticalSection

; 290  : 
; 291  :     if (_tls_bitscan_fwd(&i, bitmap))

  00045	4c 0f bc db	 bsf	 r11, rbx
  00049	44 89 5c 24 40	 mov	 DWORD PTR i$[rsp], r11d
  0004e	74 23		 je	 SHORT $LN3@PxContext_

; 292  :         h = c->snapshots[i];

  00050	4a 8b bc de 28
	02 00 00	 mov	 rdi, QWORD PTR [rsi+r11*8+552]

; 293  : 
; 294  :     if (h) {

  00058	48 85 ff	 test	 rdi, rdi
  0005b	74 16		 je	 SHORT $LN3@PxContext_

; 295  :         assert(h->bitmap_index == i);
; 296  :         _tls_interlocked_and(&c->snapshots_bitmap, ~(Px_UINTPTR_1 << i));

  0005d	41 8b cb	 mov	 ecx, r11d
  00060	b8 01 00 00 00	 mov	 eax, 1
  00065	48 d3 e0	 shl	 rax, cl
  00068	48 f7 d0	 not	 rax
  0006b	f0 48 21 86 20
	02 00 00	 lock and QWORD PTR [rsi+544], rax
$LN3@PxContext_:

; 297  :     }
; 298  : 
; 299  :     LeaveCriticalSection(&c->snapshots_cs);

  00073	48 8d 8e f8 01
	00 00		 lea	 rcx, QWORD PTR [rsi+504]
  0007a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection

; 300  : 
; 301  :     if (!h)

  00080	48 85 ff	 test	 rdi, rdi
  00083	75 0c		 jne	 SHORT $LN2@PxContext_

; 302  :         Py_FatalError("Context heap snapshots exhausted!");

  00085	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@KKBNEAJH@Context?5heap?5snapshots?5exhausted@
  0008c	e8 00 00 00 00	 call	 Py_FatalError
$LN2@PxContext_:

; 303  : 
; 304  :     memcpy(h, c->h, PxHeap_SNAPSHOT_COPY_SIZE);

  00091	48 8b 96 d0 00
	00 00		 mov	 rdx, QWORD PTR [rsi+208]
  00098	48 8b cf	 mov	 rcx, rdi
  0009b	41 b8 a8 00 00
	00		 mov	 r8d, 168		; 000000a8H
  000a1	e8 00 00 00 00	 call	 memcpy

; 305  :     h->snapshot_id = ++c->snapshot_id;

  000a6	48 ff 86 f0 01
	00 00		 inc	 QWORD PTR [rsi+496]
  000ad	48 8b 96 f0 01
	00 00		 mov	 rdx, QWORD PTR [rsi+496]
  000b4	48 89 97 a8 00
	00 00		 mov	 QWORD PTR [rdi+168], rdx

; 306  :     if (prev) {

  000bb	48 85 ed	 test	 rbp, rbp
  000be	74 0f		 je	 SHORT $LN1@PxContext_

; 307  :         h->sle_prev = prev;

  000c0	48 89 2f	 mov	 QWORD PTR [rdi], rbp

; 308  :         h->sle_next = NULL;

  000c3	48 c7 47 08 00
	00 00 00	 mov	 QWORD PTR [rdi+8], 0

; 309  :         prev->sle_next = h;

  000cb	48 89 7d 08	 mov	 QWORD PTR [rbp+8], rdi
$LN1@PxContext_:

; 310  :     }
; 311  :     h->sle_next = NULL;
; 312  : 
; 313  :     LeaveCriticalSection(&c->heap_cs);

  000cf	48 8d 8e c8 01
	00 00		 lea	 rcx, QWORD PTR [rsi+456]
  000d6	48 c7 47 08 00
	00 00 00	 mov	 QWORD PTR [rdi+8], 0
  000de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection

; 314  : 
; 315  :     return h;
; 316  : }

  000e4	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000e9	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  000ee	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  000f3	48 8b c7	 mov	 rax, rdi
  000f6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000fa	41 5d		 pop	 r13
  000fc	41 5c		 pop	 r12
  000fe	5f		 pop	 rdi
  000ff	c3		 ret	 0
PxContext_HeapSnapshot ENDP
_TEXT	ENDS
PUBLIC	PxContext_RollbackHeap
EXTRN	memset:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxContext_RollbackHeap DD imagerel $LN13
	DD	imagerel $LN13+351
	DD	imagerel $unwind$PxContext_RollbackHeap
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxContext_RollbackHeap DD 0a1801H
	DD	0b6418H
	DD	0a5418H
	DD	093418H
	DD	0d0143218H
	DD	07010c012H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PxContext_RollbackHeap
_TEXT	SEGMENT
i$125623 = 64
c$ = 64
snapshot$ = 72
PxContext_RollbackHeap PROC				; COMDAT

; 320  : {

$LN13:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 321  :     Heap *h1, *h2;
; 322  :     void *tstart, *hstart, *next;
; 323  :     Px_UINTPTR bitmap = 0;
; 324  :     size_t size;
; 325  : 
; 326  :     h1 = *snapshot;

  00018	48 8b 32	 mov	 rsi, QWORD PTR [rdx]
  0001b	48 8b d9	 mov	 rbx, rcx

; 327  :     assert(h1->ctx == c);
; 328  :     assert(ctx == c);
; 329  : 
; 330  :     EnterCriticalSection(&c->heap_cs);

  0001e	48 81 c1 c8 01
	00 00		 add	 rcx, 456		; 000001c8H
  00025	48 8b ea	 mov	 rbp, rdx
  00028	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EnterCriticalSection

; 331  :     EnterCriticalSection(&c->snapshots_cs);

  0002e	48 8d 8b f8 01
	00 00		 lea	 rcx, QWORD PTR [rbx+504]
  00035	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EnterCriticalSection

; 332  : 
; 333  :     h2 = h1->sle_next;

  0003b	48 8b 7e 08	 mov	 rdi, QWORD PTR [rsi+8]

; 334  : 
; 335  :     if (!h2) {

  0003f	48 85 ff	 test	 rdi, rdi
  00042	75 3d		 jne	 SHORT $LN8@PxContext_@2

; 336  :         unsigned long i = 0;
; 337  :         bitmap = Px_PTR(c->snapshots_bitmap);

  00044	48 8b 83 20 02
	00 00		 mov	 rax, QWORD PTR [rbx+544]
  0004b	89 7c 24 40	 mov	 DWORD PTR i$125623[rsp], edi

; 338  :         if (_tls_bitscan_fwd(&i, bitmap))

  0004f	48 0f bc c8	 bsf	 rcx, rax
  00053	89 4c 24 40	 mov	 DWORD PTR i$125623[rsp], ecx
  00057	74 1a		 je	 SHORT $LN6@PxContext_@2

; 339  :             if (i == h1->bitmap_index+1)

  00059	0f be 86 b0 00
	00 00		 movsx	 eax, BYTE PTR [rsi+176]
  00060	ff c0		 inc	 eax
  00062	3b c8		 cmp	 ecx, eax
  00064	75 0d		 jne	 SHORT $LN6@PxContext_@2

; 361  :             goto rollback;
; 362  :     }
; 363  : 
; 364  :     /* xxx todo */
; 365  :     assert(0);
; 366  :     return;
; 367  : 
; 368  : rollback:
; 369  :     /* xxx todo: HeapFree() extra heaps if h1 != h2. */
; 370  : 
; 371  :     next = (h2 ? h2->next : c->h->next);

  00066	48 8b 83 d0 00
	00 00		 mov	 rax, QWORD PTR [rbx+208]
  0006d	4c 8b 40 18	 mov	 r8, QWORD PTR [rax+24]
  00071	eb 5a		 jmp	 SHORT $LN12@PxContext_@2
$LN6@PxContext_@2:

; 340  :                 goto rollback;
; 341  : 
; 342  :         assert(0);
; 343  :         h2 = PxContext_HeapSnapshot(c, h1);

  00073	48 8b d6	 mov	 rdx, rsi
  00076	48 8b cb	 mov	 rcx, rbx
  00079	e8 00 00 00 00	 call	 PxContext_HeapSnapshot
  0007e	48 8b f8	 mov	 rdi, rax
$LN8@PxContext_@2:

; 344  :     }
; 345  : 
; 346  :     assert(h2);
; 347  :     assert(!h2->sle_next);
; 348  :     assert(h2->sle_prev == h1);
; 349  :     assert(h1->sle_next == h2);
; 350  : 
; 351  :     assert(h1->ctx == h2->ctx);
; 352  : 
; 353  :     if (h1->snapshot_id == h2->snapshot_id-1)

  00081	48 8b 8f a8 00
	00 00		 mov	 rcx, QWORD PTR [rdi+168]
  00088	48 ff c9	 dec	 rcx
  0008b	48 39 8e a8 00
	00 00		 cmp	 QWORD PTR [rsi+168], rcx
  00092	74 35		 je	 SHORT $rollback$125627

; 354  :         goto rollback;
; 355  : 
; 356  :     if (_tls_popcnt(c->snapshots_bitmap) == 2)

  00094	f3 48 0f b8 8b
	20 02 00 00	 popcnt	 rcx, QWORD PTR [rbx+544]
  0009d	48 83 f9 02	 cmp	 rcx, 2
  000a1	74 26		 je	 SHORT $rollback$125627

; 357  :         goto rollback;
; 358  : 
; 359  :     if (h1->id == h2->id && h1->id == c->h->id) {

  000a3	8b 46 50	 mov	 eax, DWORD PTR [rsi+80]
  000a6	3b 47 50	 cmp	 eax, DWORD PTR [rdi+80]
  000a9	0f 85 97 00 00
	00		 jne	 $LN2@PxContext_@2
  000af	48 8b 8b d0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+208]
  000b6	3b 41 50	 cmp	 eax, DWORD PTR [rcx+80]
  000b9	0f 85 87 00 00
	00		 jne	 $LN2@PxContext_@2

; 360  :         if (h2->allocated == c->h->allocated)

  000bf	48 8b 41 40	 mov	 rax, QWORD PTR [rcx+64]
  000c3	48 39 47 40	 cmp	 QWORD PTR [rdi+64], rax
  000c7	75 7d		 jne	 SHORT $LN2@PxContext_@2
$rollback$125627:

; 361  :             goto rollback;
; 362  :     }
; 363  : 
; 364  :     /* xxx todo */
; 365  :     assert(0);
; 366  :     return;
; 367  : 
; 368  : rollback:
; 369  :     /* xxx todo: HeapFree() extra heaps if h1 != h2. */
; 370  : 
; 371  :     next = (h2 ? h2->next : c->h->next);

  000c9	4c 8b 47 18	 mov	 r8, QWORD PTR [rdi+24]
$LN12@PxContext_@2:

; 372  :     size = _Py_PTR(next) - _Py_PTR(h1->next);

  000cd	48 8b 4e 18	 mov	 rcx, QWORD PTR [rsi+24]

; 373  :     assert(size > 0 && size < Px_LARGE_PAGE_SIZE);
; 374  :     memset(h1->next, 0, size);

  000d1	33 d2		 xor	 edx, edx
  000d3	4c 2b c1	 sub	 r8, rcx
  000d6	e8 00 00 00 00	 call	 memset

; 375  : 
; 376  :     /* skip sle_prev and sle_next */
; 377  :     tstart = _Py_CAST_FWD(c->h, void *, Heap, base);

  000db	4c 8b 83 d0 00
	00 00		 mov	 r8, QWORD PTR [rbx+208]

; 378  :     hstart = _Py_CAST_FWD(h1,   void *, Heap, base);

  000e2	48 8d 56 10	 lea	 rdx, QWORD PTR [rsi+16]
  000e6	49 8d 48 10	 lea	 rcx, QWORD PTR [r8+16]

; 379  :     size = PxHeap_SNAPSHOT_COPY_SIZE - _Py_PTR_SUB(tstart, c->h);
; 380  :     memcpy(tstart, hstart, size);

  000ea	4c 2b c1	 sub	 r8, rcx
  000ed	49 81 c0 a8 00
	00 00		 add	 r8, 168			; 000000a8H
  000f4	e8 00 00 00 00	 call	 memcpy

; 381  : 
; 382  :     bitmap = (Px_UINTPTR_1 << h1->bitmap_index);

  000f9	0f b6 8e b0 00
	00 00		 movzx	 ecx, BYTE PTR [rsi+176]
  00100	ba 01 00 00 00	 mov	 edx, 1
  00105	8b c2		 mov	 eax, edx
  00107	48 d3 e0	 shl	 rax, cl

; 383  :     if (h2)

  0010a	48 85 ff	 test	 rdi, rdi
  0010d	74 0d		 je	 SHORT $LN1@PxContext_@2

; 384  :         bitmap |= (Px_UINTPTR_1 << h2->bitmap_index);

  0010f	0f b6 8f b0 00
	00 00		 movzx	 ecx, BYTE PTR [rdi+176]
  00116	48 d3 e2	 shl	 rdx, cl
  00119	48 0b c2	 or	 rax, rdx
$LN1@PxContext_@2:

; 385  : 
; 386  :     _tls_interlocked_or(&c->snapshots_bitmap, bitmap);

  0011c	f0 48 09 83 20
	02 00 00	 lock or QWORD PTR [rbx+544], rax

; 387  : 
; 388  :     *snapshot = NULL;
; 389  : 
; 390  :     LeaveCriticalSection(&c->snapshots_cs);

  00124	48 8d 8b f8 01
	00 00		 lea	 rcx, QWORD PTR [rbx+504]
  0012b	48 c7 45 00 00
	00 00 00	 mov	 QWORD PTR [rbp], 0
  00133	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection

; 391  :     LeaveCriticalSection(&c->heap_cs);

  00139	48 8d 8b c8 01
	00 00		 lea	 rcx, QWORD PTR [rbx+456]
  00140	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection
$LN2@PxContext_@2:

; 392  : 
; 393  :     return;
; 394  : }

  00146	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  0014b	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  00150	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  00155	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00159	41 5d		 pop	 r13
  0015b	41 5c		 pop	 r12
  0015d	5f		 pop	 rdi
  0015e	c3		 ret	 0
PxContext_RollbackHeap ENDP
_TEXT	ENDS
EXTRN	PyUnicode_AsUTF8AndSize:PROC
EXTRN	PyType_IsSubtype:PROC
EXTRN	PyByteArray_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject2WSABUF DD imagerel PyObject2WSABUF
	DD	imagerel PyObject2WSABUF+189
	DD	imagerel $unwind$PyObject2WSABUF
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject2WSABUF DD 040a01H
	DD	07340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyObject2WSABUF
_TEXT	SEGMENT
nbytes$125689 = 48
o$ = 48
w$ = 56
PyObject2WSABUF PROC					; COMDAT

; 402  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f9	 mov	 rdi, rcx

; 403  :     int result = 1;
; 404  :     if (PyBytes_Check(o)) {

  0000d	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  00011	48 8b da	 mov	 rbx, rdx
  00014	f7 81 00 01 00
	00 00 00 00 08	 test	 DWORD PTR [rcx+256], 134217728 ; 08000000H
  0001e	74 1f		 je	 SHORT $LN9@PyObject2W

; 405  :         w->len = (ULONG)((PyVarObject *)o)->ob_size;

  00020	44 8b 47 60	 mov	 r8d, DWORD PTR [rdi+96]

; 406  :         w->buf = (char *)((PyBytesObject *)o)->ob_sval;

  00024	48 8d 4f 78	 lea	 rcx, QWORD PTR [rdi+120]

; 417  :         } else
; 418  :             result = 0;
; 419  :     } else
; 420  :         result = 0;
; 421  : 
; 422  :     return result;

  00028	b8 01 00 00 00	 mov	 eax, 1
  0002d	44 89 02	 mov	 DWORD PTR [rdx], r8d
  00030	48 89 4a 08	 mov	 QWORD PTR [rdx+8], rcx

; 423  : }

  00034	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00039	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003d	5f		 pop	 rdi
  0003e	c3		 ret	 0
$LN9@PyObject2W:

; 407  :     } else if (PyByteArray_Check(o)) {

  0003f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyByteArray_Type
  00046	48 3b ca	 cmp	 rcx, rdx
  00049	74 52		 je	 SHORT $LN6@PyObject2W
  0004b	e8 00 00 00 00	 call	 PyType_IsSubtype
  00050	85 c0		 test	 eax, eax
  00052	75 49		 jne	 SHORT $LN6@PyObject2W

; 410  :     } else if (PyUnicode_Check(o)) {

  00054	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00058	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  00062	74 2c		 je	 SHORT $LN3@PyObject2W

; 411  :         Py_ssize_t nbytes;
; 412  :         char *buf = PyUnicode_AsUTF8AndSize(o, &nbytes);

  00064	48 8d 54 24 30	 lea	 rdx, QWORD PTR nbytes$125689[rsp]
  00069	48 8b cf	 mov	 rcx, rdi
  0006c	e8 00 00 00 00	 call	 PyUnicode_AsUTF8AndSize

; 413  :         if (buf) {

  00071	48 85 c0	 test	 rax, rax
  00074	74 1a		 je	 SHORT $LN3@PyObject2W

; 414  :             w->buf = buf;

  00076	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax

; 415  :             /* xxx todo: range check */
; 416  :             w->len = (DWORD)nbytes;

  0007a	8b 44 24 30	 mov	 eax, DWORD PTR nbytes$125689[rsp]
  0007e	89 03		 mov	 DWORD PTR [rbx], eax

; 417  :         } else
; 418  :             result = 0;
; 419  :     } else
; 420  :         result = 0;
; 421  : 
; 422  :     return result;

  00080	b8 01 00 00 00	 mov	 eax, 1

; 423  : }

  00085	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0008a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008e	5f		 pop	 rdi
  0008f	c3		 ret	 0
$LN3@PyObject2W:

; 417  :         } else
; 418  :             result = 0;
; 419  :     } else
; 420  :         result = 0;
; 421  : 
; 422  :     return result;

  00090	33 c0		 xor	 eax, eax

; 423  : }

  00092	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00097	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009b	5f		 pop	 rdi
  0009c	c3		 ret	 0
$LN6@PyObject2W:

; 408  :         w->len = (ULONG)((PyByteArrayObject *)o)->ob_alloc;

  0009d	8b 47 78	 mov	 eax, DWORD PTR [rdi+120]
  000a0	89 03		 mov	 DWORD PTR [rbx], eax

; 409  :         w->buf = ((PyByteArrayObject *)o)->ob_bytes;

  000a2	48 8b 87 80 00
	00 00		 mov	 rax, QWORD PTR [rdi+128]
  000a9	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax

; 423  : }

  000ad	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000b2	b8 01 00 00 00	 mov	 eax, 1
  000b7	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000bb	5f		 pop	 rdi
  000bc	c3		 ret	 0
PyObject2WSABUF ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@DJEDNLFK@WSACloseEvent?$CI?$CJ?5?9?$DO?5other?$AA@ ; `string'
PUBLIC	??_C@_0CC@HMPLBGBI@WSACloseEvent?$CI?$CJ?5?9?$DO?5INVALID_HANDL@ ; `string'
PUBLIC	_RESET_OVERLAPPED
EXTRN	__imp_WSAGetLastError:PROC
EXTRN	__imp_WSACloseEvent:PROC
EXTRN	memcmp:PROC
_BSS	SEGMENT
_NULL_OVERLAPPED DB 020H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_RESET_OVERLAPPED DD imagerel $LN9
	DD	imagerel $LN9+103
	DD	imagerel $unwind$_RESET_OVERLAPPED
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_RESET_OVERLAPPED DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0BJ@DJEDNLFK@WSACloseEvent?$CI?$CJ?5?9?$DO?5other?$AA@
CONST	SEGMENT
??_C@_0BJ@DJEDNLFK@WSACloseEvent?$CI?$CJ?5?9?$DO?5other?$AA@ DB 'WSAClose'
	DB	'Event() -> other', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@HMPLBGBI@WSACloseEvent?$CI?$CJ?5?9?$DO?5INVALID_HANDL@
CONST	SEGMENT
??_C@_0CC@HMPLBGBI@WSACloseEvent?$CI?$CJ?5?9?$DO?5INVALID_HANDL@ DB 'WSAC'
	DB	'loseEvent() -> INVALID_HANDLE', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _RESET_OVERLAPPED
_TEXT	SEGMENT
ol$ = 48
_RESET_OVERLAPPED PROC					; COMDAT

; 515  : {

$LN9:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 516  :     if (!IS_OVERLAPPED_NULL(ol)) {

  00006	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_NULL_OVERLAPPED
  0000d	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  00013	48 8b d9	 mov	 rbx, rcx
  00016	e8 00 00 00 00	 call	 memcmp
  0001b	85 c0		 test	 eax, eax
  0001d	74 42		 je	 SHORT $LN5@RESET_OVER

; 517  :         if (ol->hEvent) {

  0001f	48 8b 4b 18	 mov	 rcx, QWORD PTR [rbx+24]
  00023	48 85 c9	 test	 rcx, rcx
  00026	74 28		 je	 SHORT $LN1@RESET_OVER

; 518  :             if (!WSACloseEvent(ol->hEvent)) {

  00028	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSACloseEvent
  0002e	85 c0		 test	 eax, eax
  00030	75 1e		 jne	 SHORT $LN1@RESET_OVER

; 519  :                 int last_error = WSAGetLastError();

  00032	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError

; 520  :                 if (last_error == WSA_INVALID_HANDLE)
; 521  :                     Py_FatalError("WSACloseEvent() -> INVALID_HANDLE");

  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@HMPLBGBI@WSACloseEvent?$CI?$CJ?5?9?$DO?5INVALID_HANDL@
  0003f	83 f8 06	 cmp	 eax, 6
  00042	74 07		 je	 SHORT $LN8@RESET_OVER

; 522  :                 else
; 523  :                     Py_FatalError("WSACloseEvent() -> other");

  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@DJEDNLFK@WSACloseEvent?$CI?$CJ?5?9?$DO?5other?$AA@
$LN8@RESET_OVER:
  0004b	e8 00 00 00 00	 call	 Py_FatalError
$LN1@RESET_OVER:

; 524  :             }
; 525  :         }
; 526  :         memset(ol, 0, sizeof(OVERLAPPED));

  00050	33 c0		 xor	 eax, eax
  00052	48 89 03	 mov	 QWORD PTR [rbx], rax
  00055	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax
  00059	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax
  0005d	48 89 43 18	 mov	 QWORD PTR [rbx+24], rax
$LN5@RESET_OVER:

; 527  :     }
; 528  : }

  00061	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00065	5b		 pop	 rbx
  00066	c3		 ret	 0
_RESET_OVERLAPPED ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_DisassociateCurrentThreadFromCallback
EXTRN	__imp_DisassociateCurrentThreadFromCallback:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_DisassociateCurrentThreadFromCallback DD imagerel $LN4
	DD	imagerel $LN4+69
	DD	imagerel $unwind$_PyParallel_DisassociateCurrentThreadFromCallback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_DisassociateCurrentThreadFromCallback DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyParallel_DisassociateCurrentThreadFromCallback
_TEXT	SEGMENT
_PyParallel_DisassociateCurrentThreadFromCallback PROC	; COMDAT

; 541  : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 542  :     Context *c = ctx;

  00006	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0000c	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00015	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:ctx
  0001a	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  0001e	48 8b 1c 03	 mov	 rbx, QWORD PTR [rbx+rax]

; 543  :     if (Px_CTX_IS_DISASSOCIATED(c))

  00022	f6 83 f8 00 00
	00 10		 test	 BYTE PTR [rbx+248], 16
  00029	75 14		 jne	 SHORT $LN2@PyParallel

; 544  :         return;
; 545  :     DisassociateCurrentThreadFromCallback((PTP_CALLBACK_INSTANCE)c->instance);

  0002b	48 8b 8b f0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+240]
  00032	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DisassociateCurrentThreadFromCallback

; 546  :     Px_CTXFLAGS(c) |= Px_CTXFLAGS_DISASSOCIATED;

  00038	83 8b f8 00 00
	00 10		 or	 DWORD PTR [rbx+248], 16
$LN2@PyParallel:

; 547  : }

  0003f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00043	5b		 pop	 rbx
  00044	c3		 ret	 0
_PyParallel_DisassociateCurrentThreadFromCallback ENDP
_TEXT	ENDS
PUBLIC	_Py_PXCTX
; Function compile flags: /Ogtpy
;	COMDAT _Py_PXCTX
_TEXT	SEGMENT
_Py_PXCTX PROC						; COMDAT

; 594  :     int active = (int)(Py_MainThreadId != _Py_get_current_thread_id());

  00000	65 8b 0c 25 48
	00 00 00	 mov	 ecx, DWORD PTR gs:72
  00008	33 c0		 xor	 eax, eax
  0000a	39 0d 00 00 00
	00		 cmp	 DWORD PTR Py_MainThreadId, ecx
  00010	0f 95 c0	 setne	 al

; 595  :     assert(Py_MainThreadId > 0);
; 596  :     assert(Py_MainProcessId != -1);
; 597  :     return active;
; 598  : }

  00013	c3		 ret	 0
_Py_PXCTX ENDP
_TEXT	ENDS
PUBLIC	_protected
EXTRN	_PyObject_GetDictPtr:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_protected DD imagerel $LN7
	DD	imagerel $LN7+62
	DD	imagerel $unwind$_protected
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_protected DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _protected
_TEXT	SEGMENT
obj$ = 48
_protected PROC						; COMDAT

; 631  : {

$LN7:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 632  :     PyObject **dp;
; 633  :     dp = _PyObject_GetDictPtr(obj);

  00009	e8 00 00 00 00	 call	 _PyObject_GetDictPtr

; 634  :     return (!dp ? Px_ISPROTECTED(obj) :
; 635  :                   Px_ISPROTECTED(obj) && Px_ISPROTECTED(*dp));

  0000e	48 85 c0	 test	 rax, rax
  00011	75 0c		 jne	 SHORT $LN5@protected
  00013	8b 43 20	 mov	 eax, DWORD PTR [rbx+32]
  00016	83 e0 04	 and	 eax, 4

; 636  : }

  00019	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001d	5b		 pop	 rbx
  0001e	c3		 ret	 0
$LN5@protected:

; 634  :     return (!dp ? Px_ISPROTECTED(obj) :
; 635  :                   Px_ISPROTECTED(obj) && Px_ISPROTECTED(*dp));

  0001f	f6 43 20 04	 test	 BYTE PTR [rbx+32], 4
  00023	74 11		 je	 SHORT $LN3@protected
  00025	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00028	f6 40 20 04	 test	 BYTE PTR [rax+32], 4
  0002c	74 08		 je	 SHORT $LN3@protected
  0002e	b0 01		 mov	 al, 1

; 636  : }

  00030	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00034	5b		 pop	 rbx
  00035	c3		 ret	 0
$LN3@protected:

; 634  :     return (!dp ? Px_ISPROTECTED(obj) :
; 635  :                   Px_ISPROTECTED(obj) && Px_ISPROTECTED(*dp));

  00036	32 c0		 xor	 al, al

; 636  : }

  00038	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003c	5b		 pop	 rbx
  0003d	c3		 ret	 0
_protected ENDP
_TEXT	ENDS
PUBLIC	_unprotect
;	COMDAT pdata
pdata	SEGMENT
$pdata$_unprotect DD imagerel $LN5
	DD	imagerel $LN5+96
	DD	imagerel $unwind$_unprotect
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_unprotect DD 040a01H
	DD	06340aH
	DD	06006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _unprotect
_TEXT	SEGMENT
obj$ = 48
_unprotect PROC						; COMDAT

; 648  : {

$LN5:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b d9	 mov	 rbx, rcx

; 649  :     PyObject **dp;
; 650  :     if (_protected(obj)) {

  0000d	e8 00 00 00 00	 call	 _protected
  00012	be fb ff ff ff	 mov	 esi, -5			; fffffffbH
  00017	84 c0		 test	 al, al
  00019	74 0c		 je	 SHORT $LN2@unprotect

; 651  :         Py_PXFLAGS(obj) &= ~Py_PXFLAGS_RWLOCK;

  0001b	48 21 73 20	 and	 QWORD PTR [rbx+32], rsi

; 652  :         obj->srw_lock = NULL;

  0001f	48 c7 43 28 00
	00 00 00	 mov	 QWORD PTR [rbx+40], 0
$LN2@unprotect:

; 653  :     }
; 654  :     dp = _PyObject_GetDictPtr(obj);

  00027	48 8b cb	 mov	 rcx, rbx
  0002a	e8 00 00 00 00	 call	 _PyObject_GetDictPtr
  0002f	48 8b d8	 mov	 rbx, rax

; 655  :     if (dp && _protected(*dp)) {

  00032	48 85 c0	 test	 rax, rax
  00035	74 1e		 je	 SHORT $LN1@unprotect
  00037	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0003a	e8 00 00 00 00	 call	 _protected
  0003f	84 c0		 test	 al, al
  00041	74 12		 je	 SHORT $LN1@unprotect

; 656  :         (*dp)->px_flags &= ~Py_PXFLAGS_RWLOCK;

  00043	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00046	48 21 71 20	 and	 QWORD PTR [rcx+32], rsi

; 657  :         (*dp)->srw_lock = NULL;

  0004a	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0004d	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0
$LN1@unprotect:

; 658  :     }
; 659  : }

  00055	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005e	5e		 pop	 rsi
  0005f	c3		 ret	 0
_unprotect ENDP
_TEXT	ENDS
PUBLIC	_Px_TryPersist
EXTRN	PyErr_SetFromWindowsErr:PROC
EXTRN	__imp_InitOnceComplete:PROC
EXTRN	__imp_InitOnceBeginInitialize:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Px_TryPersist DD imagerel $LN12
	DD	imagerel $LN12+38
	DD	imagerel $unwind$_Px_TryPersist
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_Px_TryPersist DD imagerel $LN12+38
	DD	imagerel $LN12+175
	DD	imagerel $chain$1$_Px_TryPersist
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$_Px_TryPersist DD imagerel $LN12+175
	DD	imagerel $LN12+196
	DD	imagerel $chain$3$_Px_TryPersist
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$_Px_TryPersist DD imagerel $LN12+196
	DD	imagerel $LN12+207
	DD	imagerel $chain$4$_Px_TryPersist
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$_Px_TryPersist DD 021H
	DD	imagerel $LN12
	DD	imagerel $LN12+38
	DD	imagerel $unwind$_Px_TryPersist
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$_Px_TryPersist DD 040021H
	DD	087400H
	DD	076400H
	DD	imagerel $LN12
	DD	imagerel $LN12+38
	DD	imagerel $unwind$_Px_TryPersist
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_Px_TryPersist DD 040a21H
	DD	08740aH
	DD	076405H
	DD	imagerel $LN12
	DD	imagerel $LN12+38
	DD	imagerel $unwind$_Px_TryPersist
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Px_TryPersist DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _Px_TryPersist
_TEXT	SEGMENT
pending$ = 48
o$ = 48
_Px_TryPersist PROC					; COMDAT

; 739  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 740  :     BOOL pending;
; 741  :     Context  *c;
; 742  :     PxObject *x;
; 743  :     if (!o || (!(Px_ISPX(o))) || Px_PERSISTED(o))

  00009	48 85 c9	 test	 rcx, rcx
  0000c	0f 84 b2 00 00
	00		 je	 $LN5@Px_TryPers
  00012	48 8b 41 20	 mov	 rax, QWORD PTR [rcx+32]
  00016	a8 02		 test	 al, 2
  00018	0f 84 a6 00 00
	00		 je	 $LN5@Px_TryPers
  0001e	a8 20		 test	 al, 32			; 00000020H
  00020	0f 85 9e 00 00
	00		 jne	 $LN5@Px_TryPers

; 745  : 
; 746  :     x = Py_ASPX(o);

  00026	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  0002b	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  00030	48 8b 79 08	 mov	 rdi, QWORD PTR [rcx+8]

; 747  :     if (!InitOnceBeginInitialize(&(x->persist), 0, &pending, NULL)) {

  00034	4c 8d 44 24 30	 lea	 r8, QWORD PTR pending$[rsp]
  00039	48 8d 4f 20	 lea	 rcx, QWORD PTR [rdi+32]
  0003d	45 33 c9	 xor	 r9d, r9d
  00040	33 d2		 xor	 edx, edx
  00042	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitOnceBeginInitialize
  00048	85 c0		 test	 eax, eax

; 748  :         PyErr_SetFromWindowsErr(0);
; 749  :         return 0;

  0004a	74 4a		 je	 SHORT $LN11@Px_TryPers

; 750  :     }
; 751  :     if (!pending)

  0004c	83 7c 24 30 00	 cmp	 DWORD PTR pending$[rsp], 0

; 752  :         return 1;

  00051	74 5c		 je	 SHORT $LN1@Px_TryPers

; 753  : 
; 754  :     assert(!(Px_PERSISTED(o)));
; 755  : 
; 756  :     c = x->ctx;

  00053	48 8b 17	 mov	 rdx, QWORD PTR [rdi]

; 757  :     if (!Px_CTX_IS_PERSISTED(c))

  00056	8b 82 f8 00 00
	00		 mov	 eax, DWORD PTR [rdx+248]
  0005c	a8 01		 test	 al, 1
  0005e	75 09		 jne	 SHORT $LN2@Px_TryPers

; 758  :         Px_CTXFLAGS(c) |= Px_CTXFLAGS_IS_PERSISTED;

  00060	83 c8 01	 or	 eax, 1
  00063	89 82 f8 00 00
	00		 mov	 DWORD PTR [rdx+248], eax
$LN2@Px_TryPers:

; 759  : 
; 760  :     c->persisted_count++;

  00069	ff 82 10 38 00
	00		 inc	 DWORD PTR [rdx+14352]

; 761  : 
; 762  :     Py_PXFLAGS(o) |= Py_PXFLAGS_PERSISTED;

  0006f	48 83 4b 20 20	 or	 QWORD PTR [rbx+32], 32	; 00000020H

; 763  :     Py_REFCNT(o) = 1;

  00074	48 c7 43 50 01
	00 00 00	 mov	 QWORD PTR [rbx+80], 1

; 764  : 
; 765  :     Px_CTXFLAGS(c) |= Px_CTXFLAGS_IS_PERSISTED;

  0007c	83 8a f8 00 00
	00 01		 or	 DWORD PTR [rdx+248], 1

; 766  : 
; 767  :     if (!InitOnceComplete(&(x->persist), 0, NULL)) {

  00083	48 8d 4f 20	 lea	 rcx, QWORD PTR [rdi+32]
  00087	45 33 c0	 xor	 r8d, r8d
  0008a	33 d2		 xor	 edx, edx
  0008c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitOnceComplete
  00092	85 c0		 test	 eax, eax
  00094	75 19		 jne	 SHORT $LN1@Px_TryPers
$LN11@Px_TryPers:

; 768  :         PyErr_SetFromWindowsErr(0);

  00096	33 c9		 xor	 ecx, ecx
  00098	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  0009d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000a2	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 769  :         return 0;

  000a7	33 c0		 xor	 eax, eax

; 773  : }

  000a9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ad	5b		 pop	 rbx
  000ae	c3		 ret	 0
$LN1@Px_TryPers:
  000af	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000b4	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 770  :     }
; 771  : 
; 772  :     return 1;

  000b9	b8 01 00 00 00	 mov	 eax, 1

; 773  : }

  000be	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c2	5b		 pop	 rbx
  000c3	c3		 ret	 0
$LN5@Px_TryPers:

; 744  :         return 1;

  000c4	b8 01 00 00 00	 mov	 eax, 1

; 773  : }

  000c9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000cd	5b		 pop	 rbx
  000ce	c3		 ret	 0
_Px_TryPersist ENDP
_TEXT	ENDS
PUBLIC	_PyObject_GenericGetAttr
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel_private.h
pdata	SEGMENT
$pdata$_PyObject_GenericGetAttr DD imagerel $LN13
	DD	imagerel $LN13+97
	DD	imagerel $unwind$_PyObject_GenericGetAttr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_GenericGetAttr DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT _PyObject_GenericGetAttr
_TEXT	SEGMENT
o$ = 48
n$ = 56
_PyObject_GenericGetAttr PROC				; COMDAT

; 813  : {

$LN13:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 814  :     PyTypeObject *tp;
; 815  :     PyObject *result;
; 816  :     assert(Py_ORIG_TYPE(o));
; 817  : 
; 818  :     _Px_READ_LOCK(o);

  0000a	f6 41 20 04	 test	 BYTE PTR [rcx+32], 4
  0000e	48 8b fa	 mov	 rdi, rdx
  00011	48 8b d9	 mov	 rbx, rcx
  00014	74 0a		 je	 SHORT $LN7@PyObject_G
  00016	48 83 c1 28	 add	 rcx, 40			; 00000028H
  0001a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AcquireSRWLockShared
$LN7@PyObject_G:

; 819  :     tp = Py_ORIG_TYPE_CAST(o);

  00020	48 8b 43 38	 mov	 rax, QWORD PTR [rbx+56]

; 820  :     if (tp->tp_getattro)
; 821  :         result = (*tp->tp_getattro)(o, n);

  00024	48 8b d7	 mov	 rdx, rdi
  00027	48 8b cb	 mov	 rcx, rbx
  0002a	4c 8b 80 e8 00
	00 00		 mov	 r8, QWORD PTR [rax+232]
  00031	4d 85 c0	 test	 r8, r8
  00034	74 05		 je	 SHORT $LN3@PyObject_G
  00036	41 ff d0	 call	 r8

; 822  :     else

  00039	eb 05		 jmp	 SHORT $LN12@PyObject_G
$LN3@PyObject_G:

; 823  :         result = PyObject_GenericGetAttr(o, n);

  0003b	e8 00 00 00 00	 call	 PyObject_GenericGetAttr
$LN12@PyObject_G:

; 824  :     _Px_READ_UNLOCK(o);

  00040	f6 43 20 04	 test	 BYTE PTR [rbx+32], 4
  00044	48 8b f8	 mov	 rdi, rax
  00047	74 0a		 je	 SHORT $LN11@PyObject_G
  00049	48 8d 4b 28	 lea	 rcx, QWORD PTR [rbx+40]
  0004d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseSRWLockShared
$LN11@PyObject_G:

; 825  : 
; 826  :     return result;

  00053	48 8b c7	 mov	 rax, rdi

; 827  : }

  00056	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005f	5f		 pop	 rdi
  00060	c3		 ret	 0
_PyObject_GenericGetAttr ENDP
_TEXT	ENDS
PUBLIC	_Px_mp_length
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel_private.h
pdata	SEGMENT
$pdata$_Px_mp_length DD imagerel $LN10
	DD	imagerel $LN10+78
	DD	imagerel $unwind$_Px_mp_length
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Px_mp_length DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT _Px_mp_length
_TEXT	SEGMENT
o$ = 48
_Px_mp_length PROC					; COMDAT

; 882  : {

$LN10:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 883  :     Py_ssize_t result;
; 884  :     assert(Py_ORIG_TYPE(o));
; 885  :     _Px_READ_LOCK(o);

  0000a	f6 41 20 04	 test	 BYTE PTR [rcx+32], 4
  0000e	48 8b d9	 mov	 rbx, rcx
  00011	74 0a		 je	 SHORT $LN5@Px_mp_leng
  00013	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00017	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AcquireSRWLockShared
$LN5@Px_mp_leng:

; 886  :     result = Py_ORIG_TYPE_CAST(o)->tp_as_mapping->mp_length(o);

  0001d	48 8b 43 38	 mov	 rax, QWORD PTR [rbx+56]
  00021	48 8b cb	 mov	 rcx, rbx
  00024	48 8b 90 c8 00
	00 00		 mov	 rdx, QWORD PTR [rax+200]
  0002b	ff 12		 call	 QWORD PTR [rdx]

; 887  :     _Px_READ_UNLOCK(o);

  0002d	f6 43 20 04	 test	 BYTE PTR [rbx+32], 4
  00031	48 8b f8	 mov	 rdi, rax
  00034	74 0d		 je	 SHORT $LN7@Px_mp_leng
  00036	48 8d 4b 28	 lea	 rcx, QWORD PTR [rbx+40]
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseSRWLockShared

; 888  :     return result;

  00040	48 8b c7	 mov	 rax, rdi
$LN7@Px_mp_leng:

; 889  : }

  00043	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00048	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004c	5f		 pop	 rdi
  0004d	c3		 ret	 0
_Px_mp_length ENDP
_TEXT	ENDS
PUBLIC	_Px_mp_subcript
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel_private.h
pdata	SEGMENT
$pdata$_Px_mp_subcript DD imagerel $LN10
	DD	imagerel $LN10+86
	DD	imagerel $unwind$_Px_mp_subcript
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Px_mp_subcript DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT _Px_mp_subcript
_TEXT	SEGMENT
o$ = 48
k$ = 56
_Px_mp_subcript PROC					; COMDAT

; 893  : {

$LN10:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 894  :     PyObject *result;
; 895  :     assert(Py_ORIG_TYPE(o));
; 896  :     _Px_READ_LOCK(o);

  0000a	f6 41 20 04	 test	 BYTE PTR [rcx+32], 4
  0000e	48 8b fa	 mov	 rdi, rdx
  00011	48 8b d9	 mov	 rbx, rcx
  00014	74 0a		 je	 SHORT $LN5@Px_mp_subc
  00016	48 83 c1 28	 add	 rcx, 40			; 00000028H
  0001a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AcquireSRWLockShared
$LN5@Px_mp_subc:

; 897  :     result = Py_ORIG_TYPE_CAST(o)->tp_as_mapping->mp_subscript(o, k);

  00020	48 8b 43 38	 mov	 rax, QWORD PTR [rbx+56]
  00024	48 8b d7	 mov	 rdx, rdi
  00027	48 8b cb	 mov	 rcx, rbx
  0002a	4c 8b 80 c8 00
	00 00		 mov	 r8, QWORD PTR [rax+200]
  00031	41 ff 50 08	 call	 QWORD PTR [r8+8]

; 898  :     _Px_READ_UNLOCK(o);

  00035	f6 43 20 04	 test	 BYTE PTR [rbx+32], 4
  00039	48 8b f8	 mov	 rdi, rax
  0003c	74 0d		 je	 SHORT $LN7@Px_mp_subc
  0003e	48 8d 4b 28	 lea	 rcx, QWORD PTR [rbx+40]
  00042	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseSRWLockShared

; 899  :     return result;

  00048	48 8b c7	 mov	 rax, rdi
$LN7@Px_mp_subc:

; 900  : }

  0004b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00050	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00054	5f		 pop	 rdi
  00055	c3		 ret	 0
_Px_mp_subcript ENDP
_TEXT	ENDS
PUBLIC	_Px_sq_length
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel_private.h
pdata	SEGMENT
$pdata$_Px_sq_length DD imagerel $LN10
	DD	imagerel $LN10+78
	DD	imagerel $unwind$_Px_sq_length
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Px_sq_length DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT _Px_sq_length
_TEXT	SEGMENT
o$ = 48
_Px_sq_length PROC					; COMDAT

; 918  : {

$LN10:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 919  :     Py_ssize_t result;
; 920  :     assert(Py_ORIG_TYPE(o));
; 921  :     _Px_READ_LOCK(o);

  0000a	f6 41 20 04	 test	 BYTE PTR [rcx+32], 4
  0000e	48 8b d9	 mov	 rbx, rcx
  00011	74 0a		 je	 SHORT $LN5@Px_sq_leng
  00013	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00017	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AcquireSRWLockShared
$LN5@Px_sq_leng:

; 922  :     result = Py_ORIG_TYPE_CAST(o)->tp_as_sequence->sq_length(o);

  0001d	48 8b 43 38	 mov	 rax, QWORD PTR [rbx+56]
  00021	48 8b cb	 mov	 rcx, rbx
  00024	48 8b 90 c0 00
	00 00		 mov	 rdx, QWORD PTR [rax+192]
  0002b	ff 12		 call	 QWORD PTR [rdx]

; 923  :     _Px_READ_UNLOCK(o);

  0002d	f6 43 20 04	 test	 BYTE PTR [rbx+32], 4
  00031	48 8b f8	 mov	 rdi, rax
  00034	74 0d		 je	 SHORT $LN7@Px_sq_leng
  00036	48 8d 4b 28	 lea	 rcx, QWORD PTR [rbx+40]
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseSRWLockShared

; 924  :     return result;

  00040	48 8b c7	 mov	 rax, rdi
$LN7@Px_sq_leng:

; 925  : }

  00043	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00048	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004c	5f		 pop	 rdi
  0004d	c3		 ret	 0
_Px_sq_length ENDP
_TEXT	ENDS
PUBLIC	_PxPages_LookupHeapPage
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PxPages_LookupHeapPage DD imagerel $LN69
	DD	imagerel $LN69+367
	DD	imagerel $unwind$_PxPages_LookupHeapPage
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PxPages_LookupHeapPage DD 020501H
	DD	013405H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PxPages_LookupHeapPage
_TEXT	SEGMENT
pages$ = 8
value$ = 16
p$ = 24
_PxPages_LookupHeapPage PROC				; COMDAT

; 1308 : {

$LN69:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	49 8b d8	 mov	 rbx, r8
  00008	4c 8b da	 mov	 r11, rdx
  0000b	4c 8b d1	 mov	 r10, rcx

; 1309 :     PxPages *x;
; 1310 :     HASH_FIND_INT(pages, value, x);

  0000e	48 85 c9	 test	 rcx, rcx
  00011	0f 84 00 01 00
	00		 je	 $LN68@PxPages_Lo
  00017	0f be 42 02	 movsx	 eax, BYTE PTR [rdx+2]
  0001b	44 0f be 4a 03	 movsx	 r9d, BYTE PTR [rdx+3]
  00020	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00024	c1 e0 10	 shl	 eax, 16
  00027	41 c1 e1 18	 shl	 r9d, 24
  0002b	41 b8 c6 ba 49
	9f		 mov	 r8d, -1622558010	; 9f49bac6H
  00031	41 81 e9 47 86
	c8 61		 sub	 r9d, 1640531527		; 61c88647H
  00038	44 03 c8	 add	 r9d, eax
  0003b	0f be 42 01	 movsx	 eax, BYTE PTR [rdx+1]
  0003f	c1 e0 08	 shl	 eax, 8
  00042	44 03 c8	 add	 r9d, eax
  00045	0f be 02	 movsx	 eax, BYTE PTR [rdx]
  00048	ba f3 be ed fe	 mov	 edx, -17973517		; feedbef3H
  0004d	44 03 c8	 add	 r9d, eax
  00050	41 81 c1 54 c7
	da 62		 add	 r9d, 1658505044		; 62dac754H
  00057	41 81 f1 6d f7
	07 00		 xor	 r9d, 522093		; 0007f76dH
  0005e	45 2b c1	 sub	 r8d, r9d
  00061	41 8b c1	 mov	 eax, r9d
  00064	c1 e0 08	 shl	 eax, 8
  00067	44 33 c0	 xor	 r8d, eax
  0006a	41 2b d0	 sub	 edx, r8d
  0006d	41 8b c0	 mov	 eax, r8d
  00070	41 2b d1	 sub	 edx, r9d
  00073	c1 e8 0d	 shr	 eax, 13
  00076	45 2b c8	 sub	 r9d, r8d
  00079	33 d0		 xor	 edx, eax
  0007b	44 2b ca	 sub	 r9d, edx
  0007e	8b c2		 mov	 eax, edx
  00080	c1 e8 0c	 shr	 eax, 12
  00083	44 33 c8	 xor	 r9d, eax
  00086	45 2b c1	 sub	 r8d, r9d
  00089	41 8b c1	 mov	 eax, r9d
  0008c	44 2b c2	 sub	 r8d, edx
  0008f	c1 e0 10	 shl	 eax, 16
  00092	44 33 c0	 xor	 r8d, eax
  00095	41 2b d0	 sub	 edx, r8d
  00098	41 8b c0	 mov	 eax, r8d
  0009b	41 2b d1	 sub	 edx, r9d
  0009e	c1 e8 05	 shr	 eax, 5
  000a1	45 2b c8	 sub	 r9d, r8d
  000a4	33 d0		 xor	 edx, eax
  000a6	8b c2		 mov	 eax, edx
  000a8	44 2b ca	 sub	 r9d, edx
  000ab	c1 e8 03	 shr	 eax, 3
  000ae	44 33 c8	 xor	 r9d, eax
  000b1	45 2b c1	 sub	 r8d, r9d
  000b4	41 8b c1	 mov	 eax, r9d
  000b7	44 2b c2	 sub	 r8d, edx
  000ba	c1 e0 0a	 shl	 eax, 10
  000bd	44 33 c0	 xor	 r8d, eax
  000c0	8b 41 08	 mov	 eax, DWORD PTR [rcx+8]
  000c3	41 2b d0	 sub	 edx, r8d
  000c6	ff c8		 dec	 eax
  000c8	41 c1 e8 0f	 shr	 r8d, 15
  000cc	41 2b d1	 sub	 edx, r9d
  000cf	41 33 d0	 xor	 edx, r8d
  000d2	23 d0		 and	 edx, eax
  000d4	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  000d7	48 03 d2	 add	 rdx, rdx
  000da	48 83 3c d0 00	 cmp	 QWORD PTR [rax+rdx*8], 0
  000df	74 36		 je	 SHORT $LN68@PxPages_Lo
  000e1	48 8b c1	 mov	 rax, rcx
  000e4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000e7	48 8b 14 d1	 mov	 rdx, QWORD PTR [rcx+rdx*8]
  000eb	48 2b 50 20	 sub	 rdx, QWORD PTR [rax+32]
  000ef	74 26		 je	 SHORT $LN68@PxPages_Lo
$LL12@PxPages_Lo:
  000f1	83 7a 50 04	 cmp	 DWORD PTR [rdx+80], 4
  000f5	75 0b		 jne	 SHORT $LN9@PxPages_Lo
  000f7	48 8b 42 48	 mov	 rax, QWORD PTR [rdx+72]
  000fb	8b 00		 mov	 eax, DWORD PTR [rax]
  000fd	41 3b 03	 cmp	 eax, DWORD PTR [r11]
  00100	74 1d		 je	 SHORT $LN19@PxPages_Lo
$LN9@PxPages_Lo:
  00102	48 83 7a 40 00	 cmp	 QWORD PTR [rdx+64], 0
  00107	74 0e		 je	 SHORT $LN68@PxPages_Lo
  00109	49 8b 42 20	 mov	 rax, QWORD PTR [r10+32]
  0010d	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  00111	48 2b 50 20	 sub	 rdx, QWORD PTR [rax+32]
  00115	75 da		 jne	 SHORT $LL12@PxPages_Lo
$LN68@PxPages_Lo:

; 1317 :             return 1;
; 1318 :     }
; 1319 :     return 0;

  00117	33 c0		 xor	 eax, eax

; 1320 : }

  00119	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  0011e	c3		 ret	 0
$LN19@PxPages_Lo:

; 1311 :     if (x) {
; 1312 :         Heap *h1, *h2;
; 1313 :         assert(x->count >= 1 && x->count <= 2);
; 1314 :         h1 = x->heaps[0];
; 1315 :         h2 = (x->count == 2 ? x->heaps[1] : NULL);

  0011f	66 83 7a 18 02	 cmp	 WORD PTR [rdx+24], 2
  00124	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  00128	75 06		 jne	 SHORT $LN52@PxPages_Lo
  0012a	4c 8b 42 10	 mov	 r8, QWORD PTR [rdx+16]
  0012e	eb 03		 jmp	 SHORT $LN53@PxPages_Lo
$LN52@PxPages_Lo:
  00130	45 33 c0	 xor	 r8d, r8d
$LN53@PxPages_Lo:

; 1316 :         if (Px_PTR_IN_HEAP(p, h1) || (h2 && Px_PTR_IN_HEAP(p, h2)))

  00133	48 85 c0	 test	 rax, rax
  00136	74 15		 je	 SHORT $LN54@PxPages_Lo
  00138	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  0013c	48 3b d9	 cmp	 rbx, rcx
  0013f	72 0c		 jb	 SHORT $LN54@PxPages_Lo
  00141	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00145	48 03 c8	 add	 rcx, rax
  00148	48 3b d9	 cmp	 rbx, rcx
  0014b	76 17		 jbe	 SHORT $LN1@PxPages_Lo
$LN54@PxPages_Lo:
  0014d	4d 85 c0	 test	 r8, r8
  00150	74 c5		 je	 SHORT $LN68@PxPages_Lo
  00152	49 8b 48 10	 mov	 rcx, QWORD PTR [r8+16]
  00156	48 3b d9	 cmp	 rbx, rcx
  00159	72 bc		 jb	 SHORT $LN68@PxPages_Lo
  0015b	49 03 48 38	 add	 rcx, QWORD PTR [r8+56]
  0015f	48 3b d9	 cmp	 rbx, rcx
  00162	77 b3		 ja	 SHORT $LN68@PxPages_Lo
$LN1@PxPages_Lo:

; 1320 : }

  00164	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  00169	b8 01 00 00 00	 mov	 eax, 1
  0016e	c3		 ret	 0
_PxPages_LookupHeapPage ENDP
_TEXT	ENDS
PUBLIC	PxPages_Find
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxPages_Find DD imagerel $LN6
	DD	imagerel $LN6+110
	DD	imagerel $unwind$PxPages_Find
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxPages_Find DD 060f01H
	DD	09640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PxPages_Find
_TEXT	SEGMENT
pages$ = 48
lower$ = 56
p$ = 56
upper$ = 64
PxPages_Find PROC					; COMDAT

; 1324 : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1325 :     int found;
; 1326 :     Px_UINTPTR lower, upper;
; 1327 : 
; 1328 :     lower = Px_PAGESIZE_ALIGN_DOWN(p, Px_LARGE_PAGE_SIZE);
; 1329 :     upper = Px_PAGESIZE_ALIGN_UP(p, Px_LARGE_PAGE_SIZE);

  0000f	48 8d 9a ff ff
	1f 00		 lea	 rbx, QWORD PTR [rdx+2097151]
  00016	48 8b c2	 mov	 rax, rdx
  00019	48 8b fa	 mov	 rdi, rdx

; 1330 : 
; 1331 :     found = _PxPages_LookupHeapPage(pages, &lower, p);

  0001c	4c 8b c2	 mov	 r8, rdx
  0001f	48 25 00 00 e0
	ff		 and	 rax, -2097152		; ffffffffffe00000H
  00025	48 8d 54 24 38	 lea	 rdx, QWORD PTR lower$[rsp]
  0002a	48 81 e3 00 00
	e0 ff		 and	 rbx, -2097152		; ffffffffffe00000H
  00031	48 8b f1	 mov	 rsi, rcx
  00034	48 89 44 24 38	 mov	 QWORD PTR lower$[rsp], rax
  00039	48 89 5c 24 40	 mov	 QWORD PTR upper$[rsp], rbx
  0003e	e8 00 00 00 00	 call	 _PxPages_LookupHeapPage

; 1332 :     if (!found && lower != upper)

  00043	85 c0		 test	 eax, eax
  00045	75 17		 jne	 SHORT $LN4@PxPages_Fi
  00047	48 39 5c 24 38	 cmp	 QWORD PTR lower$[rsp], rbx
  0004c	74 10		 je	 SHORT $LN4@PxPages_Fi

; 1333 :         found = _PxPages_LookupHeapPage(pages, &upper, p);

  0004e	48 8d 54 24 40	 lea	 rdx, QWORD PTR upper$[rsp]
  00053	4c 8b c7	 mov	 r8, rdi
  00056	48 8b ce	 mov	 rcx, rsi
  00059	e8 00 00 00 00	 call	 _PxPages_LookupHeapPage
$LN4@PxPages_Fi:

; 1334 : 
; 1335 :     return found;
; 1336 : }

  0005e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00063	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00068	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006c	5f		 pop	 rdi
  0006d	c3		 ret	 0
PxPages_Find ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@HCMMMIMF@invalid?5prev?5?$CFp?0?5actual?5?$CFp?6?$AA@ ; `string'
PUBLIC	??_C@_0CG@KALHPGEP@invalid?5app?5item?5count?5?$CFd?0?5actua@ ; `string'
PUBLIC	??_C@_0CE@EEFPEMAF@invalid?5bucket?5count?5?$CFd?0?5actual?5@ ; `string'
PUBLIC	??_C@_0BP@DLILMHAM@invalid?5hh_prev?5?$CFp?0?5actual?5?$CFp?6?$AA@ ; `string'
PUBLIC	??_C@_0CF@CNAMDMPB@invalid?5hh?5item?5count?5?$CFd?0?5actual@ ; `string'
PUBLIC	_PxPages_AddHeapPage
EXTRN	__imp_fprintf:PROC
EXTRN	__imp___iob_func:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_exit:PROC
EXTRN	__imp_malloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PxPages_AddHeapPage DD imagerel $LN169
	DD	imagerel $LN169+294
	DD	imagerel $unwind$_PxPages_AddHeapPage
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_PxPages_AddHeapPage DD imagerel $LN169+294
	DD	imagerel $LN169+412
	DD	imagerel $chain$1$_PxPages_AddHeapPage
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_PxPages_AddHeapPage DD imagerel $LN169+412
	DD	imagerel $LN169+435
	DD	imagerel $chain$2$_PxPages_AddHeapPage
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$_PxPages_AddHeapPage DD imagerel $LN169+435
	DD	imagerel $LN169+947
	DD	imagerel $chain$3$_PxPages_AddHeapPage
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$_PxPages_AddHeapPage DD imagerel $LN169+947
	DD	imagerel $LN169+1330
	DD	imagerel $chain$4$_PxPages_AddHeapPage
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$_PxPages_AddHeapPage DD imagerel $LN169+1330
	DD	imagerel $LN169+1740
	DD	imagerel $chain$6$_PxPages_AddHeapPage
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$_PxPages_AddHeapPage DD 040a21H
	DD	04f40aH
	DD	05e405H
	DD	imagerel $LN169+947
	DD	imagerel $LN169+1330
	DD	imagerel $chain$4$_PxPages_AddHeapPage
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$_PxPages_AddHeapPage DD 020521H
	DD	0a5405H
	DD	imagerel $LN169+435
	DD	imagerel $LN169+947
	DD	imagerel $chain$3$_PxPages_AddHeapPage
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$_PxPages_AddHeapPage DD 040021H
	DD	0cc400H
	DD	0b7400H
	DD	imagerel $LN169
	DD	imagerel $LN169+294
	DD	imagerel $unwind$_PxPages_AddHeapPage
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_PxPages_AddHeapPage DD 021H
	DD	imagerel $LN169
	DD	imagerel $LN169+294
	DD	imagerel $unwind$_PxPages_AddHeapPage
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_PxPages_AddHeapPage DD 040a21H
	DD	0cc40aH
	DD	0b7405H
	DD	imagerel $LN169
	DD	imagerel $LN169+294
	DD	imagerel $unwind$_PxPages_AddHeapPage
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PxPages_AddHeapPage DD 040901H
	DD	0d0055209H
	DD	030026003H
xdata	ENDS
;	COMDAT ??_C@_0BM@HCMMMIMF@invalid?5prev?5?$CFp?0?5actual?5?$CFp?6?$AA@
CONST	SEGMENT
??_C@_0BM@HCMMMIMF@invalid?5prev?5?$CFp?0?5actual?5?$CFp?6?$AA@ DB 'inval'
	DB	'id prev %p, actual %p', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@KALHPGEP@invalid?5app?5item?5count?5?$CFd?0?5actua@
CONST	SEGMENT
??_C@_0CG@KALHPGEP@invalid?5app?5item?5count?5?$CFd?0?5actua@ DB 'invalid'
	DB	' app item count %d, actual %d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@EEFPEMAF@invalid?5bucket?5count?5?$CFd?0?5actual?5@
CONST	SEGMENT
??_C@_0CE@EEFPEMAF@invalid?5bucket?5count?5?$CFd?0?5actual?5@ DB 'invalid'
	DB	' bucket count %d, actual %d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@DLILMHAM@invalid?5hh_prev?5?$CFp?0?5actual?5?$CFp?6?$AA@
CONST	SEGMENT
??_C@_0BP@DLILMHAM@invalid?5hh_prev?5?$CFp?0?5actual?5?$CFp?6?$AA@ DB 'in'
	DB	'valid hh_prev %p, actual %p', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@CNAMDMPB@invalid?5hh?5item?5count?5?$CFd?0?5actual@
CONST	SEGMENT
??_C@_0CF@CNAMDMPB@invalid?5hh?5item?5count?5?$CFd?0?5actual@ DB 'invalid'
	DB	' hh item count %d, actual %d', 0aH, 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PxPages_AddHeapPage
_TEXT	SEGMENT
pages$ = 80
value$ = 88
h$ = 96
_PxPages_AddHeapPage PROC				; COMDAT

; 1340 : {

$LN169:
  00000	40 53		 push	 rbx
  00002	56		 push	 rsi
  00003	41 55		 push	 r13
  00005	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1341 :     PxPages *x;
; 1342 :     HASH_FIND_INT(*pages, value, x);

  00009	4c 8b 11	 mov	 r10, QWORD PTR [rcx]
  0000c	49 8b f0	 mov	 rsi, r8
  0000f	48 8b da	 mov	 rbx, rdx
  00012	4c 8b e9	 mov	 r13, rcx
  00015	4d 85 d2	 test	 r10, r10
  00018	0f 84 03 01 00
	00		 je	 $LN161@PxPages_Ad
  0001e	0f be 42 02	 movsx	 eax, BYTE PTR [rdx+2]
  00022	44 0f be 4a 03	 movsx	 r9d, BYTE PTR [rdx+3]
  00027	49 8b 4a 20	 mov	 rcx, QWORD PTR [r10+32]
  0002b	c1 e0 10	 shl	 eax, 16
  0002e	41 c1 e1 18	 shl	 r9d, 24
  00032	41 b8 c6 ba 49
	9f		 mov	 r8d, -1622558010	; 9f49bac6H
  00038	41 81 e9 47 86
	c8 61		 sub	 r9d, 1640531527		; 61c88647H
  0003f	44 03 c8	 add	 r9d, eax
  00042	0f be 42 01	 movsx	 eax, BYTE PTR [rdx+1]
  00046	c1 e0 08	 shl	 eax, 8
  00049	44 03 c8	 add	 r9d, eax
  0004c	0f be 02	 movsx	 eax, BYTE PTR [rdx]
  0004f	ba f3 be ed fe	 mov	 edx, -17973517		; feedbef3H
  00054	44 03 c8	 add	 r9d, eax
  00057	41 81 c1 54 c7
	da 62		 add	 r9d, 1658505044		; 62dac754H
  0005e	41 81 f1 6d f7
	07 00		 xor	 r9d, 522093		; 0007f76dH
  00065	45 2b c1	 sub	 r8d, r9d
  00068	41 8b c1	 mov	 eax, r9d
  0006b	c1 e0 08	 shl	 eax, 8
  0006e	44 33 c0	 xor	 r8d, eax
  00071	41 2b d0	 sub	 edx, r8d
  00074	41 8b c0	 mov	 eax, r8d
  00077	41 2b d1	 sub	 edx, r9d
  0007a	c1 e8 0d	 shr	 eax, 13
  0007d	45 2b c8	 sub	 r9d, r8d
  00080	33 d0		 xor	 edx, eax
  00082	44 2b ca	 sub	 r9d, edx
  00085	8b c2		 mov	 eax, edx
  00087	c1 e8 0c	 shr	 eax, 12
  0008a	44 33 c8	 xor	 r9d, eax
  0008d	45 2b c1	 sub	 r8d, r9d
  00090	41 8b c1	 mov	 eax, r9d
  00093	44 2b c2	 sub	 r8d, edx
  00096	c1 e0 10	 shl	 eax, 16
  00099	44 33 c0	 xor	 r8d, eax
  0009c	41 2b d0	 sub	 edx, r8d
  0009f	41 8b c0	 mov	 eax, r8d
  000a2	41 2b d1	 sub	 edx, r9d
  000a5	c1 e8 05	 shr	 eax, 5
  000a8	45 2b c8	 sub	 r9d, r8d
  000ab	33 d0		 xor	 edx, eax
  000ad	8b c2		 mov	 eax, edx
  000af	44 2b ca	 sub	 r9d, edx
  000b2	c1 e8 03	 shr	 eax, 3
  000b5	44 33 c8	 xor	 r9d, eax
  000b8	45 2b c1	 sub	 r8d, r9d
  000bb	41 8b c1	 mov	 eax, r9d
  000be	44 2b c2	 sub	 r8d, edx
  000c1	c1 e0 0a	 shl	 eax, 10
  000c4	44 33 c0	 xor	 r8d, eax
  000c7	8b 41 08	 mov	 eax, DWORD PTR [rcx+8]
  000ca	41 2b d0	 sub	 edx, r8d
  000cd	ff c8		 dec	 eax
  000cf	41 c1 e8 0f	 shr	 r8d, 15
  000d3	41 2b d1	 sub	 edx, r9d
  000d6	41 33 d0	 xor	 edx, r8d
  000d9	23 d0		 and	 edx, eax
  000db	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  000de	48 03 d2	 add	 rdx, rdx
  000e1	48 83 3c d0 00	 cmp	 QWORD PTR [rax+rdx*8], 0
  000e6	74 39		 je	 SHORT $LN161@PxPages_Ad
  000e8	48 8b c1	 mov	 rax, rcx
  000eb	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ee	48 8b 14 d1	 mov	 rdx, QWORD PTR [rcx+rdx*8]
  000f2	48 2b 50 20	 sub	 rdx, QWORD PTR [rax+32]
  000f6	74 29		 je	 SHORT $LN161@PxPages_Ad
$LL96@PxPages_Ad:
  000f8	83 7a 50 04	 cmp	 DWORD PTR [rdx+80], 4
  000fc	75 0e		 jne	 SHORT $LN93@PxPages_Ad
  000fe	48 8b 42 48	 mov	 rax, QWORD PTR [rdx+72]
  00102	8b 00		 mov	 eax, DWORD PTR [rax]
  00104	3b 03		 cmp	 eax, DWORD PTR [rbx]
  00106	0f 84 90 00 00
	00		 je	 $LN103@PxPages_Ad
$LN93@PxPages_Ad:
  0010c	48 83 7a 40 00	 cmp	 QWORD PTR [rdx+64], 0
  00111	74 0e		 je	 SHORT $LN161@PxPages_Ad
  00113	49 8b 4a 20	 mov	 rcx, QWORD PTR [r10+32]
  00117	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  0011b	48 2b 51 20	 sub	 rdx, QWORD PTR [rcx+32]
  0011f	75 d7		 jne	 SHORT $LL96@PxPages_Ad
$LN161@PxPages_Ad:

; 1349 :     } else {
; 1350 :         x = (PxPages *)malloc(sizeof(PxPages));

  00121	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  00126	48 89 7c 24 58	 mov	 QWORD PTR [rsp+88], rdi
  0012b	4c 89 64 24 60	 mov	 QWORD PTR [rsp+96], r12
  00130	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc

; 1351 :         x->heaps[0] = h;
; 1352 :         x->count = 1;

  00136	41 bc 01 00 00
	00		 mov	 r12d, 1
  0013c	48 89 70 08	 mov	 QWORD PTR [rax+8], rsi
  00140	66 44 89 60 18	 mov	 WORD PTR [rax+24], r12w

; 1353 :         x->base = *value;

  00145	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00148	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1354 :         HASH_ADD_INT(*pages, base, x);

  0014b	33 f6		 xor	 esi, esi
  0014d	48 8b f8	 mov	 rdi, rax
  00150	48 89 70 30	 mov	 QWORD PTR [rax+48], rsi
  00154	48 89 40 48	 mov	 QWORD PTR [rax+72], rax
  00158	c7 40 50 04 00
	00 00		 mov	 DWORD PTR [rax+80], 4
  0015f	49 8b 45 00	 mov	 rax, QWORD PTR [r13]
  00163	48 85 c0	 test	 rax, rax
  00166	0f 85 f4 00 00
	00		 jne	 $LN82@PxPages_Ad
  0016c	8d 4e 40	 lea	 ecx, QWORD PTR [rsi+64]
  0016f	49 89 7d 00	 mov	 QWORD PTR [r13], rdi
  00173	48 89 77 28	 mov	 QWORD PTR [rdi+40], rsi
  00177	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0017d	49 8b 4d 00	 mov	 rcx, QWORD PTR [r13]
  00181	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
  00185	49 8b 45 00	 mov	 rax, QWORD PTR [r13]
  00189	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0018d	48 85 c9	 test	 rcx, rcx
  00190	75 21		 jne	 SHORT $LN78@PxPages_Ad
  00192	83 c9 ff	 or	 ecx, -1
  00195	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
  0019b	cc		 int	 3
$LN103@PxPages_Ad:

; 1343 :     if (x) {
; 1344 :         /* Original:
; 1345 :         assert(x->count == 1);
; 1346 :         x->heaps[1] = h;
; 1347 :         x->count++; */
; 1348 :         x->heaps[x->count++] = h;

  0019c	48 0f bf 42 18	 movsx	 rax, WORD PTR [rdx+24]
  001a1	48 89 74 c2 08	 mov	 QWORD PTR [rdx+rax*8+8], rsi
  001a6	66 ff 42 18	 inc	 WORD PTR [rdx+24]

; 1355 :     }
; 1356 : }

  001aa	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001ae	41 5d		 pop	 r13
  001b0	5e		 pop	 rsi
  001b1	5b		 pop	 rbx
  001b2	c3		 ret	 0
$LN78@PxPages_Ad:

; 1354 :         HASH_ADD_INT(*pages, base, x);

  001b3	33 c0		 xor	 eax, eax
  001b5	48 89 01	 mov	 QWORD PTR [rcx], rax
  001b8	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  001bc	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
  001c0	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax
  001c4	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
  001c8	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  001cc	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax
  001d0	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax
  001d4	49 8b 4d 00	 mov	 rcx, QWORD PTR [r13]
  001d8	48 8b 41 20	 mov	 rax, QWORD PTR [rcx+32]
  001dc	48 83 c1 20	 add	 rcx, 32			; 00000020H
  001e0	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx
  001e4	49 8b 45 00	 mov	 rax, QWORD PTR [r13]
  001e8	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  001ec	c7 41 08 20 00
	00 00		 mov	 DWORD PTR [rcx+8], 32	; 00000020H
  001f3	49 8b 45 00	 mov	 rax, QWORD PTR [r13]
  001f7	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  001fb	c7 41 0c 05 00
	00 00		 mov	 DWORD PTR [rcx+12], 5
  00202	49 8b 45 00	 mov	 rax, QWORD PTR [r13]
  00206	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0020a	48 c7 41 20 20
	00 00 00	 mov	 QWORD PTR [rcx+32], 32	; 00000020H
  00212	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  00217	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0021d	49 8b 4d 00	 mov	 rcx, QWORD PTR [r13]
  00221	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  00225	48 89 02	 mov	 QWORD PTR [rdx], rax
  00228	49 8b 45 00	 mov	 rax, QWORD PTR [r13]
  0022c	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00230	48 39 31	 cmp	 QWORD PTR [rcx], rsi
  00233	75 0a		 jne	 SHORT $LN77@PxPages_Ad
  00235	83 c9 ff	 or	 ecx, -1
  00238	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
  0023e	cc		 int	 3
$LN77@PxPages_Ad:
  0023f	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00242	33 d2		 xor	 edx, edx
  00244	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  0024a	e8 00 00 00 00	 call	 memset
  0024f	4d 8b 5d 00	 mov	 r11, QWORD PTR [r13]
  00253	49 8b 43 20	 mov	 rax, QWORD PTR [r11+32]
  00257	c7 40 38 e1 1f
	11 a0		 mov	 DWORD PTR [rax+56], -1609490463 ; a0111fe1H
  0025e	eb 30		 jmp	 SHORT $LN76@PxPages_Ad
$LN82@PxPages_Ad:
  00260	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00264	48 8d 57 20	 lea	 rdx, QWORD PTR [rdi+32]
  00268	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  0026c	48 89 79 10	 mov	 QWORD PTR [rcx+16], rdi
  00270	49 8b 45 00	 mov	 rax, QWORD PTR [r13]
  00274	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00278	48 8b 41 18	 mov	 rax, QWORD PTR [rcx+24]
  0027c	48 2b 41 20	 sub	 rax, QWORD PTR [rcx+32]
  00280	48 89 47 28	 mov	 QWORD PTR [rdi+40], rax
  00284	49 8b 45 00	 mov	 rax, QWORD PTR [r13]
  00288	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0028c	48 89 51 18	 mov	 QWORD PTR [rcx+24], rdx
$LN76@PxPages_Ad:
  00290	49 8b 45 00	 mov	 rax, QWORD PTR [r13]
  00294	48 8d 5f 20	 lea	 rbx, QWORD PTR [rdi+32]
  00298	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0029c	ff 41 10	 inc	 DWORD PTR [rcx+16]
  0029f	49 8b 45 00	 mov	 rax, QWORD PTR [r13]
  002a3	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  002a7	48 89 0b	 mov	 QWORD PTR [rbx], rcx
  002aa	c7 47 54 ef be
	ed fe		 mov	 DWORD PTR [rdi+84], -17973521 ; feedbeefH
  002b1	83 47 54 04	 add	 DWORD PTR [rdi+84], 4
  002b5	44 0f be 47 03	 movsx	 r8d, BYTE PTR [rdi+3]
  002ba	0f be 47 02	 movsx	 eax, BYTE PTR [rdi+2]
  002be	8b 57 54	 mov	 edx, DWORD PTR [rdi+84]
  002c1	c1 e0 10	 shl	 eax, 16
  002c4	41 c1 e0 18	 shl	 r8d, 24
  002c8	b9 b9 79 37 9e	 mov	 ecx, -1640531527	; 9e3779b9H
  002cd	2b 4f 54	 sub	 ecx, DWORD PTR [rdi+84]
  002d0	41 81 e8 47 86
	c8 61		 sub	 r8d, 1640531527		; 61c88647H
  002d7	44 03 c0	 add	 r8d, eax
  002da	0f be 47 01	 movsx	 eax, BYTE PTR [rdi+1]
  002de	c1 e0 08	 shl	 eax, 8
  002e1	44 03 c0	 add	 r8d, eax
  002e4	0f be 07	 movsx	 eax, BYTE PTR [rdi]
  002e7	44 03 c0	 add	 r8d, eax
  002ea	8b 47 54	 mov	 eax, DWORD PTR [rdi+84]
  002ed	44 2b c0	 sub	 r8d, eax
  002f0	c1 e8 0d	 shr	 eax, 13
  002f3	41 81 c0 47 86
	c8 61		 add	 r8d, 1640531527		; 61c88647H
  002fa	44 33 c0	 xor	 r8d, eax
  002fd	41 2b c8	 sub	 ecx, r8d
  00300	41 8b c0	 mov	 eax, r8d
  00303	c1 e0 08	 shl	 eax, 8
  00306	33 c8		 xor	 ecx, eax
  00308	2b d1		 sub	 edx, ecx
  0030a	8b c1		 mov	 eax, ecx
  0030c	41 2b d0	 sub	 edx, r8d
  0030f	c1 e8 0d	 shr	 eax, 13
  00312	33 d0		 xor	 edx, eax
  00314	44 2b c2	 sub	 r8d, edx
  00317	8b c2		 mov	 eax, edx
  00319	44 2b c1	 sub	 r8d, ecx
  0031c	2b ca		 sub	 ecx, edx
  0031e	c1 e8 0c	 shr	 eax, 12
  00321	44 33 c0	 xor	 r8d, eax
  00324	41 2b c8	 sub	 ecx, r8d
  00327	41 8b c0	 mov	 eax, r8d
  0032a	c1 e0 10	 shl	 eax, 16
  0032d	33 c8		 xor	 ecx, eax
  0032f	2b d1		 sub	 edx, ecx
  00331	8b c1		 mov	 eax, ecx
  00333	41 2b d0	 sub	 edx, r8d
  00336	c1 e8 05	 shr	 eax, 5
  00339	33 d0		 xor	 edx, eax
  0033b	44 2b c2	 sub	 r8d, edx
  0033e	8b c2		 mov	 eax, edx
  00340	44 2b c1	 sub	 r8d, ecx
  00343	2b ca		 sub	 ecx, edx
  00345	c1 e8 03	 shr	 eax, 3
  00348	44 33 c0	 xor	 r8d, eax
  0034b	41 2b c8	 sub	 ecx, r8d
  0034e	41 8b c0	 mov	 eax, r8d
  00351	c1 e0 0a	 shl	 eax, 10
  00354	33 c8		 xor	 ecx, eax
  00356	2b d1		 sub	 edx, ecx
  00358	c1 e9 0f	 shr	 ecx, 15
  0035b	41 2b d0	 sub	 edx, r8d
  0035e	33 d1		 xor	 edx, ecx
  00360	89 57 54	 mov	 DWORD PTR [rdi+84], edx
  00363	49 8b 45 00	 mov	 rax, QWORD PTR [r13]
  00367	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0036b	44 8b 41 08	 mov	 r8d, DWORD PTR [rcx+8]
  0036f	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00372	41 ff c8	 dec	 r8d
  00375	44 23 c2	 and	 r8d, edx
  00378	4d 03 c0	 add	 r8, r8
  0037b	42 ff 44 c0 08	 inc	 DWORD PTR [rax+r8*8+8]
  00380	49 8b 45 00	 mov	 rax, QWORD PTR [r13]
  00384	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00388	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0038b	4a 8b 0c c0	 mov	 rcx, QWORD PTR [rax+r8*8]
  0038f	48 89 4f 40	 mov	 QWORD PTR [rdi+64], rcx
  00393	48 89 77 38	 mov	 QWORD PTR [rdi+56], rsi
  00397	49 8b 45 00	 mov	 rax, QWORD PTR [r13]
  0039b	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0039f	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  003a2	4a 8b 0c c0	 mov	 rcx, QWORD PTR [rax+r8*8]
  003a6	48 85 c9	 test	 rcx, rcx
  003a9	74 04		 je	 SHORT $LN48@PxPages_Ad
  003ab	48 89 59 18	 mov	 QWORD PTR [rcx+24], rbx
$LN48@PxPages_Ad:
  003af	49 8b 45 00	 mov	 rax, QWORD PTR [r13]
  003b3	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp
  003b8	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  003bc	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  003bf	4a 89 1c c0	 mov	 QWORD PTR [rax+r8*8], rbx
  003c3	49 8b 45 00	 mov	 rax, QWORD PTR [r13]
  003c7	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  003cb	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  003ce	42 8b 44 c2 0c	 mov	 eax, DWORD PTR [rdx+r8*8+12]
  003d3	8d 44 80 05	 lea	 eax, DWORD PTR [rax+rax*4+5]
  003d7	03 c0		 add	 eax, eax
  003d9	42 39 44 c2 08	 cmp	 DWORD PTR [rdx+r8*8+8], eax
  003de	0f 82 4a 01 00
	00		 jb	 $LN44@PxPages_Ad
  003e4	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  003e7	44 39 60 34	 cmp	 DWORD PTR [rax+52], r12d
  003eb	0f 84 3d 01 00
	00		 je	 $LN44@PxPages_Ad
  003f1	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  003f4	8d 2c 00	 lea	 ebp, DWORD PTR [rax+rax]
  003f7	48 c1 e5 04	 shl	 rbp, 4
  003fb	48 8b cd	 mov	 rcx, rbp
  003fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00404	48 8b f8	 mov	 rdi, rax
  00407	48 85 c0	 test	 rax, rax
  0040a	75 0a		 jne	 SHORT $LN43@PxPages_Ad
  0040c	83 c9 ff	 or	 ecx, -1
  0040f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
  00415	cc		 int	 3
$LN43@PxPages_Ad:
  00416	4c 8b c5	 mov	 r8, rbp
  00419	33 d2		 xor	 edx, edx
  0041b	48 8b c8	 mov	 rcx, rax
  0041e	e8 00 00 00 00	 call	 memset
  00423	4c 8b 1b	 mov	 r11, QWORD PTR [rbx]
  00426	8b ee		 mov	 ebp, esi
  00428	41 8b 43 08	 mov	 eax, DWORD PTR [r11+8]
  0042c	41 8b 53 10	 mov	 edx, DWORD PTR [r11+16]
  00430	41 8b 4b 0c	 mov	 ecx, DWORD PTR [r11+12]
  00434	8d 44 00 ff	 lea	 eax, DWORD PTR [rax+rax-1]
  00438	ff c1		 inc	 ecx
  0043a	44 8b c2	 mov	 r8d, edx
  0043d	41 d3 e8	 shr	 r8d, cl
  00440	85 c2		 test	 eax, edx
  00442	8b c6		 mov	 eax, esi
  00444	0f 95 c0	 setne	 al
  00447	44 03 c0	 add	 r8d, eax
  0044a	45 89 43 28	 mov	 DWORD PTR [r11+40], r8d
  0044e	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00451	89 70 2c	 mov	 DWORD PTR [rax+44], esi
  00454	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00457	39 70 08	 cmp	 DWORD PTR [rax+8], esi
  0045a	0f 86 80 00 00
	00		 jbe	 $LN40@PxPages_Ad
  00460	4c 8b de	 mov	 r11, rsi
$LL42@PxPages_Ad:
  00463	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00466	4d 8b 0c 03	 mov	 r9, QWORD PTR [r11+rax]
  0046a	4d 85 c9	 test	 r9, r9
  0046d	74 63		 je	 SHORT $LN41@PxPages_Ad
  0046f	90		 npad	 1
$LL39@PxPages_Ad:
  00470	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00473	4d 8b 51 20	 mov	 r10, QWORD PTR [r9+32]
  00477	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  0047a	41 8b 41 34	 mov	 eax, DWORD PTR [r9+52]
  0047e	44 8d 44 09 ff	 lea	 r8d, DWORD PTR [rcx+rcx-1]
  00483	4c 23 c0	 and	 r8, rax
  00486	49 c1 e0 04	 shl	 r8, 4
  0048a	4c 03 c7	 add	 r8, rdi
  0048d	41 ff 40 08	 inc	 DWORD PTR [r8+8]
  00491	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00494	41 8b 48 08	 mov	 ecx, DWORD PTR [r8+8]
  00498	3b 48 28	 cmp	 ecx, DWORD PTR [rax+40]
  0049b	76 13		 jbe	 SHORT $LN34@PxPages_Ad
  0049d	ff 40 2c	 inc	 DWORD PTR [rax+44]
  004a0	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  004a3	41 8b 40 08	 mov	 eax, DWORD PTR [r8+8]
  004a7	33 d2		 xor	 edx, edx
  004a9	f7 71 28	 div	 DWORD PTR [rcx+40]
  004ac	41 89 40 0c	 mov	 DWORD PTR [r8+12], eax
$LN34@PxPages_Ad:
  004b0	49 89 71 18	 mov	 QWORD PTR [r9+24], rsi
  004b4	49 8b 00	 mov	 rax, QWORD PTR [r8]
  004b7	49 89 41 20	 mov	 QWORD PTR [r9+32], rax
  004bb	49 8b 00	 mov	 rax, QWORD PTR [r8]
  004be	48 85 c0	 test	 rax, rax
  004c1	74 04		 je	 SHORT $LN33@PxPages_Ad
  004c3	4c 89 48 18	 mov	 QWORD PTR [rax+24], r9
$LN33@PxPages_Ad:
  004c7	4d 89 08	 mov	 QWORD PTR [r8], r9
  004ca	4d 8b ca	 mov	 r9, r10
  004cd	4d 85 d2	 test	 r10, r10
  004d0	75 9e		 jne	 SHORT $LL39@PxPages_Ad
$LN41@PxPages_Ad:
  004d2	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  004d5	ff c5		 inc	 ebp
  004d7	49 83 c3 10	 add	 r11, 16
  004db	3b 68 08	 cmp	 ebp, DWORD PTR [rax+8]
  004de	72 83		 jb	 SHORT $LL42@PxPages_Ad
$LN40@PxPages_Ad:
  004e0	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  004e3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  004e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  004ec	4c 8b 1b	 mov	 r11, QWORD PTR [rbx]
  004ef	41 8b 43 08	 mov	 eax, DWORD PTR [r11+8]
  004f3	03 c0		 add	 eax, eax
  004f5	41 89 43 08	 mov	 DWORD PTR [r11+8], eax
  004f9	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  004fc	ff 40 0c	 inc	 DWORD PTR [rax+12]
  004ff	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00502	48 89 38	 mov	 QWORD PTR [rax], rdi
  00505	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00508	8b 41 10	 mov	 eax, DWORD PTR [rcx+16]
  0050b	d1 e8		 shr	 eax, 1
  0050d	39 41 2c	 cmp	 DWORD PTR [rcx+44], eax
  00510	76 07		 jbe	 SHORT $LN136@PxPages_Ad
  00512	8b 49 30	 mov	 ecx, DWORD PTR [rcx+48]
  00515	ff c1		 inc	 ecx
  00517	eb 02		 jmp	 SHORT $LN137@PxPages_Ad
$LN136@PxPages_Ad:
  00519	8b ce		 mov	 ecx, esi
$LN137@PxPages_Ad:
  0051b	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0051e	89 48 30	 mov	 DWORD PTR [rax+48], ecx
  00521	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00524	44 39 60 30	 cmp	 DWORD PTR [rax+48], r12d
  00528	76 04		 jbe	 SHORT $LN44@PxPages_Ad
  0052a	44 89 60 34	 mov	 DWORD PTR [rax+52], r12d
$LN44@PxPages_Ad:
  0052e	4d 8b 65 00	 mov	 r12, QWORD PTR [r13]
  00532	4c 89 74 24 28	 mov	 QWORD PTR [rsp+40], r14
  00537	4c 89 7c 24 20	 mov	 QWORD PTR [rsp+32], r15
  0053c	4d 85 e4	 test	 r12, r12
  0053f	0f 84 65 01 00
	00		 je	 $LN167@PxPages_Ad
  00545	4d 8b 4c 24 20	 mov	 r9, QWORD PTR [r12+32]
  0054a	49 83 c4 20	 add	 r12, 32			; 00000020H
  0054e	44 8b f6	 mov	 r14d, esi
  00551	44 8b c6	 mov	 r8d, esi
  00554	41 39 71 08	 cmp	 DWORD PTR [r9+8], esi
  00558	76 47		 jbe	 SHORT $LN25@PxPages_Ad
  0055a	4d 8b 39	 mov	 r15, QWORD PTR [r9]
  0055d	49 8b d7	 mov	 rdx, r15
$LL27@PxPages_Ad:
  00560	48 8b 1a	 mov	 rbx, QWORD PTR [rdx]
  00563	8b fe		 mov	 edi, esi
  00565	48 8b ee	 mov	 rbp, rsi
  00568	48 85 db	 test	 rbx, rbx
  0056b	74 17		 je	 SHORT $LN23@PxPages_Ad
  0056d	0f 1f 00	 npad	 3
$LL24@PxPages_Ad:
  00570	48 3b 6b 18	 cmp	 rbp, QWORD PTR [rbx+24]
  00574	75 5b		 jne	 SHORT $LN149@PxPages_Ad
  00576	48 8b eb	 mov	 rbp, rbx
  00579	48 8b 5b 20	 mov	 rbx, QWORD PTR [rbx+32]
  0057d	ff c7		 inc	 edi
  0057f	48 85 db	 test	 rbx, rbx
  00582	75 ec		 jne	 SHORT $LL24@PxPages_Ad
$LN23@PxPages_Ad:
  00584	44 03 f7	 add	 r14d, edi
  00587	39 7a 08	 cmp	 DWORD PTR [rdx+8], edi
  0058a	75 6d		 jne	 SHORT $LN150@PxPages_Ad
  0058c	49 8b 45 00	 mov	 rax, QWORD PTR [r13]
  00590	41 ff c0	 inc	 r8d
  00593	48 83 c2 10	 add	 rdx, 16
  00597	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0059b	44 3b 41 08	 cmp	 r8d, DWORD PTR [rcx+8]
  0059f	72 bf		 jb	 SHORT $LL27@PxPages_Ad
$LN25@PxPages_Ad:
  005a1	41 8b 79 10	 mov	 edi, DWORD PTR [r9+16]
  005a5	44 3b f7	 cmp	 r14d, edi
  005a8	74 7e		 je	 SHORT $LN11@PxPages_Ad
  005aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  005b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@CNAMDMPB@invalid?5hh?5item?5count?5?$CFd?0?5actual@
  005b7	45 8b ce	 mov	 r9d, r14d
  005ba	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  005be	44 8b c7	 mov	 r8d, edi
  005c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
  005c7	83 c9 ff	 or	 ecx, -1
  005ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
  005d0	cc		 int	 3
$LN149@PxPages_Ad:
  005d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  005d7	4c 8b 43 18	 mov	 r8, QWORD PTR [rbx+24]
  005db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@DLILMHAM@invalid?5hh_prev?5?$CFp?0?5actual?5?$CFp?6?$AA@
  005e2	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  005e6	4c 8b cd	 mov	 r9, rbp
  005e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
  005ef	83 c9 ff	 or	 ecx, -1
  005f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
  005f8	cc		 int	 3
$LN150@PxPages_Ad:
  005f9	41 8b d8	 mov	 ebx, r8d
  005fc	48 03 db	 add	 rbx, rbx
  005ff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00605	45 8b 44 df 08	 mov	 r8d, DWORD PTR [r15+rbx*8+8]
  0060a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@EEFPEMAF@invalid?5bucket?5count?5?$CFd?0?5actual?5@
  00611	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  00615	44 8b cf	 mov	 r9d, edi
  00618	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
  0061e	83 c9 ff	 or	 ecx, -1
  00621	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
  00627	cc		 int	 3
$LN11@PxPages_Ad:
  00628	48 8b de	 mov	 rbx, rsi
  0062b	4d 85 e4	 test	 r12, r12
  0062e	74 26		 je	 SHORT $LN9@PxPages_Ad
$LL10@PxPages_Ad:
  00630	ff c6		 inc	 esi
  00632	49 3b 5c 24 08	 cmp	 rbx, QWORD PTR [r12+8]
  00637	75 48		 jne	 SHORT $LN151@PxPages_Ad
  00639	49 8b 41 20	 mov	 rax, QWORD PTR [r9+32]
  0063d	49 8b 4c 24 10	 mov	 rcx, QWORD PTR [r12+16]
  00642	49 8b dc	 mov	 rbx, r12
  00645	48 2b d8	 sub	 rbx, rax
  00648	48 85 c9	 test	 rcx, rcx
  0064b	74 09		 je	 SHORT $LN9@PxPages_Ad
  0064d	4c 8d 24 08	 lea	 r12, QWORD PTR [rax+rcx]
  00651	4d 85 e4	 test	 r12, r12
  00654	75 da		 jne	 SHORT $LL10@PxPages_Ad
$LN9@PxPages_Ad:
  00656	3b f7		 cmp	 esi, edi
  00658	74 50		 je	 SHORT $LN167@PxPages_Ad
  0065a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00660	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@KALHPGEP@invalid?5app?5item?5count?5?$CFd?0?5actua@
  00667	44 8b ce	 mov	 r9d, esi
  0066a	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  0066e	44 8b c7	 mov	 r8d, edi
  00671	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
  00677	83 c9 ff	 or	 ecx, -1
  0067a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
  00680	cc		 int	 3
$LN151@PxPages_Ad:
  00681	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00687	4d 8b 44 24 08	 mov	 r8, QWORD PTR [r12+8]
  0068c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@HCMMMIMF@invalid?5prev?5?$CFp?0?5actual?5?$CFp?6?$AA@
  00693	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  00697	4c 8b cb	 mov	 r9, rbx
  0069a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
  006a0	83 c9 ff	 or	 ecx, -1
  006a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
  006a9	cc		 int	 3
$LN167@PxPages_Ad:
  006aa	4c 8b 74 24 28	 mov	 r14, QWORD PTR [rsp+40]
  006af	4c 8b 7c 24 20	 mov	 r15, QWORD PTR [rsp+32]
  006b4	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  006b9	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  006be	4c 8b 64 24 60	 mov	 r12, QWORD PTR [rsp+96]

; 1355 :     }
; 1356 : }

  006c3	48 83 c4 30	 add	 rsp, 48			; 00000030H
  006c7	41 5d		 pop	 r13
  006c9	5e		 pop	 rsi
  006ca	5b		 pop	 rbx
  006cb	c3		 ret	 0
$LN168@PxPages_Ad:
_PxPages_AddHeapPage ENDP
_TEXT	ENDS
PUBLIC	_PxPages_RemoveHeapPage
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PxPages_RemoveHeapPage DD imagerel $LN124
	DD	imagerel $LN124+313
	DD	imagerel $unwind$_PxPages_RemoveHeapPage
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$_PxPages_RemoveHeapPage DD imagerel $LN124+313
	DD	imagerel $LN124+413
	DD	imagerel $chain$3$_PxPages_RemoveHeapPage
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$_PxPages_RemoveHeapPage DD imagerel $LN124+413
	DD	imagerel $LN124+1005
	DD	imagerel $chain$5$_PxPages_RemoveHeapPage
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$_PxPages_RemoveHeapPage DD imagerel $LN124+1005
	DD	imagerel $LN124+1043
	DD	imagerel $chain$6$_PxPages_RemoveHeapPage
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$_PxPages_RemoveHeapPage DD 021H
	DD	imagerel $LN124
	DD	imagerel $LN124+313
	DD	imagerel $unwind$_PxPages_RemoveHeapPage
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$_PxPages_RemoveHeapPage DD 080021H
	DD	04f400H
	DD	0dd400H
	DD	0c6400H
	DD	0b5400H
	DD	imagerel $LN124
	DD	imagerel $LN124+313
	DD	imagerel $unwind$_PxPages_RemoveHeapPage
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$_PxPages_RemoveHeapPage DD 081421H
	DD	04f414H
	DD	0dd40fH
	DD	0c640aH
	DD	0b5405H
	DD	imagerel $LN124
	DD	imagerel $LN124+313
	DD	imagerel $unwind$_PxPages_RemoveHeapPage
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PxPages_RemoveHeapPage DD 050b01H
	DD	0e007420bH
	DD	07003c005H
	DD	03002H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PxPages_RemoveHeapPage
_TEXT	SEGMENT
tv1227 = 80
pages$ = 80
value$ = 88
h$ = 96
_PxPages_RemoveHeapPage PROC				; COMDAT

; 1360 : {

$LN124:
  00000	40 53		 push	 rbx
  00002	57		 push	 rdi
  00003	41 54		 push	 r12
  00005	41 56		 push	 r14
  00007	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1361 :     PxPages *x;
; 1362 :     HASH_FIND_INT(*pages, value, x);

  0000b	4c 8b 11	 mov	 r10, QWORD PTR [rcx]
  0000e	45 33 e4	 xor	 r12d, r12d
  00011	49 8b d8	 mov	 rbx, r8
  00014	4c 8b da	 mov	 r11, rdx
  00017	4c 8b f1	 mov	 r14, rcx
  0001a	41 8b fc	 mov	 edi, r12d
  0001d	4d 85 d2	 test	 r10, r10
  00020	0f 84 04 01 00
	00		 je	 $LN68@PxPages_Re
  00026	0f be 42 02	 movsx	 eax, BYTE PTR [rdx+2]
  0002a	44 0f be 4a 03	 movsx	 r9d, BYTE PTR [rdx+3]
  0002f	49 8b 4a 20	 mov	 rcx, QWORD PTR [r10+32]
  00033	8b 79 08	 mov	 edi, DWORD PTR [rcx+8]
  00036	c1 e0 10	 shl	 eax, 16
  00039	41 c1 e1 18	 shl	 r9d, 24
  0003d	41 81 e9 47 86
	c8 61		 sub	 r9d, 1640531527		; 61c88647H
  00044	41 b8 c6 ba 49
	9f		 mov	 r8d, -1622558010	; 9f49bac6H
  0004a	ff cf		 dec	 edi
  0004c	44 03 c8	 add	 r9d, eax
  0004f	0f be 42 01	 movsx	 eax, BYTE PTR [rdx+1]
  00053	c1 e0 08	 shl	 eax, 8
  00056	44 03 c8	 add	 r9d, eax
  00059	0f be 02	 movsx	 eax, BYTE PTR [rdx]
  0005c	ba f3 be ed fe	 mov	 edx, -17973517		; feedbef3H
  00061	44 03 c8	 add	 r9d, eax
  00064	41 81 c1 54 c7
	da 62		 add	 r9d, 1658505044		; 62dac754H
  0006b	41 81 f1 6d f7
	07 00		 xor	 r9d, 522093		; 0007f76dH
  00072	45 2b c1	 sub	 r8d, r9d
  00075	41 8b c1	 mov	 eax, r9d
  00078	c1 e0 08	 shl	 eax, 8
  0007b	44 33 c0	 xor	 r8d, eax
  0007e	41 2b d0	 sub	 edx, r8d
  00081	41 8b c0	 mov	 eax, r8d
  00084	41 2b d1	 sub	 edx, r9d
  00087	c1 e8 0d	 shr	 eax, 13
  0008a	45 2b c8	 sub	 r9d, r8d
  0008d	33 d0		 xor	 edx, eax
  0008f	44 2b ca	 sub	 r9d, edx
  00092	8b c2		 mov	 eax, edx
  00094	c1 e8 0c	 shr	 eax, 12
  00097	44 33 c8	 xor	 r9d, eax
  0009a	45 2b c1	 sub	 r8d, r9d
  0009d	41 8b c1	 mov	 eax, r9d
  000a0	44 2b c2	 sub	 r8d, edx
  000a3	c1 e0 10	 shl	 eax, 16
  000a6	44 33 c0	 xor	 r8d, eax
  000a9	41 2b d0	 sub	 edx, r8d
  000ac	41 8b c0	 mov	 eax, r8d
  000af	41 2b d1	 sub	 edx, r9d
  000b2	c1 e8 05	 shr	 eax, 5
  000b5	45 2b c8	 sub	 r9d, r8d
  000b8	33 d0		 xor	 edx, eax
  000ba	8b c2		 mov	 eax, edx
  000bc	44 2b ca	 sub	 r9d, edx
  000bf	c1 e8 03	 shr	 eax, 3
  000c2	44 33 c8	 xor	 r9d, eax
  000c5	45 2b c1	 sub	 r8d, r9d
  000c8	41 8b c1	 mov	 eax, r9d
  000cb	44 2b c2	 sub	 r8d, edx
  000ce	c1 e0 0a	 shl	 eax, 10
  000d1	44 33 c0	 xor	 r8d, eax
  000d4	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  000d7	41 2b d0	 sub	 edx, r8d
  000da	41 c1 e8 0f	 shr	 r8d, 15
  000de	41 2b d1	 sub	 edx, r9d
  000e1	41 33 d0	 xor	 edx, r8d
  000e4	23 fa		 and	 edi, edx
  000e6	48 03 ff	 add	 rdi, rdi
  000e9	4c 39 24 f8	 cmp	 QWORD PTR [rax+rdi*8], r12
  000ed	74 38		 je	 SHORT $LN67@PxPages_Re
  000ef	48 8b c1	 mov	 rax, rcx
  000f2	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000f5	48 8b 3c f9	 mov	 rdi, QWORD PTR [rcx+rdi*8]
  000f9	48 2b 78 20	 sub	 rdi, QWORD PTR [rax+32]
  000fd	74 2b		 je	 SHORT $LN68@PxPages_Re
  000ff	90		 npad	 1
$LL62@PxPages_Re:
  00100	83 7f 50 04	 cmp	 DWORD PTR [rdi+80], 4
  00104	75 0b		 jne	 SHORT $LN59@PxPages_Re
  00106	48 8b 47 48	 mov	 rax, QWORD PTR [rdi+72]
  0010a	8b 00		 mov	 eax, DWORD PTR [rax]
  0010c	41 3b 03	 cmp	 eax, DWORD PTR [r11]
  0010f	74 19		 je	 SHORT $LN68@PxPages_Re
$LN59@PxPages_Re:
  00111	4c 39 67 40	 cmp	 QWORD PTR [rdi+64], r12
  00115	74 10		 je	 SHORT $LN67@PxPages_Re
  00117	49 8b 42 20	 mov	 rax, QWORD PTR [r10+32]
  0011b	48 8b 7f 40	 mov	 rdi, QWORD PTR [rdi+64]
  0011f	48 2b 78 20	 sub	 rdi, QWORD PTR [rax+32]
  00123	75 db		 jne	 SHORT $LL62@PxPages_Re
  00125	eb 03		 jmp	 SHORT $LN68@PxPages_Re
$LN67@PxPages_Re:
  00127	49 8b fc	 mov	 rdi, r12
$LN68@PxPages_Re:

; 1363 :     assert(x);
; 1364 :     if (x->count == 1) {

  0012a	66 83 7f 18 01	 cmp	 WORD PTR [rdi+24], 1
  0012f	0f 85 b8 02 00
	00		 jne	 $LN53@PxPages_Re

; 1365 :         assert(x->heaps[0] == h);
; 1366 :         HASH_DEL(*pages, x);

  00135	4c 8b 4f 28	 mov	 r9, QWORD PTR [rdi+40]
  00139	48 89 6c 24 58	 mov	 QWORD PTR [rsp+88], rbp
  0013e	48 89 74 24 60	 mov	 QWORD PTR [rsp+96], rsi
  00143	4c 89 6c 24 68	 mov	 QWORD PTR [rsp+104], r13
  00148	4c 89 7c 24 20	 mov	 QWORD PTR [rsp+32], r15
  0014d	4d 85 c9	 test	 r9, r9
  00150	75 4b		 jne	 SHORT $LN49@PxPages_Re
  00152	4c 39 67 30	 cmp	 QWORD PTR [rdi+48], r12
  00156	75 45		 jne	 SHORT $LN49@PxPages_Re
  00158	49 8b 4a 20	 mov	 rcx, QWORD PTR [r10+32]
  0015c	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0015f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  00165	49 8b 0e	 mov	 rcx, QWORD PTR [r14]
  00168	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  0016c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  00172	4d 89 26	 mov	 QWORD PTR [r14], r12
$LN4@PxPages_Re:

; 1367 :         free(x);

  00175	48 8b cf	 mov	 rcx, rdi
  00178	4c 8b 6c 24 68	 mov	 r13, QWORD PTR [rsp+104]
  0017d	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  00182	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  00187	4c 8b 7c 24 20	 mov	 r15, QWORD PTR [rsp+32]

; 1376 :     }
; 1377 : }

  0018c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00190	41 5e		 pop	 r14
  00192	41 5c		 pop	 r12
  00194	5f		 pop	 rdi
  00195	5b		 pop	 rbx
  00196	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_free
$LN49@PxPages_Re:

; 1365 :         assert(x->heaps[0] == h);
; 1366 :         HASH_DEL(*pages, x);

  0019d	49 8b 42 20	 mov	 rax, QWORD PTR [r10+32]
  001a1	4c 8d 47 20	 lea	 r8, QWORD PTR [rdi+32]
  001a5	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  001a9	48 2b 48 20	 sub	 rcx, QWORD PTR [rax+32]
  001ad	48 3b f9	 cmp	 rdi, rcx
  001b0	75 0f		 jne	 SHORT $LN47@PxPages_Re
  001b2	48 8b d0	 mov	 rdx, rax
  001b5	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  001b9	49 8d 0c 01	 lea	 rcx, QWORD PTR [r9+rax]
  001bd	48 89 4a 18	 mov	 QWORD PTR [rdx+24], rcx
$LN47@PxPages_Re:
  001c1	4c 8b 4f 28	 mov	 r9, QWORD PTR [rdi+40]
  001c5	4d 85 c9	 test	 r9, r9
  001c8	74 16		 je	 SHORT $LN44@PxPages_Re
  001ca	49 8b 06	 mov	 rax, QWORD PTR [r14]
  001cd	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  001d1	48 8b 47 30	 mov	 rax, QWORD PTR [rdi+48]
  001d5	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  001d9	4a 89 44 0a 10	 mov	 QWORD PTR [rdx+r9+16], rax
  001de	eb 07		 jmp	 SHORT $LN42@PxPages_Re
$LN44@PxPages_Re:
  001e0	48 8b 47 30	 mov	 rax, QWORD PTR [rdi+48]
  001e4	49 89 06	 mov	 QWORD PTR [r14], rax
$LN42@PxPages_Re:
  001e7	4d 8b 48 10	 mov	 r9, QWORD PTR [r8+16]
  001eb	4d 85 c9	 test	 r9, r9
  001ee	74 14		 je	 SHORT $LN40@PxPages_Re
  001f0	49 8b 06	 mov	 rax, QWORD PTR [r14]
  001f3	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  001f7	49 8b 40 08	 mov	 rax, QWORD PTR [r8+8]
  001fb	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  001ff	4a 89 44 0a 08	 mov	 QWORD PTR [rdx+r9+8], rax
$LN40@PxPages_Re:
  00204	49 8b 06	 mov	 rax, QWORD PTR [r14]
  00207	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0020b	8b 51 08	 mov	 edx, DWORD PTR [rcx+8]
  0020e	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00211	ff ca		 dec	 edx
  00213	41 23 50 34	 and	 edx, DWORD PTR [r8+52]
  00217	48 03 d2	 add	 rdx, rdx
  0021a	ff 4c d0 08	 dec	 DWORD PTR [rax+rdx*8+8]
  0021e	49 8b 06	 mov	 rax, QWORD PTR [r14]
  00221	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00225	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  00228	4d 39 04 d1	 cmp	 QWORD PTR [r9+rdx*8], r8
  0022c	75 08		 jne	 SHORT $LN37@PxPages_Re
  0022e	49 8b 40 20	 mov	 rax, QWORD PTR [r8+32]
  00232	49 89 04 d1	 mov	 QWORD PTR [r9+rdx*8], rax
$LN37@PxPages_Re:
  00236	49 8b 48 18	 mov	 rcx, QWORD PTR [r8+24]
  0023a	48 85 c9	 test	 rcx, rcx
  0023d	74 08		 je	 SHORT $LN36@PxPages_Re
  0023f	49 8b 40 20	 mov	 rax, QWORD PTR [r8+32]
  00243	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
$LN36@PxPages_Re:
  00247	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  0024b	48 85 c9	 test	 rcx, rcx
  0024e	74 08		 je	 SHORT $LN35@PxPages_Re
  00250	49 8b 40 18	 mov	 rax, QWORD PTR [r8+24]
  00254	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax
$LN35@PxPages_Re:
  00258	49 8b 06	 mov	 rax, QWORD PTR [r14]
  0025b	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0025f	ff 49 10	 dec	 DWORD PTR [rcx+16]
  00262	4d 8b 2e	 mov	 r13, QWORD PTR [r14]
  00265	4d 85 ed	 test	 r13, r13
  00268	0f 84 07 ff ff
	ff		 je	 $LN4@PxPages_Re
  0026e	4d 8b 4d 20	 mov	 r9, QWORD PTR [r13+32]
  00272	49 83 c5 20	 add	 r13, 32			; 00000020H
  00276	45 8b fc	 mov	 r15d, r12d
  00279	45 8b c4	 mov	 r8d, r12d
  0027c	45 39 61 08	 cmp	 DWORD PTR [r9+8], r12d
  00280	76 4e		 jbe	 SHORT $LN28@PxPages_Re
  00282	49 8b 01	 mov	 rax, QWORD PTR [r9]
  00285	48 89 44 24 50	 mov	 QWORD PTR tv1227[rsp], rax
  0028a	48 8b d0	 mov	 rdx, rax
  0028d	0f 1f 00	 npad	 3
$LL30@PxPages_Re:
  00290	48 8b 1a	 mov	 rbx, QWORD PTR [rdx]
  00293	41 8b f4	 mov	 esi, r12d
  00296	49 8b ec	 mov	 rbp, r12
  00299	48 85 db	 test	 rbx, rbx
  0029c	74 16		 je	 SHORT $LN26@PxPages_Re
  0029e	66 90		 npad	 2
$LL27@PxPages_Re:
  002a0	48 3b 6b 18	 cmp	 rbp, QWORD PTR [rbx+24]
  002a4	75 5e		 jne	 SHORT $LN110@PxPages_Re
  002a6	48 8b eb	 mov	 rbp, rbx
  002a9	48 8b 5b 20	 mov	 rbx, QWORD PTR [rbx+32]
  002ad	ff c6		 inc	 esi
  002af	48 85 db	 test	 rbx, rbx
  002b2	75 ec		 jne	 SHORT $LL27@PxPages_Re
$LN26@PxPages_Re:
  002b4	44 03 fe	 add	 r15d, esi
  002b7	39 72 08	 cmp	 DWORD PTR [rdx+8], esi
  002ba	75 70		 jne	 SHORT $LN111@PxPages_Re
  002bc	49 8b 06	 mov	 rax, QWORD PTR [r14]
  002bf	41 ff c0	 inc	 r8d
  002c2	48 83 c2 10	 add	 rdx, 16
  002c6	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  002ca	44 3b 41 08	 cmp	 r8d, DWORD PTR [rcx+8]
  002ce	72 c0		 jb	 SHORT $LL30@PxPages_Re
$LN28@PxPages_Re:
  002d0	41 8b 71 10	 mov	 esi, DWORD PTR [r9+16]
  002d4	44 3b fe	 cmp	 r15d, esi
  002d7	0f 84 83 00 00
	00		 je	 $LN14@PxPages_Re
  002dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  002e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@CNAMDMPB@invalid?5hh?5item?5count?5?$CFd?0?5actual@
  002ea	45 8b cf	 mov	 r9d, r15d
  002ed	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  002f1	44 8b c6	 mov	 r8d, esi
  002f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
  002fa	83 c9 ff	 or	 ecx, -1
  002fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
  00303	cc		 int	 3
$LN110@PxPages_Re:
  00304	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0030a	4c 8b 43 18	 mov	 r8, QWORD PTR [rbx+24]
  0030e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@DLILMHAM@invalid?5hh_prev?5?$CFp?0?5actual?5?$CFp?6?$AA@
  00315	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  00319	4c 8b cd	 mov	 r9, rbp
  0031c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
  00322	83 c9 ff	 or	 ecx, -1
  00325	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
  0032b	cc		 int	 3
$LN111@PxPages_Re:
  0032c	41 8b d8	 mov	 ebx, r8d
  0032f	48 03 db	 add	 rbx, rbx
  00332	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00338	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv1227[rsp]
  0033d	44 8b 44 d9 08	 mov	 r8d, DWORD PTR [rcx+rbx*8+8]
  00342	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@EEFPEMAF@invalid?5bucket?5count?5?$CFd?0?5actual?5@
  00349	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  0034d	44 8b ce	 mov	 r9d, esi
  00350	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
  00356	83 c9 ff	 or	 ecx, -1
  00359	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
  0035f	cc		 int	 3
$LN14@PxPages_Re:
  00360	49 8b dc	 mov	 rbx, r12
  00363	4d 85 ed	 test	 r13, r13
  00366	74 2d		 je	 SHORT $LN12@PxPages_Re
  00368	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL13@PxPages_Re:
  00370	41 ff c4	 inc	 r12d
  00373	49 3b 5d 08	 cmp	 rbx, QWORD PTR [r13+8]
  00377	75 4c		 jne	 SHORT $LN112@PxPages_Re
  00379	49 8b 41 20	 mov	 rax, QWORD PTR [r9+32]
  0037d	49 8b 4d 10	 mov	 rcx, QWORD PTR [r13+16]
  00381	49 8b dd	 mov	 rbx, r13
  00384	48 2b d8	 sub	 rbx, rax
  00387	48 85 c9	 test	 rcx, rcx
  0038a	74 09		 je	 SHORT $LN12@PxPages_Re
  0038c	4c 8d 2c 08	 lea	 r13, QWORD PTR [rax+rcx]
  00390	4d 85 ed	 test	 r13, r13
  00393	75 db		 jne	 SHORT $LL13@PxPages_Re
$LN12@PxPages_Re:
  00395	44 3b e6	 cmp	 r12d, esi
  00398	0f 84 d7 fd ff
	ff		 je	 $LN4@PxPages_Re
  0039e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  003a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@KALHPGEP@invalid?5app?5item?5count?5?$CFd?0?5actua@
  003ab	45 8b cc	 mov	 r9d, r12d
  003ae	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  003b2	44 8b c6	 mov	 r8d, esi
  003b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
  003bb	83 c9 ff	 or	 ecx, -1
  003be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
  003c4	cc		 int	 3
$LN112@PxPages_Re:
  003c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  003cb	4d 8b 45 08	 mov	 r8, QWORD PTR [r13+8]
  003cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@HCMMMIMF@invalid?5prev?5?$CFp?0?5actual?5?$CFp?6?$AA@
  003d6	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  003da	4c 8b cb	 mov	 r9, rbx
  003dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
  003e3	83 c9 ff	 or	 ecx, -1
  003e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
  003ec	cc		 int	 3
$LN53@PxPages_Re:

; 1368 :     } else {
; 1369 :         assert(x->count >= 1 && x->count <= 2);
; 1370 :         if (x->heaps[0] == h)

  003ed	48 39 5f 08	 cmp	 QWORD PTR [rdi+8], rbx
  003f1	75 08		 jne	 SHORT $LN2@PxPages_Re

; 1371 :             x->heaps[0] = x->heaps[1];

  003f3	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
  003f7	48 89 47 08	 mov	 QWORD PTR [rdi+8], rax
$LN2@PxPages_Re:

; 1372 :         else
; 1373 :             assert(x->heaps[1] == h);
; 1374 :         x->heaps[1] = NULL;
; 1375 :         x->count = 1;

  003fb	b8 01 00 00 00	 mov	 eax, 1
  00400	4c 89 67 10	 mov	 QWORD PTR [rdi+16], r12
  00404	66 89 47 18	 mov	 WORD PTR [rdi+24], ax

; 1376 :     }
; 1377 : }

  00408	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0040c	41 5e		 pop	 r14
  0040e	41 5c		 pop	 r12
  00410	5f		 pop	 rdi
  00411	5b		 pop	 rbx
  00412	c3		 ret	 0
$LN123@PxPages_Re:
_PxPages_RemoveHeapPage ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@NOFCKPEP@?$FL?$CFd?$FN?5base?3?50x?$CFllx?0?5count?3?5?$CFd?6?$AA@ ; `string'
PUBLIC	PxPages_Dump
EXTRN	__imp_printf:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxPages_Dump DD imagerel $LN14
	DD	imagerel $LN14+10
	DD	imagerel $unwind$PxPages_Dump
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PxPages_Dump DD imagerel $LN14+10
	DD	imagerel $LN14+73
	DD	imagerel $chain$0$PxPages_Dump
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PxPages_Dump DD imagerel $LN14+73
	DD	imagerel $LN14+75
	DD	imagerel $chain$1$PxPages_Dump
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PxPages_Dump DD 021H
	DD	imagerel $LN14
	DD	imagerel $LN14+10
	DD	imagerel $unwind$PxPages_Dump
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PxPages_Dump DD 020521H
	DD	063405H
	DD	imagerel $LN14
	DD	imagerel $LN14+10
	DD	imagerel $unwind$PxPages_Dump
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxPages_Dump DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0BO@NOFCKPEP@?$FL?$CFd?$FN?5base?3?50x?$CFllx?0?5count?3?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BO@NOFCKPEP@?$FL?$CFd?$FN?5base?3?50x?$CFllx?0?5count?3?5?$CFd?6?$AA@ DB '['
	DB	'%d] base: 0x%llx, count: %d', 0aH, 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PxPages_Dump
_TEXT	SEGMENT
pages$ = 48
PxPages_Dump PROC					; COMDAT

; 1380 : {

$LN14:

; 1381 :     PxPages *x, *t;
; 1382 :     int i = 0;
; 1383 :     HASH_ITER(hh, pages, x, t) {

  00000	48 85 c9	 test	 rcx, rcx
  00003	74 44		 je	 SHORT $LN13@PxPages_Du
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0000f	48 8b 59 30	 mov	 rbx, QWORD PTR [rcx+48]
  00013	33 ff		 xor	 edi, edi
$LL7@PxPages_Du:

; 1384 :         i++;
; 1385 :         printf("[%d] base: 0x%llx, count: %d\n", i, x->base, x->count);

  00015	44 0f bf 49 18	 movsx	 r9d, WORD PTR [rcx+24]
  0001a	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  0001d	ff c7		 inc	 edi
  0001f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@NOFCKPEP@?$FL?$CFd?$FN?5base?3?50x?$CFllx?0?5count?3?5?$CFd?6?$AA@
  00026	8b d7		 mov	 edx, edi
  00028	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf
  0002e	48 8b cb	 mov	 rcx, rbx
  00031	48 85 db	 test	 rbx, rbx
  00034	74 04		 je	 SHORT $LN9@PxPages_Du

; 1381 :     PxPages *x, *t;
; 1382 :     int i = 0;
; 1383 :     HASH_ITER(hh, pages, x, t) {

  00036	48 8b 5b 30	 mov	 rbx, QWORD PTR [rbx+48]
$LN9@PxPages_Du:
  0003a	48 85 c9	 test	 rcx, rcx
  0003d	75 d6		 jne	 SHORT $LL7@PxPages_Du
  0003f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1386 :     }
; 1387 : }

  00044	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00048	5f		 pop	 rdi
$LN13@PxPages_Du:
  00049	f3 c3		 fatret	 0
PxPages_Dump ENDP
_TEXT	ENDS
PUBLIC	_PxState_RegisterHeap
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PxState_RegisterHeap DD imagerel $LN9
	DD	imagerel $LN9+37
	DD	imagerel $unwind$_PxState_RegisterHeap
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_PxState_RegisterHeap DD imagerel $LN9+37
	DD	imagerel $LN9+155
	DD	imagerel $chain$0$_PxState_RegisterHeap
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_PxState_RegisterHeap DD imagerel $LN9+155
	DD	imagerel $LN9+179
	DD	imagerel $chain$1$_PxState_RegisterHeap
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_PxState_RegisterHeap DD 021H
	DD	imagerel $LN9
	DD	imagerel $LN9+37
	DD	imagerel $unwind$_PxState_RegisterHeap
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_PxState_RegisterHeap DD 020521H
	DD	0a3405H
	DD	imagerel $LN9
	DD	imagerel $LN9+37
	DD	imagerel $unwind$_PxState_RegisterHeap
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PxState_RegisterHeap DD 060d01H
	DD	0b540dH
	DD	0c009320dH
	DD	060067007H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PxState_RegisterHeap
_TEXT	SEGMENT
lower$127111 = 64
px$ = 64
upper$127112 = 72
h$ = 72
c$ = 80
_PxState_RegisterHeap PROC				; COMDAT

; 1400 : {

$LN9:
  00000	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	41 54		 push	 r12
  00009	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000d	48 8b e9	 mov	 rbp, rcx

; 1401 :     int i;
; 1402 : 
; 1403 :     AcquireSRWLockExclusive(&px->pages_srwlock);

  00010	48 83 c1 60	 add	 rcx, 96			; 00000060H
  00014	48 8b f2	 mov	 rsi, rdx
  00017	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AcquireSRWLockExclusive

; 1404 : 
; 1405 :     assert((h->size % h->page_size) == 0);
; 1406 : 
; 1407 :     for (i = 0; i < h->pages; i++) {

  0001d	33 ff		 xor	 edi, edi
  0001f	48 39 7e 28	 cmp	 QWORD PTR [rsi+40], rdi
  00023	76 76		 jbe	 SHORT $LN2@PxState_Re
  00025	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  0002a	66 0f 1f 44 00
	00		 npad	 6
$LL4@PxState_Re:

; 1408 :         void *p;
; 1409 :         Px_UINTPTR lower, upper;
; 1410 : 
; 1411 :         p = Px_PTR_ADD(h->base, (i * h->page_size));

  00030	48 63 4e 20	 movsxd	 rcx, DWORD PTR [rsi+32]

; 1412 : 
; 1413 :         lower = Px_PAGESIZE_ALIGN_DOWN(p, h->page_size);
; 1414 :         upper = Px_PAGESIZE_ALIGN_UP(p, h->page_size);
; 1415 : 
; 1416 :         _PxPages_AddHeapPage(&(px->pages), &lower, h);

  00034	48 8d 54 24 40	 lea	 rdx, QWORD PTR lower$127111[rsp]
  00039	8b c1		 mov	 eax, ecx
  0003b	0f af c7	 imul	 eax, edi
  0003e	4c 63 c0	 movsxd	 r8, eax
  00041	48 8b c1	 mov	 rax, rcx
  00044	4c 03 46 10	 add	 r8, QWORD PTR [rsi+16]
  00048	48 f7 d8	 neg	 rax
  0004b	49 23 c0	 and	 rax, r8
  0004e	4a 8d 5c 01 ff	 lea	 rbx, QWORD PTR [rcx+r8-1]
  00053	4c 8b c6	 mov	 r8, rsi
  00056	48 89 44 24 40	 mov	 QWORD PTR lower$127111[rsp], rax
  0005b	48 8d 41 ff	 lea	 rax, QWORD PTR [rcx-1]
  0005f	48 8d 4d 68	 lea	 rcx, QWORD PTR [rbp+104]
  00063	48 f7 d0	 not	 rax
  00066	48 23 d8	 and	 rbx, rax
  00069	48 89 5c 24 48	 mov	 QWORD PTR upper$127112[rsp], rbx
  0006e	e8 00 00 00 00	 call	 _PxPages_AddHeapPage

; 1417 :         if (lower != upper)

  00073	48 39 5c 24 40	 cmp	 QWORD PTR lower$127111[rsp], rbx
  00078	74 11		 je	 SHORT $LN3@PxState_Re

; 1418 :             _PxPages_AddHeapPage(&(px->pages), &upper, h);

  0007a	48 8d 54 24 48	 lea	 rdx, QWORD PTR upper$127112[rsp]
  0007f	48 8d 4d 68	 lea	 rcx, QWORD PTR [rbp+104]
  00083	4c 8b c6	 mov	 r8, rsi
  00086	e8 00 00 00 00	 call	 _PxPages_AddHeapPage
$LN3@PxState_Re:

; 1404 : 
; 1405 :     assert((h->size % h->page_size) == 0);
; 1406 : 
; 1407 :     for (i = 0; i < h->pages; i++) {

  0008b	ff c7		 inc	 edi
  0008d	48 63 c7	 movsxd	 rax, edi
  00090	48 3b 46 28	 cmp	 rax, QWORD PTR [rsi+40]
  00094	72 9a		 jb	 SHORT $LL4@PxState_Re
  00096	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
$LN2@PxState_Re:

; 1419 :     }
; 1420 :     ReleaseSRWLockExclusive(&px->pages_srwlock);

  0009b	48 8d 4d 60	 lea	 rcx, QWORD PTR [rbp+96]

; 1421 : 
; 1422 : }

  0009f	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  000a4	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a8	41 5c		 pop	 r12
  000aa	5f		 pop	 rdi
  000ab	5e		 pop	 rsi
  000ac	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_ReleaseSRWLockExclusive
_PxState_RegisterHeap ENDP
_TEXT	ENDS
PUBLIC	_Px_ObjectSignature
EXTRN	__C_specific_handler:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Px_ObjectSignature DD imagerel $LN13
	DD	imagerel $LN13+168
	DD	imagerel $unwind$_Px_ObjectSignature
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Px_ObjectSignature$filt$0 DD imagerel _Px_ObjectSignature$filt$0
	DD	imagerel _Px_ObjectSignature$filt$0+26
	DD	imagerel $unwind$_Px_ObjectSignature$filt$0
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Px_ObjectSignature$filt$0 DD 010201H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Px_ObjectSignature DD 010409H
	DD	02204H
	DD	imagerel __C_specific_handler
	DD	01H
	DD	imagerel $LN13+47
	DD	imagerel $LN13+56
	DD	imagerel _Px_ObjectSignature$filt$0
	DD	imagerel $LN13+56
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _Px_ObjectSignature
_TEXT	SEGMENT
s$ = 0
m$ = 32
_Px_ObjectSignature PROC				; COMDAT

; 1517 : {

$LN13:
  00000	48 83 ec 18	 sub	 rsp, 24

; 1518 :     PyObject     *y;
; 1519 :     Py_uintptr_t  s;
; 1520 :     unsigned long signature;
; 1521 : 
; 1522 :     if (!m)

  00004	48 85 c9	 test	 rcx, rcx
  00007	75 08		 jne	 SHORT $LN5@Px_ObjectS

; 1523 :         return _OBJSIG_NULL;

  00009	8d 41 02	 lea	 eax, QWORD PTR [rcx+2]
  0000c	e9 92 00 00 00	 jmp	 $LN6@Px_ObjectS
$LN5@Px_ObjectS:

; 1524 : 
; 1525 :     assert(_Px_ObjectSignature_CallDepth == 0);
; 1526 :     _Px_ObjectSignature_CallDepth++;

  00011	44 8b 15 00 00
	00 00		 mov	 r10d, DWORD PTR _tls_index
  00018	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00021	41 bb 00 00 00
	00		 mov	 r11d, OFFSET FLAT:_Px_ObjectSignature_CallDepth
  00027	4a 8b 04 d0	 mov	 rax, QWORD PTR [rax+r10*8]
  0002b	42 ff 04 18	 inc	 DWORD PTR [rax+r11]

; 1527 : 
; 1528 :     y = (PyObject *)m;
; 1529 : 
; 1530 :     __try {
; 1531 :         s = ((Py_uintptr_t)(y->is_px));

  0002f	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00032	48 89 04 24	 mov	 QWORD PTR s$[rsp], rax

; 1532 :     } __except(

  00036	eb 13		 jmp	 SHORT $LN12@Px_ObjectS
$LN10@Px_ObjectS:

; 1533 :         GetExceptionCode() == EXCEPTION_ACCESS_VIOLATION ?
; 1534 :             EXCEPTION_EXECUTE_HANDLER :
; 1535 :             EXCEPTION_CONTINUE_SEARCH
; 1536 :     ) {
; 1537 :         s = (Py_uintptr_t)NULL;

  00038	33 c0		 xor	 eax, eax
  0003a	48 89 04 24	 mov	 QWORD PTR s$[rsp], rax
  0003e	41 bb 00 00 00
	00		 mov	 r11d, OFFSET FLAT:_Px_ObjectSignature_CallDepth
  00044	44 8b 15 00 00
	00 00		 mov	 r10d, DWORD PTR _tls_index
$LN12@Px_ObjectS:

; 1538 :     }
; 1539 : 
; 1540 :     if (!s) {

  0004b	48 85 c0	 test	 rax, rax
  0004e	75 06		 jne	 SHORT $LN3@Px_ObjectS

; 1541 :         signature = _OBJSIG_UNKNOWN;

  00050	44 8d 48 04	 lea	 r9d, QWORD PTR [rax+4]

; 1542 :         goto done;

  00054	eb 33		 jmp	 SHORT $done$127198
$LN3@Px_ObjectS:

; 1543 :     }
; 1544 : 
; 1545 :     if (s == (Py_uintptr_t)_Py_NOT_PARALLEL) {

  00056	48 b9 78 56 ef
	be 34 12 ad de	 mov	 rcx, -2401243008567650696 ; dead1234beef5678H
  00060	48 3b c1	 cmp	 rax, rcx
  00063	75 08		 jne	 SHORT $LN2@Px_ObjectS

; 1546 :         assert(y->px == _Py_NOT_PARALLEL);
; 1547 :         signature = _OBJSIG_PY;

  00065	41 b9 08 00 00
	00		 mov	 r9d, 8

; 1548 :         goto done;

  0006b	eb 1c		 jmp	 SHORT $done$127198
$LN2@Px_ObjectS:

; 1549 :     }
; 1550 : 
; 1551 :     if (s == (Py_uintptr_t)_Py_IS_PARALLEL) {

  0006d	ba 10 00 00 00	 mov	 edx, 16
  00072	48 b9 ad de 32
	54 ef be 76 98	 mov	 rcx, -7460565797573566803 ; 9876beef5432deadH
  0007c	41 b9 04 00 00
	00		 mov	 r9d, 4
  00082	48 3b c1	 cmp	 rax, rcx
  00085	44 0f 44 ca	 cmove	 r9d, edx
$done$127198:

; 1552 :         assert(y->px != NULL);
; 1553 :         assert(Py_ASPX(y)->signature == _PxObjectSignature);
; 1554 :         signature = _OBJSIG_PX;
; 1555 :         goto done;
; 1556 :     }
; 1557 : 
; 1558 :     /* We'll hit this if m is a valid pointer (i.e. dereferencing m->is_px
; 1559 :      * doesn't trigger the SEH), but it doesn't point to something with a
; 1560 :      * valid object signature.
; 1561 :      */
; 1562 :     signature = _OBJSIG_UNKNOWN;
; 1563 : done:
; 1564 :     _Px_ObjectSignature_CallDepth--;

  00089	41 8b d2	 mov	 edx, r10d
  0008c	65 48 8b 0c 25
	58 00 00 00	 mov	 rcx, QWORD PTR gs:88
  00095	45 8b c3	 mov	 r8d, r11d
  00098	48 8b 14 d1	 mov	 rdx, QWORD PTR [rcx+rdx*8]
  0009c	42 ff 0c 02	 dec	 DWORD PTR [rdx+r8]

; 1565 :     return signature;

  000a0	41 8b c1	 mov	 eax, r9d
$LN6@Px_ObjectS:

; 1566 : }

  000a3	48 83 c4 18	 add	 rsp, 24
  000a7	c3		 ret	 0
_Px_ObjectSignature ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
s$ = 0
m$ = 32
_Px_ObjectSignature$filt$0 PROC
  00000	40 55		 push	 rbp
  00002	48 8b ea	 mov	 rbp, rdx
$LN9@Px_ObjectS@2:
  00005	48 8b 01	 mov	 rax, QWORD PTR [rcx]

; 1536 :     ) {

  00008	33 c9		 xor	 ecx, ecx
  0000a	81 38 05 00 00
	c0		 cmp	 DWORD PTR [rax], -1073741819 ; c0000005H
  00010	0f 94 c1	 sete	 cl
  00013	8b c1		 mov	 eax, ecx
  00015	8b c1		 mov	 eax, ecx
$LN11@Px_ObjectS@2:
  00017	5d		 pop	 rbp
  00018	c3		 ret	 0
  00019	cc		 int	 3
_Px_ObjectSignature$filt$0 ENDP
text$x	ENDS
PUBLIC	_Px_SafeObjectSignatureTest
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Px_SafeObjectSignatureTest DD imagerel $LN17
	DD	imagerel $LN17+201
	DD	imagerel $unwind$_Px_SafeObjectSignatureTest
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Px_SafeObjectSignatureTest$filt$0 DD imagerel _Px_SafeObjectSignatureTest$filt$0
	DD	imagerel _Px_SafeObjectSignatureTest$filt$0+26
	DD	imagerel $unwind$_Px_SafeObjectSignatureTest$filt$0
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Px_SafeObjectSignatureTest$filt$1 DD imagerel _Px_SafeObjectSignatureTest$filt$1
	DD	imagerel _Px_SafeObjectSignatureTest$filt$1+26
	DD	imagerel $unwind$_Px_SafeObjectSignatureTest$filt$1
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Px_SafeObjectSignatureTest$filt$1 DD 010201H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Px_SafeObjectSignatureTest$filt$0 DD 010201H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Px_SafeObjectSignatureTest DD 010909H
	DD	02209H
	DD	imagerel __C_specific_handler
	DD	02H
	DD	imagerel $LN17+54
	DD	imagerel $LN17+64
	DD	imagerel _Px_SafeObjectSignatureTest$filt$0
	DD	imagerel $LN17+64
	DD	imagerel $LN17+125
	DD	imagerel $LN17+144
	DD	imagerel _Px_SafeObjectSignatureTest$filt$1
	DD	imagerel $LN17+144
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _Px_SafeObjectSignatureTest
_TEXT	SEGMENT
is_px$ = 0
s$ = 8
m$ = 32
_Px_SafeObjectSignatureTest PROC			; COMDAT

; 1570 : {

$LN17:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24
  00009	4c 8b c1	 mov	 r8, rcx

; 1571 :     PyObject     *y;
; 1572 :     PxObject     *x;
; 1573 :     Py_uintptr_t  s;
; 1574 :     int is_py;
; 1575 :     int is_px;
; 1576 :     unsigned long signature;
; 1577 : 
; 1578 :     if (!m)

  0000c	48 85 c9	 test	 rcx, rcx
  0000f	75 08		 jne	 SHORT $LN5@Px_SafeObj

; 1579 :         return _OBJSIG_NULL;

  00011	8d 41 02	 lea	 eax, QWORD PTR [rcx+2]
  00014	e9 ab 00 00 00	 jmp	 $LN6@Px_SafeObj
$LN5@Px_SafeObj:

; 1580 : 
; 1581 :     y = (PyObject *)m;
; 1582 : 
; 1583 :     assert(_Px_SafeObjectSignatureTest_CallDepth == 0);
; 1584 :     _Px_SafeObjectSignatureTest_CallDepth++;

  00019	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  0001f	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00028	41 b9 00 00 00
	00		 mov	 r9d, OFFSET FLAT:_Px_SafeObjectSignatureTest_CallDepth
  0002e	48 8b 04 d0	 mov	 rax, QWORD PTR [rax+rdx*8]
  00032	42 ff 04 08	 inc	 DWORD PTR [rax+r9]

; 1585 : 
; 1586 :     __try {
; 1587 :         s = ((Py_uintptr_t)(y->is_px));

  00036	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00039	48 89 4c 24 08	 mov	 QWORD PTR s$[rsp], rcx

; 1588 :     } __except(

  0003e	eb 12		 jmp	 SHORT $LN12@Px_SafeObj
$LN10@Px_SafeObj:

; 1589 :         GetExceptionCode() == EXCEPTION_ACCESS_VIOLATION ?
; 1590 :             EXCEPTION_EXECUTE_HANDLER :
; 1591 :             EXCEPTION_CONTINUE_SEARCH
; 1592 :     ) {
; 1593 :         s = (Py_uintptr_t)NULL;

  00040	33 c9		 xor	 ecx, ecx
  00042	48 89 4c 24 08	 mov	 QWORD PTR s$[rsp], rcx
  00047	41 b9 00 00 00
	00		 mov	 r9d, OFFSET FLAT:_Px_SafeObjectSignatureTest_CallDepth
  0004d	4c 8b 44 24 20	 mov	 r8, QWORD PTR m$[rsp]
$LN12@Px_SafeObj:

; 1594 :     }
; 1595 : 
; 1596 :     if (!s) {

  00052	48 85 c9	 test	 rcx, rcx
  00055	75 05		 jne	 SHORT $LN3@Px_SafeObj

; 1597 :         signature = _OBJSIG_UNKNOWN;

  00057	8d 41 04	 lea	 eax, QWORD PTR [rcx+4]

; 1598 :         goto done;

  0005a	eb 4e		 jmp	 SHORT $done$127227
$LN3@Px_SafeObj:

; 1599 :     }
; 1600 : 
; 1601 :     is_py = (s == (Py_uintptr_t)_Py_NOT_PARALLEL);

  0005c	33 d2		 xor	 edx, edx
  0005e	8b c2		 mov	 eax, edx
  00060	49 ba 78 56 ef
	be 34 12 ad de	 mov	 r10, -2401243008567650696 ; dead1234beef5678H
  0006a	49 3b ca	 cmp	 rcx, r10
  0006d	0f 94 c0	 sete	 al

; 1602 : 
; 1603 :     if (is_py) {

  00070	85 c0		 test	 eax, eax
  00072	74 05		 je	 SHORT $LN2@Px_SafeObj

; 1604 :         signature = _OBJSIG_PY;

  00074	8d 42 08	 lea	 eax, QWORD PTR [rdx+8]

; 1605 :         goto done;

  00077	eb 31		 jmp	 SHORT $done$127227
$LN2@Px_SafeObj:

; 1606 :     }
; 1607 : 
; 1608 :     is_px = -1;
; 1609 :     x = Py_ASPX(y);

  00079	49 8b 48 08	 mov	 rcx, QWORD PTR [r8+8]

; 1610 :     __try {
; 1611 :         is_px = (x->signature == _PxObjectSignature);

  0007d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PxObjectSignature
  00084	48 39 41 28	 cmp	 QWORD PTR [rcx+40], rax
  00088	0f 94 c2	 sete	 dl
  0008b	89 14 24	 mov	 DWORD PTR is_px$[rsp], edx

; 1612 :     } __except(

  0008e	eb 0b		 jmp	 SHORT $LN16@Px_SafeObj
$LN14@Px_SafeObj:

; 1613 :         GetExceptionCode() == EXCEPTION_ACCESS_VIOLATION ?
; 1614 :             EXCEPTION_EXECUTE_HANDLER :
; 1615 :             EXCEPTION_CONTINUE_SEARCH
; 1616 :     ) {
; 1617 :         is_px = 0;

  00090	33 d2		 xor	 edx, edx
  00092	89 14 24	 mov	 DWORD PTR is_px$[rsp], edx
  00095	41 b9 00 00 00
	00		 mov	 r9d, OFFSET FLAT:_Px_SafeObjectSignatureTest_CallDepth
$LN16@Px_SafeObj:

; 1618 :     }
; 1619 : 
; 1620 :     assert(is_px != -1);
; 1621 : 
; 1622 :     signature = (is_px ? _OBJSIG_PX : _OBJSIG_UNKNOWN);

  0009b	b8 04 00 00 00	 mov	 eax, 4
  000a0	b9 10 00 00 00	 mov	 ecx, 16
  000a5	85 d2		 test	 edx, edx
  000a7	0f 45 c1	 cmovne	 eax, ecx
$done$127227:

; 1623 : done:
; 1624 :     _Px_SafeObjectSignatureTest_CallDepth--;

  000aa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  000b0	65 48 8b 0c 25
	58 00 00 00	 mov	 rcx, QWORD PTR gs:88
  000b9	45 8b c1	 mov	 r8d, r9d
  000bc	48 8b 14 d1	 mov	 rdx, QWORD PTR [rcx+rdx*8]
  000c0	42 ff 0c 02	 dec	 DWORD PTR [rdx+r8]
$LN6@Px_SafeObj:

; 1625 :     return signature;
; 1626 : }

  000c4	48 83 c4 18	 add	 rsp, 24
  000c8	c3		 ret	 0
_Px_SafeObjectSignatureTest ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
is_px$ = 0
s$ = 8
m$ = 32
_Px_SafeObjectSignatureTest$filt$0 PROC
  00000	40 55		 push	 rbp
  00002	48 8b ea	 mov	 rbp, rdx
$LN9@Px_SafeObj@2:
  00005	48 8b 01	 mov	 rax, QWORD PTR [rcx]

; 1592 :     ) {

  00008	33 c9		 xor	 ecx, ecx
  0000a	81 38 05 00 00
	c0		 cmp	 DWORD PTR [rax], -1073741819 ; c0000005H
  00010	0f 94 c1	 sete	 cl
  00013	8b c1		 mov	 eax, ecx
  00015	8b c1		 mov	 eax, ecx
$LN11@Px_SafeObj@2:
  00017	5d		 pop	 rbp
  00018	c3		 ret	 0
  00019	cc		 int	 3
_Px_SafeObjectSignatureTest$filt$0 ENDP
; Function compile flags: /Ogtpy
is_px$ = 0
s$ = 8
m$ = 32
_Px_SafeObjectSignatureTest$filt$1 PROC
  00020	40 55		 push	 rbp
  00022	48 8b ea	 mov	 rbp, rdx
$LN13@Px_SafeObj@3:
  00025	48 8b 01	 mov	 rax, QWORD PTR [rcx]

; 1616 :     ) {

  00028	33 c9		 xor	 ecx, ecx
  0002a	81 38 05 00 00
	c0		 cmp	 DWORD PTR [rax], -1073741819 ; c0000005H
  00030	0f 94 c1	 sete	 cl
  00033	8b c1		 mov	 eax, ecx
  00035	8b c1		 mov	 eax, ecx
$LN15@Px_SafeObj@3:
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
  00039	cc		 int	 3
_Px_SafeObjectSignatureTest$filt$1 ENDP
text$x	ENDS
PUBLIC	??_C@_0DG@NAJIJNLK@WARNING?$CB?5expected?5_MEMSIG_PY?5but@ ; `string'
PUBLIC	_PxWarn_PyMemUnknown
EXTRN	PySys_FormatStderr:PROC
;	COMDAT ??_C@_0DG@NAJIJNLK@WARNING?$CB?5expected?5_MEMSIG_PY?5but@
CONST	SEGMENT
??_C@_0DG@NAJIJNLK@WARNING?$CB?5expected?5_MEMSIG_PY?5but@ DB 'WARNING! e'
	DB	'xpected _MEMSIG_PY but got _MEMSIG_UNKNOWN', 0aH, 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PxWarn_PyMemUnknown
_TEXT	SEGMENT
_PxWarn_PyMemUnknown PROC				; COMDAT

; 1691 :     PySys_FormatStderr(
; 1692 :         "WARNING! expected _MEMSIG_PY but got _MEMSIG_UNKNOWN\n"
; 1693 :     );

  00000	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DG@NAJIJNLK@WARNING?$CB?5expected?5_MEMSIG_PY?5but@

; 1694 : }

  00007	e9 00 00 00 00	 jmp	 PySys_FormatStderr
_PxWarn_PyMemUnknown ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DB@BAIDDJO@_PyParallel_ContextGuardFailure?3@ ; `string'
PUBLIC	??_C@_0CO@CEBGPBEF@?$CFs?5called?5outside?5of?5parallel?5co@ ; `string'
PUBLIC	??_C@_0CP@EFIOEGMI@?$CFs?5called?5from?5within?5parallel?5c@ ; `string'
PUBLIC	_PyParallel_ContextGuardFailure
EXTRN	__imp__snprintf:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_ContextGuardFailure DD imagerel $LN8
	DD	imagerel $LN8+148
	DD	imagerel $unwind$_PyParallel_ContextGuardFailure
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_ContextGuardFailure DD 091701H
	DD	01a6417H
	DD	0195417H
	DD	0183417H
	DD	0160117H
	DD	07010H
xdata	ENDS
;	COMDAT ??_C@_0DB@BAIDDJO@_PyParallel_ContextGuardFailure?3@
CONST	SEGMENT
??_C@_0DB@BAIDDJO@_PyParallel_ContextGuardFailure?3@ DB '_PyParallel_Cont'
	DB	'extGuardFailure: snprintf failed', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@CEBGPBEF@?$CFs?5called?5outside?5of?5parallel?5co@
CONST	SEGMENT
??_C@_0CO@CEBGPBEF@?$CFs?5called?5outside?5of?5parallel?5co@ DB '%s calle'
	DB	'd outside of parallel context (%s:%d)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@EFIOEGMI@?$CFs?5called?5from?5within?5parallel?5c@
CONST	SEGMENT
??_C@_0CP@EFIOEGMI@?$CFs?5called?5from?5within?5parallel?5c@ DB '%s calle'
	DB	'd from within parallel context (%s:%d)', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyParallel_ContextGuardFailure
_TEXT	SEGMENT
buf$ = 48
function$ = 192
filename$ = 200
lineno$ = 208
was_px_ctx$ = 216
_PyParallel_ContextGuardFailure PROC			; COMDAT

; 1798 : {

$LN8:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  00017	48 8b e9	 mov	 rbp, rcx
  0001a	41 8b f8	 mov	 edi, r8d
  0001d	48 8b f2	 mov	 rsi, rdx

; 1799 :     int err;
; 1800 :     char buf[128], *fmt;
; 1801 :     memset((void *)buf, 0, sizeof(buf));

  00020	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  00025	33 d2		 xor	 edx, edx
  00027	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  0002d	41 8b d9	 mov	 ebx, r9d
  00030	e8 00 00 00 00	 call	 memset

; 1802 : 
; 1803 :     if (was_px_ctx)

  00035	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0CP@EFIOEGMI@?$CFs?5called?5from?5within?5parallel?5c@
  0003c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CO@CEBGPBEF@?$CFs?5called?5outside?5of?5parallel?5co@
  00043	85 db		 test	 ebx, ebx

; 1804 :         fmt = "%s called outside of parallel context (%s:%d)";
; 1805 :     else
; 1806 :         fmt = "%s called from within parallel context (%s:%d)";
; 1807 : 
; 1808 :     err = snprintf(buf, sizeof(buf), fmt, function, filename, lineno);

  00045	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  0004a	4c 8b cd	 mov	 r9, rbp
  0004d	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00052	4c 0f 44 c0	 cmove	 r8, rax
  00056	89 7c 24 28	 mov	 DWORD PTR [rsp+40], edi
  0005a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0005f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__snprintf

; 1809 :     if (err == -1)
; 1810 :         Py_FatalError("_PyParallel_ContextGuardFailure: snprintf failed");

  00065	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DB@BAIDDJO@_PyParallel_ContextGuardFailure?3@
  0006c	83 f8 ff	 cmp	 eax, -1
  0006f	74 05		 je	 SHORT $LN7@PyParallel@2

; 1811 :     else
; 1812 :         Py_FatalError(buf);

  00071	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
$LN7@PyParallel@2:
  00076	e8 00 00 00 00	 call	 Py_FatalError

; 1813 : }

  0007b	4c 8d 9c 24 b0
	00 00 00	 lea	 r11, QWORD PTR [rsp+176]
  00083	49 8b 5b 10	 mov	 rbx, QWORD PTR [r11+16]
  00087	49 8b 6b 18	 mov	 rbp, QWORD PTR [r11+24]
  0008b	49 8b 73 20	 mov	 rsi, QWORD PTR [r11+32]
  0008f	49 8b e3	 mov	 rsp, r11
  00092	5f		 pop	 rdi
  00093	c3		 ret	 0
_PyParallel_ContextGuardFailure ENDP
_TEXT	ENDS
PUBLIC	_PyHeap_Malloc
PUBLIC	Heap_Init
EXTRN	__imp_HeapAlloc:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel_private.h
pdata	SEGMENT
$pdata$Heap_Init DD imagerel $LN16
	DD	imagerel $LN16+297
	DD	imagerel $unwind$Heap_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Heap_Init DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT Heap_Init
_TEXT	SEGMENT
c$ = 48
n$ = 56
page_size$ = 64
Heap_Init PROC						; COMDAT

; 1823 : {

$LN16:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1824 :     Heap  *h;
; 1825 :     Stats *s = &(c->stats);
; 1826 :     size_t size;
; 1827 :     int flags;
; 1828 : 
; 1829 :     assert(!Px_TLS_HEAP_ACTIVE);
; 1830 : 
; 1831 :     if (!page_size)

  00014	b8 00 00 20 00	 mov	 eax, 2097152		; 00200000H
  00019	45 85 c0	 test	 r8d, r8d
  0001c	48 8b f9	 mov	 rdi, rcx
  0001f	44 0f 44 c0	 cmove	 r8d, eax

; 1832 :         page_size = Px_LARGE_PAGE_SIZE;
; 1833 : 
; 1834 :     if (n < Px_DEFAULT_HEAP_SIZE)

  00023	48 3b d0	 cmp	 rdx, rax

; 1835 :         size = Px_DEFAULT_HEAP_SIZE;
; 1836 :     else
; 1837 :         size = n;
; 1838 : 
; 1839 :     size = Px_PAGESIZE_ALIGN_UP(size, page_size);
; 1840 : 
; 1841 :     assert((size % page_size) == 0);
; 1842 : 
; 1843 :     if (!c->h) {

  00026	bd 01 00 00 00	 mov	 ebp, 1
  0002b	48 0f 42 d0	 cmovb	 rdx, rax
  0002f	49 63 c8	 movsxd	 rcx, r8d
  00032	48 8d 41 ff	 lea	 rax, QWORD PTR [rcx-1]
  00036	48 8d 74 11 ff	 lea	 rsi, QWORD PTR [rcx+rdx-1]
  0003b	48 f7 d0	 not	 rax
  0003e	48 23 f0	 and	 rsi, rax
  00041	48 8b 87 d0 00
	00 00		 mov	 rax, QWORD PTR [rdi+208]
  00048	48 85 c0	 test	 rax, rax
  0004b	75 09		 jne	 SHORT $LN3@Heap_Init

; 1844 :         /* First init. */
; 1845 :         h = &(c->heap);

  0004d	48 8d 5f 18	 lea	 rbx, QWORD PTR [rdi+24]

; 1846 :         h->id = 1;

  00051	89 6b 50	 mov	 DWORD PTR [rbx+80], ebp

; 1847 :     } else {

  00054	eb 0f		 jmp	 SHORT $LN2@Heap_Init
$LN3@Heap_Init:

; 1848 :         h = c->h->sle_next;

  00056	48 8b 58 08	 mov	 rbx, QWORD PTR [rax+8]

; 1849 :         h->sle_prev = c->h;

  0005a	48 89 03	 mov	 QWORD PTR [rbx], rax

; 1850 :         h->id = h->sle_prev->id + 1;

  0005d	8b 40 50	 mov	 eax, DWORD PTR [rax+80]
  00060	ff c0		 inc	 eax
  00062	89 43 50	 mov	 DWORD PTR [rbx+80], eax
$LN2@Heap_Init:

; 1851 :     }
; 1852 : 
; 1853 :     assert(h);
; 1854 : 
; 1855 :     h->page_size = page_size;
; 1856 :     h->pages = size / page_size;

  00065	33 d2		 xor	 edx, edx
  00067	48 8b c6	 mov	 rax, rsi
  0006a	44 89 43 20	 mov	 DWORD PTR [rbx+32], r8d
  0006e	48 f7 f1	 div	 rcx

; 1857 : 
; 1858 :     h->size = size;

  00071	48 89 73 38	 mov	 QWORD PTR [rbx+56], rsi

; 1859 :     flags = HEAP_ZERO_MEMORY;
; 1860 :     h->base = h->next = HeapAlloc(c->heap_handle, flags, h->size);

  00075	4c 8b c6	 mov	 r8, rsi
  00078	48 89 43 28	 mov	 QWORD PTR [rbx+40], rax
  0007c	48 8b 4f 10	 mov	 rcx, QWORD PTR [rdi+16]
  00080	ba 08 00 00 00	 mov	 edx, 8
  00085	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_HeapAlloc

; 1861 :     if (!h->base)
; 1862 :         return PyErr_SetFromWindowsErr(0);

  0008b	33 c9		 xor	 ecx, ecx
  0008d	4c 8b d8	 mov	 r11, rax
  00090	48 89 43 18	 mov	 QWORD PTR [rbx+24], rax
  00094	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax
  00098	48 85 c0	 test	 rax, rax
  0009b	75 07		 jne	 SHORT $LN1@Heap_Init
  0009d	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  000a2	eb 70		 jmp	 SHORT $LN7@Heap_Init
$LN1@Heap_Init:

; 1863 :     h->next_alignment = Px_GET_ALIGNMENT(h->base);

  000a4	40 84 c5	 test	 al, bpl
  000a7	75 14		 jne	 SHORT $LN9@Heap_Init
  000a9	0f 1f 80 00 00
	00 00		 npad	 7
$LL10@Heap_Init:
  000b0	ff c1		 inc	 ecx
  000b2	49 8b c3	 mov	 rax, r11
  000b5	48 d3 e8	 shr	 rax, cl
  000b8	40 84 c5	 test	 al, bpl
  000bb	74 f3		 je	 SHORT $LL10@Heap_Init
$LN9@Heap_Init:

; 1864 :     h->remaining = size;

  000bd	48 89 73 48	 mov	 QWORD PTR [rbx+72], rsi
  000c1	48 d3 e5	 shl	 rbp, cl

; 1865 :     s->remaining = size;
; 1866 :     s->size += size;
; 1867 :     s->heaps++;
; 1868 :     c->h = h;
; 1869 :     h->ctx = c;
; 1870 :     h->sle_next = (Heap *)_PyHeap_Malloc(c, sizeof(Heap), 0, 0);

  000c4	45 33 c9	 xor	 r9d, r9d
  000c7	48 89 6b 30	 mov	 QWORD PTR [rbx+48], rbp
  000cb	48 01 b7 98 01
	00 00		 add	 QWORD PTR [rdi+408], rsi
  000d2	48 ff 87 90 01
	00 00		 inc	 QWORD PTR [rdi+400]
  000d9	48 89 b7 a8 01
	00 00		 mov	 QWORD PTR [rdi+424], rsi
  000e0	48 89 9f d0 00
	00 00		 mov	 QWORD PTR [rdi+208], rbx
  000e7	45 33 c0	 xor	 r8d, r8d
  000ea	ba b8 00 00 00	 mov	 edx, 184		; 000000b8H
  000ef	48 8b cf	 mov	 rcx, rdi
  000f2	48 89 7b 58	 mov	 QWORD PTR [rbx+88], rdi
  000f6	e8 00 00 00 00	 call	 _PyHeap_Malloc

; 1871 :     assert(h->sle_next);
; 1872 :     _PxState_RegisterHeap(c->px, h, c);

  000fb	4c 8b c7	 mov	 r8, rdi
  000fe	48 8b d3	 mov	 rdx, rbx
  00101	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax
  00105	48 8b 8f d8 00
	00 00		 mov	 rcx, QWORD PTR [rdi+216]
  0010c	e8 00 00 00 00	 call	 _PxState_RegisterHeap

; 1873 :     return h;

  00111	48 8b c3	 mov	 rax, rbx
$LN7@Heap_Init:

; 1874 : }

  00114	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00119	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0011e	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00123	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00127	5f		 pop	 rdi
  00128	c3		 ret	 0
Heap_Init ENDP
_TEXT	ENDS
PUBLIC	_PyHeap_Init
; Function compile flags: /Ogtpy
;	COMDAT _PyHeap_Init
_TEXT	SEGMENT
c$ = 8
n$ = 16
_PyHeap_Init PROC					; COMDAT

; 1934 :     return Heap_Init(c, n, 0);

  00000	45 33 c0	 xor	 r8d, r8d

; 1935 : }

  00003	e9 00 00 00 00	 jmp	 Heap_Init
_PyHeap_Init ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BBG@JBIMKPHM@?$AAH?$AAe?$AAa?$AAp?$AA_?$AAL?$AAo?$AAc?$AAa?$AAl?$AAM?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?3?$AA?5?$AAl?$AAo?$AAc?$AAa?$AAl?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAe@ ; `string'
PUBLIC	Heap_LocalMalloc
EXTRN	__imp_fwprintf_s:PROC
EXTRN	PyErr_NoMemory:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel_private.h
pdata	SEGMENT
$pdata$Heap_LocalMalloc DD imagerel $LN17
	DD	imagerel $LN17+401
	DD	imagerel $unwind$Heap_LocalMalloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Heap_LocalMalloc DD 064c01H
	DD	06644cH
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_1BBG@JBIMKPHM@?$AAH?$AAe?$AAa?$AAp?$AA_?$AAL?$AAo?$AAc?$AAa?$AAl?$AAM?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?3?$AA?5?$AAl?$AAo?$AAc?$AAa?$AAl?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAe@
CONST	SEGMENT
??_C@_1BBG@JBIMKPHM@?$AAH?$AAe?$AAa?$AAp?$AA_?$AAL?$AAo?$AAc?$AAa?$AAl?$AAM?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?3?$AA?5?$AAl?$AAo?$AAc?$AAa?$AAl?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAe@ DB 'H'
	DB	00H, 'e', 00H, 'a', 00H, 'p', 00H, '_', 00H, 'L', 00H, 'o', 00H
	DB	'c', 00H, 'a', 00H, 'l', 00H, 'M', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, 'o', 00H, 'c', 00H, ':', 00H, ' ', 00H, 'l', 00H, 'o', 00H
	DB	'c', 00H, 'a', 00H, 'l', 00H, ' ', 00H, 'b', 00H, 'u', 00H, 'f'
	DB	00H, 'f', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 'e', 00H, 'x', 00H
	DB	'h', 00H, 'a', 00H, 'u', 00H, 's', 00H, 't', 00H, 'e', 00H, 'd'
	DB	00H, ' ', 00H, '(', 00H, 'r', 00H, 'e', 00H, 'q', 00H, 'u', 00H
	DB	'e', 00H, 's', 00H, 't', 00H, 'e', 00H, 'd', 00H, ':', 00H, ' '
	DB	00H, '%', 00H, 'l', 00H, 'l', 00H, 'd', 00H, ',', 00H, ' ', 00H
	DB	'a', 00H, 'v', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'a', 00H, 'b'
	DB	00H, 'l', 00H, 'e', 00H, ':', 00H, ' ', 00H, '%', 00H, 'l', 00H
	DB	'l', 00H, 'd', 00H, ')', 00H, '.', 00H, ' ', 00H, ' ', 00H, 'R'
	DB	00H, 'e', 00H, 's', 00H, 'o', 00H, 'r', 00H, 't', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'm', 00H, 'a'
	DB	00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, '(', 00H, ')', 00H
	DB	' ', 00H, '-', 00H, '-', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'a', 00H, 't', 00H
	DB	' ', 00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y'
	DB	00H, ' ', 00H, 'w', 00H, 'i', 00H, 'l', 00H, 'l', 00H, ' ', 00H
	DB	'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'b', 00H, 'e', 00H, ' '
	DB	00H, 'f', 00H, 'r', 00H, 'e', 00H, 'e', 00H, 'd', 00H, '!', 00H
	DB	0aH, 00H, 00H, 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
CONST	ENDS
;	COMDAT Heap_LocalMalloc
_TEXT	SEGMENT
c$ = 48
n$ = 56
align$ = 64
Heap_LocalMalloc PROC					; COMDAT

; 1939 : {

$LN17:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1940 :     void *next;
; 1941 :     wchar_t *fmt;
; 1942 :     size_t alignment_diff;
; 1943 :     size_t alignment = align;
; 1944 :     size_t requested_size = n;
; 1945 :     size_t aligned_size;
; 1946 : 
; 1947 :     if (!alignment)

  0000a	b8 08 00 00 00	 mov	 eax, 8
  0000f	4d 85 c0	 test	 r8, r8
  00012	4c 8b d2	 mov	 r10, rdx
  00015	4c 0f 44 c0	 cmove	 r8, rax

; 1948 :         alignment = Px_PTR_ALIGN_SIZE;
; 1949 : 
; 1950 :     if (alignment > c->tbuf_next_alignment)

  00019	48 8b 81 c0 37
	00 00		 mov	 rax, QWORD PTR [rcx+14272]
  00020	45 33 c9	 xor	 r9d, r9d
  00023	48 8b d9	 mov	 rbx, rcx
  00026	4c 3b c0	 cmp	 r8, rax
  00029	76 10		 jbe	 SHORT $LN6@Heap_Local

; 1951 :         alignment_diff = Px_PTR_ALIGN(alignment - c->tbuf_next_alignment);

  0002b	49 8b d0	 mov	 rdx, r8
  0002e	48 2b d0	 sub	 rdx, rax
  00031	48 83 c2 07	 add	 rdx, 7
  00035	48 83 e2 f8	 and	 rdx, -8

; 1952 :     else

  00039	eb 03		 jmp	 SHORT $LN5@Heap_Local
$LN6@Heap_Local:

; 1953 :         alignment_diff = 0;

  0003b	49 8b d1	 mov	 rdx, r9
$LN5@Heap_Local:

; 1954 : 
; 1955 :     aligned_size = Px_ALIGN(n, alignment);

  0003e	49 8d 40 ff	 lea	 rax, QWORD PTR [r8-1]
  00042	4b 8d 7c 10 ff	 lea	 rdi, QWORD PTR [r8+r10-1]
  00047	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  0004c	48 f7 d0	 not	 rax
  0004f	48 23 f8	 and	 rdi, rax

; 1956 : 
; 1957 :     if (aligned_size < (c->tbuf_remaining-alignment_diff)) {

  00052	48 8b 81 b0 37
	00 00		 mov	 rax, QWORD PTR [rcx+14256]
  00059	48 2b c2	 sub	 rax, rdx
  0005c	48 3b f8	 cmp	 rdi, rax
  0005f	0f 83 b1 00 00
	00		 jae	 $LN4@Heap_Local

; 1958 :         if (alignment_diff) {

  00065	48 85 d2	 test	 rdx, rdx
  00068	74 2e		 je	 SHORT $LN3@Heap_Local

; 1959 :             c->tbuf_remaining -= alignment_diff;
; 1960 :             c->tbuf_allocated += alignment_diff;

  0006a	48 01 91 a8 37
	00 00		 add	 QWORD PTR [rcx+14248], rdx

; 1961 :             c->tbuf_alignment_mismatches++;

  00071	48 ff 81 c8 37
	00 00		 inc	 QWORD PTR [rcx+14280]

; 1962 :             c->tbuf_bytes_wasted += alignment_diff;

  00078	48 01 91 b8 37
	00 00		 add	 QWORD PTR [rcx+14264], rdx
  0007f	48 89 81 b0 37
	00 00		 mov	 QWORD PTR [rcx+14256], rax

; 1963 :             c->tbuf_next = Px_PTR_ADD(c->tbuf_next, alignment_diff);

  00086	48 8b 81 98 37
	00 00		 mov	 rax, QWORD PTR [rcx+14232]
  0008d	48 8d 0c 02	 lea	 rcx, QWORD PTR [rdx+rax]
  00091	48 89 8b 98 37
	00 00		 mov	 QWORD PTR [rbx+14232], rcx
$LN3@Heap_Local:

; 1964 :             assert(Px_PTR_ADD(c->tbuf_base, c->tbuf_allocated) == c->tbuf_next);
; 1965 :         }
; 1966 : 
; 1967 :         c->tbuf_mallocs++;
; 1968 :         c->tbuf_allocated += aligned_size;
; 1969 :         c->tbuf_remaining -= aligned_size;
; 1970 : 
; 1971 :         c->tbuf_bytes_wasted += (aligned_size - requested_size);
; 1972 : 
; 1973 :         next = c->tbuf_next;

  00098	48 8b b3 98 37
	00 00		 mov	 rsi, QWORD PTR [rbx+14232]
  0009f	48 ff 83 a0 37
	00 00		 inc	 QWORD PTR [rbx+14240]
  000a6	48 01 bb a8 37
	00 00		 add	 QWORD PTR [rbx+14248], rdi
  000ad	48 29 bb b0 37
	00 00		 sub	 QWORD PTR [rbx+14256], rdi

; 1974 :         c->tbuf_next = Px_PTR_ADD(c->tbuf_next, aligned_size);

  000b4	48 8d 14 3e	 lea	 rdx, QWORD PTR [rsi+rdi]
  000b8	48 8b c7	 mov	 rax, rdi
  000bb	49 2b c2	 sub	 rax, r10
  000be	48 89 93 98 37
	00 00		 mov	 QWORD PTR [rbx+14232], rdx
  000c5	48 01 83 b8 37
	00 00		 add	 QWORD PTR [rbx+14264], rax

; 1975 :         c->tbuf_next_alignment = Px_GET_ALIGNMENT(c->tbuf_next);

  000cc	48 85 d2	 test	 rdx, rdx
  000cf	74 2b		 je	 SHORT $LN13@Heap_Local
  000d1	f6 c2 01	 test	 dl, 1
  000d4	75 1a		 jne	 SHORT $LN10@Heap_Local
  000d6	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL11@Heap_Local:
  000e0	41 ff c1	 inc	 r9d
  000e3	48 8b c2	 mov	 rax, rdx
  000e6	41 8b c9	 mov	 ecx, r9d
  000e9	48 d3 e8	 shr	 rax, cl
  000ec	a8 01		 test	 al, 1
  000ee	74 f0		 je	 SHORT $LL11@Heap_Local
$LN10@Heap_Local:
  000f0	41 8b c9	 mov	 ecx, r9d
  000f3	41 b9 01 00 00
	00		 mov	 r9d, 1
  000f9	49 d3 e1	 shl	 r9, cl
$LN13@Heap_Local:
  000fc	4c 89 8b c0 37
	00 00		 mov	 QWORD PTR [rbx+14272], r9

; 1995 :     }
; 1996 : 
; 1997 :     return next;

  00103	48 8b c6	 mov	 rax, rsi
  00106	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]

; 1998 : }

  0010b	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00110	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00114	5f		 pop	 rdi
  00115	c3		 ret	 0
$LN4@Heap_Local:

; 1976 :         assert(Px_PTR_ADD(c->tbuf_base, c->tbuf_allocated) == c->tbuf_next);
; 1977 :         assert(_Py_IS_ALIGNED(next, alignment));
; 1978 : 
; 1979 :     } else {
; 1980 :         next = (void *)malloc(aligned_size);

  00116	48 8b cf	 mov	 rcx, rdi
  00119	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0011f	48 8b f0	 mov	 rsi, rax

; 1981 :         if (!next)

  00122	48 85 c0	 test	 rax, rax
  00125	75 14		 jne	 SHORT $LN1@Heap_Local
  00127	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]

; 1998 : }

  0012c	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00131	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00135	5f		 pop	 rdi
  00136	e9 00 00 00 00	 jmp	 PyErr_NoMemory
$LN1@Heap_Local:

; 1982 :             return PyErr_NoMemory();
; 1983 : 
; 1984 :         memset(next, 0, aligned_size);

  0013b	4c 8b c7	 mov	 r8, rdi
  0013e	33 d2		 xor	 edx, edx
  00140	48 8b c8	 mov	 rcx, rax
  00143	e8 00 00 00 00	 call	 memset

; 1985 : 
; 1986 :         c->leak_count++;

  00148	48 ff 83 d8 37
	00 00		 inc	 QWORD PTR [rbx+14296]

; 1987 :         c->leaked_bytes += aligned_size;

  0014f	48 01 bb d0 37
	00 00		 add	 QWORD PTR [rbx+14288], rdi

; 1988 :         c->last_leak = next;

  00156	48 89 b3 e0 37
	00 00		 mov	 QWORD PTR [rbx+14304], rsi

; 1989 : 
; 1990 :         fmt = L"Heap_LocalMalloc: local buffer exhausted ("    \
; 1991 :               L"requested: %lld, available: %lld).  Resorted " \
; 1992 :               L"to malloc() -- note that memory will not be "  \
; 1993 :               L"freed!\n";
; 1994 :         fwprintf_s(stderr, fmt, aligned_size, c->tbuf_remaining);

  0015d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00163	4c 8b 8b b0 37
	00 00		 mov	 r9, QWORD PTR [rbx+14256]
  0016a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BBG@JBIMKPHM@?$AAH?$AAe?$AAa?$AAp?$AA_?$AAL?$AAo?$AAc?$AAa?$AAl?$AAM?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?3?$AA?5?$AAl?$AAo?$AAc?$AAa?$AAl?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAe@
  00171	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  00175	4c 8b c7	 mov	 r8, rdi
  00178	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwprintf_s

; 1998 : }

  0017e	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00183	48 8b c6	 mov	 rax, rsi
  00186	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  0018b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0018f	5f		 pop	 rdi
  00190	c3		 ret	 0
Heap_LocalMalloc ENDP
_TEXT	ENDS
PUBLIC	_PyTLSHeap_Init
PUBLIC	_PyTLSHeap_Malloc
EXTRN	__imp__aligned_malloc:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel_private.h
pdata	SEGMENT
$pdata$_PyTLSHeap_Malloc DD imagerel $LN22
	DD	imagerel $LN22+411
	DD	imagerel $unwind$_PyTLSHeap_Malloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyTLSHeap_Malloc DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0c016321aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT _PyTLSHeap_Malloc
_TEXT	SEGMENT
n$ = 48
align$ = 56
_PyTLSHeap_Malloc PROC					; COMDAT

; 2002 : {

$LN22:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2003 :     void  *next;
; 2004 :     Heap  *h;
; 2005 :     TLS   *t = &tls;

  0001a	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00023	48 8b ea	 mov	 rbp, rdx
  00026	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  0002c	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:tls
  00031	4c 8b e1	 mov	 r12, rcx
  00034	48 03 3c d0	 add	 rdi, QWORD PTR [rax+rdx*8]

; 2006 :     Stats *s = &t->stats;
; 2007 :     size_t alignment_diff;
; 2008 :     size_t alignment = align;
; 2009 :     size_t requested_size = n;
; 2010 :     size_t aligned_size;
; 2011 : 
; 2012 :     assert(t->heap_depth > 0 || _PxNewThread);
; 2013 : 
; 2014 :     if (!alignment)

  00038	b8 08 00 00 00	 mov	 eax, 8
  0003d	48 85 ed	 test	 rbp, rbp
  00040	48 0f 44 e8	 cmove	 rbp, rax
  00044	48 8d 45 ff	 lea	 rax, QWORD PTR [rbp-1]
  00048	48 8d 74 29 ff	 lea	 rsi, QWORD PTR [rcx+rbp-1]
  0004d	48 f7 d0	 not	 rax
  00050	48 23 f0	 and	 rsi, rax

; 2023 : 
; 2024 :     aligned_size = Px_ALIGN(n, alignment);

  00053	33 db		 xor	 ebx, ebx
  00055	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$begin$127470:

; 2015 :         alignment = Px_PTR_ALIGN_SIZE;
; 2016 : begin:
; 2017 :     h = t->h;
; 2018 : 
; 2019 :     if (alignment > h->next_alignment)

  00060	4c 8b 07	 mov	 r8, QWORD PTR [rdi]
  00063	49 8b 40 30	 mov	 rax, QWORD PTR [r8+48]
  00067	48 3b e8	 cmp	 rbp, rax
  0006a	76 10		 jbe	 SHORT $LN5@PyTLSHeap_

; 2020 :         alignment_diff = Px_PTR_ALIGN(alignment - h->next_alignment);

  0006c	48 8b cd	 mov	 rcx, rbp
  0006f	48 2b c8	 sub	 rcx, rax
  00072	48 83 c1 07	 add	 rcx, 7
  00076	48 83 e1 f8	 and	 rcx, -8

; 2021 :     else

  0007a	eb 03		 jmp	 SHORT $LN4@PyTLSHeap_
$LN5@PyTLSHeap_:

; 2022 :         alignment_diff = 0;

  0007c	48 8b cb	 mov	 rcx, rbx
$LN4@PyTLSHeap_:

; 2025 : 
; 2026 :     if (aligned_size < (h->remaining-alignment_diff)) {

  0007f	49 8b 40 48	 mov	 rax, QWORD PTR [r8+72]
  00083	48 2b c1	 sub	 rax, rcx
  00086	48 3b f0	 cmp	 rsi, rax
  00089	72 43		 jb	 SHORT $LN17@PyTLSHeap_

; 2060 :     }
; 2061 : 
; 2062 :     t->h = h->sle_next;

  0008b	49 8b 40 08	 mov	 rax, QWORD PTR [r8+8]
  0008f	48 89 07	 mov	 QWORD PTR [rdi], rax

; 2063 : 
; 2064 :     if (!t->h->size && !_PyTLSHeap_Init(Px_NEW_HEAP_SIZE(aligned_size), 0)) {

  00092	48 39 58 38	 cmp	 QWORD PTR [rax+56], rbx
  00096	75 c8		 jne	 SHORT $begin$127470
  00098	b9 40 0f 00 00	 mov	 ecx, 3904		; 00000f40H
  0009d	48 3b f1	 cmp	 rsi, rcx
  000a0	48 0f 47 ce	 cmova	 rcx, rsi
  000a4	33 d2		 xor	 edx, edx
  000a6	48 81 c1 ff 0f
	00 00		 add	 rcx, 4095		; 00000fffH
  000ad	48 81 e1 00 f0
	ff ff		 and	 rcx, -4096		; fffffffffffff000H
  000b4	e8 00 00 00 00	 call	 _PyTLSHeap_Init
  000b9	85 c0		 test	 eax, eax
  000bb	75 a3		 jne	 SHORT $begin$127470

; 2065 :         return _aligned_malloc(aligned_size, alignment);

  000bd	48 8b d5	 mov	 rdx, rbp
  000c0	48 8b ce	 mov	 rcx, rsi
  000c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__aligned_malloc
  000c9	e9 b2 00 00 00	 jmp	 $LN7@PyTLSHeap_
$LN17@PyTLSHeap_:

; 2027 :         if (alignment_diff) {

  000ce	48 85 c9	 test	 rcx, rcx
  000d1	74 36		 je	 SHORT $LN2@PyTLSHeap_

; 2028 :             h->remaining -= alignment_diff;

  000d3	49 29 48 48	 sub	 QWORD PTR [r8+72], rcx

; 2029 :             s->remaining -= alignment_diff;

  000d7	48 29 8f 88 01
	00 00		 sub	 QWORD PTR [rdi+392], rcx

; 2030 :             h->allocated += alignment_diff;

  000de	49 01 48 40	 add	 QWORD PTR [r8+64], rcx

; 2031 :             s->allocated += alignment_diff;

  000e2	48 01 8f 80 01
	00 00		 add	 QWORD PTR [rdi+384], rcx

; 2032 :             h->alignment_mismatches++;

  000e9	49 ff 80 98 00
	00 00		 inc	 QWORD PTR [r8+152]

; 2033 :             s->alignment_mismatches++;

  000f0	48 ff 87 50 01
	00 00		 inc	 QWORD PTR [rdi+336]

; 2034 :             h->bytes_wasted += alignment_diff;

  000f7	49 01 88 a0 00
	00 00		 add	 QWORD PTR [r8+160], rcx

; 2035 :             s->bytes_wasted += alignment_diff;

  000fe	48 01 8f 58 01
	00 00		 add	 QWORD PTR [rdi+344], rcx

; 2036 :             h->next = Px_PTR_ADD(h->next, alignment_diff);

  00105	49 01 48 18	 add	 QWORD PTR [r8+24], rcx
$LN2@PyTLSHeap_:

; 2037 :             assert(Px_PTR_ADD(h->base, h->allocated) == h->next);
; 2038 :         }
; 2039 : 
; 2040 :         h->allocated += aligned_size;

  00109	49 01 70 40	 add	 QWORD PTR [r8+64], rsi

; 2041 :         s->allocated += aligned_size;

  0010d	48 01 b7 80 01
	00 00		 add	 QWORD PTR [rdi+384], rsi

; 2042 : 
; 2043 :         h->remaining -= aligned_size;

  00114	49 29 70 48	 sub	 QWORD PTR [r8+72], rsi

; 2044 :         s->remaining -= aligned_size;

  00118	48 29 b7 88 01
	00 00		 sub	 QWORD PTR [rdi+392], rsi

; 2045 : 
; 2046 :         h->mallocs++;

  0011f	49 ff 40 68	 inc	 QWORD PTR [r8+104]

; 2047 :         s->mallocs++;

  00123	48 ff 87 20 01
	00 00		 inc	 QWORD PTR [rdi+288]

; 2048 : 
; 2049 :         h->bytes_wasted += (aligned_size - requested_size);

  0012a	48 8b c6	 mov	 rax, rsi
  0012d	49 2b c4	 sub	 rax, r12
  00130	49 01 80 a0 00
	00 00		 add	 QWORD PTR [r8+160], rax

; 2050 :         s->bytes_wasted += (aligned_size - requested_size);

  00137	48 8b c6	 mov	 rax, rsi
  0013a	49 2b c4	 sub	 rax, r12
  0013d	48 01 87 58 01
	00 00		 add	 QWORD PTR [rdi+344], rax

; 2051 : 
; 2052 :         next = h->next;

  00144	4d 8b 48 18	 mov	 r9, QWORD PTR [r8+24]

; 2053 :         h->next = Px_PTR_ADD(h->next, aligned_size);

  00148	49 8d 04 31	 lea	 rax, QWORD PTR [r9+rsi]
  0014c	49 89 40 18	 mov	 QWORD PTR [r8+24], rax

; 2054 :         h->next_alignment = Px_GET_ALIGNMENT(h->next);

  00150	48 85 c0	 test	 rax, rax
  00153	74 24		 je	 SHORT $LN12@PyTLSHeap_
  00155	a8 01		 test	 al, 1
  00157	75 16		 jne	 SHORT $LN9@PyTLSHeap_
  00159	0f 1f 80 00 00
	00 00		 npad	 7
$LL10@PyTLSHeap_:
  00160	ff c3		 inc	 ebx
  00162	48 8b d0	 mov	 rdx, rax
  00165	8b cb		 mov	 ecx, ebx
  00167	48 d3 ea	 shr	 rdx, cl
  0016a	f6 c2 01	 test	 dl, 1
  0016d	74 f1		 je	 SHORT $LL10@PyTLSHeap_
$LN9@PyTLSHeap_:
  0016f	8b cb		 mov	 ecx, ebx
  00171	bb 01 00 00 00	 mov	 ebx, 1
  00176	48 d3 e3	 shl	 rbx, cl
$LN12@PyTLSHeap_:
  00179	49 89 58 30	 mov	 QWORD PTR [r8+48], rbx

; 2055 : 
; 2056 :         assert(Px_PTR_ADD(h->base, h->allocated) == h->next);
; 2057 :         assert(_Py_IS_ALIGNED(h->base, alignment));
; 2058 :         assert(Px_GET_ALIGNMENT(next) >= alignment);
; 2059 :         return next;

  0017d	49 8b c1	 mov	 rax, r9
$LN7@PyTLSHeap_:

; 2066 :     }
; 2067 : 
; 2068 :     goto begin;
; 2069 : }

  00180	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00185	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0018a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0018f	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00194	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00198	41 5c		 pop	 r12
  0019a	c3		 ret	 0
_PyTLSHeap_Malloc ENDP
_TEXT	ENDS
PUBLIC	_PyHeapOverride_Malloc
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyHeapOverride_Malloc DD imagerel $LN4
	DD	imagerel $LN4+109
	DD	imagerel $unwind$_PyHeapOverride_Malloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyHeapOverride_Malloc DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyHeapOverride_Malloc
_TEXT	SEGMENT
n$ = 48
align$ = 56
_PyHeapOverride_Malloc PROC				; COMDAT

; 2073 : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	4c 8b c2	 mov	 r8, rdx
  00009	4c 8b c9	 mov	 r9, rcx

; 2074 :     void *p;
; 2075 :     HANDLE h;
; 2076 :     int flags = HEAP_ZERO_MEMORY;
; 2077 :     size_t aligned_size = Px_ALIGN(n, Px_MAX(align, Px_PTR_ALIGN_SIZE));
; 2078 :     assert(_PyParallel_IsHeapOverrideActive());
; 2079 : 
; 2080 :     h = _PyParallel_GetHeapOverride();

  0000c	e8 00 00 00 00	 call	 _PyParallel_GetHeapOverride
  00011	b9 08 00 00 00	 mov	 ecx, 8

; 2081 : 
; 2082 :     p = HeapAlloc(h, HEAP_ZERO_MEMORY, aligned_size);

  00016	ba 08 00 00 00	 mov	 edx, 8
  0001b	4c 3b c1	 cmp	 r8, rcx
  0001e	49 0f 47 c8	 cmova	 rcx, r8
  00022	4e 8d 44 09 ff	 lea	 r8, QWORD PTR [rcx+r9-1]
  00027	48 ff c9	 dec	 rcx
  0002a	48 f7 d1	 not	 rcx
  0002d	4c 23 c1	 and	 r8, rcx
  00030	48 8b c8	 mov	 rcx, rax
  00033	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_HeapAlloc
  00039	48 8b d8	 mov	 rbx, rax

; 2083 :     if (!p)

  0003c	48 85 c0	 test	 rax, rax
  0003f	75 07		 jne	 SHORT $LN1@PyHeapOver

; 2084 :         PyErr_SetFromWindowsErr(0);

  00041	33 c9		 xor	 ecx, ecx
  00043	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
$LN1@PyHeapOver:

; 2085 : 
; 2086 :     last_heap_override_malloc_addr = p;

  00048	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  0004e	65 48 8b 0c 25
	58 00 00 00	 mov	 rcx, QWORD PTR gs:88
  00057	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:last_heap_override_malloc_addr
  0005c	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  00060	48 89 1c 08	 mov	 QWORD PTR [rax+rcx], rbx

; 2087 : 
; 2088 :     return p;

  00064	48 8b c3	 mov	 rax, rbx

; 2089 : }

  00067	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006b	5b		 pop	 rbx
  0006c	c3		 ret	 0
_PyHeapOverride_Malloc ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel_private.h
pdata	SEGMENT
$pdata$_PyHeap_Malloc DD imagerel $LN27
	DD	imagerel $LN27+482
	DD	imagerel $unwind$_PyHeap_Malloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyHeap_Malloc DD 0a8c01H
	DD	09548cH
	DD	083483H
	DD	0a640eH
	DD	0d00a320eH
	DD	07006c008H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT _PyHeap_Malloc
_TEXT	SEGMENT
c$ = 64
n$ = 72
align$ = 80
no_realloc$ = 88
_PyHeap_Malloc PROC					; COMDAT

; 2093 : {

$LN27:
  00000	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  00005	57		 push	 rdi
  00006	41 54		 push	 r12
  00008	41 55		 push	 r13
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2094 :     void  *next;
; 2095 :     Heap  *h;
; 2096 :     Stats *s;
; 2097 :     size_t alignment_diff;
; 2098 :     size_t alignment = align;
; 2099 :     size_t requested_size = n;
; 2100 :     size_t aligned_size;
; 2101 : 
; 2102 :     if (Px_TLS_HEAP_ACTIVE)

  0000e	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00017	49 8b f8	 mov	 rdi, r8
  0001a	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  00021	4e 8b 2c c0	 mov	 r13, QWORD PTR [rax+r8*8]
  00025	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:tls
  0002a	4c 8b e2	 mov	 r12, rdx
  0002d	42 83 bc 28 d0
	00 00 00 00	 cmp	 DWORD PTR [rax+r13+208], 0
  00036	48 8b f1	 mov	 rsi, rcx
  00039	7e 19		 jle	 SHORT $LN9@PyHeap_Mal

; 2103 :         return _PyTLSHeap_Malloc(n, align);

  0003b	48 8b d7	 mov	 rdx, rdi
  0003e	49 8b cc	 mov	 rcx, r12

; 2165 : 
; 2166 :     goto begin;
; 2167 : }

  00041	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00046	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004a	41 5d		 pop	 r13
  0004c	41 5c		 pop	 r12
  0004e	5f		 pop	 rdi
  0004f	e9 00 00 00 00	 jmp	 _PyTLSHeap_Malloc
$LN9@PyHeap_Mal:

; 2104 : 
; 2105 :     if (_PyParallel_IsHeapOverrideActive())

  00054	e8 00 00 00 00	 call	 _PyParallel_IsHeapOverrideActive
  00059	84 c0		 test	 al, al
  0005b	74 19		 je	 SHORT $LN8@PyHeap_Mal

; 2106 :         return _PyHeapOverride_Malloc(n, align);

  0005d	48 8b d7	 mov	 rdx, rdi
  00060	49 8b cc	 mov	 rcx, r12

; 2165 : 
; 2166 :     goto begin;
; 2167 : }

  00063	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00068	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006c	41 5d		 pop	 r13
  0006e	41 5c		 pop	 r12
  00070	5f		 pop	 rdi
  00071	e9 00 00 00 00	 jmp	 _PyHeapOverride_Malloc
$LN8@PyHeap_Mal:

; 2107 : 
; 2108 :     s = &c->stats;
; 2109 :     if (!alignment)

  00076	b8 08 00 00 00	 mov	 eax, 8
  0007b	48 85 ff	 test	 rdi, rdi
  0007e	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00083	48 0f 44 f8	 cmove	 rdi, rax
  00087	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp
  0008c	48 8d 47 ff	 lea	 rax, QWORD PTR [rdi-1]
  00090	4a 8d 6c 27 ff	 lea	 rbp, QWORD PTR [rdi+r12-1]
  00095	48 f7 d0	 not	 rax
  00098	48 23 e8	 and	 rbp, rax

; 2119 : 
; 2120 :     aligned_size = Px_ALIGN(n, alignment);

  0009b	33 db		 xor	 ebx, ebx
  0009d	0f 1f 00	 npad	 3
$begin$127545:

; 2110 :         alignment = Px_PTR_ALIGN_SIZE;
; 2111 : 
; 2112 : begin:
; 2113 :     h = c->h;
; 2114 : 
; 2115 :     if (alignment > h->next_alignment)

  000a0	4c 8b 86 d0 00
	00 00		 mov	 r8, QWORD PTR [rsi+208]
  000a7	49 8b 40 30	 mov	 rax, QWORD PTR [r8+48]
  000ab	48 3b f8	 cmp	 rdi, rax
  000ae	76 10		 jbe	 SHORT $LN6@PyHeap_Mal

; 2116 :         alignment_diff = Px_PTR_ALIGN(alignment - h->next_alignment);

  000b0	48 8b cf	 mov	 rcx, rdi
  000b3	48 2b c8	 sub	 rcx, rax
  000b6	48 83 c1 07	 add	 rcx, 7
  000ba	48 83 e1 f8	 and	 rcx, -8

; 2117 :     else

  000be	eb 03		 jmp	 SHORT $LN5@PyHeap_Mal
$LN6@PyHeap_Mal:

; 2118 :         alignment_diff = 0;

  000c0	48 8b cb	 mov	 rcx, rbx
$LN5@PyHeap_Mal:

; 2121 : 
; 2122 :     if (aligned_size < (h->remaining-alignment_diff)) {

  000c3	49 8b 40 48	 mov	 rax, QWORD PTR [r8+72]
  000c7	48 2b c1	 sub	 rax, rcx
  000ca	48 3b e8	 cmp	 rbp, rax
  000cd	72 3a		 jb	 SHORT $LN20@PyHeap_Mal

; 2157 :     }
; 2158 : 
; 2159 :     if (no_realloc)
; 2160 :         NULL;
; 2161 : 
; 2162 :     /* Force a resize. */
; 2163 :     if (!_PyHeap_Init(c, Px_NEW_HEAP_SIZE(aligned_size)))

  000cf	ba 40 0f 00 00	 mov	 edx, 3904		; 00000f40H
  000d4	48 8b ce	 mov	 rcx, rsi
  000d7	48 3b ea	 cmp	 rbp, rdx
  000da	48 0f 47 d5	 cmova	 rdx, rbp
  000de	48 81 c2 ff 0f
	00 00		 add	 rdx, 4095		; 00000fffH
  000e5	48 81 e2 00 f0
	ff ff		 and	 rdx, -4096		; fffffffffffff000H
  000ec	e8 00 00 00 00	 call	 _PyHeap_Init
  000f1	48 85 c0	 test	 rax, rax
  000f4	75 aa		 jne	 SHORT $begin$127545

; 2164 :         return Heap_LocalMalloc(c, aligned_size, alignment);

  000f6	4c 8b c7	 mov	 r8, rdi
  000f9	48 8b d5	 mov	 rdx, rbp
  000fc	48 8b ce	 mov	 rcx, rsi
  000ff	e8 00 00 00 00	 call	 Heap_LocalMalloc
  00104	e9 c0 00 00 00	 jmp	 $LN26@PyHeap_Mal
$LN20@PyHeap_Mal:

; 2123 :         if (alignment_diff) {

  00109	48 85 c9	 test	 rcx, rcx
  0010c	74 36		 je	 SHORT $LN3@PyHeap_Mal

; 2124 :             h->remaining -= alignment_diff;

  0010e	49 29 48 48	 sub	 QWORD PTR [r8+72], rcx

; 2125 :             s->remaining -= alignment_diff;

  00112	48 29 8e a8 01
	00 00		 sub	 QWORD PTR [rsi+424], rcx

; 2126 :             h->allocated += alignment_diff;

  00119	49 01 48 40	 add	 QWORD PTR [r8+64], rcx

; 2127 :             s->allocated += alignment_diff;

  0011d	48 01 8e a0 01
	00 00		 add	 QWORD PTR [rsi+416], rcx

; 2128 :             h->alignment_mismatches++;

  00124	49 ff 80 98 00
	00 00		 inc	 QWORD PTR [r8+152]

; 2129 :             s->alignment_mismatches++;

  0012b	48 ff 86 70 01
	00 00		 inc	 QWORD PTR [rsi+368]

; 2130 :             h->bytes_wasted += alignment_diff;

  00132	49 01 88 a0 00
	00 00		 add	 QWORD PTR [r8+160], rcx

; 2131 :             s->bytes_wasted += alignment_diff;

  00139	48 01 8e 78 01
	00 00		 add	 QWORD PTR [rsi+376], rcx

; 2132 :             h->next = Px_PTR_ADD(h->next, alignment_diff);

  00140	49 01 48 18	 add	 QWORD PTR [r8+24], rcx
$LN3@PyHeap_Mal:

; 2133 :             assert(Px_PTR_ADD(h->base, h->allocated) == h->next);
; 2134 :         }
; 2135 : 
; 2136 :         h->allocated += aligned_size;

  00144	49 01 68 40	 add	 QWORD PTR [r8+64], rbp

; 2137 :         s->allocated += aligned_size;

  00148	48 01 ae a0 01
	00 00		 add	 QWORD PTR [rsi+416], rbp

; 2138 : 
; 2139 :         h->remaining -= aligned_size;

  0014f	49 29 68 48	 sub	 QWORD PTR [r8+72], rbp

; 2140 :         s->remaining -= aligned_size;

  00153	48 29 ae a8 01
	00 00		 sub	 QWORD PTR [rsi+424], rbp

; 2141 : 
; 2142 :         h->mallocs++;

  0015a	49 ff 40 68	 inc	 QWORD PTR [r8+104]

; 2143 :         s->mallocs++;

  0015e	48 ff 86 40 01
	00 00		 inc	 QWORD PTR [rsi+320]

; 2144 : 
; 2145 :         h->bytes_wasted += (aligned_size - requested_size);

  00165	48 8b c5	 mov	 rax, rbp
  00168	49 2b c4	 sub	 rax, r12
  0016b	49 01 80 a0 00
	00 00		 add	 QWORD PTR [r8+160], rax

; 2146 :         s->bytes_wasted += (aligned_size - requested_size);

  00172	48 8b c5	 mov	 rax, rbp
  00175	49 2b c4	 sub	 rax, r12
  00178	48 01 86 78 01
	00 00		 add	 QWORD PTR [rsi+376], rax

; 2147 : 
; 2148 :         next = h->next;

  0017f	4d 8b 48 18	 mov	 r9, QWORD PTR [r8+24]

; 2149 :         h->next = Px_PTR_ADD(h->next, aligned_size);

  00183	49 8d 04 29	 lea	 rax, QWORD PTR [r9+rbp]
  00187	49 89 40 18	 mov	 QWORD PTR [r8+24], rax

; 2150 :         h->next_alignment = Px_GET_ALIGNMENT(h->next);

  0018b	48 85 c0	 test	 rax, rax
  0018e	74 29		 je	 SHORT $LN15@PyHeap_Mal
  00190	a8 01		 test	 al, 1
  00192	75 1b		 jne	 SHORT $LN12@PyHeap_Mal
  00194	66 66 66 66 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL13@PyHeap_Mal:
  001a0	ff c3		 inc	 ebx
  001a2	48 8b d0	 mov	 rdx, rax
  001a5	8b cb		 mov	 ecx, ebx
  001a7	48 d3 ea	 shr	 rdx, cl
  001aa	f6 c2 01	 test	 dl, 1
  001ad	74 f1		 je	 SHORT $LL13@PyHeap_Mal
$LN12@PyHeap_Mal:
  001af	8b cb		 mov	 ecx, ebx
  001b1	bb 01 00 00 00	 mov	 ebx, 1
  001b6	48 d3 e3	 shl	 rbx, cl
$LN15@PyHeap_Mal:

; 2151 : 
; 2152 :         assert(Px_PTR_ADD(h->base, h->allocated) == h->next);
; 2153 :         assert(_Py_IS_ALIGNED(h->base, alignment));
; 2154 :         assert(Px_GET_ALIGNMENT(next) >= alignment);
; 2155 :         last_context_heap_malloc_addr = next;

  001b9	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:last_context_heap_malloc_addr
  001be	49 89 58 30	 mov	 QWORD PTR [r8+48], rbx
  001c2	4e 89 0c 28	 mov	 QWORD PTR [rax+r13], r9

; 2156 :         return next;

  001c6	49 8b c1	 mov	 rax, r9
$LN26@PyHeap_Mal:

; 2165 : 
; 2166 :     goto begin;
; 2167 : }

  001c9	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  001ce	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  001d3	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  001d8	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001dc	41 5d		 pop	 r13
  001de	41 5c		 pop	 r12
  001e0	5f		 pop	 rdi
  001e1	c3		 ret	 0
_PyHeap_Malloc ENDP
_TEXT	ENDS
PUBLIC	_PyHeap_FastFree
; Function compile flags: /Ogtpy
;	COMDAT _PyHeap_FastFree
_TEXT	SEGMENT
h$ = 8
s$ = 16
p$ = 24
_PyHeap_FastFree PROC					; COMDAT

; 2173 :     h->frees++;

  00000	48 ff 81 90 00
	00 00		 inc	 QWORD PTR [rcx+144]

; 2174 :     s->frees++;

  00007	48 ff 42 68	 inc	 QWORD PTR [rdx+104]

; 2175 : }

  0000b	c3		 ret	 0
_PyHeap_FastFree ENDP
_TEXT	ENDS
PUBLIC	_PyTLSHeap_Realloc
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyTLSHeap_Realloc DD imagerel $LN5
	DD	imagerel $LN5+93
	DD	imagerel $unwind$_PyTLSHeap_Realloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyTLSHeap_Realloc DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyTLSHeap_Realloc
_TEXT	SEGMENT
p$ = 48
n$ = 56
_PyTLSHeap_Realloc PROC					; COMDAT

; 2179 : {

$LN5:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b f2	 mov	 rsi, rdx
  00012	48 8b f9	 mov	 rdi, rcx

; 2180 :     void *r = _PyTLSHeap_Malloc(n, 0);

  00015	33 d2		 xor	 edx, edx
  00017	48 8b ce	 mov	 rcx, rsi
  0001a	e8 00 00 00 00	 call	 _PyTLSHeap_Malloc
  0001f	48 8b d8	 mov	 rbx, rax

; 2181 :     if (!r)

  00022	48 85 c0	 test	 rax, rax
  00025	75 10		 jne	 SHORT $LN2@PyTLSHeap_@2

; 2186 : 
; 2187 :     return r;
; 2188 : }

  00027	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002c	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00031	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00035	5f		 pop	 rdi
  00036	c3		 ret	 0
$LN2@PyTLSHeap_@2:

; 2182 :         return NULL;
; 2183 : 
; 2184 :     if (p)

  00037	48 85 ff	 test	 rdi, rdi
  0003a	74 0e		 je	 SHORT $LN1@PyTLSHeap_@2

; 2185 :         memcpy(r, p, n);

  0003c	4c 8b c6	 mov	 r8, rsi
  0003f	48 8b d7	 mov	 rdx, rdi
  00042	48 8b c8	 mov	 rcx, rax
  00045	e8 00 00 00 00	 call	 memcpy
$LN1@PyTLSHeap_@2:

; 2186 : 
; 2187 :     return r;
; 2188 : }

  0004a	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0004f	48 8b c3	 mov	 rax, rbx
  00052	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00057	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005b	5f		 pop	 rdi
  0005c	c3		 ret	 0
_PyTLSHeap_Realloc ENDP
_TEXT	ENDS
PUBLIC	_PyHeap_Realloc
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyHeap_Realloc DD imagerel $LN8
	DD	imagerel $LN8+187
	DD	imagerel $unwind$_PyHeap_Realloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyHeap_Realloc DD 0a6b01H
	DD	07c46bH
	DD	06345aH
	DD	09640fH
	DD	08540fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyHeap_Realloc
_TEXT	SEGMENT
c$ = 48
p$ = 56
n$ = 64
_PyHeap_Realloc PROC					; COMDAT

; 2192 : {

$LN8:
  00000	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  00005	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2193 :     void  *r;
; 2194 :     Heap  *h;
; 2195 :     Stats *s;
; 2196 : 
; 2197 :     if (Px_TLS_HEAP_ACTIVE)

  0000f	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR _tls_index
  00016	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0001f	48 8b e9	 mov	 rbp, rcx
  00022	4a 8b 04 c8	 mov	 rax, QWORD PTR [rax+r9*8]
  00026	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:tls
  0002b	49 8b f0	 mov	 rsi, r8
  0002e	83 bc 08 d0 00
	00 00 00	 cmp	 DWORD PTR [rax+rcx+208], 0
  00036	48 8b fa	 mov	 rdi, rdx
  00039	7e 1a		 jle	 SHORT $LN3@PyHeap_Rea

; 2198 :         return _PyTLSHeap_Realloc(p, n);

  0003b	49 8b d0	 mov	 rdx, r8
  0003e	48 8b cf	 mov	 rcx, rdi

; 2211 : }

  00041	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00046	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5f		 pop	 rdi
  00050	e9 00 00 00 00	 jmp	 _PyTLSHeap_Realloc
$LN3@PyHeap_Rea:
  00055	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx

; 2199 : 
; 2200 :     h = c->h;
; 2201 :     s = &c->stats;
; 2202 :     r = _PyHeap_Malloc(c, n, 0, 0);

  0005a	45 33 c9	 xor	 r9d, r9d
  0005d	45 33 c0	 xor	 r8d, r8d
  00060	48 8b d6	 mov	 rdx, rsi
  00063	48 8b cd	 mov	 rcx, rbp
  00066	4c 89 64 24 38	 mov	 QWORD PTR [rsp+56], r12
  0006b	4c 8b a5 d0 00
	00 00		 mov	 r12, QWORD PTR [rbp+208]
  00072	e8 00 00 00 00	 call	 _PyHeap_Malloc
  00077	48 8b d8	 mov	 rbx, rax

; 2203 :     if (!r)

  0007a	48 85 c0	 test	 rax, rax
  0007d	74 22		 je	 SHORT $LN7@PyHeap_Rea
$LN2@PyHeap_Rea:

; 2204 :         return NULL;
; 2205 :     if (!p)

  0007f	48 85 ff	 test	 rdi, rdi

; 2206 :         return r;

  00082	74 1d		 je	 SHORT $LN7@PyHeap_Rea

; 2207 :     h->mem_reallocs++;

  00084	49 ff 44 24 78	 inc	 QWORD PTR [r12+120]

; 2208 :     s->mem_reallocs++;

  00089	48 ff 85 48 01
	00 00		 inc	 QWORD PTR [rbp+328]

; 2209 :     memcpy(r, p, n);

  00090	4c 8b c6	 mov	 r8, rsi
  00093	48 8b d7	 mov	 rdx, rdi
  00096	48 8b c8	 mov	 rcx, rax
  00099	e8 00 00 00 00	 call	 memcpy

; 2210 :     return r;

  0009e	48 8b c3	 mov	 rax, rbx
$LN7@PyHeap_Rea:

; 2211 : }

  000a1	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a6	4c 8b 64 24 38	 mov	 r12, QWORD PTR [rsp+56]
  000ab	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  000b0	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000b5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b9	5f		 pop	 rdi
  000ba	c3		 ret	 0
_PyHeap_Realloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@NNHJEKIN@_PxObject_Realloc?$AA@	; `string'
PUBLIC	??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@ ; `string'
PUBLIC	_PxObject_Realloc
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PxObject_Realloc DD imagerel $LN4
	DD	imagerel $LN4+104
	DD	imagerel $unwind$_PxObject_Realloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PxObject_Realloc DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0BC@NNHJEKIN@_PxObject_Realloc?$AA@
CONST	SEGMENT
??_C@_0BC@NNHJEKIN@_PxObject_Realloc?$AA@ DB '_PxObject_Realloc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
CONST	SEGMENT
??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@ DB '..\Python\pyparal'
	DB	'lel.c', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PxObject_Realloc
_TEXT	SEGMENT
p$ = 48
nbytes$ = 56
_PxObject_Realloc PROC					; COMDAT

; 2516 : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	48 8b f9	 mov	 rdi, rcx

; 2517 :     Px_GUARD

  00010	e8 00 00 00 00	 call	 _Py_PXCTX
  00015	85 c0		 test	 eax, eax
  00017	75 1d		 jne	 SHORT $LN1@PxObject_R
  00019	44 8d 48 01	 lea	 r9d, QWORD PTR [rax+1]
  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00024	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@NNHJEKIN@_PxObject_Realloc?$AA@
  0002b	41 b8 d5 09 00
	00		 mov	 r8d, 2517		; 000009d5H
  00031	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@PxObject_R:

; 2518 :     return _PyHeap_Realloc(ctx, p, nbytes);

  00036	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  0003c	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00045	41 b9 00 00 00
	00		 mov	 r9d, OFFSET FLAT:ctx
  0004b	48 8b 0c d0	 mov	 rcx, QWORD PTR [rax+rdx*8]
  0004f	4c 8b c3	 mov	 r8, rbx
  00052	48 8b d7	 mov	 rdx, rdi
  00055	4a 8b 0c 09	 mov	 rcx, QWORD PTR [rcx+r9]

; 2519 : }

  00059	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00062	5f		 pop	 rdi
  00063	e9 00 00 00 00	 jmp	 _PyHeap_Realloc
_PxObject_Realloc ENDP
_TEXT	ENDS
PUBLIC	Px_INCCTX
; Function compile flags: /Ogtpy
;	COMDAT Px_INCCTX
_TEXT	SEGMENT
c$ = 8
Px_INCCTX PROC						; COMDAT

; 2568 :     InterlockedIncrement(&(c->refcnt));

  00000	f0 ff 81 58 33
	00 00		 lock inc DWORD PTR [rcx+13144]

; 2569 : }

  00007	c3		 ret	 0
Px_INCCTX ENDP
_TEXT	ENDS
PUBLIC	_PxState_ReleaseContext
; Function compile flags: /Ogtpy
;	COMDAT _PxState_ReleaseContext
_TEXT	SEGMENT
px$ = 8
c$ = 16
_PxState_ReleaseContext PROC				; COMDAT

; 2574 :     register Context *last;
; 2575 :     assert(c->refcnt == 0);
; 2576 :     if (c->persisted_count > 0) {

  00000	83 ba 10 38 00
	00 00		 cmp	 DWORD PTR [rdx+14352], 0
  00007	7e 24		 jle	 SHORT $LN3@PxState_Re@2

; 2577 : 
; 2578 :         assert(Px_CTX_IS_PERSISTED(c));
; 2579 : 
; 2580 :         InterlockedIncrement(&(px->contexts_persisted));

  00009	f0 ff 81 ec 00
	00 00		 lock inc DWORD PTR [rcx+236]

; 2581 :         InterlockedDecrement(&(px->active));

  00010	f0 ff 89 f8 00
	00 00		 lock dec DWORD PTR [rcx+248]

; 2582 :         InterlockedDecrement(&(px->contexts_active));

  00017	f0 ff 89 e8 00
	00 00		 lock dec DWORD PTR [rcx+232]

; 2583 : 
; 2584 :         Px_CTXFLAGS(c) &= ~Px_CTXFLAGS_IS_PERSISTED;

  0001e	83 a2 f8 00 00
	00 fe		 and	 DWORD PTR [rdx+248], -2

; 2585 :         Px_CTXFLAGS(c) |=  Px_CTXFLAGS_WAS_PERSISTED;

  00025	83 8a f8 00 00
	00 02		 or	 DWORD PTR [rdx+248], 2

; 2606 :     }
; 2607 : }

  0002c	c3		 ret	 0
$LN3@PxState_Re@2:

; 2586 : 
; 2587 :         return;
; 2588 :     }
; 2589 : 
; 2590 :     assert(c->ttl >= 1 && c->ttl <= 4);
; 2591 :     assert(c->next == NULL);
; 2592 :     assert(c->prev == NULL);
; 2593 :     if (!px->ctx_first) {

  0002d	48 83 79 78 00	 cmp	 QWORD PTR [rcx+120], 0
  00032	75 17		 jne	 SHORT $LN2@PxState_Re@2

; 2594 :         assert(!px->ctx_last);
; 2595 :         px->ctx_first = c;

  00034	48 89 51 78	 mov	 QWORD PTR [rcx+120], rdx

; 2596 :         px->ctx_last = c;

  00038	48 89 91 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rdx

; 2597 :         c->next = NULL;

  0003f	48 c7 82 10 33
	00 00 00 00 00
	00		 mov	 QWORD PTR [rdx+13072], 0

; 2606 :     }
; 2607 : }

  0004a	c3		 ret	 0
$LN2@PxState_Re@2:

; 2598 :     } else {
; 2599 :         assert(!px->ctx_first->prev);
; 2600 :         assert(!px->ctx_last->next);
; 2601 :         last = px->ctx_last;

  0004b	48 8b 81 80 00
	00 00		 mov	 rax, QWORD PTR [rcx+128]

; 2602 :         last->next = c;

  00052	48 89 90 10 33
	00 00		 mov	 QWORD PTR [rax+13072], rdx

; 2603 :         c->prev = last;

  00059	48 89 82 08 33
	00 00		 mov	 QWORD PTR [rdx+13064], rax

; 2604 :         c->next = NULL;

  00060	48 c7 82 10 33
	00 00 00 00 00
	00		 mov	 QWORD PTR [rdx+13072], 0

; 2605 :         px->ctx_last = c;

  0006b	48 89 91 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rdx

; 2606 :     }
; 2607 : }

  00072	c3		 ret	 0
_PxState_ReleaseContext ENDP
_TEXT	ENDS
PUBLIC	Px_DECCTX
;	COMDAT pdata
pdata	SEGMENT
$pdata$Px_DECCTX DD imagerel $LN4
	DD	imagerel $LN4+57
	DD	imagerel $unwind$Px_DECCTX
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Px_DECCTX DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT Px_DECCTX
_TEXT	SEGMENT
c$ = 48
Px_DECCTX PROC						; COMDAT

; 2612 : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2613 :     register PxState *px = c->px;

  00004	4c 8b 81 d8 00
	00 00		 mov	 r8, QWORD PTR [rcx+216]

; 2614 :     InterlockedDecrement(&(c->refcnt));

  0000b	f0 ff 89 58 33
	00 00		 lock dec DWORD PTR [rcx+13144]

; 2615 :     assert(c->refcnt >= 0);
; 2616 : 
; 2617 :     if (c->refcnt > 0)

  00012	8b 81 58 33 00
	00		 mov	 eax, DWORD PTR [rcx+13144]
  00018	85 c0		 test	 eax, eax
  0001a	7e 0b		 jle	 SHORT $LN1@Px_DECCTX

; 2618 :         return c->refcnt;

  0001c	8b 81 58 33 00
	00		 mov	 eax, DWORD PTR [rcx+13144]

; 2623 : }

  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
$LN1@Px_DECCTX:

; 2619 : 
; 2620 :     assert(c->refcnt == 0);
; 2621 :     _PxState_ReleaseContext(px, c);

  00027	48 8b d1	 mov	 rdx, rcx
  0002a	49 8b c8	 mov	 rcx, r8
  0002d	e8 00 00 00 00	 call	 _PxState_ReleaseContext

; 2622 :     return 0;

  00032	33 c0		 xor	 eax, eax

; 2623 : }

  00034	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00038	c3		 ret	 0
Px_DECCTX ENDP
_TEXT	ENDS
PUBLIC	_PxState_AllocIOBufs
EXTRN	__imp_HeapDestroy:PROC
EXTRN	PxList_Push:PROC
EXTRN	__imp_HeapCreate:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PxState_AllocIOBufs DD imagerel $LN23
	DD	imagerel $LN23+297
	DD	imagerel $unwind$_PxState_AllocIOBufs
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PxState_AllocIOBufs DD 0c1c01H
	DD	0c641cH
	DD	0b541cH
	DD	0a341cH
	DD	0f018321cH
	DD	0d014e016H
	DD	07010c012H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PxState_AllocIOBufs
_TEXT	SEGMENT
px$ = 80
c$ = 88
count$ = 96
size$ = 104
_PxState_AllocIOBufs PROC				; COMDAT

; 2627 : {

$LN23:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	41 56		 push	 r14
  00016	41 57		 push	 r15
  00018	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2628 :     size_t   nbufs;
; 2629 :     size_t   bufsize;
; 2630 :     size_t   heapsize;
; 2631 :     size_t   all_io;
; 2632 :     size_t   all_bufs;
; 2633 :     size_t   iosize;
; 2634 :     void    *io_first;
; 2635 :     void    *buf_first;
; 2636 :     int      i;
; 2637 :     int      result = 0;
; 2638 :     PxIO    *io;
; 2639 :     char    *buf;
; 2640 : 
; 2641 :     assert(px);
; 2642 : 
; 2643 :     nbufs = count;

  0001c	49 63 f0	 movsxd	 rsi, r8d

; 2644 :     bufsize = size;

  0001f	49 63 e9	 movsxd	 rbp, r9d
  00022	4c 8b f1	 mov	 r14, rcx
  00025	4c 8b ea	 mov	 r13, rdx

; 2645 :     iosize = Px_MEM_ALIGN(sizeof(PxIO));
; 2646 : 
; 2647 :     all_io = nbufs * iosize;
; 2648 :     all_bufs = nbufs * bufsize;

  00028	48 8b dd	 mov	 rbx, rbp
  0002b	4c 8d 3c b6	 lea	 r15, QWORD PTR [rsi+rsi*4]
  0002f	49 c1 e7 04	 shl	 r15, 4
  00033	33 ff		 xor	 edi, edi

; 2649 : 
; 2650 :     heapsize = all_io + all_bufs;
; 2651 : 
; 2652 :     c->heap_handle = HeapCreate(HEAP_NO_SERIALIZE, heapsize, 0);

  00035	45 33 c0	 xor	 r8d, r8d
  00038	48 0f af de	 imul	 rbx, rsi
  0003c	4e 8d 24 3b	 lea	 r12, QWORD PTR [rbx+r15]
  00040	8d 4f 01	 lea	 ecx, QWORD PTR [rdi+1]
  00043	49 8b d4	 mov	 rdx, r12
  00046	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_HeapCreate
  0004c	49 89 45 10	 mov	 QWORD PTR [r13+16], rax

; 2653 :     if (!c->heap_handle) {

  00050	48 85 c0	 test	 rax, rax
  00053	75 0c		 jne	 SHORT $LN11@PxState_Al

; 2654 :         PyErr_SetFromWindowsErr(0);

  00055	33 c9		 xor	 ecx, ecx
  00057	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 2655 :         goto done;

  0005c	e9 a9 00 00 00	 jmp	 $LN22@PxState_Al
$LN11@PxState_Al:

; 2656 :     }
; 2657 : 
; 2658 :     if (!_PyHeap_Init(c, heapsize))

  00061	49 8b d4	 mov	 rdx, r12
  00064	49 8b cd	 mov	 rcx, r13
  00067	e8 00 00 00 00	 call	 _PyHeap_Init
  0006c	48 85 c0	 test	 rax, rax
  0006f	0f 84 8b 00 00
	00		 je	 $free_heap$128031

; 2659 :         goto free_heap;
; 2660 : 
; 2661 :     io_first = _PyHeap_Malloc(c, all_io, Px_MEM_ALIGN_SIZE, 1);

  00075	41 b9 01 00 00
	00		 mov	 r9d, 1
  0007b	49 8b d7	 mov	 rdx, r15
  0007e	49 8b cd	 mov	 rcx, r13
  00081	45 8d 41 0f	 lea	 r8d, QWORD PTR [r9+15]
  00085	e8 00 00 00 00	 call	 _PyHeap_Malloc
  0008a	4c 8b f8	 mov	 r15, rax

; 2662 :     if (!io_first)

  0008d	48 85 c0	 test	 rax, rax
  00090	74 6e		 je	 SHORT $free_heap$128031
  00092	66 66 66 66 66
	66 0f 1f 84 00
	00 00 00 00	 npad	 14
$LL8@PxState_Al:

; 2663 :         goto free_heap;
; 2664 : 
; 2665 :     do {
; 2666 :         buf_first = _PyHeap_Malloc(c, all_bufs, Px_MEM_ALIGN_SIZE, 1);

  000a0	41 b9 01 00 00
	00		 mov	 r9d, 1
  000a6	48 8b d3	 mov	 rdx, rbx
  000a9	49 8b cd	 mov	 rcx, r13
  000ac	45 8d 41 0f	 lea	 r8d, QWORD PTR [r9+15]
  000b0	e8 00 00 00 00	 call	 _PyHeap_Malloc
  000b5	4c 8b e0	 mov	 r12, rax

; 2667 :         if (buf_first)

  000b8	48 85 c0	 test	 rax, rax
  000bb	75 08		 jne	 SHORT $LN6@PxState_Al

; 2668 :             break;
; 2669 : 
; 2670 :         all_bufs -= bufsize;
; 2671 :         nbufs--;

  000bd	48 ff ce	 dec	 rsi
  000c0	48 2b dd	 sub	 rbx, rbp

; 2672 : 
; 2673 :     } while (all_bufs > 0);

  000c3	75 db		 jne	 SHORT $LL8@PxState_Al
$LN6@PxState_Al:

; 2674 : 
; 2675 :     for (i = 0; i < nbufs; i++) {

  000c5	48 85 f6	 test	 rsi, rsi
  000c8	74 2f		 je	 SHORT $LN2@PxState_Al
  000ca	48 8b cf	 mov	 rcx, rdi
  000cd	49 8d 5f 48	 lea	 rbx, QWORD PTR [r15+72]
$LL4@PxState_Al:

; 2676 :         io =  (PxIO *)Px_PTR_ADD(io_first,  (i * iosize));
; 2677 :         buf = (char *)Px_PTR_ADD(buf_first, (i * bufsize));

  000d1	48 0f af cd	 imul	 rcx, rbp

; 2678 : 
; 2679 :         assert(Px_PTR(io) ==  Px_ALIGN(io,  Px_MEM_ALIGN_SIZE));
; 2680 :         assert(Px_PTR(buf) == Px_ALIGN(buf, Px_MEM_ALIGN_SIZE));
; 2681 : 
; 2682 :         io->size = (int)bufsize;

  000d5	89 6b f0	 mov	 DWORD PTR [rbx-16], ebp

; 2683 :         io->buf  = buf;
; 2684 : 
; 2685 :         PxList_Push(px->io_free, E2I(io));

  000d8	48 8d 53 b8	 lea	 rdx, QWORD PTR [rbx-72]
  000dc	49 03 cc	 add	 rcx, r12
  000df	48 89 0b	 mov	 QWORD PTR [rbx], rcx
  000e2	49 8b 4e 48	 mov	 rcx, QWORD PTR [r14+72]
  000e6	e8 00 00 00 00	 call	 PxList_Push
  000eb	ff c7		 inc	 edi
  000ed	48 83 c3 50	 add	 rbx, 80			; 00000050H
  000f1	48 63 cf	 movsxd	 rcx, edi
  000f4	48 3b ce	 cmp	 rcx, rsi
  000f7	72 d8		 jb	 SHORT $LL4@PxState_Al
$LN2@PxState_Al:

; 2695 : 
; 2696 : done:
; 2697 :     if (!result)
; 2698 :         assert(PyErr_Occurred());
; 2699 : 
; 2700 :     return result;

  000f9	b8 01 00 00 00	 mov	 eax, 1
  000fe	eb 0c		 jmp	 SHORT $done$128029
$free_heap$128031:

; 2686 :     }
; 2687 : 
; 2688 :     assert(PxList_QueryDepth(px->io_free) == nbufs);
; 2689 : 
; 2690 :     result = 1;
; 2691 :     goto done;
; 2692 : 
; 2693 : free_heap:
; 2694 :     HeapDestroy(c->heap_handle);

  00100	49 8b 4d 10	 mov	 rcx, QWORD PTR [r13+16]
  00104	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_HeapDestroy
$LN22@PxState_Al:

; 2695 : 
; 2696 : done:
; 2697 :     if (!result)
; 2698 :         assert(PyErr_Occurred());
; 2699 : 
; 2700 :     return result;

  0010a	8b c7		 mov	 eax, edi
$done$128029:

; 2701 : }

  0010c	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00111	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  00116	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  0011b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0011f	41 5f		 pop	 r15
  00121	41 5e		 pop	 r14
  00123	41 5d		 pop	 r13
  00125	41 5c		 pop	 r12
  00127	5f		 pop	 rdi
  00128	c3		 ret	 0
_PxState_AllocIOBufs ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_ClearingThreadState
; Function compile flags: /Ogtpy
;	COMDAT _PyParallel_ClearingThreadState
_TEXT	SEGMENT
tstate$ = 8
_PyParallel_ClearingThreadState PROC			; COMDAT

; 2809 : 
; 2810 : }

  00000	c2 00 00	 ret	 0
_PyParallel_ClearingThreadState ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DM@DDNIIIMI@_PyParallel_DeletingThreadState?$CI@ ; `string'
PUBLIC	_PyParallel_DeletingThreadState
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_DeletingThreadState DD imagerel $LN4
	DD	imagerel $LN4+39
	DD	imagerel $unwind$_PyParallel_DeletingThreadState
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_DeletingThreadState DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0DM@DDNIIIMI@_PyParallel_DeletingThreadState?$CI@
CONST	SEGMENT
??_C@_0DM@DDNIIIMI@_PyParallel_DeletingThreadState?$CI@ DB '_PyParallel_D'
	DB	'eletingThreadState(): px->contexts_active: %d', 0aH, 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyParallel_DeletingThreadState
_TEXT	SEGMENT
tstate$ = 48
_PyParallel_DeletingThreadState PROC			; COMDAT

; 2816 : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2817 :     PxState *px = (PxState *)tstate->px;

  00004	48 8b 81 a0 00
	00 00		 mov	 rax, QWORD PTR [rcx+160]

; 2818 : 
; 2819 :     assert(px);
; 2820 : 
; 2821 :     if (px->contexts_active > 0) {

  0000b	8b 90 e8 00 00
	00		 mov	 edx, DWORD PTR [rax+232]
  00011	85 d2		 test	 edx, edx
  00013	7e 0d		 jle	 SHORT $LN1@PyParallel@3

; 2822 :         printf("_PyParallel_DeletingThreadState(): px->contexts_active: %d\n",
; 2823 :                px->contexts_active);

  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DM@DDNIIIMI@_PyParallel_DeletingThreadState?$CI@
  0001c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf
$LN1@PyParallel@3:

; 2824 :     }
; 2825 : }

  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
_PyParallel_DeletingThreadState ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_DeletingInterpreterState
; Function compile flags: /Ogtpy
;	COMDAT _PyParallel_DeletingInterpreterState
_TEXT	SEGMENT
interp$ = 8
_PyParallel_DeletingInterpreterState PROC		; COMDAT

; 2830 : 
; 2831 : }

  00000	c2 00 00	 ret	 0
_PyParallel_DeletingInterpreterState ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_InitializedThreadState
; Function compile flags: /Ogtpy
;	COMDAT _PyParallel_InitializedThreadState
_TEXT	SEGMENT
pstate$ = 8
_PyParallel_InitializedThreadState PROC			; COMDAT

; 2836 :     //if (Py_MainThreadId != _Py_get_current_thread_id())
; 2837 :     //    PyEval_RestoreThread(pstate);
; 2838 : }

  00000	c2 00 00	 ret	 0
_PyParallel_InitializedThreadState ENDP
_TEXT	ENDS
PUBLIC	PxState_SetError
EXTRN	__imp_SetEvent:PROC
EXTRN	PxList_TimestampItem:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxState_SetError DD imagerel $LN3
	DD	imagerel $LN3+158
	DD	imagerel $unwind$PxState_SetError
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxState_SetError DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PxState_SetError
_TEXT	SEGMENT
c$ = 48
PxState_SetError PROC					; COMDAT

; 2857 : {

$LN3:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2858 :     PxState *px = c->px;

  0000f	48 8b b1 d8 00
	00 00		 mov	 rsi, QWORD PTR [rcx+216]

; 2859 :     PyThreadState *pstate = c->pstate;

  00016	48 8b 99 e8 00
	00 00		 mov	 rbx, QWORD PTR [rcx+232]
  0001d	48 8b f9	 mov	 rdi, rcx

; 2860 :     assert(pstate->curexc_type != NULL);
; 2861 :     PxList_TimestampItem(c->error);

  00020	48 8b 89 28 33
	00 00		 mov	 rcx, QWORD PTR [rcx+13096]
  00027	e8 00 00 00 00	 call	 PxList_TimestampItem

; 2862 :     c->error->from = c;

  0002c	4c 8b 9f 28 33
	00 00		 mov	 r11, QWORD PTR [rdi+13096]
  00033	49 89 7b 18	 mov	 QWORD PTR [r11+24], rdi

; 2863 :     c->error->p1 = pstate->curexc_type;

  00037	48 8b 97 28 33
	00 00		 mov	 rdx, QWORD PTR [rdi+13096]
  0003e	48 8b 43 48	 mov	 rax, QWORD PTR [rbx+72]
  00042	48 89 42 20	 mov	 QWORD PTR [rdx+32], rax

; 2864 :     c->error->p2 = pstate->curexc_value;

  00046	48 8b 97 28 33
	00 00		 mov	 rdx, QWORD PTR [rdi+13096]
  0004d	48 8b 43 50	 mov	 rax, QWORD PTR [rbx+80]
  00051	48 89 42 28	 mov	 QWORD PTR [rdx+40], rax

; 2865 :     c->error->p3 = pstate->curexc_traceback;

  00055	48 8b 97 28 33
	00 00		 mov	 rdx, QWORD PTR [rdi+13096]
  0005c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00060	48 89 42 30	 mov	 QWORD PTR [rdx+48], rax

; 2866 :     InterlockedExchange(&(c->done), 1);

  00064	b8 01 00 00 00	 mov	 eax, 1
  00069	87 87 04 38 00
	00		 xchg	 DWORD PTR [rdi+14340], eax

; 2867 :     /*
; 2868 :     InterlockedIncrement64(done);
; 2869 :     InterlockedDecrement(inflight);
; 2870 :     */
; 2871 :     PxList_Push(px->errors, c->error);

  0006f	48 8b 97 28 33
	00 00		 mov	 rdx, QWORD PTR [rdi+13096]
  00076	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  0007a	e8 00 00 00 00	 call	 PxList_Push

; 2872 :     SetEvent(px->wakeup);

  0007f	48 8b 8e a0 00
	00 00		 mov	 rcx, QWORD PTR [rsi+160]
  00086	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetEvent

; 2873 :     return NULL;
; 2874 : }

  0008c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00091	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00096	33 c0		 xor	 eax, eax
  00098	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009c	5f		 pop	 rdi
  0009d	c3		 ret	 0
PxState_SetError ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_ExitingCallback
; Function compile flags: /Ogtpy
;	COMDAT _PyParallel_ExitingCallback
_TEXT	SEGMENT
c$ = 8
_PyParallel_ExitingCallback PROC			; COMDAT

; 3034 :     c->stats.exited = _Py_rdtsc();

  00000	0f 31		 rdtsc
  00002	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  00006	48 0b c2	 or	 rax, rdx
  00009	48 89 81 10 01
	00 00		 mov	 QWORD PTR [rcx+272], rax

; 3035 : }

  00010	c3		 ret	 0
_PyParallel_ExitingCallback ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_ExitingIOCallback
; Function compile flags: /Ogtpy
;	COMDAT _PyParallel_ExitingIOCallback
_TEXT	SEGMENT
c$ = 8
_PyParallel_ExitingIOCallback PROC			; COMDAT

; 3040 :     _PyParallel_ExitingCallback(c);
; 3041 : }

  00000	e9 00 00 00 00	 jmp	 _PyParallel_ExitingCallback
_PyParallel_ExitingIOCallback ENDP
_TEXT	ENDS
PUBLIC	_cpu_count
EXTRN	__imp_GetSystemInfo:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_cpu_count DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$_cpu_count
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_cpu_count DD 010401H
	DD	0a204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _cpu_count
_TEXT	SEGMENT
sysinfo$ = 32
_cpu_count PROC						; COMDAT

; 3306 : {

$LN3:
  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 3307 : #ifdef MS_WINDOWS
; 3308 :     SYSTEM_INFO sysinfo;
; 3309 :     GetSystemInfo(&sysinfo);

  00004	48 8d 4c 24 20	 lea	 rcx, QWORD PTR sysinfo$[rsp]
  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetSystemInfo

; 3310 :     return sysinfo.dwNumberOfProcessors;

  0000f	8b 44 24 40	 mov	 eax, DWORD PTR sysinfo$[rsp+32]

; 3311 : #elif __hpux
; 3312 :     return mpctl(MPC_GETNUMSPUS, NULL, NULL);
; 3313 : #ifndef _SC_NPROCESSORS_ONLN
; 3314 : #ifdef _SC_NPROC_ONLN /* IRIX */
; 3315 : #define _SC_NPROCESSORS_ONLN _SC_NPROC_ONLN
; 3316 : #endif
; 3317 : #endif /* ! defined(_SC_NPROCESSORS_ONLN) */
; 3318 : #elif defined(HAVE_SYSCONF) && defined(_SC_NPROCESSORS_ONLN)
; 3319 :     return sysconf(_SC_NPROCESSORS_ONLN);
; 3320 : #elif __APPLE__
; 3321 :     int err = -1;
; 3322 :     int ncpu = -1;
; 3323 :     size_t len = sizeof(int);
; 3324 :     err = sysctlnametomib("hw.logicalcpu", &ncpu, &len, NULL, 0);
; 3325 :     if (!err)
; 3326 :         return ncpu;
; 3327 :     else
; 3328 :         return _bsd_cpu_count();
; 3329 : #elif defined(__DragonFly__) || \
; 3330 :       defined(__OpenBSD__)   || \
; 3331 :       defined(__FreeBSD__)   || \
; 3332 :       defined(__NetBSD__)
; 3333 :     return _bsd_cpu_count();
; 3334 : #else
; 3335 :     return -1;
; 3336 : #endif
; 3337 : }

  00013	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00017	c3		 ret	 0
_cpu_count ENDP
_TEXT	ENDS
EXTRN	PyLong_FromLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_cpu_count DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$_async_cpu_count
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_cpu_count DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _async_cpu_count
_TEXT	SEGMENT
self$ = 48
_async_cpu_count PROC					; COMDAT

; 3341 : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3342 :     return PyLong_FromLong(_cpu_count());

  00004	e8 00 00 00 00	 call	 _cpu_count
  00009	8b c8		 mov	 ecx, eax

; 3343 : }

  0000b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0000f	e9 00 00 00 00	 jmp	 PyLong_FromLong
_async_cpu_count ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DD@DKPNMLIK@_PyParallel_Init?3?5GetActiveProce@ ; `string'
PUBLIC	??_C@_0FK@NBNOKFBO@_PyParallel_Init?3?5intrinsics?5fai@ ; `string'
PUBLIC	??_C@_0FM@DCEGNIEB@_PyParallel_Init?3?5intrinsics?5fai@ ; `string'
PUBLIC	??_C@_0GB@NAEJGNGB@_PyParallel_Init?3?5invariant?5fail@ ; `string'
PUBLIC	??_C@_0GB@BOHNPJND@_PyParallel_Init?3?5invariant?5fail@ ; `string'
PUBLIC	_PyParallel_Init
EXTRN	__imp_GetCurrentThreadId:PROC
EXTRN	__imp_GetCurrentProcessId:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_Init DD imagerel $LN15
	DD	imagerel $LN15+301
	DD	imagerel $unwind$_PyParallel_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_Init DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0DD@DKPNMLIK@_PyParallel_Init?3?5GetActiveProce@
CONST	SEGMENT
??_C@_0DD@DKPNMLIK@_PyParallel_Init?3?5GetActiveProce@ DB '_PyParallel_In'
	DB	'it: GetActiveProcessorCount() failed', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FK@NBNOKFBO@_PyParallel_Init?3?5intrinsics?5fai@
CONST	SEGMENT
??_C@_0FK@NBNOKFBO@_PyParallel_Init?3?5intrinsics?5fai@ DB '_PyParallel_I'
	DB	'nit: intrinsics failure: _Py_get_current_thread_id() != GetCu'
	DB	'rrentThreadId()', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FM@DCEGNIEB@_PyParallel_Init?3?5intrinsics?5fai@
CONST	SEGMENT
??_C@_0FM@DCEGNIEB@_PyParallel_Init?3?5intrinsics?5fai@ DB '_PyParallel_I'
	DB	'nit: intrinsics failure: _Py_get_current_process_id() != GetC'
	DB	'urrentProcessId()', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0GB@NAEJGNGB@_PyParallel_Init?3?5invariant?5fail@
CONST	SEGMENT
??_C@_0GB@NAEJGNGB@_PyParallel_Init?3?5invariant?5fail@ DB '_PyParallel_I'
	DB	'nit: invariant failed: Py_MainProcessId should also be -1 if '
	DB	'Py_MainThreadId is -1.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0GB@BOHNPJND@_PyParallel_Init?3?5invariant?5fail@
CONST	SEGMENT
??_C@_0GB@BOHNPJND@_PyParallel_Init?3?5invariant?5fail@ DB '_PyParallel_I'
	DB	'nit: invariant failed: Py_MainThreadId should also be -1 if P'
	DB	'y_MainProcessId is -1.', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyParallel_Init
_TEXT	SEGMENT
_PyParallel_Init PROC					; COMDAT

; 3347 : {

$LN15:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3348 :     _Py_sfence();

  00004	0f ae f8	 sfence

; 3349 : 
; 3350 :     if (Py_MainProcessId == -1) {

  00007	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR Py_MainProcessId
  0000d	83 f8 ff	 cmp	 eax, -1
  00010	75 1a		 jne	 SHORT $LN8@PyParallel@4

; 3351 :         if (Py_MainThreadId != -1)

  00012	39 05 00 00 00
	00		 cmp	 DWORD PTR Py_MainThreadId, eax
  00018	74 37		 je	 SHORT $LN12@PyParallel@4

; 3352 :             Py_FatalError("_PyParallel_Init: invariant failed: "  \
; 3353 :                           "Py_MainThreadId should also be -1 if " \
; 3354 :                           "Py_MainProcessId is -1.");

  0001a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0GB@BOHNPJND@_PyParallel_Init?3?5invariant?5fail@
  00021	e8 00 00 00 00	 call	 Py_FatalError
  00026	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR Py_MainProcessId
$LN8@PyParallel@4:

; 3355 :     }
; 3356 :     if (Py_MainThreadId == -1) {

  0002c	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR Py_MainThreadId, -1
  00033	75 17		 jne	 SHORT $LN6@PyParallel@4

; 3357 :         if (Py_MainProcessId != -1)

  00035	83 f8 ff	 cmp	 eax, -1
  00038	74 17		 je	 SHORT $LN12@PyParallel@4

; 3358 :             Py_FatalError("_PyParallel_Init: invariant failed: "   \
; 3359 :                           "Py_MainProcessId should also be -1 if " \
; 3360 :                           "Py_MainThreadId is -1.");

  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0GB@NAEJGNGB@_PyParallel_Init?3?5invariant?5fail@
  00041	e8 00 00 00 00	 call	 Py_FatalError
  00046	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR Py_MainProcessId
$LN6@PyParallel@4:

; 3361 :     }
; 3362 : 
; 3363 :     if (Py_MainProcessId == -1) {

  0004c	83 f8 ff	 cmp	 eax, -1
  0004f	75 28		 jne	 SHORT $LN14@PyParallel@4
$LN12@PyParallel@4:

; 3364 :         Py_MainProcessId = GetCurrentProcessId();

  00051	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetCurrentProcessId
  00057	89 05 00 00 00
	00		 mov	 DWORD PTR Py_MainProcessId, eax

; 3365 :         if (Py_MainProcessId != _Py_get_current_process_id())

  0005d	65 8b 04 25 40
	00 00 00	 mov	 eax, DWORD PTR gs:64
  00065	39 05 00 00 00
	00		 cmp	 DWORD PTR Py_MainProcessId, eax
  0006b	74 0c		 je	 SHORT $LN14@PyParallel@4

; 3366 :             Py_FatalError("_PyParallel_Init: intrinsics failure: " \
; 3367 :                           "_Py_get_current_process_id() != "       \
; 3368 :                           "GetCurrentProcessId()");

  0006d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FM@DCEGNIEB@_PyParallel_Init?3?5intrinsics?5fai@
  00074	e8 00 00 00 00	 call	 Py_FatalError
$LN14@PyParallel@4:

; 3369 :     }
; 3370 : 
; 3371 :     if (Py_MainThreadId == -1) {

  00079	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR Py_MainThreadId, -1
  00080	75 28		 jne	 SHORT $LN2@PyParallel@4

; 3372 :         Py_MainThreadId = GetCurrentThreadId();

  00082	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetCurrentThreadId
  00088	89 05 00 00 00
	00		 mov	 DWORD PTR Py_MainThreadId, eax

; 3373 :         if (Py_MainThreadId != _Py_get_current_thread_id())

  0008e	65 8b 04 25 48
	00 00 00	 mov	 eax, DWORD PTR gs:72
  00096	39 05 00 00 00
	00		 cmp	 DWORD PTR Py_MainThreadId, eax
  0009c	74 0c		 je	 SHORT $LN2@PyParallel@4

; 3374 :             Py_FatalError("_PyParallel_Init: intrinsics failure: " \
; 3375 :                           "_Py_get_current_thread_id() != "        \
; 3376 :                           "GetCurrentThreadId()");

  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FK@NBNOKFBO@_PyParallel_Init?3?5intrinsics?5fai@
  000a5	e8 00 00 00 00	 call	 Py_FatalError
$LN2@PyParallel@4:

; 3377 :     }
; 3378 : 
; 3379 :     _PxObjectSignature = (Px_PTR(_Py_rdtsc()) ^ Px_PTR(&_PxObjectSignature));

  000aa	0f 31		 rdtsc
  000ac	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  000b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PxObjectSignature
  000b7	48 0b c2	 or	 rax, rdx
  000ba	48 33 c1	 xor	 rax, rcx
  000bd	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PxObjectSignature, rax

; 3380 :     _PxSocketSignature = (Px_PTR(_Py_rdtsc()) ^ Px_PTR(&_PxSocketSignature));

  000c4	0f 31		 rdtsc
  000c6	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  000ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PxSocketSignature
  000d1	48 0b c2	 or	 rax, rdx
  000d4	48 33 c1	 xor	 rax, rcx
  000d7	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PxSocketSignature, rax

; 3381 :     _PxSocketBufSignature = (
; 3382 :         Px_PTR(_Py_rdtsc()) ^
; 3383 :         Px_PTR(&_PxSocketBufSignature)
; 3384 :     );

  000de	0f 31		 rdtsc
  000e0	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PxSocketBufSignature

; 3385 : 
; 3386 :     Py_ParallelContextsEnabled = 0;

  000eb	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR Py_ParallelContextsEnabled, 0
  000f5	48 0b c2	 or	 rax, rdx
  000f8	48 33 c1	 xor	 rax, rcx
  000fb	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PxSocketBufSignature, rax

; 3387 :     _Py_lfence();

  00102	0f ae e8	 lfence

; 3388 :     _Py_clflush(&Py_MainThreadId);

  00105	48 0f ae 3d 00
	00 00 00	 clflush QWORD PTR Py_MainThreadId

; 3389 : 
; 3390 :     _PyParallel_NumCPUs = _cpu_count();

  0010d	e8 00 00 00 00	 call	 _cpu_count
  00112	89 05 00 00 00
	00		 mov	 DWORD PTR _PyParallel_NumCPUs, eax

; 3391 :     if (!_PyParallel_NumCPUs)

  00118	85 c0		 test	 eax, eax
  0011a	75 0c		 jne	 SHORT $LN1@PyParallel@4

; 3392 :         Py_FatalError("_PyParallel_Init: GetActiveProcessorCount() failed");

  0011c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DD@DKPNMLIK@_PyParallel_Init?3?5GetActiveProce@
  00123	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyParallel@4:

; 3393 : 
; 3394 : }

  00128	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0012c	c3		 ret	 0
_PyParallel_Init ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_ClearMainThreadId
; Function compile flags: /Ogtpy
;	COMDAT _PyParallel_ClearMainThreadId
_TEXT	SEGMENT
_PyParallel_ClearMainThreadId PROC			; COMDAT

; 3414 :     _Py_sfence();

  00000	0f ae f8	 sfence

; 3415 :     Py_MainThreadId = 0;

  00003	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR Py_MainThreadId, 0

; 3416 :     _Py_lfence();

  0000d	0f ae e8	 lfence

; 3417 :     _Py_clflush(&Py_MainThreadId);

  00010	48 0f ae 3d 00
	00 00 00	 clflush QWORD PTR Py_MainThreadId

; 3418 :     //TSTATE = NULL;
; 3419 : }

  00018	c3		 ret	 0
_PyParallel_ClearMainThreadId ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_CreatedGIL
; Function compile flags: /Ogtpy
;	COMDAT _PyParallel_CreatedGIL
_TEXT	SEGMENT
_PyParallel_CreatedGIL PROC				; COMDAT

; 3424 :     //_PyParallel_ClearMainThreadId();
; 3425 : }

  00000	c2 00 00	 ret	 0
_PyParallel_CreatedGIL ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_AboutToDropGIL
; Function compile flags: /Ogtpy
;	COMDAT _PyParallel_AboutToDropGIL
_TEXT	SEGMENT
_PyParallel_AboutToDropGIL PROC				; COMDAT

; 3430 :     //_PyParallel_ClearMainThreadId();
; 3431 : }

  00000	c2 00 00	 ret	 0
_PyParallel_AboutToDropGIL ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_DestroyedGIL
; Function compile flags: /Ogtpy
;	COMDAT _PyParallel_DestroyedGIL
_TEXT	SEGMENT
_PyParallel_DestroyedGIL PROC				; COMDAT

; 3436 :     //_PyParallel_ClearMainThreadId();
; 3437 : }

  00000	c2 00 00	 ret	 0
_PyParallel_DestroyedGIL ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DE@OCLLNCBC@_PyParallel_JustAcquiredGIL?3?5Py_@ ; `string'
PUBLIC	??_C@_0GK@DIDDDKJH@_PyParallel_JustAcquiredGIL?3?5inv@ ; `string'
PUBLIC	_PyParallel_JustAcquiredGIL
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_JustAcquiredGIL DD imagerel $LN5
	DD	imagerel $LN5+113
	DD	imagerel $unwind$_PyParallel_JustAcquiredGIL
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_JustAcquiredGIL DD 031201H
	DD	01c0109H
	DD	05002H
xdata	ENDS
;	COMDAT ??_C@_0DE@OCLLNCBC@_PyParallel_JustAcquiredGIL?3?5Py_@
CONST	SEGMENT
??_C@_0DE@OCLLNCBC@_PyParallel_JustAcquiredGIL?3?5Py_@ DB '_PyParallel_Ju'
	DB	'stAcquiredGIL: Py_MainProcessId == -1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@DIDDDKJH@_PyParallel_JustAcquiredGIL?3?5inv@
CONST	SEGMENT
??_C@_0GK@DIDDDKJH@_PyParallel_JustAcquiredGIL?3?5inv@ DB '_PyParallel_Ju'
	DB	'stAcquiredGIL: invariant failed: expected Py_MainThreadId to '
	DB	'have value 0, actual value: %d', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyParallel_JustAcquiredGIL
_TEXT	SEGMENT
buf$ = 0
_PyParallel_JustAcquiredGIL PROC			; COMDAT

; 3441 : {

$LN5:
  00000	40 55		 push	 rbp
  00002	48 81 ec e0 00
	00 00		 sub	 rsp, 224		; 000000e0H
  00009	48 8d 6c 24 60	 lea	 rbp, QWORD PTR [rsp+96]
  0000e	48 83 e5 c0	 and	 rbp, -64		; ffffffffffffffc0H

; 3442 :     char buf[128], *fmt;
; 3443 : 
; 3444 :     _Py_lfence();

  00012	0f ae e8	 lfence

; 3445 : 
; 3446 :     if (Py_MainThreadId != 0) {

  00015	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR Py_MainThreadId
  0001c	45 85 c9	 test	 r9d, r9d
  0001f	74 16		 je	 SHORT $LN2@PyParallel@5

; 3447 :         fmt = "_PyParallel_JustAcquiredGIL: invariant failed: "   \
; 3448 :               "expected Py_MainThreadId to have value 0, actual " \
; 3449 :               "value: %d";
; 3450 :         (void)snprintf(buf, sizeof(buf), fmt, Py_MainThreadId);

  00021	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0GK@DIDDDKJH@_PyParallel_JustAcquiredGIL?3?5inv@
  00028	48 8d 4d 00	 lea	 rcx, QWORD PTR buf$[rbp]
  0002c	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__snprintf
$LN2@PyParallel@5:

; 3451 :         /*Py_FatalError(buf);*/
; 3452 :     }
; 3453 : 
; 3454 :     if (Py_MainProcessId == -1)

  00037	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR Py_MainProcessId, -1
  0003e	75 0c		 jne	 SHORT $LN1@PyParallel@5

; 3455 :         Py_FatalError("_PyParallel_JustAcquiredGIL: Py_MainProcessId == -1");

  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DE@OCLLNCBC@_PyParallel_JustAcquiredGIL?3?5Py_@
  00047	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyParallel@5:

; 3456 : 
; 3457 :     _Py_sfence();

  0004c	0f ae f8	 sfence

; 3458 :     Py_MainThreadId = _Py_get_current_thread_id();

  0004f	65 8b 04 25 48
	00 00 00	 mov	 eax, DWORD PTR gs:72
  00057	89 05 00 00 00
	00		 mov	 DWORD PTR Py_MainThreadId, eax

; 3459 :     _Py_lfence();

  0005d	0f ae e8	 lfence

; 3460 :     _Py_clflush(&Py_MainThreadId);

  00060	48 0f ae 3d 00
	00 00 00	 clflush QWORD PTR Py_MainThreadId

; 3461 :     //TSTATE = \
; 3462 :     //    (PyThreadState *)_Py_atomic_load_relaxed(&_PyThreadState_Current);
; 3463 : }

  00068	48 81 c4 e0 00
	00 00		 add	 rsp, 224		; 000000e0H
  0006f	5d		 pop	 rbp
  00070	c3		 ret	 0
_PyParallel_JustAcquiredGIL ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_SetMainProcessId
; Function compile flags: /Ogtpy
;	COMDAT _PyParallel_SetMainProcessId
_TEXT	SEGMENT
id$ = 8
_PyParallel_SetMainProcessId PROC			; COMDAT

; 3468 :     _Py_sfence();

  00000	0f ae f8	 sfence

; 3469 :     Py_MainProcessId = id;

  00003	89 0d 00 00 00
	00		 mov	 DWORD PTR Py_MainProcessId, ecx

; 3470 :     _Py_lfence();

  00009	0f ae e8	 lfence

; 3471 :     _Py_clflush(&Py_MainThreadId);

  0000c	48 0f ae 3d 00
	00 00 00	 clflush QWORD PTR Py_MainThreadId

; 3472 : }

  00014	c3		 ret	 0
_PyParallel_SetMainProcessId ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_ClearMainProcessId
; Function compile flags: /Ogtpy
;	COMDAT _PyParallel_ClearMainProcessId
_TEXT	SEGMENT
_PyParallel_ClearMainProcessId PROC			; COMDAT

; 3477 :     _PyParallel_SetMainProcessId(0);

  00000	33 c9		 xor	 ecx, ecx

; 3478 : }

  00002	e9 00 00 00 00	 jmp	 _PyParallel_SetMainProcessId
_PyParallel_ClearMainProcessId ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_RestoreMainProcessId
; Function compile flags: /Ogtpy
;	COMDAT _PyParallel_RestoreMainProcessId
_TEXT	SEGMENT
_PyParallel_RestoreMainProcessId PROC			; COMDAT

; 3483 :     _PyParallel_SetMainProcessId(_Py_get_current_process_id());

  00000	65 8b 0c 25 40
	00 00 00	 mov	 ecx, DWORD PTR gs:64

; 3484 : }

  00008	e9 00 00 00 00	 jmp	 _PyParallel_SetMainProcessId
_PyParallel_RestoreMainProcessId ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_EnableParallelContexts
; Function compile flags: /Ogtpy
;	COMDAT _PyParallel_EnableParallelContexts
_TEXT	SEGMENT
_PyParallel_EnableParallelContexts PROC			; COMDAT

; 3489 :     _Py_sfence();

  00000	0f ae f8	 sfence

; 3490 :     Py_ParallelContextsEnabled = 1;

  00003	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR Py_ParallelContextsEnabled, 1

; 3491 :     _Py_lfence();

  0000d	0f ae e8	 lfence

; 3492 :     _Py_clflush(&Py_MainThreadId);

  00010	48 0f ae 3d 00
	00 00 00	 clflush QWORD PTR Py_MainThreadId

; 3493 : }

  00018	c3		 ret	 0
_PyParallel_EnableParallelContexts ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_DisableParallelContexts
; Function compile flags: /Ogtpy
;	COMDAT _PyParallel_DisableParallelContexts
_TEXT	SEGMENT
_PyParallel_DisableParallelContexts PROC		; COMDAT

; 3498 :     _Py_sfence();

  00000	0f ae f8	 sfence

; 3499 :     Py_ParallelContextsEnabled = 0;

  00003	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR Py_ParallelContextsEnabled, 0

; 3500 :     _Py_lfence();

  0000d	0f ae e8	 lfence

; 3501 :     _Py_clflush(&Py_MainThreadId);

  00010	48 0f ae 3d 00
	00 00 00	 clflush QWORD PTR Py_MainThreadId

; 3502 : }

  00018	c3		 ret	 0
_PyParallel_DisableParallelContexts ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_NewThreadState
; Function compile flags: /Ogtpy
;	COMDAT _PyParallel_NewThreadState
_TEXT	SEGMENT
tstate$ = 8
_PyParallel_NewThreadState PROC				; COMDAT

; 3507 :     return;
; 3508 : }

  00000	c2 00 00	 ret	 0
_PyParallel_NewThreadState ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _parallel_map
_TEXT	SEGMENT
self$ = 8
args$ = 16
_parallel_map PROC					; COMDAT

; 3514 :     return NULL;

  00000	33 c0		 xor	 eax, eax

; 3515 : }

  00002	c3		 ret	 0
_parallel_map ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_ModInit
EXTRN	PyModule_Create2:PROC
; Function compile flags: /Ogtpy
;	COMDAT _PyParallel_ModInit
_TEXT	SEGMENT
_PyParallel_ModInit PROC				; COMDAT

; 3556 :     PyObject *m;
; 3557 : 
; 3558 :     m = PyModule_Create(&_parallelmodule);

  00000	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_parallelmodule
  00007	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H

; 3559 :     if (m == NULL)
; 3560 :         return NULL;
; 3561 : 
; 3562 :     return m;
; 3563 : }

  0000c	e9 00 00 00 00	 jmp	 PyModule_Create2
_PyParallel_ModInit ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$xlist_dealloc DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$xlist_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$xlist_dealloc DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT xlist_dealloc
_TEXT	SEGMENT
xlist$ = 48
xlist_dealloc PROC					; COMDAT

; 3568 : {

$LN3:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 3569 :     HeapDestroy(xlist->heap_handle);

  00009	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  0000d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_HeapDestroy

; 3570 :     free(xlist);

  00013	48 8b cb	 mov	 rcx, rbx

; 3571 : }

  00016	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001a	5b		 pop	 rbx
  0001b	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_free
xlist_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DG@PACBDENP@xlist?5objects?5cannot?5be?5created?5@ ; `string'
PUBLIC	PyXList_New
EXTRN	__imp_InitializeCriticalSectionAndSpinCount:PROC
EXTRN	PxList_NewFromHeap:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_RuntimeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyXList_New DD imagerel $LN9
	DD	imagerel $LN9+44
	DD	imagerel $unwind$PyXList_New
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyXList_New DD imagerel $LN9+44
	DD	imagerel $LN9+77
	DD	imagerel $chain$0$PyXList_New
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyXList_New DD imagerel $LN9+77
	DD	imagerel $LN9+143
	DD	imagerel $chain$2$PyXList_New
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyXList_New DD imagerel $LN9+143
	DD	imagerel $LN9+207
	DD	imagerel $chain$4$PyXList_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyXList_New DD 020021H
	DD	043400H
	DD	imagerel $LN9
	DD	imagerel $LN9+44
	DD	imagerel $unwind$PyXList_New
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyXList_New DD 020021H
	DD	043400H
	DD	imagerel $LN9
	DD	imagerel $LN9+44
	DD	imagerel $unwind$PyXList_New
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyXList_New DD 020521H
	DD	043405H
	DD	imagerel $LN9
	DD	imagerel $LN9+44
	DD	imagerel $unwind$PyXList_New
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyXList_New DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0DG@PACBDENP@xlist?5objects?5cannot?5be?5created?5@
CONST	SEGMENT
??_C@_0DG@PACBDENP@xlist?5objects?5cannot?5be?5created?5@ DB 'xlist objec'
	DB	'ts cannot be created from parallel threads', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyXList_New
_TEXT	SEGMENT
PyXList_New PROC					; COMDAT

; 3575 : {

$LN9:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3576 :     PyXListObject *xlist;
; 3577 : 
; 3578 :     if (Py_PXCTX) {

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	74 1a		 je	 SHORT $LN4@PyXList_Ne

; 3579 :         PyErr_SetString(PyExc_RuntimeError,
; 3580 :                         "xlist objects cannot be "
; 3581 :                         "created from parallel threads");

  0000d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00014	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DG@PACBDENP@xlist?5objects?5cannot?5be?5created?5@
  0001b	e8 00 00 00 00	 call	 PyErr_SetString

; 3582 :         return NULL;

  00020	33 c0		 xor	 eax, eax

; 3611 : }

  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
$LN4@PyXList_Ne:

; 3583 :     }
; 3584 : 
; 3585 :     xlist = (PyXListObject *)malloc(sizeof(PyXListObject));

  00027	b9 a0 00 00 00	 mov	 ecx, 160		; 000000a0H
  0002c	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00037	48 8b d8	 mov	 rbx, rax

; 3586 :     if (!xlist)

  0003a	48 85 c0	 test	 rax, rax
  0003d	75 0e		 jne	 SHORT $LN3@PyXList_Ne
  0003f	48 8b 5c 24 20	 mov	 rbx, QWORD PTR [rsp+32]

; 3611 : }

  00044	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00048	e9 00 00 00 00	 jmp	 PyErr_NoMemory
$LN3@PyXList_Ne:

; 3587 :         return PyErr_NoMemory();
; 3588 : 
; 3589 :     memset(xlist, 0, sizeof(PyXListObject));

  0004d	33 d2		 xor	 edx, edx
  0004f	41 b8 a0 00 00
	00		 mov	 r8d, 160		; 000000a0H
  00055	48 8b c8	 mov	 rcx, rax
  00058	e8 00 00 00 00	 call	 memset

; 3590 : 
; 3591 :     xlist->heap_handle = HeapCreate(0, 0, 0);

  0005d	45 33 c0	 xor	 r8d, r8d
  00060	33 d2		 xor	 edx, edx
  00062	33 c9		 xor	 ecx, ecx
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_HeapCreate
  0006a	48 89 43 68	 mov	 QWORD PTR [rbx+104], rax

; 3592 :     if (!xlist->heap_handle) {

  0006e	48 85 c0	 test	 rax, rax
  00071	75 1c		 jne	 SHORT $LN2@PyXList_Ne

; 3593 :         PyErr_SetFromWindowsErr(0);

  00073	33 c9		 xor	 ecx, ecx
  00075	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
$LN8@PyXList_Ne:

; 3594 :         free(xlist);

  0007a	48 8b cb	 mov	 rcx, rbx
  0007d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  00083	48 8b 5c 24 20	 mov	 rbx, QWORD PTR [rsp+32]

; 3595 :         return NULL;

  00088	33 c0		 xor	 eax, eax

; 3611 : }

  0008a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0008e	c3		 ret	 0
$LN2@PyXList_Ne:

; 3596 :     }
; 3597 : 
; 3598 :     xlist->head = PxList_NewFromHeap(xlist->heap_handle);

  0008f	48 8b c8	 mov	 rcx, rax
  00092	e8 00 00 00 00	 call	 PxList_NewFromHeap
  00097	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax

; 3599 :     if (!xlist->head) {

  0009b	48 85 c0	 test	 rax, rax

; 3600 :         free(xlist);
; 3601 :         return NULL;

  0009e	74 da		 je	 SHORT $LN8@PyXList_Ne

; 3602 :     }
; 3603 : 
; 3604 :     /* Manually initialize the type. */
; 3605 :     xlist->ob_base.ob_type = &PyXList_Type;

  000a0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyXList_Type

; 3606 :     xlist->ob_base.ob_refcnt = 1;
; 3607 : 
; 3608 :     InitializeCriticalSectionAndSpinCount(&(xlist->cs), 4);

  000a7	48 8d 4b 70	 lea	 rcx, QWORD PTR [rbx+112]
  000ab	ba 04 00 00 00	 mov	 edx, 4
  000b0	48 89 43 58	 mov	 QWORD PTR [rbx+88], rax
  000b4	48 c7 43 50 01
	00 00 00	 mov	 QWORD PTR [rbx+80], 1
  000bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeCriticalSectionAndSpinCount

; 3609 : 
; 3610 :     return (PyObject *)xlist;

  000c2	48 8b c3	 mov	 rax, rbx
  000c5	48 8b 5c 24 20	 mov	 rbx, QWORD PTR [rsp+32]

; 3611 : }

  000ca	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000ce	c3		 ret	 0
PyXList_New ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT xlist_new
_TEXT	SEGMENT
tp$ = 8
args$ = 16
kwds$ = 24
xlist_new PROC						; COMDAT

; 3616 :     assert(tp == &PyXList_Type);
; 3617 :     return PyXList_New();
; 3618 : }

  00000	e9 00 00 00 00	 jmp	 PyXList_New
xlist_new ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT xlist_alloc
_TEXT	SEGMENT
tp$ = 8
nitems$ = 16
xlist_alloc PROC					; COMDAT

; 3623 :     assert(nitems == 0);
; 3624 :     assert(tp == &PyXList_Type);
; 3625 : 
; 3626 :     return PyXList_New();
; 3627 : }

  00000	e9 00 00 00 00	 jmp	 PyXList_New
xlist_alloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_09HMODBDMJ@xlist_pop?$AA@			; `string'
EXTRN	PxList_Pop:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$xlist_pop DD imagerel $LN8
	DD	imagerel $LN8+86
	DD	imagerel $unwind$xlist_pop
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$xlist_pop DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_09HMODBDMJ@xlist_pop?$AA@
CONST	SEGMENT
??_C@_09HMODBDMJ@xlist_pop?$AA@ DB 'xlist_pop', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT xlist_pop
_TEXT	SEGMENT
self$ = 48
args$ = 56
xlist_pop PROC						; COMDAT

; 3631 : {

$LN8:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 3632 :     PyXListObject *xlist = (PyXListObject *)self;
; 3633 :     PxListItem *item;
; 3634 :     PyObject *obj;
; 3635 :     assert(args == NULL);
; 3636 :     Py_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN2@xlist_pop
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09HMODBDMJ@xlist_pop?$AA@
  00020	45 33 c9	 xor	 r9d, r9d
  00023	41 b8 34 0e 00
	00		 mov	 r8d, 3636		; 00000e34H
  00029	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN2@xlist_pop:

; 3637 :     /*Py_INCREF(xlist);*/
; 3638 :     item = PxList_Pop(xlist->head);

  0002e	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00032	e8 00 00 00 00	 call	 PxList_Pop

; 3639 :     obj = (item ? I2O(item) : NULL);

  00037	48 85 c0	 test	 rax, rax
  0003a	74 14		 je	 SHORT $LN1@xlist_pop
  0003c	48 83 c0 f0	 add	 rax, -16

; 3640 :     if (obj)

  00040	74 0e		 je	 SHORT $LN1@xlist_pop

; 3641 :         Py_REFCNT(obj) = 1;

  00042	48 c7 40 50 01
	00 00 00	 mov	 QWORD PTR [rax+80], 1

; 3642 :     return obj;
; 3643 : }

  0004a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004e	5b		 pop	 rbx
  0004f	c3		 ret	 0
$LN1@xlist_pop:
  00050	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00054	5b		 pop	 rbx
  00055	c3		 ret	 0
xlist_pop ENDP
_TEXT	ENDS
PUBLIC	PyXList_Pop
; Function compile flags: /Ogtpy
;	COMDAT PyXList_Pop
_TEXT	SEGMENT
xlist$ = 8
PyXList_Pop PROC					; COMDAT

; 3648 :     return xlist_pop(xlist, NULL);

  00000	33 d2		 xor	 edx, edx

; 3649 : }

  00002	e9 00 00 00 00	 jmp	 xlist_pop
PyXList_Pop ENDP
_TEXT	ENDS
PUBLIC	_is_active_ex
EXTRN	PxList_QueryDepth:PROC
EXTRN	__imp_TryEnterCriticalSection:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_is_active_ex DD imagerel $LN6
	DD	imagerel $LN6+354
	DD	imagerel $unwind$_is_active_ex
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_is_active_ex DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _is_active_ex
_TEXT	SEGMENT
_is_active_ex PROC					; COMDAT

; 3819 : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 3820 :     PyThreadState *tstate = get_main_thread_state();

  0000a	e8 00 00 00 00	 call	 get_main_thread_state

; 3821 :     PxState *px = (PxState *)tstate->px;

  0000f	48 8b 98 a0 00
	00 00		 mov	 rbx, QWORD PTR [rax+160]

; 3822 :     int rv;
; 3823 : 
; 3824 :     if (!TryEnterCriticalSection(&(px->cs)))

  00016	48 8d bb a8 00
	00 00		 lea	 rdi, QWORD PTR [rbx+168]
  0001d	48 8b cf	 mov	 rcx, rdi
  00020	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TryEnterCriticalSection
  00026	85 c0		 test	 eax, eax
  00028	75 10		 jne	 SHORT $LN1@is_active_

; 3825 :         return 1;

  0002a	b8 01 00 00 00	 mov	 eax, 1

; 3848 : }

  0002f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00034	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00038	5f		 pop	 rdi
  00039	c3		 ret	 0
$LN1@is_active_:

; 3826 : 
; 3827 :     rv = !(px->ctx_first == NULL &&
; 3828 :            px->done == px->last_done_count &&
; 3829 :            px->submitted == px->last_submitted_count &&
; 3830 :            px->pending == 0 &&
; 3831 :            px->inflight == 0 &&
; 3832 :            px->sync_wait_submitted == px->last_sync_wait_submitted_count &&
; 3833 :            px->sync_wait_pending == 0 &&
; 3834 :            px->sync_wait_inflight == 0 &&
; 3835 :            px->sync_wait_done == px->last_sync_wait_done_count &&
; 3836 :            px->sync_nowait_submitted == px->last_sync_nowait_submitted_count &&
; 3837 :            px->sync_nowait_pending == 0 &&
; 3838 :            px->sync_nowait_inflight == 0 &&
; 3839 :            px->sync_nowait_done == px->last_sync_nowait_done_count &&
; 3840 :            PxList_QueryDepth(px->errors)   == 0 &&
; 3841 :            PxList_QueryDepth(px->finished) == 0 &&
; 3842 :            PxList_QueryDepth(px->incoming) == 0 &&
; 3843 :            PxList_QueryDepth(px->completed_errbacks) == 0 &&
; 3844 :            PxList_QueryDepth(px->completed_callbacks) == 0);

  0003a	48 83 7b 78 00	 cmp	 QWORD PTR [rbx+120], 0
  0003f	0f 85 02 01 00
	00		 jne	 $LN4@is_active_
  00045	48 8b 83 18 01
	00 00		 mov	 rax, QWORD PTR [rbx+280]
  0004c	48 3b 83 a8 01
	00 00		 cmp	 rax, QWORD PTR [rbx+424]
  00053	0f 85 ee 00 00
	00		 jne	 $LN4@is_active_
  00059	48 8b 83 08 01
	00 00		 mov	 rax, QWORD PTR [rbx+264]
  00060	48 3b 83 b0 01
	00 00		 cmp	 rax, QWORD PTR [rbx+432]
  00067	0f 85 da 00 00
	00		 jne	 $LN4@is_active_
  0006d	8b 83 10 01 00
	00		 mov	 eax, DWORD PTR [rbx+272]
  00073	85 c0		 test	 eax, eax
  00075	0f 85 cc 00 00
	00		 jne	 $LN4@is_active_
  0007b	8b 83 14 01 00
	00		 mov	 eax, DWORD PTR [rbx+276]
  00081	85 c0		 test	 eax, eax
  00083	0f 85 be 00 00
	00		 jne	 $LN4@is_active_
  00089	48 8b 83 78 01
	00 00		 mov	 rax, QWORD PTR [rbx+376]
  00090	48 3b 83 c0 01
	00 00		 cmp	 rax, QWORD PTR [rbx+448]
  00097	0f 85 aa 00 00
	00		 jne	 $LN4@is_active_
  0009d	8b 83 80 01 00
	00		 mov	 eax, DWORD PTR [rbx+384]
  000a3	85 c0		 test	 eax, eax
  000a5	0f 85 9c 00 00
	00		 jne	 $LN4@is_active_
  000ab	8b 83 84 01 00
	00		 mov	 eax, DWORD PTR [rbx+388]
  000b1	85 c0		 test	 eax, eax
  000b3	0f 85 8e 00 00
	00		 jne	 $LN4@is_active_
  000b9	48 8b 83 88 01
	00 00		 mov	 rax, QWORD PTR [rbx+392]
  000c0	48 3b 83 b8 01
	00 00		 cmp	 rax, QWORD PTR [rbx+440]
  000c7	75 7e		 jne	 SHORT $LN4@is_active_
  000c9	48 8b 83 90 01
	00 00		 mov	 rax, QWORD PTR [rbx+400]
  000d0	48 3b 83 d0 01
	00 00		 cmp	 rax, QWORD PTR [rbx+464]
  000d7	75 6e		 jne	 SHORT $LN4@is_active_
  000d9	8b 83 98 01 00
	00		 mov	 eax, DWORD PTR [rbx+408]
  000df	85 c0		 test	 eax, eax
  000e1	75 64		 jne	 SHORT $LN4@is_active_
  000e3	8b 83 9c 01 00
	00		 mov	 eax, DWORD PTR [rbx+412]
  000e9	85 c0		 test	 eax, eax
  000eb	75 5a		 jne	 SHORT $LN4@is_active_
  000ed	48 8b 83 a0 01
	00 00		 mov	 rax, QWORD PTR [rbx+416]
  000f4	48 3b 83 c8 01
	00 00		 cmp	 rax, QWORD PTR [rbx+456]
  000fb	75 4a		 jne	 SHORT $LN4@is_active_
  000fd	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  00101	e8 00 00 00 00	 call	 PxList_QueryDepth
  00106	66 85 c0	 test	 ax, ax
  00109	75 3c		 jne	 SHORT $LN4@is_active_
  0010b	48 8b 4b 28	 mov	 rcx, QWORD PTR [rbx+40]
  0010f	e8 00 00 00 00	 call	 PxList_QueryDepth
  00114	66 85 c0	 test	 ax, ax
  00117	75 2e		 jne	 SHORT $LN4@is_active_
  00119	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  0011d	e8 00 00 00 00	 call	 PxList_QueryDepth
  00122	66 85 c0	 test	 ax, ax
  00125	75 20		 jne	 SHORT $LN4@is_active_
  00127	48 8b 4b 18	 mov	 rcx, QWORD PTR [rbx+24]
  0012b	e8 00 00 00 00	 call	 PxList_QueryDepth
  00130	66 85 c0	 test	 ax, ax
  00133	75 12		 jne	 SHORT $LN4@is_active_
  00135	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00139	e8 00 00 00 00	 call	 PxList_QueryDepth
  0013e	66 85 c0	 test	 ax, ax
  00141	75 04		 jne	 SHORT $LN4@is_active_
  00143	33 db		 xor	 ebx, ebx
  00145	eb 05		 jmp	 SHORT $LN5@is_active_
$LN4@is_active_:
  00147	bb 01 00 00 00	 mov	 ebx, 1
$LN5@is_active_:

; 3845 : 
; 3846 :     LeaveCriticalSection(&(px->cs));

  0014c	48 8b cf	 mov	 rcx, rdi
  0014f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection

; 3847 :     return rv;

  00155	8b c3		 mov	 eax, ebx

; 3848 : }

  00157	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0015c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00160	5f		 pop	 rdi
  00161	c3		 ret	 0
_is_active_ex ENDP
_TEXT	ENDS
PUBLIC	_rdtsc
; Function compile flags: /Ogtpy
;	COMDAT _rdtsc
_TEXT	SEGMENT
_rdtsc	PROC						; COMDAT

; 3869 :     return _Py_rdtsc();

  00000	0f 31		 rdtsc
  00002	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  00006	48 0b c2	 or	 rax, rdx

; 3870 : }

  00009	c3		 ret	 0
_rdtsc	ENDP
_TEXT	ENDS
EXTRN	PyLong_FromUnsignedLongLong:PROC
; Function compile flags: /Ogtpy
;	COMDAT _async_rdtsc
_TEXT	SEGMENT
_async_rdtsc PROC					; COMDAT

; 3875 :     return PyLong_FromUnsignedLongLong(_Py_rdtsc());

  00000	0f 31		 rdtsc
  00002	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  00006	48 0b c2	 or	 rax, rdx
  00009	48 8b c8	 mov	 rcx, rax

; 3876 : }

  0000c	e9 00 00 00 00	 jmp	 PyLong_FromUnsignedLongLong
_async_rdtsc ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
PUBLIC	decref_args
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$decref_args DD imagerel $LN78
	DD	imagerel $LN78+100
	DD	imagerel $unwind$decref_args
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$decref_args DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT decref_args
_TEXT	SEGMENT
c$ = 48
decref_args PROC					; COMDAT

; 3944 : {

$LN78:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 3945 :     Py_XDECREF(c->func);

  00009	48 8b 89 38 32
	00 00		 mov	 rcx, QWORD PTR [rcx+12856]
  00010	48 85 c9	 test	 rcx, rcx
  00013	74 05		 je	 SHORT $LN19@decref_arg
  00015	e8 00 00 00 00	 call	 _Py_DecRef
$LN19@decref_arg:

; 3946 :     Py_XDECREF(c->args);

  0001a	48 8b 8b 40 32
	00 00		 mov	 rcx, QWORD PTR [rbx+12864]
  00021	48 85 c9	 test	 rcx, rcx
  00024	74 05		 je	 SHORT $LN15@decref_arg
  00026	e8 00 00 00 00	 call	 _Py_DecRef
$LN15@decref_arg:

; 3947 :     Py_XDECREF(c->kwds);

  0002b	48 8b 8b 48 32
	00 00		 mov	 rcx, QWORD PTR [rbx+12872]
  00032	48 85 c9	 test	 rcx, rcx
  00035	74 05		 je	 SHORT $LN11@decref_arg
  00037	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@decref_arg:

; 3948 :     Py_XDECREF(c->callback);

  0003c	48 8b 8b 50 32
	00 00		 mov	 rcx, QWORD PTR [rbx+12880]
  00043	48 85 c9	 test	 rcx, rcx
  00046	74 05		 je	 SHORT $LN7@decref_arg
  00048	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@decref_arg:

; 3949 :     Py_XDECREF(c->errback);

  0004d	48 8b 8b 58 32
	00 00		 mov	 rcx, QWORD PTR [rbx+12888]
  00054	48 85 c9	 test	 rcx, rcx
  00057	74 05		 je	 SHORT $LN3@decref_arg
  00059	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@decref_arg:

; 3950 : }

  0005e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00062	5b		 pop	 rbx
  00063	c3		 ret	 0
decref_args ENDP
_TEXT	ENDS
PUBLIC	decref_waitobj_args
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$decref_waitobj_args DD imagerel $LN25
	DD	imagerel $LN25+38
	DD	imagerel $unwind$decref_waitobj_args
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$decref_waitobj_args DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT decref_waitobj_args
_TEXT	SEGMENT
c$ = 48
decref_waitobj_args PROC				; COMDAT

; 3955 : {

$LN25:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 3956 :     Py_DECREF(c->waitobj);

  00009	48 8b 89 28 32
	00 00		 mov	 rcx, QWORD PTR [rcx+12840]
  00010	e8 00 00 00 00	 call	 _Py_DecRef

; 3957 :     Py_DECREF(c->waitobj_timeout);

  00015	48 8b 8b 30 32
	00 00		 mov	 rcx, QWORD PTR [rbx+12848]

; 3958 : }

  0001c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00020	5b		 pop	 rbx
  00021	e9 00 00 00 00	 jmp	 _Py_DecRef
decref_waitobj_args ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _Py_HandleCtrlC
_TEXT	SEGMENT
ctrltype$ = 8
_Py_HandleCtrlC PROC					; COMDAT

; 4075 :     if (ctrltype == CTRL_C_EVENT) {

  00000	85 c9		 test	 ecx, ecx
  00002	75 1e		 jne	 SHORT $LN1@Py_HandleC

; 4076 :         _Py_sfence();

  00004	0f ae f8	 sfence

; 4077 :         _Py_CtrlCPressed = 1;

  00007	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Py_CtrlCPressed, 1

; 4078 :         _Py_lfence();

  00011	0f ae e8	 lfence

; 4079 :         _Py_clflush(&_Py_CtrlCPressed);

  00014	48 0f ae 3d 00
	00 00 00	 clflush QWORD PTR _Py_CtrlCPressed

; 4080 :         return TRUE;

  0001c	b8 01 00 00 00	 mov	 eax, 1

; 4083 : }

  00021	c3		 ret	 0
$LN1@Py_HandleC:

; 4081 :     }
; 4082 :     return FALSE;

  00022	33 c0		 xor	 eax, eax

; 4083 : }

  00024	c3		 ret	 0
_Py_HandleCtrlC ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@DEDCJLKF@_Py_CheckCtrlC?$AA@		; `string'
PUBLIC	_Py_CheckCtrlC
EXTRN	PyErr_SetNone:PROC
EXTRN	PyExc_KeyboardInterrupt:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_CheckCtrlC DD imagerel $LN5
	DD	imagerel $LN5+89
	DD	imagerel $unwind$_Py_CheckCtrlC
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_CheckCtrlC DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0P@DEDCJLKF@_Py_CheckCtrlC?$AA@
CONST	SEGMENT
??_C@_0P@DEDCJLKF@_Py_CheckCtrlC?$AA@ DB '_Py_CheckCtrlC', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_CheckCtrlC
_TEXT	SEGMENT
_Py_CheckCtrlC PROC					; COMDAT

; 4088 : {

$LN5:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 4089 :     Py_GUARD

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	74 1c		 je	 SHORT $LN2@Py_CheckCt
  0000d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@DEDCJLKF@_Py_CheckCtrlC?$AA@
  0001b	45 33 c9	 xor	 r9d, r9d
  0001e	41 b8 f9 0f 00
	00		 mov	 r8d, 4089		; 00000ff9H
  00024	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN2@Py_CheckCt:

; 4090 : 
; 4091 :     if (_Py_CtrlCPressed) {

  00029	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Py_CtrlCPressed, 0
  00030	74 20		 je	 SHORT $LN1@Py_CheckCt

; 4092 :         _Py_CtrlCPressed = 0;
; 4093 :         PyErr_SetNone(PyExc_KeyboardInterrupt);

  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_KeyboardInterrupt
  00039	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _Py_CtrlCPressed, 0
  00043	e8 00 00 00 00	 call	 PyErr_SetNone

; 4094 :         return 1;

  00048	b8 01 00 00 00	 mov	 eax, 1

; 4098 : }

  0004d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00051	c3		 ret	 0
$LN1@Py_CheckCt:

; 4095 :     }
; 4096 : 
; 4097 :     return 0;

  00052	33 c0		 xor	 eax, eax

; 4098 : }

  00054	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00058	c3		 ret	 0
_Py_CheckCtrlC ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _async_map
_TEXT	SEGMENT
self$ = 8
args$ = 16
_async_map PROC						; COMDAT

; 4360 :     PyObject *result = NULL;
; 4361 : 
; 4362 :     return result;

  00000	33 c0		 xor	 eax, eax

; 4363 : }

  00002	c3		 ret	 0
_async_map ENDP
_TEXT	ENDS
PUBLIC	_async_enabled
; Function compile flags: /Ogtpy
;	COMDAT _async_enabled
_TEXT	SEGMENT
self$ = 8
args$ = 16
_async_enabled PROC					; COMDAT

; 4645 :     /*
; 4646 :     if (!PyArg_ParseTuple(args, "O!:socket", PySocketModule.Sock_Type, &sock))
; 4647 :         return NULL;
; 4648 :         */
; 4649 :     return NULL;

  00000	33 c0		 xor	 eax, eax

; 4650 : }

  00002	c3		 ret	 0
_async_enabled ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _async_submit_timer
_TEXT	SEGMENT
self$ = 8
args$ = 16
_async_submit_timer PROC				; COMDAT

; 4749 :     PyObject *result = NULL;
; 4750 : 
; 4751 :     return result;

  00000	33 c0		 xor	 eax, eax

; 4752 : }

  00002	c3		 ret	 0
_async_submit_timer ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _async_submit_io
_TEXT	SEGMENT
self$ = 8
args$ = 16
_async_submit_io PROC					; COMDAT

; 4757 :     return NULL;

  00000	33 c0		 xor	 eax, eax

; 4758 : }

  00002	c3		 ret	 0
_async_submit_io ENDP
_TEXT	ENDS
PUBLIC	_async_submit_read_io
; Function compile flags: /Ogtpy
;	COMDAT _async_submit_read_io
_TEXT	SEGMENT
self$ = 8
args$ = 16
_async_submit_read_io PROC				; COMDAT

; 4996 :     //return _async_submit_io(self, args, 0);
; 4997 :     return NULL;

  00000	33 c0		 xor	 eax, eax

; 4998 : }

  00002	c3		 ret	 0
_async_submit_read_io ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _async_submit_server
_TEXT	SEGMENT
self$ = 8
args$ = 16
_async_submit_server PROC				; COMDAT

; 5003 :     PyObject *result = NULL;
; 5004 : 
; 5005 :     return result;

  00000	33 c0		 xor	 eax, eax

; 5006 : }

  00002	c3		 ret	 0
_async_submit_server ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _async_submit_client
_TEXT	SEGMENT
self$ = 8
args$ = 16
_async_submit_client PROC				; COMDAT

; 5011 :     PyObject *result = NULL;
; 5012 : 
; 5013 :     return result;

  00000	33 c0		 xor	 eax, eax

; 5014 : }

  00002	c3		 ret	 0
_async_submit_client ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _async_submit_class
_TEXT	SEGMENT
self$ = 8
args$ = 16
_async_submit_class PROC				; COMDAT

; 5019 :     PyObject *result = NULL;
; 5020 : 
; 5021 :     return result;

  00000	33 c0		 xor	 eax, eax

; 5022 : }

  00002	c3		 ret	 0
_async_submit_class ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@KKIMBCMI@_PyParallel_GetThreadState?$AA@ ; `string'
PUBLIC	_PyParallel_GetThreadState
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_GetThreadState DD imagerel $LN4
	DD	imagerel $LN4+82
	DD	imagerel $unwind$_PyParallel_GetThreadState
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_GetThreadState DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BL@KKIMBCMI@_PyParallel_GetThreadState?$AA@
CONST	SEGMENT
??_C@_0BL@KKIMBCMI@_PyParallel_GetThreadState?$AA@ DB '_PyParallel_GetThr'
	DB	'eadState', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyParallel_GetThreadState
_TEXT	SEGMENT
_PyParallel_GetThreadState PROC				; COMDAT

; 5599 : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 5600 :     Px_GUARD

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	75 1d		 jne	 SHORT $LN1@PyParallel@6
  0000d	44 8d 48 01	 lea	 r9d, QWORD PTR [rax+1]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@KKIMBCMI@_PyParallel_GetThreadState?$AA@
  0001f	41 b8 e0 15 00
	00		 mov	 r8d, 5600		; 000015e0H
  00025	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@PyParallel@6:

; 5601 :     assert(ctx->pstate);
; 5602 :     assert(ctx->pstate != ctx->tstate);
; 5603 :     return ctx->pstate;

  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00030	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00039	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:ctx
  0003e	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00042	48 8b 04 10	 mov	 rax, QWORD PTR [rax+rdx]
  00046	48 8b 80 e8 00
	00 00		 mov	 rax, QWORD PTR [rax+232]

; 5604 : }

  0004d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00051	c3		 ret	 0
_PyParallel_GetThreadState ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@LJDCILKF@_PxMem_Malloc?$AA@		; `string'
PUBLIC	_PxMem_Malloc
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PxMem_Malloc DD imagerel $LN4
	DD	imagerel $LN4+95
	DD	imagerel $unwind$_PxMem_Malloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PxMem_Malloc DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0O@LJDCILKF@_PxMem_Malloc?$AA@
CONST	SEGMENT
??_C@_0O@LJDCILKF@_PxMem_Malloc?$AA@ DB '_PxMem_Malloc', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PxMem_Malloc
_TEXT	SEGMENT
n$ = 48
_PxMem_Malloc PROC					; COMDAT

; 5681 : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 5682 :     Px_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 1d		 jne	 SHORT $LN1@PxMem_Mall
  00012	44 8d 48 01	 lea	 r9d, QWORD PTR [rax+1]
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@LJDCILKF@_PxMem_Malloc?$AA@
  00024	41 b8 32 16 00
	00		 mov	 r8d, 5682		; 00001632H
  0002a	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@PxMem_Mall:

; 5683 :     return _PyHeap_Malloc(ctx, n, 0, 0);

  0002f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  00035	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0003e	41 ba 00 00 00
	00		 mov	 r10d, OFFSET FLAT:ctx
  00044	48 8b 0c d0	 mov	 rcx, QWORD PTR [rax+rdx*8]
  00048	45 33 c9	 xor	 r9d, r9d
  0004b	45 33 c0	 xor	 r8d, r8d
  0004e	4a 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+r10]
  00052	48 8b d3	 mov	 rdx, rbx

; 5684 : }

  00055	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00059	5b		 pop	 rbx
  0005a	e9 00 00 00 00	 jmp	 _PyHeap_Malloc
_PxMem_Malloc ENDP
_TEXT	ENDS
PUBLIC	_PxMem_Realloc
; Function compile flags: /Ogtpy
;	COMDAT _PxMem_Realloc
_TEXT	SEGMENT
p$ = 8
n$ = 16
_PxMem_Realloc PROC					; COMDAT

; 5689 :     return _PxObject_Realloc(p, n);
; 5690 : }

  00000	e9 00 00 00 00	 jmp	 _PxObject_Realloc
_PxMem_Realloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CP@OMBLHGJH@?$CFs?3?$CFi?5context?5at?5?$CFp?5has?5negative@ ; `string'
PUBLIC	_Px_NegativePersistedCount
EXTRN	PyOS_snprintf:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Px_NegativePersistedCount DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$_Px_NegativePersistedCount
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Px_NegativePersistedCount DD 020701H
	DD	02f0107H
xdata	ENDS
;	COMDAT ??_C@_0CP@OMBLHGJH@?$CFs?3?$CFi?5context?5at?5?$CFp?5has?5negative@
CONST	SEGMENT
??_C@_0CP@OMBLHGJH@?$CFs?3?$CFi?5context?5at?5?$CFp?5has?5negative@ DB '%'
	DB	's:%i context at %p has negative ref count %Id', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Px_NegativePersistedCount
_TEXT	SEGMENT
buf$ = 64
fname$ = 384
lineno$ = 392
c$ = 400
count$ = 408
_Px_NegativePersistedCount PROC				; COMDAT

; 5700 : {

$LN3:
  00000	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H

; 5701 :     char buf[300];
; 5702 : 
; 5703 :     PyOS_snprintf(buf, sizeof(buf),
; 5704 :                   "%s:%i context at %p has negative ref count "
; 5705 :                   "%" PY_FORMAT_SIZE_T "d",
; 5706 :                   fname, lineno, c, count);

  00007	44 89 4c 24 30	 mov	 DWORD PTR [rsp+48], r9d
  0000c	4c 89 44 24 28	 mov	 QWORD PTR [rsp+40], r8
  00011	4c 8b c9	 mov	 r9, rcx
  00014	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  00018	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CP@OMBLHGJH@?$CFs?3?$CFi?5context?5at?5?$CFp?5has?5negative@
  0001f	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buf$[rsp]
  00024	ba 2c 01 00 00	 mov	 edx, 300		; 0000012cH
  00029	e8 00 00 00 00	 call	 PyOS_snprintf

; 5707 :     Py_FatalError(buf);

  0002e	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buf$[rsp]
  00033	e8 00 00 00 00	 call	 Py_FatalError

; 5708 : }

  00038	48 81 c4 78 01
	00 00		 add	 rsp, 376		; 00000178H
  0003f	c3		 ret	 0
_Px_NegativePersistedCount ENDP
_TEXT	ENDS
PUBLIC	PxSocket_GetRecvCallback
EXTRN	PyObject_IsTrue:PROC
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyObject_GetAttrString:PROC
EXTRN	PyObject_HasAttrString:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel_private.h
pdata	SEGMENT
$pdata$PxSocket_GetRecvCallback DD imagerel $LN9
	DD	imagerel $LN9+127
	DD	imagerel $unwind$PxSocket_GetRecvCallback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocket_GetRecvCallback DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT PxSocket_GetRecvCallback
_TEXT	SEGMENT
s$ = 48
PxSocket_GetRecvCallback PROC				; COMDAT

; 5790 : {

$LN9:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 5791 :     int lines_mode;
; 5792 :     READ_LOCK(s);

  0000a	48 8d 79 28	 lea	 rdi, QWORD PTR [rcx+40]
  0000e	48 8b d9	 mov	 rbx, rcx
  00011	48 8b cf	 mov	 rcx, rdi
  00014	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AcquireSRWLockShared

; 5793 :     lines_mode = PyObject_IsTrue(PxSocket_GET_ATTR("lines_mode"));

  0001a	48 8b 8b 90 02
	00 00		 mov	 rcx, QWORD PTR [rbx+656]
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@JKAFEJJM@lines_mode?$AA@
  00028	e8 00 00 00 00	 call	 PyObject_HasAttrString
  0002d	85 c0		 test	 eax, eax
  0002f	74 15		 je	 SHORT $LN3@PxSocket_G
  00031	48 8b 8b 90 02
	00 00		 mov	 rcx, QWORD PTR [rbx+656]
  00038	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@JKAFEJJM@lines_mode?$AA@
  0003f	e8 00 00 00 00	 call	 PyObject_GetAttrString
  00044	eb 07		 jmp	 SHORT $LN4@PxSocket_G
$LN3@PxSocket_G:
  00046	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN4@PxSocket_G:
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 PyObject_IsTrue

; 5794 :     READ_UNLOCK(s);

  00055	48 8b cf	 mov	 rcx, rdi
  00058	8b d8		 mov	 ebx, eax
  0005a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseSRWLockShared

; 5795 :     return (lines_mode ? "lines_received" : "data_received");

  00060	85 db		 test	 ebx, ebx

; 5796 : }

  00062	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00067	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@FHJFIELO@lines_received?$AA@
  0006e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@KHJLGLGO@data_received?$AA@
  00075	48 0f 45 c1	 cmovne	 rax, rcx
  00079	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007d	5f		 pop	 rdi
  0007e	c3		 ret	 0
PxSocket_GetRecvCallback ENDP
_TEXT	ENDS
EXTRN	__imp_getsockopt:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocket_UpdateConnectTime DD imagerel PxSocket_UpdateConnectTime
	DD	imagerel PxSocket_UpdateConnectTime+91
	DD	imagerel $unwind$PxSocket_UpdateConnectTime
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocket_UpdateConnectTime DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PxSocket_UpdateConnectTime
_TEXT	SEGMENT
bytes$ = 64
s$ = 64
seconds$ = 72
PxSocket_UpdateConnectTime PROC				; COMDAT

; 5830 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 5831 :     Context *c = s->ctx;
; 5832 :     int seconds;
; 5833 :     int bytes = sizeof(seconds);
; 5834 :     int result = 0;
; 5835 :     char *b = (char *)&seconds;
; 5836 :     int  *n = &bytes;
; 5837 :     SOCKET fd = s->sock_fd;
; 5838 : 
; 5839 :     if (getsockopt(fd, SOL_SOCKET, SO_CONNECT_TIME, b, n) != NO_ERROR)

  00009	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  0000d	48 8d 44 24 40	 lea	 rax, QWORD PTR bytes$[rsp]
  00012	4c 8d 4c 24 48	 lea	 r9, QWORD PTR seconds$[rsp]
  00017	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  0001c	41 b8 0c 70 00
	00		 mov	 r8d, 28684		; 0000700cH
  00022	c7 44 24 40 04
	00 00 00	 mov	 DWORD PTR bytes$[rsp], 4
  0002a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getsockopt
  00035	85 c0		 test	 eax, eax
  00037	75 1a		 jne	 SHORT $LN5@PxSocket_U

; 5840 :         goto end;
; 5841 : 
; 5842 :     if (seconds != -1)

  00039	8b 44 24 48	 mov	 eax, DWORD PTR seconds$[rsp]
  0003d	83 f8 ff	 cmp	 eax, -1
  00040	74 06		 je	 SHORT $LN1@PxSocket_U

; 5843 :         s->connect_time = seconds;

  00042	89 83 88 03 00
	00		 mov	 DWORD PTR [rbx+904], eax
$LN1@PxSocket_U:

; 5844 : 
; 5845 :     result = 1;
; 5846 : 
; 5847 : end:
; 5848 :     return result;

  00048	b8 01 00 00 00	 mov	 eax, 1

; 5849 : }

  0004d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00051	5b		 pop	 rbx
  00052	c3		 ret	 0
$LN5@PxSocket_U:

; 5844 : 
; 5845 :     result = 1;
; 5846 : 
; 5847 : end:
; 5848 :     return result;

  00053	33 c0		 xor	 eax, eax
$end$129853:

; 5849 : }

  00055	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00059	5b		 pop	 rbx
  0005a	c3		 ret	 0
PxSocket_UpdateConnectTime ENDP
_TEXT	ENDS
PUBLIC	new_pxsocketbuf_from_bytes
EXTRN	PyBytes_AsStringAndSize:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$new_pxsocketbuf_from_bytes DD imagerel $LN6
	DD	imagerel $LN6+95
	DD	imagerel $unwind$new_pxsocketbuf_from_bytes
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$new_pxsocketbuf_from_bytes DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT new_pxsocketbuf_from_bytes
_TEXT	SEGMENT
c$ = 48
o$ = 56
nbytes$ = 64
buf$ = 72
new_pxsocketbuf_from_bytes PROC				; COMDAT

; 6942 : {

$LN6:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b c2	 mov	 rax, rdx
  00009	48 8b d9	 mov	 rbx, rcx

; 6943 :     size_t size;
; 6944 :     Py_ssize_t nbytes;
; 6945 :     PxSocketBuf *sbuf;
; 6946 :     char *buf;
; 6947 : 
; 6948 :     if (PyBytes_AsStringAndSize((PyObject *)o, &buf, &nbytes) == -1)

  0000c	4c 8d 44 24 40	 lea	 r8, QWORD PTR nbytes$[rsp]
  00011	48 8d 54 24 48	 lea	 rdx, QWORD PTR buf$[rsp]
  00016	48 8b c8	 mov	 rcx, rax
  00019	e8 00 00 00 00	 call	 PyBytes_AsStringAndSize
  0001e	83 f8 ff	 cmp	 eax, -1
  00021	75 08		 jne	 SHORT $LN2@new_pxsock
$LN5@new_pxsock:

; 6949 :         return NULL;

  00023	33 c0		 xor	 eax, eax

; 6960 : }

  00025	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00029	5b		 pop	 rbx
  0002a	c3		 ret	 0
$LN2@new_pxsock:

; 6950 : 
; 6951 :     size = sizeof(PxSocketBuf);
; 6952 : 
; 6953 :     sbuf = (PxSocketBuf *)_PyHeap_Malloc(c, size, 0, 0);

  0002b	45 33 c9	 xor	 r9d, r9d
  0002e	45 33 c0	 xor	 r8d, r8d
  00031	ba b0 00 00 00	 mov	 edx, 176		; 000000b0H
  00036	48 8b cb	 mov	 rcx, rbx
  00039	e8 00 00 00 00	 call	 _PyHeap_Malloc
  0003e	4c 8b d8	 mov	 r11, rax

; 6954 :     if (!sbuf)

  00041	48 85 c0	 test	 rax, rax

; 6955 :         return NULL;

  00044	74 dd		 je	 SHORT $LN5@new_pxsock

; 6956 : 
; 6957 :     sbuf->w.len = (ULONG)nbytes;

  00046	8b 44 24 40	 mov	 eax, DWORD PTR nbytes$[rsp]
  0004a	41 89 03	 mov	 DWORD PTR [r11], eax

; 6958 :     sbuf->w.buf = buf;

  0004d	48 8b 44 24 48	 mov	 rax, QWORD PTR buf$[rsp]
  00052	49 89 43 08	 mov	 QWORD PTR [r11+8], rax

; 6959 :     return sbuf;

  00056	49 8b c3	 mov	 rax, r11

; 6960 : }

  00059	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005d	5b		 pop	 rbx
  0005e	c3		 ret	 0
new_pxsocketbuf_from_bytes ENDP
_TEXT	ENDS
PUBLIC	new_pxsocketbuf_from_unicode
EXTRN	PyErr_Occurred:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$new_pxsocketbuf_from_unicode DD imagerel $LN6
	DD	imagerel $LN6+107
	DD	imagerel $unwind$new_pxsocketbuf_from_unicode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$new_pxsocketbuf_from_unicode DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT new_pxsocketbuf_from_unicode
_TEXT	SEGMENT
c$ = 48
o$ = 56
nbytes$ = 64
new_pxsocketbuf_from_unicode PROC			; COMDAT

; 6964 : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b c2	 mov	 rax, rdx
  0000d	48 8b f9	 mov	 rdi, rcx

; 6965 :     size_t size;
; 6966 :     Py_ssize_t nbytes;
; 6967 :     PxSocketBuf *sbuf;
; 6968 :     char *buf;
; 6969 : 
; 6970 :     assert(!PyErr_Occurred());
; 6971 :     buf = PyUnicode_AsUTF8AndSize((PyObject *)o, &nbytes);

  00010	48 8d 54 24 40	 lea	 rdx, QWORD PTR nbytes$[rsp]
  00015	48 8b c8	 mov	 rcx, rax
  00018	e8 00 00 00 00	 call	 PyUnicode_AsUTF8AndSize
  0001d	48 8b d8	 mov	 rbx, rax

; 6972 :     if (PyErr_Occurred())

  00020	e8 00 00 00 00	 call	 PyErr_Occurred
  00025	48 85 c0	 test	 rax, rax
  00028	74 0d		 je	 SHORT $LN2@new_pxsock@2
$LN5@new_pxsock@2:

; 6973 :         return NULL;

  0002a	33 c0		 xor	 eax, eax

; 6983 :     return sbuf;
; 6984 : }

  0002c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00031	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00035	5f		 pop	 rdi
  00036	c3		 ret	 0
$LN2@new_pxsock@2:

; 6974 : 
; 6975 :     size = sizeof(PxSocketBuf);
; 6976 : 
; 6977 :     sbuf = (PxSocketBuf *)_PyHeap_Malloc(c, size, 0, 0);

  00037	45 33 c9	 xor	 r9d, r9d
  0003a	45 33 c0	 xor	 r8d, r8d
  0003d	ba b0 00 00 00	 mov	 edx, 176		; 000000b0H
  00042	48 8b cf	 mov	 rcx, rdi
  00045	e8 00 00 00 00	 call	 _PyHeap_Malloc
  0004a	4c 8b d8	 mov	 r11, rax

; 6978 :     if (!sbuf)

  0004d	48 85 c0	 test	 rax, rax

; 6979 :         return NULL;

  00050	74 d8		 je	 SHORT $LN5@new_pxsock@2

; 6980 : 
; 6981 :     sbuf->w.len = (ULONG)nbytes;

  00052	8b 44 24 40	 mov	 eax, DWORD PTR nbytes$[rsp]

; 6982 :     sbuf->w.buf = buf;

  00056	49 89 5b 08	 mov	 QWORD PTR [r11+8], rbx

; 6983 :     return sbuf;
; 6984 : }

  0005a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005f	41 89 03	 mov	 DWORD PTR [r11], eax
  00062	49 8b c3	 mov	 rax, r11
  00065	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00069	5f		 pop	 rdi
  0006a	c3		 ret	 0
new_pxsocketbuf_from_unicode ENDP
_TEXT	ENDS
PUBLIC	PxSocket_CallbackComplete
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocket_CallbackComplete DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$PxSocket_CallbackComplete
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocket_CallbackComplete DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PxSocket_CallbackComplete
_TEXT	SEGMENT
c$ = 48
PxSocket_CallbackComplete PROC				; COMDAT

; 6988 : {

$LN3:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 6989 :     c->callback_completed->from = c;

  00006	48 8b 81 30 33
	00 00		 mov	 rax, QWORD PTR [rcx+13104]
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 6990 :     PxList_TimestampItem(c->callback_completed);

  00014	48 8b 89 30 33
	00 00		 mov	 rcx, QWORD PTR [rcx+13104]
  0001b	e8 00 00 00 00	 call	 PxList_TimestampItem

; 6991 :     PxList_Push(c->px->completed_callbacks, c->callback_completed);

  00020	48 8b 8b d8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+216]
  00027	48 8b 93 30 33
	00 00		 mov	 rdx, QWORD PTR [rbx+13104]
  0002e	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]

; 6992 : }

  00032	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00036	5b		 pop	 rbx
  00037	e9 00 00 00 00	 jmp	 PxList_Push
PxSocket_CallbackComplete ENDP
_TEXT	ENDS
PUBLIC	PxSocket_ErrbackComplete
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocket_ErrbackComplete DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$PxSocket_ErrbackComplete
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocket_ErrbackComplete DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PxSocket_ErrbackComplete
_TEXT	SEGMENT
c$ = 48
PxSocket_ErrbackComplete PROC				; COMDAT

; 6996 : {

$LN3:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 6997 :     c->errback_completed->from = c;

  00006	48 8b 81 38 33
	00 00		 mov	 rax, QWORD PTR [rcx+13112]
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 6998 :     PxList_TimestampItem(c->errback_completed);

  00014	48 8b 89 38 33
	00 00		 mov	 rcx, QWORD PTR [rcx+13112]
  0001b	e8 00 00 00 00	 call	 PxList_TimestampItem

; 6999 :     PxList_Push(c->px->completed_errbacks, c->errback_completed);

  00020	48 8b 8b d8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+216]
  00027	48 8b 93 38 33
	00 00		 mov	 rdx, QWORD PTR [rbx+13112]
  0002e	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]

; 7000 : }

  00032	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00036	5b		 pop	 rbx
  00037	e9 00 00 00 00	 jmp	 PxList_Push
PxSocket_ErrbackComplete ENDP
_TEXT	ENDS
PUBLIC	PxServerSocket_ClientClosed
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxServerSocket_ClientClosed DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$PxServerSocket_ClientClosed
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxServerSocket_ClientClosed DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PxServerSocket_ClientClosed
_TEXT	SEGMENT
o$ = 48
PxServerSocket_ClientClosed PROC			; COMDAT

; 7490 : {

$LN5:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f9	 mov	 rdi, rcx

; 7491 :     Context  *x = o->ctx;

  0000d	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]

; 7492 :     PxSocket *s = o->parent;

  00014	48 8b 9f 30 04
	00 00		 mov	 rbx, QWORD PTR [rdi+1072]

; 7493 : 
; 7494 :     x->io_obj = NULL;

  0001b	48 c7 81 a8 32
	00 00 00 00 00
	00		 mov	 QWORD PTR [rcx+12968], 0

; 7495 : 
; 7496 :     if (PxSocket_IS_HOG(o)) {

  00026	f6 87 f4 01 00
	00 04		 test	 BYTE PTR [rdi+500], 4
  0002d	74 0e		 je	 SHORT $LN2@PxServerSo

; 7497 :         Px_SOCKFLAGS(s) &= ~Px_SOCKFLAGS_HOG;

  0002f	83 a3 f4 01 00
	00 fb		 and	 DWORD PTR [rbx+500], -5

; 7498 :         InterlockedDecrement(&_PxSocket_ActiveHogs);

  00036	f0 ff 0d 00 00
	00 00		 lock dec DWORD PTR _PxSocket_ActiveHogs
$LN2@PxServerSo:

; 7499 :     }
; 7500 : 
; 7501 :     /* temp stats for chargen */
; 7502 :     /*
; 7503 :     {
; 7504 :         size_t lines, lps;
; 7505 :         double Bs, KBs, MBs;
; 7506 :         SOCKET fd = o->sock_fd;
; 7507 : 
; 7508 :         lines = o->send_nbytes / 73;
; 7509 : 
; 7510 :         if (o->connect_time <= 0) {
; 7511 :             printf("[%d/%d/%d] client sent %d bytes (%d lines)\n",
; 7512 :                    s->nchildren, o->child_id, fd, o->send_nbytes, lines);
; 7513 :         } else {
; 7514 :             Bs = (double)o->send_nbytes / o->connect_time;
; 7515 :             KBs = Bs / 1024.0;
; 7516 :             MBs = KBs / 1024.0;
; 7517 :             lines = o->send_nbytes / 73;
; 7518 :             lps = lines / o->connect_time;
; 7519 : 
; 7520 :             printf("[%d/%d/%d] client sent %d bytes total, connect time: "
; 7521 :                    "%d seconds, %.3fb/s, %.3fKB/s, %.3fMB/s, "
; 7522 :                    "lines: %d, lps: %d\n",
; 7523 :                    s->nchildren, o->child_id, fd, o->send_nbytes,
; 7524 :                    o->connect_time, Bs, KBs, MBs, lines, lps);
; 7525 :         }
; 7526 :     }
; 7527 :     */
; 7528 : 
; 7529 :     PxSocket_CallbackComplete(x);

  0003d	e8 00 00 00 00	 call	 PxSocket_CallbackComplete

; 7530 : 
; 7531 :     o->ctx = NULL;

  00042	48 c7 87 00 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rdi+512], 0

; 7532 : 
; 7533 :     if (!(Px_SOCKFLAGS(s) & Px_SOCKFLAGS_CLEAN_DISCONNECT))

  0004d	f6 83 f4 01 00
	00 20		 test	 BYTE PTR [rbx+500], 32	; 00000020H
  00054	75 08		 jne	 SHORT $LN1@PxServerSo

; 7534 :         o->sock_fd = -1;

  00056	48 c7 47 60 ff
	ff ff ff	 mov	 QWORD PTR [rdi+96], -1
$LN1@PxServerSo:

; 7535 : 
; 7536 :     /*PxList_PushSocket(s->freelist, o);*/
; 7537 : 
; 7538 :     InterlockedDecrement(&(s->nchildren));

  0005e	f0 ff 8b 20 04
	00 00		 lock dec DWORD PTR [rbx+1056]

; 7539 :     InterlockedIncrement(&(s->num_accepts_wanted));

  00065	f0 ff 83 f0 03
	00 00		 lock inc DWORD PTR [rbx+1008]

; 7540 :     SetEvent(s->more_accepts);

  0006c	48 8b 8b f8 03
	00 00		 mov	 rcx, QWORD PTR [rbx+1016]

; 7541 : }

  00073	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00078	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007c	5f		 pop	 rdi
  0007d	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_SetEvent
PxServerSocket_ClientClosed ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DG@FEFDODGF@call?5depth?5exceeded?5trying?5to?5ex@ ; `string'
PUBLIC	_try_extract_something_sendable_from_object
EXTRN	PyObject_Str:PROC
EXTRN	PyObject_CallObject:PROC
EXTRN	PyCallable_Check:PROC
EXTRN	PyExc_ValueError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$_try_extract_something_sendable_from_object DD imagerel $LN20
	DD	imagerel $LN20+279
	DD	imagerel $unwind$_try_extract_something_sendable_from_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_try_extract_something_sendable_from_object DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0DG@FEFDODGF@call?5depth?5exceeded?5trying?5to?5ex@
CONST	SEGMENT
??_C@_0DG@FEFDODGF@call?5depth?5exceeded?5trying?5to?5ex@ DB 'call depth '
	DB	'exceeded trying to extract sendable object', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _try_extract_something_sendable_from_object
_TEXT	SEGMENT
c$ = 48
o$ = 56
depth$ = 64
b$ = 72
_try_extract_something_sendable_from_object PROC	; COMDAT

; 7548 : {

$LN20:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	41 8b f0	 mov	 esi, r8d
  00012	48 8b da	 mov	 rbx, rdx
  00015	48 8b f9	 mov	 rdi, rcx

; 7549 :     PxSocketBuf *b;
; 7550 : 
; 7551 :     if (depth > 10) {

  00018	41 83 f8 0a	 cmp	 r8d, 10
  0001c	7e 25		 jle	 SHORT $LN12@try_extrac

; 7552 :         PyErr_SetString(PyExc_ValueError, "call depth exceeded trying to "
; 7553 :                                           "extract sendable object");

  0001e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DG@FEFDODGF@call?5depth?5exceeded?5trying?5to?5ex@
  0002c	e8 00 00 00 00	 call	 PyErr_SetString
$LN19@try_extrac:

; 7554 :         return NULL;

  00031	33 c0		 xor	 eax, eax

; 7576 :     }
; 7577 : 
; 7578 :     if (!b)
; 7579 :         assert(PyErr_Occurred());
; 7580 : 
; 7581 :     return b;
; 7582 : }

  00033	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00038	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5f		 pop	 rdi
  00042	c3		 ret	 0
$LN12@try_extrac:

; 7555 :     }
; 7556 : 
; 7557 :     if (!o)

  00043	48 85 d2	 test	 rdx, rdx

; 7558 :         return NULL;

  00046	74 e9		 je	 SHORT $LN19@try_extrac

; 7559 : 
; 7560 :     if (PyBytes_Check(o)) {

  00048	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  0004c	8b 88 00 01 00
	00		 mov	 ecx, DWORD PTR [rax+256]
  00052	0f ba e1 1b	 bt	 ecx, 27
  00056	73 2d		 jae	 SHORT $LN10@try_extrac

; 7561 :         b = PyBytesObject2PxSocketBuf(o);

  00058	48 8d 42 d0	 lea	 rax, QWORD PTR [rdx-48]
  0005c	48 3b 05 00 00
	00 00		 cmp	 rax, QWORD PTR _PxSocketBufSignature
  00063	75 09		 jne	 SHORT $LN17@try_extrac

; 7562 :         if (!b)

  00065	48 85 c0	 test	 rax, rax
  00068	0f 85 99 00 00
	00		 jne	 $LN2@try_extrac
$LN17@try_extrac:

; 7563 :             b = new_pxsocketbuf_from_bytes(c, (PyBytesObject *)o);

  0006e	48 8b cf	 mov	 rcx, rdi

; 7576 :     }
; 7577 : 
; 7578 :     if (!b)
; 7579 :         assert(PyErr_Occurred());
; 7580 : 
; 7581 :     return b;
; 7582 : }

  00071	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00076	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0007b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007f	5f		 pop	 rdi
  00080	e9 00 00 00 00	 jmp	 new_pxsocketbuf_from_bytes
$LN10@try_extrac:

; 7564 : 
; 7565 :     } else if (PyUnicode_Check(o)) {

  00085	0f ba e1 1c	 bt	 ecx, 28
  00089	73 17		 jae	 SHORT $LN7@try_extrac

; 7566 :         b = new_pxsocketbuf_from_unicode(c, (PyUnicodeObject *)o);

  0008b	48 8b cf	 mov	 rcx, rdi

; 7576 :     }
; 7577 : 
; 7578 :     if (!b)
; 7579 :         assert(PyErr_Occurred());
; 7580 : 
; 7581 :     return b;
; 7582 : }

  0008e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00093	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00098	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009c	5f		 pop	 rdi
  0009d	e9 00 00 00 00	 jmp	 new_pxsocketbuf_from_unicode
$LN7@try_extrac:

; 7567 : 
; 7568 :     } else if (PyCallable_Check(o)) {

  000a2	48 8b ca	 mov	 rcx, rdx
  000a5	e8 00 00 00 00	 call	 PyCallable_Check

; 7569 :         PyObject *r = PyObject_CallObject(o, NULL);

  000aa	48 8b cb	 mov	 rcx, rbx
  000ad	85 c0		 test	 eax, eax
  000af	74 2a		 je	 SHORT $LN5@try_extrac
  000b1	33 d2		 xor	 edx, edx
  000b3	e8 00 00 00 00	 call	 PyObject_CallObject

; 7570 :         if (r)

  000b8	48 85 c0	 test	 rax, rax
  000bb	74 45		 je	 SHORT $LN18@try_extrac

; 7571 :             b = _try_extract_something_sendable_from_object(c, r, depth+1);

  000bd	44 8d 46 01	 lea	 r8d, DWORD PTR [rsi+1]
  000c1	48 8b d0	 mov	 rdx, rax
  000c4	48 8b cf	 mov	 rcx, rdi

; 7576 :     }
; 7577 : 
; 7578 :     if (!b)
; 7579 :         assert(PyErr_Occurred());
; 7580 : 
; 7581 :     return b;
; 7582 : }

  000c7	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000cc	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000d1	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d5	5f		 pop	 rdi
  000d6	e9 00 00 00 00	 jmp	 _try_extract_something_sendable_from_object
$LN5@try_extrac:

; 7572 :     } else {
; 7573 :         PyObject *s = PyObject_Str(o);

  000db	e8 00 00 00 00	 call	 PyObject_Str

; 7574 :         if (s)

  000e0	48 85 c0	 test	 rax, rax
  000e3	74 1d		 je	 SHORT $LN18@try_extrac

; 7575 :             b = _try_extract_something_sendable_from_object(c, s, depth);

  000e5	44 8b c6	 mov	 r8d, esi
  000e8	48 8b d0	 mov	 rdx, rax
  000eb	48 8b cf	 mov	 rcx, rdi

; 7576 :     }
; 7577 : 
; 7578 :     if (!b)
; 7579 :         assert(PyErr_Occurred());
; 7580 : 
; 7581 :     return b;
; 7582 : }

  000ee	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000f3	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000f8	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000fc	5f		 pop	 rdi
  000fd	e9 00 00 00 00	 jmp	 _try_extract_something_sendable_from_object
$LN18@try_extrac:

; 7575 :             b = _try_extract_something_sendable_from_object(c, s, depth);

  00102	48 8b 44 24 48	 mov	 rax, QWORD PTR b$[rsp]
$LN2@try_extrac:

; 7576 :     }
; 7577 : 
; 7578 :     if (!b)
; 7579 :         assert(PyErr_Occurred());
; 7580 : 
; 7581 :     return b;
; 7582 : }

  00107	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0010c	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00111	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00115	5f		 pop	 rdi
  00116	c3		 ret	 0
_try_extract_something_sendable_from_object ENDP
_TEXT	ENDS
PUBLIC	_pxsocket_initial_bytes_to_send
;	COMDAT pdata
pdata	SEGMENT
$pdata$_pxsocket_initial_bytes_to_send DD imagerel $LN7
	DD	imagerel $LN7+107
	DD	imagerel $unwind$_pxsocket_initial_bytes_to_send
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_pxsocket_initial_bytes_to_send DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _pxsocket_initial_bytes_to_send
_TEXT	SEGMENT
c$ = 48
s$ = 56
_pxsocket_initial_bytes_to_send PROC			; COMDAT

; 7586 : {

$LN7:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	48 8b f9	 mov	 rdi, rcx

; 7587 :     PyObject *i = PxSocket_GET_ATTR("initial_bytes_to_send");

  00010	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@FNILJMKJ@initial_bytes_to_send?$AA@
  00017	48 8b 8b 90 02
	00 00		 mov	 rcx, QWORD PTR [rbx+656]
  0001e	e8 00 00 00 00	 call	 PyObject_HasAttrString
  00023	85 c0		 test	 eax, eax
  00025	74 37		 je	 SHORT $LN6@pxsocket_i
  00027	48 8b 8b 90 02
	00 00		 mov	 rcx, QWORD PTR [rbx+656]
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@FNILJMKJ@initial_bytes_to_send?$AA@
  00035	e8 00 00 00 00	 call	 PyObject_GetAttrString

; 7588 :     if (i == Py_None)

  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00041	48 3b c1	 cmp	 rax, rcx
  00044	74 18		 je	 SHORT $LN6@pxsocket_i

; 7590 :     return _try_extract_something_sendable_from_object(c, i, 0);

  00046	45 33 c0	 xor	 r8d, r8d
  00049	48 8b d0	 mov	 rdx, rax
  0004c	48 8b cf	 mov	 rcx, rdi

; 7591 : }

  0004f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00054	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00058	5f		 pop	 rdi
  00059	e9 00 00 00 00	 jmp	 _try_extract_something_sendable_from_object
$LN6@pxsocket_i:

; 7589 :         return NULL;

  0005e	33 c0		 xor	 eax, eax

; 7591 : }

  00060	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00065	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00069	5f		 pop	 rdi
  0006a	c3		 ret	 0
_pxsocket_initial_bytes_to_send ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EB@CLNCCCFD@protocol?5has?5?8max_sync_recv_atte@ ; `string'
PUBLIC	??_C@_0EB@CBPJEOJO@protocol?5has?5?8max_sync_send_atte@ ; `string'
PUBLIC	??_C@_0EL@IKMCLNCN@protocol?5has?5?8max_sync_recv_atte@ ; `string'
PUBLIC	??_C@_0EL@LNLIGLMC@protocol?5has?5?8max_sync_send_atte@ ; `string'
PUBLIC	??_C@_0GB@KLCBDLBD@protocol?5has?5both?5?8concurrency?8?5@ ; `string'
PUBLIC	??_C@_0EF@PBJFMCHI@protocol?5has?5?8lines_received?8?5ca@ ; `string'
PUBLIC	??_C@_0EH@DNPEGIAK@protocol?5has?5?8lines_mode?8?5set?5to@ ; `string'
PUBLIC	??_C@_0EE@DECPJFFD@protocol?5attribute?5?8initial_byte@ ; `string'
PUBLIC	??_C@_0EA@LLGMONOO@protocol?5attribute?5?8exception_ha@ ; `string'
PUBLIC	??_C@_0EA@EPMDOJAO@protocol?5attribute?5?8connection_c@ ; `string'
PUBLIC	??_C@_0DO@FJINFFFO@protocol?5attribute?5?8connection_m@ ; `string'
PUBLIC	??_C@_0DN@JMKFLCHH@protocol?5attribute?5?8lines_receiv@ ; `string'
PUBLIC	??_C@_0DM@ODJAPOOE@protocol?5attribute?5?8data_receive@ ; `string'
PUBLIC	??_C@_0DM@LEIAIEEB@protocol?5attribute?5?8send_complet@ ; `string'
PUBLIC	??_C@_0DM@CLBAOJEJ@protocol?5attribute?5?8recv_shutdow@ ; `string'
PUBLIC	??_C@_0DM@FNKAPFPD@protocol?5attribute?5?8send_shutdow@ ; `string'
PUBLIC	??_C@_0DK@JOGCBBDN@protocol?5attribute?5?8recv_failed?8@ ; `string'
PUBLIC	??_C@_0DK@MFNNLMGJ@protocol?5attribute?5?8send_failed?8@ ; `string'
PUBLIC	??_C@_0DJ@HFGAGABL@protocol?5attribute?5?8lines_mode?8?5@ ; `string'
PUBLIC	PxSocket_InitProtocol
EXTRN	PyLong_AsLong:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	_PyObject_GetAttrId:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocket_InitProtocol DD imagerel $LN142
	DD	imagerel $LN142+1875
	DD	imagerel $unwind$PxSocket_InitProtocol
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocket_InitProtocol DD 084e01H
	DD	07644eH
	DD	065449H
	DD	08340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0EB@CLNCCCFD@protocol?5has?5?8max_sync_recv_atte@
CONST	SEGMENT
??_C@_0EB@CLNCCCFD@protocol?5has?5?8max_sync_recv_atte@ DB 'protocol has '
	DB	'''max_sync_recv_attempts'' set to a value less than 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@CBPJEOJO@protocol?5has?5?8max_sync_send_atte@
CONST	SEGMENT
??_C@_0EB@CBPJEOJO@protocol?5has?5?8max_sync_send_atte@ DB 'protocol has '
	DB	'''max_sync_send_attempts'' set to a value less than 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@IKMCLNCN@protocol?5has?5?8max_sync_recv_atte@
CONST	SEGMENT
??_C@_0EL@IKMCLNCN@protocol?5has?5?8max_sync_recv_atte@ DB 'protocol has '
	DB	'''max_sync_recv_attempts'' set without ''throughput'' set to '
	DB	'True', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@LNLIGLMC@protocol?5has?5?8max_sync_send_atte@
CONST	SEGMENT
??_C@_0EL@LNLIGLMC@protocol?5has?5?8max_sync_send_atte@ DB 'protocol has '
	DB	'''max_sync_send_attempts'' set without ''throughput'' set to '
	DB	'True', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0GB@KLCBDLBD@protocol?5has?5both?5?8concurrency?8?5@
CONST	SEGMENT
??_C@_0GB@KLCBDLBD@protocol?5has?5both?5?8concurrency?8?5@ DB 'protocol h'
	DB	'as both ''concurrency'' and ''throughput'' set to True; only '
	DB	'one or the other is permitted', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@PBJFMCHI@protocol?5has?5?8lines_received?8?5ca@
CONST	SEGMENT
??_C@_0EF@PBJFMCHI@protocol?5has?5?8lines_received?8?5ca@ DB 'protocol ha'
	DB	's ''lines_received'' callback but no ''lines_mode'' attribute'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@DNPEGIAK@protocol?5has?5?8lines_mode?8?5set?5to@
CONST	SEGMENT
??_C@_0EH@DNPEGIAK@protocol?5has?5?8lines_mode?8?5set?5to@ DB 'protocol h'
	DB	'as ''lines_mode'' set to True but no ''lines_received'' callb'
	DB	'ack', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@DECPJFFD@protocol?5attribute?5?8initial_byte@
CONST	SEGMENT
??_C@_0EE@DECPJFFD@protocol?5attribute?5?8initial_byte@ DB 'protocol attr'
	DB	'ibute ''initial_bytes_to_send'' is not a callable object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@LLGMONOO@protocol?5attribute?5?8exception_ha@
CONST	SEGMENT
??_C@_0EA@LLGMONOO@protocol?5attribute?5?8exception_ha@ DB 'protocol attr'
	DB	'ibute ''exception_handler'' is not a callable object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@EPMDOJAO@protocol?5attribute?5?8connection_c@
CONST	SEGMENT
??_C@_0EA@EPMDOJAO@protocol?5attribute?5?8connection_c@ DB 'protocol attr'
	DB	'ibute ''connection_closed'' is not a callable object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@FJINFFFO@protocol?5attribute?5?8connection_m@
CONST	SEGMENT
??_C@_0DO@FJINFFFO@protocol?5attribute?5?8connection_m@ DB 'protocol attr'
	DB	'ibute ''connection_made'' is not a callable object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@JMKFLCHH@protocol?5attribute?5?8lines_receiv@
CONST	SEGMENT
??_C@_0DN@JMKFLCHH@protocol?5attribute?5?8lines_receiv@ DB 'protocol attr'
	DB	'ibute ''lines_received'' is not a callable object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@ODJAPOOE@protocol?5attribute?5?8data_receive@
CONST	SEGMENT
??_C@_0DM@ODJAPOOE@protocol?5attribute?5?8data_receive@ DB 'protocol attr'
	DB	'ibute ''data_received'' is not a callable object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@LEIAIEEB@protocol?5attribute?5?8send_complet@
CONST	SEGMENT
??_C@_0DM@LEIAIEEB@protocol?5attribute?5?8send_complet@ DB 'protocol attr'
	DB	'ibute ''send_complete'' is not a callable object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@CLBAOJEJ@protocol?5attribute?5?8recv_shutdow@
CONST	SEGMENT
??_C@_0DM@CLBAOJEJ@protocol?5attribute?5?8recv_shutdow@ DB 'protocol attr'
	DB	'ibute ''recv_shutdown'' is not a callable object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@FNKAPFPD@protocol?5attribute?5?8send_shutdow@
CONST	SEGMENT
??_C@_0DM@FNKAPFPD@protocol?5attribute?5?8send_shutdow@ DB 'protocol attr'
	DB	'ibute ''send_shutdown'' is not a callable object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@JOGCBBDN@protocol?5attribute?5?8recv_failed?8@
CONST	SEGMENT
??_C@_0DK@JOGCBBDN@protocol?5attribute?5?8recv_failed?8@ DB 'protocol att'
	DB	'ribute ''recv_failed'' is not a callable object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@MFNNLMGJ@protocol?5attribute?5?8send_failed?8@
CONST	SEGMENT
??_C@_0DK@MFNNLMGJ@protocol?5attribute?5?8send_failed?8@ DB 'protocol att'
	DB	'ribute ''send_failed'' is not a callable object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@HFGAGABL@protocol?5attribute?5?8lines_mode?8?5@
CONST	SEGMENT
??_C@_0DJ@HFGAGABL@protocol?5attribute?5?8lines_mode?8?5@ DB 'protocol at'
	DB	'tribute ''lines_mode'' is not a callable object', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PxSocket_InitProtocol
_TEXT	SEGMENT
s$ = 48
PxSocket_InitProtocol PROC				; COMDAT

; 7863 : {

$LN142:
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b d9	 mov	 rbx, rcx

; 7864 :     PyObject *p;
; 7865 :     assert(s->protocol_type);
; 7866 :     assert(!s->protocol);
; 7867 : 
; 7868 :     s->protocol = PyObject_CallObject(s->protocol_type, NULL);

  0000d	48 8b 89 88 02
	00 00		 mov	 rcx, QWORD PTR [rcx+648]
  00014	33 d2		 xor	 edx, edx
  00016	e8 00 00 00 00	 call	 PyObject_CallObject
  0001b	48 8b f8	 mov	 rdi, rax
  0001e	48 89 83 90 02
	00 00		 mov	 QWORD PTR [rbx+656], rax

; 7869 :     if (!s->protocol)

  00025	48 85 c0	 test	 rax, rax
  00028	75 0b		 jne	 SHORT $LN128@PxSocket_I

; 8016 : }

  0002a	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0002f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00033	5f		 pop	 rdi
  00034	c3		 ret	 0
$LN128@PxSocket_I:

; 7870 :         return 0;
; 7871 : 
; 7872 :     p = s->protocol;
; 7873 : 
; 7874 :     assert(!PyErr_Occurred());
; 7875 : 
; 7876 : #define _PxSocket_RESOLVE_OBJECT(name) do {             \
; 7877 :     PyObject *o = _PyObject_GetAttrId(p, &PyId_##name); \
; 7878 :     if (!o)                                             \
; 7879 :         PyErr_Clear();                                  \
; 7880 :     else if (!PyCallable_Check(o)) {                    \
; 7881 :         PyErr_SetString(                                \
; 7882 :             PyExc_ValueError,                           \
; 7883 :             "protocol attribute '" #name "' "           \
; 7884 :             "is not a callable object"                  \
; 7885 :         );                                              \
; 7886 :         return 0;                                       \
; 7887 :     }                                                   \
; 7888 :     s->##name = o;                                      \
; 7889 : } while (0)
; 7890 : 
; 7891 : #define _PxSocket_RESOLVE_BOOL(name) do {               \
; 7892 :     int b = 0;                                          \
; 7893 :     PyObject *o = _PyObject_GetAttrId(p, &PyId_##name); \
; 7894 :     if (!o)                                             \
; 7895 :         PyErr_Clear();                                  \
; 7896 :     else                                                \
; 7897 :         b = PyObject_IsTrue(o);                         \
; 7898 :     if (b)                                              \
; 7899 :         Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_##name;         \
; 7900 :     else                                                \
; 7901 :         Px_SOCKFLAGS(s) &= ~Px_SOCKFLAGS_##name;        \
; 7902 : } while (0)
; 7903 : 
; 7904 : #define _PxSocket_RESOLVE_INT(name) do {                \
; 7905 :     int i = 0;                                          \
; 7906 :     PyObject *o = _PyObject_GetAttrId(p, &PyId_##name); \
; 7907 :     if (!o) {                                           \
; 7908 :         PyErr_Clear();                                  \
; 7909 :         Px_SOCKFLAGS(s) &= ~Px_SOCKFLAGS_##name;        \
; 7910 :     } else {                                            \
; 7911 :         i = PyLong_AsLong(o);                           \
; 7912 :         if (PyErr_Occurred())                           \
; 7913 :             return 0;                                   \
; 7914 :         Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_##name;         \
; 7915 :         s->##name = i;                                  \
; 7916 :     }                                                   \
; 7917 : } while (0)
; 7918 : 
; 7919 :     _PxSocket_RESOLVE_OBJECT(lines_mode);

  00035	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0003b	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00044	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp
  00049	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  0004e	48 8b 34 c8	 mov	 rsi, QWORD PTR [rax+rcx*8]
  00052	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_lines_mode
  00057	48 03 d6	 add	 rdx, rsi
  0005a	48 8b cf	 mov	 rcx, rdi
  0005d	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00062	48 8b e8	 mov	 rbp, rax
  00065	48 85 c0	 test	 rax, rax
  00068	0f 85 66 02 00
	00		 jne	 $LN124@PxSocket_I
  0006e	e8 00 00 00 00	 call	 PyErr_Clear
$LN122@PxSocket_I:

; 7920 :     _PxSocket_RESOLVE_OBJECT(send_failed);

  00073	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_send_failed
  00078	48 8b cf	 mov	 rcx, rdi
  0007b	48 89 ab 98 02
	00 00		 mov	 QWORD PTR [rbx+664], rbp
  00082	48 03 d6	 add	 rdx, rsi
  00085	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0008a	48 8b e8	 mov	 rbp, rax
  0008d	48 85 c0	 test	 rax, rax
  00090	0f 85 68 02 00
	00		 jne	 $LN118@PxSocket_I
  00096	e8 00 00 00 00	 call	 PyErr_Clear
$LN116@PxSocket_I:

; 7921 :     _PxSocket_RESOLVE_OBJECT(recv_failed);

  0009b	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_recv_failed
  000a0	48 8b cf	 mov	 rcx, rdi
  000a3	48 89 ab a0 02
	00 00		 mov	 QWORD PTR [rbx+672], rbp
  000aa	48 03 d6	 add	 rdx, rsi
  000ad	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  000b2	48 8b e8	 mov	 rbp, rax
  000b5	48 85 c0	 test	 rax, rax
  000b8	0f 85 6a 02 00
	00		 jne	 $LN112@PxSocket_I
  000be	e8 00 00 00 00	 call	 PyErr_Clear
$LN110@PxSocket_I:

; 7922 :     _PxSocket_RESOLVE_OBJECT(send_shutdown);

  000c3	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_send_shutdown
  000c8	48 8b cf	 mov	 rcx, rdi
  000cb	48 89 ab a8 02
	00 00		 mov	 QWORD PTR [rbx+680], rbp
  000d2	48 03 d6	 add	 rdx, rsi
  000d5	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  000da	48 8b e8	 mov	 rbp, rax
  000dd	48 85 c0	 test	 rax, rax
  000e0	0f 85 6c 02 00
	00		 jne	 $LN106@PxSocket_I
  000e6	e8 00 00 00 00	 call	 PyErr_Clear
$LN104@PxSocket_I:

; 7923 :     _PxSocket_RESOLVE_OBJECT(recv_shutdown);

  000eb	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_recv_shutdown
  000f0	48 8b cf	 mov	 rcx, rdi
  000f3	48 89 ab b0 02
	00 00		 mov	 QWORD PTR [rbx+688], rbp
  000fa	48 03 d6	 add	 rdx, rsi
  000fd	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00102	48 8b e8	 mov	 rbp, rax
  00105	48 85 c0	 test	 rax, rax
  00108	0f 85 6e 02 00
	00		 jne	 $LN100@PxSocket_I
  0010e	e8 00 00 00 00	 call	 PyErr_Clear
$LN98@PxSocket_I:

; 7924 :     _PxSocket_RESOLVE_OBJECT(send_complete);

  00113	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_send_complete
  00118	48 8b cf	 mov	 rcx, rdi
  0011b	48 89 ab b8 02
	00 00		 mov	 QWORD PTR [rbx+696], rbp
  00122	48 03 d6	 add	 rdx, rsi
  00125	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0012a	48 8b e8	 mov	 rbp, rax
  0012d	48 85 c0	 test	 rax, rax
  00130	0f 85 70 02 00
	00		 jne	 $LN94@PxSocket_I
  00136	e8 00 00 00 00	 call	 PyErr_Clear
$LN92@PxSocket_I:

; 7925 :     _PxSocket_RESOLVE_OBJECT(data_received);

  0013b	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_data_received
  00140	48 8b cf	 mov	 rcx, rdi
  00143	48 89 ab c0 02
	00 00		 mov	 QWORD PTR [rbx+704], rbp
  0014a	48 03 d6	 add	 rdx, rsi
  0014d	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00152	48 8b e8	 mov	 rbp, rax
  00155	48 85 c0	 test	 rax, rax
  00158	0f 85 72 02 00
	00		 jne	 $LN88@PxSocket_I
  0015e	e8 00 00 00 00	 call	 PyErr_Clear
$LN86@PxSocket_I:

; 7926 :     _PxSocket_RESOLVE_OBJECT(lines_received);

  00163	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_lines_received
  00168	48 8b cf	 mov	 rcx, rdi
  0016b	48 89 ab c8 02
	00 00		 mov	 QWORD PTR [rbx+712], rbp
  00172	48 03 d6	 add	 rdx, rsi
  00175	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0017a	48 8b e8	 mov	 rbp, rax
  0017d	48 85 c0	 test	 rax, rax
  00180	0f 85 74 02 00
	00		 jne	 $LN82@PxSocket_I
  00186	e8 00 00 00 00	 call	 PyErr_Clear
$LN80@PxSocket_I:

; 7927 :     _PxSocket_RESOLVE_OBJECT(connection_made);

  0018b	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_connection_made
  00190	48 8b cf	 mov	 rcx, rdi
  00193	48 89 ab d0 02
	00 00		 mov	 QWORD PTR [rbx+720], rbp
  0019a	48 03 d6	 add	 rdx, rsi
  0019d	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  001a2	48 8b e8	 mov	 rbp, rax
  001a5	48 85 c0	 test	 rax, rax
  001a8	0f 85 76 02 00
	00		 jne	 $LN76@PxSocket_I
  001ae	e8 00 00 00 00	 call	 PyErr_Clear
$LN74@PxSocket_I:

; 7928 :     _PxSocket_RESOLVE_OBJECT(connection_closed);

  001b3	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_connection_closed
  001b8	48 8b cf	 mov	 rcx, rdi
  001bb	48 89 ab d8 02
	00 00		 mov	 QWORD PTR [rbx+728], rbp
  001c2	48 03 d6	 add	 rdx, rsi
  001c5	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  001ca	48 8b e8	 mov	 rbp, rax
  001cd	48 85 c0	 test	 rax, rax
  001d0	0f 85 78 02 00
	00		 jne	 $LN70@PxSocket_I
  001d6	e8 00 00 00 00	 call	 PyErr_Clear
$LN68@PxSocket_I:

; 7929 :     _PxSocket_RESOLVE_OBJECT(exception_handler);

  001db	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_exception_handler
  001e0	48 8b cf	 mov	 rcx, rdi
  001e3	48 89 ab e0 02
	00 00		 mov	 QWORD PTR [rbx+736], rbp
  001ea	48 03 d6	 add	 rdx, rsi
  001ed	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  001f2	48 8b e8	 mov	 rbp, rax
  001f5	48 85 c0	 test	 rax, rax
  001f8	0f 85 7a 02 00
	00		 jne	 $LN64@PxSocket_I
  001fe	e8 00 00 00 00	 call	 PyErr_Clear
$LN62@PxSocket_I:

; 7930 :     _PxSocket_RESOLVE_OBJECT(initial_bytes_to_send);

  00203	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_initial_bytes_to_send
  00208	48 8b cf	 mov	 rcx, rdi
  0020b	48 89 ab e8 02
	00 00		 mov	 QWORD PTR [rbx+744], rbp
  00212	48 03 d6	 add	 rdx, rsi
  00215	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0021a	48 8b e8	 mov	 rbp, rax
  0021d	48 85 c0	 test	 rax, rax
  00220	0f 85 7c 02 00
	00		 jne	 $LN58@PxSocket_I
  00226	e8 00 00 00 00	 call	 PyErr_Clear
$LN56@PxSocket_I:

; 7931 : 
; 7932 :     _PxSocket_RESOLVE_BOOL(throughput);

  0022b	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_throughput
  00230	48 8b cf	 mov	 rcx, rdi
  00233	48 89 ab f0 02
	00 00		 mov	 QWORD PTR [rbx+752], rbp
  0023a	48 03 d6	 add	 rdx, rsi
  0023d	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00242	48 85 c0	 test	 rax, rax
  00245	0f 85 81 02 00
	00		 jne	 $LN52@PxSocket_I
  0024b	e8 00 00 00 00	 call	 PyErr_Clear
$LN50@PxSocket_I:
  00250	83 a3 f4 01 00
	00 bf		 and	 DWORD PTR [rbx+500], -65 ; ffffffffffffffbfH
$LN54@PxSocket_I:

; 7933 :     _PxSocket_RESOLVE_BOOL(concurrency);

  00257	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_concurrency
  0025c	48 8b cf	 mov	 rcx, rdi
  0025f	48 03 d6	 add	 rdx, rsi
  00262	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00267	48 85 c0	 test	 rax, rax
  0026a	0f 85 78 02 00
	00		 jne	 $LN45@PxSocket_I
  00270	e8 00 00 00 00	 call	 PyErr_Clear
$LN43@PxSocket_I:
  00275	81 a3 f4 01 00
	00 ff f7 ff ff	 and	 DWORD PTR [rbx+500], -2049 ; fffffffffffff7ffH
$LN47@PxSocket_I:

; 7934 :     _PxSocket_RESOLVE_BOOL(shutdown_send);

  0027f	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_shutdown_send
  00284	48 8b cf	 mov	 rcx, rdi
  00287	48 03 d6	 add	 rdx, rsi
  0028a	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0028f	48 85 c0	 test	 rax, rax
  00292	0f 85 6f 02 00
	00		 jne	 $LN38@PxSocket_I
  00298	e8 00 00 00 00	 call	 PyErr_Clear
$LN36@PxSocket_I:
  0029d	81 a3 f4 01 00
	00 ff 7f ff ff	 and	 DWORD PTR [rbx+500], -32769 ; ffffffffffff7fffH
$LN40@PxSocket_I:

; 7935 : 
; 7936 :     _PxSocket_RESOLVE_INT(max_sync_send_attempts);

  002a7	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_max_sync_send_attempts
  002ac	48 8b cf	 mov	 rcx, rdi
  002af	48 03 d6	 add	 rdx, rsi
  002b2	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  002b7	48 85 c0	 test	 rax, rax
  002ba	0f 85 66 02 00
	00		 jne	 $LN31@PxSocket_I
  002c0	e8 00 00 00 00	 call	 PyErr_Clear
  002c5	81 a3 f4 01 00
	00 ff ff df ff	 and	 DWORD PTR [rbx+500], -2097153 ; ffffffffffdfffffH
  002cf	e9 7a 02 00 00	 jmp	 $LN33@PxSocket_I
$LN124@PxSocket_I:

; 7870 :         return 0;
; 7871 : 
; 7872 :     p = s->protocol;
; 7873 : 
; 7874 :     assert(!PyErr_Occurred());
; 7875 : 
; 7876 : #define _PxSocket_RESOLVE_OBJECT(name) do {             \
; 7877 :     PyObject *o = _PyObject_GetAttrId(p, &PyId_##name); \
; 7878 :     if (!o)                                             \
; 7879 :         PyErr_Clear();                                  \
; 7880 :     else if (!PyCallable_Check(o)) {                    \
; 7881 :         PyErr_SetString(                                \
; 7882 :             PyExc_ValueError,                           \
; 7883 :             "protocol attribute '" #name "' "           \
; 7884 :             "is not a callable object"                  \
; 7885 :         );                                              \
; 7886 :         return 0;                                       \
; 7887 :     }                                                   \
; 7888 :     s->##name = o;                                      \
; 7889 : } while (0)
; 7890 : 
; 7891 : #define _PxSocket_RESOLVE_BOOL(name) do {               \
; 7892 :     int b = 0;                                          \
; 7893 :     PyObject *o = _PyObject_GetAttrId(p, &PyId_##name); \
; 7894 :     if (!o)                                             \
; 7895 :         PyErr_Clear();                                  \
; 7896 :     else                                                \
; 7897 :         b = PyObject_IsTrue(o);                         \
; 7898 :     if (b)                                              \
; 7899 :         Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_##name;         \
; 7900 :     else                                                \
; 7901 :         Px_SOCKFLAGS(s) &= ~Px_SOCKFLAGS_##name;        \
; 7902 : } while (0)
; 7903 : 
; 7904 : #define _PxSocket_RESOLVE_INT(name) do {                \
; 7905 :     int i = 0;                                          \
; 7906 :     PyObject *o = _PyObject_GetAttrId(p, &PyId_##name); \
; 7907 :     if (!o) {                                           \
; 7908 :         PyErr_Clear();                                  \
; 7909 :         Px_SOCKFLAGS(s) &= ~Px_SOCKFLAGS_##name;        \
; 7910 :     } else {                                            \
; 7911 :         i = PyLong_AsLong(o);                           \
; 7912 :         if (PyErr_Occurred())                           \
; 7913 :             return 0;                                   \
; 7914 :         Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_##name;         \
; 7915 :         s->##name = i;                                  \
; 7916 :     }                                                   \
; 7917 : } while (0)
; 7918 : 
; 7919 :     _PxSocket_RESOLVE_OBJECT(lines_mode);

  002d4	48 8b c8	 mov	 rcx, rax
  002d7	e8 00 00 00 00	 call	 PyCallable_Check
  002dc	85 c0		 test	 eax, eax
  002de	0f 85 8f fd ff
	ff		 jne	 $LN122@PxSocket_I
  002e4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  002eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DJ@HFGAGABL@protocol?5attribute?5?8lines_mode?8?5@
  002f2	e8 00 00 00 00	 call	 PyErr_SetString
  002f7	33 c0		 xor	 eax, eax
  002f9	e9 40 04 00 00	 jmp	 $LN132@PxSocket_I
$LN118@PxSocket_I:

; 7920 :     _PxSocket_RESOLVE_OBJECT(send_failed);

  002fe	48 8b c8	 mov	 rcx, rax
  00301	e8 00 00 00 00	 call	 PyCallable_Check
  00306	85 c0		 test	 eax, eax
  00308	0f 85 8d fd ff
	ff		 jne	 $LN116@PxSocket_I
  0030e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00315	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DK@MFNNLMGJ@protocol?5attribute?5?8send_failed?8@
  0031c	e8 00 00 00 00	 call	 PyErr_SetString
  00321	33 c0		 xor	 eax, eax
  00323	e9 16 04 00 00	 jmp	 $LN132@PxSocket_I
$LN112@PxSocket_I:

; 7921 :     _PxSocket_RESOLVE_OBJECT(recv_failed);

  00328	48 8b c8	 mov	 rcx, rax
  0032b	e8 00 00 00 00	 call	 PyCallable_Check
  00330	85 c0		 test	 eax, eax
  00332	0f 85 8b fd ff
	ff		 jne	 $LN110@PxSocket_I
  00338	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0033f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DK@JOGCBBDN@protocol?5attribute?5?8recv_failed?8@
  00346	e8 00 00 00 00	 call	 PyErr_SetString
  0034b	33 c0		 xor	 eax, eax
  0034d	e9 ec 03 00 00	 jmp	 $LN132@PxSocket_I
$LN106@PxSocket_I:

; 7922 :     _PxSocket_RESOLVE_OBJECT(send_shutdown);

  00352	48 8b c8	 mov	 rcx, rax
  00355	e8 00 00 00 00	 call	 PyCallable_Check
  0035a	85 c0		 test	 eax, eax
  0035c	0f 85 89 fd ff
	ff		 jne	 $LN104@PxSocket_I
  00362	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00369	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DM@FNKAPFPD@protocol?5attribute?5?8send_shutdow@
  00370	e8 00 00 00 00	 call	 PyErr_SetString
  00375	33 c0		 xor	 eax, eax
  00377	e9 c2 03 00 00	 jmp	 $LN132@PxSocket_I
$LN100@PxSocket_I:

; 7923 :     _PxSocket_RESOLVE_OBJECT(recv_shutdown);

  0037c	48 8b c8	 mov	 rcx, rax
  0037f	e8 00 00 00 00	 call	 PyCallable_Check
  00384	85 c0		 test	 eax, eax
  00386	0f 85 87 fd ff
	ff		 jne	 $LN98@PxSocket_I
  0038c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00393	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DM@CLBAOJEJ@protocol?5attribute?5?8recv_shutdow@
  0039a	e8 00 00 00 00	 call	 PyErr_SetString
  0039f	33 c0		 xor	 eax, eax
  003a1	e9 98 03 00 00	 jmp	 $LN132@PxSocket_I
$LN94@PxSocket_I:

; 7924 :     _PxSocket_RESOLVE_OBJECT(send_complete);

  003a6	48 8b c8	 mov	 rcx, rax
  003a9	e8 00 00 00 00	 call	 PyCallable_Check
  003ae	85 c0		 test	 eax, eax
  003b0	0f 85 85 fd ff
	ff		 jne	 $LN92@PxSocket_I
  003b6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  003bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DM@LEIAIEEB@protocol?5attribute?5?8send_complet@
  003c4	e8 00 00 00 00	 call	 PyErr_SetString
  003c9	33 c0		 xor	 eax, eax
  003cb	e9 6e 03 00 00	 jmp	 $LN132@PxSocket_I
$LN88@PxSocket_I:

; 7925 :     _PxSocket_RESOLVE_OBJECT(data_received);

  003d0	48 8b c8	 mov	 rcx, rax
  003d3	e8 00 00 00 00	 call	 PyCallable_Check
  003d8	85 c0		 test	 eax, eax
  003da	0f 85 83 fd ff
	ff		 jne	 $LN86@PxSocket_I
  003e0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  003e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DM@ODJAPOOE@protocol?5attribute?5?8data_receive@
  003ee	e8 00 00 00 00	 call	 PyErr_SetString
  003f3	33 c0		 xor	 eax, eax
  003f5	e9 44 03 00 00	 jmp	 $LN132@PxSocket_I
$LN82@PxSocket_I:

; 7926 :     _PxSocket_RESOLVE_OBJECT(lines_received);

  003fa	48 8b c8	 mov	 rcx, rax
  003fd	e8 00 00 00 00	 call	 PyCallable_Check
  00402	85 c0		 test	 eax, eax
  00404	0f 85 81 fd ff
	ff		 jne	 $LN80@PxSocket_I
  0040a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00411	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DN@JMKFLCHH@protocol?5attribute?5?8lines_receiv@
  00418	e8 00 00 00 00	 call	 PyErr_SetString
  0041d	33 c0		 xor	 eax, eax
  0041f	e9 1a 03 00 00	 jmp	 $LN132@PxSocket_I
$LN76@PxSocket_I:

; 7927 :     _PxSocket_RESOLVE_OBJECT(connection_made);

  00424	48 8b c8	 mov	 rcx, rax
  00427	e8 00 00 00 00	 call	 PyCallable_Check
  0042c	85 c0		 test	 eax, eax
  0042e	0f 85 7f fd ff
	ff		 jne	 $LN74@PxSocket_I
  00434	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0043b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DO@FJINFFFO@protocol?5attribute?5?8connection_m@
  00442	e8 00 00 00 00	 call	 PyErr_SetString
  00447	33 c0		 xor	 eax, eax
  00449	e9 f0 02 00 00	 jmp	 $LN132@PxSocket_I
$LN70@PxSocket_I:

; 7928 :     _PxSocket_RESOLVE_OBJECT(connection_closed);

  0044e	48 8b c8	 mov	 rcx, rax
  00451	e8 00 00 00 00	 call	 PyCallable_Check
  00456	85 c0		 test	 eax, eax
  00458	0f 85 7d fd ff
	ff		 jne	 $LN68@PxSocket_I
  0045e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00465	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EA@EPMDOJAO@protocol?5attribute?5?8connection_c@
  0046c	e8 00 00 00 00	 call	 PyErr_SetString
  00471	33 c0		 xor	 eax, eax
  00473	e9 c6 02 00 00	 jmp	 $LN132@PxSocket_I
$LN64@PxSocket_I:

; 7929 :     _PxSocket_RESOLVE_OBJECT(exception_handler);

  00478	48 8b c8	 mov	 rcx, rax
  0047b	e8 00 00 00 00	 call	 PyCallable_Check
  00480	85 c0		 test	 eax, eax
  00482	0f 85 7b fd ff
	ff		 jne	 $LN62@PxSocket_I
  00488	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0048f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EA@LLGMONOO@protocol?5attribute?5?8exception_ha@
  00496	e8 00 00 00 00	 call	 PyErr_SetString
  0049b	33 c0		 xor	 eax, eax
  0049d	e9 9c 02 00 00	 jmp	 $LN132@PxSocket_I
$LN58@PxSocket_I:

; 7930 :     _PxSocket_RESOLVE_OBJECT(initial_bytes_to_send);

  004a2	48 8b c8	 mov	 rcx, rax
  004a5	e8 00 00 00 00	 call	 PyCallable_Check
  004aa	85 c0		 test	 eax, eax
  004ac	0f 85 79 fd ff
	ff		 jne	 $LN56@PxSocket_I
  004b2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  004b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EE@DECPJFFD@protocol?5attribute?5?8initial_byte@
  004c0	e8 00 00 00 00	 call	 PyErr_SetString
  004c5	33 c0		 xor	 eax, eax
  004c7	e9 72 02 00 00	 jmp	 $LN132@PxSocket_I
$LN52@PxSocket_I:

; 7931 : 
; 7932 :     _PxSocket_RESOLVE_BOOL(throughput);

  004cc	48 8b c8	 mov	 rcx, rax
  004cf	e8 00 00 00 00	 call	 PyObject_IsTrue
  004d4	85 c0		 test	 eax, eax
  004d6	0f 84 74 fd ff
	ff		 je	 $LN50@PxSocket_I
  004dc	83 8b f4 01 00
	00 40		 or	 DWORD PTR [rbx+500], 64	; 00000040H
  004e3	e9 6f fd ff ff	 jmp	 $LN54@PxSocket_I
$LN45@PxSocket_I:

; 7933 :     _PxSocket_RESOLVE_BOOL(concurrency);

  004e8	48 8b c8	 mov	 rcx, rax
  004eb	e8 00 00 00 00	 call	 PyObject_IsTrue
  004f0	85 c0		 test	 eax, eax
  004f2	0f 84 7d fd ff
	ff		 je	 $LN43@PxSocket_I
  004f8	81 8b f4 01 00
	00 00 08 00 00	 or	 DWORD PTR [rbx+500], 2048 ; 00000800H
  00502	e9 78 fd ff ff	 jmp	 $LN47@PxSocket_I
$LN38@PxSocket_I:

; 7934 :     _PxSocket_RESOLVE_BOOL(shutdown_send);

  00507	48 8b c8	 mov	 rcx, rax
  0050a	e8 00 00 00 00	 call	 PyObject_IsTrue
  0050f	85 c0		 test	 eax, eax
  00511	0f 84 86 fd ff
	ff		 je	 $LN36@PxSocket_I
  00517	81 8b f4 01 00
	00 00 80 00 00	 or	 DWORD PTR [rbx+500], 32768 ; 00008000H
  00521	e9 81 fd ff ff	 jmp	 $LN40@PxSocket_I
$LN31@PxSocket_I:

; 7935 : 
; 7936 :     _PxSocket_RESOLVE_INT(max_sync_send_attempts);

  00526	48 8b c8	 mov	 rcx, rax
  00529	e8 00 00 00 00	 call	 PyLong_AsLong
  0052e	8b e8		 mov	 ebp, eax
  00530	e8 00 00 00 00	 call	 PyErr_Occurred
  00535	48 85 c0	 test	 rax, rax
  00538	0f 85 e9 01 00
	00		 jne	 $LN141@PxSocket_I
  0053e	81 8b f4 01 00
	00 00 00 20 00	 or	 DWORD PTR [rbx+500], 2097152 ; 00200000H
  00548	89 ab 10 03 00
	00		 mov	 DWORD PTR [rbx+784], ebp
$LN33@PxSocket_I:

; 7937 :     _PxSocket_RESOLVE_INT(max_sync_recv_attempts);

  0054e	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_max_sync_recv_attempts
  00553	48 8b cf	 mov	 rcx, rdi
  00556	48 03 d6	 add	 rdx, rsi
  00559	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0055e	48 85 c0	 test	 rax, rax
  00561	75 11		 jne	 SHORT $LN25@PxSocket_I
  00563	e8 00 00 00 00	 call	 PyErr_Clear
  00568	81 a3 f4 01 00
	00 ff ff ff df	 and	 DWORD PTR [rbx+500], -536870913 ; ffffffffdfffffffH
  00572	eb 28		 jmp	 SHORT $LN27@PxSocket_I
$LN25@PxSocket_I:
  00574	48 8b c8	 mov	 rcx, rax
  00577	e8 00 00 00 00	 call	 PyLong_AsLong
  0057c	8b f8		 mov	 edi, eax
  0057e	e8 00 00 00 00	 call	 PyErr_Occurred
  00583	48 85 c0	 test	 rax, rax
  00586	0f 85 9b 01 00
	00		 jne	 $LN141@PxSocket_I
  0058c	81 8b f4 01 00
	00 00 00 00 20	 or	 DWORD PTR [rbx+500], 536870912 ; 20000000H
  00596	89 bb 14 03 00
	00		 mov	 DWORD PTR [rbx+788], edi
$LN27@PxSocket_I:

; 7938 : 
; 7939 :     assert(!PyErr_Occurred());
; 7940 : 
; 7941 :     if (s->data_received || s->lines_received)

  0059c	48 83 bb c8 02
	00 00 00	 cmp	 QWORD PTR [rbx+712], 0
  005a4	75 0a		 jne	 SHORT $LN21@PxSocket_I
  005a6	48 83 bb d0 02
	00 00 00	 cmp	 QWORD PTR [rbx+720], 0
  005ae	74 0a		 je	 SHORT $LN22@PxSocket_I
$LN21@PxSocket_I:

; 7942 :         Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_CAN_RECV;

  005b0	81 8b f4 01 00
	00 00 00 01 00	 or	 DWORD PTR [rbx+500], 65536 ; 00010000H
$LN22@PxSocket_I:

; 7943 : 
; 7944 :     if (s->lines_mode && !s->lines_received) {

  005ba	48 8b 8b 98 02
	00 00		 mov	 rcx, QWORD PTR [rbx+664]
  005c1	48 85 c9	 test	 rcx, rcx
  005c4	74 24		 je	 SHORT $LN20@PxSocket_I
  005c6	48 83 bb d0 02
	00 00 00	 cmp	 QWORD PTR [rbx+720], 0
  005ce	75 24		 jne	 SHORT $LN134@PxSocket_I

; 7945 :         PyErr_SetString(PyExc_ValueError,
; 7946 :                         "protocol has 'lines_mode' set to True but no "
; 7947 :                         "'lines_received' callback");

  005d0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  005d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EH@DNPEGIAK@protocol?5has?5?8lines_mode?8?5set?5to@
  005de	e8 00 00 00 00	 call	 PyErr_SetString

; 7948 :         return 0;

  005e3	33 c0		 xor	 eax, eax
  005e5	e9 54 01 00 00	 jmp	 $LN132@PxSocket_I
$LN20@PxSocket_I:

; 7949 :     }
; 7950 : 
; 7951 :     if (s->lines_received && !s->lines_mode) {

  005ea	48 83 bb d0 02
	00 00 00	 cmp	 QWORD PTR [rbx+720], 0
  005f2	74 1f		 je	 SHORT $LN19@PxSocket_I
$LN134@PxSocket_I:
  005f4	48 85 c9	 test	 rcx, rcx
  005f7	75 1f		 jne	 SHORT $LN136@PxSocket_I

; 7952 :         PyErr_SetString(PyExc_ValueError,
; 7953 :                         "protocol has 'lines_received' callback but "
; 7954 :                         "no 'lines_mode' attribute");

  005f9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00600	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EF@PBJFMCHI@protocol?5has?5?8lines_received?8?5ca@
  00607	e8 00 00 00 00	 call	 PyErr_SetString

; 7955 :         return 0;

  0060c	33 c0		 xor	 eax, eax
  0060e	e9 2b 01 00 00	 jmp	 $LN132@PxSocket_I
$LN19@PxSocket_I:

; 7956 :     }
; 7957 : 
; 7958 :     assert(!PyErr_Occurred());
; 7959 : 
; 7960 :     if (s->lines_mode && PyObject_IsTrue(s->lines_mode))

  00613	48 85 c9	 test	 rcx, rcx
  00616	74 15		 je	 SHORT $LN18@PxSocket_I
$LN136@PxSocket_I:
  00618	e8 00 00 00 00	 call	 PyObject_IsTrue
  0061d	85 c0		 test	 eax, eax
  0061f	74 0c		 je	 SHORT $LN18@PxSocket_I

; 7961 :         Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_LINES_MODE_ACTIVE;

  00621	81 8b f4 01 00
	00 00 40 00 00	 or	 DWORD PTR [rbx+500], 16384 ; 00004000H

; 7962 :     else

  0062b	eb 0a		 jmp	 SHORT $LN17@PxSocket_I
$LN18@PxSocket_I:

; 7963 :         Px_SOCKFLAGS(s) &= ~Px_SOCKFLAGS_LINES_MODE_ACTIVE;

  0062d	81 a3 f4 01 00
	00 ff bf ff ff	 and	 DWORD PTR [rbx+500], -16385 ; ffffffffffffbfffH
$LN17@PxSocket_I:

; 7964 : 
; 7965 :     if (PyErr_Occurred())

  00637	e8 00 00 00 00	 call	 PyErr_Occurred
  0063c	48 85 c0	 test	 rax, rax

; 7966 :         return 0;

  0063f	0f 85 e2 00 00
	00		 jne	 $LN141@PxSocket_I

; 7967 : 
; 7968 :     if (PxSocket_CONCURRENCY(s) && PxSocket_THROUGHPUT(s)) {

  00645	8b 8b f4 01 00
	00		 mov	 ecx, DWORD PTR [rbx+500]
  0064b	0f ba e1 0b	 bt	 ecx, 11
  0064f	73 1f		 jae	 SHORT $LN15@PxSocket_I
  00651	f6 c1 40	 test	 cl, 64			; 00000040H
  00654	74 1f		 je	 SHORT $LN138@PxSocket_I

; 7969 :         PyErr_SetString(PyExc_ValueError,
; 7970 :                         "protocol has both 'concurrency' and "
; 7971 :                         "'throughput' set to True; only one or "
; 7972 :                         "the other is permitted");

  00656	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0065d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GB@KLCBDLBD@protocol?5has?5both?5?8concurrency?8?5@
  00664	e8 00 00 00 00	 call	 PyErr_SetString

; 7973 :         return 0;

  00669	33 c0		 xor	 eax, eax
  0066b	e9 ce 00 00 00	 jmp	 $LN132@PxSocket_I
$LN15@PxSocket_I:

; 7974 :     }
; 7975 : 
; 7976 :     if (!PxSocket_THROUGHPUT(s)) {

  00670	f6 c1 40	 test	 cl, 64			; 00000040H
  00673	75 44		 jne	 SHORT $LN14@PxSocket_I
$LN138@PxSocket_I:

; 7977 :         if (PxSocket_MAX_SYNC_SEND_ATTEMPTS(s)) {

  00675	0f ba e1 15	 bt	 ecx, 21
  00679	73 1a		 jae	 SHORT $LN13@PxSocket_I

; 7978 :             PyErr_SetString(PyExc_ValueError,
; 7979 :                             "protocol has 'max_sync_send_attempts' "
; 7980 :                             "set without 'throughput' set to True");

  0067b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00682	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EL@LNLIGLMC@protocol?5has?5?8max_sync_send_atte@
  00689	e8 00 00 00 00	 call	 PyErr_SetString

; 7981 :             return 0;

  0068e	33 c0		 xor	 eax, eax
  00690	e9 a9 00 00 00	 jmp	 $LN132@PxSocket_I
$LN13@PxSocket_I:

; 7982 :         }
; 7983 :         if (PxSocket_MAX_SYNC_RECV_ATTEMPTS(s)) {

  00695	0f ba e1 1d	 bt	 ecx, 29
  00699	0f 83 9a 00 00
	00		 jae	 $LN1@PxSocket_I

; 7984 :             PyErr_SetString(PyExc_ValueError,
; 7985 :                             "protocol has 'max_sync_recv_attempts' "
; 7986 :                             "set without 'throughput' set to True");

  0069f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  006a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EL@IKMCLNCN@protocol?5has?5?8max_sync_recv_atte@
  006ad	e8 00 00 00 00	 call	 PyErr_SetString

; 7987 :             return 0;

  006b2	33 c0		 xor	 eax, eax
  006b4	e9 85 00 00 00	 jmp	 $LN132@PxSocket_I
$LN14@PxSocket_I:

; 7988 :         }
; 7989 :     } else {
; 7990 :         if (!PxSocket_MAX_SYNC_SEND_ATTEMPTS(s))

  006b9	41 b8 ff ff ff
	7f		 mov	 r8d, 2147483647		; 7fffffffH
  006bf	0f ba e1 15	 bt	 ecx, 21
  006c3	72 08		 jb	 SHORT $LN10@PxSocket_I

; 7991 :             s->max_sync_send_attempts = _PxSocket_MaxSyncSendAttempts;

  006c5	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _PxSocket_MaxSyncSendAttempts

; 7992 :         else {

  006cb	eb 29		 jmp	 SHORT $LN139@PxSocket_I
$LN10@PxSocket_I:

; 7993 :             if (s->max_sync_send_attempts < 0) {

  006cd	8b 93 10 03 00
	00		 mov	 edx, DWORD PTR [rbx+784]
  006d3	85 d2		 test	 edx, edx
  006d5	79 17		 jns	 SHORT $LN8@PxSocket_I

; 7994 :                 PyErr_SetString(PyExc_ValueError,
; 7995 :                                 "protocol has 'max_sync_send_attempts' "
; 7996 :                                 "set to a value less than 0");

  006d7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  006de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EB@CBPJEOJO@protocol?5has?5?8max_sync_send_atte@
  006e5	e8 00 00 00 00	 call	 PyErr_SetString

; 7997 :                 return 0;

  006ea	33 c0		 xor	 eax, eax
  006ec	eb 50		 jmp	 SHORT $LN132@PxSocket_I
$LN8@PxSocket_I:

; 7998 :             } else if (s->max_sync_send_attempts == 0)

  006ee	8b c2		 mov	 eax, edx
  006f0	85 d2		 test	 edx, edx
  006f2	41 0f 44 c0	 cmove	 eax, r8d
$LN139@PxSocket_I:
  006f6	89 83 10 03 00
	00		 mov	 DWORD PTR [rbx+784], eax

; 7999 :                 s->max_sync_send_attempts = INT_MAX;
; 8000 :         }
; 8001 : 
; 8002 :         if (!PxSocket_MAX_SYNC_RECV_ATTEMPTS(s))

  006fc	0f ba e1 1d	 bt	 ecx, 29
  00700	72 08		 jb	 SHORT $LN5@PxSocket_I

; 8003 :             s->max_sync_recv_attempts = _PxSocket_MaxSyncSendAttempts;

  00702	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _PxSocket_MaxSyncSendAttempts

; 8004 :         else {

  00708	eb 29		 jmp	 SHORT $LN140@PxSocket_I
$LN5@PxSocket_I:

; 8005 :             if (s->max_sync_recv_attempts < 0) {

  0070a	8b 8b 14 03 00
	00		 mov	 ecx, DWORD PTR [rbx+788]
  00710	85 c9		 test	 ecx, ecx
  00712	79 17		 jns	 SHORT $LN3@PxSocket_I

; 8006 :                 PyErr_SetString(PyExc_ValueError,
; 8007 :                                 "protocol has 'max_sync_recv_attempts' "
; 8008 :                                 "set to a value less than 0");

  00714	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0071b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EB@CLNCCCFD@protocol?5has?5?8max_sync_recv_atte@
  00722	e8 00 00 00 00	 call	 PyErr_SetString
$LN141@PxSocket_I:

; 8009 :                 return 0;

  00727	33 c0		 xor	 eax, eax
  00729	eb 13		 jmp	 SHORT $LN132@PxSocket_I
$LN3@PxSocket_I:

; 8010 :             } else if (s->max_sync_recv_attempts == 0)

  0072b	8b c1		 mov	 eax, ecx
  0072d	85 c9		 test	 ecx, ecx
  0072f	41 0f 44 c0	 cmove	 eax, r8d
$LN140@PxSocket_I:
  00733	89 83 14 03 00
	00		 mov	 DWORD PTR [rbx+788], eax
$LN1@PxSocket_I:

; 8011 :                 s->max_sync_recv_attempts = INT_MAX;
; 8012 :         }
; 8013 :     }
; 8014 : 
; 8015 :     return 1;

  00739	b8 01 00 00 00	 mov	 eax, 1
$LN132@PxSocket_I:
  0073e	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
  00743	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]

; 8016 : }

  00748	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0074d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00751	5f		 pop	 rdi
  00752	c3		 ret	 0
PxSocket_InitProtocol ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@DDIBEHJJ@protocol?5must?5be?5a?5class?$AA@ ; `string'
PUBLIC	??_C@_0BH@LCKBJMJF@missing?5protocol?5value?$AA@ ; `string'
PUBLIC	PxSocket_SetProtocolType
EXTRN	PyType_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocket_SetProtocolType DD imagerel $LN5
	DD	imagerel $LN5+90
	DD	imagerel $unwind$PxSocket_SetProtocolType
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocket_SetProtocolType DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BJ@DDIBEHJJ@protocol?5must?5be?5a?5class?$AA@
CONST	SEGMENT
??_C@_0BJ@DDIBEHJJ@protocol?5must?5be?5a?5class?$AA@ DB 'protocol must be'
	DB	' a class', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LCKBJMJF@missing?5protocol?5value?$AA@
CONST	SEGMENT
??_C@_0BH@LCKBJMJF@missing?5protocol?5value?$AA@ DB 'missing protocol val'
	DB	'ue', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PxSocket_SetProtocolType
_TEXT	SEGMENT
s$ = 48
protocol_type$ = 56
PxSocket_SetProtocolType PROC				; COMDAT

; 8022 : {

$LN5:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 8023 :     if (!protocol_type) {

  00004	48 85 d2	 test	 rdx, rdx
  00007	75 1a		 jne	 SHORT $LN2@PxSocket_S

; 8024 :         PyErr_SetString(PyExc_ValueError, "missing protocol value");

  00009	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00010	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@LCKBJMJF@missing?5protocol?5value?$AA@
  00017	e8 00 00 00 00	 call	 PyErr_SetString

; 8025 :         return 0;

  0001c	33 c0		 xor	 eax, eax

; 8034 :     return PxSocket_InitProtocol(s);
; 8035 : }

  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	c3		 ret	 0
$LN2@PxSocket_S:

; 8026 :     }
; 8027 : 
; 8028 :     if (!PyType_CheckExact(protocol_type)) {

  00023	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyType_Type
  0002a	48 39 42 58	 cmp	 QWORD PTR [rdx+88], rax
  0002e	74 1a		 je	 SHORT $LN1@PxSocket_S

; 8029 :         PyErr_SetString(PyExc_ValueError, "protocol must be a class");

  00030	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@DDIBEHJJ@protocol?5must?5be?5a?5class?$AA@
  0003e	e8 00 00 00 00	 call	 PyErr_SetString

; 8030 :         return 0;

  00043	33 c0		 xor	 eax, eax

; 8034 :     return PxSocket_InitProtocol(s);
; 8035 : }

  00045	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00049	c3		 ret	 0
$LN1@PxSocket_S:

; 8031 :     }
; 8032 : 
; 8033 :     s->protocol_type = protocol_type;

  0004a	48 89 91 88 02
	00 00		 mov	 QWORD PTR [rcx+648], rdx

; 8034 :     return PxSocket_InitProtocol(s);
; 8035 : }

  00051	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00055	e9 00 00 00 00	 jmp	 PxSocket_InitProtocol
PxSocket_SetProtocolType ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EN@GHDIEIIK@initial_bytes_to_send?5is?5not?5a?5s@ ; `string'
PUBLIC	??_C@_0GA@GAKKBHFN@initial_bytes_to_send?$CI?$CJ?5callable@ ; `string'
PUBLIC	??_C@_0FF@FDKJMONG@initial_bytes_to_send?5must?5be?5on@ ; `string'
PUBLIC	PxSocket_InitInitialBytes
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocket_InitInitialBytes DD imagerel $LN19
	DD	imagerel $LN19+481
	DD	imagerel $unwind$PxSocket_InitInitialBytes
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocket_InitInitialBytes DD 060f01H
	DD	0a640fH
	DD	09340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT ??_C@_0EN@GHDIEIIK@initial_bytes_to_send?5is?5not?5a?5s@
CONST	SEGMENT
??_C@_0EN@GHDIEIIK@initial_bytes_to_send?5is?5not?5a?5s@ DB 'initial_byte'
	DB	's_to_send is not a sendable object (bytes, bytearray or unico'
	DB	'de)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0GA@GAKKBHFN@initial_bytes_to_send?$CI?$CJ?5callable@
CONST	SEGMENT
??_C@_0GA@GAKKBHFN@initial_bytes_to_send?$CI?$CJ?5callable@ DB 'initial_b'
	DB	'ytes_to_send() callable did not return a sendable object (byt'
	DB	'es, bytearray or unicode)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FF@FDKJMONG@initial_bytes_to_send?5must?5be?5on@
CONST	SEGMENT
??_C@_0FF@FDKJMONG@initial_bytes_to_send?5must?5be?5on@ DB 'initial_bytes'
	DB	'_to_send must be one of the following types: bytes, unicode o'
	DB	'r callable', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PxSocket_InitInitialBytes
_TEXT	SEGMENT
w$131290 = 32
snapshot$ = 64
s$ = 64
PxSocket_InitInitialBytes PROC				; COMDAT

; 8044 : {

$LN19:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 8045 :     Context *c = s->ctx;
; 8046 :     PyObject *o, *t = s->protocol;
; 8047 :     int is_static = 0;
; 8048 :     Heap *snapshot = NULL;
; 8049 : 
; 8050 :     assert(t);
; 8051 :     assert(!PyErr_Occurred());
; 8052 : 
; 8053 :     o = s->initial_bytes_to_send;

  0000f	48 8b b9 f0 02
	00 00		 mov	 rdi, QWORD PTR [rcx+752]
  00016	48 8b b1 00 02
	00 00		 mov	 rsi, QWORD PTR [rcx+512]
  0001d	48 8b d9	 mov	 rbx, rcx

; 8054 : 
; 8055 :     if (!o || o == Py_None)

  00020	48 85 ff	 test	 rdi, rdi
  00023	0f 84 a3 01 00
	00		 je	 $LN12@PxSocket_I@2
  00029	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00030	48 3b f8	 cmp	 rdi, rax
  00033	0f 84 93 01 00
	00		 je	 $LN12@PxSocket_I@2

; 8056 :         return 1;
; 8057 : 
; 8058 :     is_static = (
; 8059 :         PyBytes_Check(o)        ||
; 8060 :         PyByteArray_Check(o)    ||
; 8061 :         PyUnicode_Check(o)
; 8062 :     );

  00039	48 8b 4f 58	 mov	 rcx, QWORD PTR [rdi+88]
  0003d	f7 81 00 01 00
	00 00 00 00 08	 test	 DWORD PTR [rcx+256], 134217728 ; 08000000H
  00047	75 62		 jne	 SHORT $LN16@PxSocket_I@2
  00049	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyByteArray_Type
  00050	48 3b ca	 cmp	 rcx, rdx
  00053	74 56		 je	 SHORT $LN16@PxSocket_I@2
  00055	e8 00 00 00 00	 call	 PyType_IsSubtype
  0005a	85 c0		 test	 eax, eax
  0005c	75 4d		 jne	 SHORT $LN16@PxSocket_I@2
  0005e	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00062	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  0006c	75 3d		 jne	 SHORT $LN16@PxSocket_I@2

; 8066 :     else if (PyCallable_Check(o))

  0006e	48 8b cf	 mov	 rcx, rdi
  00071	e8 00 00 00 00	 call	 PyCallable_Check
  00076	85 c0		 test	 eax, eax
  00078	74 0c		 je	 SHORT $LN9@PxSocket_I@2

; 8067 :         Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_INITIAL_BYTES_CALLABLE;

  0007a	81 8b f4 01 00
	00 00 04 00 00	 or	 DWORD PTR [rbx+500], 1024 ; 00000400H
  00084	eb 2f		 jmp	 SHORT $LN8@PxSocket_I@2
$LN9@PxSocket_I@2:

; 8068 :     else {
; 8069 :         PyErr_SetString(PyExc_ValueError, INVALID_INITIAL_BYTES);

  00086	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0008d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0FF@FDKJMONG@initial_bytes_to_send?5must?5be?5on@
  00094	e8 00 00 00 00	 call	 PyErr_SetString

; 8070 :         return 0;

  00099	33 c0		 xor	 eax, eax

; 8114 : 
; 8115 :     return 1;
; 8116 : }

  0009b	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000a0	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  000a5	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a9	5f		 pop	 rdi
  000aa	c3		 ret	 0
$LN16@PxSocket_I@2:

; 8063 : 
; 8064 :     if (is_static)
; 8065 :         Px_SOCKFLAGS(s) &= ~Px_SOCKFLAGS_INITIAL_BYTES_CALLABLE;

  000ab	81 a3 f4 01 00
	00 ff fb ff ff	 and	 DWORD PTR [rbx+500], -1025 ; fffffffffffffbffH
$LN8@PxSocket_I@2:

; 8071 :     }
; 8072 : 
; 8073 :     snapshot = PxContext_HeapSnapshot(c, NULL);

  000b5	33 d2		 xor	 edx, edx
  000b7	48 8b ce	 mov	 rcx, rsi
  000ba	e8 00 00 00 00	 call	 PxContext_HeapSnapshot
  000bf	48 89 44 24 40	 mov	 QWORD PTR snapshot$[rsp], rax

; 8074 : 
; 8075 :     if (Px_SOCKFLAGS(s) & Px_SOCKFLAGS_INITIAL_BYTES_CALLABLE) {

  000c4	8b 83 f4 01 00
	00		 mov	 eax, DWORD PTR [rbx+500]
  000ca	0f ba e0 0a	 bt	 eax, 10
  000ce	73 7a		 jae	 SHORT $LN7@PxSocket_I@2

; 8076 :         WSABUF w;
; 8077 :         PyObject *r;
; 8078 :         int error = 0;
; 8079 :         r = PyObject_CallObject(o, NULL);

  000d0	33 d2		 xor	 edx, edx
  000d2	48 8b cf	 mov	 rcx, rdi
  000d5	e8 00 00 00 00	 call	 PyObject_CallObject

; 8080 :         if (!r) {

  000da	48 85 c0	 test	 rax, rax
  000dd	75 1f		 jne	 SHORT $LN6@PxSocket_I@2

; 8081 :             PxContext_RollbackHeap(c, &snapshot);

  000df	48 8d 54 24 40	 lea	 rdx, QWORD PTR snapshot$[rsp]
  000e4	48 8b ce	 mov	 rcx, rsi
  000e7	e8 00 00 00 00	 call	 PxContext_RollbackHeap

; 8082 :             return 0;

  000ec	33 c0		 xor	 eax, eax

; 8114 : 
; 8115 :     return 1;
; 8116 : }

  000ee	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000f3	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  000f8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000fc	5f		 pop	 rdi
  000fd	c3		 ret	 0
$LN6@PxSocket_I@2:

; 8083 :         }
; 8084 :         if (!PyObject2WSABUF(r, &w)) {

  000fe	48 8d 54 24 20	 lea	 rdx, QWORD PTR w$131290[rsp]
  00103	48 8b c8	 mov	 rcx, rax
  00106	e8 00 00 00 00	 call	 PyObject2WSABUF
  0010b	85 c0		 test	 eax, eax
  0010d	75 32		 jne	 SHORT $LN5@PxSocket_I@2

; 8085 :             PxContext_RollbackHeap(c, &snapshot);

  0010f	48 8d 54 24 40	 lea	 rdx, QWORD PTR snapshot$[rsp]
  00114	48 8b ce	 mov	 rcx, rsi
  00117	e8 00 00 00 00	 call	 PxContext_RollbackHeap

; 8086 :             PyErr_SetString(PyExc_ValueError,
; 8087 :                             "initial_bytes_to_send() callable did not return "
; 8088 :                             "a sendable object (bytes, bytearray or unicode)");

  0011c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00123	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GA@GAKKBHFN@initial_bytes_to_send?$CI?$CJ?5callable@
  0012a	e8 00 00 00 00	 call	 PyErr_SetString

; 8089 :             return 0;

  0012f	33 c0		 xor	 eax, eax

; 8114 : 
; 8115 :     return 1;
; 8116 : }

  00131	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00136	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  0013b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0013f	5f		 pop	 rdi
  00140	c3		 ret	 0
$LN5@PxSocket_I@2:

; 8090 :         }
; 8091 :         s->initial_bytes_callable = o;

  00141	48 89 bb f8 02
	00 00		 mov	 QWORD PTR [rbx+760], rdi

; 8092 :     } else {

  00148	eb 75		 jmp	 SHORT $LN1@PxSocket_I@2
$LN7@PxSocket_I@2:

; 8093 :         s->initial_bytes_callable = NULL;

  0014a	48 c7 83 f8 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rbx+760], 0

; 8094 :         if (!PxSocket_IS_SERVERCLIENT(s)) {

  00155	84 c0		 test	 al, al
  00157	78 45		 js	 SHORT $LN3@PxSocket_I@2

; 8095 :             assert(!s->initial_bytes.buf);
; 8096 : 
; 8097 :             if (!PyObject2WSABUF(o, &s->initial_bytes)) {

  00159	48 8d 93 00 03
	00 00		 lea	 rdx, QWORD PTR [rbx+768]
  00160	48 8b cf	 mov	 rcx, rdi
  00163	e8 00 00 00 00	 call	 PyObject2WSABUF
  00168	85 c0		 test	 eax, eax
  0016a	75 53		 jne	 SHORT $LN1@PxSocket_I@2

; 8098 :                 PxContext_RollbackHeap(c, &snapshot);

  0016c	48 8d 54 24 40	 lea	 rdx, QWORD PTR snapshot$[rsp]
  00171	48 8b ce	 mov	 rcx, rsi
  00174	e8 00 00 00 00	 call	 PxContext_RollbackHeap

; 8099 :                 PyErr_SetString(PyExc_ValueError,
; 8100 :                                 "initial_bytes_to_send is not a sendable "
; 8101 :                                 "object (bytes, bytearray or unicode)");

  00179	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00180	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EN@GHDIEIIK@initial_bytes_to_send?5is?5not?5a?5s@
  00187	e8 00 00 00 00	 call	 PyErr_SetString

; 8102 :                 return 0;

  0018c	33 c0		 xor	 eax, eax

; 8114 : 
; 8115 :     return 1;
; 8116 : }

  0018e	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00193	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00198	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0019c	5f		 pop	 rdi
  0019d	c3		 ret	 0
$LN3@PxSocket_I@2:

; 8103 :             }
; 8104 : 
; 8105 :         } else {
; 8106 :             s->initial_bytes.len = s->parent->initial_bytes.len;

  0019e	48 8b 8b 30 04
	00 00		 mov	 rcx, QWORD PTR [rbx+1072]
  001a5	8b 81 00 03 00
	00		 mov	 eax, DWORD PTR [rcx+768]
  001ab	89 83 00 03 00
	00		 mov	 DWORD PTR [rbx+768], eax

; 8107 :             s->initial_bytes.buf = s->parent->initial_bytes.buf;

  001b1	48 8b 81 08 03
	00 00		 mov	 rax, QWORD PTR [rcx+776]
  001b8	48 89 83 08 03
	00 00		 mov	 QWORD PTR [rbx+776], rax
$LN1@PxSocket_I@2:

; 8108 :         }
; 8109 : 
; 8110 :         assert(s->initial_bytes.buf);
; 8111 :     }
; 8112 : 
; 8113 :     PxContext_RollbackHeap(c, &snapshot);

  001bf	48 8d 54 24 40	 lea	 rdx, QWORD PTR snapshot$[rsp]
  001c4	48 8b ce	 mov	 rcx, rsi
  001c7	e8 00 00 00 00	 call	 PxContext_RollbackHeap
$LN12@PxSocket_I@2:

; 8114 : 
; 8115 :     return 1;
; 8116 : }

  001cc	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  001d1	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  001d6	b8 01 00 00 00	 mov	 eax, 1
  001db	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001df	5f		 pop	 rdi
  001e0	c3		 ret	 0
PxSocket_InitInitialBytes ENDP
_TEXT	ENDS
PUBLIC	PxSocket_LoadInitialBytes
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocket_LoadInitialBytes DD imagerel $LN7
	DD	imagerel $LN7+90
	DD	imagerel $unwind$PxSocket_LoadInitialBytes
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocket_LoadInitialBytes DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PxSocket_LoadInitialBytes
_TEXT	SEGMENT
s$ = 48
PxSocket_LoadInitialBytes PROC				; COMDAT

; 8122 : {

$LN7:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 8123 :     Context *c = s->ctx;
; 8124 :     PyObject *o, *r;
; 8125 : 
; 8126 :     if (!s->initial_bytes_callable)

  00009	48 8b 89 f8 02
	00 00		 mov	 rcx, QWORD PTR [rcx+760]
  00010	48 85 c9	 test	 rcx, rcx

; 8127 :         return 1;

  00013	74 3a		 je	 SHORT $LN1@PxSocket_L

; 8128 : 
; 8129 :     assert(Px_SOCKFLAGS(s) & Px_SOCKFLAGS_INITIAL_BYTES_CALLABLE);
; 8130 :     o = s->initial_bytes_callable;
; 8131 : 
; 8132 :     r = PyObject_CallObject(o, NULL);

  00015	33 d2		 xor	 edx, edx
  00017	e8 00 00 00 00	 call	 PyObject_CallObject

; 8133 :     if (!r)

  0001c	48 85 c0	 test	 rax, rax

; 8134 :         return 0;

  0001f	74 26		 je	 SHORT $LN6@PxSocket_L

; 8135 : 
; 8136 :     if (!PyObject2WSABUF(r, &s->initial_bytes)) {

  00021	48 8d 93 00 03
	00 00		 lea	 rdx, QWORD PTR [rbx+768]
  00028	48 8b c8	 mov	 rcx, rax
  0002b	e8 00 00 00 00	 call	 PyObject2WSABUF
  00030	85 c0		 test	 eax, eax
  00032	75 1b		 jne	 SHORT $LN1@PxSocket_L

; 8137 :         PyErr_SetString(PyExc_ValueError,
; 8138 :                         "initial_bytes_to_send() callable did not return "
; 8139 :                         "a sendable object (bytes, bytearray or unicode)");

  00034	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0003b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GA@GAKKBHFN@initial_bytes_to_send?$CI?$CJ?5callable@
  00042	e8 00 00 00 00	 call	 PyErr_SetString
$LN6@PxSocket_L:

; 8140 :         return 0;

  00047	33 c0		 xor	 eax, eax

; 8144 : }

  00049	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004d	5b		 pop	 rbx
  0004e	c3		 ret	 0
$LN1@PxSocket_L:

; 8141 :     }
; 8142 : 
; 8143 :     return 1;

  0004f	b8 01 00 00 00	 mov	 eax, 1

; 8144 : }

  00054	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00058	5b		 pop	 rbx
  00059	c3		 ret	 0
PxSocket_LoadInitialBytes ENDP
_TEXT	ENDS
PUBLIC	PxSocket_InitExceptionHandler
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocket_InitExceptionHandler DD imagerel $LN10
	DD	imagerel $LN10+38
	DD	imagerel $unwind$PxSocket_InitExceptionHandler
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PxSocket_InitExceptionHandler DD imagerel $LN10+38
	DD	imagerel $LN10+175
	DD	imagerel $chain$2$PxSocket_InitExceptionHandler
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PxSocket_InitExceptionHandler DD imagerel $LN10+175
	DD	imagerel $LN10+181
	DD	imagerel $chain$3$PxSocket_InitExceptionHandler
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PxSocket_InitExceptionHandler DD 021H
	DD	imagerel $LN10
	DD	imagerel $LN10+38
	DD	imagerel $unwind$PxSocket_InitExceptionHandler
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PxSocket_InitExceptionHandler DD 062621H
	DD	087426H
	DD	07640aH
	DD	065405H
	DD	imagerel $LN10
	DD	imagerel $LN10+38
	DD	imagerel $unwind$PxSocket_InitExceptionHandler
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocket_InitExceptionHandler DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PxSocket_InitExceptionHandler
_TEXT	SEGMENT
s$ = 48
PxSocket_InitExceptionHandler PROC			; COMDAT

; 8148 : {

$LN10:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 8149 :     Heap *old_heap = NULL;
; 8150 :     Context *c = s->ctx;
; 8151 :     PyObject *eh;
; 8152 :     assert(s->protocol);
; 8153 :     assert(!PyErr_Occurred());
; 8154 :     if (!s->exception_handler) {

  00006	48 83 b9 e8 02
	00 00 00	 cmp	 QWORD PTR [rcx+744], 0
  0000e	48 8b d9	 mov	 rbx, rcx
  00011	0f 85 98 00 00
	00		 jne	 $LN1@PxSocket_I@3

; 8155 :         assert(Py_PXCTX);
; 8156 :         old_heap = ctx->h;

  00017	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  0001d	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00026	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp
  0002b	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  00030	48 8b 34 d0	 mov	 rsi, QWORD PTR [rax+rdx*8]

; 8157 :         ctx->h = s->ctx->h;

  00034	48 8b 81 00 02
	00 00		 mov	 rax, QWORD PTR [rcx+512]
  0003b	48 8b 88 d0 00
	00 00		 mov	 rcx, QWORD PTR [rax+208]
  00042	bd 00 00 00 00	 mov	 ebp, OFFSET FLAT:ctx
  00047	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  0004c	48 8b 14 2e	 mov	 rdx, QWORD PTR [rsi+rbp]
  00050	48 8b ba d0 00
	00 00		 mov	 rdi, QWORD PTR [rdx+208]
  00057	48 89 8a d0 00
	00 00		 mov	 QWORD PTR [rdx+208], rcx

; 8158 :         eh = PyObject_GetAttrString(s->protocol, "exception_handler");

  0005e	48 8b 8b 90 02
	00 00		 mov	 rcx, QWORD PTR [rbx+656]
  00065	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@KOBHOIFN@exception_handler?$AA@
  0006c	e8 00 00 00 00	 call	 PyObject_GetAttrString

; 8159 :         if (eh && eh != Py_None)

  00071	48 85 c0	 test	 rax, rax
  00074	74 15		 je	 SHORT $LN3@PxSocket_I@3
  00076	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0007d	48 3b c1	 cmp	 rax, rcx
  00080	74 09		 je	 SHORT $LN3@PxSocket_I@3

; 8160 :             s->exception_handler = eh;

  00082	48 89 83 e8 02
	00 00		 mov	 QWORD PTR [rbx+744], rax

; 8161 :         else

  00089	eb 05		 jmp	 SHORT $LN2@PxSocket_I@3
$LN3@PxSocket_I@3:

; 8162 :             PyErr_Clear();

  0008b	e8 00 00 00 00	 call	 PyErr_Clear
$LN2@PxSocket_I@3:

; 8163 :     }
; 8164 :     if (old_heap)

  00090	48 85 ff	 test	 rdi, rdi
  00093	74 0b		 je	 SHORT $LN9@PxSocket_I@3

; 8165 :         ctx->h = old_heap;

  00095	48 8b 04 2e	 mov	 rax, QWORD PTR [rsi+rbp]
  00099	48 89 b8 d0 00
	00 00		 mov	 QWORD PTR [rax+208], rdi
$LN9@PxSocket_I@3:
  000a0	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000a5	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
  000aa	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
$LN1@PxSocket_I@3:

; 8166 :     assert(!PyErr_Occurred());
; 8167 : }

  000af	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b3	5b		 pop	 rbx
  000b4	c3		 ret	 0
PxSocket_InitExceptionHandler ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT pxsocket_next_send_id
_TEXT	SEGMENT
s$ = 8
args$ = 16
pxsocket_next_send_id PROC				; COMDAT

; 8505 :     return PyLong_FromUnsignedLongLong(s->send_id+1);

  00000	48 8b 89 68 02
	00 00		 mov	 rcx, QWORD PTR [rcx+616]
  00007	48 ff c1	 inc	 rcx

; 8506 : }

  0000a	e9 00 00 00 00	 jmp	 PyLong_FromUnsignedLongLong
pxsocket_next_send_id ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@KMNPLBEC@file?5is?5too?5large?5to?5send?5via?5se@ ; `string'
PUBLIC	??_C@_0BA@HPFBDNCA@z?$CDu?$CDz?$CD?3sendfile?$AA@ ; `string'
PUBLIC	??_C@_0CN@ICCHFGKJ@sendfile?5already?5scheduled?5for?5t@ ; `string'
PUBLIC	??_C@_0BC@IMHBDANI@pxsocket_sendfile?$AA@	; `string'
EXTRN	PyErr_SetFromWindowsErrWithUnicodeFilename:PROC
EXTRN	__imp_CloseHandle:PROC
EXTRN	__imp_GetFileSizeEx:PROC
EXTRN	__imp_CreateFileW:PROC
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$pxsocket_sendfile DD imagerel $LN15
	DD	imagerel $LN15+503
	DD	imagerel $unwind$pxsocket_sendfile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$pxsocket_sendfile DD 040a01H
	DD	07006b20aH
	DD	030046005H
xdata	ENDS
;	COMDAT ??_C@_0CJ@KMNPLBEC@file?5is?5too?5large?5to?5send?5via?5se@
CONST	SEGMENT
??_C@_0CJ@KMNPLBEC@file?5is?5too?5large?5to?5send?5via?5se@ DB 'file is t'
	DB	'oo large to send via sendfile()', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HPFBDNCA@z?$CDu?$CDz?$CD?3sendfile?$AA@
CONST	SEGMENT
??_C@_0BA@HPFBDNCA@z?$CDu?$CDz?$CD?3sendfile?$AA@ DB 'z#u#z#:sendfile', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@ICCHFGKJ@sendfile?5already?5scheduled?5for?5t@
CONST	SEGMENT
??_C@_0CN@ICCHFGKJ@sendfile?5already?5scheduled?5for?5t@ DB 'sendfile alr'
	DB	'eady scheduled for this callback', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IMHBDANI@pxsocket_sendfile?$AA@
CONST	SEGMENT
??_C@_0BC@IMHBDANI@pxsocket_sendfile?$AA@ DB 'pxsocket_sendfile', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT pxsocket_sendfile
_TEXT	SEGMENT
uname$ = 64
before_bytes$ = 72
after_bytes$ = 80
size$ = 88
after_len$ = 128
s$ = 128
args$ = 136
before_len$ = 144
name_len$ = 152
pxsocket_sendfile PROC					; COMDAT

; 8512 : {

$LN15:
  00000	48 8b c4	 mov	 rax, rsp
  00003	53		 push	 rbx
  00004	56		 push	 rsi
  00005	57		 push	 rdi
  00006	48 83 ec 60	 sub	 rsp, 96			; 00000060H

; 8513 :     PyObject *result = NULL;

  0000a	33 f6		 xor	 esi, esi
  0000c	48 8b fa	 mov	 rdi, rdx
  0000f	48 8b d9	 mov	 rbx, rcx

; 8514 :     LPCWSTR name;
; 8515 :     Py_UNICODE *uname;
; 8516 :     int name_len;
; 8517 :     int access = GENERIC_READ;
; 8518 :     int share = FILE_SHARE_READ;
; 8519 :     int create_flags = OPEN_EXISTING;
; 8520 :     int file_flags = (
; 8521 :         FILE_FLAG_OVERLAPPED    |
; 8522 :         FILE_ATTRIBUTE_READONLY |
; 8523 :         FILE_FLAG_SEQUENTIAL_SCAN
; 8524 :     );
; 8525 :     HANDLE h;
; 8526 :     LARGE_INTEGER size;
; 8527 :     TRANSMIT_FILE_BUFFERS *tf;
; 8528 : 
; 8529 :     char *before_bytes = NULL, *after_bytes = NULL;

  00012	48 89 70 d0	 mov	 QWORD PTR [rax-48], rsi
  00016	48 89 70 d8	 mov	 QWORD PTR [rax-40], rsi

; 8530 :     int before_len = 0, after_len = 0;

  0001a	89 70 18	 mov	 DWORD PTR [rax+24], esi
  0001d	89 70 08	 mov	 DWORD PTR [rax+8], esi

; 8531 :     int max_fsize = INT_MAX - 1;
; 8532 : 
; 8533 :     Px_GUARD

  00020	e8 00 00 00 00	 call	 _Py_PXCTX
  00025	85 c0		 test	 eax, eax
  00027	75 1d		 jne	 SHORT $LN11@pxsocket_s
  00029	44 8d 4e 01	 lea	 r9d, QWORD PTR [rsi+1]
  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@IMHBDANI@pxsocket_sendfile?$AA@
  0003b	41 b8 55 21 00
	00		 mov	 r8d, 8533		; 00002155H
  00041	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN11@pxsocket_s:

; 8534 : 
; 8535 :     if (PxSocket_IS_SENDFILE_SCHEDULED(s)) {

  00046	f7 83 f4 01 00
	00 00 00 00 40	 test	 DWORD PTR [rbx+500], 1073741824 ; 40000000H
  00050	74 1e		 je	 SHORT $LN10@pxsocket_s

; 8536 :         PyErr_SetString(PyExc_RuntimeError,
; 8537 :                         "sendfile already scheduled for this callback");

  00052	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@ICCHFGKJ@sendfile?5already?5scheduled?5for?5t@
  00060	e8 00 00 00 00	 call	 PyErr_SetString

; 8587 :     Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_SENDFILE_SCHEDULED;
; 8588 :     result = Py_None;
; 8589 : 
; 8590 : done:
; 8591 :     if (!result)
; 8592 :         assert(PyErr_Occurred());
; 8593 : 
; 8594 :     return result;

  00065	48 8b c6	 mov	 rax, rsi

; 8595 : }

  00068	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0006c	5f		 pop	 rdi
  0006d	5e		 pop	 rsi
  0006e	5b		 pop	 rbx
  0006f	c3		 ret	 0
$LN10@pxsocket_s:

; 8538 :         goto done;
; 8539 :     }
; 8540 : 
; 8541 :     assert(!s->sendfile_handle);
; 8542 : 
; 8543 :     if (!PyArg_ParseTuple(args, "z#u#z#:sendfile",
; 8544 :                           &before_bytes, &before_len,
; 8545 :                           &uname, &name_len,
; 8546 :                           &after_bytes, &after_len))

  00070	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR after_len$[rsp]
  00078	4c 8d 8c 24 90
	00 00 00	 lea	 r9, QWORD PTR before_len$[rsp]
  00080	4c 8d 44 24 48	 lea	 r8, QWORD PTR before_bytes$[rsp]
  00085	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0008a	48 8d 44 24 50	 lea	 rax, QWORD PTR after_bytes$[rsp]
  0008f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@HPFBDNCA@z?$CDu?$CDz?$CD?3sendfile?$AA@
  00096	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0009b	48 8d 84 24 98
	00 00 00	 lea	 rax, QWORD PTR name_len$[rsp]
  000a3	48 8b cf	 mov	 rcx, rdi
  000a6	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000ab	48 8d 44 24 40	 lea	 rax, QWORD PTR uname$[rsp]
  000b0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000b5	e8 00 00 00 00	 call	 PyArg_ParseTuple
  000ba	85 c0		 test	 eax, eax
  000bc	74 61		 je	 SHORT $LN14@pxsocket_s

; 8547 :         goto done;
; 8548 : 
; 8549 :     name = (LPCWSTR)uname;
; 8550 : 
; 8551 :     h = CreateFile(name, access, share, 0, create_flags, file_flags, 0);

  000be	48 8b 4c 24 40	 mov	 rcx, QWORD PTR uname$[rsp]
  000c3	45 33 c9	 xor	 r9d, r9d
  000c6	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  000cb	45 8d 41 01	 lea	 r8d, QWORD PTR [r9+1]
  000cf	ba 00 00 00 80	 mov	 edx, -2147483648	; 80000000H
  000d4	c7 44 24 28 01
	00 00 48	 mov	 DWORD PTR [rsp+40], 1207959553 ; 48000001H
  000dc	c7 44 24 20 03
	00 00 00	 mov	 DWORD PTR [rsp+32], 3
  000e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateFileW
  000ea	48 8b f8	 mov	 rdi, rax

; 8552 :     if (!h || (h == INVALID_HANDLE_VALUE)) {

  000ed	48 85 c0	 test	 rax, rax
  000f0	74 21		 je	 SHORT $LN7@pxsocket_s
  000f2	48 83 f8 ff	 cmp	 rax, -1
  000f6	74 1b		 je	 SHORT $LN7@pxsocket_s

; 8554 :         goto done;
; 8555 :     }
; 8556 : 
; 8557 :     if (!GetFileSizeEx(h, &size)) {

  000f8	48 8d 54 24 58	 lea	 rdx, QWORD PTR size$[rsp]
  000fd	48 8b c8	 mov	 rcx, rax
  00100	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetFileSizeEx
  00106	85 c0		 test	 eax, eax
  00108	75 20		 jne	 SHORT $LN6@pxsocket_s

; 8558 :         CloseHandle(h);

  0010a	48 8b cf	 mov	 rcx, rdi
  0010d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle
$LN7@pxsocket_s:

; 8553 :         PyErr_SetFromWindowsErrWithUnicodeFilename(0, uname);

  00113	48 8b 54 24 40	 mov	 rdx, QWORD PTR uname$[rsp]
  00118	33 c9		 xor	 ecx, ecx
  0011a	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErrWithUnicodeFilename
$LN14@pxsocket_s:

; 8587 :     Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_SENDFILE_SCHEDULED;
; 8588 :     result = Py_None;
; 8589 : 
; 8590 : done:
; 8591 :     if (!result)
; 8592 :         assert(PyErr_Occurred());
; 8593 : 
; 8594 :     return result;

  0011f	48 8b c6	 mov	 rax, rsi
$done$131617:

; 8595 : }

  00122	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00126	5f		 pop	 rdi
  00127	5e		 pop	 rsi
  00128	5b		 pop	 rbx
  00129	c3		 ret	 0
$LN6@pxsocket_s:

; 8559 :         PyErr_SetFromWindowsErrWithUnicodeFilename(0, uname);
; 8560 :         goto done;
; 8561 :     }
; 8562 : 
; 8563 :     /* Subtract before/after buffer sizes from maximum sendable file size. */
; 8564 :     max_fsize -= before_len;
; 8565 :     max_fsize -= after_len;
; 8566 : 
; 8567 :     if ((size.QuadPart > (long)INT_MAX) || (size.LowPart > max_fsize)) {

  0012a	48 8b 44 24 58	 mov	 rax, QWORD PTR size$[rsp]
  0012f	48 3d ff ff ff
	7f		 cmp	 rax, 2147483647		; 7fffffffH
  00135	0f 8f 95 00 00
	00		 jg	 $LN4@pxsocket_s
  0013b	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR after_len$[rsp]
  00142	44 8b 84 24 90
	00 00 00	 mov	 r8d, DWORD PTR before_len$[rsp]
  0014a	b9 fe ff ff 7f	 mov	 ecx, 2147483646		; 7ffffffeH
  0014f	2b ca		 sub	 ecx, edx
  00151	41 2b c8	 sub	 ecx, r8d
  00154	3b c1		 cmp	 eax, ecx
  00156	77 78		 ja	 SHORT $LN4@pxsocket_s

; 8571 :         goto done;
; 8572 :     }
; 8573 : 
; 8574 :     tf = &s->sendfile_tfbuf;
; 8575 :     memset(tf, 0, sizeof(TRANSMIT_FILE_BUFFERS));

  00158	33 c9		 xor	 ecx, ecx
  0015a	48 89 8b 30 03
	00 00		 mov	 QWORD PTR [rbx+816], rcx
  00161	48 89 8b 38 03
	00 00		 mov	 QWORD PTR [rbx+824], rcx
  00168	48 89 8b 40 03
	00 00		 mov	 QWORD PTR [rbx+832], rcx
  0016f	48 89 8b 48 03
	00 00		 mov	 QWORD PTR [rbx+840], rcx

; 8576 :     if (before_len) {

  00176	45 85 c0	 test	 r8d, r8d
  00179	74 13		 je	 SHORT $LN3@pxsocket_s

; 8577 :         tf->Head = before_bytes;

  0017b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR before_bytes$[rsp]

; 8578 :         tf->HeadLength = before_len;

  00180	44 89 83 38 03
	00 00		 mov	 DWORD PTR [rbx+824], r8d
  00187	48 89 8b 30 03
	00 00		 mov	 QWORD PTR [rbx+816], rcx
$LN3@pxsocket_s:

; 8579 :     }
; 8580 :     if (after_len) {

  0018e	85 d2		 test	 edx, edx
  00190	74 12		 je	 SHORT $LN2@pxsocket_s

; 8581 :         tf->Tail = after_bytes;

  00192	48 8b 4c 24 50	 mov	 rcx, QWORD PTR after_bytes$[rsp]

; 8582 :         tf->TailLength = after_len;

  00197	89 93 48 03 00
	00		 mov	 DWORD PTR [rbx+840], edx
  0019d	48 89 8b 40 03
	00 00		 mov	 QWORD PTR [rbx+832], rcx
$LN2@pxsocket_s:

; 8583 :     }
; 8584 : 
; 8585 :     s->sendfile_nbytes = size.LowPart + before_len + after_len;

  001a4	8d 0c 10	 lea	 ecx, DWORD PTR [rax+rdx]

; 8586 :     s->sendfile_handle = h;

  001a7	48 89 bb 20 03
	00 00		 mov	 QWORD PTR [rbx+800], rdi

; 8587 :     Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_SENDFILE_SCHEDULED;
; 8588 :     result = Py_None;
; 8589 : 
; 8590 : done:
; 8591 :     if (!result)
; 8592 :         assert(PyErr_Occurred());
; 8593 : 
; 8594 :     return result;

  001ae	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  001b5	41 03 c8	 add	 ecx, r8d
  001b8	81 8b f4 01 00
	00 00 00 00 40	 or	 DWORD PTR [rbx+500], 1073741824 ; 40000000H
  001c2	89 8b 1c 03 00
	00		 mov	 DWORD PTR [rbx+796], ecx

; 8595 : }

  001c8	48 83 c4 60	 add	 rsp, 96			; 00000060H
  001cc	5f		 pop	 rdi
  001cd	5e		 pop	 rsi
  001ce	5b		 pop	 rbx
  001cf	c3		 ret	 0
$LN4@pxsocket_s:

; 8568 :         CloseHandle(h);

  001d0	48 8b cf	 mov	 rcx, rdi
  001d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 8569 :         PyErr_SetString(PyExc_ValueError,
; 8570 :                         "file is too large to send via sendfile()");

  001d9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  001e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@KMNPLBEC@file?5is?5too?5large?5to?5send?5via?5se@
  001e7	e8 00 00 00 00	 call	 PyErr_SetString

; 8587 :     Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_SENDFILE_SCHEDULED;
; 8588 :     result = Py_None;
; 8589 : 
; 8590 : done:
; 8591 :     if (!result)
; 8592 :         assert(PyErr_Occurred());
; 8593 : 
; 8594 :     return result;

  001ec	48 8b c6	 mov	 rax, rsi

; 8595 : }

  001ef	48 83 c4 60	 add	 rsp, 96			; 00000060H
  001f3	5f		 pop	 rdi
  001f4	5e		 pop	 rsi
  001f5	5b		 pop	 rbx
  001f6	c3		 ret	 0
pxsocket_sendfile ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _async_read
_TEXT	SEGMENT
self$ = 8
args$ = 16
kwds$ = 24
_async_read PROC					; COMDAT

; 8726 :     return NULL;

  00000	33 c0		 xor	 eax, eax

; 8727 : }

  00002	c3		 ret	 0
_async_read ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _async_write
_TEXT	SEGMENT
self$ = 8
args$ = 16
kwds$ = 24
_async_write PROC					; COMDAT

; 8732 :     return NULL;

  00000	33 c0		 xor	 eax, eax

; 8733 : }

  00002	c3		 ret	 0
_async_write ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_DoesContextHaveActiveHeapSnapshot
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_DoesContextHaveActiveHeapSnapshot DD imagerel $LN5
	DD	imagerel $LN5+63
	DD	imagerel $unwind$_PyParallel_DoesContextHaveActiveHeapSnapshot
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_DoesContextHaveActiveHeapSnapshot DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyParallel_DoesContextHaveActiveHeapSnapshot
_TEXT	SEGMENT
_PyParallel_DoesContextHaveActiveHeapSnapshot PROC	; COMDAT

; 110  : {

$LN5:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 111  :     return (!Py_PXCTX ? 0 : (ctx->snapshot_id == 0));

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	75 05		 jne	 SHORT $LN3@PyParallel@7

; 112  : }

  0000d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00011	c3		 ret	 0
$LN3@PyParallel@7:

; 111  :     return (!Py_PXCTX ? 0 : (ctx->snapshot_id == 0));

  00012	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00018	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00021	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:ctx
  00026	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  0002a	48 8b 0c 10	 mov	 rcx, QWORD PTR [rax+rdx]
  0002e	33 c0		 xor	 eax, eax
  00030	48 39 81 f0 01
	00 00		 cmp	 QWORD PTR [rcx+496], rax
  00037	0f 94 c0	 sete	 al

; 112  : }

  0003a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003e	c3		 ret	 0
_PyParallel_DoesContextHaveActiveHeapSnapshot ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_IsTLSHeapActive
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_IsTLSHeapActive DD imagerel $LN5
	DD	imagerel $LN5+61
	DD	imagerel $unwind$_PyParallel_IsTLSHeapActive
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_IsTLSHeapActive DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyParallel_IsTLSHeapActive
_TEXT	SEGMENT
_PyParallel_IsTLSHeapActive PROC			; COMDAT

; 118  : {

$LN5:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 119  :     return (!Py_PXCTX ? 0 : Px_TLS_HEAP_ACTIVE);

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	75 05		 jne	 SHORT $LN3@PyParallel@8

; 120  : }

  0000d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00011	c3		 ret	 0
$LN3@PyParallel@8:

; 119  :     return (!Py_PXCTX ? 0 : Px_TLS_HEAP_ACTIVE);

  00012	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0001b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00021	41 b8 00 00 00
	00		 mov	 r8d, OFFSET FLAT:tls
  00027	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  0002b	33 c0		 xor	 eax, eax
  0002d	42 39 84 02 d0
	00 00 00	 cmp	 DWORD PTR [rdx+r8+208], eax
  00035	0f 9f c0	 setg	 al

; 120  : }

  00038	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003c	c3		 ret	 0
_PyParallel_IsTLSHeapActive ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_GetTLSHeapDepth
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_GetTLSHeapDepth DD imagerel $LN5
	DD	imagerel $LN5+54
	DD	imagerel $unwind$_PyParallel_GetTLSHeapDepth
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_GetTLSHeapDepth DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyParallel_GetTLSHeapDepth
_TEXT	SEGMENT
_PyParallel_GetTLSHeapDepth PROC			; COMDAT

; 124  : {

$LN5:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 125  :     return (!Py_PXCTX ? 0 : tls.heap_depth);

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	75 05		 jne	 SHORT $LN3@PyParallel@9

; 126  : }

  0000d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00011	c3		 ret	 0
$LN3@PyParallel@9:

; 125  :     return (!Py_PXCTX ? 0 : tls.heap_depth);

  00012	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00018	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00021	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:tls
  00026	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  0002a	8b 84 10 d0 00
	00 00		 mov	 eax, DWORD PTR [rax+rdx+208]

; 126  : }

  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	c3		 ret	 0
_PyParallel_GetTLSHeapDepth ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DA@BHNKKJOD@PyParallel_EnableTLSHeap?$CI?$CJ?3?5heap@ ; `string'
PUBLIC	_PyParallel_EnableTLSHeap
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_EnableTLSHeap DD imagerel $LN6
	DD	imagerel $LN6+120
	DD	imagerel $unwind$_PyParallel_EnableTLSHeap
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_EnableTLSHeap DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0DA@BHNKKJOD@PyParallel_EnableTLSHeap?$CI?$CJ?3?5heap@
CONST	SEGMENT
??_C@_0DA@BHNKKJOD@PyParallel_EnableTLSHeap?$CI?$CJ?3?5heap@ DB 'PyParall'
	DB	'el_EnableTLSHeap(): heap depth overflow', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyParallel_EnableTLSHeap
_TEXT	SEGMENT
_PyParallel_EnableTLSHeap PROC				; COMDAT

; 130  : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 131  :     TLS     *t = &tls;

  0000a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00010	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88

; 132  :     Context *c = ctx;

  00019	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:ctx
  0001e	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  00022	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:tls
  00027	48 8b 3c 17	 mov	 rdi, QWORD PTR [rdi+rdx]
  0002b	48 03 da	 add	 rbx, rdx

; 133  : 
; 134  :     if (!Py_PXCTX)

  0002e	e8 00 00 00 00	 call	 _Py_PXCTX
  00033	85 c0		 test	 eax, eax
  00035	74 36		 je	 SHORT $LN4@PyParallel@10

; 135  :         return;
; 136  : 
; 137  :     if (++t->heap_depth > 1)

  00037	ff 83 d0 00 00
	00		 inc	 DWORD PTR [rbx+208]
  0003d	8b 83 d0 00 00
	00		 mov	 eax, DWORD PTR [rbx+208]
  00043	83 f8 01	 cmp	 eax, 1
  00046	7f 25		 jg	 SHORT $LN4@PyParallel@10

; 138  :         /* Heap already active. */
; 139  :         return;
; 140  : 
; 141  :     if (t->heap_depth < 0)

  00048	85 c0		 test	 eax, eax
  0004a	79 0c		 jns	 SHORT $LN1@PyParallel@10

; 142  :         Py_FatalError("PyParallel_EnableTLSHeap(): heap depth overflow");

  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DA@BHNKKJOD@PyParallel_EnableTLSHeap?$CI?$CJ?3?5heap@
  00053	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyParallel@10:

; 143  : 
; 144  :     assert(t->heap_depth == 1);
; 145  :     assert(!t->ctx_heap);
; 146  :     assert(c->h != t->h);
; 147  : 
; 148  :     t->ctx_heap = c->h;

  00058	48 8b 87 d0 00
	00 00		 mov	 rax, QWORD PTR [rdi+208]
  0005f	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax

; 149  :     c->h = t->h;

  00063	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00066	48 89 87 d0 00
	00 00		 mov	 QWORD PTR [rdi+208], rax
$LN4@PyParallel@10:

; 150  : }

  0006d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00072	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00076	5f		 pop	 rdi
  00077	c3		 ret	 0
_PyParallel_EnableTLSHeap ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CP@OEHHIABM@PyParallel_DisableTLSHeap?3?5negat@ ; `string'
PUBLIC	_PyParallel_DisableTLSHeap
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_DisableTLSHeap DD imagerel $LN6
	DD	imagerel $LN6+115
	DD	imagerel $unwind$_PyParallel_DisableTLSHeap
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_DisableTLSHeap DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CP@OEHHIABM@PyParallel_DisableTLSHeap?3?5negat@
CONST	SEGMENT
??_C@_0CP@OEHHIABM@PyParallel_DisableTLSHeap?3?5negat@ DB 'PyParallel_Dis'
	DB	'ableTLSHeap: negative heap depth', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyParallel_DisableTLSHeap
_TEXT	SEGMENT
_PyParallel_DisableTLSHeap PROC				; COMDAT

; 154  : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 155  :     TLS     *t = &tls;

  0000a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00010	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88

; 156  :     Context *c = ctx;

  00019	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:ctx
  0001e	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  00022	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:tls
  00027	48 8b 3c 17	 mov	 rdi, QWORD PTR [rdi+rdx]
  0002b	48 03 da	 add	 rbx, rdx

; 157  : 
; 158  :     if (!Py_PXCTX)

  0002e	e8 00 00 00 00	 call	 _Py_PXCTX
  00033	85 c0		 test	 eax, eax
  00035	74 31		 je	 SHORT $LN4@PyParallel@11

; 159  :         return;
; 160  : 
; 161  :     if (--t->heap_depth > 0)

  00037	ff 8b d0 00 00
	00		 dec	 DWORD PTR [rbx+208]
  0003d	8b 83 d0 00 00
	00		 mov	 eax, DWORD PTR [rbx+208]
  00043	85 c0		 test	 eax, eax
  00045	7f 21		 jg	 SHORT $LN4@PyParallel@11

; 162  :         return;
; 163  : 
; 164  :     if (t->heap_depth < 0)

  00047	79 0c		 jns	 SHORT $LN1@PyParallel@11

; 165  :         Py_FatalError("PyParallel_DisableTLSHeap: negative heap depth");

  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CP@OEHHIABM@PyParallel_DisableTLSHeap?3?5negat@
  00050	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyParallel@11:

; 166  : 
; 167  :     assert(t->heap_depth == 0);
; 168  :     assert(t->ctx_heap);
; 169  :     assert(c->h == t->h);
; 170  :     assert(c->h != t->ctx_heap);
; 171  : 
; 172  :     c->h = t->ctx_heap;

  00055	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  00059	48 89 87 d0 00
	00 00		 mov	 QWORD PTR [rdi+208], rax

; 173  :     t->ctx_heap = NULL;

  00060	48 c7 43 08 00
	00 00 00	 mov	 QWORD PTR [rbx+8], 0
$LN4@PyParallel@11:

; 174  : }

  00068	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0006d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00071	5f		 pop	 rdi
  00072	c3		 ret	 0
_PyParallel_DisableTLSHeap ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BK@NBLEEGOG@?$AAp?$AAx?$AA?5?$AA?9?$AA?$DO?$AA?5?$AA0?$AAx?$AA8?$AA?4?$AA?4?$AA?6?$AA?$AA@ ; `string'
PUBLIC	??_C@_17KKIMHOM@?$AA?$CB?$AAp?$AAx?$AA?$AA@	; `string'
PUBLIC	??_C@_1EC@ONMHDOMO@?$AA_?$AAP?$AAy?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA_?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$CB?$AA?6@ ; `string'
EXTRN	__imp_OutputDebugStringW:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PXSTATE DD imagerel PXSTATE
	DD	imagerel PXSTATE+150
	DD	imagerel $unwind$PXSTATE
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PXSTATE DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_1BK@NBLEEGOG@?$AAp?$AAx?$AA?5?$AA?9?$AA?$DO?$AA?5?$AA0?$AAx?$AA8?$AA?4?$AA?4?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@NBLEEGOG@?$AAp?$AAx?$AA?5?$AA?9?$AA?$DO?$AA?5?$AA0?$AAx?$AA8?$AA?4?$AA?4?$AA?6?$AA?$AA@ DB 'p'
	DB	00H, 'x', 00H, ' ', 00H, '-', 00H, '>', 00H, ' ', 00H, '0', 00H
	DB	'x', 00H, '8', 00H, '.', 00H, '.', 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17KKIMHOM@?$AA?$CB?$AAp?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_17KKIMHOM@?$AA?$CB?$AAp?$AAx?$AA?$AA@ DB '!', 00H, 'p', 00H, 'x', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@ONMHDOMO@?$AA_?$AAP?$AAy?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA_?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$CB?$AA?6@
CONST	SEGMENT
??_C@_1EC@ONMHDOMO@?$AA_?$AAP?$AAy?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA_?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$CB?$AA?6@ DB '_'
	DB	00H, 'P', 00H, 'y', 00H, 'T', 00H, 'h', 00H, 'r', 00H, 'e', 00H
	DB	'a', 00H, 'd', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, '_', 00H, 'C', 00H, 'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H
	DB	'n', 00H, 't', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N'
	DB	00H, 'U', 00H, 'L', 00H, 'L', 00H, '!', 00H, 0aH, 00H, 00H, 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PXSTATE
_TEXT	SEGMENT
px$ = 48
PXSTATE	PROC						; COMDAT

; 257  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 258  :     PxState *px;
; 259  :     register PyThreadState *pstate = get_main_thread_state();

  00006	e8 00 00 00 00	 call	 get_main_thread_state

; 260  :     if (!pstate) {

  0000b	48 85 c0	 test	 rax, rax
  0000e	75 42		 jne	 SHORT $LN5@PXSTATE

; 261  :         OutputDebugString(L"_PyThreadState_Current == NULL!\n");

  00010	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EC@ONMHDOMO@?$AA_?$AAP?$AAy?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA_?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$CB?$AA?6@
  00017	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringW

; 262  :         if (Py_PXCTX)

  0001d	e8 00 00 00 00	 call	 _Py_PXCTX
  00022	85 c0		 test	 eax, eax
  00024	74 25		 je	 SHORT $LN9@PXSTATE

; 263  :             px = ctx->px;

  00026	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0002c	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00035	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:ctx
  0003a	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  0003e	48 8b 0c 10	 mov	 rcx, QWORD PTR [rax+rdx]
  00042	48 8b 99 d8 00
	00 00		 mov	 rbx, QWORD PTR [rcx+216]

; 264  :     } else

  00049	eb 0e		 jmp	 SHORT $LN3@PXSTATE
$LN9@PXSTATE:

; 265  :         px = (PxState *)pstate->px;

  0004b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR px$[rsp]
  00050	eb 07		 jmp	 SHORT $LN3@PXSTATE
$LN5@PXSTATE:
  00052	48 8b 98 a0 00
	00 00		 mov	 rbx, QWORD PTR [rax+160]
$LN3@PXSTATE:

; 266  :     if (!px) {

  00059	48 85 db	 test	 rbx, rbx
  0005c	75 0d		 jne	 SHORT $LN2@PXSTATE

; 267  :         OutputDebugString(L"!px");

  0005e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_17KKIMHOM@?$AA?$CB?$AAp?$AAx?$AA?$AA@
  00065	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringW
$LN2@PXSTATE:

; 268  :     }
; 269  :     if ((Px_PTR(px) & 0x0000000800000000) == 0x0000000800000000) {

  0006b	48 b8 00 00 00
	00 08 00 00 00	 mov	 rax, 34359738368	; 0000000800000000H
  00075	48 8b cb	 mov	 rcx, rbx
  00078	48 23 c8	 and	 rcx, rax
  0007b	48 3b c8	 cmp	 rcx, rax
  0007e	75 0d		 jne	 SHORT $LN8@PXSTATE

; 270  :         OutputDebugString(L"px -> 0x8..\n");

  00080	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@NBLEEGOG@?$AAp?$AAx?$AA?5?$AA?9?$AA?$DO?$AA?5?$AA0?$AAx?$AA8?$AA?4?$AA?4?$AA?6?$AA?$AA@
  00087	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringW
$LN8@PXSTATE:

; 271  :     }
; 272  :     /*
; 273  :     assert(px);
; 274  :     assert((Px_PTR(px) & 0x0000000800000000) != 0x0000000800000000);
; 275  :     */
; 276  :     return px;

  0008d	48 8b c3	 mov	 rax, rbx

; 277  : }

  00090	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00094	5b		 pop	 rbx
  00095	c3		 ret	 0
PXSTATE	ENDP
_TEXT	ENDS
PUBLIC	PxSocket_NEW_SBUF
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocket_NEW_SBUF DD imagerel $LN12
	DD	imagerel $LN12+244
	DD	imagerel $unwind$PxSocket_NEW_SBUF
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocket_NEW_SBUF DD 060f01H
	DD	09640fH
	DD	08540fH
	DD	0700b520fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PxSocket_NEW_SBUF
_TEXT	SEGMENT
w$ = 32
c$ = 64
s$ = 72
snapshot$ = 80
len$ = 88
buf$ = 96
o$ = 104
sbuf$ = 112
copy_buf$ = 120
PxSocket_NEW_SBUF PROC					; COMDAT

; 443  : {

$LN12:
  00000	48 89 6c 24 08	 mov	 QWORD PTR [rsp+8], rbp
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b e9	 mov	 rbp, rcx

; 444  :     DWORD  nbytes;
; 445  :     WSABUF w;
; 446  :     SBUF *b;
; 447  :     assert(!*sbuf);
; 448  :     assert(snapshot);
; 449  :     assert(!snapshot->sle_prev);
; 450  :     assert(!snapshot->sle_next);
; 451  :     assert(c == ctx);
; 452  :     assert(s->ctx == c);
; 453  :     assert(c->io_obj == (PyObject *)s);
; 454  :     assert(
; 455  :         (!len && !buf &&  o) ||
; 456  :         ( len &&  buf && !o && (*len > 0))
; 457  :     );
; 458  : 
; 459  :     if (!o) {

  00012	48 8b 4c 24 68	 mov	 rcx, QWORD PTR o$[rsp]
  00017	49 8b f0	 mov	 rsi, r8
  0001a	48 8b fa	 mov	 rdi, rdx
  0001d	48 85 c9	 test	 rcx, rcx
  00020	75 14		 jne	 SHORT $LN7@PxSocket_N

; 460  :         w.len = *len;

  00022	45 8b 09	 mov	 r9d, DWORD PTR [r9]

; 461  :         w.buf =  buf;

  00025	48 8b 44 24 60	 mov	 rax, QWORD PTR buf$[rsp]
  0002a	44 89 4c 24 20	 mov	 DWORD PTR w$[rsp], r9d
  0002f	48 89 44 24 28	 mov	 QWORD PTR w$[rsp+8], rax
  00034	eb 25		 jmp	 SHORT $LN5@PxSocket_N
$LN7@PxSocket_N:

; 462  :     } else if (!PyObject2WSABUF(o, &w))

  00036	48 8d 54 24 20	 lea	 rdx, QWORD PTR w$[rsp]
  0003b	e8 00 00 00 00	 call	 PyObject2WSABUF
  00040	85 c0		 test	 eax, eax
  00042	75 12		 jne	 SHORT $LN10@PxSocket_N
$LN11@PxSocket_N:

; 463  :         return 0;

  00044	33 c0		 xor	 eax, eax

; 488  :     }
; 489  : 
; 490  :     return 1;
; 491  : }

  00046	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  0004b	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00050	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00054	5f		 pop	 rdi
  00055	c3		 ret	 0
$LN10@PxSocket_N:

; 463  :         return 0;

  00056	44 8b 4c 24 20	 mov	 r9d, DWORD PTR w$[rsp]
$LN5@PxSocket_N:

; 464  : 
; 465  :     nbytes = Px_PTR_ALIGN(sizeof(SBUF));
; 466  :     if (copy_buf)

  0005b	83 7c 24 78 00	 cmp	 DWORD PTR copy_buf$[rsp], 0
  00060	b8 50 00 00 00	 mov	 eax, 80			; 00000050H
  00065	74 04		 je	 SHORT $LN4@PxSocket_N

; 467  :         nbytes += w.len;

  00067	41 8d 41 50	 lea	 eax, DWORD PTR [r9+80]
$LN4@PxSocket_N:

; 468  : 
; 469  :     *sbuf = (SBUF *)_PyHeap_Malloc(c, nbytes, 0, 0);

  0006b	8b d0		 mov	 edx, eax
  0006d	45 33 c9	 xor	 r9d, r9d
  00070	45 33 c0	 xor	 r8d, r8d
  00073	48 8b cd	 mov	 rcx, rbp
  00076	e8 00 00 00 00	 call	 _PyHeap_Malloc
  0007b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR sbuf$[rsp]
  00080	48 89 01	 mov	 QWORD PTR [rcx], rax
  00083	4c 8b d8	 mov	 r11, rax

; 470  :     if (!*sbuf)

  00086	48 85 c0	 test	 rax, rax

; 471  :         return 0;

  00089	74 b9		 je	 SHORT $LN11@PxSocket_N

; 472  : 
; 473  :     b = *sbuf;
; 474  : 
; 475  :     b->last_thread_id = _Py_get_current_thread_id();
; 476  :     b->snapshot = snapshot;
; 477  :     b->s = s;
; 478  :     s->ol = &b->ol;
; 479  :     s->sbuf = b;
; 480  : 
; 481  :     b->w.len = w.len;
; 482  : 
; 483  :     if (!copy_buf)

  0008b	83 7c 24 78 00	 cmp	 DWORD PTR copy_buf$[rsp], 0
  00090	65 8b 04 25 48
	00 00 00	 mov	 eax, DWORD PTR gs:72
  00098	49 89 73 10	 mov	 QWORD PTR [r11+16], rsi
  0009c	41 89 43 18	 mov	 DWORD PTR [r11+24], eax
  000a0	49 8d 43 20	 lea	 rax, QWORD PTR [r11+32]
  000a4	49 89 3b	 mov	 QWORD PTR [r11], rdi
  000a7	48 89 87 80 03
	00 00		 mov	 QWORD PTR [rdi+896], rax
  000ae	8b 44 24 20	 mov	 eax, DWORD PTR w$[rsp]
  000b2	4c 89 9f 68 03
	00 00		 mov	 QWORD PTR [rdi+872], r11
  000b9	41 89 43 40	 mov	 DWORD PTR [r11+64], eax
  000bd	75 0b		 jne	 SHORT $LN2@PxSocket_N

; 484  :         b->w.buf = w.buf;

  000bf	48 8b 44 24 28	 mov	 rax, QWORD PTR w$[rsp+8]
  000c4	49 89 43 48	 mov	 QWORD PTR [r11+72], rax

; 485  :     else {

  000c8	eb 15		 jmp	 SHORT $LN1@PxSocket_N
$LN2@PxSocket_N:

; 486  :         b->w.buf = (char *)(_Py_PTR_ADD(b, Px_PTR_ALIGN(sizeof(SBUF))));
; 487  :         memcpy(b->w.buf, w.buf, w.len);

  000ca	48 8b 54 24 28	 mov	 rdx, QWORD PTR w$[rsp+8]
  000cf	49 8d 4b 50	 lea	 rcx, QWORD PTR [r11+80]
  000d3	4c 8b c0	 mov	 r8, rax
  000d6	49 89 4b 48	 mov	 QWORD PTR [r11+72], rcx
  000da	e8 00 00 00 00	 call	 memcpy
$LN1@PxSocket_N:

; 488  :     }
; 489  : 
; 490  :     return 1;
; 491  : }

  000df	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  000e4	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000e9	b8 01 00 00 00	 mov	 eax, 1
  000ee	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000f2	5f		 pop	 rdi
  000f3	c3		 ret	 0
PxSocket_NEW_SBUF ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@BPAJLFDI@_PyParallel_BlockingCall?$AA@ ; `string'
PUBLIC	_PyParallel_BlockingCall
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_BlockingCall DD imagerel $LN8
	DD	imagerel $LN8+21
	DD	imagerel $unwind$_PyParallel_BlockingCall
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_PyParallel_BlockingCall DD imagerel $LN8+21
	DD	imagerel $LN8+111
	DD	imagerel $chain$0$_PyParallel_BlockingCall
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_PyParallel_BlockingCall DD imagerel $LN8+111
	DD	imagerel $LN8+141
	DD	imagerel $chain$1$_PyParallel_BlockingCall
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_PyParallel_BlockingCall DD 021H
	DD	imagerel $LN8
	DD	imagerel $LN8+21
	DD	imagerel $unwind$_PyParallel_BlockingCall
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_PyParallel_BlockingCall DD 020521H
	DD	067405H
	DD	imagerel $LN8
	DD	imagerel $LN8+21
	DD	imagerel $unwind$_PyParallel_BlockingCall
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_BlockingCall DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0BJ@BPAJLFDI@_PyParallel_BlockingCall?$AA@
CONST	SEGMENT
??_C@_0BJ@BPAJLFDI@_PyParallel_BlockingCall?$AA@ DB '_PyParallel_Blocking'
	DB	'Call', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyParallel_BlockingCall
_TEXT	SEGMENT
_PyParallel_BlockingCall PROC				; COMDAT

; 551  : {

$LN8:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 552  :     Context *c = ctx;

  00006	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0000c	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00015	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  0001a	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  0001e	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:ctx
  00023	48 8b 3c 07	 mov	 rdi, QWORD PTR [rdi+rax]

; 553  :     Stats   *s = STATS(c);

  00027	f6 87 f8 00 00
	00 20		 test	 BYTE PTR [rdi+248], 32	; 00000020H
  0002e	74 09		 je	 SHORT $LN6@PyParallel@12
  00030	48 8d 9f 00 01
	00 00		 lea	 rbx, QWORD PTR [rdi+256]
  00037	eb 02		 jmp	 SHORT $LN7@PyParallel@12
$LN6@PyParallel@12:
  00039	33 db		 xor	 ebx, ebx
$LN7@PyParallel@12:

; 554  :     Px_GUARD

  0003b	e8 00 00 00 00	 call	 _Py_PXCTX
  00040	85 c0		 test	 eax, eax
  00042	75 1d		 jne	 SHORT $LN3@PyParallel@12
  00044	44 8d 48 01	 lea	 r9d, QWORD PTR [rax+1]
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0004f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@BPAJLFDI@_PyParallel_BlockingCall?$AA@
  00056	41 b8 2a 02 00
	00		 mov	 r8d, 554		; 0000022aH
  0005c	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@PyParallel@12:

; 555  : 
; 556  :     if (Px_CTX_IS_DISASSOCIATED(c))

  00061	f6 87 f8 00 00
	00 10		 test	 BYTE PTR [rdi+248], 16
  00068	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
  0006d	75 18		 jne	 SHORT $LN1@PyParallel@12

; 557  :         return;
; 558  : 
; 559  :     if (s && ++s->blocking_calls > _PxBlockingCallsThreshold)

  0006f	48 85 db	 test	 rbx, rbx
  00072	74 13		 je	 SHORT $LN1@PyParallel@12
  00074	ff 43 38	 inc	 DWORD PTR [rbx+56]
  00077	8b 43 38	 mov	 eax, DWORD PTR [rbx+56]
  0007a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _PxBlockingCallsThreshold
  00080	7e 05		 jle	 SHORT $LN1@PyParallel@12

; 560  :         _PyParallel_DisassociateCurrentThreadFromCallback();

  00082	e8 00 00 00 00	 call	 _PyParallel_DisassociateCurrentThreadFromCallback
$LN1@PyParallel@12:

; 561  : }

  00087	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008b	5b		 pop	 rbx
  0008c	c3		 ret	 0
_PyParallel_BlockingCall ENDP
_TEXT	ENDS
PUBLIC	_PyHeap_MemAlignedMalloc
; Function compile flags: /Ogtpy
;	COMDAT _PyHeap_MemAlignedMalloc
_TEXT	SEGMENT
c$ = 8
n$ = 16
_PyHeap_MemAlignedMalloc PROC				; COMDAT

; 567  :     return _PyHeap_Malloc(c, n, Px_MEM_ALIGN_SIZE, 0);

  00000	45 33 c9	 xor	 r9d, r9d
  00003	45 8d 41 10	 lea	 r8d, QWORD PTR [r9+16]

; 568  : }

  00007	e9 00 00 00 00	 jmp	 _PyHeap_Malloc
_PyHeap_MemAlignedMalloc ENDP
_TEXT	ENDS
PUBLIC	_PyHeap_NewListItem
; Function compile flags: /Ogtpy
;	COMDAT _PyHeap_NewListItem
_TEXT	SEGMENT
c$ = 8
_PyHeap_NewListItem PROC				; COMDAT

; 574  :     return (PxListItem *)_PyHeap_MemAlignedMalloc(c, sizeof(PxListItem));

  00000	ba 40 00 00 00	 mov	 edx, 64			; 00000040H

; 575  : }

  00005	e9 00 00 00 00	 jmp	 _PyHeap_MemAlignedMalloc
_PyHeap_NewListItem ENDP
_TEXT	ENDS
PUBLIC	_PyHeap_NewList
EXTRN	__imp_InitializeSListHead:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyHeap_NewList DD imagerel $LN5
	DD	imagerel $LN5+42
	DD	imagerel $unwind$_PyHeap_NewList
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyHeap_NewList DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyHeap_NewList
_TEXT	SEGMENT
c$ = 48
_PyHeap_NewList PROC					; COMDAT

; 580  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 581  :     PxListHead *l;
; 582  : 
; 583  :     l = (PxListHead *)_PyHeap_MemAlignedMalloc(c, sizeof(PxListHead));

  00006	ba 10 00 00 00	 mov	 edx, 16
  0000b	e8 00 00 00 00	 call	 _PyHeap_MemAlignedMalloc
  00010	48 8b d8	 mov	 rbx, rax

; 584  :     if (l)

  00013	48 85 c0	 test	 rax, rax
  00016	74 0c		 je	 SHORT $LN1@PyHeap_New

; 585  :         InitializeSListHead(l);

  00018	48 8b c8	 mov	 rcx, rax
  0001b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeSListHead

; 586  : 
; 587  :     return l;

  00021	48 8b c3	 mov	 rax, rbx
$LN1@PyHeap_New:

; 588  : }

  00024	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00028	5b		 pop	 rbx
  00029	c3		 ret	 0
_PyHeap_NewList ENDP
_TEXT	ENDS
PUBLIC	_PyHeap_NewObject
; Function compile flags: /Ogtpy
;	COMDAT _PyHeap_NewObject
_TEXT	SEGMENT
c$ = 8
_PyHeap_NewObject PROC					; COMDAT

; 725  :     return (Object *)_PyHeap_Malloc(c, sizeof(Object), 0, 0);

  00000	45 33 c9	 xor	 r9d, r9d
  00003	45 33 c0	 xor	 r8d, r8d
  00006	41 8d 51 18	 lea	 edx, QWORD PTR [r9+24]

; 726  : }

  0000a	e9 00 00 00 00	 jmp	 _PyHeap_Malloc
_PyHeap_NewObject ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@FMHELPEA@_PxState_InitPxPages?$AA@	; `string'
PUBLIC	_PxState_InitPxPages
EXTRN	__imp_InitializeSRWLock:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PxState_InitPxPages DD imagerel $LN4
	DD	imagerel $LN4+62
	DD	imagerel $unwind$_PxState_InitPxPages
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PxState_InitPxPages DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0BF@FMHELPEA@_PxState_InitPxPages?$AA@
CONST	SEGMENT
??_C@_0BF@FMHELPEA@_PxState_InitPxPages?$AA@ DB '_PxState_InitPxPages', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PxState_InitPxPages
_TEXT	SEGMENT
px$ = 48
_PxState_InitPxPages PROC				; COMDAT

; 1392 : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 1393 :     Py_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN1@PxState_In
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@FMHELPEA@_PxState_InitPxPages?$AA@
  00020	45 33 c9	 xor	 r9d, r9d
  00023	41 b8 71 05 00
	00		 mov	 r8d, 1393		; 00000571H
  00029	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@PxState_In:

; 1394 : 
; 1395 :     InitializeSRWLock(&px->pages_srwlock);

  0002e	48 8d 4b 60	 lea	 rcx, QWORD PTR [rbx+96]

; 1396 : }

  00032	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00036	5b		 pop	 rbx
  00037	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_InitializeSRWLock
_PxState_InitPxPages ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@NPDCEEJI@_PxContext_UnregisterHeaps?$AA@ ; `string'
PUBLIC	_PxContext_UnregisterHeaps
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PxContext_UnregisterHeaps DD imagerel $LN15
	DD	imagerel $LN15+78
	DD	imagerel $unwind$_PxContext_UnregisterHeaps
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_PxContext_UnregisterHeaps DD imagerel $LN15+78
	DD	imagerel $LN15+246
	DD	imagerel $chain$2$_PxContext_UnregisterHeaps
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$_PxContext_UnregisterHeaps DD imagerel $LN15+246
	DD	imagerel $LN15+267
	DD	imagerel $chain$3$_PxContext_UnregisterHeaps
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$_PxContext_UnregisterHeaps DD 021H
	DD	imagerel $LN15
	DD	imagerel $LN15+78
	DD	imagerel $unwind$_PxContext_UnregisterHeaps
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_PxContext_UnregisterHeaps DD 060f21H
	DD	04640fH
	DD	05540aH
	DD	0c3405H
	DD	imagerel $LN15
	DD	imagerel $LN15+78
	DD	imagerel $unwind$_PxContext_UnregisterHeaps
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PxContext_UnregisterHeaps DD 040a01H
	DD	0d006520aH
	DD	07002c004H
xdata	ENDS
;	COMDAT ??_C@_0BL@NPDCEEJI@_PxContext_UnregisterHeaps?$AA@
CONST	SEGMENT
??_C@_0BL@NPDCEEJI@_PxContext_UnregisterHeaps?$AA@ DB '_PxContext_Unregis'
	DB	'terHeaps', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PxContext_UnregisterHeaps
_TEXT	SEGMENT
lower$127141 = 80
c$ = 80
upper$127142 = 88
_PxContext_UnregisterHeaps PROC				; COMDAT

; 1426 : {

$LN15:
  00000	40 57		 push	 rdi
  00002	41 54		 push	 r12
  00004	41 55		 push	 r13
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 1427 :     Heap    *h;
; 1428 :     Stats   *s;
; 1429 :     PxState *px;
; 1430 :     int      i, heap_count = 0;
; 1431 : 
; 1432 :     Py_GUARD

  0000d	e8 00 00 00 00	 call	 _Py_PXCTX
  00012	85 c0		 test	 eax, eax
  00014	74 1c		 je	 SHORT $LN8@PxContext_@3
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@NPDCEEJI@_PxContext_UnregisterHeaps?$AA@
  00024	45 33 c9	 xor	 r9d, r9d
  00027	41 b8 98 05 00
	00		 mov	 r8d, 1432		; 00000598H
  0002d	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN8@PxContext_@3:

; 1433 : 
; 1434 :     px =  c->px;

  00032	4c 8b a7 d8 00
	00 00		 mov	 r12, QWORD PTR [rdi+216]

; 1435 :     s  = &c->stats;
; 1436 : 
; 1437 :     AcquireSRWLockExclusive(&px->pages_srwlock);

  00039	49 8d 4c 24 60	 lea	 rcx, QWORD PTR [r12+96]
  0003e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AcquireSRWLockExclusive

; 1438 : 
; 1439 :     h = &c->heap;

  00044	48 83 c7 18	 add	 rdi, 24

; 1440 :     while (h) {

  00048	0f 84 a8 00 00
	00		 je	 $LN13@PxContext_@3
  0004e	48 89 5c 24 60	 mov	 QWORD PTR [rsp+96], rbx
  00053	48 89 6c 24 28	 mov	 QWORD PTR [rsp+40], rbp
  00058	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0005d	0f 1f 00	 npad	 3
$LL7@PxContext_@3:

; 1441 :         heap_count++;
; 1442 : 
; 1443 :         assert((h->size % h->page_size) == 0);
; 1444 : 
; 1445 :         for (i = 0; i < h->pages; i++) {

  00060	33 f6		 xor	 esi, esi
  00062	48 39 77 28	 cmp	 QWORD PTR [rdi+40], rsi
  00066	76 70		 jbe	 SHORT $LN3@PxContext_@3
  00068	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL5@PxContext_@3:

; 1446 :             void *p;
; 1447 :             Px_UINTPTR lower, upper;
; 1448 : 
; 1449 :             p = Px_PTR_ADD(h->base, (i * h->page_size));

  00070	48 63 4f 20	 movsxd	 rcx, DWORD PTR [rdi+32]

; 1450 : 
; 1451 :             lower = Px_PAGESIZE_ALIGN_DOWN(p, h->page_size);
; 1452 :             upper = Px_PAGESIZE_ALIGN_UP(p, h->page_size);
; 1453 : 
; 1454 :             _PxPages_RemoveHeapPage(&(px->pages), &lower, h);

  00074	48 8d 54 24 50	 lea	 rdx, QWORD PTR lower$127141[rsp]
  00079	8b c1		 mov	 eax, ecx
  0007b	0f af c6	 imul	 eax, esi
  0007e	4c 63 c0	 movsxd	 r8, eax
  00081	48 8b c1	 mov	 rax, rcx
  00084	4c 03 47 10	 add	 r8, QWORD PTR [rdi+16]
  00088	48 f7 d8	 neg	 rax
  0008b	49 23 c0	 and	 rax, r8
  0008e	4a 8d 5c 01 ff	 lea	 rbx, QWORD PTR [rcx+r8-1]
  00093	4c 8b c7	 mov	 r8, rdi
  00096	48 89 44 24 50	 mov	 QWORD PTR lower$127141[rsp], rax
  0009b	48 8d 41 ff	 lea	 rax, QWORD PTR [rcx-1]
  0009f	49 8d 4c 24 68	 lea	 rcx, QWORD PTR [r12+104]
  000a4	48 f7 d0	 not	 rax
  000a7	48 23 d8	 and	 rbx, rax
  000aa	48 89 5c 24 58	 mov	 QWORD PTR upper$127142[rsp], rbx
  000af	e8 00 00 00 00	 call	 _PxPages_RemoveHeapPage

; 1455 :             if (lower != upper)

  000b4	48 39 5c 24 50	 cmp	 QWORD PTR lower$127141[rsp], rbx
  000b9	74 12		 je	 SHORT $LN4@PxContext_@3

; 1456 :                 _PxPages_RemoveHeapPage(&(px->pages), &upper, h);

  000bb	48 8d 54 24 58	 lea	 rdx, QWORD PTR upper$127142[rsp]
  000c0	49 8d 4c 24 68	 lea	 rcx, QWORD PTR [r12+104]
  000c5	4c 8b c7	 mov	 r8, rdi
  000c8	e8 00 00 00 00	 call	 _PxPages_RemoveHeapPage
$LN4@PxContext_@3:

; 1441 :         heap_count++;
; 1442 : 
; 1443 :         assert((h->size % h->page_size) == 0);
; 1444 : 
; 1445 :         for (i = 0; i < h->pages; i++) {

  000cd	ff c6		 inc	 esi
  000cf	48 63 c6	 movsxd	 rax, esi
  000d2	48 3b 47 28	 cmp	 rax, QWORD PTR [rdi+40]
  000d6	72 98		 jb	 SHORT $LL5@PxContext_@3
$LN3@PxContext_@3:

; 1457 :         }
; 1458 : 
; 1459 :         h = h->sle_next;

  000d8	48 8b 7f 08	 mov	 rdi, QWORD PTR [rdi+8]

; 1460 :         if (h->size == 0)

  000dc	48 83 7f 38 00	 cmp	 QWORD PTR [rdi+56], 0
  000e1	0f 85 79 ff ff
	ff		 jne	 $LL7@PxContext_@3
  000e7	48 8b 74 24 20	 mov	 rsi, QWORD PTR [rsp+32]
  000ec	48 8b 6c 24 28	 mov	 rbp, QWORD PTR [rsp+40]
  000f1	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
$LN13@PxContext_@3:

; 1461 :             break;
; 1462 :     }
; 1463 :     ReleaseSRWLockExclusive(&px->pages_srwlock);

  000f6	49 8d 4c 24 60	 lea	 rcx, QWORD PTR [r12+96]

; 1464 :     assert(heap_count == s->heaps);
; 1465 : }

  000fb	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ff	41 5d		 pop	 r13
  00101	41 5c		 pop	 r12
  00103	5f		 pop	 rdi
  00104	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_ReleaseSRWLockExclusive
_PxContext_UnregisterHeaps ENDP
_TEXT	ENDS
PUBLIC	_Px_MemorySignature
EXTRN	_PyMem_InRange:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Px_MemorySignature DD imagerel $LN8
	DD	imagerel $LN8+23
	DD	imagerel $unwind$_Px_MemorySignature
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_Px_MemorySignature DD imagerel $LN8+23
	DD	imagerel $LN8+77
	DD	imagerel $chain$0$_Px_MemorySignature
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_Px_MemorySignature DD imagerel $LN8+77
	DD	imagerel $LN8+81
	DD	imagerel $chain$2$_Px_MemorySignature
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$_Px_MemorySignature DD imagerel $LN8+81
	DD	imagerel $LN8+144
	DD	imagerel $chain$4$_Px_MemorySignature
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$_Px_MemorySignature DD imagerel $LN8+144
	DD	imagerel $LN8+180
	DD	imagerel $chain$5$_Px_MemorySignature
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$_Px_MemorySignature DD 020021H
	DD	087400H
	DD	imagerel $LN8+77
	DD	imagerel $LN8+81
	DD	imagerel $chain$2$_Px_MemorySignature
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$_Px_MemorySignature DD 040a21H
	DD	08740aH
	DD	063405H
	DD	imagerel $LN8+77
	DD	imagerel $LN8+81
	DD	imagerel $chain$2$_Px_MemorySignature
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_Px_MemorySignature DD 020021H
	DD	075400H
	DD	imagerel $LN8
	DD	imagerel $LN8+23
	DD	imagerel $unwind$_Px_MemorySignature
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_Px_MemorySignature DD 020521H
	DD	075405H
	DD	imagerel $LN8
	DD	imagerel $LN8+23
	DD	imagerel $unwind$_Px_MemorySignature
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Px_MemorySignature DD 020601H
	DD	060023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _Px_MemorySignature
_TEXT	SEGMENT
m$ = 48
_Px_MemorySignature PROC				; COMDAT

; 1491 : {

$LN8:
  00000	40 56		 push	 rsi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b f1	 mov	 rsi, rcx

; 1492 :     PxState *px;
; 1493 :     unsigned long signature;
; 1494 : 
; 1495 :     if (!m)

  00009	48 85 c9	 test	 rcx, rcx
  0000c	75 09		 jne	 SHORT $LN4@Px_MemoryS

; 1496 :         return _MEMSIG_NULL;

  0000e	8d 41 02	 lea	 eax, QWORD PTR [rcx+2]

; 1513 : }

  00011	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00015	5e		 pop	 rsi
  00016	c3		 ret	 0
$LN4@Px_MemoryS:
  00017	48 89 6c 24 38	 mov	 QWORD PTR [rsp+56], rbp

; 1497 : 
; 1498 :     px = PXSTATE();

  0001c	e8 00 00 00 00	 call	 PXSTATE
  00021	48 8b e8	 mov	 rbp, rax

; 1499 :     if (!px)

  00024	48 85 c0	 test	 rax, rax
  00027	75 24		 jne	 SHORT $LN3@Px_MemoryS

; 1500 :         return (_PyMem_InRange(m) ? _MEMSIG_PY : _MEMSIG_NOT_READY);

  00029	48 8b ce	 mov	 rcx, rsi
  0002c	e8 00 00 00 00	 call	 _PyMem_InRange
  00031	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00036	b9 01 00 00 00	 mov	 ecx, 1
  0003b	85 c0		 test	 eax, eax
  0003d	ba 08 00 00 00	 mov	 edx, 8
  00042	0f 45 ca	 cmovne	 ecx, edx
  00045	8b c1		 mov	 eax, ecx

; 1513 : }

  00047	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004b	5e		 pop	 rsi
  0004c	c3		 ret	 0
$LN3@Px_MemoryS:

; 1501 : 
; 1502 :     signature = _MEMSIG_UNKNOWN;
; 1503 : 
; 1504 :     AcquireSRWLockShared(&px->pages_srwlock);

  0004d	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  00051	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00056	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  0005b	bf 04 00 00 00	 mov	 edi, 4
  00060	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AcquireSRWLockShared

; 1505 :     if (PxPages_Find(px->pages, m))

  00066	48 8b 4d 68	 mov	 rcx, QWORD PTR [rbp+104]
  0006a	48 8b d6	 mov	 rdx, rsi
  0006d	e8 00 00 00 00	 call	 PxPages_Find
  00072	b9 10 00 00 00	 mov	 ecx, 16
  00077	85 c0		 test	 eax, eax
  00079	0f 45 f9	 cmovne	 edi, ecx

; 1506 :         signature = _MEMSIG_PX;
; 1507 :     ReleaseSRWLockShared(&px->pages_srwlock);

  0007c	48 8d 4d 60	 lea	 rcx, QWORD PTR [rbp+96]
  00080	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseSRWLockShared
  00086	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1508 : 
; 1509 :     if (signature == _MEMSIG_UNKNOWN && _PyMem_InRange(m))

  0008b	83 ff 04	 cmp	 edi, 4
  0008e	75 12		 jne	 SHORT $LN1@Px_MemoryS
  00090	48 8b ce	 mov	 rcx, rsi
  00093	e8 00 00 00 00	 call	 _PyMem_InRange
  00098	ba 08 00 00 00	 mov	 edx, 8
  0009d	85 c0		 test	 eax, eax
  0009f	0f 45 fa	 cmovne	 edi, edx
$LN1@Px_MemoryS:

; 1510 :         signature = _MEMSIG_PY;
; 1511 : 
; 1512 :     return signature;

  000a2	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000a7	8b c7		 mov	 eax, edi
  000a9	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 1513 : }

  000ae	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b2	5e		 pop	 rsi
  000b3	c3		 ret	 0
_Px_MemorySignature ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_GuardObj
;	COMDAT pdata
; File c:\src\pyparallel\include\pyparallel.h
pdata	SEGMENT
$pdata$_PyParallel_GuardObj DD imagerel $LN27
	DD	imagerel $LN27+134
	DD	imagerel $unwind$_PyParallel_GuardObj
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_PyParallel_GuardObj DD imagerel $LN27+134
	DD	imagerel $LN27+188
	DD	imagerel $chain$0$_PyParallel_GuardObj
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_PyParallel_GuardObj DD imagerel $LN27+188
	DD	imagerel $LN27+291
	DD	imagerel $chain$1$_PyParallel_GuardObj
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_PyParallel_GuardObj DD 021H
	DD	imagerel $LN27
	DD	imagerel $LN27+134
	DD	imagerel $unwind$_PyParallel_GuardObj
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_PyParallel_GuardObj DD 020521H
	DD	087405H
	DD	imagerel $LN27
	DD	imagerel $LN27+134
	DD	imagerel $unwind$_PyParallel_GuardObj
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_GuardObj DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT _PyParallel_GuardObj
_TEXT	SEGMENT
i$135363 = 32
s$ = 32
function$ = 64
filename$ = 72
lineno$ = 80
m$ = 88
flags$ = 96
_PyParallel_GuardObj PROC				; COMDAT

; 1634 : {

$LN27:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1635 :     unsigned long s, o;
; 1636 : 
; 1637 :     assert(_OBJTEST(flags));
; 1638 : 
; 1639 :     if (_PyParallel_Finalized)

  00006	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _PyParallel_Finalized, 0
  0000d	49 8b d9	 mov	 rbx, r9
  00010	74 6c		 je	 SHORT $LN14@PyParallel@13

; 1640 :         return (_PYTEST(flags) ? 1 : 0);

  00012	8b 54 24 60	 mov	 edx, DWORD PTR flags$[rsp]
  00016	8b c2		 mov	 eax, edx
  00018	8b ca		 mov	 ecx, edx
  0001a	d1 e8		 shr	 eax, 1
  0001c	25 55 55 55 55	 and	 eax, 1431655765		; 55555555H
  00021	2b c8		 sub	 ecx, eax
  00023	8b c1		 mov	 eax, ecx
  00025	81 e1 33 33 33
	33		 and	 ecx, 858993459		; 33333333H
  0002b	c1 e8 02	 shr	 eax, 2
  0002e	25 33 33 33 33	 and	 eax, 858993459		; 33333333H
  00033	03 c1		 add	 eax, ecx
  00035	8b c8		 mov	 ecx, eax
  00037	c1 e9 04	 shr	 ecx, 4
  0003a	03 c8		 add	 ecx, eax
  0003c	81 e1 0f 0f 0f
	0f		 and	 ecx, 252645135		; 0f0f0f0fH
  00042	8b c1		 mov	 eax, ecx
  00044	c1 e8 08	 shr	 eax, 8
  00047	03 c8		 add	 ecx, eax
  00049	8b c1		 mov	 eax, ecx
  0004b	c1 e8 10	 shr	 eax, 16
  0004e	03 c1		 add	 eax, ecx
  00050	33 c9		 xor	 ecx, ecx
  00052	a8 3f		 test	 al, 63			; 0000003fH
  00054	74 20		 je	 SHORT $LN17@PyParallel@13
  00056	48 0f bc d2	 bsf	 rdx, rdx
  0005a	89 4c 24 20	 mov	 DWORD PTR i$135363[rsp], ecx
  0005e	81 e2 01 00 00
	80		 and	 edx, -2147483647	; ffffffff80000001H
  00064	7d 07		 jge	 SHORT $LN25@PyParallel@13
  00066	ff ca		 dec	 edx
  00068	83 ca fe	 or	 edx, -2
  0006b	ff c2		 inc	 edx
$LN25@PyParallel@13:
  0006d	85 d2		 test	 edx, edx
  0006f	74 05		 je	 SHORT $LN17@PyParallel@13
  00071	b9 01 00 00 00	 mov	 ecx, 1
$LN17@PyParallel@13:
  00076	8b c1		 mov	 eax, ecx

; 1685 :     }
; 1686 : }

  00078	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0007c	5b		 pop	 rbx
  0007d	c3		 ret	 0
$LN14@PyParallel@13:

; 1641 : 
; 1642 :     if (m) {

  0007e	48 85 db	 test	 rbx, rbx
  00081	74 39		 je	 SHORT $LN26@PyParallel@13

; 1643 :         o = _Px_SafeObjectSignatureTest(m);

  00083	48 8b cb	 mov	 rcx, rbx
  00086	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  0008b	e8 00 00 00 00	 call	 _Px_SafeObjectSignatureTest

; 1644 :         s = _Px_MemorySignature(m);

  00090	48 8b cb	 mov	 rcx, rbx
  00093	8b f8		 mov	 edi, eax
  00095	e8 00 00 00 00	 call	 _Px_MemorySignature
  0009a	44 8b d8	 mov	 r11d, eax

; 1645 :         if (s & _MEMSIG_NOT_READY || (o > s))

  0009d	a8 01		 test	 al, 1
  0009f	75 04		 jne	 SHORT $LN11@PyParallel@13
  000a1	3b f8		 cmp	 edi, eax
  000a3	76 03		 jbe	 SHORT $LN12@PyParallel@13
$LN11@PyParallel@13:

; 1646 :             s = o;

  000a5	44 8b df	 mov	 r11d, edi
$LN12@PyParallel@13:
  000a8	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 1647 : 
; 1648 :         if (s & (_OBJSIG_UNKNOWN))

  000ad	41 f6 c3 04	 test	 r11b, 4
  000b1	b8 08 00 00 00	 mov	 eax, 8
  000b6	44 0f 45 d8	 cmovne	 r11d, eax
  000ba	eb 05		 jmp	 SHORT $LN10@PyParallel@13
$LN26@PyParallel@13:
  000bc	44 8b 5c 24 20	 mov	 r11d, DWORD PTR s$[rsp]
$LN10@PyParallel@13:

; 1649 :             s = _OBJSIG_PY;
; 1650 : 
; 1651 :         assert(s & (_OBJSIG_UNKNOWN | _OBJSIG_PX | _OBJSIG_PY));
; 1652 :     }
; 1653 : 
; 1654 :     if (flags & (_PXOBJ_TEST | _PY_ISPX_TEST)) {

  000c1	8b 44 24 60	 mov	 eax, DWORD PTR flags$[rsp]
  000c5	a8 14		 test	 al, 20
  000c7	74 34		 je	 SHORT $LN9@PyParallel@13

; 1655 : 
; 1656 :         if (!m)

  000c9	48 85 db	 test	 rbx, rbx

; 1657 :             return 0;

  000cc	74 4d		 je	 SHORT $LN5@PyParallel@13

; 1658 : 
; 1659 :         if (flags & _PY_ISPX_TEST) {

  000ce	a8 10		 test	 al, 16
  000d0	74 16		 je	 SHORT $LN19@PyParallel@13

; 1660 :             /* Special case for Py_ISPX(o); o must be a valid object. */
; 1661 :             assert(s & (_OBJSIG_PY | _OBJSIG_PX));
; 1662 :             return (Py_PXCTX ? 1 : ((s & _OBJSIG_PX) == _OBJSIG_PX) ? 1 : 0);

  000d2	e8 00 00 00 00	 call	 _Py_PXCTX
  000d7	85 c0		 test	 eax, eax
  000d9	74 0d		 je	 SHORT $LN19@PyParallel@13
  000db	b9 01 00 00 00	 mov	 ecx, 1
  000e0	8b c1		 mov	 eax, ecx

; 1685 :     }
; 1686 : }

  000e2	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000e6	5b		 pop	 rbx
  000e7	c3		 ret	 0
$LN19@PyParallel@13:

; 1660 :             /* Special case for Py_ISPX(o); o must be a valid object. */
; 1661 :             assert(s & (_OBJSIG_PY | _OBJSIG_PX));
; 1662 :             return (Py_PXCTX ? 1 : ((s & _OBJSIG_PX) == _OBJSIG_PX) ? 1 : 0);

  000e8	33 c9		 xor	 ecx, ecx
  000ea	41 80 e3 10	 and	 r11b, 16
  000ee	41 80 fb 10	 cmp	 r11b, 16
  000f2	0f 94 c1	 sete	 cl
  000f5	8b c1		 mov	 eax, ecx

; 1685 :     }
; 1686 : }

  000f7	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000fb	5b		 pop	 rbx
  000fc	c3		 ret	 0
$LN9@PyParallel@13:

; 1663 :         }
; 1664 : 
; 1665 :         return ((s & _OBJSIG_PX) == _OBJSIG_PX);
; 1666 : 
; 1667 :     } else if (flags & _PYOBJ_TEST) {

  000fd	a8 02		 test	 al, 2
  000ff	74 1a		 je	 SHORT $LN5@PyParallel@13

; 1668 : 
; 1669 :         if (!m)

  00101	48 85 db	 test	 rbx, rbx

; 1670 :             return 0;

  00104	74 15		 je	 SHORT $LN5@PyParallel@13

; 1671 : 
; 1672 :         return ((s & _OBJSIG_PY) == _OBJSIG_PY);

  00106	33 c9		 xor	 ecx, ecx
  00108	41 80 e3 08	 and	 r11b, 8
  0010c	41 80 fb 08	 cmp	 r11b, 8
  00110	0f 94 c1	 sete	 cl
  00113	8b c1		 mov	 eax, ecx

; 1685 :     }
; 1686 : }

  00115	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00119	5b		 pop	 rbx
  0011a	c3		 ret	 0
$LN5@PyParallel@13:

; 1673 : 
; 1674 :     } else {
; 1675 :         assert(m);
; 1676 : 
; 1677 :         assert(flags & (_PYOBJ_GUARD | _PXOBJ_GUARD));
; 1678 : 
; 1679 :         if (flags & _PYOBJ_GUARD)
; 1680 :             assert(s & _OBJSIG_PY);
; 1681 :         else
; 1682 :             assert(s & _OBJSIG_PX);
; 1683 : 
; 1684 :         return 0;

  0011b	33 c0		 xor	 eax, eax

; 1685 :     }
; 1686 : }

  0011d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00121	5b		 pop	 rbx
  00122	c3		 ret	 0
_PyParallel_GuardObj ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@CAEDKFG@?6couldn?8t?5find?5ptr?3?50x?$CFllx?6?$AA@ ; `string'
PUBLIC	_PyParallel_GuardMem
;	COMDAT pdata
; File c:\src\pyparallel\include\pyparallel.h
pdata	SEGMENT
$pdata$_PyParallel_GuardMem DD imagerel $LN32
	DD	imagerel $LN32+128
	DD	imagerel $unwind$_PyParallel_GuardMem
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_PyParallel_GuardMem DD imagerel $LN32+128
	DD	imagerel $LN32+285
	DD	imagerel $chain$0$_PyParallel_GuardMem
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_PyParallel_GuardMem DD imagerel $LN32+285
	DD	imagerel $LN32+301
	DD	imagerel $chain$2$_PyParallel_GuardMem
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$_PyParallel_GuardMem DD imagerel $LN32+301
	DD	imagerel $LN32+312
	DD	imagerel $chain$4$_PyParallel_GuardMem
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$_PyParallel_GuardMem DD imagerel $LN32+312
	DD	imagerel $LN32+375
	DD	imagerel $chain$5$_PyParallel_GuardMem
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$_PyParallel_GuardMem DD imagerel $LN32+375
	DD	imagerel $LN32+388
	DD	imagerel $chain$6$_PyParallel_GuardMem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$_PyParallel_GuardMem DD 021H
	DD	imagerel $LN32+301
	DD	imagerel $LN32+312
	DD	imagerel $chain$4$_PyParallel_GuardMem
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$_PyParallel_GuardMem DD 020521H
	DD	097405H
	DD	imagerel $LN32+301
	DD	imagerel $LN32+312
	DD	imagerel $chain$4$_PyParallel_GuardMem
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$_PyParallel_GuardMem DD 020021H
	DD	083400H
	DD	imagerel $LN32
	DD	imagerel $LN32+128
	DD	imagerel $unwind$_PyParallel_GuardMem
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_PyParallel_GuardMem DD 020021H
	DD	083400H
	DD	imagerel $LN32
	DD	imagerel $LN32+128
	DD	imagerel $unwind$_PyParallel_GuardMem
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_PyParallel_GuardMem DD 020521H
	DD	083405H
	DD	imagerel $LN32
	DD	imagerel $LN32+128
	DD	imagerel $unwind$_PyParallel_GuardMem
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_GuardMem DD 020601H
	DD	060025206H
xdata	ENDS
;	COMDAT ??_C@_0BM@CAEDKFG@?6couldn?8t?5find?5ptr?3?50x?$CFllx?6?$AA@
CONST	SEGMENT
??_C@_0BM@CAEDKFG@?6couldn?8t?5find?5ptr?3?50x?$CFllx?6?$AA@ DB 0aH, 'cou'
	DB	'ldn''t find ptr: 0x%llx', 0aH, 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
CONST	ENDS
;	COMDAT _PyParallel_GuardMem
_TEXT	SEGMENT
i$135402 = 32
function$ = 64
filename$ = 72
lineno$ = 80
m$ = 88
flags$ = 96
_PyParallel_GuardMem PROC				; COMDAT

; 1702 : {

$LN32:
  00000	40 56		 push	 rsi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1703 :     unsigned long s = 0;

  00006	33 d2		 xor	 edx, edx
  00008	49 8b f1	 mov	 rsi, r9

; 1704 :     unsigned long o;
; 1705 : 
; 1706 :     assert(_MEMTEST(flags));
; 1707 : 
; 1708 :     if (_PyParallel_Finalized)

  0000b	39 15 00 00 00
	00		 cmp	 DWORD PTR _PyParallel_Finalized, edx
  00011	74 6d		 je	 SHORT $LN17@PyParallel@14

; 1709 :         return (_PYTEST(flags) ? 1 : 0);

  00013	44 8b 44 24 60	 mov	 r8d, DWORD PTR flags$[rsp]
  00018	41 8b c0	 mov	 eax, r8d
  0001b	41 8b c8	 mov	 ecx, r8d
  0001e	d1 e8		 shr	 eax, 1
  00020	25 55 55 55 55	 and	 eax, 1431655765		; 55555555H
  00025	2b c8		 sub	 ecx, eax
  00027	8b c1		 mov	 eax, ecx
  00029	81 e1 33 33 33
	33		 and	 ecx, 858993459		; 33333333H
  0002f	c1 e8 02	 shr	 eax, 2
  00032	25 33 33 33 33	 and	 eax, 858993459		; 33333333H
  00037	03 c1		 add	 eax, ecx
  00039	8b c8		 mov	 ecx, eax
  0003b	c1 e9 04	 shr	 ecx, 4
  0003e	03 c8		 add	 ecx, eax
  00040	81 e1 0f 0f 0f
	0f		 and	 ecx, 252645135		; 0f0f0f0fH
  00046	8b c1		 mov	 eax, ecx
  00048	c1 e8 08	 shr	 eax, 8
  0004b	03 c8		 add	 ecx, eax
  0004d	8b c1		 mov	 eax, ecx
  0004f	c1 e8 10	 shr	 eax, 16
  00052	03 c1		 add	 eax, ecx
  00054	a8 3f		 test	 al, 63			; 0000003fH
  00056	74 20		 je	 SHORT $LN20@PyParallel@14
  00058	49 0f bc c8	 bsf	 rcx, r8
  0005c	89 54 24 20	 mov	 DWORD PTR i$135402[rsp], edx
  00060	81 e1 01 00 00
	80		 and	 ecx, -2147483647	; ffffffff80000001H
  00066	7d 07		 jge	 SHORT $LN30@PyParallel@14
  00068	ff c9		 dec	 ecx
  0006a	83 c9 fe	 or	 ecx, -2
  0006d	ff c1		 inc	 ecx
$LN30@PyParallel@14:
  0006f	85 c9		 test	 ecx, ecx
  00071	74 05		 je	 SHORT $LN20@PyParallel@14
  00073	ba 01 00 00 00	 mov	 edx, 1
$LN20@PyParallel@14:
  00078	8b c2		 mov	 eax, edx

; 1760 :     }
; 1761 : }

  0007a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0007e	5e		 pop	 rsi
  0007f	c3		 ret	 0
$LN17@PyParallel@14:
  00080	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx

; 1710 : 
; 1711 :     if (m) {

  00085	4d 85 c9	 test	 r9, r9
  00088	74 6f		 je	 SHORT $LN10@PyParallel@14

; 1712 :         if (_PyParallel_IsHeapOverrideActive()) {

  0008a	e8 00 00 00 00	 call	 _PyParallel_IsHeapOverrideActive
  0008f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  00095	84 c0		 test	 al, al
  00097	74 20		 je	 SHORT $LN28@PyParallel@14

; 1713 :             if (m == last_heap_override_malloc_addr)

  00099	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  000a2	41 b8 00 00 00
	00		 mov	 r8d, OFFSET FLAT:last_heap_override_malloc_addr
  000a8	48 8b 04 d0	 mov	 rax, QWORD PTR [rax+rdx*8]
  000ac	4d 3b 0c 00	 cmp	 r9, QWORD PTR [r8+rax]
  000b0	75 07		 jne	 SHORT $LN28@PyParallel@14

; 1714 :                 s = _MEMSIG_PX;

  000b2	ba 10 00 00 00	 mov	 edx, 16

; 1715 :         }
; 1716 :         if (!s) {

  000b7	eb 40		 jmp	 SHORT $LN10@PyParallel@14
$LN28@PyParallel@14:

; 1717 :             if (m == last_context_heap_malloc_addr)

  000b9	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  000c2	48 8b ca	 mov	 rcx, rdx
  000c5	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:last_context_heap_malloc_addr
  000ca	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  000ce	4c 3b 0c 02	 cmp	 r9, QWORD PTR [rdx+rax]
  000d2	75 07		 jne	 SHORT $LN29@PyParallel@14

; 1718 :                 s = _MEMSIG_PX;

  000d4	ba 10 00 00 00	 mov	 edx, 16

; 1719 :         }
; 1720 :         if (!s) {

  000d9	eb 1e		 jmp	 SHORT $LN10@PyParallel@14
$LN29@PyParallel@14:

; 1721 :             o = _Px_SafeObjectSignatureTest(m);

  000db	49 8b c9	 mov	 rcx, r9
  000de	e8 00 00 00 00	 call	 _Px_SafeObjectSignatureTest

; 1722 :             s = _Px_MemorySignature(m);

  000e3	48 8b ce	 mov	 rcx, rsi
  000e6	8b d8		 mov	 ebx, eax
  000e8	e8 00 00 00 00	 call	 _Px_MemorySignature
  000ed	8b d0		 mov	 edx, eax

; 1723 :             if (s & _MEMSIG_NOT_READY || (o > s))

  000ef	a8 01		 test	 al, 1
  000f1	75 04		 jne	 SHORT $LN9@PyParallel@14
  000f3	3b d8		 cmp	 ebx, eax
  000f5	76 02		 jbe	 SHORT $LN10@PyParallel@14
$LN9@PyParallel@14:

; 1724 :                 s = o;

  000f7	8b d3		 mov	 edx, ebx
$LN10@PyParallel@14:

; 1725 :         }
; 1726 :     }
; 1727 : 
; 1728 :     if (flags & (_PYMEM_TEST | _PXMEM_TEST)) {

  000f9	8b 44 24 60	 mov	 eax, DWORD PTR flags$[rsp]
  000fd	a9 80 01 00 00	 test	 eax, 384		; 00000180H
  00102	74 29		 je	 SHORT $LN8@PyParallel@14

; 1729 : 
; 1730 :         if (!m)

  00104	48 85 f6	 test	 rsi, rsi

; 1731 :             return 0;

  00107	74 6e		 je	 SHORT $LN2@PyParallel@14

; 1732 : 
; 1733 :         return (flags & _PYMEM_TEST ? s & _MEMSIG_PY : s & _MEMSIG_PX);

  00109	84 c0		 test	 al, al
  0010b	79 10		 jns	 SHORT $LN22@PyParallel@14
  0010d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00112	83 e2 08	 and	 edx, 8
  00115	8b c2		 mov	 eax, edx

; 1760 :     }
; 1761 : }

  00117	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0011b	5e		 pop	 rsi
  0011c	c3		 ret	 0
$LN22@PyParallel@14:
  0011d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 1732 : 
; 1733 :         return (flags & _PYMEM_TEST ? s & _MEMSIG_PY : s & _MEMSIG_PX);

  00122	83 e2 10	 and	 edx, 16
  00125	8b c2		 mov	 eax, edx

; 1760 :     }
; 1761 : }

  00127	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0012b	5e		 pop	 rsi
  0012c	c3		 ret	 0
$LN8@PyParallel@14:

; 1734 : 
; 1735 :     } else {
; 1736 :         assert(m);
; 1737 : 
; 1738 :         assert(flags & (_PYMEM_GUARD | _PXMEM_GUARD));
; 1739 : 
; 1740 :         if (flags & _PYMEM_GUARD) {

  0012d	0f ba e0 09	 bt	 eax, 9

; 1741 :             if (s & _MEMSIG_UNKNOWN) {
; 1742 :                 //printf("expected _MEMSIG_PY but got _MEMSIG_UNKNOWN\n");
; 1743 :                 return 0;

  00131	72 44		 jb	 SHORT $LN2@PyParallel@14

; 1744 :             }
; 1745 :             assert(s & _MEMSIG_PY);
; 1746 :         } else {
; 1747 :             if (!(s & _MEMSIG_PX)) {

  00133	f6 c2 10	 test	 dl, 16
  00136	75 3f		 jne	 SHORT $LN2@PyParallel@14

; 1748 :                 PxState *px = PXSTATE();

  00138	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  0013d	e8 00 00 00 00	 call	 PXSTATE

; 1749 :                 AcquireSRWLockShared(&px->pages_srwlock);

  00142	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  00146	48 8b d8	 mov	 rbx, rax
  00149	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AcquireSRWLockShared

; 1750 :                 printf("\ncouldn't find ptr: 0x%llx\n", m);

  0014f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@CAEDKFG@?6couldn?8t?5find?5ptr?3?50x?$CFllx?6?$AA@
  00156	48 8b d6	 mov	 rdx, rsi
  00159	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf

; 1751 :                 PxPages_Dump(px->pages);

  0015f	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00163	e8 00 00 00 00	 call	 PxPages_Dump

; 1752 :                 ReleaseSRWLockExclusive(&px->pages_srwlock);

  00168	48 8d 4b 60	 lea	 rcx, QWORD PTR [rbx+96]
  0016c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseSRWLockExclusive
  00172	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
$LN2@PyParallel@14:

; 1753 :             } else {
; 1754 :                 //printf("found ptr 0x%llx\n", m);
; 1755 :             }
; 1756 :             assert(s & _MEMSIG_PX);
; 1757 :         }
; 1758 : 
; 1759 :         return 0;

  00177	33 c0		 xor	 eax, eax
  00179	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 1760 :     }
; 1761 : }

  0017e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00182	5e		 pop	 rsi
  00183	c3		 ret	 0
_PyParallel_GuardMem ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_Guard
;	COMDAT pdata
; File c:\src\pyparallel\include\pyintrinsics.h
pdata	SEGMENT
$pdata$_PyParallel_Guard DD imagerel $LN7
	DD	imagerel $LN7+129
	DD	imagerel $unwind$_PyParallel_Guard
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_Guard DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT _PyParallel_Guard
_TEXT	SEGMENT
function$ = 64
filename$ = 72
lineno$ = 80
m$ = 88
flags$ = 96
_PyParallel_Guard PROC					; COMDAT

; 1769 : {

$LN7:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1770 :     assert(_Py_UINT32_BITS_SET(flags) == 1);
; 1771 : 
; 1772 :     if (_OBJTEST(flags))

  00006	44 8b 5c 24 60	 mov	 r11d, DWORD PTR flags$[rsp]
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	41 8b c3	 mov	 eax, r11d
  00011	45 8b d3	 mov	 r10d, r11d
  00014	d1 e8		 shr	 eax, 1
  00016	25 55 55 55 55	 and	 eax, 1431655765		; 55555555H
  0001b	44 2b d0	 sub	 r10d, eax
  0001e	41 8b c2	 mov	 eax, r10d
  00021	41 81 e2 33 33
	33 33		 and	 r10d, 858993459		; 33333333H
  00028	c1 e8 02	 shr	 eax, 2
  0002b	25 33 33 33 33	 and	 eax, 858993459		; 33333333H
  00030	41 03 c2	 add	 eax, r10d
  00033	8b c8		 mov	 ecx, eax
  00035	c1 e9 04	 shr	 ecx, 4
  00038	03 c8		 add	 ecx, eax
  0003a	81 e1 0f 0f 0f
	0f		 and	 ecx, 252645135		; 0f0f0f0fH
  00040	8b c1		 mov	 eax, ecx
  00042	c1 e8 08	 shr	 eax, 8
  00045	03 c8		 add	 ecx, eax
  00047	8b c1		 mov	 eax, ecx
  00049	c1 e8 10	 shr	 eax, 16
  0004c	03 c1		 add	 eax, ecx
  0004e	a8 3f		 test	 al, 63			; 0000003fH
  00050	74 1c		 je	 SHORT $LN2@PyParallel@15
  00052	41 8d 43 fe	 lea	 eax, DWORD PTR [r11-2]
  00056	83 f8 3e	 cmp	 eax, 62			; 0000003eH
  00059	77 13		 ja	 SHORT $LN2@PyParallel@15

; 1773 :         return _PyParallel_GuardObj(function, filename, lineno, m, flags);

  0005b	48 8b cb	 mov	 rcx, rbx
  0005e	44 89 5c 24 20	 mov	 DWORD PTR [rsp+32], r11d
  00063	e8 00 00 00 00	 call	 _PyParallel_GuardObj

; 1777 :     }
; 1778 : }

  00068	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0006c	5b		 pop	 rbx
  0006d	c3		 ret	 0
$LN2@PyParallel@15:

; 1774 :     else {
; 1775 :         assert(_MEMTEST(flags));
; 1776 :         return _PyParallel_GuardMem(function, filename, lineno, m, flags);

  0006e	48 8b cb	 mov	 rcx, rbx
  00071	44 89 5c 24 20	 mov	 DWORD PTR [rsp+32], r11d
  00076	e8 00 00 00 00	 call	 _PyParallel_GuardMem

; 1777 :     }
; 1778 : }

  0007b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0007f	5b		 pop	 rbx
  00080	c3		 ret	 0
_PyParallel_Guard ENDP
_TEXT	ENDS
PUBLIC	_Px_TEST
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Px_TEST DD imagerel $LN4
	DD	imagerel $LN4+62
	DD	imagerel $unwind$_Px_TEST
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Px_TEST DD 041c01H
	DD	06341cH
	DD	070023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _Px_TEST
_TEXT	SEGMENT
p$ = 48
_Px_TEST PROC						; COMDAT

; 1782 : {

$LN4:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b f9	 mov	 rdi, rcx

; 1783 :     unsigned long o, m, s;
; 1784 :     if (!p)

  00009	48 85 c9	 test	 rcx, rcx
  0000c	75 09		 jne	 SHORT $LN1@Px_TEST

; 1785 :         return _SIG_NULL;

  0000e	8d 41 02	 lea	 eax, QWORD PTR [rcx+2]

; 1791 : }

  00011	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00015	5f		 pop	 rdi
  00016	c3		 ret	 0
$LN1@Px_TEST:
  00017	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx

; 1786 : 
; 1787 :     o = _Px_SafeObjectSignatureTest(p);

  0001c	e8 00 00 00 00	 call	 _Px_SafeObjectSignatureTest

; 1788 :     m = _Px_MemorySignature(p);

  00021	48 8b cf	 mov	 rcx, rdi
  00024	8b d8		 mov	 ebx, eax
  00026	e8 00 00 00 00	 call	 _Px_MemorySignature

; 1789 :     s = Px_MAX(o, m);

  0002b	3b d8		 cmp	 ebx, eax
  0002d	0f 47 c3	 cmova	 eax, ebx
  00030	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1790 :     return (s & _SIG_PX);

  00035	83 e0 10	 and	 eax, 16

; 1791 : }

  00038	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003c	5f		 pop	 rdi
  0003d	c3		 ret	 0
_Px_TEST ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel_private.h
pdata	SEGMENT
$pdata$_PyTLSHeap_Init DD imagerel $LN16
	DD	imagerel $LN16+319
	DD	imagerel $unwind$_PyTLSHeap_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyTLSHeap_Init DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT _PyTLSHeap_Init
_TEXT	SEGMENT
n$ = 48
page_size$ = 56
_PyTLSHeap_Init PROC					; COMDAT

; 1879 : {

$LN16:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1880 :     TLS *t = &tls;

  0000f	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00018	4c 8b c1	 mov	 r8, rcx
  0001b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00021	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:tls
  00026	48 03 3c c8	 add	 rdi, QWORD PTR [rax+rcx*8]

; 1881 :     Heap *h;
; 1882 :     Stats *s = &(t->stats);
; 1883 :     size_t size;
; 1884 :     int flags;
; 1885 : 
; 1886 :     if (!page_size)

  0002a	85 d2		 test	 edx, edx
  0002c	b8 00 00 20 00	 mov	 eax, 2097152		; 00200000H
  00031	0f 44 d0	 cmove	 edx, eax

; 1887 :         page_size = Px_LARGE_PAGE_SIZE;
; 1888 : 
; 1889 :     if (n < _PyTLSHeap_DefaultSize)

  00034	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR _PyTLSHeap_DefaultSize
  0003b	4c 3b c0	 cmp	 r8, rax

; 1890 :         size = _PyTLSHeap_DefaultSize;
; 1891 :     else
; 1892 :         size = n;
; 1893 : 
; 1894 :     size = Px_PAGESIZE_ALIGN_UP(size, page_size);

  0003e	48 63 ca	 movsxd	 rcx, edx
  00041	4c 0f 42 c0	 cmovb	 r8, rax
  00045	48 8d 41 ff	 lea	 rax, QWORD PTR [rcx-1]
  00049	48 f7 d0	 not	 rax
  0004c	4a 8d 74 01 ff	 lea	 rsi, QWORD PTR [rcx+r8-1]
  00051	48 23 f0	 and	 rsi, rax

; 1895 : 
; 1896 :     assert((size % page_size) == 0);
; 1897 : 
; 1898 :     if (!t->h) {

  00054	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00057	48 85 c0	 test	 rax, rax
  0005a	75 0d		 jne	 SHORT $LN3@PyTLSHeap_@3

; 1899 :         /* First init. */
; 1900 :         h = &(t->heap);

  0005c	48 8d 5f 10	 lea	 rbx, QWORD PTR [rdi+16]

; 1901 :         h->id = 1;

  00060	c7 43 50 01 00
	00 00		 mov	 DWORD PTR [rbx+80], 1

; 1902 :     } else {

  00067	eb 0f		 jmp	 SHORT $LN2@PyTLSHeap_@3
$LN3@PyTLSHeap_@3:

; 1903 :         h = t->h->sle_next;

  00069	48 8b 58 08	 mov	 rbx, QWORD PTR [rax+8]

; 1904 :         h->sle_prev = t->h;

  0006d	48 89 03	 mov	 QWORD PTR [rbx], rax

; 1905 :         h->id = h->sle_prev->id + 1;

  00070	8b 40 50	 mov	 eax, DWORD PTR [rax+80]
  00073	ff c0		 inc	 eax
  00075	89 43 50	 mov	 DWORD PTR [rbx+80], eax
$LN2@PyTLSHeap_@3:

; 1906 :     }
; 1907 : 
; 1908 :     assert(h);
; 1909 : 
; 1910 :     h->page_size = page_size;

  00078	89 53 20	 mov	 DWORD PTR [rbx+32], edx

; 1911 :     h->pages = size / page_size;

  0007b	33 d2		 xor	 edx, edx
  0007d	48 8b c6	 mov	 rax, rsi
  00080	48 f7 f1	 div	 rcx

; 1912 : 
; 1913 :     h->size = size;

  00083	48 89 73 38	 mov	 QWORD PTR [rbx+56], rsi

; 1914 :     flags = HEAP_ZERO_MEMORY;
; 1915 :     h->base = h->next = HeapAlloc(t->handle, flags, h->size);

  00087	4c 8b c6	 mov	 r8, rsi
  0008a	48 89 43 28	 mov	 QWORD PTR [rbx+40], rax
  0008e	48 8b 8f c8 00
	00 00		 mov	 rcx, QWORD PTR [rdi+200]
  00095	ba 08 00 00 00	 mov	 edx, 8
  0009a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_HeapAlloc

; 1916 :     if (!h->base)
; 1917 :         return (int)PyErr_SetFromWindowsErr(0);

  000a0	33 c9		 xor	 ecx, ecx
  000a2	4c 8b d8	 mov	 r11, rax
  000a5	48 89 43 18	 mov	 QWORD PTR [rbx+24], rax
  000a9	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax
  000ad	48 85 c0	 test	 rax, rax
  000b0	75 14		 jne	 SHORT $LN1@PyTLSHeap_@3

; 1928 :     return 1;
; 1929 : }

  000b2	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000b7	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000bc	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c0	5f		 pop	 rdi
  000c1	e9 00 00 00 00	 jmp	 PyErr_SetFromWindowsErr
$LN1@PyTLSHeap_@3:

; 1918 :     h->next_alignment = Px_GET_ALIGNMENT(h->base);

  000c6	a8 01		 test	 al, 1
  000c8	75 12		 jne	 SHORT $LN9@PyTLSHeap_@3
  000ca	66 0f 1f 44 00
	00		 npad	 6
$LL10@PyTLSHeap_@3:
  000d0	ff c1		 inc	 ecx
  000d2	49 8b c3	 mov	 rax, r11
  000d5	48 d3 e8	 shr	 rax, cl
  000d8	a8 01		 test	 al, 1
  000da	74 f4		 je	 SHORT $LL10@PyTLSHeap_@3
$LN9@PyTLSHeap_@3:

; 1919 :     h->remaining = size;

  000dc	48 89 73 48	 mov	 QWORD PTR [rbx+72], rsi
  000e0	b8 01 00 00 00	 mov	 eax, 1

; 1920 :     s->remaining = size;
; 1921 :     s->size += size;
; 1922 :     s->heaps++;
; 1923 :     t->h = h;
; 1924 :     h->tls = t;
; 1925 :     h->sle_next = (Heap *)_PyTLSHeap_Malloc(sizeof(Heap), 0);

  000e5	33 d2		 xor	 edx, edx
  000e7	48 d3 e0	 shl	 rax, cl
  000ea	b9 b8 00 00 00	 mov	 ecx, 184		; 000000b8H
  000ef	48 89 43 30	 mov	 QWORD PTR [rbx+48], rax
  000f3	48 01 b7 78 01
	00 00		 add	 QWORD PTR [rdi+376], rsi
  000fa	48 ff 87 70 01
	00 00		 inc	 QWORD PTR [rdi+368]
  00101	48 89 b7 88 01
	00 00		 mov	 QWORD PTR [rdi+392], rsi
  00108	48 89 1f	 mov	 QWORD PTR [rdi], rbx
  0010b	48 89 7b 60	 mov	 QWORD PTR [rbx+96], rdi
  0010f	e8 00 00 00 00	 call	 _PyTLSHeap_Malloc

; 1926 :     assert(h->sle_next);
; 1927 :     _PxState_RegisterHeap(t->px, h, 0);

  00114	45 33 c0	 xor	 r8d, r8d
  00117	48 8b d3	 mov	 rdx, rbx
  0011a	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax
  0011e	48 8b 8f d8 00
	00 00		 mov	 rcx, QWORD PTR [rdi+216]
  00125	e8 00 00 00 00	 call	 _PxState_RegisterHeap

; 1928 :     return 1;
; 1929 : }

  0012a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0012f	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00134	b8 01 00 00 00	 mov	 eax, 1
  00139	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0013d	5f		 pop	 rdi
  0013e	c3		 ret	 0
_PyTLSHeap_Init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@LBBOHHAH@_PyHeap_Free?$AA@		; `string'
PUBLIC	_PyHeap_Free
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyHeap_Free DD imagerel $LN4
	DD	imagerel $LN4+107
	DD	imagerel $unwind$_PyHeap_Free
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyHeap_Free DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0N@LBBOHHAH@_PyHeap_Free?$AA@
CONST	SEGMENT
??_C@_0N@LBBOHHAH@_PyHeap_Free?$AA@ DB '_PyHeap_Free', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyHeap_Free
_TEXT	SEGMENT
c$ = 64
p$ = 72
_PyHeap_Free PROC					; COMDAT

; 2215 : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 2216 :     Heap  *h;
; 2217 :     Stats *s;
; 2218 : 
; 2219 :     if (Px_TLS_HEAP_ACTIVE)

  00006	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  0000d	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00016	48 8b d9	 mov	 rbx, rcx
  00019	4a 8b 04 c0	 mov	 rax, QWORD PTR [rax+r8*8]
  0001d	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:tls
  00022	83 bc 08 d0 00
	00 00 00	 cmp	 DWORD PTR [rax+rcx+208], 0
  0002a	7f 39		 jg	 SHORT $LN2@PyHeap_Fre

; 2220 :         return;
; 2221 : 
; 2222 :     Px_GUARD_MEM(p);

  0002c	4c 8b ca	 mov	 r9, rdx
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@LBBOHHAH@_PyHeap_Free?$AA@
  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0003d	41 b8 ae 08 00
	00		 mov	 r8d, 2222		; 000008aeH
  00043	c7 44 24 20 00
	04 00 00	 mov	 DWORD PTR [rsp+32], 1024 ; 00000400H
  0004b	e8 00 00 00 00	 call	 _PyParallel_Guard

; 2223 : 
; 2224 :     h = c->h;

  00050	4c 8b 9b d0 00
	00 00		 mov	 r11, QWORD PTR [rbx+208]

; 2225 :     s = &c->stats;
; 2226 : 
; 2227 :     h->frees++;

  00057	49 ff 83 90 00
	00 00		 inc	 QWORD PTR [r11+144]

; 2228 :     s->frees++;

  0005e	48 ff 83 68 01
	00 00		 inc	 QWORD PTR [rbx+360]
$LN2@PyHeap_Fre:

; 2229 : }

  00065	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00069	5b		 pop	 rbx
  0006a	c3		 ret	 0
_PyHeap_Free ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@NJLCLNDF@init_object?$AA@		; `string'
PUBLIC	init_object
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel_private.h
pdata	SEGMENT
$pdata$init_object DD imagerel $LN36
	DD	imagerel $LN36+981
	DD	imagerel $unwind$init_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$init_object DD 0d7301H
	DD	08f473H
	DD	09746eH
	DD	0a5469H
	DD	0103464H
	DD	0e00ca210H
	DD	0c008d00aH
	DD	06006H
xdata	ENDS
;	COMDAT ??_C@_0M@NJLCLNDF@init_object?$AA@
CONST	SEGMENT
??_C@_0M@NJLCLNDF@init_object?$AA@ DB 'init_object', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
CONST	ENDS
;	COMDAT init_object
_TEXT	SEGMENT
is_heap_override_active$1$ = 48
tv723 = 56
c$ = 128
is_varobj$1$ = 136
p$ = 136
tp$ = 144
nitems$ = 152
init_object PROC					; COMDAT

; 2254 : {

$LN36:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	56		 push	 rsi
  00006	41 54		 push	 r12
  00008	41 55		 push	 r13
  0000a	41 56		 push	 r14
  0000c	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  00010	4d 8b f0	 mov	 r14, r8
  00013	4c 8b ea	 mov	 r13, rdx
  00016	48 8b f1	 mov	 rsi, rcx

; 2255 :     /* Main use cases:
; 2256 :      *  1.  Redirect from PyObject_NEW/PyObject_NEW_VAR.  p will be NULL.
; 2257 :      *  2.  PyObject_MALLOC/PyObject_INIT combo (PyUnicode* does this).
; 2258 :      *      p will pass Px_GUARD_MEM(p) and everything will be null.  We
; 2259 :      *      need to allocate x & o manually.
; 2260 :      *  3.  Redirect from PyObject_GC_Resize.  p shouldn't be NULL, although
; 2261 :      *      it might not be a PX allocation -- we could be resizing a PY
; 2262 :      *      allocation.  That's fine, as our realloc doesn't actually free
; 2263 :      *      anything, so we're, in effect, just copying the existing object.
; 2264 :      */
; 2265 :     TLS      *t = &tls;
; 2266 :     PyObject *n;
; 2267 :     PxObject *x;
; 2268 :     Object   *o;
; 2269 :     Stats    *s;
; 2270 :     size_t    object_size;
; 2271 :     size_t    total_size;
; 2272 :     size_t    bytes_to_copy;
; 2273 :     int       init_type;
; 2274 :     int       is_varobj = -1;
; 2275 :     int       is_heap_override_active = _PyParallel_IsHeapOverrideActive();

  00019	e8 00 00 00 00	 call	 _PyParallel_IsHeapOverrideActive

; 2276 : 
; 2277 : #define _INIT_NEW       1
; 2278 : #define _INIT_INIT      2
; 2279 : #define _INIT_RESIZE    3
; 2280 : 
; 2281 :     s = (Px_TLS_HEAP_ACTIVE ? &t->stats : &c->stats);

  0001e	44 8b 15 00 00
	00 00		 mov	 r10d, DWORD PTR _tls_index
  00025	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:tls
  0002a	0f be c0	 movsx	 eax, al
  0002d	89 44 24 30	 mov	 DWORD PTR is_heap_override_active$1$[rsp], eax
  00031	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0003a	4a 8b 04 d0	 mov	 rax, QWORD PTR [rax+r10*8]
  0003e	48 89 44 24 38	 mov	 QWORD PTR tv723[rsp], rax
  00043	83 bc 08 d0 00
	00 00 00	 cmp	 DWORD PTR [rax+rcx+208], 0
  0004b	4c 8d a4 08 e0
	00 00 00	 lea	 r12, QWORD PTR [rax+rcx+224]
  00053	7f 07		 jg	 SHORT $LN24@init_objec
  00055	4c 8d a6 00 01
	00 00		 lea	 r12, QWORD PTR [rsi+256]
$LN24@init_objec:
  0005c	48 89 9c 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rbx
  00064	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp
  00069	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  0006e	4c 89 7c 24 40	 mov	 QWORD PTR [rsp+64], r15

; 2282 : 
; 2283 :     if (!p) {

  00073	4d 85 ed	 test	 r13, r13
  00076	0f 85 a2 00 00
	00		 jne	 $LN20@init_objec

; 2284 :         /* Case 1: PyObject_NEW/NEW_VAR (via (Object|VarObject)_New). */
; 2285 :         init_type = _INIT_NEW;
; 2286 :         assert(tp);
; 2287 : 
; 2288 :         object_size = _Px_VSZ(tp, nitems);

  0007c	49 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [r8+128]
  00083	49 8b 40 78	 mov	 rax, QWORD PTR [r8+120]
  00087	48 85 c9	 test	 rcx, rcx
  0008a	74 0d		 je	 SHORT $LN26@init_objec
  0008c	49 0f af c9	 imul	 rcx, r9
  00090	48 8d 44 01 07	 lea	 rax, QWORD PTR [rcx+rax+7]
  00095	48 83 e0 f8	 and	 rax, -8
$LN26@init_objec:
  00099	48 8d 78 07	 lea	 rdi, QWORD PTR [rax+7]

; 2289 :         total_size  = _Px_SZ(object_size);
; 2290 :         n = (PyObject *)_PyHeap_Malloc(c, total_size, 0, 0);

  0009d	45 33 c9	 xor	 r9d, r9d
  000a0	45 33 c0	 xor	 r8d, r8d
  000a3	48 83 e7 f8	 and	 rdi, -8
  000a7	48 8b ce	 mov	 rcx, rsi
  000aa	48 83 c7 07	 add	 rdi, 7
  000ae	48 83 e7 f8	 and	 rdi, -8
  000b2	48 8d 57 48	 lea	 rdx, QWORD PTR [rdi+72]
  000b6	48 83 e2 f8	 and	 rdx, -8
  000ba	e8 00 00 00 00	 call	 _PyHeap_Malloc
  000bf	48 8b d8	 mov	 rbx, rax

; 2291 :         if (!n)

  000c2	48 85 c0	 test	 rax, rax
  000c5	75 0a		 jne	 SHORT $LN19@init_objec
$LN35@init_objec:

; 2292 :             return PyErr_NoMemory();

  000c7	e8 00 00 00 00	 call	 PyErr_NoMemory
  000cc	e9 e1 02 00 00	 jmp	 $LN21@init_objec
$LN19@init_objec:

; 2293 :         x = _Px_X_PTR(n, object_size);

  000d1	4c 8d 7c 07 07	 lea	 r15, QWORD PTR [rdi+rax+7]

; 2294 :         o = _Px_O_PTR(n, object_size);

  000d6	48 8d 47 30	 lea	 rax, QWORD PTR [rdi+48]

; 2295 : 
; 2296 :         Py_TYPE(n) = tp;
; 2297 :         if (is_varobj = (tp->tp_itemsize > 0)) {

  000da	33 ed		 xor	 ebp, ebp
  000dc	48 83 e0 f8	 and	 rax, -8
  000e0	8b cd		 mov	 ecx, ebp
  000e2	49 83 e7 f8	 and	 r15, -8
  000e6	48 8d 7c 18 07	 lea	 rdi, QWORD PTR [rax+rbx+7]
  000eb	4c 89 73 58	 mov	 QWORD PTR [rbx+88], r14
  000ef	48 83 e7 f8	 and	 rdi, -8
  000f3	49 39 8e 80 00
	00 00		 cmp	 QWORD PTR [r14+128], rcx
  000fa	0f 9f c1	 setg	 cl
  000fd	85 c9		 test	 ecx, ecx
  000ff	0f 84 b1 00 00
	00		 je	 $LN11@init_objec

; 2298 :             s->varobjs++;
; 2299 :             Py_SIZE(n) = nitems;

  00105	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR nitems$[rsp]
  0010d	49 ff 84 24 b8
	00 00 00	 inc	 QWORD PTR [r12+184]
  00115	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax

; 2300 :         } else

  00119	e9 a7 01 00 00	 jmp	 $LN9@init_objec
$LN20@init_objec:

; 2301 :             s->objects++;
; 2302 : 
; 2303 :     } else {
; 2304 :         if (tp) {

  0011e	4d 85 c0	 test	 r8, r8
  00121	0f 84 9c 00 00
	00		 je	 $LN15@init_objec

; 2305 :             /* Case 2: PyObject_INIT/INIT_VAR called against manually
; 2306 :              * allocated memory (i.e. not allocated via PyObject_NEW). */
; 2307 :             init_type = _INIT_INIT;
; 2308 :             assert(tp);
; 2309 :             Px_GUARD_MEM(p);

  00127	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0012e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@NJLCLNDF@init_object?$AA@
  00135	4d 8b cd	 mov	 r9, r13
  00138	41 b8 05 09 00
	00		 mov	 r8d, 2309		; 00000905H
  0013e	c7 44 24 20 00
	04 00 00	 mov	 DWORD PTR [rsp+32], 1024 ; 00000400H
  00146	e8 00 00 00 00	 call	 _PyParallel_Guard

; 2310 : 
; 2311 :             /* Need to manually allocate x + o storage. */
; 2312 :             x = (PxObject *)_PyHeap_Malloc(c, _Px_SZ(0), 0, 0);

  0014b	45 33 c9	 xor	 r9d, r9d
  0014e	45 33 c0	 xor	 r8d, r8d
  00151	41 8d 51 48	 lea	 edx, QWORD PTR [r9+72]
  00155	48 8b ce	 mov	 rcx, rsi
  00158	e8 00 00 00 00	 call	 _PyHeap_Malloc
  0015d	4c 8b f8	 mov	 r15, rax

; 2313 :             if (!x)

  00160	48 85 c0	 test	 rax, rax

; 2314 :                 return PyErr_NoMemory();

  00163	0f 84 5e ff ff
	ff		 je	 $LN35@init_objec

; 2315 : 
; 2316 :             o = _Px_O_PTR(x, 0);
; 2317 :             n = p;
; 2318 : 
; 2319 :             Py_TYPE(n) = tp;
; 2320 : 
; 2321 :             if (is_varobj = (tp->tp_itemsize > 0))

  00169	33 ed		 xor	 ebp, ebp
  0016b	48 8d 78 37	 lea	 rdi, QWORD PTR [rax+55]
  0016f	4d 89 75 58	 mov	 QWORD PTR [r13+88], r14
  00173	8b cd		 mov	 ecx, ebp
  00175	48 83 e7 f8	 and	 rdi, -8
  00179	49 8b dd	 mov	 rbx, r13
  0017c	49 39 8e 80 00
	00 00		 cmp	 QWORD PTR [r14+128], rcx
  00183	0f 9f c1	 setg	 cl
  00186	85 c9		 test	 ecx, ecx
  00188	74 0c		 je	 SHORT $LN13@init_objec

; 2322 :                 Py_SIZE(n) = nitems;

  0018a	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR nitems$[rsp]
  00192	49 89 45 60	 mov	 QWORD PTR [r13+96], rax
$LN13@init_objec:

; 2323 : 
; 2324 :             if (!Px_ISMIMIC(n)) {

  00196	41 8b 45 20	 mov	 eax, DWORD PTR [r13+32]
  0019a	48 0f ba e0 09	 bt	 rax, 9
  0019f	0f 82 20 01 00
	00		 jb	 $LN9@init_objec

; 2325 :                 if (is_varobj)

  001a5	85 c9		 test	 ecx, ecx
  001a7	74 0d		 je	 SHORT $LN11@init_objec

; 2326 :                     s->varobjs++;

  001a9	49 ff 84 24 b8
	00 00 00	 inc	 QWORD PTR [r12+184]

; 2327 :                 else

  001b1	e9 0f 01 00 00	 jmp	 $LN9@init_objec
$LN11@init_objec:

; 2328 :                     s->objects++;

  001b6	49 ff 84 24 b0
	00 00 00	 inc	 QWORD PTR [r12+176]

; 2329 :             }
; 2330 : 
; 2331 :         } else {

  001be	e9 02 01 00 00	 jmp	 $LN9@init_objec
$LN15@init_objec:

; 2332 :             /* Case 3: PyObject_GC_Resize called.  Object to resize may or may
; 2333 :              * not be from a parallel context.  Doesn't matter either way as
; 2334 :              * we don't really realloc anything behind the scenes -- we just
; 2335 :              * malloc another, larger chunk from our heap and copy over the
; 2336 :              * previous data. */
; 2337 :             init_type = _INIT_RESIZE;
; 2338 :             assert(!tp);
; 2339 :             assert(Py_TYPE(p) != NULL);
; 2340 :             is_varobj = 1;
; 2341 : 
; 2342 :             object_size = _Px_VSZ(tp, nitems);

  001c3	48 8b 0c 25 80
	00 00 00	 mov	 rcx, QWORD PTR ds:128
  001cb	48 8b 04 25 78
	00 00 00	 mov	 rax, QWORD PTR ds:120
  001d3	c7 84 24 88 00
	00 00 01 00 00
	00		 mov	 DWORD PTR is_varobj$1$[rsp], 1
  001de	48 85 c9	 test	 rcx, rcx
  001e1	74 0d		 je	 SHORT $LN28@init_objec
  001e3	49 0f af c9	 imul	 rcx, r9
  001e7	48 8d 44 01 07	 lea	 rax, QWORD PTR [rcx+rax+7]
  001ec	48 83 e0 f8	 and	 rax, -8
$LN28@init_objec:
  001f0	48 8d 78 07	 lea	 rdi, QWORD PTR [rax+7]

; 2343 :             total_size  = _Px_SZ(object_size);
; 2344 :             n = (PyObject *)_PyHeap_Malloc(c, total_size, 0, 0);

  001f4	45 33 c9	 xor	 r9d, r9d
  001f7	45 33 c0	 xor	 r8d, r8d
  001fa	48 83 e7 f8	 and	 rdi, -8
  001fe	48 8b ce	 mov	 rcx, rsi
  00201	48 83 c7 07	 add	 rdi, 7
  00205	48 83 e7 f8	 and	 rdi, -8
  00209	48 8d 57 48	 lea	 rdx, QWORD PTR [rdi+72]
  0020d	48 83 e2 f8	 and	 rdx, -8
  00211	e8 00 00 00 00	 call	 _PyHeap_Malloc
  00216	48 8b d8	 mov	 rbx, rax

; 2345 :             if (!n)

  00219	48 85 c0	 test	 rax, rax

; 2346 :                 return PyErr_NoMemory();

  0021c	0f 84 a5 fe ff
	ff		 je	 $LN35@init_objec

; 2347 :             x = _Px_X_PTR(n, object_size);
; 2348 :             o = _Px_O_PTR(n, object_size);
; 2349 : 
; 2350 :             /* Just do a blanket copy of everything rather than trying to
; 2351 :              * isolate the underlying VarObject ob_items.  It doesn't matter
; 2352 :              * if we pick up old pointers and whatnot (i.e. old px/is_px refs)
; 2353 :              * as all that stuff is initialized in the next section. */
; 2354 :             bytes_to_copy = _PyObject_VAR_SIZE(tp, Py_SIZE(p));

  00222	49 8b 4d 60	 mov	 rcx, QWORD PTR [r13+96]
  00226	4c 8d 7c 07 07	 lea	 r15, QWORD PTR [rdi+rax+7]
  0022b	48 8d 47 30	 lea	 rax, QWORD PTR [rdi+48]
  0022f	48 83 e0 f8	 and	 rax, -8

; 2355 : 
; 2356 :             assert(bytes_to_copy < object_size);
; 2357 :             assert(Py_SIZE(p) < nitems);
; 2358 : 
; 2359 :             memcpy(n, p, bytes_to_copy);

  00233	49 8b d5	 mov	 rdx, r13
  00236	49 83 e7 f8	 and	 r15, -8
  0023a	48 0f af 0c 25
	80 00 00 00	 imul	 rcx, QWORD PTR ds:128
  00243	48 8d 7c 18 07	 lea	 rdi, QWORD PTR [rax+rbx+7]
  00248	48 8b 04 25 78
	00 00 00	 mov	 rax, QWORD PTR ds:120
  00250	4c 8d 44 01 07	 lea	 r8, QWORD PTR [rcx+rax+7]
  00255	48 8b cb	 mov	 rcx, rbx
  00258	48 83 e7 f8	 and	 rdi, -8
  0025c	49 83 e0 f8	 and	 r8, -8
  00260	e8 00 00 00 00	 call	 memcpy

; 2360 : 
; 2361 :             Py_TYPE(n) = tp;
; 2362 :             Py_SIZE(n) = nitems;

  00265	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR nitems$[rsp]

; 2363 : 
; 2364 :             if (Py_PXOBJ(p)) {

  0026d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00274	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@NJLCLNDF@init_object?$AA@
  0027b	33 ed		 xor	 ebp, ebp
  0027d	4d 8b cd	 mov	 r9, r13
  00280	41 b8 3c 09 00
	00		 mov	 r8d, 2364		; 0000093cH
  00286	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax
  0028a	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00292	48 89 6b 58	 mov	 QWORD PTR [rbx+88], rbp
  00296	e8 00 00 00 00	 call	 _PyParallel_Guard
  0029b	85 c0		 test	 eax, eax
  0029d	74 0c		 je	 SHORT $LN7@init_objec

; 2365 :                 /* XXX do we really need to do this?  (Original line of
; 2366 :                  * thinking was that we might need to treat the object
; 2367 :                  * differently down the track (i.e. during cleanup) if
; 2368 :                  * it was resized.) */
; 2369 :                 Py_ASPX(p)->resized_to = n;

  0029f	49 8b 45 08	 mov	 rax, QWORD PTR [r13+8]
  002a3	48 89 58 10	 mov	 QWORD PTR [rax+16], rbx

; 2370 :                 x->resized_from = p;

  002a7	4d 89 6f 18	 mov	 QWORD PTR [r15+24], r13
$LN7@init_objec:

; 2371 :             }
; 2372 : 
; 2373 :             c->h->resizes++;

  002ab	48 8b 86 d0 00
	00 00		 mov	 rax, QWORD PTR [rsi+208]
  002b2	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR is_varobj$1$[rsp]
  002b9	48 ff 80 88 00
	00 00		 inc	 QWORD PTR [rax+136]

; 2374 :             s->resizes++;

  002c0	49 ff 44 24 60	 inc	 QWORD PTR [r12+96]
$LN9@init_objec:

; 2375 :         }
; 2376 :     }
; 2377 :     Py_REFCNT(n) = 1;
; 2378 : 
; 2379 :     assert(tp);
; 2380 :     assert(Py_TYPE(n) == tp);
; 2381 :     assert(is_varobj == 0 || is_varobj == 1);
; 2382 : 
; 2383 :     Py_EVENT(n) = NULL;
; 2384 :     Py_PXFLAGS(n) |= Py_PXFLAGS_ISPX;

  002c5	48 83 4b 20 02	 or	 QWORD PTR [rbx+32], 2
  002ca	48 c7 43 50 01
	00 00 00	 mov	 QWORD PTR [rbx+80], 1
  002d2	48 89 6b 30	 mov	 QWORD PTR [rbx+48], rbp

; 2385 :     Py_ORIG_TYPE(n) = NULL;

  002d6	48 89 6b 38	 mov	 QWORD PTR [rbx+56], rbp

; 2386 : 
; 2387 :     if (is_varobj)
; 2388 :         assert(Py_SIZE(n) == nitems);
; 2389 : 
; 2390 :     n->px = x;

  002da	4c 89 7b 08	 mov	 QWORD PTR [rbx+8], r15

; 2391 :     n->is_px = _Py_IS_PARALLEL;
; 2392 :     n->srw_lock = NULL;

  002de	48 89 6b 28	 mov	 QWORD PTR [rbx+40], rbp
  002e2	48 b8 ad de 32
	54 ef be 76 98	 mov	 rax, -7460565797573566803 ; 9876beef5432deadH
  002ec	48 89 03	 mov	 QWORD PTR [rbx], rax

; 2393 : 
; 2394 :     x->ctx = c;

  002ef	49 89 37	 mov	 QWORD PTR [r15], rsi

; 2395 :     x->signature = _PxObjectSignature;

  002f2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PxObjectSignature
  002f9	49 89 47 28	 mov	 QWORD PTR [r15+40], rax

; 2396 : 
; 2397 :     if (Px_ISMIMIC(n))

  002fd	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00301	48 0f ba e0 09	 bt	 rax, 9
  00306	0f 82 a3 00 00
	00		 jb	 $end$127869

; 2398 :         goto end;
; 2399 : 
; 2400 :     if (Px_TLS_HEAP_ACTIVE)

  0030c	48 8b 54 24 38	 mov	 rdx, QWORD PTR tv723[rsp]
  00311	41 b8 00 00 00
	00		 mov	 r8d, OFFSET FLAT:tls
  00317	42 83 bc 02 d0
	00 00 00 00	 cmp	 DWORD PTR [rdx+r8+208], 0
  00320	0f 8f 89 00 00
	00		 jg	 $end$127869

; 2401 :         goto end;
; 2402 : 
; 2403 :     if (is_heap_override_active) {

  00326	83 7c 24 30 00	 cmp	 DWORD PTR is_heap_override_active$1$[rsp], 0
  0032b	74 0b		 je	 SHORT $LN3@init_objec

; 2404 :         Py_PXFLAGS(n) |= Py_PXFLAGS_CLONED;

  0032d	48 0f ba e8 07	 bts	 rax, 7
  00332	48 89 43 20	 mov	 QWORD PTR [rbx+32], rax

; 2405 :         goto end;

  00336	eb 77		 jmp	 SHORT $end$127869
$LN3@init_objec:

; 2406 :     }
; 2407 : 
; 2408 :     o->op = n;
; 2409 :     append_object((is_varobj ? &c->varobjs : &c->objects), o);

  00338	85 c9		 test	 ecx, ecx
  0033a	48 89 5f 10	 mov	 QWORD PTR [rdi+16], rbx
  0033e	48 8d 8e 70 33
	00 00		 lea	 rcx, QWORD PTR [rsi+13168]
  00345	75 07		 jne	 SHORT $LN30@init_objec
  00347	48 8d 8e 60 33
	00 00		 lea	 rcx, QWORD PTR [rsi+13152]
$LN30@init_objec:
  0034e	48 83 39 00	 cmp	 QWORD PTR [rcx], 0
  00352	75 0c		 jne	 SHORT $LN32@init_objec
  00354	48 89 39	 mov	 QWORD PTR [rcx], rdi
  00357	48 89 79 08	 mov	 QWORD PTR [rcx+8], rdi
  0035b	48 89 2f	 mov	 QWORD PTR [rdi], rbp
  0035e	eb 0f		 jmp	 SHORT $LN31@init_objec
$LN32@init_objec:
  00360	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00364	48 89 78 08	 mov	 QWORD PTR [rax+8], rdi
  00368	48 89 07	 mov	 QWORD PTR [rdi], rax
  0036b	48 89 79 08	 mov	 QWORD PTR [rcx+8], rdi
$LN31@init_objec:
  0036f	48 89 6f 08	 mov	 QWORD PTR [rdi+8], rbp

; 2410 : 
; 2411 :     if (!c->ob_first) {

  00373	48 83 be 18 33
	00 00 00	 cmp	 QWORD PTR [rsi+13080], 0
  0037b	75 18		 jne	 SHORT $LN2@init_objec

; 2412 :         c->ob_first = n;

  0037d	48 89 9e 18 33
	00 00		 mov	 QWORD PTR [rsi+13080], rbx

; 2413 :         c->ob_last  = n;

  00384	48 89 9e 20 33
	00 00		 mov	 QWORD PTR [rsi+13088], rbx

; 2414 :         n->_ob_next = NULL;

  0038b	48 89 6b 40	 mov	 QWORD PTR [rbx+64], rbp

; 2415 :         n->_ob_prev = NULL;

  0038f	48 89 6b 48	 mov	 QWORD PTR [rbx+72], rbp

; 2416 :     } else {

  00393	eb 1a		 jmp	 SHORT $end$127869
$LN2@init_objec:

; 2417 :         PyObject *last;
; 2418 :         assert(!c->ob_first->_ob_prev);
; 2419 :         assert(!c->ob_last->_ob_next);
; 2420 :         last = c->ob_last;

  00395	48 8b 86 20 33
	00 00		 mov	 rax, QWORD PTR [rsi+13088]

; 2421 :         last->_ob_next = n;

  0039c	48 89 58 40	 mov	 QWORD PTR [rax+64], rbx

; 2422 :         n->_ob_prev = last;

  003a0	48 89 43 48	 mov	 QWORD PTR [rbx+72], rax

; 2423 :         n->_ob_next = NULL;

  003a4	48 89 6b 40	 mov	 QWORD PTR [rbx+64], rbp

; 2424 :         c->ob_last = n;

  003a8	48 89 9e 20 33
	00 00		 mov	 QWORD PTR [rsi+13088], rbx
$end$127869:

; 2425 :     }
; 2426 : 
; 2427 : end:
; 2428 :     return n;

  003af	48 8b c3	 mov	 rax, rbx
$LN21@init_objec:
  003b2	4c 8b 7c 24 40	 mov	 r15, QWORD PTR [rsp+64]
  003b7	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  003bc	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  003c1	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR [rsp+128]

; 2429 : }

  003c9	48 83 c4 58	 add	 rsp, 88			; 00000058H
  003cd	41 5e		 pop	 r14
  003cf	41 5d		 pop	 r13
  003d1	41 5c		 pop	 r12
  003d3	5e		 pop	 rsi
  003d4	c3		 ret	 0
init_object ENDP
_TEXT	ENDS
PUBLIC	Object_Init
; Function compile flags: /Ogtpy
;	COMDAT Object_Init
_TEXT	SEGMENT
op$ = 8
tp$ = 16
c$ = 24
Object_Init PROC					; COMDAT

; 2434 : {

  00000	49 8b c0	 mov	 rax, r8

; 2435 :     assert(tp->tp_itemsize == 0);
; 2436 :     return init_object(c, op, tp, 0);

  00003	4c 8b c2	 mov	 r8, rdx
  00006	48 8b d1	 mov	 rdx, rcx
  00009	48 8b c8	 mov	 rcx, rax
  0000c	45 33 c9	 xor	 r9d, r9d

; 2437 : }

  0000f	e9 00 00 00 00	 jmp	 init_object
Object_Init ENDP
_TEXT	ENDS
PUBLIC	Object_New
; Function compile flags: /Ogtpy
;	COMDAT Object_New
_TEXT	SEGMENT
tp$ = 8
c$ = 16
Object_New PROC						; COMDAT

; 2442 : {

  00000	48 8b c2	 mov	 rax, rdx

; 2443 :     return init_object(c, NULL, tp, 0);

  00003	4c 8b c1	 mov	 r8, rcx
  00006	45 33 c9	 xor	 r9d, r9d
  00009	48 8b c8	 mov	 rcx, rax
  0000c	33 d2		 xor	 edx, edx

; 2444 : }

  0000e	e9 00 00 00 00	 jmp	 init_object
Object_New ENDP
_TEXT	ENDS
PUBLIC	VarObject_Init
; Function compile flags: /Ogtpy
;	COMDAT VarObject_Init
_TEXT	SEGMENT
v$ = 8
tp$ = 16
nitems$ = 24
c$ = 32
VarObject_Init PROC					; COMDAT

; 2449 : {

  00000	49 8b c1	 mov	 rax, r9

; 2450 :     assert(tp->tp_itemsize > 0);
; 2451 :     return (PyVarObject *)init_object(c, (PyObject *)v, tp, nitems);

  00003	4d 8b c8	 mov	 r9, r8
  00006	4c 8b c2	 mov	 r8, rdx
  00009	48 8b d1	 mov	 rdx, rcx
  0000c	48 8b c8	 mov	 rcx, rax

; 2452 : }

  0000f	e9 00 00 00 00	 jmp	 init_object
VarObject_Init ENDP
_TEXT	ENDS
PUBLIC	VarObject_New
; Function compile flags: /Ogtpy
;	COMDAT VarObject_New
_TEXT	SEGMENT
tp$ = 8
nitems$ = 16
c$ = 24
VarObject_New PROC					; COMDAT

; 2457 : {

  00000	49 8b c0	 mov	 rax, r8

; 2458 :     return (PyVarObject *)init_object(c, NULL, tp, nitems);

  00003	4c 8b ca	 mov	 r9, rdx
  00006	4c 8b c1	 mov	 r8, rcx
  00009	48 8b c8	 mov	 rcx, rax
  0000c	33 d2		 xor	 edx, edx

; 2459 : }

  0000e	e9 00 00 00 00	 jmp	 init_object
VarObject_New ENDP
_TEXT	ENDS
PUBLIC	VarObject_Resize
; Function compile flags: /Ogtpy
;	COMDAT VarObject_Resize
_TEXT	SEGMENT
v$ = 8
nitems$ = 16
c$ = 24
VarObject_Resize PROC					; COMDAT

; 2463 : {

  00000	49 8b c0	 mov	 rax, r8

; 2464 :     return (PyVarObject *)init_object(c, v, NULL, nitems);

  00003	4c 8b ca	 mov	 r9, rdx
  00006	48 8b d1	 mov	 rdx, rcx
  00009	48 8b c8	 mov	 rcx, rax
  0000c	45 33 c0	 xor	 r8d, r8d

; 2465 : }

  0000f	e9 00 00 00 00	 jmp	 init_object
VarObject_Resize ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@FEDHFCHM@_PxObject_Free?$AA@		; `string'
PUBLIC	_PxObject_Free
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PxObject_Free DD imagerel $LN5
	DD	imagerel $LN5+95
	DD	imagerel $unwind$_PxObject_Free
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PxObject_Free DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0P@FEDHFCHM@_PxObject_Free?$AA@
CONST	SEGMENT
??_C@_0P@FEDHFCHM@_PxObject_Free?$AA@ DB '_PxObject_Free', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PxObject_Free
_TEXT	SEGMENT
p$ = 48
_PxObject_Free PROC					; COMDAT

; 2523 : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 2524 :     Px_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 1d		 jne	 SHORT $LN2@PxObject_F
  00012	44 8d 48 01	 lea	 r9d, QWORD PTR [rax+1]
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@FEDHFCHM@_PxObject_Free?$AA@
  00024	41 b8 dc 09 00
	00		 mov	 r8d, 2524		; 000009dcH
  0002a	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN2@PxObject_F:

; 2525 :     if (!p)

  0002f	48 85 db	 test	 rbx, rbx
  00032	74 25		 je	 SHORT $LN3@PxObject_F

; 2526 :         return;
; 2527 :     _PyHeap_Free(ctx, p);

  00034	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0003d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00043	41 b8 00 00 00
	00		 mov	 r8d, OFFSET FLAT:ctx
  00049	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  0004d	48 8b d3	 mov	 rdx, rbx
  00050	4a 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+r8]
  00054	e8 00 00 00 00	 call	 _PyHeap_Free
$LN3@PxObject_F:

; 2528 : }

  00059	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005d	5b		 pop	 rbx
  0005e	c3		 ret	 0
_PxObject_Free ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_CreatedNewThreadState
EXTRN	PxList_FreeListHead:PROC
EXTRN	__imp_CreateEventW:PROC
EXTRN	PxList_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_CreatedNewThreadState DD imagerel $LN16
	DD	imagerel $LN16+462
	DD	imagerel $unwind$_PyParallel_CreatedNewThreadState
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_CreatedNewThreadState DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyParallel_CreatedNewThreadState
_TEXT	SEGMENT
tstate$ = 48
_PyParallel_CreatedNewThreadState PROC			; COMDAT

; 2705 : {

$LN16:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2706 :     PxState *px;
; 2707 : 
; 2708 :     TSTATE = tstate;

  0000a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  00010	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00019	48 8b f9	 mov	 rdi, rcx
  0001c	48 8b 04 d0	 mov	 rax, QWORD PTR [rax+rdx*8]
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:TSTATE
  00025	48 89 3c 01	 mov	 QWORD PTR [rcx+rax], rdi

; 2709 : 
; 2710 :     px = (PxState *)malloc(sizeof(PxState));

  00029	b9 e8 01 00 00	 mov	 ecx, 488		; 000001e8H
  0002e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00034	48 8b d8	 mov	 rbx, rax

; 2711 :     if (!px)

  00037	48 85 c0	 test	 rax, rax
  0003a	75 0f		 jne	 SHORT $LN12@PyParallel@16

; 2804 : }

  0003c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00041	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00045	5f		 pop	 rdi
  00046	e9 00 00 00 00	 jmp	 PyErr_NoMemory
$LN12@PyParallel@16:

; 2712 :         return PyErr_NoMemory();
; 2713 : 
; 2714 :     memset((void *)px, 0, sizeof(PxState));

  0004b	33 d2		 xor	 edx, edx
  0004d	41 b8 e8 01 00
	00		 mov	 r8d, 488		; 000001e8H
  00053	48 8b c8	 mov	 rcx, rax
  00056	e8 00 00 00 00	 call	 memset

; 2715 : 
; 2716 :     px->errors = PxList_New();

  0005b	e8 00 00 00 00	 call	 PxList_New
  00060	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax

; 2717 :     if (!px->errors)

  00064	48 85 c0	 test	 rax, rax
  00067	0f 84 f9 00 00
	00		 je	 $free_px$128067

; 2718 :         goto free_px;
; 2719 : 
; 2720 :     px->completed_callbacks = PxList_New();

  0006d	e8 00 00 00 00	 call	 PxList_New
  00072	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax

; 2721 :     if (!px->completed_callbacks)

  00076	48 85 c0	 test	 rax, rax
  00079	0f 84 de 00 00
	00		 je	 $free_errors$128069

; 2722 :         goto free_errors;
; 2723 : 
; 2724 :     px->completed_errbacks = PxList_New();

  0007f	e8 00 00 00 00	 call	 PxList_New
  00084	48 89 43 18	 mov	 QWORD PTR [rbx+24], rax

; 2725 :     if (!px->completed_errbacks)

  00088	48 85 c0	 test	 rax, rax
  0008b	0f 84 c3 00 00
	00		 je	 $free_completed_callbacks$128071

; 2726 :         goto free_completed_callbacks;
; 2727 : 
; 2728 :     px->incoming = PxList_New();

  00091	e8 00 00 00 00	 call	 PxList_New
  00096	48 89 43 20	 mov	 QWORD PTR [rbx+32], rax

; 2729 :     if (!px->incoming)

  0009a	48 85 c0	 test	 rax, rax
  0009d	0f 84 a8 00 00
	00		 je	 $free_completed_errbacks$128073

; 2730 :         goto free_completed_errbacks;
; 2731 : 
; 2732 :     px->finished = PxList_New();

  000a3	e8 00 00 00 00	 call	 PxList_New
  000a8	48 89 43 28	 mov	 QWORD PTR [rbx+40], rax

; 2733 :     if (!px->finished)

  000ac	48 85 c0	 test	 rax, rax
  000af	0f 84 8d 00 00
	00		 je	 $free_incoming$128075

; 2734 :         goto free_incoming;
; 2735 : 
; 2736 :     px->finished_sockets = PxList_New();

  000b5	e8 00 00 00 00	 call	 PxList_New
  000ba	48 89 43 30	 mov	 QWORD PTR [rbx+48], rax

; 2737 :     if (!px->finished_sockets)

  000be	48 85 c0	 test	 rax, rax
  000c1	74 76		 je	 SHORT $free_finished$128077

; 2738 :         goto free_finished;
; 2739 : 
; 2740 :     px->io_free = PxList_New();

  000c3	e8 00 00 00 00	 call	 PxList_New
  000c8	48 89 43 48	 mov	 QWORD PTR [rbx+72], rax

; 2741 :     if (!px->io_free)

  000cc	48 85 c0	 test	 rax, rax
  000cf	74 5f		 je	 SHORT $free_finished_sockets$128079

; 2742 :         goto free_finished_sockets;
; 2743 : 
; 2744 :     px->work_ready = PxList_New();

  000d1	e8 00 00 00 00	 call	 PxList_New
  000d6	48 89 43 38	 mov	 QWORD PTR [rbx+56], rax

; 2745 :     if (!px->work_ready)

  000da	48 85 c0	 test	 rax, rax
  000dd	74 48		 je	 SHORT $free_io_free$128081

; 2746 :         goto free_io_free;
; 2747 : 
; 2748 :     px->io_free_wakeup = CreateEvent(NULL, FALSE, FALSE, NULL);

  000df	45 33 c9	 xor	 r9d, r9d
  000e2	45 33 c0	 xor	 r8d, r8d
  000e5	33 d2		 xor	 edx, edx
  000e7	33 c9		 xor	 ecx, ecx
  000e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateEventW
  000ef	48 89 43 50	 mov	 QWORD PTR [rbx+80], rax

; 2749 :     if (!px->io_free_wakeup)

  000f3	48 85 c0	 test	 rax, rax
  000f6	74 26		 je	 SHORT $free_work_ready$128085

; 2750 :         goto free_work_ready;
; 2751 : 
; 2752 :     px->wakeup = CreateEvent(NULL, FALSE, FALSE, NULL);

  000f8	45 33 c9	 xor	 r9d, r9d
  000fb	45 33 c0	 xor	 r8d, r8d
  000fe	33 d2		 xor	 edx, edx
  00100	33 c9		 xor	 ecx, ecx
  00102	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateEventW
  00108	48 89 83 a0 00
	00 00		 mov	 QWORD PTR [rbx+160], rax

; 2753 :     if (!px->wakeup)

  0010f	48 85 c0	 test	 rax, rax
  00112	75 71		 jne	 SHORT $LN2@PyParallel@16

; 2765 : 
; 2766 :     goto done;
; 2767 : 
; 2768 : free_io_wakeup:
; 2769 :     CloseHandle(px->io_free_wakeup);

  00114	48 8b 4b 50	 mov	 rcx, QWORD PTR [rbx+80]
$free_io_wakeup$128089:
  00118	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle
$free_work_ready$128085:

; 2770 : 
; 2771 : free_work_ready:
; 2772 :     PxList_FreeListHead(px->work_ready);

  0011e	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  00122	e8 00 00 00 00	 call	 PxList_FreeListHead
$free_io_free$128081:

; 2773 : 
; 2774 : free_io_free:
; 2775 :     PxList_FreeListHead(px->io_free);

  00127	48 8b 4b 48	 mov	 rcx, QWORD PTR [rbx+72]
  0012b	e8 00 00 00 00	 call	 PxList_FreeListHead
$free_finished_sockets$128079:

; 2776 : 
; 2777 : free_finished_sockets:
; 2778 :     PxList_FreeListHead(px->finished_sockets);

  00130	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  00134	e8 00 00 00 00	 call	 PxList_FreeListHead
$free_finished$128077:

; 2779 : 
; 2780 : free_finished:
; 2781 :     PxList_FreeListHead(px->finished);

  00139	48 8b 4b 28	 mov	 rcx, QWORD PTR [rbx+40]
  0013d	e8 00 00 00 00	 call	 PxList_FreeListHead
$free_incoming$128075:

; 2782 : 
; 2783 : free_incoming:
; 2784 :     PxList_FreeListHead(px->incoming);

  00142	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00146	e8 00 00 00 00	 call	 PxList_FreeListHead
$free_completed_errbacks$128073:

; 2785 : 
; 2786 : free_completed_errbacks:
; 2787 :     PxList_FreeListHead(px->completed_errbacks);

  0014b	48 8b 4b 18	 mov	 rcx, QWORD PTR [rbx+24]
  0014f	e8 00 00 00 00	 call	 PxList_FreeListHead
$free_completed_callbacks$128071:

; 2788 : 
; 2789 : free_completed_callbacks:
; 2790 :     PxList_FreeListHead(px->completed_callbacks);

  00154	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00158	e8 00 00 00 00	 call	 PxList_FreeListHead
$free_errors$128069:

; 2791 : 
; 2792 : free_errors:
; 2793 :     PxList_FreeListHead(px->errors);

  0015d	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  00161	e8 00 00 00 00	 call	 PxList_FreeListHead
$free_px$128067:

; 2794 : 
; 2795 : free_px:
; 2796 :     free(px);

  00166	48 8b cb	 mov	 rcx, rbx
  00169	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 2797 :     px = NULL;
; 2798 : 
; 2799 : done:
; 2800 :     if (!px)
; 2801 :         PyErr_SetFromWindowsErr(0);

  0016f	33 c9		 xor	 ecx, ecx
  00171	33 db		 xor	 ebx, ebx
  00173	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 2802 : 
; 2803 :     return px;

  00178	8b c3		 mov	 eax, ebx

; 2804 : }

  0017a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0017f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00183	5f		 pop	 rdi
  00184	c3		 ret	 0
$LN2@PyParallel@16:

; 2754 :         goto free_io_wakeup;
; 2755 : 
; 2756 :     _PxState_InitPxPages(px);

  00185	48 8b cb	 mov	 rcx, rbx
  00188	e8 00 00 00 00	 call	 _PxState_InitPxPages

; 2757 : 
; 2758 :     InitializeCriticalSectionAndSpinCount(&(px->cs), 12);

  0018d	48 8d 8b a8 00
	00 00		 lea	 rcx, QWORD PTR [rbx+168]
  00194	ba 0c 00 00 00	 mov	 edx, 12
  00199	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeCriticalSectionAndSpinCount

; 2759 : 
; 2760 :     tstate->px = px;

  0019f	48 89 9f a0 00
	00 00		 mov	 QWORD PTR [rdi+160], rbx

; 2761 :     px->tstate = tstate;
; 2762 : 
; 2763 :     tstate->is_parallel_thread = 0;
; 2764 :     px->ctx_ttl = 1;

  001a6	b8 01 00 00 00	 mov	 eax, 1
  001ab	48 89 7b 70	 mov	 QWORD PTR [rbx+112], rdi
  001af	c7 87 a8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rdi+168], 0
  001b9	66 89 83 8e 00
	00 00		 mov	 WORD PTR [rbx+142], ax

; 2802 : 
; 2803 :     return px;

  001c0	48 8b c3	 mov	 rax, rbx

; 2804 : }

  001c3	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
$done$128090:
  001c8	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001cc	5f		 pop	 rdi
  001cd	c3		 ret	 0
_PyParallel_CreatedNewThreadState ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CM@EMPFFMGD@_PyParallel_ExecutingCallbackFro@ ; `string'
PUBLIC	_PyParallel_ExecutingCallbackFromMainThread
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_ExecutingCallbackFromMainThread DD imagerel $LN6
	DD	imagerel $LN6+88
	DD	imagerel $unwind$_PyParallel_ExecutingCallbackFromMainThread
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_ExecutingCallbackFromMainThread DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0CM@EMPFFMGD@_PyParallel_ExecutingCallbackFro@
CONST	SEGMENT
??_C@_0CM@EMPFFMGD@_PyParallel_ExecutingCallbackFro@ DB '_PyParallel_Exec'
	DB	'utingCallbackFromMainThread', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyParallel_ExecutingCallbackFromMainThread
_TEXT	SEGMENT
_PyParallel_ExecutingCallbackFromMainThread PROC	; COMDAT

; 2843 : {

$LN6:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2844 :     PyThreadState *tstate;
; 2845 :     PxState       *px;
; 2846 :     Py_GUARD

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	74 1c		 je	 SHORT $LN1@PyParallel@17
  0000d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CM@EMPFFMGD@_PyParallel_ExecutingCallbackFro@
  0001b	45 33 c9	 xor	 r9d, r9d
  0001e	41 b8 1e 0b 00
	00		 mov	 r8d, 2846		; 00000b1eH
  00024	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@PyParallel@17:

; 2847 : 
; 2848 :     tstate = PyThreadState_GET();

  00029	e8 00 00 00 00	 call	 _Py_PXCTX
  0002e	85 c0		 test	 eax, eax
  00030	74 07		 je	 SHORT $LN4@PyParallel@17
  00032	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00037	eb 07		 jmp	 SHORT $LN5@PyParallel@17
$LN4@PyParallel@17:
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
$LN5@PyParallel@17:

; 2849 : 
; 2850 :     assert(!tstate->is_parallel_thread);
; 2851 :     px = (PxState *)tstate->px;
; 2852 :     return (px->processing_callback == 1);

  00040	48 8b 88 a0 00
	00 00		 mov	 rcx, QWORD PTR [rax+160]
  00047	33 c0		 xor	 eax, eax
  00049	83 b9 d0 00 00
	00 01		 cmp	 DWORD PTR [rcx+208], 1
  00050	0f 94 c0	 sete	 al

; 2853 : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	c3		 ret	 0
_PyParallel_ExecutingCallbackFromMainThread ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@GEDLNAHP@_PyParallel_InitTLSHeap?3HeapCrea@ ; `string'
PUBLIC	_PyParallel_InitTLS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_InitTLS DD imagerel $LN10
	DD	imagerel $LN10+355
	DD	imagerel $unwind$_PyParallel_InitTLS
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_InitTLS DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CD@GEDLNAHP@_PyParallel_InitTLSHeap?3HeapCrea@
CONST	SEGMENT
??_C@_0CD@GEDLNAHP@_PyParallel_InitTLSHeap?3HeapCrea@ DB '_PyParallel_Ini'
	DB	'tTLSHeap:HeapCreate', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyParallel_InitTLS
_TEXT	SEGMENT
_PyParallel_InitTLS PROC				; COMDAT

; 2917 : {

$LN10:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2918 :     int   i;
; 2919 :     TLS  *t = &tls;

  0000a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00010	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88

; 2920 :     assert(_PxNewThread != 0);
; 2921 :     assert(!t->h);
; 2922 : 
; 2923 :     t->handle = HeapCreate(HEAP_NO_SERIALIZE, _PyTLSHeap_DefaultSize, 0);

  00019	48 63 15 00 00
	00 00		 movsxd	 rdx, DWORD PTR _PyTLSHeap_DefaultSize
  00020	48 8b 3c c8	 mov	 rdi, QWORD PTR [rax+rcx*8]
  00024	45 33 c0	 xor	 r8d, r8d
  00027	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:tls
  0002c	41 8d 48 01	 lea	 ecx, QWORD PTR [r8+1]
  00030	48 03 df	 add	 rbx, rdi
  00033	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_HeapCreate
  00039	48 89 83 c8 00
	00 00		 mov	 QWORD PTR [rbx+200], rax

; 2924 :     if (!t->handle)

  00040	48 85 c0	 test	 rax, rax
  00043	75 0c		 jne	 SHORT $LN5@PyParallel@18

; 2925 :         Py_FatalError("_PyParallel_InitTLSHeap:HeapCreate");

  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@GEDLNAHP@_PyParallel_InitTLSHeap?3HeapCrea@
  0004c	e8 00 00 00 00	 call	 Py_FatalError
$LN5@PyParallel@18:

; 2926 : 
; 2927 :     TSTATE = ctx->tstate;

  00051	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:TSTATE
  00056	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:ctx

; 2928 :     t->px = (PxState *)TSTATE->px;
; 2929 :     assert(t->px);
; 2930 : 
; 2931 :     InitializeCriticalSectionAndSpinCount(&t->sbuf_cs, TLS_BUF_SPINCOUNT);

  0005b	ba 08 00 00 00	 mov	 edx, 8
  00060	48 8b 04 38	 mov	 rax, QWORD PTR [rax+rdi]
  00064	48 8b 80 e0 00
	00 00		 mov	 rax, QWORD PTR [rax+224]
  0006b	48 89 04 39	 mov	 QWORD PTR [rcx+rdi], rax
  0006f	48 8d 8b a8 01
	00 00		 lea	 rcx, QWORD PTR [rbx+424]
  00076	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0007d	48 89 83 d8 00
	00 00		 mov	 QWORD PTR [rbx+216], rax
  00084	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeCriticalSectionAndSpinCount

; 2932 :     InitializeCriticalSectionAndSpinCount(&t->rbuf_cs, TLS_BUF_SPINCOUNT);

  0008a	48 8d 8b d8 17
	00 00		 lea	 rcx, QWORD PTR [rbx+6104]
  00091	ba 08 00 00 00	 mov	 edx, 8
  00096	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeCriticalSectionAndSpinCount

; 2933 :     InitializeCriticalSectionAndSpinCount(&t->snapshots_cs, TLS_BUF_SPINCOUNT);

  0009c	48 8d 8b 10 2e
	00 00		 lea	 rcx, QWORD PTR [rbx+11792]
  000a3	ba 08 00 00 00	 mov	 edx, 8
  000a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeCriticalSectionAndSpinCount

; 2934 : 
; 2935 :     if (!_PyTLSHeap_Init(0, 0))

  000ae	33 d2		 xor	 edx, edx
  000b0	33 c9		 xor	 ecx, ecx
  000b2	e8 00 00 00 00	 call	 _PyTLSHeap_Init
  000b7	85 c0		 test	 eax, eax
  000b9	75 0b		 jne	 SHORT $LN4@PyParallel@18

; 2969 : }

  000bb	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000c0	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c4	5f		 pop	 rdi
  000c5	c3		 ret	 0
$LN4@PyParallel@18:

; 2936 :         return 0;
; 2937 : 
; 2938 :     for (i = 0; i < Px_NUM_TLS_WSABUFS; i++) {

  000c6	33 d2		 xor	 edx, edx
  000c8	4c 8d 83 08 18
	00 00		 lea	 r8, QWORD PTR [rbx+6152]
  000cf	48 8d 8b 18 04
	00 00		 lea	 rcx, QWORD PTR [rbx+1048]
  000d6	4c 8d 8b a0 30
	00 00		 lea	 r9, QWORD PTR [rbx+12448]
  000dd	0f 1f 00	 npad	 3
$LL3@PyParallel@18:

; 2939 :         Heap   *h  = &t->snapshot[i];
; 2940 :         TLSBUF *sb = &t->sbuf[i];
; 2941 :         TLSBUF *rb = &t->sbuf[i];
; 2942 :         WSABUF *sw = T2W(sb);
; 2943 :         WSABUF *rw = T2W(rb);
; 2944 : 
; 2945 :         h->bitmap_index  = i;

  000e0	41 88 51 50	 mov	 BYTE PTR [r9+80], dl

; 2946 :         sb->bitmap_index = i;
; 2947 :         rb->bitmap_index = i;

  000e4	88 51 c0	 mov	 BYTE PTR [rcx-64], dl

; 2948 : 
; 2949 :         h->tls  = t;

  000e7	49 89 19	 mov	 QWORD PTR [r9], rbx

; 2950 :         sb->tls = t;
; 2951 :         rb->tls = t;

  000ea	48 89 59 c8	 mov	 QWORD PTR [rcx-56], rbx

; 2952 : 
; 2953 :         assert(&sb->w == sw);
; 2954 :         assert(&rb->w == rw);
; 2955 : 
; 2956 :         t->sbufs[i]     = sw;
; 2957 :         t->rbufs[i]     = rw;
; 2958 :         t->snapshots[i] = h;

  000ee	49 8d 41 a0	 lea	 rax, QWORD PTR [r9-96]
  000f2	49 89 88 d0 e9
	ff ff		 mov	 QWORD PTR [r8-5680], rcx
  000f9	49 89 08	 mov	 QWORD PTR [r8], rcx
  000fc	ff c2		 inc	 edx
  000fe	49 89 80 38 16
	00 00		 mov	 QWORD PTR [r8+5688], rax
  00105	49 83 c0 08	 add	 r8, 8
  00109	49 81 c1 b8 00
	00 00		 add	 r9, 184			; 000000b8H
  00110	48 83 c1 50	 add	 rcx, 80			; 00000050H
  00114	83 fa 40	 cmp	 edx, 64			; 00000040H
  00117	7c c7		 jl	 SHORT $LL3@PyParallel@18

; 2959 :     }
; 2960 : 
; 2961 :     t->sbuf_bitmap      = ~0;

  00119	48 c7 83 d0 01
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rbx+464], -1

; 2962 :     t->rbuf_bitmap      = ~0;

  00124	48 c7 83 00 18
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rbx+6144], -1

; 2963 :     t->snapshots_bitmap = ~0;

  0012f	48 c7 83 38 2e
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rbx+11832], -1

; 2964 : 
; 2965 :     t->thread_id = _Py_get_current_thread_id();

  0013a	65 8b 0c 25 48
	00 00 00	 mov	 ecx, DWORD PTR gs:72

; 2966 :     t->snapshot_id = 0;

  00142	48 c7 83 08 2e
	00 00 00 00 00
	00		 mov	 QWORD PTR [rbx+11784], 0

; 2967 : 
; 2968 :     return 1;

  0014d	b8 01 00 00 00	 mov	 eax, 1
  00152	89 8b d4 00 00
	00		 mov	 DWORD PTR [rbx+212], ecx

; 2969 : }

  00158	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0015d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00161	5f		 pop	 rdi
  00162	c3		 ret	 0
_PyParallel_InitTLS ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@NPBDICDC@TLS?5heap?5initialization?5failed?$AA@ ; `string'
PUBLIC	_PyParallel_EnteredCallback
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_EnteredCallback DD imagerel $LN7
	DD	imagerel $LN7+164
	DD	imagerel $unwind$_PyParallel_EnteredCallback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_EnteredCallback DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0BP@NPBDICDC@TLS?5heap?5initialization?5failed?$AA@
CONST	SEGMENT
??_C@_0BP@NPBDICDC@TLS?5heap?5initialization?5failed?$AA@ DB 'TLS heap in'
	DB	'itialization failed', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyParallel_EnteredCallback
_TEXT	SEGMENT
c$ = 48
instance$ = 56
_PyParallel_EnteredCallback PROC			; COMDAT

; 2973 : {

$LN7:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2974 :     Stats *s;
; 2975 : 
; 2976 :     ctx = c;

  00014	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0001d	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index

; 2977 : 
; 2978 :     if (_PxNewThread) {

  00024	bd 00 00 00 00	 mov	 ebp, OFFSET FLAT:_PxNewThread
  00029	4a 8b 34 c0	 mov	 rsi, QWORD PTR [rax+r8*8]
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:ctx
  00032	48 8b fa	 mov	 rdi, rdx
  00035	83 3c 2e 00	 cmp	 DWORD PTR [rsi+rbp], 0
  00039	48 89 0c 30	 mov	 QWORD PTR [rax+rsi], rcx
  0003d	48 8b d9	 mov	 rbx, rcx
  00040	74 1c		 je	 SHORT $LN4@PyParallel@19

; 2979 :         if (!_PyParallel_InitTLS())

  00042	e8 00 00 00 00	 call	 _PyParallel_InitTLS
  00047	85 c0		 test	 eax, eax
  00049	75 0c		 jne	 SHORT $LN3@PyParallel@19

; 2980 :             Py_FatalError("TLS heap initialization failed");

  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@NPBDICDC@TLS?5heap?5initialization?5failed?$AA@
  00052	e8 00 00 00 00	 call	 Py_FatalError
$LN3@PyParallel@19:

; 2981 :         _PxNewThread = 0;

  00057	c7 04 2e 00 00
	00 00		 mov	 DWORD PTR [rsi+rbp], 0
$LN4@PyParallel@19:

; 2982 :     } else {
; 2983 :         /* xxx not a new thread */
; 2984 :     }
; 2985 : 
; 2986 :     assert(
; 2987 :         c->error                &&
; 2988 :         c->pstate               &&
; 2989 :         c->decrefs              &&
; 2990 :         c->outgoing             &&
; 2991 :         c->errback_completed    &&
; 2992 :         c->callback_completed
; 2993 :     );
; 2994 : 
; 2995 :     s = &(c->stats);
; 2996 :     s->entered = _Py_rdtsc();

  0005e	0f 31		 rdtsc
  00060	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  00064	48 0b c2	 or	 rax, rdx
  00067	48 89 83 08 01
	00 00		 mov	 QWORD PTR [rbx+264], rax

; 2997 :     assert(c->tstate);
; 2998 :     assert(c->heap_handle);
; 2999 : 
; 3000 :     if (instance)

  0006e	48 85 ff	 test	 rdi, rdi
  00071	74 07		 je	 SHORT $LN1@PyParallel@19

; 3001 :         c->instance = instance;

  00073	48 89 bb f0 00
	00 00		 mov	 QWORD PTR [rbx+240], rdi
$LN1@PyParallel@19:

; 3002 : 
; 3003 :     assert(c->instance);
; 3004 :     c->pstate->thread_id = _Py_get_current_thread_id();

  0007a	65 8b 0c 25 48
	00 00 00	 mov	 ecx, DWORD PTR gs:72
  00082	48 8b 83 e8 00
	00 00		 mov	 rax, QWORD PTR [rbx+232]

; 3005 : }

  00089	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0008e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00093	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00098	89 88 90 00 00
	00		 mov	 DWORD PTR [rax+144], ecx
  0009e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a2	5f		 pop	 rdi
  000a3	c3		 ret	 0
_PyParallel_EnteredCallback ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_EnteredIOCallback
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_EnteredIOCallback DD imagerel $LN4
	DD	imagerel $LN4+75
	DD	imagerel $unwind$_PyParallel_EnteredIOCallback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_EnteredIOCallback DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyParallel_EnteredIOCallback
_TEXT	SEGMENT
c$ = 48
instance$ = 56
overlapped$ = 64
io_result$ = 72
nbytes$ = 80
tp_io$ = 88
_PyParallel_EnteredIOCallback PROC			; COMDAT

; 3016 : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	41 8b d9	 mov	 ebx, r9d
  00012	49 8b f0	 mov	 rsi, r8
  00015	48 8b f9	 mov	 rdi, rcx

; 3017 :     _PyParallel_EnteredCallback(c, instance);

  00018	e8 00 00 00 00	 call	 _PyParallel_EnteredCallback

; 3018 : 
; 3019 :     c->io_result = io_result;
; 3020 :     c->io_nbytes = nbytes;

  0001d	48 8b 44 24 50	 mov	 rax, QWORD PTR nbytes$[rsp]
  00022	89 9f 94 32 00
	00		 mov	 DWORD PTR [rdi+12948], ebx
  00028	48 89 87 98 32
	00 00		 mov	 QWORD PTR [rdi+12952], rax

; 3021 :     if (overlapped)

  0002f	48 85 f6	 test	 rsi, rsi
  00032	74 07		 je	 SHORT $LN1@PyParallel@20

; 3022 :         c->ol = overlapped;

  00034	48 89 b7 d0 32
	00 00		 mov	 QWORD PTR [rdi+13008], rsi
$LN1@PyParallel@20:

; 3023 :     /*
; 3024 :     if (overlapped)
; 3025 :         assert(overlapped == &(c->overlapped));
; 3026 :     if (tp_io)
; 3027 :         assert(tp_io == c->tp_io);
; 3028 :         */
; 3029 : }

  0003b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00040	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00045	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00049	5f		 pop	 rdi
  0004a	c3		 ret	 0
_PyParallel_EnteredIOCallback ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DB@INOHEMDM@_PyParallel_Finalize?$CI?$CJ?3?5px?9?$DOcont@ ; `string'
PUBLIC	_PyParallel_Finalize
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_Finalize DD imagerel $LN5
	DD	imagerel $LN5+47
	DD	imagerel $unwind$_PyParallel_Finalize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_Finalize DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0DB@INOHEMDM@_PyParallel_Finalize?$CI?$CJ?3?5px?9?$DOcont@
CONST	SEGMENT
??_C@_0DB@INOHEMDM@_PyParallel_Finalize?$CI?$CJ?3?5px?9?$DOcont@ DB '_PyP'
	DB	'arallel_Finalize(): px->contexts_active: %d', 0aH, 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyParallel_Finalize
_TEXT	SEGMENT
_PyParallel_Finalize PROC				; COMDAT

; 3398 : {

$LN5:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3399 :     PxState *px = PXSTATE();

  00004	e8 00 00 00 00	 call	 PXSTATE

; 3400 : 
; 3401 :     assert(px);
; 3402 : 
; 3403 :     if (px->contexts_active > 0) {

  00009	8b 90 e8 00 00
	00		 mov	 edx, DWORD PTR [rax+232]
  0000f	85 d2		 test	 edx, edx
  00011	7e 0d		 jle	 SHORT $LN4@PyParallel@21

; 3404 :         printf("_PyParallel_Finalize(): px->contexts_active: %d\n",
; 3405 :                px->contexts_active);

  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DB@INOHEMDM@_PyParallel_Finalize?$CI?$CJ?3?5px?9?$DOcont@
  0001a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf
$LN4@PyParallel@21:

; 3406 :     }
; 3407 : 
; 3408 :     _PyParallel_Finalized = 1;

  00020	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _PyParallel_Finalized, 1

; 3409 : }

  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	c3		 ret	 0
_PyParallel_Finalize ENDP
_TEXT	ENDS
PUBLIC	_is_parallel_thread
;	COMDAT pdata
pdata	SEGMENT
$pdata$_is_parallel_thread DD imagerel $LN6
	DD	imagerel $LN6+47
	DD	imagerel $unwind$_is_parallel_thread
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_is_parallel_thread DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _is_parallel_thread
_TEXT	SEGMENT
_is_parallel_thread PROC				; COMDAT

; 3853 : {

$LN6:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3854 :     return PyThreadState_GET()->is_parallel_thread;

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	74 10		 je	 SHORT $LN3@is_paralle
  0000d	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00012	8b 80 a8 00 00
	00		 mov	 eax, DWORD PTR [rax+168]

; 3855 : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
$LN3@is_paralle:

; 3854 :     return PyThreadState_GET()->is_parallel_thread;

  0001d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
  00024	8b 80 a8 00 00
	00		 mov	 eax, DWORD PTR [rax+168]

; 3855 : }

  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	c3		 ret	 0
_is_parallel_thread ENDP
_TEXT	ENDS
PUBLIC	_is_active
;	COMDAT pdata
pdata	SEGMENT
$pdata$_is_active DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$_is_active
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_is_active DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _is_active
_TEXT	SEGMENT
_is_active PROC						; COMDAT

; 3881 : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3882 :     return PXSTATE()->active;

  00004	e8 00 00 00 00	 call	 PXSTATE
  00009	8b 80 f8 00 00
	00		 mov	 eax, DWORD PTR [rax+248]

; 3883 : }

  0000f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00013	c3		 ret	 0
_is_active ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_active_count DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$_async_active_count
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_active_count DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _async_active_count
_TEXT	SEGMENT
self$ = 48
args$ = 56
_async_active_count PROC				; COMDAT

; 3904 : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3905 :     return PyLong_FromLong(PXSTATE()->active);

  00004	e8 00 00 00 00	 call	 PXSTATE
  00009	8b 88 f8 00 00
	00		 mov	 ecx, DWORD PTR [rax+248]

; 3906 : }

  0000f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00013	e9 00 00 00 00	 jmp	 PyLong_FromLong
_async_active_count ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_active_contexts DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$_async_active_contexts
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_active_contexts DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _async_active_contexts
_TEXT	SEGMENT
self$ = 48
args$ = 56
_async_active_contexts PROC				; COMDAT

; 3910 : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3911 :     return PyLong_FromLong(PXSTATE()->contexts_active);

  00004	e8 00 00 00 00	 call	 PXSTATE
  00009	8b 88 e8 00 00
	00		 mov	 ecx, DWORD PTR [rax+232]

; 3912 : }

  0000f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00013	e9 00 00 00 00	 jmp	 PyLong_FromLong
_async_active_contexts ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_persisted_contexts DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$_async_persisted_contexts
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_persisted_contexts DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _async_persisted_contexts
_TEXT	SEGMENT
self$ = 48
args$ = 56
_async_persisted_contexts PROC				; COMDAT

; 3916 : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3917 :     return PyLong_FromLong(PXSTATE()->contexts_persisted);

  00004	e8 00 00 00 00	 call	 PXSTATE
  00009	8b 88 ec 00 00
	00		 mov	 ecx, DWORD PTR [rax+236]

; 3918 : }

  0000f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00013	e9 00 00 00 00	 jmp	 PyLong_FromLong
_async_persisted_contexts ENDP
_TEXT	ENDS
PUBLIC	_PxState_FreeContext
EXTRN	PxList_Next:PROC
EXTRN	PxList_Flush:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_PxState_FreeContext DD imagerel $LN80
	DD	imagerel $LN80+492
	DD	imagerel $unwind$_PxState_FreeContext
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PxState_FreeContext DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0c016321aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT _PxState_FreeContext
_TEXT	SEGMENT
px$ = 48
c$ = 56
_PxState_FreeContext PROC				; COMDAT

; 3962 : {

$LN80:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 3963 :     Heap *h;
; 3964 :     Stats *s;
; 3965 :     Object *o;
; 3966 :     PxListItem *item;
; 3967 :     Context *prev, *next;
; 3968 : 
; 3969 :     assert(c->px == px);
; 3970 : 
; 3971 :     prev = c->prev;
; 3972 :     next = c->next;

  0001a	4c 8b a2 10 33
	00 00		 mov	 r12, QWORD PTR [rdx+13072]
  00021	48 8b e9	 mov	 rbp, rcx
  00024	48 8b 8a 08 33
	00 00		 mov	 rcx, QWORD PTR [rdx+13064]

; 3973 : 
; 3974 :     if (px->ctx_first == c)

  0002b	48 8b 45 78	 mov	 rax, QWORD PTR [rbp+120]
  0002f	48 8b fa	 mov	 rdi, rdx
  00032	48 3b c2	 cmp	 rax, rdx
  00035	49 0f 44 c4	 cmove	 rax, r12
  00039	48 89 45 78	 mov	 QWORD PTR [rbp+120], rax

; 3975 :         px->ctx_first = next;
; 3976 : 
; 3977 :     if (px->ctx_last == c)

  0003d	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR [rbp+128]
  00044	48 3b c2	 cmp	 rax, rdx
  00047	48 0f 44 c1	 cmove	 rax, rcx
  0004b	48 89 85 80 00
	00 00		 mov	 QWORD PTR [rbp+128], rax

; 3978 :         px->ctx_last = prev;
; 3979 : 
; 3980 :     if (prev)

  00052	48 85 c9	 test	 rcx, rcx
  00055	74 07		 je	 SHORT $LN27@PxState_Fr

; 3981 :         prev->next = next;

  00057	4c 89 a1 10 33
	00 00		 mov	 QWORD PTR [rcx+13072], r12
$LN27@PxState_Fr:

; 3982 : 
; 3983 :     if (next)

  0005e	4d 85 e4	 test	 r12, r12
  00061	74 08		 je	 SHORT $LN26@PxState_Fr

; 3984 :         next->prev = prev;

  00063	49 89 8c 24 08
	33 00 00	 mov	 QWORD PTR [r12+13064], rcx
$LN26@PxState_Fr:

; 3985 : 
; 3986 :     /* xxx todo: check refcnts of func/args/kwds etc? */
; 3987 :     decref_args(c);

  0006b	48 8b ca	 mov	 rcx, rdx
  0006e	e8 00 00 00 00	 call	 decref_args

; 3988 : 
; 3989 :     if (c->tp_wait)

  00073	48 83 bf 68 32
	00 00 00	 cmp	 QWORD PTR [rdi+12904], 0
  0007b	74 08		 je	 SHORT $LN25@PxState_Fr

; 3990 :         decref_waitobj_args(c);

  0007d	48 8b cf	 mov	 rcx, rdi
  00080	e8 00 00 00 00	 call	 decref_waitobj_args
$LN25@PxState_Fr:

; 3991 : 
; 3992 :     h = c->h;

  00085	48 8b 9f d0 00
	00 00		 mov	 rbx, QWORD PTR [rdi+208]

; 3993 :     s = &(c->stats);
; 3994 :     _PyHeap_FastFree(h, s, c->error);

  0008c	4c 8b 87 28 33
	00 00		 mov	 r8, QWORD PTR [rdi+13096]
  00093	48 8d 97 00 01
	00 00		 lea	 rdx, QWORD PTR [rdi+256]
  0009a	48 8b cb	 mov	 rcx, rbx
  0009d	e8 00 00 00 00	 call	 _PyHeap_FastFree

; 3995 :     _PyHeap_FastFree(h, s, c->errback_completed);

  000a2	4c 8b 87 38 33
	00 00		 mov	 r8, QWORD PTR [rdi+13112]
  000a9	48 8d 97 00 01
	00 00		 lea	 rdx, QWORD PTR [rdi+256]
  000b0	e8 00 00 00 00	 call	 _PyHeap_FastFree

; 3996 :     _PyHeap_FastFree(h, s, c->callback_completed);

  000b5	4c 8b 87 30 33
	00 00		 mov	 r8, QWORD PTR [rdi+13104]
  000bc	48 8d 97 00 01
	00 00		 lea	 rdx, QWORD PTR [rdi+256]
  000c3	e8 00 00 00 00	 call	 _PyHeap_FastFree

; 3997 :     _PyHeap_FastFree(h, s, c->outgoing);

  000c8	4c 8b 87 40 33
	00 00		 mov	 r8, QWORD PTR [rdi+13120]
  000cf	48 8d 97 00 01
	00 00		 lea	 rdx, QWORD PTR [rdi+256]
  000d6	e8 00 00 00 00	 call	 _PyHeap_FastFree

; 3998 : 
; 3999 :     if (c->last_leak)

  000db	48 8b 8f e0 37
	00 00		 mov	 rcx, QWORD PTR [rdi+14304]
  000e2	48 85 c9	 test	 rcx, rcx
  000e5	74 06		 je	 SHORT $LN24@PxState_Fr

; 4000 :         free(c->last_leak);

  000e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN24@PxState_Fr:

; 4001 : 
; 4002 :     if (c->errors_tuple)

  000ed	4c 8b 87 e8 37
	00 00		 mov	 r8, QWORD PTR [rdi+14312]
  000f4	4d 85 c0	 test	 r8, r8
  000f7	74 0f		 je	 SHORT $LN23@PxState_Fr

; 4003 :         _PyHeap_FastFree(h, s, c->errors_tuple);

  000f9	48 8d 97 00 01
	00 00		 lea	 rdx, QWORD PTR [rdi+256]
  00100	48 8b cb	 mov	 rcx, rbx
  00103	e8 00 00 00 00	 call	 _PyHeap_FastFree
$LN23@PxState_Fr:

; 4004 : 
; 4005 :     item = PxList_Flush(c->decrefs);

  00108	48 8b 8f 48 33
	00 00		 mov	 rcx, QWORD PTR [rdi+13128]
  0010f	e8 00 00 00 00	 call	 PxList_Flush
  00114	48 8b d8	 mov	 rbx, rax

; 4006 :     while (item) {

  00117	48 85 c0	 test	 rax, rax
  0011a	74 5a		 je	 SHORT $LN21@PxState_Fr
  0011c	0f 1f 40 00	 npad	 4
$LL22@PxState_Fr:

; 4007 :         PxListItem *next = PxList_Next(item);

  00120	48 8b cb	 mov	 rcx, rbx
  00123	e8 00 00 00 00	 call	 PxList_Next

; 4008 :         Py_XDECREF((PyObject *)item->p1);

  00128	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  0012c	48 8b f0	 mov	 rsi, rax
  0012f	48 85 c9	 test	 rcx, rcx
  00132	74 05		 je	 SHORT $LN19@PxState_Fr
  00134	e8 00 00 00 00	 call	 _Py_DecRef
$LN19@PxState_Fr:

; 4009 :         Py_XDECREF((PyObject *)item->p2);

  00139	48 8b 4b 28	 mov	 rcx, QWORD PTR [rbx+40]
  0013d	48 85 c9	 test	 rcx, rcx
  00140	74 05		 je	 SHORT $LN15@PxState_Fr
  00142	e8 00 00 00 00	 call	 _Py_DecRef
$LN15@PxState_Fr:

; 4010 :         Py_XDECREF((PyObject *)item->p3);

  00147	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  0014b	48 85 c9	 test	 rcx, rcx
  0014e	74 05		 je	 SHORT $LN11@PxState_Fr
  00150	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@PxState_Fr:

; 4011 :         Py_XDECREF((PyObject *)item->p4);

  00155	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  00159	48 85 c9	 test	 rcx, rcx
  0015c	74 05		 je	 SHORT $LN7@PxState_Fr
  0015e	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@PxState_Fr:

; 4012 :         _PyHeap_Free(c, item);

  00163	48 8b d3	 mov	 rdx, rbx
  00166	48 8b cf	 mov	 rcx, rdi
  00169	e8 00 00 00 00	 call	 _PyHeap_Free

; 4013 :         item = next;

  0016e	48 8b de	 mov	 rbx, rsi
  00171	48 85 f6	 test	 rsi, rsi
  00174	75 aa		 jne	 SHORT $LL22@PxState_Fr
$LN21@PxState_Fr:

; 4014 :     }
; 4015 : 
; 4016 :     for (o = c->events.first; o; o = o->next) {

  00176	48 8b 9f 80 33
	00 00		 mov	 rbx, QWORD PTR [rdi+13184]
  0017d	48 85 db	 test	 rbx, rbx
  00180	74 13		 je	 SHORT $LN2@PxState_Fr
$LL4@PxState_Fr:

; 4017 :         assert(Py_HAS_EVENT(o));
; 4018 :         assert(Py_EVENT(o));
; 4019 :         PyEvent_DESTROY(o);

  00182	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  00186	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle
  0018c	48 8b 5b 08	 mov	 rbx, QWORD PTR [rbx+8]
  00190	48 85 db	 test	 rbx, rbx
  00193	75 ed		 jne	 SHORT $LL4@PxState_Fr
$LN2@PxState_Fr:

; 4020 :     }
; 4021 : 
; 4022 :     px->contexts_destroyed++;

  00195	48 ff 85 e0 00
	00 00		 inc	 QWORD PTR [rbp+224]

; 4023 : 
; 4024 :     if (!Px_CTX_WAS_PERSISTED(c)) {

  0019c	f6 87 f8 00 00
	00 02		 test	 BYTE PTR [rdi+248], 2
  001a3	75 0e		 jne	 SHORT $LN1@PxState_Fr

; 4025 :         InterlockedDecrement(&(px->active));

  001a5	f0 ff 8d f8 00
	00 00		 lock dec DWORD PTR [rbp+248]

; 4026 :         InterlockedDecrement(&(px->contexts_active));

  001ac	f0 ff 8d e8 00
	00 00		 lock dec DWORD PTR [rbp+232]
$LN1@PxState_Fr:

; 4027 :     }
; 4028 : 
; 4029 :     /*
; 4030 :     if (c->io_obj) {
; 4031 :         if (Py_TYPE(c->io_obj) == &PxSocket_Type) {
; 4032 :             PxSocket *s = (PxSocket *)c->io_obj;
; 4033 :             if (c->tp_io)
; 4034 :                 CancelThreadpoolIo(c->tp_io);
; 4035 :         }
; 4036 :         Py_DECREF(c->io_obj);
; 4037 :     }
; 4038 :     */
; 4039 : 
; 4040 :     _PxContext_UnregisterHeaps(c);

  001b3	48 8b cf	 mov	 rcx, rdi
  001b6	e8 00 00 00 00	 call	 _PxContext_UnregisterHeaps

; 4041 : 
; 4042 :     HeapDestroy(c->heap_handle);

  001bb	48 8b 4f 10	 mov	 rcx, QWORD PTR [rdi+16]
  001bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_HeapDestroy

; 4043 :     free(c);

  001c5	48 8b cf	 mov	 rcx, rdi
  001c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 4044 :     return next;
; 4045 : }

  001ce	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  001d3	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  001d8	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  001dd	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  001e2	49 8b c4	 mov	 rax, r12
  001e5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001e9	41 5c		 pop	 r12
  001eb	c3		 ret	 0
_PxState_FreeContext ENDP
_TEXT	ENDS
PUBLIC	_PxState_PurgeContexts
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PxState_PurgeContexts DD imagerel $LN11
	DD	imagerel $LN11+97
	DD	imagerel $unwind$_PxState_PurgeContexts
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PxState_PurgeContexts DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PxState_PurgeContexts
_TEXT	SEGMENT
px$ = 48
_PxState_PurgeContexts PROC				; COMDAT

; 4049 : {

$LN11:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 4050 :     Context *c;
; 4051 :     int destroyed = 0;
; 4052 : 
; 4053 :     if (!px->ctx_first)

  0000a	48 8b 41 78	 mov	 rax, QWORD PTR [rcx+120]
  0000e	33 db		 xor	 ebx, ebx
  00010	48 8b f9	 mov	 rdi, rcx
  00013	48 85 c0	 test	 rax, rax
  00016	75 0b		 jne	 SHORT $LL3@PxState_Pu

; 4070 : }

  00018	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0001d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00021	5f		 pop	 rdi
  00022	c3		 ret	 0
$LL3@PxState_Pu:

; 4058 :         if (c->ttl > 0) {

  00023	0f b7 88 00 38
	00 00		 movzx	 ecx, WORD PTR [rax+14336]
  0002a	66 85 c9	 test	 cx, cx
  0002d	7e 13		 jle	 SHORT $LN1@PxState_Pu

; 4059 :             --(c->ttl);

  0002f	66 ff c9	 dec	 cx
  00032	66 89 88 00 38
	00 00		 mov	 WORD PTR [rax+14336], cx

; 4060 :             c = c->next;

  00039	48 8b 80 10 33
	00 00		 mov	 rax, QWORD PTR [rax+13072]

; 4061 :             continue;

  00040	eb 0d		 jmp	 SHORT $LN9@PxState_Pu
$LN1@PxState_Pu:

; 4062 :         }
; 4063 :         assert(c->ttl == 0);
; 4064 : 
; 4065 :         c = _PxState_FreeContext(px, c);

  00042	48 8b d0	 mov	 rdx, rax
  00045	48 8b cf	 mov	 rcx, rdi
  00048	e8 00 00 00 00	 call	 _PxState_FreeContext

; 4066 :         destroyed++;

  0004d	ff c3		 inc	 ebx
$LN9@PxState_Pu:

; 4054 :         return 0;
; 4055 : 
; 4056 :     c = px->ctx_first;
; 4057 :     while (c) {

  0004f	48 85 c0	 test	 rax, rax
  00052	75 cf		 jne	 SHORT $LL3@PxState_Pu

; 4067 :     }
; 4068 : 
; 4069 :     return destroyed;

  00054	8b c3		 mov	 eax, ebx

; 4070 : }

  00056	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005f	5f		 pop	 rdi
  00060	c3		 ret	 0
_PxState_PurgeContexts ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_SchedulePyNoneDecref
;	COMDAT pdata
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\winnt.h
pdata	SEGMENT
$pdata$_PyParallel_SchedulePyNoneDecref DD imagerel $LN5
	DD	imagerel $LN5+27
	DD	imagerel $unwind$_PyParallel_SchedulePyNoneDecref
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_SchedulePyNoneDecref DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT _PyParallel_SchedulePyNoneDecref
_TEXT	SEGMENT
refs$ = 48
_PyParallel_SchedulePyNoneDecref PROC			; COMDAT

; 4102 : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	8b d9		 mov	 ebx, ecx

; 4103 :     PxState *px = PXSTATE();

  00008	e8 00 00 00 00	 call	 PXSTATE

; 4104 :     assert(refs > 0);
; 4105 :     InterlockedAdd(&(px->incoming_pynone_decrefs), refs);

  0000d	f0 0f c1 98 00
	01 00 00	 lock xadd DWORD PTR [rax+256], ebx

; 4106 : }

  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5b		 pop	 rbx
  0001a	c3		 ret	 0
_PyParallel_SchedulePyNoneDecref ENDP
_TEXT	ENDS
PUBLIC	new_context
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel_private.h
pdata	SEGMENT
$pdata$new_context DD imagerel $LN23
	DD	imagerel $LN23+681
	DD	imagerel $unwind$new_context
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$new_context DD 0a5301H
	DD	076453H
	DD	06544eH
	DD	097410H
	DD	083410H
	DD	0c00c3210H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT new_context
_TEXT	SEGMENT
heapsize$ = 48
init_heap_snapshots$ = 56
new_context PROC					; COMDAT

; 4471 : {

$LN23:
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0000a	41 54		 push	 r12
  0000c	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00010	48 8b f9	 mov	 rdi, rcx

; 4472 :     int i;
; 4473 :     PxState  *px;
; 4474 :     Stats *s;
; 4475 :     PyThreadState *pstate;
; 4476 :     Context  *c = (Context *)malloc(sizeof(Context));

  00013	b9 20 38 00 00	 mov	 ecx, 14368		; 00003820H
  00018	44 8b e2	 mov	 r12d, edx
  0001b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00021	48 8b d8	 mov	 rbx, rax

; 4477 : 
; 4478 :     if (!c)

  00024	48 85 c0	 test	 rax, rax
  00027	75 15		 jne	 SHORT $LN9@new_contex

; 4556 : }

  00029	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0002e	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	41 5c		 pop	 r12
  00039	e9 00 00 00 00	 jmp	 PyErr_NoMemory
$LN9@new_contex:

; 4479 :         return (Context *)PyErr_NoMemory();
; 4480 : 
; 4481 :     memset((void *)c, 0, sizeof(Context));

  0003e	33 d2		 xor	 edx, edx
  00040	41 b8 20 38 00
	00		 mov	 r8d, 14368		; 00003820H
  00046	48 8b c8	 mov	 rcx, rax
  00049	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp
  0004e	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  00053	e8 00 00 00 00	 call	 memset

; 4482 : 
; 4483 :     c->heap_handle = HeapCreate(HEAP_NO_SERIALIZE, Px_DEFAULT_HEAP_SIZE, 0);

  00058	be 01 00 00 00	 mov	 esi, 1
  0005d	45 33 c0	 xor	 r8d, r8d
  00060	ba 00 00 20 00	 mov	 edx, 2097152		; 00200000H
  00065	8b ce		 mov	 ecx, esi
  00067	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_HeapCreate
  0006d	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax

; 4484 :     if (!c->heap_handle) {

  00071	48 85 c0	 test	 rax, rax
  00074	75 0c		 jne	 SHORT $LN8@new_contex

; 4485 :         PyErr_SetFromWindowsErr(0);

  00076	33 c9		 xor	 ecx, ecx
  00078	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 4486 :         goto free_context;

  0007d	e9 01 02 00 00	 jmp	 $free_context$129046
$LN8@new_contex:

; 4487 :     }
; 4488 : 
; 4489 :     c->tstate = get_main_thread_state();

  00082	e8 00 00 00 00	 call	 get_main_thread_state

; 4490 : 
; 4491 :     assert(c->tstate);
; 4492 :     px = c->px = (PxState *)c->tstate->px;
; 4493 : 
; 4494 :     if (!_PyHeap_Init(c, heapsize))

  00087	48 8b d7	 mov	 rdx, rdi
  0008a	48 8b cb	 mov	 rcx, rbx
  0008d	48 89 83 e0 00
	00 00		 mov	 QWORD PTR [rbx+224], rax
  00094	48 8b a8 a0 00
	00 00		 mov	 rbp, QWORD PTR [rax+160]
  0009b	48 89 ab d8 00
	00 00		 mov	 QWORD PTR [rbx+216], rbp
  000a2	e8 00 00 00 00	 call	 _PyHeap_Init
  000a7	48 85 c0	 test	 rax, rax
  000aa	0f 84 c9 01 00
	00		 je	 $free_heap$129050

; 4495 :         goto free_heap;
; 4496 : 
; 4497 :     c->refcnt = 1;

  000b0	89 b3 58 33 00
	00		 mov	 DWORD PTR [rbx+13144], esi

; 4498 :     c->ttl = px->ctx_ttl;

  000b6	0f b7 85 8e 00
	00 00		 movzx	 eax, WORD PTR [rbp+142]

; 4499 : 
; 4500 :     pstate = (PyThreadState *)_PyHeap_Malloc(c, sizeof(PyThreadState), 0, 0);

  000bd	45 33 c9	 xor	 r9d, r9d
  000c0	45 33 c0	 xor	 r8d, r8d
  000c3	ba b0 00 00 00	 mov	 edx, 176		; 000000b0H
  000c8	48 8b cb	 mov	 rcx, rbx
  000cb	66 89 83 00 38
	00 00		 mov	 WORD PTR [rbx+14336], ax
  000d2	e8 00 00 00 00	 call	 _PyHeap_Malloc

; 4501 :     c->pstate = pstate;
; 4502 : 
; 4503 :     c->error = _PyHeap_NewListItem(c);

  000d7	48 8b cb	 mov	 rcx, rbx
  000da	48 8b f8	 mov	 rdi, rax
  000dd	48 89 83 e8 00
	00 00		 mov	 QWORD PTR [rbx+232], rax
  000e4	e8 00 00 00 00	 call	 _PyHeap_NewListItem

; 4504 :     c->errback_completed = _PyHeap_NewListItem(c);

  000e9	48 8b cb	 mov	 rcx, rbx
  000ec	48 89 83 28 33
	00 00		 mov	 QWORD PTR [rbx+13096], rax
  000f3	e8 00 00 00 00	 call	 _PyHeap_NewListItem

; 4505 :     c->callback_completed = _PyHeap_NewListItem(c);

  000f8	48 8b cb	 mov	 rcx, rbx
  000fb	48 89 83 38 33
	00 00		 mov	 QWORD PTR [rbx+13112], rax
  00102	e8 00 00 00 00	 call	 _PyHeap_NewListItem

; 4506 : 
; 4507 :     c->outgoing = _PyHeap_NewList(c);

  00107	48 8b cb	 mov	 rcx, rbx
  0010a	48 89 83 30 33
	00 00		 mov	 QWORD PTR [rbx+13104], rax
  00111	e8 00 00 00 00	 call	 _PyHeap_NewList

; 4508 :     c->decrefs  = _PyHeap_NewList(c);

  00116	48 8b cb	 mov	 rcx, rbx
  00119	48 89 83 40 33
	00 00		 mov	 QWORD PTR [rbx+13120], rax
  00120	e8 00 00 00 00	 call	 _PyHeap_NewList

; 4509 : 
; 4510 :     if (!(c->error                &&
; 4511 :           c->pstate               &&
; 4512 :           c->decrefs              &&
; 4513 :           c->outgoing             &&
; 4514 :           c->errback_completed    &&
; 4515 :           c->callback_completed))

  00125	48 83 bb 28 33
	00 00 00	 cmp	 QWORD PTR [rbx+13096], 0
  0012d	48 89 83 48 33
	00 00		 mov	 QWORD PTR [rbx+13128], rax
  00134	0f 84 3f 01 00
	00		 je	 $free_heap$129050
  0013a	48 83 bb e8 00
	00 00 00	 cmp	 QWORD PTR [rbx+232], 0
  00142	0f 84 31 01 00
	00		 je	 $free_heap$129050
  00148	48 85 c0	 test	 rax, rax
  0014b	0f 84 28 01 00
	00		 je	 $free_heap$129050
  00151	48 83 bb 40 33
	00 00 00	 cmp	 QWORD PTR [rbx+13120], 0
  00159	0f 84 1a 01 00
	00		 je	 $free_heap$129050
  0015f	48 83 bb 38 33
	00 00 00	 cmp	 QWORD PTR [rbx+13112], 0
  00167	0f 84 0c 01 00
	00		 je	 $free_heap$129050
  0016d	48 83 bb 30 33
	00 00 00	 cmp	 QWORD PTR [rbx+13104], 0
  00175	0f 84 fe 00 00
	00		 je	 $free_heap$129050

; 4516 :             goto free_heap;
; 4517 : 
; 4518 :     pstate->px = c;

  0017b	48 89 9f a0 00
	00 00		 mov	 QWORD PTR [rdi+160], rbx

; 4519 :     pstate->is_parallel_thread = 1;

  00182	89 b7 a8 00 00
	00		 mov	 DWORD PTR [rdi+168], esi

; 4520 :     pstate->interp = c->tstate->interp;

  00188	48 8b 83 e0 00
	00 00		 mov	 rax, QWORD PTR [rbx+224]
  0018f	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]

; 4521 : 
; 4522 :     c->tbuf_next = c->tbuf_base = (void *)&(c->tbuf[0]);

  00193	48 8d 93 90 33
	00 00		 lea	 rdx, QWORD PTR [rbx+13200]
  0019a	48 89 4f 08	 mov	 QWORD PTR [rdi+8], rcx

; 4523 :     c->tbuf_next_alignment = Px_GET_ALIGNMENT(c->tbuf_next);

  0019e	33 ff		 xor	 edi, edi
  001a0	48 89 93 90 37
	00 00		 mov	 QWORD PTR [rbx+14224], rdx
  001a7	48 89 93 98 37
	00 00		 mov	 QWORD PTR [rbx+14232], rdx
  001ae	8b cf		 mov	 ecx, edi
  001b0	48 85 d2	 test	 rdx, rdx
  001b3	75 04		 jne	 SHORT $LN17@new_contex
  001b5	8b f7		 mov	 esi, edi
  001b7	eb 17		 jmp	 SHORT $LN15@new_contex
$LN17@new_contex:
  001b9	40 84 d6	 test	 dl, sil
  001bc	75 0f		 jne	 SHORT $LN12@new_contex
  001be	66 90		 npad	 2
$LL13@new_contex:
  001c0	ff c1		 inc	 ecx
  001c2	48 8b c2	 mov	 rax, rdx
  001c5	48 d3 e8	 shr	 rax, cl
  001c8	40 84 c6	 test	 al, sil
  001cb	74 f3		 je	 SHORT $LL13@new_contex
$LN12@new_contex:
  001cd	48 d3 e6	 shl	 rsi, cl
$LN15@new_contex:

; 4524 :     c->tbuf_remaining = _PX_TMPBUF_SIZE;
; 4525 : 
; 4526 :     c->px->contexts_created++;

  001d0	48 8b 83 d8 00
	00 00		 mov	 rax, QWORD PTR [rbx+216]
  001d7	48 89 b3 c0 37
	00 00		 mov	 QWORD PTR [rbx+14272], rsi
  001de	48 c7 83 b0 37
	00 00 00 04 00
	00		 mov	 QWORD PTR [rbx+14256], 1024 ; 00000400H
  001e9	48 ff 80 d8 00
	00 00		 inc	 QWORD PTR [rax+216]

; 4527 :     InterlockedIncrement(&(c->px->contexts_active));

  001f0	48 8b 83 d8 00
	00 00		 mov	 rax, QWORD PTR [rbx+216]
  001f7	f0 ff 80 e8 00
	00 00		 lock inc DWORD PTR [rax+232]

; 4528 : 
; 4529 :     if (!init_heap_snapshots)

  001fe	45 85 e4	 test	 r12d, r12d
  00201	74 63		 je	 SHORT $done$129057

; 4530 :         goto done;
; 4531 : 
; 4532 :     InitializeCriticalSectionAndSpinCount(&c->heap_cs, TLS_BUF_SPINCOUNT);

  00203	48 8d 8b c8 01
	00 00		 lea	 rcx, QWORD PTR [rbx+456]
  0020a	ba 08 00 00 00	 mov	 edx, 8
  0020f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeCriticalSectionAndSpinCount

; 4533 :     InitializeCriticalSectionAndSpinCount(&c->snapshots_cs, TLS_BUF_SPINCOUNT);

  00215	48 8d 8b f8 01
	00 00		 lea	 rcx, QWORD PTR [rbx+504]
  0021c	ba 08 00 00 00	 mov	 edx, 8
  00221	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeCriticalSectionAndSpinCount
  00227	48 8d 8b 28 02
	00 00		 lea	 rcx, QWORD PTR [rbx+552]
  0022e	48 8d 83 28 04
	00 00		 lea	 rax, QWORD PTR [rbx+1064]
  00235	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL3@new_contex:

; 4534 : 
; 4535 :     for (i = 0; i < Px_INTPTR_BITS; i++) {
; 4536 :         Heap *h  = &c->snapshot[i];
; 4537 :         h->bitmap_index  = i;

  00240	40 88 b8 b0 00
	00 00		 mov	 BYTE PTR [rax+176], dil

; 4538 :         c->snapshots[i] = h;

  00247	48 89 01	 mov	 QWORD PTR [rcx], rax
  0024a	ff c7		 inc	 edi
  0024c	48 83 c1 08	 add	 rcx, 8
  00250	48 05 b8 00 00
	00		 add	 rax, 184		; 000000b8H
  00256	83 ff 40	 cmp	 edi, 64			; 00000040H
  00259	7c e5		 jl	 SHORT $LL3@new_contex

; 4539 :     }
; 4540 : 
; 4541 :     c->snapshots_bitmap = ~0;

  0025b	48 c7 83 20 02
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rbx+544], -1
$done$129057:

; 4542 : 
; 4543 : done:
; 4544 :     s = &(c->stats);
; 4545 :     s->startup_size = s->allocated;

  00266	48 8b 83 a0 01
	00 00		 mov	 rax, QWORD PTR [rbx+416]
  0026d	48 89 83 c0 01
	00 00		 mov	 QWORD PTR [rbx+448], rax

; 4546 : 
; 4547 :     return c;

  00274	48 8b c3	 mov	 rax, rbx
  00277	eb 15		 jmp	 SHORT $LN22@new_contex
$free_heap$129050:

; 4548 : 
; 4549 : free_heap:
; 4550 :     HeapDestroy(c->heap_handle);

  00279	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  0027d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_HeapDestroy
$free_context$129046:

; 4551 : 
; 4552 : free_context:
; 4553 :     free(c);

  00283	48 8b cb	 mov	 rcx, rbx
  00286	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 4554 : 
; 4555 :     return NULL;

  0028c	33 c0		 xor	 eax, eax
$LN22@new_contex:

; 4556 : }

  0028e	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
  00293	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00298	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0029d	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  002a2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  002a6	41 5c		 pop	 r12
  002a8	c3		 ret	 0
new_context ENDP
_TEXT	ENDS
PUBLIC	new_context_for_socket
;	COMDAT pdata
pdata	SEGMENT
$pdata$new_context_for_socket DD imagerel $LN4
	DD	imagerel $LN4+82
	DD	imagerel $unwind$new_context_for_socket
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$new_context_for_socket DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT new_context_for_socket
_TEXT	SEGMENT
s$ = 48
new_context_for_socket PROC				; COMDAT

; 4560 : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 4561 :     size_t heapsize = s->recvbuf_size + s->sendbuf_size + (2 * Px_PAGE_SIZE);

  00006	8b 91 64 02 00
	00		 mov	 edx, DWORD PTR [rcx+612]
  0000c	8b 81 60 02 00
	00		 mov	 eax, DWORD PTR [rcx+608]
  00012	48 8b d9	 mov	 rbx, rcx
  00015	8d 94 02 00 20
	00 00		 lea	 edx, DWORD PTR [rdx+rax+8192]
  0001c	48 63 ca	 movsxd	 rcx, edx

; 4562 :     Context *c;
; 4563 :     assert(!s->ctx);
; 4564 :     c = new_context(heapsize, 1);

  0001f	ba 01 00 00 00	 mov	 edx, 1
  00024	e8 00 00 00 00	 call	 new_context

; 4565 :     if (!c)

  00029	48 85 c0	 test	 rax, rax
  0002c	75 06		 jne	 SHORT $LN1@new_contex@2

; 4572 :     return c;
; 4573 : }

  0002e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00032	5b		 pop	 rbx
  00033	c3		 ret	 0
$LN1@new_contex@2:

; 4566 :         return NULL;
; 4567 : 
; 4568 :     c->io_type = Px_IOTYPE_SOCKET;

  00034	c7 80 80 32 00
	00 02 00 00 00	 mov	 DWORD PTR [rax+12928], 2

; 4569 :     /*c->context_type = Px_CTXTYPE_SOCK;*/
; 4570 :     c->io_obj = (PyObject *)s;

  0003e	48 89 98 a8 32
	00 00		 mov	 QWORD PTR [rax+12968], rbx

; 4571 :     s->ctx = c;

  00045	48 89 83 00 02
	00 00		 mov	 QWORD PTR [rbx+512], rax

; 4572 :     return c;
; 4573 : }

  0004c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00050	5b		 pop	 rbx
  00051	c3		 ret	 0
new_context_for_socket ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@IJFAHKAB@parameter?51?5must?5be?5callable?$AA@ ; `string'
PUBLIC	??_C@_0P@BLBOHJGC@wait?5abandoned?$AA@		; `string'
PUBLIC	??_C@_0BJ@IMPAOHD@infinite?5wait?5timed?5out?$DP?$AA@ ; `string'
PUBLIC	??_C@_0BN@CNPPIGKC@param?53?5must?5be?5None?5or?5dict?$AA@ ; `string'
PUBLIC	??_C@_03IELNPCCE@?$CIO?$CJ?$AA@			; `string'
PUBLIC	??_C@_0BH@MLPLDIOI@_call_from_main_thread?$AA@	; `string'
PUBLIC	_call_from_main_thread
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyExc_SystemError:QWORD
EXTRN	PyErr_Restore:PROC
EXTRN	__imp_WaitForSingleObject:PROC
EXTRN	PyTuple_New:PROC
EXTRN	PyDict_Type:BYTE
EXTRN	Py_BuildValue:PROC
EXTRN	PyArg_UnpackTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_call_from_main_thread DD imagerel $LN35
	DD	imagerel $LN35+138
	DD	imagerel $unwind$_call_from_main_thread
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_call_from_main_thread DD imagerel $LN35+138
	DD	imagerel $LN35+798
	DD	imagerel $chain$0$_call_from_main_thread
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_call_from_main_thread DD imagerel $LN35+798
	DD	imagerel $LN35+818
	DD	imagerel $chain$1$_call_from_main_thread
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_call_from_main_thread DD 021H
	DD	imagerel $LN35
	DD	imagerel $LN35+138
	DD	imagerel $unwind$_call_from_main_thread
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_call_from_main_thread DD 020821H
	DD	010d408H
	DD	imagerel $LN35
	DD	imagerel $LN35+138
	DD	imagerel $unwind$_call_from_main_thread
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_call_from_main_thread DD 081001H
	DD	0113410H
	DD	0e00c9210H
	DD	07008c00aH
	DD	050066007H
xdata	ENDS
;	COMDAT ??_C@_0BN@IJFAHKAB@parameter?51?5must?5be?5callable?$AA@
CONST	SEGMENT
??_C@_0BN@IJFAHKAB@parameter?51?5must?5be?5callable?$AA@ DB 'parameter 1 '
	DB	'must be callable', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BLBOHJGC@wait?5abandoned?$AA@
CONST	SEGMENT
??_C@_0P@BLBOHJGC@wait?5abandoned?$AA@ DB 'wait abandoned', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@IMPAOHD@infinite?5wait?5timed?5out?$DP?$AA@
CONST	SEGMENT
??_C@_0BJ@IMPAOHD@infinite?5wait?5timed?5out?$DP?$AA@ DB 'infinite wait t'
	DB	'imed out?', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CNPPIGKC@param?53?5must?5be?5None?5or?5dict?$AA@
CONST	SEGMENT
??_C@_0BN@CNPPIGKC@param?53?5must?5be?5None?5or?5dict?$AA@ DB 'param 3 mu'
	DB	'st be None or dict', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
CONST	SEGMENT
??_C@_03IELNPCCE@?$CIO?$CJ?$AA@ DB '(O)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MLPLDIOI@_call_from_main_thread?$AA@
CONST	SEGMENT
??_C@_0BH@MLPLDIOI@_call_from_main_thread?$AA@ DB '_call_from_main_thread'
	DB	00H						; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _call_from_main_thread
_TEXT	SEGMENT
func$ = 64
arg$ = 72
self$ = 128
targs$ = 136
wait$ = 144
kwds$ = 152
_call_from_main_thread PROC				; COMDAT

; 5026 : {

$LN35:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	41 54		 push	 r12
  0000a	41 56		 push	 r14
  0000c	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 5027 :     int err;
; 5028 :     Context *c;
; 5029 :     PyObject *result = NULL;

  00010	45 33 f6	 xor	 r14d, r14d
  00013	41 8b e8	 mov	 ebp, r8d
  00016	48 8b fa	 mov	 rdi, rdx
  00019	45 8b e6	 mov	 r12d, r14d

; 5030 :     PxListItem *item;
; 5031 :     PxState *px;
; 5032 :     PyObject *func, *arg, *args, *kwds, *tmp;
; 5033 : 
; 5034 :     Px_GUARD

  0001c	e8 00 00 00 00	 call	 _Py_PXCTX
  00021	85 c0		 test	 eax, eax
  00023	75 1d		 jne	 SHORT $LN28@call_from_
  00025	45 8d 4e 01	 lea	 r9d, QWORD PTR [r14+1]
  00029	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00030	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@MLPLDIOI@_call_from_main_thread?$AA@
  00037	41 b8 aa 13 00
	00		 mov	 r8d, 5034		; 000013aaH
  0003d	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN28@call_from_:

; 5035 : 
; 5036 :     func = arg = args = kwds = tmp = NULL;
; 5037 : 
; 5038 :     c = ctx;

  00042	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00048	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00051	be 00 00 00 00	 mov	 esi, OFFSET FLAT:ctx
  00056	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  0005a	4c 89 b4 24 98
	00 00 00	 mov	 QWORD PTR kwds$[rsp], r14
  00062	4c 89 74 24 48	 mov	 QWORD PTR arg$[rsp], r14
  00067	48 8b 34 06	 mov	 rsi, QWORD PTR [rsi+rax]
  0006b	4c 89 74 24 40	 mov	 QWORD PTR func$[rsp], r14

; 5039 :     assert(!c->pstate->curexc_type);
; 5040 : 
; 5041 :     item = _PyHeap_NewListItem(c);

  00070	48 8b ce	 mov	 rcx, rsi
  00073	e8 00 00 00 00	 call	 _PyHeap_NewListItem
  00078	48 8b d8	 mov	 rbx, rax

; 5042 :     if (!item)

  0007b	48 85 c0	 test	 rax, rax
  0007e	75 0a		 jne	 SHORT $LN27@call_from_

; 5043 :         return PyErr_NoMemory();

  00080	e8 00 00 00 00	 call	 PyErr_NoMemory
  00085	e9 94 02 00 00	 jmp	 $LN29@call_from_
$LN27@call_from_:
  0008a	4c 89 ac 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], r13

; 5044 : 
; 5045 :     if (wait) {

  00092	85 ed		 test	 ebp, ebp
  00094	74 22		 je	 SHORT $LN26@call_from_

; 5046 :         assert(c->decref == NULL);
; 5047 :         c->decref = _PyHeap_NewListItem(c);

  00096	48 8b ce	 mov	 rcx, rsi
  00099	e8 00 00 00 00	 call	 _PyHeap_NewListItem
  0009e	48 89 86 50 33
	00 00		 mov	 QWORD PTR [rsi+13136], rax

; 5048 :         if (!c->decref) {

  000a5	48 85 c0	 test	 rax, rax
  000a8	75 0a		 jne	 SHORT $LN25@call_from_

; 5049 :             PyErr_NoMemory();

  000aa	e8 00 00 00 00	 call	 PyErr_NoMemory

; 5050 :             goto error;

  000af	e9 54 02 00 00	 jmp	 $error$129337
$LN25@call_from_:

; 5051 :         }
; 5052 :         c->decref->from = c;

  000b4	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi
$LN26@call_from_:

; 5053 :     }
; 5054 : 
; 5055 :     if (!PyArg_UnpackTuple(targs, "call_from_main_thread",
; 5056 :                            1, 3, &func, &arg, &kwds))

  000b8	48 8d 84 24 98
	00 00 00	 lea	 rax, QWORD PTR kwds$[rsp]
  000c0	41 b9 03 00 00
	00		 mov	 r9d, 3
  000c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@GDMKOJLI@call_from_main_thread?$AA@
  000cd	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  000d2	48 8d 44 24 48	 lea	 rax, QWORD PTR arg$[rsp]
  000d7	45 8d 41 fe	 lea	 r8d, QWORD PTR [r9-2]
  000db	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000e0	48 8d 44 24 40	 lea	 rax, QWORD PTR func$[rsp]
  000e5	48 8b cf	 mov	 rcx, rdi
  000e8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ed	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  000f2	85 c0		 test	 eax, eax
  000f4	0f 84 0e 02 00
	00		 je	 $error$129337

; 5057 :         goto error;
; 5058 : 
; 5059 :     assert(func);
; 5060 :     if (func == Py_None || !PyCallable_Check(func)) {

  000fa	48 8b 4c 24 40	 mov	 rcx, QWORD PTR func$[rsp]
  000ff	4c 8d 2d 00 00
	00 00		 lea	 r13, OFFSET FLAT:_Py_NoneStruct
  00106	49 3b cd	 cmp	 rcx, r13
  00109	0f 84 e6 01 00
	00		 je	 $LN22@call_from_
  0010f	e8 00 00 00 00	 call	 PyCallable_Check
  00114	85 c0		 test	 eax, eax
  00116	0f 84 d9 01 00
	00		 je	 $LN22@call_from_

; 5062 :         goto error;
; 5063 :     }
; 5064 : 
; 5065 :     if (kwds && kwds == Py_None)

  0011c	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR kwds$[rsp]
  00124	48 85 c0	 test	 rax, rax
  00127	74 0d		 je	 SHORT $LN19@call_from_
  00129	49 3b c5	 cmp	 rax, r13
  0012c	75 33		 jne	 SHORT $LN21@call_from_

; 5066 :         kwds = NULL;

  0012e	4c 89 b4 24 98
	00 00 00	 mov	 QWORD PTR kwds$[rsp], r14
$LN19@call_from_:

; 5072 :         }
; 5073 :     }
; 5074 : 
; 5075 :     if (arg) {

  00136	48 8b 4c 24 48	 mov	 rcx, QWORD PTR arg$[rsp]
  0013b	48 85 c9	 test	 rcx, rcx
  0013e	74 40		 je	 SHORT $LN18@call_from_

; 5076 :         if (PyTuple_Check(arg))

  00140	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00144	f7 80 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rax+256], 67108864 ; 04000000H
  0014e	75 41		 jne	 SHORT $LN13@call_from_

; 5077 :             args = arg;
; 5078 :         else {
; 5079 :             args = Py_BuildValue("(O)", arg);

  00150	48 8b d1	 mov	 rdx, rcx
  00153	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  0015a	e8 00 00 00 00	 call	 Py_BuildValue

; 5080 :             if (!args)
; 5081 :                 goto error;
; 5082 :         }
; 5083 :     } else {

  0015f	eb 24		 jmp	 SHORT $LN34@call_from_
$LN21@call_from_:

; 5067 : 
; 5068 :     if (kwds) {
; 5069 :         if (!PyDict_CheckExact(kwds)) {

  00161	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyDict_Type
  00168	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  0016c	74 c8		 je	 SHORT $LN19@call_from_
  0016e	48 39 48 38	 cmp	 QWORD PTR [rax+56], rcx
  00172	74 c2		 je	 SHORT $LN19@call_from_

; 5070 :             PyErr_SetString(PyExc_TypeError, "param 3 must be None or dict");

  00174	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@CNPPIGKC@param?53?5must?5be?5None?5or?5dict?$AA@

; 5071 :             goto error;

  0017b	e9 7c 01 00 00	 jmp	 $LN32@call_from_
$LN18@call_from_:

; 5084 :         args = PyTuple_New(0);

  00180	e8 00 00 00 00	 call	 PyTuple_New
$LN34@call_from_:
  00185	48 8b c8	 mov	 rcx, rax

; 5085 :         if (!args)

  00188	48 85 c0	 test	 rax, rax
  0018b	0f 84 77 01 00
	00		 je	 $error$129337
$LN13@call_from_:

; 5086 :             goto error;
; 5087 :     }
; 5088 : 
; 5089 :     item->p1 = func;

  00191	48 8b 44 24 40	 mov	 rax, QWORD PTR func$[rsp]

; 5090 :     item->p2 = args;

  00196	48 89 4b 28	 mov	 QWORD PTR [rbx+40], rcx
  0019a	48 89 43 20	 mov	 QWORD PTR [rbx+32], rax

; 5091 :     item->p3 = kwds;

  0019e	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR kwds$[rsp]
  001a6	48 89 43 30	 mov	 QWORD PTR [rbx+48], rax

; 5092 : 
; 5093 :     if (wait) {

  001aa	85 ed		 test	 ebp, ebp
  001ac	74 25		 je	 SHORT $LN11@call_from_

; 5094 :         item->p4 = (void *)CreateEvent(NULL, FALSE, FALSE, NULL);

  001ae	45 33 c9	 xor	 r9d, r9d
  001b1	45 33 c0	 xor	 r8d, r8d
  001b4	33 d2		 xor	 edx, edx
  001b6	33 c9		 xor	 ecx, ecx
  001b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateEventW
  001be	48 89 43 38	 mov	 QWORD PTR [rbx+56], rax

; 5095 :         if (!item->p4) {

  001c2	48 85 c0	 test	 rax, rax
  001c5	75 0c		 jne	 SHORT $LN11@call_from_

; 5096 :             PyErr_SetFromWindowsErr(0);

  001c7	33 c9		 xor	 ecx, ecx
  001c9	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 5097 :             goto error;

  001ce	e9 35 01 00 00	 jmp	 $error$129337
$LN11@call_from_:

; 5098 :         }
; 5099 :     } else
; 5100 :         assert(item->p4 == NULL);
; 5101 : 
; 5102 :     px = c->px;

  001d3	48 8b be d8 00
	00 00		 mov	 rdi, QWORD PTR [rsi+216]

; 5103 : 
; 5104 :     if (wait) {

  001da	85 ed		 test	 ebp, ebp
  001dc	74 11		 je	 SHORT $LN9@call_from_

; 5105 :         InterlockedIncrement64(&(px->sync_wait_submitted));

  001de	f0 48 ff 87 78
	01 00 00	 lock inc QWORD PTR [rdi+376]

; 5106 :         InterlockedIncrement(&(px->sync_wait_pending));

  001e6	f0 ff 87 80 01
	00 00		 lock inc DWORD PTR [rdi+384]

; 5107 :     } else {

  001ed	eb 26		 jmp	 SHORT $LN8@call_from_
$LN9@call_from_:

; 5108 :         Px_INCCTX(c);

  001ef	48 8b ce	 mov	 rcx, rsi
  001f2	e8 00 00 00 00	 call	 Px_INCCTX

; 5109 :         PxList_Push(c->outgoing, item);

  001f7	48 8b 8e 40 33
	00 00		 mov	 rcx, QWORD PTR [rsi+13120]
  001fe	48 8b d3	 mov	 rdx, rbx
  00201	e8 00 00 00 00	 call	 PxList_Push

; 5110 :         InterlockedIncrement64(&(px->sync_nowait_submitted));

  00206	f0 48 ff 87 90
	01 00 00	 lock inc QWORD PTR [rdi+400]

; 5111 :         InterlockedIncrement(&(px->sync_nowait_pending));

  0020e	f0 ff 87 98 01
	00 00		 lock inc DWORD PTR [rdi+408]
$LN8@call_from_:

; 5112 :     }
; 5113 : 
; 5114 :     //InterlockedIncrement(&(px->active));
; 5115 :     item->from = c;
; 5116 :     PxList_TimestampItem(item);

  00215	48 8b cb	 mov	 rcx, rbx
  00218	48 89 73 18	 mov	 QWORD PTR [rbx+24], rsi
  0021c	e8 00 00 00 00	 call	 PxList_TimestampItem

; 5117 :     PxList_Push(px->incoming, item);

  00221	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00225	48 8b d3	 mov	 rdx, rbx
  00228	e8 00 00 00 00	 call	 PxList_Push

; 5118 :     SetEvent(px->wakeup);

  0022d	48 8b 8f a0 00
	00 00		 mov	 rcx, QWORD PTR [rdi+160]
  00234	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetEvent

; 5119 :     if (!wait)

  0023a	85 ed		 test	 ebp, ebp
  0023c	75 08		 jne	 SHORT $LN7@call_from_

; 5120 :         return Py_None;

  0023e	49 8b c5	 mov	 rax, r13
  00241	e9 d0 00 00 00	 jmp	 $LN31@call_from_
$LN7@call_from_:

; 5121 : 
; 5122 :     _PyParallel_DisassociateCurrentThreadFromCallback();

  00246	e8 00 00 00 00	 call	 _PyParallel_DisassociateCurrentThreadFromCallback

; 5123 :     err = WaitForSingleObject(item->p4, INFINITE);

  0024b	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  0024f	83 ca ff	 or	 edx, -1			; ffffffffH
  00252	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WaitForSingleObject

; 5124 :     switch (err) {

  00258	83 f8 ff	 cmp	 eax, -1
  0025b	74 72		 je	 SHORT $LN2@call_from_
  0025d	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  00262	74 56		 je	 SHORT $LN4@call_from_
  00264	3d 02 01 00 00	 cmp	 eax, 258		; 00000102H
  00269	74 3a		 je	 SHORT $LN3@call_from_

; 5133 :             goto cleanup;
; 5134 :     }
; 5135 :     assert(err == WAIT_OBJECT_0);
; 5136 : 
; 5137 :     if (item->p1 && PyExceptionClass_Check((PyObject *)item->p1)) {

  0026b	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  0026f	48 85 c9	 test	 rcx, rcx
  00272	74 2b		 je	 SHORT $LN1@call_from_
  00274	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00278	f7 80 00 01 00
	00 00 00 00 80	 test	 DWORD PTR [rax+256], -2147483648 ; ffffffff80000000H
  00282	74 1b		 je	 SHORT $LN1@call_from_
  00284	f7 81 00 01 00
	00 00 00 00 40	 test	 DWORD PTR [rcx+256], 1073741824 ; 40000000H
  0028e	74 0f		 je	 SHORT $LN1@call_from_

; 5138 :         PyErr_Restore((PyObject *)item->p1,
; 5139 :                       (PyObject *)item->p2,
; 5140 :                       (PyObject *)item->p3);

  00290	4c 8b 43 30	 mov	 r8, QWORD PTR [rbx+48]
  00294	48 8b 53 28	 mov	 rdx, QWORD PTR [rbx+40]
  00298	e8 00 00 00 00	 call	 PyErr_Restore

; 5141 :         goto cleanup;

  0029d	eb 37		 jmp	 SHORT $cleanup$129374
$LN1@call_from_:

; 5142 :     }
; 5143 : 
; 5144 :     assert(item->p1 == NULL);
; 5145 :     assert(item->p2 != NULL);
; 5146 :     assert(item->p3 == NULL);
; 5147 :     result = (PyObject *)item->p2;

  0029f	4c 8b 63 28	 mov	 r12, QWORD PTR [rbx+40]
  002a3	eb 31		 jmp	 SHORT $cleanup$129374
$LN3@call_from_:

; 5128 :         case WAIT_TIMEOUT:
; 5129 :             PyErr_SetString(PyExc_SystemError, "infinite wait timed out?");

  002a5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  002ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@IMPAOHD@infinite?5wait?5timed?5out?$DP?$AA@
  002b3	e8 00 00 00 00	 call	 PyErr_SetString

; 5130 :             goto cleanup;

  002b8	eb 1c		 jmp	 SHORT $cleanup$129374
$LN4@call_from_:

; 5125 :         case WAIT_ABANDONED:
; 5126 :             PyErr_SetString(PyExc_SystemError, "wait abandoned");

  002ba	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  002c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@BLBOHJGC@wait?5abandoned?$AA@
  002c8	e8 00 00 00 00	 call	 PyErr_SetString

; 5127 :             goto cleanup;

  002cd	eb 07		 jmp	 SHORT $cleanup$129374
$LN2@call_from_:

; 5131 :         case WAIT_FAILED:
; 5132 :             PyErr_SetFromWindowsErr(0);

  002cf	33 c9		 xor	 ecx, ecx
  002d1	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
$cleanup$129374:

; 5148 : 
; 5149 : cleanup:
; 5150 :     assert(c->decref == NULL);
; 5151 :     InterlockedDecrement(&(px->sync_wait_inflight));

  002d6	f0 ff 8f 84 01
	00 00		 lock dec DWORD PTR [rdi+388]

; 5152 :     InterlockedIncrement64(&(px->sync_wait_done));

  002dd	f0 48 ff 87 88
	01 00 00	 lock inc QWORD PTR [rdi+392]

; 5153 : 
; 5154 :     CloseHandle(item->p4);

  002e5	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  002e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 5155 :     item->p4 = NULL;

  002ef	4c 89 73 38	 mov	 QWORD PTR [rbx+56], r14
  002f3	eb 13		 jmp	 SHORT $error$129337
$LN22@call_from_:

; 5061 :         PyErr_SetString(PyExc_TypeError, "parameter 1 must be callable");

  002f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IJFAHKAB@parameter?51?5must?5be?5callable?$AA@
$LN32@call_from_:
  002fc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00303	e8 00 00 00 00	 call	 PyErr_SetString
$error$129337:

; 5156 : error:
; 5157 :     _PyHeap_Free(c, item);

  00308	48 8b d3	 mov	 rdx, rbx
  0030b	48 8b ce	 mov	 rcx, rsi
  0030e	e8 00 00 00 00	 call	 _PyHeap_Free

; 5158 : 
; 5159 :     return result;

  00313	49 8b c4	 mov	 rax, r12
$LN31@call_from_:
  00316	4c 8b ac 24 80
	00 00 00	 mov	 r13, QWORD PTR [rsp+128]
$LN29@call_from_:

; 5160 : }

  0031e	48 8b 9c 24 88
	00 00 00	 mov	 rbx, QWORD PTR [rsp+136]
  00326	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0032a	41 5e		 pop	 r14
  0032c	41 5c		 pop	 r12
  0032e	5f		 pop	 rdi
  0032f	5e		 pop	 rsi
  00330	5d		 pop	 rbp
  00331	c3		 ret	 0
_call_from_main_thread ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _async_call_from_main_thread
_TEXT	SEGMENT
self$ = 8
args$ = 16
_async_call_from_main_thread PROC			; COMDAT

; 5165 :     return _call_from_main_thread(self, args, 0);

  00000	45 33 c0	 xor	 r8d, r8d

; 5166 : }

  00003	e9 00 00 00 00	 jmp	 _call_from_main_thread
_async_call_from_main_thread ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _async_call_from_main_thread_and_wait
_TEXT	SEGMENT
self$ = 8
args$ = 16
_async_call_from_main_thread_and_wait PROC		; COMDAT

; 5171 :     return _call_from_main_thread(self, args, 1);

  00000	41 b8 01 00 00
	00		 mov	 r8d, 1

; 5172 : }

  00006	e9 00 00 00 00	 jmp	 _call_from_main_thread
_async_call_from_main_thread_and_wait ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@BANAMHPF@_Px_NewReference?$AA@	; `string'
PUBLIC	_Px_NewReference
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Px_NewReference DD imagerel $LN5
	DD	imagerel $LN5+150
	DD	imagerel $unwind$_Px_NewReference
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Px_NewReference DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0BB@BANAMHPF@_Px_NewReference?$AA@
CONST	SEGMENT
??_C@_0BB@BANAMHPF@_Px_NewReference?$AA@ DB '_Px_NewReference', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Px_NewReference
_TEXT	SEGMENT
op$ = 64
_Px_NewReference PROC					; COMDAT

; 5608 : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 5609 :     Px_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 1d		 jne	 SHORT $LN2@Px_NewRefe
  00012	44 8d 48 01	 lea	 r9d, QWORD PTR [rax+1]
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@BANAMHPF@_Px_NewReference?$AA@
  00024	41 b8 e9 15 00
	00		 mov	 r8d, 5609		; 000015e9H
  0002a	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN2@Px_NewRefe:

; 5610 :     Px_GUARD_MEM(op);

  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@BANAMHPF@_Px_NewReference?$AA@
  0003d	4c 8b cb	 mov	 r9, rbx
  00040	41 b8 ea 15 00
	00		 mov	 r8d, 5610		; 000015eaH
  00046	c7 44 24 20 00
	04 00 00	 mov	 DWORD PTR [rsp+32], 1024 ; 00000400H
  0004e	e8 00 00 00 00	 call	 _PyParallel_Guard

; 5611 : 
; 5612 : #ifdef Py_DEBUG
; 5613 :     if (!_Px_TEST(op))
; 5614 :         printf("\n_Px_NewReference(op) -> failed _Px_TEST!\n");
; 5615 :     if (!Py_ASPX(op))
; 5616 :         printf("\n_Px_NewReference: no px object!\n");
; 5617 : #endif
; 5618 : 
; 5619 :     assert(op->is_px != _Py_NOT_PARALLEL);
; 5620 : 
; 5621 :     if (op->is_px != _Py_IS_PARALLEL)

  00053	49 bb ad de 32
	54 ef be 76 98	 mov	 r11, -7460565797573566803 ; 9876beef5432deadH
  0005d	4c 39 1b	 cmp	 QWORD PTR [rbx], r11
  00060	74 03		 je	 SHORT $LN1@Px_NewRefe

; 5622 :         op->is_px = _Py_IS_PARALLEL;

  00062	4c 89 1b	 mov	 QWORD PTR [rbx], r11
$LN1@Px_NewRefe:

; 5623 : 
; 5624 :     assert(Py_TYPE(op));
; 5625 : 
; 5626 :     op->ob_refcnt = 1;
; 5627 :     ctx->stats.newrefs++;

  00065	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0006b	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00074	48 c7 43 50 01
	00 00 00	 mov	 QWORD PTR [rbx+80], 1
  0007c	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00080	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:ctx
  00085	48 8b 0c 10	 mov	 rcx, QWORD PTR [rax+rdx]
  00089	48 ff 81 80 01
	00 00		 inc	 QWORD PTR [rcx+384]

; 5628 : }

  00090	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00094	5b		 pop	 rbx
  00095	c3		 ret	 0
_Px_NewReference ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@ECHKNDAB@_Px_ForgetReference?$AA@	; `string'
PUBLIC	_Px_ForgetReference
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Px_ForgetReference DD imagerel $LN4
	DD	imagerel $LN4+118
	DD	imagerel $unwind$_Px_ForgetReference
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Px_ForgetReference DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0BE@ECHKNDAB@_Px_ForgetReference?$AA@
CONST	SEGMENT
??_C@_0BE@ECHKNDAB@_Px_ForgetReference?$AA@ DB '_Px_ForgetReference', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Px_ForgetReference
_TEXT	SEGMENT
op$ = 64
_Px_ForgetReference PROC				; COMDAT

; 5632 : {

$LN4:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 5633 :     Px_GUARD_OBJ(op);

  00004	4c 8b c9	 mov	 r9, rcx
  00007	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@ECHKNDAB@_Px_ForgetReference?$AA@
  00015	41 b8 01 16 00
	00		 mov	 r8d, 5633		; 00001601H
  0001b	c7 44 24 20 40
	00 00 00	 mov	 DWORD PTR [rsp+32], 64	; 00000040H
  00023	e8 00 00 00 00	 call	 _PyParallel_Guard

; 5634 :     Px_GUARD

  00028	e8 00 00 00 00	 call	 _Py_PXCTX
  0002d	85 c0		 test	 eax, eax
  0002f	75 1d		 jne	 SHORT $LN1@Px_ForgetR
  00031	44 8d 48 01	 lea	 r9d, QWORD PTR [rax+1]
  00035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@ECHKNDAB@_Px_ForgetReference?$AA@
  00043	41 b8 02 16 00
	00		 mov	 r8d, 5634		; 00001602H
  00049	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@Px_ForgetR:

; 5635 :     ctx->stats.forgetrefs++;

  0004e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00054	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0005d	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:ctx
  00062	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00066	48 8b 0c 10	 mov	 rcx, QWORD PTR [rax+rdx]
  0006a	48 ff 81 88 01
	00 00		 inc	 QWORD PTR [rcx+392]

; 5636 : }

  00071	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00075	c3		 ret	 0
_Px_ForgetReference ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@GNJGHPCG@_Px_Dealloc?$AA@		; `string'
PUBLIC	_Px_Dealloc
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Px_Dealloc DD imagerel $LN4
	DD	imagerel $LN4+134
	DD	imagerel $unwind$_Px_Dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Px_Dealloc DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0M@GNJGHPCG@_Px_Dealloc?$AA@
CONST	SEGMENT
??_C@_0M@GNJGHPCG@_Px_Dealloc?$AA@ DB '_Px_Dealloc', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Px_Dealloc
_TEXT	SEGMENT
op$ = 64
_Px_Dealloc PROC					; COMDAT

; 5640 : {

$LN4:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 5641 :     Px_GUARD_OBJ(op);

  00004	4c 8b c9	 mov	 r9, rcx
  00007	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@GNJGHPCG@_Px_Dealloc?$AA@
  00015	41 b8 09 16 00
	00		 mov	 r8d, 5641		; 00001609H
  0001b	c7 44 24 20 40
	00 00 00	 mov	 DWORD PTR [rsp+32], 64	; 00000040H
  00023	e8 00 00 00 00	 call	 _PyParallel_Guard

; 5642 :     Px_GUARD

  00028	e8 00 00 00 00	 call	 _Py_PXCTX
  0002d	85 c0		 test	 eax, eax
  0002f	75 1d		 jne	 SHORT $LN1@Px_Dealloc
  00031	44 8d 48 01	 lea	 r9d, QWORD PTR [rax+1]
  00035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@GNJGHPCG@_Px_Dealloc?$AA@
  00043	41 b8 0a 16 00
	00		 mov	 r8d, 5642		; 0000160aH
  00049	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@Px_Dealloc:

; 5643 :     assert(Py_ASPX(op)->ctx == ctx);
; 5644 :     ctx->h->deallocs++;

  0004e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00054	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0005d	41 b8 00 00 00
	00		 mov	 r8d, OFFSET FLAT:ctx
  00063	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  00067	4a 8b 04 02	 mov	 rax, QWORD PTR [rdx+r8]
  0006b	48 8b 88 d0 00
	00 00		 mov	 rcx, QWORD PTR [rax+208]
  00072	48 ff 41 70	 inc	 QWORD PTR [rcx+112]

; 5645 :     ctx->stats.deallocs++;

  00076	4a 8b 04 02	 mov	 rax, QWORD PTR [rdx+r8]
  0007a	48 ff 80 58 01
	00 00		 inc	 QWORD PTR [rax+344]

; 5646 : }

  00081	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00085	c3		 ret	 0
_Px_Dealloc ENDP
_TEXT	ENDS
PUBLIC	_PxObject_New
; Function compile flags: /Ogtpy
;	COMDAT _PxObject_New
_TEXT	SEGMENT
tp$ = 8
_PxObject_New PROC					; COMDAT

; 5651 :     return Object_New(tp, ctx);

  00000	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _tls_index
  00006	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0000f	41 b8 00 00 00
	00		 mov	 r8d, OFFSET FLAT:ctx
  00015	48 8b 14 c2	 mov	 rdx, QWORD PTR [rdx+rax*8]
  00019	4a 8b 14 02	 mov	 rdx, QWORD PTR [rdx+r8]

; 5652 : }

  0001d	e9 00 00 00 00	 jmp	 Object_New
_PxObject_New ENDP
_TEXT	ENDS
PUBLIC	_PxObject_NewVar
; Function compile flags: /Ogtpy
;	COMDAT _PxObject_NewVar
_TEXT	SEGMENT
tp$ = 8
nitems$ = 16
_PxObject_NewVar PROC					; COMDAT

; 5657 :     return VarObject_New(tp, nitems, ctx);

  00000	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _tls_index
  00006	65 4c 8b 04 25
	58 00 00 00	 mov	 r8, QWORD PTR gs:88
  0000f	41 b9 00 00 00
	00		 mov	 r9d, OFFSET FLAT:ctx
  00015	4d 8b 04 c0	 mov	 r8, QWORD PTR [r8+rax*8]
  00019	4f 8b 04 08	 mov	 r8, QWORD PTR [r8+r9]

; 5658 : }

  0001d	e9 00 00 00 00	 jmp	 VarObject_New
_PxObject_NewVar ENDP
_TEXT	ENDS
PUBLIC	_PxObject_Init
; Function compile flags: /Ogtpy
;	COMDAT _PxObject_Init
_TEXT	SEGMENT
op$ = 8
tp$ = 16
_PxObject_Init PROC					; COMDAT

; 5663 :     return Object_Init(op, tp, ctx);

  00000	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _tls_index
  00006	65 4c 8b 04 25
	58 00 00 00	 mov	 r8, QWORD PTR gs:88
  0000f	41 b9 00 00 00
	00		 mov	 r9d, OFFSET FLAT:ctx
  00015	4d 8b 04 c0	 mov	 r8, QWORD PTR [r8+rax*8]
  00019	4f 8b 04 08	 mov	 r8, QWORD PTR [r8+r9]

; 5664 : }

  0001d	e9 00 00 00 00	 jmp	 Object_Init
_PxObject_Init ENDP
_TEXT	ENDS
PUBLIC	_PxObject_InitVar
; Function compile flags: /Ogtpy
;	COMDAT _PxObject_InitVar
_TEXT	SEGMENT
op$ = 8
tp$ = 16
nitems$ = 24
_PxObject_InitVar PROC					; COMDAT

; 5669 :     return VarObject_Init(op, tp, nitems, ctx);

  00000	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _tls_index
  00006	65 4c 8b 0c 25
	58 00 00 00	 mov	 r9, QWORD PTR gs:88
  0000f	41 ba 00 00 00
	00		 mov	 r10d, OFFSET FLAT:ctx
  00015	4d 8b 0c c1	 mov	 r9, QWORD PTR [r9+rax*8]
  00019	4f 8b 0c 11	 mov	 r9, QWORD PTR [r9+r10]

; 5670 : }

  0001d	e9 00 00 00 00	 jmp	 VarObject_Init
_PxObject_InitVar ENDP
_TEXT	ENDS
PUBLIC	_PxObject_Resize
; Function compile flags: /Ogtpy
;	COMDAT _PxObject_Resize
_TEXT	SEGMENT
op$ = 8
nitems$ = 16
_PxObject_Resize PROC					; COMDAT

; 5676 :     return VarObject_Resize((PyObject *)op, nitems, ctx);

  00000	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _tls_index
  00006	65 4c 8b 04 25
	58 00 00 00	 mov	 r8, QWORD PTR gs:88
  0000f	41 b9 00 00 00
	00		 mov	 r9d, OFFSET FLAT:ctx
  00015	4d 8b 04 c0	 mov	 r8, QWORD PTR [r8+rax*8]
  00019	4f 8b 04 08	 mov	 r8, QWORD PTR [r8+r9]

; 5677 : }

  0001d	e9 00 00 00 00	 jmp	 VarObject_Resize
_PxObject_Resize ENDP
_TEXT	ENDS
PUBLIC	_PxMem_Free
; Function compile flags: /Ogtpy
;	COMDAT _PxMem_Free
_TEXT	SEGMENT
p$ = 8
_PxMem_Free PROC					; COMDAT

; 5695 :     _PxObject_Free(p);
; 5696 : }

  00000	e9 00 00 00 00	 jmp	 _PxObject_Free
_PxMem_Free ENDP
_TEXT	ENDS
PUBLIC	Px_DecRef
;	COMDAT pdata
pdata	SEGMENT
$pdata$Px_DecRef DD imagerel $LN10
	DD	imagerel $LN10+103
	DD	imagerel $unwind$Px_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Px_DecRef DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT Px_DecRef
_TEXT	SEGMENT
o$ = 48
Px_DecRef PROC						; COMDAT

; 5713 : {

$LN10:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 5714 :     assert(!Py_PXCTX);
; 5715 :     assert(Px_PERSISTED(o) || Px_CLONED(o));
; 5716 : 
; 5717 :     _Py_DEC_REFTOTAL;
; 5718 :     if ((--((PyObject *)(o))->ob_refcnt) != 0) {

  00004	48 ff 49 50	 dec	 QWORD PTR [rcx+80]
  00008	75 58		 jne	 SHORT $LN2@Px_DecRef

; 5719 :         _Py_CHECK_REFCNT(o);
; 5720 :     } else {
; 5721 :         if (Px_PERSISTED(o)) {

  0000a	f6 41 20 20	 test	 BYTE PTR [rcx+32], 32	; 00000020H
  0000e	74 52		 je	 SHORT $LN2@Px_DecRef

; 5722 :             Context *c = Py_ASPX(o)->ctx;

  00010	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00014	48 8b 08	 mov	 rcx, QWORD PTR [rax]

; 5723 :             int count = InterlockedDecrement(&(c->persisted_count));

  00017	83 c8 ff	 or	 eax, -1
  0001a	f0 0f c1 81 10
	38 00 00	 lock xadd DWORD PTR [rcx+14352], eax
  00022	ff c8		 dec	 eax

; 5724 :             if (count < 0)

  00024	79 1b		 jns	 SHORT $LN4@Px_DecRef

; 5725 :                 _Px_NegativePersistedCount(__FILE__, __LINE__, c, count);

  00026	4c 8b c1	 mov	 r8, rcx
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00030	44 8b c8	 mov	 r9d, eax
  00033	ba 5d 16 00 00	 mov	 edx, 5725		; 0000165dH

; 5729 :             }
; 5730 :             return;
; 5731 :         } else {
; 5732 :             assert(Px_CLONED(o));
; 5733 :             /* xxx todo: decref parent's children count */
; 5734 : 
; 5735 :             return;
; 5736 :         }
; 5737 : 
; 5738 :         assert(0);
; 5739 :     }
; 5740 : }

  00038	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003c	e9 00 00 00 00	 jmp	 _Px_NegativePersistedCount
$LN4@Px_DecRef:

; 5726 :             else if (count == 0) {

  00041	85 c0		 test	 eax, eax
  00043	75 1d		 jne	 SHORT $LN2@Px_DecRef

; 5727 :                 InterlockedDecrement(&(c->px->contexts_persisted));

  00045	48 8b 81 d8 00
	00 00		 mov	 rax, QWORD PTR [rcx+216]

; 5728 :                 _PxState_FreeContext(c->px, c);

  0004c	48 8b d1	 mov	 rdx, rcx
  0004f	f0 ff 88 ec 00
	00 00		 lock dec DWORD PTR [rax+236]
  00056	48 8b 89 d8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+216]
  0005d	e8 00 00 00 00	 call	 _PxState_FreeContext
$LN2@Px_DecRef:

; 5729 :             }
; 5730 :             return;
; 5731 :         } else {
; 5732 :             assert(Px_CLONED(o));
; 5733 :             /* xxx todo: decref parent's children count */
; 5734 : 
; 5735 :             return;
; 5736 :         }
; 5737 : 
; 5738 :         assert(0);
; 5739 :     }
; 5740 : }

  00062	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00066	c3		 ret	 0
Px_DecRef ENDP
_TEXT	ENDS
PUBLIC	new_pxsocketbuf
EXTRN	PyBytes_AsString:PROC
EXTRN	PyBytes_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$new_pxsocketbuf DD imagerel $LN4
	DD	imagerel $LN4+140
	DD	imagerel $unwind$new_pxsocketbuf
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$new_pxsocketbuf DD 085501H
	DD	063455H
	DD	08640fH
	DD	07540fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT new_pxsocketbuf
_TEXT	SEGMENT
c$ = 48
nbytes$ = 56
new_pxsocketbuf PROC					; COMDAT

; 6920 : {

$LN4:
  00000	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b f2	 mov	 rsi, rdx

; 6921 :     size_t size;
; 6922 :     PxSocketBuf *sbuf;
; 6923 :     PyBytesObject *pbuf;
; 6924 : 
; 6925 :     size = nbytes + sizeof(PxSocketBuf);
; 6926 : 
; 6927 :     sbuf = (PxSocketBuf *)_PyHeap_Malloc(c, size, 0, 0);

  00012	45 33 c9	 xor	 r9d, r9d
  00015	45 33 c0	 xor	 r8d, r8d
  00018	48 81 c2 b0 00
	00 00		 add	 rdx, 176		; 000000b0H
  0001f	48 8b e9	 mov	 rbp, rcx
  00022	e8 00 00 00 00	 call	 _PyHeap_Malloc
  00027	48 8b f8	 mov	 rdi, rax

; 6928 :     if (!sbuf)

  0002a	48 85 c0	 test	 rax, rax
  0002d	75 10		 jne	 SHORT $LN1@new_pxsock@3

; 6937 :     return sbuf;
; 6938 : }

  0002f	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00034	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00039	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003d	5f		 pop	 rdi
  0003e	c3		 ret	 0
$LN1@new_pxsock@3:

; 6929 :         return NULL;
; 6930 : 
; 6931 :     pbuf = PxSocketBuf2PyBytesObject(sbuf);
; 6932 :     (void)init_object(c, (PyObject *)pbuf, &PyBytes_Type, nbytes);

  0003f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyBytes_Type
  00046	48 8d 50 30	 lea	 rdx, QWORD PTR [rax+48]
  0004a	4c 8b ce	 mov	 r9, rsi
  0004d	48 8b cd	 mov	 rcx, rbp
  00050	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00055	e8 00 00 00 00	 call	 init_object

; 6933 : 
; 6934 :     sbuf->signature = _PxSocketBufSignature;

  0005a	4c 8b 1d 00 00
	00 00		 mov	 r11, QWORD PTR _PxSocketBufSignature

; 6935 :     sbuf->w.len = (ULONG)nbytes;
; 6936 :     sbuf->w.buf = PyBytes_AsString((PyObject *)pbuf);

  00061	48 8d 4f 30	 lea	 rcx, QWORD PTR [rdi+48]
  00065	4c 89 5f 20	 mov	 QWORD PTR [rdi+32], r11
  00069	89 37		 mov	 DWORD PTR [rdi], esi
  0006b	e8 00 00 00 00	 call	 PyBytes_AsString
  00070	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 6937 :     return sbuf;
; 6938 : }

  00075	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0007a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0007f	48 89 47 08	 mov	 QWORD PTR [rdi+8], rax
  00083	48 8b c7	 mov	 rax, rdi
  00086	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008a	5f		 pop	 rdi
  0008b	c3		 ret	 0
new_pxsocketbuf ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@MJMFODLA@_PyObject_Dealloc?$AA@	; `string'
PUBLIC	_PyObject_Dealloc
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel.c
pdata	SEGMENT
$pdata$_PyObject_Dealloc DD imagerel $LN9
	DD	imagerel $LN9+225
	DD	imagerel $unwind$_PyObject_Dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_Dealloc DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT ??_C@_0BC@MJMFODLA@_PyObject_Dealloc?$AA@
CONST	SEGMENT
??_C@_0BC@MJMFODLA@_PyObject_Dealloc?$AA@ DB '_PyObject_Dealloc', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyObject_Dealloc
_TEXT	SEGMENT
o$ = 64
_PyObject_Dealloc PROC					; COMDAT

; 602  : {

$LN9:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b d9	 mov	 rbx, rcx

; 603  :     PyTypeObject *tp;
; 604  :     PyMappingMethods *mm;
; 605  :     //PySequenceMethods *sm;
; 606  :     destructor d;
; 607  : 
; 608  :     Py_GUARD_OBJ(o);

  00012	4c 8b c9	 mov	 r9, rcx
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@MJMFODLA@_PyObject_Dealloc?$AA@
  00023	41 b8 60 02 00
	00		 mov	 r8d, 608		; 00000260H
  00029	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR [rsp+32], 32	; 00000020H
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard

; 609  :     Py_GUARD

  00036	e8 00 00 00 00	 call	 _Py_PXCTX
  0003b	85 c0		 test	 eax, eax
  0003d	74 1c		 je	 SHORT $LN2@PyObject_D
  0003f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@MJMFODLA@_PyObject_Dealloc?$AA@
  0004d	45 33 c9	 xor	 r9d, r9d
  00050	41 b8 61 02 00
	00		 mov	 r8d, 609		; 00000261H
  00056	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN2@PyObject_D:

; 610  : 
; 611  :     assert(Py_ORIG_TYPE(o));
; 612  : 
; 613  :     if (Py_HAS_EVENT(o))

  0005b	f6 43 20 08	 test	 BYTE PTR [rbx+32], 8
  0005f	74 0a		 je	 SHORT $LN1@PyObject_D

; 614  :         PyEvent_DESTROY(o);

  00061	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  00065	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle
$LN1@PyObject_D:

; 615  : 
; 616  :     tp = Py_TYPE(o);
; 617  :     mm = tp->tp_as_mapping;
; 618  :     //sm = tp->tp_as_sequence;
; 619  :     d = Py_ORIG_TYPE_CAST(o)->tp_dealloc;

  0006b	48 8b 43 38	 mov	 rax, QWORD PTR [rbx+56]
  0006f	48 8b 7b 58	 mov	 rdi, QWORD PTR [rbx+88]

; 620  :     Py_TYPE(o) = Py_ORIG_TYPE(o);
; 621  :     Py_ORIG_TYPE(o) = NULL;
; 622  :     (*d)(o);

  00073	48 8b cb	 mov	 rcx, rbx
  00076	48 8b 90 88 00
	00 00		 mov	 rdx, QWORD PTR [rax+136]
  0007d	48 8b b7 c8 00
	00 00		 mov	 rsi, QWORD PTR [rdi+200]
  00084	48 89 43 58	 mov	 QWORD PTR [rbx+88], rax
  00088	48 c7 43 38 00
	00 00 00	 mov	 QWORD PTR [rbx+56], 0
  00090	ff d2		 call	 rdx

; 623  :     PyMem_FREE(tp);

  00092	e8 00 00 00 00	 call	 _Py_PXCTX
  00097	48 8b cf	 mov	 rcx, rdi
  0009a	85 c0		 test	 eax, eax
  0009c	74 07		 je	 SHORT $LN5@PyObject_D
  0009e	e8 00 00 00 00	 call	 _PxMem_Free
  000a3	eb 06		 jmp	 SHORT $LN6@PyObject_D
$LN5@PyObject_D:
  000a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN6@PyObject_D:

; 624  :     PyMem_FREE(mm);

  000ab	e8 00 00 00 00	 call	 _Py_PXCTX
  000b0	48 8b ce	 mov	 rcx, rsi
  000b3	85 c0		 test	 eax, eax
  000b5	74 14		 je	 SHORT $LN7@PyObject_D

; 625  :     //PyMem_FREE(sm);
; 626  : }

  000b7	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000bc	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000c1	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c5	5f		 pop	 rdi
  000c6	e9 00 00 00 00	 jmp	 _PxMem_Free
$LN7@PyObject_D:
  000cb	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000d0	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000d5	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d9	5f		 pop	 rdi
  000da	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_free
_PyObject_Dealloc ENDP
_TEXT	ENDS
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_async_protected DD imagerel $LN17
	DD	imagerel $LN17+244
	DD	imagerel $unwind$_async_protected
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_protected DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT _async_protected
_TEXT	SEGMENT
self$ = 64
obj$ = 72
_async_protected PROC					; COMDAT

; 640  : {

$LN17:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b da	 mov	 rbx, rdx

; 641  :     Py_INCREF(obj);

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN6@async_prot
  00012	4c 8b ca	 mov	 r9, rdx
  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN5@async_prot
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN6@async_prot
$LN5@async_prot:
  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN6@async_prot:

; 642  :     Py_RETURN_BOOL(_protected(obj));

  00044	48 8b cb	 mov	 rcx, rbx
  00047	e8 00 00 00 00	 call	 _protected
  0004c	84 c0		 test	 al, al
  0004e	74 52		 je	 SHORT $LN3@async_prot
  00050	e8 00 00 00 00	 call	 _Py_PXCTX
  00055	85 c0		 test	 eax, eax
  00057	75 3c		 jne	 SHORT $LN10@async_prot
  00059	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_TrueStruct
  00060	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00067	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0006e	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00074	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0007c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00081	85 c0		 test	 eax, eax
  00083	75 09		 jne	 SHORT $LN9@async_prot
  00085	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_TrueStruct+32, 32 ; 00000020H
  0008c	74 07		 je	 SHORT $LN10@async_prot
$LN9@async_prot:
  0008e	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_TrueStruct+80
$LN10@async_prot:
  00095	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct

; 643  : }

  0009c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a0	5b		 pop	 rbx
  000a1	c3		 ret	 0
$LN3@async_prot:

; 642  :     Py_RETURN_BOOL(_protected(obj));

  000a2	e8 00 00 00 00	 call	 _Py_PXCTX
  000a7	85 c0		 test	 eax, eax
  000a9	75 3c		 jne	 SHORT $LN14@async_prot
  000ab	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_FalseStruct
  000b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000c0	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000c6	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000ce	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d3	85 c0		 test	 eax, eax
  000d5	75 09		 jne	 SHORT $LN13@async_prot
  000d7	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  000de	74 07		 je	 SHORT $LN14@async_prot
$LN13@async_prot:
  000e0	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN14@async_prot:
  000e7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 643  : }

  000ee	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000f2	5b		 pop	 rbx
  000f3	c3		 ret	 0
_async_protected ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@JFIHBBGO@_async_unprotect?$AA@	; `string'
_BSS	SEGMENT
PyExc_ProtectionError DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_async_unprotect DD imagerel $LN12
	DD	imagerel $LN12+218
	DD	imagerel $unwind$_async_unprotect
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_unprotect DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0BB@JFIHBBGO@_async_unprotect?$AA@
CONST	SEGMENT
??_C@_0BB@JFIHBBGO@_async_unprotect?$AA@ DB '_async_unprotect', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
CONST	ENDS
;	COMDAT _async_unprotect
_TEXT	SEGMENT
self$ = 64
obj$ = 72
_async_unprotect PROC					; COMDAT

; 663  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b da	 mov	 rbx, rdx

; 664  :     Py_INCREF(obj);

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN5@async_unpr
  00012	4c 8b ca	 mov	 r9, rdx
  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN4@async_unpr
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN5@async_unpr
$LN4@async_unpr:
  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN5@async_unpr:

; 665  :     if (Py_ISPX(obj)) {

  00044	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@JFIHBBGO@_async_unprotect?$AA@
  00052	4c 8b cb	 mov	 r9, rbx
  00055	41 b8 99 02 00
	00		 mov	 r8d, 665		; 00000299H
  0005b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00063	e8 00 00 00 00	 call	 _PyParallel_Guard
  00068	85 c0		 test	 eax, eax
  0006a	74 14		 je	 SHORT $LN1@async_unpr

; 666  :         PyErr_SetNone(PyExc_ProtectionError);

  0006c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ProtectionError
  00073	e8 00 00 00 00	 call	 PyErr_SetNone

; 667  :         return NULL;

  00078	33 c0		 xor	 eax, eax

; 671  : }

  0007a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0007e	5b		 pop	 rbx
  0007f	c3		 ret	 0
$LN1@async_unpr:

; 668  :     }
; 669  :     _unprotect(obj);

  00080	48 8b cb	 mov	 rcx, rbx
  00083	e8 00 00 00 00	 call	 _unprotect

; 670  :     Py_RETURN_NONE;

  00088	e8 00 00 00 00	 call	 _Py_PXCTX
  0008d	85 c0		 test	 eax, eax
  0008f	75 3c		 jne	 SHORT $LN9@async_unpr
  00091	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00098	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0009f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000a6	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000ac	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000b4	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b9	85 c0		 test	 eax, eax
  000bb	75 09		 jne	 SHORT $LN8@async_unpr
  000bd	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  000c4	74 07		 je	 SHORT $LN9@async_unpr
$LN8@async_unpr:
  000c6	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN9@async_unpr:
  000cd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 671  : }

  000d4	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d8	5b		 pop	 rbx
  000d9	c3		 ret	 0
_async_unprotect ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel_private.h
pdata	SEGMENT
$pdata$_async_read_lock DD imagerel $LN13
	DD	imagerel $LN13+119
	DD	imagerel $unwind$_async_read_lock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_read_lock DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT _async_read_lock
_TEXT	SEGMENT
self$ = 64
obj$ = 72
_async_read_lock PROC					; COMDAT

; 675  : {

$LN13:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 676  :     Px_PROTECTION_GUARD(obj);

  00006	48 8b ca	 mov	 rcx, rdx
  00009	48 8b da	 mov	 rbx, rdx
  0000c	e8 00 00 00 00	 call	 _protected
  00011	84 c0		 test	 al, al
  00013	75 14		 jne	 SHORT $LN3@async_read
  00015	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ProtectionError
  0001c	e8 00 00 00 00	 call	 PyErr_SetNone
  00021	33 c0		 xor	 eax, eax

; 679  : }

  00023	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00027	5b		 pop	 rbx
  00028	c3		 ret	 0
$LN3@async_read:

; 677  :     Py_INCREF(obj);

  00029	e8 00 00 00 00	 call	 _Py_PXCTX
  0002e	85 c0		 test	 eax, eax
  00030	75 32		 jne	 SHORT $LN8@async_read
  00032	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00040	4c 8b cb	 mov	 r9, rbx
  00043	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00049	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00051	e8 00 00 00 00	 call	 _PyParallel_Guard
  00056	85 c0		 test	 eax, eax
  00058	75 06		 jne	 SHORT $LN7@async_read
  0005a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0005e	74 04		 je	 SHORT $LN8@async_read
$LN7@async_read:
  00060	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN8@async_read:

; 678  :     return _read_lock(obj);

  00064	48 8d 4b 28	 lea	 rcx, QWORD PTR [rbx+40]
  00068	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AcquireSRWLockShared
  0006e	48 8b c3	 mov	 rax, rbx

; 679  : }

  00071	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00075	5b		 pop	 rbx
  00076	c3		 ret	 0
_async_read_lock ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel_private.h
pdata	SEGMENT
$pdata$_async_read_unlock DD imagerel $LN13
	DD	imagerel $LN13+119
	DD	imagerel $unwind$_async_read_unlock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_read_unlock DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT _async_read_unlock
_TEXT	SEGMENT
self$ = 64
obj$ = 72
_async_read_unlock PROC					; COMDAT

; 683  : {

$LN13:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 684  :     Px_PROTECTION_GUARD(obj);

  00006	48 8b ca	 mov	 rcx, rdx
  00009	48 8b da	 mov	 rbx, rdx
  0000c	e8 00 00 00 00	 call	 _protected
  00011	84 c0		 test	 al, al
  00013	75 14		 jne	 SHORT $LN3@async_read@2
  00015	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ProtectionError
  0001c	e8 00 00 00 00	 call	 PyErr_SetNone
  00021	33 c0		 xor	 eax, eax

; 687  : }

  00023	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00027	5b		 pop	 rbx
  00028	c3		 ret	 0
$LN3@async_read@2:

; 685  :     Py_INCREF(obj);

  00029	e8 00 00 00 00	 call	 _Py_PXCTX
  0002e	85 c0		 test	 eax, eax
  00030	75 32		 jne	 SHORT $LN8@async_read@2
  00032	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00040	4c 8b cb	 mov	 r9, rbx
  00043	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00049	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00051	e8 00 00 00 00	 call	 _PyParallel_Guard
  00056	85 c0		 test	 eax, eax
  00058	75 06		 jne	 SHORT $LN7@async_read@2
  0005a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0005e	74 04		 je	 SHORT $LN8@async_read@2
$LN7@async_read@2:
  00060	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN8@async_read@2:

; 686  :     return _read_unlock(obj);

  00064	48 8d 4b 28	 lea	 rcx, QWORD PTR [rbx+40]
  00068	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseSRWLockShared
  0006e	48 8b c3	 mov	 rax, rbx

; 687  : }

  00071	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00075	5b		 pop	 rbx
  00076	c3		 ret	 0
_async_read_unlock ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_async_try_read_lock DD imagerel $LN23
	DD	imagerel $LN23+280
	DD	imagerel $unwind$_async_try_read_lock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_try_read_lock DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT _async_try_read_lock
_TEXT	SEGMENT
self$ = 64
obj$ = 72
_async_try_read_lock PROC				; COMDAT

; 691  : {

$LN23:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 692  :     Px_PROTECTION_GUARD(obj);

  00006	48 8b ca	 mov	 rcx, rdx
  00009	48 8b da	 mov	 rbx, rdx
  0000c	e8 00 00 00 00	 call	 _protected
  00011	84 c0		 test	 al, al
  00013	75 14		 jne	 SHORT $LN3@async_try_
  00015	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ProtectionError
  0001c	e8 00 00 00 00	 call	 PyErr_SetNone
  00021	33 c0		 xor	 eax, eax

; 695  : }

  00023	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00027	5b		 pop	 rbx
  00028	c3		 ret	 0
$LN3@async_try_:

; 693  :     Py_INCREF(obj);

  00029	e8 00 00 00 00	 call	 _Py_PXCTX
  0002e	85 c0		 test	 eax, eax
  00030	75 32		 jne	 SHORT $LN10@async_try_
  00032	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00040	4c 8b cb	 mov	 r9, rbx
  00043	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00049	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00051	e8 00 00 00 00	 call	 _PyParallel_Guard
  00056	85 c0		 test	 eax, eax
  00058	75 06		 jne	 SHORT $LN9@async_try_
  0005a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0005e	74 04		 je	 SHORT $LN10@async_try_
$LN9@async_try_:
  00060	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN10@async_try_:

; 694  :     Py_RETURN_BOOL(_try_read_lock(obj));

  00064	48 8d 4b 28	 lea	 rcx, QWORD PTR [rbx+40]
  00068	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TryAcquireSRWLockShared
  0006e	84 c0		 test	 al, al
  00070	74 55		 je	 SHORT $LN7@async_try_
  00072	e8 00 00 00 00	 call	 _Py_PXCTX
  00077	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_TrueStruct
  0007e	85 c0		 test	 eax, eax
  00080	0f 85 89 00 00
	00		 jne	 $LN20@async_try_
  00086	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0008d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00094	4c 8b cb	 mov	 r9, rbx
  00097	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0009d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000a5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000aa	85 c0		 test	 eax, eax
  000ac	75 09		 jne	 SHORT $LN15@async_try_
  000ae	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_TrueStruct+32, 32 ; 00000020H
  000b5	74 58		 je	 SHORT $LN20@async_try_
$LN15@async_try_:
  000b7	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_TrueStruct+80
  000be	48 8b c3	 mov	 rax, rbx

; 695  : }

  000c1	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c5	5b		 pop	 rbx
  000c6	c3		 ret	 0
$LN7@async_try_:

; 694  :     Py_RETURN_BOOL(_try_read_lock(obj));

  000c7	e8 00 00 00 00	 call	 _Py_PXCTX
  000cc	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  000d3	85 c0		 test	 eax, eax
  000d5	75 38		 jne	 SHORT $LN20@async_try_
  000d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000e5	4c 8b cb	 mov	 r9, rbx
  000e8	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000ee	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000f6	e8 00 00 00 00	 call	 _PyParallel_Guard
  000fb	85 c0		 test	 eax, eax
  000fd	75 09		 jne	 SHORT $LN19@async_try_
  000ff	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  00106	74 07		 je	 SHORT $LN20@async_try_
$LN19@async_try_:
  00108	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN20@async_try_:
  0010f	48 8b c3	 mov	 rax, rbx

; 695  : }

  00112	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00116	5b		 pop	 rbx
  00117	c3		 ret	 0
_async_try_read_lock ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel_private.h
pdata	SEGMENT
$pdata$_async_write_lock DD imagerel $LN13
	DD	imagerel $LN13+119
	DD	imagerel $unwind$_async_write_lock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_write_lock DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT _async_write_lock
_TEXT	SEGMENT
self$ = 64
obj$ = 72
_async_write_lock PROC					; COMDAT

; 699  : {

$LN13:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 700  :     Px_PROTECTION_GUARD(obj);

  00006	48 8b ca	 mov	 rcx, rdx
  00009	48 8b da	 mov	 rbx, rdx
  0000c	e8 00 00 00 00	 call	 _protected
  00011	84 c0		 test	 al, al
  00013	75 14		 jne	 SHORT $LN3@async_writ
  00015	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ProtectionError
  0001c	e8 00 00 00 00	 call	 PyErr_SetNone
  00021	33 c0		 xor	 eax, eax

; 703  : }

  00023	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00027	5b		 pop	 rbx
  00028	c3		 ret	 0
$LN3@async_writ:

; 701  :     Py_INCREF(obj);

  00029	e8 00 00 00 00	 call	 _Py_PXCTX
  0002e	85 c0		 test	 eax, eax
  00030	75 32		 jne	 SHORT $LN8@async_writ
  00032	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00040	4c 8b cb	 mov	 r9, rbx
  00043	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00049	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00051	e8 00 00 00 00	 call	 _PyParallel_Guard
  00056	85 c0		 test	 eax, eax
  00058	75 06		 jne	 SHORT $LN7@async_writ
  0005a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0005e	74 04		 je	 SHORT $LN8@async_writ
$LN7@async_writ:
  00060	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN8@async_writ:

; 702  :     return _write_lock(obj);

  00064	48 8d 4b 28	 lea	 rcx, QWORD PTR [rbx+40]
  00068	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AcquireSRWLockExclusive
  0006e	48 8b c3	 mov	 rax, rbx

; 703  : }

  00071	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00075	5b		 pop	 rbx
  00076	c3		 ret	 0
_async_write_lock ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel_private.h
pdata	SEGMENT
$pdata$_async_write_unlock DD imagerel $LN13
	DD	imagerel $LN13+119
	DD	imagerel $unwind$_async_write_unlock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_write_unlock DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT _async_write_unlock
_TEXT	SEGMENT
self$ = 64
obj$ = 72
_async_write_unlock PROC				; COMDAT

; 707  : {

$LN13:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 708  :     Px_PROTECTION_GUARD(obj);

  00006	48 8b ca	 mov	 rcx, rdx
  00009	48 8b da	 mov	 rbx, rdx
  0000c	e8 00 00 00 00	 call	 _protected
  00011	84 c0		 test	 al, al
  00013	75 14		 jne	 SHORT $LN3@async_writ@2
  00015	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ProtectionError
  0001c	e8 00 00 00 00	 call	 PyErr_SetNone
  00021	33 c0		 xor	 eax, eax

; 711  : }

  00023	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00027	5b		 pop	 rbx
  00028	c3		 ret	 0
$LN3@async_writ@2:

; 709  :     Py_INCREF(obj);

  00029	e8 00 00 00 00	 call	 _Py_PXCTX
  0002e	85 c0		 test	 eax, eax
  00030	75 32		 jne	 SHORT $LN8@async_writ@2
  00032	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00040	4c 8b cb	 mov	 r9, rbx
  00043	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00049	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00051	e8 00 00 00 00	 call	 _PyParallel_Guard
  00056	85 c0		 test	 eax, eax
  00058	75 06		 jne	 SHORT $LN7@async_writ@2
  0005a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0005e	74 04		 je	 SHORT $LN8@async_writ@2
$LN7@async_writ@2:
  00060	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN8@async_writ@2:

; 710  :     return _write_unlock(obj);

  00064	48 8d 4b 28	 lea	 rcx, QWORD PTR [rbx+40]
  00068	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseSRWLockExclusive
  0006e	48 8b c3	 mov	 rax, rbx

; 711  : }

  00071	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00075	5b		 pop	 rbx
  00076	c3		 ret	 0
_async_write_unlock ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_async_try_write_lock DD imagerel $LN23
	DD	imagerel $LN23+280
	DD	imagerel $unwind$_async_try_write_lock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_try_write_lock DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT _async_try_write_lock
_TEXT	SEGMENT
self$ = 64
obj$ = 72
_async_try_write_lock PROC				; COMDAT

; 715  : {

$LN23:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 716  :     Px_PROTECTION_GUARD(obj);

  00006	48 8b ca	 mov	 rcx, rdx
  00009	48 8b da	 mov	 rbx, rdx
  0000c	e8 00 00 00 00	 call	 _protected
  00011	84 c0		 test	 al, al
  00013	75 14		 jne	 SHORT $LN3@async_try_@2
  00015	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ProtectionError
  0001c	e8 00 00 00 00	 call	 PyErr_SetNone
  00021	33 c0		 xor	 eax, eax

; 719  : }

  00023	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00027	5b		 pop	 rbx
  00028	c3		 ret	 0
$LN3@async_try_@2:

; 717  :     Py_INCREF(obj);

  00029	e8 00 00 00 00	 call	 _Py_PXCTX
  0002e	85 c0		 test	 eax, eax
  00030	75 32		 jne	 SHORT $LN10@async_try_@2
  00032	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00040	4c 8b cb	 mov	 r9, rbx
  00043	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00049	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00051	e8 00 00 00 00	 call	 _PyParallel_Guard
  00056	85 c0		 test	 eax, eax
  00058	75 06		 jne	 SHORT $LN9@async_try_@2
  0005a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0005e	74 04		 je	 SHORT $LN10@async_try_@2
$LN9@async_try_@2:
  00060	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN10@async_try_@2:

; 718  :     Py_RETURN_BOOL(_try_write_lock(obj));

  00064	48 8d 4b 28	 lea	 rcx, QWORD PTR [rbx+40]
  00068	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TryAcquireSRWLockExclusive
  0006e	84 c0		 test	 al, al
  00070	74 55		 je	 SHORT $LN7@async_try_@2
  00072	e8 00 00 00 00	 call	 _Py_PXCTX
  00077	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_TrueStruct
  0007e	85 c0		 test	 eax, eax
  00080	0f 85 89 00 00
	00		 jne	 $LN20@async_try_@2
  00086	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0008d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00094	4c 8b cb	 mov	 r9, rbx
  00097	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0009d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000a5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000aa	85 c0		 test	 eax, eax
  000ac	75 09		 jne	 SHORT $LN15@async_try_@2
  000ae	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_TrueStruct+32, 32 ; 00000020H
  000b5	74 58		 je	 SHORT $LN20@async_try_@2
$LN15@async_try_@2:
  000b7	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_TrueStruct+80
  000be	48 8b c3	 mov	 rax, rbx

; 719  : }

  000c1	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c5	5b		 pop	 rbx
  000c6	c3		 ret	 0
$LN7@async_try_@2:

; 718  :     Py_RETURN_BOOL(_try_write_lock(obj));

  000c7	e8 00 00 00 00	 call	 _Py_PXCTX
  000cc	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  000d3	85 c0		 test	 eax, eax
  000d5	75 38		 jne	 SHORT $LN20@async_try_@2
  000d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000e5	4c 8b cb	 mov	 r9, rbx
  000e8	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000ee	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000f6	e8 00 00 00 00	 call	 _PyParallel_Guard
  000fb	85 c0		 test	 eax, eax
  000fd	75 09		 jne	 SHORT $LN19@async_try_@2
  000ff	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  00106	74 07		 je	 SHORT $LN20@async_try_@2
$LN19@async_try_@2:
  00108	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN20@async_try_@2:
  0010f	48 8b c3	 mov	 rax, rbx

; 719  : }

  00112	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00116	5b		 pop	 rbx
  00117	c3		 ret	 0
_async_try_write_lock ENDP
_TEXT	ENDS
PUBLIC	_Px_objobjargproc_ass
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Px_objobjargproc_ass DD imagerel $LN8
	DD	imagerel $LN8+125
	DD	imagerel $unwind$_Px_objobjargproc_ass
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Px_objobjargproc_ass DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _Px_objobjargproc_ass
_TEXT	SEGMENT
o$ = 48
k$ = 56
v$ = 64
_Px_objobjargproc_ass PROC				; COMDAT

; 778  : {

$LN8:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 779  :     if (!Py_PXCTX && !Py_PXCB) {

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	75 05		 jne	 SHORT $LN3@Px_objobja
  00021	e8 00 00 00 00	 call	 _PyParallel_ExecutingCallbackFromMainThread
$LN3@Px_objobja:

; 780  :         assert(!Px_ISPX(o));
; 781  :         assert(!Px_ISPX(k));
; 782  :         assert(!Px_XISPX(v));
; 783  :     }
; 784  :     if (!Px_ISPY(o) || (!Py_PXCTX && !Py_PXCB))

  00026	f6 43 20 01	 test	 BYTE PTR [rbx+32], 1
  0002a	74 3c		 je	 SHORT $LN1@Px_objobja
  0002c	e8 00 00 00 00	 call	 _Py_PXCTX
  00031	85 c0		 test	 eax, eax
  00033	75 09		 jne	 SHORT $LN2@Px_objobja
  00035	e8 00 00 00 00	 call	 _PyParallel_ExecutingCallbackFromMainThread
  0003a	85 c0		 test	 eax, eax
  0003c	74 2a		 je	 SHORT $LN1@Px_objobja
$LN2@Px_objobja:

; 785  :         return 1;
; 786  : 
; 787  :     return !(!_Px_TryPersist(k) || !_Px_TryPersist(v));

  0003e	48 8b ce	 mov	 rcx, rsi
  00041	e8 00 00 00 00	 call	 _Px_TryPersist
  00046	85 c0		 test	 eax, eax
  00048	74 0c		 je	 SHORT $LN6@Px_objobja
  0004a	48 8b cf	 mov	 rcx, rdi
  0004d	e8 00 00 00 00	 call	 _Px_TryPersist
  00052	85 c0		 test	 eax, eax
  00054	75 12		 jne	 SHORT $LN1@Px_objobja
$LN6@Px_objobja:
  00056	33 c0		 xor	 eax, eax

; 788  : }

  00058	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00062	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00066	5f		 pop	 rdi
  00067	c3		 ret	 0
$LN1@Px_objobja:
  00068	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0006d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00072	b8 01 00 00 00	 mov	 eax, 1
  00077	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007b	5f		 pop	 rdi
  0007c	c3		 ret	 0
_Px_objobjargproc_ass ENDP
_TEXT	ENDS
PUBLIC	_PyObject_GenericSetAttr
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel_private.h
pdata	SEGMENT
$pdata$_PyObject_GenericSetAttr DD imagerel $LN14
	DD	imagerel $LN14+149
	DD	imagerel $unwind$_PyObject_GenericSetAttr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_GenericSetAttr DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT _PyObject_GenericSetAttr
_TEXT	SEGMENT
o$ = 48
n$ = 56
v$ = 64
_PyObject_GenericSetAttr PROC				; COMDAT

; 793  : {

$LN14:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 794  :     PyTypeObject *tp;
; 795  :     int result;
; 796  :     assert(Py_ORIG_TYPE(o));
; 797  : 
; 798  :     _Px_WRITE_LOCK(o);

  00014	f6 41 20 04	 test	 BYTE PTR [rcx+32], 4
  00018	49 8b f0	 mov	 rsi, r8
  0001b	48 8b ea	 mov	 rbp, rdx
  0001e	48 8b d9	 mov	 rbx, rcx
  00021	74 0a		 je	 SHORT $LN9@PyObject_G@2
  00023	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00027	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AcquireSRWLockExclusive
$LN9@PyObject_G@2:

; 799  :     tp = Py_ORIG_TYPE_CAST(o);

  0002d	48 8b 43 38	 mov	 rax, QWORD PTR [rbx+56]

; 800  :     if (tp->tp_setattro)
; 801  :         result = (*tp->tp_setattro)(o, n, v);

  00031	4c 8b c6	 mov	 r8, rsi
  00034	48 8b d5	 mov	 rdx, rbp
  00037	4c 8b 88 f0 00
	00 00		 mov	 r9, QWORD PTR [rax+240]
  0003e	48 8b cb	 mov	 rcx, rbx
  00041	4d 85 c9	 test	 r9, r9
  00044	74 05		 je	 SHORT $LN5@PyObject_G@2
  00046	41 ff d1	 call	 r9

; 802  :     else

  00049	eb 05		 jmp	 SHORT $LN13@PyObject_G@2
$LN5@PyObject_G@2:

; 803  :         result = PyObject_GenericSetAttr(o, n, v);

  0004b	e8 00 00 00 00	 call	 PyObject_GenericSetAttr
$LN13@PyObject_G@2:

; 804  :     _Px_WRITE_UNLOCK(o);

  00050	f6 43 20 04	 test	 BYTE PTR [rbx+32], 4
  00054	8b f8		 mov	 edi, eax
  00056	74 0a		 je	 SHORT $LN11@PyObject_G@2
  00058	48 8d 4b 28	 lea	 rcx, QWORD PTR [rbx+40]
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseSRWLockExclusive
$LN11@PyObject_G@2:

; 805  :     if (result == -1 || !_Px_objobjargproc_ass(o, n, v))

  00062	83 ff ff	 cmp	 edi, -1
  00065	74 16		 je	 SHORT $LN1@PyObject_G@2
  00067	4c 8b c6	 mov	 r8, rsi
  0006a	48 8b d5	 mov	 rdx, rbp
  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 _Px_objobjargproc_ass
  00075	85 c0		 test	 eax, eax
  00077	74 04		 je	 SHORT $LN1@PyObject_G@2

; 807  : 
; 808  :     return result;

  00079	8b c7		 mov	 eax, edi
  0007b	eb 03		 jmp	 SHORT $LN7@PyObject_G@2
$LN1@PyObject_G@2:

; 806  :         return -1;

  0007d	83 c8 ff	 or	 eax, -1
$LN7@PyObject_G@2:

; 809  : }

  00080	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00085	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0008a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0008f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00093	5f		 pop	 rdi
  00094	c3		 ret	 0
_PyObject_GenericSetAttr ENDP
_TEXT	ENDS
PUBLIC	_PyObject_SetAttrString
EXTRN	PyUnicode_InternFromString:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel_private.h
pdata	SEGMENT
$pdata$_PyObject_SetAttrString DD imagerel $LN13
	DD	imagerel $LN13+187
	DD	imagerel $unwind$_PyObject_SetAttrString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_SetAttrString DD 083101H
	DD	066431H
	DD	08540fH
	DD	07340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT _PyObject_SetAttrString
_TEXT	SEGMENT
o$ = 48
n$ = 56
v$ = 64
_PyObject_SetAttrString PROC				; COMDAT

; 831  : {

$LN13:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 832  :     PyTypeObject *tp;
; 833  :     int result;
; 834  :     assert(Py_ORIG_TYPE(o));
; 835  : 
; 836  :     _Px_WRITE_LOCK(o);

  0000f	f6 41 20 04	 test	 BYTE PTR [rcx+32], 4
  00013	49 8b e8	 mov	 rbp, r8
  00016	48 8b fa	 mov	 rdi, rdx
  00019	48 8b d9	 mov	 rbx, rcx
  0001c	74 0a		 je	 SHORT $LN9@PyObject_S
  0001e	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00022	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AcquireSRWLockExclusive
$LN9@PyObject_S:

; 837  :     tp = Py_ORIG_TYPE_CAST(o);

  00028	48 8b 43 38	 mov	 rax, QWORD PTR [rbx+56]
  0002c	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi

; 838  :     if (tp->tp_setattr)

  00031	4c 8b 88 a0 00
	00 00		 mov	 r9, QWORD PTR [rax+160]
  00038	4d 85 c9	 test	 r9, r9
  0003b	74 10		 je	 SHORT $LN5@PyObject_S

; 839  :         result = (*tp->tp_setattr)(o, n, v);

  0003d	4c 8b c5	 mov	 r8, rbp
  00040	48 8b d7	 mov	 rdx, rdi
  00043	48 8b cb	 mov	 rcx, rbx
  00046	41 ff d1	 call	 r9
  00049	8b f8		 mov	 edi, eax

; 840  :     else {

  0004b	eb 2d		 jmp	 SHORT $LN4@PyObject_S
$LN5@PyObject_S:

; 841  :         PyObject *s;
; 842  :         s = PyUnicode_InternFromString(n);

  0004d	48 8b cf	 mov	 rcx, rdi
  00050	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00055	48 8b f0	 mov	 rsi, rax

; 843  :         if (!s)

  00058	48 85 c0	 test	 rax, rax
  0005b	75 05		 jne	 SHORT $LN3@PyObject_S

; 844  :             return -1;

  0005d	83 c8 ff	 or	 eax, -1
  00060	eb 44		 jmp	 SHORT $LN7@PyObject_S
$LN3@PyObject_S:

; 845  :         result = PyObject_GenericSetAttr(o, s, v);

  00062	4c 8b c5	 mov	 r8, rbp
  00065	48 8b d0	 mov	 rdx, rax
  00068	48 8b cb	 mov	 rcx, rbx
  0006b	e8 00 00 00 00	 call	 PyObject_GenericSetAttr

; 846  :         Py_DECREF(s);

  00070	48 8b ce	 mov	 rcx, rsi
  00073	8b f8		 mov	 edi, eax
  00075	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@PyObject_S:

; 847  :     }
; 848  :     _Px_WRITE_UNLOCK(o);

  0007a	f6 43 20 04	 test	 BYTE PTR [rbx+32], 4
  0007e	74 0a		 je	 SHORT $LN11@PyObject_S
  00080	48 8d 4b 28	 lea	 rcx, QWORD PTR [rbx+40]
  00084	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseSRWLockExclusive
$LN11@PyObject_S:

; 849  :     if (result != -1 && !_Px_objobjargproc_ass(o, NULL, v))

  0008a	83 ff ff	 cmp	 edi, -1
  0008d	74 15		 je	 SHORT $LN1@PyObject_S
  0008f	4c 8b c5	 mov	 r8, rbp
  00092	33 d2		 xor	 edx, edx
  00094	48 8b cb	 mov	 rcx, rbx
  00097	e8 00 00 00 00	 call	 _Px_objobjargproc_ass
  0009c	83 c9 ff	 or	 ecx, -1
  0009f	85 c0		 test	 eax, eax
  000a1	0f 44 f9	 cmove	 edi, ecx
$LN1@PyObject_S:

; 850  :         result = -1;
; 851  : 
; 852  :     return result;

  000a4	8b c7		 mov	 eax, edi
$LN7@PyObject_S:
  000a6	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]

; 853  : }

  000ab	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000b0	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  000b5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b9	5f		 pop	 rdi
  000ba	c3		 ret	 0
_PyObject_SetAttrString ENDP
_TEXT	ENDS
PUBLIC	_PyObject_GetAttrString
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel_private.h
pdata	SEGMENT
$pdata$_PyObject_GetAttrString DD imagerel $LN12
	DD	imagerel $LN12+156
	DD	imagerel $unwind$_PyObject_GetAttrString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_GetAttrString DD 062901H
	DD	066429H
	DD	07340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT _PyObject_GetAttrString
_TEXT	SEGMENT
o$ = 48
n$ = 56
_PyObject_GetAttrString PROC				; COMDAT

; 857  : {

$LN12:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 858  :     PyTypeObject *tp;
; 859  :     PyObject *result;
; 860  :     assert(Py_ORIG_TYPE(o));
; 861  : 
; 862  :     _Px_READ_LOCK(o);

  0000a	f6 41 20 04	 test	 BYTE PTR [rcx+32], 4
  0000e	48 8b fa	 mov	 rdi, rdx
  00011	48 8b d9	 mov	 rbx, rcx
  00014	74 0a		 je	 SHORT $LN8@PyObject_G@3
  00016	48 83 c1 28	 add	 rcx, 40			; 00000028H
  0001a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AcquireSRWLockShared
$LN8@PyObject_G@3:

; 863  :     tp = Py_ORIG_TYPE_CAST(o);

  00020	48 8b 43 38	 mov	 rax, QWORD PTR [rbx+56]
  00024	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi

; 864  :     if (tp->tp_getattr)

  00029	4c 8b 80 98 00
	00 00		 mov	 r8, QWORD PTR [rax+152]
  00030	4d 85 c0	 test	 r8, r8
  00033	74 0e		 je	 SHORT $LN4@PyObject_G@3

; 865  :         result = (*tp->tp_getattr)(o, n);

  00035	48 8b d7	 mov	 rdx, rdi
  00038	48 8b cb	 mov	 rcx, rbx
  0003b	41 ff d0	 call	 r8
  0003e	48 8b f8	 mov	 rdi, rax

; 866  :     else {

  00041	eb 36		 jmp	 SHORT $LN3@PyObject_G@3
$LN4@PyObject_G@3:

; 867  :         PyObject *s;
; 868  :         s = PyUnicode_InternFromString(n);

  00043	48 8b cf	 mov	 rcx, rdi
  00046	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  0004b	48 8b f0	 mov	 rsi, rax

; 869  :         if (!s)

  0004e	48 85 c0	 test	 rax, rax
  00051	75 10		 jne	 SHORT $LN2@PyObject_G@3
  00053	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]

; 875  : 
; 876  :     return result;
; 877  : }

  00058	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0005d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00061	5f		 pop	 rdi
  00062	c3		 ret	 0
$LN2@PyObject_G@3:

; 870  :             return NULL;
; 871  :         result = PyObject_GenericGetAttr(o, s);

  00063	48 8b d0	 mov	 rdx, rax
  00066	48 8b cb	 mov	 rcx, rbx
  00069	e8 00 00 00 00	 call	 PyObject_GenericGetAttr

; 872  :         Py_DECREF(s);

  0006e	48 8b ce	 mov	 rcx, rsi
  00071	48 8b f8	 mov	 rdi, rax
  00074	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@PyObject_G@3:

; 873  :     }
; 874  :     _Px_READ_UNLOCK(o);

  00079	f6 43 20 04	 test	 BYTE PTR [rbx+32], 4
  0007d	74 0a		 je	 SHORT $LN10@PyObject_G@3
  0007f	48 8d 4b 28	 lea	 rcx, QWORD PTR [rbx+40]
  00083	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseSRWLockShared
$LN10@PyObject_G@3:

; 875  : 
; 876  :     return result;
; 877  : }

  00089	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  0008e	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00093	48 8b c7	 mov	 rax, rdi
  00096	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009a	5f		 pop	 rdi
  0009b	c3		 ret	 0
_PyObject_GetAttrString ENDP
_TEXT	ENDS
PUBLIC	_Px_mp_ass_subscript
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel_private.h
pdata	SEGMENT
$pdata$_Px_mp_ass_subscript DD imagerel $LN11
	DD	imagerel $LN11+138
	DD	imagerel $unwind$_Px_mp_ass_subscript
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Px_mp_ass_subscript DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT _Px_mp_ass_subscript
_TEXT	SEGMENT
o$ = 48
k$ = 56
v$ = 64
_Px_mp_ass_subscript PROC				; COMDAT

; 904  : {

$LN11:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 905  :     int result;
; 906  :     assert(Py_ORIG_TYPE(o));
; 907  :     _Px_WRITE_LOCK(o);

  00014	f6 41 20 04	 test	 BYTE PTR [rcx+32], 4
  00018	49 8b f0	 mov	 rsi, r8
  0001b	48 8b ea	 mov	 rbp, rdx
  0001e	48 8b d9	 mov	 rbx, rcx
  00021	74 0a		 je	 SHORT $LN7@Px_mp_ass_
  00023	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00027	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AcquireSRWLockExclusive
$LN7@Px_mp_ass_:

; 908  :     result = Py_ORIG_TYPE_CAST(o)->tp_as_mapping->mp_ass_subscript(o, k, v);

  0002d	48 8b 43 38	 mov	 rax, QWORD PTR [rbx+56]
  00031	4c 8b c6	 mov	 r8, rsi
  00034	48 8b d5	 mov	 rdx, rbp
  00037	4c 8b 88 c8 00
	00 00		 mov	 r9, QWORD PTR [rax+200]
  0003e	48 8b cb	 mov	 rcx, rbx
  00041	41 ff 51 10	 call	 QWORD PTR [r9+16]

; 909  :     _Px_WRITE_UNLOCK(o);

  00045	f6 43 20 04	 test	 BYTE PTR [rbx+32], 4
  00049	8b f8		 mov	 edi, eax
  0004b	74 0a		 je	 SHORT $LN9@Px_mp_ass_
  0004d	48 8d 4b 28	 lea	 rcx, QWORD PTR [rbx+40]
  00051	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseSRWLockExclusive
$LN9@Px_mp_ass_:

; 910  :     if (result == -1 || !_Px_objobjargproc_ass(o, k, v))

  00057	83 ff ff	 cmp	 edi, -1
  0005a	74 16		 je	 SHORT $LN1@Px_mp_ass_
  0005c	4c 8b c6	 mov	 r8, rsi
  0005f	48 8b d5	 mov	 rdx, rbp
  00062	48 8b cb	 mov	 rcx, rbx
  00065	e8 00 00 00 00	 call	 _Px_objobjargproc_ass
  0006a	85 c0		 test	 eax, eax
  0006c	74 04		 je	 SHORT $LN1@Px_mp_ass_

; 912  :     return result;

  0006e	8b c7		 mov	 eax, edi
  00070	eb 03		 jmp	 SHORT $LN5@Px_mp_ass_
$LN1@Px_mp_ass_:

; 911  :         return -1;

  00072	83 c8 ff	 or	 eax, -1
$LN5@Px_mp_ass_:

; 913  : }

  00075	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0007a	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0007f	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00084	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00088	5f		 pop	 rdi
  00089	c3		 ret	 0
_Px_mp_ass_subscript ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ ; `string'
PUBLIC	??_C@_0BH@KCLIIPCK@_PyObject_PrepOrigType?$AA@	; `string'
PUBLIC	_PyObject_PrepOrigType
EXTRN	_PyGC_generation0:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_PrepOrigType DD imagerel $LN51
	DD	imagerel $LN51+1004
	DD	imagerel $unwind$_PyObject_PrepOrigType
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_PrepOrigType DD 0c1c01H
	DD	0f641cH
	DD	0e541cH
	DD	0d341cH
	DD	0f018521cH
	DD	0d014e016H
	DD	07010c012H
xdata	ENDS
;	COMDAT ??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
CONST	SEGMENT
??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ DB 'GC object alread'
	DB	'y tracked', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@KCLIIPCK@_PyObject_PrepOrigType?$AA@
CONST	SEGMENT
??_C@_0BH@KCLIIPCK@_PyObject_PrepOrigType?$AA@ DB '_PyObject_PrepOrigType'
	DB	00H						; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyObject_PrepOrigType
_TEXT	SEGMENT
offset$1$ = 96
o$ = 96
kwds$ = 104
_PyObject_PrepOrigType PROC				; COMDAT

; 929  : {

$LN51:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	41 56		 push	 r14
  00016	41 57		 push	 r15
  00018	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 930  :     PyMappingMethods *old_mm, *new_mm;
; 931  :     /*PySequenceMethods *old_sm, *new_sm;*/
; 932  : 
; 933  :     if (!Py_ORIG_TYPE(o)) {

  0001c	48 83 79 38 00	 cmp	 QWORD PTR [rcx+56], 0
  00021	4c 8b f9	 mov	 r15, rcx
  00024	0f 85 a3 03 00
	00		 jne	 $check_invariants$126246

; 934  :         PyTypeObject *type = Py_TYPE(o), *tp;

  0002a	4c 8b 61 58	 mov	 r12, QWORD PTR [rcx+88]

; 935  :         size_t size;
; 936  :         void *offset = type;

  0002e	4c 89 64 24 60	 mov	 QWORD PTR offset$1$[rsp], r12

; 937  :         void *m;
; 938  :         int is_heap = PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE);

  00033	41 8b 9c 24 00
	01 00 00	 mov	 ebx, DWORD PTR [r12+256]
  0003b	8b fb		 mov	 edi, ebx
  0003d	c1 ef 09	 shr	 edi, 9
  00040	83 e7 01	 and	 edi, 1

; 939  :         int is_gc = PyType_IS_GC(type);

  00043	e8 00 00 00 00	 call	 _Py_PXCTX
  00048	33 f6		 xor	 esi, esi
  0004a	85 c0		 test	 eax, eax
  0004c	74 04		 je	 SHORT $LN24@PyObject_P
  0004e	8b de		 mov	 ebx, esi
  00050	eb 06		 jmp	 SHORT $LN25@PyObject_P
$LN24@PyObject_P:
  00052	c1 eb 0e	 shr	 ebx, 14
  00055	83 e3 01	 and	 ebx, 1
$LN25@PyObject_P:

; 940  :         int is_tracked = 0;
; 941  : 
; 942  :         if (is_heap)

  00058	85 ff		 test	 edi, edi
  0005a	b8 90 03 00 00	 mov	 eax, 912		; 00000390H
  0005f	41 bd e0 01 00
	00		 mov	 r13d, 480		; 000001e0H
  00065	44 0f 45 e8	 cmovne	 r13d, eax
  00069	44 8b f6	 mov	 r14d, esi

; 943  :             size = sizeof(PyHeapTypeObject);
; 944  :         else
; 945  :             size = sizeof(PyTypeObject);
; 946  : 
; 947  :         if (is_gc && is_heap) {

  0006c	85 db		 test	 ebx, ebx
  0006e	0f 84 a4 00 00
	00		 je	 $LN31@PyObject_P
  00074	85 ff		 test	 edi, edi
  00076	0f 84 9c 00 00
	00		 je	 $LN31@PyObject_P

; 948  :             size += sizeof(PyGC_Head);
; 949  :             offset = _Py_AS_GC(type);

  0007c	44 8d 40 25	 lea	 r8d, QWORD PTR [rax+37]
  00080	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00087	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@KCLIIPCK@_PyObject_PrepOrigType?$AA@
  0008e	4d 8b cc	 mov	 r9, r12
  00091	49 83 c5 18	 add	 r13, 24
  00095	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0009d	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a2	85 c0		 test	 eax, eax
  000a4	74 07		 je	 SHORT $LN26@PyObject_P
  000a6	48 89 74 24 60	 mov	 QWORD PTR offset$1$[rsp], rsi
  000ab	eb 0a		 jmp	 SHORT $LN27@PyObject_P
$LN26@PyObject_P:
  000ad	49 8d 44 24 e8	 lea	 rax, QWORD PTR [r12-24]
  000b2	48 89 44 24 60	 mov	 QWORD PTR offset$1$[rsp], rax
$LN27@PyObject_P:

; 950  :             is_tracked = _PyObject_GC_IS_TRACKED(type);

  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@KCLIIPCK@_PyObject_PrepOrigType?$AA@
  000c5	4d 8b cc	 mov	 r9, r12
  000c8	41 b8 b6 03 00
	00		 mov	 r8d, 950		; 000003b6H
  000ce	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d6	e8 00 00 00 00	 call	 _PyParallel_Guard
  000db	85 c0		 test	 eax, eax
  000dd	75 39		 jne	 SHORT $LN31@PyObject_P
  000df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  000e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@KCLIIPCK@_PyObject_PrepOrigType?$AA@
  000ed	4d 8b cc	 mov	 r9, r12
  000f0	41 b8 b6 03 00
	00		 mov	 r8d, 950		; 000003b6H
  000f6	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000fe	e8 00 00 00 00	 call	 _PyParallel_Guard
  00103	85 c0		 test	 eax, eax
  00105	48 8b c6	 mov	 rax, rsi
  00108	75 05		 jne	 SHORT $LN29@PyObject_P
  0010a	49 8d 44 24 e8	 lea	 rax, QWORD PTR [r12-24]
$LN29@PyObject_P:
  0010f	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  00114	41 0f 95 c6	 setne	 r14b
$LN31@PyObject_P:

; 951  :         }
; 952  : 
; 953  :         m = PyMem_MALLOC(size);

  00118	e8 00 00 00 00	 call	 _Py_PXCTX
  0011d	85 c0		 test	 eax, eax
  0011f	74 0a		 je	 SHORT $LN34@PyObject_P
  00121	49 8b cd	 mov	 rcx, r13
  00124	e8 00 00 00 00	 call	 _PxMem_Malloc
  00129	eb 25		 jmp	 SHORT $LN49@PyObject_P
$LN34@PyObject_P:
  0012b	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  00135	4c 3b e8	 cmp	 r13, rax
  00138	0f 87 37 02 00
	00		 ja	 $LN47@PyObject_P
  0013e	4d 85 ed	 test	 r13, r13
  00141	b9 01 00 00 00	 mov	 ecx, 1
  00146	49 0f 45 cd	 cmovne	 rcx, r13
  0014a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
$LN49@PyObject_P:
  00150	48 8b e8	 mov	 rbp, rax

; 954  :         if (!m) {

  00153	48 85 c0	 test	 rax, rax
  00156	0f 84 19 02 00
	00		 je	 $LN47@PyObject_P

; 955  :             PyErr_NoMemory();
; 956  :             return 0;
; 957  :         }
; 958  : 
; 959  :         if (is_tracked)

  0015c	45 85 f6	 test	 r14d, r14d
  0015f	74 78		 je	 SHORT $LN12@PyObject_P

; 960  :             _PyObject_GC_UNTRACK(type);

  00161	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00168	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@KCLIIPCK@_PyObject_PrepOrigType?$AA@
  0016f	4d 8b cc	 mov	 r9, r12
  00172	41 b8 c0 03 00
	00		 mov	 r8d, 960		; 000003c0H
  00178	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00180	e8 00 00 00 00	 call	 _PyParallel_Guard
  00185	85 c0		 test	 eax, eax
  00187	75 50		 jne	 SHORT $LN12@PyObject_P
  00189	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00190	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@KCLIIPCK@_PyObject_PrepOrigType?$AA@
  00197	4d 8b cc	 mov	 r9, r12
  0019a	41 b8 c0 03 00
	00		 mov	 r8d, 960		; 000003c0H
  001a0	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001a8	e8 00 00 00 00	 call	 _PyParallel_Guard
  001ad	48 8b d6	 mov	 rdx, rsi
  001b0	85 c0		 test	 eax, eax
  001b2	75 05		 jne	 SHORT $LN37@PyObject_P
  001b4	49 8d 54 24 e8	 lea	 rdx, QWORD PTR [r12-24]
$LN37@PyObject_P:
  001b9	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  001bc	48 8b 4a 08	 mov	 rcx, QWORD PTR [rdx+8]
  001c0	48 c7 42 10 fe
	ff ff ff	 mov	 QWORD PTR [rdx+16], -2
  001c8	48 89 01	 mov	 QWORD PTR [rcx], rax
  001cb	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  001ce	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  001d2	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  001d6	48 89 32	 mov	 QWORD PTR [rdx], rsi
$LN12@PyObject_P:

; 961  : 
; 962  :         memcpy(m, offset, size);

  001d9	48 8b 54 24 60	 mov	 rdx, QWORD PTR offset$1$[rsp]
  001de	4d 8b c5	 mov	 r8, r13
  001e1	48 8b cd	 mov	 rcx, rbp
  001e4	e8 00 00 00 00	 call	 memcpy

; 963  : 
; 964  :         if (is_gc && is_heap)

  001e9	85 db		 test	 ebx, ebx
  001eb	74 37		 je	 SHORT $LN11@PyObject_P
  001ed	85 ff		 test	 edi, edi
  001ef	74 33		 je	 SHORT $LN11@PyObject_P

; 965  :             tp = (PyTypeObject *)_Py_FROM_GC(m);

  001f1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  001f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@KCLIIPCK@_PyObject_PrepOrigType?$AA@
  001ff	4c 8b cd	 mov	 r9, rbp
  00202	41 b8 c5 03 00
	00		 mov	 r8d, 965		; 000003c5H
  00208	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00210	e8 00 00 00 00	 call	 _PyParallel_Guard
  00215	85 c0		 test	 eax, eax
  00217	74 05		 je	 SHORT $LN38@PyObject_P
  00219	48 8b de	 mov	 rbx, rsi
  0021c	eb 09		 jmp	 SHORT $LN10@PyObject_P
$LN38@PyObject_P:
  0021e	48 8d 5d 18	 lea	 rbx, QWORD PTR [rbp+24]

; 966  :         else

  00222	eb 03		 jmp	 SHORT $LN10@PyObject_P
$LN11@PyObject_P:

; 967  :             tp = (PyTypeObject *)m;

  00224	48 8b dd	 mov	 rbx, rbp
$LN10@PyObject_P:

; 968  : 
; 969  :         if (is_tracked)

  00227	45 85 f6	 test	 r14d, r14d
  0022a	0f 84 99 00 00
	00		 je	 $LN5@PyObject_P

; 970  :             _PyObject_GC_TRACK(tp);

  00230	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00237	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@KCLIIPCK@_PyObject_PrepOrigType?$AA@
  0023e	4c 8b cb	 mov	 r9, rbx
  00241	41 b8 ca 03 00
	00		 mov	 r8d, 970		; 000003caH
  00247	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0024f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00254	85 c0		 test	 eax, eax
  00256	75 71		 jne	 SHORT $LN5@PyObject_P
  00258	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0025f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@KCLIIPCK@_PyObject_PrepOrigType?$AA@
  00266	4c 8b cb	 mov	 r9, rbx
  00269	41 b8 ca 03 00
	00		 mov	 r8d, 970		; 000003caH
  0026f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00277	e8 00 00 00 00	 call	 _PyParallel_Guard
  0027c	48 8b fe	 mov	 rdi, rsi
  0027f	85 c0		 test	 eax, eax
  00281	75 04		 jne	 SHORT $LN41@PyObject_P
  00283	48 8d 7b e8	 lea	 rdi, QWORD PTR [rbx-24]
$LN41@PyObject_P:
  00287	48 83 7f 10 fe	 cmp	 QWORD PTR [rdi+16], -2
  0028c	74 0c		 je	 SHORT $LN4@PyObject_P
  0028e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  00295	e8 00 00 00 00	 call	 Py_FatalError
$LN4@PyObject_P:
  0029a	48 c7 47 10 fd
	ff ff ff	 mov	 QWORD PTR [rdi+16], -3
  002a2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  002a9	48 89 07	 mov	 QWORD PTR [rdi], rax
  002ac	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  002b3	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  002b7	48 89 4f 08	 mov	 QWORD PTR [rdi+8], rcx
  002bb	48 89 39	 mov	 QWORD PTR [rcx], rdi
  002be	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  002c5	48 89 78 08	 mov	 QWORD PTR [rax+8], rdi
$LN5@PyObject_P:

; 971  : 
; 972  :         Py_ORIG_TYPE(o) = type;

  002c9	4d 89 67 38	 mov	 QWORD PTR [r15+56], r12

; 973  :         Py_TYPE(o) = tp;

  002cd	49 89 5f 58	 mov	 QWORD PTR [r15+88], rbx

; 974  :         tp->tp_dealloc  = _PyObject_Dealloc;

  002d1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyObject_Dealloc
  002d8	48 89 83 88 00
	00 00		 mov	 QWORD PTR [rbx+136], rax

; 975  :         tp->tp_setattro = _PyObject_GenericSetAttr;

  002df	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyObject_GenericSetAttr
  002e6	48 89 83 f0 00
	00 00		 mov	 QWORD PTR [rbx+240], rax

; 976  :         tp->tp_getattro = _PyObject_GenericGetAttr;

  002ed	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyObject_GenericGetAttr
  002f4	48 89 83 e8 00
	00 00		 mov	 QWORD PTR [rbx+232], rax

; 977  :         tp->tp_setattr  = _PyObject_SetAttrString;

  002fb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyObject_SetAttrString
  00302	48 89 83 a0 00
	00 00		 mov	 QWORD PTR [rbx+160], rax

; 978  :         tp->tp_getattr  = _PyObject_GetAttrString;

  00309	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyObject_GetAttrString
  00310	48 89 83 98 00
	00 00		 mov	 QWORD PTR [rbx+152], rax

; 979  : 
; 980  :         old_mm = type->tp_as_mapping;

  00317	49 8b bc 24 c8
	00 00 00	 mov	 rdi, QWORD PTR [r12+200]

; 981  :         if (old_mm && old_mm->mp_subscript) {

  0031f	48 85 ff	 test	 rdi, rdi
  00322	0f 84 a5 00 00
	00		 je	 $check_invariants$126246
  00328	48 39 77 08	 cmp	 QWORD PTR [rdi+8], rsi
  0032c	0f 84 9b 00 00
	00		 je	 $check_invariants$126246

; 982  :             size = sizeof(PyMappingMethods);
; 983  :             new_mm = (PyMappingMethods *)PyMem_MALLOC(size);

  00332	e8 00 00 00 00	 call	 _Py_PXCTX
  00337	b9 18 00 00 00	 mov	 ecx, 24
  0033c	85 c0		 test	 eax, eax
  0033e	74 07		 je	 SHORT $LN42@PyObject_P
  00340	e8 00 00 00 00	 call	 _PxMem_Malloc
  00345	eb 06		 jmp	 SHORT $LN50@PyObject_P
$LN42@PyObject_P:
  00347	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
$LN50@PyObject_P:
  0034d	4c 8b d8	 mov	 r11, rax

; 984  :             if (!new_mm)

  00350	48 85 c0	 test	 rax, rax
  00353	75 29		 jne	 SHORT $LN2@PyObject_P
$free_m$126245:

; 997  :         }
; 998  : 
; 999  :         /*
; 1000 :         old_sm = type->tp_as_sequence;
; 1001 :         if (old_sm) {
; 1002 :             assert(old_sm->sq_item);
; 1003 :             size = sizeof(PySequenceMethods);
; 1004 :             new_sm = (PySequenceMethods *)PyMem_MALLOC(size);
; 1005 :             if (!new_sm)
; 1006 :                 goto free_new_mm;
; 1007 : 
; 1008 :             memcpy(new_sm, old_sm, size);
; 1009 : 
; 1010 :             new_sm->sq_item = _Px_sq_item;
; 1011 : 
; 1012 :             new_sm->sq_length = (old_sm->sq_length ? _Px_sq_length : 0);
; 1013 :             new_sm->sq_concat = (old_sm->sq_concat ? _Px_sq_concat : 0);
; 1014 :             new_sm->sq_repeat = (old_sm->sq_repeat ? _Px_sq_repeat : 0);
; 1015 :             new_sm->sq_ass_item = (old_sm->sq_ass_item ? _Px_sq_ass_item : 0);
; 1016 :             new_sm->sq_contains = (old_sm->sq_contains ? _Px_sq_contains : 0);
; 1017 :             new_sm->sq_inplace_concat = (
; 1018 :                 old_sm->sq_inplace_concat ? _Px_sq_inplace_concat : 0
; 1019 :             );
; 1020 :             new_sm->sq_inplace_repeat = (
; 1021 :                 old_sm->sq_inplace_repeat ? _Px_sq_inplace_repeat : 0
; 1022 :             );
; 1023 : 
; 1024 :             tp->tp_as_sequence = new_sm;
; 1025 :         }
; 1026 :         */
; 1027 : 
; 1028 :         goto check_invariants;
; 1029 : 
; 1030 :         /*
; 1031 :     free_new_mm:
; 1032 :         PyMem_FREE(new_mm);
; 1033 :         */
; 1034 : 
; 1035 :     free_m:
; 1036 :         PyMem_FREE(m);

  00355	e8 00 00 00 00	 call	 _Py_PXCTX
  0035a	48 8b cd	 mov	 rcx, rbp
  0035d	85 c0		 test	 eax, eax
  0035f	74 0e		 je	 SHORT $LN46@PyObject_P
  00361	e8 00 00 00 00	 call	 _PxMem_Free

; 1037 : 
; 1038 :         PyErr_NoMemory();

  00366	e8 00 00 00 00	 call	 PyErr_NoMemory

; 1087 : error:
; 1088 :     assert(PyErr_Occurred());
; 1089 :     return 0;

  0036b	32 c0		 xor	 al, al
$error$126247:
  0036d	eb 60		 jmp	 SHORT $LN22@PyObject_P
$LN46@PyObject_P:

; 997  :         }
; 998  : 
; 999  :         /*
; 1000 :         old_sm = type->tp_as_sequence;
; 1001 :         if (old_sm) {
; 1002 :             assert(old_sm->sq_item);
; 1003 :             size = sizeof(PySequenceMethods);
; 1004 :             new_sm = (PySequenceMethods *)PyMem_MALLOC(size);
; 1005 :             if (!new_sm)
; 1006 :                 goto free_new_mm;
; 1007 : 
; 1008 :             memcpy(new_sm, old_sm, size);
; 1009 : 
; 1010 :             new_sm->sq_item = _Px_sq_item;
; 1011 : 
; 1012 :             new_sm->sq_length = (old_sm->sq_length ? _Px_sq_length : 0);
; 1013 :             new_sm->sq_concat = (old_sm->sq_concat ? _Px_sq_concat : 0);
; 1014 :             new_sm->sq_repeat = (old_sm->sq_repeat ? _Px_sq_repeat : 0);
; 1015 :             new_sm->sq_ass_item = (old_sm->sq_ass_item ? _Px_sq_ass_item : 0);
; 1016 :             new_sm->sq_contains = (old_sm->sq_contains ? _Px_sq_contains : 0);
; 1017 :             new_sm->sq_inplace_concat = (
; 1018 :                 old_sm->sq_inplace_concat ? _Px_sq_inplace_concat : 0
; 1019 :             );
; 1020 :             new_sm->sq_inplace_repeat = (
; 1021 :                 old_sm->sq_inplace_repeat ? _Px_sq_inplace_repeat : 0
; 1022 :             );
; 1023 : 
; 1024 :             tp->tp_as_sequence = new_sm;
; 1025 :         }
; 1026 :         */
; 1027 : 
; 1028 :         goto check_invariants;
; 1029 : 
; 1030 :         /*
; 1031 :     free_new_mm:
; 1032 :         PyMem_FREE(new_mm);
; 1033 :         */
; 1034 : 
; 1035 :     free_m:
; 1036 :         PyMem_FREE(m);

  0036f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN47@PyObject_P:

; 1037 : 
; 1038 :         PyErr_NoMemory();

  00375	e8 00 00 00 00	 call	 PyErr_NoMemory

; 1087 : error:
; 1088 :     assert(PyErr_Occurred());
; 1089 :     return 0;

  0037a	32 c0		 xor	 al, al
$error_1$126247:
  0037c	eb 51		 jmp	 SHORT $LN22@PyObject_P
$LN2@PyObject_P:

; 985  :                 goto free_m;
; 986  : 
; 987  :             memcpy(new_mm, old_mm, size);

  0037e	48 8b 07	 mov	 rax, QWORD PTR [rdi]

; 988  : 
; 989  :             new_mm->mp_subscript = _Px_mp_subcript;
; 990  : 
; 991  :             new_mm->mp_length = (old_mm->mp_length ? _Px_mp_length : 0);

  00381	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Px_mp_length
  00388	49 89 03	 mov	 QWORD PTR [r11], rax
  0038b	48 8b 47 08	 mov	 rax, QWORD PTR [rdi+8]
  0038f	49 89 43 08	 mov	 QWORD PTR [r11+8], rax
  00393	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
  00397	49 89 43 10	 mov	 QWORD PTR [r11+16], rax
  0039b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Px_mp_subcript
  003a2	49 89 43 08	 mov	 QWORD PTR [r11+8], rax
  003a6	48 8b c6	 mov	 rax, rsi
  003a9	48 39 07	 cmp	 QWORD PTR [rdi], rax
  003ac	48 0f 45 c1	 cmovne	 rax, rcx
  003b0	49 89 03	 mov	 QWORD PTR [r11], rax

; 992  :             new_mm->mp_ass_subscript = (
; 993  :                 old_mm->mp_ass_subscript ? _Px_mp_ass_subscript : 0
; 994  :             );

  003b3	48 39 77 10	 cmp	 QWORD PTR [rdi+16], rsi
  003b7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Px_mp_ass_subscript
  003be	48 0f 45 f0	 cmovne	 rsi, rax
  003c2	49 89 73 10	 mov	 QWORD PTR [r11+16], rsi

; 995  : 
; 996  :             tp->tp_as_mapping = new_mm;

  003c6	4c 89 9b c8 00
	00 00		 mov	 QWORD PTR [rbx+200], r11
$check_invariants$126246:

; 1039 :         goto error;
; 1040 : 
; 1041 :     }
; 1042 : 
; 1043 : check_invariants:
; 1044 :     assert(Py_ORIG_TYPE(o));
; 1045 :     assert(Py_ORIG_TYPE_CAST(o)->tp_dealloc);
; 1046 :     assert(Py_ORIG_TYPE_CAST(o)->tp_dealloc != _PyObject_Dealloc);
; 1047 :     assert(Py_TYPE(o)->tp_dealloc  == _PyObject_Dealloc);
; 1048 :     assert(Py_TYPE(o)->tp_setattro == _PyObject_GenericSetAttr);
; 1049 :     assert(Py_TYPE(o)->tp_getattro == _PyObject_GenericGetAttr);
; 1050 :     assert(Py_TYPE(o)->tp_setattr  == _PyObject_SetAttrString);
; 1051 :     assert(Py_TYPE(o)->tp_getattr  == _PyObject_GetAttrString);
; 1052 :     old_mm = (Py_ORIG_TYPE_CAST(o)->tp_as_mapping);
; 1053 :     if (old_mm && old_mm->mp_subscript) {
; 1054 :         new_mm = Py_TYPE(o)->tp_as_mapping;
; 1055 :         assert(new_mm->mp_subscript == _Px_mp_subcript);
; 1056 :         assert(old_mm->mp_length ? (new_mm->mp_length == _Px_mp_length) : 1);
; 1057 :         assert(
; 1058 :             !old_mm->mp_ass_subscript ? 1 : (
; 1059 :                 new_mm->mp_ass_subscript == _Px_mp_ass_subscript
; 1060 :             )
; 1061 :         );
; 1062 :     }
; 1063 :     /*
; 1064 :     old_sm = (Py_ORIG_TYPE_CAST(o)->tp_as_sequence);
; 1065 :     if (old_sm) {
; 1066 :         new_sm = Py_TYPE(o)->tp_as_sequence;
; 1067 :         assert(new_sm->sq_item);
; 1068 :         assert(new_sm->sq_item == _Px_sq_item);
; 1069 :         assert(old_sm->sq_length ? (new_sm->sq_length == _Px_sq_length) : 1);
; 1070 :         assert(old_sm->sq_concat ? (new_sm->sq_concat == _Px_sq_concat) : 1);
; 1071 :         assert(old_sm->sq_repeat ? (new_sm->sq_repeat == _Px_sq_repeat) : 1);
; 1072 :         assert(old_sm->sq_ass_item ? (new_sm->sq_ass_item == _Px_sq_ass_item) : 1);
; 1073 :         assert(old_sm->sq_contains ? (new_sm->sq_contains == _Px_sq_contains) : 1);
; 1074 :         assert(
; 1075 :             !old_sm->sq_inplace_concat ? 1 : (
; 1076 :                 new_sm->sq_inplace_concat == _Px_sq_inplace_concat
; 1077 :             )
; 1078 :         );
; 1079 :         assert(
; 1080 :             !old_sm->sq_inplace_repeat ? 1 : (
; 1081 :                 new_sm->sq_inplace_repeat == _Px_sq_inplace_repeat
; 1082 :             )
; 1083 :         );
; 1084 :     }
; 1085 :     */
; 1086 :     return 1;

  003cd	b0 01		 mov	 al, 1
$LN22@PyObject_P:

; 1090 : }

  003cf	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  003d4	48 8b 6c 24 70	 mov	 rbp, QWORD PTR [rsp+112]
  003d9	48 8b 74 24 78	 mov	 rsi, QWORD PTR [rsp+120]
  003de	48 83 c4 30	 add	 rsp, 48			; 00000030H
  003e2	41 5f		 pop	 r15
  003e4	41 5e		 pop	 r14
  003e6	41 5d		 pop	 r13
  003e8	41 5c		 pop	 r12
  003ea	5f		 pop	 rdi
  003eb	c3		 ret	 0
_PyObject_PrepOrigType ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@JOGICDBK@_PyEvent_TryCreate?$AA@	; `string'
PUBLIC	_PyEvent_TryCreate
_BSS	SEGMENT
PyExc_WaitError DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel_private.h
pdata	SEGMENT
$pdata$_PyEvent_TryCreate DD imagerel $LN15
	DD	imagerel $LN15+180
	DD	imagerel $unwind$_PyEvent_TryCreate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyEvent_TryCreate DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT ??_C@_0BD@JOGICDBK@_PyEvent_TryCreate?$AA@
CONST	SEGMENT
??_C@_0BD@JOGICDBK@_PyEvent_TryCreate?$AA@ DB '_PyEvent_TryCreate', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
CONST	ENDS
;	COMDAT _PyEvent_TryCreate
_TEXT	SEGMENT
o$ = 64
_PyEvent_TryCreate PROC					; COMDAT

; 1094 : {

$LN15:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b d9	 mov	 rbx, rcx

; 1095 :     char success = 1;
; 1096 :     assert(Py_HAS_RWLOCK(o));
; 1097 :     _write_lock(o);

  00012	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00016	40 b7 01	 mov	 dil, 1
  00019	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AcquireSRWLockExclusive

; 1098 :     if (!Py_HAS_EVENT(o)) {

  0001f	f6 43 20 08	 test	 BYTE PTR [rbx+32], 8
  00023	75 71		 jne	 SHORT $done$126276

; 1099 :         success = 0;
; 1100 :         if (Py_ISPX(o))

  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@JOGICDBK@_PyEvent_TryCreate?$AA@
  00033	4c 8b cb	 mov	 r9, rbx
  00036	41 b8 4c 04 00
	00		 mov	 r8d, 1100		; 0000044cH
  0003c	40 32 ff	 xor	 dil, dil
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	85 c0		 test	 eax, eax
  0004e	74 0e		 je	 SHORT $LN7@PyEvent_Tr

; 1101 :             PyErr_SetNone(PyExc_WaitError);

  00050	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_WaitError
  00057	e8 00 00 00 00	 call	 PyErr_SetNone
  0005c	eb 38		 jmp	 SHORT $done$126276
$LN7@PyEvent_Tr:

; 1102 :         else if (!_PyObject_PrepOrigType(o, 0))

  0005e	33 d2		 xor	 edx, edx
  00060	48 8b cb	 mov	 rcx, rbx
  00063	e8 00 00 00 00	 call	 _PyObject_PrepOrigType
  00068	84 c0		 test	 al, al
  0006a	74 2a		 je	 SHORT $done$126276

; 1103 :             goto done;
; 1104 :         else if (!PyEvent_CREATE(o))

  0006c	45 33 c9	 xor	 r9d, r9d
  0006f	45 33 c0	 xor	 r8d, r8d
  00072	33 d2		 xor	 edx, edx
  00074	33 c9		 xor	 ecx, ecx
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateEventW
  0007c	48 89 43 30	 mov	 QWORD PTR [rbx+48], rax
  00080	48 85 c0	 test	 rax, rax
  00083	75 09		 jne	 SHORT $LN3@PyEvent_Tr

; 1105 :             PyErr_SetFromWindowsErr(0);

  00085	33 c9		 xor	 ecx, ecx
  00087	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 1106 :         else {

  0008c	eb 08		 jmp	 SHORT $done$126276
$LN3@PyEvent_Tr:

; 1107 :             Py_PXFLAGS(o) |= Py_PXFLAGS_EVENT;

  0008e	48 83 4b 20 08	 or	 QWORD PTR [rbx+32], 8

; 1108 :             success = 1;

  00093	40 b7 01	 mov	 dil, 1
$done$126276:

; 1109 :         }
; 1110 :     }
; 1111 : done:
; 1112 :     if (!success)
; 1113 :         assert(PyErr_Occurred());
; 1114 :     _write_unlock(o);

  00096	48 8d 4b 28	 lea	 rcx, QWORD PTR [rbx+40]
  0009a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseSRWLockExclusive

; 1115 :     return success;
; 1116 : }

  000a0	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000a5	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000aa	40 0f b6 c7	 movzx	 eax, dil
  000ae	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b2	5f		 pop	 rdi
  000b3	c3		 ret	 0
_PyEvent_TryCreate ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@JNNJNMPE@unexpected?5result?5from?5wait?$AA@ ; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_async_wait DD imagerel $LN25
	DD	imagerel $LN25+294
	DD	imagerel $unwind$_async_wait
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_wait DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0BM@JNNJNMPE@unexpected?5result?5from?5wait?$AA@
CONST	SEGMENT
??_C@_0BM@JNNJNMPE@unexpected?5result?5from?5wait?$AA@ DB 'unexpected res'
	DB	'ult from wait', 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
CONST	ENDS
;	COMDAT _async_wait
_TEXT	SEGMENT
self$ = 64
o$ = 72
_async_wait PROC					; COMDAT

; 1120 : {

$LN25:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1121 :     DWORD result;
; 1122 :     Px_PROTECTION_GUARD(o);

  00006	48 8b ca	 mov	 rcx, rdx
  00009	48 8b da	 mov	 rbx, rdx
  0000c	e8 00 00 00 00	 call	 _protected
  00011	84 c0		 test	 al, al
  00013	75 14		 jne	 SHORT $LN12@async_wait
  00015	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ProtectionError
  0001c	e8 00 00 00 00	 call	 PyErr_SetNone

; 1143 : 
; 1144 :     return NULL;

  00021	33 c0		 xor	 eax, eax

; 1145 : }

  00023	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00027	5b		 pop	 rbx
  00028	c3		 ret	 0
$LN12@async_wait:

; 1123 :     Py_INCREF(o);

  00029	e8 00 00 00 00	 call	 _Py_PXCTX
  0002e	85 c0		 test	 eax, eax
  00030	75 32		 jne	 SHORT $LN17@async_wait
  00032	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00040	4c 8b cb	 mov	 r9, rbx
  00043	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00049	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00051	e8 00 00 00 00	 call	 _PyParallel_Guard
  00056	85 c0		 test	 eax, eax
  00058	75 06		 jne	 SHORT $LN16@async_wait
  0005a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0005e	74 04		 je	 SHORT $LN17@async_wait
$LN16@async_wait:
  00060	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN17@async_wait:

; 1124 :     if (!_PyEvent_TryCreate(o))

  00064	48 8b cb	 mov	 rcx, rbx
  00067	e8 00 00 00 00	 call	 _PyEvent_TryCreate
  0006c	84 c0		 test	 al, al

; 1125 :         return NULL;

  0006e	0f 84 aa 00 00
	00		 je	 $LN1@async_wait

; 1126 : 
; 1127 :     result = WaitForSingleObject((HANDLE)o->event, INFINITE);

  00074	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  00078	83 ca ff	 or	 edx, -1			; ffffffffH
  0007b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WaitForSingleObject

; 1128 : 
; 1129 :     if (result == WAIT_OBJECT_0)

  00081	85 c0		 test	 eax, eax
  00083	75 52		 jne	 SHORT $LN8@async_wait

; 1130 :         Py_RETURN_NONE;

  00085	e8 00 00 00 00	 call	 _Py_PXCTX
  0008a	85 c0		 test	 eax, eax
  0008c	75 3c		 jne	 SHORT $LN21@async_wait
  0008e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00095	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0009c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000a3	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000a9	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000b1	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b6	85 c0		 test	 eax, eax
  000b8	75 09		 jne	 SHORT $LN20@async_wait
  000ba	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  000c1	74 07		 je	 SHORT $LN21@async_wait
$LN20@async_wait:
  000c3	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN21@async_wait:
  000ca	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1145 : }

  000d1	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d5	5b		 pop	 rbx
  000d6	c3		 ret	 0
$LN8@async_wait:

; 1131 : 
; 1132 :     else if (result == WAIT_ABANDONED)

  000d7	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  000dc	75 09		 jne	 SHORT $LN6@async_wait

; 1133 :         PyErr_SetString(PyExc_SystemError, "wait abandoned");

  000de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@BLBOHJGC@wait?5abandoned?$AA@
  000e5	eb 2b		 jmp	 SHORT $LN24@async_wait
$LN6@async_wait:

; 1134 : 
; 1135 :     else if (result == WAIT_TIMEOUT)

  000e7	3d 02 01 00 00	 cmp	 eax, 258		; 00000102H
  000ec	75 09		 jne	 SHORT $LN4@async_wait

; 1136 :         PyErr_SetString(PyExc_SystemError, "infinite wait timed out?");

  000ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@IMPAOHD@infinite?5wait?5timed?5out?$DP?$AA@
  000f5	eb 1b		 jmp	 SHORT $LN24@async_wait
$LN4@async_wait:

; 1137 : 
; 1138 :     else if (result == WAIT_FAILED)

  000f7	83 f8 ff	 cmp	 eax, -1			; ffffffffH
  000fa	75 0f		 jne	 SHORT $LN2@async_wait

; 1139 :         PyErr_SetFromWindowsErr(0);

  000fc	33 c9		 xor	 ecx, ecx
  000fe	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 1143 : 
; 1144 :     return NULL;

  00103	33 c0		 xor	 eax, eax

; 1145 : }

  00105	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00109	5b		 pop	 rbx
  0010a	c3		 ret	 0
$LN2@async_wait:

; 1140 : 
; 1141 :     else
; 1142 :         PyErr_SetString(PyExc_SystemError, "unexpected result from wait");

  0010b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@JNNJNMPE@unexpected?5result?5from?5wait?$AA@
$LN24@async_wait:
  00112	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00119	e8 00 00 00 00	 call	 PyErr_SetString
$LN1@async_wait:

; 1143 : 
; 1144 :     return NULL;

  0011e	33 c0		 xor	 eax, eax

; 1145 : }

  00120	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00124	5b		 pop	 rbx
  00125	c3		 ret	 0
_async_wait ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_async_prewait DD imagerel $LN17
	DD	imagerel $LN17+180
	DD	imagerel $unwind$_async_prewait
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_prewait DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT _async_prewait
_TEXT	SEGMENT
self$ = 64
o$ = 72
_async_prewait PROC					; COMDAT

; 1149 : {

$LN17:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1150 :     Px_PROTECTION_GUARD(o);

  00006	48 8b ca	 mov	 rcx, rdx
  00009	48 8b da	 mov	 rbx, rdx
  0000c	e8 00 00 00 00	 call	 _protected
  00011	84 c0		 test	 al, al
  00013	75 14		 jne	 SHORT $LN4@async_prew
  00015	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ProtectionError
  0001c	e8 00 00 00 00	 call	 PyErr_SetNone
$LN16@async_prew:
  00021	33 c0		 xor	 eax, eax

; 1157 : }

  00023	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00027	5b		 pop	 rbx
  00028	c3		 ret	 0
$LN4@async_prew:

; 1151 :     Py_INCREF(o);

  00029	e8 00 00 00 00	 call	 _Py_PXCTX
  0002e	85 c0		 test	 eax, eax
  00030	75 32		 jne	 SHORT $LN9@async_prew
  00032	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00040	4c 8b cb	 mov	 r9, rbx
  00043	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00049	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00051	e8 00 00 00 00	 call	 _PyParallel_Guard
  00056	85 c0		 test	 eax, eax
  00058	75 06		 jne	 SHORT $LN8@async_prew
  0005a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0005e	74 04		 je	 SHORT $LN9@async_prew
$LN8@async_prew:
  00060	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN9@async_prew:

; 1152 :     if (!_PyEvent_TryCreate(o))

  00064	48 8b cb	 mov	 rcx, rbx
  00067	e8 00 00 00 00	 call	 _PyEvent_TryCreate
  0006c	84 c0		 test	 al, al

; 1153 :         return NULL;

  0006e	74 b1		 je	 SHORT $LN16@async_prew

; 1154 : 
; 1155 :     Py_INCREF(o);

  00070	e8 00 00 00 00	 call	 _Py_PXCTX
  00075	85 c0		 test	 eax, eax
  00077	75 32		 jne	 SHORT $LN13@async_prew
  00079	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00080	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00087	4c 8b cb	 mov	 r9, rbx
  0008a	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00090	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00098	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009d	85 c0		 test	 eax, eax
  0009f	75 06		 jne	 SHORT $LN12@async_prew
  000a1	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000a5	74 04		 je	 SHORT $LN13@async_prew
$LN12@async_prew:
  000a7	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN13@async_prew:

; 1156 :     return o;

  000ab	48 8b c3	 mov	 rax, rbx

; 1157 : }

  000ae	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b2	5b		 pop	 rbx
  000b3	c3		 ret	 0
_async_prewait ENDP
_TEXT	ENDS
_BSS	SEGMENT
PyExc_NoWaitersError DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_async_signal DD imagerel $LN27
	DD	imagerel $LN27+52
	DD	imagerel $unwind$_async_signal
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_async_signal DD imagerel $LN27+52
	DD	imagerel $LN27+196
	DD	imagerel $chain$0$_async_signal
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_async_signal DD imagerel $LN27+196
	DD	imagerel $LN27+269
	DD	imagerel $chain$1$_async_signal
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_async_signal DD 021H
	DD	imagerel $LN27
	DD	imagerel $LN27+52
	DD	imagerel $unwind$_async_signal
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_async_signal DD 020521H
	DD	086405H
	DD	imagerel $LN27
	DD	imagerel $LN27+52
	DD	imagerel $unwind$_async_signal
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_signal DD 040a01H
	DD	09340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT _async_signal
_TEXT	SEGMENT
self$ = 64
o$ = 72
_async_signal PROC					; COMDAT

; 1161 : {

$LN27:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1162 :     PyObject *result = NULL;
; 1163 :     Px_PROTECTION_GUARD(o);

  0000a	48 8b ca	 mov	 rcx, rdx
  0000d	48 8b fa	 mov	 rdi, rdx
  00010	33 db		 xor	 ebx, ebx
  00012	e8 00 00 00 00	 call	 _protected
  00017	84 c0		 test	 al, al
  00019	75 19		 jne	 SHORT $LN11@async_sign
  0001b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ProtectionError
  00022	e8 00 00 00 00	 call	 PyErr_SetNone
  00027	33 c0		 xor	 eax, eax

; 1177 : }

  00029	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  0002e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00032	5f		 pop	 rdi
  00033	c3		 ret	 0
$LN11@async_sign:
  00034	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi

; 1164 :     Py_INCREF(o);

  00039	e8 00 00 00 00	 call	 _Py_PXCTX
  0003e	85 c0		 test	 eax, eax
  00040	75 32		 jne	 SHORT $LN16@async_sign
  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00050	4c 8b cf	 mov	 r9, rdi
  00053	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00059	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00061	e8 00 00 00 00	 call	 _PyParallel_Guard
  00066	85 c0		 test	 eax, eax
  00068	75 06		 jne	 SHORT $LN15@async_sign
  0006a	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  0006e	74 04		 je	 SHORT $LN16@async_sign
$LN15@async_sign:
  00070	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN16@async_sign:

; 1165 :     _write_lock(o);

  00074	48 8d 4f 28	 lea	 rcx, QWORD PTR [rdi+40]
  00078	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AcquireSRWLockExclusive

; 1166 : 
; 1167 :     if (!Py_HAS_EVENT(o))

  0007e	f6 47 20 08	 test	 BYTE PTR [rdi+32], 8
  00082	75 0e		 jne	 SHORT $LN8@async_sign

; 1168 :         PyErr_SetNone(PyExc_NoWaitersError);

  00084	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_NoWaitersError
  0008b	e8 00 00 00 00	 call	 PyErr_SetNone
  00090	eb 1e		 jmp	 SHORT $LN5@async_sign
$LN8@async_sign:

; 1169 :     else if (!PyEvent_SIGNAL(o))

  00092	48 8b 4f 30	 mov	 rcx, QWORD PTR [rdi+48]
  00096	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetEvent
  0009c	85 c0		 test	 eax, eax
  0009e	75 09		 jne	 SHORT $LN6@async_sign

; 1170 :         PyErr_SetFromWindowsErr(0);

  000a0	33 c9		 xor	 ecx, ecx
  000a2	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 1171 :     else

  000a7	eb 07		 jmp	 SHORT $LN5@async_sign
$LN6@async_sign:

; 1172 :         result = Py_None;

  000a9	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
$LN5@async_sign:

; 1173 : 
; 1174 :     _write_unlock(o);

  000b0	48 8d 4f 28	 lea	 rcx, QWORD PTR [rdi+40]
  000b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseSRWLockExclusive
  000ba	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]

; 1175 :     Py_XINCREF(result);

  000bf	48 85 db	 test	 rbx, rbx
  000c2	74 3b		 je	 SHORT $LN3@async_sign
  000c4	e8 00 00 00 00	 call	 _Py_PXCTX
  000c9	85 c0		 test	 eax, eax
  000cb	75 32		 jne	 SHORT $LN3@async_sign
  000cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000db	4c 8b cb	 mov	 r9, rbx
  000de	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000e4	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000ec	e8 00 00 00 00	 call	 _PyParallel_Guard
  000f1	85 c0		 test	 eax, eax
  000f3	75 06		 jne	 SHORT $LN23@async_sign
  000f5	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000f9	74 04		 je	 SHORT $LN3@async_sign
$LN23@async_sign:
  000fb	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN3@async_sign:

; 1176 :     return result;

  000ff	48 8b c3	 mov	 rax, rbx

; 1177 : }

  00102	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00107	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0010b	5f		 pop	 rdi
  0010c	c3		 ret	 0
_async_signal ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@PKHAABHI@signal?5and?5wait?5objects?5must?5dif@ ; `string'
EXTRN	__imp_SignalObjectAndWait:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_async_signal_and_wait DD imagerel $LN31
	DD	imagerel $LN31+444
	DD	imagerel $unwind$_async_signal_and_wait
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_signal_and_wait DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0CE@PKHAABHI@signal?5and?5wait?5objects?5must?5dif@
CONST	SEGMENT
??_C@_0CE@PKHAABHI@signal?5and?5wait?5objects?5must?5dif@ DB 'signal and '
	DB	'wait objects must differ', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
CONST	ENDS
;	COMDAT _async_signal_and_wait
_TEXT	SEGMENT
self$ = 64
args$ = 72
s$ = 80
w$ = 88
_async_signal_and_wait PROC				; COMDAT

; 1181 : {

$LN31:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b c2	 mov	 rax, rdx

; 1182 :     PyObject *s, *w;
; 1183 :     PyObject *result = NULL;
; 1184 :     DWORD wait_result;
; 1185 : 
; 1186 :     if (!PyArg_UnpackTuple(args, "signal_and_wait", 2, 2, &s, &w))

  00009	48 8d 4c 24 58	 lea	 rcx, QWORD PTR w$[rsp]
  0000e	41 b9 02 00 00
	00		 mov	 r9d, 2
  00014	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00019	48 8d 4c 24 50	 lea	 rcx, QWORD PTR s$[rsp]
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@KFOAPOMJ@signal_and_wait?$AA@
  00025	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0002a	45 8b c1	 mov	 r8d, r9d
  0002d	48 8b c8	 mov	 rcx, rax
  00030	33 db		 xor	 ebx, ebx
  00032	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00037	85 c0		 test	 eax, eax
  00039	0f 84 74 01 00
	00		 je	 $LN27@async_sign@2

; 1187 :         goto done;
; 1188 : 
; 1189 :     Px_PROTECTION_GUARD(s);

  0003f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00044	e8 00 00 00 00	 call	 _protected
  00049	84 c0		 test	 al, al
  0004b	75 14		 jne	 SHORT $LN21@async_sign@2
$LN30@async_sign@2:
  0004d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ProtectionError
  00054	e8 00 00 00 00	 call	 PyErr_SetNone
  00059	33 c0		 xor	 eax, eax

; 1236 : }

  0005b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005f	5b		 pop	 rbx
  00060	c3		 ret	 0
$LN21@async_sign@2:

; 1190 :     Px_PROTECTION_GUARD(w);

  00061	48 8b 4c 24 58	 mov	 rcx, QWORD PTR w$[rsp]
  00066	e8 00 00 00 00	 call	 _protected
  0006b	84 c0		 test	 al, al
  0006d	74 de		 je	 SHORT $LN30@async_sign@2

; 1191 : 
; 1192 :     if (s == w) {

  0006f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR w$[rsp]
  00074	48 39 4c 24 50	 cmp	 QWORD PTR s$[rsp], rcx
  00079	75 1c		 jne	 SHORT $LN14@async_sign@2

; 1193 :         PyErr_SetString(PyExc_WaitError,
; 1194 :                         "signal and wait objects must differ");

  0007b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_WaitError
  00082	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@PKHAABHI@signal?5and?5wait?5objects?5must?5dif@
  00089	e8 00 00 00 00	 call	 PyErr_SetString

; 1234 : 
; 1235 :     return result;

  0008e	48 8b c3	 mov	 rax, rbx

; 1236 : }

  00091	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00095	5b		 pop	 rbx
  00096	c3		 ret	 0
$LN14@async_sign@2:

; 1195 :         goto done;
; 1196 :     }
; 1197 : 
; 1198 :     if (!_PyEvent_TryCreate(w))

  00097	e8 00 00 00 00	 call	 _PyEvent_TryCreate
  0009c	84 c0		 test	 al, al
  0009e	0f 84 0f 01 00
	00		 je	 $LN27@async_sign@2

; 1199 :         goto done;
; 1200 : 
; 1201 :     if (!Py_HAS_EVENT(s)) {

  000a4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  000a9	f6 41 20 08	 test	 BYTE PTR [rcx+32], 8
  000ad	75 15		 jne	 SHORT $LN12@async_sign@2

; 1202 :         PyErr_SetNone(PyExc_NoWaitersError);

  000af	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_NoWaitersError
  000b6	e8 00 00 00 00	 call	 PyErr_SetNone

; 1234 : 
; 1235 :     return result;

  000bb	48 8b c3	 mov	 rax, rbx

; 1236 : }

  000be	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c2	5b		 pop	 rbx
  000c3	c3		 ret	 0
$LN12@async_sign@2:

; 1203 :         goto done;
; 1204 :     }
; 1205 : 
; 1206 :     Py_INCREF(s);

  000c4	e8 00 00 00 00	 call	 _Py_IncRef

; 1207 :     Py_INCREF(w);

  000c9	48 8b 4c 24 58	 mov	 rcx, QWORD PTR w$[rsp]
  000ce	e8 00 00 00 00	 call	 _Py_IncRef

; 1208 : 
; 1209 :     wait_result = SignalObjectAndWait(Py_EVENT(s), Py_EVENT(w), INFINITE, 0);

  000d3	48 8b 54 24 58	 mov	 rdx, QWORD PTR w$[rsp]
  000d8	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  000dd	48 8b 52 30	 mov	 rdx, QWORD PTR [rdx+48]
  000e1	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  000e5	45 33 c9	 xor	 r9d, r9d
  000e8	41 83 c8 ff	 or	 r8d, -1			; ffffffffH
  000ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SignalObjectAndWait

; 1210 : 
; 1211 :     if (wait_result == WAIT_OBJECT_0 || wait_result == WAIT_IO_COMPLETION)

  000f2	85 c0		 test	 eax, eax
  000f4	74 62		 je	 SHORT $LN10@async_sign@2
  000f6	3d c0 00 00 00	 cmp	 eax, 192		; 000000c0H
  000fb	74 5b		 je	 SHORT $LN10@async_sign@2

; 1213 : 
; 1214 :     else if (wait_result == WAIT_ABANDONED)

  000fd	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  00102	75 15		 jne	 SHORT $LN8@async_sign@2

; 1215 :         PyErr_SetString(PyExc_SystemError, "wait abandoned");

  00104	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  0010b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@BLBOHJGC@wait?5abandoned?$AA@
  00112	e8 00 00 00 00	 call	 PyErr_SetString
  00117	eb 46		 jmp	 SHORT $LN3@async_sign@2
$LN8@async_sign@2:

; 1216 : 
; 1217 :     else if (wait_result == WAIT_TIMEOUT)

  00119	3d 02 01 00 00	 cmp	 eax, 258		; 00000102H
  0011e	75 15		 jne	 SHORT $LN6@async_sign@2

; 1218 :         PyErr_SetString(PyExc_SystemError, "infinite wait timed out?");

  00120	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00127	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@IMPAOHD@infinite?5wait?5timed?5out?$DP?$AA@
  0012e	e8 00 00 00 00	 call	 PyErr_SetString
  00133	eb 2a		 jmp	 SHORT $LN3@async_sign@2
$LN6@async_sign@2:

; 1219 : 
; 1220 :     else if (wait_result == WAIT_FAILED)

  00135	83 f8 ff	 cmp	 eax, -1			; ffffffffH
  00138	75 09		 jne	 SHORT $LN4@async_sign@2

; 1221 :         PyErr_SetFromWindowsErr(0);

  0013a	33 c9		 xor	 ecx, ecx
  0013c	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 1222 : 
; 1223 :     else

  00141	eb 1c		 jmp	 SHORT $LN3@async_sign@2
$LN4@async_sign@2:

; 1224 :         PyErr_SetString(PyExc_SystemError, "unexpected result from wait");

  00143	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  0014a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@JNNJNMPE@unexpected?5result?5from?5wait?$AA@
  00151	e8 00 00 00 00	 call	 PyErr_SetString
  00156	eb 07		 jmp	 SHORT $LN3@async_sign@2
$LN10@async_sign@2:

; 1212 :         result = Py_None;

  00158	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
$LN3@async_sign@2:

; 1225 : 
; 1226 :     Py_DECREF(s);

  0015f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00164	e8 00 00 00 00	 call	 _Py_DecRef

; 1227 :     Py_DECREF(w);

  00169	48 8b 4c 24 58	 mov	 rcx, QWORD PTR w$[rsp]
  0016e	e8 00 00 00 00	 call	 _Py_DecRef
$done$126371:

; 1228 : 
; 1229 : done:
; 1230 :     if (!result)

  00173	48 85 db	 test	 rbx, rbx
  00176	74 3b		 je	 SHORT $LN27@async_sign@2

; 1231 :         assert(PyErr_Occurred());
; 1232 :     else
; 1233 :         Py_INCREF(result);

  00178	e8 00 00 00 00	 call	 _Py_PXCTX
  0017d	85 c0		 test	 eax, eax
  0017f	75 32		 jne	 SHORT $LN27@async_sign@2
  00181	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00188	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0018f	4c 8b cb	 mov	 r9, rbx
  00192	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00198	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  001a0	e8 00 00 00 00	 call	 _PyParallel_Guard
  001a5	85 c0		 test	 eax, eax
  001a7	75 06		 jne	 SHORT $LN26@async_sign@2
  001a9	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  001ad	74 04		 je	 SHORT $LN27@async_sign@2
$LN26@async_sign@2:
  001af	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN27@async_sign@2:

; 1234 : 
; 1235 :     return result;

  001b3	48 8b c3	 mov	 rax, rbx

; 1236 : }

  001b6	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001ba	5b		 pop	 rbx
  001bb	c3		 ret	 0
_async_signal_and_wait ENDP
_TEXT	ENDS
PUBLIC	_protect
;	COMDAT pdata
pdata	SEGMENT
$pdata$_protect DD imagerel $LN10
	DD	imagerel $LN10+63
	DD	imagerel $unwind$_protect
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_protect DD imagerel $LN10+63
	DD	imagerel $LN10+137
	DD	imagerel $chain$0$_protect
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_protect DD imagerel $LN10+137
	DD	imagerel $LN10+172
	DD	imagerel $chain$2$_protect
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_protect DD 020021H
	DD	067400H
	DD	imagerel $LN10
	DD	imagerel $LN10+63
	DD	imagerel $unwind$_protect
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_protect DD 020521H
	DD	067405H
	DD	imagerel $LN10
	DD	imagerel $LN10+63
	DD	imagerel $unwind$_protect
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_protect DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _protect
_TEXT	SEGMENT
obj$ = 48
_protect PROC						; COMDAT

; 1241 : {

$LN10:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 1242 :     PyObject **dp;
; 1243 :     if (!obj)

  00009	48 85 c9	 test	 rcx, rcx
  0000c	75 08		 jne	 SHORT $LN5@protect
$LN9@protect:

; 1244 :         return NULL;

  0000e	33 c0		 xor	 eax, eax

; 1265 : }

  00010	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00014	5b		 pop	 rbx
  00015	c3		 ret	 0
$LN5@protect:

; 1245 : 
; 1246 :     if (!_protected(obj)) {

  00016	e8 00 00 00 00	 call	 _protected
  0001b	84 c0		 test	 al, al
  0001d	75 1d		 jne	 SHORT $LN4@protect

; 1247 :         if (!_PyObject_PrepOrigType(obj, 0))

  0001f	33 d2		 xor	 edx, edx
  00021	48 8b cb	 mov	 rcx, rbx
  00024	e8 00 00 00 00	 call	 _PyObject_PrepOrigType
  00029	84 c0		 test	 al, al

; 1248 :             return NULL;

  0002b	74 e1		 je	 SHORT $LN9@protect

; 1249 :         InitializeSRWLock((PSRWLOCK)&(obj->srw_lock));

  0002d	48 8d 4b 28	 lea	 rcx, QWORD PTR [rbx+40]
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeSRWLock

; 1250 :         Py_PXFLAGS(obj) |= Py_PXFLAGS_RWLOCK;

  00037	48 83 4b 20 04	 or	 QWORD PTR [rbx+32], 4
$LN4@protect:

; 1251 :     }
; 1252 : 
; 1253 :     dp = _PyObject_GetDictPtr(obj);

  0003c	48 8b cb	 mov	 rcx, rbx
  0003f	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  00044	e8 00 00 00 00	 call	 _PyObject_GetDictPtr
  00049	48 8b f8	 mov	 rdi, rax

; 1254 :     if (dp && !_protected(*dp)) {

  0004c	48 85 c0	 test	 rax, rax
  0004f	74 4d		 je	 SHORT $LN2@protect
  00051	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00054	e8 00 00 00 00	 call	 _protected
  00059	84 c0		 test	 al, al
  0005b	75 41		 jne	 SHORT $LN2@protect

; 1255 :         if (!_PyObject_PrepOrigType(*dp, 0)) {

  0005d	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  00060	33 d2		 xor	 edx, edx
  00062	e8 00 00 00 00	 call	 _PyObject_PrepOrigType
  00067	84 c0		 test	 al, al
  00069	75 1e		 jne	 SHORT $LN1@protect

; 1256 :             /* Manually undo the protection we applied above. */
; 1257 :             Py_PXFLAGS(obj) &= ~Py_PXFLAGS_RWLOCK;

  0006b	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
  00070	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH

; 1258 :             obj->srw_lock = NULL;

  00075	48 c7 43 28 00
	00 00 00	 mov	 QWORD PTR [rbx+40], 0
  0007d	48 21 43 20	 and	 QWORD PTR [rbx+32], rax

; 1259 :             return NULL;

  00081	33 c0		 xor	 eax, eax

; 1265 : }

  00083	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00087	5b		 pop	 rbx
  00088	c3		 ret	 0
$LN1@protect:

; 1260 :         }
; 1261 :         InitializeSRWLock((PSRWLOCK)&((*dp)->srw_lock));

  00089	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  0008c	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00090	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeSRWLock

; 1262 :         Py_PXFLAGS((*dp)) |= Py_PXFLAGS_RWLOCK;

  00096	4c 8b 1f	 mov	 r11, QWORD PTR [rdi]
  00099	49 83 4b 20 04	 or	 QWORD PTR [r11+32], 4
$LN2@protect:

; 1263 :     }
; 1264 :     return obj;

  0009e	48 8b c3	 mov	 rax, rbx
  000a1	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 1265 : }

  000a6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000aa	5b		 pop	 rbx
  000ab	c3		 ret	 0
_protect ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@OHMGPHIF@_async_protect?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_async_protect DD imagerel $LN12
	DD	imagerel $LN12+200
	DD	imagerel $unwind$_async_protect
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_protect DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0P@OHMGPHIF@_async_protect?$AA@
CONST	SEGMENT
??_C@_0P@OHMGPHIF@_async_protect?$AA@ DB '_async_protect', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
CONST	ENDS
;	COMDAT _async_protect
_TEXT	SEGMENT
self$ = 64
obj$ = 72
_async_protect PROC					; COMDAT

; 1269 : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b da	 mov	 rbx, rdx

; 1270 :     Py_INCREF(obj);

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN5@async_prot@2
  00012	4c 8b ca	 mov	 r9, rdx
  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN4@async_prot@2
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN5@async_prot@2
$LN4@async_prot@2:
  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN5@async_prot@2:

; 1271 :     if (Py_ISPX(obj)) {

  00044	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@OHMGPHIF@_async_protect?$AA@
  00052	4c 8b cb	 mov	 r9, rbx
  00055	41 b8 f7 04 00
	00		 mov	 r8d, 1271		; 000004f7H
  0005b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00063	e8 00 00 00 00	 call	 _PyParallel_Guard
  00068	85 c0		 test	 eax, eax
  0006a	74 14		 je	 SHORT $LN1@async_prot@2

; 1272 :         PyErr_SetNone(PyExc_ProtectionError);

  0006c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ProtectionError
  00073	e8 00 00 00 00	 call	 PyErr_SetNone

; 1273 :         return NULL;

  00078	33 c0		 xor	 eax, eax

; 1277 : }

  0007a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0007e	5b		 pop	 rbx
  0007f	c3		 ret	 0
$LN1@async_prot@2:

; 1274 :     }
; 1275 :     Py_INCREF(obj);

  00080	e8 00 00 00 00	 call	 _Py_PXCTX
  00085	85 c0		 test	 eax, eax
  00087	75 32		 jne	 SHORT $LN9@async_prot@2
  00089	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00090	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00097	4c 8b cb	 mov	 r9, rbx
  0009a	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000a0	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000a8	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ad	85 c0		 test	 eax, eax
  000af	75 06		 jne	 SHORT $LN8@async_prot@2
  000b1	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000b5	74 04		 je	 SHORT $LN9@async_prot@2
$LN8@async_prot@2:
  000b7	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN9@async_prot@2:

; 1276 :     return _protect(obj);

  000bb	48 8b cb	 mov	 rcx, rbx

; 1277 : }

  000be	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c2	5b		 pop	 rbx
  000c3	e9 00 00 00 00	 jmp	 _protect
_async_protect ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@NIKPECIN@invalid?5type?5for?5raw?5attribute?$AA@ ; `string'
PUBLIC	??_C@_0BG@IOLDKAG@not?5an?5io?5file?5object?$AA@ ; `string'
PUBLIC	??_C@_03DGOGAGNC@raw?$AA@			; `string'
EXTRN	PyFileIO_Type:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_async__rawfile DD imagerel $LN13
	DD	imagerel $LN13+118
	DD	imagerel $unwind$_async__rawfile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_async__rawfile DD imagerel $LN13+118
	DD	imagerel $LN13+173
	DD	imagerel $chain$0$_async__rawfile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_async__rawfile DD imagerel $LN13+173
	DD	imagerel $LN13+237
	DD	imagerel $chain$2$_async__rawfile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$_async__rawfile DD imagerel $LN13+237
	DD	imagerel $LN13+251
	DD	imagerel $chain$3$_async__rawfile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$_async__rawfile DD 021H
	DD	imagerel $LN13
	DD	imagerel $LN13+118
	DD	imagerel $unwind$_async__rawfile
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_async__rawfile DD 020021H
	DD	087400H
	DD	imagerel $LN13
	DD	imagerel $LN13+118
	DD	imagerel $unwind$_async__rawfile
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_async__rawfile DD 020521H
	DD	087405H
	DD	imagerel $LN13
	DD	imagerel $LN13+118
	DD	imagerel $unwind$_async__rawfile
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async__rawfile DD 040a01H
	DD	09340aH
	DD	06006520aH
xdata	ENDS
;	COMDAT ??_C@_0BP@NIKPECIN@invalid?5type?5for?5raw?5attribute?$AA@
CONST	SEGMENT
??_C@_0BP@NIKPECIN@invalid?5type?5for?5raw?5attribute?$AA@ DB 'invalid ty'
	DB	'pe for raw attribute', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IOLDKAG@not?5an?5io?5file?5object?$AA@
CONST	SEGMENT
??_C@_0BG@IOLDKAG@not?5an?5io?5file?5object?$AA@ DB 'not an io file objec'
	DB	't', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_03DGOGAGNC@raw?$AA@
CONST	SEGMENT
??_C@_03DGOGAGNC@raw?$AA@ DB 'raw', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
CONST	ENDS
;	COMDAT _async__rawfile
_TEXT	SEGMENT
self$ = 64
obj$ = 72
_async__rawfile PROC					; COMDAT

; 1281 : {

$LN13:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b da	 mov	 rbx, rdx

; 1282 :     PyObject *raw;
; 1283 :     fileio   *f;
; 1284 : 
; 1285 :     Py_INCREF(obj);

  0000d	e8 00 00 00 00	 call	 _Py_PXCTX
  00012	85 c0		 test	 eax, eax
  00014	75 32		 jne	 SHORT $LN8@async__raw
  00016	4c 8b ca	 mov	 r9, rdx
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00027	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0002d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00035	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003a	85 c0		 test	 eax, eax
  0003c	75 06		 jne	 SHORT $LN7@async__raw
  0003e	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00042	74 04		 je	 SHORT $LN8@async__raw
$LN7@async__raw:
  00044	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN8@async__raw:

; 1286 :     if (PyFileIO_Check(obj))

  00048	48 8b 4b 58	 mov	 rcx, QWORD PTR [rbx+88]
  0004c	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:PyFileIO_Type
  00053	48 3b ce	 cmp	 rcx, rsi
  00056	0f 84 91 00 00
	00		 je	 $LN3@async__raw
  0005c	48 8b d6	 mov	 rdx, rsi
  0005f	e8 00 00 00 00	 call	 PyType_IsSubtype
  00064	85 c0		 test	 eax, eax
  00066	0f 85 81 00 00
	00		 jne	 $LN3@async__raw

; 1288 : 
; 1289 :     raw = PyObject_GetAttrString(obj, "raw");

  0006c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03DGOGAGNC@raw?$AA@
  00073	48 8b cb	 mov	 rcx, rbx
  00076	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  0007b	e8 00 00 00 00	 call	 PyObject_GetAttrString
  00080	48 8b f8	 mov	 rdi, rax

; 1290 :     if (!raw) {

  00083	48 85 c0	 test	 rax, rax
  00086	75 25		 jne	 SHORT $LN2@async__raw

; 1291 :         PyErr_SetString(PyExc_ValueError, "not an io file object");

  00088	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@IOLDKAG@not?5an?5io?5file?5object?$AA@
$LN12@async__raw:
  0008f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00096	e8 00 00 00 00	 call	 PyErr_SetString
  0009b	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 1292 :         return NULL;

  000a0	33 c0		 xor	 eax, eax

; 1304 : }

  000a2	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000a7	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ab	5e		 pop	 rsi
  000ac	c3		 ret	 0
$LN2@async__raw:

; 1293 :     }
; 1294 : 
; 1295 :     if (!PyFileIO_Check(raw)) {

  000ad	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000b1	48 3b ce	 cmp	 rcx, rsi
  000b4	74 15		 je	 SHORT $LN1@async__raw
  000b6	48 8b d6	 mov	 rdx, rsi
  000b9	e8 00 00 00 00	 call	 PyType_IsSubtype
  000be	85 c0		 test	 eax, eax
  000c0	75 09		 jne	 SHORT $LN1@async__raw

; 1296 :         PyErr_SetString(PyExc_ValueError, "invalid type for raw attribute");

  000c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@NIKPECIN@invalid?5type?5for?5raw?5attribute?$AA@

; 1297 :         return NULL;

  000c9	eb c4		 jmp	 SHORT $LN12@async__raw
$LN1@async__raw:

; 1298 :     }
; 1299 : 
; 1300 :     f = (fileio *)raw;
; 1301 :     Py_INCREF(f);

  000cb	48 8b cf	 mov	 rcx, rdi
  000ce	e8 00 00 00 00	 call	 _Py_IncRef

; 1302 :     f->owner = obj;

  000d3	48 89 9f b8 00
	00 00		 mov	 QWORD PTR [rdi+184], rbx

; 1303 :     return (PyObject *)f;

  000da	48 8b c7	 mov	 rax, rdi
  000dd	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 1304 : }

  000e2	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000e7	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000eb	5e		 pop	 rsi
  000ec	c3		 ret	 0
$LN3@async__raw:

; 1287 :         return obj;

  000ed	48 8b c3	 mov	 rax, rbx

; 1304 : }

  000f0	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000f5	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000f9	5e		 pop	 rsi
  000fa	c3		 ret	 0
_async__rawfile ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@KGNLFIED@non?9None?5return?5value?5detected?$AA@ ; `string'
PUBLIC	null_with_exc_or_non_none_return_type
;	COMDAT pdata
pdata	SEGMENT
$pdata$null_with_exc_or_non_none_return_type DD imagerel $LN9
	DD	imagerel $LN9+78
	DD	imagerel $unwind$null_with_exc_or_non_none_return_type
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$null_with_exc_or_non_none_return_type DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BP@KGNLFIED@non?9None?5return?5value?5detected?$AA@
CONST	SEGMENT
??_C@_0BP@KGNLFIED@non?9None?5return?5value?5detected?$AA@ DB 'non-None r'
	DB	'eturn value detected', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT null_with_exc_or_non_none_return_type
_TEXT	SEGMENT
op$ = 48
tstate$ = 56
null_with_exc_or_non_none_return_type PROC		; COMDAT

; 2534 : {

$LN9:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2535 :     if (!op && tstate->curexc_type)

  00004	48 85 c9	 test	 rcx, rcx
  00007	75 10		 jne	 SHORT $LN1@null_with_
  00009	48 39 4a 48	 cmp	 QWORD PTR [rdx+72], rcx
  0000d	74 16		 je	 SHORT $LN2@null_with_

; 2545 :     return 1;

  0000f	b8 01 00 00 00	 mov	 eax, 1

; 2546 : }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	c3		 ret	 0
$LN1@null_with_:

; 2536 :         return 1;
; 2537 : 
; 2538 :     assert(!tstate->curexc_type);
; 2539 : 
; 2540 :     if ((!op && !tstate->curexc_type) || op == Py_None)

  00019	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00020	48 3b c8	 cmp	 rcx, rax
  00023	75 07		 jne	 SHORT $LN3@null_with_
$LN2@null_with_:

; 2541 :         return 0;

  00025	33 c0		 xor	 eax, eax

; 2546 : }

  00027	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002b	c3		 ret	 0
$LN3@null_with_:

; 2542 : 
; 2543 :     Py_DECREF(op);

  0002c	e8 00 00 00 00	 call	 _Py_DecRef

; 2544 :     PyErr_SetString(PyExc_ValueError, "non-None return value detected");

  00031	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00038	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@KGNLFIED@non?9None?5return?5value?5detected?$AA@
  0003f	e8 00 00 00 00	 call	 PyErr_SetString

; 2545 :     return 1;

  00044	b8 01 00 00 00	 mov	 eax, 1

; 2546 : }

  00049	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004d	c3		 ret	 0
null_with_exc_or_non_none_return_type ENDP
_TEXT	ENDS
PUBLIC	null_or_non_none_return_type
;	COMDAT pdata
pdata	SEGMENT
$pdata$null_or_non_none_return_type DD imagerel $LN6
	DD	imagerel $LN6+62
	DD	imagerel $unwind$null_or_non_none_return_type
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$null_or_non_none_return_type DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT null_or_non_none_return_type
_TEXT	SEGMENT
op$ = 48
null_or_non_none_return_type PROC			; COMDAT

; 2551 : {

$LN6:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2552 :     if (!op)

  00004	48 85 c9	 test	 rcx, rcx

; 2553 :         return 1;

  00007	74 2b		 je	 SHORT $LN5@null_or_no

; 2554 : 
; 2555 :     if (op == Py_None)

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00010	48 3b c8	 cmp	 rcx, rax
  00013	75 07		 jne	 SHORT $LN1@null_or_no

; 2556 :         return 0;

  00015	33 c0		 xor	 eax, eax

; 2561 : }

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
$LN1@null_or_no:

; 2557 : 
; 2558 :     Py_DECREF(op);

  0001c	e8 00 00 00 00	 call	 _Py_DecRef

; 2559 :     PyErr_SetString(PyExc_ValueError, "non-None return value detected");

  00021	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@KGNLFIED@non?9None?5return?5value?5detected?$AA@
  0002f	e8 00 00 00 00	 call	 PyErr_SetString
$LN5@null_or_no:

; 2560 :     return 1;

  00034	b8 01 00 00 00	 mov	 eax, 1

; 2561 : }

  00039	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003d	c3		 ret	 0
null_or_non_none_return_type ENDP
_TEXT	ENDS
PUBLIC	PxContext_HandleError
EXTRN	PyTuple_Pack:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxContext_HandleError DD imagerel $LN6
	DD	imagerel $LN6+225
	DD	imagerel $unwind$PxContext_HandleError
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxContext_HandleError DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PxContext_HandleError
_TEXT	SEGMENT
c$ = 48
PxContext_HandleError PROC				; COMDAT

; 2878 : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2879 :     PyObject *args, *r;
; 2880 :     PxState *px = c->px;
; 2881 :     PyThreadState *pstate = c->pstate;
; 2882 : 
; 2883 :     assert(pstate->curexc_type != NULL);
; 2884 : 
; 2885 :     if (c->errback) {

  00014	48 83 b9 58 32
	00 00 00	 cmp	 QWORD PTR [rcx+12888], 0
  0001c	48 8b b1 d8 00
	00 00		 mov	 rsi, QWORD PTR [rcx+216]
  00023	48 8b b9 e8 00
	00 00		 mov	 rdi, QWORD PTR [rcx+232]
  0002a	48 8b d9	 mov	 rbx, rcx
  0002d	0f 84 91 00 00
	00		 je	 $error$128143

; 2886 :         PyObject *exc;
; 2887 :         assert(pstate->curexc_type);
; 2888 :         exc = PyTuple_Pack(3, pstate->curexc_type,
; 2889 :                               pstate->curexc_value,
; 2890 :                               pstate->curexc_traceback);

  00033	4c 8b 4f 58	 mov	 r9, QWORD PTR [rdi+88]
  00037	4c 8b 47 50	 mov	 r8, QWORD PTR [rdi+80]
  0003b	48 8b 57 48	 mov	 rdx, QWORD PTR [rdi+72]
  0003f	b9 03 00 00 00	 mov	 ecx, 3
  00044	e8 00 00 00 00	 call	 PyTuple_Pack
  00049	48 8b e8	 mov	 rbp, rax

; 2891 :         if (!exc)

  0004c	48 85 c0	 test	 rax, rax
  0004f	74 73		 je	 SHORT $error$128143

; 2892 :             goto error;
; 2893 : 
; 2894 :         PyErr_Clear();

  00051	e8 00 00 00 00	 call	 PyErr_Clear

; 2895 :         args = Py_BuildValue("(O)", exc);

  00056	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  0005d	48 8b d5	 mov	 rdx, rbp
  00060	e8 00 00 00 00	 call	 Py_BuildValue

; 2896 :         r = PyObject_CallObject(c->errback, args);

  00065	48 8b 8b 58 32
	00 00		 mov	 rcx, QWORD PTR [rbx+12888]
  0006c	48 8b d0	 mov	 rdx, rax
  0006f	e8 00 00 00 00	 call	 PyObject_CallObject

; 2897 :         if (!null_with_exc_or_non_none_return_type(r, pstate)) {

  00074	48 8b d7	 mov	 rdx, rdi
  00077	48 8b c8	 mov	 rcx, rax
  0007a	e8 00 00 00 00	 call	 null_with_exc_or_non_none_return_type
  0007f	85 c0		 test	 eax, eax
  00081	75 41		 jne	 SHORT $error$128143

; 2898 :             c->errback_completed->from = c;

  00083	48 8b 83 38 33
	00 00		 mov	 rax, QWORD PTR [rbx+13112]
  0008a	48 89 58 18	 mov	 QWORD PTR [rax+24], rbx

; 2899 :             PxList_TimestampItem(c->errback_completed);

  0008e	48 8b 8b 38 33
	00 00		 mov	 rcx, QWORD PTR [rbx+13112]
  00095	e8 00 00 00 00	 call	 PxList_TimestampItem

; 2900 :             InterlockedExchange(&(c->done), 1);

  0009a	b8 01 00 00 00	 mov	 eax, 1
  0009f	87 83 04 38 00
	00		 xchg	 DWORD PTR [rbx+14340], eax

; 2901 :             /*
; 2902 :             InterlockedIncrement64(done);
; 2903 :             InterlockedDecrement(inflight);
; 2904 :             */
; 2905 :             PxList_Push(px->completed_errbacks, c->errback_completed);

  000a5	48 8b 93 38 33
	00 00		 mov	 rdx, QWORD PTR [rbx+13112]
  000ac	48 8b 4e 18	 mov	 rcx, QWORD PTR [rsi+24]
  000b0	e8 00 00 00 00	 call	 PxList_Push

; 2906 :             SetEvent(px->wakeup);

  000b5	48 8b 8e a0 00
	00 00		 mov	 rcx, QWORD PTR [rsi+160]
  000bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetEvent

; 2907 :             return;

  000c2	eb 08		 jmp	 SHORT $LN4@PxContext_@4
$error$128143:

; 2908 :         }
; 2909 :     }
; 2910 : 
; 2911 : error:
; 2912 :     PxState_SetError(c);

  000c4	48 8b cb	 mov	 rcx, rbx
  000c7	e8 00 00 00 00	 call	 PxState_SetError
$LN4@PxContext_@4:

; 2913 : }

  000cc	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000d1	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000d6	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000db	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000df	5f		 pop	 rdi
  000e0	c3		 ret	 0
PxContext_HandleError ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_WorkCallback
EXTRN	PyObject_Call:PROC
_BSS	SEGMENT
PyExc_WaitTimeoutError DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_WorkCallback DD imagerel $LN24
	DD	imagerel $LN24+769
	DD	imagerel $unwind$_PyParallel_WorkCallback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_WorkCallback DD 0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0d0143218H
	DD	07010c012H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyParallel_WorkCallback
_TEXT	SEGMENT
instance$ = 64
context$ = 72
_PyParallel_WorkCallback PROC				; COMDAT

; 3046 : {

$LN24:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00018	48 8b da	 mov	 rbx, rdx

; 3047 :     Context  *c = (Context *)context;
; 3048 :     Stats    *s;
; 3049 :     PxState  *px;
; 3050 :     PyObject *r;
; 3051 :     PyObject *func = NULL,
; 3052 :              *args = NULL,
; 3053 :              *kwds = NULL,
; 3054 :              *callback = NULL,
; 3055 :              *callback_args = NULL,
; 3056 :              *callback_kwds = NULL,
; 3057 :              *errback = NULL;
; 3058 : 
; 3059 :     PyThreadState *pstate;
; 3060 : 
; 3061 :     volatile long       *pending;
; 3062 :     volatile long       *inflight;
; 3063 :     volatile long long  *done;
; 3064 : 
; 3065 :     _PyParallel_EnteredCallback(c, instance);

  0001b	48 8b d1	 mov	 rdx, rcx
  0001e	48 8b cb	 mov	 rcx, rbx
  00021	e8 00 00 00 00	 call	 _PyParallel_EnteredCallback

; 3066 : 
; 3067 :     s = &(c->stats);
; 3068 :     px = (PxState *)c->tstate->px;
; 3069 : 
; 3070 :     if (c->tp_wait) {

  00026	48 83 bb 68 32
	00 00 00	 cmp	 QWORD PTR [rbx+12904], 0
  0002e	48 8b 83 e0 00
	00 00		 mov	 rax, QWORD PTR [rbx+224]
  00035	48 8b b8 a0 00
	00 00		 mov	 rdi, QWORD PTR [rax+160]
  0003c	74 17		 je	 SHORT $LN20@PyParallel@22

; 3071 :         pending = &(px->waits_pending);

  0003e	48 8d 87 28 01
	00 00		 lea	 rax, QWORD PTR [rdi+296]

; 3072 :         inflight = &(px->waits_inflight);

  00045	48 8d b7 2c 01
	00 00		 lea	 rsi, QWORD PTR [rdi+300]

; 3073 :         done = &(px->waits_done);

  0004c	48 8d af 30 01
	00 00		 lea	 rbp, QWORD PTR [rdi+304]
  00053	eb 57		 jmp	 SHORT $LN15@PyParallel@22
$LN20@PyParallel@22:

; 3074 :     } else if (c->tp_io) {

  00055	48 83 bb 88 32
	00 00 00	 cmp	 QWORD PTR [rbx+12936], 0
  0005d	74 17		 je	 SHORT $LN18@PyParallel@22

; 3075 :         pending = &(px->io_pending);

  0005f	48 8d 87 58 01
	00 00		 lea	 rax, QWORD PTR [rdi+344]

; 3076 :         inflight = &(px->io_inflight);

  00066	48 8d b7 5c 01
	00 00		 lea	 rsi, QWORD PTR [rdi+348]

; 3077 :         done = &(px->io_done);

  0006d	48 8d af 60 01
	00 00		 lea	 rbp, QWORD PTR [rdi+352]
  00074	eb 36		 jmp	 SHORT $LN15@PyParallel@22
$LN18@PyParallel@22:

; 3078 :     } else if (c->tp_timer) {

  00076	48 83 bb e8 32
	00 00 00	 cmp	 QWORD PTR [rbx+13032], 0
  0007e	74 17		 je	 SHORT $LN16@PyParallel@22

; 3079 :         pending = &(px->timers_pending);

  00080	48 8d 87 40 01
	00 00		 lea	 rax, QWORD PTR [rdi+320]

; 3080 :         inflight = &(px->timers_inflight);

  00087	48 8d b7 44 01
	00 00		 lea	 rsi, QWORD PTR [rdi+324]

; 3081 :         done = &(px->timers_done);

  0008e	48 8d af 48 01
	00 00		 lea	 rbp, QWORD PTR [rdi+328]

; 3082 :     } else {

  00095	eb 15		 jmp	 SHORT $LN15@PyParallel@22
$LN16@PyParallel@22:

; 3083 :         pending = &(px->pending);

  00097	48 8d 87 10 01
	00 00		 lea	 rax, QWORD PTR [rdi+272]

; 3084 :         inflight = &(px->inflight);

  0009e	48 8d b7 14 01
	00 00		 lea	 rsi, QWORD PTR [rdi+276]

; 3085 :         done = &(px->done);

  000a5	48 8d af 18 01
	00 00		 lea	 rbp, QWORD PTR [rdi+280]
$LN15@PyParallel@22:

; 3086 :     }
; 3087 : 
; 3088 :     InterlockedDecrement(pending);

  000ac	f0 ff 08	 lock dec DWORD PTR [rax]

; 3089 :     InterlockedIncrement(inflight);

  000af	f0 ff 06	 lock inc DWORD PTR [rsi]

; 3090 : 
; 3091 :     pstate = c->pstate;
; 3092 : 
; 3093 :     func = c->func;
; 3094 :     args = c->args;
; 3095 :     kwds = c->kwds;
; 3096 : 
; 3097 :     callback = c->callback;
; 3098 :     errback = c->errback;
; 3099 : 
; 3100 :     if (c->tp_wait) {

  000b2	48 83 bb 68 32
	00 00 00	 cmp	 QWORD PTR [rbx+12904], 0
  000ba	4c 8b a3 e8 00
	00 00		 mov	 r12, QWORD PTR [rbx+232]
  000c1	4c 8b ab 40 32
	00 00		 mov	 r13, QWORD PTR [rbx+12864]
  000c8	0f 84 d4 00 00
	00		 je	 $start$128261

; 3101 :         assert(
; 3102 :             c->wait_result == WAIT_OBJECT_0 ||
; 3103 :             c->wait_result == WAIT_TIMEOUT  ||
; 3104 :             c->wait_result == WAIT_ABANDONED_0
; 3105 :         );
; 3106 :         if (c->wait_result == WAIT_OBJECT_0)

  000ce	8b 83 70 32 00
	00		 mov	 eax, DWORD PTR [rbx+12912]
  000d4	85 c0		 test	 eax, eax
  000d6	0f 84 c6 00 00
	00		 je	 $start$128261

; 3107 :             goto start;
; 3108 :         else if (c->wait_result == WAIT_TIMEOUT) {

  000dc	3d 02 01 00 00	 cmp	 eax, 258		; 00000102H
  000e1	0f 85 af 00 00
	00		 jne	 $LN11@PyParallel@22

; 3109 :             PyErr_SetNone(PyExc_WaitTimeoutError);

  000e7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_WaitTimeoutError
  000ee	e8 00 00 00 00	 call	 PyErr_SetNone
$errback$128264:

; 3198 :     }
; 3199 : 
; 3200 : errback:
; 3201 :     if (c->errback) {

  000f3	48 83 bb 58 32
	00 00 00	 cmp	 QWORD PTR [rbx+12888], 0
  000fb	0f 84 69 01 00
	00		 je	 $error$128279

; 3202 :         PyObject *exc;
; 3203 :         assert(pstate->curexc_type);
; 3204 :         exc = PyTuple_Pack(3, pstate->curexc_type,
; 3205 :                               pstate->curexc_value,
; 3206 :                               pstate->curexc_traceback);

  00101	4d 8b 4c 24 58	 mov	 r9, QWORD PTR [r12+88]
  00106	4d 8b 44 24 50	 mov	 r8, QWORD PTR [r12+80]
  0010b	49 8b 54 24 48	 mov	 rdx, QWORD PTR [r12+72]
  00110	b9 03 00 00 00	 mov	 ecx, 3
  00115	e8 00 00 00 00	 call	 PyTuple_Pack
  0011a	4c 8b e8	 mov	 r13, rax

; 3207 :         if (!exc)

  0011d	48 85 c0	 test	 rax, rax
  00120	0f 84 44 01 00
	00		 je	 $error$128279

; 3208 :             goto error;
; 3209 : 
; 3210 :         PyErr_Clear();

  00126	e8 00 00 00 00	 call	 PyErr_Clear

; 3211 :         args = Py_BuildValue("(O)", exc);

  0012b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00132	49 8b d5	 mov	 rdx, r13
  00135	e8 00 00 00 00	 call	 Py_BuildValue

; 3212 :         r = PyObject_CallObject(c->errback, args);

  0013a	48 8b 8b 58 32
	00 00		 mov	 rcx, QWORD PTR [rbx+12888]
  00141	48 8b d0	 mov	 rdx, rax
  00144	e8 00 00 00 00	 call	 PyObject_CallObject

; 3213 :         if (!null_with_exc_or_non_none_return_type(r, pstate)) {

  00149	49 8b d4	 mov	 rdx, r12
  0014c	48 8b c8	 mov	 rcx, rax
  0014f	e8 00 00 00 00	 call	 null_with_exc_or_non_none_return_type
  00154	85 c0		 test	 eax, eax
  00156	0f 85 0e 01 00
	00		 jne	 $error$128279

; 3214 :             c->errback_completed->from = c;

  0015c	48 8b 83 38 33
	00 00		 mov	 rax, QWORD PTR [rbx+13112]
  00163	48 89 58 18	 mov	 QWORD PTR [rax+24], rbx

; 3215 :             PxList_TimestampItem(c->errback_completed);

  00167	48 8b 8b 38 33
	00 00		 mov	 rcx, QWORD PTR [rbx+13112]
  0016e	e8 00 00 00 00	 call	 PxList_TimestampItem

; 3216 :             InterlockedExchange(&(c->done), 1);

  00173	b8 01 00 00 00	 mov	 eax, 1
  00178	87 83 04 38 00
	00		 xchg	 DWORD PTR [rbx+14340], eax

; 3217 :             InterlockedIncrement64(done);

  0017e	f0 48 ff 45 00	 lock inc QWORD PTR [rbp]

; 3218 :             InterlockedDecrement(inflight);

  00183	f0 ff 0e	 lock dec DWORD PTR [rsi]

; 3219 :             PxList_Push(px->completed_errbacks, c->errback_completed);

  00186	48 8b 93 38 33
	00 00		 mov	 rdx, QWORD PTR [rbx+13112]
  0018d	48 8b 4f 18	 mov	 rcx, QWORD PTR [rdi+24]

; 3220 :             SetEvent(px->wakeup);
; 3221 :             goto end;

  00191	e9 39 01 00 00	 jmp	 $LN23@PyParallel@22
$LN11@PyParallel@22:

; 3110 :             goto errback;
; 3111 :         } else {
; 3112 :             PyErr_SetFromWindowsErr(0);

  00196	33 c9		 xor	 ecx, ecx
  00198	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 3113 :             goto errback;

  0019d	e9 51 ff ff ff	 jmp	 $errback$128264
$start$128261:

; 3114 :         }
; 3115 :     } /* else if (c->tp_io && c->io_type == Px_IOTYPE_FILE) {
; 3116 :         PxListItem *item;
; 3117 :         PyObject *obj;
; 3118 :         PxIO *io;
; 3119 :         ULONG_PTR nbytes;
; 3120 :         assert(
; 3121 :             (c->io_type & (PyAsync_IO_WRITE)) &&
; 3122 :             c->overlapped != NULL &&
; 3123 :             c->io != NULL
; 3124 :         );
; 3125 :         io = c->io;
; 3126 :         obj = io->obj;
; 3127 :         nbytes = c->io_nbytes;
; 3128 :         if (PxIO_IS_ONDEMAND(io))
; 3129 :             PxList_Push(px->io_ondemand, E2I(io));
; 3130 :         else {
; 3131 :             assert(PxIO_IS_PREALLOC(io));
; 3132 :             memset(&(io->overlapped), 0, sizeof(OVERLAPPED));
; 3133 :             io->obj = NULL;
; 3134 :             PxList_Push(px->io_free, E2I(io));
; 3135 :             SetEvent(px->io_free_wakeup);
; 3136 :         }
; 3137 : 
; 3138 :         item = _PyHeap_NewListItem(c);
; 3139 :         if (!item) {
; 3140 :             PyErr_NoMemory();
; 3141 :             goto error;
; 3142 :         }
; 3143 :         item->p1 = obj;
; 3144 :         PxList_Push(c->decrefs, item);
; 3145 : 
; 3146 :         if (c->io_result == NO_ERROR) {
; 3147 :             if (!c->callback)
; 3148 :                 goto after_callback;
; 3149 :             args = PyTuple_Pack(2, obj, nbytes);
; 3150 :             goto start_callback;
; 3151 :         } else {
; 3152 :             PyErr_SetFromWindowsErr(c->io_result);
; 3153 :             goto errback;
; 3154 :         }
; 3155 :         assert(0);
; 3156 :     } else if (c->tp_io && c->io_type == Px_IOTYPE_SOCKET) {
; 3157 :         PxSocket *s = (PxSocket *)c->io_obj;
; 3158 :         switch (s->io_op) {
; 3159 :             case PxSocket_IO_CONNECT:
; 3160 :                 READ_LOCK(s);
; 3161 :                 func = s->connection_made;
; 3162 :                 READ_UNLOCK(s);
; 3163 :                 args = Py_BuildValue("(O)", s);
; 3164 :                 break;
; 3165 :             case PxSocket_IO_READ:
; 3166 :                 func = s->data_received;
; 3167 :                 if (!func)
; 3168 :                     break;
; 3169 :         }
; 3170 :         READ_UNLOCK(s);
; 3171 : 
; 3172 :     } */ else if (c->tp_timer) {
; 3173 :         assert(0);
; 3174 :     }
; 3175 : 
; 3176 : start:
; 3177 :     s->start = _Py_rdtsc();

  001a2	0f 31		 rdtsc
  001a4	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  001a8	48 0b c2	 or	 rax, rdx
  001ab	48 89 83 18 01
	00 00		 mov	 QWORD PTR [rbx+280], rax

; 3178 :     c->result = PyObject_Call(c->func, c->args, c->kwds);

  001b2	4c 8b 83 48 32
	00 00		 mov	 r8, QWORD PTR [rbx+12872]
  001b9	48 8b 93 40 32
	00 00		 mov	 rdx, QWORD PTR [rbx+12864]
  001c0	48 8b 8b 38 32
	00 00		 mov	 rcx, QWORD PTR [rbx+12856]
  001c7	e8 00 00 00 00	 call	 PyObject_Call
  001cc	48 89 83 60 32
	00 00		 mov	 QWORD PTR [rbx+12896], rax

; 3179 :     s->end = _Py_rdtsc();

  001d3	0f 31		 rdtsc
  001d5	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  001d9	48 0b c2	 or	 rax, rdx
  001dc	48 89 83 20 01
	00 00		 mov	 QWORD PTR [rbx+288], rax

; 3180 : 
; 3181 :     if (c->result) {

  001e3	48 8b 93 60 32
	00 00		 mov	 rdx, QWORD PTR [rbx+12896]
  001ea	48 85 d2	 test	 rdx, rdx
  001ed	0f 84 00 ff ff
	ff		 je	 $errback$128264

; 3182 :         assert(!pstate->curexc_type);
; 3183 :         if (c->callback) {

  001f3	48 83 bb 50 32
	00 00 00	 cmp	 QWORD PTR [rbx+12880], 0
  001fb	74 36		 je	 SHORT $LN4@PyParallel@22

; 3184 :             if (!args)

  001fd	4d 85 ed	 test	 r13, r13
  00200	75 0f		 jne	 SHORT $LN5@PyParallel@22

; 3185 :                 args = Py_BuildValue("(O)", c->result);

  00202	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00209	e8 00 00 00 00	 call	 Py_BuildValue
  0020e	4c 8b e8	 mov	 r13, rax
$LN5@PyParallel@22:

; 3186 :             r = PyObject_CallObject(c->callback, args);

  00211	48 8b 8b 50 32
	00 00		 mov	 rcx, QWORD PTR [rbx+12880]
  00218	49 8b d5	 mov	 rdx, r13
  0021b	e8 00 00 00 00	 call	 PyObject_CallObject

; 3187 :             if (null_with_exc_or_non_none_return_type(r, pstate))

  00220	49 8b d4	 mov	 rdx, r12
  00223	48 8b c8	 mov	 rcx, rax
  00226	e8 00 00 00 00	 call	 null_with_exc_or_non_none_return_type
  0022b	85 c0		 test	 eax, eax
  0022d	0f 85 c0 fe ff
	ff		 jne	 $errback$128264
$LN4@PyParallel@22:

; 3188 :                 goto errback;
; 3189 :         }
; 3190 :         c->callback_completed->from = c;

  00233	48 8b 83 30 33
	00 00		 mov	 rax, QWORD PTR [rbx+13104]
  0023a	48 89 58 18	 mov	 QWORD PTR [rax+24], rbx

; 3191 :         PxList_TimestampItem(c->callback_completed);

  0023e	48 8b 8b 30 33
	00 00		 mov	 rcx, QWORD PTR [rbx+13104]
  00245	e8 00 00 00 00	 call	 PxList_TimestampItem

; 3192 :         InterlockedExchange(&(c->done), 1);

  0024a	b8 01 00 00 00	 mov	 eax, 1
  0024f	87 83 04 38 00
	00		 xchg	 DWORD PTR [rbx+14340], eax

; 3193 :         InterlockedIncrement64(done);

  00255	f0 48 ff 45 00	 lock inc QWORD PTR [rbp]

; 3194 :         InterlockedDecrement(inflight);

  0025a	f0 ff 0e	 lock dec DWORD PTR [rsi]

; 3195 :         PxList_Push(px->completed_callbacks, c->callback_completed);

  0025d	48 8b 93 30 33
	00 00		 mov	 rdx, QWORD PTR [rbx+13104]
  00264	48 8b 4f 10	 mov	 rcx, QWORD PTR [rdi+16]

; 3196 :         SetEvent(px->wakeup);
; 3197 :         goto end;

  00268	eb 65		 jmp	 SHORT $LN23@PyParallel@22
$error$128279:

; 3222 :         }
; 3223 :     }
; 3224 : 
; 3225 : error:
; 3226 :     assert(pstate->curexc_type != NULL);
; 3227 :     PxList_TimestampItem(c->error);

  0026a	48 8b 8b 28 33
	00 00		 mov	 rcx, QWORD PTR [rbx+13096]
  00271	e8 00 00 00 00	 call	 PxList_TimestampItem

; 3228 :     c->error->from = c;

  00276	4c 8b 9b 28 33
	00 00		 mov	 r11, QWORD PTR [rbx+13096]
  0027d	49 89 5b 18	 mov	 QWORD PTR [r11+24], rbx

; 3229 :     c->error->p1 = pstate->curexc_type;

  00281	48 8b 8b 28 33
	00 00		 mov	 rcx, QWORD PTR [rbx+13096]
  00288	49 8b 44 24 48	 mov	 rax, QWORD PTR [r12+72]
  0028d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 3230 :     c->error->p2 = pstate->curexc_value;

  00291	48 8b 8b 28 33
	00 00		 mov	 rcx, QWORD PTR [rbx+13096]
  00298	49 8b 44 24 50	 mov	 rax, QWORD PTR [r12+80]
  0029d	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 3231 :     c->error->p3 = pstate->curexc_traceback;

  002a1	49 8b 44 24 58	 mov	 rax, QWORD PTR [r12+88]
  002a6	48 8b 8b 28 33
	00 00		 mov	 rcx, QWORD PTR [rbx+13096]
  002ad	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 3232 :     InterlockedExchange(&(c->done), 1);

  002b1	b8 01 00 00 00	 mov	 eax, 1
  002b6	87 83 04 38 00
	00		 xchg	 DWORD PTR [rbx+14340], eax

; 3233 :     InterlockedIncrement64(done);

  002bc	f0 48 ff 45 00	 lock inc QWORD PTR [rbp]

; 3234 :     InterlockedDecrement(inflight);

  002c1	f0 ff 0e	 lock dec DWORD PTR [rsi]

; 3235 :     PxList_Push(px->errors, c->error);

  002c4	48 8b 93 28 33
	00 00		 mov	 rdx, QWORD PTR [rbx+13096]
  002cb	48 8b 4f 08	 mov	 rcx, QWORD PTR [rdi+8]
$LN23@PyParallel@22:
  002cf	e8 00 00 00 00	 call	 PxList_Push

; 3236 :     SetEvent(px->wakeup);

  002d4	48 8b 8f a0 00
	00 00		 mov	 rcx, QWORD PTR [rdi+160]
  002db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetEvent

; 3237 : end:
; 3238 :     _PyParallel_ExitingCallback(c);

  002e1	48 8b cb	 mov	 rcx, rbx
$end$128274:

; 3239 : }

  002e4	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  002e9	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  002ee	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  002f3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  002f7	41 5d		 pop	 r13
  002f9	41 5c		 pop	 r12
  002fb	5f		 pop	 rdi
  002fc	e9 00 00 00 00	 jmp	 _PyParallel_ExitingCallback
_PyParallel_WorkCallback ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_WaitCallback
; Function compile flags: /Ogtpy
;	COMDAT _PyParallel_WaitCallback
_TEXT	SEGMENT
instance$ = 8
context$ = 16
wait$ = 24
wait_result$ = 32
_PyParallel_WaitCallback PROC				; COMDAT

; 3249 :     Context  *c = (Context *)context;
; 3250 : 
; 3251 :     assert(wait == c->tp_wait);
; 3252 :     c->wait_result = wait_result;

  00000	44 89 8a 70 32
	00 00		 mov	 DWORD PTR [rdx+12912], r9d

; 3253 : 
; 3254 :     _PyParallel_WorkCallback(instance, c);
; 3255 : }

  00007	e9 00 00 00 00	 jmp	 _PyParallel_WorkCallback
_PyParallel_WaitCallback ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_IOCallback
; Function compile flags: /Ogtpy
;	COMDAT _PyParallel_IOCallback
_TEXT	SEGMENT
instance$ = 8
context$ = 16
overlapped$ = 24
io_result$ = 32
nbytes$ = 40
tp_io$ = 48
_PyParallel_IOCallback PROC				; COMDAT

; 3268 :     Context *c = (Context *)context;
; 3269 :     assert(tp_io == c->tp_io);
; 3270 :     c->io_result = io_result;
; 3271 :     c->io_nbytes = nbytes;

  00000	48 8b 44 24 28	 mov	 rax, QWORD PTR nbytes$[rsp]
  00005	44 89 8a 94 32
	00 00		 mov	 DWORD PTR [rdx+12948], r9d
  0000c	48 89 82 98 32
	00 00		 mov	 QWORD PTR [rdx+12952], rax

; 3272 :     assert(overlapped == &(c->overlapped));
; 3273 :     /* c->io = OL2PxIO(c->overlapped);*/
; 3274 :     _PyParallel_WorkCallback(instance, c);
; 3275 : }

  00013	e9 00 00 00 00	 jmp	 _PyParallel_WorkCallback
_PyParallel_IOCallback ENDP
_TEXT	ENDS
PUBLIC	PyObject_Clone
EXTRN	_PyUnicode_Copy:PROC
EXTRN	_PyLong_Copy:PROC
EXTRN	PyErr_Format:PROC
EXTRN	PyFloat_Type:BYTE
EXTRN	PyLong_Type:BYTE
EXTRN	PyUnicode_Type:BYTE
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_Clone DD imagerel $LN18
	DD	imagerel $LN18+187
	DD	imagerel $unwind$PyObject_Clone
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_Clone DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyObject_Clone
_TEXT	SEGMENT
src$ = 48
errmsg$ = 56
PyObject_Clone PROC					; COMDAT

; 3653 : {

$LN18:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 3654 :     int valid_type;
; 3655 :     PyObject *result = NULL;
; 3656 :     PyTypeObject *tp;
; 3657 : 
; 3658 :     tp = Py_TYPE(src);

  00006	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0000a	48 8b d9	 mov	 rbx, rcx

; 3659 : 
; 3660 :     valid_type = (
; 3661 :         PyBytes_CheckExact(src)         ||
; 3662 :         PyByteArray_CheckExact(src)     ||
; 3663 :         PyUnicode_CheckExact(src)       ||
; 3664 :         PyLong_CheckExact(src)          ||
; 3665 :         PyFloat_CheckExact(src)
; 3666 :     );

  0000d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBytes_Type
  00014	45 33 c9	 xor	 r9d, r9d
  00017	4c 8d 15 00 00
	00 00		 lea	 r10, OFFSET FLAT:PyUnicode_Type
  0001e	4c 8d 1d 00 00
	00 00		 lea	 r11, OFFSET FLAT:PyLong_Type
  00025	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyFloat_Type
  0002c	48 3b c1	 cmp	 rax, rcx
  0002f	74 33		 je	 SHORT $LN8@PyObject_C
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyByteArray_Type
  00038	48 3b c1	 cmp	 rax, rcx
  0003b	74 27		 je	 SHORT $LN8@PyObject_C
  0003d	49 3b c2	 cmp	 rax, r10
  00040	74 22		 je	 SHORT $LN8@PyObject_C
  00042	49 3b c3	 cmp	 rax, r11
  00045	74 22		 je	 SHORT $LN15@PyObject_C
  00047	49 3b c0	 cmp	 rax, r8

; 3667 : 
; 3668 :     if (!valid_type) {

  0004a	74 18		 je	 SHORT $LN8@PyObject_C

; 3669 :         PyErr_Format(PyExc_ValueError, errmsg, tp->tp_name);

  0004c	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00050	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00057	e8 00 00 00 00	 call	 PyErr_Format
$LN17@PyObject_C:

; 3670 :         return NULL;

  0005c	33 c0		 xor	 eax, eax

; 3695 : }

  0005e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00062	5b		 pop	 rbx
  00063	c3		 ret	 0
$LN8@PyObject_C:

; 3671 :     }
; 3672 : 
; 3673 :     assert(_PyParallel_IsHeapOverrideActive());
; 3674 : 
; 3675 :     if (PyLong_CheckExact(src)) {

  00064	49 3b c3	 cmp	 rax, r11
  00067	75 11		 jne	 SHORT $LN7@PyObject_C
$LN15@PyObject_C:

; 3676 :         result = _PyLong_Copy((PyLongObject *)src);

  00069	48 8b cb	 mov	 rcx, rbx
  0006c	e8 00 00 00 00	 call	 _PyLong_Copy

; 3685 :         result = _PyUnicode_Copy(src);

  00071	4c 8b c8	 mov	 r9, rax

; 3695 : }

  00074	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00078	5b		 pop	 rbx
  00079	c3		 ret	 0
$LN7@PyObject_C:

; 3677 : 
; 3678 :     } else if (PyFloat_CheckExact(src)) {

  0007a	49 3b c0	 cmp	 rax, r8
  0007d	75 23		 jne	 SHORT $LN5@PyObject_C

; 3679 :         result = _PxObject_Init(NULL, &PyFloat_Type);

  0007f	49 8b d0	 mov	 rdx, r8
  00082	33 c9		 xor	 ecx, ecx
  00084	e8 00 00 00 00	 call	 _PxObject_Init
  00089	4c 8b c8	 mov	 r9, rax

; 3680 :         if (!result)

  0008c	48 85 c0	 test	 rax, rax

; 3681 :             return NULL;

  0008f	74 cb		 je	 SHORT $LN17@PyObject_C

; 3682 :         PyFloat_AS_DOUBLE(result) = PyFloat_AS_DOUBLE(src);

  00091	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00095	49 89 41 60	 mov	 QWORD PTR [r9+96], rax

; 3686 : 
; 3687 :     } else {
; 3688 :         assert(0);
; 3689 :     }
; 3690 : 
; 3691 :     assert(result);
; 3692 :     assert(Px_CLONED(result));
; 3693 : 
; 3694 :     return result;

  00099	49 8b c1	 mov	 rax, r9

; 3695 : }

  0009c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a0	5b		 pop	 rbx
  000a1	c3		 ret	 0
$LN5@PyObject_C:

; 3683 : 
; 3684 :     } else if (PyUnicode_CheckExact(src)) {

  000a2	49 3b c2	 cmp	 rax, r10
  000a5	75 0b		 jne	 SHORT $LN2@PyObject_C

; 3685 :         result = _PyUnicode_Copy(src);

  000a7	48 8b cb	 mov	 rcx, rbx
  000aa	e8 00 00 00 00	 call	 _PyUnicode_Copy
  000af	4c 8b c8	 mov	 r9, rax
$LN2@PyObject_C:

; 3686 : 
; 3687 :     } else {
; 3688 :         assert(0);
; 3689 :     }
; 3690 : 
; 3691 :     assert(result);
; 3692 :     assert(Px_CLONED(result));
; 3693 : 
; 3694 :     return result;

  000b2	49 8b c1	 mov	 rax, r9

; 3695 : }

  000b5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b9	5b		 pop	 rbx
  000ba	c3		 ret	 0
PyObject_Clone ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CO@NKDGGCNB@objects?5of?5type?5?$CFs?5cannot?5be?5pus@ ; `string'
EXTRN	PxList_PushObject:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$xlist_push DD imagerel $LN11
	DD	imagerel $LN11+160
	DD	imagerel $unwind$xlist_push
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$xlist_push DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0CO@NKDGGCNB@objects?5of?5type?5?$CFs?5cannot?5be?5pus@
CONST	SEGMENT
??_C@_0CO@NKDGGCNB@objects?5of?5type?5?$CFs?5cannot?5be?5pus@ DB 'objects'
	DB	' of type %s cannot be pushed to xlists', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
CONST	ENDS
;	COMDAT xlist_push
_TEXT	SEGMENT
obj$ = 64
src$ = 72
xlist_push PROC						; COMDAT

; 3699 : {

$LN11:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	4c 8b ca	 mov	 r9, rdx
  00009	48 8b d9	 mov	 rbx, rcx

; 3700 :     PyXListObject *xlist = (PyXListObject *)obj;
; 3701 :     assert(src);
; 3702 : 
; 3703 :     /*Py_INCREF(xlist);*/
; 3704 :     /*Py_INCREF(src);*/
; 3705 : 
; 3706 :     if (!Py_PXCTX)

  0000c	e8 00 00 00 00	 call	 _Py_PXCTX
  00011	85 c0		 test	 eax, eax

; 3707 :         PxList_PushObject(xlist->head, src);
; 3708 :     else {

  00013	74 30		 je	 SHORT $LN10@xlist_push

; 3709 :         PyObject *dst;
; 3710 :         _PyParallel_SetHeapOverride(xlist->heap_handle);

  00015	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00019	e8 00 00 00 00	 call	 _PyParallel_SetHeapOverride

; 3711 :         dst = PyObject_Clone(src, "objects of type %s cannot "
; 3712 :                                   "be pushed to xlists");

  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@NKDGGCNB@objects?5of?5type?5?$CFs?5cannot?5be?5pus@
  00025	49 8b c9	 mov	 rcx, r9
  00028	e8 00 00 00 00	 call	 PyObject_Clone
  0002d	4c 8b d8	 mov	 r11, rax

; 3713 :         _PyParallel_RemoveHeapOverride();

  00030	e8 00 00 00 00	 call	 _PyParallel_RemoveHeapOverride

; 3714 :         if (!dst)

  00035	4d 85 db	 test	 r11, r11
  00038	75 08		 jne	 SHORT $LN1@xlist_push

; 3715 :             return NULL;

  0003a	33 c0		 xor	 eax, eax

; 3726 : }

  0003c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00040	5b		 pop	 rbx
  00041	c3		 ret	 0
$LN1@xlist_push:

; 3716 : 
; 3717 :         PxList_PushObject(xlist->head, dst);

  00042	49 8b d3	 mov	 rdx, r11
$LN10@xlist_push:
  00045	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00049	e8 00 00 00 00	 call	 PxList_PushObject

; 3718 :     }
; 3719 : 
; 3720 :     /*
; 3721 :     if (Px_CV_WAITERS(xlist))
; 3722 :         ConditionVariableWakeOne(&(xlist->cv));
; 3723 :     */
; 3724 : 
; 3725 :     Py_RETURN_NONE;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	75 3c		 jne	 SHORT $LN7@xlist_push
  00057	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  0005e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00065	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0006c	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00072	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0007a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0007f	85 c0		 test	 eax, eax
  00081	75 09		 jne	 SHORT $LN6@xlist_push
  00083	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0008a	74 07		 je	 SHORT $LN7@xlist_push
$LN6@xlist_push:
  0008c	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN7@xlist_push:
  00093	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 3726 : }

  0009a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0009e	5b		 pop	 rbx
  0009f	c3		 ret	 0
xlist_push ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$xlist_flush DD imagerel $LN10
	DD	imagerel $LN10+100
	DD	imagerel $unwind$xlist_flush
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$xlist_flush DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT xlist_flush
_TEXT	SEGMENT
self$ = 64
arg$ = 72
xlist_flush PROC					; COMDAT

; 3730 : {

$LN10:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 3731 :     Py_RETURN_NONE;

  00006	e8 00 00 00 00	 call	 _Py_PXCTX
  0000b	85 c0		 test	 eax, eax
  0000d	75 48		 jne	 SHORT $LN7@xlist_flus
  0000f	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00024	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0002a	4c 8b cb	 mov	 r9, rbx
  0002d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00035	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003a	85 c0		 test	 eax, eax
  0003c	75 09		 jne	 SHORT $LN3@xlist_flus
  0003e	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00045	74 07		 je	 SHORT $LN9@xlist_flus
$LN3@xlist_flus:
  00047	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN9@xlist_flus:
  0004e	48 8b c3	 mov	 rax, rbx

; 3732 : }

  00051	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00055	5b		 pop	 rbx
  00056	c3		 ret	 0
$LN7@xlist_flus:

; 3731 :     Py_RETURN_NONE;

  00057	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 3732 : }

  0005e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00062	5b		 pop	 rbx
  00063	c3		 ret	 0
xlist_flush ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyXList_Length DD imagerel $LN7
	DD	imagerel $LN7+86
	DD	imagerel $unwind$PyXList_Length
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyXList_Length DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT PyXList_Length
_TEXT	SEGMENT
self$ = 64
PyXList_Length PROC					; COMDAT

; 3736 : {

$LN7:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 3737 :     PyXListObject *xlist = (PyXListObject *)self;
; 3738 :     Py_INCREF(xlist);

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN4@PyXList_Le
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN3@PyXList_Le
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN4@PyXList_Le
$LN3@PyXList_Le:
  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN4@PyXList_Le:

; 3739 :     return PxList_QueryDepth(xlist->head);

  00044	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00048	e8 00 00 00 00	 call	 PxList_QueryDepth
  0004d	0f b7 c0	 movzx	 eax, ax

; 3740 : }

  00050	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00054	5b		 pop	 rbx
  00055	c3		 ret	 0
PyXList_Length ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_async_is_parallel_thread DD imagerel $LN9
	DD	imagerel $LN9+99
	DD	imagerel $unwind$_async_is_parallel_thread
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_is_parallel_thread DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT _async_is_parallel_thread
_TEXT	SEGMENT
_async_is_parallel_thread PROC				; COMDAT

; 3859 : {

$LN9:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 3860 :     PyObject *r = (PyObject *)(_is_parallel_thread() ? Py_True : Py_False);

  00006	e8 00 00 00 00	 call	 _is_parallel_thread
  0000b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  00012	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  00019	85 c0		 test	 eax, eax
  0001b	48 0f 45 d9	 cmovne	 rbx, rcx

; 3861 :     Py_INCREF(r);

  0001f	e8 00 00 00 00	 call	 _Py_PXCTX
  00024	85 c0		 test	 eax, eax
  00026	75 32		 jne	 SHORT $LN7@async_is_p
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0003f	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	85 c0		 test	 eax, eax
  0004e	75 06		 jne	 SHORT $LN3@async_is_p
  00050	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00054	74 04		 je	 SHORT $LN7@async_is_p
$LN3@async_is_p:
  00056	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN7@async_is_p:

; 3862 :     return r;

  0005a	48 8b c3	 mov	 rax, rbx

; 3863 : }

  0005d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00061	5b		 pop	 rbx
  00062	c3		 ret	 0
_async_is_parallel_thread ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_async_is_active DD imagerel $LN9
	DD	imagerel $LN9+99
	DD	imagerel $unwind$_async_is_active
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_is_active DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT _async_is_active
_TEXT	SEGMENT
self$ = 64
args$ = 72
_async_is_active PROC					; COMDAT

; 3887 : {

$LN9:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 3888 :     PyObject *r = (PyObject *)(_is_active() ? Py_True : Py_False);

  00006	e8 00 00 00 00	 call	 _is_active
  0000b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  00012	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  00019	85 c0		 test	 eax, eax
  0001b	48 0f 45 d9	 cmovne	 rbx, rcx

; 3889 :     Py_INCREF(r);

  0001f	e8 00 00 00 00	 call	 _Py_PXCTX
  00024	85 c0		 test	 eax, eax
  00026	75 32		 jne	 SHORT $LN7@async_is_a
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0003f	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	85 c0		 test	 eax, eax
  0004e	75 06		 jne	 SHORT $LN3@async_is_a
  00050	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00054	74 04		 je	 SHORT $LN7@async_is_a
$LN3@async_is_a:
  00056	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN7@async_is_a:

; 3890 :     return r;

  0005a	48 8b c3	 mov	 rax, rbx

; 3891 : }

  0005d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00061	5b		 pop	 rbx
  00062	c3		 ret	 0
_async_is_active ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_async_is_active_ex DD imagerel $LN9
	DD	imagerel $LN9+99
	DD	imagerel $unwind$_async_is_active_ex
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_is_active_ex DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT _async_is_active_ex
_TEXT	SEGMENT
self$ = 64
args$ = 72
_async_is_active_ex PROC				; COMDAT

; 3895 : {

$LN9:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 3896 :     PyObject *r = (PyObject *)(_is_active_ex() ? Py_True : Py_False);

  00006	e8 00 00 00 00	 call	 _is_active_ex
  0000b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  00012	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  00019	85 c0		 test	 eax, eax
  0001b	48 0f 45 d9	 cmovne	 rbx, rcx

; 3897 :     Py_INCREF(r);

  0001f	e8 00 00 00 00	 call	 _Py_PXCTX
  00024	85 c0		 test	 eax, eax
  00026	75 32		 jne	 SHORT $LN7@async_is_a@2
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0003f	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	85 c0		 test	 eax, eax
  0004e	75 06		 jne	 SHORT $LN3@async_is_a@2
  00050	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00054	74 04		 je	 SHORT $LN7@async_is_a@2
$LN3@async_is_a@2:
  00056	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN7@async_is_a@2:

; 3898 :     return r;

  0005a	48 8b c3	 mov	 rax, rbx

; 3899 : }

  0005d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00061	5b		 pop	 rbx
  00062	c3		 ret	 0
_async_is_active_ex ENDP
_TEXT	ENDS
PUBLIC	incref_args
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$incref_args DD imagerel $LN39
	DD	imagerel $LN39+374
	DD	imagerel $unwind$incref_args
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$incref_args DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT incref_args
_TEXT	SEGMENT
c$ = 64
incref_args PROC					; COMDAT

; 3923 : {

$LN39:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 3924 :     Py_INCREF(c->func);

  0000a	48 8b 99 38 32
	00 00		 mov	 rbx, QWORD PTR [rcx+12856]
  00011	48 8b f9	 mov	 rdi, rcx
  00014	e8 00 00 00 00	 call	 _Py_PXCTX
  00019	85 c0		 test	 eax, eax
  0001b	75 32		 jne	 SHORT $LN16@incref_arg
  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00024	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0002b	4c 8b cb	 mov	 r9, rbx
  0002e	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00034	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0003c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00041	85 c0		 test	 eax, eax
  00043	75 06		 jne	 SHORT $LN19@incref_arg
  00045	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00049	74 04		 je	 SHORT $LN16@incref_arg
$LN19@incref_arg:
  0004b	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN16@incref_arg:

; 3925 :     Py_XINCREF(c->args);

  0004f	48 8b 9f 40 32
	00 00		 mov	 rbx, QWORD PTR [rdi+12864]
  00056	48 85 db	 test	 rbx, rbx
  00059	74 3b		 je	 SHORT $LN15@incref_arg
  0005b	e8 00 00 00 00	 call	 _Py_PXCTX
  00060	85 c0		 test	 eax, eax
  00062	75 32		 jne	 SHORT $LN15@incref_arg
  00064	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0006b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00072	4c 8b cb	 mov	 r9, rbx
  00075	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0007b	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00083	e8 00 00 00 00	 call	 _PyParallel_Guard
  00088	85 c0		 test	 eax, eax
  0008a	75 06		 jne	 SHORT $LN23@incref_arg
  0008c	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00090	74 04		 je	 SHORT $LN15@incref_arg
$LN23@incref_arg:
  00092	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN15@incref_arg:

; 3926 :     Py_XINCREF(c->kwds);

  00096	48 8b 9f 48 32
	00 00		 mov	 rbx, QWORD PTR [rdi+12872]
  0009d	48 85 db	 test	 rbx, rbx
  000a0	74 3b		 je	 SHORT $LN11@incref_arg
  000a2	e8 00 00 00 00	 call	 _Py_PXCTX
  000a7	85 c0		 test	 eax, eax
  000a9	75 32		 jne	 SHORT $LN11@incref_arg
  000ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000b9	4c 8b cb	 mov	 r9, rbx
  000bc	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000c2	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000ca	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cf	85 c0		 test	 eax, eax
  000d1	75 06		 jne	 SHORT $LN27@incref_arg
  000d3	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000d7	74 04		 je	 SHORT $LN11@incref_arg
$LN27@incref_arg:
  000d9	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN11@incref_arg:

; 3927 :     Py_XINCREF(c->callback);

  000dd	48 8b 9f 50 32
	00 00		 mov	 rbx, QWORD PTR [rdi+12880]
  000e4	48 85 db	 test	 rbx, rbx
  000e7	74 3b		 je	 SHORT $LN7@incref_arg
  000e9	e8 00 00 00 00	 call	 _Py_PXCTX
  000ee	85 c0		 test	 eax, eax
  000f0	75 32		 jne	 SHORT $LN7@incref_arg
  000f2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00100	4c 8b cb	 mov	 r9, rbx
  00103	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00109	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00111	e8 00 00 00 00	 call	 _PyParallel_Guard
  00116	85 c0		 test	 eax, eax
  00118	75 06		 jne	 SHORT $LN31@incref_arg
  0011a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0011e	74 04		 je	 SHORT $LN7@incref_arg
$LN31@incref_arg:
  00120	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN7@incref_arg:

; 3928 :     Py_XINCREF(c->errback);

  00124	48 8b 9f 58 32
	00 00		 mov	 rbx, QWORD PTR [rdi+12888]
  0012b	48 85 db	 test	 rbx, rbx
  0012e	74 3b		 je	 SHORT $LN3@incref_arg
  00130	e8 00 00 00 00	 call	 _Py_PXCTX
  00135	85 c0		 test	 eax, eax
  00137	75 32		 jne	 SHORT $LN3@incref_arg
  00139	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00140	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00147	4c 8b cb	 mov	 r9, rbx
  0014a	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00150	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00158	e8 00 00 00 00	 call	 _PyParallel_Guard
  0015d	85 c0		 test	 eax, eax
  0015f	75 06		 jne	 SHORT $LN35@incref_arg
  00161	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00165	74 04		 je	 SHORT $LN3@incref_arg
$LN35@incref_arg:
  00167	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN3@incref_arg:

; 3929 : }

  0016b	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00170	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00174	5f		 pop	 rdi
  00175	c3		 ret	 0
incref_args ENDP
_TEXT	ENDS
PUBLIC	incref_waitobj_args
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$incref_waitobj_args DD imagerel $LN11
	DD	imagerel $LN11+163
	DD	imagerel $unwind$incref_waitobj_args
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$incref_waitobj_args DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT incref_waitobj_args
_TEXT	SEGMENT
c$ = 64
incref_waitobj_args PROC				; COMDAT

; 3934 : {

$LN11:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 3935 :     Py_INCREF(c->waitobj);

  0000a	48 8b 99 28 32
	00 00		 mov	 rbx, QWORD PTR [rcx+12840]
  00011	48 8b f9	 mov	 rdi, rcx
  00014	e8 00 00 00 00	 call	 _Py_PXCTX
  00019	85 c0		 test	 eax, eax
  0001b	75 32		 jne	 SHORT $LN4@incref_wai
  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00024	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0002b	4c 8b cb	 mov	 r9, rbx
  0002e	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00034	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0003c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00041	85 c0		 test	 eax, eax
  00043	75 06		 jne	 SHORT $LN3@incref_wai
  00045	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00049	74 04		 je	 SHORT $LN4@incref_wai
$LN3@incref_wai:
  0004b	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN4@incref_wai:

; 3936 :     Py_INCREF(c->waitobj_timeout);

  0004f	48 8b 9f 30 32
	00 00		 mov	 rbx, QWORD PTR [rdi+12848]
  00056	e8 00 00 00 00	 call	 _Py_PXCTX
  0005b	85 c0		 test	 eax, eax
  0005d	75 32		 jne	 SHORT $LN8@incref_wai
  0005f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00066	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0006d	4c 8b cb	 mov	 r9, rbx
  00070	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00076	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0007e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00083	85 c0		 test	 eax, eax
  00085	75 06		 jne	 SHORT $LN7@incref_wai
  00087	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0008b	74 04		 je	 SHORT $LN8@incref_wai
$LN7@incref_wai:
  0008d	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN8@incref_wai:

; 3937 :     incref_args(c);

  00091	48 8b cf	 mov	 rcx, rdi

; 3938 : }

  00094	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00099	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0009d	5f		 pop	 rdi
  0009e	e9 00 00 00 00	 jmp	 incref_args
incref_waitobj_args ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CO@NCNAFCJK@async?5call?5from?5main?5thread?5retu@ ; `string'
PUBLIC	??_C@_0BA@MLCDIEON@_async_run_once?$AA@		; `string'
EXTRN	PyErr_WarnEx:PROC
EXTRN	PyExc_RuntimeWarning:QWORD
EXTRN	PyErr_Fetch:PROC
EXTRN	PxList_SeverFromNext:PROC
EXTRN	PxList_Transfer:PROC
EXTRN	PyExc_AsyncRunCalledWithoutEventsError:QWORD
EXTRN	__imp_SetConsoleCtrlHandler:PROC
EXTRN	PyErr_CheckSignals:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_async_run_once DD imagerel $LN89
	DD	imagerel $LN89+257
	DD	imagerel $unwind$_async_run_once
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$_async_run_once DD imagerel $LN89+257
	DD	imagerel $LN89+1454
	DD	imagerel $chain$3$_async_run_once
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$_async_run_once DD imagerel $LN89+1454
	DD	imagerel $LN89+1476
	DD	imagerel $chain$4$_async_run_once
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$_async_run_once DD 021H
	DD	imagerel $LN89
	DD	imagerel $LN89+257
	DD	imagerel $unwind$_async_run_once
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$_async_run_once DD 04d021H
	DD	0e64d0H
	DD	0143408H
	DD	imagerel $LN89
	DD	imagerel $LN89+257
	DD	imagerel $unwind$_async_run_once
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_run_once DD 09a201H
	DD	0cc4a2H
	DD	0d749dH
	DD	0f008e20cH
	DD	0d004e006H
	DD	05002H
xdata	ENDS
;	COMDAT ??_C@_0CO@NCNAFCJK@async?5call?5from?5main?5thread?5retu@
CONST	SEGMENT
??_C@_0CO@NCNAFCJK@async?5call?5from?5main?5thread?5retu@ DB 'async call '
	DB	'from main thread returned non-None', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MLCDIEON@_async_run_once?$AA@
CONST	SEGMENT
??_C@_0BA@MLCDIEON@_async_run_once?$AA@ DB '_async_run_once', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
CONST	ENDS
;	COMDAT _async_run_once
_TEXT	SEGMENT
exc_type$128906 = 48
exc_value$128907 = 56
exc_tb$128908 = 64
tstate$1$ = 72
$T136865 = 80
old_frame$1$ = 88
self$ = 160
args$ = 168
processed_incoming$1$ = 176
processed_finished$1$ = 184
_async_run_once PROC					; COMDAT

; 4110 : {

$LN89:
  00000	40 55		 push	 rbp
  00002	41 55		 push	 r13
  00004	41 56		 push	 r14
  00006	41 57		 push	 r15
  00008	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 4111 :     int err = 0;
; 4112 :     int wait = -1;
; 4113 :     int purged = 0;
; 4114 :     unsigned short depth_hint = 0;
; 4115 :     unsigned int waited = 0;
; 4116 :     unsigned int depth = 0;
; 4117 :     unsigned int events = 0;
; 4118 :     unsigned int errors = 0;
; 4119 :     unsigned int processed_errors = 0;
; 4120 :     unsigned int processed_finished = 0;

  0000c	33 ed		 xor	 ebp, ebp

; 4121 :     unsigned int processed_incoming = 0;

  0000e	45 33 ed	 xor	 r13d, r13d

; 4122 :     unsigned int processed_errbacks = 0;

  00011	45 33 f6	 xor	 r14d, r14d
  00014	89 ac 24 b8 00
	00 00		 mov	 DWORD PTR processed_finished$1$[rsp], ebp
  0001b	44 89 ac 24 b0
	00 00 00	 mov	 DWORD PTR processed_incoming$1$[rsp], r13d

; 4123 :     unsigned int processed_callbacks = 0;

  00023	45 33 ff	 xor	 r15d, r15d

; 4124 :     PyObject *result = NULL;
; 4125 :     Context *c;
; 4126 :     PxState *px;
; 4127 :     PxListItem *item = NULL;
; 4128 :     PyThreadState *tstate;
; 4129 :     PyFrameObject *old_frame;
; 4130 :     Py_GUARD

  00026	e8 00 00 00 00	 call	 _Py_PXCTX
  0002b	85 c0		 test	 eax, eax
  0002d	74 1c		 je	 SHORT $LN49@async_run_
  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@MLCDIEON@_async_run_once?$AA@
  0003d	45 33 c9	 xor	 r9d, r9d
  00040	41 b8 22 10 00
	00		 mov	 r8d, 4130		; 00001022H
  00046	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN49@async_run_:

; 4131 : 
; 4132 :     if (PyErr_CheckSignals() || _Py_CheckCtrlC())

  0004b	e8 00 00 00 00	 call	 PyErr_CheckSignals
  00050	85 c0		 test	 eax, eax
  00052	75 2c		 jne	 SHORT $LN47@async_run_
  00054	e8 00 00 00 00	 call	 _Py_CheckCtrlC
  00059	85 c0		 test	 eax, eax
  0005b	75 23		 jne	 SHORT $LN47@async_run_

; 4133 :         return NULL;
; 4134 : 
; 4135 :     if (!_Py_InstalledCtrlCHandler) {

  0005d	39 2d 00 00 00
	00		 cmp	 DWORD PTR _Py_InstalledCtrlCHandler, ebp
  00063	75 33		 jne	 SHORT $LN46@async_run_

; 4136 :         if (!SetConsoleCtrlHandler(_Py_CtrlCHandlerRoutine, TRUE)) {

  00065	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _Py_CtrlCHandlerRoutine
  0006c	8d 50 01	 lea	 edx, QWORD PTR [rax+1]
  0006f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetConsoleCtrlHandler
  00075	85 c0		 test	 eax, eax
  00077	75 15		 jne	 SHORT $LN45@async_run_

; 4137 :             PyErr_SetFromWindowsErr(0);

  00079	33 c9		 xor	 ecx, ecx
  0007b	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
$LN47@async_run_:

; 4138 :             return NULL;

  00080	33 c0		 xor	 eax, eax

; 4355 : }

  00082	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00086	41 5f		 pop	 r15
  00088	41 5e		 pop	 r14
  0008a	41 5d		 pop	 r13
  0008c	5d		 pop	 rbp
  0008d	c3		 ret	 0
$LN45@async_run_:

; 4139 :         }
; 4140 :         _Py_InstalledCtrlCHandler = 1;

  0008e	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Py_InstalledCtrlCHandler, 1
$LN46@async_run_:
  00098	48 89 7c 24 68	 mov	 QWORD PTR [rsp+104], rdi
  0009d	4c 89 64 24 60	 mov	 QWORD PTR [rsp+96], r12

; 4141 :     }
; 4142 : 
; 4143 :     tstate = get_main_thread_state();

  000a2	e8 00 00 00 00	 call	 get_main_thread_state

; 4144 : 
; 4145 :     px = (PxState *)tstate->px;

  000a7	48 8b b8 a0 00
	00 00		 mov	 rdi, QWORD PTR [rax+160]
  000ae	4c 8b e0	 mov	 r12, rax
  000b1	48 89 44 24 48	 mov	 QWORD PTR tstate$1$[rsp], rax

; 4146 : 
; 4147 :     if (px->submitted == 0 &&
; 4148 :         px->waits_submitted == 0 &&
; 4149 :         px->persistent == 0 &&
; 4150 :         px->contexts_persisted == 0 &&
; 4151 :         px->contexts_active == 0)

  000b6	48 8b 8f 08 01
	00 00		 mov	 rcx, QWORD PTR [rdi+264]
  000bd	48 85 c9	 test	 rcx, rcx
  000c0	75 39		 jne	 SHORT $LN44@async_run_
  000c2	48 8b 8f 20 01
	00 00		 mov	 rcx, QWORD PTR [rdi+288]
  000c9	48 85 c9	 test	 rcx, rcx
  000cc	75 2d		 jne	 SHORT $LN44@async_run_
  000ce	8b 8f fc 00 00
	00		 mov	 ecx, DWORD PTR [rdi+252]
  000d4	85 c9		 test	 ecx, ecx
  000d6	75 23		 jne	 SHORT $LN44@async_run_
  000d8	39 af ec 00 00
	00		 cmp	 DWORD PTR [rdi+236], ebp
  000de	75 1b		 jne	 SHORT $LN44@async_run_
  000e0	39 af e8 00 00
	00		 cmp	 DWORD PTR [rdi+232], ebp
  000e6	75 13		 jne	 SHORT $LN44@async_run_

; 4152 :     {
; 4153 :         PyErr_SetNone(PyExc_AsyncRunCalledWithoutEventsError);

  000e8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AsyncRunCalledWithoutEventsError
  000ef	e8 00 00 00 00	 call	 PyErr_SetNone

; 4154 :         return NULL;

  000f4	33 c0		 xor	 eax, eax
  000f6	e9 b3 04 00 00	 jmp	 $LN85@async_run_
$LN44@async_run_:

; 4155 :     }
; 4156 : 
; 4157 :     if (px->incoming_pynone_decrefs) {

  000fb	8b 87 00 01 00
	00		 mov	 eax, DWORD PTR [rdi+256]
  00101	48 89 9c 24 a0
	00 00 00	 mov	 QWORD PTR [rsp+160], rbx
  00109	85 c0		 test	 eax, eax
  0010b	74 15		 je	 SHORT $LN42@async_run_

; 4158 :         long r = InterlockedExchange(&(px->incoming_pynone_decrefs), 0);

  0010d	33 c0		 xor	 eax, eax
  0010f	87 87 00 01 00
	00		 xchg	 DWORD PTR [rdi+256], eax

; 4159 :         assert(r >= 0);
; 4160 :         if (r > 0) {

  00115	85 c0		 test	 eax, eax
  00117	7e 09		 jle	 SHORT $LN42@async_run_

; 4161 :             PyObject *o = Py_None;
; 4162 :             assert((Py_REFCNT(o) - r) > 0);
; 4163 :             o->ob_refcnt -= r;

  00119	48 98		 cdqe
  0011b	48 29 05 50 00
	00 00		 sub	 QWORD PTR _Py_NoneStruct+80, rax
$LN42@async_run_:

; 4164 :         }
; 4165 :     }
; 4166 : 
; 4167 :     px->last_done_count = px->done;

  00122	48 8b 87 18 01
	00 00		 mov	 rax, QWORD PTR [rdi+280]

; 4168 :     px->last_submitted_count = px->submitted;
; 4169 : 
; 4170 :     px->last_sync_wait_done_count = px->sync_wait_done;;
; 4171 :     px->last_sync_wait_submitted_count = px->sync_wait_submitted;
; 4172 : 
; 4173 :     px->last_sync_nowait_done_count = px->sync_nowait_done;;
; 4174 :     px->last_sync_nowait_submitted_count = px->sync_nowait_submitted;
; 4175 : 
; 4176 :     purged = _PxState_PurgeContexts(px);

  00129	48 8b cf	 mov	 rcx, rdi
  0012c	48 89 87 a8 01
	00 00		 mov	 QWORD PTR [rdi+424], rax
  00133	48 8b 87 08 01
	00 00		 mov	 rax, QWORD PTR [rdi+264]
  0013a	48 89 87 b0 01
	00 00		 mov	 QWORD PTR [rdi+432], rax
  00141	48 8b 87 88 01
	00 00		 mov	 rax, QWORD PTR [rdi+392]
  00148	48 89 87 b8 01
	00 00		 mov	 QWORD PTR [rdi+440], rax
  0014f	48 8b 87 78 01
	00 00		 mov	 rax, QWORD PTR [rdi+376]
  00156	48 89 87 c0 01
	00 00		 mov	 QWORD PTR [rdi+448], rax
  0015d	48 8b 87 a0 01
	00 00		 mov	 rax, QWORD PTR [rdi+416]
  00164	48 89 87 c8 01
	00 00		 mov	 QWORD PTR [rdi+456], rax
  0016b	48 8b 87 90 01
	00 00		 mov	 rax, QWORD PTR [rdi+400]
  00172	48 89 87 d0 01
	00 00		 mov	 QWORD PTR [rdi+464], rax
  00179	e8 00 00 00 00	 call	 _PxState_PurgeContexts

; 4177 : 
; 4178 :     item = PxList_Flush(px->finished);

  0017e	48 8b 4f 28	 mov	 rcx, QWORD PTR [rdi+40]
  00182	48 63 d8	 movsxd	 rbx, eax
  00185	e8 00 00 00 00	 call	 PxList_Flush
  0018a	4c 8b d8	 mov	 r11, rax

; 4179 :     while (item) {

  0018d	48 85 c0	 test	 rax, rax
  00190	74 3a		 je	 SHORT $LN71@async_run_
$LL41@async_run_:

; 4180 :         ++processed_finished;
; 4181 :         c = (Context *)item->from;

  00192	49 8b 4b 18	 mov	 rcx, QWORD PTR [r11+24]
  00196	ff c5		 inc	 ebp

; 4182 :         c->times_finished++;

  00198	ff 81 08 38 00
	00		 inc	 DWORD PTR [rcx+14344]

; 4183 : 
; 4184 :         assert(!c->io_obj);
; 4185 : 
; 4186 :         item = (Px_DECCTX(c) ?
; 4187 :             PxList_Transfer(px->finished, item) :
; 4188 :             PxList_SeverFromNext(item)
; 4189 :         );

  0019e	e8 00 00 00 00	 call	 Px_DECCTX
  001a3	85 c0		 test	 eax, eax
  001a5	74 0e		 je	 SHORT $LN52@async_run_
  001a7	48 8b 4f 28	 mov	 rcx, QWORD PTR [rdi+40]
  001ab	49 8b d3	 mov	 rdx, r11
  001ae	e8 00 00 00 00	 call	 PxList_Transfer
  001b3	eb 08		 jmp	 SHORT $LN88@async_run_
$LN52@async_run_:
  001b5	49 8b cb	 mov	 rcx, r11
  001b8	e8 00 00 00 00	 call	 PxList_SeverFromNext
$LN88@async_run_:
  001bd	4c 8b d8	 mov	 r11, rax
  001c0	48 85 c0	 test	 rax, rax
  001c3	75 cd		 jne	 SHORT $LL41@async_run_
  001c5	89 ac 24 b8 00
	00 00		 mov	 DWORD PTR processed_finished$1$[rsp], ebp
$LN71@async_run_:
  001cc	48 89 74 24 70	 mov	 QWORD PTR [rsp+112], rsi

; 4327 :     }
; 4328 : 
; 4329 :     if (px->contexts_active == 0 || purged)

  001d1	48 89 5c 24 50	 mov	 QWORD PTR $T136865[rsp], rbx
  001d6	e8 00 00 00 00	 call	 PyErr_CheckSignals
  001db	85 c0		 test	 eax, eax
  001dd	0f 85 bc 03 00
	00		 jne	 $LN5@async_run_
$start$128871:

; 4194 :         return NULL;
; 4195 :     /* First error wins. */
; 4196 :     item = PxList_Pop(px->errors);

  001e3	48 8b 4f 08	 mov	 rcx, QWORD PTR [rdi+8]
  001e7	e8 00 00 00 00	 call	 PxList_Pop
  001ec	48 8b f0	 mov	 rsi, rax

; 4197 :     if (item) {

  001ef	48 85 c0	 test	 rax, rax
  001f2	0f 85 74 03 00
	00		 jne	 $LN77@async_run_

; 4209 :         }
; 4210 :         return NULL;
; 4211 :     }
; 4212 : 
; 4213 :     assert(px->processing_callback == 0);
; 4214 :     /* Process incoming work items. */
; 4215 :     old_frame = ((PyFrameObject *)(tstate->frame));

  001f8	49 8b 44 24 10	 mov	 rax, QWORD PTR [r12+16]

; 4216 :     ((PyFrameObject *)(tstate->frame)) = NULL;

  001fd	49 89 74 24 10	 mov	 QWORD PTR [r12+16], rsi

; 4217 :     while (item = PxList_Pop(px->incoming)) {

  00202	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00206	48 89 44 24 58	 mov	 QWORD PTR old_frame$1$[rsp], rax
  0020b	e8 00 00 00 00	 call	 PxList_Pop
  00210	48 8b f0	 mov	 rsi, rax
  00213	48 85 c0	 test	 rax, rax
  00216	0f 84 e2 01 00
	00		 je	 $LN35@async_run_
  0021c	0f 1f 40 00	 npad	 4
$LL36@async_run_:

; 4218 :         HANDLE wait;
; 4219 :         PyObject *func, *args, *kwds, *result;
; 4220 : 
; 4221 :         px->processing_callback = 1;

  00220	c7 87 d0 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rdi+208], 1

; 4222 : 
; 4223 :         func = (PyObject *)item->p1;
; 4224 :         args = (PyObject *)item->p2;
; 4225 :         kwds = (PyObject *)item->p3;
; 4226 :         wait = (HANDLE)item->p4;

  0022a	4c 8b 6e 38	 mov	 r13, QWORD PTR [rsi+56]
  0022e	48 8b 4e 20	 mov	 rcx, QWORD PTR [rsi+32]
  00232	48 8b 56 28	 mov	 rdx, QWORD PTR [rsi+40]
  00236	4c 8b 46 30	 mov	 r8, QWORD PTR [rsi+48]

; 4227 :         c = (Context *)item->from;

  0023a	4c 8b 66 18	 mov	 r12, QWORD PTR [rsi+24]

; 4228 : 
; 4229 :         if (wait) {

  0023e	4d 85 ed	 test	 r13, r13
  00241	74 10		 je	 SHORT $LN34@async_run_

; 4230 :             InterlockedDecrement(&(px->sync_wait_pending));

  00243	f0 ff 8f 80 01
	00 00		 lock dec DWORD PTR [rdi+384]

; 4231 :             InterlockedIncrement(&(px->sync_wait_inflight));

  0024a	f0 ff 87 84 01
	00 00		 lock inc DWORD PTR [rdi+388]

; 4232 :         } else {

  00251	eb 0e		 jmp	 SHORT $LN33@async_run_
$LN34@async_run_:

; 4233 :             InterlockedDecrement(&(px->sync_nowait_pending));

  00253	f0 ff 8f 98 01
	00 00		 lock dec DWORD PTR [rdi+408]

; 4234 :             InterlockedIncrement(&(px->sync_nowait_inflight));

  0025a	f0 ff 87 9c 01
	00 00		 lock inc DWORD PTR [rdi+412]
$LN33@async_run_:

; 4235 :         }
; 4236 : 
; 4237 :         if (kwds)
; 4238 :             assert(PyDict_CheckExact(kwds));
; 4239 : 
; 4240 :         result = PyObject_Call(func, args, kwds);

  00261	e8 00 00 00 00	 call	 PyObject_Call

; 4241 : 
; 4242 :         ++processed_incoming;

  00266	ff 84 24 b0 00
	00 00		 inc	 DWORD PTR processed_incoming$1$[rsp]
  0026d	48 8b d8	 mov	 rbx, rax

; 4243 : 
; 4244 :         if (wait) {

  00270	4d 85 ed	 test	 r13, r13
  00273	0f 84 8b 00 00
	00		 je	 $LN31@async_run_

; 4245 :             PxListItem *d;
; 4246 :             d = c->decref;

  00279	49 8b ac 24 50
	33 00 00	 mov	 rbp, QWORD PTR [r12+13136]

; 4247 :             assert(
; 4248 :                 d &&
; 4249 :                 d->p1 == NULL &&
; 4250 :                 d->p2 == NULL &&
; 4251 :                 d->p3 == NULL &&
; 4252 :                 d->p4 == NULL
; 4253 :             );
; 4254 : 
; 4255 :             if (!result) {

  00281	48 85 c0	 test	 rax, rax
  00284	75 42		 jne	 SHORT $LN30@async_run_

; 4256 :                 PyObject *exc_type, *exc_value, *exc_tb;
; 4257 : 
; 4258 :                 assert(tstate->curexc_type);
; 4259 : 
; 4260 :                 PyErr_Fetch(&exc_type, &exc_value, &exc_tb);

  00286	4c 8d 44 24 40	 lea	 r8, QWORD PTR exc_tb$128908[rsp]
  0028b	48 8d 54 24 38	 lea	 rdx, QWORD PTR exc_value$128907[rsp]
  00290	48 8d 4c 24 30	 lea	 rcx, QWORD PTR exc_type$128906[rsp]
  00295	e8 00 00 00 00	 call	 PyErr_Fetch

; 4261 : 
; 4262 :                 assert(exc_type);
; 4263 :                 assert(exc_value);
; 4264 :                 assert(exc_tb);
; 4265 : 
; 4266 :                 item->p1 = d->p1 = exc_type;
; 4267 :                 item->p2 = d->p2 = exc_value;

  0029a	48 8b 44 24 38	 mov	 rax, QWORD PTR exc_value$128907[rsp]
  0029f	4c 8b 5c 24 30	 mov	 r11, QWORD PTR exc_type$128906[rsp]
  002a4	4c 89 5d 20	 mov	 QWORD PTR [rbp+32], r11
  002a8	4c 89 5e 20	 mov	 QWORD PTR [rsi+32], r11
  002ac	48 89 45 28	 mov	 QWORD PTR [rbp+40], rax
  002b0	48 89 46 28	 mov	 QWORD PTR [rsi+40], rax

; 4268 :                 item->p3 = d->p3 = exc_tb;

  002b4	48 8b 44 24 40	 mov	 rax, QWORD PTR exc_tb$128908[rsp]
  002b9	48 89 45 30	 mov	 QWORD PTR [rbp+48], rax
  002bd	48 89 46 30	 mov	 QWORD PTR [rsi+48], rax

; 4269 : 
; 4270 :                 PyErr_Clear();

  002c1	e8 00 00 00 00	 call	 PyErr_Clear

; 4271 : 
; 4272 :             } else {

  002c6	eb 12		 jmp	 SHORT $LN29@async_run_
$LN30@async_run_:

; 4273 :                 item->p1 = NULL;

  002c8	33 c0		 xor	 eax, eax
  002ca	48 89 46 20	 mov	 QWORD PTR [rsi+32], rax

; 4274 :                 item->p2 = d->p1 = result;

  002ce	48 89 5d 20	 mov	 QWORD PTR [rbp+32], rbx
  002d2	48 89 5e 28	 mov	 QWORD PTR [rsi+40], rbx

; 4275 :                 item->p3 = NULL;

  002d6	48 89 46 30	 mov	 QWORD PTR [rsi+48], rax
$LN29@async_run_:

; 4276 :             }
; 4277 :             PxList_Push(c->decrefs, d);

  002da	49 8b 8c 24 48
	33 00 00	 mov	 rcx, QWORD PTR [r12+13128]
  002e2	48 8b d5	 mov	 rdx, rbp
  002e5	e8 00 00 00 00	 call	 PxList_Push

; 4278 :             c->decref = NULL;
; 4279 :             SetEvent(wait);

  002ea	49 8b cd	 mov	 rcx, r13
  002ed	49 c7 84 24 50
	33 00 00 00 00
	00 00		 mov	 QWORD PTR [r12+13136], 0
  002f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetEvent

; 4280 :         } else {

  002ff	e9 cc 00 00 00	 jmp	 $LN19@async_run_
$LN31@async_run_:

; 4281 :             InterlockedDecrement(&(px->sync_nowait_inflight));

  00304	f0 ff 8f 9c 01
	00 00		 lock dec DWORD PTR [rdi+412]

; 4282 :             InterlockedIncrement64(&(px->sync_nowait_done));

  0030b	f0 48 ff 87 a0
	01 00 00	 lock inc QWORD PTR [rdi+416]

; 4283 : 
; 4284 :             if (!result) {

  00313	48 85 c0	 test	 rax, rax
  00316	0f 84 8a 00 00
	00		 je	 $LN23@async_run_

; 4285 :                 assert(tstate->curexc_type != NULL);
; 4286 :             } else if (result != Py_None) {

  0031c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00323	48 3b d8	 cmp	 rbx, rax
  00326	74 19		 je	 SHORT $LN24@async_run_

; 4287 :                 char *msg = "async call from main thread returned non-None";
; 4288 :                 PyErr_WarnEx(PyExc_RuntimeWarning, msg, 1);

  00328	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeWarning
  0032f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@NCNAFCJK@async?5call?5from?5main?5thread?5retu@
  00336	41 b8 01 00 00
	00		 mov	 r8d, 1
  0033c	e8 00 00 00 00	 call	 PyErr_WarnEx
$LN24@async_run_:

; 4289 :             }
; 4290 :             Py_XDECREF(result);

  00341	e8 00 00 00 00	 call	 _Py_PXCTX
  00346	85 c0		 test	 eax, eax
  00348	75 5c		 jne	 SHORT $LN23@async_run_
  0034a	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0034e	a8 20		 test	 al, 32			; 00000020H
  00350	75 4c		 jne	 SHORT $LN58@async_run_
  00352	84 c0		 test	 al, al
  00354	78 48		 js	 SHORT $LN58@async_run_
  00356	a8 02		 test	 al, 2
  00358	75 4c		 jne	 SHORT $LN23@async_run_
  0035a	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0035e	75 46		 jne	 SHORT $LN23@async_run_
  00360	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00367	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0036e	4c 8b cb	 mov	 r9, rbx
  00371	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00377	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0037f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00384	48 8b cb	 mov	 rcx, rbx
  00387	85 c0		 test	 eax, eax
  00389	74 07		 je	 SHORT $LN63@async_run_
  0038b	e8 00 00 00 00	 call	 _Px_Dealloc
  00390	eb 14		 jmp	 SHORT $LN23@async_run_
$LN63@async_run_:
  00392	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00396	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0039c	eb 08		 jmp	 SHORT $LN23@async_run_
$LN58@async_run_:
  0039e	48 8b cb	 mov	 rcx, rbx
  003a1	e8 00 00 00 00	 call	 Px_DecRef
$LN23@async_run_:

; 4291 : 
; 4292 :             c = (Context *)item->from;

  003a6	4c 8b 4e 18	 mov	 r9, QWORD PTR [rsi+24]

; 4293 :             /* More hacks to persist socket/IO objects. */
; 4294 :             if (c->io_obj)

  003aa	49 83 b9 a8 32
	00 00 00	 cmp	 QWORD PTR [r9+12968], 0
  003b2	75 1c		 jne	 SHORT $LN19@async_run_

; 4295 :                 continue;
; 4296 : 
; 4297 :             Px_DECCTX(c);

  003b4	49 8b c9	 mov	 rcx, r9
  003b7	e8 00 00 00 00	 call	 Px_DECCTX

; 4298 :             _PyHeap_Free(c, item);

  003bc	48 8b d6	 mov	 rdx, rsi
  003bf	49 8b c9	 mov	 rcx, r9
  003c2	e8 00 00 00 00	 call	 _PyHeap_Free

; 4299 : 
; 4300 :             if (!result) {

  003c7	48 85 db	 test	 rbx, rbx
  003ca	0f 84 f2 00 00
	00		 je	 $LN75@async_run_
$LN19@async_run_:

; 4217 :     while (item = PxList_Pop(px->incoming)) {

  003d0	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  003d4	e8 00 00 00 00	 call	 PxList_Pop
  003d9	48 8b f0	 mov	 rsi, rax
  003dc	48 85 c0	 test	 rax, rax
  003df	0f 85 3b fe ff
	ff		 jne	 $LL36@async_run_
  003e5	8b ac 24 b8 00
	00 00		 mov	 ebp, DWORD PTR processed_finished$1$[rsp]
  003ec	4c 8b 64 24 48	 mov	 r12, QWORD PTR tstate$1$[rsp]
  003f1	44 8b ac 24 b0
	00 00 00	 mov	 r13d, DWORD PTR processed_incoming$1$[rsp]
  003f9	48 8b 5c 24 50	 mov	 rbx, QWORD PTR $T136865[rsp]
$LN35@async_run_:

; 4303 :             }
; 4304 :         }
; 4305 :     }
; 4306 :     px->processing_callback = 0;
; 4307 :     ((PyFrameObject *)(tstate->frame)) = old_frame;

  003fe	48 8b 44 24 58	 mov	 rax, QWORD PTR old_frame$1$[rsp]
  00403	c7 87 d0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rdi+208], 0
  0040d	49 89 44 24 10	 mov	 QWORD PTR [r12+16], rax

; 4308 : 
; 4309 : 
; 4310 :     /* Process completed items. */
; 4311 :     item = PxList_Flush(px->completed_callbacks);

  00412	48 8b 4f 10	 mov	 rcx, QWORD PTR [rdi+16]
  00416	e8 00 00 00 00	 call	 PxList_Flush

; 4312 :     if (item) {

  0041b	48 85 c0	 test	 rax, rax
  0041e	74 14		 je	 SHORT $LN15@async_run_
$LL17@async_run_:

; 4313 :         do {
; 4314 :             /* XXX TODO: update stats. */
; 4315 :             ++processed_callbacks;
; 4316 :             item = PxList_Transfer(px->finished, item);

  00420	48 8b 4f 28	 mov	 rcx, QWORD PTR [rdi+40]
  00424	48 8b d0	 mov	 rdx, rax
  00427	41 ff c7	 inc	 r15d
  0042a	e8 00 00 00 00	 call	 PxList_Transfer

; 4317 :         } while (item);

  0042f	48 85 c0	 test	 rax, rax
  00432	75 ec		 jne	 SHORT $LL17@async_run_
$LN15@async_run_:

; 4318 :     }
; 4319 : 
; 4320 :     item = PxList_Flush(px->completed_errbacks);

  00434	48 8b 4f 18	 mov	 rcx, QWORD PTR [rdi+24]
  00438	e8 00 00 00 00	 call	 PxList_Flush

; 4321 :     if (item) {

  0043d	48 85 c0	 test	 rax, rax
  00440	74 22		 je	 SHORT $LN11@async_run_
  00442	66 66 66 66 66
	66 0f 1f 84 00
	00 00 00 00	 npad	 14
$LL13@async_run_:

; 4322 :         do {
; 4323 :             /* XXX TODO: update stats. */
; 4324 :             ++processed_errbacks;
; 4325 :             item = PxList_Transfer(px->finished, item);

  00450	48 8b 4f 28	 mov	 rcx, QWORD PTR [rdi+40]
  00454	48 8b d0	 mov	 rdx, rax
  00457	41 ff c6	 inc	 r14d
  0045a	e8 00 00 00 00	 call	 PxList_Transfer

; 4326 :         } while (item);

  0045f	48 85 c0	 test	 rax, rax
  00462	75 ec		 jne	 SHORT $LL13@async_run_
$LN11@async_run_:

; 4327 :     }
; 4328 : 
; 4329 :     if (px->contexts_active == 0 || purged)

  00464	83 bf e8 00 00
	00 00		 cmp	 DWORD PTR [rdi+232], 0
  0046b	74 76		 je	 SHORT $LN9@async_run_
  0046d	48 85 db	 test	 rbx, rbx
  00470	75 71		 jne	 SHORT $LN9@async_run_

; 4330 :         Py_RETURN_NONE;
; 4331 : 
; 4332 :     /* Return if we've done something useful... */
; 4333 :     if (processed_errors    ||
; 4334 :         processed_finished  ||
; 4335 :         processed_incoming  ||
; 4336 :         processed_errbacks  ||
; 4337 :         processed_callbacks)

  00472	85 ed		 test	 ebp, ebp
  00474	0f 85 a4 00 00
	00		 jne	 $LN7@async_run_
  0047a	45 85 ed	 test	 r13d, r13d
  0047d	0f 85 9b 00 00
	00		 jne	 $LN7@async_run_
  00483	45 85 f6	 test	 r14d, r14d
  00486	0f 85 92 00 00
	00		 jne	 $LN7@async_run_
  0048c	45 85 ff	 test	 r15d, r15d
  0048f	0f 85 89 00 00
	00		 jne	 $LN7@async_run_

; 4339 : 
; 4340 :     /* ...and wait for a second if we haven't. */
; 4341 :     err = WaitForSingleObject(px->wakeup, 1000);

  00495	48 8b 8f a0 00
	00 00		 mov	 rcx, QWORD PTR [rdi+160]
  0049c	ba e8 03 00 00	 mov	 edx, 1000		; 000003e8H
  004a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WaitForSingleObject

; 4342 :     switch (err) {

  004a7	83 f8 ff	 cmp	 eax, -1
  004aa	74 66		 je	 SHORT $LN1@async_run_
  004ac	85 c0		 test	 eax, eax
  004ae	75 21		 jne	 SHORT $LN80@async_run_

; 4190 :     }
; 4191 : 
; 4192 : start:
; 4193 :     if (PyErr_CheckSignals())

  004b0	e8 00 00 00 00	 call	 PyErr_CheckSignals
  004b5	85 c0		 test	 eax, eax
  004b7	0f 84 26 fd ff
	ff		 je	 $start$128871
  004bd	e9 dd 00 00 00	 jmp	 $LN5@async_run_
$LN75@async_run_:

; 4301 :                 px->processing_callback = 0;

  004c2	c7 87 d0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rdi+208], 0

; 4302 :                 return NULL;

  004cc	e9 ce 00 00 00	 jmp	 $LN5@async_run_
$LN80@async_run_:

; 4342 :     switch (err) {

  004d1	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  004d6	74 22		 je	 SHORT $LN2@async_run_
  004d8	3d 02 01 00 00	 cmp	 eax, 258		; 00000102H
  004dd	0f 85 bc 00 00
	00		 jne	 $LN5@async_run_
$LN9@async_run_:

; 4343 :         case WAIT_OBJECT_0:
; 4344 :             goto start;
; 4345 :         case WAIT_TIMEOUT:
; 4346 :             Py_RETURN_NONE;

  004e3	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  004ea	48 8b cb	 mov	 rcx, rbx
  004ed	e8 00 00 00 00	 call	 _Py_IncRef
  004f2	48 8b c3	 mov	 rax, rbx
  004f5	e9 a7 00 00 00	 jmp	 $LN87@async_run_
$LN2@async_run_:

; 4347 :         case WAIT_ABANDONED:
; 4348 :             PyErr_SetString(PyExc_SystemError, "wait abandoned");

  004fa	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00501	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@BLBOHJGC@wait?5abandoned?$AA@
  00508	e8 00 00 00 00	 call	 PyErr_SetString

; 4349 :             break;

  0050d	e9 8d 00 00 00	 jmp	 $LN5@async_run_
$LN1@async_run_:

; 4350 :         case WAIT_FAILED:
; 4351 :             PyErr_SetFromWindowsErr(0);

  00512	33 c9		 xor	 ecx, ecx
  00514	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 4352 :             break;
; 4353 :     }
; 4354 :     return NULL;

  00519	e9 81 00 00 00	 jmp	 $LN5@async_run_
$LN7@async_run_:

; 4338 :             Py_RETURN_NONE;

  0051e	e8 00 00 00 00	 call	 _Py_PXCTX
  00523	85 c0		 test	 eax, eax
  00525	75 3c		 jne	 SHORT $LN66@async_run_
  00527	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  0052e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00535	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0053c	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00542	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0054a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0054f	85 c0		 test	 eax, eax
  00551	75 09		 jne	 SHORT $LN65@async_run_
  00553	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0055a	74 07		 je	 SHORT $LN66@async_run_
$LN65@async_run_:
  0055c	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN66@async_run_:
  00563	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0056a	eb 35		 jmp	 SHORT $LN87@async_run_
$LN77@async_run_:

; 4198 :         c = item->from;
; 4199 :         assert(PyExceptionClass_Check((PyObject *)item->p1));
; 4200 :         PyErr_Restore((PyObject *)item->p1,
; 4201 :                       (PyObject *)item->p2,
; 4202 :                       (PyObject *)item->p3);

  0056c	4c 8b 40 30	 mov	 r8, QWORD PTR [rax+48]
  00570	48 8b 50 28	 mov	 rdx, QWORD PTR [rax+40]
  00574	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00578	48 8b 58 18	 mov	 rbx, QWORD PTR [rax+24]
  0057c	e8 00 00 00 00	 call	 PyErr_Restore

; 4203 : 
; 4204 :         /* Ugh, so hacky.  If our originating context is an I/O object, don't
; 4205 :          * treat the context as 'finished'. */
; 4206 :         if (!c->io_obj) {

  00581	48 83 bb a8 32
	00 00 00	 cmp	 QWORD PTR [rbx+12968], 0
  00589	75 14		 jne	 SHORT $LN5@async_run_

; 4207 :             PxList_Transfer(px->finished, item);

  0058b	48 8b 4f 28	 mov	 rcx, QWORD PTR [rdi+40]
  0058f	48 8b d6	 mov	 rdx, rsi
  00592	e8 00 00 00 00	 call	 PxList_Transfer

; 4208 :             InterlockedIncrement64(&(px->done));

  00597	f0 48 ff 87 18
	01 00 00	 lock inc QWORD PTR [rdi+280]
$LN5@async_run_:

; 4352 :             break;
; 4353 :     }
; 4354 :     return NULL;

  0059f	33 c0		 xor	 eax, eax
$LN87@async_run_:
  005a1	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
  005a6	48 8b 9c 24 a0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+160]
$LN85@async_run_:
  005ae	48 8b 7c 24 68	 mov	 rdi, QWORD PTR [rsp+104]
  005b3	4c 8b 64 24 60	 mov	 r12, QWORD PTR [rsp+96]

; 4355 : }

  005b8	48 83 c4 78	 add	 rsp, 120		; 00000078H
  005bc	41 5f		 pop	 r15
  005be	41 5e		 pop	 r14
  005c0	41 5d		 pop	 r13
  005c2	5d		 pop	 rbp
  005c3	c3		 ret	 0
_async_run_once ENDP
_TEXT	ENDS
PUBLIC	??_C@_02HCKGKOFO@?$CI?$CJ?$AA@			; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	extract_args
;	COMDAT pdata
pdata	SEGMENT
$pdata$extract_args DD imagerel $LN9
	DD	imagerel $LN9+108
	DD	imagerel $unwind$extract_args
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$extract_args DD imagerel $LN9+108
	DD	imagerel $LN9+199
	DD	imagerel $chain$0$extract_args
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$extract_args DD imagerel $LN9+199
	DD	imagerel $LN9+288
	DD	imagerel $chain$1$extract_args
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$extract_args DD 021H
	DD	imagerel $LN9
	DD	imagerel $LN9+108
	DD	imagerel $unwind$extract_args
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$extract_args DD 020521H
	DD	0cc405H
	DD	imagerel $LN9
	DD	imagerel $LN9+108
	DD	imagerel $unwind$extract_args
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$extract_args DD 081401H
	DD	0f6414H
	DD	0e5414H
	DD	0d3414H
	DD	070109214H
xdata	ENDS
;	COMDAT ??_C@_02HCKGKOFO@?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_02HCKGKOFO@?$CI?$CJ?$AA@ DB '()', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT extract_args
_TEXT	SEGMENT
args$ = 96
c$ = 104
extract_args PROC					; COMDAT

; 4367 : {

$LN9:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	49 89 5b 10	 mov	 QWORD PTR [r11+16], rbx
  00007	49 89 6b 18	 mov	 QWORD PTR [r11+24], rbp
  0000b	49 89 73 20	 mov	 QWORD PTR [r11+32], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 4368 :     if (!PyArg_UnpackTuple(
; 4369 :             args, "", 1, 5,
; 4370 :             &(c->func), &(c->args), &(c->kwds),
; 4371 :             &(c->callback), &(c->errback)))

  00014	48 8d b2 58 32
	00 00		 lea	 rsi, QWORD PTR [rdx+12888]
  0001b	48 8d 9a 50 32
	00 00		 lea	 rbx, QWORD PTR [rdx+12880]
  00022	48 8d aa 48 32
	00 00		 lea	 rbp, QWORD PTR [rdx+12872]
  00029	49 89 73 e8	 mov	 QWORD PTR [r11-24], rsi
  0002d	49 89 5b e0	 mov	 QWORD PTR [r11-32], rbx
  00031	48 8d ba 40 32
	00 00		 lea	 rdi, QWORD PTR [rdx+12864]
  00038	48 8d 82 38 32
	00 00		 lea	 rax, QWORD PTR [rdx+12856]
  0003f	49 89 6b d8	 mov	 QWORD PTR [r11-40], rbp
  00043	41 b9 05 00 00
	00		 mov	 r9d, 5
  00049	49 89 7b d0	 mov	 QWORD PTR [r11-48], rdi
  0004d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00054	45 8d 41 fc	 lea	 r8d, QWORD PTR [r9-4]
  00058	49 89 43 c8	 mov	 QWORD PTR [r11-56], rax
  0005c	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00061	85 c0		 test	 eax, eax
  00063	0f 84 a2 00 00
	00		 je	 $LN7@extract_ar
$LN6@extract_ar:

; 4372 :         return 0;
; 4373 : 
; 4374 :     if (c->callback == Py_None) {

  00069	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0006c	4c 89 64 24 60	 mov	 QWORD PTR [rsp+96], r12
  00071	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:_Py_NoneStruct
  00078	49 3b cc	 cmp	 rcx, r12
  0007b	75 0c		 jne	 SHORT $LN5@extract_ar

; 4375 :         Py_DECREF(c->callback);

  0007d	e8 00 00 00 00	 call	 _Py_DecRef

; 4376 :         c->callback = NULL;

  00082	48 c7 03 00 00
	00 00		 mov	 QWORD PTR [rbx], 0
$LN5@extract_ar:

; 4377 :     }
; 4378 : 
; 4379 :     if (c->errback == Py_None) {

  00089	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  0008c	49 3b cc	 cmp	 rcx, r12
  0008f	75 0c		 jne	 SHORT $LN4@extract_ar

; 4380 :         Py_DECREF(c->errback);

  00091	e8 00 00 00 00	 call	 _Py_DecRef

; 4381 :         c->errback = NULL;

  00096	48 c7 06 00 00
	00 00		 mov	 QWORD PTR [rsi], 0
$LN4@extract_ar:

; 4382 :     }
; 4383 : 
; 4384 :     if (c->args == Py_None) {

  0009d	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  000a0	49 3b cc	 cmp	 rcx, r12
  000a3	75 14		 jne	 SHORT $LN3@extract_ar

; 4385 :         Py_DECREF(c->args);

  000a5	e8 00 00 00 00	 call	 _Py_DecRef

; 4386 :         c->args = Py_BuildValue("()");

  000aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02HCKGKOFO@?$CI?$CJ?$AA@
  000b1	e8 00 00 00 00	 call	 Py_BuildValue
  000b6	48 89 07	 mov	 QWORD PTR [rdi], rax
$LN3@extract_ar:

; 4387 :     }
; 4388 : 
; 4389 :     if (c->kwds == Py_None) {

  000b9	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
  000bd	49 3b cc	 cmp	 rcx, r12
  000c0	4c 8b 64 24 60	 mov	 r12, QWORD PTR [rsp+96]
  000c5	75 0d		 jne	 SHORT $LN2@extract_ar

; 4390 :         Py_DECREF(c->kwds);

  000c7	e8 00 00 00 00	 call	 _Py_DecRef

; 4391 :         c->kwds = NULL;

  000cc	48 c7 45 00 00
	00 00 00	 mov	 QWORD PTR [rbp], 0
$LN2@extract_ar:

; 4392 :     }
; 4393 : 
; 4394 :     if (c->args && !PyTuple_Check(c->args)) {

  000d4	48 8b 1f	 mov	 rbx, QWORD PTR [rdi]
  000d7	48 85 db	 test	 rbx, rbx
  000da	74 2a		 je	 SHORT $LN1@extract_ar
  000dc	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000e0	f7 82 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rdx+256], 67108864 ; 04000000H
  000ea	75 1a		 jne	 SHORT $LN1@extract_ar

; 4395 :         PyObject *tmp = c->args;
; 4396 :         c->args = Py_BuildValue("(O)", c->args);

  000ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  000f3	48 8b d3	 mov	 rdx, rbx
  000f6	e8 00 00 00 00	 call	 Py_BuildValue

; 4397 :         Py_DECREF(tmp);

  000fb	48 8b cb	 mov	 rcx, rbx
  000fe	48 89 07	 mov	 QWORD PTR [rdi], rax
  00101	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@extract_ar:

; 4398 :     }
; 4399 : 
; 4400 :     return 1;

  00106	b8 01 00 00 00	 mov	 eax, 1
$LN7@extract_ar:

; 4401 : }

  0010b	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  00110	48 8b 6c 24 70	 mov	 rbp, QWORD PTR [rsp+112]
  00115	48 8b 74 24 78	 mov	 rsi, QWORD PTR [rsp+120]
  0011a	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0011e	5f		 pop	 rdi
  0011f	c3		 ret	 0
extract_args ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@NBIFCBCJ@non?9None?5value?5for?5timeout?$AA@ ; `string'
PUBLIC	extract_waitobj_args
;	COMDAT pdata
pdata	SEGMENT
$pdata$extract_waitobj_args DD imagerel $LN11
	DD	imagerel $LN11+126
	DD	imagerel $unwind$extract_waitobj_args
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$extract_waitobj_args DD imagerel $LN11+126
	DD	imagerel $LN11+317
	DD	imagerel $chain$0$extract_waitobj_args
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$extract_waitobj_args DD imagerel $LN11+317
	DD	imagerel $LN11+338
	DD	imagerel $chain$1$extract_waitobj_args
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$extract_waitobj_args DD 021H
	DD	imagerel $LN11
	DD	imagerel $LN11+126
	DD	imagerel $unwind$extract_waitobj_args
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$extract_waitobj_args DD 020821H
	DD	010d408H
	DD	imagerel $LN11
	DD	imagerel $LN11+126
	DD	imagerel $unwind$extract_waitobj_args
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$extract_waitobj_args DD 081301H
	DD	0125413H
	DD	0113413H
	DD	0c00fb213H
	DD	0600c700dH
xdata	ENDS
;	COMDAT ??_C@_0BL@NBIFCBCJ@non?9None?5value?5for?5timeout?$AA@
CONST	SEGMENT
??_C@_0BL@NBIFCBCJ@non?9None?5value?5for?5timeout?$AA@ DB 'non-None value'
	DB	' for timeout', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT extract_waitobj_args
_TEXT	SEGMENT
args$ = 128
c$ = 136
extract_waitobj_args PROC				; COMDAT

; 4405 : {

$LN11:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	49 89 5b 10	 mov	 QWORD PTR [r11+16], rbx
  00007	49 89 6b 18	 mov	 QWORD PTR [r11+24], rbp
  0000b	56		 push	 rsi
  0000c	57		 push	 rdi
  0000d	41 54		 push	 r12
  0000f	48 83 ec 60	 sub	 rsp, 96			; 00000060H

; 4406 :     if (!PyArg_UnpackTuple(
; 4407 :             args, "", 2, 7,
; 4408 :             &(c->waitobj),
; 4409 :             &(c->waitobj_timeout),
; 4410 :             &(c->func),
; 4411 :             &(c->args),
; 4412 :             &(c->kwds),
; 4413 :             &(c->callback),
; 4414 :             &(c->errback)))

  00013	48 8d 9a 58 32
	00 00		 lea	 rbx, QWORD PTR [rdx+12888]
  0001a	48 8d b2 50 32
	00 00		 lea	 rsi, QWORD PTR [rdx+12880]
  00021	48 8d aa 48 32
	00 00		 lea	 rbp, QWORD PTR [rdx+12872]
  00028	49 89 5b d8	 mov	 QWORD PTR [r11-40], rbx
  0002c	49 89 73 d0	 mov	 QWORD PTR [r11-48], rsi
  00030	49 89 6b c8	 mov	 QWORD PTR [r11-56], rbp
  00034	48 8d ba 40 32
	00 00		 lea	 rdi, QWORD PTR [rdx+12864]
  0003b	48 8d 82 38 32
	00 00		 lea	 rax, QWORD PTR [rdx+12856]
  00042	4c 8d a2 30 32
	00 00		 lea	 r12, QWORD PTR [rdx+12848]
  00049	49 89 7b c0	 mov	 QWORD PTR [r11-64], rdi
  0004d	48 81 c2 28 32
	00 00		 add	 rdx, 12840		; 00003228H
  00054	49 89 43 b8	 mov	 QWORD PTR [r11-72], rax
  00058	41 b9 07 00 00
	00		 mov	 r9d, 7
  0005e	4d 89 63 b0	 mov	 QWORD PTR [r11-80], r12
  00062	49 89 53 a8	 mov	 QWORD PTR [r11-88], rdx
  00066	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0006d	45 8d 41 fb	 lea	 r8d, QWORD PTR [r9-5]
  00071	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00076	85 c0		 test	 eax, eax
  00078	0f 84 bf 00 00
	00		 je	 $LN8@extract_wa
$LN7@extract_wa:
  0007e	4c 89 ac 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], r13

; 4415 :         return 0;
; 4416 : 
; 4417 :     if (c->waitobj_timeout != Py_None) {

  00086	4c 8d 2d 00 00
	00 00		 lea	 r13, OFFSET FLAT:_Py_NoneStruct
  0008d	4d 39 2c 24	 cmp	 QWORD PTR [r12], r13
  00091	74 1a		 je	 SHORT $LN6@extract_wa

; 4418 :         PyErr_SetString(PyExc_ValueError, "non-None value for timeout");

  00093	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0009a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@NBIFCBCJ@non?9None?5value?5for?5timeout?$AA@
  000a1	e8 00 00 00 00	 call	 PyErr_SetString

; 4419 :         return 0;

  000a6	33 c0		 xor	 eax, eax
  000a8	e9 88 00 00 00	 jmp	 $LN10@extract_wa
$LN6@extract_wa:

; 4420 :     }
; 4421 : 
; 4422 :     if (c->callback == Py_None) {

  000ad	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  000b0	45 33 e4	 xor	 r12d, r12d
  000b3	49 3b cd	 cmp	 rcx, r13
  000b6	75 08		 jne	 SHORT $LN5@extract_wa

; 4423 :         Py_DECREF(c->callback);

  000b8	e8 00 00 00 00	 call	 _Py_DecRef

; 4424 :         c->callback = NULL;

  000bd	4c 89 26	 mov	 QWORD PTR [rsi], r12
$LN5@extract_wa:

; 4425 :     }
; 4426 : 
; 4427 :     if (c->errback == Py_None) {

  000c0	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  000c3	49 3b cd	 cmp	 rcx, r13
  000c6	75 08		 jne	 SHORT $LN4@extract_wa

; 4428 :         Py_DECREF(c->errback);

  000c8	e8 00 00 00 00	 call	 _Py_DecRef

; 4429 :         c->errback = NULL;

  000cd	4c 89 23	 mov	 QWORD PTR [rbx], r12
$LN4@extract_wa:

; 4430 :     }
; 4431 : 
; 4432 :     if (c->args == Py_None) {

  000d0	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  000d3	49 3b cd	 cmp	 rcx, r13
  000d6	75 14		 jne	 SHORT $LN3@extract_wa

; 4433 :         Py_DECREF(c->args);

  000d8	e8 00 00 00 00	 call	 _Py_DecRef

; 4434 :         c->args = Py_BuildValue("()");

  000dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02HCKGKOFO@?$CI?$CJ?$AA@
  000e4	e8 00 00 00 00	 call	 Py_BuildValue
  000e9	48 89 07	 mov	 QWORD PTR [rdi], rax
$LN3@extract_wa:

; 4435 :     }
; 4436 : 
; 4437 :     if (c->kwds == Py_None) {

  000ec	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
  000f0	49 3b cd	 cmp	 rcx, r13
  000f3	75 09		 jne	 SHORT $LN2@extract_wa

; 4438 :         Py_DECREF(c->kwds);

  000f5	e8 00 00 00 00	 call	 _Py_DecRef

; 4439 :         c->kwds = NULL;

  000fa	4c 89 65 00	 mov	 QWORD PTR [rbp], r12
$LN2@extract_wa:

; 4440 :     }
; 4441 : 
; 4442 :     if (c->args && !PyTuple_Check(c->args)) {

  000fe	48 8b 1f	 mov	 rbx, QWORD PTR [rdi]
  00101	48 85 db	 test	 rbx, rbx
  00104	74 2a		 je	 SHORT $LN1@extract_wa
  00106	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0010a	f7 80 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rax+256], 67108864 ; 04000000H
  00114	75 1a		 jne	 SHORT $LN1@extract_wa

; 4443 :         PyObject *tmp = c->args;
; 4444 :         c->args = Py_BuildValue("(O)", c->args);

  00116	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  0011d	48 8b d3	 mov	 rdx, rbx
  00120	e8 00 00 00 00	 call	 Py_BuildValue

; 4445 :         Py_DECREF(tmp);

  00125	48 8b cb	 mov	 rcx, rbx
  00128	48 89 07	 mov	 QWORD PTR [rdi], rax
  0012b	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@extract_wa:

; 4446 :     }
; 4447 : 
; 4448 :     return 1;

  00130	b8 01 00 00 00	 mov	 eax, 1
$LN10@extract_wa:
  00135	4c 8b ac 24 80
	00 00 00	 mov	 r13, QWORD PTR [rsp+128]
$LN8@extract_wa:

; 4449 : }

  0013d	4c 8d 5c 24 60	 lea	 r11, QWORD PTR [rsp+96]
  00142	49 8b 5b 28	 mov	 rbx, QWORD PTR [r11+40]
  00146	49 8b 6b 30	 mov	 rbp, QWORD PTR [r11+48]
  0014a	49 8b e3	 mov	 rsp, r11
  0014d	41 5c		 pop	 r12
  0014f	5f		 pop	 rdi
  00150	5e		 pop	 rsi
  00151	c3		 ret	 0
extract_waitobj_args ENDP
_TEXT	ENDS
PUBLIC	submit_work
EXTRN	__imp_TrySubmitThreadpoolCallback:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$submit_work DD imagerel $LN6
	DD	imagerel $LN6+87
	DD	imagerel $unwind$submit_work
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$submit_work DD 033801H
	DD	043438H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT submit_work
_TEXT	SEGMENT
c$ = 48
submit_work PROC					; COMDAT

; 4454 : {

$LN6:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	4c 8b c9	 mov	 r9, rcx

; 4455 :     int retval;
; 4456 :     PTP_SIMPLE_CALLBACK cb = _PyParallel_WorkCallback;
; 4457 :     if (Py_PXCTX) {

  00007	e8 00 00 00 00	 call	 _Py_PXCTX

; 4458 :         assert(c->instance);
; 4459 :         cb(c->instance, c);

  0000c	49 8b d1	 mov	 rdx, r9
  0000f	85 c0		 test	 eax, eax
  00011	74 16		 je	 SHORT $LN3@submit_wor
  00013	49 8b 89 f0 00
	00 00		 mov	 rcx, QWORD PTR [r9+240]
  0001a	e8 00 00 00 00	 call	 _PyParallel_WorkCallback

; 4460 :         return 1;

  0001f	b8 01 00 00 00	 mov	 eax, 1

; 4466 :     }
; 4467 : }

  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	c3		 ret	 0
$LN3@submit_wor:

; 4461 :     } else {
; 4462 :         retval = TrySubmitThreadpoolCallback(cb, c, NULL);

  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyParallel_WorkCallback
  00030	45 33 c0	 xor	 r8d, r8d
  00033	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00038	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TrySubmitThreadpoolCallback
  0003e	8b d8		 mov	 ebx, eax

; 4463 :         if (!retval)

  00040	85 c0		 test	 eax, eax
  00042	75 07		 jne	 SHORT $LN1@submit_wor

; 4464 :             PyErr_SetFromWindowsErr(0);

  00044	33 c9		 xor	 ecx, ecx
  00046	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
$LN1@submit_wor:

; 4465 :         return retval;

  0004b	8b c3		 mov	 eax, ebx
  0004d	48 8b 5c 24 20	 mov	 rbx, QWORD PTR [rsp+32]

; 4466 :     }
; 4467 : }

  00052	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00056	c3		 ret	 0
submit_work ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_submit_work DD imagerel $LN8
	DD	imagerel $LN8+59
	DD	imagerel $unwind$_async_submit_work
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_async_submit_work DD imagerel $LN8+59
	DD	imagerel $LN8+234
	DD	imagerel $chain$0$_async_submit_work
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_async_submit_work DD imagerel $LN8+234
	DD	imagerel $LN8+256
	DD	imagerel $chain$2$_async_submit_work
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_async_submit_work DD 020021H
	DD	067400H
	DD	imagerel $LN8
	DD	imagerel $LN8+59
	DD	imagerel $unwind$_async_submit_work
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_async_submit_work DD 020521H
	DD	067405H
	DD	imagerel $LN8
	DD	imagerel $LN8+59
	DD	imagerel $unwind$_async_submit_work
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_submit_work DD 060f01H
	DD	08540fH
	DD	07340fH
	DD	0600b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _async_submit_work
_TEXT	SEGMENT
self$ = 48
args$ = 56
_async_submit_work PROC					; COMDAT

; 4577 : {

$LN8:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	56		 push	 rsi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b ea	 mov	 rbp, rdx

; 4578 :     PyObject *result = NULL;
; 4579 :     Context  *c;
; 4580 :     PxState  *px;
; 4581 :     PxListItem *item;
; 4582 : 
; 4583 :     c = new_context(0, 0);

  00012	33 c9		 xor	 ecx, ecx
  00014	33 d2		 xor	 edx, edx
  00016	33 f6		 xor	 esi, esi
  00018	e8 00 00 00 00	 call	 new_context
  0001d	48 8b d8	 mov	 rbx, rax

; 4584 :     if (!c)

  00020	48 85 c0	 test	 rax, rax
  00023	75 10		 jne	 SHORT $LN5@async_subm

; 4621 : 
; 4622 : done:
; 4623 :     if (!result)
; 4624 :         assert(PyErr_Occurred());
; 4625 :     return result;
; 4626 : }

  00025	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0002a	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  0002f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00033	5e		 pop	 rsi
  00034	c3		 ret	 0
$LN5@async_subm:

; 4585 :         return NULL;
; 4586 : 
; 4587 :     px = c->px;
; 4588 : 
; 4589 :     if (!extract_args(args, c))

  00035	48 8b d0	 mov	 rdx, rax
  00038	48 8b cd	 mov	 rcx, rbp
  0003b	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  00040	48 8b b8 d8 00
	00 00		 mov	 rdi, QWORD PTR [rax+216]
  00047	e8 00 00 00 00	 call	 extract_args
  0004c	85 c0		 test	 eax, eax
  0004e	74 6f		 je	 SHORT $free_context$129087

; 4590 :         goto free_context;
; 4591 : 
; 4592 :     item = _PyHeap_NewListItem(c);

  00050	48 8b cb	 mov	 rcx, rbx
  00053	e8 00 00 00 00	 call	 _PyHeap_NewListItem

; 4593 :     if (!item)

  00058	48 85 c0	 test	 rax, rax
  0005b	74 62		 je	 SHORT $free_context$129087

; 4594 :         goto free_context;
; 4595 : 
; 4596 :     item->from = c;

  0005d	48 89 58 18	 mov	 QWORD PTR [rax+24], rbx

; 4597 : 
; 4598 :     InterlockedIncrement64(&(px->submitted));

  00061	f0 48 ff 87 08
	01 00 00	 lock inc QWORD PTR [rdi+264]

; 4599 :     InterlockedIncrement(&(px->pending));

  00069	f0 ff 87 10 01
	00 00		 lock inc DWORD PTR [rdi+272]

; 4600 :     InterlockedIncrement(&(px->active));

  00070	f0 ff 87 f8 00
	00 00		 lock inc DWORD PTR [rdi+248]

; 4601 :     c->stats.submitted = _Py_rdtsc();

  00077	0f 31		 rdtsc
  00079	48 c1 e2 20	 shl	 rdx, 32			; 00000020H

; 4602 : 
; 4603 :     if (!submit_work(c))

  0007d	48 8b cb	 mov	 rcx, rbx
  00080	48 0b c2	 or	 rax, rdx
  00083	48 89 83 00 01
	00 00		 mov	 QWORD PTR [rbx+256], rax
  0008a	e8 00 00 00 00	 call	 submit_work

; 4616 :     decref_args(c);

  0008f	48 8b cb	 mov	 rcx, rbx
  00092	85 c0		 test	 eax, eax
  00094	75 54		 jne	 SHORT $LN2@async_subm

; 4609 :     goto done;
; 4610 : 
; 4611 : error:
; 4612 :     InterlockedDecrement(&(c->px->contexts_active));

  00096	48 8b 83 d8 00
	00 00		 mov	 rax, QWORD PTR [rbx+216]
$error$129090:
  0009d	f0 ff 88 e8 00
	00 00		 lock dec DWORD PTR [rax+232]

; 4613 :     InterlockedDecrement(&(px->pending));

  000a4	f0 ff 8f 10 01
	00 00		 lock dec DWORD PTR [rdi+272]

; 4614 :     InterlockedDecrement(&(px->active));

  000ab	f0 ff 8f f8 00
	00 00		 lock dec DWORD PTR [rdi+248]

; 4615 :     InterlockedIncrement64(&(px->done));

  000b2	f0 48 ff 87 18
	01 00 00	 lock inc QWORD PTR [rdi+280]

; 4616 :     decref_args(c);

  000ba	e8 00 00 00 00	 call	 decref_args
$free_context$129087:

; 4617 : 
; 4618 : free_context:
; 4619 :     HeapDestroy(c->heap_handle);

  000bf	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  000c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_HeapDestroy

; 4620 :     free(c);

  000c9	48 8b cb	 mov	 rcx, rbx
  000cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$done$129092:

; 4621 : 
; 4622 : done:
; 4623 :     if (!result)
; 4624 :         assert(PyErr_Occurred());
; 4625 :     return result;
; 4626 : }

  000d2	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
  000d7	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000dc	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  000e1	48 8b c6	 mov	 rax, rsi
  000e4	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000e8	5e		 pop	 rsi
  000e9	c3		 ret	 0
$LN2@async_subm:

; 4604 :         goto error;
; 4605 : 
; 4606 :     incref_args(c);

  000ea	e8 00 00 00 00	 call	 incref_args

; 4607 : 
; 4608 :     result = (Py_INCREF(Py_None), Py_None);

  000ef	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_Py_NoneStruct
  000f6	48 8b ce	 mov	 rcx, rsi
  000f9	e8 00 00 00 00	 call	 _Py_IncRef
  000fe	eb d2		 jmp	 SHORT $done$129092
_async_submit_work ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CM@MCECGMBP@_async?4run?$CI?$CJ?3?5no?5more?5events?0?5re@ ; `string'
PUBLIC	??_C@_0DA@KGEAOAAG@_async?4run_once?5raised?5exception@ ; `string'
PUBLIC	??_C@_0DA@BGCBCAKL@_async?4run?$CI?$CFd?$CJ?5?$FL?$CFd?1?$CFd?$FN?5?$CIhogs?3?5?$CFd@ ; `string'
EXTRN	PySys_FormatStdout:PROC
EXTRN	Py_VerboseFlag:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_async_run DD imagerel $LN19
	DD	imagerel $LN19+262
	DD	imagerel $unwind$_async_run
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_run DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT ??_C@_0CM@MCECGMBP@_async?4run?$CI?$CJ?3?5no?5more?5events?0?5re@
CONST	SEGMENT
??_C@_0CM@MCECGMBP@_async?4run?$CI?$CJ?3?5no?5more?5events?0?5re@ DB '_as'
	DB	'ync.run(): no more events, returning...', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@KGEAOAAG@_async?4run_once?5raised?5exception@
CONST	SEGMENT
??_C@_0DA@KGEAOAAG@_async?4run_once?5raised?5exception@ DB '_async.run_on'
	DB	'ce raised exception, returning...', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@BGCBCAKL@_async?4run?$CI?$CFd?$CJ?5?$FL?$CFd?1?$CFd?$FN?5?$CIhogs?3?5?$CFd@
CONST	SEGMENT
??_C@_0DA@BGCBCAKL@_async?4run?$CI?$CFd?$CJ?5?$FL?$CFd?1?$CFd?$FN?5?$CIhogs?3?5?$CFd@ DB '_'
	DB	'async.run(%d) [%d/%d] (hogs: %d, ioloops: %d)', 0aH, 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
CONST	ENDS
;	COMDAT _async_run
_TEXT	SEGMENT
self$ = 64
args$ = 72
_async_run PROC						; COMDAT

; 4664 : {

$LN19:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 4665 :     PyThreadState *tstate = get_main_thread_state();
; 4666 :     PxState *px = PXSTATE();

  0000f	e8 00 00 00 00	 call	 PXSTATE

; 4667 :     int i = 0;

  00014	33 ff		 xor	 edi, edi
  00016	48 8b f0	 mov	 rsi, rax
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL8@async_run:

; 4668 :     long active_contexts = 0;
; 4669 :     long persisted_contexts = 0;
; 4670 :     do {
; 4671 :         i++;
; 4672 :         active_contexts = px->contexts_active;

  00020	8b 9e e8 00 00
	00		 mov	 ebx, DWORD PTR [rsi+232]

; 4673 :         persisted_contexts = px->contexts_persisted;

  00026	44 8b 8e ec 00
	00 00		 mov	 r9d, DWORD PTR [rsi+236]
  0002d	ff c7		 inc	 edi

; 4674 :         if (Py_VerboseFlag)

  0002f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  00036	74 25		 je	 SHORT $LN5@async_run

; 4675 :             PySys_FormatStdout("_async.run(%d) [%d/%d] "
; 4676 :                                "(hogs: %d, ioloops: %d)\n",
; 4677 :                                i, active_contexts, persisted_contexts,
; 4678 :                                _PxSocket_ActiveHogs, _PxSocket_ActiveIOLoops);

  00038	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _PxSocket_ActiveIOLoops
  0003e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _PxSocket_ActiveHogs
  00044	44 8b c3	 mov	 r8d, ebx
  00047	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DA@BGCBCAKL@_async?4run?$CI?$CFd?$CJ?5?$FL?$CFd?1?$CFd?$FN?5?$CIhogs?3?5?$CFd@
  00052	8b d7		 mov	 edx, edi
  00054	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00058	e8 00 00 00 00	 call	 PySys_FormatStdout
$LN5@async_run:

; 4679 :         assert(active_contexts >= 0);
; 4680 :         if (active_contexts == 0)

  0005d	85 db		 test	 ebx, ebx
  0005f	74 34		 je	 SHORT $LN6@async_run

; 4681 :             break;
; 4682 :         if (!_async_run_once(NULL, NULL)) {

  00061	33 d2		 xor	 edx, edx
  00063	33 c9		 xor	 ecx, ecx
  00065	e8 00 00 00 00	 call	 _async_run_once
  0006a	48 85 c0	 test	 rax, rax
  0006d	75 b1		 jne	 SHORT $LL8@async_run

; 4683 :             assert(tstate->curexc_type != NULL);
; 4684 :             if (Py_VerboseFlag)

  0006f	39 05 00 00 00
	00		 cmp	 DWORD PTR Py_VerboseFlag, eax
  00075	74 0c		 je	 SHORT $LN2@async_run

; 4685 :                 PySys_FormatStdout("_async.run_once raised "
; 4686 :                                    "exception, returning...\n");

  00077	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DA@KGEAOAAG@_async?4run_once?5raised?5exception@
  0007e	e8 00 00 00 00	 call	 PySys_FormatStdout
$LN2@async_run:

; 4687 :             return NULL;

  00083	33 c0		 xor	 eax, eax

; 4694 : }

  00085	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0008a	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0008f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00093	5f		 pop	 rdi
  00094	c3		 ret	 0
$LN6@async_run:

; 4688 :         }
; 4689 :     } while (1);
; 4690 : 
; 4691 :     if (Py_VerboseFlag)

  00095	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  0009c	74 0c		 je	 SHORT $LN1@async_run

; 4692 :         PySys_FormatStdout("_async.run(): no more events, returning...\n");

  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CM@MCECGMBP@_async?4run?$CI?$CJ?3?5no?5more?5events?0?5re@
  000a5	e8 00 00 00 00	 call	 PySys_FormatStdout
$LN1@async_run:

; 4693 :     Py_RETURN_NONE;

  000aa	e8 00 00 00 00	 call	 _Py_PXCTX
  000af	85 c0		 test	 eax, eax
  000b1	75 3c		 jne	 SHORT $LN12@async_run
  000b3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  000ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000c8	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000ce	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000d6	e8 00 00 00 00	 call	 _PyParallel_Guard
  000db	85 c0		 test	 eax, eax
  000dd	75 09		 jne	 SHORT $LN11@async_run
  000df	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  000e6	74 07		 je	 SHORT $LN12@async_run
$LN11@async_run:
  000e8	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN12@async_run:

; 4694 : }

  000ef	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000f4	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000f9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00100	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00104	5f		 pop	 rdi
  00105	c3		 ret	 0
_async_run ENDP
_TEXT	ENDS
EXTRN	__imp_SetThreadpoolWait:PROC
EXTRN	__imp_CreateThreadpoolWait:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_submit_wait DD imagerel $LN8
	DD	imagerel $LN8+59
	DD	imagerel $unwind$_async_submit_wait
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_async_submit_wait DD imagerel $LN8+59
	DD	imagerel $LN8+175
	DD	imagerel $chain$0$_async_submit_wait
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_async_submit_wait DD imagerel $LN8+175
	DD	imagerel $LN8+284
	DD	imagerel $chain$2$_async_submit_wait
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_async_submit_wait DD 020021H
	DD	065400H
	DD	imagerel $LN8
	DD	imagerel $LN8+59
	DD	imagerel $unwind$_async_submit_wait
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_async_submit_wait DD 020521H
	DD	065405H
	DD	imagerel $LN8
	DD	imagerel $LN8+59
	DD	imagerel $unwind$_async_submit_wait
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_submit_wait DD 060f01H
	DD	08640fH
	DD	07340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _async_submit_wait
_TEXT	SEGMENT
self$ = 48
args$ = 56
_async_submit_wait PROC					; COMDAT

; 4698 : {

$LN8:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b f2	 mov	 rsi, rdx

; 4699 :     PyObject *result = NULL;
; 4700 :     Context  *c;
; 4701 :     PxState  *px;
; 4702 :     PTP_WAIT_CALLBACK cb;
; 4703 : 
; 4704 :     c = new_context(0, 0);

  00012	33 c9		 xor	 ecx, ecx
  00014	33 d2		 xor	 edx, edx
  00016	33 ff		 xor	 edi, edi
  00018	e8 00 00 00 00	 call	 new_context
  0001d	48 8b d8	 mov	 rbx, rax

; 4705 :     if (!c)

  00020	48 85 c0	 test	 rax, rax
  00023	75 10		 jne	 SHORT $LN5@async_subm@2

; 4739 : 
; 4740 : done:
; 4741 :     if (!result)
; 4742 :         assert(PyErr_Occurred());
; 4743 :     return result;
; 4744 : }

  00025	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0002a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0002f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00033	5f		 pop	 rdi
  00034	c3		 ret	 0
$LN5@async_subm@2:

; 4706 :         return NULL;
; 4707 : 
; 4708 :     px = c->px;
; 4709 : 
; 4710 :     if (!extract_waitobj_args(args, c))

  00035	48 8b d0	 mov	 rdx, rax
  00038	48 8b ce	 mov	 rcx, rsi
  0003b	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp
  00040	48 8b a8 d8 00
	00 00		 mov	 rbp, QWORD PTR [rax+216]
  00047	e8 00 00 00 00	 call	 extract_waitobj_args
  0004c	85 c0		 test	 eax, eax
  0004e	74 26		 je	 SHORT $free_context$129143

; 4711 :         goto free_context;
; 4712 : 
; 4713 :     cb = _PyParallel_WaitCallback;
; 4714 :     c->tp_wait = CreateThreadpoolWait(cb, c, NULL);

  00050	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyParallel_WaitCallback
  00057	45 33 c0	 xor	 r8d, r8d
  0005a	48 8b d3	 mov	 rdx, rbx
  0005d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateThreadpoolWait
  00063	48 89 83 68 32
	00 00		 mov	 QWORD PTR [rbx+12904], rax

; 4715 :     if (!c->tp_wait) {

  0006a	48 85 c0	 test	 rax, rax
  0006d	75 40		 jne	 SHORT $LN3@async_subm@2

; 4716 :         PyErr_SetFromWindowsErr(0);

  0006f	33 c9		 xor	 ecx, ecx
  00071	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
$free_context$129143:

; 4733 :     goto done;
; 4734 : 
; 4735 : free_context:
; 4736 :     InterlockedDecrement(&(c->px->contexts_active));

  00076	48 8b 8b d8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+216]
  0007d	f0 ff 89 e8 00
	00 00		 lock dec DWORD PTR [rcx+232]

; 4737 :     HeapDestroy(c->heap_handle);

  00084	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00088	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_HeapDestroy

; 4738 :     free(c);

  0008e	48 8b cb	 mov	 rcx, rbx
  00091	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$done$129151:

; 4739 : 
; 4740 : done:
; 4741 :     if (!result)
; 4742 :         assert(PyErr_Occurred());
; 4743 :     return result;
; 4744 : }

  00097	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
  0009c	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000a1	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000a6	48 8b c7	 mov	 rax, rdi
  000a9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ad	5f		 pop	 rdi
  000ae	c3		 ret	 0
$LN3@async_subm@2:

; 4717 :         goto free_context;
; 4718 :     }
; 4719 : 
; 4720 :     if (!_PyEvent_TryCreate(c->waitobj))

  000af	48 8b 8b 28 32
	00 00		 mov	 rcx, QWORD PTR [rbx+12840]
  000b6	e8 00 00 00 00	 call	 _PyEvent_TryCreate
  000bb	84 c0		 test	 al, al
  000bd	74 b7		 je	 SHORT $free_context$129143

; 4721 :         goto free_context;
; 4722 : 
; 4723 :     SetThreadpoolWait(c->tp_wait, Py_EVENT(c->waitobj), NULL);

  000bf	48 8b 93 28 32
	00 00		 mov	 rdx, QWORD PTR [rbx+12840]
  000c6	48 8b 8b 68 32
	00 00		 mov	 rcx, QWORD PTR [rbx+12904]
  000cd	45 33 c0	 xor	 r8d, r8d
  000d0	48 8b 52 30	 mov	 rdx, QWORD PTR [rdx+48]
  000d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetThreadpoolWait

; 4724 : 
; 4725 :     InterlockedIncrement64(&(px->waits_submitted));

  000da	f0 48 ff 85 20
	01 00 00	 lock inc QWORD PTR [rbp+288]

; 4726 :     InterlockedIncrement(&(px->waits_pending));

  000e2	f0 ff 85 28 01
	00 00		 lock inc DWORD PTR [rbp+296]

; 4727 :     InterlockedIncrement(&(px->active));

  000e9	f0 ff 85 f8 00
	00 00		 lock inc DWORD PTR [rbp+248]

; 4728 :     c->stats.submitted = _Py_rdtsc();

  000f0	0f 31		 rdtsc
  000f2	48 c1 e2 20	 shl	 rdx, 32			; 00000020H

; 4729 : 
; 4730 :     incref_waitobj_args(c);

  000f6	48 8b cb	 mov	 rcx, rbx
  000f9	48 0b c2	 or	 rax, rdx
  000fc	48 89 83 00 01
	00 00		 mov	 QWORD PTR [rbx+256], rax
  00103	e8 00 00 00 00	 call	 incref_waitobj_args

; 4731 : 
; 4732 :     result = (Py_INCREF(Py_None), Py_None);

  00108	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  0010f	48 8b cf	 mov	 rcx, rdi
  00112	e8 00 00 00 00	 call	 _Py_IncRef
  00117	e9 7b ff ff ff	 jmp	 $done$129151
_async_submit_wait ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@FBLDCNGC@file?5io?5callbacks?5not?5yet?5suppor@ ; `string'
PUBLIC	??_C@_0CI@EMOJKEDA@_async?4write?$CI?$CJ?5completed?5synchro@ ; `string'
PUBLIC	??_C@_0CD@FIHGCGC@file?5io?5errbacks?5not?5yet?5support@ ; `string'
PUBLIC	??_C@_0CG@EOHNNJGF@file?5was?5not?5opened?5with?5async?4o@ ; `string'
PUBLIC	??_C@_05IHFJLCDG@Oy?$CKOO?$AA@			; `string'
EXTRN	PySys_WriteStdout:PROC
EXTRN	__imp_CancelThreadpoolIo:PROC
EXTRN	__imp_GetLastError:PROC
EXTRN	__imp_WriteFile:PROC
EXTRN	__imp_StartThreadpoolIo:PROC
EXTRN	PyBuffer_Release:PROC
EXTRN	PxList_Free:PROC
EXTRN	PxList_Malloc:PROC
EXTRN	PyErr_SetExcFromWindowsErr:PROC
EXTRN	__imp_CreateThreadpoolIo:PROC
_BSS	SEGMENT
PyExc_AsyncIOBuffersExhaustedError DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel_private.h
pdata	SEGMENT
$pdata$_async_submit_write_io DD imagerel $LN54
	DD	imagerel $LN54+76
	DD	imagerel $unwind$_async_submit_write_io
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_async_submit_write_io DD imagerel $LN54+76
	DD	imagerel $LN54+170
	DD	imagerel $chain$0$_async_submit_write_io
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_async_submit_write_io DD imagerel $LN54+170
	DD	imagerel $LN54+214
	DD	imagerel $chain$2$_async_submit_write_io
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$_async_submit_write_io DD imagerel $LN54+214
	DD	imagerel $LN54+260
	DD	imagerel $chain$5$_async_submit_write_io
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$_async_submit_write_io DD imagerel $LN54+260
	DD	imagerel $LN54+1191
	DD	imagerel $chain$9$_async_submit_write_io
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$10$_async_submit_write_io DD imagerel $LN54+1191
	DD	imagerel $LN54+1217
	DD	imagerel $chain$10$_async_submit_write_io
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$10$_async_submit_write_io DD 021H
	DD	imagerel $LN54+214
	DD	imagerel $LN54+260
	DD	imagerel $chain$5$_async_submit_write_io
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$_async_submit_write_io DD 08a221H
	DD	01474a2H
	DD	019549aH
	DD	012e41fH
	DD	0183408H
	DD	imagerel $LN54+214
	DD	imagerel $LN54+260
	DD	imagerel $chain$5$_async_submit_write_io
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$_async_submit_write_io DD 041d21H
	DD	015641dH
	DD	013d400H
	DD	imagerel $LN54
	DD	imagerel $LN54+76
	DD	imagerel $unwind$_async_submit_write_io
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_async_submit_write_io DD 020021H
	DD	013d400H
	DD	imagerel $LN54
	DD	imagerel $LN54+76
	DD	imagerel $unwind$_async_submit_write_io
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_async_submit_write_io DD 020821H
	DD	013d408H
	DD	imagerel $LN54
	DD	imagerel $LN54+76
	DD	imagerel $unwind$_async_submit_write_io
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_submit_write_io DD 030c01H
	DD	016010cH
	DD	0c005H
xdata	ENDS
;	COMDAT ??_C@_0CE@FBLDCNGC@file?5io?5callbacks?5not?5yet?5suppor@
CONST	SEGMENT
??_C@_0CE@FBLDCNGC@file?5io?5callbacks?5not?5yet?5suppor@ DB 'file io cal'
	DB	'lbacks not yet supported', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@EMOJKEDA@_async?4write?$CI?$CJ?5completed?5synchro@
CONST	SEGMENT
??_C@_0CI@EMOJKEDA@_async?4write?$CI?$CJ?5completed?5synchro@ DB '_async.'
	DB	'write() completed synchronously', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@FIHGCGC@file?5io?5errbacks?5not?5yet?5support@
CONST	SEGMENT
??_C@_0CD@FIHGCGC@file?5io?5errbacks?5not?5yet?5support@ DB 'file io errb'
	DB	'acks not yet supported', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@EOHNNJGF@file?5was?5not?5opened?5with?5async?4o@
CONST	SEGMENT
??_C@_0CG@EOHNNJGF@file?5was?5not?5opened?5with?5async?4o@ DB 'file was n'
	DB	'ot opened with async.open()', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IHFJLCDG@Oy?$CKOO?$AA@
CONST	SEGMENT
??_C@_05IHFJLCDG@Oy?$CKOO?$AA@ DB 'Oy*OO', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
CONST	ENDS
;	COMDAT _async_submit_write_io
_TEXT	SEGMENT
eb$ = 48
pybuf$ = 64
self$ = 192
args$ = 200
o$ = 208
cb$ = 216
_async_submit_write_io PROC				; COMDAT

; 4810 : {

$LN54:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	41 54		 push	 r12
  00005	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  0000c	48 8b c2	 mov	 rax, rdx

; 4811 :     PyObject *o, *cb, *eb, *result = NULL;
; 4812 :     Py_buffer pybuf;
; 4813 :     fileio   *f;
; 4814 :     Context  *c;
; 4815 :     PxState  *px;
; 4816 :     PxIO     *io;
; 4817 :     char     *buf;
; 4818 :     char      success;
; 4819 :     int is_file = 0;
; 4820 :     int is_socket = 0;
; 4821 :     int io_attempt = 0;
; 4822 :     PTP_WIN32_IO_CALLBACK callback;
; 4823 : 
; 4824 :     if (!PyArg_ParseTuple(args, "Oy*OO", &o, &pybuf, &cb, &eb))

  0000f	48 8d 4c 24 30	 lea	 rcx, QWORD PTR eb$[rsp]
  00014	4d 8d 4b 88	 lea	 r9, QWORD PTR [r11-120]
  00018	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0001d	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  00021	4d 8d 43 18	 lea	 r8, QWORD PTR [r11+24]
  00025	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05IHFJLCDG@Oy?$CKOO?$AA@
  00031	48 8b c8	 mov	 rcx, rax
  00034	45 33 e4	 xor	 r12d, r12d
  00037	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0003c	85 c0		 test	 eax, eax
  0003e	75 0c		 jne	 SHORT $LN38@async_subm@3

; 4825 :         return NULL;

  00040	33 c0		 xor	 eax, eax

; 4991 : }

  00042	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  00049	41 5c		 pop	 r12
  0004b	c3		 ret	 0
$LN38@async_subm@3:
  0004c	4c 89 ac 24 98
	00 00 00	 mov	 QWORD PTR [rsp+152], r13

; 4826 : 
; 4827 :     is_file = PyFileIO_Check(o);

  00054	4c 8b ac 24 d0
	00 00 00	 mov	 r13, QWORD PTR o$[rsp]
  0005c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyFileIO_Type
  00063	49 39 55 58	 cmp	 QWORD PTR [r13+88], rdx
  00067	74 11		 je	 SHORT $LN41@async_subm@3
  00069	49 8b 4d 58	 mov	 rcx, QWORD PTR [r13+88]
  0006d	e8 00 00 00 00	 call	 PyType_IsSubtype
  00072	4c 8b ac 24 d0
	00 00 00	 mov	 r13, QWORD PTR o$[rsp]
$LN41@async_subm@3:

; 4828 :     is_socket = PxSocketIO_Check(o);
; 4829 :     assert(!(is_file && is_socket));
; 4830 : 
; 4831 :     if (is_socket) {
; 4832 :         PyErr_SetString(PyExc_ValueError, "sockets not supported yet");
; 4833 :         return NULL;
; 4834 :     } else {
; 4835 :         assert(is_file);
; 4836 :         f = (fileio *)o;
; 4837 :         if (!f->native) {

  0007a	45 39 a5 9c 00
	00 00		 cmp	 DWORD PTR [r13+156], r12d
  00081	75 27		 jne	 SHORT $LN34@async_subm@3

; 4838 :             PyErr_SetString(PyExc_ValueError,
; 4839 :                             "file was not opened with async.open()");

  00083	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0008a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@EOHNNJGF@file?5was?5not?5opened?5with?5async?4o@
  00091	e8 00 00 00 00	 call	 PyErr_SetString
  00096	4c 8b ac 24 98
	00 00 00	 mov	 r13, QWORD PTR [rsp+152]

; 4840 :             return NULL;

  0009e	33 c0		 xor	 eax, eax

; 4991 : }

  000a0	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  000a7	41 5c		 pop	 r12
  000a9	c3		 ret	 0
$LN34@async_subm@3:

; 4841 :         }
; 4842 :     }
; 4843 : 
; 4844 :     Px_PROTECTION_GUARD(o);

  000aa	49 8b cd	 mov	 rcx, r13
  000ad	e8 00 00 00 00	 call	 _protected
  000b2	84 c0		 test	 al, al
  000b4	75 20		 jne	 SHORT $LN33@async_subm@3
  000b6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ProtectionError
  000bd	e8 00 00 00 00	 call	 PyErr_SetNone
$LN53@async_subm@3:
  000c2	33 c0		 xor	 eax, eax
  000c4	4c 8b ac 24 98
	00 00 00	 mov	 r13, QWORD PTR [rsp+152]

; 4991 : }

  000cc	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  000d3	41 5c		 pop	 r12
  000d5	c3		 ret	 0
$LN33@async_subm@3:

; 4845 : 
; 4846 :     if (!_PyEvent_TryCreate(o))

  000d6	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR o$[rsp]
  000de	e8 00 00 00 00	 call	 _PyEvent_TryCreate
  000e3	84 c0		 test	 al, al

; 4847 :         return NULL;

  000e5	74 db		 je	 SHORT $LN53@async_subm@3

; 4848 : 
; 4849 :     c = new_context(0, 0);

  000e7	33 d2		 xor	 edx, edx
  000e9	33 c9		 xor	 ecx, ecx
  000eb	48 89 b4 24 a8
	00 00 00	 mov	 QWORD PTR [rsp+168], rsi
  000f3	e8 00 00 00 00	 call	 new_context
  000f8	48 8b f0	 mov	 rsi, rax

; 4850 :     if (!c)

  000fb	48 85 c0	 test	 rax, rax
  000fe	0f 84 a3 03 00
	00		 je	 $LN52@async_subm@3
$LN29@async_subm@3:
  00104	48 89 9c 24 c0
	00 00 00	 mov	 QWORD PTR [rsp+192], rbx

; 4851 :         return NULL;
; 4852 : 
; 4853 :     px = c->px;

  0010c	48 8b 98 d8 00
	00 00		 mov	 rbx, QWORD PTR [rax+216]

; 4854 : 
; 4855 :     c->callback = (cb == Py_None ? NULL : cb);

  00113	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR cb$[rsp]
  0011b	4c 89 b4 24 90
	00 00 00	 mov	 QWORD PTR [rsp+144], r14
  00123	4c 8d 35 00 00
	00 00		 lea	 r14, OFFSET FLAT:_Py_NoneStruct
  0012a	49 3b c6	 cmp	 rax, r14
  0012d	49 0f 44 c4	 cmove	 rax, r12
  00131	48 89 86 50 32
	00 00		 mov	 QWORD PTR [rsi+12880], rax

; 4856 :     c->errback  = (eb == Py_None ? NULL : eb);

  00138	48 8b 44 24 30	 mov	 rax, QWORD PTR eb$[rsp]

; 4857 :     c->func = NULL;
; 4858 :     c->args = NULL;
; 4859 :     c->kwds = NULL;
; 4860 : 
; 4861 :     Py_XINCREF(c->callback);

  0013d	48 8b 8e 50 32
	00 00		 mov	 rcx, QWORD PTR [rsi+12880]
  00144	49 3b c6	 cmp	 rax, r14
  00147	4c 89 a6 38 32
	00 00		 mov	 QWORD PTR [rsi+12856], r12
  0014e	4c 89 a6 40 32
	00 00		 mov	 QWORD PTR [rsi+12864], r12
  00155	49 0f 44 c4	 cmove	 rax, r12
  00159	4c 89 a6 48 32
	00 00		 mov	 QWORD PTR [rsi+12872], r12
  00160	48 89 86 58 32
	00 00		 mov	 QWORD PTR [rsi+12888], rax
  00167	48 85 c9	 test	 rcx, rcx
  0016a	74 05		 je	 SHORT $LN27@async_subm@3
  0016c	e8 00 00 00 00	 call	 _Py_IncRef
$LN27@async_subm@3:

; 4862 :     Py_XINCREF(c->errback);

  00171	48 8b 8e 58 32
	00 00		 mov	 rcx, QWORD PTR [rsi+12888]
  00178	48 85 c9	 test	 rcx, rcx
  0017b	74 05		 je	 SHORT $LN23@async_subm@3
  0017d	e8 00 00 00 00	 call	 _Py_IncRef
$LN23@async_subm@3:

; 4863 : 
; 4864 :     callback = _PyParallel_IOCallback;
; 4865 :     c->tp_io = CreateThreadpoolIo(f->h, callback, c, NULL);

  00182	49 8b 8d 80 00
	00 00		 mov	 rcx, QWORD PTR [r13+128]
  00189	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_PyParallel_IOCallback
  00190	45 33 c9	 xor	 r9d, r9d
  00193	4c 8b c6	 mov	 r8, rsi
  00196	48 89 ac 24 c8
	00 00 00	 mov	 QWORD PTR [rsp+200], rbp
  0019e	48 89 bc 24 a0
	00 00 00	 mov	 QWORD PTR [rsp+160], rdi
  001a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateThreadpoolIo
  001ac	48 89 86 88 32
	00 00		 mov	 QWORD PTR [rsi+12936], rax

; 4866 :     if (!c->tp_io) {

  001b3	48 85 c0	 test	 rax, rax
  001b6	75 0c		 jne	 SHORT $LN20@async_subm@3

; 4867 :         PyErr_SetFromWindowsErr(0);

  001b8	33 c9		 xor	 ecx, ecx
  001ba	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 4868 :         goto free_context;

  001bf	e9 9c 02 00 00	 jmp	 $free_context$129233
$LN20@async_subm@3:

; 4869 :     }
; 4870 :     c->io_type = Px_IOTYPE_FILE;

  001c4	c7 86 80 32 00
	00 01 00 00 00	 mov	 DWORD PTR [rsi+12928], 1

; 4871 : 
; 4872 :     if (pybuf.len > PyAsync_IO_BUFSIZE) {

  001ce	48 81 7c 24 50
	00 00 01 00	 cmp	 QWORD PTR pybuf$[rsp+16], 65536 ; 00010000H
  001d7	7f 69		 jg	 SHORT $alloc_io$129235

; 4887 :     } else {
; 4888 : try_io:
; 4889 :         io_attempt++;
; 4890 :         io = (PxIO *)PxList_Pop(px->io_free);

  001d9	48 8b 4b 48	 mov	 rcx, QWORD PTR [rbx+72]
  001dd	bd 01 00 00 00	 mov	 ebp, 1
  001e2	e8 00 00 00 00	 call	 PxList_Pop
  001e7	48 8b f8	 mov	 rdi, rax

; 4891 :         if (!io) {

  001ea	48 85 c0	 test	 rax, rax
  001ed	0f 85 98 00 00
	00		 jne	 $LN10@async_subm@3
$try_io$129242:

; 4892 :             if (io_attempt > 1)

  001f3	83 fd 01	 cmp	 ebp, 1
  001f6	7f 4a		 jg	 SHORT $alloc_io$129235

; 4893 :                 goto alloc_io;
; 4894 :             else {
; 4895 :                 int r;
; 4896 :                 InterlockedIncrement64(&(px->io_stalls));

  001f8	f0 48 ff 83 f0
	00 00 00	 lock inc QWORD PTR [rbx+240]

; 4897 :                 /* XXX TODO create more buffers or wait for existing buffers. */
; 4898 :                 /* xxx todo: convert to submit_wait */
; 4899 :                 r = WaitForSingleObject(px->io_free_wakeup, 100);

  00200	48 8b 4b 50	 mov	 rcx, QWORD PTR [rbx+80]
  00204	ba 64 00 00 00	 mov	 edx, 100		; 00000064H
  00209	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WaitForSingleObject

; 4900 :                 if (r == WAIT_OBJECT_0 || r == WAIT_TIMEOUT)

  0020f	85 c0		 test	 eax, eax
  00211	74 07		 je	 SHORT $LN11@async_subm@3
  00213	3d 02 01 00 00	 cmp	 eax, 258		; 00000102H
  00218	75 15		 jne	 SHORT $LN12@async_subm@3
$LN11@async_subm@3:

; 4887 :     } else {
; 4888 : try_io:
; 4889 :         io_attempt++;
; 4890 :         io = (PxIO *)PxList_Pop(px->io_free);

  0021a	48 8b 4b 48	 mov	 rcx, QWORD PTR [rbx+72]
  0021e	ff c5		 inc	 ebp
  00220	e8 00 00 00 00	 call	 PxList_Pop
  00225	48 8b f8	 mov	 rdi, rax

; 4891 :         if (!io) {

  00228	48 85 c0	 test	 rax, rax
  0022b	74 c6		 je	 SHORT $try_io$129242
  0022d	eb 5c		 jmp	 SHORT $LN10@async_subm@3
$LN12@async_subm@3:

; 4901 :                     goto try_io;
; 4902 :                 else {
; 4903 :                     PyErr_SetExcFromWindowsErr(
; 4904 :                         PyExc_AsyncIOBuffersExhaustedError, 0);

  0022f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AsyncIOBuffersExhaustedError
  00236	33 d2		 xor	 edx, edx
  00238	e8 00 00 00 00	 call	 PyErr_SetExcFromWindowsErr

; 4905 :                     goto free_context;

  0023d	e9 1e 02 00 00	 jmp	 $free_context$129233
$alloc_io$129235:

; 4873 : alloc_io:
; 4874 :         io = (PxIO *)PxList_Malloc(sizeof(PxIO));

  00242	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  00247	e8 00 00 00 00	 call	 PxList_Malloc
  0024c	48 8b f8	 mov	 rdi, rax

; 4875 :         if (!io) {

  0024f	48 85 c0	 test	 rax, rax
  00252	75 0a		 jne	 SHORT $LN18@async_subm@3

; 4876 :             PyErr_NoMemory();

  00254	e8 00 00 00 00	 call	 PyErr_NoMemory

; 4877 :             goto free_context;

  00259	e9 02 02 00 00	 jmp	 $free_context$129233
$LN18@async_subm@3:

; 4878 :         }
; 4879 :         io->flags = PxIO_ONDEMAND;

  0025e	c7 40 3c 01 00
	00 00		 mov	 DWORD PTR [rax+60], 1

; 4880 :         buf = (char *)malloc(pybuf.len);

  00265	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pybuf$[rsp+16]
  0026a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc

; 4881 :         if (!buf) {

  00270	48 85 c0	 test	 rax, rax
  00273	75 12		 jne	 SHORT $LN17@async_subm@3

; 4882 :             PxList_Free(io);

  00275	48 8b cf	 mov	 rcx, rdi
  00278	e8 00 00 00 00	 call	 PxList_Free

; 4883 :             PyErr_NoMemory();

  0027d	e8 00 00 00 00	 call	 PyErr_NoMemory

; 4884 :             goto free_context;

  00282	e9 d9 01 00 00	 jmp	 $free_context$129233
$LN17@async_subm@3:

; 4885 :         }
; 4886 :         io->buf = buf;

  00287	48 89 47 48	 mov	 QWORD PTR [rdi+72], rax
$LN10@async_subm@3:

; 4906 :                 }
; 4907 :             }
; 4908 :         }
; 4909 :         assert(io);
; 4910 :         assert(PxIO_IS_PREALLOC(io));
; 4911 :     }
; 4912 :     assert(io);
; 4913 : 
; 4914 :     /* Ugh.  This is ass-backwards.  Need to refactor PxIO to support
; 4915 :      * Py_buffer natively. */
; 4916 :     io->len = (ULONG)pybuf.len;

  0028b	8b 44 24 50	 mov	 eax, DWORD PTR pybuf$[rsp+16]

; 4917 :     memcpy(io->buf, pybuf.buf, pybuf.len);

  0028f	48 8b 4f 48	 mov	 rcx, QWORD PTR [rdi+72]
  00293	89 47 40	 mov	 DWORD PTR [rdi+64], eax
  00296	4c 8b 44 24 50	 mov	 r8, QWORD PTR pybuf$[rsp+16]
  0029b	48 8b 54 24 40	 mov	 rdx, QWORD PTR pybuf$[rsp]
  002a0	e8 00 00 00 00	 call	 memcpy

; 4918 :     PyBuffer_Release(&pybuf);

  002a5	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pybuf$[rsp]
  002aa	e8 00 00 00 00	 call	 PyBuffer_Release

; 4919 : 
; 4920 :     io->obj = o;

  002af	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR o$[rsp]
  002b7	48 89 47 30	 mov	 QWORD PTR [rdi+48], rax

; 4921 :     c->io_type = PyAsync_IO_WRITE;

  002bb	c7 86 80 32 00
	00 04 00 00 00	 mov	 DWORD PTR [rsi+12928], 4

; 4922 : 
; 4923 :     Py_INCREF(io->obj);

  002c5	48 8b 4f 30	 mov	 rcx, QWORD PTR [rdi+48]
  002c9	e8 00 00 00 00	 call	 _Py_IncRef

; 4924 :     _write_lock(o);

  002ce	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR o$[rsp]
  002d6	48 83 c1 28	 add	 rcx, 40			; 00000028H
  002da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AcquireSRWLockExclusive

; 4925 :     io->overlapped.Offset = f->write_offset.LowPart;

  002e0	41 8b 85 c8 00
	00 00		 mov	 eax, DWORD PTR [r13+200]
  002e7	89 47 20	 mov	 DWORD PTR [rdi+32], eax

; 4926 :     io->overlapped.OffsetHigh = f->write_offset.HighPart;

  002ea	41 8b 85 cc 00
	00 00		 mov	 eax, DWORD PTR [r13+204]
  002f1	89 47 24	 mov	 DWORD PTR [rdi+36], eax

; 4927 :     f->write_offset.QuadPart += io->size;

  002f4	8b 47 38	 mov	 eax, DWORD PTR [rdi+56]
  002f7	49 01 85 c8 00
	00 00		 add	 QWORD PTR [r13+200], rax

; 4928 :     _write_unlock(o);

  002fe	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR o$[rsp]
  00306	48 83 c1 28	 add	 rcx, 40			; 00000028H
  0030a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseSRWLockExclusive

; 4929 : 
; 4930 :     StartThreadpoolIo(c->tp_io);

  00310	48 8b 8e 88 32
	00 00		 mov	 rcx, QWORD PTR [rsi+12936]
  00317	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_StartThreadpoolIo

; 4931 : 
; 4932 :     InterlockedIncrement64(&(px->io_submitted));

  0031d	f0 48 ff 83 50
	01 00 00	 lock inc QWORD PTR [rbx+336]

; 4933 :     InterlockedIncrement(&(px->io_pending));

  00325	f0 ff 83 58 01
	00 00		 lock inc DWORD PTR [rbx+344]

; 4934 :     InterlockedIncrement(&(px->active));

  0032c	f0 ff 83 f8 00
	00 00		 lock inc DWORD PTR [rbx+248]

; 4935 :     c->stats.submitted = _Py_rdtsc();

  00333	0f 31		 rdtsc
  00335	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  00339	48 0b c2	 or	 rax, rdx
  0033c	48 89 86 00 01
	00 00		 mov	 QWORD PTR [rsi+256], rax

; 4936 :     c->px->contexts_created++;

  00343	48 8b 86 d8 00
	00 00		 mov	 rax, QWORD PTR [rsi+216]
  0034a	48 ff 80 d8 00
	00 00		 inc	 QWORD PTR [rax+216]

; 4937 :     InterlockedIncrement(&(c->px->contexts_active));

  00351	48 8b 86 d8 00
	00 00		 mov	 rax, QWORD PTR [rsi+216]
  00358	f0 ff 80 e8 00
	00 00		 lock inc DWORD PTR [rax+232]

; 4938 : 
; 4939 :     success = WriteFile(f->h, io->buf, io->size, NULL, &(io->overlapped));

  0035f	44 8b 47 38	 mov	 r8d, DWORD PTR [rdi+56]
  00363	48 8b 57 48	 mov	 rdx, QWORD PTR [rdi+72]
  00367	49 8b 8d 80 00
	00 00		 mov	 rcx, QWORD PTR [r13+128]
  0036e	48 8d 47 10	 lea	 rax, QWORD PTR [rdi+16]
  00372	45 33 c9	 xor	 r9d, r9d
  00375	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0037a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WriteFile

; 4940 :     if (!success) {

  00380	84 c0		 test	 al, al
  00382	75 63		 jne	 SHORT $LN9@async_subm@3

; 4941 :         int last_error = GetLastError();

  00384	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError

; 4942 :         if (last_error != ERROR_IO_PENDING) {

  0038a	3d e5 03 00 00	 cmp	 eax, 997		; 000003e5H
  0038f	74 4e		 je	 SHORT $LN8@async_subm@3

; 4943 :             CancelThreadpoolIo(c->tp_io);

  00391	48 8b 8e 88 32
	00 00		 mov	 rcx, QWORD PTR [rsi+12936]
  00398	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CancelThreadpoolIo

; 4944 :             InterlockedDecrement(&(px->io_pending));

  0039e	f0 ff 8b 58 01
	00 00		 lock dec DWORD PTR [rbx+344]

; 4945 :             InterlockedDecrement(&(px->active));

  003a5	f0 ff 8b f8 00
	00 00		 lock dec DWORD PTR [rbx+248]

; 4946 :             InterlockedIncrement64(&(px->done));

  003ac	f0 48 ff 83 18
	01 00 00	 lock inc QWORD PTR [rbx+280]

; 4947 :             if (c->errback)

  003b4	4c 39 a6 58 32
	00 00		 cmp	 QWORD PTR [rsi+12888], r12
  003bb	74 19		 je	 SHORT $LN7@async_subm@3

; 4948 :                 PyErr_Warn(PyExc_RuntimeWarning,
; 4949 :                            "file io errbacks not yet supported");

  003bd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeWarning
  003c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@FIHGCGC@file?5io?5errbacks?5not?5yet?5support@
  003cb	41 b8 01 00 00
	00		 mov	 r8d, 1
  003d1	e8 00 00 00 00	 call	 PyErr_WarnEx
$LN7@async_subm@3:

; 4950 :             PyErr_SetFromWindowsErr(0);

  003d6	33 c9		 xor	 ecx, ecx
  003d8	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 4951 :             goto free_io;

  003dd	eb 69		 jmp	 SHORT $free_io$129263
$LN8@async_subm@3:

; 4952 :         } else {
; 4953 :             result = Py_None;

  003df	4d 8b e6	 mov	 r12, r14

; 4954 :             goto done;

  003e2	e9 95 00 00 00	 jmp	 $LN49@async_subm@3
$LN9@async_subm@3:

; 4955 :         }
; 4956 :     } else {
; 4957 :         CancelThreadpoolIo(c->tp_io);

  003e7	48 8b 8e 88 32
	00 00		 mov	 rcx, QWORD PTR [rsi+12936]
  003ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CancelThreadpoolIo

; 4958 :         InterlockedDecrement(&(px->io_pending));

  003f4	f0 ff 8b 58 01
	00 00		 lock dec DWORD PTR [rbx+344]

; 4959 :         InterlockedDecrement(&(px->active));

  003fb	f0 ff 8b f8 00
	00 00		 lock dec DWORD PTR [rbx+248]

; 4960 :         InterlockedIncrement64(&(px->done));

  00402	f0 48 ff 83 18
	01 00 00	 lock inc QWORD PTR [rbx+280]

; 4961 :         InterlockedIncrement64(&(px->async_writes_completed_synchronously));

  0040a	f0 48 ff 83 68
	01 00 00	 lock inc QWORD PTR [rbx+360]

; 4962 :         PySys_WriteStdout("_async.write() completed synchronously\n");

  00412	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CI@EMOJKEDA@_async?4write?$CI?$CJ?5completed?5synchro@
  00419	e8 00 00 00 00	 call	 PySys_WriteStdout

; 4963 :         result = Py_True;
; 4964 :         if (c->callback)

  0041e	48 83 be 50 32
	00 00 00	 cmp	 QWORD PTR [rsi+12880], 0
  00426	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:_Py_TrueStruct
  0042d	74 19		 je	 SHORT $free_io$129263

; 4965 :             PyErr_Warn(PyExc_RuntimeWarning,
; 4966 :                        "file io callbacks not yet supported");

  0042f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeWarning
  00436	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FBLDCNGC@file?5io?5callbacks?5not?5yet?5suppor@
  0043d	41 b8 01 00 00
	00		 mov	 r8d, 1
  00443	e8 00 00 00 00	 call	 PyErr_WarnEx
$free_io$129263:

; 4967 :         goto free_io;
; 4968 :     }
; 4969 : 
; 4970 :     assert(0); /* unreachable */
; 4971 : 
; 4972 : free_io:
; 4973 :     if (PxIO_IS_ONDEMAND(io)) {

  00448	83 7f 3c 01	 cmp	 DWORD PTR [rdi+60], 1
  0044c	75 12		 jne	 SHORT $free_context$129233

; 4974 :         free(io->buf);

  0044e	48 8b 4f 48	 mov	 rcx, QWORD PTR [rdi+72]
  00452	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 4975 :         PxList_Free(io);

  00458	48 8b cf	 mov	 rcx, rdi
  0045b	e8 00 00 00 00	 call	 PxList_Free
$free_context$129233:

; 4976 :     }
; 4977 : 
; 4978 : free_context:
; 4979 :     InterlockedDecrement(&(px->contexts_active));

  00460	f0 ff 8b e8 00
	00 00		 lock dec DWORD PTR [rbx+232]

; 4980 :     px->contexts_destroyed++;

  00467	48 ff 83 e0 00
	00 00		 inc	 QWORD PTR [rbx+224]

; 4981 :     free(c);

  0046e	48 8b ce	 mov	 rcx, rsi
  00471	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$done$129265:

; 4982 : 
; 4983 : done:
; 4984 :     if (!result)

  00477	4d 85 e4	 test	 r12, r12
  0047a	74 08		 je	 SHORT $LN1@async_subm@3
$LN49@async_subm@3:

; 4985 :         assert(PyErr_Occurred());
; 4986 :     else {
; 4987 :         assert(result == Py_None || result == Py_True);
; 4988 :         Py_INCREF(result);

  0047c	49 8b cc	 mov	 rcx, r12
  0047f	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@async_subm@3:

; 4989 :     }
; 4990 :     return result;

  00484	4c 8b b4 24 90
	00 00 00	 mov	 r14, QWORD PTR [rsp+144]
  0048c	48 8b bc 24 a0
	00 00 00	 mov	 rdi, QWORD PTR [rsp+160]
  00494	48 8b ac 24 c8
	00 00 00	 mov	 rbp, QWORD PTR [rsp+200]
  0049c	48 8b 9c 24 c0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+192]
  004a4	49 8b c4	 mov	 rax, r12
$LN52@async_subm@3:
  004a7	48 8b b4 24 a8
	00 00 00	 mov	 rsi, QWORD PTR [rsp+168]
  004af	4c 8b ac 24 98
	00 00 00	 mov	 r13, QWORD PTR [rsp+152]

; 4991 : }

  004b7	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  004be	41 5c		 pop	 r12
  004c0	c3		 ret	 0
_async_submit_write_io ENDP
_TEXT	ENDS
PUBLIC	??_C@_02PHOHPJPD@O?$CB?$AA@			; `string'
EXTRN	__imp_SetEndOfFile:PROC
EXTRN	__imp_SetFilePointerEx:PROC
EXTRN	_PyErr_BadInternalCall:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_async_filecloser DD imagerel $LN34
	DD	imagerel $LN34+83
	DD	imagerel $unwind$_async_filecloser
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_async_filecloser DD imagerel $LN34+83
	DD	imagerel $LN34+221
	DD	imagerel $chain$2$_async_filecloser
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$_async_filecloser DD imagerel $LN34+221
	DD	imagerel $LN34+504
	DD	imagerel $chain$4$_async_filecloser
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$_async_filecloser DD imagerel $LN34+504
	DD	imagerel $LN34+534
	DD	imagerel $chain$5$_async_filecloser
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$_async_filecloser DD 020021H
	DD	0c6400H
	DD	imagerel $LN34
	DD	imagerel $LN34+83
	DD	imagerel $unwind$_async_filecloser
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$_async_filecloser DD 060021H
	DD	0d7400H
	DD	0c6400H
	DD	0a5400H
	DD	imagerel $LN34
	DD	imagerel $LN34+83
	DD	imagerel $unwind$_async_filecloser
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_async_filecloser DD 063221H
	DD	0d7432H
	DD	0a542dH
	DD	0c6405H
	DD	imagerel $LN34
	DD	imagerel $LN34+83
	DD	imagerel $unwind$_async_filecloser
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_filecloser DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT ??_C@_02PHOHPJPD@O?$CB?$AA@
CONST	SEGMENT
??_C@_02PHOHPJPD@O?$CB?$AA@ DB 'O!', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
CONST	ENDS
;	COMDAT _async_filecloser
_TEXT	SEGMENT
self$ = 80
f$ = 88
args$ = 88
_async_filecloser PROC					; COMDAT

; 5176 : {

$LN34:
  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 5177 :     fileio *f;
; 5178 :     PyObject *o, *result = NULL;
; 5179 : 
; 5180 :     if (!PyTuple_Check(args)) {

  00006	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  0000a	33 db		 xor	 ebx, ebx
  0000c	4c 8b d2	 mov	 r10, rdx
  0000f	f7 80 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rax+256], 67108864 ; 04000000H
  00019	75 19		 jne	 SHORT $LN18@async_file

; 5181 :         PyErr_BadInternalCall();

  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00022	ba 3d 14 00 00	 mov	 edx, 5181		; 0000143dH
  00027	e8 00 00 00 00	 call	 _PyErr_BadInternalCall
$LN33@async_file:

; 5182 :         return NULL;

  0002c	33 c0		 xor	 eax, eax

; 5242 : }

  0002e	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00032	5b		 pop	 rbx
  00033	c3		 ret	 0
$LN18@async_file:

; 5183 :     }
; 5184 : 
; 5185 :     if (!PyArg_ParseTuple(args, "O!", &PyFileIO_Type, &f))

  00034	4c 8d 4c 24 58	 lea	 r9, QWORD PTR f$[rsp]
  00039	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyFileIO_Type
  00040	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02PHOHPJPD@O?$CB?$AA@
  00047	49 8b ca	 mov	 rcx, r10
  0004a	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0004f	85 c0		 test	 eax, eax

; 5186 :         return NULL;

  00051	74 d9		 je	 SHORT $LN33@async_file

; 5187 : 
; 5188 :     if (!f->h || f->h == INVALID_HANDLE_VALUE) {

  00053	48 89 74 24 60	 mov	 QWORD PTR [rsp+96], rsi
  00058	48 8b 74 24 58	 mov	 rsi, QWORD PTR f$[rsp]
  0005d	48 8b 86 80 00
	00 00		 mov	 rax, QWORD PTR [rsi+128]
  00064	48 85 c0	 test	 rax, rax
  00067	0f 84 8b 01 00
	00		 je	 $LN15@async_file
  0006d	48 83 f8 ff	 cmp	 rax, -1
  00071	0f 84 81 01 00
	00		 je	 $LN15@async_file

; 5191 :     }
; 5192 : 
; 5193 :     o = (PyObject *)f;
; 5194 : 
; 5195 :     _write_lock(o);

  00077	48 8d 4e 28	 lea	 rcx, QWORD PTR [rsi+40]
  0007b	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp
  00080	48 89 7c 24 68	 mov	 QWORD PTR [rsp+104], rdi
  00085	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AcquireSRWLockExclusive

; 5196 :     if (f->size > 0 && f->writable) {

  0008b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR f$[rsp]
  00090	48 39 99 90 00
	00 00		 cmp	 QWORD PTR [rcx+144], rbx
  00097	0f 8e e8 00 00
	00		 jle	 $LN6@async_file
  0009d	f6 41 64 04	 test	 BYTE PTR [rcx+100], 4
  000a1	0f 84 de 00 00
	00		 je	 $LN6@async_file

; 5197 :         LPCWSTR n;
; 5198 :         Py_UNICODE *u;
; 5199 :         LARGE_INTEGER i;
; 5200 : 
; 5201 :         u = f->name;

  000a7	48 8b b9 88 00
	00 00		 mov	 rdi, QWORD PTR [rcx+136]

; 5202 :         n = (LPCWSTR)u;
; 5203 : 
; 5204 :         Px_PROTECTION_GUARD(o);

  000ae	48 8b ce	 mov	 rcx, rsi
  000b1	e8 00 00 00 00	 call	 _protected
  000b6	84 c0		 test	 al, al
  000b8	75 23		 jne	 SHORT $LN12@async_file
  000ba	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ProtectionError
  000c1	e8 00 00 00 00	 call	 PyErr_SetNone
  000c6	33 c0		 xor	 eax, eax
$LN32@async_file:
  000c8	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  000cd	48 8b 7c 24 68	 mov	 rdi, QWORD PTR [rsp+104]
  000d2	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]

; 5242 : }

  000d7	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000db	5b		 pop	 rbx
  000dc	c3		 ret	 0
$LN12@async_file:

; 5205 :         /* Close the file and re-open without FILE_FLAG_NO_BUFFERING in order
; 5206 :          * to set the EOF marker to the correct position (as opposed to the
; 5207 :          * sector-aligned position we set it to as part of _async_fileopener).
; 5208 :          */
; 5209 :         CloseHandle(f->h);

  000dd	48 8b 4c 24 58	 mov	 rcx, QWORD PTR f$[rsp]
  000e2	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  000e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 5210 :         f->h = CreateFile(n, GENERIC_WRITE,
; 5211 :                           FILE_SHARE_READ | FILE_SHARE_WRITE,
; 5212 :                           NULL, OPEN_EXISTING, 0, NULL);

  000ef	45 33 c9	 xor	 r9d, r9d
  000f2	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  000f7	45 8d 41 03	 lea	 r8d, QWORD PTR [r9+3]
  000fb	ba 00 00 00 40	 mov	 edx, 1073741824		; 40000000H
  00100	48 8b cf	 mov	 rcx, rdi
  00103	89 5c 24 28	 mov	 DWORD PTR [rsp+40], ebx
  00107	c7 44 24 20 03
	00 00 00	 mov	 DWORD PTR [rsp+32], 3
  0010f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateFileW
  00115	48 8b 4c 24 58	 mov	 rcx, QWORD PTR f$[rsp]
  0011a	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax

; 5213 : 
; 5214 :         if (!f->h || f->h == INVALID_HANDLE_VALUE) {

  00121	48 8b 4c 24 58	 mov	 rcx, QWORD PTR f$[rsp]
  00126	48 8b 81 80 00
	00 00		 mov	 rax, QWORD PTR [rcx+128]
  0012d	48 85 c0	 test	 rax, rax
  00130	74 20		 je	 SHORT $LN8@async_file
  00132	48 83 f8 ff	 cmp	 rax, -1
  00136	74 1a		 je	 SHORT $LN8@async_file

; 5217 :         }
; 5218 : 
; 5219 :         i.QuadPart = f->size;
; 5220 :         if (!SetFilePointerEx(f->h, i, NULL, FILE_BEGIN)) {

  00138	48 8b 91 90 00
	00 00		 mov	 rdx, QWORD PTR [rcx+144]
  0013f	45 33 c9	 xor	 r9d, r9d
  00142	45 33 c0	 xor	 r8d, r8d
  00145	48 8b c8	 mov	 rcx, rax
  00148	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetFilePointerEx
  0014e	85 c0		 test	 eax, eax
  00150	75 0c		 jne	 SHORT $LN7@async_file
$LN8@async_file:

; 5221 :             PyErr_SetFromWindowsErrWithUnicodeFilename(0, u);

  00152	48 8b d7	 mov	 rdx, rdi
  00155	33 c9		 xor	 ecx, ecx
  00157	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErrWithUnicodeFilename

; 5222 :             goto done;

  0015c	eb 48		 jmp	 SHORT $done$129443
$LN7@async_file:

; 5223 :         }
; 5224 : 
; 5225 :         if (!SetEndOfFile(f->h)) {

  0015e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR f$[rsp]
  00163	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  0016a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetEndOfFile
  00170	85 c0		 test	 eax, eax
  00172	75 0c		 jne	 SHORT $LN29@async_file

; 5226 :             PyErr_SetFromWindowsErrWithUnicodeFilename(0, u);

  00174	48 8b d7	 mov	 rdx, rdi
  00177	33 c9		 xor	 ecx, ecx
  00179	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErrWithUnicodeFilename

; 5227 :             goto done;

  0017e	eb 26		 jmp	 SHORT $done$129443
$LN29@async_file:

; 5215 :             PyErr_SetFromWindowsErrWithUnicodeFilename(0, u);
; 5216 :             goto done;

  00180	48 8b 4c 24 58	 mov	 rcx, QWORD PTR f$[rsp]
$LN6@async_file:

; 5228 :         }
; 5229 :     }
; 5230 : 
; 5231 :     CloseHandle(f->h);

  00185	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  0018c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 5232 :     f->fd = -1;

  00192	4c 8b 5c 24 58	 mov	 r11, QWORD PTR f$[rsp]

; 5233 :     result = Py_True;

  00197	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_TrueStruct
  0019e	41 c7 43 60 ff
	ff ff ff	 mov	 DWORD PTR [r11+96], -1
$done$129443:

; 5234 : 
; 5235 : done:
; 5236 :     _write_unlock(o);

  001a6	48 8d 4e 28	 lea	 rcx, QWORD PTR [rsi+40]
  001aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseSRWLockExclusive

; 5237 :     if (!result)
; 5238 :         assert(PyErr_Occurred());
; 5239 : 
; 5240 :     Py_XINCREF(result);

  001b0	48 85 db	 test	 rbx, rbx
  001b3	74 3b		 je	 SHORT $LN3@async_file
  001b5	e8 00 00 00 00	 call	 _Py_PXCTX
  001ba	85 c0		 test	 eax, eax
  001bc	75 32		 jne	 SHORT $LN3@async_file
  001be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  001cc	4c 8b cb	 mov	 r9, rbx
  001cf	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  001d5	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  001dd	e8 00 00 00 00	 call	 _PyParallel_Guard
  001e2	85 c0		 test	 eax, eax
  001e4	75 06		 jne	 SHORT $LN25@async_file
  001e6	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  001ea	74 04		 je	 SHORT $LN3@async_file
$LN25@async_file:
  001ec	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN3@async_file:

; 5241 :     return result;

  001f0	48 8b c3	 mov	 rax, rbx
  001f3	e9 d0 fe ff ff	 jmp	 $LN32@async_file
$LN15@async_file:

; 5189 :         PyErr_BadInternalCall();

  001f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  001ff	ba 45 14 00 00	 mov	 edx, 5189		; 00001445H
  00204	e8 00 00 00 00	 call	 _PyErr_BadInternalCall
  00209	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]

; 5190 :         return NULL;

  0020e	33 c0		 xor	 eax, eax

; 5242 : }

  00210	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00214	5b		 pop	 rbx
  00215	c3		 ret	 0
_async_filecloser ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_async__close DD imagerel $LN12
	DD	imagerel $LN12+214
	DD	imagerel $unwind$_async__close
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async__close DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT _async__close
_TEXT	SEGMENT
self$ = 64
obj$ = 72
_async__close PROC					; COMDAT

; 5247 : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b da	 mov	 rbx, rdx

; 5248 :     fileio   *f;
; 5249 : 
; 5250 :     Py_INCREF(obj);

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN5@async__clo
  00012	4c 8b ca	 mov	 r9, rdx
  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN4@async__clo
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN5@async__clo
$LN4@async__clo:
  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN5@async__clo:

; 5251 :     if (!PyFileIO_Check(obj)) {

  00044	48 8b 4b 58	 mov	 rcx, QWORD PTR [rbx+88]
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyFileIO_Type
  0004f	48 3b ca	 cmp	 rcx, rdx
  00052	74 24		 je	 SHORT $LN1@async__clo
  00054	e8 00 00 00 00	 call	 PyType_IsSubtype
  00059	85 c0		 test	 eax, eax
  0005b	75 1b		 jne	 SHORT $LN1@async__clo

; 5252 :         PyErr_SetString(PyExc_ValueError, "not an io file object");

  0005d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00064	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@IOLDKAG@not?5an?5io?5file?5object?$AA@
  0006b	e8 00 00 00 00	 call	 PyErr_SetString

; 5253 :         return NULL;

  00070	33 c0		 xor	 eax, eax

; 5260 : }

  00072	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00076	5b		 pop	 rbx
  00077	c3		 ret	 0
$LN1@async__clo:

; 5254 :     }
; 5255 : 
; 5256 :     f = (fileio *)obj;
; 5257 :     Py_DECREF(f->owner);

  00078	48 8b 8b b8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+184]
  0007f	e8 00 00 00 00	 call	 _Py_DecRef

; 5258 : 
; 5259 :     Py_RETURN_NONE;

  00084	e8 00 00 00 00	 call	 _Py_PXCTX
  00089	85 c0		 test	 eax, eax
  0008b	75 3c		 jne	 SHORT $LN9@async__clo
  0008d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00094	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0009b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000a2	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000a8	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000b0	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b5	85 c0		 test	 eax, eax
  000b7	75 09		 jne	 SHORT $LN8@async__clo
  000b9	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  000c0	74 07		 je	 SHORT $LN9@async__clo
$LN8@async__clo:
  000c2	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN9@async__clo:
  000c9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 5260 : }

  000d0	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d4	5b		 pop	 rbx
  000d5	c3		 ret	 0
_async__close ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@DOPCBCGK@invalid?5caching?5behavior?3?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BL@NMDENEGE@unexpected?5value?5for?5flags?$AA@ ; `string'
PUBLIC	??_C@_0BD@JHNIJJCC@inOu?$CDiO?3fileopener?$AA@	; `string'
EXTRN	PyLong_FromVoidPtr:PROC
EXTRN	__imp_SetFileCompletionNotificationModes:PROC
EXTRN	__ImageBase:BYTE
EXTRN	PyErr_SetExcFromWindowsErrWithUnicodeFilename:PROC
EXTRN	PyExc_OSError:QWORD
EXTRN	__imp_FindClose:PROC
EXTRN	__imp_FindFirstFileW:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_fileopener DD imagerel $LN47
	DD	imagerel $LN47+141
	DD	imagerel $unwind$_async_fileopener
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_async_fileopener DD imagerel $LN47+141
	DD	imagerel $LN47+698
	DD	imagerel $chain$0$_async_fileopener
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_async_fileopener DD imagerel $LN47+698
	DD	imagerel $LN47+724
	DD	imagerel $chain$1$_async_fileopener
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_async_fileopener DD imagerel $LN47+724
	DD	imagerel $LN47+748
	DD	imagerel $chain$2$_async_fileopener
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_async_fileopener DD 020021H
	DD	060e400H
	DD	imagerel $LN47
	DD	imagerel $LN47+141
	DD	imagerel $unwind$_async_fileopener
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_async_fileopener DD 021H
	DD	imagerel $LN47
	DD	imagerel $LN47+141
	DD	imagerel $unwind$_async_fileopener
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_async_fileopener DD 020821H
	DD	060e408H
	DD	imagerel $LN47
	DD	imagerel $LN47+141
	DD	imagerel $unwind$_async_fileopener
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_fileopener DD 091b01H
	DD	061341bH
	DD	05a011bH
	DD	0c00ad00cH
	DD	060077008H
	DD	05006H
xdata	ENDS
;	COMDAT ??_C@_0BN@DOPCBCGK@invalid?5caching?5behavior?3?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BN@DOPCBCGK@invalid?5caching?5behavior?3?5?$CFd?$AA@ DB 'invalid c'
	DB	'aching behavior: %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NMDENEGE@unexpected?5value?5for?5flags?$AA@
CONST	SEGMENT
??_C@_0BL@NMDENEGE@unexpected?5value?5for?5flags?$AA@ DB 'unexpected valu'
	DB	'e for flags', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JHNIJJCC@inOu?$CDiO?3fileopener?$AA@
CONST	SEGMENT
??_C@_0BD@JHNIJJCC@inOu?$CDiO?3fileopener?$AA@ DB 'inOu#iO:fileopener', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _async_fileopener
_TEXT	SEGMENT
uname$ = 80
size$ = 88
fileobj$ = 96
namelen$ = 104
templ$ = 112
d$ = 128
self$ = 768
args$ = 776
flags$ = 784
caching_behavior$ = 792
_async_fileopener PROC					; COMDAT

; 5264 : {

$LN47:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	41 54		 push	 r12
  0000a	41 55		 push	 r13
  0000c	48 8d ac 24 30
	fe ff ff	 lea	 rbp, QWORD PTR [rsp-464]
  00014	48 81 ec d0 02
	00 00		 sub	 rsp, 720		; 000002d0H

; 5265 :     LPCWSTR name;
; 5266 :     Py_UNICODE *uname;
; 5267 :     int namelen;
; 5268 :     int flags;
; 5269 :     int caching_behavior;
; 5270 : 
; 5271 :     int access = 0;

  0001b	33 ff		 xor	 edi, edi
  0001d	48 8b c2	 mov	 rax, rdx

; 5272 :     int share = 0;
; 5273 :     char notif_flags;
; 5274 : 
; 5275 :     int create_flags = 0;
; 5276 :     int file_flags = FILE_FLAG_OVERLAPPED;
; 5277 : 
; 5278 :     int exists = 1;
; 5279 : 
; 5280 :     Py_ssize_t size = 0;
; 5281 : 
; 5282 :     PyObject *templ;
; 5283 :     PyObject *result = NULL;
; 5284 :     PyObject *fileobj;
; 5285 :     fileio   *f;
; 5286 : 
; 5287 :     HANDLE h;
; 5288 :     WIN32_FIND_DATA d;
; 5289 : 
; 5290 :     if (!PyArg_ParseTuple(args, "inOu#iO:fileopener", &caching_behavior,
; 5291 :                           &size, &templ, &uname, &namelen, &flags, &fileobj))

  00020	48 8d 4c 24 60	 lea	 rcx, QWORD PTR fileobj$[rsp]
  00025	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0002a	48 8d 8d 10 02
	00 00		 lea	 rcx, QWORD PTR flags$[rbp-256]
  00031	4c 8d 4c 24 58	 lea	 r9, QWORD PTR size$[rsp]
  00036	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0003b	48 8d 4c 24 68	 lea	 rcx, QWORD PTR namelen$[rsp]
  00040	4c 8d 85 18 02
	00 00		 lea	 r8, QWORD PTR caching_behavior$[rbp-256]
  00047	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0004c	48 8d 4c 24 50	 lea	 rcx, QWORD PTR uname$[rsp]
  00051	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@JHNIJJCC@inOu?$CDiO?3fileopener?$AA@
  00058	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0005d	48 8d 4c 24 70	 lea	 rcx, QWORD PTR templ$[rsp]
  00062	8b f7		 mov	 esi, edi
  00064	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00069	48 8b c8	 mov	 rcx, rax
  0006c	44 8b e7	 mov	 r12d, edi
  0006f	bb 00 00 00 40	 mov	 ebx, 1073741824		; 40000000H
  00074	44 8d 6f 01	 lea	 r13d, QWORD PTR [rdi+1]
  00078	48 89 7c 24 58	 mov	 QWORD PTR size$[rsp], rdi
  0007d	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00082	85 c0		 test	 eax, eax
  00084	75 07		 jne	 SHORT $LN40@async_file@2

; 5292 :         return NULL;

  00086	33 c0		 xor	 eax, eax
  00088	e9 2d 02 00 00	 jmp	 $LN41@async_file@2
$LN40@async_file@2:
  0008d	4c 89 b4 24 00
	03 00 00	 mov	 QWORD PTR [rsp+768], r14

; 5293 : 
; 5294 :     name = (LPCWSTR)uname;

  00095	4c 8b 74 24 50	 mov	 r14, QWORD PTR uname$[rsp]

; 5295 : 
; 5296 :     h = FindFirstFile(name, &d);

  0009a	48 8d 55 80	 lea	 rdx, QWORD PTR d$[rbp-256]
  0009e	49 8b ce	 mov	 rcx, r14
  000a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FindFirstFileW

; 5297 :     if (h && h != INVALID_HANDLE_VALUE) {

  000a7	48 85 c0	 test	 rax, rax
  000aa	74 3e		 je	 SHORT $LN39@async_file@2
  000ac	48 83 f8 ff	 cmp	 rax, -1
  000b0	74 38		 je	 SHORT $LN39@async_file@2

; 5298 :         if (!FindClose(h)) {

  000b2	48 8b c8	 mov	 rcx, rax
  000b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FindClose
  000bb	85 c0		 test	 eax, eax

; 5299 :             PyErr_SetFromWindowsErrWithUnicodeFilename(0, uname);
; 5300 :             goto done;

  000bd	0f 84 59 01 00
	00		 je	 $LN8@async_file@2

; 5301 :         }
; 5302 :     } else
; 5303 :         exists = 0;
; 5304 : 
; 5305 :     if (exists && (flags & O_EXCL)) {

  000c3	8b 85 10 02 00
	00		 mov	 eax, DWORD PTR flags$[rbp-256]
  000c9	0f ba e0 0a	 bt	 eax, 10
  000cd	73 24		 jae	 SHORT $LN43@async_file@2

; 5306 :         assert(!(flags & O_APPEND));
; 5307 :         PyErr_SetExcFromWindowsErrWithUnicodeFilename(
; 5308 :             PyExc_OSError,
; 5309 :             EEXIST,
; 5310 :             uname
; 5311 :         );

  000cf	4c 8b 44 24 50	 mov	 r8, QWORD PTR uname$[rsp]
  000d4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OSError
  000db	ba 11 00 00 00	 mov	 edx, 17
  000e0	e8 00 00 00 00	 call	 PyErr_SetExcFromWindowsErrWithUnicodeFilename

; 5312 :         goto done;

  000e5	e9 c5 01 00 00	 jmp	 $done$129503
$LN39@async_file@2:

; 5301 :         }
; 5302 :     } else
; 5303 :         exists = 0;
; 5304 : 
; 5305 :     if (exists && (flags & O_EXCL)) {

  000ea	8b 85 10 02 00
	00		 mov	 eax, DWORD PTR flags$[rbp-256]
  000f0	44 8b ef	 mov	 r13d, edi
$LN43@async_file@2:

; 5313 :     } else if (!exists && (flags & O_RDONLY)) {
; 5314 :         assert(!(flags & O_APPEND));
; 5315 :         PyErr_SetExcFromWindowsErrWithUnicodeFilename(
; 5316 :             PyExc_OSError,
; 5317 :             ENOENT,
; 5318 :             uname
; 5319 :         );
; 5320 :         goto done;
; 5321 :     }
; 5322 : 
; 5323 :     if (flags & O_RDONLY)
; 5324 :         file_flags |= FILE_ATTRIBUTE_READONLY;
; 5325 : 
; 5326 :     if (flags & (O_RDWR | O_RDONLY)) {

  000f3	8b d0		 mov	 edx, eax
  000f5	83 e2 02	 and	 edx, 2
  000f8	74 0b		 je	 SHORT $LN32@async_file@2

; 5327 :         access |= GENERIC_READ;

  000fa	be 00 00 00 80	 mov	 esi, -2147483648	; ffffffff80000000H

; 5328 :         share  |= FILE_SHARE_READ;

  000ff	41 bc 01 00 00
	00		 mov	 r12d, 1
$LN32@async_file@2:

; 5329 :     }
; 5330 : 
; 5331 :     if (flags & (O_RDWR | O_WRONLY)) {

  00105	a8 03		 test	 al, 3
  00107	74 06		 je	 SHORT $LN31@async_file@2

; 5332 :         access |= GENERIC_WRITE;

  00109	0b f3		 or	 esi, ebx

; 5333 :         share  |= FILE_SHARE_WRITE;

  0010b	41 83 cc 02	 or	 r12d, 2
$LN31@async_file@2:

; 5334 :     }
; 5335 : 
; 5336 :     if (flags & O_APPEND) {

  0010f	8b c8		 mov	 ecx, eax
  00111	83 e1 08	 and	 ecx, 8
  00114	74 07		 je	 SHORT $LN30@async_file@2

; 5337 :         access |= FILE_APPEND_DATA;

  00116	83 ce 04	 or	 esi, 4

; 5338 :         share  |= FILE_SHARE_WRITE;

  00119	41 83 cc 02	 or	 r12d, 2
$LN30@async_file@2:

; 5339 :     }
; 5340 : 
; 5341 :     /* There's not a 1:1 mapping between create flags and POSIX flags, so
; 5342 :      * the following code is a bit fiddly. */
; 5343 :     if (flags & O_RDONLY)
; 5344 :         create_flags = OPEN_EXISTING;
; 5345 : 
; 5346 :     else if (flags & O_WRONLY)

  0011d	a8 01		 test	 al, 1
  0011f	74 12		 je	 SHORT $LN27@async_file@2

; 5347 :         create_flags = (exists ? TRUNCATE_EXISTING : CREATE_ALWAYS);

  00121	ba 02 00 00 00	 mov	 edx, 2
  00126	b8 05 00 00 00	 mov	 eax, 5
  0012b	45 85 ed	 test	 r13d, r13d
  0012e	0f 45 d0	 cmovne	 edx, eax
  00131	eb 36		 jmp	 SHORT $LN19@async_file@2
$LN27@async_file@2:

; 5348 : 
; 5349 :     else if ((flags & O_RDWR) || (flags & O_APPEND))

  00133	85 d2		 test	 edx, edx
  00135	75 27		 jne	 SHORT $LN24@async_file@2
  00137	85 c9		 test	 ecx, ecx
  00139	75 23		 jne	 SHORT $LN24@async_file@2

; 5351 : 
; 5352 :     else if (flags & O_EXCL)

  0013b	0f ba e0 0a	 bt	 eax, 10
  0013f	73 05		 jae	 SHORT $LN22@async_file@2

; 5353 :         create_flags = CREATE_NEW;

  00141	8d 51 01	 lea	 edx, QWORD PTR [rcx+1]
  00144	eb 23		 jmp	 SHORT $LN19@async_file@2
$LN22@async_file@2:

; 5354 : 
; 5355 :     else if (flags & O_APPEND)
; 5356 :         create_flags = (exists ? OPEN_EXISTING : CREATE_ALWAYS);
; 5357 : 
; 5358 :     else {
; 5359 :         PyErr_SetString(PyExc_ValueError, "unexpected value for flags");

  00146	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0014d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@NMDENEGE@unexpected?5value?5for?5flags?$AA@
  00154	e8 00 00 00 00	 call	 PyErr_SetString

; 5360 :         goto done;

  00159	e9 51 01 00 00	 jmp	 $done$129503
$LN24@async_file@2:

; 5350 :         create_flags = (exists ? OPEN_EXISTING : CREATE_ALWAYS);

  0015e	45 85 ed	 test	 r13d, r13d
  00161	8b d7		 mov	 edx, edi
  00163	0f 95 c2	 setne	 dl
  00166	83 c2 02	 add	 edx, 2
$LN19@async_file@2:

; 5361 :     }
; 5362 : 
; 5363 :     switch (caching_behavior) {

  00169	4c 63 85 18 02
	00 00		 movsxd	 r8, DWORD PTR caching_behavior$[rbp-256]
  00170	41 83 f8 05	 cmp	 r8d, 5
  00174	0f 87 22 01 00
	00		 ja	 $LN10@async_file@2
  0017a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:__ImageBase
  00181	43 8b 8c 81 00
	00 00 00	 mov	 ecx, DWORD PTR $LN45@async_file@2[r9+r8*4]
  00189	49 03 c9	 add	 rcx, r9
  0018c	ff e1		 jmp	 rcx
$LN16@async_file@2:

; 5364 :         case PyAsync_CACHING_DEFAULT:
; 5365 :             file_flags |= FILE_FLAG_NO_BUFFERING;

  0018e	bb 00 00 00 60	 mov	 ebx, 1610612736		; 60000000H

; 5366 :             break;

  00193	eb 1a		 jmp	 SHORT $LN17@async_file@2
$LN14@async_file@2:

; 5367 : 
; 5368 :         case PyAsync_CACHING_BUFFERED:
; 5369 :             break;
; 5370 : 
; 5371 :         case PyAsync_CACHING_RANDOMACCESS:
; 5372 :             file_flags |= FILE_FLAG_RANDOM_ACCESS;

  00195	bb 00 00 00 50	 mov	 ebx, 1342177280		; 50000000H

; 5373 :             break;

  0019a	eb 13		 jmp	 SHORT $LN17@async_file@2
$LN13@async_file@2:

; 5374 : 
; 5375 :         case PyAsync_CACHING_SEQUENTIALSCAN:
; 5376 :             file_flags |= FILE_FLAG_SEQUENTIAL_SCAN;

  0019c	bb 00 00 00 48	 mov	 ebx, 1207959552		; 48000000H

; 5377 :             break;

  001a1	eb 0c		 jmp	 SHORT $LN17@async_file@2
$LN12@async_file@2:

; 5378 : 
; 5379 :         case PyAsync_CACHING_WRITETHROUGH:
; 5380 :             file_flags |= FILE_FLAG_WRITE_THROUGH;

  001a3	bb 00 00 00 c0	 mov	 ebx, -1073741824	; ffffffffc0000000H

; 5381 :             break;

  001a8	eb 05		 jmp	 SHORT $LN17@async_file@2
$LN11@async_file@2:

; 5382 : 
; 5383 :         case PyAsync_CACHING_TEMPORARY:
; 5384 :             file_flags |= FILE_ATTRIBUTE_TEMPORARY;

  001aa	bb 00 01 00 40	 mov	 ebx, 1073742080		; 40000100H
$LN17@async_file@2:

; 5391 :             goto done;
; 5392 :     }
; 5393 : 
; 5394 :     h = CreateFile(name, access, share, 0, create_flags, file_flags, 0);

  001af	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  001b4	89 5c 24 28	 mov	 DWORD PTR [rsp+40], ebx
  001b8	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  001bc	8b d6		 mov	 edx, esi
  001be	45 33 c9	 xor	 r9d, r9d
  001c1	45 8b c4	 mov	 r8d, r12d
  001c4	49 8b ce	 mov	 rcx, r14
  001c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateFileW
  001cd	48 8b d8	 mov	 rbx, rax

; 5395 :     if (!h || h == INVALID_HANDLE_VALUE) {

  001d0	48 85 c0	 test	 rax, rax
  001d3	74 47		 je	 SHORT $LN8@async_file@2
  001d5	48 83 f8 ff	 cmp	 rax, -1
  001d9	74 41		 je	 SHORT $LN8@async_file@2

; 5396 :         PyErr_SetFromWindowsErrWithUnicodeFilename(0, uname);
; 5397 :         goto done;
; 5398 :     } else if (size > 0) {

  001db	48 8b 54 24 58	 mov	 rdx, QWORD PTR size$[rsp]
  001e0	48 85 d2	 test	 rdx, rdx
  001e3	7e 48		 jle	 SHORT $LN4@async_file@2

; 5399 :         LARGE_INTEGER i;
; 5400 :         i.QuadPart = Px_PAGE_ALIGN(size);

  001e5	48 81 c2 ff 0f
	00 00		 add	 rdx, 4095		; 00000fffH

; 5401 :         if (!SetFilePointerEx(h, i, NULL, FILE_BEGIN)) {

  001ec	45 33 c9	 xor	 r9d, r9d
  001ef	45 33 c0	 xor	 r8d, r8d
  001f2	48 81 e2 00 f0
	ff ff		 and	 rdx, -4096		; fffffffffffff000H
  001f9	48 8b c8	 mov	 rcx, rax
  001fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetFilePointerEx

; 5402 :             CloseHandle(h);

  00202	48 8b cb	 mov	 rcx, rbx
  00205	85 c0		 test	 eax, eax

; 5403 :             PyErr_SetFromWindowsErrWithUnicodeFilename(0, uname);
; 5404 :             goto done;

  00207	74 0d		 je	 SHORT $LN46@async_file@2

; 5405 :         }
; 5406 :         if (!SetEndOfFile(h)) {

  00209	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetEndOfFile
  0020f	85 c0		 test	 eax, eax
  00211	75 1a		 jne	 SHORT $LN4@async_file@2

; 5407 :             CloseHandle(h);

  00213	48 8b cb	 mov	 rcx, rbx
$LN46@async_file@2:
  00216	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle
$LN8@async_file@2:

; 5408 :             PyErr_SetFromWindowsErrWithUnicodeFilename(0, uname);

  0021c	48 8b 54 24 50	 mov	 rdx, QWORD PTR uname$[rsp]
  00221	33 c9		 xor	 ecx, ecx
  00223	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErrWithUnicodeFilename

; 5409 :             goto done;

  00228	e9 82 00 00 00	 jmp	 $done$129503
$LN4@async_file@2:

; 5410 :         }
; 5411 :     }
; 5412 : 
; 5413 :     notif_flags = (
; 5414 :         FILE_SKIP_COMPLETION_PORT_ON_SUCCESS |
; 5415 :         FILE_SKIP_SET_EVENT_ON_HANDLE
; 5416 :     );
; 5417 :     if (!SetFileCompletionNotificationModes(h, notif_flags)) {

  0022d	b2 03		 mov	 dl, 3
  0022f	48 8b cb	 mov	 rcx, rbx
  00232	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetFileCompletionNotificationModes
  00238	85 c0		 test	 eax, eax
  0023a	75 15		 jne	 SHORT $LN3@async_file@2

; 5418 :         CloseHandle(h);

  0023c	48 8b cb	 mov	 rcx, rbx
  0023f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 5419 :         PyErr_SetFromWindowsErrWithUnicodeFilename(0, uname);

  00245	48 8b 54 24 50	 mov	 rdx, QWORD PTR uname$[rsp]
  0024a	33 c9		 xor	 ecx, ecx
  0024c	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErrWithUnicodeFilename
$LN3@async_file@2:

; 5420 :     }
; 5421 : 
; 5422 :     if (!_protect(fileobj))

  00251	48 8b 4c 24 60	 mov	 rcx, QWORD PTR fileobj$[rsp]
  00256	e8 00 00 00 00	 call	 _protect
  0025b	48 85 c0	 test	 rax, rax
  0025e	74 4f		 je	 SHORT $done$129503

; 5423 :         goto done;
; 5424 : 
; 5425 :     f = (fileio *)fileobj;

  00260	48 8b 4c 24 60	 mov	 rcx, QWORD PTR fileobj$[rsp]

; 5426 :     f->h = h;

  00265	48 89 99 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rbx

; 5427 :     f->native = 1;

  0026c	48 c7 81 9c 00
	00 00 01 00 00
	00		 mov	 QWORD PTR [rcx+156], 1

; 5428 :     f->istty = 0;
; 5429 :     f->name = uname;

  00277	48 8b 44 24 50	 mov	 rax, QWORD PTR uname$[rsp]
  0027c	48 89 81 88 00
	00 00		 mov	 QWORD PTR [rcx+136], rax

; 5430 :     f->caching = caching_behavior;

  00283	8b 85 18 02 00
	00		 mov	 eax, DWORD PTR caching_behavior$[rbp-256]
  00289	89 81 98 00 00
	00		 mov	 DWORD PTR [rcx+152], eax

; 5431 : 
; 5432 :     result = PyLong_FromVoidPtr(h);

  0028f	48 8b cb	 mov	 rcx, rbx
  00292	e8 00 00 00 00	 call	 PyLong_FromVoidPtr
  00297	48 8b f8	 mov	 rdi, rax
  0029a	eb 13		 jmp	 SHORT $done$129503
$LN10@async_file@2:

; 5385 :             break;
; 5386 : 
; 5387 :         default:
; 5388 :             PyErr_Format(PyExc_ValueError,
; 5389 :                          "invalid caching behavior: %d",
; 5390 :                          caching_behavior);

  0029c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  002a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@DOPCBCGK@invalid?5caching?5behavior?3?5?$CFd?$AA@
  002aa	e8 00 00 00 00	 call	 PyErr_Format
$done$129503:

; 5433 : done:
; 5434 :     if (!result)
; 5435 :         assert(PyErr_Occurred());
; 5436 : 
; 5437 :     return result;

  002af	4c 8b b4 24 00
	03 00 00	 mov	 r14, QWORD PTR [rsp+768]
  002b7	48 8b c7	 mov	 rax, rdi
$LN41@async_file@2:

; 5438 : }

  002ba	48 8b 9c 24 08
	03 00 00	 mov	 rbx, QWORD PTR [rsp+776]
  002c2	48 81 c4 d0 02
	00 00		 add	 rsp, 720		; 000002d0H
  002c9	41 5d		 pop	 r13
  002cb	41 5c		 pop	 r12
  002cd	5f		 pop	 rdi
  002ce	5e		 pop	 rsi
  002cf	5d		 pop	 rbp
  002d0	c3		 ret	 0
  002d1	0f 1f 00	 npad	 3
$LN45@async_file@2:
  002d4	00 00 00 00	 DD	 $LN16@async_file@2
  002d8	00 00 00 00	 DD	 $LN17@async_file@2
  002dc	00 00 00 00	 DD	 $LN14@async_file@2
  002e0	00 00 00 00	 DD	 $LN13@async_file@2
  002e4	00 00 00 00	 DD	 $LN12@async_file@2
  002e8	00 00 00 00	 DD	 $LN11@async_file@2
_async_fileopener ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@JMPLGHEN@non?9zero?5size?5invalid?5for?5read?9o@ ; `string'
PUBLIC	??_C@_04MLLOGHAL@Onii?$AA@			; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_async__post_open DD imagerel $LN11
	DD	imagerel $LN11+205
	DD	imagerel $unwind$_async__post_open
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async__post_open DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_0CK@JMPLGHEN@non?9zero?5size?5invalid?5for?5read?9o@
CONST	SEGMENT
??_C@_0CK@JMPLGHEN@non?9zero?5size?5invalid?5for?5read?9o@ DB 'non-zero s'
	DB	'ize invalid for read-only files', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04MLLOGHAL@Onii?$AA@
CONST	SEGMENT
??_C@_04MLLOGHAL@Onii?$AA@ DB 'Onii', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
CONST	ENDS
;	COMDAT _async__post_open
_TEXT	SEGMENT
size$ = 48
o$ = 56
self$ = 80
args$ = 88
caching$ = 96
is_write$ = 104
_async__post_open PROC					; COMDAT

; 5442 : {

$LN11:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00004	48 8b c2	 mov	 rax, rdx

; 5443 :     fileio     *f;
; 5444 :     PyObject   *o;
; 5445 :     Py_ssize_t  size;
; 5446 :     int         caching;
; 5447 :     int         is_write;
; 5448 : 
; 5449 :     if (!PyArg_ParseTuple(args, "Onii", &o, &caching, &size, &is_write))

  00007	48 8d 4c 24 68	 lea	 rcx, QWORD PTR is_write$[rsp]
  0000c	4c 8d 4c 24 60	 lea	 r9, QWORD PTR caching$[rsp]
  00011	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00016	48 8d 4c 24 30	 lea	 rcx, QWORD PTR size$[rsp]
  0001b	4c 8d 44 24 38	 lea	 r8, QWORD PTR o$[rsp]
  00020	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04MLLOGHAL@Onii?$AA@
  0002c	48 8b c8	 mov	 rcx, rax
  0002f	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00034	85 c0		 test	 eax, eax

; 5450 :         return NULL;

  00036	74 3d		 je	 SHORT $LN10@async__pos

; 5451 : 
; 5452 :     f = (fileio *)o;
; 5453 :     f->size = size;

  00038	48 8b 44 24 30	 mov	 rax, QWORD PTR size$[rsp]
  0003d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR o$[rsp]
  00042	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax

; 5454 :     f->caching = caching;

  00049	8b 44 24 60	 mov	 eax, DWORD PTR caching$[rsp]
  0004d	89 81 98 00 00
	00		 mov	 DWORD PTR [rcx+152], eax

; 5455 : 
; 5456 :     if (is_write)
; 5457 :         assert(f->writable);
; 5458 : 
; 5459 :     if (size > 0 && !is_write) {

  00053	48 83 7c 24 30
	00		 cmp	 QWORD PTR size$[rsp], 0
  00059	7e 21		 jle	 SHORT $LN1@async__pos
  0005b	83 7c 24 68 00	 cmp	 DWORD PTR is_write$[rsp], 0
  00060	75 1a		 jne	 SHORT $LN1@async__pos

; 5460 :         PyErr_SetString(PyExc_ValueError,
; 5461 :                         "non-zero size invalid for read-only files");

  00062	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00069	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@JMPLGHEN@non?9zero?5size?5invalid?5for?5read?9o@
  00070	e8 00 00 00 00	 call	 PyErr_SetString
$LN10@async__pos:

; 5462 :             return NULL;

  00075	33 c0		 xor	 eax, eax

; 5466 : }

  00077	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0007b	c3		 ret	 0
$LN1@async__pos:

; 5463 :     }
; 5464 : 
; 5465 :     Py_RETURN_NONE;

  0007c	e8 00 00 00 00	 call	 _Py_PXCTX
  00081	85 c0		 test	 eax, eax
  00083	75 3c		 jne	 SHORT $LN7@async__pos
  00085	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  0008c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00093	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0009a	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000a0	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000a8	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ad	85 c0		 test	 eax, eax
  000af	75 09		 jne	 SHORT $LN6@async__pos
  000b1	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  000b8	74 07		 je	 SHORT $LN7@async__pos
$LN6@async__pos:
  000ba	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN7@async__pos:
  000c1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 5466 : }

  000c8	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000cc	c3		 ret	 0
_async__post_open ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_async__address DD imagerel $LN7
	DD	imagerel $LN7+81
	DD	imagerel $unwind$_async__address
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async__address DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT _async__address
_TEXT	SEGMENT
self$ = 64
o$ = 72
_async__address PROC					; COMDAT

; 5470 : {

$LN7:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b da	 mov	 rbx, rdx

; 5471 :     Py_INCREF(o);

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN4@async__add
  00012	4c 8b ca	 mov	 r9, rdx
  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN3@async__add
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN4@async__add
$LN3@async__add:
  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN4@async__add:

; 5472 :     return PyLong_FromVoidPtr(o);

  00044	48 8b cb	 mov	 rcx, rbx

; 5473 : }

  00047	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0004b	5b		 pop	 rbx
  0004c	e9 00 00 00 00	 jmp	 PyLong_FromVoidPtr
_async__address ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@CGFJPNND@address?3?50x?$CFx?0?5refcnt?3?5?$CFd?6?$AA@ ; `string'
EXTRN	PyLong_AsVoidPtr:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_async__dbg_address DD imagerel $LN14
	DD	imagerel $LN14+189
	DD	imagerel $unwind$_async__dbg_address
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async__dbg_address DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0BL@CGFJPNND@address?3?50x?$CFx?0?5refcnt?3?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BL@CGFJPNND@address?3?50x?$CFx?0?5refcnt?3?5?$CFd?6?$AA@ DB 'addre'
	DB	'ss: 0x%x, refcnt: %d', 0aH, 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
CONST	ENDS
;	COMDAT _async__dbg_address
_TEXT	SEGMENT
self$ = 64
addr$ = 72
_async__dbg_address PROC				; COMDAT

; 5477 : {

$LN14:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b da	 mov	 rbx, rdx

; 5478 :     PyObject *o;
; 5479 :     Py_INCREF(addr);

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN4@async__dbg
  00012	4c 8b ca	 mov	 r9, rdx
  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN3@async__dbg
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN4@async__dbg
$LN3@async__dbg:
  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN4@async__dbg:

; 5480 :     o = (PyObject *)PyLong_AsVoidPtr(addr);

  00044	48 8b cb	 mov	 rcx, rbx
  00047	e8 00 00 00 00	 call	 PyLong_AsVoidPtr

; 5481 :     PySys_FormatStdout("address: 0x%x, refcnt: %d\n", o, Py_REFCNT(o));

  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@CGFJPNND@address?3?50x?$CFx?0?5refcnt?3?5?$CFd?6?$AA@
  00053	4c 8b 40 50	 mov	 r8, QWORD PTR [rax+80]
  00057	48 8b d0	 mov	 rdx, rax
  0005a	e8 00 00 00 00	 call	 PySys_FormatStdout

; 5482 :     Py_RETURN_NONE;

  0005f	e8 00 00 00 00	 call	 _Py_PXCTX
  00064	85 c0		 test	 eax, eax
  00066	75 48		 jne	 SHORT $LN11@async__dbg
  00068	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0006f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00076	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0007d	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00083	4c 8b cb	 mov	 r9, rbx
  00086	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0008e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00093	85 c0		 test	 eax, eax
  00095	75 09		 jne	 SHORT $LN7@async__dbg
  00097	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0009e	74 07		 je	 SHORT $LN13@async__dbg
$LN7@async__dbg:
  000a0	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN13@async__dbg:
  000a7	48 8b c3	 mov	 rax, rbx

; 5483 : }

  000aa	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ae	5b		 pop	 rbx
  000af	c3		 ret	 0
$LN11@async__dbg:

; 5482 :     Py_RETURN_NONE;

  000b0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 5483 : }

  000b7	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000bb	5b		 pop	 rbx
  000bc	c3		 ret	 0
_async__dbg_address ENDP
_TEXT	ENDS
PUBLIC	??_C@_05FPALGIFH@_wrap?$AA@			; `string'
PUBLIC	_wrap
;	COMDAT pdata
pdata	SEGMENT
$pdata$_wrap DD	imagerel $LN9
	DD	imagerel $LN9+177
	DD	imagerel $unwind$_wrap
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_wrap DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_05FPALGIFH@_wrap?$AA@
CONST	SEGMENT
??_C@_05FPALGIFH@_wrap?$AA@ DB '_wrap', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _wrap
_TEXT	SEGMENT
tp$ = 48
args$ = 56
kwds$ = 64
_wrap	PROC						; COMDAT

; 5490 : {

$LN9:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	49 8b f0	 mov	 rsi, r8
  00017	48 8b da	 mov	 rbx, rdx
  0001a	48 8b e9	 mov	 rbp, rcx

; 5491 :     PyObject *self;
; 5492 :     Py_GUARD

  0001d	e8 00 00 00 00	 call	 _Py_PXCTX
  00022	85 c0		 test	 eax, eax
  00024	74 1c		 je	 SHORT $LN4@wrap
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05FPALGIFH@_wrap?$AA@
  00034	45 33 c9	 xor	 r9d, r9d
  00037	41 b8 74 15 00
	00		 mov	 r8d, 5492		; 00001574H
  0003d	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN4@wrap:

; 5493 :     if (!(self = _protect(tp->tp_new(tp, args, kwds))))

  00042	4c 8b c6	 mov	 r8, rsi
  00045	48 8b d3	 mov	 rdx, rbx
  00048	48 8b cd	 mov	 rcx, rbp
  0004b	ff 95 90 01 00
	00		 call	 QWORD PTR [rbp+400]
  00051	48 8b c8	 mov	 rcx, rax
  00054	e8 00 00 00 00	 call	 _protect
  00059	48 8b f8	 mov	 rdi, rax
  0005c	48 85 c0	 test	 rax, rax

; 5494 :         return NULL;

  0005f	74 34		 je	 SHORT $LN8@wrap

; 5495 : 
; 5496 :     if (kwds && !args)

  00061	48 85 f6	 test	 rsi, rsi
  00064	74 0f		 je	 SHORT $LN2@wrap
  00066	48 85 db	 test	 rbx, rbx
  00069	75 0f		 jne	 SHORT $LN7@wrap

; 5497 :         args = PyTuple_New(0);

  0006b	33 c9		 xor	 ecx, ecx
  0006d	e8 00 00 00 00	 call	 PyTuple_New
  00072	48 8b d8	 mov	 rbx, rax
$LN2@wrap:

; 5498 : 
; 5499 :     if (args && tp->tp_init(self, args, kwds)) {

  00075	48 85 db	 test	 rbx, rbx
  00078	74 1f		 je	 SHORT $LN1@wrap
$LN7@wrap:
  0007a	4c 8b c6	 mov	 r8, rsi
  0007d	48 8b d3	 mov	 rdx, rbx
  00080	48 8b cf	 mov	 rcx, rdi
  00083	ff 95 80 01 00
	00		 call	 QWORD PTR [rbp+384]
  00089	85 c0		 test	 eax, eax
  0008b	74 0c		 je	 SHORT $LN1@wrap

; 5500 :         Py_DECREF(self);

  0008d	48 8b cf	 mov	 rcx, rdi
  00090	e8 00 00 00 00	 call	 _Py_DecRef
$LN8@wrap:

; 5501 :         return NULL;

  00095	33 c0		 xor	 eax, eax
  00097	eb 03		 jmp	 SHORT $LN5@wrap
$LN1@wrap:

; 5502 :     }
; 5503 : 
; 5504 :     return self;

  00099	48 8b c7	 mov	 rax, rdi
$LN5@wrap:

; 5505 : }

  0009c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a1	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000a6	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000ab	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000af	5f		 pop	 rdi
  000b0	c3		 ret	 0
_wrap	ENDP
_TEXT	ENDS
EXTRN	PyList_Type:BYTE
; Function compile flags: /Ogtpy
;	COMDAT _async_list
_TEXT	SEGMENT
self$ = 8
args$ = 16
kwds$ = 24
_async_list PROC					; COMDAT

; 5516 : _ASYNC_WRAP(list, PyList_Type)

  00000	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyList_Type
  00007	e9 00 00 00 00	 jmp	 _wrap
_async_list ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _async_dict
_TEXT	SEGMENT
self$ = 8
args$ = 16
kwds$ = 24
_async_dict PROC					; COMDAT

; 5517 : _ASYNC_WRAP(dict, PyDict_Type)

  00000	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyDict_Type
  00007	e9 00 00 00 00	 jmp	 _wrap
_async_dict ENDP
_TEXT	ENDS
PUBLIC	??_C@_05DJGLEMPL@?$CIOsO?$CJ?$AA@		; `string'
PUBLIC	PxSocket_HandleException
EXTRN	__imp_closesocket:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel_private.h
pdata	SEGMENT
$pdata$PxSocket_HandleException DD imagerel $LN13
	DD	imagerel $LN13+322
	DD	imagerel $unwind$PxSocket_HandleException
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocket_HandleException DD 0c1c01H
	DD	0c641cH
	DD	0b541cH
	DD	0a341cH
	DD	0f018321cH
	DD	0d014e016H
	DD	07010c012H
xdata	ENDS
;	COMDAT ??_C@_05DJGLEMPL@?$CIOsO?$CJ?$AA@
CONST	SEGMENT
??_C@_05DJGLEMPL@?$CIOsO?$CJ?$AA@ DB '(OsO)', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
CONST	ENDS
;	COMDAT PxSocket_HandleException
_TEXT	SEGMENT
c$ = 80
syscall$ = 88
fatal$ = 96
PxSocket_HandleException PROC				; COMDAT

; 7004 : {

$LN13:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	41 56		 push	 r14
  00016	41 57		 push	 r15
  00018	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 7005 :     PxSocket *s = (PxSocket *)c->io_obj;

  0001c	48 8b b1 a8 32
	00 00		 mov	 rsi, QWORD PTR [rcx+12968]

; 7006 :     PyObject *exc, *args, *func, *result;
; 7007 :     PxState *px;
; 7008 :     PyThreadState *pstate;
; 7009 :     PxListItem *item;
; 7010 :     PxListHead *list;
; 7011 : 
; 7012 :     assert(PyErr_Occurred());
; 7013 : 
; 7014 :     pstate = c->pstate;

  00023	48 8b a9 e8 00
	00 00		 mov	 rbp, QWORD PTR [rcx+232]

; 7015 :     px = c->px;

  0002a	4c 8b a9 d8 00
	00 00		 mov	 r13, QWORD PTR [rcx+216]
  00031	45 8b e0	 mov	 r12d, r8d
  00034	4c 8b fa	 mov	 r15, rdx
  00037	48 8b f9	 mov	 rdi, rcx

; 7016 : 
; 7017 :     if (fatal)

  0003a	45 85 c0	 test	 r8d, r8d
  0003d	75 77		 jne	 SHORT $error$130525

; 7018 :         goto error;
; 7019 : 
; 7020 :     READ_LOCK(s);

  0003f	48 8d 4e 28	 lea	 rcx, QWORD PTR [rsi+40]
  00043	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AcquireSRWLockShared

; 7021 :     func = s->exception_handler;

  00049	4c 8b b6 e8 02
	00 00		 mov	 r14, QWORD PTR [rsi+744]

; 7022 :     READ_UNLOCK(s);

  00050	48 8d 4e 28	 lea	 rcx, QWORD PTR [rsi+40]
  00054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseSRWLockShared

; 7023 : 
; 7024 :     if (!func)

  0005a	4d 85 f6	 test	 r14, r14
  0005d	74 57		 je	 SHORT $error$130525

; 7025 :         goto error;
; 7026 : 
; 7027 :     exc = PyTuple_Pack(3, pstate->curexc_type,
; 7028 :                           pstate->curexc_value,
; 7029 :                           pstate->curexc_traceback);

  0005f	4c 8b 4d 58	 mov	 r9, QWORD PTR [rbp+88]
  00063	4c 8b 45 50	 mov	 r8, QWORD PTR [rbp+80]
  00067	48 8b 55 48	 mov	 rdx, QWORD PTR [rbp+72]
  0006b	41 8d 4c 24 03	 lea	 ecx, QWORD PTR [r12+3]
  00070	e8 00 00 00 00	 call	 PyTuple_Pack
  00075	48 8b d8	 mov	 rbx, rax

; 7030 :     if (!exc)

  00078	48 85 c0	 test	 rax, rax
  0007b	74 39		 je	 SHORT $error$130525

; 7031 :         goto error;
; 7032 : 
; 7033 :     PyErr_Clear();

  0007d	e8 00 00 00 00	 call	 PyErr_Clear

; 7034 :     args = Py_BuildValue("(OsO)", s, syscall, exc);

  00082	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05DJGLEMPL@?$CIOsO?$CJ?$AA@
  00089	4c 8b cb	 mov	 r9, rbx
  0008c	4d 8b c7	 mov	 r8, r15
  0008f	48 8b d6	 mov	 rdx, rsi
  00092	e8 00 00 00 00	 call	 Py_BuildValue

; 7035 :     if (!args)

  00097	48 85 c0	 test	 rax, rax
  0009a	74 1a		 je	 SHORT $error$130525

; 7036 :         goto error;
; 7037 : 
; 7038 :     result = PyObject_CallObject(func, args);

  0009c	48 8b d0	 mov	 rdx, rax
  0009f	49 8b ce	 mov	 rcx, r14
  000a2	e8 00 00 00 00	 call	 PyObject_CallObject

; 7039 :     if (null_with_exc_or_non_none_return_type(result, pstate))

  000a7	48 8b d5	 mov	 rdx, rbp
  000aa	48 8b c8	 mov	 rcx, rax
  000ad	e8 00 00 00 00	 call	 null_with_exc_or_non_none_return_type
  000b2	85 c0		 test	 eax, eax
  000b4	74 6f		 je	 SHORT $end$130534
$error$130525:

; 7040 :         goto error;
; 7041 : 
; 7042 :     assert(!pstate->curexc_type);
; 7043 : 
; 7044 :     /* XXX TODO: ratify possible socket states. */
; 7045 :     goto end;
; 7046 : 
; 7047 :     list = px->completed_errbacks;
; 7048 :     item = c->errback_completed;
; 7049 :     goto done;
; 7050 : 
; 7051 : error:
; 7052 :     assert(pstate->curexc_type);
; 7053 :     list = px->errors;
; 7054 :     item = c->error;
; 7055 :     item->p1 = pstate->curexc_type;

  000b6	48 8b 45 48	 mov	 rax, QWORD PTR [rbp+72]
  000ba	48 8b 9f 28 33
	00 00		 mov	 rbx, QWORD PTR [rdi+13096]
  000c1	4d 8b 75 08	 mov	 r14, QWORD PTR [r13+8]
  000c5	48 89 43 20	 mov	 QWORD PTR [rbx+32], rax

; 7056 :     item->p2 = pstate->curexc_value;

  000c9	48 8b 45 50	 mov	 rax, QWORD PTR [rbp+80]
  000cd	48 89 43 28	 mov	 QWORD PTR [rbx+40], rax

; 7057 :     item->p3 = pstate->curexc_traceback;

  000d1	48 8b 45 58	 mov	 rax, QWORD PTR [rbp+88]
  000d5	48 89 43 30	 mov	 QWORD PTR [rbx+48], rax

; 7058 : 
; 7059 :     if (fatal && s->sock_fd != -1) {

  000d9	45 85 e4	 test	 r12d, r12d
  000dc	74 18		 je	 SHORT $done$130535
  000de	48 8b 4e 60	 mov	 rcx, QWORD PTR [rsi+96]
  000e2	48 83 f9 ff	 cmp	 rcx, -1
  000e6	74 0e		 je	 SHORT $done$130535

; 7060 :         /* xxx todo: close threadpool io here or in context cleanup? */
; 7061 :         closesocket(s->sock_fd);

  000e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_closesocket

; 7062 :         s->sock_fd = -1;

  000ee	48 c7 46 60 ff
	ff ff ff	 mov	 QWORD PTR [rsi+96], -1
$done$130535:

; 7063 :     }
; 7064 : 
; 7065 : done:
; 7066 :     InterlockedExchange(&(c->done), 1);

  000f6	b8 01 00 00 00	 mov	 eax, 1

; 7067 :     item->from = c;
; 7068 :     PxList_TimestampItem(item);

  000fb	48 8b cb	 mov	 rcx, rbx
  000fe	87 87 04 38 00
	00		 xchg	 DWORD PTR [rdi+14340], eax
  00104	48 89 7b 18	 mov	 QWORD PTR [rbx+24], rdi
  00108	e8 00 00 00 00	 call	 PxList_TimestampItem

; 7069 :     PxList_Push(list, item);

  0010d	48 8b d3	 mov	 rdx, rbx
  00110	49 8b ce	 mov	 rcx, r14
  00113	e8 00 00 00 00	 call	 PxList_Push

; 7070 :     SetEvent(px->wakeup);

  00118	49 8b 8d a0 00
	00 00		 mov	 rcx, QWORD PTR [r13+160]
  0011f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetEvent
$end$130534:

; 7071 : end:
; 7072 :     return;
; 7073 : }

  00125	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0012a	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  0012f	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  00134	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00138	41 5f		 pop	 r15
  0013a	41 5e		 pop	 r14
  0013c	41 5d		 pop	 r13
  0013e	41 5c		 pop	 r12
  00140	5f		 pop	 rdi
  00141	c3		 ret	 0
PxSocket_HandleException ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@EMBPJMKP@unclosed?5?$CFR?$AA@		; `string'
EXTRN	PyErr_WriteUnraisable:PROC
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_Warning:QWORD
EXTRN	PyErr_WarnFormat:PROC
EXTRN	PyExc_ResourceWarning:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$pxsocket_dealloc DD imagerel $LN11
	DD	imagerel $LN11+20
	DD	imagerel $unwind$pxsocket_dealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$pxsocket_dealloc DD imagerel $LN11+20
	DD	imagerel $LN11+202
	DD	imagerel $chain$0$pxsocket_dealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$pxsocket_dealloc DD imagerel $LN11+202
	DD	imagerel $LN11+239
	DD	imagerel $chain$1$pxsocket_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$pxsocket_dealloc DD 021H
	DD	imagerel $LN11
	DD	imagerel $LN11+20
	DD	imagerel $unwind$pxsocket_dealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$pxsocket_dealloc DD 020521H
	DD	0b7405H
	DD	imagerel $LN11
	DD	imagerel $LN11+20
	DD	imagerel $unwind$pxsocket_dealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$pxsocket_dealloc DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0M@EMBPJMKP@unclosed?5?$CFR?$AA@
CONST	SEGMENT
??_C@_0M@EMBPJMKP@unclosed?5?$CFR?$AA@ DB 'unclosed %R', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
CONST	ENDS
;	COMDAT pxsocket_dealloc
_TEXT	SEGMENT
tb$130627 = 64
s$ = 64
val$130626 = 72
exc$130625 = 80
pxsocket_dealloc PROC					; COMDAT

; 7198 : {

$LN11:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 7199 :     if (s->sock_fd != -1) {

  00006	48 83 79 60 ff	 cmp	 QWORD PTR [rcx+96], -1
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	0f 84 b6 00 00
	00		 je	 $LN4@pxsocket_d

; 7200 :         PyObject *exc, *val, *tb;
; 7201 :         Py_ssize_t old_refcount = Py_REFCNT(s);

  00014	48 89 7c 24 58	 mov	 QWORD PTR [rsp+88], rdi
  00019	48 8b 79 50	 mov	 rdi, QWORD PTR [rcx+80]

; 7202 :         /* ++Py_REFCNT(self); */
; 7203 :         Py_INCREF(s);

  0001d	e8 00 00 00 00	 call	 _Py_PXCTX
  00022	85 c0		 test	 eax, eax
  00024	75 32		 jne	 SHORT $LN8@pxsocket_d
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00034	4c 8b cb	 mov	 r9, rbx
  00037	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0003d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00045	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004a	85 c0		 test	 eax, eax
  0004c	75 06		 jne	 SHORT $LN7@pxsocket_d
  0004e	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00052	74 04		 je	 SHORT $LN8@pxsocket_d
$LN7@pxsocket_d:
  00054	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN8@pxsocket_d:

; 7204 :         PyErr_Fetch(&exc, &val, &tb);

  00058	4c 8d 44 24 40	 lea	 r8, QWORD PTR tb$130627[rsp]
  0005d	48 8d 54 24 48	 lea	 rdx, QWORD PTR val$130626[rsp]
  00062	48 8d 4c 24 50	 lea	 rcx, QWORD PTR exc$130625[rsp]
  00067	e8 00 00 00 00	 call	 PyErr_Fetch

; 7205 :         if (PyErr_WarnFormat(PyExc_ResourceWarning, 1,
; 7206 :                              "unclosed %R", s))

  0006c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ResourceWarning
  00073	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@EMBPJMKP@unclosed?5?$CFR?$AA@
  0007a	4c 8b cb	 mov	 r9, rbx
  0007d	ba 01 00 00 00	 mov	 edx, 1
  00082	e8 00 00 00 00	 call	 PyErr_WarnFormat
  00087	85 c0		 test	 eax, eax
  00089	74 18		 je	 SHORT $LN2@pxsocket_d

; 7207 :             /* Spurious errors can appear at shutdown */
; 7208 :             if (PyErr_ExceptionMatches(PyExc_Warning))

  0008b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_Warning
  00092	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00097	85 c0		 test	 eax, eax
  00099	74 08		 je	 SHORT $LN2@pxsocket_d

; 7209 :                 PyErr_WriteUnraisable((PyObject *) s);

  0009b	48 8b cb	 mov	 rcx, rbx
  0009e	e8 00 00 00 00	 call	 PyErr_WriteUnraisable
$LN2@pxsocket_d:

; 7210 :         PyErr_Restore(exc, val, tb);

  000a3	4c 8b 44 24 40	 mov	 r8, QWORD PTR tb$130627[rsp]
  000a8	48 8b 54 24 48	 mov	 rdx, QWORD PTR val$130626[rsp]
  000ad	48 8b 4c 24 50	 mov	 rcx, QWORD PTR exc$130625[rsp]
  000b2	e8 00 00 00 00	 call	 PyErr_Restore

; 7211 :         closesocket(s->sock_fd);

  000b7	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  000bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_closesocket

; 7212 :         Py_REFCNT(s) = old_refcount;

  000c1	48 89 7b 50	 mov	 QWORD PTR [rbx+80], rdi
  000c5	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
$LN4@pxsocket_d:

; 7213 :     }
; 7214 :     if (s->ip)

  000ca	48 8d 8b 14 02
	00 00		 lea	 rcx, QWORD PTR [rbx+532]
  000d1	48 85 c9	 test	 rcx, rcx
  000d4	74 06		 je	 SHORT $LN1@pxsocket_d

; 7215 :         free(s->ip);

  000d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN1@pxsocket_d:

; 7216 : 
; 7217 :     Py_TYPE(s)->tp_free((PyObject *)s);

  000dc	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000e0	48 8b cb	 mov	 rcx, rbx

; 7218 : }

  000e3	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000e7	5b		 pop	 rbx
  000e8	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
pxsocket_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@JNEAFDJK@socket?3?5port?5must?5be?50?965535?$AA@ ; `string'
PUBLIC	??_C@_0BF@GFODGHCG@invalid?5IPv4?5address?$AA@	; `string'
PUBLIC	??_C@_0O@DMHOKMA@?$CFd?4?$CFd?4?$CFd?4?$CFd?$CFc?$AA@ ; `string'
PUBLIC	??_C@_0BO@OKJHCGDP@sock?5type?5must?5be?5SOCK_STREAM?$AA@ ; `string'
PUBLIC	??_C@_0BH@EPDBMOIG@family?5must?5be?5AF_INET?$AA@ ; `string'
PUBLIC	??_C@_0CM@EKHACCDG@sockets?5cannot?5be?5created?5in?5asy@ ; `string'
PUBLIC	??_C@_0BP@GMPLKPIL@not?5in?5an?5async?5socket?5context?$AA@ ; `string'
PUBLIC	??_C@_0BP@PFGPPML@client?1server?5context?5mismatch?$AA@ ; `string'
PUBLIC	create_pxsocket
EXTRN	__imp_ioctlsocket:PROC
EXTRN	PyExc_OverflowError:QWORD
EXTRN	__imp_socket:PROC
EXTRN	__imp_htons:PROC
EXTRN	__imp_htonl:PROC
EXTRN	__imp_strncpy:PROC
EXTRN	__imp_sscanf:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
_BSS	SEGMENT
PySocketModule DB 088H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$create_pxsocket DD imagerel $LN48
	DD	imagerel $LN48+302
	DD	imagerel $unwind$create_pxsocket
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$create_pxsocket DD imagerel $LN48+302
	DD	imagerel $LN48+327
	DD	imagerel $chain$0$create_pxsocket
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$create_pxsocket DD imagerel $LN48+327
	DD	imagerel $LN48+433
	DD	imagerel $chain$2$create_pxsocket
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$create_pxsocket DD imagerel $LN48+433
	DD	imagerel $LN48+1316
	DD	imagerel $chain$3$create_pxsocket
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$create_pxsocket DD imagerel $LN48+1316
	DD	imagerel $LN48+1332
	DD	imagerel $chain$4$create_pxsocket
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$create_pxsocket DD imagerel $LN48+1332
	DD	imagerel $LN48+1340
	DD	imagerel $chain$5$create_pxsocket
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$create_pxsocket DD imagerel $LN48+1340
	DD	imagerel $LN48+1354
	DD	imagerel $chain$6$create_pxsocket
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$create_pxsocket DD 021H
	DD	imagerel $LN48
	DD	imagerel $LN48+302
	DD	imagerel $unwind$create_pxsocket
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$create_pxsocket DD 021H
	DD	imagerel $LN48+302
	DD	imagerel $LN48+327
	DD	imagerel $chain$0$create_pxsocket
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$create_pxsocket DD 021H
	DD	imagerel $LN48+327
	DD	imagerel $LN48+433
	DD	imagerel $chain$2$create_pxsocket
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$create_pxsocket DD 020821H
	DD	018d408H
	DD	imagerel $LN48+327
	DD	imagerel $LN48+433
	DD	imagerel $chain$2$create_pxsocket
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$create_pxsocket DD 041021H
	DD	010e410H
	DD	0177408H
	DD	imagerel $LN48+302
	DD	imagerel $LN48+327
	DD	imagerel $chain$0$create_pxsocket
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$create_pxsocket DD 020821H
	DD	0166408H
	DD	imagerel $LN48
	DD	imagerel $LN48+302
	DD	imagerel $unwind$create_pxsocket
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$create_pxsocket DD 061201H
	DD	0110112H
	DD	0c009f00bH
	DD	030065007H
xdata	ENDS
;	COMDAT ??_C@_0BN@JNEAFDJK@socket?3?5port?5must?5be?50?965535?$AA@
CONST	SEGMENT
??_C@_0BN@JNEAFDJK@socket?3?5port?5must?5be?50?965535?$AA@ DB 'socket: po'
	DB	'rt must be 0-65535', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GFODGHCG@invalid?5IPv4?5address?$AA@
CONST	SEGMENT
??_C@_0BF@GFODGHCG@invalid?5IPv4?5address?$AA@ DB 'invalid IPv4 address', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DMHOKMA@?$CFd?4?$CFd?4?$CFd?4?$CFd?$CFc?$AA@
CONST	SEGMENT
??_C@_0O@DMHOKMA@?$CFd?4?$CFd?4?$CFd?4?$CFd?$CFc?$AA@ DB '%d.%d.%d.%d%c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@OKJHCGDP@sock?5type?5must?5be?5SOCK_STREAM?$AA@
CONST	SEGMENT
??_C@_0BO@OKJHCGDP@sock?5type?5must?5be?5SOCK_STREAM?$AA@ DB 'sock type m'
	DB	'ust be SOCK_STREAM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EPDBMOIG@family?5must?5be?5AF_INET?$AA@
CONST	SEGMENT
??_C@_0BH@EPDBMOIG@family?5must?5be?5AF_INET?$AA@ DB 'family must be AF_I'
	DB	'NET', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@EKHACCDG@sockets?5cannot?5be?5created?5in?5asy@
CONST	SEGMENT
??_C@_0CM@EKHACCDG@sockets?5cannot?5be?5created?5in?5asy@ DB 'sockets can'
	DB	'not be created in async contexts', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@GMPLKPIL@not?5in?5an?5async?5socket?5context?$AA@
CONST	SEGMENT
??_C@_0BP@GMPLKPIL@not?5in?5an?5async?5socket?5context?$AA@ DB 'not in an'
	DB	' async socket context', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@PFGPPML@client?1server?5context?5mismatch?$AA@
CONST	SEGMENT
??_C@_0BP@PFGPPML@client?1server?5context?5mismatch?$AA@ DB 'client/serve'
	DB	'r context mismatch', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT create_pxsocket
_TEXT	SEGMENT
ch$130714 = 80
d4$130713 = 84
len$ = 88
d2$130711 = 92
d1$130710 = 96
d3$130712 = 100
nonblock$ = 104
len$130718 = 112
sin$130717 = 112
hostlen$ = 112
host$ = 120
args$ = 176
kwds$ = 184
flags$ = 192
parent$ = 200
create_pxsocket PROC					; COMDAT

; 7226 : {

$LN48:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	53		 push	 rbx
  00006	55		 push	 rbp
  00007	41 54		 push	 r12
  00009	41 57		 push	 r15
  0000b	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H
  00012	4d 8b f9	 mov	 r15, r9
  00015	41 8b d8	 mov	 ebx, r8d
  00018	48 8b ea	 mov	 rbp, rdx
  0001b	4c 8b e1	 mov	 r12, rcx

; 7227 :     char *val;
; 7228 :     int len = sizeof(int);

  0001e	c7 44 24 58 04
	00 00 00	 mov	 DWORD PTR len$[rsp], 4

; 7229 :     int nonblock = 1;

  00026	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR nonblock$[rsp], 1

; 7230 :     PxSocket *s;
; 7231 :     SOCKET fd = INVALID_SOCKET;
; 7232 :     char *host;
; 7233 :     Context *c;
; 7234 :     Heap *old_heap = NULL;
; 7235 :     Py_ssize_t hostlen;
; 7236 : 
; 7237 :     PyTypeObject *tp = &PxSocket_Type;
; 7238 : 
; 7239 :     if (Py_PXCTX && (flags != Px_SOCKFLAGS_SERVERCLIENT)) {

  0002e	e8 00 00 00 00	 call	 _Py_PXCTX
  00033	85 c0		 test	 eax, eax
  00035	0f 84 ec 00 00
	00		 je	 $LN33@create_pxs
  0003b	81 fb 80 00 00
	00		 cmp	 ebx, 128		; 00000080H
  00041	0f 84 e0 00 00
	00		 je	 $LN33@create_pxs

; 7240 :         int mismatch;
; 7241 :         c = ctx;
; 7242 :         assert(!parent);
; 7243 :         if (args || kwds) {

  00047	4d 85 e4	 test	 r12, r12
  0004a	0f 85 b4 00 00
	00		 jne	 $LN31@create_pxs
  00050	48 85 d2	 test	 rdx, rdx
  00053	0f 85 ab 00 00
	00		 jne	 $LN31@create_pxs

; 7247 :         }
; 7248 :         s = (PxSocket *)c->io_obj;

  00059	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0005f	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00068	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:ctx
  0006d	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00071	48 8b 0c 10	 mov	 rcx, QWORD PTR [rax+rdx]
  00075	48 8b 81 a8 32
	00 00		 mov	 rax, QWORD PTR [rcx+12968]

; 7249 :         if (!s || Py_TYPE(s) != tp) {

  0007c	48 85 c0	 test	 rax, rax
  0007f	74 60		 je	 SHORT $LN29@create_pxs
  00081	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PxSocket_Type
  00088	4c 39 40 58	 cmp	 QWORD PTR [rax+88], r8
  0008c	75 53		 jne	 SHORT $LN29@create_pxs

; 7253 :         }
; 7254 : 
; 7255 :         mismatch = (
; 7256 :             (flags == Px_SOCKFLAGS_CLIENT && !PxSocket_IS_CLIENT(s)) ||
; 7257 :             (flags == Px_SOCKFLAGS_SERVER && !PxSocket_IS_SERVER(s))
; 7258 :         );

  0008e	83 fb 01	 cmp	 ebx, 1
  00091	75 16		 jne	 SHORT $LN36@create_pxs
  00093	84 98 f4 01 00
	00		 test	 BYTE PTR [rax+500], bl
  00099	74 23		 je	 SHORT $LN40@create_pxs

; 7422 : }

  0009b	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  000a2	41 5f		 pop	 r15
  000a4	41 5c		 pop	 r12
  000a6	5d		 pop	 rbp
  000a7	5b		 pop	 rbx
  000a8	c3		 ret	 0
$LN36@create_pxs:

; 7253 :         }
; 7254 : 
; 7255 :         mismatch = (
; 7256 :             (flags == Px_SOCKFLAGS_CLIENT && !PxSocket_IS_CLIENT(s)) ||
; 7257 :             (flags == Px_SOCKFLAGS_SERVER && !PxSocket_IS_SERVER(s))
; 7258 :         );

  000a9	83 fb 02	 cmp	 ebx, 2
  000ac	0f 85 8a 04 00
	00		 jne	 $LN34@create_pxs
  000b2	84 98 f4 01 00
	00		 test	 BYTE PTR [rax+500], bl
  000b8	0f 85 7e 04 00
	00		 jne	 $LN34@create_pxs
$LN40@create_pxs:

; 7259 :         if (mismatch) {
; 7260 :             PyErr_SetString(PyExc_ValueError,
; 7261 :                             "client/server context mismatch");

  000be	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000c5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@PFGPPML@client?1server?5context?5mismatch?$AA@
  000cc	e8 00 00 00 00	 call	 PyErr_SetString

; 7262 :             return NULL;

  000d1	33 c0		 xor	 eax, eax

; 7422 : }

  000d3	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  000da	41 5f		 pop	 r15
  000dc	41 5c		 pop	 r12
  000de	5d		 pop	 rbp
  000df	5b		 pop	 rbx
  000e0	c3		 ret	 0
$LN29@create_pxs:

; 7250 :             PyErr_SetString(PyExc_ValueError,
; 7251 :                             "not in an async socket context");

  000e1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@GMPLKPIL@not?5in?5an?5async?5socket?5context?$AA@
  000ef	e8 00 00 00 00	 call	 PyErr_SetString

; 7252 :             return NULL;

  000f4	33 c0		 xor	 eax, eax

; 7422 : }

  000f6	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  000fd	41 5f		 pop	 r15
  000ff	41 5c		 pop	 r12
  00101	5d		 pop	 rbp
  00102	5b		 pop	 rbx
  00103	c3		 ret	 0
$LN31@create_pxs:

; 7244 :             PyErr_SetString(PyExc_ValueError,
; 7245 :                             "sockets cannot be created in async contexts");

  00104	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0010b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@EKHACCDG@sockets?5cannot?5be?5created?5in?5asy@
  00112	e8 00 00 00 00	 call	 PyErr_SetString

; 7246 :             return NULL;

  00117	33 c0		 xor	 eax, eax

; 7422 : }

  00119	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00120	41 5f		 pop	 r15
  00122	41 5c		 pop	 r12
  00124	5d		 pop	 rbp
  00125	5b		 pop	 rbx
  00126	c3		 ret	 0
$LN33@create_pxs:

; 7263 :         }
; 7264 :         return (PyObject *)s;
; 7265 :     }
; 7266 : 
; 7267 :     /* First step is to create a new context object that'll encapsulate the
; 7268 :      * socket for its entire lifetime. */
; 7269 :     c = new_context(0, 1);

  00127	ba 01 00 00 00	 mov	 edx, 1
  0012c	33 c9		 xor	 ecx, ecx
  0012e	48 89 b4 24 b0
	00 00 00	 mov	 QWORD PTR [rsp+176], rsi
  00136	e8 00 00 00 00	 call	 new_context
  0013b	48 8b f0	 mov	 rsi, rax

; 7270 :     if (!c)

  0013e	48 85 c0	 test	 rax, rax
  00141	0f 84 ed 03 00
	00		 je	 $LN42@create_pxs
$LN27@create_pxs:
  00147	48 89 bc 24 b8
	00 00 00	 mov	 QWORD PTR [rsp+184], rdi
  0014f	4c 89 b4 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], r14

; 7271 :         return NULL;
; 7272 : 
; 7273 :     c->io_type = Px_IOTYPE_SOCKET;

  00157	41 be 02 00 00
	00		 mov	 r14d, 2

; 7274 : 
; 7275 :     s = (PxSocket *)_PyHeap_Malloc(c, sizeof(PxSocket), 0, 0);

  0015d	45 33 c9	 xor	 r9d, r9d
  00160	45 33 c0	 xor	 r8d, r8d
  00163	ba 50 04 00 00	 mov	 edx, 1104		; 00000450H
  00168	48 8b c8	 mov	 rcx, rax
  0016b	44 89 b0 80 32
	00 00		 mov	 DWORD PTR [rax+12928], r14d
  00172	e8 00 00 00 00	 call	 _PyHeap_Malloc
  00177	48 8b f8	 mov	 rdi, rax

; 7276 :     if (!s)

  0017a	48 85 c0	 test	 rax, rax

; 7277 :         return NULL;

  0017d	74 21		 je	 SHORT $LN47@create_pxs

; 7278 : 
; 7279 :     c->io_obj = (PyObject *)s;
; 7280 : 
; 7281 :     if (!init_object(c, c->io_obj, tp, 0))

  0017f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PxSocket_Type
  00186	45 33 c9	 xor	 r9d, r9d
  00189	48 8b d0	 mov	 rdx, rax
  0018c	48 8b ce	 mov	 rcx, rsi
  0018f	48 89 86 a8 32
	00 00		 mov	 QWORD PTR [rsi+12968], rax
  00196	e8 00 00 00 00	 call	 init_object
  0019b	48 85 c0	 test	 rax, rax
  0019e	75 07		 jne	 SHORT $LN25@create_pxs
$LN47@create_pxs:

; 7282 :         return NULL;

  001a0	33 c0		 xor	 eax, eax
  001a2	e9 7d 03 00 00	 jmp	 $LN44@create_pxs
$LN25@create_pxs:

; 7283 : 
; 7284 :     s->ctx = c;
; 7285 : 
; 7286 :     s->flags = flags;
; 7287 : 
; 7288 :     if (parent) {
; 7289 :         assert(PxSocket_IS_SERVERCLIENT(s));
; 7290 :     } else {
; 7291 :         assert(
; 7292 :             ( PxSocket_IS_CLIENT(s) && !PxSocket_IS_SERVER(s)) ||
; 7293 :             (!PxSocket_IS_CLIENT(s) &&  PxSocket_IS_SERVER(s))
; 7294 :         );
; 7295 :     }
; 7296 : 
; 7297 :     s->sock_fd = fd;
; 7298 :     s->sock_timeout = -1.0;

  001a7	48 b8 00 00 00
	00 00 00 f0 bf	 mov	 rax, -4616189618054758400 ; bff0000000000000H
  001b1	4c 89 ac 24 c0
	00 00 00	 mov	 QWORD PTR [rsp+192], r13

; 7299 :     s->errorhandler = PySocketModule.socket_errorhandler;
; 7300 :     s->sock_family = AF_INET;

  001b9	4c 8d 6f 68	 lea	 r13, QWORD PTR [rdi+104]
  001bd	45 89 75 00	 mov	 DWORD PTR [r13], r14d
  001c1	48 89 87 80 00
	00 00		 mov	 QWORD PTR [rdi+128], rax
  001c8	48 8b 05 30 00
	00 00		 mov	 rax, QWORD PTR PySocketModule+48

; 7301 :     s->sock_type = SOCK_STREAM;

  001cf	4c 8d 77 6c	 lea	 r14, QWORD PTR [rdi+108]
  001d3	48 89 b7 00 02
	00 00		 mov	 QWORD PTR [rdi+512], rsi
  001da	89 9f f4 01 00
	00		 mov	 DWORD PTR [rdi+500], ebx
  001e0	48 c7 47 60 ff
	ff ff ff	 mov	 QWORD PTR [rdi+96], -1
  001e8	48 89 47 78	 mov	 QWORD PTR [rdi+120], rax
  001ec	41 c7 06 01 00
	00 00		 mov	 DWORD PTR [r14], 1

; 7302 : 
; 7303 :     if (PxSocket_IS_SERVERCLIENT(s)) {

  001f3	84 db		 test	 bl, bl
  001f5	0f 88 e1 01 00
	00		 js	 $serverclient$130698

; 7304 :         assert(!PxSocket_IS_SERVER(s));
; 7305 :         assert(!PxSocket_IS_CLIENT(s));
; 7306 :         goto serverclient;
; 7307 :     }
; 7308 : 
; 7309 :     if (!PyArg_ParseTupleAndKeywords(PxSocket_PARSE_ARGS))

  001fb	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR pxsocket_kwlist_formatstring
  00202	48 8d 47 70	 lea	 rax, QWORD PTR [rdi+112]
  00206	4c 8d bf 30 02
	00 00		 lea	 r15, QWORD PTR [rdi+560]
  0020d	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00212	4c 89 74 24 40	 mov	 QWORD PTR [rsp+64], r14
  00217	4c 89 6c 24 38	 mov	 QWORD PTR [rsp+56], r13
  0021c	48 8d 44 24 70	 lea	 rax, QWORD PTR hostlen$[rsp]
  00221	4c 89 7c 24 30	 mov	 QWORD PTR [rsp+48], r15
  00226	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:pxsocket_kwlist
  0022d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00232	48 8d 44 24 78	 lea	 rax, QWORD PTR host$[rsp]
  00237	48 8b d5	 mov	 rdx, rbp
  0023a	49 8b cc	 mov	 rcx, r12
  0023d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00242	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00247	85 c0		 test	 eax, eax
  00249	0f 84 c3 02 00
	00		 je	 $error$130701

; 7310 :         goto error;
; 7311 : 
; 7312 :     if (s->sock_family != AF_INET) {

  0024f	41 83 7d 00 02	 cmp	 DWORD PTR [r13], 2
  00254	74 18		 je	 SHORT $LN20@create_pxs

; 7313 :         PyErr_SetString(PyExc_ValueError, "family must be AF_INET");

  00256	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0025d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@EPDBMOIG@family?5must?5be?5AF_INET?$AA@
  00264	e8 00 00 00 00	 call	 PyErr_SetString

; 7314 :         goto error;

  00269	e9 a4 02 00 00	 jmp	 $error$130701
$LN20@create_pxs:

; 7315 :     }
; 7316 : 
; 7317 :     if (s->sock_type != SOCK_STREAM) {

  0026e	41 83 3e 01	 cmp	 DWORD PTR [r14], 1
  00272	74 18		 je	 SHORT $LN19@create_pxs

; 7318 :         PyErr_SetString(PyExc_ValueError, "sock type must be SOCK_STREAM");

  00274	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0027b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@OKJHCGDP@sock?5type?5must?5be?5SOCK_STREAM?$AA@
  00282	e8 00 00 00 00	 call	 PyErr_SetString

; 7319 :         goto error;

  00287	e9 86 02 00 00	 jmp	 $error$130701
$LN19@create_pxs:

; 7320 :     }
; 7321 : 
; 7322 :     if (s->port < 0 || s->port > 0xffff) {

  0028c	41 8b 07	 mov	 eax, DWORD PTR [r15]
  0028f	85 c0		 test	 eax, eax
  00291	0f 88 9e 01 00
	00		 js	 $LN17@create_pxs
  00297	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  0029c	0f 8f 93 01 00
	00		 jg	 $LN17@create_pxs

; 7324 :         goto error;
; 7325 :     }
; 7326 : 
; 7327 :     if (host[0] >= '1' && host[0] <= '9') {

  002a2	48 8b 44 24 78	 mov	 rax, QWORD PTR host$[rsp]
  002a7	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  002aa	80 f9 31	 cmp	 cl, 49			; 00000031H
  002ad	0f 8c 6b 01 00
	00		 jl	 $LN16@create_pxs
  002b3	80 f9 39	 cmp	 cl, 57			; 00000039H
  002b6	0f 8f 62 01 00
	00		 jg	 $LN16@create_pxs

; 7328 :         int d1, d2, d3, d4;
; 7329 :         char ch;
; 7330 : 
; 7331 :         if (sscanf(host, "%d.%d.%d.%d%c", &d1, &d2, &d3, &d4, &ch) == 4 &&
; 7332 :             0 <= d1 && d1 <= 255 && 0 <= d2 && d2 <= 255 &&
; 7333 :             0 <= d3 && d3 <= 255 && 0 <= d4 && d4 <= 255)

  002bc	48 8d 4c 24 50	 lea	 rcx, QWORD PTR ch$130714[rsp]
  002c1	4c 8d 4c 24 5c	 lea	 r9, QWORD PTR d2$130711[rsp]
  002c6	4c 8d 44 24 60	 lea	 r8, QWORD PTR d1$130710[rsp]
  002cb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002d0	48 8d 4c 24 54	 lea	 rcx, QWORD PTR d4$130713[rsp]
  002d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@DMHOKMA@?$CFd?4?$CFd?4?$CFd?4?$CFd?$CFc?$AA@
  002dc	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002e1	48 8d 4c 24 64	 lea	 rcx, QWORD PTR d3$130712[rsp]
  002e6	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  002eb	48 8b c8	 mov	 rcx, rax
  002ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sscanf
  002f4	83 f8 04	 cmp	 eax, 4
  002f7	0f 85 09 01 00
	00		 jne	 $LN15@create_pxs
  002fd	81 7c 24 60 ff
	00 00 00	 cmp	 DWORD PTR d1$130710[rsp], 255 ; 000000ffH
  00305	0f 87 fb 00 00
	00		 ja	 $LN15@create_pxs
  0030b	81 7c 24 5c ff
	00 00 00	 cmp	 DWORD PTR d2$130711[rsp], 255 ; 000000ffH
  00313	0f 87 ed 00 00
	00		 ja	 $LN15@create_pxs
  00319	81 7c 24 64 ff
	00 00 00	 cmp	 DWORD PTR d3$130712[rsp], 255 ; 000000ffH
  00321	0f 87 df 00 00
	00		 ja	 $LN15@create_pxs
  00327	81 7c 24 54 ff
	00 00 00	 cmp	 DWORD PTR d4$130713[rsp], 255 ; 000000ffH
  0032f	0f 87 d1 00 00
	00		 ja	 $LN15@create_pxs

; 7334 :         {
; 7335 :             struct sockaddr_in *sin;
; 7336 :             int *len;
; 7337 : 
; 7338 :             /* xxx todo: now that we've switched to having a context
; 7339 :              * encapsulate the socket, we should change these char[n]
; 7340 :              * arrays into pointers that are _PyHeap_Malloc'd with the
; 7341 :              * socket's context. */
; 7342 :             memset(&s->ip[0], 0, 16);

  00335	33 c0		 xor	 eax, eax
  00337	48 8d 9f 14 02
	00 00		 lea	 rbx, QWORD PTR [rdi+532]
  0033e	48 89 03	 mov	 QWORD PTR [rbx], rax
  00341	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax

; 7343 :             strncpy(&s->ip[0], host, 15);

  00345	48 8b 54 24 78	 mov	 rdx, QWORD PTR host$[rsp]
  0034a	44 8d 40 0f	 lea	 r8d, QWORD PTR [rax+15]
  0034e	48 8b cb	 mov	 rcx, rbx
  00351	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strncpy

; 7344 :             assert(s->ip[15] == '\0');
; 7345 :             s->host = &(s->ip[0]);
; 7346 : 
; 7347 :             if (PxSocket_IS_CLIENT(s)) {

  00357	8b 87 f4 01 00
	00		 mov	 eax, DWORD PTR [rdi+500]
  0035d	48 89 9f 28 02
	00 00		 mov	 QWORD PTR [rdi+552], rbx
  00364	a8 01		 test	 al, 1
  00366	74 10		 je	 SHORT $LN14@create_pxs

; 7348 :                 sin = &(s->remote_addr.in);

  00368	48 8d 9f 70 01
	00 00		 lea	 rbx, QWORD PTR [rdi+368]

; 7349 :                 len = &(s->remote_addr_len);

  0036f	48 8d b7 f0 01
	00 00		 lea	 rsi, QWORD PTR [rdi+496]
  00376	eb 1e		 jmp	 SHORT $LN12@create_pxs
$LN14@create_pxs:

; 7350 :             } else if (PxSocket_IS_SERVER(s)) {

  00378	a8 02		 test	 al, 2
  0037a	74 10		 je	 SHORT $LN41@create_pxs

; 7351 :                 sin = &(s->local_addr.in);

  0037c	48 8d 9f e8 00
	00 00		 lea	 rbx, QWORD PTR [rdi+232]

; 7352 :                 len = &(s->local_addr_len);

  00383	48 8d b7 68 01
	00 00		 lea	 rsi, QWORD PTR [rdi+360]
  0038a	eb 0a		 jmp	 SHORT $LN12@create_pxs
$LN41@create_pxs:
  0038c	48 8b 5c 24 70	 mov	 rbx, QWORD PTR sin$130717[rsp]
  00391	48 8b 74 24 70	 mov	 rsi, QWORD PTR len$130718[rsp]
$LN12@create_pxs:

; 7353 :             } else
; 7354 :                 assert(0);
; 7355 : 
; 7356 :             sin->sin_addr.s_addr = htonl(
; 7357 :                 ((long)d1 << 24) | ((long)d2 << 16) |
; 7358 :                 ((long)d3 << 8)  | ((long)d4 << 0)
; 7359 :             );

  00396	8b 4c 24 60	 mov	 ecx, DWORD PTR d1$130710[rsp]
  0039a	c1 e1 08	 shl	 ecx, 8
  0039d	0b 4c 24 5c	 or	 ecx, DWORD PTR d2$130711[rsp]
  003a1	c1 e1 08	 shl	 ecx, 8
  003a4	0b 4c 24 64	 or	 ecx, DWORD PTR d3$130712[rsp]
  003a8	c1 e1 08	 shl	 ecx, 8
  003ab	0b 4c 24 54	 or	 ecx, DWORD PTR d4$130713[rsp]
  003af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_htonl
  003b5	89 43 04	 mov	 DWORD PTR [rbx+4], eax

; 7360 : 
; 7361 :             sin->sin_family = AF_INET;

  003b8	b8 02 00 00 00	 mov	 eax, 2
  003bd	66 89 03	 mov	 WORD PTR [rbx], ax

; 7362 :             sin->sin_port = htons((short)s->port);

  003c0	41 0f b7 0f	 movzx	 ecx, WORD PTR [r15]
  003c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_htons
  003ca	66 89 43 02	 mov	 WORD PTR [rbx+2], ax

; 7363 :             *len = sizeof(*sin);

  003ce	c7 06 10 00 00
	00		 mov	 DWORD PTR [rsi], 16
$LN46@create_pxs:

; 7367 :         }
; 7368 :     } else {
; 7369 :         strncpy(s->host, host, hostlen);

  003d4	4c 8b bc 24 c8
	00 00 00	 mov	 r15, QWORD PTR parent$[rsp]
$serverclient$130698:

; 7370 :         assert(!s->ip);
; 7371 :     }
; 7372 : 
; 7373 : serverclient:
; 7374 :     if (s->sock_fd != INVALID_SOCKET)

  003dc	48 83 7f 60 ff	 cmp	 QWORD PTR [rdi+96], -1
  003e1	75 6a		 jne	 SHORT $setnonblock$130738

; 7375 :         goto setnonblock;
; 7376 : 
; 7377 :     s->sock_fd = socket(s->sock_family, s->sock_type, s->sock_proto);

  003e3	44 8b 47 70	 mov	 r8d, DWORD PTR [rdi+112]
  003e7	41 8b 16	 mov	 edx, DWORD PTR [r14]
  003ea	41 8b 4d 00	 mov	 ecx, DWORD PTR [r13]
  003ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_socket
  003f4	48 89 47 60	 mov	 QWORD PTR [rdi+96], rax

; 7378 :     if (s->sock_fd == INVALID_SOCKET) {

  003f8	48 83 f8 ff	 cmp	 rax, -1
  003fc	75 4f		 jne	 SHORT $setnonblock$130738

; 7379 :         s->errorhandler();

  003fe	ff 57 78	 call	 QWORD PTR [rdi+120]

; 7380 :         goto error;

  00401	e9 0c 01 00 00	 jmp	 $error$130701
$LN15@create_pxs:

; 7364 :         } else {
; 7365 :             PyErr_SetString(PyExc_ValueError, "invalid IPv4 address");

  00406	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0040d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@GFODGHCG@invalid?5IPv4?5address?$AA@
  00414	e8 00 00 00 00	 call	 PyErr_SetString

; 7366 :             goto error;

  00419	e9 f4 00 00 00	 jmp	 $error$130701
$LN16@create_pxs:

; 7367 :         }
; 7368 :     } else {
; 7369 :         strncpy(s->host, host, hostlen);

  0041e	4c 8b 44 24 70	 mov	 r8, QWORD PTR hostlen$[rsp]
  00423	48 8b 8f 28 02
	00 00		 mov	 rcx, QWORD PTR [rdi+552]
  0042a	48 8b d0	 mov	 rdx, rax
  0042d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strncpy
  00433	eb 9f		 jmp	 SHORT $LN46@create_pxs
$LN17@create_pxs:

; 7323 :         PyErr_SetString(PyExc_OverflowError, "socket: port must be 0-65535");

  00435	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  0043c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@JNEAFDJK@socket?3?5port?5must?5be?50?965535?$AA@
  00443	e8 00 00 00 00	 call	 PyErr_SetString
  00448	e9 c5 00 00 00	 jmp	 $error$130701
$setnonblock$130738:

; 7381 :     }
; 7382 : 
; 7383 : setnonblock:
; 7384 :     fd = s->sock_fd;

  0044d	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]

; 7385 :     if (ioctlsocket(fd, FIONBIO, &nonblock) == SOCKET_ERROR)

  00451	4c 8d 44 24 68	 lea	 r8, QWORD PTR nonblock$[rsp]
  00456	ba 7e 66 04 80	 mov	 edx, -2147195266	; ffffffff8004667eH
  0045b	48 8b cb	 mov	 rcx, rbx
  0045e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ioctlsocket
  00464	83 f8 ff	 cmp	 eax, -1
  00467	0f 84 90 00 00
	00		 je	 $free_sock$130744

; 7386 :         goto free_sock;
; 7387 : 
; 7388 :     val = (char *)&(s->recvbuf_size);
; 7389 :     if (getsockopt(fd, SOL_SOCKET, SO_RCVBUF, val, &len) == SOCKET_ERROR)

  0046d	48 8d 44 24 58	 lea	 rax, QWORD PTR len$[rsp]
  00472	4c 8d 8f 60 02
	00 00		 lea	 r9, QWORD PTR [rdi+608]
  00479	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  0047e	41 b8 02 10 00
	00		 mov	 r8d, 4098		; 00001002H
  00484	48 8b cb	 mov	 rcx, rbx
  00487	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0048c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getsockopt
  00492	83 f8 ff	 cmp	 eax, -1
  00495	74 66		 je	 SHORT $free_sock$130744

; 7390 :         goto free_sock;
; 7391 : 
; 7392 :     assert(s->recvbuf_size >= 1024 && s->recvbuf_size <= 65536);
; 7393 : 
; 7394 :     val = (char *)&(s->sendbuf_size);
; 7395 :     if (getsockopt(fd, SOL_SOCKET, SO_RCVBUF, val, &len) == SOCKET_ERROR)

  00497	48 8d 44 24 58	 lea	 rax, QWORD PTR len$[rsp]
  0049c	4c 8d 8f 64 02
	00 00		 lea	 r9, QWORD PTR [rdi+612]
  004a3	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  004a8	41 b8 02 10 00
	00		 mov	 r8d, 4098		; 00001002H
  004ae	48 8b cb	 mov	 rcx, rbx
  004b1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getsockopt
  004bc	83 f8 ff	 cmp	 eax, -1
  004bf	74 3c		 je	 SHORT $free_sock$130744

; 7396 :         goto free_sock;
; 7397 : 
; 7398 :     assert(s->sendbuf_size >= 1024 && s->sendbuf_size <= 65536);
; 7399 : 
; 7400 :     InitializeCriticalSectionAndSpinCount(&(s->cs), CS_SOCK_SPINCOUNT);

  004c1	48 8d 8f 38 02
	00 00		 lea	 rcx, QWORD PTR [rdi+568]
  004c8	ba 04 00 00 00	 mov	 edx, 4
  004cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeCriticalSectionAndSpinCount

; 7401 : 
; 7402 :     if (!PxSocket_IS_SERVERCLIENT(s))

  004d3	44 8b 9f f4 01
	00 00		 mov	 r11d, DWORD PTR [rdi+500]
  004da	45 84 db	 test	 r11b, r11b
  004dd	79 07		 jns	 SHORT $LN2@create_pxs

; 7403 :         /*_protect((PyObject *)s);*/
; 7404 :         ;
; 7405 :     else
; 7406 :         s->parent = parent;

  004df	4c 89 bf 30 04
	00 00		 mov	 QWORD PTR [rdi+1072], r15
$LN2@create_pxs:

; 7407 : 
; 7408 :     if (PxSocket_IS_SERVER(s))

  004e6	41 f6 c3 02	 test	 r11b, 2
  004ea	74 0c		 je	 SHORT $LN1@create_pxs

; 7409 :         s->preallocate = _PxSocketServer_PreallocatedSockets;

  004ec	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _PxSocketServer_PreallocatedSockets
  004f2	89 87 8c 03 00
	00		 mov	 DWORD PTR [rdi+908], eax
$LN1@create_pxs:

; 7410 : 
; 7411 :     return (PyObject *)s;

  004f8	48 8b c7	 mov	 rax, rdi
  004fb	eb 1f		 jmp	 SHORT $LN45@create_pxs
$free_sock$130744:

; 7412 : 
; 7413 : free_sock:
; 7414 :     s->errorhandler();

  004fd	ff 57 78	 call	 QWORD PTR [rdi+120]

; 7415 :     (void)closesocket(s->sock_fd);

  00500	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  00504	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_closesocket

; 7416 :     s->sock_fd = -1;

  0050a	48 c7 47 60 ff
	ff ff ff	 mov	 QWORD PTR [rdi+96], -1
$error$130701:

; 7417 : 
; 7418 : error:
; 7419 :     assert(PyErr_Occurred());
; 7420 :     Py_DECREF(s);

  00512	48 8b cf	 mov	 rcx, rdi
  00515	e8 00 00 00 00	 call	 _Py_DecRef

; 7421 :     return NULL;

  0051a	33 c0		 xor	 eax, eax
$LN45@create_pxs:
  0051c	4c 8b ac 24 c0
	00 00 00	 mov	 r13, QWORD PTR [rsp+192]
$LN44@create_pxs:
  00524	48 8b bc 24 b8
	00 00 00	 mov	 rdi, QWORD PTR [rsp+184]
  0052c	4c 8b b4 24 80
	00 00 00	 mov	 r14, QWORD PTR [rsp+128]
$LN42@create_pxs:
  00534	48 8b b4 24 b0
	00 00 00	 mov	 rsi, QWORD PTR [rsp+176]
$LN34@create_pxs:

; 7422 : }

  0053c	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00543	41 5f		 pop	 r15
  00545	41 5c		 pop	 r12
  00547	5d		 pop	 rbp
  00548	5b		 pop	 rbx
  00549	c3		 ret	 0
create_pxsocket ENDP
_TEXT	ENDS
PUBLIC	pxsocket_accept
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$pxsocket_accept DD imagerel $LN10
	DD	imagerel $LN10+100
	DD	imagerel $unwind$pxsocket_accept
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$pxsocket_accept DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT pxsocket_accept
_TEXT	SEGMENT
s$ = 64
args$ = 72
pxsocket_accept PROC					; COMDAT

; 7433 : {

$LN10:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 7434 :     Py_RETURN_NONE;

  00006	e8 00 00 00 00	 call	 _Py_PXCTX
  0000b	85 c0		 test	 eax, eax
  0000d	75 48		 jne	 SHORT $LN7@pxsocket_a
  0000f	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00024	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0002a	4c 8b cb	 mov	 r9, rbx
  0002d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00035	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003a	85 c0		 test	 eax, eax
  0003c	75 09		 jne	 SHORT $LN3@pxsocket_a
  0003e	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00045	74 07		 je	 SHORT $LN9@pxsocket_a
$LN3@pxsocket_a:
  00047	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN9@pxsocket_a:
  0004e	48 8b c3	 mov	 rax, rbx

; 7435 : }

  00051	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00055	5b		 pop	 rbx
  00056	c3		 ret	 0
$LN7@pxsocket_a:

; 7434 :     Py_RETURN_NONE;

  00057	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 7435 : }

  0005e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00062	5b		 pop	 rbx
  00063	c3		 ret	 0
pxsocket_accept ENDP
_TEXT	ENDS
PUBLIC	PxSocket_HandleCallback
EXTRN	Py_VaBuildValue:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel_private.h
pdata	SEGMENT
$pdata$PxSocket_HandleCallback DD imagerel $LN19
	DD	imagerel $LN19+213
	DD	imagerel $unwind$PxSocket_HandleCallback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocket_HandleCallback DD 071601H
	DD	0d0124216H
	DD	0700ec010H
	DD	0500c600dH
	DD	0300bH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT PxSocket_HandleCallback
_TEXT	SEGMENT
c$ = 96
name$ = 104
format$ = 112
PxSocket_HandleCallback PROC				; COMDAT

; 7444 : {

$LN19:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  0000a	53		 push	 rbx
  0000b	55		 push	 rbp
  0000c	56		 push	 rsi
  0000d	57		 push	 rdi
  0000e	41 54		 push	 r12
  00010	41 55		 push	 r13
  00012	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 7445 :     va_list va;
; 7446 :     PyObject *func, *args, *result;
; 7447 :     PxSocket *s = (PxSocket *)c->io_obj;

  00016	48 8b 99 a8 32
	00 00		 mov	 rbx, QWORD PTR [rcx+12968]
  0001d	4c 8b e1	 mov	 r12, rcx

; 7448 :     PyObject *o = (PyObject *)s;
; 7449 :     PyObject *protocol = s->protocol;
; 7450 : 
; 7451 :     if (!strcmp(name, "connection_made"))

  00020	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_0BA@EKHLBOND@connection_made?$AA@
  00027	48 8b f2	 mov	 rsi, rdx
  0002a	b9 10 00 00 00	 mov	 ecx, 16
  0002f	48 8b ea	 mov	 rbp, rdx
  00032	f3 a6		 repe cmpsb
  00034	75 0a		 jne	 SHORT $LN10@PxSocket_H

; 7452 :         Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_CALLED_CONNECTION_MADE;

  00036	81 8b f4 01 00
	00 00 00 00 02	 or	 DWORD PTR [rbx+500], 33554432 ; 02000000H
$LN10@PxSocket_H:

; 7453 : 
; 7454 :     READ_LOCK(o);

  00040	48 8d 4b 28	 lea	 rcx, QWORD PTR [rbx+40]
  00044	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AcquireSRWLockShared

; 7455 :     func = PxSocket_GET_ATTR(name);

  0004a	48 8b 8b 90 02
	00 00		 mov	 rcx, QWORD PTR [rbx+656]
  00051	48 8b d5	 mov	 rdx, rbp
  00054	e8 00 00 00 00	 call	 PyObject_HasAttrString
  00059	4c 8d 2d 00 00
	00 00		 lea	 r13, OFFSET FLAT:_Py_NoneStruct
  00060	85 c0		 test	 eax, eax
  00062	74 14		 je	 SHORT $LN13@PxSocket_H
  00064	48 8b 8b 90 02
	00 00		 mov	 rcx, QWORD PTR [rbx+656]
  0006b	48 8b d5	 mov	 rdx, rbp
  0006e	e8 00 00 00 00	 call	 PyObject_GetAttrString
  00073	48 8b f8	 mov	 rdi, rax
  00076	eb 03		 jmp	 SHORT $LN14@PxSocket_H
$LN13@PxSocket_H:
  00078	49 8b fd	 mov	 rdi, r13
$LN14@PxSocket_H:

; 7456 :     READ_UNLOCK(o);

  0007b	48 8d 4b 28	 lea	 rcx, QWORD PTR [rbx+40]
  0007f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseSRWLockShared

; 7457 : 
; 7458 :     if (!func || func == Py_None)

  00085	48 85 ff	 test	 rdi, rdi
  00088	74 3e		 je	 SHORT $end$130797
  0008a	49 3b fd	 cmp	 rdi, r13
  0008d	74 39		 je	 SHORT $end$130797

; 7459 :         goto end;
; 7460 : 
; 7461 :     va_start(va, format);
; 7462 :     args = Py_VaBuildValue(format, va);

  0008f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR format$[rsp]
  00094	48 8d 54 24 78	 lea	 rdx, QWORD PTR format$[rsp+8]
  00099	e8 00 00 00 00	 call	 Py_VaBuildValue

; 7463 :     va_end(va);
; 7464 : 
; 7465 :     /*
; 7466 :     if (!PxContext_Snapshot(c))
; 7467 :         PxSocket_EXCEPTION();
; 7468 :     */
; 7469 : 
; 7470 :     result = PyObject_CallObject(func, args);

  0009e	48 8b cf	 mov	 rcx, rdi
  000a1	48 8b d0	 mov	 rdx, rax
  000a4	e8 00 00 00 00	 call	 PyObject_CallObject
  000a9	48 8b f8	 mov	 rdi, rax

; 7471 : 
; 7472 :     if (result)
; 7473 :         assert(!PyErr_Occurred());
; 7474 : 
; 7475 :     if (PyErr_Occurred())

  000ac	e8 00 00 00 00	 call	 PyErr_Occurred

; 7476 :         assert(!result);
; 7477 : 
; 7478 :     if (!result)

  000b1	48 85 ff	 test	 rdi, rdi
  000b4	75 12		 jne	 SHORT $end$130797

; 7479 :         PxSocket_EXCEPTION();

  000b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  000bd	45 33 c0	 xor	 r8d, r8d
  000c0	49 8b cc	 mov	 rcx, r12
  000c3	e8 00 00 00 00	 call	 PxSocket_HandleException
$end$130797:

; 7480 : 
; 7481 :     if (result == Py_None)
; 7482 :         goto end;
; 7483 : 
; 7484 : end:
; 7485 :     return;
; 7486 : }

  000c8	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000cc	41 5d		 pop	 r13
  000ce	41 5c		 pop	 r12
  000d0	5f		 pop	 rdi
  000d1	5e		 pop	 rsi
  000d2	5d		 pop	 rbp
  000d3	5b		 pop	 rbx
  000d4	c3		 ret	 0
PxSocket_HandleCallback ENDP
_TEXT	ENDS
PUBLIC	PxSocketServer_CreateClientSocket
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocketServer_CreateClientSocket DD imagerel $LN13
	DD	imagerel $LN13+292
	DD	imagerel $unwind$PxSocketServer_CreateClientSocket
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocketServer_CreateClientSocket DD 0b5b01H
	DD	04d45bH
	DD	0a7452H
	DD	09643dH
	DD	085438H
	DD	0c0044208H
	DD	03002H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PxSocketServer_CreateClientSocket
_TEXT	SEGMENT
s$ = 64
PxSocketServer_CreateClientSocket PROC			; COMDAT

; 8255 : {

$LN13:
  00000	40 53		 push	 rbx
  00002	41 54		 push	 r12
  00004	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00008	4c 8b e1	 mov	 r12, rcx

; 8256 :     Context  *c = s->ctx;
; 8257 :     Context  *old_context = NULL;
; 8258 :     PxSocket *o; /* client socket */
; 8259 :     Context  *x; /* client socket's context */
; 8260 :     RBUF     *rbuf;
; 8261 :     size_t    rbuf_size;
; 8262 :     Heap     *snapshot = NULL;
; 8263 :     int flags = Px_SOCKFLAGS_SERVERCLIENT;
; 8264 : 
; 8265 :     o = (PxSocket *)create_pxsocket(NULL, NULL, flags, s);

  0000b	4c 8b c9	 mov	 r9, rcx
  0000e	33 d2		 xor	 edx, edx
  00010	33 c9		 xor	 ecx, ecx
  00012	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  00018	e8 00 00 00 00	 call	 create_pxsocket
  0001d	48 8b d8	 mov	 rbx, rax

; 8266 : 
; 8267 :     if (!o)

  00020	48 85 c0	 test	 rax, rax
  00023	75 08		 jne	 SHORT $LN6@PxSocketSe

; 8322 : }

  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	41 5c		 pop	 r12
  0002b	5b		 pop	 rbx
  0002c	c3		 ret	 0
$LN6@PxSocketSe:

; 8268 :         return NULL;
; 8269 : 
; 8270 :     assert(PxSocket_IS_SERVERCLIENT(o));
; 8271 :     assert(s->protocol_type);
; 8272 :     assert(o->parent == s);
; 8273 : 
; 8274 :     x = o->ctx;
; 8275 :     assert(x);
; 8276 :     assert(Px_PTR(x->io_obj) == Px_PTR(o));
; 8277 : 
; 8278 :     /* Switch out the TLS context with the new client socket's context (we
; 8279 :      * revert it at the end of this function). */
; 8280 :     old_context = ctx;

  0002d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00033	48 89 6c 24 40	 mov	 QWORD PTR [rsp+64], rbp
  00038	48 89 74 24 48	 mov	 QWORD PTR [rsp+72], rsi
  0003d	48 8b b0 00 02
	00 00		 mov	 rsi, QWORD PTR [rax+512]
  00044	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0004d	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  00052	48 8b 2c c8	 mov	 rbp, QWORD PTR [rax+rcx*8]
  00056	4c 89 6c 24 20	 mov	 QWORD PTR [rsp+32], r13
  0005b	41 bd 00 00 00
	00		 mov	 r13d, OFFSET FLAT:ctx
  00061	49 8b 7c 2d 00	 mov	 rdi, QWORD PTR [r13+rbp]

; 8281 :     ctx = x;

  00066	49 89 74 2d 00	 mov	 QWORD PTR [r13+rbp], rsi

; 8282 : 
; 8283 :     if (!PxSocket_SetProtocolType(o, s->protocol_type))

  0006b	49 8b 94 24 88
	02 00 00	 mov	 rdx, QWORD PTR [r12+648]
  00073	48 8b cb	 mov	 rcx, rbx
  00076	e8 00 00 00 00	 call	 PxSocket_SetProtocolType
  0007b	85 c0		 test	 eax, eax
  0007d	74 6b		 je	 SHORT $error$131423

; 8284 :         goto error;
; 8285 : 
; 8286 :     if (!PxSocket_InitInitialBytes(o))

  0007f	48 8b cb	 mov	 rcx, rbx
  00082	e8 00 00 00 00	 call	 PxSocket_InitInitialBytes
  00087	85 c0		 test	 eax, eax
  00089	74 5f		 je	 SHORT $error$131423

; 8287 :         goto error;
; 8288 : 
; 8289 :     PxSocket_InitExceptionHandler(o);

  0008b	48 8b cb	 mov	 rcx, rbx
  0008e	e8 00 00 00 00	 call	 PxSocket_InitExceptionHandler

; 8290 : 
; 8291 :     rbuf_size = o->recvbuf_size + Px_PTR_ALIGN(sizeof(RBUF));

  00093	48 63 93 60 02
	00 00		 movsxd	 rdx, DWORD PTR [rbx+608]

; 8292 : 
; 8293 :     rbuf = (RBUF *)_PyHeap_Malloc(x, rbuf_size, 0, 0);

  0009a	45 33 c9	 xor	 r9d, r9d
  0009d	45 33 c0	 xor	 r8d, r8d
  000a0	48 8b ce	 mov	 rcx, rsi
  000a3	48 81 c2 f0 00
	00 00		 add	 rdx, 240		; 000000f0H
  000aa	e8 00 00 00 00	 call	 _PyHeap_Malloc

; 8294 :     if (!rbuf)

  000af	48 85 c0	 test	 rax, rax
  000b2	74 36		 je	 SHORT $error$131423

; 8295 :         goto error;
; 8296 : 
; 8297 :     o->rbuf = rbuf;

  000b4	48 89 83 70 03
	00 00		 mov	 QWORD PTR [rbx+880], rax

; 8298 :     rbuf->s = o;

  000bb	48 89 18	 mov	 QWORD PTR [rax], rbx

; 8299 :     rbuf->ctx = x;

  000be	48 89 70 08	 mov	 QWORD PTR [rax+8], rsi

; 8300 :     rbuf->w.len = o->recvbuf_size;

  000c2	8b 8b 60 02 00
	00		 mov	 ecx, DWORD PTR [rbx+608]
  000c8	89 48 40	 mov	 DWORD PTR [rax+64], ecx

; 8301 :     rbuf->w.buf = (char *)rbuf->ob_sval;

  000cb	48 8d 88 e8 00
	00 00		 lea	 rcx, QWORD PTR [rax+232]
  000d2	48 89 48 48	 mov	 QWORD PTR [rax+72], rcx

; 8302 :     o->num_rbufs = 1;

  000d6	c7 83 78 03 00
	00 01 00 00 00	 mov	 DWORD PTR [rbx+888], 1

; 8303 : 
; 8304 :     ctx = old_context;

  000e0	49 89 7c 2d 00	 mov	 QWORD PTR [r13+rbp], rdi

; 8305 : 
; 8306 :     return o;

  000e5	48 8b c3	 mov	 rax, rbx
  000e8	eb 1e		 jmp	 SHORT $LN12@PxSocketSe
$error$131423:

; 8307 : 
; 8308 : error:
; 8309 :     assert(PyErr_Occurred());
; 8310 : 
; 8311 :     if (old_context)

  000ea	48 85 ff	 test	 rdi, rdi
  000ed	74 05		 je	 SHORT $LN2@PxSocketSe

; 8312 :         ctx = old_context;

  000ef	49 89 7c 2d 00	 mov	 QWORD PTR [r13+rbp], rdi
$LN2@PxSocketSe:

; 8313 : 
; 8314 :     if (closesocket(o->sock_fd) == SOCKET_ERROR) {

  000f4	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  000f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_closesocket

; 8315 :         /* xxx: which error is more important? */
; 8316 :         /* x->errorhandler(); */
; 8317 :     }
; 8318 : 
; 8319 :     assert(x);
; 8320 :     PxSocket_CallbackComplete(x);

  000fe	48 8b ce	 mov	 rcx, rsi
  00101	e8 00 00 00 00	 call	 PxSocket_CallbackComplete

; 8321 :     return NULL;

  00106	33 c0		 xor	 eax, eax
$LN12@PxSocketSe:
  00108	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]
  0010d	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00112	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00117	4c 8b 6c 24 20	 mov	 r13, QWORD PTR [rsp+32]

; 8322 : }

  0011c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00120	41 5c		 pop	 r12
  00122	5b		 pop	 rbx
  00123	c3		 ret	 0
PxSocketServer_CreateClientSocket ENDP
_TEXT	ENDS
PUBLIC	PxSocketServer_AllocClientSockets
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocketServer_AllocClientSockets DD imagerel $LN18
	DD	imagerel $LN18+170
	DD	imagerel $unwind$PxSocketServer_AllocClientSockets
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocketServer_AllocClientSockets DD 0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0d0143218H
	DD	07010c012H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PxSocketServer_AllocClientSockets
_TEXT	SEGMENT
s$ = 64
n$ = 72
PxSocketServer_AllocClientSockets PROC			; COMDAT

; 8326 : {

$LN18:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 8327 :     int i;
; 8328 :     Context  *c = s->ctx;
; 8329 :     PxSocket *first = NULL;

  00018	45 33 ed	 xor	 r13d, r13d
  0001b	8b ea		 mov	 ebp, edx
  0001d	4c 8b e1	 mov	 r12, rcx
  00020	41 8b dd	 mov	 ebx, r13d

; 8330 :     PxSocket *last = NULL;

  00023	41 8b fd	 mov	 edi, r13d

; 8331 :     PxSocket *x;
; 8332 : 
; 8333 :     assert(PxSocket_IS_SERVER(s));
; 8334 : 
; 8335 :     if (!n)

  00026	85 d2		 test	 edx, edx
  00028	75 06		 jne	 SHORT $LN10@PxSocketSe@2

; 8336 :         n = s->preallocate;

  0002a	8b a9 8c 03 00
	00		 mov	 ebp, DWORD PTR [rcx+908]
$LN10@PxSocketSe@2:

; 8337 : 
; 8338 :     for (i = 0; i < n; i++) {

  00030	41 8b f5	 mov	 esi, r13d
  00033	85 ed		 test	 ebp, ebp
  00035	7e 35		 jle	 SHORT $LN7@PxSocketSe@2
$LL9@PxSocketSe@2:

; 8339 :         x = PxSocketServer_CreateClientSocket(s);

  00037	49 8b cc	 mov	 rcx, r12
  0003a	e8 00 00 00 00	 call	 PxSocketServer_CreateClientSocket

; 8340 :         if (!x)

  0003f	48 85 c0	 test	 rax, rax
  00042	74 44		 je	 SHORT $error$131455

; 8341 :             goto error;
; 8342 : 
; 8343 :         if (!first)

  00044	48 85 db	 test	 rbx, rbx
  00047	75 05		 jne	 SHORT $LN5@PxSocketSe@2

; 8344 :             first = x;

  00049	48 8b d8	 mov	 rbx, rax

; 8345 :         else

  0004c	eb 07		 jmp	 SHORT $LN4@PxSocketSe@2
$LN5@PxSocketSe@2:

; 8346 :             last->next = x;

  0004e	48 89 87 40 04
	00 00		 mov	 QWORD PTR [rdi+1088], rax
$LN4@PxSocketSe@2:

; 8337 : 
; 8338 :     for (i = 0; i < n; i++) {

  00055	ff c6		 inc	 esi

; 8347 : 
; 8348 :         x->prev = last;

  00057	48 89 b8 38 04
	00 00		 mov	 QWORD PTR [rax+1080], rdi

; 8349 :         last = x;
; 8350 : 
; 8351 :         x->next = NULL;

  0005e	4c 89 a8 40 04
	00 00		 mov	 QWORD PTR [rax+1088], r13
  00065	48 8b f8	 mov	 rdi, rax
  00068	3b f5		 cmp	 esi, ebp
  0006a	7c cb		 jl	 SHORT $LL9@PxSocketSe@2
$LN7@PxSocketSe@2:

; 8352 :     }
; 8353 : 
; 8354 :     return first;

  0006c	48 8b c3	 mov	 rax, rbx
$LN11@PxSocketSe@2:

; 8361 : }

  0006f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00074	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00079	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  0007e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00082	41 5d		 pop	 r13
  00084	41 5c		 pop	 r12
  00086	5f		 pop	 rdi
  00087	c3		 ret	 0
$error$131455:

; 8355 : 
; 8356 : error:
; 8357 :     for (x = first; x; x = x->next)

  00088	48 85 db	 test	 rbx, rbx
  0008b	74 19		 je	 SHORT $LN1@PxSocketSe@2
  0008d	0f 1f 00	 npad	 3
$LL3@PxSocketSe@2:

; 8358 :         (void)closesocket(x->sock_fd);

  00090	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00094	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_closesocket
  0009a	48 8b 9b 40 04
	00 00		 mov	 rbx, QWORD PTR [rbx+1088]
  000a1	48 85 db	 test	 rbx, rbx
  000a4	75 ea		 jne	 SHORT $LL3@PxSocketSe@2
$LN1@PxSocketSe@2:

; 8359 : 
; 8360 :     return NULL;

  000a6	33 c0		 xor	 eax, eax
  000a8	eb c5		 jmp	 SHORT $LN11@PxSocketSe@2
PxSocketServer_AllocClientSockets ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$pxsocket_close DD imagerel $LN14
	DD	imagerel $LN14+147
	DD	imagerel $unwind$pxsocket_close
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$pxsocket_close DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT pxsocket_close
_TEXT	SEGMENT
s$ = 64
args$ = 72
pxsocket_close PROC					; COMDAT

; 8493 : {

$LN14:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 8494 :     WRITE_LOCK(s);

  0000d	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00011	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AcquireSRWLockExclusive

; 8495 :     Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_CLOSE_SCHEDULED;

  00017	81 8f f4 01 00
	00 00 00 40 00	 or	 DWORD PTR [rdi+500], 4194304 ; 00400000H

; 8496 :     WRITE_UNLOCK(s);

  00021	48 8d 4f 28	 lea	 rcx, QWORD PTR [rdi+40]
  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseSRWLockExclusive

; 8497 :     Py_RETURN_NONE;

  0002b	e8 00 00 00 00	 call	 _Py_PXCTX
  00030	85 c0		 test	 eax, eax
  00032	75 4d		 jne	 SHORT $LN11@pxsocket_c
  00034	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0003b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00049	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0004f	4c 8b cb	 mov	 r9, rbx
  00052	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0005a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005f	85 c0		 test	 eax, eax
  00061	75 09		 jne	 SHORT $LN7@pxsocket_c
  00063	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0006a	74 07		 je	 SHORT $LN13@pxsocket_c
$LN7@pxsocket_c:
  0006c	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN13@pxsocket_c:
  00073	48 8b c3	 mov	 rax, rbx

; 8498 : }

  00076	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0007b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0007f	5f		 pop	 rdi
  00080	c3		 ret	 0
$LN11@pxsocket_c:

; 8497 :     Py_RETURN_NONE;

  00081	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 8498 : }

  00088	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0008d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00091	5f		 pop	 rdi
  00092	c3		 ret	 0
pxsocket_close ENDP
_TEXT	ENDS
PUBLIC	_async_client_or_server
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_async_client_or_server DD imagerel $LN10
	DD	imagerel $LN10+100
	DD	imagerel $unwind$_async_client_or_server
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_client_or_server DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT _async_client_or_server
_TEXT	SEGMENT
self$ = 64
args$ = 72
kwds$ = 80
is_client$ = 88
_async_client_or_server PROC				; COMDAT

; 8702 : {

$LN10:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 8703 :     Py_RETURN_NONE;

  00006	e8 00 00 00 00	 call	 _Py_PXCTX
  0000b	85 c0		 test	 eax, eax
  0000d	75 48		 jne	 SHORT $LN7@async_clie
  0000f	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00024	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0002a	4c 8b cb	 mov	 r9, rbx
  0002d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00035	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003a	85 c0		 test	 eax, eax
  0003c	75 09		 jne	 SHORT $LN3@async_clie
  0003e	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00045	74 07		 je	 SHORT $LN9@async_clie
$LN3@async_clie:
  00047	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN9@async_clie:
  0004e	48 8b c3	 mov	 rax, rbx

; 8704 : }

  00051	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00055	5b		 pop	 rbx
  00056	c3		 ret	 0
$LN7@async_clie:

; 8703 :     Py_RETURN_NONE;

  00057	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 8704 : }

  0005e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00062	5b		 pop	 rbx
  00063	c3		 ret	 0
_async_client_or_server ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _async_client
_TEXT	SEGMENT
self$ = 8
args$ = 16
kwds$ = 24
_async_client PROC					; COMDAT

; 8713 : {

  00000	49 8b c0	 mov	 rax, r8

; 8714 :     return create_pxsocket(args, kwds, Px_SOCKFLAGS_CLIENT, 0);

  00003	45 33 c9	 xor	 r9d, r9d
  00006	48 8b ca	 mov	 rcx, rdx
  00009	45 8d 41 01	 lea	 r8d, QWORD PTR [r9+1]
  0000d	48 8b d0	 mov	 rdx, rax

; 8715 : }

  00010	e9 00 00 00 00	 jmp	 create_pxsocket
_async_client ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _async_server
_TEXT	SEGMENT
self$ = 8
args$ = 16
kwds$ = 24
_async_server PROC					; COMDAT

; 8719 : {

  00000	49 8b c0	 mov	 rax, r8

; 8720 :     return create_pxsocket(args, kwds, Px_SOCKFLAGS_SERVER, 0);

  00003	45 33 c9	 xor	 r9d, r9d
  00006	48 8b ca	 mov	 rcx, rdx
  00009	45 8d 41 02	 lea	 r8d, QWORD PTR [r9+2]
  0000d	48 8b d0	 mov	 rdx, rax

; 8721 : }

  00010	e9 00 00 00 00	 jmp	 create_pxsocket
_async_server ENDP
_TEXT	ENDS
EXTRN	PyObject_Print:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_async_print DD imagerel $LN10
	DD	imagerel $LN10+124
	DD	imagerel $unwind$_async_print
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_print DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT _async_print
_TEXT	SEGMENT
self$ = 64
args$ = 72
_async_print PROC					; COMDAT

; 8738 : {

$LN10:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b da	 mov	 rbx, rdx

; 8739 :     PyObject_Print(args, stdout, 0);

  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0000f	45 33 c0	 xor	 r8d, r8d
  00012	48 8d 50 30	 lea	 rdx, QWORD PTR [rax+48]
  00016	48 8b cb	 mov	 rcx, rbx
  00019	e8 00 00 00 00	 call	 PyObject_Print

; 8740 :     Py_RETURN_NONE;

  0001e	e8 00 00 00 00	 call	 _Py_PXCTX
  00023	85 c0		 test	 eax, eax
  00025	75 48		 jne	 SHORT $LN7@async_prin
  00027	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0003c	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00042	4c 8b cb	 mov	 r9, rbx
  00045	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0004d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00052	85 c0		 test	 eax, eax
  00054	75 09		 jne	 SHORT $LN3@async_prin
  00056	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0005d	74 07		 je	 SHORT $LN9@async_prin
$LN3@async_prin:
  0005f	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN9@async_prin:
  00066	48 8b c3	 mov	 rax, rbx

; 8741 : }

  00069	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0006d	5b		 pop	 rbx
  0006e	c3		 ret	 0
$LN7@async_prin:

; 8740 :     Py_RETURN_NONE;

  0006f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 8741 : }

  00076	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0007a	5b		 pop	 rbx
  0007b	c3		 ret	 0
_async_print ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_async_stdout DD imagerel $LN14
	DD	imagerel $LN14+186
	DD	imagerel $unwind$_async_stdout
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_stdout DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT _async_stdout
_TEXT	SEGMENT
self$ = 64
o$ = 72
_async_stdout PROC					; COMDAT

; 8746 : {

$LN14:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b da	 mov	 rbx, rdx

; 8747 :     Py_INCREF(o);

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN4@async_stdo
  00012	4c 8b ca	 mov	 r9, rdx
  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN3@async_stdo
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN4@async_stdo
$LN3@async_stdo:
  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN4@async_stdo:

; 8748 :     PyObject_Print(o, stdout, Py_PRINT_RAW);

  00044	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0004a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00050	48 8b cb	 mov	 rcx, rbx
  00053	48 8d 50 30	 lea	 rdx, QWORD PTR [rax+48]
  00057	e8 00 00 00 00	 call	 PyObject_Print

; 8749 :     Py_RETURN_NONE;

  0005c	e8 00 00 00 00	 call	 _Py_PXCTX
  00061	85 c0		 test	 eax, eax
  00063	75 48		 jne	 SHORT $LN11@async_stdo
  00065	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0006c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00073	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0007a	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00080	4c 8b cb	 mov	 r9, rbx
  00083	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0008b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00090	85 c0		 test	 eax, eax
  00092	75 09		 jne	 SHORT $LN7@async_stdo
  00094	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0009b	74 07		 je	 SHORT $LN13@async_stdo
$LN7@async_stdo:
  0009d	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN13@async_stdo:
  000a4	48 8b c3	 mov	 rax, rbx

; 8750 : }

  000a7	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ab	5b		 pop	 rbx
  000ac	c3		 ret	 0
$LN11@async_stdo:

; 8749 :     Py_RETURN_NONE;

  000ad	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 8750 : }

  000b4	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b8	5b		 pop	 rbx
  000b9	c3		 ret	 0
_async_stdout ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_async_stderr DD imagerel $LN14
	DD	imagerel $LN14+186
	DD	imagerel $unwind$_async_stderr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_stderr DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT _async_stderr
_TEXT	SEGMENT
self$ = 64
o$ = 72
_async_stderr PROC					; COMDAT

; 8755 : {

$LN14:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b da	 mov	 rbx, rdx

; 8756 :     Py_INCREF(o);

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN4@async_stde
  00012	4c 8b ca	 mov	 r9, rdx
  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN3@async_stde
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN4@async_stde
$LN3@async_stde:
  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN4@async_stde:

; 8757 :     PyObject_Print(o, stderr, Py_PRINT_RAW);

  00044	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0004a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00050	48 8b cb	 mov	 rcx, rbx
  00053	48 8d 50 60	 lea	 rdx, QWORD PTR [rax+96]
  00057	e8 00 00 00 00	 call	 PyObject_Print

; 8758 :     Py_RETURN_NONE;

  0005c	e8 00 00 00 00	 call	 _Py_PXCTX
  00061	85 c0		 test	 eax, eax
  00063	75 48		 jne	 SHORT $LN11@async_stde
  00065	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0006c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00073	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0007a	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00080	4c 8b cb	 mov	 r9, rbx
  00083	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0008b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00090	85 c0		 test	 eax, eax
  00092	75 09		 jne	 SHORT $LN7@async_stde
  00094	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0009b	74 07		 je	 SHORT $LN13@async_stde
$LN7@async_stde:
  0009d	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN13@async_stde:
  000a4	48 8b c3	 mov	 rax, rbx

; 8759 : }

  000a7	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ab	5b		 pop	 rbx
  000ac	c3		 ret	 0
$LN11@async_stde:

; 8758 :     Py_RETURN_NONE;

  000ad	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 8759 : }

  000b4	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b8	5b		 pop	 rbx
  000b9	c3		 ret	 0
_async_stderr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@ELDPGIBF@sizeof?$CIPxSocket?$CJ?3?5?$CFd?6?$AA@ ; `string'
PUBLIC	??_C@_0BN@FDBMEIMM@AsyncIOBuffersExhaustedError?$AA@ ; `string'
PUBLIC	??_C@_0BB@OAALBBIG@WaitTimeoutError?$AA@	; `string'
PUBLIC	??_C@_09JIBFAHPJ@WaitError?$AA@			; `string'
PUBLIC	??_C@_0P@KAOKHHGA@NoWaitersError?$AA@		; `string'
PUBLIC	??_C@_0BB@PEDEHLCM@PersistenceError?$AA@	; `string'
PUBLIC	??_C@_0BA@GJOLMHBB@AssignmentError?$AA@		; `string'
PUBLIC	??_C@_0BB@IACFHLDI@UnprotectedError?$AA@	; `string'
PUBLIC	??_C@_0BA@DCBHJBKD@ProtectionError?$AA@		; `string'
PUBLIC	??_C@_0L@POMMPANG@AsyncError?$AA@		; `string'
PUBLIC	??_C@_0CE@HJBHBINJ@_async?4AsyncIOBuffersExhaustedEr@ ; `string'
PUBLIC	??_C@_0BI@FGCNPAFI@_async?4WaitTimeoutError?$AA@ ; `string'
PUBLIC	??_C@_0BB@IFOHHNGP@_async?4WaitError?$AA@	; `string'
PUBLIC	??_C@_0BG@LDACCOIK@_async?4NoWaitersError?$AA@	; `string'
PUBLIC	??_C@_0BI@ECBCJKPC@_async?4PersistenceError?$AA@ ; `string'
PUBLIC	??_C@_0BH@CJCHCECO@_async?4AssignmentError?$AA@	; `string'
PUBLIC	??_C@_0BI@DGADJKOG@_async?4UnprotectedError?$AA@ ; `string'
PUBLIC	??_C@_0BH@HCNLHCJM@_async?4ProtectionError?$AA@	; `string'
PUBLIC	??_C@_0BC@OHLNDENN@_async?4AsyncError?$AA@	; `string'
PUBLIC	??_C@_06HBELJPBO@socket?$AA@			; `string'
PUBLIC	??_C@_0N@GGBJDDFF@_socket?4CAPI?$AA@		; `string'
PUBLIC	_PyAsync_ModInit
EXTRN	PyErr_NewException:PROC
EXTRN	PyModule_AddObject:PROC
EXTRN	PyCapsule_Import:PROC
EXTRN	PyType_Ready:PROC
_BSS	SEGMENT
PyExc_PersistenceError DQ 01H DUP (?)
PyExc_UnprotectedError DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyAsync_ModInit DD imagerel $LN29
	DD	imagerel $LN29+931
	DD	imagerel $unwind$_PyAsync_ModInit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyAsync_ModInit DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0BG@ELDPGIBF@sizeof?$CIPxSocket?$CJ?3?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BG@ELDPGIBF@sizeof?$CIPxSocket?$CJ?3?5?$CFd?6?$AA@ DB 'sizeof(PxSo'
	DB	'cket): %d', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FDBMEIMM@AsyncIOBuffersExhaustedError?$AA@
CONST	SEGMENT
??_C@_0BN@FDBMEIMM@AsyncIOBuffersExhaustedError?$AA@ DB 'AsyncIOBuffersEx'
	DB	'haustedError', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OAALBBIG@WaitTimeoutError?$AA@
CONST	SEGMENT
??_C@_0BB@OAALBBIG@WaitTimeoutError?$AA@ DB 'WaitTimeoutError', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09JIBFAHPJ@WaitError?$AA@
CONST	SEGMENT
??_C@_09JIBFAHPJ@WaitError?$AA@ DB 'WaitError', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KAOKHHGA@NoWaitersError?$AA@
CONST	SEGMENT
??_C@_0P@KAOKHHGA@NoWaitersError?$AA@ DB 'NoWaitersError', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PEDEHLCM@PersistenceError?$AA@
CONST	SEGMENT
??_C@_0BB@PEDEHLCM@PersistenceError?$AA@ DB 'PersistenceError', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GJOLMHBB@AssignmentError?$AA@
CONST	SEGMENT
??_C@_0BA@GJOLMHBB@AssignmentError?$AA@ DB 'AssignmentError', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IACFHLDI@UnprotectedError?$AA@
CONST	SEGMENT
??_C@_0BB@IACFHLDI@UnprotectedError?$AA@ DB 'UnprotectedError', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DCBHJBKD@ProtectionError?$AA@
CONST	SEGMENT
??_C@_0BA@DCBHJBKD@ProtectionError?$AA@ DB 'ProtectionError', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@POMMPANG@AsyncError?$AA@
CONST	SEGMENT
??_C@_0L@POMMPANG@AsyncError?$AA@ DB 'AsyncError', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@HJBHBINJ@_async?4AsyncIOBuffersExhaustedEr@
CONST	SEGMENT
??_C@_0CE@HJBHBINJ@_async?4AsyncIOBuffersExhaustedEr@ DB '_async.AsyncIOB'
	DB	'uffersExhaustedError', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FGCNPAFI@_async?4WaitTimeoutError?$AA@
CONST	SEGMENT
??_C@_0BI@FGCNPAFI@_async?4WaitTimeoutError?$AA@ DB '_async.WaitTimeoutEr'
	DB	'ror', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IFOHHNGP@_async?4WaitError?$AA@
CONST	SEGMENT
??_C@_0BB@IFOHHNGP@_async?4WaitError?$AA@ DB '_async.WaitError', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LDACCOIK@_async?4NoWaitersError?$AA@
CONST	SEGMENT
??_C@_0BG@LDACCOIK@_async?4NoWaitersError?$AA@ DB '_async.NoWaitersError', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@ECBCJKPC@_async?4PersistenceError?$AA@
CONST	SEGMENT
??_C@_0BI@ECBCJKPC@_async?4PersistenceError?$AA@ DB '_async.PersistenceEr'
	DB	'ror', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CJCHCECO@_async?4AssignmentError?$AA@
CONST	SEGMENT
??_C@_0BH@CJCHCECO@_async?4AssignmentError?$AA@ DB '_async.AssignmentErro'
	DB	'r', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DGADJKOG@_async?4UnprotectedError?$AA@
CONST	SEGMENT
??_C@_0BI@DGADJKOG@_async?4UnprotectedError?$AA@ DB '_async.UnprotectedEr'
	DB	'ror', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@HCNLHCJM@_async?4ProtectionError?$AA@
CONST	SEGMENT
??_C@_0BH@HCNLHCJM@_async?4ProtectionError?$AA@ DB '_async.ProtectionErro'
	DB	'r', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OHLNDENN@_async?4AsyncError?$AA@
CONST	SEGMENT
??_C@_0BC@OHLNDENN@_async?4AsyncError?$AA@ DB '_async.AsyncError', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06HBELJPBO@socket?$AA@
CONST	SEGMENT
??_C@_06HBELJPBO@socket?$AA@ DB 'socket', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GGBJDDFF@_socket?4CAPI?$AA@
CONST	SEGMENT
??_C@_0N@GGBJDDFF@_socket?4CAPI?$AA@ DB '_socket.CAPI', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyAsync_ModInit
_TEXT	SEGMENT
_PyAsync_ModInit PROC					; COMDAT

; 8890 : {

$LN29:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 8891 :     PyObject *m;
; 8892 :     PySocketModule_APIObject *socket_api;
; 8893 : 
; 8894 :     if (!PyType_Ready(&PxSocket_Type) < 0)

  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PxSocket_Type
  0000d	e8 00 00 00 00	 call	 PyType_Ready
  00012	33 db		 xor	 ebx, ebx
  00014	85 c0		 test	 eax, eax
  00016	8b cb		 mov	 ecx, ebx
  00018	0f 94 c1	 sete	 cl
  0001b	85 c9		 test	 ecx, ecx
  0001d	79 08		 jns	 SHORT $LN25@PyAsync_Mo@2
$LN28@PyAsync_Mo@2:

; 8895 :         return NULL;

  0001f	33 c0		 xor	 eax, eax

; 9004 : }

  00021	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00025	5b		 pop	 rbx
  00026	c3		 ret	 0
$LN25@PyAsync_Mo@2:

; 8896 : 
; 8897 :     if (!PyType_Ready(&PyXList_Type) < 0)

  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyXList_Type
  0002e	e8 00 00 00 00	 call	 PyType_Ready
  00033	85 c0		 test	 eax, eax
  00035	0f 94 c3	 sete	 bl
  00038	85 db		 test	 ebx, ebx

; 8898 :         return NULL;

  0003a	78 e3		 js	 SHORT $LN28@PyAsync_Mo@2

; 8899 : 
; 8900 :     m = PyModule_Create(&_asyncmodule);

  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_asyncmodule
  00043	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00048	e8 00 00 00 00	 call	 PyModule_Create2
  0004d	48 8b d8	 mov	 rbx, rax

; 8901 :     if (m == NULL)

  00050	48 85 c0	 test	 rax, rax

; 8902 :         return NULL;

  00053	74 ca		 je	 SHORT $LN28@PyAsync_Mo@2

; 8903 : 
; 8904 :     socket_api = PySocketModule_ImportModuleAndAPI();

  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@GGBJDDFF@_socket?4CAPI?$AA@
  0005c	ba 01 00 00 00	 mov	 edx, 1
  00061	e8 00 00 00 00	 call	 PyCapsule_Import

; 8905 :     if (!socket_api)

  00066	48 85 c0	 test	 rax, rax

; 8906 :         return NULL;

  00069	74 b4		 je	 SHORT $LN28@PyAsync_Mo@2

; 8907 :     PySocketModule = *socket_api;

  0006b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PySocketModule
  00072	48 8b d0	 mov	 rdx, rax
  00075	41 b8 88 00 00
	00		 mov	 r8d, 136		; 00000088H
  0007b	e8 00 00 00 00	 call	 memcpy

; 8908 : 
; 8909 :     if (PyModule_AddObject(m, "socket", (PyObject *)&PxSocket_Type))

  00080	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PxSocket_Type
  00087	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06HBELJPBO@socket?$AA@
  0008e	48 8b cb	 mov	 rcx, rbx
  00091	e8 00 00 00 00	 call	 PyModule_AddObject
  00096	85 c0		 test	 eax, eax

; 8910 :         return NULL;

  00098	75 85		 jne	 SHORT $LN28@PyAsync_Mo@2

; 8911 : 
; 8912 :     if (PyModule_AddObject(m, "xlist", (PyObject *)&PyXList_Type))

  0009a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyXList_Type
  000a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KOEEJJMO@xlist?$AA@
  000a8	48 8b cb	 mov	 rcx, rbx
  000ab	e8 00 00 00 00	 call	 PyModule_AddObject
  000b0	85 c0		 test	 eax, eax

; 8913 :         return NULL;

  000b2	0f 85 67 ff ff
	ff		 jne	 $LN28@PyAsync_Mo@2

; 8914 : 
; 8915 :     PyExc_AsyncError = PyErr_NewException("_async.AsyncError", NULL, NULL);

  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@OHLNDENN@_async?4AsyncError?$AA@
  000bf	45 33 c0	 xor	 r8d, r8d
  000c2	33 d2		 xor	 edx, edx
  000c4	e8 00 00 00 00	 call	 PyErr_NewException
  000c9	48 89 05 00 00
	00 00		 mov	 QWORD PTR PyExc_AsyncError, rax

; 8916 :     if (!PyExc_AsyncError)

  000d0	48 85 c0	 test	 rax, rax

; 8917 :         return NULL;

  000d3	0f 84 46 ff ff
	ff		 je	 $LN28@PyAsync_Mo@2

; 8918 : 
; 8919 :     PyExc_ProtectionError = \
; 8920 :         PyErr_NewException("_async.ProtectionError", PyExc_AsyncError, NULL);

  000d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@HCNLHCJM@_async?4ProtectionError?$AA@
  000e0	45 33 c0	 xor	 r8d, r8d
  000e3	48 8b d0	 mov	 rdx, rax
  000e6	e8 00 00 00 00	 call	 PyErr_NewException
  000eb	48 89 05 00 00
	00 00		 mov	 QWORD PTR PyExc_ProtectionError, rax

; 8921 :     if (!PyExc_ProtectionError)

  000f2	48 85 c0	 test	 rax, rax

; 8922 :         return NULL;

  000f5	0f 84 24 ff ff
	ff		 je	 $LN28@PyAsync_Mo@2

; 8923 : 
; 8924 :     PyExc_UnprotectedError = \
; 8925 :         PyErr_NewException("_async.UnprotectedError", PyExc_AsyncError, NULL);

  000fb	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_AsyncError
  00102	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@DGADJKOG@_async?4UnprotectedError?$AA@
  00109	45 33 c0	 xor	 r8d, r8d
  0010c	e8 00 00 00 00	 call	 PyErr_NewException
  00111	48 89 05 00 00
	00 00		 mov	 QWORD PTR PyExc_UnprotectedError, rax

; 8926 :     if (!PyExc_UnprotectedError)

  00118	48 85 c0	 test	 rax, rax

; 8927 :         return NULL;

  0011b	0f 84 fe fe ff
	ff		 je	 $LN28@PyAsync_Mo@2

; 8928 : 
; 8929 :     PyExc_AssignmentError = \
; 8930 :         PyErr_NewException("_async.AssignmentError", PyExc_AsyncError, NULL);

  00121	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_AsyncError
  00128	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@CJCHCECO@_async?4AssignmentError?$AA@
  0012f	45 33 c0	 xor	 r8d, r8d
  00132	e8 00 00 00 00	 call	 PyErr_NewException
  00137	48 89 05 00 00
	00 00		 mov	 QWORD PTR PyExc_AssignmentError, rax

; 8931 :     if (!PyExc_AssignmentError)

  0013e	48 85 c0	 test	 rax, rax

; 8932 :         return NULL;

  00141	0f 84 d8 fe ff
	ff		 je	 $LN28@PyAsync_Mo@2

; 8933 : 
; 8934 :     PyExc_PersistenceError = \
; 8935 :         PyErr_NewException("_async.PersistenceError", PyExc_AsyncError, NULL);

  00147	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_AsyncError
  0014e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@ECBCJKPC@_async?4PersistenceError?$AA@
  00155	45 33 c0	 xor	 r8d, r8d
  00158	e8 00 00 00 00	 call	 PyErr_NewException
  0015d	48 89 05 00 00
	00 00		 mov	 QWORD PTR PyExc_PersistenceError, rax

; 8936 :     if (!PyExc_PersistenceError)

  00164	48 85 c0	 test	 rax, rax

; 8937 :         return NULL;

  00167	0f 84 b2 fe ff
	ff		 je	 $LN28@PyAsync_Mo@2

; 8938 : 
; 8939 :     PyExc_NoWaitersError = \
; 8940 :         PyErr_NewException("_async.NoWaitersError", PyExc_AsyncError, NULL);

  0016d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_AsyncError
  00174	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@LDACCOIK@_async?4NoWaitersError?$AA@
  0017b	45 33 c0	 xor	 r8d, r8d
  0017e	e8 00 00 00 00	 call	 PyErr_NewException
  00183	48 89 05 00 00
	00 00		 mov	 QWORD PTR PyExc_NoWaitersError, rax

; 8941 :     if (!PyExc_NoWaitersError)

  0018a	48 85 c0	 test	 rax, rax

; 8942 :         return NULL;

  0018d	0f 84 8c fe ff
	ff		 je	 $LN28@PyAsync_Mo@2

; 8943 : 
; 8944 :     PyExc_WaitError = \
; 8945 :         PyErr_NewException("_async.WaitError", PyExc_AsyncError, NULL);

  00193	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_AsyncError
  0019a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@IFOHHNGP@_async?4WaitError?$AA@
  001a1	45 33 c0	 xor	 r8d, r8d
  001a4	e8 00 00 00 00	 call	 PyErr_NewException
  001a9	48 89 05 00 00
	00 00		 mov	 QWORD PTR PyExc_WaitError, rax

; 8946 :     if (!PyExc_WaitError)

  001b0	48 85 c0	 test	 rax, rax

; 8947 :         return NULL;

  001b3	0f 84 66 fe ff
	ff		 je	 $LN28@PyAsync_Mo@2

; 8948 : 
; 8949 :     PyExc_WaitTimeoutError = \
; 8950 :         PyErr_NewException("_async.WaitTimeoutError", PyExc_AsyncError, NULL);

  001b9	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_AsyncError
  001c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@FGCNPAFI@_async?4WaitTimeoutError?$AA@
  001c7	45 33 c0	 xor	 r8d, r8d
  001ca	e8 00 00 00 00	 call	 PyErr_NewException
  001cf	48 89 05 00 00
	00 00		 mov	 QWORD PTR PyExc_WaitTimeoutError, rax

; 8951 :     if (!PyExc_WaitTimeoutError)

  001d6	48 85 c0	 test	 rax, rax

; 8952 :         return NULL;

  001d9	0f 84 40 fe ff
	ff		 je	 $LN28@PyAsync_Mo@2

; 8953 : 
; 8954 :     PyExc_AsyncIOBuffersExhaustedError = \
; 8955 :         PyErr_NewException("_async.AsyncIOBuffersExhaustedError",
; 8956 :                            PyExc_AsyncError,
; 8957 :                            NULL);

  001df	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_AsyncError
  001e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@HJBHBINJ@_async?4AsyncIOBuffersExhaustedEr@
  001ed	45 33 c0	 xor	 r8d, r8d
  001f0	e8 00 00 00 00	 call	 PyErr_NewException
  001f5	48 89 05 00 00
	00 00		 mov	 QWORD PTR PyExc_AsyncIOBuffersExhaustedError, rax

; 8958 :     if (!PyExc_AsyncIOBuffersExhaustedError)

  001fc	48 85 c0	 test	 rax, rax

; 8959 :         return NULL;

  001ff	0f 84 1a fe ff
	ff		 je	 $LN28@PyAsync_Mo@2

; 8960 : 
; 8961 :     if (PyModule_AddObject(m, "AsyncError", PyExc_AsyncError))

  00205	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR PyExc_AsyncError
  0020c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@POMMPANG@AsyncError?$AA@
  00213	48 8b cb	 mov	 rcx, rbx
  00216	e8 00 00 00 00	 call	 PyModule_AddObject
  0021b	85 c0		 test	 eax, eax

; 8962 :         return NULL;

  0021d	0f 85 fc fd ff
	ff		 jne	 $LN28@PyAsync_Mo@2

; 8963 : 
; 8964 :     if (PyModule_AddObject(m, "ProtectionError", PyExc_ProtectionError))

  00223	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR PyExc_ProtectionError
  0022a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@DCBHJBKD@ProtectionError?$AA@
  00231	48 8b cb	 mov	 rcx, rbx
  00234	e8 00 00 00 00	 call	 PyModule_AddObject
  00239	85 c0		 test	 eax, eax

; 8965 :         return NULL;

  0023b	0f 85 de fd ff
	ff		 jne	 $LN28@PyAsync_Mo@2

; 8966 : 
; 8967 :     if (PyModule_AddObject(m, "UnprotectedError", PyExc_UnprotectedError))

  00241	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR PyExc_UnprotectedError
  00248	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@IACFHLDI@UnprotectedError?$AA@
  0024f	48 8b cb	 mov	 rcx, rbx
  00252	e8 00 00 00 00	 call	 PyModule_AddObject
  00257	85 c0		 test	 eax, eax

; 8968 :         return NULL;

  00259	0f 85 c0 fd ff
	ff		 jne	 $LN28@PyAsync_Mo@2

; 8969 : 
; 8970 :     if (PyModule_AddObject(m, "AssignmentError", PyExc_AssignmentError))

  0025f	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR PyExc_AssignmentError
  00266	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@GJOLMHBB@AssignmentError?$AA@
  0026d	48 8b cb	 mov	 rcx, rbx
  00270	e8 00 00 00 00	 call	 PyModule_AddObject
  00275	85 c0		 test	 eax, eax

; 8971 :         return NULL;

  00277	0f 85 a2 fd ff
	ff		 jne	 $LN28@PyAsync_Mo@2

; 8972 : 
; 8973 :     if (PyModule_AddObject(m, "PersistenceError", PyExc_PersistenceError))

  0027d	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR PyExc_PersistenceError
  00284	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@PEDEHLCM@PersistenceError?$AA@
  0028b	48 8b cb	 mov	 rcx, rbx
  0028e	e8 00 00 00 00	 call	 PyModule_AddObject
  00293	85 c0		 test	 eax, eax

; 8974 :         return NULL;

  00295	0f 85 84 fd ff
	ff		 jne	 $LN28@PyAsync_Mo@2

; 8975 : 
; 8976 :     if (PyModule_AddObject(m, "NoWaitersError", PyExc_NoWaitersError))

  0029b	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR PyExc_NoWaitersError
  002a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@KAOKHHGA@NoWaitersError?$AA@
  002a9	48 8b cb	 mov	 rcx, rbx
  002ac	e8 00 00 00 00	 call	 PyModule_AddObject
  002b1	85 c0		 test	 eax, eax

; 8977 :         return NULL;

  002b3	0f 85 66 fd ff
	ff		 jne	 $LN28@PyAsync_Mo@2

; 8978 : 
; 8979 :     if (PyModule_AddObject(m, "WaitError", PyExc_WaitError))

  002b9	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR PyExc_WaitError
  002c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09JIBFAHPJ@WaitError?$AA@
  002c7	48 8b cb	 mov	 rcx, rbx
  002ca	e8 00 00 00 00	 call	 PyModule_AddObject
  002cf	85 c0		 test	 eax, eax

; 8980 :         return NULL;

  002d1	0f 85 48 fd ff
	ff		 jne	 $LN28@PyAsync_Mo@2

; 8981 : 
; 8982 :     if (PyModule_AddObject(m, "WaitTimeoutError", PyExc_WaitTimeoutError))

  002d7	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR PyExc_WaitTimeoutError
  002de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@OAALBBIG@WaitTimeoutError?$AA@
  002e5	48 8b cb	 mov	 rcx, rbx
  002e8	e8 00 00 00 00	 call	 PyModule_AddObject
  002ed	85 c0		 test	 eax, eax

; 8983 :         return NULL;

  002ef	0f 85 2a fd ff
	ff		 jne	 $LN28@PyAsync_Mo@2

; 8984 : 
; 8985 :     if (PyModule_AddObject(m, "AsyncIOBuffersExhaustedError",
; 8986 :                            PyExc_AsyncIOBuffersExhaustedError))

  002f5	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR PyExc_AsyncIOBuffersExhaustedError
  002fc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@FDBMEIMM@AsyncIOBuffersExhaustedError?$AA@
  00303	48 8b cb	 mov	 rcx, rbx
  00306	e8 00 00 00 00	 call	 PyModule_AddObject
  0030b	85 c0		 test	 eax, eax

; 8987 :         return NULL;

  0030d	0f 85 0c fd ff
	ff		 jne	 $LN28@PyAsync_Mo@2

; 8988 : 
; 8989 :     Py_INCREF(PyExc_AsyncError);

  00313	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AsyncError
  0031a	e8 00 00 00 00	 call	 _Py_IncRef

; 8990 :     Py_INCREF(PyExc_ProtectionError);

  0031f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ProtectionError
  00326	e8 00 00 00 00	 call	 _Py_IncRef

; 8991 :     Py_INCREF(PyExc_UnprotectedError);

  0032b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_UnprotectedError
  00332	e8 00 00 00 00	 call	 _Py_IncRef

; 8992 :     Py_INCREF(PyExc_AssignmentError);

  00337	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AssignmentError
  0033e	e8 00 00 00 00	 call	 _Py_IncRef

; 8993 :     Py_INCREF(PyExc_PersistenceError);

  00343	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_PersistenceError
  0034a	e8 00 00 00 00	 call	 _Py_IncRef

; 8994 :     Py_INCREF(PyExc_NoWaitersError);

  0034f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_NoWaitersError
  00356	e8 00 00 00 00	 call	 _Py_IncRef

; 8995 :     Py_INCREF(PyExc_WaitError);

  0035b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_WaitError
  00362	e8 00 00 00 00	 call	 _Py_IncRef

; 8996 :     Py_INCREF(PyExc_WaitTimeoutError);

  00367	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_WaitTimeoutError
  0036e	e8 00 00 00 00	 call	 _Py_IncRef

; 8997 :     Py_INCREF(PyExc_AsyncIOBuffersExhaustedError);

  00373	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AsyncIOBuffersExhaustedError
  0037a	e8 00 00 00 00	 call	 _Py_IncRef

; 8998 : 
; 8999 :     /* Uncomment the following (during development) as needed. */
; 9000 :     if (Py_VerboseFlag)

  0037f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  00386	74 12		 je	 SHORT $LN1@PyAsync_Mo@2

; 9001 :         printf("sizeof(PxSocket): %d\n", sizeof(PxSocket));

  00388	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@ELDPGIBF@sizeof?$CIPxSocket?$CJ?3?5?$CFd?6?$AA@
  0038f	ba 50 04 00 00	 mov	 edx, 1104		; 00000450H
  00394	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf
$LN1@PyAsync_Mo@2:

; 9002 : 
; 9003 :     return m;

  0039a	48 8b c3	 mov	 rax, rbx

; 9004 : }

  0039d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  003a1	5b		 pop	 rbx
  003a2	c3		 ret	 0
_PyAsync_ModInit ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@LCHEMHG@DisconnectEx?$AA@		; `string'
PUBLIC	??_C@_0CC@ODEEEBEO@DisconnectEx?$CI?$CJ?5?9?$DO?5WSAEWOULDBLOCK@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$_MAYBE_CLOSE DD imagerel _MAYBE_CLOSE
	DD	imagerel _MAYBE_CLOSE+67
	DD	imagerel $unwind$_MAYBE_CLOSE
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_MAYBE_CLOSE DD imagerel _MAYBE_CLOSE+67
	DD	imagerel _MAYBE_CLOSE+158
	DD	imagerel $chain$0$_MAYBE_CLOSE
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_MAYBE_CLOSE DD imagerel _MAYBE_CLOSE+158
	DD	imagerel _MAYBE_CLOSE+230
	DD	imagerel $chain$1$_MAYBE_CLOSE
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_MAYBE_CLOSE DD 021H
	DD	imagerel _MAYBE_CLOSE
	DD	imagerel _MAYBE_CLOSE+67
	DD	imagerel $unwind$_MAYBE_CLOSE
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_MAYBE_CLOSE DD 020521H
	DD	066405H
	DD	imagerel _MAYBE_CLOSE
	DD	imagerel _MAYBE_CLOSE+67
	DD	imagerel $unwind$_MAYBE_CLOSE
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_MAYBE_CLOSE DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0N@LCHEMHG@DisconnectEx?$AA@
CONST	SEGMENT
??_C@_0N@LCHEMHG@DisconnectEx?$AA@ DB 'DisconnectEx', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@ODEEEBEO@DisconnectEx?$CI?$CJ?5?9?$DO?5WSAEWOULDBLOCK@
CONST	SEGMENT
??_C@_0CC@ODEEEBEO@DisconnectEx?$CI?$CJ?5?9?$DO?5WSAEWOULDBLOCK@ DB 'Disc'
	DB	'onnectEx() -> WSAEWOULDBLOCK!', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _MAYBE_CLOSE
_TEXT	SEGMENT
c$ = 48
_MAYBE_CLOSE PROC					; COMDAT

; 5746 : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 5747 :     PxSocket *s = (PxSocket *)c->io_obj;

  0000a	48 8b 99 a8 32
	00 00		 mov	 rbx, QWORD PTR [rcx+12968]
  00011	48 8b f9	 mov	 rdi, rcx

; 5748 :     if ((Px_SOCKFLAGS(s) & Px_SOCKFLAGS_CLOSE_SCHEDULED) ||
; 5749 :        !(s->data_received))

  00014	f7 83 f4 01 00
	00 00 00 40 00	 test	 DWORD PTR [rbx+500], 4194304 ; 00400000H
  0001e	75 17		 jne	 SHORT $LN7@MAYBE_CLOS
  00020	48 83 bb c8 02
	00 00 00	 cmp	 QWORD PTR [rbx+712], 0
  00028	74 0d		 je	 SHORT $LN7@MAYBE_CLOS

; 5779 :     }
; 5780 :     return 0;

  0002a	33 c0		 xor	 eax, eax

; 5781 : }

  0002c	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00031	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00035	5f		 pop	 rdi
  00036	c3		 ret	 0
$LN7@MAYBE_CLOS:

; 5750 :     {
; 5751 :         BOOL success;
; 5752 :         char error = 0;
; 5753 : 
; 5754 :         assert(!(Px_SOCKFLAGS(s) & Px_SOCKFLAGS_CLOSED));
; 5755 : 
; 5756 :         s->io_op = PxSocket_IO_CLOSE;
; 5757 : 
; 5758 :         success = DisconnectEx(s->sock_fd, NULL, 0 /*TF_REUSE_SOCKET*/, 0);

  00037	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  0003b	45 33 c9	 xor	 r9d, r9d
  0003e	45 33 c0	 xor	 r8d, r8d
  00041	33 d2		 xor	 edx, edx
  00043	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  00048	c7 83 50 03 00
	00 20 00 00 00	 mov	 DWORD PTR [rbx+848], 32	; 00000020H
  00052	40 32 f6	 xor	 sil, sil
  00055	ff 15 68 00 00
	00		 call	 QWORD PTR PySocketModule+104

; 5759 :         if (!success) {

  0005b	85 c0		 test	 eax, eax
  0005d	75 1e		 jne	 SHORT $LN4@MAYBE_CLOS

; 5760 :             if (WSAGetLastError() == WSAEWOULDBLOCK)

  0005f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  00065	3d 33 27 00 00	 cmp	 eax, 10035		; 00002733H
  0006a	75 0e		 jne	 SHORT $LN5@MAYBE_CLOS

; 5761 :                 Py_FatalError("DisconnectEx() -> WSAEWOULDBLOCK!");

  0006c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@ODEEEBEO@DisconnectEx?$CI?$CJ?5?9?$DO?5WSAEWOULDBLOCK@
  00073	e8 00 00 00 00	 call	 Py_FatalError

; 5762 :             else

  00078	eb 03		 jmp	 SHORT $LN4@MAYBE_CLOS
$LN5@MAYBE_CLOS:

; 5763 :                 error = 1;

  0007a	40 b6 01	 mov	 sil, 1
$LN4@MAYBE_CLOS:

; 5764 :         }
; 5765 : 
; 5766 :         Px_SOCKFLAGS(s) &= ~Px_SOCKFLAGS_CLOSE_SCHEDULED;
; 5767 :         Px_SOCKFLAGS(s) &= ~Px_SOCKFLAGS_CONNECTED;

  0007d	81 a3 f4 01 00
	00 ef ff bf ff	 and	 DWORD PTR [rbx+500], -4194321 ; ffffffffffbfffefH

; 5768 :         Px_SOCKFLAGS(s) |=  Px_SOCKFLAGS_CLOSED;

  00087	81 8b f4 01 00
	00 00 00 80 00	 or	 DWORD PTR [rbx+500], 8388608 ; 00800000H

; 5769 : 
; 5770 :         if (error)

  00091	40 84 f6	 test	 sil, sil
  00094	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]

; 5771 :             PxSocket_HandleException(c, "DisconnectEx", 0);

  00099	48 8b cf	 mov	 rcx, rdi
  0009c	74 11		 je	 SHORT $LN3@MAYBE_CLOS
  0009e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@LCHEMHG@DisconnectEx?$AA@
  000a5	45 33 c0	 xor	 r8d, r8d
  000a8	e8 00 00 00 00	 call	 PxSocket_HandleException

; 5772 :         else

  000ad	eb 16		 jmp	 SHORT $LN2@MAYBE_CLOS
$LN3@MAYBE_CLOS:

; 5773 :             PxSocket_HandleCallback(c, "connection_closed", "(O)", s);

  000af	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  000b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@PBJEBHHN@connection_closed?$AA@
  000bd	4c 8b cb	 mov	 r9, rbx
  000c0	e8 00 00 00 00	 call	 PxSocket_HandleCallback
$LN2@MAYBE_CLOS:

; 5774 : 
; 5775 :         if (PxSocket_IS_SERVERCLIENT(s))

  000c5	f6 83 f4 01 00
	00 80		 test	 BYTE PTR [rbx+500], 128	; 00000080H
  000cc	74 08		 je	 SHORT $LN1@MAYBE_CLOS

; 5776 :             PxServerSocket_ClientClosed(s);

  000ce	48 8b cb	 mov	 rcx, rbx
  000d1	e8 00 00 00 00	 call	 PxServerSocket_ClientClosed
$LN1@MAYBE_CLOS:

; 5777 : 
; 5778 :         return 1;

  000d6	b8 01 00 00 00	 mov	 eax, 1

; 5781 : }

  000db	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000e0	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000e4	5f		 pop	 rdi
  000e5	c3		 ret	 0
_MAYBE_CLOSE ENDP
_TEXT	ENDS
PUBLIC	??_C@_05KHNIPJOL@?$CIOni?$CJ?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel_private.h
pdata	SEGMENT
$pdata$_MAYBE_DO_SEND_FAILED DD imagerel _MAYBE_DO_SEND_FAILED
	DD	imagerel _MAYBE_DO_SEND_FAILED+88
	DD	imagerel $unwind$_MAYBE_DO_SEND_FAILED
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_MAYBE_DO_SEND_FAILED DD imagerel _MAYBE_DO_SEND_FAILED+88
	DD	imagerel _MAYBE_DO_SEND_FAILED+204
	DD	imagerel $chain$0$_MAYBE_DO_SEND_FAILED
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_MAYBE_DO_SEND_FAILED DD imagerel _MAYBE_DO_SEND_FAILED+204
	DD	imagerel _MAYBE_DO_SEND_FAILED+261
	DD	imagerel $chain$1$_MAYBE_DO_SEND_FAILED
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_MAYBE_DO_SEND_FAILED DD 021H
	DD	imagerel _MAYBE_DO_SEND_FAILED
	DD	imagerel _MAYBE_DO_SEND_FAILED+88
	DD	imagerel $unwind$_MAYBE_DO_SEND_FAILED
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_MAYBE_DO_SEND_FAILED DD 020521H
	DD	065405H
	DD	imagerel _MAYBE_DO_SEND_FAILED
	DD	imagerel _MAYBE_DO_SEND_FAILED+88
	DD	imagerel $unwind$_MAYBE_DO_SEND_FAILED
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_MAYBE_DO_SEND_FAILED DD 060f01H
	DD	08640fH
	DD	07340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_05KHNIPJOL@?$CIOni?$CJ?$AA@
CONST	SEGMENT
??_C@_05KHNIPJOL@?$CIOni?$CJ?$AA@ DB '(Oni)', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
CONST	ENDS
;	COMDAT _MAYBE_DO_SEND_FAILED
_TEXT	SEGMENT
s$ = 48
_MAYBE_DO_SEND_FAILED PROC				; COMDAT

; 5802 : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 5803 :     if ((s->io_op == PxSocket_IO_SEND) && PxSocket_HAS_SEND_FAILED(s))

  0000f	83 b9 50 03 00
	00 08		 cmp	 DWORD PTR [rcx+848], 8
  00016	48 8b d9	 mov	 rbx, rcx
  00019	0f 85 d4 00 00
	00		 jne	 $LN1@MAYBE_DO_S
  0001f	f6 81 f8 01 00
	00 01		 test	 BYTE PTR [rcx+504], 1
  00026	0f 84 c7 00 00
	00		 je	 $LN1@MAYBE_DO_S

; 5804 :     {
; 5805 :         PyObject *result;
; 5806 :         Context *c = s->ctx;

  0002c	48 8b b9 00 02
	00 00		 mov	 rdi, QWORD PTR [rcx+512]

; 5807 :         PyObject *args, *func;
; 5808 :         args = Py_BuildValue("(Oni)", s, s->send_id, c->io_result);

  00033	4c 8b 81 68 02
	00 00		 mov	 r8, QWORD PTR [rcx+616]
  0003a	48 8b d1	 mov	 rdx, rcx
  0003d	44 8b 8f 94 32
	00 00		 mov	 r9d, DWORD PTR [rdi+12948]
  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05KHNIPJOL@?$CIOni?$CJ?$AA@
  0004b	e8 00 00 00 00	 call	 Py_BuildValue
  00050	48 8b f0	 mov	 rsi, rax

; 5809 :         if (!args)

  00053	48 85 c0	 test	 rax, rax

; 5810 :             PxSocket_EXCEPTION();

  00056	74 74		 je	 SHORT $LN18@MAYBE_DO_S

; 5811 :         READ_LOCK(s);

  00058	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp
  0005d	48 8d 6b 28	 lea	 rbp, QWORD PTR [rbx+40]
  00061	48 8b cd	 mov	 rcx, rbp
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AcquireSRWLockShared

; 5812 :         func = PxSocket_GET_ATTR("send_failed");

  0006a	48 8b 8b 90 02
	00 00		 mov	 rcx, QWORD PTR [rbx+656]
  00071	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@DFELAKCA@send_failed?$AA@
  00078	e8 00 00 00 00	 call	 PyObject_HasAttrString
  0007d	85 c0		 test	 eax, eax
  0007f	74 18		 je	 SHORT $LN12@MAYBE_DO_S
  00081	48 8b 8b 90 02
	00 00		 mov	 rcx, QWORD PTR [rbx+656]
  00088	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@DFELAKCA@send_failed?$AA@
  0008f	e8 00 00 00 00	 call	 PyObject_GetAttrString
  00094	48 8b d8	 mov	 rbx, rax
  00097	eb 07		 jmp	 SHORT $LN13@MAYBE_DO_S
$LN12@MAYBE_DO_S:
  00099	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
$LN13@MAYBE_DO_S:

; 5813 :         READ_UNLOCK(s);

  000a0	48 8b cd	 mov	 rcx, rbp
  000a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseSRWLockShared

; 5814 :         assert(func);
; 5815 :         result = PyObject_CallObject(func, args);

  000a9	48 8b d6	 mov	 rdx, rsi
  000ac	48 8b cb	 mov	 rcx, rbx
  000af	e8 00 00 00 00	 call	 PyObject_CallObject

; 5816 :         if (null_with_exc_or_non_none_return_type(result, c->pstate))

  000b4	48 8b 97 e8 00
	00 00		 mov	 rdx, QWORD PTR [rdi+232]
  000bb	48 8b c8	 mov	 rcx, rax
  000be	e8 00 00 00 00	 call	 null_with_exc_or_non_none_return_type
  000c3	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
  000c8	85 c0		 test	 eax, eax
  000ca	74 27		 je	 SHORT $LN1@MAYBE_DO_S
$LN18@MAYBE_DO_S:

; 5817 :             PxSocket_EXCEPTION();

  000cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  000d3	45 33 c0	 xor	 r8d, r8d
  000d6	48 8b cf	 mov	 rcx, rdi
  000d9	e8 00 00 00 00	 call	 PxSocket_HandleException

; 5818 :     }
; 5819 : 
; 5820 :     return 0;
; 5821 : 
; 5822 : end:
; 5823 :     return 1;

  000de	b8 01 00 00 00	 mov	 eax, 1
$end$129830:

; 5824 : }

  000e3	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000e8	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000ed	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000f1	5f		 pop	 rdi
  000f2	c3		 ret	 0
$LN1@MAYBE_DO_S:
  000f3	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000f8	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000fd	33 c0		 xor	 eax, eax
  000ff	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00103	5f		 pop	 rdi
  00104	c3		 ret	 0
_MAYBE_DO_SEND_FAILED ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EP@FCIAAFM@data_received?$CI?$CJ?5did?5not?5return?5a@ ; `string'
PUBLIC	??_C@_0BD@BIALAGNA@CreateThreadpoolIo?$AA@	; `string'
PUBLIC	??_C@_0EP@KOIIEICF@send_complete?$CI?$CJ?5did?5not?5return?5a@ ; `string'
PUBLIC	??_C@_0FB@KBEECAJI@connection_made?$CI?$CJ?5did?5not?5return@ ; `string'
PUBLIC	??_C@_0DN@CMLMIFME@failed?5to?5extract?5sendable?5objec@ ; `string'
PUBLIC	??_C@_0BC@NEGKDJJD@shutdown?$CISD_SEND?$CJ?$AA@	; `string'
PUBLIC	??_C@_0BF@KEAFFCFE@shutdown?$CISD_RECEIVE?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BA@KFHPAKD@WSAEWOULDBLOCK?$CB?$AA@	; `string'
PUBLIC	??_C@_0BB@FBEBJMAM@ERROR_IO_PENDING?$AA@	; `string'
PUBLIC	??_C@_0BI@MJHHLNDN@unknown?5error?5code?3?5?$CFd?6?$AA@ ; `string'
PUBLIC	??_C@_0BA@JMGJABEC@ERROR_MORE_DATA?$AA@		; `string'
PUBLIC	??_C@_0HI@DGAEDMOP@protocol?5has?5data_received?$HMlines@ ; `string'
PUBLIC	??_C@_0KE@KPJBDGKF@protocol?8s?5connection_made?$CI?$CJ?5cal@ ; `string'
PUBLIC	PxSocketClient_Callback
PUBLIC	??_C@_0EF@NHKFODOC@data_received?5callback?5scheduled@ ; `string'
PUBLIC	PxSocket_IOLoop
EXTRN	__imp_WSARecv:PROC
EXTRN	PyLong_FromSize_t:PROC
EXTRN	__imp_Sleep:PROC
EXTRN	__imp_WSASend:PROC
EXTRN	__imp_shutdown:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocket_IOLoop DD imagerel $LN351
	DD	imagerel $LN351+4324
	DD	imagerel $unwind$PxSocket_IOLoop
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocket_IOLoop DD 091401H
	DD	0f00dc214H
	DD	0d009e00bH
	DD	07005c007H
	DD	030036004H
	DD	05002H
xdata	ENDS
;	COMDAT ??_C@_0EP@FCIAAFM@data_received?$CI?$CJ?5did?5not?5return?5a@
CONST	SEGMENT
??_C@_0EP@FCIAAFM@data_received?$CI?$CJ?5did?5not?5return?5a@ DB 'data_re'
	DB	'ceived() did not return a sendable object (bytes, bytearray o'
	DB	'r unicode)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BIALAGNA@CreateThreadpoolIo?$AA@
CONST	SEGMENT
??_C@_0BD@BIALAGNA@CreateThreadpoolIo?$AA@ DB 'CreateThreadpoolIo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@KOIIEICF@send_complete?$CI?$CJ?5did?5not?5return?5a@
CONST	SEGMENT
??_C@_0EP@KOIIEICF@send_complete?$CI?$CJ?5did?5not?5return?5a@ DB 'send_c'
	DB	'omplete() did not return a sendable object (bytes, bytearray '
	DB	'or unicode)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@KBEECAJI@connection_made?$CI?$CJ?5did?5not?5return@
CONST	SEGMENT
??_C@_0FB@KBEECAJI@connection_made?$CI?$CJ?5did?5not?5return@ DB 'connect'
	DB	'ion_made() did not return a sendable object (bytes, bytearray'
	DB	' or unicode)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@CMLMIFME@failed?5to?5extract?5sendable?5objec@
CONST	SEGMENT
??_C@_0DN@CMLMIFME@failed?5to?5extract?5sendable?5objec@ DB 'failed to ex'
	DB	'tract sendable object from initial_bytes_to_send', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NEGKDJJD@shutdown?$CISD_SEND?$CJ?$AA@
CONST	SEGMENT
??_C@_0BC@NEGKDJJD@shutdown?$CISD_SEND?$CJ?$AA@ DB 'shutdown(SD_SEND)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KEAFFCFE@shutdown?$CISD_RECEIVE?$CJ?$AA@
CONST	SEGMENT
??_C@_0BF@KEAFFCFE@shutdown?$CISD_RECEIVE?$CJ?$AA@ DB 'shutdown(SD_RECEIV'
	DB	'E)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KFHPAKD@WSAEWOULDBLOCK?$CB?$AA@
CONST	SEGMENT
??_C@_0BA@KFHPAKD@WSAEWOULDBLOCK?$CB?$AA@ DB 'WSAEWOULDBLOCK!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FBEBJMAM@ERROR_IO_PENDING?$AA@
CONST	SEGMENT
??_C@_0BB@FBEBJMAM@ERROR_IO_PENDING?$AA@ DB 'ERROR_IO_PENDING', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MJHHLNDN@unknown?5error?5code?3?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BI@MJHHLNDN@unknown?5error?5code?3?5?$CFd?6?$AA@ DB 'unknown error'
	DB	' code: %d', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JMGJABEC@ERROR_MORE_DATA?$AA@
CONST	SEGMENT
??_C@_0BA@JMGJABEC@ERROR_MORE_DATA?$AA@ DB 'ERROR_MORE_DATA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0HI@DGAEDMOP@protocol?5has?5data_received?$HMlines@
CONST	SEGMENT
??_C@_0HI@DGAEDMOP@protocol?5has?5data_received?$HMlines@ DB 'protocol ha'
	DB	's data_received|lines_received callback, but send_complete() '
	DB	'is sending more data, so it may never be called', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0KE@KPJBDGKF@protocol?8s?5connection_made?$CI?$CJ?5cal@
CONST	SEGMENT
??_C@_0KE@KPJBDGKF@protocol?8s?5connection_made?$CI?$CJ?5cal@ DB 'protoco'
	DB	'l''s connection_made() callback may never be called (because '
	DB	'send_complete() is sending more data on the back of the succe'
	DB	'ssful sending of the initial_bytes)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@NHKFODOC@data_received?5callback?5scheduled@
CONST	SEGMENT
??_C@_0EF@NHKFODOC@data_received?5callback?5scheduled@ DB 'data_received '
	DB	'callback scheduled sendfile but returned non-None data', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PxSocket_IOLoop
_TEXT	SEGMENT
args$1$ = 64
snapshot$ = 72
fd$1$ = 80
bytes$1$ = 88
bytes$ = 176
wsa_error$ = 176
args$ = 176
recv_nbytes$ = 176
s$ = 176
recv_flags$ = 184
nbytes$ = 192
sbuf$ = 200
PxSocket_IOLoop PROC					; COMDAT

; 5873 : {

$LN351:
  00000	40 55		 push	 rbp
  00002	53		 push	 rbx
  00003	56		 push	 rsi
  00004	57		 push	 rdi
  00005	41 54		 push	 r12
  00007	41 55		 push	 r13
  00009	41 56		 push	 r14
  0000b	41 57		 push	 r15
  0000d	48 8b ec	 mov	 rbp, rsp
  00010	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 5874 :     PyObject *func, *args, *result;
; 5875 :     PyBytesObject *bytes;
; 5876 :     int next_opcode = 0;
; 5877 :     char *syscall;
; 5878 :     TLS *t = &tls;
; 5879 :     Context *c = ctx;

  00014	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index

; 5880 :     char *callback;
; 5881 :     char *buf = NULL;
; 5882 :     DWORD err, wsa_error, nbytes;
; 5883 :     SOCKET fd;
; 5884 :     HANDLE h;
; 5885 :     WSABUF *w = NULL, *old_wsabuf = NULL;
; 5886 :     SBUF *sbuf = NULL;
; 5887 :     RBUF *rbuf = NULL;
; 5888 :     ULONG recv_avail = 0;
; 5889 :     ULONG rbuf_size = 0;
; 5890 :     DWORD recv_flags = 0;
; 5891 :     DWORD recv_nbytes = 0;
; 5892 :     OVERLAPPED *ol = NULL;
; 5893 :     Heap *snapshot = NULL;
; 5894 :     int i, n, is_sbuf = 0;
; 5895 :     TRANSMIT_FILE_BUFFERS *tf = NULL;
; 5896 : 
; 5897 :     fd = s->sock_fd;

  0001a	4c 8b 69 60	 mov	 r13, QWORD PTR [rcx+96]
  0001e	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00027	48 8b 04 d0	 mov	 rax, QWORD PTR [rax+rdx*8]
  0002b	33 db		 xor	 ebx, ebx
  0002d	41 bf 00 00 00
	00		 mov	 r15d, OFFSET FLAT:ctx
  00033	4d 8b 3c 07	 mov	 r15, QWORD PTR [r15+rax]
  00037	48 8b f1	 mov	 rsi, rcx
  0003a	48 89 5d 60	 mov	 QWORD PTR sbuf$[rbp-104], rbx
  0003e	89 5d 50	 mov	 DWORD PTR recv_flags$[rbp-104], ebx
  00041	89 5d 48	 mov	 DWORD PTR recv_nbytes$[rbp-104], ebx
  00044	4c 89 6d e8	 mov	 QWORD PTR fd$1$[rbp-104], r13

; 5898 : 
; 5899 :     assert(s->ctx == c);
; 5900 :     assert(c->io_obj == (PyObject *)s);
; 5901 : 
; 5902 :     PxSocket_UpdateConnectTime(s);

  00048	e8 00 00 00 00	 call	 PxSocket_UpdateConnectTime

; 5903 : 
; 5904 :     InterlockedIncrement(&_PxSocket_ActiveIOLoops);

  0004d	f0 ff 05 00 00
	00 00		 lock inc DWORD PTR _PxSocket_ActiveIOLoops

; 5905 : 
; 5906 :     s->last_thread_id = s->this_thread_id;

  00054	8b 86 0c 02 00
	00		 mov	 eax, DWORD PTR [rsi+524]
  0005a	89 86 08 02 00
	00		 mov	 DWORD PTR [rsi+520], eax

; 5907 :     s->this_thread_id = _Py_get_current_thread_id();

  00060	65 8b 04 25 48
	00 00 00	 mov	 eax, DWORD PTR gs:72

; 5908 :     s->ioloops++;

  00068	ff 86 10 02 00
	00		 inc	 DWORD PTR [rsi+528]
  0006e	89 86 0c 02 00
	00		 mov	 DWORD PTR [rsi+524], eax

; 5909 : 
; 5910 :     switch (s->io_op) {

  00074	8b 86 50 03 00
	00		 mov	 eax, DWORD PTR [rsi+848]
  0007a	85 c0		 test	 eax, eax
  0007c	0f 8e 22 02 00
	00		 jle	 $LN331@PxSocket_I@4
  00082	83 f8 02	 cmp	 eax, 2
  00085	0f 8e 19 02 00
	00		 jle	 $LN331@PxSocket_I@4
  0008b	83 f8 04	 cmp	 eax, 4
  0008e	0f 84 0f 01 00
	00		 je	 $LN332@PxSocket_I@4
  00094	83 f8 08	 cmp	 eax, 8
  00097	0f 84 a9 00 00
	00		 je	 $overlapped_send_callback$129909
  0009d	83 f8 40	 cmp	 eax, 64			; 00000040H
  000a0	0f 85 fe 01 00
	00		 jne	 $LN331@PxSocket_I@4

; 6732 :     }
; 6733 : 
; 6734 :     assert(0);
; 6735 : 
; 6736 : overlapped_sendfile_callback:
; 6737 :     /* Entry point for an overlapped TransmitFile */
; 6738 :     if (s->sendfile_snapshot)

  000a6	48 8d 96 28 03
	00 00		 lea	 rdx, QWORD PTR [rsi+808]
$overlapped_sendfile_callback$129911:
  000ad	48 39 1a	 cmp	 QWORD PTR [rdx], rbx
  000b0	74 08		 je	 SHORT $LN24@PxSocket_I@4

; 6739 :         PxContext_RollbackHeap(c, &s->sendfile_snapshot);

  000b2	49 8b cf	 mov	 rcx, r15
  000b5	e8 00 00 00 00	 call	 PxContext_RollbackHeap
$LN24@PxSocket_I@4:

; 6740 : 
; 6741 :     assert(c->ol == s->ol);
; 6742 :     wsa_error = c->io_result;

  000ba	45 8b b7 94 32
	00 00		 mov	 r14d, DWORD PTR [r15+12948]

; 6743 : 
; 6744 :     if (wsa_error != NO_ERROR) {

  000c1	45 85 f6	 test	 r14d, r14d
  000c4	74 1c		 je	 SHORT $LN23@PxSocket_I@4

; 6745 :         s->send_id--;
; 6746 :         goto send_failed;

  000c6	4c 8b 65 48	 mov	 r12, QWORD PTR args$[rbp-104]
  000ca	48 8b 7d 48	 mov	 rdi, QWORD PTR bytes$[rbp-104]
  000ce	48 ff 8e 68 02
	00 00		 dec	 QWORD PTR [rsi+616]
  000d5	4c 89 65 d8	 mov	 QWORD PTR args$1$[rbp-104], r12
  000d9	48 89 7d f0	 mov	 QWORD PTR bytes$1$[rbp-104], rdi
  000dd	e9 81 0a 00 00	 jmp	 $recv_failed$130233
$LN23@PxSocket_I@4:

; 6747 :     }
; 6748 : 
; 6749 :     /* xxx todo: check s->ol->InternalHigh against expected filesize? */
; 6750 : 
; 6751 :     CloseHandle(s->sendfile_handle);

  000e2	48 8b 8e 20 03
	00 00		 mov	 rcx, QWORD PTR [rsi+800]
  000e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 6752 :     s->send_nbytes += s->sendfile_nbytes;

  000ef	8b 86 1c 03 00
	00		 mov	 eax, DWORD PTR [rsi+796]

; 6753 :     s->sendfile_nbytes = 0;
; 6754 :     s->sendfile_handle = 0;
; 6755 :     memset(&s->sendfile_tfbuf, 0, sizeof(TRANSMIT_FILE_BUFFERS));
; 6756 :     Px_SOCKFLAGS(s) &= ~Px_SOCKFLAGS_SENDFILE_SCHEDULED;
; 6757 : 
; 6758 :     goto send_complete;

  000f5	48 8b 7d 48	 mov	 rdi, QWORD PTR bytes$[rbp-104]
  000f9	48 01 86 78 02
	00 00		 add	 QWORD PTR [rsi+632], rax
  00100	33 c0		 xor	 eax, eax
  00102	89 9e 1c 03 00
	00		 mov	 DWORD PTR [rsi+796], ebx
  00108	48 89 9e 20 03
	00 00		 mov	 QWORD PTR [rsi+800], rbx
  0010f	48 89 86 30 03
	00 00		 mov	 QWORD PTR [rsi+816], rax
  00116	48 89 86 38 03
	00 00		 mov	 QWORD PTR [rsi+824], rax
  0011d	48 89 86 40 03
	00 00		 mov	 QWORD PTR [rsi+832], rax
  00124	48 89 86 48 03
	00 00		 mov	 QWORD PTR [rsi+840], rax
  0012b	48 8b 45 48	 mov	 rax, QWORD PTR args$[rbp-104]
  0012f	81 a6 f4 01 00
	00 ff ff ff bf	 and	 DWORD PTR [rsi+500], -1073741825 ; ffffffffbfffffffH
  00139	48 89 7d f0	 mov	 QWORD PTR bytes$1$[rbp-104], rdi
  0013d	48 89 45 d8	 mov	 QWORD PTR args$1$[rbp-104], rax
  00141	e9 c9 05 00 00	 jmp	 $send_complete$130077
$overlapped_send_callback$129909:

; 6202 :     }
; 6203 : 
; 6204 :     assert(0);
; 6205 : 
; 6206 : overlapped_send_callback:
; 6207 :     /* Entry point for an overlapped send. */
; 6208 : 
; 6209 :     sbuf = s->sbuf;

  00146	48 8b 9e 68 03
	00 00		 mov	 rbx, QWORD PTR [rsi+872]

; 6210 :     if (sbuf->snapshot)

  0014d	48 83 7b 10 00	 cmp	 QWORD PTR [rbx+16], 0
  00152	48 89 5d 60	 mov	 QWORD PTR sbuf$[rbp-104], rbx
  00156	48 8d 53 10	 lea	 rdx, QWORD PTR [rbx+16]
  0015a	74 08		 je	 SHORT $LN133@PxSocket_I@4

; 6211 :         PxContext_RollbackHeap(c, &sbuf->snapshot);

  0015c	49 8b cf	 mov	 rcx, r15
  0015f	e8 00 00 00 00	 call	 PxContext_RollbackHeap
$LN133@PxSocket_I@4:

; 6212 :     assert(c->ol == s->ol);
; 6213 :     wsa_error = c->io_result;

  00164	45 8b b7 94 32
	00 00		 mov	 r14d, DWORD PTR [r15+12948]

; 6214 : 
; 6215 :     if (wsa_error != NO_ERROR) {
; 6216 :         s->send_id--;
; 6217 :         goto send_failed;

  0016b	48 8b 7d 48	 mov	 rdi, QWORD PTR bytes$[rbp-104]
  0016f	48 89 7d f0	 mov	 QWORD PTR bytes$1$[rbp-104], rdi
  00173	45 85 f6	 test	 r14d, r14d
  00176	74 14		 je	 SHORT $LN132@PxSocket_I@4
  00178	4c 8b 65 48	 mov	 r12, QWORD PTR args$[rbp-104]
  0017c	48 ff 8e 68 02
	00 00		 dec	 QWORD PTR [rsi+616]
  00183	4c 89 65 d8	 mov	 QWORD PTR args$1$[rbp-104], r12
  00187	e9 d7 09 00 00	 jmp	 $recv_failed$130233
$LN132@PxSocket_I@4:

; 6218 :     }
; 6219 : 
; 6220 :     s->send_nbytes += sbuf->w.len;

  0018c	8b 43 40	 mov	 eax, DWORD PTR [rbx+64]
  0018f	48 01 86 78 02
	00 00		 add	 QWORD PTR [rsi+632], rax
  00196	48 8b 45 48	 mov	 rax, QWORD PTR args$[rbp-104]
  0019a	48 89 45 d8	 mov	 QWORD PTR args$1$[rbp-104], rax
  0019e	e9 6c 05 00 00	 jmp	 $send_complete$130077
$LN332@PxSocket_I@4:

; 5911 :         case PxSocket_IO_ACCEPT:
; 5912 :         case PxSocket_IO_CONNECT:
; 5913 :             goto start;
; 5914 : 
; 5915 :         case PxSocket_IO_SEND:
; 5916 :             goto overlapped_send_callback;
; 5917 : 
; 5918 :         case PxSocket_IO_SENDFILE:
; 5919 :             goto overlapped_sendfile_callback;
; 5920 : 
; 5921 :         case PxSocket_IO_RECV:
; 5922 :             goto overlapped_recv_callback;
; 5923 : 
; 5924 :         default:
; 5925 :             assert(0);
; 5926 : 
; 5927 :     }
; 5928 :     goto start;
; 5929 : 
; 5930 : dispatch:
; 5931 :     switch (next_opcode) {

  001a3	4c 8b 65 48	 mov	 r12, QWORD PTR args$[rbp-104]
  001a7	48 8b 7d 48	 mov	 rdi, QWORD PTR bytes$[rbp-104]
  001ab	4c 89 65 d8	 mov	 QWORD PTR args$1$[rbp-104], r12
  001af	48 89 7d f0	 mov	 QWORD PTR bytes$1$[rbp-104], rdi
$overlapped_recv_callback$129913:

; 6525 :         goto recv_failed;
; 6526 :     }
; 6527 : 
; 6528 :     assert(0);
; 6529 : 
; 6530 : overlapped_recv_callback:
; 6531 :     /* Entry point for an overlapped recv. */
; 6532 :     assert(!snapshot);
; 6533 :     rbuf = s->rbuf;
; 6534 :     assert(c->ol == s->ol);
; 6535 :     assert(s->ol == &rbuf->ol);
; 6536 :     wsa_error = c->io_result;

  001b3	45 8b b7 94 32
	00 00		 mov	 r14d, DWORD PTR [r15+12948]
  001ba	48 8b 96 70 03
	00 00		 mov	 rdx, QWORD PTR [rsi+880]

; 6537 : 
; 6538 :     if (wsa_error != NO_ERROR) {

  001c1	45 85 f6	 test	 r14d, r14d
  001c4	0f 85 21 0b 00
	00		 jne	 $LN282@PxSocket_I@4

; 6542 :         goto recv_failed;
; 6543 :     }
; 6544 :     rbuf = NULL;
; 6545 : 
; 6546 :     assert(recv_nbytes == 0);
; 6547 :     recv_nbytes = (DWORD)s->ol->InternalHigh;

  001ca	48 8b 86 80 03
	00 00		 mov	 rax, QWORD PTR [rsi+896]
  001d1	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  001d4	89 4d 48	 mov	 DWORD PTR recv_nbytes$[rbp-104], ecx

; 6548 :     if (recv_nbytes == 0)

  001d7	85 c9		 test	 ecx, ecx
  001d9	0f 84 26 0e 00
	00		 je	 $connection_closed$130177
$process_data_received$130198:

; 6549 :         goto connection_closed;
; 6550 : 
; 6551 :     /* Intentional follow-on to process_data_received... */
; 6552 : 
; 6553 : process_data_received:
; 6554 :     /*
; 6555 :      * So, this is the point where we need to check the data we've received
; 6556 :      * for the sole purpose of seeing if we need to a) receive more data, or
; 6557 :      * b) invoke the protocol's (data|line)_received callback with the data.
; 6558 :      *
; 6559 :      * The former situation will occur when receive filters have been set on
; 6560 :      * the protocol, such as 'lines_mode' (we keep recv'ing until we find a
; 6561 :      * linebreak) or one of the 'expect_*' filters (expect_command, expect_
; 6562 :      * regex etc).  Or any number of other filters that allow us to determine
; 6563 :      * within C code (i.e. within this IO loop) whether or not we've received
; 6564 :      * enough data (without the need to call back into Python).
; 6565 :      *
; 6566 :      * Now, with all that being said, none of that functionality is
; 6567 :      * implemented yet, so the code below simply unsets the 'receive more'
; 6568 :      * flag and continues on to 'do data received callback'.
; 6569 :      *
; 6570 :      * (Which is why the next two lines look retarded.)
; 6571 :      */
; 6572 :     Px_SOCKFLAGS(s) &= ~Px_SOCKFLAGS_RECV_MORE;

  001df	83 a6 f4 01 00
	00 f7		 and	 DWORD PTR [rsi+500], -9

; 6573 : 
; 6574 :     goto do_data_received_callback;
; 6575 : 
; 6576 : do_data_received_callback:
; 6577 : 
; 6578 :     assert(recv_nbytes > 0);
; 6579 :     s->recv_nbytes += recv_nbytes;
; 6580 : 
; 6581 :     assert(!rbuf);
; 6582 :     rbuf = s->rbuf;

  001e6	48 8b 9e 70 03
	00 00		 mov	 rbx, QWORD PTR [rsi+880]
  001ed	8b c1		 mov	 eax, ecx
  001ef	48 01 86 80 02
	00 00		 add	 QWORD PTR [rsi+640], rax
$do_data_received_callback$130262:

; 6583 :     assert(!rbuf->snapshot);
; 6584 : 
; 6585 :     if (recv_nbytes < (DWORD)s->recvbuf_size)

  001f6	3b 8e 60 02 00
	00		 cmp	 ecx, DWORD PTR [rsi+608]
  001fc	73 08		 jae	 SHORT $LN61@PxSocket_I@4

; 6586 :         rbuf->ob_sval[recv_nbytes] = 0;

  001fe	c6 84 18 e8 00
	00 00 00	 mov	 BYTE PTR [rax+rbx+232], 0
$LN61@PxSocket_I@4:

; 6587 : 
; 6588 :     if (PxSocket_LINES_MODE_ACTIVE(s))
; 6589 :         goto do_lines_received_callback;
; 6590 : 
; 6591 :     assert(!rbuf->snapshot);
; 6592 :     rbuf->snapshot = PxContext_HeapSnapshot(c, NULL);

  00206	33 d2		 xor	 edx, edx
  00208	f7 86 f4 01 00
	00 00 40 00 00	 test	 DWORD PTR [rsi+500], 16384 ; 00004000H
  00212	49 8b cf	 mov	 rcx, r15
  00215	0f 85 6f 0a 00
	00		 jne	 $do_lines_received_callback$130270
  0021b	e8 00 00 00 00	 call	 PxContext_HeapSnapshot
  00220	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax

; 6593 : 
; 6594 :     func = s->data_received;
; 6595 :     assert(func);
; 6596 : 
; 6597 :     /* For now, num_rbufs should only ever be 1. */
; 6598 :     assert(s->num_rbufs == 1);
; 6599 :     if (s->num_rbufs == 1) {

  00224	83 be 78 03 00
	00 01		 cmp	 DWORD PTR [rsi+888], 1
  0022b	48 8b be c8 02
	00 00		 mov	 rdi, QWORD PTR [rsi+712]
  00232	0f 85 b5 02 00
	00		 jne	 $LN341@PxSocket_I@4

; 6600 :         PyObject *n;
; 6601 :         PyObject *o;
; 6602 :         PyTypeObject *tp = &PyBytes_Type;
; 6603 :         bytes = R2B(rbuf);

  00238	4c 8d 6b 70	 lea	 r13, QWORD PTR [rbx+112]

; 6604 :         o = (PyObject *)bytes;
; 6605 :         Py_PXFLAGS(bytes) = Py_PXFLAGS_MIMIC;
; 6606 :         n = init_object(c, o, tp, recv_nbytes);

  0023c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyBytes_Type
  00243	49 8b cf	 mov	 rcx, r15
  00246	49 c7 45 20 00
	02 00 00	 mov	 QWORD PTR [r13+32], 512	; 00000200H
  0024e	44 8b 4d 48	 mov	 r9d, DWORD PTR recv_nbytes$[rbp-104]
  00252	49 8b d5	 mov	 rdx, r13
  00255	4c 89 6d f0	 mov	 QWORD PTR bytes$1$[rbp-104], r13
  00259	e8 00 00 00 00	 call	 init_object

; 6607 :         assert(n == o);
; 6608 :         assert(Py_SIZE(bytes) == recv_nbytes);
; 6609 :         args = PyTuple_Pack(2, s, o);

  0025e	4d 8b c5	 mov	 r8, r13
  00261	48 8b d6	 mov	 rdx, rsi
  00264	b9 02 00 00 00	 mov	 ecx, 2
  00269	e8 00 00 00 00	 call	 PyTuple_Pack
  0026e	4c 8b e0	 mov	 r12, rax
  00271	48 89 45 d8	 mov	 QWORD PTR args$1$[rbp-104], rax

; 6610 :         if (!args) {

  00275	48 85 c0	 test	 rax, rax
  00278	0f 85 73 02 00
	00		 jne	 $LN55@PxSocket_I@4
$LN285@PxSocket_I@4:

; 6611 :             PxContext_RollbackHeap(c, &rbuf->snapshot);

  0027e	48 8d 53 10	 lea	 rdx, QWORD PTR [rbx+16]
  00282	49 8b cf	 mov	 rcx, r15
  00285	e8 00 00 00 00	 call	 PxContext_RollbackHeap
  0028a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@

; 6612 :             PxSocket_FATAL();

  00291	41 b8 01 00 00
	00		 mov	 r8d, 1
  00297	49 8b cf	 mov	 rcx, r15
  0029a	e8 00 00 00 00	 call	 PxSocket_HandleException
  0029f	e9 b0 0a 00 00	 jmp	 $end$129949
$LN331@PxSocket_I@4:

; 6218 :     }
; 6219 : 
; 6220 :     s->send_nbytes += sbuf->w.len;

  002a4	4c 8b 65 48	 mov	 r12, QWORD PTR args$[rbp-104]
  002a8	48 8b 7d 48	 mov	 rdi, QWORD PTR bytes$[rbp-104]
  002ac	44 8b 75 48	 mov	 r14d, DWORD PTR wsa_error$[rbp-104]
  002b0	4c 89 65 d8	 mov	 QWORD PTR args$1$[rbp-104], r12
  002b4	48 89 7d f0	 mov	 QWORD PTR bytes$1$[rbp-104], rdi
$start$129907:
$maybe_shutdown_send_or_recv$129922:

; 5932 :         TARGET(maybe_shutdown_send_or_recv);
; 5933 :         TARGET(handle_error);
; 5934 :         TARGET(connection_made_callback);
; 5935 :         TARGET(data_received_callback);
; 5936 :         TARGET(send_complete_callback);
; 5937 :         TARGET(overlapped_recv_callback);
; 5938 :         TARGET(post_callback_that_supports_sending_retval);
; 5939 :         TARGET(post_callback_that_does_not_support_sending_retval);
; 5940 :         TARGET(close_);
; 5941 :         TARGET(try_send);
; 5942 : 
; 5943 :         default:
; 5944 :             break;
; 5945 :     }
; 5946 : 
; 5947 : start:
; 5948 : 
; 5949 :     assert(s->protocol);
; 5950 : 
; 5951 : maybe_shutdown_send_or_recv:
; 5952 :     if (!PxSocket_CAN_RECV(s)) {

  002b8	f7 86 f4 01 00
	00 00 00 01 00	 test	 DWORD PTR [rsi+500], 65536 ; 00010000H
  002c2	75 1f		 jne	 SHORT $LN211@PxSocket_I@4

; 5953 :         if (shutdown(s->sock_fd, SD_RECEIVE) == SOCKET_ERROR)

  002c4	48 8b 4e 60	 mov	 rcx, QWORD PTR [rsi+96]
  002c8	33 d2		 xor	 edx, edx
  002ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_shutdown
  002d0	83 f8 ff	 cmp	 eax, -1
  002d3	0f 84 3a 0b 00
	00		 je	 $LN303@PxSocket_I@4

; 5955 :         Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_RECV_SHUTDOWN;

  002d9	81 8e f4 01 00
	00 00 00 04 00	 or	 DWORD PTR [rsi+500], 262144 ; 00040000H
$LN211@PxSocket_I@4:

; 5956 :         if (s->recv_shutdown) {
; 5957 :             assert(0 == "xxx todo: recv_shutdown");
; 5958 :         }
; 5959 :     }
; 5960 : 
; 5961 :     if (PxSocket_SHUTDOWN_SEND(s)) {

  002e3	f7 86 f4 01 00
	00 00 80 00 00	 test	 DWORD PTR [rsi+500], 32768 ; 00008000H
  002ed	74 22		 je	 SHORT $LN205@PxSocket_I@4

; 5962 :         if (shutdown(s->sock_fd, SD_SEND) == SOCKET_ERROR)

  002ef	48 8b 4e 60	 mov	 rcx, QWORD PTR [rsi+96]
  002f3	ba 01 00 00 00	 mov	 edx, 1
  002f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_shutdown
  002fe	83 f8 ff	 cmp	 eax, -1
  00301	0f 84 33 0b 00
	00		 je	 $LN304@PxSocket_I@4

; 5964 :         Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_SEND_SHUTDOWN;

  00307	81 8e f4 01 00
	00 00 00 02 00	 or	 DWORD PTR [rsi+500], 131072 ; 00020000H
$LN205@PxSocket_I@4:

; 5965 :         if (s->send_shutdown) {
; 5966 :             assert(0 == "xxx todo: send_shutdown");
; 5967 :         }
; 5968 :     }
; 5969 : 
; 5970 :     if ((Px_SOCKFLAGS(s) & Px_SOCKFLAGS_RECV_SHUTDOWN) &&
; 5971 :         (Px_SOCKFLAGS(s) & Px_SOCKFLAGS_SEND_SHUTDOWN))

  00311	8b 86 f4 01 00
	00		 mov	 eax, DWORD PTR [rsi+500]
  00317	0f ba e0 12	 bt	 eax, 18
  0031b	73 0a		 jae	 SHORT $LN204@PxSocket_I@4
  0031d	0f ba e0 11	 bt	 eax, 17
  00321	0f 82 93 0c 00
	00		 jb	 $definitely_close$129966
$LN204@PxSocket_I@4:

; 5972 :         goto definitely_close;
; 5973 : 
; 5974 :     if (next_opcode)

  00327	33 d2		 xor	 edx, edx
  00329	85 d2		 test	 edx, edx
  0032b	0f 85 9b 01 00
	00		 jne	 $dispatch$129916

; 5975 :         goto dispatch;
; 5976 : 
; 5977 :     /* client and server entry point */
; 5978 :     if (PxSocket_IS_CLIENT(s))

  00331	a8 01		 test	 al, 1
  00333	75 77		 jne	 SHORT $maybe_do_connection_made$129970

; 5979 :         goto maybe_do_connection_made;
; 5980 : 
; 5981 :     /* server entry point */
; 5982 :     assert(PxSocket_IS_SERVERCLIENT(s));
; 5983 :     assert(!(Px_SOCKFLAGS(s) & Px_SOCKFLAGS_SENDING_INITIAL_BYTES));
; 5984 : 
; 5985 :     if (s->initial_bytes_to_send) {

  00335	48 39 96 f0 02
	00 00		 cmp	 QWORD PTR [rsi+752], rdx
  0033c	74 6e		 je	 SHORT $maybe_do_connection_made$129970

; 5986 :         DWORD *len;
; 5987 : 
; 5988 :         assert(!snapshot);
; 5989 :         snapshot = PxContext_HeapSnapshot(c, NULL);

  0033e	49 8b cf	 mov	 rcx, r15
  00341	e8 00 00 00 00	 call	 PxContext_HeapSnapshot

; 5990 :         if (!PxSocket_LoadInitialBytes(s)) {

  00346	48 8b ce	 mov	 rcx, rsi
  00349	48 8b d8	 mov	 rbx, rax
  0034c	48 89 45 e0	 mov	 QWORD PTR snapshot$[rbp-104], rax
  00350	e8 00 00 00 00	 call	 PxSocket_LoadInitialBytes

; 5998 :         len = &w->len;
; 5999 : 
; 6000 :         if (!PxSocket_NEW_SBUF(c, s, snapshot, len, w->buf, 0, &sbuf, 0)) {

  00355	49 8b cf	 mov	 rcx, r15
  00358	85 c0		 test	 eax, eax
  0035a	0f 84 2c 0b 00
	00		 je	 $LN311@PxSocket_I@4

; 5993 :         }
; 5994 : 
; 5995 :         Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_SENDING_INITIAL_BYTES;
; 5996 : 
; 5997 :         w = &s->initial_bytes;

  00360	81 8e f4 01 00
	00 00 20 00 00	 or	 DWORD PTR [rsi+500], 8192 ; 00002000H
  0036a	4c 8d 8e 00 03
	00 00		 lea	 r9, QWORD PTR [rsi+768]

; 5998 :         len = &w->len;
; 5999 : 
; 6000 :         if (!PxSocket_NEW_SBUF(c, s, snapshot, len, w->buf, 0, &sbuf, 0)) {

  00371	48 8d 45 60	 lea	 rax, QWORD PTR sbuf$[rbp-104]
  00375	45 33 f6	 xor	 r14d, r14d
  00378	4c 8b c3	 mov	 r8, rbx
  0037b	48 8b d6	 mov	 rdx, rsi
  0037e	44 89 74 24 38	 mov	 DWORD PTR [rsp+56], r14d
  00383	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00388	49 8b 41 08	 mov	 rax, QWORD PTR [r9+8]
  0038c	4c 89 74 24 28	 mov	 QWORD PTR [rsp+40], r14
  00391	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00396	e8 00 00 00 00	 call	 PxSocket_NEW_SBUF
  0039b	85 c0		 test	 eax, eax
  0039d	0f 84 be 0a 00
	00		 je	 $LN312@PxSocket_I@4

; 6007 :         }
; 6008 : 
; 6009 :         goto do_send;

  003a3	48 8b 7d 60	 mov	 rdi, QWORD PTR sbuf$[rbp-104]
  003a7	e9 30 02 00 00	 jmp	 $do_send$129990
$maybe_do_connection_made$129970:

; 6010 :     }
; 6011 : 
; 6012 :     /* Intentional follow-on to maybe_do_connection_made. */
; 6013 : maybe_do_connection_made:
; 6014 :     assert(
; 6015 :         s->io_op == PxSocket_IO_ACCEPT ||
; 6016 :         s->io_op == PxSocket_IO_CONNECT
; 6017 :     );
; 6018 : 
; 6019 :     if (s->connection_made &&
; 6020 :        !(Px_SOCKFLAGS(s) & Px_SOCKFLAGS_CALLED_CONNECTION_MADE))

  003ac	48 8b 9e d8 02
	00 00		 mov	 rbx, QWORD PTR [rsi+728]
  003b3	48 85 db	 test	 rbx, rbx
  003b6	0f 84 c9 04 00
	00		 je	 $try_recv$129995
  003bc	0f ba e0 19	 bt	 eax, 25
  003c0	0f 82 bf 04 00
	00		 jb	 $try_recv$129995

; 6021 :         goto definitely_do_connection_made;
; 6022 : 
; 6023 :     goto try_recv;
; 6024 : 
; 6025 : definitely_do_connection_made:
; 6026 :     assert(!(Px_SOCKFLAGS(s) & Px_SOCKFLAGS_CALLED_CONNECTION_MADE));
; 6027 :     func = s->connection_made;
; 6028 :     assert(func);
; 6029 : 
; 6030 :     snapshot = PxContext_HeapSnapshot(c, NULL);

  003c6	49 8b cf	 mov	 rcx, r15
$definitely_do_connection_made$129994:
  003c9	e8 00 00 00 00	 call	 PxContext_HeapSnapshot

; 6031 : 
; 6032 :     /* xxx todo: add peer argument */
; 6033 :     args = PyTuple_Pack(1, s);

  003ce	48 8b d6	 mov	 rdx, rsi
  003d1	b9 01 00 00 00	 mov	 ecx, 1
  003d6	48 8b f8	 mov	 rdi, rax
  003d9	48 89 45 e0	 mov	 QWORD PTR snapshot$[rbp-104], rax
  003dd	e8 00 00 00 00	 call	 PyTuple_Pack
  003e2	4c 8b e0	 mov	 r12, rax
  003e5	48 89 45 d8	 mov	 QWORD PTR args$1$[rbp-104], rax

; 6034 :     if (!args) {

  003e9	48 85 c0	 test	 rax, rax
  003ec	0f 84 f5 0a 00
	00		 je	 $LN307@PxSocket_I@4

; 6037 :     }
; 6038 : 
; 6039 :     result = PyObject_CallObject(func, args);

  003f2	48 8b d0	 mov	 rdx, rax
  003f5	48 8b cb	 mov	 rcx, rbx
  003f8	e8 00 00 00 00	 call	 PyObject_CallObject
  003fd	48 8b d8	 mov	 rbx, rax

; 6040 :     if (result)
; 6041 :         assert(!PyErr_Occurred());
; 6042 :     if (PyErr_Occurred())

  00400	e8 00 00 00 00	 call	 PyErr_Occurred

; 6043 :         assert(!result);
; 6044 :     if (!result) {

  00405	48 85 db	 test	 rbx, rbx
  00408	0f 84 d4 0a 00
	00		 je	 $LN308@PxSocket_I@4

; 6047 :     }
; 6048 : 
; 6049 :     Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_CALLED_CONNECTION_MADE;

  0040e	81 8e f4 01 00
	00 00 00 00 02	 or	 DWORD PTR [rsi+500], 33554432 ; 02000000H
  00418	8b 86 f4 01 00
	00		 mov	 eax, DWORD PTR [rsi+500]

; 6050 : 
; 6051 :     if (PxSocket_IS_SENDFILE_SCHEDULED(s)) {
; 6052 :         if (result != Py_None) {

  0041e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00425	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  0042a	74 1d		 je	 SHORT $LN176@PxSocket_I@4
  0042c	48 3b d9	 cmp	 rbx, rcx
  0042f	74 1d		 je	 SHORT $LN320@PxSocket_I@4
$LN309@PxSocket_I@4:

; 6053 :             PyErr_SetString(PyExc_RuntimeError,
; 6054 :                             "data_received callback scheduled sendfile but "
; 6055 :                             "returned non-None data");

  00431	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00438	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EF@NHKFODOC@data_received?5callback?5scheduled@
  0043f	e8 00 00 00 00	 call	 PyErr_SetString

; 6056 :             PxSocket_EXCEPTION();

  00444	e9 57 0a 00 00	 jmp	 $LL194@PxSocket_I@4
$LN176@PxSocket_I@4:

; 6057 :         }
; 6058 :     }
; 6059 : 
; 6060 :     if (result == Py_None) {

  00449	48 3b d9	 cmp	 rbx, rcx
  0044c	75 19		 jne	 SHORT $LN172@PxSocket_I@4
$LN320@PxSocket_I@4:

; 6061 :         if (PxSocket_IS_SENDFILE_SCHEDULED(s)) {

  0044e	85 c0		 test	 eax, eax
$LN344@PxSocket_I@4:
  00450	0f 85 5c 05 00
	00		 jne	 $LN337@PxSocket_I@4

; 6062 :             s->sendfile_snapshot = snapshot;
; 6063 :             snapshot = NULL;
; 6064 :             goto do_sendfile;
; 6065 :         }
; 6066 :         PxContext_RollbackHeap(c, &snapshot);

  00456	48 8d 55 e0	 lea	 rdx, QWORD PTR snapshot$[rbp-104]
  0045a	49 8b cf	 mov	 rcx, r15
  0045d	e8 00 00 00 00	 call	 PxContext_RollbackHeap
  00462	e9 1c 04 00 00	 jmp	 $LN342@PxSocket_I@4
$LN172@PxSocket_I@4:

; 6067 :         if (next_opcode)
; 6068 :             goto dispatch;
; 6069 :         else
; 6070 :             goto try_recv;
; 6071 :     }
; 6072 : 
; 6073 :     sbuf = NULL;

  00467	45 33 f6	 xor	 r14d, r14d

; 6074 :     if (!PxSocket_NEW_SBUF(c, s, snapshot, 0, 0, result, &sbuf, 0)) {

  0046a	48 8d 45 60	 lea	 rax, QWORD PTR sbuf$[rbp-104]
  0046e	45 33 c9	 xor	 r9d, r9d
  00471	44 89 74 24 38	 mov	 DWORD PTR [rsp+56], r14d
  00476	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0047b	4c 8b c7	 mov	 r8, rdi
  0047e	48 8b d6	 mov	 rdx, rsi
  00481	49 8b cf	 mov	 rcx, r15
  00484	48 89 5c 24 28	 mov	 QWORD PTR [rsp+40], rbx
  00489	4c 89 74 24 20	 mov	 QWORD PTR [rsp+32], r14
  0048e	4c 89 75 60	 mov	 QWORD PTR sbuf$[rbp-104], r14
  00492	e8 00 00 00 00	 call	 PxSocket_NEW_SBUF
  00497	85 c0		 test	 eax, eax
  00499	0f 84 18 0a 00
	00		 je	 $LN313@PxSocket_I@4

; 6081 :     }
; 6082 : 
; 6083 :     if (PyErr_Occurred())

  0049f	e8 00 00 00 00	 call	 PyErr_Occurred
  004a4	48 85 c0	 test	 rax, rax
  004a7	74 0a		 je	 SHORT $LN166@PxSocket_I@4

; 6084 :         Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_CLOSE_SCHEDULED;

  004a9	81 8e f4 01 00
	00 00 00 40 00	 or	 DWORD PTR [rsi+500], 4194304 ; 00400000H
$LN166@PxSocket_I@4:

; 6085 : 
; 6086 :     if (Px_SOCKFLAGS(s) & Px_SOCKFLAGS_CLOSE_SCHEDULED)

  004b3	f7 86 f4 01 00
	00 00 00 40 00	 test	 DWORD PTR [rsi+500], 4194304 ; 00400000H
  004bd	0f 85 f7 0a 00
	00		 jne	 $definitely_close$129966
  004c3	48 8b 7d 60	 mov	 rdi, QWORD PTR sbuf$[rbp-104]
  004c7	e9 10 01 00 00	 jmp	 $do_send$129990
$dispatch$129916:

; 5911 :         case PxSocket_IO_ACCEPT:
; 5912 :         case PxSocket_IO_CONNECT:
; 5913 :             goto start;
; 5914 : 
; 5915 :         case PxSocket_IO_SEND:
; 5916 :             goto overlapped_send_callback;
; 5917 : 
; 5918 :         case PxSocket_IO_SENDFILE:
; 5919 :             goto overlapped_sendfile_callback;
; 5920 : 
; 5921 :         case PxSocket_IO_RECV:
; 5922 :             goto overlapped_recv_callback;
; 5923 : 
; 5924 :         default:
; 5925 :             assert(0);
; 5926 : 
; 5927 :     }
; 5928 :     goto start;
; 5929 : 
; 5930 : dispatch:
; 5931 :     switch (next_opcode) {

  004cc	8d 42 fe	 lea	 eax, DWORD PTR [rdx-2]
  004cf	83 f8 0b	 cmp	 eax, 11
  004d2	0f 87 e0 fd ff
	ff		 ja	 $start$129907
  004d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:__ImageBase
  004df	48 98		 cdqe
  004e1	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR $LN325@PxSocket_I@4[rdx+rax*4]
  004e8	48 03 ca	 add	 rcx, rdx
  004eb	ff e1		 jmp	 rcx
$LN341@PxSocket_I@4:

; 6600 :         PyObject *n;
; 6601 :         PyObject *o;
; 6602 :         PyTypeObject *tp = &PyBytes_Type;
; 6603 :         bytes = R2B(rbuf);

  004ed	4c 8b 6d f0	 mov	 r13, QWORD PTR bytes$1$[rbp-104]
$LN55@PxSocket_I@4:

; 6613 :         }
; 6614 :     } else {
; 6615 :         /* xxx todo */
; 6616 :         assert(0);
; 6617 :     }
; 6618 : 
; 6619 :     result = PyObject_CallObject(func, args);

  004f1	49 8b d4	 mov	 rdx, r12
  004f4	48 8b cf	 mov	 rcx, rdi
  004f7	e8 00 00 00 00	 call	 PyObject_CallObject
  004fc	48 8b f8	 mov	 rdi, rax

; 6620 :     if (result)
; 6621 :         assert(!PyErr_Occurred());
; 6622 :     if (PyErr_Occurred())

  004ff	e8 00 00 00 00	 call	 PyErr_Occurred

; 6623 :         assert(!result);
; 6624 :     if (!result) {

  00504	48 85 ff	 test	 rdi, rdi
  00507	0f 84 92 0a 00
	00		 je	 $LN286@PxSocket_I@4

; 6627 :     }
; 6628 : 
; 6629 :     if (PxSocket_IS_SENDFILE_SCHEDULED(s)) {

  0050d	8b 86 f4 01 00
	00		 mov	 eax, DWORD PTR [rsi+500]

; 6630 :         if (result != Py_None) {

  00513	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0051a	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  0051f	74 0b		 je	 SHORT $LN43@PxSocket_I@4
  00521	48 3b f9	 cmp	 rdi, rcx
  00524	0f 85 07 ff ff
	ff		 jne	 $LN309@PxSocket_I@4

; 6631 :             PyErr_SetString(PyExc_RuntimeError,
; 6632 :                             "data_received callback scheduled sendfile but "
; 6633 :                             "returned non-None data");
; 6634 :             PxSocket_EXCEPTION();
; 6635 :         }
; 6636 :     }
; 6637 : 
; 6638 :     if (result == Py_None) {

  0052a	eb 05		 jmp	 SHORT $LN318@PxSocket_I@4
$LN43@PxSocket_I@4:
  0052c	48 3b f9	 cmp	 rdi, rcx
  0052f	75 6e		 jne	 SHORT $LN42@PxSocket_I@4
$LN318@PxSocket_I@4:

; 6639 :         if (PxSocket_IS_SENDFILE_SCHEDULED(s)) {

  00531	85 c0		 test	 eax, eax
  00533	0f 85 5d 04 00
	00		 jne	 $LN336@PxSocket_I@4

; 6643 :         }
; 6644 :         PxContext_RollbackHeap(c, &rbuf->snapshot);

  00539	48 8d 53 10	 lea	 rdx, QWORD PTR [rbx+16]
  0053d	49 8b cf	 mov	 rcx, r15
  00540	e8 00 00 00 00	 call	 PxContext_RollbackHeap

; 6645 :         if (Px_SOCKFLAGS(s) & Px_SOCKFLAGS_CLOSE_SCHEDULED)

  00545	f7 86 f4 01 00
	00 00 00 40 00	 test	 DWORD PTR [rsi+500], 4194304 ; 00400000H
  0054f	0f 85 65 0a 00
	00		 jne	 $definitely_close$129966

; 6646 :             goto definitely_close;
; 6647 :         /* Nothing to send, no close requested, so try recv again. */
; 6648 :         w = NULL;
; 6649 :         rbuf = NULL;
; 6650 :         snapshot = NULL;
; 6651 :         recv_nbytes = 0;

  00555	33 d2		 xor	 edx, edx
  00557	89 55 48	 mov	 DWORD PTR recv_nbytes$[rbp-104], edx
$do_recv$130199:

; 6402 :     }
; 6403 : 
; 6404 : do_recv:
; 6405 :     assert(!PxSocket_RECV_MORE(s));
; 6406 :     assert(PxSocket_CAN_RECV(s));
; 6407 : 
; 6408 :     assert(!rbuf);
; 6409 :     assert(!w);
; 6410 :     assert(!snapshot);
; 6411 : 
; 6412 :     rbuf = s->rbuf;
; 6413 :     assert(!rbuf->snapshot);
; 6414 :     w = &rbuf->w;
; 6415 :     /* Reset our rbuf. */
; 6416 :     w->len = s->recvbuf_size;

  0055a	4c 8b ae 70 03
	00 00		 mov	 r13, QWORD PTR [rsi+880]
  00561	8b 86 60 02 00
	00		 mov	 eax, DWORD PTR [rsi+608]
  00567	41 89 45 40	 mov	 DWORD PTR [r13+64], eax

; 6417 :     w->buf = (char *)rbuf->ob_sval;

  0056b	49 8d 85 e8 00
	00 00		 lea	 rax, QWORD PTR [r13+232]
  00572	49 89 45 48	 mov	 QWORD PTR [r13+72], rax

; 6418 : 
; 6419 :     s->io_op = PxSocket_IO_RECV;

  00576	c7 86 50 03 00
	00 04 00 00 00	 mov	 DWORD PTR [rsi+848], 4

; 6420 :     c->io_result = NO_ERROR;

  00580	41 89 97 94 32
	00 00		 mov	 DWORD PTR [r15+12948], edx

; 6421 : 
; 6422 :     if (PxSocket_THROUGHPUT(s)) {

  00587	f6 86 f4 01 00
	00 40		 test	 BYTE PTR [rsi+500], 64	; 00000040H
  0058e	0f 84 3d 03 00
	00		 je	 $LN89@PxSocket_I@4

; 6423 :         n = s->max_sync_recv_attempts;

  00594	8b be 14 03 00
	00		 mov	 edi, DWORD PTR [rsi+788]

; 6424 :         goto try_synchronous_recv;

  0059a	e9 5d 03 00 00	 jmp	 $try_synchronous_recv$130209
$LN42@PxSocket_I@4:

; 6652 :         goto do_recv;
; 6653 :     }
; 6654 : 
; 6655 :     if (Px_PTR(result) == Px_PTR(bytes)) {

  0059f	49 3b fd	 cmp	 rdi, r13
  005a2	75 08		 jne	 SHORT $LN39@PxSocket_I@4

; 6656 :         /*
; 6657 :          * Special case for echo.  We can cast our rbuf back to an sbuf.
; 6658 :          * The snapshot will be rolled back after the do_send logic completes.
; 6659 :          */
; 6660 :         sbuf = (SBUF *)rbuf;
; 6661 :         sbuf->w.len = recv_nbytes;

  005a4	8b 45 48	 mov	 eax, DWORD PTR recv_nbytes$[rbp-104]
  005a7	89 43 40	 mov	 DWORD PTR [rbx+64], eax

; 6662 : 
; 6663 :         w = NULL;
; 6664 :         rbuf = NULL;
; 6665 :         snapshot = NULL;
; 6666 :         recv_nbytes = 0;
; 6667 :         goto do_send;

  005aa	eb 22		 jmp	 SHORT $LN343@PxSocket_I@4
$LN39@PxSocket_I@4:

; 6668 :     } else {
; 6669 :         w = &rbuf->w;
; 6670 :         if (!PyObject2WSABUF(result, w)) {

  005ac	48 8d 53 40	 lea	 rdx, QWORD PTR [rbx+64]
  005b0	48 8b cf	 mov	 rcx, rdi
  005b3	e8 00 00 00 00	 call	 PyObject2WSABUF
  005b8	85 c0		 test	 eax, eax
  005ba	0f 84 c7 09 00
	00		 je	 $LN288@PxSocket_I@4

; 6675 :         }
; 6676 : 
; 6677 :         sbuf = (SBUF *)rbuf;
; 6678 :         sbuf->w.len = w->len;

  005c0	8b 43 40	 mov	 eax, DWORD PTR [rbx+64]
  005c3	89 43 40	 mov	 DWORD PTR [rbx+64], eax

; 6679 :         sbuf->w.buf = w->buf;

  005c6	48 8b 43 48	 mov	 rax, QWORD PTR [rbx+72]
  005ca	48 89 43 48	 mov	 QWORD PTR [rbx+72], rax
$LN343@PxSocket_I@4:

; 6680 : 
; 6681 :         w = NULL;
; 6682 :         rbuf = NULL;
; 6683 :         snapshot = NULL;
; 6684 :         recv_nbytes = 0;

  005ce	45 33 f6	 xor	 r14d, r14d
  005d1	48 89 5d 60	 mov	 QWORD PTR sbuf$[rbp-104], rbx
  005d5	48 8b fb	 mov	 rdi, rbx
  005d8	44 89 75 48	 mov	 DWORD PTR recv_nbytes$[rbp-104], r14d
$do_send$129990:

; 6087 :         goto definitely_close;
; 6088 : 
; 6089 :     /* Intentional follow-on to do_send. */
; 6090 : 
; 6091 : do_send:
; 6092 :     assert(sbuf);
; 6093 :     w = &sbuf->w;

  005dc	48 83 be 58 03
	00 00 00	 cmp	 QWORD PTR [rsi+856], 0
  005e4	4c 8d 6f 40	 lea	 r13, QWORD PTR [rdi+64]

; 6094 : 
; 6095 :     if (!s->tp_io) {

  005e8	75 27		 jne	 SHORT $LN159@PxSocket_I@4

; 6096 :         PTP_WIN32_IO_CALLBACK cb = PxSocketClient_Callback;
; 6097 :         if (s->io_op != PxSocket_IO_ACCEPT)
; 6098 :             assert(Px_SOCKFLAGS(s) & Px_SOCKFLAGS_SENDING_INITIAL_BYTES);
; 6099 :         s->tp_io = CreateThreadpoolIo((HANDLE)s->sock_fd, cb, c, NULL);

  005ea	48 8b 4e 60	 mov	 rcx, QWORD PTR [rsi+96]
  005ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PxSocketClient_Callback
  005f5	45 33 c9	 xor	 r9d, r9d
  005f8	4d 8b c7	 mov	 r8, r15
  005fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateThreadpoolIo
  00601	48 89 86 58 03
	00 00		 mov	 QWORD PTR [rsi+856], rax

; 6100 :         if (!s->tp_io)

  00608	48 85 c0	 test	 rax, rax
  0060b	0f 84 44 09 00
	00		 je	 $LN271@PxSocket_I@4
$LN159@PxSocket_I@4:

; 6101 :             PxSocket_SYSERROR("CreateThreadpoolIo");
; 6102 :     }
; 6103 : 
; 6104 :     s->io_op = PxSocket_IO_SEND;
; 6105 : 
; 6106 :     if (PxSocket_THROUGHPUT(s)) {

  00611	8b 86 f4 01 00
	00		 mov	 eax, DWORD PTR [rsi+500]
  00617	c7 86 50 03 00
	00 08 00 00 00	 mov	 DWORD PTR [rsi+848], 8
  00621	a8 40		 test	 al, 64			; 00000040H
  00623	74 09		 je	 SHORT $LN158@PxSocket_I@4

; 6107 :         n = s->max_sync_send_attempts;

  00625	44 8b a6 10 03
	00 00		 mov	 r12d, DWORD PTR [rsi+784]

; 6108 :         goto try_synchronous_send;

  0062c	eb 4a		 jmp	 SHORT $try_synchronous_send$130055
$LN158@PxSocket_I@4:

; 6109 :     }
; 6110 : 
; 6111 :     n = 1;

  0062e	41 bc 01 00 00
	00		 mov	 r12d, 1

; 6112 :     if (PxSocket_IS_HOG(s) && _PxSocket_ActiveHogs >= _PyParallel_NumCPUs-1)

  00634	a8 04		 test	 al, 4
  00636	74 16		 je	 SHORT $LN157@PxSocket_I@4
  00638	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _PyParallel_NumCPUs
  0063e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _PxSocket_ActiveHogs
  00644	ff c9		 dec	 ecx
  00646	3b c1		 cmp	 eax, ecx
  00648	0f 8d 8a 05 00
	00		 jge	 $LN334@PxSocket_I@4
$LN157@PxSocket_I@4:

; 6113 :         goto do_async_send;
; 6114 :     else if (_PxSocket_ActiveIOLoops >= _PyParallel_NumCPUs-1)

  0064e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _PyParallel_NumCPUs
  00654	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _PxSocket_ActiveIOLoops
  0065a	ff c9		 dec	 ecx
  0065c	3b c1		 cmp	 eax, ecx
  0065e	0f 8d 74 05 00
	00		 jge	 $LN334@PxSocket_I@4

; 6115 :         goto do_async_send;
; 6116 :     else if (PxSocket_CONCURRENCY(s))

  00664	f7 86 f4 01 00
	00 00 08 00 00	 test	 DWORD PTR [rsi+500], 2048 ; 00000800H
  0066e	0f 85 64 05 00
	00		 jne	 $LN334@PxSocket_I@4
  00674	48 8b 7d 60	 mov	 rdi, QWORD PTR sbuf$[rbp-104]
$try_synchronous_send$130055:

; 6117 :         goto do_async_send;
; 6118 : 
; 6119 : try_synchronous_send:
; 6120 :     s->send_id++;

  00678	48 ff 86 68 02
	00 00		 inc	 QWORD PTR [rsi+616]

; 6121 : 
; 6122 :     /*if (s->send_id % 10000 == 0)
; 6123 :         printf("\ntrying sync send for client %d/%d\n",
; 6124 :                s->child_id, s->sock_fd);*/
; 6125 : 
; 6126 :     err = SOCKET_ERROR;
; 6127 :     wsa_error = NO_ERROR;
; 6128 :     for (i = 1; i <= n; i++) {

  0067f	bb 01 00 00 00	 mov	 ebx, 1
  00684	44 3b e3	 cmp	 r12d, ebx
  00687	0f 8c 30 05 00
	00		 jl	 $LN143@PxSocket_I@4
  0068d	0f 1f 00	 npad	 3
$LL152@PxSocket_I@4:

; 6129 :         err = WSASend(fd, w, 1, &nbytes, 0, NULL, NULL);

  00690	48 8b 4d e8	 mov	 rcx, QWORD PTR fd$1$[rbp-104]
  00694	33 c0		 xor	 eax, eax
  00696	4c 8d 4d 58	 lea	 r9, QWORD PTR nbytes$[rbp-104]
  0069a	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0069f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  006a4	44 8d 40 01	 lea	 r8d, QWORD PTR [rax+1]
  006a8	49 8b d5	 mov	 rdx, r13
  006ab	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  006af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSASend

; 6130 :         if (err != SOCKET_ERROR)

  006b5	83 f8 ff	 cmp	 eax, -1			; ffffffffH
  006b8	75 34		 jne	 SHORT $LN317@PxSocket_I@4

; 6131 :             break;
; 6132 :         else {
; 6133 :             wsa_error = WSAGetLastError();

  006ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  006c0	44 8b f0	 mov	 r14d, eax

; 6134 :             if (wsa_error == WSAEWOULDBLOCK && i < n)

  006c3	3d 33 27 00 00	 cmp	 eax, 10035		; 00002733H
  006c8	0f 85 ef 04 00
	00		 jne	 $LN143@PxSocket_I@4
  006ce	41 3b dc	 cmp	 ebx, r12d
  006d1	7d 0f		 jge	 SHORT $LN323@PxSocket_I@4

; 6135 :                 Sleep(0);

  006d3	33 c9		 xor	 ecx, ecx
  006d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_Sleep
  006db	ff c3		 inc	 ebx
  006dd	41 3b dc	 cmp	 ebx, r12d
  006e0	7e ae		 jle	 SHORT $LL152@PxSocket_I@4
$LN323@PxSocket_I@4:

; 6147 :         snapshot = NULL;
; 6148 :         goto send_complete;
; 6149 :     } else if (wsa_error == WSAEWOULDBLOCK) {
; 6150 :         s->send_id--;

  006e2	48 ff 8e 68 02
	00 00		 dec	 QWORD PTR [rsi+616]
  006e9	e9 ee 04 00 00	 jmp	 $do_async_send$130058
$LN317@PxSocket_I@4:

; 6136 :             else
; 6137 :                 break;
; 6138 :         }
; 6139 :     }
; 6140 : 
; 6141 :     if (err != SOCKET_ERROR) {
; 6142 :         /* Send completed synchronously. */
; 6143 :         s->send_nbytes += w->len;

  006ee	41 8b 45 00	 mov	 eax, DWORD PTR [r13]

; 6144 :         PxContext_RollbackHeap(c, &sbuf->snapshot);

  006f2	48 8d 57 10	 lea	 rdx, QWORD PTR [rdi+16]
  006f6	49 8b cf	 mov	 rcx, r15
  006f9	48 01 86 78 02
	00 00		 add	 QWORD PTR [rsi+632], rax
  00700	e8 00 00 00 00	 call	 PxContext_RollbackHeap
  00705	4c 8b 6d e8	 mov	 r13, QWORD PTR fd$1$[rbp-104]

; 6145 :         w = NULL;
; 6146 :         sbuf = NULL;

  00709	33 db		 xor	 ebx, ebx
  0070b	48 89 5d 60	 mov	 QWORD PTR sbuf$[rbp-104], rbx
$send_complete$130077:

; 6221 : 
; 6222 :     /* Intentional follow-on to send_complete... */
; 6223 : 
; 6224 : send_complete:
; 6225 :     func = s->send_complete;

  0070f	48 8b 9e c0 02
	00 00		 mov	 rbx, QWORD PTR [rsi+704]

; 6226 :     if (!func)

  00716	48 85 db	 test	 rbx, rbx
  00719	0f 84 60 01 00
	00		 je	 $LN339@PxSocket_I@4

; 6227 :         goto try_recv;
; 6228 : 
; 6229 :     snapshot = PxContext_HeapSnapshot(c, NULL);

  0071f	33 d2		 xor	 edx, edx
  00721	49 8b cf	 mov	 rcx, r15
  00724	e8 00 00 00 00	 call	 PxContext_HeapSnapshot

; 6230 : 
; 6231 :     args = PyTuple_Pack(2, s, PyLong_FromSize_t(s->send_id));

  00729	48 8b 8e 68 02
	00 00		 mov	 rcx, QWORD PTR [rsi+616]
  00730	48 8b f8	 mov	 rdi, rax
  00733	48 89 45 e0	 mov	 QWORD PTR snapshot$[rbp-104], rax
  00737	e8 00 00 00 00	 call	 PyLong_FromSize_t
  0073c	48 8b d6	 mov	 rdx, rsi
  0073f	b9 02 00 00 00	 mov	 ecx, 2
  00744	4c 8b c0	 mov	 r8, rax
  00747	e8 00 00 00 00	 call	 PyTuple_Pack
  0074c	4c 8b e0	 mov	 r12, rax
  0074f	48 89 45 d8	 mov	 QWORD PTR args$1$[rbp-104], rax

; 6232 :     if (!args) {

  00753	48 85 c0	 test	 rax, rax
  00756	0f 84 8b 07 00
	00		 je	 $LN307@PxSocket_I@4

; 6233 :         PxContext_RollbackHeap(c, &snapshot);
; 6234 :         PxSocket_FATAL();
; 6235 :     }
; 6236 : 
; 6237 :     result = PyObject_CallObject(func, args);

  0075c	48 8b d0	 mov	 rdx, rax
  0075f	48 8b cb	 mov	 rcx, rbx
  00762	e8 00 00 00 00	 call	 PyObject_CallObject
  00767	48 8b d8	 mov	 rbx, rax

; 6238 :     if (result)
; 6239 :         assert(!PyErr_Occurred());
; 6240 :     if (PyErr_Occurred())

  0076a	e8 00 00 00 00	 call	 PyErr_Occurred

; 6241 :         assert(!result);
; 6242 :     if (!result) {

  0076f	48 85 db	 test	 rbx, rbx
  00772	0f 84 6a 07 00
	00		 je	 $LN308@PxSocket_I@4

; 6243 :         PxContext_RollbackHeap(c, &snapshot);
; 6244 :         PxSocket_EXCEPTION();
; 6245 :     }
; 6246 : 
; 6247 :     if (PxSocket_IS_SENDFILE_SCHEDULED(s)) {

  00778	f7 86 f4 01 00
	00 00 00 00 40	 test	 DWORD PTR [rsi+500], 1073741824 ; 40000000H

; 6249 :             PyErr_SetString(PyExc_RuntimeError,
; 6250 :                             "data_received callback scheduled sendfile but "
; 6251 :                             "returned non-None data");
; 6252 :             PxSocket_EXCEPTION();
; 6253 :         }
; 6254 :     }
; 6255 : 
; 6256 :     if (result == Py_None) {

  00782	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00789	0f 85 d8 00 00
	00		 jne	 $LN321@PxSocket_I@4
  0078f	48 3b d8	 cmp	 rbx, rax
  00792	0f 84 d8 00 00
	00		 je	 $LN279@PxSocket_I@4

; 6263 :         goto try_recv;
; 6264 :     }
; 6265 : 
; 6266 :     sbuf = NULL;

  00798	45 33 f6	 xor	 r14d, r14d

; 6267 :     if (!PxSocket_NEW_SBUF(c, s, snapshot, 0, 0, result, &sbuf, 0)) {

  0079b	48 8d 45 60	 lea	 rax, QWORD PTR sbuf$[rbp-104]
  0079f	45 33 c9	 xor	 r9d, r9d
  007a2	44 89 74 24 38	 mov	 DWORD PTR [rsp+56], r14d
  007a7	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  007ac	4c 8b c7	 mov	 r8, rdi
  007af	48 8b d6	 mov	 rdx, rsi
  007b2	49 8b cf	 mov	 rcx, r15
  007b5	48 89 5c 24 28	 mov	 QWORD PTR [rsp+40], rbx
  007ba	4c 89 74 24 20	 mov	 QWORD PTR [rsp+32], r14
  007bf	4c 89 75 60	 mov	 QWORD PTR sbuf$[rbp-104], r14
  007c3	e8 00 00 00 00	 call	 PxSocket_NEW_SBUF
  007c8	85 c0		 test	 eax, eax
  007ca	0f 84 3d 07 00
	00		 je	 $LN280@PxSocket_I@4

; 6274 :     }
; 6275 : 
; 6276 :     if (Px_SOCKFLAGS(s) & Px_SOCKFLAGS_SENDING_INITIAL_BYTES) {

  007d0	f7 86 f4 01 00
	00 00 20 00 00	 test	 DWORD PTR [rsi+500], 8192 ; 00002000H
  007da	74 2a		 je	 SHORT $LN108@PxSocket_I@4

; 6277 :         if (s->connection_made) {

  007dc	4c 39 b6 d8 02
	00 00		 cmp	 QWORD PTR [rsi+728], r14
  007e3	74 17		 je	 SHORT $LN107@PxSocket_I@4

; 6278 :             char *msg = "protocol's connection_made() callback "        \
; 6279 :                         "may never be called (because send_complete() " \
; 6280 :                         "is sending more data on the back of the "      \
; 6281 :                         "successful sending of the initial_bytes)";
; 6282 :             PyErr_WarnEx(PyExc_RuntimeWarning, msg, 1);

  007e5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeWarning
  007ec	45 8d 46 01	 lea	 r8d, QWORD PTR [r14+1]
  007f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0KE@KPJBDGKF@protocol?8s?5connection_made?$CI?$CJ?5cal@
  007f7	e8 00 00 00 00	 call	 PyErr_WarnEx
$LN107@PxSocket_I@4:

; 6283 :         }
; 6284 :         Px_SOCKFLAGS(s) &= ~Px_SOCKFLAGS_SENDING_INITIAL_BYTES;

  007fc	81 a6 f4 01 00
	00 ff df ff ff	 and	 DWORD PTR [rsi+500], -8193 ; ffffffffffffdfffH
$LN108@PxSocket_I@4:

; 6285 :     }
; 6286 : 
; 6287 :     if (!(Px_SOCKFLAGS(s) & Px_SOCKFLAGS_CHECKED_DR_UNREACHABLE)) {

  00806	8b 86 f4 01 00
	00		 mov	 eax, DWORD PTR [rsi+500]
  0080c	0f ba e0 0c	 bt	 eax, 12
  00810	72 29		 jb	 SHORT $LN105@PxSocket_I@4

; 6288 :         Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_CHECKED_DR_UNREACHABLE;

  00812	0f ba e8 0c	 bts	 eax, 12
  00816	89 86 f4 01 00
	00		 mov	 DWORD PTR [rsi+500], eax

; 6289 :         if (PxSocket_CAN_RECV(s)) {

  0081c	0f ba e0 10	 bt	 eax, 16
  00820	73 19		 jae	 SHORT $LN105@PxSocket_I@4

; 6290 :             char *msg = "protocol has data_received|lines_received " \
; 6291 :                         "callback, but send_complete() is sending " \
; 6292 :                         "more data, so it may never be called";
; 6293 :             PyErr_WarnEx(PyExc_RuntimeWarning, msg, 1);

  00822	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeWarning
  00829	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0HI@DGAEDMOP@protocol?5has?5data_received?$HMlines@
  00830	41 b8 01 00 00
	00		 mov	 r8d, 1
  00836	e8 00 00 00 00	 call	 PyErr_WarnEx
$LN105@PxSocket_I@4:

; 6294 :         }
; 6295 :     }
; 6296 : 
; 6297 :     if (!(PxSocket_IS_HOG(s))) {

  0083b	8b 86 f4 01 00
	00		 mov	 eax, DWORD PTR [rsi+500]
  00841	a8 04		 test	 al, 4
  00843	74 09		 je	 SHORT $LN335@PxSocket_I@4

; 6085 : 
; 6086 :     if (Px_SOCKFLAGS(s) & Px_SOCKFLAGS_CLOSE_SCHEDULED)

  00845	48 8b 7d 60	 mov	 rdi, QWORD PTR sbuf$[rbp-104]
  00849	e9 8e fd ff ff	 jmp	 $do_send$129990
$LN335@PxSocket_I@4:

; 6298 :         Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_HOG;

  0084e	83 c8 04	 or	 eax, 4
  00851	89 86 f4 01 00
	00		 mov	 DWORD PTR [rsi+500], eax

; 6299 :         InterlockedIncrement(&_PxSocket_ActiveHogs);

  00857	f0 ff 05 00 00
	00 00		 lock inc DWORD PTR _PxSocket_ActiveHogs

; 6300 :     }
; 6301 : 
; 6302 :     goto do_send;

  0085e	48 8b 7d 60	 mov	 rdi, QWORD PTR sbuf$[rbp-104]
  00862	e9 75 fd ff ff	 jmp	 $do_send$129990
$LN321@PxSocket_I@4:

; 6248 :         if (result != Py_None) {

  00867	48 3b d8	 cmp	 rbx, rax
  0086a	0f 85 c1 fb ff
	ff		 jne	 $LN309@PxSocket_I@4
$LN279@PxSocket_I@4:

; 6257 :         if (PxSocket_IS_SENDFILE_SCHEDULED(s)) {

  00870	f7 86 f4 01 00
	00 00 00 00 40	 test	 DWORD PTR [rsi+500], 1073741824 ; 40000000H

; 6259 :             snapshot = NULL;
; 6260 :             goto do_sendfile;
; 6261 :         }
; 6262 :         PxContext_RollbackHeap(c, &snapshot);

  0087a	e9 d1 fb ff ff	 jmp	 $LN344@PxSocket_I@4
$LN339@PxSocket_I@4:

; 6467 :         goto do_async_recv;
; 6468 :     } else {
; 6469 :         /* xxx todo: check if we were in the middle of a multipart recv. */
; 6470 :         s->recv_id--;

  0087f	4c 8b 65 d8	 mov	 r12, QWORD PTR args$1$[rbp-104]
$LN342@PxSocket_I@4:
  00883	33 d2		 xor	 edx, edx
$try_recv$129995:

; 6373 : 
; 6374 :     goto end;
; 6375 : 
; 6376 : try_recv:
; 6377 :     /*
; 6378 :     if ((Px_SOCKFLAGS(s) & Px_SOCKFLAGS_HAS_CONNECTION_MADE) &&
; 6379 :        !(Px_SOCKFLAGS(s) & Px_SOCKFLAGS_CALLED_CONNECTION_MADE))
; 6380 :     {
; 6381 :         next_opcode = pxsock_try_recv;
; 6382 :         goto definitely_do_connection_made;
; 6383 :     }
; 6384 :     */
; 6385 : 
; 6386 :     if ((Px_SOCKFLAGS(s) & Px_SOCKFLAGS_CLOSE_SCHEDULED) ||
; 6387 :         (!(PxSocket_CAN_RECV(s))))

  00885	8b 86 f4 01 00
	00		 mov	 eax, DWORD PTR [rsi+500]
  0088b	0f ba e0 16	 bt	 eax, 22
  0088f	0f 82 25 07 00
	00		 jb	 $definitely_close$129966
  00895	0f ba e0 10	 bt	 eax, 16
  00899	0f 83 1b 07 00
	00		 jae	 $definitely_close$129966

; 6388 :         goto definitely_close;
; 6389 : 
; 6390 :     if (s->io_op == PxSocket_IO_ACCEPT && !s->initial_bytes_to_send) {

  0089f	83 be 50 03 00
	00 02		 cmp	 DWORD PTR [rsi+848], 2
  008a6	0f 85 ae fc ff
	ff		 jne	 $do_recv$130199
  008ac	48 83 be f0 02
	00 00 00	 cmp	 QWORD PTR [rsi+752], 0
  008b4	0f 85 a0 fc ff
	ff		 jne	 $do_recv$130199

; 6391 :         /*
; 6392 :          * This code path will cover a newly connected client that's just sent
; 6393 :          * some data.
; 6394 :          */
; 6395 :         assert(s->recv_nbytes == 0);
; 6396 :         assert(recv_nbytes == 0);
; 6397 :         assert(s->recv_id == 0);
; 6398 :         recv_nbytes = (DWORD)c->overlapped.InternalHigh;

  008ba	41 8b 8f b8 32
	00 00		 mov	 ecx, DWORD PTR [r15+12984]
  008c1	89 4d 48	 mov	 DWORD PTR recv_nbytes$[rbp-104], ecx

; 6399 :         if (recv_nbytes == 0)

  008c4	85 c9		 test	 ecx, ecx
  008c6	0f 85 13 f9 ff
	ff		 jne	 $process_data_received$130198

; 6400 :             goto connection_closed;
; 6401 :         goto process_data_received;

  008cc	e9 34 07 00 00	 jmp	 $connection_closed$130177
$LN89@PxSocket_I@4:

; 6425 :     }
; 6426 : 
; 6427 :     n = 1;
; 6428 :     if (_PxSocket_ActiveIOLoops >= _PyParallel_NumCPUs-1)

  008d1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _PyParallel_NumCPUs
  008d7	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _PxSocket_ActiveIOLoops
  008dd	bf 01 00 00 00	 mov	 edi, 1
  008e2	ff c9		 dec	 ecx
  008e4	3b c1		 cmp	 eax, ecx
  008e6	0f 8d b4 01 00
	00		 jge	 $do_async_recv$130211

; 6429 :         goto do_async_recv;
; 6430 :     else if (PxSocket_CONCURRENCY(s))

  008ec	f7 86 f4 01 00
	00 00 08 00 00	 test	 DWORD PTR [rsi+500], 2048 ; 00000800H
  008f6	0f 85 a4 01 00
	00		 jne	 $do_async_recv$130211
$try_synchronous_recv$130209:

; 6431 :         goto do_async_recv;
; 6432 : 
; 6433 : try_synchronous_recv:
; 6434 :     s->recv_id++;

  008fc	48 ff 86 70 02
	00 00		 inc	 QWORD PTR [rsi+624]

; 6435 : 
; 6436 :     /*
; 6437 :      * Again, this next chunk of code reuses the same pattern employed by
; 6438 :      * try_synchronous_recv:.
; 6439 :      */
; 6440 : 
; 6441 :     assert(recv_flags == 0);
; 6442 :     assert(recv_nbytes == 0);
; 6443 : 
; 6444 :     err = SOCKET_ERROR;
; 6445 :     wsa_error = NO_ERROR;
; 6446 :     for (i = 1; i <= n; i++) {

  00903	bb 01 00 00 00	 mov	 ebx, 1
  00908	44 8b f2	 mov	 r14d, edx
  0090b	3b fb		 cmp	 edi, ebx
  0090d	0f 8c 41 02 00
	00		 jl	 $LN65@PxSocket_I@4
  00913	66 66 66 66 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL85@PxSocket_I@4:

; 6447 :         err = WSARecv(fd, w, 1, &recv_nbytes, &recv_flags, 0, 0);

  00920	48 8b 4d e8	 mov	 rcx, QWORD PTR fd$1$[rbp-104]
  00924	48 89 54 24 30	 mov	 QWORD PTR [rsp+48], rdx
  00929	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  0092e	48 8d 45 50	 lea	 rax, QWORD PTR recv_flags$[rbp-104]
  00932	49 8d 55 40	 lea	 rdx, QWORD PTR [r13+64]
  00936	4c 8d 4d 48	 lea	 r9, QWORD PTR recv_nbytes$[rbp-104]
  0093a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00940	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00945	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSARecv

; 6448 :         if (err == SOCKET_ERROR) {

  0094b	83 f8 ff	 cmp	 eax, -1			; ffffffffH
  0094e	75 32		 jne	 SHORT $LN319@PxSocket_I@4

; 6449 :             wsa_error = WSAGetLastError();

  00950	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  00956	44 8b f0	 mov	 r14d, eax

; 6450 :             if (wsa_error == WSAEWOULDBLOCK && i < n)

  00959	3d 33 27 00 00	 cmp	 eax, 10035		; 00002733H
  0095e	0f 85 f0 01 00
	00		 jne	 $LN65@PxSocket_I@4
  00964	3b df		 cmp	 ebx, edi
  00966	0f 8d 2d 01 00
	00		 jge	 $LN338@PxSocket_I@4

; 6451 :                 Sleep(0);

  0096c	33 c9		 xor	 ecx, ecx
  0096e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_Sleep
  00974	ff c3		 inc	 ebx
  00976	3b df		 cmp	 ebx, edi
  00978	0f 8f 1b 01 00
	00		 jg	 $LN338@PxSocket_I@4

; 6435 : 
; 6436 :     /*
; 6437 :      * Again, this next chunk of code reuses the same pattern employed by
; 6438 :      * try_synchronous_recv:.
; 6439 :      */
; 6440 : 
; 6441 :     assert(recv_flags == 0);
; 6442 :     assert(recv_nbytes == 0);
; 6443 : 
; 6444 :     err = SOCKET_ERROR;
; 6445 :     wsa_error = NO_ERROR;
; 6446 :     for (i = 1; i <= n; i++) {

  0097e	33 d2		 xor	 edx, edx
  00980	eb 9e		 jmp	 SHORT $LL85@PxSocket_I@4
$LN319@PxSocket_I@4:

; 6452 :             else
; 6453 :                 break;
; 6454 :         } else
; 6455 :             break;
; 6456 :     }
; 6457 : 
; 6458 :     if (err != SOCKET_ERROR) {
; 6459 :         /* Receive completed synchronously. */
; 6460 :         if (recv_nbytes == 0)

  00982	8b 4d 48	 mov	 ecx, DWORD PTR recv_nbytes$[rbp-104]
  00985	85 c9		 test	 ecx, ecx
  00987	0f 84 78 06 00
	00		 je	 $connection_closed$130177

; 6461 :             goto connection_closed;
; 6462 :         w = NULL;
; 6463 :         rbuf = NULL;
; 6464 :         goto process_data_received;

  0098d	4c 8b 65 d8	 mov	 r12, QWORD PTR args$1$[rbp-104]
  00991	e9 49 f8 ff ff	 jmp	 $process_data_received$130198
$LN336@PxSocket_I@4:

; 6640 :             s->sendfile_snapshot = rbuf->snapshot;

  00996	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]

; 6641 :             rbuf->snapshot = NULL;
; 6642 :             goto do_sendfile;

  0099a	4c 8b 6d e8	 mov	 r13, QWORD PTR fd$1$[rbp-104]
  0099e	4c 8d a6 28 03
	00 00		 lea	 r12, QWORD PTR [rsi+808]
  009a5	45 33 f6	 xor	 r14d, r14d
  009a8	49 89 04 24	 mov	 QWORD PTR [r12], rax
  009ac	4c 89 73 10	 mov	 QWORD PTR [rbx+16], r14
  009b0	eb 0e		 jmp	 SHORT $do_sendfile$130026
$LN337@PxSocket_I@4:

; 6258 :             s->sendfile_snapshot = snapshot;

  009b2	4c 8d a6 28 03
	00 00		 lea	 r12, QWORD PTR [rsi+808]
  009b9	45 33 f6	 xor	 r14d, r14d
  009bc	49 89 3c 24	 mov	 QWORD PTR [r12], rdi
$do_sendfile$130026:

; 6685 :         goto do_send;
; 6686 :     }
; 6687 : 
; 6688 :     assert(0);
; 6689 : 
; 6690 : do_sendfile:
; 6691 : 
; 6692 :     if (!s->tp_io) {

  009c0	48 83 be 58 03
	00 00 00	 cmp	 QWORD PTR [rsi+856], 0
  009c8	75 27		 jne	 SHORT $LN29@PxSocket_I@4

; 6693 :         PTP_WIN32_IO_CALLBACK cb = PxSocketClient_Callback;
; 6694 :         s->tp_io = CreateThreadpoolIo((HANDLE)s->sock_fd, cb, c, NULL);

  009ca	48 8b 4e 60	 mov	 rcx, QWORD PTR [rsi+96]
  009ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PxSocketClient_Callback
  009d5	45 33 c9	 xor	 r9d, r9d
  009d8	4d 8b c7	 mov	 r8, r15
  009db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateThreadpoolIo
  009e1	48 89 86 58 03
	00 00		 mov	 QWORD PTR [rsi+856], rax

; 6695 :         if (!s->tp_io)

  009e8	48 85 c0	 test	 rax, rax
  009eb	0f 84 64 05 00
	00		 je	 $LN271@PxSocket_I@4
$LN29@PxSocket_I@4:

; 6696 :             PxSocket_SYSERROR("CreateThreadpoolIo");
; 6697 :     }
; 6698 : 
; 6699 :     StartThreadpoolIo(s->tp_io);

  009f1	48 8b 8e 58 03
	00 00		 mov	 rcx, QWORD PTR [rsi+856]
  009f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_StartThreadpoolIo

; 6700 : 
; 6701 :     err = SOCKET_ERROR;
; 6702 :     wsa_error = NO_ERROR;
; 6703 : 
; 6704 :     s->send_id++;

  009fe	48 ff 86 68 02
	00 00		 inc	 QWORD PTR [rsi+616]

; 6705 :     s->io_op = PxSocket_IO_SENDFILE;
; 6706 : 
; 6707 :     h = s->sendfile_handle;

  00a05	48 8b be 20 03
	00 00		 mov	 rdi, QWORD PTR [rsi+800]

; 6708 :     tf = &s->sendfile_tfbuf;
; 6709 :     ol = &c->overlapped;

  00a0c	49 8d 9f b0 32
	00 00		 lea	 rbx, QWORD PTR [r15+12976]
  00a13	c7 86 50 03 00
	00 40 00 00 00	 mov	 DWORD PTR [rsi+848], 64	; 00000040H

; 6710 :     RESET_OVERLAPPED(ol);

  00a1d	48 8b cb	 mov	 rcx, rbx
  00a20	e8 00 00 00 00	 call	 _RESET_OVERLAPPED
  00a25	48 8d 86 30 03
	00 00		 lea	 rax, QWORD PTR [rsi+816]

; 6711 :     s->ol = c->ol = ol;
; 6712 : 
; 6713 :     if (TransmitFile(fd, h, 0, 0, ol, tf, 0)) {

  00a2c	44 89 74 24 30	 mov	 DWORD PTR [rsp+48], r14d
  00a31	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00a36	49 89 9f d0 32
	00 00		 mov	 QWORD PTR [r15+13008], rbx
  00a3d	45 33 c9	 xor	 r9d, r9d
  00a40	45 33 c0	 xor	 r8d, r8d
  00a43	48 8b d7	 mov	 rdx, rdi
  00a46	49 8b cd	 mov	 rcx, r13
  00a49	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00a4e	48 89 9e 80 03
	00 00		 mov	 QWORD PTR [rsi+896], rbx
  00a55	ff 15 70 00 00
	00		 call	 QWORD PTR PySocketModule+112
  00a5b	85 c0		 test	 eax, eax
  00a5d	0f 85 f1 02 00
	00		 jne	 $end$129949

; 6714 :         /* TransmitFile completed synchronously.  Completion packet will be
; 6715 :          * queued. */
; 6716 :         goto end;
; 6717 :     } else {
; 6718 :         wsa_error = WSAGetLastError();

  00a63	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  00a69	44 8b f0	 mov	 r14d, eax

; 6719 :         if (wsa_error == WSA_IO_PENDING)

  00a6c	3d e5 03 00 00	 cmp	 eax, 997		; 000003e5H
  00a71	0f 84 dd 02 00
	00		 je	 $end$129949

; 6720 :             /* Overlapped transmit file request successfully initiated;
; 6721 :              * completion packet will be queued once transmission completes
; 6722 :              * (or an error occurs). */
; 6723 :             goto end;
; 6724 : 
; 6725 :         /* Overlapped transmit file attempt failed.  No completion packet will
; 6726 :          * be queued, so we need to take care of cleanup ourselves. */
; 6727 :         if (s->sendfile_snapshot)

  00a77	49 83 3c 24 00	 cmp	 QWORD PTR [r12], 0
  00a7c	74 0b		 je	 SHORT $LN25@PxSocket_I@4

; 6728 :             PxContext_RollbackHeap(c, &s->sendfile_snapshot);

  00a7e	49 8b d4	 mov	 rdx, r12
$LN346@PxSocket_I@4:
  00a81	49 8b cf	 mov	 rcx, r15
  00a84	e8 00 00 00 00	 call	 PxContext_RollbackHeap
$LN25@PxSocket_I@4:

; 6729 : 
; 6730 :         s->send_id--;

  00a89	48 ff 8e 68 02
	00 00		 dec	 QWORD PTR [rsi+616]

; 6731 :         goto send_failed;

  00a90	4c 8b 65 d8	 mov	 r12, QWORD PTR args$1$[rbp-104]
  00a94	e9 ca 00 00 00	 jmp	 $recv_failed$130233
$LN338@PxSocket_I@4:

; 6465 :     } else if (wsa_error == WSAEWOULDBLOCK) {
; 6466 :         s->recv_id--;

  00a99	48 ff 8e 70 02
	00 00		 dec	 QWORD PTR [rsi+624]
$do_async_recv$130211:

; 6471 :         /*
; 6472 :         assert(rbuf->snapshot);
; 6473 :         PxContext_RollbackHeap(c, &rbuf->snapshot);
; 6474 :         */
; 6475 :         w = NULL;
; 6476 :         rbuf = NULL;
; 6477 :         goto recv_failed;
; 6478 :     }
; 6479 : 
; 6480 :     assert(0);
; 6481 : 
; 6482 : do_async_recv:
; 6483 :     assert(rbuf);
; 6484 :     assert(w);
; 6485 : 
; 6486 :     /*if (s->recv_id % 10000 == 0)
; 6487 :         printf("\ntrying sync recv for client %d/%d\n",
; 6488 :            s->child_id, s->sock_fd);*/
; 6489 : 
; 6490 :     if (!s->tp_io) {

  00aa0	48 83 be 58 03
	00 00 00	 cmp	 QWORD PTR [rsi+856], 0
  00aa8	75 27		 jne	 SHORT $LN69@PxSocket_I@4

; 6491 :         PTP_WIN32_IO_CALLBACK cb = PxSocketClient_Callback;
; 6492 :         /* I don't know off the top of my head if we need to assert any state
; 6493 :          * flags here like we do in `do_async_send:' as there are more entry
; 6494 :          * point variations for this code. */
; 6495 :         /*assert(Px_SOCKFLAGS(s) & Px_SOCKFLAGS_SENDING_INITIAL_BYTES);*/
; 6496 :         s->tp_io = CreateThreadpoolIo((HANDLE)s->sock_fd, cb, c, NULL);

  00aaa	48 8b 4e 60	 mov	 rcx, QWORD PTR [rsi+96]
  00aae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PxSocketClient_Callback
  00ab5	45 33 c9	 xor	 r9d, r9d
  00ab8	4d 8b c7	 mov	 r8, r15
  00abb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateThreadpoolIo
  00ac1	48 89 86 58 03
	00 00		 mov	 QWORD PTR [rsi+856], rax

; 6497 :         if (!s->tp_io) {

  00ac8	48 85 c0	 test	 rax, rax
  00acb	0f 84 6e 04 00
	00		 je	 $LN297@PxSocket_I@4
$LN69@PxSocket_I@4:

; 6501 :         }
; 6502 :     }
; 6503 : 
; 6504 :     s->recv_id++;
; 6505 :     StartThreadpoolIo(s->tp_io);

  00ad1	48 8b 8e 58 03
	00 00		 mov	 rcx, QWORD PTR [rsi+856]
  00ad8	48 ff 86 70 02
	00 00		 inc	 QWORD PTR [rsi+624]
  00adf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_StartThreadpoolIo

; 6506 :     s->ol = &rbuf->ol;

  00ae5	49 8d 4d 20	 lea	 rcx, QWORD PTR [r13+32]
  00ae9	48 89 8e 80 03
	00 00		 mov	 QWORD PTR [rsi+896], rcx

; 6507 :     RESET_OVERLAPPED(s->ol);

  00af0	e8 00 00 00 00	 call	 _RESET_OVERLAPPED

; 6508 : 
; 6509 :     err = WSARecv(fd, w, 1, 0, &recv_flags, s->ol, NULL);

  00af5	48 8b 86 80 03
	00 00		 mov	 rax, QWORD PTR [rsi+896]
  00afc	48 8b 4d e8	 mov	 rcx, QWORD PTR fd$1$[rbp-104]
  00b00	33 db		 xor	 ebx, ebx
  00b02	49 8d 55 40	 lea	 rdx, QWORD PTR [r13+64]
  00b06	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00b0b	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00b10	48 8d 45 50	 lea	 rax, QWORD PTR recv_flags$[rbp-104]
  00b14	44 8d 43 01	 lea	 r8d, QWORD PTR [rbx+1]
  00b18	45 33 c9	 xor	 r9d, r9d
  00b1b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00b20	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSARecv

; 6510 :     if (err == NO_ERROR) {

  00b26	85 c0		 test	 eax, eax
  00b28	0f 84 26 02 00
	00		 je	 $end$129949

; 6511 :         /* Recv completed synchronously.  Completion packet will be queued. */
; 6512 :         goto end;
; 6513 :     } else {
; 6514 :         wsa_error = WSAGetLastError();

  00b2e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  00b34	44 8b f0	 mov	 r14d, eax

; 6515 :         if (wsa_error == WSA_IO_PENDING)

  00b37	3d e5 03 00 00	 cmp	 eax, 997		; 000003e5H
  00b3c	0f 84 12 02 00
	00		 je	 $end$129949

; 6516 :             /* Overlapped IO successfully initiated; completion packet will be
; 6517 :              * queued once data is received or an error occurs. */
; 6518 :             goto end;
; 6519 : 
; 6520 :         /* Overlapped receive attempt failed.  No completion packet will be
; 6521 :          * queued, so we need to take care of cleanup here. */
; 6522 :         if (rbuf->snapshot)

  00b42	49 39 5d 10	 cmp	 QWORD PTR [r13+16], rbx
  00b46	49 8d 55 10	 lea	 rdx, QWORD PTR [r13+16]
  00b4a	74 08		 je	 SHORT $LN65@PxSocket_I@4

; 6523 :             PxContext_RollbackHeap(c, &rbuf->snapshot);

  00b4c	49 8b cf	 mov	 rcx, r15
  00b4f	e8 00 00 00 00	 call	 PxContext_RollbackHeap
$LN65@PxSocket_I@4:

; 6524 :         s->recv_id--;

  00b54	48 ff 8e 70 02
	00 00		 dec	 QWORD PTR [rsi+624]
$LN345@PxSocket_I@4:

; 6218 :     }
; 6219 : 
; 6220 :     s->send_nbytes += sbuf->w.len;

  00b5b	4c 8b 65 d8	 mov	 r12, QWORD PTR args$1$[rbp-104]
$LN340@PxSocket_I@4:
  00b5f	4c 8b 6d e8	 mov	 r13, QWORD PTR fd$1$[rbp-104]
$recv_failed$130233:
  00b63	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:__ImageBase
$handle_error$129924:

; 6785 :             PxContext_RollbackHeap(c, &rbuf->snapshot);
; 6786 :             PxSocket_FATAL();
; 6787 :         }
; 6788 :     } else {
; 6789 :         /* xxx todo */
; 6790 :         assert(0);
; 6791 :     }
; 6792 : 
; 6793 :     assert(0);
; 6794 : 
; 6795 : recv_failed:
; 6796 :     assert(wsa_error);
; 6797 :     func = s->recv_failed;
; 6798 :     if (func) {
; 6799 :         /* xxx todo */
; 6800 :         assert(0 == "xxx todo: recv_failed");
; 6801 :     }
; 6802 :     assert(s->io_op == PxSocket_IO_RECV);
; 6803 :     syscall = "WSARecv";
; 6804 :     goto handle_error;
; 6805 : 
; 6806 : handle_error:
; 6807 :     /* inline PxSocket_HandleError() */
; 6808 :     assert(syscall);
; 6809 :     assert(wsa_error);
; 6810 :     assert(!PyErr_Occurred());
; 6811 :     callback = NULL;
; 6812 : 
; 6813 :     switch (wsa_error) {

  00b6a	41 81 fe 14 27
	00 00		 cmp	 r14d, 10004		; 00002714H
  00b71	0f 87 fe 01 00
	00		 ja	 $LN239@PxSocket_I@4
  00b77	0f 84 cf 01 00
	00		 je	 $LN6@PxSocket_I@4
  00b7d	41 81 fe ea 00
	00 00		 cmp	 r14d, 234		; 000000eaH
  00b84	0f 87 8f 01 00
	00		 ja	 $LN240@PxSocket_I@4
  00b8a	0f 84 7d 01 00
	00		 je	 $LN5@PxSocket_I@4
  00b90	41 83 fe 06	 cmp	 r14d, 6
  00b94	0f 84 b2 01 00
	00		 je	 $LN6@PxSocket_I@4
  00b9a	41 83 fe 08	 cmp	 r14d, 8
  00b9e	0f 84 a8 01 00
	00		 je	 $LN6@PxSocket_I@4
  00ba4	41 83 fe 40	 cmp	 r14d, 64		; 00000040H
  00ba8	0f 85 fd 03 00
	00		 jne	 $LN281@PxSocket_I@4
$LN13@PxSocket_I@4:

; 6814 :         case ERROR_PORT_UNREACHABLE:
; 6815 :         case ERROR_CONNECTION_ABORTED:
; 6816 :         case ERROR_NETNAME_DELETED:
; 6817 :         case WSAECONNRESET:
; 6818 :         case WSAENETDOWN:
; 6819 :         case WSAENETRESET:
; 6820 :         case WSAECONNABORTED:
; 6821 :         case WSAENOTCONN:
; 6822 :         case WSAEDISCON:
; 6823 :             Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_CLOSE_SCHEDULED;

  00bae	81 8e f4 01 00
	00 00 00 40 00	 or	 DWORD PTR [rsi+500], 4194304 ; 00400000H

; 6824 :             break;

  00bb8	e9 35 02 00 00	 jmp	 $close_$129937
$LN143@PxSocket_I@4:

; 6151 :         goto do_async_send;
; 6152 :     } else {
; 6153 :         s->send_id--;

  00bbd	48 ff 8e 68 02
	00 00		 dec	 QWORD PTR [rsi+616]

; 6154 :         PxContext_RollbackHeap(c, &sbuf->snapshot);

  00bc4	48 8d 57 10	 lea	 rdx, QWORD PTR [rdi+16]
  00bc8	49 8b cf	 mov	 rcx, r15
  00bcb	e8 00 00 00 00	 call	 PxContext_RollbackHeap

; 6155 :         w = NULL;
; 6156 :         sbuf = NULL;

  00bd0	33 db		 xor	 ebx, ebx
$send_failed$130084:
  00bd2	48 89 5d 60	 mov	 QWORD PTR sbuf$[rbp-104], rbx

; 6218 :     }
; 6219 : 
; 6220 :     s->send_nbytes += sbuf->w.len;

  00bd6	eb 83		 jmp	 SHORT $LN345@PxSocket_I@4
$LN334@PxSocket_I@4:

; 6147 :         snapshot = NULL;
; 6148 :         goto send_complete;
; 6149 :     } else if (wsa_error == WSAEWOULDBLOCK) {
; 6150 :         s->send_id--;

  00bd8	48 8b 7d 60	 mov	 rdi, QWORD PTR sbuf$[rbp-104]
$do_async_send$130058:

; 6157 :         snapshot = NULL;
; 6158 :         goto send_failed;
; 6159 :     }
; 6160 : 
; 6161 : do_async_send:
; 6162 :     /* There's some unavoidable code duplication between do_send: above and
; 6163 :      * do_async_send: below.  If you change one, check to see if you need to
; 6164 :      * change the other. */
; 6165 :     assert(sbuf);
; 6166 :     w = &sbuf->w;
; 6167 :     /* PyGotham NYC */
; 6168 :     ol = s->ol = c->ol = &sbuf->ol;

  00bdc	48 8d 5f 20	 lea	 rbx, QWORD PTR [rdi+32]
  00be0	49 89 9f d0 32
	00 00		 mov	 QWORD PTR [r15+13008], rbx

; 6169 :     /*assert(s->ol == ol);*/
; 6170 : 
; 6171 :     if (!s->tp_io) {

  00be7	48 83 be 58 03
	00 00 00	 cmp	 QWORD PTR [rsi+856], 0
  00bef	48 89 9e 80 03
	00 00		 mov	 QWORD PTR [rsi+896], rbx
  00bf6	75 27		 jne	 SHORT $LN137@PxSocket_I@4

; 6172 :         PTP_WIN32_IO_CALLBACK cb = PxSocketClient_Callback;
; 6173 :         assert(Px_SOCKFLAGS(s) & Px_SOCKFLAGS_SENDING_INITIAL_BYTES);
; 6174 :         s->tp_io = CreateThreadpoolIo((HANDLE)s->sock_fd, cb, c, NULL);

  00bf8	48 8b 4e 60	 mov	 rcx, QWORD PTR [rsi+96]
  00bfc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PxSocketClient_Callback
  00c03	45 33 c9	 xor	 r9d, r9d
  00c06	4d 8b c7	 mov	 r8, r15
  00c09	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateThreadpoolIo
  00c0f	48 89 86 58 03
	00 00		 mov	 QWORD PTR [rsi+856], rax

; 6175 :         if (!s->tp_io)

  00c16	48 85 c0	 test	 rax, rax
  00c19	0f 84 36 03 00
	00		 je	 $LN271@PxSocket_I@4
$LN137@PxSocket_I@4:

; 6176 :             PxSocket_SYSERROR("CreateThreadpoolIo");
; 6177 :     }
; 6178 : 
; 6179 :     s->io_op = PxSocket_IO_SEND;
; 6180 : 
; 6181 :     s->send_id++;
; 6182 : 
; 6183 :     StartThreadpoolIo(s->tp_io);

  00c1f	48 8b 8e 58 03
	00 00		 mov	 rcx, QWORD PTR [rsi+856]
  00c26	48 ff 86 68 02
	00 00		 inc	 QWORD PTR [rsi+616]
  00c2d	c7 86 50 03 00
	00 08 00 00 00	 mov	 DWORD PTR [rsi+848], 8
  00c37	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_StartThreadpoolIo

; 6184 :     err = WSASend(fd, w, 1, NULL, 0, ol, NULL);

  00c3d	4c 8b 6d e8	 mov	 r13, QWORD PTR fd$1$[rbp-104]
  00c41	33 c0		 xor	 eax, eax
  00c43	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00c48	44 8d 40 01	 lea	 r8d, QWORD PTR [rax+1]
  00c4c	48 8d 57 40	 lea	 rdx, QWORD PTR [rdi+64]
  00c50	49 8b cd	 mov	 rcx, r13
  00c53	45 33 c9	 xor	 r9d, r9d
  00c56	48 89 5c 24 28	 mov	 QWORD PTR [rsp+40], rbx
  00c5b	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00c5f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSASend

; 6185 :     if (err == NO_ERROR) {

  00c65	85 c0		 test	 eax, eax
  00c67	0f 84 09 03 00
	00		 je	 $LN293@PxSocket_I@4

; 6189 :     } else {
; 6190 :         wsa_error = WSAGetLastError();

  00c6d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  00c73	44 8b f0	 mov	 r14d, eax

; 6191 :         if (wsa_error == WSA_IO_PENDING)

  00c76	3d e5 03 00 00	 cmp	 eax, 997		; 000003e5H
  00c7b	0f 84 d3 00 00
	00		 je	 $end$129949

; 6192 :             /* Overlapped IO successfully initiated; completion packet will
; 6193 :              * eventually get queued (when the IO completes or an error
; 6194 :              * occurs). */
; 6195 :             goto end;
; 6196 : 
; 6197 :         /* The overlapped send attempt failed.  No completion packet will
; 6198 :          * ever be queued, so we need to take care of cleanup here. */
; 6199 :         PxContext_RollbackHeap(c, &sbuf->snapshot);

  00c81	48 8d 57 10	 lea	 rdx, QWORD PTR [rdi+16]

; 6200 :         s->send_id--;
; 6201 :         goto send_failed;

  00c85	e9 f7 fd ff ff	 jmp	 $LN346@PxSocket_I@4
$do_lines_received_callback$130270:

; 6759 : 
; 6760 : do_lines_received_callback:
; 6761 :     func = s->lines_received;
; 6762 :     assert(func);
; 6763 : 
; 6764 :     assert(0);
; 6765 : 
; 6766 :     assert(!rbuf->snapshot);
; 6767 :     rbuf->snapshot = PxContext_HeapSnapshot(c, NULL);

  00c8a	e8 00 00 00 00	 call	 PxContext_HeapSnapshot
  00c8f	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax

; 6768 : 
; 6769 : 
; 6770 :     /* For now, num_rbufs should only ever be 1. */
; 6771 :     assert(s->num_rbufs == 1);
; 6772 : 
; 6773 :     if (s->num_rbufs == 1) {

  00c93	83 be 78 03 00
	00 01		 cmp	 DWORD PTR [rsi+888], 1
  00c9a	0f 85 bf fe ff
	ff		 jne	 $LN340@PxSocket_I@4

; 6774 :         PyObject *n;
; 6775 :         PyObject *o;
; 6776 :         PyTypeObject *tp = &PyBytes_Type;
; 6777 :         bytes = R2B(rbuf);

  00ca0	48 8d 7b 70	 lea	 rdi, QWORD PTR [rbx+112]

; 6778 :         o = (PyObject *)bytes;
; 6779 :         Py_PXFLAGS(bytes) = Py_PXFLAGS_MIMIC;
; 6780 :         n = init_object(c, o, tp, recv_nbytes);

  00ca4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyBytes_Type
  00cab	49 8b cf	 mov	 rcx, r15
  00cae	48 c7 47 20 00
	02 00 00	 mov	 QWORD PTR [rdi+32], 512	; 00000200H
  00cb6	44 8b 4d 48	 mov	 r9d, DWORD PTR recv_nbytes$[rbp-104]
  00cba	48 8b d7	 mov	 rdx, rdi
  00cbd	48 89 7d f0	 mov	 QWORD PTR bytes$1$[rbp-104], rdi
  00cc1	e8 00 00 00 00	 call	 init_object

; 6781 :         assert(n == o);
; 6782 :         assert(Py_SIZE(bytes) == recv_nbytes);
; 6783 :         args = PyTuple_Pack(2, s, o);

  00cc6	4c 8b c7	 mov	 r8, rdi
  00cc9	48 8b d6	 mov	 rdx, rsi
  00ccc	b9 02 00 00 00	 mov	 ecx, 2
  00cd1	e8 00 00 00 00	 call	 PyTuple_Pack
  00cd6	4c 8b e0	 mov	 r12, rax
  00cd9	48 89 45 d8	 mov	 QWORD PTR args$1$[rbp-104], rax

; 6784 :         if (!args) {

  00cdd	48 85 c0	 test	 rax, rax
  00ce0	0f 84 98 f5 ff
	ff		 je	 $LN285@PxSocket_I@4

; 6218 :     }
; 6219 : 
; 6220 :     s->send_nbytes += sbuf->w.len;

  00ce6	e9 74 fe ff ff	 jmp	 $LN340@PxSocket_I@4
$LN282@PxSocket_I@4:

; 6539 :         s->recv_id--;

  00ceb	48 ff 8e 70 02
	00 00		 dec	 QWORD PTR [rsi+624]

; 6540 :         if (rbuf->snapshot)

  00cf2	48 83 c2 10	 add	 rdx, 16
  00cf6	48 83 3a 00	 cmp	 QWORD PTR [rdx], 0
  00cfa	0f 84 63 fe ff
	ff		 je	 $recv_failed$130233

; 6541 :             PxContext_RollbackHeap(c, &rbuf->snapshot);

  00d00	49 8b cf	 mov	 rcx, r15
  00d03	e8 00 00 00 00	 call	 PxContext_RollbackHeap
  00d08	e9 56 fe ff ff	 jmp	 $recv_failed$130233
$LN5@PxSocket_I@4:

; 6846 : 
; 6847 :         /* (we shouldn't see any of these in normal operating conditions) */
; 6848 :         case WSAEINTR:
; 6849 :         case WSAEINVAL:
; 6850 :         case WSAEFAULT:
; 6851 :         case WSAEMSGSIZE:
; 6852 :         case WSAEOPNOTSUPP:
; 6853 :         case WSAEINPROGRESS:
; 6854 :         case WSA_OPERATION_ABORTED:
; 6855 :         case WSAENOTSOCK:
; 6856 :         case WSANOTINITIALISED:
; 6857 :         case WSAESOCKTNOSUPPORT:
; 6858 :         case WSA_NOT_ENOUGH_MEMORY:
; 6859 :         case WSA_INVALID_HANDLE:
; 6860 :         case WSA_INVALID_PARAMETER:
; 6861 :         case WSAEADDRNOTAVAIL:
; 6862 :         case WSAEADDRINUSE:
; 6863 :             PyErr_SetFromWindowsErr(wsa_error);
; 6864 :             goto handle_exception;
; 6865 : 
; 6866 :         /* errors that indicate our socket logic is broken */
; 6867 :         case ERROR_MORE_DATA:
; 6868 :             assert(0);
; 6869 :             Py_FatalError("ERROR_MORE_DATA");

  00d0d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@JMGJABEC@ERROR_MORE_DATA?$AA@

; 6870 :             break;

  00d14	e9 d4 00 00 00	 jmp	 $LN347@PxSocket_I@4
$LN240@PxSocket_I@4:

; 6785 :             PxContext_RollbackHeap(c, &rbuf->snapshot);
; 6786 :             PxSocket_FATAL();
; 6787 :         }
; 6788 :     } else {
; 6789 :         /* xxx todo */
; 6790 :         assert(0);
; 6791 :     }
; 6792 : 
; 6793 :     assert(0);
; 6794 : 
; 6795 : recv_failed:
; 6796 :     assert(wsa_error);
; 6797 :     func = s->recv_failed;
; 6798 :     if (func) {
; 6799 :         /* xxx todo */
; 6800 :         assert(0 == "xxx todo: recv_failed");
; 6801 :     }
; 6802 :     assert(s->io_op == PxSocket_IO_RECV);
; 6803 :     syscall = "WSARecv";
; 6804 :     goto handle_error;
; 6805 : 
; 6806 : handle_error:
; 6807 :     /* inline PxSocket_HandleError() */
; 6808 :     assert(syscall);
; 6809 :     assert(wsa_error);
; 6810 :     assert(!PyErr_Occurred());
; 6811 :     callback = NULL;
; 6812 : 
; 6813 :     switch (wsa_error) {

  00d19	41 8b c6	 mov	 eax, r14d
  00d1c	2d e3 03 00 00	 sub	 eax, 995		; 000003e3H
  00d21	74 29		 je	 SHORT $LN6@PxSocket_I@4
  00d23	83 e8 02	 sub	 eax, 2
  00d26	74 44		 je	 SHORT $LN4@PxSocket_I@4
  00d28	2d ed 00 00 00	 sub	 eax, 237		; 000000edH
  00d2d	0f 84 7b fe ff
	ff		 je	 $LN13@PxSocket_I@4
  00d33	83 f8 02	 cmp	 eax, 2
  00d36	0f 84 72 fe ff
	ff		 je	 $LN13@PxSocket_I@4
$LN2@PxSocket_I@4:

; 6880 :             break;
; 6881 : 
; 6882 :         default:
; 6883 :             printf("unknown error code: %d\n", wsa_error);

  00d3c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@MJHHLNDN@unknown?5error?5code?3?5?$CFd?6?$AA@
  00d43	41 8b d6	 mov	 edx, r14d
  00d46	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf
$LN6@PxSocket_I@4:

; 6884 :             assert(0);
; 6885 :             PyErr_SetFromWindowsErr(wsa_error);

  00d4c	41 8b ce	 mov	 ecx, r14d
  00d4f	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
$end$129949:

; 6886 :             goto handle_exception;
; 6887 :     }
; 6888 : 
; 6889 :     if (callback) {
; 6890 :         /* xxx todo */
; 6891 :         assert(0);
; 6892 :     }
; 6893 : 
; 6894 :     assert(Px_SOCKFLAGS(s) & Px_SOCKFLAGS_CLOSE_SCHEDULED);
; 6895 :     goto close_;
; 6896 : 
; 6897 : handle_exception:
; 6898 :     /* Inline PxSocket_HandleException() */
; 6899 :     assert(PyErr_Occurred());
; 6900 :     /* xxx todo */
; 6901 :     assert(0);
; 6902 : 
; 6903 : connection_made_callback:
; 6904 : data_received_callback:
; 6905 : send_complete_callback:
; 6906 : post_callback_that_supports_sending_retval:
; 6907 : post_callback_that_does_not_support_sending_retval:
; 6908 : try_send:
; 6909 : 
; 6910 : 
; 6911 : end:
; 6912 :     InterlockedDecrement(&_PxSocket_ActiveIOLoops);

  00d54	f0 ff 0d 00 00
	00 00		 lock dec DWORD PTR _PxSocket_ActiveIOLoops

; 6913 : 
; 6914 :     return;
; 6915 : 
; 6916 : }

  00d5b	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00d5f	41 5f		 pop	 r15
  00d61	41 5e		 pop	 r14
  00d63	41 5d		 pop	 r13
  00d65	41 5c		 pop	 r12
  00d67	5f		 pop	 rdi
  00d68	5e		 pop	 rsi
  00d69	5b		 pop	 rbx
  00d6a	5d		 pop	 rbp
  00d6b	c3		 ret	 0
$LN4@PxSocket_I@4:

; 6871 : 
; 6872 :         case ERROR_IO_PENDING:
; 6873 :             assert(0);
; 6874 :             Py_FatalError("ERROR_IO_PENDING");

  00d6c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@FBEBJMAM@ERROR_IO_PENDING?$AA@

; 6875 :             break;

  00d73	eb 78		 jmp	 SHORT $LN347@PxSocket_I@4
$LN239@PxSocket_I@4:

; 6785 :             PxContext_RollbackHeap(c, &rbuf->snapshot);
; 6786 :             PxSocket_FATAL();
; 6787 :         }
; 6788 :     } else {
; 6789 :         /* xxx todo */
; 6790 :         assert(0);
; 6791 :     }
; 6792 : 
; 6793 :     assert(0);
; 6794 : 
; 6795 : recv_failed:
; 6796 :     assert(wsa_error);
; 6797 :     func = s->recv_failed;
; 6798 :     if (func) {
; 6799 :         /* xxx todo */
; 6800 :         assert(0 == "xxx todo: recv_failed");
; 6801 :     }
; 6802 :     assert(s->io_op == PxSocket_IO_RECV);
; 6803 :     syscall = "WSARecv";
; 6804 :     goto handle_error;
; 6805 : 
; 6806 : handle_error:
; 6807 :     /* inline PxSocket_HandleError() */
; 6808 :     assert(syscall);
; 6809 :     assert(wsa_error);
; 6810 :     assert(!PyErr_Occurred());
; 6811 :     callback = NULL;
; 6812 : 
; 6813 :     switch (wsa_error) {

  00d75	41 8d 86 e2 d8
	ff ff		 lea	 eax, DWORD PTR [r14-10014]
  00d7c	83 f8 57	 cmp	 eax, 87			; 00000057H
  00d7f	77 bb		 ja	 SHORT $LN2@PxSocket_I@4
  00d81	0f b6 84 02 00
	00 00 00	 movzx	 eax, BYTE PTR $LN326@PxSocket_I@4[rdx+rax]
  00d89	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR $LN327@PxSocket_I@4[rdx+rax*4]
  00d90	48 03 ca	 add	 rcx, rdx
  00d93	ff e1		 jmp	 rcx
$LN12@PxSocket_I@4:

; 6825 : 
; 6826 :         case WSAETIMEDOUT:
; 6827 :             Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_CLOSE_SCHEDULED;
; 6828 :             Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_TIMEDOUT;

  00d95	81 8e f4 01 00
	00 00 00 40 01	 or	 DWORD PTR [rsi+500], 20971520 ; 01400000H

; 6829 :             break;

  00d9f	eb 51		 jmp	 SHORT $close_$129937
$LN11@PxSocket_I@4:

; 6830 : 
; 6831 :         case WSAESHUTDOWN:
; 6832 :             if (s->io_op == PxSocket_IO_SEND) {

  00da1	8b 86 50 03 00
	00		 mov	 eax, DWORD PTR [rsi+848]
  00da7	83 f8 08	 cmp	 eax, 8
  00daa	75 0c		 jne	 SHORT $LN10@PxSocket_I@4

; 6833 :                 Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_SEND_SHUTDOWN;

  00dac	81 8e f4 01 00
	00 00 00 02 00	 or	 DWORD PTR [rsi+500], 131072 ; 00020000H

; 6834 :                 callback = "send_shutdown";

  00db6	eb 0f		 jmp	 SHORT $LN8@PxSocket_I@4
$LN10@PxSocket_I@4:

; 6835 :             } else if (s->io_op == PxSocket_IO_RECV) {

  00db8	83 f8 04	 cmp	 eax, 4
  00dbb	75 0a		 jne	 SHORT $LN8@PxSocket_I@4

; 6836 :                 Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_RECV_SHUTDOWN;

  00dbd	81 8e f4 01 00
	00 00 00 04 00	 or	 DWORD PTR [rsi+500], 262144 ; 00040000H
$LN8@PxSocket_I@4:

; 6837 :                 callback = "recv_shutdown";
; 6838 :             }
; 6839 : 
; 6840 :             if ((Px_SOCKFLAGS(s) & Px_SOCKFLAGS_SEND_SHUTDOWN) &&
; 6841 :                 (Px_SOCKFLAGS(s) & Px_SOCKFLAGS_RECV_SHUTDOWN)) {

  00dc7	8b 86 f4 01 00
	00		 mov	 eax, DWORD PTR [rsi+500]
  00dcd	0f ba e0 11	 bt	 eax, 17
  00dd1	73 1f		 jae	 SHORT $close_$129937
  00dd3	0f ba e0 12	 bt	 eax, 18
  00dd7	73 19		 jae	 SHORT $close_$129937

; 6842 :                 Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_BOTH_SHUTDOWN;
; 6843 :                 Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_CLOSE_SCHEDULED;

  00dd9	0d 00 00 48 00	 or	 eax, 4718592		; 00480000H
  00dde	89 86 f4 01 00
	00		 mov	 DWORD PTR [rsi+500], eax

; 6844 :             }
; 6845 :             break;

  00de4	eb 0c		 jmp	 SHORT $close_$129937
$LN3@PxSocket_I@4:

; 6876 : 
; 6877 :         case WSAEWOULDBLOCK:
; 6878 :             assert(0);
; 6879 :             Py_FatalError("WSAEWOULDBLOCK!");

  00de6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@KFHPAKD@WSAEWOULDBLOCK?$CB?$AA@
$LN347@PxSocket_I@4:
  00ded	e8 00 00 00 00	 call	 Py_FatalError
$close_$129937:

; 6303 : 
; 6304 : send_failed:
; 6305 :     assert(wsa_error);
; 6306 :     func = s->send_failed;
; 6307 :     if (func) {
; 6308 :         /* xxx todo */
; 6309 :         assert(0);
; 6310 :     }
; 6311 : 
; 6312 :     /* PyGotham 2014 */
; 6313 :     /*assert(s->io_op == PxSocket_IO_SEND);*/
; 6314 :     syscall = "WSASend";
; 6315 : 
; 6316 :     goto handle_error;
; 6317 : 
; 6318 : close_:
; 6319 :     assert(
; 6320 :         (Px_SOCKFLAGS(s) & Px_SOCKFLAGS_CLOSE_SCHEDULED) ||
; 6321 :         (!PxSocket_CAN_RECV(s))
; 6322 :     );
; 6323 : 
; 6324 : maybe_close:
; 6325 :     assert(!(Px_SOCKFLAGS(s) & Px_SOCKFLAGS_CLOSED));
; 6326 : 
; 6327 :     if ((Px_SOCKFLAGS(s) & Px_SOCKFLAGS_CLOSE_SCHEDULED) ||
; 6328 :         (!PxSocket_CAN_RECV(s)))

  00df2	8b 86 f4 01 00
	00		 mov	 eax, DWORD PTR [rsi+500]
$maybe_close$130160:
  00df8	0f ba e0 16	 bt	 eax, 22
  00dfc	0f 82 b8 01 00
	00		 jb	 $definitely_close$129966
  00e02	0f ba e0 10	 bt	 eax, 16
  00e06	0f 83 ae 01 00
	00		 jae	 $definitely_close$129966
  00e0c	33 d2		 xor	 edx, edx
  00e0e	e9 b9 f6 ff ff	 jmp	 $dispatch$129916
$LN303@PxSocket_I@4:

; 5954 :             PxSocket_WSAERROR("shutdown(SD_RECEIVE)");

  00e13	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  00e19	8b c8		 mov	 ecx, eax
  00e1b	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00e20	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@KEAFFCFE@shutdown?$CISD_RECEIVE?$CJ?$AA@
  00e27	41 b8 01 00 00
	00		 mov	 r8d, 1
  00e2d	49 8b cf	 mov	 rcx, r15
  00e30	e8 00 00 00 00	 call	 PxSocket_HandleException
  00e35	e9 1a ff ff ff	 jmp	 $end$129949
$LN304@PxSocket_I@4:

; 5963 :             PxSocket_WSAERROR("shutdown(SD_SEND)");

  00e3a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  00e40	8b c8		 mov	 ecx, eax
  00e42	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00e47	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@NEGKDJJD@shutdown?$CISD_SEND?$CJ?$AA@
  00e4e	41 b8 01 00 00
	00		 mov	 r8d, 1
  00e54	49 8b cf	 mov	 rcx, r15
  00e57	e8 00 00 00 00	 call	 PxSocket_HandleException
  00e5c	e9 f3 fe ff ff	 jmp	 $end$129949
$LN312@PxSocket_I@4:

; 6001 :             PxContext_RollbackHeap(c, &snapshot);

  00e61	48 8d 55 e0	 lea	 rdx, QWORD PTR snapshot$[rbp-104]
  00e65	49 8b cf	 mov	 rcx, r15
  00e68	e8 00 00 00 00	 call	 PxContext_RollbackHeap

; 6002 :             if (!PyErr_Occurred())

  00e6d	e8 00 00 00 00	 call	 PyErr_Occurred
  00e72	48 85 c0	 test	 rax, rax
  00e75	75 29		 jne	 SHORT $LL194@PxSocket_I@4

; 6003 :                 PyErr_SetString(PyExc_ValueError,
; 6004 :                                 "failed to extract sendable object from "
; 6005 :                                 "initial_bytes_to_send");

  00e77	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00e7e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DN@CMLMIFME@failed?5to?5extract?5sendable?5objec@
  00e85	e8 00 00 00 00	 call	 PyErr_SetString

; 6006 :             PxSocket_EXCEPTION();

  00e8a	eb 14		 jmp	 SHORT $LL194@PxSocket_I@4
$LN311@PxSocket_I@4:

; 5991 :             PxContext_RollbackHeap(c, &snapshot);

  00e8c	48 8d 55 e0	 lea	 rdx, QWORD PTR snapshot$[rbp-104]
$LN349@PxSocket_I@4:
  00e90	e8 00 00 00 00	 call	 PxContext_RollbackHeap
  00e95	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL194@PxSocket_I@4:

; 5992 :             PxSocket_EXCEPTION();

  00ea0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00ea7	45 33 c0	 xor	 r8d, r8d
  00eaa	49 8b cf	 mov	 rcx, r15
  00ead	e8 00 00 00 00	 call	 PxSocket_HandleException
  00eb2	e9 9d fe ff ff	 jmp	 $end$129949
$LN313@PxSocket_I@4:

; 6075 :         PxContext_RollbackHeap(c, &snapshot);

  00eb7	48 8d 55 e0	 lea	 rdx, QWORD PTR snapshot$[rbp-104]
  00ebb	49 8b cf	 mov	 rcx, r15
  00ebe	e8 00 00 00 00	 call	 PxContext_RollbackHeap

; 6076 :         if (!PyErr_Occurred())

  00ec3	e8 00 00 00 00	 call	 PyErr_Occurred
  00ec8	48 85 c0	 test	 rax, rax
  00ecb	75 d3		 jne	 SHORT $LL194@PxSocket_I@4

; 6077 :             PyErr_SetString(PyExc_ValueError,
; 6078 :                             "connection_made() did not return a sendable "
; 6079 :                             "object (bytes, bytearray or unicode)");

  00ecd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00ed4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0FB@KBEECAJI@connection_made?$CI?$CJ?5did?5not?5return@
  00edb	e8 00 00 00 00	 call	 PyErr_SetString

; 6080 :         PxSocket_EXCEPTION();

  00ee0	eb be		 jmp	 SHORT $LL194@PxSocket_I@4
$LN308@PxSocket_I@4:

; 6045 :         PxContext_RollbackHeap(c, &snapshot);

  00ee2	49 8b cf	 mov	 rcx, r15

; 6046 :         PxSocket_EXCEPTION();

  00ee5	eb a5		 jmp	 SHORT $LN311@PxSocket_I@4
$LN307@PxSocket_I@4:

; 6035 :         PxContext_RollbackHeap(c, &snapshot);

  00ee7	48 8d 55 e0	 lea	 rdx, QWORD PTR snapshot$[rbp-104]
  00eeb	49 8b cf	 mov	 rcx, r15
  00eee	e8 00 00 00 00	 call	 PxContext_RollbackHeap
  00ef3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@

; 6036 :         PxSocket_FATAL();

  00efa	41 b8 01 00 00
	00		 mov	 r8d, 1
  00f00	49 8b cf	 mov	 rcx, r15
  00f03	e8 00 00 00 00	 call	 PxSocket_HandleException
  00f08	e9 47 fe ff ff	 jmp	 $end$129949
$LN280@PxSocket_I@4:

; 6268 :         PxContext_RollbackHeap(c, &snapshot);

  00f0d	48 8d 55 e0	 lea	 rdx, QWORD PTR snapshot$[rbp-104]
  00f11	49 8b cf	 mov	 rcx, r15
  00f14	e8 00 00 00 00	 call	 PxContext_RollbackHeap

; 6269 :         if (!PyErr_Occurred())

  00f19	e8 00 00 00 00	 call	 PyErr_Occurred
  00f1e	48 85 c0	 test	 rax, rax
  00f21	0f 85 79 ff ff
	ff		 jne	 $LL194@PxSocket_I@4

; 6270 :             PyErr_SetString(PyExc_ValueError,
; 6271 :                             "send_complete() did not return a sendable "
; 6272 :                             "object (bytes, bytearray or unicode)");

  00f27	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00f2e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EP@KOIIEICF@send_complete?$CI?$CJ?5did?5not?5return?5a@
  00f35	e8 00 00 00 00	 call	 PyErr_SetString

; 6273 :         PxSocket_EXCEPTION();

  00f3a	e9 61 ff ff ff	 jmp	 $LL194@PxSocket_I@4
$LN297@PxSocket_I@4:

; 6498 :             closesocket(s->sock_fd);

  00f3f	48 8b 4e 60	 mov	 rcx, QWORD PTR [rsi+96]
  00f43	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_closesocket

; 6499 :             PxContext_RollbackHeap(c, &rbuf->snapshot);

  00f49	49 8d 55 10	 lea	 rdx, QWORD PTR [r13+16]
  00f4d	49 8b cf	 mov	 rcx, r15
  00f50	e8 00 00 00 00	 call	 PxContext_RollbackHeap
$LN271@PxSocket_I@4:

; 6500 :             PxSocket_SYSERROR("CreateThreadpoolIo");

  00f55	33 c9		 xor	 ecx, ecx
  00f57	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00f5c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIALAGNA@CreateThreadpoolIo?$AA@
  00f63	41 b8 01 00 00
	00		 mov	 r8d, 1
  00f69	49 8b cf	 mov	 rcx, r15
  00f6c	e8 00 00 00 00	 call	 PxSocket_HandleException
  00f71	e9 de fd ff ff	 jmp	 $end$129949
$LN293@PxSocket_I@4:

; 6186 :         /* Send completed synchronously.  Completion packet will be queued. */
; 6187 :         PxContext_RollbackHeap(c, &sbuf->snapshot);

  00f76	48 8d 57 10	 lea	 rdx, QWORD PTR [rdi+16]
  00f7a	49 8b cf	 mov	 rcx, r15
  00f7d	e8 00 00 00 00	 call	 PxContext_RollbackHeap

; 6188 :         goto end;

  00f82	e9 cd fd ff ff	 jmp	 $end$129949
$LN288@PxSocket_I@4:

; 6671 :             PyErr_SetString(PyExc_ValueError,
; 6672 :                             "data_received() did not return a sendable "
; 6673 :                             "object (bytes, bytearray or unicode)");

  00f87	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00f8e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EP@FCIAAFM@data_received?$CI?$CJ?5did?5not?5return?5a@
  00f95	e8 00 00 00 00	 call	 PyErr_SetString

; 6674 :             PxSocket_EXCEPTION();

  00f9a	e9 01 ff ff ff	 jmp	 $LL194@PxSocket_I@4
$LN286@PxSocket_I@4:

; 6625 :         PxContext_RollbackHeap(c, &rbuf->snapshot);

  00f9f	48 8d 53 10	 lea	 rdx, QWORD PTR [rbx+16]
  00fa3	49 8b cf	 mov	 rcx, r15

; 6626 :         PxSocket_EXCEPTION();

  00fa6	e9 e5 fe ff ff	 jmp	 $LN349@PxSocket_I@4
$LN281@PxSocket_I@4:

; 6785 :             PxContext_RollbackHeap(c, &rbuf->snapshot);
; 6786 :             PxSocket_FATAL();
; 6787 :         }
; 6788 :     } else {
; 6789 :         /* xxx todo */
; 6790 :         assert(0);
; 6791 :     }
; 6792 : 
; 6793 :     assert(0);
; 6794 : 
; 6795 : recv_failed:
; 6796 :     assert(wsa_error);
; 6797 :     func = s->recv_failed;
; 6798 :     if (func) {
; 6799 :         /* xxx todo */
; 6800 :         assert(0 == "xxx todo: recv_failed");
; 6801 :     }
; 6802 :     assert(s->io_op == PxSocket_IO_RECV);
; 6803 :     syscall = "WSARecv";
; 6804 :     goto handle_error;
; 6805 : 
; 6806 : handle_error:
; 6807 :     /* inline PxSocket_HandleError() */
; 6808 :     assert(syscall);
; 6809 :     assert(wsa_error);
; 6810 :     assert(!PyErr_Occurred());
; 6811 :     callback = NULL;
; 6812 : 
; 6813 :     switch (wsa_error) {

  00fab	41 83 fe 57	 cmp	 r14d, 87		; 00000057H
  00faf	0f 85 87 fd ff
	ff		 jne	 $LN2@PxSocket_I@4
  00fb5	e9 92 fd ff ff	 jmp	 $LN6@PxSocket_I@4
$definitely_close$129966:

; 6329 :     {
; 6330 :         int success;
; 6331 :         char error = 0;
; 6332 : 
; 6333 : definitely_close:
; 6334 :         assert(!(Px_SOCKFLAGS(s) & Px_SOCKFLAGS_CLOSED));
; 6335 : 
; 6336 :         s->io_op = PxSocket_IO_CLOSE;
; 6337 : 
; 6338 :         success = DisconnectEx(s->sock_fd, NULL, 0 /*TF_REUSE_SOCKET*/, 0);

  00fba	48 8b 4e 60	 mov	 rcx, QWORD PTR [rsi+96]
  00fbe	45 33 c9	 xor	 r9d, r9d
  00fc1	45 33 c0	 xor	 r8d, r8d
  00fc4	33 d2		 xor	 edx, edx
  00fc6	c7 86 50 03 00
	00 20 00 00 00	 mov	 DWORD PTR [rsi+848], 32	; 00000020H
  00fd0	ff 15 68 00 00
	00		 call	 QWORD PTR PySocketModule+104

; 6339 :         if (!success) {

  00fd6	85 c0		 test	 eax, eax
  00fd8	75 24		 jne	 SHORT $LN100@PxSocket_I@4

; 6340 :             int last_error = WSAGetLastError();

  00fda	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError

; 6341 :             if (last_error == WSAEWOULDBLOCK)

  00fe0	3d 33 27 00 00	 cmp	 eax, 10035		; 00002733H
  00fe5	75 0e		 jne	 SHORT $LN99@PxSocket_I@4

; 6342 :                 Py_FatalError("DisconnectEx() -> WSAEWOULDBLOCK!");

  00fe7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@ODEEEBEO@DisconnectEx?$CI?$CJ?5?9?$DO?5WSAEWOULDBLOCK@
  00fee	e8 00 00 00 00	 call	 Py_FatalError

; 6343 :             else {

  00ff3	eb 10		 jmp	 SHORT $connection_closed$130177
$LN99@PxSocket_I@4:

; 6344 :                 assert(last_error != NO_ERROR);
; 6345 :                 PyErr_SetFromWindowsErr(last_error);

  00ff5	8b c8		 mov	 ecx, eax
  00ff7	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 6346 :             }
; 6347 :         } else

  00ffc	eb 07		 jmp	 SHORT $connection_closed$130177
$LN100@PxSocket_I@4:

; 6348 :             Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_CLEAN_DISCONNECT;

  00ffe	83 8e f4 01 00
	00 20		 or	 DWORD PTR [rsi+500], 32	; 00000020H
$connection_closed$130177:

; 6349 : 
; 6350 :         goto connection_closed;
; 6351 : 
; 6352 :     }
; 6353 : 
; 6354 :     assert(next_opcode);
; 6355 :     goto dispatch;
; 6356 : 
; 6357 : connection_closed:
; 6358 :     Px_SOCKFLAGS(s) &= ~Px_SOCKFLAGS_CLOSE_SCHEDULED;
; 6359 :     Px_SOCKFLAGS(s) &= ~Px_SOCKFLAGS_CONNECTED;

  01005	81 a6 f4 01 00
	00 ef ff bf ff	 and	 DWORD PTR [rsi+500], -4194321 ; ffffffffffbfffefH

; 6360 :     Px_SOCKFLAGS(s) |=  Px_SOCKFLAGS_CLOSED;

  0100f	81 8e f4 01 00
	00 00 00 80 00	 or	 DWORD PTR [rsi+500], 8388608 ; 00800000H

; 6361 : 
; 6362 :     if (PyErr_Occurred())

  01019	e8 00 00 00 00	 call	 PyErr_Occurred
  0101e	48 85 c0	 test	 rax, rax
  01021	0f 85 2d fd ff
	ff		 jne	 $end$129949
$handle_exception$130183:
$connection_made_callback$129926:
$data_received_callback$129928:
$send_complete_callback$129930:
$post_callback_that_supports_sending_retval$129933:
$post_callback_that_does_not_support_sending_retval$129935:
$try_send$129939:

; 6363 :         goto handle_exception;
; 6364 : 
; 6365 :     func = s->connection_closed;
; 6366 :     if (func) {
; 6367 :         /* xxx todo */
; 6368 :         assert(0);
; 6369 :     }
; 6370 : 
; 6371 :     if (PxSocket_IS_SERVERCLIENT(s))

  01027	f6 86 f4 01 00
	00 80		 test	 BYTE PTR [rsi+500], 128	; 00000080H
  0102e	0f 84 20 fd ff
	ff		 je	 $end$129949

; 6372 :         PxServerSocket_ClientClosed(s);

  01034	48 8b ce	 mov	 rcx, rsi
  01037	e8 00 00 00 00	 call	 PxServerSocket_ClientClosed
  0103c	e9 13 fd ff ff	 jmp	 $end$129949
  01041	0f 1f 00	 npad	 3
$LN325@PxSocket_I@4:

; 6913 : 
; 6914 :     return;
; 6915 : 
; 6916 : }

  01044	00 00 00 00	 DD	 $start$129907
  01048	00 00 00 00	 DD	 $handle_error$129924
  0104c	00 00 00 00	 DD	 $end$129949
  01050	00 00 00 00	 DD	 $end$129949
  01054	00 00 00 00	 DD	 $end$129949
  01058	00 00 00 00	 DD	 $end$129949
  0105c	00 00 00 00	 DD	 $end$129949
  01060	00 00 00 00	 DD	 $close_$129937
  01064	00 00 00 00	 DD	 $end$129949
  01068	00 00 00 00	 DD	 $start$129907
  0106c	00 00 00 00	 DD	 $start$129907
  01070	00 00 00 00	 DD	 $overlapped_recv_callback$129913
$LN327@PxSocket_I@4:
  01074	00 00 00 00	 DD	 $LN6@PxSocket_I@4
  01078	00 00 00 00	 DD	 $LN3@PxSocket_I@4
  0107c	00 00 00 00	 DD	 $LN13@PxSocket_I@4
  01080	00 00 00 00	 DD	 $LN11@PxSocket_I@4
  01084	00 00 00 00	 DD	 $LN12@PxSocket_I@4
  01088	00 00 00 00	 DD	 $LN2@PxSocket_I@4
$LN326@PxSocket_I@4:
  0108c	00		 DB	 0
  0108d	05		 DB	 5
  0108e	05		 DB	 5
  0108f	05		 DB	 5
  01090	05		 DB	 5
  01091	05		 DB	 5
  01092	05		 DB	 5
  01093	05		 DB	 5
  01094	00		 DB	 0
  01095	05		 DB	 5
  01096	05		 DB	 5
  01097	05		 DB	 5
  01098	05		 DB	 5
  01099	05		 DB	 5
  0109a	05		 DB	 5
  0109b	05		 DB	 5
  0109c	05		 DB	 5
  0109d	05		 DB	 5
  0109e	05		 DB	 5
  0109f	05		 DB	 5
  010a0	05		 DB	 5
  010a1	01		 DB	 1
  010a2	00		 DB	 0
  010a3	05		 DB	 5
  010a4	00		 DB	 0
  010a5	05		 DB	 5
  010a6	00		 DB	 0
  010a7	05		 DB	 5
  010a8	05		 DB	 5
  010a9	05		 DB	 5
  010aa	00		 DB	 0
  010ab	00		 DB	 0
  010ac	05		 DB	 5
  010ad	05		 DB	 5
  010ae	00		 DB	 0
  010af	00		 DB	 0
  010b0	02		 DB	 2
  010b1	05		 DB	 5
  010b2	02		 DB	 2
  010b3	02		 DB	 2
  010b4	02		 DB	 2
  010b5	05		 DB	 5
  010b6	05		 DB	 5
  010b7	02		 DB	 2
  010b8	03		 DB	 3
  010b9	05		 DB	 5
  010ba	04		 DB	 4
  010bb	05		 DB	 5
  010bc	05		 DB	 5
  010bd	05		 DB	 5
  010be	05		 DB	 5
  010bf	05		 DB	 5
  010c0	05		 DB	 5
  010c1	05		 DB	 5
  010c2	05		 DB	 5
  010c3	05		 DB	 5
  010c4	05		 DB	 5
  010c5	05		 DB	 5
  010c6	05		 DB	 5
  010c7	05		 DB	 5
  010c8	05		 DB	 5
  010c9	05		 DB	 5
  010ca	05		 DB	 5
  010cb	05		 DB	 5
  010cc	05		 DB	 5
  010cd	05		 DB	 5
  010ce	05		 DB	 5
  010cf	05		 DB	 5
  010d0	05		 DB	 5
  010d1	05		 DB	 5
  010d2	05		 DB	 5
  010d3	05		 DB	 5
  010d4	05		 DB	 5
  010d5	05		 DB	 5
  010d6	05		 DB	 5
  010d7	05		 DB	 5
  010d8	05		 DB	 5
  010d9	05		 DB	 5
  010da	05		 DB	 5
  010db	00		 DB	 0
  010dc	05		 DB	 5
  010dd	05		 DB	 5
  010de	05		 DB	 5
  010df	05		 DB	 5
  010e0	05		 DB	 5
  010e1	05		 DB	 5
  010e2	05		 DB	 5
  010e3	02		 DB	 2
PxSocket_IOLoop ENDP
_TEXT	ENDS
PUBLIC	PxSocket_HandleError
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel_private.h
pdata	SEGMENT
$pdata$PxSocket_HandleError DD imagerel $LN55
	DD	imagerel $LN55+365
	DD	imagerel $unwind$PxSocket_HandleError
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PxSocket_HandleError DD imagerel $LN55+365
	DD	imagerel $LN55+383
	DD	imagerel $chain$0$PxSocket_HandleError
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PxSocket_HandleError DD imagerel $LN55+383
	DD	imagerel $LN55+463
	DD	imagerel $chain$1$PxSocket_HandleError
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PxSocket_HandleError DD imagerel $LN55+463
	DD	imagerel $LN55+512
	DD	imagerel $chain$2$PxSocket_HandleError
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PxSocket_HandleError DD imagerel $LN55+512
	DD	imagerel $LN55+525
	DD	imagerel $chain$3$PxSocket_HandleError
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PxSocket_HandleError DD imagerel $LN55+525
	DD	imagerel $LN55+572
	DD	imagerel $chain$4$PxSocket_HandleError
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$PxSocket_HandleError DD imagerel $LN55+572
	DD	imagerel $LN55+684
	DD	imagerel $chain$5$PxSocket_HandleError
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$PxSocket_HandleError DD 021H
	DD	imagerel $LN55
	DD	imagerel $LN55+365
	DD	imagerel $unwind$PxSocket_HandleError
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PxSocket_HandleError DD 020021H
	DD	09d400H
	DD	imagerel $LN55
	DD	imagerel $LN55+365
	DD	imagerel $unwind$PxSocket_HandleError
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PxSocket_HandleError DD 021H
	DD	imagerel $LN55
	DD	imagerel $LN55+365
	DD	imagerel $unwind$PxSocket_HandleError
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PxSocket_HandleError DD 021H
	DD	imagerel $LN55+365
	DD	imagerel $LN55+383
	DD	imagerel $chain$0$PxSocket_HandleError
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PxSocket_HandleError DD 020521H
	DD	08c405H
	DD	imagerel $LN55+365
	DD	imagerel $LN55+383
	DD	imagerel $chain$0$PxSocket_HandleError
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PxSocket_HandleError DD 020521H
	DD	09d405H
	DD	imagerel $LN55
	DD	imagerel $LN55+365
	DD	imagerel $unwind$PxSocket_HandleError
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocket_HandleError DD 060c01H
	DD	0a340cH
	DD	07008320cH
	DD	050066007H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
xdata	ENDS
;	COMDAT PxSocket_HandleError
_TEXT	SEGMENT
c$ = 64
op$ = 72
syscall$ = 80
errcode$ = 88
PxSocket_HandleError PROC				; COMDAT

; 7081 : {

$LN55:
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 7082 :     PxState *px = c->px;
; 7083 :     PxSocket *s = (PxSocket *)c->io_obj;

  0000c	48 8b b9 a8 32
	00 00		 mov	 rdi, QWORD PTR [rcx+12968]

; 7084 :     PyThreadState *pstate = c->pstate;
; 7085 :     PyObject *func, *args, *result;
; 7086 :     char *name = NULL;

  00013	33 ed		 xor	 ebp, ebp
  00015	41 8b d9	 mov	 ebx, r9d
  00018	48 8b f1	 mov	 rsi, rcx

; 7087 : 
; 7088 :     assert(!PyErr_Occurred());
; 7089 : 
; 7090 :     switch (errcode) {

  0001b	41 81 f9 14 27
	00 00		 cmp	 r9d, 10004		; 00002714H
  00022	0f 8f 9d 00 00
	00		 jg	 $LN42@PxSocket_H@2
  00028	81 fb 14 27 00
	00		 cmp	 ebx, 10004		; 00002714H
  0002e	74 2d		 je	 SHORT $LN30@PxSocket_H@2
  00030	81 fb ea 00 00
	00		 cmp	 ebx, 234		; 000000eaH
  00036	7f 56		 jg	 SHORT $LN43@PxSocket_H@2
  00038	74 48		 je	 SHORT $LN26@PxSocket_H@2
  0003a	83 fb 06	 cmp	 ebx, 6
  0003d	74 1e		 je	 SHORT $LN30@PxSocket_H@2
  0003f	83 fb 08	 cmp	 ebx, 8
  00042	74 19		 je	 SHORT $LN30@PxSocket_H@2
  00044	83 fb 40	 cmp	 ebx, 64			; 00000040H
  00047	74 61		 je	 SHORT $LN37@PxSocket_H@2
  00049	83 fb 57	 cmp	 ebx, 87			; 00000057H
  0004c	74 0f		 je	 SHORT $LN30@PxSocket_H@2
$LN23@PxSocket_H@2:

; 7158 :             break;
; 7159 : 
; 7160 :         default:
; 7161 :             printf("unknown error code: %d\n", errcode);

  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@MJHHLNDN@unknown?5error?5code?3?5?$CFd?6?$AA@
  00055	8b d3		 mov	 edx, ebx
  00057	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf
$LN30@PxSocket_H@2:

; 7162 :             assert(0);
; 7163 :             PyErr_SetFromWindowsErr(errcode);

  0005d	8b cb		 mov	 ecx, ebx
  0005f	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 7164 :             PxSocket_EXCEPTION();

  00064	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0006b	45 33 c0	 xor	 r8d, r8d
  0006e	48 8b ce	 mov	 rcx, rsi

; 7191 : 
; 7192 : end:
; 7193 :     return;
; 7194 : }

  00071	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00076	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007a	5f		 pop	 rdi
  0007b	5e		 pop	 rsi
  0007c	5d		 pop	 rbp
  0007d	e9 00 00 00 00	 jmp	 PxSocket_HandleException
$LN26@PxSocket_H@2:

; 7123 : 
; 7124 :         /* (we shouldn't see any of these in normal operating conditions) */
; 7125 :         case WSAEINTR:
; 7126 :         case WSAEINVAL:
; 7127 :         case WSAEFAULT:
; 7128 :         case WSAEMSGSIZE:
; 7129 :         case WSAEOPNOTSUPP:
; 7130 :         case WSAEINPROGRESS:
; 7131 :         case WSA_OPERATION_ABORTED:
; 7132 :         case WSAENOTSOCK:
; 7133 :         case WSANOTINITIALISED:
; 7134 :         case WSAESOCKTNOSUPPORT:
; 7135 :         case WSA_NOT_ENOUGH_MEMORY:
; 7136 :         case WSA_INVALID_HANDLE:
; 7137 :         case WSA_INVALID_PARAMETER:
; 7138 :         case WSAEADDRNOTAVAIL:
; 7139 :         case WSAEADDRINUSE:
; 7140 :             PyErr_SetFromWindowsErr(errcode);
; 7141 :             PxSocket_EXCEPTION();
; 7142 :             break;
; 7143 : 
; 7144 :         /* errors that indicate our socket logic is broken */
; 7145 :         case ERROR_MORE_DATA:
; 7146 :             assert(0);
; 7147 :             Py_FatalError("ERROR_MORE_DATA");

  00082	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@JMGJABEC@ERROR_MORE_DATA?$AA@

; 7148 :             break;

  00089	e9 ca 00 00 00	 jmp	 $LN53@PxSocket_H@2
$LN43@PxSocket_H@2:

; 7087 : 
; 7088 :     assert(!PyErr_Occurred());
; 7089 : 
; 7090 :     switch (errcode) {

  0008e	8b cb		 mov	 ecx, ebx
  00090	81 e9 e3 03 00
	00		 sub	 ecx, 995		; 000003e3H
  00096	74 c5		 je	 SHORT $LN30@PxSocket_H@2
  00098	83 e9 02	 sub	 ecx, 2
  0009b	74 1c		 je	 SHORT $LN25@PxSocket_H@2
  0009d	81 e9 ed 00 00
	00		 sub	 ecx, 237		; 000000edH
  000a3	74 05		 je	 SHORT $LN37@PxSocket_H@2
  000a5	83 f9 02	 cmp	 ecx, 2
  000a8	75 a4		 jne	 SHORT $LN23@PxSocket_H@2
$LN37@PxSocket_H@2:

; 7091 :         case ERROR_PORT_UNREACHABLE:
; 7092 :         case ERROR_CONNECTION_ABORTED:
; 7093 :         case ERROR_NETNAME_DELETED:
; 7094 :         case WSAECONNRESET:
; 7095 :         case WSAENETDOWN:
; 7096 :         case WSAENETRESET:
; 7097 :         case WSAECONNABORTED:
; 7098 :         case WSAENOTCONN:
; 7099 :         case WSAEDISCON:
; 7100 :             Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_CLOSE_SCHEDULED;

  000aa	81 8f f4 01 00
	00 00 00 40 00	 or	 DWORD PTR [rdi+500], 4194304 ; 00400000H

; 7101 :             break;

  000b4	e9 a4 00 00 00	 jmp	 $LN19@PxSocket_H@2
$LN25@PxSocket_H@2:

; 7149 : 
; 7150 :         case ERROR_IO_PENDING:
; 7151 :             assert(0);
; 7152 :             Py_FatalError("ERROR_IO_PENDING");

  000b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@FBEBJMAM@ERROR_IO_PENDING?$AA@

; 7153 :             break;

  000c0	e9 93 00 00 00	 jmp	 $LN53@PxSocket_H@2
$LN42@PxSocket_H@2:

; 7087 : 
; 7088 :     assert(!PyErr_Occurred());
; 7089 : 
; 7090 :     switch (errcode) {

  000c5	41 8d 81 e2 d8
	ff ff		 lea	 eax, DWORD PTR [r9-10014]
  000cc	83 f8 57	 cmp	 eax, 87			; 00000057H
  000cf	0f 87 79 ff ff
	ff		 ja	 $LN23@PxSocket_H@2
  000d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:__ImageBase
  000dc	48 98		 cdqe
  000de	0f b6 84 02 00
	00 00 00	 movzx	 eax, BYTE PTR $LN50@PxSocket_H@2[rdx+rax]
  000e6	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR $LN51@PxSocket_H@2[rdx+rax*4]
  000ed	48 03 ca	 add	 rcx, rdx
  000f0	ff e1		 jmp	 rcx
$LN36@PxSocket_H@2:

; 7102 : 
; 7103 :         case WSAETIMEDOUT:
; 7104 :             Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_CLOSE_SCHEDULED;
; 7105 :             Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_TIMEDOUT;

  000f2	81 8f f4 01 00
	00 00 00 40 01	 or	 DWORD PTR [rdi+500], 20971520 ; 01400000H

; 7106 :             break;

  000fc	eb 5f		 jmp	 SHORT $LN19@PxSocket_H@2
$LN35@PxSocket_H@2:

; 7107 : 
; 7108 :         case WSAESHUTDOWN:
; 7109 :             if (s->io_op == PxSocket_IO_SEND) {

  000fe	8b 87 50 03 00
	00		 mov	 eax, DWORD PTR [rdi+848]
  00104	83 f8 08	 cmp	 eax, 8
  00107	75 13		 jne	 SHORT $LN34@PxSocket_H@2

; 7110 :                 Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_SEND_SHUTDOWN;

  00109	81 8f f4 01 00
	00 00 00 02 00	 or	 DWORD PTR [rdi+500], 131072 ; 00020000H

; 7111 :                 name = "send_shutdown";

  00113	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:??_C@_0O@IDBDAEOD@send_shutdown?$AA@
  0011a	eb 16		 jmp	 SHORT $LN32@PxSocket_H@2
$LN34@PxSocket_H@2:

; 7112 :             } else if (s->io_op == PxSocket_IO_RECV) {

  0011c	83 f8 04	 cmp	 eax, 4
  0011f	75 11		 jne	 SHORT $LN32@PxSocket_H@2

; 7113 :                 Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_RECV_SHUTDOWN;

  00121	81 8f f4 01 00
	00 00 00 04 00	 or	 DWORD PTR [rdi+500], 262144 ; 00040000H

; 7114 :                 name = "recv_shutdown";

  0012b	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:??_C@_0O@HGCJJJHB@recv_shutdown?$AA@
$LN32@PxSocket_H@2:

; 7115 :             }
; 7116 : 
; 7117 :             if ((Px_SOCKFLAGS(s) & Px_SOCKFLAGS_SEND_SHUTDOWN) &&
; 7118 :                 (Px_SOCKFLAGS(s) & Px_SOCKFLAGS_RECV_SHUTDOWN)) {

  00132	8b 87 f4 01 00
	00		 mov	 eax, DWORD PTR [rdi+500]
  00138	0f ba e0 11	 bt	 eax, 17
  0013c	73 1f		 jae	 SHORT $LN19@PxSocket_H@2
  0013e	0f ba e0 12	 bt	 eax, 18
  00142	73 19		 jae	 SHORT $LN19@PxSocket_H@2

; 7119 :                 Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_BOTH_SHUTDOWN;
; 7120 :                 Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_CLOSE_SCHEDULED;

  00144	0d 00 00 48 00	 or	 eax, 4718592		; 00480000H
  00149	89 87 f4 01 00
	00		 mov	 DWORD PTR [rdi+500], eax

; 7121 :             }
; 7122 :             break;

  0014f	eb 0c		 jmp	 SHORT $LN19@PxSocket_H@2
$LN24@PxSocket_H@2:

; 7154 : 
; 7155 :         case WSAEWOULDBLOCK:
; 7156 :             assert(0);
; 7157 :             Py_FatalError("WSAEWOULDBLOCK!");

  00151	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@KFHPAKD@WSAEWOULDBLOCK?$CB?$AA@
$LN53@PxSocket_H@2:
  00158	e8 00 00 00 00	 call	 Py_FatalError
$LN19@PxSocket_H@2:

; 7165 :             break;
; 7166 :     }
; 7167 : 
; 7168 :     MAYBE_DO_SEND_FAILED();

  0015d	48 8b cf	 mov	 rcx, rdi
  00160	e8 00 00 00 00	 call	 _MAYBE_DO_SEND_FAILED
  00165	85 c0		 test	 eax, eax
  00167	0f 85 93 00 00
	00		 jne	 $end$130582

; 7169 : 
; 7170 :     if (!name)

  0016d	4c 89 6c 24 48	 mov	 QWORD PTR [rsp+72], r13
  00172	48 85 ed	 test	 rbp, rbp
  00175	0f 84 b5 00 00
	00		 je	 $maybe_close$130600

; 7171 :         goto maybe_close;
; 7172 : 
; 7173 :     assert(name);
; 7174 :     READ_LOCK(s);

  0017b	48 8d 4f 28	 lea	 rcx, QWORD PTR [rdi+40]
  0017f	4c 89 64 24 40	 mov	 QWORD PTR [rsp+64], r12
  00184	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AcquireSRWLockShared

; 7175 :     func = PxSocket_GET_ATTR(name);

  0018a	48 8b 8f 90 02
	00 00		 mov	 rcx, QWORD PTR [rdi+656]
  00191	48 8b d5	 mov	 rdx, rbp
  00194	e8 00 00 00 00	 call	 PyObject_HasAttrString
  00199	4c 8d 2d 00 00
	00 00		 lea	 r13, OFFSET FLAT:_Py_NoneStruct
  001a0	85 c0		 test	 eax, eax
  001a2	74 14		 je	 SHORT $LN44@PxSocket_H@2
  001a4	48 8b 8f 90 02
	00 00		 mov	 rcx, QWORD PTR [rdi+656]
  001ab	48 8b d5	 mov	 rdx, rbp
  001ae	e8 00 00 00 00	 call	 PyObject_GetAttrString
  001b3	48 8b d8	 mov	 rbx, rax
  001b6	eb 03		 jmp	 SHORT $LN45@PxSocket_H@2
$LN44@PxSocket_H@2:
  001b8	49 8b dd	 mov	 rbx, r13
$LN45@PxSocket_H@2:

; 7176 :     READ_UNLOCK(s);

  001bb	48 8d 4f 28	 lea	 rcx, QWORD PTR [rdi+40]
  001bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseSRWLockShared
  001c5	4c 8b 64 24 40	 mov	 r12, QWORD PTR [rsp+64]

; 7177 : 
; 7178 :     if (!func || func == Py_None)

  001ca	48 85 db	 test	 rbx, rbx
  001cd	74 61		 je	 SHORT $maybe_close$130600
  001cf	49 3b dd	 cmp	 rbx, r13
  001d2	74 5c		 je	 SHORT $maybe_close$130600

; 7179 :         goto maybe_close;
; 7180 : 
; 7181 :     args = Py_BuildValue("(O)", s);

  001d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  001db	48 8b d7	 mov	 rdx, rdi
  001de	e8 00 00 00 00	 call	 Py_BuildValue

; 7182 :     if (!args)

  001e3	48 85 c0	 test	 rax, rax
  001e6	75 25		 jne	 SHORT $LN9@PxSocket_H@2

; 7183 :         PxSocket_FATAL();

  001e8	44 8d 40 01	 lea	 r8d, QWORD PTR [rax+1]
$LN54@PxSocket_H@2:
  001ec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  001f3	48 8b ce	 mov	 rcx, rsi
  001f6	e8 00 00 00 00	 call	 PxSocket_HandleException
$LN52@PxSocket_H@2:
  001fb	4c 8b 6c 24 48	 mov	 r13, QWORD PTR [rsp+72]
$end$130582:

; 7191 : 
; 7192 : end:
; 7193 :     return;
; 7194 : }

  00200	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00205	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00209	5f		 pop	 rdi
  0020a	5e		 pop	 rsi
  0020b	5d		 pop	 rbp
  0020c	c3		 ret	 0
$LN9@PxSocket_H@2:

; 7184 : 
; 7185 :     result = PyObject_CallObject(func, args);

  0020d	48 8b d0	 mov	 rdx, rax
  00210	48 8b cb	 mov	 rcx, rbx
  00213	e8 00 00 00 00	 call	 PyObject_CallObject

; 7186 :     if (null_with_exc_or_non_none_return_type(result, c->pstate))

  00218	48 8b 96 e8 00
	00 00		 mov	 rdx, QWORD PTR [rsi+232]
  0021f	48 8b c8	 mov	 rcx, rax
  00222	e8 00 00 00 00	 call	 null_with_exc_or_non_none_return_type
  00227	85 c0		 test	 eax, eax
  00229	74 05		 je	 SHORT $maybe_close$130600

; 7187 :         PxSocket_EXCEPTION();

  0022b	45 33 c0	 xor	 r8d, r8d
  0022e	eb bc		 jmp	 SHORT $LN54@PxSocket_H@2
$maybe_close$130600:

; 7188 : 
; 7189 : maybe_close:
; 7190 :     MAYBE_CLOSE();

  00230	48 8b ce	 mov	 rcx, rsi
  00233	e8 00 00 00 00	 call	 _MAYBE_CLOSE
  00238	eb c1		 jmp	 SHORT $LN52@PxSocket_H@2
  0023a	66 90		 npad	 2
$LN51@PxSocket_H@2:

; 7191 : 
; 7192 : end:
; 7193 :     return;
; 7194 : }

  0023c	00 00 00 00	 DD	 $LN30@PxSocket_H@2
  00240	00 00 00 00	 DD	 $LN24@PxSocket_H@2
  00244	00 00 00 00	 DD	 $LN37@PxSocket_H@2
  00248	00 00 00 00	 DD	 $LN35@PxSocket_H@2
  0024c	00 00 00 00	 DD	 $LN36@PxSocket_H@2
  00250	00 00 00 00	 DD	 $LN23@PxSocket_H@2
$LN50@PxSocket_H@2:
  00254	00		 DB	 0
  00255	05		 DB	 5
  00256	05		 DB	 5
  00257	05		 DB	 5
  00258	05		 DB	 5
  00259	05		 DB	 5
  0025a	05		 DB	 5
  0025b	05		 DB	 5
  0025c	00		 DB	 0
  0025d	05		 DB	 5
  0025e	05		 DB	 5
  0025f	05		 DB	 5
  00260	05		 DB	 5
  00261	05		 DB	 5
  00262	05		 DB	 5
  00263	05		 DB	 5
  00264	05		 DB	 5
  00265	05		 DB	 5
  00266	05		 DB	 5
  00267	05		 DB	 5
  00268	05		 DB	 5
  00269	01		 DB	 1
  0026a	00		 DB	 0
  0026b	05		 DB	 5
  0026c	00		 DB	 0
  0026d	05		 DB	 5
  0026e	00		 DB	 0
  0026f	05		 DB	 5
  00270	05		 DB	 5
  00271	05		 DB	 5
  00272	00		 DB	 0
  00273	00		 DB	 0
  00274	05		 DB	 5
  00275	05		 DB	 5
  00276	00		 DB	 0
  00277	00		 DB	 0
  00278	02		 DB	 2
  00279	05		 DB	 5
  0027a	02		 DB	 2
  0027b	02		 DB	 2
  0027c	02		 DB	 2
  0027d	05		 DB	 5
  0027e	05		 DB	 5
  0027f	02		 DB	 2
  00280	03		 DB	 3
  00281	05		 DB	 5
  00282	04		 DB	 4
  00283	05		 DB	 5
  00284	05		 DB	 5
  00285	05		 DB	 5
  00286	05		 DB	 5
  00287	05		 DB	 5
  00288	05		 DB	 5
  00289	05		 DB	 5
  0028a	05		 DB	 5
  0028b	05		 DB	 5
  0028c	05		 DB	 5
  0028d	05		 DB	 5
  0028e	05		 DB	 5
  0028f	05		 DB	 5
  00290	05		 DB	 5
  00291	05		 DB	 5
  00292	05		 DB	 5
  00293	05		 DB	 5
  00294	05		 DB	 5
  00295	05		 DB	 5
  00296	05		 DB	 5
  00297	05		 DB	 5
  00298	05		 DB	 5
  00299	05		 DB	 5
  0029a	05		 DB	 5
  0029b	05		 DB	 5
  0029c	05		 DB	 5
  0029d	05		 DB	 5
  0029e	05		 DB	 5
  0029f	05		 DB	 5
  002a0	05		 DB	 5
  002a1	05		 DB	 5
  002a2	05		 DB	 5
  002a3	00		 DB	 0
  002a4	05		 DB	 5
  002a5	05		 DB	 5
  002a6	05		 DB	 5
  002a7	05		 DB	 5
  002a8	05		 DB	 5
  002a9	05		 DB	 5
  002aa	05		 DB	 5
  002ab	02		 DB	 2
PxSocket_HandleError ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocketClient_Callback DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$PxSocketClient_Callback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocketClient_Callback DD 0a1801H
	DD	0c6418H
	DD	0b5418H
	DD	0a3418H
	DD	0d0145218H
	DD	07010c012H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PxSocketClient_Callback
_TEXT	SEGMENT
instance$ = 80
context$ = 88
overlapped$ = 96
io_result$ = 104
nbytes$ = 112
tp_io$ = 120
PxSocketClient_Callback PROC				; COMDAT

; 7603 : {

$LN3:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 7604 :     Context *c = (Context *)context;
; 7605 :     PxSocket *s = (PxSocket *)c->io_obj;

  00018	48 8b aa a8 32
	00 00		 mov	 rbp, QWORD PTR [rdx+12968]
  0001f	48 8b d9	 mov	 rbx, rcx
  00022	41 8b f9	 mov	 edi, r9d

; 7606 : 
; 7607 :     EnterCriticalSection(&(s->cs));

  00025	48 8d 8d 38 02
	00 00		 lea	 rcx, QWORD PTR [rbp+568]
  0002c	49 8b f0	 mov	 rsi, r8
  0002f	4c 8b e2	 mov	 r12, rdx
  00032	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EnterCriticalSection

; 7608 : 
; 7609 :     ENTERED_IO_CALLBACK();

  00038	4c 8b 5c 24 78	 mov	 r11, QWORD PTR tp_io$[rsp]
  0003d	48 8b 44 24 70	 mov	 rax, QWORD PTR nbytes$[rsp]
  00042	4c 89 5c 24 28	 mov	 QWORD PTR [rsp+40], r11
  00047	44 8b cf	 mov	 r9d, edi
  0004a	4c 8b c6	 mov	 r8, rsi
  0004d	48 8b d3	 mov	 rdx, rbx
  00050	49 8b cc	 mov	 rcx, r12
  00053	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00058	e8 00 00 00 00	 call	 _PyParallel_EnteredIOCallback

; 7610 : 
; 7611 :     PxSocket_IOLoop(s);

  0005d	48 8b cd	 mov	 rcx, rbp
  00060	e8 00 00 00 00	 call	 PxSocket_IOLoop

; 7612 : 
; 7613 :     LeaveCriticalSection(&(s->cs));

  00065	48 8d 8d 38 02
	00 00		 lea	 rcx, QWORD PTR [rbp+568]

; 7614 : }

  0006c	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00071	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  00076	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  0007b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0007f	41 5d		 pop	 r13
  00081	41 5c		 pop	 r12
  00083	5f		 pop	 rdi
  00084	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_LeaveCriticalSection
PxSocketClient_Callback ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@DLDEIKGM@xxxxxxxxxx?$CB?6?$AA@		; `string'
PUBLIC	??_C@_0CF@MBGNEJ@setsockopt?$CISO_UPDATE_ACCEPT_CONT@ ; `string'
PUBLIC	PxSocketServer_AcceptCallback
EXTRN	__imp_setsockopt:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocketServer_AcceptCallback DD imagerel $LN15
	DD	imagerel $LN15+521
	DD	imagerel $unwind$PxSocketServer_AcceptCallback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocketServer_AcceptCallback DD 0a1b01H
	DD	013541bH
	DD	010341bH
	DD	0e017921bH
	DD	0c013d015H
	DD	060107011H
xdata	ENDS
;	COMDAT ??_C@_0N@DLDEIKGM@xxxxxxxxxx?$CB?6?$AA@
CONST	SEGMENT
??_C@_0N@DLDEIKGM@xxxxxxxxxx?$CB?6?$AA@ DB 'xxxxxxxxxx!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@MBGNEJ@setsockopt?$CISO_UPDATE_ACCEPT_CONT@
CONST	SEGMENT
??_C@_0CF@MBGNEJ@setsockopt?$CISO_UPDATE_ACCEPT_CONT@ DB 'setsockopt(SO_U'
	DB	'PDATE_ACCEPT_CONTEXT)', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PxSocketServer_AcceptCallback
_TEXT	SEGMENT
local$ = 64
remote$ = 72
instance$ = 128
llen$ = 136
context$ = 136
rlen$ = 144
overlapped$ = 144
io_result$ = 152
nbytes$ = 160
tp_io$ = 168
PxSocketServer_AcceptCallback PROC			; COMDAT

; 7626 : {

$LN15:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00007	48 89 68 20	 mov	 QWORD PTR [rax+32], rbp
  0000b	48 89 50 10	 mov	 QWORD PTR [rax+16], rdx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	41 54		 push	 r12
  00013	41 55		 push	 r13
  00015	41 56		 push	 r14
  00017	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 7627 :     int err;
; 7628 :     int op = PxSocket_IO_ACCEPT;
; 7629 :     int bufsize;
; 7630 :     const char *syscall = "AcceptEx";
; 7631 :     void *p;
; 7632 :     LPSOCKADDR local;
; 7633 :     LPSOCKADDR remote;
; 7634 :     RBUF *rbuf;
; 7635 :     int sz = sizeof(SOCKADDR);
; 7636 :     int llen = 0;
; 7637 :     int rlen = 0;
; 7638 : 
; 7639 :     Context *c = (Context *)context;
; 7640 :     PxSocket *s = (PxSocket *)c->io_obj;
; 7641 :     PxSocket *o;
; 7642 :     Context  *x = _Py_CAST_BACK(overlapped, Context *, Context, overlapped);
; 7643 : 
; 7644 :     o = (PxSocket *)x->io_obj;
; 7645 :     assert(o->parent == s);
; 7646 : 
; 7647 :     s = o;

  0001b	49 8b 68 f8	 mov	 rbp, QWORD PTR [r8-8]
  0001f	48 8b d9	 mov	 rbx, rcx
  00022	45 33 e4	 xor	 r12d, r12d

; 7648 :     c = x;
; 7649 : 
; 7650 :     EnterCriticalSection(&(s->cs));

  00025	48 8d 8d 38 02
	00 00		 lea	 rcx, QWORD PTR [rbp+568]
  0002c	41 8b f9	 mov	 edi, r9d
  0002f	49 8b f0	 mov	 rsi, r8
  00032	44 89 60 10	 mov	 DWORD PTR [rax+16], r12d
  00036	44 89 60 18	 mov	 DWORD PTR [rax+24], r12d
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EnterCriticalSection

; 7651 : 
; 7652 :     /* Reset some of the more sensitive struct members (necessary due to the
; 7653 :      * AcceptEx() socket recycling). */
; 7654 :     /*
; 7655 :     s->io_op = PxSocket_IO_ACCEPT;
; 7656 :     s->ctx = c;
; 7657 :     s->send_id = 0;
; 7658 :     s->tls_buf = 0;
; 7659 :     s->ol = 0;
; 7660 :     */
; 7661 : 
; 7662 :     ENTERED_IO_CALLBACK();

  00040	4c 8b 9c 24 a8
	00 00 00	 mov	 r11, QWORD PTR tp_io$[rsp]
  00048	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR nbytes$[rsp]
  00050	48 8d 8e 50 cd
	ff ff		 lea	 rcx, QWORD PTR [rsi-12976]
  00057	4c 89 5c 24 28	 mov	 QWORD PTR [rsp+40], r11
  0005c	44 8b cf	 mov	 r9d, edi
  0005f	4c 8b c6	 mov	 r8, rsi
  00062	48 8b d3	 mov	 rdx, rbx
  00065	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0006a	e8 00 00 00 00	 call	 _PyParallel_EnteredIOCallback

; 7663 : 
; 7664 :     if (!(Px_SOCKFLAGS(s) & Px_SOCKFLAGS_ACCEPT_CALLBACK_SEEN)) {

  0006f	8b 85 f4 01 00
	00		 mov	 eax, DWORD PTR [rbp+500]
  00075	0f ba e0 1b	 bt	 eax, 27
  00079	0f 82 21 01 00
	00		 jb	 $LN12@PxSocketSe@3

; 7665 :         Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_ACCEPT_CALLBACK_SEEN;

  0007f	0f ba e8 1b	 bts	 eax, 27
  00083	89 85 f4 01 00
	00		 mov	 DWORD PTR [rbp+500], eax

; 7668 :         goto start_io_loop;
; 7669 :         assert(0);
; 7670 : 
; 7671 :     }
; 7672 : 
; 7673 :     if (c->io_result != NO_ERROR) {

  00089	8b 4e e4	 mov	 ecx, DWORD PTR [rsi-28]
  0008c	85 c9		 test	 ecx, ecx
  0008e	74 22		 je	 SHORT $LN10@PxSocketSe@3

; 7674 :         PyErr_SetFromWindowsErr(c->io_result);

  00090	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 7675 :         PxSocket_FATAL();

  00095	45 8d 44 24 01	 lea	 r8d, QWORD PTR [r12+1]
  0009a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  000a1	48 8d 8e 50 cd
	ff ff		 lea	 rcx, QWORD PTR [rsi-12976]
  000a8	e8 00 00 00 00	 call	 PxSocket_HandleException
  000ad	e9 31 01 00 00	 jmp	 $end$130948
$LN10@PxSocketSe@3:

; 7676 :         goto end;
; 7677 :     }
; 7678 : 
; 7679 :     err = setsockopt(s->sock_fd,
; 7680 :                      SOL_SOCKET,
; 7681 :                      SO_UPDATE_ACCEPT_CONTEXT,
; 7682 :                      (char *)&(s->parent->sock_fd),
; 7683 :                      sizeof(SOCKET));

  000b2	4c 8b 8d 30 04
	00 00		 mov	 r9, QWORD PTR [rbp+1072]
  000b9	48 8b 4d 60	 mov	 rcx, QWORD PTR [rbp+96]
  000bd	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  000c2	41 b8 0b 70 00
	00		 mov	 r8d, 28683		; 0000700bH
  000c8	49 83 c1 60	 add	 r9, 96			; 00000060H
  000cc	c7 44 24 20 08
	00 00 00	 mov	 DWORD PTR [rsp+32], 8
  000d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_setsockopt

; 7684 :     if (err == SOCKET_ERROR)

  000da	83 f8 ff	 cmp	 eax, -1
  000dd	75 2b		 jne	 SHORT $LN3@PxSocketSe@3

; 7685 :         PxSocket_WSAERROR("setsockopt(SO_UPDATE_ACCEPT_CONTEXT)");

  000df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  000e5	8b c8		 mov	 ecx, eax
  000e7	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  000ec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@MBGNEJ@setsockopt?$CISO_UPDATE_ACCEPT_CONT@
  000f3	48 8d 8e 50 cd
	ff ff		 lea	 rcx, QWORD PTR [rsi-12976]
  000fa	41 b8 01 00 00
	00		 mov	 r8d, 1
  00100	e8 00 00 00 00	 call	 PxSocket_HandleException
  00105	e9 d9 00 00 00	 jmp	 $end$130948
$LN3@PxSocketSe@3:

; 7686 : 
; 7687 :     if (PxSocket_HAS_INITIAL_BYTES(s))

  0010a	f7 85 f4 01 00
	00 00 01 00 00	 test	 DWORD PTR [rbp+500], 256 ; 00000100H
  00114	75 0b		 jne	 SHORT $LN1@PxSocketSe@3

; 7688 :         bufsize = 0;
; 7689 :     else
; 7690 :         bufsize = (s->recvbuf_size - (sz * 2));

  00116	44 8b a5 60 02
	00 00		 mov	 r12d, DWORD PTR [rbp+608]
  0011d	41 83 ec 20	 sub	 r12d, 32		; 00000020H
$LN1@PxSocketSe@3:

; 7691 : 
; 7692 :     rbuf = s->rbuf;
; 7693 :     p = rbuf->w.buf;
; 7694 :     GetAcceptExSockaddrs(p, bufsize, sz, sz, &local, &llen, &remote, &rlen);

  00121	48 8b 8d 70 03
	00 00		 mov	 rcx, QWORD PTR [rbp+880]
  00128	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR rlen$[rsp]
  00130	41 b9 10 00 00
	00		 mov	 r9d, 16
  00136	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  0013a	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0013f	48 8d 44 24 48	 lea	 rax, QWORD PTR remote$[rsp]
  00144	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00149	48 8d 84 24 88
	00 00 00	 lea	 rax, QWORD PTR llen$[rsp]
  00151	45 8b c1	 mov	 r8d, r9d
  00154	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00159	48 8d 44 24 40	 lea	 rax, QWORD PTR local$[rsp]
  0015e	41 8b d4	 mov	 edx, r12d
  00161	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00166	ff 15 80 00 00
	00		 call	 QWORD PTR PySocketModule+128

; 7695 : 
; 7696 :     memcpy(&(s->local_addr), local, llen);

  0016c	4c 63 84 24 88
	00 00 00	 movsxd	 r8, DWORD PTR llen$[rsp]
  00174	48 8b 54 24 40	 mov	 rdx, QWORD PTR local$[rsp]
  00179	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR [rbp+232]
  00180	e8 00 00 00 00	 call	 memcpy

; 7697 :     memcpy(&(s->remote_addr), remote, rlen);

  00185	4c 63 84 24 90
	00 00 00	 movsxd	 r8, DWORD PTR rlen$[rsp]
  0018d	48 8b 54 24 48	 mov	 rdx, QWORD PTR remote$[rsp]
  00192	48 8d 8d 70 01
	00 00		 lea	 rcx, QWORD PTR [rbp+368]
  00199	e8 00 00 00 00	 call	 memcpy
  0019e	eb 0d		 jmp	 SHORT $start_io_loop$130941
$LN12@PxSocketSe@3:

; 7666 :     } else {
; 7667 :         printf("xxxxxxxxxx!\n");

  001a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@DLDEIKGM@xxxxxxxxxx?$CB?6?$AA@
  001a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf
$start_io_loop$130941:

; 7698 : 
; 7699 :     /*Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_RELOAD_PROTOCOL;*/
; 7700 : start_io_loop:
; 7701 :     InterlockedIncrement(&(s->parent->nchildren));

  001ad	48 8b 85 30 04
	00 00		 mov	 rax, QWORD PTR [rbp+1072]
  001b4	f0 ff 80 20 04
	00 00		 lock inc DWORD PTR [rax+1056]

; 7702 :     s->child_id = InterlockedIncrement(&(s->parent->next_child_id));

  001bb	48 8b 85 30 04
	00 00		 mov	 rax, QWORD PTR [rbp+1072]
  001c2	41 bb 01 00 00
	00		 mov	 r11d, 1
  001c8	f0 44 0f c1 98
	24 04 00 00	 lock xadd DWORD PTR [rax+1060], r11d
  001d1	41 ff c3	 inc	 r11d

; 7703 :     /*printf("child %d/%d connected\n", s->child_id, s->sock_fd);*/
; 7704 :     PxSocket_IOLoop(s);

  001d4	48 8b cd	 mov	 rcx, rbp
  001d7	44 89 9d 28 04
	00 00		 mov	 DWORD PTR [rbp+1064], r11d
  001de	e8 00 00 00 00	 call	 PxSocket_IOLoop
$end$130948:

; 7705 : 
; 7706 : end:
; 7707 :     LeaveCriticalSection(&(s->cs));

  001e3	48 8d 8d 38 02
	00 00		 lea	 rcx, QWORD PTR [rbp+568]
  001ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection

; 7708 : 
; 7709 :     return;
; 7710 : }

  001f0	4c 8d 5c 24 50	 lea	 r11, QWORD PTR [rsp+80]
  001f5	49 8b 5b 30	 mov	 rbx, QWORD PTR [r11+48]
  001f9	49 8b 6b 48	 mov	 rbp, QWORD PTR [r11+72]
  001fd	49 8b e3	 mov	 rsp, r11
  00200	41 5e		 pop	 r14
  00202	41 5d		 pop	 r13
  00204	41 5c		 pop	 r12
  00206	5f		 pop	 rdi
  00207	5e		 pop	 rsi
  00208	c3		 ret	 0
PxSocketServer_AcceptCallback ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@LBENJJIP@WaitForMultipleObjects?$AA@	; `string'
PUBLIC	??_C@_0P@CIBLNKFF@WSAEventSelect?$AA@		; `string'
PUBLIC	??_C@_08OACEPIAN@AcceptEx?$AA@			; `string'
PUBLIC	PxSocketServer_AcceptEx
EXTRN	__imp_WSAEventSelect:PROC
EXTRN	__imp_WaitForMultipleObjects:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocketServer_AcceptEx DD imagerel $LN37
	DD	imagerel $LN37+583
	DD	imagerel $unwind$PxSocketServer_AcceptEx
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocketServer_AcceptEx DD 0c1e01H
	DD	0f741eH
	DD	0e641eH
	DD	0d541eH
	DD	0c341eH
	DD	0e01a721eH
	DD	0c016d018H
xdata	ENDS
;	COMDAT ??_C@_0BH@LBENJJIP@WaitForMultipleObjects?$AA@
CONST	SEGMENT
??_C@_0BH@LBENJJIP@WaitForMultipleObjects?$AA@ DB 'WaitForMultipleObjects'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CIBLNKFF@WSAEventSelect?$AA@
CONST	SEGMENT
??_C@_0P@CIBLNKFF@WSAEventSelect?$AA@ DB 'WSAEventSelect', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08OACEPIAN@AcceptEx?$AA@
CONST	SEGMENT
??_C@_08OACEPIAN@AcceptEx?$AA@ DB 'AcceptEx', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PxSocketServer_AcceptEx
_TEXT	SEGMENT
instance$ = 96
context$ = 104
PxSocketServer_AcceptEx PROC				; COMDAT

; 7720 : {

$LN37:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	41 55		 push	 r13
  00018	41 56		 push	 r14
  0001a	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 7721 :     Context *c, *x;
; 7722 :     PxSocket *s, *o;
; 7723 :     int actual = 0;
; 7724 :     BOOL error, success;
; 7725 :     DWORD bufsize, size, last_error, result;
; 7726 : 
; 7727 :     c = (Context *)context;
; 7728 :     s = (PxSocket *)c->io_obj;

  0001e	48 8b ba a8 32
	00 00		 mov	 rdi, QWORD PTR [rdx+12968]
  00025	48 8b ea	 mov	 rbp, rdx

; 7729 : 
; 7730 :     _PyParallel_DisassociateCurrentThreadFromCallback();

  00028	e8 00 00 00 00	 call	 _PyParallel_DisassociateCurrentThreadFromCallback

; 7731 : 
; 7732 :     size = sizeof(struct sockaddr_in) + 16;
; 7733 :     if (PxSocket_HAS_INITIAL_BYTES(s))

  0002d	f7 87 f4 01 00
	00 00 01 00 00	 test	 DWORD PTR [rdi+500], 256 ; 00000100H
  00037	74 05		 je	 SHORT $LN18@PxSocketSe@4

; 7734 :         bufsize = 0;

  00039	45 33 ed	 xor	 r13d, r13d

; 7735 :     else

  0003c	eb 12		 jmp	 SHORT $wait$130988
$LN18@PxSocketSe@4:

; 7736 :         bufsize = (DWORD)(s->recvbuf_size - (size * 2));

  0003e	44 8b af 60 02
	00 00		 mov	 r13d, DWORD PTR [rdi+608]
  00045	41 83 ed 40	 sub	 r13d, 64		; 00000040H
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$wait$130988:

; 7737 : 
; 7738 : wait:
; 7739 :     result = WaitForMultipleObjects(3, &(s->wait_handles[0]), 0, 5000);

  00050	45 33 c0	 xor	 r8d, r8d
  00053	48 8d 97 08 04
	00 00		 lea	 rdx, QWORD PTR [rdi+1032]
  0005a	41 b9 88 13 00
	00		 mov	 r9d, 5000		; 00001388H
  00060	41 8d 48 03	 lea	 ecx, QWORD PTR [r8+3]
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WaitForMultipleObjects
  0006a	44 8b e0	 mov	 r12d, eax

; 7740 :     switch (result) {

  0006d	3d 82 00 00 00	 cmp	 eax, 130		; 00000082H
  00072	77 28		 ja	 SHORT $LN21@PxSocketSe@4
  00074	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  00079	0f 83 9c 01 00
	00		 jae	 $end$131000
  0007f	8b c8		 mov	 ecx, eax
  00081	85 c0		 test	 eax, eax
  00083	74 0e		 je	 SHORT $LN14@PxSocketSe@4
  00085	ff c9		 dec	 ecx
  00087	74 27		 je	 SHORT $more_accepts$130997
  00089	ff c9		 dec	 ecx
  0008b	0f 84 8a 01 00
	00		 je	 $end$131000
  00091	eb 1d		 jmp	 SHORT $more_accepts$130997
$LN14@PxSocketSe@4:

; 7741 :         case WAIT_OBJECT_0:
; 7742 :             /* fd_accept */
; 7743 :             InterlockedIncrement(&(s->num_accepts_wanted));

  00093	f0 ff 87 f0 03
	00 00		 lock inc DWORD PTR [rdi+1008]

; 7744 :         case WAIT_OBJECT_0 + 1:
; 7745 :             /* SetEvent(s->more_accepts) */
; 7746 :             goto more_accepts;

  0009a	eb 14		 jmp	 SHORT $more_accepts$130997
$LN21@PxSocketSe@4:

; 7740 :     switch (result) {

  0009c	3d 02 01 00 00	 cmp	 eax, 258		; 00000102H
  000a1	74 ad		 je	 SHORT $wait$130988
  000a3	83 f8 ff	 cmp	 eax, -1			; ffffffffH
  000a6	0f 84 53 01 00
	00		 je	 $LN9@PxSocketSe@4
  000ac	0f 1f 40 00	 npad	 4
$more_accepts$130997:

; 7763 :             goto end;
; 7764 : 
; 7765 :         default:
; 7766 :             assert(0);
; 7767 :     }
; 7768 : 
; 7769 : more_accepts:
; 7770 :     while (s->num_accepts_wanted > 0) {

  000b0	8b 87 f0 03 00
	00		 mov	 eax, DWORD PTR [rdi+1008]
  000b6	85 c0		 test	 eax, eax
  000b8	0f 8e f5 00 00
	00		 jle	 $LN6@PxSocketSe@4

; 7771 :         o = PxSocketServer_AllocClientSockets(s, 32);

  000be	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  000c3	48 8b cf	 mov	 rcx, rdi
  000c6	e8 00 00 00 00	 call	 PxSocketServer_AllocClientSockets
  000cb	48 8b f0	 mov	 rsi, rax

; 7772 :         if (!o)

  000ce	48 85 c0	 test	 rax, rax
  000d1	75 12		 jne	 SHORT $LN5@PxSocketSe@4

; 7773 :             PxSocket_HandleException(c, "", 0);

  000d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  000da	45 33 c0	 xor	 r8d, r8d
  000dd	48 8b cd	 mov	 rcx, rbp
  000e0	e8 00 00 00 00	 call	 PxSocket_HandleException
$LN5@PxSocketSe@4:

; 7774 : 
; 7775 :         InterlockedDecrement(&(s->num_accepts_wanted));

  000e5	f0 ff 8f f0 03
	00 00		 lock dec DWORD PTR [rdi+1008]

; 7776 :         if (!o)

  000ec	48 85 f6	 test	 rsi, rsi
  000ef	74 bf		 je	 SHORT $more_accepts$130997

; 7777 :             continue;
; 7778 : 
; 7779 :         o->io_op = PxSocket_IO_ACCEPT;
; 7780 : 
; 7781 :         x = o->ctx;

  000f1	48 8b 9e 00 02
	00 00		 mov	 rbx, QWORD PTR [rsi+512]
  000f8	c7 86 50 03 00
	00 02 00 00 00	 mov	 DWORD PTR [rsi+848], 2

; 7782 : 
; 7783 :         StartThreadpoolIo(s->tp_io);

  00102	48 8b 8f 58 03
	00 00		 mov	 rcx, QWORD PTR [rdi+856]
  00109	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_StartThreadpoolIo

; 7784 :         success = AcceptEx(s->sock_fd,
; 7785 :                            o->sock_fd,
; 7786 :                            o->rbuf->w.buf,
; 7787 :                            bufsize,
; 7788 :                            size,
; 7789 :                            size,
; 7790 :                            &(o->rbytes),
; 7791 :                            &(x->overlapped));

  0010f	4c 8b 86 70 03
	00 00		 mov	 r8, QWORD PTR [rsi+880]
  00116	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  0011a	4d 8b 40 48	 mov	 r8, QWORD PTR [r8+72]
  0011e	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  00122	48 8d 86 b8 03
	00 00		 lea	 rax, QWORD PTR [rsi+952]
  00129	48 81 c3 b0 32
	00 00		 add	 rbx, 12976		; 000032b0H
  00130	45 8b cd	 mov	 r9d, r13d
  00133	48 89 5c 24 38	 mov	 QWORD PTR [rsp+56], rbx
  00138	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0013d	c7 44 24 28 20
	00 00 00	 mov	 DWORD PTR [rsp+40], 32	; 00000020H
  00145	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR [rsp+32], 32	; 00000020H
  0014d	ff 15 48 00 00
	00		 call	 QWORD PTR PySocketModule+72
  00153	8b d8		 mov	 ebx, eax

; 7792 : 
; 7793 :         last_error = WSAGetLastError();

  00155	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError

; 7794 :         error = (
; 7795 :             !success && (
; 7796 :                 (last_error != WSA_IO_PENDING) &&
; 7797 :                 (last_error != WSAECONNRESET)
; 7798 :             )
; 7799 :         );

  0015b	85 db		 test	 ebx, ebx
  0015d	75 2c		 jne	 SHORT $LN3@PxSocketSe@4
  0015f	3d e5 03 00 00	 cmp	 eax, 997		; 000003e5H
  00164	74 25		 je	 SHORT $LN3@PxSocketSe@4
  00166	3d 46 27 00 00	 cmp	 eax, 10054		; 00002746H

; 7800 : 
; 7801 :         if (error) {

  0016b	74 1e		 je	 SHORT $LN3@PxSocketSe@4

; 7802 :             /* Do we need to cancel threadpool IO here? */
; 7803 :             /*CancelThreadpoolIo(s->tp_io);*/
; 7804 :             PyErr_SetFromWindowsErr(last_error);

  0016d	8b c8		 mov	 ecx, eax
  0016f	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 7805 :             PxSocket_HandleException(c, "AcceptEx", 0);

  00174	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OACEPIAN@AcceptEx?$AA@
  0017b	45 33 c0	 xor	 r8d, r8d
  0017e	48 8b cd	 mov	 rcx, rbp
  00181	e8 00 00 00 00	 call	 PxSocket_HandleException

; 7806 : 
; 7807 :             /* XXX TODO: release the context. */
; 7808 :             continue;

  00186	e9 25 ff ff ff	 jmp	 $more_accepts$130997
$LN3@PxSocketSe@4:

; 7809 :         }
; 7810 : 
; 7811 :         s->last->next = o;

  0018b	48 8b 87 a8 03
	00 00		 mov	 rax, QWORD PTR [rdi+936]
  00192	48 89 b0 40 04
	00 00		 mov	 QWORD PTR [rax+1088], rsi

; 7812 :         o->prev = s->last;

  00199	48 8b 87 a8 03
	00 00		 mov	 rax, QWORD PTR [rdi+936]
  001a0	48 89 86 38 04
	00 00		 mov	 QWORD PTR [rsi+1080], rax

; 7813 :         s->last = o;

  001a7	48 89 b7 a8 03
	00 00		 mov	 QWORD PTR [rdi+936], rsi

; 7814 :     }

  001ae	e9 fd fe ff ff	 jmp	 $more_accepts$130997
$LN6@PxSocketSe@4:

; 7815 : 
; 7816 :     if (result == WAIT_OBJECT_0) {

  001b3	45 85 e4	 test	 r12d, r12d
  001b6	0f 85 94 fe ff
	ff		 jne	 $wait$130988

; 7817 :         int err = WSAEventSelect(s->sock_fd, s->fd_accept, FD_ACCEPT);

  001bc	48 8b 97 90 03
	00 00		 mov	 rdx, QWORD PTR [rdi+912]
  001c3	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  001c7	45 8d 44 24 08	 lea	 r8d, QWORD PTR [r12+8]
  001cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAEventSelect

; 7818 :         if (err == SOCKET_ERROR) {

  001d2	83 f8 ff	 cmp	 eax, -1
  001d5	0f 85 75 fe ff
	ff		 jne	 $wait$130988

; 7819 :             PyErr_SetFromWindowsErr(WSAGetLastError());

  001db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  001e1	8b c8		 mov	 ecx, eax
  001e3	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 7820 :             PxSocket_HandleException(c, "WSAEventSelect", 0);

  001e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@CIBLNKFF@WSAEventSelect?$AA@
  001ef	45 33 c0	 xor	 r8d, r8d
  001f2	48 8b cd	 mov	 rcx, rbp
  001f5	e8 00 00 00 00	 call	 PxSocket_HandleException

; 7821 :         }
; 7822 :     }
; 7823 : 
; 7824 :     goto wait;

  001fa	e9 51 fe ff ff	 jmp	 $wait$130988
$LN9@PxSocketSe@4:

; 7747 : 
; 7748 :         case WAIT_OBJECT_0 + 2:
; 7749 :             /* shutdown event */
; 7750 :             goto end;
; 7751 : 
; 7752 :         case WAIT_TIMEOUT:
; 7753 :             goto timeout;
; 7754 : 
; 7755 :         case WAIT_ABANDONED_0:
; 7756 :         case WAIT_ABANDONED_0 + 1:
; 7757 :         case WAIT_ABANDONED_0 + 2:
; 7758 :             goto end;
; 7759 : 
; 7760 :         case WAIT_FAILED:
; 7761 :             PyErr_SetFromWindowsErr(0);

  001ff	33 c9		 xor	 ecx, ecx
  00201	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 7762 :             PxSocket_HandleException(c, "WaitForMultipleObjects", 1);

  00206	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@LBENJJIP@WaitForMultipleObjects?$AA@
  0020d	41 b8 01 00 00
	00		 mov	 r8d, 1
  00213	48 8b cd	 mov	 rcx, rbp
  00216	e8 00 00 00 00	 call	 PxSocket_HandleException
$end$131000:

; 7825 : 
; 7826 : timeout:
; 7827 :     /* xxx todo: enumerate all connected sockets and look for connections
; 7828 :      * to disconnect. */
; 7829 :     goto wait;
; 7830 : 
; 7831 : 
; 7832 : end:
; 7833 :     LeaveCriticalSection(&(s->acceptex_cs));

  0021b	48 8d 8f c8 03
	00 00		 lea	 rcx, QWORD PTR [rdi+968]

; 7834 : }

  00222	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00227	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  0022c	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
  00231	48 8b 7c 24 78	 mov	 rdi, QWORD PTR [rsp+120]
  00236	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0023a	41 5e		 pop	 r14
  0023c	41 5d		 pop	 r13
  0023e	41 5c		 pop	 r12
  00240	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_LeaveCriticalSection
PxSocketServer_AcceptEx ENDP
_TEXT	ENDS
PUBLIC	??_C@_09HILPIAE@ConnectEx?$AA@			; `string'
PUBLIC	??_C@_04NPNJNMMP@bind?$AA@			; `string'
PUBLIC	??_C@_0BB@MPMGBEBO@PxSocket_Connect?$AA@	; `string'
PUBLIC	PxSocket_Connect
EXTRN	__imp_bind:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocket_Connect DD imagerel $LN24
	DD	imagerel $LN24+291
	DD	imagerel $unwind$PxSocket_Connect
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PxSocket_Connect DD imagerel $LN24+291
	DD	imagerel $LN24+410
	DD	imagerel $chain$1$PxSocket_Connect
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PxSocket_Connect DD imagerel $LN24+410
	DD	imagerel $LN24+517
	DD	imagerel $chain$2$PxSocket_Connect
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PxSocket_Connect DD imagerel $LN24+517
	DD	imagerel $LN24+538
	DD	imagerel $chain$3$PxSocket_Connect
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PxSocket_Connect DD 021H
	DD	imagerel $LN24
	DD	imagerel $LN24+291
	DD	imagerel $unwind$PxSocket_Connect
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PxSocket_Connect DD 020021H
	DD	0fe400H
	DD	imagerel $LN24
	DD	imagerel $LN24+291
	DD	imagerel $unwind$PxSocket_Connect
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PxSocket_Connect DD 040a21H
	DD	0fe40aH
	DD	0e7405H
	DD	imagerel $LN24
	DD	imagerel $LN24+291
	DD	imagerel $unwind$PxSocket_Connect
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocket_Connect DD 081101H
	DD	0103411H
	DD	0f00d7211H
	DD	0c009d00bH
	DD	050066007H
xdata	ENDS
;	COMDAT ??_C@_09HILPIAE@ConnectEx?$AA@
CONST	SEGMENT
??_C@_09HILPIAE@ConnectEx?$AA@ DB 'ConnectEx', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04NPNJNMMP@bind?$AA@
CONST	SEGMENT
??_C@_04NPNJNMMP@bind?$AA@ DB 'bind', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MPMGBEBO@PxSocket_Connect?$AA@
CONST	SEGMENT
??_C@_0BB@MPMGBEBO@PxSocket_Connect?$AA@ DB 'PxSocket_Connect', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PxSocket_Connect
_TEXT	SEGMENT
instance$ = 112
context$ = 120
PxSocket_Connect PROC					; COMDAT

; 8172 : {

$LN24:
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	41 54		 push	 r12
  00009	41 55		 push	 r13
  0000b	41 57		 push	 r15
  0000d	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 8173 :     Context *c = (Context *)context;
; 8174 :     PxState *px;
; 8175 :     PTP_WIN32_IO_CALLBACK cb;
; 8176 :     BOOL success;
; 8177 :     SOCKET fd;
; 8178 :     struct sockaddr *sa;
; 8179 :     int len;
; 8180 :     PxSocketBuf *b;
; 8181 :     char *cbuf = NULL;
; 8182 :     size_t size = 0;
; 8183 :     WSAOVERLAPPED *ol;
; 8184 :     PyObject *result = NULL;
; 8185 :     PxSocket *s = (PxSocket *)c->io_obj;

  00011	48 8b aa a8 32
	00 00		 mov	 rbp, QWORD PTR [rdx+12968]
  00018	45 33 ff	 xor	 r15d, r15d
  0001b	48 8b f2	 mov	 rsi, rdx
  0001e	45 8b e7	 mov	 r12d, r15d
  00021	45 8b ef	 mov	 r13d, r15d
  00024	48 8b d9	 mov	 rbx, rcx

; 8186 :     struct sockaddr_in *sin;
; 8187 : 
; 8188 :     Px_GUARD

  00027	e8 00 00 00 00	 call	 _Py_PXCTX
  0002c	85 c0		 test	 eax, eax
  0002e	75 1d		 jne	 SHORT $LN20@PxSocket_C
  00030	45 8d 4f 01	 lea	 r9d, QWORD PTR [r15+1]
  00034	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@MPMGBEBO@PxSocket_Connect?$AA@
  00042	41 b8 fc 1f 00
	00		 mov	 r8d, 8188		; 00001ffcH
  00048	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN20@PxSocket_C:

; 8189 : 
; 8190 :     ENTERED_CALLBACK();

  0004d	48 8b d3	 mov	 rdx, rbx
  00050	48 8b ce	 mov	 rcx, rsi
  00053	e8 00 00 00 00	 call	 _PyParallel_EnteredCallback

; 8191 : 
; 8192 :     /*
; 8193 :     if (!PxSocket_InitProtocol(c))
; 8194 :         goto end;
; 8195 :     */
; 8196 : 
; 8197 :     assert(s->protocol);
; 8198 :     assert(!PyErr_Occurred());
; 8199 : 
; 8200 :     b = _pxsocket_initial_bytes_to_send(c, s);

  00058	48 8b d5	 mov	 rdx, rbp
  0005b	48 8b ce	 mov	 rcx, rsi
  0005e	e8 00 00 00 00	 call	 _pxsocket_initial_bytes_to_send
  00063	48 8b d8	 mov	 rbx, rax

; 8201 :     if (PyErr_Occurred())

  00066	e8 00 00 00 00	 call	 PyErr_Occurred
  0006b	48 85 c0	 test	 rax, rax
  0006e	74 17		 je	 SHORT $LN16@PxSocket_C

; 8202 :         PxSocket_EXCEPTION();

  00070	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00077	45 33 c0	 xor	 r8d, r8d
  0007a	48 8b ce	 mov	 rcx, rsi
  0007d	e8 00 00 00 00	 call	 PxSocket_HandleException
  00082	e9 7e 01 00 00	 jmp	 $end$131366
$LN16@PxSocket_C:

; 8203 : 
; 8204 :     if (b) {

  00087	48 85 db	 test	 rbx, rbx
  0008a	74 07		 je	 SHORT $LN15@PxSocket_C

; 8205 :         cbuf = b->w.buf;

  0008c	4c 8b 63 08	 mov	 r12, QWORD PTR [rbx+8]

; 8206 :         size = b->w.len;

  00090	44 8b 2b	 mov	 r13d, DWORD PTR [rbx]
$LN15@PxSocket_C:

; 8207 :     }
; 8208 : 
; 8209 :     px = c->px;
; 8210 : 
; 8211 :     sin = &(s->local_addr.in);

  00093	48 8d 95 e8 00
	00 00		 lea	 rdx, QWORD PTR [rbp+232]

; 8212 :     sin->sin_family = AF_INET;

  0009a	bb 02 00 00 00	 mov	 ebx, 2

; 8213 :     sin->sin_addr.s_addr = INADDR_ANY;

  0009f	48 89 1a	 mov	 QWORD PTR [rdx], rbx

; 8214 :     sin->sin_port = 0;
; 8215 :     if (bind(s->sock_fd, (struct sockaddr *)sin, sizeof(*sin)))

  000a2	48 8b 4d 60	 mov	 rcx, QWORD PTR [rbp+96]
  000a6	44 8d 43 0e	 lea	 r8d, QWORD PTR [rbx+14]
  000aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_bind
  000b0	85 c0		 test	 eax, eax
  000b2	74 25		 je	 SHORT $LN11@PxSocket_C

; 8216 :         PxSocket_WSAERROR("bind");

  000b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  000ba	8b c8		 mov	 ecx, eax
  000bc	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  000c1	44 8d 43 ff	 lea	 r8d, QWORD PTR [rbx-1]
  000c5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04NPNJNMMP@bind?$AA@
  000cc	48 8b ce	 mov	 rcx, rsi
  000cf	e8 00 00 00 00	 call	 PxSocket_HandleException
  000d4	e9 2c 01 00 00	 jmp	 $end$131366
$LN11@PxSocket_C:

; 8217 : 
; 8218 :     cb = PxSocketClient_Callback;
; 8219 :     s->tp_io = CreateThreadpoolIo((HANDLE)s->sock_fd, cb, c, NULL);

  000d9	48 8b 4d 60	 mov	 rcx, QWORD PTR [rbp+96]
  000dd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PxSocketClient_Callback
  000e4	45 33 c9	 xor	 r9d, r9d
  000e7	4c 8b c6	 mov	 r8, rsi
  000ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateThreadpoolIo
  000f0	48 89 85 58 03
	00 00		 mov	 QWORD PTR [rbp+856], rax

; 8220 :     if (!s->tp_io)

  000f7	48 85 c0	 test	 rax, rax
  000fa	75 21		 jne	 SHORT $LN7@PxSocket_C

; 8221 :         PxSocket_SYSERROR("CreateThreadpoolIo");

  000fc	33 c9		 xor	 ecx, ecx
  000fe	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00103	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIALAGNA@CreateThreadpoolIo?$AA@
  0010a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00110	48 8b ce	 mov	 rcx, rsi
  00113	e8 00 00 00 00	 call	 PxSocket_HandleException
  00118	e9 e8 00 00 00	 jmp	 $end$131366
$LN7@PxSocket_C:

; 8222 : 
; 8223 :     c->io_type = Px_IOTYPE_SOCKET;

  0011d	89 9e 80 32 00
	00		 mov	 DWORD PTR [rsi+12928], ebx
  00123	48 89 7c 24 70	 mov	 QWORD PTR [rsp+112], rdi
  00128	4c 89 74 24 78	 mov	 QWORD PTR [rsp+120], r14

; 8224 :     s->io_op = PxSocket_IO_CONNECT;
; 8225 : 
; 8226 :     ol = &(c->overlapped);

  0012d	4c 8d b6 b0 32
	00 00		 lea	 r14, QWORD PTR [rsi+12976]
  00134	c7 85 50 03 00
	00 01 00 00 00	 mov	 DWORD PTR [rbp+848], 1

; 8227 :     RESET_OVERLAPPED(ol);

  0013e	49 8b ce	 mov	 rcx, r14
  00141	e8 00 00 00 00	 call	 _RESET_OVERLAPPED

; 8228 : 
; 8229 :     sa = (struct sockaddr *)&(s->remote_addr.sa);
; 8230 :     len = s->remote_addr_len;
; 8231 :     fd = s->sock_fd;
; 8232 : 
; 8233 :     StartThreadpoolIo(s->tp_io);

  00146	48 8b 8d 58 03
	00 00		 mov	 rcx, QWORD PTR [rbp+856]
  0014d	8b 9d f0 01 00
	00		 mov	 ebx, DWORD PTR [rbp+496]
  00153	48 8b 7d 60	 mov	 rdi, QWORD PTR [rbp+96]
  00157	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_StartThreadpoolIo

; 8234 :     PxSocket_InitExceptionHandler(s);

  0015d	48 8b cd	 mov	 rcx, rbp
  00160	e8 00 00 00 00	 call	 PxSocket_InitExceptionHandler

; 8235 :     Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_CONNECTED;

  00165	83 8d f4 01 00
	00 10		 or	 DWORD PTR [rbp+500], 16

; 8236 :     success = ConnectEx(fd, sa, len, cbuf, (DWORD)size, NULL, ol);

  0016c	4c 89 74 24 30	 mov	 QWORD PTR [rsp+48], r14
  00171	48 8d 95 70 01
	00 00		 lea	 rdx, QWORD PTR [rbp+368]
  00178	4d 8b cc	 mov	 r9, r12
  0017b	44 8b c3	 mov	 r8d, ebx
  0017e	48 8b cf	 mov	 rcx, rdi
  00181	4c 89 7c 24 28	 mov	 QWORD PTR [rsp+40], r15
  00186	44 89 6c 24 20	 mov	 DWORD PTR [rsp+32], r13d
  0018b	ff 15 50 00 00
	00		 call	 QWORD PTR PySocketModule+80
  00191	48 8b 7c 24 70	 mov	 rdi, QWORD PTR [rsp+112]

; 8237 :     if (!success) {

  00196	85 c0		 test	 eax, eax
  00198	75 3f		 jne	 SHORT $LN6@PxSocket_C

; 8238 :         if (WSAGetLastError() != WSA_IO_PENDING) {

  0019a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  001a0	3d e5 03 00 00	 cmp	 eax, 997		; 000003e5H
  001a5	74 59		 je	 SHORT $LN23@PxSocket_C

; 8239 :             Px_SOCKFLAGS(s) &= ~Px_SOCKFLAGS_CONNECTED;

  001a7	83 a5 f4 01 00
	00 ef		 and	 DWORD PTR [rbp+500], -17

; 8240 :             s->exception_handler = NULL;

  001ae	4c 89 bd e8 02
	00 00		 mov	 QWORD PTR [rbp+744], r15

; 8241 :             PxSocket_WSAERROR("ConnectEx");

  001b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  001bb	8b c8		 mov	 ecx, eax
  001bd	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  001c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09HILPIAE@ConnectEx?$AA@
  001c9	41 b8 01 00 00
	00		 mov	 r8d, 1
  001cf	48 8b ce	 mov	 rcx, rsi
  001d2	e8 00 00 00 00	 call	 PxSocket_HandleException
  001d7	eb 27		 jmp	 SHORT $LN23@PxSocket_C
$LN6@PxSocket_C:

; 8242 :         }
; 8243 :     } else {
; 8244 :         PTP_CALLBACK_INSTANCE i = c->instance;
; 8245 :         CancelThreadpoolIo(s->tp_io);

  001d9	48 8b 8d 58 03
	00 00		 mov	 rcx, QWORD PTR [rbp+856]
  001e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CancelThreadpoolIo

; 8246 :         cb(NULL, c, ol, NO_ERROR, 0, NULL);

  001e6	45 33 c9	 xor	 r9d, r9d
  001e9	4d 8b c6	 mov	 r8, r14
  001ec	48 8b d6	 mov	 rdx, rsi
  001ef	33 c9		 xor	 ecx, ecx
  001f1	4c 89 7c 24 28	 mov	 QWORD PTR [rsp+40], r15
  001f6	4c 89 7c 24 20	 mov	 QWORD PTR [rsp+32], r15
  001fb	e8 00 00 00 00	 call	 PxSocketClient_Callback
$LN23@PxSocket_C:
  00200	4c 8b 74 24 78	 mov	 r14, QWORD PTR [rsp+120]
$end$131366:

; 8247 :     }
; 8248 : 
; 8249 : end:
; 8250 :     return;
; 8251 : }

  00205	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR [rsp+128]
  0020d	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00211	41 5f		 pop	 r15
  00213	41 5d		 pop	 r13
  00215	41 5c		 pop	 r12
  00217	5e		 pop	 rsi
  00218	5d		 pop	 rbp
  00219	c3		 ret	 0
PxSocket_Connect ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@MPJNDEE@TrySubmitThreadpoolCallback?$AA@ ; `string'
PUBLIC	??_C@_0P@EGNBEKMI@WSACreateEvent?$AA@		; `string'
PUBLIC	??_C@_0M@MEDOMCAA@CreateEvent?$AA@		; `string'
PUBLIC	??_C@_06OODDLKLE@listen?$AA@			; `string'
PUBLIC	??_C@_0BF@BDJAIBDI@PxSocketServer_Start?$AA@	; `string'
PUBLIC	PxSocketServer_Start
EXTRN	__imp_WSACreateEvent:PROC
EXTRN	__imp_listen:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocketServer_Start DD imagerel $LN70
	DD	imagerel $LN70+404
	DD	imagerel $unwind$PxSocketServer_Start
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PxSocketServer_Start DD imagerel $LN70+404
	DD	imagerel $LN70+642
	DD	imagerel $chain$2$PxSocketServer_Start
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PxSocketServer_Start DD imagerel $LN70+642
	DD	imagerel $LN70+856
	DD	imagerel $chain$3$PxSocketServer_Start
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PxSocketServer_Start DD 021H
	DD	imagerel $LN70
	DD	imagerel $LN70+404
	DD	imagerel $unwind$PxSocketServer_Start
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PxSocketServer_Start DD 061221H
	DD	08d412H
	DD	010c40dH
	DD	0e5405H
	DD	imagerel $LN70
	DD	imagerel $LN70+404
	DD	imagerel $unwind$PxSocketServer_Start
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocketServer_Start DD 050a01H
	DD	0e006820aH
	DD	060037004H
	DD	03002H
xdata	ENDS
;	COMDAT ??_C@_0BM@MPJNDEE@TrySubmitThreadpoolCallback?$AA@
CONST	SEGMENT
??_C@_0BM@MPJNDEE@TrySubmitThreadpoolCallback?$AA@ DB 'TrySubmitThreadpoo'
	DB	'lCallback', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EGNBEKMI@WSACreateEvent?$AA@
CONST	SEGMENT
??_C@_0P@EGNBEKMI@WSACreateEvent?$AA@ DB 'WSACreateEvent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MEDOMCAA@CreateEvent?$AA@
CONST	SEGMENT
??_C@_0M@MEDOMCAA@CreateEvent?$AA@ DB 'CreateEvent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06OODDLKLE@listen?$AA@
CONST	SEGMENT
??_C@_06OODDLKLE@listen?$AA@ DB 'listen', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BDJAIBDI@PxSocketServer_Start?$AA@
CONST	SEGMENT
??_C@_0BF@BDJAIBDI@PxSocketServer_Start?$AA@ DB 'PxSocketServer_Start', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PxSocketServer_Start
_TEXT	SEGMENT
instance$ = 112
last$ = 120
context$ = 120
PxSocketServer_Start PROC				; COMDAT

; 8366 : {

$LN70:
  00000	40 53		 push	 rbx
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	41 56		 push	 r14
  00006	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 8367 :     Context *c = (Context *)context;
; 8368 :     PxState *px;
; 8369 :     PTP_WIN32_IO_CALLBACK cb;
; 8370 :     BOOL error;
; 8371 :     BOOL success;
; 8372 :     char failed = 0;
; 8373 :     struct sockaddr *sa;
; 8374 :     int len;
; 8375 :     DWORD size, bufsize, last_error;
; 8376 :     char *buf = NULL;
; 8377 :     PyObject *result = NULL;
; 8378 :     PxSocket *s = (PxSocket *)c->io_obj;

  0000a	48 8b ba a8 32
	00 00		 mov	 rdi, QWORD PTR [rdx+12968]
  00011	48 8b f2	 mov	 rsi, rdx
  00014	48 8b d9	 mov	 rbx, rcx
  00017	45 32 f6	 xor	 r14b, r14b

; 8379 :     PxSocket *o, *last;
; 8380 :     Context  *x;
; 8381 :     PyTypeObject *tp = &PxSocket_Type;
; 8382 : 
; 8383 :     Px_GUARD

  0001a	e8 00 00 00 00	 call	 _Py_PXCTX
  0001f	85 c0		 test	 eax, eax
  00021	75 1d		 jne	 SHORT $LN55@PxSocketSe@5
  00023	44 8d 48 01	 lea	 r9d, QWORD PTR [rax+1]
  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@BDJAIBDI@PxSocketServer_Start?$AA@
  00035	41 b8 bf 20 00
	00		 mov	 r8d, 8383		; 000020bfH
  0003b	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN55@PxSocketSe@5:

; 8384 : 
; 8385 :     ENTERED_CALLBACK();

  00040	48 8b d3	 mov	 rdx, rbx
  00043	48 8b ce	 mov	 rcx, rsi
  00046	e8 00 00 00 00	 call	 _PyParallel_EnteredCallback

; 8386 : 
; 8387 :     assert(s->protocol_type);
; 8388 :     assert(s->protocol);
; 8389 : 
; 8390 :     PxSocket_InitExceptionHandler(s);

  0004b	48 8b cf	 mov	 rcx, rdi
  0004e	e8 00 00 00 00	 call	 PxSocket_InitExceptionHandler

; 8391 : 
; 8392 :     assert(PxSocket_IS_SERVER(s));
; 8393 : 
; 8394 :     assert(s->protocol);
; 8395 :     assert(!PyErr_Occurred());
; 8396 : 
; 8397 :     s->freelist = _PyHeap_NewList(c);

  00053	48 8b ce	 mov	 rcx, rsi
  00056	e8 00 00 00 00	 call	 _PyHeap_NewList
  0005b	48 89 87 b0 03
	00 00		 mov	 QWORD PTR [rdi+944], rax

; 8398 :     if (!s->freelist)

  00062	48 85 c0	 test	 rax, rax
  00065	75 0c		 jne	 SHORT $LN51@PxSocketSe@5
$LN68@PxSocketSe@5:

; 8399 :         PxSocket_FATAL();

  00067	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0006e	e9 cd 02 00 00	 jmp	 $LN67@PxSocketSe@5
$LN51@PxSocketSe@5:

; 8400 : 
; 8401 :     if (!PxSocket_InitInitialBytes(s))

  00073	48 8b cf	 mov	 rcx, rdi
  00076	e8 00 00 00 00	 call	 PxSocket_InitInitialBytes
  0007b	85 c0		 test	 eax, eax

; 8402 :         PxSocket_FATAL();

  0007d	74 e8		 je	 SHORT $LN68@PxSocketSe@5

; 8403 : 
; 8404 :     px = c->px;
; 8405 :     s->io_op = PxSocket_IO_ACCEPT;
; 8406 : 
; 8407 :     sa = (struct sockaddr *)&(s->local_addr.in);
; 8408 :     len = s->local_addr_len;
; 8409 :     if (bind(s->sock_fd, sa, len) == SOCKET_ERROR)

  0007f	44 8b 87 68 01
	00 00		 mov	 r8d, DWORD PTR [rdi+360]
  00086	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  0008a	48 8d 97 e8 00
	00 00		 lea	 rdx, QWORD PTR [rdi+232]
  00091	c7 87 50 03 00
	00 02 00 00 00	 mov	 DWORD PTR [rdi+848], 2
  0009b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_bind
  000a1	83 f8 ff	 cmp	 eax, -1
  000a4	75 19		 jne	 SHORT $LN43@PxSocketSe@5

; 8410 :         PxSocket_WSAERROR("bind");

  000a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  000ac	8b c8		 mov	 ecx, eax
  000ae	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  000b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04NPNJNMMP@bind?$AA@
  000ba	e9 81 02 00 00	 jmp	 $LN67@PxSocketSe@5
$LN43@PxSocketSe@5:

; 8411 : 
; 8412 :     if (listen(s->sock_fd, SOMAXCONN) == SOCKET_ERROR)

  000bf	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  000c3	ba ff ff ff 7f	 mov	 edx, 2147483647		; 7fffffffH
  000c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_listen
  000ce	83 f8 ff	 cmp	 eax, -1
  000d1	75 19		 jne	 SHORT $LN39@PxSocketSe@5

; 8413 :         PxSocket_WSAERROR("listen");

  000d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  000d9	8b c8		 mov	 ecx, eax
  000db	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  000e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06OODDLKLE@listen?$AA@
  000e7	e9 54 02 00 00	 jmp	 $LN67@PxSocketSe@5
$LN39@PxSocketSe@5:

; 8414 : 
; 8415 :     s->first = PxSocketServer_AllocClientSockets(s, 1000);

  000ec	ba e8 03 00 00	 mov	 edx, 1000		; 000003e8H
  000f1	48 8b cf	 mov	 rcx, rdi
  000f4	e8 00 00 00 00	 call	 PxSocketServer_AllocClientSockets
  000f9	48 89 87 a0 03
	00 00		 mov	 QWORD PTR [rdi+928], rax

; 8416 :     if (!s->first)

  00100	48 85 c0	 test	 rax, rax

; 8417 :         PxSocket_FATAL();

  00103	0f 84 5e ff ff
	ff		 je	 $LN68@PxSocketSe@5

; 8418 : 
; 8419 :     cb = PxSocketServer_AcceptCallback;
; 8420 :     s->tp_io = CreateThreadpoolIo((HANDLE)s->sock_fd, cb, c, NULL);

  00109	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  0010d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PxSocketServer_AcceptCallback
  00114	45 33 c9	 xor	 r9d, r9d
  00117	4c 8b c6	 mov	 r8, rsi
  0011a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateThreadpoolIo
  00120	48 89 87 58 03
	00 00		 mov	 QWORD PTR [rdi+856], rax

; 8421 :     if (!s->tp_io)

  00127	48 85 c0	 test	 rax, rax
  0012a	75 13		 jne	 SHORT $LN31@PxSocketSe@5

; 8422 :         PxSocket_SYSERROR("CreateThreadpoolIo");

  0012c	33 c9		 xor	 ecx, ecx
  0012e	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00133	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIALAGNA@CreateThreadpoolIo?$AA@
  0013a	e9 01 02 00 00	 jmp	 $LN67@PxSocketSe@5
$LN31@PxSocketSe@5:

; 8423 : 
; 8424 :     s->more_accepts = CreateEvent(0, 0, 0, 0);

  0013f	45 33 c9	 xor	 r9d, r9d
  00142	45 33 c0	 xor	 r8d, r8d
  00145	33 d2		 xor	 edx, edx
  00147	33 c9		 xor	 ecx, ecx
  00149	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateEventW
  0014f	48 89 87 f8 03
	00 00		 mov	 QWORD PTR [rdi+1016], rax

; 8425 :     if (!s->more_accepts)

  00156	48 85 c0	 test	 rax, rax
  00159	75 13		 jne	 SHORT $LN27@PxSocketSe@5
$LN69@PxSocketSe@5:

; 8426 :         PxSocket_SYSERROR("CreateEvent");

  0015b	33 c9		 xor	 ecx, ecx
  0015d	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00162	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@MEDOMCAA@CreateEvent?$AA@
  00169	e9 d2 01 00 00	 jmp	 $LN67@PxSocketSe@5
$LN27@PxSocketSe@5:

; 8427 : 
; 8428 :     s->shutdown = CreateEvent(0, 0, 0, 0);

  0016e	45 33 c9	 xor	 r9d, r9d
  00171	45 33 c0	 xor	 r8d, r8d
  00174	33 d2		 xor	 edx, edx
  00176	33 c9		 xor	 ecx, ecx
  00178	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateEventW
  0017e	48 89 87 00 04
	00 00		 mov	 QWORD PTR [rdi+1024], rax

; 8429 :     if (!s->shutdown)

  00185	48 85 c0	 test	 rax, rax

; 8430 :         PxSocket_SYSERROR("CreateEvent");

  00188	74 d1		 je	 SHORT $LN69@PxSocketSe@5

; 8431 : 
; 8432 :     size = sizeof(struct sockaddr_in) + 16;
; 8433 :     if (PxSocket_HAS_INITIAL_BYTES(s))

  0018a	f7 87 f4 01 00
	00 00 01 00 00	 test	 DWORD PTR [rdi+500], 256 ; 00000100H
  00194	48 89 6c 24 70	 mov	 QWORD PTR [rsp+112], rbp
  00199	4c 89 a4 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], r12
  001a1	4c 89 6c 24 40	 mov	 QWORD PTR [rsp+64], r13
  001a6	74 05		 je	 SHORT $LN22@PxSocketSe@5

; 8434 :         bufsize = 0;

  001a8	45 33 ed	 xor	 r13d, r13d

; 8435 :     else

  001ab	eb 0b		 jmp	 SHORT $LN21@PxSocketSe@5
$LN22@PxSocketSe@5:

; 8436 :         bufsize = (DWORD)(s->recvbuf_size - (size * 2));

  001ad	44 8b af 60 02
	00 00		 mov	 r13d, DWORD PTR [rdi+608]
  001b4	41 83 ed 40	 sub	 r13d, 64		; 00000040H
$LN21@PxSocketSe@5:

; 8437 : 
; 8438 :     for (o = s->first; o; o = o->next) {

  001b8	48 8b af a0 03
	00 00		 mov	 rbp, QWORD PTR [rdi+928]
  001bf	4c 8b 64 24 78	 mov	 r12, QWORD PTR last$[rsp]
  001c4	48 85 ed	 test	 rbp, rbp
  001c7	0f 84 97 00 00
	00		 je	 $LN18@PxSocketSe@5
  001cd	0f 1f 00	 npad	 3
$LL20@PxSocketSe@5:

; 8439 :         o->io_op = PxSocket_IO_ACCEPT;
; 8440 :         x = o->ctx;

  001d0	48 8b 9d 00 02
	00 00		 mov	 rbx, QWORD PTR [rbp+512]
  001d7	c7 85 50 03 00
	00 02 00 00 00	 mov	 DWORD PTR [rbp+848], 2

; 8441 :         assert(o->rbuf->w.len == o->recvbuf_size);
; 8442 : 
; 8443 :         StartThreadpoolIo(s->tp_io);

  001e1	48 8b 8f 58 03
	00 00		 mov	 rcx, QWORD PTR [rdi+856]
  001e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_StartThreadpoolIo

; 8444 :         success = AcceptEx(s->sock_fd,
; 8445 :                            o->sock_fd,
; 8446 :                            o->rbuf->w.buf,
; 8447 :                            bufsize,
; 8448 :                            size,
; 8449 :                            size,
; 8450 :                            &(o->rbytes),
; 8451 :                            &(x->overlapped));

  001ee	4c 8b 85 70 03
	00 00		 mov	 r8, QWORD PTR [rbp+880]
  001f5	48 8b 55 60	 mov	 rdx, QWORD PTR [rbp+96]
  001f9	4d 8b 40 48	 mov	 r8, QWORD PTR [r8+72]
  001fd	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  00201	48 8d 85 b8 03
	00 00		 lea	 rax, QWORD PTR [rbp+952]
  00208	48 81 c3 b0 32
	00 00		 add	 rbx, 12976		; 000032b0H
  0020f	45 8b cd	 mov	 r9d, r13d
  00212	48 89 5c 24 38	 mov	 QWORD PTR [rsp+56], rbx
  00217	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0021c	c7 44 24 28 20
	00 00 00	 mov	 DWORD PTR [rsp+40], 32	; 00000020H
  00224	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR [rsp+32], 32	; 00000020H
  0022c	ff 15 48 00 00
	00		 call	 QWORD PTR PySocketModule+72
  00232	8b d8		 mov	 ebx, eax

; 8452 : 
; 8453 :         last_error = WSAGetLastError();

  00234	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError

; 8454 :         error = (
; 8455 :             !success && (
; 8456 :                 (last_error != WSA_IO_PENDING) &&
; 8457 :                 (last_error != WSAECONNRESET)
; 8458 :             )
; 8459 :         );

  0023a	85 db		 test	 ebx, ebx
  0023c	75 0e		 jne	 SHORT $LN58@PxSocketSe@5
  0023e	3d e5 03 00 00	 cmp	 eax, 997		; 000003e5H
  00243	74 07		 je	 SHORT $LN58@PxSocketSe@5
  00245	3d 46 27 00 00	 cmp	 eax, 10054		; 00002746H
  0024a	75 15		 jne	 SHORT $LN61@PxSocketSe@5
$LN58@PxSocketSe@5:

; 8463 :             break;
; 8464 :         }
; 8465 :         last = o;

  0024c	4c 8b e5	 mov	 r12, rbp
  0024f	48 8b ad 40 04
	00 00		 mov	 rbp, QWORD PTR [rbp+1088]
  00256	48 85 ed	 test	 rbp, rbp
  00259	0f 85 71 ff ff
	ff		 jne	 $LL20@PxSocketSe@5

; 8437 : 
; 8438 :     for (o = s->first; o; o = o->next) {

  0025f	eb 03		 jmp	 SHORT $LN18@PxSocketSe@5
$LN61@PxSocketSe@5:

; 8460 : 
; 8461 :         if (error) {
; 8462 :             failed = 1;

  00261	41 b6 01	 mov	 r14b, 1
$LN18@PxSocketSe@5:
  00264	4c 8b 6c 24 40	 mov	 r13, QWORD PTR [rsp+64]
  00269	48 8b 6c 24 70	 mov	 rbp, QWORD PTR [rsp+112]

; 8466 :     }
; 8467 : 
; 8468 :     s->last = last;

  0026e	4c 89 a7 a8 03
	00 00		 mov	 QWORD PTR [rdi+936], r12
  00275	4c 8b a4 24 80
	00 00 00	 mov	 r12, QWORD PTR [rsp+128]

; 8469 : 
; 8470 :     if (failed)

  0027d	45 84 f6	 test	 r14b, r14b
  00280	74 19		 je	 SHORT $LN13@PxSocketSe@5

; 8471 :         PxSocket_WSAERROR("AcceptEx");

  00282	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  00288	8b c8		 mov	 ecx, eax
  0028a	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  0028f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OACEPIAN@AcceptEx?$AA@
  00296	e9 a5 00 00 00	 jmp	 $LN67@PxSocketSe@5
$LN13@PxSocketSe@5:

; 8472 : 
; 8473 :     s->fd_accept = WSACreateEvent();

  0029b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSACreateEvent
  002a1	48 89 87 90 03
	00 00		 mov	 QWORD PTR [rdi+912], rax

; 8474 :     if (!s->fd_accept)

  002a8	48 85 c0	 test	 rax, rax
  002ab	75 16		 jne	 SHORT $LN9@PxSocketSe@5

; 8475 :         PxSocket_WSAERROR("WSACreateEvent");

  002ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  002b3	8b c8		 mov	 ecx, eax
  002b5	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  002ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@EGNBEKMI@WSACreateEvent?$AA@
  002c1	eb 7d		 jmp	 SHORT $LN67@PxSocketSe@5
$LN9@PxSocketSe@5:

; 8476 : 
; 8477 :     if (WSAEventSelect(s->sock_fd, s->fd_accept, FD_ACCEPT) == SOCKET_ERROR)

  002c3	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  002c7	41 b8 08 00 00
	00		 mov	 r8d, 8
  002cd	48 8b d0	 mov	 rdx, rax
  002d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAEventSelect
  002d6	83 f8 ff	 cmp	 eax, -1
  002d9	75 16		 jne	 SHORT $LN5@PxSocketSe@5

; 8478 :         PxSocket_WSAERROR("WSAEventSelect");

  002db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  002e1	8b c8		 mov	 ecx, eax
  002e3	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  002e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@CIBLNKFF@WSAEventSelect?$AA@
  002ef	eb 4f		 jmp	 SHORT $LN67@PxSocketSe@5
$LN5@PxSocketSe@5:

; 8479 : 
; 8480 :     s->wait_handles[0] = s->fd_accept;

  002f1	48 8b 87 90 03
	00 00		 mov	 rax, QWORD PTR [rdi+912]

; 8481 :     s->wait_handles[1] = s->more_accepts;
; 8482 :     s->wait_handles[2] = s->shutdown;
; 8483 : 
; 8484 :     if (!TrySubmitThreadpoolCallback(PxSocketServer_AcceptEx, c, NULL))

  002f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PxSocketServer_AcceptEx
  002ff	45 33 c0	 xor	 r8d, r8d
  00302	48 89 87 08 04
	00 00		 mov	 QWORD PTR [rdi+1032], rax
  00309	48 8b 87 f8 03
	00 00		 mov	 rax, QWORD PTR [rdi+1016]
  00310	48 8b d6	 mov	 rdx, rsi
  00313	48 89 87 10 04
	00 00		 mov	 QWORD PTR [rdi+1040], rax
  0031a	48 8b 87 00 04
	00 00		 mov	 rax, QWORD PTR [rdi+1024]
  00321	48 89 87 18 04
	00 00		 mov	 QWORD PTR [rdi+1048], rax
  00328	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TrySubmitThreadpoolCallback
  0032e	85 c0		 test	 eax, eax
  00330	75 1c		 jne	 SHORT $end$131504

; 8485 :         PxSocket_SYSERROR("TrySubmitThreadpoolCallback");

  00332	33 c9		 xor	 ecx, ecx
  00334	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00339	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@MPJNDEE@TrySubmitThreadpoolCallback?$AA@
$LN67@PxSocketSe@5:
  00340	41 b8 01 00 00
	00		 mov	 r8d, 1
  00346	48 8b ce	 mov	 rcx, rsi
  00349	e8 00 00 00 00	 call	 PxSocket_HandleException
$end$131504:

; 8486 : 
; 8487 : end:
; 8488 :     return;
; 8489 : }

  0034e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00352	41 5e		 pop	 r14
  00354	5f		 pop	 rdi
  00355	5e		 pop	 rsi
  00356	5b		 pop	 rbx
  00357	c3		 ret	 0
PxSocketServer_Start ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@JDAPMCFE@unsupported?5async?5object?$AA@ ; `string'
PUBLIC	??_C@_0BA@GLJJCBPJ@_async_register?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_async_register DD imagerel $LN17
	DD	imagerel $LN17+354
	DD	imagerel $unwind$_async_register
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_register DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT ??_C@_0BJ@JDAPMCFE@unsupported?5async?5object?$AA@
CONST	SEGMENT
??_C@_0BJ@JDAPMCFE@unsupported?5async?5object?$AA@ DB 'unsupported async '
	DB	'object', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GLJJCBPJ@_async_register?$AA@
CONST	SEGMENT
??_C@_0BA@GLJJCBPJ@_async_register?$AA@ DB '_async_register', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pyparallel.c
CONST	ENDS
;	COMDAT _async_register
_TEXT	SEGMENT
protocol_type$ = 48
self$ = 80
args$ = 88
kwds$ = 96
transport$ = 104
_async_register PROC					; COMDAT

; 8767 : {

$LN17:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	49 8b d8	 mov	 rbx, r8
  0000d	48 8b fa	 mov	 rdi, rdx

; 8768 :     PyObject *transport;
; 8769 :     PyObject *protocol_type;
; 8770 : 
; 8771 :     static const char *kwlist[] = { "transport", "protocol", NULL };
; 8772 :     static const char *fmt = "OO:register";
; 8773 : 
; 8774 :     Py_GUARD

  00010	e8 00 00 00 00	 call	 _Py_PXCTX
  00015	85 c0		 test	 eax, eax
  00017	74 1c		 je	 SHORT $LN9@async_regi
  00019	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@GLJJCBPJ@_async_register?$AA@
  00027	45 33 c9	 xor	 r9d, r9d
  0002a	41 b8 46 22 00
	00		 mov	 r8d, 8774		; 00002246H
  00030	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@async_regi:

; 8775 : 
; 8776 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, fmt, (char **)kwlist,
; 8777 :                                      &transport, &protocol_type))

  00035	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR ?fmt@?1??_async_register@@9@9
  0003c	48 8d 44 24 30	 lea	 rax, QWORD PTR protocol_type$[rsp]
  00041	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??_async_register@@9@9
  00048	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0004d	48 8d 44 24 68	 lea	 rax, QWORD PTR transport$[rsp]
  00052	48 8b d3	 mov	 rdx, rbx
  00055	48 8b cf	 mov	 rcx, rdi
  00058	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0005d	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00062	85 c0		 test	 eax, eax

; 8778 :         return NULL;

  00064	0f 84 80 00 00
	00		 je	 $LN16@async_regi

; 8779 : 
; 8780 :     if (PxSocket_Check(transport)) {

  0006a	48 8b 5c 24 68	 mov	 rbx, QWORD PTR transport$[rsp]
  0006f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PxSocket_Type
  00076	48 39 43 58	 cmp	 QWORD PTR [rbx+88], rax
  0007a	74 26		 je	 SHORT $LN6@async_regi
  0007c	48 39 43 38	 cmp	 QWORD PTR [rbx+56], rax
  00080	74 20		 je	 SHORT $LN6@async_regi

; 8804 : 
; 8805 :     } else {
; 8806 :         PyErr_SetString(PyExc_ValueError, "unsupported async object");

  00082	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00089	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@JDAPMCFE@unsupported?5async?5object?$AA@
  00090	e8 00 00 00 00	 call	 PyErr_SetString

; 8807 :         return NULL;

  00095	33 c0		 xor	 eax, eax

; 8808 :     }
; 8809 : }

  00097	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0009c	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000a0	5f		 pop	 rdi
  000a1	c3		 ret	 0
$LN6@async_regi:

; 8781 :         PxSocket *s = (PxSocket *)transport;
; 8782 :         Context *c = s->ctx;
; 8783 :         PTP_SIMPLE_CALLBACK cb;
; 8784 : 
; 8785 :         assert(c);
; 8786 : 
; 8787 :         if (!PxSocket_SetProtocolType(s, protocol_type))

  000a2	48 8b 54 24 30	 mov	 rdx, QWORD PTR protocol_type$[rsp]
  000a7	48 8b bb 00 02
	00 00		 mov	 rdi, QWORD PTR [rbx+512]
  000ae	48 8b cb	 mov	 rcx, rbx
  000b1	e8 00 00 00 00	 call	 PxSocket_SetProtocolType
  000b6	85 c0		 test	 eax, eax

; 8788 :             return NULL;

  000b8	74 30		 je	 SHORT $LN16@async_regi

; 8789 : 
; 8790 :         if (PxSocket_IS_CLIENT(s))

  000ba	f6 83 f4 01 00
	00 01		 test	 BYTE PTR [rbx+500], 1
  000c1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PxSocket_Connect
  000c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PxSocketServer_Start
  000cf	48 0f 45 c8	 cmovne	 rcx, rax

; 8791 :             cb = PxSocket_Connect;
; 8792 :         else
; 8793 :             cb = PxSocketServer_Start;
; 8794 : 
; 8795 :         if (!TrySubmitThreadpoolCallback(cb, c, NULL)) {

  000d3	45 33 c0	 xor	 r8d, r8d
  000d6	48 8b d7	 mov	 rdx, rdi
  000d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TrySubmitThreadpoolCallback
  000df	85 c0		 test	 eax, eax
  000e1	75 14		 jne	 SHORT $LN2@async_regi

; 8796 :             PyErr_SetFromWindowsErr(0);

  000e3	33 c9		 xor	 ecx, ecx
  000e5	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
$LN16@async_regi:

; 8797 :             return NULL;

  000ea	33 c0		 xor	 eax, eax

; 8808 :     }
; 8809 : }

  000ec	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000f1	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000f5	5f		 pop	 rdi
  000f6	c3		 ret	 0
$LN2@async_regi:

; 8798 :         }
; 8799 : 
; 8800 :         Py_INCREF(transport);

  000f7	48 8b 4c 24 68	 mov	 rcx, QWORD PTR transport$[rsp]
  000fc	e8 00 00 00 00	 call	 _Py_IncRef

; 8801 :         Py_INCREF(protocol_type);

  00101	48 8b 4c 24 30	 mov	 rcx, QWORD PTR protocol_type$[rsp]
  00106	e8 00 00 00 00	 call	 _Py_IncRef

; 8802 : 
; 8803 :         Py_RETURN_NONE;

  0010b	e8 00 00 00 00	 call	 _Py_PXCTX
  00110	85 c0		 test	 eax, eax
  00112	75 3c		 jne	 SHORT $LN13@async_regi
  00114	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  0011b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00122	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00129	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0012f	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00137	e8 00 00 00 00	 call	 _PyParallel_Guard
  0013c	85 c0		 test	 eax, eax
  0013e	75 09		 jne	 SHORT $LN12@async_regi
  00140	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00147	74 07		 je	 SHORT $LN13@async_regi
$LN12@async_regi:
  00149	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN13@async_regi:
  00150	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 8808 :     }
; 8809 : }

  00157	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0015c	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00160	5f		 pop	 rdi
  00161	c3		 ret	 0
_async_register ENDP
_TEXT	ENDS
END
