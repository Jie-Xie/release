; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_07HLOOKDPL@_codecs?$AA@			; `string'
PUBLIC	??_C@_0N@FDEJOILE@lookup_error?$AA@		; `string'
PUBLIC	??_C@_0P@LJBCPEIO@register_error?$AA@		; `string'
PUBLIC	??_C@_0BB@JOJINJLI@code_page_decode?$AA@	; `string'
PUBLIC	??_C@_0BB@FCCICCMP@code_page_encode?$AA@	; `string'
PUBLIC	??_C@_0M@IINEDKEP@mbcs_decode?$AA@		; `string'
PUBLIC	??_C@_0M@EEGEMBDI@mbcs_encode?$AA@		; `string'
PUBLIC	??_C@_0BC@FNHAIHFO@readbuffer_encode?$AA@	; `string'
PUBLIC	??_C@_0O@PLABBJMF@charmap_build?$AA@		; `string'
PUBLIC	??_C@_0P@MLHMCICK@charmap_decode?$AA@		; `string'
PUBLIC	??_C@_0P@HMMNDFN@charmap_encode?$AA@		; `string'
PUBLIC	??_C@_0N@CFHLAAHN@ascii_decode?$AA@		; `string'
PUBLIC	??_C@_0N@OJMLPLAK@ascii_encode?$AA@		; `string'
PUBLIC	??_C@_0P@MDDBILAC@latin_1_decode?$AA@		; `string'
PUBLIC	??_C@_0P@PIBHAHF@latin_1_encode?$AA@		; `string'
PUBLIC	??_C@_0BK@JBIIPGL@raw_unicode_escape_decode?$AA@ ; `string'
PUBLIC	??_C@_0BK@MFKIHEBM@raw_unicode_escape_encode?$AA@ ; `string'
PUBLIC	??_C@_0BI@PHPKMMHC@unicode_internal_decode?$AA@	; `string'
PUBLIC	??_C@_0BI@DLEKDHAF@unicode_internal_encode?$AA@	; `string'
PUBLIC	??_C@_0BG@LAIDAKGG@unicode_escape_decode?$AA@	; `string'
PUBLIC	??_C@_0BG@HMDDPBBB@unicode_escape_encode?$AA@	; `string'
PUBLIC	??_C@_0BB@CIBBJCJL@utf_32_ex_decode?$AA@	; `string'
PUBLIC	??_C@_0BB@JHECCMME@utf_32_be_decode?$AA@	; `string'
PUBLIC	??_C@_0BB@IJILBMHH@utf_32_le_decode?$AA@	; `string'
PUBLIC	??_C@_0O@NEKKHNME@utf_32_decode?$AA@		; `string'
PUBLIC	??_C@_0BB@FLPCNHLD@utf_32_be_encode?$AA@	; `string'
PUBLIC	??_C@_0BB@EFDLOHAA@utf_32_le_encode?$AA@	; `string'
PUBLIC	??_C@_0O@BIBKIGLD@utf_32_encode?$AA@		; `string'
PUBLIC	??_C@_0BB@ELELBMKP@utf_16_ex_decode?$AA@	; `string'
PUBLIC	??_C@_0BB@PEBIKCPA@utf_16_be_decode?$AA@	; `string'
PUBLIC	??_C@_0BB@OKNBJCED@utf_16_le_decode?$AA@	; `string'
PUBLIC	??_C@_0O@INLDPMPF@utf_16_decode?$AA@		; `string'
PUBLIC	??_C@_0BB@DIKIFJIH@utf_16_be_encode?$AA@	; `string'
PUBLIC	??_C@_0BB@CGGBGJDE@utf_16_le_encode?$AA@	; `string'
PUBLIC	??_C@_0O@EBADAHIC@utf_16_encode?$AA@		; `string'
PUBLIC	??_C@_0N@ILHHOBGH@utf_7_decode?$AA@		; `string'
PUBLIC	??_C@_0N@EHMHBKBA@utf_7_encode?$AA@		; `string'
PUBLIC	??_C@_0N@FEMOCOLG@utf_8_decode?$AA@		; `string'
PUBLIC	??_C@_0N@JIHONFMB@utf_8_encode?$AA@		; `string'
PUBLIC	??_C@_0O@EOGKMAOG@escape_decode?$AA@		; `string'
PUBLIC	??_C@_0O@ICNKDLJB@escape_encode?$AA@		; `string'
PUBLIC	??_C@_06KPNAMAEI@decode?$AA@			; `string'
PUBLIC	??_C@_06GDGADLDP@encode?$AA@			; `string'
PUBLIC	??_C@_06FNGHPIEM@lookup?$AA@			; `string'
PUBLIC	??_C@_08DHHIDNEP@register?$AA@			; `string'
;	COMDAT ??_C@_07HLOOKDPL@_codecs?$AA@
CONST	SEGMENT
??_C@_07HLOOKDPL@_codecs?$AA@ DB '_codecs', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FDEJOILE@lookup_error?$AA@
CONST	SEGMENT
??_C@_0N@FDEJOILE@lookup_error?$AA@ DB 'lookup_error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LJBCPEIO@register_error?$AA@
CONST	SEGMENT
??_C@_0P@LJBCPEIO@register_error?$AA@ DB 'register_error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JOJINJLI@code_page_decode?$AA@
CONST	SEGMENT
??_C@_0BB@JOJINJLI@code_page_decode?$AA@ DB 'code_page_decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCCICCMP@code_page_encode?$AA@
CONST	SEGMENT
??_C@_0BB@FCCICCMP@code_page_encode?$AA@ DB 'code_page_encode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IINEDKEP@mbcs_decode?$AA@
CONST	SEGMENT
??_C@_0M@IINEDKEP@mbcs_decode?$AA@ DB 'mbcs_decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EEGEMBDI@mbcs_encode?$AA@
CONST	SEGMENT
??_C@_0M@EEGEMBDI@mbcs_encode?$AA@ DB 'mbcs_encode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FNHAIHFO@readbuffer_encode?$AA@
CONST	SEGMENT
??_C@_0BC@FNHAIHFO@readbuffer_encode?$AA@ DB 'readbuffer_encode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PLABBJMF@charmap_build?$AA@
CONST	SEGMENT
??_C@_0O@PLABBJMF@charmap_build?$AA@ DB 'charmap_build', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MLHMCICK@charmap_decode?$AA@
CONST	SEGMENT
??_C@_0P@MLHMCICK@charmap_decode?$AA@ DB 'charmap_decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HMMNDFN@charmap_encode?$AA@
CONST	SEGMENT
??_C@_0P@HMMNDFN@charmap_encode?$AA@ DB 'charmap_encode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CFHLAAHN@ascii_decode?$AA@
CONST	SEGMENT
??_C@_0N@CFHLAAHN@ascii_decode?$AA@ DB 'ascii_decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OJMLPLAK@ascii_encode?$AA@
CONST	SEGMENT
??_C@_0N@OJMLPLAK@ascii_encode?$AA@ DB 'ascii_encode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MDDBILAC@latin_1_decode?$AA@
CONST	SEGMENT
??_C@_0P@MDDBILAC@latin_1_decode?$AA@ DB 'latin_1_decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PIBHAHF@latin_1_encode?$AA@
CONST	SEGMENT
??_C@_0P@PIBHAHF@latin_1_encode?$AA@ DB 'latin_1_encode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JBIIPGL@raw_unicode_escape_decode?$AA@
CONST	SEGMENT
??_C@_0BK@JBIIPGL@raw_unicode_escape_decode?$AA@ DB 'raw_unicode_escape_d'
	DB	'ecode', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MFKIHEBM@raw_unicode_escape_encode?$AA@
CONST	SEGMENT
??_C@_0BK@MFKIHEBM@raw_unicode_escape_encode?$AA@ DB 'raw_unicode_escape_'
	DB	'encode', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PHPKMMHC@unicode_internal_decode?$AA@
CONST	SEGMENT
??_C@_0BI@PHPKMMHC@unicode_internal_decode?$AA@ DB 'unicode_internal_deco'
	DB	'de', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DLEKDHAF@unicode_internal_encode?$AA@
CONST	SEGMENT
??_C@_0BI@DLEKDHAF@unicode_internal_encode?$AA@ DB 'unicode_internal_enco'
	DB	'de', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LAIDAKGG@unicode_escape_decode?$AA@
CONST	SEGMENT
??_C@_0BG@LAIDAKGG@unicode_escape_decode?$AA@ DB 'unicode_escape_decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HMDDPBBB@unicode_escape_encode?$AA@
CONST	SEGMENT
??_C@_0BG@HMDDPBBB@unicode_escape_encode?$AA@ DB 'unicode_escape_encode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CIBBJCJL@utf_32_ex_decode?$AA@
CONST	SEGMENT
??_C@_0BB@CIBBJCJL@utf_32_ex_decode?$AA@ DB 'utf_32_ex_decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JHECCMME@utf_32_be_decode?$AA@
CONST	SEGMENT
??_C@_0BB@JHECCMME@utf_32_be_decode?$AA@ DB 'utf_32_be_decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IJILBMHH@utf_32_le_decode?$AA@
CONST	SEGMENT
??_C@_0BB@IJILBMHH@utf_32_le_decode?$AA@ DB 'utf_32_le_decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NEKKHNME@utf_32_decode?$AA@
CONST	SEGMENT
??_C@_0O@NEKKHNME@utf_32_decode?$AA@ DB 'utf_32_decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FLPCNHLD@utf_32_be_encode?$AA@
CONST	SEGMENT
??_C@_0BB@FLPCNHLD@utf_32_be_encode?$AA@ DB 'utf_32_be_encode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EFDLOHAA@utf_32_le_encode?$AA@
CONST	SEGMENT
??_C@_0BB@EFDLOHAA@utf_32_le_encode?$AA@ DB 'utf_32_le_encode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BIBKIGLD@utf_32_encode?$AA@
CONST	SEGMENT
??_C@_0O@BIBKIGLD@utf_32_encode?$AA@ DB 'utf_32_encode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@ELELBMKP@utf_16_ex_decode?$AA@
CONST	SEGMENT
??_C@_0BB@ELELBMKP@utf_16_ex_decode?$AA@ DB 'utf_16_ex_decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PEBIKCPA@utf_16_be_decode?$AA@
CONST	SEGMENT
??_C@_0BB@PEBIKCPA@utf_16_be_decode?$AA@ DB 'utf_16_be_decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OKNBJCED@utf_16_le_decode?$AA@
CONST	SEGMENT
??_C@_0BB@OKNBJCED@utf_16_le_decode?$AA@ DB 'utf_16_le_decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@INLDPMPF@utf_16_decode?$AA@
CONST	SEGMENT
??_C@_0O@INLDPMPF@utf_16_decode?$AA@ DB 'utf_16_decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DIKIFJIH@utf_16_be_encode?$AA@
CONST	SEGMENT
??_C@_0BB@DIKIFJIH@utf_16_be_encode?$AA@ DB 'utf_16_be_encode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CGGBGJDE@utf_16_le_encode?$AA@
CONST	SEGMENT
??_C@_0BB@CGGBGJDE@utf_16_le_encode?$AA@ DB 'utf_16_le_encode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EBADAHIC@utf_16_encode?$AA@
CONST	SEGMENT
??_C@_0O@EBADAHIC@utf_16_encode?$AA@ DB 'utf_16_encode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@ILHHOBGH@utf_7_decode?$AA@
CONST	SEGMENT
??_C@_0N@ILHHOBGH@utf_7_decode?$AA@ DB 'utf_7_decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EHMHBKBA@utf_7_encode?$AA@
CONST	SEGMENT
??_C@_0N@EHMHBKBA@utf_7_encode?$AA@ DB 'utf_7_encode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FEMOCOLG@utf_8_decode?$AA@
CONST	SEGMENT
??_C@_0N@FEMOCOLG@utf_8_decode?$AA@ DB 'utf_8_decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JIHONFMB@utf_8_encode?$AA@
CONST	SEGMENT
??_C@_0N@JIHONFMB@utf_8_encode?$AA@ DB 'utf_8_encode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EOGKMAOG@escape_decode?$AA@
CONST	SEGMENT
??_C@_0O@EOGKMAOG@escape_decode?$AA@ DB 'escape_decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ICNKDLJB@escape_encode?$AA@
CONST	SEGMENT
??_C@_0O@ICNKDLJB@escape_encode?$AA@ DB 'escape_encode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06KPNAMAEI@decode?$AA@
CONST	SEGMENT
??_C@_06KPNAMAEI@decode?$AA@ DB 'decode', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GDGADLDP@encode?$AA@
CONST	SEGMENT
??_C@_06GDGADLDP@encode?$AA@ DB 'encode', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FNGHPIEM@lookup?$AA@
CONST	SEGMENT
??_C@_06FNGHPIEM@lookup?$AA@ DB 'lookup', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DHHIDNEP@register?$AA@
CONST	SEGMENT
??_C@_08DHHIDNEP@register?$AA@ DB 'register', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
register__doc__ DB 'register(search_function)', 0aH, 0aH, 'Register a cod'
	DB	'ec search function. Search functions are expected to take', 0aH
	DB	'one argument, the encoding name in all lower case letters, an'
	DB	'd return', 0aH, 'a tuple of functions (encoder, decoder, stre'
	DB	'am_reader, stream_writer)', 0aH, '(or a CodecInfo object).', 00H
	ORG $+8
lookup__doc__ DB 'lookup(encoding) -> CodecInfo', 0aH, 0aH, 'Looks up a c'
	DB	'odec tuple in the Python codec registry and returns', 0aH, 'a'
	DB	' CodecInfo object.', 00H
	ORG $+13
encode__doc__ DB 'encode(obj, [encoding[,errors]]) -> object', 0aH, 0aH, 'E'
	DB	'ncodes obj using the codec registered for encoding. encoding '
	DB	'defaults', 0aH, 'to the default encoding. errors may be given'
	DB	' to set a different error', 0aH, 'handling scheme. Default is'
	DB	' ''strict'' meaning that encoding errors raise', 0aH, 'a Valu'
	DB	'eError. Other possible values are ''ignore'', ''replace'' and'
	DB	0aH, '''xmlcharrefreplace'' as well as any other name register'
	DB	'ed with', 0aH, 'codecs.register_error that can handle ValueEr'
	DB	'rors.', 00H
	ORG $+14
decode__doc__ DB 'decode(obj, [encoding[,errors]]) -> object', 0aH, 0aH, 'D'
	DB	'ecodes obj using the codec registered for encoding. encoding '
	DB	'defaults', 0aH, 'to the default encoding. errors may be given'
	DB	' to set a different error', 0aH, 'handling scheme. Default is'
	DB	' ''strict'' meaning that encoding errors raise', 0aH, 'a Valu'
	DB	'eError. Other possible values are ''ignore'' and ''replace''', 0aH
	DB	'as well as any other name registered with codecs.register_err'
	DB	'or that is', 0aH, 'able to handle ValueErrors.', 00H
	ORG $+12
register_error__doc__ DB 'register_error(errors, handler)', 0aH, 0aH, 'Re'
	DB	'gister the specified error handler under the name', 0aH, 'err'
	DB	'ors. handler must be a callable object, that', 0aH, 'will be '
	DB	'called with an exception instance containing', 0aH, 'informat'
	DB	'ion about the location of the encoding/decoding', 0aH, 'error'
	DB	' and must return a (replacement, new position) tuple.', 00H
	ORG $+3
lookup_error__doc__ DB 'lookup_error(errors) -> handler', 0aH, 0aH, 'Retu'
	DB	'rn the error handler for the specified error handling name', 0aH
	DB	'or raise a LookupError, if no handler exists under this name.'
	DB	00H
	ORG $+2
_codecs_functions DQ FLAT:??_C@_08DHHIDNEP@register?$AA@
	DQ	FLAT:codec_register
	DD	08H
	ORG $+4
	DQ	FLAT:register__doc__
	DQ	FLAT:??_C@_06FNGHPIEM@lookup?$AA@
	DQ	FLAT:codec_lookup
	DD	01H
	ORG $+4
	DQ	FLAT:lookup__doc__
	DQ	FLAT:??_C@_06GDGADLDP@encode?$AA@
	DQ	FLAT:codec_encode
	DD	01H
	ORG $+4
	DQ	FLAT:encode__doc__
	DQ	FLAT:??_C@_06KPNAMAEI@decode?$AA@
	DQ	FLAT:codec_decode
	DD	01H
	ORG $+4
	DQ	FLAT:decode__doc__
	DQ	FLAT:??_C@_0O@ICNKDLJB@escape_encode?$AA@
	DQ	FLAT:escape_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0O@EOGKMAOG@escape_decode?$AA@
	DQ	FLAT:escape_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0N@JIHONFMB@utf_8_encode?$AA@
	DQ	FLAT:utf_8_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0N@FEMOCOLG@utf_8_decode?$AA@
	DQ	FLAT:utf_8_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0N@EHMHBKBA@utf_7_encode?$AA@
	DQ	FLAT:utf_7_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0N@ILHHOBGH@utf_7_decode?$AA@
	DQ	FLAT:utf_7_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0O@EBADAHIC@utf_16_encode?$AA@
	DQ	FLAT:utf_16_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BB@CGGBGJDE@utf_16_le_encode?$AA@
	DQ	FLAT:utf_16_le_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BB@DIKIFJIH@utf_16_be_encode?$AA@
	DQ	FLAT:utf_16_be_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0O@INLDPMPF@utf_16_decode?$AA@
	DQ	FLAT:utf_16_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BB@OKNBJCED@utf_16_le_decode?$AA@
	DQ	FLAT:utf_16_le_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BB@PEBIKCPA@utf_16_be_decode?$AA@
	DQ	FLAT:utf_16_be_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BB@ELELBMKP@utf_16_ex_decode?$AA@
	DQ	FLAT:utf_16_ex_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0O@BIBKIGLD@utf_32_encode?$AA@
	DQ	FLAT:utf_32_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BB@EFDLOHAA@utf_32_le_encode?$AA@
	DQ	FLAT:utf_32_le_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BB@FLPCNHLD@utf_32_be_encode?$AA@
	DQ	FLAT:utf_32_be_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0O@NEKKHNME@utf_32_decode?$AA@
	DQ	FLAT:utf_32_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BB@IJILBMHH@utf_32_le_decode?$AA@
	DQ	FLAT:utf_32_le_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BB@JHECCMME@utf_32_be_decode?$AA@
	DQ	FLAT:utf_32_be_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BB@CIBBJCJL@utf_32_ex_decode?$AA@
	DQ	FLAT:utf_32_ex_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BG@HMDDPBBB@unicode_escape_encode?$AA@
	DQ	FLAT:unicode_escape_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BG@LAIDAKGG@unicode_escape_decode?$AA@
	DQ	FLAT:unicode_escape_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BI@DLEKDHAF@unicode_internal_encode?$AA@
	DQ	FLAT:unicode_internal_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BI@PHPKMMHC@unicode_internal_decode?$AA@
	DQ	FLAT:unicode_internal_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BK@MFKIHEBM@raw_unicode_escape_encode?$AA@
	DQ	FLAT:raw_unicode_escape_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BK@JBIIPGL@raw_unicode_escape_decode?$AA@
	DQ	FLAT:raw_unicode_escape_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0P@PIBHAHF@latin_1_encode?$AA@
	DQ	FLAT:latin_1_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0P@MDDBILAC@latin_1_decode?$AA@
	DQ	FLAT:latin_1_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0N@OJMLPLAK@ascii_encode?$AA@
	DQ	FLAT:ascii_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0N@CFHLAAHN@ascii_decode?$AA@
	DQ	FLAT:ascii_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0P@HMMNDFN@charmap_encode?$AA@
	DQ	FLAT:charmap_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0P@MLHMCICK@charmap_decode?$AA@
	DQ	FLAT:charmap_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0O@PLABBJMF@charmap_build?$AA@
	DQ	FLAT:charmap_build
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BC@FNHAIHFO@readbuffer_encode?$AA@
	DQ	FLAT:readbuffer_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0M@EEGEMBDI@mbcs_encode?$AA@
	DQ	FLAT:mbcs_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0M@IINEDKEP@mbcs_decode?$AA@
	DQ	FLAT:mbcs_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BB@FCCICCMP@code_page_encode?$AA@
	DQ	FLAT:code_page_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BB@JOJINJLI@code_page_decode?$AA@
	DQ	FLAT:code_page_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0P@LJBCPEIO@register_error?$AA@
	DQ	FLAT:register_error
	DD	01H
	ORG $+4
	DQ	FLAT:register_error__doc__
	DQ	FLAT:??_C@_0N@FDEJOILE@lookup_error?$AA@
	DQ	FLAT:lookup_error
	DD	01H
	ORG $+4
	DQ	FLAT:lookup_error__doc__
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
codecsmodule DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_07HLOOKDPL@_codecs?$AA@
	DQ	0000000000000000H
	DQ	ffffffffffffffffH
	DQ	FLAT:_codecs_functions
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyCodec_Register:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$codec_register DD imagerel codec_register
	DD	imagerel codec_register+104
	DD	imagerel $unwind$codec_register
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$codec_register DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_codecsmodule.c
xdata	ENDS
;	COMDAT codec_register
_TEXT	SEGMENT
self$ = 64
search_function$ = 72
codec_register PROC					; COMDAT

; 57   : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 58   :     if (PyCodec_Register(search_function))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	e8 00 00 00 00	 call	 PyCodec_Register
  0000c	85 c0		 test	 eax, eax
  0000e	74 07		 je	 SHORT $LN1@codec_regi

; 59   :         return NULL;

  00010	33 c0		 xor	 eax, eax

; 62   : }

  00012	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00016	c3		 ret	 0
$LN1@codec_regi:

; 60   : 
; 61   :     Py_RETURN_NONE;

  00017	e8 00 00 00 00	 call	 _Py_PXCTX
  0001c	85 c0		 test	 eax, eax
  0001e	75 3c		 jne	 SHORT $LN5@codec_regi
  00020	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00035	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0003b	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00043	e8 00 00 00 00	 call	 _PyParallel_Guard
  00048	85 c0		 test	 eax, eax
  0004a	75 09		 jne	 SHORT $LN4@codec_regi
  0004c	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00053	74 07		 je	 SHORT $LN5@codec_regi
$LN4@codec_regi:
  00055	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN5@codec_regi:
  0005c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 62   : }

  00063	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00067	c3		 ret	 0
codec_register ENDP
_TEXT	ENDS
PUBLIC	??_C@_08PLCBIDDJ@s?3lookup?$AA@			; `string'
EXTRN	_PyCodec_Lookup:PROC
EXTRN	_PyArg_ParseTuple_SizeT:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$codec_lookup DD imagerel codec_lookup
	DD	imagerel codec_lookup+50
	DD	imagerel $unwind$codec_lookup
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$codec_lookup DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_08PLCBIDDJ@s?3lookup?$AA@
CONST	SEGMENT
??_C@_08PLCBIDDJ@s?3lookup?$AA@ DB 's:lookup', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT codec_lookup
_TEXT	SEGMENT
self$ = 48
args$ = 56
encoding$ = 64
codec_lookup PROC					; COMDAT

; 72   : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 73   :     char *encoding;
; 74   : 
; 75   :     if (!PyArg_ParseTuple(args, "s:lookup", &encoding))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 44 24 40	 lea	 r8, QWORD PTR encoding$[rsp]
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08PLCBIDDJ@s?3lookup?$AA@
  00013	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00018	85 c0		 test	 eax, eax
  0001a	75 07		 jne	 SHORT $LN1@codec_look

; 76   :         return NULL;

  0001c	33 c0		 xor	 eax, eax

; 79   : }

  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	c3		 ret	 0
$LN1@codec_look:

; 77   : 
; 78   :     return _PyCodec_Lookup(encoding);

  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR encoding$[rsp]
  00028	e8 00 00 00 00	 call	 _PyCodec_Lookup

; 79   : }

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
codec_lookup ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@PDELEEKF@O?$HMss?3encode?$AA@		; `string'
EXTRN	PyCodec_Encode:PROC
EXTRN	PyUnicode_GetDefaultEncoding:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$codec_encode DD imagerel codec_encode
	DD	imagerel codec_encode+108
	DD	imagerel $unwind$codec_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$codec_encode DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_0M@PDELEEKF@O?$HMss?3encode?$AA@
CONST	SEGMENT
??_C@_0M@PDELEEKF@O?$HMss?3encode?$AA@ DB 'O|ss:encode', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT codec_encode
_TEXT	SEGMENT
v$ = 48
self$ = 80
args$ = 88
encoding$ = 96
errors$ = 104
codec_encode PROC					; COMDAT

; 93   : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 94   :     const char *encoding = NULL;

  00004	33 c9		 xor	 ecx, ecx
  00006	48 8b c2	 mov	 rax, rdx

; 95   :     const char *errors = NULL;
; 96   :     PyObject *v;
; 97   : 
; 98   :     if (!PyArg_ParseTuple(args, "O|ss:encode", &v, &encoding, &errors))

  00009	4c 8d 4c 24 60	 lea	 r9, QWORD PTR encoding$[rsp]
  0000e	48 89 4c 24 60	 mov	 QWORD PTR encoding$[rsp], rcx
  00013	48 89 4c 24 68	 mov	 QWORD PTR errors$[rsp], rcx
  00018	48 8d 4c 24 68	 lea	 rcx, QWORD PTR errors$[rsp]
  0001d	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00022	4c 8d 44 24 30	 lea	 r8, QWORD PTR v$[rsp]
  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@PDELEEKF@O?$HMss?3encode?$AA@
  0002e	48 8b c8	 mov	 rcx, rax
  00031	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00036	85 c0		 test	 eax, eax
  00038	75 07		 jne	 SHORT $LN2@codec_enco

; 99   :         return NULL;

  0003a	33 c0		 xor	 eax, eax

; 106  : }

  0003c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00040	c3		 ret	 0
$LN2@codec_enco:

; 100  : 
; 101  :     if (encoding == NULL)

  00041	48 8b 44 24 60	 mov	 rax, QWORD PTR encoding$[rsp]
  00046	48 85 c0	 test	 rax, rax
  00049	75 0a		 jne	 SHORT $LN1@codec_enco

; 102  :         encoding = PyUnicode_GetDefaultEncoding();

  0004b	e8 00 00 00 00	 call	 PyUnicode_GetDefaultEncoding
  00050	48 89 44 24 60	 mov	 QWORD PTR encoding$[rsp], rax
$LN1@codec_enco:

; 103  : 
; 104  :     /* Encode via the codec registry */
; 105  :     return PyCodec_Encode(v, encoding, errors);

  00055	4c 8b 44 24 68	 mov	 r8, QWORD PTR errors$[rsp]
  0005a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR v$[rsp]
  0005f	48 8b d0	 mov	 rdx, rax
  00062	e8 00 00 00 00	 call	 PyCodec_Encode

; 106  : }

  00067	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0006b	c3		 ret	 0
codec_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@DPPLLPNC@O?$HMss?3decode?$AA@		; `string'
EXTRN	PyCodec_Decode:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$codec_decode DD imagerel codec_decode
	DD	imagerel codec_decode+108
	DD	imagerel $unwind$codec_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$codec_decode DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_0M@DPPLLPNC@O?$HMss?3decode?$AA@
CONST	SEGMENT
??_C@_0M@DPPLLPNC@O?$HMss?3decode?$AA@ DB 'O|ss:decode', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT codec_decode
_TEXT	SEGMENT
v$ = 48
self$ = 80
args$ = 88
encoding$ = 96
errors$ = 104
codec_decode PROC					; COMDAT

; 120  : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 121  :     const char *encoding = NULL;

  00004	33 c9		 xor	 ecx, ecx
  00006	48 8b c2	 mov	 rax, rdx

; 122  :     const char *errors = NULL;
; 123  :     PyObject *v;
; 124  : 
; 125  :     if (!PyArg_ParseTuple(args, "O|ss:decode", &v, &encoding, &errors))

  00009	4c 8d 4c 24 60	 lea	 r9, QWORD PTR encoding$[rsp]
  0000e	48 89 4c 24 60	 mov	 QWORD PTR encoding$[rsp], rcx
  00013	48 89 4c 24 68	 mov	 QWORD PTR errors$[rsp], rcx
  00018	48 8d 4c 24 68	 lea	 rcx, QWORD PTR errors$[rsp]
  0001d	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00022	4c 8d 44 24 30	 lea	 r8, QWORD PTR v$[rsp]
  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@DPPLLPNC@O?$HMss?3decode?$AA@
  0002e	48 8b c8	 mov	 rcx, rax
  00031	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00036	85 c0		 test	 eax, eax
  00038	75 07		 jne	 SHORT $LN2@codec_deco

; 126  :         return NULL;

  0003a	33 c0		 xor	 eax, eax

; 133  : }

  0003c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00040	c3		 ret	 0
$LN2@codec_deco:

; 127  : 
; 128  :     if (encoding == NULL)

  00041	48 8b 44 24 60	 mov	 rax, QWORD PTR encoding$[rsp]
  00046	48 85 c0	 test	 rax, rax
  00049	75 0a		 jne	 SHORT $LN1@codec_deco

; 129  :         encoding = PyUnicode_GetDefaultEncoding();

  0004b	e8 00 00 00 00	 call	 PyUnicode_GetDefaultEncoding
  00050	48 89 44 24 60	 mov	 QWORD PTR encoding$[rsp], rax
$LN1@codec_deco:

; 130  : 
; 131  :     /* Decode via the codec registry */
; 132  :     return PyCodec_Decode(v, encoding, errors);

  00055	4c 8b 44 24 68	 mov	 r8, QWORD PTR errors$[rsp]
  0005a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR v$[rsp]
  0005f	48 8b d0	 mov	 rdx, rax
  00062	e8 00 00 00 00	 call	 PyCodec_Decode

; 133  : }

  00067	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0006b	c3		 ret	 0
codec_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_02IAAGKKDJ@On?$AA@			; `string'
EXTRN	_Py_BuildValue_SizeT:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$codec_tuple DD imagerel codec_tuple
	DD	imagerel codec_tuple+70
	DD	imagerel $unwind$codec_tuple
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$codec_tuple DD 042801H
	DD	063428H
	DD	070023206H
xdata	ENDS
;	COMDAT ??_C@_02IAAGKKDJ@On?$AA@
CONST	SEGMENT
??_C@_02IAAGKKDJ@On?$AA@ DB 'On', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT codec_tuple
_TEXT	SEGMENT
unicode$ = 48
len$ = 56
codec_tuple PROC					; COMDAT

; 140  : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b f9	 mov	 rdi, rcx

; 141  :     PyObject *v;
; 142  :     if (unicode == NULL)

  00009	48 85 c9	 test	 rcx, rcx
  0000c	75 08		 jne	 SHORT $LN1@codec_tupl

; 143  :         return NULL;

  0000e	33 c0		 xor	 eax, eax

; 147  : }

  00010	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00014	5f		 pop	 rdi
  00015	c3		 ret	 0
$LN1@codec_tupl:

; 144  :     v = Py_BuildValue("On", unicode, len);

  00016	4c 8b c2	 mov	 r8, rdx
  00019	48 8b d1	 mov	 rdx, rcx
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02IAAGKKDJ@On?$AA@
  00023	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00028	e8 00 00 00 00	 call	 _Py_BuildValue_SizeT

; 145  :     Py_DECREF(unicode);

  0002d	48 8b cf	 mov	 rcx, rdi
  00030	48 8b d8	 mov	 rbx, rax
  00033	e8 00 00 00 00	 call	 _Py_DecRef

; 146  :     return v;

  00038	48 8b c3	 mov	 rax, rbx
  0003b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 147  : }

  00040	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00044	5f		 pop	 rdi
  00045	c3		 ret	 0
codec_tuple ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@FIFAEBFD@s?$CD?$HMz?3escape_decode?$AA@ ; `string'
EXTRN	PyBytes_DecodeEscape:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$escape_decode DD imagerel escape_decode
	DD	imagerel escape_decode+112
	DD	imagerel $unwind$escape_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$escape_decode DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_0BD@FIFAEBFD@s?$CD?$HMz?3escape_decode?$AA@
CONST	SEGMENT
??_C@_0BD@FIFAEBFD@s?$CD?$HMz?3escape_decode?$AA@ DB 's#|z:escape_decode', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT escape_decode
_TEXT	SEGMENT
data$ = 48
self$ = 80
args$ = 88
errors$ = 96
size$ = 104
escape_decode PROC					; COMDAT

; 153  : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00004	48 8b c2	 mov	 rax, rdx

; 154  :     const char *errors = NULL;
; 155  :     const char *data;
; 156  :     Py_ssize_t size;
; 157  : 
; 158  :     if (!PyArg_ParseTuple(args, "s#|z:escape_decode",
; 159  :                           &data, &size, &errors))

  00007	48 8d 4c 24 60	 lea	 rcx, QWORD PTR errors$[rsp]
  0000c	4c 8d 4c 24 68	 lea	 r9, QWORD PTR size$[rsp]
  00011	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00016	4c 8d 44 24 30	 lea	 r8, QWORD PTR data$[rsp]
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@FIFAEBFD@s?$CD?$HMz?3escape_decode?$AA@
  00022	48 8b c8	 mov	 rcx, rax
  00025	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0
  0002e	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN1@escape_dec

; 160  :         return NULL;

  00037	33 c0		 xor	 eax, eax

; 163  : }

  00039	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0003d	c3		 ret	 0
$LN1@escape_dec:

; 161  :     return codec_tuple(PyBytes_DecodeEscape(data, size, errors, 0, NULL),
; 162  :                        size);

  0003e	4c 8b 44 24 60	 mov	 r8, QWORD PTR errors$[rsp]
  00043	48 8b 54 24 68	 mov	 rdx, QWORD PTR size$[rsp]
  00048	48 8b 4c 24 30	 mov	 rcx, QWORD PTR data$[rsp]
  0004d	45 33 c9	 xor	 r9d, r9d
  00050	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00059	e8 00 00 00 00	 call	 PyBytes_DecodeEscape
  0005e	48 8b 54 24 68	 mov	 rdx, QWORD PTR size$[rsp]
  00063	48 8b c8	 mov	 rcx, rax
  00066	e8 00 00 00 00	 call	 codec_tuple

; 163  : }

  0006b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0006f	c3		 ret	 0
escape_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@EIHKFEIP@string?5is?5too?5large?5to?5encode?$AA@ ; `string'
PUBLIC	??_C@_0BD@EEDLIMNO@O?$CB?$HMz?3escape_encode?$AA@ ; `string'
EXTRN	_PyBytes_Resize:PROC
EXTRN	Py_hexdigits:QWORD
EXTRN	PyBytes_FromStringAndSize:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_OverflowError:QWORD
EXTRN	PyBytes_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$escape_encode DD imagerel escape_encode
	DD	imagerel escape_encode+70
	DD	imagerel $unwind$escape_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$escape_encode DD imagerel escape_encode+70
	DD	imagerel escape_encode+126
	DD	imagerel $chain$0$escape_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$escape_encode DD imagerel escape_encode+126
	DD	imagerel escape_encode+385
	DD	imagerel $chain$2$escape_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$escape_encode DD 020021H
	DD	0a7400H
	DD	imagerel escape_encode
	DD	imagerel escape_encode+70
	DD	imagerel $unwind$escape_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$escape_encode DD 020521H
	DD	0a7405H
	DD	imagerel escape_encode
	DD	imagerel escape_encode+70
	DD	imagerel $unwind$escape_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$escape_encode DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT ??_C@_0BO@EIHKFEIP@string?5is?5too?5large?5to?5encode?$AA@
CONST	SEGMENT
??_C@_0BO@EIHKFEIP@string?5is?5too?5large?5to?5encode?$AA@ DB 'string is '
	DB	'too large to encode', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EEDLIMNO@O?$CB?$HMz?3escape_encode?$AA@
CONST	SEGMENT
??_C@_0BD@EEDLIMNO@O?$CB?$HMz?3escape_encode?$AA@ DB 'O!|z:escape_encode', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT escape_encode
_TEXT	SEGMENT
errors$ = 48
self$ = 80
args$ = 88
v$ = 96
str$ = 104
escape_encode PROC					; COMDAT

; 168  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00006	48 8b c2	 mov	 rax, rdx

; 169  :     PyObject *str;
; 170  :     Py_ssize_t size;
; 171  :     Py_ssize_t newsize;
; 172  :     const char *errors = NULL;
; 173  :     PyObject *v;
; 174  : 
; 175  :     if (!PyArg_ParseTuple(args, "O!|z:escape_encode",
; 176  :                           &PyBytes_Type, &str, &errors))

  00009	48 8d 4c 24 30	 lea	 rcx, QWORD PTR errors$[rsp]
  0000e	4c 8d 4c 24 68	 lea	 r9, QWORD PTR str$[rsp]
  00013	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00018	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyBytes_Type
  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@EEDLIMNO@O?$CB?$HMz?3escape_encode?$AA@
  00026	33 db		 xor	 ebx, ebx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	48 89 5c 24 30	 mov	 QWORD PTR errors$[rsp], rbx
  00030	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00035	85 c0		 test	 eax, eax
  00037	75 08		 jne	 SHORT $LN20@escape_enc

; 177  :         return NULL;

  00039	33 c0		 xor	 eax, eax

; 224  : }

  0003b	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0003f	5b		 pop	 rbx
  00040	c3		 ret	 0
$LN20@escape_enc:

; 178  : 
; 179  :     size = PyBytes_GET_SIZE(str);

  00041	48 8b 44 24 68	 mov	 rax, QWORD PTR str$[rsp]
  00046	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  0004b	48 8b 78 60	 mov	 rdi, QWORD PTR [rax+96]

; 180  :     if (size > PY_SSIZE_T_MAX / 4) {

  0004f	48 b8 ff ff ff
	ff ff ff ff 1f	 mov	 rax, 2305843009213693951 ; 1fffffffffffffffH
  00059	48 3b f8	 cmp	 rdi, rax
  0005c	7e 20		 jle	 SHORT $LN19@escape_enc

; 181  :         PyErr_SetString(PyExc_OverflowError,
; 182  :             "string is too large to encode");

  0005e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  00065	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@EIHKFEIP@string?5is?5too?5large?5to?5encode?$AA@
  0006c	e8 00 00 00 00	 call	 PyErr_SetString
$LN27@escape_enc:

; 183  :             return NULL;

  00071	33 c0		 xor	 eax, eax
  00073	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 224  : }

  00078	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0007c	5b		 pop	 rbx
  0007d	c3		 ret	 0
$LN19@escape_enc:

; 184  :     }
; 185  :     newsize = 4*size;

  0007e	48 8d 14 bd 00
	00 00 00	 lea	 rdx, QWORD PTR [rdi*4]

; 186  :     v = PyBytes_FromStringAndSize(NULL, newsize);

  00086	33 c9		 xor	 ecx, ecx
  00088	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  0008d	48 89 44 24 60	 mov	 QWORD PTR v$[rsp], rax

; 187  : 
; 188  :     if (v == NULL) {

  00092	48 85 c0	 test	 rax, rax

; 189  :         return NULL;

  00095	74 da		 je	 SHORT $LN27@escape_enc

; 190  :     }
; 191  :     else {
; 192  :         register Py_ssize_t i;
; 193  :         register char c;
; 194  :         register char *p = PyBytes_AS_STRING(v);

  00097	48 8d 50 78	 lea	 rdx, QWORD PTR [rax+120]

; 195  : 
; 196  :         for (i = 0; i < size; i++) {

  0009b	48 85 ff	 test	 rdi, rdi
  0009e	0f 8e a7 00 00
	00		 jle	 $LN14@escape_enc
  000a4	66 66 66 66 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL16@escape_enc:

; 197  :             /* There's at least enough room for a hex escape */
; 198  :             assert(newsize - (p - PyBytes_AS_STRING(v)) >= 4);
; 199  :             c = PyBytes_AS_STRING(str)[i];

  000b0	48 8b 44 24 68	 mov	 rax, QWORD PTR str$[rsp]
  000b5	44 0f b6 44 03
	78		 movzx	 r8d, BYTE PTR [rbx+rax+120]

; 200  :             if (c == '\'' || c == '\\')

  000bb	41 80 f8 27	 cmp	 r8b, 39			; 00000027H
  000bf	74 73		 je	 SHORT $LN12@escape_enc
  000c1	41 80 f8 5c	 cmp	 r8b, 92			; 0000005cH
  000c5	74 6d		 je	 SHORT $LN12@escape_enc

; 202  :             else if (c == '\t')

  000c7	41 80 f8 09	 cmp	 r8b, 9
  000cb	75 07		 jne	 SHORT $LN10@escape_enc

; 203  :                 *p++ = '\\', *p++ = 't';

  000cd	66 c7 02 5c 74	 mov	 WORD PTR [rdx], 29788	; 0000745cH
  000d2	eb 67		 jmp	 SHORT $LN26@escape_enc
$LN10@escape_enc:

; 204  :             else if (c == '\n')

  000d4	41 80 f8 0a	 cmp	 r8b, 10
  000d8	75 07		 jne	 SHORT $LN8@escape_enc

; 205  :                 *p++ = '\\', *p++ = 'n';

  000da	66 c7 02 5c 6e	 mov	 WORD PTR [rdx], 28252	; 00006e5cH
  000df	eb 5a		 jmp	 SHORT $LN26@escape_enc
$LN8@escape_enc:

; 206  :             else if (c == '\r')

  000e1	41 80 f8 0d	 cmp	 r8b, 13
  000e5	75 07		 jne	 SHORT $LN6@escape_enc

; 207  :                 *p++ = '\\', *p++ = 'r';

  000e7	66 c7 02 5c 72	 mov	 WORD PTR [rdx], 29276	; 0000725cH
  000ec	eb 4d		 jmp	 SHORT $LN26@escape_enc
$LN6@escape_enc:

; 208  :             else if (c < ' ' || c >= 0x7f) {

  000ee	41 8d 40 e0	 lea	 eax, DWORD PTR [r8-32]
  000f2	3c 5e		 cmp	 al, 94			; 0000005eH
  000f4	77 08		 ja	 SHORT $LN3@escape_enc

; 215  :                 *p++ = c;

  000f6	44 88 02	 mov	 BYTE PTR [rdx], r8b
  000f9	48 ff c2	 inc	 rdx
  000fc	eb 41		 jmp	 SHORT $LN15@escape_enc
$LN3@escape_enc:

; 209  :                 *p++ = '\\';

  000fe	66 c7 02 5c 78	 mov	 WORD PTR [rdx], 30812	; 0000785cH

; 210  :                 *p++ = 'x';
; 211  :                 *p++ = Py_hexdigits[(c & 0xf0) >> 4];

  00103	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Py_hexdigits
  0010a	41 0f b6 c8	 movzx	 ecx, r8b
  0010e	48 c1 e9 04	 shr	 rcx, 4
  00112	0f b6 0c 01	 movzx	 ecx, BYTE PTR [rcx+rax]
  00116	88 4a 02	 mov	 BYTE PTR [rdx+2], cl

; 212  :                 *p++ = Py_hexdigits[c & 0xf];

  00119	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Py_hexdigits
  00120	49 0f be c8	 movsx	 rcx, r8b
  00124	83 e1 0f	 and	 ecx, 15
  00127	48 83 c2 04	 add	 rdx, 4
  0012b	0f b6 0c 01	 movzx	 ecx, BYTE PTR [rcx+rax]
  0012f	88 4a ff	 mov	 BYTE PTR [rdx-1], cl

; 213  :             }
; 214  :             else

  00132	eb 0b		 jmp	 SHORT $LN15@escape_enc
$LN12@escape_enc:

; 201  :                 *p++ = '\\', *p++ = c;

  00134	c6 02 5c	 mov	 BYTE PTR [rdx], 92	; 0000005cH
  00137	44 88 42 01	 mov	 BYTE PTR [rdx+1], r8b
$LN26@escape_enc:
  0013b	48 83 c2 02	 add	 rdx, 2
$LN15@escape_enc:

; 195  : 
; 196  :         for (i = 0; i < size; i++) {

  0013f	48 ff c3	 inc	 rbx
  00142	48 3b df	 cmp	 rbx, rdi
  00145	0f 8c 65 ff ff
	ff		 jl	 $LL16@escape_enc
$LN14@escape_enc:

; 216  :         }
; 217  :         *p = '\0';

  0014b	c6 02 00	 mov	 BYTE PTR [rdx], 0

; 218  :         if (_PyBytes_Resize(&v, (p - PyBytes_AS_STRING(v)))) {

  0014e	48 2b 54 24 60	 sub	 rdx, QWORD PTR v$[rsp]
  00153	48 8d 4c 24 60	 lea	 rcx, QWORD PTR v$[rsp]
  00158	48 83 ea 78	 sub	 rdx, 120		; 00000078H
  0015c	e8 00 00 00 00	 call	 _PyBytes_Resize
  00161	85 c0		 test	 eax, eax

; 219  :             return NULL;

  00163	0f 85 08 ff ff
	ff		 jne	 $LN27@escape_enc

; 220  :         }
; 221  :     }
; 222  : 
; 223  :     return codec_tuple(v, size);

  00169	48 8b 4c 24 60	 mov	 rcx, QWORD PTR v$[rsp]
  0016e	48 8b d7	 mov	 rdx, rdi
  00171	e8 00 00 00 00	 call	 codec_tuple
  00176	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 224  : }

  0017b	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0017f	5b		 pop	 rbx
  00180	c3		 ret	 0
escape_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@KGAFPAAE@O?$HMz?3unicode_internal_decode?$AA@ ; `string'
EXTRN	_PyUnicode_DecodeUnicodeInternal:PROC
EXTRN	PyObject_AsReadBuffer:PROC
EXTRN	_PyUnicode_Ready:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$unicode_internal_decode DD imagerel unicode_internal_decode
	DD	imagerel unicode_internal_decode+171
	DD	imagerel $unwind$unicode_internal_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unicode_internal_decode DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0BM@KGAFPAAE@O?$HMz?3unicode_internal_decode?$AA@
CONST	SEGMENT
??_C@_0BM@KGAFPAAE@O?$HMz?3unicode_internal_decode?$AA@ DB 'O|z:unicode_i'
	DB	'nternal_decode', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT unicode_internal_decode
_TEXT	SEGMENT
size$ = 32
data$ = 40
self$ = 64
args$ = 72
obj$ = 80
errors$ = 88
unicode_internal_decode PROC				; COMDAT

; 231  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 232  :     PyObject *obj;
; 233  :     const char *errors = NULL;
; 234  :     const char *data;
; 235  :     Py_ssize_t size;
; 236  : 
; 237  :     if (!PyArg_ParseTuple(args, "O|z:unicode_internal_decode",
; 238  :                           &obj, &errors))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 4c 24 58	 lea	 r9, QWORD PTR errors$[rsp]
  0000c	4c 8d 44 24 50	 lea	 r8, QWORD PTR obj$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@KGAFPAAE@O?$HMz?3unicode_internal_decode?$AA@
  00018	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0
  00021	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00026	85 c0		 test	 eax, eax
  00028	75 07		 jne	 SHORT $LN5@unicode_in
$LN12@unicode_in:

; 239  :         return NULL;

  0002a	33 c0		 xor	 eax, eax

; 253  :     }
; 254  : }

  0002c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00030	c3		 ret	 0
$LN5@unicode_in:

; 240  : 
; 241  :     if (PyUnicode_Check(obj)) {

  00031	48 8b 4c 24 50	 mov	 rcx, QWORD PTR obj$[rsp]
  00036	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0003a	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  00044	74 2c		 je	 SHORT $LN4@unicode_in

; 242  :         if (PyUnicode_READY(obj) < 0)

  00046	f6 41 70 80	 test	 BYTE PTR [rcx+112], 128	; 00000080H
  0004a	75 0e		 jne	 SHORT $LN3@unicode_in
  0004c	e8 00 00 00 00	 call	 _PyUnicode_Ready
  00051	85 c0		 test	 eax, eax

; 243  :             return NULL;

  00053	78 d5		 js	 SHORT $LN12@unicode_in
  00055	48 8b 4c 24 50	 mov	 rcx, QWORD PTR obj$[rsp]
$LN3@unicode_in:

; 244  :         Py_INCREF(obj);

  0005a	e8 00 00 00 00	 call	 _Py_IncRef

; 245  :         return codec_tuple(obj, PyUnicode_GET_LENGTH(obj));

  0005f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR obj$[rsp]
  00064	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]

; 250  : 
; 251  :         return codec_tuple(_PyUnicode_DecodeUnicodeInternal(data, size, errors),
; 252  :                            size);

  00068	e8 00 00 00 00	 call	 codec_tuple

; 253  :     }
; 254  : }

  0006d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00071	c3		 ret	 0
$LN4@unicode_in:

; 246  :     }
; 247  :     else {
; 248  :         if (PyObject_AsReadBuffer(obj, (const void **)&data, &size))

  00072	4c 8d 44 24 20	 lea	 r8, QWORD PTR size$[rsp]
  00077	48 8d 54 24 28	 lea	 rdx, QWORD PTR data$[rsp]
  0007c	e8 00 00 00 00	 call	 PyObject_AsReadBuffer
  00081	85 c0		 test	 eax, eax

; 249  :             return NULL;

  00083	75 a5		 jne	 SHORT $LN12@unicode_in

; 250  : 
; 251  :         return codec_tuple(_PyUnicode_DecodeUnicodeInternal(data, size, errors),
; 252  :                            size);

  00085	4c 8b 44 24 58	 mov	 r8, QWORD PTR errors$[rsp]
  0008a	48 8b 54 24 20	 mov	 rdx, QWORD PTR size$[rsp]
  0008f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR data$[rsp]
  00094	e8 00 00 00 00	 call	 _PyUnicode_DecodeUnicodeInternal
  00099	48 8b 54 24 20	 mov	 rdx, QWORD PTR size$[rsp]
  0009e	48 8b c8	 mov	 rcx, rax
  000a1	e8 00 00 00 00	 call	 codec_tuple

; 253  :     }
; 254  : }

  000a6	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000aa	c3		 ret	 0
unicode_internal_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@CAJBEMGK@y?$CK?$HMzi?3utf_7_decode?$AA@ ; `string'
EXTRN	PyBuffer_Release:PROC
EXTRN	PyUnicode_DecodeUTF7Stateful:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf_7_decode DD imagerel utf_7_decode
	DD	imagerel utf_7_decode+154
	DD	imagerel $unwind$utf_7_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_7_decode DD 030b01H
	DD	012010bH
	DD	03004H
xdata	ENDS
;	COMDAT ??_C@_0BD@CAJBEMGK@y?$CK?$HMzi?3utf_7_decode?$AA@
CONST	SEGMENT
??_C@_0BD@CAJBEMGK@y?$CK?$HMzi?3utf_7_decode?$AA@ DB 'y*|zi:utf_7_decode', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT utf_7_decode
_TEXT	SEGMENT
consumed$ = 48
pbuf$ = 64
self$ = 160
args$ = 168
final$ = 176
errors$ = 184
utf_7_decode PROC					; COMDAT

; 259  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	53		 push	 rbx
  00004	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H

; 260  :     Py_buffer pbuf;
; 261  :     const char *errors = NULL;
; 262  :     int final = 0;
; 263  :     Py_ssize_t consumed;
; 264  :     PyObject *decoded = NULL;
; 265  : 
; 266  :     if (!PyArg_ParseTuple(args, "y*|zi:utf_7_decode",
; 267  :                           &pbuf, &errors, &final))

  0000b	49 8d 4b 18	 lea	 rcx, QWORD PTR [r11+24]
  0000f	48 8b c2	 mov	 rax, rdx
  00012	33 db		 xor	 ebx, ebx
  00014	49 89 4b 88	 mov	 QWORD PTR [r11-120], rcx
  00018	4d 8d 4b 20	 lea	 r9, QWORD PTR [r11+32]
  0001c	4d 8d 43 a8	 lea	 r8, QWORD PTR [r11-88]
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@CAJBEMGK@y?$CK?$HMzi?3utf_7_decode?$AA@
  00027	48 8b c8	 mov	 rcx, rax
  0002a	49 89 5b 20	 mov	 QWORD PTR [r11+32], rbx
  0002e	41 89 5b 18	 mov	 DWORD PTR [r11+24], ebx
  00032	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00037	85 c0		 test	 eax, eax
  00039	75 0b		 jne	 SHORT $LN2@utf_7_deco
$LN5@utf_7_deco:

; 268  :         return NULL;

  0003b	33 c0		 xor	 eax, eax

; 277  : }

  0003d	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  00044	5b		 pop	 rbx
  00045	c3		 ret	 0
$LN2@utf_7_deco:

; 269  :     consumed = pbuf.len;
; 270  : 
; 271  :     decoded = PyUnicode_DecodeUTF7Stateful(pbuf.buf, pbuf.len, errors,
; 272  :                                            final ? NULL : &consumed);

  00046	39 9c 24 b0 00
	00 00		 cmp	 DWORD PTR final$[rsp], ebx
  0004d	48 8b 54 24 50	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  00052	4c 8b 84 24 b8
	00 00 00	 mov	 r8, QWORD PTR errors$[rsp]
  0005a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pbuf$[rsp]
  0005f	4c 8d 4c 24 30	 lea	 r9, QWORD PTR consumed$[rsp]
  00064	48 89 54 24 30	 mov	 QWORD PTR consumed$[rsp], rdx
  00069	4c 0f 45 cb	 cmovne	 r9, rbx
  0006d	e8 00 00 00 00	 call	 PyUnicode_DecodeUTF7Stateful

; 273  :     PyBuffer_Release(&pbuf);

  00072	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pbuf$[rsp]
  00077	48 8b d8	 mov	 rbx, rax
  0007a	e8 00 00 00 00	 call	 PyBuffer_Release

; 274  :     if (decoded == NULL)

  0007f	48 85 db	 test	 rbx, rbx

; 275  :         return NULL;

  00082	74 b7		 je	 SHORT $LN5@utf_7_deco

; 276  :     return codec_tuple(decoded, consumed);

  00084	48 8b 54 24 30	 mov	 rdx, QWORD PTR consumed$[rsp]
  00089	48 8b cb	 mov	 rcx, rbx
  0008c	e8 00 00 00 00	 call	 codec_tuple

; 277  : }

  00091	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  00098	5b		 pop	 rbx
  00099	c3		 ret	 0
utf_7_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@PPCIIDLL@y?$CK?$HMzi?3utf_8_decode?$AA@ ; `string'
EXTRN	PyUnicode_DecodeUTF8Stateful:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf_8_decode DD imagerel utf_8_decode
	DD	imagerel utf_8_decode+154
	DD	imagerel $unwind$utf_8_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_8_decode DD 030b01H
	DD	012010bH
	DD	03004H
xdata	ENDS
;	COMDAT ??_C@_0BD@PPCIIDLL@y?$CK?$HMzi?3utf_8_decode?$AA@
CONST	SEGMENT
??_C@_0BD@PPCIIDLL@y?$CK?$HMzi?3utf_8_decode?$AA@ DB 'y*|zi:utf_8_decode', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT utf_8_decode
_TEXT	SEGMENT
consumed$ = 48
pbuf$ = 64
self$ = 160
args$ = 168
final$ = 176
errors$ = 184
utf_8_decode PROC					; COMDAT

; 282  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	53		 push	 rbx
  00004	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H

; 283  :     Py_buffer pbuf;
; 284  :     const char *errors = NULL;
; 285  :     int final = 0;
; 286  :     Py_ssize_t consumed;
; 287  :     PyObject *decoded = NULL;
; 288  : 
; 289  :     if (!PyArg_ParseTuple(args, "y*|zi:utf_8_decode",
; 290  :                           &pbuf, &errors, &final))

  0000b	49 8d 4b 18	 lea	 rcx, QWORD PTR [r11+24]
  0000f	48 8b c2	 mov	 rax, rdx
  00012	33 db		 xor	 ebx, ebx
  00014	49 89 4b 88	 mov	 QWORD PTR [r11-120], rcx
  00018	4d 8d 4b 20	 lea	 r9, QWORD PTR [r11+32]
  0001c	4d 8d 43 a8	 lea	 r8, QWORD PTR [r11-88]
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@PPCIIDLL@y?$CK?$HMzi?3utf_8_decode?$AA@
  00027	48 8b c8	 mov	 rcx, rax
  0002a	49 89 5b 20	 mov	 QWORD PTR [r11+32], rbx
  0002e	41 89 5b 18	 mov	 DWORD PTR [r11+24], ebx
  00032	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00037	85 c0		 test	 eax, eax
  00039	75 0b		 jne	 SHORT $LN2@utf_8_deco
$LN5@utf_8_deco:

; 291  :         return NULL;

  0003b	33 c0		 xor	 eax, eax

; 300  : }

  0003d	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  00044	5b		 pop	 rbx
  00045	c3		 ret	 0
$LN2@utf_8_deco:

; 292  :     consumed = pbuf.len;
; 293  : 
; 294  :     decoded = PyUnicode_DecodeUTF8Stateful(pbuf.buf, pbuf.len, errors,
; 295  :                                            final ? NULL : &consumed);

  00046	39 9c 24 b0 00
	00 00		 cmp	 DWORD PTR final$[rsp], ebx
  0004d	48 8b 54 24 50	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  00052	4c 8b 84 24 b8
	00 00 00	 mov	 r8, QWORD PTR errors$[rsp]
  0005a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pbuf$[rsp]
  0005f	4c 8d 4c 24 30	 lea	 r9, QWORD PTR consumed$[rsp]
  00064	48 89 54 24 30	 mov	 QWORD PTR consumed$[rsp], rdx
  00069	4c 0f 45 cb	 cmovne	 r9, rbx
  0006d	e8 00 00 00 00	 call	 PyUnicode_DecodeUTF8Stateful

; 296  :     PyBuffer_Release(&pbuf);

  00072	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pbuf$[rsp]
  00077	48 8b d8	 mov	 rbx, rax
  0007a	e8 00 00 00 00	 call	 PyBuffer_Release

; 297  :     if (decoded == NULL)

  0007f	48 85 db	 test	 rbx, rbx

; 298  :         return NULL;

  00082	74 b7		 je	 SHORT $LN5@utf_8_deco

; 299  :     return codec_tuple(decoded, consumed);

  00084	48 8b 54 24 30	 mov	 rdx, QWORD PTR consumed$[rsp]
  00089	48 8b cb	 mov	 rcx, rbx
  0008c	e8 00 00 00 00	 call	 codec_tuple

; 300  : }

  00091	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  00098	5b		 pop	 rbx
  00099	c3		 ret	 0
utf_8_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@PDKJGGOF@y?$CK?$HMzi?3utf_16_decode?$AA@ ; `string'
EXTRN	PyUnicode_DecodeUTF16Stateful:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf_16_decode DD imagerel utf_16_decode
	DD	imagerel utf_16_decode+168
	DD	imagerel $unwind$utf_16_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_16_decode DD 030b01H
	DD	012010bH
	DD	03004H
xdata	ENDS
;	COMDAT ??_C@_0BE@PDKJGGOF@y?$CK?$HMzi?3utf_16_decode?$AA@
CONST	SEGMENT
??_C@_0BE@PDKJGGOF@y?$CK?$HMzi?3utf_16_decode?$AA@ DB 'y*|zi:utf_16_decod'
	DB	'e', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT utf_16_decode
_TEXT	SEGMENT
errors$ = 48
consumed$ = 56
pbuf$ = 64
self$ = 160
args$ = 168
final$ = 176
byteorder$ = 184
utf_16_decode PROC					; COMDAT

; 305  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	53		 push	 rbx
  00004	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H

; 306  :     Py_buffer pbuf;
; 307  :     const char *errors = NULL;
; 308  :     int byteorder = 0;
; 309  :     int final = 0;
; 310  :     Py_ssize_t consumed;
; 311  :     PyObject *decoded;
; 312  : 
; 313  :     if (!PyArg_ParseTuple(args, "y*|zi:utf_16_decode",
; 314  :                           &pbuf, &errors, &final))

  0000b	49 8d 4b 18	 lea	 rcx, QWORD PTR [r11+24]
  0000f	48 8b c2	 mov	 rax, rdx
  00012	33 db		 xor	 ebx, ebx
  00014	49 89 4b 88	 mov	 QWORD PTR [r11-120], rcx
  00018	4d 8d 4b 98	 lea	 r9, QWORD PTR [r11-104]
  0001c	4d 8d 43 a8	 lea	 r8, QWORD PTR [r11-88]
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@PDKJGGOF@y?$CK?$HMzi?3utf_16_decode?$AA@
  00027	48 8b c8	 mov	 rcx, rax
  0002a	49 89 5b 98	 mov	 QWORD PTR [r11-104], rbx
  0002e	41 89 5b 20	 mov	 DWORD PTR [r11+32], ebx
  00032	41 89 5b 18	 mov	 DWORD PTR [r11+24], ebx
  00036	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0003b	85 c0		 test	 eax, eax
  0003d	75 0b		 jne	 SHORT $LN2@utf_16_dec
$LN5@utf_16_dec:

; 315  :         return NULL;

  0003f	33 c0		 xor	 eax, eax

; 323  : }

  00041	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
$LN2@utf_16_dec:

; 316  :     consumed = pbuf.len; /* This is overwritten unless final is true. */
; 317  :     decoded = PyUnicode_DecodeUTF16Stateful(pbuf.buf, pbuf.len, errors,
; 318  :                                         &byteorder, final ? NULL : &consumed);

  0004a	39 9c 24 b0 00
	00 00		 cmp	 DWORD PTR final$[rsp], ebx
  00051	48 8b 54 24 50	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  00056	4c 8b 44 24 30	 mov	 r8, QWORD PTR errors$[rsp]
  0005b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pbuf$[rsp]
  00060	48 8d 44 24 38	 lea	 rax, QWORD PTR consumed$[rsp]
  00065	4c 8d 8c 24 b8
	00 00 00	 lea	 r9, QWORD PTR byteorder$[rsp]
  0006d	48 0f 45 c3	 cmovne	 rax, rbx
  00071	48 89 54 24 38	 mov	 QWORD PTR consumed$[rsp], rdx
  00076	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0007b	e8 00 00 00 00	 call	 PyUnicode_DecodeUTF16Stateful

; 319  :     PyBuffer_Release(&pbuf);

  00080	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pbuf$[rsp]
  00085	48 8b d8	 mov	 rbx, rax
  00088	e8 00 00 00 00	 call	 PyBuffer_Release

; 320  :     if (decoded == NULL)

  0008d	48 85 db	 test	 rbx, rbx

; 321  :         return NULL;

  00090	74 ad		 je	 SHORT $LN5@utf_16_dec

; 322  :     return codec_tuple(decoded, consumed);

  00092	48 8b 54 24 38	 mov	 rdx, QWORD PTR consumed$[rsp]
  00097	48 8b cb	 mov	 rcx, rbx
  0009a	e8 00 00 00 00	 call	 codec_tuple

; 323  : }

  0009f	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  000a6	5b		 pop	 rbx
  000a7	c3		 ret	 0
utf_16_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@IADLKKKH@y?$CK?$HMzi?3utf_16_le_decode?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf_16_le_decode DD imagerel utf_16_le_decode
	DD	imagerel utf_16_le_decode+172
	DD	imagerel $unwind$utf_16_le_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_16_le_decode DD 030b01H
	DD	012010bH
	DD	03004H
xdata	ENDS
;	COMDAT ??_C@_0BH@IADLKKKH@y?$CK?$HMzi?3utf_16_le_decode?$AA@
CONST	SEGMENT
??_C@_0BH@IADLKKKH@y?$CK?$HMzi?3utf_16_le_decode?$AA@ DB 'y*|zi:utf_16_le'
	DB	'_decode', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT utf_16_le_decode
_TEXT	SEGMENT
errors$ = 48
consumed$ = 56
pbuf$ = 64
self$ = 160
args$ = 168
final$ = 176
byteorder$ = 184
utf_16_le_decode PROC					; COMDAT

; 328  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	53		 push	 rbx
  00004	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H

; 329  :     Py_buffer pbuf;
; 330  :     const char *errors = NULL;
; 331  :     int byteorder = -1;
; 332  :     int final = 0;
; 333  :     Py_ssize_t consumed;
; 334  :     PyObject *decoded = NULL;
; 335  : 
; 336  :     if (!PyArg_ParseTuple(args, "y*|zi:utf_16_le_decode",
; 337  :                           &pbuf, &errors, &final))

  0000b	49 8d 4b 18	 lea	 rcx, QWORD PTR [r11+24]
  0000f	48 8b c2	 mov	 rax, rdx
  00012	33 db		 xor	 ebx, ebx
  00014	49 89 4b 88	 mov	 QWORD PTR [r11-120], rcx
  00018	4d 8d 4b 98	 lea	 r9, QWORD PTR [r11-104]
  0001c	4d 8d 43 a8	 lea	 r8, QWORD PTR [r11-88]
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IADLKKKH@y?$CK?$HMzi?3utf_16_le_decode?$AA@
  00027	48 8b c8	 mov	 rcx, rax
  0002a	49 89 5b 98	 mov	 QWORD PTR [r11-104], rbx
  0002e	41 c7 43 20 ff
	ff ff ff	 mov	 DWORD PTR [r11+32], -1
  00036	41 89 5b 18	 mov	 DWORD PTR [r11+24], ebx
  0003a	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0003f	85 c0		 test	 eax, eax
  00041	75 0b		 jne	 SHORT $LN2@utf_16_le_
$LN5@utf_16_le_:

; 338  :         return NULL;

  00043	33 c0		 xor	 eax, eax

; 347  : }

  00045	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  0004c	5b		 pop	 rbx
  0004d	c3		 ret	 0
$LN2@utf_16_le_:

; 339  : 
; 340  :     consumed = pbuf.len; /* This is overwritten unless final is true. */
; 341  :     decoded = PyUnicode_DecodeUTF16Stateful(pbuf.buf, pbuf.len, errors,
; 342  :         &byteorder, final ? NULL : &consumed);

  0004e	39 9c 24 b0 00
	00 00		 cmp	 DWORD PTR final$[rsp], ebx
  00055	48 8b 54 24 50	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  0005a	4c 8b 44 24 30	 mov	 r8, QWORD PTR errors$[rsp]
  0005f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pbuf$[rsp]
  00064	48 8d 44 24 38	 lea	 rax, QWORD PTR consumed$[rsp]
  00069	4c 8d 8c 24 b8
	00 00 00	 lea	 r9, QWORD PTR byteorder$[rsp]
  00071	48 0f 45 c3	 cmovne	 rax, rbx
  00075	48 89 54 24 38	 mov	 QWORD PTR consumed$[rsp], rdx
  0007a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0007f	e8 00 00 00 00	 call	 PyUnicode_DecodeUTF16Stateful

; 343  :     PyBuffer_Release(&pbuf);

  00084	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pbuf$[rsp]
  00089	48 8b d8	 mov	 rbx, rax
  0008c	e8 00 00 00 00	 call	 PyBuffer_Release

; 344  :     if (decoded == NULL)

  00091	48 85 db	 test	 rbx, rbx

; 345  :         return NULL;

  00094	74 ad		 je	 SHORT $LN5@utf_16_le_

; 346  :     return codec_tuple(decoded, consumed);

  00096	48 8b 54 24 38	 mov	 rdx, QWORD PTR consumed$[rsp]
  0009b	48 8b cb	 mov	 rcx, rbx
  0009e	e8 00 00 00 00	 call	 codec_tuple

; 347  : }

  000a3	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  000aa	5b		 pop	 rbx
  000ab	c3		 ret	 0
utf_16_le_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@JOPCJKBE@y?$CK?$HMzi?3utf_16_be_decode?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf_16_be_decode DD imagerel utf_16_be_decode
	DD	imagerel utf_16_be_decode+172
	DD	imagerel $unwind$utf_16_be_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_16_be_decode DD 030b01H
	DD	012010bH
	DD	03004H
xdata	ENDS
;	COMDAT ??_C@_0BH@JOPCJKBE@y?$CK?$HMzi?3utf_16_be_decode?$AA@
CONST	SEGMENT
??_C@_0BH@JOPCJKBE@y?$CK?$HMzi?3utf_16_be_decode?$AA@ DB 'y*|zi:utf_16_be'
	DB	'_decode', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT utf_16_be_decode
_TEXT	SEGMENT
errors$ = 48
consumed$ = 56
pbuf$ = 64
self$ = 160
args$ = 168
final$ = 176
byteorder$ = 184
utf_16_be_decode PROC					; COMDAT

; 352  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	53		 push	 rbx
  00004	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H

; 353  :     Py_buffer pbuf;
; 354  :     const char *errors = NULL;
; 355  :     int byteorder = 1;
; 356  :     int final = 0;
; 357  :     Py_ssize_t consumed;
; 358  :     PyObject *decoded = NULL;
; 359  : 
; 360  :     if (!PyArg_ParseTuple(args, "y*|zi:utf_16_be_decode",
; 361  :                           &pbuf, &errors, &final))

  0000b	49 8d 4b 18	 lea	 rcx, QWORD PTR [r11+24]
  0000f	48 8b c2	 mov	 rax, rdx
  00012	33 db		 xor	 ebx, ebx
  00014	49 89 4b 88	 mov	 QWORD PTR [r11-120], rcx
  00018	4d 8d 4b 98	 lea	 r9, QWORD PTR [r11-104]
  0001c	4d 8d 43 a8	 lea	 r8, QWORD PTR [r11-88]
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@JOPCJKBE@y?$CK?$HMzi?3utf_16_be_decode?$AA@
  00027	48 8b c8	 mov	 rcx, rax
  0002a	49 89 5b 98	 mov	 QWORD PTR [r11-104], rbx
  0002e	41 c7 43 20 01
	00 00 00	 mov	 DWORD PTR [r11+32], 1
  00036	41 89 5b 18	 mov	 DWORD PTR [r11+24], ebx
  0003a	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0003f	85 c0		 test	 eax, eax
  00041	75 0b		 jne	 SHORT $LN2@utf_16_be_
$LN5@utf_16_be_:

; 362  :         return NULL;

  00043	33 c0		 xor	 eax, eax

; 371  : }

  00045	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  0004c	5b		 pop	 rbx
  0004d	c3		 ret	 0
$LN2@utf_16_be_:

; 363  : 
; 364  :     consumed = pbuf.len; /* This is overwritten unless final is true. */
; 365  :     decoded = PyUnicode_DecodeUTF16Stateful(pbuf.buf, pbuf.len, errors,
; 366  :         &byteorder, final ? NULL : &consumed);

  0004e	39 9c 24 b0 00
	00 00		 cmp	 DWORD PTR final$[rsp], ebx
  00055	48 8b 54 24 50	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  0005a	4c 8b 44 24 30	 mov	 r8, QWORD PTR errors$[rsp]
  0005f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pbuf$[rsp]
  00064	48 8d 44 24 38	 lea	 rax, QWORD PTR consumed$[rsp]
  00069	4c 8d 8c 24 b8
	00 00 00	 lea	 r9, QWORD PTR byteorder$[rsp]
  00071	48 0f 45 c3	 cmovne	 rax, rbx
  00075	48 89 54 24 38	 mov	 QWORD PTR consumed$[rsp], rdx
  0007a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0007f	e8 00 00 00 00	 call	 PyUnicode_DecodeUTF16Stateful

; 367  :     PyBuffer_Release(&pbuf);

  00084	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pbuf$[rsp]
  00089	48 8b d8	 mov	 rbx, rax
  0008c	e8 00 00 00 00	 call	 PyBuffer_Release

; 368  :     if (decoded == NULL)

  00091	48 85 db	 test	 rbx, rbx

; 369  :         return NULL;

  00094	74 ad		 je	 SHORT $LN5@utf_16_be_

; 370  :     return codec_tuple(decoded, consumed);

  00096	48 8b 54 24 38	 mov	 rdx, QWORD PTR consumed$[rsp]
  0009b	48 8b cb	 mov	 rcx, rbx
  0009e	e8 00 00 00 00	 call	 codec_tuple

; 371  : }

  000a3	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  000aa	5b		 pop	 rbx
  000ab	c3		 ret	 0
utf_16_be_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_03OLLKFOEM@Oni?$AA@			; `string'
PUBLIC	??_C@_0BI@NOMOJOCK@y?$CK?$HMzii?3utf_16_ex_decode?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf_16_ex_decode DD imagerel utf_16_ex_decode
	DD	imagerel utf_16_ex_decode+121
	DD	imagerel $unwind$utf_16_ex_decode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$utf_16_ex_decode DD imagerel utf_16_ex_decode+121
	DD	imagerel utf_16_ex_decode+181
	DD	imagerel $chain$0$utf_16_ex_decode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$utf_16_ex_decode DD imagerel utf_16_ex_decode+181
	DD	imagerel utf_16_ex_decode+240
	DD	imagerel $chain$2$utf_16_ex_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$utf_16_ex_decode DD 020021H
	DD	0147400H
	DD	imagerel utf_16_ex_decode
	DD	imagerel utf_16_ex_decode+121
	DD	imagerel $unwind$utf_16_ex_decode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$utf_16_ex_decode DD 020821H
	DD	0147408H
	DD	imagerel utf_16_ex_decode
	DD	imagerel utf_16_ex_decode+121
	DD	imagerel $unwind$utf_16_ex_decode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_16_ex_decode DD 030b01H
	DD	012010bH
	DD	03004H
xdata	ENDS
;	COMDAT ??_C@_03OLLKFOEM@Oni?$AA@
CONST	SEGMENT
??_C@_03OLLKFOEM@Oni?$AA@ DB 'Oni', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NOMOJOCK@y?$CK?$HMzii?3utf_16_ex_decode?$AA@
CONST	SEGMENT
??_C@_0BI@NOMOJOCK@y?$CK?$HMzii?3utf_16_ex_decode?$AA@ DB 'y*|zii:utf_16_'
	DB	'ex_decode', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT utf_16_ex_decode
_TEXT	SEGMENT
errors$ = 48
consumed$ = 56
pbuf$ = 64
self$ = 160
args$ = 168
byteorder$ = 176
final$ = 184
utf_16_ex_decode PROC					; COMDAT

; 384  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	53		 push	 rbx
  00004	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H

; 385  :     Py_buffer pbuf;
; 386  :     const char *errors = NULL;
; 387  :     int byteorder = 0;
; 388  :     PyObject *unicode, *tuple;
; 389  :     int final = 0;
; 390  :     Py_ssize_t consumed;
; 391  : 
; 392  :     if (!PyArg_ParseTuple(args, "y*|zii:utf_16_ex_decode",
; 393  :                           &pbuf, &errors, &byteorder, &final))

  0000b	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  0000f	48 8b c2	 mov	 rax, rdx
  00012	33 db		 xor	 ebx, ebx
  00014	49 89 4b 90	 mov	 QWORD PTR [r11-112], rcx
  00018	49 8d 4b 18	 lea	 rcx, QWORD PTR [r11+24]
  0001c	4d 8d 4b 98	 lea	 r9, QWORD PTR [r11-104]
  00020	49 89 4b 88	 mov	 QWORD PTR [r11-120], rcx
  00024	4d 8d 43 a8	 lea	 r8, QWORD PTR [r11-88]
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NOMOJOCK@y?$CK?$HMzii?3utf_16_ex_decode?$AA@
  0002f	48 8b c8	 mov	 rcx, rax
  00032	49 89 5b 98	 mov	 QWORD PTR [r11-104], rbx
  00036	41 89 5b 18	 mov	 DWORD PTR [r11+24], ebx
  0003a	41 89 5b 20	 mov	 DWORD PTR [r11+32], ebx
  0003e	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00043	85 c0		 test	 eax, eax
  00045	75 0b		 jne	 SHORT $LN2@utf_16_ex_

; 394  :         return NULL;

  00047	33 c0		 xor	 eax, eax

; 404  : }

  00049	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  00050	5b		 pop	 rbx
  00051	c3		 ret	 0
$LN2@utf_16_ex_:

; 395  :     consumed = pbuf.len; /* This is overwritten unless final is true. */
; 396  :     unicode = PyUnicode_DecodeUTF16Stateful(pbuf.buf, pbuf.len, errors,
; 397  :                                         &byteorder, final ? NULL : &consumed);

  00052	39 9c 24 b8 00
	00 00		 cmp	 DWORD PTR final$[rsp], ebx
  00059	48 8b 54 24 50	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  0005e	4c 8b 44 24 30	 mov	 r8, QWORD PTR errors$[rsp]
  00063	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pbuf$[rsp]
  00068	48 8d 44 24 38	 lea	 rax, QWORD PTR consumed$[rsp]
  0006d	4c 8d 8c 24 b0
	00 00 00	 lea	 r9, QWORD PTR byteorder$[rsp]
  00075	48 0f 45 c3	 cmovne	 rax, rbx
  00079	48 89 bc 24 a0
	00 00 00	 mov	 QWORD PTR [rsp+160], rdi
  00081	48 89 54 24 38	 mov	 QWORD PTR consumed$[rsp], rdx
  00086	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0008b	e8 00 00 00 00	 call	 PyUnicode_DecodeUTF16Stateful

; 398  :     PyBuffer_Release(&pbuf);

  00090	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pbuf$[rsp]
  00095	48 8b f8	 mov	 rdi, rax
  00098	e8 00 00 00 00	 call	 PyBuffer_Release

; 399  :     if (unicode == NULL)

  0009d	48 85 ff	 test	 rdi, rdi
  000a0	75 13		 jne	 SHORT $LN1@utf_16_ex_

; 400  :         return NULL;

  000a2	33 c0		 xor	 eax, eax
  000a4	48 8b bc 24 a0
	00 00 00	 mov	 rdi, QWORD PTR [rsp+160]

; 404  : }

  000ac	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  000b3	5b		 pop	 rbx
  000b4	c3		 ret	 0
$LN1@utf_16_ex_:

; 401  :     tuple = Py_BuildValue("Oni", unicode, consumed, byteorder);

  000b5	44 8b 8c 24 b0
	00 00 00	 mov	 r9d, DWORD PTR byteorder$[rsp]
  000bd	4c 8b 44 24 38	 mov	 r8, QWORD PTR consumed$[rsp]
  000c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03OLLKFOEM@Oni?$AA@
  000c9	48 8b d7	 mov	 rdx, rdi
  000cc	e8 00 00 00 00	 call	 _Py_BuildValue_SizeT

; 402  :     Py_DECREF(unicode);

  000d1	48 8b cf	 mov	 rcx, rdi
  000d4	48 8b d8	 mov	 rbx, rax
  000d7	e8 00 00 00 00	 call	 _Py_DecRef
  000dc	48 8b bc 24 a0
	00 00 00	 mov	 rdi, QWORD PTR [rsp+160]

; 403  :     return tuple;

  000e4	48 8b c3	 mov	 rax, rbx

; 404  : }

  000e7	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  000ee	5b		 pop	 rbx
  000ef	c3		 ret	 0
utf_16_ex_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@KKLAOHNE@y?$CK?$HMzi?3utf_32_decode?$AA@ ; `string'
EXTRN	PyUnicode_DecodeUTF32Stateful:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf_32_decode DD imagerel utf_32_decode
	DD	imagerel utf_32_decode+168
	DD	imagerel $unwind$utf_32_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_32_decode DD 030b01H
	DD	012010bH
	DD	03004H
xdata	ENDS
;	COMDAT ??_C@_0BE@KKLAOHNE@y?$CK?$HMzi?3utf_32_decode?$AA@
CONST	SEGMENT
??_C@_0BE@KKLAOHNE@y?$CK?$HMzi?3utf_32_decode?$AA@ DB 'y*|zi:utf_32_decod'
	DB	'e', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT utf_32_decode
_TEXT	SEGMENT
errors$ = 48
consumed$ = 56
pbuf$ = 64
self$ = 160
args$ = 168
final$ = 176
byteorder$ = 184
utf_32_decode PROC					; COMDAT

; 409  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	53		 push	 rbx
  00004	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H

; 410  :     Py_buffer pbuf;
; 411  :     const char *errors = NULL;
; 412  :     int byteorder = 0;
; 413  :     int final = 0;
; 414  :     Py_ssize_t consumed;
; 415  :     PyObject *decoded;
; 416  : 
; 417  :     if (!PyArg_ParseTuple(args, "y*|zi:utf_32_decode",
; 418  :                           &pbuf, &errors, &final))

  0000b	49 8d 4b 18	 lea	 rcx, QWORD PTR [r11+24]
  0000f	48 8b c2	 mov	 rax, rdx
  00012	33 db		 xor	 ebx, ebx
  00014	49 89 4b 88	 mov	 QWORD PTR [r11-120], rcx
  00018	4d 8d 4b 98	 lea	 r9, QWORD PTR [r11-104]
  0001c	4d 8d 43 a8	 lea	 r8, QWORD PTR [r11-88]
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@KKLAOHNE@y?$CK?$HMzi?3utf_32_decode?$AA@
  00027	48 8b c8	 mov	 rcx, rax
  0002a	49 89 5b 98	 mov	 QWORD PTR [r11-104], rbx
  0002e	41 89 5b 20	 mov	 DWORD PTR [r11+32], ebx
  00032	41 89 5b 18	 mov	 DWORD PTR [r11+24], ebx
  00036	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0003b	85 c0		 test	 eax, eax
  0003d	75 0b		 jne	 SHORT $LN2@utf_32_dec
$LN5@utf_32_dec:

; 419  :         return NULL;

  0003f	33 c0		 xor	 eax, eax

; 427  : }

  00041	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
$LN2@utf_32_dec:

; 420  :     consumed = pbuf.len; /* This is overwritten unless final is true. */
; 421  :     decoded = PyUnicode_DecodeUTF32Stateful(pbuf.buf, pbuf.len, errors,
; 422  :                                         &byteorder, final ? NULL : &consumed);

  0004a	39 9c 24 b0 00
	00 00		 cmp	 DWORD PTR final$[rsp], ebx
  00051	48 8b 54 24 50	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  00056	4c 8b 44 24 30	 mov	 r8, QWORD PTR errors$[rsp]
  0005b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pbuf$[rsp]
  00060	48 8d 44 24 38	 lea	 rax, QWORD PTR consumed$[rsp]
  00065	4c 8d 8c 24 b8
	00 00 00	 lea	 r9, QWORD PTR byteorder$[rsp]
  0006d	48 0f 45 c3	 cmovne	 rax, rbx
  00071	48 89 54 24 38	 mov	 QWORD PTR consumed$[rsp], rdx
  00076	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0007b	e8 00 00 00 00	 call	 PyUnicode_DecodeUTF32Stateful

; 423  :     PyBuffer_Release(&pbuf);

  00080	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pbuf$[rsp]
  00085	48 8b d8	 mov	 rbx, rax
  00088	e8 00 00 00 00	 call	 PyBuffer_Release

; 424  :     if (decoded == NULL)

  0008d	48 85 db	 test	 rbx, rbx

; 425  :         return NULL;

  00090	74 ad		 je	 SHORT $LN5@utf_32_dec

; 426  :     return codec_tuple(decoded, consumed);

  00092	48 8b 54 24 38	 mov	 rdx, QWORD PTR consumed$[rsp]
  00097	48 8b cb	 mov	 rcx, rbx
  0009a	e8 00 00 00 00	 call	 codec_tuple

; 427  : }

  0009f	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  000a6	5b		 pop	 rbx
  000a7	c3		 ret	 0
utf_32_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@ODGBCEJD@y?$CK?$HMzi?3utf_32_le_decode?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf_32_le_decode DD imagerel utf_32_le_decode
	DD	imagerel utf_32_le_decode+172
	DD	imagerel $unwind$utf_32_le_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_32_le_decode DD 030b01H
	DD	012010bH
	DD	03004H
xdata	ENDS
;	COMDAT ??_C@_0BH@ODGBCEJD@y?$CK?$HMzi?3utf_32_le_decode?$AA@
CONST	SEGMENT
??_C@_0BH@ODGBCEJD@y?$CK?$HMzi?3utf_32_le_decode?$AA@ DB 'y*|zi:utf_32_le'
	DB	'_decode', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT utf_32_le_decode
_TEXT	SEGMENT
errors$ = 48
consumed$ = 56
pbuf$ = 64
self$ = 160
args$ = 168
final$ = 176
byteorder$ = 184
utf_32_le_decode PROC					; COMDAT

; 432  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	53		 push	 rbx
  00004	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H

; 433  :     Py_buffer pbuf;
; 434  :     const char *errors = NULL;
; 435  :     int byteorder = -1;
; 436  :     int final = 0;
; 437  :     Py_ssize_t consumed;
; 438  :     PyObject *decoded;
; 439  : 
; 440  :     if (!PyArg_ParseTuple(args, "y*|zi:utf_32_le_decode",
; 441  :                           &pbuf, &errors, &final))

  0000b	49 8d 4b 18	 lea	 rcx, QWORD PTR [r11+24]
  0000f	48 8b c2	 mov	 rax, rdx
  00012	33 db		 xor	 ebx, ebx
  00014	49 89 4b 88	 mov	 QWORD PTR [r11-120], rcx
  00018	4d 8d 4b 98	 lea	 r9, QWORD PTR [r11-104]
  0001c	4d 8d 43 a8	 lea	 r8, QWORD PTR [r11-88]
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@ODGBCEJD@y?$CK?$HMzi?3utf_32_le_decode?$AA@
  00027	48 8b c8	 mov	 rcx, rax
  0002a	49 89 5b 98	 mov	 QWORD PTR [r11-104], rbx
  0002e	41 c7 43 20 ff
	ff ff ff	 mov	 DWORD PTR [r11+32], -1
  00036	41 89 5b 18	 mov	 DWORD PTR [r11+24], ebx
  0003a	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0003f	85 c0		 test	 eax, eax
  00041	75 0b		 jne	 SHORT $LN2@utf_32_le_
$LN5@utf_32_le_:

; 442  :         return NULL;

  00043	33 c0		 xor	 eax, eax

; 450  : }

  00045	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  0004c	5b		 pop	 rbx
  0004d	c3		 ret	 0
$LN2@utf_32_le_:

; 443  :     consumed = pbuf.len; /* This is overwritten unless final is true. */
; 444  :     decoded = PyUnicode_DecodeUTF32Stateful(pbuf.buf, pbuf.len, errors,
; 445  :                                         &byteorder, final ? NULL : &consumed);

  0004e	39 9c 24 b0 00
	00 00		 cmp	 DWORD PTR final$[rsp], ebx
  00055	48 8b 54 24 50	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  0005a	4c 8b 44 24 30	 mov	 r8, QWORD PTR errors$[rsp]
  0005f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pbuf$[rsp]
  00064	48 8d 44 24 38	 lea	 rax, QWORD PTR consumed$[rsp]
  00069	4c 8d 8c 24 b8
	00 00 00	 lea	 r9, QWORD PTR byteorder$[rsp]
  00071	48 0f 45 c3	 cmovne	 rax, rbx
  00075	48 89 54 24 38	 mov	 QWORD PTR consumed$[rsp], rdx
  0007a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0007f	e8 00 00 00 00	 call	 PyUnicode_DecodeUTF32Stateful

; 446  :     PyBuffer_Release(&pbuf);

  00084	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pbuf$[rsp]
  00089	48 8b d8	 mov	 rbx, rax
  0008c	e8 00 00 00 00	 call	 PyBuffer_Release

; 447  :     if (decoded == NULL)

  00091	48 85 db	 test	 rbx, rbx

; 448  :         return NULL;

  00094	74 ad		 je	 SHORT $LN5@utf_32_le_

; 449  :     return codec_tuple(decoded, consumed);

  00096	48 8b 54 24 38	 mov	 rdx, QWORD PTR consumed$[rsp]
  0009b	48 8b cb	 mov	 rcx, rbx
  0009e	e8 00 00 00 00	 call	 codec_tuple

; 450  : }

  000a3	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  000aa	5b		 pop	 rbx
  000ab	c3		 ret	 0
utf_32_le_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@PNKIBECA@y?$CK?$HMzi?3utf_32_be_decode?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf_32_be_decode DD imagerel utf_32_be_decode
	DD	imagerel utf_32_be_decode+172
	DD	imagerel $unwind$utf_32_be_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_32_be_decode DD 030b01H
	DD	012010bH
	DD	03004H
xdata	ENDS
;	COMDAT ??_C@_0BH@PNKIBECA@y?$CK?$HMzi?3utf_32_be_decode?$AA@
CONST	SEGMENT
??_C@_0BH@PNKIBECA@y?$CK?$HMzi?3utf_32_be_decode?$AA@ DB 'y*|zi:utf_32_be'
	DB	'_decode', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT utf_32_be_decode
_TEXT	SEGMENT
errors$ = 48
consumed$ = 56
pbuf$ = 64
self$ = 160
args$ = 168
final$ = 176
byteorder$ = 184
utf_32_be_decode PROC					; COMDAT

; 455  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	53		 push	 rbx
  00004	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H

; 456  :     Py_buffer pbuf;
; 457  :     const char *errors = NULL;
; 458  :     int byteorder = 1;
; 459  :     int final = 0;
; 460  :     Py_ssize_t consumed;
; 461  :     PyObject *decoded;
; 462  : 
; 463  :     if (!PyArg_ParseTuple(args, "y*|zi:utf_32_be_decode",
; 464  :                           &pbuf, &errors, &final))

  0000b	49 8d 4b 18	 lea	 rcx, QWORD PTR [r11+24]
  0000f	48 8b c2	 mov	 rax, rdx
  00012	33 db		 xor	 ebx, ebx
  00014	49 89 4b 88	 mov	 QWORD PTR [r11-120], rcx
  00018	4d 8d 4b 98	 lea	 r9, QWORD PTR [r11-104]
  0001c	4d 8d 43 a8	 lea	 r8, QWORD PTR [r11-88]
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PNKIBECA@y?$CK?$HMzi?3utf_32_be_decode?$AA@
  00027	48 8b c8	 mov	 rcx, rax
  0002a	49 89 5b 98	 mov	 QWORD PTR [r11-104], rbx
  0002e	41 c7 43 20 01
	00 00 00	 mov	 DWORD PTR [r11+32], 1
  00036	41 89 5b 18	 mov	 DWORD PTR [r11+24], ebx
  0003a	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0003f	85 c0		 test	 eax, eax
  00041	75 0b		 jne	 SHORT $LN2@utf_32_be_
$LN5@utf_32_be_:

; 465  :         return NULL;

  00043	33 c0		 xor	 eax, eax

; 473  : }

  00045	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  0004c	5b		 pop	 rbx
  0004d	c3		 ret	 0
$LN2@utf_32_be_:

; 466  :     consumed = pbuf.len; /* This is overwritten unless final is true. */
; 467  :     decoded = PyUnicode_DecodeUTF32Stateful(pbuf.buf, pbuf.len, errors,
; 468  :                                         &byteorder, final ? NULL : &consumed);

  0004e	39 9c 24 b0 00
	00 00		 cmp	 DWORD PTR final$[rsp], ebx
  00055	48 8b 54 24 50	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  0005a	4c 8b 44 24 30	 mov	 r8, QWORD PTR errors$[rsp]
  0005f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pbuf$[rsp]
  00064	48 8d 44 24 38	 lea	 rax, QWORD PTR consumed$[rsp]
  00069	4c 8d 8c 24 b8
	00 00 00	 lea	 r9, QWORD PTR byteorder$[rsp]
  00071	48 0f 45 c3	 cmovne	 rax, rbx
  00075	48 89 54 24 38	 mov	 QWORD PTR consumed$[rsp], rdx
  0007a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0007f	e8 00 00 00 00	 call	 PyUnicode_DecodeUTF32Stateful

; 469  :     PyBuffer_Release(&pbuf);

  00084	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pbuf$[rsp]
  00089	48 8b d8	 mov	 rbx, rax
  0008c	e8 00 00 00 00	 call	 PyBuffer_Release

; 470  :     if (decoded == NULL)

  00091	48 85 db	 test	 rbx, rbx

; 471  :         return NULL;

  00094	74 ad		 je	 SHORT $LN5@utf_32_be_

; 472  :     return codec_tuple(decoded, consumed);

  00096	48 8b 54 24 38	 mov	 rdx, QWORD PTR consumed$[rsp]
  0009b	48 8b cb	 mov	 rcx, rbx
  0009e	e8 00 00 00 00	 call	 codec_tuple

; 473  : }

  000a3	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  000aa	5b		 pop	 rbx
  000ab	c3		 ret	 0
utf_32_be_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@LNJEBABO@y?$CK?$HMzii?3utf_32_ex_decode?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf_32_ex_decode DD imagerel utf_32_ex_decode
	DD	imagerel utf_32_ex_decode+121
	DD	imagerel $unwind$utf_32_ex_decode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$utf_32_ex_decode DD imagerel utf_32_ex_decode+121
	DD	imagerel utf_32_ex_decode+181
	DD	imagerel $chain$0$utf_32_ex_decode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$utf_32_ex_decode DD imagerel utf_32_ex_decode+181
	DD	imagerel utf_32_ex_decode+240
	DD	imagerel $chain$2$utf_32_ex_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$utf_32_ex_decode DD 020021H
	DD	0147400H
	DD	imagerel utf_32_ex_decode
	DD	imagerel utf_32_ex_decode+121
	DD	imagerel $unwind$utf_32_ex_decode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$utf_32_ex_decode DD 020821H
	DD	0147408H
	DD	imagerel utf_32_ex_decode
	DD	imagerel utf_32_ex_decode+121
	DD	imagerel $unwind$utf_32_ex_decode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_32_ex_decode DD 030b01H
	DD	012010bH
	DD	03004H
xdata	ENDS
;	COMDAT ??_C@_0BI@LNJEBABO@y?$CK?$HMzii?3utf_32_ex_decode?$AA@
CONST	SEGMENT
??_C@_0BI@LNJEBABO@y?$CK?$HMzii?3utf_32_ex_decode?$AA@ DB 'y*|zii:utf_32_'
	DB	'ex_decode', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT utf_32_ex_decode
_TEXT	SEGMENT
errors$ = 48
consumed$ = 56
pbuf$ = 64
self$ = 160
args$ = 168
byteorder$ = 176
final$ = 184
utf_32_ex_decode PROC					; COMDAT

; 486  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	53		 push	 rbx
  00004	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H

; 487  :     Py_buffer pbuf;
; 488  :     const char *errors = NULL;
; 489  :     int byteorder = 0;
; 490  :     PyObject *unicode, *tuple;
; 491  :     int final = 0;
; 492  :     Py_ssize_t consumed;
; 493  : 
; 494  :     if (!PyArg_ParseTuple(args, "y*|zii:utf_32_ex_decode",
; 495  :                           &pbuf, &errors, &byteorder, &final))

  0000b	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  0000f	48 8b c2	 mov	 rax, rdx
  00012	33 db		 xor	 ebx, ebx
  00014	49 89 4b 90	 mov	 QWORD PTR [r11-112], rcx
  00018	49 8d 4b 18	 lea	 rcx, QWORD PTR [r11+24]
  0001c	4d 8d 4b 98	 lea	 r9, QWORD PTR [r11-104]
  00020	49 89 4b 88	 mov	 QWORD PTR [r11-120], rcx
  00024	4d 8d 43 a8	 lea	 r8, QWORD PTR [r11-88]
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNJEBABO@y?$CK?$HMzii?3utf_32_ex_decode?$AA@
  0002f	48 8b c8	 mov	 rcx, rax
  00032	49 89 5b 98	 mov	 QWORD PTR [r11-104], rbx
  00036	41 89 5b 18	 mov	 DWORD PTR [r11+24], ebx
  0003a	41 89 5b 20	 mov	 DWORD PTR [r11+32], ebx
  0003e	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00043	85 c0		 test	 eax, eax
  00045	75 0b		 jne	 SHORT $LN2@utf_32_ex_

; 496  :         return NULL;

  00047	33 c0		 xor	 eax, eax

; 506  : }

  00049	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  00050	5b		 pop	 rbx
  00051	c3		 ret	 0
$LN2@utf_32_ex_:

; 497  :     consumed = pbuf.len; /* This is overwritten unless final is true. */
; 498  :     unicode = PyUnicode_DecodeUTF32Stateful(pbuf.buf, pbuf.len, errors,
; 499  :                                         &byteorder, final ? NULL : &consumed);

  00052	39 9c 24 b8 00
	00 00		 cmp	 DWORD PTR final$[rsp], ebx
  00059	48 8b 54 24 50	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  0005e	4c 8b 44 24 30	 mov	 r8, QWORD PTR errors$[rsp]
  00063	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pbuf$[rsp]
  00068	48 8d 44 24 38	 lea	 rax, QWORD PTR consumed$[rsp]
  0006d	4c 8d 8c 24 b0
	00 00 00	 lea	 r9, QWORD PTR byteorder$[rsp]
  00075	48 0f 45 c3	 cmovne	 rax, rbx
  00079	48 89 bc 24 a0
	00 00 00	 mov	 QWORD PTR [rsp+160], rdi
  00081	48 89 54 24 38	 mov	 QWORD PTR consumed$[rsp], rdx
  00086	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0008b	e8 00 00 00 00	 call	 PyUnicode_DecodeUTF32Stateful

; 500  :     PyBuffer_Release(&pbuf);

  00090	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pbuf$[rsp]
  00095	48 8b f8	 mov	 rdi, rax
  00098	e8 00 00 00 00	 call	 PyBuffer_Release

; 501  :     if (unicode == NULL)

  0009d	48 85 ff	 test	 rdi, rdi
  000a0	75 13		 jne	 SHORT $LN1@utf_32_ex_

; 502  :         return NULL;

  000a2	33 c0		 xor	 eax, eax
  000a4	48 8b bc 24 a0
	00 00 00	 mov	 rdi, QWORD PTR [rsp+160]

; 506  : }

  000ac	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  000b3	5b		 pop	 rbx
  000b4	c3		 ret	 0
$LN1@utf_32_ex_:

; 503  :     tuple = Py_BuildValue("Oni", unicode, consumed, byteorder);

  000b5	44 8b 8c 24 b0
	00 00 00	 mov	 r9d, DWORD PTR byteorder$[rsp]
  000bd	4c 8b 44 24 38	 mov	 r8, QWORD PTR consumed$[rsp]
  000c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03OLLKFOEM@Oni?$AA@
  000c9	48 8b d7	 mov	 rdx, rdi
  000cc	e8 00 00 00 00	 call	 _Py_BuildValue_SizeT

; 504  :     Py_DECREF(unicode);

  000d1	48 8b cf	 mov	 rcx, rdi
  000d4	48 8b d8	 mov	 rbx, rax
  000d7	e8 00 00 00 00	 call	 _Py_DecRef
  000dc	48 8b bc 24 a0
	00 00 00	 mov	 rdi, QWORD PTR [rsp+160]

; 505  :     return tuple;

  000e4	48 8b c3	 mov	 rax, rbx

; 506  : }

  000e7	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  000ee	5b		 pop	 rbx
  000ef	c3		 ret	 0
utf_32_ex_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@PIIBPOCB@s?$CK?$HMz?3unicode_escape_decode?$AA@ ; `string'
EXTRN	PyUnicode_DecodeUnicodeEscape:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$unicode_escape_decode DD imagerel unicode_escape_decode
	DD	imagerel unicode_escape_decode+113
	DD	imagerel $unwind$unicode_escape_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unicode_escape_decode DD 034801H
	DD	0e3448H
	DD	0e207H
xdata	ENDS
;	COMDAT ??_C@_0BL@PIIBPOCB@s?$CK?$HMz?3unicode_escape_decode?$AA@
CONST	SEGMENT
??_C@_0BL@PIIBPOCB@s?$CK?$HMz?3unicode_escape_decode?$AA@ DB 's*|z:unicod'
	DB	'e_escape_decode', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT unicode_escape_decode
_TEXT	SEGMENT
pbuf$ = 32
self$ = 128
args$ = 136
errors$ = 144
unicode_escape_decode PROC				; COMDAT

; 511  : {

  00000	48 8b c4	 mov	 rax, rsp
  00003	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 512  :     Py_buffer pbuf;
; 513  :     const char *errors = NULL;
; 514  :         PyObject *unicode;
; 515  : 
; 516  :     if (!PyArg_ParseTuple(args, "s*|z:unicode_escape_decode",
; 517  :                           &pbuf, &errors))

  00007	48 8b ca	 mov	 rcx, rdx
  0000a	4c 8d 48 18	 lea	 r9, QWORD PTR [rax+24]
  0000e	4c 8d 40 a8	 lea	 r8, QWORD PTR [rax-88]
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@PIIBPOCB@s?$CK?$HMz?3unicode_escape_decode?$AA@
  00019	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0
  00021	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00026	85 c0		 test	 eax, eax
  00028	75 07		 jne	 SHORT $LN1@unicode_es

; 518  :         return NULL;

  0002a	33 c0		 xor	 eax, eax

; 523  : }

  0002c	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00030	c3		 ret	 0
$LN1@unicode_es:

; 519  : 
; 520  :     unicode = PyUnicode_DecodeUnicodeEscape(pbuf.buf, pbuf.len, errors);

  00031	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR errors$[rsp]
  00039	48 8b 54 24 30	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  0003e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pbuf$[rsp]
  00043	48 89 5c 24 70	 mov	 QWORD PTR [rsp+112], rbx
  00048	e8 00 00 00 00	 call	 PyUnicode_DecodeUnicodeEscape

; 521  :     PyBuffer_Release(&pbuf);

  0004d	48 8d 4c 24 20	 lea	 rcx, QWORD PTR pbuf$[rsp]
  00052	48 8b d8	 mov	 rbx, rax
  00055	e8 00 00 00 00	 call	 PyBuffer_Release

; 522  :     return codec_tuple(unicode, pbuf.len);

  0005a	48 8b 54 24 30	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  0005f	48 8b cb	 mov	 rcx, rbx
  00062	e8 00 00 00 00	 call	 codec_tuple
  00067	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]

; 523  : }

  0006c	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00070	c3		 ret	 0
unicode_escape_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@PHCHJPMD@s?$CK?$HMz?3raw_unicode_escape_decode?$AA@ ; `string'
EXTRN	PyUnicode_DecodeRawUnicodeEscape:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$raw_unicode_escape_decode DD imagerel raw_unicode_escape_decode
	DD	imagerel raw_unicode_escape_decode+113
	DD	imagerel $unwind$raw_unicode_escape_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$raw_unicode_escape_decode DD 034801H
	DD	0e3448H
	DD	0e207H
xdata	ENDS
;	COMDAT ??_C@_0BP@PHCHJPMD@s?$CK?$HMz?3raw_unicode_escape_decode?$AA@
CONST	SEGMENT
??_C@_0BP@PHCHJPMD@s?$CK?$HMz?3raw_unicode_escape_decode?$AA@ DB 's*|z:ra'
	DB	'w_unicode_escape_decode', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT raw_unicode_escape_decode
_TEXT	SEGMENT
pbuf$ = 32
self$ = 128
args$ = 136
errors$ = 144
raw_unicode_escape_decode PROC				; COMDAT

; 528  : {

  00000	48 8b c4	 mov	 rax, rsp
  00003	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 529  :     Py_buffer pbuf;
; 530  :     const char *errors = NULL;
; 531  :     PyObject *unicode;
; 532  : 
; 533  :     if (!PyArg_ParseTuple(args, "s*|z:raw_unicode_escape_decode",
; 534  :                           &pbuf, &errors))

  00007	48 8b ca	 mov	 rcx, rdx
  0000a	4c 8d 48 18	 lea	 r9, QWORD PTR [rax+24]
  0000e	4c 8d 40 a8	 lea	 r8, QWORD PTR [rax-88]
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@PHCHJPMD@s?$CK?$HMz?3raw_unicode_escape_decode?$AA@
  00019	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0
  00021	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00026	85 c0		 test	 eax, eax
  00028	75 07		 jne	 SHORT $LN1@raw_unicod

; 535  :         return NULL;

  0002a	33 c0		 xor	 eax, eax

; 540  : }

  0002c	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00030	c3		 ret	 0
$LN1@raw_unicod:

; 536  : 
; 537  :     unicode = PyUnicode_DecodeRawUnicodeEscape(pbuf.buf, pbuf.len, errors);

  00031	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR errors$[rsp]
  00039	48 8b 54 24 30	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  0003e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pbuf$[rsp]
  00043	48 89 5c 24 70	 mov	 QWORD PTR [rsp+112], rbx
  00048	e8 00 00 00 00	 call	 PyUnicode_DecodeRawUnicodeEscape

; 538  :     PyBuffer_Release(&pbuf);

  0004d	48 8d 4c 24 20	 lea	 rcx, QWORD PTR pbuf$[rsp]
  00052	48 8b d8	 mov	 rbx, rax
  00055	e8 00 00 00 00	 call	 PyBuffer_Release

; 539  :     return codec_tuple(unicode, pbuf.len);

  0005a	48 8b 54 24 30	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  0005f	48 8b cb	 mov	 rcx, rbx
  00062	e8 00 00 00 00	 call	 codec_tuple
  00067	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]

; 540  : }

  0006c	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00070	c3		 ret	 0
raw_unicode_escape_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@PBHKMLGD@y?$CK?$HMz?3latin_1_decode?$AA@ ; `string'
EXTRN	PyUnicode_DecodeLatin1:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$latin_1_decode DD imagerel latin_1_decode
	DD	imagerel latin_1_decode+113
	DD	imagerel $unwind$latin_1_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$latin_1_decode DD 034801H
	DD	0e3448H
	DD	0e207H
xdata	ENDS
;	COMDAT ??_C@_0BE@PBHKMLGD@y?$CK?$HMz?3latin_1_decode?$AA@
CONST	SEGMENT
??_C@_0BE@PBHKMLGD@y?$CK?$HMz?3latin_1_decode?$AA@ DB 'y*|z:latin_1_decod'
	DB	'e', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT latin_1_decode
_TEXT	SEGMENT
pbuf$ = 32
self$ = 128
args$ = 136
errors$ = 144
latin_1_decode PROC					; COMDAT

; 545  : {

  00000	48 8b c4	 mov	 rax, rsp
  00003	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 546  :     Py_buffer pbuf;
; 547  :     PyObject *unicode;
; 548  :     const char *errors = NULL;
; 549  : 
; 550  :     if (!PyArg_ParseTuple(args, "y*|z:latin_1_decode",
; 551  :                           &pbuf, &errors))

  00007	48 8b ca	 mov	 rcx, rdx
  0000a	4c 8d 48 18	 lea	 r9, QWORD PTR [rax+24]
  0000e	4c 8d 40 a8	 lea	 r8, QWORD PTR [rax-88]
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@PBHKMLGD@y?$CK?$HMz?3latin_1_decode?$AA@
  00019	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0
  00021	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00026	85 c0		 test	 eax, eax
  00028	75 07		 jne	 SHORT $LN1@latin_1_de

; 552  :         return NULL;

  0002a	33 c0		 xor	 eax, eax

; 557  : }

  0002c	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00030	c3		 ret	 0
$LN1@latin_1_de:

; 553  : 
; 554  :     unicode = PyUnicode_DecodeLatin1(pbuf.buf, pbuf.len, errors);

  00031	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR errors$[rsp]
  00039	48 8b 54 24 30	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  0003e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pbuf$[rsp]
  00043	48 89 5c 24 70	 mov	 QWORD PTR [rsp+112], rbx
  00048	e8 00 00 00 00	 call	 PyUnicode_DecodeLatin1

; 555  :     PyBuffer_Release(&pbuf);

  0004d	48 8d 4c 24 20	 lea	 rcx, QWORD PTR pbuf$[rsp]
  00052	48 8b d8	 mov	 rbx, rax
  00055	e8 00 00 00 00	 call	 PyBuffer_Release

; 556  :     return codec_tuple(unicode, pbuf.len);

  0005a	48 8b 54 24 30	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  0005f	48 8b cb	 mov	 rcx, rbx
  00062	e8 00 00 00 00	 call	 codec_tuple
  00067	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]

; 557  : }

  0006c	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00070	c3		 ret	 0
latin_1_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@GLBPA@y?$CK?$HMz?3ascii_decode?$AA@	; `string'
EXTRN	PyUnicode_DecodeASCII:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$ascii_decode DD imagerel ascii_decode
	DD	imagerel ascii_decode+113
	DD	imagerel $unwind$ascii_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ascii_decode DD 034801H
	DD	0e3448H
	DD	0e207H
xdata	ENDS
;	COMDAT ??_C@_0BC@GLBPA@y?$CK?$HMz?3ascii_decode?$AA@
CONST	SEGMENT
??_C@_0BC@GLBPA@y?$CK?$HMz?3ascii_decode?$AA@ DB 'y*|z:ascii_decode', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ascii_decode
_TEXT	SEGMENT
pbuf$ = 32
self$ = 128
args$ = 136
errors$ = 144
ascii_decode PROC					; COMDAT

; 562  : {

  00000	48 8b c4	 mov	 rax, rsp
  00003	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 563  :     Py_buffer pbuf;
; 564  :     PyObject *unicode;
; 565  :     const char *errors = NULL;
; 566  : 
; 567  :     if (!PyArg_ParseTuple(args, "y*|z:ascii_decode",
; 568  :                           &pbuf, &errors))

  00007	48 8b ca	 mov	 rcx, rdx
  0000a	4c 8d 48 18	 lea	 r9, QWORD PTR [rax+24]
  0000e	4c 8d 40 a8	 lea	 r8, QWORD PTR [rax-88]
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@GLBPA@y?$CK?$HMz?3ascii_decode?$AA@
  00019	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0
  00021	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00026	85 c0		 test	 eax, eax
  00028	75 07		 jne	 SHORT $LN1@ascii_deco

; 569  :         return NULL;

  0002a	33 c0		 xor	 eax, eax

; 574  : }

  0002c	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00030	c3		 ret	 0
$LN1@ascii_deco:

; 570  : 
; 571  :     unicode = PyUnicode_DecodeASCII(pbuf.buf, pbuf.len, errors);

  00031	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR errors$[rsp]
  00039	48 8b 54 24 30	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  0003e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pbuf$[rsp]
  00043	48 89 5c 24 70	 mov	 QWORD PTR [rsp+112], rbx
  00048	e8 00 00 00 00	 call	 PyUnicode_DecodeASCII

; 572  :     PyBuffer_Release(&pbuf);

  0004d	48 8d 4c 24 20	 lea	 rcx, QWORD PTR pbuf$[rsp]
  00052	48 8b d8	 mov	 rbx, rax
  00055	e8 00 00 00 00	 call	 PyBuffer_Release

; 573  :     return codec_tuple(unicode, pbuf.len);

  0005a	48 8b 54 24 30	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  0005f	48 8b cb	 mov	 rcx, rbx
  00062	e8 00 00 00 00	 call	 codec_tuple
  00067	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]

; 574  : }

  0006c	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00070	c3		 ret	 0
ascii_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@FPCCKHCG@y?$CK?$HMzO?3charmap_decode?$AA@ ; `string'
EXTRN	PyUnicode_DecodeCharmap:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$charmap_decode DD imagerel charmap_decode
	DD	imagerel charmap_decode+158
	DD	imagerel $unwind$charmap_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$charmap_decode DD 020b01H
	DD	03004f20bH
xdata	ENDS
;	COMDAT ??_C@_0BF@FPCCKHCG@y?$CK?$HMzO?3charmap_decode?$AA@
CONST	SEGMENT
??_C@_0BF@FPCCKHCG@y?$CK?$HMzO?3charmap_decode?$AA@ DB 'y*|zO:charmap_dec'
	DB	'ode', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT charmap_decode
_TEXT	SEGMENT
pbuf$ = 48
self$ = 144
args$ = 152
mapping$ = 160
errors$ = 168
charmap_decode PROC					; COMDAT

; 579  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	53		 push	 rbx
  00004	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H

; 580  :     Py_buffer pbuf;
; 581  :     PyObject *unicode;
; 582  :     const char *errors = NULL;
; 583  :     PyObject *mapping = NULL;
; 584  : 
; 585  :     if (!PyArg_ParseTuple(args, "y*|zO:charmap_decode",
; 586  :                           &pbuf, &errors, &mapping))

  0000b	49 8d 4b 18	 lea	 rcx, QWORD PTR [r11+24]
  0000f	48 8b c2	 mov	 rax, rdx
  00012	33 db		 xor	 ebx, ebx
  00014	49 89 4b 98	 mov	 QWORD PTR [r11-104], rcx
  00018	4d 8d 4b 20	 lea	 r9, QWORD PTR [r11+32]
  0001c	4d 8d 43 a8	 lea	 r8, QWORD PTR [r11-88]
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@FPCCKHCG@y?$CK?$HMzO?3charmap_decode?$AA@
  00027	48 8b c8	 mov	 rcx, rax
  0002a	49 89 5b 20	 mov	 QWORD PTR [r11+32], rbx
  0002e	49 89 5b 18	 mov	 QWORD PTR [r11+24], rbx
  00032	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00037	85 c0		 test	 eax, eax
  00039	75 0b		 jne	 SHORT $LN2@charmap_de

; 587  :         return NULL;

  0003b	33 c0		 xor	 eax, eax

; 594  : }

  0003d	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  00044	5b		 pop	 rbx
  00045	c3		 ret	 0
$LN2@charmap_de:

; 588  :     if (mapping == Py_None)

  00046	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR mapping$[rsp]

; 589  :         mapping = NULL;
; 590  : 
; 591  :     unicode = PyUnicode_DecodeCharmap(pbuf.buf, pbuf.len, mapping, errors);

  0004e	4c 8b 8c 24 a8
	00 00 00	 mov	 r9, QWORD PTR errors$[rsp]
  00056	48 8b 54 24 40	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  0005b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pbuf$[rsp]
  00060	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00067	4c 3b c0	 cmp	 r8, rax
  0006a	4c 0f 44 c3	 cmove	 r8, rbx
  0006e	4c 89 84 24 a0
	00 00 00	 mov	 QWORD PTR mapping$[rsp], r8
  00076	e8 00 00 00 00	 call	 PyUnicode_DecodeCharmap

; 592  :     PyBuffer_Release(&pbuf);

  0007b	48 8d 4c 24 30	 lea	 rcx, QWORD PTR pbuf$[rsp]
  00080	48 8b d8	 mov	 rbx, rax
  00083	e8 00 00 00 00	 call	 PyBuffer_Release

; 593  :     return codec_tuple(unicode, pbuf.len);

  00088	48 8b 54 24 40	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  0008d	48 8b cb	 mov	 rcx, rbx
  00090	e8 00 00 00 00	 call	 codec_tuple

; 594  : }

  00095	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  0009c	5b		 pop	 rbx
  0009d	c3		 ret	 0
charmap_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@LPEEGOGA@y?$CK?$HMzi?3mbcs_decode?$AA@ ; `string'
EXTRN	PyUnicode_DecodeMBCSStateful:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbcs_decode DD imagerel mbcs_decode
	DD	imagerel mbcs_decode+154
	DD	imagerel $unwind$mbcs_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbcs_decode DD 030b01H
	DD	012010bH
	DD	03004H
xdata	ENDS
;	COMDAT ??_C@_0BC@LPEEGOGA@y?$CK?$HMzi?3mbcs_decode?$AA@
CONST	SEGMENT
??_C@_0BC@LPEEGOGA@y?$CK?$HMzi?3mbcs_decode?$AA@ DB 'y*|zi:mbcs_decode', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mbcs_decode
_TEXT	SEGMENT
consumed$ = 48
pbuf$ = 64
self$ = 160
args$ = 168
final$ = 176
errors$ = 184
mbcs_decode PROC					; COMDAT

; 601  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	53		 push	 rbx
  00004	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H

; 602  :     Py_buffer pbuf;
; 603  :     const char *errors = NULL;
; 604  :     int final = 0;
; 605  :     Py_ssize_t consumed;
; 606  :     PyObject *decoded = NULL;
; 607  : 
; 608  :     if (!PyArg_ParseTuple(args, "y*|zi:mbcs_decode",
; 609  :                           &pbuf, &errors, &final))

  0000b	49 8d 4b 18	 lea	 rcx, QWORD PTR [r11+24]
  0000f	48 8b c2	 mov	 rax, rdx
  00012	33 db		 xor	 ebx, ebx
  00014	49 89 4b 88	 mov	 QWORD PTR [r11-120], rcx
  00018	4d 8d 4b 20	 lea	 r9, QWORD PTR [r11+32]
  0001c	4d 8d 43 a8	 lea	 r8, QWORD PTR [r11-88]
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@LPEEGOGA@y?$CK?$HMzi?3mbcs_decode?$AA@
  00027	48 8b c8	 mov	 rcx, rax
  0002a	49 89 5b 20	 mov	 QWORD PTR [r11+32], rbx
  0002e	41 89 5b 18	 mov	 DWORD PTR [r11+24], ebx
  00032	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00037	85 c0		 test	 eax, eax
  00039	75 0b		 jne	 SHORT $LN2@mbcs_decod
$LN5@mbcs_decod:

; 610  :         return NULL;

  0003b	33 c0		 xor	 eax, eax

; 619  : }

  0003d	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  00044	5b		 pop	 rbx
  00045	c3		 ret	 0
$LN2@mbcs_decod:

; 611  :     consumed = pbuf.len;
; 612  : 
; 613  :     decoded = PyUnicode_DecodeMBCSStateful(pbuf.buf, pbuf.len, errors,
; 614  :                                            final ? NULL : &consumed);

  00046	39 9c 24 b0 00
	00 00		 cmp	 DWORD PTR final$[rsp], ebx
  0004d	48 8b 54 24 50	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  00052	4c 8b 84 24 b8
	00 00 00	 mov	 r8, QWORD PTR errors$[rsp]
  0005a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pbuf$[rsp]
  0005f	4c 8d 4c 24 30	 lea	 r9, QWORD PTR consumed$[rsp]
  00064	48 89 54 24 30	 mov	 QWORD PTR consumed$[rsp], rdx
  00069	4c 0f 45 cb	 cmovne	 r9, rbx
  0006d	e8 00 00 00 00	 call	 PyUnicode_DecodeMBCSStateful

; 615  :     PyBuffer_Release(&pbuf);

  00072	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pbuf$[rsp]
  00077	48 8b d8	 mov	 rbx, rax
  0007a	e8 00 00 00 00	 call	 PyBuffer_Release

; 616  :     if (decoded == NULL)

  0007f	48 85 db	 test	 rbx, rbx

; 617  :         return NULL;

  00082	74 b7		 je	 SHORT $LN5@mbcs_decod

; 618  :     return codec_tuple(decoded, consumed);

  00084	48 8b 54 24 30	 mov	 rdx, QWORD PTR consumed$[rsp]
  00089	48 8b cb	 mov	 rcx, rbx
  0008c	e8 00 00 00 00	 call	 codec_tuple

; 619  : }

  00091	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  00098	5b		 pop	 rbx
  00099	c3		 ret	 0
mbcs_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@KODBFCGO@iy?$CK?$HMzi?3code_page_decode?$AA@ ; `string'
EXTRN	PyUnicode_DecodeCodePageStateful:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$code_page_decode DD imagerel code_page_decode
	DD	imagerel code_page_decode+171
	DD	imagerel $unwind$code_page_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$code_page_decode DD 030b01H
	DD	012010bH
	DD	03004H
xdata	ENDS
;	COMDAT ??_C@_0BI@KODBFCGO@iy?$CK?$HMzi?3code_page_decode?$AA@
CONST	SEGMENT
??_C@_0BI@KODBFCGO@iy?$CK?$HMzi?3code_page_decode?$AA@ DB 'iy*|zi:code_pa'
	DB	'ge_decode', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT code_page_decode
_TEXT	SEGMENT
errors$ = 48
consumed$ = 56
pbuf$ = 64
self$ = 160
args$ = 168
final$ = 176
code_page$ = 184
code_page_decode PROC					; COMDAT

; 624  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	53		 push	 rbx
  00004	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H

; 625  :     Py_buffer pbuf;
; 626  :     const char *errors = NULL;
; 627  :     int final = 0;
; 628  :     Py_ssize_t consumed;
; 629  :     PyObject *decoded = NULL;
; 630  :     int code_page;
; 631  : 
; 632  :     if (!PyArg_ParseTuple(args, "iy*|zi:code_page_decode",
; 633  :                           &code_page, &pbuf, &errors, &final))

  0000b	49 8d 4b 18	 lea	 rcx, QWORD PTR [r11+24]
  0000f	48 8b c2	 mov	 rax, rdx
  00012	33 db		 xor	 ebx, ebx
  00014	49 89 4b 90	 mov	 QWORD PTR [r11-112], rcx
  00018	49 8d 4b 98	 lea	 rcx, QWORD PTR [r11-104]
  0001c	4d 8d 4b a8	 lea	 r9, QWORD PTR [r11-88]
  00020	49 89 4b 88	 mov	 QWORD PTR [r11-120], rcx
  00024	4d 8d 43 20	 lea	 r8, QWORD PTR [r11+32]
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@KODBFCGO@iy?$CK?$HMzi?3code_page_decode?$AA@
  0002f	48 8b c8	 mov	 rcx, rax
  00032	49 89 5b 98	 mov	 QWORD PTR [r11-104], rbx
  00036	41 89 5b 18	 mov	 DWORD PTR [r11+24], ebx
  0003a	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0003f	85 c0		 test	 eax, eax
  00041	75 0b		 jne	 SHORT $LN2@code_page_
$LN5@code_page_:

; 634  :         return NULL;

  00043	33 c0		 xor	 eax, eax

; 644  : }

  00045	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  0004c	5b		 pop	 rbx
  0004d	c3		 ret	 0
$LN2@code_page_:

; 635  :     consumed = pbuf.len;
; 636  : 
; 637  :     decoded = PyUnicode_DecodeCodePageStateful(code_page,
; 638  :                                                pbuf.buf, pbuf.len, errors,
; 639  :                                                final ? NULL : &consumed);

  0004e	39 9c 24 b0 00
	00 00		 cmp	 DWORD PTR final$[rsp], ebx
  00055	4c 8b 44 24 50	 mov	 r8, QWORD PTR pbuf$[rsp+16]
  0005a	4c 8b 4c 24 30	 mov	 r9, QWORD PTR errors$[rsp]
  0005f	48 8b 54 24 40	 mov	 rdx, QWORD PTR pbuf$[rsp]
  00064	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR code_page$[rsp]
  0006b	48 8d 44 24 38	 lea	 rax, QWORD PTR consumed$[rsp]
  00070	48 0f 45 c3	 cmovne	 rax, rbx
  00074	4c 89 44 24 38	 mov	 QWORD PTR consumed$[rsp], r8
  00079	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0007e	e8 00 00 00 00	 call	 PyUnicode_DecodeCodePageStateful

; 640  :     PyBuffer_Release(&pbuf);

  00083	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pbuf$[rsp]
  00088	48 8b d8	 mov	 rbx, rax
  0008b	e8 00 00 00 00	 call	 PyBuffer_Release

; 641  :     if (decoded == NULL)

  00090	48 85 db	 test	 rbx, rbx

; 642  :         return NULL;

  00093	74 ae		 je	 SHORT $LN5@code_page_

; 643  :     return codec_tuple(decoded, consumed);

  00095	48 8b 54 24 38	 mov	 rdx, QWORD PTR consumed$[rsp]
  0009a	48 8b cb	 mov	 rcx, rbx
  0009d	e8 00 00 00 00	 call	 codec_tuple

; 644  : }

  000a2	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  000a9	5b		 pop	 rbx
  000aa	c3		 ret	 0
code_page_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@OIDNGBKJ@s?$CK?$HMz?3readbuffer_encode?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$readbuffer_encode DD imagerel readbuffer_encode
	DD	imagerel readbuffer_encode+122
	DD	imagerel $unwind$readbuffer_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$readbuffer_encode DD 054301H
	DD	0e7443H
	DD	010343eH
	DD	0e207H
xdata	ENDS
;	COMDAT ??_C@_0BH@OIDNGBKJ@s?$CK?$HMz?3readbuffer_encode?$AA@
CONST	SEGMENT
??_C@_0BH@OIDNGBKJ@s?$CK?$HMz?3readbuffer_encode?$AA@ DB 's*|z:readbuffer'
	DB	'_encode', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT readbuffer_encode
_TEXT	SEGMENT
pdata$ = 32
self$ = 128
args$ = 136
readbuffer_encode PROC					; COMDAT

; 653  : {

  00000	48 8b c4	 mov	 rax, rsp
  00003	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 654  :     Py_buffer pdata;
; 655  :     const char *data;
; 656  :     Py_ssize_t size;
; 657  :     const char *errors = NULL;
; 658  :     PyObject *result;
; 659  : 
; 660  :     if (!PyArg_ParseTuple(args, "s*|z:readbuffer_encode",
; 661  :                           &pdata, &errors))

  00007	48 8b ca	 mov	 rcx, rdx
  0000a	4c 8d 48 18	 lea	 r9, QWORD PTR [rax+24]
  0000e	4c 8d 40 a8	 lea	 r8, QWORD PTR [rax-88]
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@OIDNGBKJ@s?$CK?$HMz?3readbuffer_encode?$AA@
  00019	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0
  00021	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00026	85 c0		 test	 eax, eax
  00028	75 07		 jne	 SHORT $LN1@readbuffer

; 662  :         return NULL;

  0002a	33 c0		 xor	 eax, eax

; 669  : }

  0002c	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00030	c3		 ret	 0
$LN1@readbuffer:

; 663  :     data = pdata.buf;
; 664  :     size = pdata.len;
; 665  : 
; 666  :     result = PyBytes_FromStringAndSize(data, size);

  00031	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pdata$[rsp]
  00036	48 89 9c 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rbx
  0003e	48 89 7c 24 70	 mov	 QWORD PTR [rsp+112], rdi
  00043	48 8b 7c 24 30	 mov	 rdi, QWORD PTR pdata$[rsp+16]
  00048	48 8b d7	 mov	 rdx, rdi
  0004b	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize

; 667  :     PyBuffer_Release(&pdata);

  00050	48 8d 4c 24 20	 lea	 rcx, QWORD PTR pdata$[rsp]
  00055	48 8b d8	 mov	 rbx, rax
  00058	e8 00 00 00 00	 call	 PyBuffer_Release

; 668  :     return codec_tuple(result, size);

  0005d	48 8b d7	 mov	 rdx, rdi
  00060	48 8b cb	 mov	 rcx, rbx
  00063	e8 00 00 00 00	 call	 codec_tuple
  00068	48 8b 7c 24 70	 mov	 rdi, QWORD PTR [rsp+112]
  0006d	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR [rsp+128]

; 669  : }

  00075	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00079	c3		 ret	 0
readbuffer_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@GKLFALHD@O?$HMz?3unicode_internal_encode?$AA@ ; `string'
PUBLIC	??_C@_0CL@NLHPDIOL@unicode_internal?5codec?5has?5been?5@ ; `string'
EXTRN	PyErr_NoMemory:PROC
EXTRN	PyUnicode_AsUnicodeAndSize:PROC
EXTRN	PyErr_WarnEx:PROC
EXTRN	PyExc_DeprecationWarning:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$unicode_internal_encode DD imagerel unicode_internal_encode
	DD	imagerel unicode_internal_encode+267
	DD	imagerel $unwind$unicode_internal_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unicode_internal_encode DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT ??_C@_0BM@GKLFALHD@O?$HMz?3unicode_internal_encode?$AA@
CONST	SEGMENT
??_C@_0BM@GKLFALHD@O?$HMz?3unicode_internal_encode?$AA@ DB 'O|z:unicode_i'
	DB	'nternal_encode', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@NLHPDIOL@unicode_internal?5codec?5has?5been?5@
CONST	SEGMENT
??_C@_0CL@NLHPDIOL@unicode_internal?5codec?5has?5been?5@ DB 'unicode_inte'
	DB	'rnal codec has been deprecated', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT unicode_internal_encode
_TEXT	SEGMENT
errors$ = 32
len$ = 40
data$ = 48
self$ = 80
args$ = 88
obj$ = 96
size$ = 104
unicode_internal_encode PROC				; COMDAT

; 674  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 675  :     PyObject *obj;
; 676  :     const char *errors = NULL;
; 677  :     const char *data;
; 678  :     Py_ssize_t len, size;
; 679  : 
; 680  :     if (PyErr_WarnEx(PyExc_DeprecationWarning,
; 681  :                      "unicode_internal codec has been deprecated",
; 682  :                      1))

  00006	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_DeprecationWarning
  0000d	48 8b da	 mov	 rbx, rdx
  00010	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@NLHPDIOL@unicode_internal?5codec?5has?5been?5@
  00017	41 b8 01 00 00
	00		 mov	 r8d, 1
  0001d	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0
  00026	e8 00 00 00 00	 call	 PyErr_WarnEx
  0002b	85 c0		 test	 eax, eax
  0002d	74 08		 je	 SHORT $LN8@unicode_in@2
$LN15@unicode_in@2:

; 683  :         return NULL;

  0002f	33 c0		 xor	 eax, eax

; 708  :     }
; 709  : }

  00031	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00035	5b		 pop	 rbx
  00036	c3		 ret	 0
$LN8@unicode_in@2:

; 684  : 
; 685  :     if (!PyArg_ParseTuple(args, "O|z:unicode_internal_encode",
; 686  :                           &obj, &errors))

  00037	4c 8d 4c 24 20	 lea	 r9, QWORD PTR errors$[rsp]
  0003c	4c 8d 44 24 60	 lea	 r8, QWORD PTR obj$[rsp]
  00041	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@GKLFALHD@O?$HMz?3unicode_internal_encode?$AA@
  00048	48 8b cb	 mov	 rcx, rbx
  0004b	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00050	85 c0		 test	 eax, eax

; 687  :         return NULL;

  00052	74 db		 je	 SHORT $LN15@unicode_in@2

; 688  : 
; 689  :     if (PyUnicode_Check(obj)) {

  00054	48 8b 4c 24 60	 mov	 rcx, QWORD PTR obj$[rsp]
  00059	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0005d	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  00067	74 69		 je	 SHORT $LN6@unicode_in@2

; 690  :         Py_UNICODE *u;
; 691  : 
; 692  :         if (PyUnicode_READY(obj) < 0)

  00069	f6 41 70 80	 test	 BYTE PTR [rcx+112], 128	; 00000080H
  0006d	75 0e		 jne	 SHORT $LN5@unicode_in@2
  0006f	e8 00 00 00 00	 call	 _PyUnicode_Ready
  00074	85 c0		 test	 eax, eax

; 693  :             return NULL;

  00076	78 b7		 js	 SHORT $LN15@unicode_in@2
  00078	48 8b 4c 24 60	 mov	 rcx, QWORD PTR obj$[rsp]
$LN5@unicode_in@2:

; 694  : 
; 695  :         u = PyUnicode_AsUnicodeAndSize(obj, &len);

  0007d	48 8d 54 24 28	 lea	 rdx, QWORD PTR len$[rsp]
  00082	e8 00 00 00 00	 call	 PyUnicode_AsUnicodeAndSize

; 696  :         if (u == NULL)

  00087	48 85 c0	 test	 rax, rax

; 697  :             return NULL;

  0008a	74 a3		 je	 SHORT $LN15@unicode_in@2

; 698  :         if (len > PY_SSIZE_T_MAX / sizeof(Py_UNICODE))

  0008c	48 8b 54 24 28	 mov	 rdx, QWORD PTR len$[rsp]
  00091	48 b9 ff ff ff
	ff ff ff ff 3f	 mov	 rcx, 4611686018427387903 ; 3fffffffffffffffH
  0009b	48 3b d1	 cmp	 rdx, rcx
  0009e	76 0b		 jbe	 SHORT $LN3@unicode_in@2

; 699  :             return PyErr_NoMemory();

  000a0	e8 00 00 00 00	 call	 PyErr_NoMemory

; 708  :     }
; 709  : }

  000a5	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000a9	5b		 pop	 rbx
  000aa	c3		 ret	 0
$LN3@unicode_in@2:

; 700  :         size = len * sizeof(Py_UNICODE);

  000ab	48 03 d2	 add	 rdx, rdx

; 701  :         return codec_tuple(PyBytes_FromStringAndSize((const char*)u, size),
; 702  :                            PyUnicode_GET_LENGTH(obj));

  000ae	48 8b c8	 mov	 rcx, rax
  000b1	48 89 54 24 68	 mov	 QWORD PTR size$[rsp], rdx
  000b6	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  000bb	48 8b 54 24 60	 mov	 rdx, QWORD PTR obj$[rsp]
  000c0	48 8b 52 60	 mov	 rdx, QWORD PTR [rdx+96]

; 707  :         return codec_tuple(PyBytes_FromStringAndSize(data, size), size);

  000c4	48 8b c8	 mov	 rcx, rax
  000c7	e8 00 00 00 00	 call	 codec_tuple

; 708  :     }
; 709  : }

  000cc	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000d0	5b		 pop	 rbx
  000d1	c3		 ret	 0
$LN6@unicode_in@2:

; 703  :     }
; 704  :     else {
; 705  :         if (PyObject_AsReadBuffer(obj, (const void **)&data, &size))

  000d2	4c 8d 44 24 68	 lea	 r8, QWORD PTR size$[rsp]
  000d7	48 8d 54 24 30	 lea	 rdx, QWORD PTR data$[rsp]
  000dc	e8 00 00 00 00	 call	 PyObject_AsReadBuffer
  000e1	85 c0		 test	 eax, eax

; 706  :             return NULL;

  000e3	0f 85 46 ff ff
	ff		 jne	 $LN15@unicode_in@2

; 707  :         return codec_tuple(PyBytes_FromStringAndSize(data, size), size);

  000e9	48 8b 54 24 68	 mov	 rdx, QWORD PTR size$[rsp]
  000ee	48 8b 4c 24 30	 mov	 rcx, QWORD PTR data$[rsp]
  000f3	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  000f8	48 8b 54 24 68	 mov	 rdx, QWORD PTR size$[rsp]
  000fd	48 8b c8	 mov	 rcx, rax
  00100	e8 00 00 00 00	 call	 codec_tuple

; 708  :     }
; 709  : }

  00105	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00109	5b		 pop	 rbx
  0010a	c3		 ret	 0
unicode_internal_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@HKGOKCEK@O?$HMz?3utf_7_encode?$AA@	; `string'
EXTRN	_PyUnicode_EncodeUTF7:PROC
EXTRN	PyUnicode_FromObject:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$utf_7_encode DD imagerel utf_7_encode
	DD	imagerel utf_7_encode+54
	DD	imagerel $unwind$utf_7_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$utf_7_encode DD imagerel utf_7_encode+54
	DD	imagerel utf_7_encode+162
	DD	imagerel $chain$0$utf_7_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$utf_7_encode DD imagerel utf_7_encode+162
	DD	imagerel utf_7_encode+263
	DD	imagerel $chain$2$utf_7_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$utf_7_encode DD imagerel utf_7_encode+263
	DD	imagerel utf_7_encode+285
	DD	imagerel $chain$4$utf_7_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$utf_7_encode DD imagerel utf_7_encode+285
	DD	imagerel utf_7_encode+305
	DD	imagerel $chain$6$utf_7_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$utf_7_encode DD 020021H
	DD	063400H
	DD	imagerel utf_7_encode
	DD	imagerel utf_7_encode+54
	DD	imagerel $unwind$utf_7_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$utf_7_encode DD 020021H
	DD	063400H
	DD	imagerel utf_7_encode
	DD	imagerel utf_7_encode+54
	DD	imagerel $unwind$utf_7_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$utf_7_encode DD 020021H
	DD	063400H
	DD	imagerel utf_7_encode
	DD	imagerel utf_7_encode+54
	DD	imagerel $unwind$utf_7_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$utf_7_encode DD 020521H
	DD	063405H
	DD	imagerel utf_7_encode
	DD	imagerel utf_7_encode+54
	DD	imagerel $unwind$utf_7_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_7_encode DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0BB@HKGOKCEK@O?$HMz?3utf_7_encode?$AA@
CONST	SEGMENT
??_C@_0BB@HKGOKCEK@O?$HMz?3utf_7_encode?$AA@ DB 'O|z:utf_7_encode', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_codecsmodule.c
CONST	ENDS
;	COMDAT utf_7_encode
_TEXT	SEGMENT
self$ = 64
args$ = 72
str$ = 80
errors$ = 88
utf_7_encode PROC					; COMDAT

; 714  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 715  :     PyObject *str, *v;
; 716  :     const char *errors = NULL;
; 717  : 
; 718  :     if (!PyArg_ParseTuple(args, "O|z:utf_7_encode",
; 719  :                           &str, &errors))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 4c 24 58	 lea	 r9, QWORD PTR errors$[rsp]
  0000c	4c 8d 44 24 50	 lea	 r8, QWORD PTR str$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@HKGOKCEK@O?$HMz?3utf_7_encode?$AA@
  00018	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0
  00021	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00026	85 c0		 test	 eax, eax
  00028	75 07		 jne	 SHORT $LN7@utf_7_enco

; 720  :         return NULL;

  0002a	33 c0		 xor	 eax, eax

; 731  : }

  0002c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00030	c3		 ret	 0
$LN7@utf_7_enco:

; 721  : 
; 722  :     str = PyUnicode_FromObject(str);

  00031	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  00036	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0003b	e8 00 00 00 00	 call	 PyUnicode_FromObject
  00040	48 89 44 24 50	 mov	 QWORD PTR str$[rsp], rax

; 723  :     if (str == NULL || PyUnicode_READY(str) < 0) {

  00045	48 85 c0	 test	 rax, rax
  00048	0f 84 ad 00 00
	00		 je	 $LN3@utf_7_enco
  0004e	f6 40 70 80	 test	 BYTE PTR [rax+112], 128	; 00000080H
  00052	75 11		 jne	 SHORT $LN23@utf_7_enco
  00054	48 8b c8	 mov	 rcx, rax
  00057	e8 00 00 00 00	 call	 _PyUnicode_Ready
  0005c	85 c0		 test	 eax, eax
  0005e	78 42		 js	 SHORT $LN4@utf_7_enco
  00060	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
$LN23@utf_7_enco:

; 726  :     }
; 727  :     v = codec_tuple(_PyUnicode_EncodeUTF7(str, 0, 0, errors),
; 728  :                     PyUnicode_GET_LENGTH(str));

  00065	4c 8b 4c 24 58	 mov	 r9, QWORD PTR errors$[rsp]
  0006a	45 33 c0	 xor	 r8d, r8d
  0006d	33 d2		 xor	 edx, edx
  0006f	48 8b c8	 mov	 rcx, rax
  00072	e8 00 00 00 00	 call	 _PyUnicode_EncodeUTF7
  00077	48 8b 54 24 50	 mov	 rdx, QWORD PTR str$[rsp]
  0007c	48 8b 52 60	 mov	 rdx, QWORD PTR [rdx+96]
  00080	48 8b c8	 mov	 rcx, rax
  00083	e8 00 00 00 00	 call	 codec_tuple

; 729  :     Py_DECREF(str);

  00088	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  0008d	48 8b d8	 mov	 rbx, rax
  00090	e8 00 00 00 00	 call	 _Py_DecRef

; 730  :     return v;

  00095	48 8b c3	 mov	 rax, rbx
  00098	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 731  : }

  0009d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a1	c3		 ret	 0
$LN4@utf_7_enco:

; 724  :         Py_XDECREF(str);

  000a2	48 8b 5c 24 50	 mov	 rbx, QWORD PTR str$[rsp]
  000a7	48 85 db	 test	 rbx, rbx
  000aa	74 4f		 je	 SHORT $LN3@utf_7_enco
  000ac	e8 00 00 00 00	 call	 _Py_PXCTX
  000b1	85 c0		 test	 eax, eax
  000b3	75 46		 jne	 SHORT $LN3@utf_7_enco
  000b5	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000b9	a8 20		 test	 al, 32			; 00000020H
  000bb	75 60		 jne	 SHORT $LN16@utf_7_enco
  000bd	84 c0		 test	 al, al
  000bf	78 5c		 js	 SHORT $LN16@utf_7_enco
  000c1	a8 02		 test	 al, 2
  000c3	75 36		 jne	 SHORT $LN3@utf_7_enco
  000c5	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000c9	75 30		 jne	 SHORT $LN3@utf_7_enco
  000cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000d9	4c 8b cb	 mov	 r9, rbx
  000dc	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000e2	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ea	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ef	48 8b cb	 mov	 rcx, rbx
  000f2	85 c0		 test	 eax, eax
  000f4	74 11		 je	 SHORT $LN21@utf_7_enco
  000f6	e8 00 00 00 00	 call	 _Px_Dealloc
$LN3@utf_7_enco:

; 725  :         return NULL;

  000fb	33 c0		 xor	 eax, eax
  000fd	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 731  : }

  00102	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00106	c3		 ret	 0

; 724  :         Py_XDECREF(str);

$LN21@utf_7_enco:
  00107	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0010b	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00111	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 725  :         return NULL;

  00116	33 c0		 xor	 eax, eax

; 731  : }

  00118	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011c	c3		 ret	 0

; 724  :         Py_XDECREF(str);

$LN16@utf_7_enco:
  0011d	48 8b cb	 mov	 rcx, rbx
  00120	e8 00 00 00 00	 call	 Px_DecRef
  00125	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 725  :         return NULL;

  0012a	33 c0		 xor	 eax, eax

; 731  : }

  0012c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00130	c3		 ret	 0
utf_7_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_05CAMHEFLG@utf?98?$AA@			; `string'
PUBLIC	??_C@_0BB@KFNHGNJL@O?$HMz?3utf_8_encode?$AA@	; `string'
EXTRN	PyUnicode_AsEncodedString:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$utf_8_encode DD imagerel utf_8_encode
	DD	imagerel utf_8_encode+54
	DD	imagerel $unwind$utf_8_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$utf_8_encode DD imagerel utf_8_encode+54
	DD	imagerel utf_8_encode+164
	DD	imagerel $chain$0$utf_8_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$utf_8_encode DD imagerel utf_8_encode+164
	DD	imagerel utf_8_encode+265
	DD	imagerel $chain$2$utf_8_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$utf_8_encode DD imagerel utf_8_encode+265
	DD	imagerel utf_8_encode+287
	DD	imagerel $chain$4$utf_8_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$utf_8_encode DD imagerel utf_8_encode+287
	DD	imagerel utf_8_encode+307
	DD	imagerel $chain$6$utf_8_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$utf_8_encode DD 020021H
	DD	063400H
	DD	imagerel utf_8_encode
	DD	imagerel utf_8_encode+54
	DD	imagerel $unwind$utf_8_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$utf_8_encode DD 020021H
	DD	063400H
	DD	imagerel utf_8_encode
	DD	imagerel utf_8_encode+54
	DD	imagerel $unwind$utf_8_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$utf_8_encode DD 020021H
	DD	063400H
	DD	imagerel utf_8_encode
	DD	imagerel utf_8_encode+54
	DD	imagerel $unwind$utf_8_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$utf_8_encode DD 020521H
	DD	063405H
	DD	imagerel utf_8_encode
	DD	imagerel utf_8_encode+54
	DD	imagerel $unwind$utf_8_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_8_encode DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_05CAMHEFLG@utf?98?$AA@
CONST	SEGMENT
??_C@_05CAMHEFLG@utf?98?$AA@ DB 'utf-8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KFNHGNJL@O?$HMz?3utf_8_encode?$AA@
CONST	SEGMENT
??_C@_0BB@KFNHGNJL@O?$HMz?3utf_8_encode?$AA@ DB 'O|z:utf_8_encode', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_codecsmodule.c
CONST	ENDS
;	COMDAT utf_8_encode
_TEXT	SEGMENT
self$ = 64
args$ = 72
str$ = 80
errors$ = 88
utf_8_encode PROC					; COMDAT

; 736  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 737  :     PyObject *str, *v;
; 738  :     const char *errors = NULL;
; 739  : 
; 740  :     if (!PyArg_ParseTuple(args, "O|z:utf_8_encode",
; 741  :                           &str, &errors))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 4c 24 58	 lea	 r9, QWORD PTR errors$[rsp]
  0000c	4c 8d 44 24 50	 lea	 r8, QWORD PTR str$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@KFNHGNJL@O?$HMz?3utf_8_encode?$AA@
  00018	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0
  00021	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00026	85 c0		 test	 eax, eax
  00028	75 07		 jne	 SHORT $LN7@utf_8_enco

; 742  :         return NULL;

  0002a	33 c0		 xor	 eax, eax

; 753  : }

  0002c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00030	c3		 ret	 0
$LN7@utf_8_enco:

; 743  : 
; 744  :     str = PyUnicode_FromObject(str);

  00031	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  00036	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0003b	e8 00 00 00 00	 call	 PyUnicode_FromObject
  00040	48 89 44 24 50	 mov	 QWORD PTR str$[rsp], rax

; 745  :     if (str == NULL || PyUnicode_READY(str) < 0) {

  00045	48 85 c0	 test	 rax, rax
  00048	0f 84 af 00 00
	00		 je	 $LN3@utf_8_enco
  0004e	f6 40 70 80	 test	 BYTE PTR [rax+112], 128	; 00000080H
  00052	75 11		 jne	 SHORT $LN23@utf_8_enco
  00054	48 8b c8	 mov	 rcx, rax
  00057	e8 00 00 00 00	 call	 _PyUnicode_Ready
  0005c	85 c0		 test	 eax, eax
  0005e	78 44		 js	 SHORT $LN4@utf_8_enco
  00060	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
$LN23@utf_8_enco:

; 748  :     }
; 749  :     v = codec_tuple(PyUnicode_AsEncodedString(str, "utf-8", errors),
; 750  :                     PyUnicode_GET_LENGTH(str));

  00065	4c 8b 44 24 58	 mov	 r8, QWORD PTR errors$[rsp]
  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05CAMHEFLG@utf?98?$AA@
  00071	48 8b c8	 mov	 rcx, rax
  00074	e8 00 00 00 00	 call	 PyUnicode_AsEncodedString
  00079	48 8b 54 24 50	 mov	 rdx, QWORD PTR str$[rsp]
  0007e	48 8b 52 60	 mov	 rdx, QWORD PTR [rdx+96]
  00082	48 8b c8	 mov	 rcx, rax
  00085	e8 00 00 00 00	 call	 codec_tuple

; 751  :     Py_DECREF(str);

  0008a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  0008f	48 8b d8	 mov	 rbx, rax
  00092	e8 00 00 00 00	 call	 _Py_DecRef

; 752  :     return v;

  00097	48 8b c3	 mov	 rax, rbx
  0009a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 753  : }

  0009f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a3	c3		 ret	 0
$LN4@utf_8_enco:

; 746  :         Py_XDECREF(str);

  000a4	48 8b 5c 24 50	 mov	 rbx, QWORD PTR str$[rsp]
  000a9	48 85 db	 test	 rbx, rbx
  000ac	74 4f		 je	 SHORT $LN3@utf_8_enco
  000ae	e8 00 00 00 00	 call	 _Py_PXCTX
  000b3	85 c0		 test	 eax, eax
  000b5	75 46		 jne	 SHORT $LN3@utf_8_enco
  000b7	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000bb	a8 20		 test	 al, 32			; 00000020H
  000bd	75 60		 jne	 SHORT $LN16@utf_8_enco
  000bf	84 c0		 test	 al, al
  000c1	78 5c		 js	 SHORT $LN16@utf_8_enco
  000c3	a8 02		 test	 al, 2
  000c5	75 36		 jne	 SHORT $LN3@utf_8_enco
  000c7	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000cb	75 30		 jne	 SHORT $LN3@utf_8_enco
  000cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000db	4c 8b cb	 mov	 r9, rbx
  000de	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000e4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ec	e8 00 00 00 00	 call	 _PyParallel_Guard
  000f1	48 8b cb	 mov	 rcx, rbx
  000f4	85 c0		 test	 eax, eax
  000f6	74 11		 je	 SHORT $LN21@utf_8_enco
  000f8	e8 00 00 00 00	 call	 _Px_Dealloc
$LN3@utf_8_enco:

; 747  :         return NULL;

  000fd	33 c0		 xor	 eax, eax
  000ff	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 753  : }

  00104	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00108	c3		 ret	 0

; 746  :         Py_XDECREF(str);

$LN21@utf_8_enco:
  00109	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0010d	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00113	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 747  :         return NULL;

  00118	33 c0		 xor	 eax, eax

; 753  : }

  0011a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011e	c3		 ret	 0

; 746  :         Py_XDECREF(str);

$LN16@utf_8_enco:
  0011f	48 8b cb	 mov	 rcx, rbx
  00122	e8 00 00 00 00	 call	 Px_DecRef
  00127	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 747  :         return NULL;

  0012c	33 c0		 xor	 eax, eax

; 753  : }

  0012e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00132	c3		 ret	 0
utf_8_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@IILMGODK@O?$HMzi?3utf_16_encode?$AA@	; `string'
EXTRN	_PyUnicode_EncodeUTF16:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$utf_16_encode DD imagerel utf_16_encode
	DD	imagerel utf_16_encode+69
	DD	imagerel $unwind$utf_16_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$utf_16_encode DD imagerel utf_16_encode+69
	DD	imagerel utf_16_encode+177
	DD	imagerel $chain$0$utf_16_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$utf_16_encode DD imagerel utf_16_encode+177
	DD	imagerel utf_16_encode+278
	DD	imagerel $chain$2$utf_16_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$utf_16_encode DD imagerel utf_16_encode+278
	DD	imagerel utf_16_encode+300
	DD	imagerel $chain$4$utf_16_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$utf_16_encode DD imagerel utf_16_encode+300
	DD	imagerel utf_16_encode+320
	DD	imagerel $chain$6$utf_16_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$utf_16_encode DD 020021H
	DD	083400H
	DD	imagerel utf_16_encode
	DD	imagerel utf_16_encode+69
	DD	imagerel $unwind$utf_16_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$utf_16_encode DD 020021H
	DD	083400H
	DD	imagerel utf_16_encode
	DD	imagerel utf_16_encode+69
	DD	imagerel $unwind$utf_16_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$utf_16_encode DD 020021H
	DD	083400H
	DD	imagerel utf_16_encode
	DD	imagerel utf_16_encode+69
	DD	imagerel $unwind$utf_16_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$utf_16_encode DD 020521H
	DD	083405H
	DD	imagerel utf_16_encode
	DD	imagerel utf_16_encode+69
	DD	imagerel $unwind$utf_16_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_16_encode DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_0BD@IILMGODK@O?$HMzi?3utf_16_encode?$AA@
CONST	SEGMENT
??_C@_0BD@IILMGODK@O?$HMzi?3utf_16_encode?$AA@ DB 'O|zi:utf_16_encode', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_codecsmodule.c
CONST	ENDS
;	COMDAT utf_16_encode
_TEXT	SEGMENT
errors$ = 48
self$ = 80
args$ = 88
byteorder$ = 96
str$ = 104
utf_16_encode PROC					; COMDAT

; 765  : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 766  :     PyObject *str, *v;
; 767  :     const char *errors = NULL;

  00004	33 c9		 xor	 ecx, ecx
  00006	48 8b c2	 mov	 rax, rdx

; 768  :     int byteorder = 0;
; 769  : 
; 770  :     if (!PyArg_ParseTuple(args, "O|zi:utf_16_encode",
; 771  :                           &str, &errors, &byteorder))

  00009	4c 8d 4c 24 30	 lea	 r9, QWORD PTR errors$[rsp]
  0000e	48 89 4c 24 30	 mov	 QWORD PTR errors$[rsp], rcx
  00013	89 4c 24 60	 mov	 DWORD PTR byteorder$[rsp], ecx
  00017	48 8d 4c 24 60	 lea	 rcx, QWORD PTR byteorder$[rsp]
  0001c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00021	4c 8d 44 24 68	 lea	 r8, QWORD PTR str$[rsp]
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@IILMGODK@O?$HMzi?3utf_16_encode?$AA@
  0002d	48 8b c8	 mov	 rcx, rax
  00030	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00035	85 c0		 test	 eax, eax
  00037	75 07		 jne	 SHORT $LN7@utf_16_enc

; 772  :         return NULL;

  00039	33 c0		 xor	 eax, eax

; 783  : }

  0003b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0003f	c3		 ret	 0
$LN7@utf_16_enc:

; 773  : 
; 774  :     str = PyUnicode_FromObject(str);

  00040	48 8b 4c 24 68	 mov	 rcx, QWORD PTR str$[rsp]
  00045	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0004a	e8 00 00 00 00	 call	 PyUnicode_FromObject
  0004f	48 89 44 24 68	 mov	 QWORD PTR str$[rsp], rax

; 775  :     if (str == NULL || PyUnicode_READY(str) < 0) {

  00054	48 85 c0	 test	 rax, rax
  00057	0f 84 ad 00 00
	00		 je	 $LN3@utf_16_enc
  0005d	f6 40 70 80	 test	 BYTE PTR [rax+112], 128	; 00000080H
  00061	75 11		 jne	 SHORT $LN23@utf_16_enc
  00063	48 8b c8	 mov	 rcx, rax
  00066	e8 00 00 00 00	 call	 _PyUnicode_Ready
  0006b	85 c0		 test	 eax, eax
  0006d	78 42		 js	 SHORT $LN4@utf_16_enc
  0006f	48 8b 44 24 68	 mov	 rax, QWORD PTR str$[rsp]
$LN23@utf_16_enc:

; 778  :     }
; 779  :     v = codec_tuple(_PyUnicode_EncodeUTF16(str, errors, byteorder),
; 780  :                     PyUnicode_GET_LENGTH(str));

  00074	44 8b 44 24 60	 mov	 r8d, DWORD PTR byteorder$[rsp]
  00079	48 8b 54 24 30	 mov	 rdx, QWORD PTR errors$[rsp]
  0007e	48 8b c8	 mov	 rcx, rax
  00081	e8 00 00 00 00	 call	 _PyUnicode_EncodeUTF16
  00086	48 8b 54 24 68	 mov	 rdx, QWORD PTR str$[rsp]
  0008b	48 8b 52 60	 mov	 rdx, QWORD PTR [rdx+96]
  0008f	48 8b c8	 mov	 rcx, rax
  00092	e8 00 00 00 00	 call	 codec_tuple

; 781  :     Py_DECREF(str);

  00097	48 8b 4c 24 68	 mov	 rcx, QWORD PTR str$[rsp]
  0009c	48 8b d8	 mov	 rbx, rax
  0009f	e8 00 00 00 00	 call	 _Py_DecRef

; 782  :     return v;

  000a4	48 8b c3	 mov	 rax, rbx
  000a7	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 783  : }

  000ac	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000b0	c3		 ret	 0
$LN4@utf_16_enc:

; 776  :         Py_XDECREF(str);

  000b1	48 8b 5c 24 68	 mov	 rbx, QWORD PTR str$[rsp]
  000b6	48 85 db	 test	 rbx, rbx
  000b9	74 4f		 je	 SHORT $LN3@utf_16_enc
  000bb	e8 00 00 00 00	 call	 _Py_PXCTX
  000c0	85 c0		 test	 eax, eax
  000c2	75 46		 jne	 SHORT $LN3@utf_16_enc
  000c4	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000c8	a8 20		 test	 al, 32			; 00000020H
  000ca	75 60		 jne	 SHORT $LN16@utf_16_enc
  000cc	84 c0		 test	 al, al
  000ce	78 5c		 js	 SHORT $LN16@utf_16_enc
  000d0	a8 02		 test	 al, 2
  000d2	75 36		 jne	 SHORT $LN3@utf_16_enc
  000d4	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000d8	75 30		 jne	 SHORT $LN3@utf_16_enc
  000da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000e8	4c 8b cb	 mov	 r9, rbx
  000eb	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000f1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000f9	e8 00 00 00 00	 call	 _PyParallel_Guard
  000fe	48 8b cb	 mov	 rcx, rbx
  00101	85 c0		 test	 eax, eax
  00103	74 11		 je	 SHORT $LN21@utf_16_enc
  00105	e8 00 00 00 00	 call	 _Px_Dealloc
$LN3@utf_16_enc:

; 777  :         return NULL;

  0010a	33 c0		 xor	 eax, eax
  0010c	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 783  : }

  00111	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00115	c3		 ret	 0

; 776  :         Py_XDECREF(str);

$LN21@utf_16_enc:
  00116	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0011a	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00120	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 777  :         return NULL;

  00125	33 c0		 xor	 eax, eax

; 783  : }

  00127	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0012b	c3		 ret	 0

; 776  :         Py_XDECREF(str);

$LN16@utf_16_enc:
  0012c	48 8b cb	 mov	 rcx, rbx
  0012f	e8 00 00 00 00	 call	 Px_DecRef
  00134	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 777  :         return NULL;

  00139	33 c0		 xor	 eax, eax

; 783  : }

  0013b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0013f	c3		 ret	 0
utf_16_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@GODBGCOL@O?$HMz?3utf_16_le_encode?$AA@ ; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$utf_16_le_encode DD imagerel utf_16_le_encode
	DD	imagerel utf_16_le_encode+54
	DD	imagerel $unwind$utf_16_le_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$utf_16_le_encode DD imagerel utf_16_le_encode+54
	DD	imagerel utf_16_le_encode+161
	DD	imagerel $chain$0$utf_16_le_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$utf_16_le_encode DD imagerel utf_16_le_encode+161
	DD	imagerel utf_16_le_encode+262
	DD	imagerel $chain$2$utf_16_le_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$utf_16_le_encode DD imagerel utf_16_le_encode+262
	DD	imagerel utf_16_le_encode+284
	DD	imagerel $chain$4$utf_16_le_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$utf_16_le_encode DD imagerel utf_16_le_encode+284
	DD	imagerel utf_16_le_encode+304
	DD	imagerel $chain$6$utf_16_le_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$utf_16_le_encode DD 020021H
	DD	063400H
	DD	imagerel utf_16_le_encode
	DD	imagerel utf_16_le_encode+54
	DD	imagerel $unwind$utf_16_le_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$utf_16_le_encode DD 020021H
	DD	063400H
	DD	imagerel utf_16_le_encode
	DD	imagerel utf_16_le_encode+54
	DD	imagerel $unwind$utf_16_le_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$utf_16_le_encode DD 020021H
	DD	063400H
	DD	imagerel utf_16_le_encode
	DD	imagerel utf_16_le_encode+54
	DD	imagerel $unwind$utf_16_le_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$utf_16_le_encode DD 020521H
	DD	063405H
	DD	imagerel utf_16_le_encode
	DD	imagerel utf_16_le_encode+54
	DD	imagerel $unwind$utf_16_le_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_16_le_encode DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0BF@GODBGCOL@O?$HMz?3utf_16_le_encode?$AA@
CONST	SEGMENT
??_C@_0BF@GODBGCOL@O?$HMz?3utf_16_le_encode?$AA@ DB 'O|z:utf_16_le_encode'
	DB	00H						; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_codecsmodule.c
CONST	ENDS
;	COMDAT utf_16_le_encode
_TEXT	SEGMENT
self$ = 64
args$ = 72
str$ = 80
errors$ = 88
utf_16_le_encode PROC					; COMDAT

; 788  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 789  :     PyObject *str, *v;
; 790  :     const char *errors = NULL;
; 791  : 
; 792  :     if (!PyArg_ParseTuple(args, "O|z:utf_16_le_encode",
; 793  :                           &str, &errors))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 4c 24 58	 lea	 r9, QWORD PTR errors$[rsp]
  0000c	4c 8d 44 24 50	 lea	 r8, QWORD PTR str$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@GODBGCOL@O?$HMz?3utf_16_le_encode?$AA@
  00018	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0
  00021	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00026	85 c0		 test	 eax, eax
  00028	75 07		 jne	 SHORT $LN7@utf_16_le_@2

; 794  :         return NULL;

  0002a	33 c0		 xor	 eax, eax

; 805  : }

  0002c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00030	c3		 ret	 0
$LN7@utf_16_le_@2:

; 795  : 
; 796  :     str = PyUnicode_FromObject(str);

  00031	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  00036	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0003b	e8 00 00 00 00	 call	 PyUnicode_FromObject
  00040	48 89 44 24 50	 mov	 QWORD PTR str$[rsp], rax

; 797  :     if (str == NULL || PyUnicode_READY(str) < 0) {

  00045	48 85 c0	 test	 rax, rax
  00048	0f 84 ac 00 00
	00		 je	 $LN3@utf_16_le_@2
  0004e	f6 40 70 80	 test	 BYTE PTR [rax+112], 128	; 00000080H
  00052	75 11		 jne	 SHORT $LN23@utf_16_le_@2
  00054	48 8b c8	 mov	 rcx, rax
  00057	e8 00 00 00 00	 call	 _PyUnicode_Ready
  0005c	85 c0		 test	 eax, eax
  0005e	78 41		 js	 SHORT $LN4@utf_16_le_@2
  00060	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
$LN23@utf_16_le_@2:

; 800  :     }
; 801  :     v = codec_tuple(_PyUnicode_EncodeUTF16(str, errors, -1),
; 802  :                     PyUnicode_GET_LENGTH(str));

  00065	48 8b 54 24 58	 mov	 rdx, QWORD PTR errors$[rsp]
  0006a	41 83 c8 ff	 or	 r8d, -1
  0006e	48 8b c8	 mov	 rcx, rax
  00071	e8 00 00 00 00	 call	 _PyUnicode_EncodeUTF16
  00076	48 8b 54 24 50	 mov	 rdx, QWORD PTR str$[rsp]
  0007b	48 8b 52 60	 mov	 rdx, QWORD PTR [rdx+96]
  0007f	48 8b c8	 mov	 rcx, rax
  00082	e8 00 00 00 00	 call	 codec_tuple

; 803  :     Py_DECREF(str);

  00087	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  0008c	48 8b d8	 mov	 rbx, rax
  0008f	e8 00 00 00 00	 call	 _Py_DecRef

; 804  :     return v;

  00094	48 8b c3	 mov	 rax, rbx
  00097	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 805  : }

  0009c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a0	c3		 ret	 0
$LN4@utf_16_le_@2:

; 798  :         Py_XDECREF(str);

  000a1	48 8b 5c 24 50	 mov	 rbx, QWORD PTR str$[rsp]
  000a6	48 85 db	 test	 rbx, rbx
  000a9	74 4f		 je	 SHORT $LN3@utf_16_le_@2
  000ab	e8 00 00 00 00	 call	 _Py_PXCTX
  000b0	85 c0		 test	 eax, eax
  000b2	75 46		 jne	 SHORT $LN3@utf_16_le_@2
  000b4	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000b8	a8 20		 test	 al, 32			; 00000020H
  000ba	75 60		 jne	 SHORT $LN16@utf_16_le_@2
  000bc	84 c0		 test	 al, al
  000be	78 5c		 js	 SHORT $LN16@utf_16_le_@2
  000c0	a8 02		 test	 al, 2
  000c2	75 36		 jne	 SHORT $LN3@utf_16_le_@2
  000c4	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000c8	75 30		 jne	 SHORT $LN3@utf_16_le_@2
  000ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000d8	4c 8b cb	 mov	 r9, rbx
  000db	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000e1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000e9	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ee	48 8b cb	 mov	 rcx, rbx
  000f1	85 c0		 test	 eax, eax
  000f3	74 11		 je	 SHORT $LN21@utf_16_le_@2
  000f5	e8 00 00 00 00	 call	 _Px_Dealloc
$LN3@utf_16_le_@2:

; 799  :         return NULL;

  000fa	33 c0		 xor	 eax, eax
  000fc	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 805  : }

  00101	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00105	c3		 ret	 0

; 798  :         Py_XDECREF(str);

$LN21@utf_16_le_@2:
  00106	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0010a	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00110	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 799  :         return NULL;

  00115	33 c0		 xor	 eax, eax

; 805  : }

  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0

; 798  :         Py_XDECREF(str);

$LN16@utf_16_le_@2:
  0011c	48 8b cb	 mov	 rcx, rbx
  0011f	e8 00 00 00 00	 call	 Px_DecRef
  00124	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 799  :         return NULL;

  00129	33 c0		 xor	 eax, eax

; 805  : }

  0012b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0012f	c3		 ret	 0
utf_16_le_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@HAPIFCFI@O?$HMz?3utf_16_be_encode?$AA@ ; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$utf_16_be_encode DD imagerel utf_16_be_encode
	DD	imagerel utf_16_be_encode+54
	DD	imagerel $unwind$utf_16_be_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$utf_16_be_encode DD imagerel utf_16_be_encode+54
	DD	imagerel utf_16_be_encode+163
	DD	imagerel $chain$0$utf_16_be_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$utf_16_be_encode DD imagerel utf_16_be_encode+163
	DD	imagerel utf_16_be_encode+264
	DD	imagerel $chain$2$utf_16_be_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$utf_16_be_encode DD imagerel utf_16_be_encode+264
	DD	imagerel utf_16_be_encode+286
	DD	imagerel $chain$4$utf_16_be_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$utf_16_be_encode DD imagerel utf_16_be_encode+286
	DD	imagerel utf_16_be_encode+306
	DD	imagerel $chain$6$utf_16_be_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$utf_16_be_encode DD 020021H
	DD	063400H
	DD	imagerel utf_16_be_encode
	DD	imagerel utf_16_be_encode+54
	DD	imagerel $unwind$utf_16_be_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$utf_16_be_encode DD 020021H
	DD	063400H
	DD	imagerel utf_16_be_encode
	DD	imagerel utf_16_be_encode+54
	DD	imagerel $unwind$utf_16_be_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$utf_16_be_encode DD 020021H
	DD	063400H
	DD	imagerel utf_16_be_encode
	DD	imagerel utf_16_be_encode+54
	DD	imagerel $unwind$utf_16_be_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$utf_16_be_encode DD 020521H
	DD	063405H
	DD	imagerel utf_16_be_encode
	DD	imagerel utf_16_be_encode+54
	DD	imagerel $unwind$utf_16_be_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_16_be_encode DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0BF@HAPIFCFI@O?$HMz?3utf_16_be_encode?$AA@
CONST	SEGMENT
??_C@_0BF@HAPIFCFI@O?$HMz?3utf_16_be_encode?$AA@ DB 'O|z:utf_16_be_encode'
	DB	00H						; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_codecsmodule.c
CONST	ENDS
;	COMDAT utf_16_be_encode
_TEXT	SEGMENT
self$ = 64
args$ = 72
str$ = 80
errors$ = 88
utf_16_be_encode PROC					; COMDAT

; 810  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 811  :     PyObject *str, *v;
; 812  :     const char *errors = NULL;
; 813  : 
; 814  :     if (!PyArg_ParseTuple(args, "O|z:utf_16_be_encode",
; 815  :                           &str, &errors))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 4c 24 58	 lea	 r9, QWORD PTR errors$[rsp]
  0000c	4c 8d 44 24 50	 lea	 r8, QWORD PTR str$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@HAPIFCFI@O?$HMz?3utf_16_be_encode?$AA@
  00018	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0
  00021	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00026	85 c0		 test	 eax, eax
  00028	75 07		 jne	 SHORT $LN7@utf_16_be_@2

; 816  :         return NULL;

  0002a	33 c0		 xor	 eax, eax

; 827  : }

  0002c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00030	c3		 ret	 0
$LN7@utf_16_be_@2:

; 817  : 
; 818  :     str = PyUnicode_FromObject(str);

  00031	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  00036	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0003b	e8 00 00 00 00	 call	 PyUnicode_FromObject
  00040	48 89 44 24 50	 mov	 QWORD PTR str$[rsp], rax

; 819  :     if (str == NULL || PyUnicode_READY(str) < 0) {

  00045	48 85 c0	 test	 rax, rax
  00048	0f 84 ae 00 00
	00		 je	 $LN3@utf_16_be_@2
  0004e	f6 40 70 80	 test	 BYTE PTR [rax+112], 128	; 00000080H
  00052	75 11		 jne	 SHORT $LN23@utf_16_be_@2
  00054	48 8b c8	 mov	 rcx, rax
  00057	e8 00 00 00 00	 call	 _PyUnicode_Ready
  0005c	85 c0		 test	 eax, eax
  0005e	78 43		 js	 SHORT $LN4@utf_16_be_@2
  00060	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
$LN23@utf_16_be_@2:

; 822  :     }
; 823  :     v = codec_tuple(_PyUnicode_EncodeUTF16(str, errors, +1),
; 824  :                     PyUnicode_GET_LENGTH(str));

  00065	48 8b 54 24 58	 mov	 rdx, QWORD PTR errors$[rsp]
  0006a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00070	48 8b c8	 mov	 rcx, rax
  00073	e8 00 00 00 00	 call	 _PyUnicode_EncodeUTF16
  00078	48 8b 54 24 50	 mov	 rdx, QWORD PTR str$[rsp]
  0007d	48 8b 52 60	 mov	 rdx, QWORD PTR [rdx+96]
  00081	48 8b c8	 mov	 rcx, rax
  00084	e8 00 00 00 00	 call	 codec_tuple

; 825  :     Py_DECREF(str);

  00089	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  0008e	48 8b d8	 mov	 rbx, rax
  00091	e8 00 00 00 00	 call	 _Py_DecRef

; 826  :     return v;

  00096	48 8b c3	 mov	 rax, rbx
  00099	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 827  : }

  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
$LN4@utf_16_be_@2:

; 820  :         Py_XDECREF(str);

  000a3	48 8b 5c 24 50	 mov	 rbx, QWORD PTR str$[rsp]
  000a8	48 85 db	 test	 rbx, rbx
  000ab	74 4f		 je	 SHORT $LN3@utf_16_be_@2
  000ad	e8 00 00 00 00	 call	 _Py_PXCTX
  000b2	85 c0		 test	 eax, eax
  000b4	75 46		 jne	 SHORT $LN3@utf_16_be_@2
  000b6	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000ba	a8 20		 test	 al, 32			; 00000020H
  000bc	75 60		 jne	 SHORT $LN16@utf_16_be_@2
  000be	84 c0		 test	 al, al
  000c0	78 5c		 js	 SHORT $LN16@utf_16_be_@2
  000c2	a8 02		 test	 al, 2
  000c4	75 36		 jne	 SHORT $LN3@utf_16_be_@2
  000c6	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000ca	75 30		 jne	 SHORT $LN3@utf_16_be_@2
  000cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000da	4c 8b cb	 mov	 r9, rbx
  000dd	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000e3	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000eb	e8 00 00 00 00	 call	 _PyParallel_Guard
  000f0	48 8b cb	 mov	 rcx, rbx
  000f3	85 c0		 test	 eax, eax
  000f5	74 11		 je	 SHORT $LN21@utf_16_be_@2
  000f7	e8 00 00 00 00	 call	 _Px_Dealloc
$LN3@utf_16_be_@2:

; 821  :         return NULL;

  000fc	33 c0		 xor	 eax, eax
  000fe	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 827  : }

  00103	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00107	c3		 ret	 0

; 820  :         Py_XDECREF(str);

$LN21@utf_16_be_@2:
  00108	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0010c	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00112	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 821  :         return NULL;

  00117	33 c0		 xor	 eax, eax

; 827  : }

  00119	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011d	c3		 ret	 0

; 820  :         Py_XDECREF(str);

$LN16@utf_16_be_@2:
  0011e	48 8b cb	 mov	 rcx, rbx
  00121	e8 00 00 00 00	 call	 Px_DecRef
  00126	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 821  :         return NULL;

  0012b	33 c0		 xor	 eax, eax

; 827  : }

  0012d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00131	c3		 ret	 0
utf_16_be_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@NBKFOPAL@O?$HMzi?3utf_32_encode?$AA@	; `string'
EXTRN	_PyUnicode_EncodeUTF32:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$utf_32_encode DD imagerel utf_32_encode
	DD	imagerel utf_32_encode+69
	DD	imagerel $unwind$utf_32_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$utf_32_encode DD imagerel utf_32_encode+69
	DD	imagerel utf_32_encode+177
	DD	imagerel $chain$0$utf_32_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$utf_32_encode DD imagerel utf_32_encode+177
	DD	imagerel utf_32_encode+278
	DD	imagerel $chain$2$utf_32_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$utf_32_encode DD imagerel utf_32_encode+278
	DD	imagerel utf_32_encode+300
	DD	imagerel $chain$4$utf_32_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$utf_32_encode DD imagerel utf_32_encode+300
	DD	imagerel utf_32_encode+320
	DD	imagerel $chain$6$utf_32_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$utf_32_encode DD 020021H
	DD	083400H
	DD	imagerel utf_32_encode
	DD	imagerel utf_32_encode+69
	DD	imagerel $unwind$utf_32_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$utf_32_encode DD 020021H
	DD	083400H
	DD	imagerel utf_32_encode
	DD	imagerel utf_32_encode+69
	DD	imagerel $unwind$utf_32_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$utf_32_encode DD 020021H
	DD	083400H
	DD	imagerel utf_32_encode
	DD	imagerel utf_32_encode+69
	DD	imagerel $unwind$utf_32_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$utf_32_encode DD 020521H
	DD	083405H
	DD	imagerel utf_32_encode
	DD	imagerel utf_32_encode+69
	DD	imagerel $unwind$utf_32_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_32_encode DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_0BD@NBKFOPAL@O?$HMzi?3utf_32_encode?$AA@
CONST	SEGMENT
??_C@_0BD@NBKFOPAL@O?$HMzi?3utf_32_encode?$AA@ DB 'O|zi:utf_32_encode', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_codecsmodule.c
CONST	ENDS
;	COMDAT utf_32_encode
_TEXT	SEGMENT
errors$ = 48
self$ = 80
args$ = 88
byteorder$ = 96
str$ = 104
utf_32_encode PROC					; COMDAT

; 839  : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 840  :     PyObject *str, *v;
; 841  :     const char *errors = NULL;

  00004	33 c9		 xor	 ecx, ecx
  00006	48 8b c2	 mov	 rax, rdx

; 842  :     int byteorder = 0;
; 843  : 
; 844  :     if (!PyArg_ParseTuple(args, "O|zi:utf_32_encode",
; 845  :                           &str, &errors, &byteorder))

  00009	4c 8d 4c 24 30	 lea	 r9, QWORD PTR errors$[rsp]
  0000e	48 89 4c 24 30	 mov	 QWORD PTR errors$[rsp], rcx
  00013	89 4c 24 60	 mov	 DWORD PTR byteorder$[rsp], ecx
  00017	48 8d 4c 24 60	 lea	 rcx, QWORD PTR byteorder$[rsp]
  0001c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00021	4c 8d 44 24 68	 lea	 r8, QWORD PTR str$[rsp]
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@NBKFOPAL@O?$HMzi?3utf_32_encode?$AA@
  0002d	48 8b c8	 mov	 rcx, rax
  00030	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00035	85 c0		 test	 eax, eax
  00037	75 07		 jne	 SHORT $LN7@utf_32_enc

; 846  :         return NULL;

  00039	33 c0		 xor	 eax, eax

; 857  : }

  0003b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0003f	c3		 ret	 0
$LN7@utf_32_enc:

; 847  : 
; 848  :     str = PyUnicode_FromObject(str);

  00040	48 8b 4c 24 68	 mov	 rcx, QWORD PTR str$[rsp]
  00045	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0004a	e8 00 00 00 00	 call	 PyUnicode_FromObject
  0004f	48 89 44 24 68	 mov	 QWORD PTR str$[rsp], rax

; 849  :     if (str == NULL || PyUnicode_READY(str) < 0) {

  00054	48 85 c0	 test	 rax, rax
  00057	0f 84 ad 00 00
	00		 je	 $LN3@utf_32_enc
  0005d	f6 40 70 80	 test	 BYTE PTR [rax+112], 128	; 00000080H
  00061	75 11		 jne	 SHORT $LN23@utf_32_enc
  00063	48 8b c8	 mov	 rcx, rax
  00066	e8 00 00 00 00	 call	 _PyUnicode_Ready
  0006b	85 c0		 test	 eax, eax
  0006d	78 42		 js	 SHORT $LN4@utf_32_enc
  0006f	48 8b 44 24 68	 mov	 rax, QWORD PTR str$[rsp]
$LN23@utf_32_enc:

; 852  :     }
; 853  :     v = codec_tuple(_PyUnicode_EncodeUTF32(str, errors, byteorder),
; 854  :                     PyUnicode_GET_LENGTH(str));

  00074	44 8b 44 24 60	 mov	 r8d, DWORD PTR byteorder$[rsp]
  00079	48 8b 54 24 30	 mov	 rdx, QWORD PTR errors$[rsp]
  0007e	48 8b c8	 mov	 rcx, rax
  00081	e8 00 00 00 00	 call	 _PyUnicode_EncodeUTF32
  00086	48 8b 54 24 68	 mov	 rdx, QWORD PTR str$[rsp]
  0008b	48 8b 52 60	 mov	 rdx, QWORD PTR [rdx+96]
  0008f	48 8b c8	 mov	 rcx, rax
  00092	e8 00 00 00 00	 call	 codec_tuple

; 855  :     Py_DECREF(str);

  00097	48 8b 4c 24 68	 mov	 rcx, QWORD PTR str$[rsp]
  0009c	48 8b d8	 mov	 rbx, rax
  0009f	e8 00 00 00 00	 call	 _Py_DecRef

; 856  :     return v;

  000a4	48 8b c3	 mov	 rax, rbx
  000a7	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 857  : }

  000ac	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000b0	c3		 ret	 0
$LN4@utf_32_enc:

; 850  :         Py_XDECREF(str);

  000b1	48 8b 5c 24 68	 mov	 rbx, QWORD PTR str$[rsp]
  000b6	48 85 db	 test	 rbx, rbx
  000b9	74 4f		 je	 SHORT $LN3@utf_32_enc
  000bb	e8 00 00 00 00	 call	 _Py_PXCTX
  000c0	85 c0		 test	 eax, eax
  000c2	75 46		 jne	 SHORT $LN3@utf_32_enc
  000c4	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000c8	a8 20		 test	 al, 32			; 00000020H
  000ca	75 60		 jne	 SHORT $LN16@utf_32_enc
  000cc	84 c0		 test	 al, al
  000ce	78 5c		 js	 SHORT $LN16@utf_32_enc
  000d0	a8 02		 test	 al, 2
  000d2	75 36		 jne	 SHORT $LN3@utf_32_enc
  000d4	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000d8	75 30		 jne	 SHORT $LN3@utf_32_enc
  000da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000e8	4c 8b cb	 mov	 r9, rbx
  000eb	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000f1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000f9	e8 00 00 00 00	 call	 _PyParallel_Guard
  000fe	48 8b cb	 mov	 rcx, rbx
  00101	85 c0		 test	 eax, eax
  00103	74 11		 je	 SHORT $LN21@utf_32_enc
  00105	e8 00 00 00 00	 call	 _Px_Dealloc
$LN3@utf_32_enc:

; 851  :         return NULL;

  0010a	33 c0		 xor	 eax, eax
  0010c	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 857  : }

  00111	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00115	c3		 ret	 0

; 850  :         Py_XDECREF(str);

$LN21@utf_32_enc:
  00116	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0011a	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00120	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 851  :         return NULL;

  00125	33 c0		 xor	 eax, eax

; 857  : }

  00127	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0012b	c3		 ret	 0

; 850  :         Py_XDECREF(str);

$LN16@utf_32_enc:
  0012c	48 8b cb	 mov	 rcx, rbx
  0012f	e8 00 00 00 00	 call	 Px_DecRef
  00134	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 851  :         return NULL;

  00139	33 c0		 xor	 eax, eax

; 857  : }

  0013b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0013f	c3		 ret	 0
utf_32_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@NGLOMNP@O?$HMz?3utf_32_le_encode?$AA@	; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$utf_32_le_encode DD imagerel utf_32_le_encode
	DD	imagerel utf_32_le_encode+54
	DD	imagerel $unwind$utf_32_le_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$utf_32_le_encode DD imagerel utf_32_le_encode+54
	DD	imagerel utf_32_le_encode+161
	DD	imagerel $chain$0$utf_32_le_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$utf_32_le_encode DD imagerel utf_32_le_encode+161
	DD	imagerel utf_32_le_encode+262
	DD	imagerel $chain$2$utf_32_le_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$utf_32_le_encode DD imagerel utf_32_le_encode+262
	DD	imagerel utf_32_le_encode+284
	DD	imagerel $chain$4$utf_32_le_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$utf_32_le_encode DD imagerel utf_32_le_encode+284
	DD	imagerel utf_32_le_encode+304
	DD	imagerel $chain$6$utf_32_le_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$utf_32_le_encode DD 020021H
	DD	063400H
	DD	imagerel utf_32_le_encode
	DD	imagerel utf_32_le_encode+54
	DD	imagerel $unwind$utf_32_le_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$utf_32_le_encode DD 020021H
	DD	063400H
	DD	imagerel utf_32_le_encode
	DD	imagerel utf_32_le_encode+54
	DD	imagerel $unwind$utf_32_le_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$utf_32_le_encode DD 020021H
	DD	063400H
	DD	imagerel utf_32_le_encode
	DD	imagerel utf_32_le_encode+54
	DD	imagerel $unwind$utf_32_le_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$utf_32_le_encode DD 020521H
	DD	063405H
	DD	imagerel utf_32_le_encode
	DD	imagerel utf_32_le_encode+54
	DD	imagerel $unwind$utf_32_le_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_32_le_encode DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0BF@NGLOMNP@O?$HMz?3utf_32_le_encode?$AA@
CONST	SEGMENT
??_C@_0BF@NGLOMNP@O?$HMz?3utf_32_le_encode?$AA@ DB 'O|z:utf_32_le_encode', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_codecsmodule.c
CONST	ENDS
;	COMDAT utf_32_le_encode
_TEXT	SEGMENT
self$ = 64
args$ = 72
str$ = 80
errors$ = 88
utf_32_le_encode PROC					; COMDAT

; 862  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 863  :     PyObject *str, *v;
; 864  :     const char *errors = NULL;
; 865  : 
; 866  :     if (!PyArg_ParseTuple(args, "O|z:utf_32_le_encode",
; 867  :                           &str, &errors))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 4c 24 58	 lea	 r9, QWORD PTR errors$[rsp]
  0000c	4c 8d 44 24 50	 lea	 r8, QWORD PTR str$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@NGLOMNP@O?$HMz?3utf_32_le_encode?$AA@
  00018	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0
  00021	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00026	85 c0		 test	 eax, eax
  00028	75 07		 jne	 SHORT $LN7@utf_32_le_@2

; 868  :         return NULL;

  0002a	33 c0		 xor	 eax, eax

; 879  : }

  0002c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00030	c3		 ret	 0
$LN7@utf_32_le_@2:

; 869  : 
; 870  :     str = PyUnicode_FromObject(str);

  00031	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  00036	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0003b	e8 00 00 00 00	 call	 PyUnicode_FromObject
  00040	48 89 44 24 50	 mov	 QWORD PTR str$[rsp], rax

; 871  :     if (str == NULL || PyUnicode_READY(str) < 0) {

  00045	48 85 c0	 test	 rax, rax
  00048	0f 84 ac 00 00
	00		 je	 $LN3@utf_32_le_@2
  0004e	f6 40 70 80	 test	 BYTE PTR [rax+112], 128	; 00000080H
  00052	75 11		 jne	 SHORT $LN23@utf_32_le_@2
  00054	48 8b c8	 mov	 rcx, rax
  00057	e8 00 00 00 00	 call	 _PyUnicode_Ready
  0005c	85 c0		 test	 eax, eax
  0005e	78 41		 js	 SHORT $LN4@utf_32_le_@2
  00060	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
$LN23@utf_32_le_@2:

; 874  :     }
; 875  :     v = codec_tuple(_PyUnicode_EncodeUTF32(str, errors, -1),
; 876  :                     PyUnicode_GET_LENGTH(str));

  00065	48 8b 54 24 58	 mov	 rdx, QWORD PTR errors$[rsp]
  0006a	41 83 c8 ff	 or	 r8d, -1
  0006e	48 8b c8	 mov	 rcx, rax
  00071	e8 00 00 00 00	 call	 _PyUnicode_EncodeUTF32
  00076	48 8b 54 24 50	 mov	 rdx, QWORD PTR str$[rsp]
  0007b	48 8b 52 60	 mov	 rdx, QWORD PTR [rdx+96]
  0007f	48 8b c8	 mov	 rcx, rax
  00082	e8 00 00 00 00	 call	 codec_tuple

; 877  :     Py_DECREF(str);

  00087	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  0008c	48 8b d8	 mov	 rbx, rax
  0008f	e8 00 00 00 00	 call	 _Py_DecRef

; 878  :     return v;

  00094	48 8b c3	 mov	 rax, rbx
  00097	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 879  : }

  0009c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a0	c3		 ret	 0
$LN4@utf_32_le_@2:

; 872  :         Py_XDECREF(str);

  000a1	48 8b 5c 24 50	 mov	 rbx, QWORD PTR str$[rsp]
  000a6	48 85 db	 test	 rbx, rbx
  000a9	74 4f		 je	 SHORT $LN3@utf_32_le_@2
  000ab	e8 00 00 00 00	 call	 _Py_PXCTX
  000b0	85 c0		 test	 eax, eax
  000b2	75 46		 jne	 SHORT $LN3@utf_32_le_@2
  000b4	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000b8	a8 20		 test	 al, 32			; 00000020H
  000ba	75 60		 jne	 SHORT $LN16@utf_32_le_@2
  000bc	84 c0		 test	 al, al
  000be	78 5c		 js	 SHORT $LN16@utf_32_le_@2
  000c0	a8 02		 test	 al, 2
  000c2	75 36		 jne	 SHORT $LN3@utf_32_le_@2
  000c4	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000c8	75 30		 jne	 SHORT $LN3@utf_32_le_@2
  000ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000d8	4c 8b cb	 mov	 r9, rbx
  000db	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000e1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000e9	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ee	48 8b cb	 mov	 rcx, rbx
  000f1	85 c0		 test	 eax, eax
  000f3	74 11		 je	 SHORT $LN21@utf_32_le_@2
  000f5	e8 00 00 00 00	 call	 _Px_Dealloc
$LN3@utf_32_le_@2:

; 873  :         return NULL;

  000fa	33 c0		 xor	 eax, eax
  000fc	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 879  : }

  00101	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00105	c3		 ret	 0

; 872  :         Py_XDECREF(str);

$LN21@utf_32_le_@2:
  00106	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0010a	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00110	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 873  :         return NULL;

  00115	33 c0		 xor	 eax, eax

; 879  : }

  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0

; 872  :         Py_XDECREF(str);

$LN16@utf_32_le_@2:
  0011c	48 8b cb	 mov	 rcx, rbx
  0011f	e8 00 00 00 00	 call	 Px_DecRef
  00124	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 873  :         return NULL;

  00129	33 c0		 xor	 eax, eax

; 879  : }

  0012b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0012f	c3		 ret	 0
utf_32_le_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@BDKCNMGM@O?$HMz?3utf_32_be_encode?$AA@ ; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$utf_32_be_encode DD imagerel utf_32_be_encode
	DD	imagerel utf_32_be_encode+54
	DD	imagerel $unwind$utf_32_be_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$utf_32_be_encode DD imagerel utf_32_be_encode+54
	DD	imagerel utf_32_be_encode+163
	DD	imagerel $chain$0$utf_32_be_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$utf_32_be_encode DD imagerel utf_32_be_encode+163
	DD	imagerel utf_32_be_encode+264
	DD	imagerel $chain$2$utf_32_be_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$utf_32_be_encode DD imagerel utf_32_be_encode+264
	DD	imagerel utf_32_be_encode+286
	DD	imagerel $chain$4$utf_32_be_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$utf_32_be_encode DD imagerel utf_32_be_encode+286
	DD	imagerel utf_32_be_encode+306
	DD	imagerel $chain$6$utf_32_be_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$utf_32_be_encode DD 020021H
	DD	063400H
	DD	imagerel utf_32_be_encode
	DD	imagerel utf_32_be_encode+54
	DD	imagerel $unwind$utf_32_be_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$utf_32_be_encode DD 020021H
	DD	063400H
	DD	imagerel utf_32_be_encode
	DD	imagerel utf_32_be_encode+54
	DD	imagerel $unwind$utf_32_be_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$utf_32_be_encode DD 020021H
	DD	063400H
	DD	imagerel utf_32_be_encode
	DD	imagerel utf_32_be_encode+54
	DD	imagerel $unwind$utf_32_be_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$utf_32_be_encode DD 020521H
	DD	063405H
	DD	imagerel utf_32_be_encode
	DD	imagerel utf_32_be_encode+54
	DD	imagerel $unwind$utf_32_be_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_32_be_encode DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0BF@BDKCNMGM@O?$HMz?3utf_32_be_encode?$AA@
CONST	SEGMENT
??_C@_0BF@BDKCNMGM@O?$HMz?3utf_32_be_encode?$AA@ DB 'O|z:utf_32_be_encode'
	DB	00H						; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_codecsmodule.c
CONST	ENDS
;	COMDAT utf_32_be_encode
_TEXT	SEGMENT
self$ = 64
args$ = 72
str$ = 80
errors$ = 88
utf_32_be_encode PROC					; COMDAT

; 884  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 885  :     PyObject *str, *v;
; 886  :     const char *errors = NULL;
; 887  : 
; 888  :     if (!PyArg_ParseTuple(args, "O|z:utf_32_be_encode",
; 889  :                           &str, &errors))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 4c 24 58	 lea	 r9, QWORD PTR errors$[rsp]
  0000c	4c 8d 44 24 50	 lea	 r8, QWORD PTR str$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@BDKCNMGM@O?$HMz?3utf_32_be_encode?$AA@
  00018	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0
  00021	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00026	85 c0		 test	 eax, eax
  00028	75 07		 jne	 SHORT $LN7@utf_32_be_@2

; 890  :         return NULL;

  0002a	33 c0		 xor	 eax, eax

; 901  : }

  0002c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00030	c3		 ret	 0
$LN7@utf_32_be_@2:

; 891  : 
; 892  :     str = PyUnicode_FromObject(str);

  00031	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  00036	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0003b	e8 00 00 00 00	 call	 PyUnicode_FromObject
  00040	48 89 44 24 50	 mov	 QWORD PTR str$[rsp], rax

; 893  :     if (str == NULL || PyUnicode_READY(str) < 0) {

  00045	48 85 c0	 test	 rax, rax
  00048	0f 84 ae 00 00
	00		 je	 $LN3@utf_32_be_@2
  0004e	f6 40 70 80	 test	 BYTE PTR [rax+112], 128	; 00000080H
  00052	75 11		 jne	 SHORT $LN23@utf_32_be_@2
  00054	48 8b c8	 mov	 rcx, rax
  00057	e8 00 00 00 00	 call	 _PyUnicode_Ready
  0005c	85 c0		 test	 eax, eax
  0005e	78 43		 js	 SHORT $LN4@utf_32_be_@2
  00060	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
$LN23@utf_32_be_@2:

; 896  :     }
; 897  :     v = codec_tuple(_PyUnicode_EncodeUTF32(str, errors, +1),
; 898  :                     PyUnicode_GET_LENGTH(str));

  00065	48 8b 54 24 58	 mov	 rdx, QWORD PTR errors$[rsp]
  0006a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00070	48 8b c8	 mov	 rcx, rax
  00073	e8 00 00 00 00	 call	 _PyUnicode_EncodeUTF32
  00078	48 8b 54 24 50	 mov	 rdx, QWORD PTR str$[rsp]
  0007d	48 8b 52 60	 mov	 rdx, QWORD PTR [rdx+96]
  00081	48 8b c8	 mov	 rcx, rax
  00084	e8 00 00 00 00	 call	 codec_tuple

; 899  :     Py_DECREF(str);

  00089	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  0008e	48 8b d8	 mov	 rbx, rax
  00091	e8 00 00 00 00	 call	 _Py_DecRef

; 900  :     return v;

  00096	48 8b c3	 mov	 rax, rbx
  00099	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 901  : }

  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
$LN4@utf_32_be_@2:

; 894  :         Py_XDECREF(str);

  000a3	48 8b 5c 24 50	 mov	 rbx, QWORD PTR str$[rsp]
  000a8	48 85 db	 test	 rbx, rbx
  000ab	74 4f		 je	 SHORT $LN3@utf_32_be_@2
  000ad	e8 00 00 00 00	 call	 _Py_PXCTX
  000b2	85 c0		 test	 eax, eax
  000b4	75 46		 jne	 SHORT $LN3@utf_32_be_@2
  000b6	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000ba	a8 20		 test	 al, 32			; 00000020H
  000bc	75 60		 jne	 SHORT $LN16@utf_32_be_@2
  000be	84 c0		 test	 al, al
  000c0	78 5c		 js	 SHORT $LN16@utf_32_be_@2
  000c2	a8 02		 test	 al, 2
  000c4	75 36		 jne	 SHORT $LN3@utf_32_be_@2
  000c6	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000ca	75 30		 jne	 SHORT $LN3@utf_32_be_@2
  000cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000da	4c 8b cb	 mov	 r9, rbx
  000dd	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000e3	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000eb	e8 00 00 00 00	 call	 _PyParallel_Guard
  000f0	48 8b cb	 mov	 rcx, rbx
  000f3	85 c0		 test	 eax, eax
  000f5	74 11		 je	 SHORT $LN21@utf_32_be_@2
  000f7	e8 00 00 00 00	 call	 _Px_Dealloc
$LN3@utf_32_be_@2:

; 895  :         return NULL;

  000fc	33 c0		 xor	 eax, eax
  000fe	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 901  : }

  00103	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00107	c3		 ret	 0

; 894  :         Py_XDECREF(str);

$LN21@utf_32_be_@2:
  00108	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0010c	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00112	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 895  :         return NULL;

  00117	33 c0		 xor	 eax, eax

; 901  : }

  00119	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011d	c3		 ret	 0

; 894  :         Py_XDECREF(str);

$LN16@utf_32_be_@2:
  0011e	48 8b cb	 mov	 rcx, rbx
  00121	e8 00 00 00 00	 call	 Px_DecRef
  00126	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 895  :         return NULL;

  0012b	33 c0		 xor	 eax, eax

; 901  : }

  0012d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00131	c3		 ret	 0
utf_32_be_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@PEILHFCF@O?$HMz?3unicode_escape_encode?$AA@ ; `string'
EXTRN	PyUnicode_AsUnicodeEscapeString:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$unicode_escape_encode DD imagerel unicode_escape_encode
	DD	imagerel unicode_escape_encode+54
	DD	imagerel $unwind$unicode_escape_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$unicode_escape_encode DD imagerel unicode_escape_encode+54
	DD	imagerel unicode_escape_encode+152
	DD	imagerel $chain$0$unicode_escape_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$unicode_escape_encode DD imagerel unicode_escape_encode+152
	DD	imagerel unicode_escape_encode+253
	DD	imagerel $chain$2$unicode_escape_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$unicode_escape_encode DD imagerel unicode_escape_encode+253
	DD	imagerel unicode_escape_encode+275
	DD	imagerel $chain$4$unicode_escape_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$unicode_escape_encode DD imagerel unicode_escape_encode+275
	DD	imagerel unicode_escape_encode+295
	DD	imagerel $chain$6$unicode_escape_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$unicode_escape_encode DD 020021H
	DD	063400H
	DD	imagerel unicode_escape_encode
	DD	imagerel unicode_escape_encode+54
	DD	imagerel $unwind$unicode_escape_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$unicode_escape_encode DD 020021H
	DD	063400H
	DD	imagerel unicode_escape_encode
	DD	imagerel unicode_escape_encode+54
	DD	imagerel $unwind$unicode_escape_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$unicode_escape_encode DD 020021H
	DD	063400H
	DD	imagerel unicode_escape_encode
	DD	imagerel unicode_escape_encode+54
	DD	imagerel $unwind$unicode_escape_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$unicode_escape_encode DD 020521H
	DD	063405H
	DD	imagerel unicode_escape_encode
	DD	imagerel unicode_escape_encode+54
	DD	imagerel $unwind$unicode_escape_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unicode_escape_encode DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0BK@PEILHFCF@O?$HMz?3unicode_escape_encode?$AA@
CONST	SEGMENT
??_C@_0BK@PEILHFCF@O?$HMz?3unicode_escape_encode?$AA@ DB 'O|z:unicode_esc'
	DB	'ape_encode', 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_codecsmodule.c
CONST	ENDS
;	COMDAT unicode_escape_encode
_TEXT	SEGMENT
self$ = 64
args$ = 72
str$ = 80
errors$ = 88
unicode_escape_encode PROC				; COMDAT

; 906  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 907  :     PyObject *str, *v;
; 908  :     const char *errors = NULL;
; 909  : 
; 910  :     if (!PyArg_ParseTuple(args, "O|z:unicode_escape_encode",
; 911  :                           &str, &errors))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 4c 24 58	 lea	 r9, QWORD PTR errors$[rsp]
  0000c	4c 8d 44 24 50	 lea	 r8, QWORD PTR str$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@PEILHFCF@O?$HMz?3unicode_escape_encode?$AA@
  00018	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0
  00021	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00026	85 c0		 test	 eax, eax
  00028	75 07		 jne	 SHORT $LN7@unicode_es@2

; 912  :         return NULL;

  0002a	33 c0		 xor	 eax, eax

; 923  : }

  0002c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00030	c3		 ret	 0
$LN7@unicode_es@2:

; 913  : 
; 914  :     str = PyUnicode_FromObject(str);

  00031	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  00036	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0003b	e8 00 00 00 00	 call	 PyUnicode_FromObject
  00040	48 89 44 24 50	 mov	 QWORD PTR str$[rsp], rax

; 915  :     if (str == NULL || PyUnicode_READY(str) < 0) {

  00045	48 85 c0	 test	 rax, rax
  00048	0f 84 a3 00 00
	00		 je	 $LN3@unicode_es@2
  0004e	f6 40 70 80	 test	 BYTE PTR [rax+112], 128	; 00000080H
  00052	75 11		 jne	 SHORT $LN23@unicode_es@2
  00054	48 8b c8	 mov	 rcx, rax
  00057	e8 00 00 00 00	 call	 _PyUnicode_Ready
  0005c	85 c0		 test	 eax, eax
  0005e	78 38		 js	 SHORT $LN4@unicode_es@2
  00060	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
$LN23@unicode_es@2:

; 918  :     }
; 919  :     v = codec_tuple(PyUnicode_AsUnicodeEscapeString(str),
; 920  :                     PyUnicode_GET_LENGTH(str));

  00065	48 8b c8	 mov	 rcx, rax
  00068	e8 00 00 00 00	 call	 PyUnicode_AsUnicodeEscapeString
  0006d	48 8b 54 24 50	 mov	 rdx, QWORD PTR str$[rsp]
  00072	48 8b 52 60	 mov	 rdx, QWORD PTR [rdx+96]
  00076	48 8b c8	 mov	 rcx, rax
  00079	e8 00 00 00 00	 call	 codec_tuple

; 921  :     Py_DECREF(str);

  0007e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  00083	48 8b d8	 mov	 rbx, rax
  00086	e8 00 00 00 00	 call	 _Py_DecRef

; 922  :     return v;

  0008b	48 8b c3	 mov	 rax, rbx
  0008e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 923  : }

  00093	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00097	c3		 ret	 0
$LN4@unicode_es@2:

; 916  :         Py_XDECREF(str);

  00098	48 8b 5c 24 50	 mov	 rbx, QWORD PTR str$[rsp]
  0009d	48 85 db	 test	 rbx, rbx
  000a0	74 4f		 je	 SHORT $LN3@unicode_es@2
  000a2	e8 00 00 00 00	 call	 _Py_PXCTX
  000a7	85 c0		 test	 eax, eax
  000a9	75 46		 jne	 SHORT $LN3@unicode_es@2
  000ab	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000af	a8 20		 test	 al, 32			; 00000020H
  000b1	75 60		 jne	 SHORT $LN16@unicode_es@2
  000b3	84 c0		 test	 al, al
  000b5	78 5c		 js	 SHORT $LN16@unicode_es@2
  000b7	a8 02		 test	 al, 2
  000b9	75 36		 jne	 SHORT $LN3@unicode_es@2
  000bb	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000bf	75 30		 jne	 SHORT $LN3@unicode_es@2
  000c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000cf	4c 8b cb	 mov	 r9, rbx
  000d2	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000d8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000e0	e8 00 00 00 00	 call	 _PyParallel_Guard
  000e5	48 8b cb	 mov	 rcx, rbx
  000e8	85 c0		 test	 eax, eax
  000ea	74 11		 je	 SHORT $LN21@unicode_es@2
  000ec	e8 00 00 00 00	 call	 _Px_Dealloc
$LN3@unicode_es@2:

; 917  :         return NULL;

  000f1	33 c0		 xor	 eax, eax
  000f3	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 923  : }

  000f8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fc	c3		 ret	 0

; 916  :         Py_XDECREF(str);

$LN21@unicode_es@2:
  000fd	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00101	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00107	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 917  :         return NULL;

  0010c	33 c0		 xor	 eax, eax

; 923  : }

  0010e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00112	c3		 ret	 0

; 916  :         Py_XDECREF(str);

$LN16@unicode_es@2:
  00113	48 8b cb	 mov	 rcx, rbx
  00116	e8 00 00 00 00	 call	 Px_DecRef
  0011b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 917  :         return NULL;

  00120	33 c0		 xor	 eax, eax

; 923  : }

  00122	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00126	c3		 ret	 0
unicode_escape_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@JDKCIHBE@O?$HMz?3raw_unicode_escape_encode?$AA@ ; `string'
EXTRN	PyUnicode_AsRawUnicodeEscapeString:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$raw_unicode_escape_encode DD imagerel raw_unicode_escape_encode
	DD	imagerel raw_unicode_escape_encode+54
	DD	imagerel $unwind$raw_unicode_escape_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$raw_unicode_escape_encode DD imagerel raw_unicode_escape_encode+54
	DD	imagerel raw_unicode_escape_encode+152
	DD	imagerel $chain$0$raw_unicode_escape_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$raw_unicode_escape_encode DD imagerel raw_unicode_escape_encode+152
	DD	imagerel raw_unicode_escape_encode+253
	DD	imagerel $chain$2$raw_unicode_escape_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$raw_unicode_escape_encode DD imagerel raw_unicode_escape_encode+253
	DD	imagerel raw_unicode_escape_encode+275
	DD	imagerel $chain$4$raw_unicode_escape_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$raw_unicode_escape_encode DD imagerel raw_unicode_escape_encode+275
	DD	imagerel raw_unicode_escape_encode+295
	DD	imagerel $chain$6$raw_unicode_escape_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$raw_unicode_escape_encode DD 020021H
	DD	063400H
	DD	imagerel raw_unicode_escape_encode
	DD	imagerel raw_unicode_escape_encode+54
	DD	imagerel $unwind$raw_unicode_escape_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$raw_unicode_escape_encode DD 020021H
	DD	063400H
	DD	imagerel raw_unicode_escape_encode
	DD	imagerel raw_unicode_escape_encode+54
	DD	imagerel $unwind$raw_unicode_escape_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$raw_unicode_escape_encode DD 020021H
	DD	063400H
	DD	imagerel raw_unicode_escape_encode
	DD	imagerel raw_unicode_escape_encode+54
	DD	imagerel $unwind$raw_unicode_escape_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$raw_unicode_escape_encode DD 020521H
	DD	063405H
	DD	imagerel raw_unicode_escape_encode
	DD	imagerel raw_unicode_escape_encode+54
	DD	imagerel $unwind$raw_unicode_escape_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$raw_unicode_escape_encode DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0BO@JDKCIHBE@O?$HMz?3raw_unicode_escape_encode?$AA@
CONST	SEGMENT
??_C@_0BO@JDKCIHBE@O?$HMz?3raw_unicode_escape_encode?$AA@ DB 'O|z:raw_uni'
	DB	'code_escape_encode', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_codecsmodule.c
CONST	ENDS
;	COMDAT raw_unicode_escape_encode
_TEXT	SEGMENT
self$ = 64
args$ = 72
str$ = 80
errors$ = 88
raw_unicode_escape_encode PROC				; COMDAT

; 928  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 929  :     PyObject *str, *v;
; 930  :     const char *errors = NULL;
; 931  : 
; 932  :     if (!PyArg_ParseTuple(args, "O|z:raw_unicode_escape_encode",
; 933  :                           &str, &errors))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 4c 24 58	 lea	 r9, QWORD PTR errors$[rsp]
  0000c	4c 8d 44 24 50	 lea	 r8, QWORD PTR str$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@JDKCIHBE@O?$HMz?3raw_unicode_escape_encode?$AA@
  00018	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0
  00021	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00026	85 c0		 test	 eax, eax
  00028	75 07		 jne	 SHORT $LN7@raw_unicod@2

; 934  :         return NULL;

  0002a	33 c0		 xor	 eax, eax

; 945  : }

  0002c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00030	c3		 ret	 0
$LN7@raw_unicod@2:

; 935  : 
; 936  :     str = PyUnicode_FromObject(str);

  00031	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  00036	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0003b	e8 00 00 00 00	 call	 PyUnicode_FromObject
  00040	48 89 44 24 50	 mov	 QWORD PTR str$[rsp], rax

; 937  :     if (str == NULL || PyUnicode_READY(str) < 0) {

  00045	48 85 c0	 test	 rax, rax
  00048	0f 84 a3 00 00
	00		 je	 $LN3@raw_unicod@2
  0004e	f6 40 70 80	 test	 BYTE PTR [rax+112], 128	; 00000080H
  00052	75 11		 jne	 SHORT $LN23@raw_unicod@2
  00054	48 8b c8	 mov	 rcx, rax
  00057	e8 00 00 00 00	 call	 _PyUnicode_Ready
  0005c	85 c0		 test	 eax, eax
  0005e	78 38		 js	 SHORT $LN4@raw_unicod@2
  00060	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
$LN23@raw_unicod@2:

; 940  :     }
; 941  :     v = codec_tuple(PyUnicode_AsRawUnicodeEscapeString(str),
; 942  :                     PyUnicode_GET_LENGTH(str));

  00065	48 8b c8	 mov	 rcx, rax
  00068	e8 00 00 00 00	 call	 PyUnicode_AsRawUnicodeEscapeString
  0006d	48 8b 54 24 50	 mov	 rdx, QWORD PTR str$[rsp]
  00072	48 8b 52 60	 mov	 rdx, QWORD PTR [rdx+96]
  00076	48 8b c8	 mov	 rcx, rax
  00079	e8 00 00 00 00	 call	 codec_tuple

; 943  :     Py_DECREF(str);

  0007e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  00083	48 8b d8	 mov	 rbx, rax
  00086	e8 00 00 00 00	 call	 _Py_DecRef

; 944  :     return v;

  0008b	48 8b c3	 mov	 rax, rbx
  0008e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 945  : }

  00093	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00097	c3		 ret	 0
$LN4@raw_unicod@2:

; 938  :         Py_XDECREF(str);

  00098	48 8b 5c 24 50	 mov	 rbx, QWORD PTR str$[rsp]
  0009d	48 85 db	 test	 rbx, rbx
  000a0	74 4f		 je	 SHORT $LN3@raw_unicod@2
  000a2	e8 00 00 00 00	 call	 _Py_PXCTX
  000a7	85 c0		 test	 eax, eax
  000a9	75 46		 jne	 SHORT $LN3@raw_unicod@2
  000ab	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000af	a8 20		 test	 al, 32			; 00000020H
  000b1	75 60		 jne	 SHORT $LN16@raw_unicod@2
  000b3	84 c0		 test	 al, al
  000b5	78 5c		 js	 SHORT $LN16@raw_unicod@2
  000b7	a8 02		 test	 al, 2
  000b9	75 36		 jne	 SHORT $LN3@raw_unicod@2
  000bb	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000bf	75 30		 jne	 SHORT $LN3@raw_unicod@2
  000c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000cf	4c 8b cb	 mov	 r9, rbx
  000d2	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000d8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000e0	e8 00 00 00 00	 call	 _PyParallel_Guard
  000e5	48 8b cb	 mov	 rcx, rbx
  000e8	85 c0		 test	 eax, eax
  000ea	74 11		 je	 SHORT $LN21@raw_unicod@2
  000ec	e8 00 00 00 00	 call	 _Px_Dealloc
$LN3@raw_unicod@2:

; 939  :         return NULL;

  000f1	33 c0		 xor	 eax, eax
  000f3	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 945  : }

  000f8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fc	c3		 ret	 0

; 938  :         Py_XDECREF(str);

$LN21@raw_unicod@2:
  000fd	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00101	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00107	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 939  :         return NULL;

  0010c	33 c0		 xor	 eax, eax

; 945  : }

  0010e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00112	c3		 ret	 0

; 938  :         Py_XDECREF(str);

$LN16@raw_unicod@2:
  00113	48 8b cb	 mov	 rcx, rbx
  00116	e8 00 00 00 00	 call	 Px_DecRef
  0011b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 939  :         return NULL;

  00120	33 c0		 xor	 eax, eax

; 945  : }

  00122	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00126	c3		 ret	 0
raw_unicode_escape_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@IKGPMDLM@O?$HMz?3latin_1_encode?$AA@	; `string'
EXTRN	_PyUnicode_AsLatin1String:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$latin_1_encode DD imagerel latin_1_encode
	DD	imagerel latin_1_encode+54
	DD	imagerel $unwind$latin_1_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$latin_1_encode DD imagerel latin_1_encode+54
	DD	imagerel latin_1_encode+157
	DD	imagerel $chain$0$latin_1_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$latin_1_encode DD imagerel latin_1_encode+157
	DD	imagerel latin_1_encode+258
	DD	imagerel $chain$2$latin_1_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$latin_1_encode DD imagerel latin_1_encode+258
	DD	imagerel latin_1_encode+280
	DD	imagerel $chain$4$latin_1_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$latin_1_encode DD imagerel latin_1_encode+280
	DD	imagerel latin_1_encode+300
	DD	imagerel $chain$6$latin_1_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$latin_1_encode DD 020021H
	DD	063400H
	DD	imagerel latin_1_encode
	DD	imagerel latin_1_encode+54
	DD	imagerel $unwind$latin_1_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$latin_1_encode DD 020021H
	DD	063400H
	DD	imagerel latin_1_encode
	DD	imagerel latin_1_encode+54
	DD	imagerel $unwind$latin_1_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$latin_1_encode DD 020021H
	DD	063400H
	DD	imagerel latin_1_encode
	DD	imagerel latin_1_encode+54
	DD	imagerel $unwind$latin_1_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$latin_1_encode DD 020521H
	DD	063405H
	DD	imagerel latin_1_encode
	DD	imagerel latin_1_encode+54
	DD	imagerel $unwind$latin_1_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$latin_1_encode DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0BD@IKGPMDLM@O?$HMz?3latin_1_encode?$AA@
CONST	SEGMENT
??_C@_0BD@IKGPMDLM@O?$HMz?3latin_1_encode?$AA@ DB 'O|z:latin_1_encode', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_codecsmodule.c
CONST	ENDS
;	COMDAT latin_1_encode
_TEXT	SEGMENT
self$ = 64
args$ = 72
str$ = 80
errors$ = 88
latin_1_encode PROC					; COMDAT

; 950  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 951  :     PyObject *str, *v;
; 952  :     const char *errors = NULL;
; 953  : 
; 954  :     if (!PyArg_ParseTuple(args, "O|z:latin_1_encode",
; 955  :                           &str, &errors))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 4c 24 58	 lea	 r9, QWORD PTR errors$[rsp]
  0000c	4c 8d 44 24 50	 lea	 r8, QWORD PTR str$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@IKGPMDLM@O?$HMz?3latin_1_encode?$AA@
  00018	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0
  00021	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00026	85 c0		 test	 eax, eax
  00028	75 07		 jne	 SHORT $LN7@latin_1_en

; 956  :         return NULL;

  0002a	33 c0		 xor	 eax, eax

; 967  : }

  0002c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00030	c3		 ret	 0
$LN7@latin_1_en:

; 957  : 
; 958  :     str = PyUnicode_FromObject(str);

  00031	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  00036	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0003b	e8 00 00 00 00	 call	 PyUnicode_FromObject
  00040	48 89 44 24 50	 mov	 QWORD PTR str$[rsp], rax

; 959  :     if (str == NULL || PyUnicode_READY(str) < 0) {

  00045	48 85 c0	 test	 rax, rax
  00048	0f 84 a8 00 00
	00		 je	 $LN3@latin_1_en
  0004e	f6 40 70 80	 test	 BYTE PTR [rax+112], 128	; 00000080H
  00052	75 11		 jne	 SHORT $LN23@latin_1_en
  00054	48 8b c8	 mov	 rcx, rax
  00057	e8 00 00 00 00	 call	 _PyUnicode_Ready
  0005c	85 c0		 test	 eax, eax
  0005e	78 3d		 js	 SHORT $LN4@latin_1_en
  00060	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
$LN23@latin_1_en:

; 962  :     }
; 963  :     v = codec_tuple(_PyUnicode_AsLatin1String(str, errors),
; 964  :                     PyUnicode_GET_LENGTH(str));

  00065	48 8b 54 24 58	 mov	 rdx, QWORD PTR errors$[rsp]
  0006a	48 8b c8	 mov	 rcx, rax
  0006d	e8 00 00 00 00	 call	 _PyUnicode_AsLatin1String
  00072	48 8b 54 24 50	 mov	 rdx, QWORD PTR str$[rsp]
  00077	48 8b 52 60	 mov	 rdx, QWORD PTR [rdx+96]
  0007b	48 8b c8	 mov	 rcx, rax
  0007e	e8 00 00 00 00	 call	 codec_tuple

; 965  :     Py_DECREF(str);

  00083	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  00088	48 8b d8	 mov	 rbx, rax
  0008b	e8 00 00 00 00	 call	 _Py_DecRef

; 966  :     return v;

  00090	48 8b c3	 mov	 rax, rbx
  00093	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 967  : }

  00098	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009c	c3		 ret	 0
$LN4@latin_1_en:

; 960  :         Py_XDECREF(str);

  0009d	48 8b 5c 24 50	 mov	 rbx, QWORD PTR str$[rsp]
  000a2	48 85 db	 test	 rbx, rbx
  000a5	74 4f		 je	 SHORT $LN3@latin_1_en
  000a7	e8 00 00 00 00	 call	 _Py_PXCTX
  000ac	85 c0		 test	 eax, eax
  000ae	75 46		 jne	 SHORT $LN3@latin_1_en
  000b0	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000b4	a8 20		 test	 al, 32			; 00000020H
  000b6	75 60		 jne	 SHORT $LN16@latin_1_en
  000b8	84 c0		 test	 al, al
  000ba	78 5c		 js	 SHORT $LN16@latin_1_en
  000bc	a8 02		 test	 al, 2
  000be	75 36		 jne	 SHORT $LN3@latin_1_en
  000c0	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000c4	75 30		 jne	 SHORT $LN3@latin_1_en
  000c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000d4	4c 8b cb	 mov	 r9, rbx
  000d7	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000dd	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000e5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ea	48 8b cb	 mov	 rcx, rbx
  000ed	85 c0		 test	 eax, eax
  000ef	74 11		 je	 SHORT $LN21@latin_1_en
  000f1	e8 00 00 00 00	 call	 _Px_Dealloc
$LN3@latin_1_en:

; 961  :         return NULL;

  000f6	33 c0		 xor	 eax, eax
  000f8	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 967  : }

  000fd	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00101	c3		 ret	 0

; 960  :         Py_XDECREF(str);

$LN21@latin_1_en:
  00102	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00106	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0010c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 961  :         return NULL;

  00111	33 c0		 xor	 eax, eax

; 967  : }

  00113	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00117	c3		 ret	 0

; 960  :         Py_XDECREF(str);

$LN16@latin_1_en:
  00118	48 8b cb	 mov	 rcx, rbx
  0011b	e8 00 00 00 00	 call	 Px_DecRef
  00120	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 961  :         return NULL;

  00125	33 c0		 xor	 eax, eax

; 967  : }

  00127	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0012b	c3		 ret	 0
latin_1_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@NEGCEDFA@O?$HMz?3ascii_encode?$AA@	; `string'
EXTRN	_PyUnicode_AsASCIIString:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$ascii_encode DD imagerel ascii_encode
	DD	imagerel ascii_encode+54
	DD	imagerel $unwind$ascii_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$ascii_encode DD imagerel ascii_encode+54
	DD	imagerel ascii_encode+157
	DD	imagerel $chain$0$ascii_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$ascii_encode DD imagerel ascii_encode+157
	DD	imagerel ascii_encode+258
	DD	imagerel $chain$2$ascii_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$ascii_encode DD imagerel ascii_encode+258
	DD	imagerel ascii_encode+280
	DD	imagerel $chain$4$ascii_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$ascii_encode DD imagerel ascii_encode+280
	DD	imagerel ascii_encode+300
	DD	imagerel $chain$6$ascii_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$ascii_encode DD 020021H
	DD	063400H
	DD	imagerel ascii_encode
	DD	imagerel ascii_encode+54
	DD	imagerel $unwind$ascii_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$ascii_encode DD 020021H
	DD	063400H
	DD	imagerel ascii_encode
	DD	imagerel ascii_encode+54
	DD	imagerel $unwind$ascii_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$ascii_encode DD 020021H
	DD	063400H
	DD	imagerel ascii_encode
	DD	imagerel ascii_encode+54
	DD	imagerel $unwind$ascii_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$ascii_encode DD 020521H
	DD	063405H
	DD	imagerel ascii_encode
	DD	imagerel ascii_encode+54
	DD	imagerel $unwind$ascii_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ascii_encode DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0BB@NEGCEDFA@O?$HMz?3ascii_encode?$AA@
CONST	SEGMENT
??_C@_0BB@NEGCEDFA@O?$HMz?3ascii_encode?$AA@ DB 'O|z:ascii_encode', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_codecsmodule.c
CONST	ENDS
;	COMDAT ascii_encode
_TEXT	SEGMENT
self$ = 64
args$ = 72
str$ = 80
errors$ = 88
ascii_encode PROC					; COMDAT

; 972  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 973  :     PyObject *str, *v;
; 974  :     const char *errors = NULL;
; 975  : 
; 976  :     if (!PyArg_ParseTuple(args, "O|z:ascii_encode",
; 977  :                           &str, &errors))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 4c 24 58	 lea	 r9, QWORD PTR errors$[rsp]
  0000c	4c 8d 44 24 50	 lea	 r8, QWORD PTR str$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@NEGCEDFA@O?$HMz?3ascii_encode?$AA@
  00018	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0
  00021	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00026	85 c0		 test	 eax, eax
  00028	75 07		 jne	 SHORT $LN7@ascii_enco

; 978  :         return NULL;

  0002a	33 c0		 xor	 eax, eax

; 989  : }

  0002c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00030	c3		 ret	 0
$LN7@ascii_enco:

; 979  : 
; 980  :     str = PyUnicode_FromObject(str);

  00031	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  00036	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0003b	e8 00 00 00 00	 call	 PyUnicode_FromObject
  00040	48 89 44 24 50	 mov	 QWORD PTR str$[rsp], rax

; 981  :     if (str == NULL || PyUnicode_READY(str) < 0) {

  00045	48 85 c0	 test	 rax, rax
  00048	0f 84 a8 00 00
	00		 je	 $LN3@ascii_enco
  0004e	f6 40 70 80	 test	 BYTE PTR [rax+112], 128	; 00000080H
  00052	75 11		 jne	 SHORT $LN23@ascii_enco
  00054	48 8b c8	 mov	 rcx, rax
  00057	e8 00 00 00 00	 call	 _PyUnicode_Ready
  0005c	85 c0		 test	 eax, eax
  0005e	78 3d		 js	 SHORT $LN4@ascii_enco
  00060	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
$LN23@ascii_enco:

; 984  :     }
; 985  :     v = codec_tuple(_PyUnicode_AsASCIIString(str, errors),
; 986  :                     PyUnicode_GET_LENGTH(str));

  00065	48 8b 54 24 58	 mov	 rdx, QWORD PTR errors$[rsp]
  0006a	48 8b c8	 mov	 rcx, rax
  0006d	e8 00 00 00 00	 call	 _PyUnicode_AsASCIIString
  00072	48 8b 54 24 50	 mov	 rdx, QWORD PTR str$[rsp]
  00077	48 8b 52 60	 mov	 rdx, QWORD PTR [rdx+96]
  0007b	48 8b c8	 mov	 rcx, rax
  0007e	e8 00 00 00 00	 call	 codec_tuple

; 987  :     Py_DECREF(str);

  00083	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  00088	48 8b d8	 mov	 rbx, rax
  0008b	e8 00 00 00 00	 call	 _Py_DecRef

; 988  :     return v;

  00090	48 8b c3	 mov	 rax, rbx
  00093	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 989  : }

  00098	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009c	c3		 ret	 0
$LN4@ascii_enco:

; 982  :         Py_XDECREF(str);

  0009d	48 8b 5c 24 50	 mov	 rbx, QWORD PTR str$[rsp]
  000a2	48 85 db	 test	 rbx, rbx
  000a5	74 4f		 je	 SHORT $LN3@ascii_enco
  000a7	e8 00 00 00 00	 call	 _Py_PXCTX
  000ac	85 c0		 test	 eax, eax
  000ae	75 46		 jne	 SHORT $LN3@ascii_enco
  000b0	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000b4	a8 20		 test	 al, 32			; 00000020H
  000b6	75 60		 jne	 SHORT $LN16@ascii_enco
  000b8	84 c0		 test	 al, al
  000ba	78 5c		 js	 SHORT $LN16@ascii_enco
  000bc	a8 02		 test	 al, 2
  000be	75 36		 jne	 SHORT $LN3@ascii_enco
  000c0	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000c4	75 30		 jne	 SHORT $LN3@ascii_enco
  000c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000d4	4c 8b cb	 mov	 r9, rbx
  000d7	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000dd	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000e5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ea	48 8b cb	 mov	 rcx, rbx
  000ed	85 c0		 test	 eax, eax
  000ef	74 11		 je	 SHORT $LN21@ascii_enco
  000f1	e8 00 00 00 00	 call	 _Px_Dealloc
$LN3@ascii_enco:

; 983  :         return NULL;

  000f6	33 c0		 xor	 eax, eax
  000f8	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 989  : }

  000fd	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00101	c3		 ret	 0

; 982  :         Py_XDECREF(str);

$LN21@ascii_enco:
  00102	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00106	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0010c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 983  :         return NULL;

  00111	33 c0		 xor	 eax, eax

; 989  : }

  00113	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00117	c3		 ret	 0

; 982  :         Py_XDECREF(str);

$LN16@ascii_enco:
  00118	48 8b cb	 mov	 rcx, rbx
  0011b	e8 00 00 00 00	 call	 Px_DecRef
  00120	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 983  :         return NULL;

  00125	33 c0		 xor	 eax, eax

; 989  : }

  00127	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0012b	c3		 ret	 0
ascii_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@ELCINCHI@O?$HMzO?3charmap_encode?$AA@	; `string'
EXTRN	_PyUnicode_EncodeCharmap:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$charmap_encode DD imagerel charmap_encode
	DD	imagerel charmap_encode+323
	DD	imagerel $unwind$charmap_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$charmap_encode DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT ??_C@_0BE@ELCINCHI@O?$HMzO?3charmap_encode?$AA@
CONST	SEGMENT
??_C@_0BE@ELCINCHI@O?$HMzO?3charmap_encode?$AA@ DB 'O|zO:charmap_encode', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_codecsmodule.c
CONST	ENDS
;	COMDAT charmap_encode
_TEXT	SEGMENT
errors$ = 48
self$ = 80
args$ = 88
str$ = 96
mapping$ = 104
charmap_encode PROC					; COMDAT

; 994  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00006	48 8b c2	 mov	 rax, rdx

; 995  :     PyObject *str, *v;
; 996  :     const char *errors = NULL;
; 997  :     PyObject *mapping = NULL;
; 998  : 
; 999  :     if (!PyArg_ParseTuple(args, "O|zO:charmap_encode",
; 1000 :                           &str, &errors, &mapping))

  00009	48 8d 4c 24 68	 lea	 rcx, QWORD PTR mapping$[rsp]
  0000e	33 db		 xor	 ebx, ebx
  00010	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00015	4c 8d 4c 24 30	 lea	 r9, QWORD PTR errors$[rsp]
  0001a	4c 8d 44 24 60	 lea	 r8, QWORD PTR str$[rsp]
  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@ELCINCHI@O?$HMzO?3charmap_encode?$AA@
  00026	48 8b c8	 mov	 rcx, rax
  00029	48 89 5c 24 30	 mov	 QWORD PTR errors$[rsp], rbx
  0002e	48 89 5c 24 68	 mov	 QWORD PTR mapping$[rsp], rbx
  00033	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00038	85 c0		 test	 eax, eax

; 1001 :         return NULL;

  0003a	0f 84 d9 00 00
	00		 je	 $LN3@charmap_en

; 1002 :     if (mapping == Py_None)

  00040	48 8b 44 24 68	 mov	 rax, QWORD PTR mapping$[rsp]
  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0004c	48 3b c1	 cmp	 rax, rcx

; 1003 :         mapping = NULL;
; 1004 : 
; 1005 :     str = PyUnicode_FromObject(str);

  0004f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR str$[rsp]
  00054	48 0f 44 c3	 cmove	 rax, rbx
  00058	48 89 44 24 68	 mov	 QWORD PTR mapping$[rsp], rax
  0005d	e8 00 00 00 00	 call	 PyUnicode_FromObject
  00062	48 89 44 24 60	 mov	 QWORD PTR str$[rsp], rax

; 1006 :     if (str == NULL || PyUnicode_READY(str) < 0) {

  00067	48 85 c0	 test	 rax, rax
  0006a	0f 84 a9 00 00
	00		 je	 $LN3@charmap_en
  00070	f6 40 70 80	 test	 BYTE PTR [rax+112], 128	; 00000080H
  00074	75 11		 jne	 SHORT $LN24@charmap_en
  00076	48 8b c8	 mov	 rcx, rax
  00079	e8 00 00 00 00	 call	 _PyUnicode_Ready
  0007e	85 c0		 test	 eax, eax
  00080	78 3e		 js	 SHORT $LN4@charmap_en
  00082	48 8b 44 24 60	 mov	 rax, QWORD PTR str$[rsp]
$LN24@charmap_en:

; 1009 :     }
; 1010 :     v = codec_tuple(_PyUnicode_EncodeCharmap(str, mapping, errors),
; 1011 :                     PyUnicode_GET_LENGTH(str));

  00087	4c 8b 44 24 30	 mov	 r8, QWORD PTR errors$[rsp]
  0008c	48 8b 54 24 68	 mov	 rdx, QWORD PTR mapping$[rsp]
  00091	48 8b c8	 mov	 rcx, rax
  00094	e8 00 00 00 00	 call	 _PyUnicode_EncodeCharmap
  00099	48 8b 54 24 60	 mov	 rdx, QWORD PTR str$[rsp]
  0009e	48 8b 52 60	 mov	 rdx, QWORD PTR [rdx+96]
  000a2	48 8b c8	 mov	 rcx, rax
  000a5	e8 00 00 00 00	 call	 codec_tuple

; 1012 :     Py_DECREF(str);

  000aa	48 8b 4c 24 60	 mov	 rcx, QWORD PTR str$[rsp]
  000af	48 8b d8	 mov	 rbx, rax
  000b2	e8 00 00 00 00	 call	 _Py_DecRef

; 1013 :     return v;

  000b7	48 8b c3	 mov	 rax, rbx

; 1014 : }

  000ba	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000be	5b		 pop	 rbx
  000bf	c3		 ret	 0
$LN4@charmap_en:

; 1007 :         Py_XDECREF(str);

  000c0	48 8b 5c 24 60	 mov	 rbx, QWORD PTR str$[rsp]
  000c5	48 85 db	 test	 rbx, rbx
  000c8	74 4f		 je	 SHORT $LN3@charmap_en
  000ca	e8 00 00 00 00	 call	 _Py_PXCTX
  000cf	85 c0		 test	 eax, eax
  000d1	75 46		 jne	 SHORT $LN3@charmap_en
  000d3	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000d7	a8 20		 test	 al, 32			; 00000020H
  000d9	75 58		 jne	 SHORT $LN17@charmap_en
  000db	84 c0		 test	 al, al
  000dd	78 54		 js	 SHORT $LN17@charmap_en
  000df	a8 02		 test	 al, 2
  000e1	75 36		 jne	 SHORT $LN3@charmap_en
  000e3	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000e7	75 30		 jne	 SHORT $LN3@charmap_en
  000e9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000f7	4c 8b cb	 mov	 r9, rbx
  000fa	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00100	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00108	e8 00 00 00 00	 call	 _PyParallel_Guard
  0010d	48 8b cb	 mov	 rcx, rbx
  00110	85 c0		 test	 eax, eax
  00112	74 0d		 je	 SHORT $LN22@charmap_en
  00114	e8 00 00 00 00	 call	 _Px_Dealloc
$LN3@charmap_en:

; 1008 :         return NULL;

  00119	33 c0		 xor	 eax, eax

; 1014 : }

  0011b	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0011f	5b		 pop	 rbx
  00120	c3		 ret	 0

; 1007 :         Py_XDECREF(str);

$LN22@charmap_en:
  00121	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00125	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 1008 :         return NULL;

  0012b	33 c0		 xor	 eax, eax

; 1014 : }

  0012d	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00131	5b		 pop	 rbx
  00132	c3		 ret	 0

; 1007 :         Py_XDECREF(str);

$LN17@charmap_en:
  00133	48 8b cb	 mov	 rcx, rbx
  00136	e8 00 00 00 00	 call	 Px_DecRef

; 1008 :         return NULL;

  0013b	33 c0		 xor	 eax, eax

; 1014 : }

  0013d	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00141	5b		 pop	 rbx
  00142	c3		 ret	 0
charmap_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@NPKJOCOC@U?3charmap_build?$AA@	; `string'
EXTRN	PyUnicode_BuildEncodingMap:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$charmap_build DD imagerel charmap_build
	DD	imagerel charmap_build+50
	DD	imagerel $unwind$charmap_build
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$charmap_build DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BA@NPKJOCOC@U?3charmap_build?$AA@
CONST	SEGMENT
??_C@_0BA@NPKJOCOC@U?3charmap_build?$AA@ DB 'U:charmap_build', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT charmap_build
_TEXT	SEGMENT
self$ = 48
args$ = 56
map$ = 64
charmap_build PROC					; COMDAT

; 1018 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1019 :     PyObject *map;
; 1020 :     if (!PyArg_ParseTuple(args, "U:charmap_build", &map))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 44 24 40	 lea	 r8, QWORD PTR map$[rsp]
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@NPKJOCOC@U?3charmap_build?$AA@
  00013	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00018	85 c0		 test	 eax, eax
  0001a	75 07		 jne	 SHORT $LN1@charmap_bu

; 1021 :         return NULL;

  0001c	33 c0		 xor	 eax, eax

; 1023 : }

  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	c3		 ret	 0
$LN1@charmap_bu:

; 1022 :     return PyUnicode_BuildEncodingMap(map);

  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR map$[rsp]
  00028	e8 00 00 00 00	 call	 PyUnicode_BuildEncodingMap

; 1023 : }

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
charmap_build ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@DFEJEMFN@O?$HMz?3mbcs_encode?$AA@	; `string'
EXTRN	PyUnicode_EncodeCodePage:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$mbcs_encode DD imagerel mbcs_encode
	DD	imagerel mbcs_encode+54
	DD	imagerel $unwind$mbcs_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$mbcs_encode DD imagerel mbcs_encode+54
	DD	imagerel mbcs_encode+159
	DD	imagerel $chain$0$mbcs_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$mbcs_encode DD imagerel mbcs_encode+159
	DD	imagerel mbcs_encode+260
	DD	imagerel $chain$2$mbcs_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$mbcs_encode DD imagerel mbcs_encode+260
	DD	imagerel mbcs_encode+282
	DD	imagerel $chain$4$mbcs_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$mbcs_encode DD imagerel mbcs_encode+282
	DD	imagerel mbcs_encode+302
	DD	imagerel $chain$6$mbcs_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$mbcs_encode DD 020021H
	DD	063400H
	DD	imagerel mbcs_encode
	DD	imagerel mbcs_encode+54
	DD	imagerel $unwind$mbcs_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$mbcs_encode DD 020021H
	DD	063400H
	DD	imagerel mbcs_encode
	DD	imagerel mbcs_encode+54
	DD	imagerel $unwind$mbcs_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$mbcs_encode DD 020021H
	DD	063400H
	DD	imagerel mbcs_encode
	DD	imagerel mbcs_encode+54
	DD	imagerel $unwind$mbcs_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$mbcs_encode DD 020521H
	DD	063405H
	DD	imagerel mbcs_encode
	DD	imagerel mbcs_encode+54
	DD	imagerel $unwind$mbcs_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbcs_encode DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0BA@DFEJEMFN@O?$HMz?3mbcs_encode?$AA@
CONST	SEGMENT
??_C@_0BA@DFEJEMFN@O?$HMz?3mbcs_encode?$AA@ DB 'O|z:mbcs_encode', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_codecsmodule.c
CONST	ENDS
;	COMDAT mbcs_encode
_TEXT	SEGMENT
self$ = 64
args$ = 72
str$ = 80
errors$ = 88
mbcs_encode PROC					; COMDAT

; 1030 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1031 :     PyObject *str, *v;
; 1032 :     const char *errors = NULL;
; 1033 : 
; 1034 :     if (!PyArg_ParseTuple(args, "O|z:mbcs_encode",
; 1035 :                           &str, &errors))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 4c 24 58	 lea	 r9, QWORD PTR errors$[rsp]
  0000c	4c 8d 44 24 50	 lea	 r8, QWORD PTR str$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@DFEJEMFN@O?$HMz?3mbcs_encode?$AA@
  00018	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0
  00021	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00026	85 c0		 test	 eax, eax
  00028	75 07		 jne	 SHORT $LN7@mbcs_encod

; 1036 :         return NULL;

  0002a	33 c0		 xor	 eax, eax

; 1047 : }

  0002c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00030	c3		 ret	 0
$LN7@mbcs_encod:

; 1037 : 
; 1038 :     str = PyUnicode_FromObject(str);

  00031	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  00036	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0003b	e8 00 00 00 00	 call	 PyUnicode_FromObject
  00040	48 89 44 24 50	 mov	 QWORD PTR str$[rsp], rax

; 1039 :     if (str == NULL || PyUnicode_READY(str) < 0) {

  00045	48 85 c0	 test	 rax, rax
  00048	0f 84 aa 00 00
	00		 je	 $LN3@mbcs_encod
  0004e	f6 40 70 80	 test	 BYTE PTR [rax+112], 128	; 00000080H
  00052	75 11		 jne	 SHORT $LN23@mbcs_encod
  00054	48 8b c8	 mov	 rcx, rax
  00057	e8 00 00 00 00	 call	 _PyUnicode_Ready
  0005c	85 c0		 test	 eax, eax
  0005e	78 3f		 js	 SHORT $LN4@mbcs_encod
  00060	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
$LN23@mbcs_encod:

; 1042 :     }
; 1043 :     v = codec_tuple(PyUnicode_EncodeCodePage(CP_ACP, str, errors),
; 1044 :                     PyUnicode_GET_LENGTH(str));

  00065	4c 8b 44 24 58	 mov	 r8, QWORD PTR errors$[rsp]
  0006a	48 8b d0	 mov	 rdx, rax
  0006d	33 c9		 xor	 ecx, ecx
  0006f	e8 00 00 00 00	 call	 PyUnicode_EncodeCodePage
  00074	48 8b 54 24 50	 mov	 rdx, QWORD PTR str$[rsp]
  00079	48 8b 52 60	 mov	 rdx, QWORD PTR [rdx+96]
  0007d	48 8b c8	 mov	 rcx, rax
  00080	e8 00 00 00 00	 call	 codec_tuple

; 1045 :     Py_DECREF(str);

  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  0008a	48 8b d8	 mov	 rbx, rax
  0008d	e8 00 00 00 00	 call	 _Py_DecRef

; 1046 :     return v;

  00092	48 8b c3	 mov	 rax, rbx
  00095	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1047 : }

  0009a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009e	c3		 ret	 0
$LN4@mbcs_encod:

; 1040 :         Py_XDECREF(str);

  0009f	48 8b 5c 24 50	 mov	 rbx, QWORD PTR str$[rsp]
  000a4	48 85 db	 test	 rbx, rbx
  000a7	74 4f		 je	 SHORT $LN3@mbcs_encod
  000a9	e8 00 00 00 00	 call	 _Py_PXCTX
  000ae	85 c0		 test	 eax, eax
  000b0	75 46		 jne	 SHORT $LN3@mbcs_encod
  000b2	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000b6	a8 20		 test	 al, 32			; 00000020H
  000b8	75 60		 jne	 SHORT $LN16@mbcs_encod
  000ba	84 c0		 test	 al, al
  000bc	78 5c		 js	 SHORT $LN16@mbcs_encod
  000be	a8 02		 test	 al, 2
  000c0	75 36		 jne	 SHORT $LN3@mbcs_encod
  000c2	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000c6	75 30		 jne	 SHORT $LN3@mbcs_encod
  000c8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000d6	4c 8b cb	 mov	 r9, rbx
  000d9	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000df	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000e7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ec	48 8b cb	 mov	 rcx, rbx
  000ef	85 c0		 test	 eax, eax
  000f1	74 11		 je	 SHORT $LN21@mbcs_encod
  000f3	e8 00 00 00 00	 call	 _Px_Dealloc
$LN3@mbcs_encod:

; 1041 :         return NULL;

  000f8	33 c0		 xor	 eax, eax
  000fa	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1047 : }

  000ff	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00103	c3		 ret	 0

; 1040 :         Py_XDECREF(str);

$LN21@mbcs_encod:
  00104	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00108	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0010e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1041 :         return NULL;

  00113	33 c0		 xor	 eax, eax

; 1047 : }

  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0

; 1040 :         Py_XDECREF(str);

$LN16@mbcs_encod:
  0011a	48 8b cb	 mov	 rcx, rbx
  0011d	e8 00 00 00 00	 call	 Px_DecRef
  00122	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1041 :         return NULL;

  00127	33 c0		 xor	 eax, eax

; 1047 : }

  00129	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0012d	c3		 ret	 0
mbcs_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@BPOPKOLP@iO?$HMz?3code_page_encode?$AA@ ; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$code_page_encode DD imagerel code_page_encode
	DD	imagerel code_page_encode+67
	DD	imagerel $unwind$code_page_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$code_page_encode DD imagerel code_page_encode+67
	DD	imagerel code_page_encode+174
	DD	imagerel $chain$0$code_page_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$code_page_encode DD imagerel code_page_encode+174
	DD	imagerel code_page_encode+275
	DD	imagerel $chain$2$code_page_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$code_page_encode DD imagerel code_page_encode+275
	DD	imagerel code_page_encode+297
	DD	imagerel $chain$4$code_page_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$code_page_encode DD imagerel code_page_encode+297
	DD	imagerel code_page_encode+317
	DD	imagerel $chain$6$code_page_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$code_page_encode DD 020021H
	DD	083400H
	DD	imagerel code_page_encode
	DD	imagerel code_page_encode+67
	DD	imagerel $unwind$code_page_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$code_page_encode DD 020021H
	DD	083400H
	DD	imagerel code_page_encode
	DD	imagerel code_page_encode+67
	DD	imagerel $unwind$code_page_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$code_page_encode DD 020021H
	DD	083400H
	DD	imagerel code_page_encode
	DD	imagerel code_page_encode+67
	DD	imagerel $unwind$code_page_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$code_page_encode DD 020521H
	DD	083405H
	DD	imagerel code_page_encode
	DD	imagerel code_page_encode+67
	DD	imagerel $unwind$code_page_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$code_page_encode DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_0BG@BPOPKOLP@iO?$HMz?3code_page_encode?$AA@
CONST	SEGMENT
??_C@_0BG@BPOPKOLP@iO?$HMz?3code_page_encode?$AA@ DB 'iO|z:code_page_enco'
	DB	'de', 00H					; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_codecsmodule.c
CONST	ENDS
;	COMDAT code_page_encode
_TEXT	SEGMENT
errors$ = 48
self$ = 80
args$ = 88
code_page$ = 96
str$ = 104
code_page_encode PROC					; COMDAT

; 1052 : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00004	48 8b c2	 mov	 rax, rdx

; 1053 :     PyObject *str, *v;
; 1054 :     const char *errors = NULL;
; 1055 :     int code_page;
; 1056 : 
; 1057 :     if (!PyArg_ParseTuple(args, "iO|z:code_page_encode",
; 1058 :                           &code_page, &str, &errors))

  00007	48 8d 4c 24 30	 lea	 rcx, QWORD PTR errors$[rsp]
  0000c	4c 8d 4c 24 68	 lea	 r9, QWORD PTR str$[rsp]
  00011	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00016	4c 8d 44 24 60	 lea	 r8, QWORD PTR code_page$[rsp]
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@BPOPKOLP@iO?$HMz?3code_page_encode?$AA@
  00022	48 8b c8	 mov	 rcx, rax
  00025	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0
  0002e	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN7@code_page_@2

; 1059 :         return NULL;

  00037	33 c0		 xor	 eax, eax

; 1072 : }

  00039	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0003d	c3		 ret	 0
$LN7@code_page_@2:

; 1060 : 
; 1061 :     str = PyUnicode_FromObject(str);

  0003e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR str$[rsp]
  00043	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00048	e8 00 00 00 00	 call	 PyUnicode_FromObject
  0004d	48 89 44 24 68	 mov	 QWORD PTR str$[rsp], rax

; 1062 :     if (str == NULL || PyUnicode_READY(str) < 0) {

  00052	48 85 c0	 test	 rax, rax
  00055	0f 84 ac 00 00
	00		 je	 $LN3@code_page_@2
  0005b	f6 40 70 80	 test	 BYTE PTR [rax+112], 128	; 00000080H
  0005f	75 11		 jne	 SHORT $LN23@code_page_@2
  00061	48 8b c8	 mov	 rcx, rax
  00064	e8 00 00 00 00	 call	 _PyUnicode_Ready
  00069	85 c0		 test	 eax, eax
  0006b	78 41		 js	 SHORT $LN4@code_page_@2
  0006d	48 8b 44 24 68	 mov	 rax, QWORD PTR str$[rsp]
$LN23@code_page_@2:

; 1065 :     }
; 1066 :     v = codec_tuple(PyUnicode_EncodeCodePage(code_page,
; 1067 :                                              str,
; 1068 :                                              errors),
; 1069 :                     PyUnicode_GET_LENGTH(str));

  00072	4c 8b 44 24 30	 mov	 r8, QWORD PTR errors$[rsp]
  00077	8b 4c 24 60	 mov	 ecx, DWORD PTR code_page$[rsp]
  0007b	48 8b d0	 mov	 rdx, rax
  0007e	e8 00 00 00 00	 call	 PyUnicode_EncodeCodePage
  00083	48 8b 54 24 68	 mov	 rdx, QWORD PTR str$[rsp]
  00088	48 8b 52 60	 mov	 rdx, QWORD PTR [rdx+96]
  0008c	48 8b c8	 mov	 rcx, rax
  0008f	e8 00 00 00 00	 call	 codec_tuple

; 1070 :     Py_DECREF(str);

  00094	48 8b 4c 24 68	 mov	 rcx, QWORD PTR str$[rsp]
  00099	48 8b d8	 mov	 rbx, rax
  0009c	e8 00 00 00 00	 call	 _Py_DecRef

; 1071 :     return v;

  000a1	48 8b c3	 mov	 rax, rbx
  000a4	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 1072 : }

  000a9	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000ad	c3		 ret	 0
$LN4@code_page_@2:

; 1063 :         Py_XDECREF(str);

  000ae	48 8b 5c 24 68	 mov	 rbx, QWORD PTR str$[rsp]
  000b3	48 85 db	 test	 rbx, rbx
  000b6	74 4f		 je	 SHORT $LN3@code_page_@2
  000b8	e8 00 00 00 00	 call	 _Py_PXCTX
  000bd	85 c0		 test	 eax, eax
  000bf	75 46		 jne	 SHORT $LN3@code_page_@2
  000c1	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000c5	a8 20		 test	 al, 32			; 00000020H
  000c7	75 60		 jne	 SHORT $LN16@code_page_@2
  000c9	84 c0		 test	 al, al
  000cb	78 5c		 js	 SHORT $LN16@code_page_@2
  000cd	a8 02		 test	 al, 2
  000cf	75 36		 jne	 SHORT $LN3@code_page_@2
  000d1	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000d5	75 30		 jne	 SHORT $LN3@code_page_@2
  000d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000e5	4c 8b cb	 mov	 r9, rbx
  000e8	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000ee	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000f6	e8 00 00 00 00	 call	 _PyParallel_Guard
  000fb	48 8b cb	 mov	 rcx, rbx
  000fe	85 c0		 test	 eax, eax
  00100	74 11		 je	 SHORT $LN21@code_page_@2
  00102	e8 00 00 00 00	 call	 _Px_Dealloc
$LN3@code_page_@2:

; 1064 :         return NULL;

  00107	33 c0		 xor	 eax, eax
  00109	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 1072 : }

  0010e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00112	c3		 ret	 0

; 1063 :         Py_XDECREF(str);

$LN21@code_page_@2:
  00113	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00117	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0011d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 1064 :         return NULL;

  00122	33 c0		 xor	 eax, eax

; 1072 : }

  00124	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00128	c3		 ret	 0

; 1063 :         Py_XDECREF(str);

$LN16@code_page_@2:
  00129	48 8b cb	 mov	 rcx, rbx
  0012c	e8 00 00 00 00	 call	 Px_DecRef
  00131	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 1064 :         return NULL;

  00136	33 c0		 xor	 eax, eax

; 1072 : }

  00138	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0013c	c3		 ret	 0
code_page_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@LEFLNIOA@sO?3register_error?$AA@	; `string'
EXTRN	PyCodec_RegisterError:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$register_error DD imagerel register_error
	DD	imagerel register_error+140
	DD	imagerel $unwind$register_error
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$register_error DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0BC@LEFLNIOA@sO?3register_error?$AA@
CONST	SEGMENT
??_C@_0BC@LEFLNIOA@sO?3register_error?$AA@ DB 'sO:register_error', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_codecsmodule.c
CONST	ENDS
;	COMDAT register_error
_TEXT	SEGMENT
self$ = 64
args$ = 72
handler$ = 80
name$ = 88
register_error PROC					; COMDAT

; 1088 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1089 :     const char *name;
; 1090 :     PyObject *handler;
; 1091 : 
; 1092 :     if (!PyArg_ParseTuple(args, "sO:register_error",
; 1093 :                           &name, &handler))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 4c 24 50	 lea	 r9, QWORD PTR handler$[rsp]
  0000c	4c 8d 44 24 58	 lea	 r8, QWORD PTR name$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@LEFLNIOA@sO?3register_error?$AA@
  00018	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0001d	85 c0		 test	 eax, eax
  0001f	75 07		 jne	 SHORT $LN2@register_e
$LN9@register_e:

; 1094 :         return NULL;

  00021	33 c0		 xor	 eax, eax

; 1098 : }

  00023	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00027	c3		 ret	 0
$LN2@register_e:

; 1095 :     if (PyCodec_RegisterError(name, handler))

  00028	48 8b 54 24 50	 mov	 rdx, QWORD PTR handler$[rsp]
  0002d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR name$[rsp]
  00032	e8 00 00 00 00	 call	 PyCodec_RegisterError
  00037	85 c0		 test	 eax, eax

; 1096 :         return NULL;

  00039	75 e6		 jne	 SHORT $LN9@register_e

; 1097 :     Py_RETURN_NONE;

  0003b	e8 00 00 00 00	 call	 _Py_PXCTX
  00040	85 c0		 test	 eax, eax
  00042	75 3c		 jne	 SHORT $LN6@register_e
  00044	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  0004b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00052	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00059	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0005f	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00067	e8 00 00 00 00	 call	 _PyParallel_Guard
  0006c	85 c0		 test	 eax, eax
  0006e	75 09		 jne	 SHORT $LN5@register_e
  00070	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00077	74 07		 je	 SHORT $LN6@register_e
$LN5@register_e:
  00079	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN6@register_e:
  00080	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1098 : }

  00087	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008b	c3		 ret	 0
register_error ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@OFCOIDCL@s?3lookup_error?$AA@		; `string'
EXTRN	PyCodec_LookupError:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$lookup_error DD imagerel lookup_error
	DD	imagerel lookup_error+50
	DD	imagerel $unwind$lookup_error
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lookup_error DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0P@OFCOIDCL@s?3lookup_error?$AA@
CONST	SEGMENT
??_C@_0P@OFCOIDCL@s?3lookup_error?$AA@ DB 's:lookup_error', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT lookup_error
_TEXT	SEGMENT
self$ = 48
args$ = 56
name$ = 64
lookup_error PROC					; COMDAT

; 1107 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1108 :     const char *name;
; 1109 : 
; 1110 :     if (!PyArg_ParseTuple(args, "s:lookup_error",
; 1111 :                           &name))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 44 24 40	 lea	 r8, QWORD PTR name$[rsp]
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@OFCOIDCL@s?3lookup_error?$AA@
  00013	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00018	85 c0		 test	 eax, eax
  0001a	75 07		 jne	 SHORT $LN1@lookup_err

; 1112 :         return NULL;

  0001c	33 c0		 xor	 eax, eax

; 1114 : }

  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	c3		 ret	 0
$LN1@lookup_err:

; 1113 :     return PyCodec_LookupError(name);

  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  00028	e8 00 00 00 00	 call	 PyCodec_LookupError

; 1114 : }

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
lookup_error ENDP
_TEXT	ENDS
PUBLIC	PyInit__codecs
EXTRN	PyModule_Create2:PROC
; Function compile flags: /Ogtpy
;	COMDAT PyInit__codecs
_TEXT	SEGMENT
PyInit__codecs PROC					; COMDAT

; 1189 :         return PyModule_Create(&codecsmodule);

  00000	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:codecsmodule
  00007	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H

; 1190 : }

  0000c	e9 00 00 00 00	 jmp	 PyModule_Create2
PyInit__codecs ENDP
_TEXT	ENDS
END
