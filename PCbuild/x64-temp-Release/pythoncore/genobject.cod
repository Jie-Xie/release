; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_09HNDCMPDF@generator?$AA@			; `string'
PUBLIC	_PyGen_Send
PUBLIC	??_C@_04MIIPNNEF@send?$AA@			; `string'
PUBLIC	??_C@_07EJIGCMPG@gi_code?$AA@			; `string'
PUBLIC	??_C@_0L@HIMABBB@gi_running?$AA@		; `string'
PUBLIC	??_C@_08LNGNCNON@gi_frame?$AA@			; `string'
PUBLIC	??_C@_08BHKDPDAA@__name__?$AA@			; `string'
PUBLIC	??_C@_05JFAPCGDM@throw?$AA@			; `string'
PUBLIC	??_C@_05LBOHBHFK@close?$AA@			; `string'
PUBLIC	PyGen_Type
EXTRN	PyObject_SelfIter:PROC
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
;	COMDAT ??_C@_09HNDCMPDF@generator?$AA@
CONST	SEGMENT
??_C@_09HNDCMPDF@generator?$AA@ DB 'generator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04MIIPNNEF@send?$AA@
CONST	SEGMENT
??_C@_04MIIPNNEF@send?$AA@ DB 'send', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EJIGCMPG@gi_code?$AA@
CONST	SEGMENT
??_C@_07EJIGCMPG@gi_code?$AA@ DB 'gi_code', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HIMABBB@gi_running?$AA@
CONST	SEGMENT
??_C@_0L@HIMABBB@gi_running?$AA@ DB 'gi_running', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08LNGNCNON@gi_frame?$AA@
CONST	SEGMENT
??_C@_08LNGNCNON@gi_frame?$AA@ DB 'gi_frame', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BHKDPDAA@__name__?$AA@
CONST	SEGMENT
??_C@_08BHKDPDAA@__name__?$AA@ DB '__name__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05JFAPCGDM@throw?$AA@
CONST	SEGMENT
??_C@_05JFAPCGDM@throw?$AA@ DB 'throw', 00H		; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId_throw@?1??gen_throw@@9@9 DQ 0000000000000000H	; `gen_throw'::`2'::PyId_throw
	DQ	FLAT:??_C@_05JFAPCGDM@throw?$AA@
	DQ	0000000000000000H
?PyId_close@?1??gen_close_iter@@9@9 DQ 0000000000000000H ; `gen_close_iter'::`2'::PyId_close
	DQ	FLAT:??_C@_05LBOHBHFK@close?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_05LBOHBHFK@close?$AA@
CONST	SEGMENT
??_C@_05LBOHBHFK@close?$AA@ DB 'close', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
send_doc DB	'send(arg) -> send ''arg'' into generator,', 0aH, 'return'
	DB	' next yielded value or raise StopIteration.', 00H
	ORG $+6
close_doc DB	'close() -> raise GeneratorExit inside generator.', 00H
	ORG $+15
throw_doc DB	'throw(typ[,val[,tb]]) -> raise exception in generator,', 0aH
	DB	'return next yielded value or raise StopIteration.', 00H
	ORG $+7
gen__name__doc__ DB 'Return the name of the generator''s associated code '
	DB	'object.', 00H
	ORG $+5
gen_getsetlist DQ FLAT:??_C@_08BHKDPDAA@__name__?$AA@
	DQ	FLAT:gen_get_name
	DQ	0000000000000000H
	DQ	FLAT:gen__name__doc__
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
gen_memberlist DQ FLAT:??_C@_08LNGNCNON@gi_frame?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0L@HIMABBB@gi_running?$AA@
	DD	0eH
	ORG $+4
	DQ	0000000000000068H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_07EJIGCMPG@gi_code?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000070H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
gen_methods DQ	FLAT:??_C@_04MIIPNNEF@send?$AA@
	DQ	FLAT:_PyGen_Send
	DD	08H
	ORG $+4
	DQ	FLAT:send_doc
	DQ	FLAT:??_C@_05JFAPCGDM@throw?$AA@
	DQ	FLAT:gen_throw
	DD	01H
	ORG $+4
	DQ	FLAT:throw_doc
	DQ	FLAT:??_C@_05LBOHBHFK@close?$AA@
	DQ	FLAT:gen_close
	DD	04H
	ORG $+4
	DQ	FLAT:close_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PyGen_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_09HNDCMPDF@generator?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:gen_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:gen_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:gen_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000078H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:gen_iternext
	DQ	FLAT:gen_methods
	DQ	FLAT:gen_memberlist
	DQ	FLAT:gen_getsetlist
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:gen_del
	ORG $+8
_DATA	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@BEBOGKOA@gen_traverse?$AA@		; `string'
PUBLIC	??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@ ; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\genobject.c
pdata	SEGMENT
$pdata$gen_traverse DD imagerel gen_traverse
	DD	imagerel gen_traverse+148
	DD	imagerel $unwind$gen_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0N@BEBOGKOA@gen_traverse?$AA@
CONST	SEGMENT
??_C@_0N@BEBOGKOA@gen_traverse?$AA@ DB 'gen_traverse', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@
CONST	SEGMENT
??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@ DB '..\Objects\genobj'
	DB	'ect.c', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT gen_traverse
_TEXT	SEGMENT
gen$ = 48
visit$ = 56
arg$ = 64
gen_traverse PROC					; COMDAT

; 12   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 13   :     Py_VISIT((PyObject *)gen->gi_frame);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1a		 je	 SHORT $LN9@gen_traver
  00021	45 33 c9	 xor	 r9d, r9d
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BEBOGKOA@gen_traverse?$AA@
  00032	45 8d 41 0d	 lea	 r8d, QWORD PTR [r9+13]
  00036	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@gen_traver:
  0003b	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  0003f	48 85 c9	 test	 rcx, rcx
  00042	74 09		 je	 SHORT $LN11@gen_traver
  00044	48 8b d7	 mov	 rdx, rdi
  00047	ff d6		 call	 rsi
  00049	85 c0		 test	 eax, eax
  0004b	75 37		 jne	 SHORT $LN13@gen_traver
$LN11@gen_traver:

; 14   :     Py_VISIT(gen->gi_code);

  0004d	e8 00 00 00 00	 call	 _Py_PXCTX
  00052	85 c0		 test	 eax, eax
  00054	74 1a		 je	 SHORT $LN3@gen_traver
  00056	45 33 c9	 xor	 r9d, r9d
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@
  00060	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BEBOGKOA@gen_traverse?$AA@
  00067	45 8d 41 0e	 lea	 r8d, QWORD PTR [r9+14]
  0006b	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@gen_traver:
  00070	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00074	48 85 c9	 test	 rcx, rcx
  00077	74 09		 je	 SHORT $LN5@gen_traver
  00079	48 8b d7	 mov	 rdx, rdi
  0007c	ff d6		 call	 rsi
  0007e	85 c0		 test	 eax, eax
  00080	75 02		 jne	 SHORT $LN13@gen_traver
$LN5@gen_traver:

; 15   :     return 0;

  00082	33 c0		 xor	 eax, eax
$LN13@gen_traver:

; 16   : }

  00084	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00089	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0008e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00092	5f		 pop	 rdi
  00093	c3		 ret	 0
gen_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ ; `string'
PUBLIC	??_C@_0M@PFEIELHL@gen_dealloc?$AA@		; `string'
EXTRN	PyObject_GC_Del:PROC
EXTRN	_PyGC_generation0:QWORD
EXTRN	Py_FatalError:PROC
EXTRN	PyObject_ClearWeakRefs:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$gen_dealloc DD imagerel gen_dealloc
	DD	imagerel gen_dealloc+801
	DD	imagerel $unwind$gen_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_dealloc DD 06ad01H
	DD	0874adH
	DD	09340aH
	DD	06006520aH
xdata	ENDS
;	COMDAT ??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
CONST	SEGMENT
??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ DB 'GC object alread'
	DB	'y tracked', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PFEIELHL@gen_dealloc?$AA@
CONST	SEGMENT
??_C@_0M@PFEIELHL@gen_dealloc?$AA@ DB 'gen_dealloc', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\genobject.c
CONST	ENDS
;	COMDAT gen_dealloc
_TEXT	SEGMENT
gen$ = 64
gen_dealloc PROC					; COMDAT

; 20   : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b d9	 mov	 rbx, rcx

; 21   :     PyObject *self = (PyObject *) gen;
; 22   : 
; 23   :     _PyObject_GC_UNTRACK(gen);

  0000d	4c 8b c9	 mov	 r9, rcx
  00010	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@PFEIELHL@gen_dealloc?$AA@
  0001e	41 b8 17 00 00
	00		 mov	 r8d, 23
  00024	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0002c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00031	33 f6		 xor	 esi, esi
  00033	85 c0		 test	 eax, eax
  00035	75 4c		 jne	 SHORT $LN21@gen_deallo
  00037	44 8d 46 17	 lea	 r8d, QWORD PTR [rsi+23]
  0003b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@PFEIELHL@gen_dealloc?$AA@
  00049	4c 8b cb	 mov	 r9, rbx
  0004c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00054	e8 00 00 00 00	 call	 _PyParallel_Guard
  00059	8b d6		 mov	 edx, esi
  0005b	85 c0		 test	 eax, eax
  0005d	75 04		 jne	 SHORT $LN28@gen_deallo
  0005f	48 8d 53 e8	 lea	 rdx, QWORD PTR [rbx-24]
$LN28@gen_deallo:
  00063	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00066	48 8b 4a 08	 mov	 rcx, QWORD PTR [rdx+8]
  0006a	48 c7 42 10 fe
	ff ff ff	 mov	 QWORD PTR [rdx+16], -2
  00072	48 89 01	 mov	 QWORD PTR [rcx], rax
  00075	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  00078	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  0007c	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00080	48 89 32	 mov	 QWORD PTR [rdx], rsi
$LN21@gen_deallo:

; 24   : 
; 25   :     if (gen->gi_weakreflist != NULL)

  00083	48 39 73 78	 cmp	 QWORD PTR [rbx+120], rsi
  00087	74 08		 je	 SHORT $LN20@gen_deallo

; 26   :         PyObject_ClearWeakRefs(self);

  00089	48 8b cb	 mov	 rcx, rbx
  0008c	e8 00 00 00 00	 call	 PyObject_ClearWeakRefs
$LN20@gen_deallo:

; 27   : 
; 28   :     _PyObject_GC_TRACK(self);

  00091	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@PFEIELHL@gen_dealloc?$AA@
  0009f	4c 8b cb	 mov	 r9, rbx
  000a2	41 b8 1c 00 00
	00		 mov	 r8d, 28
  000a8	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  000ad	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000b5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ba	85 c0		 test	 eax, eax
  000bc	75 6f		 jne	 SHORT $LN16@gen_deallo
  000be	44 8d 40 1c	 lea	 r8d, QWORD PTR [rax+28]
  000c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@
  000c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@PFEIELHL@gen_dealloc?$AA@
  000d0	4c 8b cb	 mov	 r9, rbx
  000d3	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000db	e8 00 00 00 00	 call	 _PyParallel_Guard
  000e0	48 8b fe	 mov	 rdi, rsi
  000e3	85 c0		 test	 eax, eax
  000e5	75 04		 jne	 SHORT $LN30@gen_deallo
  000e7	48 8d 7b e8	 lea	 rdi, QWORD PTR [rbx-24]
$LN30@gen_deallo:
  000eb	48 83 7f 10 fe	 cmp	 QWORD PTR [rdi+16], -2
  000f0	74 0c		 je	 SHORT $LN15@gen_deallo
  000f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  000f9	e8 00 00 00 00	 call	 Py_FatalError
$LN15@gen_deallo:
  000fe	48 c7 47 10 fd
	ff ff ff	 mov	 QWORD PTR [rdi+16], -3
  00106	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  0010d	48 89 07	 mov	 QWORD PTR [rdi], rax
  00110	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00117	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0011b	48 89 4f 08	 mov	 QWORD PTR [rdi+8], rcx
  0011f	48 89 39	 mov	 QWORD PTR [rcx], rdi
  00122	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00129	48 89 78 08	 mov	 QWORD PTR [rax+8], rdi
$LN16@gen_deallo:

; 29   : 
; 30   :     if (gen->gi_frame != NULL && gen->gi_frame->f_stacktop != NULL) {

  0012d	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00131	48 85 c0	 test	 rax, rax
  00134	74 20		 je	 SHORT $LN13@gen_deallo
  00136	48 39 b0 a0 00
	00 00		 cmp	 QWORD PTR [rax+160], rsi
  0013d	74 17		 je	 SHORT $LN13@gen_deallo

; 31   :         /* Generator is paused, so we need to close */
; 32   :         Py_TYPE(gen)->tp_del(self);

  0013f	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00143	48 8b cb	 mov	 rcx, rbx
  00146	ff 90 d0 01 00
	00		 call	 QWORD PTR [rax+464]

; 33   :         if (self->ob_refcnt > 0)

  0014c	48 39 73 50	 cmp	 QWORD PTR [rbx+80], rsi
  00150	0f 8f bb 01 00
	00		 jg	 $LN25@gen_deallo
$LN13@gen_deallo:

; 34   :             return;                     /* resurrected.  :( */
; 35   :     }
; 36   : 
; 37   :     _PyObject_GC_UNTRACK(self);

  00156	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@
  0015d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@PFEIELHL@gen_dealloc?$AA@
  00164	4c 8b cb	 mov	 r9, rbx
  00167	41 b8 25 00 00
	00		 mov	 r8d, 37			; 00000025H
  0016d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00175	e8 00 00 00 00	 call	 _PyParallel_Guard
  0017a	85 c0		 test	 eax, eax
  0017c	75 4d		 jne	 SHORT $LN9@gen_deallo
  0017e	44 8d 40 25	 lea	 r8d, QWORD PTR [rax+37]
  00182	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@
  00189	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@PFEIELHL@gen_dealloc?$AA@
  00190	4c 8b cb	 mov	 r9, rbx
  00193	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0019b	e8 00 00 00 00	 call	 _PyParallel_Guard
  001a0	48 8b d6	 mov	 rdx, rsi
  001a3	85 c0		 test	 eax, eax
  001a5	75 04		 jne	 SHORT $LN32@gen_deallo
  001a7	48 8d 53 e8	 lea	 rdx, QWORD PTR [rbx-24]
$LN32@gen_deallo:
  001ab	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  001ae	48 8b 4a 08	 mov	 rcx, QWORD PTR [rdx+8]
  001b2	48 c7 42 10 fe
	ff ff ff	 mov	 QWORD PTR [rdx+16], -2
  001ba	48 89 01	 mov	 QWORD PTR [rcx], rax
  001bd	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  001c0	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  001c4	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  001c8	48 89 32	 mov	 QWORD PTR [rdx], rsi
$LN9@gen_deallo:

; 38   :     Py_CLEAR(gen->gi_frame);

  001cb	4c 8b 4b 60	 mov	 r9, QWORD PTR [rbx+96]
  001cf	4d 85 c9	 test	 r9, r9
  001d2	0f 84 92 00 00
	00		 je	 $LN7@gen_deallo
  001d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@
  001df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@PFEIELHL@gen_dealloc?$AA@
  001e6	41 b8 26 00 00
	00		 mov	 r8d, 38			; 00000026H
  001ec	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001f4	e8 00 00 00 00	 call	 _PyParallel_Guard
  001f9	85 c0		 test	 eax, eax
  001fb	75 6d		 jne	 SHORT $LN7@gen_deallo
  001fd	48 8b 7b 60	 mov	 rdi, QWORD PTR [rbx+96]
  00201	48 89 73 60	 mov	 QWORD PTR [rbx+96], rsi
  00205	e8 00 00 00 00	 call	 _Py_PXCTX
  0020a	85 c0		 test	 eax, eax
  0020c	75 5c		 jne	 SHORT $LN7@gen_deallo
  0020e	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00212	a8 20		 test	 al, 32			; 00000020H
  00214	75 4c		 jne	 SHORT $LN37@gen_deallo
  00216	84 c0		 test	 al, al
  00218	78 48		 js	 SHORT $LN37@gen_deallo
  0021a	a8 02		 test	 al, 2
  0021c	75 4c		 jne	 SHORT $LN7@gen_deallo
  0021e	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00222	75 46		 jne	 SHORT $LN7@gen_deallo
  00224	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0022b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00232	4c 8b cf	 mov	 r9, rdi
  00235	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0023b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00243	e8 00 00 00 00	 call	 _PyParallel_Guard
  00248	48 8b cf	 mov	 rcx, rdi
  0024b	85 c0		 test	 eax, eax
  0024d	74 07		 je	 SHORT $LN42@gen_deallo
  0024f	e8 00 00 00 00	 call	 _Px_Dealloc
  00254	eb 14		 jmp	 SHORT $LN7@gen_deallo
$LN42@gen_deallo:
  00256	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  0025a	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00260	eb 08		 jmp	 SHORT $LN7@gen_deallo
$LN37@gen_deallo:
  00262	48 8b cf	 mov	 rcx, rdi
  00265	e8 00 00 00 00	 call	 Px_DecRef
$LN7@gen_deallo:

; 39   :     Py_CLEAR(gen->gi_code);

  0026a	4c 8b 4b 70	 mov	 r9, QWORD PTR [rbx+112]
  0026e	4d 85 c9	 test	 r9, r9
  00271	0f 84 92 00 00
	00		 je	 $LN3@gen_deallo
  00277	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@
  0027e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@PFEIELHL@gen_dealloc?$AA@
  00285	41 b8 27 00 00
	00		 mov	 r8d, 39			; 00000027H
  0028b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00293	e8 00 00 00 00	 call	 _PyParallel_Guard
  00298	85 c0		 test	 eax, eax
  0029a	75 6d		 jne	 SHORT $LN3@gen_deallo
  0029c	48 8b 7b 70	 mov	 rdi, QWORD PTR [rbx+112]
  002a0	48 89 73 70	 mov	 QWORD PTR [rbx+112], rsi
  002a4	e8 00 00 00 00	 call	 _Py_PXCTX
  002a9	85 c0		 test	 eax, eax
  002ab	75 5c		 jne	 SHORT $LN3@gen_deallo
  002ad	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  002b1	a8 20		 test	 al, 32			; 00000020H
  002b3	75 4c		 jne	 SHORT $LN48@gen_deallo
  002b5	84 c0		 test	 al, al
  002b7	78 48		 js	 SHORT $LN48@gen_deallo
  002b9	a8 02		 test	 al, 2
  002bb	75 4c		 jne	 SHORT $LN3@gen_deallo
  002bd	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  002c1	75 46		 jne	 SHORT $LN3@gen_deallo
  002c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  002ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  002d1	4c 8b cf	 mov	 r9, rdi
  002d4	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  002da	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002e2	e8 00 00 00 00	 call	 _PyParallel_Guard
  002e7	48 8b cf	 mov	 rcx, rdi
  002ea	85 c0		 test	 eax, eax
  002ec	74 07		 je	 SHORT $LN53@gen_deallo
  002ee	e8 00 00 00 00	 call	 _Px_Dealloc
  002f3	eb 14		 jmp	 SHORT $LN3@gen_deallo
$LN53@gen_deallo:
  002f5	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  002f9	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  002ff	eb 08		 jmp	 SHORT $LN3@gen_deallo
$LN48@gen_deallo:
  00301	48 8b cf	 mov	 rcx, rdi
  00304	e8 00 00 00 00	 call	 Px_DecRef
$LN3@gen_deallo:

; 40   :     PyObject_GC_Del(gen);

  00309	48 8b cb	 mov	 rcx, rbx
  0030c	e8 00 00 00 00	 call	 PyObject_GC_Del
$LN25@gen_deallo:
  00311	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 41   : }

  00316	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  0031b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0031f	5e		 pop	 rsi
  00320	c3		 ret	 0
gen_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@ECPJDFO@gen_send_ex?$AA@		; `string'
PUBLIC	??_C@_0DG@NJJEFJBM@can?8t?5send?5non?9None?5value?5to?5a?5j@ ; `string'
PUBLIC	??_C@_0BM@BMEDEPAL@generator?5already?5executing?$AA@ ; `string'
EXTRN	PyErr_SetObject:PROC
EXTRN	PyObject_CallFunctionObjArgs:PROC
EXTRN	PyErr_SetNone:PROC
EXTRN	PyExc_StopIteration:QWORD
EXTRN	PyEval_EvalFrameEx:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_ValueError:QWORD
EXTRN	_PyThreadState_Current:QWORD
EXTRN	_PyParallel_GetThreadState:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$gen_send_ex DD imagerel gen_send_ex
	DD	imagerel gen_send_ex+120
	DD	imagerel $unwind$gen_send_ex
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$gen_send_ex DD imagerel gen_send_ex+120
	DD	imagerel gen_send_ex+180
	DD	imagerel $chain$1$gen_send_ex
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$gen_send_ex DD imagerel gen_send_ex+180
	DD	imagerel gen_send_ex+200
	DD	imagerel $chain$2$gen_send_ex
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$gen_send_ex DD imagerel gen_send_ex+200
	DD	imagerel gen_send_ex+656
	DD	imagerel $chain$3$gen_send_ex
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$gen_send_ex DD imagerel gen_send_ex+656
	DD	imagerel gen_send_ex+685
	DD	imagerel $chain$4$gen_send_ex
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$gen_send_ex DD 021H
	DD	imagerel gen_send_ex
	DD	imagerel gen_send_ex+120
	DD	imagerel $unwind$gen_send_ex
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$gen_send_ex DD 040021H
	DD	0be400H
	DD	0a3400H
	DD	imagerel gen_send_ex
	DD	imagerel gen_send_ex+120
	DD	imagerel $unwind$gen_send_ex
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$gen_send_ex DD 021H
	DD	imagerel gen_send_ex
	DD	imagerel gen_send_ex+120
	DD	imagerel $unwind$gen_send_ex
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$gen_send_ex DD 040a21H
	DD	0be40aH
	DD	0a3405H
	DD	imagerel gen_send_ex
	DD	imagerel gen_send_ex+120
	DD	imagerel $unwind$gen_send_ex
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_send_ex DD 081301H
	DD	0d6413H
	DD	0c5413H
	DD	0d00f5213H
	DD	0700bc00dH
xdata	ENDS
;	COMDAT ??_C@_0M@ECPJDFO@gen_send_ex?$AA@
CONST	SEGMENT
??_C@_0M@ECPJDFO@gen_send_ex?$AA@ DB 'gen_send_ex', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@NJJEFJBM@can?8t?5send?5non?9None?5value?5to?5a?5j@
CONST	SEGMENT
??_C@_0DG@NJJEFJBM@can?8t?5send?5non?9None?5value?5to?5a?5j@ DB 'can''t s'
	DB	'end non-None value to a just-started generator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BMEDEPAL@generator?5already?5executing?$AA@
CONST	SEGMENT
??_C@_0BM@BMEDEPAL@generator?5already?5executing?$AA@ DB 'generator alrea'
	DB	'dy executing', 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\genobject.c
CONST	ENDS
;	COMDAT gen_send_ex
_TEXT	SEGMENT
gen$ = 80
arg$ = 88
exc$ = 96
gen_send_ex PROC					; COMDAT

; 46   : {

  00000	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  00005	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000a	57		 push	 rdi
  0000b	41 54		 push	 r12
  0000d	41 55		 push	 r13
  0000f	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00013	45 8b e8	 mov	 r13d, r8d
  00016	48 8b f2	 mov	 rsi, rdx
  00019	4c 8b e1	 mov	 r12, rcx

; 47   :     PyThreadState *tstate = PyThreadState_GET();

  0001c	e8 00 00 00 00	 call	 _Py_PXCTX
  00021	85 c0		 test	 eax, eax
  00023	74 0a		 je	 SHORT $LN40@gen_send_e
  00025	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  0002a	48 8b e8	 mov	 rbp, rax
  0002d	eb 07		 jmp	 SHORT $LN41@gen_send_e
$LN40@gen_send_e:
  0002f	48 8b 2d 00 00
	00 00		 mov	 rbp, QWORD PTR _PyThreadState_Current
$LN41@gen_send_e:

; 48   :     PyFrameObject *f = gen->gi_frame;
; 49   :     PyObject *result;
; 50   : 
; 51   :     if (gen->gi_running) {

  00036	41 80 7c 24 68
	00		 cmp	 BYTE PTR [r12+104], 0
  0003c	49 8b 7c 24 60	 mov	 rdi, QWORD PTR [r12+96]
  00041	74 17		 je	 SHORT $LN37@gen_send_e

; 52   :         PyErr_SetString(PyExc_ValueError,
; 53   :                         "generator already executing");

  00043	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@BMEDEPAL@generator?5already?5executing?$AA@
  00051	e8 00 00 00 00	 call	 PyErr_SetString

; 54   :         return NULL;

  00056	33 c0		 xor	 eax, eax
  00058	eb 5a		 jmp	 SHORT $LN38@gen_send_e
$LN37@gen_send_e:

; 55   :     }
; 56   :     if (f == NULL || f->f_stacktop == NULL) {

  0005a	48 85 ff	 test	 rdi, rdi
  0005d	0f 84 2d 02 00
	00		 je	 $LN35@gen_send_e
  00063	48 83 bf a0 00
	00 00 00	 cmp	 QWORD PTR [rdi+160], 0
  0006b	0f 84 1f 02 00
	00		 je	 $LN35@gen_send_e

; 61   :     }
; 62   : 
; 63   :     if (f->f_lasti == -1) {

  00071	83 bf d0 00 00
	00 ff		 cmp	 DWORD PTR [rdi+208], -1
  00078	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  0007d	4c 89 74 24 58	 mov	 QWORD PTR [rsp+88], r14
  00082	4c 8d 35 00 00
	00 00		 lea	 r14, OFFSET FLAT:_Py_NoneStruct
  00089	75 3d		 jne	 SHORT $LN33@gen_send_e

; 64   :         if (arg && arg != Py_None) {

  0008b	48 85 f6	 test	 rsi, rsi
  0008e	74 5c		 je	 SHORT $LN31@gen_send_e
  00090	49 3b f6	 cmp	 rsi, r14
  00093	74 57		 je	 SHORT $LN31@gen_send_e

; 65   :             PyErr_SetString(PyExc_TypeError,
; 66   :                             "can't send non-None value to a "
; 67   :                             "just-started generator");

  00095	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0009c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DG@NJJEFJBM@can?8t?5send?5non?9None?5value?5to?5a?5j@
  000a3	e8 00 00 00 00	 call	 PyErr_SetString

; 68   :             return NULL;

  000a8	33 c0		 xor	 eax, eax
$LN47@gen_send_e:
  000aa	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000af	4c 8b 74 24 58	 mov	 r14, QWORD PTR [rsp+88]
$LN38@gen_send_e:

; 131  : }

  000b4	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
  000b9	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  000be	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c2	41 5d		 pop	 r13
  000c4	41 5c		 pop	 r12
  000c6	5f		 pop	 rdi
  000c7	c3		 ret	 0
$LN33@gen_send_e:

; 69   :         }
; 70   :     } else {
; 71   :         /* Push arg onto the frame's value stack */
; 72   :         result = arg ? arg : Py_None;

  000c8	49 8b de	 mov	 rbx, r14
  000cb	48 85 f6	 test	 rsi, rsi
  000ce	48 0f 45 de	 cmovne	 rbx, rsi

; 73   :         Py_INCREF(result);

  000d2	48 8b cb	 mov	 rcx, rbx
  000d5	e8 00 00 00 00	 call	 _Py_IncRef

; 74   :         *(f->f_stacktop++) = result;

  000da	4c 8b 9f a0 00
	00 00		 mov	 r11, QWORD PTR [rdi+160]
  000e1	49 89 1b	 mov	 QWORD PTR [r11], rbx
  000e4	48 83 87 a0 00
	00 00 08	 add	 QWORD PTR [rdi+160], 8
$LN31@gen_send_e:

; 75   :     }
; 76   : 
; 77   :     /* Generators always return to their most recent caller, not
; 78   :      * necessarily their creator. */
; 79   :     f->f_tstate = tstate;

  000ec	48 89 af c8 00
	00 00		 mov	 QWORD PTR [rdi+200], rbp

; 80   :     Py_XINCREF(tstate->frame);

  000f3	48 8b 5d 10	 mov	 rbx, QWORD PTR [rbp+16]
  000f7	48 85 db	 test	 rbx, rbx
  000fa	74 3b		 je	 SHORT $LN29@gen_send_e
  000fc	e8 00 00 00 00	 call	 _Py_PXCTX
  00101	85 c0		 test	 eax, eax
  00103	75 32		 jne	 SHORT $LN29@gen_send_e
  00105	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0010c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00113	4c 8b cb	 mov	 r9, rbx
  00116	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0011c	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00124	e8 00 00 00 00	 call	 _PyParallel_Guard
  00129	85 c0		 test	 eax, eax
  0012b	75 06		 jne	 SHORT $LN42@gen_send_e
  0012d	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00131	74 04		 je	 SHORT $LN29@gen_send_e
$LN42@gen_send_e:
  00133	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN29@gen_send_e:

; 81   :     assert(f->f_back == NULL);
; 82   :     f->f_back = tstate->frame;

  00137	48 8b 45 10	 mov	 rax, QWORD PTR [rbp+16]

; 83   : 
; 84   :     gen->gi_running = 1;
; 85   :     result = PyEval_EvalFrameEx(f, exc);

  0013b	41 8b d5	 mov	 edx, r13d
  0013e	48 8b cf	 mov	 rcx, rdi
  00141	48 89 47 70	 mov	 QWORD PTR [rdi+112], rax
  00145	41 c6 44 24 68
	01		 mov	 BYTE PTR [r12+104], 1
  0014b	e8 00 00 00 00	 call	 PyEval_EvalFrameEx

; 86   :     gen->gi_running = 0;

  00150	41 c6 44 24 68
	00		 mov	 BYTE PTR [r12+104], 0

; 87   : 
; 88   :     /* Don't keep the reference to f_back any longer than necessary.  It
; 89   :      * may keep a chain of frames alive or it could create a reference
; 90   :      * cycle. */
; 91   :     assert(f->f_back == tstate->frame);
; 92   :     Py_CLEAR(f->f_back);

  00156	4c 8b 4f 70	 mov	 r9, QWORD PTR [rdi+112]
  0015a	45 33 ed	 xor	 r13d, r13d
  0015d	48 8b d8	 mov	 rbx, rax
  00160	4d 85 c9	 test	 r9, r9
  00163	74 30		 je	 SHORT $LN25@gen_send_e
  00165	45 8d 45 5c	 lea	 r8d, QWORD PTR [r13+92]
  00169	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@
  00170	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@ECPJDFO@gen_send_ex?$AA@
  00177	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0017f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00184	85 c0		 test	 eax, eax
  00186	75 0d		 jne	 SHORT $LN25@gen_send_e
  00188	48 8b 4f 70	 mov	 rcx, QWORD PTR [rdi+112]
  0018c	4c 89 6f 70	 mov	 QWORD PTR [rdi+112], r13
  00190	e8 00 00 00 00	 call	 _Py_DecRef
$LN25@gen_send_e:

; 93   :     /* Clear the borrowed reference to the thread state */
; 94   :     f->f_tstate = NULL;

  00195	4c 89 af c8 00
	00 00		 mov	 QWORD PTR [rdi+200], r13

; 95   : 
; 96   :     /* If the generator just returned (as opposed to yielding), signal
; 97   :      * that the generator is exhausted. */
; 98   :     if (result && f->f_stacktop == NULL) {

  0019c	48 85 db	 test	 rbx, rbx
  0019f	0f 84 88 00 00
	00		 je	 $LN13@gen_send_e
  001a5	4c 39 af a0 00
	00 00		 cmp	 QWORD PTR [rdi+160], r13
  001ac	0f 85 d6 00 00
	00		 jne	 $LN14@gen_send_e

; 99   :         if (result == Py_None) {
; 100  :             /* Delay exception instantiation if we can */
; 101  :             PyErr_SetNone(PyExc_StopIteration);

  001b2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_StopIteration
  001b9	49 3b de	 cmp	 rbx, r14
  001bc	75 07		 jne	 SHORT $LN21@gen_send_e
  001be	e8 00 00 00 00	 call	 PyErr_SetNone

; 102  :         } else {

  001c3	eb 2a		 jmp	 SHORT $LN18@gen_send_e
$LN21@gen_send_e:

; 103  :             PyObject *e = PyObject_CallFunctionObjArgs(
; 104  :                                PyExc_StopIteration, result, NULL);

  001c5	45 33 c0	 xor	 r8d, r8d
  001c8	48 8b d3	 mov	 rdx, rbx
  001cb	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  001d0	48 8b f0	 mov	 rsi, rax

; 105  :             if (e != NULL) {

  001d3	48 85 c0	 test	 rax, rax
  001d6	74 17		 je	 SHORT $LN18@gen_send_e

; 106  :                 PyErr_SetObject(PyExc_StopIteration, e);

  001d8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_StopIteration
  001df	48 8b d0	 mov	 rdx, rax
  001e2	e8 00 00 00 00	 call	 PyErr_SetObject

; 107  :                 Py_DECREF(e);

  001e7	48 8b ce	 mov	 rcx, rsi
  001ea	e8 00 00 00 00	 call	 _Py_DecRef
$LN18@gen_send_e:

; 108  :             }
; 109  :         }
; 110  :         Py_CLEAR(result);

  001ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@
  001f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@ECPJDFO@gen_send_ex?$AA@
  001fd	4c 8b cb	 mov	 r9, rbx
  00200	41 b8 6e 00 00
	00		 mov	 r8d, 110		; 0000006eH
  00206	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0020e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00213	85 c0		 test	 eax, eax
  00215	75 0d		 jne	 SHORT $LN16@gen_send_e
  00217	48 8b cb	 mov	 rcx, rbx
  0021a	49 8b dd	 mov	 rbx, r13
  0021d	e8 00 00 00 00	 call	 _Py_DecRef

; 111  :     }
; 112  : 
; 113  :     if (!result || f->f_stacktop == NULL) {

  00222	eb 09		 jmp	 SHORT $LN13@gen_send_e
$LN16@gen_send_e:
  00224	4c 39 af a0 00
	00 00		 cmp	 QWORD PTR [rdi+160], r13
  0022b	75 5b		 jne	 SHORT $LN14@gen_send_e
$LN13@gen_send_e:

; 114  :         /* generator can't be rerun, so release the frame */
; 115  :         /* first clean reference cycle through stored exception traceback */
; 116  :         PyObject *t, *v, *tb;
; 117  :         t = f->f_exc_type;

  0022d	48 8b 8f b0 00
	00 00		 mov	 rcx, QWORD PTR [rdi+176]

; 118  :         v = f->f_exc_value;

  00234	48 8b af b8 00
	00 00		 mov	 rbp, QWORD PTR [rdi+184]

; 119  :         tb = f->f_exc_traceback;

  0023b	48 8b b7 c0 00
	00 00		 mov	 rsi, QWORD PTR [rdi+192]

; 120  :         f->f_exc_type = NULL;

  00242	4c 89 af b0 00
	00 00		 mov	 QWORD PTR [rdi+176], r13

; 121  :         f->f_exc_value = NULL;

  00249	4c 89 af b8 00
	00 00		 mov	 QWORD PTR [rdi+184], r13

; 122  :         f->f_exc_traceback = NULL;

  00250	4c 89 af c0 00
	00 00		 mov	 QWORD PTR [rdi+192], r13

; 123  :         Py_XDECREF(t);

  00257	48 85 c9	 test	 rcx, rcx
  0025a	74 05		 je	 SHORT $LN11@gen_send_e
  0025c	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@gen_send_e:

; 124  :         Py_XDECREF(v);

  00261	48 85 ed	 test	 rbp, rbp
  00264	74 08		 je	 SHORT $LN7@gen_send_e
  00266	48 8b cd	 mov	 rcx, rbp
  00269	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@gen_send_e:

; 125  :         Py_XDECREF(tb);

  0026e	48 85 f6	 test	 rsi, rsi
  00271	74 08		 je	 SHORT $LN3@gen_send_e
  00273	48 8b ce	 mov	 rcx, rsi
  00276	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@gen_send_e:

; 126  :         gen->gi_frame = NULL;
; 127  :         Py_DECREF(f);

  0027b	48 8b cf	 mov	 rcx, rdi
  0027e	4d 89 6c 24 60	 mov	 QWORD PTR [r12+96], r13
  00283	e8 00 00 00 00	 call	 _Py_DecRef
$LN14@gen_send_e:

; 128  :     }
; 129  : 
; 130  :     return result;

  00288	48 8b c3	 mov	 rax, rbx
  0028b	e9 1a fe ff ff	 jmp	 $LN47@gen_send_e
$LN35@gen_send_e:

; 57   :         /* Only set exception if called from send() */
; 58   :         if (arg && !exc)

  00290	48 85 f6	 test	 rsi, rsi
  00293	74 11		 je	 SHORT $LN34@gen_send_e
  00295	45 85 ed	 test	 r13d, r13d
  00298	75 0c		 jne	 SHORT $LN34@gen_send_e

; 59   :             PyErr_SetNone(PyExc_StopIteration);

  0029a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_StopIteration
  002a1	e8 00 00 00 00	 call	 PyErr_SetNone
$LN34@gen_send_e:

; 60   :         return NULL;

  002a6	33 c0		 xor	 eax, eax
  002a8	e9 07 fe ff ff	 jmp	 $LN38@gen_send_e
gen_send_ex ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _PyGen_Send
_TEXT	SEGMENT
gen$ = 8
arg$ = 16
_PyGen_Send PROC					; COMDAT

; 140  :     return gen_send_ex(gen, arg, 0);

  00000	45 33 c0	 xor	 r8d, r8d

; 141  : }

  00003	e9 00 00 00 00	 jmp	 gen_send_ex
_PyGen_Send ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_yf DD imagerel gen_yf
	DD	imagerel gen_yf+80
	DD	imagerel $unwind$gen_yf
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_yf DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT gen_yf
_TEXT	SEGMENT
gen$ = 48
gen_yf	PROC						; COMDAT

; 180  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 181  :     PyObject *yf = NULL;
; 182  :     PyFrameObject *f = gen->gi_frame;

  00006	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  0000a	33 db		 xor	 ebx, ebx

; 183  : 
; 184  :     if (f && f->f_stacktop) {

  0000c	48 85 d2	 test	 rdx, rdx
  0000f	74 36		 je	 SHORT $LN2@gen_yf
  00011	4c 8b 82 a0 00
	00 00		 mov	 r8, QWORD PTR [rdx+160]
  00018	4d 85 c0	 test	 r8, r8
  0001b	74 2a		 je	 SHORT $LN2@gen_yf

; 185  :         PyObject *bytecode = f->f_code->co_code;
; 186  :         unsigned char *code = (unsigned char *)PyBytes_AS_STRING(bytecode);
; 187  : 
; 188  :         if (code[f->f_lasti + 1] != YIELD_FROM)

  0001d	48 8b 42 78	 mov	 rax, QWORD PTR [rdx+120]
  00021	48 63 8a d0 00
	00 00		 movsxd	 rcx, DWORD PTR [rdx+208]
  00028	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  0002c	80 7c 08 79 48	 cmp	 BYTE PTR [rax+rcx+121], 72 ; 00000048H
  00031	74 08		 je	 SHORT $LN1@gen_yf

; 189  :             return NULL;

  00033	33 c0		 xor	 eax, eax

; 195  : }

  00035	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00039	5b		 pop	 rbx
  0003a	c3		 ret	 0
$LN1@gen_yf:

; 190  :         yf = f->f_stacktop[-1];

  0003b	49 8b 58 f8	 mov	 rbx, QWORD PTR [r8-8]

; 191  :         Py_INCREF(yf);

  0003f	48 8b cb	 mov	 rcx, rbx
  00042	e8 00 00 00 00	 call	 _Py_IncRef
$LN2@gen_yf:

; 192  :     }
; 193  : 
; 194  :     return yf;

  00047	48 8b c3	 mov	 rax, rbx

; 195  : }

  0004a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004e	5b		 pop	 rbx
  0004f	c3		 ret	 0
gen_yf	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@EKELMAO@generator?5ignored?5GeneratorExit?$AA@ ; `string'
EXTRN	PyErr_Clear:PROC
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_RuntimeError:QWORD
EXTRN	PyExc_GeneratorExit:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$gen_close DD imagerel gen_close
	DD	imagerel gen_close+4
	DD	imagerel $unwind$gen_close
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$gen_close DD imagerel gen_close+4
	DD	imagerel gen_close+33
	DD	imagerel $chain$1$gen_close
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$gen_close DD imagerel gen_close+33
	DD	imagerel gen_close+70
	DD	imagerel $chain$2$gen_close
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$gen_close DD imagerel gen_close+70
	DD	imagerel gen_close+118
	DD	imagerel $chain$3$gen_close
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$gen_close DD imagerel gen_close+118
	DD	imagerel gen_close+270
	DD	imagerel $chain$4$gen_close
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$gen_close DD 021H
	DD	imagerel gen_close
	DD	imagerel gen_close+4
	DD	imagerel $unwind$gen_close
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$gen_close DD 021H
	DD	imagerel gen_close+4
	DD	imagerel gen_close+33
	DD	imagerel $chain$1$gen_close
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$gen_close DD 020521H
	DD	083405H
	DD	imagerel gen_close+4
	DD	imagerel gen_close+33
	DD	imagerel $chain$1$gen_close
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$gen_close DD 040a21H
	DD	06740aH
	DD	096405H
	DD	imagerel gen_close
	DD	imagerel gen_close+4
	DD	imagerel $unwind$gen_close
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_close DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0CA@EKELMAO@generator?5ignored?5GeneratorExit?$AA@
CONST	SEGMENT
??_C@_0CA@EKELMAO@generator?5ignored?5GeneratorExit?$AA@ DB 'generator ig'
	DB	'nored GeneratorExit', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\genobject.c
CONST	ENDS
;	COMDAT gen_close
_TEXT	SEGMENT
gen$ = 64
args$ = 72
gen_close PROC						; COMDAT

; 199  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 89 74 24 48	 mov	 QWORD PTR [rsp+72], rsi
  00009	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  0000e	48 8b f9	 mov	 rdi, rcx

; 200  :     PyObject *retval;
; 201  :     PyObject *yf = gen_yf(gen);

  00011	e8 00 00 00 00	 call	 gen_yf
  00016	48 8b f0	 mov	 rsi, rax

; 202  :     int err = 0;
; 203  : 
; 204  :     if (yf) {

  00019	48 85 c0	 test	 rax, rax
  0001c	74 28		 je	 SHORT $LN12@gen_close

; 205  :         gen->gi_running = 1;
; 206  :         err = gen_close_iter(yf);

  0001e	48 8b c8	 mov	 rcx, rax
  00021	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00026	c6 47 68 01	 mov	 BYTE PTR [rdi+104], 1
  0002a	e8 00 00 00 00	 call	 gen_close_iter

; 207  :         gen->gi_running = 0;
; 208  :         Py_DECREF(yf);

  0002f	48 8b ce	 mov	 rcx, rsi
  00032	c6 47 68 00	 mov	 BYTE PTR [rdi+104], 0
  00036	8b d8		 mov	 ebx, eax
  00038	e8 00 00 00 00	 call	 _Py_DecRef

; 209  :     }
; 210  :     if (err == 0)

  0003d	85 db		 test	 ebx, ebx
  0003f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00044	75 0c		 jne	 SHORT $LN4@gen_close
$LN12@gen_close:

; 211  :         PyErr_SetNone(PyExc_GeneratorExit);

  00046	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_GeneratorExit
  0004d	e8 00 00 00 00	 call	 PyErr_SetNone
$LN4@gen_close:

; 212  :     retval = gen_send_ex(gen, Py_None, 1);

  00052	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_NoneStruct
  00059	41 b8 01 00 00
	00		 mov	 r8d, 1
  0005f	48 8b cf	 mov	 rcx, rdi
  00062	e8 00 00 00 00	 call	 gen_send_ex
  00067	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
  0006c	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]

; 213  :     if (retval) {

  00071	48 85 c0	 test	 rax, rax
  00074	74 22		 je	 SHORT $LN3@gen_close

; 214  :         Py_DECREF(retval);

  00076	48 8b c8	 mov	 rcx, rax
  00079	e8 00 00 00 00	 call	 _Py_DecRef

; 215  :         PyErr_SetString(PyExc_RuntimeError,
; 216  :                         "generator ignored GeneratorExit");

  0007e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00085	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@EKELMAO@generator?5ignored?5GeneratorExit?$AA@
  0008c	e8 00 00 00 00	 call	 PyErr_SetString
$LN13@gen_close:

; 217  :         return NULL;

  00091	33 c0		 xor	 eax, eax

; 226  : }

  00093	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00097	c3		 ret	 0
$LN3@gen_close:

; 218  :     }
; 219  :     if (PyErr_ExceptionMatches(PyExc_StopIteration)
; 220  :         || PyErr_ExceptionMatches(PyExc_GeneratorExit)) {

  00098	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_StopIteration
  0009f	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  000a4	85 c0		 test	 eax, eax
  000a6	75 10		 jne	 SHORT $LN1@gen_close
  000a8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_GeneratorExit
  000af	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  000b4	85 c0		 test	 eax, eax

; 224  :     }
; 225  :     return NULL;

  000b6	74 d9		 je	 SHORT $LN13@gen_close
$LN1@gen_close:

; 221  :         PyErr_Clear();          /* ignore these errors */

  000b8	e8 00 00 00 00	 call	 PyErr_Clear

; 222  :         Py_INCREF(Py_None);

  000bd	e8 00 00 00 00	 call	 _Py_PXCTX
  000c2	85 c0		 test	 eax, eax
  000c4	75 3c		 jne	 SHORT $LN9@gen_close
  000c6	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  000cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000db	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000e1	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000e9	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ee	85 c0		 test	 eax, eax
  000f0	75 09		 jne	 SHORT $LN8@gen_close
  000f2	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  000f9	74 07		 je	 SHORT $LN9@gen_close
$LN8@gen_close:
  000fb	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN9@gen_close:

; 223  :         return Py_None;

  00102	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 226  : }

  00109	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0010d	c3		 ret	 0
gen_close ENDP
_TEXT	ENDS
PUBLIC	??_C@_07CCNAJBHC@gen_del?$AA@			; `string'
EXTRN	_Px_NewReference:PROC
EXTRN	PyErr_Restore:PROC
EXTRN	PyErr_WriteUnraisable:PROC
EXTRN	PyErr_Fetch:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_del DD imagerel gen_del
	DD	imagerel gen_del+59
	DD	imagerel $unwind$gen_del
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$gen_del DD imagerel gen_del+59
	DD	imagerel gen_del+195
	DD	imagerel $chain$0$gen_del
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$gen_del DD imagerel gen_del+195
	DD	imagerel gen_del+212
	DD	imagerel $chain$2$gen_del
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$gen_del DD imagerel gen_del+212
	DD	imagerel gen_del+218
	DD	imagerel $chain$3$gen_del
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$gen_del DD 021H
	DD	imagerel gen_del
	DD	imagerel gen_del+59
	DD	imagerel $unwind$gen_del
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$gen_del DD 020021H
	DD	0b7400H
	DD	imagerel gen_del
	DD	imagerel gen_del+59
	DD	imagerel $unwind$gen_del
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$gen_del DD 020521H
	DD	0b7405H
	DD	imagerel gen_del
	DD	imagerel gen_del+59
	DD	imagerel $unwind$gen_del
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_del DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_07CCNAJBHC@gen_del?$AA@
CONST	SEGMENT
??_C@_07CCNAJBHC@gen_del?$AA@ DB 'gen_del', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT gen_del
_TEXT	SEGMENT
error_traceback$ = 64
self$ = 64
error_value$ = 72
error_type$ = 80
gen_del	PROC						; COMDAT

; 230  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 231  :     PyObject *res;
; 232  :     PyObject *error_type, *error_value, *error_traceback;
; 233  :     PyGenObject *gen = (PyGenObject *)self;
; 234  : 
; 235  :     if (gen->gi_frame == NULL || gen->gi_frame->f_stacktop == NULL)

  00006	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	48 85 c0	 test	 rax, rax
  00010	0f 84 be 00 00
	00		 je	 $LN4@gen_del
  00016	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  0001e	0f 84 b0 00 00
	00		 je	 $LN4@gen_del

; 236  :         /* Generator isn't paused, so no need to close */
; 237  :         return;
; 238  : 
; 239  :     /* Temporarily resurrect the object. */
; 240  :     assert(self->ob_refcnt == 0);
; 241  :     self->ob_refcnt = 1;

  00024	48 c7 41 50 01
	00 00 00	 mov	 QWORD PTR [rcx+80], 1

; 242  : 
; 243  :     /* Save the current exception, if any. */
; 244  :     PyErr_Fetch(&error_type, &error_value, &error_traceback);

  0002c	4c 8d 44 24 40	 lea	 r8, QWORD PTR error_traceback$[rsp]
  00031	48 8d 54 24 48	 lea	 rdx, QWORD PTR error_value$[rsp]
  00036	48 8d 4c 24 50	 lea	 rcx, QWORD PTR error_type$[rsp]
  0003b	48 89 7c 24 58	 mov	 QWORD PTR [rsp+88], rdi
  00040	e8 00 00 00 00	 call	 PyErr_Fetch

; 245  : 
; 246  :     res = gen_close(gen, NULL);

  00045	33 d2		 xor	 edx, edx
  00047	48 8b cb	 mov	 rcx, rbx
  0004a	e8 00 00 00 00	 call	 gen_close

; 247  : 
; 248  :     if (res == NULL)

  0004f	48 85 c0	 test	 rax, rax
  00052	75 0a		 jne	 SHORT $LN3@gen_del

; 249  :         PyErr_WriteUnraisable(self);

  00054	48 8b cb	 mov	 rcx, rbx
  00057	e8 00 00 00 00	 call	 PyErr_WriteUnraisable

; 250  :     else

  0005c	eb 08		 jmp	 SHORT $LN2@gen_del
$LN3@gen_del:

; 251  :         Py_DECREF(res);

  0005e	48 8b c8	 mov	 rcx, rax
  00061	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@gen_del:

; 252  : 
; 253  :     /* Restore the saved exception. */
; 254  :     PyErr_Restore(error_type, error_value, error_traceback);

  00066	4c 8b 44 24 40	 mov	 r8, QWORD PTR error_traceback$[rsp]
  0006b	48 8b 54 24 48	 mov	 rdx, QWORD PTR error_value$[rsp]
  00070	48 8b 4c 24 50	 mov	 rcx, QWORD PTR error_type$[rsp]
  00075	e8 00 00 00 00	 call	 PyErr_Restore

; 255  : 
; 256  :     /* Undo the temporary resurrection; can't use DECREF here, it would
; 257  :      * cause a recursive call.
; 258  :      */
; 259  :     assert(self->ob_refcnt > 0);
; 260  :     if (--self->ob_refcnt == 0)

  0007a	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0007e	48 8b 7b 50	 mov	 rdi, QWORD PTR [rbx+80]
  00082	74 4b		 je	 SHORT $LN10@gen_del

; 261  :         return; /* this is the normal path out */
; 262  : 
; 263  :     /* close() resurrected it!  Make it look like the original Py_DECREF
; 264  :      * never happened.
; 265  :      */
; 266  :     {
; 267  :         Py_ssize_t refcnt = self->ob_refcnt;
; 268  :         _Py_NewReference(self);

  00084	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@
  0008b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07CCNAJBHC@gen_del?$AA@
  00092	4c 8b cb	 mov	 r9, rbx
  00095	41 b8 0c 01 00
	00		 mov	 r8d, 268		; 0000010cH
  0009b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000a3	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a8	85 c0		 test	 eax, eax
  000aa	74 17		 je	 SHORT $LN8@gen_del
  000ac	48 8b cb	 mov	 rcx, rbx
  000af	e8 00 00 00 00	 call	 _Px_NewReference

; 269  :         self->ob_refcnt = refcnt;

  000b4	48 89 7b 50	 mov	 QWORD PTR [rbx+80], rdi
  000b8	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]

; 270  :     }
; 271  :     assert(PyType_IS_GC(Py_TYPE(self)) &&
; 272  :            _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
; 273  : 
; 274  :     /* If Py_REF_DEBUG, _Py_NewReference bumped _Py_RefTotal, so
; 275  :      * we need to undo that. */
; 276  :     _Py_DEC_REFTOTAL;
; 277  :     /* If Py_TRACE_REFS, _Py_NewReference re-added self to the object
; 278  :      * chain, so no more to do there.
; 279  :      * If COUNT_ALLOCS, the original decref bumped tp_frees, and
; 280  :      * _Py_NewReference bumped tp_allocs:  both of those need to be
; 281  :      * undone.
; 282  :      */
; 283  : #ifdef COUNT_ALLOCS
; 284  :     --(Py_TYPE(self)->tp_frees);
; 285  :     --(Py_TYPE(self)->tp_allocs);
; 286  : #endif
; 287  : }

  000bd	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c1	5b		 pop	 rbx
  000c2	c3		 ret	 0
$LN8@gen_del:

; 261  :         return; /* this is the normal path out */
; 262  : 
; 263  :     /* close() resurrected it!  Make it look like the original Py_DECREF
; 264  :      * never happened.
; 265  :      */
; 266  :     {
; 267  :         Py_ssize_t refcnt = self->ob_refcnt;
; 268  :         _Py_NewReference(self);

  000c3	48 c7 43 50 01
	00 00 00	 mov	 QWORD PTR [rbx+80], 1

; 269  :         self->ob_refcnt = refcnt;

  000cb	48 89 7b 50	 mov	 QWORD PTR [rbx+80], rdi
$LN10@gen_del:
  000cf	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
$LN4@gen_del:

; 270  :     }
; 271  :     assert(PyType_IS_GC(Py_TYPE(self)) &&
; 272  :            _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
; 273  : 
; 274  :     /* If Py_REF_DEBUG, _Py_NewReference bumped _Py_RefTotal, so
; 275  :      * we need to undo that. */
; 276  :     _Py_DEC_REFTOTAL;
; 277  :     /* If Py_TRACE_REFS, _Py_NewReference re-added self to the object
; 278  :      * chain, so no more to do there.
; 279  :      * If COUNT_ALLOCS, the original decref bumped tp_frees, and
; 280  :      * _Py_NewReference bumped tp_allocs:  both of those need to be
; 281  :      * undone.
; 282  :      */
; 283  : #ifdef COUNT_ALLOCS
; 284  :     --(Py_TYPE(self)->tp_frees);
; 285  :     --(Py_TYPE(self)->tp_allocs);
; 286  : #endif
; 287  : }

  000d4	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d8	5b		 pop	 rbx
  000d9	c3		 ret	 0
gen_del	ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT gen_iternext
_TEXT	SEGMENT
gen$ = 8
gen_iternext PROC					; COMDAT

; 420  :     PyObject *val = NULL;
; 421  :     PyObject *ret;
; 422  :     ret = gen_send_ex(gen, val, 0);

  00000	45 33 c0	 xor	 r8d, r8d
  00003	33 d2		 xor	 edx, edx

; 423  :     Py_XDECREF(val);
; 424  :     return ret;
; 425  : }

  00005	e9 00 00 00 00	 jmp	 gen_send_ex
gen_iternext ENDP
_TEXT	ENDS
PUBLIC	_PyGen_FetchStopIterationValue
EXTRN	PyErr_Occurred:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_PyGen_FetchStopIterationValue DD imagerel $LN47
	DD	imagerel $LN47+478
	DD	imagerel $unwind$_PyGen_FetchStopIterationValue
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyGen_FetchStopIterationValue DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\genobject.c
xdata	ENDS
;	COMDAT _PyGen_FetchStopIterationValue
_TEXT	SEGMENT
pvalue$ = 64
ev$ = 72
et$ = 80
tb$ = 88
_PyGen_FetchStopIterationValue PROC			; COMDAT

; 437  : _PyGen_FetchStopIterationValue(PyObject **pvalue) {

$LN47:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 438  :     PyObject *et, *ev, *tb;
; 439  :     PyObject *value = NULL;
; 440  : 
; 441  :     if (PyErr_ExceptionMatches(PyExc_StopIteration)) {

  0000d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_StopIteration
  00014	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00019	85 c0		 test	 eax, eax
  0001b	0f 84 a5 01 00
	00		 je	 $LN13@PyGen_Fetc

; 442  :         PyErr_Fetch(&et, &ev, &tb);

  00021	4c 8d 44 24 58	 lea	 r8, QWORD PTR tb$[rsp]
  00026	48 8d 54 24 48	 lea	 rdx, QWORD PTR ev$[rsp]
  0002b	48 8d 4c 24 50	 lea	 rcx, QWORD PTR et$[rsp]
  00030	e8 00 00 00 00	 call	 PyErr_Fetch

; 443  :         Py_XDECREF(et);

  00035	48 8b 5c 24 50	 mov	 rbx, QWORD PTR et$[rsp]
  0003a	48 85 db	 test	 rbx, rbx
  0003d	74 65		 je	 SHORT $LN11@PyGen_Fetc
  0003f	e8 00 00 00 00	 call	 _Py_PXCTX
  00044	85 c0		 test	 eax, eax
  00046	75 5c		 jne	 SHORT $LN11@PyGen_Fetc
  00048	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0004c	a8 20		 test	 al, 32			; 00000020H
  0004e	75 4c		 jne	 SHORT $LN20@PyGen_Fetc
  00050	84 c0		 test	 al, al
  00052	78 48		 js	 SHORT $LN20@PyGen_Fetc
  00054	a8 02		 test	 al, 2
  00056	75 4c		 jne	 SHORT $LN11@PyGen_Fetc
  00058	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0005c	75 46		 jne	 SHORT $LN11@PyGen_Fetc
  0005e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00065	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0006c	4c 8b cb	 mov	 r9, rbx
  0006f	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00075	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0007d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00082	48 8b cb	 mov	 rcx, rbx
  00085	85 c0		 test	 eax, eax
  00087	74 07		 je	 SHORT $LN25@PyGen_Fetc
  00089	e8 00 00 00 00	 call	 _Px_Dealloc
  0008e	eb 14		 jmp	 SHORT $LN11@PyGen_Fetc
$LN25@PyGen_Fetc:
  00090	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00094	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0009a	eb 08		 jmp	 SHORT $LN11@PyGen_Fetc
$LN20@PyGen_Fetc:
  0009c	48 8b cb	 mov	 rcx, rbx
  0009f	e8 00 00 00 00	 call	 Px_DecRef
$LN11@PyGen_Fetc:

; 444  :         Py_XDECREF(tb);

  000a4	48 8b 5c 24 58	 mov	 rbx, QWORD PTR tb$[rsp]
  000a9	48 85 db	 test	 rbx, rbx
  000ac	74 65		 je	 SHORT $LN7@PyGen_Fetc
  000ae	e8 00 00 00 00	 call	 _Py_PXCTX
  000b3	85 c0		 test	 eax, eax
  000b5	75 5c		 jne	 SHORT $LN7@PyGen_Fetc
  000b7	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000bb	a8 20		 test	 al, 32			; 00000020H
  000bd	75 4c		 jne	 SHORT $LN31@PyGen_Fetc
  000bf	84 c0		 test	 al, al
  000c1	78 48		 js	 SHORT $LN31@PyGen_Fetc
  000c3	a8 02		 test	 al, 2
  000c5	75 4c		 jne	 SHORT $LN7@PyGen_Fetc
  000c7	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000cb	75 46		 jne	 SHORT $LN7@PyGen_Fetc
  000cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000db	4c 8b cb	 mov	 r9, rbx
  000de	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000e4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ec	e8 00 00 00 00	 call	 _PyParallel_Guard
  000f1	48 8b cb	 mov	 rcx, rbx
  000f4	85 c0		 test	 eax, eax
  000f6	74 07		 je	 SHORT $LN36@PyGen_Fetc
  000f8	e8 00 00 00 00	 call	 _Px_Dealloc
  000fd	eb 14		 jmp	 SHORT $LN7@PyGen_Fetc
$LN36@PyGen_Fetc:
  000ff	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00103	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00109	eb 08		 jmp	 SHORT $LN7@PyGen_Fetc
$LN31@PyGen_Fetc:
  0010b	48 8b cb	 mov	 rcx, rbx
  0010e	e8 00 00 00 00	 call	 Px_DecRef
$LN7@PyGen_Fetc:

; 445  :         if (ev) {

  00113	48 8b 5c 24 48	 mov	 rbx, QWORD PTR ev$[rsp]
  00118	48 85 db	 test	 rbx, rbx
  0011b	74 51		 je	 SHORT $LN46@PyGen_Fetc

; 446  :             value = ((PyStopIterationObject *)ev)->value;

  0011d	48 8b 9b 90 00
	00 00		 mov	 rbx, QWORD PTR [rbx+144]

; 447  :             Py_INCREF(value);

  00124	e8 00 00 00 00	 call	 _Py_PXCTX
  00129	85 c0		 test	 eax, eax
  0012b	75 32		 jne	 SHORT $LN39@PyGen_Fetc
  0012d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00134	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0013b	4c 8b cb	 mov	 r9, rbx
  0013e	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00144	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0014c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00151	85 c0		 test	 eax, eax
  00153	75 06		 jne	 SHORT $LN38@PyGen_Fetc
  00155	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00159	74 04		 je	 SHORT $LN39@PyGen_Fetc
$LN38@PyGen_Fetc:
  0015b	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN39@PyGen_Fetc:

; 448  :             Py_DECREF(ev);

  0015f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR ev$[rsp]
  00164	e8 00 00 00 00	 call	 _Py_DecRef

; 452  :     }
; 453  :     if (value == NULL) {

  00169	48 85 db	 test	 rbx, rbx
  0016c	75 48		 jne	 SHORT $LN43@PyGen_Fetc
$LN46@PyGen_Fetc:

; 454  :         value = Py_None;

  0016e	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct

; 455  :         Py_INCREF(value);

  00175	e8 00 00 00 00	 call	 _Py_PXCTX
  0017a	85 c0		 test	 eax, eax
  0017c	75 38		 jne	 SHORT $LN43@PyGen_Fetc
  0017e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00185	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0018c	4c 8b cb	 mov	 r9, rbx
  0018f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00195	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0019d	e8 00 00 00 00	 call	 _PyParallel_Guard
  001a2	85 c0		 test	 eax, eax
  001a4	75 09		 jne	 SHORT $LN42@PyGen_Fetc
  001a6	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  001ad	74 07		 je	 SHORT $LN43@PyGen_Fetc
$LN42@PyGen_Fetc:
  001af	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN43@PyGen_Fetc:

; 456  :     }
; 457  :     *pvalue = value;

  001b6	48 89 1f	 mov	 QWORD PTR [rdi], rbx

; 458  :     return 0;

  001b9	33 c0		 xor	 eax, eax

; 459  : }

  001bb	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  001c0	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001c4	5f		 pop	 rdi
  001c5	c3		 ret	 0
$LN13@PyGen_Fetc:

; 449  :         }
; 450  :     } else if (PyErr_Occurred()) {

  001c6	e8 00 00 00 00	 call	 PyErr_Occurred
  001cb	48 85 c0	 test	 rax, rax
  001ce	74 9e		 je	 SHORT $LN46@PyGen_Fetc

; 451  :         return -1;

  001d0	83 c8 ff	 or	 eax, -1

; 459  : }

  001d3	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  001d8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001dc	5f		 pop	 rdi
  001dd	c3		 ret	 0
_PyGen_FetchStopIterationValue ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@DIMDFBHH@?$DMgenerator?5object?5?$CFS?5at?5?$CFp?$DO?$AA@ ; `string'
EXTRN	PyUnicode_FromFormat:PROC
;	COMDAT ??_C@_0BM@DIMDFBHH@?$DMgenerator?5object?5?$CFS?5at?5?$CFp?$DO?$AA@
CONST	SEGMENT
??_C@_0BM@DIMDFBHH@?$DMgenerator?5object?5?$CFS?5at?5?$CFp?$DO?$AA@ DB '<'
	DB	'generator object %S at %p>', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT gen_repr
_TEXT	SEGMENT
gen$ = 8
gen_repr PROC						; COMDAT

; 464  :     return PyUnicode_FromFormat("<generator object %S at %p>",
; 465  :                                 ((PyCodeObject *)gen->gi_code)->co_name,
; 466  :                                 gen);

  00000	48 8b 51 70	 mov	 rdx, QWORD PTR [rcx+112]
  00004	4c 8b c1	 mov	 r8, rcx
  00007	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@DIMDFBHH@?$DMgenerator?5object?5?$CFS?5at?5?$CFp?$DO?$AA@
  0000e	48 8b 92 b8 00
	00 00		 mov	 rdx, QWORD PTR [rdx+184]

; 467  : }

  00015	e9 00 00 00 00	 jmp	 PyUnicode_FromFormat
gen_repr ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$gen_get_name DD imagerel gen_get_name
	DD	imagerel gen_get_name+85
	DD	imagerel $unwind$gen_get_name
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_get_name DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\genobject.c
xdata	ENDS
;	COMDAT gen_get_name
_TEXT	SEGMENT
gen$ = 64
gen_get_name PROC					; COMDAT

; 472  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 473  :     PyObject *name = ((PyCodeObject *)gen->gi_code)->co_name;

  00006	48 8b 41 70	 mov	 rax, QWORD PTR [rcx+112]
  0000a	48 8b 98 b8 00
	00 00		 mov	 rbx, QWORD PTR [rax+184]

; 474  :     Py_INCREF(name);

  00011	e8 00 00 00 00	 call	 _Py_PXCTX
  00016	85 c0		 test	 eax, eax
  00018	75 32		 jne	 SHORT $LN7@gen_get_na
  0001a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00028	4c 8b cb	 mov	 r9, rbx
  0002b	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00031	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00039	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003e	85 c0		 test	 eax, eax
  00040	75 06		 jne	 SHORT $LN3@gen_get_na
  00042	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00046	74 04		 je	 SHORT $LN7@gen_get_na
$LN3@gen_get_na:
  00048	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN7@gen_get_na:

; 475  :     return name;

  0004c	48 8b c3	 mov	 rax, rbx

; 476  : }

  0004f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00053	5b		 pop	 rbx
  00054	c3		 ret	 0
gen_get_name ENDP
_TEXT	ENDS
PUBLIC	??_C@_09NOKDDDDN@PyGen_New?$AA@			; `string'
PUBLIC	PyGen_New
EXTRN	_PyObject_GC_New:PROC
EXTRN	_PxObject_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyGen_New DD imagerel $LN18
	DD	imagerel $LN18+329
	DD	imagerel $unwind$PyGen_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyGen_New DD 064f01H
	DD	08744fH
	DD	09340aH
	DD	06006520aH
xdata	ENDS
;	COMDAT ??_C@_09NOKDDDDN@PyGen_New?$AA@
CONST	SEGMENT
??_C@_09NOKDDDDN@PyGen_New?$AA@ DB 'PyGen_New', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\genobject.c
CONST	ENDS
;	COMDAT PyGen_New
_TEXT	SEGMENT
f$ = 64
PyGen_New PROC						; COMDAT

; 555  : {

$LN18:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f1	 mov	 rsi, rcx

; 556  :     PyGenObject *gen = PyObject_GC_New(PyGenObject, &PyGen_Type);

  0000d	e8 00 00 00 00	 call	 _Py_PXCTX
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyGen_Type
  00019	85 c0		 test	 eax, eax
  0001b	74 07		 je	 SHORT $LN9@PyGen_New
  0001d	e8 00 00 00 00	 call	 _PxObject_New
  00022	eb 05		 jmp	 SHORT $LN17@PyGen_New
$LN9@PyGen_New:
  00024	e8 00 00 00 00	 call	 _PyObject_GC_New
$LN17@PyGen_New:
  00029	48 8b d8	 mov	 rbx, rax

; 557  :     if (gen == NULL) {

  0002c	48 85 c0	 test	 rax, rax
  0002f	75 15		 jne	 SHORT $LN6@PyGen_New

; 558  :         Py_DECREF(f);

  00031	48 8b ce	 mov	 rcx, rsi
  00034	e8 00 00 00 00	 call	 _Py_DecRef

; 559  :         return NULL;

  00039	33 c0		 xor	 eax, eax

; 568  : }

  0003b	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00040	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00044	5e		 pop	 rsi
  00045	c3		 ret	 0
$LN6@PyGen_New:

; 560  :     }
; 561  :     gen->gi_frame = f;

  00046	48 89 73 60	 mov	 QWORD PTR [rbx+96], rsi
  0004a	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi

; 562  :     Py_INCREF(f->f_code);

  0004f	48 8b 7e 78	 mov	 rdi, QWORD PTR [rsi+120]
  00053	e8 00 00 00 00	 call	 _Py_PXCTX
  00058	85 c0		 test	 eax, eax
  0005a	75 32		 jne	 SHORT $LN14@PyGen_New
  0005c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00063	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0006a	4c 8b cf	 mov	 r9, rdi
  0006d	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00073	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0007b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00080	85 c0		 test	 eax, eax
  00082	75 06		 jne	 SHORT $LN13@PyGen_New
  00084	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  00088	74 04		 je	 SHORT $LN14@PyGen_New
$LN13@PyGen_New:
  0008a	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN14@PyGen_New:

; 563  :     gen->gi_code = (PyObject *)(f->f_code);

  0008e	48 8b 46 78	 mov	 rax, QWORD PTR [rsi+120]

; 564  :     gen->gi_running = 0;
; 565  :     gen->gi_weakreflist = NULL;
; 566  :     _PyObject_GC_TRACK(gen);

  00092	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@
  00099	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09NOKDDDDN@PyGen_New?$AA@
  000a0	33 ff		 xor	 edi, edi
  000a2	4c 8b cb	 mov	 r9, rbx
  000a5	41 b8 36 02 00
	00		 mov	 r8d, 566		; 00000236H
  000ab	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax
  000af	c6 43 68 00	 mov	 BYTE PTR [rbx+104], 0
  000b3	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000bb	48 89 7b 78	 mov	 QWORD PTR [rbx+120], rdi
  000bf	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c4	85 c0		 test	 eax, eax
  000c6	75 6e		 jne	 SHORT $LN2@PyGen_New
  000c8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@
  000cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09NOKDDDDN@PyGen_New?$AA@
  000d6	4c 8b cb	 mov	 r9, rbx
  000d9	41 b8 36 02 00
	00		 mov	 r8d, 566		; 00000236H
  000df	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000e7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ec	85 c0		 test	 eax, eax
  000ee	75 04		 jne	 SHORT $LN12@PyGen_New
  000f0	48 8d 7b e8	 lea	 rdi, QWORD PTR [rbx-24]
$LN12@PyGen_New:
  000f4	48 83 7f 10 fe	 cmp	 QWORD PTR [rdi+16], -2
  000f9	74 0c		 je	 SHORT $LN1@PyGen_New
  000fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  00102	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyGen_New:
  00107	48 c7 47 10 fd
	ff ff ff	 mov	 QWORD PTR [rdi+16], -3
  0010f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00116	48 89 07	 mov	 QWORD PTR [rdi], rax
  00119	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00120	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00124	48 89 4f 08	 mov	 QWORD PTR [rdi+8], rcx
  00128	48 89 39	 mov	 QWORD PTR [rcx], rdi
  0012b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00132	48 89 78 08	 mov	 QWORD PTR [rax+8], rdi
$LN2@PyGen_New:

; 567  :     return (PyObject *)gen;

  00136	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  0013b	48 8b c3	 mov	 rax, rbx

; 568  : }

  0013e	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00143	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00147	5e		 pop	 rsi
  00148	c3		 ret	 0
PyGen_New ENDP
_TEXT	ENDS
PUBLIC	PyGen_NeedsFinalizing
; Function compile flags: /Ogtpy
;	COMDAT PyGen_NeedsFinalizing
_TEXT	SEGMENT
gen$ = 8
PyGen_NeedsFinalizing PROC				; COMDAT

; 573  :     int i;
; 574  :     PyFrameObject *f = gen->gi_frame;

  00000	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]

; 575  : 
; 576  :     if (f == NULL || f->f_stacktop == NULL)

  00004	48 85 c0	 test	 rax, rax
  00007	74 2b		 je	 SHORT $LN5@PyGen_Need
  00009	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00011	74 21		 je	 SHORT $LN5@PyGen_Need

; 578  : 
; 579  :     /* Any block type besides a loop requires cleanup. */
; 580  :     for (i = 0; i < f->f_iblock; i++)

  00013	8b 90 d8 00 00
	00		 mov	 edx, DWORD PTR [rax+216]
  00019	33 c9		 xor	 ecx, ecx
  0001b	85 d2		 test	 edx, edx
  0001d	7e 15		 jle	 SHORT $LN5@PyGen_Need
  0001f	48 05 dc 00 00
	00		 add	 rax, 220		; 000000dcH
$LL4@PyGen_Need:

; 581  :         if (f->f_blockstack[i].b_type != SETUP_LOOP)

  00025	83 38 78	 cmp	 DWORD PTR [rax], 120	; 00000078H
  00028	75 0d		 jne	 SHORT $LN10@PyGen_Need

; 578  : 
; 579  :     /* Any block type besides a loop requires cleanup. */
; 580  :     for (i = 0; i < f->f_iblock; i++)

  0002a	ff c1		 inc	 ecx
  0002c	48 83 c0 0c	 add	 rax, 12
  00030	3b ca		 cmp	 ecx, edx
  00032	7c f1		 jl	 SHORT $LL4@PyGen_Need
$LN5@PyGen_Need:

; 577  :         return 0; /* no frame or empty blockstack == no finalization */

  00034	33 c0		 xor	 eax, eax

; 583  : 
; 584  :     /* No blocks except loops, it's safe to skip finalization. */
; 585  :     return 0;
; 586  : }

  00036	c3		 ret	 0
$LN10@PyGen_Need:

; 582  :             return 1;

  00037	b8 01 00 00 00	 mov	 eax, 1

; 583  : 
; 584  :     /* No blocks except loops, it's safe to skip finalization. */
; 585  :     return 0;
; 586  : }

  0003c	c3		 ret	 0
PyGen_NeedsFinalizing ENDP
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
EXTRN	PyObject_CallFunction:PROC
EXTRN	PyExc_AttributeError:QWORD
EXTRN	_PyObject_GetAttrId:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$gen_close_iter DD imagerel gen_close_iter
	DD	imagerel gen_close_iter+322
	DD	imagerel $unwind$gen_close_iter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_close_iter DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\genobject.c
CONST	ENDS
;	COMDAT gen_close_iter
_TEXT	SEGMENT
yf$ = 64
gen_close_iter PROC					; COMDAT

; 153  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 154  :     PyObject *retval = NULL;
; 155  :     _Py_IDENTIFIER(close);
; 156  : 
; 157  :     if (PyGen_CheckExact(yf)) {

  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyGen_Type
  00011	48 8b d9	 mov	 rbx, rcx
  00014	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00018	75 21		 jne	 SHORT $LN11@gen_close_

; 158  :         retval = gen_close((PyGenObject *)yf, NULL);

  0001a	33 d2		 xor	 edx, edx
  0001c	e8 00 00 00 00	 call	 gen_close
  00021	48 8b d8	 mov	 rbx, rax

; 159  :         if (retval == NULL)

  00024	48 85 c0	 test	 rax, rax
  00027	0f 85 8d 00 00
	00		 jne	 $LN25@gen_close_

; 160  :             return -1;

  0002d	83 c8 ff	 or	 eax, -1

; 176  : }

  00030	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00035	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00039	5f		 pop	 rdi
  0003a	c3		 ret	 0
$LN11@gen_close_:

; 161  :     } else {
; 162  :         PyObject *meth = _PyObject_GetAttrId(yf, &PyId_close);

  0003b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00041	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0004a	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_close@?1??gen_close_iter@@9@9
  0004f	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  00053	48 8b cb	 mov	 rcx, rbx
  00056	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0005b	48 8b f8	 mov	 rdi, rax

; 163  :         if (meth == NULL) {

  0005e	48 85 c0	 test	 rax, rax
  00061	75 2a		 jne	 SHORT $LN8@gen_close_

; 164  :             if (!PyErr_ExceptionMatches(PyExc_AttributeError))

  00063	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  0006a	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  0006f	85 c0		 test	 eax, eax
  00071	75 08		 jne	 SHORT $LN7@gen_close_

; 165  :                 PyErr_WriteUnraisable(yf);

  00073	48 8b cb	 mov	 rcx, rbx
  00076	e8 00 00 00 00	 call	 PyErr_WriteUnraisable
$LN7@gen_close_:

; 166  :             PyErr_Clear();

  0007b	e8 00 00 00 00	 call	 PyErr_Clear

; 175  :     return 0;

  00080	33 c0		 xor	 eax, eax

; 176  : }

  00082	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00087	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008b	5f		 pop	 rdi
  0008c	c3		 ret	 0
$LN8@gen_close_:

; 167  :         } else {
; 168  :             retval = PyObject_CallFunction(meth, "");

  0008d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00094	48 8b c8	 mov	 rcx, rax
  00097	e8 00 00 00 00	 call	 PyObject_CallFunction

; 169  :             Py_DECREF(meth);

  0009c	48 8b cf	 mov	 rcx, rdi
  0009f	48 8b d8	 mov	 rbx, rax
  000a2	e8 00 00 00 00	 call	 _Py_DecRef

; 170  :             if (retval == NULL)

  000a7	48 85 db	 test	 rbx, rbx
  000aa	75 0e		 jne	 SHORT $LN25@gen_close_

; 171  :                 return -1;

  000ac	83 c8 ff	 or	 eax, -1

; 176  : }

  000af	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000b4	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b8	5f		 pop	 rdi
  000b9	c3		 ret	 0
$LN25@gen_close_:

; 172  :         }
; 173  :     }
; 174  :     Py_XDECREF(retval);

  000ba	e8 00 00 00 00	 call	 _Py_PXCTX
  000bf	85 c0		 test	 eax, eax
  000c1	75 72		 jne	 SHORT $LN3@gen_close_
  000c3	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000c7	a8 20		 test	 al, 32			; 00000020H
  000c9	75 62		 jne	 SHORT $LN18@gen_close_
  000cb	84 c0		 test	 al, al
  000cd	78 5e		 js	 SHORT $LN18@gen_close_
  000cf	a8 02		 test	 al, 2
  000d1	75 62		 jne	 SHORT $LN3@gen_close_
  000d3	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000d7	75 5c		 jne	 SHORT $LN3@gen_close_
  000d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000e7	4c 8b cb	 mov	 r9, rbx
  000ea	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000f0	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000f8	e8 00 00 00 00	 call	 _PyParallel_Guard
  000fd	48 8b cb	 mov	 rcx, rbx
  00100	85 c0		 test	 eax, eax
  00102	74 12		 je	 SHORT $LN23@gen_close_
  00104	e8 00 00 00 00	 call	 _Px_Dealloc

; 175  :     return 0;

  00109	33 c0		 xor	 eax, eax

; 176  : }

  0010b	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00110	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00114	5f		 pop	 rdi
  00115	c3		 ret	 0

; 172  :         }
; 173  :     }
; 174  :     Py_XDECREF(retval);

$LN23@gen_close_:
  00116	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0011a	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 175  :     return 0;

  00120	33 c0		 xor	 eax, eax

; 176  : }

  00122	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00127	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0012b	5f		 pop	 rdi
  0012c	c3		 ret	 0

; 172  :         }
; 173  :     }
; 174  :     Py_XDECREF(retval);

$LN18@gen_close_:
  0012d	48 8b cb	 mov	 rcx, rbx
  00130	e8 00 00 00 00	 call	 Px_DecRef
$LN3@gen_close_:

; 175  :     return 0;

  00135	33 c0		 xor	 eax, eax

; 176  : }

  00137	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0013c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00140	5f		 pop	 rdi
  00141	c3		 ret	 0
gen_close_iter ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EM@DNMJHJBL@exceptions?5must?5be?5classes?5or?5in@ ; `string'
PUBLIC	??_C@_0DB@DAOEGLML@instance?5exception?5may?5not?5have?5@ ; `string'
PUBLIC	??_C@_0DC@KPGEFMOD@throw?$CI?$CJ?5third?5argument?5must?5be?5a@ ; `string'
EXTRN	PyErr_Format:PROC
EXTRN	PyException_GetTraceback:PROC
EXTRN	PyTraceBack_Type:BYTE
EXTRN	PyObject_CallObject:PROC
EXTRN	PyErr_NormalizeException:PROC
EXTRN	PyErr_GivenExceptionMatches:PROC
EXTRN	PyArg_UnpackTuple:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$gen_throw DD imagerel gen_throw
	DD	imagerel gen_throw+1090
	DD	imagerel $unwind$gen_throw
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_throw DD 060f01H
	DD	0e340fH
	DD	07008920fH
	DD	050066007H
xdata	ENDS
;	COMDAT ??_C@_0EM@DNMJHJBL@exceptions?5must?5be?5classes?5or?5in@
CONST	SEGMENT
??_C@_0EM@DNMJHJBL@exceptions?5must?5be?5classes?5or?5in@ DB 'exceptions '
	DB	'must be classes or instances deriving from BaseException, not'
	DB	' %s', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@DAOEGLML@instance?5exception?5may?5not?5have?5@
CONST	SEGMENT
??_C@_0DB@DAOEGLML@instance?5exception?5may?5not?5have?5@ DB 'instance ex'
	DB	'ception may not have a separate value', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@KPGEFMOD@throw?$CI?$CJ?5third?5argument?5must?5be?5a@
CONST	SEGMENT
??_C@_0DC@KPGEFMOD@throw?$CI?$CJ?5third?5argument?5must?5be?5a@ DB 'throw'
	DB	'() third argument must be a traceback object', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\genobject.c
CONST	ENDS
;	COMDAT gen_throw
_TEXT	SEGMENT
typ$ = 64
meth$1$ = 72
ret$1$ = 72
val$20706 = 72
gen$ = 112
args$ = 120
val$ = 128
tb$ = 136
gen_throw PROC						; COMDAT

; 297  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	48 8b ec	 mov	 rbp, rsp
  0000b	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 298  :     PyObject *typ;
; 299  :     PyObject *tb = NULL;

  0000f	33 c0		 xor	 eax, eax
  00011	48 8b da	 mov	 rbx, rdx
  00014	48 8b f1	 mov	 rsi, rcx
  00017	48 89 45 38	 mov	 QWORD PTR tb$[rbp-80], rax

; 300  :     PyObject *val = NULL;

  0001b	48 89 45 30	 mov	 QWORD PTR val$[rbp-80], rax

; 301  :     PyObject *yf = gen_yf(gen);

  0001f	e8 00 00 00 00	 call	 gen_yf
  00024	48 8b f8	 mov	 rdi, rax

; 302  :     _Py_IDENTIFIER(throw);
; 303  : 
; 304  :     if (!PyArg_UnpackTuple(args, "throw", 1, 3, &typ, &val, &tb))

  00027	48 8d 45 38	 lea	 rax, QWORD PTR tb$[rbp-80]
  0002b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00031	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00036	48 8d 45 30	 lea	 rax, QWORD PTR val$[rbp-80]
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05JFAPCGDM@throw?$AA@
  00041	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00046	48 8d 45 f0	 lea	 rax, QWORD PTR typ$[rbp-80]
  0004a	45 8d 41 fe	 lea	 r8d, QWORD PTR [r9-2]
  0004e	48 8b cb	 mov	 rcx, rbx
  00051	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00056	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0005b	85 c0		 test	 eax, eax

; 305  :         return NULL;

  0005d	0f 84 d0 03 00
	00		 je	 $LN3@gen_throw

; 306  : 
; 307  :     if (yf) {

  00063	48 85 ff	 test	 rdi, rdi
  00066	0f 84 d2 00 00
	00		 je	 $throw_here$20691

; 308  :         PyObject *ret;
; 309  :         int err;
; 310  :         if (PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit)) {

  0006c	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_GeneratorExit
  00073	48 8b 4d f0	 mov	 rcx, QWORD PTR typ$[rbp-80]
  00077	e8 00 00 00 00	 call	 PyErr_GivenExceptionMatches
  0007c	85 c0		 test	 eax, eax
  0007e	74 44		 je	 SHORT $LN39@gen_throw

; 311  :             gen->gi_running = 1;
; 312  :             err = gen_close_iter(yf);

  00080	48 8b cf	 mov	 rcx, rdi
  00083	c6 46 68 01	 mov	 BYTE PTR [rsi+104], 1
  00087	e8 00 00 00 00	 call	 gen_close_iter

; 313  :             gen->gi_running = 0;
; 314  :             Py_DECREF(yf);

  0008c	48 8b cf	 mov	 rcx, rdi
  0008f	c6 46 68 00	 mov	 BYTE PTR [rsi+104], 0
  00093	8b d8		 mov	 ebx, eax
  00095	e8 00 00 00 00	 call	 _Py_DecRef

; 315  :             if (err < 0)

  0009a	85 db		 test	 ebx, ebx
  0009c	0f 89 9c 00 00
	00		 jns	 $throw_here$20691

; 316  :                 return gen_send_ex(gen, Py_None, 1);

  000a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_NoneStruct
  000a9	41 b8 01 00 00
	00		 mov	 r8d, 1
  000af	48 8b ce	 mov	 rcx, rsi
  000b2	e8 00 00 00 00	 call	 gen_send_ex

; 414  : }

  000b7	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  000bc	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000c0	5f		 pop	 rdi
  000c1	5e		 pop	 rsi
  000c2	5d		 pop	 rbp
  000c3	c3		 ret	 0
$LN39@gen_throw:

; 317  :             goto throw_here;
; 318  :         }
; 319  :         if (PyGen_CheckExact(yf)) {

  000c4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyGen_Type
  000cb	48 39 47 58	 cmp	 QWORD PTR [rdi+88], rax
  000cf	75 1b		 jne	 SHORT $LN37@gen_throw

; 320  :             gen->gi_running = 1;
; 321  :             ret = gen_throw((PyGenObject *)yf, args);

  000d1	48 8b d3	 mov	 rdx, rbx
  000d4	48 8b cf	 mov	 rcx, rdi
  000d7	c6 46 68 01	 mov	 BYTE PTR [rsi+104], 1
  000db	e8 00 00 00 00	 call	 gen_throw

; 322  :             gen->gi_running = 0;

  000e0	c6 46 68 00	 mov	 BYTE PTR [rsi+104], 0
  000e4	48 8b d8	 mov	 rbx, rax

; 323  :         } else {

  000e7	e9 a4 01 00 00	 jmp	 $LN36@gen_throw
$LN37@gen_throw:

; 324  :             PyObject *meth = _PyObject_GetAttrId(yf, &PyId_throw);

  000ec	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000f2	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  000fb	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_throw@?1??gen_throw@@9@9
  00100	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  00104	48 8b cf	 mov	 rcx, rdi
  00107	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0010c	48 89 45 f8	 mov	 QWORD PTR meth$1$[rbp-80], rax

; 325  :             if (meth == NULL) {

  00110	48 85 c0	 test	 rax, rax
  00113	0f 85 58 01 00
	00		 jne	 $LN35@gen_throw

; 326  :                 if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {

  00119	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  00120	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00125	85 c0		 test	 eax, eax
  00127	75 08		 jne	 SHORT $LN34@gen_throw

; 327  :                     Py_DECREF(yf);

  00129	48 8b cf	 mov	 rcx, rdi

; 328  :                     return NULL;

  0012c	e9 fd 02 00 00	 jmp	 $LN59@gen_throw
$LN34@gen_throw:

; 329  :                 }
; 330  :                 PyErr_Clear();

  00131	e8 00 00 00 00	 call	 PyErr_Clear

; 331  :                 Py_DECREF(yf);

  00136	48 8b cf	 mov	 rcx, rdi
  00139	e8 00 00 00 00	 call	 _Py_DecRef
$throw_here$20691:

; 356  :     }
; 357  : 
; 358  : throw_here:
; 359  :     /* First, check the traceback argument, replacing None with
; 360  :        NULL. */
; 361  :     if (tb == Py_None) {

  0013e	48 8b 4d 38	 mov	 rcx, QWORD PTR tb$[rbp-80]
  00142	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00149	48 3b c8	 cmp	 rcx, rax
  0014c	0f 85 d8 01 00
	00		 jne	 $LN30@gen_throw

; 362  :         tb = NULL;

  00152	48 c7 45 38 00
	00 00 00	 mov	 QWORD PTR tb$[rbp-80], 0
$LN28@gen_throw:

; 367  :         return NULL;
; 368  :     }
; 369  : 
; 370  :     Py_INCREF(typ);

  0015a	48 8b 5d f0	 mov	 rbx, QWORD PTR typ$[rbp-80]
  0015e	e8 00 00 00 00	 call	 _Py_PXCTX
  00163	85 c0		 test	 eax, eax
  00165	75 32		 jne	 SHORT $LN27@gen_throw
  00167	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0016e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00175	4c 8b cb	 mov	 r9, rbx
  00178	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0017e	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00186	e8 00 00 00 00	 call	 _PyParallel_Guard
  0018b	85 c0		 test	 eax, eax
  0018d	75 06		 jne	 SHORT $LN44@gen_throw
  0018f	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00193	74 04		 je	 SHORT $LN27@gen_throw
$LN44@gen_throw:
  00195	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN27@gen_throw:

; 371  :     Py_XINCREF(val);

  00199	48 8b 5d 30	 mov	 rbx, QWORD PTR val$[rbp-80]
  0019d	48 85 db	 test	 rbx, rbx
  001a0	74 3f		 je	 SHORT $LN26@gen_throw
  001a2	e8 00 00 00 00	 call	 _Py_PXCTX
  001a7	85 c0		 test	 eax, eax
  001a9	75 32		 jne	 SHORT $LN56@gen_throw
  001ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  001b9	4c 8b cb	 mov	 r9, rbx
  001bc	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  001c2	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  001ca	e8 00 00 00 00	 call	 _PyParallel_Guard
  001cf	85 c0		 test	 eax, eax
  001d1	75 06		 jne	 SHORT $LN48@gen_throw
  001d3	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  001d7	74 04		 je	 SHORT $LN56@gen_throw
$LN48@gen_throw:
  001d9	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN56@gen_throw:
  001dd	48 8b 5d 30	 mov	 rbx, QWORD PTR val$[rbp-80]
$LN26@gen_throw:

; 372  :     Py_XINCREF(tb);

  001e1	48 8b 7d 38	 mov	 rdi, QWORD PTR tb$[rbp-80]
  001e5	48 85 ff	 test	 rdi, rdi
  001e8	74 3f		 je	 SHORT $LN22@gen_throw
  001ea	e8 00 00 00 00	 call	 _Py_PXCTX
  001ef	85 c0		 test	 eax, eax
  001f1	75 32		 jne	 SHORT $LN57@gen_throw
  001f3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00201	4c 8b cf	 mov	 r9, rdi
  00204	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0020a	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00212	e8 00 00 00 00	 call	 _PyParallel_Guard
  00217	85 c0		 test	 eax, eax
  00219	75 06		 jne	 SHORT $LN52@gen_throw
  0021b	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  0021f	74 04		 je	 SHORT $LN57@gen_throw
$LN52@gen_throw:
  00221	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN57@gen_throw:
  00225	48 8b 5d 30	 mov	 rbx, QWORD PTR val$[rbp-80]
$LN22@gen_throw:

; 373  : 
; 374  :     if (PyExceptionClass_Check(typ))

  00229	48 8b 4d f0	 mov	 rcx, QWORD PTR typ$[rbp-80]
  0022d	4c 8b 41 58	 mov	 r8, QWORD PTR [rcx+88]
  00231	41 8b 80 00 01
	00 00		 mov	 eax, DWORD PTR [r8+256]
  00238	85 c0		 test	 eax, eax
  0023a	0f 89 26 01 00
	00		 jns	 $LN19@gen_throw
  00240	f7 81 00 01 00
	00 00 00 00 40	 test	 DWORD PTR [rcx+256], 1073741824 ; 40000000H
  0024a	0f 84 16 01 00
	00		 je	 $LN19@gen_throw

; 375  :         PyErr_NormalizeException(&typ, &val, &tb);

  00250	4c 8d 45 38	 lea	 r8, QWORD PTR tb$[rbp-80]
  00254	48 8d 55 30	 lea	 rdx, QWORD PTR val$[rbp-80]
  00258	48 8d 4d f0	 lea	 rcx, QWORD PTR typ$[rbp-80]
  0025c	e8 00 00 00 00	 call	 PyErr_NormalizeException
  00261	48 8b 45 38	 mov	 rax, QWORD PTR tb$[rbp-80]
  00265	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  0026c	e9 58 01 00 00	 jmp	 $LN10@gen_throw
$LN35@gen_throw:

; 332  :                 goto throw_here;
; 333  :             }
; 334  :             gen->gi_running = 1;
; 335  :             ret = PyObject_CallObject(meth, args);

  00271	48 8b d3	 mov	 rdx, rbx
  00274	48 8b c8	 mov	 rcx, rax
  00277	c6 46 68 01	 mov	 BYTE PTR [rsi+104], 1
  0027b	e8 00 00 00 00	 call	 PyObject_CallObject

; 336  :             gen->gi_running = 0;
; 337  :             Py_DECREF(meth);

  00280	48 8b 4d f8	 mov	 rcx, QWORD PTR meth$1$[rbp-80]
  00284	c6 46 68 00	 mov	 BYTE PTR [rsi+104], 0
  00288	48 8b d8	 mov	 rbx, rax
  0028b	e8 00 00 00 00	 call	 _Py_DecRef
$LN36@gen_throw:

; 338  :         }
; 339  :         Py_DECREF(yf);

  00290	48 8b cf	 mov	 rcx, rdi
  00293	e8 00 00 00 00	 call	 _Py_DecRef

; 340  :         if (!ret) {

  00298	48 85 db	 test	 rbx, rbx
  0029b	75 7d		 jne	 SHORT $LN31@gen_throw

; 341  :             PyObject *val;
; 342  :             /* Pop subiterator from stack */
; 343  :             ret = *(--gen->gi_frame->f_stacktop);

  0029d	48 8b 46 60	 mov	 rax, QWORD PTR [rsi+96]
  002a1	48 8b 88 a0 00
	00 00		 mov	 rcx, QWORD PTR [rax+160]
  002a8	48 83 e9 08	 sub	 rcx, 8
  002ac	48 89 88 a0 00
	00 00		 mov	 QWORD PTR [rax+160], rcx

; 344  :             assert(ret == yf);
; 345  :             Py_DECREF(ret);

  002b3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  002b6	e8 00 00 00 00	 call	 _Py_DecRef

; 346  :             /* Termination repetition of YIELD_FROM */
; 347  :             gen->gi_frame->f_lasti++;

  002bb	4c 8b 5e 60	 mov	 r11, QWORD PTR [rsi+96]

; 348  :             if (_PyGen_FetchStopIterationValue(&val) == 0) {

  002bf	48 8d 4d f8	 lea	 rcx, QWORD PTR val$20706[rbp-80]
  002c3	41 ff 83 d0 00
	00 00		 inc	 DWORD PTR [r11+208]
  002ca	e8 00 00 00 00	 call	 _PyGen_FetchStopIterationValue

; 349  :                 ret = gen_send_ex(gen, val, 0);

  002cf	48 8b ce	 mov	 rcx, rsi
  002d2	85 c0		 test	 eax, eax
  002d4	75 2f		 jne	 SHORT $LN32@gen_throw
  002d6	48 8b 5d f8	 mov	 rbx, QWORD PTR val$20706[rbp-80]
  002da	45 33 c0	 xor	 r8d, r8d
  002dd	48 8b d3	 mov	 rdx, rbx
  002e0	e8 00 00 00 00	 call	 gen_send_ex

; 350  :                 Py_DECREF(val);

  002e5	48 8b cb	 mov	 rcx, rbx
  002e8	48 89 45 f8	 mov	 QWORD PTR ret$1$[rbp-80], rax
  002ec	e8 00 00 00 00	 call	 _Py_DecRef

; 351  :             } else {

  002f1	48 8b 5d f8	 mov	 rbx, QWORD PTR ret$1$[rbp-80]

; 353  :             }
; 354  :         }
; 355  :         return ret;

  002f5	48 8b c3	 mov	 rax, rbx

; 414  : }

  002f8	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  002fd	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00301	5f		 pop	 rdi
  00302	5e		 pop	 rsi
  00303	5d		 pop	 rbp
  00304	c3		 ret	 0
$LN32@gen_throw:

; 352  :                 ret = gen_send_ex(gen, Py_None, 1);

  00305	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_NoneStruct
  0030c	41 b8 01 00 00
	00		 mov	 r8d, 1
  00312	e8 00 00 00 00	 call	 gen_send_ex
  00317	48 8b d8	 mov	 rbx, rax
$LN31@gen_throw:

; 353  :             }
; 354  :         }
; 355  :         return ret;

  0031a	48 8b c3	 mov	 rax, rbx

; 414  : }

  0031d	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  00322	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00326	5f		 pop	 rdi
  00327	5e		 pop	 rsi
  00328	5d		 pop	 rbp
  00329	c3		 ret	 0
$LN30@gen_throw:

; 363  :     }
; 364  :     else if (tb != NULL && !PyTraceBack_Check(tb)) {

  0032a	48 85 c9	 test	 rcx, rcx
  0032d	0f 84 27 fe ff
	ff		 je	 $LN28@gen_throw
  00333	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTraceBack_Type
  0033a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0033e	0f 84 16 fe ff
	ff		 je	 $LN28@gen_throw

; 365  :         PyErr_SetString(PyExc_TypeError,
; 366  :             "throw() third argument must be a traceback object");

  00344	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0034b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@KPGEFMOD@throw?$CI?$CJ?5third?5argument?5must?5be?5a@
  00352	e8 00 00 00 00	 call	 PyErr_SetString

; 413  :     return NULL;

  00357	33 c0		 xor	 eax, eax

; 414  : }

  00359	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  0035e	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00362	5f		 pop	 rdi
  00363	5e		 pop	 rsi
  00364	5d		 pop	 rbp
  00365	c3		 ret	 0
$LN19@gen_throw:

; 376  : 
; 377  :     else if (PyExceptionInstance_Check(typ)) {

  00366	0f ba e0 1e	 bt	 eax, 30
  0036a	0f 83 87 00 00
	00		 jae	 $LN17@gen_throw

; 378  :         /* Raising an instance.  The value should be a dummy. */
; 379  :         if (val && val != Py_None) {

  00370	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  00377	48 85 db	 test	 rbx, rbx
  0037a	74 26		 je	 SHORT $LN13@gen_throw
  0037c	48 3b df	 cmp	 rbx, rdi
  0037f	74 15		 je	 SHORT $LN14@gen_throw

; 380  :             PyErr_SetString(PyExc_TypeError,
; 381  :               "instance exception may not have a separate value");

  00381	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00388	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@DAOEGLML@instance?5exception?5may?5not?5have?5@
  0038f	e8 00 00 00 00	 call	 PyErr_SetString

; 382  :             goto failed_throw;

  00394	eb 78		 jmp	 SHORT $failed_throw$20738
$LN14@gen_throw:

; 383  :         }
; 384  :         else {
; 385  :             /* Normalize to raise <class>, <instance> */
; 386  :             Py_XDECREF(val);

  00396	48 8b cb	 mov	 rcx, rbx
  00399	e8 00 00 00 00	 call	 _Py_DecRef
  0039e	48 8b 4d f0	 mov	 rcx, QWORD PTR typ$[rbp-80]
$LN13@gen_throw:

; 387  :             val = typ;

  003a2	48 89 4d 30	 mov	 QWORD PTR val$[rbp-80], rcx

; 388  :             typ = PyExceptionInstance_Class(typ);

  003a6	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  003aa	48 89 4d f0	 mov	 QWORD PTR typ$[rbp-80], rcx

; 389  :             Py_INCREF(typ);

  003ae	e8 00 00 00 00	 call	 _Py_IncRef

; 390  : 
; 391  :             if (tb == NULL)

  003b3	48 8b 45 38	 mov	 rax, QWORD PTR tb$[rbp-80]
  003b7	48 85 c0	 test	 rax, rax
  003ba	75 0d		 jne	 SHORT $LN10@gen_throw

; 392  :                 /* Returns NULL if there's no traceback */
; 393  :                 tb = PyException_GetTraceback(val);

  003bc	48 8b 4d 30	 mov	 rcx, QWORD PTR val$[rbp-80]
  003c0	e8 00 00 00 00	 call	 PyException_GetTraceback
  003c5	48 89 45 38	 mov	 QWORD PTR tb$[rbp-80], rax
$LN10@gen_throw:

; 402  :             goto failed_throw;
; 403  :     }
; 404  : 
; 405  :     PyErr_Restore(typ, val, tb);

  003c9	48 8b 55 30	 mov	 rdx, QWORD PTR val$[rbp-80]
  003cd	48 8b 4d f0	 mov	 rcx, QWORD PTR typ$[rbp-80]
  003d1	4c 8b c0	 mov	 r8, rax
  003d4	e8 00 00 00 00	 call	 PyErr_Restore

; 406  :     return gen_send_ex(gen, Py_None, 1);

  003d9	41 b8 01 00 00
	00		 mov	 r8d, 1
  003df	48 8b d7	 mov	 rdx, rdi
  003e2	48 8b ce	 mov	 rcx, rsi
  003e5	e8 00 00 00 00	 call	 gen_send_ex

; 414  : }

  003ea	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  003ef	48 83 c4 50	 add	 rsp, 80			; 00000050H
  003f3	5f		 pop	 rdi
  003f4	5e		 pop	 rsi
  003f5	5d		 pop	 rbp
  003f6	c3		 ret	 0
$LN17@gen_throw:

; 394  :         }
; 395  :     }
; 396  :     else {
; 397  :         /* Not something you can raise.  throw() fails. */
; 398  :         PyErr_Format(PyExc_TypeError,
; 399  :                      "exceptions must be classes or instances "
; 400  :                      "deriving from BaseException, not %s",
; 401  :                      Py_TYPE(typ)->tp_name);

  003f7	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  003fb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00402	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EM@DNMJHJBL@exceptions?5must?5be?5classes?5or?5in@
  00409	e8 00 00 00 00	 call	 PyErr_Format
$failed_throw$20738:

; 407  : 
; 408  : failed_throw:
; 409  :     /* Didn't use our arguments, so restore their original refcounts */
; 410  :     Py_DECREF(typ);

  0040e	48 8b 4d f0	 mov	 rcx, QWORD PTR typ$[rbp-80]
  00412	e8 00 00 00 00	 call	 _Py_DecRef

; 411  :     Py_XDECREF(val);

  00417	48 8b 4d 30	 mov	 rcx, QWORD PTR val$[rbp-80]
  0041b	48 85 c9	 test	 rcx, rcx
  0041e	74 05		 je	 SHORT $LN7@gen_throw
  00420	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@gen_throw:

; 412  :     Py_XDECREF(tb);

  00425	48 8b 4d 38	 mov	 rcx, QWORD PTR tb$[rbp-80]
  00429	48 85 c9	 test	 rcx, rcx
  0042c	74 05		 je	 SHORT $LN3@gen_throw
$LN59@gen_throw:
  0042e	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@gen_throw:

; 413  :     return NULL;

  00433	33 c0		 xor	 eax, eax

; 414  : }

  00435	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  0043a	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0043e	5f		 pop	 rdi
  0043f	5e		 pop	 rsi
  00440	5d		 pop	 rbp
  00441	c3		 ret	 0
gen_throw ENDP
_TEXT	ENDS
END
