; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BC@DFFFNEPO@weakcallableproxy?$AA@	; `string'
PUBLIC	??_C@_09MEIONHNF@weakproxy?$AA@			; `string'
PUBLIC	??_C@_09PAJHGGFL@__bytes__?$AA@			; `string'
PUBLIC	??_C@_07HEABOMAD@weakref?$AA@			; `string'
PUBLIC	??_C@_08BHKDPDAA@__name__?$AA@			; `string'
PUBLIC	_PyWeakref_RefType
PUBLIC	_PyWeakref_ProxyType
PUBLIC	_PyWeakref_CallableProxyType
EXTRN	PyObject_GC_Del:PROC
EXTRN	PyType_GenericAlloc:PROC
EXTRN	PyType_Type:BYTE
_BSS	SEGMENT
?kwlist@?1??weakref_call@@9@9 DQ 01H DUP (?)		; `weakref_call'::`2'::kwlist
_BSS	ENDS
;	COMDAT ??_C@_0BC@DFFFNEPO@weakcallableproxy?$AA@
CONST	SEGMENT
??_C@_0BC@DFFFNEPO@weakcallableproxy?$AA@ DB 'weakcallableproxy', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09MEIONHNF@weakproxy?$AA@
CONST	SEGMENT
??_C@_09MEIONHNF@weakproxy?$AA@ DB 'weakproxy', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PAJHGGFL@__bytes__?$AA@
CONST	SEGMENT
??_C@_09PAJHGGFL@__bytes__?$AA@ DB '__bytes__', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
_PyWeakref_RefType DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_07HEABOMAD@weakref?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:weakref_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:weakref_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:weakref_hash
	DQ	FLAT:weakref_call
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:gc_traverse
	DQ	FLAT:gc_clear
	DQ	FLAT:weakref_richcompare
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:weakref___init__
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:weakref___new__
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
proxy_methods DQ FLAT:??_C@_09PAJHGGFL@__bytes__?$AA@
	DQ	FLAT:proxy_bytes
	DD	04H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
proxy_as_number DQ FLAT:proxy_add
	DQ	FLAT:proxy_sub
	DQ	FLAT:proxy_mul
	DQ	FLAT:proxy_mod
	DQ	FLAT:proxy_divmod
	DQ	FLAT:proxy_pow
	DQ	FLAT:proxy_neg
	DQ	FLAT:proxy_pos
	DQ	FLAT:proxy_abs
	DQ	FLAT:proxy_bool
	DQ	FLAT:proxy_invert
	DQ	FLAT:proxy_lshift
	DQ	FLAT:proxy_rshift
	DQ	FLAT:proxy_and
	DQ	FLAT:proxy_xor
	DQ	FLAT:proxy_or
	DQ	FLAT:proxy_int
	DQ	0000000000000000H
	DQ	FLAT:proxy_float
	DQ	FLAT:proxy_iadd
	DQ	FLAT:proxy_isub
	DQ	FLAT:proxy_imul
	DQ	FLAT:proxy_imod
	DQ	FLAT:proxy_ipow
	DQ	FLAT:proxy_ilshift
	DQ	FLAT:proxy_irshift
	DQ	FLAT:proxy_iand
	DQ	FLAT:proxy_ixor
	DQ	FLAT:proxy_ior
	DQ	FLAT:proxy_floor_div
	DQ	FLAT:proxy_true_div
	DQ	FLAT:proxy_ifloor_div
	DQ	FLAT:proxy_itrue_div
	DQ	FLAT:proxy_index
proxy_as_sequence DQ FLAT:proxy_length
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:proxy_contains
	ORG $+16
proxy_as_mapping DQ FLAT:proxy_length
	DQ	FLAT:proxy_getitem
	DQ	FLAT:proxy_setitem
	ORG $+8
_PyWeakref_ProxyType DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_09MEIONHNF@weakproxy?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:proxy_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:proxy_repr
	DQ	FLAT:proxy_as_number
	DQ	FLAT:proxy_as_sequence
	DQ	FLAT:proxy_as_mapping
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:proxy_str
	DQ	FLAT:proxy_getattr
	DQ	FLAT:proxy_setattr
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:gc_traverse
	DQ	FLAT:gc_clear
	DQ	FLAT:proxy_richcompare
	DQ	0000000000000000H
	DQ	FLAT:proxy_iter
	DQ	FLAT:proxy_iternext
	DQ	FLAT:proxy_methods
	ORG $+152
_PyWeakref_CallableProxyType DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BC@DFFFNEPO@weakcallableproxy?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:proxy_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:proxy_repr
	DQ	FLAT:proxy_as_number
	DQ	FLAT:proxy_as_sequence
	DQ	FLAT:proxy_as_mapping
	DQ	0000000000000000H
	DQ	FLAT:proxy_call
	DQ	FLAT:proxy_str
	DQ	FLAT:proxy_getattr
	DQ	FLAT:proxy_setattr
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:gc_traverse
	DQ	FLAT:gc_clear
	DQ	FLAT:proxy_richcompare
	DQ	0000000000000000H
	DQ	FLAT:proxy_iter
	DQ	FLAT:proxy_iternext
	ORG $+160
_DATA	ENDS
;	COMDAT ??_C@_07HEABOMAD@weakref?$AA@
CONST	SEGMENT
??_C@_07HEABOMAD@weakref?$AA@ DB 'weakref', 00H		; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId___bytes__@?1??proxy_bytes@@9@9 DQ 0000000000000000H ; `proxy_bytes'::`2'::PyId___bytes__
	DQ	FLAT:??_C@_09PAJHGGFL@__bytes__?$AA@
	DQ	0000000000000000H
?PyId___name__@?1??weakref_repr@@9@9 DQ 0000000000000000H ; `weakref_repr'::`2'::PyId___name__
	DQ	FLAT:??_C@_08BHKDPDAA@__name__?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_08BHKDPDAA@__name__?$AA@
CONST	SEGMENT
??_C@_08BHKDPDAA@__name__?$AA@ DB '__name__', 00H	; `string'
CONST	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	_PyWeakref_GetWeakrefCount
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\weakrefobject.c
;	COMDAT _PyWeakref_GetWeakrefCount
_TEXT	SEGMENT
head$ = 8
_PyWeakref_GetWeakrefCount PROC				; COMDAT

; 12   :     Py_ssize_t count = 0;

  00000	33 c0		 xor	 eax, eax

; 13   : 
; 14   :     while (head != NULL) {

  00002	48 85 c9	 test	 rcx, rcx
  00005	74 18		 je	 SHORT $LN7@PyWeakref_
  00007	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL2@PyWeakref_:

; 15   :         ++count;
; 16   :         head = head->wr_next;

  00010	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  00017	48 ff c0	 inc	 rax
  0001a	48 85 c9	 test	 rcx, rcx
  0001d	75 f1		 jne	 SHORT $LL2@PyWeakref_
$LN7@PyWeakref_:

; 17   :     }
; 18   :     return count;
; 19   : }

  0001f	f3 c3		 fatret	 0
_PyWeakref_GetWeakrefCount ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$init_weakref DD imagerel init_weakref
	DD	imagerel init_weakref+122
	DD	imagerel $unwind$init_weakref
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$init_weakref DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\weakrefobject.c
xdata	ENDS
;	COMDAT init_weakref
_TEXT	SEGMENT
self$ = 64
ob$ = 72
callback$ = 80
init_weakref PROC					; COMDAT

; 24   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	49 8b d8	 mov	 rbx, r8
  0000d	48 8b f9	 mov	 rdi, rcx

; 25   :     self->hash = -1;

  00010	48 c7 41 70 ff
	ff ff ff	 mov	 QWORD PTR [rcx+112], -1

; 26   :     self->wr_object = ob;

  00018	48 89 51 60	 mov	 QWORD PTR [rcx+96], rdx

; 27   :     Py_XINCREF(callback);

  0001c	4d 85 c0	 test	 r8, r8
  0001f	74 4a		 je	 SHORT $LN13@init_weakr
  00021	e8 00 00 00 00	 call	 _Py_PXCTX
  00026	85 c0		 test	 eax, eax
  00028	75 32		 jne	 SHORT $LN11@init_weakr
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00038	4c 8b cb	 mov	 r9, rbx
  0003b	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00041	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00049	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004e	85 c0		 test	 eax, eax
  00050	75 06		 jne	 SHORT $LN7@init_weakr
  00052	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00056	74 04		 je	 SHORT $LN11@init_weakr
$LN7@init_weakr:
  00058	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN11@init_weakr:

; 28   :     self->wr_callback = callback;

  0005c	48 89 5f 68	 mov	 QWORD PTR [rdi+104], rbx

; 29   : }

  00060	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00065	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00069	5f		 pop	 rdi
  0006a	c3		 ret	 0
$LN13@init_weakr:

; 28   :     self->wr_callback = callback;

  0006b	48 89 59 68	 mov	 QWORD PTR [rcx+104], rbx

; 29   : }

  0006f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00074	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00078	5f		 pop	 rdi
  00079	c3		 ret	 0
init_weakref ENDP
_TEXT	ENDS
EXTRN	PyObject_GC_Track:PROC
EXTRN	_PyObject_GC_New:PROC
EXTRN	_PxObject_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$new_weakref DD imagerel new_weakref
	DD	imagerel new_weakref+98
	DD	imagerel $unwind$new_weakref
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$new_weakref DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT new_weakref
_TEXT	SEGMENT
ob$ = 48
callback$ = 56
new_weakref PROC					; COMDAT

; 33   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fa	 mov	 rdi, rdx
  00012	48 8b f1	 mov	 rsi, rcx

; 34   :     PyWeakReference *result;
; 35   : 
; 36   :     result = PyObject_GC_New(PyWeakReference, &_PyWeakref_RefType);

  00015	e8 00 00 00 00	 call	 _Py_PXCTX
  0001a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyWeakref_RefType
  00021	85 c0		 test	 eax, eax
  00023	74 07		 je	 SHORT $LN4@new_weakre
  00025	e8 00 00 00 00	 call	 _PxObject_New
  0002a	eb 05		 jmp	 SHORT $LN7@new_weakre
$LN4@new_weakre:
  0002c	e8 00 00 00 00	 call	 _PyObject_GC_New
$LN7@new_weakre:
  00031	48 8b d8	 mov	 rbx, rax

; 37   :     if (result) {

  00034	48 85 c0	 test	 rax, rax
  00037	74 16		 je	 SHORT $LN6@new_weakre

; 38   :         init_weakref(result, ob, callback);

  00039	4c 8b c7	 mov	 r8, rdi
  0003c	48 8b d6	 mov	 rdx, rsi
  0003f	48 8b c8	 mov	 rcx, rax
  00042	e8 00 00 00 00	 call	 init_weakref

; 39   :         PyObject_GC_Track(result);

  00047	48 8b cb	 mov	 rcx, rbx
  0004a	e8 00 00 00 00	 call	 PyObject_GC_Track
$LN6@new_weakre:

; 40   :     }
; 41   :     return result;
; 42   : }

  0004f	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00054	48 8b c3	 mov	 rax, rbx
  00057	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00060	5f		 pop	 rdi
  00061	c3		 ret	 0
new_weakref ENDP
_TEXT	ENDS
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$clear_weakref DD imagerel clear_weakref
	DD	imagerel clear_weakref+147
	DD	imagerel $unwind$clear_weakref
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$clear_weakref DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT clear_weakref
_TEXT	SEGMENT
self$ = 48
clear_weakref PROC					; COMDAT

; 52   : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 53   :     PyObject *callback = self->wr_callback;

  00009	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]

; 54   : 
; 55   :     if (self->wr_object != Py_None) {

  0000d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00014	48 8b 53 60	 mov	 rdx, QWORD PTR [rbx+96]
  00018	49 3b d1	 cmp	 rdx, r9
  0001b	74 5e		 je	 SHORT $LN5@clear_weak

; 56   :         PyWeakReference **list = GET_WEAKREFS_LISTPTR(self->wr_object);

  0001d	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  00021	4c 8b 80 28 01
	00 00		 mov	 r8, QWORD PTR [rax+296]

; 57   : 
; 58   :         if (*list == self)

  00028	4a 39 1c 02	 cmp	 QWORD PTR [rdx+r8], rbx
  0002c	75 0b		 jne	 SHORT $LN4@clear_weak

; 59   :             /* If 'self' is the end of the list (and thus self->wr_next == NULL)
; 60   :                then the weakref list itself (and thus the value of *list) will
; 61   :                end up being set to NULL. */
; 62   :             *list = self->wr_next;

  0002e	48 8b 83 80 00
	00 00		 mov	 rax, QWORD PTR [rbx+128]
  00035	4a 89 04 02	 mov	 QWORD PTR [rdx+r8], rax
$LN4@clear_weak:

; 63   :         self->wr_object = Py_None;
; 64   :         if (self->wr_prev != NULL)

  00039	48 8b 53 78	 mov	 rdx, QWORD PTR [rbx+120]
  0003d	4c 89 4b 60	 mov	 QWORD PTR [rbx+96], r9
  00041	48 85 d2	 test	 rdx, rdx
  00044	74 0e		 je	 SHORT $LN3@clear_weak

; 65   :             self->wr_prev->wr_next = self->wr_next;

  00046	48 8b 83 80 00
	00 00		 mov	 rax, QWORD PTR [rbx+128]
  0004d	48 89 82 80 00
	00 00		 mov	 QWORD PTR [rdx+128], rax
$LN3@clear_weak:

; 66   :         if (self->wr_next != NULL)

  00054	48 8b 93 80 00
	00 00		 mov	 rdx, QWORD PTR [rbx+128]
  0005b	48 85 d2	 test	 rdx, rdx
  0005e	74 08		 je	 SHORT $LN2@clear_weak

; 67   :             self->wr_next->wr_prev = self->wr_prev;

  00060	48 8b 43 78	 mov	 rax, QWORD PTR [rbx+120]
  00064	48 89 42 78	 mov	 QWORD PTR [rdx+120], rax
$LN2@clear_weak:

; 68   :         self->wr_prev = NULL;

  00068	48 c7 43 78 00
	00 00 00	 mov	 QWORD PTR [rbx+120], 0

; 69   :         self->wr_next = NULL;

  00070	48 c7 83 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rbx+128], 0
$LN5@clear_weak:

; 70   :     }
; 71   :     if (callback != NULL) {

  0007b	48 85 c9	 test	 rcx, rcx
  0007e	74 0d		 je	 SHORT $LN1@clear_weak

; 72   :         Py_DECREF(callback);

  00080	e8 00 00 00 00	 call	 _Py_DecRef

; 73   :         self->wr_callback = NULL;

  00085	48 c7 43 68 00
	00 00 00	 mov	 QWORD PTR [rbx+104], 0
$LN1@clear_weak:

; 74   :     }
; 75   : }

  0008d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00091	5b		 pop	 rbx
  00092	c3		 ret	 0
clear_weakref ENDP
_TEXT	ENDS
PUBLIC	_PyWeakref_ClearRef
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyWeakref_ClearRef DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$_PyWeakref_ClearRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyWeakref_ClearRef DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyWeakref_ClearRef
_TEXT	SEGMENT
self$ = 48
_PyWeakref_ClearRef PROC				; COMDAT

; 90   : {

$LN3:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 91   :     PyObject *callback;
; 92   : 
; 93   :     assert(self != NULL);
; 94   :     assert(PyWeakref_Check(self));
; 95   :     /* Preserve and restore the callback around clear_weakref. */
; 96   :     callback = self->wr_callback;

  0000a	48 8b 59 68	 mov	 rbx, QWORD PTR [rcx+104]
  0000e	48 8b f9	 mov	 rdi, rcx

; 97   :     self->wr_callback = NULL;

  00011	48 c7 41 68 00
	00 00 00	 mov	 QWORD PTR [rcx+104], 0

; 98   :     clear_weakref(self);

  00019	e8 00 00 00 00	 call	 clear_weakref

; 99   :     self->wr_callback = callback;

  0001e	48 89 5f 68	 mov	 QWORD PTR [rdi+104], rbx

; 100  : }

  00022	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00027	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002b	5f		 pop	 rdi
  0002c	c3		 ret	 0
_PyWeakref_ClearRef ENDP
_TEXT	ENDS
EXTRN	PyObject_GC_UnTrack:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$weakref_dealloc DD imagerel weakref_dealloc
	DD	imagerel weakref_dealloc+41
	DD	imagerel $unwind$weakref_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$weakref_dealloc DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT weakref_dealloc
_TEXT	SEGMENT
self$ = 48
weakref_dealloc PROC					; COMDAT

; 104  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 105  :     PyObject_GC_UnTrack(self);

  00009	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 106  :     clear_weakref((PyWeakReference *) self);

  0000e	48 8b cb	 mov	 rcx, rbx
  00011	e8 00 00 00 00	 call	 clear_weakref

; 107  :     Py_TYPE(self)->tp_free(self);

  00016	4c 8b 5b 58	 mov	 r11, QWORD PTR [rbx+88]
  0001a	48 8b cb	 mov	 rcx, rbx

; 108  : }

  0001d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00021	5b		 pop	 rbx
  00022	49 ff a3 98 01
	00 00		 rex_jmp QWORD PTR [r11+408]
weakref_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@DEJAOFJD@gc_traverse?$AA@		; `string'
PUBLIC	??_C@_0BL@LBKJPICB@?4?4?2Objects?2weakrefobject?4c?$AA@ ; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$gc_traverse DD imagerel gc_traverse
	DD	imagerel gc_traverse+95
	DD	imagerel $unwind$gc_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0M@DEJAOFJD@gc_traverse?$AA@
CONST	SEGMENT
??_C@_0M@DEJAOFJD@gc_traverse?$AA@ DB 'gc_traverse', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LBKJPICB@?4?4?2Objects?2weakrefobject?4c?$AA@
CONST	SEGMENT
??_C@_0BL@LBKJPICB@?4?4?2Objects?2weakrefobject?4c?$AA@ DB '..\Objects\we'
	DB	'akrefobject.c', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT gc_traverse
_TEXT	SEGMENT
self$ = 48
visit$ = 56
arg$ = 64
gc_traverse PROC					; COMDAT

; 113  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 114  :     Py_VISIT(self->wr_callback);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1a		 je	 SHORT $LN3@gc_travers
  00021	45 33 c9	 xor	 r9d, r9d
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@LBKJPICB@?4?4?2Objects?2weakrefobject?4c?$AA@
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@DEJAOFJD@gc_traverse?$AA@
  00032	45 8d 41 72	 lea	 r8d, QWORD PTR [r9+114]
  00036	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@gc_travers:
  0003b	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  0003f	48 85 c9	 test	 rcx, rcx
  00042	74 09		 je	 SHORT $LN5@gc_travers
  00044	48 8b d7	 mov	 rdx, rdi
  00047	ff d6		 call	 rsi
  00049	85 c0		 test	 eax, eax
  0004b	75 02		 jne	 SHORT $LN7@gc_travers
$LN5@gc_travers:

; 115  :     return 0;

  0004d	33 c0		 xor	 eax, eax
$LN7@gc_travers:

; 116  : }

  0004f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00054	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00059	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005d	5f		 pop	 rdi
  0005e	c3		 ret	 0
gc_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gc_clear DD imagerel gc_clear
	DD	imagerel gc_clear+16
	DD	imagerel $unwind$gc_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_clear DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT gc_clear
_TEXT	SEGMENT
self$ = 48
gc_clear PROC						; COMDAT

; 121  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 122  :     clear_weakref(self);

  00004	e8 00 00 00 00	 call	 clear_weakref

; 123  :     return 0;

  00009	33 c0		 xor	 eax, eax

; 124  : }

  0000b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0000f	c3		 ret	 0
gc_clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_09EMEOJKND@?3__call__?$AA@		; `string'
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$weakref_call DD imagerel weakref_call
	DD	imagerel weakref_call+140
	DD	imagerel $unwind$weakref_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$weakref_call DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_09EMEOJKND@?3__call__?$AA@
CONST	SEGMENT
??_C@_09EMEOJKND@?3__call__?$AA@ DB ':__call__', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\weakrefobject.c
CONST	ENDS
;	COMDAT weakref_call
_TEXT	SEGMENT
self$ = 64
args$ = 72
kw$ = 80
weakref_call PROC					; COMDAT

; 129  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	49 8b c0	 mov	 rax, r8
  00009	4c 8b d2	 mov	 r10, rdx
  0000c	48 8b d9	 mov	 rbx, rcx

; 130  :     static char *kwlist[] = {NULL};
; 131  : 
; 132  :     if (PyArg_ParseTupleAndKeywords(args, kw, ":__call__", kwlist)) {

  0000f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09EMEOJKND@?3__call__?$AA@
  00016	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??weakref_call@@9@9
  0001d	48 8b d0	 mov	 rdx, rax
  00020	49 8b ca	 mov	 rcx, r10
  00023	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00028	85 c0		 test	 eax, eax
  0002a	74 58		 je	 SHORT $LN1@weakref_ca

; 133  :         PyObject *object = PyWeakref_GET_OBJECT(self);

  0002c	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00030	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  00037	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0003c	48 0f 4f d8	 cmovg	 rbx, rax

; 134  :         Py_INCREF(object);

  00040	e8 00 00 00 00	 call	 _Py_PXCTX
  00045	85 c0		 test	 eax, eax
  00047	75 32		 jne	 SHORT $LN7@weakref_ca
  00049	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00050	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00057	4c 8b cb	 mov	 r9, rbx
  0005a	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00060	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00068	e8 00 00 00 00	 call	 _PyParallel_Guard
  0006d	85 c0		 test	 eax, eax
  0006f	75 06		 jne	 SHORT $LN6@weakref_ca
  00071	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00075	74 04		 je	 SHORT $LN7@weakref_ca
$LN6@weakref_ca:
  00077	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN7@weakref_ca:

; 135  :         return (object);

  0007b	48 8b c3	 mov	 rax, rbx

; 138  : }

  0007e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00082	5b		 pop	 rbx
  00083	c3		 ret	 0
$LN1@weakref_ca:

; 136  :     }
; 137  :     return NULL;

  00084	33 c0		 xor	 eax, eax

; 138  : }

  00086	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008a	5b		 pop	 rbx
  0008b	c3		 ret	 0
weakref_call ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@BHJBMPEM@weak?5object?5has?5gone?5away?$AA@ ; `string'
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyObject_Hash:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$weakref_hash DD imagerel weakref_hash
	DD	imagerel weakref_hash+86
	DD	imagerel $unwind$weakref_hash
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$weakref_hash DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0BK@BHJBMPEM@weak?5object?5has?5gone?5away?$AA@
CONST	SEGMENT
??_C@_0BK@BHJBMPEM@weak?5object?5has?5gone?5away?$AA@ DB 'weak object has'
	DB	' gone away', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT weakref_hash
_TEXT	SEGMENT
self$ = 48
weakref_hash PROC					; COMDAT

; 143  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 144  :     if (self->hash != -1)

  00006	48 8b 41 70	 mov	 rax, QWORD PTR [rcx+112]
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	48 83 f8 ff	 cmp	 rax, -1

; 145  :         return self->hash;

  00011	75 3d		 jne	 SHORT $LN3@weakref_ha

; 146  :     if (PyWeakref_GET_OBJECT(self) == Py_None) {

  00013	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00017	48 83 79 50 00	 cmp	 QWORD PTR [rcx+80], 0
  0001c	7e 1b		 jle	 SHORT $LN9@weakref_ha
  0001e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00025	48 3b c8	 cmp	 rcx, rax
  00028	74 0f		 je	 SHORT $LN9@weakref_ha

; 149  :     }
; 150  :     self->hash = PyObject_Hash(PyWeakref_GET_OBJECT(self));

  0002a	e8 00 00 00 00	 call	 PyObject_Hash
  0002f	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax

; 151  :     return self->hash;
; 152  : }

  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5b		 pop	 rbx
  00038	c3		 ret	 0
$LN9@weakref_ha:

; 147  :         PyErr_SetString(PyExc_TypeError, "weak object has gone away");

  00039	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00040	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@BHJBMPEM@weak?5object?5has?5gone?5away?$AA@
  00047	e8 00 00 00 00	 call	 PyErr_SetString

; 148  :         return -1;

  0004c	48 83 c8 ff	 or	 rax, -1
$LN3@weakref_ha:

; 151  :     return self->hash;
; 152  : }

  00050	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00054	5b		 pop	 rbx
  00055	c3		 ret	 0
weakref_hash ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@FNPEKPFD@?$DMweakref?5at?5?$CFp?$DL?5dead?$DO?$AA@ ; `string'
PUBLIC	??_C@_0BP@NIAEBOAB@?$DMweakref?5at?5?$CFp?$DL?5to?5?8?$CFs?8?5at?5?$CFp?$DO?$AA@ ; `string'
PUBLIC	??_C@_0CE@JMPLLHOJ@?$DMweakref?5at?5?$CFp?$DL?5to?5?8?$CFs?8?5at?5?$CFp?5?$CI?$CF@ ; `string'
EXTRN	PyErr_Clear:PROC
EXTRN	PyUnicode_FromFormat:PROC
EXTRN	_PyObject_GetAttrId:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$weakref_repr DD imagerel weakref_repr
	DD	imagerel weakref_repr+69
	DD	imagerel $unwind$weakref_repr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$weakref_repr DD imagerel weakref_repr+69
	DD	imagerel weakref_repr+315
	DD	imagerel $chain$0$weakref_repr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$weakref_repr DD imagerel weakref_repr+315
	DD	imagerel weakref_repr+344
	DD	imagerel $chain$2$weakref_repr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$weakref_repr DD imagerel weakref_repr+344
	DD	imagerel weakref_repr+371
	DD	imagerel $chain$4$weakref_repr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$weakref_repr DD imagerel weakref_repr+371
	DD	imagerel weakref_repr+396
	DD	imagerel $chain$5$weakref_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$weakref_repr DD 021H
	DD	imagerel weakref_repr
	DD	imagerel weakref_repr+69
	DD	imagerel $unwind$weakref_repr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$weakref_repr DD 020021H
	DD	083400H
	DD	imagerel weakref_repr
	DD	imagerel weakref_repr+69
	DD	imagerel $unwind$weakref_repr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$weakref_repr DD 020021H
	DD	083400H
	DD	imagerel weakref_repr
	DD	imagerel weakref_repr+69
	DD	imagerel $unwind$weakref_repr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$weakref_repr DD 020521H
	DD	083405H
	DD	imagerel weakref_repr
	DD	imagerel weakref_repr+69
	DD	imagerel $unwind$weakref_repr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$weakref_repr DD 040a01H
	DD	09640aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0BG@FNPEKPFD@?$DMweakref?5at?5?$CFp?$DL?5dead?$DO?$AA@
CONST	SEGMENT
??_C@_0BG@FNPEKPFD@?$DMweakref?5at?5?$CFp?$DL?5dead?$DO?$AA@ DB '<weakref'
	DB	' at %p; dead>', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@NIAEBOAB@?$DMweakref?5at?5?$CFp?$DL?5to?5?8?$CFs?8?5at?5?$CFp?$DO?$AA@
CONST	SEGMENT
??_C@_0BP@NIAEBOAB@?$DMweakref?5at?5?$CFp?$DL?5to?5?8?$CFs?8?5at?5?$CFp?$DO?$AA@ DB '<'
	DB	'weakref at %p; to ''%s'' at %p>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@JMPLLHOJ@?$DMweakref?5at?5?$CFp?$DL?5to?5?8?$CFs?8?5at?5?$CFp?5?$CI?$CF@
CONST	SEGMENT
??_C@_0CE@JMPLLHOJ@?$DMweakref?5at?5?$CFp?$DL?5to?5?8?$CFs?8?5at?5?$CFp?5?$CI?$CF@ DB '<'
	DB	'weakref at %p; to ''%s'' at %p (%U)>', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\weakrefobject.c
CONST	ENDS
;	COMDAT weakref_repr
_TEXT	SEGMENT
self$ = 64
weakref_repr PROC					; COMDAT

; 157  : {

  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 158  :     PyObject *name, *repr;
; 159  :     _Py_IDENTIFIER(__name__);
; 160  : 
; 161  :     if (PyWeakref_GET_OBJECT(self) == Py_None)

  0000d	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00011	48 83 79 50 00	 cmp	 QWORD PTR [rcx+80], 0
  00016	0f 8e 57 01 00
	00		 jle	 $LN36@weakref_re
  0001c	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_Py_NoneStruct
  00023	48 3b ce	 cmp	 rcx, rsi
  00026	0f 84 47 01 00
	00		 je	 $LN36@weakref_re

; 163  : 
; 164  :     name = _PyObject_GetAttrId(PyWeakref_GET_OBJECT(self), &PyId___name__);

  0002c	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  00033	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0003c	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId___name__@?1??weakref_repr@@9@9
  00041	4a 03 14 c0	 add	 rdx, QWORD PTR [rax+r8*8]
  00045	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0004a	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0004f	48 8b d8	 mov	 rbx, rax

; 165  :     if (name == NULL || !PyUnicode_Check(name)) {

  00052	48 85 c0	 test	 rax, rax
  00055	74 44		 je	 SHORT $LN35@weakref_re
  00057	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0005b	f7 81 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rcx+256], 268435456 ; 10000000H
  00065	74 39		 je	 SHORT $LN6@weakref_re

; 173  :     }
; 174  :     else {
; 175  :         repr = PyUnicode_FromFormat(
; 176  :             "<weakref at %p; to '%s' at %p (%U)>",
; 177  :             self,
; 178  :             Py_TYPE(PyWeakref_GET_OBJECT(self))->tp_name,
; 179  :             PyWeakref_GET_OBJECT(self),
; 180  :             name);

  00067	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  0006b	4c 8b ce	 mov	 r9, rsi
  0006e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00073	48 8b 4a 50	 mov	 rcx, QWORD PTR [rdx+80]
  00077	48 85 c9	 test	 rcx, rcx
  0007a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@JMPLLHOJ@?$DMweakref?5at?5?$CFp?$DL?5to?5?8?$CFs?8?5at?5?$CFp?5?$CI?$CF@
  00081	48 0f 4f f2	 cmovg	 rsi, rdx
  00085	4c 0f 4f ca	 cmovg	 r9, rdx
  00089	48 8b d7	 mov	 rdx, rdi
  0008c	4c 8b 46 58	 mov	 r8, QWORD PTR [rsi+88]
  00090	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00094	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  00099	eb 32		 jmp	 SHORT $LN37@weakref_re
$LN35@weakref_re:

; 166  :         if (name == NULL)
; 167  :             PyErr_Clear();

  0009b	e8 00 00 00 00	 call	 PyErr_Clear
$LN6@weakref_re:

; 168  :         repr = PyUnicode_FromFormat(
; 169  :             "<weakref at %p; to '%s' at %p>",
; 170  :             self,
; 171  :             Py_TYPE(PyWeakref_GET_OBJECT(self))->tp_name,
; 172  :             PyWeakref_GET_OBJECT(self));

  000a0	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  000a4	4c 8b ce	 mov	 r9, rsi
  000a7	48 8b d7	 mov	 rdx, rdi
  000aa	48 8b 41 50	 mov	 rax, QWORD PTR [rcx+80]
  000ae	48 85 c0	 test	 rax, rax
  000b1	48 0f 4f f1	 cmovg	 rsi, rcx
  000b5	4c 0f 4f c9	 cmovg	 r9, rcx
  000b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@NIAEBOAB@?$DMweakref?5at?5?$CFp?$DL?5to?5?8?$CFs?8?5at?5?$CFp?$DO?$AA@
  000c0	4c 8b 46 58	 mov	 r8, QWORD PTR [rsi+88]
  000c4	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  000c8	e8 00 00 00 00	 call	 PyUnicode_FromFormat
$LN37@weakref_re:
  000cd	48 8b f8	 mov	 rdi, rax

; 181  :     }
; 182  :     Py_XDECREF(name);

  000d0	48 85 db	 test	 rbx, rbx
  000d3	0f 84 87 00 00
	00		 je	 $LN3@weakref_re
  000d9	e8 00 00 00 00	 call	 _Py_PXCTX
  000de	85 c0		 test	 eax, eax
  000e0	75 7e		 jne	 SHORT $LN3@weakref_re
  000e2	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000e6	a8 20		 test	 al, 32			; 00000020H
  000e8	75 6e		 jne	 SHORT $LN28@weakref_re
  000ea	84 c0		 test	 al, al
  000ec	78 6a		 js	 SHORT $LN28@weakref_re
  000ee	a8 02		 test	 al, 2
  000f0	75 6e		 jne	 SHORT $LN3@weakref_re
  000f2	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000f6	75 68		 jne	 SHORT $LN3@weakref_re
  000f8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00106	4c 8b cb	 mov	 r9, rbx
  00109	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0010f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00117	e8 00 00 00 00	 call	 _PyParallel_Guard
  0011c	48 8b cb	 mov	 rcx, rbx
  0011f	85 c0		 test	 eax, eax
  00121	74 18		 je	 SHORT $LN33@weakref_re
  00123	e8 00 00 00 00	 call	 _Px_Dealloc
  00128	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 183  :     return repr;

  0012d	48 8b c7	 mov	 rax, rdi

; 184  : }

  00130	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00135	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00139	5f		 pop	 rdi
  0013a	c3		 ret	 0

; 181  :     }
; 182  :     Py_XDECREF(name);

$LN33@weakref_re:
  0013b	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0013f	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00145	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 183  :     return repr;

  0014a	48 8b c7	 mov	 rax, rdi

; 184  : }

  0014d	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00152	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00156	5f		 pop	 rdi
  00157	c3		 ret	 0

; 181  :     }
; 182  :     Py_XDECREF(name);

$LN28@weakref_re:
  00158	48 8b cb	 mov	 rcx, rbx
  0015b	e8 00 00 00 00	 call	 Px_DecRef
$LN3@weakref_re:

; 183  :     return repr;

  00160	48 8b c7	 mov	 rax, rdi
  00163	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 184  : }

  00168	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0016d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00171	5f		 pop	 rdi
  00172	c3		 ret	 0
$LN36@weakref_re:

; 162  :         return PyUnicode_FromFormat("<weakref at %p; dead>", self);

  00173	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@FNPEKPFD@?$DMweakref?5at?5?$CFp?$DL?5dead?$DO?$AA@
  0017a	48 8b d7	 mov	 rdx, rdi

; 184  : }

  0017d	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00182	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00186	5f		 pop	 rdi
  00187	e9 00 00 00 00	 jmp	 PyUnicode_FromFormat
weakref_repr ENDP
_TEXT	ENDS
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
EXTRN	PyObject_RichCompare:PROC
EXTRN	_Py_NotImplementedStruct:BYTE
EXTRN	PyType_IsSubtype:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$weakref_richcompare DD imagerel weakref_richcompare
	DD	imagerel weakref_richcompare+473
	DD	imagerel $unwind$weakref_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$weakref_richcompare DD 0a1801H
	DD	0c6418H
	DD	0b5418H
	DD	0a3418H
	DD	0d0145218H
	DD	07010c012H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\weakrefobject.c
xdata	ENDS
;	COMDAT weakref_richcompare
_TEXT	SEGMENT
self$ = 80
other$ = 88
op$ = 96
weakref_richcompare PROC				; COMDAT

; 192  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00018	41 8b d8	 mov	 ebx, r8d
  0001b	48 8b f2	 mov	 rsi, rdx
  0001e	48 8b f9	 mov	 rdi, rcx

; 193  :     if ((op != Py_EQ && op != Py_NE) ||
; 194  :         !PyWeakref_Check(self) ||
; 195  :         !PyWeakref_Check(other)) {

  00021	41 83 f8 02	 cmp	 r8d, 2
  00025	74 05		 je	 SHORT $LN8@weakref_ri
  00027	83 fb 03	 cmp	 ebx, 3
  0002a	75 5b		 jne	 SHORT $LN9@weakref_ri
$LN8@weakref_ri:
  0002c	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  00030	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_PyWeakref_RefType
  00037	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:_PyWeakref_CallableProxyType
  0003e	4c 8d 2d 00 00
	00 00		 lea	 r13, OFFSET FLAT:_PyWeakref_ProxyType
  00045	48 3b cd	 cmp	 rcx, rbp
  00048	74 1a		 je	 SHORT $LN6@weakref_ri
  0004a	48 8b d5	 mov	 rdx, rbp
  0004d	e8 00 00 00 00	 call	 PyType_IsSubtype
  00052	85 c0		 test	 eax, eax
  00054	75 0e		 jne	 SHORT $LN6@weakref_ri
  00056	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  0005a	49 3b c5	 cmp	 rax, r13
  0005d	74 05		 je	 SHORT $LN6@weakref_ri
  0005f	49 3b c4	 cmp	 rax, r12
  00062	75 23		 jne	 SHORT $LN9@weakref_ri
$LN6@weakref_ri:
  00064	48 8b 4e 58	 mov	 rcx, QWORD PTR [rsi+88]
  00068	48 3b cd	 cmp	 rcx, rbp
  0006b	74 6b		 je	 SHORT $LN10@weakref_ri
  0006d	48 8b d5	 mov	 rdx, rbp
  00070	e8 00 00 00 00	 call	 PyType_IsSubtype
  00075	85 c0		 test	 eax, eax
  00077	75 5f		 jne	 SHORT $LN10@weakref_ri
  00079	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  0007d	49 3b c5	 cmp	 rax, r13
  00080	74 56		 je	 SHORT $LN10@weakref_ri
  00082	49 3b c4	 cmp	 rax, r12
  00085	74 51		 je	 SHORT $LN10@weakref_ri
$LN9@weakref_ri:

; 196  :         Py_RETURN_NOTIMPLEMENTED;

  00087	e8 00 00 00 00	 call	 _Py_PXCTX
  0008c	85 c0		 test	 eax, eax
  0008e	75 3c		 jne	 SHORT $LN22@weakref_ri
  00090	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NotImplementedStruct
  00097	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000a5	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000ab	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000b3	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b8	85 c0		 test	 eax, eax
  000ba	75 09		 jne	 SHORT $LN21@weakref_ri
  000bc	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NotImplementedStruct+32, 32 ; 00000020H
  000c3	74 07		 je	 SHORT $LN22@weakref_ri
$LN21@weakref_ri:
  000c5	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NotImplementedStruct+80
$LN22@weakref_ri:
  000cc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  000d3	e9 e8 00 00 00	 jmp	 $LN11@weakref_ri
$LN10@weakref_ri:

; 197  :     }
; 198  :     if (PyWeakref_GET_OBJECT(self) == Py_None
; 199  :         || PyWeakref_GET_OBJECT(other) == Py_None) {

  000d8	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  000dc	48 83 79 50 00	 cmp	 QWORD PTR [rcx+80], 0
  000e1	7e 29		 jle	 SHORT $LN4@weakref_ri
  000e3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000ea	48 3b c8	 cmp	 rcx, rax
  000ed	74 1d		 je	 SHORT $LN4@weakref_ri
  000ef	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  000f3	48 83 7a 50 00	 cmp	 QWORD PTR [rdx+80], 0
  000f8	7e 12		 jle	 SHORT $LN4@weakref_ri
  000fa	48 3b d0	 cmp	 rdx, rax
  000fd	74 0d		 je	 SHORT $LN4@weakref_ri

; 207  :     }
; 208  :     return PyObject_RichCompare(PyWeakref_GET_OBJECT(self),
; 209  :                                 PyWeakref_GET_OBJECT(other), op);

  000ff	44 8b c3	 mov	 r8d, ebx
  00102	e8 00 00 00 00	 call	 PyObject_RichCompare
  00107	e9 b4 00 00 00	 jmp	 $LN11@weakref_ri
$LN4@weakref_ri:

; 200  :         int res = (self == other);

  0010c	33 c9		 xor	 ecx, ecx
  0010e	48 3b fe	 cmp	 rdi, rsi
  00111	8b c1		 mov	 eax, ecx
  00113	0f 94 c0	 sete	 al

; 201  :         if (op == Py_NE)

  00116	83 fb 03	 cmp	 ebx, 3
  00119	75 07		 jne	 SHORT $LN3@weakref_ri

; 202  :             res = !res;

  0011b	85 c0		 test	 eax, eax
  0011d	0f 94 c1	 sete	 cl
  00120	8b c1		 mov	 eax, ecx
$LN3@weakref_ri:

; 203  :         if (res)

  00122	85 c0		 test	 eax, eax
  00124	74 4e		 je	 SHORT $LN2@weakref_ri

; 204  :             Py_RETURN_TRUE;

  00126	e8 00 00 00 00	 call	 _Py_PXCTX
  0012b	85 c0		 test	 eax, eax
  0012d	75 3c		 jne	 SHORT $LN26@weakref_ri
  0012f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_TrueStruct
  00136	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0013d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00144	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0014a	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00152	e8 00 00 00 00	 call	 _PyParallel_Guard
  00157	85 c0		 test	 eax, eax
  00159	75 09		 jne	 SHORT $LN25@weakref_ri
  0015b	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_TrueStruct+32, 32 ; 00000020H
  00162	74 07		 je	 SHORT $LN26@weakref_ri
$LN25@weakref_ri:
  00164	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_TrueStruct+80
$LN26@weakref_ri:
  0016b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00172	eb 4c		 jmp	 SHORT $LN11@weakref_ri
$LN2@weakref_ri:

; 205  :         else
; 206  :             Py_RETURN_FALSE;

  00174	e8 00 00 00 00	 call	 _Py_PXCTX
  00179	85 c0		 test	 eax, eax
  0017b	75 3c		 jne	 SHORT $LN30@weakref_ri
  0017d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_FalseStruct
  00184	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0018b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00192	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00198	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  001a0	e8 00 00 00 00	 call	 _PyParallel_Guard
  001a5	85 c0		 test	 eax, eax
  001a7	75 09		 jne	 SHORT $LN29@weakref_ri
  001a9	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  001b0	74 07		 je	 SHORT $LN30@weakref_ri
$LN29@weakref_ri:
  001b2	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN30@weakref_ri:
  001b9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
$LN11@weakref_ri:

; 210  : }

  001c0	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  001c5	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  001ca	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  001cf	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001d3	41 5d		 pop	 r13
  001d5	41 5c		 pop	 r12
  001d7	5f		 pop	 rdi
  001d8	c3		 ret	 0
weakref_richcompare ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT get_basic_refs
_TEXT	SEGMENT
head$ = 8
refp$ = 16
proxyp$ = 24
get_basic_refs PROC					; COMDAT

; 221  :     *refp = NULL;

  00000	33 c0		 xor	 eax, eax
  00002	48 89 02	 mov	 QWORD PTR [rdx], rax

; 222  :     *proxyp = NULL;

  00005	49 89 00	 mov	 QWORD PTR [r8], rax

; 223  : 
; 224  :     if (head != NULL && head->wr_callback == NULL) {

  00008	48 85 c9	 test	 rcx, rcx
  0000b	74 48		 je	 SHORT $LN2@get_basic_
  0000d	48 39 41 68	 cmp	 QWORD PTR [rcx+104], rax
  00011	75 42		 jne	 SHORT $LN2@get_basic_

; 225  :         /* We need to be careful that the "basic refs" aren't
; 226  :            subclasses of the main types.  That complicates this a
; 227  :            little. */
; 228  :         if (PyWeakref_CheckRefExact(head)) {

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_RefType
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	75 0a		 jne	 SHORT $LN3@get_basic_

; 229  :             *refp = head;

  00020	48 89 0a	 mov	 QWORD PTR [rdx], rcx

; 230  :             head = head->wr_next;

  00023	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
$LN3@get_basic_:

; 231  :         }
; 232  :         if (head != NULL
; 233  :             && head->wr_callback == NULL
; 234  :             && PyWeakref_CheckProxy(head)) {

  0002a	48 85 c9	 test	 rcx, rcx
  0002d	74 26		 je	 SHORT $LN2@get_basic_
  0002f	48 83 79 68 00	 cmp	 QWORD PTR [rcx+104], 0
  00034	75 1f		 jne	 SHORT $LN2@get_basic_
  00036	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_PyWeakref_ProxyType
  00041	48 3b c2	 cmp	 rax, rdx
  00044	74 0c		 je	 SHORT $LN1@get_basic_
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_PyWeakref_CallableProxyType
  0004d	48 3b c2	 cmp	 rax, rdx
  00050	75 03		 jne	 SHORT $LN2@get_basic_
$LN1@get_basic_:

; 235  :             *proxyp = head;

  00052	49 89 08	 mov	 QWORD PTR [r8], rcx
$LN2@get_basic_:

; 236  :             /* head = head->wr_next; */
; 237  :         }
; 238  :     }
; 239  : }

  00055	f3 c3		 fatret	 0
get_basic_refs ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT insert_after
_TEXT	SEGMENT
newref$ = 8
prev$ = 16
insert_after PROC					; COMDAT

; 245  :     newref->wr_prev = prev;

  00000	48 89 51 78	 mov	 QWORD PTR [rcx+120], rdx

; 246  :     newref->wr_next = prev->wr_next;

  00004	48 8b 82 80 00
	00 00		 mov	 rax, QWORD PTR [rdx+128]
  0000b	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax

; 247  :     if (prev->wr_next != NULL)

  00012	48 8b 82 80 00
	00 00		 mov	 rax, QWORD PTR [rdx+128]
  00019	48 85 c0	 test	 rax, rax
  0001c	74 04		 je	 SHORT $LN4@insert_aft

; 248  :         prev->wr_next->wr_prev = newref;

  0001e	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx
$LN4@insert_aft:

; 249  :     prev->wr_next = newref;

  00022	48 89 8a 80 00
	00 00		 mov	 QWORD PTR [rdx+128], rcx

; 250  : }

  00029	c3		 ret	 0
insert_after ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT insert_head
_TEXT	SEGMENT
newref$ = 8
list$ = 16
insert_head PROC					; COMDAT

; 258  :     PyWeakReference *next = *list;

  00000	48 8b 02	 mov	 rax, QWORD PTR [rdx]

; 259  : 
; 260  :     newref->wr_prev = NULL;

  00003	48 c7 41 78 00
	00 00 00	 mov	 QWORD PTR [rcx+120], 0

; 261  :     newref->wr_next = next;

  0000b	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax

; 262  :     if (next != NULL)

  00012	48 85 c0	 test	 rax, rax
  00015	74 04		 je	 SHORT $LN4@insert_hea

; 263  :         next->wr_prev = newref;

  00017	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx
$LN4@insert_hea:

; 264  :     *list = newref;

  0001b	48 89 0a	 mov	 QWORD PTR [rdx], rcx

; 265  : }

  0001e	c3		 ret	 0
insert_head ENDP
_TEXT	ENDS
EXTRN	PyArg_UnpackTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$parse_weakref_init_args DD imagerel parse_weakref_init_args
	DD	imagerel parse_weakref_init_args+43
	DD	imagerel $unwind$parse_weakref_init_args
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parse_weakref_init_args DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT parse_weakref_init_args
_TEXT	SEGMENT
funcname$ = 64
args$ = 72
obp$ = 80
callbackp$ = 88
parse_weakref_init_args PROC				; COMDAT

; 270  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 271  :     /* XXX Should check that kwargs == NULL or is empty. */
; 272  :     return PyArg_UnpackTuple(args, funcname, 1, 2, obp, callbackp);

  00004	4c 89 4c 24 28	 mov	 QWORD PTR [rsp+40], r9
  00009	48 8b c2	 mov	 rax, rdx
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	4c 89 44 24 20	 mov	 QWORD PTR [rsp+32], r8
  00017	48 8b d1	 mov	 rdx, rcx
  0001a	45 8d 41 ff	 lea	 r8d, QWORD PTR [r9-1]
  0001e	48 8b c8	 mov	 rcx, rax
  00021	e8 00 00 00 00	 call	 PyArg_UnpackTuple

; 273  : }

  00026	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0002a	c3		 ret	 0
parse_weakref_init_args ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CM@IJKCCOEC@cannot?5create?5weak?5reference?5to?5@ ; `string'
PUBLIC	??_C@_07MEBHOIG@__new__?$AA@			; `string'
EXTRN	PyErr_Format:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$weakref___new__ DD imagerel weakref___new__
	DD	imagerel weakref___new__+346
	DD	imagerel $unwind$weakref___new__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$weakref___new__ DD 081401H
	DD	0c6414H
	DD	0b5414H
	DD	0a3414H
	DD	070107214H
xdata	ENDS
;	COMDAT ??_C@_0CM@IJKCCOEC@cannot?5create?5weak?5reference?5to?5@
CONST	SEGMENT
??_C@_0CM@IJKCCOEC@cannot?5create?5weak?5reference?5to?5@ DB 'cannot crea'
	DB	'te weak reference to ''%s'' object', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07MEBHOIG@__new__?$AA@
CONST	SEGMENT
??_C@_07MEBHOIG@__new__?$AA@ DB '__new__', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT weakref___new__
_TEXT	SEGMENT
ref$20495 = 32
ob$ = 40
proxy$20496 = 48
type$ = 80
args$ = 88
kwargs$ = 96
callback$ = 104
weakref___new__ PROC					; COMDAT

; 277  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00014	48 8b f9	 mov	 rdi, rcx

; 278  :     PyWeakReference *self = NULL;
; 279  :     PyObject *ob, *callback = NULL;
; 280  : 
; 281  :     if (parse_weakref_init_args("__new__", args, kwargs, &ob, &callback)) {

  00017	4c 8d 4c 24 68	 lea	 r9, QWORD PTR callback$[rsp]
  0001c	4c 8d 44 24 28	 lea	 r8, QWORD PTR ob$[rsp]
  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07MEBHOIG@__new__?$AA@
  00028	33 db		 xor	 ebx, ebx
  0002a	48 89 5c 24 68	 mov	 QWORD PTR callback$[rsp], rbx
  0002f	e8 00 00 00 00	 call	 parse_weakref_init_args
  00034	85 c0		 test	 eax, eax
  00036	0f 84 06 01 00
	00		 je	 $LN1@weakref___

; 282  :         PyWeakReference *ref, *proxy;
; 283  :         PyWeakReference **list;
; 284  : 
; 285  :         if (!PyType_SUPPORTS_WEAKREFS(Py_TYPE(ob))) {

  0003c	48 8b 54 24 28	 mov	 rdx, QWORD PTR ob$[rsp]
  00041	4c 8b 42 58	 mov	 r8, QWORD PTR [rdx+88]
  00045	49 39 98 28 01
	00 00		 cmp	 QWORD PTR [r8+296], rbx
  0004c	7f 1e		 jg	 SHORT $LN9@weakref___

; 286  :             PyErr_Format(PyExc_TypeError,
; 287  :                          "cannot create weak reference to '%s' object",
; 288  :                          Py_TYPE(ob)->tp_name);

  0004e	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00052	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@IJKCCOEC@cannot?5create?5weak?5reference?5to?5@
  00060	e8 00 00 00 00	 call	 PyErr_Format

; 289  :             return NULL;

  00065	33 c0		 xor	 eax, eax
  00067	e9 d9 00 00 00	 jmp	 $LN11@weakref___
$LN9@weakref___:

; 290  :         }
; 291  :         if (callback == Py_None)

  0006c	48 8b 44 24 68	 mov	 rax, QWORD PTR callback$[rsp]
  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct

; 292  :             callback = NULL;
; 293  :         list = GET_WEAKREFS_LISTPTR(ob);
; 294  :         get_basic_refs(*list, &ref, &proxy);

  00078	4c 8d 44 24 30	 lea	 r8, QWORD PTR proxy$20496[rsp]
  0007d	48 3b c1	 cmp	 rax, rcx
  00080	48 0f 44 c3	 cmove	 rax, rbx
  00084	48 89 44 24 68	 mov	 QWORD PTR callback$[rsp], rax
  00089	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  0008d	48 8b 88 28 01
	00 00		 mov	 rcx, QWORD PTR [rax+296]
  00094	48 8d 34 0a	 lea	 rsi, QWORD PTR [rdx+rcx]
  00098	48 8d 54 24 20	 lea	 rdx, QWORD PTR ref$20495[rsp]
  0009d	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  000a0	e8 00 00 00 00	 call	 get_basic_refs

; 295  :         if (callback == NULL && type == &_PyWeakref_RefType) {

  000a5	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_PyWeakref_RefType
  000ac	48 39 5c 24 68	 cmp	 QWORD PTR callback$[rsp], rbx
  000b1	75 19		 jne	 SHORT $LN6@weakref___
  000b3	48 3b fd	 cmp	 rdi, rbp
  000b6	75 14		 jne	 SHORT $LN6@weakref___

; 296  :             if (ref != NULL) {

  000b8	48 8b 5c 24 20	 mov	 rbx, QWORD PTR ref$20495[rsp]
  000bd	48 85 db	 test	 rbx, rbx
  000c0	74 0a		 je	 SHORT $LN6@weakref___

; 297  :                 /* We can re-use an existing reference. */
; 298  :                 Py_INCREF(ref);

  000c2	48 8b cb	 mov	 rcx, rbx
  000c5	e8 00 00 00 00	 call	 _Py_IncRef

; 299  :                 return (PyObject *)ref;

  000ca	eb 76		 jmp	 SHORT $LN1@weakref___
$LN6@weakref___:

; 300  :             }
; 301  :         }
; 302  :         /* We have to create a new reference. */
; 303  :         /* Note: the tp_alloc() can trigger cyclic GC, so the weakref
; 304  :            list on ob can be mutated.  This means that the ref and
; 305  :            proxy pointers we got back earlier may have been collected,
; 306  :            so we need to compute these values again before we use
; 307  :            them. */
; 308  :         self = (PyWeakReference *) (type->tp_alloc(type, 0));

  000cc	33 d2		 xor	 edx, edx
  000ce	48 8b cf	 mov	 rcx, rdi
  000d1	ff 97 88 01 00
	00		 call	 QWORD PTR [rdi+392]
  000d7	48 8b d8	 mov	 rbx, rax

; 309  :         if (self != NULL) {

  000da	48 85 c0	 test	 rax, rax
  000dd	74 63		 je	 SHORT $LN1@weakref___

; 310  :             init_weakref(self, ob, callback);

  000df	4c 8b 44 24 68	 mov	 r8, QWORD PTR callback$[rsp]
  000e4	48 8b 54 24 28	 mov	 rdx, QWORD PTR ob$[rsp]
  000e9	48 8b c8	 mov	 rcx, rax
  000ec	e8 00 00 00 00	 call	 init_weakref

; 311  :             if (callback == NULL && type == &_PyWeakref_RefType) {

  000f1	48 83 7c 24 68
	00		 cmp	 QWORD PTR callback$[rsp], 0
  000f7	75 12		 jne	 SHORT $LN4@weakref___
  000f9	48 3b fd	 cmp	 rdi, rbp
  000fc	75 0d		 jne	 SHORT $LN4@weakref___

; 312  :                 insert_head(self, list);

  000fe	48 8b d6	 mov	 rdx, rsi
  00101	48 8b cb	 mov	 rcx, rbx
  00104	e8 00 00 00 00	 call	 insert_head

; 313  :             }
; 314  :             else {

  00109	eb 37		 jmp	 SHORT $LN1@weakref___
$LN4@weakref___:

; 315  :                 PyWeakReference *prev;
; 316  : 
; 317  :                 get_basic_refs(*list, &ref, &proxy);

  0010b	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  0010e	4c 8d 44 24 30	 lea	 r8, QWORD PTR proxy$20496[rsp]
  00113	48 8d 54 24 20	 lea	 rdx, QWORD PTR ref$20495[rsp]
  00118	e8 00 00 00 00	 call	 get_basic_refs

; 318  :                 prev = (proxy == NULL) ? ref : proxy;

  0011d	48 8b 54 24 30	 mov	 rdx, QWORD PTR proxy$20496[rsp]

; 319  :                 if (prev == NULL)
; 320  :                     insert_head(self, list);

  00122	48 8b cb	 mov	 rcx, rbx
  00125	48 85 d2	 test	 rdx, rdx
  00128	48 0f 44 54 24
	20		 cmove	 rdx, QWORD PTR ref$20495[rsp]
  0012e	48 85 d2	 test	 rdx, rdx
  00131	75 0a		 jne	 SHORT $LN2@weakref___
  00133	48 8b d6	 mov	 rdx, rsi
  00136	e8 00 00 00 00	 call	 insert_head

; 321  :                 else

  0013b	eb 05		 jmp	 SHORT $LN1@weakref___
$LN2@weakref___:

; 322  :                     insert_after(self, prev);

  0013d	e8 00 00 00 00	 call	 insert_after
$LN1@weakref___:

; 323  :             }
; 324  :         }
; 325  :     }
; 326  :     return (PyObject *)self;

  00142	48 8b c3	 mov	 rax, rbx
$LN11@weakref___:

; 327  : }

  00145	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0014a	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  0014f	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  00154	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00158	5f		 pop	 rdi
  00159	c3		 ret	 0
weakref___new__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_08DOHHOJGB@__init__?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$weakref___init__ DD imagerel weakref___init__
	DD	imagerel weakref___init__+39
	DD	imagerel $unwind$weakref___init__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$weakref___init__ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_08DOHHOJGB@__init__?$AA@
CONST	SEGMENT
??_C@_08DOHHOJGB@__init__?$AA@ DB '__init__', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT weakref___init__
_TEXT	SEGMENT
self$ = 48
args$ = 56
kwargs$ = 64
tmp$ = 72
weakref___init__ PROC					; COMDAT

; 331  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 332  :     PyObject *tmp;
; 333  : 
; 334  :     if (parse_weakref_init_args("__init__", args, kwargs, &tmp, &tmp))

  00004	4c 8d 4c 24 48	 lea	 r9, QWORD PTR tmp$[rsp]
  00009	4c 8d 44 24 48	 lea	 r8, QWORD PTR tmp$[rsp]
  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08DOHHOJGB@__init__?$AA@
  00015	e8 00 00 00 00	 call	 parse_weakref_init_args
  0001a	f7 d8		 neg	 eax
  0001c	1b c0		 sbb	 eax, eax
  0001e	f7 d8		 neg	 eax
  00020	ff c8		 dec	 eax

; 335  :         return 0;
; 336  :     else
; 337  :         return -1;
; 338  : }

  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
weakref___init__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@EDCOGGKH@weakly?9referenced?5object?5no?5long@ ; `string'
EXTRN	PyExc_ReferenceError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_checkref DD imagerel proxy_checkref
	DD	imagerel proxy_checkref+63
	DD	imagerel $unwind$proxy_checkref
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_checkref DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0CK@EDCOGGKH@weakly?9referenced?5object?5no?5long@
CONST	SEGMENT
??_C@_0CK@EDCOGGKH@weakly?9referenced?5object?5no?5long@ DB 'weakly-refer'
	DB	'enced object no longer exists', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT proxy_checkref
_TEXT	SEGMENT
proxy$ = 48
proxy_checkref PROC					; COMDAT

; 388  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 389  :     if (PyWeakref_GET_OBJECT(proxy) == Py_None) {

  00004	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  00008	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0000d	7e 16		 jle	 SHORT $LN6@proxy_chec
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00016	48 3b c1	 cmp	 rax, rcx
  00019	74 0a		 je	 SHORT $LN6@proxy_chec

; 393  :     }
; 394  :     return 1;

  0001b	b8 01 00 00 00	 mov	 eax, 1

; 395  : }

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
$LN6@proxy_chec:

; 390  :         PyErr_SetString(PyExc_ReferenceError,
; 391  :                         "weakly-referenced object no longer exists");

  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ReferenceError
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@EDCOGGKH@weakly?9referenced?5object?5no?5long@
  00033	e8 00 00 00 00	 call	 PyErr_SetString

; 392  :         return 0;

  00038	33 c0		 xor	 eax, eax

; 395  : }

  0003a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003e	c3		 ret	 0
proxy_checkref ENDP
_TEXT	ENDS
EXTRN	PyObject_GetAttr:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_getattr DD imagerel proxy_getattr
	DD	imagerel proxy_getattr+165
	DD	imagerel $unwind$proxy_getattr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_getattr DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_getattr
_TEXT	SEGMENT
x$ = 48
y$ = 56
proxy_getattr PROC					; COMDAT

; 455  : WRAP_BINARY(proxy_getattr, PyObject_GetAttr)

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00018	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_PyWeakref_ProxyType
  0001f	48 8b da	 mov	 rbx, rdx
  00022	48 8b f9	 mov	 rdi, rcx
  00025	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_PyWeakref_CallableProxyType
  0002c	48 3b c5	 cmp	 rax, rbp
  0002f	74 05		 je	 SHORT $LN5@proxy_geta
  00031	48 3b c6	 cmp	 rax, rsi
  00034	75 21		 jne	 SHORT $LN9@proxy_geta
$LN5@proxy_geta:
  00036	e8 00 00 00 00	 call	 proxy_checkref
  0003b	85 c0		 test	 eax, eax
  0003d	75 04		 jne	 SHORT $LN4@proxy_geta
$LN13@proxy_geta:
  0003f	33 c0		 xor	 eax, eax
  00041	eb 4d		 jmp	 SHORT $LN7@proxy_geta
$LN4@proxy_geta:
  00043	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00047	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  0004e	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00053	48 0f 4f f8	 cmovg	 rdi, rax
$LN9@proxy_geta:
  00057	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0005b	48 3b c5	 cmp	 rax, rbp
  0005e	74 05		 je	 SHORT $LN2@proxy_geta
  00060	48 3b c6	 cmp	 rax, rsi
  00063	75 20		 jne	 SHORT $LN11@proxy_geta
$LN2@proxy_geta:
  00065	48 8b cb	 mov	 rcx, rbx
  00068	e8 00 00 00 00	 call	 proxy_checkref
  0006d	85 c0		 test	 eax, eax
  0006f	74 ce		 je	 SHORT $LN13@proxy_geta
  00071	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00075	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0007c	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00081	48 0f 4f d8	 cmovg	 rbx, rax
$LN11@proxy_geta:
  00085	48 8b d3	 mov	 rdx, rbx
  00088	48 8b cf	 mov	 rcx, rdi
  0008b	e8 00 00 00 00	 call	 PyObject_GetAttr
$LN7@proxy_geta:
  00090	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00095	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0009a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a3	5f		 pop	 rdi
  000a4	c3		 ret	 0
proxy_getattr ENDP
_TEXT	ENDS
EXTRN	PyObject_Str:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_str DD imagerel proxy_str
	DD	imagerel proxy_str+90
	DD	imagerel $unwind$proxy_str
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_str DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_str
_TEXT	SEGMENT
proxy$ = 48
proxy_str PROC						; COMDAT

; 456  : WRAP_UNARY(proxy_str, PyObject_Str)

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyWeakref_ProxyType
  00014	48 3b c1	 cmp	 rax, rcx
  00017	74 0c		 je	 SHORT $LN2@proxy_str
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyWeakref_CallableProxyType
  00020	48 3b c1	 cmp	 rax, rcx
  00023	75 28		 jne	 SHORT $LN6@proxy_str
$LN2@proxy_str:
  00025	48 8b cb	 mov	 rcx, rbx
  00028	e8 00 00 00 00	 call	 proxy_checkref
  0002d	85 c0		 test	 eax, eax
  0002f	75 08		 jne	 SHORT $LN1@proxy_str
  00031	33 c0		 xor	 eax, eax
  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5b		 pop	 rbx
  00038	c3		 ret	 0
$LN1@proxy_str:
  00039	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  0003d	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  00044	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00049	48 0f 4f d8	 cmovg	 rbx, rax
$LN6@proxy_str:
  0004d	48 8b cb	 mov	 rcx, rbx
  00050	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00054	5b		 pop	 rbx
  00055	e9 00 00 00 00	 jmp	 PyObject_Str
proxy_str ENDP
_TEXT	ENDS
EXTRN	PyEval_CallObjectWithKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_call DD imagerel proxy_call
	DD	imagerel proxy_call+237
	DD	imagerel $unwind$proxy_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_call DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0c016321aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_call
_TEXT	SEGMENT
proxy$ = 48
v$ = 56
w$ = 64
proxy_call PROC						; COMDAT

; 457  : WRAP_TERNARY(proxy_call, PyEval_CallObjectWithKeywords)

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001a	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0001e	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:_PyWeakref_ProxyType
  00025	49 8b d8	 mov	 rbx, r8
  00028	48 8b fa	 mov	 rdi, rdx
  0002b	48 8b f1	 mov	 rsi, rcx
  0002e	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_PyWeakref_CallableProxyType
  00035	49 3b c4	 cmp	 rax, r12
  00038	74 05		 je	 SHORT $LN9@proxy_call
  0003a	48 3b c5	 cmp	 rax, rbp
  0003d	75 24		 jne	 SHORT $LN13@proxy_call
$LN9@proxy_call:
  0003f	e8 00 00 00 00	 call	 proxy_checkref
  00044	85 c0		 test	 eax, eax
  00046	75 07		 jne	 SHORT $LN8@proxy_call
$LN19@proxy_call:
  00048	33 c0		 xor	 eax, eax
  0004a	e9 83 00 00 00	 jmp	 $LN11@proxy_call
$LN8@proxy_call:
  0004f	48 8b 46 60	 mov	 rax, QWORD PTR [rsi+96]
  00053	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_Py_NoneStruct
  0005a	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0005f	48 0f 4f f0	 cmovg	 rsi, rax
$LN13@proxy_call:
  00063	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00067	49 3b c4	 cmp	 rax, r12
  0006a	74 05		 je	 SHORT $LN6@proxy_call
  0006c	48 3b c5	 cmp	 rax, rbp
  0006f	75 20		 jne	 SHORT $LN15@proxy_call
$LN6@proxy_call:
  00071	48 8b cf	 mov	 rcx, rdi
  00074	e8 00 00 00 00	 call	 proxy_checkref
  00079	85 c0		 test	 eax, eax
  0007b	74 cb		 je	 SHORT $LN19@proxy_call
  0007d	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00081	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  00088	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0008d	48 0f 4f f8	 cmovg	 rdi, rax
$LN15@proxy_call:
  00091	48 85 db	 test	 rbx, rbx
  00094	74 2e		 je	 SHORT $LN17@proxy_call
  00096	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0009a	49 3b c4	 cmp	 rax, r12
  0009d	74 05		 je	 SHORT $LN2@proxy_call
  0009f	48 3b c5	 cmp	 rax, rbp
  000a2	75 20		 jne	 SHORT $LN17@proxy_call
$LN2@proxy_call:
  000a4	48 8b cb	 mov	 rcx, rbx
  000a7	e8 00 00 00 00	 call	 proxy_checkref
  000ac	85 c0		 test	 eax, eax
  000ae	74 98		 je	 SHORT $LN19@proxy_call
  000b0	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  000b4	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  000bb	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000c0	48 0f 4f d8	 cmovg	 rbx, rax
$LN17@proxy_call:
  000c4	4c 8b c3	 mov	 r8, rbx
  000c7	48 8b d7	 mov	 rdx, rdi
  000ca	48 8b ce	 mov	 rcx, rsi
  000cd	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords
$LN11@proxy_call:
  000d2	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000d7	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000dc	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000e1	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  000e6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ea	41 5c		 pop	 r12
  000ec	c3		 ret	 0
proxy_call ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@CMOAABP@?$DMweakproxy?5at?5?$CFp?5to?5?$CFs?5at?5?$CFp?$DO?$AA@ ; `string'
;	COMDAT ??_C@_0BO@CMOAABP@?$DMweakproxy?5at?5?$CFp?5to?5?$CFs?5at?5?$CFp?$DO?$AA@
CONST	SEGMENT
??_C@_0BO@CMOAABP@?$DMweakproxy?5at?5?$CFp?5to?5?$CFs?5at?5?$CFp?$DO?$AA@ DB '<'
	DB	'weakproxy at %p to %s at %p>', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT proxy_repr
_TEXT	SEGMENT
proxy$ = 8
proxy_repr PROC						; COMDAT

; 462  :     return PyUnicode_FromFormat(
; 463  :         "<weakproxy at %p to %s at %p>",
; 464  :         proxy,
; 465  :         Py_TYPE(PyWeakref_GET_OBJECT(proxy))->tp_name,
; 466  :         PyWeakref_GET_OBJECT(proxy));

  00000	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00004	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  0000b	48 8b 42 50	 mov	 rax, QWORD PTR [rdx+80]
  0000f	4d 8b c8	 mov	 r9, r8
  00012	48 85 c0	 test	 rax, rax
  00015	4c 0f 4f c2	 cmovg	 r8, rdx
  00019	4c 0f 4f ca	 cmovg	 r9, rdx
  0001d	48 8b d1	 mov	 rdx, rcx
  00020	4d 8b 40 58	 mov	 r8, QWORD PTR [r8+88]
  00024	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@CMOAABP@?$DMweakproxy?5at?5?$CFp?5to?5?$CFs?5at?5?$CFp?$DO?$AA@
  0002b	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]

; 467  : }

  0002f	e9 00 00 00 00	 jmp	 PyUnicode_FromFormat
proxy_repr ENDP
_TEXT	ENDS
EXTRN	PyObject_SetAttr:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_setattr DD imagerel proxy_setattr
	DD	imagerel proxy_setattr+98
	DD	imagerel $unwind$proxy_setattr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_setattr DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_setattr
_TEXT	SEGMENT
proxy$ = 48
name$ = 56
value$ = 64
proxy_setattr PROC					; COMDAT

; 472  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 473  :     if (!proxy_checkref(proxy))

  00018	e8 00 00 00 00	 call	 proxy_checkref
  0001d	85 c0		 test	 eax, eax
  0001f	75 13		 jne	 SHORT $LN1@proxy_seta

; 474  :         return -1;

  00021	83 c8 ff	 or	 eax, -1

; 476  : }

  00024	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00029	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0002e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00032	5f		 pop	 rdi
  00033	c3		 ret	 0
$LN1@proxy_seta:

; 475  :     return PyObject_SetAttr(PyWeakref_GET_OBJECT(proxy), name, value);

  00034	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0003f	4c 8b c7	 mov	 r8, rdi
  00042	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00047	48 8b d6	 mov	 rdx, rsi
  0004a	48 0f 4f c8	 cmovg	 rcx, rax

; 476  : }

  0004e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00053	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00058	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005c	5f		 pop	 rdi
  0005d	e9 00 00 00 00	 jmp	 PyObject_SetAttr
proxy_setattr ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_richcompare DD imagerel proxy_richcompare
	DD	imagerel proxy_richcompare+183
	DD	imagerel $unwind$proxy_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_richcompare DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0c016321aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_richcompare
_TEXT	SEGMENT
proxy$ = 48
v$ = 56
op$ = 64
proxy_richcompare PROC					; COMDAT

; 480  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 481  :     UNWRAP(proxy);

  0001a	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0001e	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:_PyWeakref_ProxyType
  00025	41 8b f0	 mov	 esi, r8d
  00028	48 8b da	 mov	 rbx, rdx
  0002b	48 8b f9	 mov	 rdi, rcx
  0002e	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_PyWeakref_CallableProxyType
  00035	49 3b c4	 cmp	 rax, r12
  00038	74 05		 je	 SHORT $LN5@proxy_rich
  0003a	48 3b c5	 cmp	 rax, rbp
  0003d	75 21		 jne	 SHORT $LN9@proxy_rich
$LN5@proxy_rich:
  0003f	e8 00 00 00 00	 call	 proxy_checkref
  00044	85 c0		 test	 eax, eax
  00046	75 04		 jne	 SHORT $LN4@proxy_rich
$LN13@proxy_rich:
  00048	33 c0		 xor	 eax, eax
  0004a	eb 50		 jmp	 SHORT $LN7@proxy_rich
$LN4@proxy_rich:
  0004c	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00050	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  00057	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0005c	48 0f 4f f8	 cmovg	 rdi, rax
$LN9@proxy_rich:

; 482  :     UNWRAP(v);

  00060	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00064	49 3b c4	 cmp	 rax, r12
  00067	74 05		 je	 SHORT $LN2@proxy_rich
  00069	48 3b c5	 cmp	 rax, rbp
  0006c	75 20		 jne	 SHORT $LN11@proxy_rich
$LN2@proxy_rich:
  0006e	48 8b cb	 mov	 rcx, rbx
  00071	e8 00 00 00 00	 call	 proxy_checkref
  00076	85 c0		 test	 eax, eax
  00078	74 ce		 je	 SHORT $LN13@proxy_rich
  0007a	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  0007e	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  00085	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0008a	48 0f 4f d8	 cmovg	 rbx, rax
$LN11@proxy_rich:

; 483  :     return PyObject_RichCompare(proxy, v, op);

  0008e	44 8b c6	 mov	 r8d, esi
  00091	48 8b d3	 mov	 rdx, rbx
  00094	48 8b cf	 mov	 rcx, rdi
  00097	e8 00 00 00 00	 call	 PyObject_RichCompare
$LN7@proxy_rich:

; 484  : }

  0009c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a1	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000a6	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000ab	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  000b0	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b4	41 5c		 pop	 r12
  000b6	c3		 ret	 0
proxy_richcompare ENDP
_TEXT	ENDS
EXTRN	PyNumber_Add:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_add DD imagerel proxy_add
	DD	imagerel proxy_add+165
	DD	imagerel $unwind$proxy_add
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_add DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_add
_TEXT	SEGMENT
x$ = 48
y$ = 56
proxy_add PROC						; COMDAT

; 487  : WRAP_BINARY(proxy_add, PyNumber_Add)

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00018	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_PyWeakref_ProxyType
  0001f	48 8b da	 mov	 rbx, rdx
  00022	48 8b f9	 mov	 rdi, rcx
  00025	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_PyWeakref_CallableProxyType
  0002c	48 3b c5	 cmp	 rax, rbp
  0002f	74 05		 je	 SHORT $LN5@proxy_add
  00031	48 3b c6	 cmp	 rax, rsi
  00034	75 21		 jne	 SHORT $LN9@proxy_add
$LN5@proxy_add:
  00036	e8 00 00 00 00	 call	 proxy_checkref
  0003b	85 c0		 test	 eax, eax
  0003d	75 04		 jne	 SHORT $LN4@proxy_add
$LN13@proxy_add:
  0003f	33 c0		 xor	 eax, eax
  00041	eb 4d		 jmp	 SHORT $LN7@proxy_add
$LN4@proxy_add:
  00043	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00047	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  0004e	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00053	48 0f 4f f8	 cmovg	 rdi, rax
$LN9@proxy_add:
  00057	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0005b	48 3b c5	 cmp	 rax, rbp
  0005e	74 05		 je	 SHORT $LN2@proxy_add
  00060	48 3b c6	 cmp	 rax, rsi
  00063	75 20		 jne	 SHORT $LN11@proxy_add
$LN2@proxy_add:
  00065	48 8b cb	 mov	 rcx, rbx
  00068	e8 00 00 00 00	 call	 proxy_checkref
  0006d	85 c0		 test	 eax, eax
  0006f	74 ce		 je	 SHORT $LN13@proxy_add
  00071	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00075	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0007c	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00081	48 0f 4f d8	 cmovg	 rbx, rax
$LN11@proxy_add:
  00085	48 8b d3	 mov	 rdx, rbx
  00088	48 8b cf	 mov	 rcx, rdi
  0008b	e8 00 00 00 00	 call	 PyNumber_Add
$LN7@proxy_add:
  00090	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00095	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0009a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a3	5f		 pop	 rdi
  000a4	c3		 ret	 0
proxy_add ENDP
_TEXT	ENDS
EXTRN	PyNumber_Subtract:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_sub DD imagerel proxy_sub
	DD	imagerel proxy_sub+165
	DD	imagerel $unwind$proxy_sub
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_sub DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_sub
_TEXT	SEGMENT
x$ = 48
y$ = 56
proxy_sub PROC						; COMDAT

; 488  : WRAP_BINARY(proxy_sub, PyNumber_Subtract)

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00018	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_PyWeakref_ProxyType
  0001f	48 8b da	 mov	 rbx, rdx
  00022	48 8b f9	 mov	 rdi, rcx
  00025	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_PyWeakref_CallableProxyType
  0002c	48 3b c5	 cmp	 rax, rbp
  0002f	74 05		 je	 SHORT $LN5@proxy_sub
  00031	48 3b c6	 cmp	 rax, rsi
  00034	75 21		 jne	 SHORT $LN9@proxy_sub
$LN5@proxy_sub:
  00036	e8 00 00 00 00	 call	 proxy_checkref
  0003b	85 c0		 test	 eax, eax
  0003d	75 04		 jne	 SHORT $LN4@proxy_sub
$LN13@proxy_sub:
  0003f	33 c0		 xor	 eax, eax
  00041	eb 4d		 jmp	 SHORT $LN7@proxy_sub
$LN4@proxy_sub:
  00043	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00047	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  0004e	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00053	48 0f 4f f8	 cmovg	 rdi, rax
$LN9@proxy_sub:
  00057	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0005b	48 3b c5	 cmp	 rax, rbp
  0005e	74 05		 je	 SHORT $LN2@proxy_sub
  00060	48 3b c6	 cmp	 rax, rsi
  00063	75 20		 jne	 SHORT $LN11@proxy_sub
$LN2@proxy_sub:
  00065	48 8b cb	 mov	 rcx, rbx
  00068	e8 00 00 00 00	 call	 proxy_checkref
  0006d	85 c0		 test	 eax, eax
  0006f	74 ce		 je	 SHORT $LN13@proxy_sub
  00071	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00075	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0007c	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00081	48 0f 4f d8	 cmovg	 rbx, rax
$LN11@proxy_sub:
  00085	48 8b d3	 mov	 rdx, rbx
  00088	48 8b cf	 mov	 rcx, rdi
  0008b	e8 00 00 00 00	 call	 PyNumber_Subtract
$LN7@proxy_sub:
  00090	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00095	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0009a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a3	5f		 pop	 rdi
  000a4	c3		 ret	 0
proxy_sub ENDP
_TEXT	ENDS
EXTRN	PyNumber_Multiply:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_mul DD imagerel proxy_mul
	DD	imagerel proxy_mul+165
	DD	imagerel $unwind$proxy_mul
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_mul DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_mul
_TEXT	SEGMENT
x$ = 48
y$ = 56
proxy_mul PROC						; COMDAT

; 489  : WRAP_BINARY(proxy_mul, PyNumber_Multiply)

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00018	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_PyWeakref_ProxyType
  0001f	48 8b da	 mov	 rbx, rdx
  00022	48 8b f9	 mov	 rdi, rcx
  00025	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_PyWeakref_CallableProxyType
  0002c	48 3b c5	 cmp	 rax, rbp
  0002f	74 05		 je	 SHORT $LN5@proxy_mul
  00031	48 3b c6	 cmp	 rax, rsi
  00034	75 21		 jne	 SHORT $LN9@proxy_mul
$LN5@proxy_mul:
  00036	e8 00 00 00 00	 call	 proxy_checkref
  0003b	85 c0		 test	 eax, eax
  0003d	75 04		 jne	 SHORT $LN4@proxy_mul
$LN13@proxy_mul:
  0003f	33 c0		 xor	 eax, eax
  00041	eb 4d		 jmp	 SHORT $LN7@proxy_mul
$LN4@proxy_mul:
  00043	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00047	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  0004e	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00053	48 0f 4f f8	 cmovg	 rdi, rax
$LN9@proxy_mul:
  00057	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0005b	48 3b c5	 cmp	 rax, rbp
  0005e	74 05		 je	 SHORT $LN2@proxy_mul
  00060	48 3b c6	 cmp	 rax, rsi
  00063	75 20		 jne	 SHORT $LN11@proxy_mul
$LN2@proxy_mul:
  00065	48 8b cb	 mov	 rcx, rbx
  00068	e8 00 00 00 00	 call	 proxy_checkref
  0006d	85 c0		 test	 eax, eax
  0006f	74 ce		 je	 SHORT $LN13@proxy_mul
  00071	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00075	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0007c	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00081	48 0f 4f d8	 cmovg	 rbx, rax
$LN11@proxy_mul:
  00085	48 8b d3	 mov	 rdx, rbx
  00088	48 8b cf	 mov	 rcx, rdi
  0008b	e8 00 00 00 00	 call	 PyNumber_Multiply
$LN7@proxy_mul:
  00090	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00095	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0009a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a3	5f		 pop	 rdi
  000a4	c3		 ret	 0
proxy_mul ENDP
_TEXT	ENDS
EXTRN	PyNumber_FloorDivide:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_floor_div DD imagerel proxy_floor_div
	DD	imagerel proxy_floor_div+165
	DD	imagerel $unwind$proxy_floor_div
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_floor_div DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_floor_div
_TEXT	SEGMENT
x$ = 48
y$ = 56
proxy_floor_div PROC					; COMDAT

; 490  : WRAP_BINARY(proxy_floor_div, PyNumber_FloorDivide)

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00018	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_PyWeakref_ProxyType
  0001f	48 8b da	 mov	 rbx, rdx
  00022	48 8b f9	 mov	 rdi, rcx
  00025	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_PyWeakref_CallableProxyType
  0002c	48 3b c5	 cmp	 rax, rbp
  0002f	74 05		 je	 SHORT $LN5@proxy_floo
  00031	48 3b c6	 cmp	 rax, rsi
  00034	75 21		 jne	 SHORT $LN9@proxy_floo
$LN5@proxy_floo:
  00036	e8 00 00 00 00	 call	 proxy_checkref
  0003b	85 c0		 test	 eax, eax
  0003d	75 04		 jne	 SHORT $LN4@proxy_floo
$LN13@proxy_floo:
  0003f	33 c0		 xor	 eax, eax
  00041	eb 4d		 jmp	 SHORT $LN7@proxy_floo
$LN4@proxy_floo:
  00043	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00047	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  0004e	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00053	48 0f 4f f8	 cmovg	 rdi, rax
$LN9@proxy_floo:
  00057	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0005b	48 3b c5	 cmp	 rax, rbp
  0005e	74 05		 je	 SHORT $LN2@proxy_floo
  00060	48 3b c6	 cmp	 rax, rsi
  00063	75 20		 jne	 SHORT $LN11@proxy_floo
$LN2@proxy_floo:
  00065	48 8b cb	 mov	 rcx, rbx
  00068	e8 00 00 00 00	 call	 proxy_checkref
  0006d	85 c0		 test	 eax, eax
  0006f	74 ce		 je	 SHORT $LN13@proxy_floo
  00071	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00075	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0007c	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00081	48 0f 4f d8	 cmovg	 rbx, rax
$LN11@proxy_floo:
  00085	48 8b d3	 mov	 rdx, rbx
  00088	48 8b cf	 mov	 rcx, rdi
  0008b	e8 00 00 00 00	 call	 PyNumber_FloorDivide
$LN7@proxy_floo:
  00090	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00095	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0009a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a3	5f		 pop	 rdi
  000a4	c3		 ret	 0
proxy_floor_div ENDP
_TEXT	ENDS
EXTRN	PyNumber_TrueDivide:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_true_div DD imagerel proxy_true_div
	DD	imagerel proxy_true_div+165
	DD	imagerel $unwind$proxy_true_div
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_true_div DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_true_div
_TEXT	SEGMENT
x$ = 48
y$ = 56
proxy_true_div PROC					; COMDAT

; 491  : WRAP_BINARY(proxy_true_div, PyNumber_TrueDivide)

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00018	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_PyWeakref_ProxyType
  0001f	48 8b da	 mov	 rbx, rdx
  00022	48 8b f9	 mov	 rdi, rcx
  00025	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_PyWeakref_CallableProxyType
  0002c	48 3b c5	 cmp	 rax, rbp
  0002f	74 05		 je	 SHORT $LN5@proxy_true
  00031	48 3b c6	 cmp	 rax, rsi
  00034	75 21		 jne	 SHORT $LN9@proxy_true
$LN5@proxy_true:
  00036	e8 00 00 00 00	 call	 proxy_checkref
  0003b	85 c0		 test	 eax, eax
  0003d	75 04		 jne	 SHORT $LN4@proxy_true
$LN13@proxy_true:
  0003f	33 c0		 xor	 eax, eax
  00041	eb 4d		 jmp	 SHORT $LN7@proxy_true
$LN4@proxy_true:
  00043	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00047	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  0004e	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00053	48 0f 4f f8	 cmovg	 rdi, rax
$LN9@proxy_true:
  00057	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0005b	48 3b c5	 cmp	 rax, rbp
  0005e	74 05		 je	 SHORT $LN2@proxy_true
  00060	48 3b c6	 cmp	 rax, rsi
  00063	75 20		 jne	 SHORT $LN11@proxy_true
$LN2@proxy_true:
  00065	48 8b cb	 mov	 rcx, rbx
  00068	e8 00 00 00 00	 call	 proxy_checkref
  0006d	85 c0		 test	 eax, eax
  0006f	74 ce		 je	 SHORT $LN13@proxy_true
  00071	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00075	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0007c	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00081	48 0f 4f d8	 cmovg	 rbx, rax
$LN11@proxy_true:
  00085	48 8b d3	 mov	 rdx, rbx
  00088	48 8b cf	 mov	 rcx, rdi
  0008b	e8 00 00 00 00	 call	 PyNumber_TrueDivide
$LN7@proxy_true:
  00090	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00095	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0009a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a3	5f		 pop	 rdi
  000a4	c3		 ret	 0
proxy_true_div ENDP
_TEXT	ENDS
EXTRN	PyNumber_Remainder:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_mod DD imagerel proxy_mod
	DD	imagerel proxy_mod+165
	DD	imagerel $unwind$proxy_mod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_mod DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_mod
_TEXT	SEGMENT
x$ = 48
y$ = 56
proxy_mod PROC						; COMDAT

; 492  : WRAP_BINARY(proxy_mod, PyNumber_Remainder)

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00018	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_PyWeakref_ProxyType
  0001f	48 8b da	 mov	 rbx, rdx
  00022	48 8b f9	 mov	 rdi, rcx
  00025	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_PyWeakref_CallableProxyType
  0002c	48 3b c5	 cmp	 rax, rbp
  0002f	74 05		 je	 SHORT $LN5@proxy_mod
  00031	48 3b c6	 cmp	 rax, rsi
  00034	75 21		 jne	 SHORT $LN9@proxy_mod
$LN5@proxy_mod:
  00036	e8 00 00 00 00	 call	 proxy_checkref
  0003b	85 c0		 test	 eax, eax
  0003d	75 04		 jne	 SHORT $LN4@proxy_mod
$LN13@proxy_mod:
  0003f	33 c0		 xor	 eax, eax
  00041	eb 4d		 jmp	 SHORT $LN7@proxy_mod
$LN4@proxy_mod:
  00043	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00047	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  0004e	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00053	48 0f 4f f8	 cmovg	 rdi, rax
$LN9@proxy_mod:
  00057	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0005b	48 3b c5	 cmp	 rax, rbp
  0005e	74 05		 je	 SHORT $LN2@proxy_mod
  00060	48 3b c6	 cmp	 rax, rsi
  00063	75 20		 jne	 SHORT $LN11@proxy_mod
$LN2@proxy_mod:
  00065	48 8b cb	 mov	 rcx, rbx
  00068	e8 00 00 00 00	 call	 proxy_checkref
  0006d	85 c0		 test	 eax, eax
  0006f	74 ce		 je	 SHORT $LN13@proxy_mod
  00071	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00075	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0007c	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00081	48 0f 4f d8	 cmovg	 rbx, rax
$LN11@proxy_mod:
  00085	48 8b d3	 mov	 rdx, rbx
  00088	48 8b cf	 mov	 rcx, rdi
  0008b	e8 00 00 00 00	 call	 PyNumber_Remainder
$LN7@proxy_mod:
  00090	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00095	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0009a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a3	5f		 pop	 rdi
  000a4	c3		 ret	 0
proxy_mod ENDP
_TEXT	ENDS
EXTRN	PyNumber_Divmod:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_divmod DD imagerel proxy_divmod
	DD	imagerel proxy_divmod+165
	DD	imagerel $unwind$proxy_divmod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_divmod DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_divmod
_TEXT	SEGMENT
x$ = 48
y$ = 56
proxy_divmod PROC					; COMDAT

; 493  : WRAP_BINARY(proxy_divmod, PyNumber_Divmod)

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00018	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_PyWeakref_ProxyType
  0001f	48 8b da	 mov	 rbx, rdx
  00022	48 8b f9	 mov	 rdi, rcx
  00025	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_PyWeakref_CallableProxyType
  0002c	48 3b c5	 cmp	 rax, rbp
  0002f	74 05		 je	 SHORT $LN5@proxy_divm
  00031	48 3b c6	 cmp	 rax, rsi
  00034	75 21		 jne	 SHORT $LN9@proxy_divm
$LN5@proxy_divm:
  00036	e8 00 00 00 00	 call	 proxy_checkref
  0003b	85 c0		 test	 eax, eax
  0003d	75 04		 jne	 SHORT $LN4@proxy_divm
$LN13@proxy_divm:
  0003f	33 c0		 xor	 eax, eax
  00041	eb 4d		 jmp	 SHORT $LN7@proxy_divm
$LN4@proxy_divm:
  00043	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00047	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  0004e	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00053	48 0f 4f f8	 cmovg	 rdi, rax
$LN9@proxy_divm:
  00057	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0005b	48 3b c5	 cmp	 rax, rbp
  0005e	74 05		 je	 SHORT $LN2@proxy_divm
  00060	48 3b c6	 cmp	 rax, rsi
  00063	75 20		 jne	 SHORT $LN11@proxy_divm
$LN2@proxy_divm:
  00065	48 8b cb	 mov	 rcx, rbx
  00068	e8 00 00 00 00	 call	 proxy_checkref
  0006d	85 c0		 test	 eax, eax
  0006f	74 ce		 je	 SHORT $LN13@proxy_divm
  00071	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00075	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0007c	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00081	48 0f 4f d8	 cmovg	 rbx, rax
$LN11@proxy_divm:
  00085	48 8b d3	 mov	 rdx, rbx
  00088	48 8b cf	 mov	 rcx, rdi
  0008b	e8 00 00 00 00	 call	 PyNumber_Divmod
$LN7@proxy_divm:
  00090	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00095	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0009a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a3	5f		 pop	 rdi
  000a4	c3		 ret	 0
proxy_divmod ENDP
_TEXT	ENDS
EXTRN	PyNumber_Power:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_pow DD imagerel proxy_pow
	DD	imagerel proxy_pow+237
	DD	imagerel $unwind$proxy_pow
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_pow DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0c016321aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_pow
_TEXT	SEGMENT
proxy$ = 48
v$ = 56
w$ = 64
proxy_pow PROC						; COMDAT

; 494  : WRAP_TERNARY(proxy_pow, PyNumber_Power)

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001a	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0001e	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:_PyWeakref_ProxyType
  00025	49 8b d8	 mov	 rbx, r8
  00028	48 8b fa	 mov	 rdi, rdx
  0002b	48 8b f1	 mov	 rsi, rcx
  0002e	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_PyWeakref_CallableProxyType
  00035	49 3b c4	 cmp	 rax, r12
  00038	74 05		 je	 SHORT $LN9@proxy_pow
  0003a	48 3b c5	 cmp	 rax, rbp
  0003d	75 24		 jne	 SHORT $LN13@proxy_pow
$LN9@proxy_pow:
  0003f	e8 00 00 00 00	 call	 proxy_checkref
  00044	85 c0		 test	 eax, eax
  00046	75 07		 jne	 SHORT $LN8@proxy_pow
$LN19@proxy_pow:
  00048	33 c0		 xor	 eax, eax
  0004a	e9 83 00 00 00	 jmp	 $LN11@proxy_pow
$LN8@proxy_pow:
  0004f	48 8b 46 60	 mov	 rax, QWORD PTR [rsi+96]
  00053	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_Py_NoneStruct
  0005a	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0005f	48 0f 4f f0	 cmovg	 rsi, rax
$LN13@proxy_pow:
  00063	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00067	49 3b c4	 cmp	 rax, r12
  0006a	74 05		 je	 SHORT $LN6@proxy_pow
  0006c	48 3b c5	 cmp	 rax, rbp
  0006f	75 20		 jne	 SHORT $LN15@proxy_pow
$LN6@proxy_pow:
  00071	48 8b cf	 mov	 rcx, rdi
  00074	e8 00 00 00 00	 call	 proxy_checkref
  00079	85 c0		 test	 eax, eax
  0007b	74 cb		 je	 SHORT $LN19@proxy_pow
  0007d	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00081	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  00088	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0008d	48 0f 4f f8	 cmovg	 rdi, rax
$LN15@proxy_pow:
  00091	48 85 db	 test	 rbx, rbx
  00094	74 2e		 je	 SHORT $LN17@proxy_pow
  00096	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0009a	49 3b c4	 cmp	 rax, r12
  0009d	74 05		 je	 SHORT $LN2@proxy_pow
  0009f	48 3b c5	 cmp	 rax, rbp
  000a2	75 20		 jne	 SHORT $LN17@proxy_pow
$LN2@proxy_pow:
  000a4	48 8b cb	 mov	 rcx, rbx
  000a7	e8 00 00 00 00	 call	 proxy_checkref
  000ac	85 c0		 test	 eax, eax
  000ae	74 98		 je	 SHORT $LN19@proxy_pow
  000b0	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  000b4	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  000bb	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000c0	48 0f 4f d8	 cmovg	 rbx, rax
$LN17@proxy_pow:
  000c4	4c 8b c3	 mov	 r8, rbx
  000c7	48 8b d7	 mov	 rdx, rdi
  000ca	48 8b ce	 mov	 rcx, rsi
  000cd	e8 00 00 00 00	 call	 PyNumber_Power
$LN11@proxy_pow:
  000d2	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000d7	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000dc	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000e1	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  000e6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ea	41 5c		 pop	 r12
  000ec	c3		 ret	 0
proxy_pow ENDP
_TEXT	ENDS
EXTRN	PyNumber_Negative:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_neg DD imagerel proxy_neg
	DD	imagerel proxy_neg+90
	DD	imagerel $unwind$proxy_neg
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_neg DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_neg
_TEXT	SEGMENT
proxy$ = 48
proxy_neg PROC						; COMDAT

; 495  : WRAP_UNARY(proxy_neg, PyNumber_Negative)

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyWeakref_ProxyType
  00014	48 3b c1	 cmp	 rax, rcx
  00017	74 0c		 je	 SHORT $LN2@proxy_neg
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyWeakref_CallableProxyType
  00020	48 3b c1	 cmp	 rax, rcx
  00023	75 28		 jne	 SHORT $LN6@proxy_neg
$LN2@proxy_neg:
  00025	48 8b cb	 mov	 rcx, rbx
  00028	e8 00 00 00 00	 call	 proxy_checkref
  0002d	85 c0		 test	 eax, eax
  0002f	75 08		 jne	 SHORT $LN1@proxy_neg
  00031	33 c0		 xor	 eax, eax
  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5b		 pop	 rbx
  00038	c3		 ret	 0
$LN1@proxy_neg:
  00039	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  0003d	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  00044	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00049	48 0f 4f d8	 cmovg	 rbx, rax
$LN6@proxy_neg:
  0004d	48 8b cb	 mov	 rcx, rbx
  00050	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00054	5b		 pop	 rbx
  00055	e9 00 00 00 00	 jmp	 PyNumber_Negative
proxy_neg ENDP
_TEXT	ENDS
EXTRN	PyNumber_Positive:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_pos DD imagerel proxy_pos
	DD	imagerel proxy_pos+90
	DD	imagerel $unwind$proxy_pos
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_pos DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_pos
_TEXT	SEGMENT
proxy$ = 48
proxy_pos PROC						; COMDAT

; 496  : WRAP_UNARY(proxy_pos, PyNumber_Positive)

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyWeakref_ProxyType
  00014	48 3b c1	 cmp	 rax, rcx
  00017	74 0c		 je	 SHORT $LN2@proxy_pos
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyWeakref_CallableProxyType
  00020	48 3b c1	 cmp	 rax, rcx
  00023	75 28		 jne	 SHORT $LN6@proxy_pos
$LN2@proxy_pos:
  00025	48 8b cb	 mov	 rcx, rbx
  00028	e8 00 00 00 00	 call	 proxy_checkref
  0002d	85 c0		 test	 eax, eax
  0002f	75 08		 jne	 SHORT $LN1@proxy_pos
  00031	33 c0		 xor	 eax, eax
  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5b		 pop	 rbx
  00038	c3		 ret	 0
$LN1@proxy_pos:
  00039	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  0003d	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  00044	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00049	48 0f 4f d8	 cmovg	 rbx, rax
$LN6@proxy_pos:
  0004d	48 8b cb	 mov	 rcx, rbx
  00050	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00054	5b		 pop	 rbx
  00055	e9 00 00 00 00	 jmp	 PyNumber_Positive
proxy_pos ENDP
_TEXT	ENDS
EXTRN	PyNumber_Absolute:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_abs DD imagerel proxy_abs
	DD	imagerel proxy_abs+90
	DD	imagerel $unwind$proxy_abs
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_abs DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_abs
_TEXT	SEGMENT
proxy$ = 48
proxy_abs PROC						; COMDAT

; 497  : WRAP_UNARY(proxy_abs, PyNumber_Absolute)

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyWeakref_ProxyType
  00014	48 3b c1	 cmp	 rax, rcx
  00017	74 0c		 je	 SHORT $LN2@proxy_abs
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyWeakref_CallableProxyType
  00020	48 3b c1	 cmp	 rax, rcx
  00023	75 28		 jne	 SHORT $LN6@proxy_abs
$LN2@proxy_abs:
  00025	48 8b cb	 mov	 rcx, rbx
  00028	e8 00 00 00 00	 call	 proxy_checkref
  0002d	85 c0		 test	 eax, eax
  0002f	75 08		 jne	 SHORT $LN1@proxy_abs
  00031	33 c0		 xor	 eax, eax
  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5b		 pop	 rbx
  00038	c3		 ret	 0
$LN1@proxy_abs:
  00039	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  0003d	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  00044	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00049	48 0f 4f d8	 cmovg	 rbx, rax
$LN6@proxy_abs:
  0004d	48 8b cb	 mov	 rcx, rbx
  00050	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00054	5b		 pop	 rbx
  00055	e9 00 00 00 00	 jmp	 PyNumber_Absolute
proxy_abs ENDP
_TEXT	ENDS
EXTRN	PyNumber_Invert:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_invert DD imagerel proxy_invert
	DD	imagerel proxy_invert+90
	DD	imagerel $unwind$proxy_invert
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_invert DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_invert
_TEXT	SEGMENT
proxy$ = 48
proxy_invert PROC					; COMDAT

; 498  : WRAP_UNARY(proxy_invert, PyNumber_Invert)

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyWeakref_ProxyType
  00014	48 3b c1	 cmp	 rax, rcx
  00017	74 0c		 je	 SHORT $LN2@proxy_inve
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyWeakref_CallableProxyType
  00020	48 3b c1	 cmp	 rax, rcx
  00023	75 28		 jne	 SHORT $LN6@proxy_inve
$LN2@proxy_inve:
  00025	48 8b cb	 mov	 rcx, rbx
  00028	e8 00 00 00 00	 call	 proxy_checkref
  0002d	85 c0		 test	 eax, eax
  0002f	75 08		 jne	 SHORT $LN1@proxy_inve
  00031	33 c0		 xor	 eax, eax
  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5b		 pop	 rbx
  00038	c3		 ret	 0
$LN1@proxy_inve:
  00039	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  0003d	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  00044	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00049	48 0f 4f d8	 cmovg	 rbx, rax
$LN6@proxy_inve:
  0004d	48 8b cb	 mov	 rcx, rbx
  00050	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00054	5b		 pop	 rbx
  00055	e9 00 00 00 00	 jmp	 PyNumber_Invert
proxy_invert ENDP
_TEXT	ENDS
EXTRN	PyNumber_Lshift:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_lshift DD imagerel proxy_lshift
	DD	imagerel proxy_lshift+165
	DD	imagerel $unwind$proxy_lshift
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_lshift DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_lshift
_TEXT	SEGMENT
x$ = 48
y$ = 56
proxy_lshift PROC					; COMDAT

; 499  : WRAP_BINARY(proxy_lshift, PyNumber_Lshift)

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00018	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_PyWeakref_ProxyType
  0001f	48 8b da	 mov	 rbx, rdx
  00022	48 8b f9	 mov	 rdi, rcx
  00025	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_PyWeakref_CallableProxyType
  0002c	48 3b c5	 cmp	 rax, rbp
  0002f	74 05		 je	 SHORT $LN5@proxy_lshi
  00031	48 3b c6	 cmp	 rax, rsi
  00034	75 21		 jne	 SHORT $LN9@proxy_lshi
$LN5@proxy_lshi:
  00036	e8 00 00 00 00	 call	 proxy_checkref
  0003b	85 c0		 test	 eax, eax
  0003d	75 04		 jne	 SHORT $LN4@proxy_lshi
$LN13@proxy_lshi:
  0003f	33 c0		 xor	 eax, eax
  00041	eb 4d		 jmp	 SHORT $LN7@proxy_lshi
$LN4@proxy_lshi:
  00043	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00047	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  0004e	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00053	48 0f 4f f8	 cmovg	 rdi, rax
$LN9@proxy_lshi:
  00057	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0005b	48 3b c5	 cmp	 rax, rbp
  0005e	74 05		 je	 SHORT $LN2@proxy_lshi
  00060	48 3b c6	 cmp	 rax, rsi
  00063	75 20		 jne	 SHORT $LN11@proxy_lshi
$LN2@proxy_lshi:
  00065	48 8b cb	 mov	 rcx, rbx
  00068	e8 00 00 00 00	 call	 proxy_checkref
  0006d	85 c0		 test	 eax, eax
  0006f	74 ce		 je	 SHORT $LN13@proxy_lshi
  00071	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00075	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0007c	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00081	48 0f 4f d8	 cmovg	 rbx, rax
$LN11@proxy_lshi:
  00085	48 8b d3	 mov	 rdx, rbx
  00088	48 8b cf	 mov	 rcx, rdi
  0008b	e8 00 00 00 00	 call	 PyNumber_Lshift
$LN7@proxy_lshi:
  00090	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00095	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0009a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a3	5f		 pop	 rdi
  000a4	c3		 ret	 0
proxy_lshift ENDP
_TEXT	ENDS
EXTRN	PyNumber_Rshift:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_rshift DD imagerel proxy_rshift
	DD	imagerel proxy_rshift+165
	DD	imagerel $unwind$proxy_rshift
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_rshift DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_rshift
_TEXT	SEGMENT
x$ = 48
y$ = 56
proxy_rshift PROC					; COMDAT

; 500  : WRAP_BINARY(proxy_rshift, PyNumber_Rshift)

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00018	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_PyWeakref_ProxyType
  0001f	48 8b da	 mov	 rbx, rdx
  00022	48 8b f9	 mov	 rdi, rcx
  00025	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_PyWeakref_CallableProxyType
  0002c	48 3b c5	 cmp	 rax, rbp
  0002f	74 05		 je	 SHORT $LN5@proxy_rshi
  00031	48 3b c6	 cmp	 rax, rsi
  00034	75 21		 jne	 SHORT $LN9@proxy_rshi
$LN5@proxy_rshi:
  00036	e8 00 00 00 00	 call	 proxy_checkref
  0003b	85 c0		 test	 eax, eax
  0003d	75 04		 jne	 SHORT $LN4@proxy_rshi
$LN13@proxy_rshi:
  0003f	33 c0		 xor	 eax, eax
  00041	eb 4d		 jmp	 SHORT $LN7@proxy_rshi
$LN4@proxy_rshi:
  00043	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00047	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  0004e	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00053	48 0f 4f f8	 cmovg	 rdi, rax
$LN9@proxy_rshi:
  00057	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0005b	48 3b c5	 cmp	 rax, rbp
  0005e	74 05		 je	 SHORT $LN2@proxy_rshi
  00060	48 3b c6	 cmp	 rax, rsi
  00063	75 20		 jne	 SHORT $LN11@proxy_rshi
$LN2@proxy_rshi:
  00065	48 8b cb	 mov	 rcx, rbx
  00068	e8 00 00 00 00	 call	 proxy_checkref
  0006d	85 c0		 test	 eax, eax
  0006f	74 ce		 je	 SHORT $LN13@proxy_rshi
  00071	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00075	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0007c	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00081	48 0f 4f d8	 cmovg	 rbx, rax
$LN11@proxy_rshi:
  00085	48 8b d3	 mov	 rdx, rbx
  00088	48 8b cf	 mov	 rcx, rdi
  0008b	e8 00 00 00 00	 call	 PyNumber_Rshift
$LN7@proxy_rshi:
  00090	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00095	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0009a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a3	5f		 pop	 rdi
  000a4	c3		 ret	 0
proxy_rshift ENDP
_TEXT	ENDS
EXTRN	PyNumber_And:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_and DD imagerel proxy_and
	DD	imagerel proxy_and+165
	DD	imagerel $unwind$proxy_and
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_and DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_and
_TEXT	SEGMENT
x$ = 48
y$ = 56
proxy_and PROC						; COMDAT

; 501  : WRAP_BINARY(proxy_and, PyNumber_And)

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00018	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_PyWeakref_ProxyType
  0001f	48 8b da	 mov	 rbx, rdx
  00022	48 8b f9	 mov	 rdi, rcx
  00025	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_PyWeakref_CallableProxyType
  0002c	48 3b c5	 cmp	 rax, rbp
  0002f	74 05		 je	 SHORT $LN5@proxy_and
  00031	48 3b c6	 cmp	 rax, rsi
  00034	75 21		 jne	 SHORT $LN9@proxy_and
$LN5@proxy_and:
  00036	e8 00 00 00 00	 call	 proxy_checkref
  0003b	85 c0		 test	 eax, eax
  0003d	75 04		 jne	 SHORT $LN4@proxy_and
$LN13@proxy_and:
  0003f	33 c0		 xor	 eax, eax
  00041	eb 4d		 jmp	 SHORT $LN7@proxy_and
$LN4@proxy_and:
  00043	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00047	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  0004e	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00053	48 0f 4f f8	 cmovg	 rdi, rax
$LN9@proxy_and:
  00057	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0005b	48 3b c5	 cmp	 rax, rbp
  0005e	74 05		 je	 SHORT $LN2@proxy_and
  00060	48 3b c6	 cmp	 rax, rsi
  00063	75 20		 jne	 SHORT $LN11@proxy_and
$LN2@proxy_and:
  00065	48 8b cb	 mov	 rcx, rbx
  00068	e8 00 00 00 00	 call	 proxy_checkref
  0006d	85 c0		 test	 eax, eax
  0006f	74 ce		 je	 SHORT $LN13@proxy_and
  00071	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00075	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0007c	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00081	48 0f 4f d8	 cmovg	 rbx, rax
$LN11@proxy_and:
  00085	48 8b d3	 mov	 rdx, rbx
  00088	48 8b cf	 mov	 rcx, rdi
  0008b	e8 00 00 00 00	 call	 PyNumber_And
$LN7@proxy_and:
  00090	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00095	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0009a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a3	5f		 pop	 rdi
  000a4	c3		 ret	 0
proxy_and ENDP
_TEXT	ENDS
EXTRN	PyNumber_Xor:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_xor DD imagerel proxy_xor
	DD	imagerel proxy_xor+165
	DD	imagerel $unwind$proxy_xor
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_xor DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_xor
_TEXT	SEGMENT
x$ = 48
y$ = 56
proxy_xor PROC						; COMDAT

; 502  : WRAP_BINARY(proxy_xor, PyNumber_Xor)

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00018	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_PyWeakref_ProxyType
  0001f	48 8b da	 mov	 rbx, rdx
  00022	48 8b f9	 mov	 rdi, rcx
  00025	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_PyWeakref_CallableProxyType
  0002c	48 3b c5	 cmp	 rax, rbp
  0002f	74 05		 je	 SHORT $LN5@proxy_xor
  00031	48 3b c6	 cmp	 rax, rsi
  00034	75 21		 jne	 SHORT $LN9@proxy_xor
$LN5@proxy_xor:
  00036	e8 00 00 00 00	 call	 proxy_checkref
  0003b	85 c0		 test	 eax, eax
  0003d	75 04		 jne	 SHORT $LN4@proxy_xor
$LN13@proxy_xor:
  0003f	33 c0		 xor	 eax, eax
  00041	eb 4d		 jmp	 SHORT $LN7@proxy_xor
$LN4@proxy_xor:
  00043	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00047	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  0004e	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00053	48 0f 4f f8	 cmovg	 rdi, rax
$LN9@proxy_xor:
  00057	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0005b	48 3b c5	 cmp	 rax, rbp
  0005e	74 05		 je	 SHORT $LN2@proxy_xor
  00060	48 3b c6	 cmp	 rax, rsi
  00063	75 20		 jne	 SHORT $LN11@proxy_xor
$LN2@proxy_xor:
  00065	48 8b cb	 mov	 rcx, rbx
  00068	e8 00 00 00 00	 call	 proxy_checkref
  0006d	85 c0		 test	 eax, eax
  0006f	74 ce		 je	 SHORT $LN13@proxy_xor
  00071	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00075	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0007c	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00081	48 0f 4f d8	 cmovg	 rbx, rax
$LN11@proxy_xor:
  00085	48 8b d3	 mov	 rdx, rbx
  00088	48 8b cf	 mov	 rcx, rdi
  0008b	e8 00 00 00 00	 call	 PyNumber_Xor
$LN7@proxy_xor:
  00090	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00095	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0009a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a3	5f		 pop	 rdi
  000a4	c3		 ret	 0
proxy_xor ENDP
_TEXT	ENDS
EXTRN	PyNumber_Or:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_or DD imagerel proxy_or
	DD	imagerel proxy_or+165
	DD	imagerel $unwind$proxy_or
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_or DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_or
_TEXT	SEGMENT
x$ = 48
y$ = 56
proxy_or PROC						; COMDAT

; 503  : WRAP_BINARY(proxy_or, PyNumber_Or)

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00018	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_PyWeakref_ProxyType
  0001f	48 8b da	 mov	 rbx, rdx
  00022	48 8b f9	 mov	 rdi, rcx
  00025	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_PyWeakref_CallableProxyType
  0002c	48 3b c5	 cmp	 rax, rbp
  0002f	74 05		 je	 SHORT $LN5@proxy_or
  00031	48 3b c6	 cmp	 rax, rsi
  00034	75 21		 jne	 SHORT $LN9@proxy_or
$LN5@proxy_or:
  00036	e8 00 00 00 00	 call	 proxy_checkref
  0003b	85 c0		 test	 eax, eax
  0003d	75 04		 jne	 SHORT $LN4@proxy_or
$LN13@proxy_or:
  0003f	33 c0		 xor	 eax, eax
  00041	eb 4d		 jmp	 SHORT $LN7@proxy_or
$LN4@proxy_or:
  00043	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00047	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  0004e	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00053	48 0f 4f f8	 cmovg	 rdi, rax
$LN9@proxy_or:
  00057	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0005b	48 3b c5	 cmp	 rax, rbp
  0005e	74 05		 je	 SHORT $LN2@proxy_or
  00060	48 3b c6	 cmp	 rax, rsi
  00063	75 20		 jne	 SHORT $LN11@proxy_or
$LN2@proxy_or:
  00065	48 8b cb	 mov	 rcx, rbx
  00068	e8 00 00 00 00	 call	 proxy_checkref
  0006d	85 c0		 test	 eax, eax
  0006f	74 ce		 je	 SHORT $LN13@proxy_or
  00071	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00075	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0007c	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00081	48 0f 4f d8	 cmovg	 rbx, rax
$LN11@proxy_or:
  00085	48 8b d3	 mov	 rdx, rbx
  00088	48 8b cf	 mov	 rcx, rdi
  0008b	e8 00 00 00 00	 call	 PyNumber_Or
$LN7@proxy_or:
  00090	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00095	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0009a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a3	5f		 pop	 rdi
  000a4	c3		 ret	 0
proxy_or ENDP
_TEXT	ENDS
EXTRN	PyNumber_Long:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_int DD imagerel proxy_int
	DD	imagerel proxy_int+90
	DD	imagerel $unwind$proxy_int
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_int DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_int
_TEXT	SEGMENT
proxy$ = 48
proxy_int PROC						; COMDAT

; 504  : WRAP_UNARY(proxy_int, PyNumber_Long)

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyWeakref_ProxyType
  00014	48 3b c1	 cmp	 rax, rcx
  00017	74 0c		 je	 SHORT $LN2@proxy_int
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyWeakref_CallableProxyType
  00020	48 3b c1	 cmp	 rax, rcx
  00023	75 28		 jne	 SHORT $LN6@proxy_int
$LN2@proxy_int:
  00025	48 8b cb	 mov	 rcx, rbx
  00028	e8 00 00 00 00	 call	 proxy_checkref
  0002d	85 c0		 test	 eax, eax
  0002f	75 08		 jne	 SHORT $LN1@proxy_int
  00031	33 c0		 xor	 eax, eax
  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5b		 pop	 rbx
  00038	c3		 ret	 0
$LN1@proxy_int:
  00039	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  0003d	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  00044	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00049	48 0f 4f d8	 cmovg	 rbx, rax
$LN6@proxy_int:
  0004d	48 8b cb	 mov	 rcx, rbx
  00050	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00054	5b		 pop	 rbx
  00055	e9 00 00 00 00	 jmp	 PyNumber_Long
proxy_int ENDP
_TEXT	ENDS
EXTRN	PyNumber_Float:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_float DD imagerel proxy_float
	DD	imagerel proxy_float+90
	DD	imagerel $unwind$proxy_float
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_float DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_float
_TEXT	SEGMENT
proxy$ = 48
proxy_float PROC					; COMDAT

; 505  : WRAP_UNARY(proxy_float, PyNumber_Float)

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyWeakref_ProxyType
  00014	48 3b c1	 cmp	 rax, rcx
  00017	74 0c		 je	 SHORT $LN2@proxy_floa
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyWeakref_CallableProxyType
  00020	48 3b c1	 cmp	 rax, rcx
  00023	75 28		 jne	 SHORT $LN6@proxy_floa
$LN2@proxy_floa:
  00025	48 8b cb	 mov	 rcx, rbx
  00028	e8 00 00 00 00	 call	 proxy_checkref
  0002d	85 c0		 test	 eax, eax
  0002f	75 08		 jne	 SHORT $LN1@proxy_floa
  00031	33 c0		 xor	 eax, eax
  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5b		 pop	 rbx
  00038	c3		 ret	 0
$LN1@proxy_floa:
  00039	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  0003d	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  00044	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00049	48 0f 4f d8	 cmovg	 rbx, rax
$LN6@proxy_floa:
  0004d	48 8b cb	 mov	 rcx, rbx
  00050	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00054	5b		 pop	 rbx
  00055	e9 00 00 00 00	 jmp	 PyNumber_Float
proxy_float ENDP
_TEXT	ENDS
EXTRN	PyNumber_InPlaceAdd:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_iadd DD imagerel proxy_iadd
	DD	imagerel proxy_iadd+165
	DD	imagerel $unwind$proxy_iadd
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_iadd DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_iadd
_TEXT	SEGMENT
x$ = 48
y$ = 56
proxy_iadd PROC						; COMDAT

; 506  : WRAP_BINARY(proxy_iadd, PyNumber_InPlaceAdd)

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00018	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_PyWeakref_ProxyType
  0001f	48 8b da	 mov	 rbx, rdx
  00022	48 8b f9	 mov	 rdi, rcx
  00025	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_PyWeakref_CallableProxyType
  0002c	48 3b c5	 cmp	 rax, rbp
  0002f	74 05		 je	 SHORT $LN5@proxy_iadd
  00031	48 3b c6	 cmp	 rax, rsi
  00034	75 21		 jne	 SHORT $LN9@proxy_iadd
$LN5@proxy_iadd:
  00036	e8 00 00 00 00	 call	 proxy_checkref
  0003b	85 c0		 test	 eax, eax
  0003d	75 04		 jne	 SHORT $LN4@proxy_iadd
$LN13@proxy_iadd:
  0003f	33 c0		 xor	 eax, eax
  00041	eb 4d		 jmp	 SHORT $LN7@proxy_iadd
$LN4@proxy_iadd:
  00043	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00047	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  0004e	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00053	48 0f 4f f8	 cmovg	 rdi, rax
$LN9@proxy_iadd:
  00057	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0005b	48 3b c5	 cmp	 rax, rbp
  0005e	74 05		 je	 SHORT $LN2@proxy_iadd
  00060	48 3b c6	 cmp	 rax, rsi
  00063	75 20		 jne	 SHORT $LN11@proxy_iadd
$LN2@proxy_iadd:
  00065	48 8b cb	 mov	 rcx, rbx
  00068	e8 00 00 00 00	 call	 proxy_checkref
  0006d	85 c0		 test	 eax, eax
  0006f	74 ce		 je	 SHORT $LN13@proxy_iadd
  00071	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00075	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0007c	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00081	48 0f 4f d8	 cmovg	 rbx, rax
$LN11@proxy_iadd:
  00085	48 8b d3	 mov	 rdx, rbx
  00088	48 8b cf	 mov	 rcx, rdi
  0008b	e8 00 00 00 00	 call	 PyNumber_InPlaceAdd
$LN7@proxy_iadd:
  00090	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00095	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0009a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a3	5f		 pop	 rdi
  000a4	c3		 ret	 0
proxy_iadd ENDP
_TEXT	ENDS
EXTRN	PyNumber_InPlaceSubtract:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_isub DD imagerel proxy_isub
	DD	imagerel proxy_isub+165
	DD	imagerel $unwind$proxy_isub
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_isub DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_isub
_TEXT	SEGMENT
x$ = 48
y$ = 56
proxy_isub PROC						; COMDAT

; 507  : WRAP_BINARY(proxy_isub, PyNumber_InPlaceSubtract)

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00018	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_PyWeakref_ProxyType
  0001f	48 8b da	 mov	 rbx, rdx
  00022	48 8b f9	 mov	 rdi, rcx
  00025	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_PyWeakref_CallableProxyType
  0002c	48 3b c5	 cmp	 rax, rbp
  0002f	74 05		 je	 SHORT $LN5@proxy_isub
  00031	48 3b c6	 cmp	 rax, rsi
  00034	75 21		 jne	 SHORT $LN9@proxy_isub
$LN5@proxy_isub:
  00036	e8 00 00 00 00	 call	 proxy_checkref
  0003b	85 c0		 test	 eax, eax
  0003d	75 04		 jne	 SHORT $LN4@proxy_isub
$LN13@proxy_isub:
  0003f	33 c0		 xor	 eax, eax
  00041	eb 4d		 jmp	 SHORT $LN7@proxy_isub
$LN4@proxy_isub:
  00043	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00047	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  0004e	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00053	48 0f 4f f8	 cmovg	 rdi, rax
$LN9@proxy_isub:
  00057	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0005b	48 3b c5	 cmp	 rax, rbp
  0005e	74 05		 je	 SHORT $LN2@proxy_isub
  00060	48 3b c6	 cmp	 rax, rsi
  00063	75 20		 jne	 SHORT $LN11@proxy_isub
$LN2@proxy_isub:
  00065	48 8b cb	 mov	 rcx, rbx
  00068	e8 00 00 00 00	 call	 proxy_checkref
  0006d	85 c0		 test	 eax, eax
  0006f	74 ce		 je	 SHORT $LN13@proxy_isub
  00071	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00075	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0007c	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00081	48 0f 4f d8	 cmovg	 rbx, rax
$LN11@proxy_isub:
  00085	48 8b d3	 mov	 rdx, rbx
  00088	48 8b cf	 mov	 rcx, rdi
  0008b	e8 00 00 00 00	 call	 PyNumber_InPlaceSubtract
$LN7@proxy_isub:
  00090	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00095	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0009a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a3	5f		 pop	 rdi
  000a4	c3		 ret	 0
proxy_isub ENDP
_TEXT	ENDS
EXTRN	PyNumber_InPlaceMultiply:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_imul DD imagerel proxy_imul
	DD	imagerel proxy_imul+165
	DD	imagerel $unwind$proxy_imul
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_imul DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_imul
_TEXT	SEGMENT
x$ = 48
y$ = 56
proxy_imul PROC						; COMDAT

; 508  : WRAP_BINARY(proxy_imul, PyNumber_InPlaceMultiply)

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00018	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_PyWeakref_ProxyType
  0001f	48 8b da	 mov	 rbx, rdx
  00022	48 8b f9	 mov	 rdi, rcx
  00025	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_PyWeakref_CallableProxyType
  0002c	48 3b c5	 cmp	 rax, rbp
  0002f	74 05		 je	 SHORT $LN5@proxy_imul
  00031	48 3b c6	 cmp	 rax, rsi
  00034	75 21		 jne	 SHORT $LN9@proxy_imul
$LN5@proxy_imul:
  00036	e8 00 00 00 00	 call	 proxy_checkref
  0003b	85 c0		 test	 eax, eax
  0003d	75 04		 jne	 SHORT $LN4@proxy_imul
$LN13@proxy_imul:
  0003f	33 c0		 xor	 eax, eax
  00041	eb 4d		 jmp	 SHORT $LN7@proxy_imul
$LN4@proxy_imul:
  00043	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00047	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  0004e	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00053	48 0f 4f f8	 cmovg	 rdi, rax
$LN9@proxy_imul:
  00057	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0005b	48 3b c5	 cmp	 rax, rbp
  0005e	74 05		 je	 SHORT $LN2@proxy_imul
  00060	48 3b c6	 cmp	 rax, rsi
  00063	75 20		 jne	 SHORT $LN11@proxy_imul
$LN2@proxy_imul:
  00065	48 8b cb	 mov	 rcx, rbx
  00068	e8 00 00 00 00	 call	 proxy_checkref
  0006d	85 c0		 test	 eax, eax
  0006f	74 ce		 je	 SHORT $LN13@proxy_imul
  00071	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00075	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0007c	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00081	48 0f 4f d8	 cmovg	 rbx, rax
$LN11@proxy_imul:
  00085	48 8b d3	 mov	 rdx, rbx
  00088	48 8b cf	 mov	 rcx, rdi
  0008b	e8 00 00 00 00	 call	 PyNumber_InPlaceMultiply
$LN7@proxy_imul:
  00090	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00095	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0009a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a3	5f		 pop	 rdi
  000a4	c3		 ret	 0
proxy_imul ENDP
_TEXT	ENDS
EXTRN	PyNumber_InPlaceFloorDivide:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_ifloor_div DD imagerel proxy_ifloor_div
	DD	imagerel proxy_ifloor_div+165
	DD	imagerel $unwind$proxy_ifloor_div
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_ifloor_div DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_ifloor_div
_TEXT	SEGMENT
x$ = 48
y$ = 56
proxy_ifloor_div PROC					; COMDAT

; 509  : WRAP_BINARY(proxy_ifloor_div, PyNumber_InPlaceFloorDivide)

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00018	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_PyWeakref_ProxyType
  0001f	48 8b da	 mov	 rbx, rdx
  00022	48 8b f9	 mov	 rdi, rcx
  00025	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_PyWeakref_CallableProxyType
  0002c	48 3b c5	 cmp	 rax, rbp
  0002f	74 05		 je	 SHORT $LN5@proxy_iflo
  00031	48 3b c6	 cmp	 rax, rsi
  00034	75 21		 jne	 SHORT $LN9@proxy_iflo
$LN5@proxy_iflo:
  00036	e8 00 00 00 00	 call	 proxy_checkref
  0003b	85 c0		 test	 eax, eax
  0003d	75 04		 jne	 SHORT $LN4@proxy_iflo
$LN13@proxy_iflo:
  0003f	33 c0		 xor	 eax, eax
  00041	eb 4d		 jmp	 SHORT $LN7@proxy_iflo
$LN4@proxy_iflo:
  00043	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00047	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  0004e	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00053	48 0f 4f f8	 cmovg	 rdi, rax
$LN9@proxy_iflo:
  00057	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0005b	48 3b c5	 cmp	 rax, rbp
  0005e	74 05		 je	 SHORT $LN2@proxy_iflo
  00060	48 3b c6	 cmp	 rax, rsi
  00063	75 20		 jne	 SHORT $LN11@proxy_iflo
$LN2@proxy_iflo:
  00065	48 8b cb	 mov	 rcx, rbx
  00068	e8 00 00 00 00	 call	 proxy_checkref
  0006d	85 c0		 test	 eax, eax
  0006f	74 ce		 je	 SHORT $LN13@proxy_iflo
  00071	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00075	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0007c	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00081	48 0f 4f d8	 cmovg	 rbx, rax
$LN11@proxy_iflo:
  00085	48 8b d3	 mov	 rdx, rbx
  00088	48 8b cf	 mov	 rcx, rdi
  0008b	e8 00 00 00 00	 call	 PyNumber_InPlaceFloorDivide
$LN7@proxy_iflo:
  00090	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00095	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0009a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a3	5f		 pop	 rdi
  000a4	c3		 ret	 0
proxy_ifloor_div ENDP
_TEXT	ENDS
EXTRN	PyNumber_InPlaceTrueDivide:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_itrue_div DD imagerel proxy_itrue_div
	DD	imagerel proxy_itrue_div+165
	DD	imagerel $unwind$proxy_itrue_div
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_itrue_div DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_itrue_div
_TEXT	SEGMENT
x$ = 48
y$ = 56
proxy_itrue_div PROC					; COMDAT

; 510  : WRAP_BINARY(proxy_itrue_div, PyNumber_InPlaceTrueDivide)

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00018	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_PyWeakref_ProxyType
  0001f	48 8b da	 mov	 rbx, rdx
  00022	48 8b f9	 mov	 rdi, rcx
  00025	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_PyWeakref_CallableProxyType
  0002c	48 3b c5	 cmp	 rax, rbp
  0002f	74 05		 je	 SHORT $LN5@proxy_itru
  00031	48 3b c6	 cmp	 rax, rsi
  00034	75 21		 jne	 SHORT $LN9@proxy_itru
$LN5@proxy_itru:
  00036	e8 00 00 00 00	 call	 proxy_checkref
  0003b	85 c0		 test	 eax, eax
  0003d	75 04		 jne	 SHORT $LN4@proxy_itru
$LN13@proxy_itru:
  0003f	33 c0		 xor	 eax, eax
  00041	eb 4d		 jmp	 SHORT $LN7@proxy_itru
$LN4@proxy_itru:
  00043	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00047	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  0004e	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00053	48 0f 4f f8	 cmovg	 rdi, rax
$LN9@proxy_itru:
  00057	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0005b	48 3b c5	 cmp	 rax, rbp
  0005e	74 05		 je	 SHORT $LN2@proxy_itru
  00060	48 3b c6	 cmp	 rax, rsi
  00063	75 20		 jne	 SHORT $LN11@proxy_itru
$LN2@proxy_itru:
  00065	48 8b cb	 mov	 rcx, rbx
  00068	e8 00 00 00 00	 call	 proxy_checkref
  0006d	85 c0		 test	 eax, eax
  0006f	74 ce		 je	 SHORT $LN13@proxy_itru
  00071	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00075	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0007c	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00081	48 0f 4f d8	 cmovg	 rbx, rax
$LN11@proxy_itru:
  00085	48 8b d3	 mov	 rdx, rbx
  00088	48 8b cf	 mov	 rcx, rdi
  0008b	e8 00 00 00 00	 call	 PyNumber_InPlaceTrueDivide
$LN7@proxy_itru:
  00090	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00095	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0009a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a3	5f		 pop	 rdi
  000a4	c3		 ret	 0
proxy_itrue_div ENDP
_TEXT	ENDS
EXTRN	PyNumber_InPlaceRemainder:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_imod DD imagerel proxy_imod
	DD	imagerel proxy_imod+165
	DD	imagerel $unwind$proxy_imod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_imod DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_imod
_TEXT	SEGMENT
x$ = 48
y$ = 56
proxy_imod PROC						; COMDAT

; 511  : WRAP_BINARY(proxy_imod, PyNumber_InPlaceRemainder)

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00018	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_PyWeakref_ProxyType
  0001f	48 8b da	 mov	 rbx, rdx
  00022	48 8b f9	 mov	 rdi, rcx
  00025	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_PyWeakref_CallableProxyType
  0002c	48 3b c5	 cmp	 rax, rbp
  0002f	74 05		 je	 SHORT $LN5@proxy_imod
  00031	48 3b c6	 cmp	 rax, rsi
  00034	75 21		 jne	 SHORT $LN9@proxy_imod
$LN5@proxy_imod:
  00036	e8 00 00 00 00	 call	 proxy_checkref
  0003b	85 c0		 test	 eax, eax
  0003d	75 04		 jne	 SHORT $LN4@proxy_imod
$LN13@proxy_imod:
  0003f	33 c0		 xor	 eax, eax
  00041	eb 4d		 jmp	 SHORT $LN7@proxy_imod
$LN4@proxy_imod:
  00043	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00047	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  0004e	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00053	48 0f 4f f8	 cmovg	 rdi, rax
$LN9@proxy_imod:
  00057	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0005b	48 3b c5	 cmp	 rax, rbp
  0005e	74 05		 je	 SHORT $LN2@proxy_imod
  00060	48 3b c6	 cmp	 rax, rsi
  00063	75 20		 jne	 SHORT $LN11@proxy_imod
$LN2@proxy_imod:
  00065	48 8b cb	 mov	 rcx, rbx
  00068	e8 00 00 00 00	 call	 proxy_checkref
  0006d	85 c0		 test	 eax, eax
  0006f	74 ce		 je	 SHORT $LN13@proxy_imod
  00071	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00075	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0007c	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00081	48 0f 4f d8	 cmovg	 rbx, rax
$LN11@proxy_imod:
  00085	48 8b d3	 mov	 rdx, rbx
  00088	48 8b cf	 mov	 rcx, rdi
  0008b	e8 00 00 00 00	 call	 PyNumber_InPlaceRemainder
$LN7@proxy_imod:
  00090	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00095	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0009a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a3	5f		 pop	 rdi
  000a4	c3		 ret	 0
proxy_imod ENDP
_TEXT	ENDS
EXTRN	PyNumber_InPlacePower:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_ipow DD imagerel proxy_ipow
	DD	imagerel proxy_ipow+237
	DD	imagerel $unwind$proxy_ipow
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_ipow DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0c016321aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_ipow
_TEXT	SEGMENT
proxy$ = 48
v$ = 56
w$ = 64
proxy_ipow PROC						; COMDAT

; 512  : WRAP_TERNARY(proxy_ipow, PyNumber_InPlacePower)

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001a	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0001e	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:_PyWeakref_ProxyType
  00025	49 8b d8	 mov	 rbx, r8
  00028	48 8b fa	 mov	 rdi, rdx
  0002b	48 8b f1	 mov	 rsi, rcx
  0002e	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_PyWeakref_CallableProxyType
  00035	49 3b c4	 cmp	 rax, r12
  00038	74 05		 je	 SHORT $LN9@proxy_ipow
  0003a	48 3b c5	 cmp	 rax, rbp
  0003d	75 24		 jne	 SHORT $LN13@proxy_ipow
$LN9@proxy_ipow:
  0003f	e8 00 00 00 00	 call	 proxy_checkref
  00044	85 c0		 test	 eax, eax
  00046	75 07		 jne	 SHORT $LN8@proxy_ipow
$LN19@proxy_ipow:
  00048	33 c0		 xor	 eax, eax
  0004a	e9 83 00 00 00	 jmp	 $LN11@proxy_ipow
$LN8@proxy_ipow:
  0004f	48 8b 46 60	 mov	 rax, QWORD PTR [rsi+96]
  00053	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_Py_NoneStruct
  0005a	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0005f	48 0f 4f f0	 cmovg	 rsi, rax
$LN13@proxy_ipow:
  00063	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00067	49 3b c4	 cmp	 rax, r12
  0006a	74 05		 je	 SHORT $LN6@proxy_ipow
  0006c	48 3b c5	 cmp	 rax, rbp
  0006f	75 20		 jne	 SHORT $LN15@proxy_ipow
$LN6@proxy_ipow:
  00071	48 8b cf	 mov	 rcx, rdi
  00074	e8 00 00 00 00	 call	 proxy_checkref
  00079	85 c0		 test	 eax, eax
  0007b	74 cb		 je	 SHORT $LN19@proxy_ipow
  0007d	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00081	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  00088	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0008d	48 0f 4f f8	 cmovg	 rdi, rax
$LN15@proxy_ipow:
  00091	48 85 db	 test	 rbx, rbx
  00094	74 2e		 je	 SHORT $LN17@proxy_ipow
  00096	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0009a	49 3b c4	 cmp	 rax, r12
  0009d	74 05		 je	 SHORT $LN2@proxy_ipow
  0009f	48 3b c5	 cmp	 rax, rbp
  000a2	75 20		 jne	 SHORT $LN17@proxy_ipow
$LN2@proxy_ipow:
  000a4	48 8b cb	 mov	 rcx, rbx
  000a7	e8 00 00 00 00	 call	 proxy_checkref
  000ac	85 c0		 test	 eax, eax
  000ae	74 98		 je	 SHORT $LN19@proxy_ipow
  000b0	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  000b4	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  000bb	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000c0	48 0f 4f d8	 cmovg	 rbx, rax
$LN17@proxy_ipow:
  000c4	4c 8b c3	 mov	 r8, rbx
  000c7	48 8b d7	 mov	 rdx, rdi
  000ca	48 8b ce	 mov	 rcx, rsi
  000cd	e8 00 00 00 00	 call	 PyNumber_InPlacePower
$LN11@proxy_ipow:
  000d2	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000d7	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000dc	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000e1	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  000e6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ea	41 5c		 pop	 r12
  000ec	c3		 ret	 0
proxy_ipow ENDP
_TEXT	ENDS
EXTRN	PyNumber_InPlaceLshift:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_ilshift DD imagerel proxy_ilshift
	DD	imagerel proxy_ilshift+165
	DD	imagerel $unwind$proxy_ilshift
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_ilshift DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_ilshift
_TEXT	SEGMENT
x$ = 48
y$ = 56
proxy_ilshift PROC					; COMDAT

; 513  : WRAP_BINARY(proxy_ilshift, PyNumber_InPlaceLshift)

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00018	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_PyWeakref_ProxyType
  0001f	48 8b da	 mov	 rbx, rdx
  00022	48 8b f9	 mov	 rdi, rcx
  00025	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_PyWeakref_CallableProxyType
  0002c	48 3b c5	 cmp	 rax, rbp
  0002f	74 05		 je	 SHORT $LN5@proxy_ilsh
  00031	48 3b c6	 cmp	 rax, rsi
  00034	75 21		 jne	 SHORT $LN9@proxy_ilsh
$LN5@proxy_ilsh:
  00036	e8 00 00 00 00	 call	 proxy_checkref
  0003b	85 c0		 test	 eax, eax
  0003d	75 04		 jne	 SHORT $LN4@proxy_ilsh
$LN13@proxy_ilsh:
  0003f	33 c0		 xor	 eax, eax
  00041	eb 4d		 jmp	 SHORT $LN7@proxy_ilsh
$LN4@proxy_ilsh:
  00043	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00047	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  0004e	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00053	48 0f 4f f8	 cmovg	 rdi, rax
$LN9@proxy_ilsh:
  00057	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0005b	48 3b c5	 cmp	 rax, rbp
  0005e	74 05		 je	 SHORT $LN2@proxy_ilsh
  00060	48 3b c6	 cmp	 rax, rsi
  00063	75 20		 jne	 SHORT $LN11@proxy_ilsh
$LN2@proxy_ilsh:
  00065	48 8b cb	 mov	 rcx, rbx
  00068	e8 00 00 00 00	 call	 proxy_checkref
  0006d	85 c0		 test	 eax, eax
  0006f	74 ce		 je	 SHORT $LN13@proxy_ilsh
  00071	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00075	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0007c	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00081	48 0f 4f d8	 cmovg	 rbx, rax
$LN11@proxy_ilsh:
  00085	48 8b d3	 mov	 rdx, rbx
  00088	48 8b cf	 mov	 rcx, rdi
  0008b	e8 00 00 00 00	 call	 PyNumber_InPlaceLshift
$LN7@proxy_ilsh:
  00090	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00095	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0009a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a3	5f		 pop	 rdi
  000a4	c3		 ret	 0
proxy_ilshift ENDP
_TEXT	ENDS
EXTRN	PyNumber_InPlaceRshift:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_irshift DD imagerel proxy_irshift
	DD	imagerel proxy_irshift+165
	DD	imagerel $unwind$proxy_irshift
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_irshift DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_irshift
_TEXT	SEGMENT
x$ = 48
y$ = 56
proxy_irshift PROC					; COMDAT

; 514  : WRAP_BINARY(proxy_irshift, PyNumber_InPlaceRshift)

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00018	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_PyWeakref_ProxyType
  0001f	48 8b da	 mov	 rbx, rdx
  00022	48 8b f9	 mov	 rdi, rcx
  00025	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_PyWeakref_CallableProxyType
  0002c	48 3b c5	 cmp	 rax, rbp
  0002f	74 05		 je	 SHORT $LN5@proxy_irsh
  00031	48 3b c6	 cmp	 rax, rsi
  00034	75 21		 jne	 SHORT $LN9@proxy_irsh
$LN5@proxy_irsh:
  00036	e8 00 00 00 00	 call	 proxy_checkref
  0003b	85 c0		 test	 eax, eax
  0003d	75 04		 jne	 SHORT $LN4@proxy_irsh
$LN13@proxy_irsh:
  0003f	33 c0		 xor	 eax, eax
  00041	eb 4d		 jmp	 SHORT $LN7@proxy_irsh
$LN4@proxy_irsh:
  00043	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00047	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  0004e	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00053	48 0f 4f f8	 cmovg	 rdi, rax
$LN9@proxy_irsh:
  00057	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0005b	48 3b c5	 cmp	 rax, rbp
  0005e	74 05		 je	 SHORT $LN2@proxy_irsh
  00060	48 3b c6	 cmp	 rax, rsi
  00063	75 20		 jne	 SHORT $LN11@proxy_irsh
$LN2@proxy_irsh:
  00065	48 8b cb	 mov	 rcx, rbx
  00068	e8 00 00 00 00	 call	 proxy_checkref
  0006d	85 c0		 test	 eax, eax
  0006f	74 ce		 je	 SHORT $LN13@proxy_irsh
  00071	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00075	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0007c	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00081	48 0f 4f d8	 cmovg	 rbx, rax
$LN11@proxy_irsh:
  00085	48 8b d3	 mov	 rdx, rbx
  00088	48 8b cf	 mov	 rcx, rdi
  0008b	e8 00 00 00 00	 call	 PyNumber_InPlaceRshift
$LN7@proxy_irsh:
  00090	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00095	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0009a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a3	5f		 pop	 rdi
  000a4	c3		 ret	 0
proxy_irshift ENDP
_TEXT	ENDS
EXTRN	PyNumber_InPlaceAnd:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_iand DD imagerel proxy_iand
	DD	imagerel proxy_iand+165
	DD	imagerel $unwind$proxy_iand
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_iand DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_iand
_TEXT	SEGMENT
x$ = 48
y$ = 56
proxy_iand PROC						; COMDAT

; 515  : WRAP_BINARY(proxy_iand, PyNumber_InPlaceAnd)

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00018	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_PyWeakref_ProxyType
  0001f	48 8b da	 mov	 rbx, rdx
  00022	48 8b f9	 mov	 rdi, rcx
  00025	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_PyWeakref_CallableProxyType
  0002c	48 3b c5	 cmp	 rax, rbp
  0002f	74 05		 je	 SHORT $LN5@proxy_iand
  00031	48 3b c6	 cmp	 rax, rsi
  00034	75 21		 jne	 SHORT $LN9@proxy_iand
$LN5@proxy_iand:
  00036	e8 00 00 00 00	 call	 proxy_checkref
  0003b	85 c0		 test	 eax, eax
  0003d	75 04		 jne	 SHORT $LN4@proxy_iand
$LN13@proxy_iand:
  0003f	33 c0		 xor	 eax, eax
  00041	eb 4d		 jmp	 SHORT $LN7@proxy_iand
$LN4@proxy_iand:
  00043	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00047	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  0004e	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00053	48 0f 4f f8	 cmovg	 rdi, rax
$LN9@proxy_iand:
  00057	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0005b	48 3b c5	 cmp	 rax, rbp
  0005e	74 05		 je	 SHORT $LN2@proxy_iand
  00060	48 3b c6	 cmp	 rax, rsi
  00063	75 20		 jne	 SHORT $LN11@proxy_iand
$LN2@proxy_iand:
  00065	48 8b cb	 mov	 rcx, rbx
  00068	e8 00 00 00 00	 call	 proxy_checkref
  0006d	85 c0		 test	 eax, eax
  0006f	74 ce		 je	 SHORT $LN13@proxy_iand
  00071	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00075	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0007c	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00081	48 0f 4f d8	 cmovg	 rbx, rax
$LN11@proxy_iand:
  00085	48 8b d3	 mov	 rdx, rbx
  00088	48 8b cf	 mov	 rcx, rdi
  0008b	e8 00 00 00 00	 call	 PyNumber_InPlaceAnd
$LN7@proxy_iand:
  00090	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00095	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0009a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a3	5f		 pop	 rdi
  000a4	c3		 ret	 0
proxy_iand ENDP
_TEXT	ENDS
EXTRN	PyNumber_InPlaceXor:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_ixor DD imagerel proxy_ixor
	DD	imagerel proxy_ixor+165
	DD	imagerel $unwind$proxy_ixor
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_ixor DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_ixor
_TEXT	SEGMENT
x$ = 48
y$ = 56
proxy_ixor PROC						; COMDAT

; 516  : WRAP_BINARY(proxy_ixor, PyNumber_InPlaceXor)

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00018	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_PyWeakref_ProxyType
  0001f	48 8b da	 mov	 rbx, rdx
  00022	48 8b f9	 mov	 rdi, rcx
  00025	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_PyWeakref_CallableProxyType
  0002c	48 3b c5	 cmp	 rax, rbp
  0002f	74 05		 je	 SHORT $LN5@proxy_ixor
  00031	48 3b c6	 cmp	 rax, rsi
  00034	75 21		 jne	 SHORT $LN9@proxy_ixor
$LN5@proxy_ixor:
  00036	e8 00 00 00 00	 call	 proxy_checkref
  0003b	85 c0		 test	 eax, eax
  0003d	75 04		 jne	 SHORT $LN4@proxy_ixor
$LN13@proxy_ixor:
  0003f	33 c0		 xor	 eax, eax
  00041	eb 4d		 jmp	 SHORT $LN7@proxy_ixor
$LN4@proxy_ixor:
  00043	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00047	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  0004e	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00053	48 0f 4f f8	 cmovg	 rdi, rax
$LN9@proxy_ixor:
  00057	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0005b	48 3b c5	 cmp	 rax, rbp
  0005e	74 05		 je	 SHORT $LN2@proxy_ixor
  00060	48 3b c6	 cmp	 rax, rsi
  00063	75 20		 jne	 SHORT $LN11@proxy_ixor
$LN2@proxy_ixor:
  00065	48 8b cb	 mov	 rcx, rbx
  00068	e8 00 00 00 00	 call	 proxy_checkref
  0006d	85 c0		 test	 eax, eax
  0006f	74 ce		 je	 SHORT $LN13@proxy_ixor
  00071	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00075	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0007c	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00081	48 0f 4f d8	 cmovg	 rbx, rax
$LN11@proxy_ixor:
  00085	48 8b d3	 mov	 rdx, rbx
  00088	48 8b cf	 mov	 rcx, rdi
  0008b	e8 00 00 00 00	 call	 PyNumber_InPlaceXor
$LN7@proxy_ixor:
  00090	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00095	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0009a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a3	5f		 pop	 rdi
  000a4	c3		 ret	 0
proxy_ixor ENDP
_TEXT	ENDS
EXTRN	PyNumber_InPlaceOr:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_ior DD imagerel proxy_ior
	DD	imagerel proxy_ior+165
	DD	imagerel $unwind$proxy_ior
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_ior DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_ior
_TEXT	SEGMENT
x$ = 48
y$ = 56
proxy_ior PROC						; COMDAT

; 517  : WRAP_BINARY(proxy_ior, PyNumber_InPlaceOr)

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00018	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_PyWeakref_ProxyType
  0001f	48 8b da	 mov	 rbx, rdx
  00022	48 8b f9	 mov	 rdi, rcx
  00025	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_PyWeakref_CallableProxyType
  0002c	48 3b c5	 cmp	 rax, rbp
  0002f	74 05		 je	 SHORT $LN5@proxy_ior
  00031	48 3b c6	 cmp	 rax, rsi
  00034	75 21		 jne	 SHORT $LN9@proxy_ior
$LN5@proxy_ior:
  00036	e8 00 00 00 00	 call	 proxy_checkref
  0003b	85 c0		 test	 eax, eax
  0003d	75 04		 jne	 SHORT $LN4@proxy_ior
$LN13@proxy_ior:
  0003f	33 c0		 xor	 eax, eax
  00041	eb 4d		 jmp	 SHORT $LN7@proxy_ior
$LN4@proxy_ior:
  00043	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00047	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  0004e	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00053	48 0f 4f f8	 cmovg	 rdi, rax
$LN9@proxy_ior:
  00057	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0005b	48 3b c5	 cmp	 rax, rbp
  0005e	74 05		 je	 SHORT $LN2@proxy_ior
  00060	48 3b c6	 cmp	 rax, rsi
  00063	75 20		 jne	 SHORT $LN11@proxy_ior
$LN2@proxy_ior:
  00065	48 8b cb	 mov	 rcx, rbx
  00068	e8 00 00 00 00	 call	 proxy_checkref
  0006d	85 c0		 test	 eax, eax
  0006f	74 ce		 je	 SHORT $LN13@proxy_ior
  00071	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00075	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0007c	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00081	48 0f 4f d8	 cmovg	 rbx, rax
$LN11@proxy_ior:
  00085	48 8b d3	 mov	 rdx, rbx
  00088	48 8b cf	 mov	 rcx, rdi
  0008b	e8 00 00 00 00	 call	 PyNumber_InPlaceOr
$LN7@proxy_ior:
  00090	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00095	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0009a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a3	5f		 pop	 rdi
  000a4	c3		 ret	 0
proxy_ior ENDP
_TEXT	ENDS
EXTRN	PyNumber_Index:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_index DD imagerel proxy_index
	DD	imagerel proxy_index+90
	DD	imagerel $unwind$proxy_index
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_index DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_index
_TEXT	SEGMENT
proxy$ = 48
proxy_index PROC					; COMDAT

; 518  : WRAP_UNARY(proxy_index, PyNumber_Index)

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyWeakref_ProxyType
  00014	48 3b c1	 cmp	 rax, rcx
  00017	74 0c		 je	 SHORT $LN2@proxy_inde
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyWeakref_CallableProxyType
  00020	48 3b c1	 cmp	 rax, rcx
  00023	75 28		 jne	 SHORT $LN6@proxy_inde
$LN2@proxy_inde:
  00025	48 8b cb	 mov	 rcx, rbx
  00028	e8 00 00 00 00	 call	 proxy_checkref
  0002d	85 c0		 test	 eax, eax
  0002f	75 08		 jne	 SHORT $LN1@proxy_inde
  00031	33 c0		 xor	 eax, eax
  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5b		 pop	 rbx
  00038	c3		 ret	 0
$LN1@proxy_inde:
  00039	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  0003d	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  00044	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00049	48 0f 4f d8	 cmovg	 rbx, rax
$LN6@proxy_inde:
  0004d	48 8b cb	 mov	 rcx, rbx
  00050	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00054	5b		 pop	 rbx
  00055	e9 00 00 00 00	 jmp	 PyNumber_Index
proxy_index ENDP
_TEXT	ENDS
EXTRN	PyObject_IsTrue:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_bool DD imagerel proxy_bool
	DD	imagerel proxy_bool+57
	DD	imagerel $unwind$proxy_bool
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_bool DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_bool
_TEXT	SEGMENT
proxy$ = 48
proxy_bool PROC						; COMDAT

; 522  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 523  :     PyObject *o = PyWeakref_GET_OBJECT(proxy);

  00006	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  0000a	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  00011	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00016	48 0f 4f d8	 cmovg	 rbx, rax

; 524  :     if (!proxy_checkref(proxy))

  0001a	e8 00 00 00 00	 call	 proxy_checkref
  0001f	85 c0		 test	 eax, eax
  00021	75 09		 jne	 SHORT $LN1@proxy_bool

; 525  :         return -1;

  00023	83 c8 ff	 or	 eax, -1

; 527  : }

  00026	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002a	5b		 pop	 rbx
  0002b	c3		 ret	 0
$LN1@proxy_bool:

; 526  :     return PyObject_IsTrue(o);

  0002c	48 8b cb	 mov	 rcx, rbx

; 527  : }

  0002f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00033	5b		 pop	 rbx
  00034	e9 00 00 00 00	 jmp	 PyObject_IsTrue
proxy_bool ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_dealloc DD imagerel proxy_dealloc
	DD	imagerel proxy_dealloc+42
	DD	imagerel $unwind$proxy_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_dealloc DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_dealloc
_TEXT	SEGMENT
self$ = 48
proxy_dealloc PROC					; COMDAT

; 531  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 532  :     if (self->wr_callback != NULL)

  00006	48 83 79 68 00	 cmp	 QWORD PTR [rcx+104], 0
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	74 05		 je	 SHORT $LN1@proxy_deal

; 533  :         PyObject_GC_UnTrack((PyObject *)self);

  00010	e8 00 00 00 00	 call	 PyObject_GC_UnTrack
$LN1@proxy_deal:

; 534  :     clear_weakref(self);

  00015	48 8b cb	 mov	 rcx, rbx
  00018	e8 00 00 00 00	 call	 clear_weakref

; 535  :     PyObject_GC_Del(self);

  0001d	48 8b cb	 mov	 rcx, rbx

; 536  : }

  00020	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00024	5b		 pop	 rbx
  00025	e9 00 00 00 00	 jmp	 PyObject_GC_Del
proxy_dealloc ENDP
_TEXT	ENDS
EXTRN	PySequence_Contains:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_contains DD imagerel proxy_contains
	DD	imagerel proxy_contains+77
	DD	imagerel $unwind$proxy_contains
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_contains DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_contains
_TEXT	SEGMENT
proxy$ = 48
value$ = 56
proxy_contains PROC					; COMDAT

; 542  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fa	 mov	 rdi, rdx
  0000d	48 8b d9	 mov	 rbx, rcx

; 543  :     if (!proxy_checkref(proxy))

  00010	e8 00 00 00 00	 call	 proxy_checkref
  00015	85 c0		 test	 eax, eax
  00017	75 0e		 jne	 SHORT $LN1@proxy_cont

; 544  :         return -1;

  00019	83 c8 ff	 or	 eax, -1

; 546  : }

  0001c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00021	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00025	5f		 pop	 rdi
  00026	c3		 ret	 0
$LN1@proxy_cont:

; 545  :     return PySequence_Contains(PyWeakref_GET_OBJECT(proxy), value);

  00027	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00032	48 8b d7	 mov	 rdx, rdi
  00035	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0003a	48 0f 4f c8	 cmovg	 rcx, rax

; 546  : }

  0003e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00043	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00047	5f		 pop	 rdi
  00048	e9 00 00 00 00	 jmp	 PySequence_Contains
proxy_contains ENDP
_TEXT	ENDS
EXTRN	PyObject_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_length DD imagerel proxy_length
	DD	imagerel proxy_length+58
	DD	imagerel $unwind$proxy_length
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_length DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_length
_TEXT	SEGMENT
proxy$ = 48
proxy_length PROC					; COMDAT

; 553  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 554  :     if (!proxy_checkref(proxy))

  00009	e8 00 00 00 00	 call	 proxy_checkref
  0000e	85 c0		 test	 eax, eax
  00010	75 0a		 jne	 SHORT $LN1@proxy_leng

; 555  :         return -1;

  00012	48 83 c8 ff	 or	 rax, -1

; 557  : }

  00016	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001a	5b		 pop	 rbx
  0001b	c3		 ret	 0
$LN1@proxy_leng:

; 556  :     return PyObject_Length(PyWeakref_GET_OBJECT(proxy));

  0001c	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00027	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0002c	48 0f 4f c8	 cmovg	 rcx, rax

; 557  : }

  00030	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00034	5b		 pop	 rbx
  00035	e9 00 00 00 00	 jmp	 PyObject_Size
proxy_length ENDP
_TEXT	ENDS
EXTRN	PyObject_GetItem:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_getitem DD imagerel proxy_getitem
	DD	imagerel proxy_getitem+165
	DD	imagerel $unwind$proxy_getitem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_getitem DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_getitem
_TEXT	SEGMENT
x$ = 48
y$ = 56
proxy_getitem PROC					; COMDAT

; 559  : WRAP_BINARY(proxy_getitem, PyObject_GetItem)

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00018	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_PyWeakref_ProxyType
  0001f	48 8b da	 mov	 rbx, rdx
  00022	48 8b f9	 mov	 rdi, rcx
  00025	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_PyWeakref_CallableProxyType
  0002c	48 3b c5	 cmp	 rax, rbp
  0002f	74 05		 je	 SHORT $LN5@proxy_geti
  00031	48 3b c6	 cmp	 rax, rsi
  00034	75 21		 jne	 SHORT $LN9@proxy_geti
$LN5@proxy_geti:
  00036	e8 00 00 00 00	 call	 proxy_checkref
  0003b	85 c0		 test	 eax, eax
  0003d	75 04		 jne	 SHORT $LN4@proxy_geti
$LN13@proxy_geti:
  0003f	33 c0		 xor	 eax, eax
  00041	eb 4d		 jmp	 SHORT $LN7@proxy_geti
$LN4@proxy_geti:
  00043	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00047	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  0004e	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00053	48 0f 4f f8	 cmovg	 rdi, rax
$LN9@proxy_geti:
  00057	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0005b	48 3b c5	 cmp	 rax, rbp
  0005e	74 05		 je	 SHORT $LN2@proxy_geti
  00060	48 3b c6	 cmp	 rax, rsi
  00063	75 20		 jne	 SHORT $LN11@proxy_geti
$LN2@proxy_geti:
  00065	48 8b cb	 mov	 rcx, rbx
  00068	e8 00 00 00 00	 call	 proxy_checkref
  0006d	85 c0		 test	 eax, eax
  0006f	74 ce		 je	 SHORT $LN13@proxy_geti
  00071	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00075	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0007c	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00081	48 0f 4f d8	 cmovg	 rbx, rax
$LN11@proxy_geti:
  00085	48 8b d3	 mov	 rdx, rbx
  00088	48 8b cf	 mov	 rcx, rdi
  0008b	e8 00 00 00 00	 call	 PyObject_GetItem
$LN7@proxy_geti:
  00090	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00095	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0009a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a3	5f		 pop	 rdi
  000a4	c3		 ret	 0
proxy_getitem ENDP
_TEXT	ENDS
EXTRN	PyObject_SetItem:PROC
EXTRN	PyObject_DelItem:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_setitem DD imagerel proxy_setitem
	DD	imagerel proxy_setitem+131
	DD	imagerel $unwind$proxy_setitem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_setitem DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_setitem
_TEXT	SEGMENT
proxy$ = 48
key$ = 56
value$ = 64
proxy_setitem PROC					; COMDAT

; 563  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b d8	 mov	 rbx, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b f9	 mov	 rdi, rcx

; 564  :     if (!proxy_checkref(proxy))

  00018	e8 00 00 00 00	 call	 proxy_checkref
  0001d	85 c0		 test	 eax, eax
  0001f	75 13		 jne	 SHORT $LN3@proxy_seti

; 565  :         return -1;

  00021	83 c8 ff	 or	 eax, -1

; 571  : }

  00024	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00029	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0002e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00032	5f		 pop	 rdi
  00033	c3		 ret	 0
$LN3@proxy_seti:

; 566  : 
; 567  :     if (value == NULL)
; 568  :         return PyObject_DelItem(PyWeakref_GET_OBJECT(proxy), key);

  00034	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0003f	48 8b d6	 mov	 rdx, rsi
  00042	48 85 db	 test	 rbx, rbx
  00045	75 1c		 jne	 SHORT $LN2@proxy_seti
  00047	48 39 58 50	 cmp	 QWORD PTR [rax+80], rbx
  0004b	48 0f 4f c8	 cmovg	 rcx, rax

; 571  : }

  0004f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00054	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00059	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005d	5f		 pop	 rdi
  0005e	e9 00 00 00 00	 jmp	 PyObject_DelItem
$LN2@proxy_seti:

; 569  :     else
; 570  :         return PyObject_SetItem(PyWeakref_GET_OBJECT(proxy), key, value);

  00063	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00068	4c 8b c3	 mov	 r8, rbx
  0006b	48 0f 4f c8	 cmovg	 rcx, rax

; 571  : }

  0006f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00074	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00079	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007d	5f		 pop	 rdi
  0007e	e9 00 00 00 00	 jmp	 PyObject_SetItem
proxy_setitem ENDP
_TEXT	ENDS
EXTRN	PyObject_GetIter:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_iter DD imagerel proxy_iter
	DD	imagerel proxy_iter+56
	DD	imagerel $unwind$proxy_iter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_iter DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_iter
_TEXT	SEGMENT
proxy$ = 48
proxy_iter PROC						; COMDAT

; 577  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 578  :     if (!proxy_checkref(proxy))

  00009	e8 00 00 00 00	 call	 proxy_checkref
  0000e	85 c0		 test	 eax, eax
  00010	75 08		 jne	 SHORT $LN1@proxy_iter

; 579  :         return NULL;

  00012	33 c0		 xor	 eax, eax

; 581  : }

  00014	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00018	5b		 pop	 rbx
  00019	c3		 ret	 0
$LN1@proxy_iter:

; 580  :     return PyObject_GetIter(PyWeakref_GET_OBJECT(proxy));

  0001a	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00025	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0002a	48 0f 4f c8	 cmovg	 rcx, rax

; 581  : }

  0002e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00032	5b		 pop	 rbx
  00033	e9 00 00 00 00	 jmp	 PyObject_GetIter
proxy_iter ENDP
_TEXT	ENDS
EXTRN	PyIter_Next:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_iternext DD imagerel proxy_iternext
	DD	imagerel proxy_iternext+56
	DD	imagerel $unwind$proxy_iternext
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_iternext DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT proxy_iternext
_TEXT	SEGMENT
proxy$ = 48
proxy_iternext PROC					; COMDAT

; 585  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 586  :     if (!proxy_checkref(proxy))

  00009	e8 00 00 00 00	 call	 proxy_checkref
  0000e	85 c0		 test	 eax, eax
  00010	75 08		 jne	 SHORT $LN1@proxy_iter@2

; 587  :         return NULL;

  00012	33 c0		 xor	 eax, eax

; 589  : }

  00014	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00018	5b		 pop	 rbx
  00019	c3		 ret	 0
$LN1@proxy_iter@2:

; 588  :     return PyIter_Next(PyWeakref_GET_OBJECT(proxy));

  0001a	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00025	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0002a	48 0f 4f c8	 cmovg	 rcx, rax

; 589  : }

  0002e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00032	5b		 pop	 rbx
  00033	e9 00 00 00 00	 jmp	 PyIter_Next
proxy_iternext ENDP
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
EXTRN	_PyObject_CallMethodId:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_bytes DD imagerel proxy_bytes
	DD	imagerel proxy_bytes+121
	DD	imagerel $unwind$proxy_bytes
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_bytes DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT proxy_bytes
_TEXT	SEGMENT
proxy$ = 48
proxy_bytes PROC					; COMDAT

; 592  : WRAP_METHOD(proxy_bytes, __bytes__)

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyWeakref_ProxyType
  00014	48 3b c1	 cmp	 rax, rcx
  00017	74 0c		 je	 SHORT $LN2@proxy_byte
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyWeakref_CallableProxyType
  00020	48 3b c1	 cmp	 rax, rcx
  00023	75 28		 jne	 SHORT $LN6@proxy_byte
$LN2@proxy_byte:
  00025	48 8b cb	 mov	 rcx, rbx
  00028	e8 00 00 00 00	 call	 proxy_checkref
  0002d	85 c0		 test	 eax, eax
  0002f	75 08		 jne	 SHORT $LN1@proxy_byte
  00031	33 c0		 xor	 eax, eax
  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5b		 pop	 rbx
  00038	c3		 ret	 0
$LN1@proxy_byte:
  00039	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  0003d	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  00044	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00049	48 0f 4f d8	 cmovg	 rbx, rax
$LN6@proxy_byte:
  0004d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00053	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0005c	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId___bytes__@?1??proxy_bytes@@9@9
  00061	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  00065	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0006c	48 8b cb	 mov	 rcx, rbx
  0006f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00073	5b		 pop	 rbx
  00074	e9 00 00 00 00	 jmp	 _PyObject_CallMethodId
proxy_bytes ENDP
_TEXT	ENDS
PUBLIC	PyWeakref_NewRef
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyWeakref_NewRef DD imagerel $LN21
	DD	imagerel $LN21+59
	DD	imagerel $unwind$PyWeakref_NewRef
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyWeakref_NewRef DD imagerel $LN21+59
	DD	imagerel $LN21+209
	DD	imagerel $chain$1$PyWeakref_NewRef
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyWeakref_NewRef DD imagerel $LN21+209
	DD	imagerel $LN21+299
	DD	imagerel $chain$3$PyWeakref_NewRef
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$PyWeakref_NewRef DD imagerel $LN21+299
	DD	imagerel $LN21+345
	DD	imagerel $chain$5$PyWeakref_NewRef
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$PyWeakref_NewRef DD imagerel $LN21+345
	DD	imagerel $LN21+369
	DD	imagerel $chain$7$PyWeakref_NewRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$PyWeakref_NewRef DD 040021H
	DD	0b6400H
	DD	093400H
	DD	imagerel $LN21
	DD	imagerel $LN21+59
	DD	imagerel $unwind$PyWeakref_NewRef
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$PyWeakref_NewRef DD 040021H
	DD	0b6400H
	DD	093400H
	DD	imagerel $LN21
	DD	imagerel $LN21+59
	DD	imagerel $unwind$PyWeakref_NewRef
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyWeakref_NewRef DD 040021H
	DD	0b6400H
	DD	093400H
	DD	imagerel $LN21
	DD	imagerel $LN21+59
	DD	imagerel $unwind$PyWeakref_NewRef
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyWeakref_NewRef DD 040a21H
	DD	0b640aH
	DD	093405H
	DD	imagerel $LN21
	DD	imagerel $LN21+59
	DD	imagerel $unwind$PyWeakref_NewRef
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyWeakref_NewRef DD 020601H
	DD	070025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\weakrefobject.c
xdata	ENDS
;	COMDAT PyWeakref_NewRef
_TEXT	SEGMENT
ref$ = 64
ob$ = 64
callback$ = 72
proxy$ = 80
PyWeakref_NewRef PROC					; COMDAT

; 726  : {

$LN21:
  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 727  :     PyWeakReference *result = NULL;
; 728  :     PyWeakReference **list;
; 729  :     PyWeakReference *ref, *proxy;
; 730  : 
; 731  :     if (!PyType_SUPPORTS_WEAKREFS(Py_TYPE(ob))) {

  00006	4c 8b 41 58	 mov	 r8, QWORD PTR [rcx+88]
  0000a	48 8b fa	 mov	 rdi, rdx
  0000d	4c 8b c9	 mov	 r9, rcx
  00010	49 8b 80 28 01
	00 00		 mov	 rax, QWORD PTR [r8+296]
  00017	48 85 c0	 test	 rax, rax
  0001a	7f 1f		 jg	 SHORT $LN12@PyWeakref_@2

; 732  :         PyErr_Format(PyExc_TypeError,
; 733  :                      "cannot create weak reference to '%s' object",
; 734  :                      Py_TYPE(ob)->tp_name);

  0001c	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00020	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@IJKCCOEC@cannot?5create?5weak?5reference?5to?5@
  0002e	e8 00 00 00 00	 call	 PyErr_Format

; 735  :         return NULL;

  00033	33 c0		 xor	 eax, eax

; 780  : }

  00035	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00039	5f		 pop	 rdi
  0003a	c3		 ret	 0
$LN12@PyWeakref_@2:
  0003b	48 89 5c 24 48	 mov	 QWORD PTR [rsp+72], rbx
  00040	48 89 74 24 58	 mov	 QWORD PTR [rsp+88], rsi

; 736  :     }
; 737  :     list = GET_WEAKREFS_LISTPTR(ob);

  00045	48 8d 34 08	 lea	 rsi, QWORD PTR [rax+rcx]

; 738  :     get_basic_refs(*list, &ref, &proxy);

  00049	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  0004d	4c 8d 44 24 50	 lea	 r8, QWORD PTR proxy$[rsp]
  00052	48 8d 54 24 40	 lea	 rdx, QWORD PTR ref$[rsp]
  00057	e8 00 00 00 00	 call	 get_basic_refs

; 739  :     if (callback == Py_None)

  0005c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  00063	49 3b f8	 cmp	 rdi, r8
  00066	75 04		 jne	 SHORT $LN11@PyWeakref_@2

; 740  :         callback = NULL;

  00068	33 ff		 xor	 edi, edi

; 741  :     if (callback == NULL)

  0006a	eb 05		 jmp	 SHORT $LN19@PyWeakref_@2
$LN11@PyWeakref_@2:
  0006c	48 85 ff	 test	 rdi, rdi
  0006f	75 60		 jne	 SHORT $LN9@PyWeakref_@2
$LN19@PyWeakref_@2:

; 742  :         /* return existing weak reference if it exists */
; 743  :         result = ref;

  00071	48 8b 5c 24 40	 mov	 rbx, QWORD PTR ref$[rsp]

; 744  :     if (result != NULL)

  00076	48 85 db	 test	 rbx, rbx
  00079	74 56		 je	 SHORT $LN9@PyWeakref_@2

; 745  :         Py_INCREF(result);

  0007b	e8 00 00 00 00	 call	 _Py_PXCTX
  00080	85 c0		 test	 eax, eax
  00082	0f 85 d6 00 00
	00		 jne	 $LN1@PyWeakref_@2
  00088	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0008f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00096	4c 8b cb	 mov	 r9, rbx
  00099	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0009f	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000a7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ac	85 c0		 test	 eax, eax
  000ae	75 0a		 jne	 SHORT $LN15@PyWeakref_@2
  000b0	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000b4	0f 84 a4 00 00
	00		 je	 $LN1@PyWeakref_@2
$LN15@PyWeakref_@2:
  000ba	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
  000be	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]

; 776  :             }
; 777  :         }
; 778  :     }
; 779  :     return (PyObject *) result;

  000c3	48 8b c3	 mov	 rax, rbx
  000c6	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]

; 780  : }

  000cb	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000cf	5f		 pop	 rdi
  000d0	c3		 ret	 0
$LN9@PyWeakref_@2:

; 746  :     else {
; 747  :         /* Note: new_weakref() can trigger cyclic GC, so the weakref
; 748  :            list on ob can be mutated.  This means that the ref and
; 749  :            proxy pointers we got back earlier may have been collected,
; 750  :            so we need to compute these values again before we use
; 751  :            them. */
; 752  :         result = new_weakref(ob, callback);

  000d1	48 8b d7	 mov	 rdx, rdi
  000d4	49 8b c9	 mov	 rcx, r9
  000d7	e8 00 00 00 00	 call	 new_weakref
  000dc	48 8b d8	 mov	 rbx, rax

; 753  :         if (result != NULL) {

  000df	48 85 c0	 test	 rax, rax
  000e2	74 7a		 je	 SHORT $LN1@PyWeakref_@2

; 754  :             get_basic_refs(*list, &ref, &proxy);

  000e4	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  000e7	4c 8d 44 24 50	 lea	 r8, QWORD PTR proxy$[rsp]
  000ec	48 8d 54 24 40	 lea	 rdx, QWORD PTR ref$[rsp]
  000f1	e8 00 00 00 00	 call	 get_basic_refs

; 757  :                     insert_head(result, list);

  000f6	48 8b cb	 mov	 rcx, rbx
  000f9	48 85 ff	 test	 rdi, rdi
  000fc	75 2d		 jne	 SHORT $LN6@PyWeakref_@2

; 755  :             if (callback == NULL) {
; 756  :                 if (ref == NULL)

  000fe	48 8b 7c 24 40	 mov	 rdi, QWORD PTR ref$[rsp]
  00103	48 85 ff	 test	 rdi, rdi

; 758  :                 else {

  00106	74 36		 je	 SHORT $LN20@PyWeakref_@2

; 759  :                     /* Someone else added a ref without a callback
; 760  :                        during GC.  Return that one instead of this one
; 761  :                        to avoid violating the invariants of the list
; 762  :                        of weakrefs for ob. */
; 763  :                     Py_DECREF(result);

  00108	e8 00 00 00 00	 call	 _Py_DecRef

; 764  :                     Py_INCREF(ref);

  0010d	48 8b cf	 mov	 rcx, rdi
  00110	e8 00 00 00 00	 call	 _Py_IncRef
  00115	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]

; 765  :                     result = ref;

  0011a	48 8b df	 mov	 rbx, rdi

; 776  :             }
; 777  :         }
; 778  :     }
; 779  :     return (PyObject *) result;

  0011d	48 8b c3	 mov	 rax, rbx
  00120	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]

; 780  : }

  00125	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00129	5f		 pop	 rdi
  0012a	c3		 ret	 0
$LN6@PyWeakref_@2:

; 766  :                 }
; 767  :             }
; 768  :             else {
; 769  :                 PyWeakReference *prev;
; 770  : 
; 771  :                 prev = (proxy == NULL) ? ref : proxy;

  0012b	48 8b 54 24 50	 mov	 rdx, QWORD PTR proxy$[rsp]
  00130	48 85 d2	 test	 rdx, rdx
  00133	48 0f 44 54 24
	40		 cmove	 rdx, QWORD PTR ref$[rsp]

; 772  :                 if (prev == NULL)

  00139	48 85 d2	 test	 rdx, rdx
  0013c	75 1b		 jne	 SHORT $LN2@PyWeakref_@2
$LN20@PyWeakref_@2:

; 773  :                     insert_head(result, list);

  0013e	48 8b d6	 mov	 rdx, rsi
  00141	e8 00 00 00 00	 call	 insert_head
  00146	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]

; 776  :             }
; 777  :         }
; 778  :     }
; 779  :     return (PyObject *) result;

  0014b	48 8b c3	 mov	 rax, rbx
  0014e	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]

; 780  : }

  00153	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00157	5f		 pop	 rdi
  00158	c3		 ret	 0
$LN2@PyWeakref_@2:

; 774  :                 else
; 775  :                     insert_after(result, prev);

  00159	e8 00 00 00 00	 call	 insert_after
$LN1@PyWeakref_@2:
  0015e	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]

; 776  :             }
; 777  :         }
; 778  :     }
; 779  :     return (PyObject *) result;

  00163	48 8b c3	 mov	 rax, rbx
  00166	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]

; 780  : }

  0016b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0016f	5f		 pop	 rdi
  00170	c3		 ret	 0
PyWeakref_NewRef ENDP
_TEXT	ENDS
PUBLIC	PyWeakref_NewProxy
EXTRN	PyCallable_Check:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyWeakref_NewProxy DD imagerel $LN21
	DD	imagerel $LN21+371
	DD	imagerel $unwind$PyWeakref_NewProxy
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyWeakref_NewProxy DD 074701H
	DD	065447H
	DD	0b3442H
	DD	070036207H
	DD	06002H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\weakrefobject.c
xdata	ENDS
;	COMDAT PyWeakref_NewProxy
_TEXT	SEGMENT
proxy$ = 80
ob$ = 80
callback$ = 88
ref$ = 96
PyWeakref_NewProxy PROC					; COMDAT

; 785  : {

$LN21:
  00000	40 56		 push	 rsi
  00002	57		 push	 rdi
  00003	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 786  :     PyWeakReference *result = NULL;
; 787  :     PyWeakReference **list;
; 788  :     PyWeakReference *ref, *proxy;
; 789  : 
; 790  :     if (!PyType_SUPPORTS_WEAKREFS(Py_TYPE(ob))) {

  00007	4c 8b 41 58	 mov	 r8, QWORD PTR [rcx+88]
  0000b	48 8b fa	 mov	 rdi, rdx
  0000e	48 8b f1	 mov	 rsi, rcx
  00011	49 8b 80 28 01
	00 00		 mov	 rax, QWORD PTR [r8+296]
  00018	48 85 c0	 test	 rax, rax
  0001b	7f 20		 jg	 SHORT $LN13@PyWeakref_@3

; 791  :         PyErr_Format(PyExc_TypeError,
; 792  :                      "cannot create weak reference to '%s' object",
; 793  :                      Py_TYPE(ob)->tp_name);

  0001d	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00021	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@IJKCCOEC@cannot?5create?5weak?5reference?5to?5@
  0002f	e8 00 00 00 00	 call	 PyErr_Format

; 794  :         return NULL;

  00034	33 c0		 xor	 eax, eax

; 844  : }

  00036	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003a	5f		 pop	 rdi
  0003b	5e		 pop	 rsi
  0003c	c3		 ret	 0
$LN13@PyWeakref_@3:
  0003d	48 89 5c 24 58	 mov	 QWORD PTR [rsp+88], rbx
  00042	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp

; 795  :     }
; 796  :     list = GET_WEAKREFS_LISTPTR(ob);

  00047	48 8d 2c 08	 lea	 rbp, QWORD PTR [rax+rcx]

; 797  :     get_basic_refs(*list, &ref, &proxy);

  0004b	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  0004f	4c 8d 44 24 50	 lea	 r8, QWORD PTR proxy$[rsp]
  00054	48 8d 54 24 60	 lea	 rdx, QWORD PTR ref$[rsp]
  00059	e8 00 00 00 00	 call	 get_basic_refs

; 798  :     if (callback == Py_None)

  0005e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  00065	49 3b f8	 cmp	 rdi, r8
  00068	75 04		 jne	 SHORT $LN12@PyWeakref_@3

; 799  :         callback = NULL;

  0006a	33 ff		 xor	 edi, edi

; 800  :     if (callback == NULL)

  0006c	eb 05		 jmp	 SHORT $LN20@PyWeakref_@3
$LN12@PyWeakref_@3:
  0006e	48 85 ff	 test	 rdi, rdi
  00071	75 52		 jne	 SHORT $LN10@PyWeakref_@3
$LN20@PyWeakref_@3:

; 801  :         /* attempt to return an existing weak reference if it exists */
; 802  :         result = proxy;

  00073	48 8b 5c 24 50	 mov	 rbx, QWORD PTR proxy$[rsp]

; 803  :     if (result != NULL)

  00078	48 85 db	 test	 rbx, rbx
  0007b	74 48		 je	 SHORT $LN10@PyWeakref_@3

; 804  :         Py_INCREF(result);

  0007d	e8 00 00 00 00	 call	 _Py_PXCTX
  00082	85 c0		 test	 eax, eax
  00084	0f 85 d5 00 00
	00		 jne	 $skip_insert$21731
  0008a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00091	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00098	4c 8b cb	 mov	 r9, rbx
  0009b	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000a1	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000a9	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ae	85 c0		 test	 eax, eax
  000b0	75 0a		 jne	 SHORT $LN16@PyWeakref_@3
  000b2	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000b6	0f 84 a3 00 00
	00		 je	 $skip_insert$21731
$LN16@PyWeakref_@3:
  000bc	48 ff 43 50	 inc	 QWORD PTR [rbx+80]

; 805  :     else {

  000c0	e9 9a 00 00 00	 jmp	 $skip_insert$21731
$LN10@PyWeakref_@3:

; 806  :         /* Note: new_weakref() can trigger cyclic GC, so the weakref
; 807  :            list on ob can be mutated.  This means that the ref and
; 808  :            proxy pointers we got back earlier may have been collected,
; 809  :            so we need to compute these values again before we use
; 810  :            them. */
; 811  :         result = new_weakref(ob, callback);

  000c5	48 8b d7	 mov	 rdx, rdi
  000c8	48 8b ce	 mov	 rcx, rsi
  000cb	e8 00 00 00 00	 call	 new_weakref
  000d0	48 8b d8	 mov	 rbx, rax

; 812  :         if (result != NULL) {

  000d3	48 85 c0	 test	 rax, rax
  000d6	0f 84 83 00 00
	00		 je	 $skip_insert$21731

; 813  :             PyWeakReference *prev;
; 814  : 
; 815  :             if (PyCallable_Check(ob))

  000dc	48 8b ce	 mov	 rcx, rsi
  000df	e8 00 00 00 00	 call	 PyCallable_Check
  000e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_PyWeakref_ProxyType
  000eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyWeakref_CallableProxyType
  000f2	85 c0		 test	 eax, eax

; 816  :                 Py_TYPE(result) = &_PyWeakref_CallableProxyType;
; 817  :             else
; 818  :                 Py_TYPE(result) = &_PyWeakref_ProxyType;
; 819  :             get_basic_refs(*list, &ref, &proxy);

  000f4	4c 8d 44 24 50	 lea	 r8, QWORD PTR proxy$[rsp]
  000f9	48 0f 44 ca	 cmove	 rcx, rdx
  000fd	48 8d 54 24 60	 lea	 rdx, QWORD PTR ref$[rsp]
  00102	48 89 4b 58	 mov	 QWORD PTR [rbx+88], rcx
  00106	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
  0010a	e8 00 00 00 00	 call	 get_basic_refs

; 820  :             if (callback == NULL) {

  0010f	48 85 ff	 test	 rdi, rdi
  00112	75 26		 jne	 SHORT $LN5@PyWeakref_@3

; 821  :                 if (proxy != NULL) {

  00114	48 8b 7c 24 50	 mov	 rdi, QWORD PTR proxy$[rsp]
  00119	48 85 ff	 test	 rdi, rdi
  0011c	74 15		 je	 SHORT $LN4@PyWeakref_@3

; 822  :                     /* Someone else added a proxy without a callback
; 823  :                        during GC.  Return that one instead of this one
; 824  :                        to avoid violating the invariants of the list
; 825  :                        of weakrefs for ob. */
; 826  :                     Py_DECREF(result);

  0011e	48 8b cb	 mov	 rcx, rbx
  00121	e8 00 00 00 00	 call	 _Py_DecRef

; 827  :                     Py_INCREF(result = proxy);

  00126	48 8b cf	 mov	 rcx, rdi
  00129	48 8b df	 mov	 rbx, rdi
  0012c	e8 00 00 00 00	 call	 _Py_IncRef

; 828  :                     goto skip_insert;

  00131	eb 2c		 jmp	 SHORT $skip_insert$21731
$LN4@PyWeakref_@3:

; 829  :                 }
; 830  :                 prev = ref;

  00133	48 8b 54 24 60	 mov	 rdx, QWORD PTR ref$[rsp]

; 831  :             }
; 832  :             else

  00138	eb 0e		 jmp	 SHORT $LN3@PyWeakref_@3
$LN5@PyWeakref_@3:

; 833  :                 prev = (proxy == NULL) ? ref : proxy;

  0013a	48 8b 54 24 50	 mov	 rdx, QWORD PTR proxy$[rsp]
  0013f	48 85 d2	 test	 rdx, rdx
  00142	48 0f 44 54 24
	60		 cmove	 rdx, QWORD PTR ref$[rsp]
$LN3@PyWeakref_@3:

; 834  : 
; 835  :             if (prev == NULL)
; 836  :                 insert_head(result, list);

  00148	48 8b cb	 mov	 rcx, rbx
  0014b	48 85 d2	 test	 rdx, rdx
  0014e	75 0a		 jne	 SHORT $LN2@PyWeakref_@3
  00150	48 8b d5	 mov	 rdx, rbp
  00153	e8 00 00 00 00	 call	 insert_head

; 837  :             else

  00158	eb 05		 jmp	 SHORT $skip_insert$21731
$LN2@PyWeakref_@3:

; 838  :                 insert_after(result, prev);

  0015a	e8 00 00 00 00	 call	 insert_after
$skip_insert$21731:
  0015f	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]

; 839  :         skip_insert:
; 840  :             ;
; 841  :         }
; 842  :     }
; 843  :     return (PyObject *) result;

  00164	48 8b c3	 mov	 rax, rbx
  00167	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]

; 844  : }

  0016c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00170	5f		 pop	 rdi
  00171	5e		 pop	 rsi
  00172	c3		 ret	 0
PyWeakref_NewProxy ENDP
_TEXT	ENDS
PUBLIC	PyWeakref_GetObject
EXTRN	_PyErr_BadInternalCall:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyWeakref_GetObject DD imagerel $LN7
	DD	imagerel $LN7+118
	DD	imagerel $unwind$PyWeakref_GetObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyWeakref_GetObject DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyWeakref_GetObject
_TEXT	SEGMENT
ref$ = 48
PyWeakref_GetObject PROC				; COMDAT

; 849  : {

$LN7:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 850  :     if (ref == NULL || !PyWeakref_Check(ref)) {

  00009	48 85 c9	 test	 rcx, rcx
  0000c	74 4f		 je	 SHORT $LN1@PyWeakref_@4
  0000e	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_PyWeakref_RefType
  00019	48 3b ca	 cmp	 rcx, rdx
  0001c	74 25		 je	 SHORT $LN2@PyWeakref_@4
  0001e	e8 00 00 00 00	 call	 PyType_IsSubtype
  00023	85 c0		 test	 eax, eax
  00025	75 1c		 jne	 SHORT $LN2@PyWeakref_@4
  00027	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyWeakref_ProxyType
  00032	48 3b c1	 cmp	 rax, rcx
  00035	74 0c		 je	 SHORT $LN2@PyWeakref_@4
  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyWeakref_CallableProxyType
  0003e	48 3b c1	 cmp	 rax, rcx
  00041	75 1a		 jne	 SHORT $LN1@PyWeakref_@4
$LN2@PyWeakref_@4:

; 853  :     }
; 854  :     return PyWeakref_GET_OBJECT(ref);

  00043	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00047	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0004e	48 83 79 50 00	 cmp	 QWORD PTR [rcx+80], 0
  00053	48 0f 4f c1	 cmovg	 rax, rcx

; 855  : }

  00057	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005b	5b		 pop	 rbx
  0005c	c3		 ret	 0
$LN1@PyWeakref_@4:

; 851  :         PyErr_BadInternalCall();

  0005d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@LBKJPICB@?4?4?2Objects?2weakrefobject?4c?$AA@
  00064	ba 53 03 00 00	 mov	 edx, 851		; 00000353H
  00069	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 852  :         return NULL;

  0006e	33 c0		 xor	 eax, eax

; 855  : }

  00070	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00074	5b		 pop	 rbx
  00075	c3		 ret	 0
PyWeakref_GetObject ENDP
_TEXT	ENDS
EXTRN	PyErr_WriteUnraisable:PROC
EXTRN	PyObject_CallFunctionObjArgs:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$handle_callback DD imagerel handle_callback
	DD	imagerel handle_callback+54
	DD	imagerel $unwind$handle_callback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$handle_callback DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT handle_callback
_TEXT	SEGMENT
ref$ = 48
callback$ = 56
handle_callback PROC					; COMDAT

; 862  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b da	 mov	 rbx, rdx

; 863  :     PyObject *cbresult = PyObject_CallFunctionObjArgs(callback, ref, NULL);

  00009	48 8b d1	 mov	 rdx, rcx
  0000c	45 33 c0	 xor	 r8d, r8d
  0000f	48 8b cb	 mov	 rcx, rbx
  00012	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs

; 864  : 
; 865  :     if (cbresult == NULL)

  00017	48 85 c0	 test	 rax, rax
  0001a	75 0d		 jne	 SHORT $LN2@handle_cal

; 866  :         PyErr_WriteUnraisable(callback);

  0001c	48 8b cb	 mov	 rcx, rbx

; 869  : }

  0001f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00023	5b		 pop	 rbx
  00024	e9 00 00 00 00	 jmp	 PyErr_WriteUnraisable
$LN2@handle_cal:

; 867  :     else
; 868  :         Py_DECREF(cbresult);

  00029	48 8b c8	 mov	 rcx, rax

; 869  : }

  0002c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00030	5b		 pop	 rbx
  00031	e9 00 00 00 00	 jmp	 _Py_DecRef
handle_callback ENDP
_TEXT	ENDS
PUBLIC	PyObject_ClearWeakRefs
EXTRN	PyErr_Restore:PROC
EXTRN	PyTuple_New:PROC
EXTRN	PyErr_Fetch:PROC
EXTRN	PyErr_Occurred:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_ClearWeakRefs DD imagerel $LN34
	DD	imagerel $LN34+116
	DD	imagerel $unwind$PyObject_ClearWeakRefs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyObject_ClearWeakRefs DD imagerel $LN34+116
	DD	imagerel $LN34+295
	DD	imagerel $chain$2$PyObject_ClearWeakRefs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyObject_ClearWeakRefs DD imagerel $LN34+295
	DD	imagerel $LN34+302
	DD	imagerel $chain$3$PyObject_ClearWeakRefs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyObject_ClearWeakRefs DD imagerel $LN34+302
	DD	imagerel $LN34+311
	DD	imagerel $chain$4$PyObject_ClearWeakRefs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$PyObject_ClearWeakRefs DD imagerel $LN34+311
	DD	imagerel $LN34+423
	DD	imagerel $chain$7$PyObject_ClearWeakRefs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$PyObject_ClearWeakRefs DD imagerel $LN34+423
	DD	imagerel $LN34+500
	DD	imagerel $chain$8$PyObject_ClearWeakRefs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$PyObject_ClearWeakRefs DD imagerel $LN34+500
	DD	imagerel $LN34+523
	DD	imagerel $chain$9$PyObject_ClearWeakRefs
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$PyObject_ClearWeakRefs DD 021H
	DD	imagerel $LN34
	DD	imagerel $LN34+116
	DD	imagerel $unwind$PyObject_ClearWeakRefs
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$PyObject_ClearWeakRefs DD 021H
	DD	imagerel $LN34+302
	DD	imagerel $LN34+311
	DD	imagerel $chain$4$PyObject_ClearWeakRefs
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$PyObject_ClearWeakRefs DD 060f21H
	DD	06d40fH
	DD	08640aH
	DD	0f5405H
	DD	imagerel $LN34+302
	DD	imagerel $LN34+311
	DD	imagerel $chain$4$PyObject_ClearWeakRefs
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyObject_ClearWeakRefs DD 060021H
	DD	04f400H
	DD	05e400H
	DD	07c400H
	DD	imagerel $LN34
	DD	imagerel $LN34+116
	DD	imagerel $unwind$PyObject_ClearWeakRefs
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyObject_ClearWeakRefs DD 021H
	DD	imagerel $LN34
	DD	imagerel $LN34+116
	DD	imagerel $unwind$PyObject_ClearWeakRefs
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyObject_ClearWeakRefs DD 064221H
	DD	07c442H
	DD	04f40aH
	DD	05e405H
	DD	imagerel $LN34
	DD	imagerel $LN34+116
	DD	imagerel $unwind$PyObject_ClearWeakRefs
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_ClearWeakRefs DD 030701H
	DD	070038207H
	DD	03002H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyObject_ClearWeakRefs
_TEXT	SEGMENT
err_tb$21789 = 96
object$ = 96
err_value$21788 = 104
err_type$21787 = 112
PyObject_ClearWeakRefs PROC				; COMDAT

; 879  : {

$LN34:
  00000	40 53		 push	 rbx
  00002	57		 push	 rdi
  00003	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00007	48 8b d9	 mov	 rbx, rcx

; 880  :     PyWeakReference **list;
; 881  : 
; 882  :     if (object == NULL
; 883  :         || !PyType_SUPPORTS_WEAKREFS(Py_TYPE(object))
; 884  :         || object->ob_refcnt != 0) {

  0000a	48 85 c9	 test	 rcx, rcx
  0000d	0f 84 e1 01 00
	00		 je	 $LN21@PyObject_C
  00013	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00017	48 8b b8 28 01
	00 00		 mov	 rdi, QWORD PTR [rax+296]
  0001e	48 85 ff	 test	 rdi, rdi
  00021	0f 8e cd 01 00
	00		 jle	 $LN21@PyObject_C
  00027	48 83 79 50 00	 cmp	 QWORD PTR [rcx+80], 0
  0002c	0f 85 c2 01 00
	00		 jne	 $LN21@PyObject_C

; 886  :         return;
; 887  :     }
; 888  :     list = GET_WEAKREFS_LISTPTR(object);
; 889  :     /* Remove the callback-less basic and proxy references */
; 890  :     if (*list != NULL && (*list)->wr_callback == NULL) {

  00032	48 8b 0c 0f	 mov	 rcx, QWORD PTR [rdi+rcx]
  00036	48 85 c9	 test	 rcx, rcx
  00039	0f 84 e8 00 00
	00		 je	 $LN1@PyObject_C
  0003f	48 83 79 68 00	 cmp	 QWORD PTR [rcx+104], 0
  00044	75 1e		 jne	 SHORT $LN19@PyObject_C

; 891  :         clear_weakref(*list);

  00046	e8 00 00 00 00	 call	 clear_weakref

; 892  :         if (*list != NULL && (*list)->wr_callback == NULL)

  0004b	48 8b 0c 1f	 mov	 rcx, QWORD PTR [rdi+rbx]
  0004f	48 85 c9	 test	 rcx, rcx
  00052	0f 84 cf 00 00
	00		 je	 $LN1@PyObject_C
  00058	48 83 79 68 00	 cmp	 QWORD PTR [rcx+104], 0
  0005d	75 05		 jne	 SHORT $LN19@PyObject_C

; 893  :             clear_weakref(*list);

  0005f	e8 00 00 00 00	 call	 clear_weakref
$LN19@PyObject_C:

; 894  :     }
; 895  :     if (*list != NULL) {

  00064	48 8b 1c 1f	 mov	 rbx, QWORD PTR [rdi+rbx]
  00068	48 85 db	 test	 rbx, rbx
  0006b	0f 84 b6 00 00
	00		 je	 $LN1@PyObject_C

; 896  :         PyWeakReference *current = *list;
; 897  :         Py_ssize_t count = _PyWeakref_GetWeakrefCount(current);

  00071	48 8b cb	 mov	 rcx, rbx
  00074	4c 89 74 24 28	 mov	 QWORD PTR [rsp+40], r14
  00079	4c 89 7c 24 20	 mov	 QWORD PTR [rsp+32], r15
  0007e	e8 00 00 00 00	 call	 _PyWeakref_GetWeakrefCount
  00083	48 8b f8	 mov	 rdi, rax

; 898  :         int restore_error = PyErr_Occurred() ? 1 : 0;

  00086	e8 00 00 00 00	 call	 PyErr_Occurred
  0008b	45 33 ff	 xor	 r15d, r15d
  0008e	48 85 c0	 test	 rax, rax
  00091	45 8b f7	 mov	 r14d, r15d
  00094	41 0f 95 c6	 setne	 r14b

; 899  :         PyObject *err_type, *err_value, *err_tb;
; 900  : 
; 901  :         if (restore_error)

  00098	45 85 f6	 test	 r14d, r14d
  0009b	74 14		 je	 SHORT $LN17@PyObject_C

; 902  :             PyErr_Fetch(&err_type, &err_value, &err_tb);

  0009d	4c 8d 44 24 60	 lea	 r8, QWORD PTR err_tb$21789[rsp]
  000a2	48 8d 54 24 68	 lea	 rdx, QWORD PTR err_value$21788[rsp]
  000a7	48 8d 4c 24 70	 lea	 rcx, QWORD PTR err_type$21787[rsp]
  000ac	e8 00 00 00 00	 call	 PyErr_Fetch
$LN17@PyObject_C:

; 903  :         if (count == 1) {

  000b1	4c 89 64 24 38	 mov	 QWORD PTR [rsp+56], r12
  000b6	48 83 ff 01	 cmp	 rdi, 1
  000ba	75 32		 jne	 SHORT $LN16@PyObject_C

; 904  :             PyObject *callback = current->wr_callback;

  000bc	48 8b 7b 68	 mov	 rdi, QWORD PTR [rbx+104]

; 905  : 
; 906  :             current->wr_callback = NULL;
; 907  :             clear_weakref(current);

  000c0	48 8b cb	 mov	 rcx, rbx
  000c3	4c 89 7b 68	 mov	 QWORD PTR [rbx+104], r15
  000c7	e8 00 00 00 00	 call	 clear_weakref

; 908  :             if (callback != NULL) {

  000cc	48 85 ff	 test	 rdi, rdi
  000cf	0f 84 fd 00 00
	00		 je	 $LN13@PyObject_C

; 909  :                 if (((PyObject *)current)->ob_refcnt > 0)

  000d5	4c 39 7b 50	 cmp	 QWORD PTR [rbx+80], r15
  000d9	7e 0b		 jle	 SHORT $LN14@PyObject_C

; 910  :                     handle_callback(current, callback);

  000db	48 8b d7	 mov	 rdx, rdi
  000de	48 8b cb	 mov	 rcx, rbx
  000e1	e8 00 00 00 00	 call	 handle_callback
$LN14@PyObject_C:

; 911  :                 Py_DECREF(callback);

  000e6	48 8b cf	 mov	 rcx, rdi

; 912  :             }
; 913  :         }
; 914  :         else {

  000e9	e9 df 00 00 00	 jmp	 $LN32@PyObject_C
$LN16@PyObject_C:

; 915  :             PyObject *tuple;
; 916  :             Py_ssize_t i = 0;
; 917  : 
; 918  :             tuple = PyTuple_New(count * 2);

  000ee	48 8d 0c 3f	 lea	 rcx, QWORD PTR [rdi+rdi]
  000f2	e8 00 00 00 00	 call	 PyTuple_New
  000f7	4c 8b e0	 mov	 r12, rax

; 919  :             if (tuple == NULL) {

  000fa	48 85 c0	 test	 rax, rax
  000fd	75 2f		 jne	 SHORT $LN12@PyObject_C

; 920  :                 if (restore_error)

  000ff	45 85 f6	 test	 r14d, r14d
  00102	74 14		 je	 SHORT $LN31@PyObject_C

; 921  :                     PyErr_Fetch(&err_type, &err_value, &err_tb);

  00104	4c 8d 44 24 60	 lea	 r8, QWORD PTR err_tb$21789[rsp]
  00109	48 8d 54 24 68	 lea	 rdx, QWORD PTR err_value$21788[rsp]
  0010e	48 8d 4c 24 70	 lea	 rcx, QWORD PTR err_type$21787[rsp]
  00113	e8 00 00 00 00	 call	 PyErr_Fetch
$LN31@PyObject_C:
  00118	4c 8b 64 24 38	 mov	 r12, QWORD PTR [rsp+56]
  0011d	4c 8b 74 24 28	 mov	 r14, QWORD PTR [rsp+40]
  00122	4c 8b 7c 24 20	 mov	 r15, QWORD PTR [rsp+32]
$LN1@PyObject_C:

; 954  :     }
; 955  : }

  00127	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0012b	5f		 pop	 rdi
  0012c	5b		 pop	 rbx
  0012d	c3		 ret	 0
$LN12@PyObject_C:

; 922  :                 return;
; 923  :             }
; 924  : 
; 925  :             for (i = 0; i < count; ++i) {

  0012e	48 85 ff	 test	 rdi, rdi
  00131	0f 8e 93 00 00
	00		 jle	 $LN3@PyObject_C
  00137	48 89 6c 24 78	 mov	 QWORD PTR [rsp+120], rbp
  0013c	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  00141	4c 89 6c 24 30	 mov	 QWORD PTR [rsp+48], r13
  00146	4c 8b ef	 mov	 r13, rdi
  00149	48 8d 70 78	 lea	 rsi, QWORD PTR [rax+120]
  0014d	0f 1f 00	 npad	 3
$LL10@PyObject_C:

; 926  :                 PyWeakReference *next = current->wr_next;

  00150	48 8b ab 80 00
	00 00		 mov	 rbp, QWORD PTR [rbx+128]

; 927  : 
; 928  :                 if (((PyObject *)current)->ob_refcnt > 0)

  00157	4c 39 7b 50	 cmp	 QWORD PTR [rbx+80], r15
  0015b	7e 15		 jle	 SHORT $LN7@PyObject_C

; 929  :                 {
; 930  :                     Py_INCREF(current);

  0015d	48 8b cb	 mov	 rcx, rbx
  00160	e8 00 00 00 00	 call	 _Py_IncRef

; 931  :                     PyTuple_SET_ITEM(tuple, i * 2, (PyObject *) current);

  00165	48 89 5e f8	 mov	 QWORD PTR [rsi-8], rbx

; 932  :                     PyTuple_SET_ITEM(tuple, i * 2 + 1, current->wr_callback);

  00169	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  0016d	48 89 06	 mov	 QWORD PTR [rsi], rax

; 933  :                 }
; 934  :                 else {

  00170	eb 09		 jmp	 SHORT $LN6@PyObject_C
$LN7@PyObject_C:

; 935  :                     Py_DECREF(current->wr_callback);

  00172	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00176	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@PyObject_C:

; 936  :                 }
; 937  :                 current->wr_callback = NULL;
; 938  :                 clear_weakref(current);

  0017b	48 8b cb	 mov	 rcx, rbx
  0017e	4c 89 7b 68	 mov	 QWORD PTR [rbx+104], r15
  00182	e8 00 00 00 00	 call	 clear_weakref
  00187	48 83 c6 10	 add	 rsi, 16
  0018b	49 ff cd	 dec	 r13

; 939  :                 current = next;

  0018e	48 8b dd	 mov	 rbx, rbp
  00191	75 bd		 jne	 SHORT $LL10@PyObject_C

; 940  :             }
; 941  :             for (i = 0; i < count; ++i) {

  00193	4c 8b 6c 24 30	 mov	 r13, QWORD PTR [rsp+48]
  00198	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0019d	48 8b 6c 24 78	 mov	 rbp, QWORD PTR [rsp+120]
  001a2	48 85 ff	 test	 rdi, rdi
  001a5	7e 23		 jle	 SHORT $LN3@PyObject_C
  001a7	49 8d 5c 24 70	 lea	 rbx, QWORD PTR [r12+112]
  001ac	0f 1f 40 00	 npad	 4
$LL5@PyObject_C:

; 942  :                 PyObject *callback = PyTuple_GET_ITEM(tuple, i * 2 + 1);

  001b0	48 8b 53 08	 mov	 rdx, QWORD PTR [rbx+8]

; 943  : 
; 944  :                 /* The tuple may have slots left to NULL */
; 945  :                 if (callback != NULL) {

  001b4	48 85 d2	 test	 rdx, rdx
  001b7	74 08		 je	 SHORT $LN4@PyObject_C

; 946  :                     PyObject *item = PyTuple_GET_ITEM(tuple, i * 2);
; 947  :                     handle_callback((PyWeakReference *)item, callback);

  001b9	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  001bc	e8 00 00 00 00	 call	 handle_callback
$LN4@PyObject_C:

; 940  :             }
; 941  :             for (i = 0; i < count; ++i) {

  001c1	48 83 c3 10	 add	 rbx, 16
  001c5	48 ff cf	 dec	 rdi
  001c8	75 e6		 jne	 SHORT $LL5@PyObject_C
$LN3@PyObject_C:

; 948  :                 }
; 949  :             }
; 950  :             Py_DECREF(tuple);

  001ca	49 8b cc	 mov	 rcx, r12
$LN32@PyObject_C:
  001cd	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@PyObject_C:

; 951  :         }
; 952  :         if (restore_error)

  001d2	45 85 f6	 test	 r14d, r14d
  001d5	0f 84 3d ff ff
	ff		 je	 $LN31@PyObject_C

; 953  :             PyErr_Restore(err_type, err_value, err_tb);

  001db	4c 8b 44 24 60	 mov	 r8, QWORD PTR err_tb$21789[rsp]
  001e0	48 8b 54 24 68	 mov	 rdx, QWORD PTR err_value$21788[rsp]
  001e5	48 8b 4c 24 70	 mov	 rcx, QWORD PTR err_type$21787[rsp]
  001ea	e8 00 00 00 00	 call	 PyErr_Restore
  001ef	e9 24 ff ff ff	 jmp	 $LN31@PyObject_C
$LN21@PyObject_C:

; 885  :         PyErr_BadInternalCall();

  001f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@LBKJPICB@?4?4?2Objects?2weakrefobject?4c?$AA@
  001fb	ba 75 03 00 00	 mov	 edx, 885		; 00000375H

; 954  :     }
; 955  : }

  00200	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00204	5f		 pop	 rdi
  00205	5b		 pop	 rbx
  00206	e9 00 00 00 00	 jmp	 _PyErr_BadInternalCall
PyObject_ClearWeakRefs ENDP
_TEXT	ENDS
END
