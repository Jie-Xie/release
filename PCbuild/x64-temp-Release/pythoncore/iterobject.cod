; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BC@JKMIFFLL@callable_iterator?$AA@	; `string'
PUBLIC	??_C@_08EAMFHCBD@iterator?$AA@			; `string'
PUBLIC	??_C@_0N@MOOGCAMH@__setstate__?$AA@		; `string'
PUBLIC	??_C@_0L@NNMACJIG@__reduce__?$AA@		; `string'
PUBLIC	??_C@_0BA@BJLPBKGK@__length_hint__?$AA@		; `string'
PUBLIC	PySeqIter_Type
PUBLIC	PyCallIter_Type
EXTRN	PyObject_SelfIter:PROC
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
;	COMDAT ??_C@_0BC@JKMIFFLL@callable_iterator?$AA@
CONST	SEGMENT
??_C@_0BC@JKMIFFLL@callable_iterator?$AA@ DB 'callable_iterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EAMFHCBD@iterator?$AA@
CONST	SEGMENT
??_C@_08EAMFHCBD@iterator?$AA@ DB 'iterator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MOOGCAMH@__setstate__?$AA@
CONST	SEGMENT
??_C@_0N@MOOGCAMH@__setstate__?$AA@ DB '__setstate__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNMACJIG@__reduce__?$AA@
CONST	SEGMENT
??_C@_0L@NNMACJIG@__reduce__?$AA@ DB '__reduce__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BJLPBKGK@__length_hint__?$AA@
CONST	SEGMENT
??_C@_0BA@BJLPBKGK@__length_hint__?$AA@ DB '__length_hint__', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
length_hint_doc DB 'Private method returning an estimate of len(list(it))'
	DB	'.', 00H
	ORG $+1
reduce_doc DB	'Return state information for pickling.', 00H
	ORG $+1
setstate_doc DB	'Set state information for unpickling.', 00H
	ORG $+10
seqiter_methods DQ FLAT:??_C@_0BA@BJLPBKGK@__length_hint__?$AA@
	DQ	FLAT:iter_len
	DD	04H
	ORG $+4
	DQ	FLAT:length_hint_doc
	DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:iter_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	FLAT:??_C@_0N@MOOGCAMH@__setstate__?$AA@
	DQ	FLAT:iter_setstate
	DD	08H
	ORG $+4
	DQ	FLAT:setstate_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PySeqIter_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_08EAMFHCBD@iterator?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:iter_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:iter_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:iter_iternext
	DQ	FLAT:seqiter_methods
	DQ	0000000000000000H
	ORG $+144
calliter_methods DQ FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:calliter_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PyCallIter_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BC@JKMIFFLL@callable_iterator?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:calliter_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:calliter_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:calliter_iternext
	DQ	FLAT:calliter_methods
	ORG $+152
_DATA	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ ; `string'
PUBLIC	??_C@_0O@GNGGBDLJ@PySeqIter_New?$AA@		; `string'
PUBLIC	??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@ ; `string'
PUBLIC	PySeqIter_New
EXTRN	_PyGC_generation0:QWORD
EXTRN	Py_FatalError:PROC
EXTRN	_PyObject_GC_New:PROC
EXTRN	_PxObject_New:PROC
EXTRN	_PyErr_BadInternalCall:PROC
EXTRN	PySequence_Check:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySeqIter_New DD imagerel $LN20
	DD	imagerel $LN20+41
	DD	imagerel $unwind$PySeqIter_New
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PySeqIter_New DD imagerel $LN20+41
	DD	imagerel $LN20+93
	DD	imagerel $chain$0$PySeqIter_New
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PySeqIter_New DD imagerel $LN20+93
	DD	imagerel $LN20+333
	DD	imagerel $chain$3$PySeqIter_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PySeqIter_New DD 040521H
	DD	083405H
	DD	097400H
	DD	imagerel $LN20
	DD	imagerel $LN20+41
	DD	imagerel $unwind$PySeqIter_New
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PySeqIter_New DD 020521H
	DD	097405H
	DD	imagerel $LN20
	DD	imagerel $LN20+41
	DD	imagerel $unwind$PySeqIter_New
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySeqIter_New DD 020601H
	DD	060025206H
xdata	ENDS
;	COMDAT ??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
CONST	SEGMENT
??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ DB 'GC object alread'
	DB	'y tracked', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GNGGBDLJ@PySeqIter_New?$AA@
CONST	SEGMENT
??_C@_0O@GNGGBDLJ@PySeqIter_New?$AA@ DB 'PySeqIter_New', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@
CONST	SEGMENT
??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@ DB '..\Objects\itero'
	DB	'bject.c', 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\iterobject.c
CONST	ENDS
;	COMDAT PySeqIter_New
_TEXT	SEGMENT
seq$ = 64
PySeqIter_New PROC					; COMDAT

; 13   : {

$LN20:
  00000	40 56		 push	 rsi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b f1	 mov	 rsi, rcx

; 14   :     seqiterobject *it;
; 15   : 
; 16   :     if (!PySequence_Check(seq)) {

  00009	e8 00 00 00 00	 call	 PySequence_Check
  0000e	85 c0		 test	 eax, eax
  00010	75 17		 jne	 SHORT $LN7@PySeqIter_

; 17   :         PyErr_BadInternalCall();

  00012	8d 50 11	 lea	 edx, QWORD PTR [rax+17]
  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@
  0001c	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 18   :         return NULL;

  00021	33 c0		 xor	 eax, eax

; 28   : }

  00023	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00027	5e		 pop	 rsi
  00028	c3		 ret	 0
$LN7@PySeqIter_:
  00029	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi

; 19   :     }
; 20   :     it = PyObject_GC_New(seqiterobject, &PySeqIter_Type);

  0002e	e8 00 00 00 00	 call	 _Py_PXCTX
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PySeqIter_Type
  0003a	85 c0		 test	 eax, eax
  0003c	74 07		 je	 SHORT $LN10@PySeqIter_
  0003e	e8 00 00 00 00	 call	 _PxObject_New
  00043	eb 05		 jmp	 SHORT $LN19@PySeqIter_
$LN10@PySeqIter_:
  00045	e8 00 00 00 00	 call	 _PyObject_GC_New
$LN19@PySeqIter_:
  0004a	48 8b f8	 mov	 rdi, rax

; 21   :     if (it == NULL)

  0004d	48 85 c0	 test	 rax, rax
  00050	75 0b		 jne	 SHORT $LN6@PySeqIter_
  00052	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]

; 28   : }

  00057	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005b	5e		 pop	 rsi
  0005c	c3		 ret	 0
$LN6@PySeqIter_:
  0005d	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx

; 22   :         return NULL;
; 23   :     it->it_index = 0;

  00062	33 db		 xor	 ebx, ebx
  00064	89 5f 60	 mov	 DWORD PTR [rdi+96], ebx

; 24   :     Py_INCREF(seq);

  00067	e8 00 00 00 00	 call	 _Py_PXCTX
  0006c	85 c0		 test	 eax, eax
  0006e	75 32		 jne	 SHORT $LN15@PySeqIter_
  00070	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00077	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0007e	4c 8b ce	 mov	 r9, rsi
  00081	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00087	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0008f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00094	85 c0		 test	 eax, eax
  00096	75 06		 jne	 SHORT $LN14@PySeqIter_
  00098	f6 46 20 20	 test	 BYTE PTR [rsi+32], 32	; 00000020H
  0009c	74 04		 je	 SHORT $LN15@PySeqIter_
$LN14@PySeqIter_:
  0009e	48 ff 46 50	 inc	 QWORD PTR [rsi+80]
$LN15@PySeqIter_:

; 25   :     it->it_seq = seq;
; 26   :     _PyObject_GC_TRACK(it);

  000a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@
  000a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@GNGGBDLJ@PySeqIter_New?$AA@
  000b0	4c 8b cf	 mov	 r9, rdi
  000b3	41 b8 1a 00 00
	00		 mov	 r8d, 26
  000b9	48 89 77 68	 mov	 QWORD PTR [rdi+104], rsi
  000bd	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 6c		 jne	 SHORT $LN2@PySeqIter_
  000ce	44 8d 40 1a	 lea	 r8d, QWORD PTR [rax+26]
  000d2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@
  000d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@GNGGBDLJ@PySeqIter_New?$AA@
  000e0	4c 8b cf	 mov	 r9, rdi
  000e3	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000eb	e8 00 00 00 00	 call	 _PyParallel_Guard
  000f0	85 c0		 test	 eax, eax
  000f2	75 04		 jne	 SHORT $LN13@PySeqIter_
  000f4	48 8d 5f e8	 lea	 rbx, QWORD PTR [rdi-24]
$LN13@PySeqIter_:
  000f8	48 83 7b 10 fe	 cmp	 QWORD PTR [rbx+16], -2
  000fd	74 0c		 je	 SHORT $LN1@PySeqIter_
  000ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  00106	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PySeqIter_:
  0010b	48 c7 43 10 fd
	ff ff ff	 mov	 QWORD PTR [rbx+16], -3
  00113	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  0011a	48 89 03	 mov	 QWORD PTR [rbx], rax
  0011d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00124	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00128	48 89 4b 08	 mov	 QWORD PTR [rbx+8], rcx
  0012c	48 89 19	 mov	 QWORD PTR [rcx], rbx
  0012f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00136	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
$LN2@PySeqIter_:

; 27   :     return (PyObject *)it;

  0013a	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0013f	48 8b c7	 mov	 rax, rdi
  00142	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]

; 28   : }

  00147	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0014b	5e		 pop	 rsi
  0014c	c3		 ret	 0
PySeqIter_New ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@EOJLEFEK@iter_dealloc?$AA@		; `string'
EXTRN	PyObject_GC_Del:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$iter_dealloc DD imagerel iter_dealloc
	DD	imagerel iter_dealloc+299
	DD	imagerel $unwind$iter_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iter_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0N@EOJLEFEK@iter_dealloc?$AA@
CONST	SEGMENT
??_C@_0N@EOJLEFEK@iter_dealloc?$AA@ DB 'iter_dealloc', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\iterobject.c
CONST	ENDS
;	COMDAT iter_dealloc
_TEXT	SEGMENT
it$ = 64
iter_dealloc PROC					; COMDAT

; 32   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 33   :     _PyObject_GC_UNTRACK(it);

  0000d	4c 8b c9	 mov	 r9, rcx
  00010	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@EOJLEFEK@iter_dealloc?$AA@
  0001e	41 b8 21 00 00
	00		 mov	 r8d, 33			; 00000021H
  00024	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0002c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00031	85 c0		 test	 eax, eax
  00033	75 52		 jne	 SHORT $LN5@iter_deall
  00035	44 8d 40 21	 lea	 r8d, QWORD PTR [rax+33]
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@
  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@EOJLEFEK@iter_dealloc?$AA@
  00047	4c 8b cf	 mov	 r9, rdi
  0004a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00052	e8 00 00 00 00	 call	 _PyParallel_Guard
  00057	85 c0		 test	 eax, eax
  00059	74 04		 je	 SHORT $LN11@iter_deall
  0005b	33 d2		 xor	 edx, edx
  0005d	eb 04		 jmp	 SHORT $LN12@iter_deall
$LN11@iter_deall:
  0005f	48 8d 57 e8	 lea	 rdx, QWORD PTR [rdi-24]
$LN12@iter_deall:
  00063	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00066	48 8b 4a 08	 mov	 rcx, QWORD PTR [rdx+8]
  0006a	48 c7 42 10 fe
	ff ff ff	 mov	 QWORD PTR [rdx+16], -2
  00072	48 89 01	 mov	 QWORD PTR [rcx], rax
  00075	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  00078	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  0007c	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00080	48 c7 02 00 00
	00 00		 mov	 QWORD PTR [rdx], 0
$LN5@iter_deall:

; 34   :     Py_XDECREF(it->it_seq);

  00087	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  0008b	48 85 db	 test	 rbx, rbx
  0008e	0f 84 85 00 00
	00		 je	 $LN3@iter_deall
  00094	e8 00 00 00 00	 call	 _Py_PXCTX
  00099	85 c0		 test	 eax, eax
  0009b	75 7c		 jne	 SHORT $LN3@iter_deall
  0009d	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000a1	a8 20		 test	 al, 32			; 00000020H
  000a3	75 6c		 jne	 SHORT $LN17@iter_deall
  000a5	84 c0		 test	 al, al
  000a7	78 68		 js	 SHORT $LN17@iter_deall
  000a9	a8 02		 test	 al, 2
  000ab	75 6c		 jne	 SHORT $LN3@iter_deall
  000ad	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000b1	75 66		 jne	 SHORT $LN3@iter_deall
  000b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c1	4c 8b cb	 mov	 r9, rbx
  000c4	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000ca	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d2	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d7	48 8b cb	 mov	 rcx, rbx
  000da	85 c0		 test	 eax, eax
  000dc	74 17		 je	 SHORT $LN22@iter_deall
  000de	e8 00 00 00 00	 call	 _Px_Dealloc

; 35   :     PyObject_GC_Del(it);

  000e3	48 8b cf	 mov	 rcx, rdi

; 36   : }

  000e6	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000eb	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ef	5f		 pop	 rdi
  000f0	e9 00 00 00 00	 jmp	 PyObject_GC_Del

; 34   :     Py_XDECREF(it->it_seq);

$LN22@iter_deall:
  000f5	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000f9	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 35   :     PyObject_GC_Del(it);

  000ff	48 8b cf	 mov	 rcx, rdi

; 36   : }

  00102	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00107	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0010b	5f		 pop	 rdi
  0010c	e9 00 00 00 00	 jmp	 PyObject_GC_Del

; 34   :     Py_XDECREF(it->it_seq);

$LN17@iter_deall:
  00111	48 8b cb	 mov	 rcx, rbx
  00114	e8 00 00 00 00	 call	 Px_DecRef
$LN3@iter_deall:

; 35   :     PyObject_GC_Del(it);

  00119	48 8b cf	 mov	 rcx, rdi

; 36   : }

  0011c	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00121	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00125	5f		 pop	 rdi
  00126	e9 00 00 00 00	 jmp	 PyObject_GC_Del
iter_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@EFHLLJNE@iter_traverse?$AA@		; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$iter_traverse DD imagerel iter_traverse
	DD	imagerel iter_traverse+95
	DD	imagerel $unwind$iter_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iter_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0O@EFHLLJNE@iter_traverse?$AA@
CONST	SEGMENT
??_C@_0O@EFHLLJNE@iter_traverse?$AA@ DB 'iter_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT iter_traverse
_TEXT	SEGMENT
it$ = 48
visit$ = 56
arg$ = 64
iter_traverse PROC					; COMDAT

; 40   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 41   :     Py_VISIT(it->it_seq);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1a		 je	 SHORT $LN3@iter_trave
  00021	45 33 c9	 xor	 r9d, r9d
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@EFHLLJNE@iter_traverse?$AA@
  00032	45 8d 41 29	 lea	 r8d, QWORD PTR [r9+41]
  00036	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@iter_trave:
  0003b	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  0003f	48 85 c9	 test	 rcx, rcx
  00042	74 09		 je	 SHORT $LN5@iter_trave
  00044	48 8b d7	 mov	 rdx, rdi
  00047	ff d6		 call	 rsi
  00049	85 c0		 test	 eax, eax
  0004b	75 02		 jne	 SHORT $LN7@iter_trave
$LN5@iter_trave:

; 42   :     return 0;

  0004d	33 c0		 xor	 eax, eax
$LN7@iter_trave:

; 43   : }

  0004f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00054	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00059	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005d	5f		 pop	 rdi
  0005e	c3		 ret	 0
iter_traverse ENDP
_TEXT	ENDS
EXTRN	PyErr_Clear:PROC
EXTRN	PyExc_StopIteration:QWORD
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_IndexError:QWORD
EXTRN	PySequence_GetItem:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$iter_iternext DD imagerel iter_iternext
	DD	imagerel iter_iternext+119
	DD	imagerel $unwind$iter_iternext
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iter_iternext DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT iter_iternext
_TEXT	SEGMENT
iterator$ = 48
iter_iternext PROC					; COMDAT

; 47   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 48   :     seqiterobject *it;
; 49   :     PyObject *seq;
; 50   :     PyObject *result;
; 51   : 
; 52   :     assert(PySeqIter_Check(iterator));
; 53   :     it = (seqiterobject *)iterator;
; 54   :     seq = it->it_seq;

  0000a	48 8b 79 68	 mov	 rdi, QWORD PTR [rcx+104]
  0000e	48 8b d9	 mov	 rbx, rcx

; 55   :     if (seq == NULL)

  00011	48 85 ff	 test	 rdi, rdi

; 56   :         return NULL;

  00014	74 54		 je	 SHORT $LN2@iter_itern

; 57   : 
; 58   :     result = PySequence_GetItem(seq, it->it_index);

  00016	48 63 51 60	 movsxd	 rdx, DWORD PTR [rcx+96]
  0001a	48 8b cf	 mov	 rcx, rdi
  0001d	e8 00 00 00 00	 call	 PySequence_GetItem

; 59   :     if (result != NULL) {

  00022	48 85 c0	 test	 rax, rax
  00025	74 0e		 je	 SHORT $LN3@iter_itern

; 60   :         it->it_index++;

  00027	ff 43 60	 inc	 DWORD PTR [rbx+96]

; 71   : }

  0002a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00033	5f		 pop	 rdi
  00034	c3		 ret	 0
$LN3@iter_itern:

; 61   :         return result;
; 62   :     }
; 63   :     if (PyErr_ExceptionMatches(PyExc_IndexError) ||
; 64   :         PyErr_ExceptionMatches(PyExc_StopIteration))

  00035	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
  0003c	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00041	85 c0		 test	 eax, eax
  00043	75 10		 jne	 SHORT $LN1@iter_itern
  00045	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_StopIteration
  0004c	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00051	85 c0		 test	 eax, eax
  00053	74 15		 je	 SHORT $LN2@iter_itern
$LN1@iter_itern:

; 65   :     {
; 66   :         PyErr_Clear();

  00055	e8 00 00 00 00	 call	 PyErr_Clear

; 67   :         Py_DECREF(seq);

  0005a	48 8b cf	 mov	 rcx, rdi
  0005d	e8 00 00 00 00	 call	 _Py_DecRef

; 68   :         it->it_seq = NULL;

  00062	48 c7 43 68 00
	00 00 00	 mov	 QWORD PTR [rbx+104], 0
$LN2@iter_itern:

; 69   :     }
; 70   :     return NULL;

  0006a	33 c0		 xor	 eax, eax

; 71   : }

  0006c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00071	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00075	5f		 pop	 rdi
  00076	c3		 ret	 0
iter_iternext ENDP
_TEXT	ENDS
EXTRN	PyLong_FromLong:PROC
EXTRN	PyLong_FromSsize_t:PROC
EXTRN	PySequence_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$iter_len DD imagerel iter_len
	DD	imagerel iter_len+71
	DD	imagerel $unwind$iter_len
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iter_len DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT iter_len
_TEXT	SEGMENT
it$ = 48
iter_len PROC						; COMDAT

; 75   : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 76   :     Py_ssize_t seqsize, len;
; 77   : 
; 78   :     if (it->it_seq) {

  00009	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  0000d	48 85 c9	 test	 rcx, rcx
  00010	74 29		 je	 SHORT $LN1@iter_len

; 79   :         seqsize = PySequence_Size(it->it_seq);

  00012	e8 00 00 00 00	 call	 PySequence_Size
  00017	48 8b c8	 mov	 rcx, rax

; 80   :         if (seqsize == -1)

  0001a	48 83 f8 ff	 cmp	 rax, -1
  0001e	75 08		 jne	 SHORT $LN2@iter_len

; 81   :             return NULL;

  00020	33 c0		 xor	 eax, eax

; 87   : }

  00022	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00026	5b		 pop	 rbx
  00027	c3		 ret	 0
$LN2@iter_len:

; 82   :         len = seqsize - it->it_index;

  00028	48 63 43 60	 movsxd	 rax, DWORD PTR [rbx+96]
  0002c	48 2b c8	 sub	 rcx, rax

; 83   :         if (len >= 0)

  0002f	78 0a		 js	 SHORT $LN1@iter_len

; 87   : }

  00031	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00035	5b		 pop	 rbx
  00036	e9 00 00 00 00	 jmp	 PyLong_FromSsize_t
$LN1@iter_len:

; 84   :             return PyLong_FromSsize_t(len);
; 85   :     }
; 86   :     return PyLong_FromLong(0);

  0003b	33 c9		 xor	 ecx, ecx

; 87   : }

  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5b		 pop	 rbx
  00042	e9 00 00 00 00	 jmp	 PyLong_FromLong
iter_len ENDP
_TEXT	ENDS
PUBLIC	??_C@_05JMICDENA@N?$CI?$CI?$CJ?$CJ?$AA@		; `string'
PUBLIC	??_C@_05IFELCCKI@N?$CIO?$CJn?$AA@		; `string'
PUBLIC	??_C@_04BKLHDIKK@iter?$AA@			; `string'
EXTRN	Py_BuildValue:PROC
EXTRN	_PyObject_GetBuiltin:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$iter_reduce DD imagerel iter_reduce
	DD	imagerel iter_reduce+88
	DD	imagerel $unwind$iter_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iter_reduce DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_05JMICDENA@N?$CI?$CI?$CJ?$CJ?$AA@
CONST	SEGMENT
??_C@_05JMICDENA@N?$CI?$CI?$CJ?$CJ?$AA@ DB 'N(())', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05IFELCCKI@N?$CIO?$CJn?$AA@
CONST	SEGMENT
??_C@_05IFELCCKI@N?$CIO?$CJn?$AA@ DB 'N(O)n', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04BKLHDIKK@iter?$AA@
CONST	SEGMENT
??_C@_04BKLHDIKK@iter?$AA@ DB 'iter', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT iter_reduce
_TEXT	SEGMENT
it$ = 48
iter_reduce PROC					; COMDAT

; 93   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 94   :     if (it->it_seq != NULL)

  0000a	48 8b 79 68	 mov	 rdi, QWORD PTR [rcx+104]
  0000e	48 8b d9	 mov	 rbx, rcx

; 95   :         return Py_BuildValue("N(O)n", _PyObject_GetBuiltin("iter"),
; 96   :                              it->it_seq, it->it_index);

  00011	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04BKLHDIKK@iter?$AA@
  00018	e8 00 00 00 00	 call	 _PyObject_GetBuiltin
  0001d	48 8b d0	 mov	 rdx, rax
  00020	48 85 ff	 test	 rdi, rdi
  00023	74 1d		 je	 SHORT $LN2@iter_reduc
  00025	44 8b 4b 60	 mov	 r9d, DWORD PTR [rbx+96]
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05IFELCCKI@N?$CIO?$CJn?$AA@
  00030	4c 8b c7	 mov	 r8, rdi

; 99   : }

  00033	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00038	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003c	5f		 pop	 rdi
  0003d	e9 00 00 00 00	 jmp	 Py_BuildValue
$LN2@iter_reduc:

; 97   :     else
; 98   :         return Py_BuildValue("N(())", _PyObject_GetBuiltin("iter"));

  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05JMICDENA@N?$CI?$CI?$CJ?$CJ?$AA@

; 99   : }

  00049	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00052	5f		 pop	 rdi
  00053	e9 00 00 00 00	 jmp	 Py_BuildValue
iter_reduce ENDP
_TEXT	ENDS
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyErr_Occurred:PROC
EXTRN	PyLong_AsSsize_t:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$iter_setstate DD imagerel iter_setstate
	DD	imagerel iter_setstate+159
	DD	imagerel $unwind$iter_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iter_setstate DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\iterobject.c
xdata	ENDS
;	COMDAT iter_setstate
_TEXT	SEGMENT
it$ = 64
state$ = 72
iter_setstate PROC					; COMDAT

; 105  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 106  :     Py_ssize_t index = PyLong_AsSsize_t(state);

  0000d	48 8b ca	 mov	 rcx, rdx
  00010	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  00015	48 8b d8	 mov	 rbx, rax

; 107  :     if (index == -1 && PyErr_Occurred())

  00018	48 83 f8 ff	 cmp	 rax, -1
  0001c	75 17		 jne	 SHORT $LN3@iter_setst
  0001e	e8 00 00 00 00	 call	 PyErr_Occurred
  00023	48 85 c0	 test	 rax, rax
  00026	74 0d		 je	 SHORT $LN3@iter_setst

; 108  :         return NULL;

  00028	33 c0		 xor	 eax, eax

; 115  : }

  0002a	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0002f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00033	5f		 pop	 rdi
  00034	c3		 ret	 0
$LN3@iter_setst:

; 109  :     if (it->it_seq != NULL) {

  00035	48 83 7f 68 00	 cmp	 QWORD PTR [rdi+104], 0
  0003a	74 0c		 je	 SHORT $LN2@iter_setst

; 110  :         if (index < 0)

  0003c	33 c0		 xor	 eax, eax
  0003e	48 85 db	 test	 rbx, rbx
  00041	48 0f 48 d8	 cmovs	 rbx, rax

; 111  :             index = 0;
; 112  :         it->it_index = index;

  00045	89 5f 60	 mov	 DWORD PTR [rdi+96], ebx
$LN2@iter_setst:

; 113  :     }
; 114  :     Py_RETURN_NONE;

  00048	e8 00 00 00 00	 call	 _Py_PXCTX
  0004d	85 c0		 test	 eax, eax
  0004f	75 3c		 jne	 SHORT $LN7@iter_setst
  00051	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00066	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0006c	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00074	e8 00 00 00 00	 call	 _PyParallel_Guard
  00079	85 c0		 test	 eax, eax
  0007b	75 09		 jne	 SHORT $LN6@iter_setst
  0007d	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00084	74 07		 je	 SHORT $LN7@iter_setst
$LN6@iter_setst:
  00086	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN7@iter_setst:
  0008d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 115  : }

  00094	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00099	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0009d	5f		 pop	 rdi
  0009e	c3		 ret	 0
iter_setstate ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@OKIMBNHM@PyCallIter_New?$AA@		; `string'
PUBLIC	PyCallIter_New
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyCallIter_New DD imagerel $LN22
	DD	imagerel $LN22+372
	DD	imagerel $unwind$PyCallIter_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCallIter_New DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT ??_C@_0P@OKIMBNHM@PyCallIter_New?$AA@
CONST	SEGMENT
??_C@_0P@OKIMBNHM@PyCallIter_New?$AA@ DB 'PyCallIter_New', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\iterobject.c
CONST	ENDS
;	COMDAT PyCallIter_New
_TEXT	SEGMENT
callable$ = 64
sentinel$ = 72
PyCallIter_New PROC					; COMDAT

; 169  : {

$LN22:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b da	 mov	 rbx, rdx
  00012	48 8b f1	 mov	 rsi, rcx

; 170  :     calliterobject *it;
; 171  :     it = PyObject_GC_New(calliterobject, &PyCallIter_Type);

  00015	e8 00 00 00 00	 call	 _Py_PXCTX
  0001a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyCallIter_Type
  00021	85 c0		 test	 eax, eax
  00023	74 07		 je	 SHORT $LN9@PyCallIter
  00025	e8 00 00 00 00	 call	 _PxObject_New
  0002a	eb 05		 jmp	 SHORT $LN21@PyCallIter
$LN9@PyCallIter:
  0002c	e8 00 00 00 00	 call	 _PyObject_GC_New
$LN21@PyCallIter:
  00031	48 8b f8	 mov	 rdi, rax

; 172  :     if (it == NULL)

  00034	48 85 c0	 test	 rax, rax
  00037	75 10		 jne	 SHORT $LN6@PyCallIter

; 179  :     return (PyObject *)it;
; 180  : }

  00039	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0003e	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00043	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00047	5f		 pop	 rdi
  00048	c3		 ret	 0
$LN6@PyCallIter:

; 173  :         return NULL;
; 174  :     Py_INCREF(callable);

  00049	e8 00 00 00 00	 call	 _Py_PXCTX
  0004e	85 c0		 test	 eax, eax
  00050	75 32		 jne	 SHORT $LN14@PyCallIter
  00052	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00059	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00060	4c 8b ce	 mov	 r9, rsi
  00063	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00069	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00071	e8 00 00 00 00	 call	 _PyParallel_Guard
  00076	85 c0		 test	 eax, eax
  00078	75 06		 jne	 SHORT $LN13@PyCallIter
  0007a	f6 46 20 20	 test	 BYTE PTR [rsi+32], 32	; 00000020H
  0007e	74 04		 je	 SHORT $LN14@PyCallIter
$LN13@PyCallIter:
  00080	48 ff 46 50	 inc	 QWORD PTR [rsi+80]
$LN14@PyCallIter:

; 175  :     it->it_callable = callable;

  00084	48 89 77 60	 mov	 QWORD PTR [rdi+96], rsi

; 176  :     Py_INCREF(sentinel);

  00088	e8 00 00 00 00	 call	 _Py_PXCTX
  0008d	85 c0		 test	 eax, eax
  0008f	75 32		 jne	 SHORT $LN18@PyCallIter
  00091	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0009f	4c 8b cb	 mov	 r9, rbx
  000a2	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000a8	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000b0	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b5	85 c0		 test	 eax, eax
  000b7	75 06		 jne	 SHORT $LN17@PyCallIter
  000b9	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000bd	74 04		 je	 SHORT $LN18@PyCallIter
$LN17@PyCallIter:
  000bf	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN18@PyCallIter:

; 177  :     it->it_sentinel = sentinel;
; 178  :     _PyObject_GC_TRACK(it);

  000c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@
  000ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@OKIMBNHM@PyCallIter_New?$AA@
  000d1	4c 8b cf	 mov	 r9, rdi
  000d4	41 b8 b2 00 00
	00		 mov	 r8d, 178		; 000000b2H
  000da	48 89 5f 68	 mov	 QWORD PTR [rdi+104], rbx
  000de	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000e6	e8 00 00 00 00	 call	 _PyParallel_Guard
  000eb	85 c0		 test	 eax, eax
  000ed	75 72		 jne	 SHORT $LN2@PyCallIter
  000ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@
  000f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@OKIMBNHM@PyCallIter_New?$AA@
  000fd	4c 8b cf	 mov	 r9, rdi
  00100	41 b8 b2 00 00
	00		 mov	 r8d, 178		; 000000b2H
  00106	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0010e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00113	85 c0		 test	 eax, eax
  00115	74 04		 je	 SHORT $LN11@PyCallIter
  00117	33 db		 xor	 ebx, ebx
  00119	eb 04		 jmp	 SHORT $LN12@PyCallIter
$LN11@PyCallIter:
  0011b	48 8d 5f e8	 lea	 rbx, QWORD PTR [rdi-24]
$LN12@PyCallIter:
  0011f	48 83 7b 10 fe	 cmp	 QWORD PTR [rbx+16], -2
  00124	74 0c		 je	 SHORT $LN1@PyCallIter
  00126	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  0012d	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyCallIter:
  00132	48 c7 43 10 fd
	ff ff ff	 mov	 QWORD PTR [rbx+16], -3
  0013a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00141	48 89 03	 mov	 QWORD PTR [rbx], rax
  00144	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  0014b	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0014f	48 89 4b 08	 mov	 QWORD PTR [rbx+8], rcx
  00153	48 89 19	 mov	 QWORD PTR [rcx], rbx
  00156	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  0015d	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
$LN2@PyCallIter:

; 179  :     return (PyObject *)it;
; 180  : }

  00161	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00166	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0016b	48 8b c7	 mov	 rax, rdi
  0016e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00172	5f		 pop	 rdi
  00173	c3		 ret	 0
PyCallIter_New ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@JOLFBAOK@calliter_dealloc?$AA@	; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$calliter_dealloc DD imagerel calliter_dealloc
	DD	imagerel calliter_dealloc+411
	DD	imagerel $unwind$calliter_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$calliter_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0BB@JOLFBAOK@calliter_dealloc?$AA@
CONST	SEGMENT
??_C@_0BB@JOLFBAOK@calliter_dealloc?$AA@ DB 'calliter_dealloc', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\iterobject.c
CONST	ENDS
;	COMDAT calliter_dealloc
_TEXT	SEGMENT
it$ = 64
calliter_dealloc PROC					; COMDAT

; 183  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 184  :     _PyObject_GC_UNTRACK(it);

  0000d	4c 8b c9	 mov	 r9, rcx
  00010	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@JOLFBAOK@calliter_dealloc?$AA@
  0001e	41 b8 b8 00 00
	00		 mov	 r8d, 184		; 000000b8H
  00024	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0002c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00031	85 c0		 test	 eax, eax
  00033	75 54		 jne	 SHORT $LN9@calliter_d
  00035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@JOLFBAOK@calliter_dealloc?$AA@
  00043	4c 8b cf	 mov	 r9, rdi
  00046	41 b8 b8 00 00
	00		 mov	 r8d, 184		; 000000b8H
  0004c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00054	e8 00 00 00 00	 call	 _PyParallel_Guard
  00059	85 c0		 test	 eax, eax
  0005b	74 04		 je	 SHORT $LN15@calliter_d
  0005d	33 d2		 xor	 edx, edx
  0005f	eb 04		 jmp	 SHORT $LN16@calliter_d
$LN15@calliter_d:
  00061	48 8d 57 e8	 lea	 rdx, QWORD PTR [rdi-24]
$LN16@calliter_d:
  00065	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00068	48 8b 4a 08	 mov	 rcx, QWORD PTR [rdx+8]
  0006c	48 c7 42 10 fe
	ff ff ff	 mov	 QWORD PTR [rdx+16], -2
  00074	48 89 01	 mov	 QWORD PTR [rcx], rax
  00077	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  0007a	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  0007e	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00082	48 c7 02 00 00
	00 00		 mov	 QWORD PTR [rdx], 0
$LN9@calliter_d:

; 185  :     Py_XDECREF(it->it_callable);

  00089	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  0008d	48 85 db	 test	 rbx, rbx
  00090	74 65		 je	 SHORT $LN7@calliter_d
  00092	e8 00 00 00 00	 call	 _Py_PXCTX
  00097	85 c0		 test	 eax, eax
  00099	75 5c		 jne	 SHORT $LN7@calliter_d
  0009b	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0009f	a8 20		 test	 al, 32			; 00000020H
  000a1	75 4c		 jne	 SHORT $LN21@calliter_d
  000a3	84 c0		 test	 al, al
  000a5	78 48		 js	 SHORT $LN21@calliter_d
  000a7	a8 02		 test	 al, 2
  000a9	75 4c		 jne	 SHORT $LN7@calliter_d
  000ab	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000af	75 46		 jne	 SHORT $LN7@calliter_d
  000b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000bf	4c 8b cb	 mov	 r9, rbx
  000c2	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000c8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d0	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d5	48 8b cb	 mov	 rcx, rbx
  000d8	85 c0		 test	 eax, eax
  000da	74 07		 je	 SHORT $LN26@calliter_d
  000dc	e8 00 00 00 00	 call	 _Px_Dealloc
  000e1	eb 14		 jmp	 SHORT $LN7@calliter_d
$LN26@calliter_d:
  000e3	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000e7	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000ed	eb 08		 jmp	 SHORT $LN7@calliter_d
$LN21@calliter_d:
  000ef	48 8b cb	 mov	 rcx, rbx
  000f2	e8 00 00 00 00	 call	 Px_DecRef
$LN7@calliter_d:

; 186  :     Py_XDECREF(it->it_sentinel);

  000f7	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  000fb	48 85 db	 test	 rbx, rbx
  000fe	0f 84 85 00 00
	00		 je	 $LN3@calliter_d
  00104	e8 00 00 00 00	 call	 _Py_PXCTX
  00109	85 c0		 test	 eax, eax
  0010b	75 7c		 jne	 SHORT $LN3@calliter_d
  0010d	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00111	a8 20		 test	 al, 32			; 00000020H
  00113	75 6c		 jne	 SHORT $LN32@calliter_d
  00115	84 c0		 test	 al, al
  00117	78 68		 js	 SHORT $LN32@calliter_d
  00119	a8 02		 test	 al, 2
  0011b	75 6c		 jne	 SHORT $LN3@calliter_d
  0011d	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00121	75 66		 jne	 SHORT $LN3@calliter_d
  00123	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0012a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00131	4c 8b cb	 mov	 r9, rbx
  00134	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0013a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00142	e8 00 00 00 00	 call	 _PyParallel_Guard
  00147	48 8b cb	 mov	 rcx, rbx
  0014a	85 c0		 test	 eax, eax
  0014c	74 17		 je	 SHORT $LN37@calliter_d
  0014e	e8 00 00 00 00	 call	 _Px_Dealloc

; 187  :     PyObject_GC_Del(it);

  00153	48 8b cf	 mov	 rcx, rdi

; 188  : }

  00156	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0015b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0015f	5f		 pop	 rdi
  00160	e9 00 00 00 00	 jmp	 PyObject_GC_Del

; 186  :     Py_XDECREF(it->it_sentinel);

$LN37@calliter_d:
  00165	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00169	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 187  :     PyObject_GC_Del(it);

  0016f	48 8b cf	 mov	 rcx, rdi

; 188  : }

  00172	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00177	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0017b	5f		 pop	 rdi
  0017c	e9 00 00 00 00	 jmp	 PyObject_GC_Del

; 186  :     Py_XDECREF(it->it_sentinel);

$LN32@calliter_d:
  00181	48 8b cb	 mov	 rcx, rbx
  00184	e8 00 00 00 00	 call	 Px_DecRef
$LN3@calliter_d:

; 187  :     PyObject_GC_Del(it);

  00189	48 8b cf	 mov	 rcx, rdi

; 188  : }

  0018c	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00191	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00195	5f		 pop	 rdi
  00196	e9 00 00 00 00	 jmp	 PyObject_GC_Del
calliter_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@JDHNDEGJ@calliter_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$calliter_traverse DD imagerel calliter_traverse
	DD	imagerel calliter_traverse+152
	DD	imagerel $unwind$calliter_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$calliter_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BC@JDHNDEGJ@calliter_traverse?$AA@
CONST	SEGMENT
??_C@_0BC@JDHNDEGJ@calliter_traverse?$AA@ DB 'calliter_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT calliter_traverse
_TEXT	SEGMENT
it$ = 48
visit$ = 56
arg$ = 64
calliter_traverse PROC					; COMDAT

; 192  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 193  :     Py_VISIT(it->it_callable);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN9@calliter_t
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@JDHNDEGJ@calliter_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 c1 00 00
	00		 mov	 r8d, 193		; 000000c1H
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@calliter_t:
  0003d	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN11@calliter_t
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 39		 jne	 SHORT $LN13@calliter_t
$LN11@calliter_t:

; 194  :     Py_VISIT(it->it_sentinel);

  0004f	e8 00 00 00 00	 call	 _Py_PXCTX
  00054	85 c0		 test	 eax, eax
  00056	74 1c		 je	 SHORT $LN3@calliter_t
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@JDHNDEGJ@calliter_traverse?$AA@
  00066	45 33 c9	 xor	 r9d, r9d
  00069	41 b8 c2 00 00
	00		 mov	 r8d, 194		; 000000c2H
  0006f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@calliter_t:
  00074	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00078	48 85 c9	 test	 rcx, rcx
  0007b	74 09		 je	 SHORT $LN5@calliter_t
  0007d	48 8b d7	 mov	 rdx, rdi
  00080	ff d6		 call	 rsi
  00082	85 c0		 test	 eax, eax
  00084	75 02		 jne	 SHORT $LN13@calliter_t
$LN5@calliter_t:

; 195  :     return 0;

  00086	33 c0		 xor	 eax, eax
$LN13@calliter_t:

; 196  : }

  00088	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00092	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00096	5f		 pop	 rdi
  00097	c3		 ret	 0
calliter_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@ICNBGMAL@calliter_iternext?$AA@	; `string'
EXTRN	PyObject_RichCompareBool:PROC
EXTRN	PyObject_Call:PROC
EXTRN	PyTuple_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$calliter_iternext DD imagerel calliter_iternext
	DD	imagerel calliter_iternext+383
	DD	imagerel $unwind$calliter_iternext
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$calliter_iternext DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT ??_C@_0BC@ICNBGMAL@calliter_iternext?$AA@
CONST	SEGMENT
??_C@_0BC@ICNBGMAL@calliter_iternext?$AA@ DB 'calliter_iternext', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT calliter_iternext
_TEXT	SEGMENT
it$ = 64
calliter_iternext PROC					; COMDAT

; 200  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 201  :     if (it->it_callable != NULL) {

  0000f	48 83 79 60 00	 cmp	 QWORD PTR [rcx+96], 0
  00014	48 8b d9	 mov	 rbx, rcx
  00017	0f 84 50 01 00
	00		 je	 $LN2@calliter_i

; 202  :         PyObject *args = PyTuple_New(0);

  0001d	33 c9		 xor	 ecx, ecx
  0001f	e8 00 00 00 00	 call	 PyTuple_New
  00024	48 8b f0	 mov	 rsi, rax

; 203  :         PyObject *result;
; 204  :         if (args == NULL)

  00027	48 85 c0	 test	 rax, rax

; 205  :             return NULL;

  0002a	0f 84 3d 01 00
	00		 je	 $LN2@calliter_i

; 206  :         result = PyObject_Call(it->it_callable, args, NULL);

  00030	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00034	45 33 c0	 xor	 r8d, r8d
  00037	48 8b d0	 mov	 rdx, rax
  0003a	e8 00 00 00 00	 call	 PyObject_Call

; 207  :         Py_DECREF(args);

  0003f	48 8b ce	 mov	 rcx, rsi
  00042	48 8b f8	 mov	 rdi, rax
  00045	e8 00 00 00 00	 call	 _Py_DecRef

; 208  :         if (result != NULL) {

  0004a	48 85 ff	 test	 rdi, rdi
  0004d	0f 84 8d 00 00
	00		 je	 $LN21@calliter_i

; 209  :             int ok;
; 210  :             ok = PyObject_RichCompareBool(it->it_sentinel, result, Py_EQ);               

  00053	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00057	41 b8 02 00 00
	00		 mov	 r8d, 2
  0005d	48 8b d7	 mov	 rdx, rdi
  00060	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  00065	8b f0		 mov	 esi, eax

; 211  :             if (ok == 0)

  00067	85 c0		 test	 eax, eax
  00069	75 13		 jne	 SHORT $LN20@calliter_i

; 212  :                 return result; /* Common case, fast path */

  0006b	48 8b c7	 mov	 rax, rdi

; 223  :         }
; 224  :     }
; 225  :     return NULL;
; 226  : }

  0006e	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00073	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00078	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0007c	5f		 pop	 rdi
  0007d	c3		 ret	 0
$LN20@calliter_i:

; 213  :             Py_DECREF(result);

  0007e	48 8b cf	 mov	 rcx, rdi
  00081	e8 00 00 00 00	 call	 _Py_DecRef

; 214  :             if (ok > 0) {

  00086	85 f6		 test	 esi, esi
  00088	0f 8e df 00 00
	00		 jle	 $LN2@calliter_i

; 215  :                 Py_CLEAR(it->it_callable);

  0008e	4c 8b 4b 60	 mov	 r9, QWORD PTR [rbx+96]
  00092	33 ff		 xor	 edi, edi
  00094	4d 85 c9	 test	 r9, r9
  00097	74 32		 je	 SHORT $LN17@calliter_i
  00099	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@
  000a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@ICNBGMAL@calliter_iternext?$AA@
  000a7	41 b8 d7 00 00
	00		 mov	 r8d, 215		; 000000d7H
  000ad	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000b5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ba	85 c0		 test	 eax, eax
  000bc	75 0d		 jne	 SHORT $LN17@calliter_i
  000be	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  000c2	48 89 7b 60	 mov	 QWORD PTR [rbx+96], rdi
  000c6	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@calliter_i:

; 216  :                 Py_CLEAR(it->it_sentinel);

  000cb	4c 8b 4b 68	 mov	 r9, QWORD PTR [rbx+104]
  000cf	4d 85 c9	 test	 r9, r9
  000d2	0f 84 95 00 00
	00		 je	 $LN2@calliter_i
  000d8	41 b8 d8 00 00
	00		 mov	 r8d, 216		; 000000d8H

; 217  :             }

  000de	eb 61		 jmp	 SHORT $LN27@calliter_i
$LN21@calliter_i:

; 218  :         }
; 219  :         else if (PyErr_ExceptionMatches(PyExc_StopIteration)) {

  000e0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_StopIteration
  000e7	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  000ec	85 c0		 test	 eax, eax
  000ee	74 7d		 je	 SHORT $LN2@calliter_i

; 220  :             PyErr_Clear();

  000f0	e8 00 00 00 00	 call	 PyErr_Clear

; 221  :             Py_CLEAR(it->it_callable);

  000f5	4c 8b 4b 60	 mov	 r9, QWORD PTR [rbx+96]
  000f9	33 ff		 xor	 edi, edi
  000fb	4d 85 c9	 test	 r9, r9
  000fe	74 32		 je	 SHORT $LN7@calliter_i
  00100	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@
  00107	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@ICNBGMAL@calliter_iternext?$AA@
  0010e	41 b8 dd 00 00
	00		 mov	 r8d, 221		; 000000ddH
  00114	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0011c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00121	85 c0		 test	 eax, eax
  00123	75 0d		 jne	 SHORT $LN7@calliter_i
  00125	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00129	48 89 7b 60	 mov	 QWORD PTR [rbx+96], rdi
  0012d	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@calliter_i:

; 222  :             Py_CLEAR(it->it_sentinel);

  00132	4c 8b 4b 68	 mov	 r9, QWORD PTR [rbx+104]
  00136	4d 85 c9	 test	 r9, r9
  00139	74 32		 je	 SHORT $LN2@calliter_i
  0013b	41 b8 de 00 00
	00		 mov	 r8d, 222		; 000000deH
$LN27@calliter_i:
  00141	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@
  00148	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@ICNBGMAL@calliter_iternext?$AA@
  0014f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00157	e8 00 00 00 00	 call	 _PyParallel_Guard
  0015c	85 c0		 test	 eax, eax
  0015e	75 0d		 jne	 SHORT $LN2@calliter_i
  00160	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00164	48 89 7b 68	 mov	 QWORD PTR [rbx+104], rdi
  00168	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@calliter_i:

; 223  :         }
; 224  :     }
; 225  :     return NULL;
; 226  : }

  0016d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00172	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00177	33 c0		 xor	 eax, eax
  00179	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0017d	5f		 pop	 rdi
  0017e	c3		 ret	 0
calliter_iternext ENDP
_TEXT	ENDS
PUBLIC	??_C@_05HGCJEMPI@N?$CIOO?$CJ?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$calliter_reduce DD imagerel calliter_reduce
	DD	imagerel calliter_reduce+108
	DD	imagerel $unwind$calliter_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$calliter_reduce DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_05HGCJEMPI@N?$CIOO?$CJ?$AA@
CONST	SEGMENT
??_C@_05HGCJEMPI@N?$CIOO?$CJ?$AA@ DB 'N(OO)', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT calliter_reduce
_TEXT	SEGMENT
it$ = 48
calliter_reduce PROC					; COMDAT

; 230  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 231  :     if (it->it_callable != NULL && it->it_sentinel != NULL)

  0000a	48 8b 79 60	 mov	 rdi, QWORD PTR [rcx+96]
  0000e	48 85 ff	 test	 rdi, rdi
  00011	74 34		 je	 SHORT $LN2@calliter_r
  00013	48 8b 59 68	 mov	 rbx, QWORD PTR [rcx+104]
  00017	48 85 db	 test	 rbx, rbx
  0001a	74 2b		 je	 SHORT $LN2@calliter_r

; 232  :         return Py_BuildValue("N(OO)", _PyObject_GetBuiltin("iter"),
; 233  :                              it->it_callable, it->it_sentinel);

  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04BKLHDIKK@iter?$AA@
  00023	e8 00 00 00 00	 call	 _PyObject_GetBuiltin
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05HGCJEMPI@N?$CIOO?$CJ?$AA@
  0002f	4c 8b cb	 mov	 r9, rbx
  00032	48 8b d0	 mov	 rdx, rax
  00035	4c 8b c7	 mov	 r8, rdi

; 236  : }

  00038	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5f		 pop	 rdi
  00042	e9 00 00 00 00	 jmp	 Py_BuildValue
$LN2@calliter_r:

; 234  :     else
; 235  :         return Py_BuildValue("N(())", _PyObject_GetBuiltin("iter"));

  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04BKLHDIKK@iter?$AA@
  0004e	e8 00 00 00 00	 call	 _PyObject_GetBuiltin
  00053	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05JMICDENA@N?$CI?$CI?$CJ?$CJ?$AA@
  0005a	48 8b d0	 mov	 rdx, rax

; 236  : }

  0005d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00062	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00066	5f		 pop	 rdi
  00067	e9 00 00 00 00	 jmp	 Py_BuildValue
calliter_reduce ENDP
_TEXT	ENDS
END
