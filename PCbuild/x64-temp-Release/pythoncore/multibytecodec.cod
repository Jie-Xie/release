; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BA@EEJLBBNI@_multibytecodec?$AA@		; `string'
PUBLIC	??_C@_0P@CGBPDBNI@__create_codec?$AA@		; `string'
PUBLIC	??_C@_0BG@BIPCHKOG@MultibyteStreamWriter?$AA@	; `string'
PUBLIC	??_C@_0L@MKGKOOMC@writelines?$AA@		; `string'
PUBLIC	??_C@_05NGFEDHGN@write?$AA@			; `string'
PUBLIC	??_C@_0BG@DEHAHLDM@MultibyteStreamReader?$AA@	; `string'
PUBLIC	??_C@_09OBGGLHMH@readlines?$AA@			; `string'
PUBLIC	??_C@_08KBCDPPMN@readline?$AA@			; `string'
PUBLIC	??_C@_04POLDLDMI@read?$AA@			; `string'
PUBLIC	??_C@_0BM@JAAPDPFD@MultibyteIncrementalDecoder?$AA@ ; `string'
PUBLIC	??_C@_0BM@FOKCGLDH@MultibyteIncrementalEncoder?$AA@ ; `string'
PUBLIC	??_C@_05CFMALAOA@reset?$AA@			; `string'
PUBLIC	??_C@_0P@LGCJMNJM@MultibyteCodec?$AA@		; `string'
PUBLIC	??_C@_06KPNAMAEI@decode?$AA@			; `string'
PUBLIC	??_C@_06GDGADLDP@encode?$AA@			; `string'
PUBLIC	??_C@_0BE@GJHBECHK@how?5to?5treat?5errors?$AA@	; `string'
PUBLIC	??_C@_06DJAMKFID@stream?$AA@			; `string'
PUBLIC	??_C@_05FPBGKCKL@final?$AA@			; `string'
PUBLIC	??_C@_06EOMHCNPI@errors?$AA@			; `string'
PUBLIC	??_C@_05DFJCHPDH@input?$AA@			; `string'
EXTRN	PyObject_GenericGetAttr:PROC
;	COMDAT ??_C@_0BA@EEJLBBNI@_multibytecodec?$AA@
CONST	SEGMENT
??_C@_0BA@EEJLBBNI@_multibytecodec?$AA@ DB '_multibytecodec', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CGBPDBNI@__create_codec?$AA@
CONST	SEGMENT
??_C@_0P@CGBPDBNI@__create_codec?$AA@ DB '__create_codec', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BIPCHKOG@MultibyteStreamWriter?$AA@
CONST	SEGMENT
??_C@_0BG@BIPCHKOG@MultibyteStreamWriter?$AA@ DB 'MultibyteStreamWriter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MKGKOOMC@writelines?$AA@
CONST	SEGMENT
??_C@_0L@MKGKOOMC@writelines?$AA@ DB 'writelines', 00H	; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId_write@?2??mbstreamwriter_reset@@9@9 DQ 0000000000000000H ; `mbstreamwriter_reset'::`3'::PyId_write
	DQ	FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	0000000000000000H
?PyId_write@?1??mbstreamwriter_iwrite@@9@9 DQ 0000000000000000H ; `mbstreamwriter_iwrite'::`2'::PyId_write
	DQ	FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_05NGFEDHGN@write?$AA@
CONST	SEGMENT
??_C@_05NGFEDHGN@write?$AA@ DB 'write', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DEHAHLDM@MultibyteStreamReader?$AA@
CONST	SEGMENT
??_C@_0BG@DEHAHLDM@MultibyteStreamReader?$AA@ DB 'MultibyteStreamReader', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09OBGGLHMH@readlines?$AA@
CONST	SEGMENT
??_C@_09OBGGLHMH@readlines?$AA@ DB 'readlines', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KBCDPPMN@readline?$AA@
CONST	SEGMENT
??_C@_08KBCDPPMN@readline?$AA@ DB 'readline', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04POLDLDMI@read?$AA@
CONST	SEGMENT
??_C@_04POLDLDMI@read?$AA@ DB 'read', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JAAPDPFD@MultibyteIncrementalDecoder?$AA@
CONST	SEGMENT
??_C@_0BM@JAAPDPFD@MultibyteIncrementalDecoder?$AA@ DB 'MultibyteIncremen'
	DB	'talDecoder', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FOKCGLDH@MultibyteIncrementalEncoder?$AA@
CONST	SEGMENT
??_C@_0BM@FOKCGLDH@MultibyteIncrementalEncoder?$AA@ DB 'MultibyteIncremen'
	DB	'talEncoder', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05CFMALAOA@reset?$AA@
CONST	SEGMENT
??_C@_05CFMALAOA@reset?$AA@ DB 'reset', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LGCJMNJM@MultibyteCodec?$AA@
CONST	SEGMENT
??_C@_0P@LGCJMNJM@MultibyteCodec?$AA@ DB 'MultibyteCodec', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06KPNAMAEI@decode?$AA@
CONST	SEGMENT
??_C@_06KPNAMAEI@decode?$AA@ DB 'decode', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GDGADLDP@encode?$AA@
CONST	SEGMENT
??_C@_06GDGADLDP@encode?$AA@ DB 'encode', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GJHBECHK@how?5to?5treat?5errors?$AA@
CONST	SEGMENT
??_C@_0BE@GJHBECHK@how?5to?5treat?5errors?$AA@ DB 'how to treat errors', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06DJAMKFID@stream?$AA@
CONST	SEGMENT
??_C@_06DJAMKFID@stream?$AA@ DB 'stream', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FPBGKCKL@final?$AA@
CONST	SEGMENT
??_C@_05FPBGKCKL@final?$AA@ DB 'final', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EOMHCNPI@errors?$AA@
CONST	SEGMENT
??_C@_06EOMHCNPI@errors?$AA@ DB 'errors', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DFJCHPDH@input?$AA@
CONST	SEGMENT
??_C@_05DFJCHPDH@input?$AA@ DB 'input', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
MultibyteCodec_Encode__doc__ DB 'I.encode(unicode[, errors]) -> (string, '
	DB	'length consumed)', 0aH, 0aH, 'Return an encoded string versio'
	DB	'n of `unicode''. errors may be given to', 0aH, 'set a differe'
	DB	'nt error handling scheme. Default is ''strict'' meaning that', 0aH
	DB	'encoding errors raise a UnicodeEncodeError. Other possible va'
	DB	'lues are', 0aH, '''ignore'', ''replace'' and ''xmlcharrefrepl'
	DB	'ace'' as well as any other name', 0aH, 'registered with codec'
	DB	's.register_error that can handle UnicodeEncodeErrors.', 00H
	ORG $+1
MultibyteCodec_Decode__doc__ DB 'I.decode(string[, errors]) -> (unicodeob'
	DB	'ject, length consumed)', 0aH, 0aH, 'Decodes `string'' using I'
	DB	', an MultibyteCodec instance. errors may be given', 0aH, 'to '
	DB	'set a different error handling scheme. Default is ''strict'' '
	DB	'meaning', 0aH, 'that encoding errors raise a UnicodeDecodeErr'
	DB	'or. Other possible values', 0aH, 'are ''ignore'' and ''replac'
	DB	'e'' as well as any other name registered with', 0aH, 'codecs.'
	DB	'register_error that is able to handle UnicodeDecodeErrors.', 00H
	ORG $+2
codeckwarglist DQ FLAT:??_C@_05DFJCHPDH@input?$AA@
	DQ	FLAT:??_C@_06EOMHCNPI@errors?$AA@
	DQ	0000000000000000H
incnewkwarglist DQ FLAT:??_C@_06EOMHCNPI@errors?$AA@
	DQ	0000000000000000H
incrementalkwarglist DQ FLAT:??_C@_05DFJCHPDH@input?$AA@
	DQ	FLAT:??_C@_05FPBGKCKL@final?$AA@
	DQ	0000000000000000H
streamkwarglist DQ FLAT:??_C@_06DJAMKFID@stream?$AA@
	DQ	FLAT:??_C@_06EOMHCNPI@errors?$AA@
	DQ	0000000000000000H
	ORG $+8
codecctx_getsets DQ FLAT:??_C@_06EOMHCNPI@errors?$AA@
	DQ	FLAT:codecctx_errors_get
	DQ	FLAT:codecctx_errors_set
	DQ	FLAT:??_C@_0BE@GJHBECHK@how?5to?5treat?5errors?$AA@
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
multibytecodec_methods DQ FLAT:??_C@_06GDGADLDP@encode?$AA@
	DQ	FLAT:MultibyteCodec_Encode
	DD	03H
	ORG $+4
	DQ	FLAT:MultibyteCodec_Encode__doc__
	DQ	FLAT:??_C@_06KPNAMAEI@decode?$AA@
	DQ	FLAT:MultibyteCodec_Decode
	DD	03H
	ORG $+4
	DQ	FLAT:MultibyteCodec_Decode__doc__
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
MultibyteCodec_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0P@LGCJMNJM@MultibyteCodec?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:multibytecodec_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:multibytecodec_methods
	ORG $+152
mbiencoder_methods DQ FLAT:??_C@_06GDGADLDP@encode?$AA@
	DQ	FLAT:mbiencoder_encode
	DD	03H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:??_C@_05CFMALAOA@reset?$AA@
	DQ	FLAT:mbiencoder_reset
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
MultibyteIncrementalEncoder_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BM@FOKCGLDH@MultibyteIncrementalEncoder?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:mbiencoder_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:mbiencoder_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:mbiencoder_methods
	DQ	0000000000000000H
	DQ	FLAT:codecctx_getsets
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:mbiencoder_init
	DQ	0000000000000000H
	DQ	FLAT:mbiencoder_new
	ORG $+72
mbidecoder_methods DQ FLAT:??_C@_06KPNAMAEI@decode?$AA@
	DQ	FLAT:mbidecoder_decode
	DD	03H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:??_C@_05CFMALAOA@reset?$AA@
	DQ	FLAT:mbidecoder_reset
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
MultibyteIncrementalDecoder_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BM@JAAPDPFD@MultibyteIncrementalDecoder?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:mbidecoder_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:mbidecoder_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:mbidecoder_methods
	DQ	0000000000000000H
	DQ	FLAT:codecctx_getsets
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:mbidecoder_init
	DQ	0000000000000000H
	DQ	FLAT:mbidecoder_new
	ORG $+72
mbstreamreader_methods DQ FLAT:??_C@_04POLDLDMI@read?$AA@
	DQ	FLAT:mbstreamreader_read
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:??_C@_08KBCDPPMN@readline?$AA@
	DQ	FLAT:mbstreamreader_readline
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:??_C@_09OBGGLHMH@readlines?$AA@
	DQ	FLAT:mbstreamreader_readlines
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:??_C@_05CFMALAOA@reset?$AA@
	DQ	FLAT:mbstreamreader_reset
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
mbstreamreader_members DQ FLAT:??_C@_06DJAMKFID@stream?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000088H
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+32
MultibyteStreamReader_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BG@DEHAHLDM@MultibyteStreamReader?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:mbstreamreader_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:mbstreamreader_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:mbstreamreader_methods
	DQ	FLAT:mbstreamreader_members
	DQ	FLAT:codecctx_getsets
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:mbstreamreader_init
	DQ	0000000000000000H
	DQ	FLAT:mbstreamreader_new
	ORG $+72
mbstreamwriter_methods DQ FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	FLAT:mbstreamwriter_write
	DD	08H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:??_C@_0L@MKGKOOMC@writelines?$AA@
	DQ	FLAT:mbstreamwriter_writelines
	DD	08H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:??_C@_05CFMALAOA@reset?$AA@
	DQ	FLAT:mbstreamwriter_reset
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
mbstreamwriter_members DQ FLAT:??_C@_06DJAMKFID@stream?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000088H
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+32
MultibyteStreamWriter_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BG@BIPCHKOG@MultibyteStreamWriter?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:mbstreamwriter_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:mbstreamwriter_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:mbstreamwriter_methods
	DQ	FLAT:mbstreamwriter_members
	DQ	FLAT:codecctx_getsets
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:mbstreamwriter_init
	DQ	0000000000000000H
	DQ	FLAT:mbstreamwriter_new
	ORG $+72
__methods DQ	FLAT:??_C@_0P@CGBPDBNI@__create_codec?$AA@
	DQ	FLAT:__create_codec
	DD	08H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
_multibytecodecmodule DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BA@EEJLBBNI@_multibytecodec?$AA@
	DQ	0000000000000000H
	DQ	ffffffffffffffffH
	DQ	FLAT:__methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
EXTRN	PyLong_FromSsize_t:PROC
EXTRN	PyTuple_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\cjkcodecs\multibytecodec.c
pdata	SEGMENT
$pdata$make_tuple DD imagerel make_tuple
	DD	imagerel make_tuple+39
	DD	imagerel $unwind$make_tuple
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$make_tuple DD imagerel make_tuple+39
	DD	imagerel make_tuple+83
	DD	imagerel $chain$0$make_tuple
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$make_tuple DD imagerel make_tuple+83
	DD	imagerel make_tuple+126
	DD	imagerel $chain$2$make_tuple
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$make_tuple DD imagerel make_tuple+126
	DD	imagerel make_tuple+149
	DD	imagerel $chain$4$make_tuple
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$make_tuple DD 020021H
	DD	063400H
	DD	imagerel make_tuple
	DD	imagerel make_tuple+39
	DD	imagerel $unwind$make_tuple
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$make_tuple DD 020021H
	DD	063400H
	DD	imagerel make_tuple
	DD	imagerel make_tuple+39
	DD	imagerel $unwind$make_tuple
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$make_tuple DD 020521H
	DD	063405H
	DD	imagerel make_tuple
	DD	imagerel make_tuple+39
	DD	imagerel $unwind$make_tuple
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$make_tuple DD 040a01H
	DD	07640aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT make_tuple
_TEXT	SEGMENT
object$ = 48
len$ = 56
make_tuple PROC						; COMDAT

; 55   : {

  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f2	 mov	 rsi, rdx
  0000d	48 8b f9	 mov	 rdi, rcx

; 56   :     PyObject *v, *w;
; 57   : 
; 58   :     if (object == NULL)

  00010	48 85 c9	 test	 rcx, rcx
  00013	75 0d		 jne	 SHORT $LN3@make_tuple

; 59   :         return NULL;

  00015	33 c0		 xor	 eax, eax

; 72   :     }
; 73   :     PyTuple_SET_ITEM(v, 1, w);
; 74   : 
; 75   :     return v;
; 76   : }

  00017	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0001c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00020	5f		 pop	 rdi
  00021	c3		 ret	 0
$LN3@make_tuple:

; 60   : 
; 61   :     v = PyTuple_New(2);

  00022	b9 02 00 00 00	 mov	 ecx, 2
  00027	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0002c	e8 00 00 00 00	 call	 PyTuple_New
  00031	48 8b d8	 mov	 rbx, rax

; 62   :     if (v == NULL) {

  00034	48 85 c0	 test	 rax, rax
  00037	75 1a		 jne	 SHORT $LN2@make_tuple

; 63   :         Py_DECREF(object);

  00039	48 8b cf	 mov	 rcx, rdi
  0003c	e8 00 00 00 00	 call	 _Py_DecRef
  00041	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 64   :         return NULL;

  00046	33 c0		 xor	 eax, eax

; 72   :     }
; 73   :     PyTuple_SET_ITEM(v, 1, w);
; 74   : 
; 75   :     return v;
; 76   : }

  00048	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0004d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00051	5f		 pop	 rdi
  00052	c3		 ret	 0
$LN2@make_tuple:

; 65   :     }
; 66   :     PyTuple_SET_ITEM(v, 0, object);
; 67   : 
; 68   :     w = PyLong_FromSsize_t(len);

  00053	48 8b ce	 mov	 rcx, rsi
  00056	48 89 78 70	 mov	 QWORD PTR [rax+112], rdi
  0005a	e8 00 00 00 00	 call	 PyLong_FromSsize_t

; 69   :     if (w == NULL) {

  0005f	48 85 c0	 test	 rax, rax
  00062	75 1a		 jne	 SHORT $LN1@make_tuple

; 70   :         Py_DECREF(v);

  00064	48 8b cb	 mov	 rcx, rbx
  00067	e8 00 00 00 00	 call	 _Py_DecRef
  0006c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 71   :         return NULL;

  00071	33 c0		 xor	 eax, eax

; 72   :     }
; 73   :     PyTuple_SET_ITEM(v, 1, w);
; 74   : 
; 75   :     return v;
; 76   : }

  00073	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00078	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007c	5f		 pop	 rdi
  0007d	c3		 ret	 0
$LN1@make_tuple:
  0007e	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00083	48 89 43 78	 mov	 QWORD PTR [rbx+120], rax
  00087	48 8b c3	 mov	 rax, rbx
  0008a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00093	5f		 pop	 rdi
  00094	c3		 ret	 0
make_tuple ENDP
_TEXT	ENDS
PUBLIC	??_C@_07CLEHDIEJ@replace?$AA@			; `string'
PUBLIC	??_C@_06GDPEBLPA@ignore?$AA@			; `string'
PUBLIC	??_C@_06OLFOGHEN@strict?$AA@			; `string'
EXTRN	PyUnicode_FromString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$internal_error_callback DD imagerel internal_error_callback
	DD	imagerel internal_error_callback+141
	DD	imagerel $unwind$internal_error_callback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$internal_error_callback DD 040a01H
	DD	06640aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_07CLEHDIEJ@replace?$AA@
CONST	SEGMENT
??_C@_07CLEHDIEJ@replace?$AA@ DB 'replace', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GDPEBLPA@ignore?$AA@
CONST	SEGMENT
??_C@_06GDPEBLPA@ignore?$AA@ DB 'ignore', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OLFOGHEN@strict?$AA@
CONST	SEGMENT
??_C@_06OLFOGHEN@strict?$AA@ DB 'strict', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT internal_error_callback
_TEXT	SEGMENT
errors$ = 48
internal_error_callback PROC				; COMDAT

; 80   : {

  00000	48 89 74 24 08	 mov	 QWORD PTR [rsp+8], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b c1	 mov	 rax, rcx

; 81   :     if (errors == NULL || strcmp(errors, "strict") == 0)

  0000d	48 85 c9	 test	 rcx, rcx
  00010	74 6b		 je	 SHORT $LN6@internal_e
  00012	48 8b f1	 mov	 rsi, rcx
  00015	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_06OLFOGHEN@strict?$AA@
  0001c	b9 07 00 00 00	 mov	 ecx, 7
  00021	f3 a6		 repe cmpsb
  00023	74 58		 je	 SHORT $LN6@internal_e

; 83   :     else if (strcmp(errors, "ignore") == 0)

  00025	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_06GDPEBLPA@ignore?$AA@
  0002c	48 8b f0	 mov	 rsi, rax
  0002f	b9 07 00 00 00	 mov	 ecx, 7
  00034	f3 a6		 repe cmpsb
  00036	75 10		 jne	 SHORT $LN4@internal_e

; 84   :         return ERROR_IGNORE;

  00038	b8 02 00 00 00	 mov	 eax, 2

; 89   : }

  0003d	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  00042	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00046	5f		 pop	 rdi
  00047	c3		 ret	 0
$LN4@internal_e:

; 85   :     else if (strcmp(errors, "replace") == 0)

  00048	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_07CLEHDIEJ@replace?$AA@
  0004f	48 8b f0	 mov	 rsi, rax
  00052	b9 08 00 00 00	 mov	 ecx, 8
  00057	f3 a6		 repe cmpsb
  00059	75 10		 jne	 SHORT $LN2@internal_e

; 86   :         return ERROR_REPLACE;

  0005b	b8 03 00 00 00	 mov	 eax, 3

; 89   : }

  00060	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  00065	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00069	5f		 pop	 rdi
  0006a	c3		 ret	 0
$LN2@internal_e:

; 87   :     else
; 88   :         return PyUnicode_FromString(errors);

  0006b	48 8b c8	 mov	 rcx, rax

; 89   : }

  0006e	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  00073	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00077	5f		 pop	 rdi
  00078	e9 00 00 00 00	 jmp	 PyUnicode_FromString
$LN6@internal_e:

; 82   :         return ERROR_STRICT;

  0007d	b8 01 00 00 00	 mov	 eax, 1

; 89   : }

  00082	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  00087	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008b	5f		 pop	 rdi
  0008c	c3		 ret	 0
internal_error_callback ENDP
_TEXT	ENDS
EXTRN	PyObject_CallObject:PROC
EXTRN	PyCodec_LookupError:PROC
EXTRN	PyUnicode_AsUTF8:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$call_error_callback DD imagerel call_error_callback
	DD	imagerel call_error_callback+28
	DD	imagerel $unwind$call_error_callback
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$call_error_callback DD imagerel call_error_callback+28
	DD	imagerel call_error_callback+57
	DD	imagerel $chain$0$call_error_callback
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$call_error_callback DD imagerel call_error_callback+57
	DD	imagerel call_error_callback+106
	DD	imagerel $chain$3$call_error_callback
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$call_error_callback DD imagerel call_error_callback+106
	DD	imagerel call_error_callback+167
	DD	imagerel $chain$5$call_error_callback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$call_error_callback DD 040021H
	DD	077400H
	DD	066400H
	DD	imagerel call_error_callback
	DD	imagerel call_error_callback+28
	DD	imagerel $unwind$call_error_callback
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$call_error_callback DD 040a21H
	DD	06640aH
	DD	077400H
	DD	imagerel call_error_callback
	DD	imagerel call_error_callback+28
	DD	imagerel $unwind$call_error_callback
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$call_error_callback DD 020521H
	DD	077405H
	DD	imagerel call_error_callback
	DD	imagerel call_error_callback+28
	DD	imagerel $unwind$call_error_callback
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$call_error_callback DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT call_error_callback
_TEXT	SEGMENT
errors$ = 48
exc$ = 56
call_error_callback PROC				; COMDAT

; 93   : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b da	 mov	 rbx, rdx

; 94   :     PyObject *args, *cb, *r;
; 95   :     const char *str;
; 96   : 
; 97   :     assert(PyUnicode_Check(errors));
; 98   :     str = _PyUnicode_AsString(errors);

  00009	e8 00 00 00 00	 call	 PyUnicode_AsUTF8

; 99   :     if (str == NULL)

  0000e	48 85 c0	 test	 rax, rax
  00011	75 06		 jne	 SHORT $LN3@call_error

; 118  : }

  00013	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00017	5b		 pop	 rbx
  00018	c3		 ret	 0
$LN3@call_error:

; 100  :         return NULL;
; 101  :     cb = PyCodec_LookupError(str);

  00019	48 8b c8	 mov	 rcx, rax
  0001c	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  00021	e8 00 00 00 00	 call	 PyCodec_LookupError
  00026	48 8b f8	 mov	 rdi, rax

; 102  :     if (cb == NULL)

  00029	48 85 c0	 test	 rax, rax
  0002c	75 0b		 jne	 SHORT $LN2@call_error
  0002e	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]

; 118  : }

  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5b		 pop	 rbx
  00038	c3		 ret	 0
$LN2@call_error:

; 103  :         return NULL;
; 104  : 
; 105  :     args = PyTuple_New(1);

  00039	b9 01 00 00 00	 mov	 ecx, 1
  0003e	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  00043	e8 00 00 00 00	 call	 PyTuple_New
  00048	48 8b f0	 mov	 rsi, rax

; 106  :     if (args == NULL) {

  0004b	48 85 c0	 test	 rax, rax
  0004e	75 1a		 jne	 SHORT $LN1@call_error

; 107  :         Py_DECREF(cb);

  00050	48 8b cf	 mov	 rcx, rdi
  00053	e8 00 00 00 00	 call	 _Py_DecRef
  00058	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  0005d	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]

; 108  :         return NULL;

  00062	33 c0		 xor	 eax, eax

; 118  : }

  00064	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00068	5b		 pop	 rbx
  00069	c3		 ret	 0
$LN1@call_error:

; 109  :     }
; 110  : 
; 111  :     PyTuple_SET_ITEM(args, 0, exc);
; 112  :     Py_INCREF(exc);

  0006a	48 8b cb	 mov	 rcx, rbx
  0006d	48 89 58 70	 mov	 QWORD PTR [rax+112], rbx
  00071	e8 00 00 00 00	 call	 _Py_IncRef

; 113  : 
; 114  :     r = PyObject_CallObject(cb, args);

  00076	48 8b d6	 mov	 rdx, rsi
  00079	48 8b cf	 mov	 rcx, rdi
  0007c	e8 00 00 00 00	 call	 PyObject_CallObject

; 115  :     Py_DECREF(args);

  00081	48 8b ce	 mov	 rcx, rsi
  00084	48 8b d8	 mov	 rbx, rax
  00087	e8 00 00 00 00	 call	 _Py_DecRef

; 116  :     Py_DECREF(cb);

  0008c	48 8b cf	 mov	 rcx, rdi
  0008f	e8 00 00 00 00	 call	 _Py_DecRef
  00094	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  00099	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]

; 117  :     return r;

  0009e	48 8b c3	 mov	 rax, rbx

; 118  : }

  000a1	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a5	5b		 pop	 rbx
  000a6	c3		 ret	 0
call_error_callback ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$codecctx_errors_get DD imagerel codecctx_errors_get
	DD	imagerel codecctx_errors_get+97
	DD	imagerel $unwind$codecctx_errors_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$codecctx_errors_get DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT codecctx_errors_get
_TEXT	SEGMENT
self$ = 48
codecctx_errors_get PROC				; COMDAT

; 122  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 123  :     const char *errors;
; 124  : 
; 125  :     if (self->errors == ERROR_STRICT)

  00009	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  0000d	48 83 f9 01	 cmp	 rcx, 1
  00011	75 11		 jne	 SHORT $LN6@codecctx_e

; 126  :         errors = "strict";

  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06OLFOGHEN@strict?$AA@

; 134  :     }
; 135  : 
; 136  :     return PyUnicode_FromString(errors);
; 137  : }

  0001a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001e	5b		 pop	 rbx
  0001f	e9 00 00 00 00	 jmp	 PyUnicode_FromString
$LN6@codecctx_e:

; 127  :     else if (self->errors == ERROR_IGNORE)

  00024	48 83 f9 02	 cmp	 rcx, 2
  00028	75 11		 jne	 SHORT $LN4@codecctx_e

; 128  :         errors = "ignore";

  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06GDPEBLPA@ignore?$AA@

; 134  :     }
; 135  : 
; 136  :     return PyUnicode_FromString(errors);
; 137  : }

  00031	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00035	5b		 pop	 rbx
  00036	e9 00 00 00 00	 jmp	 PyUnicode_FromString
$LN4@codecctx_e:

; 129  :     else if (self->errors == ERROR_REPLACE)

  0003b	48 83 f9 03	 cmp	 rcx, 3
  0003f	75 11		 jne	 SHORT $LN2@codecctx_e

; 130  :         errors = "replace";

  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07CLEHDIEJ@replace?$AA@

; 134  :     }
; 135  : 
; 136  :     return PyUnicode_FromString(errors);
; 137  : }

  00048	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004c	5b		 pop	 rbx
  0004d	e9 00 00 00 00	 jmp	 PyUnicode_FromString
$LN2@codecctx_e:

; 131  :     else {
; 132  :         Py_INCREF(self->errors);

  00052	e8 00 00 00 00	 call	 _Py_IncRef

; 133  :         return self->errors;

  00057	48 8b 43 70	 mov	 rax, QWORD PTR [rbx+112]

; 134  :     }
; 135  : 
; 136  :     return PyUnicode_FromString(errors);
; 137  : }

  0005b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005f	5b		 pop	 rbx
  00060	c3		 ret	 0
codecctx_errors_get ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@IFJPBJFA@errors?5must?5be?5a?5string?$AA@ ; `string'
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_TypeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$codecctx_errors_set DD imagerel codecctx_errors_set
	DD	imagerel codecctx_errors_set+69
	DD	imagerel $unwind$codecctx_errors_set
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$codecctx_errors_set DD imagerel codecctx_errors_set+69
	DD	imagerel codecctx_errors_set+101
	DD	imagerel $chain$0$codecctx_errors_set
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$codecctx_errors_set DD imagerel codecctx_errors_set+101
	DD	imagerel codecctx_errors_set+144
	DD	imagerel $chain$2$codecctx_errors_set
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$codecctx_errors_set DD 020021H
	DD	063400H
	DD	imagerel codecctx_errors_set
	DD	imagerel codecctx_errors_set+69
	DD	imagerel $unwind$codecctx_errors_set
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$codecctx_errors_set DD 020521H
	DD	063405H
	DD	imagerel codecctx_errors_set
	DD	imagerel codecctx_errors_set+69
	DD	imagerel $unwind$codecctx_errors_set
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$codecctx_errors_set DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT ??_C@_0BI@IFJPBJFA@errors?5must?5be?5a?5string?$AA@
CONST	SEGMENT
??_C@_0BI@IFJPBJFA@errors?5must?5be?5a?5string?$AA@ DB 'errors must be a '
	DB	'string', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT codecctx_errors_set
_TEXT	SEGMENT
self$ = 48
value$ = 56
closure$ = 64
codecctx_errors_set PROC				; COMDAT

; 142  : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 143  :     PyObject *cb;
; 144  :     const char *str;
; 145  : 
; 146  :     if (!PyUnicode_Check(value)) {

  00006	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  0000a	48 8b f9	 mov	 rdi, rcx
  0000d	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  00017	75 1c		 jne	 SHORT $LN8@codecctx_e@2

; 147  :         PyErr_SetString(PyExc_TypeError, "errors must be a string");

  00019	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@IFJPBJFA@errors?5must?5be?5a?5string?$AA@
  00027	e8 00 00 00 00	 call	 PyErr_SetString
$LN12@codecctx_e@2:

; 148  :         return -1;

  0002c	83 c8 ff	 or	 eax, -1

; 162  : }

  0002f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00033	5f		 pop	 rdi
  00034	c3		 ret	 0
$LN8@codecctx_e@2:

; 149  :     }
; 150  : 
; 151  :     str = _PyUnicode_AsString(value);

  00035	48 8b ca	 mov	 rcx, rdx
  00038	e8 00 00 00 00	 call	 PyUnicode_AsUTF8

; 152  :     if (str == NULL)

  0003d	48 85 c0	 test	 rax, rax

; 153  :         return -1;

  00040	74 ea		 je	 SHORT $LN12@codecctx_e@2

; 154  : 
; 155  :     cb = internal_error_callback(str);

  00042	48 8b c8	 mov	 rcx, rax
  00045	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0004a	e8 00 00 00 00	 call	 internal_error_callback
  0004f	48 8b d8	 mov	 rbx, rax

; 156  :     if (cb == NULL)

  00052	48 85 c0	 test	 rax, rax
  00055	75 0e		 jne	 SHORT $LN5@codecctx_e@2

; 157  :         return -1;

  00057	83 c8 ff	 or	 eax, -1
  0005a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 162  : }

  0005f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00063	5f		 pop	 rdi
  00064	c3		 ret	 0
$LN5@codecctx_e@2:

; 158  : 
; 159  :     ERROR_DECREF(self->errors);

  00065	48 8b 4f 70	 mov	 rcx, QWORD PTR [rdi+112]
  00069	48 85 c9	 test	 rcx, rcx
  0006c	74 11		 je	 SHORT $LN4@codecctx_e@2
  0006e	48 83 f9 01	 cmp	 rcx, 1
  00072	72 06		 jb	 SHORT $LN1@codecctx_e@2
  00074	48 83 f9 03	 cmp	 rcx, 3
  00078	76 05		 jbe	 SHORT $LN4@codecctx_e@2
$LN1@codecctx_e@2:
  0007a	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@codecctx_e@2:

; 160  :     self->errors = cb;

  0007f	48 89 5f 70	 mov	 QWORD PTR [rdi+112], rbx
  00083	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 161  :     return 0;

  00088	33 c0		 xor	 eax, eax

; 162  : }

  0008a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008e	5f		 pop	 rdi
  0008f	c3		 ret	 0
codecctx_errors_set ENDP
_TEXT	ENDS
EXTRN	_PyBytes_Resize:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$expand_encodebuffer DD imagerel expand_encodebuffer
	DD	imagerel expand_encodebuffer+151
	DD	imagerel $unwind$expand_encodebuffer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$expand_encodebuffer DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT expand_encodebuffer
_TEXT	SEGMENT
buf$ = 48
esize$ = 56
expand_encodebuffer PROC				; COMDAT

; 174  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 175  :     Py_ssize_t orgpos, orgsize, incsize;
; 176  : 
; 177  :     orgpos = (Py_ssize_t)((char *)buf->outbuf -
; 178  :                             PyBytes_AS_STRING(buf->outobj));

  0000f	48 8b 41 30	 mov	 rax, QWORD PTR [rcx+48]
  00013	48 8b 71 18	 mov	 rsi, QWORD PTR [rcx+24]
  00017	48 8b d9	 mov	 rbx, rcx

; 179  :     orgsize = PyBytes_GET_SIZE(buf->outobj);

  0001a	4c 8b 40 60	 mov	 r8, QWORD PTR [rax+96]
  0001e	48 2b f0	 sub	 rsi, rax

; 180  :     incsize = (esize < (orgsize >> 1) ? (orgsize >> 1) | 1 : esize);

  00021	49 8b c0	 mov	 rax, r8
  00024	48 d1 f8	 sar	 rax, 1
  00027	48 3b d0	 cmp	 rdx, rax
  0002a	7d 0a		 jge	 SHORT $LN5@expand_enc
  0002c	49 8b d0	 mov	 rdx, r8
  0002f	48 83 ca 02	 or	 rdx, 2
  00033	48 d1 fa	 sar	 rdx, 1
$LN5@expand_enc:

; 181  : 
; 182  :     if (orgsize > PY_SSIZE_T_MAX - incsize)

  00036	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  00040	48 2b c2	 sub	 rax, rdx
  00043	4c 3b c0	 cmp	 r8, rax
  00046	7e 13		 jle	 SHORT $LN2@expand_enc
$LN7@expand_enc:

; 183  :         return -1;

  00048	83 c8 ff	 or	 eax, -1

; 189  :     buf->outbuf_end = (unsigned char *)PyBytes_AS_STRING(buf->outobj)
; 190  :         + PyBytes_GET_SIZE(buf->outobj);
; 191  : 
; 192  :     return 0;
; 193  : }

  0004b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00050	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00055	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00059	5f		 pop	 rdi
  0005a	c3		 ret	 0
$LN2@expand_enc:

; 184  : 
; 185  :     if (_PyBytes_Resize(&buf->outobj, orgsize + incsize) == -1)

  0005b	49 03 d0	 add	 rdx, r8
  0005e	48 83 c1 30	 add	 rcx, 48			; 00000030H
  00062	e8 00 00 00 00	 call	 _PyBytes_Resize
  00067	83 f8 ff	 cmp	 eax, -1

; 186  :         return -1;

  0006a	74 dc		 je	 SHORT $LN7@expand_enc

; 187  : 
; 188  :     buf->outbuf = (unsigned char *)PyBytes_AS_STRING(buf->outobj) +orgpos;

  0006c	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  00070	48 8d 04 31	 lea	 rax, QWORD PTR [rcx+rsi]

; 189  :     buf->outbuf_end = (unsigned char *)PyBytes_AS_STRING(buf->outobj)
; 190  :         + PyBytes_GET_SIZE(buf->outobj);
; 191  : 
; 192  :     return 0;
; 193  : }

  00074	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00079	48 89 43 18	 mov	 QWORD PTR [rbx+24], rax
  0007d	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  00081	48 8d 4c 08 78	 lea	 rcx, QWORD PTR [rax+rcx+120]
  00086	33 c0		 xor	 eax, eax
  00088	48 89 4b 20	 mov	 QWORD PTR [rbx+32], rcx
  0008c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00091	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00095	5f		 pop	 rdi
  00096	c3		 ret	 0
expand_encodebuffer ENDP
_TEXT	ENDS
EXTRN	PyUnicode_Resize:PROC
EXTRN	PyUnicode_AsUnicode:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$expand_decodebuffer DD imagerel expand_decodebuffer
	DD	imagerel expand_decodebuffer+296
	DD	imagerel $unwind$expand_decodebuffer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$expand_decodebuffer DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT expand_decodebuffer
_TEXT	SEGMENT
buf$ = 48
esize$ = 56
expand_decodebuffer PROC				; COMDAT

; 202  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b e9	 mov	 rbp, rcx

; 203  :     Py_ssize_t orgpos, orgsize;
; 204  : 
; 205  :     orgpos = (Py_ssize_t)(buf->outbuf - PyUnicode_AS_UNICODE(buf->outobj));

  00017	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  0001b	48 8b fa	 mov	 rdi, rdx
  0001e	48 8b 41 78	 mov	 rax, QWORD PTR [rcx+120]
  00022	48 85 c0	 test	 rax, rax
  00025	75 05		 jne	 SHORT $LN5@expand_dec
  00027	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
$LN5@expand_dec:
  0002c	48 8b 75 18	 mov	 rsi, QWORD PTR [rbp+24]

; 206  :     orgsize = PyUnicode_GET_SIZE(buf->outobj);

  00030	48 8b 4d 30	 mov	 rcx, QWORD PTR [rbp+48]
  00034	48 2b f0	 sub	 rsi, rax
  00037	48 d1 fe	 sar	 rsi, 1
  0003a	48 83 79 78 00	 cmp	 QWORD PTR [rcx+120], 0
  0003f	75 09		 jne	 SHORT $LN27@expand_dec
  00041	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  00046	48 8b 4d 30	 mov	 rcx, QWORD PTR [rbp+48]
$LN27@expand_dec:
  0004a	8b 41 70	 mov	 eax, DWORD PTR [rcx+112]
  0004d	a8 40		 test	 al, 64			; 00000040H
  0004f	74 0a		 je	 SHORT $LN8@expand_dec
  00051	a8 20		 test	 al, 32			; 00000020H
  00053	74 06		 je	 SHORT $LN8@expand_dec
  00055	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00059	eb 07		 jmp	 SHORT $LN9@expand_dec
$LN8@expand_dec:
  0005b	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
$LN9@expand_dec:

; 207  :     if (PyUnicode_Resize(&buf->outobj, orgsize + (
; 208  :         esize < (orgsize >> 1) ? (orgsize >> 1) | 1 : esize)) == -1)

  00062	48 8b c1	 mov	 rax, rcx
  00065	48 d1 f8	 sar	 rax, 1
  00068	48 3b f8	 cmp	 rdi, rax
  0006b	7d 0a		 jge	 SHORT $LN12@expand_dec
  0006d	48 8b f9	 mov	 rdi, rcx
  00070	48 83 cf 02	 or	 rdi, 2
  00074	48 d1 ff	 sar	 rdi, 1
$LN12@expand_dec:
  00077	48 8d 14 0f	 lea	 rdx, QWORD PTR [rdi+rcx]
  0007b	48 8d 4d 30	 lea	 rcx, QWORD PTR [rbp+48]
  0007f	e8 00 00 00 00	 call	 PyUnicode_Resize
  00084	83 f8 ff	 cmp	 eax, -1
  00087	75 07		 jne	 SHORT $LN1@expand_dec

; 209  :         return -1;

  00089	0b c0		 or	 eax, eax
  0008b	e9 83 00 00 00	 jmp	 $LN2@expand_dec
$LN1@expand_dec:

; 210  : 
; 211  :     buf->outbuf = PyUnicode_AS_UNICODE(buf->outobj) + orgpos;

  00090	48 8b 4d 30	 mov	 rcx, QWORD PTR [rbp+48]
  00094	48 8b 41 78	 mov	 rax, QWORD PTR [rcx+120]
  00098	48 85 c0	 test	 rax, rax
  0009b	75 05		 jne	 SHORT $LN15@expand_dec
  0009d	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
$LN15@expand_dec:

; 212  :     buf->outbuf_end = PyUnicode_AS_UNICODE(buf->outobj)
; 213  :                       + PyUnicode_GET_SIZE(buf->outobj);

  000a2	48 8b 4d 30	 mov	 rcx, QWORD PTR [rbp+48]
  000a6	48 8d 04 70	 lea	 rax, QWORD PTR [rax+rsi*2]
  000aa	48 89 45 18	 mov	 QWORD PTR [rbp+24], rax
  000ae	48 8b 79 78	 mov	 rdi, QWORD PTR [rcx+120]
  000b2	48 85 ff	 test	 rdi, rdi
  000b5	75 08		 jne	 SHORT $LN17@expand_dec
  000b7	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  000bc	48 8b f8	 mov	 rdi, rax
$LN17@expand_dec:
  000bf	48 8b 4d 30	 mov	 rcx, QWORD PTR [rbp+48]
  000c3	48 83 79 78 00	 cmp	 QWORD PTR [rcx+120], 0
  000c8	74 1c		 je	 SHORT $LN22@expand_dec
  000ca	8b 51 70	 mov	 edx, DWORD PTR [rcx+112]
  000cd	f6 c2 40	 test	 dl, 64			; 00000040H
  000d0	74 0b		 je	 SHORT $LN18@expand_dec
  000d2	f6 c2 20	 test	 dl, 32			; 00000020H
  000d5	74 06		 je	 SHORT $LN18@expand_dec
  000d7	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  000db	eb 2c		 jmp	 SHORT $LN21@expand_dec
$LN18@expand_dec:
  000dd	48 8b 81 90 00
	00 00		 mov	 rax, QWORD PTR [rcx+144]
  000e4	eb 23		 jmp	 SHORT $LN21@expand_dec
$LN22@expand_dec:
  000e6	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  000eb	48 8b 45 30	 mov	 rax, QWORD PTR [rbp+48]
  000ef	8b 48 70	 mov	 ecx, DWORD PTR [rax+112]
  000f2	f6 c1 40	 test	 cl, 64			; 00000040H
  000f5	74 0b		 je	 SHORT $LN20@expand_dec
  000f7	f6 c1 20	 test	 cl, 32			; 00000020H
  000fa	74 06		 je	 SHORT $LN20@expand_dec
  000fc	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00100	eb 07		 jmp	 SHORT $LN21@expand_dec
$LN20@expand_dec:
  00102	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
$LN21@expand_dec:
  00109	48 8d 04 47	 lea	 rax, QWORD PTR [rdi+rax*2]
  0010d	48 89 45 20	 mov	 QWORD PTR [rbp+32], rax

; 214  : 
; 215  :     return 0;

  00111	33 c0		 xor	 eax, eax
$LN2@expand_dec:

; 216  : }

  00113	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00118	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0011d	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00122	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00126	5f		 pop	 rdi
  00127	c3		 ret	 0
expand_decodebuffer ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@DBHHINF@internal?5codec?5error?$AA@	; `string'
PUBLIC	??_C@_0DE@PKHNAIAA@encoding?5error?5handler?5must?5retu@ ; `string'
PUBLIC	??_C@_0CO@NELAFELL@position?5?$CFzd?5from?5error?5handler?5@ ; `string'
PUBLIC	??_C@_0BO@NPKGELOO@incomplete?5multibyte?5sequence?$AA@ ; `string'
PUBLIC	??_C@_0BG@NBDJHAFE@unknown?5runtime?5error?$AA@	; `string'
PUBLIC	??_C@_0BL@MMCIDIKH@illegal?5multibyte?5sequence?$AA@ ; `string'
EXTRN	PyExc_RuntimeError:QWORD
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_IndexError:QWORD
EXTRN	PyErr_Clear:PROC
EXTRN	PyErr_Occurred:PROC
EXTRN	PyLong_AsSsize_t:PROC
EXTRN	PyCodec_StrictErrors:PROC
EXTRN	PyUnicodeEncodeError_SetReason:PROC
EXTRN	PyUnicodeEncodeError_SetEnd:PROC
EXTRN	PyUnicodeEncodeError_SetStart:PROC
EXTRN	PyUnicodeEncodeError_Create:PROC
EXTRN	memcpy:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$multibytecodec_encerror DD imagerel multibytecodec_encerror
	DD	imagerel multibytecodec_encerror+1109
	DD	imagerel $unwind$multibytecodec_encerror
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$multibytecodec_encerror DD 0c1e01H
	DD	011741eH
	DD	010641eH
	DD	0f541eH
	DD	0e341eH
	DD	0e01a921eH
	DD	0c016d018H
xdata	ENDS
;	COMDAT ??_C@_0BF@DBHHINF@internal?5codec?5error?$AA@
CONST	SEGMENT
??_C@_0BF@DBHHINF@internal?5codec?5error?$AA@ DB 'internal codec error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@PKHNAIAA@encoding?5error?5handler?5must?5retu@
CONST	SEGMENT
??_C@_0DE@PKHNAIAA@encoding?5error?5handler?5must?5retu@ DB 'encoding err'
	DB	'or handler must return (str, int) tuple', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@NELAFELL@position?5?$CFzd?5from?5error?5handler?5@
CONST	SEGMENT
??_C@_0CO@NELAFELL@position?5?$CFzd?5from?5error?5handler?5@ DB 'position'
	DB	' %zd from error handler out of bounds', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@NPKGELOO@incomplete?5multibyte?5sequence?$AA@
CONST	SEGMENT
??_C@_0BO@NPKGELOO@incomplete?5multibyte?5sequence?$AA@ DB 'incomplete mu'
	DB	'ltibyte sequence', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NBDJHAFE@unknown?5runtime?5error?$AA@
CONST	SEGMENT
??_C@_0BG@NBDJHAFE@unknown?5runtime?5error?$AA@ DB 'unknown runtime error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MMCIDIKH@illegal?5multibyte?5sequence?$AA@
CONST	SEGMENT
??_C@_0BL@MMCIDIKH@illegal?5multibyte?5sequence?$AA@ DB 'illegal multibyt'
	DB	'e sequence', 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\cjkcodecs\multibytecodec.c
CONST	ENDS
;	COMDAT multibytecodec_encerror
_TEXT	SEGMENT
inbuf$20647 = 64
codec$ = 112
state$ = 120
buf$ = 128
errors$ = 136
uraw$20691 = 144
replchar$20646 = 144
e$ = 144
multibytecodec_encerror PROC				; COMDAT

; 233  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	41 55		 push	 r13
  00018	41 56		 push	 r14
  0001a	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 234  :     PyObject *retobj = NULL, *retstr = NULL, *tobj;
; 235  :     Py_ssize_t retstrsize, newpos;
; 236  :     Py_ssize_t esize, start, end;
; 237  :     const char *reason;
; 238  : 
; 239  :     if (e > 0) {

  0001e	48 8b bc 24 90
	00 00 00	 mov	 rdi, QWORD PTR e$[rsp]
  00026	33 ed		 xor	 ebp, ebp
  00028	49 8b f1	 mov	 rsi, r9
  0002b	49 8b d8	 mov	 rbx, r8
  0002e	4c 8b f2	 mov	 r14, rdx
  00031	4c 8b e9	 mov	 r13, rcx
  00034	48 85 ff	 test	 rdi, rdi
  00037	7e 09		 jle	 SHORT $LN50@multibytec

; 240  :         reason = "illegal multibyte sequence";

  00039	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:??_C@_0BL@MMCIDIKH@illegal?5multibyte?5sequence?$AA@

; 241  :         esize = e;
; 242  :     }
; 243  :     else {

  00040	eb 4f		 jmp	 SHORT $LN47@multibytec
$LN50@multibytec:

; 244  :         switch (e) {

  00042	48 83 ff fd	 cmp	 rdi, -3
  00046	0f 84 d4 03 00
	00		 je	 $LN42@multibytec
  0004c	48 83 ff fe	 cmp	 rdi, -2
  00050	74 2e		 je	 SHORT $LN43@multibytec
  00052	48 83 ff ff	 cmp	 rdi, -1
  00056	74 0c		 je	 SHORT $LN46@multibytec

; 256  :         default:
; 257  :             PyErr_SetString(PyExc_RuntimeError,
; 258  :                             "unknown runtime error");

  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@NBDJHAFE@unknown?5runtime?5error?$AA@

; 259  :             return -1;

  0005f	e9 c3 03 00 00	 jmp	 $LN69@multibytec
$LN46@multibytec:

; 245  :         case MBERR_TOOSMALL:
; 246  :             REQUIRE_ENCODEBUFFER(buf, -1);

  00064	48 83 ca ff	 or	 rdx, -1
  00068	48 8b cb	 mov	 rcx, rbx
  0006b	e8 00 00 00 00	 call	 expand_encodebuffer
  00070	83 f8 ff	 cmp	 eax, -1
  00073	0f 84 ba 03 00
	00		 je	 $LN3@multibytec

; 247  :             return 0; /* retry it */

  00079	33 c0		 xor	 eax, eax
  0007b	e9 b6 03 00 00	 jmp	 $LN51@multibytec
$LN43@multibytec:

; 248  :         case MBERR_TOOFEW:
; 249  :             reason = "incomplete multibyte sequence";
; 250  :             esize = (Py_ssize_t)(buf->inbuf_end - buf->inbuf);

  00080	49 8b 78 10	 mov	 rdi, QWORD PTR [r8+16]
  00084	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:??_C@_0BO@NPKGELOO@incomplete?5multibyte?5sequence?$AA@
  0008b	49 2b 38	 sub	 rdi, QWORD PTR [r8]
  0008e	48 d1 ff	 sar	 rdi, 1
$LN47@multibytec:

; 260  :         }
; 261  :     }
; 262  : 
; 263  :     if (errors == ERROR_REPLACE) {

  00091	49 83 f9 03	 cmp	 r9, 3
  00095	0f 85 d9 00 00
	00		 jne	 $LN33@multibytec

; 264  :         const Py_UNICODE replchar = '?', *inbuf = &replchar;
; 265  :         Py_ssize_t r;
; 266  : 
; 267  :         for (;;) {
; 268  :             Py_ssize_t outleft;
; 269  : 
; 270  :             outleft = (Py_ssize_t)(buf->outbuf_end - buf->outbuf);
; 271  :             r = codec->encode(state, codec->config, &inbuf, 1,
; 272  :                               &buf->outbuf, outleft, 0);

  0009b	48 8b 51 08	 mov	 rdx, QWORD PTR [rcx+8]
  0009f	49 8d 70 18	 lea	 rsi, QWORD PTR [r8+24]
  000a3	b8 3f 00 00 00	 mov	 eax, 63			; 0000003fH
  000a8	66 89 84 24 90
	00 00 00	 mov	 WORD PTR replchar$20646[rsp], ax
  000b0	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR replchar$20646[rsp]
  000b8	89 6c 24 30	 mov	 DWORD PTR [rsp+48], ebp
  000bc	48 89 44 24 40	 mov	 QWORD PTR inbuf$20647[rsp], rax
  000c1	49 8b 40 20	 mov	 rax, QWORD PTR [r8+32]
  000c5	4c 8d 44 24 40	 lea	 r8, QWORD PTR inbuf$20647[rsp]
  000ca	48 2b 06	 sub	 rax, QWORD PTR [rsi]
  000cd	41 b9 01 00 00
	00		 mov	 r9d, 1
  000d3	49 8b ce	 mov	 rcx, r14
  000d6	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000db	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  000e0	41 ff 55 18	 call	 QWORD PTR [r13+24]

; 273  :             if (r == MBERR_TOOSMALL) {

  000e4	48 83 f8 ff	 cmp	 rax, -1
  000e8	75 4c		 jne	 SHORT $LN37@multibytec
  000ea	66 0f 1f 44 00
	00		 npad	 6
$LL39@multibytec:

; 274  :                 REQUIRE_ENCODEBUFFER(buf, -1);

  000f0	48 83 ca ff	 or	 rdx, -1
  000f4	48 8b cb	 mov	 rcx, rbx
  000f7	e8 00 00 00 00	 call	 expand_encodebuffer
  000fc	83 f8 ff	 cmp	 eax, -1
  000ff	0f 84 2e 03 00
	00		 je	 $LN3@multibytec

; 264  :         const Py_UNICODE replchar = '?', *inbuf = &replchar;
; 265  :         Py_ssize_t r;
; 266  : 
; 267  :         for (;;) {
; 268  :             Py_ssize_t outleft;
; 269  : 
; 270  :             outleft = (Py_ssize_t)(buf->outbuf_end - buf->outbuf);
; 271  :             r = codec->encode(state, codec->config, &inbuf, 1,
; 272  :                               &buf->outbuf, outleft, 0);

  00105	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00109	49 8b 55 08	 mov	 rdx, QWORD PTR [r13+8]
  0010d	89 6c 24 30	 mov	 DWORD PTR [rsp+48], ebp
  00111	48 2b 06	 sub	 rax, QWORD PTR [rsi]
  00114	4c 8d 44 24 40	 lea	 r8, QWORD PTR inbuf$20647[rsp]
  00119	41 b9 01 00 00
	00		 mov	 r9d, 1
  0011f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00124	49 8b ce	 mov	 rcx, r14
  00127	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0012c	41 ff 55 18	 call	 QWORD PTR [r13+24]

; 273  :             if (r == MBERR_TOOSMALL) {

  00130	48 83 f8 ff	 cmp	 rax, -1
  00134	74 ba		 je	 SHORT $LL39@multibytec
$LN37@multibytec:

; 275  :                 continue;
; 276  :             }
; 277  :             else
; 278  :                 break;
; 279  :         }
; 280  : 
; 281  :         if (r != 0) {

  00136	48 85 c0	 test	 rax, rax
  00139	74 2b		 je	 SHORT $LN28@multibytec

; 282  :             REQUIRE_ENCODEBUFFER(buf, 1);

  0013b	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  0013e	48 ff c0	 inc	 rax
  00141	48 3b 43 20	 cmp	 rax, QWORD PTR [rbx+32]
  00145	76 16		 jbe	 SHORT $LN30@multibytec
  00147	ba 01 00 00 00	 mov	 edx, 1
  0014c	48 8b cb	 mov	 rcx, rbx
  0014f	e8 00 00 00 00	 call	 expand_encodebuffer
  00154	83 f8 ff	 cmp	 eax, -1
  00157	0f 84 d6 02 00
	00		 je	 $LN3@multibytec
$LN30@multibytec:

; 283  :             *buf->outbuf++ = '?';

  0015d	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  00160	c6 00 3f	 mov	 BYTE PTR [rax], 63	; 0000003fH
  00163	48 ff 06	 inc	 QWORD PTR [rsi]
$LN28@multibytec:

; 287  :         buf->inbuf += esize;

  00166	48 8d 04 3f	 lea	 rax, QWORD PTR [rdi+rdi]
  0016a	48 01 03	 add	 QWORD PTR [rbx], rax

; 288  :         return 0;

  0016d	33 c0		 xor	 eax, eax
  0016f	e9 c2 02 00 00	 jmp	 $LN51@multibytec
$LN33@multibytec:

; 284  :         }
; 285  :     }
; 286  :     if (errors == ERROR_IGNORE || errors == ERROR_REPLACE) {

  00174	49 83 f9 02	 cmp	 r9, 2
  00178	74 ec		 je	 SHORT $LN28@multibytec

; 289  :     }
; 290  : 
; 291  :     start = (Py_ssize_t)(buf->inbuf - buf->inbuf_top);

  0017a	49 8b 40 08	 mov	 rax, QWORD PTR [r8+8]
  0017e	49 8b 10	 mov	 rdx, QWORD PTR [r8]

; 292  :     end = start + esize;
; 293  : 
; 294  :     /* use cached exception object if available */
; 295  :     if (buf->excobj == NULL) {

  00181	49 8b 48 28	 mov	 rcx, QWORD PTR [r8+40]
  00185	48 2b d0	 sub	 rdx, rax
  00188	48 d1 fa	 sar	 rdx, 1
  0018b	48 03 fa	 add	 rdi, rdx
  0018e	48 85 c9	 test	 rcx, rcx
  00191	75 32		 jne	 SHORT $LN27@multibytec

; 296  :         buf->excobj = PyUnicodeEncodeError_Create(codec->encoding,
; 297  :                         buf->inbuf_top,
; 298  :                         buf->inbuf_end - buf->inbuf_top,
; 299  :                         start, end, reason);

  00193	4d 8b 40 10	 mov	 r8, QWORD PTR [r8+16]
  00197	49 8b 4d 00	 mov	 rcx, QWORD PTR [r13]
  0019b	4c 8b ca	 mov	 r9, rdx
  0019e	4c 2b c0	 sub	 r8, rax
  001a1	48 8b d0	 mov	 rdx, rax
  001a4	4c 89 64 24 28	 mov	 QWORD PTR [rsp+40], r12
  001a9	49 d1 f8	 sar	 r8, 1
  001ac	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  001b1	e8 00 00 00 00	 call	 PyUnicodeEncodeError_Create
  001b6	48 89 43 28	 mov	 QWORD PTR [rbx+40], rax

; 300  :         if (buf->excobj == NULL)

  001ba	48 85 c0	 test	 rax, rax
  001bd	0f 84 70 02 00
	00		 je	 $LN3@multibytec

; 301  :             goto errorexit;
; 302  :     }
; 303  :     else

  001c3	eb 35		 jmp	 SHORT $LN24@multibytec
$LN27@multibytec:

; 304  :         if (PyUnicodeEncodeError_SetStart(buf->excobj, start) != 0 ||
; 305  :             PyUnicodeEncodeError_SetEnd(buf->excobj, end) != 0 ||
; 306  :             PyUnicodeEncodeError_SetReason(buf->excobj, reason) != 0)

  001c5	e8 00 00 00 00	 call	 PyUnicodeEncodeError_SetStart
  001ca	85 c0		 test	 eax, eax
  001cc	0f 85 61 02 00
	00		 jne	 $LN3@multibytec
  001d2	48 8b 4b 28	 mov	 rcx, QWORD PTR [rbx+40]
  001d6	48 8b d7	 mov	 rdx, rdi
  001d9	e8 00 00 00 00	 call	 PyUnicodeEncodeError_SetEnd
  001de	85 c0		 test	 eax, eax
  001e0	0f 85 4d 02 00
	00		 jne	 $LN3@multibytec
  001e6	48 8b 4b 28	 mov	 rcx, QWORD PTR [rbx+40]
  001ea	49 8b d4	 mov	 rdx, r12
  001ed	e8 00 00 00 00	 call	 PyUnicodeEncodeError_SetReason
  001f2	85 c0		 test	 eax, eax
  001f4	0f 85 39 02 00
	00		 jne	 $LN3@multibytec
$LN24@multibytec:

; 307  :             goto errorexit;
; 308  : 
; 309  :     if (errors == ERROR_STRICT) {

  001fa	48 83 fe 01	 cmp	 rsi, 1
  001fe	75 0e		 jne	 SHORT $LN22@multibytec

; 310  :         PyCodec_StrictErrors(buf->excobj);

  00200	48 8b 4b 28	 mov	 rcx, QWORD PTR [rbx+40]
  00204	e8 00 00 00 00	 call	 PyCodec_StrictErrors

; 311  :         goto errorexit;

  00209	e9 25 02 00 00	 jmp	 $LN3@multibytec
$LN22@multibytec:

; 312  :     }
; 313  : 
; 314  :     retobj = call_error_callback(errors, buf->excobj);

  0020e	48 8b 53 28	 mov	 rdx, QWORD PTR [rbx+40]
  00212	48 8b ce	 mov	 rcx, rsi
  00215	e8 00 00 00 00	 call	 call_error_callback
  0021a	48 8b f0	 mov	 rsi, rax

; 315  :     if (retobj == NULL)

  0021d	48 85 c0	 test	 rax, rax
  00220	0f 84 0d 02 00
	00		 je	 $LN3@multibytec

; 316  :         goto errorexit;
; 317  : 
; 318  :     if (!PyTuple_Check(retobj) || PyTuple_GET_SIZE(retobj) != 2 ||
; 319  :         (!PyUnicode_Check((tobj = PyTuple_GET_ITEM(retobj, 0))) && !PyBytes_Check(tobj)) ||
; 320  :         !PyLong_Check(PyTuple_GET_ITEM(retobj, 1))) {

  00226	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0022a	f7 80 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rax+256], 67108864 ; 04000000H
  00234	0f 84 bc 01 00
	00		 je	 $LN19@multibytec
  0023a	48 83 7e 60 02	 cmp	 QWORD PTR [rsi+96], 2
  0023f	0f 85 b1 01 00
	00		 jne	 $LN19@multibytec
  00245	48 8b 7e 70	 mov	 rdi, QWORD PTR [rsi+112]
  00249	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  0024d	8b 88 00 01 00
	00		 mov	 ecx, DWORD PTR [rax+256]
  00253	8b d1		 mov	 edx, ecx
  00255	81 e2 00 00 00
	10		 and	 edx, 268435456		; 10000000H
  0025b	75 0a		 jne	 SHORT $LN18@multibytec
  0025d	0f ba e1 1b	 bt	 ecx, 27
  00261	0f 83 8f 01 00
	00		 jae	 $LN19@multibytec
$LN18@multibytec:
  00267	48 8b 46 78	 mov	 rax, QWORD PTR [rsi+120]
  0026b	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0026f	f7 81 00 01 00
	00 00 00 00 01	 test	 DWORD PTR [rcx+256], 16777216 ; 01000000H
  00279	0f 84 77 01 00
	00		 je	 $LN19@multibytec

; 324  :         goto errorexit;
; 325  :     }
; 326  : 
; 327  :     if (PyUnicode_Check(tobj)) {

  0027f	85 d2		 test	 edx, edx
  00281	0f 84 81 00 00
	00		 je	 $LN17@multibytec

; 328  :         const Py_UNICODE *uraw = PyUnicode_AS_UNICODE(tobj);

  00287	48 8b 47 78	 mov	 rax, QWORD PTR [rdi+120]
  0028b	48 85 c0	 test	 rax, rax
  0028e	75 08		 jne	 SHORT $LN70@multibytec
  00290	48 8b cf	 mov	 rcx, rdi
  00293	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
$LN70@multibytec:
  00298	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR uraw$20691[rsp], rax

; 329  : 
; 330  :         retstr = multibytecodec_encode(codec, state, &uraw,
; 331  :                         PyUnicode_GET_SIZE(tobj), ERROR_STRICT,
; 332  :                         MBENC_FLUSH);

  002a0	48 39 6f 78	 cmp	 QWORD PTR [rdi+120], rbp
  002a4	74 0b		 je	 SHORT $LN59@multibytec
  002a6	8b 47 70	 mov	 eax, DWORD PTR [rdi+112]
  002a9	a8 40		 test	 al, 64			; 00000040H
  002ab	74 22		 je	 SHORT $LN57@multibytec
  002ad	a8 20		 test	 al, 32			; 00000020H
  002af	eb 16		 jmp	 SHORT $LN72@multibytec
$LN59@multibytec:
  002b1	48 8b cf	 mov	 rcx, rdi
  002b4	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  002b9	44 8b 5f 70	 mov	 r11d, DWORD PTR [rdi+112]
  002bd	41 f6 c3 40	 test	 r11b, 64		; 00000040H
  002c1	74 0c		 je	 SHORT $LN57@multibytec
  002c3	41 f6 c3 20	 test	 r11b, 32		; 00000020H
$LN72@multibytec:
  002c7	74 06		 je	 SHORT $LN57@multibytec
  002c9	4c 8b 4f 60	 mov	 r9, QWORD PTR [rdi+96]
  002cd	eb 07		 jmp	 SHORT $LN58@multibytec
$LN57@multibytec:
  002cf	4c 8b 8f 90 00
	00 00		 mov	 r9, QWORD PTR [rdi+144]
$LN58@multibytec:
  002d6	4c 8d 84 24 90
	00 00 00	 lea	 r8, QWORD PTR uraw$20691[rsp]
  002de	49 8b d6	 mov	 rdx, r14
  002e1	49 8b cd	 mov	 rcx, r13
  002e4	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR [rsp+40], 1
  002ec	48 c7 44 24 20
	01 00 00 00	 mov	 QWORD PTR [rsp+32], 1
  002f5	e8 00 00 00 00	 call	 multibytecodec_encode
  002fa	48 8b e8	 mov	 rbp, rax

; 333  :         if (retstr == NULL)

  002fd	48 85 c0	 test	 rax, rax
  00300	0f 84 03 01 00
	00		 je	 $errorexit$20636

; 334  :             goto errorexit;
; 335  :     }
; 336  :     else {

  00306	eb 3e		 jmp	 SHORT $LN15@multibytec
$LN17@multibytec:

; 337  :         Py_INCREF(tobj);

  00308	e8 00 00 00 00	 call	 _Py_PXCTX
  0030d	85 c0		 test	 eax, eax
  0030f	75 32		 jne	 SHORT $LN62@multibytec
  00311	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00318	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0031f	4c 8b cf	 mov	 r9, rdi
  00322	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00328	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00330	e8 00 00 00 00	 call	 _PyParallel_Guard
  00335	85 c0		 test	 eax, eax
  00337	75 06		 jne	 SHORT $LN61@multibytec
  00339	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  0033d	74 04		 je	 SHORT $LN62@multibytec
$LN61@multibytec:
  0033f	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN62@multibytec:

; 338  :         retstr = tobj;

  00343	48 8b ef	 mov	 rbp, rdi
$LN15@multibytec:

; 339  :     }
; 340  : 
; 341  :     assert(PyBytes_Check(retstr));
; 342  :     retstrsize = PyBytes_GET_SIZE(retstr);

  00346	48 8b 7d 60	 mov	 rdi, QWORD PTR [rbp+96]

; 343  :     REQUIRE_ENCODEBUFFER(buf, retstrsize);

  0034a	48 83 ff 01	 cmp	 rdi, 1
  0034e	7c 0e		 jl	 SHORT $LN13@multibytec
  00350	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00354	48 8d 0c 07	 lea	 rcx, QWORD PTR [rdi+rax]
  00358	48 3b 4b 20	 cmp	 rcx, QWORD PTR [rbx+32]
  0035c	76 14		 jbe	 SHORT $LN12@multibytec
$LN13@multibytec:
  0035e	48 8b d7	 mov	 rdx, rdi
  00361	48 8b cb	 mov	 rcx, rbx
  00364	e8 00 00 00 00	 call	 expand_encodebuffer
  00369	83 f8 ff	 cmp	 eax, -1
  0036c	0f 84 97 00 00
	00		 je	 $errorexit$20636
$LN12@multibytec:

; 344  : 
; 345  :     memcpy(buf->outbuf, PyBytes_AS_STRING(retstr), retstrsize);

  00372	48 8b 4b 18	 mov	 rcx, QWORD PTR [rbx+24]
  00376	48 8d 55 78	 lea	 rdx, QWORD PTR [rbp+120]
  0037a	4c 8b c7	 mov	 r8, rdi
  0037d	e8 00 00 00 00	 call	 memcpy

; 346  :     buf->outbuf += retstrsize;

  00382	48 01 7b 18	 add	 QWORD PTR [rbx+24], rdi

; 347  : 
; 348  :     newpos = PyLong_AsSsize_t(PyTuple_GET_ITEM(retobj, 1));

  00386	48 8b 4e 78	 mov	 rcx, QWORD PTR [rsi+120]
  0038a	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  0038f	48 8b f8	 mov	 rdi, rax

; 349  :     if (newpos < 0 && !PyErr_Occurred())

  00392	48 85 c0	 test	 rax, rax
  00395	79 1d		 jns	 SHORT $LN67@multibytec
  00397	e8 00 00 00 00	 call	 PyErr_Occurred
  0039c	48 85 c0	 test	 rax, rax
  0039f	75 0e		 jne	 SHORT $LN11@multibytec

; 350  :         newpos += (Py_ssize_t)(buf->inbuf_end - buf->inbuf_top);

  003a1	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  003a5	48 2b 4b 08	 sub	 rcx, QWORD PTR [rbx+8]
  003a9	48 d1 f9	 sar	 rcx, 1
  003ac	48 03 f9	 add	 rdi, rcx
$LN11@multibytec:

; 351  :     if (newpos < 0 || buf->inbuf_top + newpos > buf->inbuf_end) {

  003af	48 85 ff	 test	 rdi, rdi
  003b2	78 25		 js	 SHORT $LN9@multibytec
$LN67@multibytec:
  003b4	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  003b8	48 8d 0c 78	 lea	 rcx, QWORD PTR [rax+rdi*2]
  003bc	48 3b 4b 10	 cmp	 rcx, QWORD PTR [rbx+16]
  003c0	77 17		 ja	 SHORT $LN9@multibytec

; 357  :     }
; 358  :     buf->inbuf = buf->inbuf_top + newpos;

  003c2	48 89 0b	 mov	 QWORD PTR [rbx], rcx

; 359  : 
; 360  :     Py_DECREF(retobj);

  003c5	48 8b ce	 mov	 rcx, rsi
  003c8	e8 00 00 00 00	 call	 _Py_DecRef

; 361  :     Py_DECREF(retstr);

  003cd	48 8b cd	 mov	 rcx, rbp
  003d0	e8 00 00 00 00	 call	 _Py_DecRef

; 362  :     return 0;

  003d5	33 c0		 xor	 eax, eax
  003d7	eb 5d		 jmp	 SHORT $LN51@multibytec
$LN9@multibytec:

; 352  :         PyErr_Clear();

  003d9	e8 00 00 00 00	 call	 PyErr_Clear

; 353  :         PyErr_Format(PyExc_IndexError,
; 354  :                      "position %zd from error handler out of bounds",
; 355  :                      newpos);

  003de	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
  003e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@NELAFELL@position?5?$CFzd?5from?5error?5handler?5@
  003ec	4c 8b c7	 mov	 r8, rdi
  003ef	e8 00 00 00 00	 call	 PyErr_Format

; 356  :         goto errorexit;

  003f4	eb 13		 jmp	 SHORT $errorexit$20636
$LN19@multibytec:

; 321  :         PyErr_SetString(PyExc_TypeError,
; 322  :                         "encoding error handler must return "
; 323  :                         "(str, int) tuple");

  003f6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  003fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@PKHNAIAA@encoding?5error?5handler?5must?5retu@
  00404	e8 00 00 00 00	 call	 PyErr_SetString
$errorexit$20636:

; 363  : 
; 364  : errorexit:
; 365  :     Py_XDECREF(retobj);

  00409	48 8b ce	 mov	 rcx, rsi
  0040c	e8 00 00 00 00	 call	 _Py_DecRef

; 366  :     Py_XDECREF(retstr);

  00411	48 85 ed	 test	 rbp, rbp
  00414	74 1d		 je	 SHORT $LN3@multibytec
  00416	48 8b cd	 mov	 rcx, rbp
  00419	e8 00 00 00 00	 call	 _Py_DecRef

; 367  :     return -1;

  0041e	eb 13		 jmp	 SHORT $LN3@multibytec
$LN42@multibytec:

; 251  :             break;
; 252  :         case MBERR_INTERNAL:
; 253  :             PyErr_SetString(PyExc_RuntimeError,
; 254  :                             "internal codec error");

  00420	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@DBHHINF@internal?5codec?5error?$AA@
$LN69@multibytec:
  00427	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  0042e	e8 00 00 00 00	 call	 PyErr_SetString
$LN3@multibytec:

; 255  :             return -1;

  00433	83 c8 ff	 or	 eax, -1
$LN51@multibytec:

; 368  : }

  00436	4c 8d 5c 24 50	 lea	 r11, QWORD PTR [rsp+80]
  0043b	49 8b 5b 20	 mov	 rbx, QWORD PTR [r11+32]
  0043f	49 8b 6b 28	 mov	 rbp, QWORD PTR [r11+40]
  00443	49 8b 73 30	 mov	 rsi, QWORD PTR [r11+48]
  00447	49 8b 7b 38	 mov	 rdi, QWORD PTR [r11+56]
  0044b	49 8b e3	 mov	 rsp, r11
  0044e	41 5e		 pop	 r14
  00450	41 5d		 pop	 r13
  00452	41 5c		 pop	 r12
  00454	c3		 ret	 0
multibytecodec_encerror ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DE@PBMBGFCE@decoding?5error?5handler?5must?5retu@ ; `string'
EXTRN	PyUnicodeDecodeError_SetReason:PROC
EXTRN	PyUnicodeDecodeError_SetEnd:PROC
EXTRN	PyUnicodeDecodeError_SetStart:PROC
EXTRN	PyUnicodeDecodeError_Create:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$multibytecodec_decerror DD imagerel multibytecodec_decerror
	DD	imagerel multibytecodec_decerror+779
	DD	imagerel $unwind$multibytecodec_decerror
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$multibytecodec_decerror DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
;	COMDAT ??_C@_0DE@PBMBGFCE@decoding?5error?5handler?5must?5retu@
CONST	SEGMENT
??_C@_0DE@PBMBGFCE@decoding?5error?5handler?5must?5retu@ DB 'decoding err'
	DB	'or handler must return (str, int) tuple', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT multibytecodec_decerror
_TEXT	SEGMENT
codec$ = 64
buf$ = 72
errors$ = 80
e$ = 88
multibytecodec_decerror PROC				; COMDAT

; 375  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00014	49 8b d9	 mov	 rbx, r9
  00017	49 8b f0	 mov	 rsi, r8
  0001a	48 8b fa	 mov	 rdi, rdx
  0001d	4c 8b d1	 mov	 r10, rcx

; 376  :     PyObject *retobj = NULL, *retuni = NULL;
; 377  :     Py_ssize_t retunisize, newpos;
; 378  :     const char *reason;
; 379  :     Py_ssize_t esize, start, end;
; 380  : 
; 381  :     if (e > 0) {

  00020	4d 85 c9	 test	 r9, r9
  00023	7e 09		 jle	 SHORT $LN37@multibytec@2

; 382  :         reason = "illegal multibyte sequence";

  00025	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:??_C@_0BL@MMCIDIKH@illegal?5multibyte?5sequence?$AA@

; 383  :         esize = e;
; 384  :     }
; 385  :     else {

  0002c	eb 4c		 jmp	 SHORT $LN34@multibytec@2
$LN37@multibytec@2:

; 386  :         switch (e) {

  0002e	48 83 fb fd	 cmp	 rbx, -3
  00032	0f 84 a8 02 00
	00		 je	 $LN29@multibytec@2
  00038	48 83 fb fe	 cmp	 rbx, -2
  0003c	74 2e		 je	 SHORT $LN30@multibytec@2
  0003e	48 83 fb ff	 cmp	 rbx, -1
  00042	74 0c		 je	 SHORT $LN33@multibytec@2

; 398  :         default:
; 399  :             PyErr_SetString(PyExc_RuntimeError,
; 400  :                             "unknown runtime error");

  00044	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@NBDJHAFE@unknown?5runtime?5error?$AA@

; 401  :             return -1;

  0004b	e9 97 02 00 00	 jmp	 $LN50@multibytec@2
$LN33@multibytec@2:

; 387  :         case MBERR_TOOSMALL:
; 388  :             REQUIRE_DECODEBUFFER(buf, -1);

  00050	48 83 ca ff	 or	 rdx, -1
  00054	48 8b cf	 mov	 rcx, rdi
  00057	e8 00 00 00 00	 call	 expand_decodebuffer
  0005c	83 f8 ff	 cmp	 eax, -1
  0005f	0f 84 8e 02 00
	00		 je	 $LN3@multibytec@2

; 389  :             return 0; /* retry it */

  00065	33 c0		 xor	 eax, eax
  00067	e9 8a 02 00 00	 jmp	 $LN38@multibytec@2
$LN30@multibytec@2:

; 390  :         case MBERR_TOOFEW:
; 391  :             reason = "incomplete multibyte sequence";
; 392  :             esize = (Py_ssize_t)(buf->inbuf_end - buf->inbuf);

  0006c	48 8b 5a 10	 mov	 rbx, QWORD PTR [rdx+16]
  00070	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:??_C@_0BO@NPKGELOO@incomplete?5multibyte?5sequence?$AA@
  00077	48 2b 1a	 sub	 rbx, QWORD PTR [rdx]
$LN34@multibytec@2:

; 402  :         }
; 403  :     }
; 404  : 
; 405  :     if (errors == ERROR_REPLACE) {

  0007a	49 83 f8 03	 cmp	 r8, 3
  0007e	75 3e		 jne	 SHORT $LN27@multibytec@2

; 406  :         REQUIRE_DECODEBUFFER(buf, 1);

  00080	48 8b 42 18	 mov	 rax, QWORD PTR [rdx+24]
  00084	48 83 c0 02	 add	 rax, 2
  00088	48 3b 42 20	 cmp	 rax, QWORD PTR [rdx+32]
  0008c	76 15		 jbe	 SHORT $LN24@multibytec@2
  0008e	41 8d 50 fe	 lea	 edx, QWORD PTR [r8-2]
  00092	48 8b cf	 mov	 rcx, rdi
  00095	e8 00 00 00 00	 call	 expand_decodebuffer
  0009a	83 f8 ff	 cmp	 eax, -1
  0009d	0f 84 50 02 00
	00		 je	 $LN3@multibytec@2
$LN24@multibytec@2:

; 407  :         *buf->outbuf++ = Py_UNICODE_REPLACEMENT_CHARACTER;

  000a3	48 8b 47 18	 mov	 rax, QWORD PTR [rdi+24]
  000a7	b9 fd ff 00 00	 mov	 ecx, 65533		; 0000fffdH
  000ac	66 89 08	 mov	 WORD PTR [rax], cx
  000af	48 83 47 18 02	 add	 QWORD PTR [rdi+24], 2
$LN22@multibytec@2:

; 410  :         buf->inbuf += esize;

  000b4	48 01 1f	 add	 QWORD PTR [rdi], rbx

; 411  :         return 0;

  000b7	33 c0		 xor	 eax, eax
  000b9	e9 38 02 00 00	 jmp	 $LN38@multibytec@2
$LN27@multibytec@2:

; 408  :     }
; 409  :     if (errors == ERROR_IGNORE || errors == ERROR_REPLACE) {

  000be	49 83 f8 02	 cmp	 r8, 2
  000c2	74 f0		 je	 SHORT $LN22@multibytec@2

; 412  :     }
; 413  : 
; 414  :     start = (Py_ssize_t)(buf->inbuf - buf->inbuf_top);

  000c4	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  000c8	48 8b 12	 mov	 rdx, QWORD PTR [rdx]

; 415  :     end = start + esize;
; 416  : 
; 417  :     /* use cached exception object if available */
; 418  :     if (buf->excobj == NULL) {

  000cb	48 8b 4f 28	 mov	 rcx, QWORD PTR [rdi+40]
  000cf	48 2b d0	 sub	 rdx, rax
  000d2	48 03 da	 add	 rbx, rdx
  000d5	48 85 c9	 test	 rcx, rcx
  000d8	75 2e		 jne	 SHORT $LN21@multibytec@2

; 419  :         buf->excobj = PyUnicodeDecodeError_Create(codec->encoding,
; 420  :                         (const char *)buf->inbuf_top,
; 421  :                         (Py_ssize_t)(buf->inbuf_end - buf->inbuf_top),
; 422  :                         start, end, reason);

  000da	4c 8b 47 10	 mov	 r8, QWORD PTR [rdi+16]
  000de	49 8b 0a	 mov	 rcx, QWORD PTR [r10]
  000e1	4c 8b ca	 mov	 r9, rdx
  000e4	48 8b d0	 mov	 rdx, rax
  000e7	4c 2b c0	 sub	 r8, rax
  000ea	48 89 6c 24 28	 mov	 QWORD PTR [rsp+40], rbp
  000ef	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  000f4	e8 00 00 00 00	 call	 PyUnicodeDecodeError_Create
  000f9	48 89 47 28	 mov	 QWORD PTR [rdi+40], rax

; 423  :         if (buf->excobj == NULL)

  000fd	48 85 c0	 test	 rax, rax
  00100	0f 84 ed 01 00
	00		 je	 $LN3@multibytec@2

; 424  :             goto errorexit;
; 425  :     }
; 426  :     else

  00106	eb 35		 jmp	 SHORT $LN18@multibytec@2
$LN21@multibytec@2:

; 427  :         if (PyUnicodeDecodeError_SetStart(buf->excobj, start) ||
; 428  :             PyUnicodeDecodeError_SetEnd(buf->excobj, end) ||
; 429  :             PyUnicodeDecodeError_SetReason(buf->excobj, reason))

  00108	e8 00 00 00 00	 call	 PyUnicodeDecodeError_SetStart
  0010d	85 c0		 test	 eax, eax
  0010f	0f 85 de 01 00
	00		 jne	 $LN3@multibytec@2
  00115	48 8b 4f 28	 mov	 rcx, QWORD PTR [rdi+40]
  00119	48 8b d3	 mov	 rdx, rbx
  0011c	e8 00 00 00 00	 call	 PyUnicodeDecodeError_SetEnd
  00121	85 c0		 test	 eax, eax
  00123	0f 85 ca 01 00
	00		 jne	 $LN3@multibytec@2
  00129	48 8b 4f 28	 mov	 rcx, QWORD PTR [rdi+40]
  0012d	48 8b d5	 mov	 rdx, rbp
  00130	e8 00 00 00 00	 call	 PyUnicodeDecodeError_SetReason
  00135	85 c0		 test	 eax, eax
  00137	0f 85 b6 01 00
	00		 jne	 $LN3@multibytec@2
$LN18@multibytec@2:

; 430  :             goto errorexit;
; 431  : 
; 432  :     if (errors == ERROR_STRICT) {

  0013d	48 83 fe 01	 cmp	 rsi, 1
  00141	75 0e		 jne	 SHORT $LN16@multibytec@2

; 433  :         PyCodec_StrictErrors(buf->excobj);

  00143	48 8b 4f 28	 mov	 rcx, QWORD PTR [rdi+40]
  00147	e8 00 00 00 00	 call	 PyCodec_StrictErrors

; 434  :         goto errorexit;

  0014c	e9 a2 01 00 00	 jmp	 $LN3@multibytec@2
$LN16@multibytec@2:

; 435  :     }
; 436  : 
; 437  :     retobj = call_error_callback(errors, buf->excobj);

  00151	48 8b 57 28	 mov	 rdx, QWORD PTR [rdi+40]
  00155	48 8b ce	 mov	 rcx, rsi
  00158	e8 00 00 00 00	 call	 call_error_callback
  0015d	48 8b f0	 mov	 rsi, rax

; 438  :     if (retobj == NULL)

  00160	48 85 c0	 test	 rax, rax
  00163	0f 84 8a 01 00
	00		 je	 $LN3@multibytec@2

; 439  :         goto errorexit;
; 440  : 
; 441  :     if (!PyTuple_Check(retobj) || PyTuple_GET_SIZE(retobj) != 2 ||
; 442  :         !PyUnicode_Check((retuni = PyTuple_GET_ITEM(retobj, 0))) ||
; 443  :         !PyLong_Check(PyTuple_GET_ITEM(retobj, 1))) {

  00169	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0016d	f7 81 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rcx+256], 67108864 ; 04000000H
  00177	0f 84 46 01 00
	00		 je	 $LN13@multibytec@2
  0017d	48 83 78 60 02	 cmp	 QWORD PTR [rax+96], 2
  00182	0f 85 3b 01 00
	00		 jne	 $LN13@multibytec@2
  00188	48 8b 58 70	 mov	 rbx, QWORD PTR [rax+112]
  0018c	48 8b 4b 58	 mov	 rcx, QWORD PTR [rbx+88]
  00190	f7 81 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rcx+256], 268435456 ; 10000000H
  0019a	0f 84 23 01 00
	00		 je	 $LN13@multibytec@2
  001a0	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  001a4	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  001a8	f7 81 00 01 00
	00 00 00 00 01	 test	 DWORD PTR [rcx+256], 16777216 ; 01000000H
  001b2	0f 84 0b 01 00
	00		 je	 $LN13@multibytec@2

; 447  :         goto errorexit;
; 448  :     }
; 449  : 
; 450  :     if (PyUnicode_AsUnicode(retuni) == NULL)

  001b8	48 8b cb	 mov	 rcx, rbx
  001bb	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  001c0	48 85 c0	 test	 rax, rax
  001c3	0f 84 0d 01 00
	00		 je	 $errorexit$20771

; 451  :         goto errorexit;
; 452  :     retunisize = PyUnicode_GET_SIZE(retuni);

  001c9	48 83 7b 78 00	 cmp	 QWORD PTR [rbx+120], 0
  001ce	74 0b		 je	 SHORT $LN44@multibytec@2
  001d0	8b 43 70	 mov	 eax, DWORD PTR [rbx+112]
  001d3	a8 40		 test	 al, 64			; 00000040H
  001d5	74 22		 je	 SHORT $LN42@multibytec@2
  001d7	a8 20		 test	 al, 32			; 00000020H
  001d9	eb 16		 jmp	 SHORT $LN52@multibytec@2
$LN44@multibytec@2:
  001db	48 8b cb	 mov	 rcx, rbx
  001de	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  001e3	44 8b 5b 70	 mov	 r11d, DWORD PTR [rbx+112]
  001e7	41 f6 c3 40	 test	 r11b, 64		; 00000040H
  001eb	74 0c		 je	 SHORT $LN42@multibytec@2
  001ed	41 f6 c3 20	 test	 r11b, 32		; 00000020H
$LN52@multibytec@2:
  001f1	74 06		 je	 SHORT $LN42@multibytec@2
  001f3	48 8b 6b 60	 mov	 rbp, QWORD PTR [rbx+96]
  001f7	eb 07		 jmp	 SHORT $LN43@multibytec@2
$LN42@multibytec@2:
  001f9	48 8b ab 90 00
	00 00		 mov	 rbp, QWORD PTR [rbx+144]
$LN43@multibytec@2:

; 453  :     if (retunisize > 0) {

  00200	48 85 ed	 test	 rbp, rbp
  00203	7e 51		 jle	 SHORT $LN11@multibytec@2

; 454  :         REQUIRE_DECODEBUFFER(buf, retunisize);

  00205	48 83 fd 01	 cmp	 rbp, 1
  00209	7c 0e		 jl	 SHORT $LN9@multibytec@2
  0020b	48 8b 47 18	 mov	 rax, QWORD PTR [rdi+24]
  0020f	48 8d 0c 68	 lea	 rcx, QWORD PTR [rax+rbp*2]
  00213	48 3b 4f 20	 cmp	 rcx, QWORD PTR [rdi+32]
  00217	76 14		 jbe	 SHORT $LN8@multibytec@2
$LN9@multibytec@2:
  00219	48 8b d5	 mov	 rdx, rbp
  0021c	48 8b cf	 mov	 rcx, rdi
  0021f	e8 00 00 00 00	 call	 expand_decodebuffer
  00224	83 f8 ff	 cmp	 eax, -1
  00227	0f 84 a9 00 00
	00		 je	 $errorexit$20771
$LN8@multibytec@2:

; 455  :         memcpy((char *)buf->outbuf, PyUnicode_AS_UNICODE(retuni),
; 456  :                         retunisize * Py_UNICODE_SIZE);

  0022d	48 8b 43 78	 mov	 rax, QWORD PTR [rbx+120]
  00231	48 85 c0	 test	 rax, rax
  00234	75 08		 jne	 SHORT $LN47@multibytec@2
  00236	48 8b cb	 mov	 rcx, rbx
  00239	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
$LN47@multibytec@2:
  0023e	48 8b 4f 18	 mov	 rcx, QWORD PTR [rdi+24]
  00242	48 8d 5c 2d 00	 lea	 rbx, QWORD PTR [rbp+rbp]
  00247	48 8b d0	 mov	 rdx, rax
  0024a	4c 8b c3	 mov	 r8, rbx
  0024d	e8 00 00 00 00	 call	 memcpy

; 457  :         buf->outbuf += retunisize;

  00252	48 01 5f 18	 add	 QWORD PTR [rdi+24], rbx
$LN11@multibytec@2:

; 458  :     }
; 459  : 
; 460  :     newpos = PyLong_AsSsize_t(PyTuple_GET_ITEM(retobj, 1));

  00256	48 8b 4e 78	 mov	 rcx, QWORD PTR [rsi+120]
  0025a	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  0025f	48 8b d8	 mov	 rbx, rax

; 461  :     if (newpos < 0 && !PyErr_Occurred())

  00262	48 85 c0	 test	 rax, rax
  00265	79 1a		 jns	 SHORT $LN48@multibytec@2
  00267	e8 00 00 00 00	 call	 PyErr_Occurred
  0026c	48 85 c0	 test	 rax, rax
  0026f	75 0b		 jne	 SHORT $LN7@multibytec@2

; 462  :         newpos += (Py_ssize_t)(buf->inbuf_end - buf->inbuf_top);

  00271	48 8b 4f 10	 mov	 rcx, QWORD PTR [rdi+16]
  00275	48 2b 4f 08	 sub	 rcx, QWORD PTR [rdi+8]
  00279	48 03 d9	 add	 rbx, rcx
$LN7@multibytec@2:

; 463  :     if (newpos < 0 || buf->inbuf_top + newpos > buf->inbuf_end) {

  0027c	48 85 db	 test	 rbx, rbx
  0027f	78 1d		 js	 SHORT $LN5@multibytec@2
$LN48@multibytec@2:
  00281	48 8b 47 08	 mov	 rax, QWORD PTR [rdi+8]
  00285	48 8d 0c 03	 lea	 rcx, QWORD PTR [rbx+rax]
  00289	48 3b 4f 10	 cmp	 rcx, QWORD PTR [rdi+16]
  0028d	77 0f		 ja	 SHORT $LN5@multibytec@2

; 468  :         goto errorexit;
; 469  :     }
; 470  :     buf->inbuf = buf->inbuf_top + newpos;

  0028f	48 89 0f	 mov	 QWORD PTR [rdi], rcx

; 471  :     Py_DECREF(retobj);

  00292	48 8b ce	 mov	 rcx, rsi
  00295	e8 00 00 00 00	 call	 _Py_DecRef

; 472  :     return 0;

  0029a	33 c0		 xor	 eax, eax
  0029c	eb 58		 jmp	 SHORT $LN38@multibytec@2
$LN5@multibytec@2:

; 464  :         PyErr_Clear();

  0029e	e8 00 00 00 00	 call	 PyErr_Clear

; 465  :         PyErr_Format(PyExc_IndexError,
; 466  :                      "position %zd from error handler out of bounds",
; 467  :                      newpos);

  002a3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
  002aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@NELAFELL@position?5?$CFzd?5from?5error?5handler?5@
  002b1	4c 8b c3	 mov	 r8, rbx
  002b4	e8 00 00 00 00	 call	 PyErr_Format

; 473  : 
; 474  : errorexit:
; 475  :     Py_XDECREF(retobj);

  002b9	48 8b ce	 mov	 rcx, rsi
  002bc	e8 00 00 00 00	 call	 _Py_DecRef

; 476  :     return -1;

  002c1	eb 30		 jmp	 SHORT $LN3@multibytec@2
$LN13@multibytec@2:

; 444  :         PyErr_SetString(PyExc_TypeError,
; 445  :                         "decoding error handler must return "
; 446  :                         "(str, int) tuple");

  002c3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  002ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@PBMBGFCE@decoding?5error?5handler?5must?5retu@
  002d1	e8 00 00 00 00	 call	 PyErr_SetString
$errorexit$20771:

; 473  : 
; 474  : errorexit:
; 475  :     Py_XDECREF(retobj);

  002d6	48 8b ce	 mov	 rcx, rsi
  002d9	e8 00 00 00 00	 call	 _Py_DecRef

; 476  :     return -1;

  002de	eb 13		 jmp	 SHORT $LN3@multibytec@2
$LN29@multibytec@2:

; 393  :             break;
; 394  :         case MBERR_INTERNAL:
; 395  :             PyErr_SetString(PyExc_RuntimeError,
; 396  :                             "internal codec error");

  002e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@DBHHINF@internal?5codec?5error?$AA@
$LN50@multibytec@2:
  002e7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  002ee	e8 00 00 00 00	 call	 PyErr_SetString
$LN3@multibytec@2:

; 397  :             return -1;

  002f3	83 c8 ff	 or	 eax, -1
$LN38@multibytec@2:

; 477  : }

  002f6	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  002fb	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00300	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00305	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00309	5f		 pop	 rdi
  0030a	c3		 ret	 0
multibytecodec_decerror ENDP
_TEXT	ENDS
EXTRN	PyErr_NoMemory:PROC
EXTRN	PyBytes_FromStringAndSize:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$multibytecodec_encode DD imagerel multibytecodec_encode
	DD	imagerel multibytecodec_encode+65
	DD	imagerel $unwind$multibytecodec_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$multibytecodec_encode DD imagerel multibytecodec_encode+65
	DD	imagerel multibytecodec_encode+775
	DD	imagerel $chain$1$multibytecodec_encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$multibytecodec_encode DD imagerel multibytecodec_encode+775
	DD	imagerel multibytecodec_encode+800
	DD	imagerel $chain$2$multibytecodec_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$multibytecodec_encode DD 021H
	DD	imagerel multibytecodec_encode
	DD	imagerel multibytecodec_encode+65
	DD	imagerel $unwind$multibytecodec_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$multibytecodec_encode DD 041021H
	DD	015d410H
	DD	0143408H
	DD	imagerel multibytecodec_encode
	DD	imagerel multibytecodec_encode+65
	DD	imagerel $unwind$multibytecodec_encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$multibytecodec_encode DD 081901H
	DD	0177419H
	DD	0166419H
	DD	0e00ff219H
	DD	0500bc00dH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\cjkcodecs\multibytecodec.c
xdata	ENDS
;	COMDAT multibytecodec_encode
_TEXT	SEGMENT
buf$ = 64
codec$ = 160
state$ = 168
data$ = 176
datalen$ = 184
errors$ = 192
flags$ = 200
multibytecodec_encode PROC				; COMDAT

; 484  : {

  00000	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  00005	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0000a	55		 push	 rbp
  0000b	41 54		 push	 r12
  0000d	41 56		 push	 r14
  0000f	48 8b ec	 mov	 rbp, rsp
  00012	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H

; 485  :     MultibyteEncodeBuffer buf;
; 486  :     Py_ssize_t finalsize, r = 0;
; 487  : 
; 488  :     if (datalen == 0 && !(flags & MBENC_RESET))

  00019	44 8b 65 48	 mov	 r12d, DWORD PTR flags$[rbp-128]
  0001d	4d 8b f0	 mov	 r14, r8
  00020	48 8b f2	 mov	 rsi, rdx
  00023	48 8b f9	 mov	 rdi, rcx
  00026	4d 85 c9	 test	 r9, r9
  00029	75 14		 jne	 SHORT $LN31@multibytec@3
  0002b	41 f6 c4 02	 test	 r12b, 2
  0002f	75 0e		 jne	 SHORT $LN31@multibytec@3

; 489  :         return PyBytes_FromStringAndSize(NULL, 0);

  00031	33 d2		 xor	 edx, edx
  00033	33 c9		 xor	 ecx, ecx
  00035	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  0003a	e9 c8 02 00 00	 jmp	 $LN32@multibytec@3
$LN31@multibytec@3:

; 490  : 
; 491  :     buf.excobj = NULL;

  0003f	33 c0		 xor	 eax, eax
  00041	48 89 9c 24 a0
	00 00 00	 mov	 QWORD PTR [rsp+160], rbx
  00049	4c 89 ac 24 a8
	00 00 00	 mov	 QWORD PTR [rsp+168], r13
  00051	48 89 45 e8	 mov	 QWORD PTR buf$[rbp-88], rax

; 492  :     buf.outobj = NULL;

  00055	48 89 45 f0	 mov	 QWORD PTR buf$[rbp-80], rax

; 493  :     buf.inbuf = buf.inbuf_top = *data;

  00059	49 8b 00	 mov	 rax, QWORD PTR [r8]
  0005c	48 89 45 c8	 mov	 QWORD PTR buf$[rbp-120], rax
  00060	48 89 45 c0	 mov	 QWORD PTR buf$[rbp-128], rax

; 494  :     buf.inbuf_end = buf.inbuf_top + datalen;

  00064	4a 8d 04 48	 lea	 rax, QWORD PTR [rax+r9*2]
  00068	48 89 45 d0	 mov	 QWORD PTR buf$[rbp-112], rax

; 495  : 
; 496  :     if (datalen > (PY_SSIZE_T_MAX - 16) / 2) {

  0006c	48 b8 f7 ff ff
	ff ff ff ff 3f	 mov	 rax, 4611686018427387895 ; 3ffffffffffffff7H
  00076	4c 3b c8	 cmp	 r9, rax
  00079	7e 7e		 jle	 SHORT $LN30@multibytec@3

; 497  :         PyErr_NoMemory();

  0007b	e8 00 00 00 00	 call	 PyErr_NoMemory
$errorexit$20867:

; 548  : 
; 549  : errorexit:
; 550  :     Py_XDECREF(buf.excobj);

  00080	48 8b 5d e8	 mov	 rbx, QWORD PTR buf$[rbp-88]
  00084	48 85 db	 test	 rbx, rbx
  00087	0f 84 fa 01 00
	00		 je	 $LN7@multibytec@3
  0008d	e8 00 00 00 00	 call	 _Py_PXCTX
  00092	85 c0		 test	 eax, eax
  00094	0f 85 ed 01 00
	00		 jne	 $LN7@multibytec@3
  0009a	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0009e	a8 20		 test	 al, 32			; 00000020H
  000a0	0f 85 d9 01 00
	00		 jne	 $LN38@multibytec@3
  000a6	84 c0		 test	 al, al
  000a8	0f 88 d1 01 00
	00		 js	 $LN38@multibytec@3
  000ae	a8 02		 test	 al, 2
  000b0	0f 85 d1 01 00
	00		 jne	 $LN7@multibytec@3
  000b6	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000ba	0f 85 c7 01 00
	00		 jne	 $LN7@multibytec@3
  000c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000ce	4c 8b cb	 mov	 r9, rbx
  000d1	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000d7	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000df	e8 00 00 00 00	 call	 _PyParallel_Guard
  000e4	48 8b cb	 mov	 rcx, rbx
  000e7	85 c0		 test	 eax, eax
  000e9	0f 84 84 01 00
	00		 je	 $LN43@multibytec@3
  000ef	e8 00 00 00 00	 call	 _Px_Dealloc
  000f4	e9 8e 01 00 00	 jmp	 $LN7@multibytec@3
$LN30@multibytec@3:

; 498  :         goto errorexit;
; 499  :     }
; 500  : 
; 501  :     buf.outobj = PyBytes_FromStringAndSize(NULL, datalen * 2 + 16);

  000f9	4b 8d 54 09 10	 lea	 rdx, QWORD PTR [r9+r9+16]
  000fe	33 c9		 xor	 ecx, ecx
  00100	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00105	48 89 45 f0	 mov	 QWORD PTR buf$[rbp-80], rax

; 502  :     if (buf.outobj == NULL)

  00109	48 85 c0	 test	 rax, rax
  0010c	0f 84 6e ff ff
	ff		 je	 $errorexit$20867

; 503  :         goto errorexit;
; 504  :     buf.outbuf = (unsigned char *)PyBytes_AS_STRING(buf.outobj);
; 505  :     buf.outbuf_end = buf.outbuf + PyBytes_GET_SIZE(buf.outobj);
; 506  : 
; 507  :     while (buf.inbuf < buf.inbuf_end) {

  00112	4c 8b 6d 40	 mov	 r13, QWORD PTR errors$[rbp-128]
  00116	48 8d 50 78	 lea	 rdx, QWORD PTR [rax+120]
  0011a	48 89 55 d8	 mov	 QWORD PTR buf$[rbp-104], rdx
  0011e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00122	48 8d 0c 02	 lea	 rcx, QWORD PTR [rdx+rax]
  00126	48 8b 45 c0	 mov	 rax, QWORD PTR buf$[rbp-128]
  0012a	48 89 4d e0	 mov	 QWORD PTR buf$[rbp-96], rcx
  0012e	48 8b 4d d0	 mov	 rcx, QWORD PTR buf$[rbp-112]
  00132	48 3b c1	 cmp	 rax, rcx
  00135	0f 83 8a 00 00
	00		 jae	 $LN60@multibytec@3
  0013b	0f 1f 44 00 00	 npad	 5
$LL28@multibytec@3:

; 508  :         Py_ssize_t inleft, outleft;
; 509  : 
; 510  :         /* we don't reuse inleft and outleft here.
; 511  :          * error callbacks can relocate the cursor anywhere on buffer*/
; 512  :         inleft = (Py_ssize_t)(buf.inbuf_end - buf.inbuf);

  00140	48 2b c8	 sub	 rcx, rax

; 513  :         outleft = (Py_ssize_t)(buf.outbuf_end - buf.outbuf);

  00143	48 8b 45 e0	 mov	 rax, QWORD PTR buf$[rbp-96]

; 514  :         r = codec->encode(state, codec->config, &buf.inbuf, inleft,
; 515  :                           &buf.outbuf, outleft, flags);

  00147	44 89 64 24 30	 mov	 DWORD PTR [rsp+48], r12d
  0014c	48 2b c2	 sub	 rax, rdx
  0014f	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
  00153	48 d1 f9	 sar	 rcx, 1
  00156	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0015b	48 8d 45 d8	 lea	 rax, QWORD PTR buf$[rbp-104]
  0015f	4c 8b c9	 mov	 r9, rcx
  00162	4c 8d 45 c0	 lea	 r8, QWORD PTR buf$[rbp-128]
  00166	48 8b ce	 mov	 rcx, rsi
  00169	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0016e	ff 57 18	 call	 QWORD PTR [rdi+24]
  00171	48 8b d8	 mov	 rbx, rax

; 516  :         if ((r == 0) || (r == MBERR_TOOFEW && !(flags & MBENC_FLUSH)))

  00174	48 85 c0	 test	 rax, rax
  00177	74 44		 je	 SHORT $LN64@multibytec@3
  00179	48 83 f8 fe	 cmp	 rax, -2
  0017d	75 06		 jne	 SHORT $LN26@multibytec@3
  0017f	41 f6 c4 01	 test	 r12b, 1
  00183	74 38		 je	 SHORT $LN64@multibytec@3
$LN26@multibytec@3:

; 517  :             break;
; 518  :         else if (multibytecodec_encerror(codec, state, &buf, errors,r))

  00185	4c 8d 45 c0	 lea	 r8, QWORD PTR buf$[rbp-128]
  00189	4d 8b cd	 mov	 r9, r13
  0018c	48 8b d6	 mov	 rdx, rsi
  0018f	48 8b cf	 mov	 rcx, rdi
  00192	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00197	e8 00 00 00 00	 call	 multibytecodec_encerror
  0019c	85 c0		 test	 eax, eax
  0019e	0f 85 dc fe ff
	ff		 jne	 $errorexit$20867

; 519  :             goto errorexit;
; 520  :         else if (r == MBERR_TOOFEW)

  001a4	48 83 fb fe	 cmp	 rbx, -2
  001a8	74 13		 je	 SHORT $LN64@multibytec@3

; 503  :         goto errorexit;
; 504  :     buf.outbuf = (unsigned char *)PyBytes_AS_STRING(buf.outobj);
; 505  :     buf.outbuf_end = buf.outbuf + PyBytes_GET_SIZE(buf.outobj);
; 506  : 
; 507  :     while (buf.inbuf < buf.inbuf_end) {

  001aa	48 8b 45 c0	 mov	 rax, QWORD PTR buf$[rbp-128]
  001ae	48 8b 4d d0	 mov	 rcx, QWORD PTR buf$[rbp-112]
  001b2	48 8b 55 d8	 mov	 rdx, QWORD PTR buf$[rbp-104]
  001b6	48 3b c1	 cmp	 rax, rcx
  001b9	72 85		 jb	 SHORT $LL28@multibytec@3
  001bb	eb 08		 jmp	 SHORT $LN60@multibytec@3
$LN64@multibytec@3:
  001bd	48 8b 55 d8	 mov	 rdx, QWORD PTR buf$[rbp-104]
  001c1	48 8b 45 c0	 mov	 rax, QWORD PTR buf$[rbp-128]
$LN60@multibytec@3:

; 521  :             break;
; 522  :     }
; 523  : 
; 524  :     if (codec->encreset != NULL && (flags & MBENC_RESET))

  001c5	4c 8b 57 28	 mov	 r10, QWORD PTR [rdi+40]
  001c9	4d 85 d2	 test	 r10, r10
  001cc	74 64		 je	 SHORT $LN18@multibytec@3
  001ce	41 f6 c4 02	 test	 r12b, 2
  001d2	74 5e		 je	 SHORT $LN18@multibytec@3

; 525  :         for (;;) {
; 526  :             Py_ssize_t outleft;
; 527  : 
; 528  :             outleft = (Py_ssize_t)(buf.outbuf_end - buf.outbuf);

  001d4	4c 8b 4d e0	 mov	 r9, QWORD PTR buf$[rbp-96]

; 529  :             r = codec->encreset(state, codec->config, &buf.outbuf,
; 530  :                                 outleft);

  001d8	4c 8d 45 d8	 lea	 r8, QWORD PTR buf$[rbp-104]
  001dc	48 8b ce	 mov	 rcx, rsi
  001df	4c 2b ca	 sub	 r9, rdx
  001e2	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
  001e6	41 ff d2	 call	 r10

; 531  :             if (r == 0)

  001e9	48 85 c0	 test	 rax, rax
  001ec	74 3c		 je	 SHORT $LN66@multibytec@3
  001ee	66 90		 npad	 2
$LL19@multibytec@3:

; 532  :                 break;
; 533  :             else if (multibytecodec_encerror(codec, state,
; 534  :                                              &buf, errors, r))

  001f0	4c 8d 45 c0	 lea	 r8, QWORD PTR buf$[rbp-128]
  001f4	4d 8b cd	 mov	 r9, r13
  001f7	48 8b d6	 mov	 rdx, rsi
  001fa	48 8b cf	 mov	 rcx, rdi
  001fd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00202	e8 00 00 00 00	 call	 multibytecodec_encerror
  00207	85 c0		 test	 eax, eax
  00209	0f 85 71 fe ff
	ff		 jne	 $errorexit$20867

; 529  :             r = codec->encreset(state, codec->config, &buf.outbuf,
; 530  :                                 outleft);

  0020f	4c 8b 4d e0	 mov	 r9, QWORD PTR buf$[rbp-96]
  00213	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
  00217	4c 8d 45 d8	 lea	 r8, QWORD PTR buf$[rbp-104]
  0021b	4c 2b 4d d8	 sub	 r9, QWORD PTR buf$[rbp-104]
  0021f	48 8b ce	 mov	 rcx, rsi
  00222	ff 57 28	 call	 QWORD PTR [rdi+40]

; 531  :             if (r == 0)

  00225	48 85 c0	 test	 rax, rax
  00228	75 c6		 jne	 SHORT $LL19@multibytec@3
$LN66@multibytec@3:
  0022a	48 8b 55 d8	 mov	 rdx, QWORD PTR buf$[rbp-104]
  0022e	48 8b 45 c0	 mov	 rax, QWORD PTR buf$[rbp-128]
$LN18@multibytec@3:

; 535  :                 goto errorexit;
; 536  :         }
; 537  : 
; 538  :     finalsize = (Py_ssize_t)((char *)buf.outbuf -
; 539  :                              PyBytes_AS_STRING(buf.outobj));

  00232	48 8b 5d f0	 mov	 rbx, QWORD PTR buf$[rbp-80]
  00236	48 2b d3	 sub	 rdx, rbx
  00239	48 83 ea 78	 sub	 rdx, 120		; 00000078H

; 540  : 
; 541  :     if (finalsize != PyBytes_GET_SIZE(buf.outobj))

  0023d	48 3b 53 60	 cmp	 rdx, QWORD PTR [rbx+96]
  00241	74 16		 je	 SHORT $LN13@multibytec@3

; 542  :         if (_PyBytes_Resize(&buf.outobj, finalsize) == -1)

  00243	48 8d 4d f0	 lea	 rcx, QWORD PTR buf$[rbp-80]
  00247	e8 00 00 00 00	 call	 _PyBytes_Resize
  0024c	83 f8 ff	 cmp	 eax, -1
  0024f	0f 84 2b fe ff
	ff		 je	 $errorexit$20867

; 552  :     return NULL;

  00255	48 8b 45 c0	 mov	 rax, QWORD PTR buf$[rbp-128]
$LN13@multibytec@3:

; 543  :             goto errorexit;
; 544  : 
; 545  :     *data = buf.inbuf;
; 546  :     Py_XDECREF(buf.excobj);

  00259	48 8b 4d e8	 mov	 rcx, QWORD PTR buf$[rbp-88]
  0025d	49 89 06	 mov	 QWORD PTR [r14], rax
  00260	48 85 c9	 test	 rcx, rcx
  00263	74 05		 je	 SHORT $LN11@multibytec@3
  00265	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@multibytec@3:

; 547  :     return buf.outobj;

  0026a	48 8b 45 f0	 mov	 rax, QWORD PTR buf$[rbp-80]
  0026e	e9 84 00 00 00	 jmp	 $LN75@multibytec@3

; 548  : 
; 549  : errorexit:
; 550  :     Py_XDECREF(buf.excobj);

$LN43@multibytec@3:
  00273	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00277	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0027d	eb 08		 jmp	 SHORT $LN7@multibytec@3
$LN38@multibytec@3:
  0027f	48 8b cb	 mov	 rcx, rbx
  00282	e8 00 00 00 00	 call	 Px_DecRef
$LN7@multibytec@3:

; 551  :     Py_XDECREF(buf.outobj);

  00287	48 8b 5d f0	 mov	 rbx, QWORD PTR buf$[rbp-80]
  0028b	48 85 db	 test	 rbx, rbx
  0028e	74 65		 je	 SHORT $LN3@multibytec@3
  00290	e8 00 00 00 00	 call	 _Py_PXCTX
  00295	85 c0		 test	 eax, eax
  00297	75 5c		 jne	 SHORT $LN3@multibytec@3
  00299	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0029d	a8 20		 test	 al, 32			; 00000020H
  0029f	75 4c		 jne	 SHORT $LN49@multibytec@3
  002a1	84 c0		 test	 al, al
  002a3	78 48		 js	 SHORT $LN49@multibytec@3
  002a5	a8 02		 test	 al, 2
  002a7	75 4c		 jne	 SHORT $LN3@multibytec@3
  002a9	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  002ad	75 46		 jne	 SHORT $LN3@multibytec@3
  002af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  002b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  002bd	4c 8b cb	 mov	 r9, rbx
  002c0	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  002c6	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002ce	e8 00 00 00 00	 call	 _PyParallel_Guard
  002d3	48 8b cb	 mov	 rcx, rbx
  002d6	85 c0		 test	 eax, eax
  002d8	74 07		 je	 SHORT $LN54@multibytec@3
  002da	e8 00 00 00 00	 call	 _Px_Dealloc
  002df	eb 14		 jmp	 SHORT $LN3@multibytec@3
$LN54@multibytec@3:
  002e1	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  002e5	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  002eb	eb 08		 jmp	 SHORT $LN3@multibytec@3
$LN49@multibytec@3:
  002ed	48 8b cb	 mov	 rcx, rbx
  002f0	e8 00 00 00 00	 call	 Px_DecRef
$LN3@multibytec@3:

; 552  :     return NULL;

  002f5	33 c0		 xor	 eax, eax
$LN75@multibytec@3:
  002f7	48 8b 9c 24 a0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+160]
  002ff	4c 8b ac 24 a8
	00 00 00	 mov	 r13, QWORD PTR [rsp+168]
$LN32@multibytec@3:

; 553  : }

  00307	4c 8d 9c 24 80
	00 00 00	 lea	 r11, QWORD PTR [rsp+128]
  0030f	49 8b 73 30	 mov	 rsi, QWORD PTR [r11+48]
  00313	49 8b 7b 38	 mov	 rdi, QWORD PTR [r11+56]
  00317	49 8b e3	 mov	 rsp, r11
  0031a	41 5e		 pop	 r14
  0031c	41 5c		 pop	 r12
  0031e	5d		 pop	 rbp
  0031f	c3		 ret	 0
multibytecodec_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@IEEIFIKA@couldn?8t?5convert?5the?5object?5to?5u@ ; `string'
PUBLIC	??_C@_0L@ENMONLGM@O?$HMz?3encode?$AA@		; `string'
EXTRN	PyUnicode_AsUnicodeAndSize:PROC
EXTRN	PyObject_Str:PROC
EXTRN	_PyArg_ParseTupleAndKeywords_SizeT:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$MultibyteCodec_Encode DD imagerel MultibyteCodec_Encode
	DD	imagerel MultibyteCodec_Encode+224
	DD	imagerel $unwind$MultibyteCodec_Encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$MultibyteCodec_Encode DD imagerel MultibyteCodec_Encode+224
	DD	imagerel MultibyteCodec_Encode+365
	DD	imagerel $chain$0$MultibyteCodec_Encode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$MultibyteCodec_Encode DD imagerel MultibyteCodec_Encode+365
	DD	imagerel MultibyteCodec_Encode+427
	DD	imagerel $chain$2$MultibyteCodec_Encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$MultibyteCodec_Encode DD 020021H
	DD	0c7400H
	DD	imagerel MultibyteCodec_Encode
	DD	imagerel MultibyteCodec_Encode+224
	DD	imagerel $unwind$MultibyteCodec_Encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$MultibyteCodec_Encode DD 020521H
	DD	0c7405H
	DD	imagerel MultibyteCodec_Encode
	DD	imagerel MultibyteCodec_Encode+224
	DD	imagerel $unwind$MultibyteCodec_Encode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$MultibyteCodec_Encode DD 040a01H
	DD	0d340aH
	DD	06006920aH
xdata	ENDS
;	COMDAT ??_C@_0CI@IEEIFIKA@couldn?8t?5convert?5the?5object?5to?5u@
CONST	SEGMENT
??_C@_0CI@IEEIFIKA@couldn?8t?5convert?5the?5object?5to?5u@ DB 'couldn''t '
	DB	'convert the object to unicode.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ENMONLGM@O?$HMz?3encode?$AA@
CONST	SEGMENT
??_C@_0L@ENMONLGM@O?$HMz?3encode?$AA@ DB 'O|z:encode', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT MultibyteCodec_Encode
_TEXT	SEGMENT
errors$ = 48
datalen$ = 56
data$ = 64
state$ = 72
self$ = 96
args$ = 104
kwargs$ = 112
arg$ = 120
MultibyteCodec_Encode PROC				; COMDAT

; 558  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000a	48 8b f1	 mov	 rsi, rcx
  0000d	49 8b c0	 mov	 rax, r8
  00010	4c 8b d2	 mov	 r10, rdx

; 559  :     MultibyteCodec_State state;
; 560  :     Py_UNICODE *data;
; 561  :     PyObject *errorcb, *r, *arg, *ucvt;
; 562  :     const char *errors = NULL;
; 563  :     Py_ssize_t datalen;
; 564  : 
; 565  :     if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|z:encode",
; 566  :                             codeckwarglist, &arg, &errors))

  00013	48 8d 4c 24 30	 lea	 rcx, QWORD PTR errors$[rsp]
  00018	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:codeckwarglist
  0001f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@ENMONLGM@O?$HMz?3encode?$AA@
  00026	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0002b	48 8d 4c 24 78	 lea	 rcx, QWORD PTR arg$[rsp]
  00030	33 db		 xor	 ebx, ebx
  00032	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00037	49 8b ca	 mov	 rcx, r10
  0003a	48 8b d0	 mov	 rdx, rax
  0003d	48 89 5c 24 30	 mov	 QWORD PTR errors$[rsp], rbx
  00042	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  00047	85 c0		 test	 eax, eax

; 567  :         return NULL;

  00049	74 55		 je	 SHORT $LN40@MultibyteC

; 568  : 
; 569  :     if (PyUnicode_Check(arg))

  0004b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR arg$[rsp]
  00050	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00054	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  0005e	75 4d		 jne	 SHORT $LN31@MultibyteC

; 570  :         ucvt = NULL;
; 571  :     else {
; 572  :         arg = ucvt = PyObject_Str(arg);

  00060	e8 00 00 00 00	 call	 PyObject_Str
  00065	48 8b d8	 mov	 rbx, rax
  00068	48 8b c8	 mov	 rcx, rax
  0006b	48 89 44 24 78	 mov	 QWORD PTR arg$[rsp], rax

; 573  :         if (arg == NULL)

  00070	48 85 c0	 test	 rax, rax

; 574  :             return NULL;

  00073	74 2b		 je	 SHORT $LN40@MultibyteC

; 575  :         else if (!PyUnicode_Check(arg)) {

  00075	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00079	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  00083	75 28		 jne	 SHORT $LN31@MultibyteC

; 576  :             PyErr_SetString(PyExc_TypeError,
; 577  :                 "couldn't convert the object to unicode.");

  00085	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0008c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@IEEIFIKA@couldn?8t?5convert?5the?5object?5to?5u@
  00093	e8 00 00 00 00	 call	 PyErr_SetString

; 578  :             Py_DECREF(ucvt);

  00098	48 8b cb	 mov	 rcx, rbx
  0009b	e8 00 00 00 00	 call	 _Py_DecRef
$LN40@MultibyteC:

; 579  :             return NULL;

  000a0	33 c0		 xor	 eax, eax

; 612  : }

  000a2	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  000a7	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000ab	5e		 pop	 rsi
  000ac	c3		 ret	 0
$LN31@MultibyteC:

; 580  :         }
; 581  :     }
; 582  : 
; 583  :     data = PyUnicode_AsUnicodeAndSize(arg, &datalen);

  000ad	48 8d 54 24 38	 lea	 rdx, QWORD PTR datalen$[rsp]
  000b2	e8 00 00 00 00	 call	 PyUnicode_AsUnicodeAndSize
  000b7	48 89 44 24 40	 mov	 QWORD PTR data$[rsp], rax

; 584  :     if (data == NULL) {

  000bc	48 85 c0	 test	 rax, rax
  000bf	75 1a		 jne	 SHORT $LN30@MultibyteC

; 585  :         Py_XDECREF(ucvt);

  000c1	48 85 db	 test	 rbx, rbx
  000c4	74 da		 je	 SHORT $LN40@MultibyteC
  000c6	48 8b cb	 mov	 rcx, rbx
  000c9	e8 00 00 00 00	 call	 _Py_DecRef

; 586  :         return NULL;

  000ce	33 c0		 xor	 eax, eax

; 612  : }

  000d0	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  000d5	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000d9	5e		 pop	 rsi
  000da	c3		 ret	 0
$LN30@MultibyteC:

; 587  :     }
; 588  : 
; 589  :     errorcb = internal_error_callback(errors);

  000db	48 8b 4c 24 30	 mov	 rcx, QWORD PTR errors$[rsp]
  000e0	48 89 7c 24 60	 mov	 QWORD PTR [rsp+96], rdi
  000e5	e8 00 00 00 00	 call	 internal_error_callback
  000ea	48 8b f8	 mov	 rdi, rax

; 590  :     if (errorcb == NULL) {

  000ed	48 85 c0	 test	 rax, rax

; 591  :         Py_XDECREF(ucvt);
; 592  :         return NULL;

  000f0	74 5c		 je	 SHORT $LN8@MultibyteC

; 593  :     }
; 594  : 
; 595  :     if (self->codec->encinit != NULL &&
; 596  :         self->codec->encinit(&state, self->codec->config) != 0)

  000f2	48 8b 46 60	 mov	 rax, QWORD PTR [rsi+96]
  000f6	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  000fb	74 10		 je	 SHORT $LN20@MultibyteC
  000fd	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00101	48 8d 4c 24 48	 lea	 rcx, QWORD PTR state$[rsp]
  00106	ff 50 20	 call	 QWORD PTR [rax+32]
  00109	85 c0		 test	 eax, eax
  0010b	75 2d		 jne	 SHORT $errorexit$20974
$LN20@MultibyteC:

; 597  :         goto errorexit;
; 598  :     r = multibytecodec_encode(self->codec, &state,
; 599  :                     (const Py_UNICODE **)&data, datalen, errorcb,
; 600  :                     MBENC_FLUSH | MBENC_RESET);

  0010d	4c 8b 4c 24 38	 mov	 r9, QWORD PTR datalen$[rsp]
  00112	48 8b 4e 60	 mov	 rcx, QWORD PTR [rsi+96]
  00116	4c 8d 44 24 40	 lea	 r8, QWORD PTR data$[rsp]
  0011b	48 8d 54 24 48	 lea	 rdx, QWORD PTR state$[rsp]
  00120	c7 44 24 28 03
	00 00 00	 mov	 DWORD PTR [rsp+40], 3
  00128	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0012d	e8 00 00 00 00	 call	 multibytecodec_encode
  00132	48 8b f0	 mov	 rsi, rax

; 601  :     if (r == NULL)

  00135	48 85 c0	 test	 rax, rax
  00138	75 33		 jne	 SHORT $LN18@MultibyteC
$errorexit$20974:

; 607  : 
; 608  : errorexit:
; 609  :     ERROR_DECREF(errorcb);

  0013a	48 83 ff 01	 cmp	 rdi, 1
  0013e	72 06		 jb	 SHORT $LN5@MultibyteC
  00140	48 83 ff 03	 cmp	 rdi, 3
  00144	76 08		 jbe	 SHORT $LN8@MultibyteC
$LN5@MultibyteC:
  00146	48 8b cf	 mov	 rcx, rdi
  00149	e8 00 00 00 00	 call	 _Py_DecRef
$LN8@MultibyteC:

; 610  :     Py_XDECREF(ucvt);

  0014e	48 85 db	 test	 rbx, rbx
  00151	74 08		 je	 SHORT $LN3@MultibyteC
  00153	48 8b cb	 mov	 rcx, rbx
  00156	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@MultibyteC:

; 611  :     return NULL;

  0015b	33 c0		 xor	 eax, eax
  0015d	48 8b 7c 24 60	 mov	 rdi, QWORD PTR [rsp+96]

; 612  : }

  00162	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  00167	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0016b	5e		 pop	 rsi
  0016c	c3		 ret	 0
$LN18@MultibyteC:

; 602  :         goto errorexit;
; 603  : 
; 604  :     ERROR_DECREF(errorcb);

  0016d	48 83 ff 01	 cmp	 rdi, 1
  00171	72 06		 jb	 SHORT $LN14@MultibyteC
  00173	48 83 ff 03	 cmp	 rdi, 3
  00177	76 08		 jbe	 SHORT $LN17@MultibyteC
$LN14@MultibyteC:
  00179	48 8b cf	 mov	 rcx, rdi
  0017c	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@MultibyteC:

; 605  :     Py_XDECREF(ucvt);

  00181	48 85 db	 test	 rbx, rbx
  00184	74 08		 je	 SHORT $LN12@MultibyteC
  00186	48 8b cb	 mov	 rcx, rbx
  00189	e8 00 00 00 00	 call	 _Py_DecRef
$LN12@MultibyteC:

; 606  :     return make_tuple(r, datalen);

  0018e	48 8b 54 24 38	 mov	 rdx, QWORD PTR datalen$[rsp]
  00193	48 8b ce	 mov	 rcx, rsi
  00196	e8 00 00 00 00	 call	 make_tuple
  0019b	48 8b 7c 24 60	 mov	 rdi, QWORD PTR [rsp+96]

; 612  : }

  001a0	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  001a5	48 83 c4 50	 add	 rsp, 80			; 00000050H
  001a9	5e		 pop	 rsi
  001aa	c3		 ret	 0
MultibyteCodec_Encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@JEMNGIH@y?$CK?$HMz?3decode?$AA@	; `string'
EXTRN	PyUnicode_FromUnicode:PROC
EXTRN	PyUnicode_New:PROC
EXTRN	PyBuffer_Release:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$MultibyteCodec_Decode DD imagerel MultibyteCodec_Decode
	DD	imagerel MultibyteCodec_Decode+775
	DD	imagerel $unwind$MultibyteCodec_Decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$MultibyteCodec_Decode DD 0a7b01H
	DD	018c47bH
	DD	01d646fH
	DD	01c3467H
	DD	019010fH
	DD	050027003H
xdata	ENDS
;	COMDAT ??_C@_0M@JEMNGIH@y?$CK?$HMz?3decode?$AA@
CONST	SEGMENT
??_C@_0M@JEMNGIH@y?$CK?$HMz?3decode?$AA@ DB 'y*|z:decode', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT MultibyteCodec_Decode
_TEXT	SEGMENT
buf$ = 48
state$ = 104
pdata$ = 112
self$ = 224
args$ = 232
kwargs$ = 240
errors$ = 248
MultibyteCodec_Decode PROC				; COMDAT

; 617  : {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 8d 6c 24 b1	 lea	 rbp, QWORD PTR [rsp-79]
  00008	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000f	48 8b f9	 mov	 rdi, rcx
  00012	49 8b c0	 mov	 rax, r8
  00015	4c 8b d2	 mov	 r10, rdx

; 618  :     MultibyteCodec_State state;
; 619  :     MultibyteDecodeBuffer buf;
; 620  :     PyObject *errorcb;
; 621  :     Py_buffer pdata;
; 622  :     const char *data, *errors = NULL;
; 623  :     Py_ssize_t datalen, finalsize;
; 624  : 
; 625  :     if (!PyArg_ParseTupleAndKeywords(args, kwargs, "y*|z:decode",
; 626  :                             codeckwarglist, &pdata, &errors))

  00018	48 8d 4d 7f	 lea	 rcx, QWORD PTR errors$[rbp-121]
  0001c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:codeckwarglist
  00023	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@JEMNGIH@y?$CK?$HMz?3decode?$AA@
  0002a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0002f	48 8d 4d f7	 lea	 rcx, QWORD PTR pdata$[rbp-121]
  00033	48 8b d0	 mov	 rdx, rax
  00036	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0003b	49 8b ca	 mov	 rcx, r10
  0003e	48 c7 45 7f 00
	00 00 00	 mov	 QWORD PTR errors$[rbp-121], 0
  00046	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  0004b	85 c0		 test	 eax, eax
  0004d	75 0c		 jne	 SHORT $LN40@MultibyteC@2

; 627  :         return NULL;

  0004f	33 c0		 xor	 eax, eax

; 692  : }

  00051	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  00058	5f		 pop	 rdi
  00059	5d		 pop	 rbp
  0005a	c3		 ret	 0
$LN40@MultibyteC@2:

; 628  :     data = pdata.buf;
; 629  :     datalen = pdata.len;
; 630  : 
; 631  :     errorcb = internal_error_callback(errors);

  0005b	48 8b 4d 7f	 mov	 rcx, QWORD PTR errors$[rbp-121]
  0005f	48 89 9c 24 e0
	00 00 00	 mov	 QWORD PTR [rsp+224], rbx
  00067	48 89 b4 24 e8
	00 00 00	 mov	 QWORD PTR [rsp+232], rsi
  0006f	48 8b 75 f7	 mov	 rsi, QWORD PTR pdata$[rbp-121]
  00073	4c 89 a4 24 c0
	00 00 00	 mov	 QWORD PTR [rsp+192], r12
  0007b	4c 8b 65 07	 mov	 r12, QWORD PTR pdata$[rbp-105]
  0007f	e8 00 00 00 00	 call	 internal_error_callback
  00084	48 8b d8	 mov	 rbx, rax

; 632  :     if (errorcb == NULL) {

  00087	48 85 c0	 test	 rax, rax
  0008a	75 0e		 jne	 SHORT $LN39@MultibyteC@2

; 633  :         PyBuffer_Release(&pdata);

  0008c	48 8d 4d f7	 lea	 rcx, QWORD PTR pdata$[rbp-121]
  00090	e8 00 00 00 00	 call	 PyBuffer_Release

; 634  :         return NULL;

  00095	e9 49 02 00 00	 jmp	 $LN3@MultibyteC@2
$LN39@MultibyteC@2:

; 635  :     }
; 636  : 
; 637  :     if (datalen == 0) {

  0009a	4d 85 e4	 test	 r12, r12
  0009d	75 35		 jne	 SHORT $LN38@MultibyteC@2

; 638  :         PyBuffer_Release(&pdata);

  0009f	48 8d 4d f7	 lea	 rcx, QWORD PTR pdata$[rbp-121]
  000a3	e8 00 00 00 00	 call	 PyBuffer_Release

; 639  :         ERROR_DECREF(errorcb);

  000a8	48 83 fb 01	 cmp	 rbx, 1
  000ac	72 06		 jb	 SHORT $LN33@MultibyteC@2
  000ae	48 83 fb 03	 cmp	 rbx, 3
  000b2	76 08		 jbe	 SHORT $LN36@MultibyteC@2
$LN33@MultibyteC@2:
  000b4	48 8b cb	 mov	 rcx, rbx
  000b7	e8 00 00 00 00	 call	 _Py_DecRef
$LN36@MultibyteC@2:

; 640  :         return make_tuple(PyUnicode_New(0, 0), 0);

  000bc	33 d2		 xor	 edx, edx
  000be	33 c9		 xor	 ecx, ecx
  000c0	e8 00 00 00 00	 call	 PyUnicode_New
  000c5	33 d2		 xor	 edx, edx
  000c7	48 8b c8	 mov	 rcx, rax
  000ca	e8 00 00 00 00	 call	 make_tuple
  000cf	e9 11 02 00 00	 jmp	 $LN69@MultibyteC@2
$LN38@MultibyteC@2:

; 641  :     }
; 642  : 
; 643  :     buf.excobj = NULL;
; 644  :     buf.inbuf = buf.inbuf_top = (unsigned char *)data;
; 645  :     buf.inbuf_end = buf.inbuf_top + datalen;

  000d4	49 8d 04 34	 lea	 rax, QWORD PTR [r12+rsi]

; 646  :     buf.outobj = PyUnicode_FromUnicode(NULL, datalen);

  000d8	49 8b d4	 mov	 rdx, r12
  000db	33 c9		 xor	 ecx, ecx
  000dd	48 c7 45 df 00
	00 00 00	 mov	 QWORD PTR buf$[rbp-81], 0
  000e5	48 89 75 bf	 mov	 QWORD PTR buf$[rbp-113], rsi
  000e9	48 89 75 b7	 mov	 QWORD PTR buf$[rbp-121], rsi
  000ed	48 89 45 c7	 mov	 QWORD PTR buf$[rbp-105], rax
  000f1	e8 00 00 00 00	 call	 PyUnicode_FromUnicode
  000f6	4c 8b d8	 mov	 r11, rax
  000f9	48 89 45 e7	 mov	 QWORD PTR buf$[rbp-73], rax

; 647  :     if (buf.outobj == NULL)

  000fd	48 85 c0	 test	 rax, rax
  00100	0f 84 a4 01 00
	00		 je	 $errorexit$21045

; 648  :         goto errorexit;
; 649  :     buf.outbuf = PyUnicode_AS_UNICODE(buf.outobj);

  00106	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  0010a	48 85 c0	 test	 rax, rax
  0010d	75 0c		 jne	 SHORT $LN70@MultibyteC@2
  0010f	49 8b cb	 mov	 rcx, r11
  00112	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  00117	4c 8b 5d e7	 mov	 r11, QWORD PTR buf$[rbp-73]
$LN70@MultibyteC@2:
  0011b	48 89 45 cf	 mov	 QWORD PTR buf$[rbp-97], rax

; 650  :     if (buf.outbuf == NULL)

  0011f	48 85 c0	 test	 rax, rax
  00122	0f 84 82 01 00
	00		 je	 $errorexit$21045

; 651  :         goto errorexit;
; 652  :     buf.outbuf_end = buf.outbuf + PyUnicode_GET_SIZE(buf.outobj);

  00128	49 83 7b 78 00	 cmp	 QWORD PTR [r11+120], 0
  0012d	75 0c		 jne	 SHORT $LN74@MultibyteC@2
  0012f	49 8b cb	 mov	 rcx, r11
  00132	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  00137	4c 8b 5d e7	 mov	 r11, QWORD PTR buf$[rbp-73]
$LN74@MultibyteC@2:
  0013b	41 8b 43 70	 mov	 eax, DWORD PTR [r11+112]
  0013f	a8 40		 test	 al, 64			; 00000040H
  00141	74 0a		 je	 SHORT $LN47@MultibyteC@2
  00143	a8 20		 test	 al, 32			; 00000020H
  00145	74 06		 je	 SHORT $LN47@MultibyteC@2
  00147	49 8b 4b 60	 mov	 rcx, QWORD PTR [r11+96]
  0014b	eb 07		 jmp	 SHORT $LN48@MultibyteC@2
$LN47@MultibyteC@2:
  0014d	49 8b 8b 90 00
	00 00		 mov	 rcx, QWORD PTR [r11+144]
$LN48@MultibyteC@2:
  00154	48 8b 45 cf	 mov	 rax, QWORD PTR buf$[rbp-97]
  00158	48 8d 0c 48	 lea	 rcx, QWORD PTR [rax+rcx*2]

; 653  : 
; 654  :     if (self->codec->decinit != NULL &&
; 655  :         self->codec->decinit(&state, self->codec->config) != 0)

  0015c	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00160	48 89 4d d7	 mov	 QWORD PTR buf$[rbp-89], rcx
  00164	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  00169	74 17		 je	 SHORT $LN59@MultibyteC@2
  0016b	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0016f	48 8d 4d ef	 lea	 rcx, QWORD PTR state$[rbp-121]
  00173	ff 50 38	 call	 QWORD PTR [rax+56]
  00176	85 c0		 test	 eax, eax
  00178	0f 85 2c 01 00
	00		 jne	 $errorexit$21045
  0017e	4c 8b 5d e7	 mov	 r11, QWORD PTR buf$[rbp-73]
$LN59@MultibyteC@2:

; 656  :         goto errorexit;
; 657  : 
; 658  :     while (buf.inbuf < buf.inbuf_end) {

  00182	48 8b 45 b7	 mov	 rax, QWORD PTR buf$[rbp-121]
  00186	48 8b 4d c7	 mov	 rcx, QWORD PTR buf$[rbp-105]
  0018a	48 3b c1	 cmp	 rax, rcx
  0018d	73 65		 jae	 SHORT $LN28@MultibyteC@2
  0018f	90		 npad	 1
$LL29@MultibyteC@2:

; 659  :         Py_ssize_t inleft, outleft, r;
; 660  : 
; 661  :         inleft = (Py_ssize_t)(buf.inbuf_end - buf.inbuf);
; 662  :         outleft = (Py_ssize_t)(buf.outbuf_end - buf.outbuf);
; 663  : 
; 664  :         r = self->codec->decode(&state, self->codec->config,
; 665  :                         &buf.inbuf, inleft, &buf.outbuf, outleft);

  00190	4c 8b 57 60	 mov	 r10, QWORD PTR [rdi+96]
  00194	48 2b c8	 sub	 rcx, rax
  00197	48 8b 45 d7	 mov	 rax, QWORD PTR buf$[rbp-89]
  0019b	48 2b 45 cf	 sub	 rax, QWORD PTR buf$[rbp-97]
  0019f	49 8b 52 08	 mov	 rdx, QWORD PTR [r10+8]
  001a3	4c 8b c9	 mov	 r9, rcx
  001a6	48 d1 f8	 sar	 rax, 1
  001a9	4c 8d 45 b7	 lea	 r8, QWORD PTR buf$[rbp-121]
  001ad	48 8d 4d ef	 lea	 rcx, QWORD PTR state$[rbp-121]
  001b1	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  001b6	48 8d 45 cf	 lea	 rax, QWORD PTR buf$[rbp-97]
  001ba	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001bf	41 ff 52 30	 call	 QWORD PTR [r10+48]

; 666  :         if (r == 0)

  001c3	48 85 c0	 test	 rax, rax
  001c6	74 28		 je	 SHORT $LN63@MultibyteC@2

; 667  :             break;
; 668  :         else if (multibytecodec_decerror(self->codec, &state,
; 669  :                                          &buf, errorcb, r))

  001c8	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  001cc	48 8d 55 b7	 lea	 rdx, QWORD PTR buf$[rbp-121]
  001d0	4c 8b c8	 mov	 r9, rax
  001d3	4c 8b c3	 mov	 r8, rbx
  001d6	e8 00 00 00 00	 call	 multibytecodec_decerror
  001db	85 c0		 test	 eax, eax
  001dd	0f 85 c7 00 00
	00		 jne	 $errorexit$21045

; 656  :         goto errorexit;
; 657  : 
; 658  :     while (buf.inbuf < buf.inbuf_end) {

  001e3	48 8b 45 b7	 mov	 rax, QWORD PTR buf$[rbp-121]
  001e7	48 8b 4d c7	 mov	 rcx, QWORD PTR buf$[rbp-105]
  001eb	48 3b c1	 cmp	 rax, rcx
  001ee	72 a0		 jb	 SHORT $LL29@MultibyteC@2
$LN63@MultibyteC@2:
  001f0	4c 8b 5d e7	 mov	 r11, QWORD PTR buf$[rbp-73]
$LN28@MultibyteC@2:

; 670  :             goto errorexit;
; 671  :     }
; 672  : 
; 673  :     finalsize = (Py_ssize_t)(buf.outbuf -
; 674  :                              PyUnicode_AS_UNICODE(buf.outobj));

  001f4	49 8b 43 78	 mov	 rax, QWORD PTR [r11+120]
  001f8	48 85 c0	 test	 rax, rax
  001fb	75 0c		 jne	 SHORT $LN52@MultibyteC@2
  001fd	49 8b cb	 mov	 rcx, r11
  00200	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  00205	4c 8b 5d e7	 mov	 r11, QWORD PTR buf$[rbp-73]
$LN52@MultibyteC@2:
  00209	48 8b 7d cf	 mov	 rdi, QWORD PTR buf$[rbp-97]
  0020d	48 2b f8	 sub	 rdi, rax
  00210	48 d1 ff	 sar	 rdi, 1

; 675  : 
; 676  :     if (finalsize != PyUnicode_GET_SIZE(buf.outobj))

  00213	49 83 7b 78 00	 cmp	 QWORD PTR [r11+120], 0
  00218	74 1b		 je	 SHORT $LN57@MultibyteC@2
  0021a	41 8b 43 70	 mov	 eax, DWORD PTR [r11+112]
  0021e	a8 40		 test	 al, 64			; 00000040H
  00220	74 0a		 je	 SHORT $LN53@MultibyteC@2
  00222	a8 20		 test	 al, 32			; 00000020H
  00224	74 06		 je	 SHORT $LN53@MultibyteC@2
  00226	49 8b 43 60	 mov	 rax, QWORD PTR [r11+96]
  0022a	eb 2f		 jmp	 SHORT $LN56@MultibyteC@2
$LN53@MultibyteC@2:
  0022c	49 8b 83 90 00
	00 00		 mov	 rax, QWORD PTR [r11+144]
  00233	eb 26		 jmp	 SHORT $LN56@MultibyteC@2
$LN57@MultibyteC@2:
  00235	49 8b cb	 mov	 rcx, r11
  00238	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  0023d	48 8b 45 e7	 mov	 rax, QWORD PTR buf$[rbp-73]
  00241	8b 48 70	 mov	 ecx, DWORD PTR [rax+112]
  00244	f6 c1 40	 test	 cl, 64			; 00000040H
  00247	74 0b		 je	 SHORT $LN55@MultibyteC@2
  00249	f6 c1 20	 test	 cl, 32			; 00000020H
  0024c	74 06		 je	 SHORT $LN55@MultibyteC@2
  0024e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00252	eb 07		 jmp	 SHORT $LN56@MultibyteC@2
$LN55@MultibyteC@2:
  00254	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
$LN56@MultibyteC@2:
  0025b	48 3b f8	 cmp	 rdi, rax
  0025e	74 11		 je	 SHORT $LN23@MultibyteC@2

; 677  :         if (PyUnicode_Resize(&buf.outobj, finalsize) == -1)

  00260	48 8d 4d e7	 lea	 rcx, QWORD PTR buf$[rbp-73]
  00264	48 8b d7	 mov	 rdx, rdi
  00267	e8 00 00 00 00	 call	 PyUnicode_Resize
  0026c	83 f8 ff	 cmp	 eax, -1
  0026f	74 39		 je	 SHORT $errorexit$21045
$LN23@MultibyteC@2:

; 678  :             goto errorexit;
; 679  : 
; 680  :     PyBuffer_Release(&pdata);

  00271	48 8d 4d f7	 lea	 rcx, QWORD PTR pdata$[rbp-121]
  00275	e8 00 00 00 00	 call	 PyBuffer_Release

; 681  :     Py_XDECREF(buf.excobj);

  0027a	48 8b 4d df	 mov	 rcx, QWORD PTR buf$[rbp-81]
  0027e	48 85 c9	 test	 rcx, rcx
  00281	74 05		 je	 SHORT $LN21@MultibyteC@2
  00283	e8 00 00 00 00	 call	 _Py_DecRef
$LN21@MultibyteC@2:

; 682  :     ERROR_DECREF(errorcb);

  00288	48 83 fb 01	 cmp	 rbx, 1
  0028c	72 06		 jb	 SHORT $LN14@MultibyteC@2
  0028e	48 83 fb 03	 cmp	 rbx, 3
  00292	76 08		 jbe	 SHORT $LN17@MultibyteC@2
$LN14@MultibyteC@2:
  00294	48 8b cb	 mov	 rcx, rbx
  00297	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@MultibyteC@2:

; 683  :     return make_tuple(buf.outobj, datalen);

  0029c	48 8b 4d e7	 mov	 rcx, QWORD PTR buf$[rbp-73]
  002a0	49 8b d4	 mov	 rdx, r12
  002a3	e8 00 00 00 00	 call	 make_tuple
  002a8	eb 3b		 jmp	 SHORT $LN69@MultibyteC@2
$errorexit$21045:

; 684  : 
; 685  : errorexit:
; 686  :     PyBuffer_Release(&pdata);

  002aa	48 8d 4d f7	 lea	 rcx, QWORD PTR pdata$[rbp-121]
  002ae	e8 00 00 00 00	 call	 PyBuffer_Release

; 687  :     ERROR_DECREF(errorcb);

  002b3	48 83 fb 01	 cmp	 rbx, 1
  002b7	72 06		 jb	 SHORT $LN9@MultibyteC@2
  002b9	48 83 fb 03	 cmp	 rbx, 3
  002bd	76 08		 jbe	 SHORT $LN12@MultibyteC@2
$LN9@MultibyteC@2:
  002bf	48 8b cb	 mov	 rcx, rbx
  002c2	e8 00 00 00 00	 call	 _Py_DecRef
$LN12@MultibyteC@2:

; 688  :     Py_XDECREF(buf.excobj);

  002c7	48 8b 4d df	 mov	 rcx, QWORD PTR buf$[rbp-81]
  002cb	48 85 c9	 test	 rcx, rcx
  002ce	74 05		 je	 SHORT $LN7@MultibyteC@2
  002d0	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@MultibyteC@2:

; 689  :     Py_XDECREF(buf.outobj);

  002d5	48 8b 4d e7	 mov	 rcx, QWORD PTR buf$[rbp-73]
  002d9	48 85 c9	 test	 rcx, rcx
  002dc	74 05		 je	 SHORT $LN3@MultibyteC@2
  002de	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@MultibyteC@2:

; 690  : 
; 691  :     return NULL;

  002e3	33 c0		 xor	 eax, eax
$LN69@MultibyteC@2:
  002e5	48 8b b4 24 e8
	00 00 00	 mov	 rsi, QWORD PTR [rsp+232]
  002ed	48 8b 9c 24 e0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+224]
  002f5	4c 8b a4 24 c0
	00 00 00	 mov	 r12, QWORD PTR [rsp+192]

; 692  : }

  002fd	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  00304	5f		 pop	 rdi
  00305	5d		 pop	 rbp
  00306	c3		 ret	 0
MultibyteCodec_Decode ENDP
_TEXT	ENDS
EXTRN	PyObject_Free:PROC
; Function compile flags: /Ogtpy
;	COMDAT multibytecodec_dealloc
_TEXT	SEGMENT
self$ = 8
multibytecodec_dealloc PROC				; COMDAT

; 707  :     PyObject_Del(self);
; 708  : }

  00000	e9 00 00 00 00	 jmp	 PyObject_Free
multibytecodec_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@KFMEJOOM@pending?5buffer?5overflow?$AA@ ; `string'
PUBLIC	??_C@_0CE@PKCMPAJM@couldn?8t?5convert?5the?5object?5to?5s@ ; `string'
EXTRN	PyMem_Free:PROC
EXTRN	PyExc_UnicodeError:QWORD
EXTRN	PyMem_Malloc:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$encoder_encode_stateful DD imagerel encoder_encode_stateful
	DD	imagerel encoder_encode_stateful+52
	DD	imagerel $unwind$encoder_encode_stateful
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$encoder_encode_stateful DD imagerel encoder_encode_stateful+52
	DD	imagerel encoder_encode_stateful+237
	DD	imagerel $chain$1$encoder_encode_stateful
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$encoder_encode_stateful DD imagerel encoder_encode_stateful+237
	DD	imagerel encoder_encode_stateful+316
	DD	imagerel $chain$2$encoder_encode_stateful
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$encoder_encode_stateful DD imagerel encoder_encode_stateful+316
	DD	imagerel encoder_encode_stateful+866
	DD	imagerel $chain$3$encoder_encode_stateful
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$encoder_encode_stateful DD 040021H
	DD	0ed400H
	DD	0cc400H
	DD	imagerel encoder_encode_stateful
	DD	imagerel encoder_encode_stateful+52
	DD	imagerel $unwind$encoder_encode_stateful
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$encoder_encode_stateful DD 021H
	DD	imagerel encoder_encode_stateful
	DD	imagerel encoder_encode_stateful+52
	DD	imagerel $unwind$encoder_encode_stateful
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$encoder_encode_stateful DD 040a21H
	DD	0ed40aH
	DD	0cc405H
	DD	imagerel encoder_encode_stateful
	DD	imagerel encoder_encode_stateful+52
	DD	imagerel $unwind$encoder_encode_stateful
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$encoder_encode_stateful DD 060b01H
	DD	0e007520bH
	DD	060047005H
	DD	030025003H
xdata	ENDS
;	COMDAT ??_C@_0BI@KFMEJOOM@pending?5buffer?5overflow?$AA@
CONST	SEGMENT
??_C@_0BI@KFMEJOOM@pending?5buffer?5overflow?$AA@ DB 'pending buffer over'
	DB	'flow', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@PKCMPAJM@couldn?8t?5convert?5the?5object?5to?5s@
CONST	SEGMENT
??_C@_0CE@PKCMPAJM@couldn?8t?5convert?5the?5object?5to?5s@ DB 'couldn''t '
	DB	'convert the object to str.', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\cjkcodecs\multibytecodec.c
CONST	ENDS
;	COMDAT encoder_encode_stateful
_TEXT	SEGMENT
ctx$ = 96
datalen$ = 104
unistr$ = 104
final$ = 112
inbuf$ = 120
encoder_encode_stateful PROC				; COMDAT

; 753  : {

  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	56		 push	 rsi
  00004	57		 push	 rdi
  00005	41 56		 push	 r14
  00007	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 754  :     PyObject *ucvt, *r = NULL;
; 755  :     Py_UNICODE *inbuf, *inbuf_end, *inbuf_tmp = NULL;
; 756  :     Py_ssize_t datalen, origpending;
; 757  :     wchar_t *data;
; 758  : 
; 759  :     if (PyUnicode_Check(unistr))

  0000b	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  0000f	33 f6		 xor	 esi, esi
  00011	45 8b f0	 mov	 r14d, r8d
  00014	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  0001e	48 8b fa	 mov	 rdi, rdx
  00021	48 8b e9	 mov	 rbp, rcx
  00024	0f 84 c3 00 00
	00		 je	 $LN28@encoder_en

; 760  :         ucvt = NULL;

  0002a	33 db		 xor	 ebx, ebx
$LN24@encoder_en:

; 770  :         }
; 771  :     }
; 772  : 
; 773  :     data = PyUnicode_AsUnicodeAndSize(unistr, &datalen);

  0002c	48 8d 54 24 68	 lea	 rdx, QWORD PTR datalen$[rsp]
  00031	48 8b cf	 mov	 rcx, rdi
  00034	4c 89 64 24 60	 mov	 QWORD PTR [rsp+96], r12
  00039	4c 89 6c 24 70	 mov	 QWORD PTR [rsp+112], r13
  0003e	e8 00 00 00 00	 call	 PyUnicode_AsUnicodeAndSize

; 774  :     if (data == NULL)

  00043	48 85 c0	 test	 rax, rax
  00046	74 30		 je	 SHORT $LN7@encoder_en

; 775  :         goto errorexit;
; 776  :     origpending = ctx->pendingsize;

  00048	4c 8b ad 80 00
	00 00		 mov	 r13, QWORD PTR [rbp+128]

; 777  : 
; 778  :     if (origpending > 0) {

  0004f	4d 85 ed	 test	 r13, r13
  00052	0f 8e 71 01 00
	00		 jle	 $LN22@encoder_en

; 779  :         if (datalen > PY_SSIZE_T_MAX - ctx->pendingsize) {

  00058	48 8b 4c 24 68	 mov	 rcx, QWORD PTR datalen$[rsp]
  0005d	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  00067	49 2b c5	 sub	 rax, r13
  0006a	48 3b c8	 cmp	 rcx, rax
  0006d	0f 8e c9 00 00
	00		 jle	 $LN21@encoder_en

; 780  :             PyErr_NoMemory();

  00073	e8 00 00 00 00	 call	 PyErr_NoMemory
$LN7@encoder_en:

; 835  :     Py_XDECREF(ucvt);

  00078	48 85 db	 test	 rbx, rbx
  0007b	0f 84 ca 02 00
	00		 je	 $LN3@encoder_en
  00081	e8 00 00 00 00	 call	 _Py_PXCTX
  00086	85 c0		 test	 eax, eax
  00088	0f 85 bd 02 00
	00		 jne	 $LN3@encoder_en
  0008e	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00092	a8 20		 test	 al, 32			; 00000020H
  00094	0f 85 a9 02 00
	00		 jne	 $LN52@encoder_en
  0009a	84 c0		 test	 al, al
  0009c	0f 88 a1 02 00
	00		 js	 $LN52@encoder_en
  000a2	a8 02		 test	 al, 2
  000a4	0f 85 a1 02 00
	00		 jne	 $LN3@encoder_en
  000aa	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000ae	0f 85 97 02 00
	00		 jne	 $LN3@encoder_en
  000b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c2	4c 8b cb	 mov	 r9, rbx
  000c5	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000cb	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d3	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d8	48 8b cb	 mov	 rcx, rbx
  000db	85 c0		 test	 eax, eax
  000dd	0f 84 54 02 00
	00		 je	 $LN57@encoder_en
  000e3	e8 00 00 00 00	 call	 _Px_Dealloc
  000e8	e9 5e 02 00 00	 jmp	 $LN3@encoder_en
$LN28@encoder_en:

; 761  :     else {
; 762  :         unistr = ucvt = PyObject_Str(unistr);

  000ed	48 8b ca	 mov	 rcx, rdx
  000f0	e8 00 00 00 00	 call	 PyObject_Str
  000f5	48 8b d8	 mov	 rbx, rax
  000f8	48 8b f8	 mov	 rdi, rax

; 763  :         if (unistr == NULL)

  000fb	48 85 c0	 test	 rax, rax

; 764  :             return NULL;

  000fe	74 2f		 je	 SHORT $LN63@encoder_en

; 765  :         else if (!PyUnicode_Check(unistr)) {

  00100	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00104	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  0010e	0f 85 18 ff ff
	ff		 jne	 $LN24@encoder_en

; 766  :             PyErr_SetString(PyExc_TypeError,
; 767  :                 "couldn't convert the object to str.");

  00114	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0011b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@PKCMPAJM@couldn?8t?5convert?5the?5object?5to?5s@
  00122	e8 00 00 00 00	 call	 PyErr_SetString

; 768  :             Py_DECREF(ucvt);

  00127	48 8b cb	 mov	 rcx, rbx
  0012a	e8 00 00 00 00	 call	 _Py_DecRef
$LN63@encoder_en:

; 769  :             return NULL;

  0012f	33 c0		 xor	 eax, eax

; 837  : }

  00131	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00135	41 5e		 pop	 r14
  00137	5f		 pop	 rdi
  00138	5e		 pop	 rsi
  00139	5d		 pop	 rbp
  0013a	5b		 pop	 rbx
  0013b	c3		 ret	 0
$LN21@encoder_en:

; 781  :             /* inbuf_tmp == NULL */
; 782  :             goto errorexit;
; 783  :         }
; 784  :         inbuf_tmp = PyMem_New(Py_UNICODE, datalen + ctx->pendingsize);

  0013c	49 03 cd	 add	 rcx, r13
  0013f	48 b8 ff ff ff
	ff ff ff ff 3f	 mov	 rax, 4611686018427387903 ; 3fffffffffffffffH
  00149	48 3b c8	 cmp	 rcx, rax
  0014c	0f 87 26 ff ff
	ff		 ja	 $LN7@encoder_en
  00152	48 03 c9	 add	 rcx, rcx
  00155	e8 00 00 00 00	 call	 PyMem_Malloc
  0015a	48 8b f0	 mov	 rsi, rax

; 785  :         if (inbuf_tmp == NULL)

  0015d	48 85 c0	 test	 rax, rax
  00160	0f 84 12 ff ff
	ff		 je	 $LN7@encoder_en

; 786  :             goto errorexit;
; 787  :         memcpy(inbuf_tmp, ctx->pending,
; 788  :             Py_UNICODE_SIZE * ctx->pendingsize);

  00166	4c 8b 85 80 00
	00 00		 mov	 r8, QWORD PTR [rbp+128]
  0016d	48 8d 55 78	 lea	 rdx, QWORD PTR [rbp+120]
  00171	48 8b c8	 mov	 rcx, rax
  00174	4d 03 c0	 add	 r8, r8
  00177	e8 00 00 00 00	 call	 memcpy

; 789  :         memcpy(inbuf_tmp + ctx->pendingsize,
; 790  :             PyUnicode_AS_UNICODE(unistr),
; 791  :             Py_UNICODE_SIZE * datalen);

  0017c	48 8b 47 78	 mov	 rax, QWORD PTR [rdi+120]
  00180	48 85 c0	 test	 rax, rax
  00183	75 08		 jne	 SHORT $LN34@encoder_en
  00185	48 8b cf	 mov	 rcx, rdi
  00188	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
$LN34@encoder_en:
  0018d	48 8b 8d 80 00
	00 00		 mov	 rcx, QWORD PTR [rbp+128]
  00194	4c 8b 44 24 68	 mov	 r8, QWORD PTR datalen$[rsp]
  00199	48 8b d0	 mov	 rdx, rax
  0019c	48 8d 0c 4e	 lea	 rcx, QWORD PTR [rsi+rcx*2]
  001a0	4d 03 c0	 add	 r8, r8
  001a3	e8 00 00 00 00	 call	 memcpy

; 792  :         datalen += ctx->pendingsize;

  001a8	4c 8b 4c 24 68	 mov	 r9, QWORD PTR datalen$[rsp]

; 793  :         ctx->pendingsize = 0;
; 794  :         inbuf = inbuf_tmp;

  001ad	48 8b c6	 mov	 rax, rsi
  001b0	4c 03 8d 80 00
	00 00		 add	 r9, QWORD PTR [rbp+128]
  001b7	48 c7 85 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rbp+128], 0
  001c2	4c 89 4c 24 68	 mov	 QWORD PTR datalen$[rsp], r9

; 795  :     }
; 796  :     else

  001c7	eb 16		 jmp	 SHORT $LN61@encoder_en
$LN22@encoder_en:

; 797  :         inbuf = (Py_UNICODE *)PyUnicode_AS_UNICODE(unistr);

  001c9	48 8b 47 78	 mov	 rax, QWORD PTR [rdi+120]
  001cd	48 85 c0	 test	 rax, rax
  001d0	75 08		 jne	 SHORT $LN62@encoder_en
  001d2	48 8b cf	 mov	 rcx, rdi
  001d5	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
$LN62@encoder_en:
  001da	4c 8b 4c 24 68	 mov	 r9, QWORD PTR datalen$[rsp]
$LN61@encoder_en:

; 798  : 
; 799  :     inbuf_end = inbuf + datalen;
; 800  : 
; 801  :     r = multibytecodec_encode(ctx->codec, &ctx->state,
; 802  :                     (const Py_UNICODE **)&inbuf, datalen,
; 803  :                     ctx->errors, final ? MBENC_FLUSH | MBENC_RESET : 0);

  001df	48 8b 4d 60	 mov	 rcx, QWORD PTR [rbp+96]
  001e3	48 89 44 24 78	 mov	 QWORD PTR inbuf$[rsp], rax
  001e8	4e 8d 24 48	 lea	 r12, QWORD PTR [rax+r9*2]
  001ec	41 f7 de	 neg	 r14d
  001ef	48 8d 55 68	 lea	 rdx, QWORD PTR [rbp+104]
  001f3	4c 8d 44 24 78	 lea	 r8, QWORD PTR inbuf$[rsp]
  001f8	1b c0		 sbb	 eax, eax
  001fa	83 e0 03	 and	 eax, 3
  001fd	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00201	48 8b 45 70	 mov	 rax, QWORD PTR [rbp+112]
  00205	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0020a	e8 00 00 00 00	 call	 multibytecodec_encode
  0020f	48 8b f8	 mov	 rdi, rax

; 804  :     if (r == NULL) {

  00212	48 85 c0	 test	 rax, rax
  00215	75 1f		 jne	 SHORT $LN18@encoder_en

; 805  :         /* recover the original pending buffer */
; 806  :         if (origpending > 0)

  00217	4d 85 ed	 test	 r13, r13
  0021a	7e 11		 jle	 SHORT $LN17@encoder_en

; 807  :             memcpy(ctx->pending, inbuf_tmp,
; 808  :                 Py_UNICODE_SIZE * origpending);

  0021c	4f 8d 44 2d 00	 lea	 r8, QWORD PTR [r13+r13]
  00221	48 8d 4d 78	 lea	 rcx, QWORD PTR [rbp+120]
  00225	48 8b d6	 mov	 rdx, rsi
  00228	e8 00 00 00 00	 call	 memcpy
$LN17@encoder_en:

; 809  :         ctx->pendingsize = origpending;

  0022d	4c 89 ad 80 00
	00 00		 mov	 QWORD PTR [rbp+128], r13

; 810  :         goto errorexit;

  00234	eb 43		 jmp	 SHORT $errorexit$21195
$LN18@encoder_en:

; 811  :     }
; 812  : 
; 813  :     if (inbuf < inbuf_end) {

  00236	48 8b 54 24 78	 mov	 rdx, QWORD PTR inbuf$[rsp]
  0023b	49 3b d4	 cmp	 rdx, r12
  0023e	0f 83 d4 00 00
	00		 jae	 $LN16@encoder_en

; 814  :         ctx->pendingsize = (Py_ssize_t)(inbuf_end - inbuf);

  00244	4c 2b e2	 sub	 r12, rdx
  00247	49 d1 fc	 sar	 r12, 1
  0024a	4c 89 a5 80 00
	00 00		 mov	 QWORD PTR [rbp+128], r12

; 815  :         if (ctx->pendingsize > MAXENCPENDING) {

  00251	49 83 fc 02	 cmp	 r12, 2
  00255	0f 8e b0 00 00
	00		 jle	 $LN15@encoder_en

; 816  :             /* normal codecs can't reach here */
; 817  :             ctx->pendingsize = 0;

  0025b	48 c7 85 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rbp+128], 0

; 818  :             PyErr_SetString(PyExc_UnicodeError,
; 819  :                             "pending buffer overflow");

  00266	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_UnicodeError
  0026d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@KFMEJOOM@pending?5buffer?5overflow?$AA@
  00274	e8 00 00 00 00	 call	 PyErr_SetString
$errorexit$21195:

; 830  : 
; 831  : errorexit:
; 832  :     if (inbuf_tmp != NULL)

  00279	48 85 f6	 test	 rsi, rsi
  0027c	74 08		 je	 SHORT $LN8@encoder_en

; 833  :         PyMem_Del(inbuf_tmp);

  0027e	48 8b ce	 mov	 rcx, rsi
  00281	e8 00 00 00 00	 call	 PyMem_Free
$LN8@encoder_en:

; 834  :     Py_XDECREF(r);

  00286	48 85 ff	 test	 rdi, rdi
  00289	0f 84 e9 fd ff
	ff		 je	 $LN7@encoder_en
  0028f	e8 00 00 00 00	 call	 _Py_PXCTX
  00294	85 c0		 test	 eax, eax
  00296	0f 85 dc fd ff
	ff		 jne	 $LN7@encoder_en
  0029c	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  002a0	a8 20		 test	 al, 32			; 00000020H
  002a2	75 5a		 jne	 SHORT $LN41@encoder_en
  002a4	84 c0		 test	 al, al
  002a6	78 56		 js	 SHORT $LN41@encoder_en
  002a8	a8 02		 test	 al, 2
  002aa	0f 85 c8 fd ff
	ff		 jne	 $LN7@encoder_en
  002b0	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  002b4	0f 85 be fd ff
	ff		 jne	 $LN7@encoder_en
  002ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  002c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  002c8	4c 8b cf	 mov	 r9, rdi
  002cb	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  002d1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002d9	e8 00 00 00 00	 call	 _PyParallel_Guard
  002de	48 8b cf	 mov	 rcx, rdi
  002e1	85 c0		 test	 eax, eax
  002e3	74 0a		 je	 SHORT $LN46@encoder_en
  002e5	e8 00 00 00 00	 call	 _Px_Dealloc
  002ea	e9 89 fd ff ff	 jmp	 $LN7@encoder_en
$LN46@encoder_en:
  002ef	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  002f3	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  002f9	e9 7a fd ff ff	 jmp	 $LN7@encoder_en
$LN41@encoder_en:
  002fe	48 8b cf	 mov	 rcx, rdi
  00301	e8 00 00 00 00	 call	 Px_DecRef
  00306	e9 6d fd ff ff	 jmp	 $LN7@encoder_en
$LN15@encoder_en:

; 820  :             goto errorexit;
; 821  :         }
; 822  :         memcpy(ctx->pending, inbuf,
; 823  :             ctx->pendingsize * Py_UNICODE_SIZE);

  0030b	4f 8d 04 24	 lea	 r8, QWORD PTR [r12+r12]
  0030f	48 8d 4d 78	 lea	 rcx, QWORD PTR [rbp+120]
  00313	e8 00 00 00 00	 call	 memcpy
$LN16@encoder_en:

; 824  :     }
; 825  : 
; 826  :     if (inbuf_tmp != NULL)

  00318	48 85 f6	 test	 rsi, rsi
  0031b	74 08		 je	 SHORT $LN13@encoder_en

; 827  :         PyMem_Del(inbuf_tmp);

  0031d	48 8b ce	 mov	 rcx, rsi
  00320	e8 00 00 00 00	 call	 PyMem_Free
$LN13@encoder_en:

; 828  :     Py_XDECREF(ucvt);

  00325	48 85 db	 test	 rbx, rbx
  00328	74 08		 je	 SHORT $LN12@encoder_en
  0032a	48 8b cb	 mov	 rcx, rbx
  0032d	e8 00 00 00 00	 call	 _Py_DecRef
$LN12@encoder_en:

; 829  :     return r;

  00332	48 8b c7	 mov	 rax, rdi
  00335	eb 16		 jmp	 SHORT $LN60@encoder_en

; 835  :     Py_XDECREF(ucvt);

$LN57@encoder_en:
  00337	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0033b	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00341	eb 08		 jmp	 SHORT $LN3@encoder_en
$LN52@encoder_en:
  00343	48 8b cb	 mov	 rcx, rbx
  00346	e8 00 00 00 00	 call	 Px_DecRef
$LN3@encoder_en:

; 836  :     return NULL;

  0034b	33 c0		 xor	 eax, eax
$LN60@encoder_en:
  0034d	4c 8b 64 24 60	 mov	 r12, QWORD PTR [rsp+96]
  00352	4c 8b 6c 24 70	 mov	 r13, QWORD PTR [rsp+112]

; 837  : }

  00357	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0035b	41 5e		 pop	 r14
  0035d	5f		 pop	 rdi
  0035e	5e		 pop	 rsi
  0035f	5d		 pop	 rbp
  00360	5b		 pop	 rbx
  00361	c3		 ret	 0
encoder_encode_stateful ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$decoder_append_pending DD imagerel decoder_append_pending
	DD	imagerel decoder_append_pending+127
	DD	imagerel $unwind$decoder_append_pending
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$decoder_append_pending DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT decoder_append_pending
_TEXT	SEGMENT
ctx$ = 48
buf$ = 56
decoder_append_pending PROC				; COMDAT

; 842  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 843  :     Py_ssize_t npendings;
; 844  : 
; 845  :     npendings = (Py_ssize_t)(buf->inbuf_end - buf->inbuf);

  0000a	4c 8b 0a	 mov	 r9, QWORD PTR [rdx]
  0000d	48 8b 5a 10	 mov	 rbx, QWORD PTR [rdx+16]
  00011	48 8b f9	 mov	 rdi, rcx

; 846  :     if (npendings + ctx->pendingsize > MAXDECPENDING ||
; 847  :         npendings > PY_SSIZE_T_MAX - ctx->pendingsize) {

  00014	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  0001b	49 2b d9	 sub	 rbx, r9
  0001e	48 8d 04 19	 lea	 rax, QWORD PTR [rcx+rbx]
  00022	48 83 f8 08	 cmp	 rax, 8
  00026	7f 36		 jg	 SHORT $LN1@decoder_ap
  00028	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  00032	48 2b c1	 sub	 rax, rcx
  00035	48 3b d8	 cmp	 rbx, rax
  00038	7f 24		 jg	 SHORT $LN1@decoder_ap

; 849  :             return -1;
; 850  :     }
; 851  :     memcpy(ctx->pending + ctx->pendingsize, buf->inbuf, npendings);

  0003a	48 8d 4c 39 78	 lea	 rcx, QWORD PTR [rcx+rdi+120]
  0003f	4c 8b c3	 mov	 r8, rbx
  00042	49 8b d1	 mov	 rdx, r9
  00045	e8 00 00 00 00	 call	 memcpy

; 852  :     ctx->pendingsize += npendings;

  0004a	48 01 9f 80 00
	00 00		 add	 QWORD PTR [rdi+128], rbx

; 853  :     return 0;

  00051	33 c0		 xor	 eax, eax

; 854  : }

  00053	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00058	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005c	5f		 pop	 rdi
  0005d	c3		 ret	 0
$LN1@decoder_ap:

; 848  :             PyErr_SetString(PyExc_UnicodeError, "pending buffer overflow");

  0005e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_UnicodeError
  00065	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@KFMEJOOM@pending?5buffer?5overflow?$AA@
  0006c	e8 00 00 00 00	 call	 PyErr_SetString

; 854  : }

  00071	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00076	83 c8 ff	 or	 eax, -1
  00079	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007d	5f		 pop	 rdi
  0007e	c3		 ret	 0
decoder_append_pending ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$decoder_prepare_buffer DD imagerel decoder_prepare_buffer
	DD	imagerel decoder_prepare_buffer+166
	DD	imagerel $unwind$decoder_prepare_buffer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$decoder_prepare_buffer DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT decoder_prepare_buffer
_TEXT	SEGMENT
buf$ = 48
data$ = 56
size$ = 64
decoder_prepare_buffer PROC				; COMDAT

; 859  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 860  :     buf->inbuf = buf->inbuf_top = (const unsigned char *)data;
; 861  :     buf->inbuf_end = buf->inbuf_top + size;
; 862  :     if (buf->outobj == NULL) { /* only if outobj is not allocated yet */

  00006	48 83 79 30 00	 cmp	 QWORD PTR [rcx+48], 0
  0000b	4a 8d 04 02	 lea	 rax, QWORD PTR [rdx+r8]
  0000f	48 8b d9	 mov	 rbx, rcx
  00012	48 89 51 08	 mov	 QWORD PTR [rcx+8], rdx
  00016	48 89 11	 mov	 QWORD PTR [rcx], rdx
  00019	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
  0001d	75 7f		 jne	 SHORT $LN3@decoder_pr

; 863  :         buf->outobj = PyUnicode_FromUnicode(NULL, size);

  0001f	49 8b d0	 mov	 rdx, r8
  00022	33 c9		 xor	 ecx, ecx
  00024	e8 00 00 00 00	 call	 PyUnicode_FromUnicode
  00029	48 89 43 30	 mov	 QWORD PTR [rbx+48], rax

; 864  :         if (buf->outobj == NULL)

  0002d	48 85 c0	 test	 rax, rax
  00030	75 09		 jne	 SHORT $LN2@decoder_pr
$LN12@decoder_pr:

; 865  :             return -1;

  00032	83 c8 ff	 or	 eax, -1

; 874  : }

  00035	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00039	5b		 pop	 rbx
  0003a	c3		 ret	 0
$LN2@decoder_pr:

; 866  :         buf->outbuf = PyUnicode_AsUnicode(buf->outobj);

  0003b	48 8b c8	 mov	 rcx, rax
  0003e	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  00043	48 89 43 18	 mov	 QWORD PTR [rbx+24], rax

; 867  :         if (buf->outbuf == NULL)

  00047	48 85 c0	 test	 rax, rax

; 868  :             return -1;

  0004a	74 e6		 je	 SHORT $LN12@decoder_pr

; 869  :         buf->outbuf_end = buf->outbuf +
; 870  :                           PyUnicode_GET_SIZE(buf->outobj);

  0004c	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  00050	48 83 79 78 00	 cmp	 QWORD PTR [rcx+120], 0
  00055	74 1a		 je	 SHORT $LN10@decoder_pr
  00057	8b 41 70	 mov	 eax, DWORD PTR [rcx+112]
  0005a	a8 40		 test	 al, 64			; 00000040H
  0005c	74 0a		 je	 SHORT $LN6@decoder_pr
  0005e	a8 20		 test	 al, 32			; 00000020H
  00060	74 06		 je	 SHORT $LN6@decoder_pr
  00062	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00066	eb 2a		 jmp	 SHORT $LN9@decoder_pr
$LN6@decoder_pr:
  00068	48 8b 91 90 00
	00 00		 mov	 rdx, QWORD PTR [rcx+144]
  0006f	eb 21		 jmp	 SHORT $LN9@decoder_pr
$LN10@decoder_pr:
  00071	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  00076	48 8b 53 30	 mov	 rdx, QWORD PTR [rbx+48]
  0007a	8b 42 70	 mov	 eax, DWORD PTR [rdx+112]
  0007d	a8 40		 test	 al, 64			; 00000040H
  0007f	74 0a		 je	 SHORT $LN8@decoder_pr
  00081	a8 20		 test	 al, 32			; 00000020H
  00083	74 06		 je	 SHORT $LN8@decoder_pr
  00085	48 8b 52 60	 mov	 rdx, QWORD PTR [rdx+96]
  00089	eb 07		 jmp	 SHORT $LN9@decoder_pr
$LN8@decoder_pr:
  0008b	48 8b 92 90 00
	00 00		 mov	 rdx, QWORD PTR [rdx+144]
$LN9@decoder_pr:
  00092	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00096	48 8d 0c 50	 lea	 rcx, QWORD PTR [rax+rdx*2]
  0009a	48 89 4b 20	 mov	 QWORD PTR [rbx+32], rcx
$LN3@decoder_pr:

; 871  :     }
; 872  : 
; 873  :     return 0;

  0009e	33 c0		 xor	 eax, eax

; 874  : }

  000a0	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a4	5b		 pop	 rbx
  000a5	c3		 ret	 0
decoder_prepare_buffer ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$decoder_feed_buffer DD imagerel decoder_feed_buffer
	DD	imagerel decoder_feed_buffer+167
	DD	imagerel $unwind$decoder_feed_buffer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$decoder_feed_buffer DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT decoder_feed_buffer
_TEXT	SEGMENT
ctx$ = 64
buf$ = 72
decoder_feed_buffer PROC				; COMDAT

; 879  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 880  :     while (buf->inbuf < buf->inbuf_end) {

  00014	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00017	48 8b da	 mov	 rbx, rdx
  0001a	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  0001e	48 8b f9	 mov	 rdi, rcx
  00021	48 3b c2	 cmp	 rax, rdx
  00024	73 65		 jae	 SHORT $LN3@decoder_fe
  00026	48 8d 73 18	 lea	 rsi, QWORD PTR [rbx+24]
  0002a	66 0f 1f 44 00
	00		 npad	 6
$LL6@decoder_fe:

; 881  :         Py_ssize_t inleft, outleft;
; 882  :         Py_ssize_t r;
; 883  : 
; 884  :         inleft = (Py_ssize_t)(buf->inbuf_end - buf->inbuf);
; 885  :         outleft = (Py_ssize_t)(buf->outbuf_end - buf->outbuf);
; 886  : 
; 887  :         r = ctx->codec->decode(&ctx->state, ctx->codec->config,
; 888  :             &buf->inbuf, inleft, &buf->outbuf, outleft);

  00030	4c 8b 57 60	 mov	 r10, QWORD PTR [rdi+96]
  00034	48 2b d0	 sub	 rdx, rax
  00037	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0003b	48 2b 06	 sub	 rax, QWORD PTR [rsi]
  0003e	4c 8b ca	 mov	 r9, rdx
  00041	49 8b 52 08	 mov	 rdx, QWORD PTR [r10+8]
  00045	48 d1 f8	 sar	 rax, 1
  00048	48 8d 4f 68	 lea	 rcx, QWORD PTR [rdi+104]
  0004c	4c 8b c3	 mov	 r8, rbx
  0004f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00054	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  00059	41 ff 52 30	 call	 QWORD PTR [r10+48]

; 889  :         if (r == 0 || r == MBERR_TOOFEW)

  0005d	48 85 c0	 test	 rax, rax
  00060	74 29		 je	 SHORT $LN3@decoder_fe
  00062	48 83 f8 fe	 cmp	 rax, -2
  00066	74 23		 je	 SHORT $LN3@decoder_fe

; 890  :             break;
; 891  :         else if (multibytecodec_decerror(ctx->codec, &ctx->state,
; 892  :                                          buf, ctx->errors, r))

  00068	4c 8b 47 70	 mov	 r8, QWORD PTR [rdi+112]
  0006c	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  00070	4c 8b c8	 mov	 r9, rax
  00073	48 8b d3	 mov	 rdx, rbx
  00076	e8 00 00 00 00	 call	 multibytecodec_decerror
  0007b	85 c0		 test	 eax, eax
  0007d	75 23		 jne	 SHORT $LN11@decoder_fe

; 880  :     while (buf->inbuf < buf->inbuf_end) {

  0007f	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00082	48 8b 53 10	 mov	 rdx, QWORD PTR [rbx+16]
  00086	48 3b c2	 cmp	 rax, rdx
  00089	72 a5		 jb	 SHORT $LL6@decoder_fe
$LN3@decoder_fe:

; 894  :     }
; 895  :     return 0;

  0008b	33 c0		 xor	 eax, eax
$LN7@decoder_fe:

; 896  : }

  0008d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00092	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00097	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  0009c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a0	5f		 pop	 rdi
  000a1	c3		 ret	 0
$LN11@decoder_fe:

; 893  :             return -1;

  000a2	83 c8 ff	 or	 eax, -1
  000a5	eb e6		 jmp	 SHORT $LN7@decoder_fe
decoder_feed_buffer ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@NIIDKFNI@O?$HMi?3encode?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbiencoder_encode DD imagerel mbiencoder_encode
	DD	imagerel mbiencoder_encode+104
	DD	imagerel $unwind$mbiencoder_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbiencoder_encode DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT ??_C@_0L@NIIDKFNI@O?$HMi?3encode?$AA@
CONST	SEGMENT
??_C@_0L@NIIDKFNI@O?$HMi?3encode?$AA@ DB 'O|i:encode', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mbiencoder_encode
_TEXT	SEGMENT
data$ = 48
self$ = 80
args$ = 88
kwargs$ = 96
final$ = 104
mbiencoder_encode PROC					; COMDAT

; 906  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00006	48 8b d9	 mov	 rbx, rcx
  00009	49 8b c0	 mov	 rax, r8
  0000c	4c 8b d2	 mov	 r10, rdx

; 907  :     PyObject *data;
; 908  :     int final = 0;
; 909  : 
; 910  :     if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|i:encode",
; 911  :                     incrementalkwarglist, &data, &final))

  0000f	48 8d 4c 24 68	 lea	 rcx, QWORD PTR final$[rsp]
  00014	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:incrementalkwarglist
  0001b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@NIIDKFNI@O?$HMi?3encode?$AA@
  00022	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00027	48 8d 4c 24 30	 lea	 rcx, QWORD PTR data$[rsp]
  0002c	48 8b d0	 mov	 rdx, rax
  0002f	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00034	49 8b ca	 mov	 rcx, r10
  00037	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR final$[rsp], 0
  0003f	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  00044	85 c0		 test	 eax, eax
  00046	75 08		 jne	 SHORT $LN1@mbiencoder

; 912  :         return NULL;

  00048	33 c0		 xor	 eax, eax

; 915  : }

  0004a	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0004e	5b		 pop	 rbx
  0004f	c3		 ret	 0
$LN1@mbiencoder:

; 913  : 
; 914  :     return encoder_encode_stateful(STATEFUL_ECTX(self), data, final);

  00050	44 8b 44 24 68	 mov	 r8d, DWORD PTR final$[rsp]
  00055	48 8b 54 24 30	 mov	 rdx, QWORD PTR data$[rsp]
  0005a	48 8b cb	 mov	 rcx, rbx
  0005d	e8 00 00 00 00	 call	 encoder_encode_stateful

; 915  : }

  00062	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00066	5b		 pop	 rbx
  00067	c3		 ret	 0
mbiencoder_encode ENDP
_TEXT	ENDS
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$mbiencoder_reset DD imagerel mbiencoder_reset
	DD	imagerel mbiencoder_reset+158
	DD	imagerel $unwind$mbiencoder_reset
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbiencoder_reset DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\cjkcodecs\multibytecodec.c
xdata	ENDS
;	COMDAT mbiencoder_reset
_TEXT	SEGMENT
buffer$ = 64
self$ = 64
outbuf$ = 72
mbiencoder_reset PROC					; COMDAT

; 919  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 920  :     /* Longest output: 4 bytes (b'\x0F\x1F(B') with ISO 2022 */
; 921  :     unsigned char buffer[4], *outbuf;
; 922  :     Py_ssize_t r;
; 923  :     if (self->codec->encreset != NULL) {

  00006	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  00012	74 2d		 je	 SHORT $LN1@mbiencoder@2

; 924  :         outbuf = buffer;

  00014	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buffer$[rsp]

; 925  :         r = self->codec->encreset(&self->state, self->codec->config,
; 926  :                                   &outbuf, sizeof(buffer));

  00019	4c 8d 44 24 48	 lea	 r8, QWORD PTR outbuf$[rsp]
  0001e	41 b9 04 00 00
	00		 mov	 r9d, 4
  00024	48 89 4c 24 48	 mov	 QWORD PTR outbuf$[rsp], rcx
  00029	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0002d	48 8d 4b 68	 lea	 rcx, QWORD PTR [rbx+104]
  00031	ff 50 28	 call	 QWORD PTR [rax+40]

; 927  :         if (r != 0)

  00034	48 85 c0	 test	 rax, rax
  00037	74 08		 je	 SHORT $LN1@mbiencoder@2

; 928  :             return NULL;

  00039	33 c0		 xor	 eax, eax

; 932  : }

  0003b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0003f	5b		 pop	 rbx
  00040	c3		 ret	 0
$LN1@mbiencoder@2:

; 929  :     }
; 930  :     self->pendingsize = 0;

  00041	48 c7 83 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rbx+128], 0

; 931  :     Py_RETURN_NONE;

  0004c	e8 00 00 00 00	 call	 _Py_PXCTX
  00051	85 c0		 test	 eax, eax
  00053	75 3c		 jne	 SHORT $LN6@mbiencoder@2
  00055	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  0005c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00063	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0006a	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00070	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00078	e8 00 00 00 00	 call	 _PyParallel_Guard
  0007d	85 c0		 test	 eax, eax
  0007f	75 09		 jne	 SHORT $LN5@mbiencoder@2
  00081	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00088	74 07		 je	 SHORT $LN6@mbiencoder@2
$LN5@mbiencoder@2:
  0008a	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN6@mbiencoder@2:
  00091	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 932  : }

  00098	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0009c	5b		 pop	 rbx
  0009d	c3		 ret	 0
mbiencoder_reset ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@GBEONPKL@codec?5is?5unexpected?5type?$AA@ ; `string'
PUBLIC	??_C@_05GPLHJCMP@codec?$AA@			; `string'
PUBLIC	??_C@_0BG@CIPFGIMM@?$HMs?3IncrementalEncoder?$AA@ ; `string'
EXTRN	PyObject_GetAttrString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbiencoder_new DD imagerel mbiencoder_new
	DD	imagerel mbiencoder_new+76
	DD	imagerel $unwind$mbiencoder_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$mbiencoder_new DD imagerel mbiencoder_new+76
	DD	imagerel mbiencoder_new+184
	DD	imagerel $chain$0$mbiencoder_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$mbiencoder_new DD imagerel mbiencoder_new+184
	DD	imagerel mbiencoder_new+271
	DD	imagerel $chain$2$mbiencoder_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$mbiencoder_new DD 020021H
	DD	083400H
	DD	imagerel mbiencoder_new
	DD	imagerel mbiencoder_new+76
	DD	imagerel $unwind$mbiencoder_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$mbiencoder_new DD 020521H
	DD	083405H
	DD	imagerel mbiencoder_new
	DD	imagerel mbiencoder_new+76
	DD	imagerel $unwind$mbiencoder_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbiencoder_new DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT ??_C@_0BJ@GBEONPKL@codec?5is?5unexpected?5type?$AA@
CONST	SEGMENT
??_C@_0BJ@GBEONPKL@codec?5is?5unexpected?5type?$AA@ DB 'codec is unexpect'
	DB	'ed type', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05GPLHJCMP@codec?$AA@
CONST	SEGMENT
??_C@_05GPLHJCMP@codec?$AA@ DB 'codec', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@CIPFGIMM@?$HMs?3IncrementalEncoder?$AA@
CONST	SEGMENT
??_C@_0BG@CIPFGIMM@?$HMs?3IncrementalEncoder?$AA@ DB '|s:IncrementalEncod'
	DB	'er', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mbiencoder_new
_TEXT	SEGMENT
type$ = 64
args$ = 72
kwds$ = 80
errors$ = 88
mbiencoder_new PROC					; COMDAT

; 944  : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b f9	 mov	 rdi, rcx
  00009	49 8b c0	 mov	 rax, r8
  0000c	4c 8b d2	 mov	 r10, rdx

; 945  :     MultibyteIncrementalEncoderObject *self;
; 946  :     PyObject *codec = NULL;
; 947  :     char *errors = NULL;
; 948  : 
; 949  :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "|s:IncrementalEncoder",
; 950  :                                      incnewkwarglist, &errors))

  0000f	48 8d 4c 24 58	 lea	 rcx, QWORD PTR errors$[rsp]
  00014	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:incnewkwarglist
  0001b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BG@CIPFGIMM@?$HMs?3IncrementalEncoder?$AA@
  00022	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00027	48 8b d0	 mov	 rdx, rax
  0002a	49 8b ca	 mov	 rcx, r10
  0002d	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0
  00036	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  0003b	85 c0		 test	 eax, eax
  0003d	75 08		 jne	 SHORT $LN14@mbiencoder@3

; 951  :         return NULL;

  0003f	33 c0		 xor	 eax, eax

; 981  : }

  00041	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00045	5f		 pop	 rdi
  00046	c3		 ret	 0
$LN14@mbiencoder@3:

; 952  : 
; 953  :     self = (MultibyteIncrementalEncoderObject *)type->tp_alloc(type, 0);

  00047	33 d2		 xor	 edx, edx
  00049	48 8b cf	 mov	 rcx, rdi
  0004c	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00051	ff 97 88 01 00
	00		 call	 QWORD PTR [rdi+392]
  00057	48 8b d8	 mov	 rbx, rax

; 954  :     if (self == NULL)

  0005a	48 85 c0	 test	 rax, rax

; 955  :         return NULL;

  0005d	74 4c		 je	 SHORT $LN3@mbiencoder@3

; 956  : 
; 957  :     codec = PyObject_GetAttrString((PyObject *)type, "codec");

  0005f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05GPLHJCMP@codec?$AA@
  00066	48 8b cf	 mov	 rcx, rdi
  00069	e8 00 00 00 00	 call	 PyObject_GetAttrString
  0006e	48 8b f8	 mov	 rdi, rax

; 958  :     if (codec == NULL)

  00071	48 85 c0	 test	 rax, rax
  00074	74 20		 je	 SHORT $errorexit$21364

; 959  :         goto errorexit;
; 960  :     if (!MultibyteCodec_Check(codec)) {

  00076	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:MultibyteCodec_Type
  0007d	48 39 47 58	 cmp	 QWORD PTR [rdi+88], rax
  00081	74 35		 je	 SHORT $LN11@mbiencoder@3

; 961  :         PyErr_SetString(PyExc_TypeError, "codec is unexpected type");

  00083	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0008a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GBEONPKL@codec?5is?5unexpected?5type?$AA@
  00091	e8 00 00 00 00	 call	 PyErr_SetString
$errorexit$21364:

; 976  : 
; 977  : errorexit:
; 978  :     Py_XDECREF(self);

  00096	48 8b cb	 mov	 rcx, rbx
  00099	e8 00 00 00 00	 call	 _Py_DecRef

; 979  :     Py_XDECREF(codec);

  0009e	48 85 ff	 test	 rdi, rdi
  000a1	74 08		 je	 SHORT $LN3@mbiencoder@3
  000a3	48 8b cf	 mov	 rcx, rdi
  000a6	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@mbiencoder@3:

; 980  :     return NULL;

  000ab	33 c0		 xor	 eax, eax
  000ad	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 981  : }

  000b2	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b6	5f		 pop	 rdi
  000b7	c3		 ret	 0
$LN11@mbiencoder@3:

; 962  :         goto errorexit;
; 963  :     }
; 964  : 
; 965  :     self->codec = ((MultibyteCodecObject *)codec)->codec;

  000b8	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]

; 966  :     self->pendingsize = 0;

  000bc	48 c7 83 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rbx+128], 0
  000c7	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax

; 967  :     self->errors = internal_error_callback(errors);

  000cb	48 8b 4c 24 58	 mov	 rcx, QWORD PTR errors$[rsp]
  000d0	e8 00 00 00 00	 call	 internal_error_callback
  000d5	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax

; 968  :     if (self->errors == NULL)

  000d9	48 85 c0	 test	 rax, rax
  000dc	74 b8		 je	 SHORT $errorexit$21364

; 969  :         goto errorexit;
; 970  :     if (self->codec->encinit != NULL &&
; 971  :         self->codec->encinit(&self->state, self->codec->config) != 0)

  000de	48 8b 53 60	 mov	 rdx, QWORD PTR [rbx+96]
  000e2	48 8b 42 20	 mov	 rax, QWORD PTR [rdx+32]
  000e6	48 85 c0	 test	 rax, rax
  000e9	74 0e		 je	 SHORT $LN9@mbiencoder@3
  000eb	48 8b 52 08	 mov	 rdx, QWORD PTR [rdx+8]
  000ef	48 8d 4b 68	 lea	 rcx, QWORD PTR [rbx+104]
  000f3	ff d0		 call	 rax
  000f5	85 c0		 test	 eax, eax
  000f7	75 9d		 jne	 SHORT $errorexit$21364
$LN9@mbiencoder@3:

; 972  :         goto errorexit;
; 973  : 
; 974  :     Py_DECREF(codec);

  000f9	48 8b cf	 mov	 rcx, rdi
  000fc	e8 00 00 00 00	 call	 _Py_DecRef

; 975  :     return (PyObject *)self;

  00101	48 8b c3	 mov	 rax, rbx
  00104	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 981  : }

  00109	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0010d	5f		 pop	 rdi
  0010e	c3		 ret	 0
mbiencoder_new ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT mbiencoder_init
_TEXT	SEGMENT
self$ = 8
args$ = 16
kwds$ = 24
mbiencoder_init PROC					; COMDAT

; 986  :     return 0;

  00000	33 c0		 xor	 eax, eax

; 987  : }

  00002	c3		 ret	 0
mbiencoder_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@IDLOODAG@mbiencoder_traverse?$AA@	; `string'
PUBLIC	??_C@_0CG@IEEBIMPD@?4?4?2Modules?2cjkcodecs?2multibyteco@ ; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbiencoder_traverse DD imagerel mbiencoder_traverse
	DD	imagerel mbiencoder_traverse+113
	DD	imagerel $unwind$mbiencoder_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbiencoder_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BE@IDLOODAG@mbiencoder_traverse?$AA@
CONST	SEGMENT
??_C@_0BE@IDLOODAG@mbiencoder_traverse?$AA@ DB 'mbiencoder_traverse', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@IEEBIMPD@?4?4?2Modules?2cjkcodecs?2multibyteco@
CONST	SEGMENT
??_C@_0CG@IEEBIMPD@?4?4?2Modules?2cjkcodecs?2multibyteco@ DB '..\Modules\'
	DB	'cjkcodecs\multibytecodec.c', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mbiencoder_traverse
_TEXT	SEGMENT
self$ = 48
visit$ = 56
arg$ = 64
mbiencoder_traverse PROC				; COMDAT

; 992  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 993  :     if (ERROR_ISCUSTOM(self->errors))

  0000f	48 8b 41 70	 mov	 rax, QWORD PTR [rcx+112]
  00013	49 8b f8	 mov	 rdi, r8
  00016	48 8b f2	 mov	 rsi, rdx
  00019	48 8b d9	 mov	 rbx, rcx
  0001c	48 83 f8 01	 cmp	 rax, 1
  00020	72 06		 jb	 SHORT $LN6@mbiencoder@4
  00022	48 83 f8 03	 cmp	 rax, 3
  00026	76 37		 jbe	 SHORT $LN4@mbiencoder@4
$LN6@mbiencoder@4:

; 994  :         Py_VISIT(self->errors);

  00028	e8 00 00 00 00	 call	 _Py_PXCTX
  0002d	85 c0		 test	 eax, eax
  0002f	74 1c		 je	 SHORT $LN3@mbiencoder@4
  00031	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@IEEBIMPD@?4?4?2Modules?2cjkcodecs?2multibyteco@
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@IDLOODAG@mbiencoder_traverse?$AA@
  0003f	45 33 c9	 xor	 r9d, r9d
  00042	41 b8 e2 03 00
	00		 mov	 r8d, 994		; 000003e2H
  00048	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@mbiencoder@4:
  0004d	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00051	48 85 c9	 test	 rcx, rcx
  00054	74 09		 je	 SHORT $LN4@mbiencoder@4
  00056	48 8b d7	 mov	 rdx, rdi
  00059	ff d6		 call	 rsi
  0005b	85 c0		 test	 eax, eax
  0005d	75 02		 jne	 SHORT $LN9@mbiencoder@4
$LN4@mbiencoder@4:

; 995  :     return 0;

  0005f	33 c0		 xor	 eax, eax
$LN9@mbiencoder@4:

; 996  : }

  00061	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00066	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0006b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006f	5f		 pop	 rdi
  00070	c3		 ret	 0
mbiencoder_traverse ENDP
_TEXT	ENDS
EXTRN	PyObject_GC_UnTrack:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$mbiencoder_dealloc DD imagerel mbiencoder_dealloc
	DD	imagerel mbiencoder_dealloc+164
	DD	imagerel $unwind$mbiencoder_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbiencoder_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\cjkcodecs\multibytecodec.c
xdata	ENDS
;	COMDAT mbiencoder_dealloc
_TEXT	SEGMENT
self$ = 64
mbiencoder_dealloc PROC					; COMDAT

; 1000 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 1001 :     PyObject_GC_UnTrack(self);

  0000d	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 1002 :     ERROR_DECREF(self->errors);

  00012	48 8b 5f 70	 mov	 rbx, QWORD PTR [rdi+112]
  00016	48 85 db	 test	 rbx, rbx
  00019	74 71		 je	 SHORT $LN4@mbiencoder@5
  0001b	48 83 fb 01	 cmp	 rbx, 1
  0001f	72 06		 jb	 SHORT $LN1@mbiencoder@5
  00021	48 83 fb 03	 cmp	 rbx, 3
  00025	76 65		 jbe	 SHORT $LN4@mbiencoder@5
$LN1@mbiencoder@5:
  00027	e8 00 00 00 00	 call	 _Py_PXCTX
  0002c	85 c0		 test	 eax, eax
  0002e	75 5c		 jne	 SHORT $LN4@mbiencoder@5
  00030	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00034	a8 20		 test	 al, 32			; 00000020H
  00036	75 4c		 jne	 SHORT $LN12@mbiencoder@5
  00038	84 c0		 test	 al, al
  0003a	78 48		 js	 SHORT $LN12@mbiencoder@5
  0003c	a8 02		 test	 al, 2
  0003e	75 4c		 jne	 SHORT $LN4@mbiencoder@5
  00040	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00044	75 46		 jne	 SHORT $LN4@mbiencoder@5
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00054	4c 8b cb	 mov	 r9, rbx
  00057	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0005d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00065	e8 00 00 00 00	 call	 _PyParallel_Guard
  0006a	48 8b cb	 mov	 rcx, rbx
  0006d	85 c0		 test	 eax, eax
  0006f	74 07		 je	 SHORT $LN17@mbiencoder@5
  00071	e8 00 00 00 00	 call	 _Px_Dealloc
  00076	eb 14		 jmp	 SHORT $LN4@mbiencoder@5
$LN17@mbiencoder@5:
  00078	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0007c	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00082	eb 08		 jmp	 SHORT $LN4@mbiencoder@5
$LN12@mbiencoder@5:
  00084	48 8b cb	 mov	 rcx, rbx
  00087	e8 00 00 00 00	 call	 Px_DecRef
$LN4@mbiencoder@5:

; 1003 :     Py_TYPE(self)->tp_free(self);

  0008c	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00090	48 8b cf	 mov	 rcx, rdi

; 1004 : }

  00093	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00098	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0009c	5f		 pop	 rdi
  0009d	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
mbiencoder_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@JMABKIDD@y?$CK?$HMi?3decode?$AA@	; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$mbidecoder_decode DD imagerel mbidecoder_decode
	DD	imagerel mbidecoder_decode+908
	DD	imagerel $unwind$mbidecoder_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbidecoder_decode DD 0e9201H
	DD	018e492H
	DD	020d486H
	DD	01fc47aH
	DD	01e646bH
	DD	0190112H
	DD	07004f006H
	DD	050023003H
xdata	ENDS
;	COMDAT ??_C@_0M@JMABKIDD@y?$CK?$HMi?3decode?$AA@
CONST	SEGMENT
??_C@_0M@JMABKIDD@y?$CK?$HMi?3decode?$AA@ DB 'y*|i:decode', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\cjkcodecs\multibytecodec.c
CONST	ENDS
;	COMDAT mbidecoder_decode
_TEXT	SEGMENT
buf$ = 48
pdata$ = 112
self$ = 240
args$ = 248
kwargs$ = 256
final$ = 264
mbidecoder_decode PROC					; COMDAT

; 1057 : {

  00000	40 55		 push	 rbp
  00002	53		 push	 rbx
  00003	57		 push	 rdi
  00004	41 57		 push	 r15
  00006	48 8d 6c 24 c1	 lea	 rbp, QWORD PTR [rsp-63]
  0000b	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00012	48 8b f9	 mov	 rdi, rcx
  00015	49 8b c0	 mov	 rax, r8
  00018	4c 8b d2	 mov	 r10, rdx

; 1058 :     MultibyteDecodeBuffer buf;
; 1059 :     char *data, *wdata = NULL;
; 1060 :     Py_buffer pdata;
; 1061 :     Py_ssize_t wsize, finalsize = 0, size, origpending;
; 1062 :     int final = 0;
; 1063 : 
; 1064 :     if (!PyArg_ParseTupleAndKeywords(args, kwargs, "y*|i:decode",
; 1065 :                     incrementalkwarglist, &pdata, &final))

  0001b	48 8d 4d 7f	 lea	 rcx, QWORD PTR final$[rbp-137]
  0001f	45 33 ff	 xor	 r15d, r15d
  00022	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:incrementalkwarglist
  00029	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0002e	48 8d 4d e7	 lea	 rcx, QWORD PTR pdata$[rbp-137]
  00032	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@JMABKIDD@y?$CK?$HMi?3decode?$AA@
  00039	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0003e	48 8b d0	 mov	 rdx, rax
  00041	49 8b ca	 mov	 rcx, r10
  00044	41 8b df	 mov	 ebx, r15d
  00047	44 89 7d 7f	 mov	 DWORD PTR final$[rbp-137], r15d
  0004b	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  00050	85 c0		 test	 eax, eax
  00052	75 0f		 jne	 SHORT $LN27@mbidecoder

; 1066 :         return NULL;

  00054	33 c0		 xor	 eax, eax

; 1130 : }

  00056	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  0005d	41 5f		 pop	 r15
  0005f	5f		 pop	 rdi
  00060	5b		 pop	 rbx
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
$LN27@mbidecoder:
  00063	48 89 b4 24 f0
	00 00 00	 mov	 QWORD PTR [rsp+240], rsi

; 1067 :     data = pdata.buf;
; 1068 :     size = pdata.len;
; 1069 : 
; 1070 :     buf.outobj = buf.excobj = NULL;
; 1071 :     origpending = self->pendingsize;

  0006b	48 8b b7 80 00
	00 00		 mov	 rsi, QWORD PTR [rdi+128]
  00072	4c 89 a4 24 f8
	00 00 00	 mov	 QWORD PTR [rsp+248], r12
  0007a	4c 8b 65 f7	 mov	 r12, QWORD PTR pdata$[rbp-121]
  0007e	4c 89 ac 24 00
	01 00 00	 mov	 QWORD PTR [rsp+256], r13
  00086	4c 8b 6d e7	 mov	 r13, QWORD PTR pdata$[rbp-137]
  0008a	4c 89 b4 24 c0
	00 00 00	 mov	 QWORD PTR [rsp+192], r14
  00092	4c 89 7d cf	 mov	 QWORD PTR buf$[rbp-97], r15
  00096	4c 89 7d d7	 mov	 QWORD PTR buf$[rbp-89], r15

; 1072 : 
; 1073 :     if (self->pendingsize == 0) {

  0009a	48 85 f6	 test	 rsi, rsi
  0009d	75 0b		 jne	 SHORT $LN26@mbidecoder

; 1074 :         wsize = size;

  0009f	4d 8b f4	 mov	 r14, r12

; 1075 :         wdata = data;

  000a2	49 8b dd	 mov	 rbx, r13

; 1076 :     }
; 1077 :     else {

  000a5	e9 f7 00 00 00	 jmp	 $LN25@mbidecoder
$LN26@mbidecoder:

; 1078 :         if (size > PY_SSIZE_T_MAX - self->pendingsize) {

  000aa	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  000b4	48 2b c6	 sub	 rax, rsi
  000b7	4c 3b e0	 cmp	 r12, rax
  000ba	0f 8e 99 00 00
	00		 jle	 $LN24@mbidecoder

; 1079 :             PyErr_NoMemory();

  000c0	e8 00 00 00 00	 call	 PyErr_NoMemory
$errorexit$21474:

; 1122 : 
; 1123 : errorexit:
; 1124 :     PyBuffer_Release(&pdata);

  000c5	48 8d 4d e7	 lea	 rcx, QWORD PTR pdata$[rbp-137]
  000c9	e8 00 00 00 00	 call	 PyBuffer_Release

; 1125 :     if (wdata != NULL && wdata != data)

  000ce	48 85 db	 test	 rbx, rbx
  000d1	74 0d		 je	 SHORT $LN8@mbidecoder
  000d3	49 3b dd	 cmp	 rbx, r13
  000d6	74 08		 je	 SHORT $LN8@mbidecoder

; 1126 :         PyMem_Del(wdata);

  000d8	48 8b cb	 mov	 rcx, rbx
  000db	e8 00 00 00 00	 call	 PyMem_Free
$LN8@mbidecoder:

; 1127 :     Py_XDECREF(buf.excobj);

  000e0	48 8b 5d cf	 mov	 rbx, QWORD PTR buf$[rbp-97]
  000e4	48 85 db	 test	 rbx, rbx
  000e7	0f 84 02 02 00
	00		 je	 $LN7@mbidecoder
  000ed	e8 00 00 00 00	 call	 _Py_PXCTX
  000f2	85 c0		 test	 eax, eax
  000f4	0f 85 f5 01 00
	00		 jne	 $LN7@mbidecoder
  000fa	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000fe	a8 20		 test	 al, 32			; 00000020H
  00100	0f 85 e1 01 00
	00		 jne	 $LN42@mbidecoder
  00106	84 c0		 test	 al, al
  00108	0f 88 d9 01 00
	00		 js	 $LN42@mbidecoder
  0010e	a8 02		 test	 al, 2
  00110	0f 85 d9 01 00
	00		 jne	 $LN7@mbidecoder
  00116	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0011a	0f 85 cf 01 00
	00		 jne	 $LN7@mbidecoder
  00120	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00127	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0012e	4c 8b cb	 mov	 r9, rbx
  00131	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00137	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0013f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00144	48 8b cb	 mov	 rcx, rbx
  00147	85 c0		 test	 eax, eax
  00149	0f 84 8c 01 00
	00		 je	 $LN47@mbidecoder
  0014f	e8 00 00 00 00	 call	 _Px_Dealloc
  00154	e9 96 01 00 00	 jmp	 $LN7@mbidecoder
$LN24@mbidecoder:

; 1080 :             goto errorexit;
; 1081 :         }
; 1082 :         wsize = size + self->pendingsize;

  00159	4e 8d 34 26	 lea	 r14, QWORD PTR [rsi+r12]

; 1083 :         wdata = PyMem_Malloc(wsize);

  0015d	49 8b ce	 mov	 rcx, r14
  00160	e8 00 00 00 00	 call	 PyMem_Malloc
  00165	48 8b d8	 mov	 rbx, rax

; 1084 :         if (wdata == NULL)

  00168	48 85 c0	 test	 rax, rax
  0016b	0f 84 54 ff ff
	ff		 je	 $errorexit$21474

; 1085 :             goto errorexit;
; 1086 :         memcpy(wdata, self->pending, self->pendingsize);

  00171	4c 8b 87 80 00
	00 00		 mov	 r8, QWORD PTR [rdi+128]
  00178	48 8d 57 78	 lea	 rdx, QWORD PTR [rdi+120]
  0017c	48 8b c8	 mov	 rcx, rax
  0017f	e8 00 00 00 00	 call	 memcpy

; 1087 :         memcpy(wdata + self->pendingsize, data, size);

  00184	4c 8b 9f 80 00
	00 00		 mov	 r11, QWORD PTR [rdi+128]
  0018b	4d 8b c4	 mov	 r8, r12
  0018e	4a 8d 0c 1b	 lea	 rcx, QWORD PTR [rbx+r11]
  00192	49 8b d5	 mov	 rdx, r13
  00195	e8 00 00 00 00	 call	 memcpy

; 1088 :         self->pendingsize = 0;

  0019a	4c 89 bf 80 00
	00 00		 mov	 QWORD PTR [rdi+128], r15
$LN25@mbidecoder:

; 1089 :     }
; 1090 : 
; 1091 :     if (decoder_prepare_buffer(&buf, wdata, wsize) != 0)

  001a1	48 8d 4d a7	 lea	 rcx, QWORD PTR buf$[rbp-137]
  001a5	4d 8b c6	 mov	 r8, r14
  001a8	48 8b d3	 mov	 rdx, rbx
  001ab	e8 00 00 00 00	 call	 decoder_prepare_buffer
  001b0	85 c0		 test	 eax, eax
  001b2	0f 85 0d ff ff
	ff		 jne	 $errorexit$21474

; 1092 :         goto errorexit;
; 1093 : 
; 1094 :     if (decoder_feed_buffer(STATEFUL_DCTX(self), &buf))

  001b8	48 8d 55 a7	 lea	 rdx, QWORD PTR buf$[rbp-137]
  001bc	48 8b cf	 mov	 rcx, rdi
  001bf	e8 00 00 00 00	 call	 decoder_feed_buffer
  001c4	85 c0		 test	 eax, eax
  001c6	0f 85 f9 fe ff
	ff		 jne	 $errorexit$21474

; 1095 :         goto errorexit;
; 1096 : 
; 1097 :     if (final && buf.inbuf < buf.inbuf_end) {

  001cc	44 39 7d 7f	 cmp	 DWORD PTR final$[rbp-137], r15d
  001d0	74 41		 je	 SHORT $LN19@mbidecoder
  001d2	48 8b 45 b7	 mov	 rax, QWORD PTR buf$[rbp-121]
  001d6	48 39 45 a7	 cmp	 QWORD PTR buf$[rbp-137], rax
  001da	73 55		 jae	 SHORT $LN17@mbidecoder

; 1098 :         if (multibytecodec_decerror(self->codec, &self->state,
; 1099 :                         &buf, self->errors, MBERR_TOOFEW)) {

  001dc	4c 8b 47 70	 mov	 r8, QWORD PTR [rdi+112]
  001e0	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  001e4	48 8d 55 a7	 lea	 rdx, QWORD PTR buf$[rbp-137]
  001e8	49 c7 c1 fe ff
	ff ff		 mov	 r9, -2
  001ef	e8 00 00 00 00	 call	 multibytecodec_decerror
  001f4	85 c0		 test	 eax, eax
  001f6	74 1b		 je	 SHORT $LN19@mbidecoder

; 1100 :             /* recover the original pending buffer */
; 1101 :             memcpy(self->pending, wdata, origpending);

  001f8	48 8d 4f 78	 lea	 rcx, QWORD PTR [rdi+120]
  001fc	4c 8b c6	 mov	 r8, rsi
  001ff	48 8b d3	 mov	 rdx, rbx
  00202	e8 00 00 00 00	 call	 memcpy

; 1102 :             self->pendingsize = origpending;

  00207	48 89 b7 80 00
	00 00		 mov	 QWORD PTR [rdi+128], rsi

; 1103 :             goto errorexit;

  0020e	e9 b2 fe ff ff	 jmp	 $errorexit$21474
$LN19@mbidecoder:

; 1104 :         }
; 1105 :     }
; 1106 : 
; 1107 :     if (buf.inbuf < buf.inbuf_end) { /* pending sequence still exists */

  00213	48 8b 45 b7	 mov	 rax, QWORD PTR buf$[rbp-121]
  00217	48 39 45 a7	 cmp	 QWORD PTR buf$[rbp-137], rax
  0021b	73 14		 jae	 SHORT $LN17@mbidecoder

; 1108 :         if (decoder_append_pending(STATEFUL_DCTX(self), &buf) != 0)

  0021d	48 8d 55 a7	 lea	 rdx, QWORD PTR buf$[rbp-137]
  00221	48 8b cf	 mov	 rcx, rdi
  00224	e8 00 00 00 00	 call	 decoder_append_pending
  00229	85 c0		 test	 eax, eax
  0022b	0f 85 94 fe ff
	ff		 jne	 $errorexit$21474
$LN17@mbidecoder:

; 1109 :             goto errorexit;
; 1110 :     }
; 1111 : 
; 1112 :     finalsize = (Py_ssize_t)(buf.outbuf - PyUnicode_AS_UNICODE(buf.outobj));

  00231	48 8b 4d d7	 mov	 rcx, QWORD PTR buf$[rbp-89]
  00235	48 8b 41 78	 mov	 rax, QWORD PTR [rcx+120]
  00239	48 85 c0	 test	 rax, rax
  0023c	75 09		 jne	 SHORT $LN31@mbidecoder
  0023e	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  00243	48 8b 4d d7	 mov	 rcx, QWORD PTR buf$[rbp-89]
$LN31@mbidecoder:
  00247	48 8b 7d bf	 mov	 rdi, QWORD PTR buf$[rbp-113]
  0024b	48 2b f8	 sub	 rdi, rax
  0024e	48 d1 ff	 sar	 rdi, 1

; 1113 :     if (finalsize != PyUnicode_GET_SIZE(buf.outobj))

  00251	4c 39 79 78	 cmp	 QWORD PTR [rcx+120], r15
  00255	74 1a		 je	 SHORT $LN36@mbidecoder
  00257	8b 41 70	 mov	 eax, DWORD PTR [rcx+112]
  0025a	a8 40		 test	 al, 64			; 00000040H
  0025c	74 0a		 je	 SHORT $LN32@mbidecoder
  0025e	a8 20		 test	 al, 32			; 00000020H
  00260	74 06		 je	 SHORT $LN32@mbidecoder
  00262	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  00266	eb 2c		 jmp	 SHORT $LN35@mbidecoder
$LN32@mbidecoder:
  00268	48 8b 81 90 00
	00 00		 mov	 rax, QWORD PTR [rcx+144]
  0026f	eb 23		 jmp	 SHORT $LN35@mbidecoder
$LN36@mbidecoder:
  00271	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  00276	48 8b 45 d7	 mov	 rax, QWORD PTR buf$[rbp-89]
  0027a	8b 48 70	 mov	 ecx, DWORD PTR [rax+112]
  0027d	f6 c1 40	 test	 cl, 64			; 00000040H
  00280	74 0b		 je	 SHORT $LN34@mbidecoder
  00282	f6 c1 20	 test	 cl, 32			; 00000020H
  00285	74 06		 je	 SHORT $LN34@mbidecoder
  00287	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0028b	eb 07		 jmp	 SHORT $LN35@mbidecoder
$LN34@mbidecoder:
  0028d	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
$LN35@mbidecoder:
  00294	48 3b f8	 cmp	 rdi, rax
  00297	74 15		 je	 SHORT $LN15@mbidecoder

; 1114 :         if (PyUnicode_Resize(&buf.outobj, finalsize) == -1)

  00299	48 8d 4d d7	 lea	 rcx, QWORD PTR buf$[rbp-89]
  0029d	48 8b d7	 mov	 rdx, rdi
  002a0	e8 00 00 00 00	 call	 PyUnicode_Resize
  002a5	83 f8 ff	 cmp	 eax, -1
  002a8	0f 84 17 fe ff
	ff		 je	 $errorexit$21474
$LN15@mbidecoder:

; 1115 :             goto errorexit;
; 1116 : 
; 1117 :     PyBuffer_Release(&pdata);

  002ae	48 8d 4d e7	 lea	 rcx, QWORD PTR pdata$[rbp-137]
  002b2	e8 00 00 00 00	 call	 PyBuffer_Release

; 1118 :     if (wdata != data)

  002b7	49 3b dd	 cmp	 rbx, r13
  002ba	74 08		 je	 SHORT $LN13@mbidecoder

; 1119 :         PyMem_Del(wdata);

  002bc	48 8b cb	 mov	 rcx, rbx
  002bf	e8 00 00 00 00	 call	 PyMem_Free
$LN13@mbidecoder:

; 1120 :     Py_XDECREF(buf.excobj);

  002c4	48 8b 4d cf	 mov	 rcx, QWORD PTR buf$[rbp-97]
  002c8	48 85 c9	 test	 rcx, rcx
  002cb	74 05		 je	 SHORT $LN12@mbidecoder
  002cd	e8 00 00 00 00	 call	 _Py_DecRef
$LN12@mbidecoder:

; 1121 :     return buf.outobj;

  002d2	48 8b 45 d7	 mov	 rax, QWORD PTR buf$[rbp-89]
  002d6	e9 84 00 00 00	 jmp	 $LN63@mbidecoder

; 1127 :     Py_XDECREF(buf.excobj);

$LN47@mbidecoder:
  002db	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  002df	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  002e5	eb 08		 jmp	 SHORT $LN7@mbidecoder
$LN42@mbidecoder:
  002e7	48 8b cb	 mov	 rcx, rbx
  002ea	e8 00 00 00 00	 call	 Px_DecRef
$LN7@mbidecoder:

; 1128 :     Py_XDECREF(buf.outobj);

  002ef	48 8b 5d d7	 mov	 rbx, QWORD PTR buf$[rbp-89]
  002f3	48 85 db	 test	 rbx, rbx
  002f6	74 65		 je	 SHORT $LN3@mbidecoder
  002f8	e8 00 00 00 00	 call	 _Py_PXCTX
  002fd	85 c0		 test	 eax, eax
  002ff	75 5c		 jne	 SHORT $LN3@mbidecoder
  00301	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00305	a8 20		 test	 al, 32			; 00000020H
  00307	75 4c		 jne	 SHORT $LN53@mbidecoder
  00309	84 c0		 test	 al, al
  0030b	78 48		 js	 SHORT $LN53@mbidecoder
  0030d	a8 02		 test	 al, 2
  0030f	75 4c		 jne	 SHORT $LN3@mbidecoder
  00311	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00315	75 46		 jne	 SHORT $LN3@mbidecoder
  00317	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0031e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00325	4c 8b cb	 mov	 r9, rbx
  00328	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0032e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00336	e8 00 00 00 00	 call	 _PyParallel_Guard
  0033b	48 8b cb	 mov	 rcx, rbx
  0033e	85 c0		 test	 eax, eax
  00340	74 07		 je	 SHORT $LN58@mbidecoder
  00342	e8 00 00 00 00	 call	 _Px_Dealloc
  00347	eb 14		 jmp	 SHORT $LN3@mbidecoder
$LN58@mbidecoder:
  00349	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0034d	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00353	eb 08		 jmp	 SHORT $LN3@mbidecoder
$LN53@mbidecoder:
  00355	48 8b cb	 mov	 rcx, rbx
  00358	e8 00 00 00 00	 call	 Px_DecRef
$LN3@mbidecoder:

; 1129 :     return NULL;

  0035d	33 c0		 xor	 eax, eax
$LN63@mbidecoder:
  0035f	4c 8b ac 24 00
	01 00 00	 mov	 r13, QWORD PTR [rsp+256]
  00367	4c 8b a4 24 f8
	00 00 00	 mov	 r12, QWORD PTR [rsp+248]
  0036f	48 8b b4 24 f0
	00 00 00	 mov	 rsi, QWORD PTR [rsp+240]
  00377	4c 8b b4 24 c0
	00 00 00	 mov	 r14, QWORD PTR [rsp+192]

; 1130 : }

  0037f	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  00386	41 5f		 pop	 r15
  00388	5f		 pop	 rdi
  00389	5b		 pop	 rbx
  0038a	5d		 pop	 rbp
  0038b	c3		 ret	 0
mbidecoder_decode ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$mbidecoder_reset DD imagerel mbidecoder_reset
	DD	imagerel mbidecoder_reset+138
	DD	imagerel $unwind$mbidecoder_reset
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbidecoder_reset DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\cjkcodecs\multibytecodec.c
xdata	ENDS
;	COMDAT mbidecoder_reset
_TEXT	SEGMENT
self$ = 64
mbidecoder_reset PROC					; COMDAT

; 1134 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1135 :     if (self->codec->decreset != NULL &&
; 1136 :         self->codec->decreset(&self->state, self->codec->config) != 0)

  00006	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	48 8b 42 40	 mov	 rax, QWORD PTR [rdx+64]
  00011	48 85 c0	 test	 rax, rax
  00014	74 17		 je	 SHORT $LN1@mbidecoder@2
  00016	48 8b 52 08	 mov	 rdx, QWORD PTR [rdx+8]
  0001a	48 83 c1 68	 add	 rcx, 104		; 00000068H
  0001e	ff d0		 call	 rax
  00020	48 85 c0	 test	 rax, rax
  00023	74 08		 je	 SHORT $LN1@mbidecoder@2

; 1137 :         return NULL;

  00025	33 c0		 xor	 eax, eax

; 1141 : }

  00027	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0002b	5b		 pop	 rbx
  0002c	c3		 ret	 0
$LN1@mbidecoder@2:

; 1138 :     self->pendingsize = 0;

  0002d	48 c7 83 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rbx+128], 0

; 1139 : 
; 1140 :     Py_RETURN_NONE;

  00038	e8 00 00 00 00	 call	 _Py_PXCTX
  0003d	85 c0		 test	 eax, eax
  0003f	75 3c		 jne	 SHORT $LN5@mbidecoder@2
  00041	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00056	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0005c	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00064	e8 00 00 00 00	 call	 _PyParallel_Guard
  00069	85 c0		 test	 eax, eax
  0006b	75 09		 jne	 SHORT $LN4@mbidecoder@2
  0006d	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00074	74 07		 je	 SHORT $LN5@mbidecoder@2
$LN4@mbidecoder@2:
  00076	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN5@mbidecoder@2:
  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1141 : }

  00084	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00088	5b		 pop	 rbx
  00089	c3		 ret	 0
mbidecoder_reset ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@OGFIDMKI@?$HMs?3IncrementalDecoder?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbidecoder_new DD imagerel mbidecoder_new
	DD	imagerel mbidecoder_new+76
	DD	imagerel $unwind$mbidecoder_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$mbidecoder_new DD imagerel mbidecoder_new+76
	DD	imagerel mbidecoder_new+184
	DD	imagerel $chain$0$mbidecoder_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$mbidecoder_new DD imagerel mbidecoder_new+184
	DD	imagerel mbidecoder_new+271
	DD	imagerel $chain$2$mbidecoder_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$mbidecoder_new DD 020021H
	DD	083400H
	DD	imagerel mbidecoder_new
	DD	imagerel mbidecoder_new+76
	DD	imagerel $unwind$mbidecoder_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$mbidecoder_new DD 020521H
	DD	083405H
	DD	imagerel mbidecoder_new
	DD	imagerel mbidecoder_new+76
	DD	imagerel $unwind$mbidecoder_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbidecoder_new DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT ??_C@_0BG@OGFIDMKI@?$HMs?3IncrementalDecoder?$AA@
CONST	SEGMENT
??_C@_0BG@OGFIDMKI@?$HMs?3IncrementalDecoder?$AA@ DB '|s:IncrementalDecod'
	DB	'er', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mbidecoder_new
_TEXT	SEGMENT
type$ = 64
args$ = 72
kwds$ = 80
errors$ = 88
mbidecoder_new PROC					; COMDAT

; 1153 : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b f9	 mov	 rdi, rcx
  00009	49 8b c0	 mov	 rax, r8
  0000c	4c 8b d2	 mov	 r10, rdx

; 1154 :     MultibyteIncrementalDecoderObject *self;
; 1155 :     PyObject *codec = NULL;
; 1156 :     char *errors = NULL;
; 1157 : 
; 1158 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "|s:IncrementalDecoder",
; 1159 :                                      incnewkwarglist, &errors))

  0000f	48 8d 4c 24 58	 lea	 rcx, QWORD PTR errors$[rsp]
  00014	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:incnewkwarglist
  0001b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BG@OGFIDMKI@?$HMs?3IncrementalDecoder?$AA@
  00022	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00027	48 8b d0	 mov	 rdx, rax
  0002a	49 8b ca	 mov	 rcx, r10
  0002d	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0
  00036	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  0003b	85 c0		 test	 eax, eax
  0003d	75 08		 jne	 SHORT $LN14@mbidecoder@3

; 1160 :         return NULL;

  0003f	33 c0		 xor	 eax, eax

; 1190 : }

  00041	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00045	5f		 pop	 rdi
  00046	c3		 ret	 0
$LN14@mbidecoder@3:

; 1161 : 
; 1162 :     self = (MultibyteIncrementalDecoderObject *)type->tp_alloc(type, 0);

  00047	33 d2		 xor	 edx, edx
  00049	48 8b cf	 mov	 rcx, rdi
  0004c	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00051	ff 97 88 01 00
	00		 call	 QWORD PTR [rdi+392]
  00057	48 8b d8	 mov	 rbx, rax

; 1163 :     if (self == NULL)

  0005a	48 85 c0	 test	 rax, rax

; 1164 :         return NULL;

  0005d	74 4c		 je	 SHORT $LN3@mbidecoder@3

; 1165 : 
; 1166 :     codec = PyObject_GetAttrString((PyObject *)type, "codec");

  0005f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05GPLHJCMP@codec?$AA@
  00066	48 8b cf	 mov	 rcx, rdi
  00069	e8 00 00 00 00	 call	 PyObject_GetAttrString
  0006e	48 8b f8	 mov	 rdi, rax

; 1167 :     if (codec == NULL)

  00071	48 85 c0	 test	 rax, rax
  00074	74 20		 je	 SHORT $errorexit$21562

; 1168 :         goto errorexit;
; 1169 :     if (!MultibyteCodec_Check(codec)) {

  00076	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:MultibyteCodec_Type
  0007d	48 39 47 58	 cmp	 QWORD PTR [rdi+88], rax
  00081	74 35		 je	 SHORT $LN11@mbidecoder@3

; 1170 :         PyErr_SetString(PyExc_TypeError, "codec is unexpected type");

  00083	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0008a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GBEONPKL@codec?5is?5unexpected?5type?$AA@
  00091	e8 00 00 00 00	 call	 PyErr_SetString
$errorexit$21562:

; 1185 : 
; 1186 : errorexit:
; 1187 :     Py_XDECREF(self);

  00096	48 8b cb	 mov	 rcx, rbx
  00099	e8 00 00 00 00	 call	 _Py_DecRef

; 1188 :     Py_XDECREF(codec);

  0009e	48 85 ff	 test	 rdi, rdi
  000a1	74 08		 je	 SHORT $LN3@mbidecoder@3
  000a3	48 8b cf	 mov	 rcx, rdi
  000a6	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@mbidecoder@3:

; 1189 :     return NULL;

  000ab	33 c0		 xor	 eax, eax
  000ad	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 1190 : }

  000b2	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b6	5f		 pop	 rdi
  000b7	c3		 ret	 0
$LN11@mbidecoder@3:

; 1171 :         goto errorexit;
; 1172 :     }
; 1173 : 
; 1174 :     self->codec = ((MultibyteCodecObject *)codec)->codec;

  000b8	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]

; 1175 :     self->pendingsize = 0;

  000bc	48 c7 83 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rbx+128], 0
  000c7	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax

; 1176 :     self->errors = internal_error_callback(errors);

  000cb	48 8b 4c 24 58	 mov	 rcx, QWORD PTR errors$[rsp]
  000d0	e8 00 00 00 00	 call	 internal_error_callback
  000d5	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax

; 1177 :     if (self->errors == NULL)

  000d9	48 85 c0	 test	 rax, rax
  000dc	74 b8		 je	 SHORT $errorexit$21562

; 1178 :         goto errorexit;
; 1179 :     if (self->codec->decinit != NULL &&
; 1180 :         self->codec->decinit(&self->state, self->codec->config) != 0)

  000de	48 8b 53 60	 mov	 rdx, QWORD PTR [rbx+96]
  000e2	48 8b 42 38	 mov	 rax, QWORD PTR [rdx+56]
  000e6	48 85 c0	 test	 rax, rax
  000e9	74 0e		 je	 SHORT $LN9@mbidecoder@3
  000eb	48 8b 52 08	 mov	 rdx, QWORD PTR [rdx+8]
  000ef	48 8d 4b 68	 lea	 rcx, QWORD PTR [rbx+104]
  000f3	ff d0		 call	 rax
  000f5	85 c0		 test	 eax, eax
  000f7	75 9d		 jne	 SHORT $errorexit$21562
$LN9@mbidecoder@3:

; 1181 :         goto errorexit;
; 1182 : 
; 1183 :     Py_DECREF(codec);

  000f9	48 8b cf	 mov	 rcx, rdi
  000fc	e8 00 00 00 00	 call	 _Py_DecRef

; 1184 :     return (PyObject *)self;

  00101	48 8b c3	 mov	 rax, rbx
  00104	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 1190 : }

  00109	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0010d	5f		 pop	 rdi
  0010e	c3		 ret	 0
mbidecoder_new ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT mbidecoder_init
_TEXT	SEGMENT
self$ = 8
args$ = 16
kwds$ = 24
mbidecoder_init PROC					; COMDAT

; 1195 :     return 0;

  00000	33 c0		 xor	 eax, eax

; 1196 : }

  00002	c3		 ret	 0
mbidecoder_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@FOMDADPI@mbidecoder_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbidecoder_traverse DD imagerel mbidecoder_traverse
	DD	imagerel mbidecoder_traverse+113
	DD	imagerel $unwind$mbidecoder_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbidecoder_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BE@FOMDADPI@mbidecoder_traverse?$AA@
CONST	SEGMENT
??_C@_0BE@FOMDADPI@mbidecoder_traverse?$AA@ DB 'mbidecoder_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mbidecoder_traverse
_TEXT	SEGMENT
self$ = 48
visit$ = 56
arg$ = 64
mbidecoder_traverse PROC				; COMDAT

; 1201 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1202 :     if (ERROR_ISCUSTOM(self->errors))

  0000f	48 8b 41 70	 mov	 rax, QWORD PTR [rcx+112]
  00013	49 8b f8	 mov	 rdi, r8
  00016	48 8b f2	 mov	 rsi, rdx
  00019	48 8b d9	 mov	 rbx, rcx
  0001c	48 83 f8 01	 cmp	 rax, 1
  00020	72 06		 jb	 SHORT $LN6@mbidecoder@4
  00022	48 83 f8 03	 cmp	 rax, 3
  00026	76 37		 jbe	 SHORT $LN4@mbidecoder@4
$LN6@mbidecoder@4:

; 1203 :         Py_VISIT(self->errors);

  00028	e8 00 00 00 00	 call	 _Py_PXCTX
  0002d	85 c0		 test	 eax, eax
  0002f	74 1c		 je	 SHORT $LN3@mbidecoder@4
  00031	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@IEEBIMPD@?4?4?2Modules?2cjkcodecs?2multibyteco@
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@FOMDADPI@mbidecoder_traverse?$AA@
  0003f	45 33 c9	 xor	 r9d, r9d
  00042	41 b8 b3 04 00
	00		 mov	 r8d, 1203		; 000004b3H
  00048	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@mbidecoder@4:
  0004d	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00051	48 85 c9	 test	 rcx, rcx
  00054	74 09		 je	 SHORT $LN4@mbidecoder@4
  00056	48 8b d7	 mov	 rdx, rdi
  00059	ff d6		 call	 rsi
  0005b	85 c0		 test	 eax, eax
  0005d	75 02		 jne	 SHORT $LN9@mbidecoder@4
$LN4@mbidecoder@4:

; 1204 :     return 0;

  0005f	33 c0		 xor	 eax, eax
$LN9@mbidecoder@4:

; 1205 : }

  00061	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00066	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0006b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006f	5f		 pop	 rdi
  00070	c3		 ret	 0
mbidecoder_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$mbidecoder_dealloc DD imagerel mbidecoder_dealloc
	DD	imagerel mbidecoder_dealloc+164
	DD	imagerel $unwind$mbidecoder_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbidecoder_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\cjkcodecs\multibytecodec.c
xdata	ENDS
;	COMDAT mbidecoder_dealloc
_TEXT	SEGMENT
self$ = 64
mbidecoder_dealloc PROC					; COMDAT

; 1209 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 1210 :     PyObject_GC_UnTrack(self);

  0000d	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 1211 :     ERROR_DECREF(self->errors);

  00012	48 8b 5f 70	 mov	 rbx, QWORD PTR [rdi+112]
  00016	48 85 db	 test	 rbx, rbx
  00019	74 71		 je	 SHORT $LN4@mbidecoder@5
  0001b	48 83 fb 01	 cmp	 rbx, 1
  0001f	72 06		 jb	 SHORT $LN1@mbidecoder@5
  00021	48 83 fb 03	 cmp	 rbx, 3
  00025	76 65		 jbe	 SHORT $LN4@mbidecoder@5
$LN1@mbidecoder@5:
  00027	e8 00 00 00 00	 call	 _Py_PXCTX
  0002c	85 c0		 test	 eax, eax
  0002e	75 5c		 jne	 SHORT $LN4@mbidecoder@5
  00030	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00034	a8 20		 test	 al, 32			; 00000020H
  00036	75 4c		 jne	 SHORT $LN12@mbidecoder@5
  00038	84 c0		 test	 al, al
  0003a	78 48		 js	 SHORT $LN12@mbidecoder@5
  0003c	a8 02		 test	 al, 2
  0003e	75 4c		 jne	 SHORT $LN4@mbidecoder@5
  00040	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00044	75 46		 jne	 SHORT $LN4@mbidecoder@5
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00054	4c 8b cb	 mov	 r9, rbx
  00057	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0005d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00065	e8 00 00 00 00	 call	 _PyParallel_Guard
  0006a	48 8b cb	 mov	 rcx, rbx
  0006d	85 c0		 test	 eax, eax
  0006f	74 07		 je	 SHORT $LN17@mbidecoder@5
  00071	e8 00 00 00 00	 call	 _Px_Dealloc
  00076	eb 14		 jmp	 SHORT $LN4@mbidecoder@5
$LN17@mbidecoder@5:
  00078	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0007c	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00082	eb 08		 jmp	 SHORT $LN4@mbidecoder@5
$LN12@mbidecoder@5:
  00084	48 8b cb	 mov	 rcx, rbx
  00087	e8 00 00 00 00	 call	 Px_DecRef
$LN4@mbidecoder@5:

; 1212 :     Py_TYPE(self)->tp_free(self);

  0008c	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00090	48 8b cf	 mov	 rcx, rdi

; 1213 : }

  00093	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00098	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0009c	5f		 pop	 rdi
  0009d	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
mbidecoder_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DF@CIOCGHOM@stream?5function?5returned?5a?5non?9b@ ; `string'
PUBLIC	??_C@_01KBJDNOO@i?$AA@				; `string'
EXTRN	_PyObject_CallMethod_SizeT:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$mbstreamreader_iread DD imagerel mbstreamreader_iread
	DD	imagerel mbstreamreader_iread+917
	DD	imagerel $unwind$mbstreamreader_iread
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbstreamreader_iread DD 0e5601H
	DD	0fd456H
	DD	0155451H
	DD	0ef446H
	DD	0167441H
	DD	0143439H
	DD	0e006f20dH
	DD	06002c004H
xdata	ENDS
;	COMDAT ??_C@_0DF@CIOCGHOM@stream?5function?5returned?5a?5non?9b@
CONST	SEGMENT
??_C@_0DF@CIOCGHOM@stream?5function?5returned?5a?5non?9b@ DB 'stream func'
	DB	'tion returned a non-bytes object (%.100s)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KBJDNOO@i?$AA@
CONST	SEGMENT
??_C@_01KBJDNOO@i?$AA@ DB 'i', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\cjkcodecs\multibytecodec.c
CONST	ENDS
;	COMDAT mbstreamreader_iread
_TEXT	SEGMENT
buf$ = 48
self$ = 160
method$ = 168
sizehint$ = 176
mbstreamreader_iread PROC				; COMDAT

; 1266 : {

  00000	40 56		 push	 rsi
  00002	41 54		 push	 r12
  00004	41 56		 push	 r14
  00006	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  0000d	4d 8b e0	 mov	 r12, r8
  00010	4c 8b f2	 mov	 r14, rdx
  00013	48 8b f1	 mov	 rsi, rcx

; 1267 :     MultibyteDecodeBuffer buf;
; 1268 :     PyObject *cres;
; 1269 :     Py_ssize_t rsize, finalsize = 0;
; 1270 : 
; 1271 :     if (sizehint == 0)

  00016	4d 85 c0	 test	 r8, r8
  00019	75 16		 jne	 SHORT $LN41@mbstreamre

; 1272 :         return PyUnicode_New(0, 0);

  0001b	33 d2		 xor	 edx, edx
  0001d	33 c9		 xor	 ecx, ecx
  0001f	e8 00 00 00 00	 call	 PyUnicode_New

; 1367 : }

  00024	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  0002b	41 5e		 pop	 r14
  0002d	41 5c		 pop	 r12
  0002f	5e		 pop	 rsi
  00030	c3		 ret	 0
$LN41@mbstreamre:
  00031	48 89 9c 24 a0
	00 00 00	 mov	 QWORD PTR [rsp+160], rbx
  00039	48 89 bc 24 b0
	00 00 00	 mov	 QWORD PTR [rsp+176], rdi
  00041	4c 89 7c 24 70	 mov	 QWORD PTR [rsp+112], r15

; 1273 : 
; 1274 :     buf.outobj = buf.excobj = NULL;

  00046	45 33 ff	 xor	 r15d, r15d
  00049	48 89 ac 24 a8
	00 00 00	 mov	 QWORD PTR [rsp+168], rbp
  00051	4c 89 6c 24 78	 mov	 QWORD PTR [rsp+120], r13
  00056	4c 89 7c 24 58	 mov	 QWORD PTR buf$[rsp+40], r15
  0005b	4c 89 7c 24 60	 mov	 QWORD PTR buf$[rsp+48], r15
$LN91@mbstreamre:

; 1275 :     cres = NULL;
; 1276 : 
; 1277 :     for (;;) {
; 1278 :         int endoffile;
; 1279 : 
; 1280 :         if (sizehint < 0)
; 1281 :             cres = PyObject_CallMethod(self->stream,
; 1282 :                             (char *)method, NULL);

  00060	48 8b 8e 88 00
	00 00		 mov	 rcx, QWORD PTR [rsi+136]
  00067	48 bb ff ff ff
	ff ff ff ff 7f	 mov	 rbx, 9223372036854775807 ; 7fffffffffffffffH
  00071	49 8b d6	 mov	 rdx, r14
  00074	4d 85 e4	 test	 r12, r12
  00077	79 0a		 jns	 SHORT $LN38@mbstreamre
  00079	45 33 c0	 xor	 r8d, r8d
  0007c	e8 00 00 00 00	 call	 _PyObject_CallMethod_SizeT

; 1283 :         else

  00081	eb 0f		 jmp	 SHORT $LN90@mbstreamre
$LN38@mbstreamre:

; 1284 :             cres = PyObject_CallMethod(self->stream,
; 1285 :                             (char *)method, "i", sizehint);

  00083	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01KBJDNOO@i?$AA@
  0008a	4d 8b cc	 mov	 r9, r12
  0008d	e8 00 00 00 00	 call	 _PyObject_CallMethod_SizeT
$LN90@mbstreamre:
  00092	48 8b f8	 mov	 rdi, rax

; 1286 :         if (cres == NULL)

  00095	48 85 c0	 test	 rax, rax
  00098	0f 84 a8 02 00
	00		 je	 $LN11@mbstreamre

; 1287 :             goto errorexit;
; 1288 : 
; 1289 :         if (!PyBytes_Check(cres)) {

  0009e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000a2	f7 80 00 01 00
	00 00 00 00 08	 test	 DWORD PTR [rax+256], 134217728 ; 08000000H
  000ac	0f 84 75 02 00
	00		 je	 $LN76@mbstreamre

; 1294 :             goto errorexit;
; 1295 :         }
; 1296 : 
; 1297 :         endoffile = (PyBytes_GET_SIZE(cres) == 0);

  000b2	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]

; 1298 : 
; 1299 :         if (self->pendingsize > 0) {

  000b6	48 8b 96 80 00
	00 00		 mov	 rdx, QWORD PTR [rsi+128]
  000bd	45 8b ef	 mov	 r13d, r15d
  000c0	48 85 c9	 test	 rcx, rcx
  000c3	41 0f 94 c5	 sete	 r13b
  000c7	48 85 d2	 test	 rdx, rdx
  000ca	0f 8e c2 00 00
	00		 jle	 $LN34@mbstreamre

; 1300 :             PyObject *ctr;
; 1301 :             char *ctrdata;
; 1302 : 
; 1303 :             if (PyBytes_GET_SIZE(cres) > PY_SSIZE_T_MAX - self->pendingsize) {

  000d0	48 8b c3	 mov	 rax, rbx
  000d3	48 2b c2	 sub	 rax, rdx
  000d6	48 3b c8	 cmp	 rcx, rax
  000d9	0f 8f dd 01 00
	00		 jg	 $LN77@mbstreamre

; 1306 :         }
; 1307 :                     rsize = PyBytes_GET_SIZE(cres) + self->pendingsize;

  000df	48 03 d1	 add	 rdx, rcx

; 1308 :                     ctr = PyBytes_FromStringAndSize(NULL, rsize);

  000e2	33 c9		 xor	 ecx, ecx
  000e4	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  000e9	48 8b e8	 mov	 rbp, rax

; 1309 :                     if (ctr == NULL)

  000ec	48 85 c0	 test	 rax, rax
  000ef	0f 84 49 02 00
	00		 je	 $errorexit$21670

; 1310 :                             goto errorexit;
; 1311 :                     ctrdata = PyBytes_AS_STRING(ctr);
; 1312 :                     memcpy(ctrdata, self->pending, self->pendingsize);

  000f5	4c 8b 86 80 00
	00 00		 mov	 r8, QWORD PTR [rsi+128]
  000fc	48 8d 58 78	 lea	 rbx, QWORD PTR [rax+120]
  00100	48 8d 56 78	 lea	 rdx, QWORD PTR [rsi+120]
  00104	48 8b cb	 mov	 rcx, rbx
  00107	e8 00 00 00 00	 call	 memcpy

; 1313 :                     memcpy(ctrdata + self->pendingsize,
; 1314 :                             PyBytes_AS_STRING(cres),
; 1315 :                             PyBytes_GET_SIZE(cres));

  0010c	48 8b 8e 80 00
	00 00		 mov	 rcx, QWORD PTR [rsi+128]
  00113	4c 8b 47 60	 mov	 r8, QWORD PTR [rdi+96]
  00117	48 8d 57 78	 lea	 rdx, QWORD PTR [rdi+120]
  0011b	48 03 cb	 add	 rcx, rbx
  0011e	e8 00 00 00 00	 call	 memcpy

; 1316 :                     Py_DECREF(cres);

  00123	e8 00 00 00 00	 call	 _Py_PXCTX
  00128	85 c0		 test	 eax, eax
  0012a	75 5c		 jne	 SHORT $LN62@mbstreamre
  0012c	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00130	a8 20		 test	 al, 32			; 00000020H
  00132	75 4c		 jne	 SHORT $LN56@mbstreamre
  00134	84 c0		 test	 al, al
  00136	78 48		 js	 SHORT $LN56@mbstreamre
  00138	a8 02		 test	 al, 2
  0013a	75 4c		 jne	 SHORT $LN62@mbstreamre
  0013c	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00140	75 46		 jne	 SHORT $LN62@mbstreamre
  00142	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00149	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00150	4c 8b cf	 mov	 r9, rdi
  00153	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00159	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00161	e8 00 00 00 00	 call	 _PyParallel_Guard
  00166	48 8b cf	 mov	 rcx, rdi
  00169	85 c0		 test	 eax, eax
  0016b	74 07		 je	 SHORT $LN61@mbstreamre
  0016d	e8 00 00 00 00	 call	 _Px_Dealloc
  00172	eb 14		 jmp	 SHORT $LN62@mbstreamre
$LN61@mbstreamre:
  00174	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00178	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0017e	eb 08		 jmp	 SHORT $LN62@mbstreamre
$LN56@mbstreamre:
  00180	48 8b cf	 mov	 rcx, rdi
  00183	e8 00 00 00 00	 call	 Px_DecRef
$LN62@mbstreamre:

; 1317 :                     cres = ctr;

  00188	48 8b fd	 mov	 rdi, rbp

; 1318 :                     self->pendingsize = 0;

  0018b	4c 89 be 80 00
	00 00		 mov	 QWORD PTR [rsi+128], r15
$LN34@mbstreamre:

; 1319 :         }
; 1320 : 
; 1321 :         rsize = PyBytes_GET_SIZE(cres);

  00192	48 8b 6f 60	 mov	 rbp, QWORD PTR [rdi+96]

; 1322 :         if (decoder_prepare_buffer(&buf, PyBytes_AS_STRING(cres),
; 1323 :                                    rsize) != 0)

  00196	48 8d 57 78	 lea	 rdx, QWORD PTR [rdi+120]
  0019a	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  0019f	4c 8b c5	 mov	 r8, rbp
  001a2	e8 00 00 00 00	 call	 decoder_prepare_buffer
  001a7	85 c0		 test	 eax, eax
  001a9	0f 85 8f 01 00
	00		 jne	 $errorexit$21670

; 1324 :             goto errorexit;
; 1325 : 
; 1326 :         if (rsize > 0 && decoder_feed_buffer(
; 1327 :                         (MultibyteStatefulDecoderContext *)self, &buf))

  001af	48 85 ed	 test	 rbp, rbp
  001b2	7e 15		 jle	 SHORT $LN30@mbstreamre
  001b4	48 8d 54 24 30	 lea	 rdx, QWORD PTR buf$[rsp]
  001b9	48 8b ce	 mov	 rcx, rsi
  001bc	e8 00 00 00 00	 call	 decoder_feed_buffer
  001c1	85 c0		 test	 eax, eax
  001c3	0f 85 75 01 00
	00		 jne	 $errorexit$21670
$LN30@mbstreamre:

; 1328 :             goto errorexit;
; 1329 : 
; 1330 :         if (endoffile || sizehint < 0) {

  001c9	45 85 ed	 test	 r13d, r13d
  001cc	75 05		 jne	 SHORT $LN28@mbstreamre
  001ce	4d 85 e4	 test	 r12, r12
  001d1	79 2d		 jns	 SHORT $LN27@mbstreamre
$LN28@mbstreamre:

; 1331 :             if (buf.inbuf < buf.inbuf_end &&
; 1332 :                 multibytecodec_decerror(self->codec, &self->state,
; 1333 :                             &buf, self->errors, MBERR_TOOFEW))

  001d3	48 8b 44 24 40	 mov	 rax, QWORD PTR buf$[rsp+16]
  001d8	48 39 44 24 30	 cmp	 QWORD PTR buf$[rsp], rax
  001dd	73 42		 jae	 SHORT $LN25@mbstreamre
  001df	4c 8b 46 70	 mov	 r8, QWORD PTR [rsi+112]
  001e3	48 8b 4e 60	 mov	 rcx, QWORD PTR [rsi+96]
  001e7	48 8d 54 24 30	 lea	 rdx, QWORD PTR buf$[rsp]
  001ec	49 c7 c1 fe ff
	ff ff		 mov	 r9, -2
  001f3	e8 00 00 00 00	 call	 multibytecodec_decerror
  001f8	85 c0		 test	 eax, eax
  001fa	0f 85 3e 01 00
	00		 jne	 $errorexit$21670
$LN27@mbstreamre:

; 1334 :                 goto errorexit;
; 1335 :         }
; 1336 : 
; 1337 :         if (buf.inbuf < buf.inbuf_end) { /* pending sequence exists */

  00200	48 8b 44 24 40	 mov	 rax, QWORD PTR buf$[rsp+16]
  00205	48 39 44 24 30	 cmp	 QWORD PTR buf$[rsp], rax
  0020a	73 15		 jae	 SHORT $LN25@mbstreamre

; 1338 :             if (decoder_append_pending(STATEFUL_DCTX(self),
; 1339 :                                        &buf) != 0)

  0020c	48 8d 54 24 30	 lea	 rdx, QWORD PTR buf$[rsp]
  00211	48 8b ce	 mov	 rcx, rsi
  00214	e8 00 00 00 00	 call	 decoder_append_pending
  00219	85 c0		 test	 eax, eax
  0021b	0f 85 1d 01 00
	00		 jne	 $errorexit$21670
$LN25@mbstreamre:

; 1340 :                 goto errorexit;
; 1341 :         }
; 1342 : 
; 1343 :         finalsize = (Py_ssize_t)(buf.outbuf -
; 1344 :                         PyUnicode_AS_UNICODE(buf.outobj));

  00221	48 8b 4c 24 60	 mov	 rcx, QWORD PTR buf$[rsp+48]
  00226	48 8b 41 78	 mov	 rax, QWORD PTR [rcx+120]
  0022a	48 85 c0	 test	 rax, rax
  0022d	75 05		 jne	 SHORT $LN45@mbstreamre
  0022f	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
$LN45@mbstreamre:
  00234	48 8b 5c 24 48	 mov	 rbx, QWORD PTR buf$[rsp+24]
  00239	48 2b d8	 sub	 rbx, rax
  0023c	48 d1 fb	 sar	 rbx, 1

; 1345 :         Py_DECREF(cres);

  0023f	e8 00 00 00 00	 call	 _Py_PXCTX
  00244	85 c0		 test	 eax, eax
  00246	75 5c		 jne	 SHORT $LN73@mbstreamre
  00248	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  0024c	a8 20		 test	 al, 32			; 00000020H
  0024e	75 4c		 jne	 SHORT $LN67@mbstreamre
  00250	84 c0		 test	 al, al
  00252	78 48		 js	 SHORT $LN67@mbstreamre
  00254	a8 02		 test	 al, 2
  00256	75 4c		 jne	 SHORT $LN73@mbstreamre
  00258	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  0025c	75 46		 jne	 SHORT $LN73@mbstreamre
  0025e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00265	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0026c	4c 8b cf	 mov	 r9, rdi
  0026f	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00275	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0027d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00282	48 8b cf	 mov	 rcx, rdi
  00285	85 c0		 test	 eax, eax
  00287	74 07		 je	 SHORT $LN72@mbstreamre
  00289	e8 00 00 00 00	 call	 _Px_Dealloc
  0028e	eb 14		 jmp	 SHORT $LN73@mbstreamre
$LN72@mbstreamre:
  00290	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00294	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0029a	eb 08		 jmp	 SHORT $LN73@mbstreamre
$LN67@mbstreamre:
  0029c	48 8b cf	 mov	 rcx, rdi
  0029f	e8 00 00 00 00	 call	 Px_DecRef
$LN73@mbstreamre:

; 1346 :         cres = NULL;
; 1347 : 
; 1348 :         if (sizehint < 0 || finalsize != 0 || rsize == 0)

  002a4	4d 85 e4	 test	 r12, r12
  002a7	78 1a		 js	 SHORT $LN83@mbstreamre
  002a9	48 85 db	 test	 rbx, rbx
  002ac	75 15		 jne	 SHORT $LN83@mbstreamre
  002ae	48 85 ed	 test	 rbp, rbp
  002b1	74 10		 je	 SHORT $LN83@mbstreamre

; 1349 :             break;
; 1350 : 
; 1351 :         sizehint = 1; /* read 1 more byte and retry */

  002b3	44 8d 63 01	 lea	 r12d, QWORD PTR [rbx+1]

; 1352 :     }

  002b7	e9 a4 fd ff ff	 jmp	 $LN91@mbstreamre
$LN77@mbstreamre:

; 1304 :                 PyErr_NoMemory();

  002bc	e8 00 00 00 00	 call	 PyErr_NoMemory

; 1305 :                 goto errorexit;

  002c1	eb 7b		 jmp	 SHORT $errorexit$21670
$LN83@mbstreamre:

; 1353 : 
; 1354 :     if (finalsize != PyUnicode_GET_SIZE(buf.outobj))

  002c3	48 8b 44 24 60	 mov	 rax, QWORD PTR buf$[rsp+48]
  002c8	4c 39 78 78	 cmp	 QWORD PTR [rax+120], r15
  002cc	75 0d		 jne	 SHORT $LN95@mbstreamre
  002ce	48 8b c8	 mov	 rcx, rax
  002d1	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  002d6	48 8b 44 24 60	 mov	 rax, QWORD PTR buf$[rsp+48]
$LN95@mbstreamre:
  002db	8b 48 70	 mov	 ecx, DWORD PTR [rax+112]
  002de	f6 c1 40	 test	 cl, 64			; 00000040H
  002e1	74 0b		 je	 SHORT $LN48@mbstreamre
  002e3	f6 c1 20	 test	 cl, 32			; 00000020H
  002e6	74 06		 je	 SHORT $LN48@mbstreamre
  002e8	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  002ec	eb 07		 jmp	 SHORT $LN49@mbstreamre
$LN48@mbstreamre:
  002ee	48 8b 88 90 00
	00 00		 mov	 rcx, QWORD PTR [rax+144]
$LN49@mbstreamre:
  002f5	48 3b d9	 cmp	 rbx, rcx
  002f8	74 17		 je	 SHORT $LN19@mbstreamre

; 1355 :         if (PyUnicode_Resize(&buf.outobj, finalsize) == -1)

  002fa	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp+48]
  002ff	48 8b d3	 mov	 rdx, rbx
  00302	e8 00 00 00 00	 call	 PyUnicode_Resize
  00307	83 f8 ff	 cmp	 eax, -1
  0030a	74 3a		 je	 SHORT $LN11@mbstreamre

; 1366 :     return NULL;

  0030c	48 8b 44 24 60	 mov	 rax, QWORD PTR buf$[rsp+48]
$LN19@mbstreamre:

; 1356 :             goto errorexit;
; 1357 : 
; 1358 :     Py_XDECREF(cres);
; 1359 :     Py_XDECREF(buf.excobj);

  00311	48 8b 4c 24 58	 mov	 rcx, QWORD PTR buf$[rsp+40]
  00316	48 85 c9	 test	 rcx, rcx
  00319	74 4b		 je	 SHORT $LN89@mbstreamre
  0031b	e8 00 00 00 00	 call	 _Py_DecRef
  00320	48 8b 44 24 60	 mov	 rax, QWORD PTR buf$[rsp+48]

; 1360 :     return buf.outobj;

  00325	eb 3f		 jmp	 SHORT $LN89@mbstreamre
$LN76@mbstreamre:

; 1290 :             PyErr_Format(PyExc_TypeError,
; 1291 :                          "stream function returned a "
; 1292 :                          "non-bytes object (%.100s)",
; 1293 :                          cres->ob_type->tp_name);

  00327	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0032b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00332	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DF@CIOCGHOM@stream?5function?5returned?5a?5non?9b@
  00339	e8 00 00 00 00	 call	 PyErr_Format
$errorexit$21670:

; 1361 : 
; 1362 : errorexit:
; 1363 :     Py_XDECREF(cres);

  0033e	48 8b cf	 mov	 rcx, rdi
  00341	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@mbstreamre:

; 1364 :     Py_XDECREF(buf.excobj);

  00346	48 8b 4c 24 58	 mov	 rcx, QWORD PTR buf$[rsp+40]
  0034b	48 85 c9	 test	 rcx, rcx
  0034e	74 05		 je	 SHORT $LN7@mbstreamre
  00350	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@mbstreamre:

; 1365 :     Py_XDECREF(buf.outobj);

  00355	48 8b 4c 24 60	 mov	 rcx, QWORD PTR buf$[rsp+48]
  0035a	48 85 c9	 test	 rcx, rcx
  0035d	74 05		 je	 SHORT $LN3@mbstreamre
  0035f	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@mbstreamre:

; 1366 :     return NULL;

  00364	33 c0		 xor	 eax, eax
$LN89@mbstreamre:
  00366	4c 8b 6c 24 78	 mov	 r13, QWORD PTR [rsp+120]
  0036b	48 8b ac 24 a8
	00 00 00	 mov	 rbp, QWORD PTR [rsp+168]
  00373	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR [rsp+176]
  0037b	48 8b 9c 24 a0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+160]
  00383	4c 8b 7c 24 70	 mov	 r15, QWORD PTR [rsp+112]

; 1367 : }

  00388	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  0038f	41 5e		 pop	 r14
  00391	41 5c		 pop	 r12
  00393	5e		 pop	 rsi
  00394	c3		 ret	 0
mbstreamreader_iread ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@DJBLLDPH@arg?51?5must?5be?5an?5integer?$AA@ ; `string'
EXTRN	PyArg_UnpackTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbstreamreader_read DD imagerel mbstreamreader_read
	DD	imagerel mbstreamreader_read+79
	DD	imagerel $unwind$mbstreamreader_read
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$mbstreamreader_read DD imagerel mbstreamreader_read+79
	DD	imagerel mbstreamreader_read+158
	DD	imagerel $chain$0$mbstreamreader_read
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$mbstreamreader_read DD imagerel mbstreamreader_read+158
	DD	imagerel mbstreamreader_read+201
	DD	imagerel $chain$2$mbstreamreader_read
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$mbstreamreader_read DD 020021H
	DD	083400H
	DD	imagerel mbstreamreader_read
	DD	imagerel mbstreamreader_read+79
	DD	imagerel $unwind$mbstreamreader_read
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$mbstreamreader_read DD 020521H
	DD	083405H
	DD	imagerel mbstreamreader_read
	DD	imagerel mbstreamreader_read+79
	DD	imagerel $unwind$mbstreamreader_read
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbstreamreader_read DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT ??_C@_0BJ@DJBLLDPH@arg?51?5must?5be?5an?5integer?$AA@
CONST	SEGMENT
??_C@_0BJ@DJBLLDPH@arg?51?5must?5be?5an?5integer?$AA@ DB 'arg 1 must be a'
	DB	'n integer', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mbstreamreader_read
_TEXT	SEGMENT
self$ = 64
args$ = 72
sizeobj$ = 80
mbstreamreader_read PROC				; COMDAT

; 1371 : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b f9	 mov	 rdi, rcx
  00009	48 8b c2	 mov	 rax, rdx

; 1372 :     PyObject *sizeobj = NULL;
; 1373 :     Py_ssize_t size;
; 1374 : 
; 1375 :     if (!PyArg_UnpackTuple(args, "read", 0, 1, &sizeobj))

  0000c	48 8d 4c 24 50	 lea	 rcx, QWORD PTR sizeobj$[rsp]
  00011	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04POLDLDMI@read?$AA@
  0001d	41 b9 01 00 00
	00		 mov	 r9d, 1
  00023	48 8b c8	 mov	 rcx, rax
  00026	45 33 c0	 xor	 r8d, r8d
  00029	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR sizeobj$[rsp], 0
  00032	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00037	85 c0		 test	 eax, eax
  00039	75 08		 jne	 SHORT $LN7@mbstreamre@2

; 1376 :         return NULL;

  0003b	33 c0		 xor	 eax, eax

; 1391 : }

  0003d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00041	5f		 pop	 rdi
  00042	c3		 ret	 0
$LN7@mbstreamre@2:

; 1377 : 
; 1378 :     if (sizeobj == Py_None || sizeobj == NULL)

  00043	48 8b 4c 24 50	 mov	 rcx, QWORD PTR sizeobj$[rsp]
  00048	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0004f	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00054	48 3b c8	 cmp	 rcx, rax
  00057	74 45		 je	 SHORT $LN5@mbstreamre@2
  00059	48 85 c9	 test	 rcx, rcx
  0005c	74 40		 je	 SHORT $LN5@mbstreamre@2

; 1380 :     else if (PyLong_Check(sizeobj))

  0005e	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00062	f7 80 00 01 00
	00 00 00 00 01	 test	 DWORD PTR [rax+256], 16777216 ; 01000000H
  0006c	74 10		 je	 SHORT $LN3@mbstreamre@2

; 1381 :         size = PyLong_AsSsize_t(sizeobj);

  0006e	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  00073	48 8b d8	 mov	 rbx, rax

; 1385 :     }
; 1386 : 
; 1387 :     if (size == -1 && PyErr_Occurred())

  00076	48 83 f8 ff	 cmp	 rax, -1
  0007a	75 30		 jne	 SHORT $LN1@mbstreamre@2
  0007c	eb 24		 jmp	 SHORT $LN10@mbstreamre@2
$LN3@mbstreamre@2:

; 1382 :     else {
; 1383 :         PyErr_SetString(PyExc_TypeError, "arg 1 must be an integer");

  0007e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00085	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@DJBLLDPH@arg?51?5must?5be?5an?5integer?$AA@
  0008c	e8 00 00 00 00	 call	 PyErr_SetString
$LN12@mbstreamre@2:

; 1384 :         return NULL;

  00091	33 c0		 xor	 eax, eax
  00093	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 1391 : }

  00098	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0009c	5f		 pop	 rdi
  0009d	c3		 ret	 0
$LN5@mbstreamre@2:

; 1379 :         size = -1;

  0009e	48 83 cb ff	 or	 rbx, -1
$LN10@mbstreamre@2:

; 1385 :     }
; 1386 : 
; 1387 :     if (size == -1 && PyErr_Occurred())

  000a2	e8 00 00 00 00	 call	 PyErr_Occurred
  000a7	48 85 c0	 test	 rax, rax

; 1388 :         return NULL;

  000aa	75 e5		 jne	 SHORT $LN12@mbstreamre@2
$LN1@mbstreamre@2:

; 1389 : 
; 1390 :     return mbstreamreader_iread(self, "read", size);

  000ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04POLDLDMI@read?$AA@
  000b3	4c 8b c3	 mov	 r8, rbx
  000b6	48 8b cf	 mov	 rcx, rdi
  000b9	e8 00 00 00 00	 call	 mbstreamreader_iread
  000be	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 1391 : }

  000c3	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c7	5f		 pop	 rdi
  000c8	c3		 ret	 0
mbstreamreader_read ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbstreamreader_readline DD imagerel mbstreamreader_readline
	DD	imagerel mbstreamreader_readline+79
	DD	imagerel $unwind$mbstreamreader_readline
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$mbstreamreader_readline DD imagerel mbstreamreader_readline+79
	DD	imagerel mbstreamreader_readline+158
	DD	imagerel $chain$0$mbstreamreader_readline
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$mbstreamreader_readline DD imagerel mbstreamreader_readline+158
	DD	imagerel mbstreamreader_readline+201
	DD	imagerel $chain$2$mbstreamreader_readline
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$mbstreamreader_readline DD 020021H
	DD	083400H
	DD	imagerel mbstreamreader_readline
	DD	imagerel mbstreamreader_readline+79
	DD	imagerel $unwind$mbstreamreader_readline
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$mbstreamreader_readline DD 020521H
	DD	083405H
	DD	imagerel mbstreamreader_readline
	DD	imagerel mbstreamreader_readline+79
	DD	imagerel $unwind$mbstreamreader_readline
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbstreamreader_readline DD 020601H
	DD	070025206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT mbstreamreader_readline
_TEXT	SEGMENT
self$ = 64
args$ = 72
sizeobj$ = 80
mbstreamreader_readline PROC				; COMDAT

; 1395 : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b f9	 mov	 rdi, rcx
  00009	48 8b c2	 mov	 rax, rdx

; 1396 :     PyObject *sizeobj = NULL;
; 1397 :     Py_ssize_t size;
; 1398 : 
; 1399 :     if (!PyArg_UnpackTuple(args, "readline", 0, 1, &sizeobj))

  0000c	48 8d 4c 24 50	 lea	 rcx, QWORD PTR sizeobj$[rsp]
  00011	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08KBCDPPMN@readline?$AA@
  0001d	41 b9 01 00 00
	00		 mov	 r9d, 1
  00023	48 8b c8	 mov	 rcx, rax
  00026	45 33 c0	 xor	 r8d, r8d
  00029	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR sizeobj$[rsp], 0
  00032	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00037	85 c0		 test	 eax, eax
  00039	75 08		 jne	 SHORT $LN7@mbstreamre@3

; 1400 :         return NULL;

  0003b	33 c0		 xor	 eax, eax

; 1415 : }

  0003d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00041	5f		 pop	 rdi
  00042	c3		 ret	 0
$LN7@mbstreamre@3:

; 1401 : 
; 1402 :     if (sizeobj == Py_None || sizeobj == NULL)

  00043	48 8b 4c 24 50	 mov	 rcx, QWORD PTR sizeobj$[rsp]
  00048	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0004f	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00054	48 3b c8	 cmp	 rcx, rax
  00057	74 45		 je	 SHORT $LN5@mbstreamre@3
  00059	48 85 c9	 test	 rcx, rcx
  0005c	74 40		 je	 SHORT $LN5@mbstreamre@3

; 1404 :     else if (PyLong_Check(sizeobj))

  0005e	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00062	f7 80 00 01 00
	00 00 00 00 01	 test	 DWORD PTR [rax+256], 16777216 ; 01000000H
  0006c	74 10		 je	 SHORT $LN3@mbstreamre@3

; 1405 :         size = PyLong_AsSsize_t(sizeobj);

  0006e	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  00073	48 8b d8	 mov	 rbx, rax

; 1409 :     }
; 1410 : 
; 1411 :     if (size == -1 && PyErr_Occurred())

  00076	48 83 f8 ff	 cmp	 rax, -1
  0007a	75 30		 jne	 SHORT $LN1@mbstreamre@3
  0007c	eb 24		 jmp	 SHORT $LN10@mbstreamre@3
$LN3@mbstreamre@3:

; 1406 :     else {
; 1407 :         PyErr_SetString(PyExc_TypeError, "arg 1 must be an integer");

  0007e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00085	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@DJBLLDPH@arg?51?5must?5be?5an?5integer?$AA@
  0008c	e8 00 00 00 00	 call	 PyErr_SetString
$LN12@mbstreamre@3:

; 1408 :         return NULL;

  00091	33 c0		 xor	 eax, eax
  00093	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 1415 : }

  00098	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0009c	5f		 pop	 rdi
  0009d	c3		 ret	 0
$LN5@mbstreamre@3:

; 1403 :         size = -1;

  0009e	48 83 cb ff	 or	 rbx, -1
$LN10@mbstreamre@3:

; 1409 :     }
; 1410 : 
; 1411 :     if (size == -1 && PyErr_Occurred())

  000a2	e8 00 00 00 00	 call	 PyErr_Occurred
  000a7	48 85 c0	 test	 rax, rax

; 1412 :         return NULL;

  000aa	75 e5		 jne	 SHORT $LN12@mbstreamre@3
$LN1@mbstreamre@3:

; 1413 : 
; 1414 :     return mbstreamreader_iread(self, "readline", size);

  000ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08KBCDPPMN@readline?$AA@
  000b3	4c 8b c3	 mov	 r8, rbx
  000b6	48 8b cf	 mov	 rcx, rdi
  000b9	e8 00 00 00 00	 call	 mbstreamreader_iread
  000be	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 1415 : }

  000c3	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c7	5f		 pop	 rdi
  000c8	c3		 ret	 0
mbstreamreader_readline ENDP
_TEXT	ENDS
EXTRN	PyUnicode_Splitlines:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbstreamreader_readlines DD imagerel mbstreamreader_readlines
	DD	imagerel mbstreamreader_readlines+79
	DD	imagerel $unwind$mbstreamreader_readlines
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$mbstreamreader_readlines DD imagerel mbstreamreader_readlines+79
	DD	imagerel mbstreamreader_readlines+158
	DD	imagerel $chain$0$mbstreamreader_readlines
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$mbstreamreader_readlines DD imagerel mbstreamreader_readlines+158
	DD	imagerel mbstreamreader_readlines+236
	DD	imagerel $chain$2$mbstreamreader_readlines
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$mbstreamreader_readlines DD 020021H
	DD	083400H
	DD	imagerel mbstreamreader_readlines
	DD	imagerel mbstreamreader_readlines+79
	DD	imagerel $unwind$mbstreamreader_readlines
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$mbstreamreader_readlines DD 020521H
	DD	083405H
	DD	imagerel mbstreamreader_readlines
	DD	imagerel mbstreamreader_readlines+79
	DD	imagerel $unwind$mbstreamreader_readlines
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbstreamreader_readlines DD 020601H
	DD	070025206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT mbstreamreader_readlines
_TEXT	SEGMENT
self$ = 64
args$ = 72
sizehintobj$ = 80
mbstreamreader_readlines PROC				; COMDAT

; 1419 : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b f9	 mov	 rdi, rcx
  00009	48 8b c2	 mov	 rax, rdx

; 1420 :     PyObject *sizehintobj = NULL, *r, *sr;
; 1421 :     Py_ssize_t sizehint;
; 1422 : 
; 1423 :     if (!PyArg_UnpackTuple(args, "readlines", 0, 1, &sizehintobj))

  0000c	48 8d 4c 24 50	 lea	 rcx, QWORD PTR sizehintobj$[rsp]
  00011	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09OBGGLHMH@readlines?$AA@
  0001d	41 b9 01 00 00
	00		 mov	 r9d, 1
  00023	48 8b c8	 mov	 rcx, rax
  00026	45 33 c0	 xor	 r8d, r8d
  00029	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR sizehintobj$[rsp], 0
  00032	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00037	85 c0		 test	 eax, eax
  00039	75 08		 jne	 SHORT $LN8@mbstreamre@4

; 1424 :         return NULL;

  0003b	33 c0		 xor	 eax, eax

; 1445 : }

  0003d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00041	5f		 pop	 rdi
  00042	c3		 ret	 0
$LN8@mbstreamre@4:

; 1425 : 
; 1426 :     if (sizehintobj == Py_None || sizehintobj == NULL)

  00043	48 8b 4c 24 50	 mov	 rcx, QWORD PTR sizehintobj$[rsp]
  00048	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0004f	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00054	48 3b c8	 cmp	 rcx, rax
  00057	74 45		 je	 SHORT $LN6@mbstreamre@4
  00059	48 85 c9	 test	 rcx, rcx
  0005c	74 40		 je	 SHORT $LN6@mbstreamre@4

; 1428 :     else if (PyLong_Check(sizehintobj))

  0005e	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00062	f7 80 00 01 00
	00 00 00 00 01	 test	 DWORD PTR [rax+256], 16777216 ; 01000000H
  0006c	74 10		 je	 SHORT $LN4@mbstreamre@4

; 1429 :         sizehint = PyLong_AsSsize_t(sizehintobj);

  0006e	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  00073	48 8b d8	 mov	 rbx, rax

; 1433 :     }
; 1434 : 
; 1435 :     if (sizehint == -1 && PyErr_Occurred())

  00076	48 83 f8 ff	 cmp	 rax, -1
  0007a	75 30		 jne	 SHORT $LN2@mbstreamre@4
  0007c	eb 24		 jmp	 SHORT $LN11@mbstreamre@4
$LN4@mbstreamre@4:

; 1430 :     else {
; 1431 :         PyErr_SetString(PyExc_TypeError, "arg 1 must be an integer");

  0007e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00085	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@DJBLLDPH@arg?51?5must?5be?5an?5integer?$AA@
  0008c	e8 00 00 00 00	 call	 PyErr_SetString
$LN13@mbstreamre@4:

; 1432 :         return NULL;

  00091	33 c0		 xor	 eax, eax
  00093	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 1445 : }

  00098	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0009c	5f		 pop	 rdi
  0009d	c3		 ret	 0
$LN6@mbstreamre@4:

; 1427 :         sizehint = -1;

  0009e	48 83 cb ff	 or	 rbx, -1
$LN11@mbstreamre@4:

; 1433 :     }
; 1434 : 
; 1435 :     if (sizehint == -1 && PyErr_Occurred())

  000a2	e8 00 00 00 00	 call	 PyErr_Occurred
  000a7	48 85 c0	 test	 rax, rax

; 1436 :         return NULL;

  000aa	75 e5		 jne	 SHORT $LN13@mbstreamre@4
$LN2@mbstreamre@4:

; 1437 : 
; 1438 :     r = mbstreamreader_iread(self, "read", sizehint);

  000ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04POLDLDMI@read?$AA@
  000b3	4c 8b c3	 mov	 r8, rbx
  000b6	48 8b cf	 mov	 rcx, rdi
  000b9	e8 00 00 00 00	 call	 mbstreamreader_iread
  000be	48 8b f8	 mov	 rdi, rax

; 1439 :     if (r == NULL)

  000c1	48 85 c0	 test	 rax, rax

; 1440 :         return NULL;

  000c4	74 cb		 je	 SHORT $LN13@mbstreamre@4

; 1441 : 
; 1442 :     sr = PyUnicode_Splitlines(r, 1);

  000c6	ba 01 00 00 00	 mov	 edx, 1
  000cb	48 8b c8	 mov	 rcx, rax
  000ce	e8 00 00 00 00	 call	 PyUnicode_Splitlines

; 1443 :     Py_DECREF(r);

  000d3	48 8b cf	 mov	 rcx, rdi
  000d6	48 8b d8	 mov	 rbx, rax
  000d9	e8 00 00 00 00	 call	 _Py_DecRef

; 1444 :     return sr;

  000de	48 8b c3	 mov	 rax, rbx
  000e1	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 1445 : }

  000e6	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ea	5f		 pop	 rdi
  000eb	c3		 ret	 0
mbstreamreader_readlines ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$mbstreamreader_reset DD imagerel mbstreamreader_reset
	DD	imagerel mbstreamreader_reset+138
	DD	imagerel $unwind$mbstreamreader_reset
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbstreamreader_reset DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\cjkcodecs\multibytecodec.c
xdata	ENDS
;	COMDAT mbstreamreader_reset
_TEXT	SEGMENT
self$ = 64
mbstreamreader_reset PROC				; COMDAT

; 1449 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1450 :     if (self->codec->decreset != NULL &&
; 1451 :         self->codec->decreset(&self->state, self->codec->config) != 0)

  00006	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	48 8b 42 40	 mov	 rax, QWORD PTR [rdx+64]
  00011	48 85 c0	 test	 rax, rax
  00014	74 17		 je	 SHORT $LN1@mbstreamre@5
  00016	48 8b 52 08	 mov	 rdx, QWORD PTR [rdx+8]
  0001a	48 83 c1 68	 add	 rcx, 104		; 00000068H
  0001e	ff d0		 call	 rax
  00020	48 85 c0	 test	 rax, rax
  00023	74 08		 je	 SHORT $LN1@mbstreamre@5

; 1452 :         return NULL;

  00025	33 c0		 xor	 eax, eax

; 1456 : }

  00027	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0002b	5b		 pop	 rbx
  0002c	c3		 ret	 0
$LN1@mbstreamre@5:

; 1453 :     self->pendingsize = 0;

  0002d	48 c7 83 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rbx+128], 0

; 1454 : 
; 1455 :     Py_RETURN_NONE;

  00038	e8 00 00 00 00	 call	 _Py_PXCTX
  0003d	85 c0		 test	 eax, eax
  0003f	75 3c		 jne	 SHORT $LN5@mbstreamre@5
  00041	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00056	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0005c	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00064	e8 00 00 00 00	 call	 _PyParallel_Guard
  00069	85 c0		 test	 eax, eax
  0006b	75 09		 jne	 SHORT $LN4@mbstreamre@5
  0006d	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00074	74 07		 je	 SHORT $LN5@mbstreamre@5
$LN4@mbstreamre@5:
  00076	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN5@mbstreamre@5:
  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1456 : }

  00084	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00088	5b		 pop	 rbx
  00089	c3		 ret	 0
mbstreamreader_reset ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@BGFKLJJG@O?$HMs?3StreamReader?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbstreamreader_new DD imagerel mbstreamreader_new
	DD	imagerel mbstreamreader_new+86
	DD	imagerel $unwind$mbstreamreader_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$mbstreamreader_new DD imagerel mbstreamreader_new+86
	DD	imagerel mbstreamreader_new+194
	DD	imagerel $chain$0$mbstreamreader_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$mbstreamreader_new DD imagerel mbstreamreader_new+194
	DD	imagerel mbstreamreader_new+303
	DD	imagerel $chain$2$mbstreamreader_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$mbstreamreader_new DD 020021H
	DD	0a3400H
	DD	imagerel mbstreamreader_new
	DD	imagerel mbstreamreader_new+86
	DD	imagerel $unwind$mbstreamreader_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$mbstreamreader_new DD 020521H
	DD	0a3405H
	DD	imagerel mbstreamreader_new
	DD	imagerel mbstreamreader_new+86
	DD	imagerel $unwind$mbstreamreader_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbstreamreader_new DD 020601H
	DD	070027206H
xdata	ENDS
;	COMDAT ??_C@_0BB@BGFKLJJG@O?$HMs?3StreamReader?$AA@
CONST	SEGMENT
??_C@_0BB@BGFKLJJG@O?$HMs?3StreamReader?$AA@ DB 'O|s:StreamReader', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mbstreamreader_new
_TEXT	SEGMENT
errors$ = 48
type$ = 80
args$ = 88
kwds$ = 96
stream$ = 104
mbstreamreader_new PROC					; COMDAT

; 1479 : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00006	48 8b f9	 mov	 rdi, rcx
  00009	49 8b c0	 mov	 rax, r8
  0000c	4c 8b d2	 mov	 r10, rdx

; 1480 :     MultibyteStreamReaderObject *self;
; 1481 :     PyObject *stream, *codec = NULL;
; 1482 :     char *errors = NULL;
; 1483 : 
; 1484 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|s:StreamReader",
; 1485 :                             streamkwarglist, &stream, &errors))

  0000f	48 8d 4c 24 30	 lea	 rcx, QWORD PTR errors$[rsp]
  00014	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:streamkwarglist
  0001b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BB@BGFKLJJG@O?$HMs?3StreamReader?$AA@
  00022	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00027	48 8d 4c 24 68	 lea	 rcx, QWORD PTR stream$[rsp]
  0002c	48 8b d0	 mov	 rdx, rax
  0002f	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00034	49 8b ca	 mov	 rcx, r10
  00037	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0
  00040	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  00045	85 c0		 test	 eax, eax
  00047	75 08		 jne	 SHORT $LN14@mbstreamre@6

; 1486 :         return NULL;

  00049	33 c0		 xor	 eax, eax

; 1518 : }

  0004b	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0004f	5f		 pop	 rdi
  00050	c3		 ret	 0
$LN14@mbstreamre@6:

; 1487 : 
; 1488 :     self = (MultibyteStreamReaderObject *)type->tp_alloc(type, 0);

  00051	33 d2		 xor	 edx, edx
  00053	48 8b cf	 mov	 rcx, rdi
  00056	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  0005b	ff 97 88 01 00
	00		 call	 QWORD PTR [rdi+392]
  00061	48 8b d8	 mov	 rbx, rax

; 1489 :     if (self == NULL)

  00064	48 85 c0	 test	 rax, rax

; 1490 :         return NULL;

  00067	74 4c		 je	 SHORT $LN3@mbstreamre@6

; 1491 : 
; 1492 :     codec = PyObject_GetAttrString((PyObject *)type, "codec");

  00069	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05GPLHJCMP@codec?$AA@
  00070	48 8b cf	 mov	 rcx, rdi
  00073	e8 00 00 00 00	 call	 PyObject_GetAttrString
  00078	48 8b f8	 mov	 rdi, rax

; 1493 :     if (codec == NULL)

  0007b	48 85 c0	 test	 rax, rax
  0007e	74 20		 je	 SHORT $errorexit$21881

; 1494 :         goto errorexit;
; 1495 :     if (!MultibyteCodec_Check(codec)) {

  00080	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:MultibyteCodec_Type
  00087	48 39 47 58	 cmp	 QWORD PTR [rdi+88], rax
  0008b	74 35		 je	 SHORT $LN11@mbstreamre@6

; 1496 :         PyErr_SetString(PyExc_TypeError, "codec is unexpected type");

  0008d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00094	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GBEONPKL@codec?5is?5unexpected?5type?$AA@
  0009b	e8 00 00 00 00	 call	 PyErr_SetString
$errorexit$21881:

; 1513 : 
; 1514 : errorexit:
; 1515 :     Py_XDECREF(self);

  000a0	48 8b cb	 mov	 rcx, rbx
  000a3	e8 00 00 00 00	 call	 _Py_DecRef

; 1516 :     Py_XDECREF(codec);

  000a8	48 85 ff	 test	 rdi, rdi
  000ab	74 08		 je	 SHORT $LN3@mbstreamre@6
  000ad	48 8b cf	 mov	 rcx, rdi
  000b0	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@mbstreamre@6:

; 1517 :     return NULL;

  000b5	33 c0		 xor	 eax, eax
  000b7	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]

; 1518 : }

  000bc	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000c0	5f		 pop	 rdi
  000c1	c3		 ret	 0
$LN11@mbstreamre@6:

; 1497 :         goto errorexit;
; 1498 :     }
; 1499 : 
; 1500 :     self->codec = ((MultibyteCodecObject *)codec)->codec;

  000c2	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  000c6	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax

; 1501 :     self->stream = stream;

  000ca	48 8b 44 24 68	 mov	 rax, QWORD PTR stream$[rsp]
  000cf	48 89 83 88 00
	00 00		 mov	 QWORD PTR [rbx+136], rax

; 1502 :     Py_INCREF(stream);

  000d6	48 8b 4c 24 68	 mov	 rcx, QWORD PTR stream$[rsp]
  000db	e8 00 00 00 00	 call	 _Py_IncRef

; 1503 :     self->pendingsize = 0;

  000e0	48 c7 83 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rbx+128], 0

; 1504 :     self->errors = internal_error_callback(errors);

  000eb	48 8b 4c 24 30	 mov	 rcx, QWORD PTR errors$[rsp]
  000f0	e8 00 00 00 00	 call	 internal_error_callback
  000f5	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax

; 1505 :     if (self->errors == NULL)

  000f9	48 85 c0	 test	 rax, rax
  000fc	74 a2		 je	 SHORT $errorexit$21881

; 1506 :         goto errorexit;
; 1507 :     if (self->codec->decinit != NULL &&
; 1508 :         self->codec->decinit(&self->state, self->codec->config) != 0)

  000fe	48 8b 53 60	 mov	 rdx, QWORD PTR [rbx+96]
  00102	48 8b 42 38	 mov	 rax, QWORD PTR [rdx+56]
  00106	48 85 c0	 test	 rax, rax
  00109	74 0e		 je	 SHORT $LN9@mbstreamre@6
  0010b	48 8b 52 08	 mov	 rdx, QWORD PTR [rdx+8]
  0010f	48 8d 4b 68	 lea	 rcx, QWORD PTR [rbx+104]
  00113	ff d0		 call	 rax
  00115	85 c0		 test	 eax, eax
  00117	75 87		 jne	 SHORT $errorexit$21881
$LN9@mbstreamre@6:

; 1509 :         goto errorexit;
; 1510 : 
; 1511 :     Py_DECREF(codec);

  00119	48 8b cf	 mov	 rcx, rdi
  0011c	e8 00 00 00 00	 call	 _Py_DecRef

; 1512 :     return (PyObject *)self;

  00121	48 8b c3	 mov	 rax, rbx
  00124	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]

; 1518 : }

  00129	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0012d	5f		 pop	 rdi
  0012e	c3		 ret	 0
mbstreamreader_new ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT mbstreamreader_init
_TEXT	SEGMENT
self$ = 8
args$ = 16
kwds$ = 24
mbstreamreader_init PROC				; COMDAT

; 1523 :     return 0;

  00000	33 c0		 xor	 eax, eax

; 1524 : }

  00002	c3		 ret	 0
mbstreamreader_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@EABPECGB@mbstreamreader_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbstreamreader_traverse DD imagerel mbstreamreader_traverse
	DD	imagerel mbstreamreader_traverse+171
	DD	imagerel $unwind$mbstreamreader_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbstreamreader_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BI@EABPECGB@mbstreamreader_traverse?$AA@
CONST	SEGMENT
??_C@_0BI@EABPECGB@mbstreamreader_traverse?$AA@ DB 'mbstreamreader_traver'
	DB	'se', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mbstreamreader_traverse
_TEXT	SEGMENT
self$ = 48
visit$ = 56
arg$ = 64
mbstreamreader_traverse PROC				; COMDAT

; 1529 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1530 :     if (ERROR_ISCUSTOM(self->errors))

  0000f	48 8b 41 70	 mov	 rax, QWORD PTR [rcx+112]
  00013	49 8b f8	 mov	 rdi, r8
  00016	48 8b f2	 mov	 rsi, rdx
  00019	48 8b d9	 mov	 rbx, rcx
  0001c	48 83 f8 01	 cmp	 rax, 1
  00020	72 06		 jb	 SHORT $LN12@mbstreamre@7
  00022	48 83 f8 03	 cmp	 rax, 3
  00026	76 37		 jbe	 SHORT $LN10@mbstreamre@7
$LN12@mbstreamre@7:

; 1531 :         Py_VISIT(self->errors);

  00028	e8 00 00 00 00	 call	 _Py_PXCTX
  0002d	85 c0		 test	 eax, eax
  0002f	74 1c		 je	 SHORT $LN9@mbstreamre@7
  00031	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@IEEBIMPD@?4?4?2Modules?2cjkcodecs?2multibyteco@
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@EABPECGB@mbstreamreader_traverse?$AA@
  0003f	45 33 c9	 xor	 r9d, r9d
  00042	41 b8 fb 05 00
	00		 mov	 r8d, 1531		; 000005fbH
  00048	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@mbstreamre@7:
  0004d	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00051	48 85 c9	 test	 rcx, rcx
  00054	74 09		 je	 SHORT $LN10@mbstreamre@7
  00056	48 8b d7	 mov	 rdx, rdi
  00059	ff d6		 call	 rsi
  0005b	85 c0		 test	 eax, eax
  0005d	75 3c		 jne	 SHORT $LN15@mbstreamre@7
$LN10@mbstreamre@7:

; 1532 :     Py_VISIT(self->stream);

  0005f	e8 00 00 00 00	 call	 _Py_PXCTX
  00064	85 c0		 test	 eax, eax
  00066	74 1c		 je	 SHORT $LN3@mbstreamre@7
  00068	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@IEEBIMPD@?4?4?2Modules?2cjkcodecs?2multibyteco@
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@EABPECGB@mbstreamreader_traverse?$AA@
  00076	45 33 c9	 xor	 r9d, r9d
  00079	41 b8 fc 05 00
	00		 mov	 r8d, 1532		; 000005fcH
  0007f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@mbstreamre@7:
  00084	48 8b 8b 88 00
	00 00		 mov	 rcx, QWORD PTR [rbx+136]
  0008b	48 85 c9	 test	 rcx, rcx
  0008e	74 09		 je	 SHORT $LN5@mbstreamre@7
  00090	48 8b d7	 mov	 rdx, rdi
  00093	ff d6		 call	 rsi
  00095	85 c0		 test	 eax, eax
  00097	75 02		 jne	 SHORT $LN15@mbstreamre@7
$LN5@mbstreamre@7:

; 1533 :     return 0;

  00099	33 c0		 xor	 eax, eax
$LN15@mbstreamre@7:

; 1534 : }

  0009b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a0	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000a5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a9	5f		 pop	 rdi
  000aa	c3		 ret	 0
mbstreamreader_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$mbstreamreader_dealloc DD imagerel mbstreamreader_dealloc
	DD	imagerel mbstreamreader_dealloc+277
	DD	imagerel $unwind$mbstreamreader_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbstreamreader_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\cjkcodecs\multibytecodec.c
xdata	ENDS
;	COMDAT mbstreamreader_dealloc
_TEXT	SEGMENT
self$ = 64
mbstreamreader_dealloc PROC				; COMDAT

; 1538 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 1539 :     PyObject_GC_UnTrack(self);

  0000d	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 1540 :     ERROR_DECREF(self->errors);

  00012	48 8b 5f 70	 mov	 rbx, QWORD PTR [rdi+112]
  00016	48 85 db	 test	 rbx, rbx
  00019	74 71		 je	 SHORT $LN8@mbstreamre@8
  0001b	48 83 fb 01	 cmp	 rbx, 1
  0001f	72 06		 jb	 SHORT $LN5@mbstreamre@8
  00021	48 83 fb 03	 cmp	 rbx, 3
  00025	76 65		 jbe	 SHORT $LN8@mbstreamre@8
$LN5@mbstreamre@8:
  00027	e8 00 00 00 00	 call	 _Py_PXCTX
  0002c	85 c0		 test	 eax, eax
  0002e	75 5c		 jne	 SHORT $LN8@mbstreamre@8
  00030	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00034	a8 20		 test	 al, 32			; 00000020H
  00036	75 4c		 jne	 SHORT $LN16@mbstreamre@8
  00038	84 c0		 test	 al, al
  0003a	78 48		 js	 SHORT $LN16@mbstreamre@8
  0003c	a8 02		 test	 al, 2
  0003e	75 4c		 jne	 SHORT $LN8@mbstreamre@8
  00040	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00044	75 46		 jne	 SHORT $LN8@mbstreamre@8
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00054	4c 8b cb	 mov	 r9, rbx
  00057	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0005d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00065	e8 00 00 00 00	 call	 _PyParallel_Guard
  0006a	48 8b cb	 mov	 rcx, rbx
  0006d	85 c0		 test	 eax, eax
  0006f	74 07		 je	 SHORT $LN21@mbstreamre@8
  00071	e8 00 00 00 00	 call	 _Px_Dealloc
  00076	eb 14		 jmp	 SHORT $LN8@mbstreamre@8
$LN21@mbstreamre@8:
  00078	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0007c	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00082	eb 08		 jmp	 SHORT $LN8@mbstreamre@8
$LN16@mbstreamre@8:
  00084	48 8b cb	 mov	 rcx, rbx
  00087	e8 00 00 00 00	 call	 Px_DecRef
$LN8@mbstreamre@8:

; 1541 :     Py_XDECREF(self->stream);

  0008c	48 8b 9f 88 00
	00 00		 mov	 rbx, QWORD PTR [rdi+136]
  00093	48 85 db	 test	 rbx, rbx
  00096	74 65		 je	 SHORT $LN3@mbstreamre@8
  00098	e8 00 00 00 00	 call	 _Py_PXCTX
  0009d	85 c0		 test	 eax, eax
  0009f	75 5c		 jne	 SHORT $LN3@mbstreamre@8
  000a1	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000a5	a8 20		 test	 al, 32			; 00000020H
  000a7	75 4c		 jne	 SHORT $LN27@mbstreamre@8
  000a9	84 c0		 test	 al, al
  000ab	78 48		 js	 SHORT $LN27@mbstreamre@8
  000ad	a8 02		 test	 al, 2
  000af	75 4c		 jne	 SHORT $LN3@mbstreamre@8
  000b1	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000b5	75 46		 jne	 SHORT $LN3@mbstreamre@8
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	4c 8b cb	 mov	 r9, rbx
  000c8	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000ce	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d6	e8 00 00 00 00	 call	 _PyParallel_Guard
  000db	48 8b cb	 mov	 rcx, rbx
  000de	85 c0		 test	 eax, eax
  000e0	74 07		 je	 SHORT $LN32@mbstreamre@8
  000e2	e8 00 00 00 00	 call	 _Px_Dealloc
  000e7	eb 14		 jmp	 SHORT $LN3@mbstreamre@8
$LN32@mbstreamre@8:
  000e9	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000ed	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000f3	eb 08		 jmp	 SHORT $LN3@mbstreamre@8
$LN27@mbstreamre@8:
  000f5	48 8b cb	 mov	 rcx, rbx
  000f8	e8 00 00 00 00	 call	 Px_DecRef
$LN3@mbstreamre@8:

; 1542 :     Py_TYPE(self)->tp_free(self);

  000fd	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00101	48 8b cf	 mov	 rcx, rdi

; 1543 : }

  00104	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00109	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0010d	5f		 pop	 rdi
  0010e	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
mbstreamreader_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_01MJMHLOMK@O?$AA@				; `string'
EXTRN	_PyObject_CallMethodId_SizeT:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbstreamwriter_iwrite DD imagerel mbstreamwriter_iwrite
	DD	imagerel mbstreamwriter_iwrite+126
	DD	imagerel $unwind$mbstreamwriter_iwrite
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbstreamwriter_iwrite DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_01MJMHLOMK@O?$AA@
CONST	SEGMENT
??_C@_01MJMHLOMK@O?$AA@ DB 'O', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mbstreamwriter_iwrite
_TEXT	SEGMENT
self$ = 48
unistr$ = 56
mbstreamwriter_iwrite PROC				; COMDAT

; 1596 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1597 :     PyObject *str, *wr;
; 1598 :     _Py_IDENTIFIER(write);
; 1599 : 
; 1600 :     str = encoder_encode_stateful(STATEFUL_ECTX(self), unistr, 0);

  0000a	45 33 c0	 xor	 r8d, r8d
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	e8 00 00 00 00	 call	 encoder_encode_stateful
  00015	48 8b f8	 mov	 rdi, rax

; 1601 :     if (str == NULL)

  00018	48 85 c0	 test	 rax, rax
  0001b	75 0e		 jne	 SHORT $LN2@mbstreamwr
$LN5@mbstreamwr:

; 1602 :         return -1;

  0001d	83 c8 ff	 or	 eax, -1

; 1610 :     return 0;
; 1611 : }

  00020	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00025	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00029	5f		 pop	 rdi
  0002a	c3		 ret	 0
$LN2@mbstreamwr:

; 1603 : 
; 1604 :     wr = _PyObject_CallMethodId(self->stream, &PyId_write, "O", str);

  0002b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00031	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0003a	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_write@?1??mbstreamwriter_iwrite@@9@9
  0003f	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  00043	48 8b 8b 88 00
	00 00		 mov	 rcx, QWORD PTR [rbx+136]
  0004a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01MJMHLOMK@O?$AA@
  00051	4c 8b cf	 mov	 r9, rdi
  00054	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT

; 1605 :     Py_DECREF(str);

  00059	48 8b cf	 mov	 rcx, rdi
  0005c	48 8b d8	 mov	 rbx, rax
  0005f	e8 00 00 00 00	 call	 _Py_DecRef

; 1606 :     if (wr == NULL)

  00064	48 85 db	 test	 rbx, rbx

; 1607 :         return -1;

  00067	74 b4		 je	 SHORT $LN5@mbstreamwr

; 1608 : 
; 1609 :     Py_DECREF(wr);

  00069	48 8b cb	 mov	 rcx, rbx
  0006c	e8 00 00 00 00	 call	 _Py_DecRef

; 1610 :     return 0;
; 1611 : }

  00071	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00076	33 c0		 xor	 eax, eax
  00078	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007c	5f		 pop	 rdi
  0007d	c3		 ret	 0
mbstreamwriter_iwrite ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$mbstreamwriter_write DD imagerel mbstreamwriter_write
	DD	imagerel mbstreamwriter_write+101
	DD	imagerel $unwind$mbstreamwriter_write
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbstreamwriter_write DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\cjkcodecs\multibytecodec.c
xdata	ENDS
;	COMDAT mbstreamwriter_write
_TEXT	SEGMENT
self$ = 64
strobj$ = 72
mbstreamwriter_write PROC				; COMDAT

; 1615 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1616 :     if (mbstreamwriter_iwrite(self, strobj))

  00004	e8 00 00 00 00	 call	 mbstreamwriter_iwrite
  00009	85 c0		 test	 eax, eax
  0000b	74 07		 je	 SHORT $LN2@mbstreamwr@2

; 1617 :         return NULL;

  0000d	33 c0		 xor	 eax, eax

; 1620 : }

  0000f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00013	c3		 ret	 0
$LN2@mbstreamwr@2:

; 1618 :     else
; 1619 :         Py_RETURN_NONE;

  00014	e8 00 00 00 00	 call	 _Py_PXCTX
  00019	85 c0		 test	 eax, eax
  0001b	75 3c		 jne	 SHORT $LN6@mbstreamwr@2
  0001d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00032	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00038	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00040	e8 00 00 00 00	 call	 _PyParallel_Guard
  00045	85 c0		 test	 eax, eax
  00047	75 09		 jne	 SHORT $LN5@mbstreamwr@2
  00049	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00050	74 07		 je	 SHORT $LN6@mbstreamwr@2
$LN5@mbstreamwr@2:
  00052	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN6@mbstreamwr@2:
  00059	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1620 : }

  00060	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00064	c3		 ret	 0
mbstreamwriter_write ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@MDFCPOLN@arg?5must?5be?5a?5sequence?5object?$AA@ ; `string'
EXTRN	PySequence_GetItem:PROC
EXTRN	PySequence_Size:PROC
EXTRN	PySequence_Check:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$mbstreamwriter_writelines DD imagerel mbstreamwriter_writelines
	DD	imagerel mbstreamwriter_writelines+62
	DD	imagerel $unwind$mbstreamwriter_writelines
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$mbstreamwriter_writelines DD imagerel mbstreamwriter_writelines+62
	DD	imagerel mbstreamwriter_writelines+266
	DD	imagerel $chain$2$mbstreamwriter_writelines
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$mbstreamwriter_writelines DD imagerel mbstreamwriter_writelines+266
	DD	imagerel mbstreamwriter_writelines+270
	DD	imagerel $chain$4$mbstreamwriter_writelines
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$mbstreamwriter_writelines DD 060021H
	DD	0a7400H
	DD	096400H
	DD	083400H
	DD	imagerel mbstreamwriter_writelines
	DD	imagerel mbstreamwriter_writelines+62
	DD	imagerel $unwind$mbstreamwriter_writelines
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$mbstreamwriter_writelines DD 061221H
	DD	0a7412H
	DD	09640dH
	DD	083405H
	DD	imagerel mbstreamwriter_writelines
	DD	imagerel mbstreamwriter_writelines+62
	DD	imagerel $unwind$mbstreamwriter_writelines
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbstreamwriter_writelines DD 040b01H
	DD	0b540bH
	DD	0c007520bH
xdata	ENDS
;	COMDAT ??_C@_0BO@MDFCPOLN@arg?5must?5be?5a?5sequence?5object?$AA@
CONST	SEGMENT
??_C@_0BO@MDFCPOLN@arg?5must?5be?5a?5sequence?5object?$AA@ DB 'arg must b'
	DB	'e a sequence object', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\cjkcodecs\multibytecodec.c
CONST	ENDS
;	COMDAT mbstreamwriter_writelines
_TEXT	SEGMENT
self$ = 64
lines$ = 72
mbstreamwriter_writelines PROC				; COMDAT

; 1624 : {

  00000	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  00005	41 54		 push	 r12
  00007	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000b	4c 8b e1	 mov	 r12, rcx

; 1625 :     PyObject *strobj;
; 1626 :     int i, r;
; 1627 : 
; 1628 :     if (!PySequence_Check(lines)) {

  0000e	48 8b ca	 mov	 rcx, rdx
  00011	48 8b ea	 mov	 rbp, rdx
  00014	e8 00 00 00 00	 call	 PySequence_Check
  00019	85 c0		 test	 eax, eax
  0001b	75 21		 jne	 SHORT $LN6@mbstreamwr@3

; 1629 :         PyErr_SetString(PyExc_TypeError,
; 1630 :                         "arg must be a sequence object");

  0001d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@MDFCPOLN@arg?5must?5be?5a?5sequence?5object?$AA@
  0002b	e8 00 00 00 00	 call	 PyErr_SetString

; 1631 :         return NULL;

  00030	33 c0		 xor	 eax, eax

; 1647 : }

  00032	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  00037	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0003b	41 5c		 pop	 r12
  0003d	c3		 ret	 0
$LN6@mbstreamwr@3:
  0003e	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx

; 1632 :     }
; 1633 : 
; 1634 :     for (i = 0; i < PySequence_Length(lines); i++) {

  00043	48 8b cd	 mov	 rcx, rbp
  00046	48 89 74 24 48	 mov	 QWORD PTR [rsp+72], rsi
  0004b	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  00050	33 ff		 xor	 edi, edi
  00052	e8 00 00 00 00	 call	 PySequence_Size
  00057	48 85 c0	 test	 rax, rax
  0005a	7e 47		 jle	 SHORT $LN3@mbstreamwr@3
  0005c	8b df		 mov	 ebx, edi
  0005e	66 90		 npad	 2
$LL5@mbstreamwr@3:

; 1635 :         /* length can be changed even within this loop */
; 1636 :         strobj = PySequence_GetItem(lines, i);

  00060	48 8b d3	 mov	 rdx, rbx
  00063	48 8b cd	 mov	 rcx, rbp
  00066	e8 00 00 00 00	 call	 PySequence_GetItem
  0006b	48 8b f0	 mov	 rsi, rax

; 1637 :         if (strobj == NULL)

  0006e	48 85 c0	 test	 rax, rax
  00071	0f 84 93 00 00
	00		 je	 $LN14@mbstreamwr@3

; 1639 : 
; 1640 :         r = mbstreamwriter_iwrite(self, strobj);

  00077	48 8b d0	 mov	 rdx, rax
  0007a	49 8b cc	 mov	 rcx, r12
  0007d	e8 00 00 00 00	 call	 mbstreamwriter_iwrite

; 1641 :         Py_DECREF(strobj);

  00082	48 8b ce	 mov	 rcx, rsi
  00085	8b d8		 mov	 ebx, eax
  00087	e8 00 00 00 00	 call	 _Py_DecRef

; 1642 :         if (r == -1)

  0008c	83 fb ff	 cmp	 ebx, -1
  0008f	74 79		 je	 SHORT $LN14@mbstreamwr@3

; 1632 :     }
; 1633 : 
; 1634 :     for (i = 0; i < PySequence_Length(lines); i++) {

  00091	ff c7		 inc	 edi
  00093	48 8b cd	 mov	 rcx, rbp
  00096	48 63 df	 movsxd	 rbx, edi
  00099	e8 00 00 00 00	 call	 PySequence_Size
  0009e	48 3b d8	 cmp	 rbx, rax
  000a1	7c bd		 jl	 SHORT $LL5@mbstreamwr@3
$LN3@mbstreamwr@3:

; 1643 :             return NULL;
; 1644 :     }
; 1645 : 
; 1646 :     Py_RETURN_NONE;

  000a3	e8 00 00 00 00	 call	 _Py_PXCTX
  000a8	85 c0		 test	 eax, eax
  000aa	75 3c		 jne	 SHORT $LN10@mbstreamwr@3
  000ac	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  000b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000c1	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000c7	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000cf	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d4	85 c0		 test	 eax, eax
  000d6	75 09		 jne	 SHORT $LN9@mbstreamwr@3
  000d8	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  000df	74 07		 je	 SHORT $LN10@mbstreamwr@3
$LN9@mbstreamwr@3:
  000e1	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN10@mbstreamwr@3:
  000e8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN19@mbstreamwr@3:
  000ef	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000f4	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000f9	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 1647 : }

  000fe	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  00103	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00107	41 5c		 pop	 r12
  00109	c3		 ret	 0
$LN14@mbstreamwr@3:

; 1638 :             return NULL;

  0010a	33 c0		 xor	 eax, eax
  0010c	eb e1		 jmp	 SHORT $LN19@mbstreamwr@3
mbstreamwriter_writelines ENDP
_TEXT	ENDS
EXTRN	PyBytes_Size:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$mbstreamwriter_reset DD imagerel mbstreamwriter_reset
	DD	imagerel mbstreamwriter_reset+263
	DD	imagerel $unwind$mbstreamwriter_reset
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbstreamwriter_reset DD 040a01H
	DD	09340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\cjkcodecs\multibytecodec.c
xdata	ENDS
;	COMDAT mbstreamwriter_reset
_TEXT	SEGMENT
pending$ = 64
self$ = 64
mbstreamwriter_reset PROC				; COMDAT

; 1651 : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1652 :     const Py_UNICODE *pending;
; 1653 :     PyObject *pwrt;
; 1654 : 
; 1655 :     pending = self->pending;
; 1656 :     pwrt = multibytecodec_encode(self->codec, &self->state,
; 1657 :                     &pending, self->pendingsize, self->errors,
; 1658 :                     MBENC_FLUSH | MBENC_RESET);

  0000a	4c 8b 89 80 00
	00 00		 mov	 r9, QWORD PTR [rcx+128]
  00011	48 8d 41 78	 lea	 rax, QWORD PTR [rcx+120]
  00015	48 8b f9	 mov	 rdi, rcx
  00018	48 89 44 24 40	 mov	 QWORD PTR pending$[rsp], rax
  0001d	48 8b 41 70	 mov	 rax, QWORD PTR [rcx+112]
  00021	48 8d 51 68	 lea	 rdx, QWORD PTR [rcx+104]
  00025	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00029	4c 8d 44 24 40	 lea	 r8, QWORD PTR pending$[rsp]
  0002e	c7 44 24 28 03
	00 00 00	 mov	 DWORD PTR [rsp+40], 3
  00036	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0003b	e8 00 00 00 00	 call	 multibytecodec_encode

; 1659 :     /* some pending buffer can be truncated when UnicodeEncodeError is
; 1660 :      * raised on 'strict' mode. but, 'reset' method is designed to
; 1661 :      * reset the pending buffer or states so failed string sequence
; 1662 :      * ought to be missed */
; 1663 :     self->pendingsize = 0;

  00040	48 c7 87 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rdi+128], 0
  0004b	48 8b d8	 mov	 rbx, rax

; 1664 :     if (pwrt == NULL)

  0004e	48 85 c0	 test	 rax, rax

; 1665 :         return NULL;

  00051	74 48		 je	 SHORT $LN10@mbstreamwr@4

; 1666 : 
; 1667 :     assert(PyBytes_Check(pwrt));
; 1668 :     if (PyBytes_Size(pwrt) > 0) {

  00053	48 8b c8	 mov	 rcx, rax
  00056	e8 00 00 00 00	 call	 PyBytes_Size
  0005b	48 85 c0	 test	 rax, rax
  0005e	7e 48		 jle	 SHORT $LN1@mbstreamwr@4

; 1669 :         PyObject *wr;
; 1670 :         _Py_IDENTIFIER(write);
; 1671 : 
; 1672 :         wr = _PyObject_CallMethodId(self->stream, &PyId_write, "O", pwrt);
; 1673 :         if (wr == NULL) {

  00060	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00066	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0006f	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_write@?2??mbstreamwriter_reset@@9@9
  00074	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  00078	48 8b 8f 88 00
	00 00		 mov	 rcx, QWORD PTR [rdi+136]
  0007f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01MJMHLOMK@O?$AA@
  00086	4c 8b cb	 mov	 r9, rbx
  00089	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  0008e	48 85 c0	 test	 rax, rax
  00091	75 15		 jne	 SHORT $LN1@mbstreamwr@4

; 1674 :             Py_DECREF(pwrt);

  00093	48 8b cb	 mov	 rcx, rbx
  00096	e8 00 00 00 00	 call	 _Py_DecRef
$LN10@mbstreamwr@4:

; 1675 :             return NULL;

  0009b	33 c0		 xor	 eax, eax

; 1681 : }

  0009d	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000a2	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a6	5f		 pop	 rdi
  000a7	c3		 ret	 0
$LN1@mbstreamwr@4:

; 1676 :         }
; 1677 :     }
; 1678 :     Py_DECREF(pwrt);

  000a8	48 8b cb	 mov	 rcx, rbx
  000ab	e8 00 00 00 00	 call	 _Py_DecRef

; 1679 : 
; 1680 :     Py_RETURN_NONE;

  000b0	e8 00 00 00 00	 call	 _Py_PXCTX
  000b5	85 c0		 test	 eax, eax
  000b7	75 3c		 jne	 SHORT $LN7@mbstreamwr@4
  000b9	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  000c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000ce	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000d4	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000dc	e8 00 00 00 00	 call	 _PyParallel_Guard
  000e1	85 c0		 test	 eax, eax
  000e3	75 09		 jne	 SHORT $LN6@mbstreamwr@4
  000e5	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  000ec	74 07		 je	 SHORT $LN7@mbstreamwr@4
$LN6@mbstreamwr@4:
  000ee	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN7@mbstreamwr@4:
  000f5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1681 : }

  000fc	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00101	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00105	5f		 pop	 rdi
  00106	c3		 ret	 0
mbstreamwriter_reset ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@DKNILIEM@O?$HMs?3StreamWriter?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbstreamwriter_new DD imagerel mbstreamwriter_new
	DD	imagerel mbstreamwriter_new+86
	DD	imagerel $unwind$mbstreamwriter_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$mbstreamwriter_new DD imagerel mbstreamwriter_new+86
	DD	imagerel mbstreamwriter_new+194
	DD	imagerel $chain$0$mbstreamwriter_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$mbstreamwriter_new DD imagerel mbstreamwriter_new+194
	DD	imagerel mbstreamwriter_new+303
	DD	imagerel $chain$2$mbstreamwriter_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$mbstreamwriter_new DD 020021H
	DD	0a3400H
	DD	imagerel mbstreamwriter_new
	DD	imagerel mbstreamwriter_new+86
	DD	imagerel $unwind$mbstreamwriter_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$mbstreamwriter_new DD 020521H
	DD	0a3405H
	DD	imagerel mbstreamwriter_new
	DD	imagerel mbstreamwriter_new+86
	DD	imagerel $unwind$mbstreamwriter_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbstreamwriter_new DD 020601H
	DD	070027206H
xdata	ENDS
;	COMDAT ??_C@_0BB@DKNILIEM@O?$HMs?3StreamWriter?$AA@
CONST	SEGMENT
??_C@_0BB@DKNILIEM@O?$HMs?3StreamWriter?$AA@ DB 'O|s:StreamWriter', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mbstreamwriter_new
_TEXT	SEGMENT
errors$ = 48
type$ = 80
args$ = 88
kwds$ = 96
stream$ = 104
mbstreamwriter_new PROC					; COMDAT

; 1685 : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00006	48 8b f9	 mov	 rdi, rcx
  00009	49 8b c0	 mov	 rax, r8
  0000c	4c 8b d2	 mov	 r10, rdx

; 1686 :     MultibyteStreamWriterObject *self;
; 1687 :     PyObject *stream, *codec = NULL;
; 1688 :     char *errors = NULL;
; 1689 : 
; 1690 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|s:StreamWriter",
; 1691 :                             streamkwarglist, &stream, &errors))

  0000f	48 8d 4c 24 30	 lea	 rcx, QWORD PTR errors$[rsp]
  00014	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:streamkwarglist
  0001b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BB@DKNILIEM@O?$HMs?3StreamWriter?$AA@
  00022	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00027	48 8d 4c 24 68	 lea	 rcx, QWORD PTR stream$[rsp]
  0002c	48 8b d0	 mov	 rdx, rax
  0002f	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00034	49 8b ca	 mov	 rcx, r10
  00037	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0
  00040	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  00045	85 c0		 test	 eax, eax
  00047	75 08		 jne	 SHORT $LN14@mbstreamwr@5

; 1692 :         return NULL;

  00049	33 c0		 xor	 eax, eax

; 1724 : }

  0004b	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0004f	5f		 pop	 rdi
  00050	c3		 ret	 0
$LN14@mbstreamwr@5:

; 1693 : 
; 1694 :     self = (MultibyteStreamWriterObject *)type->tp_alloc(type, 0);

  00051	33 d2		 xor	 edx, edx
  00053	48 8b cf	 mov	 rcx, rdi
  00056	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  0005b	ff 97 88 01 00
	00		 call	 QWORD PTR [rdi+392]
  00061	48 8b d8	 mov	 rbx, rax

; 1695 :     if (self == NULL)

  00064	48 85 c0	 test	 rax, rax

; 1696 :         return NULL;

  00067	74 4c		 je	 SHORT $LN3@mbstreamwr@5

; 1697 : 
; 1698 :     codec = PyObject_GetAttrString((PyObject *)type, "codec");

  00069	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05GPLHJCMP@codec?$AA@
  00070	48 8b cf	 mov	 rcx, rdi
  00073	e8 00 00 00 00	 call	 PyObject_GetAttrString
  00078	48 8b f8	 mov	 rdi, rax

; 1699 :     if (codec == NULL)

  0007b	48 85 c0	 test	 rax, rax
  0007e	74 20		 je	 SHORT $errorexit$22071

; 1700 :         goto errorexit;
; 1701 :     if (!MultibyteCodec_Check(codec)) {

  00080	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:MultibyteCodec_Type
  00087	48 39 47 58	 cmp	 QWORD PTR [rdi+88], rax
  0008b	74 35		 je	 SHORT $LN11@mbstreamwr@5

; 1702 :         PyErr_SetString(PyExc_TypeError, "codec is unexpected type");

  0008d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00094	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GBEONPKL@codec?5is?5unexpected?5type?$AA@
  0009b	e8 00 00 00 00	 call	 PyErr_SetString
$errorexit$22071:

; 1719 : 
; 1720 : errorexit:
; 1721 :     Py_XDECREF(self);

  000a0	48 8b cb	 mov	 rcx, rbx
  000a3	e8 00 00 00 00	 call	 _Py_DecRef

; 1722 :     Py_XDECREF(codec);

  000a8	48 85 ff	 test	 rdi, rdi
  000ab	74 08		 je	 SHORT $LN3@mbstreamwr@5
  000ad	48 8b cf	 mov	 rcx, rdi
  000b0	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@mbstreamwr@5:

; 1723 :     return NULL;

  000b5	33 c0		 xor	 eax, eax
  000b7	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]

; 1724 : }

  000bc	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000c0	5f		 pop	 rdi
  000c1	c3		 ret	 0
$LN11@mbstreamwr@5:

; 1703 :         goto errorexit;
; 1704 :     }
; 1705 : 
; 1706 :     self->codec = ((MultibyteCodecObject *)codec)->codec;

  000c2	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  000c6	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax

; 1707 :     self->stream = stream;

  000ca	48 8b 44 24 68	 mov	 rax, QWORD PTR stream$[rsp]
  000cf	48 89 83 88 00
	00 00		 mov	 QWORD PTR [rbx+136], rax

; 1708 :     Py_INCREF(stream);

  000d6	48 8b 4c 24 68	 mov	 rcx, QWORD PTR stream$[rsp]
  000db	e8 00 00 00 00	 call	 _Py_IncRef

; 1709 :     self->pendingsize = 0;

  000e0	48 c7 83 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rbx+128], 0

; 1710 :     self->errors = internal_error_callback(errors);

  000eb	48 8b 4c 24 30	 mov	 rcx, QWORD PTR errors$[rsp]
  000f0	e8 00 00 00 00	 call	 internal_error_callback
  000f5	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax

; 1711 :     if (self->errors == NULL)

  000f9	48 85 c0	 test	 rax, rax
  000fc	74 a2		 je	 SHORT $errorexit$22071

; 1712 :         goto errorexit;
; 1713 :     if (self->codec->encinit != NULL &&
; 1714 :         self->codec->encinit(&self->state, self->codec->config) != 0)

  000fe	48 8b 53 60	 mov	 rdx, QWORD PTR [rbx+96]
  00102	48 8b 42 20	 mov	 rax, QWORD PTR [rdx+32]
  00106	48 85 c0	 test	 rax, rax
  00109	74 0e		 je	 SHORT $LN9@mbstreamwr@5
  0010b	48 8b 52 08	 mov	 rdx, QWORD PTR [rdx+8]
  0010f	48 8d 4b 68	 lea	 rcx, QWORD PTR [rbx+104]
  00113	ff d0		 call	 rax
  00115	85 c0		 test	 eax, eax
  00117	75 87		 jne	 SHORT $errorexit$22071
$LN9@mbstreamwr@5:

; 1715 :         goto errorexit;
; 1716 : 
; 1717 :     Py_DECREF(codec);

  00119	48 8b cf	 mov	 rcx, rdi
  0011c	e8 00 00 00 00	 call	 _Py_DecRef

; 1718 :     return (PyObject *)self;

  00121	48 8b c3	 mov	 rax, rbx
  00124	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]

; 1724 : }

  00129	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0012d	5f		 pop	 rdi
  0012e	c3		 ret	 0
mbstreamwriter_new ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT mbstreamwriter_init
_TEXT	SEGMENT
self$ = 8
args$ = 16
kwds$ = 24
mbstreamwriter_init PROC				; COMDAT

; 1729 :     return 0;

  00000	33 c0		 xor	 eax, eax

; 1730 : }

  00002	c3		 ret	 0
mbstreamwriter_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@GCHLLHMO@mbstreamwriter_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbstreamwriter_traverse DD imagerel mbstreamwriter_traverse
	DD	imagerel mbstreamwriter_traverse+171
	DD	imagerel $unwind$mbstreamwriter_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbstreamwriter_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BI@GCHLLHMO@mbstreamwriter_traverse?$AA@
CONST	SEGMENT
??_C@_0BI@GCHLLHMO@mbstreamwriter_traverse?$AA@ DB 'mbstreamwriter_traver'
	DB	'se', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mbstreamwriter_traverse
_TEXT	SEGMENT
self$ = 48
visit$ = 56
arg$ = 64
mbstreamwriter_traverse PROC				; COMDAT

; 1735 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1736 :     if (ERROR_ISCUSTOM(self->errors))

  0000f	48 8b 41 70	 mov	 rax, QWORD PTR [rcx+112]
  00013	49 8b f8	 mov	 rdi, r8
  00016	48 8b f2	 mov	 rsi, rdx
  00019	48 8b d9	 mov	 rbx, rcx
  0001c	48 83 f8 01	 cmp	 rax, 1
  00020	72 06		 jb	 SHORT $LN12@mbstreamwr@6
  00022	48 83 f8 03	 cmp	 rax, 3
  00026	76 37		 jbe	 SHORT $LN10@mbstreamwr@6
$LN12@mbstreamwr@6:

; 1737 :         Py_VISIT(self->errors);

  00028	e8 00 00 00 00	 call	 _Py_PXCTX
  0002d	85 c0		 test	 eax, eax
  0002f	74 1c		 je	 SHORT $LN9@mbstreamwr@6
  00031	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@IEEBIMPD@?4?4?2Modules?2cjkcodecs?2multibyteco@
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@GCHLLHMO@mbstreamwriter_traverse?$AA@
  0003f	45 33 c9	 xor	 r9d, r9d
  00042	41 b8 c9 06 00
	00		 mov	 r8d, 1737		; 000006c9H
  00048	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@mbstreamwr@6:
  0004d	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00051	48 85 c9	 test	 rcx, rcx
  00054	74 09		 je	 SHORT $LN10@mbstreamwr@6
  00056	48 8b d7	 mov	 rdx, rdi
  00059	ff d6		 call	 rsi
  0005b	85 c0		 test	 eax, eax
  0005d	75 3c		 jne	 SHORT $LN15@mbstreamwr@6
$LN10@mbstreamwr@6:

; 1738 :     Py_VISIT(self->stream);

  0005f	e8 00 00 00 00	 call	 _Py_PXCTX
  00064	85 c0		 test	 eax, eax
  00066	74 1c		 je	 SHORT $LN3@mbstreamwr@6
  00068	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@IEEBIMPD@?4?4?2Modules?2cjkcodecs?2multibyteco@
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@GCHLLHMO@mbstreamwriter_traverse?$AA@
  00076	45 33 c9	 xor	 r9d, r9d
  00079	41 b8 ca 06 00
	00		 mov	 r8d, 1738		; 000006caH
  0007f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@mbstreamwr@6:
  00084	48 8b 8b 88 00
	00 00		 mov	 rcx, QWORD PTR [rbx+136]
  0008b	48 85 c9	 test	 rcx, rcx
  0008e	74 09		 je	 SHORT $LN5@mbstreamwr@6
  00090	48 8b d7	 mov	 rdx, rdi
  00093	ff d6		 call	 rsi
  00095	85 c0		 test	 eax, eax
  00097	75 02		 jne	 SHORT $LN15@mbstreamwr@6
$LN5@mbstreamwr@6:

; 1739 :     return 0;

  00099	33 c0		 xor	 eax, eax
$LN15@mbstreamwr@6:

; 1740 : }

  0009b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a0	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000a5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a9	5f		 pop	 rdi
  000aa	c3		 ret	 0
mbstreamwriter_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$mbstreamwriter_dealloc DD imagerel mbstreamwriter_dealloc
	DD	imagerel mbstreamwriter_dealloc+277
	DD	imagerel $unwind$mbstreamwriter_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbstreamwriter_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\cjkcodecs\multibytecodec.c
xdata	ENDS
;	COMDAT mbstreamwriter_dealloc
_TEXT	SEGMENT
self$ = 64
mbstreamwriter_dealloc PROC				; COMDAT

; 1744 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 1745 :     PyObject_GC_UnTrack(self);

  0000d	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 1746 :     ERROR_DECREF(self->errors);

  00012	48 8b 5f 70	 mov	 rbx, QWORD PTR [rdi+112]
  00016	48 85 db	 test	 rbx, rbx
  00019	74 71		 je	 SHORT $LN8@mbstreamwr@7
  0001b	48 83 fb 01	 cmp	 rbx, 1
  0001f	72 06		 jb	 SHORT $LN5@mbstreamwr@7
  00021	48 83 fb 03	 cmp	 rbx, 3
  00025	76 65		 jbe	 SHORT $LN8@mbstreamwr@7
$LN5@mbstreamwr@7:
  00027	e8 00 00 00 00	 call	 _Py_PXCTX
  0002c	85 c0		 test	 eax, eax
  0002e	75 5c		 jne	 SHORT $LN8@mbstreamwr@7
  00030	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00034	a8 20		 test	 al, 32			; 00000020H
  00036	75 4c		 jne	 SHORT $LN16@mbstreamwr@7
  00038	84 c0		 test	 al, al
  0003a	78 48		 js	 SHORT $LN16@mbstreamwr@7
  0003c	a8 02		 test	 al, 2
  0003e	75 4c		 jne	 SHORT $LN8@mbstreamwr@7
  00040	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00044	75 46		 jne	 SHORT $LN8@mbstreamwr@7
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00054	4c 8b cb	 mov	 r9, rbx
  00057	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0005d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00065	e8 00 00 00 00	 call	 _PyParallel_Guard
  0006a	48 8b cb	 mov	 rcx, rbx
  0006d	85 c0		 test	 eax, eax
  0006f	74 07		 je	 SHORT $LN21@mbstreamwr@7
  00071	e8 00 00 00 00	 call	 _Px_Dealloc
  00076	eb 14		 jmp	 SHORT $LN8@mbstreamwr@7
$LN21@mbstreamwr@7:
  00078	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0007c	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00082	eb 08		 jmp	 SHORT $LN8@mbstreamwr@7
$LN16@mbstreamwr@7:
  00084	48 8b cb	 mov	 rcx, rbx
  00087	e8 00 00 00 00	 call	 Px_DecRef
$LN8@mbstreamwr@7:

; 1747 :     Py_XDECREF(self->stream);

  0008c	48 8b 9f 88 00
	00 00		 mov	 rbx, QWORD PTR [rdi+136]
  00093	48 85 db	 test	 rbx, rbx
  00096	74 65		 je	 SHORT $LN3@mbstreamwr@7
  00098	e8 00 00 00 00	 call	 _Py_PXCTX
  0009d	85 c0		 test	 eax, eax
  0009f	75 5c		 jne	 SHORT $LN3@mbstreamwr@7
  000a1	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000a5	a8 20		 test	 al, 32			; 00000020H
  000a7	75 4c		 jne	 SHORT $LN27@mbstreamwr@7
  000a9	84 c0		 test	 al, al
  000ab	78 48		 js	 SHORT $LN27@mbstreamwr@7
  000ad	a8 02		 test	 al, 2
  000af	75 4c		 jne	 SHORT $LN3@mbstreamwr@7
  000b1	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000b5	75 46		 jne	 SHORT $LN3@mbstreamwr@7
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	4c 8b cb	 mov	 r9, rbx
  000c8	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000ce	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d6	e8 00 00 00 00	 call	 _PyParallel_Guard
  000db	48 8b cb	 mov	 rcx, rbx
  000de	85 c0		 test	 eax, eax
  000e0	74 07		 je	 SHORT $LN32@mbstreamwr@7
  000e2	e8 00 00 00 00	 call	 _Px_Dealloc
  000e7	eb 14		 jmp	 SHORT $LN3@mbstreamwr@7
$LN32@mbstreamwr@7:
  000e9	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000ed	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000f3	eb 08		 jmp	 SHORT $LN3@mbstreamwr@7
$LN27@mbstreamwr@7:
  000f5	48 8b cb	 mov	 rcx, rbx
  000f8	e8 00 00 00 00	 call	 Px_DecRef
$LN3@mbstreamwr@7:

; 1748 :     Py_TYPE(self)->tp_free(self);

  000fd	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00101	48 8b cf	 mov	 rcx, rdi

; 1749 : }

  00104	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00109	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0010d	5f		 pop	 rdi
  0010e	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
mbstreamwriter_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@FPFOACMO@argument?5type?5invalid?$AA@	; `string'
PUBLIC	??_C@_0BH@MFGEOELK@multibytecodec?4__map_?$CK?$AA@ ; `string'
EXTRN	_PyObject_New:PROC
EXTRN	_PxObject_New:PROC
EXTRN	PyCapsule_GetPointer:PROC
EXTRN	PyExc_ValueError:QWORD
EXTRN	PyCapsule_IsValid:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__create_codec DD imagerel __create_codec
	DD	imagerel __create_codec+135
	DD	imagerel $unwind$__create_codec
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__create_codec DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0BG@FPFOACMO@argument?5type?5invalid?$AA@
CONST	SEGMENT
??_C@_0BG@FPFOACMO@argument?5type?5invalid?$AA@ DB 'argument type invalid'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MFGEOELK@multibytecodec?4__map_?$CK?$AA@
CONST	SEGMENT
??_C@_0BH@MFGEOELK@multibytecodec?4__map_?$CK?$AA@ DB 'multibytecodec.__m'
	DB	'ap_*', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __create_codec
_TEXT	SEGMENT
ignore$ = 48
arg$ = 56
__create_codec PROC					; COMDAT

; 1818 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b da	 mov	 rbx, rdx

; 1819 :     MultibyteCodecObject *self;
; 1820 :     MultibyteCodec *codec;
; 1821 : 
; 1822 :     if (!PyCapsule_IsValid(arg, PyMultibyteCodec_CAPSULE_NAME)) {

  00009	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@MFGEOELK@multibytecodec?4__map_?$CK?$AA@
  00010	48 8b cb	 mov	 rcx, rbx
  00013	e8 00 00 00 00	 call	 PyCapsule_IsValid
  00018	85 c0		 test	 eax, eax
  0001a	75 1b		 jne	 SHORT $LN3@create_cod

; 1823 :         PyErr_SetString(PyExc_ValueError, "argument type invalid");

  0001c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00023	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@FPFOACMO@argument?5type?5invalid?$AA@
  0002a	e8 00 00 00 00	 call	 PyErr_SetString
$LN8@create_cod:

; 1824 :         return NULL;

  0002f	33 c0		 xor	 eax, eax

; 1835 : 
; 1836 :     return (PyObject *)self;
; 1837 : }

  00031	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00035	5b		 pop	 rbx
  00036	c3		 ret	 0
$LN3@create_cod:

; 1825 :     }
; 1826 : 
; 1827 :     codec = PyCapsule_GetPointer(arg, PyMultibyteCodec_CAPSULE_NAME);

  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@MFGEOELK@multibytecodec?4__map_?$CK?$AA@
  0003e	48 8b cb	 mov	 rcx, rbx
  00041	e8 00 00 00 00	 call	 PyCapsule_GetPointer
  00046	48 8b d8	 mov	 rbx, rax

; 1828 :     if (codec->codecinit != NULL && codec->codecinit(codec->config) != 0)

  00049	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0004d	48 85 c0	 test	 rax, rax
  00050	74 0a		 je	 SHORT $LN2@create_cod
  00052	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  00056	ff d0		 call	 rax
  00058	85 c0		 test	 eax, eax

; 1829 :         return NULL;

  0005a	75 d3		 jne	 SHORT $LN8@create_cod
$LN2@create_cod:

; 1830 : 
; 1831 :     self = PyObject_New(MultibyteCodecObject, &MultibyteCodec_Type);

  0005c	e8 00 00 00 00	 call	 _Py_PXCTX
  00061	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:MultibyteCodec_Type
  00068	85 c0		 test	 eax, eax
  0006a	74 07		 je	 SHORT $LN6@create_cod
  0006c	e8 00 00 00 00	 call	 _PxObject_New
  00071	eb 05		 jmp	 SHORT $LN7@create_cod
$LN6@create_cod:
  00073	e8 00 00 00 00	 call	 _PyObject_New
$LN7@create_cod:

; 1832 :     if (self == NULL)

  00078	48 85 c0	 test	 rax, rax

; 1833 :         return NULL;

  0007b	74 b2		 je	 SHORT $LN8@create_cod

; 1834 :     self->codec = codec;

  0007d	48 89 58 60	 mov	 QWORD PTR [rax+96], rbx

; 1835 : 
; 1836 :     return (PyObject *)self;
; 1837 : }

  00081	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00085	5b		 pop	 rbx
  00086	c3		 ret	 0
__create_codec ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CM@MIMLPEL@can?8t?5initialize?5the?5_multibytec@ ; `string'
PUBLIC	PyInit__multibytecodec
EXTRN	Py_FatalError:PROC
EXTRN	PyModule_AddObject:PROC
EXTRN	PyModule_Create2:PROC
EXTRN	PyType_Ready:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyInit__multibytecodec DD imagerel $LN19
	DD	imagerel $LN19+99
	DD	imagerel $unwind$PyInit__multibytecodec
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyInit__multibytecodec DD imagerel $LN19+99
	DD	imagerel $LN19+128
	DD	imagerel $chain$0$PyInit__multibytecodec
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyInit__multibytecodec DD imagerel $LN19+128
	DD	imagerel $LN19+289
	DD	imagerel $chain$3$PyInit__multibytecodec
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$PyInit__multibytecodec DD imagerel $LN19+289
	DD	imagerel $LN19+307
	DD	imagerel $chain$5$PyInit__multibytecodec
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$PyInit__multibytecodec DD 040021H
	DD	0f7400H
	DD	0e6400H
	DD	imagerel $LN19
	DD	imagerel $LN19+99
	DD	imagerel $unwind$PyInit__multibytecodec
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyInit__multibytecodec DD 040521H
	DD	0e6405H
	DD	0f7400H
	DD	imagerel $LN19
	DD	imagerel $LN19+99
	DD	imagerel $unwind$PyInit__multibytecodec
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyInit__multibytecodec DD 020521H
	DD	0f7405H
	DD	imagerel $LN19
	DD	imagerel $LN19+99
	DD	imagerel $unwind$PyInit__multibytecodec
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit__multibytecodec DD 020601H
	DD	03002b206H
xdata	ENDS
;	COMDAT ??_C@_0CM@MIMLPEL@can?8t?5initialize?5the?5_multibytec@
CONST	SEGMENT
??_C@_0CM@MIMLPEL@can?8t?5initialize?5the?5_multibytec@ DB 'can''t initia'
	DB	'lize the _multibytecodec module', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\cjkcodecs\multibytecodec.c
CONST	ENDS
;	COMDAT PyInit__multibytecodec
_TEXT	SEGMENT
typelist$ = 48
PyInit__multibytecodec PROC				; COMDAT

; 1859 : {

$LN19:
  00000	40 53		 push	 rbx
  00002	48 83 ec 60	 sub	 rsp, 96			; 00000060H

; 1860 :     int i;
; 1861 :     PyObject *m;
; 1862 :     PyTypeObject *typelist[] = {
; 1863 :         &MultibyteIncrementalEncoder_Type,
; 1864 :         &MultibyteIncrementalDecoder_Type,

  00006	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:MultibyteIncrementalDecoder_Type
  0000d	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:MultibyteIncrementalEncoder_Type

; 1865 :         &MultibyteStreamReader_Type,
; 1866 :         &MultibyteStreamWriter_Type,
; 1867 :         NULL
; 1868 :     };
; 1869 : 
; 1870 :     if (PyType_Ready(&MultibyteCodec_Type) < 0)

  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:MultibyteCodec_Type
  0001b	48 89 44 24 38	 mov	 QWORD PTR typelist$[rsp+8], rax
  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:MultibyteStreamReader_Type
  00027	48 89 5c 24 30	 mov	 QWORD PTR typelist$[rsp], rbx
  0002c	48 89 44 24 40	 mov	 QWORD PTR typelist$[rsp+16], rax
  00031	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:MultibyteStreamWriter_Type
  00038	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR typelist$[rsp+32], 0
  00041	48 89 44 24 48	 mov	 QWORD PTR typelist$[rsp+24], rax
  00046	e8 00 00 00 00	 call	 PyType_Ready
  0004b	85 c0		 test	 eax, eax
  0004d	79 08		 jns	 SHORT $LN7@PyInit__mu

; 1871 :         return NULL;

  0004f	33 c0		 xor	 eax, eax

; 1891 : }

  00051	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00055	5b		 pop	 rbx
  00056	c3		 ret	 0
$LN7@PyInit__mu:

; 1872 : 
; 1873 :     m = PyModule_Create(&_multibytecodecmodule);

  00057	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_multibytecodecmodule
  0005e	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00063	48 89 7c 24 78	 mov	 QWORD PTR [rsp+120], rdi
  00068	e8 00 00 00 00	 call	 PyModule_Create2
  0006d	48 8b f8	 mov	 rdi, rax

; 1874 :     if (m == NULL)

  00070	48 85 c0	 test	 rax, rax
  00073	75 0b		 jne	 SHORT $LN6@PyInit__mu
  00075	48 8b 7c 24 78	 mov	 rdi, QWORD PTR [rsp+120]

; 1891 : }

  0007a	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0007e	5b		 pop	 rbx
  0007f	c3		 ret	 0
$LN6@PyInit__mu:
  00080	48 89 74 24 70	 mov	 QWORD PTR [rsp+112], rsi

; 1875 :         return NULL;
; 1876 : 
; 1877 :     for (i = 0; typelist[i] != NULL; i++) {

  00085	33 f6		 xor	 esi, esi
$LL5@PyInit__mu:

; 1878 :         if (PyType_Ready(typelist[i]) < 0)

  00087	48 8b cb	 mov	 rcx, rbx
  0008a	e8 00 00 00 00	 call	 PyType_Ready
  0008f	85 c0		 test	 eax, eax
  00091	0f 88 8a 00 00
	00		 js	 $LN15@PyInit__mu

; 1880 :         Py_INCREF(typelist[i]);

  00097	e8 00 00 00 00	 call	 _Py_PXCTX
  0009c	85 c0		 test	 eax, eax
  0009e	75 32		 jne	 SHORT $LN11@PyInit__mu
  000a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000ae	4c 8b cb	 mov	 r9, rbx
  000b1	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000b7	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000bf	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c4	85 c0		 test	 eax, eax
  000c6	75 06		 jne	 SHORT $LN10@PyInit__mu
  000c8	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000cc	74 04		 je	 SHORT $LN11@PyInit__mu
$LN10@PyInit__mu:
  000ce	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN11@PyInit__mu:

; 1881 :         PyModule_AddObject(m, typelist[i]->tp_name,
; 1882 :                            (PyObject *)typelist[i]);

  000d2	48 8b 53 70	 mov	 rdx, QWORD PTR [rbx+112]
  000d6	4c 8b c3	 mov	 r8, rbx
  000d9	48 8b cf	 mov	 rcx, rdi
  000dc	e8 00 00 00 00	 call	 PyModule_AddObject
  000e1	48 8b 5c f4 38	 mov	 rbx, QWORD PTR typelist$[rsp+rsi*8+8]
  000e6	48 ff c6	 inc	 rsi
  000e9	48 85 db	 test	 rbx, rbx
  000ec	75 99		 jne	 SHORT $LL5@PyInit__mu

; 1883 :     }
; 1884 : 
; 1885 :     if (PyErr_Occurred()) {

  000ee	e8 00 00 00 00	 call	 PyErr_Occurred
  000f3	48 85 c0	 test	 rax, rax
  000f6	74 16		 je	 SHORT $LN1@PyInit__mu

; 1886 :         Py_FatalError("can't initialize the _multibytecodec module");

  000f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CM@MIMLPEL@can?8t?5initialize?5the?5_multibytec@
  000ff	e8 00 00 00 00	 call	 Py_FatalError

; 1887 :         Py_DECREF(m);

  00104	48 8b cf	 mov	 rcx, rdi
  00107	e8 00 00 00 00	 call	 _Py_DecRef

; 1888 :         m = NULL;

  0010c	33 ff		 xor	 edi, edi
$LN1@PyInit__mu:

; 1889 :     }
; 1890 :     return m;

  0010e	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
  00113	48 8b c7	 mov	 rax, rdi
  00116	48 8b 7c 24 78	 mov	 rdi, QWORD PTR [rsp+120]

; 1891 : }

  0011b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0011f	5b		 pop	 rbx
  00120	c3		 ret	 0
$LN15@PyInit__mu:
  00121	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
  00126	48 8b 7c 24 78	 mov	 rdi, QWORD PTR [rsp+120]

; 1879 :             return NULL;

  0012b	33 c0		 xor	 eax, eax

; 1891 : }

  0012d	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00131	5b		 pop	 rbx
  00132	c3		 ret	 0
PyInit__multibytecodec ENDP
_TEXT	ENDS
END
