; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_08OCOMCJAJ@builtins?$AA@			; `string'
PUBLIC	??_C@_04JPLCBLOA@vars?$AA@			; `string'
PUBLIC	??_C@_03CFFIJAMA@sum?$AA@			; `string'
PUBLIC	??_C@_06GOHDHELE@sorted?$AA@			; `string'
PUBLIC	??_C@_07PPMBCILO@setattr?$AA@			; `string'
PUBLIC	??_C@_05MIMAKCN@round?$AA@			; `string'
PUBLIC	??_C@_04PPMPMPFI@repr?$AA@			; `string'
PUBLIC	??_C@_05IJDJACGD@print?$AA@			; `string'
PUBLIC	??_C@_03JGHBODFD@pow?$AA@			; `string'
PUBLIC	??_C@_03OLBKNFCL@ord?$AA@			; `string'
PUBLIC	??_C@_03LMDMAODN@oct?$AA@			; `string'
PUBLIC	??_C@_04CJGEDOF@next?$AA@			; `string'
PUBLIC	??_C@_03KLIPLJLL@min?$AA@			; `string'
PUBLIC	??_C@_03LJAEFNNE@max?$AA@			; `string'
PUBLIC	??_C@_03BKCJCHLK@len?$AA@			; `string'
PUBLIC	??_C@_04BKLHDIKK@iter?$AA@			; `string'
PUBLIC	??_C@_0L@JALFGOPP@issubclass?$AA@		; `string'
PUBLIC	??_C@_0L@PHLNOMHE@isinstance?$AA@		; `string'
PUBLIC	??_C@_05DFJCHPDH@input?$AA@			; `string'
PUBLIC	??_C@_02EGCJHIOB@id?$AA@			; `string'
PUBLIC	??_C@_03IJNDAFDK@hex?$AA@			; `string'
PUBLIC	??_C@_04OIJGJDKO@hash?$AA@			; `string'
PUBLIC	??_C@_07DHFKBBGI@hasattr?$AA@			; `string'
PUBLIC	??_C@_07HDABHGP@getattr?$AA@			; `string'
PUBLIC	??_C@_06DLEPGFEF@format?$AA@			; `string'
PUBLIC	??_C@_04MGEIEJAD@exec?$AA@			; `string'
PUBLIC	??_C@_04KGAGIKCD@eval?$AA@			; `string'
PUBLIC	??_C@_06MPFFAOOK@divmod?$AA@			; `string'
PUBLIC	??_C@_03DAPAKLGM@dir?$AA@			; `string'
PUBLIC	??_C@_07GGDKJAHK@delattr?$AA@			; `string'
PUBLIC	??_C@_07OLJGFCKG@compile?$AA@			; `string'
PUBLIC	??_C@_03KMOFPJOC@chr?$AA@			; `string'
PUBLIC	??_C@_08DPEDNDHG@callable?$AA@			; `string'
PUBLIC	??_C@_03PDOMKJON@bin?$AA@			; `string'
PUBLIC	??_C@_05OJENGABA@ascii?$AA@			; `string'
PUBLIC	??_C@_03OBJFJEBA@any?$AA@			; `string'
PUBLIC	??_C@_03NFKEKGGK@all?$AA@			; `string'
PUBLIC	??_C@_03BCGAIFPO@abs?$AA@			; `string'
PUBLIC	??_C@_0L@KEEJPJHH@__import__?$AA@		; `string'
PUBLIC	??_C@_0BA@JDLNCAMO@__build_class__?$AA@		; `string'
PUBLIC	??_C@_03LCAAOJEC@zip?$AA@			; `string'
PUBLIC	??_C@_08IBFKALI@__dict__?$AA@			; `string'
PUBLIC	??_C@_04PIMMHFGE@sort?$AA@			; `string'
PUBLIC	??_C@_07KOIEOCCE@reverse?$AA@			; `string'
PUBLIC	??_C@_03ICHNJLJF@key?$AA@			; `string'
PUBLIC	??_C@_08DCHCEAJP@iterable?$AA@			; `string'
PUBLIC	??_C@_07DFGIFNBG@ndigits?$AA@			; `string'
PUBLIC	??_C@_06EBGNBFIA@number?$AA@			; `string'
PUBLIC	??_C@_06EOMHCNPI@errors?$AA@			; `string'
PUBLIC	??_C@_08MLPGAEIK@encoding?$AA@			; `string'
PUBLIC	??_C@_04DAMGJPCA@file?$AA@			; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_03MGBCFPKM@sep?$AA@			; `string'
PUBLIC	??_C@_03HBNNNHNM@map?$AA@			; `string'
PUBLIC	??_C@_08GHMAOHAP@optimize?$AA@			; `string'
PUBLIC	??_C@_0N@FINHDBNP@dont_inherit?$AA@		; `string'
PUBLIC	??_C@_05GECEPKB@flags?$AA@			; `string'
PUBLIC	??_C@_04GMGOKAFF@mode?$AA@			; `string'
PUBLIC	??_C@_08BABJIOEM@filename?$AA@			; `string'
PUBLIC	??_C@_06OEKOLKIL@source?$AA@			; `string'
PUBLIC	??_C@_06EOIELIPE@filter?$AA@			; `string'
PUBLIC	??_C@_0L@NNMACJIG@__reduce__?$AA@		; `string'
PUBLIC	??_C@_05KJNJLLGA@level?$AA@			; `string'
PUBLIC	??_C@_08BGGGONCE@fromlist?$AA@			; `string'
PUBLIC	??_C@_06MPPADOBF@locals?$AA@			; `string'
PUBLIC	??_C@_07NAPALOBA@globals?$AA@			; `string'
PUBLIC	??_C@_04MEMAJGDJ@name?$AA@			; `string'
PUBLIC	??_C@_0M@GLHNIFEH@__prepare__?$AA@		; `string'
PUBLIC	??_C@_05GLCAEPFP@flush?$AA@			; `string'
PUBLIC	??_C@_06FFBIALPD@fileno?$AA@			; `string'
PUBLIC	??_C@_04IHNDNLNK@mbcs?$AA@			; `string'
PUBLIC	Py_FileSystemDefaultEncoding
PUBLIC	Py_HasFileSystemDefaultEncoding
PUBLIC	PyFilter_Type
PUBLIC	PyMap_Type
PUBLIC	PyZip_Type
EXTRN	PyObject_GC_Del:PROC
EXTRN	PyType_GenericAlloc:PROC
EXTRN	PyObject_SelfIter:PROC
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
_BSS	SEGMENT
?round_str@?1??builtin_round@@9@9 DQ 01H DUP (?)	; `builtin_round'::`2'::round_str
_BSS	ENDS
;	COMDAT ??_C@_08OCOMCJAJ@builtins?$AA@
CONST	SEGMENT
??_C@_08OCOMCJAJ@builtins?$AA@ DB 'builtins', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04JPLCBLOA@vars?$AA@
CONST	SEGMENT
??_C@_04JPLCBLOA@vars?$AA@ DB 'vars', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CFFIJAMA@sum?$AA@
CONST	SEGMENT
??_C@_03CFFIJAMA@sum?$AA@ DB 'sum', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06GOHDHELE@sorted?$AA@
CONST	SEGMENT
??_C@_06GOHDHELE@sorted?$AA@ DB 'sorted', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07PPMBCILO@setattr?$AA@
CONST	SEGMENT
??_C@_07PPMBCILO@setattr?$AA@ DB 'setattr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MIMAKCN@round?$AA@
CONST	SEGMENT
??_C@_05MIMAKCN@round?$AA@ DB 'round', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PPMPMPFI@repr?$AA@
CONST	SEGMENT
??_C@_04PPMPMPFI@repr?$AA@ DB 'repr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IJDJACGD@print?$AA@
CONST	SEGMENT
??_C@_05IJDJACGD@print?$AA@ DB 'print', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JGHBODFD@pow?$AA@
CONST	SEGMENT
??_C@_03JGHBODFD@pow?$AA@ DB 'pow', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03OLBKNFCL@ord?$AA@
CONST	SEGMENT
??_C@_03OLBKNFCL@ord?$AA@ DB 'ord', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03LMDMAODN@oct?$AA@
CONST	SEGMENT
??_C@_03LMDMAODN@oct?$AA@ DB 'oct', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04CJGEDOF@next?$AA@
CONST	SEGMENT
??_C@_04CJGEDOF@next?$AA@ DB 'next', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KLIPLJLL@min?$AA@
CONST	SEGMENT
??_C@_03KLIPLJLL@min?$AA@ DB 'min', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03LJAEFNNE@max?$AA@
CONST	SEGMENT
??_C@_03LJAEFNNE@max?$AA@ DB 'max', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03BKCJCHLK@len?$AA@
CONST	SEGMENT
??_C@_03BKCJCHLK@len?$AA@ DB 'len', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04BKLHDIKK@iter?$AA@
CONST	SEGMENT
??_C@_04BKLHDIKK@iter?$AA@ DB 'iter', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JALFGOPP@issubclass?$AA@
CONST	SEGMENT
??_C@_0L@JALFGOPP@issubclass?$AA@ DB 'issubclass', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PHLNOMHE@isinstance?$AA@
CONST	SEGMENT
??_C@_0L@PHLNOMHE@isinstance?$AA@ DB 'isinstance', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05DFJCHPDH@input?$AA@
CONST	SEGMENT
??_C@_05DFJCHPDH@input?$AA@ DB 'input', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EGCJHIOB@id?$AA@
CONST	SEGMENT
??_C@_02EGCJHIOB@id?$AA@ DB 'id', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IJNDAFDK@hex?$AA@
CONST	SEGMENT
??_C@_03IJNDAFDK@hex?$AA@ DB 'hex', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OIJGJDKO@hash?$AA@
CONST	SEGMENT
??_C@_04OIJGJDKO@hash?$AA@ DB 'hash', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DHFKBBGI@hasattr?$AA@
CONST	SEGMENT
??_C@_07DHFKBBGI@hasattr?$AA@ DB 'hasattr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HDABHGP@getattr?$AA@
CONST	SEGMENT
??_C@_07HDABHGP@getattr?$AA@ DB 'getattr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DLEPGFEF@format?$AA@
CONST	SEGMENT
??_C@_06DLEPGFEF@format?$AA@ DB 'format', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MGEIEJAD@exec?$AA@
CONST	SEGMENT
??_C@_04MGEIEJAD@exec?$AA@ DB 'exec', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KGAGIKCD@eval?$AA@
CONST	SEGMENT
??_C@_04KGAGIKCD@eval?$AA@ DB 'eval', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MPFFAOOK@divmod?$AA@
CONST	SEGMENT
??_C@_06MPFFAOOK@divmod?$AA@ DB 'divmod', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DAPAKLGM@dir?$AA@
CONST	SEGMENT
??_C@_03DAPAKLGM@dir?$AA@ DB 'dir', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07GGDKJAHK@delattr?$AA@
CONST	SEGMENT
??_C@_07GGDKJAHK@delattr?$AA@ DB 'delattr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OLJGFCKG@compile?$AA@
CONST	SEGMENT
??_C@_07OLJGFCKG@compile?$AA@ DB 'compile', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KMOFPJOC@chr?$AA@
CONST	SEGMENT
??_C@_03KMOFPJOC@chr?$AA@ DB 'chr', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08DPEDNDHG@callable?$AA@
CONST	SEGMENT
??_C@_08DPEDNDHG@callable?$AA@ DB 'callable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03PDOMKJON@bin?$AA@
CONST	SEGMENT
??_C@_03PDOMKJON@bin?$AA@ DB 'bin', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OJENGABA@ascii?$AA@
CONST	SEGMENT
??_C@_05OJENGABA@ascii?$AA@ DB 'ascii', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03OBJFJEBA@any?$AA@
CONST	SEGMENT
??_C@_03OBJFJEBA@any?$AA@ DB 'any', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NFKEKGGK@all?$AA@
CONST	SEGMENT
??_C@_03NFKEKGGK@all?$AA@ DB 'all', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03BCGAIFPO@abs?$AA@
CONST	SEGMENT
??_C@_03BCGAIFPO@abs?$AA@ DB 'abs', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KEEJPJHH@__import__?$AA@
CONST	SEGMENT
??_C@_0L@KEEJPJHH@__import__?$AA@ DB '__import__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JDLNCAMO@__build_class__?$AA@
CONST	SEGMENT
??_C@_0BA@JDLNCAMO@__build_class__?$AA@ DB '__build_class__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03LCAAOJEC@zip?$AA@
CONST	SEGMENT
??_C@_03LCAAOJEC@zip?$AA@ DB 'zip', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08IBFKALI@__dict__?$AA@
CONST	SEGMENT
??_C@_08IBFKALI@__dict__?$AA@ DB '__dict__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04PIMMHFGE@sort?$AA@
CONST	SEGMENT
??_C@_04PIMMHFGE@sort?$AA@ DB 'sort', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KOIEOCCE@reverse?$AA@
CONST	SEGMENT
??_C@_07KOIEOCCE@reverse?$AA@ DB 'reverse', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03ICHNJLJF@key?$AA@
CONST	SEGMENT
??_C@_03ICHNJLJF@key?$AA@ DB 'key', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08DCHCEAJP@iterable?$AA@
CONST	SEGMENT
??_C@_08DCHCEAJP@iterable?$AA@ DB 'iterable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DFGIFNBG@ndigits?$AA@
CONST	SEGMENT
??_C@_07DFGIFNBG@ndigits?$AA@ DB 'ndigits', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EBGNBFIA@number?$AA@
CONST	SEGMENT
??_C@_06EBGNBFIA@number?$AA@ DB 'number', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EOMHCNPI@errors?$AA@
CONST	SEGMENT
??_C@_06EOMHCNPI@errors?$AA@ DB 'errors', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MLPGAEIK@encoding?$AA@
CONST	SEGMENT
??_C@_08MLPGAEIK@encoding?$AA@ DB 'encoding', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04DAMGJPCA@file?$AA@
CONST	SEGMENT
??_C@_04DAMGJPCA@file?$AA@ DB 'file', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MGBCFPKM@sep?$AA@
CONST	SEGMENT
??_C@_03MGBCFPKM@sep?$AA@ DB 'sep', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03HBNNNHNM@map?$AA@
CONST	SEGMENT
??_C@_03HBNNNHNM@map?$AA@ DB 'map', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08GHMAOHAP@optimize?$AA@
CONST	SEGMENT
??_C@_08GHMAOHAP@optimize?$AA@ DB 'optimize', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FINHDBNP@dont_inherit?$AA@
CONST	SEGMENT
??_C@_0N@FINHDBNP@dont_inherit?$AA@ DB 'dont_inherit', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05GECEPKB@flags?$AA@
CONST	SEGMENT
??_C@_05GECEPKB@flags?$AA@ DB 'flags', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GMGOKAFF@mode?$AA@
CONST	SEGMENT
??_C@_04GMGOKAFF@mode?$AA@ DB 'mode', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BABJIOEM@filename?$AA@
CONST	SEGMENT
??_C@_08BABJIOEM@filename?$AA@ DB 'filename', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06OEKOLKIL@source?$AA@
CONST	SEGMENT
??_C@_06OEKOLKIL@source?$AA@ DB 'source', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EOIELIPE@filter?$AA@
CONST	SEGMENT
??_C@_06EOIELIPE@filter?$AA@ DB 'filter', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNMACJIG@__reduce__?$AA@
CONST	SEGMENT
??_C@_0L@NNMACJIG@__reduce__?$AA@ DB '__reduce__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05KJNJLLGA@level?$AA@
CONST	SEGMENT
??_C@_05KJNJLLGA@level?$AA@ DB 'level', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BGGGONCE@fromlist?$AA@
CONST	SEGMENT
??_C@_08BGGGONCE@fromlist?$AA@ DB 'fromlist', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06MPPADOBF@locals?$AA@
CONST	SEGMENT
??_C@_06MPPADOBF@locals?$AA@ DB 'locals', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NAPALOBA@globals?$AA@
CONST	SEGMENT
??_C@_07NAPALOBA@globals?$AA@ DB 'globals', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MEMAJGDJ@name?$AA@
CONST	SEGMENT
??_C@_04MEMAJGDJ@name?$AA@ DB 'name', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GLHNIFEH@__prepare__?$AA@
CONST	SEGMENT
??_C@_0M@GLHNIFEH@__prepare__?$AA@ DB '__prepare__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05GLCAEPFP@flush?$AA@
CONST	SEGMENT
??_C@_05GLCAEPFP@flush?$AA@ DB 'flush', 00H		; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId_errors@?9??builtin_input@@9@9 DQ 0000000000000000H ; `builtin_input'::`10'::PyId_errors
	DQ	FLAT:??_C@_06EOMHCNPI@errors?$AA@
	DQ	0000000000000000H
?PyId_encoding@?9??builtin_input@@9@9 DQ 0000000000000000H ; `builtin_input'::`10'::PyId_encoding
	DQ	FLAT:??_C@_08MLPGAEIK@encoding?$AA@
	DQ	0000000000000000H
PyId_flush DQ	0000000000000000H
	DQ	FLAT:??_C@_05GLCAEPFP@flush?$AA@
	DQ	0000000000000000H
?PyId___dict__@?4??builtin_vars@@9@9 DQ 0000000000000000H ; `builtin_vars'::`5'::PyId___dict__
	DQ	FLAT:??_C@_08IBFKALI@__dict__?$AA@
	DQ	0000000000000000H
?PyId_sort@?1??builtin_sorted@@9@9 DQ 0000000000000000H	; `builtin_sorted'::`2'::PyId_sort
	DQ	FLAT:??_C@_04PIMMHFGE@sort?$AA@
	DQ	0000000000000000H
?PyId___prepare__@?1??builtin___build_class__@@9@9 DQ 0000000000000000H ; `builtin___build_class__'::`2'::PyId___prepare__
	DQ	FLAT:??_C@_0M@GLHNIFEH@__prepare__?$AA@
	DQ	0000000000000000H
PyId_fileno DQ	0000000000000000H
	DQ	FLAT:??_C@_06FFBIALPD@fileno?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_06FFBIALPD@fileno?$AA@
CONST	SEGMENT
??_C@_06FFBIALPD@fileno?$AA@ DB 'fileno', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
Py_FileSystemDefaultEncoding DQ FLAT:??_C@_04IHNDNLNK@mbcs?$AA@
Py_HasFileSystemDefaultEncoding DD 01H
	ORG $+4
build_class_doc DB '__build_class__(func, name, *bases, metaclass=None, *'
	DB	'*kwds) -> class', 0aH, 0aH, 'Internal helper function used by'
	DB	' the class statement.', 00H
	ORG $+4
?kwlist@?1??builtin___import__@@9@9 DQ FLAT:??_C@_04MEMAJGDJ@name?$AA@ ; `builtin___import__'::`2'::kwlist
	DQ	FLAT:??_C@_07NAPALOBA@globals?$AA@
	DQ	FLAT:??_C@_06MPPADOBF@locals?$AA@
	DQ	FLAT:??_C@_08BGGGONCE@fromlist?$AA@
	DQ	FLAT:??_C@_05KJNJLLGA@level?$AA@
	DQ	0000000000000000H
import_doc DB	'__import__(name, globals=None, locals=None, fromlist=(),'
	DB	' level=0) -> module', 0aH, 0aH, 'Import a module. Because thi'
	DB	's function is meant for use by the Python', 0aH, 'interpreter'
	DB	' and not for general use it is better to use', 0aH, 'importli'
	DB	'b.import_module() to programmatically import a module.', 0aH, 0aH
	DB	'The globals argument is only used to determine the context;', 0aH
	DB	'they are not modified.  The locals argument is unused.  The f'
	DB	'romlist', 0aH, 'should be a list of names to emulate ``from n'
	DB	'ame import ...'''', or an', 0aH, 'empty list to emulate ``imp'
	DB	'ort name''''.', 0aH, 'When importing a module from a package,'
	DB	' note that __import__(''A.B'', ...)', 0aH, 'returns package A'
	DB	' when fromlist is empty, but its submodule B when', 0aH, 'fro'
	DB	'mlist is not empty.  Level is used to determine whether to pe'
	DB	'rform ', 0aH, 'absolute or relative imports. 0 is absolute wh'
	DB	'ile a positive number', 0aH, 'is the number of parent directo'
	DB	'ries to search relative to the current module.', 00H
	ORG $+3
abs_doc	DB	'abs(number) -> number', 0aH, 0aH, 'Return the absolute v'
	DB	'alue of the argument.', 00H
	ORG $+14
all_doc	DB	'all(iterable) -> bool', 0aH, 0aH, 'Return True if bool(x'
	DB	') is True for all values x in the iterable.', 0aH, 'If the it'
	DB	'erable is empty, return True.', 00H
	ORG $+1
any_doc	DB	'any(iterable) -> bool', 0aH, 0aH, 'Return True if bool(x'
	DB	') is True for any x in the iterable.', 0aH, 'If the iterable '
	DB	'is empty, return False.', 00H
	ORG $+7
ascii_doc DB	'ascii(object) -> string', 0aH, 0aH, 'As repr(), return a'
	DB	' string containing a printable representation of an', 0aH, 'o'
	DB	'bject, but escape the non-ASCII characters in the string retu'
	DB	'rned by', 0aH, 'repr() using \x, \u or \U escapes.  This gene'
	DB	'rates a string similar', 0aH, 'to that returned by repr() in '
	DB	'Python 2.', 00H
	ORG $+14
bin_doc	DB	'bin(number) -> string', 0aH, 0aH, 'Return the binary rep'
	DB	'resentation of an integer.', 00H
	ORG $+9
callable_doc DB	'callable(object) -> bool', 0aH, 0aH, 'Return whether the'
	DB	' object is callable (i.e., some kind of function).', 0aH, 'No'
	DB	'te that classes are callable, as are instances of classes wit'
	DB	'h a', 0aH, '__call__() method.', 00H
	ORG $+3
reduce_doc DB	'Return state information for pickling.', 00H
	ORG $+1
filter_methods DQ FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:filter_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
filter_doc DB	'filter(function or None, iterable) --> filter object', 0aH
	DB	0aH, 'Return an iterator yielding those items of iterable for '
	DB	'which function(item)', 0aH, 'is true. If function is None, re'
	DB	'turn the items that are true.', 00H
	ORG $+15
PyFilter_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_06EOIELIPE@filter?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:filter_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:filter_doc
	DQ	FLAT:filter_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:filter_next
	DQ	FLAT:filter_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:filter_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
format_doc DB	'format(value[, format_spec]) -> string', 0aH, 0aH, 'Retu'
	DB	'rns value.__format__(format_spec)', 0aH, 'format_spec default'
	DB	's to ""', 00H
	ORG $+7
chr_doc	DB	'chr(i) -> Unicode character', 0aH, 0aH, 'Return a Unicod'
	DB	'e string of one character with ordinal i; 0 <= i <= 0x10ffff.'
	DB	00H
	ORG $+6
?kwlist@?1??builtin_compile@@9@9 DQ FLAT:??_C@_06OEKOLKIL@source?$AA@ ; `builtin_compile'::`2'::kwlist
	DQ	FLAT:??_C@_08BABJIOEM@filename?$AA@
	DQ	FLAT:??_C@_04GMGOKAFF@mode?$AA@
	DQ	FLAT:??_C@_05GECEPKB@flags?$AA@
	DQ	FLAT:??_C@_0N@FINHDBNP@dont_inherit?$AA@
	DQ	FLAT:??_C@_08GHMAOHAP@optimize?$AA@
	DQ	0000000000000000H
	ORG $+8
compile_doc DB	'compile(source, filename, mode[, flags[, dont_inherit]])'
	DB	' -> code object', 0aH, 0aH, 'Compile the source (a Python mod'
	DB	'ule, statement or expression)', 0aH, 'into a code object that'
	DB	' can be executed by exec() or eval().', 0aH, 'The filename wi'
	DB	'll be used for run-time error messages.', 0aH, 'The mode must'
	DB	' be ''exec'' to compile a module, ''single'' to compile a', 0aH
	DB	'single (interactive) statement, or ''eval'' to compile an exp'
	DB	'ression.', 0aH, 'The flags argument, if present, controls whi'
	DB	'ch future statements influence', 0aH, 'the compilation of the'
	DB	' code.', 0aH, 'The dont_inherit argument, if non-zero, stops '
	DB	'the compilation inheriting', 0aH, 'the effects of any future '
	DB	'statements in effect in the code calling', 0aH, 'compile; if '
	DB	'absent or zero these statements do influence the compilation,'
	DB	0aH, 'in addition to any features explicitly specified.', 00H
	ORG $+14
dir_doc	DB	'dir([object]) -> list of strings', 0aH, 0aH, 'If called '
	DB	'without an argument, return the names in the current scope.', 0aH
	DB	'Else, return an alphabetized list of names comprising (some o'
	DB	'f) the attributes', 0aH, 'of the given object, and of attribu'
	DB	'tes reachable from it.', 0aH, 'If the object supplies a metho'
	DB	'd named __dir__, it will be used; otherwise', 0aH, 'the defau'
	DB	'lt dir() logic is used and returns:', 0aH, '  for a module ob'
	DB	'ject: the module''s attributes.', 0aH, '  for a class object:'
	DB	'  its attributes, and recursively the attributes', 0aH, '    '
	DB	'of its bases.', 0aH, '  for any other object: its attributes,'
	DB	' its class''s attributes, and', 0aH, '    recursively the att'
	DB	'ributes of its class''s base classes.', 00H
divmod_doc DB	'divmod(x, y) -> (div, mod)', 0aH, 0aH, 'Return the tuple'
	DB	' ((x-x%y)/y, x%y).  Invariant: div*y + mod == x.', 00H
	ORG $+3
eval_doc DB	'eval(source[, globals[, locals]]) -> value', 0aH, 0aH, 'E'
	DB	'valuate the source in the context of globals and locals.', 0aH
	DB	'The source may be a string representing a Python expression', 0aH
	DB	'or a code object as returned by compile().', 0aH, 'The global'
	DB	's must be a dictionary and locals can be any mapping,', 0aH, 'd'
	DB	'efaulting to the current globals and locals.', 0aH, 'If only '
	DB	'globals is given, locals defaults to it.', 0aH, 00H
	ORG $+3
exec_doc DB	'exec(object[, globals[, locals]])', 0aH, 0aH, 'Read and '
	DB	'execute code from an object, which can be a string or a code', 0aH
	DB	'object.', 0aH, 'The globals and locals are dictionaries, defa'
	DB	'ulting to the current', 0aH, 'globals and locals.  If only gl'
	DB	'obals is given, locals defaults to it.', 00H
	ORG $+6
getattr_doc DB	'getattr(object, name[, default]) -> value', 0aH, 0aH, 'G'
	DB	'et a named attribute from an object; getattr(x, ''y'') is equ'
	DB	'ivalent to x.y.', 0aH, 'When a default argument is given, it '
	DB	'is returned when the attribute doesn''t', 0aH, 'exist; withou'
	DB	't it, an exception is raised in that case.', 00H
	ORG $+5
globals_doc DB	'globals() -> dictionary', 0aH, 0aH, 'Return the dictiona'
	DB	'ry containing the current scope''s global variables.', 00H
hasattr_doc DB	'hasattr(object, name) -> bool', 0aH, 0aH, 'Return whethe'
	DB	'r the object has an attribute with the given name.', 0aH, '(T'
	DB	'his is done by calling getattr(object, name) and catching Att'
	DB	'ributeError.)', 00H
	ORG $+4
id_doc	DB	'id(object) -> integer', 0aH, 0aH, 'Return the identity o'
	DB	'f an object.  This is guaranteed to be unique among', 0aH, 's'
	DB	'imultaneously existing objects.  (Hint: it''s the object''s m'
	DB	'emory address.)', 00H
	ORG $+4
map_methods DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:map_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
map_doc	DB	'map(func, *iterables) --> map object', 0aH, 0aH, 'Make a'
	DB	'n iterator that computes the function using arguments from', 0aH
	DB	'each of the iterables.  Stops when the shortest iterable is e'
	DB	'xhausted.', 00H
	ORG $+2
PyMap_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_03HBNNNHNM@map?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:map_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:map_doc
	DQ	FLAT:map_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:map_next
	DQ	FLAT:map_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:map_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
next_doc DB	'next(iterator[, default])', 0aH, 0aH, 'Return the next i'
	DB	'tem from the iterator. If default is given and the iterator', 0aH
	DB	'is exhausted, it is returned instead of raising StopIteration'
	DB	'.', 00H
	ORG $+9
setattr_doc DB	'setattr(object, name, value)', 0aH, 0aH, 'Set a named at'
	DB	'tribute on an object; setattr(x, ''y'', v) is equivalent to', 0aH
	DB	'``x.y = v''''.', 00H
	ORG $+13
delattr_doc DB	'delattr(object, name)', 0aH, 0aH, 'Delete a named attrib'
	DB	'ute on an object; delattr(x, ''y'') is equivalent to', 0aH, '`'
	DB	'`del x.y''''.', 00H
	ORG $+4
hash_doc DB	'hash(object) -> integer', 0aH, 0aH, 'Return a hash value'
	DB	' for the object.  Two objects with the same value have', 0aH, 't'
	DB	'he same hash value.  The reverse is not necessarily true, but'
	DB	' likely.', 00H
	ORG $+6
hex_doc	DB	'hex(number) -> string', 0aH, 0aH, 'Return the hexadecima'
	DB	'l representation of an integer.', 00H
	ORG $+4
iter_doc DB	'iter(iterable) -> iterator', 0aH, 'iter(callable, sentin'
	DB	'el) -> iterator', 0aH, 0aH, 'Get an iterator from an object. '
	DB	' In the first form, the argument must', 0aH, 'supply its own '
	DB	'iterator, or be a sequence.', 0aH, 'In the second form, the c'
	DB	'allable is called until it returns the sentinel.', 00H
	ORG $+4
len_doc	DB	'len(object) -> integer', 0aH, 0aH, 'Return the number of'
	DB	' items of a sequence or mapping.', 00H
	ORG $+3
locals_doc DB	'locals() -> dictionary', 0aH, 0aH, 'Update and return a '
	DB	'dictionary containing the current scope''s local variables.', 00H
	ORG $+9
min_doc	DB	'min(iterable[, key=func]) -> value', 0aH, 'min(a, b, c, '
	DB	'...[, key=func]) -> value', 0aH, 0aH, 'With a single iterable'
	DB	' argument, return its smallest item.', 0aH, 'With two or more'
	DB	' arguments, return the smallest argument.', 00H
max_doc	DB	'max(iterable[, key=func]) -> value', 0aH, 'max(a, b, c, '
	DB	'...[, key=func]) -> value', 0aH, 0aH, 'With a single iterable'
	DB	' argument, return its largest item.', 0aH, 'With two or more '
	DB	'arguments, return the largest argument.', 00H
	ORG $+2
oct_doc	DB	'oct(number) -> string', 0aH, 0aH, 'Return the octal repr'
	DB	'esentation of an integer.', 00H
	ORG $+10
ord_doc	DB	'ord(c) -> integer', 0aH, 0aH, 'Return the integer ordina'
	DB	'l of a one-character string.', 00H
	ORG $+7
pow_doc	DB	'pow(x, y[, z]) -> number', 0aH, 0aH, 'With two arguments'
	DB	', equivalent to x**y.  With three arguments,', 0aH, 'equivale'
	DB	'nt to (x**y) % z, but may be more efficient (e.g. for ints).', 00H
	ORG $+2
?kwlist@?1??builtin_print@@9@9 DQ FLAT:??_C@_03MGBCFPKM@sep?$AA@ ; `builtin_print'::`2'::kwlist
	DQ	FLAT:??_C@_03JBJLGPFL@end?$AA@
	DQ	FLAT:??_C@_04DAMGJPCA@file?$AA@
	DQ	FLAT:??_C@_05GLCAEPFP@flush?$AA@
	DQ	0000000000000000H
	ORG $+8
print_doc DB	'print(value, ..., sep='' '', end=''\n'', file=sys.stdout'
	DB	', flush=False)', 0aH, 0aH, 'Prints the values to a stream, or'
	DB	' to sys.stdout by default.', 0aH, 'Optional keyword arguments'
	DB	':', 0aH, 'file:  a file-like object (stream); defaults to the'
	DB	' current sys.stdout.', 0aH, 'sep:   string inserted between v'
	DB	'alues, default a space.', 0aH, 'end:   string appended after '
	DB	'the last value, default a newline.', 0aH, 'flush: whether to '
	DB	'forcibly flush the stream.', 00H
	ORG $+7
input_doc DB	'input([prompt]) -> string', 0aH, 0aH, 'Read a string fro'
	DB	'm standard input.  The trailing newline is stripped.', 0aH, 'I'
	DB	'f the user hits EOF (Unix: Ctl-D, Windows: Ctl-Z+Return), rai'
	DB	'se EOFError.', 0aH, 'On Unix, GNU readline is used if enabled'
	DB	'.  The prompt string, if given,', 0aH, 'is printed without a '
	DB	'trailing newline before reading.', 00H
	ORG $+6
repr_doc DB	'repr(object) -> string', 0aH, 0aH, 'Return the canonical'
	DB	' string representation of the object.', 0aH, 'For most object'
	DB	' types, eval(repr(object)) == object.', 00H
	ORG $+1
?kwlist@?1??builtin_round@@9@9 DQ FLAT:??_C@_06EBGNBFIA@number?$AA@ ; `builtin_round'::`2'::kwlist
	DQ	FLAT:??_C@_07DFGIFNBG@ndigits?$AA@
	DQ	0000000000000000H
round_doc DB	'round(number[, ndigits]) -> number', 0aH, 0aH, 'Round a '
	DB	'number to a given precision in decimal digits (default 0 digi'
	DB	'ts).', 0aH, 'This returns an int when called with one argumen'
	DB	't, otherwise the', 0aH, 'same type as the number. ndigits may'
	DB	' be negative.', 00H
	ORG $+7
?kwlist@?1??builtin_sorted@@9@9 DQ FLAT:??_C@_08DCHCEAJP@iterable?$AA@ ; `builtin_sorted'::`2'::kwlist
	DQ	FLAT:??_C@_03ICHNJLJF@key?$AA@
	DQ	FLAT:??_C@_07KOIEOCCE@reverse?$AA@
	DQ	0000000000000000H
sorted_doc DB	'sorted(iterable, key=None, reverse=False) --> new sorted'
	DB	' list', 00H
	ORG $+10
vars_doc DB	'vars([object]) -> dictionary', 0aH, 0aH, 'Without argume'
	DB	'nts, equivalent to locals().', 0aH, 'With an argument, equiva'
	DB	'lent to object.__dict__.', 00H
	ORG $+6
sum_doc	DB	'sum(iterable[, start]) -> value', 0aH, 0aH, 'Return the '
	DB	'sum of an iterable of numbers (NOT strings) plus the value', 0aH
	DB	'of parameter ''start'' (which defaults to 0).  When the itera'
	DB	'ble is', 0aH, 'empty, return start.', 00H
	ORG $+2
isinstance_doc DB 'isinstance(object, class-or-type-or-tuple) -> bool', 0aH
	DB	0aH, 'Return whether an object is an instance of a class or of'
	DB	' a subclass thereof.', 0aH, 'With a type as second argument, '
	DB	'return whether that is the object''s type.', 0aH, 'The form u'
	DB	'sing a tuple, isinstance(x, (A, B, ...)), is a shortcut for', 0aH
	DB	'isinstance(x, A) or isinstance(x, B) or ... (etc.).', 00H
	ORG $+11
issubclass_doc DB 'issubclass(C, B) -> bool', 0aH, 0aH, 'Return whether c'
	DB	'lass C is a subclass (i.e., a derived class) of class B.', 0aH
	DB	'When using a tuple as the second argument issubclass(X, (A, B'
	DB	', ...)),', 0aH, 'is a shortcut for issubclass(X, A) or issubc'
	DB	'lass(X, B) or ... (etc.).', 00H
	ORG $+1
zip_methods DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:zip_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
zip_doc	DB	'zip(iter1 [,iter2 [...]]) --> zip object', 0aH, 0aH, 'Re'
	DB	'turn a zip object whose .__next__() method returns a tuple wh'
	DB	'ere', 0aH, 'the i-th element comes from the i-th iterable arg'
	DB	'ument.  The .__next__()', 0aH, 'method continues until the sh'
	DB	'ortest iterable in the argument sequence', 0aH, 'is exhausted'
	DB	' and then it raises StopIteration.', 00H
	ORG $+5
PyZip_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_03LCAAOJEC@zip?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:zip_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:zip_doc
	DQ	FLAT:zip_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:zip_next
	DQ	FLAT:zip_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:zip_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
builtin_methods DQ FLAT:??_C@_0BA@JDLNCAMO@__build_class__?$AA@
	DQ	FLAT:builtin___build_class__
	DD	03H
	ORG $+4
	DQ	FLAT:build_class_doc
	DQ	FLAT:??_C@_0L@KEEJPJHH@__import__?$AA@
	DQ	FLAT:builtin___import__
	DD	03H
	ORG $+4
	DQ	FLAT:import_doc
	DQ	FLAT:??_C@_03BCGAIFPO@abs?$AA@
	DQ	FLAT:builtin_abs
	DD	08H
	ORG $+4
	DQ	FLAT:abs_doc
	DQ	FLAT:??_C@_03NFKEKGGK@all?$AA@
	DQ	FLAT:builtin_all
	DD	08H
	ORG $+4
	DQ	FLAT:all_doc
	DQ	FLAT:??_C@_03OBJFJEBA@any?$AA@
	DQ	FLAT:builtin_any
	DD	08H
	ORG $+4
	DQ	FLAT:any_doc
	DQ	FLAT:??_C@_05OJENGABA@ascii?$AA@
	DQ	FLAT:builtin_ascii
	DD	08H
	ORG $+4
	DQ	FLAT:ascii_doc
	DQ	FLAT:??_C@_03PDOMKJON@bin?$AA@
	DQ	FLAT:builtin_bin
	DD	08H
	ORG $+4
	DQ	FLAT:bin_doc
	DQ	FLAT:??_C@_08DPEDNDHG@callable?$AA@
	DQ	FLAT:builtin_callable
	DD	08H
	ORG $+4
	DQ	FLAT:callable_doc
	DQ	FLAT:??_C@_03KMOFPJOC@chr?$AA@
	DQ	FLAT:builtin_chr
	DD	01H
	ORG $+4
	DQ	FLAT:chr_doc
	DQ	FLAT:??_C@_07OLJGFCKG@compile?$AA@
	DQ	FLAT:builtin_compile
	DD	03H
	ORG $+4
	DQ	FLAT:compile_doc
	DQ	FLAT:??_C@_07GGDKJAHK@delattr?$AA@
	DQ	FLAT:builtin_delattr
	DD	01H
	ORG $+4
	DQ	FLAT:delattr_doc
	DQ	FLAT:??_C@_03DAPAKLGM@dir?$AA@
	DQ	FLAT:builtin_dir
	DD	01H
	ORG $+4
	DQ	FLAT:dir_doc
	DQ	FLAT:??_C@_06MPFFAOOK@divmod?$AA@
	DQ	FLAT:builtin_divmod
	DD	01H
	ORG $+4
	DQ	FLAT:divmod_doc
	DQ	FLAT:??_C@_04KGAGIKCD@eval?$AA@
	DQ	FLAT:builtin_eval
	DD	01H
	ORG $+4
	DQ	FLAT:eval_doc
	DQ	FLAT:??_C@_04MGEIEJAD@exec?$AA@
	DQ	FLAT:builtin_exec
	DD	01H
	ORG $+4
	DQ	FLAT:exec_doc
	DQ	FLAT:??_C@_06DLEPGFEF@format?$AA@
	DQ	FLAT:builtin_format
	DD	01H
	ORG $+4
	DQ	FLAT:format_doc
	DQ	FLAT:??_C@_07HDABHGP@getattr?$AA@
	DQ	FLAT:builtin_getattr
	DD	01H
	ORG $+4
	DQ	FLAT:getattr_doc
	DQ	FLAT:??_C@_07NAPALOBA@globals?$AA@
	DQ	FLAT:builtin_globals
	DD	04H
	ORG $+4
	DQ	FLAT:globals_doc
	DQ	FLAT:??_C@_07DHFKBBGI@hasattr?$AA@
	DQ	FLAT:builtin_hasattr
	DD	01H
	ORG $+4
	DQ	FLAT:hasattr_doc
	DQ	FLAT:??_C@_04OIJGJDKO@hash?$AA@
	DQ	FLAT:builtin_hash
	DD	08H
	ORG $+4
	DQ	FLAT:hash_doc
	DQ	FLAT:??_C@_03IJNDAFDK@hex?$AA@
	DQ	FLAT:builtin_hex
	DD	08H
	ORG $+4
	DQ	FLAT:hex_doc
	DQ	FLAT:??_C@_02EGCJHIOB@id?$AA@
	DQ	FLAT:builtin_id
	DD	08H
	ORG $+4
	DQ	FLAT:id_doc
	DQ	FLAT:??_C@_05DFJCHPDH@input?$AA@
	DQ	FLAT:builtin_input
	DD	01H
	ORG $+4
	DQ	FLAT:input_doc
	DQ	FLAT:??_C@_0L@PHLNOMHE@isinstance?$AA@
	DQ	FLAT:builtin_isinstance
	DD	01H
	ORG $+4
	DQ	FLAT:isinstance_doc
	DQ	FLAT:??_C@_0L@JALFGOPP@issubclass?$AA@
	DQ	FLAT:builtin_issubclass
	DD	01H
	ORG $+4
	DQ	FLAT:issubclass_doc
	DQ	FLAT:??_C@_04BKLHDIKK@iter?$AA@
	DQ	FLAT:builtin_iter
	DD	01H
	ORG $+4
	DQ	FLAT:iter_doc
	DQ	FLAT:??_C@_03BKCJCHLK@len?$AA@
	DQ	FLAT:builtin_len
	DD	08H
	ORG $+4
	DQ	FLAT:len_doc
	DQ	FLAT:??_C@_06MPPADOBF@locals?$AA@
	DQ	FLAT:builtin_locals
	DD	04H
	ORG $+4
	DQ	FLAT:locals_doc
	DQ	FLAT:??_C@_03LJAEFNNE@max?$AA@
	DQ	FLAT:builtin_max
	DD	03H
	ORG $+4
	DQ	FLAT:max_doc
	DQ	FLAT:??_C@_03KLIPLJLL@min?$AA@
	DQ	FLAT:builtin_min
	DD	03H
	ORG $+4
	DQ	FLAT:min_doc
	DQ	FLAT:??_C@_04CJGEDOF@next?$AA@
	DQ	FLAT:builtin_next
	DD	01H
	ORG $+4
	DQ	FLAT:next_doc
	DQ	FLAT:??_C@_03LMDMAODN@oct?$AA@
	DQ	FLAT:builtin_oct
	DD	08H
	ORG $+4
	DQ	FLAT:oct_doc
	DQ	FLAT:??_C@_03OLBKNFCL@ord?$AA@
	DQ	FLAT:builtin_ord
	DD	08H
	ORG $+4
	DQ	FLAT:ord_doc
	DQ	FLAT:??_C@_03JGHBODFD@pow?$AA@
	DQ	FLAT:builtin_pow
	DD	01H
	ORG $+4
	DQ	FLAT:pow_doc
	DQ	FLAT:??_C@_05IJDJACGD@print?$AA@
	DQ	FLAT:builtin_print
	DD	03H
	ORG $+4
	DQ	FLAT:print_doc
	DQ	FLAT:??_C@_04PPMPMPFI@repr?$AA@
	DQ	FLAT:builtin_repr
	DD	08H
	ORG $+4
	DQ	FLAT:repr_doc
	DQ	FLAT:??_C@_05MIMAKCN@round?$AA@
	DQ	FLAT:builtin_round
	DD	03H
	ORG $+4
	DQ	FLAT:round_doc
	DQ	FLAT:??_C@_07PPMBCILO@setattr?$AA@
	DQ	FLAT:builtin_setattr
	DD	01H
	ORG $+4
	DQ	FLAT:setattr_doc
	DQ	FLAT:??_C@_06GOHDHELE@sorted?$AA@
	DQ	FLAT:builtin_sorted
	DD	03H
	ORG $+4
	DQ	FLAT:sorted_doc
	DQ	FLAT:??_C@_03CFFIJAMA@sum?$AA@
	DQ	FLAT:builtin_sum
	DD	01H
	ORG $+4
	DQ	FLAT:sum_doc
	DQ	FLAT:??_C@_04JPLCBLOA@vars?$AA@
	DQ	FLAT:builtin_vars
	DD	01H
	ORG $+4
	DQ	FLAT:vars_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
builtin_doc DB	'Built-in functions, exceptions, and other objects.', 0aH
	DB	0aH, 'Noteworthy: None is the `nil'' object; Ellipsis represen'
	DB	'ts `...'' in slices.', 00H
	ORG $+1
builtinsmodule DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
	DQ	FLAT:builtin_doc
	DQ	ffffffffffffffffH
	DQ	FLAT:builtin_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
;	COMDAT ??_C@_04IHNDNLNK@mbcs?$AA@
CONST	SEGMENT
??_C@_04IHNDNLNK@mbcs?$AA@ DB 'mbcs', 00H		; `string'
CONST	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_09CINOIPHL@metaclass?$AA@			; `string'
PUBLIC	??_C@_0CG@PKEPHLIG@__build_class__?3?5name?5is?5not?5a?5s@ ; `string'
PUBLIC	??_C@_0CG@ENOJBFEJ@__build_class__?3?5not?5enough?5argu@ ; `string'
PUBLIC	??_C@_0CF@JCKIPNDO@__build_class__?3?5args?5is?5not?5a?5t@ ; `string'
EXTRN	PyCell_Set:PROC
EXTRN	PyCell_Type:BYTE
EXTRN	PyObject_CallFunctionObjArgs:PROC
EXTRN	PyEval_CallObjectWithKeywords:PROC
EXTRN	PyTuple_Pack:PROC
EXTRN	PyDict_New:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_AttributeError:QWORD
EXTRN	_PyObject_GetAttrId:PROC
EXTRN	_PyType_CalculateMetaclass:PROC
EXTRN	PyDict_DelItemString:PROC
EXTRN	PyDict_GetItemString:PROC
EXTRN	PyDict_Copy:PROC
EXTRN	PyTuple_GetSlice:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	_tls_index:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\python\bltinmodule.c
pdata	SEGMENT
$pdata$builtin___build_class__ DD imagerel builtin___build_class__
	DD	imagerel builtin___build_class__+101
	DD	imagerel $unwind$builtin___build_class__
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$builtin___build_class__ DD imagerel builtin___build_class__+101
	DD	imagerel builtin___build_class__+179
	DD	imagerel $chain$1$builtin___build_class__
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$builtin___build_class__ DD imagerel builtin___build_class__+179
	DD	imagerel builtin___build_class__+209
	DD	imagerel $chain$4$builtin___build_class__
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$builtin___build_class__ DD imagerel builtin___build_class__+209
	DD	imagerel builtin___build_class__+470
	DD	imagerel $chain$6$builtin___build_class__
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$builtin___build_class__ DD imagerel builtin___build_class__+470
	DD	imagerel builtin___build_class__+785
	DD	imagerel $chain$7$builtin___build_class__
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$builtin___build_class__ DD imagerel builtin___build_class__+785
	DD	imagerel builtin___build_class__+795
	DD	imagerel $chain$8$builtin___build_class__
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$builtin___build_class__ DD imagerel builtin___build_class__+795
	DD	imagerel builtin___build_class__+818
	DD	imagerel $chain$9$builtin___build_class__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$builtin___build_class__ DD 021H
	DD	imagerel builtin___build_class__+179
	DD	imagerel builtin___build_class__+209
	DD	imagerel $chain$4$builtin___build_class__
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$builtin___build_class__ DD 021H
	DD	imagerel builtin___build_class__+209
	DD	imagerel builtin___build_class__+470
	DD	imagerel $chain$6$builtin___build_class__
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$builtin___build_class__ DD 020521H
	DD	06c405H
	DD	imagerel builtin___build_class__+209
	DD	imagerel builtin___build_class__+470
	DD	imagerel $chain$6$builtin___build_class__
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$builtin___build_class__ DD 040a21H
	DD	0d740aH
	DD	0a5405H
	DD	imagerel builtin___build_class__+179
	DD	imagerel builtin___build_class__+209
	DD	imagerel $chain$4$builtin___build_class__
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$builtin___build_class__ DD 060d21H
	DD	0c640dH
	DD	04f400H
	DD	05e400H
	DD	imagerel builtin___build_class__
	DD	imagerel builtin___build_class__+101
	DD	imagerel $unwind$builtin___build_class__
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$builtin___build_class__ DD 040e21H
	DD	04f40eH
	DD	05e405H
	DD	imagerel builtin___build_class__
	DD	imagerel builtin___build_class__+101
	DD	imagerel $unwind$builtin___build_class__
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin___build_class__ DD 030801H
	DD	0d0046208H
	DD	03002H
xdata	ENDS
;	COMDAT ??_C@_09CINOIPHL@metaclass?$AA@
CONST	SEGMENT
??_C@_09CINOIPHL@metaclass?$AA@ DB 'metaclass', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@PKEPHLIG@__build_class__?3?5name?5is?5not?5a?5s@
CONST	SEGMENT
??_C@_0CG@PKEPHLIG@__build_class__?3?5name?5is?5not?5a?5s@ DB '__build_cl'
	DB	'ass__: name is not a string', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@ENOJBFEJ@__build_class__?3?5not?5enough?5argu@
CONST	SEGMENT
??_C@_0CG@ENOJBFEJ@__build_class__?3?5not?5enough?5argu@ DB '__build_clas'
	DB	's__: not enough arguments', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JCKIPNDO@__build_class__?3?5args?5is?5not?5a?5t@
CONST	SEGMENT
??_C@_0CF@JCKIPNDO@__build_class__?3?5args?5is?5not?5a?5t@ DB '__build_cl'
	DB	'ass__: args is not a tuple', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT builtin___build_class__
_TEXT	SEGMENT
self$ = 80
func$1$ = 88
args$ = 88
kwds$ = 96
builtin___build_class__ PROC				; COMDAT

; 40   : {

  00000	40 53		 push	 rbx
  00002	41 55		 push	 r13
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 41   :     PyObject *func, *name, *bases, *mkw, *meta, *winner, *prep, *ns, *cell;
; 42   :     PyObject *cls = NULL;
; 43   :     Py_ssize_t nargs;
; 44   :     int isclass;
; 45   :     _Py_IDENTIFIER(__prepare__);
; 46   : 
; 47   :     assert(args != NULL);
; 48   :     if (!PyTuple_Check(args)) {

  00008	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  0000c	45 33 ed	 xor	 r13d, r13d
  0000f	49 8b d8	 mov	 rbx, r8
  00012	f7 80 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rax+256], 67108864 ; 04000000H
  0001c	4c 8b ca	 mov	 r9, rdx
  0001f	75 1d		 jne	 SHORT $LN44@builtin___

; 49   :         PyErr_SetString(PyExc_TypeError,
; 50   :                         "__build_class__: args is not a tuple");

  00021	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@JCKIPNDO@__build_class__?3?5args?5is?5not?5a?5t@
  0002f	e8 00 00 00 00	 call	 PyErr_SetString

; 51   :         return NULL;

  00034	33 c0		 xor	 eax, eax

; 175  : }

  00036	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003a	41 5d		 pop	 r13
  0003c	5b		 pop	 rbx
  0003d	c3		 ret	 0
$LN44@builtin___:

; 52   :     }
; 53   :     nargs = PyTuple_GET_SIZE(args);

  0003e	4c 8b 42 60	 mov	 r8, QWORD PTR [rdx+96]

; 54   :     if (nargs < 2) {

  00042	49 83 f8 02	 cmp	 r8, 2
  00046	7d 1d		 jge	 SHORT $LN43@builtin___

; 55   :         PyErr_SetString(PyExc_TypeError,
; 56   :                         "__build_class__: not enough arguments");

  00048	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0004f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@ENOJBFEJ@__build_class__?3?5not?5enough?5argu@
  00056	e8 00 00 00 00	 call	 PyErr_SetString

; 57   :         return NULL;

  0005b	33 c0		 xor	 eax, eax

; 175  : }

  0005d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00061	41 5d		 pop	 r13
  00063	5b		 pop	 rbx
  00064	c3		 ret	 0
$LN43@builtin___:
  00065	4c 89 74 24 28	 mov	 QWORD PTR [rsp+40], r14

; 58   :     }
; 59   :     func = PyTuple_GET_ITEM(args, 0); /* Better be callable */

  0006a	4c 8b 72 70	 mov	 r14, QWORD PTR [rdx+112]
  0006e	4c 89 7c 24 20	 mov	 QWORD PTR [rsp+32], r15

; 60   :     name = PyTuple_GET_ITEM(args, 1);

  00073	4c 8b 7a 78	 mov	 r15, QWORD PTR [rdx+120]
  00077	4c 89 74 24 58	 mov	 QWORD PTR func$1$[rsp], r14

; 61   :     if (!PyUnicode_Check(name)) {

  0007c	49 8b 47 58	 mov	 rax, QWORD PTR [r15+88]
  00080	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  0008a	75 27		 jne	 SHORT $LN42@builtin___

; 62   :         PyErr_SetString(PyExc_TypeError,
; 63   :                         "__build_class__: name is not a string");

  0008c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00093	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@PKEPHLIG@__build_class__?3?5name?5is?5not?5a?5s@
  0009a	e8 00 00 00 00	 call	 PyErr_SetString
  0009f	4c 8b 74 24 28	 mov	 r14, QWORD PTR [rsp+40]
  000a4	4c 8b 7c 24 20	 mov	 r15, QWORD PTR [rsp+32]

; 64   :         return NULL;

  000a9	33 c0		 xor	 eax, eax

; 175  : }

  000ab	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000af	41 5d		 pop	 r13
  000b1	5b		 pop	 rbx
  000b2	c3		 ret	 0
$LN42@builtin___:

; 65   :     }
; 66   :     bases = PyTuple_GetSlice(args, 2, nargs);

  000b3	ba 02 00 00 00	 mov	 edx, 2
  000b8	49 8b c9	 mov	 rcx, r9
  000bb	48 89 74 24 60	 mov	 QWORD PTR [rsp+96], rsi
  000c0	e8 00 00 00 00	 call	 PyTuple_GetSlice
  000c5	48 8b f0	 mov	 rsi, rax

; 67   :     if (bases == NULL)

  000c8	48 85 c0	 test	 rax, rax
  000cb	0f 84 4a 02 00
	00		 je	 $LN51@builtin___
$LN41@builtin___:
  000d1	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp
  000d6	48 89 7c 24 68	 mov	 QWORD PTR [rsp+104], rdi

; 68   :         return NULL;
; 69   : 
; 70   :     if (kwds == NULL) {

  000db	48 85 db	 test	 rbx, rbx
  000de	75 12		 jne	 SHORT $LN40@builtin___

; 71   :         meta = NULL;
; 72   :         mkw = NULL;

  000e0	49 8b dd	 mov	 rbx, r13
$LN47@builtin___:

; 91   :         }
; 92   :     }
; 93   :     if (meta == NULL) {
; 94   :         /* if there are no bases, use type: */
; 95   :         if (PyTuple_GET_SIZE(bases) == 0) {

  000e3	4c 39 6e 60	 cmp	 QWORD PTR [rsi+96], r13
  000e7	75 73		 jne	 SHORT $LN34@builtin___

; 96   :             meta = (PyObject *) (&PyType_Type);

  000e9	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:PyType_Type

; 97   :         }
; 98   :         /* else get the type of the first base */
; 99   :         else {

  000f0	eb 72		 jmp	 SHORT $LN33@builtin___
$LN40@builtin___:

; 73   :     }
; 74   :     else {
; 75   :         mkw = PyDict_Copy(kwds); /* Don't modify kwds passed in! */

  000f2	48 8b cb	 mov	 rcx, rbx
  000f5	e8 00 00 00 00	 call	 PyDict_Copy
  000fa	48 8b d8	 mov	 rbx, rax

; 76   :         if (mkw == NULL) {

  000fd	48 85 c0	 test	 rax, rax

; 77   :             Py_DECREF(bases);
; 78   :             return NULL;

  00100	0f 84 8e 00 00
	00		 je	 $LN29@builtin___

; 79   :         }
; 80   :         meta = PyDict_GetItemString(mkw, "metaclass");

  00106	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09CINOIPHL@metaclass?$AA@
  0010d	48 8b c8	 mov	 rcx, rax
  00110	e8 00 00 00 00	 call	 PyDict_GetItemString
  00115	48 8b f8	 mov	 rdi, rax

; 81   :         if (meta != NULL) {

  00118	48 85 c0	 test	 rax, rax
  0011b	74 c6		 je	 SHORT $LN47@builtin___

; 82   :             Py_INCREF(meta);

  0011d	48 8b c8	 mov	 rcx, rax
  00120	e8 00 00 00 00	 call	 _Py_IncRef

; 83   :             if (PyDict_DelItemString(mkw, "metaclass") < 0) {

  00125	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09CINOIPHL@metaclass?$AA@
  0012c	48 8b cb	 mov	 rcx, rbx
  0012f	e8 00 00 00 00	 call	 PyDict_DelItemString
  00134	85 c0		 test	 eax, eax
  00136	79 0a		 jns	 SHORT $LN36@builtin___

; 84   :                 Py_DECREF(meta);

  00138	48 8b cf	 mov	 rcx, rdi
  0013b	e8 00 00 00 00	 call	 _Py_DecRef

; 85   :                 Py_DECREF(mkw);
; 86   :                 Py_DECREF(bases);
; 87   :                 return NULL;

  00140	eb 4a		 jmp	 SHORT $LN56@builtin___
$LN36@builtin___:

; 88   :             }
; 89   :             /* metaclass is explicitly given, check if it's indeed a class */
; 90   :             isclass = PyType_Check(meta);

  00142	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00146	f7 80 00 01 00
	00 00 00 00 80	 test	 DWORD PTR [rax+256], -2147483648 ; ffffffff80000000H
  00150	41 8b c5	 mov	 eax, r13d
  00153	0f 95 c0	 setne	 al

; 104  :         isclass = 1;  /* meta is really a class */
; 105  :     }
; 106  : 
; 107  :     if (isclass) {

  00156	85 c0		 test	 eax, eax
  00158	74 61		 je	 SHORT $LN26@builtin___
  0015a	eb 10		 jmp	 SHORT $LN48@builtin___
$LN34@builtin___:

; 100  :             PyObject *base0 = PyTuple_GET_ITEM(bases, 0);
; 101  :             meta = (PyObject *) (base0->ob_type);

  0015c	48 8b 46 70	 mov	 rax, QWORD PTR [rsi+112]
  00160	48 8b 78 58	 mov	 rdi, QWORD PTR [rax+88]
$LN33@builtin___:

; 102  :         }
; 103  :         Py_INCREF(meta);

  00164	48 8b cf	 mov	 rcx, rdi
  00167	e8 00 00 00 00	 call	 _Py_IncRef
$LN48@builtin___:

; 108  :         /* meta is really a class, so check for a more derived
; 109  :            metaclass, or possible metaclass conflicts: */
; 110  :         winner = (PyObject *)_PyType_CalculateMetaclass((PyTypeObject *)meta,
; 111  :                                                         bases);

  0016c	48 8b d6	 mov	 rdx, rsi
  0016f	48 8b cf	 mov	 rcx, rdi
  00172	e8 00 00 00 00	 call	 _PyType_CalculateMetaclass
  00177	48 8b e8	 mov	 rbp, rax

; 112  :         if (winner == NULL) {

  0017a	48 85 c0	 test	 rax, rax
  0017d	75 24		 jne	 SHORT $LN31@builtin___

; 113  :             Py_DECREF(meta);

  0017f	48 8b cf	 mov	 rcx, rdi
  00182	e8 00 00 00 00	 call	 _Py_DecRef

; 114  :             Py_XDECREF(mkw);

  00187	48 85 db	 test	 rbx, rbx
  0018a	74 08		 je	 SHORT $LN29@builtin___
$LN56@builtin___:
  0018c	48 8b cb	 mov	 rcx, rbx
  0018f	e8 00 00 00 00	 call	 _Py_DecRef
$LN29@builtin___:

; 115  :             Py_DECREF(bases);

  00194	48 8b ce	 mov	 rcx, rsi
  00197	e8 00 00 00 00	 call	 _Py_DecRef

; 116  :             return NULL;

  0019c	33 c0		 xor	 eax, eax
  0019e	e9 6e 01 00 00	 jmp	 $LN53@builtin___
$LN31@builtin___:

; 117  :         }
; 118  :         if (winner != meta) {

  001a3	48 3b c7	 cmp	 rax, rdi
  001a6	74 13		 je	 SHORT $LN26@builtin___

; 119  :             Py_DECREF(meta);

  001a8	48 8b cf	 mov	 rcx, rdi
  001ab	e8 00 00 00 00	 call	 _Py_DecRef

; 120  :             meta = winner;
; 121  :             Py_INCREF(meta);

  001b0	48 8b cd	 mov	 rcx, rbp
  001b3	48 8b fd	 mov	 rdi, rbp
  001b6	e8 00 00 00 00	 call	 _Py_IncRef
$LN26@builtin___:

; 122  :         }
; 123  :     }
; 124  :     /* else: meta is not a class, so we cannot do the metaclass
; 125  :        calculation, so we will use the explicitly given object as it is */
; 126  :     prep = _PyObject_GetAttrId(meta, &PyId___prepare__);

  001bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  001c1	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  001ca	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId___prepare__@?1??builtin___build_class__@@9@9
  001cf	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  001d3	48 8b cf	 mov	 rcx, rdi
  001d6	4c 89 64 24 30	 mov	 QWORD PTR [rsp+48], r12
  001db	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  001e0	48 8b e8	 mov	 rbp, rax

; 127  :     if (prep == NULL) {

  001e3	48 85 c0	 test	 rax, rax
  001e6	75 1f		 jne	 SHORT $LN25@builtin___

; 128  :         if (PyErr_ExceptionMatches(PyExc_AttributeError)) {

  001e8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  001ef	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  001f4	85 c0		 test	 eax, eax
  001f6	74 59		 je	 SHORT $LN24@builtin___

; 129  :             PyErr_Clear();

  001f8	e8 00 00 00 00	 call	 PyErr_Clear

; 130  :             ns = PyDict_New();

  001fd	e8 00 00 00 00	 call	 PyDict_New
  00202	4c 8b e0	 mov	 r12, rax

; 131  :         }
; 132  :         else {
; 133  :             Py_DECREF(meta);
; 134  :             Py_XDECREF(mkw);
; 135  :             Py_DECREF(bases);
; 136  :             return NULL;
; 137  :         }
; 138  :     }
; 139  :     else {

  00205	eb 45		 jmp	 SHORT $LN18@builtin___
$LN25@builtin___:

; 140  :         PyObject *pargs = PyTuple_Pack(2, name, bases);

  00207	4c 8b c6	 mov	 r8, rsi
  0020a	49 8b d7	 mov	 rdx, r15
  0020d	b9 02 00 00 00	 mov	 ecx, 2
  00212	e8 00 00 00 00	 call	 PyTuple_Pack

; 141  :         if (pargs == NULL) {
; 142  :             Py_DECREF(prep);

  00217	48 8b cd	 mov	 rcx, rbp
  0021a	4c 8b f0	 mov	 r14, rax
  0021d	48 85 c0	 test	 rax, rax
  00220	75 07		 jne	 SHORT $LN17@builtin___
  00222	e8 00 00 00 00	 call	 _Py_DecRef

; 143  :             Py_DECREF(meta);
; 144  :             Py_XDECREF(mkw);
; 145  :             Py_DECREF(bases);
; 146  :             return NULL;

  00227	eb 28		 jmp	 SHORT $LN24@builtin___
$LN17@builtin___:

; 147  :         }
; 148  :         ns = PyEval_CallObjectWithKeywords(prep, pargs, mkw);

  00229	4c 8b c3	 mov	 r8, rbx
  0022c	48 8b d0	 mov	 rdx, rax
  0022f	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords

; 149  :         Py_DECREF(pargs);

  00234	49 8b ce	 mov	 rcx, r14
  00237	4c 8b e0	 mov	 r12, rax
  0023a	e8 00 00 00 00	 call	 _Py_DecRef

; 150  :         Py_DECREF(prep);

  0023f	48 8b cd	 mov	 rcx, rbp
  00242	e8 00 00 00 00	 call	 _Py_DecRef
  00247	4c 8b 74 24 58	 mov	 r14, QWORD PTR func$1$[rsp]
$LN18@builtin___:

; 151  :     }
; 152  :     if (ns == NULL) {

  0024c	4d 85 e4	 test	 r12, r12
  0024f	75 24		 jne	 SHORT $LN12@builtin___
$LN24@builtin___:

; 153  :         Py_DECREF(meta);

  00251	48 8b cf	 mov	 rcx, rdi
  00254	e8 00 00 00 00	 call	 _Py_DecRef

; 154  :         Py_XDECREF(mkw);

  00259	48 85 db	 test	 rbx, rbx
  0025c	74 08		 je	 SHORT $LN10@builtin___
  0025e	48 8b cb	 mov	 rcx, rbx
  00261	e8 00 00 00 00	 call	 _Py_DecRef
$LN10@builtin___:

; 155  :         Py_DECREF(bases);

  00266	48 8b ce	 mov	 rcx, rsi
  00269	e8 00 00 00 00	 call	 _Py_DecRef

; 156  :         return NULL;

  0026e	33 c0		 xor	 eax, eax
  00270	e9 97 00 00 00	 jmp	 $LN54@builtin___
$LN12@builtin___:

; 157  :     }
; 158  :     cell = PyObject_CallFunctionObjArgs(func, ns, NULL);

  00275	45 33 c0	 xor	 r8d, r8d
  00278	49 8b d4	 mov	 rdx, r12
  0027b	49 8b ce	 mov	 rcx, r14
  0027e	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  00283	48 8b e8	 mov	 rbp, rax

; 159  :     if (cell != NULL) {

  00286	48 85 c0	 test	 rax, rax
  00289	74 59		 je	 SHORT $LN7@builtin___

; 160  :         PyObject *margs;
; 161  :         margs = PyTuple_Pack(3, name, bases, ns);

  0028b	4d 8b cc	 mov	 r9, r12
  0028e	4c 8b c6	 mov	 r8, rsi
  00291	49 8b d7	 mov	 rdx, r15
  00294	b9 03 00 00 00	 mov	 ecx, 3
  00299	e8 00 00 00 00	 call	 PyTuple_Pack
  0029e	4c 8b f0	 mov	 r14, rax

; 162  :         if (margs != NULL) {

  002a1	48 85 c0	 test	 rax, rax
  002a4	74 36		 je	 SHORT $LN5@builtin___

; 163  :             cls = PyEval_CallObjectWithKeywords(meta, margs, mkw);

  002a6	4c 8b c3	 mov	 r8, rbx
  002a9	48 8b d0	 mov	 rdx, rax
  002ac	48 8b cf	 mov	 rcx, rdi
  002af	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords

; 164  :             Py_DECREF(margs);

  002b4	49 8b ce	 mov	 rcx, r14
  002b7	4c 8b e8	 mov	 r13, rax
  002ba	e8 00 00 00 00	 call	 _Py_DecRef

; 165  :         }
; 166  :         if (cls != NULL && PyCell_Check(cell))

  002bf	4d 85 ed	 test	 r13, r13
  002c2	74 18		 je	 SHORT $LN5@builtin___
  002c4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCell_Type
  002cb	48 39 45 58	 cmp	 QWORD PTR [rbp+88], rax
  002cf	75 0b		 jne	 SHORT $LN5@builtin___

; 167  :             PyCell_Set(cell, cls);

  002d1	49 8b d5	 mov	 rdx, r13
  002d4	48 8b cd	 mov	 rcx, rbp
  002d7	e8 00 00 00 00	 call	 PyCell_Set
$LN5@builtin___:

; 168  :         Py_DECREF(cell);

  002dc	48 8b cd	 mov	 rcx, rbp
  002df	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@builtin___:

; 169  :     }
; 170  :     Py_DECREF(ns);

  002e4	49 8b cc	 mov	 rcx, r12
  002e7	e8 00 00 00 00	 call	 _Py_DecRef

; 171  :     Py_DECREF(meta);

  002ec	48 8b cf	 mov	 rcx, rdi
  002ef	e8 00 00 00 00	 call	 _Py_DecRef

; 172  :     Py_XDECREF(mkw);

  002f4	48 85 db	 test	 rbx, rbx
  002f7	74 08		 je	 SHORT $LN3@builtin___
  002f9	48 8b cb	 mov	 rcx, rbx
  002fc	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@builtin___:

; 173  :     Py_DECREF(bases);

  00301	48 8b ce	 mov	 rcx, rsi
  00304	e8 00 00 00 00	 call	 _Py_DecRef

; 174  :     return cls;

  00309	49 8b c5	 mov	 rax, r13
$LN54@builtin___:
  0030c	4c 8b 64 24 30	 mov	 r12, QWORD PTR [rsp+48]
$LN53@builtin___:
  00311	48 8b 7c 24 68	 mov	 rdi, QWORD PTR [rsp+104]
  00316	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
$LN51@builtin___:
  0031b	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  00320	4c 8b 74 24 28	 mov	 r14, QWORD PTR [rsp+40]
  00325	4c 8b 7c 24 20	 mov	 r15, QWORD PTR [rsp+32]

; 175  : }

  0032a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0032e	41 5d		 pop	 r13
  00330	5b		 pop	 rbx
  00331	c3		 ret	 0
builtin___build_class__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@HHBPAIJP@U?$HMOOOi?3__import__?$AA@	; `string'
EXTRN	PyImport_ImportModuleLevelObject:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin___import__ DD imagerel builtin___import__
	DD	imagerel builtin___import__+148
	DD	imagerel $unwind$builtin___import__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin___import__ DD 010701H
	DD	0e207H
xdata	ENDS
;	COMDAT ??_C@_0BC@HHBPAIJP@U?$HMOOOi?3__import__?$AA@
CONST	SEGMENT
??_C@_0BC@HHBPAIJP@U?$HMOOOi?3__import__?$AA@ DB 'U|OOOi:__import__', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT builtin___import__
_TEXT	SEGMENT
fromlist$ = 80
locals$ = 88
globals$ = 96
name$ = 104
self$ = 128
args$ = 136
kwds$ = 144
level$ = 152
builtin___import__ PROC					; COMDAT

; 184  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 185  :     static char *kwlist[] = {"name", "globals", "locals", "fromlist",
; 186  :                              "level", 0};
; 187  :     PyObject *name, *globals = NULL, *locals = NULL, *fromlist = NULL;

  00007	33 c9		 xor	 ecx, ecx
  00009	49 8b c0	 mov	 rax, r8
  0000c	4c 8b d2	 mov	 r10, rdx
  0000f	49 89 4b e8	 mov	 QWORD PTR [r11-24], rcx
  00013	49 89 4b e0	 mov	 QWORD PTR [r11-32], rcx
  00017	49 89 4b d8	 mov	 QWORD PTR [r11-40], rcx

; 188  :     int level = 0;

  0001b	41 89 4b 20	 mov	 DWORD PTR [r11+32], ecx

; 189  : 
; 190  :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "U|OOOi:__import__",
; 191  :                     kwlist, &name, &globals, &locals, &fromlist, &level))

  0001f	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  00023	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??builtin___import__@@9@9
  0002a	49 89 4b c8	 mov	 QWORD PTR [r11-56], rcx
  0002e	49 8d 4b d8	 lea	 rcx, QWORD PTR [r11-40]
  00032	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BC@HHBPAIJP@U?$HMOOOi?3__import__?$AA@
  00039	49 89 4b c0	 mov	 QWORD PTR [r11-64], rcx
  0003d	49 8d 4b e0	 lea	 rcx, QWORD PTR [r11-32]
  00041	48 8b d0	 mov	 rdx, rax
  00044	49 89 4b b8	 mov	 QWORD PTR [r11-72], rcx
  00048	49 8d 4b e8	 lea	 rcx, QWORD PTR [r11-24]
  0004c	49 89 4b b0	 mov	 QWORD PTR [r11-80], rcx
  00050	49 8d 4b f0	 lea	 rcx, QWORD PTR [r11-16]
  00054	49 89 4b a8	 mov	 QWORD PTR [r11-88], rcx
  00058	49 8b ca	 mov	 rcx, r10
  0005b	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00060	85 c0		 test	 eax, eax
  00062	75 07		 jne	 SHORT $LN1@builtin___@2

; 192  :         return NULL;

  00064	33 c0		 xor	 eax, eax

; 195  : }

  00066	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0006a	c3		 ret	 0
$LN1@builtin___@2:

; 193  :     return PyImport_ImportModuleLevelObject(name, globals, locals,
; 194  :                                             fromlist, level);

  0006b	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR level$[rsp]
  00072	4c 8b 4c 24 50	 mov	 r9, QWORD PTR fromlist$[rsp]
  00077	4c 8b 44 24 58	 mov	 r8, QWORD PTR locals$[rsp]
  0007c	48 8b 54 24 60	 mov	 rdx, QWORD PTR globals$[rsp]
  00081	48 8b 4c 24 68	 mov	 rcx, QWORD PTR name$[rsp]
  00086	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0008a	e8 00 00 00 00	 call	 PyImport_ImportModuleLevelObject

; 195  : }

  0008f	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00093	c3		 ret	 0
builtin___import__ ENDP
_TEXT	ENDS
EXTRN	PyNumber_Absolute:PROC
; Function compile flags: /Ogtpy
;	COMDAT builtin_abs
_TEXT	SEGMENT
self$ = 8
v$ = 16
builtin_abs PROC					; COMDAT

; 218  :     return PyNumber_Absolute(v);

  00000	48 8b ca	 mov	 rcx, rdx

; 219  : }

  00003	e9 00 00 00 00	 jmp	 PyNumber_Absolute
builtin_abs ENDP
_TEXT	ENDS
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
EXTRN	PyExc_StopIteration:QWORD
EXTRN	PyErr_Occurred:PROC
EXTRN	PyObject_IsTrue:PROC
EXTRN	PyObject_GetIter:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$builtin_all DD imagerel builtin_all
	DD	imagerel builtin_all+32
	DD	imagerel $unwind$builtin_all
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$builtin_all DD imagerel builtin_all+32
	DD	imagerel builtin_all+355
	DD	imagerel $chain$2$builtin_all
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$builtin_all DD imagerel builtin_all+355
	DD	imagerel builtin_all+447
	DD	imagerel $chain$4$builtin_all
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$builtin_all DD 060021H
	DD	0a7400H
	DD	095400H
	DD	083400H
	DD	imagerel builtin_all
	DD	imagerel builtin_all+32
	DD	imagerel $unwind$builtin_all
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$builtin_all DD 061921H
	DD	0a7419H
	DD	09540aH
	DD	083405H
	DD	imagerel builtin_all
	DD	imagerel builtin_all+32
	DD	imagerel $unwind$builtin_all
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_all DD 020601H
	DD	060025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\bltinmodule.c
xdata	ENDS
;	COMDAT builtin_all
_TEXT	SEGMENT
self$ = 64
v$ = 72
builtin_all PROC					; COMDAT

; 228  : {

  00000	40 56		 push	 rsi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 229  :     PyObject *it, *item;
; 230  :     PyObject *(*iternext)(PyObject *);
; 231  :     int cmp;
; 232  : 
; 233  :     it = PyObject_GetIter(v);

  00006	48 8b ca	 mov	 rcx, rdx
  00009	e8 00 00 00 00	 call	 PyObject_GetIter
  0000e	48 8b f0	 mov	 rsi, rax

; 234  :     if (it == NULL)

  00011	48 85 c0	 test	 rax, rax
  00014	75 06		 jne	 SHORT $LN9@builtin_al

; 261  : }

  00016	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0001a	5e		 pop	 rsi
  0001b	c3		 ret	 0
$LN9@builtin_al:

; 235  :         return NULL;
; 236  :     iternext = *Py_TYPE(it)->tp_iternext;

  0001c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00020	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00025	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp
  0002a	48 8b a8 38 01
	00 00		 mov	 rbp, QWORD PTR [rax+312]

; 237  : 
; 238  :     for (;;) {
; 239  :         item = iternext(it);

  00031	48 8b ce	 mov	 rcx, rsi
  00034	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  00039	ff d5		 call	 rbp
  0003b	48 8b d8	 mov	 rbx, rax

; 240  :         if (item == NULL)

  0003e	48 85 c0	 test	 rax, rax
  00041	0f 84 90 00 00
	00		 je	 $LN33@builtin_al
$LL8@builtin_al:

; 241  :             break;
; 242  :         cmp = PyObject_IsTrue(item);

  00047	48 8b cb	 mov	 rcx, rbx
  0004a	e8 00 00 00 00	 call	 PyObject_IsTrue
  0004f	8b f8		 mov	 edi, eax

; 243  :         Py_DECREF(item);

  00051	e8 00 00 00 00	 call	 _Py_PXCTX
  00056	85 c0		 test	 eax, eax
  00058	75 5e		 jne	 SHORT $LN22@builtin_al
  0005a	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  0005e	f6 c1 20	 test	 cl, 32			; 00000020H
  00061	75 4d		 jne	 SHORT $LN16@builtin_al
  00063	84 c9		 test	 cl, cl
  00065	78 49		 js	 SHORT $LN16@builtin_al
  00067	f6 c1 02	 test	 cl, 2
  0006a	75 4c		 jne	 SHORT $LN22@builtin_al
  0006c	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00070	75 46		 jne	 SHORT $LN22@builtin_al
  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00080	4c 8b cb	 mov	 r9, rbx
  00083	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00089	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00091	e8 00 00 00 00	 call	 _PyParallel_Guard
  00096	48 8b cb	 mov	 rcx, rbx
  00099	85 c0		 test	 eax, eax
  0009b	74 07		 je	 SHORT $LN21@builtin_al
  0009d	e8 00 00 00 00	 call	 _Px_Dealloc
  000a2	eb 14		 jmp	 SHORT $LN22@builtin_al
$LN21@builtin_al:
  000a4	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000a8	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000ae	eb 08		 jmp	 SHORT $LN22@builtin_al
$LN16@builtin_al:
  000b0	48 8b cb	 mov	 rcx, rbx
  000b3	e8 00 00 00 00	 call	 Px_DecRef
$LN22@builtin_al:

; 244  :         if (cmp < 0) {

  000b8	48 8b ce	 mov	 rcx, rsi
  000bb	85 ff		 test	 edi, edi
  000bd	0f 88 f3 00 00
	00		 js	 $LN34@builtin_al

; 247  :         }
; 248  :         if (cmp == 0) {

  000c3	0f 84 9a 00 00
	00		 je	 $LN35@builtin_al

; 237  : 
; 238  :     for (;;) {
; 239  :         item = iternext(it);

  000c9	ff d5		 call	 rbp
  000cb	48 8b d8	 mov	 rbx, rax

; 240  :         if (item == NULL)

  000ce	48 85 c0	 test	 rax, rax
  000d1	0f 85 70 ff ff
	ff		 jne	 $LL8@builtin_al
$LN33@builtin_al:

; 251  :         }
; 252  :     }
; 253  :     Py_DECREF(it);

  000d7	48 8b ce	 mov	 rcx, rsi
  000da	e8 00 00 00 00	 call	 _Py_DecRef

; 254  :     if (PyErr_Occurred()) {

  000df	e8 00 00 00 00	 call	 PyErr_Occurred
  000e4	48 85 c0	 test	 rax, rax
  000e7	74 19		 je	 SHORT $LN1@builtin_al

; 255  :         if (PyErr_ExceptionMatches(PyExc_StopIteration))

  000e9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_StopIteration
  000f0	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  000f5	85 c0		 test	 eax, eax
  000f7	0f 84 be 00 00
	00		 je	 $LN2@builtin_al

; 256  :             PyErr_Clear();

  000fd	e8 00 00 00 00	 call	 PyErr_Clear
$LN1@builtin_al:

; 257  :         else
; 258  :             return NULL;
; 259  :     }
; 260  :     Py_RETURN_TRUE;

  00102	e8 00 00 00 00	 call	 _Py_PXCTX
  00107	85 c0		 test	 eax, eax
  00109	75 3c		 jne	 SHORT $LN28@builtin_al
  0010b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_TrueStruct
  00112	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00119	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00120	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00126	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0012e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00133	85 c0		 test	 eax, eax
  00135	75 09		 jne	 SHORT $LN27@builtin_al
  00137	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_TrueStruct+32, 32 ; 00000020H
  0013e	74 07		 je	 SHORT $LN28@builtin_al
$LN27@builtin_al:
  00140	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_TrueStruct+80
$LN28@builtin_al:
  00147	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
$LN38@builtin_al:
  0014e	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00153	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00158	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 261  : }

  0015d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00161	5e		 pop	 rsi
  00162	c3		 ret	 0
$LN35@builtin_al:

; 249  :             Py_DECREF(it);

  00163	e8 00 00 00 00	 call	 _Py_DecRef

; 250  :             Py_RETURN_FALSE;

  00168	e8 00 00 00 00	 call	 _Py_PXCTX
  0016d	85 c0		 test	 eax, eax
  0016f	75 3c		 jne	 SHORT $LN24@builtin_al
  00171	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_FalseStruct
  00178	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0017f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00186	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0018c	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00194	e8 00 00 00 00	 call	 _PyParallel_Guard
  00199	85 c0		 test	 eax, eax
  0019b	75 09		 jne	 SHORT $LN23@builtin_al
  0019d	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  001a4	74 07		 je	 SHORT $LN24@builtin_al
$LN23@builtin_al:
  001a6	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN24@builtin_al:
  001ad	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  001b4	eb 98		 jmp	 SHORT $LN38@builtin_al
$LN34@builtin_al:

; 245  :             Py_DECREF(it);

  001b6	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@builtin_al:

; 246  :             return NULL;

  001bb	33 c0		 xor	 eax, eax
  001bd	eb 8f		 jmp	 SHORT $LN38@builtin_al
builtin_all ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$builtin_any DD imagerel builtin_any
	DD	imagerel builtin_any+32
	DD	imagerel $unwind$builtin_any
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$builtin_any DD imagerel builtin_any+32
	DD	imagerel builtin_any+358
	DD	imagerel $chain$2$builtin_any
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$builtin_any DD imagerel builtin_any+358
	DD	imagerel builtin_any+450
	DD	imagerel $chain$4$builtin_any
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$builtin_any DD 060021H
	DD	0a7400H
	DD	095400H
	DD	083400H
	DD	imagerel builtin_any
	DD	imagerel builtin_any+32
	DD	imagerel $unwind$builtin_any
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$builtin_any DD 061921H
	DD	0a7419H
	DD	09540aH
	DD	083405H
	DD	imagerel builtin_any
	DD	imagerel builtin_any+32
	DD	imagerel $unwind$builtin_any
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_any DD 020601H
	DD	060025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\bltinmodule.c
xdata	ENDS
;	COMDAT builtin_any
_TEXT	SEGMENT
self$ = 64
v$ = 72
builtin_any PROC					; COMDAT

; 271  : {

  00000	40 56		 push	 rsi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 272  :     PyObject *it, *item;
; 273  :     PyObject *(*iternext)(PyObject *);
; 274  :     int cmp;
; 275  : 
; 276  :     it = PyObject_GetIter(v);

  00006	48 8b ca	 mov	 rcx, rdx
  00009	e8 00 00 00 00	 call	 PyObject_GetIter
  0000e	48 8b f0	 mov	 rsi, rax

; 277  :     if (it == NULL)

  00011	48 85 c0	 test	 rax, rax
  00014	75 06		 jne	 SHORT $LN9@builtin_an

; 304  : }

  00016	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0001a	5e		 pop	 rsi
  0001b	c3		 ret	 0
$LN9@builtin_an:

; 278  :         return NULL;
; 279  :     iternext = *Py_TYPE(it)->tp_iternext;

  0001c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00020	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00025	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp
  0002a	48 8b a8 38 01
	00 00		 mov	 rbp, QWORD PTR [rax+312]

; 280  : 
; 281  :     for (;;) {
; 282  :         item = iternext(it);

  00031	48 8b ce	 mov	 rcx, rsi
  00034	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  00039	ff d5		 call	 rbp
  0003b	48 8b d8	 mov	 rbx, rax

; 283  :         if (item == NULL)

  0003e	48 85 c0	 test	 rax, rax
  00041	0f 84 93 00 00
	00		 je	 $LN33@builtin_an
$LL8@builtin_an:

; 284  :             break;
; 285  :         cmp = PyObject_IsTrue(item);

  00047	48 8b cb	 mov	 rcx, rbx
  0004a	e8 00 00 00 00	 call	 PyObject_IsTrue
  0004f	8b f8		 mov	 edi, eax

; 286  :         Py_DECREF(item);

  00051	e8 00 00 00 00	 call	 _Py_PXCTX
  00056	85 c0		 test	 eax, eax
  00058	75 5e		 jne	 SHORT $LN22@builtin_an
  0005a	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  0005e	f6 c1 20	 test	 cl, 32			; 00000020H
  00061	75 4d		 jne	 SHORT $LN16@builtin_an
  00063	84 c9		 test	 cl, cl
  00065	78 49		 js	 SHORT $LN16@builtin_an
  00067	f6 c1 02	 test	 cl, 2
  0006a	75 4c		 jne	 SHORT $LN22@builtin_an
  0006c	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00070	75 46		 jne	 SHORT $LN22@builtin_an
  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00080	4c 8b cb	 mov	 r9, rbx
  00083	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00089	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00091	e8 00 00 00 00	 call	 _PyParallel_Guard
  00096	48 8b cb	 mov	 rcx, rbx
  00099	85 c0		 test	 eax, eax
  0009b	74 07		 je	 SHORT $LN21@builtin_an
  0009d	e8 00 00 00 00	 call	 _Px_Dealloc
  000a2	eb 14		 jmp	 SHORT $LN22@builtin_an
$LN21@builtin_an:
  000a4	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000a8	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000ae	eb 08		 jmp	 SHORT $LN22@builtin_an
$LN16@builtin_an:
  000b0	48 8b cb	 mov	 rcx, rbx
  000b3	e8 00 00 00 00	 call	 Px_DecRef
$LN22@builtin_an:

; 287  :         if (cmp < 0) {

  000b8	48 8b ce	 mov	 rcx, rsi
  000bb	85 ff		 test	 edi, edi
  000bd	0f 88 f6 00 00
	00		 js	 $LN34@builtin_an

; 290  :         }
; 291  :         if (cmp == 1) {

  000c3	83 ff 01	 cmp	 edi, 1
  000c6	0f 84 9a 00 00
	00		 je	 $LN35@builtin_an

; 280  : 
; 281  :     for (;;) {
; 282  :         item = iternext(it);

  000cc	ff d5		 call	 rbp
  000ce	48 8b d8	 mov	 rbx, rax

; 283  :         if (item == NULL)

  000d1	48 85 c0	 test	 rax, rax
  000d4	0f 85 6d ff ff
	ff		 jne	 $LL8@builtin_an
$LN33@builtin_an:

; 294  :         }
; 295  :     }
; 296  :     Py_DECREF(it);

  000da	48 8b ce	 mov	 rcx, rsi
  000dd	e8 00 00 00 00	 call	 _Py_DecRef

; 297  :     if (PyErr_Occurred()) {

  000e2	e8 00 00 00 00	 call	 PyErr_Occurred
  000e7	48 85 c0	 test	 rax, rax
  000ea	74 19		 je	 SHORT $LN1@builtin_an

; 298  :         if (PyErr_ExceptionMatches(PyExc_StopIteration))

  000ec	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_StopIteration
  000f3	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  000f8	85 c0		 test	 eax, eax
  000fa	0f 84 be 00 00
	00		 je	 $LN2@builtin_an

; 299  :             PyErr_Clear();

  00100	e8 00 00 00 00	 call	 PyErr_Clear
$LN1@builtin_an:

; 300  :         else
; 301  :             return NULL;
; 302  :     }
; 303  :     Py_RETURN_FALSE;

  00105	e8 00 00 00 00	 call	 _Py_PXCTX
  0010a	85 c0		 test	 eax, eax
  0010c	75 3c		 jne	 SHORT $LN28@builtin_an
  0010e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_FalseStruct
  00115	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0011c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00123	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00129	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00131	e8 00 00 00 00	 call	 _PyParallel_Guard
  00136	85 c0		 test	 eax, eax
  00138	75 09		 jne	 SHORT $LN27@builtin_an
  0013a	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  00141	74 07		 je	 SHORT $LN28@builtin_an
$LN27@builtin_an:
  00143	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN28@builtin_an:
  0014a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
$LN38@builtin_an:
  00151	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00156	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0015b	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 304  : }

  00160	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00164	5e		 pop	 rsi
  00165	c3		 ret	 0
$LN35@builtin_an:

; 292  :             Py_DECREF(it);

  00166	e8 00 00 00 00	 call	 _Py_DecRef

; 293  :             Py_RETURN_TRUE;

  0016b	e8 00 00 00 00	 call	 _Py_PXCTX
  00170	85 c0		 test	 eax, eax
  00172	75 3c		 jne	 SHORT $LN24@builtin_an
  00174	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_TrueStruct
  0017b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00182	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00189	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0018f	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00197	e8 00 00 00 00	 call	 _PyParallel_Guard
  0019c	85 c0		 test	 eax, eax
  0019e	75 09		 jne	 SHORT $LN23@builtin_an
  001a0	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_TrueStruct+32, 32 ; 00000020H
  001a7	74 07		 je	 SHORT $LN24@builtin_an
$LN23@builtin_an:
  001a9	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_TrueStruct+80
$LN24@builtin_an:
  001b0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  001b7	eb 98		 jmp	 SHORT $LN38@builtin_an
$LN34@builtin_an:

; 288  :             Py_DECREF(it);

  001b9	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@builtin_an:

; 289  :             return NULL;

  001be	33 c0		 xor	 eax, eax
  001c0	eb 8f		 jmp	 SHORT $LN38@builtin_an
builtin_any ENDP
_TEXT	ENDS
EXTRN	PyObject_ASCII:PROC
; Function compile flags: /Ogtpy
;	COMDAT builtin_ascii
_TEXT	SEGMENT
self$ = 8
v$ = 16
builtin_ascii PROC					; COMDAT

; 315  :     return PyObject_ASCII(v);

  00000	48 8b ca	 mov	 rcx, rdx

; 316  : }

  00003	e9 00 00 00 00	 jmp	 PyObject_ASCII
builtin_ascii ENDP
_TEXT	ENDS
EXTRN	PyNumber_ToBase:PROC
; Function compile flags: /Ogtpy
;	COMDAT builtin_bin
_TEXT	SEGMENT
self$ = 8
v$ = 16
builtin_bin PROC					; COMDAT

; 330  :     return PyNumber_ToBase(v, 2);

  00000	48 8b ca	 mov	 rcx, rdx
  00003	ba 02 00 00 00	 mov	 edx, 2

; 331  : }

  00008	e9 00 00 00 00	 jmp	 PyNumber_ToBase
builtin_bin ENDP
_TEXT	ENDS
EXTRN	PyBool_FromLong:PROC
EXTRN	PyCallable_Check:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_callable DD imagerel builtin_callable
	DD	imagerel builtin_callable+23
	DD	imagerel $unwind$builtin_callable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_callable DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT builtin_callable
_TEXT	SEGMENT
self$ = 48
v$ = 56
builtin_callable PROC					; COMDAT

; 341  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 342  :     return PyBool_FromLong((long)PyCallable_Check(v));

  00004	48 8b ca	 mov	 rcx, rdx
  00007	e8 00 00 00 00	 call	 PyCallable_Check
  0000c	8b c8		 mov	 ecx, eax

; 343  : }

  0000e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00012	e9 00 00 00 00	 jmp	 PyBool_FromLong
builtin_callable ENDP
_TEXT	ENDS
PUBLIC	??_C@_08MHHCNJDA@filter?$CI?$CJ?$AA@		; `string'
EXTRN	PyArg_UnpackTuple:PROC
EXTRN	_PyArg_NoKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$filter_new DD imagerel filter_new
	DD	imagerel filter_new+190
	DD	imagerel $unwind$filter_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$filter_new DD 040a01H
	DD	09340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_08MHHCNJDA@filter?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_08MHHCNJDA@filter?$CI?$CJ?$AA@ DB 'filter()', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT filter_new
_TEXT	SEGMENT
func$ = 64
type$ = 64
args$ = 72
kwds$ = 80
seq$ = 88
filter_new PROC						; COMDAT

; 361  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 362  :     PyObject *func, *seq;
; 363  :     PyObject *it;
; 364  :     filterobject *lz;
; 365  : 
; 366  :     if (type == &PyFilter_Type && !_PyArg_NoKeywords("filter()", kwds))

  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFilter_Type
  00011	48 8b fa	 mov	 rdi, rdx
  00014	48 8b d9	 mov	 rbx, rcx
  00017	48 3b c8	 cmp	 rcx, rax
  0001a	75 13		 jne	 SHORT $LN4@filter_new
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08MHHCNJDA@filter?$CI?$CJ?$AA@
  00023	49 8b d0	 mov	 rdx, r8
  00026	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  0002b	85 c0		 test	 eax, eax

; 367  :         return NULL;

  0002d	74 5d		 je	 SHORT $LN7@filter_new
$LN4@filter_new:

; 368  : 
; 369  :     if (!PyArg_UnpackTuple(args, "filter", 2, 2, &func, &seq))

  0002f	48 8d 44 24 58	 lea	 rax, QWORD PTR seq$[rsp]
  00034	41 b9 02 00 00
	00		 mov	 r9d, 2
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06EOIELIPE@filter?$AA@
  00041	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00046	48 8d 44 24 40	 lea	 rax, QWORD PTR func$[rsp]
  0004b	45 8b c1	 mov	 r8d, r9d
  0004e	48 8b cf	 mov	 rcx, rdi
  00051	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00056	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0005b	85 c0		 test	 eax, eax

; 370  :         return NULL;

  0005d	74 2d		 je	 SHORT $LN7@filter_new

; 371  : 
; 372  :     /* Get iterator. */
; 373  :     it = PyObject_GetIter(seq);

  0005f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR seq$[rsp]
  00064	e8 00 00 00 00	 call	 PyObject_GetIter
  00069	48 8b f8	 mov	 rdi, rax

; 374  :     if (it == NULL)

  0006c	48 85 c0	 test	 rax, rax

; 375  :         return NULL;

  0006f	74 1b		 je	 SHORT $LN7@filter_new

; 376  : 
; 377  :     /* create filterobject structure */
; 378  :     lz = (filterobject *)type->tp_alloc(type, 0);

  00071	33 d2		 xor	 edx, edx
  00073	48 8b cb	 mov	 rcx, rbx
  00076	ff 93 88 01 00
	00		 call	 QWORD PTR [rbx+392]
  0007c	48 8b d8	 mov	 rbx, rax

; 379  :     if (lz == NULL) {

  0007f	48 85 c0	 test	 rax, rax
  00082	75 15		 jne	 SHORT $LN1@filter_new

; 380  :         Py_DECREF(it);

  00084	48 8b cf	 mov	 rcx, rdi
  00087	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@filter_new:

; 381  :         return NULL;

  0008c	33 c0		 xor	 eax, eax

; 388  : }

  0008e	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00093	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00097	5f		 pop	 rdi
  00098	c3		 ret	 0
$LN1@filter_new:

; 382  :     }
; 383  :     Py_INCREF(func);

  00099	48 8b 4c 24 40	 mov	 rcx, QWORD PTR func$[rsp]
  0009e	e8 00 00 00 00	 call	 _Py_IncRef

; 384  :     lz->func = func;

  000a3	4c 8b 5c 24 40	 mov	 r11, QWORD PTR func$[rsp]

; 385  :     lz->it = it;

  000a8	48 89 7b 68	 mov	 QWORD PTR [rbx+104], rdi
  000ac	4c 89 5b 60	 mov	 QWORD PTR [rbx+96], r11

; 386  : 
; 387  :     return (PyObject *)lz;

  000b0	48 8b c3	 mov	 rax, rbx

; 388  : }

  000b3	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000b8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000bc	5f		 pop	 rdi
  000bd	c3		 ret	 0
filter_new ENDP
_TEXT	ENDS
EXTRN	PyObject_GC_UnTrack:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$filter_dealloc DD imagerel filter_dealloc
	DD	imagerel filter_dealloc+262
	DD	imagerel $unwind$filter_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$filter_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\bltinmodule.c
xdata	ENDS
;	COMDAT filter_dealloc
_TEXT	SEGMENT
lz$ = 64
filter_dealloc PROC					; COMDAT

; 392  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 393  :     PyObject_GC_UnTrack(lz);

  0000d	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 394  :     Py_XDECREF(lz->func);

  00012	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  00016	48 85 db	 test	 rbx, rbx
  00019	74 65		 je	 SHORT $LN7@filter_dea
  0001b	e8 00 00 00 00	 call	 _Py_PXCTX
  00020	85 c0		 test	 eax, eax
  00022	75 5c		 jne	 SHORT $LN7@filter_dea
  00024	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00028	a8 20		 test	 al, 32			; 00000020H
  0002a	75 4c		 jne	 SHORT $LN15@filter_dea
  0002c	84 c0		 test	 al, al
  0002e	78 48		 js	 SHORT $LN15@filter_dea
  00030	a8 02		 test	 al, 2
  00032	75 4c		 jne	 SHORT $LN7@filter_dea
  00034	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00038	75 46		 jne	 SHORT $LN7@filter_dea
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00048	4c 8b cb	 mov	 r9, rbx
  0004b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00051	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00059	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005e	48 8b cb	 mov	 rcx, rbx
  00061	85 c0		 test	 eax, eax
  00063	74 07		 je	 SHORT $LN20@filter_dea
  00065	e8 00 00 00 00	 call	 _Px_Dealloc
  0006a	eb 14		 jmp	 SHORT $LN7@filter_dea
$LN20@filter_dea:
  0006c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00070	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00076	eb 08		 jmp	 SHORT $LN7@filter_dea
$LN15@filter_dea:
  00078	48 8b cb	 mov	 rcx, rbx
  0007b	e8 00 00 00 00	 call	 Px_DecRef
$LN7@filter_dea:

; 395  :     Py_XDECREF(lz->it);

  00080	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  00084	48 85 db	 test	 rbx, rbx
  00087	74 65		 je	 SHORT $LN3@filter_dea
  00089	e8 00 00 00 00	 call	 _Py_PXCTX
  0008e	85 c0		 test	 eax, eax
  00090	75 5c		 jne	 SHORT $LN3@filter_dea
  00092	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00096	a8 20		 test	 al, 32			; 00000020H
  00098	75 4c		 jne	 SHORT $LN26@filter_dea
  0009a	84 c0		 test	 al, al
  0009c	78 48		 js	 SHORT $LN26@filter_dea
  0009e	a8 02		 test	 al, 2
  000a0	75 4c		 jne	 SHORT $LN3@filter_dea
  000a2	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000a6	75 46		 jne	 SHORT $LN3@filter_dea
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000b6	4c 8b cb	 mov	 r9, rbx
  000b9	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000bf	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cc	48 8b cb	 mov	 rcx, rbx
  000cf	85 c0		 test	 eax, eax
  000d1	74 07		 je	 SHORT $LN31@filter_dea
  000d3	e8 00 00 00 00	 call	 _Px_Dealloc
  000d8	eb 14		 jmp	 SHORT $LN3@filter_dea
$LN31@filter_dea:
  000da	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000de	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000e4	eb 08		 jmp	 SHORT $LN3@filter_dea
$LN26@filter_dea:
  000e6	48 8b cb	 mov	 rcx, rbx
  000e9	e8 00 00 00 00	 call	 Px_DecRef
$LN3@filter_dea:

; 396  :     Py_TYPE(lz)->tp_free(lz);

  000ee	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000f2	48 8b cf	 mov	 rcx, rdi

; 397  : }

  000f5	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000fa	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000fe	5f		 pop	 rdi
  000ff	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
filter_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@KCEEFDME@filter_traverse?$AA@		; `string'
PUBLIC	??_C@_0BI@LBFDNFDG@?4?4?2Python?2bltinmodule?4c?$AA@ ; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$filter_traverse DD imagerel filter_traverse
	DD	imagerel filter_traverse+152
	DD	imagerel $unwind$filter_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$filter_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BA@KCEEFDME@filter_traverse?$AA@
CONST	SEGMENT
??_C@_0BA@KCEEFDME@filter_traverse?$AA@ DB 'filter_traverse', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LBFDNFDG@?4?4?2Python?2bltinmodule?4c?$AA@
CONST	SEGMENT
??_C@_0BI@LBFDNFDG@?4?4?2Python?2bltinmodule?4c?$AA@ DB '..\Python\bltinm'
	DB	'odule.c', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT filter_traverse
_TEXT	SEGMENT
lz$ = 48
visit$ = 56
arg$ = 64
filter_traverse PROC					; COMDAT

; 401  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 402  :     Py_VISIT(lz->it);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN9@filter_tra
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LBFDNFDG@?4?4?2Python?2bltinmodule?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@KCEEFDME@filter_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 92 01 00
	00		 mov	 r8d, 402		; 00000192H
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@filter_tra:
  0003d	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN11@filter_tra
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 39		 jne	 SHORT $LN13@filter_tra
$LN11@filter_tra:

; 403  :     Py_VISIT(lz->func);

  0004f	e8 00 00 00 00	 call	 _Py_PXCTX
  00054	85 c0		 test	 eax, eax
  00056	74 1c		 je	 SHORT $LN3@filter_tra
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LBFDNFDG@?4?4?2Python?2bltinmodule?4c?$AA@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@KCEEFDME@filter_traverse?$AA@
  00066	45 33 c9	 xor	 r9d, r9d
  00069	41 b8 93 01 00
	00		 mov	 r8d, 403		; 00000193H
  0006f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@filter_tra:
  00074	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00078	48 85 c9	 test	 rcx, rcx
  0007b	74 09		 je	 SHORT $LN5@filter_tra
  0007d	48 8b d7	 mov	 rdx, rdi
  00080	ff d6		 call	 rsi
  00082	85 c0		 test	 eax, eax
  00084	75 02		 jne	 SHORT $LN13@filter_tra
$LN5@filter_tra:

; 404  :     return 0;

  00086	33 c0		 xor	 eax, eax
$LN13@filter_tra:

; 405  : }

  00088	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00092	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00096	5f		 pop	 rdi
  00097	c3		 ret	 0
filter_traverse ENDP
_TEXT	ENDS
EXTRN	PyBool_Type:BYTE
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$filter_next DD imagerel filter_next
	DD	imagerel filter_next+428
	DD	imagerel $unwind$filter_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$filter_next DD 0c1c01H
	DD	0e641cH
	DD	0d541cH
	DD	0c341cH
	DD	0f018521cH
	DD	0d014e016H
	DD	07010c012H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\bltinmodule.c
xdata	ENDS
;	COMDAT filter_next
_TEXT	SEGMENT
lz$ = 96
filter_next PROC					; COMDAT

; 409  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	41 56		 push	 r14
  00016	41 57		 push	 r15
  00018	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 410  :     PyObject *item;
; 411  :     PyObject *it = lz->it;

  0001c	48 8b 69 68	 mov	 rbp, QWORD PTR [rcx+104]
  00020	4c 8b e1	 mov	 r12, rcx

; 412  :     long ok;
; 413  :     PyObject *(*iternext)(PyObject *);
; 414  : 
; 415  :     iternext = *Py_TYPE(it)->tp_iternext;

  00023	48 8b 45 58	 mov	 rax, QWORD PTR [rbp+88]

; 416  :     for (;;) {
; 417  :         item = iternext(it);

  00027	48 8b cd	 mov	 rcx, rbp
  0002a	4c 8b a8 38 01
	00 00		 mov	 r13, QWORD PTR [rax+312]
  00031	41 ff d5	 call	 r13
  00034	48 8b d8	 mov	 rbx, rax

; 418  :         if (item == NULL)

  00037	48 85 c0	 test	 rax, rax
  0003a	0f 84 3e 01 00
	00		 je	 $LN36@filter_nex
  00040	4c 8d 35 00 00
	00 00		 lea	 r14, OFFSET FLAT:_Py_NoneStruct
  00047	4c 8d 3d 00 00
	00 00		 lea	 r15, OFFSET FLAT:PyBool_Type
  0004e	66 90		 npad	 2
$LL9@filter_nex:

; 420  : 
; 421  :         if (lz->func == Py_None || lz->func == (PyObject *)&PyBool_Type) {

  00050	49 8b 4c 24 60	 mov	 rcx, QWORD PTR [r12+96]
  00055	49 3b ce	 cmp	 rcx, r14
  00058	0f 84 93 00 00
	00		 je	 $LN5@filter_nex
  0005e	49 3b cf	 cmp	 rcx, r15
  00061	0f 84 8a 00 00
	00		 je	 $LN5@filter_nex

; 423  :         } else {
; 424  :             PyObject *good;
; 425  :             good = PyObject_CallFunctionObjArgs(lz->func,
; 426  :                                                 item, NULL);

  00067	45 33 c0	 xor	 r8d, r8d
  0006a	48 8b d3	 mov	 rdx, rbx
  0006d	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  00072	48 8b f8	 mov	 rdi, rax

; 427  :             if (good == NULL) {

  00075	48 85 c0	 test	 rax, rax
  00078	0f 84 1f 01 00
	00		 je	 $LN37@filter_nex

; 430  :             }
; 431  :             ok = PyObject_IsTrue(good);

  0007e	48 8b c8	 mov	 rcx, rax
  00081	e8 00 00 00 00	 call	 PyObject_IsTrue
  00086	8b f0		 mov	 esi, eax

; 432  :             Py_DECREF(good);

  00088	e8 00 00 00 00	 call	 _Py_PXCTX
  0008d	85 c0		 test	 eax, eax
  0008f	75 6a		 jne	 SHORT $LN22@filter_nex
  00091	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00095	f6 c1 20	 test	 cl, 32			; 00000020H
  00098	75 4d		 jne	 SHORT $LN16@filter_nex
  0009a	84 c9		 test	 cl, cl
  0009c	78 49		 js	 SHORT $LN16@filter_nex
  0009e	f6 c1 02	 test	 cl, 2
  000a1	75 58		 jne	 SHORT $LN22@filter_nex
  000a3	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  000a7	75 52		 jne	 SHORT $LN22@filter_nex
  000a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000b7	4c 8b cf	 mov	 r9, rdi
  000ba	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000c0	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c8	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cd	48 8b cf	 mov	 rcx, rdi
  000d0	85 c0		 test	 eax, eax
  000d2	74 07		 je	 SHORT $LN21@filter_nex
  000d4	e8 00 00 00 00	 call	 _Px_Dealloc
  000d9	eb 20		 jmp	 SHORT $LN22@filter_nex
$LN21@filter_nex:
  000db	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000df	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000e5	eb 14		 jmp	 SHORT $LN22@filter_nex
$LN16@filter_nex:
  000e7	48 8b cf	 mov	 rcx, rdi
  000ea	e8 00 00 00 00	 call	 Px_DecRef
  000ef	eb 0a		 jmp	 SHORT $LN22@filter_nex
$LN5@filter_nex:

; 422  :             ok = PyObject_IsTrue(item);

  000f1	48 8b cb	 mov	 rcx, rbx
  000f4	e8 00 00 00 00	 call	 PyObject_IsTrue
  000f9	8b f0		 mov	 esi, eax

; 432  :             Py_DECREF(good);

$LN22@filter_nex:

; 433  :         }
; 434  :         if (ok > 0)

  000fb	85 f6		 test	 esi, esi
  000fd	0f 8f a4 00 00
	00		 jg	 $LN38@filter_nex

; 436  :         Py_DECREF(item);

  00103	e8 00 00 00 00	 call	 _Py_PXCTX
  00108	85 c0		 test	 eax, eax
  0010a	75 5c		 jne	 SHORT $LN33@filter_nex
  0010c	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00110	a8 20		 test	 al, 32			; 00000020H
  00112	75 4c		 jne	 SHORT $LN27@filter_nex
  00114	84 c0		 test	 al, al
  00116	78 48		 js	 SHORT $LN27@filter_nex
  00118	a8 02		 test	 al, 2
  0011a	75 4c		 jne	 SHORT $LN33@filter_nex
  0011c	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00120	75 46		 jne	 SHORT $LN33@filter_nex
  00122	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00129	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00130	4c 8b cb	 mov	 r9, rbx
  00133	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00139	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00141	e8 00 00 00 00	 call	 _PyParallel_Guard
  00146	48 8b cb	 mov	 rcx, rbx
  00149	85 c0		 test	 eax, eax
  0014b	74 07		 je	 SHORT $LN32@filter_nex
  0014d	e8 00 00 00 00	 call	 _Px_Dealloc
  00152	eb 14		 jmp	 SHORT $LN33@filter_nex
$LN32@filter_nex:
  00154	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00158	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0015e	eb 08		 jmp	 SHORT $LN33@filter_nex
$LN27@filter_nex:
  00160	48 8b cb	 mov	 rcx, rbx
  00163	e8 00 00 00 00	 call	 Px_DecRef
$LN33@filter_nex:

; 437  :         if (ok < 0)

  00168	85 f6		 test	 esi, esi
  0016a	78 12		 js	 SHORT $LN36@filter_nex

; 416  :     for (;;) {
; 417  :         item = iternext(it);

  0016c	48 8b cd	 mov	 rcx, rbp
  0016f	41 ff d5	 call	 r13
  00172	48 8b d8	 mov	 rbx, rax

; 418  :         if (item == NULL)

  00175	48 85 c0	 test	 rax, rax
  00178	0f 85 d2 fe ff
	ff		 jne	 $LL9@filter_nex
$LN36@filter_nex:

; 419  :             return NULL;

  0017e	33 c0		 xor	 eax, eax
$LN8@filter_nex:

; 438  :             return NULL;
; 439  :     }
; 440  : }

  00180	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00185	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  0018a	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
  0018f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00193	41 5f		 pop	 r15
  00195	41 5e		 pop	 r14
  00197	41 5d		 pop	 r13
  00199	41 5c		 pop	 r12
  0019b	5f		 pop	 rdi
  0019c	c3		 ret	 0
$LN37@filter_nex:

; 428  :                 Py_DECREF(item);

  0019d	48 8b cb	 mov	 rcx, rbx
  001a0	e8 00 00 00 00	 call	 _Py_DecRef

; 429  :                 return NULL;

  001a5	eb d7		 jmp	 SHORT $LN36@filter_nex
$LN38@filter_nex:

; 435  :             return item;

  001a7	48 8b c3	 mov	 rax, rbx
  001aa	eb d4		 jmp	 SHORT $LN8@filter_nex
filter_next ENDP
_TEXT	ENDS
PUBLIC	??_C@_05LNHFJPFN@O?$CIOO?$CJ?$AA@		; `string'
EXTRN	Py_BuildValue:PROC
;	COMDAT ??_C@_05LNHFJPFN@O?$CIOO?$CJ?$AA@
CONST	SEGMENT
??_C@_05LNHFJPFN@O?$CIOO?$CJ?$AA@ DB 'O(OO)', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT filter_reduce
_TEXT	SEGMENT
lz$ = 8
filter_reduce PROC					; COMDAT

; 445  :     return Py_BuildValue("O(OO)", Py_TYPE(lz), lz->func, lz->it);

  00000	4c 8b 49 68	 mov	 r9, QWORD PTR [rcx+104]
  00004	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]
  00008	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0000c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LNHFJPFN@O?$CIOO?$CJ?$AA@

; 446  : }

  00013	e9 00 00 00 00	 jmp	 Py_BuildValue
filter_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@EIKJMIGE@O?$HMU?3format?$AA@		; `string'
EXTRN	PyObject_Format:PROC
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_format DD imagerel builtin_format
	DD	imagerel builtin_format+69
	DD	imagerel $unwind$builtin_format
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_format DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0L@EIKJMIGE@O?$HMU?3format?$AA@
CONST	SEGMENT
??_C@_0L@EIKJMIGE@O?$HMU?3format?$AA@ DB 'O|U:format', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT builtin_format
_TEXT	SEGMENT
self$ = 48
args$ = 56
format_spec$ = 64
value$ = 72
builtin_format PROC					; COMDAT

; 508  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 509  :     PyObject *value;
; 510  :     PyObject *format_spec = NULL;
; 511  : 
; 512  :     if (!PyArg_ParseTuple(args, "O|U:format", &value, &format_spec))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 4c 24 40	 lea	 r9, QWORD PTR format_spec$[rsp]
  0000c	4c 8d 44 24 48	 lea	 r8, QWORD PTR value$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@EIKJMIGE@O?$HMU?3format?$AA@
  00018	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR format_spec$[rsp], 0
  00021	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00026	85 c0		 test	 eax, eax
  00028	75 07		 jne	 SHORT $LN1@builtin_fo

; 513  :         return NULL;

  0002a	33 c0		 xor	 eax, eax

; 516  : }

  0002c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00030	c3		 ret	 0
$LN1@builtin_fo:

; 514  : 
; 515  :     return PyObject_Format(value, format_spec);

  00031	48 8b 54 24 40	 mov	 rdx, QWORD PTR format_spec$[rsp]
  00036	48 8b 4c 24 48	 mov	 rcx, QWORD PTR value$[rsp]
  0003b	e8 00 00 00 00	 call	 PyObject_Format

; 516  : }

  00040	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00044	c3		 ret	 0
builtin_format ENDP
_TEXT	ENDS
PUBLIC	??_C@_05PIAJHJOI@i?3chr?$AA@			; `string'
EXTRN	PyUnicode_FromOrdinal:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_chr DD imagerel builtin_chr
	DD	imagerel builtin_chr+49
	DD	imagerel $unwind$builtin_chr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_chr DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_05PIAJHJOI@i?3chr?$AA@
CONST	SEGMENT
??_C@_05PIAJHJOI@i?3chr?$AA@ DB 'i:chr', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT builtin_chr
_TEXT	SEGMENT
self$ = 48
args$ = 56
x$ = 64
builtin_chr PROC					; COMDAT

; 526  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 527  :     int x;
; 528  : 
; 529  :     if (!PyArg_ParseTuple(args, "i:chr", &x))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 44 24 40	 lea	 r8, QWORD PTR x$[rsp]
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05PIAJHJOI@i?3chr?$AA@
  00013	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00018	85 c0		 test	 eax, eax
  0001a	75 07		 jne	 SHORT $LN1@builtin_ch

; 530  :         return NULL;

  0001c	33 c0		 xor	 eax, eax

; 533  : }

  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	c3		 ret	 0
$LN1@builtin_ch:

; 531  : 
; 532  :     return PyUnicode_FromOrdinal(x);

  00023	8b 4c 24 40	 mov	 ecx, DWORD PTR x$[rsp]
  00027	e8 00 00 00 00	 call	 PyUnicode_FromOrdinal

; 533  : }

  0002c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00030	c3		 ret	 0
builtin_chr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CN@PMEFIJHB@source?5code?5string?5cannot?5contai@ ; `string'
PUBLIC	??_C@_0BP@FFMADPCO@?$CFs?$CI?$CJ?5arg?51?5must?5be?5a?5?$CFs?5object?$AA@ ; `string'
EXTRN	PyObject_AsReadBuffer:PROC
EXTRN	PyErr_Format:PROC
EXTRN	PyObject_CheckReadBuffer:PROC
EXTRN	PyUnicode_AsUTF8AndSize:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$source_as_string DD imagerel source_as_string
	DD	imagerel source_as_string+247
	DD	imagerel $unwind$source_as_string
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$source_as_string DD 060f01H
	DD	0a640fH
	DD	09340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT ??_C@_0CN@PMEFIJHB@source?5code?5string?5cannot?5contai@
CONST	SEGMENT
??_C@_0CN@PMEFIJHB@source?5code?5string?5cannot?5contai@ DB 'source code '
	DB	'string cannot contain null bytes', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@FFMADPCO@?$CFs?$CI?$CJ?5arg?51?5must?5be?5a?5?$CFs?5object?$AA@
CONST	SEGMENT
??_C@_0BP@FFMADPCO@?$CFs?$CI?$CJ?5arg?51?5must?5be?5a?5?$CFs?5object?$AA@ DB '%'
	DB	's() arg 1 must be a %s object', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT source_as_string
_TEXT	SEGMENT
size$ = 32
str$ = 64
cmd$ = 64
funcname$ = 72
what$ = 80
cf$ = 88
source_as_string PROC					; COMDAT

; 543  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 544  :     char *str;
; 545  :     Py_ssize_t size;
; 546  : 
; 547  :     if (PyUnicode_Check(cmd)) {

  0000f	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00013	49 8b d8	 mov	 rbx, r8
  00016	48 8b f2	 mov	 rsi, rdx
  00019	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  00023	48 8b f9	 mov	 rdi, rcx
  00026	74 30		 je	 SHORT $LN7@source_as_

; 548  :         cf->cf_flags |= PyCF_IGNORE_COOKIE;

  00028	41 81 09 00 08
	00 00		 or	 DWORD PTR [r9], 2048	; 00000800H

; 549  :         str = PyUnicode_AsUTF8AndSize(cmd, &size);

  0002f	48 8d 54 24 20	 lea	 rdx, QWORD PTR size$[rsp]
  00034	e8 00 00 00 00	 call	 PyUnicode_AsUTF8AndSize
  00039	4c 8b d8	 mov	 r11, rax
  0003c	48 89 44 24 40	 mov	 QWORD PTR str$[rsp], rax

; 550  :         if (str == NULL)

  00041	48 85 c0	 test	 rax, rax
  00044	75 61		 jne	 SHORT $LN2@source_as_
$LN11@source_as_:

; 551  :             return NULL;

  00046	33 c0		 xor	 eax, eax

; 567  :     }
; 568  :     return str;
; 569  : }

  00048	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  0004d	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00052	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00056	5f		 pop	 rdi
  00057	c3		 ret	 0
$LN7@source_as_:

; 552  :     }
; 553  :     else if (!PyObject_CheckReadBuffer(cmd)) {

  00058	e8 00 00 00 00	 call	 PyObject_CheckReadBuffer
  0005d	85 c0		 test	 eax, eax
  0005f	75 2b		 jne	 SHORT $LN4@source_as_

; 554  :         PyErr_Format(PyExc_TypeError,
; 555  :           "%s() arg 1 must be a %s object",
; 556  :           funcname, what);

  00061	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00068	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@FFMADPCO@?$CFs?$CI?$CJ?5arg?51?5must?5be?5a?5?$CFs?5object?$AA@
  0006f	4c 8b cb	 mov	 r9, rbx
  00072	4c 8b c6	 mov	 r8, rsi
  00075	e8 00 00 00 00	 call	 PyErr_Format

; 557  :         return NULL;

  0007a	33 c0		 xor	 eax, eax

; 567  :     }
; 568  :     return str;
; 569  : }

  0007c	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00081	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00086	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008a	5f		 pop	 rdi
  0008b	c3		 ret	 0
$LN4@source_as_:

; 558  :     }
; 559  :     else if (PyObject_AsReadBuffer(cmd, (const void **)&str, &size) < 0) {

  0008c	4c 8d 44 24 20	 lea	 r8, QWORD PTR size$[rsp]
  00091	48 8d 54 24 40	 lea	 rdx, QWORD PTR str$[rsp]
  00096	48 8b cf	 mov	 rcx, rdi
  00099	e8 00 00 00 00	 call	 PyObject_AsReadBuffer
  0009e	85 c0		 test	 eax, eax

; 560  :         return NULL;

  000a0	78 a4		 js	 SHORT $LN11@source_as_
  000a2	4c 8b 5c 24 40	 mov	 r11, QWORD PTR str$[rsp]
$LN2@source_as_:

; 561  :     }
; 562  : 
; 563  :     if (strlen(str) != size) {

  000a7	48 83 c9 ff	 or	 rcx, -1
  000ab	33 c0		 xor	 eax, eax
  000ad	49 8b fb	 mov	 rdi, r11
  000b0	f2 ae		 repne scasb
  000b2	48 f7 d1	 not	 rcx
  000b5	48 ff c9	 dec	 rcx
  000b8	48 3b 4c 24 20	 cmp	 rcx, QWORD PTR size$[rsp]
  000bd	74 25		 je	 SHORT $LN1@source_as_

; 564  :         PyErr_SetString(PyExc_TypeError,
; 565  :                         "source code string cannot contain null bytes");

  000bf	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@PMEFIJHB@source?5code?5string?5cannot?5contai@
  000cd	e8 00 00 00 00	 call	 PyErr_SetString

; 566  :         return NULL;

  000d2	33 c0		 xor	 eax, eax

; 567  :     }
; 568  :     return str;
; 569  : }

  000d4	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000d9	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  000de	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000e2	5f		 pop	 rdi
  000e3	c3		 ret	 0
$LN1@source_as_:
  000e4	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000e9	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  000ee	49 8b c3	 mov	 rax, r11
  000f1	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000f5	5f		 pop	 rdi
  000f6	c3		 ret	 0
source_as_string ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@HHFHCFKD@compile?$CI?$CJ?3?5invalid?5optimize?5valu@ ; `string'
PUBLIC	??_C@_0DD@KGFDLBKI@compile?$CI?$CJ?5arg?53?5must?5be?5?8exec?8?0?5@ ; `string'
PUBLIC	??_C@_0BL@DMGDKJPB@string?0?5bytes?0?5AST?5or?5code?$AA@ ; `string'
PUBLIC	??_C@_06EJFMBPJF@single?$AA@			; `string'
PUBLIC	??_C@_0BO@BKNJNDDB@compile?$CI?$CJ?3?5unrecognised?5flags?$AA@ ; `string'
PUBLIC	??_C@_0BB@GIPLJJMM@OO?$CGs?$HMiii?3compile?$AA@	; `string'
EXTRN	PyExc_ValueError:QWORD
EXTRN	Py_CompileStringExFlags:PROC
EXTRN	PyArena_Free:PROC
EXTRN	PyAST_CompileEx:PROC
EXTRN	PyAST_Validate:PROC
EXTRN	PyAST_obj2mod:PROC
EXTRN	PyArena_New:PROC
EXTRN	PyAST_Check:PROC
EXTRN	PyEval_MergeCompilerFlags:PROC
EXTRN	PyUnicode_FSConverter:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_compile DD imagerel builtin_compile
	DD	imagerel builtin_compile+603
	DD	imagerel $unwind$builtin_compile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_compile DD 09b901H
	DD	019c4b9H
	DD	01864b1H
	DD	0140110H
	DD	030037004H
	DD	05002H
xdata	ENDS
;	COMDAT ??_C@_0CC@HHFHCFKD@compile?$CI?$CJ?3?5invalid?5optimize?5valu@
CONST	SEGMENT
??_C@_0CC@HHFHCFKD@compile?$CI?$CJ?3?5invalid?5optimize?5valu@ DB 'compil'
	DB	'e(): invalid optimize value', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@KGFDLBKI@compile?$CI?$CJ?5arg?53?5must?5be?5?8exec?8?0?5@
CONST	SEGMENT
??_C@_0DD@KGFDLBKI@compile?$CI?$CJ?5arg?53?5must?5be?5?8exec?8?0?5@ DB 'c'
	DB	'ompile() arg 3 must be ''exec'', ''eval'' or ''single''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DMGDKJPB@string?0?5bytes?0?5AST?5or?5code?$AA@
CONST	SEGMENT
??_C@_0BL@DMGDKJPB@string?0?5bytes?0?5AST?5or?5code?$AA@ DB 'string, byte'
	DB	's, AST or code', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06EJFMBPJF@single?$AA@
CONST	SEGMENT
??_C@_06EJFMBPJF@single?$AA@ DB 'single', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BKNJNDDB@compile?$CI?$CJ?3?5unrecognised?5flags?$AA@
CONST	SEGMENT
??_C@_0BO@BKNJNDDB@compile?$CI?$CJ?3?5unrecognised?5flags?$AA@ DB 'compil'
	DB	'e(): unrecognised flags', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GIPLJJMM@OO?$CGs?$HMiii?3compile?$AA@
CONST	SEGMENT
??_C@_0BB@GIPLJJMM@OO?$CGs?$HMiii?3compile?$AA@ DB 'OO&s|iii:compile', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT builtin_compile
_TEXT	SEGMENT
cf$ = 96
supplied_flags$ = 100
dont_inherit$ = 104
cmd$ = 112
filename_obj$ = 120
startstr$ = 128
start$ = 136
self$ = 192
args$ = 200
kwds$ = 208
optimize$ = 216
builtin_compile PROC					; COMDAT

; 573  : {

  00000	40 55		 push	 rbp
  00002	53		 push	 rbx
  00003	57		 push	 rdi
  00004	48 8d 6c 24 b9	 lea	 rbp, QWORD PTR [rsp-71]
  00009	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H

; 574  :     char *str;
; 575  :     PyObject *filename_obj;
; 576  :     char *filename;
; 577  :     char *startstr;
; 578  :     int mode = -1;
; 579  :     int dont_inherit = 0;
; 580  :     int supplied_flags = 0;
; 581  :     int optimize = -1;
; 582  :     int is_ast;
; 583  :     PyCompilerFlags cf;
; 584  :     PyObject *cmd;
; 585  :     static char *kwlist[] = {"source", "filename", "mode", "flags",
; 586  :                              "dont_inherit", "optimize", NULL};
; 587  :     int start[] = {Py_file_input, Py_eval_input, Py_single_input};
; 588  :     PyObject *result;
; 589  : 
; 590  :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "OO&s|iii:compile",  kwlist,
; 591  :                                      &cmd,
; 592  :                                      PyUnicode_FSConverter, &filename_obj,
; 593  :                                      &startstr, &supplied_flags,
; 594  :                                      &dont_inherit, &optimize))

  00010	48 8d 4d 7f	 lea	 rcx, QWORD PTR optimize$[rbp-89]
  00014	49 8b c0	 mov	 rax, r8
  00017	48 8b fa	 mov	 rdi, rdx
  0001a	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0001f	48 8d 4d 0f	 lea	 rcx, QWORD PTR dont_inherit$[rbp-89]
  00023	33 db		 xor	 ebx, ebx
  00025	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0002a	48 8d 4d 0b	 lea	 rcx, QWORD PTR supplied_flags$[rbp-89]
  0002e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??builtin_compile@@9@9
  00035	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0003a	48 8d 4d 27	 lea	 rcx, QWORD PTR startstr$[rbp-89]
  0003e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BB@GIPLJJMM@OO?$CGs?$HMiii?3compile?$AA@
  00045	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0004a	48 8d 4d 1f	 lea	 rcx, QWORD PTR filename_obj$[rbp-89]
  0004e	48 8b d0	 mov	 rdx, rax
  00051	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00056	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyUnicode_FSConverter
  0005d	89 5d 0f	 mov	 DWORD PTR dont_inherit$[rbp-89], ebx
  00060	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00065	48 8d 4d 17	 lea	 rcx, QWORD PTR cmd$[rbp-89]
  00069	89 5d 0b	 mov	 DWORD PTR supplied_flags$[rbp-89], ebx
  0006c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00071	48 8b cf	 mov	 rcx, rdi
  00074	c7 45 7f ff ff
	ff ff		 mov	 DWORD PTR optimize$[rbp-89], -1
  0007b	c7 45 2f 01 01
	00 00		 mov	 DWORD PTR start$[rbp-89], 257 ; 00000101H
  00082	c7 45 33 02 01
	00 00		 mov	 DWORD PTR start$[rbp-85], 258 ; 00000102H
  00089	c7 45 37 00 01
	00 00		 mov	 DWORD PTR start$[rbp-81], 256 ; 00000100H
  00090	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00095	85 c0		 test	 eax, eax
  00097	75 0d		 jne	 SHORT $LN19@builtin_co

; 595  :         return NULL;

  00099	33 c0		 xor	 eax, eax

; 674  : }

  0009b	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  000a2	5f		 pop	 rdi
  000a3	5b		 pop	 rbx
  000a4	5d		 pop	 rbp
  000a5	c3		 ret	 0
$LN19@builtin_co:

; 596  : 
; 597  :     filename = PyBytes_AS_STRING(filename_obj);
; 598  :     cf.cf_flags = supplied_flags | PyCF_SOURCE_IS_UTF8;

  000a6	8b 4d 0b	 mov	 ecx, DWORD PTR supplied_flags$[rbp-89]
  000a9	48 89 b4 24 c0
	00 00 00	 mov	 QWORD PTR [rsp+192], rsi
  000b1	4c 89 a4 24 c8
	00 00 00	 mov	 QWORD PTR [rsp+200], r12
  000b9	4c 8b 65 1f	 mov	 r12, QWORD PTR filename_obj$[rbp-89]
  000bd	8b c1		 mov	 eax, ecx
  000bf	0f ba e8 08	 bts	 eax, 8
  000c3	89 45 07	 mov	 DWORD PTR cf$[rbp-89], eax

; 599  : 
; 600  :     if (supplied_flags &
; 601  :         ~(PyCF_MASK | PyCF_MASK_OBSOLETE | PyCF_DONT_IMPLY_DEDENT | PyCF_ONLY_AST))

  000c6	f7 c1 ef 19 f8
	ff		 test	 ecx, -517649		; fffffffffff819efH
  000cc	74 0c		 je	 SHORT $LN18@builtin_co

; 602  :     {
; 603  :         PyErr_SetString(PyExc_ValueError,
; 604  :                         "compile(): unrecognised flags");

  000ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@BKNJNDDB@compile?$CI?$CJ?3?5unrecognised?5flags?$AA@

; 605  :         goto error;

  000d5	e9 4e 01 00 00	 jmp	 $LN22@builtin_co
$LN18@builtin_co:

; 606  :     }
; 607  :     /* XXX Warn if (supplied_flags & PyCF_MASK_OBSOLETE) != 0? */
; 608  : 
; 609  :     if (optimize < -1 || optimize > 2) {

  000da	8b 45 7f	 mov	 eax, DWORD PTR optimize$[rbp-89]
  000dd	ff c0		 inc	 eax
  000df	83 f8 03	 cmp	 eax, 3
  000e2	0f 87 39 01 00
	00		 ja	 $LN16@builtin_co

; 612  :         goto error;
; 613  :     }
; 614  : 
; 615  :     if (!dont_inherit) {

  000e8	39 5d 0f	 cmp	 DWORD PTR dont_inherit$[rbp-89], ebx
  000eb	75 09		 jne	 SHORT $LN15@builtin_co

; 616  :         PyEval_MergeCompilerFlags(&cf);

  000ed	48 8d 4d 07	 lea	 rcx, QWORD PTR cf$[rbp-89]
  000f1	e8 00 00 00 00	 call	 PyEval_MergeCompilerFlags
$LN15@builtin_co:

; 617  :     }
; 618  : 
; 619  :     if (strcmp(startstr, "exec") == 0)

  000f6	48 8b 45 27	 mov	 rax, QWORD PTR startstr$[rbp-89]
  000fa	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_04MGEIEJAD@exec?$AA@
  00101	b9 05 00 00 00	 mov	 ecx, 5
  00106	48 8b f0	 mov	 rsi, rax
  00109	f3 a6		 repe cmpsb
  0010b	75 04		 jne	 SHORT $LN14@builtin_co

; 620  :         mode = 0;

  0010d	8b f3		 mov	 esi, ebx
  0010f	eb 36		 jmp	 SHORT $LN9@builtin_co
$LN14@builtin_co:

; 621  :     else if (strcmp(startstr, "eval") == 0)

  00111	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_04KGAGIKCD@eval?$AA@
  00118	48 8b f0	 mov	 rsi, rax
  0011b	b9 05 00 00 00	 mov	 ecx, 5
  00120	f3 a6		 repe cmpsb
  00122	75 07		 jne	 SHORT $LN12@builtin_co

; 622  :         mode = 1;

  00124	be 01 00 00 00	 mov	 esi, 1
  00129	eb 1c		 jmp	 SHORT $LN9@builtin_co
$LN12@builtin_co:

; 623  :     else if (strcmp(startstr, "single") == 0)

  0012b	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_06EJFMBPJF@single?$AA@
  00132	48 8b f0	 mov	 rsi, rax
  00135	b9 07 00 00 00	 mov	 ecx, 7
  0013a	f3 a6		 repe cmpsb
  0013c	0f 85 d6 00 00
	00		 jne	 $LN10@builtin_co

; 624  :         mode = 2;

  00142	be 02 00 00 00	 mov	 esi, 2
$LN9@builtin_co:

; 629  :     }
; 630  : 
; 631  :     is_ast = PyAST_Check(cmd);

  00147	48 8b 4d 17	 mov	 rcx, QWORD PTR cmd$[rbp-89]
  0014b	e8 00 00 00 00	 call	 PyAST_Check

; 632  :     if (is_ast == -1)

  00150	83 f8 ff	 cmp	 eax, -1
  00153	0f 84 db 00 00
	00		 je	 $error$21831

; 633  :         goto error;
; 634  :     if (is_ast) {

  00159	85 c0		 test	 eax, eax
  0015b	74 76		 je	 SHORT $LN7@builtin_co

; 635  :         if (supplied_flags & PyCF_ONLY_AST) {

  0015d	f7 45 0b 00 04
	00 00		 test	 DWORD PTR supplied_flags$[rbp-89], 1024 ; 00000400H
  00164	74 12		 je	 SHORT $LN6@builtin_co

; 636  :             Py_INCREF(cmd);

  00166	48 8b 4d 17	 mov	 rcx, QWORD PTR cmd$[rbp-89]
  0016a	e8 00 00 00 00	 call	 _Py_IncRef

; 637  :             result = cmd;

  0016f	48 8b 5d 17	 mov	 rbx, QWORD PTR cmd$[rbp-89]

; 638  :         }
; 639  :         else {

  00173	e9 bc 00 00 00	 jmp	 $error$21831
$LN6@builtin_co:

; 640  :             PyArena *arena;
; 641  :             mod_ty mod;
; 642  : 
; 643  :             arena = PyArena_New();

  00178	e8 00 00 00 00	 call	 PyArena_New
  0017d	48 8b f8	 mov	 rdi, rax

; 644  :             if (arena == NULL)

  00180	48 85 c0	 test	 rax, rax
  00183	0f 84 ab 00 00
	00		 je	 $error$21831

; 645  :                 goto error;
; 646  :             mod = PyAST_obj2mod(cmd, arena, mode);

  00189	48 8b 4d 17	 mov	 rcx, QWORD PTR cmd$[rbp-89]
  0018d	44 8b c6	 mov	 r8d, esi
  00190	48 8b d0	 mov	 rdx, rax
  00193	e8 00 00 00 00	 call	 PyAST_obj2mod
  00198	48 8b f0	 mov	 rsi, rax

; 647  :             if (mod == NULL) {

  0019b	48 85 c0	 test	 rax, rax

; 648  :                 PyArena_Free(arena);
; 649  :                 goto error;

  0019e	74 29		 je	 SHORT $LN23@builtin_co

; 650  :             }
; 651  :             if (!PyAST_Validate(mod)) {

  001a0	48 8b c8	 mov	 rcx, rax
  001a3	e8 00 00 00 00	 call	 PyAST_Validate
  001a8	85 c0		 test	 eax, eax

; 652  :                 PyArena_Free(arena);
; 653  :                 goto error;

  001aa	74 1d		 je	 SHORT $LN23@builtin_co

; 654  :             }
; 655  :             result = (PyObject*)PyAST_CompileEx(mod, filename,
; 656  :                                                 &cf, optimize, arena);

  001ac	44 8b 4d 7f	 mov	 r9d, DWORD PTR optimize$[rbp-89]
  001b0	4c 8d 45 07	 lea	 r8, QWORD PTR cf$[rbp-89]
  001b4	49 8d 54 24 78	 lea	 rdx, QWORD PTR [r12+120]
  001b9	48 8b ce	 mov	 rcx, rsi
  001bc	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  001c1	e8 00 00 00 00	 call	 PyAST_CompileEx
  001c6	48 8b d8	 mov	 rbx, rax
$LN23@builtin_co:

; 657  :             PyArena_Free(arena);

  001c9	48 8b cf	 mov	 rcx, rdi
  001cc	e8 00 00 00 00	 call	 PyArena_Free

; 658  :         }
; 659  :         goto finally;

  001d1	eb 61		 jmp	 SHORT $error$21831
$LN7@builtin_co:

; 660  :     }
; 661  : 
; 662  :     str = source_as_string(cmd, "compile", "string, bytes, AST or code", &cf);

  001d3	48 8b 4d 17	 mov	 rcx, QWORD PTR cmd$[rbp-89]
  001d7	4c 8d 4d 07	 lea	 r9, QWORD PTR cf$[rbp-89]
  001db	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BL@DMGDKJPB@string?0?5bytes?0?5AST?5or?5code?$AA@
  001e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07OLJGFCKG@compile?$AA@
  001e9	e8 00 00 00 00	 call	 source_as_string

; 663  :     if (str == NULL)

  001ee	48 85 c0	 test	 rax, rax
  001f1	74 41		 je	 SHORT $error$21831

; 664  :         goto error;
; 665  : 
; 666  :     result = Py_CompileStringExFlags(str, filename, start[mode], &cf, optimize);

  001f3	8b 4d 7f	 mov	 ecx, DWORD PTR optimize$[rbp-89]
  001f6	48 63 d6	 movsxd	 rdx, esi
  001f9	4c 8d 4d 07	 lea	 r9, QWORD PTR cf$[rbp-89]
  001fd	44 8b 44 95 2f	 mov	 r8d, DWORD PTR start$[rbp+rdx*4-89]
  00202	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  00206	49 8d 54 24 78	 lea	 rdx, QWORD PTR [r12+120]
  0020b	48 8b c8	 mov	 rcx, rax
  0020e	e8 00 00 00 00	 call	 Py_CompileStringExFlags
  00213	48 8b d8	 mov	 rbx, rax

; 667  :     goto finally;

  00216	eb 1c		 jmp	 SHORT $error$21831
$LN10@builtin_co:

; 625  :     else {
; 626  :         PyErr_SetString(PyExc_ValueError,
; 627  :                         "compile() arg 3 must be 'exec', 'eval' or 'single'");

  00218	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@KGFDLBKI@compile?$CI?$CJ?5arg?53?5must?5be?5?8exec?8?0?5@

; 628  :         goto error;

  0021f	eb 07		 jmp	 SHORT $LN22@builtin_co
$LN16@builtin_co:

; 610  :         PyErr_SetString(PyExc_ValueError,
; 611  :                         "compile(): invalid optimize value");

  00221	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@HHFHCFKD@compile?$CI?$CJ?3?5invalid?5optimize?5valu@
$LN22@builtin_co:
  00228	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0022f	e8 00 00 00 00	 call	 PyErr_SetString
$error$21831:

; 668  : 
; 669  : error:
; 670  :     result = NULL;
; 671  : finally:
; 672  :     Py_DECREF(filename_obj);

  00234	48 8b 4d 1f	 mov	 rcx, QWORD PTR filename_obj$[rbp-89]
$finally$21859:
  00238	e8 00 00 00 00	 call	 _Py_DecRef
  0023d	4c 8b a4 24 c8
	00 00 00	 mov	 r12, QWORD PTR [rsp+200]
  00245	48 8b b4 24 c0
	00 00 00	 mov	 rsi, QWORD PTR [rsp+192]

; 673  :     return result;

  0024d	48 8b c3	 mov	 rax, rbx

; 674  : }

  00250	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  00257	5f		 pop	 rdi
  00258	5b		 pop	 rbx
  00259	5d		 pop	 rbp
  0025a	c3		 ret	 0
builtin_compile ENDP
_TEXT	ENDS
EXTRN	PyObject_Dir:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_dir DD imagerel builtin_dir
	DD	imagerel builtin_dir+76
	DD	imagerel $unwind$builtin_dir
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_dir DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT builtin_dir
_TEXT	SEGMENT
self$ = 64
args$ = 72
arg$ = 80
builtin_dir PROC					; COMDAT

; 693  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx

; 694  :     PyObject *arg = NULL;
; 695  : 
; 696  :     if (!PyArg_UnpackTuple(args, "dir", 0, 1, &arg))

  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR arg$[rsp]
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03DAPAKLGM@dir?$AA@
  00013	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00018	41 b9 01 00 00
	00		 mov	 r9d, 1
  0001e	45 33 c0	 xor	 r8d, r8d
  00021	48 8b c8	 mov	 rcx, rax
  00024	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR arg$[rsp], 0
  0002d	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00032	85 c0		 test	 eax, eax
  00034	75 07		 jne	 SHORT $LN1@builtin_di

; 697  :         return NULL;

  00036	33 c0		 xor	 eax, eax

; 699  : }

  00038	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003c	c3		 ret	 0
$LN1@builtin_di:

; 698  :     return PyObject_Dir(arg);

  0003d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR arg$[rsp]
  00042	e8 00 00 00 00	 call	 PyObject_Dir

; 699  : }

  00047	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004b	c3		 ret	 0
builtin_dir ENDP
_TEXT	ENDS
EXTRN	PyNumber_Divmod:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_divmod DD imagerel builtin_divmod
	DD	imagerel builtin_divmod+82
	DD	imagerel $unwind$builtin_divmod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_divmod DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT builtin_divmod
_TEXT	SEGMENT
self$ = 64
args$ = 72
w$ = 80
v$ = 88
builtin_divmod PROC					; COMDAT

; 717  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx

; 718  :     PyObject *v, *w;
; 719  : 
; 720  :     if (!PyArg_UnpackTuple(args, "divmod", 2, 2, &v, &w))

  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR w$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR v$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06MPFFAOOK@divmod?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN1@builtin_di@2

; 721  :         return NULL;

  00037	33 c0		 xor	 eax, eax

; 723  : }

  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN1@builtin_di@2:

; 722  :     return PyNumber_Divmod(v, w);

  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR w$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR v$[rsp]
  00048	e8 00 00 00 00	 call	 PyNumber_Divmod

; 723  : }

  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
builtin_divmod ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EC@BHEOOLCL@eval?5must?5be?5given?5globals?5and?5l@ ; `string'
PUBLIC	??_C@_0BG@MMLHEKFC@string?0?5bytes?5or?5code?$AA@ ; `string'
PUBLIC	??_C@_0DM@LCBLLFJM@code?5object?5passed?5to?5eval?$CI?$CJ?5may@ ; `string'
PUBLIC	??_C@_0N@MNFFDJII@__builtins__?$AA@		; `string'
PUBLIC	??_C@_0BH@LLPACJFC@globals?5must?5be?5a?5dict?$AA@ ; `string'
PUBLIC	??_C@_0DJ@LOMAAGCE@globals?5must?5be?5a?5real?5dict?$DL?5try@ ; `string'
PUBLIC	??_C@_0BJ@KKOGEBDF@locals?5must?5be?5a?5mapping?$AA@ ; `string'
EXTRN	PyRun_StringFlags:PROC
EXTRN	PyEval_EvalCode:PROC
EXTRN	PyCode_Type:BYTE
EXTRN	PyDict_SetItemString:PROC
EXTRN	PyEval_GetBuiltins:PROC
EXTRN	PyEval_GetLocals:PROC
EXTRN	PyEval_GetGlobals:PROC
EXTRN	PyMapping_Check:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_eval DD imagerel builtin_eval
	DD	imagerel builtin_eval+508
	DD	imagerel $unwind$builtin_eval
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_eval DD 020801H
	DD	030049208H
xdata	ENDS
;	COMDAT ??_C@_0EC@BHEOOLCL@eval?5must?5be?5given?5globals?5and?5l@
CONST	SEGMENT
??_C@_0EC@BHEOOLCL@eval?5must?5be?5given?5globals?5and?5l@ DB 'eval must '
	DB	'be given globals and locals when called without a frame', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MMLHEKFC@string?0?5bytes?5or?5code?$AA@
CONST	SEGMENT
??_C@_0BG@MMLHEKFC@string?0?5bytes?5or?5code?$AA@ DB 'string, bytes or co'
	DB	'de', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@LCBLLFJM@code?5object?5passed?5to?5eval?$CI?$CJ?5may@
CONST	SEGMENT
??_C@_0DM@LCBLLFJM@code?5object?5passed?5to?5eval?$CI?$CJ?5may@ DB 'code '
	DB	'object passed to eval() may not contain free variables', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MNFFDJII@__builtins__?$AA@
CONST	SEGMENT
??_C@_0N@MNFFDJII@__builtins__?$AA@ DB '__builtins__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LLPACJFC@globals?5must?5be?5a?5dict?$AA@
CONST	SEGMENT
??_C@_0BH@LLPACJFC@globals?5must?5be?5a?5dict?$AA@ DB 'globals must be a '
	DB	'dict', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@LOMAAGCE@globals?5must?5be?5a?5real?5dict?$DL?5try@
CONST	SEGMENT
??_C@_0DJ@LOMAAGCE@globals?5must?5be?5a?5real?5dict?$DL?5try@ DB 'globals'
	DB	' must be a real dict; try eval(expr, {}, mapping)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KKOGEBDF@locals?5must?5be?5a?5mapping?$AA@
CONST	SEGMENT
??_C@_0BJ@KKOGEBDF@locals?5must?5be?5a?5mapping?$AA@ DB 'locals must be a'
	DB	' mapping', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT builtin_eval
_TEXT	SEGMENT
globals$ = 64
cmd$ = 72
self$ = 96
args$ = 104
cf$ = 112
locals$ = 120
builtin_eval PROC					; COMDAT

; 733  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	53		 push	 rbx
  00004	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 734  :     PyObject *cmd, *result, *tmp = NULL;
; 735  :     PyObject *globals = Py_None, *locals = Py_None;
; 736  :     char *str;
; 737  :     PyCompilerFlags cf;
; 738  : 
; 739  :     if (!PyArg_UnpackTuple(args, "eval", 1, 3, &cmd, &globals, &locals))

  00008	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  0000c	48 8b c2	 mov	 rax, rdx
  0000f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00015	49 89 4b d8	 mov	 QWORD PTR [r11-40], rcx
  00019	49 8d 4b e8	 lea	 rcx, QWORD PTR [r11-24]
  0001d	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  00024	49 89 4b d0	 mov	 QWORD PTR [r11-48], rcx
  00028	49 8d 4b f0	 lea	 rcx, QWORD PTR [r11-16]
  0002c	45 8d 41 fe	 lea	 r8d, QWORD PTR [r9-2]
  00030	49 89 4b c8	 mov	 QWORD PTR [r11-56], rcx
  00034	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04KGAGIKCD@eval?$AA@
  0003b	48 8b c8	 mov	 rcx, rax
  0003e	49 89 5b e8	 mov	 QWORD PTR [r11-24], rbx
  00042	49 89 5b 20	 mov	 QWORD PTR [r11+32], rbx
  00046	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0004b	85 c0		 test	 eax, eax

; 740  :         return NULL;

  0004d	0f 84 a1 01 00
	00		 je	 $LN32@builtin_ev

; 741  :     if (locals != Py_None && !PyMapping_Check(locals)) {

  00053	48 8b 4c 24 78	 mov	 rcx, QWORD PTR locals$[rsp]
  00058	48 3b cb	 cmp	 rcx, rbx
  0005b	74 1a		 je	 SHORT $LN20@builtin_ev
  0005d	e8 00 00 00 00	 call	 PyMapping_Check
  00062	85 c0		 test	 eax, eax
  00064	75 0c		 jne	 SHORT $LN29@builtin_ev

; 742  :         PyErr_SetString(PyExc_TypeError, "locals must be a mapping");

  00066	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@KKOGEBDF@locals?5must?5be?5a?5mapping?$AA@

; 743  :         return NULL;

  0006d	e9 76 01 00 00	 jmp	 $LN33@builtin_ev
$LN29@builtin_ev:
  00072	48 8b 4c 24 78	 mov	 rcx, QWORD PTR locals$[rsp]
$LN20@builtin_ev:

; 744  :     }
; 745  :     if (globals != Py_None && !PyDict_Check(globals)) {

  00077	4c 8b 44 24 40	 mov	 r8, QWORD PTR globals$[rsp]
  0007c	4c 3b c3	 cmp	 r8, rbx
  0007f	74 3f		 je	 SHORT $LN25@builtin_ev
  00081	49 8b 40 58	 mov	 rax, QWORD PTR [r8+88]
  00085	f7 80 00 01 00
	00 00 00 00 20	 test	 DWORD PTR [rax+256], 536870912 ; 20000000H
  0008f	75 21		 jne	 SHORT $LN18@builtin_ev

; 746  :         PyErr_SetString(PyExc_TypeError, PyMapping_Check(globals) ?
; 747  :             "globals must be a real dict; try eval(expr, {}, mapping)"
; 748  :             : "globals must be a dict");

  00091	49 8b c8	 mov	 rcx, r8
  00094	e8 00 00 00 00	 call	 PyMapping_Check
  00099	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DJ@LOMAAGCE@globals?5must?5be?5a?5real?5dict?$DL?5try@
  000a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@LLPACJFC@globals?5must?5be?5a?5dict?$AA@
  000a7	85 c0		 test	 eax, eax
  000a9	48 0f 45 d1	 cmovne	 rdx, rcx

; 749  :         return NULL;

  000ad	e9 36 01 00 00	 jmp	 $LN33@builtin_ev
$LN18@builtin_ev:

; 755  :     }
; 756  :     else if (locals == Py_None)

  000b2	48 3b cb	 cmp	 rcx, rbx
  000b5	49 0f 44 c8	 cmove	 rcx, r8
  000b9	48 89 4c 24 78	 mov	 QWORD PTR locals$[rsp], rcx
  000be	eb 29		 jmp	 SHORT $LN15@builtin_ev
$LN25@builtin_ev:

; 750  :     }
; 751  :     if (globals == Py_None) {
; 752  :         globals = PyEval_GetGlobals();

  000c0	e8 00 00 00 00	 call	 PyEval_GetGlobals

; 753  :         if (locals == Py_None)

  000c5	48 8b 4c 24 78	 mov	 rcx, QWORD PTR locals$[rsp]
  000ca	4c 8b c0	 mov	 r8, rax
  000cd	48 89 44 24 40	 mov	 QWORD PTR globals$[rsp], rax
  000d2	48 3b cb	 cmp	 rcx, rbx
  000d5	75 12		 jne	 SHORT $LN15@builtin_ev

; 754  :             locals = PyEval_GetLocals();

  000d7	e8 00 00 00 00	 call	 PyEval_GetLocals

; 755  :     }
; 756  :     else if (locals == Py_None)

  000dc	4c 8b 44 24 40	 mov	 r8, QWORD PTR globals$[rsp]
  000e1	48 8b c8	 mov	 rcx, rax
  000e4	48 89 44 24 78	 mov	 QWORD PTR locals$[rsp], rax
$LN15@builtin_ev:

; 757  :         locals = globals;
; 758  : 
; 759  :     if (globals == NULL || locals == NULL) {

  000e9	4d 85 c0	 test	 r8, r8
  000ec	0f 84 ef 00 00
	00		 je	 $LN13@builtin_ev
  000f2	48 85 c9	 test	 rcx, rcx
  000f5	0f 84 e6 00 00
	00		 je	 $LN13@builtin_ev

; 764  :     }
; 765  : 
; 766  :     if (PyDict_GetItemString(globals, "__builtins__") == NULL) {

  000fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@MNFFDJII@__builtins__?$AA@
  00102	49 8b c8	 mov	 rcx, r8
  00105	e8 00 00 00 00	 call	 PyDict_GetItemString
  0010a	48 85 c0	 test	 rax, rax
  0010d	75 21		 jne	 SHORT $LN11@builtin_ev

; 767  :         if (PyDict_SetItemString(globals, "__builtins__",
; 768  :                                  PyEval_GetBuiltins()) != 0)

  0010f	e8 00 00 00 00	 call	 PyEval_GetBuiltins
  00114	48 8b 4c 24 40	 mov	 rcx, QWORD PTR globals$[rsp]
  00119	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@MNFFDJII@__builtins__?$AA@
  00120	4c 8b c0	 mov	 r8, rax
  00123	e8 00 00 00 00	 call	 PyDict_SetItemString
  00128	85 c0		 test	 eax, eax

; 769  :             return NULL;

  0012a	0f 85 c4 00 00
	00		 jne	 $LN32@builtin_ev
$LN11@builtin_ev:

; 770  :     }
; 771  : 
; 772  :     if (PyCode_Check(cmd)) {

  00130	48 8b 4c 24 48	 mov	 rcx, QWORD PTR cmd$[rsp]
  00135	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCode_Type
  0013c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00140	75 2f		 jne	 SHORT $LN10@builtin_ev

; 773  :         if (PyCode_GetNumFree((PyCodeObject *)cmd) > 0) {

  00142	48 8b 81 98 00
	00 00		 mov	 rax, QWORD PTR [rcx+152]
  00149	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0014e	7e 0c		 jle	 SHORT $LN9@builtin_ev

; 774  :             PyErr_SetString(PyExc_TypeError,
; 775  :         "code object passed to eval() may not contain free variables");

  00150	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DM@LCBLLFJM@code?5object?5passed?5to?5eval?$CI?$CJ?5may@

; 776  :             return NULL;

  00157	e9 8c 00 00 00	 jmp	 $LN33@builtin_ev
$LN9@builtin_ev:

; 777  :         }
; 778  :         return PyEval_EvalCode(cmd, globals, locals);

  0015c	4c 8b 44 24 78	 mov	 r8, QWORD PTR locals$[rsp]
  00161	48 8b 54 24 40	 mov	 rdx, QWORD PTR globals$[rsp]
  00166	e8 00 00 00 00	 call	 PyEval_EvalCode

; 791  :     Py_XDECREF(tmp);
; 792  :     return result;
; 793  : }

  0016b	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0016f	5b		 pop	 rbx
  00170	c3		 ret	 0
$LN10@builtin_ev:

; 779  :     }
; 780  : 
; 781  :     cf.cf_flags = PyCF_SOURCE_IS_UTF8;
; 782  :     str = source_as_string(cmd, "eval", "string, bytes or code", &cf);

  00171	4c 8d 4c 24 70	 lea	 r9, QWORD PTR cf$[rsp]
  00176	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BG@MMLHEKFC@string?0?5bytes?5or?5code?$AA@
  0017d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04KGAGIKCD@eval?$AA@
  00184	c7 44 24 70 00
	01 00 00	 mov	 DWORD PTR cf$[rsp], 256	; 00000100H
  0018c	e8 00 00 00 00	 call	 source_as_string
  00191	48 8b d8	 mov	 rbx, rax

; 783  :     if (str == NULL)

  00194	48 85 c0	 test	 rax, rax

; 784  :         return NULL;

  00197	74 5b		 je	 SHORT $LN32@builtin_ev
  00199	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@builtin_ev:

; 785  : 
; 786  :     while (*str == ' ' || *str == '\t')

  001a0	0f b6 03	 movzx	 eax, BYTE PTR [rbx]
  001a3	3c 20		 cmp	 al, 32			; 00000020H
  001a5	74 04		 je	 SHORT $LN5@builtin_ev
  001a7	3c 09		 cmp	 al, 9
  001a9	75 05		 jne	 SHORT $LN6@builtin_ev
$LN5@builtin_ev:

; 787  :         str++;

  001ab	48 ff c3	 inc	 rbx
  001ae	eb f0		 jmp	 SHORT $LL7@builtin_ev
$LN6@builtin_ev:

; 788  : 
; 789  :     (void)PyEval_MergeCompilerFlags(&cf);

  001b0	48 8d 4c 24 70	 lea	 rcx, QWORD PTR cf$[rsp]
  001b5	e8 00 00 00 00	 call	 PyEval_MergeCompilerFlags

; 790  :     result = PyRun_StringFlags(str, Py_eval_input, globals, locals, &cf);

  001ba	4c 8b 4c 24 78	 mov	 r9, QWORD PTR locals$[rsp]
  001bf	4c 8b 44 24 40	 mov	 r8, QWORD PTR globals$[rsp]
  001c4	4c 8d 5c 24 70	 lea	 r11, QWORD PTR cf$[rsp]
  001c9	ba 02 01 00 00	 mov	 edx, 258		; 00000102H
  001ce	48 8b cb	 mov	 rcx, rbx
  001d1	4c 89 5c 24 20	 mov	 QWORD PTR [rsp+32], r11
  001d6	e8 00 00 00 00	 call	 PyRun_StringFlags

; 791  :     Py_XDECREF(tmp);
; 792  :     return result;
; 793  : }

  001db	48 83 c4 50	 add	 rsp, 80			; 00000050H
  001df	5b		 pop	 rbx
  001e0	c3		 ret	 0
$LN13@builtin_ev:

; 760  :         PyErr_SetString(PyExc_TypeError,
; 761  :             "eval must be given globals and locals "
; 762  :             "when called without a frame");

  001e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EC@BHEOOLCL@eval?5must?5be?5given?5globals?5and?5l@
$LN33@builtin_ev:
  001e8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  001ef	e8 00 00 00 00	 call	 PyErr_SetString
$LN32@builtin_ev:

; 763  :         return NULL;

  001f4	33 c0		 xor	 eax, eax

; 791  :     Py_XDECREF(tmp);
; 792  :     return result;
; 793  : }

  001f6	48 83 c4 50	 add	 rsp, 80			; 00000050H
  001fa	5b		 pop	 rbx
  001fb	c3		 ret	 0
builtin_eval ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DM@CLCDPCAL@code?5object?5passed?5to?5exec?$CI?$CJ?5may@ ; `string'
PUBLIC	??_C@_0CM@LDDCFEJK@arg?53?5must?5be?5a?5mapping?5or?5None?0@ ; `string'
PUBLIC	??_C@_0CI@FCNDFADJ@exec?$CI?$CJ?5arg?52?5must?5be?5a?5dict?0?5not@ ; `string'
PUBLIC	??_C@_0CC@HGGDBODK@globals?5and?5locals?5cannot?5be?5NUL@ ; `string'
EXTRN	PyExc_SystemError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_exec DD imagerel builtin_exec
	DD	imagerel builtin_exec+360
	DD	imagerel $unwind$builtin_exec
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$builtin_exec DD imagerel builtin_exec+360
	DD	imagerel builtin_exec+422
	DD	imagerel $chain$0$builtin_exec
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$builtin_exec DD imagerel builtin_exec+422
	DD	imagerel builtin_exec+573
	DD	imagerel $chain$2$builtin_exec
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$builtin_exec DD 020021H
	DD	0c3400H
	DD	imagerel builtin_exec
	DD	imagerel builtin_exec+360
	DD	imagerel $unwind$builtin_exec
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$builtin_exec DD 020521H
	DD	0c3405H
	DD	imagerel builtin_exec
	DD	imagerel builtin_exec+360
	DD	imagerel $unwind$builtin_exec
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_exec DD 040d01H
	DD	0d740dH
	DD	05006920dH
xdata	ENDS
;	COMDAT ??_C@_0DM@CLCDPCAL@code?5object?5passed?5to?5exec?$CI?$CJ?5may@
CONST	SEGMENT
??_C@_0DM@CLCDPCAL@code?5object?5passed?5to?5exec?$CI?$CJ?5may@ DB 'code '
	DB	'object passed to exec() may not contain free variables', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@LDDCFEJK@arg?53?5must?5be?5a?5mapping?5or?5None?0@
CONST	SEGMENT
??_C@_0CM@LDDCFEJK@arg?53?5must?5be?5a?5mapping?5or?5None?0@ DB 'arg 3 mu'
	DB	'st be a mapping or None, not %.100s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@FCNDFADJ@exec?$CI?$CJ?5arg?52?5must?5be?5a?5dict?0?5not@
CONST	SEGMENT
??_C@_0CI@FCNDFADJ@exec?$CI?$CJ?5arg?52?5must?5be?5a?5dict?0?5not@ DB 'ex'
	DB	'ec() arg 2 must be a dict, not %.100s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@HGGDBODK@globals?5and?5locals?5cannot?5be?5NUL@
CONST	SEGMENT
??_C@_0CC@HGGDBODK@globals?5and?5locals?5cannot?5be?5NUL@ DB 'globals and'
	DB	' locals cannot be NULL', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT builtin_exec
_TEXT	SEGMENT
globals$ = 64
prog$ = 72
self$ = 96
args$ = 104
cf$21992 = 112
locals$ = 120
builtin_exec PROC					; COMDAT

; 807  : {

  00000	48 89 7c 24 10	 mov	 QWORD PTR [rsp+16], rdi
  00005	55		 push	 rbp
  00006	48 8b ec	 mov	 rbp, rsp
  00009	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000d	48 8b c2	 mov	 rax, rdx

; 808  :     PyObject *v;
; 809  :     PyObject *prog, *globals = Py_None, *locals = Py_None;
; 810  : 
; 811  :     if (!PyArg_UnpackTuple(args, "exec", 1, 3, &prog, &globals, &locals))

  00010	48 8d 4d 28	 lea	 rcx, QWORD PTR locals$[rbp-80]
  00014	41 b9 03 00 00
	00		 mov	 r9d, 3
  0001a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0001f	48 8d 4d f0	 lea	 rcx, QWORD PTR globals$[rbp-80]
  00023	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  0002a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0002f	48 8d 4d f8	 lea	 rcx, QWORD PTR prog$[rbp-80]
  00033	45 8d 41 fe	 lea	 r8d, QWORD PTR [r9-2]
  00037	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04MGEIEJAD@exec?$AA@
  00043	48 8b c8	 mov	 rcx, rax
  00046	48 89 7d f0	 mov	 QWORD PTR globals$[rbp-80], rdi
  0004a	48 89 7d 28	 mov	 QWORD PTR locals$[rbp-80], rdi
  0004e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00053	85 c0		 test	 eax, eax

; 812  :         return NULL;

  00055	74 48		 je	 SHORT $LN24@builtin_ex

; 813  : 
; 814  :     if (globals == Py_None) {

  00057	48 8b 4d f0	 mov	 rcx, QWORD PTR globals$[rbp-80]
  0005b	48 3b cf	 cmp	 rcx, rdi
  0005e	75 4c		 jne	 SHORT $LN17@builtin_ex

; 815  :         globals = PyEval_GetGlobals();

  00060	e8 00 00 00 00	 call	 PyEval_GetGlobals
  00065	48 8b c8	 mov	 rcx, rax
  00068	48 89 45 f0	 mov	 QWORD PTR globals$[rbp-80], rax

; 816  :         if (locals == Py_None) {

  0006c	48 8b 45 28	 mov	 rax, QWORD PTR locals$[rbp-80]
  00070	48 3b c7	 cmp	 rax, rdi
  00073	75 0d		 jne	 SHORT $LN16@builtin_ex

; 817  :             locals = PyEval_GetLocals();

  00075	e8 00 00 00 00	 call	 PyEval_GetLocals
  0007a	48 8b 4d f0	 mov	 rcx, QWORD PTR globals$[rbp-80]
  0007e	48 89 45 28	 mov	 QWORD PTR locals$[rbp-80], rax
$LN16@builtin_ex:

; 818  :         }
; 819  :         if (!globals || !locals) {

  00082	48 85 c9	 test	 rcx, rcx
  00085	74 05		 je	 SHORT $LN14@builtin_ex
  00087	48 85 c0	 test	 rax, rax
  0008a	75 2f		 jne	 SHORT $LN12@builtin_ex
$LN14@builtin_ex:

; 820  :             PyErr_SetString(PyExc_SystemError,
; 821  :                             "globals and locals cannot be NULL");

  0008c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00093	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@HGGDBODK@globals?5and?5locals?5cannot?5be?5NUL@
  0009a	e8 00 00 00 00	 call	 PyErr_SetString
$LN24@builtin_ex:

; 822  :             return NULL;

  0009f	33 c0		 xor	 eax, eax

; 872  : }

  000a1	48 8b 7c 24 68	 mov	 rdi, QWORD PTR [rsp+104]
  000a6	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000aa	5d		 pop	 rbp
  000ab	c3		 ret	 0
$LN17@builtin_ex:

; 823  :         }
; 824  :     }
; 825  :     else if (locals == Py_None)

  000ac	48 8b 45 28	 mov	 rax, QWORD PTR locals$[rbp-80]
  000b0	48 3b c7	 cmp	 rax, rdi
  000b3	48 0f 44 c1	 cmove	 rax, rcx
  000b7	48 89 45 28	 mov	 QWORD PTR locals$[rbp-80], rax
$LN12@builtin_ex:

; 826  :         locals = globals;
; 827  : 
; 828  :     if (!PyDict_Check(globals)) {

  000bb	4c 8b 41 58	 mov	 r8, QWORD PTR [rcx+88]
  000bf	41 f7 80 00 01
	00 00 00 00 00
	20		 test	 DWORD PTR [r8+256], 536870912 ; 20000000H
  000ca	75 24		 jne	 SHORT $LN11@builtin_ex

; 829  :         PyErr_Format(PyExc_TypeError, "exec() arg 2 must be a dict, not %.100s",
; 830  :                      globals->ob_type->tp_name);

  000cc	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  000d0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@FCNDFADJ@exec?$CI?$CJ?5arg?52?5must?5be?5a?5dict?0?5not@
  000de	e8 00 00 00 00	 call	 PyErr_Format

; 831  :         return NULL;

  000e3	33 c0		 xor	 eax, eax

; 872  : }

  000e5	48 8b 7c 24 68	 mov	 rdi, QWORD PTR [rsp+104]
  000ea	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000ee	5d		 pop	 rbp
  000ef	c3		 ret	 0
$LN11@builtin_ex:

; 832  :     }
; 833  :     if (!PyMapping_Check(locals)) {

  000f0	48 8b c8	 mov	 rcx, rax
  000f3	e8 00 00 00 00	 call	 PyMapping_Check
  000f8	85 c0		 test	 eax, eax
  000fa	75 2c		 jne	 SHORT $LN10@builtin_ex

; 834  :         PyErr_Format(PyExc_TypeError,
; 835  :             "arg 3 must be a mapping or None, not %.100s",
; 836  :             locals->ob_type->tp_name);

  000fc	48 8b 45 28	 mov	 rax, QWORD PTR locals$[rbp-80]
  00100	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00107	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@LDDCFEJK@arg?53?5must?5be?5a?5mapping?5or?5None?0@
  0010e	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  00112	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00116	e8 00 00 00 00	 call	 PyErr_Format

; 837  :         return NULL;

  0011b	33 c0		 xor	 eax, eax

; 872  : }

  0011d	48 8b 7c 24 68	 mov	 rdi, QWORD PTR [rsp+104]
  00122	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00126	5d		 pop	 rbp
  00127	c3		 ret	 0
$LN10@builtin_ex:

; 838  :     }
; 839  :     if (PyDict_GetItemString(globals, "__builtins__") == NULL) {

  00128	48 8b 4d f0	 mov	 rcx, QWORD PTR globals$[rbp-80]
  0012c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@MNFFDJII@__builtins__?$AA@
  00133	e8 00 00 00 00	 call	 PyDict_GetItemString
  00138	48 85 c0	 test	 rax, rax
  0013b	75 20		 jne	 SHORT $LN8@builtin_ex

; 840  :         if (PyDict_SetItemString(globals, "__builtins__",
; 841  :                                  PyEval_GetBuiltins()) != 0)

  0013d	e8 00 00 00 00	 call	 PyEval_GetBuiltins
  00142	48 8b 4d f0	 mov	 rcx, QWORD PTR globals$[rbp-80]
  00146	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@MNFFDJII@__builtins__?$AA@
  0014d	4c 8b c0	 mov	 r8, rax
  00150	e8 00 00 00 00	 call	 PyDict_SetItemString
  00155	85 c0		 test	 eax, eax

; 842  :             return NULL;

  00157	0f 85 42 ff ff
	ff		 jne	 $LN24@builtin_ex
$LN8@builtin_ex:

; 843  :     }
; 844  : 
; 845  :     if (PyCode_Check(prog)) {

  0015d	48 8b 4d f8	 mov	 rcx, QWORD PTR prog$[rbp-80]
  00161	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCode_Type
  00168	48 89 5c 24 60	 mov	 QWORD PTR [rsp+96], rbx
  0016d	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00171	75 42		 jne	 SHORT $LN7@builtin_ex

; 846  :         if (PyCode_GetNumFree((PyCodeObject *)prog) > 0) {

  00173	48 8b 81 98 00
	00 00		 mov	 rax, QWORD PTR [rcx+152]
  0017a	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0017f	7e 25		 jle	 SHORT $LN6@builtin_ex

; 847  :             PyErr_SetString(PyExc_TypeError,
; 848  :                 "code object passed to exec() may not "
; 849  :                 "contain free variables");

  00181	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00188	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DM@CLCDPCAL@code?5object?5passed?5to?5exec?$CI?$CJ?5may@
  0018f	e8 00 00 00 00	 call	 PyErr_SetString
$LN23@builtin_ex:

; 850  :             return NULL;

  00194	33 c0		 xor	 eax, eax
  00196	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]

; 872  : }

  0019b	48 8b 7c 24 68	 mov	 rdi, QWORD PTR [rsp+104]
  001a0	48 83 c4 50	 add	 rsp, 80			; 00000050H
  001a4	5d		 pop	 rbp
  001a5	c3		 ret	 0
$LN6@builtin_ex:

; 851  :         }
; 852  :         v = PyEval_EvalCode(prog, globals, locals);

  001a6	4c 8b 45 28	 mov	 r8, QWORD PTR locals$[rbp-80]
  001aa	48 8b 55 f0	 mov	 rdx, QWORD PTR globals$[rbp-80]
  001ae	e8 00 00 00 00	 call	 PyEval_EvalCode

; 853  :     }
; 854  :     else {

  001b3	eb 5c		 jmp	 SHORT $LN2@builtin_ex
$LN7@builtin_ex:

; 855  :         char *str;
; 856  :         PyCompilerFlags cf;
; 857  :         cf.cf_flags = PyCF_SOURCE_IS_UTF8;
; 858  :         str = source_as_string(prog, "exec",
; 859  :                                      "string, bytes or code", &cf);

  001b5	4c 8d 4d 20	 lea	 r9, QWORD PTR cf$21992[rbp-80]
  001b9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BG@MMLHEKFC@string?0?5bytes?5or?5code?$AA@
  001c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04MGEIEJAD@exec?$AA@
  001c7	c7 45 20 00 01
	00 00		 mov	 DWORD PTR cf$21992[rbp-80], 256 ; 00000100H
  001ce	e8 00 00 00 00	 call	 source_as_string
  001d3	48 8b d8	 mov	 rbx, rax

; 860  :         if (str == NULL)

  001d6	48 85 c0	 test	 rax, rax

; 861  :             return NULL;

  001d9	74 b9		 je	 SHORT $LN23@builtin_ex

; 862  :         if (PyEval_MergeCompilerFlags(&cf))

  001db	48 8d 4d 20	 lea	 rcx, QWORD PTR cf$21992[rbp-80]
  001df	e8 00 00 00 00	 call	 PyEval_MergeCompilerFlags

; 863  :             v = PyRun_StringFlags(str, Py_file_input, globals,
; 864  :                                   locals, &cf);

  001e4	4c 8b 4d 28	 mov	 r9, QWORD PTR locals$[rbp-80]
  001e8	4c 8b 45 f0	 mov	 r8, QWORD PTR globals$[rbp-80]
  001ec	ba 01 01 00 00	 mov	 edx, 257		; 00000101H
  001f1	48 8b cb	 mov	 rcx, rbx
  001f4	85 c0		 test	 eax, eax
  001f6	74 0b		 je	 SHORT $LN3@builtin_ex
  001f8	48 8d 45 20	 lea	 rax, QWORD PTR cf$21992[rbp-80]
  001fc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax

; 865  :         else

  00201	eb 09		 jmp	 SHORT $LN22@builtin_ex
$LN3@builtin_ex:

; 866  :             v = PyRun_String(str, Py_file_input, globals, locals);

  00203	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
$LN22@builtin_ex:
  0020c	e8 00 00 00 00	 call	 PyRun_StringFlags
$LN2@builtin_ex:

; 867  :     }
; 868  :     if (v == NULL)

  00211	48 85 c0	 test	 rax, rax

; 869  :         return NULL;

  00214	0f 84 7a ff ff
	ff		 je	 $LN23@builtin_ex

; 870  :     Py_DECREF(v);

  0021a	48 8b c8	 mov	 rcx, rax
  0021d	e8 00 00 00 00	 call	 _Py_DecRef

; 871  :     Py_RETURN_NONE;

  00222	48 8b cf	 mov	 rcx, rdi
  00225	e8 00 00 00 00	 call	 _Py_IncRef
  0022a	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  0022f	48 8b c7	 mov	 rax, rdi

; 872  : }

  00232	48 8b 7c 24 68	 mov	 rdi, QWORD PTR [rsp+104]
  00237	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0023b	5d		 pop	 rbp
  0023c	c3		 ret	 0
builtin_exec ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@KJNHDPIO@getattr?$CI?$CJ?3?5attribute?5name?5must?5b@ ; `string'
EXTRN	PyObject_GetAttr:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_getattr DD imagerel builtin_getattr
	DD	imagerel builtin_getattr+197
	DD	imagerel $unwind$builtin_getattr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_getattr DD 038001H
	DD	0a3480H
	DD	0a207H
xdata	ENDS
;	COMDAT ??_C@_0CJ@KJNHDPIO@getattr?$CI?$CJ?3?5attribute?5name?5must?5b@
CONST	SEGMENT
??_C@_0CJ@KJNHDPIO@getattr?$CI?$CJ?3?5attribute?5name?5must?5b@ DB 'getat'
	DB	'tr(): attribute name must be string', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT builtin_getattr
_TEXT	SEGMENT
v$ = 64
self$ = 96
args$ = 104
dflt$ = 112
name$ = 120
builtin_getattr PROC					; COMDAT

; 885  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 886  :     PyObject *v, *result, *dflt = NULL;
; 887  :     PyObject *name;
; 888  : 
; 889  :     if (!PyArg_UnpackTuple(args, "getattr", 2, 3, &v, &name, &dflt))

  00007	49 8d 4b 18	 lea	 rcx, QWORD PTR [r11+24]
  0000b	48 8b c2	 mov	 rax, rdx
  0000e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00014	49 89 4b d8	 mov	 QWORD PTR [r11-40], rcx
  00018	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07HDABHGP@getattr?$AA@
  00023	49 89 4b d0	 mov	 QWORD PTR [r11-48], rcx
  00027	49 8d 4b e8	 lea	 rcx, QWORD PTR [r11-24]
  0002b	45 8d 41 ff	 lea	 r8d, QWORD PTR [r9-1]
  0002f	49 89 4b c8	 mov	 QWORD PTR [r11-56], rcx
  00033	48 8b c8	 mov	 rcx, rax
  00036	49 c7 43 18 00
	00 00 00	 mov	 QWORD PTR [r11+24], 0
  0003e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00043	85 c0		 test	 eax, eax

; 890  :         return NULL;

  00045	74 28		 je	 SHORT $LN6@builtin_ge

; 891  : 
; 892  :     if (!PyUnicode_Check(name)) {

  00047	48 8b 54 24 78	 mov	 rdx, QWORD PTR name$[rsp]
  0004c	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  00050	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  0005a	75 1a		 jne	 SHORT $LN2@builtin_ge

; 893  :         PyErr_SetString(PyExc_TypeError,
; 894  :                         "getattr(): attribute name must be string");

  0005c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00063	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@KJNHDPIO@getattr?$CI?$CJ?3?5attribute?5name?5must?5b@
  0006a	e8 00 00 00 00	 call	 PyErr_SetString
$LN6@builtin_ge:

; 895  :         return NULL;

  0006f	33 c0		 xor	 eax, eax

; 906  : }

  00071	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00075	c3		 ret	 0
$LN2@builtin_ge:

; 896  :     }
; 897  :     result = PyObject_GetAttr(v, name);

  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  0007b	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  00080	e8 00 00 00 00	 call	 PyObject_GetAttr
  00085	48 8b d8	 mov	 rbx, rax

; 898  :     if (result == NULL && dflt != NULL &&
; 899  :         PyErr_ExceptionMatches(PyExc_AttributeError))

  00088	48 85 c0	 test	 rax, rax
  0008b	75 2b		 jne	 SHORT $LN1@builtin_ge
  0008d	48 39 44 24 70	 cmp	 QWORD PTR dflt$[rsp], rax
  00092	74 24		 je	 SHORT $LN1@builtin_ge
  00094	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  0009b	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  000a0	85 c0		 test	 eax, eax
  000a2	74 14		 je	 SHORT $LN1@builtin_ge

; 900  :     {
; 901  :         PyErr_Clear();

  000a4	e8 00 00 00 00	 call	 PyErr_Clear

; 902  :         Py_INCREF(dflt);

  000a9	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dflt$[rsp]
  000ae	e8 00 00 00 00	 call	 _Py_IncRef

; 903  :         result = dflt;

  000b3	48 8b 5c 24 70	 mov	 rbx, QWORD PTR dflt$[rsp]
$LN1@builtin_ge:

; 904  :     }
; 905  :     return result;

  000b8	48 8b c3	 mov	 rax, rbx
  000bb	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]

; 906  : }

  000c0	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000c4	c3		 ret	 0
builtin_getattr ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$builtin_globals DD imagerel builtin_globals
	DD	imagerel builtin_globals+87
	DD	imagerel $unwind$builtin_globals
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_globals DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\bltinmodule.c
xdata	ENDS
;	COMDAT builtin_globals
_TEXT	SEGMENT
self$ = 64
builtin_globals PROC					; COMDAT

; 918  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 919  :     PyObject *d;
; 920  : 
; 921  :     d = PyEval_GetGlobals();

  00006	e8 00 00 00 00	 call	 PyEval_GetGlobals
  0000b	48 8b d8	 mov	 rbx, rax

; 922  :     Py_XINCREF(d);

  0000e	48 85 c0	 test	 rax, rax
  00011	74 3e		 je	 SHORT $LN3@builtin_gl
  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	75 32		 jne	 SHORT $LN11@builtin_gl
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0002a	4c 8b cb	 mov	 r9, rbx
  0002d	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00033	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0003b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00040	85 c0		 test	 eax, eax
  00042	75 06		 jne	 SHORT $LN7@builtin_gl
  00044	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00048	74 04		 je	 SHORT $LN11@builtin_gl
$LN7@builtin_gl:
  0004a	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN11@builtin_gl:

; 923  :     return d;

  0004e	48 8b c3	 mov	 rax, rbx
$LN3@builtin_gl:

; 924  : }

  00051	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00055	5b		 pop	 rbx
  00056	c3		 ret	 0
builtin_globals ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@JDBFCNOH@hasattr?$CI?$CJ?3?5attribute?5name?5must?5b@ ; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$builtin_hasattr DD imagerel builtin_hasattr
	DD	imagerel builtin_hasattr+256
	DD	imagerel $unwind$builtin_hasattr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_hasattr DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0CJ@JDBFCNOH@hasattr?$CI?$CJ?3?5attribute?5name?5must?5b@
CONST	SEGMENT
??_C@_0CJ@JDBFCNOH@hasattr?$CI?$CJ?3?5attribute?5name?5must?5b@ DB 'hasat'
	DB	'tr(): attribute name must be string', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\bltinmodule.c
CONST	ENDS
;	COMDAT builtin_hasattr
_TEXT	SEGMENT
self$ = 64
args$ = 72
v$ = 80
name$ = 88
builtin_hasattr PROC					; COMDAT

; 934  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx

; 935  :     PyObject *v;
; 936  :     PyObject *name;
; 937  : 
; 938  :     if (!PyArg_UnpackTuple(args, "hasattr", 2, 2, &v, &name))

  00007	48 8d 4c 24 58	 lea	 rcx, QWORD PTR name$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 50	 lea	 rcx, QWORD PTR v$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07DHFKBBGI@hasattr?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax

; 939  :         return NULL;

  00035	74 28		 je	 SHORT $LN11@builtin_ha

; 940  :     if (!PyUnicode_Check(name)) {

  00037	48 8b 54 24 58	 mov	 rdx, QWORD PTR name$[rsp]
  0003c	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  00040	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  0004a	75 1a		 jne	 SHORT $LN3@builtin_ha

; 941  :         PyErr_SetString(PyExc_TypeError,
; 942  :                         "hasattr(): attribute name must be string");

  0004c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00053	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@JDBFCNOH@hasattr?$CI?$CJ?3?5attribute?5name?5must?5b@
  0005a	e8 00 00 00 00	 call	 PyErr_SetString
$LN11@builtin_ha:

; 943  :         return NULL;

  0005f	33 c0		 xor	 eax, eax

; 955  : }

  00061	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00065	c3		 ret	 0
$LN3@builtin_ha:

; 944  :     }
; 945  :     v = PyObject_GetAttr(v, name);

  00066	48 8b 4c 24 50	 mov	 rcx, QWORD PTR v$[rsp]
  0006b	e8 00 00 00 00	 call	 PyObject_GetAttr
  00070	48 89 44 24 50	 mov	 QWORD PTR v$[rsp], rax

; 946  :     if (v == NULL) {

  00075	48 85 c0	 test	 rax, rax
  00078	75 2d		 jne	 SHORT $LN2@builtin_ha

; 947  :         if (PyErr_ExceptionMatches(PyExc_AttributeError)) {

  0007a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  00081	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00086	85 c0		 test	 eax, eax
  00088	74 d5		 je	 SHORT $LN11@builtin_ha

; 948  :             PyErr_Clear();

  0008a	e8 00 00 00 00	 call	 PyErr_Clear

; 949  :             Py_RETURN_FALSE;

  0008f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  00096	e8 00 00 00 00	 call	 _Py_IncRef
  0009b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 955  : }

  000a2	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a6	c3		 ret	 0
$LN2@builtin_ha:

; 950  :         }
; 951  :         return NULL;
; 952  :     }
; 953  :     Py_DECREF(v);

  000a7	48 8b c8	 mov	 rcx, rax
  000aa	e8 00 00 00 00	 call	 _Py_DecRef

; 954  :     Py_RETURN_TRUE;

  000af	e8 00 00 00 00	 call	 _Py_PXCTX
  000b4	85 c0		 test	 eax, eax
  000b6	75 3c		 jne	 SHORT $LN8@builtin_ha
  000b8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_TrueStruct
  000bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000cd	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000d3	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000db	e8 00 00 00 00	 call	 _PyParallel_Guard
  000e0	85 c0		 test	 eax, eax
  000e2	75 09		 jne	 SHORT $LN7@builtin_ha
  000e4	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_TrueStruct+32, 32 ; 00000020H
  000eb	74 07		 je	 SHORT $LN8@builtin_ha
$LN7@builtin_ha:
  000ed	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_TrueStruct+80
$LN8@builtin_ha:
  000f4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct

; 955  : }

  000fb	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ff	c3		 ret	 0
builtin_hasattr ENDP
_TEXT	ENDS
EXTRN	PyLong_FromVoidPtr:PROC
; Function compile flags: /Ogtpy
;	COMDAT builtin_id
_TEXT	SEGMENT
self$ = 8
v$ = 16
builtin_id PROC						; COMDAT

; 967  :     return PyLong_FromVoidPtr(v);

  00000	48 8b ca	 mov	 rcx, rdx

; 968  : }

  00003	e9 00 00 00 00	 jmp	 PyLong_FromVoidPtr
builtin_id ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@POONGOEJ@map?$CI?$CJ?5must?5have?5at?5least?5two?5arg@ ; `string'
PUBLIC	??_C@_05EHCCDEAK@map?$CI?$CJ?$AA@		; `string'
EXTRN	PyTuple_New:PROC
EXTRN	PyTuple_Size:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$map_new DD imagerel map_new
	DD	imagerel map_new+59
	DD	imagerel $unwind$map_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$map_new DD imagerel map_new+59
	DD	imagerel map_new+113
	DD	imagerel $chain$0$map_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$map_new DD imagerel map_new+113
	DD	imagerel map_new+154
	DD	imagerel $chain$3$map_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$map_new DD imagerel map_new+154
	DD	imagerel map_new+362
	DD	imagerel $chain$8$map_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$map_new DD 0a1421H
	DD	06c414H
	DD	0d740aH
	DD	0a3405H
	DD	0c6400H
	DD	0b5400H
	DD	imagerel map_new
	DD	imagerel map_new+59
	DD	imagerel $unwind$map_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$map_new DD 040921H
	DD	0b5409H
	DD	0c6400H
	DD	imagerel map_new
	DD	imagerel map_new+59
	DD	imagerel $unwind$map_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$map_new DD 020521H
	DD	0c6405H
	DD	imagerel map_new
	DD	imagerel map_new+59
	DD	imagerel $unwind$map_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$map_new DD 030801H
	DD	0e0046208H
	DD	0d002H
xdata	ENDS
;	COMDAT ??_C@_0CI@POONGOEJ@map?$CI?$CJ?5must?5have?5at?5least?5two?5arg@
CONST	SEGMENT
??_C@_0CI@POONGOEJ@map?$CI?$CJ?5must?5have?5at?5least?5two?5arg@ DB 'map('
	DB	') must have at least two arguments.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05EHCCDEAK@map?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_05EHCCDEAK@map?$CI?$CJ?$AA@ DB 'map()', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\bltinmodule.c
CONST	ENDS
;	COMDAT map_new
_TEXT	SEGMENT
type$ = 80
args$ = 88
kwds$ = 96
map_new	PROC						; COMDAT

; 987  : {

  00000	41 55		 push	 r13
  00002	41 56		 push	 r14
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 988  :     PyObject *it, *iters, *func;
; 989  :     mapobject *lz;
; 990  :     Py_ssize_t numargs, i;
; 991  : 
; 992  :     if (type == &PyMap_Type && !_PyArg_NoKeywords("map()", kwds))

  00008	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyMap_Type
  0000f	4c 8b ea	 mov	 r13, rdx
  00012	4c 8b f1	 mov	 r14, rcx
  00015	48 3b c8	 cmp	 rcx, rax
  00018	75 1e		 jne	 SHORT $LN8@map_new
  0001a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05EHCCDEAK@map?$CI?$CJ?$AA@
  00021	49 8b d0	 mov	 rdx, r8
  00024	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  00029	85 c0		 test	 eax, eax
  0002b	75 0b		 jne	 SHORT $LN8@map_new

; 993  :         return NULL;

  0002d	33 c0		 xor	 eax, eax

; 1028 : }

  0002f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00033	41 5e		 pop	 r14
  00035	41 5d		 pop	 r13
  00037	c3		 ret	 0
$LN8@map_new:

; 994  : 
; 995  :     numargs = PyTuple_Size(args);

  00038	49 8b cd	 mov	 rcx, r13
  0003b	48 89 74 24 60	 mov	 QWORD PTR [rsp+96], rsi
  00040	e8 00 00 00 00	 call	 PyTuple_Size
  00045	48 8b f0	 mov	 rsi, rax

; 996  :     if (numargs < 2) {

  00048	48 83 f8 02	 cmp	 rax, 2
  0004c	7d 23		 jge	 SHORT $LN7@map_new

; 997  :         PyErr_SetString(PyExc_TypeError,
; 998  :            "map() must have at least two arguments.");

  0004e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00055	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@POONGOEJ@map?$CI?$CJ?5must?5have?5at?5least?5two?5arg@
  0005c	e8 00 00 00 00	 call	 PyErr_SetString
  00061	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]

; 999  :         return NULL;

  00066	33 c0		 xor	 eax, eax

; 1028 : }

  00068	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006c	41 5e		 pop	 r14
  0006e	41 5d		 pop	 r13
  00070	c3		 ret	 0
$LN7@map_new:

; 1000 :     }
; 1001 : 
; 1002 :     iters = PyTuple_New(numargs-1);

  00071	48 8d 48 ff	 lea	 rcx, QWORD PTR [rax-1]
  00075	48 89 6c 24 58	 mov	 QWORD PTR [rsp+88], rbp
  0007a	e8 00 00 00 00	 call	 PyTuple_New
  0007f	48 8b e8	 mov	 rbp, rax

; 1003 :     if (iters == NULL)

  00082	48 85 c0	 test	 rax, rax
  00085	75 13		 jne	 SHORT $LN6@map_new
  00087	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  0008c	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]

; 1028 : }

  00091	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00095	41 5e		 pop	 r14
  00097	41 5d		 pop	 r13
  00099	c3		 ret	 0
$LN6@map_new:
  0009a	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  0009f	48 89 7c 24 68	 mov	 QWORD PTR [rsp+104], rdi

; 1004 :         return NULL;
; 1005 : 
; 1006 :     for (i=1 ; i<numargs ; i++) {

  000a4	bf 01 00 00 00	 mov	 edi, 1
  000a9	4c 89 64 24 30	 mov	 QWORD PTR [rsp+48], r12
  000ae	48 3b fe	 cmp	 rdi, rsi
  000b1	7d 2b		 jge	 SHORT $LN3@map_new
  000b3	4d 8b e5	 mov	 r12, r13
  000b6	48 8d 58 70	 lea	 rbx, QWORD PTR [rax+112]
  000ba	4c 2b e0	 sub	 r12, rax
  000bd	0f 1f 00	 npad	 3
$LL5@map_new:

; 1007 :         /* Get iterator. */
; 1008 :         it = PyObject_GetIter(PyTuple_GET_ITEM(args, i));

  000c0	49 8b 4c 1c 08	 mov	 rcx, QWORD PTR [r12+rbx+8]
  000c5	e8 00 00 00 00	 call	 PyObject_GetIter

; 1009 :         if (it == NULL) {

  000ca	48 85 c0	 test	 rax, rax
  000cd	74 23		 je	 SHORT $LN16@map_new

; 1010 :             Py_DECREF(iters);
; 1011 :             return NULL;
; 1012 :         }
; 1013 :         PyTuple_SET_ITEM(iters, i-1, it);

  000cf	48 ff c7	 inc	 rdi
  000d2	48 89 03	 mov	 QWORD PTR [rbx], rax
  000d5	48 83 c3 08	 add	 rbx, 8
  000d9	48 3b fe	 cmp	 rdi, rsi
  000dc	7c e2		 jl	 SHORT $LL5@map_new
$LN3@map_new:

; 1014 :     }
; 1015 : 
; 1016 :     /* create mapobject structure */
; 1017 :     lz = (mapobject *)type->tp_alloc(type, 0);

  000de	33 d2		 xor	 edx, edx
  000e0	49 8b ce	 mov	 rcx, r14
  000e3	41 ff 96 88 01
	00 00		 call	 QWORD PTR [r14+392]
  000ea	48 8b f8	 mov	 rdi, rax

; 1018 :     if (lz == NULL) {

  000ed	48 85 c0	 test	 rax, rax
  000f0	75 0c		 jne	 SHORT $LN1@map_new
$LN16@map_new:

; 1019 :         Py_DECREF(iters);

  000f2	48 8b cd	 mov	 rcx, rbp
  000f5	e8 00 00 00 00	 call	 _Py_DecRef

; 1020 :         return NULL;

  000fa	33 c0		 xor	 eax, eax
  000fc	eb 4a		 jmp	 SHORT $LN22@map_new
$LN1@map_new:

; 1021 :     }
; 1022 :     lz->iters = iters;

  000fe	48 89 68 60	 mov	 QWORD PTR [rax+96], rbp

; 1023 :     func = PyTuple_GET_ITEM(args, 0);

  00102	49 8b 5d 70	 mov	 rbx, QWORD PTR [r13+112]

; 1024 :     Py_INCREF(func);

  00106	e8 00 00 00 00	 call	 _Py_PXCTX
  0010b	85 c0		 test	 eax, eax
  0010d	75 32		 jne	 SHORT $LN12@map_new
  0010f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00116	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0011d	4c 8b cb	 mov	 r9, rbx
  00120	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00126	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0012e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00133	85 c0		 test	 eax, eax
  00135	75 06		 jne	 SHORT $LN11@map_new
  00137	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0013b	74 04		 je	 SHORT $LN12@map_new
$LN11@map_new:
  0013d	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN12@map_new:

; 1025 :     lz->func = func;

  00141	48 89 5f 68	 mov	 QWORD PTR [rdi+104], rbx

; 1026 : 
; 1027 :     return (PyObject *)lz;

  00145	48 8b c7	 mov	 rax, rdi
$LN22@map_new:
  00148	48 8b 7c 24 68	 mov	 rdi, QWORD PTR [rsp+104]
  0014d	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00152	4c 8b 64 24 30	 mov	 r12, QWORD PTR [rsp+48]
  00157	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  0015c	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]

; 1028 : }

  00161	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00165	41 5e		 pop	 r14
  00167	41 5d		 pop	 r13
  00169	c3		 ret	 0
map_new	ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$map_dealloc DD imagerel map_dealloc
	DD	imagerel map_dealloc+262
	DD	imagerel $unwind$map_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$map_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\bltinmodule.c
xdata	ENDS
;	COMDAT map_dealloc
_TEXT	SEGMENT
lz$ = 64
map_dealloc PROC					; COMDAT

; 1032 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 1033 :     PyObject_GC_UnTrack(lz);

  0000d	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 1034 :     Py_XDECREF(lz->iters);

  00012	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  00016	48 85 db	 test	 rbx, rbx
  00019	74 65		 je	 SHORT $LN7@map_deallo
  0001b	e8 00 00 00 00	 call	 _Py_PXCTX
  00020	85 c0		 test	 eax, eax
  00022	75 5c		 jne	 SHORT $LN7@map_deallo
  00024	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00028	a8 20		 test	 al, 32			; 00000020H
  0002a	75 4c		 jne	 SHORT $LN15@map_deallo
  0002c	84 c0		 test	 al, al
  0002e	78 48		 js	 SHORT $LN15@map_deallo
  00030	a8 02		 test	 al, 2
  00032	75 4c		 jne	 SHORT $LN7@map_deallo
  00034	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00038	75 46		 jne	 SHORT $LN7@map_deallo
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00048	4c 8b cb	 mov	 r9, rbx
  0004b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00051	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00059	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005e	48 8b cb	 mov	 rcx, rbx
  00061	85 c0		 test	 eax, eax
  00063	74 07		 je	 SHORT $LN20@map_deallo
  00065	e8 00 00 00 00	 call	 _Px_Dealloc
  0006a	eb 14		 jmp	 SHORT $LN7@map_deallo
$LN20@map_deallo:
  0006c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00070	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00076	eb 08		 jmp	 SHORT $LN7@map_deallo
$LN15@map_deallo:
  00078	48 8b cb	 mov	 rcx, rbx
  0007b	e8 00 00 00 00	 call	 Px_DecRef
$LN7@map_deallo:

; 1035 :     Py_XDECREF(lz->func);

  00080	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  00084	48 85 db	 test	 rbx, rbx
  00087	74 65		 je	 SHORT $LN3@map_deallo
  00089	e8 00 00 00 00	 call	 _Py_PXCTX
  0008e	85 c0		 test	 eax, eax
  00090	75 5c		 jne	 SHORT $LN3@map_deallo
  00092	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00096	a8 20		 test	 al, 32			; 00000020H
  00098	75 4c		 jne	 SHORT $LN26@map_deallo
  0009a	84 c0		 test	 al, al
  0009c	78 48		 js	 SHORT $LN26@map_deallo
  0009e	a8 02		 test	 al, 2
  000a0	75 4c		 jne	 SHORT $LN3@map_deallo
  000a2	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000a6	75 46		 jne	 SHORT $LN3@map_deallo
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000b6	4c 8b cb	 mov	 r9, rbx
  000b9	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000bf	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cc	48 8b cb	 mov	 rcx, rbx
  000cf	85 c0		 test	 eax, eax
  000d1	74 07		 je	 SHORT $LN31@map_deallo
  000d3	e8 00 00 00 00	 call	 _Px_Dealloc
  000d8	eb 14		 jmp	 SHORT $LN3@map_deallo
$LN31@map_deallo:
  000da	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000de	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000e4	eb 08		 jmp	 SHORT $LN3@map_deallo
$LN26@map_deallo:
  000e6	48 8b cb	 mov	 rcx, rbx
  000e9	e8 00 00 00 00	 call	 Px_DecRef
$LN3@map_deallo:

; 1036 :     Py_TYPE(lz)->tp_free(lz);

  000ee	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000f2	48 8b cf	 mov	 rcx, rdi

; 1037 : }

  000f5	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000fa	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000fe	5f		 pop	 rdi
  000ff	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
map_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@NBMHNIHE@map_traverse?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$map_traverse DD imagerel map_traverse
	DD	imagerel map_traverse+152
	DD	imagerel $unwind$map_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$map_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0N@NBMHNIHE@map_traverse?$AA@
CONST	SEGMENT
??_C@_0N@NBMHNIHE@map_traverse?$AA@ DB 'map_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT map_traverse
_TEXT	SEGMENT
lz$ = 48
visit$ = 56
arg$ = 64
map_traverse PROC					; COMDAT

; 1041 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 1042 :     Py_VISIT(lz->iters);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN9@map_traver
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LBFDNFDG@?4?4?2Python?2bltinmodule?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@NBMHNIHE@map_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 12 04 00
	00		 mov	 r8d, 1042		; 00000412H
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@map_traver:
  0003d	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN11@map_traver
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 39		 jne	 SHORT $LN13@map_traver
$LN11@map_traver:

; 1043 :     Py_VISIT(lz->func);

  0004f	e8 00 00 00 00	 call	 _Py_PXCTX
  00054	85 c0		 test	 eax, eax
  00056	74 1c		 je	 SHORT $LN3@map_traver
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LBFDNFDG@?4?4?2Python?2bltinmodule?4c?$AA@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@NBMHNIHE@map_traverse?$AA@
  00066	45 33 c9	 xor	 r9d, r9d
  00069	41 b8 13 04 00
	00		 mov	 r8d, 1043		; 00000413H
  0006f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@map_traver:
  00074	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00078	48 85 c9	 test	 rcx, rcx
  0007b	74 09		 je	 SHORT $LN5@map_traver
  0007d	48 8b d7	 mov	 rdx, rdi
  00080	ff d6		 call	 rsi
  00082	85 c0		 test	 eax, eax
  00084	75 02		 jne	 SHORT $LN13@map_traver
$LN5@map_traver:

; 1044 :     return 0;

  00086	33 c0		 xor	 eax, eax
$LN13@map_traver:

; 1045 : }

  00088	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00092	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00096	5f		 pop	 rdi
  00097	c3		 ret	 0
map_traverse ENDP
_TEXT	ENDS
EXTRN	PyObject_Call:PROC
EXTRN	PyIter_Next:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$map_next DD imagerel map_next
	DD	imagerel map_next+419
	DD	imagerel $unwind$map_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$map_next DD 0a4c01H
	DD	09744cH
	DD	086445H
	DD	0b5410H
	DD	0a3410H
	DD	0c00c5210H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\bltinmodule.c
xdata	ENDS
;	COMDAT map_next
_TEXT	SEGMENT
lz$ = 64
map_next PROC						; COMDAT

; 1049 : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  0000a	41 54		 push	 r12
  0000c	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00010	4c 8b e1	 mov	 r12, rcx

; 1050 :     PyObject *val;
; 1051 :     PyObject *argtuple;
; 1052 :     PyObject *result;
; 1053 :     Py_ssize_t numargs, i;
; 1054 : 
; 1055 :     numargs = PyTuple_Size(lz->iters);

  00013	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00017	e8 00 00 00 00	 call	 PyTuple_Size

; 1056 :     argtuple = PyTuple_New(numargs);

  0001c	48 8b c8	 mov	 rcx, rax
  0001f	48 8b e8	 mov	 rbp, rax
  00022	e8 00 00 00 00	 call	 PyTuple_New
  00027	48 8b d8	 mov	 rbx, rax

; 1057 :     if (argtuple == NULL)

  0002a	48 85 c0	 test	 rax, rax
  0002d	75 11		 jne	 SHORT $LN5@map_next

; 1071 : }

  0002f	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00034	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  00039	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0003d	41 5c		 pop	 r12
  0003f	c3		 ret	 0
$LN5@map_next:
  00040	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi

; 1058 :         return NULL;
; 1059 : 
; 1060 :     for (i=0 ; i<numargs ; i++) {

  00045	33 f6		 xor	 esi, esi
  00047	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  0004c	48 85 ed	 test	 rbp, rbp
  0004f	7e 36		 jle	 SHORT $LN2@map_next
  00051	bf 70 00 00 00	 mov	 edi, 112		; 00000070H
  00056	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL4@map_next:

; 1061 :         val = PyIter_Next(PyTuple_GET_ITEM(lz->iters, i));

  00060	49 8b 4c 24 60	 mov	 rcx, QWORD PTR [r12+96]
  00065	48 8b 0c 0f	 mov	 rcx, QWORD PTR [rdi+rcx]
  00069	e8 00 00 00 00	 call	 PyIter_Next

; 1062 :         if (val == NULL) {

  0006e	48 85 c0	 test	 rax, rax
  00071	0f 84 8d 00 00
	00		 je	 $LN31@map_next

; 1065 :         }
; 1066 :         PyTuple_SET_ITEM(argtuple, i, val);

  00077	48 ff c6	 inc	 rsi
  0007a	48 89 04 1f	 mov	 QWORD PTR [rdi+rbx], rax
  0007e	48 83 c7 08	 add	 rdi, 8
  00082	48 3b f5	 cmp	 rsi, rbp
  00085	7c d9		 jl	 SHORT $LL4@map_next
$LN2@map_next:

; 1067 :     }
; 1068 :     result = PyObject_Call(lz->func, argtuple, NULL);

  00087	49 8b 4c 24 68	 mov	 rcx, QWORD PTR [r12+104]
  0008c	45 33 c0	 xor	 r8d, r8d
  0008f	48 8b d3	 mov	 rdx, rbx
  00092	e8 00 00 00 00	 call	 PyObject_Call
  00097	48 8b f8	 mov	 rdi, rax

; 1069 :     Py_DECREF(argtuple);

  0009a	e8 00 00 00 00	 call	 _Py_PXCTX
  0009f	85 c0		 test	 eax, eax
  000a1	0f 85 de 00 00
	00		 jne	 $LN29@map_next
  000a7	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  000ab	f6 c1 20	 test	 cl, 32			; 00000020H
  000ae	0f 85 c9 00 00
	00		 jne	 $LN23@map_next
  000b4	84 c9		 test	 cl, cl
  000b6	0f 88 c1 00 00
	00		 js	 $LN23@map_next
  000bc	f6 c1 02	 test	 cl, 2
  000bf	0f 85 c0 00 00
	00		 jne	 $LN29@map_next
  000c5	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000c9	0f 85 b6 00 00
	00		 jne	 $LN29@map_next
  000cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000dd	4c 8b cb	 mov	 r9, rbx
  000e0	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000e6	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ee	e8 00 00 00 00	 call	 _PyParallel_Guard
  000f3	48 8b cb	 mov	 rcx, rbx
  000f6	85 c0		 test	 eax, eax
  000f8	74 77		 je	 SHORT $LN28@map_next
  000fa	e8 00 00 00 00	 call	 _Px_Dealloc
  000ff	e9 81 00 00 00	 jmp	 $LN29@map_next
$LN31@map_next:

; 1063 :             Py_DECREF(argtuple);

  00104	e8 00 00 00 00	 call	 _Py_PXCTX
  00109	85 c0		 test	 eax, eax
  0010b	75 60		 jne	 SHORT $LN18@map_next
  0010d	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00111	a8 20		 test	 al, 32			; 00000020H
  00113	75 50		 jne	 SHORT $LN12@map_next
  00115	84 c0		 test	 al, al
  00117	78 4c		 js	 SHORT $LN12@map_next
  00119	a8 02		 test	 al, 2
  0011b	75 50		 jne	 SHORT $LN18@map_next
  0011d	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00121	75 4a		 jne	 SHORT $LN18@map_next
  00123	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0012a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00131	4c 8b cb	 mov	 r9, rbx
  00134	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0013a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00142	e8 00 00 00 00	 call	 _PyParallel_Guard
  00147	48 8b cb	 mov	 rcx, rbx
  0014a	85 c0		 test	 eax, eax
  0014c	74 09		 je	 SHORT $LN17@map_next
  0014e	e8 00 00 00 00	 call	 _Px_Dealloc

; 1064 :             return NULL;

  00153	33 c0		 xor	 eax, eax
  00155	eb 31		 jmp	 SHORT $LN34@map_next

; 1063 :             Py_DECREF(argtuple);

$LN17@map_next:
  00157	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0015b	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 1064 :             return NULL;

  00161	33 c0		 xor	 eax, eax
  00163	eb 23		 jmp	 SHORT $LN34@map_next

; 1063 :             Py_DECREF(argtuple);

$LN12@map_next:
  00165	48 8b cb	 mov	 rcx, rbx
  00168	e8 00 00 00 00	 call	 Px_DecRef
$LN18@map_next:

; 1064 :             return NULL;

  0016d	33 c0		 xor	 eax, eax
  0016f	eb 17		 jmp	 SHORT $LN34@map_next

; 1069 :     Py_DECREF(argtuple);

$LN28@map_next:
  00171	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00175	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0017b	eb 08		 jmp	 SHORT $LN29@map_next
$LN23@map_next:
  0017d	48 8b cb	 mov	 rcx, rbx
  00180	e8 00 00 00 00	 call	 Px_DecRef
$LN29@map_next:

; 1070 :     return result;

  00185	48 8b c7	 mov	 rax, rdi
$LN34@map_next:
  00188	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0018d	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]

; 1071 : }

  00192	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00197	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  0019c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001a0	41 5c		 pop	 r12
  001a2	c3		 ret	 0
map_next ENDP
_TEXT	ENDS
PUBLIC	??_C@_02BFICIOJL@ON?$AA@			; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$map_reduce DD imagerel map_reduce
	DD	imagerel map_reduce+144
	DD	imagerel $unwind$map_reduce
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$map_reduce DD imagerel map_reduce+144
	DD	imagerel map_reduce+247
	DD	imagerel $chain$1$map_reduce
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$map_reduce DD imagerel map_reduce+247
	DD	imagerel map_reduce+288
	DD	imagerel $chain$2$map_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$map_reduce DD 021H
	DD	imagerel map_reduce
	DD	imagerel map_reduce+144
	DD	imagerel $unwind$map_reduce
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$map_reduce DD 020521H
	DD	097405H
	DD	imagerel map_reduce
	DD	imagerel map_reduce+144
	DD	imagerel $unwind$map_reduce
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$map_reduce DD 084201H
	DD	083442H
	DD	0b6410H
	DD	0a5410H
	DD	0c00c5210H
xdata	ENDS
;	COMDAT ??_C@_02BFICIOJL@ON?$AA@
CONST	SEGMENT
??_C@_02BFICIOJL@ON?$AA@ DB 'ON', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\bltinmodule.c
CONST	ENDS
;	COMDAT map_reduce
_TEXT	SEGMENT
lz$ = 64
map_reduce PROC						; COMDAT

; 1075 : {

  00000	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  00005	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000a	41 54		 push	 r12
  0000c	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1076 :     Py_ssize_t numargs = PyTuple_GET_SIZE(lz->iters);

  00010	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  00014	4c 8b e1	 mov	 r12, rcx
  00017	48 8b 70 60	 mov	 rsi, QWORD PTR [rax+96]

; 1077 :     PyObject *args = PyTuple_New(numargs+1);

  0001b	48 8d 4e 01	 lea	 rcx, QWORD PTR [rsi+1]
  0001f	e8 00 00 00 00	 call	 PyTuple_New
  00024	48 8b e8	 mov	 rbp, rax

; 1078 :     Py_ssize_t i;
; 1079 :     if (args == NULL)

  00027	48 85 c0	 test	 rax, rax
  0002a	75 11		 jne	 SHORT $LN4@map_reduce

; 1090 : }

  0002c	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  00031	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  00036	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0003a	41 5c		 pop	 r12
  0003c	c3		 ret	 0
$LN4@map_reduce:
  0003d	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx

; 1080 :         return NULL;
; 1081 :     Py_INCREF(lz->func);

  00042	49 8b 5c 24 68	 mov	 rbx, QWORD PTR [r12+104]
  00047	e8 00 00 00 00	 call	 _Py_PXCTX
  0004c	85 c0		 test	 eax, eax
  0004e	75 32		 jne	 SHORT $LN8@map_reduce
  00050	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00057	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0005e	4c 8b cb	 mov	 r9, rbx
  00061	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00067	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0006f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00074	85 c0		 test	 eax, eax
  00076	75 06		 jne	 SHORT $LN7@map_reduce
  00078	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0007c	74 04		 je	 SHORT $LN8@map_reduce
$LN7@map_reduce:
  0007e	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN8@map_reduce:

; 1082 :     PyTuple_SET_ITEM(args, 0, lz->func);

  00082	49 8b 44 24 68	 mov	 rax, QWORD PTR [r12+104]
  00087	48 89 45 70	 mov	 QWORD PTR [rbp+112], rax

; 1083 :     for (i = 0; i<numargs; i++){

  0008b	48 85 f6	 test	 rsi, rsi
  0008e	7e 67		 jle	 SHORT $LN1@map_reduce

; 1082 :     PyTuple_SET_ITEM(args, 0, lz->func);

  00090	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  00095	bf 70 00 00 00	 mov	 edi, 112		; 00000070H
  0009a	66 0f 1f 44 00
	00		 npad	 6
$LL3@map_reduce:

; 1084 :         PyObject *it = PyTuple_GET_ITEM(lz->iters, i);

  000a0	49 8b 44 24 60	 mov	 rax, QWORD PTR [r12+96]
  000a5	48 8b 1c 07	 mov	 rbx, QWORD PTR [rdi+rax]

; 1085 :         Py_INCREF(it);

  000a9	e8 00 00 00 00	 call	 _Py_PXCTX
  000ae	85 c0		 test	 eax, eax
  000b0	75 32		 jne	 SHORT $LN12@map_reduce
  000b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000c0	4c 8b cb	 mov	 r9, rbx
  000c3	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000c9	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000d1	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d6	85 c0		 test	 eax, eax
  000d8	75 06		 jne	 SHORT $LN11@map_reduce
  000da	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000de	74 04		 je	 SHORT $LN12@map_reduce
$LN11@map_reduce:
  000e0	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN12@map_reduce:

; 1086 :         PyTuple_SET_ITEM(args, i+1, it);

  000e4	48 89 5c 2f 08	 mov	 QWORD PTR [rdi+rbp+8], rbx
  000e9	48 83 c7 08	 add	 rdi, 8
  000ed	48 ff ce	 dec	 rsi
  000f0	75 ae		 jne	 SHORT $LL3@map_reduce
  000f2	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
$LN1@map_reduce:

; 1087 :     }
; 1088 : 
; 1089 :     return Py_BuildValue("ON", Py_TYPE(lz), args);

  000f7	49 8b 54 24 58	 mov	 rdx, QWORD PTR [r12+88]
  000fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02BFICIOJL@ON?$AA@
  00103	4c 8b c5	 mov	 r8, rbp
  00106	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 1090 : }

  0010b	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  00110	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  00115	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00119	41 5c		 pop	 r12
  0011b	e9 00 00 00 00	 jmp	 Py_BuildValue
map_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@FGPKDLLN@?8?$CF?4200s?8?5object?5is?5not?5an?5iterat@ ; `string'
EXTRN	PyErr_SetNone:PROC
EXTRN	_PyObject_NextNotImplemented:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_next DD imagerel builtin_next
	DD	imagerel builtin_next+226
	DD	imagerel $unwind$builtin_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_next DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0CD@FGPKDLLN@?8?$CF?4200s?8?5object?5is?5not?5an?5iterat@
CONST	SEGMENT
??_C@_0CD@FGPKDLLN@?8?$CF?4200s?8?5object?5is?5not?5an?5iterat@ DB '''%.2'
	DB	'00s'' object is not an iterator', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT builtin_next
_TEXT	SEGMENT
self$ = 64
args$ = 72
def$ = 80
it$ = 88
builtin_next PROC					; COMDAT

; 1150 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx

; 1151 :     PyObject *it, *res;
; 1152 :     PyObject *def = NULL;
; 1153 : 
; 1154 :     if (!PyArg_UnpackTuple(args, "next", 1, 2, &it, &def))

  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR def$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR it$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04CJGEDOF@next?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	45 8d 41 ff	 lea	 r8d, QWORD PTR [r9-1]
  0002c	48 8b c8	 mov	 rcx, rax
  0002f	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR def$[rsp], 0
  00038	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003d	85 c0		 test	 eax, eax

; 1155 :         return NULL;

  0003f	0f 84 96 00 00
	00		 je	 $LN14@builtin_ne

; 1156 :     if (!PyIter_Check(it)) {

  00045	48 8b 4c 24 58	 mov	 rcx, QWORD PTR it$[rsp]
  0004a	4c 8b 41 58	 mov	 r8, QWORD PTR [rcx+88]
  0004e	49 8b 80 38 01
	00 00		 mov	 rax, QWORD PTR [r8+312]
  00055	48 85 c0	 test	 rax, rax
  00058	74 6a		 je	 SHORT $LN9@builtin_ne
  0005a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_PyObject_NextNotImplemented
  00061	48 3b c2	 cmp	 rax, rdx
  00064	74 5e		 je	 SHORT $LN9@builtin_ne

; 1161 :     }
; 1162 : 
; 1163 :     res = (*it->ob_type->tp_iternext)(it);

  00066	ff d0		 call	 rax

; 1164 :     if (res != NULL) {

  00068	48 85 c0	 test	 rax, rax

; 1165 :         return res;

  0006b	75 70		 jne	 SHORT $LN1@builtin_ne

; 1166 :     } else if (def != NULL) {

  0006d	48 39 44 24 50	 cmp	 QWORD PTR def$[rsp], rax
  00072	74 33		 je	 SHORT $LN6@builtin_ne

; 1167 :         if (PyErr_Occurred()) {

  00074	e8 00 00 00 00	 call	 PyErr_Occurred
  00079	48 85 c0	 test	 rax, rax
  0007c	74 15		 je	 SHORT $LN5@builtin_ne

; 1168 :             if(!PyErr_ExceptionMatches(PyExc_StopIteration))

  0007e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_StopIteration
  00085	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  0008a	85 c0		 test	 eax, eax

; 1169 :                 return NULL;

  0008c	74 4d		 je	 SHORT $LN14@builtin_ne

; 1170 :             PyErr_Clear();

  0008e	e8 00 00 00 00	 call	 PyErr_Clear
$LN5@builtin_ne:

; 1171 :         }
; 1172 :         Py_INCREF(def);

  00093	48 8b 4c 24 50	 mov	 rcx, QWORD PTR def$[rsp]
  00098	e8 00 00 00 00	 call	 _Py_IncRef

; 1173 :         return def;

  0009d	48 8b 44 24 50	 mov	 rax, QWORD PTR def$[rsp]

; 1178 :         return NULL;
; 1179 :     }
; 1180 : }

  000a2	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a6	c3		 ret	 0
$LN6@builtin_ne:

; 1174 :     } else if (PyErr_Occurred()) {

  000a7	e8 00 00 00 00	 call	 PyErr_Occurred
  000ac	48 85 c0	 test	 rax, rax

; 1175 :         return NULL;

  000af	75 2a		 jne	 SHORT $LN14@builtin_ne

; 1176 :     } else {
; 1177 :         PyErr_SetNone(PyExc_StopIteration);

  000b1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_StopIteration
  000b8	e8 00 00 00 00	 call	 PyErr_SetNone
  000bd	33 c0		 xor	 eax, eax

; 1178 :         return NULL;
; 1179 :     }
; 1180 : }

  000bf	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c3	c3		 ret	 0
$LN9@builtin_ne:

; 1157 :         PyErr_Format(PyExc_TypeError,
; 1158 :             "'%.200s' object is not an iterator",
; 1159 :             it->ob_type->tp_name);

  000c4	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  000c8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@FGPKDLLN@?8?$CF?4200s?8?5object?5is?5not?5an?5iterat@
  000d6	e8 00 00 00 00	 call	 PyErr_Format
$LN14@builtin_ne:

; 1160 :         return NULL;

  000db	33 c0		 xor	 eax, eax
$LN1@builtin_ne:

; 1178 :         return NULL;
; 1179 :     }
; 1180 : }

  000dd	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000e1	c3		 ret	 0
builtin_next ENDP
_TEXT	ENDS
EXTRN	PyObject_SetAttr:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$builtin_setattr DD imagerel builtin_setattr
	DD	imagerel builtin_setattr+177
	DD	imagerel $unwind$builtin_setattr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_setattr DD 010401H
	DD	0a204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\bltinmodule.c
xdata	ENDS
;	COMDAT builtin_setattr
_TEXT	SEGMENT
v$ = 64
self$ = 96
args$ = 104
value$ = 112
name$ = 120
builtin_setattr PROC					; COMDAT

; 1191 : {

  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  00004	48 8b c2	 mov	 rax, rdx

; 1192 :     PyObject *v;
; 1193 :     PyObject *name;
; 1194 :     PyObject *value;
; 1195 : 
; 1196 :     if (!PyArg_UnpackTuple(args, "setattr", 3, 3, &v, &name, &value))

  00007	48 8d 4c 24 70	 lea	 rcx, QWORD PTR value$[rsp]
  0000c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00012	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00017	48 8d 4c 24 78	 lea	 rcx, QWORD PTR name$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07PPMBCILO@setattr?$AA@
  00023	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00028	48 8d 4c 24 40	 lea	 rcx, QWORD PTR v$[rsp]
  0002d	45 8b c1	 mov	 r8d, r9d
  00030	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00035	48 8b c8	 mov	 rcx, rax
  00038	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003d	85 c0		 test	 eax, eax
  0003f	75 07		 jne	 SHORT $LN2@builtin_se
$LN9@builtin_se:

; 1197 :         return NULL;

  00041	33 c0		 xor	 eax, eax

; 1202 : }

  00043	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00047	c3		 ret	 0
$LN2@builtin_se:

; 1198 :     if (PyObject_SetAttr(v, name, value) != 0)

  00048	4c 8b 44 24 70	 mov	 r8, QWORD PTR value$[rsp]
  0004d	48 8b 54 24 78	 mov	 rdx, QWORD PTR name$[rsp]
  00052	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  00057	e8 00 00 00 00	 call	 PyObject_SetAttr
  0005c	85 c0		 test	 eax, eax

; 1199 :         return NULL;

  0005e	75 e1		 jne	 SHORT $LN9@builtin_se

; 1200 :     Py_INCREF(Py_None);

  00060	e8 00 00 00 00	 call	 _Py_PXCTX
  00065	85 c0		 test	 eax, eax
  00067	75 3c		 jne	 SHORT $LN6@builtin_se
  00069	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00070	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00077	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0007e	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00084	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0008c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00091	85 c0		 test	 eax, eax
  00093	75 09		 jne	 SHORT $LN5@builtin_se
  00095	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0009c	74 07		 je	 SHORT $LN6@builtin_se
$LN5@builtin_se:
  0009e	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN6@builtin_se:

; 1201 :     return Py_None;

  000a5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1202 : }

  000ac	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000b0	c3		 ret	 0
builtin_setattr ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$builtin_delattr DD imagerel builtin_delattr
	DD	imagerel builtin_delattr+165
	DD	imagerel $unwind$builtin_delattr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_delattr DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\bltinmodule.c
xdata	ENDS
;	COMDAT builtin_delattr
_TEXT	SEGMENT
self$ = 64
args$ = 72
name$ = 80
v$ = 88
builtin_delattr PROC					; COMDAT

; 1213 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx

; 1214 :     PyObject *v;
; 1215 :     PyObject *name;
; 1216 : 
; 1217 :     if (!PyArg_UnpackTuple(args, "delattr", 2, 2, &v, &name))

  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR name$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR v$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07GGDKJAHK@delattr?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN2@builtin_de
$LN9@builtin_de:

; 1218 :         return NULL;

  00037	33 c0		 xor	 eax, eax

; 1223 : }

  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN2@builtin_de:

; 1219 :     if (PyObject_SetAttr(v, name, (PyObject *)NULL) != 0)

  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR name$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR v$[rsp]
  00048	45 33 c0	 xor	 r8d, r8d
  0004b	e8 00 00 00 00	 call	 PyObject_SetAttr
  00050	85 c0		 test	 eax, eax

; 1220 :         return NULL;

  00052	75 e3		 jne	 SHORT $LN9@builtin_de

; 1221 :     Py_INCREF(Py_None);

  00054	e8 00 00 00 00	 call	 _Py_PXCTX
  00059	85 c0		 test	 eax, eax
  0005b	75 3c		 jne	 SHORT $LN6@builtin_de
  0005d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00064	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0006b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00072	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00078	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00080	e8 00 00 00 00	 call	 _PyParallel_Guard
  00085	85 c0		 test	 eax, eax
  00087	75 09		 jne	 SHORT $LN5@builtin_de
  00089	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00090	74 07		 je	 SHORT $LN6@builtin_de
$LN5@builtin_de:
  00092	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN6@builtin_de:

; 1222 :     return Py_None;

  00099	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1223 : }

  000a0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a4	c3		 ret	 0
builtin_delattr ENDP
_TEXT	ENDS
EXTRN	PyLong_FromSsize_t:PROC
EXTRN	PyObject_Hash:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_hash DD imagerel builtin_hash
	DD	imagerel builtin_hash+37
	DD	imagerel $unwind$builtin_hash
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_hash DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT builtin_hash
_TEXT	SEGMENT
self$ = 48
v$ = 56
builtin_hash PROC					; COMDAT

; 1234 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1235 :     Py_hash_t x;
; 1236 : 
; 1237 :     x = PyObject_Hash(v);

  00004	48 8b ca	 mov	 rcx, rdx
  00007	e8 00 00 00 00	 call	 PyObject_Hash

; 1238 :     if (x == -1)

  0000c	48 83 f8 ff	 cmp	 rax, -1
  00010	75 07		 jne	 SHORT $LN1@builtin_ha@2

; 1239 :         return NULL;

  00012	33 c0		 xor	 eax, eax

; 1241 : }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	c3		 ret	 0
$LN1@builtin_ha@2:

; 1240 :     return PyLong_FromSsize_t(x);

  00019	48 8b c8	 mov	 rcx, rax

; 1241 : }

  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	e9 00 00 00 00	 jmp	 PyLong_FromSsize_t
builtin_hash ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT builtin_hex
_TEXT	SEGMENT
self$ = 8
v$ = 16
builtin_hex PROC					; COMDAT

; 1253 :     return PyNumber_ToBase(v, 16);

  00000	48 8b ca	 mov	 rcx, rdx
  00003	ba 10 00 00 00	 mov	 edx, 16

; 1254 : }

  00008	e9 00 00 00 00	 jmp	 PyNumber_ToBase
builtin_hex ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@IHPOABDH@iter?$CIv?0?5w?$CJ?3?5v?5must?5be?5callable?$AA@ ; `string'
EXTRN	PyCallIter_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_iter DD imagerel builtin_iter
	DD	imagerel builtin_iter+143
	DD	imagerel $unwind$builtin_iter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_iter DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0BP@IHPOABDH@iter?$CIv?0?5w?$CJ?3?5v?5must?5be?5callable?$AA@
CONST	SEGMENT
??_C@_0BP@IHPOABDH@iter?$CIv?0?5w?$CJ?3?5v?5must?5be?5callable?$AA@ DB 'i'
	DB	'ter(v, w): v must be callable', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT builtin_iter
_TEXT	SEGMENT
self$ = 64
args$ = 72
w$ = 80
v$ = 88
builtin_iter PROC					; COMDAT

; 1264 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx

; 1265 :     PyObject *v, *w = NULL;
; 1266 : 
; 1267 :     if (!PyArg_UnpackTuple(args, "iter", 1, 2, &v, &w))

  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR w$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR v$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04BKLHDIKK@iter?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	45 8d 41 ff	 lea	 r8d, QWORD PTR [r9-1]
  0002c	48 8b c8	 mov	 rcx, rax
  0002f	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR w$[rsp], 0
  00038	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003d	85 c0		 test	 eax, eax

; 1268 :         return NULL;

  0003f	74 33		 je	 SHORT $LN6@builtin_it

; 1269 :     if (w == NULL)

  00041	48 83 7c 24 50
	00		 cmp	 QWORD PTR w$[rsp], 0

; 1270 :         return PyObject_GetIter(v);

  00047	48 8b 4c 24 58	 mov	 rcx, QWORD PTR v$[rsp]
  0004c	75 0a		 jne	 SHORT $LN2@builtin_it
  0004e	e8 00 00 00 00	 call	 PyObject_GetIter

; 1277 : }

  00053	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00057	c3		 ret	 0
$LN2@builtin_it:

; 1271 :     if (!PyCallable_Check(v)) {

  00058	e8 00 00 00 00	 call	 PyCallable_Check
  0005d	85 c0		 test	 eax, eax
  0005f	75 1a		 jne	 SHORT $LN1@builtin_it

; 1272 :         PyErr_SetString(PyExc_TypeError,
; 1273 :                         "iter(v, w): v must be callable");

  00061	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00068	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@IHPOABDH@iter?$CIv?0?5w?$CJ?3?5v?5must?5be?5callable?$AA@
  0006f	e8 00 00 00 00	 call	 PyErr_SetString
$LN6@builtin_it:

; 1274 :         return NULL;

  00074	33 c0		 xor	 eax, eax

; 1277 : }

  00076	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007a	c3		 ret	 0
$LN1@builtin_it:

; 1275 :     }
; 1276 :     return PyCallIter_New(v, w);

  0007b	48 8b 54 24 50	 mov	 rdx, QWORD PTR w$[rsp]
  00080	48 8b 4c 24 58	 mov	 rcx, QWORD PTR v$[rsp]
  00085	e8 00 00 00 00	 call	 PyCallIter_New

; 1277 : }

  0008a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008e	c3		 ret	 0
builtin_iter ENDP
_TEXT	ENDS
EXTRN	PyObject_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_len DD imagerel builtin_len
	DD	imagerel builtin_len+53
	DD	imagerel $unwind$builtin_len
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_len DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT builtin_len
_TEXT	SEGMENT
self$ = 48
v$ = 56
builtin_len PROC					; COMDAT

; 1290 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1291 :     Py_ssize_t res;
; 1292 : 
; 1293 :     res = PyObject_Size(v);

  00006	48 8b ca	 mov	 rcx, rdx
  00009	e8 00 00 00 00	 call	 PyObject_Size
  0000e	48 8b d8	 mov	 rbx, rax

; 1294 :     if (res < 0 && PyErr_Occurred())

  00011	48 85 c0	 test	 rax, rax
  00014	79 12		 jns	 SHORT $LN1@builtin_le
  00016	e8 00 00 00 00	 call	 PyErr_Occurred
  0001b	48 85 c0	 test	 rax, rax
  0001e	74 08		 je	 SHORT $LN1@builtin_le

; 1295 :         return NULL;

  00020	33 c0		 xor	 eax, eax

; 1297 : }

  00022	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00026	5b		 pop	 rbx
  00027	c3		 ret	 0
$LN1@builtin_le:

; 1296 :     return PyLong_FromSsize_t(res);

  00028	48 8b cb	 mov	 rcx, rbx

; 1297 : }

  0002b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002f	5b		 pop	 rbx
  00030	e9 00 00 00 00	 jmp	 PyLong_FromSsize_t
builtin_len ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$builtin_locals DD imagerel builtin_locals
	DD	imagerel builtin_locals+87
	DD	imagerel $unwind$builtin_locals
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_locals DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\bltinmodule.c
xdata	ENDS
;	COMDAT builtin_locals
_TEXT	SEGMENT
self$ = 64
builtin_locals PROC					; COMDAT

; 1307 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1308 :     PyObject *d;
; 1309 : 
; 1310 :     d = PyEval_GetLocals();

  00006	e8 00 00 00 00	 call	 PyEval_GetLocals
  0000b	48 8b d8	 mov	 rbx, rax

; 1311 :     Py_XINCREF(d);

  0000e	48 85 c0	 test	 rax, rax
  00011	74 3e		 je	 SHORT $LN3@builtin_lo
  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	75 32		 jne	 SHORT $LN11@builtin_lo
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0002a	4c 8b cb	 mov	 r9, rbx
  0002d	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00033	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0003b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00040	85 c0		 test	 eax, eax
  00042	75 06		 jne	 SHORT $LN7@builtin_lo
  00044	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00048	74 04		 je	 SHORT $LN11@builtin_lo
$LN7@builtin_lo:
  0004a	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN11@builtin_lo:

; 1312 :     return d;

  0004e	48 8b c3	 mov	 rax, rbx
$LN3@builtin_lo:

; 1313 : }

  00051	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00055	5b		 pop	 rbx
  00056	c3		 ret	 0
builtin_locals ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@OKNAJOGM@?$CFs?$CI?$CJ?5arg?5is?5an?5empty?5sequence?$AA@ ; `string'
PUBLIC	??_C@_0CI@LHKNCFIK@?$CFs?$CI?$CJ?5got?5an?5unexpected?5keyword?5a@ ; `string'
EXTRN	PyObject_RichCompareBool:PROC
EXTRN	PyDict_Size:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$min_max DD imagerel min_max
	DD	imagerel min_max+193
	DD	imagerel $unwind$min_max
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$min_max DD imagerel min_max+193
	DD	imagerel min_max+231
	DD	imagerel $chain$0$min_max
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$min_max DD imagerel min_max+231
	DD	imagerel min_max+273
	DD	imagerel $chain$1$min_max
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$min_max DD imagerel min_max+273
	DD	imagerel min_max+276
	DD	imagerel $chain$2$min_max
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$min_max DD imagerel min_max+276
	DD	imagerel min_max+637
	DD	imagerel $chain$3$min_max
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$min_max DD imagerel min_max+637
	DD	imagerel min_max+660
	DD	imagerel $chain$4$min_max
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$min_max DD 021H
	DD	imagerel min_max+273
	DD	imagerel min_max+276
	DD	imagerel $chain$2$min_max
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$min_max DD 020521H
	DD	0c5405H
	DD	imagerel min_max+273
	DD	imagerel min_max+276
	DD	imagerel $chain$2$min_max
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$min_max DD 020021H
	DD	0dd400H
	DD	imagerel min_max
	DD	imagerel min_max+193
	DD	imagerel $unwind$min_max
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$min_max DD 021H
	DD	imagerel min_max
	DD	imagerel min_max+193
	DD	imagerel $unwind$min_max
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$min_max DD 020521H
	DD	0dd405H
	DD	imagerel min_max
	DD	imagerel min_max+193
	DD	imagerel $unwind$min_max
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$min_max DD 081101H
	DD	0e3411H
	DD	0f00d5211H
	DD	0c009e00bH
	DD	060067007H
xdata	ENDS
;	COMDAT ??_C@_0BO@OKNAJOGM@?$CFs?$CI?$CJ?5arg?5is?5an?5empty?5sequence?$AA@
CONST	SEGMENT
??_C@_0BO@OKNAJOGM@?$CFs?$CI?$CJ?5arg?5is?5an?5empty?5sequence?$AA@ DB '%'
	DB	's() arg is an empty sequence', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@LHKNCFIK@?$CFs?$CI?$CJ?5got?5an?5unexpected?5keyword?5a@
CONST	SEGMENT
??_C@_0CI@LHKNCFIK@?$CFs?$CI?$CJ?5got?5an?5unexpected?5keyword?5a@ DB '%s'
	DB	'() got an unexpected keyword argument', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\bltinmodule.c
CONST	ENDS
;	COMDAT min_max
_TEXT	SEGMENT
args$ = 96
kwds$ = 104
op$ = 112
v$ = 120
min_max	PROC						; COMDAT

; 1323 : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	41 54		 push	 r12
  00009	41 56		 push	 r14
  0000b	41 57		 push	 r15
  0000d	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1324 :     PyObject *v, *it, *item, *val, *maxitem, *maxval, *keyfunc=NULL;
; 1325 :     const char *name = op == Py_LT ? "min" : "max";

  00011	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_03KLIPLJLL@min?$AA@
  00018	45 33 e4	 xor	 r12d, r12d
  0001b	45 85 c0	 test	 r8d, r8d
  0001e	4c 8d 35 00 00
	00 00		 lea	 r14, OFFSET FLAT:??_C@_03LJAEFNNE@max?$AA@
  00025	45 8b f8	 mov	 r15d, r8d
  00028	48 8b da	 mov	 rbx, rdx
  0002b	48 8b f9	 mov	 rdi, rcx
  0002e	41 8b f4	 mov	 esi, r12d
  00031	4c 0f 44 f0	 cmove	 r14, rax

; 1326 : 
; 1327 :     if (PyTuple_Size(args) > 1)

  00035	e8 00 00 00 00	 call	 PyTuple_Size
  0003a	48 83 f8 01	 cmp	 rax, 1
  0003e	7e 07		 jle	 SHORT $LN41@min_max

; 1328 :         v = args;

  00040	48 89 7c 24 78	 mov	 QWORD PTR v$[rsp], rdi
  00045	eb 26		 jmp	 SHORT $LN51@min_max
$LN41@min_max:

; 1329 :     else if (!PyArg_UnpackTuple(args, (char *)name, 1, 1, &v))

  00047	48 8d 44 24 78	 lea	 rax, QWORD PTR v$[rsp]
  0004c	41 b9 01 00 00
	00		 mov	 r9d, 1
  00052	49 8b d6	 mov	 rdx, r14
  00055	45 8b c1	 mov	 r8d, r9d
  00058	48 8b cf	 mov	 rcx, rdi
  0005b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00060	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00065	85 c0		 test	 eax, eax

; 1330 :         return NULL;

  00067	0f 84 90 00 00
	00		 je	 $LN55@min_max
$LN51@min_max:

; 1331 : 
; 1332 :     if (kwds != NULL && PyDict_Check(kwds) && PyDict_Size(kwds)) {

  0006d	48 85 db	 test	 rbx, rbx
  00070	74 4a		 je	 SHORT $LN52@min_max
  00072	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00076	f7 80 00 01 00
	00 00 00 00 20	 test	 DWORD PTR [rax+256], 536870912 ; 20000000H
  00080	74 3a		 je	 SHORT $LN52@min_max
  00082	48 8b cb	 mov	 rcx, rbx
  00085	e8 00 00 00 00	 call	 PyDict_Size
  0008a	48 85 c0	 test	 rax, rax
  0008d	74 2d		 je	 SHORT $LN52@min_max

; 1333 :         keyfunc = PyDict_GetItemString(kwds, "key");

  0008f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03ICHNJLJF@key?$AA@
  00096	48 8b cb	 mov	 rcx, rbx
  00099	e8 00 00 00 00	 call	 PyDict_GetItemString

; 1334 :         if (PyDict_Size(kwds)!=1  ||  keyfunc == NULL) {

  0009e	48 8b cb	 mov	 rcx, rbx
  000a1	48 8b f0	 mov	 rsi, rax
  000a4	e8 00 00 00 00	 call	 PyDict_Size
  000a9	48 83 f8 01	 cmp	 rax, 1
  000ad	75 38		 jne	 SHORT $LN36@min_max
  000af	48 85 f6	 test	 rsi, rsi
  000b2	74 33		 je	 SHORT $LN36@min_max

; 1338 :         }
; 1339 :         Py_INCREF(keyfunc);

  000b4	48 8b ce	 mov	 rcx, rsi
  000b7	e8 00 00 00 00	 call	 _Py_IncRef
$LN52@min_max:

; 1340 :     }
; 1341 : 
; 1342 :     it = PyObject_GetIter(v);

  000bc	48 8b 4c 24 78	 mov	 rcx, QWORD PTR v$[rsp]
  000c1	4c 89 6c 24 68	 mov	 QWORD PTR [rsp+104], r13
  000c6	e8 00 00 00 00	 call	 PyObject_GetIter
  000cb	4c 8b e8	 mov	 r13, rax

; 1343 :     if (it == NULL) {

  000ce	48 85 c0	 test	 rax, rax
  000d1	75 3e		 jne	 SHORT $LN35@min_max

; 1344 :         Py_XDECREF(keyfunc);

  000d3	48 85 f6	 test	 rsi, rsi
  000d6	74 08		 je	 SHORT $LN33@min_max
  000d8	48 8b ce	 mov	 rcx, rsi
  000db	e8 00 00 00 00	 call	 _Py_DecRef
$LN33@min_max:

; 1345 :         return NULL;

  000e0	33 c0		 xor	 eax, eax
  000e2	e9 96 01 00 00	 jmp	 $LN53@min_max
$LN36@min_max:

; 1335 :             PyErr_Format(PyExc_TypeError,
; 1336 :                 "%s() got an unexpected keyword argument", name);

  000e7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@LHKNCFIK@?$CFs?$CI?$CJ?5got?5an?5unexpected?5keyword?5a@
  000f5	4d 8b c6	 mov	 r8, r14
  000f8	e8 00 00 00 00	 call	 PyErr_Format
$LN55@min_max:

; 1337 :             return NULL;

  000fd	33 c0		 xor	 eax, eax

; 1408 : }

  000ff	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  00104	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00108	41 5f		 pop	 r15
  0010a	41 5e		 pop	 r14
  0010c	41 5c		 pop	 r12
  0010e	5f		 pop	 rdi
  0010f	5e		 pop	 rsi
  00110	c3		 ret	 0
$LN35@min_max:

; 1346 :     }
; 1347 : 
; 1348 :     maxitem = NULL; /* the result */
; 1349 :     maxval = NULL;  /* the value associated with the result */
; 1350 :     while (( item = PyIter_Next(it) )) {

  00111	48 8b c8	 mov	 rcx, rax
  00114	48 89 6c 24 60	 mov	 QWORD PTR [rsp+96], rbp
  00119	49 8b ec	 mov	 rbp, r12
  0011c	e8 00 00 00 00	 call	 PyIter_Next
  00121	48 8b d8	 mov	 rbx, rax
  00124	48 85 c0	 test	 rax, rax
  00127	0f 84 bf 00 00
	00		 je	 $LN29@min_max
  0012d	0f 1f 00	 npad	 3
$LL30@min_max:

; 1351 :         /* get the value from the key function */
; 1352 :         if (keyfunc != NULL) {

  00130	48 85 f6	 test	 rsi, rsi
  00133	74 1c		 je	 SHORT $LN28@min_max

; 1353 :             val = PyObject_CallFunctionObjArgs(keyfunc, item, NULL);

  00135	45 33 c0	 xor	 r8d, r8d
  00138	48 8b d3	 mov	 rdx, rbx
  0013b	48 8b ce	 mov	 rcx, rsi
  0013e	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  00143	48 8b f8	 mov	 rdi, rax

; 1354 :             if (val == NULL)

  00146	48 85 c0	 test	 rax, rax
  00149	0f 84 e2 00 00
	00		 je	 $Fail_it_item$22399

; 1355 :                 goto Fail_it_item;
; 1356 :         }
; 1357 :         /* no key function; the value is the item */
; 1358 :         else {

  0014f	eb 3e		 jmp	 SHORT $LN45@min_max
$LN28@min_max:

; 1359 :             val = item;

  00151	48 8b fb	 mov	 rdi, rbx

; 1360 :             Py_INCREF(val);

  00154	e8 00 00 00 00	 call	 _Py_PXCTX
  00159	85 c0		 test	 eax, eax
  0015b	75 32		 jne	 SHORT $LN45@min_max
  0015d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00164	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0016b	4c 8b cb	 mov	 r9, rbx
  0016e	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00174	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0017c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00181	85 c0		 test	 eax, eax
  00183	75 06		 jne	 SHORT $LN44@min_max
  00185	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00189	74 04		 je	 SHORT $LN45@min_max
$LN44@min_max:
  0018b	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN45@min_max:

; 1361 :         }
; 1362 : 
; 1363 :         /* maximum value and item are unset; set them */
; 1364 :         if (maxval == NULL) {

  0018f	48 85 ed	 test	 rbp, rbp
  00192	75 08		 jne	 SHORT $LN25@min_max

; 1365 :             maxitem = item;

  00194	4c 8b e3	 mov	 r12, rbx

; 1366 :             maxval = val;

  00197	48 8b ef	 mov	 rbp, rdi

; 1367 :         }
; 1368 :         /* maximum value and item are set; update them as necessary */
; 1369 :         else {

  0019a	eb 3c		 jmp	 SHORT $LN20@min_max
$LN25@min_max:

; 1370 :             int cmp = PyObject_RichCompareBool(val, maxval, op);

  0019c	45 8b c7	 mov	 r8d, r15d
  0019f	48 8b d5	 mov	 rdx, rbp
  001a2	48 8b cf	 mov	 rcx, rdi
  001a5	e8 00 00 00 00	 call	 PyObject_RichCompareBool

; 1371 :             if (cmp < 0)

  001aa	85 c0		 test	 eax, eax
  001ac	78 7b		 js	 SHORT $Fail_it_item_and_val$22407

; 1372 :                 goto Fail_it_item_and_val;
; 1373 :             else if (cmp > 0) {

  001ae	7e 18		 jle	 SHORT $LN21@min_max

; 1374 :                 Py_DECREF(maxval);

  001b0	48 8b cd	 mov	 rcx, rbp
  001b3	e8 00 00 00 00	 call	 _Py_DecRef

; 1375 :                 Py_DECREF(maxitem);

  001b8	49 8b cc	 mov	 rcx, r12
  001bb	e8 00 00 00 00	 call	 _Py_DecRef

; 1376 :                 maxval = val;

  001c0	48 8b ef	 mov	 rbp, rdi

; 1377 :                 maxitem = item;

  001c3	4c 8b e3	 mov	 r12, rbx

; 1378 :             }
; 1379 :             else {

  001c6	eb 10		 jmp	 SHORT $LN20@min_max
$LN21@min_max:

; 1380 :                 Py_DECREF(item);

  001c8	48 8b cb	 mov	 rcx, rbx
  001cb	e8 00 00 00 00	 call	 _Py_DecRef

; 1381 :                 Py_DECREF(val);

  001d0	48 8b cf	 mov	 rcx, rdi
  001d3	e8 00 00 00 00	 call	 _Py_DecRef
$LN20@min_max:

; 1346 :     }
; 1347 : 
; 1348 :     maxitem = NULL; /* the result */
; 1349 :     maxval = NULL;  /* the value associated with the result */
; 1350 :     while (( item = PyIter_Next(it) )) {

  001d8	49 8b cd	 mov	 rcx, r13
  001db	e8 00 00 00 00	 call	 PyIter_Next
  001e0	48 8b d8	 mov	 rbx, rax
  001e3	48 85 c0	 test	 rax, rax
  001e6	0f 85 44 ff ff
	ff		 jne	 $LL30@min_max
$LN29@min_max:

; 1382 :             }
; 1383 :         }
; 1384 :     }
; 1385 :     if (PyErr_Occurred())

  001ec	e8 00 00 00 00	 call	 PyErr_Occurred
  001f1	48 85 c0	 test	 rax, rax
  001f4	74 45		 je	 SHORT $LN19@min_max
$Fail_it$22416:

; 1402 : Fail_it:
; 1403 :     Py_XDECREF(maxval);

  001f6	48 85 ed	 test	 rbp, rbp
  001f9	74 08		 je	 SHORT $LN11@min_max
  001fb	48 8b cd	 mov	 rcx, rbp
  001fe	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@min_max:

; 1404 :     Py_XDECREF(maxitem);

  00203	4d 85 e4	 test	 r12, r12
  00206	74 08		 je	 SHORT $LN7@min_max
  00208	49 8b cc	 mov	 rcx, r12
  0020b	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@min_max:

; 1405 :     Py_DECREF(it);

  00210	49 8b cd	 mov	 rcx, r13
  00213	e8 00 00 00 00	 call	 _Py_DecRef

; 1406 :     Py_XDECREF(keyfunc);

  00218	48 85 f6	 test	 rsi, rsi
  0021b	74 08		 je	 SHORT $LN3@min_max
  0021d	48 8b ce	 mov	 rcx, rsi
  00220	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@min_max:

; 1407 :     return NULL;

  00225	33 c0		 xor	 eax, eax
  00227	eb 4f		 jmp	 SHORT $LN54@min_max
$Fail_it_item_and_val$22407:

; 1397 : 
; 1398 : Fail_it_item_and_val:
; 1399 :     Py_DECREF(val);

  00229	48 8b cf	 mov	 rcx, rdi
  0022c	e8 00 00 00 00	 call	 _Py_DecRef
$Fail_it_item$22399:

; 1400 : Fail_it_item:
; 1401 :     Py_DECREF(item);

  00231	48 8b cb	 mov	 rcx, rbx
  00234	e8 00 00 00 00	 call	 _Py_DecRef
  00239	eb bb		 jmp	 SHORT $Fail_it$22416
$LN19@min_max:

; 1386 :         goto Fail_it;
; 1387 :     if (maxval == NULL) {

  0023b	48 85 ed	 test	 rbp, rbp
  0023e	75 18		 jne	 SHORT $LN18@min_max

; 1388 :         PyErr_Format(PyExc_ValueError,
; 1389 :                      "%s() arg is an empty sequence", name);

  00240	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00247	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@OKNAJOGM@?$CFs?$CI?$CJ?5arg?5is?5an?5empty?5sequence?$AA@
  0024e	4d 8b c6	 mov	 r8, r14
  00251	e8 00 00 00 00	 call	 PyErr_Format

; 1390 :         assert(maxitem == NULL);
; 1391 :     }
; 1392 :     else

  00256	eb 08		 jmp	 SHORT $LN17@min_max
$LN18@min_max:

; 1393 :         Py_DECREF(maxval);

  00258	48 8b cd	 mov	 rcx, rbp
  0025b	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@min_max:

; 1394 :     Py_DECREF(it);

  00260	49 8b cd	 mov	 rcx, r13
  00263	e8 00 00 00 00	 call	 _Py_DecRef

; 1395 :     Py_XDECREF(keyfunc);

  00268	48 85 f6	 test	 rsi, rsi
  0026b	74 08		 je	 SHORT $LN15@min_max
  0026d	48 8b ce	 mov	 rcx, rsi
  00270	e8 00 00 00 00	 call	 _Py_DecRef
$LN15@min_max:

; 1396 :     return maxitem;

  00275	49 8b c4	 mov	 rax, r12
$LN54@min_max:
  00278	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
$LN53@min_max:
  0027d	4c 8b 6c 24 68	 mov	 r13, QWORD PTR [rsp+104]

; 1408 : }

  00282	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  00287	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0028b	41 5f		 pop	 r15
  0028d	41 5e		 pop	 r14
  0028f	41 5c		 pop	 r12
  00291	5f		 pop	 rdi
  00292	5e		 pop	 rsi
  00293	c3		 ret	 0
min_max	ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT builtin_min
_TEXT	SEGMENT
self$ = 8
args$ = 16
kwds$ = 24
builtin_min PROC					; COMDAT

; 1412 : {

  00000	49 8b c0	 mov	 rax, r8

; 1413 :     return min_max(args, kwds, Py_LT);

  00003	48 8b ca	 mov	 rcx, rdx
  00006	45 33 c0	 xor	 r8d, r8d
  00009	48 8b d0	 mov	 rdx, rax

; 1414 : }

  0000c	e9 00 00 00 00	 jmp	 min_max
builtin_min ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT builtin_max
_TEXT	SEGMENT
self$ = 8
args$ = 16
kwds$ = 24
builtin_max PROC					; COMDAT

; 1426 : {

  00000	49 8b c0	 mov	 rax, r8

; 1427 :     return min_max(args, kwds, Py_GT);

  00003	48 8b ca	 mov	 rcx, rdx
  00006	41 b8 04 00 00
	00		 mov	 r8d, 4
  0000c	48 8b d0	 mov	 rdx, rax

; 1428 : }

  0000f	e9 00 00 00 00	 jmp	 min_max
builtin_max ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT builtin_oct
_TEXT	SEGMENT
self$ = 8
v$ = 16
builtin_oct PROC					; COMDAT

; 1441 :     return PyNumber_ToBase(v, 8);

  00000	48 8b ca	 mov	 rcx, rdx
  00003	ba 08 00 00 00	 mov	 edx, 8

; 1442 : }

  00008	e9 00 00 00 00	 jmp	 PyNumber_ToBase
builtin_oct ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DL@BFJOGDAJ@ord?$CI?$CJ?5expected?5a?5character?0?5but?5@ ; `string'
PUBLIC	??_C@_0DE@ILLPAPAN@ord?$CI?$CJ?5expected?5string?5of?5length?5@ ; `string'
EXTRN	_PyByteArray_empty_string:BYTE
EXTRN	PyType_IsSubtype:PROC
EXTRN	PyByteArray_Type:BYTE
EXTRN	_PyUnicode_Ready:PROC
EXTRN	PyLong_FromLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_ord DD imagerel builtin_ord
	DD	imagerel builtin_ord+433
	DD	imagerel $unwind$builtin_ord
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_ord DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0DL@BFJOGDAJ@ord?$CI?$CJ?5expected?5a?5character?0?5but?5@
CONST	SEGMENT
??_C@_0DL@BFJOGDAJ@ord?$CI?$CJ?5expected?5a?5character?0?5but?5@ DB 'ord('
	DB	') expected a character, but string of length %zd found', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@ILLPAPAN@ord?$CI?$CJ?5expected?5string?5of?5length?5@
CONST	SEGMENT
??_C@_0DE@ILLPAPAN@ord?$CI?$CJ?5expected?5string?5of?5length?5@ DB 'ord()'
	DB	' expected string of length 1, but %.200s found', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT builtin_ord
_TEXT	SEGMENT
self$ = 48
obj$ = 56
builtin_ord PROC					; COMDAT

; 1452 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1453 :     long ord;
; 1454 :     Py_ssize_t size;
; 1455 : 
; 1456 :     if (PyBytes_Check(obj)) {

  00006	48 8b 4a 58	 mov	 rcx, QWORD PTR [rdx+88]
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	8b 81 00 01 00
	00		 mov	 eax, DWORD PTR [rcx+256]
  00013	0f ba e0 1b	 bt	 eax, 27
  00017	73 1c		 jae	 SHORT $LN11@builtin_or

; 1457 :         size = PyBytes_GET_SIZE(obj);

  00019	4c 8b 42 60	 mov	 r8, QWORD PTR [rdx+96]

; 1458 :         if (size == 1) {

  0001d	49 83 f8 01	 cmp	 r8, 1
  00021	0f 85 6f 01 00
	00		 jne	 $LN2@builtin_or

; 1459 :             ord = (long)((unsigned char)*PyBytes_AS_STRING(obj));

  00027	0f b6 4a 78	 movzx	 ecx, BYTE PTR [rdx+120]

; 1492 : }

  0002b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002f	5b		 pop	 rbx
  00030	e9 00 00 00 00	 jmp	 PyLong_FromLong
$LN11@builtin_or:

; 1460 :             return PyLong_FromLong(ord);
; 1461 :         }
; 1462 :     }
; 1463 :     else if (PyUnicode_Check(obj)) {

  00035	0f ba e0 1c	 bt	 eax, 28
  00039	0f 83 fa 00 00
	00		 jae	 $LN8@builtin_or

; 1464 :         if (PyUnicode_READY(obj) == -1)

  0003f	f6 42 70 80	 test	 BYTE PTR [rdx+112], 128	; 00000080H
  00043	75 11		 jne	 SHORT $LN7@builtin_or
  00045	48 8b ca	 mov	 rcx, rdx
  00048	e8 00 00 00 00	 call	 _PyUnicode_Ready
  0004d	83 f8 ff	 cmp	 eax, -1

; 1465 :             return NULL;

  00050	0f 84 53 01 00
	00		 je	 $LN34@builtin_or
$LN7@builtin_or:

; 1466 :         size = PyUnicode_GET_LENGTH(obj);

  00056	4c 8b 43 60	 mov	 r8, QWORD PTR [rbx+96]

; 1467 :         if (size == 1) {

  0005a	49 83 f8 01	 cmp	 r8, 1
  0005e	0f 85 32 01 00
	00		 jne	 $LN2@builtin_or

; 1468 :             ord = (long)PyUnicode_READ_CHAR(obj, 0);

  00064	8b 43 70	 mov	 eax, DWORD PTR [rbx+112]
  00067	8b c8		 mov	 ecx, eax
  00069	c1 e9 02	 shr	 ecx, 2
  0006c	83 e1 07	 and	 ecx, 7
  0006f	41 3b c8	 cmp	 ecx, r8d
  00072	75 41		 jne	 SHORT $LN30@builtin_or
  00074	a8 20		 test	 al, 32			; 00000020H
  00076	74 29		 je	 SHORT $LN18@builtin_or
  00078	a8 40		 test	 al, 64			; 00000040H
  0007a	74 11		 je	 SHORT $LN16@builtin_or
  0007c	48 83 eb 80	 sub	 rbx, -128		; ffffffffffffff80H
  00080	0f b6 0b	 movzx	 ecx, BYTE PTR [rbx]

; 1492 : }

  00083	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00087	5b		 pop	 rbx
  00088	e9 00 00 00 00	 jmp	 PyLong_FromLong
$LN16@builtin_or:

; 1468 :             ord = (long)PyUnicode_READ_CHAR(obj, 0);

  0008d	48 81 c3 a0 00
	00 00		 add	 rbx, 160		; 000000a0H
  00094	0f b6 0b	 movzx	 ecx, BYTE PTR [rbx]

; 1492 : }

  00097	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009b	5b		 pop	 rbx
  0009c	e9 00 00 00 00	 jmp	 PyLong_FromLong
$LN18@builtin_or:

; 1468 :             ord = (long)PyUnicode_READ_CHAR(obj, 0);

  000a1	48 8b 9b a0 00
	00 00		 mov	 rbx, QWORD PTR [rbx+160]
  000a8	0f b6 0b	 movzx	 ecx, BYTE PTR [rbx]

; 1492 : }

  000ab	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000af	5b		 pop	 rbx
  000b0	e9 00 00 00 00	 jmp	 PyLong_FromLong
$LN30@builtin_or:

; 1468 :             ord = (long)PyUnicode_READ_CHAR(obj, 0);

  000b5	83 f9 02	 cmp	 ecx, 2
  000b8	75 41		 jne	 SHORT $LN28@builtin_or
  000ba	a8 20		 test	 al, 32			; 00000020H
  000bc	74 29		 je	 SHORT $LN22@builtin_or
  000be	a8 40		 test	 al, 64			; 00000040H
  000c0	74 11		 je	 SHORT $LN20@builtin_or
  000c2	48 83 eb 80	 sub	 rbx, -128		; ffffffffffffff80H
  000c6	0f b7 0b	 movzx	 ecx, WORD PTR [rbx]

; 1492 : }

  000c9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000cd	5b		 pop	 rbx
  000ce	e9 00 00 00 00	 jmp	 PyLong_FromLong
$LN20@builtin_or:

; 1468 :             ord = (long)PyUnicode_READ_CHAR(obj, 0);

  000d3	48 81 c3 a0 00
	00 00		 add	 rbx, 160		; 000000a0H
  000da	0f b7 0b	 movzx	 ecx, WORD PTR [rbx]

; 1492 : }

  000dd	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000e1	5b		 pop	 rbx
  000e2	e9 00 00 00 00	 jmp	 PyLong_FromLong
$LN22@builtin_or:

; 1468 :             ord = (long)PyUnicode_READ_CHAR(obj, 0);

  000e7	48 8b 9b a0 00
	00 00		 mov	 rbx, QWORD PTR [rbx+160]
  000ee	0f b7 0b	 movzx	 ecx, WORD PTR [rbx]

; 1492 : }

  000f1	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000f5	5b		 pop	 rbx
  000f6	e9 00 00 00 00	 jmp	 PyLong_FromLong
$LN28@builtin_or:

; 1468 :             ord = (long)PyUnicode_READ_CHAR(obj, 0);

  000fb	a8 20		 test	 al, 32			; 00000020H
  000fd	74 27		 je	 SHORT $LN26@builtin_or
  000ff	a8 40		 test	 al, 64			; 00000040H
  00101	74 10		 je	 SHORT $LN24@builtin_or
  00103	48 83 eb 80	 sub	 rbx, -128		; ffffffffffffff80H
  00107	8b 0b		 mov	 ecx, DWORD PTR [rbx]

; 1492 : }

  00109	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0010d	5b		 pop	 rbx
  0010e	e9 00 00 00 00	 jmp	 PyLong_FromLong
$LN24@builtin_or:

; 1468 :             ord = (long)PyUnicode_READ_CHAR(obj, 0);

  00113	48 81 c3 a0 00
	00 00		 add	 rbx, 160		; 000000a0H
  0011a	8b 0b		 mov	 ecx, DWORD PTR [rbx]

; 1492 : }

  0011c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00120	5b		 pop	 rbx
  00121	e9 00 00 00 00	 jmp	 PyLong_FromLong
$LN26@builtin_or:

; 1468 :             ord = (long)PyUnicode_READ_CHAR(obj, 0);

  00126	48 8b 9b a0 00
	00 00		 mov	 rbx, QWORD PTR [rbx+160]
  0012d	8b 0b		 mov	 ecx, DWORD PTR [rbx]

; 1492 : }

  0012f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00133	5b		 pop	 rbx
  00134	e9 00 00 00 00	 jmp	 PyLong_FromLong
$LN8@builtin_or:

; 1469 :             return PyLong_FromLong(ord);
; 1470 :         }
; 1471 :     }
; 1472 :     else if (PyByteArray_Check(obj)) {

  00139	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyByteArray_Type
  00140	48 3b ca	 cmp	 rcx, rdx
  00143	74 1a		 je	 SHORT $LN3@builtin_or
  00145	e8 00 00 00 00	 call	 PyType_IsSubtype
  0014a	85 c0		 test	 eax, eax
  0014c	75 11		 jne	 SHORT $LN3@builtin_or

; 1477 :             return PyLong_FromLong(ord);
; 1478 :         }
; 1479 :     }
; 1480 :     else {
; 1481 :         PyErr_Format(PyExc_TypeError,
; 1482 :                      "ord() expected string of length 1, but " \
; 1483 :                      "%.200s found", obj->ob_type->tp_name);

  0014e	4c 8b 43 58	 mov	 r8, QWORD PTR [rbx+88]
  00152	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@ILLPAPAN@ord?$CI?$CJ?5expected?5string?5of?5length?5@
  00159	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]

; 1484 :         return NULL;

  0015d	eb 3e		 jmp	 SHORT $LN35@builtin_or
$LN3@builtin_or:

; 1473 :         /* XXX Hopefully this is temporary */
; 1474 :         size = PyByteArray_GET_SIZE(obj);

  0015f	4c 8b 43 60	 mov	 r8, QWORD PTR [rbx+96]

; 1475 :         if (size == 1) {

  00163	49 83 f8 01	 cmp	 r8, 1
  00167	75 2d		 jne	 SHORT $LN2@builtin_or

; 1476 :             ord = (long)((unsigned char)*PyByteArray_AS_STRING(obj));

  00169	4d 85 c0	 test	 r8, r8
  0016c	74 14		 je	 SHORT $LN32@builtin_or
  0016e	48 8b 83 80 00
	00 00		 mov	 rax, QWORD PTR [rbx+128]
  00175	0f b6 08	 movzx	 ecx, BYTE PTR [rax]

; 1492 : }

  00178	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0017c	5b		 pop	 rbx
  0017d	e9 00 00 00 00	 jmp	 PyLong_FromLong
$LN32@builtin_or:

; 1476 :             ord = (long)((unsigned char)*PyByteArray_AS_STRING(obj));

  00182	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyByteArray_empty_string
  00189	0f b6 08	 movzx	 ecx, BYTE PTR [rax]

; 1492 : }

  0018c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00190	5b		 pop	 rbx
  00191	e9 00 00 00 00	 jmp	 PyLong_FromLong
$LN2@builtin_or:

; 1485 :     }
; 1486 : 
; 1487 :     PyErr_Format(PyExc_TypeError,
; 1488 :                  "ord() expected a character, "
; 1489 :                  "but string of length %zd found",
; 1490 :                  size);

  00196	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DL@BFJOGDAJ@ord?$CI?$CJ?5expected?5a?5character?0?5but?5@
$LN35@builtin_or:
  0019d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  001a4	e8 00 00 00 00	 call	 PyErr_Format
$LN34@builtin_or:

; 1491 :     return NULL;

  001a9	33 c0		 xor	 eax, eax

; 1492 : }

  001ab	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001af	5b		 pop	 rbx
  001b0	c3		 ret	 0
builtin_ord ENDP
_TEXT	ENDS
EXTRN	PyNumber_Power:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_pow DD imagerel builtin_pow
	DD	imagerel builtin_pow+106
	DD	imagerel $unwind$builtin_pow
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_pow DD 010701H
	DD	0a207H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT builtin_pow
_TEXT	SEGMENT
v$ = 64
self$ = 96
args$ = 104
z$ = 112
w$ = 120
builtin_pow PROC					; COMDAT

; 1503 : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  00007	48 8b c2	 mov	 rax, rdx

; 1504 :     PyObject *v, *w, *z = Py_None;

  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct

; 1505 : 
; 1506 :     if (!PyArg_UnpackTuple(args, "pow", 2, 3, &v, &w, &z))

  00011	41 b9 03 00 00
	00		 mov	 r9d, 3
  00017	49 89 4b 18	 mov	 QWORD PTR [r11+24], rcx
  0001b	49 8d 4b 18	 lea	 rcx, QWORD PTR [r11+24]
  0001f	45 8d 41 ff	 lea	 r8d, QWORD PTR [r9-1]
  00023	49 89 4b d8	 mov	 QWORD PTR [r11-40], rcx
  00027	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  0002b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03JGHBODFD@pow?$AA@
  00032	49 89 4b d0	 mov	 QWORD PTR [r11-48], rcx
  00036	49 8d 4b e8	 lea	 rcx, QWORD PTR [r11-24]
  0003a	49 89 4b c8	 mov	 QWORD PTR [r11-56], rcx
  0003e	48 8b c8	 mov	 rcx, rax
  00041	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00046	85 c0		 test	 eax, eax
  00048	75 07		 jne	 SHORT $LN1@builtin_po

; 1507 :         return NULL;

  0004a	33 c0		 xor	 eax, eax

; 1509 : }

  0004c	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00050	c3		 ret	 0
$LN1@builtin_po:

; 1508 :     return PyNumber_Power(v, w, z);

  00051	4c 8b 44 24 70	 mov	 r8, QWORD PTR z$[rsp]
  00056	48 8b 54 24 78	 mov	 rdx, QWORD PTR w$[rsp]
  0005b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  00060	e8 00 00 00 00	 call	 PyNumber_Power

; 1509 : }

  00065	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00069	c3		 ret	 0
builtin_pow ENDP
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_0CJ@CLAGNOLJ@end?5must?5be?5None?5or?5a?5string?0?5no@ ; `string'
PUBLIC	??_C@_0CJ@OODJDJCA@sep?5must?5be?5None?5or?5a?5string?0?5no@ ; `string'
PUBLIC	??_C@_01CLKCMJKC@?5?$AA@			; `string'
PUBLIC	??_C@_06DJDOIFHB@stdout?$AA@			; `string'
PUBLIC	??_C@_0M@LFOKPOFF@?$HMOOOO?3print?$AA@		; `string'
EXTRN	PyObject_CallMethod:PROC
EXTRN	PyTuple_GetItem:PROC
EXTRN	PyFile_WriteObject:PROC
EXTRN	PyFile_WriteString:PROC
EXTRN	PySys_GetObject:PROC
_BSS	SEGMENT
?dummy_args@?1??builtin_print@@9@9 DQ 01H DUP (?)	; `builtin_print'::`2'::dummy_args
_BSS	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$builtin_print DD imagerel builtin_print
	DD	imagerel builtin_print+722
	DD	imagerel $unwind$builtin_print
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_print DD 061001H
	DD	0f6410H
	DD	0e3410H
	DD	0700cb210H
xdata	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@CLAGNOLJ@end?5must?5be?5None?5or?5a?5string?0?5no@
CONST	SEGMENT
??_C@_0CJ@CLAGNOLJ@end?5must?5be?5None?5or?5a?5string?0?5no@ DB 'end must'
	DB	' be None or a string, not %.200s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@OODJDJCA@sep?5must?5be?5None?5or?5a?5string?0?5no@
CONST	SEGMENT
??_C@_0CJ@OODJDJCA@sep?5must?5be?5None?5or?5a?5string?0?5no@ DB 'sep must'
	DB	' be None or a string, not %.200s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5?$AA@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06DJDOIFHB@stdout?$AA@
CONST	SEGMENT
??_C@_06DJDOIFHB@stdout?$AA@ DB 'stdout', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LFOKPOFF@?$HMOOOO?3print?$AA@
CONST	SEGMENT
??_C@_0M@LFOKPOFF@?$HMOOOO?3print?$AA@ DB '|OOOO:print', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\bltinmodule.c
CONST	ENDS
;	COMDAT builtin_print
_TEXT	SEGMENT
sep$ = 64
end$ = 72
flush$ = 80
self$ = 112
args$ = 120
kwds$ = 128
file$ = 136
builtin_print PROC					; COMDAT

; 1521 : {

  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00007	48 89 70 10	 mov	 QWORD PTR [rax+16], rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 60	 sub	 rsp, 96			; 00000060H

; 1522 :     static char *kwlist[] = {"sep", "end", "file", "flush", 0};
; 1523 :     static PyObject *dummy_args;
; 1524 :     PyObject *sep = NULL, *end = NULL, *file = NULL, *flush = NULL;

  00010	33 db		 xor	 ebx, ebx
  00012	49 8b f0	 mov	 rsi, r8
  00015	48 8b fa	 mov	 rdi, rdx
  00018	48 89 58 d8	 mov	 QWORD PTR [rax-40], rbx
  0001c	48 89 58 e0	 mov	 QWORD PTR [rax-32], rbx
  00020	48 89 58 20	 mov	 QWORD PTR [rax+32], rbx
  00024	48 89 58 e8	 mov	 QWORD PTR [rax-24], rbx

; 1525 :     int i, err;
; 1526 : 
; 1527 :     if (dummy_args == NULL && !(dummy_args = PyTuple_New(0)))

  00028	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?dummy_args@?1??builtin_print@@9@9
  0002f	48 85 c0	 test	 rax, rax
  00032	75 17		 jne	 SHORT $LN28@builtin_pr
  00034	33 c9		 xor	 ecx, ecx
  00036	e8 00 00 00 00	 call	 PyTuple_New
  0003b	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?dummy_args@?1??builtin_print@@9@9, rax
  00042	48 85 c0	 test	 rax, rax

; 1528 :         return NULL;

  00045	0f 84 11 01 00
	00		 je	 $LN47@builtin_pr
$LN28@builtin_pr:

; 1529 :     if (!PyArg_ParseTupleAndKeywords(dummy_args, kwds, "|OOOO:print",
; 1530 :                                      kwlist, &sep, &end, &file, &flush))

  0004b	48 8d 4c 24 50	 lea	 rcx, QWORD PTR flush$[rsp]
  00050	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??builtin_print@@9@9
  00057	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@LFOKPOFF@?$HMOOOO?3print?$AA@
  0005e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00063	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR file$[rsp]
  0006b	48 8b d6	 mov	 rdx, rsi
  0006e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00073	48 8d 4c 24 48	 lea	 rcx, QWORD PTR end$[rsp]
  00078	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0007d	48 8d 4c 24 40	 lea	 rcx, QWORD PTR sep$[rsp]
  00082	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00087	48 8b c8	 mov	 rcx, rax
  0008a	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  0008f	85 c0		 test	 eax, eax

; 1531 :         return NULL;

  00091	0f 84 c5 00 00
	00		 je	 $LN47@builtin_pr

; 1532 :     if (file == NULL || file == Py_None) {

  00097	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR file$[rsp]
  0009f	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_Py_NoneStruct
  000a6	48 85 c0	 test	 rax, rax
  000a9	74 05		 je	 SHORT $LN25@builtin_pr
  000ab	48 3b c6	 cmp	 rax, rsi
  000ae	75 1d		 jne	 SHORT $LN24@builtin_pr
$LN25@builtin_pr:

; 1533 :         file = PySys_GetObject("stdout");

  000b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06DJDOIFHB@stdout?$AA@
  000b7	e8 00 00 00 00	 call	 PySys_GetObject
  000bc	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR file$[rsp], rax

; 1534 :         /* sys.stdout may be None when FILE* stdout isn't connected */
; 1535 :         if (file == Py_None)

  000c4	48 3b c6	 cmp	 rax, rsi

; 1536 :             Py_RETURN_NONE;

  000c7	0f 84 b1 01 00
	00		 je	 $LN1@builtin_pr
$LN24@builtin_pr:

; 1537 :     }
; 1538 : 
; 1539 :     if (sep == Py_None) {

  000cd	48 8b 44 24 40	 mov	 rax, QWORD PTR sep$[rsp]
  000d2	48 3b c6	 cmp	 rax, rsi
  000d5	75 58		 jne	 SHORT $LN23@builtin_pr

; 1540 :         sep = NULL;

  000d7	48 89 5c 24 40	 mov	 QWORD PTR sep$[rsp], rbx
$LN21@builtin_pr:

; 1547 :     }
; 1548 :     if (end == Py_None) {

  000dc	48 8b 44 24 48	 mov	 rax, QWORD PTR end$[rsp]
  000e1	48 3b c6	 cmp	 rax, rsi
  000e4	0f 85 84 00 00
	00		 jne	 $LN20@builtin_pr

; 1549 :         end = NULL;

  000ea	48 89 5c 24 48	 mov	 QWORD PTR end$[rsp], rbx
$LN18@builtin_pr:

; 1556 :     }
; 1557 : 
; 1558 :     for (i = 0; i < PyTuple_Size(args); i++) {

  000ef	48 8b cf	 mov	 rcx, rdi
  000f2	e8 00 00 00 00	 call	 PyTuple_Size
  000f7	48 85 c0	 test	 rax, rax
  000fa	0f 8e 03 01 00
	00		 jle	 $LN15@builtin_pr
$LL17@builtin_pr:

; 1559 :         if (i > 0) {

  00100	85 db		 test	 ebx, ebx
  00102	0f 8e bc 00 00
	00		 jle	 $LN11@builtin_pr

; 1560 :             if (sep == NULL)

  00108	48 8b 4c 24 40	 mov	 rcx, QWORD PTR sep$[rsp]

; 1561 :                 err = PyFile_WriteString(" ", file);

  0010d	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR file$[rsp]
  00115	48 85 c9	 test	 rcx, rcx
  00118	0f 85 97 00 00
	00		 jne	 $LN13@builtin_pr
  0011e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01CLKCMJKC@?5?$AA@
  00125	e8 00 00 00 00	 call	 PyFile_WriteString

; 1562 :             else

  0012a	e9 91 00 00 00	 jmp	 $LN12@builtin_pr
$LN23@builtin_pr:

; 1541 :     }
; 1542 :     else if (sep && !PyUnicode_Check(sep)) {

  0012f	48 85 c0	 test	 rax, rax
  00132	74 a8		 je	 SHORT $LN21@builtin_pr
  00134	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  00138	41 f7 80 00 01
	00 00 00 00 00
	10		 test	 DWORD PTR [r8+256], 268435456 ; 10000000H
  00143	75 97		 jne	 SHORT $LN21@builtin_pr

; 1543 :         PyErr_Format(PyExc_TypeError,
; 1544 :                      "sep must be None or a string, not %.200s",
; 1545 :                      sep->ob_type->tp_name);

  00145	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00149	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00150	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@OODJDJCA@sep?5must?5be?5None?5or?5a?5string?0?5no@
  00157	e8 00 00 00 00	 call	 PyErr_Format
$LN47@builtin_pr:

; 1546 :         return NULL;

  0015c	33 c0		 xor	 eax, eax

; 1596 : }

  0015e	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  00163	48 8b 74 24 78	 mov	 rsi, QWORD PTR [rsp+120]
  00168	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0016c	5f		 pop	 rdi
  0016d	c3		 ret	 0
$LN20@builtin_pr:

; 1550 :     }
; 1551 :     else if (end && !PyUnicode_Check(end)) {

  0016e	48 85 c0	 test	 rax, rax
  00171	0f 84 78 ff ff
	ff		 je	 $LN18@builtin_pr
  00177	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  0017b	41 f7 80 00 01
	00 00 00 00 00
	10		 test	 DWORD PTR [r8+256], 268435456 ; 10000000H
  00186	0f 85 63 ff ff
	ff		 jne	 $LN18@builtin_pr

; 1552 :         PyErr_Format(PyExc_TypeError,
; 1553 :                      "end must be None or a string, not %.200s",
; 1554 :                      end->ob_type->tp_name);

  0018c	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00190	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00197	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@CLAGNOLJ@end?5must?5be?5None?5or?5a?5string?0?5no@
  0019e	e8 00 00 00 00	 call	 PyErr_Format

; 1555 :         return NULL;

  001a3	33 c0		 xor	 eax, eax

; 1596 : }

  001a5	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  001aa	48 8b 74 24 78	 mov	 rsi, QWORD PTR [rsp+120]
  001af	48 83 c4 60	 add	 rsp, 96			; 00000060H
  001b3	5f		 pop	 rdi
  001b4	c3		 ret	 0
$LN13@builtin_pr:

; 1563 :                 err = PyFile_WriteObject(sep, file,
; 1564 :                                          Py_PRINT_RAW);

  001b5	41 b8 01 00 00
	00		 mov	 r8d, 1
  001bb	e8 00 00 00 00	 call	 PyFile_WriteObject
$LN12@builtin_pr:

; 1565 :             if (err)

  001c0	85 c0		 test	 eax, eax
  001c2	75 98		 jne	 SHORT $LN47@builtin_pr
$LN11@builtin_pr:

; 1566 :                 return NULL;
; 1567 :         }
; 1568 :         err = PyFile_WriteObject(PyTuple_GetItem(args, i), file,
; 1569 :                                  Py_PRINT_RAW);
; 1570 :         if (err)

  001c4	48 63 d3	 movsxd	 rdx, ebx
  001c7	48 8b cf	 mov	 rcx, rdi
  001ca	e8 00 00 00 00	 call	 PyTuple_GetItem
  001cf	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR file$[rsp]
  001d7	41 b8 01 00 00
	00		 mov	 r8d, 1
  001dd	48 8b c8	 mov	 rcx, rax
  001e0	e8 00 00 00 00	 call	 PyFile_WriteObject
  001e5	85 c0		 test	 eax, eax
  001e7	0f 85 6f ff ff
	ff		 jne	 $LN47@builtin_pr

; 1556 :     }
; 1557 : 
; 1558 :     for (i = 0; i < PyTuple_Size(args); i++) {

  001ed	48 8b cf	 mov	 rcx, rdi
  001f0	ff c3		 inc	 ebx
  001f2	e8 00 00 00 00	 call	 PyTuple_Size
  001f7	48 63 cb	 movsxd	 rcx, ebx
  001fa	48 3b c8	 cmp	 rcx, rax
  001fd	0f 8c fd fe ff
	ff		 jl	 $LL17@builtin_pr
$LN15@builtin_pr:

; 1571 :             return NULL;
; 1572 :     }
; 1573 : 
; 1574 :     if (end == NULL)

  00203	48 8b 4c 24 48	 mov	 rcx, QWORD PTR end$[rsp]

; 1575 :         err = PyFile_WriteString("\n", file);

  00208	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR file$[rsp]
  00210	48 85 c9	 test	 rcx, rcx
  00213	75 0e		 jne	 SHORT $LN9@builtin_pr
  00215	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  0021c	e8 00 00 00 00	 call	 PyFile_WriteString

; 1576 :     else

  00221	eb 0b		 jmp	 SHORT $LN8@builtin_pr
$LN9@builtin_pr:

; 1577 :         err = PyFile_WriteObject(end, file, Py_PRINT_RAW);

  00223	41 b8 01 00 00
	00		 mov	 r8d, 1
  00229	e8 00 00 00 00	 call	 PyFile_WriteObject
$LN8@builtin_pr:

; 1578 :     if (err)

  0022e	85 c0		 test	 eax, eax

; 1579 :         return NULL;

  00230	0f 85 26 ff ff
	ff		 jne	 $LN47@builtin_pr

; 1580 : 
; 1581 :     if (flush != NULL) {

  00236	48 8b 4c 24 50	 mov	 rcx, QWORD PTR flush$[rsp]
  0023b	48 85 c9	 test	 rcx, rcx
  0023e	74 3e		 je	 SHORT $LN1@builtin_pr

; 1582 :         PyObject *tmp;
; 1583 :         int do_flush = PyObject_IsTrue(flush);

  00240	e8 00 00 00 00	 call	 PyObject_IsTrue

; 1584 :         if (do_flush == -1)

  00245	83 f8 ff	 cmp	 eax, -1

; 1585 :             return NULL;

  00248	0f 84 0e ff ff
	ff		 je	 $LN47@builtin_pr

; 1586 :         else if (do_flush) {

  0024e	85 c0		 test	 eax, eax
  00250	74 2c		 je	 SHORT $LN1@builtin_pr

; 1587 :             tmp = PyObject_CallMethod(file, "flush", "");

  00252	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR file$[rsp]
  0025a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00261	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05GLCAEPFP@flush?$AA@
  00268	e8 00 00 00 00	 call	 PyObject_CallMethod

; 1588 :             if (tmp == NULL)

  0026d	48 85 c0	 test	 rax, rax

; 1589 :                 return NULL;

  00270	0f 84 e6 fe ff
	ff		 je	 $LN47@builtin_pr

; 1590 :             else
; 1591 :                 Py_DECREF(tmp);

  00276	48 8b c8	 mov	 rcx, rax
  00279	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@builtin_pr:

; 1592 :         }
; 1593 :     }
; 1594 : 
; 1595 :     Py_RETURN_NONE;

  0027e	e8 00 00 00 00	 call	 _Py_PXCTX
  00283	85 c0		 test	 eax, eax
  00285	75 38		 jne	 SHORT $LN36@builtin_pr
  00287	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0028e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00295	4c 8b ce	 mov	 r9, rsi
  00298	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0029e	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  002a6	e8 00 00 00 00	 call	 _PyParallel_Guard
  002ab	85 c0		 test	 eax, eax
  002ad	75 09		 jne	 SHORT $LN35@builtin_pr
  002af	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  002b6	74 07		 je	 SHORT $LN36@builtin_pr
$LN35@builtin_pr:
  002b8	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN36@builtin_pr:

; 1596 : }

  002bf	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  002c4	48 8b c6	 mov	 rax, rsi
  002c7	48 8b 74 24 78	 mov	 rsi, QWORD PTR [rsp+120]
  002cc	48 83 c4 60	 add	 rsp, 96			; 00000060H
  002d0	5f		 pop	 rdi
  002d1	c3		 ret	 0
builtin_print ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@GKLBLMIN@input?$CI?$CJ?3?5lost?5sys?4stdin?$AA@ ; `string'
PUBLIC	??_C@_0BJ@ONCIOBJO@input?$CI?$CJ?3?5lost?5sys?4stdout?$AA@ ; `string'
PUBLIC	??_C@_0BJ@NBIALAPJ@input?$CI?$CJ?3?5lost?5sys?4stderr?$AA@ ; `string'
PUBLIC	??_C@_0BG@KBDILNFI@input?3?5input?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_0O@GPCIEIOM@builtin_input?$AA@		; `string'
PUBLIC	??_C@_06FJGNEBG@stderr?$AA@			; `string'
PUBLIC	??_C@_05MHOFLBOO@stdin?$AA@			; `string'
EXTRN	PyExc_RuntimeError:QWORD
EXTRN	__imp_free:PROC
EXTRN	_PxMem_Free:PROC
EXTRN	PyUnicode_Decode:PROC
EXTRN	PyExc_OverflowError:QWORD
EXTRN	PyExc_EOFError:QWORD
EXTRN	PyExc_KeyboardInterrupt:QWORD
EXTRN	PyErr_CheckSignals:PROC
EXTRN	PyOS_Readline:PROC
EXTRN	PyBytes_AsString:PROC
EXTRN	PyUnicode_AsEncodedString:PROC
EXTRN	PyObject_Str:PROC
EXTRN	PyUnicode_AsUTF8:PROC
EXTRN	__imp_isatty:PROC
EXTRN	__imp_fileno:PROC
EXTRN	__imp___iob_func:PROC
EXTRN	PyLong_AsLong:PROC
EXTRN	PyFile_GetLine:PROC
EXTRN	_PyObject_CallMethodId:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_input DD imagerel builtin_input
	DD	imagerel builtin_input+190
	DD	imagerel $unwind$builtin_input
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$builtin_input DD imagerel builtin_input+190
	DD	imagerel builtin_input+1217
	DD	imagerel $chain$2$builtin_input
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$builtin_input DD imagerel builtin_input+1217
	DD	imagerel builtin_input+1422
	DD	imagerel $chain$4$builtin_input
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$builtin_input DD imagerel builtin_input+1422
	DD	imagerel builtin_input+1521
	DD	imagerel $chain$5$builtin_input
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$builtin_input DD 021H
	DD	imagerel builtin_input
	DD	imagerel builtin_input+190
	DD	imagerel $unwind$builtin_input
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$builtin_input DD 060021H
	DD	08e400H
	DD	09c400H
	DD	0105400H
	DD	imagerel builtin_input
	DD	imagerel builtin_input+190
	DD	imagerel $unwind$builtin_input
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$builtin_input DD 061621H
	DD	08e416H
	DD	09c411H
	DD	0105408H
	DD	imagerel builtin_input
	DD	imagerel builtin_input+190
	DD	imagerel $unwind$builtin_input
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_input DD 060c01H
	DD	0f008920cH
	DD	07004d006H
	DD	030026003H
xdata	ENDS
;	COMDAT ??_C@_0BI@GKLBLMIN@input?$CI?$CJ?3?5lost?5sys?4stdin?$AA@
CONST	SEGMENT
??_C@_0BI@GKLBLMIN@input?$CI?$CJ?3?5lost?5sys?4stdin?$AA@ DB 'input(): lo'
	DB	'st sys.stdin', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@ONCIOBJO@input?$CI?$CJ?3?5lost?5sys?4stdout?$AA@
CONST	SEGMENT
??_C@_0BJ@ONCIOBJO@input?$CI?$CJ?3?5lost?5sys?4stdout?$AA@ DB 'input(): l'
	DB	'ost sys.stdout', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NBIALAPJ@input?$CI?$CJ?3?5lost?5sys?4stderr?$AA@
CONST	SEGMENT
??_C@_0BJ@NBIALAPJ@input?$CI?$CJ?3?5lost?5sys?4stderr?$AA@ DB 'input(): l'
	DB	'ost sys.stderr', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KBDILNFI@input?3?5input?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BG@KBDILNFI@input?3?5input?5too?5long?$AA@ DB 'input: input too lo'
	DB	'ng', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GPCIEIOM@builtin_input?$AA@
CONST	SEGMENT
??_C@_0O@GPCIEIOM@builtin_input?$AA@ DB 'builtin_input', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FJGNEBG@stderr?$AA@
CONST	SEGMENT
??_C@_06FJGNEBG@stderr?$AA@ DB 'stderr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MHOFLBOO@stdin?$AA@
CONST	SEGMENT
??_C@_05MHOFLBOO@stdin?$AA@ DB 'stdin', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT builtin_input
_TEXT	SEGMENT
stdin_encoding_str$1$ = 48
stdin_errors_str$1$ = 56
self$ = 128
args$ = 136
promptarg$ = 144
stdin_encoding$1$ = 152
tv453 = 152
builtin_input PROC					; COMDAT

; 1611 : {

  00000	40 53		 push	 rbx
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	41 55		 push	 r13
  00006	41 57		 push	 r15
  00008	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 1612 :     PyObject *promptarg = NULL;
; 1613 :     PyObject *fin = PySys_GetObject("stdin");

  0000c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05MHOFLBOO@stdin?$AA@
  00013	45 33 ed	 xor	 r13d, r13d
  00016	48 8b fa	 mov	 rdi, rdx
  00019	4c 89 ac 24 90
	00 00 00	 mov	 QWORD PTR promptarg$[rsp], r13
  00021	e8 00 00 00 00	 call	 PySys_GetObject

; 1614 :     PyObject *fout = PySys_GetObject("stdout");

  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06DJDOIFHB@stdout?$AA@
  0002d	4c 8b f8	 mov	 r15, rax
  00030	e8 00 00 00 00	 call	 PySys_GetObject

; 1615 :     PyObject *ferr = PySys_GetObject("stderr");

  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FJGNEBG@stderr?$AA@
  0003c	48 8b d8	 mov	 rbx, rax
  0003f	e8 00 00 00 00	 call	 PySys_GetObject

; 1616 :     PyObject *tmp;
; 1617 :     long fd;
; 1618 :     int tty;
; 1619 : 
; 1620 :     /* Parse arguments */
; 1621 :     if (!PyArg_UnpackTuple(args, "input", 0, 1, &promptarg))

  00044	45 8d 4d 01	 lea	 r9d, QWORD PTR [r13+1]
  00048	48 8b f0	 mov	 rsi, rax
  0004b	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR promptarg$[rsp]
  00053	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05DFJCHPDH@input?$AA@
  0005a	45 33 c0	 xor	 r8d, r8d
  0005d	48 8b cf	 mov	 rcx, rdi
  00060	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00065	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0006a	85 c0		 test	 eax, eax

; 1622 :         return NULL;

  0006c	0f 84 50 05 00
	00		 je	 $LN93@builtin_in

; 1623 : 
; 1624 :     /* Check that stdin/out/err are intact */
; 1625 :     if (fin == NULL || fin == Py_None) {

  00072	4d 85 ff	 test	 r15, r15
  00075	0f 84 55 05 00
	00		 je	 $LN77@builtin_in
  0007b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00082	4c 3b f8	 cmp	 r15, rax
  00085	0f 84 45 05 00
	00		 je	 $LN77@builtin_in

; 1629 :     }
; 1630 :     if (fout == NULL || fout == Py_None) {

  0008b	48 85 db	 test	 rbx, rbx
  0008e	0f 84 1b 05 00
	00		 je	 $LN75@builtin_in
  00094	48 3b d8	 cmp	 rbx, rax
  00097	0f 84 12 05 00
	00		 je	 $LN75@builtin_in

; 1634 :     }
; 1635 :     if (ferr == NULL || ferr == Py_None) {

  0009d	48 85 f6	 test	 rsi, rsi
  000a0	0f 84 e8 04 00
	00		 je	 $LN73@builtin_in
  000a6	48 3b f0	 cmp	 rsi, rax
  000a9	0f 84 df 04 00
	00		 je	 $LN73@builtin_in

; 1639 :     }
; 1640 : 
; 1641 :     /* First of all, flush stderr */
; 1642 :     tmp = _PyObject_CallMethodId(ferr, &PyId_flush, "");

  000af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000b5	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  000be	48 89 ac 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rbp
  000c6	48 8b 3c c8	 mov	 rdi, QWORD PTR [rax+rcx*8]
  000ca	4c 89 64 24 48	 mov	 QWORD PTR [rsp+72], r12
  000cf	4c 89 74 24 40	 mov	 QWORD PTR [rsp+64], r14
  000d4	41 be 00 00 00
	00		 mov	 r14d, OFFSET FLAT:PyId_flush
  000da	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  000e1	48 8b ce	 mov	 rcx, rsi
  000e4	4c 03 f7	 add	 r14, rdi
  000e7	4d 8b c4	 mov	 r8, r12
  000ea	48 89 bc 24 98
	00 00 00	 mov	 QWORD PTR tv453[rsp], rdi
  000f2	49 8b d6	 mov	 rdx, r14
  000f5	e8 00 00 00 00	 call	 _PyObject_CallMethodId

; 1643 :     if (tmp == NULL)

  000fa	48 85 c0	 test	 rax, rax
  000fd	75 07		 jne	 SHORT $LN72@builtin_in

; 1644 :         PyErr_Clear();

  000ff	e8 00 00 00 00	 call	 PyErr_Clear

; 1645 :     else

  00104	eb 08		 jmp	 SHORT $LN71@builtin_in
$LN72@builtin_in:

; 1646 :         Py_DECREF(tmp);

  00106	48 8b c8	 mov	 rcx, rax
  00109	e8 00 00 00 00	 call	 _Py_DecRef
$LN71@builtin_in:

; 1647 : 
; 1648 :     /* We should only use (GNU) readline if Python's sys.stdin and
; 1649 :        sys.stdout are the same as C's stdin and stdout, because we
; 1650 :        need to pass it those. */
; 1651 :     tmp = _PyObject_CallMethodId(fin, &PyId_fileno, "");

  0010e	bd 00 00 00 00	 mov	 ebp, OFFSET FLAT:PyId_fileno
  00113	4d 8b c4	 mov	 r8, r12
  00116	49 8b cf	 mov	 rcx, r15
  00119	48 03 ef	 add	 rbp, rdi
  0011c	48 8b d5	 mov	 rdx, rbp
  0011f	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  00124	48 8b f0	 mov	 rsi, rax

; 1652 :     if (tmp == NULL) {

  00127	48 85 c0	 test	 rax, rax
  0012a	75 54		 jne	 SHORT $LN70@builtin_in

; 1653 :         PyErr_Clear();

  0012c	e8 00 00 00 00	 call	 PyErr_Clear
$LN63@builtin_in:

; 1773 :     }
; 1774 : 
; 1775 :     /* Fallback if we're not interactive */
; 1776 :     if (promptarg != NULL) {

  00131	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR promptarg$[rsp]
  00139	48 85 c9	 test	 rcx, rcx
  0013c	74 16		 je	 SHORT $LN3@builtin_in

; 1777 :         if (PyFile_WriteObject(promptarg, fout, Py_PRINT_RAW) != 0)

  0013e	41 b8 01 00 00
	00		 mov	 r8d, 1
  00144	48 8b d3	 mov	 rdx, rbx
  00147	e8 00 00 00 00	 call	 PyFile_WriteObject
  0014c	85 c0		 test	 eax, eax

; 1778 :             return NULL;

  0014e	0f 85 4d 03 00
	00		 jne	 $LN7@builtin_in
$LN3@builtin_in:

; 1779 :     }
; 1780 :     tmp = _PyObject_CallMethodId(fout, &PyId_flush, "");

  00154	4d 8b c4	 mov	 r8, r12
  00157	49 8b d6	 mov	 rdx, r14
  0015a	48 8b cb	 mov	 rcx, rbx
  0015d	e8 00 00 00 00	 call	 _PyObject_CallMethodId

; 1781 :     if (tmp == NULL)

  00162	48 85 c0	 test	 rax, rax
  00165	0f 85 0b 04 00
	00		 jne	 $LN2@builtin_in

; 1782 :         PyErr_Clear();

  0016b	e8 00 00 00 00	 call	 PyErr_Clear

; 1785 :     return PyFile_GetLine(fin, -1);

  00170	83 ca ff	 or	 edx, -1
  00173	49 8b cf	 mov	 rcx, r15
  00176	e8 00 00 00 00	 call	 PyFile_GetLine
  0017b	e9 23 03 00 00	 jmp	 $LN92@builtin_in
$LN70@builtin_in:

; 1654 :         tty = 0;
; 1655 :     }
; 1656 :     else {
; 1657 :         fd = PyLong_AsLong(tmp);

  00180	48 8b c8	 mov	 rcx, rax
  00183	e8 00 00 00 00	 call	 PyLong_AsLong

; 1658 :         Py_DECREF(tmp);

  00188	48 8b ce	 mov	 rcx, rsi
  0018b	8b f8		 mov	 edi, eax
  0018d	e8 00 00 00 00	 call	 _Py_DecRef

; 1659 :         if (fd < 0 && PyErr_Occurred())

  00192	85 ff		 test	 edi, edi
  00194	79 0e		 jns	 SHORT $LN68@builtin_in
  00196	e8 00 00 00 00	 call	 PyErr_Occurred
  0019b	48 85 c0	 test	 rax, rax

; 1660 :             return NULL;

  0019e	0f 85 fd 02 00
	00		 jne	 $LN7@builtin_in
$LN68@builtin_in:

; 1661 :         tty = fd == fileno(stdin) && isatty(fd);

  001a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  001aa	48 8b c8	 mov	 rcx, rax
  001ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno
  001b3	3b f8		 cmp	 edi, eax
  001b5	0f 85 76 ff ff
	ff		 jne	 $LN63@builtin_in
  001bb	8b cf		 mov	 ecx, edi
  001bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isatty
  001c3	85 c0		 test	 eax, eax

; 1662 :     }
; 1663 :     if (tty) {

  001c5	0f 84 66 ff ff
	ff		 je	 $LN63@builtin_in

; 1664 :         tmp = _PyObject_CallMethodId(fout, &PyId_fileno, "");

  001cb	4d 8b c4	 mov	 r8, r12
  001ce	48 8b d5	 mov	 rdx, rbp
  001d1	48 8b cb	 mov	 rcx, rbx
  001d4	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  001d9	48 8b f0	 mov	 rsi, rax

; 1665 :         if (tmp == NULL)

  001dc	48 85 c0	 test	 rax, rax
  001df	75 07		 jne	 SHORT $LN66@builtin_in

; 1666 :             PyErr_Clear();

  001e1	e8 00 00 00 00	 call	 PyErr_Clear

; 1667 :         else {

  001e6	eb 4c		 jmp	 SHORT $LN89@builtin_in
$LN66@builtin_in:

; 1668 :             fd = PyLong_AsLong(tmp);

  001e8	48 8b c8	 mov	 rcx, rax
  001eb	e8 00 00 00 00	 call	 PyLong_AsLong

; 1669 :             Py_DECREF(tmp);

  001f0	48 8b ce	 mov	 rcx, rsi
  001f3	8b f8		 mov	 edi, eax
  001f5	e8 00 00 00 00	 call	 _Py_DecRef

; 1670 :             if (fd < 0 && PyErr_Occurred())

  001fa	85 ff		 test	 edi, edi
  001fc	79 0e		 jns	 SHORT $LN64@builtin_in
  001fe	e8 00 00 00 00	 call	 PyErr_Occurred
  00203	48 85 c0	 test	 rax, rax

; 1671 :                 return NULL;

  00206	0f 85 95 02 00
	00		 jne	 $LN7@builtin_in
$LN64@builtin_in:

; 1672 :             tty = fd == fileno(stdout) && isatty(fd);

  0020c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00212	48 8d 48 30	 lea	 rcx, QWORD PTR [rax+48]
  00216	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno
  0021c	3b f8		 cmp	 edi, eax
  0021e	0f 85 0d ff ff
	ff		 jne	 $LN63@builtin_in
  00224	8b cf		 mov	 ecx, edi
  00226	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isatty
  0022c	85 c0		 test	 eax, eax

; 1673 :         }
; 1674 :     }
; 1675 : 
; 1676 :     /* If we're interactive, use (GNU) readline */
; 1677 :     if (tty) {

  0022e	0f 84 fd fe ff
	ff		 je	 $LN63@builtin_in
$LN89@builtin_in:

; 1678 :         PyObject *po = NULL;
; 1679 :         char *prompt;
; 1680 :         char *s = NULL;
; 1681 :         PyObject *stdin_encoding = NULL, *stdin_errors = NULL;
; 1682 :         PyObject *stdout_encoding = NULL, *stdout_errors = NULL;
; 1683 :         char *stdin_encoding_str, *stdin_errors_str;
; 1684 :         PyObject *result;
; 1685 :         size_t len;
; 1686 :         _Py_IDENTIFIER(encoding);
; 1687 :         _Py_IDENTIFIER(errors);
; 1688 : 
; 1689 :         stdin_encoding = _PyObject_GetAttrId(fin, &PyId_encoding);

  00234	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR tv453[rsp]
  0023c	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_encoding@?9??builtin_input@@9@9
  00241	49 8b cf	 mov	 rcx, r15
  00244	48 03 d7	 add	 rdx, rdi
  00247	49 8b f5	 mov	 rsi, r13
  0024a	4d 8b f5	 mov	 r14, r13
  0024d	49 8b ed	 mov	 rbp, r13
  00250	e8 00 00 00 00	 call	 _PyObject_GetAttrId

; 1690 :         stdin_errors = _PyObject_GetAttrId(fin, &PyId_errors);

  00255	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_errors@?9??builtin_input@@9@9
  0025a	48 03 d7	 add	 rdx, rdi
  0025d	49 8b cf	 mov	 rcx, r15
  00260	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR stdin_encoding$1$[rsp], rax
  00268	e8 00 00 00 00	 call	 _PyObject_GetAttrId

; 1691 :         if (!stdin_encoding || !stdin_errors)

  0026d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR stdin_encoding$1$[rsp]
  00275	4c 8b f8	 mov	 r15, rax
  00278	48 85 c9	 test	 rcx, rcx
  0027b	0f 84 f9 01 00
	00		 je	 $LN19@builtin_in
  00281	48 85 c0	 test	 rax, rax
  00284	0f 84 d6 01 00
	00		 je	 $_readline_errors$22742

; 1692 :             /* stdin is a text stream, so it must have an
; 1693 :                encoding. */
; 1694 :             goto _readline_errors;
; 1695 :         stdin_encoding_str = _PyUnicode_AsString(stdin_encoding);

  0028a	e8 00 00 00 00	 call	 PyUnicode_AsUTF8

; 1696 :         stdin_errors_str = _PyUnicode_AsString(stdin_errors);

  0028f	49 8b cf	 mov	 rcx, r15
  00292	48 89 44 24 30	 mov	 QWORD PTR stdin_encoding_str$1$[rsp], rax
  00297	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  0029c	48 89 44 24 38	 mov	 QWORD PTR stdin_errors_str$1$[rsp], rax

; 1697 :         if (!stdin_encoding_str || !stdin_errors_str)

  002a1	4c 39 6c 24 30	 cmp	 QWORD PTR stdin_encoding_str$1$[rsp], r13
  002a6	0f 84 b4 01 00
	00		 je	 $_readline_errors$22742
  002ac	48 85 c0	 test	 rax, rax
  002af	0f 84 ab 01 00
	00		 je	 $_readline_errors$22742

; 1698 :             goto _readline_errors;
; 1699 :         tmp = _PyObject_CallMethodId(fout, &PyId_flush, "");

  002b5	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId_flush
  002ba	4d 8b c4	 mov	 r8, r12
  002bd	48 8b cb	 mov	 rcx, rbx
  002c0	48 03 d7	 add	 rdx, rdi
  002c3	e8 00 00 00 00	 call	 _PyObject_CallMethodId

; 1700 :         if (tmp == NULL)

  002c8	48 85 c0	 test	 rax, rax
  002cb	75 07		 jne	 SHORT $LN58@builtin_in

; 1701 :             PyErr_Clear();

  002cd	e8 00 00 00 00	 call	 PyErr_Clear

; 1702 :         else

  002d2	eb 08		 jmp	 SHORT $LN57@builtin_in
$LN58@builtin_in:

; 1703 :             Py_DECREF(tmp);

  002d4	48 8b c8	 mov	 rcx, rax
  002d7	e8 00 00 00 00	 call	 _Py_DecRef
$LN57@builtin_in:

; 1704 :         if (promptarg != NULL) {

  002dc	48 39 b4 24 90
	00 00 00	 cmp	 QWORD PTR promptarg$[rsp], rsi
  002e4	0f 84 35 01 00
	00		 je	 $LN36@builtin_in

; 1705 :             /* We have a prompt, encode it as stdout would */
; 1706 :             char *stdout_encoding_str, *stdout_errors_str;
; 1707 :             PyObject *stringpo;
; 1708 :             stdout_encoding = _PyObject_GetAttrId(fout, &PyId_encoding);

  002ea	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_encoding@?9??builtin_input@@9@9
  002ef	48 8b cb	 mov	 rcx, rbx
  002f2	48 03 d7	 add	 rdx, rdi
  002f5	e8 00 00 00 00	 call	 _PyObject_GetAttrId

; 1709 :             stdout_errors = _PyObject_GetAttrId(fout, &PyId_errors);

  002fa	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_errors@?9??builtin_input@@9@9
  002ff	48 8b cb	 mov	 rcx, rbx
  00302	48 03 d7	 add	 rdx, rdi
  00305	4c 8b f0	 mov	 r14, rax
  00308	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0030d	48 8b e8	 mov	 rbp, rax

; 1710 :             if (!stdout_encoding || !stdout_errors)

  00310	4d 85 f6	 test	 r14, r14
  00313	0f 84 47 01 00
	00		 je	 $_readline_errors$22742
  00319	48 85 c0	 test	 rax, rax
  0031c	0f 84 3e 01 00
	00		 je	 $_readline_errors$22742

; 1711 :                 goto _readline_errors;
; 1712 :             stdout_encoding_str = _PyUnicode_AsString(stdout_encoding);

  00322	49 8b ce	 mov	 rcx, r14
  00325	e8 00 00 00 00	 call	 PyUnicode_AsUTF8

; 1713 :             stdout_errors_str = _PyUnicode_AsString(stdout_errors);

  0032a	48 8b cd	 mov	 rcx, rbp
  0032d	4c 8b e0	 mov	 r12, rax
  00330	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  00335	48 8b d8	 mov	 rbx, rax

; 1714 :             if (!stdout_encoding_str || !stdout_errors_str)

  00338	4d 85 e4	 test	 r12, r12
  0033b	0f 84 1f 01 00
	00		 je	 $_readline_errors$22742
  00341	48 85 c0	 test	 rax, rax
  00344	0f 84 16 01 00
	00		 je	 $_readline_errors$22742

; 1715 :                 goto _readline_errors;
; 1716 :             stringpo = PyObject_Str(promptarg);

  0034a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR promptarg$[rsp]
  00352	e8 00 00 00 00	 call	 PyObject_Str
  00357	48 8b f8	 mov	 rdi, rax

; 1717 :             if (stringpo == NULL)

  0035a	48 85 c0	 test	 rax, rax
  0035d	0f 84 fd 00 00
	00		 je	 $_readline_errors$22742

; 1718 :                 goto _readline_errors;
; 1719 :             po = PyUnicode_AsEncodedString(stringpo,
; 1720 :                 stdout_encoding_str, stdout_errors_str);

  00363	4c 8b c3	 mov	 r8, rbx
  00366	49 8b d4	 mov	 rdx, r12
  00369	48 8b c8	 mov	 rcx, rax
  0036c	e8 00 00 00 00	 call	 PyUnicode_AsEncodedString

; 1721 :             Py_CLEAR(stdout_encoding);

  00371	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LBFDNFDG@?4?4?2Python?2bltinmodule?4c?$AA@
  00378	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@GPCIEIOM@builtin_input?$AA@
  0037f	4d 8b ce	 mov	 r9, r14
  00382	41 b8 b9 06 00
	00		 mov	 r8d, 1721		; 000006b9H
  00388	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00390	48 8b f0	 mov	 rsi, rax
  00393	e8 00 00 00 00	 call	 _PyParallel_Guard
  00398	85 c0		 test	 eax, eax
  0039a	75 0b		 jne	 SHORT $LN49@builtin_in
  0039c	49 8b ce	 mov	 rcx, r14
  0039f	4d 8b f5	 mov	 r14, r13
  003a2	e8 00 00 00 00	 call	 _Py_DecRef
$LN49@builtin_in:

; 1722 :             Py_CLEAR(stdout_errors);

  003a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LBFDNFDG@?4?4?2Python?2bltinmodule?4c?$AA@
  003ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@GPCIEIOM@builtin_input?$AA@
  003b5	4c 8b cd	 mov	 r9, rbp
  003b8	41 b8 ba 06 00
	00		 mov	 r8d, 1722		; 000006baH
  003be	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003c6	e8 00 00 00 00	 call	 _PyParallel_Guard
  003cb	85 c0		 test	 eax, eax
  003cd	75 0b		 jne	 SHORT $LN45@builtin_in
  003cf	48 8b cd	 mov	 rcx, rbp
  003d2	49 8b ed	 mov	 rbp, r13
  003d5	e8 00 00 00 00	 call	 _Py_DecRef
$LN45@builtin_in:

; 1723 :             Py_CLEAR(stringpo);

  003da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LBFDNFDG@?4?4?2Python?2bltinmodule?4c?$AA@
  003e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@GPCIEIOM@builtin_input?$AA@
  003e8	4c 8b cf	 mov	 r9, rdi
  003eb	41 b8 bb 06 00
	00		 mov	 r8d, 1723		; 000006bbH
  003f1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003f9	e8 00 00 00 00	 call	 _PyParallel_Guard
  003fe	85 c0		 test	 eax, eax
  00400	75 08		 jne	 SHORT $LN41@builtin_in
  00402	48 8b cf	 mov	 rcx, rdi
  00405	e8 00 00 00 00	 call	 _Py_DecRef
$LN41@builtin_in:

; 1724 :             if (po == NULL)

  0040a	48 85 f6	 test	 rsi, rsi
  0040d	74 51		 je	 SHORT $_readline_errors$22742

; 1725 :                 goto _readline_errors;
; 1726 :             prompt = PyBytes_AsString(po);

  0040f	48 8b ce	 mov	 rcx, rsi
  00412	e8 00 00 00 00	 call	 PyBytes_AsString
  00417	4c 8b e0	 mov	 r12, rax

; 1727 :             if (prompt == NULL)

  0041a	48 85 c0	 test	 rax, rax
  0041d	74 41		 je	 SHORT $_readline_errors$22742
$LN36@builtin_in:

; 1728 :                 goto _readline_errors;
; 1729 :         }
; 1730 :         else {
; 1731 :             po = NULL;
; 1732 :             prompt = "";
; 1733 :         }
; 1734 :         s = PyOS_Readline(stdin, stdout, prompt);

  0041f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00425	48 8b f8	 mov	 rdi, rax
  00428	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0042e	48 8d 57 30	 lea	 rdx, QWORD PTR [rdi+48]
  00432	48 8b c8	 mov	 rcx, rax
  00435	4d 8b c4	 mov	 r8, r12
  00438	e8 00 00 00 00	 call	 PyOS_Readline
  0043d	48 8b d8	 mov	 rbx, rax

; 1735 :         if (s == NULL) {

  00440	48 85 c0	 test	 rax, rax
  00443	75 7c		 jne	 SHORT $LN35@builtin_in

; 1736 :             PyErr_CheckSignals();

  00445	e8 00 00 00 00	 call	 PyErr_CheckSignals

; 1737 :             if (!PyErr_Occurred())

  0044a	e8 00 00 00 00	 call	 PyErr_Occurred
  0044f	48 85 c0	 test	 rax, rax
  00452	75 0c		 jne	 SHORT $_readline_errors$22742

; 1738 :                 PyErr_SetNone(PyExc_KeyboardInterrupt);

  00454	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_KeyboardInterrupt
  0045b	e8 00 00 00 00	 call	 PyErr_SetNone
$_readline_errors$22742:

; 1766 :     _readline_errors:
; 1767 :         Py_XDECREF(stdin_encoding);

  00460	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR stdin_encoding$1$[rsp]
  00468	e8 00 00 00 00	 call	 _Py_DecRef

; 1768 :         Py_XDECREF(stdout_encoding);

  0046d	4d 85 f6	 test	 r14, r14
  00470	74 08		 je	 SHORT $LN19@builtin_in
  00472	49 8b ce	 mov	 rcx, r14
  00475	e8 00 00 00 00	 call	 _Py_DecRef
$LN19@builtin_in:

; 1769 :         Py_XDECREF(stdin_errors);

  0047a	4d 85 ff	 test	 r15, r15
  0047d	74 08		 je	 SHORT $LN15@builtin_in
  0047f	49 8b cf	 mov	 rcx, r15
  00482	e8 00 00 00 00	 call	 _Py_DecRef
$LN15@builtin_in:

; 1770 :         Py_XDECREF(stdout_errors);

  00487	48 85 ed	 test	 rbp, rbp
  0048a	74 08		 je	 SHORT $LN11@builtin_in
  0048c	48 8b cd	 mov	 rcx, rbp
  0048f	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@builtin_in:

; 1771 :         Py_XDECREF(po);

  00494	48 85 f6	 test	 rsi, rsi
  00497	74 08		 je	 SHORT $LN7@builtin_in
  00499	48 8b ce	 mov	 rcx, rsi
  0049c	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@builtin_in:

; 1772 :         return NULL;

  004a1	33 c0		 xor	 eax, eax
$LN92@builtin_in:
  004a3	4c 8b 64 24 48	 mov	 r12, QWORD PTR [rsp+72]
  004a8	48 8b ac 24 80
	00 00 00	 mov	 rbp, QWORD PTR [rsp+128]
  004b0	4c 8b 74 24 40	 mov	 r14, QWORD PTR [rsp+64]

; 1786 : }

  004b5	48 83 c4 50	 add	 rsp, 80			; 00000050H
  004b9	41 5f		 pop	 r15
  004bb	41 5d		 pop	 r13
  004bd	5f		 pop	 rdi
  004be	5e		 pop	 rsi
  004bf	5b		 pop	 rbx
  004c0	c3		 ret	 0
$LN35@builtin_in:

; 1739 :             goto _readline_errors;
; 1740 :         }
; 1741 : 
; 1742 :         len = strlen(s);

  004c1	48 83 c9 ff	 or	 rcx, -1
  004c5	33 c0		 xor	 eax, eax
  004c7	48 8b fb	 mov	 rdi, rbx
  004ca	f2 ae		 repne scasb
  004cc	48 f7 d1	 not	 rcx
  004cf	48 ff c9	 dec	 rcx

; 1743 :         if (len == 0) {

  004d2	75 0e		 jne	 SHORT $LN33@builtin_in

; 1744 :             PyErr_SetNone(PyExc_EOFError);

  004d4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_EOFError
  004db	e8 00 00 00 00	 call	 PyErr_SetNone

; 1745 :             result = NULL;
; 1746 :         }
; 1747 :         else {

  004e0	eb 4b		 jmp	 SHORT $LN30@builtin_in
$LN33@builtin_in:

; 1748 :             if (len > PY_SSIZE_T_MAX) {

  004e2	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  004ec	48 3b c8	 cmp	 rcx, rax
  004ef	76 15		 jbe	 SHORT $LN31@builtin_in

; 1749 :                 PyErr_SetString(PyExc_OverflowError,
; 1750 :                                 "input: input too long");

  004f1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  004f8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@KBDILNFI@input?3?5input?5too?5long?$AA@
  004ff	e8 00 00 00 00	 call	 PyErr_SetString

; 1751 :                 result = NULL;
; 1752 :             }
; 1753 :             else {

  00504	eb 27		 jmp	 SHORT $LN30@builtin_in
$LN31@builtin_in:

; 1754 :                 len--;   /* strip trailing '\n' */

  00506	48 ff c9	 dec	 rcx

; 1755 :                 if (len != 0 && s[len-1] == '\r')

  00509	74 0a		 je	 SHORT $LN29@builtin_in
  0050b	80 7c 19 ff 0d	 cmp	 BYTE PTR [rcx+rbx-1], 13
  00510	75 03		 jne	 SHORT $LN29@builtin_in

; 1756 :                     len--;   /* strip trailing '\r' */

  00512	48 ff c9	 dec	 rcx
$LN29@builtin_in:

; 1757 :                 result = PyUnicode_Decode(s, len, stdin_encoding_str,
; 1758 :                                                   stdin_errors_str);

  00515	4c 8b 4c 24 38	 mov	 r9, QWORD PTR stdin_errors_str$1$[rsp]
  0051a	4c 8b 44 24 30	 mov	 r8, QWORD PTR stdin_encoding_str$1$[rsp]
  0051f	48 8b d1	 mov	 rdx, rcx
  00522	48 8b cb	 mov	 rcx, rbx
  00525	e8 00 00 00 00	 call	 PyUnicode_Decode
  0052a	4c 8b e8	 mov	 r13, rax
$LN30@builtin_in:

; 1759 :             }
; 1760 :         }
; 1761 :         Py_DECREF(stdin_encoding);

  0052d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR stdin_encoding$1$[rsp]
  00535	e8 00 00 00 00	 call	 _Py_DecRef

; 1762 :         Py_DECREF(stdin_errors);

  0053a	49 8b cf	 mov	 rcx, r15
  0053d	e8 00 00 00 00	 call	 _Py_DecRef

; 1763 :         Py_XDECREF(po);

  00542	48 85 f6	 test	 rsi, rsi
  00545	74 08		 je	 SHORT $LN27@builtin_in
  00547	48 8b ce	 mov	 rcx, rsi
  0054a	e8 00 00 00 00	 call	 _Py_DecRef
$LN27@builtin_in:

; 1764 :         PyMem_FREE(s);

  0054f	e8 00 00 00 00	 call	 _Py_PXCTX
  00554	48 8b cb	 mov	 rcx, rbx
  00557	85 c0		 test	 eax, eax
  00559	74 0d		 je	 SHORT $LN86@builtin_in
  0055b	e8 00 00 00 00	 call	 _PxMem_Free

; 1765 :         return result;

  00560	49 8b c5	 mov	 rax, r13
  00563	e9 3b ff ff ff	 jmp	 $LN92@builtin_in
$LN86@builtin_in:

; 1764 :         PyMem_FREE(s);

  00568	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 1765 :         return result;

  0056e	49 8b c5	 mov	 rax, r13
  00571	e9 2d ff ff ff	 jmp	 $LN92@builtin_in
$LN2@builtin_in:

; 1783 :     else
; 1784 :         Py_DECREF(tmp);

  00576	48 8b c8	 mov	 rcx, rax
  00579	e8 00 00 00 00	 call	 _Py_DecRef

; 1785 :     return PyFile_GetLine(fin, -1);

  0057e	83 ca ff	 or	 edx, -1
  00581	49 8b cf	 mov	 rcx, r15
  00584	e8 00 00 00 00	 call	 PyFile_GetLine
  00589	e9 15 ff ff ff	 jmp	 $LN92@builtin_in
$LN73@builtin_in:

; 1636 :         PyErr_SetString(PyExc_RuntimeError,
; 1637 :                         "input(): lost sys.stderr");

  0058e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00595	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NBIALAPJ@input?$CI?$CJ?3?5lost?5sys?4stderr?$AA@
  0059c	e8 00 00 00 00	 call	 PyErr_SetString

; 1638 :         return NULL;

  005a1	33 c0		 xor	 eax, eax

; 1786 : }

  005a3	48 83 c4 50	 add	 rsp, 80			; 00000050H
  005a7	41 5f		 pop	 r15
  005a9	41 5d		 pop	 r13
  005ab	5f		 pop	 rdi
  005ac	5e		 pop	 rsi
  005ad	5b		 pop	 rbx
  005ae	c3		 ret	 0
$LN75@builtin_in:

; 1631 :         PyErr_SetString(PyExc_RuntimeError,
; 1632 :                         "input(): lost sys.stdout");

  005af	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  005b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@ONCIOBJO@input?$CI?$CJ?3?5lost?5sys?4stdout?$AA@
  005bd	e8 00 00 00 00	 call	 PyErr_SetString
$LN93@builtin_in:

; 1633 :         return NULL;

  005c2	33 c0		 xor	 eax, eax

; 1786 : }

  005c4	48 83 c4 50	 add	 rsp, 80			; 00000050H
  005c8	41 5f		 pop	 r15
  005ca	41 5d		 pop	 r13
  005cc	5f		 pop	 rdi
  005cd	5e		 pop	 rsi
  005ce	5b		 pop	 rbx
  005cf	c3		 ret	 0
$LN77@builtin_in:

; 1626 :         PyErr_SetString(PyExc_RuntimeError,
; 1627 :                         "input(): lost sys.stdin");

  005d0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  005d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@GKLBLMIN@input?$CI?$CJ?3?5lost?5sys?4stdin?$AA@
  005de	e8 00 00 00 00	 call	 PyErr_SetString

; 1628 :         return NULL;

  005e3	33 c0		 xor	 eax, eax

; 1786 : }

  005e5	48 83 c4 50	 add	 rsp, 80			; 00000050H
  005e9	41 5f		 pop	 r15
  005eb	41 5d		 pop	 r13
  005ed	5f		 pop	 rdi
  005ee	5e		 pop	 rsi
  005ef	5b		 pop	 rbx
  005f0	c3		 ret	 0
builtin_input ENDP
_TEXT	ENDS
EXTRN	PyObject_Repr:PROC
; Function compile flags: /Ogtpy
;	COMDAT builtin_repr
_TEXT	SEGMENT
self$ = 8
v$ = 16
builtin_repr PROC					; COMDAT

; 1800 :     return PyObject_Repr(v);

  00000	48 8b ca	 mov	 rcx, rdx

; 1801 : }

  00003	e9 00 00 00 00	 jmp	 PyObject_Repr
builtin_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_02MJJLPNK@OO?$AA@				; `string'
PUBLIC	??_C@_01MJMHLOMK@O?$AA@				; `string'
PUBLIC	??_C@_0CM@HFCEEHCP@type?5?$CF?4100s?5doesn?8t?5define?5__rou@ ; `string'
PUBLIC	??_C@_09PJGAHDBG@__round__?$AA@			; `string'
PUBLIC	??_C@_09NLEMIFEJ@O?$HMO?3round?$AA@		; `string'
EXTRN	PyObject_CallFunction:PROC
EXTRN	_PyType_Lookup:PROC
EXTRN	PyUnicode_InternFromString:PROC
EXTRN	PyType_Ready:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_round DD imagerel builtin_round
	DD	imagerel builtin_round+245
	DD	imagerel $unwind$builtin_round
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_round DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_02MJJLPNK@OO?$AA@
CONST	SEGMENT
??_C@_02MJJLPNK@OO?$AA@ DB 'OO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01MJMHLOMK@O?$AA@
CONST	SEGMENT
??_C@_01MJMHLOMK@O?$AA@ DB 'O', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@HFCEEHCP@type?5?$CF?4100s?5doesn?8t?5define?5__rou@
CONST	SEGMENT
??_C@_0CM@HFCEEHCP@type?5?$CF?4100s?5doesn?8t?5define?5__rou@ DB 'type %.'
	DB	'100s doesn''t define __round__ method', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PJGAHDBG@__round__?$AA@
CONST	SEGMENT
??_C@_09PJGAHDBG@__round__?$AA@ DB '__round__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NLEMIFEJ@O?$HMO?3round?$AA@
CONST	SEGMENT
??_C@_09NLEMIFEJ@O?$HMO?3round?$AA@ DB 'O|O:round', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT builtin_round
_TEXT	SEGMENT
ndigits$ = 48
self$ = 80
args$ = 88
kwds$ = 96
number$ = 104
builtin_round PROC					; COMDAT

; 1812 : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00004	49 8b c0	 mov	 rax, r8
  00007	4c 8b d2	 mov	 r10, rdx

; 1813 :     static PyObject *round_str = NULL;
; 1814 :     PyObject *ndigits = NULL;
; 1815 :     static char *kwlist[] = {"number", "ndigits", 0};
; 1816 :     PyObject *number, *round;
; 1817 : 
; 1818 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|O:round",
; 1819 :                                      kwlist, &number, &ndigits))

  0000a	48 8d 4c 24 30	 lea	 rcx, QWORD PTR ndigits$[rsp]
  0000f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00014	48 8d 4c 24 68	 lea	 rcx, QWORD PTR number$[rsp]
  00019	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??builtin_round@@9@9
  00020	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00025	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09NLEMIFEJ@O?$HMO?3round?$AA@
  0002c	48 8b d0	 mov	 rdx, rax
  0002f	49 8b ca	 mov	 rcx, r10
  00032	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR ndigits$[rsp], 0
  0003b	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00040	85 c0		 test	 eax, eax

; 1820 :         return NULL;

  00042	74 76		 je	 SHORT $LN13@builtin_ro

; 1821 : 
; 1822 :     if (Py_TYPE(number)->tp_dict == NULL) {

  00044	48 8b 44 24 68	 mov	 rax, QWORD PTR number$[rsp]
  00049	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0004d	48 83 b9 60 01
	00 00 00	 cmp	 QWORD PTR [rcx+352], 0
  00055	75 09		 jne	 SHORT $LN11@builtin_ro

; 1823 :         if (PyType_Ready(Py_TYPE(number)) < 0)

  00057	e8 00 00 00 00	 call	 PyType_Ready
  0005c	85 c0		 test	 eax, eax

; 1824 :             return NULL;

  0005e	78 5a		 js	 SHORT $LN13@builtin_ro
$LN11@builtin_ro:

; 1825 :     }
; 1826 : 
; 1827 :     if (round_str == NULL) {

  00060	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?round_str@?1??builtin_round@@9@9
  00067	48 85 c0	 test	 rax, rax
  0006a	75 18		 jne	 SHORT $LN12@builtin_ro

; 1828 :         round_str = PyUnicode_InternFromString("__round__");

  0006c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09PJGAHDBG@__round__?$AA@
  00073	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00078	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?round_str@?1??builtin_round@@9@9, rax

; 1829 :         if (round_str == NULL)

  0007f	48 85 c0	 test	 rax, rax

; 1830 :             return NULL;

  00082	74 36		 je	 SHORT $LN13@builtin_ro
$LN12@builtin_ro:

; 1831 :     }
; 1832 : 
; 1833 :     round = _PyType_Lookup(Py_TYPE(number), round_str);

  00084	48 8b 4c 24 68	 mov	 rcx, QWORD PTR number$[rsp]
  00089	48 8b d0	 mov	 rdx, rax
  0008c	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  00090	e8 00 00 00 00	 call	 _PyType_Lookup

; 1834 :     if (round == NULL) {

  00095	48 85 c0	 test	 rax, rax
  00098	75 27		 jne	 SHORT $LN3@builtin_ro

; 1835 :         PyErr_Format(PyExc_TypeError,
; 1836 :                      "type %.100s doesn't define __round__ method",
; 1837 :                      Py_TYPE(number)->tp_name);

  0009a	48 8b 44 24 68	 mov	 rax, QWORD PTR number$[rsp]
  0009f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@HFCEEHCP@type?5?$CF?4100s?5doesn?8t?5define?5__rou@
  000ad	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  000b1	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  000b5	e8 00 00 00 00	 call	 PyErr_Format
$LN13@builtin_ro:

; 1838 :         return NULL;

  000ba	33 c0		 xor	 eax, eax

; 1845 : }

  000bc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000c0	c3		 ret	 0
$LN3@builtin_ro:

; 1839 :     }
; 1840 : 
; 1841 :     if (ndigits == NULL)

  000c1	4c 8b 4c 24 30	 mov	 r9, QWORD PTR ndigits$[rsp]

; 1842 :         return PyObject_CallFunction(round, "O", number);

  000c6	4c 8b 44 24 68	 mov	 r8, QWORD PTR number$[rsp]
  000cb	48 8b c8	 mov	 rcx, rax
  000ce	4d 85 c9	 test	 r9, r9
  000d1	75 11		 jne	 SHORT $LN2@builtin_ro
  000d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01MJMHLOMK@O?$AA@
  000da	e8 00 00 00 00	 call	 PyObject_CallFunction

; 1845 : }

  000df	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e3	c3		 ret	 0
$LN2@builtin_ro:

; 1843 :     else
; 1844 :         return PyObject_CallFunction(round, "OO", number, ndigits);

  000e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02MJJLPNK@OO?$AA@
  000eb	e8 00 00 00 00	 call	 PyObject_CallFunction

; 1845 : }

  000f0	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000f4	c3		 ret	 0
builtin_round ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@LFHJKBHH@O?$HMOi?3sorted?$AA@		; `string'
EXTRN	PySequence_List:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_sorted DD imagerel builtin_sorted
	DD	imagerel builtin_sorted+97
	DD	imagerel $unwind$builtin_sorted
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$builtin_sorted DD imagerel builtin_sorted+97
	DD	imagerel builtin_sorted+131
	DD	imagerel $chain$0$builtin_sorted
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$builtin_sorted DD imagerel builtin_sorted+131
	DD	imagerel builtin_sorted+303
	DD	imagerel $chain$3$builtin_sorted
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$builtin_sorted DD 042021H
	DD	0d7420H
	DD	0c3400H
	DD	imagerel builtin_sorted
	DD	imagerel builtin_sorted+97
	DD	imagerel $unwind$builtin_sorted
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$builtin_sorted DD 020521H
	DD	0c3405H
	DD	imagerel builtin_sorted
	DD	imagerel builtin_sorted+97
	DD	imagerel $unwind$builtin_sorted
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_sorted DD 040c01H
	DD	0e540cH
	DD	06008920cH
xdata	ENDS
;	COMDAT ??_C@_0M@LFHJKBHH@O?$HMOi?3sorted?$AA@
CONST	SEGMENT
??_C@_0M@LFHJKBHH@O?$HMOi?3sorted?$AA@ DB 'O|Oi:sorted', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT builtin_sorted
_TEXT	SEGMENT
seq$ = 72
self$ = 96
args$ = 104
kwds$ = 112
builtin_sorted PROC					; COMDAT

; 1857 : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	49 89 6b 18	 mov	 QWORD PTR [r11+24], rbp
  00007	56		 push	 rsi
  00008	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 1858 :     PyObject *newlist, *v, *seq, *keyfunc=NULL, *newargs;
; 1859 :     PyObject *callable;
; 1860 :     static char *kwlist[] = {"iterable", "key", "reverse", 0};
; 1861 :     int reverse;
; 1862 :     _Py_IDENTIFIER(sort);
; 1863 : 
; 1864 :     /* args 1-3 should match listsort in Objects/listobject.c */
; 1865 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|Oi:sorted",
; 1866 :         kwlist, &seq, &keyfunc, &reverse))

  0000c	49 8d 43 20	 lea	 rax, QWORD PTR [r11+32]
  00010	49 8b e8	 mov	 rbp, r8
  00013	48 8b f2	 mov	 rsi, rdx
  00016	49 89 43 d8	 mov	 QWORD PTR [r11-40], rax
  0001a	49 8d 43 e8	 lea	 rax, QWORD PTR [r11-24]
  0001e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??builtin_sorted@@9@9
  00025	49 89 43 d0	 mov	 QWORD PTR [r11-48], rax
  00029	49 8d 43 f0	 lea	 rax, QWORD PTR [r11-16]
  0002d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@LFHJKBHH@O?$HMOi?3sorted?$AA@
  00034	48 8b d5	 mov	 rdx, rbp
  00037	48 8b ce	 mov	 rcx, rsi
  0003a	49 c7 43 e8 00
	00 00 00	 mov	 QWORD PTR [r11-24], 0
  00042	49 89 43 c8	 mov	 QWORD PTR [r11-56], rax
  00046	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  0004b	85 c0		 test	 eax, eax
  0004d	75 0d		 jne	 SHORT $LN5@builtin_so

; 1867 :         return NULL;

  0004f	33 c0		 xor	 eax, eax

; 1895 : }

  00051	48 8b 6c 24 70	 mov	 rbp, QWORD PTR [rsp+112]
  00056	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0005a	5e		 pop	 rsi
  0005b	c3		 ret	 0
$LN5@builtin_so:

; 1868 : 
; 1869 :     newlist = PySequence_List(seq);

  0005c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR seq$[rsp]
  00061	48 89 5c 24 60	 mov	 QWORD PTR [rsp+96], rbx
  00066	e8 00 00 00 00	 call	 PySequence_List
  0006b	48 8b d8	 mov	 rbx, rax

; 1870 :     if (newlist == NULL)

  0006e	48 85 c0	 test	 rax, rax
  00071	75 10		 jne	 SHORT $LN4@builtin_so
  00073	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]

; 1895 : }

  00078	48 8b 6c 24 70	 mov	 rbp, QWORD PTR [rsp+112]
  0007d	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00081	5e		 pop	 rsi
  00082	c3		 ret	 0
$LN4@builtin_so:

; 1871 :         return NULL;
; 1872 : 
; 1873 :     callable = _PyObject_GetAttrId(newlist, &PyId_sort);

  00083	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00089	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00092	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_sort@?1??builtin_sorted@@9@9
  00097	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  0009b	48 8b cb	 mov	 rcx, rbx
  0009e	48 89 7c 24 68	 mov	 QWORD PTR [rsp+104], rdi
  000a3	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  000a8	48 8b f8	 mov	 rdi, rax

; 1874 :     if (callable == NULL) {

  000ab	48 85 c0	 test	 rax, rax

; 1875 :         Py_DECREF(newlist);
; 1876 :         return NULL;

  000ae	74 53		 je	 SHORT $LN10@builtin_so

; 1877 :     }
; 1878 : 
; 1879 :     newargs = PyTuple_GetSlice(args, 1, 4);

  000b0	ba 01 00 00 00	 mov	 edx, 1
  000b5	48 8b ce	 mov	 rcx, rsi
  000b8	44 8d 42 03	 lea	 r8d, QWORD PTR [rdx+3]
  000bc	e8 00 00 00 00	 call	 PyTuple_GetSlice
  000c1	48 8b f0	 mov	 rsi, rax

; 1880 :     if (newargs == NULL) {

  000c4	48 85 c0	 test	 rax, rax
  000c7	75 14		 jne	 SHORT $LN2@builtin_so

; 1881 :         Py_DECREF(newlist);

  000c9	48 8b cb	 mov	 rcx, rbx
  000cc	e8 00 00 00 00	 call	 _Py_DecRef

; 1882 :         Py_DECREF(callable);

  000d1	48 8b cf	 mov	 rcx, rdi
  000d4	e8 00 00 00 00	 call	 _Py_DecRef

; 1883 :         return NULL;

  000d9	33 c0		 xor	 eax, eax
  000db	eb 3d		 jmp	 SHORT $LN9@builtin_so
$LN2@builtin_so:

; 1884 :     }
; 1885 : 
; 1886 :     v = PyObject_Call(callable, newargs, kwds);

  000dd	4c 8b c5	 mov	 r8, rbp
  000e0	48 8b d0	 mov	 rdx, rax
  000e3	48 8b cf	 mov	 rcx, rdi
  000e6	e8 00 00 00 00	 call	 PyObject_Call

; 1887 :     Py_DECREF(newargs);

  000eb	48 8b ce	 mov	 rcx, rsi
  000ee	48 8b e8	 mov	 rbp, rax
  000f1	e8 00 00 00 00	 call	 _Py_DecRef

; 1888 :     Py_DECREF(callable);

  000f6	48 8b cf	 mov	 rcx, rdi
  000f9	e8 00 00 00 00	 call	 _Py_DecRef

; 1889 :     if (v == NULL) {

  000fe	48 85 ed	 test	 rbp, rbp
  00101	75 0c		 jne	 SHORT $LN1@builtin_so
$LN10@builtin_so:

; 1890 :         Py_DECREF(newlist);

  00103	48 8b cb	 mov	 rcx, rbx
  00106	e8 00 00 00 00	 call	 _Py_DecRef

; 1891 :         return NULL;

  0010b	33 c0		 xor	 eax, eax
  0010d	eb 0b		 jmp	 SHORT $LN9@builtin_so
$LN1@builtin_so:

; 1892 :     }
; 1893 :     Py_DECREF(v);

  0010f	48 8b cd	 mov	 rcx, rbp
  00112	e8 00 00 00 00	 call	 _Py_DecRef

; 1894 :     return newlist;

  00117	48 8b c3	 mov	 rax, rbx
$LN9@builtin_so:

; 1895 : }

  0011a	48 8b 7c 24 68	 mov	 rdi, QWORD PTR [rsp+104]
  0011f	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00124	48 8b 6c 24 70	 mov	 rbp, QWORD PTR [rsp+112]
  00129	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0012d	5e		 pop	 rsi
  0012e	c3		 ret	 0
builtin_sorted ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CN@EELICGGI@vars?$CI?$CJ?5argument?5must?5have?5__dict@ ; `string'
PUBLIC	??_C@_0BE@GPFCMNBD@vars?$CI?$CJ?3?5no?5locals?$CB?$DP?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_vars DD imagerel builtin_vars
	DD	imagerel builtin_vars+66
	DD	imagerel $unwind$builtin_vars
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$builtin_vars DD imagerel builtin_vars+66
	DD	imagerel builtin_vars+131
	DD	imagerel $chain$0$builtin_vars
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$builtin_vars DD imagerel builtin_vars+131
	DD	imagerel builtin_vars+152
	DD	imagerel $chain$2$builtin_vars
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$builtin_vars DD imagerel builtin_vars+152
	DD	imagerel builtin_vars+221
	DD	imagerel $chain$4$builtin_vars
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$builtin_vars DD 020021H
	DD	063400H
	DD	imagerel builtin_vars
	DD	imagerel builtin_vars+66
	DD	imagerel $unwind$builtin_vars
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$builtin_vars DD 020021H
	DD	063400H
	DD	imagerel builtin_vars
	DD	imagerel builtin_vars+66
	DD	imagerel $unwind$builtin_vars
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$builtin_vars DD 020521H
	DD	063405H
	DD	imagerel builtin_vars
	DD	imagerel builtin_vars+66
	DD	imagerel $unwind$builtin_vars
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_vars DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0CN@EELICGGI@vars?$CI?$CJ?5argument?5must?5have?5__dict@
CONST	SEGMENT
??_C@_0CN@EELICGGI@vars?$CI?$CJ?5argument?5must?5have?5__dict@ DB 'vars()'
	DB	' argument must have __dict__ attribute', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GPFCMNBD@vars?$CI?$CJ?3?5no?5locals?$CB?$DP?$AA@
CONST	SEGMENT
??_C@_0BE@GPFCMNBD@vars?$CI?$CJ?3?5no?5locals?$CB?$DP?$AA@ DB 'vars(): no'
	DB	' locals!?', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT builtin_vars
_TEXT	SEGMENT
self$ = 64
args$ = 72
v$ = 80
builtin_vars PROC					; COMDAT

; 1902 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx

; 1903 :     PyObject *v = NULL;
; 1904 :     PyObject *d;
; 1905 : 
; 1906 :     if (!PyArg_UnpackTuple(args, "vars", 0, 1, &v))

  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR v$[rsp]
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04JPLCBLOA@vars?$AA@
  00013	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00018	41 b9 01 00 00
	00		 mov	 r9d, 1
  0001e	45 33 c0	 xor	 r8d, r8d
  00021	48 8b c8	 mov	 rcx, rax
  00024	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR v$[rsp], 0
  0002d	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00032	85 c0		 test	 eax, eax
  00034	75 07		 jne	 SHORT $LN7@builtin_va

; 1907 :         return NULL;

  00036	33 c0		 xor	 eax, eax

; 1928 : }

  00038	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003c	c3		 ret	 0
$LN7@builtin_va:

; 1908 :     if (v == NULL) {

  0003d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR v$[rsp]
  00042	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00047	48 85 c9	 test	 rcx, rcx
  0004a	75 4c		 jne	 SHORT $LN6@builtin_va

; 1909 :         d = PyEval_GetLocals();

  0004c	e8 00 00 00 00	 call	 PyEval_GetLocals
  00051	48 8b d8	 mov	 rbx, rax

; 1910 :         if (d == NULL) {

  00054	48 85 c0	 test	 rax, rax
  00057	75 2a		 jne	 SHORT $LN5@builtin_va

; 1911 :             if (!PyErr_Occurred())

  00059	e8 00 00 00 00	 call	 PyErr_Occurred
  0005e	48 85 c0	 test	 rax, rax
  00061	75 13		 jne	 SHORT $LN1@builtin_va

; 1912 :                 PyErr_SetString(PyExc_SystemError,
; 1913 :                                 "vars(): no locals!?");

  00063	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@GPFCMNBD@vars?$CI?$CJ?3?5no?5locals?$CB?$DP?$AA@
  00071	e8 00 00 00 00	 call	 PyErr_SetString
$LN1@builtin_va:

; 1925 :         }
; 1926 :     }
; 1927 :     return d;

  00076	48 8b c3	 mov	 rax, rbx
  00079	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1928 : }

  0007e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00082	c3		 ret	 0
$LN5@builtin_va:

; 1914 :         }
; 1915 :         else
; 1916 :             Py_INCREF(d);

  00083	48 8b c8	 mov	 rcx, rax
  00086	e8 00 00 00 00	 call	 _Py_IncRef

; 1925 :         }
; 1926 :     }
; 1927 :     return d;

  0008b	48 8b c3	 mov	 rax, rbx
  0008e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1928 : }

  00093	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00097	c3		 ret	 0
$LN6@builtin_va:

; 1917 :     }
; 1918 :     else {
; 1919 :         _Py_IDENTIFIER(__dict__);
; 1920 :         d = _PyObject_GetAttrId(v, &PyId___dict__);

  00098	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  0009f	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  000a8	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId___dict__@?4??builtin_vars@@9@9
  000ad	4a 03 14 c0	 add	 rdx, QWORD PTR [rax+r8*8]
  000b1	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  000b6	48 8b d8	 mov	 rbx, rax

; 1921 :         if (d == NULL) {

  000b9	48 85 c0	 test	 rax, rax
  000bc	75 b8		 jne	 SHORT $LN1@builtin_va

; 1922 :             PyErr_SetString(PyExc_TypeError,
; 1923 :                 "vars() argument must have __dict__ attribute");

  000be	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000c5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@EELICGGI@vars?$CI?$CJ?5argument?5must?5have?5__dict@
  000cc	e8 00 00 00 00	 call	 PyErr_SetString
  000d1	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1924 :             return NULL;

  000d6	33 c0		 xor	 eax, eax

; 1928 : }

  000d8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000dc	c3		 ret	 0
builtin_vars ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DG@IAOOBLDH@sum?$CI?$CJ?5can?8t?5sum?5bytearray?5?$FLuse?5b@ ; `string'
PUBLIC	??_C@_0DC@BKCBGKCB@sum?$CI?$CJ?5can?8t?5sum?5bytes?5?$FLuse?5b?8?8?4j@ ; `string'
PUBLIC	??_C@_0DD@LBCGIKCI@sum?$CI?$CJ?5can?8t?5sum?5strings?5?$FLuse?5?8?8?4@ ; `string'
EXTRN	PyFloat_FromDouble:PROC
EXTRN	PyNumber_Add:PROC
EXTRN	PyFloat_Type:BYTE
EXTRN	PyLong_AsLongAndOverflow:PROC
EXTRN	PyLong_Type:BYTE
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_sum DD imagerel builtin_sum
	DD	imagerel builtin_sum+80
	DD	imagerel $unwind$builtin_sum
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$builtin_sum DD imagerel builtin_sum+80
	DD	imagerel builtin_sum+117
	DD	imagerel $chain$0$builtin_sum
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$builtin_sum DD imagerel builtin_sum+117
	DD	imagerel builtin_sum+308
	DD	imagerel $chain$3$builtin_sum
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$builtin_sum DD imagerel builtin_sum+308
	DD	imagerel builtin_sum+477
	DD	imagerel $chain$6$builtin_sum
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$builtin_sum DD imagerel builtin_sum+477
	DD	imagerel builtin_sum+555
	DD	imagerel $chain$7$builtin_sum
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$builtin_sum DD imagerel builtin_sum+555
	DD	imagerel builtin_sum+685
	DD	imagerel $chain$8$builtin_sum
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$builtin_sum DD imagerel builtin_sum+685
	DD	imagerel builtin_sum+865
	DD	imagerel $chain$9$builtin_sum
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$10$builtin_sum DD imagerel builtin_sum+865
	DD	imagerel builtin_sum+880
	DD	imagerel $chain$10$builtin_sum
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$11$builtin_sum DD imagerel builtin_sum+880
	DD	imagerel builtin_sum+904
	DD	imagerel $chain$11$builtin_sum
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$13$builtin_sum DD imagerel builtin_sum+904
	DD	imagerel builtin_sum+1005
	DD	imagerel $chain$13$builtin_sum
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$14$builtin_sum DD imagerel builtin_sum+1005
	DD	imagerel builtin_sum+1039
	DD	imagerel $chain$14$builtin_sum
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$14$builtin_sum DD 040021H
	DD	0116400H
	DD	0103400H
	DD	imagerel builtin_sum
	DD	imagerel builtin_sum+80
	DD	imagerel $unwind$builtin_sum
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$13$builtin_sum DD 0c0021H
	DD	046800H
	DD	0ad400H
	DD	0bc400H
	DD	0c7400H
	DD	0116400H
	DD	0103400H
	DD	imagerel builtin_sum
	DD	imagerel builtin_sum+80
	DD	imagerel $unwind$builtin_sum
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$11$builtin_sum DD 021H
	DD	imagerel builtin_sum+117
	DD	imagerel builtin_sum+308
	DD	imagerel $chain$3$builtin_sum
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$10$builtin_sum DD 021H
	DD	imagerel builtin_sum+308
	DD	imagerel builtin_sum+477
	DD	imagerel $chain$6$builtin_sum
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$builtin_sum DD 020021H
	DD	046800H
	DD	imagerel builtin_sum+308
	DD	imagerel builtin_sum+477
	DD	imagerel $chain$6$builtin_sum
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$builtin_sum DD 021H
	DD	imagerel builtin_sum+308
	DD	imagerel builtin_sum+477
	DD	imagerel $chain$6$builtin_sum
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$builtin_sum DD 020521H
	DD	046805H
	DD	imagerel builtin_sum+308
	DD	imagerel builtin_sum+477
	DD	imagerel $chain$6$builtin_sum
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$builtin_sum DD 060f21H
	DD	0ad40fH
	DD	0bc40aH
	DD	0c7405H
	DD	imagerel builtin_sum+117
	DD	imagerel builtin_sum+308
	DD	imagerel $chain$3$builtin_sum
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$builtin_sum DD 040c21H
	DD	010340cH
	DD	0116400H
	DD	imagerel builtin_sum
	DD	imagerel builtin_sum+80
	DD	imagerel $unwind$builtin_sum
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$builtin_sum DD 020821H
	DD	0116408H
	DD	imagerel builtin_sum
	DD	imagerel builtin_sum+80
	DD	imagerel $unwind$builtin_sum
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_sum DD 030b01H
	DD	0e004c20bH
	DD	05002H
xdata	ENDS
;	COMDAT ??_C@_0DG@IAOOBLDH@sum?$CI?$CJ?5can?8t?5sum?5bytearray?5?$FLuse?5b@
CONST	SEGMENT
??_C@_0DG@IAOOBLDH@sum?$CI?$CJ?5can?8t?5sum?5bytearray?5?$FLuse?5b@ DB 's'
	DB	'um() can''t sum bytearray [use b''''.join(seq) instead]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@BKCBGKCB@sum?$CI?$CJ?5can?8t?5sum?5bytes?5?$FLuse?5b?8?8?4j@
CONST	SEGMENT
??_C@_0DC@BKCBGKCB@sum?$CI?$CJ?5can?8t?5sum?5bytes?5?$FLuse?5b?8?8?4j@ DB 's'
	DB	'um() can''t sum bytes [use b''''.join(seq) instead]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@LBCGIKCI@sum?$CI?$CJ?5can?8t?5sum?5strings?5?$FLuse?5?8?8?4@
CONST	SEGMENT
??_C@_0DD@LBCGIKCI@sum?$CI?$CJ?5can?8t?5sum?5strings?5?$FLuse?5?8?8?4@ DB 's'
	DB	'um() can''t sum strings [use ''''.join(seq) instead]', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT builtin_sum
_TEXT	SEGMENT
seq$ = 48
self$ = 128
args$ = 136
overflow$23073 = 144
overflow$23019 = 144
result$ = 152
builtin_sum PROC					; COMDAT

; 1938 : {

  00000	40 55		 push	 rbp
  00002	41 56		 push	 r14
  00004	48 8b ec	 mov	 rbp, rsp
  00007	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1939 :     PyObject *seq;
; 1940 :     PyObject *result = NULL;

  0000b	45 33 f6	 xor	 r14d, r14d
  0000e	48 8b c2	 mov	 rax, rdx

; 1941 :     PyObject *temp, *item, *iter;
; 1942 : 
; 1943 :     if (!PyArg_UnpackTuple(args, "sum", 1, 2, &seq, &result))

  00011	48 8d 4d 30	 lea	 rcx, QWORD PTR result$[rbp-104]
  00015	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0001a	48 8d 4d c8	 lea	 rcx, QWORD PTR seq$[rbp-104]
  0001e	45 8d 4e 02	 lea	 r9d, QWORD PTR [r14+2]
  00022	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00027	45 8d 46 01	 lea	 r8d, QWORD PTR [r14+1]
  0002b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03CFFIJAMA@sum?$AA@
  00032	48 8b c8	 mov	 rcx, rax
  00035	4c 89 75 30	 mov	 QWORD PTR result$[rbp-104], r14
  00039	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003e	85 c0		 test	 eax, eax
  00040	75 0a		 jne	 SHORT $LN34@builtin_su

; 1944 :         return NULL;

  00042	33 c0		 xor	 eax, eax

; 2100 : }

  00044	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00048	41 5e		 pop	 r14
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
$LN34@builtin_su:

; 1945 : 
; 1946 :     iter = PyObject_GetIter(seq);

  0004c	48 8b 4d c8	 mov	 rcx, QWORD PTR seq$[rbp-104]
  00050	48 89 b4 24 88
	00 00 00	 mov	 QWORD PTR [rsp+136], rsi
  00058	e8 00 00 00 00	 call	 PyObject_GetIter
  0005d	48 8b f0	 mov	 rsi, rax

; 1947 :     if (iter == NULL)

  00060	48 85 c0	 test	 rax, rax
  00063	75 10		 jne	 SHORT $LN33@builtin_su
  00065	48 8b b4 24 88
	00 00 00	 mov	 rsi, QWORD PTR [rsp+136]

; 2100 : }

  0006d	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00071	41 5e		 pop	 r14
  00073	5d		 pop	 rbp
  00074	c3		 ret	 0
$LN33@builtin_su:

; 1948 :         return NULL;
; 1949 : 
; 1950 :     if (result == NULL) {

  00075	48 8b 45 30	 mov	 rax, QWORD PTR result$[rbp-104]
  00079	48 89 9c 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rbx
  00081	48 85 c0	 test	 rax, rax
  00084	75 26		 jne	 SHORT $LN32@builtin_su

; 1951 :         result = PyLong_FromLong(0);

  00086	33 c9		 xor	 ecx, ecx
  00088	e8 00 00 00 00	 call	 PyLong_FromLong
  0008d	48 8b d8	 mov	 rbx, rax
  00090	48 89 45 30	 mov	 QWORD PTR result$[rbp-104], rax

; 1952 :         if (result == NULL) {

  00094	48 85 c0	 test	 rax, rax
  00097	0f 85 97 00 00
	00		 jne	 $LN30@builtin_su

; 1953 :             Py_DECREF(iter);

  0009d	48 8b ce	 mov	 rcx, rsi
  000a0	e8 00 00 00 00	 call	 _Py_DecRef

; 1954 :             return NULL;

  000a5	33 c0		 xor	 eax, eax
  000a7	e9 c4 02 00 00	 jmp	 $LN66@builtin_su
$LN32@builtin_su:

; 1955 :         }
; 1956 :     } else {
; 1957 :         /* reject string values for 'start' parameter */
; 1958 :         if (PyUnicode_Check(result)) {

  000ac	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  000b0	41 8b 88 00 01
	00 00		 mov	 ecx, DWORD PTR [r8+256]
  000b7	0f ba e1 1c	 bt	 ecx, 28
  000bb	73 22		 jae	 SHORT $LN29@builtin_su

; 1959 :             PyErr_SetString(PyExc_TypeError,
; 1960 :                 "sum() can't sum strings [use ''.join(seq) instead]");

  000bd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@LBCGIKCI@sum?$CI?$CJ?5can?8t?5sum?5strings?5?$FLuse?5?8?8?4@
  000cb	e8 00 00 00 00	 call	 PyErr_SetString

; 1961 :             Py_DECREF(iter);

  000d0	48 8b ce	 mov	 rcx, rsi
  000d3	e8 00 00 00 00	 call	 _Py_DecRef

; 1962 :             return NULL;

  000d8	33 c0		 xor	 eax, eax
  000da	e9 91 02 00 00	 jmp	 $LN66@builtin_su
$LN29@builtin_su:

; 1963 :         }
; 1964 :         if (PyBytes_Check(result)) {

  000df	0f ba e1 1b	 bt	 ecx, 27
  000e3	73 22		 jae	 SHORT $LN28@builtin_su

; 1965 :             PyErr_SetString(PyExc_TypeError,
; 1966 :                 "sum() can't sum bytes [use b''.join(seq) instead]");

  000e5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000ec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@BKCBGKCB@sum?$CI?$CJ?5can?8t?5sum?5bytes?5?$FLuse?5b?8?8?4j@
  000f3	e8 00 00 00 00	 call	 PyErr_SetString

; 1967 :             Py_DECREF(iter);

  000f8	48 8b ce	 mov	 rcx, rsi
  000fb	e8 00 00 00 00	 call	 _Py_DecRef

; 1968 :             return NULL;

  00100	33 c0		 xor	 eax, eax
  00102	e9 69 02 00 00	 jmp	 $LN66@builtin_su
$LN28@builtin_su:

; 1969 :         }
; 1970 :         if (PyByteArray_Check(result)) {

  00107	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyByteArray_Type
  0010e	4c 3b c2	 cmp	 r8, rdx
  00111	0f 84 d6 02 00
	00		 je	 $LN26@builtin_su
  00117	49 8b c8	 mov	 rcx, r8
  0011a	e8 00 00 00 00	 call	 PyType_IsSubtype
  0011f	85 c0		 test	 eax, eax
  00121	0f 85 c6 02 00
	00		 jne	 $LN26@builtin_su

; 1975 :         }
; 1976 : 
; 1977 :         Py_INCREF(result);

  00127	48 8b 4d 30	 mov	 rcx, QWORD PTR result$[rbp-104]
  0012b	e8 00 00 00 00	 call	 _Py_IncRef
  00130	48 8b 5d 30	 mov	 rbx, QWORD PTR result$[rbp-104]
$LN30@builtin_su:

; 1978 :     }
; 1979 : 
; 1980 : #ifndef SLOW_SUM
; 1981 :     /* Fast addition by keeping temporary sums in C instead of new Python objects.
; 1982 :        Assumes all inputs are the same type.  If the assumption fails, default
; 1983 :        to the more general routine.
; 1984 :     */
; 1985 :     if (PyLong_CheckExact(result)) {

  00134	48 89 7c 24 60	 mov	 QWORD PTR [rsp+96], rdi
  00139	4c 89 64 24 58	 mov	 QWORD PTR [rsp+88], r12
  0013e	4c 89 6c 24 50	 mov	 QWORD PTR [rsp+80], r13
  00143	4c 8d 2d 00 00
	00 00		 lea	 r13, OFFSET FLAT:PyLong_Type
  0014a	4c 39 6b 58	 cmp	 QWORD PTR [rbx+88], r13
  0014e	0f 85 82 00 00
	00		 jne	 $LN22@builtin_su

; 1986 :         int overflow;
; 1987 :         long i_result = PyLong_AsLongAndOverflow(result, &overflow);

  00154	48 8d 55 28	 lea	 rdx, QWORD PTR overflow$23019[rbp-104]
  00158	48 8b cb	 mov	 rcx, rbx
  0015b	e8 00 00 00 00	 call	 PyLong_AsLongAndOverflow
  00160	44 8b e0	 mov	 r12d, eax

; 1988 :         /* If this already overflowed, don't even enter the loop. */
; 1989 :         if (overflow == 0) {

  00163	44 39 75 28	 cmp	 DWORD PTR overflow$23019[rbp-104], r14d
  00167	75 0f		 jne	 SHORT $LN40@builtin_su

; 1990 :             Py_DECREF(result);

  00169	48 8b 4d 30	 mov	 rcx, QWORD PTR result$[rbp-104]
  0016d	e8 00 00 00 00	 call	 _Py_DecRef

; 1991 :             result = NULL;

  00172	4c 89 75 30	 mov	 QWORD PTR result$[rbp-104], r14

; 1992 :         }
; 1993 :         while(result == NULL) {

  00176	eb 09		 jmp	 SHORT $LL23@builtin_su
$LN40@builtin_su:
  00178	48 8b 5d 30	 mov	 rbx, QWORD PTR result$[rbp-104]
  0017c	48 85 db	 test	 rbx, rbx
  0017f	75 55		 jne	 SHORT $LN22@builtin_su
$LL23@builtin_su:

; 1994 :             item = PyIter_Next(iter);

  00181	48 8b ce	 mov	 rcx, rsi
  00184	e8 00 00 00 00	 call	 PyIter_Next
  00189	48 8b f8	 mov	 rdi, rax

; 1995 :             if (item == NULL) {

  0018c	48 85 c0	 test	 rax, rax
  0018f	0f 84 f9 00 00
	00		 je	 $LN43@builtin_su

; 2000 :             }
; 2001 :             if (PyLong_CheckExact(item)) {

  00195	4c 39 68 58	 cmp	 QWORD PTR [rax+88], r13
  00199	0f 85 8c 00 00
	00		 jne	 $LN18@builtin_su

; 2002 :                 long b = PyLong_AsLongAndOverflow(item, &overflow);

  0019f	48 8d 55 28	 lea	 rdx, QWORD PTR overflow$23019[rbp-104]
  001a3	48 8b c8	 mov	 rcx, rax
  001a6	e8 00 00 00 00	 call	 PyLong_AsLongAndOverflow

; 2003 :                 long x = i_result + b;

  001ab	42 8d 14 20	 lea	 edx, DWORD PTR [rax+r12]

; 2004 :                 if (overflow == 0 && ((x^i_result) >= 0 || (x^b) >= 0)) {

  001af	44 39 75 28	 cmp	 DWORD PTR overflow$23019[rbp-104], r14d
  001b3	75 76		 jne	 SHORT $LN18@builtin_su
  001b5	8b ca		 mov	 ecx, edx
  001b7	41 33 cc	 xor	 ecx, r12d
  001ba	7d 06		 jge	 SHORT $LN17@builtin_su
  001bc	8b ca		 mov	 ecx, edx
  001be	33 c8		 xor	 ecx, eax
  001c0	7c 69		 jl	 SHORT $LN18@builtin_su
$LN17@builtin_su:

; 2005 :                     i_result = x;
; 2006 :                     Py_DECREF(item);

  001c2	48 8b cf	 mov	 rcx, rdi
  001c5	44 8b e2	 mov	 r12d, edx
  001c8	e8 00 00 00 00	 call	 _Py_DecRef
  001cd	48 8b 5d 30	 mov	 rbx, QWORD PTR result$[rbp-104]
  001d1	48 85 db	 test	 rbx, rbx
  001d4	74 ab		 je	 SHORT $LL23@builtin_su
$LN22@builtin_su:

; 2024 :             }
; 2025 :         }
; 2026 :     }
; 2027 : 
; 2028 :     if (PyFloat_CheckExact(result)) {

  001d6	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:PyFloat_Type
  001dd	0f 29 74 24 40	 movaps	 XMMWORD PTR [rsp+64], xmm6
  001e2	4c 39 63 58	 cmp	 QWORD PTR [rbx+88], r12
  001e6	0f 85 fe 00 00
	00		 jne	 $LN42@builtin_su

; 2029 :         double f_result = PyFloat_AS_DOUBLE(result);

  001ec	f2 0f 10 73 60	 movsdx	 xmm6, QWORD PTR [rbx+96]

; 2030 :         Py_DECREF(result);

  001f1	48 8b cb	 mov	 rcx, rbx
  001f4	e8 00 00 00 00	 call	 _Py_DecRef

; 2031 :         result = NULL;

  001f9	4c 89 75 30	 mov	 QWORD PTR result$[rbp-104], r14
  001fd	0f 1f 00	 npad	 3
$LL13@builtin_su:

; 2032 :         while(result == NULL) {
; 2033 :             item = PyIter_Next(iter);

  00200	48 8b ce	 mov	 rcx, rsi
  00203	e8 00 00 00 00	 call	 PyIter_Next
  00208	48 8b f8	 mov	 rdi, rax

; 2034 :             if (item == NULL) {

  0020b	48 85 c0	 test	 rax, rax
  0020e	0f 84 b9 01 00
	00		 je	 $LN46@builtin_su

; 2039 :             }
; 2040 :             if (PyFloat_CheckExact(item)) {

  00214	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00218	49 3b c4	 cmp	 rax, r12
  0021b	0f 85 8c 00 00
	00		 jne	 $LN9@builtin_su

; 2041 :                 PyFPE_START_PROTECT("add", Py_DECREF(item); Py_DECREF(iter); return 0)
; 2042 :                 f_result += PyFloat_AS_DOUBLE(item);

  00221	f2 0f 58 77 60	 addsd	 xmm6, QWORD PTR [rdi+96]

; 2043 :                 PyFPE_END_PROTECT(f_result)
; 2044 :                 Py_DECREF(item);
; 2045 :                 continue;

  00226	e9 ad 00 00 00	 jmp	 $LN71@builtin_su
$LN18@builtin_su:

; 2007 :                     continue;
; 2008 :                 }
; 2009 :             }
; 2010 :             /* Either overflowed or is not an int. Restore real objects and process normally */
; 2011 :             result = PyLong_FromLong(i_result);

  0022b	41 8b cc	 mov	 ecx, r12d
  0022e	e8 00 00 00 00	 call	 PyLong_FromLong
  00233	48 89 45 30	 mov	 QWORD PTR result$[rbp-104], rax

; 2012 :             if (result == NULL) {

  00237	48 85 c0	 test	 rax, rax
  0023a	74 3b		 je	 SHORT $LN44@builtin_su

; 2016 :             }
; 2017 :             temp = PyNumber_Add(result, item);

  0023c	48 8b d7	 mov	 rdx, rdi
  0023f	48 8b c8	 mov	 rcx, rax
  00242	e8 00 00 00 00	 call	 PyNumber_Add

; 2018 :             Py_DECREF(result);

  00247	48 8b 4d 30	 mov	 rcx, QWORD PTR result$[rbp-104]
  0024b	48 8b d8	 mov	 rbx, rax
  0024e	e8 00 00 00 00	 call	 _Py_DecRef

; 2019 :             Py_DECREF(item);

  00253	48 8b cf	 mov	 rcx, rdi
  00256	e8 00 00 00 00	 call	 _Py_DecRef

; 2020 :             result = temp;

  0025b	48 89 5d 30	 mov	 QWORD PTR result$[rbp-104], rbx

; 2021 :             if (result == NULL) {

  0025f	48 85 db	 test	 rbx, rbx
  00262	0f 85 6e ff ff
	ff		 jne	 $LN22@builtin_su

; 2022 :                 Py_DECREF(iter);

  00268	48 8b ce	 mov	 rcx, rsi
  0026b	e8 00 00 00 00	 call	 _Py_DecRef

; 2023 :                 return NULL;

  00270	33 c0		 xor	 eax, eax
  00272	e9 ea 00 00 00	 jmp	 $LN69@builtin_su
$LN44@builtin_su:

; 2013 :                 Py_DECREF(item);

  00277	48 8b cf	 mov	 rcx, rdi
  0027a	e8 00 00 00 00	 call	 _Py_DecRef

; 2014 :                 Py_DECREF(iter);

  0027f	48 8b ce	 mov	 rcx, rsi
  00282	e8 00 00 00 00	 call	 _Py_DecRef
$LN73@builtin_su:

; 2015 :                 return NULL;

  00287	33 c0		 xor	 eax, eax
  00289	e9 d3 00 00 00	 jmp	 $LN69@builtin_su
$LN43@builtin_su:

; 1996 :                 Py_DECREF(iter);

  0028e	48 8b ce	 mov	 rcx, rsi
  00291	e8 00 00 00 00	 call	 _Py_DecRef

; 1997 :                 if (PyErr_Occurred())

  00296	e8 00 00 00 00	 call	 PyErr_Occurred
  0029b	48 85 c0	 test	 rax, rax

; 1998 :                     return NULL;

  0029e	75 e7		 jne	 SHORT $LN73@builtin_su

; 1999 :                 return PyLong_FromLong(i_result);

  002a0	41 8b cc	 mov	 ecx, r12d
  002a3	e8 00 00 00 00	 call	 PyLong_FromLong
  002a8	e9 b4 00 00 00	 jmp	 $LN69@builtin_su
$LN9@builtin_su:

; 2046 :             }
; 2047 :             if (PyLong_CheckExact(item)) {

  002ad	49 3b c5	 cmp	 rax, r13
  002b0	0f 85 d2 00 00
	00		 jne	 $LN7@builtin_su

; 2048 :                 long value;
; 2049 :                 int overflow;
; 2050 :                 value = PyLong_AsLongAndOverflow(item, &overflow);

  002b6	48 8d 55 28	 lea	 rdx, QWORD PTR overflow$23073[rbp-104]
  002ba	48 8b cf	 mov	 rcx, rdi
  002bd	e8 00 00 00 00	 call	 PyLong_AsLongAndOverflow

; 2051 :                 if (!overflow) {

  002c2	44 39 75 28	 cmp	 DWORD PTR overflow$23073[rbp-104], r14d
  002c6	0f 85 bc 00 00
	00		 jne	 $LN7@builtin_su

; 2052 :                     PyFPE_START_PROTECT("add", Py_DECREF(item); Py_DECREF(iter); return 0)
; 2053 :                     f_result += (double)value;

  002cc	66 0f 6e c0	 movd	 xmm0, eax
  002d0	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  002d4	f2 0f 58 f0	 addsd	 xmm6, xmm0
$LN71@builtin_su:

; 2054 :                     PyFPE_END_PROTECT(f_result)
; 2055 :                     Py_DECREF(item);

  002d8	48 8b cf	 mov	 rcx, rdi
  002db	e8 00 00 00 00	 call	 _Py_DecRef
  002e0	4c 39 75 30	 cmp	 QWORD PTR result$[rbp-104], r14
  002e4	0f 84 16 ff ff
	ff		 je	 $LL13@builtin_su
$LN42@builtin_su:

; 2067 :             }
; 2068 :         }
; 2069 :     }
; 2070 : #endif
; 2071 : 
; 2072 :     for(;;) {
; 2073 :         item = PyIter_Next(iter);

  002ea	48 8b ce	 mov	 rcx, rsi
  002ed	e8 00 00 00 00	 call	 PyIter_Next
  002f2	48 8b f8	 mov	 rdi, rax

; 2074 :         if (item == NULL) {

  002f5	48 85 c0	 test	 rax, rax
  002f8	74 3f		 je	 SHORT $LN48@builtin_su
  002fa	66 0f 1f 44 00
	00		 npad	 6
$LL5@builtin_su:

; 2079 :             }
; 2080 :             break;
; 2081 :         }
; 2082 :         /* It's tempting to use PyNumber_InPlaceAdd instead of
; 2083 :            PyNumber_Add here, to avoid quadratic running time
; 2084 :            when doing 'sum(list_of_lists, [])'.  However, this
; 2085 :            would produce a change in behaviour: a snippet like
; 2086 : 
; 2087 :              empty = []
; 2088 :              sum([[x] for x in range(10)], empty)
; 2089 : 
; 2090 :            would change the value of empty. */
; 2091 :         temp = PyNumber_Add(result, item);

  00300	48 8b 4d 30	 mov	 rcx, QWORD PTR result$[rbp-104]
  00304	48 8b d7	 mov	 rdx, rdi
  00307	e8 00 00 00 00	 call	 PyNumber_Add

; 2092 :         Py_DECREF(result);

  0030c	48 8b 4d 30	 mov	 rcx, QWORD PTR result$[rbp-104]
  00310	48 8b d8	 mov	 rbx, rax
  00313	e8 00 00 00 00	 call	 _Py_DecRef

; 2093 :         Py_DECREF(item);

  00318	48 8b cf	 mov	 rcx, rdi
  0031b	e8 00 00 00 00	 call	 _Py_DecRef

; 2094 :         result = temp;

  00320	48 89 5d 30	 mov	 QWORD PTR result$[rbp-104], rbx

; 2095 :         if (result == NULL)

  00324	48 85 db	 test	 rbx, rbx
  00327	74 27		 je	 SHORT $LN2@builtin_su

; 2067 :             }
; 2068 :         }
; 2069 :     }
; 2070 : #endif
; 2071 : 
; 2072 :     for(;;) {
; 2073 :         item = PyIter_Next(iter);

  00329	48 8b ce	 mov	 rcx, rsi
  0032c	e8 00 00 00 00	 call	 PyIter_Next
  00331	48 8b f8	 mov	 rdi, rax

; 2074 :         if (item == NULL) {

  00334	48 85 c0	 test	 rax, rax
  00337	75 c7		 jne	 SHORT $LL5@builtin_su
$LN48@builtin_su:

; 2075 :             /* error, or end-of-sequence */
; 2076 :             if (PyErr_Occurred()) {

  00339	e8 00 00 00 00	 call	 PyErr_Occurred
  0033e	48 85 c0	 test	 rax, rax
  00341	74 0d		 je	 SHORT $LN2@builtin_su

; 2077 :                 Py_DECREF(result);

  00343	48 8b 4d 30	 mov	 rcx, QWORD PTR result$[rbp-104]
  00347	e8 00 00 00 00	 call	 _Py_DecRef

; 2078 :                 result = NULL;

  0034c	4c 89 75 30	 mov	 QWORD PTR result$[rbp-104], r14
$LN2@builtin_su:

; 2096 :             break;
; 2097 :     }
; 2098 :     Py_DECREF(iter);

  00350	48 8b ce	 mov	 rcx, rsi
  00353	e8 00 00 00 00	 call	 _Py_DecRef

; 2099 :     return result;

  00358	48 8b 45 30	 mov	 rax, QWORD PTR result$[rbp-104]
$LN70@builtin_su:
  0035c	0f 28 74 24 40	 movaps	 xmm6, XMMWORD PTR [rsp+64]
$LN69@builtin_su:
  00361	4c 8b 64 24 58	 mov	 r12, QWORD PTR [rsp+88]
  00366	48 8b 7c 24 60	 mov	 rdi, QWORD PTR [rsp+96]
  0036b	4c 8b 6c 24 50	 mov	 r13, QWORD PTR [rsp+80]
$LN66@builtin_su:
  00370	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR [rsp+128]
  00378	48 8b b4 24 88
	00 00 00	 mov	 rsi, QWORD PTR [rsp+136]

; 2100 : }

  00380	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00384	41 5e		 pop	 r14
  00386	5d		 pop	 rbp
  00387	c3		 ret	 0
$LN7@builtin_su:

; 2056 :                     continue;
; 2057 :                 }
; 2058 :             }
; 2059 :             result = PyFloat_FromDouble(f_result);

  00388	66 0f 28 c6	 movapd	 xmm0, xmm6
  0038c	e8 00 00 00 00	 call	 PyFloat_FromDouble

; 2060 :             temp = PyNumber_Add(result, item);

  00391	48 8b d7	 mov	 rdx, rdi
  00394	48 8b c8	 mov	 rcx, rax
  00397	48 89 45 30	 mov	 QWORD PTR result$[rbp-104], rax
  0039b	e8 00 00 00 00	 call	 PyNumber_Add

; 2061 :             Py_DECREF(result);

  003a0	48 8b 4d 30	 mov	 rcx, QWORD PTR result$[rbp-104]
  003a4	48 8b d8	 mov	 rbx, rax
  003a7	e8 00 00 00 00	 call	 _Py_DecRef

; 2062 :             Py_DECREF(item);

  003ac	48 8b cf	 mov	 rcx, rdi
  003af	e8 00 00 00 00	 call	 _Py_DecRef

; 2063 :             result = temp;

  003b4	48 89 5d 30	 mov	 QWORD PTR result$[rbp-104], rbx

; 2064 :             if (result == NULL) {

  003b8	48 85 db	 test	 rbx, rbx
  003bb	0f 85 29 ff ff
	ff		 jne	 $LN42@builtin_su

; 2065 :                 Py_DECREF(iter);

  003c1	48 8b ce	 mov	 rcx, rsi
  003c4	e8 00 00 00 00	 call	 _Py_DecRef
$LN72@builtin_su:

; 2066 :                 return NULL;

  003c9	33 c0		 xor	 eax, eax
  003cb	eb 8f		 jmp	 SHORT $LN70@builtin_su
$LN46@builtin_su:

; 2035 :                 Py_DECREF(iter);

  003cd	48 8b ce	 mov	 rcx, rsi
  003d0	e8 00 00 00 00	 call	 _Py_DecRef

; 2036 :                 if (PyErr_Occurred())

  003d5	e8 00 00 00 00	 call	 PyErr_Occurred
  003da	48 85 c0	 test	 rax, rax

; 2037 :                     return NULL;

  003dd	75 ea		 jne	 SHORT $LN72@builtin_su

; 2038 :                 return PyFloat_FromDouble(f_result);

  003df	66 0f 28 c6	 movapd	 xmm0, xmm6
  003e3	e8 00 00 00 00	 call	 PyFloat_FromDouble
  003e8	e9 6f ff ff ff	 jmp	 $LN70@builtin_su
$LN26@builtin_su:

; 1971 :             PyErr_SetString(PyExc_TypeError,
; 1972 :                 "sum() can't sum bytearray [use b''.join(seq) instead]");

  003ed	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  003f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DG@IAOOBLDH@sum?$CI?$CJ?5can?8t?5sum?5bytearray?5?$FLuse?5b@
  003fb	e8 00 00 00 00	 call	 PyErr_SetString

; 1973 :             Py_DECREF(iter);

  00400	48 8b ce	 mov	 rcx, rsi
  00403	e8 00 00 00 00	 call	 _Py_DecRef

; 1974 :             return NULL;

  00408	33 c0		 xor	 eax, eax
  0040a	e9 61 ff ff ff	 jmp	 $LN66@builtin_su
builtin_sum ENDP
_TEXT	ENDS
EXTRN	PyObject_IsInstance:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_isinstance DD imagerel builtin_isinstance
	DD	imagerel builtin_isinstance+93
	DD	imagerel $unwind$builtin_isinstance
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_isinstance DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT builtin_isinstance
_TEXT	SEGMENT
self$ = 64
args$ = 72
cls$ = 80
inst$ = 88
builtin_isinstance PROC					; COMDAT

; 2112 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx

; 2113 :     PyObject *inst;
; 2114 :     PyObject *cls;
; 2115 :     int retval;
; 2116 : 
; 2117 :     if (!PyArg_UnpackTuple(args, "isinstance", 2, 2, &inst, &cls))

  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR cls$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR inst$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@PHLNOMHE@isinstance?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN2@builtin_is
$LN5@builtin_is:

; 2118 :         return NULL;

  00037	33 c0		 xor	 eax, eax

; 2124 : }

  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN2@builtin_is:

; 2119 : 
; 2120 :     retval = PyObject_IsInstance(inst, cls);

  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR cls$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR inst$[rsp]
  00048	e8 00 00 00 00	 call	 PyObject_IsInstance

; 2121 :     if (retval < 0)

  0004d	85 c0		 test	 eax, eax

; 2122 :         return NULL;

  0004f	78 e6		 js	 SHORT $LN5@builtin_is

; 2123 :     return PyBool_FromLong(retval);

  00051	8b c8		 mov	 ecx, eax
  00053	e8 00 00 00 00	 call	 PyBool_FromLong

; 2124 : }

  00058	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005c	c3		 ret	 0
builtin_isinstance ENDP
_TEXT	ENDS
EXTRN	PyObject_IsSubclass:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$builtin_issubclass DD imagerel builtin_issubclass
	DD	imagerel builtin_issubclass+93
	DD	imagerel $unwind$builtin_issubclass
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$builtin_issubclass DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT builtin_issubclass
_TEXT	SEGMENT
self$ = 64
args$ = 72
cls$ = 80
derived$ = 88
builtin_issubclass PROC					; COMDAT

; 2137 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx

; 2138 :     PyObject *derived;
; 2139 :     PyObject *cls;
; 2140 :     int retval;
; 2141 : 
; 2142 :     if (!PyArg_UnpackTuple(args, "issubclass", 2, 2, &derived, &cls))

  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR cls$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR derived$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@JALFGOPP@issubclass?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN2@builtin_is@2
$LN5@builtin_is@2:

; 2143 :         return NULL;

  00037	33 c0		 xor	 eax, eax

; 2149 : }

  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN2@builtin_is@2:

; 2144 : 
; 2145 :     retval = PyObject_IsSubclass(derived, cls);

  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR cls$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR derived$[rsp]
  00048	e8 00 00 00 00	 call	 PyObject_IsSubclass

; 2146 :     if (retval < 0)

  0004d	85 c0		 test	 eax, eax

; 2147 :         return NULL;

  0004f	78 e6		 js	 SHORT $LN5@builtin_is@2

; 2148 :     return PyBool_FromLong(retval);

  00051	8b c8		 mov	 ecx, eax
  00053	e8 00 00 00 00	 call	 PyBool_FromLong

; 2149 : }

  00058	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005c	c3		 ret	 0
builtin_issubclass ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@CCIMOOBM@zip?5argument?5?$CD?$CFzd?5must?5support?5i@ ; `string'
PUBLIC	??_C@_05GJIBENOI@zip?$CI?$CJ?$AA@		; `string'
EXTRN	PySequence_Size:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$zip_new DD imagerel zip_new
	DD	imagerel zip_new+107
	DD	imagerel $unwind$zip_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$zip_new DD imagerel zip_new+107
	DD	imagerel zip_new+186
	DD	imagerel $chain$1$zip_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$zip_new DD imagerel zip_new+186
	DD	imagerel zip_new+290
	DD	imagerel $chain$2$zip_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$zip_new DD imagerel zip_new+290
	DD	imagerel zip_new+608
	DD	imagerel $chain$3$zip_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$zip_new DD imagerel zip_new+608
	DD	imagerel zip_new+628
	DD	imagerel $chain$4$zip_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$zip_new DD 021H
	DD	imagerel zip_new
	DD	imagerel zip_new+107
	DD	imagerel $unwind$zip_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$zip_new DD 021H
	DD	imagerel zip_new+107
	DD	imagerel zip_new+186
	DD	imagerel $chain$1$zip_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$zip_new DD 020521H
	DD	0ce405H
	DD	imagerel zip_new+107
	DD	imagerel zip_new+186
	DD	imagerel $chain$1$zip_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$zip_new DD 020521H
	DD	0b7405H
	DD	imagerel zip_new
	DD	imagerel zip_new+107
	DD	imagerel $unwind$zip_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip_new DD 085a01H
	DD	0a645aH
	DD	0d340eH
	DD	0d00a520eH
	DD	05006c008H
xdata	ENDS
;	COMDAT ??_C@_0CJ@CCIMOOBM@zip?5argument?5?$CD?$CFzd?5must?5support?5i@
CONST	SEGMENT
??_C@_0CJ@CCIMOOBM@zip?5argument?5?$CD?$CFzd?5must?5support?5i@ DB 'zip a'
	DB	'rgument #%zd must support iteration', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05GJIBENOI@zip?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_05GJIBENOI@zip?$CI?$CJ?$AA@ DB 'zip()', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\bltinmodule.c
CONST	ENDS
;	COMDAT zip_new
_TEXT	SEGMENT
type$ = 80
args$ = 88
kwds$ = 96
zip_new	PROC						; COMDAT

; 2168 : {

  00000	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00005	55		 push	 rbp
  00006	41 54		 push	 r12
  00008	41 55		 push	 r13
  0000a	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000e	4c 8b e9	 mov	 r13, rcx

; 2169 :     zipobject *lz;
; 2170 :     Py_ssize_t i;
; 2171 :     PyObject *ittuple;  /* tuple of iterators */
; 2172 :     PyObject *result;
; 2173 :     Py_ssize_t tuplesize = PySequence_Length(args);

  00011	48 8b ca	 mov	 rcx, rdx
  00014	49 8b d8	 mov	 rbx, r8
  00017	4c 8b e2	 mov	 r12, rdx
  0001a	e8 00 00 00 00	 call	 PySequence_Size
  0001f	48 8b e8	 mov	 rbp, rax

; 2174 : 
; 2175 :     if (type == &PyZip_Type && !_PyArg_NoKeywords("zip()", kwds))

  00022	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyZip_Type
  00029	4c 3b e8	 cmp	 r13, rax
  0002c	75 24		 jne	 SHORT $LN12@zip_new
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05GJIBENOI@zip?$CI?$CJ?$AA@
  00035	48 8b d3	 mov	 rdx, rbx
  00038	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  0003d	85 c0		 test	 eax, eax
  0003f	75 11		 jne	 SHORT $LN12@zip_new

; 2176 :         return NULL;

  00041	33 c0		 xor	 eax, eax

; 2220 : 
; 2221 :     return (PyObject *)lz;
; 2222 : }

  00043	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  00048	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0004c	41 5d		 pop	 r13
  0004e	41 5c		 pop	 r12
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
$LN12@zip_new:

; 2177 : 
; 2178 :     /* args must be a tuple */
; 2179 :     assert(PyTuple_Check(args));
; 2180 : 
; 2181 :     /* obtain iterators */
; 2182 :     ittuple = PyTuple_New(tuplesize);

  00052	48 8b cd	 mov	 rcx, rbp
  00055	48 89 74 24 50	 mov	 QWORD PTR [rsp+80], rsi
  0005a	e8 00 00 00 00	 call	 PyTuple_New
  0005f	48 8b f0	 mov	 rsi, rax

; 2183 :     if (ittuple == NULL)

  00062	48 85 c0	 test	 rax, rax
  00065	0f 84 f5 01 00
	00		 je	 $LN46@zip_new
$LN11@zip_new:
  0006b	48 89 7c 24 58	 mov	 QWORD PTR [rsp+88], rdi

; 2184 :         return NULL;
; 2185 :     for (i=0; i < tuplesize; ++i) {

  00070	33 ff		 xor	 edi, edi
  00072	48 85 ed	 test	 rbp, rbp
  00075	7e 2a		 jle	 SHORT $LN8@zip_new
  00077	48 8d 58 70	 lea	 rbx, QWORD PTR [rax+112]
  0007b	4c 2b e0	 sub	 r12, rax
  0007e	66 90		 npad	 2
$LL10@zip_new:

; 2186 :         PyObject *item = PyTuple_GET_ITEM(args, i);
; 2187 :         PyObject *it = PyObject_GetIter(item);

  00080	49 8b 0c 1c	 mov	 rcx, QWORD PTR [r12+rbx]
  00084	e8 00 00 00 00	 call	 PyObject_GetIter

; 2188 :         if (it == NULL) {

  00089	48 85 c0	 test	 rax, rax
  0008c	0f 84 06 01 00
	00		 je	 $LN43@zip_new

; 2195 :         }
; 2196 :         PyTuple_SET_ITEM(ittuple, i, it);

  00092	48 ff c7	 inc	 rdi
  00095	48 89 03	 mov	 QWORD PTR [rbx], rax
  00098	48 83 c3 08	 add	 rbx, 8
  0009c	48 3b fd	 cmp	 rdi, rbp
  0009f	7c df		 jl	 SHORT $LL10@zip_new
$LN8@zip_new:

; 2197 :     }
; 2198 : 
; 2199 :     /* create a result holder */
; 2200 :     result = PyTuple_New(tuplesize);

  000a1	48 8b cd	 mov	 rcx, rbp
  000a4	e8 00 00 00 00	 call	 PyTuple_New
  000a9	48 8b d8	 mov	 rbx, rax

; 2201 :     if (result == NULL) {

  000ac	48 85 c0	 test	 rax, rax

; 2202 :         Py_DECREF(ittuple);
; 2203 :         return NULL;

  000af	0f 84 0a 01 00
	00		 je	 $LN6@zip_new

; 2204 :     }
; 2205 :     for (i=0 ; i < tuplesize ; i++) {

  000b5	48 85 ed	 test	 rbp, rbp
  000b8	7e 68		 jle	 SHORT $LN2@zip_new
  000ba	4c 89 74 24 60	 mov	 QWORD PTR [rsp+96], r14
  000bf	48 8d 78 70	 lea	 rdi, QWORD PTR [rax+112]
  000c3	4c 8b e5	 mov	 r12, rbp
  000c6	4c 8d 35 00 00
	00 00		 lea	 r14, OFFSET FLAT:_Py_NoneStruct
  000cd	0f 1f 00	 npad	 3
$LL4@zip_new:

; 2206 :         Py_INCREF(Py_None);

  000d0	e8 00 00 00 00	 call	 _Py_PXCTX
  000d5	85 c0		 test	 eax, eax
  000d7	75 38		 jne	 SHORT $LN16@zip_new
  000d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000e7	4d 8b ce	 mov	 r9, r14
  000ea	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000f0	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000f8	e8 00 00 00 00	 call	 _PyParallel_Guard
  000fd	85 c0		 test	 eax, eax
  000ff	75 09		 jne	 SHORT $LN15@zip_new
  00101	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00108	74 07		 je	 SHORT $LN16@zip_new
$LN15@zip_new:
  0010a	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN16@zip_new:

; 2207 :         PyTuple_SET_ITEM(result, i, Py_None);

  00111	4c 89 37	 mov	 QWORD PTR [rdi], r14
  00114	48 83 c7 08	 add	 rdi, 8
  00118	49 ff cc	 dec	 r12
  0011b	75 b3		 jne	 SHORT $LL4@zip_new
  0011d	4c 8b 74 24 60	 mov	 r14, QWORD PTR [rsp+96]
$LN2@zip_new:

; 2208 :     }
; 2209 : 
; 2210 :     /* create zipobject structure */
; 2211 :     lz = (zipobject *)type->tp_alloc(type, 0);

  00122	33 d2		 xor	 edx, edx
  00124	49 8b cd	 mov	 rcx, r13
  00127	41 ff 95 88 01
	00 00		 call	 QWORD PTR [r13+392]

; 2212 :     if (lz == NULL) {

  0012e	48 85 c0	 test	 rax, rax
  00131	0f 85 18 01 00
	00		 jne	 $LN1@zip_new

; 2213 :         Py_DECREF(ittuple);

  00137	e8 00 00 00 00	 call	 _Py_PXCTX
  0013c	85 c0		 test	 eax, eax
  0013e	0f 85 9e 00 00
	00		 jne	 $LN29@zip_new
  00144	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  00148	a8 20		 test	 al, 32			; 00000020H
  0014a	0f 85 8a 00 00
	00		 jne	 $LN23@zip_new
  00150	84 c0		 test	 al, al
  00152	0f 88 82 00 00
	00		 js	 $LN23@zip_new
  00158	a8 02		 test	 al, 2
  0015a	0f 85 82 00 00
	00		 jne	 $LN29@zip_new
  00160	48 ff 4e 50	 dec	 QWORD PTR [rsi+80]
  00164	75 7c		 jne	 SHORT $LN29@zip_new
  00166	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0016d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00174	4c 8b ce	 mov	 r9, rsi
  00177	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0017d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00185	e8 00 00 00 00	 call	 _PyParallel_Guard
  0018a	48 8b ce	 mov	 rcx, rsi
  0018d	85 c0		 test	 eax, eax
  0018f	74 3d		 je	 SHORT $LN28@zip_new
  00191	e8 00 00 00 00	 call	 _Px_Dealloc
  00196	eb 4a		 jmp	 SHORT $LN29@zip_new
$LN43@zip_new:

; 2189 :             if (PyErr_ExceptionMatches(PyExc_TypeError))

  00198	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0019f	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  001a4	85 c0		 test	 eax, eax
  001a6	74 17		 je	 SHORT $LN6@zip_new

; 2190 :                 PyErr_Format(PyExc_TypeError,
; 2191 :                     "zip argument #%zd must support iteration",
; 2192 :                     i+1);

  001a8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  001af	4c 8d 47 01	 lea	 r8, QWORD PTR [rdi+1]
  001b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@CCIMOOBM@zip?5argument?5?$CD?$CFzd?5must?5support?5i@
  001ba	e8 00 00 00 00	 call	 PyErr_Format
$LN6@zip_new:

; 2193 :             Py_DECREF(ittuple);

  001bf	48 8b ce	 mov	 rcx, rsi
  001c2	e8 00 00 00 00	 call	 _Py_DecRef

; 2194 :             return NULL;

  001c7	33 c0		 xor	 eax, eax
  001c9	e9 8d 00 00 00	 jmp	 $LN47@zip_new

; 2213 :         Py_DECREF(ittuple);

$LN28@zip_new:
  001ce	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  001d2	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001d8	eb 08		 jmp	 SHORT $LN29@zip_new
$LN23@zip_new:
  001da	48 8b ce	 mov	 rcx, rsi
  001dd	e8 00 00 00 00	 call	 Px_DecRef
$LN29@zip_new:

; 2214 :         Py_DECREF(result);

  001e2	e8 00 00 00 00	 call	 _Py_PXCTX
  001e7	85 c0		 test	 eax, eax
  001e9	75 60		 jne	 SHORT $LN40@zip_new
  001eb	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  001ef	a8 20		 test	 al, 32			; 00000020H
  001f1	75 50		 jne	 SHORT $LN34@zip_new
  001f3	84 c0		 test	 al, al
  001f5	78 4c		 js	 SHORT $LN34@zip_new
  001f7	a8 02		 test	 al, 2
  001f9	75 50		 jne	 SHORT $LN40@zip_new
  001fb	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  001ff	75 4a		 jne	 SHORT $LN40@zip_new
  00201	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00208	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0020f	4c 8b cb	 mov	 r9, rbx
  00212	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00218	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00220	e8 00 00 00 00	 call	 _PyParallel_Guard
  00225	48 8b cb	 mov	 rcx, rbx
  00228	85 c0		 test	 eax, eax
  0022a	74 09		 je	 SHORT $LN39@zip_new
  0022c	e8 00 00 00 00	 call	 _Px_Dealloc

; 2215 :         return NULL;

  00231	33 c0		 xor	 eax, eax
  00233	eb 26		 jmp	 SHORT $LN47@zip_new

; 2214 :         Py_DECREF(result);

$LN39@zip_new:
  00235	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00239	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 2215 :         return NULL;

  0023f	33 c0		 xor	 eax, eax
  00241	eb 18		 jmp	 SHORT $LN47@zip_new

; 2214 :         Py_DECREF(result);

$LN34@zip_new:
  00243	48 8b cb	 mov	 rcx, rbx
  00246	e8 00 00 00 00	 call	 Px_DecRef
$LN40@zip_new:

; 2215 :         return NULL;

  0024b	33 c0		 xor	 eax, eax
  0024d	eb 0c		 jmp	 SHORT $LN47@zip_new
$LN1@zip_new:

; 2216 :     }
; 2217 :     lz->ittuple = ittuple;

  0024f	48 89 70 68	 mov	 QWORD PTR [rax+104], rsi

; 2218 :     lz->tuplesize = tuplesize;

  00253	48 89 68 60	 mov	 QWORD PTR [rax+96], rbp

; 2219 :     lz->result = result;

  00257	48 89 58 70	 mov	 QWORD PTR [rax+112], rbx
$LN47@zip_new:
  0025b	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
$LN46@zip_new:
  00260	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]

; 2220 : 
; 2221 :     return (PyObject *)lz;
; 2222 : }

  00265	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  0026a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0026e	41 5d		 pop	 r13
  00270	41 5c		 pop	 r12
  00272	5d		 pop	 rbp
  00273	c3		 ret	 0
zip_new	ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$zip_dealloc DD imagerel zip_dealloc
	DD	imagerel zip_dealloc+262
	DD	imagerel $unwind$zip_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\bltinmodule.c
xdata	ENDS
;	COMDAT zip_dealloc
_TEXT	SEGMENT
lz$ = 64
zip_dealloc PROC					; COMDAT

; 2226 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 2227 :     PyObject_GC_UnTrack(lz);

  0000d	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 2228 :     Py_XDECREF(lz->ittuple);

  00012	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  00016	48 85 db	 test	 rbx, rbx
  00019	74 65		 je	 SHORT $LN7@zip_deallo
  0001b	e8 00 00 00 00	 call	 _Py_PXCTX
  00020	85 c0		 test	 eax, eax
  00022	75 5c		 jne	 SHORT $LN7@zip_deallo
  00024	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00028	a8 20		 test	 al, 32			; 00000020H
  0002a	75 4c		 jne	 SHORT $LN15@zip_deallo
  0002c	84 c0		 test	 al, al
  0002e	78 48		 js	 SHORT $LN15@zip_deallo
  00030	a8 02		 test	 al, 2
  00032	75 4c		 jne	 SHORT $LN7@zip_deallo
  00034	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00038	75 46		 jne	 SHORT $LN7@zip_deallo
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00048	4c 8b cb	 mov	 r9, rbx
  0004b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00051	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00059	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005e	48 8b cb	 mov	 rcx, rbx
  00061	85 c0		 test	 eax, eax
  00063	74 07		 je	 SHORT $LN20@zip_deallo
  00065	e8 00 00 00 00	 call	 _Px_Dealloc
  0006a	eb 14		 jmp	 SHORT $LN7@zip_deallo
$LN20@zip_deallo:
  0006c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00070	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00076	eb 08		 jmp	 SHORT $LN7@zip_deallo
$LN15@zip_deallo:
  00078	48 8b cb	 mov	 rcx, rbx
  0007b	e8 00 00 00 00	 call	 Px_DecRef
$LN7@zip_deallo:

; 2229 :     Py_XDECREF(lz->result);

  00080	48 8b 5f 70	 mov	 rbx, QWORD PTR [rdi+112]
  00084	48 85 db	 test	 rbx, rbx
  00087	74 65		 je	 SHORT $LN3@zip_deallo
  00089	e8 00 00 00 00	 call	 _Py_PXCTX
  0008e	85 c0		 test	 eax, eax
  00090	75 5c		 jne	 SHORT $LN3@zip_deallo
  00092	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00096	a8 20		 test	 al, 32			; 00000020H
  00098	75 4c		 jne	 SHORT $LN26@zip_deallo
  0009a	84 c0		 test	 al, al
  0009c	78 48		 js	 SHORT $LN26@zip_deallo
  0009e	a8 02		 test	 al, 2
  000a0	75 4c		 jne	 SHORT $LN3@zip_deallo
  000a2	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000a6	75 46		 jne	 SHORT $LN3@zip_deallo
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000b6	4c 8b cb	 mov	 r9, rbx
  000b9	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000bf	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cc	48 8b cb	 mov	 rcx, rbx
  000cf	85 c0		 test	 eax, eax
  000d1	74 07		 je	 SHORT $LN31@zip_deallo
  000d3	e8 00 00 00 00	 call	 _Px_Dealloc
  000d8	eb 14		 jmp	 SHORT $LN3@zip_deallo
$LN31@zip_deallo:
  000da	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000de	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000e4	eb 08		 jmp	 SHORT $LN3@zip_deallo
$LN26@zip_deallo:
  000e6	48 8b cb	 mov	 rcx, rbx
  000e9	e8 00 00 00 00	 call	 Px_DecRef
$LN3@zip_deallo:

; 2230 :     Py_TYPE(lz)->tp_free(lz);

  000ee	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000f2	48 8b cf	 mov	 rcx, rdi

; 2231 : }

  000f5	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000fa	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000fe	5f		 pop	 rdi
  000ff	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
zip_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@BOLPAOAI@zip_traverse?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip_traverse DD imagerel zip_traverse
	DD	imagerel zip_traverse+152
	DD	imagerel $unwind$zip_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0N@BOLPAOAI@zip_traverse?$AA@
CONST	SEGMENT
??_C@_0N@BOLPAOAI@zip_traverse?$AA@ DB 'zip_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT zip_traverse
_TEXT	SEGMENT
lz$ = 48
visit$ = 56
arg$ = 64
zip_traverse PROC					; COMDAT

; 2235 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 2236 :     Py_VISIT(lz->ittuple);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN9@zip_traver
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LBFDNFDG@?4?4?2Python?2bltinmodule?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOLPAOAI@zip_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 bc 08 00
	00		 mov	 r8d, 2236		; 000008bcH
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@zip_traver:
  0003d	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN11@zip_traver
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 39		 jne	 SHORT $LN13@zip_traver
$LN11@zip_traver:

; 2237 :     Py_VISIT(lz->result);

  0004f	e8 00 00 00 00	 call	 _Py_PXCTX
  00054	85 c0		 test	 eax, eax
  00056	74 1c		 je	 SHORT $LN3@zip_traver
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LBFDNFDG@?4?4?2Python?2bltinmodule?4c?$AA@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOLPAOAI@zip_traverse?$AA@
  00066	45 33 c9	 xor	 r9d, r9d
  00069	41 b8 bd 08 00
	00		 mov	 r8d, 2237		; 000008bdH
  0006f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@zip_traver:
  00074	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00078	48 85 c9	 test	 rcx, rcx
  0007b	74 09		 je	 SHORT $LN5@zip_traver
  0007d	48 8b d7	 mov	 rdx, rdi
  00080	ff d6		 call	 rsi
  00082	85 c0		 test	 eax, eax
  00084	75 02		 jne	 SHORT $LN13@zip_traver
$LN5@zip_traver:

; 2238 :     return 0;

  00086	33 c0		 xor	 eax, eax
$LN13@zip_traver:

; 2239 : }

  00088	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00092	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00096	5f		 pop	 rdi
  00097	c3		 ret	 0
zip_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$zip_next DD imagerel zip_next
	DD	imagerel zip_next+41
	DD	imagerel $unwind$zip_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$zip_next DD imagerel zip_next+41
	DD	imagerel zip_next+223
	DD	imagerel $chain$2$zip_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$zip_next DD imagerel zip_next+223
	DD	imagerel zip_next+310
	DD	imagerel $chain$4$zip_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$zip_next DD 060021H
	DD	0cd400H
	DD	0b6400H
	DD	0a3400H
	DD	imagerel zip_next
	DD	imagerel zip_next+41
	DD	imagerel $unwind$zip_next
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$zip_next DD 060f21H
	DD	0cd40fH
	DD	0b640aH
	DD	0a3405H
	DD	imagerel zip_next
	DD	imagerel zip_next+41
	DD	imagerel $unwind$zip_next
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip_next DD 040901H
	DD	0c0055209H
	DD	050027003H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\bltinmodule.c
xdata	ENDS
;	COMDAT zip_next
_TEXT	SEGMENT
lz$ = 80
zip_next PROC						; COMDAT

; 2243 : {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	41 54		 push	 r12
  00005	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 2244 :     Py_ssize_t i;
; 2245 :     Py_ssize_t tuplesize = lz->tuplesize;

  00009	48 8b 69 60	 mov	 rbp, QWORD PTR [rcx+96]

; 2246 :     PyObject *result = lz->result;

  0000d	48 8b 79 70	 mov	 rdi, QWORD PTR [rcx+112]
  00011	4c 8b e1	 mov	 r12, rcx

; 2247 :     PyObject *it;
; 2248 :     PyObject *item;
; 2249 :     PyObject *olditem;
; 2250 : 
; 2251 :     if (tuplesize == 0)

  00014	48 85 ed	 test	 rbp, rbp
  00017	75 0b		 jne	 SHORT $LN12@zip_next

; 2252 :         return NULL;

  00019	33 c0		 xor	 eax, eax

; 2281 : }

  0001b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0001f	41 5c		 pop	 r12
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
$LN12@zip_next:

; 2253 :     if (Py_REFCNT(result) == 1) {

  00024	48 83 7f 50 01	 cmp	 QWORD PTR [rdi+80], 1
  00029	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  0002e	48 89 74 24 58	 mov	 QWORD PTR [rsp+88], rsi
  00033	4c 89 6c 24 60	 mov	 QWORD PTR [rsp+96], r13
  00038	0f 85 a1 00 00
	00		 jne	 $LN11@zip_next

; 2254 :         Py_INCREF(result);

  0003e	e8 00 00 00 00	 call	 _Py_PXCTX
  00043	85 c0		 test	 eax, eax
  00045	75 32		 jne	 SHORT $LN16@zip_next
  00047	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00055	4c 8b cf	 mov	 r9, rdi
  00058	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0005e	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00066	e8 00 00 00 00	 call	 _PyParallel_Guard
  0006b	85 c0		 test	 eax, eax
  0006d	75 06		 jne	 SHORT $LN15@zip_next
  0006f	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  00073	74 04		 je	 SHORT $LN16@zip_next
$LN15@zip_next:
  00075	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN16@zip_next:

; 2255 :         for (i=0 ; i < tuplesize ; i++) {

  00079	33 db		 xor	 ebx, ebx
  0007b	48 85 ed	 test	 rbp, rbp
  0007e	7e 44		 jle	 SHORT $LN2@zip_next
  00080	4c 8b ef	 mov	 r13, rdi
  00083	48 8d 77 70	 lea	 rsi, QWORD PTR [rdi+112]
  00087	49 f7 dd	 neg	 r13
  0008a	66 0f 1f 44 00
	00		 npad	 6
$LL10@zip_next:

; 2256 :             it = PyTuple_GET_ITEM(lz->ittuple, i);

  00090	49 8b 44 24 68	 mov	 rax, QWORD PTR [r12+104]
  00095	49 8d 4c 05 00	 lea	 rcx, QWORD PTR [r13+rax]
  0009a	48 8b 0c 31	 mov	 rcx, QWORD PTR [rcx+rsi]

; 2257 :             item = (*Py_TYPE(it)->tp_iternext)(it);

  0009e	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  000a2	ff 90 38 01 00
	00		 call	 QWORD PTR [rax+312]

; 2258 :             if (item == NULL) {

  000a8	48 85 c0	 test	 rax, rax
  000ab	74 7d		 je	 SHORT $LN22@zip_next

; 2259 :                 Py_DECREF(result);
; 2260 :                 return NULL;
; 2261 :             }
; 2262 :             olditem = PyTuple_GET_ITEM(result, i);

  000ad	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]

; 2263 :             PyTuple_SET_ITEM(result, i, item);

  000b0	48 89 06	 mov	 QWORD PTR [rsi], rax

; 2264 :             Py_DECREF(olditem);

  000b3	e8 00 00 00 00	 call	 _Py_DecRef
  000b8	48 ff c3	 inc	 rbx
  000bb	48 83 c6 08	 add	 rsi, 8
  000bf	48 3b dd	 cmp	 rbx, rbp
  000c2	7c cc		 jl	 SHORT $LL10@zip_next
$LN2@zip_next:

; 2278 :         }
; 2279 :     }
; 2280 :     return result;

  000c4	48 8b c7	 mov	 rax, rdi
$LN27@zip_next:
  000c7	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  000cc	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000d1	4c 8b 6c 24 60	 mov	 r13, QWORD PTR [rsp+96]

; 2281 : }

  000d6	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000da	41 5c		 pop	 r12
  000dc	5f		 pop	 rdi
  000dd	5d		 pop	 rbp
  000de	c3		 ret	 0
$LN11@zip_next:

; 2265 :         }
; 2266 :     } else {
; 2267 :         result = PyTuple_New(tuplesize);

  000df	48 8b cd	 mov	 rcx, rbp
  000e2	e8 00 00 00 00	 call	 PyTuple_New
  000e7	48 8b f8	 mov	 rdi, rax

; 2268 :         if (result == NULL)

  000ea	48 85 c0	 test	 rax, rax

; 2269 :             return NULL;

  000ed	74 43		 je	 SHORT $LN28@zip_next

; 2270 :         for (i=0 ; i < tuplesize ; i++) {

  000ef	33 db		 xor	 ebx, ebx
  000f1	48 85 ed	 test	 rbp, rbp
  000f4	7e ce		 jle	 SHORT $LN2@zip_next
  000f6	be 70 00 00 00	 mov	 esi, 112		; 00000070H
  000fb	0f 1f 44 00 00	 npad	 5
$LL4@zip_next:

; 2271 :             it = PyTuple_GET_ITEM(lz->ittuple, i);

  00100	49 8b 44 24 68	 mov	 rax, QWORD PTR [r12+104]
  00105	48 8b 0c 06	 mov	 rcx, QWORD PTR [rsi+rax]

; 2272 :             item = (*Py_TYPE(it)->tp_iternext)(it);

  00109	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0010d	ff 90 38 01 00
	00		 call	 QWORD PTR [rax+312]

; 2273 :             if (item == NULL) {

  00113	48 85 c0	 test	 rax, rax
  00116	74 12		 je	 SHORT $LN22@zip_next

; 2276 :             }
; 2277 :             PyTuple_SET_ITEM(result, i, item);

  00118	48 ff c3	 inc	 rbx
  0011b	48 89 04 3e	 mov	 QWORD PTR [rsi+rdi], rax
  0011f	48 83 c6 08	 add	 rsi, 8
  00123	48 3b dd	 cmp	 rbx, rbp
  00126	7c d8		 jl	 SHORT $LL4@zip_next

; 2273 :             if (item == NULL) {

  00128	eb 9a		 jmp	 SHORT $LN2@zip_next
$LN22@zip_next:

; 2274 :                 Py_DECREF(result);

  0012a	48 8b cf	 mov	 rcx, rdi
  0012d	e8 00 00 00 00	 call	 _Py_DecRef
$LN28@zip_next:

; 2275 :                 return NULL;

  00132	33 c0		 xor	 eax, eax
  00134	eb 91		 jmp	 SHORT $LN27@zip_next
zip_next ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT zip_reduce
_TEXT	SEGMENT
lz$ = 8
zip_reduce PROC						; COMDAT

; 2286 :     /* Just recreate the zip with the internal iterator tuple */
; 2287 :     return Py_BuildValue("OO", Py_TYPE(lz), lz->ittuple);

  00000	4c 8b 41 68	 mov	 r8, QWORD PTR [rcx+104]
  00004	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00008	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02MJJLPNK@OO?$AA@

; 2288 : }

  0000f	e9 00 00 00 00	 jmp	 Py_BuildValue
zip_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_09PMJCCPKK@__debug__?$AA@			; `string'
PUBLIC	??_C@_04GPMDFGEJ@type?$AA@			; `string'
PUBLIC	??_C@_05NNMEHDAO@tuple?$AA@			; `string'
PUBLIC	??_C@_05MKJDPMKP@super?$AA@			; `string'
PUBLIC	??_C@_03OJMAPEGJ@str?$AA@			; `string'
PUBLIC	??_C@_0N@BCCHOHJA@staticmethod?$AA@		; `string'
PUBLIC	??_C@_05ILHMOJGN@slice?$AA@			; `string'
PUBLIC	??_C@_03KCHOJKKI@set?$AA@			; `string'
PUBLIC	??_C@_08DNDMMOJA@reversed?$AA@			; `string'
PUBLIC	??_C@_05CCGOGOBM@range?$AA@			; `string'
PUBLIC	??_C@_06IEOJBDIK@object?$AA@			; `string'
PUBLIC	??_C@_04DONFEANM@list?$AA@			; `string'
PUBLIC	??_C@_03JBIPMCLC@int?$AA@			; `string'
PUBLIC	??_C@_08EMBNBNLN@property?$AA@			; `string'
PUBLIC	??_C@_09FNPENIBB@frozenset?$AA@			; `string'
PUBLIC	??_C@_05KNFBNCOH@float?$AA@			; `string'
PUBLIC	??_C@_09KCAIFCBE@enumerate?$AA@			; `string'
PUBLIC	??_C@_04BCIDKIGN@dict?$AA@			; `string'
PUBLIC	??_C@_07CMPFPFAH@complex?$AA@			; `string'
PUBLIC	??_C@_0M@FGHOINCL@classmethod?$AA@		; `string'
PUBLIC	??_C@_05FBJAGGIG@bytes?$AA@			; `string'
PUBLIC	??_C@_09FCJHKOIN@bytearray?$AA@			; `string'
PUBLIC	??_C@_0L@NFBFFIOL@memoryview?$AA@		; `string'
PUBLIC	??_C@_04DDKJGDCM@bool?$AA@			; `string'
PUBLIC	??_C@_04HPMIDMKH@True?$AA@			; `string'
PUBLIC	??_C@_05MKDOIIA@False?$AA@			; `string'
PUBLIC	??_C@_0P@HCLFFHDH@NotImplemented?$AA@		; `string'
PUBLIC	??_C@_08KKBGFFMJ@Ellipsis?$AA@			; `string'
PUBLIC	??_C@_04OHJIHAFH@None?$AA@			; `string'
PUBLIC	_PyBuiltin_Init
EXTRN	Py_OptimizeFlag:DWORD
EXTRN	PyTuple_Type:BYTE
EXTRN	PySuper_Type:BYTE
EXTRN	PyUnicode_Type:BYTE
EXTRN	PyStaticMethod_Type:BYTE
EXTRN	PySlice_Type:BYTE
EXTRN	PySet_Type:BYTE
EXTRN	PyReversed_Type:BYTE
EXTRN	PyRange_Type:BYTE
EXTRN	PyBaseObject_Type:BYTE
EXTRN	PyList_Type:BYTE
EXTRN	PyProperty_Type:BYTE
EXTRN	PyFrozenSet_Type:BYTE
EXTRN	PyEnum_Type:BYTE
EXTRN	PyDict_Type:BYTE
EXTRN	PyComplex_Type:BYTE
EXTRN	PyClassMethod_Type:BYTE
EXTRN	PyBytes_Type:BYTE
EXTRN	PyMemoryView_Type:BYTE
EXTRN	_Py_NotImplementedStruct:BYTE
EXTRN	_Py_EllipsisObject:BYTE
EXTRN	PyModule_GetDict:PROC
EXTRN	PyModule_Create2:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyBuiltin_Init DD imagerel $LN47
	DD	imagerel $LN47+40
	DD	imagerel $unwind$_PyBuiltin_Init
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_PyBuiltin_Init DD imagerel $LN47+40
	DD	imagerel $LN47+976
	DD	imagerel $chain$0$_PyBuiltin_Init
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$_PyBuiltin_Init DD imagerel $LN47+976
	DD	imagerel $LN47+1053
	DD	imagerel $chain$3$_PyBuiltin_Init
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$_PyBuiltin_Init DD imagerel $LN47+1053
	DD	imagerel $LN47+1085
	DD	imagerel $chain$5$_PyBuiltin_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$_PyBuiltin_Init DD 040021H
	DD	077400H
	DD	063400H
	DD	imagerel $LN47
	DD	imagerel $LN47+40
	DD	imagerel $unwind$_PyBuiltin_Init
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$_PyBuiltin_Init DD 040721H
	DD	077407H
	DD	063400H
	DD	imagerel $LN47
	DD	imagerel $LN47+40
	DD	imagerel $unwind$_PyBuiltin_Init
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_PyBuiltin_Init DD 020521H
	DD	063405H
	DD	imagerel $LN47
	DD	imagerel $LN47+40
	DD	imagerel $unwind$_PyBuiltin_Init
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyBuiltin_Init DD 020601H
	DD	060023206H
xdata	ENDS
;	COMDAT ??_C@_09PMJCCPKK@__debug__?$AA@
CONST	SEGMENT
??_C@_09PMJCCPKK@__debug__?$AA@ DB '__debug__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04GPMDFGEJ@type?$AA@
CONST	SEGMENT
??_C@_04GPMDFGEJ@type?$AA@ DB 'type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NNMEHDAO@tuple?$AA@
CONST	SEGMENT
??_C@_05NNMEHDAO@tuple?$AA@ DB 'tuple', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MKJDPMKP@super?$AA@
CONST	SEGMENT
??_C@_05MKJDPMKP@super?$AA@ DB 'super', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03OJMAPEGJ@str?$AA@
CONST	SEGMENT
??_C@_03OJMAPEGJ@str?$AA@ DB 'str', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BCCHOHJA@staticmethod?$AA@
CONST	SEGMENT
??_C@_0N@BCCHOHJA@staticmethod?$AA@ DB 'staticmethod', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05ILHMOJGN@slice?$AA@
CONST	SEGMENT
??_C@_05ILHMOJGN@slice?$AA@ DB 'slice', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KCHOJKKI@set?$AA@
CONST	SEGMENT
??_C@_03KCHOJKKI@set?$AA@ DB 'set', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08DNDMMOJA@reversed?$AA@
CONST	SEGMENT
??_C@_08DNDMMOJA@reversed?$AA@ DB 'reversed', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05CCGOGOBM@range?$AA@
CONST	SEGMENT
??_C@_05CCGOGOBM@range?$AA@ DB 'range', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IEOJBDIK@object?$AA@
CONST	SEGMENT
??_C@_06IEOJBDIK@object?$AA@ DB 'object', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DONFEANM@list?$AA@
CONST	SEGMENT
??_C@_04DONFEANM@list?$AA@ DB 'list', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBIPMCLC@int?$AA@
CONST	SEGMENT
??_C@_03JBIPMCLC@int?$AA@ DB 'int', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08EMBNBNLN@property?$AA@
CONST	SEGMENT
??_C@_08EMBNBNLN@property?$AA@ DB 'property', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FNPENIBB@frozenset?$AA@
CONST	SEGMENT
??_C@_09FNPENIBB@frozenset?$AA@ DB 'frozenset', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05KNFBNCOH@float?$AA@
CONST	SEGMENT
??_C@_05KNFBNCOH@float?$AA@ DB 'float', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09KCAIFCBE@enumerate?$AA@
CONST	SEGMENT
??_C@_09KCAIFCBE@enumerate?$AA@ DB 'enumerate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04BCIDKIGN@dict?$AA@
CONST	SEGMENT
??_C@_04BCIDKIGN@dict?$AA@ DB 'dict', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CMPFPFAH@complex?$AA@
CONST	SEGMENT
??_C@_07CMPFPFAH@complex?$AA@ DB 'complex', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FGHOINCL@classmethod?$AA@
CONST	SEGMENT
??_C@_0M@FGHOINCL@classmethod?$AA@ DB 'classmethod', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05FBJAGGIG@bytes?$AA@
CONST	SEGMENT
??_C@_05FBJAGGIG@bytes?$AA@ DB 'bytes', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09FCJHKOIN@bytearray?$AA@
CONST	SEGMENT
??_C@_09FCJHKOIN@bytearray?$AA@ DB 'bytearray', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NFBFFIOL@memoryview?$AA@
CONST	SEGMENT
??_C@_0L@NFBFFIOL@memoryview?$AA@ DB 'memoryview', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04DDKJGDCM@bool?$AA@
CONST	SEGMENT
??_C@_04DDKJGDCM@bool?$AA@ DB 'bool', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HPMIDMKH@True?$AA@
CONST	SEGMENT
??_C@_04HPMIDMKH@True?$AA@ DB 'True', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MKDOIIA@False?$AA@
CONST	SEGMENT
??_C@_05MKDOIIA@False?$AA@ DB 'False', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HCLFFHDH@NotImplemented?$AA@
CONST	SEGMENT
??_C@_0P@HCLFFHDH@NotImplemented?$AA@ DB 'NotImplemented', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08KKBGFFMJ@Ellipsis?$AA@
CONST	SEGMENT
??_C@_08KKBGFFMJ@Ellipsis?$AA@ DB 'Ellipsis', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04OHJIHAFH@None?$AA@
CONST	SEGMENT
??_C@_04OHJIHAFH@None?$AA@ DB 'None', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyBuiltin_Init
_TEXT	SEGMENT
_PyBuiltin_Init PROC					; COMDAT

; 2414 : {

$LN47:
  00000	40 56		 push	 rsi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2415 :     PyObject *mod, *dict, *debug;
; 2416 :     mod = PyModule_Create(&builtinsmodule);

  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:builtinsmodule
  0000d	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00012	e8 00 00 00 00	 call	 PyModule_Create2
  00017	48 8b f0	 mov	 rsi, rax

; 2417 :     if (mod == NULL)

  0001a	48 85 c0	 test	 rax, rax
  0001d	75 06		 jne	 SHORT $LN41@PyBuiltin_

; 2477 : #undef ADD_TO_ALL
; 2478 : #undef SETBUILTIN
; 2479 : }

  0001f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00023	5e		 pop	 rsi
  00024	c3		 ret	 0
$LN41@PyBuiltin_:

; 2418 :         return NULL;
; 2419 :     dict = PyModule_GetDict(mod);

  00025	48 8b c8	 mov	 rcx, rax
  00028	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0002d	e8 00 00 00 00	 call	 PyModule_GetDict

; 2420 : 
; 2421 : #ifdef Py_TRACE_REFS
; 2422 :     /* "builtins" exposes a number of statically allocated objects
; 2423 :      * that, before this code was added in 2.3, never showed up in
; 2424 :      * the list of "all objects" maintained by Py_TRACE_REFS.  As a
; 2425 :      * result, programs leaking references to None and False (etc)
; 2426 :      * couldn't be diagnosed by examining sys.getobjects(0).
; 2427 :      */
; 2428 : #define ADD_TO_ALL(OBJECT) _Py_AddToAllObjects((PyObject *)(OBJECT), 0)
; 2429 : #else
; 2430 : #define ADD_TO_ALL(OBJECT) (void)0
; 2431 : #endif
; 2432 : 
; 2433 : #define SETBUILTIN(NAME, OBJECT) \
; 2434 :     if (PyDict_SetItemString(dict, NAME, (PyObject *)OBJECT) < 0)       \
; 2435 :         return NULL;                                                    \
; 2436 :     ADD_TO_ALL(OBJECT)
; 2437 : 
; 2438 :     SETBUILTIN("None",                  Py_None);

  00032	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04OHJIHAFH@None?$AA@
  00040	48 8b c8	 mov	 rcx, rax
  00043	48 8b d8	 mov	 rbx, rax
  00046	e8 00 00 00 00	 call	 PyDict_SetItemString
  0004b	85 c0		 test	 eax, eax
  0004d	0f 88 70 03 00
	00		 js	 $LN46@PyBuiltin_

; 2439 :     SETBUILTIN("Ellipsis",              Py_Ellipsis);

  00053	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_EllipsisObject
  0005a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08KKBGFFMJ@Ellipsis?$AA@
  00061	48 8b cb	 mov	 rcx, rbx
  00064	e8 00 00 00 00	 call	 PyDict_SetItemString
  00069	85 c0		 test	 eax, eax
  0006b	0f 88 52 03 00
	00		 js	 $LN46@PyBuiltin_

; 2440 :     SETBUILTIN("NotImplemented",        Py_NotImplemented);

  00071	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NotImplementedStruct
  00078	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@HCLFFHDH@NotImplemented?$AA@
  0007f	48 8b cb	 mov	 rcx, rbx
  00082	e8 00 00 00 00	 call	 PyDict_SetItemString
  00087	85 c0		 test	 eax, eax
  00089	0f 88 34 03 00
	00		 js	 $LN46@PyBuiltin_

; 2441 :     SETBUILTIN("False",                 Py_False);

  0008f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_FalseStruct
  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05MKDOIIA@False?$AA@
  0009d	48 8b cb	 mov	 rcx, rbx
  000a0	e8 00 00 00 00	 call	 PyDict_SetItemString
  000a5	85 c0		 test	 eax, eax
  000a7	0f 88 16 03 00
	00		 js	 $LN46@PyBuiltin_

; 2442 :     SETBUILTIN("True",                  Py_True);

  000ad	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_TrueStruct
  000b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04HPMIDMKH@True?$AA@
  000bb	48 8b cb	 mov	 rcx, rbx
  000be	e8 00 00 00 00	 call	 PyDict_SetItemString
  000c3	85 c0		 test	 eax, eax
  000c5	0f 88 f8 02 00
	00		 js	 $LN46@PyBuiltin_

; 2443 :     SETBUILTIN("bool",                  &PyBool_Type);

  000cb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyBool_Type
  000d2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04DDKJGDCM@bool?$AA@
  000d9	48 8b cb	 mov	 rcx, rbx
  000dc	e8 00 00 00 00	 call	 PyDict_SetItemString
  000e1	85 c0		 test	 eax, eax
  000e3	0f 88 da 02 00
	00		 js	 $LN46@PyBuiltin_

; 2444 :     SETBUILTIN("memoryview",        &PyMemoryView_Type);

  000e9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyMemoryView_Type
  000f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@NFBFFIOL@memoryview?$AA@
  000f7	48 8b cb	 mov	 rcx, rbx
  000fa	e8 00 00 00 00	 call	 PyDict_SetItemString
  000ff	85 c0		 test	 eax, eax
  00101	0f 88 bc 02 00
	00		 js	 $LN46@PyBuiltin_

; 2445 :     SETBUILTIN("bytearray",             &PyByteArray_Type);

  00107	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyByteArray_Type
  0010e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09FCJHKOIN@bytearray?$AA@
  00115	48 8b cb	 mov	 rcx, rbx
  00118	e8 00 00 00 00	 call	 PyDict_SetItemString
  0011d	85 c0		 test	 eax, eax
  0011f	0f 88 9e 02 00
	00		 js	 $LN46@PyBuiltin_

; 2446 :     SETBUILTIN("bytes",                 &PyBytes_Type);

  00125	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyBytes_Type
  0012c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05FBJAGGIG@bytes?$AA@
  00133	48 8b cb	 mov	 rcx, rbx
  00136	e8 00 00 00 00	 call	 PyDict_SetItemString
  0013b	85 c0		 test	 eax, eax
  0013d	0f 88 80 02 00
	00		 js	 $LN46@PyBuiltin_

; 2447 :     SETBUILTIN("classmethod",           &PyClassMethod_Type);

  00143	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyClassMethod_Type
  0014a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@FGHOINCL@classmethod?$AA@
  00151	48 8b cb	 mov	 rcx, rbx
  00154	e8 00 00 00 00	 call	 PyDict_SetItemString
  00159	85 c0		 test	 eax, eax
  0015b	0f 88 62 02 00
	00		 js	 $LN46@PyBuiltin_

; 2448 :     SETBUILTIN("complex",               &PyComplex_Type);

  00161	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyComplex_Type
  00168	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07CMPFPFAH@complex?$AA@
  0016f	48 8b cb	 mov	 rcx, rbx
  00172	e8 00 00 00 00	 call	 PyDict_SetItemString
  00177	85 c0		 test	 eax, eax
  00179	0f 88 44 02 00
	00		 js	 $LN46@PyBuiltin_

; 2449 :     SETBUILTIN("dict",                  &PyDict_Type);

  0017f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyDict_Type
  00186	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04BCIDKIGN@dict?$AA@
  0018d	48 8b cb	 mov	 rcx, rbx
  00190	e8 00 00 00 00	 call	 PyDict_SetItemString
  00195	85 c0		 test	 eax, eax
  00197	0f 88 26 02 00
	00		 js	 $LN46@PyBuiltin_

; 2450 :     SETBUILTIN("enumerate",             &PyEnum_Type);

  0019d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyEnum_Type
  001a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09KCAIFCBE@enumerate?$AA@
  001ab	48 8b cb	 mov	 rcx, rbx
  001ae	e8 00 00 00 00	 call	 PyDict_SetItemString
  001b3	85 c0		 test	 eax, eax
  001b5	0f 88 08 02 00
	00		 js	 $LN46@PyBuiltin_

; 2451 :     SETBUILTIN("filter",                &PyFilter_Type);

  001bb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyFilter_Type
  001c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06EOIELIPE@filter?$AA@
  001c9	48 8b cb	 mov	 rcx, rbx
  001cc	e8 00 00 00 00	 call	 PyDict_SetItemString
  001d1	85 c0		 test	 eax, eax
  001d3	0f 88 ea 01 00
	00		 js	 $LN46@PyBuiltin_

; 2452 :     SETBUILTIN("float",                 &PyFloat_Type);

  001d9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyFloat_Type
  001e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KNFBNCOH@float?$AA@
  001e7	48 8b cb	 mov	 rcx, rbx
  001ea	e8 00 00 00 00	 call	 PyDict_SetItemString
  001ef	85 c0		 test	 eax, eax
  001f1	0f 88 cc 01 00
	00		 js	 $LN46@PyBuiltin_

; 2453 :     SETBUILTIN("frozenset",             &PyFrozenSet_Type);

  001f7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyFrozenSet_Type
  001fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09FNPENIBB@frozenset?$AA@
  00205	48 8b cb	 mov	 rcx, rbx
  00208	e8 00 00 00 00	 call	 PyDict_SetItemString
  0020d	85 c0		 test	 eax, eax
  0020f	0f 88 ae 01 00
	00		 js	 $LN46@PyBuiltin_

; 2454 :     SETBUILTIN("property",              &PyProperty_Type);

  00215	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyProperty_Type
  0021c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08EMBNBNLN@property?$AA@
  00223	48 8b cb	 mov	 rcx, rbx
  00226	e8 00 00 00 00	 call	 PyDict_SetItemString
  0022b	85 c0		 test	 eax, eax
  0022d	0f 88 90 01 00
	00		 js	 $LN46@PyBuiltin_

; 2455 :     SETBUILTIN("int",                   &PyLong_Type);

  00233	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyLong_Type
  0023a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03JBIPMCLC@int?$AA@
  00241	48 8b cb	 mov	 rcx, rbx
  00244	e8 00 00 00 00	 call	 PyDict_SetItemString
  00249	85 c0		 test	 eax, eax
  0024b	0f 88 72 01 00
	00		 js	 $LN46@PyBuiltin_

; 2456 :     SETBUILTIN("list",                  &PyList_Type);

  00251	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyList_Type
  00258	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04DONFEANM@list?$AA@
  0025f	48 8b cb	 mov	 rcx, rbx
  00262	e8 00 00 00 00	 call	 PyDict_SetItemString
  00267	85 c0		 test	 eax, eax
  00269	0f 88 54 01 00
	00		 js	 $LN46@PyBuiltin_

; 2457 :     SETBUILTIN("map",                   &PyMap_Type);

  0026f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyMap_Type
  00276	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03HBNNNHNM@map?$AA@
  0027d	48 8b cb	 mov	 rcx, rbx
  00280	e8 00 00 00 00	 call	 PyDict_SetItemString
  00285	85 c0		 test	 eax, eax
  00287	0f 88 36 01 00
	00		 js	 $LN46@PyBuiltin_

; 2458 :     SETBUILTIN("object",                &PyBaseObject_Type);

  0028d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyBaseObject_Type
  00294	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06IEOJBDIK@object?$AA@
  0029b	48 8b cb	 mov	 rcx, rbx
  0029e	e8 00 00 00 00	 call	 PyDict_SetItemString
  002a3	85 c0		 test	 eax, eax
  002a5	0f 88 18 01 00
	00		 js	 $LN46@PyBuiltin_

; 2459 :     SETBUILTIN("range",                 &PyRange_Type);

  002ab	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyRange_Type
  002b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05CCGOGOBM@range?$AA@
  002b9	48 8b cb	 mov	 rcx, rbx
  002bc	e8 00 00 00 00	 call	 PyDict_SetItemString
  002c1	85 c0		 test	 eax, eax
  002c3	0f 88 fa 00 00
	00		 js	 $LN46@PyBuiltin_

; 2460 :     SETBUILTIN("reversed",              &PyReversed_Type);

  002c9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyReversed_Type
  002d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08DNDMMOJA@reversed?$AA@
  002d7	48 8b cb	 mov	 rcx, rbx
  002da	e8 00 00 00 00	 call	 PyDict_SetItemString
  002df	85 c0		 test	 eax, eax
  002e1	0f 88 dc 00 00
	00		 js	 $LN46@PyBuiltin_

; 2461 :     SETBUILTIN("set",                   &PySet_Type);

  002e7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PySet_Type
  002ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03KCHOJKKI@set?$AA@
  002f5	48 8b cb	 mov	 rcx, rbx
  002f8	e8 00 00 00 00	 call	 PyDict_SetItemString
  002fd	85 c0		 test	 eax, eax
  002ff	0f 88 be 00 00
	00		 js	 $LN46@PyBuiltin_

; 2462 :     SETBUILTIN("slice",                 &PySlice_Type);

  00305	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PySlice_Type
  0030c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05ILHMOJGN@slice?$AA@
  00313	48 8b cb	 mov	 rcx, rbx
  00316	e8 00 00 00 00	 call	 PyDict_SetItemString
  0031b	85 c0		 test	 eax, eax
  0031d	0f 88 a0 00 00
	00		 js	 $LN46@PyBuiltin_

; 2463 :     SETBUILTIN("staticmethod",          &PyStaticMethod_Type);

  00323	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyStaticMethod_Type
  0032a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@BCCHOHJA@staticmethod?$AA@
  00331	48 8b cb	 mov	 rcx, rbx
  00334	e8 00 00 00 00	 call	 PyDict_SetItemString
  00339	85 c0		 test	 eax, eax
  0033b	0f 88 82 00 00
	00		 js	 $LN46@PyBuiltin_

; 2464 :     SETBUILTIN("str",                   &PyUnicode_Type);

  00341	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyUnicode_Type
  00348	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03OJMAPEGJ@str?$AA@
  0034f	48 8b cb	 mov	 rcx, rbx
  00352	e8 00 00 00 00	 call	 PyDict_SetItemString
  00357	85 c0		 test	 eax, eax
  00359	78 68		 js	 SHORT $LN46@PyBuiltin_

; 2465 :     SETBUILTIN("super",                 &PySuper_Type);

  0035b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PySuper_Type
  00362	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05MKJDPMKP@super?$AA@
  00369	48 8b cb	 mov	 rcx, rbx
  0036c	e8 00 00 00 00	 call	 PyDict_SetItemString
  00371	85 c0		 test	 eax, eax
  00373	78 4e		 js	 SHORT $LN46@PyBuiltin_

; 2466 :     SETBUILTIN("tuple",                 &PyTuple_Type);

  00375	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyTuple_Type
  0037c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05NNMEHDAO@tuple?$AA@
  00383	48 8b cb	 mov	 rcx, rbx
  00386	e8 00 00 00 00	 call	 PyDict_SetItemString
  0038b	85 c0		 test	 eax, eax
  0038d	78 34		 js	 SHORT $LN46@PyBuiltin_

; 2467 :     SETBUILTIN("type",                  &PyType_Type);

  0038f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyType_Type
  00396	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04GPMDFGEJ@type?$AA@
  0039d	48 8b cb	 mov	 rcx, rbx
  003a0	e8 00 00 00 00	 call	 PyDict_SetItemString
  003a5	85 c0		 test	 eax, eax
  003a7	78 1a		 js	 SHORT $LN46@PyBuiltin_

; 2468 :     SETBUILTIN("zip",                   &PyZip_Type);

  003a9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyZip_Type
  003b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03LCAAOJEC@zip?$AA@
  003b7	48 8b cb	 mov	 rcx, rbx
  003ba	e8 00 00 00 00	 call	 PyDict_SetItemString
  003bf	85 c0		 test	 eax, eax
  003c1	79 0d		 jns	 SHORT $LN10@PyBuiltin_
$LN46@PyBuiltin_:
  003c3	33 c0		 xor	 eax, eax
  003c5	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 2477 : #undef ADD_TO_ALL
; 2478 : #undef SETBUILTIN
; 2479 : }

  003ca	48 83 c4 20	 add	 rsp, 32			; 00000020H
  003ce	5e		 pop	 rsi
  003cf	c3		 ret	 0
$LN10@PyBuiltin_:

; 2469 :     debug = PyBool_FromLong(Py_OptimizeFlag == 0);

  003d0	33 c9		 xor	 ecx, ecx
  003d2	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  003d7	39 0d 00 00 00
	00		 cmp	 DWORD PTR Py_OptimizeFlag, ecx
  003dd	0f 94 c1	 sete	 cl
  003e0	e8 00 00 00 00	 call	 PyBool_FromLong

; 2470 :     if (PyDict_SetItemString(dict, "__debug__", debug) < 0) {

  003e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09PMJCCPKK@__debug__?$AA@
  003ec	48 8b cb	 mov	 rcx, rbx
  003ef	4c 8b c0	 mov	 r8, rax
  003f2	48 8b f8	 mov	 rdi, rax
  003f5	e8 00 00 00 00	 call	 PyDict_SetItemString
  003fa	85 c0		 test	 eax, eax
  003fc	79 1f		 jns	 SHORT $LN4@PyBuiltin_

; 2471 :         Py_XDECREF(debug);

  003fe	48 85 ff	 test	 rdi, rdi
  00401	74 08		 je	 SHORT $LN7@PyBuiltin_
  00403	48 8b cf	 mov	 rcx, rdi
  00406	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@PyBuiltin_:

; 2472 :         return NULL;

  0040b	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]
  00410	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00415	33 c0		 xor	 eax, eax

; 2477 : #undef ADD_TO_ALL
; 2478 : #undef SETBUILTIN
; 2479 : }

  00417	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0041b	5e		 pop	 rsi
  0041c	c3		 ret	 0
$LN4@PyBuiltin_:

; 2473 :     }
; 2474 :     Py_XDECREF(debug);

  0041d	48 85 ff	 test	 rdi, rdi
  00420	74 08		 je	 SHORT $LN3@PyBuiltin_
  00422	48 8b cf	 mov	 rcx, rdi
  00425	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@PyBuiltin_:

; 2475 : 
; 2476 :     return mod;

  0042a	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]
  0042f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00434	48 8b c6	 mov	 rax, rsi

; 2477 : #undef ADD_TO_ALL
; 2478 : #undef SETBUILTIN
; 2479 : }

  00437	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0043b	5e		 pop	 rsi
  0043c	c3		 ret	 0
_PyBuiltin_Init ENDP
_TEXT	ENDS
END
