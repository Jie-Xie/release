; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_03IKGEINEE@?$CFs?5?$AA@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_01GPOEFGEJ@?7?$AA@			; `string'
EXTRN	__imp_fprintf:PROC
_BSS	SEGMENT
level	DD	01H DUP (?)
atbol	DD	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\parser\listnode.c
pdata	SEGMENT
$pdata$list1node DD imagerel list1node
	DD	imagerel list1node+33
	DD	imagerel $unwind$list1node
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$list1node DD imagerel list1node+33
	DD	imagerel list1node+110
	DD	imagerel $chain$0$list1node
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$list1node DD imagerel list1node+110
	DD	imagerel list1node+141
	DD	imagerel $chain$2$list1node
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$list1node DD imagerel list1node+141
	DD	imagerel list1node+197
	DD	imagerel $chain$3$list1node
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$list1node DD imagerel list1node+197
	DD	imagerel list1node+270
	DD	imagerel $chain$4$list1node
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$list1node DD imagerel list1node+270
	DD	imagerel list1node+302
	DD	imagerel $chain$6$list1node
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$list1node DD imagerel list1node+302
	DD	imagerel list1node+324
	DD	imagerel $chain$8$list1node
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$10$list1node DD imagerel list1node+324
	DD	imagerel list1node+345
	DD	imagerel $chain$10$list1node
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$11$list1node DD imagerel list1node+345
	DD	imagerel list1node+347
	DD	imagerel $chain$11$list1node
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$11$list1node DD 021H
	DD	imagerel list1node
	DD	imagerel list1node+33
	DD	imagerel $unwind$list1node
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$10$list1node DD 020021H
	DD	066400H
	DD	imagerel list1node
	DD	imagerel list1node+33
	DD	imagerel $unwind$list1node
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$list1node DD 020021H
	DD	066400H
	DD	imagerel list1node
	DD	imagerel list1node+33
	DD	imagerel $unwind$list1node
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$list1node DD 020021H
	DD	066400H
	DD	imagerel list1node
	DD	imagerel list1node+33
	DD	imagerel $unwind$list1node
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$list1node DD 021H
	DD	imagerel list1node+110
	DD	imagerel list1node+141
	DD	imagerel $chain$2$list1node
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$list1node DD 020521H
	DD	077405H
	DD	imagerel list1node+110
	DD	imagerel list1node+141
	DD	imagerel $chain$2$list1node
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$list1node DD 020021H
	DD	066400H
	DD	imagerel list1node
	DD	imagerel list1node+33
	DD	imagerel $unwind$list1node
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$list1node DD 020521H
	DD	066405H
	DD	imagerel list1node
	DD	imagerel list1node+33
	DD	imagerel $unwind$list1node
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$list1node DD 041301H
	DD	083413H
	DD	0500f3213H
xdata	ENDS
;	COMDAT ??_C@_03IKGEINEE@?$CFs?5?$AA@
CONST	SEGMENT
??_C@_03IKGEINEE@?$CFs?5?$AA@ DB '%s ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01GPOEFGEJ@?7?$AA@
CONST	SEGMENT
??_C@_01GPOEFGEJ@?7?$AA@ DB 09H, 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT list1node
_TEXT	SEGMENT
fp$ = 48
n$ = 56
list1node PROC						; COMDAT

; 31   :     if (n == 0)

  00000	48 85 d2	 test	 rdx, rdx
  00003	0f 84 50 01 00
	00		 je	 $LN29@list1node
  00009	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  0000e	55		 push	 rbp
  0000f	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 32   :         return;
; 33   :     if (ISNONTERMINAL(TYPE(n))) {

  00013	0f b7 02	 movzx	 eax, WORD PTR [rdx]
  00016	48 8b e9	 mov	 rbp, rcx
  00019	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  0001e	48 8b da	 mov	 rbx, rdx
  00021	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  00026	66 3b c1	 cmp	 ax, cx
  00029	7c 43		 jl	 SHORT $LN27@list1node

; 34   :         int i;
; 35   :         for (i = 0; i < NCH(n); i++)

  0002b	33 f6		 xor	 esi, esi
  0002d	39 72 18	 cmp	 DWORD PTR [rdx+24], esi
  00030	0f 8e 14 01 00
	00		 jle	 $LN28@list1node
  00036	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL18@list1node:

; 36   :             list1node(fp, CHILD(n, i));

  00040	48 63 c6	 movsxd	 rax, esi
  00043	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  00047	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0004b	48 8d 14 c8	 lea	 rdx, QWORD PTR [rax+rcx*8]
  0004f	48 8b cd	 mov	 rcx, rbp
  00052	e8 00 00 00 00	 call	 list1node
  00057	ff c6		 inc	 esi
  00059	3b 73 18	 cmp	 esi, DWORD PTR [rbx+24]
  0005c	7c e2		 jl	 SHORT $LL18@list1node
  0005e	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]

; 61   :             break;
; 62   :         }
; 63   :     }
; 64   :     else
; 65   :         fprintf(fp, "? ");
; 66   : }

  00063	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00068	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006c	5d		 pop	 rbp
  0006d	c3		 ret	 0
$LN27@list1node:

; 37   :     }
; 38   :     else if (ISTERMINAL(TYPE(n))) {
; 39   :         switch (TYPE(n)) {

  0006e	0f bf c8	 movsx	 ecx, ax
  00071	83 e9 05	 sub	 ecx, 5
  00074	0f 84 ca 00 00
	00		 je	 $LN11@list1node
  0007a	ff c9		 dec	 ecx
  0007c	0f 84 ac 00 00
	00		 je	 $LN10@list1node

; 45   :             break;
; 46   :         default:
; 47   :             if (atbol) {

  00082	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR atbol, 0
  00089	74 3a		 je	 SHORT $LN8@list1node

; 48   :                 int i;
; 49   :                 for (i = 0; i < level; ++i)

  0008b	33 f6		 xor	 esi, esi
  0008d	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  00092	39 35 00 00 00
	00		 cmp	 DWORD PTR level, esi
  00098	8b fe		 mov	 edi, esi
  0009a	7e 1e		 jle	 SHORT $LN5@list1node
  0009c	0f 1f 40 00	 npad	 4
$LL7@list1node:

; 50   :                     fprintf(fp, "\t");

  000a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01GPOEFGEJ@?7?$AA@
  000a7	48 8b cd	 mov	 rcx, rbp
  000aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
  000b0	ff c7		 inc	 edi
  000b2	3b 3d 00 00 00
	00		 cmp	 edi, DWORD PTR level
  000b8	7c e6		 jl	 SHORT $LL7@list1node
$LN5@list1node:
  000ba	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]

; 51   :                 atbol = 0;

  000bf	89 35 00 00 00
	00		 mov	 DWORD PTR atbol, esi
$LN8@list1node:

; 52   :             }
; 53   :             if (TYPE(n) == NEWLINE) {

  000c5	66 83 3b 04	 cmp	 WORD PTR [rbx], 4

; 54   :                 if (STR(n) != NULL)

  000c9	4c 8b 43 08	 mov	 r8, QWORD PTR [rbx+8]
  000cd	75 3f		 jne	 SHORT $LN4@list1node
  000cf	4d 85 c0	 test	 r8, r8
  000d2	74 10		 je	 SHORT $LN3@list1node

; 55   :                     fprintf(fp, "%s", STR(n));

  000d4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs?$AA@
  000db	48 8b cd	 mov	 rcx, rbp
  000de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
$LN3@list1node:

; 56   :                 fprintf(fp, "\n");

  000e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  000eb	48 8b cd	 mov	 rcx, rbp
  000ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
  000f4	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]

; 57   :                 atbol = 1;

  000f9	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR atbol, 1

; 61   :             break;
; 62   :         }
; 63   :     }
; 64   :     else
; 65   :         fprintf(fp, "? ");
; 66   : }

  00103	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00108	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0010c	5d		 pop	 rbp
  0010d	c3		 ret	 0
$LN4@list1node:

; 58   :             }
; 59   :             else
; 60   :                 fprintf(fp, "%s ", STR(n));

  0010e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03IKGEINEE@?$CFs?5?$AA@
  00115	48 8b cd	 mov	 rcx, rbp
  00118	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]

; 61   :             break;
; 62   :         }
; 63   :     }
; 64   :     else
; 65   :         fprintf(fp, "? ");
; 66   : }

  0011d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00122	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00126	5d		 pop	 rbp
  00127	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_fprintf
$LN10@list1node:

; 42   :             break;
; 43   :         case DEDENT:
; 44   :             --level;

  0012e	ff 0d 00 00 00
	00		 dec	 DWORD PTR level
  00134	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]

; 61   :             break;
; 62   :         }
; 63   :     }
; 64   :     else
; 65   :         fprintf(fp, "? ");
; 66   : }

  00139	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0013e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00142	5d		 pop	 rbp
  00143	c3		 ret	 0
$LN11@list1node:

; 40   :         case INDENT:
; 41   :             ++level;

  00144	ff 05 00 00 00
	00		 inc	 DWORD PTR level
$LN28@list1node:
  0014a	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]

; 61   :             break;
; 62   :         }
; 63   :     }
; 64   :     else
; 65   :         fprintf(fp, "? ");
; 66   : }

  0014f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00154	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00158	5d		 pop	 rbp
$LN29@list1node:
  00159	f3 c3		 fatret	 0
list1node ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT listnode
_TEXT	SEGMENT
fp$ = 8
n$ = 16
listnode PROC						; COMDAT

; 23   :     level = 0;

  00000	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR level, 0

; 24   :     atbol = 1;

  0000a	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR atbol, 1

; 25   :     list1node(fp, n);
; 26   : }

  00014	e9 00 00 00 00	 jmp	 list1node
listnode ENDP
_TEXT	ENDS
PUBLIC	PyNode_ListTree
EXTRN	__imp___iob_func:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyNode_ListTree DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$PyNode_ListTree
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyNode_ListTree DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyNode_ListTree
_TEXT	SEGMENT
n$ = 48
PyNode_ListTree PROC					; COMDAT

; 14   : {

$LN3:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 15   :     listnode(stdout, n);

  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0000f	48 8b d3	 mov	 rdx, rbx
  00012	48 8d 48 30	 lea	 rcx, QWORD PTR [rax+48]

; 16   : }

  00016	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001a	5b		 pop	 rbx
  0001b	e9 00 00 00 00	 jmp	 listnode
PyNode_ListTree ENDP
_TEXT	ENDS
END
