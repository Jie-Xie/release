; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_04GDDCBEKB@cell?$AA@			; `string'
PUBLIC	??_C@_0O@IHDFIJJ@cell_contents?$AA@		; `string'
PUBLIC	PyCell_Type
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
;	COMDAT ??_C@_04GDDCBEKB@cell?$AA@
CONST	SEGMENT
??_C@_04GDDCBEKB@cell?$AA@ DB 'cell', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
cell_getsetlist DQ FLAT:??_C@_0O@IHDFIJJ@cell_contents?$AA@
	DQ	FLAT:cell_get_contents
	DQ	0000000000000000H
	ORG $+16
	DQ	0000000000000000H
	ORG $+32
PyCell_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_04GDDCBEKB@cell?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:cell_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:cell_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:cell_traverse
	DQ	FLAT:cell_clear
	DQ	FLAT:cell_richcompare
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:cell_getsetlist
	ORG $+136
_DATA	ENDS
;	COMDAT ??_C@_0O@IHDFIJJ@cell_contents?$AA@
CONST	SEGMENT
??_C@_0O@IHDFIJJ@cell_contents?$AA@ DB 'cell_contents', 00H ; `string'
CONST	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ ; `string'
PUBLIC	??_C@_0L@EFEENECG@PyCell_New?$AA@		; `string'
PUBLIC	??_C@_0BI@GCIOHBGJ@?4?4?2Objects?2cellobject?4c?$AA@ ; `string'
PUBLIC	PyCell_New
EXTRN	_PyGC_generation0:QWORD
EXTRN	Py_FatalError:PROC
EXTRN	_PyObject_GC_New:PROC
EXTRN	_PxObject_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCell_New DD imagerel $LN22
	DD	imagerel $LN22+294
	DD	imagerel $unwind$PyCell_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCell_New DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
CONST	SEGMENT
??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ DB 'GC object alread'
	DB	'y tracked', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EFEENECG@PyCell_New?$AA@
CONST	SEGMENT
??_C@_0L@EFEENECG@PyCell_New?$AA@ DB 'PyCell_New', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GCIOHBGJ@?4?4?2Objects?2cellobject?4c?$AA@
CONST	SEGMENT
??_C@_0BI@GCIOHBGJ@?4?4?2Objects?2cellobject?4c?$AA@ DB '..\Objects\cello'
	DB	'bject.c', 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\cellobject.c
CONST	ENDS
;	COMDAT PyCell_New
_TEXT	SEGMENT
obj$ = 64
PyCell_New PROC						; COMDAT

; 7    : {

$LN22:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b d9	 mov	 rbx, rcx

; 8    :     PyCellObject *op;
; 9    : 
; 10   :     op = (PyCellObject *)PyObject_GC_New(PyCellObject, &PyCell_Type);

  0000d	e8 00 00 00 00	 call	 _Py_PXCTX
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyCell_Type
  00019	85 c0		 test	 eax, eax
  0001b	74 07		 je	 SHORT $LN13@PyCell_New
  0001d	e8 00 00 00 00	 call	 _PxObject_New
  00022	eb 05		 jmp	 SHORT $LN21@PyCell_New
$LN13@PyCell_New:
  00024	e8 00 00 00 00	 call	 _PyObject_GC_New
$LN21@PyCell_New:
  00029	48 8b f8	 mov	 rdi, rax

; 11   :     if (op == NULL)

  0002c	48 85 c0	 test	 rax, rax
  0002f	75 0b		 jne	 SHORT $LN10@PyCell_New

; 18   : }

  00031	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00036	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0003a	5f		 pop	 rdi
  0003b	c3		 ret	 0
$LN10@PyCell_New:

; 12   :         return NULL;
; 13   :     op->ob_ref = obj;

  0003c	48 89 5f 60	 mov	 QWORD PTR [rdi+96], rbx

; 14   :     Py_XINCREF(obj);

  00040	48 85 db	 test	 rbx, rbx
  00043	74 3b		 je	 SHORT $LN8@PyCell_New
  00045	e8 00 00 00 00	 call	 _Py_PXCTX
  0004a	85 c0		 test	 eax, eax
  0004c	75 32		 jne	 SHORT $LN8@PyCell_New
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0005c	4c 8b cb	 mov	 r9, rbx
  0005f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00065	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0006d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00072	85 c0		 test	 eax, eax
  00074	75 06		 jne	 SHORT $LN17@PyCell_New
  00076	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0007a	74 04		 je	 SHORT $LN8@PyCell_New
$LN17@PyCell_New:
  0007c	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN8@PyCell_New:

; 15   : 
; 16   :     _PyObject_GC_TRACK(op);

  00080	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@GCIOHBGJ@?4?4?2Objects?2cellobject?4c?$AA@
  00087	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@EFEENECG@PyCell_New?$AA@
  0008e	4c 8b cf	 mov	 r9, rdi
  00091	41 b8 10 00 00
	00		 mov	 r8d, 16
  00097	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0009f	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a4	85 c0		 test	 eax, eax
  000a6	75 70		 jne	 SHORT $LN2@PyCell_New
  000a8	44 8d 40 10	 lea	 r8d, QWORD PTR [rax+16]
  000ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@GCIOHBGJ@?4?4?2Objects?2cellobject?4c?$AA@
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@EFEENECG@PyCell_New?$AA@
  000ba	4c 8b cf	 mov	 r9, rdi
  000bd	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	74 04		 je	 SHORT $LN15@PyCell_New
  000ce	33 db		 xor	 ebx, ebx
  000d0	eb 04		 jmp	 SHORT $LN16@PyCell_New
$LN15@PyCell_New:
  000d2	48 8d 5f e8	 lea	 rbx, QWORD PTR [rdi-24]
$LN16@PyCell_New:
  000d6	48 83 7b 10 fe	 cmp	 QWORD PTR [rbx+16], -2
  000db	74 0c		 je	 SHORT $LN1@PyCell_New
  000dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  000e4	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyCell_New:
  000e9	48 c7 43 10 fd
	ff ff ff	 mov	 QWORD PTR [rbx+16], -3
  000f1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  000f8	48 89 03	 mov	 QWORD PTR [rbx], rax
  000fb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00102	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00106	48 89 4b 08	 mov	 QWORD PTR [rbx+8], rcx
  0010a	48 89 19	 mov	 QWORD PTR [rcx], rbx
  0010d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00114	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
$LN2@PyCell_New:

; 17   :     return (PyObject *)op;

  00118	48 8b c7	 mov	 rax, rdi

; 18   : }

  0011b	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00120	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00124	5f		 pop	 rdi
  00125	c3		 ret	 0
PyCell_New ENDP
_TEXT	ENDS
PUBLIC	PyCell_Get
EXTRN	_PyErr_BadInternalCall:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyCell_Get DD imagerel $LN12
	DD	imagerel $LN12+135
	DD	imagerel $unwind$PyCell_Get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCell_Get DD 043401H
	DD	083434H
	DD	070025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\cellobject.c
xdata	ENDS
;	COMDAT PyCell_Get
_TEXT	SEGMENT
op$ = 64
PyCell_Get PROC						; COMDAT

; 22   : {

$LN12:
  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 23   :     if (!PyCell_Check(op)) {

  00006	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCell_Type
  0000d	48 8b f9	 mov	 rdi, rcx
  00010	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00014	74 19		 je	 SHORT $LN4@PyCell_Get

; 24   :         PyErr_BadInternalCall();

  00016	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@GCIOHBGJ@?4?4?2Objects?2cellobject?4c?$AA@
  0001d	ba 18 00 00 00	 mov	 edx, 24
  00022	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 25   :         return NULL;

  00027	33 c0		 xor	 eax, eax

; 29   : }

  00029	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0002d	5f		 pop	 rdi
  0002e	c3		 ret	 0
$LN4@PyCell_Get:
  0002f	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx

; 26   :     }
; 27   :     Py_XINCREF(((PyCellObject*)op)->ob_ref);

  00034	48 8b 59 60	 mov	 rbx, QWORD PTR [rcx+96]
  00038	48 85 db	 test	 rbx, rbx
  0003b	74 3b		 je	 SHORT $LN3@PyCell_Get
  0003d	e8 00 00 00 00	 call	 _Py_PXCTX
  00042	85 c0		 test	 eax, eax
  00044	75 32		 jne	 SHORT $LN3@PyCell_Get
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00054	4c 8b cb	 mov	 r9, rbx
  00057	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0005d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00065	e8 00 00 00 00	 call	 _PyParallel_Guard
  0006a	85 c0		 test	 eax, eax
  0006c	75 06		 jne	 SHORT $LN8@PyCell_Get
  0006e	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00072	74 04		 je	 SHORT $LN3@PyCell_Get
$LN8@PyCell_Get:
  00074	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN3@PyCell_Get:

; 28   :     return PyCell_GET(op);

  00078	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  0007c	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 29   : }

  00081	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00085	5f		 pop	 rdi
  00086	c3		 ret	 0
PyCell_Get ENDP
_TEXT	ENDS
PUBLIC	PyCell_Set
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyCell_Set DD imagerel $LN27
	DD	imagerel $LN27+60
	DD	imagerel $unwind$PyCell_Set
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyCell_Set DD imagerel $LN27+60
	DD	imagerel $LN27+243
	DD	imagerel $chain$0$PyCell_Set
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyCell_Set DD imagerel $LN27+243
	DD	imagerel $LN27+271
	DD	imagerel $chain$2$PyCell_Set
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyCell_Set DD imagerel $LN27+271
	DD	imagerel $LN27+297
	DD	imagerel $chain$4$PyCell_Set
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyCell_Set DD 020021H
	DD	083400H
	DD	imagerel $LN27
	DD	imagerel $LN27+60
	DD	imagerel $unwind$PyCell_Set
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyCell_Set DD 020021H
	DD	083400H
	DD	imagerel $LN27
	DD	imagerel $LN27+60
	DD	imagerel $unwind$PyCell_Set
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyCell_Set DD 020521H
	DD	083405H
	DD	imagerel $LN27
	DD	imagerel $LN27+60
	DD	imagerel $unwind$PyCell_Set
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCell_Set DD 040a01H
	DD	09640aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\cellobject.c
xdata	ENDS
;	COMDAT PyCell_Set
_TEXT	SEGMENT
op$ = 64
obj$ = 72
PyCell_Set PROC						; COMDAT

; 33   : {

$LN27:
  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 34   :     PyObject* oldobj;
; 35   :     if (!PyCell_Check(op)) {

  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCell_Type
  00011	48 8b fa	 mov	 rdi, rdx
  00014	48 8b f1	 mov	 rsi, rcx
  00017	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001b	74 1f		 je	 SHORT $LN9@PyCell_Set

; 36   :         PyErr_BadInternalCall();

  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@GCIOHBGJ@?4?4?2Objects?2cellobject?4c?$AA@
  00024	ba 24 00 00 00	 mov	 edx, 36			; 00000024H
  00029	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 37   :         return -1;

  0002e	83 c8 ff	 or	 eax, -1

; 44   : }

  00031	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00036	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0003a	5f		 pop	 rdi
  0003b	c3		 ret	 0
$LN9@PyCell_Set:
  0003c	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx

; 38   :     }
; 39   :     oldobj = PyCell_GET(op);

  00041	48 8b 59 60	 mov	 rbx, QWORD PTR [rcx+96]

; 40   :     Py_XINCREF(obj);

  00045	48 85 d2	 test	 rdx, rdx
  00048	74 3b		 je	 SHORT $LN7@PyCell_Set
  0004a	e8 00 00 00 00	 call	 _Py_PXCTX
  0004f	85 c0		 test	 eax, eax
  00051	75 32		 jne	 SHORT $LN7@PyCell_Set
  00053	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0005a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00061	4c 8b cf	 mov	 r9, rdi
  00064	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0006a	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00072	e8 00 00 00 00	 call	 _PyParallel_Guard
  00077	85 c0		 test	 eax, eax
  00079	75 06		 jne	 SHORT $LN12@PyCell_Set
  0007b	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  0007f	74 04		 je	 SHORT $LN7@PyCell_Set
$LN12@PyCell_Set:
  00081	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN7@PyCell_Set:

; 41   :     PyCell_SET(op, obj);

  00085	48 89 7e 60	 mov	 QWORD PTR [rsi+96], rdi

; 42   :     Py_XDECREF(oldobj);

  00089	48 85 db	 test	 rbx, rbx
  0008c	0f 84 85 00 00
	00		 je	 $LN3@PyCell_Set
  00092	e8 00 00 00 00	 call	 _Py_PXCTX
  00097	85 c0		 test	 eax, eax
  00099	75 7c		 jne	 SHORT $LN3@PyCell_Set
  0009b	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0009f	a8 20		 test	 al, 32			; 00000020H
  000a1	75 6c		 jne	 SHORT $LN20@PyCell_Set
  000a3	84 c0		 test	 al, al
  000a5	78 68		 js	 SHORT $LN20@PyCell_Set
  000a7	a8 02		 test	 al, 2
  000a9	75 6c		 jne	 SHORT $LN3@PyCell_Set
  000ab	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000af	75 66		 jne	 SHORT $LN3@PyCell_Set
  000b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000bf	4c 8b cb	 mov	 r9, rbx
  000c2	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000c8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d0	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d5	48 8b cb	 mov	 rcx, rbx
  000d8	85 c0		 test	 eax, eax
  000da	74 17		 je	 SHORT $LN25@PyCell_Set
  000dc	e8 00 00 00 00	 call	 _Px_Dealloc
  000e1	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 43   :     return 0;

  000e6	33 c0		 xor	 eax, eax

; 44   : }

  000e8	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000ed	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000f1	5f		 pop	 rdi
  000f2	c3		 ret	 0

; 42   :     Py_XDECREF(oldobj);

$LN25@PyCell_Set:
  000f3	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000f7	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000fd	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 43   :     return 0;

  00102	33 c0		 xor	 eax, eax

; 44   : }

  00104	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00109	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0010d	5f		 pop	 rdi
  0010e	c3		 ret	 0

; 42   :     Py_XDECREF(oldobj);

$LN20@PyCell_Set:
  0010f	48 8b cb	 mov	 rcx, rbx
  00112	e8 00 00 00 00	 call	 Px_DecRef
$LN3@PyCell_Set:

; 44   : }

  00117	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0011c	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00121	33 c0		 xor	 eax, eax
  00123	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00127	5f		 pop	 rdi
  00128	c3		 ret	 0
PyCell_Set ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@KBFDANCB@cell_dealloc?$AA@		; `string'
EXTRN	PyObject_GC_Del:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$cell_dealloc DD imagerel cell_dealloc
	DD	imagerel cell_dealloc+299
	DD	imagerel $unwind$cell_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cell_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0N@KBFDANCB@cell_dealloc?$AA@
CONST	SEGMENT
??_C@_0N@KBFDANCB@cell_dealloc?$AA@ DB 'cell_dealloc', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\cellobject.c
CONST	ENDS
;	COMDAT cell_dealloc
_TEXT	SEGMENT
op$ = 64
cell_dealloc PROC					; COMDAT

; 48   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 49   :     _PyObject_GC_UNTRACK(op);

  0000d	4c 8b c9	 mov	 r9, rcx
  00010	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@GCIOHBGJ@?4?4?2Objects?2cellobject?4c?$AA@
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@KBFDANCB@cell_dealloc?$AA@
  0001e	41 b8 31 00 00
	00		 mov	 r8d, 49			; 00000031H
  00024	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0002c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00031	85 c0		 test	 eax, eax
  00033	75 52		 jne	 SHORT $LN5@cell_deall
  00035	44 8d 40 31	 lea	 r8d, QWORD PTR [rax+49]
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@GCIOHBGJ@?4?4?2Objects?2cellobject?4c?$AA@
  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@KBFDANCB@cell_dealloc?$AA@
  00047	4c 8b cf	 mov	 r9, rdi
  0004a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00052	e8 00 00 00 00	 call	 _PyParallel_Guard
  00057	85 c0		 test	 eax, eax
  00059	74 04		 je	 SHORT $LN11@cell_deall
  0005b	33 d2		 xor	 edx, edx
  0005d	eb 04		 jmp	 SHORT $LN12@cell_deall
$LN11@cell_deall:
  0005f	48 8d 57 e8	 lea	 rdx, QWORD PTR [rdi-24]
$LN12@cell_deall:
  00063	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00066	48 8b 4a 08	 mov	 rcx, QWORD PTR [rdx+8]
  0006a	48 c7 42 10 fe
	ff ff ff	 mov	 QWORD PTR [rdx+16], -2
  00072	48 89 01	 mov	 QWORD PTR [rcx], rax
  00075	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  00078	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  0007c	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00080	48 c7 02 00 00
	00 00		 mov	 QWORD PTR [rdx], 0
$LN5@cell_deall:

; 50   :     Py_XDECREF(op->ob_ref);

  00087	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  0008b	48 85 db	 test	 rbx, rbx
  0008e	0f 84 85 00 00
	00		 je	 $LN3@cell_deall
  00094	e8 00 00 00 00	 call	 _Py_PXCTX
  00099	85 c0		 test	 eax, eax
  0009b	75 7c		 jne	 SHORT $LN3@cell_deall
  0009d	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000a1	a8 20		 test	 al, 32			; 00000020H
  000a3	75 6c		 jne	 SHORT $LN17@cell_deall
  000a5	84 c0		 test	 al, al
  000a7	78 68		 js	 SHORT $LN17@cell_deall
  000a9	a8 02		 test	 al, 2
  000ab	75 6c		 jne	 SHORT $LN3@cell_deall
  000ad	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000b1	75 66		 jne	 SHORT $LN3@cell_deall
  000b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c1	4c 8b cb	 mov	 r9, rbx
  000c4	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000ca	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d2	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d7	48 8b cb	 mov	 rcx, rbx
  000da	85 c0		 test	 eax, eax
  000dc	74 17		 je	 SHORT $LN22@cell_deall
  000de	e8 00 00 00 00	 call	 _Px_Dealloc

; 51   :     PyObject_GC_Del(op);

  000e3	48 8b cf	 mov	 rcx, rdi

; 52   : }

  000e6	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000eb	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ef	5f		 pop	 rdi
  000f0	e9 00 00 00 00	 jmp	 PyObject_GC_Del

; 50   :     Py_XDECREF(op->ob_ref);

$LN22@cell_deall:
  000f5	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000f9	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 51   :     PyObject_GC_Del(op);

  000ff	48 8b cf	 mov	 rcx, rdi

; 52   : }

  00102	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00107	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0010b	5f		 pop	 rdi
  0010c	e9 00 00 00 00	 jmp	 PyObject_GC_Del

; 50   :     Py_XDECREF(op->ob_ref);

$LN17@cell_deall:
  00111	48 8b cb	 mov	 rcx, rbx
  00114	e8 00 00 00 00	 call	 Px_DecRef
$LN3@cell_deall:

; 51   :     PyObject_GC_Del(op);

  00119	48 8b cf	 mov	 rcx, rdi

; 52   : }

  0011c	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00121	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00125	5f		 pop	 rdi
  00126	e9 00 00 00 00	 jmp	 PyObject_GC_Del
cell_dealloc ENDP
_TEXT	ENDS
EXTRN	_Py_NotImplementedStruct:BYTE
EXTRN	PyErr_BadArgument:PROC
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
EXTRN	__ImageBase:BYTE
EXTRN	PyObject_RichCompare:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$cell_richcompare DD imagerel cell_richcompare
	DD	imagerel cell_richcompare+66
	DD	imagerel $unwind$cell_richcompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$cell_richcompare DD imagerel cell_richcompare+66
	DD	imagerel cell_richcompare+268
	DD	imagerel $chain$0$cell_richcompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$cell_richcompare DD imagerel cell_richcompare+268
	DD	imagerel cell_richcompare+285
	DD	imagerel $chain$2$cell_richcompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$cell_richcompare DD imagerel cell_richcompare+285
	DD	imagerel cell_richcompare+368
	DD	imagerel $chain$3$cell_richcompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$cell_richcompare DD imagerel cell_richcompare+368
	DD	imagerel cell_richcompare+392
	DD	imagerel $chain$4$cell_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$cell_richcompare DD 020021H
	DD	063400H
	DD	imagerel cell_richcompare
	DD	imagerel cell_richcompare+66
	DD	imagerel $unwind$cell_richcompare
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$cell_richcompare DD 021H
	DD	imagerel cell_richcompare
	DD	imagerel cell_richcompare+66
	DD	imagerel $unwind$cell_richcompare
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$cell_richcompare DD 020021H
	DD	063400H
	DD	imagerel cell_richcompare
	DD	imagerel cell_richcompare+66
	DD	imagerel $unwind$cell_richcompare
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$cell_richcompare DD 020521H
	DD	063405H
	DD	imagerel cell_richcompare
	DD	imagerel cell_richcompare+66
	DD	imagerel $unwind$cell_richcompare
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cell_richcompare DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\cellobject.c
xdata	ENDS
;	COMDAT cell_richcompare
_TEXT	SEGMENT
a$ = 64
b$ = 72
op$ = 80
cell_richcompare PROC					; COMDAT

; 58   : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 59   :     int result;
; 60   :     PyObject *v;
; 61   : 
; 62   :     /* neither argument should be NULL, unless something's gone wrong */
; 63   :     assert(a != NULL && b != NULL);
; 64   : 
; 65   :     /* both arguments should be instances of PyCellObject */
; 66   :     if (!PyCell_Check(a) || !PyCell_Check(b)) {

  00004	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCell_Type
  0000b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0000f	0f 85 08 01 00
	00		 jne	 $LN11@cell_richc
  00015	48 39 42 58	 cmp	 QWORD PTR [rdx+88], rax
  00019	0f 85 fe 00 00
	00		 jne	 $LN11@cell_richc

; 70   :     }
; 71   : 
; 72   :     /* compare cells by contents; empty cells come before anything else */
; 73   :     a = ((PyCellObject *)a)->ob_ref;

  0001f	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]

; 74   :     b = ((PyCellObject *)b)->ob_ref;

  00023	4c 8b 4a 60	 mov	 r9, QWORD PTR [rdx+96]

; 75   :     if (a != NULL && b != NULL)

  00027	48 85 c9	 test	 rcx, rcx
  0002a	74 11		 je	 SHORT $LN10@cell_richc
  0002c	4d 85 c9	 test	 r9, r9
  0002f	74 0c		 je	 SHORT $LN10@cell_richc

; 76   :         return PyObject_RichCompare(a, b, op);

  00031	49 8b d1	 mov	 rdx, r9

; 104  : }

  00034	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00038	e9 00 00 00 00	 jmp	 PyObject_RichCompare
$LN10@cell_richc:

; 77   : 
; 78   :     result = (b == NULL) - (a == NULL);

  0003d	33 d2		 xor	 edx, edx
  0003f	48 85 c9	 test	 rcx, rcx
  00042	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00047	8b c2		 mov	 eax, edx
  00049	0f 94 c0	 sete	 al
  0004c	4d 85 c9	 test	 r9, r9
  0004f	0f 94 c2	 sete	 dl
  00052	2b d0		 sub	 edx, eax

; 79   :     switch (op) {

  00054	41 83 f8 05	 cmp	 r8d, 5
  00058	0f 87 ae 00 00
	00		 ja	 $LN1@cell_richc
  0005e	49 63 c0	 movsxd	 rax, r8d
  00061	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:__ImageBase
  00068	41 8b 8c 80 00
	00 00 00	 mov	 ecx, DWORD PTR $LN19@cell_richc[r8+rax*4]
  00070	49 03 c8	 add	 rcx, r8
  00073	ff e1		 jmp	 rcx
$LN7@cell_richc:

; 80   :     case Py_EQ:
; 81   :         v = TEST_COND(result == 0);

  00075	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0007c	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  00083	85 d2		 test	 edx, edx
  00085	48 0f 44 d8	 cmove	 rbx, rax

; 82   :         break;

  00089	eb 6c		 jmp	 SHORT $LN8@cell_richc
$LN6@cell_richc:

; 83   :     case Py_NE:
; 84   :         v = TEST_COND(result != 0);

  0008b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00092	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  00099	85 d2		 test	 edx, edx
  0009b	48 0f 45 d8	 cmovne	 rbx, rax

; 85   :         break;

  0009f	eb 56		 jmp	 SHORT $LN8@cell_richc
$LN5@cell_richc:

; 86   :     case Py_LE:
; 87   :         v = TEST_COND(result <= 0);

  000a1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  000a8	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  000af	85 d2		 test	 edx, edx
  000b1	48 0f 4e d8	 cmovle	 rbx, rax

; 88   :         break;

  000b5	eb 40		 jmp	 SHORT $LN8@cell_richc
$LN4@cell_richc:

; 89   :     case Py_GE:
; 90   :         v = TEST_COND(result >= 0);

  000b7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  000be	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  000c5	85 d2		 test	 edx, edx
  000c7	48 0f 49 d8	 cmovns	 rbx, rax

; 91   :         break;

  000cb	eb 2a		 jmp	 SHORT $LN8@cell_richc
$LN3@cell_richc:

; 92   :     case Py_LT:
; 93   :         v = TEST_COND(result < 0);

  000cd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  000d4	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  000db	85 d2		 test	 edx, edx
  000dd	48 0f 48 d8	 cmovs	 rbx, rax

; 94   :         break;

  000e1	eb 14		 jmp	 SHORT $LN8@cell_richc
$LN2@cell_richc:

; 95   :     case Py_GT:
; 96   :         v = TEST_COND(result > 0);

  000e3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  000ea	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  000f1	85 d2		 test	 edx, edx
  000f3	48 0f 4f d8	 cmovg	 rbx, rax
$LN8@cell_richc:

; 101  :     }
; 102  :     Py_INCREF(v);

  000f7	48 8b cb	 mov	 rcx, rbx
  000fa	e8 00 00 00 00	 call	 _Py_IncRef

; 103  :     return v;

  000ff	48 8b c3	 mov	 rax, rbx
  00102	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 104  : }

  00107	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0010b	c3		 ret	 0
$LN1@cell_richc:

; 97   :         break;
; 98   :     default:
; 99   :         PyErr_BadArgument();

  0010c	e8 00 00 00 00	 call	 PyErr_BadArgument
  00111	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 100  :         return NULL;

  00116	33 c0		 xor	 eax, eax

; 104  : }

  00118	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011c	c3		 ret	 0
$LN11@cell_richc:

; 67   :         v = Py_NotImplemented;
; 68   :         Py_INCREF(v);

  0011d	e8 00 00 00 00	 call	 _Py_PXCTX
  00122	85 c0		 test	 eax, eax
  00124	75 3c		 jne	 SHORT $LN16@cell_richc
  00126	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NotImplementedStruct
  0012d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00134	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0013b	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00141	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00149	e8 00 00 00 00	 call	 _PyParallel_Guard
  0014e	85 c0		 test	 eax, eax
  00150	75 09		 jne	 SHORT $LN15@cell_richc
  00152	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NotImplementedStruct+32, 32 ; 00000020H
  00159	74 07		 je	 SHORT $LN16@cell_richc
$LN15@cell_richc:
  0015b	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NotImplementedStruct+80
$LN16@cell_richc:

; 69   :         return v;

  00162	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct

; 104  : }

  00169	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0016d	c3		 ret	 0
  0016e	66 90		 npad	 2
$LN19@cell_richc:
  00170	00 00 00 00	 DD	 $LN3@cell_richc
  00174	00 00 00 00	 DD	 $LN5@cell_richc
  00178	00 00 00 00	 DD	 $LN7@cell_richc
  0017c	00 00 00 00	 DD	 $LN6@cell_richc
  00180	00 00 00 00	 DD	 $LN2@cell_richc
  00184	00 00 00 00	 DD	 $LN4@cell_richc
cell_richcompare ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@DKAOJOMA@?$DMcell?5at?5?$CFp?3?5?$CF?480s?5object?5at?5?$CFp?$DO@ ; `string'
PUBLIC	??_C@_0BE@LIFNIFNJ@?$DMcell?5at?5?$CFp?3?5empty?$DO?$AA@ ; `string'
EXTRN	PyUnicode_FromFormat:PROC
;	COMDAT ??_C@_0CB@DKAOJOMA@?$DMcell?5at?5?$CFp?3?5?$CF?480s?5object?5at?5?$CFp?$DO@
CONST	SEGMENT
??_C@_0CB@DKAOJOMA@?$DMcell?5at?5?$CFp?3?5?$CF?480s?5object?5at?5?$CFp?$DO@ DB '<'
	DB	'cell at %p: %.80s object at %p>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LIFNIFNJ@?$DMcell?5at?5?$CFp?3?5empty?$DO?$AA@
CONST	SEGMENT
??_C@_0BE@LIFNIFNJ@?$DMcell?5at?5?$CFp?3?5empty?$DO?$AA@ DB '<cell at %p:'
	DB	' empty>', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT cell_repr
_TEXT	SEGMENT
op$ = 8
cell_repr PROC						; COMDAT

; 109  :     if (op->ob_ref == NULL)

  00000	48 83 79 60 00	 cmp	 QWORD PTR [rcx+96], 0

; 110  :         return PyUnicode_FromFormat("<cell at %p: empty>", op);

  00005	48 8b d1	 mov	 rdx, rcx
  00008	75 0c		 jne	 SHORT $LN1@cell_repr
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@LIFNIFNJ@?$DMcell?5at?5?$CFp?3?5empty?$DO?$AA@

; 115  : }

  00011	e9 00 00 00 00	 jmp	 PyUnicode_FromFormat
$LN1@cell_repr:

; 111  : 
; 112  :     return PyUnicode_FromFormat("<cell at %p: %.80s object at %p>",
; 113  :                                op, op->ob_ref->ob_type->tp_name,
; 114  :                                op->ob_ref);

  00016	4c 8b 49 60	 mov	 r9, QWORD PTR [rcx+96]
  0001a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CB@DKAOJOMA@?$DMcell?5at?5?$CFp?3?5?$CF?480s?5object?5at?5?$CFp?$DO@
  00021	4d 8b 41 58	 mov	 r8, QWORD PTR [r9+88]
  00025	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]

; 115  : }

  00029	e9 00 00 00 00	 jmp	 PyUnicode_FromFormat
cell_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@JPPEMJEM@cell_traverse?$AA@		; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$cell_traverse DD imagerel cell_traverse
	DD	imagerel cell_traverse+95
	DD	imagerel $unwind$cell_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cell_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0O@JPPEMJEM@cell_traverse?$AA@
CONST	SEGMENT
??_C@_0O@JPPEMJEM@cell_traverse?$AA@ DB 'cell_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT cell_traverse
_TEXT	SEGMENT
op$ = 48
visit$ = 56
arg$ = 64
cell_traverse PROC					; COMDAT

; 119  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 120  :     Py_VISIT(op->ob_ref);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1a		 je	 SHORT $LN3@cell_trave
  00021	45 33 c9	 xor	 r9d, r9d
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@GCIOHBGJ@?4?4?2Objects?2cellobject?4c?$AA@
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@JPPEMJEM@cell_traverse?$AA@
  00032	45 8d 41 78	 lea	 r8d, QWORD PTR [r9+120]
  00036	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@cell_trave:
  0003b	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  0003f	48 85 c9	 test	 rcx, rcx
  00042	74 09		 je	 SHORT $LN5@cell_trave
  00044	48 8b d7	 mov	 rdx, rdi
  00047	ff d6		 call	 rsi
  00049	85 c0		 test	 eax, eax
  0004b	75 02		 jne	 SHORT $LN7@cell_trave
$LN5@cell_trave:

; 121  :     return 0;

  0004d	33 c0		 xor	 eax, eax
$LN7@cell_trave:

; 122  : }

  0004f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00054	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00059	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005d	5f		 pop	 rdi
  0005e	c3		 ret	 0
cell_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@IEIHFOO@cell_clear?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$cell_clear DD imagerel cell_clear
	DD	imagerel cell_clear+63
	DD	imagerel $unwind$cell_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$cell_clear DD imagerel cell_clear+63
	DD	imagerel cell_clear+172
	DD	imagerel $chain$0$cell_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$cell_clear DD imagerel cell_clear+172
	DD	imagerel cell_clear+195
	DD	imagerel $chain$2$cell_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$cell_clear DD imagerel cell_clear+195
	DD	imagerel cell_clear+208
	DD	imagerel $chain$4$cell_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$cell_clear DD imagerel cell_clear+208
	DD	imagerel cell_clear+216
	DD	imagerel $chain$5$cell_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$cell_clear DD 021H
	DD	imagerel cell_clear
	DD	imagerel cell_clear+63
	DD	imagerel $unwind$cell_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$cell_clear DD 020021H
	DD	083400H
	DD	imagerel cell_clear
	DD	imagerel cell_clear+63
	DD	imagerel $unwind$cell_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$cell_clear DD 020021H
	DD	083400H
	DD	imagerel cell_clear
	DD	imagerel cell_clear+63
	DD	imagerel $unwind$cell_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$cell_clear DD 020521H
	DD	083405H
	DD	imagerel cell_clear
	DD	imagerel cell_clear+63
	DD	imagerel $unwind$cell_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cell_clear DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT ??_C@_0L@IEIHFOO@cell_clear?$AA@
CONST	SEGMENT
??_C@_0L@IEIHFOO@cell_clear?$AA@ DB 'cell_clear', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\cellobject.c
CONST	ENDS
;	COMDAT cell_clear
_TEXT	SEGMENT
op$ = 64
cell_clear PROC						; COMDAT

; 126  : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 127  :     Py_CLEAR(op->ob_ref);

  00006	4c 8b 49 60	 mov	 r9, QWORD PTR [rcx+96]
  0000a	48 8b f9	 mov	 rdi, rcx
  0000d	4d 85 c9	 test	 r9, r9
  00010	0f 84 ba 00 00
	00		 je	 $LN21@cell_clear
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@GCIOHBGJ@?4?4?2Objects?2cellobject?4c?$AA@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@IEIHFOO@cell_clear?$AA@
  00024	41 b8 7f 00 00
	00		 mov	 r8d, 127		; 0000007fH
  0002a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00032	e8 00 00 00 00	 call	 _PyParallel_Guard
  00037	85 c0		 test	 eax, eax
  00039	0f 85 91 00 00
	00		 jne	 $LN21@cell_clear
  0003f	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00044	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  00048	48 c7 47 60 00
	00 00 00	 mov	 QWORD PTR [rdi+96], 0
  00050	e8 00 00 00 00	 call	 _Py_PXCTX
  00055	85 c0		 test	 eax, eax
  00057	75 72		 jne	 SHORT $LN22@cell_clear
  00059	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0005d	a8 20		 test	 al, 32			; 00000020H
  0005f	75 62		 jne	 SHORT $LN11@cell_clear
  00061	84 c0		 test	 al, al
  00063	78 5e		 js	 SHORT $LN11@cell_clear
  00065	a8 02		 test	 al, 2
  00067	75 62		 jne	 SHORT $LN22@cell_clear
  00069	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0006d	75 5c		 jne	 SHORT $LN22@cell_clear
  0006f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00076	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0007d	4c 8b cb	 mov	 r9, rbx
  00080	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00086	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0008e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00093	48 8b cb	 mov	 rcx, rbx
  00096	85 c0		 test	 eax, eax
  00098	74 12		 je	 SHORT $LN16@cell_clear
  0009a	e8 00 00 00 00	 call	 _Px_Dealloc
  0009f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 128  :     return 0;

  000a4	33 c0		 xor	 eax, eax

; 129  : }

  000a6	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000aa	5f		 pop	 rdi
  000ab	c3		 ret	 0

; 127  :     Py_CLEAR(op->ob_ref);

$LN16@cell_clear:
  000ac	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000b0	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000b6	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 128  :     return 0;

  000bb	33 c0		 xor	 eax, eax

; 129  : }

  000bd	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c1	5f		 pop	 rdi
  000c2	c3		 ret	 0

; 127  :     Py_CLEAR(op->ob_ref);

$LN11@cell_clear:
  000c3	48 8b cb	 mov	 rcx, rbx
  000c6	e8 00 00 00 00	 call	 Px_DecRef
$LN22@cell_clear:
  000cb	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN21@cell_clear:

; 128  :     return 0;

  000d0	33 c0		 xor	 eax, eax

; 129  : }

  000d2	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d6	5f		 pop	 rdi
  000d7	c3		 ret	 0
cell_clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@NKIIAMFD@Cell?5is?5empty?$AA@		; `string'
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_ValueError:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$cell_get_contents DD imagerel cell_get_contents
	DD	imagerel cell_get_contents+128
	DD	imagerel $unwind$cell_get_contents
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cell_get_contents DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0O@NKIIAMFD@Cell?5is?5empty?$AA@
CONST	SEGMENT
??_C@_0O@NKIIAMFD@Cell?5is?5empty?$AA@ DB 'Cell is empty', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\cellobject.c
CONST	ENDS
;	COMDAT cell_get_contents
_TEXT	SEGMENT
op$ = 64
closure$ = 72
cell_get_contents PROC					; COMDAT

; 133  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 134  :     if (op->ob_ref == NULL)

  0000a	48 8b 59 60	 mov	 rbx, QWORD PTR [rcx+96]
  0000e	48 8b f9	 mov	 rdi, rcx
  00011	48 85 db	 test	 rbx, rbx
  00014	75 20		 jne	 SHORT $LN1@cell_get_c

; 135  :     {
; 136  :         PyErr_SetString(PyExc_ValueError, "Cell is empty");

  00016	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@NKIIAMFD@Cell?5is?5empty?$AA@
  00024	e8 00 00 00 00	 call	 PyErr_SetString

; 137  :         return NULL;

  00029	33 c0		 xor	 eax, eax

; 141  : }

  0002b	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00030	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00034	5f		 pop	 rdi
  00035	c3		 ret	 0
$LN1@cell_get_c:

; 138  :     }
; 139  :     Py_INCREF(op->ob_ref);

  00036	e8 00 00 00 00	 call	 _Py_PXCTX
  0003b	85 c0		 test	 eax, eax
  0003d	75 32		 jne	 SHORT $LN5@cell_get_c
  0003f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0004d	4c 8b cb	 mov	 r9, rbx
  00050	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00056	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0005e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00063	85 c0		 test	 eax, eax
  00065	75 06		 jne	 SHORT $LN4@cell_get_c
  00067	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0006b	74 04		 je	 SHORT $LN5@cell_get_c
$LN4@cell_get_c:
  0006d	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN5@cell_get_c:

; 140  :     return op->ob_ref;

  00071	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]

; 141  : }

  00075	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0007a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0007e	5f		 pop	 rdi
  0007f	c3		 ret	 0
cell_get_contents ENDP
_TEXT	ENDS
END
