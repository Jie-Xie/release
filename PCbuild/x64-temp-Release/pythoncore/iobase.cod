; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@HDBGIEBN@_io?4_RawIOBase?$AA@		; `string'
PUBLIC	??_C@_07JCDFOMC@readall?$AA@			; `string'
PUBLIC	??_C@_0M@MHIMOJEB@_io?4_IOBase?$AA@		; `string'
PUBLIC	??_C@_06IKJOPBFO@closed?$AA@			; `string'
PUBLIC	??_C@_08IBFKALI@__dict__?$AA@			; `string'
PUBLIC	??_C@_0L@MKGKOOMC@writelines?$AA@		; `string'
PUBLIC	??_C@_09OBGGLHMH@readlines?$AA@			; `string'
PUBLIC	??_C@_08KBCDPPMN@readline?$AA@			; `string'
PUBLIC	??_C@_08CMFIGCJD@__exit__?$AA@			; `string'
PUBLIC	??_C@_09OAJHKKGH@__enter__?$AA@			; `string'
PUBLIC	??_C@_06BMABDNNN@isatty?$AA@			; `string'
PUBLIC	??_C@_06FFBIALPD@fileno?$AA@			; `string'
PUBLIC	_PyIOBase_check_writable
PUBLIC	??_C@_0P@BMFAFMLA@_checkWritable?$AA@		; `string'
PUBLIC	_PyIOBase_check_readable
PUBLIC	??_C@_0P@BAIAGNDB@_checkReadable?$AA@		; `string'
PUBLIC	_PyIOBase_check_seekable
PUBLIC	??_C@_0P@COCOPLE@_checkSeekable?$AA@		; `string'
PUBLIC	_PyIOBase_check_closed
PUBLIC	??_C@_0N@JDLLLEEH@_checkClosed?$AA@		; `string'
PUBLIC	??_C@_08IBOGFJJC@writable?$AA@			; `string'
PUBLIC	??_C@_08INDGGIBD@readable?$AA@			; `string'
PUBLIC	??_C@_08JPFEOKJG@seekable?$AA@			; `string'
PUBLIC	??_C@_05LBOHBHFK@close?$AA@			; `string'
PUBLIC	??_C@_05GLCAEPFP@flush?$AA@			; `string'
PUBLIC	??_C@_08MABILMFG@truncate?$AA@			; `string'
PUBLIC	??_C@_04LBPCFPDD@tell?$AA@			; `string'
PUBLIC	??_C@_06BPBOMFNI@extend?$AA@			; `string'
PUBLIC	??_C@_04EOCFELL@peek?$AA@			; `string'
PUBLIC	??_C@_04POLDLDMI@read?$AA@			; `string'
PUBLIC	??_C@_04EDECCOGL@seek?$AA@			; `string'
PUBLIC	??_C@_0BA@NIHHNKCG@__IOBase_closed?$AA@		; `string'
PUBLIC	PyIOBase_Type
PUBLIC	PyRawIOBase_Type
EXTRN	PyType_GenericNew:PROC
EXTRN	PyObject_GenericGetDict:PROC
;	COMDAT ??_C@_0P@HDBGIEBN@_io?4_RawIOBase?$AA@
CONST	SEGMENT
??_C@_0P@HDBGIEBN@_io?4_RawIOBase?$AA@ DB '_io._RawIOBase', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07JCDFOMC@readall?$AA@
CONST	SEGMENT
??_C@_07JCDFOMC@readall?$AA@ DB 'readall', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MHIMOJEB@_io?4_IOBase?$AA@
CONST	SEGMENT
??_C@_0M@MHIMOJEB@_io?4_IOBase?$AA@ DB '_io._IOBase', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06IKJOPBFO@closed?$AA@
CONST	SEGMENT
??_C@_06IKJOPBFO@closed?$AA@ DB 'closed', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08IBFKALI@__dict__?$AA@
CONST	SEGMENT
??_C@_08IBFKALI@__dict__?$AA@ DB '__dict__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MKGKOOMC@writelines?$AA@
CONST	SEGMENT
??_C@_0L@MKGKOOMC@writelines?$AA@ DB 'writelines', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OBGGLHMH@readlines?$AA@
CONST	SEGMENT
??_C@_09OBGGLHMH@readlines?$AA@ DB 'readlines', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KBCDPPMN@readline?$AA@
CONST	SEGMENT
??_C@_08KBCDPPMN@readline?$AA@ DB 'readline', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CMFIGCJD@__exit__?$AA@
CONST	SEGMENT
??_C@_08CMFIGCJD@__exit__?$AA@ DB '__exit__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OAJHKKGH@__enter__?$AA@
CONST	SEGMENT
??_C@_09OAJHKKGH@__enter__?$AA@ DB '__enter__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06BMABDNNN@isatty?$AA@
CONST	SEGMENT
??_C@_06BMABDNNN@isatty?$AA@ DB 'isatty', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FFBIALPD@fileno?$AA@
CONST	SEGMENT
??_C@_06FFBIALPD@fileno?$AA@ DB 'fileno', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BMFAFMLA@_checkWritable?$AA@
CONST	SEGMENT
??_C@_0P@BMFAFMLA@_checkWritable?$AA@ DB '_checkWritable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BAIAGNDB@_checkReadable?$AA@
CONST	SEGMENT
??_C@_0P@BAIAGNDB@_checkReadable?$AA@ DB '_checkReadable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@COCOPLE@_checkSeekable?$AA@
CONST	SEGMENT
??_C@_0P@COCOPLE@_checkSeekable?$AA@ DB '_checkSeekable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JDLLLEEH@_checkClosed?$AA@
CONST	SEGMENT
??_C@_0N@JDLLLEEH@_checkClosed?$AA@ DB '_checkClosed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08IBOGFJJC@writable?$AA@
CONST	SEGMENT
??_C@_08IBOGFJJC@writable?$AA@ DB 'writable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08INDGGIBD@readable?$AA@
CONST	SEGMENT
??_C@_08INDGGIBD@readable?$AA@ DB 'readable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JPFEOKJG@seekable?$AA@
CONST	SEGMENT
??_C@_08JPFEOKJG@seekable?$AA@ DB 'seekable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05LBOHBHFK@close?$AA@
CONST	SEGMENT
??_C@_05LBOHBHFK@close?$AA@ DB 'close', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GLCAEPFP@flush?$AA@
CONST	SEGMENT
??_C@_05GLCAEPFP@flush?$AA@ DB 'flush', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MABILMFG@truncate?$AA@
CONST	SEGMENT
??_C@_08MABILMFG@truncate?$AA@ DB 'truncate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04LBPCFPDD@tell?$AA@
CONST	SEGMENT
??_C@_04LBPCFPDD@tell?$AA@ DB 'tell', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BPBOMFNI@extend?$AA@
CONST	SEGMENT
??_C@_06BPBOMFNI@extend?$AA@ DB 'extend', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EOCFELL@peek?$AA@
CONST	SEGMENT
??_C@_04EOCFELL@peek?$AA@ DB 'peek', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04POLDLDMI@read?$AA@
CONST	SEGMENT
??_C@_04POLDLDMI@read?$AA@ DB 'read', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EDECCOGL@seek?$AA@
CONST	SEGMENT
??_C@_04EDECCOGL@seek?$AA@ DB 'seek', 00H		; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId_peek@?1??iobase_readline@@9@9 DQ 0000000000000000H ; `iobase_readline'::`2'::PyId_peek
	DQ	FLAT:??_C@_04EOCFELL@peek?$AA@
	DQ	0000000000000000H
?PyId___IOBase_closed@?1??iobase_close@@9@9 DQ 0000000000000000H ; `iobase_close'::`2'::PyId___IOBase_closed
	DQ	FLAT:??_C@_0BA@NIHHNKCG@__IOBase_closed?$AA@
	DQ	0000000000000000H
?PyId_read@?2??rawiobase_readall@@9@9 DQ 0000000000000000H ; `rawiobase_readall'::`3'::PyId_read
	DQ	FLAT:??_C@_04POLDLDMI@read?$AA@
	DQ	0000000000000000H
?PyId_readall@?3??rawiobase_read@@9@9 DQ 0000000000000000H ; `rawiobase_read'::`4'::PyId_readall
	DQ	FLAT:??_C@_07JCDFOMC@readall?$AA@
	DQ	0000000000000000H
?PyId_extend@?3??iobase_readlines@@9@9 DQ 0000000000000000H ; `iobase_readlines'::`4'::PyId_extend
	DQ	FLAT:??_C@_06BPBOMFNI@extend?$AA@
	DQ	0000000000000000H
?PyId_read@?1??iobase_readline@@9@9 DQ 0000000000000000H ; `iobase_readline'::`2'::PyId_read
	DQ	FLAT:??_C@_04POLDLDMI@read?$AA@
	DQ	0000000000000000H
?PyId_seek@?1??iobase_tell@@9@9 DQ 0000000000000000H	; `iobase_tell'::`2'::PyId_seek
	DQ	FLAT:??_C@_04EDECCOGL@seek?$AA@
	DQ	0000000000000000H
PyId___IOBase_closed DQ 0000000000000000H
	DQ	FLAT:??_C@_0BA@NIHHNKCG@__IOBase_closed?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_0BA@NIHHNKCG@__IOBase_closed?$AA@
CONST	SEGMENT
??_C@_0BA@NIHHNKCG@__IOBase_closed?$AA@ DB '__IOBase_closed', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
iobase_doc DB	'The abstract base class for all I/O classes, acting on s'
	DB	'treams of', 0aH, 'bytes. There is no public constructor.', 0aH
	DB	0aH, 'This class provides dummy implementations for many metho'
	DB	'ds that', 0aH, 'derived classes can override selectively; the'
	DB	' default implementations', 0aH, 'represent a file that cannot'
	DB	' be read, written or seeked.', 0aH, 0aH, 'Even though IOBase '
	DB	'does not declare read, readinto, or write because', 0aH, 'the'
	DB	'ir signatures will vary, implementations and clients should', 0aH
	DB	'consider those methods part of the interface. Also, implement'
	DB	'ations', 0aH, 'may raise UnsupportedOperation when operations'
	DB	' they do not support are', 0aH, 'called.', 0aH, 0aH, 'The bas'
	DB	'ic type used for binary data read from or written to a file i'
	DB	's', 0aH, 'bytes. bytearrays are accepted too, and in some cas'
	DB	'es (such as', 0aH, 'readinto) needed. Text I/O classes work w'
	DB	'ith str data.', 0aH, 0aH, 'Note that calling any method (even'
	DB	' inquiries) on a closed stream is', 0aH, 'undefined. Implemen'
	DB	'tations may raise IOError in this case.', 0aH, 0aH, 'IOBase ('
	DB	'and its subclasses) support the iterator protocol, meaning', 0aH
	DB	'that an IOBase object can be iterated over yielding the lines'
	DB	' in a', 0aH, 'stream.', 0aH, 0aH, 'IOBase also supports the :'
	DB	'keyword:`with` statement. In this example,', 0aH, 'fp is clos'
	DB	'ed after the suite of the with statement is complete:', 0aH, 0aH
	DB	'with open(''spam.txt'', ''r'') as fp:', 0aH, '    fp.write('''
	DB	'Spam and eggs!'')', 0aH, 00H
	ORG $+10
iobase_seek_doc DB 'Change stream position.', 0aH, 0aH, 'Change the strea'
	DB	'm position to the given byte offset. The offset is', 0aH, 'in'
	DB	'terpreted relative to the position indicated by whence.  Valu'
	DB	'es', 0aH, 'for whence are:', 0aH, 0aH, '* 0 -- start of strea'
	DB	'm (the default); offset should be zero or positive', 0aH, '* '
	DB	'1 -- current stream position; offset may be negative', 0aH, '*'
	DB	' 2 -- end of stream; offset is usually negative', 0aH, 0aH, 'R'
	DB	'eturn the new absolute position.', 00H
	ORG $+6
iobase_tell_doc DB 'Return current stream position.', 00H
	ORG $+8
iobase_truncate_doc DB 'Truncate file to size bytes.', 0aH, 0aH, 'File po'
	DB	'inter is left unchanged.  Size defaults to the current IO', 0aH
	DB	'position as reported by tell().  Returns the new size.', 00H
	ORG $+10
iobase_flush_doc DB 'Flush write buffers, if applicable.', 0aH, 0aH, 'Thi'
	DB	's is not implemented for read-only and non-blocking streams.', 0aH
	DB	00H
	ORG $+10
iobase_close_doc DB 'Flush and close the IO object.', 0aH, 0aH, 'This met'
	DB	'hod has no effect if the file is already closed.', 0aH, 00H
	ORG $+6
iobase_seekable_doc DB 'Return whether object supports random access.', 0aH
	DB	0aH, 'If False, seek(), tell() and truncate() will raise Unsup'
	DB	'portedOperation.', 0aH, 'This method may need to do a test se'
	DB	'ek().', 00H
	ORG $+14
iobase_readable_doc DB 'Return whether object was opened for reading.', 0aH
	DB	0aH, 'If False, read() will raise UnsupportedOperation.', 00H
	ORG $+15
iobase_writable_doc DB 'Return whether object was opened for writing.', 0aH
	DB	0aH, 'If False, write() will raise UnsupportedOperation.', 00H
	ORG $+14
iobase_fileno_doc DB 'Returns underlying file descriptor if one exists.', 0aH
	DB	0aH, 'An IOError is raised if the IO object does not use a fil'
	DB	'e descriptor.', 0aH, 00H
	ORG $+6
iobase_isatty_doc DB 'Return whether this is an ''interactive'' stream.', 0aH
	DB	0aH, 'Return False if it can''t be determined.', 0aH, 00H
	ORG $+6
iobase_readline_doc DB 'Read and return a line from the stream.', 0aH, 0aH
	DB	'If limit is specified, at most limit bytes will be read.', 0aH
	DB	0aH, 'The line terminator is always b''\n'' for binary files; '
	DB	'for text', 0aH, 'files, the newlines argument to open can be '
	DB	'used to select the line', 0aH, 'terminator(s) recognized.', 0aH
	DB	00H
	ORG $+15
iobase_readlines_doc DB 'Return a list of lines from the stream.', 0aH, 0aH
	DB	'hint can be specified to control the number of lines read: no'
	DB	' more', 0aH, 'lines will be read if the total size (in bytes/'
	DB	'characters) of all', 0aH, 'lines so far exceeds hint.', 00H
	ORG $+7
iobase_methods DQ FLAT:??_C@_04EDECCOGL@seek?$AA@
	DQ	FLAT:iobase_seek
	DD	01H
	ORG $+4
	DQ	FLAT:iobase_seek_doc
	DQ	FLAT:??_C@_04LBPCFPDD@tell?$AA@
	DQ	FLAT:iobase_tell
	DD	04H
	ORG $+4
	DQ	FLAT:iobase_tell_doc
	DQ	FLAT:??_C@_08MABILMFG@truncate?$AA@
	DQ	FLAT:iobase_truncate
	DD	01H
	ORG $+4
	DQ	FLAT:iobase_truncate_doc
	DQ	FLAT:??_C@_05GLCAEPFP@flush?$AA@
	DQ	FLAT:iobase_flush
	DD	04H
	ORG $+4
	DQ	FLAT:iobase_flush_doc
	DQ	FLAT:??_C@_05LBOHBHFK@close?$AA@
	DQ	FLAT:iobase_close
	DD	04H
	ORG $+4
	DQ	FLAT:iobase_close_doc
	DQ	FLAT:??_C@_08JPFEOKJG@seekable?$AA@
	DQ	FLAT:iobase_seekable
	DD	04H
	ORG $+4
	DQ	FLAT:iobase_seekable_doc
	DQ	FLAT:??_C@_08INDGGIBD@readable?$AA@
	DQ	FLAT:iobase_readable
	DD	04H
	ORG $+4
	DQ	FLAT:iobase_readable_doc
	DQ	FLAT:??_C@_08IBOGFJJC@writable?$AA@
	DQ	FLAT:iobase_writable
	DD	04H
	ORG $+4
	DQ	FLAT:iobase_writable_doc
	DQ	FLAT:??_C@_0N@JDLLLEEH@_checkClosed?$AA@
	DQ	FLAT:_PyIOBase_check_closed
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0P@COCOPLE@_checkSeekable?$AA@
	DQ	FLAT:_PyIOBase_check_seekable
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0P@BAIAGNDB@_checkReadable?$AA@
	DQ	FLAT:_PyIOBase_check_readable
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0P@BMFAFMLA@_checkWritable?$AA@
	DQ	FLAT:_PyIOBase_check_writable
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_06FFBIALPD@fileno?$AA@
	DQ	FLAT:iobase_fileno
	DD	04H
	ORG $+4
	DQ	FLAT:iobase_fileno_doc
	DQ	FLAT:??_C@_06BMABDNNN@isatty?$AA@
	DQ	FLAT:iobase_isatty
	DD	04H
	ORG $+4
	DQ	FLAT:iobase_isatty_doc
	DQ	FLAT:??_C@_09OAJHKKGH@__enter__?$AA@
	DQ	FLAT:iobase_enter
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08CMFIGCJD@__exit__?$AA@
	DQ	FLAT:iobase_exit
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08KBCDPPMN@readline?$AA@
	DQ	FLAT:iobase_readline
	DD	01H
	ORG $+4
	DQ	FLAT:iobase_readline_doc
	DQ	FLAT:??_C@_09OBGGLHMH@readlines?$AA@
	DQ	FLAT:iobase_readlines
	DD	01H
	ORG $+4
	DQ	FLAT:iobase_readlines_doc
	DQ	FLAT:??_C@_0L@MKGKOOMC@writelines?$AA@
	DQ	FLAT:iobase_writelines
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
iobase_getset DQ FLAT:??_C@_08IBFKALI@__dict__?$AA@
	DQ	FLAT:PyObject_GenericGetDict
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_06IKJOPBFO@closed?$AA@
	DQ	FLAT:iobase_closed_get
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
	ORG $+8
PyIOBase_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0M@MHIMOJEB@_io?4_IOBase?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:iobase_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:iobase_doc
	DQ	FLAT:iobase_traverse
	DQ	FLAT:iobase_clear
	DQ	0000000000000000H
	DQ	0000000000000068H
	DQ	FLAT:iobase_iter
	DQ	FLAT:iobase_iternext
	DQ	FLAT:iobase_methods
	DQ	0000000000000000H
	DQ	FLAT:iobase_getset
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000060H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyType_GenericNew
	ORG $+72
rawiobase_doc DB 'Base class for raw binary I/O.', 00H
	ORG $+1
rawiobase_readall_doc DB 'Read until EOF, using multiple read() call.', 00H
	ORG $+4
rawiobase_methods DQ FLAT:??_C@_04POLDLDMI@read?$AA@
	DQ	FLAT:rawiobase_read
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_07JCDFOMC@readall?$AA@
	DQ	FLAT:rawiobase_readall
	DD	04H
	ORG $+4
	DQ	FLAT:rawiobase_readall_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PyRawIOBase_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0P@HDBGIEBN@_io?4_RawIOBase?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040400H
	ORG $+4
	DQ	FLAT:rawiobase_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:rawiobase_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyIOBase_Type
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+72
_DATA	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
EXTRN	PyErr_SetString:PROC
EXTRN	PyModule_GetState:PROC
EXTRN	PyState_FindModule:PROC
EXTRN	_PyIO_Module:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\modules\_io\iobase.c
pdata	SEGMENT
$pdata$iobase_unsupported DD imagerel iobase_unsupported
	DD	imagerel iobase_unsupported+49
	DD	imagerel $unwind$iobase_unsupported
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_unsupported DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT iobase_unsupported
_TEXT	SEGMENT
message$ = 48
iobase_unsupported PROC					; COMDAT

; 69   : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 70   :     PyErr_SetString(IO_STATE->unsupported_operation, message);

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyIO_Module
  00010	e8 00 00 00 00	 call	 PyState_FindModule
  00015	48 8b c8	 mov	 rcx, rax
  00018	e8 00 00 00 00	 call	 PyModule_GetState
  0001d	48 8b d3	 mov	 rdx, rbx
  00020	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00024	e8 00 00 00 00	 call	 PyErr_SetString

; 71   :     return NULL;

  00029	33 c0		 xor	 eax, eax

; 72   : }

  0002b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002f	5b		 pop	 rbx
  00030	c3		 ret	 0
iobase_unsupported ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT iobase_seek
_TEXT	SEGMENT
self$ = 8
args$ = 16
iobase_seek PROC					; COMDAT

; 92   :     return iobase_unsupported("seek");

  00000	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04EDECCOGL@seek?$AA@

; 93   : }

  00007	e9 00 00 00 00	 jmp	 iobase_unsupported
iobase_seek ENDP
_TEXT	ENDS
PUBLIC	??_C@_02PDIHAGKM@ii?$AA@			; `string'
EXTRN	_PyObject_CallMethodId_SizeT:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$iobase_tell DD imagerel iobase_tell
	DD	imagerel iobase_tell+57
	DD	imagerel $unwind$iobase_tell
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_tell DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_02PDIHAGKM@ii?$AA@
CONST	SEGMENT
??_C@_02PDIHAGKM@ii?$AA@ DB 'ii', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT iobase_tell
_TEXT	SEGMENT
self$ = 64
args$ = 72
iobase_tell PROC					; COMDAT

; 100  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 101  :     _Py_IDENTIFIER(seek);
; 102  : 
; 103  :     return _PyObject_CallMethodId(self, &PyId_seek, "ii", 0, 1);

  00004	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  0000b	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00014	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_seek@?1??iobase_tell@@9@9
  00019	4a 03 14 c0	 add	 rdx, QWORD PTR [rax+r8*8]
  0001d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02PDIHAGKM@ii?$AA@
  00024	45 33 c9	 xor	 r9d, r9d
  00027	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  0002f	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT

; 104  : }

  00034	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00038	c3		 ret	 0
iobase_tell ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT iobase_truncate
_TEXT	SEGMENT
self$ = 8
args$ = 16
iobase_truncate PROC					; COMDAT

; 115  :     return iobase_unsupported("truncate");

  00000	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08MABILMFG@truncate?$AA@

; 116  : }

  00007	e9 00 00 00 00	 jmp	 iobase_unsupported
iobase_truncate ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@NJELGIOK@I?1O?5operation?5on?5closed?5file?4?$AA@ ; `string'
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyExc_ValueError:QWORD
EXTRN	_PyObject_HasAttrId:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$iobase_flush DD imagerel iobase_flush
	DD	imagerel iobase_flush+145
	DD	imagerel $unwind$iobase_flush
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_flush DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0BO@NJELGIOK@I?1O?5operation?5on?5closed?5file?4?$AA@
CONST	SEGMENT
??_C@_0BO@NJELGIOK@I?1O?5operation?5on?5closed?5file?4?$AA@ DB 'I/O opera'
	DB	'tion on closed file.', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\iobase.c
CONST	ENDS
;	COMDAT iobase_flush
_TEXT	SEGMENT
self$ = 64
args$ = 72
iobase_flush PROC					; COMDAT

; 127  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 128  :     /* XXX Should this return the number of bytes written??? */
; 129  :     if (IS_CLOSED(self)) {

  00004	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  0000b	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00014	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId___IOBase_closed
  00019	4a 03 14 c0	 add	 rdx, QWORD PTR [rax+r8*8]
  0001d	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00022	85 c0		 test	 eax, eax
  00024	74 1a		 je	 SHORT $LN1@iobase_flu

; 130  :         PyErr_SetString(PyExc_ValueError, "I/O operation on closed file.");

  00026	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@NJELGIOK@I?1O?5operation?5on?5closed?5file?4?$AA@
  00034	e8 00 00 00 00	 call	 PyErr_SetString

; 131  :         return NULL;

  00039	33 c0		 xor	 eax, eax

; 134  : }

  0003b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003f	c3		 ret	 0
$LN1@iobase_flu:

; 132  :     }
; 133  :     Py_RETURN_NONE;

  00040	e8 00 00 00 00	 call	 _Py_PXCTX
  00045	85 c0		 test	 eax, eax
  00047	75 3c		 jne	 SHORT $LN5@iobase_flu
  00049	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00050	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00057	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0005e	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00064	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0006c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00071	85 c0		 test	 eax, eax
  00073	75 09		 jne	 SHORT $LN4@iobase_flu
  00075	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0007c	74 07		 je	 SHORT $LN5@iobase_flu
$LN4@iobase_flu:
  0007e	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN5@iobase_flu:
  00085	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 134  : }

  0008c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00090	c3		 ret	 0
iobase_flush ENDP
_TEXT	ENDS
EXTRN	PyObject_IsTrue:PROC
EXTRN	PyObject_GetAttr:PROC
EXTRN	_PyIO_str_closed:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$iobase_closed DD imagerel iobase_closed
	DD	imagerel iobase_closed+68
	DD	imagerel $unwind$iobase_closed
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_closed DD 042801H
	DD	063428H
	DD	070023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT iobase_closed
_TEXT	SEGMENT
self$ = 48
iobase_closed PROC					; COMDAT

; 143  : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 144  :     PyObject *res;
; 145  :     int closed;
; 146  :     /* This gets the derived attribute, which is *not* __IOBase_closed
; 147  :        in most cases! */
; 148  :     res = PyObject_GetAttr(self, _PyIO_str_closed);

  00006	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_closed
  0000d	e8 00 00 00 00	 call	 PyObject_GetAttr
  00012	48 8b f8	 mov	 rdi, rax

; 149  :     if (res == NULL)

  00015	48 85 c0	 test	 rax, rax
  00018	75 06		 jne	 SHORT $LN1@iobase_clo

; 154  : }

  0001a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001e	5f		 pop	 rdi
  0001f	c3		 ret	 0
$LN1@iobase_clo:

; 150  :         return 0;
; 151  :     closed = PyObject_IsTrue(res);

  00020	48 8b c8	 mov	 rcx, rax
  00023	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00028	e8 00 00 00 00	 call	 PyObject_IsTrue

; 152  :     Py_DECREF(res);

  0002d	48 8b cf	 mov	 rcx, rdi
  00030	8b d8		 mov	 ebx, eax
  00032	e8 00 00 00 00	 call	 _Py_DecRef

; 153  :     return closed;

  00037	8b c3		 mov	 eax, ebx
  00039	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 154  : }

  0003e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00042	5f		 pop	 rdi
  00043	c3		 ret	 0
iobase_closed ENDP
_TEXT	ENDS
EXTRN	PyBool_FromLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$iobase_closed_get DD imagerel iobase_closed_get
	DD	imagerel iobase_closed_get+45
	DD	imagerel $unwind$iobase_closed_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_closed_get DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT iobase_closed_get
_TEXT	SEGMENT
self$ = 48
context$ = 56
iobase_closed_get PROC					; COMDAT

; 158  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 159  :     return PyBool_FromLong(IS_CLOSED(self));

  00004	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  0000b	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00014	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId___IOBase_closed
  00019	4a 03 14 c0	 add	 rdx, QWORD PTR [rax+r8*8]
  0001d	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00022	8b c8		 mov	 ecx, eax

; 160  : }

  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	e9 00 00 00 00	 jmp	 PyBool_FromLong
iobase_closed_get ENDP
_TEXT	ENDS
EXTRN	_Py_TrueStruct:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_PyIOBase_check_closed DD imagerel $LN10
	DD	imagerel $LN10+139
	DD	imagerel $unwind$_PyIOBase_check_closed
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyIOBase_check_closed DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\iobase.c
xdata	ENDS
;	COMDAT _PyIOBase_check_closed
_TEXT	SEGMENT
self$ = 64
args$ = 72
_PyIOBase_check_closed PROC				; COMDAT

; 164  : {

$LN10:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b da	 mov	 rbx, rdx

; 165  :     if (iobase_closed(self)) {

  00009	e8 00 00 00 00	 call	 iobase_closed
  0000e	85 c0		 test	 eax, eax
  00010	74 1b		 je	 SHORT $LN3@PyIOBase_c

; 166  :         PyErr_SetString(PyExc_ValueError, "I/O operation on closed file.");

  00012	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00019	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@NJELGIOK@I?1O?5operation?5on?5closed?5file?4?$AA@
  00020	e8 00 00 00 00	 call	 PyErr_SetString

; 167  :         return NULL;

  00025	33 c0		 xor	 eax, eax

; 173  : }

  00027	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0002b	5b		 pop	 rbx
  0002c	c3		 ret	 0
$LN3@PyIOBase_c:

; 168  :     }
; 169  :     if (args == Py_True)

  0002d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00034	48 3b d8	 cmp	 rbx, rax

; 170  :         return Py_None;

  00037	74 45		 je	 SHORT $LN7@PyIOBase_c

; 171  :     else
; 172  :         Py_RETURN_NONE;

  00039	e8 00 00 00 00	 call	 _Py_PXCTX
  0003e	85 c0		 test	 eax, eax
  00040	75 3c		 jne	 SHORT $LN7@PyIOBase_c
  00042	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00049	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00050	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00057	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0005d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00065	e8 00 00 00 00	 call	 _PyParallel_Guard
  0006a	85 c0		 test	 eax, eax
  0006c	75 09		 jne	 SHORT $LN6@PyIOBase_c
  0006e	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00075	74 07		 je	 SHORT $LN7@PyIOBase_c
$LN6@PyIOBase_c:
  00077	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN7@PyIOBase_c:
  0007e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 173  : }

  00085	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00089	5b		 pop	 rbx
  0008a	c3		 ret	 0
_PyIOBase_check_closed ENDP
_TEXT	ENDS
EXTRN	_PyObject_SetAttrId:PROC
EXTRN	PyObject_CallMethodObjArgs:PROC
EXTRN	_PyIO_str_flush:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$iobase_close DD imagerel iobase_close
	DD	imagerel iobase_close+155
	DD	imagerel $unwind$iobase_close
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$iobase_close DD imagerel iobase_close+155
	DD	imagerel iobase_close+209
	DD	imagerel $chain$0$iobase_close
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$iobase_close DD imagerel iobase_close+209
	DD	imagerel iobase_close+309
	DD	imagerel $chain$2$iobase_close
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$iobase_close DD 020021H
	DD	083400H
	DD	imagerel iobase_close
	DD	imagerel iobase_close+155
	DD	imagerel $unwind$iobase_close
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$iobase_close DD 020521H
	DD	083405H
	DD	imagerel iobase_close
	DD	imagerel iobase_close+155
	DD	imagerel $unwind$iobase_close
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_close DD 040a01H
	DD	09640aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\iobase.c
xdata	ENDS
;	COMDAT iobase_close
_TEXT	SEGMENT
self$ = 64
args$ = 72
iobase_close PROC					; COMDAT

; 181  : {

  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 182  :     PyObject *res;
; 183  :     _Py_IDENTIFIER(__IOBase_closed);
; 184  : 
; 185  :     if (IS_CLOSED(self))

  0000a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  00010	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00019	48 8b f9	 mov	 rdi, rcx
  0001c	48 8b 34 d0	 mov	 rsi, QWORD PTR [rax+rdx*8]
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?PyId___IOBase_closed@?1??iobase_close@@9@9
  00025	48 03 f1	 add	 rsi, rcx
  00028	48 8b cf	 mov	 rcx, rdi
  0002b	48 8b d6	 mov	 rdx, rsi
  0002e	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00033	85 c0		 test	 eax, eax
  00035	74 57		 je	 SHORT $LN6@iobase_clo@2

; 186  :         Py_RETURN_NONE;

  00037	e8 00 00 00 00	 call	 _Py_PXCTX
  0003c	85 c0		 test	 eax, eax
  0003e	75 3c		 jne	 SHORT $LN10@iobase_clo@2
  00040	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00047	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00055	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0005b	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00063	e8 00 00 00 00	 call	 _PyParallel_Guard
  00068	85 c0		 test	 eax, eax
  0006a	75 09		 jne	 SHORT $LN9@iobase_clo@2
  0006c	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00073	74 07		 je	 SHORT $LN10@iobase_clo@2
$LN9@iobase_clo@2:
  00075	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN10@iobase_clo@2:
  0007c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 195  : }

  00083	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00088	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008c	5f		 pop	 rdi
  0008d	c3		 ret	 0
$LN6@iobase_clo@2:

; 187  : 
; 188  :     res = PyObject_CallMethodObjArgs(self, _PyIO_str_flush, NULL);

  0008e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_flush
  00095	45 33 c0	 xor	 r8d, r8d
  00098	48 8b cf	 mov	 rcx, rdi
  0009b	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  000a0	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs

; 189  :     _PyObject_SetAttrId(self, &PyId___IOBase_closed, Py_True);

  000a5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_TrueStruct
  000ac	48 8b d6	 mov	 rdx, rsi
  000af	48 8b cf	 mov	 rcx, rdi
  000b2	48 8b d8	 mov	 rbx, rax
  000b5	e8 00 00 00 00	 call	 _PyObject_SetAttrId

; 190  :     if (res == NULL) {

  000ba	48 85 db	 test	 rbx, rbx
  000bd	75 12		 jne	 SHORT $LN17@iobase_clo@2

; 191  :         return NULL;

  000bf	33 c0		 xor	 eax, eax
  000c1	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 195  : }

  000c6	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000cb	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000cf	5f		 pop	 rdi
  000d0	c3		 ret	 0
$LN17@iobase_clo@2:

; 192  :     }
; 193  :     Py_XDECREF(res);

  000d1	48 8b cb	 mov	 rcx, rbx
  000d4	e8 00 00 00 00	 call	 _Py_DecRef

; 194  :     Py_RETURN_NONE;

  000d9	e8 00 00 00 00	 call	 _Py_PXCTX
  000de	85 c0		 test	 eax, eax
  000e0	75 3c		 jne	 SHORT $LN14@iobase_clo@2
  000e2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  000e9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000f7	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000fd	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00105	e8 00 00 00 00	 call	 _PyParallel_Guard
  0010a	85 c0		 test	 eax, eax
  0010c	75 09		 jne	 SHORT $LN13@iobase_clo@2
  0010e	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00115	74 07		 je	 SHORT $LN14@iobase_clo@2
$LN13@iobase_clo@2:
  00117	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN14@iobase_clo@2:

; 195  : }

  0011e	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00123	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00128	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0012f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00133	5f		 pop	 rdi
  00134	c3		 ret	 0
iobase_close ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@COHOCNAK@_PyIOBase_finalize?$AA@	; `string'
PUBLIC	??_C@_0BI@KFPEJKND@?4?4?2Modules?2_io?2iobase?4c?$AA@ ; `string'
PUBLIC	_PyIOBase_finalize
EXTRN	_Px_NewReference:PROC
EXTRN	PyErr_Restore:PROC
EXTRN	_PyIO_str_close:QWORD
EXTRN	PyErr_Clear:PROC
EXTRN	PyErr_Fetch:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_PyIOBase_finalize DD imagerel $LN19
	DD	imagerel $LN19+9
	DD	imagerel $unwind$_PyIOBase_finalize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_PyIOBase_finalize DD imagerel $LN19+9
	DD	imagerel $LN19+141
	DD	imagerel $chain$0$_PyIOBase_finalize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_PyIOBase_finalize DD imagerel $LN19+141
	DD	imagerel $LN19+220
	DD	imagerel $chain$1$_PyIOBase_finalize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_PyIOBase_finalize DD imagerel $LN19+220
	DD	imagerel $LN19+249
	DD	imagerel $chain$2$_PyIOBase_finalize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$_PyIOBase_finalize DD imagerel $LN19+249
	DD	imagerel $LN19+352
	DD	imagerel $chain$3$_PyIOBase_finalize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$_PyIOBase_finalize DD 021H
	DD	imagerel $LN19
	DD	imagerel $LN19+9
	DD	imagerel $unwind$_PyIOBase_finalize
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_PyIOBase_finalize DD 021H
	DD	imagerel $LN19+9
	DD	imagerel $LN19+141
	DD	imagerel $chain$0$_PyIOBase_finalize
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_PyIOBase_finalize DD 020521H
	DD	066405H
	DD	imagerel $LN19+9
	DD	imagerel $LN19+141
	DD	imagerel $chain$0$_PyIOBase_finalize
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_PyIOBase_finalize DD 020521H
	DD	0d5405H
	DD	imagerel $LN19
	DD	imagerel $LN19+9
	DD	imagerel $unwind$_PyIOBase_finalize
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyIOBase_finalize DD 030701H
	DD	070036207H
	DD	03002H
xdata	ENDS
;	COMDAT ??_C@_0BD@COHOCNAK@_PyIOBase_finalize?$AA@
CONST	SEGMENT
??_C@_0BD@COHOCNAK@_PyIOBase_finalize?$AA@ DB '_PyIOBase_finalize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KFPEJKND@?4?4?2Modules?2_io?2iobase?4c?$AA@
CONST	SEGMENT
??_C@_0BI@KFPEJKND@?4?4?2Modules?2_io?2iobase?4c?$AA@ DB '..\Modules\_io\'
	DB	'iobase.c', 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\iobase.c
CONST	ENDS
;	COMDAT _PyIOBase_finalize
_TEXT	SEGMENT
tb$ = 80
self$ = 80
v$ = 88
tp$ = 96
_PyIOBase_finalize PROC					; COMDAT

; 201  : {

$LN19:
  00000	40 53		 push	 rbx
  00002	57		 push	 rdi
  00003	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 202  :     PyObject *res;
; 203  :     PyObject *tp, *v, *tb;
; 204  :     int closed = 1;
; 205  :     int is_zombie;
; 206  : 
; 207  :     /* If _PyIOBase_finalize() is called from a destructor, we need to
; 208  :        resurrect the object as calling close() can invoke arbitrary code. */
; 209  :     is_zombie = (Py_REFCNT(self) == 0);

  00007	33 ff		 xor	 edi, edi
  00009	48 89 6c 24 68	 mov	 QWORD PTR [rsp+104], rbp
  0000e	48 8b d9	 mov	 rbx, rcx
  00011	48 39 79 50	 cmp	 QWORD PTR [rcx+80], rdi
  00015	40 0f 94 c7	 sete	 dil

; 210  :     if (is_zombie) {

  00019	85 ff		 test	 edi, edi
  0001b	74 3b		 je	 SHORT $LN15@PyIOBase_f

; 211  :         /* ++Py_REFCNT(self); */
; 212  :         Py_INCREF(self);

  0001d	e8 00 00 00 00	 call	 _Py_PXCTX
  00022	85 c0		 test	 eax, eax
  00024	75 32		 jne	 SHORT $LN15@PyIOBase_f
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00034	4c 8b cb	 mov	 r9, rbx
  00037	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0003d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00045	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004a	85 c0		 test	 eax, eax
  0004c	75 06		 jne	 SHORT $LN14@PyIOBase_f
  0004e	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00052	74 04		 je	 SHORT $LN15@PyIOBase_f
$LN14@PyIOBase_f:
  00054	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN15@PyIOBase_f:

; 213  :     }
; 214  :     PyErr_Fetch(&tp, &v, &tb);

  00058	4c 8d 44 24 50	 lea	 r8, QWORD PTR tb$[rsp]
  0005d	48 8d 54 24 58	 lea	 rdx, QWORD PTR v$[rsp]
  00062	48 8d 4c 24 60	 lea	 rcx, QWORD PTR tp$[rsp]
  00067	e8 00 00 00 00	 call	 PyErr_Fetch

; 215  :     /* If `closed` doesn't exist or can't be evaluated as bool, then the
; 216  :        object is probably in an unusable state, so ignore. */
; 217  :     res = PyObject_GetAttr(self, _PyIO_str_closed);

  0006c	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_closed
  00073	48 8b cb	 mov	 rcx, rbx
  00076	e8 00 00 00 00	 call	 PyObject_GetAttr
  0007b	48 8b e8	 mov	 rbp, rax

; 218  :     if (res == NULL)

  0007e	48 85 c0	 test	 rax, rax
  00081	75 07		 jne	 SHORT $LN8@PyIOBase_f

; 219  :         PyErr_Clear();

  00083	e8 00 00 00 00	 call	 PyErr_Clear

; 220  :     else {

  00088	eb 52		 jmp	 SHORT $LN3@PyIOBase_f
$LN8@PyIOBase_f:

; 221  :         closed = PyObject_IsTrue(res);

  0008a	48 8b c8	 mov	 rcx, rax
  0008d	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  00092	e8 00 00 00 00	 call	 PyObject_IsTrue

; 222  :         Py_DECREF(res);

  00097	48 8b cd	 mov	 rcx, rbp
  0009a	8b f0		 mov	 esi, eax
  0009c	e8 00 00 00 00	 call	 _Py_DecRef

; 223  :         if (closed == -1)

  000a1	83 fe ff	 cmp	 esi, -1
  000a4	75 07		 jne	 SHORT $LN6@PyIOBase_f

; 224  :             PyErr_Clear();

  000a6	e8 00 00 00 00	 call	 PyErr_Clear

; 225  :     }
; 226  :     if (closed == 0) {

  000ab	eb 2a		 jmp	 SHORT $LN18@PyIOBase_f
$LN6@PyIOBase_f:
  000ad	85 f6		 test	 esi, esi
  000af	75 26		 jne	 SHORT $LN18@PyIOBase_f

; 227  :         res = PyObject_CallMethodObjArgs((PyObject *) self, _PyIO_str_close,
; 228  :                                           NULL);

  000b1	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_close
  000b8	45 33 c0	 xor	 r8d, r8d
  000bb	48 8b cb	 mov	 rcx, rbx
  000be	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs

; 229  :         /* Silencing I/O errors is bad, but printing spurious tracebacks is
; 230  :            equally as bad, and potentially more frequent (because of
; 231  :            shutdown issues). */
; 232  :         if (res == NULL)

  000c3	48 85 c0	 test	 rax, rax
  000c6	75 07		 jne	 SHORT $LN4@PyIOBase_f

; 233  :             PyErr_Clear();

  000c8	e8 00 00 00 00	 call	 PyErr_Clear

; 234  :         else

  000cd	eb 08		 jmp	 SHORT $LN18@PyIOBase_f
$LN4@PyIOBase_f:

; 235  :             Py_DECREF(res);

  000cf	48 8b c8	 mov	 rcx, rax
  000d2	e8 00 00 00 00	 call	 _Py_DecRef
$LN18@PyIOBase_f:
  000d7	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
$LN3@PyIOBase_f:

; 236  :     }
; 237  :     PyErr_Restore(tp, v, tb);

  000dc	4c 8b 44 24 50	 mov	 r8, QWORD PTR tb$[rsp]
  000e1	48 8b 54 24 58	 mov	 rdx, QWORD PTR v$[rsp]
  000e6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tp$[rsp]
  000eb	e8 00 00 00 00	 call	 PyErr_Restore
  000f0	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]

; 238  :     if (is_zombie) {

  000f5	85 ff		 test	 edi, edi
  000f7	74 5e		 je	 SHORT $LN1@PyIOBase_f

; 239  :         if (--Py_REFCNT(self) != 0) {

  000f9	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000fd	48 8b 7b 50	 mov	 rdi, QWORD PTR [rbx+80]
  00101	74 54		 je	 SHORT $LN1@PyIOBase_f

; 240  :             /* The object lives again. The following code is taken from
; 241  :                slot_tp_del in typeobject.c. */
; 242  :             Py_ssize_t refcnt = Py_REFCNT(self);
; 243  :             _Py_NewReference(self);

  00103	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@KFPEJKND@?4?4?2Modules?2_io?2iobase?4c?$AA@
  0010a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@COHOCNAK@_PyIOBase_finalize?$AA@
  00111	4c 8b cb	 mov	 r9, rbx
  00114	41 b8 f3 00 00
	00		 mov	 r8d, 243		; 000000f3H
  0011a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00122	e8 00 00 00 00	 call	 _PyParallel_Guard
  00127	85 c0		 test	 eax, eax
  00129	74 16		 je	 SHORT $LN12@PyIOBase_f
  0012b	48 8b cb	 mov	 rcx, rbx
  0012e	e8 00 00 00 00	 call	 _Px_NewReference

; 244  :             Py_REFCNT(self) = refcnt;

  00133	48 89 7b 50	 mov	 QWORD PTR [rbx+80], rdi

; 245  :             /* If Py_REF_DEBUG, _Py_NewReference bumped _Py_RefTotal, so
; 246  :              * we need to undo that. */
; 247  :             _Py_DEC_REFTOTAL;
; 248  :             /* If Py_TRACE_REFS, _Py_NewReference re-added self to the object
; 249  :              * chain, so no more to do there.
; 250  :              * If COUNT_ALLOCS, the original decref bumped tp_frees, and
; 251  :              * _Py_NewReference bumped tp_allocs:  both of those need to be
; 252  :              * undone.
; 253  :              */
; 254  : #ifdef COUNT_ALLOCS
; 255  :             --Py_TYPE(self)->tp_frees;
; 256  :             --Py_TYPE(self)->tp_allocs;
; 257  : #endif
; 258  :             return -1;

  00137	83 c8 ff	 or	 eax, -1

; 262  : }

  0013a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0013e	5f		 pop	 rdi
  0013f	5b		 pop	 rbx
  00140	c3		 ret	 0
$LN12@PyIOBase_f:

; 240  :             /* The object lives again. The following code is taken from
; 241  :                slot_tp_del in typeobject.c. */
; 242  :             Py_ssize_t refcnt = Py_REFCNT(self);
; 243  :             _Py_NewReference(self);

  00141	48 c7 43 50 01
	00 00 00	 mov	 QWORD PTR [rbx+80], 1

; 245  :             /* If Py_REF_DEBUG, _Py_NewReference bumped _Py_RefTotal, so
; 246  :              * we need to undo that. */
; 247  :             _Py_DEC_REFTOTAL;
; 248  :             /* If Py_TRACE_REFS, _Py_NewReference re-added self to the object
; 249  :              * chain, so no more to do there.
; 250  :              * If COUNT_ALLOCS, the original decref bumped tp_frees, and
; 251  :              * _Py_NewReference bumped tp_allocs:  both of those need to be
; 252  :              * undone.
; 253  :              */
; 254  : #ifdef COUNT_ALLOCS
; 255  :             --Py_TYPE(self)->tp_frees;
; 256  :             --Py_TYPE(self)->tp_allocs;
; 257  : #endif
; 258  :             return -1;

  00149	83 c8 ff	 or	 eax, -1
  0014c	48 89 7b 50	 mov	 QWORD PTR [rbx+80], rdi

; 262  : }

  00150	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00154	5f		 pop	 rdi
  00155	5b		 pop	 rbx
  00156	c3		 ret	 0
$LN1@PyIOBase_f:

; 259  :         }
; 260  :     }
; 261  :     return 0;

  00157	33 c0		 xor	 eax, eax

; 262  : }

  00159	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0015d	5f		 pop	 rdi
  0015e	5b		 pop	 rbx
  0015f	c3		 ret	 0
_PyIOBase_finalize ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@IAPDJBB@iobase_traverse?$AA@		; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$iobase_traverse DD imagerel iobase_traverse
	DD	imagerel iobase_traverse+97
	DD	imagerel $unwind$iobase_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BA@IAPDJBB@iobase_traverse?$AA@
CONST	SEGMENT
??_C@_0BA@IAPDJBB@iobase_traverse?$AA@ DB 'iobase_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT iobase_traverse
_TEXT	SEGMENT
self$ = 48
visit$ = 56
arg$ = 64
iobase_traverse PROC					; COMDAT

; 266  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 267  :     Py_VISIT(self->dict);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN3@iobase_tra
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@KFPEJKND@?4?4?2Modules?2_io?2iobase?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@IAPDJBB@iobase_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 0b 01 00
	00		 mov	 r8d, 267		; 0000010bH
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@iobase_tra:
  0003d	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN5@iobase_tra
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 02		 jne	 SHORT $LN7@iobase_tra
$LN5@iobase_tra:

; 268  :     return 0;

  0004f	33 c0		 xor	 eax, eax
$LN7@iobase_tra:

; 269  : }

  00051	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00056	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0005b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005f	5f		 pop	 rdi
  00060	c3		 ret	 0
iobase_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@BLEIEIHO@iobase_clear?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$iobase_clear DD imagerel iobase_clear
	DD	imagerel iobase_clear+81
	DD	imagerel $unwind$iobase_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$iobase_clear DD imagerel iobase_clear+81
	DD	imagerel iobase_clear+190
	DD	imagerel $chain$0$iobase_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$iobase_clear DD imagerel iobase_clear+190
	DD	imagerel iobase_clear+213
	DD	imagerel $chain$2$iobase_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$iobase_clear DD imagerel iobase_clear+213
	DD	imagerel iobase_clear+226
	DD	imagerel $chain$4$iobase_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$iobase_clear DD imagerel iobase_clear+226
	DD	imagerel iobase_clear+234
	DD	imagerel $chain$5$iobase_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$iobase_clear DD 021H
	DD	imagerel iobase_clear
	DD	imagerel iobase_clear+81
	DD	imagerel $unwind$iobase_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$iobase_clear DD 020021H
	DD	083400H
	DD	imagerel iobase_clear
	DD	imagerel iobase_clear+81
	DD	imagerel $unwind$iobase_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$iobase_clear DD 020021H
	DD	083400H
	DD	imagerel iobase_clear
	DD	imagerel iobase_clear+81
	DD	imagerel $unwind$iobase_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$iobase_clear DD 020521H
	DD	083405H
	DD	imagerel iobase_clear
	DD	imagerel iobase_clear+81
	DD	imagerel $unwind$iobase_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_clear DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT ??_C@_0N@BLEIEIHO@iobase_clear?$AA@
CONST	SEGMENT
??_C@_0N@BLEIEIHO@iobase_clear?$AA@ DB 'iobase_clear', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\iobase.c
CONST	ENDS
;	COMDAT iobase_clear
_TEXT	SEGMENT
self$ = 64
iobase_clear PROC					; COMDAT

; 273  : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b f9	 mov	 rdi, rcx

; 274  :     if (_PyIOBase_finalize((PyObject *) self) < 0)

  00009	e8 00 00 00 00	 call	 _PyIOBase_finalize
  0000e	85 c0		 test	 eax, eax
  00010	79 09		 jns	 SHORT $LN4@iobase_cle

; 275  :         return -1;

  00012	83 c8 ff	 or	 eax, -1

; 278  : }

  00015	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00019	5f		 pop	 rdi
  0001a	c3		 ret	 0
$LN4@iobase_cle:

; 276  :     Py_CLEAR(self->dict);

  0001b	4c 8b 4f 60	 mov	 r9, QWORD PTR [rdi+96]
  0001f	4d 85 c9	 test	 r9, r9
  00022	0f 84 ba 00 00
	00		 je	 $LN3@iobase_cle
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@KFPEJKND@?4?4?2Modules?2_io?2iobase?4c?$AA@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BLEIEIHO@iobase_clear?$AA@
  00036	41 b8 14 01 00
	00		 mov	 r8d, 276		; 00000114H
  0003c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00044	e8 00 00 00 00	 call	 _PyParallel_Guard
  00049	85 c0		 test	 eax, eax
  0004b	0f 85 91 00 00
	00		 jne	 $LN3@iobase_cle
  00051	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00056	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  0005a	48 c7 47 60 00
	00 00 00	 mov	 QWORD PTR [rdi+96], 0
  00062	e8 00 00 00 00	 call	 _Py_PXCTX
  00067	85 c0		 test	 eax, eax
  00069	75 72		 jne	 SHORT $LN19@iobase_cle
  0006b	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0006f	a8 20		 test	 al, 32			; 00000020H
  00071	75 62		 jne	 SHORT $LN12@iobase_cle
  00073	84 c0		 test	 al, al
  00075	78 5e		 js	 SHORT $LN12@iobase_cle
  00077	a8 02		 test	 al, 2
  00079	75 62		 jne	 SHORT $LN19@iobase_cle
  0007b	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0007f	75 5c		 jne	 SHORT $LN19@iobase_cle
  00081	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00088	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0008f	4c 8b cb	 mov	 r9, rbx
  00092	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00098	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000a0	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a5	48 8b cb	 mov	 rcx, rbx
  000a8	85 c0		 test	 eax, eax
  000aa	74 12		 je	 SHORT $LN17@iobase_cle
  000ac	e8 00 00 00 00	 call	 _Px_Dealloc
  000b1	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 277  :     return 0;

  000b6	33 c0		 xor	 eax, eax

; 278  : }

  000b8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000bc	5f		 pop	 rdi
  000bd	c3		 ret	 0

; 276  :     Py_CLEAR(self->dict);

$LN17@iobase_cle:
  000be	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000c2	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000c8	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 277  :     return 0;

  000cd	33 c0		 xor	 eax, eax

; 278  : }

  000cf	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d3	5f		 pop	 rdi
  000d4	c3		 ret	 0

; 276  :     Py_CLEAR(self->dict);

$LN12@iobase_cle:
  000d5	48 8b cb	 mov	 rcx, rbx
  000d8	e8 00 00 00 00	 call	 Px_DecRef
$LN19@iobase_cle:
  000dd	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN3@iobase_cle:

; 277  :     return 0;

  000e2	33 c0		 xor	 eax, eax

; 278  : }

  000e4	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000e8	5f		 pop	 rdi
  000e9	c3		 ret	 0
iobase_clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@IIHKNICK@iobase_dealloc?$AA@		; `string'
EXTRN	PyObject_ClearWeakRefs:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$iobase_dealloc DD imagerel iobase_dealloc
	DD	imagerel iobase_dealloc+332
	DD	imagerel $unwind$iobase_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_dealloc DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0P@IIHKNICK@iobase_dealloc?$AA@
CONST	SEGMENT
??_C@_0P@IIHKNICK@iobase_dealloc?$AA@ DB 'iobase_dealloc', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\iobase.c
CONST	ENDS
;	COMDAT iobase_dealloc
_TEXT	SEGMENT
self$ = 64
iobase_dealloc PROC					; COMDAT

; 284  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 285  :     /* NOTE: since IOBaseObject has its own dict, Python-defined attributes
; 286  :        are still available here for close() to use.
; 287  :        However, if the derived class declares a __slots__, those slots are
; 288  :        already gone.
; 289  :     */
; 290  :     if (_PyIOBase_finalize((PyObject *) self) < 0) {

  00009	e8 00 00 00 00	 call	 _PyIOBase_finalize
  0000e	85 c0		 test	 eax, eax
  00010	79 5d		 jns	 SHORT $LN11@iobase_dea

; 291  :         /* When called from a heap type's dealloc, the type will be
; 292  :            decref'ed on return (see e.g. subtype_dealloc in typeobject.c). */
; 293  :         if (PyType_HasFeature(Py_TYPE(self), Py_TPFLAGS_HEAPTYPE))

  00012	48 8b 5b 58	 mov	 rbx, QWORD PTR [rbx+88]
  00016	f7 83 00 01 00
	00 00 02 00 00	 test	 DWORD PTR [rbx+256], 512 ; 00000200H
  00020	0f 84 20 01 00
	00		 je	 $LN12@iobase_dea

; 294  :             Py_INCREF(Py_TYPE(self));

  00026	e8 00 00 00 00	 call	 _Py_PXCTX
  0002b	85 c0		 test	 eax, eax
  0002d	0f 85 13 01 00
	00		 jne	 $LN12@iobase_dea
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00041	4c 8b cb	 mov	 r9, rbx
  00044	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0004a	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00052	e8 00 00 00 00	 call	 _PyParallel_Guard
  00057	85 c0		 test	 eax, eax
  00059	75 0a		 jne	 SHORT $LN16@iobase_dea
  0005b	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0005f	0f 84 e1 00 00
	00		 je	 $LN12@iobase_dea
$LN16@iobase_dea:
  00065	48 ff 43 50	 inc	 QWORD PTR [rbx+80]

; 302  : }

  00069	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0006d	5b		 pop	 rbx
  0006e	c3		 ret	 0
$LN11@iobase_dea:

; 295  :         return;
; 296  :     }
; 297  :     _PyObject_GC_UNTRACK(self);

  0006f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@KFPEJKND@?4?4?2Modules?2_io?2iobase?4c?$AA@
  00076	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@IIHKNICK@iobase_dealloc?$AA@
  0007d	4c 8b cb	 mov	 r9, rbx
  00080	41 b8 29 01 00
	00		 mov	 r8d, 297		; 00000129H
  00086	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0008e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00093	85 c0		 test	 eax, eax
  00095	75 54		 jne	 SHORT $LN6@iobase_dea
  00097	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@KFPEJKND@?4?4?2Modules?2_io?2iobase?4c?$AA@
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@IIHKNICK@iobase_dealloc?$AA@
  000a5	4c 8b cb	 mov	 r9, rbx
  000a8	41 b8 29 01 00
	00		 mov	 r8d, 297		; 00000129H
  000ae	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000b6	e8 00 00 00 00	 call	 _PyParallel_Guard
  000bb	85 c0		 test	 eax, eax
  000bd	74 04		 je	 SHORT $LN14@iobase_dea
  000bf	33 d2		 xor	 edx, edx
  000c1	eb 04		 jmp	 SHORT $LN15@iobase_dea
$LN14@iobase_dea:
  000c3	48 8d 53 e8	 lea	 rdx, QWORD PTR [rbx-24]
$LN15@iobase_dea:
  000c7	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  000ca	48 8b 4a 08	 mov	 rcx, QWORD PTR [rdx+8]
  000ce	48 c7 42 10 fe
	ff ff ff	 mov	 QWORD PTR [rdx+16], -2
  000d6	48 89 01	 mov	 QWORD PTR [rcx], rax
  000d9	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  000dc	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  000e0	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  000e4	48 c7 02 00 00
	00 00		 mov	 QWORD PTR [rdx], 0
$LN6@iobase_dea:

; 298  :     if (self->weakreflist != NULL)

  000eb	48 83 7b 68 00	 cmp	 QWORD PTR [rbx+104], 0
  000f0	74 08		 je	 SHORT $LN4@iobase_dea

; 299  :         PyObject_ClearWeakRefs((PyObject *) self);

  000f2	48 8b cb	 mov	 rcx, rbx
  000f5	e8 00 00 00 00	 call	 PyObject_ClearWeakRefs
$LN4@iobase_dea:

; 300  :     Py_CLEAR(self->dict);

  000fa	4c 8b 4b 60	 mov	 r9, QWORD PTR [rbx+96]
  000fe	4d 85 c9	 test	 r9, r9
  00101	74 36		 je	 SHORT $LN3@iobase_dea
  00103	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@KFPEJKND@?4?4?2Modules?2_io?2iobase?4c?$AA@
  0010a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@IIHKNICK@iobase_dealloc?$AA@
  00111	41 b8 2c 01 00
	00		 mov	 r8d, 300		; 0000012cH
  00117	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0011f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00124	85 c0		 test	 eax, eax
  00126	75 11		 jne	 SHORT $LN3@iobase_dea
  00128	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  0012c	48 c7 43 60 00
	00 00 00	 mov	 QWORD PTR [rbx+96], 0
  00134	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@iobase_dea:

; 301  :     Py_TYPE(self)->tp_free((PyObject *) self);

  00139	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0013d	48 8b cb	 mov	 rcx, rbx
  00140	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]
$LN12@iobase_dea:

; 302  : }

  00146	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0014a	5b		 pop	 rbx
  0014b	c3		 ret	 0
iobase_dealloc ENDP
_TEXT	ENDS
EXTRN	_Py_FalseStruct:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$iobase_seekable DD imagerel iobase_seekable
	DD	imagerel iobase_seekable+100
	DD	imagerel $unwind$iobase_seekable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_seekable DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\iobase.c
xdata	ENDS
;	COMDAT iobase_seekable
_TEXT	SEGMENT
self$ = 64
args$ = 72
iobase_seekable PROC					; COMDAT

; 314  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 315  :     Py_RETURN_FALSE;

  00006	e8 00 00 00 00	 call	 _Py_PXCTX
  0000b	85 c0		 test	 eax, eax
  0000d	75 48		 jne	 SHORT $LN7@iobase_see
  0000f	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00024	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0002a	4c 8b cb	 mov	 r9, rbx
  0002d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00035	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003a	85 c0		 test	 eax, eax
  0003c	75 09		 jne	 SHORT $LN3@iobase_see
  0003e	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  00045	74 07		 je	 SHORT $LN9@iobase_see
$LN3@iobase_see:
  00047	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN9@iobase_see:
  0004e	48 8b c3	 mov	 rax, rbx

; 316  : }

  00051	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00055	5b		 pop	 rbx
  00056	c3		 ret	 0
$LN7@iobase_see:

; 315  :     Py_RETURN_FALSE;

  00057	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 316  : }

  0005e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00062	5b		 pop	 rbx
  00063	c3		 ret	 0
iobase_seekable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@EHPAPMHG@File?5or?5stream?5is?5not?5seekable?4?$AA@ ; `string'
PUBLIC	??_C@_0BJ@LDHBALPI@_PyIOBase_check_seekable?$AA@ ; `string'
EXTRN	_PyIO_str_seekable:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyIOBase_check_seekable DD imagerel $LN11
	DD	imagerel $LN11+148
	DD	imagerel $unwind$_PyIOBase_check_seekable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyIOBase_check_seekable DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0CA@EHPAPMHG@File?5or?5stream?5is?5not?5seekable?4?$AA@
CONST	SEGMENT
??_C@_0CA@EHPAPMHG@File?5or?5stream?5is?5not?5seekable?4?$AA@ DB 'File or'
	DB	' stream is not seekable.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LDHBALPI@_PyIOBase_check_seekable?$AA@
CONST	SEGMENT
??_C@_0BJ@LDHBALPI@_PyIOBase_check_seekable?$AA@ DB '_PyIOBase_check_seek'
	DB	'able', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyIOBase_check_seekable
_TEXT	SEGMENT
self$ = 64
args$ = 72
_PyIOBase_check_seekable PROC				; COMDAT

; 320  : {

$LN11:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fa	 mov	 rdi, rdx

; 321  :     PyObject *res  = PyObject_CallMethodObjArgs(self, _PyIO_str_seekable, NULL);

  0000d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_seekable
  00014	45 33 c0	 xor	 r8d, r8d
  00017	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  0001c	48 8b d8	 mov	 rbx, rax

; 322  :     if (res == NULL)

  0001f	48 85 c0	 test	 rax, rax

; 323  :         return NULL;

  00022	74 48		 je	 SHORT $LN10@PyIOBase_c@2

; 324  :     if (res != Py_True) {

  00024	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0002b	48 3b d8	 cmp	 rbx, rax
  0002e	74 49		 je	 SHORT $LN6@PyIOBase_c@2

; 325  :         Py_CLEAR(res);

  00030	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@KFPEJKND@?4?4?2Modules?2_io?2iobase?4c?$AA@
  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@LDHBALPI@_PyIOBase_check_seekable?$AA@
  0003e	4c 8b cb	 mov	 r9, rbx
  00041	41 b8 45 01 00
	00		 mov	 r8d, 325		; 00000145H
  00047	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0004f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00054	85 c0		 test	 eax, eax
  00056	75 08		 jne	 SHORT $LN4@PyIOBase_c@2
  00058	48 8b cb	 mov	 rcx, rbx
  0005b	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@PyIOBase_c@2:

; 326  :         iobase_unsupported("File or stream is not seekable.");

  00060	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@EHPAPMHG@File?5or?5stream?5is?5not?5seekable?4?$AA@
  00067	e8 00 00 00 00	 call	 iobase_unsupported
$LN10@PyIOBase_c@2:

; 327  :         return NULL;

  0006c	33 c0		 xor	 eax, eax

; 333  : }

  0006e	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00073	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00077	5f		 pop	 rdi
  00078	c3		 ret	 0
$LN6@PyIOBase_c@2:

; 328  :     }
; 329  :     if (args == Py_True) {

  00079	48 3b f8	 cmp	 rdi, rax
  0007c	75 08		 jne	 SHORT $LN1@PyIOBase_c@2

; 330  :         Py_DECREF(res);

  0007e	48 8b cb	 mov	 rcx, rbx
  00081	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyIOBase_c@2:

; 331  :     }
; 332  :     return res;

  00086	48 8b c3	 mov	 rax, rbx

; 333  : }

  00089	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0008e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00092	5f		 pop	 rdi
  00093	c3		 ret	 0
_PyIOBase_check_seekable ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$iobase_readable DD imagerel iobase_readable
	DD	imagerel iobase_readable+100
	DD	imagerel $unwind$iobase_readable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_readable DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\iobase.c
xdata	ENDS
;	COMDAT iobase_readable
_TEXT	SEGMENT
self$ = 64
args$ = 72
iobase_readable PROC					; COMDAT

; 342  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 343  :     Py_RETURN_FALSE;

  00006	e8 00 00 00 00	 call	 _Py_PXCTX
  0000b	85 c0		 test	 eax, eax
  0000d	75 48		 jne	 SHORT $LN7@iobase_rea
  0000f	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00024	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0002a	4c 8b cb	 mov	 r9, rbx
  0002d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00035	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003a	85 c0		 test	 eax, eax
  0003c	75 09		 jne	 SHORT $LN3@iobase_rea
  0003e	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  00045	74 07		 je	 SHORT $LN9@iobase_rea
$LN3@iobase_rea:
  00047	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN9@iobase_rea:
  0004e	48 8b c3	 mov	 rax, rbx

; 344  : }

  00051	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00055	5b		 pop	 rbx
  00056	c3		 ret	 0
$LN7@iobase_rea:

; 343  :     Py_RETURN_FALSE;

  00057	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 344  : }

  0005e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00062	5b		 pop	 rbx
  00063	c3		 ret	 0
iobase_readable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@NKDAOJFL@File?5or?5stream?5is?5not?5readable?4?$AA@ ; `string'
PUBLIC	??_C@_0BJ@KBBDIJHN@_PyIOBase_check_readable?$AA@ ; `string'
EXTRN	_PyIO_str_readable:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyIOBase_check_readable DD imagerel $LN11
	DD	imagerel $LN11+148
	DD	imagerel $unwind$_PyIOBase_check_readable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyIOBase_check_readable DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0CA@NKDAOJFL@File?5or?5stream?5is?5not?5readable?4?$AA@
CONST	SEGMENT
??_C@_0CA@NKDAOJFL@File?5or?5stream?5is?5not?5readable?4?$AA@ DB 'File or'
	DB	' stream is not readable.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KBBDIJHN@_PyIOBase_check_readable?$AA@
CONST	SEGMENT
??_C@_0BJ@KBBDIJHN@_PyIOBase_check_readable?$AA@ DB '_PyIOBase_check_read'
	DB	'able', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyIOBase_check_readable
_TEXT	SEGMENT
self$ = 64
args$ = 72
_PyIOBase_check_readable PROC				; COMDAT

; 349  : {

$LN11:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fa	 mov	 rdi, rdx

; 350  :     PyObject *res  = PyObject_CallMethodObjArgs(self, _PyIO_str_readable, NULL);

  0000d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_readable
  00014	45 33 c0	 xor	 r8d, r8d
  00017	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  0001c	48 8b d8	 mov	 rbx, rax

; 351  :     if (res == NULL)

  0001f	48 85 c0	 test	 rax, rax

; 352  :         return NULL;

  00022	74 48		 je	 SHORT $LN10@PyIOBase_c@3

; 353  :     if (res != Py_True) {

  00024	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0002b	48 3b d8	 cmp	 rbx, rax
  0002e	74 49		 je	 SHORT $LN6@PyIOBase_c@3

; 354  :         Py_CLEAR(res);

  00030	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@KFPEJKND@?4?4?2Modules?2_io?2iobase?4c?$AA@
  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@KBBDIJHN@_PyIOBase_check_readable?$AA@
  0003e	4c 8b cb	 mov	 r9, rbx
  00041	41 b8 62 01 00
	00		 mov	 r8d, 354		; 00000162H
  00047	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0004f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00054	85 c0		 test	 eax, eax
  00056	75 08		 jne	 SHORT $LN4@PyIOBase_c@3
  00058	48 8b cb	 mov	 rcx, rbx
  0005b	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@PyIOBase_c@3:

; 355  :         iobase_unsupported("File or stream is not readable.");

  00060	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@NKDAOJFL@File?5or?5stream?5is?5not?5readable?4?$AA@
  00067	e8 00 00 00 00	 call	 iobase_unsupported
$LN10@PyIOBase_c@3:

; 356  :         return NULL;

  0006c	33 c0		 xor	 eax, eax

; 362  : }

  0006e	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00073	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00077	5f		 pop	 rdi
  00078	c3		 ret	 0
$LN6@PyIOBase_c@3:

; 357  :     }
; 358  :     if (args == Py_True) {

  00079	48 3b f8	 cmp	 rdi, rax
  0007c	75 08		 jne	 SHORT $LN1@PyIOBase_c@3

; 359  :         Py_DECREF(res);

  0007e	48 8b cb	 mov	 rcx, rbx
  00081	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyIOBase_c@3:

; 360  :     }
; 361  :     return res;

  00086	48 8b c3	 mov	 rax, rbx

; 362  : }

  00089	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0008e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00092	5f		 pop	 rdi
  00093	c3		 ret	 0
_PyIOBase_check_readable ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$iobase_writable DD imagerel iobase_writable
	DD	imagerel iobase_writable+100
	DD	imagerel $unwind$iobase_writable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_writable DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\iobase.c
xdata	ENDS
;	COMDAT iobase_writable
_TEXT	SEGMENT
self$ = 64
args$ = 72
iobase_writable PROC					; COMDAT

; 371  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 372  :     Py_RETURN_FALSE;

  00006	e8 00 00 00 00	 call	 _Py_PXCTX
  0000b	85 c0		 test	 eax, eax
  0000d	75 48		 jne	 SHORT $LN7@iobase_wri
  0000f	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00024	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0002a	4c 8b cb	 mov	 r9, rbx
  0002d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00035	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003a	85 c0		 test	 eax, eax
  0003c	75 09		 jne	 SHORT $LN3@iobase_wri
  0003e	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  00045	74 07		 je	 SHORT $LN9@iobase_wri
$LN3@iobase_wri:
  00047	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN9@iobase_wri:
  0004e	48 8b c3	 mov	 rax, rbx

; 373  : }

  00051	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00055	5b		 pop	 rbx
  00056	c3		 ret	 0
$LN7@iobase_wri:

; 372  :     Py_RETURN_FALSE;

  00057	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 373  : }

  0005e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00062	5b		 pop	 rbx
  00063	c3		 ret	 0
iobase_writable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@EAIDIKNM@File?5or?5stream?5is?5not?5writable?4?$AA@ ; `string'
PUBLIC	??_C@_0BJ@KNMDLIPM@_PyIOBase_check_writable?$AA@ ; `string'
EXTRN	_PyIO_str_writable:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyIOBase_check_writable DD imagerel $LN11
	DD	imagerel $LN11+148
	DD	imagerel $unwind$_PyIOBase_check_writable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyIOBase_check_writable DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0CA@EAIDIKNM@File?5or?5stream?5is?5not?5writable?4?$AA@
CONST	SEGMENT
??_C@_0CA@EAIDIKNM@File?5or?5stream?5is?5not?5writable?4?$AA@ DB 'File or'
	DB	' stream is not writable.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KNMDLIPM@_PyIOBase_check_writable?$AA@
CONST	SEGMENT
??_C@_0BJ@KNMDLIPM@_PyIOBase_check_writable?$AA@ DB '_PyIOBase_check_writ'
	DB	'able', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyIOBase_check_writable
_TEXT	SEGMENT
self$ = 64
args$ = 72
_PyIOBase_check_writable PROC				; COMDAT

; 378  : {

$LN11:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fa	 mov	 rdi, rdx

; 379  :     PyObject *res  = PyObject_CallMethodObjArgs(self, _PyIO_str_writable, NULL);

  0000d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_writable
  00014	45 33 c0	 xor	 r8d, r8d
  00017	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  0001c	48 8b d8	 mov	 rbx, rax

; 380  :     if (res == NULL)

  0001f	48 85 c0	 test	 rax, rax

; 381  :         return NULL;

  00022	74 48		 je	 SHORT $LN10@PyIOBase_c@4

; 382  :     if (res != Py_True) {

  00024	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0002b	48 3b d8	 cmp	 rbx, rax
  0002e	74 49		 je	 SHORT $LN6@PyIOBase_c@4

; 383  :         Py_CLEAR(res);

  00030	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@KFPEJKND@?4?4?2Modules?2_io?2iobase?4c?$AA@
  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@KNMDLIPM@_PyIOBase_check_writable?$AA@
  0003e	4c 8b cb	 mov	 r9, rbx
  00041	41 b8 7f 01 00
	00		 mov	 r8d, 383		; 0000017fH
  00047	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0004f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00054	85 c0		 test	 eax, eax
  00056	75 08		 jne	 SHORT $LN4@PyIOBase_c@4
  00058	48 8b cb	 mov	 rcx, rbx
  0005b	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@PyIOBase_c@4:

; 384  :         iobase_unsupported("File or stream is not writable.");

  00060	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@EAIDIKNM@File?5or?5stream?5is?5not?5writable?4?$AA@
  00067	e8 00 00 00 00	 call	 iobase_unsupported
$LN10@PyIOBase_c@4:

; 385  :         return NULL;

  0006c	33 c0		 xor	 eax, eax

; 391  : }

  0006e	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00073	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00077	5f		 pop	 rdi
  00078	c3		 ret	 0
$LN6@PyIOBase_c@4:

; 386  :     }
; 387  :     if (args == Py_True) {

  00079	48 3b f8	 cmp	 rdi, rax
  0007c	75 08		 jne	 SHORT $LN1@PyIOBase_c@4

; 388  :         Py_DECREF(res);

  0007e	48 8b cb	 mov	 rcx, rbx
  00081	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyIOBase_c@4:

; 389  :     }
; 390  :     return res;

  00086	48 8b c3	 mov	 rax, rbx

; 391  : }

  00089	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0008e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00092	5f		 pop	 rdi
  00093	c3		 ret	 0
_PyIOBase_check_writable ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$iobase_enter DD imagerel iobase_enter
	DD	imagerel iobase_enter+100
	DD	imagerel $unwind$iobase_enter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_enter DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\iobase.c
xdata	ENDS
;	COMDAT iobase_enter
_TEXT	SEGMENT
self$ = 64
args$ = 72
iobase_enter PROC					; COMDAT

; 397  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 398  :     if (_PyIOBase_check_closed(self, Py_True) == NULL)

  00006	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_TrueStruct
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	e8 00 00 00 00	 call	 _PyIOBase_check_closed
  00015	48 85 c0	 test	 rax, rax
  00018	75 06		 jne	 SHORT $LN1@iobase_ent

; 403  : }

  0001a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0001e	5b		 pop	 rbx
  0001f	c3		 ret	 0
$LN1@iobase_ent:

; 399  :         return NULL;
; 400  : 
; 401  :     Py_INCREF(self);

  00020	e8 00 00 00 00	 call	 _Py_PXCTX
  00025	85 c0		 test	 eax, eax
  00027	75 32		 jne	 SHORT $LN5@iobase_ent
  00029	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00030	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00037	4c 8b cb	 mov	 r9, rbx
  0003a	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00040	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00048	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004d	85 c0		 test	 eax, eax
  0004f	75 06		 jne	 SHORT $LN4@iobase_ent
  00051	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00055	74 04		 je	 SHORT $LN5@iobase_ent
$LN4@iobase_ent:
  00057	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN5@iobase_ent:

; 402  :     return self;

  0005b	48 8b c3	 mov	 rax, rbx

; 403  : }

  0005e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00062	5b		 pop	 rbx
  00063	c3		 ret	 0
iobase_enter ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT iobase_exit
_TEXT	SEGMENT
self$ = 8
args$ = 16
iobase_exit PROC					; COMDAT

; 408  :     return PyObject_CallMethodObjArgs(self, _PyIO_str_close, NULL);

  00000	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_close
  00007	45 33 c0	 xor	 r8d, r8d

; 409  : }

  0000a	e9 00 00 00 00	 jmp	 PyObject_CallMethodObjArgs
iobase_exit ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT iobase_fileno
_TEXT	SEGMENT
self$ = 8
args$ = 16
iobase_fileno PROC					; COMDAT

; 423  :     return iobase_unsupported("fileno");

  00000	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FFBIALPD@fileno?$AA@

; 424  : }

  00007	e9 00 00 00 00	 jmp	 iobase_unsupported
iobase_fileno ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$iobase_isatty DD imagerel iobase_isatty
	DD	imagerel iobase_isatty+107
	DD	imagerel $unwind$iobase_isatty
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_isatty DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\iobase.c
xdata	ENDS
;	COMDAT iobase_isatty
_TEXT	SEGMENT
self$ = 64
args$ = 72
iobase_isatty PROC					; COMDAT

; 433  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 434  :     if (_PyIOBase_check_closed(self, Py_True) == NULL)

  00004	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_TrueStruct
  0000b	e8 00 00 00 00	 call	 _PyIOBase_check_closed
  00010	48 85 c0	 test	 rax, rax
  00013	75 05		 jne	 SHORT $LN1@iobase_isa

; 437  : }

  00015	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00019	c3		 ret	 0
$LN1@iobase_isa:

; 435  :         return NULL;
; 436  :     Py_RETURN_FALSE;

  0001a	e8 00 00 00 00	 call	 _Py_PXCTX
  0001f	85 c0		 test	 eax, eax
  00021	75 3c		 jne	 SHORT $LN5@iobase_isa
  00023	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_FalseStruct
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00038	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0003e	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00046	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004b	85 c0		 test	 eax, eax
  0004d	75 09		 jne	 SHORT $LN4@iobase_isa
  0004f	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  00056	74 07		 je	 SHORT $LN5@iobase_isa
$LN4@iobase_isa:
  00058	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN5@iobase_isa:
  0005f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 437  : }

  00066	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006a	c3		 ret	 0
iobase_isatty ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DJ@GENNMCJH@read?$CI?$CJ?5should?5have?5returned?5a?5by@ ; `string'
PUBLIC	??_C@_0DJ@NENDLLKN@peek?$CI?$CJ?5should?5have?5returned?5a?5by@ ; `string'
PUBLIC	??_C@_01EFFIKLCJ@n?$AA@				; `string'
PUBLIC	??_C@_01KBJDNOO@i?$AA@				; `string'
PUBLIC	??_C@_0N@DLBPBHHK@?$HMO?$CG?3readline?$AA@	; `string'
EXTRN	PyBytes_FromStringAndSize:PROC
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_IOError:QWORD
EXTRN	PyByteArray_Resize:PROC
EXTRN	_PyIO_trap_eintr:PROC
EXTRN	_PyByteArray_empty_string:BYTE
EXTRN	PyByteArray_FromStringAndSize:PROC
EXTRN	_PyArg_ParseTuple_SizeT:PROC
EXTRN	_PyIO_ConvertSsize_t:PROC
EXTRN	memcpy:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$iobase_readline DD imagerel iobase_readline
	DD	imagerel iobase_readline+158
	DD	imagerel $unwind$iobase_readline
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$iobase_readline DD imagerel iobase_readline+158
	DD	imagerel iobase_readline+673
	DD	imagerel $chain$6$iobase_readline
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$iobase_readline DD imagerel iobase_readline+673
	DD	imagerel iobase_readline+705
	DD	imagerel $chain$7$iobase_readline
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$iobase_readline DD 021H
	DD	imagerel iobase_readline
	DD	imagerel iobase_readline+158
	DD	imagerel $unwind$iobase_readline
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$iobase_readline DD 040a21H
	DD	06d40aH
	DD	0b5405H
	DD	imagerel iobase_readline
	DD	imagerel iobase_readline+158
	DD	imagerel $unwind$iobase_readline
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_readline DD 0c6501H
	DD	04f465H
	DD	05e460H
	DD	07745bH
	DD	0d6456H
	DD	0a3451H
	DD	0c0027206H
xdata	ENDS
;	COMDAT ??_C@_0DJ@GENNMCJH@read?$CI?$CJ?5should?5have?5returned?5a?5by@
CONST	SEGMENT
??_C@_0DJ@GENNMCJH@read?$CI?$CJ?5should?5have?5returned?5a?5by@ DB 'read('
	DB	') should have returned a bytes object, not ''%.200s''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@NENDLLKN@peek?$CI?$CJ?5should?5have?5returned?5a?5by@
CONST	SEGMENT
??_C@_0DJ@NENDLLKN@peek?$CI?$CJ?5should?5have?5returned?5a?5by@ DB 'peek('
	DB	') should have returned a bytes object, not ''%.200s''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01EFFIKLCJ@n?$AA@
CONST	SEGMENT
??_C@_01EFFIKLCJ@n?$AA@ DB 'n', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KBJDNOO@i?$AA@
CONST	SEGMENT
??_C@_01KBJDNOO@i?$AA@ DB 'i', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DLBPBHHK@?$HMO?$CG?3readline?$AA@
CONST	SEGMENT
??_C@_0N@DLBPBHHK@?$HMO?$CG?3readline?$AA@ DB '|O&:readline', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT iobase_readline
_TEXT	SEGMENT
self$ = 80
args$ = 88
limit$ = 96
iobase_readline PROC					; COMDAT

; 452  : {

  00000	41 54		 push	 r12
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00006	48 8b c2	 mov	 rax, rdx
  00009	4c 8b e1	 mov	 r12, rcx

; 453  :     /* For backwards compatibility, a (slowish) readline(). */
; 454  : 
; 455  :     Py_ssize_t limit = -1;
; 456  :     int has_peek = 0;
; 457  :     PyObject *buffer, *result;
; 458  :     Py_ssize_t old_size = -1;
; 459  :     _Py_IDENTIFIER(read);
; 460  :     _Py_IDENTIFIER(peek);
; 461  : 
; 462  :     if (!PyArg_ParseTuple(args, "|O&:readline", &_PyIO_ConvertSsize_t, &limit)) {

  0000c	4c 8d 4c 24 60	 lea	 r9, QWORD PTR limit$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@DLBPBHHK@?$HMO?$CG?3readline?$AA@
  00018	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_PyIO_ConvertSsize_t
  0001f	48 8b c8	 mov	 rcx, rax
  00022	48 c7 44 24 60
	ff ff ff ff	 mov	 QWORD PTR limit$[rsp], -1
  0002b	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00030	85 c0		 test	 eax, eax
  00032	75 09		 jne	 SHORT $LN29@iobase_rea@2

; 463  :         return NULL;

  00034	33 c0		 xor	 eax, eax

; 557  : }

  00036	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0003a	41 5c		 pop	 r12
  0003c	c3		 ret	 0
$LN29@iobase_rea@2:

; 464  :     }
; 465  : 
; 466  :     if (_PyObject_HasAttrId(self, &PyId_peek))

  0003d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00043	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0004c	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  00051	48 89 74 24 68	 mov	 QWORD PTR [rsp+104], rsi
  00056	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  0005b	4c 89 74 24 28	 mov	 QWORD PTR [rsp+40], r14
  00060	4c 89 7c 24 20	 mov	 QWORD PTR [rsp+32], r15
  00065	4c 8b 3c c8	 mov	 r15, QWORD PTR [rax+rcx*8]
  00069	41 be 00 00 00
	00		 mov	 r14d, OFFSET FLAT:?PyId_peek@?1??iobase_readline@@9@9
  0006f	4d 03 f7	 add	 r14, r15
  00072	49 8b cc	 mov	 rcx, r12
  00075	49 8b d6	 mov	 rdx, r14
  00078	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0007d	33 db		 xor	 ebx, ebx
  0007f	bf 01 00 00 00	 mov	 edi, 1
  00084	85 c0		 test	 eax, eax
  00086	0f 45 df	 cmovne	 ebx, edi

; 467  :         has_peek = 1;
; 468  : 
; 469  :     buffer = PyByteArray_FromStringAndSize(NULL, 0);

  00089	33 d2		 xor	 edx, edx
  0008b	33 c9		 xor	 ecx, ecx
  0008d	e8 00 00 00 00	 call	 PyByteArray_FromStringAndSize
  00092	48 8b f0	 mov	 rsi, rax

; 470  :     if (buffer == NULL)

  00095	48 85 c0	 test	 rax, rax
  00098	0f 84 03 02 00
	00		 je	 $LN57@iobase_rea@2
$LN41@iobase_rea@2:
  0009e	48 89 6c 24 58	 mov	 QWORD PTR [rsp+88], rbp
  000a3	4c 89 6c 24 30	 mov	 QWORD PTR [rsp+48], r13

; 475  :         PyObject *b;
; 476  : 
; 477  :         if (has_peek) {

  000a8	4c 63 eb	 movsxd	 r13, ebx
  000ab	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_PyByteArray_empty_string
$LL26@iobase_rea@2:

; 471  :         return NULL;
; 472  : 
; 473  :     while (limit < 0 || Py_SIZE(buffer) < limit) {

  000b2	48 8b 44 24 60	 mov	 rax, QWORD PTR limit$[rsp]
  000b7	48 85 c0	 test	 rax, rax
  000ba	78 0a		 js	 SHORT $LN24@iobase_rea@2
  000bc	48 39 46 60	 cmp	 QWORD PTR [rsi+96], rax
  000c0	0f 8d 80 01 00
	00		 jge	 $LN51@iobase_rea@2
$LN24@iobase_rea@2:

; 474  :         Py_ssize_t nreadahead = 1;

  000c6	48 8b df	 mov	 rbx, rdi

; 475  :         PyObject *b;
; 476  : 
; 477  :         if (has_peek) {

  000c9	4d 85 ed	 test	 r13, r13
  000cc	0f 84 9c 00 00
	00		 je	 $LN23@iobase_rea@2

; 478  :             PyObject *readahead = _PyObject_CallMethodId(self, &PyId_peek, "i", 1);

  000d2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01KBJDNOO@i?$AA@
  000d9	44 8b cf	 mov	 r9d, edi
  000dc	49 8b d6	 mov	 rdx, r14
  000df	49 8b cc	 mov	 rcx, r12
  000e2	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  000e7	48 8b f8	 mov	 rdi, rax

; 479  :             if (readahead == NULL) {

  000ea	48 85 c0	 test	 rax, rax
  000ed	75 14		 jne	 SHORT $LN22@iobase_rea@2

; 480  :                 /* NOTE: PyErr_SetFromErrno() calls PyErr_CheckSignals()
; 481  :                    when EINTR occurs so we needn't do it ourselves. */
; 482  :                 if (_PyIO_trap_eintr()) {

  000ef	e8 00 00 00 00	 call	 _PyIO_trap_eintr
  000f4	85 c0		 test	 eax, eax
  000f6	0f 84 91 01 00
	00		 je	 $fail$20723

; 483  :                     continue;

  000fc	bf 01 00 00 00	 mov	 edi, 1
  00101	eb af		 jmp	 SHORT $LL26@iobase_rea@2
$LN22@iobase_rea@2:

; 484  :                 }
; 485  :                 goto fail;
; 486  :             }
; 487  :             if (!PyBytes_Check(readahead)) {

  00103	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00107	f7 80 00 01 00
	00 00 00 00 08	 test	 DWORD PTR [rax+256], 134217728 ; 08000000H
  00111	0f 84 0b 01 00
	00		 je	 $LN48@iobase_rea@2

; 493  :             }
; 494  :             if (PyBytes_GET_SIZE(readahead) > 0) {

  00117	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  0011b	48 85 c9	 test	 rcx, rcx
  0011e	7e 41		 jle	 SHORT $LN8@iobase_rea@2

; 495  :                 Py_ssize_t n = 0;
; 496  :                 const char *buf = PyBytes_AS_STRING(readahead);
; 497  :                 if (limit >= 0) {

  00120	48 8b 54 24 60	 mov	 rdx, QWORD PTR limit$[rsp]
  00125	33 db		 xor	 ebx, ebx
  00127	48 85 d2	 test	 rdx, rdx
  0012a	78 1d		 js	 SHORT $LN43@iobase_rea@2

; 498  :                     do {
; 499  :                         if (n >= PyBytes_GET_SIZE(readahead) || n >= limit)

  0012c	48 85 c9	 test	 rcx, rcx
  0012f	7e 30		 jle	 SHORT $LN8@iobase_rea@2
$LL17@iobase_rea@2:
  00131	48 3b da	 cmp	 rbx, rdx
  00134	7d 2b		 jge	 SHORT $LN8@iobase_rea@2

; 500  :                             break;
; 501  :                         if (buf[n++] == '\n')

  00136	0f b6 44 1f 78	 movzx	 eax, BYTE PTR [rdi+rbx+120]
  0013b	48 ff c3	 inc	 rbx
  0013e	3c 0a		 cmp	 al, 10
  00140	74 1f		 je	 SHORT $LN8@iobase_rea@2

; 498  :                     do {
; 499  :                         if (n >= PyBytes_GET_SIZE(readahead) || n >= limit)

  00142	48 3b d9	 cmp	 rbx, rcx
  00145	7c ea		 jl	 SHORT $LL17@iobase_rea@2

; 502  :                             break;
; 503  :                     } while (1);
; 504  :                 }
; 505  :                 else {

  00147	eb 18		 jmp	 SHORT $LN8@iobase_rea@2
$LN43@iobase_rea@2:

; 506  :                     do {
; 507  :                         if (n >= PyBytes_GET_SIZE(readahead))

  00149	48 85 c9	 test	 rcx, rcx
  0014c	7e 13		 jle	 SHORT $LN8@iobase_rea@2
  0014e	66 90		 npad	 2
$LL10@iobase_rea@2:

; 508  :                             break;
; 509  :                         if (buf[n++] == '\n')

  00150	0f b6 44 1f 78	 movzx	 eax, BYTE PTR [rdi+rbx+120]
  00155	48 ff c3	 inc	 rbx
  00158	3c 0a		 cmp	 al, 10
  0015a	74 05		 je	 SHORT $LN8@iobase_rea@2

; 506  :                     do {
; 507  :                         if (n >= PyBytes_GET_SIZE(readahead))

  0015c	48 3b d9	 cmp	 rbx, rcx
  0015f	7c ef		 jl	 SHORT $LL10@iobase_rea@2
$LN8@iobase_rea@2:

; 510  :                             break;
; 511  :                     } while (1);
; 512  :                 }
; 513  :                 nreadahead = n;
; 514  :             }
; 515  :             Py_DECREF(readahead);

  00161	48 8b cf	 mov	 rcx, rdi
  00164	e8 00 00 00 00	 call	 _Py_DecRef
  00169	bf 01 00 00 00	 mov	 edi, 1
$LN23@iobase_rea@2:

; 516  :         }
; 517  : 
; 518  :         b = _PyObject_CallMethodId(self, &PyId_read, "n", nreadahead);

  0016e	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_read@?1??iobase_readline@@9@9
  00173	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01EFFIKLCJ@n?$AA@
  0017a	4c 8b cb	 mov	 r9, rbx
  0017d	49 03 d7	 add	 rdx, r15
  00180	49 8b cc	 mov	 rcx, r12
  00183	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  00188	48 8b d8	 mov	 rbx, rax

; 519  :         if (b == NULL) {

  0018b	48 85 c0	 test	 rax, rax
  0018e	75 12		 jne	 SHORT $LN5@iobase_rea@2

; 520  :             /* NOTE: PyErr_SetFromErrno() calls PyErr_CheckSignals()
; 521  :                when EINTR occurs so we needn't do it ourselves. */
; 522  :             if (_PyIO_trap_eintr()) {

  00190	e8 00 00 00 00	 call	 _PyIO_trap_eintr
  00195	85 c0		 test	 eax, eax
  00197	0f 85 15 ff ff
	ff		 jne	 $LL26@iobase_rea@2

; 523  :                 continue;

  0019d	e9 eb 00 00 00	 jmp	 $fail$20723
$LN5@iobase_rea@2:

; 524  :             }
; 525  :             goto fail;
; 526  :         }
; 527  :         if (!PyBytes_Check(b)) {

  001a2	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001a6	f7 80 00 01 00
	00 00 00 00 08	 test	 DWORD PTR [rax+256], 134217728 ; 08000000H
  001b0	0f 84 b8 00 00
	00		 je	 $LN49@iobase_rea@2

; 532  :             goto fail;
; 533  :         }
; 534  :         if (PyBytes_GET_SIZE(b) == 0) {

  001b6	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  001ba	48 85 c0	 test	 rax, rax
  001bd	74 7f		 je	 SHORT $LN50@iobase_rea@2

; 536  :             break;
; 537  :         }
; 538  : 
; 539  :         old_size = PyByteArray_GET_SIZE(buffer);

  001bf	48 8b 7e 60	 mov	 rdi, QWORD PTR [rsi+96]

; 540  :         PyByteArray_Resize(buffer, old_size + PyBytes_GET_SIZE(b));

  001c3	48 8b ce	 mov	 rcx, rsi
  001c6	48 8d 14 38	 lea	 rdx, QWORD PTR [rax+rdi]
  001ca	e8 00 00 00 00	 call	 PyByteArray_Resize

; 541  :         memcpy(PyByteArray_AS_STRING(buffer) + old_size,
; 542  :                PyBytes_AS_STRING(b), PyBytes_GET_SIZE(b));

  001cf	48 83 7e 60 00	 cmp	 QWORD PTR [rsi+96], 0
  001d4	74 09		 je	 SHORT $LN32@iobase_rea@2
  001d6	48 8b 86 80 00
	00 00		 mov	 rax, QWORD PTR [rsi+128]
  001dd	eb 03		 jmp	 SHORT $LN33@iobase_rea@2
$LN32@iobase_rea@2:
  001df	48 8b c5	 mov	 rax, rbp
$LN33@iobase_rea@2:
  001e2	4c 8b 43 60	 mov	 r8, QWORD PTR [rbx+96]
  001e6	48 8d 53 78	 lea	 rdx, QWORD PTR [rbx+120]
  001ea	48 8d 0c 38	 lea	 rcx, QWORD PTR [rax+rdi]
  001ee	e8 00 00 00 00	 call	 memcpy

; 543  : 
; 544  :         Py_DECREF(b);

  001f3	48 8b cb	 mov	 rcx, rbx
  001f6	e8 00 00 00 00	 call	 _Py_DecRef

; 545  : 
; 546  :         if (PyByteArray_AS_STRING(buffer)[PyByteArray_GET_SIZE(buffer) - 1] == '\n')

  001fb	4c 8b 5e 60	 mov	 r11, QWORD PTR [rsi+96]
  001ff	4d 85 db	 test	 r11, r11
  00202	74 09		 je	 SHORT $LN34@iobase_rea@2
  00204	48 8b 86 80 00
	00 00		 mov	 rax, QWORD PTR [rsi+128]
  0020b	eb 03		 jmp	 SHORT $LN35@iobase_rea@2
$LN34@iobase_rea@2:
  0020d	48 8b c5	 mov	 rax, rbp
$LN35@iobase_rea@2:
  00210	41 80 7c 03 ff
	0a		 cmp	 BYTE PTR [r11+rax-1], 10
  00216	74 2e		 je	 SHORT $LN51@iobase_rea@2

; 547  :             break;
; 548  :     }

  00218	bf 01 00 00 00	 mov	 edi, 1
  0021d	e9 90 fe ff ff	 jmp	 $LL26@iobase_rea@2
$LN48@iobase_rea@2:

; 488  :                 PyErr_Format(PyExc_IOError,
; 489  :                              "peek() should have returned a bytes object, "
; 490  :                              "not '%.200s'", Py_TYPE(readahead)->tp_name);

  00222	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00226	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  0022d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DJ@NENDLLKN@peek?$CI?$CJ?5should?5have?5returned?5a?5by@
  00234	e8 00 00 00 00	 call	 PyErr_Format

; 491  :                 Py_DECREF(readahead);

  00239	48 8b cf	 mov	 rcx, rdi

; 492  :                 goto fail;

  0023c	eb 4a		 jmp	 SHORT $LN60@iobase_rea@2
$LN50@iobase_rea@2:

; 535  :             Py_DECREF(b);

  0023e	48 8b cb	 mov	 rcx, rbx
  00241	e8 00 00 00 00	 call	 _Py_DecRef
$LN51@iobase_rea@2:

; 549  : 
; 550  :     result = PyBytes_FromStringAndSize(PyByteArray_AS_STRING(buffer),
; 551  :                                        PyByteArray_GET_SIZE(buffer));

  00246	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  0024a	48 85 d2	 test	 rdx, rdx
  0024d	74 07		 je	 SHORT $LN36@iobase_rea@2
  0024f	48 8b ae 80 00
	00 00		 mov	 rbp, QWORD PTR [rsi+128]
$LN36@iobase_rea@2:
  00256	48 8b cd	 mov	 rcx, rbp
  00259	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize

; 552  :     Py_DECREF(buffer);

  0025e	48 8b ce	 mov	 rcx, rsi
  00261	48 8b d8	 mov	 rbx, rax
  00264	e8 00 00 00 00	 call	 _Py_DecRef

; 553  :     return result;

  00269	48 8b c3	 mov	 rax, rbx
  0026c	eb 29		 jmp	 SHORT $LN59@iobase_rea@2
$LN49@iobase_rea@2:

; 528  :             PyErr_Format(PyExc_IOError,
; 529  :                          "read() should have returned a bytes object, "
; 530  :                          "not '%.200s'", Py_TYPE(b)->tp_name);

  0026e	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00272	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  00279	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DJ@GENNMCJH@read?$CI?$CJ?5should?5have?5returned?5a?5by@
  00280	e8 00 00 00 00	 call	 PyErr_Format

; 531  :             Py_DECREF(b);

  00285	48 8b cb	 mov	 rcx, rbx
$LN60@iobase_rea@2:
  00288	e8 00 00 00 00	 call	 _Py_DecRef
$fail$20723:

; 554  :   fail:
; 555  :     Py_DECREF(buffer);

  0028d	48 8b ce	 mov	 rcx, rsi
  00290	e8 00 00 00 00	 call	 _Py_DecRef

; 556  :     return NULL;

  00295	33 c0		 xor	 eax, eax
$LN59@iobase_rea@2:
  00297	4c 8b 6c 24 30	 mov	 r13, QWORD PTR [rsp+48]
  0029c	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
$LN57@iobase_rea@2:
  002a1	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]
  002a6	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  002ab	4c 8b 74 24 28	 mov	 r14, QWORD PTR [rsp+40]
  002b0	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  002b5	4c 8b 7c 24 20	 mov	 r15, QWORD PTR [rsp+32]

; 557  : }

  002ba	48 83 c4 40	 add	 rsp, 64			; 00000040H
  002be	41 5c		 pop	 r12
  002c0	c3		 ret	 0
iobase_readline ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$iobase_iter DD imagerel iobase_iter
	DD	imagerel iobase_iter+100
	DD	imagerel $unwind$iobase_iter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_iter DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\iobase.c
xdata	ENDS
;	COMDAT iobase_iter
_TEXT	SEGMENT
self$ = 64
iobase_iter PROC					; COMDAT

; 561  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 562  :     if (_PyIOBase_check_closed(self, Py_True) == NULL)

  00006	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_TrueStruct
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	e8 00 00 00 00	 call	 _PyIOBase_check_closed
  00015	48 85 c0	 test	 rax, rax
  00018	75 06		 jne	 SHORT $LN1@iobase_ite

; 567  : }

  0001a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0001e	5b		 pop	 rbx
  0001f	c3		 ret	 0
$LN1@iobase_ite:

; 563  :         return NULL;
; 564  : 
; 565  :     Py_INCREF(self);

  00020	e8 00 00 00 00	 call	 _Py_PXCTX
  00025	85 c0		 test	 eax, eax
  00027	75 32		 jne	 SHORT $LN5@iobase_ite
  00029	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00030	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00037	4c 8b cb	 mov	 r9, rbx
  0003a	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00040	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00048	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004d	85 c0		 test	 eax, eax
  0004f	75 06		 jne	 SHORT $LN4@iobase_ite
  00051	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00055	74 04		 je	 SHORT $LN5@iobase_ite
$LN4@iobase_ite:
  00057	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN5@iobase_ite:

; 566  :     return self;

  0005b	48 8b c3	 mov	 rax, rbx

; 567  : }

  0005e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00062	5b		 pop	 rbx
  00063	c3		 ret	 0
iobase_iter ENDP
_TEXT	ENDS
EXTRN	PyObject_Size:PROC
EXTRN	_PyIO_str_readline:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$iobase_iternext DD imagerel iobase_iternext
	DD	imagerel iobase_iternext+67
	DD	imagerel $unwind$iobase_iternext
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_iternext DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT iobase_iternext
_TEXT	SEGMENT
self$ = 48
iobase_iternext PROC					; COMDAT

; 571  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 572  :     PyObject *line = PyObject_CallMethodObjArgs(self, _PyIO_str_readline, NULL);

  00006	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_readline
  0000d	45 33 c0	 xor	 r8d, r8d
  00010	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  00015	48 8b d8	 mov	 rbx, rax

; 573  : 
; 574  :     if (line == NULL)

  00018	48 85 c0	 test	 rax, rax

; 575  :         return NULL;

  0001b	74 15		 je	 SHORT $LN5@iobase_ite@2

; 576  : 
; 577  :     if (PyObject_Size(line) == 0) {

  0001d	48 8b c8	 mov	 rcx, rax
  00020	e8 00 00 00 00	 call	 PyObject_Size
  00025	48 85 c0	 test	 rax, rax
  00028	75 10		 jne	 SHORT $LN1@iobase_ite@2

; 578  :         Py_DECREF(line);

  0002a	48 8b cb	 mov	 rcx, rbx
  0002d	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@iobase_ite@2:

; 579  :         return NULL;

  00032	33 c0		 xor	 eax, eax

; 583  : }

  00034	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00038	5b		 pop	 rbx
  00039	c3		 ret	 0
$LN1@iobase_ite@2:

; 580  :     }
; 581  : 
; 582  :     return line;

  0003a	48 8b c3	 mov	 rax, rbx

; 583  : }

  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5b		 pop	 rbx
  00042	c3		 ret	 0
iobase_iternext ENDP
_TEXT	ENDS
PUBLIC	??_C@_01MJMHLOMK@O?$AA@				; `string'
PUBLIC	??_C@_0O@LEPJKNAA@?$HMO?$CG?3readlines?$AA@	; `string'
EXTRN	PyErr_Occurred:PROC
EXTRN	PyList_Append:PROC
EXTRN	PyIter_Next:PROC
EXTRN	PyList_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$iobase_readlines DD imagerel iobase_readlines
	DD	imagerel iobase_readlines+73
	DD	imagerel $unwind$iobase_readlines
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$iobase_readlines DD imagerel iobase_readlines+73
	DD	imagerel iobase_readlines+171
	DD	imagerel $chain$0$iobase_readlines
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$iobase_readlines DD imagerel iobase_readlines+171
	DD	imagerel iobase_readlines+198
	DD	imagerel $chain$2$iobase_readlines
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$iobase_readlines DD imagerel iobase_readlines+198
	DD	imagerel iobase_readlines+315
	DD	imagerel $chain$5$iobase_readlines
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$iobase_readlines DD imagerel iobase_readlines+315
	DD	imagerel iobase_readlines+332
	DD	imagerel $chain$7$iobase_readlines
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$iobase_readlines DD 040021H
	DD	077400H
	DD	063400H
	DD	imagerel iobase_readlines
	DD	imagerel iobase_readlines+73
	DD	imagerel $unwind$iobase_readlines
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$iobase_readlines DD 040821H
	DD	063408H
	DD	077400H
	DD	imagerel iobase_readlines
	DD	imagerel iobase_readlines+73
	DD	imagerel $unwind$iobase_readlines
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$iobase_readlines DD 020021H
	DD	077400H
	DD	imagerel iobase_readlines
	DD	imagerel iobase_readlines+73
	DD	imagerel $unwind$iobase_readlines
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$iobase_readlines DD 020521H
	DD	077405H
	DD	imagerel iobase_readlines
	DD	imagerel iobase_readlines+73
	DD	imagerel $unwind$iobase_readlines
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_readlines DD 040a01H
	DD	09540aH
	DD	06006320aH
xdata	ENDS
;	COMDAT ??_C@_01MJMHLOMK@O?$AA@
CONST	SEGMENT
??_C@_01MJMHLOMK@O?$AA@ DB 'O', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LEPJKNAA@?$HMO?$CG?3readlines?$AA@
CONST	SEGMENT
??_C@_0O@LEPJKNAA@?$HMO?$CG?3readlines?$AA@ DB '|O&:readlines', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT iobase_readlines
_TEXT	SEGMENT
self$ = 48
args$ = 56
hint$ = 64
iobase_readlines PROC					; COMDAT

; 594  : {

  00000	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  00005	56		 push	 rsi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b c2	 mov	 rax, rdx
  0000d	48 8b e9	 mov	 rbp, rcx

; 595  :     Py_ssize_t hint = -1, length = 0;
; 596  :     PyObject *result;
; 597  : 
; 598  :     if (!PyArg_ParseTuple(args, "|O&:readlines", &_PyIO_ConvertSsize_t, &hint)) {

  00010	4c 8d 4c 24 40	 lea	 r9, QWORD PTR hint$[rsp]
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@LEPJKNAA@?$HMO?$CG?3readlines?$AA@
  0001c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_PyIO_ConvertSsize_t
  00023	48 8b c8	 mov	 rcx, rax
  00026	48 c7 44 24 40
	ff ff ff ff	 mov	 QWORD PTR hint$[rsp], -1
  0002f	33 f6		 xor	 esi, esi
  00031	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00036	85 c0		 test	 eax, eax
  00038	75 0d		 jne	 SHORT $LN11@iobase_rea@3

; 599  :         return NULL;

  0003a	33 c0		 xor	 eax, eax

; 644  : }

  0003c	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00041	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00045	5e		 pop	 rsi
  00046	c3		 ret	 0
$LN11@iobase_rea@3:

; 600  :     }
; 601  : 
; 602  :     result = PyList_New(0);

  00047	33 c9		 xor	 ecx, ecx
  00049	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  0004e	e8 00 00 00 00	 call	 PyList_New
  00053	48 8b f8	 mov	 rdi, rax

; 603  :     if (result == NULL)

  00056	48 85 c0	 test	 rax, rax

; 604  :         return NULL;

  00059	74 3e		 je	 SHORT $LN22@iobase_rea@3

; 605  : 
; 606  :     if (hint <= 0) {

  0005b	48 39 74 24 40	 cmp	 QWORD PTR hint$[rsp], rsi
  00060	7f 64		 jg	 SHORT $LN15@iobase_rea@3

; 607  :         /* XXX special-casing this made sense in the Python version in order
; 608  :            to remove the bytecode interpretation overhead, but it could
; 609  :            probably be removed here. */
; 610  :         _Py_IDENTIFIER(extend);
; 611  :         PyObject *ret = _PyObject_CallMethodId(result, &PyId_extend, "O", self);

  00062	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00068	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00071	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_extend@?3??iobase_readlines@@9@9
  00076	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  0007a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01MJMHLOMK@O?$AA@
  00081	4c 8b cd	 mov	 r9, rbp
  00084	48 8b cf	 mov	 rcx, rdi
  00087	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT

; 612  : 
; 613  :         if (ret == NULL) {

  0008c	48 85 c0	 test	 rax, rax
  0008f	75 1a		 jne	 SHORT $LN8@iobase_rea@3

; 614  :             Py_DECREF(result);

  00091	48 8b cf	 mov	 rcx, rdi
  00094	e8 00 00 00 00	 call	 _Py_DecRef
$LN22@iobase_rea@3:

; 615  :             return NULL;

  00099	33 c0		 xor	 eax, eax
  0009b	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]

; 644  : }

  000a0	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  000a5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a9	5e		 pop	 rsi
  000aa	c3		 ret	 0
$LN8@iobase_rea@3:

; 616  :         }
; 617  :         Py_DECREF(ret);

  000ab	48 8b c8	 mov	 rcx, rax
  000ae	e8 00 00 00 00	 call	 _Py_DecRef

; 618  :         return result;

  000b3	48 8b c7	 mov	 rax, rdi
  000b6	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]

; 644  : }

  000bb	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  000c0	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c4	5e		 pop	 rsi
  000c5	c3		 ret	 0
$LN15@iobase_rea@3:

; 619  :     }
; 620  : 
; 621  :     while (1) {
; 622  :         PyObject *line = PyIter_Next(self);

  000c6	48 8b cd	 mov	 rcx, rbp
  000c9	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  000ce	e8 00 00 00 00	 call	 PyIter_Next
  000d3	48 8b d8	 mov	 rbx, rax

; 623  :         if (line == NULL) {

  000d6	48 85 c0	 test	 rax, rax
  000d9	74 3e		 je	 SHORT $LN16@iobase_rea@3
  000db	0f 1f 44 00 00	 npad	 5
$LL7@iobase_rea@3:

; 627  :             }
; 628  :             else
; 629  :                 break; /* StopIteration raised */
; 630  :         }
; 631  : 
; 632  :         if (PyList_Append(result, line) < 0) {

  000e0	48 8b d3	 mov	 rdx, rbx
  000e3	48 8b cf	 mov	 rcx, rdi
  000e6	e8 00 00 00 00	 call	 PyList_Append

; 636  :         }
; 637  :         length += PyObject_Size(line);

  000eb	48 8b cb	 mov	 rcx, rbx
  000ee	85 c0		 test	 eax, eax
  000f0	78 49		 js	 SHORT $LN17@iobase_rea@3
  000f2	e8 00 00 00 00	 call	 PyObject_Size

; 638  :         Py_DECREF(line);

  000f7	48 8b cb	 mov	 rcx, rbx
  000fa	48 03 f0	 add	 rsi, rax
  000fd	e8 00 00 00 00	 call	 _Py_DecRef

; 639  : 
; 640  :         if (length > hint)

  00102	48 3b 74 24 40	 cmp	 rsi, QWORD PTR hint$[rsp]
  00107	7f 1a		 jg	 SHORT $LN18@iobase_rea@3

; 619  :     }
; 620  : 
; 621  :     while (1) {
; 622  :         PyObject *line = PyIter_Next(self);

  00109	48 8b cd	 mov	 rcx, rbp
  0010c	e8 00 00 00 00	 call	 PyIter_Next
  00111	48 8b d8	 mov	 rbx, rax

; 623  :         if (line == NULL) {

  00114	48 85 c0	 test	 rax, rax
  00117	75 c7		 jne	 SHORT $LL7@iobase_rea@3
$LN16@iobase_rea@3:

; 624  :             if (PyErr_Occurred()) {

  00119	e8 00 00 00 00	 call	 PyErr_Occurred
  0011e	48 85 c0	 test	 rax, rax

; 625  :                 Py_DECREF(result);
; 626  :                 return NULL;

  00121	75 1d		 jne	 SHORT $LN21@iobase_rea@3
$LN18@iobase_rea@3:

; 641  :             break;
; 642  :     }
; 643  :     return result;

  00123	48 8b c7	 mov	 rax, rdi
$LN20@iobase_rea@3:
  00126	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0012b	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]

; 644  : }

  00130	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00135	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00139	5e		 pop	 rsi
  0013a	c3		 ret	 0
$LN17@iobase_rea@3:

; 633  :             Py_DECREF(line);

  0013b	e8 00 00 00 00	 call	 _Py_DecRef
$LN21@iobase_rea@3:

; 634  :             Py_DECREF(result);

  00140	48 8b cf	 mov	 rcx, rdi
  00143	e8 00 00 00 00	 call	 _Py_DecRef

; 635  :             return NULL;

  00148	33 c0		 xor	 eax, eax
  0014a	eb da		 jmp	 SHORT $LN20@iobase_rea@3
iobase_readlines ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@MKHKIDFH@O?3writelines?$AA@		; `string'
EXTRN	_PyIO_str_write:QWORD
EXTRN	PyObject_GetIter:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$iobase_writelines DD imagerel iobase_writelines
	DD	imagerel iobase_writelines+69
	DD	imagerel $unwind$iobase_writelines
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$iobase_writelines DD imagerel iobase_writelines+69
	DD	imagerel iobase_writelines+98
	DD	imagerel $chain$0$iobase_writelines
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$iobase_writelines DD imagerel iobase_writelines+98
	DD	imagerel iobase_writelines+261
	DD	imagerel $chain$4$iobase_writelines
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$iobase_writelines DD imagerel iobase_writelines+261
	DD	imagerel iobase_writelines+273
	DD	imagerel $chain$6$iobase_writelines
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$iobase_writelines DD 060021H
	DD	097400H
	DD	076400H
	DD	063400H
	DD	imagerel iobase_writelines
	DD	imagerel iobase_writelines+69
	DD	imagerel $unwind$iobase_writelines
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$iobase_writelines DD 060d21H
	DD	09740dH
	DD	063408H
	DD	076400H
	DD	imagerel iobase_writelines
	DD	imagerel iobase_writelines+69
	DD	imagerel $unwind$iobase_writelines
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$iobase_writelines DD 020521H
	DD	076405H
	DD	imagerel iobase_writelines
	DD	imagerel iobase_writelines+69
	DD	imagerel $unwind$iobase_writelines
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_writelines DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT ??_C@_0N@MKHKIDFH@O?3writelines?$AA@
CONST	SEGMENT
??_C@_0N@MKHKIDFH@O?3writelines?$AA@ DB 'O:writelines', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT iobase_writelines
_TEXT	SEGMENT
self$ = 48
args$ = 56
lines$ = 64
iobase_writelines PROC					; COMDAT

; 648  : {

  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b c2	 mov	 rax, rdx
  00009	48 8b e9	 mov	 rbp, rcx

; 649  :     PyObject *lines, *iter, *res;
; 650  : 
; 651  :     if (!PyArg_ParseTuple(args, "O:writelines", &lines)) {

  0000c	4c 8d 44 24 40	 lea	 r8, QWORD PTR lines$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@MKHKIDFH@O?3writelines?$AA@
  00018	48 8b c8	 mov	 rcx, rax
  0001b	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00020	85 c0		 test	 eax, eax
  00022	75 08		 jne	 SHORT $LN13@iobase_wri@2
$LN26@iobase_wri@2:

; 652  :         return NULL;

  00024	33 c0		 xor	 eax, eax

; 686  : }

  00026	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002a	5d		 pop	 rbp
  0002b	c3		 ret	 0
$LN13@iobase_wri@2:

; 653  :     }
; 654  : 
; 655  :     if (_PyIOBase_check_closed(self, Py_True) == NULL)

  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_TrueStruct
  00033	48 8b cd	 mov	 rcx, rbp
  00036	e8 00 00 00 00	 call	 _PyIOBase_check_closed
  0003b	48 85 c0	 test	 rax, rax

; 656  :         return NULL;

  0003e	74 e4		 je	 SHORT $LN26@iobase_wri@2

; 657  : 
; 658  :     iter = PyObject_GetIter(lines);

  00040	48 8b 4c 24 40	 mov	 rcx, QWORD PTR lines$[rsp]
  00045	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  0004a	e8 00 00 00 00	 call	 PyObject_GetIter
  0004f	48 8b f0	 mov	 rsi, rax

; 659  :     if (iter == NULL)

  00052	48 85 c0	 test	 rax, rax
  00055	75 0b		 jne	 SHORT $LN17@iobase_wri@2
  00057	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]

; 686  : }

  0005c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00060	5d		 pop	 rbp
  00061	c3		 ret	 0
$LN17@iobase_wri@2:

; 660  :         return NULL;
; 661  : 
; 662  :     while (1) {
; 663  :         PyObject *line = PyIter_Next(iter);

  00062	48 8b c8	 mov	 rcx, rax
  00065	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0006a	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  0006f	e8 00 00 00 00	 call	 PyIter_Next
  00074	48 8b d8	 mov	 rbx, rax

; 664  :         if (line == NULL) {

  00077	48 85 c0	 test	 rax, rax
  0007a	74 4f		 je	 SHORT $LN19@iobase_wri@2
  0007c	0f 1f 40 00	 npad	 4
$LL5@iobase_wri@2:

; 668  :             }
; 669  :             else
; 670  :                 break; /* Stop Iteration */
; 671  :         }
; 672  : 
; 673  :         res = NULL;
; 674  :         do {
; 675  :             res = PyObject_CallMethodObjArgs(self, _PyIO_str_write, line, NULL);

  00080	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_write
  00087	45 33 c9	 xor	 r9d, r9d
  0008a	4c 8b c3	 mov	 r8, rbx
  0008d	48 8b cd	 mov	 rcx, rbp
  00090	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  00095	48 8b f8	 mov	 rdi, rax

; 676  :         } while (res == NULL && _PyIO_trap_eintr());

  00098	48 85 c0	 test	 rax, rax
  0009b	75 09		 jne	 SHORT $LN2@iobase_wri@2
  0009d	e8 00 00 00 00	 call	 _PyIO_trap_eintr
  000a2	85 c0		 test	 eax, eax
  000a4	75 da		 jne	 SHORT $LL5@iobase_wri@2
$LN2@iobase_wri@2:

; 677  :         Py_DECREF(line);

  000a6	48 8b cb	 mov	 rcx, rbx
  000a9	e8 00 00 00 00	 call	 _Py_DecRef

; 678  :         if (res == NULL) {

  000ae	48 85 ff	 test	 rdi, rdi
  000b1	74 52		 je	 SHORT $LN20@iobase_wri@2

; 681  :         }
; 682  :         Py_DECREF(res);

  000b3	48 8b cf	 mov	 rcx, rdi
  000b6	e8 00 00 00 00	 call	 _Py_DecRef
  000bb	48 8b ce	 mov	 rcx, rsi
  000be	e8 00 00 00 00	 call	 PyIter_Next
  000c3	48 8b d8	 mov	 rbx, rax
  000c6	48 85 c0	 test	 rax, rax
  000c9	75 b5		 jne	 SHORT $LL5@iobase_wri@2
$LN19@iobase_wri@2:

; 665  :             if (PyErr_Occurred()) {

  000cb	e8 00 00 00 00	 call	 PyErr_Occurred

; 666  :                 Py_DECREF(iter);

  000d0	48 8b ce	 mov	 rcx, rsi
  000d3	48 85 c0	 test	 rax, rax

; 667  :                 return NULL;

  000d6	75 30		 jne	 SHORT $LN25@iobase_wri@2

; 683  :     }
; 684  :     Py_DECREF(iter);

  000d8	e8 00 00 00 00	 call	 _Py_DecRef

; 685  :     Py_RETURN_NONE;

  000dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000e4	e8 00 00 00 00	 call	 _Py_IncRef
  000e9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN24@iobase_wri@2:
  000f0	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000f5	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  000fa	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]

; 686  : }

  000ff	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00103	5d		 pop	 rbp
  00104	c3		 ret	 0
$LN20@iobase_wri@2:

; 679  :             Py_DECREF(iter);

  00105	48 8b ce	 mov	 rcx, rsi
$LN25@iobase_wri@2:
  00108	e8 00 00 00 00	 call	 _Py_DecRef

; 680  :             return NULL;

  0010d	33 c0		 xor	 eax, eax
  0010f	eb df		 jmp	 SHORT $LN24@iobase_wri@2
iobase_writelines ENDP
_TEXT	ENDS
PUBLIC	??_C@_07NICEAMBA@?$HMn?3read?$AA@		; `string'
EXTRN	PyByteArray_AsString:PROC
EXTRN	PyNumber_AsSsize_t:PROC
EXTRN	_PyIO_str_readinto:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$rawiobase_read DD imagerel rawiobase_read
	DD	imagerel rawiobase_read+106
	DD	imagerel $unwind$rawiobase_read
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$rawiobase_read DD imagerel rawiobase_read+106
	DD	imagerel rawiobase_read+232
	DD	imagerel $chain$0$rawiobase_read
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$rawiobase_read DD imagerel rawiobase_read+232
	DD	imagerel rawiobase_read+278
	DD	imagerel $chain$2$rawiobase_read
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$rawiobase_read DD 020021H
	DD	067400H
	DD	imagerel rawiobase_read
	DD	imagerel rawiobase_read+106
	DD	imagerel $unwind$rawiobase_read
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$rawiobase_read DD 020521H
	DD	067405H
	DD	imagerel rawiobase_read
	DD	imagerel rawiobase_read+106
	DD	imagerel $unwind$rawiobase_read
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$rawiobase_read DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_07NICEAMBA@?$HMn?3read?$AA@
CONST	SEGMENT
??_C@_07NICEAMBA@?$HMn?3read?$AA@ DB '|n:read', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT rawiobase_read
_TEXT	SEGMENT
self$ = 48
args$ = 56
n$ = 64
rawiobase_read PROC					; COMDAT

; 787  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b c2	 mov	 rax, rdx
  00009	48 8b d9	 mov	 rbx, rcx

; 788  :     Py_ssize_t n = -1;
; 789  :     PyObject *b, *res;
; 790  : 
; 791  :     if (!PyArg_ParseTuple(args, "|n:read", &n)) {

  0000c	4c 8d 44 24 40	 lea	 r8, QWORD PTR n$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07NICEAMBA@?$HMn?3read?$AA@
  00018	48 8b c8	 mov	 rcx, rax
  0001b	48 c7 44 24 40
	ff ff ff ff	 mov	 QWORD PTR n$[rsp], -1
  00024	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00029	85 c0		 test	 eax, eax
  0002b	75 08		 jne	 SHORT $LN6@rawiobase_

; 792  :         return NULL;

  0002d	33 c0		 xor	 eax, eax

; 821  :     Py_DECREF(b);
; 822  :     return res;
; 823  : }

  0002f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00033	5b		 pop	 rbx
  00034	c3		 ret	 0
$LN6@rawiobase_:

; 793  :     }
; 794  : 
; 795  :     if (n < 0) {

  00035	48 8b 54 24 40	 mov	 rdx, QWORD PTR n$[rsp]
  0003a	48 85 d2	 test	 rdx, rdx
  0003d	79 29		 jns	 SHORT $LN5@rawiobase_

; 796  :         _Py_IDENTIFIER(readall);
; 797  : 
; 798  :         return _PyObject_CallMethodId(self, &PyId_readall, NULL);

  0003f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00045	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0004e	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_readall@?3??rawiobase_read@@9@9
  00053	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  00057	45 33 c0	 xor	 r8d, r8d
  0005a	48 8b cb	 mov	 rcx, rbx
  0005d	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT

; 821  :     Py_DECREF(b);
; 822  :     return res;
; 823  : }

  00062	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00066	5b		 pop	 rbx
  00067	c3		 ret	 0
$LN5@rawiobase_:

; 799  :     }
; 800  : 
; 801  :     /* TODO: allocate a bytes object directly instead and manually construct
; 802  :        a writable memoryview pointing to it. */
; 803  :     b = PyByteArray_FromStringAndSize(NULL, n);

  00068	33 c9		 xor	 ecx, ecx
  0006a	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  0006f	e8 00 00 00 00	 call	 PyByteArray_FromStringAndSize
  00074	48 8b f8	 mov	 rdi, rax

; 804  :     if (b == NULL)

  00077	48 85 c0	 test	 rax, rax

; 805  :         return NULL;

  0007a	74 5f		 je	 SHORT $LN10@rawiobase_

; 806  : 
; 807  :     res = PyObject_CallMethodObjArgs(self, _PyIO_str_readinto, b, NULL);

  0007c	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_readinto
  00083	45 33 c9	 xor	 r9d, r9d
  00086	4c 8b c0	 mov	 r8, rax
  00089	48 8b cb	 mov	 rcx, rbx
  0008c	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  00091	48 8b d8	 mov	 rbx, rax

; 808  :     if (res == NULL || res == Py_None) {

  00094	48 85 c0	 test	 rax, rax
  00097	74 67		 je	 SHORT $LN2@rawiobase_
  00099	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000a0	48 3b d8	 cmp	 rbx, rax
  000a3	74 5b		 je	 SHORT $LN2@rawiobase_

; 811  :     }
; 812  : 
; 813  :     n = PyNumber_AsSsize_t(res, PyExc_ValueError);

  000a5	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_ValueError
  000ac	48 8b cb	 mov	 rcx, rbx
  000af	e8 00 00 00 00	 call	 PyNumber_AsSsize_t

; 814  :     Py_DECREF(res);

  000b4	48 8b cb	 mov	 rcx, rbx
  000b7	48 89 44 24 40	 mov	 QWORD PTR n$[rsp], rax
  000bc	e8 00 00 00 00	 call	 _Py_DecRef

; 815  :     if (n == -1 && PyErr_Occurred()) {

  000c1	48 83 7c 24 40
	ff		 cmp	 QWORD PTR n$[rsp], -1
  000c7	75 1f		 jne	 SHORT $LN1@rawiobase_
  000c9	e8 00 00 00 00	 call	 PyErr_Occurred
  000ce	48 85 c0	 test	 rax, rax
  000d1	74 15		 je	 SHORT $LN1@rawiobase_

; 816  :         Py_DECREF(b);

  000d3	48 8b cf	 mov	 rcx, rdi
  000d6	e8 00 00 00 00	 call	 _Py_DecRef
$LN10@rawiobase_:

; 817  :         return NULL;

  000db	33 c0		 xor	 eax, eax
  000dd	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 821  :     Py_DECREF(b);
; 822  :     return res;
; 823  : }

  000e2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000e6	5b		 pop	 rbx
  000e7	c3		 ret	 0
$LN1@rawiobase_:

; 818  :     }
; 819  : 
; 820  :     res = PyBytes_FromStringAndSize(PyByteArray_AsString(b), n);

  000e8	48 8b cf	 mov	 rcx, rdi
  000eb	e8 00 00 00 00	 call	 PyByteArray_AsString
  000f0	48 8b 54 24 40	 mov	 rdx, QWORD PTR n$[rsp]
  000f5	48 8b c8	 mov	 rcx, rax
  000f8	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  000fd	48 8b d8	 mov	 rbx, rax
$LN2@rawiobase_:

; 809  :         Py_DECREF(b);

  00100	48 8b cf	 mov	 rcx, rdi
  00103	e8 00 00 00 00	 call	 _Py_DecRef
  00108	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 810  :         return res;

  0010d	48 8b c3	 mov	 rax, rbx

; 821  :     Py_DECREF(b);
; 822  :     return res;
; 823  : }

  00110	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00114	5b		 pop	 rbx
  00115	c3		 ret	 0
rawiobase_read ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@LFIKHDFM@read?$CI?$CJ?5should?5return?5bytes?$AA@ ; `string'
EXTRN	_PyBytes_Join:PROC
EXTRN	_PyIO_empty_bytes:QWORD
EXTRN	PyExc_TypeError:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$rawiobase_readall DD imagerel rawiobase_readall
	DD	imagerel rawiobase_readall+443
	DD	imagerel $unwind$rawiobase_readall
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$rawiobase_readall DD 0b5301H
	DD	0b6453H
	DD	06d442H
	DD	0cc439H
	DD	0a3434H
	DD	070036207H
	DD	05002H
xdata	ENDS
;	COMDAT ??_C@_0BL@LFIKHDFM@read?$CI?$CJ?5should?5return?5bytes?$AA@
CONST	SEGMENT
??_C@_0BL@LFIKHDFM@read?$CI?$CJ?5should?5return?5bytes?$AA@ DB 'read() sh'
	DB	'ould return bytes', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\iobase.c
CONST	ENDS
;	COMDAT rawiobase_readall
_TEXT	SEGMENT
self$ = 80
args$ = 88
rawiobase_readall PROC					; COMDAT

; 831  : {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00007	48 8b e9	 mov	 rbp, rcx

; 832  :     int r;
; 833  :     PyObject *chunks = PyList_New(0);

  0000a	33 c9		 xor	 ecx, ecx
  0000c	e8 00 00 00 00	 call	 PyList_New
  00011	48 8b f8	 mov	 rdi, rax

; 834  :     PyObject *result;
; 835  :     
; 836  :     if (chunks == NULL)

  00014	48 85 c0	 test	 rax, rax
  00017	75 07		 jne	 SHORT $LN26@rawiobase_@2

; 881  : }

  00019	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0001d	5f		 pop	 rdi
  0001e	5d		 pop	 rbp
  0001f	c3		 ret	 0
$LN26@rawiobase_@2:

; 876  :         }
; 877  :     }

  00020	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00026	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0002f	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  00034	4c 89 64 24 60	 mov	 QWORD PTR [rsp+96], r12
  00039	4c 8b 24 c8	 mov	 r12, QWORD PTR [rax+rcx*8]
  0003d	4c 89 6c 24 30	 mov	 QWORD PTR [rsp+48], r13
  00042	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_read@?2??rawiobase_readall@@9@9
  00047	4c 8d 2d 00 00
	00 00		 lea	 r13, OFFSET FLAT:_Py_NoneStruct
  0004e	48 89 74 24 58	 mov	 QWORD PTR [rsp+88], rsi
  00053	4c 03 e2	 add	 r12, rdx
  00056	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL9@rawiobase_@2:

; 837  :         return NULL;
; 838  : 
; 839  :     while (1) {
; 840  :         _Py_IDENTIFIER(read);
; 841  :         PyObject *data = _PyObject_CallMethodId(self, &PyId_read,
; 842  :                                                 "i", DEFAULT_BUFFER_SIZE);

  00060	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01KBJDNOO@i?$AA@
  00067	41 b9 00 20 00
	00		 mov	 r9d, 8192		; 00002000H
  0006d	49 8b d4	 mov	 rdx, r12
  00070	48 8b cd	 mov	 rcx, rbp
  00073	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  00078	48 8b d8	 mov	 rbx, rax

; 843  :         if (!data) {

  0007b	48 85 c0	 test	 rax, rax
  0007e	75 18		 jne	 SHORT $LN7@rawiobase_@2

; 844  :             /* NOTE: PyErr_SetFromErrno() calls PyErr_CheckSignals()
; 845  :                when EINTR occurs so we needn't do it ourselves. */
; 846  :             if (_PyIO_trap_eintr()) {

  00080	e8 00 00 00 00	 call	 _PyIO_trap_eintr
  00085	85 c0		 test	 eax, eax
  00087	75 d7		 jne	 SHORT $LL9@rawiobase_@2

; 874  :             Py_DECREF(chunks);

  00089	48 8b cf	 mov	 rcx, rdi
  0008c	e8 00 00 00 00	 call	 _Py_DecRef

; 875  :             return NULL;

  00091	33 c0		 xor	 eax, eax
  00093	e9 08 01 00 00	 jmp	 $LN34@rawiobase_@2
$LN7@rawiobase_@2:

; 847  :                 continue;
; 848  :             }
; 849  :             Py_DECREF(chunks);
; 850  :             return NULL;
; 851  :         }
; 852  :         if (data == Py_None) {

  00098	49 3b c5	 cmp	 rax, r13
  0009b	0f 84 d3 00 00
	00		 je	 $LN27@rawiobase_@2

; 858  :             break;
; 859  :         }
; 860  :         if (!PyBytes_Check(data)) {

  000a1	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000a5	f7 80 00 01 00
	00 00 00 00 08	 test	 DWORD PTR [rax+256], 134217728 ; 08000000H
  000af	0f 84 98 00 00
	00		 je	 $LN28@rawiobase_@2

; 865  :         }
; 866  :         if (PyBytes_GET_SIZE(data) == 0) {

  000b5	48 83 7b 60 00	 cmp	 QWORD PTR [rbx+96], 0
  000ba	0f 84 88 00 00
	00		 je	 $LN29@rawiobase_@2

; 869  :             break;
; 870  :         }
; 871  :         r = PyList_Append(chunks, data);

  000c0	48 8b d3	 mov	 rdx, rbx
  000c3	48 8b cf	 mov	 rcx, rdi
  000c6	e8 00 00 00 00	 call	 PyList_Append
  000cb	8b f0		 mov	 esi, eax

; 872  :         Py_DECREF(data);

  000cd	e8 00 00 00 00	 call	 _Py_PXCTX
  000d2	85 c0		 test	 eax, eax
  000d4	75 5e		 jne	 SHORT $LN23@rawiobase_@2
  000d6	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  000da	f6 c1 20	 test	 cl, 32			; 00000020H
  000dd	75 4d		 jne	 SHORT $LN17@rawiobase_@2
  000df	84 c9		 test	 cl, cl
  000e1	78 49		 js	 SHORT $LN17@rawiobase_@2
  000e3	f6 c1 02	 test	 cl, 2
  000e6	75 4c		 jne	 SHORT $LN23@rawiobase_@2
  000e8	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000ec	75 46		 jne	 SHORT $LN23@rawiobase_@2
  000ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000fc	4c 8b cb	 mov	 r9, rbx
  000ff	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00105	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0010d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00112	48 8b cb	 mov	 rcx, rbx
  00115	85 c0		 test	 eax, eax
  00117	74 07		 je	 SHORT $LN22@rawiobase_@2
  00119	e8 00 00 00 00	 call	 _Px_Dealloc
  0011e	eb 14		 jmp	 SHORT $LN23@rawiobase_@2
$LN22@rawiobase_@2:
  00120	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00124	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0012a	eb 08		 jmp	 SHORT $LN23@rawiobase_@2
$LN17@rawiobase_@2:
  0012c	48 8b cb	 mov	 rcx, rbx
  0012f	e8 00 00 00 00	 call	 Px_DecRef
$LN23@rawiobase_@2:

; 873  :         if (r < 0) {

  00134	85 f6		 test	 esi, esi
  00136	0f 89 24 ff ff
	ff		 jns	 $LL9@rawiobase_@2

; 874  :             Py_DECREF(chunks);

  0013c	48 8b cf	 mov	 rcx, rdi
  0013f	e8 00 00 00 00	 call	 _Py_DecRef

; 875  :             return NULL;

  00144	33 c0		 xor	 eax, eax
  00146	eb 58		 jmp	 SHORT $LN34@rawiobase_@2
$LN29@rawiobase_@2:

; 867  :             /* EOF */
; 868  :             Py_DECREF(data);

  00148	48 8b cb	 mov	 rcx, rbx
  0014b	eb 31		 jmp	 SHORT $LN35@rawiobase_@2
$LN28@rawiobase_@2:

; 861  :             Py_DECREF(chunks);

  0014d	48 8b cf	 mov	 rcx, rdi
  00150	e8 00 00 00 00	 call	 _Py_DecRef

; 862  :             Py_DECREF(data);

  00155	48 8b cb	 mov	 rcx, rbx
  00158	e8 00 00 00 00	 call	 _Py_DecRef

; 863  :             PyErr_SetString(PyExc_TypeError, "read() should return bytes");

  0015d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00164	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@LFIKHDFM@read?$CI?$CJ?5should?5return?5bytes?$AA@
  0016b	e8 00 00 00 00	 call	 PyErr_SetString

; 864  :             return NULL;

  00170	33 c0		 xor	 eax, eax
  00172	eb 2c		 jmp	 SHORT $LN34@rawiobase_@2
$LN27@rawiobase_@2:

; 853  :             if (PyList_GET_SIZE(chunks) == 0) {

  00174	48 83 7f 60 00	 cmp	 QWORD PTR [rdi+96], 0

; 854  :                 Py_DECREF(chunks);
; 855  :                 return data;

  00179	74 1a		 je	 SHORT $LN36@rawiobase_@2

; 856  :             }
; 857  :             Py_DECREF(data);

  0017b	48 8b c8	 mov	 rcx, rax
$LN35@rawiobase_@2:
  0017e	e8 00 00 00 00	 call	 _Py_DecRef

; 878  :     result = _PyBytes_Join(_PyIO_empty_bytes, chunks);

  00183	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyIO_empty_bytes
  0018a	48 8b d7	 mov	 rdx, rdi
  0018d	e8 00 00 00 00	 call	 _PyBytes_Join
  00192	48 8b d8	 mov	 rbx, rax
$LN36@rawiobase_@2:

; 879  :     Py_DECREF(chunks);

  00195	48 8b cf	 mov	 rcx, rdi
  00198	e8 00 00 00 00	 call	 _Py_DecRef

; 880  :     return result;

  0019d	48 8b c3	 mov	 rax, rbx
$LN34@rawiobase_@2:
  001a0	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  001a5	4c 8b 64 24 60	 mov	 r12, QWORD PTR [rsp+96]
  001aa	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  001af	4c 8b 6c 24 30	 mov	 r13, QWORD PTR [rsp+48]

; 881  : }

  001b4	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001b8	5f		 pop	 rdi
  001b9	5d		 pop	 rbp
  001ba	c3		 ret	 0
rawiobase_readall ENDP
_TEXT	ENDS
END
