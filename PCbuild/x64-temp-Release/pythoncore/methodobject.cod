; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	PyCFunction_Call
PUBLIC	??_C@_0BL@DMMHINFJ@builtin_function_or_method?$AA@ ; `string'
PUBLIC	??_C@_0L@LNCJCPDP@__module__?$AA@		; `string'
PUBLIC	??_C@_08KFOOMKEG@__self__?$AA@			; `string'
PUBLIC	??_C@_08BHKDPDAA@__name__?$AA@			; `string'
PUBLIC	??_C@_07DIBBIFIJ@__doc__?$AA@			; `string'
PUBLIC	??_C@_0N@FMLGAKCE@__qualname__?$AA@		; `string'
PUBLIC	PyCFunction_Type
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
_BSS	SEGMENT
free_list DQ	01H DUP (?)
numfree	DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0BL@DMMHINFJ@builtin_function_or_method?$AA@
CONST	SEGMENT
??_C@_0BL@DMMHINFJ@builtin_function_or_method?$AA@ DB 'builtin_function_o'
	DB	'r_method', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LNCJCPDP@__module__?$AA@
CONST	SEGMENT
??_C@_0L@LNCJCPDP@__module__?$AA@ DB '__module__', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
meth_getsets DQ	FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
	DQ	FLAT:meth_get__doc__
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_08BHKDPDAA@__name__?$AA@
	DQ	FLAT:meth_get__name__
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0N@FMLGAKCE@__qualname__?$AA@
	DQ	FLAT:meth_get__qualname__
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_08KFOOMKEG@__self__?$AA@
	DQ	FLAT:meth_get__self__
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
	ORG $+8
meth_members DQ	FLAT:??_C@_0L@LNCJCPDP@__module__?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000070H
	DD	04H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
PyCFunction_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BL@DMMHINFJ@builtin_function_or_method?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:meth_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:meth_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:meth_hash
	DQ	FLAT:PyCFunction_Call
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:meth_traverse
	DQ	0000000000000000H
	DQ	FLAT:meth_richcompare
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:meth_members
	DQ	FLAT:meth_getsets
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+120
_DATA	ENDS
;	COMDAT ??_C@_08KFOOMKEG@__self__?$AA@
CONST	SEGMENT
??_C@_08KFOOMKEG@__self__?$AA@ DB '__self__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BHKDPDAA@__name__?$AA@
CONST	SEGMENT
??_C@_08BHKDPDAA@__name__?$AA@ DB '__name__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DIBBIFIJ@__doc__?$AA@
CONST	SEGMENT
??_C@_07DIBBIFIJ@__doc__?$AA@ DB '__doc__', 00H		; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId___qualname__@?1??meth_get__qualname__@@9@9 DQ 0000000000000000H ; `meth_get__qualname__'::`2'::PyId___qualname__
	DQ	FLAT:??_C@_0N@FMLGAKCE@__qualname__?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_0N@FMLGAKCE@__qualname__?$AA@
CONST	SEGMENT
??_C@_0N@FMLGAKCE@__qualname__?$AA@ DB '__qualname__', 00H ; `string'
CONST	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\include\objimpl.h
_TEXT	ENDS
;	COMDAT _PyObject_InitHead
_TEXT	SEGMENT
op$ = 8
_PyObject_InitHead PROC					; COMDAT

; 216  :     assert(Py_TYPE(op));
; 217  :     op->is_px = _Py_NOT_PARALLEL;

  00000	48 ba 78 56 ef
	be 34 12 ad de	 mov	 rdx, -2401243008567650696 ; dead1234beef5678H

; 218  :     op->px    = _Py_NOT_PARALLEL;
; 219  :     op->slist_entry.Next = NULL;

  0000a	33 c0		 xor	 eax, eax

; 220  :     op->px_flags  = Py_PXFLAGS_ISPY;

  0000c	48 c7 41 20 01
	00 00 00	 mov	 QWORD PTR [rcx+32], 1
  00014	48 89 11	 mov	 QWORD PTR [rcx], rdx
  00017	48 89 51 08	 mov	 QWORD PTR [rcx+8], rdx
  0001b	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 221  :     op->srw_lock  = NULL;

  0001f	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 222  :     op->event     = NULL;

  00023	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 223  :     op->orig_type = NULL;

  00027	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 224  : #ifdef Py_TRACE_REFS
; 225  :     op->_ob_next = NULL;
; 226  :     op->_ob_prev = NULL;
; 227  : #else
; 228  :     op->_ob_next = _Py_NOT_PARALLEL;

  0002b	48 89 51 40	 mov	 QWORD PTR [rcx+64], rdx

; 229  :     op->_ob_prev = _Py_NOT_PARALLEL;

  0002f	48 89 51 48	 mov	 QWORD PTR [rcx+72], rdx

; 230  : #endif
; 231  : }

  00033	c3		 ret	 0
_PyObject_InitHead ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@JKHPLOII@PyObject_INIT?$AA@		; `string'
PUBLIC	??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@ ; `string'
EXTRN	_Px_NewReference:PROC
EXTRN	_PxObject_Init:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_INIT DD imagerel PyObject_INIT
	DD	imagerel PyObject_INIT+185
	DD	imagerel $unwind$PyObject_INIT
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_INIT DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0O@JKHPLOII@PyObject_INIT?$AA@
CONST	SEGMENT
??_C@_0O@JKHPLOII@PyObject_INIT?$AA@ DB 'PyObject_INIT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@
CONST	SEGMENT
??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@ DB 'c:\src\pypa'
	DB	'rallel\include\objimpl.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyObject_INIT
_TEXT	SEGMENT
op$ = 64
tp$ = 72
PyObject_INIT PROC					; COMDAT

; 236  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fa	 mov	 rdi, rdx
  0000d	48 8b d9	 mov	 rbx, rcx

; 237  :     Px_RETURN(_PxObject_Init(op, tp))

  00010	e8 00 00 00 00	 call	 _Py_PXCTX
  00015	85 c0		 test	 eax, eax
  00017	74 15		 je	 SHORT $LN1@PyObject_I
  00019	48 8b d7	 mov	 rdx, rdi
  0001c	48 8b cb	 mov	 rcx, rbx

; 242  : }

  0001f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00024	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00028	5f		 pop	 rdi
  00029	e9 00 00 00 00	 jmp	 _PxObject_Init
$LN1@PyObject_I:

; 238  :     Py_TYPE(op) = tp;
; 239  :     _PyObject_InitHead(op);

  0002e	48 b9 78 56 ef
	be 34 12 ad de	 mov	 rcx, -2401243008567650696 ; dead1234beef5678H
  00038	33 c0		 xor	 eax, eax

; 240  :     _Py_NewReference(op);

  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@
  00041	48 89 0b	 mov	 QWORD PTR [rbx], rcx
  00044	48 89 4b 08	 mov	 QWORD PTR [rbx+8], rcx
  00048	48 89 4b 40	 mov	 QWORD PTR [rbx+64], rcx
  0004c	48 89 4b 48	 mov	 QWORD PTR [rbx+72], rcx
  00050	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@JKHPLOII@PyObject_INIT?$AA@
  00057	4c 8b cb	 mov	 r9, rbx
  0005a	41 b8 f0 00 00
	00		 mov	 r8d, 240		; 000000f0H
  00060	48 89 7b 58	 mov	 QWORD PTR [rbx+88], rdi
  00064	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax
  00068	48 c7 43 20 01
	00 00 00	 mov	 QWORD PTR [rbx+32], 1
  00070	48 89 43 28	 mov	 QWORD PTR [rbx+40], rax
  00074	48 89 43 30	 mov	 QWORD PTR [rbx+48], rax
  00078	48 89 43 38	 mov	 QWORD PTR [rbx+56], rax
  0007c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00084	e8 00 00 00 00	 call	 _PyParallel_Guard
  00089	85 c0		 test	 eax, eax
  0008b	74 16		 je	 SHORT $LN4@PyObject_I
  0008d	48 8b cb	 mov	 rcx, rbx
  00090	e8 00 00 00 00	 call	 _Px_NewReference

; 241  :     return op;

  00095	48 8b c3	 mov	 rax, rbx

; 242  : }

  00098	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0009d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a1	5f		 pop	 rdi
  000a2	c3		 ret	 0
$LN4@PyObject_I:

; 240  :     _Py_NewReference(op);

  000a3	48 c7 43 50 01
	00 00 00	 mov	 QWORD PTR [rbx+80], 1

; 241  :     return op;

  000ab	48 8b c3	 mov	 rax, rbx

; 242  : }

  000ae	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000b3	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b7	5f		 pop	 rdi
  000b8	c3		 ret	 0
PyObject_INIT ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ ; `string'
PUBLIC	??_C@_0BC@NAJKNCGF@PyCFunction_NewEx?$AA@	; `string'
PUBLIC	??_C@_0BK@JCLMKNNL@?4?4?2Objects?2methodobject?4c?$AA@ ; `string'
PUBLIC	PyCFunction_NewEx
EXTRN	_PyObject_GC_New:PROC
EXTRN	_PxObject_New:PROC
EXTRN	_PyGC_generation0:QWORD
EXTRN	Py_FatalError:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyCFunction_NewEx DD imagerel $LN32
	DD	imagerel $LN32+456
	DD	imagerel $unwind$PyCFunction_NewEx
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCFunction_NewEx DD 0a1a01H
	DD	0b741aH
	DD	0a641aH
	DD	09541aH
	DD	08341aH
	DD	0c016521aH
xdata	ENDS
;	COMDAT ??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
CONST	SEGMENT
??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ DB 'GC object alread'
	DB	'y tracked', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NAJKNCGF@PyCFunction_NewEx?$AA@
CONST	SEGMENT
??_C@_0BC@NAJKNCGF@PyCFunction_NewEx?$AA@ DB 'PyCFunction_NewEx', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JCLMKNNL@?4?4?2Objects?2methodobject?4c?$AA@
CONST	SEGMENT
??_C@_0BK@JCLMKNNL@?4?4?2Objects?2methodobject?4c?$AA@ DB '..\Objects\met'
	DB	'hodobject.c', 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\methodobject.c
CONST	ENDS
;	COMDAT PyCFunction_NewEx
_TEXT	SEGMENT
ml$ = 64
self$ = 72
module$ = 80
PyCFunction_NewEx PROC					; COMDAT

; 18   : {

$LN32:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0001a	49 8b f0	 mov	 rsi, r8
  0001d	48 8b ea	 mov	 rbp, rdx
  00020	4c 8b e1	 mov	 r12, rcx

; 19   :     PyCFunctionObject *op;
; 20   :     op = (Py_PXCTX ? 0 : free_list);

  00023	e8 00 00 00 00	 call	 _Py_PXCTX
  00028	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR free_list
  0002f	33 ff		 xor	 edi, edi
  00031	85 c0		 test	 eax, eax
  00033	48 0f 45 df	 cmovne	 rbx, rdi

; 21   :     if (op != NULL) {

  00037	48 85 db	 test	 rbx, rbx
  0003a	0f 84 5e 01 00
	00		 je	 $LN16@PyCFunctio

; 22   :         free_list = (PyCFunctionObject *)(op->m_self);

  00040	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]

; 23   :         PyObject_INIT((PyObject *)op, &PyCFunction_Type);

  00044	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyCFunction_Type
  0004b	48 8b cb	 mov	 rcx, rbx
  0004e	48 89 05 00 00
	00 00		 mov	 QWORD PTR free_list, rax
  00055	e8 00 00 00 00	 call	 PyObject_INIT

; 24   :         numfree--;

  0005a	ff 0d 00 00 00
	00		 dec	 DWORD PTR numfree
$LN14@PyCFunctio:

; 30   :     }
; 31   :     op->m_ml = ml;

  00060	4c 89 63 60	 mov	 QWORD PTR [rbx+96], r12

; 32   :     Py_XINCREF(self);

  00064	48 85 ed	 test	 rbp, rbp
  00067	74 3b		 je	 SHORT $LN12@PyCFunctio
  00069	e8 00 00 00 00	 call	 _Py_PXCTX
  0006e	85 c0		 test	 eax, eax
  00070	75 32		 jne	 SHORT $LN12@PyCFunctio
  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00080	4c 8b cd	 mov	 r9, rbp
  00083	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00089	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00091	e8 00 00 00 00	 call	 _PyParallel_Guard
  00096	85 c0		 test	 eax, eax
  00098	75 06		 jne	 SHORT $LN23@PyCFunctio
  0009a	f6 45 20 20	 test	 BYTE PTR [rbp+32], 32	; 00000020H
  0009e	74 04		 je	 SHORT $LN12@PyCFunctio
$LN23@PyCFunctio:
  000a0	48 ff 45 50	 inc	 QWORD PTR [rbp+80]
$LN12@PyCFunctio:

; 33   :     op->m_self = self;

  000a4	48 89 6b 68	 mov	 QWORD PTR [rbx+104], rbp

; 34   :     Py_XINCREF(module);

  000a8	48 85 f6	 test	 rsi, rsi
  000ab	74 3b		 je	 SHORT $LN8@PyCFunctio
  000ad	e8 00 00 00 00	 call	 _Py_PXCTX
  000b2	85 c0		 test	 eax, eax
  000b4	75 32		 jne	 SHORT $LN8@PyCFunctio
  000b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000c4	4c 8b ce	 mov	 r9, rsi
  000c7	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000cd	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000d5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000da	85 c0		 test	 eax, eax
  000dc	75 06		 jne	 SHORT $LN27@PyCFunctio
  000de	f6 46 20 20	 test	 BYTE PTR [rsi+32], 32	; 00000020H
  000e2	74 04		 je	 SHORT $LN8@PyCFunctio
$LN27@PyCFunctio:
  000e4	48 ff 46 50	 inc	 QWORD PTR [rsi+80]
$LN8@PyCFunctio:

; 35   :     op->m_module = module;
; 36   :     _PyObject_GC_TRACK(op);

  000e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@JCLMKNNL@?4?4?2Objects?2methodobject?4c?$AA@
  000ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@NAJKNCGF@PyCFunction_NewEx?$AA@
  000f6	4c 8b cb	 mov	 r9, rbx
  000f9	41 b8 24 00 00
	00		 mov	 r8d, 36			; 00000024H
  000ff	48 89 73 70	 mov	 QWORD PTR [rbx+112], rsi
  00103	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0010b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00110	85 c0		 test	 eax, eax
  00112	75 6c		 jne	 SHORT $LN2@PyCFunctio
  00114	44 8d 40 24	 lea	 r8d, QWORD PTR [rax+36]
  00118	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@JCLMKNNL@?4?4?2Objects?2methodobject?4c?$AA@
  0011f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@NAJKNCGF@PyCFunction_NewEx?$AA@
  00126	4c 8b cb	 mov	 r9, rbx
  00129	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00131	e8 00 00 00 00	 call	 _PyParallel_Guard
  00136	85 c0		 test	 eax, eax
  00138	75 04		 jne	 SHORT $LN22@PyCFunctio
  0013a	48 8d 7b e8	 lea	 rdi, QWORD PTR [rbx-24]
$LN22@PyCFunctio:
  0013e	48 83 7f 10 fe	 cmp	 QWORD PTR [rdi+16], -2
  00143	74 0c		 je	 SHORT $LN1@PyCFunctio
  00145	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  0014c	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyCFunctio:
  00151	48 c7 47 10 fd
	ff ff ff	 mov	 QWORD PTR [rdi+16], -3
  00159	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00160	48 89 07	 mov	 QWORD PTR [rdi], rax
  00163	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  0016a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0016e	48 89 4f 08	 mov	 QWORD PTR [rdi+8], rcx
  00172	48 89 39	 mov	 QWORD PTR [rcx], rdi
  00175	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  0017c	48 89 78 08	 mov	 QWORD PTR [rax+8], rdi
$LN2@PyCFunctio:

; 37   :     return (PyObject *)op;

  00180	48 8b c3	 mov	 rax, rbx
$LN17@PyCFunctio:

; 38   : }

  00183	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00188	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  0018d	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00192	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  00197	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0019b	41 5c		 pop	 r12
  0019d	c3		 ret	 0
$LN16@PyCFunctio:

; 25   :     }
; 26   :     else {
; 27   :         op = PyObject_GC_New(PyCFunctionObject, &PyCFunction_Type);

  0019e	e8 00 00 00 00	 call	 _Py_PXCTX
  001a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyCFunction_Type
  001aa	85 c0		 test	 eax, eax
  001ac	74 07		 je	 SHORT $LN19@PyCFunctio
  001ae	e8 00 00 00 00	 call	 _PxObject_New
  001b3	eb 05		 jmp	 SHORT $LN31@PyCFunctio
$LN19@PyCFunctio:
  001b5	e8 00 00 00 00	 call	 _PyObject_GC_New
$LN31@PyCFunctio:
  001ba	48 8b d8	 mov	 rbx, rax

; 28   :         if (op == NULL)

  001bd	48 85 c0	 test	 rax, rax
  001c0	0f 85 9a fe ff
	ff		 jne	 $LN14@PyCFunctio

; 29   :             return NULL;

  001c6	eb bb		 jmp	 SHORT $LN17@PyCFunctio
PyCFunction_NewEx ENDP
_TEXT	ENDS
PUBLIC	PyCFunction_GetFunction
EXTRN	_PyErr_BadInternalCall:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCFunction_GetFunction DD imagerel $LN4
	DD	imagerel $LN4+54
	DD	imagerel $unwind$PyCFunction_GetFunction
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCFunction_GetFunction DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyCFunction_GetFunction
_TEXT	SEGMENT
op$ = 48
PyCFunction_GetFunction PROC				; COMDAT

; 42   : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 43   :     if (!PyCFunction_Check(op)) {

  00004	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCFunction_Type
  0000b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0000f	74 18		 je	 SHORT $LN1@PyCFunctio@2

; 44   :         PyErr_BadInternalCall();

  00011	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@JCLMKNNL@?4?4?2Objects?2methodobject?4c?$AA@
  00018	ba 2c 00 00 00	 mov	 edx, 44			; 0000002cH
  0001d	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 45   :         return NULL;

  00022	33 c0		 xor	 eax, eax

; 48   : }

  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	c3		 ret	 0
$LN1@PyCFunctio@2:

; 46   :     }
; 47   :     return PyCFunction_GET_FUNCTION(op);

  00029	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  0002d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]

; 48   : }

  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	c3		 ret	 0
PyCFunction_GetFunction ENDP
_TEXT	ENDS
PUBLIC	PyCFunction_GetSelf
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCFunction_GetSelf DD imagerel $LN7
	DD	imagerel $LN7+60
	DD	imagerel $unwind$PyCFunction_GetSelf
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCFunction_GetSelf DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyCFunction_GetSelf
_TEXT	SEGMENT
op$ = 48
PyCFunction_GetSelf PROC				; COMDAT

; 52   : {

$LN7:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 53   :     if (!PyCFunction_Check(op)) {

  00004	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCFunction_Type
  0000b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0000f	74 18		 je	 SHORT $LN1@PyCFunctio@3

; 54   :         PyErr_BadInternalCall();

  00011	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@JCLMKNNL@?4?4?2Objects?2methodobject?4c?$AA@
  00018	ba 36 00 00 00	 mov	 edx, 54			; 00000036H
  0001d	e8 00 00 00 00	 call	 _PyErr_BadInternalCall
$LN6@PyCFunctio@3:

; 55   :         return NULL;

  00022	33 c0		 xor	 eax, eax

; 58   : }

  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	c3		 ret	 0
$LN1@PyCFunctio@3:

; 56   :     }
; 57   :     return PyCFunction_GET_SELF(op);

  00029	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  0002d	f6 40 10 20	 test	 BYTE PTR [rax+16], 32	; 00000020H
  00031	75 ef		 jne	 SHORT $LN6@PyCFunctio@3
  00033	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]

; 58   : }

  00037	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003b	c3		 ret	 0
PyCFunction_GetSelf ENDP
_TEXT	ENDS
PUBLIC	PyCFunction_GetFlags
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCFunction_GetFlags DD imagerel $LN4
	DD	imagerel $LN4+54
	DD	imagerel $unwind$PyCFunction_GetFlags
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCFunction_GetFlags DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyCFunction_GetFlags
_TEXT	SEGMENT
op$ = 48
PyCFunction_GetFlags PROC				; COMDAT

; 62   : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 63   :     if (!PyCFunction_Check(op)) {

  00004	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCFunction_Type
  0000b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0000f	74 19		 je	 SHORT $LN1@PyCFunctio@4

; 64   :         PyErr_BadInternalCall();

  00011	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@JCLMKNNL@?4?4?2Objects?2methodobject?4c?$AA@
  00018	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0001d	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 65   :         return -1;

  00022	83 c8 ff	 or	 eax, -1

; 68   : }

  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
$LN1@PyCFunctio@4:

; 66   :     }
; 67   :     return PyCFunction_GET_FLAGS(op);

  0002a	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  0002e	8b 40 10	 mov	 eax, DWORD PTR [rax+16]

; 68   : }

  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	c3		 ret	 0
PyCFunction_GetFlags ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@NIOJMLLF@?$CF?4200s?$CI?$CJ?5takes?5no?5keyword?5argume@ ; `string'
PUBLIC	??_C@_0CI@PIHKOAGH@?$CF?4200s?$CI?$CJ?5takes?5no?5arguments?5?$CI?$CFzd@ ; `string'
PUBLIC	??_C@_0DA@MJAFCLG@?$CF?4200s?$CI?$CJ?5takes?5exactly?5one?5argum@ ; `string'
PUBLIC	??_C@_0EJ@HBEDIBIN@Bad?5call?5flags?5in?5PyCFunction_Ca@ ; `string'
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyDict_Size:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_SystemError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCFunction_Call DD imagerel $LN21
	DD	imagerel $LN21+322
	DD	imagerel $unwind$PyCFunction_Call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCFunction_Call DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0CE@NIOJMLLF@?$CF?4200s?$CI?$CJ?5takes?5no?5keyword?5argume@
CONST	SEGMENT
??_C@_0CE@NIOJMLLF@?$CF?4200s?$CI?$CJ?5takes?5no?5keyword?5argume@ DB '%.'
	DB	'200s() takes no keyword arguments', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@PIHKOAGH@?$CF?4200s?$CI?$CJ?5takes?5no?5arguments?5?$CI?$CFzd@
CONST	SEGMENT
??_C@_0CI@PIHKOAGH@?$CF?4200s?$CI?$CJ?5takes?5no?5arguments?5?$CI?$CFzd@ DB '%'
	DB	'.200s() takes no arguments (%zd given)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@MJAFCLG@?$CF?4200s?$CI?$CJ?5takes?5exactly?5one?5argum@
CONST	SEGMENT
??_C@_0DA@MJAFCLG@?$CF?4200s?$CI?$CJ?5takes?5exactly?5one?5argum@ DB '%.2'
	DB	'00s() takes exactly one argument (%zd given)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@HBEDIBIN@Bad?5call?5flags?5in?5PyCFunction_Ca@
CONST	SEGMENT
??_C@_0EJ@HBEDIBIN@Bad?5call?5flags?5in?5PyCFunction_Ca@ DB 'Bad call fla'
	DB	'gs in PyCFunction_Call. METH_OLDARGS is no longer supported!', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyCFunction_Call
_TEXT	SEGMENT
func$ = 48
arg$ = 56
kw$ = 64
PyCFunction_Call PROC					; COMDAT

; 72   : {

$LN21:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 73   :     PyCFunctionObject* f = (PyCFunctionObject*)func;
; 74   :     PyCFunction meth = PyCFunction_GET_FUNCTION(func);

  00014	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  00018	48 8b f2	 mov	 rsi, rdx
  0001b	48 8b f9	 mov	 rdi, rcx

; 75   :     PyObject *self = PyCFunction_GET_SELF(func);

  0001e	f6 40 10 20	 test	 BYTE PTR [rax+16], 32	; 00000020H
  00022	48 8b 68 08	 mov	 rbp, QWORD PTR [rax+8]
  00026	74 04		 je	 SHORT $LN18@PyCFunctio@5
  00028	33 db		 xor	 ebx, ebx
  0002a	eb 04		 jmp	 SHORT $LN19@PyCFunctio@5
$LN18@PyCFunctio@5:
  0002c	48 8b 59 68	 mov	 rbx, QWORD PTR [rcx+104]
$LN19@PyCFunctio@5:

; 76   :     Py_ssize_t size;
; 77   : 
; 78   :     switch (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)) {

  00030	8b 48 10	 mov	 ecx, DWORD PTR [rax+16]
  00033	83 e1 8f	 and	 ecx, -113		; ffffffffffffff8fH
  00036	ff c9		 dec	 ecx
  00038	0f 84 b7 00 00
	00		 je	 $LN13@PyCFunctio@5
  0003e	83 e9 02	 sub	 ecx, 2
  00041	0f 84 a7 00 00
	00		 je	 $LN10@PyCFunctio@5
  00047	ff c9		 dec	 ecx
  00049	74 66		 je	 SHORT $LN9@PyCFunctio@5
  0004b	83 f9 04	 cmp	 ecx, 4
  0004e	74 1a		 je	 SHORT $LN5@PyCFunctio@5

; 105  :         }
; 106  :         break;
; 107  :     default:
; 108  :         PyErr_SetString(PyExc_SystemError, "Bad call flags in "
; 109  :                         "PyCFunction_Call. METH_OLDARGS is no "
; 110  :                         "longer supported!");

  00050	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00057	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EJ@HBEDIBIN@Bad?5call?5flags?5in?5PyCFunction_Ca@
  0005e	e8 00 00 00 00	 call	 PyErr_SetString

; 111  : 
; 112  :         return NULL;

  00063	33 c0		 xor	 eax, eax
  00065	e9 c3 00 00 00	 jmp	 $LN16@PyCFunctio@5
$LN5@PyCFunctio@5:

; 94   :         }
; 95   :         break;
; 96   :     case METH_O:
; 97   :         if (kw == NULL || PyDict_Size(kw) == 0) {

  0006a	4d 85 c0	 test	 r8, r8
  0006d	74 11		 je	 SHORT $LN3@PyCFunctio@5
  0006f	49 8b c8	 mov	 rcx, r8
  00072	e8 00 00 00 00	 call	 PyDict_Size
  00077	48 85 c0	 test	 rax, rax
  0007a	0f 85 87 00 00
	00		 jne	 $LN12@PyCFunctio@5
$LN3@PyCFunctio@5:

; 98   :             size = PyTuple_GET_SIZE(arg);

  00080	4c 8b 4e 60	 mov	 r9, QWORD PTR [rsi+96]

; 99   :             if (size == 1)

  00084	49 83 f9 01	 cmp	 r9, 1
  00088	75 09		 jne	 SHORT $LN2@PyCFunctio@5

; 100  :                 return (*meth)(self, PyTuple_GET_ITEM(arg, 0));

  0008a	48 8b 56 70	 mov	 rdx, QWORD PTR [rsi+112]
  0008e	e9 95 00 00 00	 jmp	 $LN20@PyCFunctio@5
$LN2@PyCFunctio@5:

; 101  :             PyErr_Format(PyExc_TypeError,
; 102  :                 "%.200s() takes exactly one argument (%zd given)",
; 103  :                 f->m_ml->ml_name, size);

  00093	4c 8b 47 60	 mov	 r8, QWORD PTR [rdi+96]
  00097	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0009e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@MJAFCLG@?$CF?4200s?$CI?$CJ?5takes?5exactly?5one?5argum@
  000a5	4d 8b 00	 mov	 r8, QWORD PTR [r8]
  000a8	e8 00 00 00 00	 call	 PyErr_Format

; 104  :             return NULL;

  000ad	33 c0		 xor	 eax, eax
  000af	eb 7c		 jmp	 SHORT $LN16@PyCFunctio@5
$LN9@PyCFunctio@5:

; 85   :     case METH_NOARGS:
; 86   :         if (kw == NULL || PyDict_Size(kw) == 0) {

  000b1	4d 85 c0	 test	 r8, r8
  000b4	74 0d		 je	 SHORT $LN7@PyCFunctio@5
  000b6	49 8b c8	 mov	 rcx, r8
  000b9	e8 00 00 00 00	 call	 PyDict_Size
  000be	48 85 c0	 test	 rax, rax
  000c1	75 44		 jne	 SHORT $LN12@PyCFunctio@5
$LN7@PyCFunctio@5:

; 87   :             size = PyTuple_GET_SIZE(arg);

  000c3	4c 8b 4e 60	 mov	 r9, QWORD PTR [rsi+96]

; 88   :             if (size == 0)

  000c7	4d 85 c9	 test	 r9, r9
  000ca	75 04		 jne	 SHORT $LN6@PyCFunctio@5

; 89   :                 return (*meth)(self, NULL);

  000cc	33 d2		 xor	 edx, edx
  000ce	eb 58		 jmp	 SHORT $LN20@PyCFunctio@5
$LN6@PyCFunctio@5:

; 90   :             PyErr_Format(PyExc_TypeError,
; 91   :                 "%.200s() takes no arguments (%zd given)",
; 92   :                 f->m_ml->ml_name, size);

  000d0	4c 8b 47 60	 mov	 r8, QWORD PTR [rdi+96]
  000d4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@PIHKOAGH@?$CF?4200s?$CI?$CJ?5takes?5no?5arguments?5?$CI?$CFzd@
  000e2	4d 8b 00	 mov	 r8, QWORD PTR [r8]
  000e5	e8 00 00 00 00	 call	 PyErr_Format

; 93   :             return NULL;

  000ea	33 c0		 xor	 eax, eax
  000ec	eb 3f		 jmp	 SHORT $LN16@PyCFunctio@5
$LN10@PyCFunctio@5:

; 82   :         break;
; 83   :     case METH_VARARGS | METH_KEYWORDS:
; 84   :         return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);

  000ee	48 8b cb	 mov	 rcx, rbx
  000f1	ff d5		 call	 rbp
  000f3	eb 38		 jmp	 SHORT $LN16@PyCFunctio@5
$LN13@PyCFunctio@5:

; 79   :     case METH_VARARGS:
; 80   :         if (kw == NULL || PyDict_Size(kw) == 0)

  000f5	4d 85 c0	 test	 r8, r8
  000f8	74 2b		 je	 SHORT $LN11@PyCFunctio@5
  000fa	49 8b c8	 mov	 rcx, r8
  000fd	e8 00 00 00 00	 call	 PyDict_Size
  00102	48 85 c0	 test	 rax, rax
  00105	74 1e		 je	 SHORT $LN11@PyCFunctio@5
$LN12@PyCFunctio@5:

; 113  :     }
; 114  :     PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
; 115  :                  f->m_ml->ml_name);

  00107	4c 8b 47 60	 mov	 r8, QWORD PTR [rdi+96]
  0010b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00112	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@NIOJMLLF@?$CF?4200s?$CI?$CJ?5takes?5no?5keyword?5argume@
  00119	4d 8b 00	 mov	 r8, QWORD PTR [r8]
  0011c	e8 00 00 00 00	 call	 PyErr_Format

; 116  :     return NULL;

  00121	33 c0		 xor	 eax, eax
  00123	eb 08		 jmp	 SHORT $LN16@PyCFunctio@5
$LN11@PyCFunctio@5:

; 81   :             return (*meth)(self, arg);

  00125	48 8b d6	 mov	 rdx, rsi
$LN20@PyCFunctio@5:
  00128	48 8b cb	 mov	 rcx, rbx
  0012b	ff d5		 call	 rbp
$LN16@PyCFunctio@5:

; 117  : }

  0012d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00132	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00137	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0013c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00140	5f		 pop	 rdi
  00141	c3		 ret	 0
PyCFunction_Call ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@EGGLIEGF@meth_dealloc?$AA@		; `string'
EXTRN	PyObject_GC_Del:PROC
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$meth_dealloc DD imagerel meth_dealloc
	DD	imagerel meth_dealloc+459
	DD	imagerel $unwind$meth_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$meth_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0N@EGGLIEGF@meth_dealloc?$AA@
CONST	SEGMENT
??_C@_0N@EGGLIEGF@meth_dealloc?$AA@ DB 'meth_dealloc', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\methodobject.c
CONST	ENDS
;	COMDAT meth_dealloc
_TEXT	SEGMENT
m$ = 64
meth_dealloc PROC					; COMDAT

; 123  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 124  :     Py_GUARD

  0000d	e8 00 00 00 00	 call	 _Py_PXCTX
  00012	85 c0		 test	 eax, eax
  00014	74 1a		 je	 SHORT $LN15@meth_deall
  00016	45 33 c9	 xor	 r9d, r9d
  00019	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@JCLMKNNL@?4?4?2Objects?2methodobject?4c?$AA@
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@EGGLIEGF@meth_dealloc?$AA@
  00027	45 8d 41 7c	 lea	 r8d, QWORD PTR [r9+124]
  0002b	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN15@meth_deall:

; 125  :     _PyObject_GC_UNTRACK(m);

  00030	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@JCLMKNNL@?4?4?2Objects?2methodobject?4c?$AA@
  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@EGGLIEGF@meth_dealloc?$AA@
  0003e	4c 8b cf	 mov	 r9, rdi
  00041	41 b8 7d 00 00
	00		 mov	 r8d, 125		; 0000007dH
  00047	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0004f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00054	85 c0		 test	 eax, eax
  00056	75 52		 jne	 SHORT $LN11@meth_deall
  00058	44 8d 40 7d	 lea	 r8d, QWORD PTR [rax+125]
  0005c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@JCLMKNNL@?4?4?2Objects?2methodobject?4c?$AA@
  00063	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@EGGLIEGF@meth_dealloc?$AA@
  0006a	4c 8b cf	 mov	 r9, rdi
  0006d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00075	e8 00 00 00 00	 call	 _PyParallel_Guard
  0007a	85 c0		 test	 eax, eax
  0007c	74 04		 je	 SHORT $LN18@meth_deall
  0007e	33 d2		 xor	 edx, edx
  00080	eb 04		 jmp	 SHORT $LN19@meth_deall
$LN18@meth_deall:
  00082	48 8d 57 e8	 lea	 rdx, QWORD PTR [rdi-24]
$LN19@meth_deall:
  00086	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00089	48 8b 4a 08	 mov	 rcx, QWORD PTR [rdx+8]
  0008d	48 c7 42 10 fe
	ff ff ff	 mov	 QWORD PTR [rdx+16], -2
  00095	48 89 01	 mov	 QWORD PTR [rcx], rax
  00098	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  0009b	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  0009f	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  000a3	48 c7 02 00 00
	00 00		 mov	 QWORD PTR [rdx], 0
$LN11@meth_deall:

; 126  :     Py_XDECREF(m->m_self);

  000aa	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  000ae	48 85 db	 test	 rbx, rbx
  000b1	74 65		 je	 SHORT $LN9@meth_deall
  000b3	e8 00 00 00 00	 call	 _Py_PXCTX
  000b8	85 c0		 test	 eax, eax
  000ba	75 5c		 jne	 SHORT $LN9@meth_deall
  000bc	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000c0	a8 20		 test	 al, 32			; 00000020H
  000c2	75 4c		 jne	 SHORT $LN24@meth_deall
  000c4	84 c0		 test	 al, al
  000c6	78 48		 js	 SHORT $LN24@meth_deall
  000c8	a8 02		 test	 al, 2
  000ca	75 4c		 jne	 SHORT $LN9@meth_deall
  000cc	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000d0	75 46		 jne	 SHORT $LN9@meth_deall
  000d2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000e0	4c 8b cb	 mov	 r9, rbx
  000e3	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000e9	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000f1	e8 00 00 00 00	 call	 _PyParallel_Guard
  000f6	48 8b cb	 mov	 rcx, rbx
  000f9	85 c0		 test	 eax, eax
  000fb	74 07		 je	 SHORT $LN29@meth_deall
  000fd	e8 00 00 00 00	 call	 _Px_Dealloc
  00102	eb 14		 jmp	 SHORT $LN9@meth_deall
$LN29@meth_deall:
  00104	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00108	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0010e	eb 08		 jmp	 SHORT $LN9@meth_deall
$LN24@meth_deall:
  00110	48 8b cb	 mov	 rcx, rbx
  00113	e8 00 00 00 00	 call	 Px_DecRef
$LN9@meth_deall:

; 127  :     Py_XDECREF(m->m_module);

  00118	48 8b 5f 70	 mov	 rbx, QWORD PTR [rdi+112]
  0011c	48 85 db	 test	 rbx, rbx
  0011f	74 65		 je	 SHORT $LN5@meth_deall
  00121	e8 00 00 00 00	 call	 _Py_PXCTX
  00126	85 c0		 test	 eax, eax
  00128	75 5c		 jne	 SHORT $LN5@meth_deall
  0012a	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0012e	a8 20		 test	 al, 32			; 00000020H
  00130	75 4c		 jne	 SHORT $LN35@meth_deall
  00132	84 c0		 test	 al, al
  00134	78 48		 js	 SHORT $LN35@meth_deall
  00136	a8 02		 test	 al, 2
  00138	75 4c		 jne	 SHORT $LN5@meth_deall
  0013a	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0013e	75 46		 jne	 SHORT $LN5@meth_deall
  00140	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00147	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0014e	4c 8b cb	 mov	 r9, rbx
  00151	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00157	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0015f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00164	48 8b cb	 mov	 rcx, rbx
  00167	85 c0		 test	 eax, eax
  00169	74 07		 je	 SHORT $LN40@meth_deall
  0016b	e8 00 00 00 00	 call	 _Px_Dealloc
  00170	eb 14		 jmp	 SHORT $LN5@meth_deall
$LN40@meth_deall:
  00172	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00176	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0017c	eb 08		 jmp	 SHORT $LN5@meth_deall
$LN35@meth_deall:
  0017e	48 8b cb	 mov	 rcx, rbx
  00181	e8 00 00 00 00	 call	 Px_DecRef
$LN5@meth_deall:

; 128  :     if (numfree < PyCFunction_MAXFREELIST) {

  00186	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR numfree
  0018c	81 f9 00 01 00
	00		 cmp	 ecx, 256		; 00000100H
  00192	7d 25		 jge	 SHORT $LN2@meth_deall

; 129  :         m->m_self = (PyObject *)free_list;

  00194	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR free_list

; 130  :         free_list = m;
; 131  :         numfree++;

  0019b	ff c1		 inc	 ecx
  0019d	48 89 3d 00 00
	00 00		 mov	 QWORD PTR free_list, rdi
  001a4	48 89 47 68	 mov	 QWORD PTR [rdi+104], rax
  001a8	89 0d 00 00 00
	00		 mov	 DWORD PTR numfree, ecx

; 135  :     }
; 136  : }

  001ae	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  001b3	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001b7	5f		 pop	 rdi
  001b8	c3		 ret	 0
$LN2@meth_deall:

; 132  :     }
; 133  :     else {
; 134  :         PyObject_GC_Del(m);

  001b9	48 8b cf	 mov	 rcx, rdi

; 135  :     }
; 136  : }

  001bc	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  001c1	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001c5	5f		 pop	 rdi
  001c6	e9 00 00 00 00	 jmp	 PyObject_GC_Del
meth_dealloc ENDP
_TEXT	ENDS
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyUnicode_FromString:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$meth_get__doc__ DD imagerel meth_get__doc__
	DD	imagerel meth_get__doc__+107
	DD	imagerel $unwind$meth_get__doc__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$meth_get__doc__ DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\methodobject.c
xdata	ENDS
;	COMDAT meth_get__doc__
_TEXT	SEGMENT
m$ = 64
closure$ = 72
meth_get__doc__ PROC					; COMDAT

; 140  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 141  :     const char *doc = m->m_ml->ml_doc;

  00004	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  00008	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]

; 142  : 
; 143  :     if (doc != NULL)

  0000c	48 85 c9	 test	 rcx, rcx
  0000f	74 09		 je	 SHORT $LN1@meth_get__

; 147  : }

  00011	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00015	e9 00 00 00 00	 jmp	 PyUnicode_FromString
$LN1@meth_get__:

; 144  :         return PyUnicode_FromString(doc);
; 145  :     Py_INCREF(Py_None);

  0001a	e8 00 00 00 00	 call	 _Py_PXCTX
  0001f	85 c0		 test	 eax, eax
  00021	75 3c		 jne	 SHORT $LN5@meth_get__
  00023	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00038	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0003e	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00046	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004b	85 c0		 test	 eax, eax
  0004d	75 09		 jne	 SHORT $LN4@meth_get__
  0004f	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00056	74 07		 je	 SHORT $LN5@meth_get__
$LN4@meth_get__:
  00058	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN5@meth_get__:

; 146  :     return Py_None;

  0005f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 147  : }

  00066	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006a	c3		 ret	 0
meth_get__doc__ ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT meth_get__name__
_TEXT	SEGMENT
m$ = 8
closure$ = 16
meth_get__name__ PROC					; COMDAT

; 152  :     return PyUnicode_FromString(m->m_ml->ml_name);

  00000	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00004	48 8b 09	 mov	 rcx, QWORD PTR [rcx]

; 153  : }

  00007	e9 00 00 00 00	 jmp	 PyUnicode_FromString
meth_get__name__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_05BMJGAJPB@?$CFS?4?$CFs?$AA@		; `string'
PUBLIC	??_C@_0DI@HJOCGJPC@?$DMmethod?$DO?4__class__?4__qualname__?5@ ; `string'
EXTRN	PyUnicode_FromFormat:PROC
EXTRN	_PyObject_GetAttrId:PROC
EXTRN	PyType_IsSubtype:PROC
EXTRN	PyModule_Type:BYTE
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$meth_get__qualname__ DD imagerel meth_get__qualname__
	DD	imagerel meth_get__qualname__+75
	DD	imagerel $unwind$meth_get__qualname__
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$meth_get__qualname__ DD imagerel meth_get__qualname__+75
	DD	imagerel meth_get__qualname__+176
	DD	imagerel $chain$0$meth_get__qualname__
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$meth_get__qualname__ DD imagerel meth_get__qualname__+176
	DD	imagerel meth_get__qualname__+223
	DD	imagerel $chain$2$meth_get__qualname__
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$meth_get__qualname__ DD imagerel meth_get__qualname__+223
	DD	imagerel meth_get__qualname__+240
	DD	imagerel $chain$3$meth_get__qualname__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$meth_get__qualname__ DD 021H
	DD	imagerel meth_get__qualname__
	DD	imagerel meth_get__qualname__+75
	DD	imagerel $unwind$meth_get__qualname__
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$meth_get__qualname__ DD 020021H
	DD	067400H
	DD	imagerel meth_get__qualname__
	DD	imagerel meth_get__qualname__+75
	DD	imagerel $unwind$meth_get__qualname__
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$meth_get__qualname__ DD 020521H
	DD	067405H
	DD	imagerel meth_get__qualname__
	DD	imagerel meth_get__qualname__+75
	DD	imagerel $unwind$meth_get__qualname__
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$meth_get__qualname__ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_05BMJGAJPB@?$CFS?4?$CFs?$AA@
CONST	SEGMENT
??_C@_05BMJGAJPB@?$CFS?4?$CFs?$AA@ DB '%S.%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@HJOCGJPC@?$DMmethod?$DO?4__class__?4__qualname__?5@
CONST	SEGMENT
??_C@_0DI@HJOCGJPC@?$DMmethod?$DO?4__class__?4__qualname__?5@ DB '<method'
	DB	'>.__class__.__qualname__ is not a unicode object', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT meth_get__qualname__
_TEXT	SEGMENT
m$ = 48
closure$ = 56
meth_get__qualname__ PROC				; COMDAT

; 157  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 158  :     /* If __self__ is a module or NULL, return m.__name__
; 159  :        (e.g. len.__qualname__ == 'len')
; 160  : 
; 161  :        If __self__ is a type, return m.__self__.__qualname__ + '.' + m.__name__
; 162  :        (e.g. dict.fromkeys.__qualname__ == 'dict.fromkeys')
; 163  : 
; 164  :        Otherwise return type(m.__self__).__qualname__ + '.' + m.__name__
; 165  :        (e.g. [].append.__qualname__ == 'list.append') */
; 166  :     PyObject *type, *type_qualname, *res;
; 167  :     _Py_IDENTIFIER(__qualname__);
; 168  : 
; 169  :     if (m->m_self == NULL || PyModule_Check(m->m_self))

  00006	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	48 85 c0	 test	 rax, rax
  00010	0f 84 c9 00 00
	00		 je	 $LN7@meth_get__@2
  00016	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0001a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  00021	48 3b ca	 cmp	 rcx, rdx
  00024	0f 84 b5 00 00
	00		 je	 $LN7@meth_get__@2
  0002a	e8 00 00 00 00	 call	 PyType_IsSubtype
  0002f	85 c0		 test	 eax, eax
  00031	0f 85 a8 00 00
	00		 jne	 $LN7@meth_get__@2

; 171  : 
; 172  :     type = PyType_Check(m->m_self) ? m->m_self : (PyObject*)Py_TYPE(m->m_self);

  00037	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]

; 173  : 
; 174  :     type_qualname = _PyObject_GetAttrId(type, &PyId___qualname__);

  0003b	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  00042	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId___qualname__@?1??meth_get__qualname__@@9@9
  00047	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0004b	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  00050	f7 81 00 01 00
	00 00 00 00 80	 test	 DWORD PTR [rcx+256], -2147483648 ; ffffffff80000000H
  0005a	48 0f 45 c8	 cmovne	 rcx, rax
  0005e	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00067	4a 03 14 c0	 add	 rdx, QWORD PTR [rax+r8*8]
  0006b	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00070	48 8b f8	 mov	 rdi, rax

; 175  :     if (type_qualname == NULL)

  00073	48 85 c0	 test	 rax, rax

; 176  :         return NULL;

  00076	74 2b		 je	 SHORT $LN15@meth_get__@2

; 177  : 
; 178  :     if (!PyUnicode_Check(type_qualname)) {

  00078	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0007c	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  00086	75 28		 jne	 SHORT $LN5@meth_get__@2

; 179  :         PyErr_SetString(PyExc_TypeError, "<method>.__class__."
; 180  :                         "__qualname__ is not a unicode object");

  00088	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0008f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DI@HJOCGJPC@?$DMmethod?$DO?4__class__?4__qualname__?5@
  00096	e8 00 00 00 00	 call	 PyErr_SetString

; 181  :         Py_XDECREF(type_qualname);

  0009b	48 8b cf	 mov	 rcx, rdi
  0009e	e8 00 00 00 00	 call	 _Py_DecRef
$LN15@meth_get__@2:

; 182  :         return NULL;

  000a3	33 c0		 xor	 eax, eax
  000a5	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 188  : }

  000aa	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ae	5b		 pop	 rbx
  000af	c3		 ret	 0
$LN5@meth_get__@2:

; 183  :     }
; 184  : 
; 185  :     res = PyUnicode_FromFormat("%S.%s", type_qualname, m->m_ml->ml_name);

  000b0	4c 8b 43 60	 mov	 r8, QWORD PTR [rbx+96]
  000b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05BMJGAJPB@?$CFS?4?$CFs?$AA@
  000bb	48 8b d7	 mov	 rdx, rdi
  000be	4d 8b 00	 mov	 r8, QWORD PTR [r8]
  000c1	e8 00 00 00 00	 call	 PyUnicode_FromFormat

; 186  :     Py_DECREF(type_qualname);

  000c6	48 8b cf	 mov	 rcx, rdi
  000c9	48 8b d8	 mov	 rbx, rax
  000cc	e8 00 00 00 00	 call	 _Py_DecRef
  000d1	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 187  :     return res;

  000d6	48 8b c3	 mov	 rax, rbx

; 188  : }

  000d9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000dd	5b		 pop	 rbx
  000de	c3		 ret	 0
$LN7@meth_get__@2:

; 170  :         return PyUnicode_FromString(m->m_ml->ml_name);

  000df	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  000e3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]

; 188  : }

  000e6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ea	5b		 pop	 rbx
  000eb	e9 00 00 00 00	 jmp	 PyUnicode_FromString
meth_get__qualname__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@OOKCHEEM@meth_traverse?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$meth_traverse DD imagerel meth_traverse
	DD	imagerel meth_traverse+152
	DD	imagerel $unwind$meth_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$meth_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0O@OOKCHEEM@meth_traverse?$AA@
CONST	SEGMENT
??_C@_0O@OOKCHEEM@meth_traverse?$AA@ DB 'meth_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT meth_traverse
_TEXT	SEGMENT
m$ = 48
visit$ = 56
arg$ = 64
meth_traverse PROC					; COMDAT

; 192  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 193  :     Py_VISIT(m->m_self);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN9@meth_trave
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@JCLMKNNL@?4?4?2Objects?2methodobject?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@OOKCHEEM@meth_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 c1 00 00
	00		 mov	 r8d, 193		; 000000c1H
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@meth_trave:
  0003d	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN11@meth_trave
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 39		 jne	 SHORT $LN13@meth_trave
$LN11@meth_trave:

; 194  :     Py_VISIT(m->m_module);

  0004f	e8 00 00 00 00	 call	 _Py_PXCTX
  00054	85 c0		 test	 eax, eax
  00056	74 1c		 je	 SHORT $LN3@meth_trave
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@JCLMKNNL@?4?4?2Objects?2methodobject?4c?$AA@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@OOKCHEEM@meth_traverse?$AA@
  00066	45 33 c9	 xor	 r9d, r9d
  00069	41 b8 c2 00 00
	00		 mov	 r8d, 194		; 000000c2H
  0006f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@meth_trave:
  00074	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00078	48 85 c9	 test	 rcx, rcx
  0007b	74 09		 je	 SHORT $LN5@meth_trave
  0007d	48 8b d7	 mov	 rdx, rdi
  00080	ff d6		 call	 rsi
  00082	85 c0		 test	 eax, eax
  00084	75 02		 jne	 SHORT $LN13@meth_trave
$LN5@meth_trave:

; 195  :     return 0;

  00086	33 c0		 xor	 eax, eax
$LN13@meth_trave:

; 196  : }

  00088	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00092	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00096	5f		 pop	 rdi
  00097	c3		 ret	 0
meth_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$meth_get__self__ DD imagerel meth_get__self__
	DD	imagerel meth_get__self__+100
	DD	imagerel $unwind$meth_get__self__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$meth_get__self__ DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\methodobject.c
xdata	ENDS
;	COMDAT meth_get__self__
_TEXT	SEGMENT
m$ = 64
closure$ = 72
meth_get__self__ PROC					; COMDAT

; 200  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 201  :     PyObject *self;
; 202  : 
; 203  :     self = PyCFunction_GET_SELF(m);

  00006	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  0000a	f6 40 10 20	 test	 BYTE PTR [rax+16], 32	; 00000020H
  0000e	75 09		 jne	 SHORT $LN10@meth_get__@3
  00010	48 8b 59 68	 mov	 rbx, QWORD PTR [rcx+104]

; 204  :     if (self == NULL)

  00014	48 85 db	 test	 rbx, rbx
  00017	75 07		 jne	 SHORT $LN1@meth_get__@3
$LN10@meth_get__@3:

; 205  :         self = Py_None;

  00019	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
$LN1@meth_get__@3:

; 206  :     Py_INCREF(self);

  00020	e8 00 00 00 00	 call	 _Py_PXCTX
  00025	85 c0		 test	 eax, eax
  00027	75 32		 jne	 SHORT $LN11@meth_get__@3
  00029	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00030	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00037	4c 8b cb	 mov	 r9, rbx
  0003a	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00040	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00048	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004d	85 c0		 test	 eax, eax
  0004f	75 06		 jne	 SHORT $LN6@meth_get__@3
  00051	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00055	74 04		 je	 SHORT $LN11@meth_get__@3
$LN6@meth_get__@3:
  00057	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN11@meth_get__@3:

; 207  :     return self;

  0005b	48 8b c3	 mov	 rax, rbx

; 208  : }

  0005e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00062	5b		 pop	 rbx
  00063	c3		 ret	 0
meth_get__self__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@CFEIOCIE@?$DMbuilt?9in?5function?5?$CFs?$DO?$AA@ ; `string'
PUBLIC	??_C@_0CI@LNKKCIDJ@?$DMbuilt?9in?5method?5?$CFs?5of?5?$CFs?5object@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$meth_repr DD imagerel meth_repr
	DD	imagerel meth_repr+103
	DD	imagerel $unwind$meth_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$meth_repr DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0BH@CFEIOCIE@?$DMbuilt?9in?5function?5?$CFs?$DO?$AA@
CONST	SEGMENT
??_C@_0BH@CFEIOCIE@?$DMbuilt?9in?5function?5?$CFs?$DO?$AA@ DB '<built-in '
	DB	'function %s>', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@LNKKCIDJ@?$DMbuilt?9in?5method?5?$CFs?5of?5?$CFs?5object@
CONST	SEGMENT
??_C@_0CI@LNKKCIDJ@?$DMbuilt?9in?5method?5?$CFs?5of?5?$CFs?5object@ DB '<'
	DB	'built-in method %s of %s object at %p>', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT meth_repr
_TEXT	SEGMENT
m$ = 48
meth_repr PROC						; COMDAT

; 227  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 228  :     if (m->m_self == NULL || PyModule_Check(m->m_self))

  00006	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	48 85 c0	 test	 rax, rax
  00010	74 3d		 je	 SHORT $LN1@meth_repr
  00012	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  0001d	48 3b ca	 cmp	 rcx, rdx
  00020	74 2d		 je	 SHORT $LN1@meth_repr
  00022	e8 00 00 00 00	 call	 PyType_IsSubtype
  00027	85 c0		 test	 eax, eax
  00029	75 24		 jne	 SHORT $LN1@meth_repr

; 231  :     return PyUnicode_FromFormat("<built-in method %s of %s object at %p>",
; 232  :                                m->m_ml->ml_name,
; 233  :                                m->m_self->ob_type->tp_name,
; 234  :                                m->m_self);

  0002b	4c 8b 4b 68	 mov	 r9, QWORD PTR [rbx+104]
  0002f	48 8b 53 60	 mov	 rdx, QWORD PTR [rbx+96]
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CI@LNKKCIDJ@?$DMbuilt?9in?5method?5?$CFs?5of?5?$CFs?5object@
  0003a	4d 8b 41 58	 mov	 r8, QWORD PTR [r9+88]
  0003e	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00041	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]

; 235  : }

  00045	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00049	5b		 pop	 rbx
  0004a	e9 00 00 00 00	 jmp	 PyUnicode_FromFormat
$LN1@meth_repr:

; 229  :         return PyUnicode_FromFormat("<built-in function %s>",
; 230  :                                    m->m_ml->ml_name);

  0004f	48 8b 53 60	 mov	 rdx, QWORD PTR [rbx+96]
  00053	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@CFEIOCIE@?$DMbuilt?9in?5function?5?$CFs?$DO?$AA@
  0005a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]

; 235  : }

  0005d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00061	5b		 pop	 rbx
  00062	e9 00 00 00 00	 jmp	 PyUnicode_FromFormat
meth_repr ENDP
_TEXT	ENDS
EXTRN	_Py_NotImplementedStruct:BYTE
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$meth_richcompare DD imagerel meth_richcompare
	DD	imagerel meth_richcompare+48
	DD	imagerel $unwind$meth_richcompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$meth_richcompare DD imagerel meth_richcompare+48
	DD	imagerel meth_richcompare+154
	DD	imagerel $chain$0$meth_richcompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$meth_richcompare DD imagerel meth_richcompare+154
	DD	imagerel meth_richcompare+235
	DD	imagerel $chain$1$meth_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$meth_richcompare DD 021H
	DD	imagerel meth_richcompare
	DD	imagerel meth_richcompare+48
	DD	imagerel $unwind$meth_richcompare
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$meth_richcompare DD 020521H
	DD	063405H
	DD	imagerel meth_richcompare
	DD	imagerel meth_richcompare+48
	DD	imagerel $unwind$meth_richcompare
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$meth_richcompare DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\methodobject.c
xdata	ENDS
;	COMDAT meth_richcompare
_TEXT	SEGMENT
self$ = 64
other$ = 72
op$ = 80
meth_richcompare PROC					; COMDAT

; 239  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	4c 8b ca	 mov	 r9, rdx

; 240  :     PyCFunctionObject *a, *b;
; 241  :     PyObject *res;
; 242  :     int eq;
; 243  : 
; 244  :     if ((op != Py_EQ && op != Py_NE) ||
; 245  :         !PyCFunction_Check(self) ||
; 246  :         !PyCFunction_Check(other))

  00007	41 83 f8 02	 cmp	 r8d, 2
  0000b	74 0a		 je	 SHORT $LN4@meth_richc
  0000d	41 83 f8 03	 cmp	 r8d, 3
  00011	0f 85 83 00 00
	00		 jne	 $LN5@meth_richc
$LN4@meth_richc:
  00017	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCFunction_Type
  0001e	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00022	75 76		 jne	 SHORT $LN5@meth_richc
  00024	48 39 42 58	 cmp	 QWORD PTR [rdx+88], rax
  00028	75 70		 jne	 SHORT $LN5@meth_richc

; 249  :     }
; 250  :     a = (PyCFunctionObject *)self;
; 251  :     b = (PyCFunctionObject *)other;
; 252  :     eq = a->m_self == b->m_self;

  0002a	49 8b 41 68	 mov	 rax, QWORD PTR [r9+104]
  0002e	33 d2		 xor	 edx, edx
  00030	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00035	48 39 41 68	 cmp	 QWORD PTR [rcx+104], rax
  00039	0f 94 c2	 sete	 dl

; 253  :     if (eq)

  0003c	85 d2		 test	 edx, edx
  0003e	74 15		 je	 SHORT $LN3@meth_richc

; 254  :         eq = a->m_ml->ml_meth == b->m_ml->ml_meth;

  00040	49 8b 41 60	 mov	 rax, QWORD PTR [r9+96]
  00044	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00048	33 d2		 xor	 edx, edx
  0004a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0004e	48 39 41 08	 cmp	 QWORD PTR [rcx+8], rax
  00052	0f 94 c2	 sete	 dl
$LN3@meth_richc:

; 255  :     if (op == Py_EQ)

  00055	41 83 f8 02	 cmp	 r8d, 2
  00059	75 16		 jne	 SHORT $LN2@meth_richc

; 256  :         res = eq ? Py_True : Py_False;

  0005b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00062	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  00069	85 d2		 test	 edx, edx
  0006b	48 0f 45 d8	 cmovne	 rbx, rax

; 257  :     else

  0006f	eb 14		 jmp	 SHORT $LN1@meth_richc
$LN2@meth_richc:

; 258  :         res = eq ? Py_False : Py_True;

  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  00078	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_TrueStruct
  0007f	85 d2		 test	 edx, edx
  00081	48 0f 45 d9	 cmovne	 rbx, rcx
$LN1@meth_richc:

; 259  :     Py_INCREF(res);

  00085	48 8b cb	 mov	 rcx, rbx
  00088	e8 00 00 00 00	 call	 _Py_IncRef

; 260  :     return res;

  0008d	48 8b c3	 mov	 rax, rbx
  00090	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 261  : }

  00095	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00099	c3		 ret	 0
$LN5@meth_richc:

; 247  :     {
; 248  :         Py_RETURN_NOTIMPLEMENTED;

  0009a	e8 00 00 00 00	 call	 _Py_PXCTX
  0009f	85 c0		 test	 eax, eax
  000a1	75 3c		 jne	 SHORT $LN10@meth_richc
  000a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NotImplementedStruct
  000aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000b8	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000be	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000c6	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cb	85 c0		 test	 eax, eax
  000cd	75 09		 jne	 SHORT $LN9@meth_richc
  000cf	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NotImplementedStruct+32, 32 ; 00000020H
  000d6	74 07		 je	 SHORT $LN10@meth_richc
$LN9@meth_richc:
  000d8	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NotImplementedStruct+80
$LN10@meth_richc:
  000df	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct

; 261  : }

  000e6	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ea	c3		 ret	 0
meth_richcompare ENDP
_TEXT	ENDS
EXTRN	PyObject_Hash:PROC
EXTRN	_Py_HashPointer:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$meth_hash DD imagerel meth_hash
	DD	imagerel meth_hash+104
	DD	imagerel $unwind$meth_hash
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$meth_hash DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT meth_hash
_TEXT	SEGMENT
a$ = 48
meth_hash PROC						; COMDAT

; 265  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f9	 mov	 rdi, rcx

; 266  :     Py_hash_t x, y;
; 267  :     if (a->m_self == NULL)

  0000d	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00011	48 85 c9	 test	 rcx, rcx
  00014	75 35		 jne	 SHORT $LN5@meth_hash

; 268  :         x = 0;

  00016	33 db		 xor	 ebx, ebx
$LN3@meth_hash:

; 273  :     }
; 274  :     y = _Py_HashPointer((void*)(a->m_ml->ml_meth));

  00018	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  0001c	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00020	e8 00 00 00 00	 call	 _Py_HashPointer

; 275  :     if (y == -1)

  00025	48 83 f8 ff	 cmp	 rax, -1

; 276  :         return -1;

  00029	74 2e		 je	 SHORT $LN8@meth_hash

; 277  :     x ^= y;

  0002b	48 33 d8	 xor	 rbx, rax

; 278  :     if (x == -1)

  0002e	48 c7 c0 fe ff
	ff ff		 mov	 rax, -2
  00035	48 83 fb ff	 cmp	 rbx, -1
  00039	48 0f 44 d8	 cmove	 rbx, rax

; 279  :         x = -2;
; 280  :     return x;

  0003d	48 8b c3	 mov	 rax, rbx

; 281  : }

  00040	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00045	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00049	5f		 pop	 rdi
  0004a	c3		 ret	 0
$LN5@meth_hash:

; 269  :     else {
; 270  :         x = PyObject_Hash(a->m_self);

  0004b	e8 00 00 00 00	 call	 PyObject_Hash
  00050	48 8b d8	 mov	 rbx, rax

; 271  :         if (x == -1)

  00053	48 83 f8 ff	 cmp	 rax, -1
  00057	75 bf		 jne	 SHORT $LN3@meth_hash
$LN8@meth_hash:

; 272  :             return -1;

  00059	48 83 c8 ff	 or	 rax, -1

; 281  : }

  0005d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00062	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00066	5f		 pop	 rdi
  00067	c3		 ret	 0
meth_hash ENDP
_TEXT	ENDS
PUBLIC	PyCFunction_ClearFreeList
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCFunction_ClearFreeList DD imagerel $LN8
	DD	imagerel $LN8+90
	DD	imagerel $unwind$PyCFunction_ClearFreeList
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCFunction_ClearFreeList DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyCFunction_ClearFreeList
_TEXT	SEGMENT
PyCFunction_ClearFreeList PROC				; COMDAT

; 323  : {

$LN8:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 324  :     int freelist_size = numfree;

  00006	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR numfree

; 325  : 
; 326  :     if (Py_PXCTX)

  0000c	e8 00 00 00 00	 call	 _Py_PXCTX
  00011	85 c0		 test	 eax, eax
  00013	74 08		 je	 SHORT $LN6@PyCFunctio@6

; 327  :         return 0;

  00015	33 c0		 xor	 eax, eax

; 337  : }

  00017	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001b	5b		 pop	 rbx
  0001c	c3		 ret	 0
$LN6@PyCFunctio@6:

; 328  : 
; 329  :     while (free_list) {

  0001d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR free_list
  00024	48 85 c9	 test	 rcx, rcx
  00027	74 29		 je	 SHORT $LN1@PyCFunctio@6
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@PyCFunctio@6:

; 330  :         PyCFunctionObject *v = free_list;
; 331  :         free_list = (PyCFunctionObject *)(v->m_self);

  00030	48 8b 51 68	 mov	 rdx, QWORD PTR [rcx+104]
  00034	48 89 15 00 00
	00 00		 mov	 QWORD PTR free_list, rdx

; 332  :         PyObject_GC_Del(v);

  0003b	e8 00 00 00 00	 call	 PyObject_GC_Del
  00040	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR free_list

; 333  :         numfree--;

  00047	ff 0d 00 00 00
	00		 dec	 DWORD PTR numfree
  0004d	48 85 c9	 test	 rcx, rcx
  00050	75 de		 jne	 SHORT $LL2@PyCFunctio@6
$LN1@PyCFunctio@6:

; 334  :     }
; 335  :     assert(numfree == 0);
; 336  :     return freelist_size;

  00052	8b c3		 mov	 eax, ebx

; 337  : }

  00054	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00058	5b		 pop	 rbx
  00059	c3		 ret	 0
PyCFunction_ClearFreeList ENDP
_TEXT	ENDS
PUBLIC	PyCFunction_Fini
; Function compile flags: /Ogtpy
;	COMDAT PyCFunction_Fini
_TEXT	SEGMENT
PyCFunction_Fini PROC					; COMDAT

; 342  :     (void)PyCFunction_ClearFreeList();
; 343  : }

  00000	e9 00 00 00 00	 jmp	 PyCFunction_ClearFreeList
PyCFunction_Fini ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@NJDHPBHJ@free?5PyCFunctionObject?$AA@	; `string'
PUBLIC	_PyCFunction_DebugMallocStats
EXTRN	_PyDebugAllocatorStats:PROC
;	COMDAT ??_C@_0BH@NJDHPBHJ@free?5PyCFunctionObject?$AA@
CONST	SEGMENT
??_C@_0BH@NJDHPBHJ@free?5PyCFunctionObject?$AA@ DB 'free PyCFunctionObjec'
	DB	't', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyCFunction_DebugMallocStats
_TEXT	SEGMENT
out$ = 8
_PyCFunction_DebugMallocStats PROC			; COMDAT

; 349  :     _PyDebugAllocatorStats(out,
; 350  :                            "free PyCFunctionObject",
; 351  :                            numfree, sizeof(PyCFunctionObject));

  00000	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR numfree
  00007	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@NJDHPBHJ@free?5PyCFunctionObject?$AA@
  0000e	41 b9 80 00 00
	00		 mov	 r9d, 128		; 00000080H

; 352  : }

  00014	e9 00 00 00 00	 jmp	 _PyDebugAllocatorStats
_PyCFunction_DebugMallocStats ENDP
_TEXT	ENDS
PUBLIC	PyCFunction_New
; Function compile flags: /Ogtpy
;	COMDAT PyCFunction_New
_TEXT	SEGMENT
ml$ = 8
self$ = 16
PyCFunction_New PROC					; COMDAT

; 365  :     return PyCFunction_NewEx(ml, self, NULL);

  00000	45 33 c0	 xor	 r8d, r8d

; 366  : }

  00003	e9 00 00 00 00	 jmp	 PyCFunction_NewEx
PyCFunction_New ENDP
_TEXT	ENDS
END
